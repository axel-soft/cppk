////////////////////////////////////////////////////////////////////////////////
// Модуль для работы с уведомлениями.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует список бизнес-событий, по которым необходим группировать уведомления.
//
// Параметры:
//  ВидыСобытий - Массив - Сформированные типовые виды событий для группировки.
//  ПолучательУведомления - СправочникСсылка.Пользователь - Получатель уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ уведомления.
//
// Возвращаемое значение:
//  Массив - Виды бизнес-событий для группировки.
//
Процедура ВидыСобытийДляГруппировки(ВидыСобытий, ПолучательУведомления, СпособУведомления) Экспорт
	
	Если СпособУведомления = Перечисления.СпособыУведомления.ПоПочте Тогда
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.ВозобновлениеБизнесПроцесса);
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.ОстановкаБизнесПроцесса);
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса);
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеСообщения); 
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.ОшибкаВДокументахПереданныхВАрхив);
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.ПринятиеДокументовВАрхив);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокКонтроля);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченКонтроль);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченаКонтрольнаяТочка);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокКонтрольнойТочки);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченаОценкаКонтрольнойТочки);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ОбменПоЭДОВыполненУспешно);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ОтклонениеДокументаКонтрагентомПоЭДО);
		
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ЭДОДокументАннулирован);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ЭДОДокументОтклонен);
		
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ЭДОТребуетсяПодтверждениеАннулирования);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ЭДОДокументИсправлен);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ОзнакомлениеСПоложительнымРезультатомПроцесса);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ОзнакомлениеСПоложительнымРезультатомДействияОбработки);
	ИначеЕсли СпособУведомления = Перечисления.СпособыУведомления.ПоSMS Тогда
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.СозданиеСообщения);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокКонтроля);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченКонтроль);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченаКонтрольнаяТочка);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокКонтрольнойТочки);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченаОценкаКонтрольнойТочки);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ОбменПоЭДОВыполненУспешно);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ОтклонениеДокументаКонтрагентомПоЭДО);  
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ЭДОДокументАннулирован); 
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ЭДОДокументОтклонен);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ЭДОТребуетсяПодтверждениеАннулирования);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ЭДОДокументИсправлен);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ОзнакомлениеСПоложительнымРезультатомПроцесса);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ОзнакомлениеСПоложительнымРезультатомДействияОбработки);
	ИначеЕсли СпособУведомления = Перечисления.СпособыУведомления.Окном Тогда
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокКонтроля);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченКонтроль);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченаКонтрольнаяТочка);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокКонтрольнойТочки);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПросроченаОценкаКонтрольнойТочки);
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.ОшибкаВДокументахПереданныхВАрхив);
		ВидыСобытий.Добавить(Справочники.ВидыБизнесСобытий.ПринятиеДокументовВАрхив);
	КонецЕсли;
	
	Если СпособУведомления = Перечисления.СпособыУведомления.ПоПочте Тогда
		
		// Учитываем глобальную настройку.
		ИспользоватьВыполнениеЗадачПоПочте = ПолучитьФункциональнуюОпцию("ИспользоватьВыполнениеЗадачПоПочте");
		
		Если ИспользоватьВыполнениеЗадачПоПочте Тогда
		
			ВключеноВыполнениеЗадачПоПочте = РегистрыСведений.НастройкиУведомлений.ПолучитьДополнительнуюНастройку(
				ПолучательУведомления,
				Перечисления.НастройкиУведомлений.ВыполнениеЗадачПоПочте);
			Если ВключеноВыполнениеЗадачПоПочте Тогда
				Индекс = ВидыСобытий.Найти(Справочники.ВидыБизнесСобытий.НоваяЗадача);
				Если Индекс <> Неопределено Тогда
					ВидыСобытий.Удалить(Индекс);
				КонецЕсли;
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	// Вызов переопределяемого метода для возможной корректировки состава вида событий для группировки.
	ВидыСобытийДляГруппировкиПереопределяемый(ВидыСобытий, ПолучательУведомления, СпособУведомления);
	
КонецПроцедуры

// Заполняет таблицу доступных уведомлений с учетом функциональных опций.
//
// Параметры:
//  ДоступныеУведомления - ТаблицаЗначений - Доступные уведомления.
//
Функция ДоступныеУведомления(ДоступныеУведомления) Экспорт
	
	СтруктураДополнительнойНастройки = Новый ФиксированнаяСтруктура("Настройка, Представление");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи") Тогда
		
		// Перенаправление моей задачи
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ПеренаправлениеМоейЗадачи;
		СтрокаУведомления.ОсновноеСобытие = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи;
		СтрокаУведомления.Представление = НСтр("ru = 'Задачи: перенаправление моей задачи'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Остановка и прерывание процессов.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса;
		СтрокаУведомления.Представление = НСтр("ru = 'Комплексные процессы: остановка, прерывание'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Выполнение задач по почте.
		СтрокаУведомления = ДоступныеУведомления.Найти(Справочники.ВидыБизнесСобытий.НоваяЗадача, "ВидСобытия");
		Если СтрокаУведомления <> Неопределено
			И ПолучитьФункциональнуюОпцию("ИспользоватьВыполнениеЗадачПоПочте") Тогда
			
			ДополнительнаяНастройка = Новый Структура(СтруктураДополнительнойНастройки);
			ДополнительнаяНастройка.Настройка = Перечисления.НастройкиУведомлений.ВыполнениеЗадачПоПочте;
			ДополнительнаяНастройка.Представление = НСтр("ru = 'Использовать выполнение задач по почте'");
			СтрокаУведомления.ДополнительныеНастройки.Добавить(ДополнительнаяНастройка);
		КонецЕсли;
		
		// Ознакомление с результатом завершения процесса.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ОзнакомлениеСПоложительнымРезультатомПроцесса;
		СтрокаУведомления.ОсновноеСобытие = Справочники.ВидыБизнесСобытий.ЗавершениеБизнесПроцесса;
		СтрокаУведомления.Представление = НСтр("ru = 'Процессы: успешное завершение'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;		
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбсуждения") Тогда
		
		// Появление ответа в форуме.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения;
		СтрокаУведомления.Представление = НСтр("ru = 'Форум: новый ответ на сообщение'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОтсутствия") Тогда
		
		// Создание отсутствия.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеОтсутствия;
		СтрокаУведомления.Представление = НСтр("ru = 'Отсутствия: создание нового'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Изменение отсутствия.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеОтсутствия;
		СтрокаУведомления.Представление = НСтр("ru = 'Отсутствия: изменение'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
	КонецЕсли;
	
	// Уведомления программы.
	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.УведомлениеПрограммы;
	СтрокаУведомления.Представление = НСтр("ru = 'Уведомления программы'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	СтрокаУведомления.ДоступнаЧастота = Ложь;
	СтрокаУведомления.ДоступенСрок = Ложь;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда
		
		// Уведомление об отсутствии исполнителя проектной задачи.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.НеУказанИсполнительПроектнойЗадачи;
		СтрокаУведомления.Представление = НСтр("ru = 'Проектные задачи: не указан исполнитель'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Истина;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда
		
		// Уведомление о просроченном контроле.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ПросроченКонтроль;
		СтрокаУведомления.Представление = НСтр("ru = 'Контроль: срок вышел'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Истина;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Приближение контрольного срока.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтроля;
		СтрокаУведомления.Представление = НСтр("ru = 'Контроль: приближение срока'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Истина;
		СтрокаУведомления.ДоступенСрок = Истина;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьМониторингПроцессов") Тогда
		
		Если ПравоДоступа("Просмотр", Метаданные.Справочники.ПоказателиПроцессов) Тогда
			
			// Уведомление об изменении значения показателя процессов.
			СтрокаУведомления = ДоступныеУведомления.Добавить();
			СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеЗначенияПоказателяПроцесса;
			СтрокаУведомления.Представление = НСтр("ru = 'Процессы: изменение значения показателя'");
			СтрокаУведомления.ДоступнаПодписка = Истина;
			СтрокаУведомления.ДоступнаЧастота = Ложь;
			СтрокаУведомления.ДоступенСрок = Ложь;
			
			// Процентное изменение показателя.
			ДополнительнаяНастройка = Новый Структура(СтруктураДополнительнойНастройки);
			ДополнительнаяНастройка.Настройка = Перечисления.НастройкиУведомлений.ПроцентноеИзменение;
			ДополнительнаяНастройка.Представление = НСтр("ru = 'Процентное изменение показателя'");
			СтрокаУведомления.ДополнительныеНастройки.Добавить(ДополнительнаяНастройка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБронированиеПомещений") Тогда
		
		// Создание брони.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеБрони;
		СтрокаУведомления.Представление = НСтр("ru = 'Брони: создание новой'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Изменение брони.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеБрони;
		СтрокаУведомления.Представление = НСтр("ru = 'Брони: изменение'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Отмена брони.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.ОтменаБрони;
		СтрокаУведомления.Представление = НСтр("ru = 'Брони: отмена'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольныеТочки") Тогда
		
		// Уведомление о просроченном контроле.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаКонтрольнаяТочка;
		СтрокаУведомления.Представление = НСтр("ru = 'Контрольные точки: срок вышел'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Истина;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Приближение контрольного срока.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтрольнойТочки;
		СтрокаУведомления.Представление = НСтр("ru = 'Контрольные точки: приближение срока'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Истина;
		СтрокаУведомления.ДоступенСрок = Истина;
		
		// Приближение контрольного срока.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаОценкаКонтрольнойТочки;
		СтрокаУведомления.Представление = НСтр("ru = 'Контрольные точки: просрочена оценка'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Истина;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД") Тогда
		
		// Обмен по ЭДО выполнен успешно.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ОбменПоЭДОВыполненУспешно;
		СтрокаУведомления.ОсновноеСобытие = Справочники.ВидыБизнесСобытий.ИзменениеСостоянияДокументаПоЭДО;
		СтрокаУведомления.Представление = НСтр("ru = 'Обмен по ЭДО: успешное выполнение'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Документ аннулирован
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ЭДОДокументАннулирован;
		СтрокаУведомления.Представление = НСтр("ru = 'Обмен по ЭДО: документ аннулирован'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;

		// Документ отклонен
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ЭДОДокументОтклонен;
		СтрокаУведомления.Представление = НСтр("ru = 'Обмен по ЭДО: документ отклонен'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;

		// Документ Требуется подтверждение аннулирования
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ЭДОТребуетсяПодтверждениеАннулирования;
		СтрокаУведомления.Представление = НСтр("ru = 'Обмен по ЭДО: требуется подтверждение аннулирования'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Документ исправлен
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ЭДОДокументИсправлен;
		СтрокаУведомления.Представление = НСтр("ru = 'Обмен по ЭДО: новая версия отклоненного документа'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
	КонецЕсли;

	// Ознакомление с результатом завершения действия обработки.
	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ОзнакомлениеСПоложительнымРезультатомДействияОбработки;
	СтрокаУведомления.Представление = НСтр("ru = 'Обработки: успешное завершение действия'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	СтрокаУведомления.ДоступнаЧастота = Ложь;
	СтрокаУведомления.ДоступенСрок = Ложь;

	// Обработки: на паузе
	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ОбработкиНаПаузе;
	СтрокаУведомления.Представление = НСтр("ru = 'Обработки: на паузе'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	СтрокаУведомления.ДоступнаЧастота = Ложь;
	СтрокаУведомления.ДоступенСрок = Истина;
	
КонецФункции

// Формирует текстовое представление задачи
Функция СформироватьПредставлениеЗадачи(
	Задача,
	ВидСобытия,
	ДополнительноеОписание,
	КодЯзыка) Экспорт
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	НадписьНеУказанСрок = НСтр("ru = 'не указан'", КодЯзыка);
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		ФорматДаты = СтрШаблон("ДЛФ=DDT; ДП='%1'", НадписьНеУказанСрок);
	Иначе
		ФорматДаты = СтрШаблон("ДЛФ=DD; ДП='%1'", НадписьНеУказанСрок);
	КонецЕсли;
	
	ПредставлениеЗадачи = "";
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи,
		НСтр("ru = 'Задача'", КодЯзыка),
		Задача.Ссылка);
	
	Если ЗначениеЗаполнено(Задача.БизнесПроцесс)
		И РаботаСУведомлениями.ЭтоПоддерживаемыйБизнесПроцесс(Задача.БизнесПроцесс) Тогда
		
		БизнесПроцессОбъект = Задача.БизнесПроцесс.ПолучитьОбъект();
		Если БизнесПроцессОбъект <> Неопределено Тогда
			
			ОписаниеУведомленияЗадачиПоБизнесПроцессу =
				БизнесПроцессОбъект.ПолучитьОписаниеУведомленияЗадачи(Задача, КодЯзыка);
			
			Если ЗначениеЗаполнено(ОписаниеУведомленияЗадачиПоБизнесПроцессу) Тогда
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					ПредставлениеЗадачи,
					Символы.ПС,
					ОписаниеУведомленияЗадачиПоБизнесПроцессу);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидСобытия = Перечисления.СобытияУведомлений.ПеренаправлениеМоейЗадачи Тогда
		
		Если ЗначениеЗаполнено(ДополнительноеОписание) Тогда
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				ПредставлениеЗадачи,
				Символы.ПС,
				ДополнительноеОписание);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидСобытия <> Справочники.ВидыБизнесСобытий.ВыполнениеЗадачиПроцесса Тогда
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			ПредставлениеЗадачи,
			НСтр("ru = 'Описание'", КодЯзыка),
			Задача.Описание);
	КонецЕсли;
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи,
		НСтр("ru = 'Крайний срок'", КодЯзыка),
		Формат(Задача.СрокИсполнения, ФорматДаты));
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи,
		НСтр("ru = 'Исполнитель'", КодЯзыка),
		Задача.Исполнитель);
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи,
		НСтр("ru = 'Роль'", КодЯзыка),
		Задача.РольИсполнителя);
	
	Если ЗначениеЗаполнено(Задача.ДатаИсполнения) И Задача.Выполнена Тогда
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			ПредставлениеЗадачи,
			НСтр("ru = 'Выполнено'", КодЯзыка),
			Формат(Задача.ДатаИсполнения, ФорматДаты));
	КонецЕсли;
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи,
		НСтр("ru = 'Комментарий'", КодЯзыка),
		Задача.РезультатВыполнения);
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи,
		НСтр("ru = 'Автор'", КодЯзыка),
		Задача.Автор);
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивСтруктурПредметовОбъекта(Задача);
	Если Предметы.Количество() = 1 Тогда
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			ПредставлениеЗадачи,
			НСтр("ru = 'Предмет'", КодЯзыка),
			Строка(Предметы[0].Предмет));
	ИначеЕсли Предметы.Количество() > 1 Тогда
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			ПредставлениеЗадачи,
			НСтр("ru = 'Предметы'", КодЯзыка),
			МультипредметностьКлиентСервер.ПредметыСтрокой(Предметы));
	КонецЕсли;
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеЗадачи,
		НСтр("ru = 'Ссылка'", КодЯзыка),
		РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(Задача));
	
	Возврат ПредставлениеЗадачи;
	
КонецФункции

// Формирует текстовое представление объекта.
//
// Параметры:
//  Объект - СправочникСсылка, ДокументСсылка - Объект, по которому формируется уведомление.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Событие, произошедшее с объектом.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текстовое представление объекта.
//
Функция СформироватьПредставлениеОбъекта(Объект, ВидСобытия, ПолучательУведомления, ДополнительноеОписание) Экспорт
	
	ПредставлениеОбъекта = СформироватьПредставлениеОбъектаПереопределяемый(
		Объект,
		ВидСобытия,
		ПолучательУведомления,
		ДополнительноеОписание);
	Если ЗначениеЗаполнено(ПредставлениеОбъекта) Тогда
		Возврат ПредставлениеОбъекта;
	КонецЕсли;
	
	КодЯзыка = РаботаСУведомлениями.КодЯзыка(ПолучательУведомления);
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеСообщения(
			Объект,
			ВидСобытия,
			ДополнительноеОписание,
			КодЯзыка);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеЗадачи(
			Объект,
			ВидСобытия,
			ДополнительноеОписание,
			КодЯзыка);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контроль") Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеКонтрольнойКарточки(
			Объект,
			ВидСобытия,
			ДополнительноеОписание,
			КодЯзыка);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.Отсутствие") Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеОтсутствия(
			Объект,
			ВидСобытия,
			ДополнительноеОписание,
			КодЯзыка);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.Бронь") Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеБрони(
			Объект,
			ВидСобытия,
			ДополнительноеОписание,
			КодЯзыка);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ПоказателиПроцессов") Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеПоказателяПроцесса(
			Объект,
			ВидСобытия,
			ДополнительноеОписание,
			КодЯзыка);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ЗаписиРабочегоКалендаря") Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеЗаписиКалендаря(
			Объект,
			ВидСобытия,
			ДополнительноеОписание,
			КодЯзыка);
		
	ИначеЕсли РаботаСУведомлениями.ЭтоПоддерживаемыйБизнесПроцесс(Объект) Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеПроцесса(
			Объект,
			ВидСобытия,
			ДополнительноеОписание,
			КодЯзыка);
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.УведомлениеПрограммы Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеУведомленияПрограммы(Объект, ДополнительноеОписание, КодЯзыка);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.КонтрольныеТочки") Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеКонтрольнойТочки(
			Объект,
			ВидСобытия,
			ДополнительноеОписание,
			КодЯзыка);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеВнутреннегоДокумента(
			Объект,
			ВидСобытия,
			ДополнительноеОписание,
			КодЯзыка);

	ИначеЕсли ДействияКлиентСервер.ЭтоДействие(Объект) Тогда
		
		ПредставлениеОбъекта = СформироватьПредставлениеДействия(
			Объект,
			ВидСобытия,
			ДополнительноеОписание,
			КодЯзыка);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ПередачаДелВАрхив") Тогда

		ПредставлениеОбъекта = СформироватьПредставлениеПередачиДелВАрхив(
			Объект,
			ВидСобытия,
			ДополнительноеОписание,
			КодЯзыка);
	
	КонецЕсли;
	
	Возврат ПредставлениеОбъекта;
	
КонецФункции

// Формирует текст уведомления по событию с группировкой.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектыУведомления - Массив - Объекты формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительныеОписания - Соответствие - Дополнительные описания.
// 
// Возвращаемое значение:
//  Строка - Текст уведомления.
//
Функция СформироватьТекстУведомленияПоОбъектамУведомления(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектыУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительныеОписания) Экспорт
	
	ТекстУведомления = СформироватьТекстУведомленияПоОбъектамУведомленияПереопределяемый(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектыУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительныеОписания);
	Если ЗначениеЗаполнено(ТекстУведомления) Тогда
		Возврат ТекстУведомления;
	КонецЕсли;
	
	Если ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтроля Тогда
		
		Для Каждого ОбъектУведомления Из ОбъектыУведомления Цикл
			
			ДополнительноеОписание = ОбъектыУведомления.Количество();
			
			ПредставлениеОбъекта = РаботаСУведомлениями.СформироватьПредставлениеОбъекта(
				ОбъектУведомления,
				ВидСобытия,
				ПолучательУведомления,
				ДополнительноеОписание);
			
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				ТекстУведомления,
				Символы.ПС + Символы.ПС,
				ПредставлениеОбъекта);
			
		КонецЦикла;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ОшибкаВДокументахПереданныхВАрхив 
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ПринятиеДокументовВАрхив Тогда	
		
		Для Каждого ОбъектУведомления Из ОбъектыУведомления Цикл
			
			ДополнительноеОписание = Неопределено;
			
			ПредставлениеОбъекта = РаботаСУведомлениями.СформироватьПредставлениеОбъекта(
				ОбъектУведомления, ВидСобытия, ПолучательУведомления, ДополнительноеОписание);
			
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				ТекстУведомления, Символы.ПС, ПредставлениеОбъекта);
			
		КонецЦикла;	
		
	КонецЕсли;
	
	Возврат ТекстУведомления;
	
КонецФункции

// Формирует текст уведомления по событию без группировки.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектУведомления - СправочникСсылка, ДокументСсылка - Объект формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текст уведомления.
//
Функция СформироватьТекстУведомленияПоСобытию(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительноеОписание) Экспорт
	
	ТекстУведомления = СформироватьТекстУведомленияПоСобытиюПереопределяемый(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительноеОписание);
	Если ЗначениеЗаполнено(ТекстУведомления) Тогда
		Возврат ТекстУведомления;
	КонецЕсли;
	
	Если СпособУведомления = Перечисления.СпособыУведомления.ПоПочте 
		И ВидСобытия = Справочники.ВидыБизнесСобытий.НоваяЗадача Тогда
		
		// Учитываем глобальную настройку.
		ИспользоватьВыполнениеЗадачПоПочте = ПолучитьФункциональнуюОпцию("ИспользоватьВыполнениеЗадачПоПочте");
		
		Если ИспользоватьВыполнениеЗадачПоПочте Тогда
		
			ВключеноВыполнениеЗадачПоПочте = РегистрыСведений.НастройкиУведомлений.ПолучитьДополнительнуюНастройку(
				ПолучательУведомления,
				Перечисления.НастройкиУведомлений.ВыполнениеЗадачПоПочте);
			Если ВключеноВыполнениеЗадачПоПочте
				И ВыполнениеЗадачПоПочтеСервер.ВозможноВыполнениеЗадачиПоПочте(ОбъектУведомления) Тогда
				
				ТекстУведомления =
					ВыполнениеЗадачПоПочтеСервер.СформироватьТекстУведомленияПоЗадачеСВозможностьюВыполненияПоПочте(
						ОбъектУведомления,
						ПолучательУведомления);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СпособУведомления = Перечисления.СпособыУведомления.ПоPush Тогда
		
		ТекстУведомления = СтрШаблон(
			НСтр("ru = 'Событие: %1'", РаботаСУведомлениями.КодЯзыка(ПолучательУведомления)),
			ВидСобытия);
		
		ТекстУведомления = СтрШаблон("%1%2%3", ТекстУведомления, Символы.ПС, ДополнительноеОписание); 
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.УведомлениеПрограммы Тогда
		
		КодЯзыка = РаботаСУведомлениями.КодЯзыка(ПолучательУведомления);
		Если ЗначениеЗаполнено(ДополнительноеОписание) Тогда
			ТекстУведомления = ДополнительноеОписание;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбъектУведомления) И СпособУведомления <> Перечисления.СпособыУведомления.Окном Тогда
			РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
				ТекстУведомления,
				НСтр("ru = 'Ссылка'", КодЯзыка),
				РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(ОбъектУведомления));
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекстУведомления) Тогда
			ТекстУведомления = НСтр("ru = 'Уведомление 1С Документооборот'", КодЯзыка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидСобытия = Перечисления.СобытияУведомлений.НеУказанИсполнительПроектнойЗадачи Тогда
		ТекстУведомления = ДополнительноеОписание;
	КонецЕсли;
	
	Возврат ТекстУведомления;
	
КонецФункции

// Формирует тему уведомления по событию с группировкой.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектыУведомления - Массив - Объекты формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительныеОписания - Соответствие - Дополнительные описания.
// 
// Возвращаемое значение:
//  Строка - Тема уведомления.
//
Функция СформироватьТемуУведомленияПоОбъектамУведомления(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектыУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительныеОписания) Экспорт
	
	ТемаУведомления = СформироватьТемуУведомленияПоОбъектамУведомленияПереопределяемый(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектыУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительныеОписания);
	Если ЗначениеЗаполнено(ТемаУведомления) Тогда
		Возврат ТемаУведомления;
	КонецЕсли;
	
	КодЯзыка = РаботаСУведомлениями.КодЯзыка(ПолучательУведомления);
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеФайла Тогда
		
		ПредставлениеОбъектаПодписки = "";
		Если ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.Мероприятия") Тогда
			ПредставлениеОбъектаПодписки = СтрШаблон(
				НСтр("ru = 'в мероприятии ""%1""'", КодЯзыка),
				ОбъектПодписки.Ссылка);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПредставлениеОбъектаПодписки) Тогда
			Если ОбъектыУведомления.Количество() = 1 Тогда
				ОбъектУведомления = ОбъектыУведомления[0];
				ТемаУведомления = СтрШаблон(
					НСтр("ru = 'Новый файл ""%1"" %2'", КодЯзыка),
					ОбъектУведомления.Ссылка,
					ПредставлениеОбъектаПодписки);
			Иначе
				КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
				ТемаУведомления = СтрШаблон(
					НСтр("ru = 'Новые файлы (%1) %2'", КодЯзыка),
					КоличествоОбъектовУведомления,
					ПредставлениеОбъектаПодписки);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения
		Или ВидСобытия = Перечисления.СобытияУведомлений.СозданиеТемыФорума Тогда
		
		Если ОбъектыУведомления[0].ПервоеСообщениеТемы Тогда
			
			ТемаСообщения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектыУведомления[0], "ВладелецСообщения");
			РазделФорума = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТемаСообщения, "Папка");
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Новая тема ""%1"" в разделе ""%2""'", КодЯзыка),
				ТемаСообщения,
				РазделФорума);
			
		Иначе
			
			Если ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
				ТемаСообщения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектПодписки.Ссылка, "ВладелецСообщения");
				ПредставлениеОбъектаПодписки = СтрШаблон(
					НСтр("ru = 'в теме ""%1""'", КодЯзыка),
					ТемаСообщения);
			ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ТемыОбсуждений") Тогда
				ПредставлениеОбъектаПодписки = СтрШаблон(
					НСтр("ru = 'в теме ""%1""'", КодЯзыка),
					ОбъектПодписки.Ссылка);
			ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ПапкиФорума") Тогда
				ТемаСообщения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектыУведомления[0], "ВладелецСообщения");
				ПредставлениеОбъектаПодписки = СтрШаблон(
					НСтр("ru = 'в теме ""%1""'", КодЯзыка),
					ТемаСообщения);
			Иначе
				ПредставлениеОбъектаПодписки = СтрШаблон(
					НСтр("ru = 'в обсуждении ""%1""'", КодЯзыка),
					ОбъектПодписки.Ссылка);
			КонецЕсли;
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Новое сообщение %1'", КодЯзыка),
				ПредставлениеОбъектаПодписки);
			
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтроля Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ПредставлениеСрока = РаботаСУведомлениями.ПолучитьПредставлениеСрока(
				ОбъектУведомления.Контролер, 
				ОбъектУведомления.СрокИсполнения, 
				ВидСобытия,
				КодЯзыка,
				Истина);
			ТемаУведомления = СтрШаблон(
				"%1: ""%2""",
				ПредставлениеСрока,
				ОбъектУведомления.Наименование);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Подошел срок контроля (%1)'"),
				КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченКонтроль Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ПредставлениеСрока = РаботаСУведомлениями.ПолучитьПредставлениеСрока(
				ОбъектУведомления.Контролер, 
				ОбъектУведомления.СрокИсполнения, 
				ВидСобытия,
				КодЯзыка,
				Истина);
			ТемаУведомления = СтрШаблон(
				"%1: ""%2""",
				ПредставлениеСрока,
				ОбъектУведомления.Наименование);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Истекли сроки контроля (%1)'"),
				КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса Тогда
		
		ОбъектУведомления = ОбъектыУведомления[0];
		Если ОбъектыУведомления.Количество() = 1 Тогда
			Если ТипЗнч(ОбъектУведомления) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				ТемаУведомления = НСтр("ru = 'Задача прервана ""%1""'", КодЯзыка);
			Иначе
				ТемаУведомления = НСтр("ru = 'Процесс прерван ""%1""'", КодЯзыка);
			КонецЕсли;
			ТемаУведомления = СтрШаблон(
				ТемаУведомления,
				ОбъектУведомления.Ссылка);
		Иначе
			Если ТипЗнч(ОбъектУведомления) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				ТемаУведомления = НСтр("ru = 'Задачи прерваны (%1)'", КодЯзыка);
			Иначе
				ТемаУведомления = НСтр("ru = 'Процессы прерваны (%1)'", КодЯзыка);
			КонецЕсли;
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				ТемаУведомления,
				КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ОстановкаБизнесПроцесса Тогда
		
		ОбъектУведомления = ОбъектыУведомления[0];
		Если ОбъектыУведомления.Количество() = 1 Тогда
			Если ТипЗнч(ОбъектУведомления) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				ТемаУведомления = НСтр("ru = 'Задача остановлена ""%1""'", КодЯзыка);
			Иначе
				ТемаУведомления = НСтр("ru = 'Процесс остановлен ""%1""'", КодЯзыка);
			КонецЕсли;
			ТемаУведомления = СтрШаблон(
				ТемаУведомления,
				ОбъектУведомления.Ссылка);
		Иначе
			Если ТипЗнч(ОбъектУведомления) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				ТемаУведомления = НСтр("ru = 'Задачи остановлены (%1)'", КодЯзыка);
			Иначе
				ТемаУведомления = НСтр("ru = 'Процессы остановлены (%1)'", КодЯзыка);
			КонецЕсли;
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				ТемаУведомления,
				КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ВозобновлениеБизнесПроцесса Тогда
		
		ОбъектУведомления = ОбъектыУведомления[0];
		Если ОбъектыУведомления.Количество() = 1 Тогда
			Если ТипЗнч(ОбъектУведомления) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				ТемаУведомления = НСтр("ru = 'Задача возобновлена ""%1""'", КодЯзыка);
			Иначе
				ТемаУведомления = НСтр("ru = 'Процесс возобновлен ""%1""'", КодЯзыка);
			КонецЕсли;
			ТемаУведомления = СтрШаблон(
				ТемаУведомления,
				ОбъектУведомления.Ссылка);
		Иначе
			Если ТипЗнч(ОбъектУведомления) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				ТемаУведомления = НСтр("ru = 'Задачи возобновлены (%1)'", КодЯзыка);
			Иначе
				ТемаУведомления = НСтр("ru = 'Процессы возобновлены (%1)'", КодЯзыка);
			КонецЕсли;
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				ТемаУведомления,
				КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.УведомлениеПрограммы Тогда
		
		ТемаУведомления = НСтр("ru = 'Уведомление 1С Документооборот'", КодЯзыка);
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаКонтрольнаяТочка Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ПредставлениеСрока = РаботаСУведомлениями.ПолучитьПредставлениеСрока(
				ОбъектУведомления.Ответственный,
				ОбъектУведомления.ПлановыйСрок,
				ВидСобытия,
				КодЯзыка);
			ТемаУведомления = СтрШаблон(
				"%1: ""%2""",
				ПредставлениеСрока,
				ОбъектУведомления.Наименование);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Просрочены контрольные точки (%1)'", КодЯзыка),
				КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтрольнойТочки Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ПредставлениеСрока = РаботаСУведомлениями.ПолучитьПредставлениеСрока(
				ОбъектУведомления.Ответственный,
				ОбъектУведомления.ПлановыйСрок,
				ВидСобытия,
				КодЯзыка);
			ТемаУведомления = СтрШаблон(
				"%1: ""%2""",
				ПредставлениеСрока,
				ОбъектУведомления.Наименование);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Подошел срок контрольных точек (%1)'", КодЯзыка),
				КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаОценкаКонтрольнойТочки Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Обновите недельную оценку контрольной точки: %1'", КодЯзыка),
				ОбъектУведомления.Наименование);
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Обновите недельные оценки контрольных точек (%1)'", КодЯзыка),
				КоличествоОбъектовУведомления);
		КонецЕсли;
		
	ИначеЕсли (ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеДокумента)
		И ОбъектПодписки = Справочники.ИсточникиДанных.ЭДО Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			
			ОбъектУведомления = ОбъектыУведомления[0];
			ДанныеСостоянияЭДО = ОбменСКонтрагентамиДОВызовСервера.ПолучитьСостояниеДокумента(ОбъектУведомления);
			
			ТемаУведомления = СтрШаблон(
				НСтр("ru = '%1: Новый документ ""%2"" от %3. Требуется проверка.'", КодЯзыка),
				Справочники.ИсточникиДанных.ЭДО,
				ОбъектУведомления,
				ДанныеСостоянияЭДО.Контрагент);
			
		Иначе
			
			СтрокаСЧисломНовыхДокументов = СтрокаСЧислом(
				НСтр("ru=';%1 новый документ;;%1 новых документа;%1 новых документов;%1 новых документа'", КодЯзыка),
				ОбъектыУведомления.Количество(),
				ВидЧисловогоЗначения.Количественное);
			
			ТемаУведомления = СтрШаблон("%1: %2. %3.",
				Справочники.ИсточникиДанных.ЭДО,
				СтрокаСЧисломНовыхДокументов,
				НСтр("ru = 'Требуется проверка'", КодЯзыка));
			
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ОтклонениеДокументаКонтрагентомПоЭДО Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			
			ОбъектУведомления = ОбъектыУведомления[0];
			ДанныеСостоянияЭДО = ОбменСКонтрагентамиДОВызовСервера.ПолучитьСостояниеДокумента(ОбъектУведомления);
			
			ТемаУведомления = СтрШаблон(
				НСтр("ru = '%1: %2 отклонен %3. Требуется корректировка.'", КодЯзыка),
				Справочники.ИсточникиДанных.ЭДО,
				ОбъектУведомления,
				ДанныеСостоянияЭДО.Контрагент);
			
		Иначе
			
			СтрокаСЧисломОтклоненныхДокументов = СтрокаСЧислом(
				НСтр("ru=';%1 отклоненный документ;;%1 отклоненных документа;%1 отклоненных документов;%1 отклоненных документа'", КодЯзыка),
				ОбъектыУведомления.Количество(),
				ВидЧисловогоЗначения.Количественное);
			
			ТемаУведомления = СтрШаблон("%1: %2. %3.",
				Справочники.ИсточникиДанных.ЭДО,
				СтрокаСЧисломОтклоненныхДокументов,
				НСтр("ru = 'Требуется корректировка'", КодЯзыка));
			
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ОбменПоЭДОВыполненУспешно Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			
			ОбъектУведомления = ОбъектыУведомления[0];
			ДанныеСостоянияЭДО = ОбменСКонтрагентамиДОВызовСервера.ПолучитьСостояниеДокумента(ОбъектУведомления);
			
			ТемаУведомления = СтрШаблон(
				НСтр("ru = '%1: %2 успешно выполнен обмен с %3'", КодЯзыка),
				Справочники.ИсточникиДанных.ЭДО,
				ОбъектУведомления,
				ДанныеСостоянияЭДО.Контрагент);
			
		Иначе
			
			СтрокаСЧисломУспешныхОбменов = СтрокаСЧислом(
				НСтр("ru=';Успешно выполнен %1 обмен;;Успешно выполнено %1 обмена;Успешно выполнено %1 обменов;Успешно выполнено %1 обмена'", КодЯзыка),
				ОбъектыУведомления.Количество(),
				ВидЧисловогоЗначения.Количественное);
			
			ТемаУведомления = СтрШаблон("%1: %2",
				Справочники.ИсточникиДанных.ЭДО,
				СтрокаСЧисломУспешныхОбменов);
			
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ЭДОДокументАннулирован Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			
			ОбъектУведомления = ОбъектыУведомления[0];  
			
			ТемаУведомления = СтрШаблон(НСтр("ru = 'Документ ЭДО аннулирован (%1)'", КодЯзыка), ОбъектУведомления);

		Иначе
			
			СтрокаСЧисломИсправленныхДокументов = СтрокаСЧислом(
				НСтр("ru=';Аннулирован %1 документ;;Аннулировано %1 документов;
					|Аннулировано %1 документов;Аннулирован %1 документ'", КодЯзыка),
				ОбъектыУведомления.Количество(),
				ВидЧисловогоЗначения.Количественное);
			
			ТемаУведомления = СтрокаСЧисломИсправленныхДокументов;
			
		КонецЕсли;

	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ЭДОДокументОтклонен Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда     
			
			ТемаУведомления = НСтр("ru = 'Документ ЭДО отклонен'", КодЯзыка);
			
		Иначе
			
			СтрокаСЧисломИсправленныхДокументов = СтрокаСЧислом(
				НСтр("ru=';Отклонен %1 документ;;Отклонено %1 документов;
					|Отклонено %1 документов;Отклонен %1 документ'", КодЯзыка),
				ОбъектыУведомления.Количество(),
				ВидЧисловогоЗначения.Количественное);
			
			ТемаУведомления = СтрокаСЧисломИсправленныхДокументов;
			
		КонецЕсли;

	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ЭДОТребуетсяПодтверждениеАннулирования Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда     
			
			ТемаУведомления = НСтр("ru = 'Документ ЭДО: требуется подтверждение аннулирования'", КодЯзыка);
			
		Иначе
			
			СтрокаСЧисломИсправленныхДокументов = СтрШаблон(
				НСтр("ru='Документы ЭДО: требуется подтверждение аннулирования: %1'", КодЯзыка),
				ОбъектыУведомления.Количество());
			
			ТемаУведомления = СтрокаСЧисломИсправленныхДокументов;
			
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ОзнакомлениеСПоложительнымРезультатомПроцесса Тогда
				
		Если ОбъектыУведомления.Количество() = 1 Тогда

			ОбъектУведомления = ОбъектыУведомления[0];
			
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Завершен процесс ""%1""'", КодЯзыка),
				ОбъектУведомления);
			
		Иначе
			
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Завершены процессы (%1)'", КодЯзыка),
				ОбъектыУведомления.Количество());
	
		КонецЕсли;

	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ОзнакомлениеСПоложительнымРезультатомДействияОбработки Тогда
				
		Если ОбъектыУведомления.Количество() = 1 Тогда

			ОбъектУведомления = ОбъектыУведомления[0];
			
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Завершено действие ""%1 ""%2""""'", КодЯзыка),
				ОбъектУведомления,
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектУведомления, "Предмет"));
			
		Иначе

			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Завершены действия (%1)'", КодЯзыка),
				ОбъектыУведомления.Количество());
	
			КонецЕсли; 
			
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ОшибкаВДокументахПереданныхВАрхив Тогда
		
		ОбъектУведомления = ОбъектыУведомления[0];
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектУведомления, "Номер, Дата");		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ТемаУведомления = НСтр("ru = 'Ошибка в документе № %1 от %2, переданном в 1С:Архив'", КодЯзыка);
			ТемаУведомления = СтрШаблон(
				ТемаУведомления,
				РеквизитыДокумента.Номер,
				Формат(РеквизитыДокумента.Дата, "ДЛФ=Д"));
		Иначе
			ТемаУведомления = НСтр("ru = 'Ошибка в документах, переданных в 1С:Архив (%1)'", КодЯзыка);
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				ТемаУведомления,
				КоличествоОбъектовУведомления);
		КонецЕсли;

 	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПринятиеДокументовВАрхив Тогда 
		
		ОбъектУведомления = ОбъектыУведомления[0];
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектУведомления, "Номер, Дата");
		Если ОбъектыУведомления.Количество() = 1 Тогда
			ТемаУведомления = НСтр("ru = 'Документ № %1 от %2 принят в 1С:Архив'", КодЯзыка);
			ТемаУведомления = СтрШаблон(
				ТемаУведомления,
				РеквизитыДокумента.Номер,
				Формат(РеквизитыДокумента.Дата, "ДЛФ=Д"));
		Иначе
			ТемаУведомления = НСтр("ru = 'Документы приняты в 1С:Архив (%1)'", КодЯзыка);
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				ТемаУведомления,
				КоличествоОбъектовУведомления);
		КонецЕсли;
	
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ЭДОДокументИсправлен Тогда
		
		Если ОбъектыУведомления.Количество() = 1 Тогда
			
			ОбъектУведомления = ОбъектыУведомления[0];   
			
			МассивЭДО = ОбменЭДОДокументооборот.ЭлектронныеДокументыОбъектаУчета(ОбъектУведомления);
			ДокументЭДО = Неопределено;
			Если МассивЭДО.Количество() = 1 Тогда
				
				ДокументЭДО = МассивЭДО[0];
				
				ТемаУведомления = СтрШаблон(
					НСтр("ru = 'Поступила новая версия отклоненного документа ЭДО ""%1""'", КодЯзыка),
					ДокументЭДО);
					
			Иначе		

				ТемаУведомления = СтрШаблон(
					НСтр("ru = 'Поступила новая версия отклоненного документа ЭДО ""%1""'", КодЯзыка),
					ОбъектУведомления);
				
				
			КонецЕсли;	
			
		Иначе
			
			СтрокаСЧисломИсправленныхДокументов = СтрокаСЧислом(
				НСтр("ru=';Исправлен %1 документ;;Исправлено %1 документов;
					|Исправлено %1 документов;Исправлен %1 документ'", КодЯзыка),
				ОбъектыУведомления.Количество(),
				ВидЧисловогоЗначения.Количественное);
			
			ТемаУведомления = СтрокаСЧисломИсправленныхДокументов;
			
		КонецЕсли;
		

	КонецЕсли;
	
	Возврат ТемаУведомления;
	
КонецФункции

// Формирует тему уведомления по событию без группировки.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектУведомления - СправочникСсылка, ДокументСсылка - Объект формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Тема уведомления.
//
Функция СформироватьТемуУведомленияПоСобытию(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительноеОписание) Экспорт
	
	ТемаУведомления = СформироватьТемуУведомленияПоСобытиюПереопределяемый(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительноеОписание);
	Если ЗначениеЗаполнено(ТемаУведомления) Тогда
		Возврат ТемаУведомления;
	КонецЕсли;
	
	Если СпособУведомления = Перечисления.СпособыУведомления.ПоПочте
		И ВидСобытия = Справочники.ВидыБизнесСобытий.НоваяЗадача Тогда
		
		// Учитываем глобальную настройку.
		ИспользоватьВыполнениеЗадачПоПочте = ПолучитьФункциональнуюОпцию("ИспользоватьВыполнениеЗадачПоПочте");
		
		Если ИспользоватьВыполнениеЗадачПоПочте Тогда
		
			ВключеноВыполнениеЗадачПоПочте = РегистрыСведений.НастройкиУведомлений.ПолучитьДополнительнуюНастройку(
				ПолучательУведомления,
				Перечисления.НастройкиУведомлений.ВыполнениеЗадачПоПочте);
			Если ВключеноВыполнениеЗадачПоПочте
				И ВыполнениеЗадачПоПочтеСервер.ВозможноВыполнениеЗадачиПоПочте(ОбъектУведомления) Тогда
				
				ТемаУведомления =
					ВыполнениеЗадачПоПочтеСервер.СформироватьТемуУведомленияПоЗадачеСВозможностьюВыполненияПоПочте(
						ОбъектУведомления,
						ПолучательУведомления);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидСобытия = Перечисления.СобытияУведомлений.УведомлениеПрограммы Тогда
		
		Если ЗначениеЗаполнено(ДополнительноеОписание) Тогда
			ТемаУведомления = СтрПолучитьСтроку(ДополнительноеОписание, 1);
		Иначе
			КодЯзыка = РаботаСУведомлениями.КодЯзыка(ПолучательУведомления);
			ТемаУведомления = НСтр("ru = 'Уведомление 1С Документооборот'", КодЯзыка);
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения
		Или ВидСобытия = Перечисления.СобытияУведомлений.СозданиеТемыФорума Тогда
		
		Если ОбъектУведомления.ПервоеСообщениеТемы Тогда
			
			ТемаСообщения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектУведомления, "ВладелецСообщения");
			РазделФорума = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТемаСообщения, "Папка");
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Новая тема ""%1"" в разделе ""%2""'", КодЯзыка),
				ТемаСообщения,
				РазделФорума);
			
		Иначе
			
			Если ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
				ТемаСообщения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектПодписки.Ссылка, "ВладелецСообщения");
				ПредставлениеОбъектаПодписки = СтрШаблон(
					НСтр("ru = 'в теме ""%1""'", КодЯзыка),
					ТемаСообщения);
			ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ТемыОбсуждений") Тогда
				ПредставлениеОбъектаПодписки = СтрШаблон(
					НСтр("ru = 'в теме ""%1""'", КодЯзыка),
					ОбъектПодписки.Ссылка);
			ИначеЕсли ТипЗнч(ОбъектПодписки) = Тип("СправочникСсылка.ПапкиФорума") Тогда
				ТемаСообщения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектУведомления, "ВладелецСообщения");
				ПредставлениеОбъектаПодписки = СтрШаблон(
					НСтр("ru = 'в теме ""%1""'", КодЯзыка),
					ТемаСообщения);
			Иначе
				ПредставлениеОбъектаПодписки = СтрШаблон(
					НСтр("ru = 'в обсуждении ""%1""'", КодЯзыка),
					ОбъектПодписки.Ссылка);
			КонецЕсли;
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Новое сообщение %1'", КодЯзыка),
				ПредставлениеОбъектаПодписки);
			
		КонецЕсли;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПеренаправлениеМоейЗадачи Тогда
		КодЯзыка = РаботаСУведомлениями.КодЯзыка(ПолучательУведомления);
		Если СтрНачинаетсяС(ДополнительноеОписание, НСтр("ru = 'Автоперенаправление'", КодЯзыка)) Тогда
			ТемаУведомления = СтрШаблон(
				"%1 ""%2""",
				НСтр("ru = 'Автоперенаправление моей задачи'", КодЯзыка),
				ОбъектУведомления);
		КонецЕсли;
		
	ИначеЕсли (ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеДокумента)
		И ОбъектУведомления.Источник = Справочники.ИсточникиДанных.ЭДО Тогда
		
		КодЯзыка = РаботаСУведомлениями.КодЯзыка(ПолучательУведомления);
		
		ДанныеСостоянияЭДО = ОбменСКонтрагентамиДОВызовСервера.ПолучитьСостояниеДокумента(ОбъектУведомления);
		
		ТемаУведомления = СтрШаблон(
			НСтр("ru = '%1: Новый документ ""%2"" от %3. Требуется проверка.'", КодЯзыка),
			Справочники.ИсточникиДанных.ЭДО,
			ОбъектУведомления,
			ДанныеСостоянияЭДО.Контрагент);
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ОтклонениеДокументаКонтрагентомПоЭДО Тогда
		
		ДанныеСостоянияЭДО = ОбменСКонтрагентамиДОВызовСервера.ПолучитьСостояниеДокумента(ОбъектУведомления);
		
		ТемаУведомления = СтрШаблон(
			НСтр("ru = '%1: %2 отклонен %3. Требуется корректировка.'", КодЯзыка),
			Справочники.ИсточникиДанных.ЭДО,
			ОбъектУведомления,
			ДанныеСостоянияЭДО.Контрагент);
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ОбменПоЭДОВыполненУспешно Тогда
		
		ДанныеСостоянияЭДО = ОбменСКонтрагентамиДОВызовСервера.ПолучитьСостояниеДокумента(ОбъектУведомления);
		
		ТемаУведомления = СтрШаблон(
			НСтр("ru = '%1: %2 успешно выполнен обмен с %3'", КодЯзыка),
			Справочники.ИсточникиДанных.ЭДО,
			ОбъектУведомления,
			ДанныеСостоянияЭДО.Контрагент);

	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ЭДОДокументАннулирован Тогда   
			
		ТемаУведомления = СтрШаблон(НСтр("ru = 'Документ ЭДО аннулирован (%1)'", КодЯзыка), ОбъектУведомления);
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ЭДОТребуетсяПодтверждениеАннулирования Тогда
		
		ТемаУведомления = НСтр("ru = 'Документ ЭДО: требуется подтверждение аннулирования'", КодЯзыка);

	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ЭДОДокументОтклонен Тогда
		
		ТемаУведомления = НСтр("ru = 'Документ ЭДО отклонен'", КодЯзыка);
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ЭДОДокументИсправлен Тогда
		
		ТемаУведомления = НСтр("ru = 'Поступила новая версия отклоненного документа ЭДО'", КодЯзыка);
	
	КонецЕсли;
	
	Возврат ТемаУведомления;
	
КонецФункции

// Формирует уведомления по событию с группировкой.
// Сформированные уведомления добавляются в параметр СформированныеУведомления.
//
// Параметры:
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  Уведомления - ТаблицаЗначений - Таблица уведомлений о событиях для пользователей.
//   * Объект - СправочникСсылка, ДокументСсылка - Объект с которым произошло событие.
//   * Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого предназначено уведомление.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Произошедшее событие.
//   * ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект, в связи с подпиской на который рассылается уведомление.
//   * ТекстУведомления - Строка - Дополнительный текст уведомления, сформированный на этапе обработки событий.
//  СформированныеУведомления - ТаблицаЗначений - Сформированные для отправки уведомления.
//   * Пользователь - СправочникСсылка.Пользователи - Получатель уведомления.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ТемаУведомления - Строка - Тема уведомления.
//   * ТекстУведомления - Строка - Текст уведомления.
//   * Уведомления - Массив - Уведомления, которые будут удалены из очереди, после отправки данного сформированного уведомления.
//   * Файлы - Массив - Файлы уведомления.
//
// Возвращаемое значение:
//  Булево - Поведение переопределено.
//
Функция СформироватьУведомленияПоВидуБизнесСобытия(
	ПолучательУведомления,
	СпособУведомления,
	ВидСобытия,
	Уведомления,
	СформированныеУведомления) Экспорт
	
	Если СформироватьУведомленияПоВидуБизнесСобытияПереопределяемый(
		ПолучательУведомления,
		СпособУведомления,
		ВидСобытия,
		Уведомления,
		СформированныеУведомления) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Переопределено = Ложь;
	
	Отбор = Новый Структура();
	Отбор.Вставить("Пользователь", ПолучательУведомления);
	Отбор.Вставить("СпособУведомления", СпособУведомления);
	Отбор.Вставить("ВидСобытия", ВидСобытия);
	УведомленияПользователя = Уведомления.НайтиСтроки(Отбор);
	
	УведомленияПодписки = Новый Массив;
	ДополнительныеОписания = Новый Соответствие;
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		Переопределено = Истина;
		
		// Группировка уведомлений по предмету / теме / сообщению.
		ОбъектыПодписки = Новый Массив;
		
		// Подписка на предметы.
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			
			Если ТипЗнч(Уведомление.ОбъектПодписки) = Тип("СправочникСсылка.СообщенияОбсуждений")
				Или ТипЗнч(Уведомление.ОбъектПодписки) = Тип("СправочникСсылка.ТемыОбсуждений") Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			РаботаСУведомлениями.ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
			
			Если ОбъектыПодписки.Найти(Уведомление.ОбъектПодписки) = Неопределено Тогда
				
				ОбъектыПодписки.Добавить(Уведомление.ОбъектПодписки);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Подписка на темы.
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			
			Если ТипЗнч(Уведомление.ОбъектПодписки) <> Тип("СправочникСсылка.ТемыОбсуждений") Тогда
				Продолжить;
			КонецЕсли;
			
			РаботаСУведомлениями.ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
			
			ПредметОбсуждения = Уведомление.ОбъектПодписки.Документ; 
			Если ОбъектыПодписки.Найти(ПредметОбсуждения) = Неопределено
				И ОбъектыПодписки.Найти(Уведомление.ОбъектПодписки) = Неопределено  Тогда
				
				ОбъектыПодписки.Добавить(Уведомление.ОбъектПодписки);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Подписка на сообщения.
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			
			Если ТипЗнч(Уведомление.ОбъектПодписки) <> Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
				Продолжить;
			КонецЕсли;
			
			РаботаСУведомлениями.ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
			
			ТемаОбсуждения = Уведомление.ОбъектПодписки.ВладелецСообщения;
			Уведомление.ОбъектПодписки = ТемаОбсуждения;
			ПредметОбсуждения = ТемаОбсуждения.Документ;
			Если ОбъектыПодписки.Найти(ТемаОбсуждения) = Неопределено
				И ОбъектыПодписки.Найти(ПредметОбсуждения) = Неопределено
				И ОбъектыПодписки.Найти(Уведомление.ОбъектПодписки) = Неопределено Тогда
				
				ОбъектыПодписки.Добавить(ТемаОбсуждения);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Группировка по объектам подписки.
		Для Каждого ОбъектПодписки Из ОбъектыПодписки Цикл
			
			Отбор = Новый Структура();
			Отбор.Вставить("Пользователь", ПолучательУведомления);
			Отбор.Вставить("СпособУведомления", СпособУведомления);
			Отбор.Вставить("ВидСобытия", ВидСобытия);
			Отбор.Вставить("ОбъектПодписки", ОбъектПодписки);
			УведомленияПользователяПоВидуИПоОбъектуПодписки = Уведомления.НайтиСтроки(Отбор);
			
			ОбъектыУведомления = Новый Массив;
			Для Каждого Уведомление Из УведомленияПользователяПоВидуИПоОбъектуПодписки Цикл
				Если ОбъектыУведомления.Найти(Уведомление.Объект) = Неопределено Тогда
					ОбъектыУведомления.Добавить(Уведомление.Объект);
				КонецЕсли;
			КонецЦикла;
			
			Если ОбъектыУведомления.Количество() > 0 Тогда
				
				ДанныеУведомления = РаботаСУведомлениями.ДанныеУведомленияПоОбъектам(
					ОбъектПодписки,
					ВидСобытия,
					ОбъектыУведомления,
					ПолучательУведомления,
					СпособУведомления,
					ДополнительныеОписания);
				
				СформированноеУведомление = СформированныеУведомления.Добавить();
				ЗаполнитьЗначенияСвойств(СформированноеУведомление, ДанныеУведомления);
				СформированноеУведомление.Пользователь = ПолучательУведомления;
				СформированноеУведомление.СпособУведомления = СпособУведомления;
				СформированноеУведомление.Уведомления = УведомленияПодписки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса 
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ВозобновлениеБизнесПроцесса
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ОстановкаБизнесПроцесса Тогда
		
		Переопределено = Истина;
		
		// Группировка по процессу.
		ОбъектыПодписки = Новый Массив;
		
		// Подписка на процессы.
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			
			Если Не РаботаСУведомлениями.ЭтоПоддерживаемыйБизнесПроцесс(Уведомление.ОбъектПодписки) Тогда
				Продолжить;
			КонецЕсли;
			
			РаботаСУведомлениями.ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
			Если ОбъектыПодписки.Найти(Уведомление.ОбъектПодписки) = Неопределено Тогда
				ОбъектыПодписки.Добавить(Уведомление.ОбъектПодписки);
			КонецЕсли;
			
		КонецЦикла;
		
		// Подписка на задачи.
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			
			Если ТипЗнч(Уведомление.ОбъектПодписки) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				Продолжить;
			КонецЕсли;
			
			РаботаСУведомлениями.ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
			Процесс = Уведомление.ОбъектПодписки.БизнесПроцесс;
			Если ОбъектыПодписки.Найти(Процесс) = Неопределено
				И ОбъектыПодписки.Найти(Уведомление.ОбъектПодписки) = Неопределено Тогда
				ОбъектыПодписки.Добавить(Уведомление.ОбъектПодписки);
			КонецЕсли;
			
		КонецЦикла;
		
		// Группировка по объектам подписки.
		Для Каждого ОбъектПодписки Из ОбъектыПодписки Цикл
			
			Отбор = Новый Структура();
			Отбор.Вставить("Пользователь", ПолучательУведомления);
			Отбор.Вставить("СпособУведомления", СпособУведомления);
			Отбор.Вставить("ВидСобытия", ВидСобытия);
			Отбор.Вставить("ОбъектПодписки", ОбъектПодписки);
			УведомленияПользователяПоВидуИПоОбъектуПодписки = Уведомления.НайтиСтроки(Отбор);
			
			ОбъектыУведомления = Новый Массив;
			Для Каждого Уведомление Из УведомленияПользователяПоВидуИПоОбъектуПодписки Цикл
				Если ОбъектыУведомления.Найти(Уведомление.Объект) = Неопределено Тогда
					ОбъектыУведомления.Добавить(Уведомление.Объект);
				КонецЕсли;
			КонецЦикла;
			
			Если ОбъектыУведомления.Количество() > 0 Тогда
				
				ДанныеУведомления = РаботаСУведомлениями.ДанныеУведомленияПоОбъектам(
					ОбъектПодписки,
					ВидСобытия,
					ОбъектыУведомления,
					ПолучательУведомления,
					СпособУведомления,
					ДополнительныеОписания);
				
				СформированноеУведомление = СформированныеУведомления.Добавить();
				ЗаполнитьЗначенияСвойств(СформированноеУведомление, ДанныеУведомления);
				СформированноеУведомление.Пользователь = ПолучательУведомления;
				СформированноеУведомление.СпособУведомления = СпособУведомления;
				СформированноеУведомление.Уведомления = УведомленияПодписки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтроля
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПросроченКонтроль
		Или ВидСобытия = Перечисления.СобытияУведомлений.УведомлениеПрограммы
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаКонтрольнаяТочка
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтрольнойТочки
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаОценкаКонтрольнойТочки
		Или ВидСобытия = Перечисления.СобытияУведомлений.ОбменПоЭДОВыполненУспешно
		Или ВидСобытия = Перечисления.СобытияУведомлений.ОтклонениеДокументаКонтрагентомПоЭДО
		Или ВидСобытия = Перечисления.СобытияУведомлений.ЭДОДокументАннулирован
		Или ВидСобытия = Перечисления.СобытияУведомлений.ЭДОТребуетсяПодтверждениеАннулирования
		Или ВидСобытия = Перечисления.СобытияУведомлений.ЭДОДокументОтклонен
		Или ВидСобытия = Перечисления.СобытияУведомлений.ЭДОДокументИсправлен
		Или ВидСобытия = Перечисления.СобытияУведомлений.ОзнакомлениеСПоложительнымРезультатомПроцесса
		Или ВидСобытия = Перечисления.СобытияУведомлений.ОзнакомлениеСПоложительнымРезультатомДействияОбработки
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ОшибкаВДокументахПереданныхВАрхив
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ПринятиеДокументовВАрхив Тогда
		
		Переопределено = Истина;
		
		// Группировка по событию.
		РаботаСУведомлениями.СформироватьУведомленияГруппировкаПоСобытию(
			ПолучательУведомления,
			СпособУведомления,
			ВидСобытия,
			Уведомления,
			СформированныеУведомления);
		
	КонецЕсли;
	
	Возврат Переопределено;
	
КонецФункции

// Формирует уведомления по событиям без группировки.
// Сформированные уведомления добавляются в параметр СформированныеУведомления.
//
// Параметры:
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ОбработанныеВидыБизнесСобытий - Массив - Виды события, по которым уже сгруппированы уведомления.
//  Уведомления - ТаблицаЗначений - Таблица уведомлений о событиях для пользователей.
//   * Объект - СправочникСсылка, ДокументСсылка - Объект с которым произошло событие.
//   * Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого предназначено уведомление.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Произошедшее событие.
//   * ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект, в связи с подпиской на который рассылается уведомление.
//   * ТекстУведомления - Строка - Дополнительный текст уведомления, сформированный на этапе обработки событий.
//  СформированныеУведомления - ТаблицаЗначений - Сформированные для отправки уведомления.
//   * Пользователь - СправочникСсылка.Пользователи - Получатель уведомления.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ТемаУведомления - Строка - Тема уведомления.
//   * ТекстУведомления - Строка - Текст уведомления.
//   * Уведомления - Массив - Уведомления, которые будут удалены из очереди, после отправки данного сформированного уведомления.
//   * Файлы - Массив - Файлы уведомления.
//
// Возвращаемое значение:
//  Булево - Поведение переопределено.
//
Функция СформироватьУведомленияПоСобытиям(
	ПолучательУведомления,
	СпособУведомления,
	ОбработанныеВидыБизнесСобытий,
	Уведомления,
	СформированныеУведомления) Экспорт
	
	Если СформироватьУведомленияПоСобытиямПереопределяемый(
		ПолучательУведомления,
		СпособУведомления,
		ОбработанныеВидыБизнесСобытий,
		Уведомления,
		СформированныеУведомления) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Переопределено = Ложь;
	
	Возврат Переопределено;
	
КонецФункции

// Формирует файлы уведомления по событию с группировки.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектУведомления - СправочникСсылка, ДокументСсылка - Объект формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Массив - Массив структур файлов уведомлений.
//   * Ссылка - СправочникСсылка.Файлы - Ссылка на файл.
//   * ИмяФайла - Строка - Имя файла.
//
Функция СформироватьФайлыУведомленияПоОбъектамУведомления(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительноеОписание) Экспорт
	
	Файлы = СформироватьФайлыУведомленияПоОбъектамУведомленияПереопределяемый(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительноеОписание);
	Если Файлы <> Неопределено Тогда
		Возврат Файлы;
	КонецЕсли;
	
	Возврат Файлы;
	
КонецФункции

// Формирует файлы уведомления по событию без группировки.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектУведомления - СправочникСсылка, ДокументСсылка - Объект формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Массив - Массив структур файлов уведомлений.
//   * Ссылка - СправочникСсылка.Файлы - Ссылка на файл.
//   * ИмяФайла - Строка - Имя файла.
//
Функция СформироватьФайлыУведомленияПоСобытию(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительноеОписание) Экспорт
	
	Файлы = СформироватьФайлыУведомленияПоСобытиюПереопределяемый(
		ОбъектПодписки,
		ВидСобытия,
		ОбъектУведомления,
		ПолучательУведомления,
		СпособУведомления,
		ДополнительноеОписание);
	Если Файлы <> Неопределено Тогда
		Возврат Файлы;
	КонецЕсли;
	
	Если СпособУведомления = Перечисления.СпособыУведомления.ПоПочте
		И ВидСобытия = Справочники.ВидыБизнесСобытий.НоваяЗадача Тогда

		// Учитываем глобальную настройку.
		ИспользоватьВыполнениеЗадачПоПочте = ПолучитьФункциональнуюОпцию("ИспользоватьВыполнениеЗадачПоПочте");
		
		Если ИспользоватьВыполнениеЗадачПоПочте Тогда

			ВключеноВыполнениеЗадачПоПочте = РегистрыСведений.НастройкиУведомлений.ПолучитьДополнительнуюНастройку(
				ПолучательУведомления,
				Перечисления.НастройкиУведомлений.ВыполнениеЗадачПоПочте);
			Если ВключеноВыполнениеЗадачПоПочте
				И ВыполнениеЗадачПоПочтеСервер.ВозможноВыполнениеЗадачиПоПочте(ОбъектУведомления) Тогда
				
				Файлы =
					ВыполнениеЗадачПоПочтеСервер.СформироватьФайлыУведомленияПоЗадачеСВозможностьюВыполненияПоПочте(
						ОбъектУведомления,
						ПолучательУведомления);
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Файлы;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Позволяет скорректировать виды событий, по которым следует группировать уведомления.
// В массиве ВидыСобытий поступают уже полностью сформированные типовые виды событий для группировки.
//
// Параметры:
//  ВидыСобытий - Массив - Сформированные типовые виды событий для группировки.
//  ПолучательУведомления - СправочникСсылка.Пользователь - Получатель уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ уведомления.
//
Процедура ВидыСобытийДляГруппировкиПереопределяемый(ВидыСобытий, ПолучательУведомления, СпособУведомления)
	
КонецПроцедуры

// Формирует текстовое представление брони.
//
// Параметры:
//  Бронь - ДокументСсылка.Бронь - Бронь, по которой формируется уведомление.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Событие, произошедшее с объектом.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текстовое представление брони.
//
Функция СформироватьПредставлениеБрони(
	Бронь,
	ВидСобытия,
	ДополнительноеОписание,
	КодЯзыка)
	
	ПредставлениеОбъекта = "";
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеОбъекта,
		НСтр("ru = 'Бронь'", КодЯзыка),
		Бронь.Ссылка);
	Если Бронь.ТипЗаписи = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
		БроньОбъект = Бронь.Ссылка.ПолучитьОбъект();
		ПредставлениеПовторения = БроньОбъект.ПолучитьПредставлениеПовторения();
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			ПредставлениеОбъекта,
			НСтр("ru = 'Повторять'", КодЯзыка),
			ПредставлениеПовторения);
	КонецЕсли;
	Если Бронь.СостояниеБрони = Перечисления.СостоянияБроней.Отменена Тогда
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			ПредставлениеОбъекта,
			НСтр("ru = 'Бронь отменена по причине'", КодЯзыка),
			Бронь.ПричинаОтмены);
	ИначеЕсли Бронь.ПометкаУдаления Тогда
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			ПредставлениеОбъекта,
			"",
			НСтр("ru = 'Бронь помечена на удаление.'", КодЯзыка));
	КонецЕсли;
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеОбъекта,
		НСтр("ru = 'Автор'", КодЯзыка),
		Бронь.Автор);
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеОбъекта,
		НСтр("ru = 'Количество человек'", КодЯзыка),
		Бронь.КоличествоЧеловек);
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеОбъекта,
		НСтр("ru = 'Техническое обеспечение'", КодЯзыка),
		Бронь.ТехническоеОбеспечение);
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеОбъекта,
		НСтр("ru = 'Хозяйственное обеспечение'", КодЯзыка),
		Бронь.ХозяйственноеОбеспечение);
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеОбъекта,
		НСтр("ru = 'Комментарий'", КодЯзыка),
		Бронь.Комментарий);
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеОбъекта,
		НСтр("ru = 'Ссылка'", КодЯзыка),
		РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(Бронь));
	
	Возврат ПредставлениеОбъекта;
	
КонецФункции

// Формирует текстовое представление записи рабочего календаря.
//
// Параметры:
//  ЗаписьКалендаря - СправочникСсылка.ЗаписиРабочегоКалендаря - Запись рабочего календаря.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий,
//               ПеречислениеСсылка.СобытияУведомлений - Событие, произошедшее с объектом.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текстовое представление записи рабочего календаря.
//
Функция СформироватьПредставлениеЗаписиКалендаря(
	ЗаписьКалендаря,
	ВидСобытия,
	ДополнительноеОписание,
	КодЯзыка)
	
	Представление = "";
	
	РеквизитыЗаписиКалендаря = Справочники.ЗаписиРабочегоКалендаря.РеквизитыЗаписиКалендаря(ЗаписьКалендаря);
	
	// Заголовок и пользователь.
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		Представление,
		,
		РеквизитыЗаписиКалендаря.Наименование,
		РеквизитыЗаписиКалендаря.Автор);
	
	// Дата
	ПредставлениеДаты = РаботаСРабочимКалендаремКлиентСервер.ПолучитьПредставлениеДаты(
		РеквизитыЗаписиКалендаря.ДатаНачала,
		РеквизитыЗаписиКалендаря.ДатаОкончания, 
		РеквизитыЗаписиКалендаря.ВесьДень);
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		Представление,
		,
		ПредставлениеДаты);
	
	// Повторение
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		Представление,
		НСтр("ru = 'Повторять'", КодЯзыка), 
		РеквизитыЗаписиКалендаря.Повторять);
	
	// Описание
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		Представление,
		,
		РеквизитыЗаписиКалендаря.Описание);
	
	// Вид мероприятия и место проведения.
	Если ТипЗнч(РеквизитыЗаписиКалендаря.Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда
		
		РеквизитыМероприятия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			РеквизитыЗаписиКалендаря.Предмет, "ВидМероприятия, МестоПроведения");
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			Представление,
			НСтр("ru = 'Вид мероприятия'", КодЯзыка), 
			РеквизитыМероприятия.ВидМероприятия);
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			Представление,
			НСтр("ru = 'Место проведения'", КодЯзыка), 
			РеквизитыМероприятия.МестоПроведения);
		
	КонецЕсли;
	
	НавигационнаяСсылка = РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(ЗаписьКалендаря);
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		Представление,
		НСтр("ru = 'Ссылка'", КодЯзыка), 
		НавигационнаяСсылка);
	
	Возврат Представление;
	
КонецФункции

// Формирует текстовое представление карточки контроля.
//
// Параметры:
//  КарточкаКонтроля - СправочникСсылка.Контроль - Контрольная карточка, по которой формируется уведомление.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Событие, произошедшее с объектом.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текстовое представление контрольной карточки.
//
Функция СформироватьПредставлениеКонтрольнойКарточки(
	КарточкаКонтроля,
	ВидСобытия,
	ДополнительноеОписание,
	КодЯзыка)
	
	НадписьНеУказанСрок = НСтр("ru = 'не указан'", КодЯзыка);
	ФорматДаты = СтрШаблон("ДЛФ=DD; ДП='%1'", НадписьНеУказанСрок);
	
	ПредставлениеКонтроля = "";
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеКонтроля,
		НСтр("ru = 'Контрольная карточка'", КодЯзыка),
		КарточкаКонтроля.Ссылка);
	Если ЗначениеЗаполнено(ДополнительноеОписание) И ДополнительноеОписание > 1 Тогда 
		ПредставлениеСрока = РаботаСУведомлениями.ПолучитьПредставлениеСрока(
			КарточкаКонтроля.Контролер,
			КарточкаКонтроля.СрокИсполнения,
			ВидСобытия,
			КодЯзыка,
			Истина);
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ПредставлениеКонтроля,
			Символы.ПС,
			ПредставлениеСрока);
	КонецЕсли;
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеКонтроля,
		НСтр("ru = 'Описание'", КодЯзыка),
		КарточкаКонтроля.Описание);
	
	Если ЗначениеЗаполнено(КарточкаКонтроля.Предмет) Тогда
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			ПредставлениеКонтроля,
			НСтр("ru = 'Предмет'", КодЯзыка),
			Контроль.СформироватьПредставлениеПредмета(КарточкаКонтроля.Предмет));
	КонецЕсли;
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеКонтроля,
		НСтр("ru = 'Срок контроля'", КодЯзыка),
		Формат(КарточкаКонтроля.СрокИсполнения, ФорматДаты));
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеКонтроля,
		НСтр("ru = 'Кого контролировать'", КодЯзыка),
		КарточкаКонтроля.ИсполнителиСтрокой);
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеКонтроля,
		НСтр("ru = 'Контролер'", КодЯзыка),
		КарточкаКонтроля.Контролер);
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеКонтроля,
		НСтр("ru = 'Ссылка'", КодЯзыка),
		РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(КарточкаКонтроля));
	
	Возврат ПредставлениеКонтроля;
	
КонецФункции

// Формирует текстовое представление контрольной точки.
//
// Параметры:
//  КонтрольнаяТочка - СправочникСсылка.КонтрольныеТочки - Контрольная точки, по которой формируется уведомление.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Событие, произошедшее с объектом.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текстовое представление контрольной карточки.
//
Функция СформироватьПредставлениеКонтрольнойТочки(
	КонтрольнаяТочка,
	ВидСобытия,
	ДополнительноеОписание,
	КодЯзыка)
	
	НадписьНеУказанСрок = НСтр("ru = 'не указан'", КодЯзыка);
	ФорматДаты = СтрШаблон("ДЛФ=DD; ДП='%1'", НадписьНеУказанСрок);
	
	ПредставлениеКонтрольнойТочки = "";
	
	Если ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтрольнойТочки
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаКонтрольнаяТочка Тогда
		
		ПредставлениеСрока = РаботаСУведомлениями.ПолучитьПредставлениеСрока(
			КонтрольнаяТочка.Ответственный,
			КонтрольнаяТочка.ПлановыйСрок,
			ВидСобытия,
			КодЯзыка);
		
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ПредставлениеКонтрольнойТочки,
			Символы.ПС,
			ПредставлениеСрока);
		
	КонецЕсли;
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеКонтрольнойТочки,
		НСтр("ru = 'Контрольная карточка'", КодЯзыка),
		Символы.ПС + КонтрольнаяТочка.Описание);
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеКонтрольнойТочки,
		НСтр("ru = 'Ссылка'", КодЯзыка),
		РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(КонтрольнаяТочка));
	
	Возврат ПредставлениеКонтрольнойТочки;
	
КонецФункции

// Позволяет скорректировать формирование текстового представления объекта для уведомления.
//
// Параметры:
//  Объект - СправочникСсылка, ДокументСсылка - Объект, по которому формируется уведомление.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Событие, произошедшее с объектом.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текстовое представление объекта.
//
Функция СформироватьПредставлениеОбъектаПереопределяемый(Объект, ВидСобытия, ПолучательУведомления, ДополнительноеОписание)
	
	ПредставлениеОбъекта = "";
	
	Возврат ПредставлениеОбъекта;
	
КонецФункции

// Формирует текстовое представление отсутствия.
//
// Параметры:
//  Отсутствие - ДокументСсылка.Отсутствие - Отсутствие, по которому формируется уведомление.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Событие, произошедшее с объектом.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текстовое представление отсутствия.
//
Функция СформироватьПредставлениеОтсутствия(
	Отсутствие,
	ВидСобытия,
	ДополнительноеОписание,
	КодЯзыка)
	
	ПредставлениеОтсутствия = Отсутствия.ПолучитьПредставлениеОтсутствияДляТекстаПисьма(Отсутствие);
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеОтсутствия,
		НСтр("ru = 'Ссылка'", КодЯзыка), 
		РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(Отсутствие));
	
	Возврат ПредставлениеОтсутствия;
	
КонецФункции

// Формирует текстовое представление показателя процесса.
//
// Параметры:
//  ПоказательПроцесса - СправочникСсылка.ПоказателиПроцессов - Показатель процесса, по которому формируется уведомление.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Событие, произошедшее с объектом.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текстовое представление показателя процесса.
//
Функция СформироватьПредставлениеПоказателяПроцесса(
	ПоказательПроцесса,
	ВидСобытия,
	ДополнительноеОписание,
	КодЯзыка)
	
	ПредставлениеОбъекта = "";
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеЗначенияПоказателяПроцесса Тогда
		ТекущиеДанные = РегистрыСведений.ЗначенияПоказателейПроцессов.ТекущиеДанные(ПоказательПроцесса);
		Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ДинамикаПоказателя <> 0 Тогда
			ПредставлениеДинамики = 
				?(ТекущиеДанные.ДинамикаПоказателя = 1,
					НСтр("ru = 'выросло'", КодЯзыка),
					НСтр("ru = 'снизилось'", КодЯзыка));
			ПредставлениеОбъекта = СтрШаблон(
				НСтр("ru = 'Значение показателя ""%1"" <b>%2</b> на <b>%3%%</b> и составляет <b>%4</b>.'", КодЯзыка),
				Строка(ПоказательПроцесса),
				ПредставлениеДинамики,
				ТекущиеДанные.ИзменениеПроцент,
				ТекущиеДанные.ПредставлениеЗначения);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ПредставлениеОбъекта) Тогда
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			ПредставлениеОбъекта,
			НСтр("ru = 'Показатель процесса'", КодЯзыка),
			ПоказательПроцесса.Ссылка);
	КонецЕсли;
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеОбъекта,
		НСтр("ru = 'Ссылка'", КодЯзыка),
		РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(ПоказательПроцесса));
	
	Возврат ПредставлениеОбъекта;
	
КонецФункции

// Формирует текстовое представление бизнес-процесса.
//
// Параметры:
//  Процесс - БизнесПроцессСсылка - Бизнес-процесс, по которому формируется уведомление.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Событие, произошедшее с объектом.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текстовое представление бизнес-процесса.
//
Функция СформироватьПредставлениеПроцесса(Процесс, ВидСобытия, ДополнительноеОписание, КодЯзыка)
	
	ПредставлениеПроцесса = "";
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеПроцесса,
		ТипЗнч(Процесс.Ссылка),
		Процесс.Ссылка);
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса Тогда
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			ПредставлениеПроцесса,
			НСтр("ru = 'Причина прерывания'", КодЯзыка),
			Процесс.ПричинаПрерывания);
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ОзнакомлениеСПоложительнымРезультатомПроцесса Тогда
		Если БизнесПроцессыИЗадачиСервер.ПроцессЗавершенСПоложительнымРезультатом(Процесс) Тогда
			ОписаниеРезультатаПроцесса = 
				СтрРазделить(БизнесПроцессыИЗадачиСервер.ОписаниеРезультатаЗавершенияПроцесса(Процесс, КодЯзыка), ":");
			
			РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
				ПредставлениеПроцесса,
				СокрЛП(ОписаниеРезультатаПроцесса[0]),
				СокрЛП(ОписаниеРезультатаПроцесса[1]));
		КонецЕсли;
	КонецЕсли;
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеПроцесса,
		НСтр("ru = 'Ссылка'", КодЯзыка),
		РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(Процесс));
	
	Возврат ПредставлениеПроцесса;
	
КонецФункции

// Формирует текстовое представление сообщения.
//
// Параметры:
//  Сообщение - СправочникСсылка.СообщенияОбсуждений - Сообщение, по которому формируется уведомление.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Событие, произошедшее с объектом.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текстовое представление сообщения
//
Функция СформироватьПредставлениеСообщения(
	Сообщение,
	ВидСобытия,
	ДополнительноеОписание,
	КодЯзыка)
	
	ПредставлениеСообщения = "";
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеСообщения,
		НСтр("ru = 'Сообщение'", КодЯзыка),
		Сообщение.ТекстСообщения);
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеСообщения,
		НСтр("ru = 'Тема'", КодЯзыка),
		Сообщение.ВладелецСообщения);
	Если ЗначениеЗаполнено(Сообщение.ВладелецСообщения) Тогда
		ТемаСообщения = Сообщение.ВладелецСообщения;
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			ПредставлениеСообщения,
			НСтр("ru = 'Предмет обсуждения'", КодЯзыка),
			ТемаСообщения.Документ, ТипЗнч(ТемаСообщения.Документ));
	КонецЕсли;
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеСообщения,
		НСтр("ru = 'Автор'", КодЯзыка),
		Сообщение.Автор);
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеСообщения,
		НСтр("ru = 'Дата'", КодЯзыка),
		Сообщение.ДатаСоздания);
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеСообщения,
		НСтр("ru = 'Ссылка'", КодЯзыка), 
		РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(Сообщение));
	
	Возврат ПредставлениеСообщения;
	
КонецФункции

// Формирует текстовое представление уведомления программы.
// 
// Параметры:
//  Объект - ЛюбаяСсылка - Объект уведомления программы.
//  Описание - Строка - Описание уведомления.
//
// Возвращаемое значение:
//  Строка - Текстовое представление уведомления программы.
//
Функция СформироватьПредставлениеУведомленияПрограммы(
	Объект,
	Описание,
	КодЯзыка)
	
	ПредставлениеУведомления = "";
	
	НавигационнаяСсылкаНаОбъектУведомления = "";
	Если Объект <> Неопределено Тогда
		НавигационнаяСсылкаНаОбъектУведомления =
			РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(Объект);
	КонецЕсли;
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеУведомления,
		,
		Описание);
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеУведомления,
		НСтр("ru = 'Ссылка на объект уведомления'", КодЯзыка),
		НавигационнаяСсылкаНаОбъектУведомления);
	
	Возврат ПредставлениеУведомления;
	
КонецФункции

// Формирует текстовое представление документа предприятия для поступления и отклонения по ЭДО.
//
Функция СформироватьПредставлениеВнутреннегоДокумента(
	ДокументПредприятия,
	ВидСобытия,
	ДополнительноеОписание,
	КодЯзыка)
	
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеДокумента
		И ДокументПредприятия.Источник = Справочники.ИсточникиДанных.ЭДО Тогда
		
		ДанныеСостоянияЭДО = ОбменСКонтрагентамиДОВызовСервера.ПолучитьСостояниеДокумента(ДокументПредприятия);
		
		ПредставлениеВнутреннегоДокумента = СтрШаблон(
			НСтр("ru = 'От контрагента %1 по ЭДО поступил новый документ: %2. Требуется проверка.'", КодЯзыка),
			ДанныеСостоянияЭДО.Контрагент,
			РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(ДокументПредприятия));
		
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			ПредставлениеВнутреннегоДокумента,
			НСтр("ru = 'Комментарий'", КодЯзыка),
			ДанныеСостоянияЭДО.Комментарий);
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ОтклонениеДокументаКонтрагентомПоЭДО Тогда
		
		ДанныеСостоянияЭДО = ОбменСКонтрагентамиДОВызовСервера.ПолучитьСостояниеДокумента(ДокументПредприятия);
		
		ПредставлениеВнутреннегоДокумента = СтрШаблон(
			НСтр("ru = 'Контрагент %1 по ЭДО отклонил документ: %2. Требуется корректировка.'", КодЯзыка),
			ДанныеСостоянияЭДО.Контрагент,
			РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(ДокументПредприятия));
		
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			ПредставлениеВнутреннегоДокумента,
			НСтр("ru = 'Комментарий'", КодЯзыка),
			ДанныеСостоянияЭДО.Комментарий);
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ОбменПоЭДОВыполненУспешно Тогда
		
		ДанныеСостоянияЭДО = ОбменСКонтрагентамиДОВызовСервера.ПолучитьСостояниеДокумента(ДокументПредприятия);
		
		ПредставлениеВнутреннегоДокумента = СтрШаблон(
			НСтр("ru = 'Обмен с контрагентом %1 по ЭДО выполнен успешно: %2.'", КодЯзыка),
			ДанныеСостоянияЭДО.Контрагент,
			РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(ДокументПредприятия));
		
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			ПредставлениеВнутреннегоДокумента,
			НСтр("ru = 'Комментарий'", КодЯзыка),
			ДанныеСостоянияЭДО.Комментарий);
			
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ЭДОДокументАннулирован Тогда

		ПредставлениеВнутреннегоДокумента = НСтр("ru = 'Документ ЭДО аннулирован'", КодЯзыка);
		
		МассивЭДО = ОбменЭДОДокументооборот.ЭлектронныеДокументыОбъектаУчета(ДокументПредприятия);
		ДокументЭДО = Неопределено;
		Если МассивЭДО.Количество() = 1 Тогда
			
			ДокументЭДО = МассивЭДО[0];
			Комментарий = ОбменЭДОДокументооборот.СостояниеДокументаПодробно(ДокументЭДО, ВидСобытия);
			Если ЗначениеЗаполнено(Комментарий) Тогда
				ПредставлениеВнутреннегоДокумента = ПредставлениеВнутреннегоДокумента 
				+ Символы.ВК + Символы.ВК + Комментарий + Символы.ВК + Символы.ВК;
			КонецЕсли;	
			
		КонецЕсли;	
		
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			ПредставлениеВнутреннегоДокумента,,
			РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(ДокументПредприятия));

	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ЭДОТребуетсяПодтверждениеАннулирования Тогда
		
		ПредставлениеВнутреннегоДокумента = НСтр("ru = 'Документ ЭДО: требуется подтверждение аннулирования'", КодЯзыка);
		
		МассивЭДО = ОбменЭДОДокументооборот.ЭлектронныеДокументыОбъектаУчета(ДокументПредприятия);
		ДокументЭДО = Неопределено;
		Если МассивЭДО.Количество() = 1 Тогда
			
			ДокументЭДО = МассивЭДО[0];
			Комментарий = ОбменЭДОДокументооборот.СостояниеДокументаПодробно(ДокументЭДО, ВидСобытия);
			Если ЗначениеЗаполнено(Комментарий) Тогда
				ПредставлениеВнутреннегоДокумента = ПредставлениеВнутреннегоДокумента 
				+ Символы.ВК + Символы.ВК + Комментарий + Символы.ВК + Символы.ВК;
			КонецЕсли;	
			
		КонецЕсли;	
		
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			ПредставлениеВнутреннегоДокумента,,
			РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(ДокументПредприятия));
			
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ЭДОДокументОтклонен Тогда
		
		ПредставлениеВнутреннегоДокумента = НСтр("ru = 'Документ ЭДО отклонен'", КодЯзыка);
		
		МассивЭДО = ОбменЭДОДокументооборот.ЭлектронныеДокументыОбъектаУчета(ДокументПредприятия);
		ДокументЭДО = Неопределено;
		Если МассивЭДО.Количество() = 1 Тогда
			
			ДокументЭДО = МассивЭДО[0];
			Комментарий = ОбменЭДОДокументооборот.СостояниеДокументаПодробно(ДокументЭДО, ВидСобытия);
			Если ЗначениеЗаполнено(Комментарий) Тогда
				ПредставлениеВнутреннегоДокумента = ПредставлениеВнутреннегоДокумента 
				+ Символы.ВК + Символы.ВК + Комментарий + Символы.ВК + Символы.ВК;
			КонецЕсли;	
			
		КонецЕсли;	
		
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			ПредставлениеВнутреннегоДокумента,,
			РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(ДокументПредприятия));
	
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ЭДОДокументИсправлен Тогда
		
		МассивЭДО = ОбменЭДОДокументооборот.ЭлектронныеДокументыОбъектаУчета(ДокументПредприятия);
		ДокументЭДО = Неопределено;
		Если МассивЭДО.Количество() = 1 Тогда
			ДокументЭДО = МассивЭДО[0];
		КонецЕсли;	
		
		ПредставлениеВнутреннегоДокумента = СтрШаблон(
			НСтр("ru = 'Поступила новая версия отклоненного документа ЭДО %1'", КодЯзыка),
			Строка(ДокументЭДО));
		
		РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
			ПредставлениеВнутреннегоДокумента,,
			РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(ДокументПредприятия));
		
	Иначе
		
		ПредставлениеВнутреннегоДокумента = "";
		
	КонецЕсли;
	
	Возврат ПредставлениеВнутреннегоДокумента;
	
КонецФункции

// Формирует текстовое представление действия.
//
// Параметры:
//	Действие - ОпределяемыйТип.Действие - Действие, по которому формируется уведомление.
//	ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Событие, произошедшее с объектом.
//	ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//	Строка - Текстовое представление бизнес-процесса.
//
Функция СформироватьПредставлениеДействия(Действие, ВидСобытия, ДополнительноеОписание, КодЯзыка)
	
	ПредставлениеДействия = "";
	
	РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие, "Предмет, Автор");
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеДействия,
		ДействияСервер.ПредставлениеДействия(Действие, ""),
		РеквизитыДействия.Предмет);
	
	Если ВидСобытия = Перечисления.СобытияУведомлений.ОзнакомлениеСПоложительнымРезультатомДействияОбработки Тогда
		Если ДействияСервер.ДействиеЗавершеноСПоложительнымРезультатом(Действие) Тогда
			
			ПредставлениеРеквизитовДействия = "";
			ПредставлениеРезультатаДействия = "";
			
			РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
				ПредставлениеРеквизитовДействия,
				"Кому",
				ДействияСервер.ОзнакамливаемыйСРезультатом(Действие));
				
			РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
				ПредставлениеРеквизитовДействия,
				"Автор",
				РеквизитыДействия.Автор);
			
			ОписаниеРезультатаДействия = 
				СтрРазделить(ДействияСервер.ОписаниеРезультатаЗавершенияДействия(Действие, КодЯзыка), ":");
			
			РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
				ПредставлениеРезультатаДействия,
				СокрЛП(ОписаниеРезультатаДействия[0]),
				СокрЛП(ОписаниеРезультатаДействия[1]));
			
			Если ЗначениеЗаполнено(ПредставлениеРеквизитовДействия) Тогда
				ПредставлениеДействия =
					ПредставлениеДействия + Символы.ПС + Символы.ПС + ПредставлениеРеквизитовДействия;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПредставлениеРезультатаДействия) Тогда
				ПредставлениеРезультатаДействия =
					ПредставлениеДействия + Символы.ПС + Символы.ПС + ПредставлениеРезультатаДействия;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеДействия = ПредставлениеДействия + Символы.ПС;
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеДействия,
		НСтр("ru = 'Ссылка'", КодЯзыка),
		РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(РеквизитыДействия.Предмет));
	
	Возврат ПредставлениеДействия;
	
КонецФункции 

// Формирует текстовое представление документа передачи дел в архив.
//
// Параметры:
//	Документ - ДокументСсылка.ПередачаДелВАрхив - Документ, по которому формируется уведомление.
//	ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Событие, произошедшее с объектом.
//	ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//	Строка - Текстовое представление документа.
//
Функция СформироватьПредставлениеПередачиДелВАрхив(Документ, ВидСобытия, ДополнительноеОписание, КодЯзыка)

	ПредставлениеДокумента = "";
	
	РаботаСУведомлениями.ДобавитьРеквизитКСтроке(
		ПредставлениеДокумента,, РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(Документ));
		
	Возврат ПредставлениеДокумента;

КонецФункции 

// Позволяет скорректировать текст уведомления по событию с группировкой.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектыУведомления - Массив - Объекты формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительныеОписания - Соответствие - Дополнительные описания.
// 
// Возвращаемое значение:
//  Строка - Текст уведомления.
//
Функция СформироватьТекстУведомленияПоОбъектамУведомленияПереопределяемый(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектыУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительныеОписания)
	
	ТекстУведомления = "";
	
	Возврат ТекстУведомления;
	
КонецФункции

// Позволяет скорректировать текст уведомления по событию без группировки.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектУведомления - СправочникСсылка, ДокументСсылка - Объект формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Текст уведомления.
//
Функция СформироватьТекстУведомленияПоСобытиюПереопределяемый(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительноеОписание)
	
	ТекстУведомления = "";
	
	Возврат ТекстУведомления;
	
КонецФункции

// Позволяет скорректировать тему уведомления по событию с группировкой.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектыУведомления - Массив - Объекты формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительныеОписания - Соответствие - Дополнительные описания.
// 
// Возвращаемое значение:
//  Строка - Тема уведомления.
//
Функция СформироватьТемуУведомленияПоОбъектамУведомленияПереопределяемый(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектыУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительныеОписания)
	
	ТемаУведомления = "";
	
	Возврат ТемаУведомления;
	
КонецФункции

// Позволяет скорректировать тему уведомления по событию без группировки.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектУведомления - СправочникСсылка, ДокументСсылка - Объект формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Строка - Тема уведомления.
//
Функция СформироватьТемуУведомленияПоСобытиюПереопределяемый(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительноеОписание)
	
	ТемаУведомления = "";
	
	Возврат ТемаУведомления;
	
КонецФункции

// Позволяет скорректировать формирование уведомления по событию с группировкой.
// Сформированные уведомления добавляются в параметр СформированныеУведомления.
//
// Параметры:
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  Уведомления - ТаблицаЗначений - Таблица уведомлений о событиях для пользователей.
//   * Объект - СправочникСсылка, ДокументСсылка - Объект с которым произошло событие.
//   * Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого предназначено уведомление.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Произошедшее событие.
//   * ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект, в связи с подпиской на который рассылается уведомление.
//   * ТекстУведомления - Строка - Дополнительный текст уведомления, сформированный на этапе обработки событий.
//  СформированныеУведомления - ТаблицаЗначений - Сформированные для отправки уведомления.
//   * Пользователь - СправочникСсылка.Пользователи - Получатель уведомления.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ТемаУведомления - Строка - Тема уведомления.
//   * ТекстУведомления - Строка - Текст уведомления.
//   * Уведомления - Массив - Уведомления, которые будут удалены из очереди, после отправки данного сформированного уведомления.
//   * Файлы - Массив - Файлы уведомления.
//
// Возвращаемое значение:
//  Булево - Поведение переопределено.
//
Функция СформироватьУведомленияПоВидуБизнесСобытияПереопределяемый(
	ПолучательУведомления,
	СпособУведомления,
	ВидСобытия,
	Уведомления,
	СформированныеУведомления)
	
	Переопределено = Ложь;
	
	Возврат Переопределено;
	
КонецФункции

// Позволяет скорректировать формирование уведомления по событию без группировки.
// Сформированные уведомления добавляются в параметр СформированныеУведомления.
//
// Параметры:
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ОбработанныеВидыБизнесСобытий - Массив - Виды события, по которым уже сгруппированы уведомления.
//  Уведомления - ТаблицаЗначений - Таблица уведомлений о событиях для пользователей.
//   * Объект - СправочникСсылка, ДокументСсылка - Объект с которым произошло событие.
//   * Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого предназначено уведомление.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Произошедшее событие.
//   * ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект, в связи с подпиской на который рассылается уведомление.
//   * ТекстУведомления - Строка - Дополнительный текст уведомления, сформированный на этапе обработки событий.
//  СформированныеУведомления - ТаблицаЗначений - Сформированные для отправки уведомления.
//   * Пользователь - СправочникСсылка.Пользователи - Получатель уведомления.
//   * СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ доставки уведомления.
//   * ТемаУведомления - Строка - Тема уведомления.
//   * ТекстУведомления - Строка - Текст уведомления.
//   * Уведомления - Массив - Уведомления, которые будут удалены из очереди, после отправки данного сформированного уведомления.
//   * Файлы - Массив - Файлы уведомления.
//
// Возвращаемое значение:
//  Булево - Поведение переопределено.
//
Функция СформироватьУведомленияПоСобытиямПереопределяемый(
	ПолучательУведомления,
	СпособУведомления,
	ОбработанныеВидыБизнесСобытий,
	Уведомления,
	СформированныеУведомления)
	
	Переопределено = Ложь;
	
	Возврат Переопределено;
	
КонецФункции

// Позволяет скорректировать файлы уведомления по событию с группировкой.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектыУведомления - Массив - Объекты формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительныеОписания - Соответствие - Дополнительные описания.
// 
// Возвращаемое значение:
//  Массив - Массив структур файлов уведомлений.
//   * Ссылка - СправочникСсылка.Файлы - Ссылка на файл.
//   * ИмяФайла - Строка - Имя файла.
//
Функция СформироватьФайлыУведомленияПоОбъектамУведомленияПереопределяемый(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектыУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительныеОписания)
	
	Файлы = Неопределено;
	
	Возврат Файлы;
	
КонецФункции

// Позволяет скорректировать файлы уведомления по событию без группировки.
//
// Параметры:
//  ОбъектПодписки - СправочникСсылка, ДокументСсылка - Объект подписки формируемого уведомления.
//  ВидСобытия - СправочникСсылка.ВидыБизнесСобытий, ПеречислениеСсылка.СобытияУведомлений - Вид события формируемого уведомления.
//  ОбъектУведомления - СправочникСсылка, ДокументСсылка - Объект формируемого уведомления.
//  ПолучательУведомления - СправочникСсылка.Пользователи - Получатель формируемого уведомления.
//  СпособУведомления - ПеречислениеСсылка.СпособыУведомления - Способ формируемого уведомления.
//  ДополнительноеОписание - Строка - Дополнительное описание.
// 
// Возвращаемое значение:
//  Массив - Массив структур файлов уведомлений.
//   * Ссылка - СправочникСсылка.Файлы - Ссылка на файл.
//   * ИмяФайла - Строка - Имя файла.
//
Функция СформироватьФайлыУведомленияПоСобытиюПереопределяемый(
	ОбъектПодписки,
	ВидСобытия,
	ОбъектУведомления,
	ПолучательУведомления,
	СпособУведомления,
	ДополнительноеОписание)
	
	Файлы = Неопределено;
	
	Возврат Файлы;
	
КонецФункции

#КонецОбласти