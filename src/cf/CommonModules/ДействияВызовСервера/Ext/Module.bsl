
#Область ПрограммныйИнтерфейс

// См. ДействияСервер.НовоеДействие
//
Функция НовоеДействие(ВидДействия, Параметры) Экспорт 
	
	Возврат ДействияСервер.НовоеДействие(ВидДействия, Параметры);
	
КонецФункции

// См. ДействияСервер.ИмяСправочникаПоВидуИДействию
//
Функция ИмяСправочникаПоВидуИДействию(ВидДействия, Действие = Неопределено) Экспорт 
	
	Возврат ДействияСервер.ИмяСправочникаПоВидуИДействию(ВидДействия, Действие);
	
КонецФункции

// Преобразует состояние действия к единой числовой шкале по степени успешности.
//
// Параметры:
//  Результат - ПеречислениеСсылка.СостоянияВыполненияДействий - состояние действия.
// 
// Возвращаемое значение:
//   - Число - от 0 до 5.
//
Функция РангСостоянияДействия(Состояние, ДляВыбораМинимального = Ложь) Экспорт
	
	Имя = XMLСтрока(Состояние);
	
	Если Имя = "" Тогда
		Возврат ?(ДляВыбораМинимального, 5, 0);
		
	ИначеЕсли Имя = "Завершено" Или Имя = "Остановлено" Тогда
		Возврат 3;
		
	ИначеЕсли Имя = "ВОчередиВыполнения" Тогда
		Возврат 1;
	Иначе
		Возврат 2;
		
	КонецЕсли;
	
КонецФункции

// Отмечает результат выполнения действия.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия - Ссылка на выполняемое действие.
//  УчастникСтруктура - Структура ("Участник, ФункцияУчастника, ИдентификаторУчастника")
//  Результат - ПеречислениеСсылка.РезультатыВыполненияДействий - состояние действия.
//  ПараметрыВыполнения - Структура (Комментарий, НомерИтерации, ПодписиЭП, ДатаИсполнения, ЕстьФайлыОтчета)
//
Процедура ОтметитьРезультатВыполнения(Знач Действие, Знач УчастникСтруктура, Знач Результат, Знач ПараметрыВыполнения) Экспорт  
	
	Комментарий = ПараметрыВыполнения.Комментарий; 
	НомерИтерации = ПараметрыВыполнения.НомерИтерации; 
	ПодписиЭП = ПараметрыВыполнения.ПодписиЭП; 
	ДатаИсполнения = ПараметрыВыполнения.ДатаИсполнения;
	ЕстьФайлыОтчета = ПараметрыВыполнения.ЕстьФайлыОтчета;	
	
	ПараметрыИзменения = ДействияСервер.СтруктураПараметровИзмененияДанныхДействия();
	ПараметрыИзменения.Вставить("ИдентификаторУчастника", УчастникСтруктура.ИдентификаторУчастника);
	ПараметрыИзменения.Вставить("Функция", УчастникСтруктура.ФункцияУчастника);
	ПараметрыИзменения.Вставить("Участник", УчастникСтруктура.Участник);
	
	ПараметрыИзменения.Вставить("НомерИтерации", НомерИтерации);
	ПараметрыИзменения.Вставить("ЕстьФайлыОтчета", ЕстьФайлыОтчета);    
	
	Если ПараметрыВыполнения.Свойство("ЭтоВыполнениеЗадачиПоПочте") Тогда
		ПараметрыИзменения.Вставить("ЭтоВыполнениеЗадачиПоПочте", ПараметрыВыполнения.ЭтоВыполнениеЗадачиПоПочте);
	КонецЕсли;

	Если ПараметрыВыполнения.Свойство("ЭтоВыполнениеЗадачиПоЭскалации") Тогда
		ПараметрыИзменения.Вставить("ЭтоВыполнениеЗадачиПоЭскалации", ПараметрыВыполнения.ЭтоВыполнениеЗадачиПоЭскалации);
	КонецЕсли;
	
	ПараметрыИзменения.Результат = Результат;
	ПараметрыИзменения.Комментарий = Комментарий;
	
	Если Не ЗначениеЗаполнено(ДатаИсполнения) Тогда
		ДатаИсполнения = ТекущаяДатаСеанса();
	КонецЕсли;
	ПараметрыИзменения.ДатаИсполнения = ДатаИсполнения;
	ПараметрыИзменения.ПодписиЭП = ПодписиЭП;
	
	Если УчастникСтруктура.Свойство("ФактическийИсполнительПолный") Тогда
		ПараметрыИзменения.Вставить("ФактическийИсполнительПолный", УчастникСтруктура.ФактическийИсполнительПолный);
	Иначе
		ПараметрыИзменения.Вставить("ФактическийИсполнительПолный", Неопределено);
	КонецЕсли;
	
	ДействияСервер.ВыполнитьДействиеУчастником(Действие, ПараметрыИзменения);
	
КонецПроцедуры

// Отмечает результат выполнения действия.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия - Ссылка на выполняемое действие.
//  Участник - СправочникСсылка.Сотрудники - ссылка на Участника действия.
//  Результат - ПеречислениеСсылка.РезультатыВыполненияДействий - состояние действия.
//  Комментарий - Строка
//
Процедура ОтметитьРезультатВыполненияИЗаписатьФактическогоИсполнителя(Действие, УчастникСтруктура, Результат,
	Комментарий = "") Экспорт
	
	Сведения = Новый Структура(
		"Действие, ИдентификаторУчастника, ФактическийИсполнитель",
		Действие, 
		УчастникСтруктура.ИдентификаторУчастника, 
		Сотрудники.ОсновнойСотрудник());
	
	РегистрыСведений.СведенияОбУчастникахДействий.ЗаписатьСведения(
		Действие, УчастникСтруктура.ИдентификаторУчастника, Сведения);  
		
	ПараметрыВыполненияСтруктура = ДействияКлиентСервер.СтруктураОтметитьРезультатВыполнения();     
	ПараметрыВыполненияСтруктура.Комментарий = Комментарий;
		
	ОтметитьРезультатВыполнения(Действие, УчастникСтруктура, Результат,	ПараметрыВыполненияСтруктура);
	
КонецПроцедуры

// Преобразует все результаты действий к единой числовой шкале по степени успешности.
//
// Параметры:
//  Результат - ПеречислениеСсылка.Результаты<ВидДействия> - результат действия.
//  ДляВыбораМинимального - Булево - режим отсечения не значащих значений более высоким рангом.
// 
// Возвращаемое значение:
//   - Число - от 0 до 9.
//
Функция РангРезультатаДействия(Результат, ДляВыбораМинимального = Ложь) Экспорт
	
	Имя = XMLСтрока(Результат);
	
	Если Имя = "" Тогда
		Возврат ?(ДляВыбораМинимального, 8, 0);
		
	ИначеЕсли Имя = "Подписано" Или Имя = "Принято" 
		Или Имя = "Утверждено" Или Имя = "Согласовано" 
		Или Имя = "Зарегистрировано" Или Имя = "Положительно" Тогда
		Возврат 5;
		
	ИначеЕсли Имя = "Исполнено" Или Имя = "Выполнено" 
		Или Имя = "Рассмотрено" Или Имя = "Ознакомлен" Тогда
		Возврат 4;
		
	ИначеЕсли Имя = "СогласованоСЗамечаниями" Или Имя = "ПоложительноСЗамечаниями" Тогда
		Возврат 3;
		
	ИначеЕсли Имя = "НеСогласовано" Или Имя = "НеУтверждено" 
		Или Имя = "НеПодписано" Или Имя = "НеПринято" 
		Или Имя = "НеЗарегистрировано" Или Имя = "Отрицательно" Тогда
		Возврат 2;
		
	ИначеЕсли Имя = "Отказ" Тогда
		Возврат ?(ДляВыбораМинимального, 9, 1);
		
	Иначе
		Возврат 4;
		
	КонецЕсли;
	
КонецФункции

// Возвращает Истину, если у пользователя есть права на выполнение действия
// 
// Параметры:
// 	Участник - СправочникСсылка.Сотрудники, СправочникСсылка.Пользователи - ссылка на исполнителя действия.
// 	
// Возвращаемое значение:
// 	Булево - Истина, если у пользователя есть права на выполнение действия
//
Функция ТекущийПользовательМожетВыполнитьДействие(Участник) Экспорт
	
	РолиПерекрываютНастройкиДоступностиДействий = ДействияСервер.РолиПерекрываютНастройкиДоступностиДействий();
	
	ТекущийПользовательЯвляетсяИсполнителем 
		= СотрудникиВызовСервера.ТекущийПользовательИсполнитель(Участник);
		
	Возврат (РолиПерекрываютНастройкиДоступностиДействий 
		Или ТекущийПользовательЯвляетсяИсполнителем);	
	
КонецФункции	

// Вернет действие и реквизиты задачи
// 
// Параметры:
//  Задача - ссылка на задачу
// 	
// Возвращаемое значение:
// 	Структура - содержащая действие и реквизиты задачи
//
Функция ДействиеИРеквизитыЗадачи(Задача) Экспорт
	
	Описание = Новый Структура;
	Описание.Вставить("Действие", ДействиеЗадачи(Задача));
	Описание.Вставить("Выполнена", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "Выполнена"));
	
	Возврат Описание;
	
КонецФункции	

// Вернет Истина если задача по действию и ИД выполена
// 
// Параметры:
// 	Действие - ОпределяемыйТип.Действия - ссылка на действие.
// 	ИдентификаторУчастника - УникальныйИдентификатор - ИД участника.
// 	
// Возвращаемое значение:
// 	Булево - Истина, если задача по действию и ИД выполена
//
Функция ЗадачаВыполнена(Действие, ИдентификаторУчастника) Экспорт
	
	Задача = РаботаСПроцессамиПоДействиямВызовСервера.ЗадачаПроцессаПоУчастникуДействия(
		Действие, ИдентификаторУчастника);
		
	Если ЗначениеЗаполнено(Задача) Тогда
		
		Выполнена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "Выполнена");
		Если Выполнена = Истина Тогда
			Возврат Выполнена;
		КонецЕсли;	
		
		Если ОбработкаОчередиЗаданийСервер.ОбъектЕстьВОчереди(Задача,, Перечисления.ТипыЗаданий.ВыполнениеЗадачи) Тогда
			Возврат Истина;
		КонецЕсли;	
		
		Возврат Выполнена;
		
	КонецЕсли;	
	
	Возврат Ложь;	
	
КонецФункции	

// Вернет действие задачи
// 
// Параметры:
// 	Действие - ОпределяемыйТип.Действия - ссылка на действие.
// 	ИдентификаторУчастника -  УникальныйИдентификатор - ИД участника.
// 	
// Возвращаемое значение:
// 	ДокументСсылка.ДействиеЗадачи - действие задачи
//
Функция ДействиеЗадачиПоДействиюИИдентификатору(Действие, ИдентификаторУчастника) Экспорт
				
	Задача = РаботаСПроцессамиПоДействиямВызовСервера.ЗадачаПроцессаПоУчастникуДействия(
		Действие, ИдентификаторУчастника);
	Возврат Документы.ДействиеЗадачи.НайтиПоИсточнику(Задача);
	
КонецФункции

// Получает руководителя подразделения кроме недействительных.
//
// Параметры:
//  Контейнер - СправочникСсылка.СтруктураПредприятия,СправочникСсылка.ПодразделенияКонтейнеры - исходное подразделение.
// 
// Возвращаемое значение:
//   - СправочникСсылка.Сотрудники - руководитель подразделения
//
Функция РазыменоватьДоРуководителя(Контейнер) Экспорт
	
	Если ТипЗнч(Контейнер) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ПодчиненностьПодразделений.РуководительПодчиненного = Сотрудники.Ссылка
		|ГДЕ
		|	ПодчиненностьПодразделений.Вышестоящее = &Контейнер
		|	И ПодчиненностьПодразделений.Подчиненное = &Контейнер
		|	И Сотрудники.ПометкаУдаления = ЛОЖЬ
		|	И Сотрудники.Действует = ИСТИНА");
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПодразделенияКонтейнеры КАК Контейнеры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
		|		ПО Контейнеры.Владелец = ПодчиненностьПодразделений.Вышестоящее
		|			И Контейнеры.Владелец = ПодчиненностьПодразделений.Подчиненное
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ПодчиненностьПодразделений.РуководительПодчиненного = Сотрудники.Ссылка
		|ГДЕ
		|	Контейнеры.Ссылка = &Контейнер
		|	И Сотрудники.ПометкаУдаления = ЛОЖЬ
		|	И Сотрудники.Действует = ИСТИНА");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Контейнер", Контейнер);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

Функция СтруктураСтрокиДействия()
	
	Возврат Новый Структура(
		"ДействиеЗадачи, ЭтоПодзадача, Этап, Участник, 
		|РазыменованныйПользователь, СрокПредставление, 
		|ПредставлениеСотрудники, ГлубинаВложенности,
		|Состояние, ПредставлениеРезультата,
		|Действие, ЭтоУчастник, Идентификатор, 
		|НомерКартинки, ЕстьПодзадачи, НомерИтерации, ДатаУстановкиСостояния,
		|ВидУчастника, Подзадача, Заголовок,
		|ФактическийУчастник, РезультатТекстом, ЕстьФайлыОтчета, СрокРассчитанный, СрокПревышен");
										
КонецФункции	

// Вернет массив структур для подзадач текущей строки
// Параметры
// РаскрываемаяСтрока - строка дерева значений
// 
// Возвращаемое значение: 
// Массив структур
// 	
Функция ПолучитьСтрокиПодзадач(РаскрываемаяСтрока) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивВозврата = Новый Массив;
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию(
		"ИспользоватьДатуИВремяВСрокахЗадач");
		
	Действие = Неопределено;	
	
	Если РаскрываемаяСтрока.ЭтоУчастник Тогда
		
		Действие = РаскрываемаяСтрока.Действие;
		
		ВыполнятьДействияПроцессами = РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами();
	
		Задача = Неопределено; // это задача процесса  
		ДействиеЗадачиПоИсточнику = Неопределено;
		Если ВыполнятьДействияПроцессами Тогда
			
			НадоПолучатьЗадачу = Истина;
			
			Если РаскрываемаяСтрока.ЕстьПодучастники
				И РаскрываемаяСтрока.Функция = Перечисления.ФункцииУчастниковПодписания.Подписывающий Тогда
				НадоПолучатьЗадачу = Ложь;
			КонецЕсли;	
			
			Если НадоПолучатьЗадачу Тогда   
				Если Не ДействияКлиентСервер.ЭтоДействиеОзнакомления(Действие) Тогда
					Задача = РаботаСПроцессамиПоДействиям.ЗадачаПроцессаПоУчастникуДействия(
						Действие, РаскрываемаяСтрока.Идентификатор);     
				Иначе		
					ДействиеЗадачиПоИсточнику = ДействияВызовСервера.ДействиеЗадачиДляСтрокиОзнакомления(
						Действие, РаскрываемаяСтрока.Идентификатор);
				КонецЕсли;	
			КонецЕсли;	
			
				// выводим подзадачи - только этой итерации. Как выполненные так и невыполненные.
				Если ЗначениеЗаполнено(Задача) Или ЗначениеЗаполнено(ДействиеЗадачиПоИсточнику) Тогда
					
					Если ЗначениеЗаполнено(Задача) Тогда
						ДействиеЗадачиПоИсточнику = Документы.ДействиеЗадачи.НайтиПоИсточнику(Задача);
					КонецЕсли;	
					Если ЗначениеЗаполнено(ДействиеЗадачиПоИсточнику) Тогда
						
						НомерИтерации = РегистрыСведений.ИтерацииДействий.НомерИтерации(Действие,
							РаскрываемаяСтрока.Идентификатор);
						
						ЗаполнитьСтрокиПодзадач(РаскрываемаяСтрока, МассивВозврата, ИспользоватьДатуИВремяВСрокахЗадач,
							ДействиеЗадачиПоИсточнику, Действие, НомерИтерации);
						
					КонецЕсли;
				КонецЕсли;
				
		КонецЕсли;
				
	ИначеЕсли РаскрываемаяСтрока.ЭтоПодзадача Тогда
		
		ДействиеЗадачи = РаскрываемаяСтрока.ДействиеЗадачи;
		НомерИтерации  = РаскрываемаяСтрока.НомерИтерации;
		
		ЗаполнитьСтрокиПодзадач(РаскрываемаяСтрока, МассивВозврата, ИспользоватьДатуИВремяВСрокахЗадач,
			ДействиеЗадачи, Действие, НомерИтерации);
		
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции	

// Вернет массив структур для подзадач текущей строки
// Параметры
// РаскрываемаяСтрока - строка дерева значений
// 
// Возвращаемое значение: 
// Массив структур
// 	
Процедура ЗаполнитьСтрокиПодзадач(РаскрываемаяСтрока, МассивВозврата, ИспользоватьДатуИВремяВСрокахЗадач,
	ДействиеЗадачиПоИсточнику, Действие, НомерИтерации)
	
	Подзадачи = ИнтеграцияЗадач.ПодзадачиПоДействию(
		ДействиеЗадачиПоИсточнику, НомерИтерации);

	Для Каждого ПодзадачаСтрока Из Подзадачи Цикл
		
		ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ПодзадачаСтрока.ВидЗадачи);
		
		Если ПодзадачаСтрока.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЧерновик Тогда
			Продолжить;
		КонецЕсли;	
		
		ДействияЗадач = ИнтеграцияЗадач.ДействияЗадачПоПодзадаче(ПодзадачаСтрока.Подзадача);
		
		Для Каждого ДействияЗадачСтрока Из ДействияЗадач Цикл
			
			Если Не ЗначениеЗаполнено(ДействияЗадачСтрока.СостояниеУчастникаЗадачи) Тогда
				Продолжить;
			КонецЕсли;

			// выполненную задачу проверки не показываем
			Если РаботаСЗадачамиПовтИсп.ЭтоПроверяющий(ДействияЗадачСтрока.ВидУчастника)
				И (ДействияЗадачСтрока.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковПроверено
				Или ДействияЗадачСтрока.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковВозвращеноНаДоработку) Тогда
				Продолжить;
			КонецЕсли;
				
			ЭлементПодзадача = СтруктураСтрокиДействия();
			
			ЭлементПодзадача.ДействиеЗадачи = ДействияЗадачСтрока.Действие; 
			
			Срок = ПодзадачаСтрока.Срок;   
			Если ДействияЗадачСтрока.ЕстьОсобыйСрок Тогда
				Срок = ДействияЗадачСтрока.ОсобыйСрок;
			КонецЕсли;	
			
			ПодзадачиСледУровень = ИнтеграцияЗадач.ПодзадачиПоДействию(
				ДействияЗадачСтрока.Действие, НомерИтерации);
			ЭлементПодзадача.ЕстьПодзадачи 
				= (ПодзадачиСледУровень.Количество() <> 0);	
			
			ЭлементПодзадача.ЭтоПодзадача = Истина;
			ЭлементПодзадача.НомерИтерации = НомерИтерации;
			ЭлементПодзадача.Этап = РаскрываемаяСтрока.Этап;
			ЭлементПодзадача.Участник = ДействияЗадачСтрока.Участник;
			ЭлементПодзадача.РазыменованныйПользователь = ЭлементПодзадача.Участник;
			ЭлементПодзадача.ГлубинаВложенности = РаскрываемаяСтрока.ГлубинаВложенности + 1;
			ЭлементПодзадача.ФактическийУчастник = ДействияЗадачСтрока.ФактическийИсполнитель;
			
			ЭлементПодзадача.ВидУчастника = ДействияЗадачСтрока.ВидУчастника;
			ЭлементПодзадача.Подзадача = ПодзадачаСтрока.Подзадача;
			ЭлементПодзадача.Заголовок = ПодзадачаСтрока.Заголовок;  
			
			ЭлементПодзадача.СрокРассчитанный = Срок;
			Если ЗначениеЗаполнено(ЭлементПодзадача.СрокРассчитанный) 
				И ЭлементПодзадача.СрокРассчитанный < ТекущаяДатаСеанса()
				И Не (ПодзадачаСтрока.СостояниеЗадачи =	Справочники.СостоянияЗадач.Закрыта)
				И Не (ДействияЗадачСтрока.СостояниеУчастникаЗадачи = Справочники.СостоянияУчастниковЗадач.Выполнена)
				И Не (ДействияЗадачСтрока.СостояниеУчастникаЗадачи = Справочники.СостоянияУчастниковЗадач.ОжидаетПроверки) 
				И Не (ДействияЗадачСтрока.СостояниеУчастникаЗадачи = Справочники.СостоянияУчастниковЗадач.ПеренесенСрок) Тогда
				ЭлементПодзадача.СрокПревышен = Истина;
			КонецЕсли;
			
			Если Не ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(
					ПодзадачаСтрока.Подзадача).Чтение Тогда
				ЭлементПодзадача.Заголовок = НСтр("ru = 'Описание скрыто'");

				ЭлементПодзадача.РезультатТекстом = "";
				ЭлементПодзадача.ЕстьФайлыОтчета = Ложь;
				
			Иначе
				
				ЭлементПодзадача.РезультатТекстом = ДействияЗадачСтрока.РезультатДействияТекстом;
				ЭлементПодзадача.ЕстьФайлыОтчета = ДействияЗадачСтрока.ЕстьПриложения;
				
			КонецЕсли;			
			
			Если ЗначениеЗаполнено(Срок) Тогда
				ФорматДаты = СрокиИсполненияПроцессовКлиентСервер.ФорматДатыСроковПроцессовИЗадач(
					ИспользоватьДатуИВремяВСрокахЗадач);
				ЭлементПодзадача.СрокПредставление = 
					Формат(Срок, ФорматДаты);
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(ПодзадачаСтрока.ДатаВыполнения) Тогда
				ЭлементПодзадача.ДатаУстановкиСостояния = ПодзадачаСтрока.ДатаВыполнения; 
			Иначе
				ЭлементПодзадача.ДатаУстановкиСостояния = ПодзадачаСтрока.Дата;
			КонецЕсли;	

			СтрокаОтступ = "";
						
			ЭлементПодзадача.ПредставлениеСотрудники = СтрокаОтступ
				+ ДействияСервер.ПредставлениеУчастника(ЭлементПодзадача.Участник, 
				ЭлементПодзадача.ФактическийУчастник);
										
			ВидСостоянияУчастниковЗадач = РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(
				ДействияЗадачСтрока.СостояниеУчастникаЗадачи);
				
			ВРаботе = Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоДействиеВРаботе(ВидСостоянияУчастниковЗадач);
			Новое = Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоНовоеДействие(ВидСостоянияУчастниковЗадач);
			Выполнено = Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоВыполненноеДействие(ВидСостоянияУчастниковЗадач);
			ОжидаетПроверки = Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОжидающееПроверкиДействие(ВидСостоянияУчастниковЗадач);
			
			Если ВРаботе Или Новое Тогда 	
				ЭлементПодзадача.Состояние = Перечисления.СостоянияВыполненияДействий.Выполняется;
			ИначеЕсли Выполнено Или ОжидаетПроверки Тогда
				ЭлементПодзадача.Состояние = Перечисления.СостоянияВыполненияДействий.Завершено;
			КонецЕсли;		
			
			Если ЗначениеЗаполнено(ДействияЗадачСтрока.РезультатДействия) Тогда
				ХарактерРезультата = РаботаСЗадачамиПовтИсп.ХарактерРезультата(ДействияЗадачСтрока.РезультатДействия);
				ЭлементПодзадача.НомерКартинки = ДействияКлиентСервер.НомерКартинкиРезультата(
						Неопределено,
						Неопределено,
						Неопределено,
						ХарактерРезультата);
			Иначе
				ЭлементПодзадача.НомерКартинки =
					ДействияКлиентСервер.НомерКартинкиРезультата(
						Неопределено,
						ЭлементПодзадача.Состояние);
			КонецЕсли;
			
			ЭлементПодзадача.ПредставлениеРезультата 
				= Строка(ДействияЗадачСтрока.СостояниеУчастникаЗадачи);
			
			Если ДействияЗадачСтрока.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковНовая Тогда
				ЭлементПодзадача.ПредставлениеРезультата = "";
			КонецЕсли;	
			
			МассивВозврата.Добавить(ЭлементПодзадача);	
			
		КонецЦикла;						
		
	КонецЦикла;	
						
КонецПроцедуры	

// Вернет Истина если действие завершено с отрицательным результатом и есть замечания в статусе Отказать.
// 
// Параметры:
// 	ДействиеСогласования - СправочникСсылка.ДействияСогласования - ссылка на действие.
// 	
// Возвращаемое значение:
// 	Булево - Истина если действие завершено с отрицательным результатом и есть замечания в статусе Отказать.
//
Функция ДействиеЗавершеноОтрицательноИЕстьЗамечания(ДействиеСогласования) Экспорт
	
	Возврат ДействияСервер.ДействиеЗавершеноОтрицательноИЕстьЗамечания(ДействиеСогласования);

КонецФункции

Функция СформироватьСтрокуПравилаЭскалации(СсылкаНаНастройку, ВидДействия) Экспорт
	
	ПравилаЭскалацииТаблица = ДействияСервер.ПравилаЭскалацииПоНастройке(
		СсылкаНаНастройку, 
		ВидДействия);

	МассивЭскалаций = Новый Массив;
	Для Каждого Стр Из ПравилаЭскалацииТаблица Цикл
		МассивЭскалаций.Добавить(СокрЛП(Стр.Ссылка));
	КонецЦикла;
	ПравилаЭскалации = СтрСоединить(МассивЭскалаций, "; ");
	Возврат ПравилаЭскалации;
	
КонецФункции

// Возвращает представление действия строкой.
// 
// Параметры:
// 	Действие - ОпределяемыйТип.Действия
// 	
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеДействияСтрокой(Действие) Экспорт
	
	Возврат ДействияСервер.ПредставлениеДействияСтрокой(Действие);
	
КонецФункции

// Возвращает текст резолюции по подчиненному исполнению.
// 
// Параметры:
//  Действие - СправочникСсылка.ДействияИсполнения
//  ИдентификаторВыщестоящего - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  Строка
//
Функция ТекстРезолюцииПоПодчиненномуИсполнению(Действие, ИдентификаторВыщестоящего) Экспорт
	
	Возврат Справочники.ДействияИсполнения.ТекстРезолюцииПоПодчиненномуИсполнению(
		Действие, ИдентификаторВыщестоящего);
	
КонецФункции

// Возвращает данные пункта исполнения.
// 
// Параметры:
//  Действие - СправочникСсылка.ДействияИсполнения.
//  ИдентификаторПункта - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  Структура - см. Справочники.ДействияИсполнения.СтруктураПунктаИсполнения()
//
Функция ПунктИсполнения(Действие, ИдентификаторПункта) Экспорт
	
	Возврат Справочники.ДействияИсполнения.ПунктИсполнения(Действие, ИдентификаторПункта);
	
КонецФункции

// Обновляет пункт исполнения.
// 
// Параметры:
//  Действие - СправочникСсылка.ДействияИсполнения
//  ИдентификаторВыщестоящего - УникальныйИдентификатор
//  ПунктИсполнения - Структура - см. Справочники.ДействияИсполнения.СтруктураПунктаИсполнения()
//
Процедура ОбновитьПунктИсполнения(Действие, ИдентификаторПункта, ПунктИсполнения) Экспорт
	
	Справочники.ДействияИсполнения.ОбновитьПунктИсполнения(
		Действие, ИдентификаторПункта, ПунктИсполнения);
	
КонецПроцедуры

// Есть право помещения действий в историю.
// 
// Возвращаемое значение:
//  Булево - Истина, если у пользователя есть право помещения действий в историю.
//
Функция ЕстьПравоПомещенияДействийВИсторию() Экспорт
	
	Возврат Пользователи.РолиДоступны("ПолныеПрава,ПомещениеДействийВИсторию");
	
КонецФункции

//  Вернет массив приложений отчета
//                       
//	Действие - ОпределяемыйТип.Действия
//	ИдентификаторУчастника - УникальныйИдентификатор
//  ДействиеЗадачи - ДокументССылка.ДействиеЗадачи
//
// Возвращаемое значение:
// 	Массив
Функция МассивФайловОтчета(Знач Действие, Знач ИдентификаторУчастника,
	Знач ДействиеЗадачи = Неопределено) Экспорт

	ФайлыОтчета = Новый Массив;   
	
	УстановитьПривилегированныйРежим(Истина); 
	
	ДействиеЗадачиПоИсточнику = ДействиеЗадачи;
	
	Если Не ЗначениеЗаполнено(ДействиеЗадачиПоИсточнику) Тогда
		
		Задача = РаботаСПроцессамиПоДействиям.ЗадачаПроцессаПоУчастникуДействия(
			Действие, ИдентификаторУчастника);
		Если Не ЗначениеЗаполнено(Задача) Тогда
			Возврат ФайлыОтчета;	
		КонецЕсли;	
			
		ДействиеЗадачиПоИсточнику = Документы.ДействиеЗадачи.НайтиПоИсточнику(Задача);	
		Если Не ЗначениеЗаполнено(ДействиеЗадачиПоИсточнику) Тогда
			Возврат ФайлыОтчета;	
		КонецЕсли;	
		
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДействиеЗадачиПриложения.Приложение КАК Приложение,
	               |	ЕстьNULL(Файлы.ТекущаяВерсияРасширение, """") КАК Расширение
	               |ИЗ
	               |	Документ.ДействиеЗадачи.Приложения КАК ДействиеЗадачиПриложения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	               |		ПО ДействиеЗадачиПриложения.Приложение = Файлы.Ссылка
	               |ГДЕ
	               |	ДействиеЗадачиПриложения.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДействиеЗадачиПоИсточнику);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Для Каждого Стр Из Таблица Цикл
		
		СтрФайл = Новый Структура("Приложение, Расширение, Наименование");
		ЗаполнитьЗначенияСвойств(СтрФайл, Стр);
		СтрФайл.Наименование = Строка(Стр.Приложение);
		ФайлыОтчета.Добавить(СтрФайл);
		
	КонецЦикла;	
	
	Возврат ФайлыОтчета;
	
КонецФункции

Процедура ЧислоУчастниковОзнакомления(ДействияОзнакомления, ЧислоУчастников, МаксимальноеЧислоДляПоказа) Экспорт
	
	МаксимальноеЧислоДляПоказа = Справочники.ДействияОзнакомления.МаксимальноеЧислоУчастниковДляЛистаОзнакомления();
	ЧислоУчастников = 0;
	
	// соберем действия ознакомления. 
	Для Каждого Действие Из ДействияОзнакомления Цикл
		
		ТекЧисло = РегистрыСведений.УчастникиОзнакомлений.ЧислоУчастниковДействия(Действие);

		ЧислоУчастников = ЧислоУчастников + ТекЧисло;
		
	КонецЦикла;	
	
КонецПроцедуры	

// Снимает отметку о выполнении действия вне программы
// 
// Параметры:
//  Действия - Массив из ОпределяемыйТип.Действия - Действия, отметку с которых нужно снять
//
Процедура СнятьОтметкуОВыполненииВнеПрограммы(Действия) Экспорт

	Для Каждого Действие Из Действия Цикл
		
		Если Не ДействияСервер.ДействиеВыполненоВнеПрограммы(Действие) Тогда
			Продолжить;
		КонецЕсли;
		
		ДействияСервер.СнятьОтметкуОВыполненииВнеПрограммы(Действие);
		
	КонецЦикла;

КонецПроцедуры

// Вернет действие по задаче
// 
// Параметры:
//	Действие - ОпределяемыйТип.Действия
//	Идентификатор - УникальныйИдентификатор
// 	
// Возвращаемое значение:
//  ДокументСсылка.ДействиеЗадачи
Функция ДействиеЗадачиДляСтрокиОзнакомления(Действие, Идентификатор) Экспорт
	
	ДействиеЗадачи = ДействияСервер.ДействиеЗадачиДляСтрокиОзнакомления(Действие, Идентификатор);
	
	Возврат ДействиеЗадачи;
	
КонецФункции	

// Вернет действие по задаче
// 
// Параметры:
//	Действие - ОпределяемыйТип.Действия
//	МассивИдентификаторов - Массив из УникальныйИдентификатор
// 	              
// Возвращаемое значение:
//  Массив из ДокументСсылка.ДействиеЗадачи
Функция ДействияЗадачиДляСтрокиОзнакомления(Действие, МассивИдентификаторов) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДействиеЗадачи.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ДействиеЗадачи КАК ДействиеЗадачи
		|ГДЕ
		|	ДействиеЗадачи.ИдентификаторВИсточнике В(&МассивИдентификаторов)
		|	И ДействиеЗадачи.Источник = &Источник");
	
	Запрос.УстановитьПараметр("Источник", Действие);
	Запрос.УстановитьПараметр("МассивИдентификаторов", МассивИдентификаторов);
	
	ДействияЗадачи = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат ДействияЗадачи;
	
КонецФункции	

// Возвращает Истина, если действие требует подписание УЭП, иначе - ложь
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия - 
// 
// Возвращаемое значение:
//  Булево - требует ли действие подписание усиленной ЭП
//
Функция ДействиеПодписываетсяУЭП(Действие) Экспорт
	
	Если ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияОзнакомления")
		Или ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияСогласования") Тогда
		
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "ПодписыватьУЭП");
	
	ИначеЕсли ДействияКлиентСервер.ЭтоДействиеПодписания(Действие) Тогда
		
		СпособПодписания = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Действие, "СпособПодписания");
		Возврат СпособПодписания = Перечисления.СпособыПодписанияПредметаДействия.УЭП;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Данные для проверки отсутствий.
// 
// Параметры:
//  ДействиеОбработки - ОпределяемыйТип.Действия.
// 
// Возвращаемое значение:
//  Структура - Данные для проверки отсутствий:
//   * Участники - Массив из СправочникСсылка.Сотрудники.
//   * Срок - Дата.
//
Функция ДанныеДляПроверкиОтсутствий(Знач ДействиеОбработки) Экспорт
	
	ДанныеДляПроверкиОтсутствий = Новый Структура;
	ДанныеДляПроверкиОтсутствий.Вставить("Участники", Новый Массив);
	ДанныеДляПроверкиОтсутствий.Вставить("Срок", ТекущаяДатаСеанса() + 86400 * 7);
	
	ДействиеОбъекта = ДействиеОбработки.ПолучитьОбъект();
	Попытка
		
		ДействиеОбъекта.Разыменовать();
		
		Для Каждого СтрокаУчастника Из ДействиеОбъекта.Участники Цикл
			Если Не ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
				Продолжить;
			КонецЕсли;
			ДанныеДляПроверкиОтсутствий.Участники.Добавить(СтрокаУчастника.Участник);
		КонецЦикла;
		
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстЖурналаРегистрации = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		СобытиеЖурналаРегистрации = НСтр("ru = 'Проверка отсутствий'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Предупреждение,,,
			ТекстЖурналаРегистрации);
	КонецПопытки;
	
	ДанныеДляПроверкиОтсутствий.Участники =
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДанныеДляПроверкиОтсутствий.Участники);
	
	Возврат ДанныеДляПроверкиОтсутствий;
	
КонецФункции

// Возвращает участников действия в виде массива для проверки на клиенте.
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия
// 
// Возвращаемое значение:
//  Массив - Участники действия
Функция УчастникиДействия(Действие) Экспорт
	Возврат ДействияСервер.УчастникиДействия(Действие).ВыгрузитьКолонку("Участник");
КонецФункции

// Проверить возможность выполнения вне программы.
// 
// Параметры:
//  Действия - Массив из ОпределяемыйТип.Действия
//  СостояниеОбработки - ПеречислениеСсылка.СостоянияОбработкиОбъектов
// 
// Возвращаемое значение:
//  Строка - Проверить возможность выполнения выделенных действий вне программы
Функция ПроверитьВозможностьВыполненияВыделенныхДействийВнеПрограммы(Действия, СостояниеОбработки) Экспорт
	
	Для Каждого Действие Из Действия Цикл
	
		Если ДействиеПодписываетсяУЭП(Действие) Тогда
			Возврат НСтр("ru = 'Нельзя отмечать выполнение вне программы действия c подписанием усиленной ЭП'");
		КонецЕсли;
		
		ВыполненоВнеПрограммы = ДействияСервер.ДействиеВыполненоВнеПрограммы(Действие);
		СостояниеДействия = РегистрыСведений.СостоянияДействий.СостояниеДействия(Действие);
		
		Если ВыполненоВнеПрограммы Тогда
			ЗапрещенноеДействие = НСтр("ru='менять результат выполненных вне программы действий'");
		Иначе
			ЗапрещенноеДействие = НСтр("ru='отмечать выполнение действий вне программы'");
		КонецЕсли;
		Если СостояниеОбработки = ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Выполняется")
			Или СостояниеОбработки = ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Остановлена") Тогда
			Возврат СтрШаблон(НСтр("ru = 'Нельзя %1, если обработка уже запущена.'"), ЗапрещенноеДействие);
		КонецЕсли;
		
		Если СостояниеОбработки = ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Завершена") Тогда
			Возврат СтрШаблон(НСтр("ru = 'Нельзя %1, если обработка уже завершена.'"), ЗапрещенноеДействие);
		КонецЕсли;
		
		Если ДействияКлиентСервер.ДействиеЗавершено(СостояниеДействия) И Не ВыполненоВнеПрограммы Тогда 
			Возврат НСтр("ru = 'Действие уже завершено.'");
		КонецЕсли;
		
		Участники = УчастникиДействия(Действие);
		
		Если ДействияКлиентСервер.ЭтоДействиеПодписания(Действие) Тогда
			Если Не Участники.Количество() Тогда
				Возврат НСтр("ru = 'Для отметки о подписании вне программы необходимо указать подписантов-сотрудников в действии подписания.'");
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого Участник Из Участники Цикл
			Если ТипЗнч(Участник) <> Тип("СправочникСсылка.Сотрудники") Тогда
				ТекстПредупреждения = НСтр("ru = 'Для отметки о выполнении вне программы необходимо либо указать конкретных исполнителей действия, либо очистить список исполнителей.
					|Участник с ошибкой: %1'");
				ТекстПредупреждения = СтрШаблон(ТекстПредупреждения, Участник);
				Возврат ТекстПредупреждения;
			КонецЕсли;
		КонецЦикла;
	
		Если Не ОбщегоНазначенияДокументооборотВызовСервера.ОбъектЭтогоУзла(Действие) Тогда
			Возврат НСтр("ru = 'Действие можно отмечать как выполненное вне программы только в том узле, в котором оно создано.'");
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

// Это 
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия
//  Участник - СправочникСсылка.Сотрудники, СправочникСсылка.СтруктураПредприятия, СправочникСсылка.АвтоподстановкиДляОбъектов, СправочникСсылка.РабочиеГруппы, Строка, СправочникСсылка.ПолныеРоли, СправочникСсылка.Пользователи
// 
// Возвращаемое значение:
//  Булево
Функция ПоЗадачеЕстьЗамещение(Действие, Участник, СотрудникиТекущегоПользователя) Экспорт

	Замещения = ЗамещающиеИПомощники.ПодходящиеЗамещенияПоДействиюИИсполнителю(Действие, Участник);
	
	Для Каждого Стр Из Замещения Цикл
		
		Если СотрудникиТекущегоПользователя.Найти(Стр.Замещающий) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат Ложь;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Вернет действие по задаче
// 
// Параметры:
//  Задача - ссылка на задачу
// 	
Функция ДействиеЗадачи(Задача)
	
	Возврат Документы.ДействиеЗадачи.НайтиПоИсточнику(Задача);
	
КонецФункции

#КонецОбласти
