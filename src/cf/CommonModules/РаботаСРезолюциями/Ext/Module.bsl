////////////////////////////////////////////////////////////////////////////////
// МОДУЛЬ ДЛЯ РАБОТЫ С РЕЗОЛЮЦИЯМИ
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает структуру ключевых реквизитов резолюции.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПолучитьСтруктуруКлючевыхРеквизитовРезолюции() Экспорт
	
	МассивИмен = Справочники.Резолюции.ПолучитьИменаКлючевыхРеквизитов();
	
	СтруктураРезолюции = Новый Структура;
	
	Для Каждого Имя Из МассивИмен Цикл
		СтруктураРезолюции.Вставить(Имя);
	КонецЦикла;
		
	Возврат СтруктураРезолюции;
	
КонецФункции

// Возвращает резолюции документа.
//
// Параметры:
//  Документ - ссылка на внутренний или входящий документ.
//  ТолькоАктивные - Булево - возвращать только не помеченные на удаление резолюции
//                   (по умолчанию Истина).
//  ПолучитьДанныеЭП - Булево - возвращать информацию об электронной подписи резолюции
//                     (по умолчанию Ложь).
//  Источник - ЗадачаСсылка.ЗадачаИсполнителя, БизнесПроцессСсылка.Рассмотрение - задача или процесс
//             создавшие резолюцию (по умолчанию Неопределено).
//  ИдентификаторУчастника - УникальныйИдентификатор - УникальныйИдентификатор участника рассмотрения.
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ПолучитьРезолюции(Документ, 
	ТолькоАктивные = Истина, 
	ПолучитьДанныеЭП = Ложь, 
	Источник = Неопределено, 
	ИдентификаторУчастника = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Если ПолучитьДанныеЭП Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Резолюции.Ссылка КАК Ссылка,
			|	Резолюции.ПометкаУдаления КАК ПометкаУдаления,
			|	Резолюции.АвторРезолюции КАК АвторРезолюции,
			|	Резолюции.ВнесРезолюцию КАК ВнесРезолюцию,
			|	Резолюции.ДатаРезолюции КАК ДатаРезолюции,
			|	Резолюции.Документ КАК Документ,
			|	Резолюции.Источник КАК Источник,
			|	Резолюции.Подписана КАК Подписана,
			|	Резолюции.ТекстРезолюции КАК ТекстРезолюции,
			|	ЭП.ДатаПодписи КАК ДатаПодписи,
			|	ЭП.УстановившийПодпись КАК УстановившийПодпись,
			|	ЭП.ДатаПроверкиПодписи КАК ДатаПроверкиПодписи,
			|	ЭП.ПодписьВерна КАК ПодписьВерна,
			|	ЭП.ТекстОшибкиПроверкиПодписи КАК ТекстОшибкиПроверкиПодписи,
			|	ЭП.ТекстОшибкиПроверкиСертификата КАК ТекстОшибкиПроверкиСертификата,
			|	Резолюции.ИдентификаторУчастника КАК ИдентификаторУчастника,
			|	Резолюции.ФактическийАвтор КАК ФактическийАвтор,
			|	ВЫБОР
			|		КОГДА СведенияОбУчастникахДействий.ПредставлениеФактическогоИсполнителя <> """"
			|			ТОГДА СведенияОбУчастникахДействий.ПредставлениеФактическогоИсполнителя
			|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(СведенияОбУчастникахДействий.ФактическийИсполнитель)
			|	КОНЕЦ КАК ПредставлениеФактическогоИсполнителя
			|ИЗ
			|	Справочник.Резолюции КАК Резолюции
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭП
			|		ПО (ЭП.ПодписанныйОбъект = Резолюции.Ссылка)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбУчастникахДействий КАК СведенияОбУчастникахДействий
			|		ПО Резолюции.ИдентификаторУчастника = СведенияОбУчастникахДействий.ИдентификаторУчастника
			|ГДЕ
			|	Резолюции.Документ = &Документ";
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Резолюции.Ссылка КАК Ссылка,
			|	Резолюции.ПометкаУдаления КАК ПометкаУдаления,
			|	Резолюции.АвторРезолюции КАК АвторРезолюции,
			|	Резолюции.ВнесРезолюцию КАК ВнесРезолюцию,
			|	Резолюции.ДатаРезолюции КАК ДатаРезолюции,
			|	Резолюции.Документ КАК Документ,
			|	Резолюции.Источник КАК Источник,
			|	Резолюции.Подписана КАК Подписана,
			|	Резолюции.ТекстРезолюции КАК ТекстРезолюции,
			|	Резолюции.ИдентификаторУчастника КАК ИдентификаторУчастника,
			|	Резолюции.ФактическийАвтор КАК ФактическийАвтор,
			|	ВЫБОР
			|		КОГДА СведенияОбУчастникахДействий.ПредставлениеФактическогоИсполнителя <> """"
			|			ТОГДА СведенияОбУчастникахДействий.ПредставлениеФактическогоИсполнителя
			|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(СведенияОбУчастникахДействий.ФактическийИсполнитель)
			|	КОНЕЦ КАК ПредставлениеФактическогоИсполнителя
			|ИЗ
			|	Справочник.Резолюции КАК Резолюции
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбУчастникахДействий КАК СведенияОбУчастникахДействий
			|		ПО Резолюции.ИдентификаторУчастника = СведенияОбУчастникахДействий.ИдентификаторУчастника
			|ГДЕ
			|	Резолюции.Документ = &Документ";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Если ТолькоАктивные Тогда
		Запрос.Текст = Запрос.Текст + " И Резолюции.ПометкаУдаления = Ложь
		|И (Резолюции.Источник ССЫЛКА Справочник.ДействияИсполнения
		|		И НЕ Резолюции.Источник.ПомещеноВИсторию
		|	ИЛИ НЕ Резолюции.Источник ССЫЛКА Справочник.ДействияИсполнения)";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник) Тогда
		Запрос.Текст = Запрос.Текст + " И Резолюции.Источник = &Источник";
		Запрос.УстановитьПараметр("Источник", Источник);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИдентификаторУчастника) Тогда
		Запрос.Текст = Запрос.Текст + " И Резолюции.ИдентификаторУчастника = &ИдентификаторУчастника";
		Запрос.УстановитьПараметр("ИдентификаторУчастника", ИдентификаторУчастника);
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО Резолюции.ДатаРезолюции УБЫВ";
	
	Запрос.Текст = МультиязычностьДокументооборот.ТекстЗапросаСведенийОбУчастникахСУчетомЯзыка(Запрос.Текст);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Возвращает резолюции документа на указанную дату.
//
// Параметры:
//  Документ - ссылка на внутренний или входящий документ.
//  ДатаРезолюции - Дата - дата, на которую необходимо найти резолюцию.
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ПолучитьРезолюциюПоДате(Документ, ДатаРезолюции) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Резолюции.Ссылка
		|ИЗ
		|	Справочник.Резолюции КАК Резолюции
		|ГДЕ
		|	Резолюции.Документ = &Документ
		|	И Резолюции.ДатаРезолюции = &ДатаРезолюции
		|	И Резолюции.ПометкаУдаления = Ложь";
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ДатаРезолюции", ДатаРезолюции);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Проверяет возможность подписания резолюции для текущего пользователя.
//
// Параметры:
//  Резолюция - ссылка или объект справочника Резолюции.
//
// Возвращаемое значение:
//  Булево
//
Функция ПроверитьДоступНаПодписание(Резолюция) Экспорт
	
	Если ТипЗнч(Резолюция) = Тип("СправочникСсылка.Резолюции")
		Или ТипЗнч(Резолюция) = Тип("СправочникОбъект.Резолюции") Тогда
		ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
		// Подписать резолюцию может только автор либо внесший резолюцию.
		Возврат
			Резолюция.ВнесРезолюцию = ТекущийПользователь
			Или Резолюция.АвторРезолюции = ТекущийПользователь;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Помечает/снимает пометку на удаление резолюций по документу.
//
// Параметры:
//	Документ - СправочникСсылка.ДокументыПредприятия - Документ, резолюции которого необходимо пометить на удаление.
//	Пометка - Булево - Значение, которое нужно установить.
//	ИдентификаторУчастника - УникальныйИдентификатор - Идентификатор участника.
//
Процедура УстановитьПометкуУдаленияРезолюцийПоДокументу(Документ, Пометка, ИдентификаторУчастника = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Резолюции = ПолучитьРезолюции(Документ, Ложь, , , ИдентификаторУчастника);
	Для Каждого Резолюция Из Резолюции Цикл
		УстановитьПометкуНаУдаление(Резолюция, Пометка);
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает / снимает пометку на удаление на резолюцию.
//
// Возвращаемое значение:
//  Истина, если установка пометки прошла успешно.
//
Функция УстановитьПометкуНаУдаление(Резолюция, ЗначениеПометкиУдаления) Экспорт

	Попытка
		ОбъектРезолюции = Резолюция.Ссылка.ПолучитьОбъект();
		ОбъектРезолюции.Заблокировать();
	Исключение
		Возврат Ложь;
	КонецПопытки;
		
	ОбъектРезолюции.УстановитьПометкуУдаления(ЗначениеПометкиУдаления);
	ОбъектРезолюции.Разблокировать();
	
	Возврат Истина;
	
КонецФункции

// Определяет, является ли пользователем автором либо внесшим резолюцию.
//
// Параметры:
//  Резолюция - ссылка на справочник Резолюции
//  Пользователь - ссылка на справочник Пользователи - если не задан, то проверяется текущий
//                 пользователь.
//
// Возвращаемое значение:
//  Булево.
//
Функция ЭтоАвторРезолюции(Резолюция, Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	Возврат Пользователи.ЭтоПолноправныйПользователь()
		Или Пользователь = Резолюция.АвторРезолюции
		Или Пользователь = Резолюция.ВнесРезолюцию;
		
КонецФункции

#КонецОбласти
