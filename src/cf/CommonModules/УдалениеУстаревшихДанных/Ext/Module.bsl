////////////////////////////////////////////////////////////////////////////////
// Удаление устаревших данных (сервер)
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обработчик регл. задания УдалениеУстаревшихДанных
// 
Процедура ВыполнитьУдаление() Экспорт
	
	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.УдалениеУстаревшихДанных,
		Отказ);
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерыУдаляемыхОбъектов = МенеджерыВсехУдаляемыхОбъектов();
	КоличествоТиповДанныхКУдалению = МенеджерыУдаляемыхОбъектов.Количество();
	
	ОбработанныеМенеджеры = Новый Соответствие;
	
	Пока ОбработанныеМенеджеры.Количество() < КоличествоТиповДанныхКУдалению Цикл
	
		Для Каждого Менеджер Из МенеджерыУдаляемыхОбъектов Цикл
			
			Если ОбработанныеМенеджеры.Получить(Менеджер) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьДанныеКУдалению = Ложь;
			
			Попытка
				ЕстьДанныеКУдалению = Менеджер.УдалитьПорциюУстаревшихДанных();
			Исключение
				ЗаписьЖурналаРегистрации(
					СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.НайтиПоТипу(ТипЗнч(Менеджер)),,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			Если Не ЕстьДанныеКУдалению Тогда
				ОбработанныеМенеджеры.Вставить(Менеджер, Истина);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Событие журнала регистрации "Удаление устаревших данных".
// 
// Возвращаемое значение:
//  Строка
// 
Функция СобытиеЖурналаРегистрации() Экспорт
	
	СобытиеЖурналаРегистрации = НСтр("ru = 'Удаление устаревших данных'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Возврат СобытиеЖурналаРегистрации;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Менеджеры всех удаляемых объектов.
// 
// Возвращаемое значение:
//  Массив из СправочникМенеджер, ДокументМенеджер, РегистрСведенийМенеджер, ЖурналДокументовМенеджер
// 
Функция МенеджерыВсехУдаляемыхОбъектов()
	
	Результат = Новый Массив;
	Результат.Добавить(Справочники.ДескрипторыДоступаОбъектов);
	Результат.Добавить(Справочники.ДескрипторыДоступаРегистров);
	Результат.Добавить(Справочники.КоллекцииЗначенийДоступа);
	Результат.Добавить(РегистрыСведений.ЗамерыМетрик);
	Результат.Добавить(РегистрыСведений.МК_СведенияОМобильныхОнлайнКлиентах);
	
	Если ПолучитьФункциональнуюОпцию("УдалятьНеактивныеВерсии") Тогда
		Результат.Добавить(Справочники.ВерсииФайлов);
	КонецЕсли;
	
	Если Константы.ИспользоватьВерсионированиеОбъектов.Получить() Тогда
		Результат.Добавить(РегистрыСведений.ВерсииОбъектов);
	КонецЕсли;
	
	Результат.Добавить(РегистрыСведений.HTMLПредставленияСодержанияПисем);
	Результат.Добавить(РегистрыСведений.ПромежуточныеРезультатыПоискаПисем);
	
	Если Константы.ВестиПротоколДоставкиПочты.Получить() Тогда
		Результат.Добавить(РегистрыСведений.ПротоколДоставкиПочты);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВстроеннуюПочту") Тогда
		Результат.Добавить(ЖурналыДокументов.ЭлектроннаяПочта);
	КонецЕсли;
	
	Результат.Добавить(Справочники.ОчередьЗаданийДокументооборота);
	
	Результат.Добавить(Справочники.НастройкиОбработкиВидовОбъектов);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПредпросмотрФайлов") Тогда
		Результат.Добавить(РегистрыСведений.ПредпросмотрФайлов);
	КонецЕсли;
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи") Тогда
		Результат.Добавить(Справочники.ПараметрыСхемДляКомплексныхПроцессов);
	КонецЕсли;
	
	Результат.Добавить(Справочники.УведомленияПрограммы);
	
	Результат.Добавить(РегистрыСведений.ОчередьУведомлений);
	
	// миграция из 21
	Результат.Добавить(РегистрыСведений.МиграцияДанныхИзВнешнихСистемФоновыеЗадания);
	Результат.Добавить(РегистрыСведений.ОтметкиВремениРегистровКонстант);
	Результат.Добавить(РегистрыСведений.ОтметкиВремениСсылочныхОбъектов);  
	Результат.Добавить(РегистрыСведений.ОтметкиВремениОчередь1);  
	Результат.Добавить(РегистрыСведений.ОтметкиВремениОчередь2);  
	Результат.Добавить(РегистрыСведений.ОтметкиВремениОчередь3);  
	Результат.Добавить(РегистрыСведений.УдалитьОтметкиВремениОчередь1);  
	Результат.Добавить(РегистрыСведений.УдалитьОтметкиВремениОчередь2);  
	Результат.Добавить(РегистрыСведений.УдалитьОтметкиВремениОчередь3);  
	
	Результат.Добавить(Документы.НомерШтрихкода);
	
	Результат.Добавить(РегистрыСведений.ПротоколВыполненияЗадачПоПочте);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти