////////////////////////////////////////////////////////////////////////////////
// Модуль для работы со сторонами.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует список для выбора стороны.
//
// Параметры:
//  Параметры - структура, по которой выполняется поиск.
//
// Возвращает:
//  СписокЗначений - Список значений, содержащий ссылки на найденные по части наименования объекты
//
Функция СформироватьДанныеВыбораСтороны(Знач Параметры) Экспорт 

	ДанныеВыбора = Новый СписокЗначений;
	
	Если Параметры.Отбор = Неопределено Тогда
		Параметры.Отбор = Новый Структура;
	КонецЕсли;
	Параметры.Отбор.Вставить("ПометкаУдаления", Ложь);
	
	Если Параметры.Свойство("НомерСтрокиСтороны")
		И Параметры.НомерСтрокиСтороны > 1 Тогда
		
			ДанныеВыбораКонтрагенты = Справочники.Контрагенты.ПолучитьДанныеВыбора(Параметры);
			ДанныеВыбораКонтактныеЛица = Справочники.КонтактныеЛица.ПолучитьДанныеВыбора(Параметры);
			
			Для Каждого ЭлементДанные Из ДанныеВыбораКонтрагенты Цикл
				ДанныеВыбора.Добавить(ЭлементДанные.Значение, ЭлементДанные.Представление);
			КонецЦикла;
			
			Для Каждого ЭлементДанные Из ДанныеВыбораКонтактныеЛица Цикл
				ДанныеВыбора.Добавить(ЭлементДанные.Значение, ЭлементДанные.Представление);
			КонецЦикла;
			
	КонецЕсли;
		
	ДанныеВыбораОрганизации = Справочники.Организации.ПолучитьДанныеВыбора(Параметры);
	ДанныеВыбораПользователи = Справочники.Сотрудники.ПолучитьДанныеВыбора(Параметры);
	
	Для Каждого ЭлементДанные Из ДанныеВыбораОрганизации Цикл
		ДанныеВыбора.Добавить(ЭлементДанные.Значение, ЭлементДанные.Представление);
	КонецЦикла;
	
	Для Каждого ЭлементДанные Из ДанныеВыбораПользователи Цикл
		ДанныеВыбора.Добавить(ЭлементДанные.Значение, ЭлементДанные.Представление);
	КонецЦикла;
	
	Возврат ДанныеВыбора;

КонецФункции

// Формирует список для выбора контактных лиц стороны.
//
// Параметры:
//  Параметры - структура, по которой выполняется поиск.
//
// Возвращает:
//  СписокЗначений - Список значений, содержащий ссылки на найденные по части наименования объекты
//
Функция СформироватьДанныеВыбораКонтактногоЛицаСтороны(Знач Параметры) Экспорт

	ДанныеВыбора = Новый СписокЗначений;
	
	Если Параметры.Отбор = Неопределено Тогда
		Параметры.Отбор = Новый Структура;
	КонецЕсли;
	Параметры.Отбор.Вставить("ПометкаУдаления", Ложь);
	
	Сторона = Неопределено;
	Параметры.Свойство("Сторона", Сторона);
	
	Если РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(Сторона) Тогда
		ДанныеВыбораСотрудника = Справочники.Сотрудники.ПолучитьДанныеВыбора(Параметры);
		
		Для Каждого ЭлементДанные Из ДанныеВыбораСотрудника Цикл
			ДанныеВыбора.Добавить(ЭлементДанные.Значение, ЭлементДанные.Представление);
		КонецЦикла;
	Иначе
		Если ЗначениеЗаполнено(Сторона) Тогда
			Параметры.Отбор.Вставить("Владелец", Сторона);
		КонецЕсли;
		
		ДанныеВыбораКонтактныеЛица = Справочники.КонтактныеЛица.ПолучитьДанныеВыбора(Параметры);
		
		Для Каждого ЭлементДанные Из ДанныеВыбораКонтактныеЛица Цикл
			ДанныеВыбора.Добавить(ЭлементДанные.Значение, ЭлементДанные.Представление);
		КонецЦикла;
	КонецЕсли;

	Возврат ДанныеВыбора;

КонецФункции 

// Формирует список для выбора ответственного поставившего подпись.
//
// Параметры:
//  Параметры - структура, по которой выполняется поиск.
//
// Возвращает:
//  СписокЗначений - Список значений, содержащий ссылки на найденные по части наименования объекты
//
Функция СформироватьДанныеВыбораПодписал(Знач Параметры) Экспорт

	ДанныеВыбора = Новый СписокЗначений;
	
	Если Параметры.Отбор = Неопределено Тогда
		Параметры.Отбор = Новый Структура;
	КонецЕсли;
	Параметры.Отбор.Вставить("ПометкаУдаления", Ложь);
	
	Сторона = Неопределено;
	Параметры.Свойство("Сторона", Сторона);
	
	Если РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(Сторона) Тогда
		ДанныеВыбораПользователи = Справочники.Сотрудники.ПолучитьДанныеВыбора(Параметры);
		
		Для Каждого ЭлементДанные Из ДанныеВыбораПользователи Цикл
			ДанныеВыбора.Добавить(ЭлементДанные.Значение, ЭлементДанные.Представление);
		КонецЦикла;
	
	Иначе
		Если ЗначениеЗаполнено(Сторона) Тогда
			Параметры.Отбор.Вставить("Владелец", Сторона);
		КонецЕсли;
		ДанныеВыбораКонтактныеЛица = Справочники.КонтактныеЛица.ПолучитьДанныеВыбора(Параметры);
		
		Для Каждого ЭлементДанные Из ДанныеВыбораКонтактныеЛица Цикл
			ДанныеВыбора.Добавить(ЭлементДанные.Значение, ЭлементДанные.Представление);
		КонецЦикла;
	КонецЕсли;
		
	
	ДопустимаПроизвольнаяСтрока = Истина;
	Если Параметры.Свойство("ЕстьПодписантыПоДействиям") Тогда
		ДопустимаПроизвольнаяСтрока = Не Параметры.ЕстьПодписантыПоДействиям;
	КонецЕсли;
	
	Если ДанныеВыбора.Количество() = 0 И ДопустимаПроизвольнаяСтрока Тогда
		ПредставлениеПроизвольнойСтроки = Новый ФорматированнаяСтрока(
			Параметры.СтрокаПоиска, 
			Новый ФорматированнаяСтрока(НСтр("ru = ' (Подписант)'"),
				, WebЦвета.Серый)
			);
		
		ДанныеВыбора.Добавить(Параметры.СтрокаПоиска, ПредставлениеПроизвольнойСтроки);
	КонецЕсли;
	
	Возврат ДанныеВыбора;

КонецФункции

// Устанавливает условное оформление для таблицы сторон.
//
// Параметры:
//  УсловноеОформление - УсловноеОформление - условное оформление формы.
//  Организация - СправочникСсылка.Организация - значение для отбора.
//  ИзВидаДокумента - флаг определяющий из какой формы вызвана процедура
//
Процедура УстановитьУсловноеОформлениеСторон(УсловноеОформление, Организация, ИзВидаДокумента = Ложь) Экспорт
	
	Для Каждого ЭлементУО Из УсловноеОформление.Элементы Цикл
		Если ЭлементУО.Представление = "ОсновнаяОрганизация" Тогда
			ЭлементОтбораДанных = ЭлементУО.Отбор.Элементы[0];
			Если ЭлементОтбораДанных.ПравоеЗначение <> Организация Тогда;
				ЭлементОтбораДанных.ПравоеЗначение = Организация;
			КонецЕсли;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт",
		Новый Шрифт(ШрифтыСтиля.ШрифтОсновнойОрганизации, , , Истина));
	ЭлементУО.Представление = "ОсновнаяОрганизация";
	
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Если ИзВидаДокумента Тогда
		ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ШаблонДокумента.Стороны.Сторона");
	Иначе
		ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Стороны.Сторона");
	КонецЕсли;
	
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловия.ПравоеЗначение = Организация;
	
	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Стороны");
	
КонецПроцедуры

// Определяет подписан ли документ в зависимости от варианта подписания.
//
// Параметры:
//  Стороны - ТаблицаЗначений - Стороны подписывающие документ.
//  ВариантПодписания - Перечисление ВариантыПодписания - вариант подписания вида документа
//
// Возвращаемое значение:
//  Булево - Флаг подписи.
//
Функция ДокументПодписанСторонами(Стороны, ВариантПодписания) Экспорт
	
	Результат = Ложь;
	
	Если ВариантПодписания = Перечисления.ВариантыПодписания.НеПодписывается
		Или Стороны.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	МыПодписалиДокумент = Истина;
	КонтрагентыПодписалиДокумент = Истина;
	
	Для Каждого СтрокаСтороны Из Стороны Цикл
		Если Не СтрокаСтороны.Подписан Тогда
			Если РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(СтрокаСтороны.Сторона) Тогда
				МыПодписалиДокумент = Ложь;
			ИначеЕсли РаботаСПодписямиДокументовКлиентСервер.ЭтоКонтрагент(СтрокаСтороны.Сторона) Тогда
				КонтрагентыПодписалиДокумент = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ВариантПодписания = Перечисления.ВариантыПодписания.ТолькоМы Тогда
		Результат = МыПодписалиДокумент;
	ИначеЕсли ВариантПодписания = Перечисления.ВариантыПодписания.ТолькоКонтрагенты Тогда
		Результат = КонтрагентыПодписалиДокумент;
	ИначеЕсли ВариантПодписания = Перечисления.ВариантыПодписания.МыИКонтрагенты Тогда
		Результат = КонтрагентыПодписалиДокумент И МыПодписалиДокумент; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Обработка проверки таблицы сторон
//
// Параметры:
//  СправочникОбъект - СправочникОбъект.ДокументыПредприятия,
//					 - СправочникОбъект.ШаблоныДокументов - объект к проверке.
//  Отказ - Булево - флаг отказа.
//  ЭтоЗаявкаНаОплату - Булево - признак, что это заявка.
//  ВариантПодписания - ПеречислениеСсылка.ВариантыПодписания
//
Процедура ПроверитьЗаполнениеСторон(СправочникОбъект, Отказ, ЭтоЗаявкаНаОплату, ВариантПодписания) Экспорт
	
	ЭтоДокумент = ДелопроизводствоКлиентСервер.ЭтоДокумент(СправочникОбъект);
	ПутьКДанным = ?(ЭтоДокумент, "Объект", "Объект.ВидДокумента");
	Стороны = СправочникОбъект.Стороны;
	ИспользоватьУчетПоОрганизациям = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям");
	
	Если Стороны.Количество() = 0 И ЭтоДокумент Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не указано ни одной стороны документа.'"),,
				"Стороны", ПутьКДанным, Отказ);
		Возврат;
	
	ИначеЕсли Стороны.Количество() = 1 И Не ЭтоЗаявкаНаОплату И ЭтоДокумент Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Указана только одна сторона документа. Укажите вторую сторону.'"),,
				"Стороны", ПутьКДанным, Отказ);
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьУчетПоОрганизациям И (ВариантПодписания = Перечисления.ВариантыПодписания.МыИКонтрагенты
		Или ЭтоЗаявкаНаОплату) Тогда
		
		ПерваяИзСторонОрганизация = Ложь;
		
		Если Стороны.Количество() > 0
			И РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(Стороны[0].Сторона)
			И ЗначениеЗаполнено(Стороны[0].Сторона) Тогда
				ПерваяИзСторонОрганизация = Истина;
		КонецЕсли;
		
		ИмяПоля = "Стороны[0].Сторона";
		ТекстОшибки = НСтр("ru = 'В таблице сторон в первой строке должна присутствовать ""Основная организация""'");
		
		Если ЭтоЗаявкаНаОплату И ЭтоДокумент Тогда
			ИмяПоля = "Организация";
			ТекстОшибки = НСтр("ru = 'Не заполнено поле ""Плательщик""'");
		КонецЕсли;
		
		Если Не ПерваяИзСторонОрганизация
			И (ЭтоДокумент Или Не ЭтоДокумент И Не ЭтоЗаявкаНаОплату И Стороны.Количество()) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, ИмяПоля, ПутьКДанным, Отказ);
		КонецЕсли;
		
	ИначеЕсли ВариантПодписания = Перечисления.ВариантыПодписания.ТолькоКонтрагенты Тогда
		
		Для Каждого Элемент Из Стороны Цикл
			Если РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(Элемент.Сторона) Тогда
				ИмяПоля = СтрШаблон("Стороны[%1].Сторона", Элемент.НомерСтроки);
				ТекстОшибки = НСтр("ru = 'Вариант подписания ""Только контрагент(ы)"" не подразумевает наличие организации в таблице сторон'");
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, ИмяПоля, ПутьКДанным, Отказ);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИспользоватьУчетПоОрганизациям И ВариантПодписания = Перечисления.ВариантыПодписания.ТолькоМы Тогда
		
		Для Каждого Элемент Из Стороны Цикл
			Если РаботаСПодписямиДокументовКлиентСервер.ЭтоКонтрагент(Элемент.Сторона) Тогда
				ИмяПоля = СтрШаблон("Стороны[%1].Сторона", Элемент.НомерСтроки);
				ТекстОшибки = НСтр("ru = 'Вариант подписания ""Только мы"" не подразумевает наличие контрагента в таблице сторон'");
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, ИмяПоля, ПутьКДанным, Отказ);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Копирует контрагентов из табличной части Стороны в табличную часть Контрагенты
//
// Параметры:
//  Контрагенты - ТаблицаЗначений - таблица контрагентов.
//  Стороны - ТаблицаЗначений - таблица сторон.
//  ЭтоДокумент - Булево - идентификатор вызовы из документа, для копирования доп. поля
//
Процедура ПеренестиКонтрагентовИзСторон(Контрагенты, Стороны, ЭтоДокумент = Ложь) Экспорт
	
	Контрагенты.Очистить();
	
	Для Каждого СтрокаСтороны Из Стороны Цикл
		Если РаботаСПодписямиДокументовКлиентСервер.ЭтоКонтрагент(СтрокаСтороны.Сторона) Тогда
			СтрокаКонтрагентов = Контрагенты.Добавить();
			СтрокаКонтрагентов.Контрагент = СтрокаСтороны.Сторона;
			СтрокаКонтрагентов.КонтактноеЛицо = СтрокаСтороны.КонтактноеЛицо;
			Если ЭтоДокумент Тогда
				СтрокаКонтрагентов.ПодписалОтКонтрагента = СтрокаСтороны.Подписал;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает организацию из табличной части Стороны
//
// Параметры:
//  Организация - Справочник.Организации - таблица контрагентов.
//  Стороны - ТаблицаЗначений - таблица сторон.
//
Процедура ПеренестиОрганизациюИзСторон(Организация, Знач Стороны) Экспорт 
	
	Если Стороны.Количество() > 0
		И РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(Стороны[0].Сторона) Тогда
		Организация = Стороны[0].Сторона;
	Иначе
		Организация = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает реквизит утвердил из табличной части Стороны
//
// Параметры:
//  Утвердил - Справочник.Пользователи - таблица Пользователи.
//  Стороны - ТаблицаЗначений - таблица сторон.
//
Процедура ПеренестиУтвердилИзСторон(Утвердил, Знач Стороны) Экспорт 

	Если Стороны.Количество() > 0
		И РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(Стороны[0].Сторона) Тогда
		
		Утвердил = Стороны[0].Подписал;
	КонецЕсли;

КонецПроцедуры

// Заполняет поля формы табличной части объекта "Стороны" шаблона или документа
// Параметры:
//  Форма - форма шаблона или документа предприятия
//  ЭтоФормаШаблона - Булево - признак вызова их формы шаблона
//
Процедура ЗаполнитьТаблицуСторон(Форма, ЭтоФормаШаблона = Ложь) Экспорт 
	
	Если ЭтоФормаШаблона Тогда 
		ВестиУчетСторон = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.Объект.Ссылка,
			"ВидДокумента.ВестиУчетСторон");
	Иначе 
		ВестиУчетСторон = Форма.ВидДокументаКэш.ВестиУчетСторон;
	КонецЕсли;
	
	Если ВестиУчетСторон <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Для Каждого Строка Из Объект.Стороны Цикл
		
		Если РаботаСПодписямиДокументовКлиентСервер.ЭтоКонтрагент(Строка.Сторона) Тогда
			Строка.ИндексКартинкиСтороны = 1;
			Если ЗначениеЗаполнено(Строка.Сторона)
				И ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
					Строка.Сторона, "ЮрФизЛицо") = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда 
				Строка.КонтрагентЯвляетсяФизЛицом = Истина;
			Иначе 
				Строка.КонтрагентЯвляетсяФизЛицом = Ложь;
			КонецЕсли;
		
		ИначеЕсли РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(Строка.Сторона) Тогда
			Строка.ИндексКартинкиСтороны = 2;
			Строка.КонтрагентЯвляетсяФизЛицом = Ложь;
			Если Не ЭтоФормаШаблона
				И Форма.ПодписантыПоОрганизациям <> Неопределено
				И Форма.ПодписантыПоОрганизациям.Количество()
				И Форма.ПодписантыПоОрганизациям.Получить(Строка.Сторона) <> Неопределено
				И Форма.ПодписантыПоОрганизациям[Строка.Сторона].Количество() > 1 Тогда
				Строка.НесколькоПодписантовВДействиях = Истина;
			КонецЕсли;
		Иначе
			Строка.ИндексКартинкиСтороны = 0;
			Строка.КонтрагентЯвляетсяФизЛицом = Ложь;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Возвращает массив подписантов по указанной таблице сторон
//
// Параметры:
//  Стороны - табличная часть сторон документа ДокументыПредприятия
//
Функция ПодписантыСторонДокумента(Стороны) Экспорт
	
	Результат = Новый Массив;
	
	Если ТипЗнч(Стороны) = Тип("РезультатЗапроса") Тогда
		Стороны = Стороны.Выгрузить();
	КонецЕсли;
	
	Для Каждого СторонаДокумента Из Стороны Цикл
		Если Не РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(СторонаДокумента.Сторона)
			Или Не ЗначениеЗаполнено(СторонаДокумента.Подписал) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Подписал = СторонаДокумента.Подписал;
		
		Если ЗначениеЗаполнено(Подписал) Тогда
			Результат.Добавить(Подписал);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти