////////////////////////////////////////////////////////////////////////////////
// МОДУЛЬ СОДЕРЖИТ РЕАЛИЗАЦИЮ МЕХАНИКИ НУМЕРАЦИИ ДОКУМЕНТОВ
// 

#Область ПрограммныйИнтерфейс

// Возвращает сформированный числовой номер
Процедура СформироватьЧисловойНомерДокумента(СтруктураПараметров, СформированныйНомер) Экспорт 
	
	// ручная нумерация
	Нумератор = ПолучитьНумераторДокумента(СтруктураПараметров);
	Если Не ЗначениеЗаполнено(Нумератор) Тогда
		СформированныйНомер = 0;
		Возврат;
	КонецЕсли;
	
	РеквизитыНумератора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Нумератор,
		"Периодичность, ТипСвязи, НезависимаяНумерацияПоОрганизациям,
		|НезависимаяНумерацияПоСвязанномуДокументу,
		|НезависимаяНумерацияПоПодразделению,
		|НезависимаяНумерацияПоПроекту,
		|НезависимаяНумерацияПоВопросуДеятельности,
		|НезависимаяНумерацияПоВидуДокумента,
		|НезависимаяНумерацияПоТематике,
		|НезависимаяНумерацияПоГрифуДоступа,
		|НезависимаяНумерацияПоУзлуКОД");
	
	// измерения нумерации
	ПериодНумерации = НачалоПериодаНумерации(РеквизитыНумератора.Периодичность,
		?(ЗначениеЗаполнено(СтруктураПараметров.ДатаРегистрации),
		СтруктураПараметров.ДатаРегистрации,
		СтруктураПараметров.ДатаСоздания));
	
	Если РеквизитыНумератора.НезависимаяНумерацияПоОрганизациям И ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда 
		Организация = СтруктураПараметров.Организация;
	Иначе
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	СвязанныйДокумент = Справочники.ДокументыПредприятия.ПустаяСсылка();
	Если РеквизитыНумератора.НезависимаяНумерацияПоСвязанномуДокументу Тогда 
		Если ЗначениеЗаполнено(СтруктураПараметров.Ссылка) Тогда 
			СвязанныйДокумент = СвязиОбъектов.ПолучитьСвязанныйОбъект(СтруктураПараметров.Ссылка, РеквизитыНумератора.ТипСвязи);
		Иначе
			ИмяТипаСвязи = Справочники.ТипыСвязей.ПолучитьИмяПредопределенного(РеквизитыНумератора.ТипСвязи);
			Если ЗначениеЗаполнено(ИмяТипаСвязи) И СтруктураПараметров.Свойство(ИмяТипаСвязи) Тогда 
				СвязанныйДокумент = СтруктураПараметров[ИмяТипаСвязи];
			КонецЕсли;	
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(СвязанныйДокумент) И СтруктураПараметров.Свойство("СвязанныйДокумент") Тогда
			СвязанныйДокумент = СтруктураПараметров.СвязанныйДокумент;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СвязанныйДокумент) Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Для документа ведется независимая нумерация по связанному документу. 
			 		|Не указан связанный документ с типом связи ""%1""'"),
				РеквизитыНумератора.ТипСвязи);
				
			Если ОбработкаЗапросовXDTO.ЭтоВебСервис() Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			ВызватьИсключение ТекстСообщения; 
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыНумератора.НезависимаяНумерацияПоПодразделению Тогда 
		Подразделение = СтруктураПараметров.Подразделение;
	Иначе
		Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
	КонецЕсли;
	
	Если РеквизитыНумератора.НезависимаяНумерацияПоВидуДокумента Тогда 
		ВидДокументаНумератора = СтруктураПараметров.ВидДокумента;
	Иначе
		ВидДокументаНумератора = Справочники.ВидыДокументов.ПустаяСсылка();
	КонецЕсли;
	
	Если РеквизитыНумератора.НезависимаяНумерацияПоПроекту 
		И ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		Проект = СтруктураПараметров.Проект;
	Иначе
		Проект = Справочники.Проекты.ПустаяСсылка();
	КонецЕсли;
	
	Если РеквизитыНумератора.НезависимаяНумерацияПоГрифуДоступа 
		И ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа") Тогда 
		ГрифДоступа = СтруктураПараметров.ГрифДоступа;
	Иначе
		ГрифДоступа = Справочники.ГрифыДоступа.ПустаяСсылка();
	КонецЕсли;
	
	Если РеквизитыНумератора.НезависимаяНумерацияПоВопросуДеятельности 
		И ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности") Тогда 
		ВопросДеятельности = СтруктураПараметров.ВопросДеятельности;
	Иначе
		ВопросДеятельности = Справочники.ВопросыДеятельности.ПустаяСсылка();
	КонецЕсли;
		
	Если РеквизитыНумератора.НезависимаяНумерацияПоТематике Тогда 
		Тематика = СтруктураПараметров.Тематика;
	Иначе
		Тематика = Справочники.ТематикиДокументов.ПустаяСсылка();
	КонецЕсли;
	
	Если РеквизитыНумератора.НезависимаяНумерацияПоУзлуКОД
		И ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда 
		Если ЗначениеЗаполнено(СтруктураПараметров.Ссылка)
			И Не КОДСервер.ОбъектЭтогоУзла(СтруктураПараметров.Ссылка) Тогда
			ТекстСообщения = НСтр("ru = 'Для документа ведется независимая нумерация по узлу обмена. 
					 |Документ должен быть зарегистрирован в узле, в котором был создан.'");
				
			Если ОбработкаЗапросовXDTO.ЭтоВебСервис() Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			ВызватьИсключение ТекстСообщения; 
		КонецЕсли;
		
		УзелКОД = Справочники.УзлыКОД.ЭтотУзел;
	Иначе
		УзелКОД = Справочники.УзлыКОД.ПустаяСсылка();
	КонецЕсли;
	
	СтруктураИзмерений = Новый Структура;
	СтруктураИзмерений.Вставить("Нумератор", 		  Нумератор);
	СтруктураИзмерений.Вставить("ПериодНумерации", 	  ПериодНумерации);
	СтруктураИзмерений.Вставить("Организация", 		  Организация);
	СтруктураИзмерений.Вставить("СвязанныйДокумент",  СвязанныйДокумент);
	СтруктураИзмерений.Вставить("Подразделение", 	  Подразделение);
	СтруктураИзмерений.Вставить("ВидДокумента", 	  ВидДокументаНумератора);
	СтруктураИзмерений.Вставить("Проект", 			  Проект);
	СтруктураИзмерений.Вставить("ВопросДеятельности", ВопросДеятельности);
	СтруктураИзмерений.Вставить("Тематика",			  Тематика);
	СтруктураИзмерений.Вставить("ГрифДоступа",		  ГрифДоступа);
	СтруктураИзмерений.Вставить("УзелКОД",			  УзелКОД);
	
	// перерегистрация
	Если СформированныйНомер > 0 Тогда 
		
		СменаПериодаНумерации = ПроверитьСменуПериодаНумерации(
			СтруктураПараметров.ДатаРегистрации, 
			СтруктураПараметров.Ссылка.ДатаРегистрации, 
			Нумератор);
		
		Если Не СменаПериодаНумерации Тогда 	
			ТекущийНомер = РегистрыСведений.Нумерация.Получить(СтруктураИзмерений).ТекущийНомер; 
			Если ТекущийНомер = СформированныйНомер Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	
	
	// автоматическая нумерация
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.Нумерация");
		ЭлементБлокировки.УстановитьЗначение("Нумератор", 		  Нумератор);
		ЭлементБлокировки.УстановитьЗначение("ПериодНумерации",   ПериодНумерации);
		ЭлементБлокировки.УстановитьЗначение("Организация", 	  Организация);
		ЭлементБлокировки.УстановитьЗначение("СвязанныйДокумент", СвязанныйДокумент);
		ЭлементБлокировки.УстановитьЗначение("Подразделение", 	  Подразделение);
		ЭлементБлокировки.УстановитьЗначение("ВидДокумента", 	  ВидДокументаНумератора);
		ЭлементБлокировки.УстановитьЗначение("Проект", 			  Проект);
		ЭлементБлокировки.УстановитьЗначение("ВопросДеятельности",ВопросДеятельности);
		ЭлементБлокировки.УстановитьЗначение("Тематика",		  Тематика);
		ЭлементБлокировки.УстановитьЗначение("ГрифДоступа",		  ГрифДоступа);
		ЭлементБлокировки.УстановитьЗначение("УзелКОД",			  УзелКОД);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		ТекущийНомер = РегистрыСведений.Нумерация.Получить(СтруктураИзмерений).ТекущийНомер;
		СформированныйНомер = ТекущийНомер + 1;
		
		МенеджерЗаписи = РегистрыСведений.Нумерация.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураИзмерений);
		МенеджерЗаписи.ТекущийНомер = СформированныйНомер;
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();	
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Возвращает сформированный строковый номер
Процедура СформироватьСтроковыйНомерДокумента(СтруктураПараметров, СформированныйНомер, ОписанияОшибок) Экспорт 
	
	Перем СтруктураФорматаНомера, ОписаниеОшибки;
	
	// вручную изменен номер
	Если СтруктураПараметров.ЧисловойНомер = -1 Тогда
		Возврат;
	КонецЕсли;	
	
	// не известен вид нумерации
	ВидДокумента = СтруктураПараметров.ВидДокумента;
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		СформированныйНомер = "";
		ОписанияОшибок.Добавить("ВидДокумента", НСтр("ru = 'Не заполнено поле ""Вид документа""'"));
		Возврат;
	КонецЕсли;	
	
	// ручная нумерация
	Нумератор = ПолучитьНумераторДокумента(СтруктураПараметров); 
	Если Не ЗначениеЗаполнено(Нумератор) Тогда
		Возврат;
	КонецЕсли;
	
	ФорматНомера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Нумератор, "ФорматНомера");
	
	Если Не ЗначениеЗаполнено(ФорматНомера) Тогда
		СформированныйНомер = "";
		ОписанияОшибок.Добавить("", НСтр("ru = 'Не указан формат номера для нумератора. Обратитесь к Администратору.'"));
		Возврат;
	КонецЕсли;	
	
	// автоматическая нумерация
	Если Не РазобратьФорматНомера(ФорматНомера, ОписаниеОшибки, СтруктураФорматаНомера) Тогда 
		СформированныйНомер = "";
		ОписанияОшибок.Добавить("", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка в формате номера: %1. Обратитесь к Администратору.'"), ОписаниеОшибки));
		Возврат;
	КонецЕсли;	
	
	ЗначенияПараметровНомера = ПолучитьЗначенияПараметровНомера(СтруктураПараметров, СтруктураФорматаНомера, ОписанияОшибок);
	Если ОписанияОшибок.Количество() > 0 Тогда
		СформированныйНомер = "";
		Возврат;
	КонецЕсли;	
	
	СформированныйНомер = СформироватьНомерДокументаПоФормату(СтруктураФорматаНомера, ЗначенияПараметровНомера);
	
КонецПроцедуры

// Разбирает текстовый формат номера в структуру 
Функция РазобратьФорматНомера(ФорматНомера, ОписаниеОшибки, СтруктураФорматаНомера = Неопределено) Экспорт 
	
	СтруктураФорматаНомера = Новый ТаблицаЗначений;
	СтруктураФорматаНомера.Колонки.Добавить("Ключ", Новый ОписаниеТипов("Строка")); // разделитель или служебное поле
	СтруктураФорматаНомера.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка")); // значение разделителя или служебного поля
	СтруктураФорматаНомера.Колонки.Добавить("ВходитВСлужебное", Новый ОписаниеТипов("Число")); // разделитель входит в служебное поле
	
	ОписаниеОшибки = "";
	СписокПолей = ПолучитьСписокСлужебныхПолей();
	
	// проверка соответствия скобок
	ПозицияСкобки = 0;
	ПоказательСкобки = 0;
	
	врФорматНомера = СокрЛП(ФорматНомера);
	Для Инд = 1 По СтрДлина(врФорматНомера) Цикл
		
		ТекСимвол = Сред(врФорматНомера, Инд, 1);
		Если (ТекСимвол <> "[") И (ТекСимвол <> "]") Тогда
			Продолжить;
		КонецЕсли;	
		
		Если (ТекСимвол = "[") Тогда
			ПоказательСкобки = ПоказательСкобки + 1;
			Если ПоказательСкобки > 1 Тогда 
				ФрагментОшибки = Сред(врФорматНомера, ПозицияСкобки + 1, Инд - ПозицияСкобки);
				
				Если ФрагментОшибки = "" Тогда 
					ОписаниеОшибки = НСтр("ru = 'Отсутствует символ ""]""'");
				Иначе
					ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Отсутствует символ ""]"" в фрагменте ""%1""'"), ФрагментОшибки);
				КонецЕсли;
				
				Возврат Ложь;
			КонецЕсли;	
		КонецЕсли;	
		
		Если (ТекСимвол = "]") Тогда
			ПоказательСкобки = ПоказательСкобки - 1;
			Если ПоказательСкобки < 0 Тогда 
				ФрагментОшибки = Сред(врФорматНомера, ПозицияСкобки + 1, Инд - ПозицияСкобки);
				
				Если ФрагментОшибки = "" Тогда 
					ОписаниеОшибки = НСтр("ru = 'Отсутствует символ ""[""'");
				Иначе
					ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Отсутствует символ ""["" в фрагменте ""%1""'"), ФрагментОшибки);
				КонецЕсли;

				Возврат Ложь;
			КонецЕсли;	
		КонецЕсли;	
		
		ПозицияСкобки = Инд;
	КонецЦикла;
	
	Если ПоказательСкобки > 0 Тогда 
		ФрагментОшибки = Сред(врФорматНомера, ПозицияСкобки + 1);
		
		Если ФрагментОшибки = "" Тогда 
			ОписаниеОшибки = НСтр("ru = 'Отсутствует символ ""]""'");
		Иначе
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Отсутствует символ ""]"" в фрагменте ""%1""'"), ФрагментОшибки);
		КонецЕсли;

		Возврат Ложь;
	КонецЕсли;
	
	
	врФорматНомера = СокрЛП(ФорматНомера);
	Пока врФорматНомера <> "" Цикл
		
		Поз1 = Найти(врФорматНомера, "["); // начало служебного поля
		Если Поз1 > 0 Тогда
			
			Разделитель = Лев(врФорматНомера, Поз1-1);
			Если Разделитель <> "" Тогда
				НоваяСтрока = СтруктураФорматаНомера.Добавить();
				НоваяСтрока.Ключ = "Разделитель";
				НоваяСтрока.Значение = Разделитель;
			КонецЕсли;	
			
			врФорматНомера = Сред(врФорматНомера, Поз1+1);
		    Поз2 = Найти(врФорматНомера, "]"); // окончание служебного поля
			
			Если Поз2 > 0 Тогда
				КодСлужебногоПоля = Лев(врФорматНомера, Поз2-1);
				
				НайденоСлужебноеПоле = Ложь;
				Для Каждого СлужебноеПоле Из СписокПолей Цикл
					
					Поз3 = Найти(КодСлужебногоПоля, СлужебноеПоле.Значение);
					Если Поз3 = 0 Тогда 
						Продолжить;
					КонецЕсли;	
					
					Если Поз3 > 1 Тогда 
						Разделитель = Лев(КодСлужебногоПоля, Поз3 - 1);
						
						НоваяСтрока = СтруктураФорматаНомера.Добавить();
						НоваяСтрока.Ключ = "Разделитель";
						НоваяСтрока.Значение = Разделитель;
						НоваяСтрока.ВходитВСлужебное = СтруктураФорматаНомера.Индекс(НоваяСтрока) + 2;
					КонецЕсли;	
					
					НоваяСтрока = СтруктураФорматаНомера.Добавить();
					НоваяСтрока.Ключ = "СлужебноеПоле";
					НоваяСтрока.Значение = СлужебноеПоле.Представление;
					
					Если Поз3 + СтрДлина(СлужебноеПоле.Значение) - 1 < СтрДлина(КодСлужебногоПоля) Тогда 
						Разделитель = Сред(КодСлужебногоПоля, Поз3 + СтрДлина(СлужебноеПоле.Значение));
						
						НоваяСтрока = СтруктураФорматаНомера.Добавить();
						НоваяСтрока.Ключ = "Разделитель";
						НоваяСтрока.Значение = Разделитель;
						НоваяСтрока.ВходитВСлужебное = СтруктураФорматаНомера.Индекс(НоваяСтрока);
					КонецЕсли;	
					
					НайденоСлужебноеПоле = Истина;
					Прервать;
				КонецЦикла;	
				
				Если Не НайденоСлужебноеПоле Тогда 
					ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Неверное служебное поле ""%1""'"),
						КодСлужебногоПоля);
					Возврат Ложь;
				КонецЕсли;	
				
				врФорматНомера = Сред(врФорматНомера, Поз2+1);
			Иначе
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не обнаружено окончание служебного поля ""%1""'"),
					врФорматНомера);
				Возврат Ложь;
			КонецЕсли;	
			
		Иначе	
			
			Разделитель = врФорматНомера;
			Если Разделитель <> "" Тогда
				НоваяСтрока = СтруктураФорматаНомера.Добавить();
				НоваяСтрока.Ключ = "Разделитель";
				НоваяСтрока.Значение = Разделитель;
			КонецЕсли;
			врФорматНомера = "";
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции

// Проверят смену периода при изменении даты регистрации
Функция ПроверитьСменуПериодаНумерации(НоваяДата, СтараяДата, Нумератор) Экспорт
	
	Если Не ЗначениеЗаполнено(Нумератор) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Периодичность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Нумератор, "Периодичность");
	НовыйПериодНумерации = НачалоПериодаНумерации(Периодичность, НоваяДата);
	СтарыйПериодНумерации = НачалоПериодаНумерации(Периодичность, СтараяДата);
	
	Возврат (НовыйПериодНумерации <> СтарыйПериодНумерации);
	
КонецФункции	

// Возвращает настройки нумерации для вида документа
Функция ПрочитатьНастройкиНумерацииВидаДокумента(ВидДокумента) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиНумерации.Организация КАК Организация,
	|	НастройкиНумерации.Подразделение КАК Подразделение,
	|	НастройкиНумерации.ВопросДеятельности КАК ВопросДеятельности,
	|	НастройкиНумерации.Контрагент КАК Контрагент,
	|	НастройкиНумерации.Проект КАК Проект,
	|	НастройкиНумерации.СпособНумерации КАК СпособНумерации,
	|	НастройкиНумерации.Нумератор КАК Нумератор,
	|	НастройкиНумерации.Нумеровать КАК Нумеровать,
	|	НастройкиНумерации.Назначение КАК Назначение,
	|	НастройкиНумерации.Тематика КАК Тематика,
	|	НастройкиНумерации.ГрифДоступа КАК ГрифДоступа
	|ИЗ
	|	РегистрСведений.НастройкиНумерации КАК НастройкиНумерации
	|ГДЕ
	|	НастройкиНумерации.ВидДокумента = &ВидДокумента";
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

// Записывает настройки нумерации для вида документа
Процедура ЗаписатьНастройкиНумерацииВидаДокумента(ВидДокумента, НастройкиНумерации) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.НастройкиНумерации.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидДокумента.Установить(ВидДокумента);
	НаборЗаписей.Прочитать();
	
	НаборЗаписей.Очистить();
	Для Каждого Строка Из НастройкиНумерации Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка);
		НоваяЗапись.ВидДокумента = ВидДокумента;
		НоваяЗапись.ТипДокумента = ПолучитьТипДокументаПоВиду(ВидДокумента);
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Для переданного значения измерения нет настройки нумерации
Функция	НетНастройкиНумерации(Ссылка) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПустаяСсылка = Новый(ТипЗнч(Ссылка));
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ВидыДокументов") Тогда 
		
		ТипДокумента = ПолучитьТипДокументаПоВиду(Ссылка);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 
		|ИЗ
		|	РегистрСведений.НастройкиНумерации КАК НастройкиНумерации
		|ГДЕ
		|	НастройкиНумерации.ТипДокумента = &ТипДокумента
		|	И (НастройкиНумерации.ВидДокумента = &ПустаяСсылка
		|			ИЛИ НастройкиНумерации.ВидДокумента = НЕОПРЕДЕЛЕНО
		|			ИЛИ НастройкиНумерации.ВидДокумента = &Ссылка)";
		
		Запрос.УстановитьПараметр("ТипДокумента", ТипДокумента);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("ПустаяСсылка", ПустаяСсылка);
		
		Возврат Запрос.Выполнить().Пустой();
		
	КонецЕсли;	
		
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Организации") Тогда 		
		
		Измерение = "Организация";
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда 	
		
		Измерение = "Подразделение";
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Проекты") Тогда 
		
		Измерение = "Проект";
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда 	
		
		Измерение = "Контрагент";
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ВопросыДеятельности") Тогда 
		
		Измерение = "ВопросДеятельности";
		
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 
	|ИЗ
	|	РегистрСведений.НастройкиНумерации КАК НастройкиНумерации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 
	|ИЗ
	|	РегистрСведений.НастройкиНумерации КАК НастройкиНумерации
	|ГДЕ
	|	(%Измерение = &ПустаяСсылка
	|		ИЛИ %Измерение = &Ссылка)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Измерение", Измерение);
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ПустаяСсылка", ПустаяСсылка);
		
	// есть хотя бы одна настройка нумерации, но нет подходящей
	Возврат Запрос.Выполнить().Выгрузить().Количество() = 1;
	
КонецФункции	
	
Функция ИспользуетсяПолеНумерации(СлужебноеПоле) Экспорт 
	
	СписокПолей = ПолучитьСписокСлужебныхПолей();
	
	Ключ = "";
	Для Каждого Строка Из СписокПолей Цикл
		Если Строка.Представление = СлужебноеПоле Тогда 
			Ключ = Строка.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Ключ = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Справочник.Нумераторы КАК Нумераторы
	|ГДЕ
	|	Нумераторы.ФорматНомера ПОДОБНО &Ключ";
	
	Запрос.УстановитьПараметр("Ключ", "%"+Ключ+"%");
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

// Показывает или скрывает Индекс нумерации, в зависимости от его использования в нумераторах.
//
// Параметры:
//   Форма - управляемая форма объекта, в котором используется индекс нумерации
//
Процедура ПоказатьИндексНумерации(Форма) Экспорт 
	
	СсылкаНаОбъект = Форма.Объект.Ссылка;
	ТипОбъекта = ТипЗнч(СсылкаНаОбъект);
	
	Если ТипОбъекта = Тип("СправочникСсылка.Организации") Тогда 
		ПредставлениеПоля = "ИндексОрганизации";
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Проекты") Тогда 
		ПредставлениеПоля = "ИндексПроекта";	
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.СтруктураПредприятия") Тогда 
		ПредставлениеПоля = "ИндексПодразделения";
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Контрагенты") Тогда 
		ПредставлениеПоля = "ИндексКонтрагента";
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ВопросыДеятельности") Тогда 
		ПредставлениеПоля = "ИндексВопросаДеятельности";
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Сотрудники") Тогда 
		ПредставлениеПоля = "ИндексОтветственного";
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ВидыДокументов") Тогда 
		ПредставлениеПоля = "ИндексВидаДокумента";
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ТематикиДокументов") Тогда 
		ПредставлениеПоля = "ИндексТематики";
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ГрифыДоступа") Тогда 
		ПредставлениеПоля = "ИндексГрифаДоступа";
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.УзлыКОД") Тогда 
		ПредставлениеПоля = "КодУзлаОбмена";
	Иначе 
		Возврат;
	КонецЕсли;
	
	ИспользуетсяПолеНумерации = ИспользуетсяПолеНумерации(ПредставлениеПоля);
	Форма.Элементы.ИндексНумерации.Видимость = ИспользуетсяПолеНумерации;
	
	Если ИспользуетсяПолеНумерации Тогда 
		Форма.ИндексНумерации = РегистрыСведений.ИндексыНумерации.ПолучитьИндексНумерации(СсылкаНаОбъект);
		Форма.ИндексНумерацииПриОткрытии = Форма.ИндексНумерации;
		ТипМетаданных = Метаданные.НайтиПоТипу(ТипОбъекта);
		
		Если Не ПравоДоступа("Изменение", ТипМетаданных) Тогда
			Форма.Элементы.ИндексНумерации.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает видимость поля "ВременныйНомер" в форме документа
//
// Параметры:
//  Форма - УправляемаяФорма - Форма элемента справочника ДокументыПредприятия
//
Процедура УстановитьВидимостьВременногоНомера(Форма) Экспорт
	
	Если Форма.ВидДокументаКэш <> Неопределено Тогда
		ВременныйНомерВидим = Форма.ВидДокументаКэш.ИспользоватьВременныеНомера;
	Иначе
		ВременныйНомерВидим = Ложь;
	КонецЕсли;
	
	Форма.Элементы.ГруппаВремНомер.Видимость = ВременныйНомерВидим;
	
КонецПроцедуры

// Назначает временный номер документа при записи на сервере, если 
// это предусмотрено видом документа
//
// Параметры:
//  Объект - СправочникОбъект.ДокументыПредприятия - Документ, в котором нужно проставить номер
//
Процедура УстановитьВременныйНомерПередЗаписью(Объект) Экспорт
	
	ИспользоватьВременныеНомера = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ИспользоватьВременныеНомера") = Истина;
	
	Если ЗначениеЗаполнено(Объект.РегистрационныйНомер)
		Или ЗначениеЗаполнено(Объект.ВременныйНомер)
		Или Не ИспользоватьВременныеНомера Тогда
		Возврат;
	КонецЕсли;
	
	СвязанныйДокумент = Неопределено;
	Если Объект.ДополнительныеСвойства.Свойство("ПараметрыЗаписи") Тогда
		СвязанныйДокумент = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			Объект.ДополнительныеСвойства.ПараметрыЗаписи, "СвязанныйОбъект");
	КонецЕсли;
	
	СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(Объект);
	СтруктураПараметров.Вставить("Назначение", Перечисления.НазначенияНумераторов.ВременныйНомер);
	СтруктураПараметров.Вставить("ДатаСоздания", Объект.ДатаСоздания); // для Периодичности
	СтруктураПараметров.Вставить("СвязанныйДокумент", СвязанныйДокумент);
	
	СформироватьЧисловойНомерДокумента(СтруктураПараметров, СтруктураПараметров.ЧисловойНомер);
	
	Если СтруктураПараметров.ЧисловойНомер = 0 Тогда
		Возврат;
	КонецЕсли;
	ОписанияОшибок = Новый СписокЗначений;
	СформироватьСтроковыйНомерДокумента(СтруктураПараметров, Объект.ВременныйНомер, ОписанияОшибок);
	
	Если ОписанияОшибок.Количество() <> 0 Тогда
		ТекстОписания = "";
		Для Каждого ОписаниеОшибки Из ОписанияОшибок Цикл
			ТекстОписания = ТекстОписания + ?(ТекстОписания = "", "", Символы.ПС); 
			ТекстОписания = ТекстОписания + ОписаниеОшибки.Представление;
		КонецЦикла;
		Если Объект.ОбменДанными.Загрузка Тогда
			ЗаписьЖурналаРегистрации("Нумерация.ПередЗаписьюДокументаНаСервере",
				УровеньЖурналаРегистрации.Предупреждение,
				Объект.Метаданные(),
				Объект,
				ТекстОписания);
		Иначе
			ВызватьИсключение ТекстОписания;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает назначение реквизита нумератора (временный или регистрационный номер)
//
// Параметры:
//  Нумератор - СправочникСсылка.Нумераторы - Нумератор, назначение которого нужно получить
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.НазначенияНумераторов, Неопределено - назначение переданного нумератора,
//  или неопределено, если ссылка на нумератор пустая
//
Функция НазначениеНумератора(Знач Нумератор) Экспорт

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Нумератор, "Назначение");

КонецФункции

// Проверяет, используются ли временные номера хотя бы в одном виде документов
// Возвращаемое значение:
//  Булево - Признак, что временные номера используются
//
Функция ВременныеНомераИспользуются() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ВидыДокументов.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ВидыДокументов КАК ВидыДокументов
	               |ГДЕ
	               |	ВидыДокументов.ИспользоватьВременныеНомера
	               |	И НЕ ВидыДокументов.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();

КонецФункции

// Проверяет, используются ли пропущенные номера по переданному нумератору
//
// Параметры:
//  Нумератор - СправочникСсылка.Нумераторы
// 
// Возвращаемое значение:
//  Булево - Используется или нет
//
Функция ИспользуютсяПропущенныеНомера(Нумератор) Экспорт
	
	Если Не ЗначениеЗаполнено(Нумератор) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Нумератор, "ИспользоватьПропущенныеНомера");
	
КонецФункции

// Проверяет наличие пропущенных номеров по переданному нумератору и измерениям нумерации
//
// Параметры:
//  Документ - СправочникСсылка.ДокументыПредприятия, ДанныеФормыСтруктура - Ссылка или форма документа.
//  Нумератор - СправочникСсылка.Нумераторы
//  Измерения - Структура - Структура измерений нумерации. 
//		См. НумерацияКлиентСервер.ПолучитьПараметрыНумерации()
// 
// Возвращаемое значение:
//  Булево - Признак наличия пропущенных номеров
//
Функция ЕстьПропущенныеНомера(Документ, Нумератор, Измерения) Экспорт

	Если ТипЗнч(Документ) = Тип("ДанныеФормыСтруктура") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКОД")
		И ЗначениеЗаполнено(ДокументСсылка)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Нумератор, "НезависимаяНумерацияПоУзлуКОД") 
		И Не КОДСервер.ОбъектЭтогоУзла(ДокументСсылка) Тогда
			ТекстСообщения = НСтр("ru = 'Для документа ведется независимая нумерация по узлу обмена. 
					 |Документ должен быть зарегистрирован в узле, в котором был создан.'");
				
		ВызватьИсключение ТекстСообщения; 
	КонецЕсли;
		
	ТаблицаПропущенныхНомеров = РегистрыСведений.ПропускиРегистрационныхНомеров.ТаблицаПропущенныхНомеров(
		Нумератор, Измерения);
		 
	Возврат ТаблицаПропущенныхНомеров.Количество() > 0;
	
КонецФункции

// Возвращает таблицу с пропущенными номерами и измерениями нумерации
//
// Параметры:
//  Нумератор - СправочникСсылка.Нумераторы
//  Измерения - Структура - Структура измерений нумерации. 
//		См. НумерацияКлиентСервер.ПолучитьПараметрыНумерации()
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с номерами и измерениями. Колонки:
//		* ПропущенныйНомер - Число
//		* Нумератор - СправочникСсылка.Нумераторы
//		* ПериодНумерации - Дата
//		* Организация - СправочникСсылка.Организации
//		* СвязанныйДокумент - СправочникСсылка.ДокументыПредприятия
//		* Подразделение - СправочникСсылка.СтруктураПредприятия
//		* Проект - СправочникСсылка.Проекты
//		* ВопросДеятельности - СправочникСсылка.ВопросыДеятельности
//		* ВидДокумента - СправочникСсылка.ВидыДокументов
//		* Тематика - СправочникСсылка.ТематикиДокументов
//		* ДатаФиксации - Дата - Дата, когда была сделана запись о пропущенном номере
//		* Автор - СправочникСсылка.Сотрудники
Функция ТаблицаПропущенныхНомеров(Нумератор, Измерения) Экспорт

	Возврат РегистрыСведений.ПропускиРегистрационныхНомеров.ТаблицаПропущенныхНомеров(Нумератор, Измерения);

КонецФункции

// Возвращает период в днях, за который мы используем пропущенные рег. номера.
// 1 день = только сегодняшние, 2 - сегодня и вчера и т.д.
Функция ПериодПоискаПропущенныхНомеровВДнях() Экспорт

	Результат = НумерацияПереопределяемый.ПериодПоискаПропущенныхНомеровВДнях();
	Если Результат > 0 Тогда
		Возврат Результат;
	Иначе
		Возврат 1
	КонецЕсли;

КонецФункции

Функция ДляВременногоНомераТребуетсяУстановитьСвязь(Знач Объект) Экспорт
	
	СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(Объект);
	
	ИспользоватьВременныеНомера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		СтруктураПараметров.ВидДокумента, "ИспользоватьВременныеНомера");
		
	СтруктураВозврата = Новый Структура;
	
	Если ИспользоватьВременныеНомера <> Истина Тогда 
		СтруктураВозврата.Вставить("СоздатьСвязьДляВременногоНомера", Ложь);
		СтруктураВозврата.Вставить("СоздатьСвязьДляНумерации", Ложь);
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Назначение", Перечисления.НазначенияНумераторов.ВременныйНомер);
	СтруктураПараметров.Вставить("ДатаСоздания", Объект.ДатаСоздания); // для Периодичности
	Нумератор = ПолучитьНумераторДокумента(СтруктураПараметров);
	СтруктураВозврата.Вставить("Нумератор", Нумератор);
	
	Если Не ЗначениеЗаполнено(Нумератор) Тогда
		СтруктураВозврата.Вставить("СоздатьСвязьДляВременногоНомера", Ложь);
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ТипСвязи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Нумератор, "ТипСвязи");
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСвязиОбъектов") Тогда 
		СтруктураВозврата.Вставить("СоздатьСвязьДляНумерации", Ложь);
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТипСвязи) Тогда
		СтруктураВозврата.Вставить("СоздатьСвязьДляНумерации", Ложь);
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	СтруктураВозврата.Вставить("ТипСвязиНумератора", ТипСвязи);
	
	ДокументДляНумерации = Неопределено;
	Если ЗначениеЗаполнено(СтруктураПараметров.Ссылка) Тогда 
		ДокументДляНумерации = СвязиОбъектов.ПолучитьСвязанныйОбъект(СтруктураПараметров.Ссылка, ТипСвязи);
	Иначе
		ИмяТипаСвязи = Справочники.ТипыСвязей.ПолучитьИмяПредопределенного(Нумератор.ТипСвязи);
		Если ЗначениеЗаполнено(ИмяТипаСвязи) И СтруктураПараметров.Свойство(ИмяТипаСвязи) Тогда 
			ДокументДляНумерации = СтруктураПараметров[ИмяТипаСвязи];
		КонецЕсли;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ДокументДляНумерации) Тогда 
		СтруктураВозврата.Вставить("СоздатьСвязьДляНумерации", Ложь);
		Возврат СтруктураВозврата;
	КонецЕсли;	
	
	НастройкиСвязи = СвязиОбъектов.ПолучитьНастройкиСвязи(СтруктураПараметров);
	СтрокиНастроекСвязи = НастройкиСвязи.НайтиСтроки(Новый Структура("ТипСвязи", ТипСвязи));
		
	ТипыВидыСвязанныхДокументовДляНумерации = Новый Массив;
	Для Каждого СтрокаНастроекСвязи из СтрокиНастроекСвязи Цикл
		Строка = Новый Структура("Тип, Вид");
		Строка.Тип = СтрокаНастроекСвязи.ТипСсылкаНа;
		Строка.Вид = СтрокаНастроекСвязи.СсылкаНа;
			
		ТипыВидыСвязанныхДокументовДляНумерации.Добавить(Строка);
	КонецЦикла;
	СтруктураВозврата.Вставить("ТипыВидыСвязанныхДокументовДляНумерации", ТипыВидыСвязанныхДокументовДляНумерации);
	
	СтруктураВозврата.Вставить("СоздатьСвязьДляНумерации", Истина);
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Формирует пример номера
Функция СформироватьПримерНомера(ФорматНомера, Пример, ОписаниеОшибки) Экспорт
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	День  = День(ТекущаяДата);
	Месяц = Месяц(ТекущаяДата);
	Год4  = Год(ТекущаяДата);
	Год2  = Прав(Строка(Год4), 2);
	
	Если 	  Месяц <= 3 Тогда Квартал = 1;
	ИначеЕсли Месяц <= 6 Тогда Квартал = 2;
	ИначеЕсли Месяц <= 9 Тогда Квартал = 3;
	Иначе Квартал = 4; КонецЕсли;
	
	ЗначенияПараметровНомера = Новый Структура;
	ЗначенияПараметровНомера.Вставить("Номер", 		12345);
	ЗначенияПараметровНомера.Вставить("День", 		Формат(День,"ЧЦ=2; ЧВН="));
	ЗначенияПараметровНомера.Вставить("Месяц", 		Формат(Месяц,"ЧЦ=2; ЧВН="));
	ЗначенияПараметровНомера.Вставить("Год4", 		Год4);
	ЗначенияПараметровНомера.Вставить("Год2", 		Год2);
	ЗначенияПараметровНомера.Вставить("Квартал",	Квартал);
	
	ЗначенияПараметровНомера.Вставить("ИндексОрганизации", 			НСтр("ru = 'ОРГ'")); 
	ЗначенияПараметровНомера.Вставить("ИндексВидаДокумента", 		НСтр("ru = 'АКТ'")); 
	ЗначенияПараметровНомера.Вставить("ИндексПодразделения", 		НСтр("ru = 'БУХ'")); 
	ЗначенияПараметровНомера.Вставить("ИндексКонтрагента", 			НСтр("ru = 'АДМ ОБЛ'")); 
	ЗначенияПараметровНомера.Вставить("ИндексВопросаДеятельности", 	НСтр("ru = 'СОЦ'"));
	ЗначенияПараметровНомера.Вставить("ИндексНоменклатурыДел", 		"01-02");
	ЗначенияПараметровНомера.Вставить("НомерСвязанногоДокумента", 	НСтр("ru = 'СВЯЗ-123'")); 
	ЗначенияПараметровНомера.Вставить("ИндексОтветственного",		НСтр("ru = 'ОТВ'"));
	ЗначенияПараметровНомера.Вставить("ИндексПроекта", 				НСтр("ru = 'ПР'"));
	ЗначенияПараметровНомера.Вставить("ИндексГрифаДоступа",			НСтр("ru = 'ГД'"));
	
	ЗначенияПараметровНомера.Вставить("ИндексТематики", 			НСтр("ru = 'ТЕМА'"));
	ЗначенияПараметровНомера.Вставить("КодУзлаОбмена", 			НСтр("ru = 'ЦУ'"));
	
	ОписаниеОшибки = "";
	СтруктураФорматаНомера = ""; 
	
	Если Не РазобратьФорматНомера(ФорматНомера, ОписаниеОшибки, СтруктураФорматаНомера) Тогда
		Пример = "";
		Возврат Ложь;
	КонецЕсли;
	
	Пример = СформироватьНомерДокументаПоФормату(СтруктураФорматаНомера, ЗначенияПараметровНомера);
	Возврат Истина;
	
КонецФункции

// Вычисляет начало периода нумерации
Функция НачалоПериодаНумерации(Периодичность, Дата) Экспорт
	
	Если Периодичность = Перечисления.ПериодичностьНумераторов.День Тогда
		ПериодНумерации = НачалоДня(Дата);
		
	ИначеЕсли Периодичность = Перечисления.ПериодичностьНумераторов.Месяц Тогда
		ПериодНумерации = НачалоМесяца(Дата);
		
	ИначеЕсли Периодичность = Перечисления.ПериодичностьНумераторов.Квартал Тогда
		ПериодНумерации = НачалоКвартала(Дата);
		
	ИначеЕсли Периодичность = Перечисления.ПериодичностьНумераторов.Год Тогда
		ПериодНумерации = НачалоГода(Дата);
		
	ИначеЕсли Периодичность = Перечисления.ПериодичностьНумераторов.Непериодический Тогда 
		ПериодНумерации = '00010101';
		
	КонецЕсли;
	
	Возврат ПериодНумерации;
	
КонецФункции	

// Вычисляет начало периода нумерации
Функция КонецПериодаНумерации(Периодичность, Дата) Экспорт
	
	Если Периодичность = Перечисления.ПериодичностьНумераторов.День Тогда
		ПериодНумерации = КонецДня(Дата);
		
	ИначеЕсли Периодичность = Перечисления.ПериодичностьНумераторов.Месяц Тогда
		ПериодНумерации = КонецМесяца(Дата);
		
	ИначеЕсли Периодичность = Перечисления.ПериодичностьНумераторов.Квартал Тогда
		ПериодНумерации = КонецКвартала(Дата);
		
	ИначеЕсли Периодичность = Перечисления.ПериодичностьНумераторов.Год Тогда
		ПериодНумерации = КонецГода(Дата);
		
	ИначеЕсли Периодичность = Перечисления.ПериодичностьНумераторов.Непериодический Тогда 
		ПериодНумерации = '39990101';
		
	КонецЕсли;
	
	Возврат ПериодНумерации;
	
КонецФункции	

// Получает нумератор документа
Функция ПолучитьНумераторДокумента(Объект, ВызыватьИсключение = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Объект) = Тип("Структура") Тогда
		ПараметрыНумерации = Объект;
	Иначе
		ПараметрыНумерации = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(Объект);
	КонецЕсли;
	
	Если Не ПараметрыНумерации.Свойство("Назначение") Тогда
		ПараметрыНумерации.Вставить("Назначение", Перечисления.НазначенияНумераторов.РегистрационныйНомер);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Настройки.Нумератор КАК Нумератор,
		|	ВЫБОР
		|		КОГДА НЕ Настройки.ВидДокумента В (&ПустыеВидыДокументов)
		|				И Настройки.ВидДокумента = &ВидДокумента
		|				И &ФОВидДокумента = ИСТИНА
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Настройки.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|				И Настройки.Организация = &Организация
		|				И &ФООрганизация = ИСТИНА
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Настройки.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|				И Настройки.Подразделение = &Подразделение
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Настройки.ВопросДеятельности <> ЗНАЧЕНИЕ(Справочник.ВопросыДеятельности.ПустаяСсылка)
		|				И Настройки.ВопросДеятельности = &ВопросДеятельности
		|				И &ФОВопросДеятельности = ИСТИНА
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Настройки.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				И Настройки.Контрагент = &Контрагент
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Настройки.Проект <> ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
		|				И Настройки.Проект = &Проект
		|				И &ФОПроект = ИСТИНА
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Настройки.Тематика <> ЗНАЧЕНИЕ(Справочник.ТематикиДокументов.ПустаяСсылка)
		|				И Настройки.Тематика = &Тематика
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА Настройки.ГрифДоступа <> ЗНАЧЕНИЕ(Справочник.ГрифыДоступа.ПустаяСсылка)
		|				И Настройки.ГрифДоступа = &ГрифДоступа
		|				И &ФОГрифДоступа = ИСТИНА
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	РегистрСведений.НастройкиНумерации КАК Настройки
		|ГДЕ
		|	Настройки.ТипДокумента = &ТипДокумента
		|	И Настройки.Назначение = &Назначение
		|	И (Настройки.ВидДокумента В (&ПустыеВидыДокументов)
		|			ИЛИ НЕ Настройки.ВидДокумента В (&ПустыеВидыДокументов)
		|				И Настройки.ВидДокумента = &ВидДокумента
		|				И &ФОВидДокумента = ИСТИНА)
		|	И (Настройки.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ИЛИ Настройки.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|				И Настройки.Организация = &Организация
		|				И &ФООрганизация = ИСТИНА)
		|	И (Настройки.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|			ИЛИ Настройки.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|				И Настройки.Подразделение = &Подразделение)
		|	И (Настройки.ВопросДеятельности = ЗНАЧЕНИЕ(Справочник.ВопросыДеятельности.ПустаяСсылка)
		|			ИЛИ Настройки.ВопросДеятельности <> ЗНАЧЕНИЕ(Справочник.ВопросыДеятельности.ПустаяСсылка)
		|				И Настройки.ВопросДеятельности = &ВопросДеятельности
		|				И &ФОВопросДеятельности = ИСТИНА)
		|	И (Настройки.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ИЛИ Настройки.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				И Настройки.Контрагент = &Контрагент)
		|	И (Настройки.Проект = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
		|			ИЛИ Настройки.Проект <> ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
		|				И Настройки.Проект = &Проект
		|				И &ФОПроект = ИСТИНА)
		|	И (Настройки.Тематика = ЗНАЧЕНИЕ(Справочник.ТематикиДокументов.ПустаяСсылка)
		|			ИЛИ Настройки.Тематика <> ЗНАЧЕНИЕ(Справочник.ТематикиДокументов.ПустаяСсылка)
		|				И Настройки.Тематика = &Тематика)
		|	И (Настройки.ГрифДоступа = ЗНАЧЕНИЕ(Справочник.ГрифыДоступа.ПустаяСсылка)
		|			ИЛИ Настройки.ГрифДоступа <> ЗНАЧЕНИЕ(Справочник.ГрифыДоступа.ПустаяСсылка)
		|				И Настройки.ГрифДоступа = &ГрифДоступа
		|				И &ФОГрифДоступа = ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок УБЫВ";
	
	Запрос.УстановитьПараметр("ТипДокумента", ПараметрыНумерации.ТипДокумента);
	Запрос.УстановитьПараметр("Назначение", ПараметрыНумерации.Назначение);
	Запрос.УстановитьПараметр("ВидДокумента", ПараметрыНумерации.ВидДокумента);
	Запрос.УстановитьПараметр("Организация", ПараметрыНумерации.Организация);
	Запрос.УстановитьПараметр("Подразделение", ПараметрыНумерации.Подразделение);
	Запрос.УстановитьПараметр("ВопросДеятельности", ПараметрыНумерации.ВопросДеятельности);
	Запрос.УстановитьПараметр("Контрагент", ПараметрыНумерации.Контрагент);
	Запрос.УстановитьПараметр("Проект", ПараметрыНумерации.Проект);
	Запрос.УстановитьПараметр("Тематика", ПараметрыНумерации.Тематика);
	Запрос.УстановитьПараметр("ФОВидДокумента", Истина);
	
	Запрос.УстановитьПараметр("ФООрганизация", ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям"));
	Запрос.УстановитьПараметр("ФОВопросДеятельности", ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности"));
	Запрос.УстановитьПараметр("ФОПроект", ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам"));
	
	Запрос.УстановитьПараметр("ГрифДоступа", ПараметрыНумерации.ГрифДоступа);
	Запрос.УстановитьПараметр("ФОГрифДоступа", ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа"));	
	
	ПустыеВидыДокументов = Новый Массив;
	ПустыеВидыДокументов.Добавить(Неопределено);
	ПустыеВидыДокументов.Добавить(Справочники.ВидыДокументов.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("ПустыеВидыДокументов", ПустыеВидыДокументов);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Свернуть("Нумератор, Порядок");
	
	Если Результат.Количество() = 0 Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для документа ""%1"" не найдены подходящие настройки нумерации. Обратитесь к администратору.'"),
			Строка(ПараметрыНумерации.Ссылка));
			
		Если ОбработкаЗапросовXDTO.ЭтоВебСервис() Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ТекстСообщения;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	ИначеЕсли Результат.Количество() = 1 Тогда
		
		Возврат Результат[0].Нумератор;
		
	ИначеЕсли Результат[0].Порядок = Результат[1].Порядок Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для документа ""%1"" найдены неоднозначные настройки нумерации. Обратитесь к администратору.'"),
			Строка(ПараметрыНумерации.Ссылка));
		
		Если ОбработкаЗапросовXDTO.ЭтоВебСервис() Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ТекстСообщения;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		
		Возврат Результат[0].Нумератор;
		
	КонецЕсли;
	
КонецФункции

// Освобождает номер в регистре
Процедура ОсвободитьНомер(СтруктураПараметров) Экспорт 
	
	ЧисловойНомер = СтруктураПараметров.ЧисловойНомер;
	Если ЧисловойНомер = 0 Или ЧисловойНомер = -1 Тогда 
		Возврат;
	КонецЕсли;
	
	Нумератор = ПолучитьНумераторДокумента(СтруктураПараметров);
	Если Не ЗначениеЗаполнено(Нумератор) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыНумератора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Нумератор,
		"Периодичность, ТипСвязи, НезависимаяНумерацияПоОрганизациям,
		|НезависимаяНумерацияПоСвязанномуДокументу,
		|НезависимаяНумерацияПоПодразделению,
		|НезависимаяНумерацияПоПроекту,
		|НезависимаяНумерацияПоВопросуДеятельности,
		|НезависимаяНумерацияПоВидуДокумента,
		|НезависимаяНумерацияПоТематике,
		|НезависимаяНумерацияПоГрифуДоступа,
		|НезависимаяНумерацияПоУзлуКОД");

	ПериодНумерации = НачалоПериодаНумерации(РеквизитыНумератора.Периодичность, СтруктураПараметров.ДатаРегистрации);
	
	Если РеквизитыНумератора.НезависимаяНумерацияПоОрганизациям
		И ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда 
		Организация = СтруктураПараметров.Организация;
	Иначе
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	СвязанныйДокумент = Справочники.ДокументыПредприятия.ПустаяСсылка();
	Если РеквизитыНумератора.НезависимаяНумерацияПоСвязанномуДокументу Тогда 
		Если ЗначениеЗаполнено(СтруктураПараметров.Ссылка) Тогда 
			СвязанныйДокумент = СвязиОбъектов.ПолучитьСвязанныйОбъект(СтруктураПараметров.Ссылка, РеквизитыНумератора.ТипСвязи);
		Иначе
			ИмяТипаСвязи = Справочники.ТипыСвязей.ПолучитьИмяПредопределенного(РеквизитыНумератора.ТипСвязи);
			Если ЗначениеЗаполнено(ИмяТипаСвязи) И СтруктураПараметров.Свойство(ИмяТипаСвязи) Тогда 
				СвязанныйДокумент = СтруктураПараметров[ИмяТипаСвязи];
			КонецЕсли;	
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(СвязанныйДокумент) И СтруктураПараметров.Свойство("СвязанныйДокумент") Тогда
			СвязанныйДокумент = СтруктураПараметров.СвязанныйДокумент;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СвязанныйДокумент) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для документа ведется независимая нумерация по связанному документу. 
			 		|Не указан связанный документ с типом связи ""%1""'"),
				РеквизитыНумератора.ТипСвязи);
				
			Если ОбработкаЗапросовXDTO.ЭтоВебСервис() Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			ВызватьИсключение ТекстСообщения; 
		КонецЕсли;	
	КонецЕсли;
	
	Если РеквизитыНумератора.НезависимаяНумерацияПоПодразделению Тогда 
		Подразделение = СтруктураПараметров.Подразделение;
	Иначе
		Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
	КонецЕсли;
	
	Если РеквизитыНумератора.НезависимаяНумерацияПоВидуДокумента Тогда 
		ВидДокументаНумератора = СтруктураПараметров.ВидДокумента;
	Иначе
		ВидДокументаНумератора = Справочники.ВидыДокументов.ПустаяСсылка();
	КонецЕсли;
	
	Если РеквизитыНумератора.НезависимаяНумерацияПоПроекту
		И ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		Проект = СтруктураПараметров.Проект;
	Иначе
		Проект = Справочники.Проекты.ПустаяСсылка();
	КонецЕсли;
	
	Если РеквизитыНумератора.НезависимаяНумерацияПоГрифуДоступа
		И ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа") Тогда 
		ГрифДоступа = СтруктураПараметров.ГрифДоступа;
	Иначе
		ГрифДоступа = Справочники.ГрифыДоступа.ПустаяСсылка();
	КонецЕсли;
	
	Если РеквизитыНумератора.НезависимаяНумерацияПоВопросуДеятельности
		И ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности") Тогда 
		ВопросДеятельности = СтруктураПараметров.ВопросДеятельности;
	Иначе
		ВопросДеятельности = Справочники.ВопросыДеятельности.ПустаяСсылка();
	КонецЕсли;
	
	Если РеквизитыНумератора.НезависимаяНумерацияПоТематике Тогда
		Тематика = СтруктураПараметров.Тематика;
	Иначе
		Тематика = Справочники.ТематикиДокументов.ПустаяСсылка();
	КонецЕсли;
	
	Если РеквизитыНумератора.НезависимаяНумерацияПоУзлуКОД
		И ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда 
		УзелКОД = Справочники.УзлыКОД.ЭтотУзел;
	Иначе
		УзелКОД = Справочники.УзлыКОД.ПустаяСсылка();
	КонецЕсли;
	
	СтруктураИзмерений = Новый Структура;
	СтруктураИзмерений.Вставить("Нумератор", 		  Нумератор);
	СтруктураИзмерений.Вставить("ПериодНумерации", 	  ПериодНумерации);
	СтруктураИзмерений.Вставить("Организация", 		  Организация);
	СтруктураИзмерений.Вставить("СвязанныйДокумент",  СвязанныйДокумент);
	СтруктураИзмерений.Вставить("Подразделение", 	  Подразделение);
	СтруктураИзмерений.Вставить("ВидДокумента", 	  ВидДокументаНумератора);
	СтруктураИзмерений.Вставить("Проект", 			  Проект);
	СтруктураИзмерений.Вставить("ВопросДеятельности", ВопросДеятельности);
	СтруктураИзмерений.Вставить("Тематика", 		  Тематика);
	СтруктураИзмерений.Вставить("ГрифДоступа", 		  ГрифДоступа);
	СтруктураИзмерений.Вставить("УзелКОД",	 		  УзелКОД);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.Нумерация");
		ЭлементБлокировки.УстановитьЗначение("Нумератор", 		  	Нумератор);
		ЭлементБлокировки.УстановитьЗначение("ПериодНумерации",   	ПериодНумерации);
		ЭлементБлокировки.УстановитьЗначение("Организация", 	  	Организация);
		ЭлементБлокировки.УстановитьЗначение("СвязанныйДокумент", 	СвязанныйДокумент);
		ЭлементБлокировки.УстановитьЗначение("Подразделение", 	  	Подразделение);
		ЭлементБлокировки.УстановитьЗначение("ВидДокумента", 	  	ВидДокументаНумератора);
		ЭлементБлокировки.УстановитьЗначение("Проект", 			  	Проект);
		ЭлементБлокировки.УстановитьЗначение("ВопросДеятельности",	ВопросДеятельности);
		ЭлементБлокировки.УстановитьЗначение("Тематика",			Тематика);
		ЭлементБлокировки.УстановитьЗначение("ГрифДоступа",			ГрифДоступа);
		ЭлементБлокировки.УстановитьЗначение("УзелКОД",				УзелКОД);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		ТекущийНомер = РегистрыСведений.Нумерация.Получить(СтруктураИзмерений).ТекущийНомер;
		
		Если ТекущийНомер = ЧисловойНомер Тогда // уменьшить номер в регистре
			МенеджерЗаписи = РегистрыСведений.Нумерация.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураИзмерений);
			МенеджерЗаписи.ТекущийНомер = ТекущийНомер - 1;
			МенеджерЗаписи.Записать();
		ИначеЕсли ТекущийНомер > ЧисловойНомер Тогда
			Если ИспользуютсяПропущенныеНомера(Нумератор) Тогда
				РегистрыСведений.ПропускиРегистрационныхНомеров.ЗафиксироватьПропущенныйНомер(ЧисловойНомер,
					СтруктураИзмерений);
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();	
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры	

// Возвращает тип документа по виду документа
Функция ПолучитьТипДокументаПоВиду(ВидДокумента) Экспорт 
	
	Возврат Перечисления.ТипыОбъектов.ДокументыПредприятия;
	
КонецФункции	

// Формирует поле Нумеровать для регистра Настройки нумерации
Функция СформироватьПолеНумеровать(СпособНумерации, Нумератор) Экспорт 
	
	Нумеровать = "";
	
	Если ЗначениеЗаполнено(СпособНумерации) Тогда 
		Нумеровать = Строка(СпособНумерации);
		
		Если ЗначениеЗаполнено(Нумератор) Тогда 
			ПримерНомера = "";
			ОписаниеОшибки = "";
	
			ФорматНомера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Нумератор, "ФорматНомера"); 
			Если Не СформироватьПримерНомера(ФорматНомера, ПримерНомера, ОписаниеОшибки) Тогда 
				ВызватьИсключение ОписаниеОшибки;
			КонецЕсли;	
			
			Нумеровать = Нумеровать + ", " + Строка(Нумератор) + ", " + ПримерНомера;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Нумеровать;
	
КонецФункции

Функция ПараметрыНумерации(Объект) Экспорт
	
	Возврат НумерацияКлиентСервер.ПолучитьПараметрыНумерации(Объект);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает индекс нумерации для объекта
Функция ПолучитьИндексОбъекта(Объект)
	
	Возврат РегистрыСведений.ИндексыНумерации.Получить(Новый Структура("Объект", Объект)).Индекс;
	
КонецФункции

// Для параметров, указанных в формате номера, вычисляет их значения
Функция ПолучитьЗначенияПараметровНомера(Объект, СтруктураФорматаНомера, ОписанияОшибок) 
	
	ПараметрыНомера = Новый Структура;
	
	Если ТипЗнч(Объект) = Тип("Структура")
		И Объект.Свойство("Назначение") Тогда
		Назначение = Объект.Назначение;
	Иначе
		Назначение = Перечисления.НазначенияНумераторов.РегистрационныйНомер;
	КонецЕсли;
	
	Если Назначение = Перечисления.НазначенияНумераторов.РегистрационныйНомер Тогда
		ПредставлениеОшибкиДаты = НСтр("ru = 'Не заполнено поле ""Дата регистрации""'");
		ИмяПоляДаты = "ДатаРегистрации";
	Иначе
		ПредставлениеОшибкиДаты = НСтр("ru = 'Не заполнено поле ""Дата создания""'");
		ИмяПоляДаты = "ДатаСоздания";
	КонецЕсли;
	ДатаДляНумерации = Объект[ИмяПоляДаты];
	
	Для Каждого ЭлементФормата Из СтруктураФорматаНомера Цикл
		Если ЭлементФормата.Ключ <> "СлужебноеПоле" Тогда
			Продолжить;
		КонецЕсли;	
		
		СлужебноеПоле = ЭлементФормата.Значение;
		ЗначениеПоля = "";
		
		Если СлужебноеПоле = "Номер" Тогда
			ЗначениеПоля = Объект.ЧисловойНомер;
			
		ИначеЕсли СлужебноеПоле = "День" Тогда
			Если Не ЗначениеЗаполнено(ДатаДляНумерации) Тогда 
				ОписанияОшибок.Добавить("ДатаРегистрации", ПредставлениеОшибкиДаты);
			Иначе
				ЗначениеПоля = Формат(День(ДатаДляНумерации), "ЧЦ=2; ЧВН=");
			КонецЕсли;	
			
		ИначеЕсли СлужебноеПоле = "Месяц" Тогда
			Если Не ЗначениеЗаполнено(ДатаДляНумерации) Тогда 
				ОписанияОшибок.Добавить("ДатаРегистрации", ПредставлениеОшибкиДаты);
			Иначе
				ЗначениеПоля = Формат(Месяц(ДатаДляНумерации), "ЧЦ=2; ЧВН=");
			КонецЕсли;
			
		ИначеЕсли СлужебноеПоле = "Квартал" Тогда
			Если Не ЗначениеЗаполнено(ДатаДляНумерации) Тогда 
				ОписанияОшибок.Добавить("ДатаРегистрации", ПредставлениеОшибкиДаты);
			Иначе
				Месяц = Месяц(ДатаДляНумерации);
				Если 	  Месяц <= 3 Тогда ЗначениеПоля = 1;
				ИначеЕсли Месяц <= 6 Тогда ЗначениеПоля = 2;
				ИначеЕсли Месяц <= 9 Тогда ЗначениеПоля = 3;
				Иначе ЗначениеПоля = 4; КонецЕсли;
			КонецЕсли;	
			
		ИначеЕсли СлужебноеПоле = "Год4" Тогда
			Если Не ЗначениеЗаполнено(ДатаДляНумерации) Тогда 
				ОписанияОшибок.Добавить("ДатаРегистрации", ПредставлениеОшибкиДаты);
			Иначе
				ЗначениеПоля = Год(ДатаДляНумерации);
			КонецЕсли;
			
		ИначеЕсли СлужебноеПоле = "Год2" Тогда
			Если Не ЗначениеЗаполнено(ДатаДляНумерации) Тогда 
				ОписанияОшибок.Добавить("ДатаРегистрации", ПредставлениеОшибкиДаты);
			Иначе
				ЗначениеПоля = Прав(Строка(Год(ДатаДляНумерации)), 2);
			КонецЕсли;	
			
		ИначеЕсли СлужебноеПоле = "ИндексВидаДокумента" Тогда 
			Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
				ЗначениеПоля = ПолучитьИндексОбъекта(Объект.ВидДокумента);
			КонецЕсли;
			
		ИначеЕсли СлужебноеПоле = "ИндексОтветственного" Тогда 
			Если ЗначениеЗаполнено(Объект.Ответственный) Тогда
				
				ЗначениеПоля = ПолучитьИндексОбъекта(Объект.Ответственный);
				
				Если Не ЗначениеЗаполнено(ЗначениеПоля) Тогда
					ЗначениеПоля = ПолучитьИндексОбъекта(
						Сотрудники.ЛюбойПользовательСотрудника(Объект.Ответственный));
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СлужебноеПоле = "ИндексВопросаДеятельности" Тогда 
			Если ЗначениеЗаполнено(Объект.ВопросДеятельности) Тогда
				ЗначениеПоля = ПолучитьИндексОбъекта(Объект.ВопросДеятельности);
			КонецЕсли;	
			
		ИначеЕсли СлужебноеПоле = "ИндексПодразделения" Тогда 
			Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
				ЗначениеПоля = ПолучитьИндексОбъекта(Объект.Подразделение);
			КонецЕсли;	
			
		ИначеЕсли СлужебноеПоле = "ИндексОрганизации" Тогда 
			Если ЗначениеЗаполнено(Объект.Организация) Тогда
				ЗначениеПоля = ПолучитьИндексОбъекта(Объект.Организация);
			КонецЕсли;	
			
		ИначеЕсли СлужебноеПоле = "ИндексНоменклатурыДел" Тогда 
			Если ЗначениеЗаполнено(Объект.НоменклатураДел) Тогда
				ЗначениеПоля = СокрЛП(Объект.НоменклатураДел.Индекс);
			КонецЕсли;	
			
		ИначеЕсли СлужебноеПоле = "ИндексКонтрагента" Тогда 
			Если ЗначениеЗаполнено(Объект.Контрагент) Тогда 
				ЗначениеПоля = ПолучитьИндексОбъекта(Объект.Контрагент);
			КонецЕсли;
			
		ИначеЕсли СлужебноеПоле = "ИндексПроекта" Тогда 
			Если ЗначениеЗаполнено(Объект.Проект) Тогда
				ЗначениеПоля = ПолучитьИндексОбъекта(Объект.Проект);
			КонецЕсли;
				
		ИначеЕсли СлужебноеПоле = "ИндексГрифаДоступа" Тогда 
			Если ЗначениеЗаполнено(Объект.ГрифДоступа) Тогда
				ЗначениеПоля = ПолучитьИндексОбъекта(Объект.ГрифДоступа);
			КонецЕсли;
			
		ИначеЕсли СлужебноеПоле = "НомерСвязанногоДокумента" Тогда 
			
			Нумератор = ПолучитьНумераторДокумента(Объект);
			Если ЗначениеЗаполнено(Нумератор) Тогда 
				СвязанныйДокумент = Справочники.ДокументыПредприятия.ПустаяСсылка();
				Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
					СвязанныйДокумент = СвязиОбъектов.ПолучитьСвязанныйОбъект(Объект.Ссылка, Нумератор.ТипСвязи);
				Иначе
					ИмяТипаСвязи = Справочники.ТипыСвязей.ПолучитьИмяПредопределенного(Нумератор.ТипСвязи);
					Если ЗначениеЗаполнено(ИмяТипаСвязи) И Объект.Свойство(ИмяТипаСвязи) Тогда 
						СвязанныйДокумент = Объект[ИмяТипаСвязи];
					КонецЕсли;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СвязанныйДокумент) И Объект.Свойство("СвязанныйДокумент") Тогда
					СвязанныйДокумент = Объект.СвязанныйДокумент;
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(СвязанныйДокумент) Тогда 
					ЗначениеПоля = СокрЛП(СвязанныйДокумент.РегистрационныйНомер);
				КонецЕсли;
			КонецЕсли;	
			
		ИначеЕсли СлужебноеПоле = "ИндексТематики" Тогда
			Если ЗначениеЗаполнено(Объект.Тематика) Тогда 
				ЗначениеПоля = ПолучитьИндексОбъекта(Объект.Тематика);
			КонецЕсли;
			
		ИначеЕсли СлужебноеПоле = "КодУзлаОбмена" Тогда
			ЗначениеПоля = КОДПовтИсп.КодТекущегоУзла();
		КонецЕсли;
		
		ПараметрыНомера.Вставить(СлужебноеПоле, ЗначениеПоля);
		
	КонецЦикла;	
	
	Возврат ПараметрыНомера;
	
КонецФункции	

// Формирует номер из структуры формата и значений параметров
Функция СформироватьНомерДокументаПоФормату(СтруктураФорматаНомера, ЗначенияПараметровНомера) 
	
	СформированныйНомер = "";
	
	Для Каждого ЭлементФормата Из СтруктураФорматаНомера Цикл
		
		Если ЭлементФормата.Ключ = "Разделитель" Тогда
			
			Если ЭлементФормата.ВходитВСлужебное = 0 Тогда
				СформированныйНомер = СформированныйНомер + ЭлементФормата.Значение;
			Иначе
				ЗначениеПараметра = "";
				СлужебноеПоле = СтруктураФорматаНомера.Получить(ЭлементФормата.ВходитВСлужебное - 1).Значение;
				ЗначенияПараметровНомера.Свойство(СлужебноеПоле, ЗначениеПараметра);
				Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда 
					СформированныйНомер = СформированныйНомер + ЭлементФормата.Значение;
				КонецЕсли;	
			КонецЕсли;	
			
		ИначеЕсли ЭлементФормата.Ключ = "СлужебноеПоле" Тогда
			
			ЗначениеПараметра = "";
			ЗначенияПараметровНомера.Свойство(ЭлементФормата.Значение, ЗначениеПараметра);
			
			Если ТипЗнч(ЗначениеПараметра) = Тип("Число") Тогда
				ЗначениеПараметра = Формат(ЗначениеПараметра, "ЧГ=");
			Иначе	
				ЗначениеПараметра = Строка(ЗначениеПараметра);
			КонецЕсли;	
			
			СформированныйНомер = СформированныйНомер + ЗначениеПараметра;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат СформированныйНомер;
	
КонецФункции

Функция ПолучитьСписокСлужебныхПолей()
	
	СписокПолей = Новый СписокЗначений; // значение - служебное поле в строке формата
										// представление - представление служебного поля
	
	СписокПолей.Добавить(НСтр("ru = 'День'"), 	"День");  	// день месяца
	СписокПолей.Добавить(НСтр("ru = 'Месяц'"),	"Месяц"); 	// номер месяца
	СписокПолей.Добавить(НСтр("ru = 'Квартал'"),"Квартал"); // номер квартала
	СписокПолей.Добавить(НСтр("ru = 'Год4'"), 	"Год4");  	// год 4 знака
	СписокПолей.Добавить(НСтр("ru = 'Год2'"), 	"Год2");  	// год 2 знака
	
	СписокПолей.Добавить(НСтр("ru = 'ИндексОрг'"),		"ИндексОрганизации"); 
	СписокПолей.Добавить(НСтр("ru = 'ИндексВидаДок'"),	"ИндексВидаДокумента"); 
	СписокПолей.Добавить(НСтр("ru = 'ИндексПодр'"), 	"ИндексПодразделения"); 
	СписокПолей.Добавить(НСтр("ru = 'ИндексКонтр'"), 	"ИндексКонтрагента");  
	СписокПолей.Добавить(НСтр("ru = 'ИндексВопрДеят'"),	"ИндексВопросаДеятельности");
	СписокПолей.Добавить(НСтр("ru = 'ИндексНомДел'"),	"ИндексНоменклатурыДел");
	СписокПолей.Добавить(НСтр("ru = 'НомерСвязДок'"),	"НомерСвязанногоДокумента");
	СписокПолей.Добавить(НСтр("ru = 'ИндексОтв'"),		"ИндексОтветственного");
	СписокПолей.Добавить(НСтр("ru = 'ИндексПроекта'"),	"ИндексПроекта");
	СписокПолей.Добавить(НСтр("ru = 'ИндексГрифаДоступа'"),	"ИндексГрифаДоступа");
	
	СписокПолей.Добавить(НСтр("ru = 'Номер'"),   	"Номер"); 	// числовой номер
	
	СписокПолей.Добавить(НСтр("ru = 'ИндексТематики'"),	"ИндексТематики");
	СписокПолей.Добавить(НСтр("ru = 'КодУзлаОбмена'"),	"КодУзлаОбмена");
	
	Возврат СписокПолей;
	
КонецФункции	

#КонецОбласти
