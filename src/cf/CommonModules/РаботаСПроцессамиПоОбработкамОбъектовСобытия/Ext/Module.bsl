////////////////////////////////////////////////////////////////////////////////
// Работа с процессами по обработкам объектов (события): содержит серверные обработчики событий,
// которые используются для взаимодействия процессов с обработками объектов.
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область СобытияНастроекОбработкиВидаОбъекта

// Выполняется при записи настройки обработки вида объекта.
// 
// Параметры:
// 	НастройкаОбработки - СправочникОбъект.НастройкиОбработкиВидовОбъектов
//
Процедура ПриЗаписиНастройкиОбработкиВидаОбъекта(НастройкаОбработки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат;
	КонецЕсли;
	
	НеОбновлятьСхему = Ложь;
	Если НастройкаОбработки.ДополнительныеСвойства.Свойство("НеОбновлятьСхему") Тогда
		НеОбновлятьСхему = НастройкаОбработки.ДополнительныеСвойства.НеОбновлятьСхему;
	КонецЕсли;
	 
	Если Не НеОбновлятьСхему Тогда
		РаботаСПроцессамиПоОбработкамОбъектов.ОбновитьСхемуДляОбработкиОбъектаПоВладельцу(
			НастройкаОбработки.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Выполняется перед удалением настройки обработки вида объекта.
// 
// Параметры:
// 	НастройкаОбработки - СправочникОбъект.НастройкиОбработкиВидовОбъектов
//
Процедура ПередУдалениемНастройкиОбработкиВидаОбъекта(НастройкаОбработки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСПроцессамиПоОбработкамОбъектов.УдалитьСхемуДляОбработкиОбъектаПодчиненнуюВладельцу(
		НастройкаОбработки.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СобытияСвязейДействияСОбработкой

// Выполняется при записи связей действиям с обработкой (РС. ДействияОбработкиОбъектов).
// 
// Параметры:
// 	ЗаписиСвязи - РегистрСведенийНаборЗаписей.ДействияОбработкиОбъектов
//
Процедура ПриЗаписиСвязиДействияСОбработкой(ЗаписиСвязи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат;
	КонецЕсли;
	
	// Обрабатываем только установку связи.
	// Связь удаляется только при полном удалении действия или самой обработки из базы - в этом
	// случае нет смысла обновлять схему.
	Если ЗаписиСвязи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаОбъекта = ЗаписиСвязи[0].Обработка;
	
	ПараметрыСхемыДляОбработки = 
		РаботаСПроцессамиПоОбработкамОбъектов.ПараметрыСхемыДляОбработкиОбъекта(ОбработкаОбъекта);
	
	// Обновляем схему процесса обработки объекта, если она есть,
	// или ее настройки при виде объекта не определены.	
	Если ЗначениеЗаполнено(ПараметрыСхемыДляОбработки.ПараметрыСхемы)
		И ПараметрыСхемыДляОбработки.Владелец <> ОбработкаОбъекта Тогда
		
		Возврат;
	КонецЕсли;
	
	РаботаСПроцессамиПоОбработкамОбъектов.ОбновитьСхемуДляОбработкиОбъектаПоВладельцу(
		ОбработкаОбъекта);
	
КонецПроцедуры

#КонецОбласти

#Область СобытияДействия

// Выполняется перед записью действия.
//
// Параметры:
//  Действие - ОпределяемыйТип.ДействияОбъект
//
Процедура ПередЗаписьюДействия(Действие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат;
	КонецЕсли;
	
	// Обновляем схему обработки объекта, которой принадлежит действие.
	// Но только если схема есть и действие включается/исключается из обработки
	// пометкой удаления и обработка объекта не помечена на удаление.
	
	Если Не ЗначениеЗаполнено(Действие.Ссылка) 
		
		Или ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие.Ссылка, "ПометкаУдаления") = 
		Действие.ПометкаУдаления Тогда
		
		Возврат;
	КонецЕсли;
		
	ОбработкаОбъекта = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие.Ссылка);
	Если Не ЗначениеЗаполнено(ОбработкаОбъекта)
		Или ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбработкаОбъекта, "ПометкаУдаления") Тогда
		
		Возврат;
	КонецЕсли;	
		
	ПараметрыСхемы = Справочники.ПараметрыСхемДляОбработокОбъектов.ПараметрыСхемыПоВладельцу(
		ОбработкаОбъекта);		
	Если Не ЗначениеЗаполнено(ПараметрыСхемы) Тогда
		Возврат;
	КонецЕсли;
	
	Действие.ДополнительныеСвойства.Вставить("ОбработкаДляОбновленияСхемы", ОбработкаОбъекта);
		
КонецПроцедуры

// Выполняется при записи действия.
//
// Параметры:
//  Действие - ОпределяемыйТип.ДействияОбъект
//
Процедура ПриЗаписиДействия(Действие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Действие.ДополнительныеСвойства.Свойство("ОбработкаДляОбновленияСхемы") Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСПроцессамиПоОбработкамОбъектов.ОбновитьСхемуДляОбработкиОбъектаПоВладельцу(
		Действие.ДополнительныеСвойства.ОбработкаДляОбновленияСхемы);
	
КонецПроцедуры

#КонецОбласти

#Область СобытияОбработкиОбъекта

// Выполняется перед записью обработки объекта.
// 
// Параметры:
// 	ОбработкаОбъекта - СправочникОбъект.ОбработкиОбъектов
//
Процедура ПередЗаписьюОбработкиОбъекта(ОбработкаОбъекта) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбработкаОбъекта.Ссылка) Тогда
		ОбработкаОбъекта.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		
		Возврат;
	КонецЕсли;
		
	РеквизитыОбработки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ОбработкаОбъекта.Ссылка, "ПометкаУдаления, Состояние, ДатаНачала");
	
	Если РеквизитыОбработки.ПометкаУдаления <> ОбработкаОбъекта.ПометкаУдаления
		Или РеквизитыОбработки.ДатаНачала <> ОбработкаОбъекта.ДатаНачала Тогда
		
		ПараметрыСхемы = РаботаСПроцессамиПоОбработкамОбъектов.ПараметрыСхемыДляОбработкиОбъекта(
			ОбработкаОбъекта.Ссылка);
			
		Если ПараметрыСхемы.Владелец = ОбработкаОбъекта.Ссылка Тогда
			ОбработкаОбъекта.ДополнительныеСвойства.Вставить(
				"ОбработкаДляОбновленияСхемы", ОбработкаОбъекта.Ссылка);
		КонецЕсли;
			
	КонецЕсли;
	
	ПроцессОбработки = РегистрыСведений.ПроцессыОбработокОбъектов.ПроцессОбработкиОбъекта(
		ОбработкаОбъекта.Ссылка);

	ВедущаяЗадача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроцессОбработки, "ВедущаяЗадача");
	Если ЗначениеЗаполнено(ВедущаяЗадача)
		И ОбработкаОбъекта.Состояние <> Перечисления.СостоянияОбработкиОбъектов.Завершена Тогда
		
		СостояниеВедущейЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ВедущаяЗадача, "СостояниеБизнесПроцесса");
		
		Если (СостояниеВедущейЗадачи = Перечисления.СостоянияБизнесПроцессов.Активен
			И ОбработкаОбъекта.Состояние <> Перечисления.СостоянияОбработкиОбъектов.Выполняется)
			
			Или (СостояниеВедущейЗадачи = Перечисления.СостоянияБизнесПроцессов.Остановлен
				И ОбработкаОбъекта.Состояние <> Перечисления.СостоянияОбработкиОбъектов.Остановлена)
				
			Или (СостояниеВедущейЗадачи = Перечисления.СостоянияБизнесПроцессов.Прерван
				И ОбработкаОбъекта.Состояние <> Перечисления.СостоянияОбработкиОбъектов.Прервана) Тогда
			
			ВызватьИсключение
				НСтр("ru = 'Изменение состояния обработки невозможно без изменения процесса, из которого была запущена обработка.'");
		КонецЕсли;
	КонецЕсли;	
	
	Если РеквизитыОбработки.ПометкаУдаления <> ОбработкаОбъекта.ПометкаУдаления Тогда
		ОбработкаОбъекта.ДополнительныеСвойства.Вставить(
			"ИзмениласьПометкаУдаления", ОбработкаОбъекта.ПометкаУдаления);
	КонецЕсли; 
	
	Если РеквизитыОбработки.Состояние <> ОбработкаОбъекта.Состояние Тогда
		
		Если ОбработкаОбъекта.Состояние = Перечисления.СостоянияОбработкиОбъектов.Прервана Тогда
			ОбработкаОбъекта.ДополнительныеСвойства.Вставить("ВыполняетсяПрерываниеОбработки", Истина);
		ИначеЕсли ОбработкаОбъекта.Состояние = Перечисления.СостоянияОбработкиОбъектов.Остановлена Тогда
			ОбработкаОбъекта.ДополнительныеСвойства.Вставить("ВыполняетсяОстановкаОбработки", Истина);
		ИначеЕсли ОбработкаОбъекта.Состояние = Перечисления.СостоянияОбработкиОбъектов.Выполняется
			И РеквизитыОбработки.Состояние = Перечисления.СостоянияОбработкиОбъектов.Остановлена Тогда
			ОбработкаОбъекта.ДополнительныеСвойства.Вставить("ВыполняетсяПродолжениеОбработки", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПроцессОбработки) Тогда
		Возврат;
	КонецЕсли;
	
	Если РеквизитыОбработки.ПометкаУдаления <> ОбработкаОбъекта.ПометкаУдаления Тогда
		ОбработкаОбъекта.ДополнительныеСвойства.Вставить(
			"ПроцессДляОбновленияПометкиУдаления", ПроцессОбработки);
		ОбработкаОбъекта.ДополнительныеСвойства.Вставить(
			"ПометкаУдаленияДляПроцесса", ОбработкаОбъекта.ПометкаУдаления);
	КонецЕсли; 
	
	Если РеквизитыОбработки.Состояние <> ОбработкаОбъекта.Состояние Тогда
		Если ОбработкаОбъекта.Состояние = Перечисления.СостоянияОбработкиОбъектов.Прервана Тогда
			ОбработкаОбъекта.ДополнительныеСвойства.Вставить("ПроцессДляПрерывания", ПроцессОбработки);
			ОбработкаОбъекта.ДополнительныеСвойства.Вставить(
				"ПричинаПрерыванияПроцесса", ОбработкаОбъекта.ПричинаПрерывания);
		ИначеЕсли ОбработкаОбъекта.Состояние = Перечисления.СостоянияОбработкиОбъектов.Остановлена 
			Или (ЗначениеЗаполнено(РеквизитыОбработки.Состояние) 
				И ОбработкаОбъекта.Состояние = Перечисления.СостоянияОбработкиОбъектов.Выполняется) Тогда
			ОбработкаОбъекта.ДополнительныеСвойства.Вставить("ПроцессДляОстановкиПродолжения", ПроцессОбработки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Выполняется при записи обработки объекта.
// 
// Параметры:
// 	ОбработкаОбъекта - СправочникОбъект.ОбработкиОбъектов
//
Процедура ПриЗаписиОбработкиОбъекта(ОбработкаОбъекта) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаОчередиЗаданийСервер.ПриЗаписиОбработкиОбъектаИсполняемойПроцессами(ОбработкаОбъекта);
	
	Если ОбработкаОбъекта.ДополнительныеСвойства.Свойство("ОбработкаДляОбновленияСхемы") Тогда
		РаботаСПроцессамиПоОбработкамОбъектов.ОбновитьСхемуДляОбработкиОбъектаПоВладельцу(
			ОбработкаОбъекта.ДополнительныеСвойства.ОбработкаДляОбновленияСхемы);	
	КонецЕсли;
	
	Если ОбработкаОбъекта.ДополнительныеСвойства.Свойство("ПроцессДляОбновленияПометкиУдаления") Тогда
		
		ПроцессОбъект = ОбработкаОбъекта.ДополнительныеСвойства.
			ПроцессДляОбновленияПометкиУдаления.ПолучитьОбъект();
		
		ПроцессОбъект.УстановитьПометкуУдаления(
			ОбработкаОбъекта.ДополнительныеСвойства.ПометкаУдаленияДляПроцесса);
			
	КонецЕсли;
	
	Если ОбработкаОбъекта.ДополнительныеСвойства.Свойство("ПроцессДляПрерывания") Тогда
		
		ПроцессОбъект = 
			ОбработкаОбъекта.ДополнительныеСвойства.ПроцессДляПрерывания.ПолучитьОбъект();
		
		ПроцессОбъект.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван;
		
		ПроцессОбъект.ПричинаПрерывания = 
			ОбработкаОбъекта.ДополнительныеСвойства.ПричинаПрерыванияПроцесса;
		
		ПроцессОбъект.Записать();
		
		ПротоколированиеРаботыСотрудников.ЗаписатьПрерываниеБизнесПроцесса(ПроцессОбъект.Ссылка);
			
	КонецЕсли;
	
	Если ОбработкаОбъекта.ДополнительныеСвойства.Свойство("ПроцессДляОстановкиПродолжения") Тогда
		
		ПроцессОбъект = 
			ОбработкаОбъекта.ДополнительныеСвойства.ПроцессДляОстановкиПродолжения.ПолучитьОбъект();
		
		Если ОбработкаОбъекта.Состояние = Перечисления.СостоянияОбработкиОбъектов.Остановлена Тогда
			ПроцессОбъект.Состояние = Перечисления.СостоянияБизнесПроцессов.Остановлен;
		Иначе
			ПроцессОбъект.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
		КонецЕсли;
		ПроцессОбъект.ДополнительныеСвойства.Вставить("ОтключитьПроверкуВозможностиИзмененияСостояния", Истина);
		ПроцессОбъект.Записать();
			
	КонецЕсли;
	
КонецПроцедуры

// Выполняется перед удалением обработки объектов.
// 
// Параметры:
// 	ОбработкаОбъекта - СправочникОбъект.ОбработкиОбъектов
//
Процедура ПередУдалениемОбработкиОбъекта(ОбработкаОбъекта) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСПроцессамиПоОбработкамОбъектов.УдалитьСхемуДляОбработкиОбъектаПодчиненнуюВладельцу(
		ОбработкаОбъекта.Ссылка);
	
КонецПроцедуры

// Выполняется при установке видимости команд управления обработкой.
// 
// Параметры:
//  Элементы - ВсеЭлементыФормы - Элементы формы вызова
//  ПараметрыВидаОбъекта - Структура - см. ДействияКлиентСервер.НоывйПараметрыВидаОбъекта().
//  СостояниеОбработки - ПеречислениеСсылка.СостоянияОбработкиОбъектов
//
Процедура ПриУстановкеВидимостиКомандУправленияОбработкой(
	Элементы, ПараметрыВидаОбъекта, СостояниеОбработки) Экспорт
	
	Элементы.СхемаОбработки.Видимость = Не ЗначениеЗаполнено(СостояниеОбработки)
		И (ТипЗнч(ПараметрыВидаОбъекта) <> Тип("Структура")
			Или Не ПараметрыВидаОбъекта.Свойство("ОбработкаЗадана")
			Или Не ПараметрыВидаОбъекта.ОбработкаЗадана);   
			
КонецПроцедуры

// Выполняется при начале обработки объекта.
// 
// Параметры:
// 	ОбработкаОбъекта - СправочникОбъект.ОбработкиОбъектов
//
Процедура ПриНачалеОбработкиОбъекта(ОбработкаОбъекта) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат;
	КонецЕсли;

	ВедущаяЗадача = Неопределено;
	Если ОбработкаОбъекта.ДополнительныеСвойства.Свойство("ВедущаяЗадача") Тогда
		ВедущаяЗадача = ОбработкаОбъекта.ДополнительныеСвойства.ВедущаяЗадача;
	КонецЕсли;	 
	
	МастерКП = Неопределено;
	Если ЗначениеЗаполнено(ВедущаяЗадача) Тогда
		МастерКП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедущаяЗадача, "БизнесПроцесс");
	КонецЕсли;	
		
	Предмет = ОбработкаОбъекта.Владелец;
	КППоПредмету = РаботаСПроцессамиПоОбработкамОбъектов.АктивныйКППоПредмету(Предмет, МастерКП);
	Если ЗначениеЗаполнено(КППоПредмету) Тогда
		ВызватьИсключение 
			СтрШаблон(НСтр("ru = 'По предмету ""%1"" уже есть активный комплексный процесс с вложенной обработкой.'"), 
					Предмет);
	КонецЕсли;	
	
	ПараметрыСхемы = РаботаСПроцессамиПоОбработкамОбъектов.ПараметрыСхемыДляОбработкиОбъекта(ОбработкаОбъекта.Ссылка);
	
	Если Не ЗначениеЗаполнено(ПараметрыСхемы.ПараметрыСхемы) Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось начать обработку, т.к. она не настроена.'");
	КонецЕсли;
	
	// бросит исключение при ошибке
	РаботаСПроцессамиПоОбработкамОбъектов.ПроверитьКорректностьСхемыНеинтерактивно(
		ПараметрыСхемы.ПараметрыСхемы, Предмет);
	
	Если ОбработкаОчередиЗаданийСервер.ОбработатьФормированиеПроцессаОбработкиОбъекта(
		ОбработкаОбъекта) Тогда
		
		Возврат;			
	КонецЕсли;
		
	ПроцессПоОбработке = РаботаСПроцессамиПоОбработкамОбъектов.СоздатьПроцессПоОбработке(
		ОбработкаОбъекта, ВедущаяЗадача);
	
	ПроцессПоОбработке.Старт();
	
КонецПроцедуры

// Выполняет обработку получения действий До и После, возвращает Истина, если особая обработка выполнена.
// Предназначено для вызова из ОбработкиОбъектов.ДействияДоИПосле для определения особой логики.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия.
//  Обработка - СправочникСсылка.ОбработкиОбъектов.
//  ДействияОбработки - Массив из ОпределяемыйТип.Действия.
//  Результат - Структура - неявно возвращаемый параметры. В него следует поместит результат.
//   * ДействияДо - Массив из ОпределяемыйТип.Действия.
//   * ДействияПосле - Массив из ОпределяемыйТип.Действия.
//
// Возвращаемое значение:
//  Булево
//
Функция ОбработатьПолучениеДействийДоИПосле(Действие, Обработка, ДействияОбработки, Результат) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДействияИВиды = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ДействияОбработки, "ВидДействия");
	
	ВидыИДействия = Новый Соответствие;
	Для Каждого КлючЗначение Из ДействияИВиды Цикл
		ВидыИДействия[КлючЗначение.Значение] = КлючЗначение.Ключ;
	КонецЦикла;
	
	ПараметрыСхемы = РаботаСПроцессамиПоОбработкамОбъектов.ПараметрыСхемыДляОбработкиОбъекта(Обработка);
	ДанныеПараметров = Справочники.ПараметрыСхемДляОбработокОбъектов.ДанныеПараметровСхемы(
		ПараметрыСхемы.ПараметрыСхемы);
	
	ИменаДействий = Новый Соответствие;
	ДействияИИмена = Новый Соответствие;
	Для Каждого КлючЗначение Из ДанныеПараметров.НастройкиЭлементов Цикл
		ДействиеЭлемента = ВидыИДействия[КлючЗначение.Значение];
		Если ДействиеЭлемента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ИменаДействий[КлючЗначение.Ключ] = ДействиеЭлемента;
		ДействияИИмена[ДействиеЭлемента] = КлючЗначение.Ключ;
	КонецЦикла;
	
	ДанныеСхемы = Справочники.СхемыПроцессов.ДанныеСхемыПроцесса(ДанныеПараметров.Схема);
	
	ПутиСхемы = СхемыПроцессовСервер.ПутиСхемыПроцесса(
		СхемыПроцессовКлиентСервер.ИмяЭлементаСтартаСхемы(ДанныеСхемы),
		СхемыПроцессовСервер.ПредшественникиЭлементовПоДаннымСхемы(ДанныеСхемы));
	
	ИмяДействия = ДействияИИмена[Действие];
	
	ДействияДо = Новый Массив;
	ДействияПосле = Новый Массив;
	
	Для Каждого Путь Из ПутиСхемы Цикл
		Если Путь.Найти(ИмяДействия) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивНаполнения = "ДействияДо";
		Для Каждого ЭлементПути Из Путь Цикл
			
			Если ЭлементПути = ИмяДействия Тогда
				МассивНаполнения = "ДействияПосле";
				Продолжить;
			КонецЕсли;
			
			ДействиеЭлемента = ИменаДействий[ЭлементПути];
			Если ДействиеЭлемента = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если МассивНаполнения = "ДействияДо" Тогда
				ДействияДо.Добавить(ДействиеЭлемента);
			ИначеЕсли МассивНаполнения = "ДействияПосле" Тогда
				ДействияПосле.Добавить(ДействиеЭлемента);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Результат.ДействияДо = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДействияДо);
	Результат.ДействияПосле = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДействияПосле);
	
	Возврат Истина;
	
КонецФункции

// Выполняется при переходе к выполнению действия.
// Предназначена для вызова из ОбработкиОбъектов.ПерейтиКВыполнениюДействия.
//
// Параметры:
//  Обработка - СправочникСсылка.ОбработкиОбъектов.
//  Действие - ОпределяемыйТип.Действия.
//  ИзмененияОбработки - Структура - ОбработкиОбъектов.ИзмененияОбработкиПриПереходеКВыполнениюДействию
//
Процедура ПриПереходеКВыполнениюДействия(Обработка, Действие, ИзмененияОбработки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат;
	КонецЕсли;
	
	ПроцессОбработки = РегистрыСведений.ПроцессыОбработокОбъектов.ПроцессОбработкиОбъекта(Обработка);
	ЗаблокироватьДанныеДляРедактирования(ПроцессОбработки);
	
	ДействияОбработки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Действие);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДействияОбработки, ИзмененияОбработки.ДляПрерывания);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДействияОбработки, ИзмененияОбработки.ДляПропуска);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДействияОбработки, ИзмененияОбработки.ДляОчисткиРезультатов);
	ДействияОбработки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДействияОбработки);
	
	ДействияИВиды = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ДействияОбработки, "ВидДействия");
	
	ВидыИДействия = Новый Соответствие;
	Для Каждого КлючЗначение Из ДействияИВиды Цикл
		ВидыИДействия[КлючЗначение.Значение] = КлючЗначение.Ключ;
	КонецЦикла;
	
	ПараметрыСхемы = РаботаСПроцессамиПоОбработкамОбъектов.ПараметрыСхемыДляОбработкиОбъекта(Обработка);
	ДанныеПараметров = Справочники.ПараметрыСхемДляОбработокОбъектов.ДанныеПараметровСхемы(
		ПараметрыСхемы.ПараметрыСхемы);
	
	ДействияИИмена = Новый Соответствие;
	Для Каждого КлючЗначение Из ДанныеПараметров.НастройкиЭлементов Цикл
		ДействиеЭлемента = ВидыИДействия[КлючЗначение.Значение];
		Если ДействиеЭлемента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДействияИИмена[ДействиеЭлемента] = КлючЗначение.Ключ;
	КонецЦикла;
	
	ПроцессОбъект = ПроцессОбработки.ПолучитьОбъект();
	ОбработчикСхемы = ПроцессОбъект.ОбработчикСхемыПроцесса();
	
	Для Каждого ТекущееДействие Из ИзмененияОбработки.ДляПрерывания Цикл
		ИмяДействия = ДействияИИмена[ТекущееДействие];
		ПроцессОбъект.УстановитьОтметкуТекущегоЭлемента(ИмяДействия, Ложь, ОбработчикСхемы);
	КонецЦикла;
	
	Для Каждого ТекущееДействие Из ИзмененияОбработки.ДляОчисткиРезультатов Цикл
		ИмяДействия = ДействияИИмена[ТекущееДействие];
		ПроцессОбъект.УстановитьОтметкуПрохожденияЭлемента(ИмяДействия, Ложь, ОбработчикСхемы);
	КонецЦикла;
	
	Для Каждого ТекущееДействие Из ИзмененияОбработки.ДляПропуска Цикл
		ИмяДействия = ДействияИИмена[ТекущееДействие];
		ПроцессОбъект.УстановитьОтметкуПрохожденияЭлемента(ИмяДействия, Истина, ОбработчикСхемы);
	КонецЦикла;
	
	ИмяДействия = ДействияИИмена[Действие];
	ПроцессОбъект.УстановитьОтметкуПрохожденияЭлемента(ИмяДействия, Ложь, ОбработчикСхемы);
	ПроцессОбъект.УстановитьОтметкуТекущегоЭлемента(ИмяДействия, Истина, ОбработчикСхемы);
	
	ПроцессОбъект.ЗаписатьСведенияОбработкиСхемыВПроцесс(ОбработчикСхемы);
	
	РазблокироватьДанныеДляРедактирования(ПроцессОбработки);
	
КонецПроцедуры

#КонецОбласти

#Область СобытияСхемПроцессов

// Обрабатывает получение формы схемы процесса.
// 
// Предназначена для вызова из ОбработкаПолученияФормы. 
// 
// Параметры:
// 	ВидФормы, Параметры, ВыбраннаяФорма, СтандартнаяОбработка - стандартные параметры
// 	платформенного обработчика событий ОбработкаПолученияФормы.
// 	
// Возвращаемое значение:
// 	Булево - Истина, если получение формы обработано, иначе - Ложь.
//
Функция ОбработатьПолучениеФормыСхемыПроцессов(
	ВидФормы, Параметры, ВыбраннаяФорма, СтандартнаяОбработка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Параметры.Свойство("Ключ") Или ВидФормы <> "ФормаОбъекта" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыСхемы = Справочники.ПараметрыСхемДляОбработокОбъектов.ПараметрыПоСхеме(Параметры.Ключ);
	
	Если Не ЗначениеЗаполнено(ПараметрыСхемы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ВыбраннаяФорма = Метаданные.ОбщиеФормы.КарточкаСхемыОбработкиОбъекта;
			
	Параметры.Вставить("ПараметрыСхемы", ПараметрыСхемы);
	
	ВладелецСхемы = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
		ПараметрыСхемы, "ВладелецСхемы");
		
	Если ТипЗнч(ВладелецСхемы) = Тип("СправочникСсылка.ОбработкиОбъектов") Тогда
		
		РеквизитыВлайдельца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВладелецСхемы,
			"Владелец, Состояние");
		
		ПараметрыОткрытия =
			РаботаСПроцессамиПоОбработкамОбъектовВызовСервера.ПараметрыОтрытияСхемыОбработкиДляОбъекта(
				РеквизитыВлайдельца.Владелец);
		
		Параметры.Вставить("Действия", ПараметрыОткрытия.Действия);
		
		Если ЗначениеЗаполнено(РеквизитыВлайдельца.Состояние) Тогда
			Параметры.Вставить("ТолькоПросмотр", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СобытияУсловийСхемПроцессов

// При записи результата условия.
// 
// Параметры:
//  ИмяЭлемента  - Строка
//  Процесс - БизнесПроцессСсылка.КомплексныйПроцесс
//  РезультатУсловия - Булево
Процедура ПриЗаписиРезультатаУсловия(ИмяЭлемента, Процесс, РезультатУсловия) Экспорт
	
    Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат;
	КонецЕсли;
	
	Обработка = РегистрыСведений.ПроцессыОбработокОбъектов.ОбработкаПоПроцессу(Процесс);
	Если Не ЗначениеЗаполнено(Обработка) Тогда
		Возврат;
	КонецЕсли;
	
	Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
	Событие.Обработка = Обработка;
	Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.ВычислениеУсловия;
	Событие.Описание = СтрШаблон(НСтр("ru = 'Результат условия ""%1"" = %2'"), ИмяЭлемента, РезультатУсловия);
	РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);

КонецПроцедуры	

#КонецОбласти

#Область СобытияПараметровСхемДляОбработокОбъектов

// Обрабатывает получение формы параметров схемы.
// 
// Предназначена для вызова из ОбработкаПолученияФормы. 
// 
// Параметры:
// 	ВидФормы, Параметры, ВыбраннаяФорма, СтандартнаяОбработка - стандартные параметры
// 	платформенного обработчика событий ОбработкаПолученияФормы.
// 	
// Возвращаемое значение:
// 	Булево - Истина, если получение формы обработано, иначе - Ложь.
//
Функция ОбработатьПолучениеФормыПараметровСхемы(
	ВидФормы, Параметры, ВыбраннаяФорма, СтандартнаяОбработка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Параметры.Свойство("Ключ") И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ВыбраннаяФорма = Метаданные.ОбщиеФормы.КарточкаСхемыОбработкиОбъекта;
		
	Параметры.Вставить("ПараметрыСхемы", Параметры.Ключ);
	
	ВладелецСхемы = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
		Параметры.Ключ, "ВладелецСхемы");
		
	Если ТипЗнч(ВладелецСхемы) = Тип("СправочникСсылка.ОбработкиОбъектов") Тогда
		
		РеквизитыВлайдельца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВладелецСхемы,
			"Владелец, Состояние");
		
		ПараметрыОткрытия =
			РаботаСПроцессамиПоОбработкамОбъектовВызовСервера.ПараметрыОтрытияСхемыОбработкиДляОбъекта(
				РеквизитыВлайдельца.Владелец);
		
		Параметры.Вставить("Действия", ПараметрыОткрытия.Действия);
		
		Если ЗначениеЗаполнено(РеквизитыВлайдельца.Состояние) Тогда
			Параметры.Вставить("ТолькоПросмотр", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СобытияПроцессаОбработки

// Обрабатывает получение формы процесса обработки.
//
// Параметры:
//  ВидФормы - Строка
//  Процесс - БизнесПроцессСсылка
//  ВыбраннаяФорма - ФормаКлиентскогоПриложения
//  СтандартнаяОбработка - Булево
//
// Возвращаемое значение:
//  Булево - признак того, что получение было обработано.
//
Функция ОбработатьПолучениеФормыПроцесса(ВидФормы, Параметры, ВыбраннаяФорма, СтандартнаяОбработка) Экспорт
	
	Если ВидФормы <> "ФормаОбъекта" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не Параметры.Свойство("Ключ") Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Обработка = РегистрыСведений.ПроцессыОбработокОбъектов.ОбработкаПоПроцессу(Параметры.Ключ);
	Если Не ЗначениеЗаполнено(Обработка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВыбраннаяФорма = Метаданные.ОбщиеФормы.ПроцессПоОбработке;
	СтандартнаяОбработка = Ложь;
	
	Возврат Истина;
	
КонецФункции

// Выполняется перед копирование процесса.
// 
// В самом начале обработчика ПриКопировании. 
//
// Параметры:
//  ОбъектКопирования - БизнесПроцессОбъект.КомплексныйПроцесс - копируемый процесс.
//
Процедура ПередКопированиемПроцесса(ОбъектКопирования) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Обработка = РегистрыСведений.ПроцессыОбработокОбъектов.ОбработкаПоПроцессу(
		ОбъектКопирования.Ссылка);
	
	Если Не ЗначениеЗаполнено(Обработка) Тогда
		Возврат;
	КонецЕсли;	
	
	ВызватьИсключение НСтр(
		"ru = 'Копирование процессов, выполняющих обработку объекта, не поддерживается.'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецПроцедуры

// Выполняется при завершении процесса.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.КомплексныйПроцесс
//
Процедура ПриЗавершенииПроцесса(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат;
	КонецЕсли;
	
	Обработка = РегистрыСведений.ПроцессыОбработокОбъектов.ОбработкаПоПроцессу(Процесс.Ссылка);
	Если Не ЗначениеЗаполнено(Обработка) Тогда
		Возврат;
	КонецЕсли;
		
	ДействияБезСостояний = 
		РаботаСПроцессамиПоОбработкамОбъектов.ДействияОбработкиБезСостояний(Обработка);
		
	Для Каждого Действие Из ДействияБезСостояний Цикл
		ДействияСервер.ПропуститьДействие(Действие);
	КонецЦикла;
	
	ОбработкиОбъектов.ОбновитьОтметкиЗавершенностиОбработки(Обработка);
	
КонецПроцедуры

// Обрабатывает проверку возможности перехода к элементу.
// 
// Параметры:
// 	ПредыдущийЭлемент - Строка - имя предыдущего элемента.
// 	СледующийЭлемент - Строка - имя след. элемента.
// 	ТипыЭлементов - Соответствие
// 	  * Ключ - Строка - имя элемента.
// 	  * Значение - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
// 	ПроцессОбработки - БизнесПроцессОбъект.КомплексныйПроцесс
// 	
// Возвращаемое значение:
// 	Структура:
//   * ПереходВозможен - Булево
//   * СобытиеОбработано - Булево
//
Функция ОбработатьПроверкуВозможностиПереходаКЭлементу(
	ПредыдущийЭлемент, СледующийЭлемент, ТипыЭлементов, ПроцессОбработки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Переход возможен если:
	//  - следующий или текущий элемент не действие.
	//  - текущий элемент действие с положительным результатом.
	//  - текущий элемент согласование с протокол разногласий и след. элемент действие подписание.
		
	ВозвращаемыйРезультат = Новый Структура;
	ВозвращаемыйРезультат.Вставить("СобытиеОбработано", Ложь);
	ВозвращаемыйРезультат.Вставить("ПереходВозможен", Ложь);
	
	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат ВозвращаемыйРезультат;
	КонецЕсли;
	
	Обработка = РегистрыСведений.ПроцессыОбработокОбъектов.ОбработкаПоПроцессу(
		ПроцессОбработки.Ссылка);
	Если Не ЗначениеЗаполнено(Обработка) Тогда
		Возврат ВозвращаемыйРезультат;
	КонецЕсли;
		
	ВозвращаемыйРезультат.СобытиеОбработано = Истина;
	
	Если Не СхемыПроцессовКлиентСервер.ЭтоДействиеСхемы(ТипыЭлементов[ПредыдущийЭлемент])
		Или Не СхемыПроцессовКлиентСервер.ЭтоДействиеСхемы(ТипыЭлементов[СледующийЭлемент]) Тогда
		
		ВозвращаемыйРезультат.ПереходВозможен = Истина;
		Возврат ВозвращаемыйРезультат;
	КонецЕсли;
		
	ПараметрыСхемы = Справочники.ПараметрыСхемДляОбработокОбъектов.ПараметрыПоСхеме(
		ПроцессОбработки.Схема);
	
	ДанныеПараметровСхемы = Справочники.ПараметрыСхемДляОбработокОбъектов.ДанныеПараметровСхемы(
		ПараметрыСхемы);
	ВидПредыдущегоДействия = ДанныеПараметровСхемы.НастройкиЭлементов[ПредыдущийЭлемент];
	ВидСледующегоДействия = ДанныеПараметровСхемы.НастройкиЭлементов[СледующийЭлемент];
	
	РеквизитыОбработки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Обработка, "Владелец, ДатаСоздания");
		
	ТекущиеДействия = ДействияСервер.ТекущиеДействияПредмета(
		РеквизитыОбработки.Владелец,
		ОбработкиОбъектов.ВидВладельцаОбработки(Обработка),
		РеквизитыОбработки.ДатаСоздания);
	ТекущиеДействия = ТекущиеДействия.Выбрать();
	
	ПредыдущееДействие = Неопределено;
	ПредыдущееДействиеСогласованиеВРежимЗамечаний = Ложь;
	СледующееДействие = Неопределено;
	Пока ТекущиеДействия.Следующий() Цикл
		Если ТекущиеДействия.ВидДействия = ВидПредыдущегоДействия Тогда
			ПредыдущееДействие = ТекущиеДействия.Действие;
			ПредыдущееДействиеСогласованиеВРежимЗамечаний = 
				ТекущиеДействия.СогласованиеВРежимеЗамечаний;
		ИначеЕсли ТекущиеДействия.ВидДействия = ВидСледующегоДействия Тогда
			СледующееДействие = ТекущиеДействия.Действие;
		КонецЕсли;	
	КонецЦикла;
		
	РезультатПредыдущегоДействия = 
		РегистрыСведений.РезультатыДействий.РезультатДействия(ПредыдущееДействие);
	ОтрицательныеРезультаты = РаботаСПроцессамиПоДействиям.ОтрицательныеРезультатыДействий();
	
	Если ПредыдущееДействиеСогласованиеВРежимЗамечаний 
		И РезультатПредыдущегоДействия = Перечисления.РезультатыСогласования.НеСогласовано
		И ЗначениеЗаполнено(СледующееДействие)
		И ТипЗнч(СледующееДействие) = Тип("СправочникСсылка.ДействияПодписания")
		И ДействияСервер.ДействиеЗавершеноОтрицательноИЕстьЗамечания(ПредыдущееДействие) Тогда
		
		ВозвращаемыйРезультат.ПереходВозможен = Истина;
		
	ИначеЕсли ОтрицательныеРезультаты.Найти(РезультатПредыдущегоДействия) <> Неопределено Тогда
		// Переход не возможен. ВозвращаемыйРезультат.ПереходВозможен = Ложь;
	Иначе
		ВозвращаемыйРезультат.ПереходВозможен = Истина;
	КонецЕсли;
	
	Возврат ВозвращаемыйРезультат;
	
КонецФункции

// Обрабатывает создание задач для элемента схемы действие.
// 
// Параметры:
// 	ИмяЭлемента - Строка - имя элемента схемы.
// 	ОбработчикСхемы - Структура - см. БизнесПроцессОбъект.КомплексныйПроцесс.ОбработчикСхемыПроцесса
// 	ПроцессОбработки - БизнесПроцессОбъект.КомплексныйПроцесс
// 
// Возвращаемое значение:
// 	Булево
//
Функция ОбработатьСозданиеЗадачДляЭлементаСхемыДействие(
	ИмяЭлемента, ОбработчикСхемы, ПроцессОбработки) Экспорт
		
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Обработка = РегистрыСведений.ПроцессыОбработокОбъектов.ОбработкаПоПроцессу(
		ПроцессОбработки.Ссылка);
	Если Не ЗначениеЗаполнено(Обработка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Действие = РаботаСПроцессамиПоОбработкамОбъектов.ДействиеПоИмениЭлементаСхемыОбработки(
		ИмяЭлемента, Обработка);
	
	// Пропускаем элементы схемы, для которых не сформированы действия при обработке.
	Если Не ЗначениеЗаполнено(Действие) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОжидатьЗавершения = Истина;
	Если ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
		ОжидатьЗавершения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "ОжидатьЗавершения");
	КонецЕсли;	
	
	Если ОбработкаОчередиЗаданийСервер.ОбработатьНачалоВыполненияДействияПроцессами(
		Действие, ИмяЭлемента, ОбработчикСхемы, ПроцессОбработки) Тогда
		
		Возврат Истина;
	КонецЕсли;
		
	НачатьТранзакцию();

	Попытка
	
		ЗаблокироватьДанныеДляРедактирования(Действие);
		
		РаботаСПроцессамиПоДействиям.ПрерватьПроцессыДействияПриПовторномЗапуске(Действие);
					
		ДействиеОбъект = Действие.ПолучитьОбъект();
		ДействиеСтрока = Строка(Действие);
		
		Попытка
			РезультатПодготовки = ДействияСервер.ПодготовитьДействиеКВыполнению(ДействиеОбъект);
		Исключение
			ТекстИсключения =НСтр(
				"ru = 'Не удалось перейти к выполнению действия ""%1"".
				|Причина: %2'",
				ОбщегоНазначения.КодОсновногоЯзыка());
				
			ВызватьИсключение СтрШаблон(ТекстИсключения,
				ДействиеСтрока, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())); 
			
		КонецПопытки;
		
		Если РезультатПодготовки = "НачатьВыполнение" Тогда
			
			Если ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияОзнакомления")
				И УстановитьЗадержкуНачалаВыполненияОзнакомления(Действие) Тогда
				
				// Это отложенное ознакомление        
				// ставим состояние «Отложенный запуск» действию в РС СостоянияДействий и более ничего не делаем. 
				
				ШаблонНаименования = НСтр("ru = 'Обработка действия ""%1""'",
					ОбщегоНазначения.КодОсновногоЯзыка());
				НаименованиеЗадачи = СтрШаблон(ШаблонНаименования, ДействиеОбъект.Ссылка);
				
				ЗадачаОбработкиЭлементаСхемы =
					БизнесПроцессы.КомплексныйПроцесс.СоздатьЗадачуОбработкиЭлементаСхемы(
						НаименованиеЗадачи, ПроцессОбработки.Ссылка);
				ПроцессОбработки.ДобавитьЗадачуОбработкиЭлемента(
					ИмяЭлемента, ЗадачаОбработкиЭлементаСхемы, ОбработчикСхемы);
				
				РегистрыСведений.СостоянияДействий.УстановитьСостояние(Действие, 
					Перечисления.СостоянияВыполненияДействий.ОтложенныйЗапуск);
				
			Иначе	
				
				Если ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияОзнакомления") И Не ОжидатьЗавершения Тогда
					
					СтартоватьДействиеОзнакомленияРеализация(Действие, ПроцессОбработки, ОжидатьЗавершения, ОбработчикСхемы, ИмяЭлемента);
					
					ОбработкаДействия = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
					ОбработкиОбъектов.ОбновитьОтметкиЗавершенностиОбработки(ОбработкаДействия);
					
				Иначе	// ОжидатьЗавершения  Истина
					
					Если ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда   
						
						СтартоватьДействиеОзнакомленияРеализация(Действие, ПроцессОбработки, ОжидатьЗавершения, ОбработчикСхемы, ИмяЭлемента);
						
					Иначе	
					
						ПараметрыСеанса.ОтключитьОбновлениеЗадач = Истина;
						
						ПроцессыПоДействию = РаботаСПроцессамиПоДействиям.СоздатьПроцессыПоДействию(
							ДействиеОбъект, ПроцессОбработки.Ссылка);
						
						Для Каждого ПроцессПоДействию Из ПроцессыПоДействию Цикл
							
							РаботаСПроцессамиПоДействиям.ЗапуститьПроцессПоДействию(Действие, ПроцессПоДействию);
							ПроцессОбработки.ДобавитьЗадачуОбработкиЭлемента(
								ИмяЭлемента, ПроцессПоДействию.ВедущаяЗадача, ОбработчикСхемы);
							
							ИнтеграцияЗадач.ОбновитьЗадачуПоИсточнику(ПроцессПоДействию.Ссылка);
							
						КонецЦикла;    
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;	
			
		Иначе
			
			ДействияСервер.ПропуститьДействие(Действие);
					
		КонецЕсли;	
		
		ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат Истина;	
		
КонецФункции  

// Стартует действие (тут уже есть служебная задача) 
// выполним служебную задачу и пойдем дальше. Не используем очередь заданий	
//
// Параметры:
// 	Действие - СправочникССылка.ДействияОзнакомления
//
Процедура СтартоватьДействиеОзнакомления(Действие) Экспорт
	
	ОжидатьЗавершения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "ОжидатьЗавершения");   
	
	ОбработкаДействия = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
	Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
	Событие.Обработка = ОбработкаДействия;
	Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.НачалоДействия;
	Событие.Действие = Действие;
	РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
	
	СколькоСоздано = Справочники.ДействияОзнакомления.ЗаполнитьРегистрУчастниковОзнакомленияИВернутьКоличество(Действие);
	
	Если СколькоСоздано <> 0 Тогда
		
		Если ОжидатьЗавершения Тогда    
			
			РегистрыСведений.СостоянияДействий.УстановитьСостояние(Действие, 
				Перечисления.СостоянияВыполненияДействий.Выполняется);	   
				
		Иначе		 
				
			РегистрыСведений.СостоянияДействий.УстановитьСостояние(Действие, 
				Перечисления.СостоянияВыполненияДействий.Завершено);
				
			Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет");
			Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Предмет) Тогда
				Делопроизводство.ЗаписатьСостояниеДокумента(
					Предмет,
					,
					Перечисления.СостоянияДокументов.ОзнакомлениеЗавершено,
					,
					Действие,
					Истина);
					
			ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда
					
				Период = ТекущаяДатаСеанса();	
				
				УправлениеМероприятиями.ЗаписатьСостояниеМероприятия(
					Предмет,
					Период,
					Перечисления.СостоянияМероприятий.СМатериаламиОзнакомились,
					Действие);
					
			КонецЕсли;	
				
			ОбработкаДействия = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
			Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
			Событие.Обработка = ОбработкаДействия;
			Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.ЗавершениеДействия;
			Событие.Действие = Действие;
			РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
				
			// выполним служебную задачу и пойдем дальше. Не используем очередь заданий	
			РаботаСПроцессамиПоОбработкамОбъектов.ПродолжитьВыполнениеОбработкиПослеЗавершенияОзнакомленияСОжиданием(Действие);
			
		КонецЕсли;	
			
	Иначе		
			
		РегистрыСведений.СостоянияДействий.УстановитьСостояние(Действие, 
			Перечисления.СостоянияВыполненияДействий.Пропущено);
			
		ОбработкаДействия = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
		Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
		Событие.Обработка = ОбработкаДействия;
		Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.ПропускДействия;
		Событие.Действие = Действие;
		РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);     
		
		// выполним служебную задачу и пойдем дальше. Не используем очередь заданий	
		РаботаСПроцессамиПоОбработкамОбъектов.ПродолжитьВыполнениеОбработкиПослеЗавершенияОзнакомленияСОжиданием(Действие);
			
	КонецЕсли;	
	

КонецПроцедуры	

// Устанавливает задержку начала выполнения действия.
//
// Параметры:
//  Действие - ОпределяемыйТип.ДействияОбъект - объект действие.
//  ПроцессПоДействию - ОпределяемыйТип.ПроцессДействия - процесс объект или процесс ссылка по действию.
//  ДатаОтсчета - Неопределено, Дата - дата отсчета относительной задержки выполнения.
//
Функция УстановитьЗадержкуНачалаВыполненияОзнакомления(Действие, ДатаОтсчета = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОтложенноеНачалоВыполненияДействий") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если (Не ЗначениеЗаполнено(Действие.ОтложенноеНачалоВыполнения)
			И Не ЗначениеЗаполнено(Действие.ОтложенноеВыполнениеДата))
		Или (ЗначениеЗаполнено(Действие.ОтложенноеВыполнениеДата) 
			И Действие.ОтложенноеВыполнениеДата < ТекущаяДатаСеанса()) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Действие.ОтложенноеВыполнениеДата) Тогда
		ДатаОтложенногоСтарта = Действие.ОтложенноеВыполнениеДата;
		
	ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда
		
		Если ЗначениеЗаполнено(ДатаОтсчета) Тогда
			ДатаОтложенногоСтарта = ДатаОтсчета;
		Иначе
			ДатаОтложенногоСтарта = ТекущаяДатаСеанса();
		КонецЕсли;
		ПараметрыТочногоСрока = ДействияСервер.ПараметрыДлительностиТочногоСрока();
		ПараметрыТочногоСрока.ДатаОтсчета = ДатаОтложенногоСтарта;
		ДниИЧасыЗадержки = ДействияКлиентСервер.ДниИЧасыЗадержкиПоСроку(Действие.ОтложенноеНачалоВыполнения);	
		ПараметрыТочногоСрока.Дни = ДниИЧасыЗадержки.ЗадержкаДни;
		ПараметрыТочногоСрока.Часы = ДниИЧасыЗадержки.ЗадержкаЧасы;
		ПараметрыТочногоСрока.ГрафикРаботы = ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы();
		
		ДатаОтложенногоСтарта = ДействияСервер.СрокИсполненияПоДлительности(ПараметрыТочногоСрока);
	Иначе
		Если ЗначениеЗаполнено(ДатаОтсчета) Тогда
			ДатаОтложенногоСтарта = ДатаОтсчета + Действие.ОтложенноеНачалоВыполнения;
		Иначе
			ДатаОтложенногоСтарта = ТекущаяДатаСеанса() + Действие.ОтложенноеНачалоВыполнения;
		КонецЕсли;
	КонецЕсли;
	
	Если ДатаОтложенногоСтарта < ТекущаяДатаСеанса() Тогда
		// В случае если дата уже прошла, то нужно стартануть процесс
		
		РегистрыСведений.НастройкиОтложенногоНачалаВыполненияДействий.Удалить(Действие.Ссылка);
		
		// стартовать действие - тут два сценария, либо уже есть служебная задача, либо нет.
		СтартоватьДействиеОзнакомления(Действие.Ссылка);
		
		Возврат Истина;
		
	КонецЕсли;
	
	РегистрыСведений.НастройкиОтложенногоНачалаВыполненияДействий.Добавить(
		Действие.Ссылка,
		ДатаОтложенногоСтарта);
		
	Возврат Истина;	
	
КонецФункции	

// Обрабатывает проверку условия схемы обработки.
// 
// Параметры:
// 	ИмяУсловия - Строка - имя условия в схеме.
// 	Схема - ГрафическаяСхема
//  ТипыЭлементов - Соответствие
//   * Ключ - Строка - Имя элемента
//   * Значение - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
// 	ПроцессОбработки - БизнесПроцессОбъект.КомплексныйПроцесс
// 	 
// Возвращаемое значение:
// 	Структура - Описание:
//   * РезультатПроверки - Булево - результат условия.
//   * Обработано - Булево - признак того, что условие было обработано в текущей функции.
//
Функция ОбработатьПроверкуУсловияСхемы(ИмяУсловия, Схема, ТипыЭлементов, ПроцессОбработки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатОбработки = Новый Структура;
	РезультатОбработки.Вставить("Обработано", Ложь);
	РезультатОбработки.Вставить("РезультатПроверки", Ложь);
	
	Если Не РаботаСПроцессамиПоОбработкамОбъектов.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат РезультатОбработки;
	КонецЕсли;
	
	Обработка = РегистрыСведений.ПроцессыОбработокОбъектов.ОбработкаПоПроцессу(
		ПроцессОбработки.Ссылка);
	Если Не ЗначениеЗаполнено(Обработка) Тогда
		Возврат РезультатОбработки;
	КонецЕсли;
	
	РезультатОбработки.Обработано = Истина;
	
	ПараметрыСхемы = Справочники.ПараметрыСхемДляОбработокОбъектов.ПараметрыПоСхеме(
		ПроцессОбработки.Схема);
	
	ДанныеПараметровСхемы = Справочники.ПараметрыСхемДляОбработокОбъектов.ДанныеПараметровСхемы(
		ПараметрыСхемы);
	
	НастройкаУсловия = ДанныеПараметровСхемы.НастройкиЭлементов[ИмяУсловия];
	
	ТипыПредшествующихЭлементов = Новый Соответствие();
	ТипыПредшествующихЭлементов[Перечисления.ТипыЭлементовСхемПроцессов.Действие] = Истина;
	
	ИменаПредшествующихДействий = СхемыПроцессовКлиентСервер.ИменаПредшествующихЭлементовВСхеме(
		Схема, ТипыЭлементов, ИмяУсловия, ТипыПредшествующихЭлементов);
	
	ВидыДействияИИмена = Новый Соответствие();
	Для Каждого ИмяДействия Из ИменаПредшествующихДействий Цикл
		ВидыДействияИИмена[ДанныеПараметровСхемы.НастройкиЭлементов[ИмяДействия]] = ИмяДействия; 
	КонецЦикла;
	
	РеквизитыОбработки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Обработка, "Владелец, ДатаСоздания");
		
	ОбъектОбработки = РеквизитыОбработки.Владелец;
		
	ТекущиеДействия = ДействияСервер.ТекущиеДействияПредмета(
		РеквизитыОбработки.Владелец,
		ОбработкиОбъектов.ВидВладельцаОбработки(Обработка),
		РеквизитыОбработки.ДатаСоздания);
	ТекущиеДействия = ТекущиеДействия.Выбрать();
	
	ДействияИИмена = Новый Соответствие();
	Пока ТекущиеДействия.Следующий() Цикл
		ИмяДействия = ВидыДействияИИмена[ТекущиеДействия.ВидДействия];
		Если ЗначениеЗаполнено(ИмяДействия = Неопределено) Тогда
			ДействияИИмена[ИмяДействия] = ТекущиеДействия.Действие;
		КонецЕсли; 		
	КонецЦикла;
	
	Попытка
		РезультатОбработки.РезультатПроверки = 
			РаботаСПроцессамиПоОбработкамОбъектов.РезультатУсловияСхемы(
			НастройкаУсловия, ДействияИИмена, ОбъектОбработки);
	Исключение
		Инфо = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Проверка условия схемы обработки'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,
			Обработка,
			ПодробноеПредставлениеОшибки(Инфо));
			
		ТекстИсключения = СтрШаблон(
			НСтр("ru = 'При проверке условия ""%1"" схемы возникла ошибка:
				|%2
				|Обратитесь к администратору.'"),
			ИмяУсловия, 
			Инфо.Описание);
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
		
	Возврат РезультатОбработки;
	
КонецФункции

// Обрабатывает выполнение скрипта
// 
// Параметры:
//  ИмяЭлемента - Строка - имя элемента в схеме.
//  ПроцессОбработки - БизнесПроцессОбъект.КомплексныйПроцесс
// 
// Возвращаемое значение:
//  Булево - признак того, что выполнение скрипта было обработано в текущей функции.
//  
Функция ОбработатьВыполнениеСкриптаСхемы(ИмяЭлемента, ПроцессОбработки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Обработка = РегистрыСведений.ПроцессыОбработокОбъектов.ОбработкаПоПроцессу(
		ПроцессОбработки.Ссылка);
	Если Не ЗначениеЗаполнено(Обработка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыСхемы = Справочники.ПараметрыСхемДляОбработокОбъектов.ПараметрыПоСхеме(
		ПроцессОбработки.Схема);
	
	ДанныеПараметровСхемы = Справочники.ПараметрыСхемДляОбработокОбъектов.ДанныеПараметровСхемы(
		ПараметрыСхемы);
	
	Скрипт = ДанныеПараметровСхемы.НастройкиЭлементов[ИмяЭлемента];
	
	Попытка
		РаботаСПроцессамиПоОбработкамОбъектов.ВыполнитьСкриптСхемы(Скрипт, Обработка);
	Исключение
		Инфо = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Выполнение скрипта схемы обработки'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,
			Обработка,
			ПодробноеПредставлениеОшибки(Инфо));
			
		ТекстИсключения = СтрШаблон(
			НСтр("ru = 'При выполнения скрипта ""%1"" схемы возникла ошибка:
				|%2
				|Обратитесь к администратору.'"),
			ИмяЭлемента, 
			Инфо.Описание);
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Обрабатывает проверку прав участников процесса на предметы.
// 
// Параметры:
//  ПроцессОбработки - БизнесПроцессОбъект.КомплексныйПроцесс
// 
// Возвращаемое значение:
//  Булево - признак того, что проверка была обработана в текущей функции.
//
Функция ОбработатьПроверкуПраваУчастниковПроцессаНаПредметы(ПроцессОбработки) Экспорт
	
	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Обработка = РегистрыСведений.ПроцессыОбработокОбъектов.ОбработкаПоПроцессу(
		ПроцессОбработки.Ссылка);
	Если Не ЗначениеЗаполнено(Обработка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка выполняется на стороне обработки объекта.
	// Поэтому тут только отключаем стандартную проверку прав при комплексном процессе.
	Возврат Истина;
	
КонецФункции

// Обрабатывает изменение состояния процесса обработки, находящегося в иерархии других процессов
// (когда обработка предмета запускается из комплексного процесса).
//
// Параметры:
//  ПроцессОбработки - БизнесПроцессСсылка - ссылка на процесс, изменение состояния которого выполняется. 
//
// Возвращаемое значение:
//  Булево - признак того, что изменение состояния процесса обработано.
//
Функция ОбработатьИзменениеСостоянияПроцессаОбработкиВИерархии(ПроцессОбработки, НовоеСостояние) Экспорт
	
	// Обрабатываем особым образом изменение процесса обработки, подчиненного вышестоящему
	// комплексному процессу.
	
	Обработка = РегистрыСведений.ПроцессыОбработокОбъектов.ОбработкаПоПроцессу(ПроцессОбработки);
	Если Не ЗначениеЗаполнено(Обработка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПредметОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Обработка, "Владелец");
	
	Если НовоеСостояние = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
		
		КорневойПроцесс = БизнесПроцессыИЗадачиСервер.КорневойВедущийПроцесс(ПроцессОбработки);
		ПричинаПрерывания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			КорневойПроцесс, "ПричинаПрерывания");
		
		ОбработкиОбъектов.ПрерватьОбработкуОбъекта(ПредметОбработки, ПричинаПрерывания);
		
	Иначе
		
		СостояниеОбработки = Перечисления.СостоянияОбработкиОбъектов.ПустаяСсылка();
		Если НовоеСостояние = Перечисления.СостоянияБизнесПроцессов.Активен Тогда
			СостояниеОбработки = Перечисления.СостоянияОбработкиОбъектов.Выполняется;
		ИначеЕсли НовоеСостояние = Перечисления.СостоянияБизнесПроцессов.Остановлен Тогда
			СостояниеОбработки = Перечисления.СостоянияОбработкиОбъектов.Остановлена;
		КонецЕсли;
		
		ОбработкиОбъектов.ОстановитьПродолжитьОбработкуОбъекта(
			ПредметОбработки, СостояниеОбработки);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СобытияЗадачПроцессов

// Обрабатывает получение формы служебной задачи.
//
// Параметры:
//  ВидФормы - Строка
//  Параметры - Структура
//  ВыбраннаяФорма - ФормаКлиентскогоПриложения
//  СтандартнаяОбработка - Булево
//
// Возвращаемое значение:
//  Булево - признак того, что получение было обработано.
//
Функция ОбработатьПолучениеФормыЗадачи(
	ВидФормы, Параметры, ВыбраннаяФорма, СтандартнаяОбработка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ВидФормы <> "ФормаОбъекта" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не Параметры.Свойство("Ключ") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Параметры.Ключ, "ТочкаМаршрута, БизнесПроцесс");
	
	Если РеквизитыЗадачи.ТочкаМаршрута <> 
		БизнесПроцессы.КомплексныйПроцесс.ТочкиМаршрута.ВыполнитьДействияПроцессаПоСхеме Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Обработка = РегистрыСведений.ПроцессыОбработокОбъектов.ОбработкаПоПроцессу(
		РеквизитыЗадачи.БизнесПроцесс);
	Если Не ЗначениеЗаполнено(Обработка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДочерниеБизнесПроцессы.ДочернийПроцесс
		|ИЗ
		|	РегистрСведений.ДочерниеБизнесПроцессы КАК ДочерниеБизнесПроцессы
		|ГДЕ
		|	ДочерниеБизнесПроцессы.СвязующаяЗадача = &ЗадачаПроцесса";
	Запрос.УстановитьПараметр("ЗадачаПроцесса", Параметры.Ключ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Действие = РегистрыСведений.ПроцессыДействий.ДействиеПоПроцессу(Выборка.ДочернийПроцесс);
		Если Действие <> Неопределено Тогда
			
			Параметры.Ключ = Выборка.ДочернийПроцесс;
			ВыбраннаяФорма = Метаданные.ОбщиеФормы.ПроцессПоДействию;
			СтандартнаяОбработка = Ложь;
			
			Возврат Истина;
			
		КонецЕсли;
	КонецЕсли;
	
	ВыбраннаяФорма = Метаданные.Задачи.ЗадачаИсполнителя.Формы.ПодробнаяФормаЗадачи;
	СтандартнаяОбработка = Ложь;
	
	Возврат Истина;
	
КонецФункции

// Обрабатывает изменение состояния вложенных процессов.
//
// Параметры:
//  ВедущаяЗадача - ЗадачаСсылка.ЗадачаИсполнителя - задача, под которой меняются состояния вложенных процессов.
//
// Возвращаемое значение:
//  Булево - признак того, что изменение состояния было обработано.
//
Функция ОбработатьИзменениеСостояниеВложенныхПроцессов(ВедущаяЗадача) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если задача относится к процессу, исполняющему обработку, то
	// считаем, что изменение состояния вложенных процессов будет обработано
	// при изменение соответствующих действий.
	
	ПроцессЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедущаяЗадача, "БизнесПроцесс");
	
	Обработка = РегистрыСведений.ПроцессыОбработокОбъектов.ОбработкаПоПроцессу(ПроцессЗадачи);
	Если Не ЗначениеЗаполнено(Обработка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Обрабатывает изменение пометки удаления вложенных процессов.
//
// Параметры:
//  ВедущаяЗадача - ЗадачаСсылка.ЗадачаИсполнителя - задача, под которой меняются пометки удаления вложенных процессов.
//
// Возвращаемое значение:
//  Булево - признак того, что изменение пометок удаления было обработано.
//
Функция ОбработатьПометкуУдаленияВложенныхПроцессов(ВедущаяЗадача) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если задача относится к процессу, исполняющему обработку, то
	// считаем, что изменение пометки удаления вложенных процессов будет выполнено
	// при изменение соответствующих действий.
	
	ПроцессЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедущаяЗадача, "БизнесПроцесс");
	
	Обработка = РегистрыСведений.ПроцессыОбработокОбъектов.ОбработкаПоПроцессу(ПроцессЗадачи);
	Если Не ЗначениеЗаполнено(Обработка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СобытияПроверкиСхемыПриСменеРеквизитовОбъекта

// Вызывается при проверке возможности заполнения действий обработки. 
// Установит Отказ  в Истина при невозможности.
// 
// Параметры:
//  Предмет - СправочникССылка.ДокументыПредприятия
//  ОбработкаОбъекта - СправочникСсылка.ОбработкиОбъектов
//  Отказ - Булево
//  ТекстОшибки - Строка
Процедура ПриПроверкеВозможностиЗаполненияДействийОбработки(
	Предмет, ОбработкаОбъекта, Отказ, ТекстОшибки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = РаботаСПроцессамиПоОбработкамОбъектов.ПараметрыСхемыДляОбработкиОбъекта(ОбработкаОбъекта);
	ДанныеПараметровСхемы = Справочники.ПараметрыСхемДляОбработокОбъектов.ДанныеПараметровСхемы(Результат.ПараметрыСхемы);
	
	Если ДанныеПараметровСхемы.АвтоформируемаяСхема = Истина Тогда // простая схема, нет условий
	    Возврат;
	КонецЕсли;
	
	ПроцессОбработки = РегистрыСведений.ПроцессыОбработокОбъектов.ПроцессОбработкиОбъекта(ОбработкаОбъекта);	

	// Из нового регистра берем срез последних условий с результатами.
	РезультатыУсловий = РегистрыСведений.РезультатыВыполненияУсловийСхемПроцессов.РезультатыВыполненияУсловий(
		ПроцессОбработки);	

	Если РезультатыУсловий.Количество() = 0 Тогда
		Возврат; // нет пройденных условий.
	КонецЕсли;	
	
	ПроцессОбъект = ПроцессОбработки.ПолучитьОбъект();
	ОбработчикСхема = ПроцессОбъект.ОбработчикСхемыПроцесса();
	
	Для Каждого Описание Из РезультатыУсловий Цикл
		
		ИмяЭлемента = Описание.ИмяЭлемента;
		РезультатУсловияСтарый = Описание.Результат;
		
		РезультатУсловияНовый = ПроцессОбъект.РезультатУсловияСхемыПроцесса(
			ИмяЭлемента, ОбработчикСхема);
			
		Если РезультатУсловияНовый <> РезультатУсловияСтарый Тогда
			Отказ = Истина;
			ТекстОшибки = НСтр("ru = 'Изменение реквизита сделает некорректной запущенную обработку. 
			|Прервите обработку, измените реквизит и запустите ее заново.'");
			Прервать;
		КонецЕсли;	 	
		
	КонецЦикла;	
	
КонецПроцедуры	

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Стартует действие ознакомления. Внутри создает служебную задачу, если ОжидатьЗавершения Истина 
//
Процедура СтартоватьДействиеОзнакомленияРеализация(Действие, ПроцессОбработки, ОжидатьЗавершения, 
	ОбработчикСхемы, ИмяЭлемента)
	
	Если Не ОжидатьЗавершения Тогда
		
		ОбработкаДействия = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
		Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
		Событие.Обработка = ОбработкаДействия;
		Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.НачалоДействия;
		Событие.Действие = Действие;
		РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
		
		СколькоСоздано = Справочники.ДействияОзнакомления.ЗаполнитьРегистрУчастниковОзнакомленияИВернутьКоличество(Действие);
		
		Если СколькоСоздано <> 0 Тогда
			
			РегистрыСведений.СостоянияДействий.УстановитьСостояние(Действие, 
				Перечисления.СостоянияВыполненияДействий.Завершено);
				
			Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет");
			Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Предмет) Тогда
				Делопроизводство.ЗаписатьСостояниеДокумента(
					Предмет,
					,
					Перечисления.СостоянияДокументов.ОзнакомлениеЗавершено,
					,
					Действие,
					Истина);
					
			ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда
					
				Период = ТекущаяДатаСеанса();	
				
				УправлениеМероприятиями.ЗаписатьСостояниеМероприятия(
					Предмет,
					Период,
					Перечисления.СостоянияМероприятий.СМатериаламиОзнакомились,
					Действие);
					
			КонецЕсли;	
				
			ОбработкаДействия = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
			Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
			Событие.Обработка = ОбработкаДействия;
			Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.ЗавершениеДействия;
			Событие.Действие = Действие;
			РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
				
		Иначе		
				
			РегистрыСведений.СостоянияДействий.УстановитьСостояние(Действие, 
				Перечисления.СостоянияВыполненияДействий.Пропущено); 
				
			ОбработкаДействия = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
			Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
			Событие.Обработка = ОбработкаДействия;
			Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.ПропускДействия;
			Событие.Действие = Действие;
			РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
				
		КонецЕсли;	
		
	Иначе // ОжидатьЗавершения Истина
		
		ОбработкаДействия = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
		Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
		Событие.Обработка = ОбработкаДействия;
		Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.НачалоДействия;
		Событие.Действие = Действие;
		РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
		
		СколькоСоздано = Справочники.ДействияОзнакомления.ЗаполнитьРегистрУчастниковОзнакомленияИВернутьКоличество(Действие);
		
		Если СколькоСоздано <> 0 Тогда
			
			ШаблонНаименования = НСтр("ru = 'Обработка действия ""%1""'",
				ОбщегоНазначения.КодОсновногоЯзыка());
			НаименованиеЗадачи = СтрШаблон(ШаблонНаименования, Действие);
			
			ЗадачаОбработкиЭлементаСхемы =
				БизнесПроцессы.КомплексныйПроцесс.СоздатьЗадачуОбработкиЭлементаСхемы(
					НаименованиеЗадачи, ПроцессОбработки.Ссылка);
			ПроцессОбработки.ДобавитьЗадачуОбработкиЭлемента(
				ИмяЭлемента, ЗадачаОбработкиЭлементаСхемы, ОбработчикСхемы);
				
			РегистрыСведений.СостоянияДействий.УстановитьСостояние(Действие, 
				Перечисления.СостоянияВыполненияДействий.Выполняется);	
				
		Иначе		
				
			РегистрыСведений.СостоянияДействий.УстановитьСостояние(Действие, 
				Перечисления.СостоянияВыполненияДействий.Пропущено);
				
			ОбработкаДействия = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
			Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
			Событие.Обработка = ОбработкаДействия;
			Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.ПропускДействия;
			Событие.Действие = Действие;
			РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
				
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти