
#Если Сервер Или Клиент Тогда

#Область ПрограммныйИнтерфейс

// Возвращает имя события для записи в журнал регистрации по push уведомлениям.
// 
// Возвращаемое значение:
//  Строка - Имя события для записи в журнал регистрации для push уведомлений.
//
Функция ИмяСобытияPushУведомления() Экспорт
	
#Если Клиент Тогда
	КодЯзыка = ОбщегоНазначенияКлиент.КодОсновногоЯзыка();
#Иначе
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
#КонецЕсли

	ИмяСобытия = НСтр("ru = 'Push-уведомления'", КодЯзыка);
	
	Возврат ИмяСобытия;

КонецФункции

//Распределяет html текст по экрану мобильного устройства, если еще не распределен
// Параметры:
//  ТекстHTML - Строка - Исходный HTML текст
//  УвеличиватьМасштаб - Булево - Разрешено ли масштабировать текст
//
Процедура АдаптироватьHtmlПодЭкранМобильногоПриНеобходимости(ТекстHTML,
	УвеличиватьМасштаб = Истина) Экспорт
	
	Если (СтрНайти(ТекстHTML, "<meta name=""viewport"" content=""width=device-width,") <> 0) Тогда 
		Возврат;
	КонецЕсли;
	
	ИсходныйТекстHTML = ТекстHTML;
	
	ТекстДоОткрТэгаHead = Лев(ТекстHTML, СтрНайти(ТекстHTML, "<head") + СтрДлина("<head") - 1);
	
	ИсходныйТекстHTML = Прав(ИсходныйТекстHTML, СтрДлина(ТекстHTML) - СтрНайти(ТекстHTML, "<head")
		- СтрДлина("<head") + 1);
	
	ТекстДоЗакрТэгаHead = Лев(ИсходныйТекстHTML, СтрНайти(ИсходныйТекстHTML, ">"));
	
	РезультирующийТекстHtml = Прав(ИсходныйТекстHTML,
		СтрДлина(ИсходныйТекстHTML) - СтрНайти(ИсходныйТекстHTML,
		">"));
	
	АлгоритмВыравниванияПоШирине = СтрШаблон("%1 initial-scale=1 %2"" />",
		"<meta name=""viewport"" content=""viewport-fit=cover, width=device-width,",
		?(УвеличиватьМасштаб, "", ", maximum-scale = 1"));
	
	ТекстHTML = СтрШаблон("%1%2%3%4", ТекстДоОткрТэгаHead, ТекстДоЗакрТэгаHead,
		АлгоритмВыравниванияПоШирине,
		РезультирующийТекстHtml);

КонецПроцедуры

// Возвращает Истина, если клиентское приложение является мобильным клиентом.
//
// Возвращаемое значение:
//  Булево - если нет клиентского приложения, возвращается Ложь.
//
Функция ЭтоМобильныйКлиент() Экспорт
	
#Если МобильныйКлиент Тогда
	Возврат Истина;
#ИначеЕсли Сервер Тогда
	Возврат ПараметрыСеанса.ЭтоМобильныйКлиент;
#Иначе
	Возврат Ложь;
#КонецЕсли
	
КонецФункции

//Возвращает признак того, что приложение запущено на моб. устройстве с большим экраном
//
// Возвращаемое значение:
// Булево - признак того, что устройство имеет большой экран 
Функция ЭтоМобильныйСБольшимЭкраном() Экспорт
	
	Если Не ЭтоМобильныйКлиент() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыЭкрана = ПараметрыЭкрана();
	
	Если ПараметрыЭкрана.Количество() = 0 Тогда
		Диагональ = 7;
	Иначе
		ПараметрыПервогоЭкрана = ПараметрыЭкрана[0];
		Диагональ = ПараметрыПервогоЭкрана.Диагональ;
	КонецЕсли;

	ЭтоМаленькийЭкран = Диагональ <= 4.9;
	
	Если ЭтоМаленькийЭкран Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если (Диагональ > 4.9 И Диагональ < 7) И ПараметрыПервогоЭкрана.ПортретнаяОриентация Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;

КонецФункции

// Возвращает массив с структурами параметров каждого экрана устройства.
// 
// Возвращаемое значение:
//  Массив - Массив параметров всех экранов мобильного устройства.
//
Функция ПараметрыЭкрана() Экспорт

	Инфо = ПолучитьИнформациюЭкрановКлиента();

	ДанныеОбЭкранах = Новый Массив();

	Если Не Инфо = Неопределено Тогда

		Для Каждого ДанныеОбЭкране Из Инфо Цикл

			ПараметрыЭкрана = Новый Структура();
			ПараметрыЭкрана.Вставить("Ширина"    , ДанныеОбЭкране.Ширина);
			ПараметрыЭкрана.Вставить("Высота"    , ДанныеОбЭкране.Высота);
			ПараметрыЭкрана.Вставить("Разрешение", ДанныеОбЭкране.DPI);
			ПараметрыЭкрана.Вставить("СоотношениеСторон"   , ДанныеОбЭкране.Высота / ДанныеОбЭкране.Ширина);
			ПараметрыЭкрана.Вставить("ПортретнаяОриентация", ДанныеОбЭкране.Высота > ДанныеОбЭкране.Ширина);
			ПараметрыЭкрана.Вставить("Диагональ", 
				Окр(Sqrt(Pow(ДанныеОбЭкране.Ширина,2) + Pow(ДанныеОбЭкране.Высота,2)) / ДанныеОбЭкране.DPI, 0));

			ДанныеОбЭкранах.Добавить(ПараметрыЭкрана);

		КонецЦикла;

	КонецЕсли;

	Возврат ДанныеОбЭкранах;

КонецФункции

// Возвращает пустую структуру, необходимую для записи в регистр сведений информации о мобильном клиенте.
// 
// Возвращаемое значение:
//  Структура - Пустая структура, содержащая информацию о мобильном клиенте с ключами:
//   	* ВерсияПриложенияКлиента					- Строка - Версия платформы 1С:Предприятия 8 (клиента).
//   	* ВерсияПриложенияСервера					- Строка - Версия платформы 1С:Предприятия 8 (сервера).
//   	* ВерсияОСКлиента							- Строка - Версия операционной системы (клиента).
//   	* ВерсияОССервера							- Строка - Версия операционной системы (сервера).
//   	* ИдентификаторКлиента						- УникальныйИдентификатор - Уникальный идентификатор клиента
//														(одинаковый как на Клиенте, так и на Сервере).
//		* ИдентификаторПодписчикаУведомления		- ИдентификаторПодписчикаДоставляемыхУведомлений -
//														Идентификатор подписчика уведомлений текущего моб. приложения;
//   	* ОперативнаяПамятьКлиента					- Число - Размер оперативной памяти моб. клиента;
//   	* ОперативнаяПамятьСервера					- Число - Размер оперативной памяти сервера;
//   	* ТипПлатформы								- ТипПлатформы - Тип используемой платформы;
//
Функция НовыйСведенияОКлиенте() Экспорт

	СведенияОМобильномКлиенте = Новый Структура;
	СведенияОМобильномКлиенте.Вставить("ВерсияПриложенияКлиента");
	СведенияОМобильномКлиенте.Вставить("ВерсияПриложенияСервера");
	СведенияОМобильномКлиенте.Вставить("ВерсияОСКлиента");
	СведенияОМобильномКлиенте.Вставить("ВерсияОССервера");
	СведенияОМобильномКлиенте.Вставить("ИдентификаторКлиента");
	СведенияОМобильномКлиенте.Вставить("ИдентификаторПодписчикаУведомления");
	СведенияОМобильномКлиенте.Вставить("ОперативнаяПамятьКлиента");
	СведенияОМобильномКлиенте.Вставить("ОперативнаяПамятьСервера");
	СведенияОМобильномКлиенте.Вставить("ТипПлатформы");
	
	//@skip-check constructor-function-return-section
	Возврат СведенияОМобильномКлиенте;

КонецФункции

//Возвращает признак того, что приложение запущено на моб. устройстве в портретном режиме экрана
//
// Возвращаемое значение:
// Булево - признак того, что устройство в портретном режиме
//
Функция ЭтоПортретныйРежим() Экспорт
	
	ПараметрыЭкрана = ОбщегоНазначенияКлиентСервер.ПараметрыЭкранаУстройства();
	
	Возврат ПараметрыЭкрана.Портрет;
	
КонецФункции

#Область ОформлениеЭлементов
// Задает свойства для акцентной кнопки на мобильном клиенте.
//
// Параметры:
//  Кнопка - КнопкаФормы - Кнопка для которой необходимо установить свойства;
//	ЭлементыСтиля - Структура - Элементы стиля моб.клиента
//
Процедура ОформитьАкцентнуюКнопку(Кнопка, ЭлементыСтиля) Экспорт
	
	Если Кнопка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Кнопка) <> Тип("КнопкаФормы") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЭлементыСтиля) Тогда
		Возврат;
	КонецЕсли; 
	
	ОформитьБазовуюКнопку(Кнопка);
	Кнопка.Высота = 2;
	
	Кнопка.Шрифт = ЭлементыСтиля.ШрифтАкцентнойКнопки;
	Кнопка.ЦветТекста = ЭлементыСтиля.ЦветТекстаАкцентнойКнопки;
	
	Кнопка.ЦветФона = ЭлементыСтиля.ЦветАкцента;
	Кнопка.ЦветРамки = ЭлементыСтиля.ЦветАкцента;
	
	Кнопка.Отображение = ОтображениеКнопки.Текст;

КонецПроцедуры

// Задает свойства для дополнительной кнопки на мобильном клиенте.
//
// Параметры:
//  ЭлементыСтиля - Структура - Элементы стиля МК
//  Кнопка - КнопкаФормы - элемент формы типа "КнопкаФормы"
//  ПараметрыЭлемента - Структура - доп. параметры для кнопки
//
Процедура ОформитьДополнительнуюКнопку(ЭлементыСтиля, Кнопка, ПараметрыЭлемента = Неопределено) Экспорт
	
	Если Кнопка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Кнопка) <> Тип("КнопкаФормы") Тогда
		Возврат;
	КонецЕсли;

	Если ПараметрыЭлемента = Неопределено Тогда
		Кнопка.Высота = 2;
		Кнопка.Отображение = ОтображениеКнопки.Картинка;
		Кнопка.РастягиватьПоГоризонтали = Истина;
	Иначе
		Кнопка.Высота = ПараметрыЭлемента.Высота;
		Кнопка.Отображение = ПараметрыЭлемента.ОтображениеКнопки;
		Кнопка.РастягиватьПоГоризонтали = ПараметрыЭлемента.РастягиватьПоГоризонтали;
	КонецЕсли;

	ОформитьБазовуюКнопку(Кнопка);

	Кнопка.Шрифт = ЭлементыСтиля.ШрифтАкцентнойКнопки;

	Кнопка.ЦветТекста = WebЦвета.Черный;
		Кнопка.ЦветФона = ЭлементыСтиля.ЦветДополнительнойКнопки;
	
	Кнопка.ЦветРамки = ЭлементыСтиля.ЦветДополнительнойКнопки;

КонецПроцедуры

// Задает свойства для кнопки в соответствии с ее состоянием на мобильном клиенте.
//
// Параметры:
//  ЭлементыСтиля - Структура - Закэшированные элементы стиля
//  Кнопка - КнопкаФормы - Кнопка для которой необходимо установить свойства
//  Активная - Булево - Определяет активность кнопки;
//
Процедура ОформитьДополнительнуюКнопкуПоСостоянию(ЭлементыСтиля, Кнопка, Активная) Экспорт
	
	Если Кнопка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Кнопка) <> Тип("КнопкаФормы") Тогда
		Возврат;
	КонецЕсли;
	
	ОформитьПроизвольныйЭлементПоСостоянию(ЭлементыСтиля, Кнопка, Активная)

КонецПроцедуры

// Задает свойства для элемента формы.
//
// Параметры:
//  ЭлементыСтиля - Структура - Закэшированные элементы стиля
//  Элемент - ПолеФормы - Кнопка для которой необходимо установить свойства
//  Активность - Булево - Определяет активность элемента;
//
Процедура ОформитьПроизвольныйЭлементПоСостоянию(ЭлементыСтиля, Элемент, Активность) Экспорт
	
	Элемент.Шрифт = ЭлементыСтиля.ШрифтДополнительнойКнопки;
	Элемент.ЦветТекста = WebЦвета.Черный;
	
	Элемент.ЦветФона = ?(Активность,
		ЭлементыСтиля.ЦветАктивнойДополнительнойКнопки,
		ЭлементыСтиля.ЦветДополнительнойКнопки);

	Элемент.ЦветРамки= ?(Активность,
		ЭлементыСтиля.ЦветАктивнойДополнительнойКнопки,
		ЭлементыСтиля.ЦветДополнительнойКнопки);
	
КонецПроцедуры

// Задает свойства для кнопки сворачиваемой группы в соответствии с ее состоянием на мобильном клиенте.
//
// Параметры:
//  ЭлементыСтиля - Структура - Структура элементов стиля для моб. клиента
//  Кнопка - КнопкаФормы - Кнопка для которой необходимо установить свойства;
//  Раскрыта - Булево - Признак состояния группы (раскрыта\свернута);
//  ИзменитьОсновныеСвойства -	Булево - нужно ли менять отображение и растягивание кнопки
//  							или оставить как на форме;
//
Процедура ОформитьКнопкуСворачиваемойГруппы(ЭлементыСтиля,
	Кнопка,
	Раскрыта,
	ИзменитьОсновныеСвойства = Истина) Экспорт

	Если Кнопка = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Кнопка) <> Тип("КнопкаФормы") Тогда
		Возврат;
	КонецЕсли;
	
	Если ИзменитьОсновныеСвойства Тогда
		Кнопка.РастягиватьПоГоризонтали = Ложь;
		Кнопка.Отображение = ОтображениеКнопки.Картинка;
	КонецЕсли;

	Если Раскрыта Тогда
		Кнопка.Картинка = БиблиотекаКартинок.СтрелкаВниз;
	Иначе
		Кнопка.Картинка = БиблиотекаКартинок.СтрелкаВверх;
	КонецЕсли;

	ОформитьДополнительнуюКнопкуПоСостоянию(ЭлементыСтиля, Кнопка, Раскрыта);

КонецПроцедуры

// Задает свойства для кнопки, которая находится в шапке на мобильном клиенте.
//
// Параметры:
//  ЭлементыСтиля - Структура - Структуру всех элементов стиля для моб. клиента
//  Кнопка - КнопкаФормы - Кнопка для которой необходимо установить свойства;
//  ОтображениеКнопкиТекстом - Булево - отображать кнопку с текстом или с картинкой;
//  Активная - Булево - Определяет активность кнопки;
//
Процедура ОформитьКнопкуФильтра(
	ЭлементыСтиля, Кнопка, ОтображениеКнопкиТекстом = Ложь, Активная = Ложь) Экспорт
	
	Если Кнопка = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Кнопка) <> Тип("КнопкаФормы") Тогда
		Возврат;
	КонецЕсли;

	ОформитьДополнительнуюКнопку(ЭлементыСтиля, Кнопка);
	ОформитьДополнительнуюКнопкуПоСостоянию(ЭлементыСтиля, Кнопка, Активная);
	
	Если ОтображениеКнопкиТекстом Тогда
		Кнопка.Отображение = ОтображениеКнопки.Текст;
	Иначе
		Кнопка.Отображение = ОтображениеКнопки.Картинка;
	КонецЕсли;

	Кнопка.Высота = 1;

КонецПроцедуры

// Задает новую оптимальную высоту для дополнительной (вложения, получатели и т.п.) таблицы на мобильном клиенте.
//
// Параметры:
//  Таблица - ПолеФормы - Элемент - Представление таблицы на форме;
//  КоличествоЭлементов - Число - Количество элементов в таблице;
//
Процедура УстановитьНовуюВысотуДополнительнойТаблицы(Таблица, КоличествоЭлементов) Экспорт

	Если КоличествоЭлементов = 0 Тогда
		Возврат;
	КонецЕсли;

	Если Не Таблица.Видимость Тогда
		Возврат;
	КонецЕсли;

	НоваяВысотаТаблицы = ?(КоличествоЭлементов <= 3, КоличествоЭлементов, 3);

	Если (КоличествоЭлементов > 2) Тогда
		Таблица.ВариантУправленияВысотой = ВариантУправленияВысотойТаблицы.ПоСодержимому;
		Таблица.АвтоМаксимальнаяВысота = Ложь;
		Таблица.АвтоМаксимальнаяВысотаВСтрокахТаблицы = Ложь;

		Таблица.ВысотаВСтрокахТаблицы = НоваяВысотаТаблицы;
		Таблица.МаксимальнаяВысотаВСтрокахТаблицы = НоваяВысотаТаблицы;
		Таблица.Высота = НоваяВысотаТаблицы;
		Таблица.МаксимальнаяВысота = НоваяВысотаТаблицы;
	Иначе
		УстановитьБазовуюНастройкуДополнительнойТаблицы(Таблица);
	КонецЕсли;

КонецПроцедуры

// Задает новую фиксированную высоту для таблицы на мобильном клиенте.
//
// Параметры:
//  Таблица - ТаблицаФормы - Представление таблицы на форме;
//  НоваяВысотаТаблицы - Число - Новая высота таблицы;
//
Процедура УстановитьНовуюВысотуТаблицы(Таблица, НоваяВысотаТаблицы) Экспорт

	Если НоваяВысотаТаблицы = 0 Тогда
		Возврат;
	КонецЕсли;

	Если Не Таблица.Видимость Тогда
		Возврат;
	КонецЕсли;

	Таблица.АвтоМаксимальнаяВысота = Ложь;
	Таблица.АвтоМаксимальнаяВысотаВСтрокахТаблицы = Ложь;

	Таблица.ВысотаВСтрокахТаблицы = НоваяВысотаТаблицы;
	Таблица.МаксимальнаяВысотаВСтрокахТаблицы = НоваяВысотаТаблицы;
	Таблица.Высота = НоваяВысотаТаблицы;
	Таблица.МаксимальнаяВысота = НоваяВысотаТаблицы;

КонецПроцедуры

// Задает базовые настройки для дополнительной (вложения, получатели и т.п.) таблицы на мобильном клиенте.
//
// Параметры:
//  Таблица - ТаблицаФормы - Представление таблицы на форме;
//
Процедура УстановитьБазовуюНастройкуДополнительнойТаблицы(Таблица) Экспорт

	Таблица.ВариантУправленияВысотой = ВариантУправленияВысотойТаблицы.ПоСодержимому;
	Таблица.АвтоМаксимальнаяВысота = Истина;
	Таблица.АвтоМаксимальнаяВысотаВСтрокахТаблицы = Истина;

	Таблица.ВысотаВСтрокахТаблицы = 0;
	Таблица.РастягиватьПоГоризонтали = Истина;
	Таблица.Высота = 1;
	Таблица.Ширина = 1;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Задает базовые свойства для кнопки на мобильном клиенте.
//
// Параметры:
//  Кнопка - КнопкаФормы - Кнопка для которой необходимо установить свойства;
//
Процедура ОформитьБазовуюКнопку(Кнопка)
	
	Если Кнопка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Кнопка) <> Тип("КнопкаФормы") Тогда
		Возврат;
	КонецЕсли;
	
	Если Кнопка.Вид = ВидКнопкиФормы.Гиперссылка Тогда
		Кнопка.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	КонецЕсли;
	
	Кнопка.Ширина = 0;

	Кнопка.ВысотаЗаголовка = 1;
	Кнопка.РастягиватьПоГоризонтали = Истина;
	Кнопка.РастягиватьПоВертикали = Ложь;
	
	Кнопка.Фигура = ФигураКнопки.Овал;
	Кнопка.ОтображениеФигуры = ОтображениеФигурыКнопки.Всегда;

КонецПроцедуры

//Возвращает новые параметры элемента формы, используемые в моб. клиенте.
//
// Возвращаемое значение:
//  Структура - Структура элементов стиля с ключами:
//		* РастягиватьПоГоризонтали 	- Булево
//		* РастягиватьПоВертикали	- Булево
//		* Высота 					- Число
//		* Ширина					- Число
//		* Активный					- Булево
//		* ОтображениеКнопки			- ОтображениеКнопки
//
Функция НовыйПараметрыЭлемента() Экспорт
	
	ПараметрыЭлемента = Новый Структура;

	ПараметрыЭлемента.Вставить("РастягиватьПоГоризонтали", Истина);
	ПараметрыЭлемента.Вставить("Ширина", 0);
	ПараметрыЭлемента.Вставить("РастягиватьПоВертикали", Ложь);
	ПараметрыЭлемента.Вставить("Высота", 1);
	ПараметрыЭлемента.Вставить("Активный", Ложь);
	ПараметрыЭлемента.Вставить("ОтображениеКнопки", ОтображениеКнопки.Картинка);
	
	Возврат ПараметрыЭлемента;

КонецФункции

#КонецОбласти

#КонецЕсли