// @strict-types


#Область ПрограммныйИнтерфейс

// Возвращает ссылку на физ.лицо по сведениям для МЧД
// 
// Параметры:
//  СведенияФизЛица - Структура:
//    * ИНН - Строка - ИНН физ.лица
// 
// Возвращаемое значение:
//  - СправочникСсылка.ФизическиеЛица - Ссылка на физ.лицо, если таковое найдено
//  - Неопределено - Если физ.лицо по сведениям не найдено
Функция ФизЛицоПоСведениям(СведенияФизЛица) Экспорт
	
	Выборка = ВыборкаФизЛицПоИНН(СведенияФизЛица.ИНН);
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ФизЛицо;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Дополняет типы организаций представителей МЧД
// 
// Параметры:
//  Типы - Массив Из Тип
//
Процедура ДополнитьТипыОрганизацийПредставителяМЧД(Типы) Экспорт
	
	Типы.Добавить(Тип("СправочникСсылка.Организации"));
	Типы.Добавить(Тип("СправочникСсылка.Контрагенты"));
	
КонецПроцедуры

// Возвращает ссылку на юр.лицо представителя МЧД
// 
// Параметры:
//  СведенияЮрЛица - Структура:
//    * ИНН - Строка
//    * КПП - Строка
//    * ОГРН - Строка
// 
// Возвращаемое значение:
//  - СправочникСсылка.Организации - Если найдена организация удовлетворающая сведениям
//  - СправочникСсылка.Контрагенты - Если найден контрагент удовлетворяющий сведениям
//  - Неопределено - Если юр. лицо не найдено
//
Функция ЮрЛицоПредставительМЧД(СведенияЮрЛица) Экспорт
	
	ВыборкиЮрЛиц = ВыборкиЮрЛицПоСведениям(СведенияЮрЛица);
	
	Если ВыборкиЮрЛиц.ВыборкаОрганизаций.Следующий() Тогда
		Возврат ВыборкиЮрЛиц.ВыборкаОрганизаций.Организация;
	КонецЕсли;
	
	Если ВыборкиЮрЛиц.ВыборкаКонтрагентов.Следующий() Тогда
		Возврат ВыборкиЮрЛиц.ВыборкаКонтрагентов.Контрагент;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Заполняет при изменении данные физического лица по ссылке.
//
// Параметры:
//  ФизЛицо - СправочникСсылка.ФизическиеЛица
//  Сведения - см. МашиночитаемыеДоверенности.НовыеДанныеФизЛица
//
Процедура ЗаполнитьСведенияФизЛица(ФизЛицо, Сведения) Экспорт
	
	ВыборкиДанных = ВыборкиДанныхФизЛица(ФизЛицо);
	
	ВыборкаШапки = ВыборкиДанных.ВыборкаДанныхШапки;
	Если ВыборкаШапки.Следующий() Тогда
		
		Сведения.ИНН = ВыборкаШапки.ИНН;
		Сведения.СтраховойНомерПФР = ВыборкаШапки.СтраховойНомерПФР;
		Сведения.ДатаРождения = ВыборкаШапки.ДатаРождения;
		Сведения.ФИО = ВыборкаШапки.ФИО;
		Сведения.Пол = Строка(ВыборкаШапки.Пол);
		
		ЧастиИмени = ФизическиеЛицаКлиентСервер.ЧастиИмени(ВыборкаШапки.ФИО);
		Сведения.Фамилия = ЧастиИмени.Фамилия;
		Сведения.Имя = ЧастиИмени.Имя;
		Сведения.Отчество = ЧастиИмени.Отчество;
		
	КонецЕсли;
	
	ВыборкаДокумента = ВыборкиДанных.ВыборкаДанныхДокумента;
	Если ВыборкаДокумента.Следующий() Тогда
		
		Сведения.Серия = ВыборкаДокумента.Серия;
		Сведения.Номер = ВыборкаДокумента.Номер;
		Сведения.ДатаВыдачи = ВыборкаДокумента.ДатаВыдачи;
		Сведения.КемВыдан = ВыборкаДокумента.КемВыдан;
		Сведения.КодПодразделения = ВыборкаДокумента.КодПодразделения;
		Сведения.КодФНС = КодВидаДокументаФНС(ВыборкаДокумента.ВидДокумента);
		
		Если ВыборкаДокумента.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ Тогда
			Сведения.Гражданство = Справочники.СтраныМира.Россия;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает выборку результата запроса физ.лиц по ИНН
// 
// Параметры:
//  ИНН - Строка - ИНН физ.лица
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
//    * ФизЛицо - СправочникСсылка.ФизическиеЛица
//
Функция ВыборкаФизЛицПоИНН(ИНН)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК ФизЛицо
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.ИНН = &ИНН";
	Запрос.УстановитьПараметр("ИНН", ИНН);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Возвращает выборки организаций и контрагентов по сведениям юр. лиц
// 
// Параметры:
//  СведенияЮрЛица - Структура:
//    * ИНН - Строка
//    * КПП - Строка
//    * ОГРН - Строка
// 
// Возвращаемое значение:
//  Структура:
//    * ВыборкаОрганизаций - ВыборкаИзРезультатаЗапроса:
//      ** Организация - СправочникСсылка.Организации
//    * ВыборкаКонтрагентов - ВыборкаИзРезультатаЗапроса:
//      ** Контрагент - СправочникСсылка.Контрагенты
//
Функция ВыборкиЮрЛицПоСведениям(СведенияЮрЛица)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ИНН = &ИНН
		|	И Организации.КПП = &КПП
		|	И Организации.ОГРН = &ОГРН
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН
		|	И Контрагенты.КПП = &КПП";
	Запрос.УстановитьПараметр("ИНН", СведенияЮрЛица.ИНН);
	Запрос.УстановитьПараметр("КПП", СведенияЮрЛица.КПП);
	Запрос.УстановитьПараметр("ОГРН", СведенияЮрЛица.ОГРН);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкиЮрЛиц = Новый Структура();
	ВыборкиЮрЛиц.Вставить("ВыборкаОрганизаций", РезультатыЗапроса[0].Выбрать());
	ВыборкиЮрЛиц.Вставить("ВыборкаКонтрагентов", РезультатыЗапроса[1].Выбрать());
	
	Возврат ВыборкиЮрЛиц;
	
КонецФункции

// Выборки данных физ лица.
// 
// Параметры:
//  ФизЛицо - СправочникСсылка.ФизическиеЛица
// 
// Возвращаемое значение:
//  Структура:
//    * ВыборкаДанныхШапки - ВыборкаИзРезультатаЗапроса:
//      ** ИНН - Строка
//      ** СтраховойНомерПФР - Строка
//      ** ДатаРождения - Дата
//      ** Пол - ПеречислениеСсылка.ПолФизическогоЛица
//      ** ФИО - Строка
//    * ВыборкаДанныхДокумента - ВыборкаИзРезультатаЗапроса:
//      ** Серия - Строка
//      ** Номер - Строка
//      ** ДатаВыдачи - Дата
//      ** КемВыдан - Строка
//      ** КодПодразделения - Строка
//      ** ВидДокумента - СправочникСсылка.ВидыДокументовФизическихЛиц
//
Функция ВыборкиДанныхФизЛица(ФизЛицо)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ФизическиеЛица.ИНН КАК ИНН,
		|	ФизическиеЛица.СтраховойНомерПФР КАК СтраховойНомерПФР,
		|	ФизическиеЛица.ДатаРождения КАК ДатаРождения,
		|	ФизическиеЛица.Пол КАК Пол,
		|	ФизическиеЛица.Наименование КАК ФИО
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка = &ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ВидДокумента,
		|	ДокументыФизическихЛицСрезПоследних.Серия КАК Серия,
		|	ДокументыФизическихЛицСрезПоследних.Номер КАК Номер,
		|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДатаВыдачи,
		|	ДокументыФизическихЛицСрезПоследних.КемВыдан КАК КемВыдан,
		|	ДокументыФизическихЛицСрезПоследних.КодПодразделения КАК КодПодразделения
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних КАК ДокументыФизическихЛицСрезПоследних
		|ГДЕ
		|	ДокументыФизическихЛицСрезПоследних.Физлицо = &Физлицо";
	Запрос.УстановитьПараметр("Физлицо", ФизЛицо);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкиДанных = Новый Структура;
	ВыборкиДанных.Вставить("ВыборкаДанныхШапки", РезультатыЗапроса[0].Выбрать());
	ВыборкиДанных.Вставить("ВыборкаДанныхДокумента", РезультатыЗапроса[1].Выбрать());
	
	Возврат ВыборкиДанных;
	
КонецФункции

// Код вида документа ФНС.
// 
// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокументовФизическихЛиц
// 
// Возвращаемое значение:
//  Строка - Код вида документа
Функция КодВидаДокументаФНС(ВидДокумента)
	
	КодыВидовДокументов = Новый Соответствие;
	ТаблицаВидовИКодов = ТаблицаВидовДокументовИКодовФНС();
	Для Каждого Строка Из ТаблицаВидовИКодов Цикл
		КодыВидовДокументов.Вставить(Строка.ВидДокумента, Строка.КодФНС);
	КонецЦикла;
	
	КодВида = КодыВидовДокументов[ВидДокумента];
	
	Если КодВида <> Неопределено Тогда
		Возврат КодВида;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Возвращает таблицу соответствий видов документов и кодов ФНС
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//    * ВидДокумента - СправочникСсылка.ВидыДокументовФизическихЛиц
//    * КодФНС - Строка
//
Функция ТаблицаВидовДокументовИКодовФНС()
	
	ТаблицаВидовИКодов = Новый ТаблицаЗначений;
	ТаблицаВидовИКодов.Колонки.Добавить("ВидДокумента");
	ТаблицаВидовИКодов.Колонки.Добавить("КодФНС");
	
	МенеджерВидовДокументов = Справочники.ВидыДокументовФизическихЛиц;
	
	ДобавитьСтрокуВидаДокументаИКодаФНС(ТаблицаВидовИКодов, МенеджерВидовДокументов.ВоенныйБилетОфицераЗапаса, "27");
	ДобавитьСтрокуВидаДокументаИКодаФНС(ТаблицаВидовИКодов, МенеджерВидовДокументов.ВоенныйБилет, "07");
	ДобавитьСтрокуВидаДокументаИКодаФНС(ТаблицаВидовИКодов, МенеджерВидовДокументов.ДипломатическийПаспорт, "09");
	ДобавитьСтрокуВидаДокументаИКодаФНС(ТаблицаВидовИКодов, МенеджерВидовДокументов.ЗагранпаспортРФ, "22");
	ДобавитьСтрокуВидаДокументаИКодаФНС(ТаблицаВидовИКодов, МенеджерВидовДокументов.ЗагранпаспортСССР, "02");
	ДобавитьСтрокуВидаДокументаИКодаФНС(ТаблицаВидовИКодов, МенеджерВидовДокументов.ПаспортРФ, "21");
	ДобавитьСтрокуВидаДокументаИКодаФНС(ТаблицаВидовИКодов, МенеджерВидовДокументов.ПаспортСССР, "01");
	ДобавитьСтрокуВидаДокументаИКодаФНС(ТаблицаВидовИКодов, МенеджерВидовДокументов.ПаспортМинморфлота, "06");
	ДобавитьСтрокуВидаДокументаИКодаФНС(ТаблицаВидовИКодов, МенеджерВидовДокументов.ПаспортМоряка, "26");
	ДобавитьСтрокуВидаДокументаИКодаФНС(ТаблицаВидовИКодов, МенеджерВидовДокументов.СвидетельствоОРождении, "03");
	ДобавитьСтрокуВидаДокументаИКодаФНС(ТаблицаВидовИКодов, МенеджерВидовДокументов.УдостоверениеОфицера, "04");
	
	Возврат ТаблицаВидовИКодов;
	
КонецФункции

// Добавляет в таблицу видов документов и кодов ФНС строку
// 
// Параметры:
//  ТаблицаВидовИКодов - см. ТаблицаВидовДокументовИКодовФНС
//  ВидДокумента - СправочникСсылка.ВидыДокументовФизическихЛиц
//  КодФНС - Строка
//
Процедура ДобавитьСтрокуВидаДокументаИКодаФНС(ТаблицаВидовИКодов, ВидДокумента, КодФНС)
	
	Строка = ТаблицаВидовИКодов.Добавить();
	Строка.ВидДокумента = ВидДокумента;
	Строка.КодФНС = КодФНС;
	
КонецПроцедуры

#КонецОбласти
