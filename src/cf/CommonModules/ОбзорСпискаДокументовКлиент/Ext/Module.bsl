
#Область ПрограммныйИнтерфейс

// Обновляет данные миникарточки документа в списках
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма списка Документов предприятия, 
//   в котором показывается Миникарточка
//
Процедура ОбновитьМиникарточку(Форма) Экспорт 
	
	Список = Форма.Элементы.Список;
	
	ТекущиеДанные = РаботаСоСпискамиДокументовКлиент.ПолучитьДанныеТекущейСтрокиСписка(Список, Список.ТекущаяСтрока);
	Если ТекущиеДанные = Неопределено Тогда
		Форма.ТекущийДокумент = Неопределено;
		
	ИначеЕсли Форма.ИмяФормы = "РегистрСведений.МоиДокументы.Форма.ФормаМоиДокументы" Тогда 
		Форма.ТекущийДокумент = ТекущиеДанные.Документ;
		
	Иначе
		Форма.ТекущийДокумент = ТекущиеДанные.Ссылка;
		
		Форма.ТекущийРегистрационныйНомер = ТекущиеДанные.РегистрационныйНомер;
		
	КонецЕсли;
	
	ТекущийДокумент = Форма.ТекущийДокумент;
	ПрочтениеУстановлено = Ложь;
	
	ДопПараметры = ОбзорОбъектовКлиентСервер.НовыйДопПараметрыМиникарточки();
	ДопПараметры.ПоказыватьУдаленныеФайлы = Форма.ПоказыватьУдаленныеФайлы;
	Если ТипЗнч(Форма.ВидДокументаКэш) = Тип("Структура") Тогда
		ДопПараметры.ПредыдущийВидДокумента = Форма.ВидДокументаКэш.Ссылка;
	КонецЕсли;
	ДанныеМиникарточки = ОбзорСпискаДокументов.ПолучитьДанныеМиникарточки(ТекущийДокумент, ДопПараметры);
	
	Если ПрочтениеУстановлено Тогда	
		Оповестить("ПрочтениеОбновитьСписок", ТекущийДокумент);
	КонецЕсли;
	
	Форма.ОбзорHTML = ДанныеМиникарточки.Обзор;  
	
	Форма.ДокументПодписан = ДанныеМиникарточки.ДокументПодписан;
	
	Если ТипЗнч(ДанныеМиникарточки.ВидДокументаКэш) = Тип("Структура") Тогда
		Форма.ВидДокументаКэш = Новый Структура;
		Форма.ВидДокументаКэш = ДанныеМиникарточки.ВидДокументаКэш;
		ВидимостьКомандСервиса1CShare = ИнтеграцияShareДокументооборотКлиентСервер.ВидимостьКомандСервиса1CShare(Форма,
			Форма.ВидДокументаКэш);
		Если ВидимостьКомандСервиса1CShare.ИспользоватьСервис1CShare Тогда				
			Форма.Элементы.ОбщаяКомандаПоделитьсяДокументомShare.Видимость = ВидимостьКомандСервиса1CShare.Видимость;
		КонецЕсли;
	КонецЕсли;
	
	#Если МобильныйКлиент Тогда
		МК_КлиентСервер.АдаптироватьHtmlПодЭкранМобильногоПриНеобходимости(Форма.ОбзорHTML);
	#КонецЕсли
	
	Форма.ЗапретитьРедактироватьФайлы = ДанныеМиникарточки.ЗапретитьРедактироватьФайлы;
		
	Форма.ЗапретитьУдалятьФайлы = ДанныеМиникарточки.ЗапретитьУдалятьФайлы;
	Форма.СостояниеТекст = ДанныеМиникарточки.СостояниеТекст;
	
	ЗаполнитьДеревоФайлов(Форма, ДанныеМиникарточки);
	
	Форма.СписокЗадачи.Очистить();
	Для Каждого Строка Из ДанныеМиникарточки.Задачи Цикл
		НоваяСтрока = Форма.СписокЗадачи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	Форма.КоличествоЗадач = ДанныеМиникарточки.Задачи.Количество();
	
	УстановитьДоступностьКомандМиникарточкиПоСостоянию(Форма, ДанныеМиникарточки);
	Форма.ДоступныеПоля = ДанныеМиникарточки.ОбщиеДоступныеПоля;
	Форма.НедоступныеПоля = ДанныеМиникарточки.ОбщиеНедоступныеПоля;
	
	Если СтрНайти(Форма.ИмяФормы, "ДокументыПредприятия") <> 0 Тогда
		
		Форма.ТекущееСостояниеОбработки = ДанныеМиникарточки.СостояниеОбработки;
		
		Форма.ТекущийЧислоРолейФайлов = ДанныеМиникарточки.ТекущийЧислоРолейФайлов;
		
		Если Не ЗначениеЗаполнено(Форма.ПереключательПоказыватьПодробности) Тогда 
			Форма.ПереключательПоказыватьПодробности = "Описание";
			Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.ГруппаСодержаниеФайлы;
		КонецЕсли;
		ВывестиЗаголовкиПереключателя(Форма);
	Иначе 
		ВывестиЗаголовкиЗакладок(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Обновляет заголовки закладок миникарточки документа в списках
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма списка Входящих, Исходящих или Документов предприятия, 
//   в котором обновляются заголовки
//
Процедура ВывестиЗаголовкиЗакладок(Форма) Экспорт 
	
	Если Форма.КоличествоФайлов > 0 Тогда 
		Форма.ЗаголовокСодержаниеФайлы = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Содержание, Файлы (%1)'"),
			Форма.КоличествоФайлов);
	Иначе
		Форма.ЗаголовокСодержаниеФайлы = 
			НСтр("ru = 'Содержание, Файлы'");
	КонецЕсли;
		
	Если Форма.КоличествоЗадач > 0 Тогда 
		
		Форма.ЗаголовокЗадачиСвязи = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Задачи (%1)'"),
			Форма.КоличествоЗадач);
		
	Иначе
		
		Форма.ЗаголовокЗадачиСвязи = 
			НСтр("ru = 'Задачи'");
		
	КонецЕсли;

КонецПроцедуры

// Заполняет список файлов миникарточки документа в списках
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма списка Входящих, Исходящих или Документов предприятия, 
//   в котором обновляется список файлов
//
Процедура ЗаполнитьСписокФайлов(Форма) Экспорт 
	
	ДопПараметры = ОбзорОбъектовКлиентСервер.НовыйДопПараметрыМиникарточки();
	ДопПараметры.ПоказыватьУдаленныеФайлы = Форма.ПоказыватьУдаленныеФайлы;
	ДанныеМиникарточки = ОбзорСпискаДокументов.ПолучитьДанныеМиникарточки(Форма.ТекущийДокумент, ДопПараметры);
	
	ЗаполнитьДеревоФайлов(Форма, ДанныеМиникарточки);
	ВывестиЗаголовкиЗакладок(Форма);
	
КонецПроцедуры

// Заполняет список задач миникарточки документа в списках
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма списка Входящих, Исходящих или Документов предприятия, 
//   в котором обновляется список задач
//
Процедура ЗаполнитьСписокЗадач(Форма) Экспорт
	
	ДанныеМиникарточки = ОбзорСпискаДокументов.ПолучитьДанныеМиникарточки(Форма.ТекущийДокумент);
	
	Форма.СписокЗадачи.Очистить();
	Для Каждого Строка Из ДанныеМиникарточки.Задачи Цикл
		НоваяСтрока = Форма.СписокЗадачи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;	
	Форма.КоличествоЗадач = ДанныеМиникарточки.Задачи.Количество();
	
	ВывестиЗаголовкиЗакладок(Форма);
	
КонецПроцедуры

// Заполняет список связей миникарточки документа в списках
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма списка Входящих, Исходящих или Документов предприятия, 
//   в котором обновляется дерево связей
//
Процедура ОбновитьСтрокуСвязи(Форма) Экспорт
	
	ДанныеМиникарточки = ОбзорСпискаДокументов.ПолучитьДанныеМиникарточки(Форма.ТекущийДокумент);
	Форма.ОбзорHTML = ДанныеМиникарточки.Обзор;
	
КонецПроцедуры

// Краткое словеное описание назначения и/или принципов работы процедуры.
//
// Параметры:
//  Ссылка1СДокументооборота - Строка.
//
Процедура ПоказатьСвязи(Ссылка1СДокументооборота, ТолькоВажные = Истина, ТолькоСвязиВОтветНа = Ложь) Экспорт
	
	ОсновнойОбъект = РаботаС_HTMLВызовСервера.СсылкаПоНавигационной(Ссылка1СДокументооборота);
	Если Не ЗначениеЗаполнено(ОсновнойОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ДелопроизводствоКлиент.ОткрытьФормуСвязи(ОсновнойОбъект, ТолькоВажные, ТолькоСвязиВОтветНа);
	
КонецПроцедуры

// Устанавливает доступность команд списка Файлы в миникарточке документа
//
// Параметры:
//   ТекущиеДанные - ТаблицаЗначений - таблица ФайлыДокумента формы списка
//   Элементы - ВсеЭлементыФормы - элементы формы 
//
Процедура УстановитьДоступностьКоманд(ТекущиеДанные, Форма) Экспорт
	
	Элементы = Форма.Элементы;
	ДоступныеПоля = Форма.ДоступныеПоля;
	НедоступныеПоля = Форма.НедоступныеПоля;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		УстановитьДоступностьКоманды(
			Элементы["КонтекстноеМенюФайлыОткрытьФайл"], Ложь, ДоступныеПоля, НеДоступныеПоля);
		УстановитьДоступностьКоманды(
			Элементы["КонтекстноеМенюФайлыНапечатать"], Ложь, ДоступныеПоля, НеДоступныеПоля);
		УстановитьДоступностьКоманды(
			Элементы["КонтекстноеМенюФайлыРедактировать"], Ложь, ДоступныеПоля, НеДоступныеПоля);
		УстановитьДоступностьКоманды(
			Элементы["КонтекстноеМенюФайлыЗакончитьРедактирование"], Ложь, ДоступныеПоля, НеДоступныеПоля);
		УстановитьДоступностьКоманды(
			Элементы["КонтекстноеМенюФайлыИзменить"], Ложь, ДоступныеПоля, НеДоступныеПоля);
		УстановитьДоступностьКоманды(
			Элементы["КонтекстноеМенюФайлыСохранитьИзменения"], Ложь, ДоступныеПоля, НеДоступныеПоля);
		УстановитьДоступностьКоманды(
			Элементы["КонтекстноеМенюФайлыУдалить"], Ложь, ДоступныеПоля, НеДоступныеПоля);
		УстановитьДоступностьКоманды(
			Элементы["КонтекстноеМенюФайлыСохранитьКак"], Ложь, ДоступныеПоля, НеДоступныеПоля);
		УстановитьДоступностьКоманды(
			Элементы["КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске"], Ложь, ДоступныеПоля, НеДоступныеПоля);
		
	Иначе
		
		РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
		СозданПоШаблонуДокумента = ТекущиеДанные.СозданПоШаблонуДокумента;
		РазрешеноРедактирование = Не (Форма.ЗапретитьРедактироватьФайлы И СозданПоШаблонуДокумента);
		РазрешеноУдаление = Не (Форма.ЗапретитьУдалятьФайлы И СозданПоШаблонуДокумента);
		
		УстановитьДоступностьКоманды(
			Элементы["КонтекстноеМенюФайлыОткрытьФайл"], Истина, ДоступныеПоля, НеДоступныеПоля);
		УстановитьДоступностьКоманды(
			Элементы["КонтекстноеМенюФайлыНапечатать"], Истина, ДоступныеПоля, НеДоступныеПоля);
		УстановитьДоступностьКоманды(
			Элементы["КонтекстноеМенюФайлыРедактировать"], 
			НЕ ТекущиеДанные.ПодписанЭП И РазрешеноРедактирование, ДоступныеПоля, НеДоступныеПоля);
		УстановитьДоступностьКоманды(
			Элементы["КонтекстноеМенюФайлыЗакончитьРедактирование"], 
			РедактируетТекущийПользователь И РазрешеноРедактирование, ДоступныеПоля, НеДоступныеПоля);
		УстановитьДоступностьКоманды(
			Элементы["КонтекстноеМенюФайлыИзменить"], Истина, ДоступныеПоля, НеДоступныеПоля);
		УстановитьДоступностьКоманды(
			Элементы["КонтекстноеМенюФайлыСохранитьИзменения"],
			РедактируетТекущийПользователь И РазрешеноРедактирование, ДоступныеПоля, НеДоступныеПоля);
		УстановитьДоступностьКоманды(
			Элементы["КонтекстноеМенюФайлыУдалить"], РазрешеноУдаление, ДоступныеПоля, НеДоступныеПоля);
		УстановитьДоступностьКоманды(
			Элементы["КонтекстноеМенюФайлыСохранитьКак"], Истина, ДоступныеПоля, НеДоступныеПоля);
		УстановитьДоступностьКоманды(
			Элементы["КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске"], РазрешеноРедактирование, ДоступныеПоля, НеДоступныеПоля);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДоступностьКомандМиникарточкиПоСостоянию(Форма, ДанныеМиникарточки) Экспорт
	
	ДанныеМиникарточки.Вставить("ОбщиеДоступныеПоля", "");
	ДанныеМиникарточки.Вставить("ОбщиеНедоступныеПоля", "");
	
	ДоступныеПоля = ДанныеМиникарточки.ДоступныеПоля;
	НедоступныеПоля = ДанныеМиникарточки.НедоступныеПоля;
	ИменаПолейИКомандДляНастройкиДоступности = ДанныеМиникарточки.ИменаПолейИКомандДляНастройкиДоступности;	
		
	ЭтоОбъектИзДругойСистемы = ДанныеМиникарточки.ЭтоОбъектИзДругойСистемы; 
	Если Не ЭтоОбъектИзДругойСистемы Тогда
		Если ДанныеМиникарточки.ПолныеПрава Тогда 
			Возврат;
		КонецЕсли;
		
		Если Не ДанныеМиникарточки.ИспользоватьСостоянияДокументов Тогда 
			Возврат;
		КонецЕсли;
		
		Если Не ДанныеМиникарточки.ОграничиватьДоступностьПолейПоСостоянию Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	ОбщиеНедоступныеПоля = Новый Структура;
	Для Каждого НедоступноеПоле Из НедоступныеПоля Цикл
		
		НайденнаяСтрока = Неопределено;
		Для Каждого Строка Из ИменаПолейИКомандДляНастройкиДоступности Цикл
			Если Строка.ИмяПоляКоманды = НедоступноеПоле Тогда 
				НайденнаяСтрока = Строка;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если НайденнаяСтрока <> Неопределено Тогда 
			СтруктураПолей = Новый Структура(НайденнаяСтрока.ИменаПолейНаФорме);
			Для Каждого Поле Из СтруктураПолей Цикл
				ЭлементФормы = Форма.Элементы.Найти(Поле.Ключ);
				Если ЭлементФормы = Неопределено Тогда 
					Продолжить;
				КонецЕсли;
				Если ТипЗнч(ЭлементФормы) <> Тип("КнопкаФормы") 
				   И ТипЗнч(ЭлементФормы) <> Тип("ТаблицаФормы") Тогда 
					Продолжить;
				КонецЕсли;
				ОбщиеНедоступныеПоля.Вставить(Поле.Ключ);
				
				Если ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы") Тогда 
					ЭлементФормы.Доступность = Ложь;
				Иначе
					ЭлементФормы.ТолькоПросмотр = Истина;
				КонецЕсли;
				
			КонецЦикла;	
		КонецЕсли;	
		
	КонецЦикла;	
	
	ОбщиеДоступныеПоля = Новый Структура;
	Для Каждого ДоступноеПоле Из ДоступныеПоля Цикл
		
		НайденнаяСтрока = Неопределено;
		Для Каждого Строка Из ИменаПолейИКомандДляНастройкиДоступности Цикл
			Если Строка.ИмяПоляКоманды = ДоступноеПоле Тогда 
				НайденнаяСтрока = Строка;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		
		Если НайденнаяСтрока <> Неопределено Тогда 
			СтруктураПолей = Новый Структура(НайденнаяСтрока.ИменаПолейНаФорме);
			СтруктураПолей.Вставить("ОткрытьФайл");
			СтруктураПолей.Вставить("КонтекстноеМенюФайлыОткрытьФайл");
			СтруктураПолей.Вставить("Напечатать");
			СтруктураПолей.Вставить("КонтекстноеМенюФайлыНапечатать");
			СтруктураПолей.Вставить("СохранитьКак");
			СтруктураПолей.Вставить("КонтекстноеМенюФайлыСохранитьКак");
			
			Для Каждого Поле Из СтруктураПолей Цикл
				ЭлементФормы = Форма.Элементы.Найти(Поле.Ключ);
				Если ЭлементФормы = Неопределено Тогда 
					Продолжить;
				КонецЕсли;
				Если ТипЗнч(ЭлементФормы) <> Тип("КнопкаФормы") 
				   И ТипЗнч(ЭлементФормы) <> Тип("ТаблицаФормы") Тогда 
					Продолжить;
				КонецЕсли;
				ОбщиеДоступныеПоля.Вставить(Поле.Ключ);
				
				Если ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы") Тогда 
					ЭлементФормы.Доступность = Истина;
				Иначе
					ЭлементФормы.ТолькоПросмотр = Ложь;
				КонецЕсли;
				
			КонецЦикла;	
		КонецЕсли;
		
	КонецЦикла;	
	
	Если ДоступныеПоля.Найти("ДобавлениеОригиналов") <> Неопределено Тогда 
		ОбщиеДоступныеПоля.Вставить("СоздатьФайлОригинал");
	КонецЕсли;	
		
	Если ДоступныеПоля.Найти("ДобавлениеФайлов") <> Неопределено Тогда 
		ОбщиеДоступныеПоля.Вставить("СоздатьФайлОбычный");
	КонецЕсли;
	
	
	ТаблицаФайлы = Форма.Элементы.Найти("Файлы");
	Если ТаблицаФайлы = Неопределено Или ТипЗнч(ТаблицаФайлы) <> Тип("ТаблицаФормы") Тогда 
		ТаблицаФайлы = Форма.Элементы.Найти("ФайлыДокумента");
	КонецЕсли;
		
	Если ТаблицаФайлы <> Неопределено И ТипЗнч(ТаблицаФайлы) = Тип("ТаблицаФормы") Тогда 
	
		Если ОбщиеДоступныеПоля.Количество() = 0 И ОбщиеНедоступныеПоля.Количество() = 0 
			И Не ЭтоОбъектИзДругойСистемы Тогда 
			ТаблицаФайлы.ИзменятьСоставСтрок = Истина;
		Иначе	
			Если Не ОбщиеДоступныеПоля.Свойство("КонтекстноеМенюФайлыСоздать") Тогда 
				ТаблицаФайлы.ИзменятьСоставСтрок = Ложь;
			Иначе	
				ТаблицаФайлы.ИзменятьСоставСтрок = Истина;
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
	ДанныеМиникарточки.Вставить("ОбщиеДоступныеПоля", ОбщиеДоступныеПоля);
	ДанныеМиникарточки.Вставить("ОбщиеНедоступныеПоля", ОбщиеНедоступныеПоля);
	
КонецПроцедуры	

// Заполнить дерево файлов в карточке документа.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма списка Документов предприятия,
//  ДанныеМиникарточки - Структура
Процедура ЗаполнитьДеревоФайловКарточкаДокумента(Форма, ДанныеМиникарточки) Экспорт
	
	Форма.Файлы.ПолучитьЭлементы().Очистить();
	
	Если ДанныеМиникарточки.МассивКомбинацийРолей.Количество() = 0 Тогда
		
		// "плоское" дерево заполним
		
		Для Каждого Стр Из ДанныеМиникарточки.Файлы Цикл
			НовСтр = Форма.Файлы.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Стр);
		КонецЦикла;	
		
	Иначе
		
		Для Каждого ОписаниеРоли Из ДанныеМиникарточки.МассивКомбинацийРолей Цикл
			
			Ветка = Форма.Файлы.ПолучитьЭлементы().Добавить();
			Ветка.Наименование = Строка(ОписаниеРоли.Роль);
			Если Не ЗначениеЗаполнено(ОписаниеРоли.Роль) Тогда
				Ветка.Наименование = "<>";
			КонецЕсли;	
			
			Ветка.ЭтоРольФайла = Истина;
			Ветка.ИндексКартинки = 2;
			Ветка.СтатусПроверкиЭП = -1;
			Ветка.РольФайла = ОписаниеРоли.Роль;
			Ветка.РольОбязательная = ОписаниеРоли.Обязательная;
			
			Для Каждого Стр Из ДанныеМиникарточки.Файлы Цикл
				Если Стр.РольФайла = ОписаниеРоли.Роль Тогда
					НовСтр = Ветка.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, Стр);
				КонецЕсли;
			КонецЦикла;	
			
			Если Ветка.ПолучитьЭлементы().Количество() <> 0 Тогда  
				
				КолвоФайлов = 0;                             
				Для Каждого СтрФайлов Из Ветка.ПолучитьЭлементы() Цикл
					Если Не СтрФайлов.ПометкаУдаления Тогда
						КолвоФайлов = КолвоФайлов + 1; 
					КонецЕсли;	
				КонецЦикла;	
				
				Ветка.Наименование = Ветка.Наименование 
				+ СтрШаблон(" (%1)", КолвоФайлов);
			КонецЕсли;	
			
		КонецЦикла;	
		
		// Раскроем дерево
		КоллекцияСтрок = Форма.Файлы.ПолучитьЭлементы();
		Для Каждого Строка Из КоллекцияСтрок Цикл
			
			Если ЗначениеЗаполнено(Строка.РольФайла) И
				Строка.РольОбязательная Тогда
			
				ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
				Форма.Элементы.Файлы.Развернуть(ИдентификаторСтроки, Истина);
				
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЕсли;	
	
	Форма.КоличествоФайлов = ДанныеМиникарточки.Файлы.Количество();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьДеревоФайлов(Форма, ДанныеМиникарточки)
	
	Форма.Файлы.ПолучитьЭлементы().Очистить();
	
	Если ДанныеМиникарточки.МассивКомбинацийРолей.Количество() = 0 Тогда
		
		// "плоское" дерево заполним       
		
		Если ДанныеМиникарточки.Свойство("ДокументЭДО") И ЗначениеЗаполнено(ДанныеМиникарточки.ДокументЭДО) Тогда
			
			СтрЭДО = Форма.Файлы.ПолучитьЭлементы().Добавить();   
			
			СтрЭДО.ДокументЭДО = ДанныеМиникарточки.ДокументЭДО;
			СтрЭДО.ЭтоДокументЭДО = Истина;                      
			
			СтрЭДО.Наименование = Строка(СтрЭДО.ДокументЭДО) + НСтр("ru = ' (Документ ЭДО)'");
			
			СтрЭДО.ИндексКартинки = 30; // как xml  
			СтрЭДО.СтатусПроверкиЭП = -1;
			
		КонецЕсли;	
		
		Для Каждого Стр Из ДанныеМиникарточки.Файлы Цикл
			НовСтр = Форма.Файлы.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Стр);
		КонецЦикла;	
		
		Форма.Элементы.ФайлыДокумента.Отображение = ОтображениеТаблицы.Список;
		Форма.Элементы.ФайлыРольФайла.Видимость = Ложь;
		
	Иначе
		
		Форма.Элементы.ФайлыДокумента.Отображение = ОтображениеТаблицы.Дерево;
		Форма.Элементы.ФайлыРольФайла.Видимость = Ложь;
		
		Если ДанныеМиникарточки.Свойство("ДокументЭДО") И ЗначениеЗаполнено(ДанныеМиникарточки.ДокументЭДО) Тогда
			
			СтрЭДО = Форма.Файлы.ПолучитьЭлементы().Добавить();   
			
			СтрЭДО.ДокументЭДО = ДанныеМиникарточки.ДокументЭДО;
			СтрЭДО.ЭтоДокументЭДО = Истина;               
			
			СтрЭДО.Наименование = Строка(СтрЭДО.ДокументЭДО) + НСтр("ru = ' (Документ ЭДО)'");
			
			СтрЭДО.ИндексКартинки = 30; // как xml  
			СтрЭДО.СтатусПроверкиЭП = -1;
			
		КонецЕсли;	
		
		Для Каждого ОписаниеРоли Из ДанныеМиникарточки.МассивКомбинацийРолей Цикл
			
			Ветка = Форма.Файлы.ПолучитьЭлементы().Добавить();
			Ветка.Наименование = Строка(ОписаниеРоли.Роль);
			Если ОписаниеРоли.Роль = ПредопределенноеЗначение("Справочник.РолиФайлов.ПустаяСсылка") Тогда
				Ветка.Наименование = "<>";
			КонецЕсли;	
			
			Ветка.ЭтоРольФайла = Истина;
			Ветка.ИндексКартинки = 2;
			Ветка.СтатусПроверкиЭП = -1;
			Ветка.РольФайла = ОписаниеРоли.Роль;
			Ветка.РольОбязательная = ОписаниеРоли.Обязательная;
			
			Для Каждого Стр Из ДанныеМиникарточки.Файлы Цикл
				Если Стр.РольФайла = ОписаниеРоли.Роль Тогда
					НовСтр = Ветка.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, Стр);
				КонецЕсли;
			КонецЦикла;	
			
			Если Ветка.ПолучитьЭлементы().Количество() <> 0 Тогда   
				
				КолвоФайлов = 0;                             
				Для Каждого СтрФайлов Из Ветка.ПолучитьЭлементы() Цикл
					Если Не СтрФайлов.ПометкаУдаления Тогда
						КолвоФайлов = КолвоФайлов + 1; 
					КонецЕсли;	
				КонецЦикла;	
				
				Ветка.Наименование = Ветка.Наименование 
				+ СтрШаблон(" (%1)", КолвоФайлов);
			КонецЕсли;	
			
		КонецЦикла;	
		
		// Раскроем дерево
		КоллекцияСтрок = Форма.Файлы.ПолучитьЭлементы();
		Для Каждого Строка Из КоллекцияСтрок Цикл
			
			Если ЗначениеЗаполнено(Строка.РольФайла) И
				Строка.РольОбязательная Тогда
			
				ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
				Форма.Элементы.ФайлыДокумента.Развернуть(ИдентификаторСтроки, Истина);
				
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЕсли;	
	
	Форма.КоличествоФайлов = ДанныеМиникарточки.Файлы.Количество();

КонецПроцедуры

Процедура УстановитьДоступностьКоманды(Команда, Доступность, ДоступныеПоля, НеДоступныеПоля)
	
	Если ДоступныеПоля = "" Тогда
		Команда.Доступность = Доступность;
	ИначеЕсли ТипЗнч(ДоступныеПоля) = Тип("Структура") Тогда
		Если ДоступныеПоля.Свойство(Команда.Имя) Или Не НедоступныеПоля.Свойство(Команда.Имя) Тогда
			Команда.Доступность = Доступность;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет заголовки закладок миникарточки документа в списках
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма списка Входящих, Исходящих или Документов предприятия, 
//   в котором обновляются заголовки
//
Процедура ВывестиЗаголовкиПереключателя(Форма) 
	
КонецПроцедуры

#КонецОбласти
