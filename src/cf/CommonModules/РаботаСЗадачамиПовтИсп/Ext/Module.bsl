////////////////////////////////////////////////////////////////////////////////
// Работа с задачами (сервер, повторное использование).
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Определяет все виды действий задач.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.ВидыДействийЗадач - Все виды действий задач.
// 	
Функция ВсеВидыДействийЗадач() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидыДействийЗадач.Ссылка
		|ИЗ
		|	Справочник.ВидыДействийЗадач КАК ВидыДействийЗадач
		|ГДЕ
		|	ВидыДействийЗадач.ПометкаУдаления = ЛОЖЬ");
	
	ВсеВидыДействийЗадач = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат ВсеВидыДействийЗадач;
		
КонецФункции

// Формирует данные вида задачи.
// 
// Параметры:
//  ВидЗадачи - СправочникСсылка.ВидыЗадач.
// 
// Возвращаемое значение:
//  См. Справочники.ВидыЗадач.ДанныеВидаЗадачи.
//  
Функция ДанныеВидаЗадачи(ВидЗадачи) Экспорт
	
	ДанныеВидаЗадачи = Справочники.ВидыЗадач.ДанныеВидаЗадачи(ВидЗадачи);
	
	Возврат ДанныеВидаЗадачи;
	
КонецФункции

// Возвращает данные набора состояний.
//
// Параметры:
//  ВидЗадачи - СправочникСсылка.ВидыДействийЗадач - Вид задачи.
// 
// Возвращаемое значение:
//  Структура - Данные набора состояний. См. Справочники.НаборыСостоянийЗадач.ДанныеНабораСостояний().
//
Функция ДанныеНабораСостояний(ВидЗадачи) Экспорт
	
	Возврат РаботаСЗадачами.ДанныеНабораСостояний(ВидЗадачи);
	
КонецФункции

// Возвращает значение настройки "Добавлять руководителям доступ подчиненных".
// 
// Возвращаемое значение:
//  Булево - Значение настройки "Добавлять руководителям доступ подчиненных".
//
Функция ДобавлятьРуководителямДоступПодчиненных() Экспорт
	
	Возврат Константы.ДобавлятьРуководителямДоступПодчиненных.Получить();
	
КонецФункции

// Формирует заголовок результата текстом.
//
// Параметры:
//  ВидДействия - СправочникСсылка.ВидДействийЗадач.
// 
// Возвращаемое значение:
//  Строка - Заголовок результата текстом.
//
Функция ЗаголовокРезультатаТекстом(ВидДействия) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидДействия) Тогда
		Возврат "";
	КонецЕсли;
	
	КешНСИЗадач = РаботаСЗадачамиПовтИсп.КешНСИЗадач();
	РеквизитыВидаДействия = КешНСИЗадач.РеквизитыВидовДействий[ВидДействия];
	
	Возврат РеквизитыВидаДействия.РезультатТекстом;
	
КонецФункции

// Возвращает форму множественного числа вида участника.
// 
// Параметры:
//  ВидУчастника - СправочникСсылка.ВидыУчастниковЗадач
//
// Возвращаемое значение:
//  Строка - Множественное число вида участника.
//
Функция МножественноеЧисло(ВидУчастника) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидУчастника) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидУчастника, "МножественноеЧисло");
	
КонецФункции

// Возвращает роли текущего пользователя.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.ПолныеРоли - Роли текущего пользователя.
//
Функция РолиТекущегоПользователя() Экспорт
	
	Возврат РегистрыСведений.ИсполнителиРолей.РолиИсполнителя(
		Сотрудники.ТекущийПользовательИСотрудники());
	
КонецФункции

// Возвращает текущих исполнителей задач.
// 
// Возвращаемое значение:
//  Массив из ОпределяемыйТип.УчастникЗадач - Текущие исполнители задач.
//
Функция ТекущиеИсполнителиЗадач() Экспорт
	
	ТекущиеИсполнителиЗадач = РаботаСЗадачами.ИсполнителиЗадач(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
			Пользователи.ТекущийПользователь()));
	
	Возврат ТекущиеИсполнителиЗадач;
	
КонецФункции

// Определяет характер результата (задачи или действия).
//
// Параметры:
//  РезультатЗадачиИлиДействия - СправочникСсылка.РезультатыЗадач, СправочникСсылка.РезультатыДействийЗадач.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ХарактерыРезультатов - Характер результата.
//
Функция ХарактерРезультата(РезультатЗадачиИлиДействия) Экспорт
	
	Если Не ЗначениеЗаполнено(РезультатЗадачиИлиДействия) Тогда
		Возврат Перечисления.ХарактерыРезультатов.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РезультатЗадачиИлиДействия, "ХарактерРезультата");
	
КонецФункции

// Возвращает шаблон заголовка действия задачи.
//
// Параметры:
//  ВидДействияЗадач - СправочникСсылка.ВидыДействийЗадач - Вид действия задачи.
// 
// Возвращаемое значение:
//  Строка - Шаблон заголовка действия задачи.
//
Функция ШаблонЗаголовкаДействияЗадачи(ВидДействияЗадач) Экспорт
	
	КешНСИЗадач = РаботаСЗадачамиПовтИсп.КешНСИЗадач();
	РеквизитыВидаДействия = КешНСИЗадач.РеквизитыВидовДействий[ВидДействияЗадач];
	Если РеквизитыВидаДействия = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат РеквизитыВидаДействия.ШаблонЗаголовка;
	
КонецФункции

// Проверяет, что вид участника соответствует исполнителю.
//
// Параметры:
//  ВидУчастника - СправочникСсылка.ВидыУчастниковЗадач - Вид участника.
// 
// Возвращаемое значение:
//  Булево - Это исполнитель.
//
Функция ЭтоИсполнитель(ВидУчастника) Экспорт
	
	Возврат РаботаСЗадачами.ЭтоИсполнитель(ВидУчастника);
	
КонецФункции

// Проверяет, что вид участника соответствует ответственному.
//
// Параметры:
//  ВидУчастника - СправочникСсылка.ВидыУчастниковЗадач - Вид участника.
// 
// Возвращаемое значение:
//  Булево - Это ответственный.
//
Функция ЭтоОтветственный(ВидУчастника) Экспорт
	
	Возврат РаботаСЗадачами.ЭтоОтветственный(ВидУчастника);
	
КонецФункции

// Проверяет, что вид участника соответствует проверяющему.
//
// Параметры:
//  ВидУчастника - СправочникСсылка.ВидыУчастниковЗадач - Вид участника.
// 
// Возвращаемое значение:
//  Булево - Это проверяющий.
//
Функция ЭтоПроверяющий(ВидУчастника) Экспорт
	
	Возврат РаботаСЗадачами.ЭтоПроверяющий(ВидУчастника);
	
КонецФункции

// Определяет вид состояния задачи по состоянию задачи.
//
// Параметры:
//  СостояниеЗадач - СправочникСсылка.СостоянияЗадач - Состояния задачи.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ВидыСостоянийЗадач - Вид состояния задачи.
//
Функция ВидСостоянияЗадач(СостояниеЗадач) Экспорт
	
	Если Не ЗначениеЗаполнено(СостояниеЗадач) Тогда
		Возврат Перечисления.ВидыСостоянийЗадач.ПустаяСсылка();
	КонецЕсли;
	
	КешНСИЗадач = РаботаСЗадачамиПовтИсп.КешНСИЗадач();
	
	ВидСостоянияЗадач = КешНСИЗадач.ВидыСостоянийЗадач[СостояниеЗадач];
	
	Возврат ВидСостоянияЗадач;
	
КонецФункции

// Определяет вид состояния участников задач по состоянию участника задачи.
//
// Параметры:
//  СостояниеУчастникаЗадачи - СправочникСсылка.СостоянияУчастниковЗадач - Состояние участника задачи.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ВидыСостоянийУчастниковЗадач - Вид состояния участников задач.
//
Функция ВидСостоянияУчастниковЗадач(СостояниеУчастникаЗадачи) Экспорт
	
	Если Не ЗначениеЗаполнено(СостояниеУчастникаЗадачи) Тогда
		Возврат Перечисления.ВидыСостоянийУчастниковЗадач.ПустаяСсылка();
	КонецЕсли;
	
	КешНСИЗадач = РаботаСЗадачамиПовтИсп.КешНСИЗадач();
	ВидСостоянияУчастниковЗадач = КешНСИЗадач.ВидыСостоянийУчастниковЗадач[СостояниеУчастникаЗадачи];
	
	Возврат ВидСостоянияУчастниковЗадач;
	
КонецФункции

// Определяет пол участника задачи.
//
// Параметры:
//  Участник - ОпределяемыйТип.УчастникЗадач, СправочникСсылка.ФактическиеИсполнители - Участник задачи.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ПолФизическогоЛица - Пол участника задачи.
//
Функция ПолУчастника(Участник) Экспорт
	
	ТекУчастник = Участник;
	Если ТипЗнч(Участник) = Тип("СправочникСсылка.ФактическиеИсполнители") Тогда
		ТекУчастник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Участник, "Факт");
	КонецЕсли;
	
	Возврат Сотрудники.ПолСотрудника(ТекУчастник, Истина);
	
КонецФункции

// Формирует представление участника.
//
// Параметры:
//  Участник- ОпределяемыйТип.УчастникЗадач, СправочникСсылка.ФактическиеИсполнители
//  Расширенное - Булево
//  СуффиксЯзыка - Строка
// 
// Возвращаемое значение:
//  Строка - Представление участника.
//
Функция ПредставлениеУчастника(Участник, Расширенное = Ложь, СуффиксЯзыка="") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекУчастник = Участник;
	Если ТипЗнч(Участник) = Тип("СправочникСсылка.ФактическиеИсполнители") Тогда
		
		ДанныеИсполнителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Участник,
			"Адресат, План, Факт, Отметил");
		ПредставлениеУчастника =
			Справочники.ФактическиеИсполнители.ПредставлениеФактическогоИсполнителя(
				ДанныеИсполнителя,
				Расширенное, СуффиксЯзыка);
		
	ИначеЕсли ТипЗнч(ТекУчастник) = Тип("СправочникСсылка.Сотрудники") И Не Расширенное Тогда
		
		ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекУчастник, "Владелец");
		
		Латиница = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
		Кириллица = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЫЪЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщыъьэюя"; // АПК:1036 проверка орфографии не требуется.
		ДопустимыеСимволы = Латиница + Кириллица + " ";
		
		Если РаботаСЗадачами.СтрокаСодержитТолькоДопустимыеСимволы(Строка(ФизическоеЛицо), ДопустимыеСимволы) Тогда
			ПредставлениеУчастника = ФизическиеЛица.ФамилияИнициалыФизЛица(Строка(ФизическоеЛицо),,,, СуффиксЯзыка);
		Иначе
			ПредставлениеУчастника = Строка(ФизическоеЛицо);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ТекУчастник) = Тип("СправочникСсылка.ФизическиеЛица") И Не Расширенное Тогда
		
		Латиница = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
		Кириллица = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЫЪЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщыъьэюя"; // АПК:1036 проверка орфографии не требуется.
		ДопустимыеСимволы = Латиница + Кириллица + " ";
		
		Если РаботаСЗадачами.СтрокаСодержитТолькоДопустимыеСимволы(Строка(ТекУчастник), ДопустимыеСимволы) Тогда
			ПредставлениеУчастника = ФизическиеЛица.ФамилияИнициалыФизЛица(Строка(ТекУчастник),,,, СуффиксЯзыка);
		Иначе
			ПредставлениеУчастника = Строка(ТекУчастник);
		КонецЕсли;
		
	Иначе
		
		ПредставлениеУчастника = Строка(ТекУчастник);
		
	КонецЕсли;
	
	Возврат ПредставлениеУчастника;
	
КонецФункции

Функция СписокВыбораФормыАвтораЗадачи(ВидЗадачи, Ссылка, Автор, ФункцияУчастника,
	КонтролироватьСотрудниковБезПользователя) Экспорт

	Возврат РаботаСЗадачами.СписокВыбораФормыАвтораЗадачи(ВидЗадачи, Ссылка, Автор, ФункцияУчастника,
		КонтролироватьСотрудниковБезПользователя);
	
КонецФункции

// Определяет, задачи каких исполнителей являются задачами подчиненных для текущего пользователя.
//
// Параметры:
//   ТолькоДействующие - Булево
//   ВключаяЗамещаемых - Булево
//
// Возвращаемое значение:
//   Массив из ОпределяемыйТип.УчастникЗадач - Исполнители, задачи которых может выполнять пользователь или сотрудник.
//
Функция ПодчиненныеИсполнителиЗадач(ТолькоДействующие, ВключаяЗамещаемых) Экспорт
	
	Возврат РаботаСЗадачами.ПодчиненныеИсполнителиЗадач(ТолькоДействующие, ВключаяЗамещаемых);
	
КонецФункции

// Определяет, доступны ли "Задачи подчиненных" текущему пользователю.
// 
// Возвращаемое значение:
//  Булево - "Задачи подчиненных" доступны текущему пользователю.
//
Функция ДоступныЗадачиПодчиненных() Экспорт
	
	ОбластиЗамещения = Новый Массив;
	ОбластиЗамещения.Добавить(Справочники.ОбластиЗамещения.ЗадачиПросмотр);
	ОбластиЗамещения.Добавить(Справочники.ОбластиЗамещения.Задачи);
	
	ДоступныЗадачиПодчиненных = РаботаСПользователями.ЭтоРуководительИлиПомощник(
		Пользователи.ТекущийПользователь(),
		ОбластиЗамещения);
	
	Возврат ДоступныЗадачиПодчиненных;
	
КонецФункции

// Формирует кеш НСИ задач.
// 
// Возвращаемое значение:
//  Структура - Кеш НСИ задач:
//   * РеквизитыВидовДействий - Соответствие.
//   * РеквизитыВидовУчастниковЗадач - Соответствие.
//   * ВидыСостоянийЗадач - Соответствие.
//   * ВидыСостоянийУчастниковЗадач - Соответствие.
//   * РезультатыСостоянийУчастниковЗадач - Соответствие.
//   * РеквизитыРезультатовДействийЗадач - Соответствие.
//
Функция КешНСИЗадач() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидыУчастниковЗадач.Ссылка КАК Ссылка,
		|	ВидыУчастниковЗадач.Наименование КАК Наименование,
		|	ВидыУчастниковЗадач.МножественноеЧисло КАК МножественноеЧисло,
		|	ВидыУчастниковЗадач.ЭтоИсполнитель КАК ЭтоИсполнитель,
		|	ВидыУчастниковЗадач.ЭтоОтветственный КАК ЭтоОтветственный,
		|	ВидыУчастниковЗадач.ЭтоПроверяющий КАК ЭтоПроверяющий
		|ИЗ
		|	Справочник.ВидыУчастниковЗадач КАК ВидыУчастниковЗадач
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыДействийЗадач.Ссылка КАК Ссылка,
		|	ВидыДействийЗадач.ТерминСоисполнители КАК ТерминСоисполнители,
		|	ВидыДействийЗадач.ШаблонЗаголовка КАК ШаблонЗаголовка,
		|	ВидыДействийЗадач.РезультатТекстом КАК РезультатТекстом,
		|	ВидыДействийЗадач.ОбластьПримененияШаблоновТекстов КАК ОбластьПримененияШаблоновТекстов
		|ИЗ
		|	Справочник.ВидыДействийЗадач КАК ВидыДействийЗадач
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостоянияУчастниковЗадач.Ссылка КАК Ссылка,
		|	СостоянияУчастниковЗадач.ВидСостояния КАК ВидСостояния,
		|	СостоянияУчастниковЗадач.РезультатДействия КАК РезультатДействия
		|ИЗ
		|	Справочник.СостоянияУчастниковЗадач КАК СостоянияУчастниковЗадач
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостоянияЗадач.Ссылка КАК Ссылка,
		|	СостоянияЗадач.ВидСостояния КАК ВидСостояния
		|ИЗ
		|	Справочник.СостоянияЗадач КАК СостоянияЗадач
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РезультатыДействийЗадач.Ссылка КАК Ссылка,
		|	РезультатыДействийЗадач.ЗаголовокКоманды КАК ЗаголовокКоманды,
		|	РезультатыДействийЗадач.ЗаголовокКоманды КАК ЗаголовокКомандыЯзык1
		|ИЗ
		|	Справочник.РезультатыДействийЗадач КАК РезультатыДействийЗадач");
	
	РезультатПакета = Запрос.ВыполнитьПакет();
	РезультатЗапросаВидыУчастниковЗадач = РезультатПакета[0];
	РезультатЗапросаВидыДействийЗадач = РезультатПакета[1];
	РезультатЗапросаСостоянияУчастниковЗадач = РезультатПакета[2];
	РезультатЗапросаСостоянияЗадач = РезультатПакета[3];
	РезультатЗапросаРезультатыДействийЗадач = РезультатПакета[4];
	
	КешНСИЗадач = Новый Структура;
	
	// Реквизиты видов действий.
	РеквизитыВидовДействий = Новый Соответствие;
	
	Выборка = РезультатЗапросаВидыДействийЗадач.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		РеквизитыВидаДействия = Новый Структура;
		РеквизитыВидаДействия.Вставить("ТерминСоисполнители", Выборка.ТерминСоисполнители);
		РеквизитыВидаДействия.Вставить("ШаблонЗаголовка", Выборка.ШаблонЗаголовка);
		РеквизитыВидаДействия.Вставить("РезультатТекстом", Выборка.РезультатТекстом);
		РеквизитыВидаДействия.Вставить("ОбластьПримененияШаблоновТекстов", Выборка.ОбластьПримененияШаблоновТекстов);
		
		РеквизитыВидовДействий.Вставить(Выборка.Ссылка, РеквизитыВидаДействия);
		
	КонецЦикла;
	
	КешНСИЗадач.Вставить("РеквизитыВидовДействий", РеквизитыВидовДействий);
	
	
	// Реквизиты видов участников задач.
	РеквизитыВидовУчастниковЗадач = Новый Соответствие;
	Выборка = РезультатЗапросаВидыУчастниковЗадач.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		РеквизитыВидаУчастниковЗадач = Новый Структура;
		РеквизитыВидаУчастниковЗадач.Вставить("Наименование", Выборка.Наименование);
		РеквизитыВидаУчастниковЗадач.Вставить("МножественноеЧисло", Выборка.МножественноеЧисло);
		РеквизитыВидаУчастниковЗадач.Вставить("ЭтоИсполнитель", Выборка.ЭтоИсполнитель);
		РеквизитыВидаУчастниковЗадач.Вставить("ЭтоОтветственный", Выборка.ЭтоОтветственный);
		РеквизитыВидаУчастниковЗадач.Вставить("ЭтоПроверяющий", Выборка.ЭтоПроверяющий);
		
		РеквизитыВидовУчастниковЗадач.Вставить(Выборка.Ссылка, РеквизитыВидаУчастниковЗадач);
		
	КонецЦикла;
	
	КешНСИЗадач.Вставить("РеквизитыВидовУчастниковЗадач", РеквизитыВидовУчастниковЗадач);
	
	// Виды состояний задач.
	ВидыСостоянийЗадач = Новый Соответствие;
	Выборка = РезультатЗапросаСостоянияЗадач.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВидыСостоянийЗадач.Вставить(Выборка.Ссылка, Выборка.ВидСостояния);
	КонецЦикла;
	
	КешНСИЗадач.Вставить("ВидыСостоянийЗадач", ВидыСостоянийЗадач);
	
	// Виды состояний участников задач.
	ВидыСостоянийУчастниковЗадач = Новый Соответствие;
	РезультатыСостоянийУчастниковЗадач = Новый Соответствие;
	Выборка = РезультатЗапросаСостоянияУчастниковЗадач.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВидыСостоянийУчастниковЗадач.Вставить(Выборка.Ссылка, Выборка.ВидСостояния);
		РезультатыСостоянийУчастниковЗадач.Вставить(Выборка.Ссылка, Выборка.РезультатДействия);
	КонецЦикла;
	
	КешНСИЗадач.Вставить("ВидыСостоянийУчастниковЗадач", ВидыСостоянийУчастниковЗадач);
	КешНСИЗадач.Вставить("РезультатыСостоянийУчастниковЗадач", РезультатыСостоянийУчастниковЗадач);
	
	// Реквизиты результатов действий задач.
	РеквизитыРезультатовДействийЗадач = Новый Соответствие;
	
	Выборка = РезультатЗапросаРезультатыДействийЗадач.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		РеквизитыРезультата = Новый Структура;
		РеквизитыРезультата.Вставить("ЗаголовокКоманды", Выборка.ЗаголовокКоманды);
		РеквизитыРезультата.Вставить("ЗаголовокКомандыЯзык1", Выборка.ЗаголовокКомандыЯзык1);
		
		РеквизитыРезультатовДействийЗадач.Вставить(Выборка.Ссылка, РеквизитыРезультата);
		
	КонецЦикла;
	
	КешНСИЗадач.Вставить("РеквизитыРезультатовДействийЗадач", РеквизитыРезультатовДействийЗадач);
	
	
	Возврат КешНСИЗадач;
	
КонецФункции

// Определяет, какие подразделения считаются подразделениями руководителя для текущего пользователя.
// В подразделениях руководителя в форме "Задачи подчиненных" не показываются задачи руководителя ему самому.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.СтруктураПредприятия.
// 
Функция ПодразделенияРуководителя() Экспорт
	
	ПодразделенияРуководителя = РаботаСЗадачами.ПодразделенияРуководителя();
	
	Возврат ПодразделенияРуководителя;
	
КонецФункции

#КонецОбласти