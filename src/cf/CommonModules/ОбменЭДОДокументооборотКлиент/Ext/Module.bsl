// @strict-types


#Область ПрограммныйИнтерфейс

#Область ПереопределениеБЭД

// Открывает форму добавления в пакет документа информционной базы
// 
// Параметры:
//  ПараметрыФормы - Структура:
//    * ИдентификаторПакета - УникальныйИдентификатор
//    * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//    * Организация - ОпределяемыйТип.Организация
//    * Контрагент - ОпределяемыйТип.КонтрагентБЭД
//    * Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//    * ОтключитьТранслитерацию - Булево
//    * ОграниченияОбъемаПакетаДокументов - см. ПакетыДокументовЭДО.НовыеОграниченияОбъемаПакетаДокументовУчастников
//    * ОбъемПакетаДокументов - см. ПакетыДокументовЭДОКлиентСервер.НовыйОбъемПакетаДокументов
//    * СозданиеНовогоПакета - Булево
//  Оповещение - ОписаниеОповещения
//  СтандартнаяОбработка - Булево
Процедура ОткрытьФормуДобавленияВПакетДокументаИнформационнойБазы(ПараметрыФормы, Оповещение, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Контекст = НовыйКонтекстДобавленияДокументаВПакет();
	Контекст.ПараметрыФормы = ПараметрыФормы;
	Контекст.ОбработчикЗавершения = Оповещение;
	
	ОтборДокумента = Новый Структура;
	ОтборДокумента.Вставить("Организация", ПараметрыФормы.Организация);
	ОтборДокумента.Вставить("Контрагент", ПараметрыФормы.Контрагент);
	
	ПараметрыФормыВыбораДокумента = Новый Структура;
	ПараметрыФормыВыбораДокумента.Вставить("Отбор", ОтборДокумента); 
	ПараметрыФормыВыбораДокумента.Вставить("ЗапретитьИзменятьФильтры", Истина);
	
	ОбработчикВыбора = Новый ОписаниеОповещения("ОбработатьВыборДокументаДляДобавленияВПакет", ЭтотОбъект, Контекст);
	
	ОткрытьФорму("Справочник.ДокументыПредприятия.ФормаВыбора", ПараметрыФормыВыбораДокумента,,,,, ОбработчикВыбора); 
	
КонецПроцедуры

// Вызывается перед началом выполнения действий ЭДО
// 
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения
//  ПараметрыВыполнения   - См. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
//  КонтекстДиагностики - Неопределено
//                      - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  СтандартнаяОбработка - Булево
//
Процедура ПередНачаломВыполненияДействийЭДО(ОповещениеОЗавершении, ПараметрыВыполнения,
		КонтекстДиагностики, СтандартнаяОбработка) Экспорт
	
	ТребуемыеДействия = ТребуемыеДействияПередВыполнениемДействийЭДО(ПараметрыВыполнения);
	
	Если Не ТребуетсяОбработкаПередВыполнениемДействийЭДО(ТребуемыеДействия) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Контекст = НовыйКонтекстПередВыполнениемДействийЭДО();
	Контекст.ОбработчикЗавершения = ОповещениеОЗавершении;
	Контекст.ПараметрыВыполнения = ПараметрыВыполнения;
	Контекст.КонтекстДиагностики = КонтекстДиагностики;
	Контекст.ТребуемыеДействия = ТребуемыеДействия;
	
	ВыполнитьДействияПередВыполнениемДействийЭДО(Контекст);
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеИсходящегоЭДО

// Конструктор параметров создания исходящего ЭДО по документу ДО
// 
// Возвращаемое значение:
//  Структура - Новые параметры создания исходящего ЭДОПо документу ДО:
// * Документ - СправочникСсылка.ДокументыПредприятия - 
// * АктуальныйДокументЭДО - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// * Форма - Неопределено, ФормаКлиентскогоПриложения -
// * ОбработчикЗавершения - ОписаниеОповещения, Неопределено -
// * ПоказатьКарточкуСозданногоДокумента - Булево
//
Функция НовыеПараметрыСозданияИсходящегоЭДОПоДокументуДО() Экспорт
	
	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("Документ", ПредопределенноеЗначение("Справочник.ДокументыПредприятия.ПустаяСсылка"));
	ПараметрыСоздания.Вставить("АктуальныйДокументЭДО",
		ПредопределенноеЗначение("Документ.ЭлектронныйДокументИсходящийЭДО.ПустаяСсылка"));
	ПараметрыСоздания.Вставить("Форма", Неопределено);
	ПараметрыСоздания.Вставить("ОбработчикЗавершения", Неопределено);
	ПараметрыСоздания.Вставить("ПоказатьКарточкуСозданногоДокумента", Истина);
	
	Возврат ПараметрыСоздания;
	
КонецФункции

// Создает исходящий ЭДО по документу ДО
// 
// Параметры:
//  ПараметрыСоздания - см. НовыеПараметрыСозданияИсходящегоЭДОПоДокументуДО
Процедура СоздатьИсходящийЭДОПоДокументуДО(ПараметрыСоздания) Экспорт
	
	ДокументГотовКСозданию = Ложь;

	ПараметрыСозданияЭДО = ОбменСКонтрагентамиКлиент.НовыеПараметрыСозданияЭлектронногоДокументаПоФайлу();
	ИнтерфейсЭДОДокументооборотВызовСервера.ЗаполнитьПараметрыИсходящегоДокумента(
		ПараметрыСоздания.Документ,
		ПараметрыСозданияЭДО,
		ДокументГотовКСозданию,
		ПараметрыСоздания.АктуальныйДокументЭДО);
	
	Контекст = НовыйКонтекстСозданияИсходящегоЭДОПоДокументуДО();
	Контекст.ДокументДО = ПараметрыСоздания.Документ;
	Контекст.ПредыдущийАктуальныйЭДО = ПараметрыСоздания.АктуальныйДокументЭДО;
	Контекст.ОбработчикЗавершения = ПараметрыСоздания.ОбработчикЗавершения;
	Контекст.ПоказатьКарточкуСозданногоДокумента = ПараметрыСоздания.ПоказатьКарточкуСозданногоДокумента;
	
	Если ДокументГотовКСозданию Тогда
		//@skip-check property-return-type
		ДополнительныеПараметры = ПараметрыСозданияЭДО.ДополнительныеПараметры; // см. ИнтерфейсЭДОДокументооборот.ДополнительныеПараметрыСозданияИсходящегоДокумента
		Контекст.ФайлЭДО = ДополнительныеПараметры.ФайлЭД;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьСозданиеИсходящегоЭДОПоДокументуДО", ЭтотОбъект,
			Контекст);
		ОбменСКонтрагентамиКлиент.НачатьСозданиеЭлектронногоДокументаПоФайлу(ОписаниеОповещения, ПараметрыСозданияЭДО,
			ДополнительныеПараметры.ПараметрыФайла);
		Возврат;
	КонецЕсли;
	
	ОбработчикЗакрытия = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыВводаПараметровИсходящегоЭДО",
		ЭтотОбъект, Контекст);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрыСозданияЭД", ПараметрыСозданияЭДО);
	ПараметрыФормы.Вставить("ТекущийДокументЭДО", ПараметрыСоздания.АктуальныйДокументЭДО);
	ОткрытьФорму("ОбщаяФорма.СозданиеИсходящегоЭДВРучномРежиме", ПараметрыФормы, ПараметрыСоздания.Форма, , , ,
		ОбработчикЗакрытия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Возвращает имя события создания исходящего ЭДО
// 
// Возвращаемое значение:
//  Строка
Функция ИмяСобытияСозданияИсходящегоЭДО() Экспорт
	
	Возврат "СозданИсходящийЭДОПоДокументуДО";
	
КонецФункции

// Конструктор параметров события создания исходящего ЭДО по файлу
// 
// Возвращаемое значение:
//  Структура - Новые параметры события исходящего ЭДО:
// * ДокументДО - СправочникСсылка.ДокументыПредприятия - 
// * СозданныйЭДО - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - 
// * ФайлЭДО - СправочникСсылка.Файлы - 
Функция НовыеПараметрыСобытияСозданияИсходящегоЭДО() Экспорт
	
	ПараметрыСобытия = Новый Структура;
	ПараметрыСобытия.Вставить("ДокументДО", ПредопределенноеЗначение("Справочник.ДокументыПредприятия.ПустаяСсылка"));
	ПараметрыСобытия.Вставить("СозданныйЭДО",
		ПредопределенноеЗначение("Документ.ЭлектронныйДокументИсходящийЭДО.ПустаяСсылка"));
	ПараметрыСобытия.Вставить("ФайлЭДО", ПредопределенноеЗначение("Справочник.Файлы.ПустаяСсылка"));
	
	Возврат ПараметрыСобытия;
	
КонецФункции

#КонецОбласти

#Область РаботаСЭП

// Вызывается при открыии карточки подписи
// 
// Параметры:
//  Объект - ОпределяемыйТип.ПодписанныйОбъект
//  ИдентификаторПодписи - УникальныйИдентификатор
//  СтандартнаяОбработка - Булево
Процедура ПриОткрытииПодписи(Объект, ИдентификаторПодписи, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(Объект) <> Тип("СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеПодписи = ОбменЭДОДокументооборотВызовСервера.ДанныеПодписиДляОткрытия(Объект, ИдентификаторПодписи);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СвойстваПодписи", ДанныеПодписи.СвойстваПодписи); 
	ПараметрыФормы.Вставить("СвойстваДоверенности", ДанныеПодписи.СвойстваДоверенности); 
	ПараметрыФормы.Вставить("РезультатПроверки", ДанныеПодписи.РезультатПроверкиПоМЧД);
	
	ПараметрыОткрытия = ОбщегоНазначенияБЭДКлиент.НовыеПараметрыОткрытияФормы();
	
	МашиночитаемыеДоверенностиКлиент.ОткрытьРезультатыПроверкиПодписи(ПараметрыФормы, ПараметрыОткрытия);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Новый результат ввода параметров создания исходящего ЭДО.
// 
// Возвращаемое значение:
//  Структура - Новый результат ввода параметров создания исходящего ЭДО:
// * ПараметрыСозданияЭДО - см. ОбменСКонтрагентамиКлиент.НовыеПараметрыСозданияЭлектронногоДокументаПоФайлу
// * ФайлЭДО - СправочникСсылка.Файлы
Функция НовыйРезультатВводаПараметровСозданияИсходящегоЭДО() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыСозданияЭДО",
		ОбменСКонтрагентамиКлиент.НовыеПараметрыСозданияЭлектронногоДокументаПоФайлу());
	Результат.Вставить("ФайлЭДО", ПредопределенноеЗначение("Справочник.Файлы.ПустаяСсылка"));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДобавлениеДокументаВПакет

// Новый контекст добавления документа в пакет.
// 
// Возвращаемое значение:
//  Структура:
// * ПараметрыФормы - Структура:
//    ** ИдентификаторПакета - УникальныйИдентификатор
//    ** ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//    ** Организация - ОпределяемыйТип.Организация
//    ** Контрагент - ОпределяемыйТип.КонтрагентБЭД
//    ** Договор - ОпределяемыйТип.ДоговорСКонтрагентомЭДО
//    ** ОтключитьТранслитерацию - Булево
//    ** ОграниченияОбъемаПакетаДокументов - см. ПакетыДокументовЭДО.НовыеОграниченияОбъемаПакетаДокументовУчастников
//    ** ОбъемПакетаДокументов - см. ПакетыДокументовЭДОКлиентСервер.НовыйОбъемПакетаДокументов
//    ** СозданиеНовогоПакета - Булево
// * ОбработчикЗавершения - ОписаниеОповещения
Функция НовыйКонтекстДобавленияДокументаВПакет()
	
	Контекст = Новый Структура;
	Контекст.Вставить("ПараметрыФормы", Новый Структура);
	Контекст.Вставить("ОбработчикЗавершения", Новый ОписаниеОповещения());
	
	Возврат Контекст;
	
КонецФункции

// Обработать выбор документа для добавления в пакет.
// 
// Параметры:
//  ВыбранныйДокумент - СправочникСсылка.ДокументыПредприятия
//  Контекст - см. НовыйКонтекстДобавленияДокументаВПакет
Процедура ОбработатьВыборДокументаДляДобавленияВПакет(ВыбранныйДокумент, Контекст) Экспорт
	
	Если Не ЗначениеЗаполнено(ВыбранныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЭДО = ОбменЭДОДокументооборотВызовСервера.ДанныеЭДОДокументаДО(ВыбранныйДокумент);
	
	Если Не ДанныеЭДО.ВозможнаОтправкаЭДО Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выбранный документ нельзя отправить по ЭДО'"));
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЭДО.ИдентификаторПакетаЭДО) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выбранный документ уже состоит в пакете ЭДО'"));
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеЭДО.АктуальныйДокументЭДО) Тогда
		
		ОбработчикСоздания = Новый ОписаниеОповещения("ОбработатьСозданиеДокументаЭДОПриДобавленииВПакет",
			ЭтотОбъект, Контекст);
		
		ПараметрыСоздания = НовыеПараметрыСозданияИсходящегоЭДОПоДокументуДО();
		ПараметрыСоздания.Документ = ВыбранныйДокумент;
		ПараметрыСоздания.ОбработчикЗавершения = ОбработчикСоздания;
		ПараметрыСоздания.ПоказатьКарточкуСозданногоДокумента = Ложь;
		
		СоздатьИсходящийЭДОПоДокументуДО(ПараметрыСоздания);
		
	Иначе
		
		Если ТипЗнч(ДанныеЭДО.АктуальныйДокументЭДО) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО") Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Выбранный документ связан с входящим документом ЭДО'"));
			Возврат;
		КонецЕсли;
		
		Если Не СостояниеЭДОДоступноДляДобавлениеВПакет(ДанныеЭДО.СостояниеЭДО) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Выбранный документ не может быть добавлен в пакет, поскольку имеет некорректное состояние ЭДО. Добавлены в пакет могут быть только документы требующие подписания.'"));
			Возврат;
		КонецЕсли;
		
		ДобавитьВПакетЭДОДокументЭДО(Контекст, ДанныеЭДО.АктуальныйДокументЭДО);
		
	КонецЕсли;
	
	
	
КонецПроцедуры

// Возвращает, доступно ли по состоянию ЭДО документа ДО добавление в пакет ЭДО
// 
// Параметры:
//  СостояниеЭДО - ПеречислениеСсылка.СостоянияДокументовЭДО
// 
// Возвращаемое значение:
//  Булево
Функция СостояниеЭДОДоступноДляДобавлениеВПакет(СостояниеЭДО)
	
	ДоступныеСостояния = Новый Соответствие();
	ДоступныеСостояния[ПредопределенноеЗначение("Перечисление.СостоянияДокументовЭДО.ТребуетсяПодписание")] = Истина;
	
	Возврат ДоступныеСостояния[СостояниеЭДО] = Истина;
	
КонецФункции

// Обрабатывает создание документа ЭДО
// 
// Параметры:
//  ДокументЭДО - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  Контекст - см. НовыйКонтекстДобавленияДокументаВПакет
Процедура ОбработатьСозданиеДокументаЭДОПриДобавленииВПакет(ДокументЭДО, Контекст) Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВПакетЭДОДокументЭДО(Контекст, ДокументЭДО);
	
КонецПроцедуры

// Добавляет в пакет ЭДО документ ЭДО
// 
// Параметры:
//  Контекст - см. НовыйКонтекстДобавленияДокументаВПакет
//  ДокументЭДО - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Процедура ДобавитьВПакетЭДОДокументЭДО(Контекст, ДокументЭДО)
	
	ИдентификаторПакета = Контекст.ПараметрыФормы.ИдентификаторПакета;
	ДобавляемыеДокументы = Новый Массив; // Массив Из ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
	ДобавляемыеДокументы.Добавить(ДокументЭДО);
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();

	Если ЗначениеЗаполнено(ИдентификаторПакета) Тогда
		
		Для Каждого Документ Из ДобавляемыеДокументы Цикл
			Успех = ПакетыДокументовЭДОВызовСервера.ДобавитьДокументВПакет(ИдентификаторПакета, Документ, КонтекстДиагностики);
		КонецЦикла;
		
	Иначе

		ДобавляемыеДокументы.Добавить(Контекст.ПараметрыФормы.ЭлектронныйДокумент);
		ИдентификаторПакета = ПакетыДокументовЭДОВызовСервера.СоздатьПакетДокументов(ДобавляемыеДокументы,
			КонтекстДиагностики);
		Успех = ЗначениеЗаполнено(ИдентификаторПакета);
		
	КонецЕсли;
	
	Если Успех И ЗначениеЗаполнено(ДобавляемыеДокументы) Тогда
		Оповестить("ДобавлениеДокументаВПакет", ДобавляемыеДокументы, ИдентификаторПакета);
	Иначе
		ИнтерфейсДокументовЭДОКлиент.ПоказатьПредставлениеОшибокКонтекстаДиагностики(КонтекстДиагностики);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеИсходящегоЭДО

// Конструктор контекста создания исходящего ЭДО по документу ДО
// 
// Возвращаемое значение:
//  Структура - Новый контекст создания исходящего ЭДОПо документу ДО:
// * ДокументДО - СправочникСсылка.ДокументыПредприятия - 
// * ПредыдущийАктуальныйЭДО - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - 
// * ФайлЭДО - СправочникСсылка.Файлы - 
// * ОбработчикЗавершения - ОписаниеОповещения, Неопределено -
// * ПоказатьКарточкуСозданногоДокумента - Булево
//
Функция НовыйКонтекстСозданияИсходящегоЭДОПоДокументуДО()
	
	Контекст = Новый Структура;
	Контекст.Вставить("ДокументДО", ПредопределенноеЗначение("Справочник.ДокументыПредприятия.ПустаяСсылка"));
	Контекст.Вставить("ПредыдущийАктуальныйЭДО",
		ПредопределенноеЗначение("Документ.ЭлектронныйДокументИсходящийЭДО.ПустаяСсылка"));
	Контекст.Вставить("ФайлЭДО", ПредопределенноеЗначение("Справочник.Файлы.ПустаяСсылка"));
	Контекст.Вставить("ОбработчикЗавершения", Неопределено);
	Контекст.Вставить("ПоказатьКарточкуСозданногоДокумента", Истина);
	
	Возврат Контекст;
	
КонецФункции

// Обрабатывает закрытие формы ввода параметров исходящего ЭДО
// 
// Параметры:
//  Результат - см. НовыйРезультатВводаПараметровСозданияИсходящегоЭДО
//  Контекст - см. НовыйКонтекстСозданияИсходящегоЭДОПоДокументуДО
Процедура ОбработатьЗакрытиеФормыВводаПараметровИсходящегоЭДО(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ИмяФайла", "");
	ПараметрыФайла.Вставить("АдресХранилища", "");
	ИнтерфейсЭДОДокументооборотВызовСервера.ЗаполнитьПараметрыФайлаЭД(Результат.ФайлЭДО, ПараметрыФайла);
	
	Контекст.ФайлЭДО = Результат.ФайлЭДО;
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ОбработатьСозданиеИсходящегоЭДОПоДокументуДО",
		ОбменЭДОДокументооборотКлиент, Контекст);
	ОбменСКонтрагентамиКлиент.НачатьСозданиеЭлектронногоДокументаПоФайлу(ОбработчикЗавершения,
		Результат.ПараметрыСозданияЭДО, ПараметрыФайла);
	
КонецПроцедуры

// Обрабатывает создание исходящего ЭДО по документу ДО
// 
// Параметры:
//  ДокументЭДО - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  Контекст - см. НовыйКонтекстСозданияИсходящегоЭДОПоДокументуДО
Процедура ОбработатьСозданиеИсходящегоЭДОПоДокументуДО(ДокументЭДО, Контекст) Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументЭДО) Тогда
		Возврат;
	КонецЕсли;	
	
	ОбменЭДОДокументооборотВызовСервера.ОбработатьСозданиеИсходящегоЭДО(
		ДокументЭДО, Контекст.ПредыдущийАктуальныйЭДО, Контекст.ФайлЭДО);
	
	ПараметрыДобавленногоФайла = Новый Структура;
	ПараметрыДобавленногоФайла.Вставить("Владелец", Контекст.ДокументДО);
	ПараметрыДобавленногоФайла.Вставить("Событие", "СозданФайл");
	ПараметрыДобавленногоФайла.Вставить("Файл", ДокументЭДО);
	ПараметрыДобавленногоФайла.Вставить("ДокументЭДО", ДокументЭДО);
	Оповестить("Запись_Файл", ПараметрыДобавленногоФайла);
	
	ПараметрыОповеденияОСоздании = НовыеПараметрыСобытияСозданияИсходящегоЭДО();
	ПараметрыОповеденияОСоздании.ДокументДО = Контекст.ДокументДО;
	ПараметрыОповеденияОСоздании.СозданныйЭДО = ДокументЭДО;
	ПараметрыОповеденияОСоздании.ФайлЭДО = Контекст.ФайлЭДО;
	Оповестить(ИмяСобытияСозданияИсходящегоЭДО(), ПараметрыОповеденияОСоздании);
	
	Если Контекст.ПоказатьКарточкуСозданногоДокумента Тогда
		ПоказатьЗначение(, ДокументЭДО);
	КонецЕсли;
	
	Если Контекст.ОбработчикЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработчикЗавершения, ДокументЭДО);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПередВыполнениемДействийЭДО

// Требуется обработка перед выполнением действий ЭДО.
// 
// Параметры:
//  ПараметрыВыполнения   - См. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - Строка - см. ДействияПередВыполнениемДействийЭДО
//    * Значение - Булево
Функция ТребуемыеДействияПередВыполнениемДействийЭДО(ПараметрыВыполнения)
	
	ТребуемыеДействия = Новый Соответствие();
	
	НаборДействий = ПараметрыВыполнения.НаборДействий;
	ЕстьДействиеСформировать = 
		ИнтерфейсДокументовЭДОКлиентСервер.ЕстьДействие(НаборДействий,
			ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.Сформировать"));
	
	ОбъектыКОбработке = ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета;
	ДокументыДОКОбработке = Новый Массив(); // Массив Из СправочникСсылка.ДокументыПредприятия
	Для Каждого Объект Из ОбъектыКОбработке Цикл
		Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Объект) Тогда
			ДокументыДОКОбработке.Добавить(Объект);
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьДействиеСформировать И ДокументыДОКОбработке.Количество() > 0 Тогда
		ТребуемыеДействия[ДействияПередВыполнениемДействийЭДО().СформироватьДокументыЭДО] = Истина;
	КонецЕсли;
	
	Возврат ТребуемыеДействия
	
КонецФункции

// Требуется обработка перед выполнением действий ЭДО.
// 
// Параметры:
//  ТребуемыеДействия - см. ТребуемыеДействияПередВыполнениемДействийЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ТребуетсяОбработкаПередВыполнениемДействийЭДО(ТребуемыеДействия)
	
	Для Каждого Элемент Из ТребуемыеДействия Цикл
		
		ТребуетсяВыполнение = Элемент.Значение;
		Если ТребуетсяВыполнение Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Конструктор контекста обработки перед выполнением действий по ЭДО
// 
// Возвращаемое значение:
//  Структура - Новый контекст перед выполнением действий ЭДО:
// * ОбработчикЗавершения - Неопределено, ОписаниеОповещения -
// * ПараметрыВыполнения - См. ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО
// * КонтекстДиагностики - Неопределено
//                      - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
// * ТребуемыеДействия - см. ТребуемыеДействияПередВыполнениемДействийЭДО
// * ДействиеВыполняется - Булево
// * ТекущееВыполняемоеДействие - Строка - см. ДействияПередВыполнениемДействийЭДО
// * РезультатыВыполненияДействий - Соответствие Из КлючИЗначение:
//    ** Ключ - Строка - см. ДействияПередВыполнениемДействийЭДО
//    ** Значение - Произвольный - Результат выполнения действия
//
Функция НовыйКонтекстПередВыполнениемДействийЭДО()
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОбработчикЗавершения", Неопределено);
	Контекст.Вставить("ПараметрыВыполнения", ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО());
	Контекст.Вставить("КонтекстДиагностики", Неопределено);
	
	Контекст.Вставить("ТребуемыеДействия", Новый Соответствие());
	
	Контекст.Вставить("ДействиеВыполняется", Ложь);
	Контекст.Вставить("ТекущееВыполняемоеДействие", "");
	
	Контекст.Вставить("РезультатыВыполненияДействий", Новый Соответствие());
	
	Возврат Контекст;
	
КонецФункции

// Начинает выполнение действия перед выполнением действий ЭДО
// 
// Параметры:
//  Контекст - см. НовыйКонтекстПередВыполнениемДействийЭДО
//  Действие - Строка - см. ДействияПередВыполнениемДействийЭДО
Процедура НачатьВыполнениеДействияПередВыполнениемДействийЭДО(Контекст, Действие)
	
	Контекст.ДействиеВыполняется = Истина;
	Контекст.ТекущееВыполняемоеДействие = Действие;
	
КонецПроцедуры

// Заканчивает выполнение действия перед выполнением действий ЭДО
// 
// Параметры:
//  Контекст - см. НовыйКонтекстПередВыполнениемДействийЭДО
//  Действие - Строка - см. ДействияПередВыполнениемДействийЭДО
Процедура ЗакончитьВыполнениеДействияПередВыполнениемДействийЭДО(Контекст, Действие)
	
	Контекст.ДействиеВыполняется = Ложь;
	Контекст.ТребуемыеДействия[Действие] = Ложь;
	Контекст.ТекущееВыполняемоеДействие = "";
	
КонецПроцедуры

// Проверяет, требуется ли выполнить действие перед выполнением действий ЭДО
// 
// Параметры:
//  Контекст - см. НовыйКонтекстПередВыполнениемДействийЭДО
//  Действие - Строка - см. ДействияПередВыполнениемДействийЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ТребуетсяВыполнитьДействиеПередВыполнениемДействийЭДО(Контекст, Действие)
	
	Если Контекст.ДействиеВыполняется Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Контекст.ТребуемыеДействия[Действие] <> Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Набор действий перед выполнением действий ЭДО БЭД
// 
// Возвращаемое значение:
//  Структура:
// * СформироватьДокументыЭДО - Строка - 
Функция ДействияПередВыполнениемДействийЭДО()
	
	Действия = Новый Структура;
	Действия.Вставить("СформироватьДокументыЭДО", "СформироватьДокументыЭДО");
	
	Возврат Действия;
	
КонецФункции

// Выполняет действия перед выполнение действий по ЭДО
// 
// Параметры:
//  Контекст - см. НовыйКонтекстПередВыполнениемДействийЭДО
Процедура ВыполнитьДействияПередВыполнениемДействийЭДО(Контекст)
	
	ВыполнитьСозданиеДокументовЭДОПередВыполнениемДействийЭДО(Контекст);
	
	ЗакончитьВыполнениеДействийПередВыполнениемДействийЭДО(Контекст);
	
КонецПроцедуры

// Оканчивает выполнение действий перед выполнением действий ЭДО
// 
// Параметры:
//  Контекст - см. НовыйКонтекстПередВыполнениемДействийЭДО
Процедура ЗакончитьВыполнениеДействийПередВыполнениемДействийЭДО(Контекст)
	
	Если Контекст.ДействиеВыполняется Тогда
		Возврат;
	КонецЕсли;
	
	РезультатСозданияЭДО = Контекст.РезультатыВыполненияДействий[
		ДействияПередВыполнениемДействийЭДО().СформироватьДокументыЭДО]; // см. НовыйРезультатСозданияЭДОПередВыполнениемДействийЭДО
	
	ПараметрыВыполнения = Контекст.ПараметрыВыполнения;
	ОбъектыУчета = ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета;
	ДокументыЭДО = ПараметрыВыполнения.ОбъектыДействий.ЭлектронныеДокументы; // Массив Из ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
	
	ТекущийИндекс = 0;
	Пока ТекущийИндекс <= ОбъектыУчета.ВГраница() Цикл
		
		ОбъектУчета = ОбъектыУчета[ТекущийИндекс];
		СозданныйЭДО = РезультатСозданияЭДО[ОбъектУчета];
		Если СозданныйЭДО <> Неопределено Тогда
			ДокументыЭДО.Добавить(СозданныйЭДО);
			ОбъектыУчета.Удалить(ТекущийИндекс);
		Иначе
			ТекущийИндекс = ТекущийИндекс + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ИнтерфейсДокументовЭДОКлиент.НачатьВыполнениеДействийПоЭДО(
		Контекст.ОбработчикЗавершения, ПараметрыВыполнения, Контекст.КонтекстДиагностики);
	
КонецПроцедуры

#Область СозданиеДокументовЭДОПередВыполнениемДействийЭДО

// Выполняет создание ЭДО перед выполнением действий БЭД
// 
// Параметры:
//  КонтекстПередВыполнениемДействийЭДО - см. НовыйКонтекстПередВыполнениемДействийЭДО
Процедура ВыполнитьСозданиеДокументовЭДОПередВыполнениемДействийЭДО(КонтекстПередВыполнениемДействийЭДО)
	
	Действие = ДействияПередВыполнениемДействийЭДО().СформироватьДокументыЭДО;
	Если Не ТребуетсяВыполнитьДействиеПередВыполнениемДействийЭДО(КонтекстПередВыполнениемДействийЭДО, Действие) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьВыполнениеДействияПередВыполнениемДействийЭДО(КонтекстПередВыполнениемДействийЭДО, Действие);
	
	ОбъектыУчета = КонтекстПередВыполнениемДействийЭДО.ПараметрыВыполнения.ОбъектыДействий.ОбъектыУчета;
	ДокументыКСозданию = Новый Массив(); // Массив Из СправочникСсылка.ДокументыПредприятия
	Для Каждого Объект Из ОбъектыУчета Цикл
		Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Объект) Тогда
			ДокументыКСозданию.Добавить(Объект);
		КонецЕсли;
	КонецЦикла;
	
	Контекст = НовыйКонтекстСозданияЭДОПередВыполнениемДействийЭДО();
	Контекст.КонтекстПередВыполнениемДействийЭДО = КонтекстПередВыполнениемДействийЭДО;
	Контекст.ДокументыДОКСозданию = ДокументыКСозданию;
	
	НачатьЦиклСозданияЭДОПередДействиямиЭДО(Контекст);
	
КонецПроцедуры

// Конструктор контекста создания исходящих ЭДО перед выполнением действий БЭД
// 
// Возвращаемое значение:
//  Структура - Новый контекст создания ЭДОПеред выполнением действий ЭДО:
// * КонтекстПередВыполнениемДействийЭДО - см. НовыйКонтекстПередВыполнениемДействийЭДО
// * ДокументыДОКСозданию - Массив Из СправочникСсылка.ДокументыПредприятия
// * ИндексТекущегоДокумента - Число - 
// * ТекущийДокумент - СправочникСсылка.ДокументыПредприятия - 
// * ОбработанныеДокументы - Соответствие Из КлючИЗначение:
//    ** Ключ - СправочникСсылка.ДокументыПредприятия
//    ** Значение - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция НовыйКонтекстСозданияЭДОПередВыполнениемДействийЭДО()
	
	Контекст = Новый Структура;
	Контекст.Вставить("КонтекстПередВыполнениемДействийЭДО", НовыйКонтекстПередВыполнениемДействийЭДО());
	Контекст.Вставить("ДокументыДОКСозданию", Новый Массив());
	Контекст.Вставить("ИндексТекущегоДокумента", -1);
	Контекст.Вставить("ТекущийДокумент", ПредопределенноеЗначение("Справочник.ДокументыПредприятия.ПустаяСсылка"));
	Контекст.Вставить("ОбработанныеДокументы", Новый Соответствие());
	
	Возврат Контекст;
	
КонецФункции

// Конструктор результат создания исходящих ЭДО перед 
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - СправочникСсылка.ДокументыПредприятия
//    * Значение - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция НовыйРезультатСозданияЭДОПередВыполнениемДействийЭДО()
	
	Возврат Новый Соответствие();
	
КонецФункции

// Начало цикла создания исходящих документов ЭДО перед выполнением действий ЭДО
// 
// Параметры:
//  Контекст - см. НовыйКонтекстСозданияЭДОПередВыполнениемДействийЭДО
Процедура НачатьЦиклСозданияЭДОПередДействиямиЭДО(Контекст)
	
	Если Не ИтерироватьЦиклСозданияЭДОПередДействиямиЭДО(Контекст) Тогда
		ЗавершитьСозданиеЭДОПередДействиямЭДО(Контекст);
		Возврат;
	КонецЕсли;
	
	ОбработчикСоздания = Новый ОписаниеОповещения("ОбработатьСозданиеЭДОПередДействиямиЭДО", ЭтотОбъект, Контекст);
	
	ПараметрыСоздания = НовыеПараметрыСозданияИсходящегоЭДОПоДокументуДО();
	ПараметрыСоздания.Документ = Контекст.ТекущийДокумент;
	ПараметрыСоздания.ОбработчикЗавершения = ОбработчикСоздания;
	ПараметрыСоздания.ПоказатьКарточкуСозданногоДокумента = Ложь;
	
	СоздатьИсходящийЭДОПоДокументуДО(ПараметрыСоздания);
	
КонецПроцедуры

// Итерирует цикл создания исходящих документов эДО перед выполнением действий ЭДО
// 
// Параметры:
//  Контекст - см. НовыйКонтекстСозданияЭДОПередВыполнениемДействийЭДО
// 
// Возвращаемое значение:
//  Булево
Функция ИтерироватьЦиклСозданияЭДОПередДействиямиЭДО(Контекст)
	
	Индекс = Контекст.ИндексТекущегоДокумента;
	Индекс = Индекс + 1;
	
	Если Индекс > Контекст.ДокументыДОКСозданию.ВГраница() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Контекст.ИндексТекущегоДокумента = Индекс;
	Контекст.ТекущийДокумент = Контекст.ДокументыДОКСозданию[Индекс];
	
	Возврат Истина;
	
КонецФункции

// Обрабатывает создание документа ЭДО перед выполнением действий ЭДО
// 
// Параметры:
//  ДокументЭДО - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  Контекст - см. НовыйКонтекстСозданияЭДОПередВыполнениемДействийЭДО
Процедура ОбработатьСозданиеЭДОПередДействиямиЭДО(ДокументЭДО, Контекст) Экспорт
	
	Если ЗначениеЗаполнено(ДокументЭДО) Тогда
		Контекст.ОбработанныеДокументы[Контекст.ТекущийДокумент] = ДокументЭДО;
	КонецЕсли;
	
	НачатьЦиклСозданияЭДОПередДействиямиЭДО(Контекст);
	
КонецПроцедуры

// Завершает создание исходящих ЭДО перед выполнением действий ЭДО
// 
// Параметры:
//  Контекст - см. НовыйКонтекстСозданияЭДОПередВыполнениемДействийЭДО
Процедура ЗавершитьСозданиеЭДОПередДействиямЭДО(Контекст)
	
	Действие = ДействияПередВыполнениемДействийЭДО().СформироватьДокументыЭДО;
	
	ВнешнийКонтекст = Контекст.КонтекстПередВыполнениемДействийЭДО;
	
	Результат = НовыйРезультатСозданияЭДОПередВыполнениемДействийЭДО();
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат, Контекст.ОбработанныеДокументы);
	
	ВнешнийКонтекст.РезультатыВыполненияДействий[Действие] = Результат;
	
	ЗакончитьВыполнениеДействияПередВыполнениемДействийЭДО(ВнешнийКонтекст, Действие);
	ВыполнитьДействияПередВыполнениемДействийЭДО(ВнешнийКонтекст);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
