////////////////////////////////////////////////////////////////////////////////
// Общий модуль для работы с виджетами.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует представление даты виджета "Список".
//
// Параметры:
//  Дата - Дата
// 
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеДатыСписка(Дата) Экспорт
	
	ПредставлениеДатыСписка = "";
	Если Не ЗначениеЗаполнено(Дата) Или Дата = ОбщегоНазначенияДокументооборотКлиентСервер.МаксимальнаяДата() Тогда
		Возврат ПредставлениеДатыСписка;
	КонецЕсли;
	
	Если Дата = НачалоДня(ТекущаяДатаСеанса()) Или Дата = КонецДня(ТекущаяДатаСеанса())Тогда
		ФорматнаяСтрока = "ДФ=dd.MM";
	ИначеЕсли НачалоДня(Дата) = НачалоДня(ТекущаяДатаСеанса()) Тогда
		ФорматнаяСтрока = "ДФ=HH:mm";
	ИначеЕсли НачалоГода(Дата) = НачалоГода(ТекущаяДатаСеанса()) Тогда
		ФорматнаяСтрока = "ДФ=dd.MM";
	Иначе
		ФорматнаяСтрока = "ДФ=yyyy";
	КонецЕсли;
	
	ПредставлениеДатыСписка = Формат(Дата, ФорматнаяСтрока);
	
	Возврат ПредставлениеДатыСписка;
	
КонецФункции

// Формирует структуру данных точки диаграммы виджета.
//
// Возвращаемое значение:
//  Структура - Данные точки диаграммы виджета.
//   * Ключ          - Любой  - Ключ точки.
//   * ЗначениеТочки - Любой  - Значение точки.
//   * Представление - Строка - Представление точки.
//   * Значение      - Любой  - Значение серии в точке.
//   * Расшифровка   - Любой  - Расшифровки значения серии в точке.
//   * Подсказка     - Строка - Подсказка значения серии в точке.
//
Функция ДанныеТочкиДиаграммы() Экспорт
	
	ДанныеТочкиДиаграммы = Новый Структура("Ключ, ЗначениеТочки, Представление, Значение, Расшифровка, Подсказка");
	ДанныеТочкиДиаграммы.Ключ = Неопределено;
	ДанныеТочкиДиаграммы.ЗначениеТочки = Неопределено;
	ДанныеТочкиДиаграммы.Представление = "";
	ДанныеТочкиДиаграммы.Значение = Неопределено;
	ДанныеТочкиДиаграммы.Расшифровка = Неопределено;
	ДанныеТочкиДиаграммы.Подсказка = "";
	
	Возврат ДанныеТочкиДиаграммы;
	
КонецФункции

// Формирует структуру данных строки списка виджета.
// 
// Возвращаемое значение:
//  Структура - Данные строки списка виджета.
//   * ИндексКартинки - Число.
//   * Значение - Строка.
//   * Ссылка - Строка.
//   * Комментарий - Строка.
//
Функция ДанныеСтрокиСписка() Экспорт
	
	ДанныеСтрокиСписка = Новый Структура("ИндексКартинки, Значение, Ссылка, Комментарий");
	ДанныеСтрокиСписка.ИндексКартинки = -1;
	ДанныеСтрокиСписка.Значение = "";
	ДанныеСтрокиСписка.Ссылка = "";
	ДанныеСтрокиСписка.Комментарий = "";
	
	Возврат ДанныеСтрокиСписка;
	
КонецФункции

// Определяет максимальное количество строк, отображаемых в виджете "Список".
// 
// Возвращаемое значение:
//  Число - Максимальное количество строк, отображаемых в виджете "Список".
//
Функция МаксимальноеКоличествоСтрокВиджетаСписок() Экспорт
	
	Возврат ?(ОбщегоНазначения.ЭтоМобильныйКлиент(), 1, 5);
	
КонецФункции

// Процедура фонового задание, которое рассчитывает реквизиты виджетов по нужным значениям.
//
// Параметры:
//  ПоказателиДляОтложенногоОбновления - Массив из Строка
//  ИдентификаторКлиента - УникальныйИдентификатор
//
Процедура ФоновоеОбновлениеВиджетов(ПоказателиДляОтложенногоОбновления, ИдентификаторКлиента) Экспорт
	
	ЗначениеКлюча = Новый Структура;
	ЗначениеКлюча.Вставить("Пользователь", Пользователи.ТекущийПользователь());
	ЗначениеКлюча.Вставить("ИдентификаторКлиента", ИдентификаторКлиента);
	ЗначениеКлюча.Вставить("Показатель", Справочники.ПоказателиВиджетов.ПустаяСсылка());
	КлючЗаписи = РегистрыСведений.ЗначенияПоказателейВиджетов.СоздатьКлючЗаписи(ЗначениеКлюча);
	ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
	
	ВремяНачалаЗамераФоновоеОбновление = ОценкаПроизводительности.НачатьЗамерВремени();
	
	ЗначенияПоказателей = Новый Соответствие;
	
	ВыраженияПоказателей = Справочники.ПоказателиВиджетов.ВыраженияПоказателей(ПоказателиДляОтложенногоОбновления);
	Для Каждого Показатель Из ПоказателиДляОтложенногоОбновления Цикл
		
		Попытка
			
			ВыражениеПоказателя = ВыраженияПоказателей[Показатель];
			ЗначениеПоказателя = ВычислитьЗначениеВыражения(ВыражениеПоказателя, ИдентификаторКлиента);
			
			ЗначенияПоказателей[Показатель] = ЗначениеПоказателя;
			
		Исключение
			
			// При ошибки обновления одного показателя просто пропускаем его, не останавливаем всё обновление.
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Если ТранзакцияАктивна() Тогда
				ВызватьИсключение;
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЦикла;
	
	РегистрыСведений.ЗначенияПоказателейВиджетов.ОбновитьЗначенияПоказателей(
		Пользователи.ТекущийПользователь(),
		ИдентификаторКлиента,
		ЗначенияПоказателей);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(
		"РабочийСтолФоновоеОбновление",
		ВремяНачалаЗамераФоновоеОбновление);
	
КонецПроцедуры

// Обновляет значения реквизитов виджетов.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения.
//
Процедура ОбновитьРеквизитыВиджетов(Форма) Экспорт
	
	ЭтоМобильныйКлиент = ПараметрыСеанса.ЭтоМобильныйКлиент;
	ОбновленныеЗначенияПоказателейВиджетов = ОбновленныеЗначенияПоказателейВиджетов(Форма);
	
	Для Каждого ДанныеРеквизита Из Форма.ТаблицаРеквизитовВиджетов Цикл
		
		Если ЗначениеЗаполнено(ДанныеРеквизита.Выражение) Тогда
			
			СтруктураЗначенияПоказателя = ОбновленныеЗначенияПоказателейВиджетов[ДанныеРеквизита.Показатель];
			Если СтруктураЗначенияПоказателя = Неопределено И Не Форма.ФлагИспользоватьФоновоеОбновление Тогда
				Продолжить;
			КонецЕсли;
			
			ПредставлениеЗначениеПоказателя = ПредставлениеСтруктурыЗначенияПоказателя(СтруктураЗначенияПоказателя);
			Если ДанныеРеквизита.ПолеОтображения = "Список" Тогда
				
				Если ДанныеРеквизита.ИмяРеквизитаВиджета = "ДанныеСписка" Тогда
					
					ДанныеСписка = ?(СтруктураЗначенияПоказателя <> Неопределено,
						СтруктураЗначенияПоказателя.ЗначениеПоказателя,
						Новый Массив);
					
					ЕстьКомментарии = Ложь;
					
					Для Каждого ДанныеСтрокиСписка Из ДанныеСписка Цикл
						
						Если ЗначениеЗаполнено(ДанныеСтрокиСписка.Комментарий) Тогда
							
							ЕстьКомментарии = Истина;
							
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
					Для НомерСтроки = 1 По МаксимальноеКоличествоСтрокВиджетаСписок() Цикл
						
						ОсноваИмениРеквизита = "Строка" + НомерСтроки;
						
						ДанныеСтрокиСписка = ?(НомерСтроки <= ДанныеСписка.Количество(),
							ДанныеСписка[НомерСтроки - 1],
							Неопределено);
						ЕстьДанныеСтроки = ДанныеСтрокиСписка <> Неопределено;
						Если ДанныеСтрокиСписка = Неопределено Тогда
							ДанныеСтрокиСписка = ДанныеСтрокиСписка();
						КонецЕсли;
						
						// Видимость строки.
						ИмяГруппыСтроки = РаботаСВиджетамиКлиентСервер.ПараметрВиджета(
							Форма,
							ДанныеРеквизита.ИмяВиджета,
							ОсноваИмениРеквизита,
							"ГруппаСтроки");
						ГруппаСтроки = Форма.Элементы[ИмяГруппыСтроки];
						ГруппаСтроки.Видимость = ЕстьДанныеСтроки;
						// Картинка строки.
						КартинкаОтображается = Ложь;
						Если Не ЭтоМобильныйКлиент Тогда
							ИмяКартинкиСтроки = РаботаСВиджетамиКлиентСервер.ПараметрВиджета(
								Форма,
								ДанныеРеквизита.ИмяВиджета,
								ОсноваИмениРеквизита,
								"КартинкаСтроки");
							Если ИмяКартинкиСтроки <> Неопределено Тогда
								КартинкаСтроки = Форма.Элементы[ИмяКартинкиСтроки];
								Форма[КартинкаСтроки.ПутьКДанным] = ДанныеСтрокиСписка.ИндексКартинки;
								КартинкаСтроки.Видимость = ДанныеСтрокиСписка.ИндексКартинки <> -1;
								УстановитьПараметрВиджета(
									Форма,
									ДанныеРеквизита.ИмяВиджета,
									КартинкаСтроки.Имя,
									"СсылкаДляПерехода",
									ДанныеСтрокиСписка.Ссылка);
								КартинкаОтображается = КартинкаСтроки.Видимость;
							КонецЕсли;
						КонецЕсли;
						
						// Дата строки.
						ИмяКомментарийСтроки = РаботаСВиджетамиКлиентСервер.ПараметрВиджета(
							Форма,
							ДанныеРеквизита.ИмяВиджета,
							ОсноваИмениРеквизита,
							"КомментарийСтроки");
						КомментарийСтроки = Форма.Элементы[ИмяКомментарийСтроки];
						КомментарийСтроки.Заголовок = ДанныеСтрокиСписка.Комментарий;
						КомментарийСтроки.Видимость = ЗначениеЗаполнено(КомментарийСтроки.Заголовок);
						УстановитьПараметрВиджета(
							Форма,
							ДанныеРеквизита.ИмяВиджета,
							КомментарийСтроки.ИмяКоманды,
							"СсылкаДляПерехода",
							ДанныеСтрокиСписка.Ссылка);
						
						// Заголовок строки.
						ИмяЗаголовкаСтроки = РаботаСВиджетамиКлиентСервер.ПараметрВиджета(
							Форма,
							ДанныеРеквизита.ИмяВиджета,
							ОсноваИмениРеквизита,
							"ЗаголовокСтроки");
						ЗаголовокСтроки = Форма.Элементы[ИмяЗаголовкаСтроки];
						
						ОграничениеДлиныКоманды = 25;
						Если ЕстьКомментарии Тогда
							ОграничениеДлиныКоманды = ОграничениеДлиныКоманды - 5;
						КонецЕсли;
						Если КартинкаОтображается Тогда
							ОграничениеДлиныКоманды = ОграничениеДлиныКоманды - 3;
						КонецЕсли;
						
						СтрокаСокращения = "...";
						ЗаголовокСтроки.Заголовок =
							?(СтрДлина(ДанныеСтрокиСписка.Значение) > ОграничениеДлиныКоманды,
								Лев(ДанныеСтрокиСписка.Значение, ОграничениеДлиныКоманды - СтрДлина(СтрокаСокращения)) + СтрокаСокращения,
								ДанныеСтрокиСписка.Значение);
						Если Не ЗначениеЗаполнено(ЗаголовокСтроки.Заголовок) Тогда
							ЗаголовокСтроки.Заголовок = СтрокаСокращения;
						КонецЕсли;
						
						Форма.Команды[ЗаголовокСтроки.ИмяКоманды].Подсказка = ДанныеСтрокиСписка.Значение;
						УстановитьПараметрВиджета(
							Форма,
							ДанныеРеквизита.ИмяВиджета,
							ЗаголовокСтроки.ИмяКоманды,
							"СсылкаДляПерехода",
							ДанныеСтрокиСписка.Ссылка);
					
					КонецЦикла;
					
				Иначе
					ОсноваИмениРеквизита = ДанныеРеквизита.ИмяРеквизитаВиджета;
						ЕстьДанныеСтроки = СтруктураЗначенияПоказателя <> Неопределено
							И ЗначениеЗаполнено(СтруктураЗначенияПоказателя.ЗначениеПоказателя);
					
					Если Не ЭтоМобильныйКлиент Тогда
						// Видимость строки.
						ИмяГруппыСтроки = РаботаСВиджетамиКлиентСервер.ПараметрВиджета(
							Форма,
							ДанныеРеквизита.ИмяВиджета,
							ОсноваИмениРеквизита,
							"ГруппаСтроки");
						ГруппаСтроки = Форма.Элементы[ИмяГруппыСтроки];
						ГруппаСтроки.Видимость = ЕстьДанныеСтроки;
						
						// Картинка строки.
						ИмяКартинкиСтроки = РаботаСВиджетамиКлиентСервер.ПараметрВиджета(
							Форма,
							ДанныеРеквизита.ИмяВиджета,
							ОсноваИмениРеквизита,
							"КартинкаСтроки");
						
						Если ИмяКартинкиСтроки <> Неопределено Тогда
							КартинкаСтроки = Форма.Элементы[ИмяКартинкиСтроки];
								Форма[КартинкаСтроки.ПутьКДанным] = 0;
						КонецЕсли;
					
						// Заголовок строки.
						ИмяЗаголовкаСтроки = РаботаСВиджетамиКлиентСервер.ПараметрВиджета(
							Форма,
							ДанныеРеквизита.ИмяВиджета,
							ОсноваИмениРеквизита,
							"ЗаголовокСтроки");
						ЗаголовокСтроки = Форма.Элементы[ИмяЗаголовкаСтроки];
						ЗаголовокСтроки.Заголовок = ДанныеРеквизита.ОсноваЗаголовка + ": " + ПредставлениеЗначениеПоказателя;
					КонецЕсли;
				КонецЕсли;
				
				// Настраиваем видимость "пустого списка" и скрытие лишних строк.
				МаксимальноеКоличествоСтрок = МаксимальноеКоличествоСтрокВиджетаСписок();
				Если Не ЭтоМобильныйКлиент Тогда
					ЕстьДополнительныеЭлементы = РаботаСВиджетамиКлиентСервер.ПараметрВиджета(
						Форма,
						ДанныеРеквизита.ИмяВиджета,
						ДанныеРеквизита.ИмяВиджета,
						"ЕстьДополнительныеЭлементы");
				
					Если ЕстьДополнительныеЭлементы Тогда
						МаксимальноеКоличествоСтрок = МаксимальноеКоличествоСтрок - 1;
					КонецЕсли;
					
					КоличествоВидимыхСтрок = 0;
					ИменаВсехСтрокСписка = РаботаСВиджетамиКлиентСервер.ПараметрВиджета(
						Форма,
						ДанныеРеквизита.ИмяВиджета,
						ДанныеРеквизита.ИмяВиджета,
						"ВсеСтрокиСписка");
				
					Для Каждого ИмяСтрокиСписка Из ИменаВсехСтрокСписка Цикл
						
						СтрокаСписка = Форма.Элементы[ИмяСтрокиСписка];
						Если СтрокаСписка.Видимость Тогда
							Если КоличествоВидимыхСтрок < МаксимальноеКоличествоСтрок Тогда
								КоличествоВидимыхСтрок = КоличествоВидимыхСтрок + 1;
							Иначе
								СтрокаСписка.Видимость = Ложь;
							КонецЕсли;
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;
				
				ИмяПодписьИдетРасчет = РаботаСВиджетамиКлиентСервер.ПараметрВиджета(
					Форма,
					ДанныеРеквизита.ИмяВиджета,
					ДанныеРеквизита.ИмяВиджета,
					"ПодписьИдетРасчет");
				ПодписьИдетРасчет = Форма.Элементы[ИмяПодписьИдетРасчет];
				Если ЭтоМобильныйКлиент Тогда
					ПодписьИдетРасчет.Видимость = СтруктураЗначенияПоказателя = Неопределено И Не ЕстьДанныеСтроки;
				Иначе
					ПодписьИдетРасчет.Видимость = СтруктураЗначенияПоказателя = Неопределено И КоличествоВидимыхСтрок = 0;
				КонецЕсли;
				
				ИмяПодписьПустого = РаботаСВиджетамиКлиентСервер.ПараметрВиджета(
					Форма,
					ДанныеРеквизита.ИмяВиджета,
					ДанныеРеквизита.ИмяВиджета,
					"ПодписьПустого");
				ПодписьПустого = Форма.Элементы[ИмяПодписьПустого];
				Если ЭтоМобильныйКлиент Тогда
					ПодписьПустого.Видимость = СтруктураЗначенияПоказателя <> Неопределено И Не ЕстьДанныеСтроки; 
				Иначе
					ПодписьПустого.Видимость = СтруктураЗначенияПоказателя <> Неопределено И КоличествоВидимыхСтрок = 0;
				КонецЕсли;
				
				ИмяКартинкаПустого = РаботаСВиджетамиКлиентСервер.ПараметрВиджета(
					Форма,
					ДанныеРеквизита.ИмяВиджета,
					ДанныеРеквизита.ИмяВиджета,
					"КартинкаПустого");
				
				Если ЗначениеЗаполнено(ИмяКартинкаПустого) Тогда
					КартинкаПустого = Форма.Элементы[ИмяКартинкаПустого];
					Если ЭтоМобильныйКлиент Тогда
						КартинкаПустого.Видимость = Не ЕстьДанныеСтроки;
					Иначе
						КартинкаПустого.Видимость = КоличествоВидимыхСтрок = 0;
					КонецЕсли;	
				КонецЕсли;
				
				Если ЭтоМобильныйКлиент Тогда
					ИмяГруппыСПоказателем = РаботаСВиджетамиКлиентСервер.ПараметрВиджета(
						Форма,
						ДанныеРеквизита.ИмяВиджета,
						ДанныеРеквизита.ИмяВиджета,
						"ГруппаСПоказателем");
					Если ЗначениеЗаполнено(ИмяГруппыСПоказателем) Тогда
						ГруппаСПоказателем = Форма.Элементы[ИмяГруппыСПоказателем];
						ГруппаСПоказателем.Видимость = СтруктураЗначенияПоказателя <> Неопределено И ЕстьДанныеСтроки;
					КонецЕсли;
					
				КонецЕсли;
			
			ИначеЕсли ЗначениеЗаполнено(ДанныеРеквизита.ПолеОтображения) Тогда
				
				// Примеры заголовков:
				//    Задачи мне
				//    Задачи мне: 999
				//    999 на ознакомление
				//    999
				//    0
				ЧисловоеЗначениеПоказателя = 0;
				ЭтоМаксимальноеЗначениеПоказателя = Ложь;
				
				МассивЗаголовка = Новый Массив;
				Если ЗначениеЗаполнено(ДанныеРеквизита.ОсноваЗаголовка) И ДанныеРеквизита.ПоложениеЗаголовка <> "Право" Тогда
					МассивЗаголовка.Добавить(ДанныеРеквизита.ОсноваЗаголовка);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ПредставлениеЗначениеПоказателя) И ПредставлениеЗначениеПоказателя <> "0" Тогда
					Если ЭтоМобильныйКлиент Тогда
						Если СтрСравнить(ПредставлениеЗначениеПоказателя, ">9999") = 0 Тогда
							ЭтоМаксимальноеЗначениеПоказателя = Истина;
						Иначе 
							Попытка
								ЧисловоеЗначениеПоказателя = Число(ПредставлениеЗначениеПоказателя);
							Исключение
								ЧисловоеЗначениеПоказателя = 0;
							КонецПопытки;
							ПредставлениеЗначениеПоказателя = Формат(ЧисловоеЗначениеПоказателя, "ЧГ=;");
						КонецЕсли
					КонецЕсли;
					МассивЗаголовка.Добавить(ПредставлениеЗначениеПоказателя);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеРеквизита.ОсноваЗаголовка) И ДанныеРеквизита.ПоложениеЗаголовка = "Право" Тогда
					МассивЗаголовка.Добавить(НРег(ДанныеРеквизита.ОсноваЗаголовка));
				КонецЕсли;
				Если МассивЗаголовка.Количество() = 0 Тогда
					МассивЗаголовка.Добавить("0");
				КонецЕсли;
				
				РазделительЧастейЗаголовка = ?(ДанныеРеквизита.ПоложениеЗаголовка = "Право", " ", ": ");
				
				Если ЭтоМобильныйКлиент Тогда
					
					ПолеОтображения = Форма.Элементы[ДанныеРеквизита.ПолеОтображения];
					Если ПолеОтображения.Вид = ВидДекорацииФормы.Картинка Тогда
						ПолеОтображения.ТекстНевыбраннойКартинки =
							СтрСоединить(МассивЗаголовка, РазделительЧастейЗаголовка);
					Иначе
						Если ПолеОтображения.Вид = ВидКнопкиФормы.ОбычнаяКнопка Тогда
							Если ЧисловоеЗначениеПоказателя >= Форма.МК_ПорогДляНовых
								Или ЭтоМаксимальноеЗначениеПоказателя Тогда
								ПолеОтображения.ЦветФона = ЦветаСтиля.МК_ЦветПоказателяПревышениеПорога;
								ПолеОтображения.ЦветТекста = ЦветаСтиля.МК_ЦветФонаГруппы;
							Иначе
								Если ЧисловоеЗначениеПоказателя = 0 Тогда
									ЦветФонаРодителя = ПолеОтображения.Родитель.ЦветФона;
									ПолеОтображения.ЦветТекста = ЦветФонаРодителя;
									ПолеОтображения.ЦветФона = ЦветФонаРодителя;
								Иначе
									ПолеОтображения.ЦветТекста = ЦветаСтиля.МК_ЦветФонаГруппы;
									ПолеОтображения.ЦветФона = ЦветаСтиля.ЦветАкцента;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						ПолеОтображения.Заголовок =
							СтрСоединить(МассивЗаголовка, РазделительЧастейЗаголовка);
					КонецЕсли;
					
				Иначе
					Форма.Элементы[ДанныеРеквизита.ПолеОтображения].Заголовок =
						СтрСоединить(МассивЗаголовка, РазделительЧастейЗаголовка);
				КонецЕсли;
				
			Иначе
				
				Форма[ДанныеРеквизита.ИмяРеквизитаФормы] = ПредставлениеЗначениеПоказателя;
				
			КонецЕсли;
			
			Если СтруктураЗначенияПоказателя <> Неопределено И ДанныеРеквизита.СкрыватьПустой Тогда
				Форма.Элементы[ДанныеРеквизита.ПолеОтображения].Видимость =
					ЗначениеЗаполнено(СтруктураЗначенияПоказателя.ЗначениеПоказателя);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Форма[ДанныеРеквизита.ИмяРеквизитаФормы]) = Тип("Диаграмма") Тогда
			
			ТочкиОчищены = Ложь;
			РеквизитДиаграмма = Форма[ДанныеРеквизита.ИмяРеквизитаФормы];
			РеквизитДиаграмма.Обновление = Ложь;
			СуммаДиаграммы = 0;
			Для Каждого СерияПоказателя Из РеквизитДиаграмма.Серии Цикл
				
				Показатель = РаботаСВиджетамиКлиентСервер.ПараметрВиджета(
					Форма,
					ДанныеРеквизита.ИмяВиджета,
					ДанныеРеквизита.ИмяРеквизитаФормы,
					СерияПоказателя.Значение + "Показатель");
				СтруктураЗначенияПоказателя = ОбновленныеЗначенияПоказателейВиджетов[Показатель];
				Если СтруктураЗначенияПоказателя = Неопределено И Не Форма.ФлагИспользоватьФоновоеОбновление Тогда
					Продолжить;
				КонецЕсли;
				
				Если Не ТочкиОчищены Тогда
					РеквизитДиаграмма.Точки.Очистить();
					ТочкиОчищены = Истина;
				КонецЕсли;
				
				ЗначениеПоказателя = ЗначениеСтруктурыЗначенияПоказателя(СтруктураЗначенияПоказателя);
				Если ТипЗнч(ЗначениеПоказателя) = Тип("Массив") Тогда
					
					Для Каждого ДанныеТочки Из ЗначениеПоказателя Цикл
						
						ТочкаЗначениеПоказателя = РеквизитДиаграмма.УстановитьТочку(ДанныеТочки.Ключ);
						ТочкаЗначениеПоказателя.Значение = ДанныеТочки.ЗначениеТочки;
						ТочкаЗначениеПоказателя.Текст = ДанныеТочки.Представление;
						
						РеквизитДиаграмма.УстановитьЗначение(
							ТочкаЗначениеПоказателя,
							СерияПоказателя,
							ДанныеТочки.Значение,
							?(ДанныеТочки.Расшифровка <> Неопределено,
								Новый Структура("Серия, Точка", СерияПоказателя.Значение, ДанныеТочки.Расшифровка),
								Неопределено),
							ДанныеТочки.Подсказка);
						
					КонецЦикла;
					
				Иначе
					
					ТочкаЗначениеПоказателя = РеквизитДиаграмма.УстановитьТочку("");
					
					ПредставлениеЗначениеПоказателя =
						 ПредставлениеСтруктурыЗначенияПоказателя(СтруктураЗначенияПоказателя);
					РеквизитДиаграмма.УстановитьЗначение(
						ТочкаЗначениеПоказателя,
						СерияПоказателя,
						ЗначениеПоказателя,
						?(СерияПоказателя.Расшифровка = Истина,
							Новый Структура("Серия, Точка", СерияПоказателя.Значение, Неопределено),
							Неопределено),
						СерияПоказателя.Значение + " " + ПредставлениеЗначениеПоказателя);
					
					Если ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
						СуммаДиаграммы = СуммаДиаграммы + ЗначениеПоказателя;
					КонецЕсли;
						
				КонецЕсли;
				
			КонецЦикла;
			
			Если РеквизитДиаграмма.ТипДиаграммы = ТипДиаграммы.Кольцевая Тогда
				// Платформа не поддерживает интерактивный заголовок в кольцевой диаграмме.
				// Пока что скрываем его.
				РеквизитДиаграмма.ОбластьЗаголовка.Текст = "";
			КонецЕсли;
			
			РеквизитДиаграмма.Обновление = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.ФлагОбновитьВсеРеквизитыВиджетов = Ложь;
	
КонецПроцедуры

// Создает виджет.
//
Функция СоздатьВиджет(Форма, ДанныеВиджета, Родитель) Экспорт
	
	ЭтоМобильныйКлиент = ПараметрыСеанса.ЭтоМобильныйКлиент;
	
	// Создадим виджет.
	Если ДанныеВиджета.Вид = Перечисления.ВидыВиджетов.Альтернативный Тогда
		
		ГруппаВиджета = СоздатьВиджетАльтернативный(Форма, ДанныеВиджета, Родитель);
		
	ИначеЕсли ДанныеВиджета.Вид = Перечисления.ВидыВиджетов.БлокНавигации Тогда
		
		ГруппаВиджета = СоздатьВиджетБлокНавигации(Форма, ДанныеВиджета, Родитель);
		
	ИначеЕсли ДанныеВиджета.Вид = Перечисления.ВидыВиджетов.Диаграмма Тогда
		
		Если ЭтоМобильныйКлиент Тогда
			ГруппаВиджета =
				МК_АдаптацияИнтерфейсаСервер.АдаптироватьВиджетДиаграмма(Форма, ДанныеВиджета, Родитель);
		Иначе
			ГруппаВиджета = СоздатьВиджетДиаграмма(Форма, ДанныеВиджета, Родитель);
		КонецЕсли;
		
	ИначеЕсли ДанныеВиджета.Вид = Перечисления.ВидыВиджетов.ДиаграммаСЛегендой Тогда
		Если ЭтоМобильныйКлиент Тогда
			ГруппаВиджета = МК_АдаптацияИнтерфейсаСервер.СоздатьВиджетДиаграммаСЛегендой(
				Форма,
				ДанныеВиджета,
				Родитель);
		Иначе
			ГруппаВиджета = СоздатьВиджетДиаграммаСЛегендой(Форма, ДанныеВиджета, Родитель);
		КонецЕсли;
		
	ИначеЕсли ДанныеВиджета.Вид = Перечисления.ВидыВиджетов.Заголовок Тогда
		
		Если ЭтоМобильныйКлиент Тогда
			ГруппаВиджета =
				МК_АдаптацияИнтерфейсаСервер.СоздатьВиджетЗаголовок(Форма, ДанныеВиджета, Родитель);
		Иначе
			ГруппаВиджета = СоздатьВиджетЗаголовок(Форма, ДанныеВиджета, Родитель);
		КонецЕсли;	
		
	ИначеЕсли ДанныеВиджета.Вид = Перечисления.ВидыВиджетов.Команда Тогда
		
		ГруппаВиджета = СоздатьВиджетКоманду(Форма, ДанныеВиджета, Родитель);
		
	ИначеЕсли ДанныеВиджета.Вид = Перечисления.ВидыВиджетов.Показатели Тогда
		
		Если ЭтоМобильныйКлиент Тогда
			ГруппаВиджета = 
				МК_АдаптацияИнтерфейсаСервер.СоздатьВиджетПоказатели(Форма, ДанныеВиджета, Родитель);
		Иначе
			ГруппаВиджета = СоздатьВиджетПоказатели(Форма, ДанныеВиджета, Родитель);
		КонецЕсли;
		
	ИначеЕсли ДанныеВиджета.Вид = Перечисления.ВидыВиджетов.Список Тогда
		
		Если ЭтоМобильныйКлиент Тогда
			ГруппаВиджета = МК_АдаптацияИнтерфейсаСервер.АдаптироватьВиджетСписок(
				Форма,
				ДанныеВиджета,
				Родитель);
		Иначе
			ГруппаВиджета = СоздатьВиджетСписок(Форма, ДанныеВиджета, Родитель);
		КонецЕсли;
			
	Иначе
		
		ТекстОшибки = НСтр("ru = 'Неизвестный вид виджета.'");
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Возврат ГруппаВиджета;
	
КонецФункции

// Удаляет виджеты.
Процедура УдалитьВиджеты(Форма) Экспорт
	
	// Удаляем элементы виджетов.
	Для Каждого ОсновнаяГруппаВиджета Из ОсновныеГруппыВиджетов(Форма) Цикл
		Форма.Элементы.Удалить(ОсновнаяГруппаВиджета);
	КонецЦикла;
	
	// Удаляем реквизиты виджетов.
	ПутиКРеквизитамВиджетов = ПутиКРеквизитамВиджетов(Форма);
	Если ПутиКРеквизитамВиджетов.Количество() <> 0 Тогда
		Форма.ИзменитьРеквизиты(, ПутиКРеквизитамВиджетов);
	КонецЕсли;
	
	// Удаляем команды виджетов.
	Для Каждого КомандаВиджета Из КомандыВиджетов(Форма) Цикл
		Форма.Команды.Удалить(КомандаВиджета);
	КонецЦикла;
	
	// Очищаем служебные реквизиты виджетов.
	Форма.ТаблицаРеквизитовВиджетов.Очистить();
	Форма.ТаблицаДействийВиджетов.Очистить();
	Форма.ТаблицаПараметровВиджетов.Очистить();
	Форма.ТаблицаОсновныхГруппВиджетов.Очистить();
	Форма.ТаблицаКомандВиджетов.Очистить();
	Форма.ФлагОбновитьВсеРеквизитыВиджетов = Ложь;
	
КонецПроцедуры

// Инициализирует форму для работы с виджетами.
Процедура ИнициализироватьФорму(Форма) Экспорт
	
	ДобавляемыеРеквизиты = Новый Массив;
	ИнициализироватьТаблицуРеквизитовВиджетов(Форма, ДобавляемыеРеквизиты);
	ИнициализироватьТаблицуДействийВиджетов(Форма, ДобавляемыеРеквизиты);
	ИнициализироватьТаблицуПараметровВиджетов(Форма, ДобавляемыеРеквизиты);
	ИнициализироватьТаблицуОсновныхГруппВиджетов(Форма, ДобавляемыеРеквизиты);
	ИнициализироватьТаблицуКомандВиджетов(Форма, ДобавляемыеРеквизиты);
	ИнициализироватьФлагОбновитьВсеРеквизитыВиджетов(Форма, ДобавляемыеРеквизиты);
	ИнициализироватьФлагИспользоватьФоновоеОбновление(Форма, ДобавляемыеРеквизиты);
	ИнициализироватьДлительнаяОперацияФоновоеОбновлениеВиджетов(Форма, ДобавляемыеРеквизиты);
	ИнициализироватьЗапомненныеСостоянияВиджетов(Форма, ДобавляемыеРеквизиты);
	Если ДобавляемыеРеквизиты.Количество() <> 0 Тогда
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;
	Форма.ФлагОбновитьВсеРеквизитыВиджетов = Истина;
	ПрочитатьНастройки(Форма);
	
КонецПроцедуры

// Вычисляет значение реквизита.
Функция ВычислитьЗначениеВыражения(Выражение, ИдентификаторКлиента) Экспорт
	
	Параметры = Новый Структура("Результат, ИдентификаторКлиента", Неопределено, ИдентификаторКлиента);
	
	ОбщегоНазначения.ВыполнитьВБезопасномРежиме(Выражение, Параметры);
	
	Возврат Параметры.Результат;
	
КонецФункции

// Проверяет доступность источника.
Функция ИсточникДоступен(Источник) Экспорт
	
	Если Не ЗначениеЗаполнено(Источник) Тогда
		
		ИсточникДоступен = Истина;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникСсылка.Реестры") Тогда
		
		ИсточникДоступен = Истина;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("Строка") Тогда
		
		МетаданныеИсточника = Метаданные.НайтиПоПолномуИмени(Источник);
		Если МетаданныеИсточника = Неопределено Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Не найдены метаданные источника ""%1"".'"),
				Источник);
		КонецЕсли;
		
		ИсточникДоступен = ОбщегоНазначенияДокументооборот.МетаданныеДоступны(МетаданныеИсточника);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный тип источник %1 (%2)'"),
			Источник,
			ТипЗнч(Источник));
		
	КонецЕсли;
	
	Возврат ИсточникДоступен;
	
КонецФункции

// Возвращает действие источника.
Функция ДействиеИсточника(Источник) Экспорт
	
	НРегИсточник = НРег(Источник);
	Если СтрНайти(НРегИсточник, ".команда.") <> 0
		Или СтрНайти(НРегИсточник, "общаякоманда") <> 0 Тогда
		СсылкаДляПерехода = "e1cib/command/" + Источник;
	ИначеЕсли СтрНайти(НРегИсточник, "справочник.") <> 0
		Или СтрНайти(НРегИсточник, "документ.") <> 0
		Или СтрНайти(НРегИсточник, "регистрсведений.") <> 0
		Или СтрНайти(НРегИсточник, "журналдокументов.") <> 0 Тогда
		СсылкаДляПерехода = "e1cib/list/" + Источник;
	ИначеЕсли СтрНайти(НРегИсточник, "обработка.") <> 0 Тогда
		СсылкаДляПерехода = "e1cib/app/" + Источник;
	Иначе
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Неизвестный источник %1.'"), Источник);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	ДействиеИсточника = Перечисления.ДействияВиджетов.ПереходПоСсылке(СсылкаДляПерехода);
	
	Возврат ДействиеИсточника;
	
КонецФункции

// Запоминает состояние рабочего стола.
Процедура ЗапомнитьСостояниеВиджетов(Форма) Экспорт
	
	Форма.ЗапомненныеСостоянияВиджетов = Новый СписокЗначений;
	
	// Текущий блок навигации.
	Для Каждого СтрокаПараметраВиджета Из Форма.ТаблицаПараметровВиджетов Цикл
		
		Если СтрокаПараметраВиджета.ИмяПараметра <> "ТекущийБлокНавигации" Тогда
			Продолжить;
		КонецЕсли;
		
		ЗапомненноеСостояниеВиджета = Новый Структура;
		ЗапомненноеСостояниеВиджета.Вставить("Состояние", "ТекущийБлокНавигации");
		ЗапомненноеСостояниеВиджета.Вставить("ИмяВиджета", СтрокаПараметраВиджета.ИмяВиджета);
		ЗапомненноеСостояниеВиджета.Вставить("ТекущийБлокНавигации", СтрокаПараметраВиджета.ЗначениеПараметра);
		
		Форма.ЗапомненныеСостоянияВиджетов.Добавить(ЗапомненноеСостояниеВиджета);
		
	КонецЦикла;
	
КонецПроцедуры

// Восстанавливает состояние рабочего стола.
Процедура ВосстановитьСостояниеВиджетов(Форма) Экспорт
	
	Если Форма.ЗапомненныеСостоянияВиджетов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаЗапомненноеСостояниеВиджета Из Форма.ЗапомненныеСостоянияВиджетов Цикл
		
		ЗапомненноеСостояниеВиджета = СтрокаЗапомненноеСостояниеВиджета.Значение;
		
		// После изменения рабочего стола - виджет мог пропасть. Следует проверить наличие виджета.
		Если Не ЕстьВиджет(Форма, ЗапомненноеСостояниеВиджета.ИмяВиджета) Тогда
			Продолжить;
		КонецЕсли;
		
		// Текущий блок навигации.
		Если ЗапомненноеСостояниеВиджета.Состояние = "ТекущийБлокНавигации" Тогда
			
			// После изменения рабочего стола - блок навигации мог пропасть. Следует проверить наличие блока навигации.
			Если Не ЕстьБлокНавигации(Форма, ЗапомненноеСостояниеВиджета.ИмяВиджета, ЗапомненноеСостояниеВиджета.ТекущийБлокНавигации) Тогда
				Продолжить;
			КонецЕсли;
			
			РаботаСВиджетамиКлиентСервер.ПоказатьБлок(
				Форма,
				ЗапомненноеСостояниеВиджета.ИмяВиджета,
				ЗапомненноеСостояниеВиджета.ТекущийБлокНавигации);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.ЗапомненныеСостоянияВиджетов = Неопределено;
	
КонецПроцедуры

// Возвращает значение масштаба рабочего стола.
Функция МасштабРабочегоСтола() Экспорт
	
	МасштабРабочегоСтола = РегистрыСведений.НастройкиРабочихСтолов.ЗначениеНастройки(
		Пользователи.ТекущийПользователь(),
		Перечисления.НастройкиРабочегоСтола.Масштаб);
	Если МасштабРабочегоСтола = Неопределено Тогда
		
		ЕстьМаленькийЭкран = Ложь;
		ЕстьСтандартныйЭкран = Ложь;
		ЕстьБольшойЭкран = Ложь;
		ЕстьОченьБольшойЭкран = Ложь;
		
		ИнформацияЭкрановКлиента = ПолучитьИнформациюЭкрановКлиента();
		ИнформацияОсновногоЭкрана =  ИнформацияЭкрановКлиента[0];
		
		Для Каждого ИнформацияЭкранаКлиента Из ПолучитьИнформациюЭкрановКлиента() Цикл
			
			МаксимальноеИзмерение = Макс(
				ИнформацияОсновногоЭкрана.Ширина,
				ИнформацияОсновногоЭкрана.Высота);
			
			Если МаксимальноеИзмерение < 1280 Тогда
				
				ЕстьМаленькийЭкран = Истина;
				
			ИначеЕсли МаксимальноеИзмерение >= 1280 И МаксимальноеИзмерение < 1680 Тогда
				
				Если ЗначениеЗаполнено(ИнформацияЭкранаКлиента.DPI) И ИнформацияЭкранаКлиента.DPI > 96 Тогда
					ЕстьМаленькийЭкран = Истина;
				Иначе
					ЕстьСтандартныйЭкран = Истина;
				КонецЕсли;
				
			ИначеЕсли МаксимальноеИзмерение >= 1680 И МаксимальноеИзмерение < 1920 Тогда
				
				Если ЗначениеЗаполнено(ИнформацияЭкранаКлиента.DPI) И ИнформацияЭкранаКлиента.DPI > 96 Тогда
					ЕстьСтандартныйЭкран = Истина;
				Иначе
					ЕстьБольшойЭкран = Истина;
				КонецЕсли;
				
			ИначеЕсли МаксимальноеИзмерение >= 1920 И МаксимальноеИзмерение < 2560 Тогда
				
				Если ЗначениеЗаполнено(ИнформацияЭкранаКлиента.DPI) И ИнформацияЭкранаКлиента.DPI > 120 Тогда
					ЕстьСтандартныйЭкран = Истина;
				ИначеЕсли ЗначениеЗаполнено(ИнформацияЭкранаКлиента.DPI) И ИнформацияЭкранаКлиента.DPI > 96 Тогда
					ЕстьБольшойЭкран = Истина;
				Иначе
					ЕстьОченьБольшойЭкран = Истина;
				КонецЕсли;
				
			ИначеЕсли МаксимальноеИзмерение >= 2560 Тогда
				
				Если ЗначениеЗаполнено(ИнформацияЭкранаКлиента.DPI) И ИнформацияЭкранаКлиента.DPI > 120 Тогда
					ЕстьБольшойЭкран = Истина;
				ИначеЕсли ЗначениеЗаполнено(ИнформацияЭкранаКлиента.DPI) И ИнформацияЭкранаКлиента.DPI > 96 Тогда
					ЕстьОченьБольшойЭкран = Истина;
				Иначе
					ЕстьСуперБольшойЭкран = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Задаем масштаб рабочего стола.
		Если ЕстьМаленькийЭкран Тогда
			
			МасштабРабочегоСтола = 70;
			
		ИначеЕсли ЕстьСтандартныйЭкран Тогда
			
			МасштабРабочегоСтола = 78;
			
		ИначеЕсли ЕстьБольшойЭкран Тогда
			
			МасштабРабочегоСтола = 100;
			
		ИначеЕсли ЕстьОченьБольшойЭкран Тогда
			
			МасштабРабочегоСтола = 120;
			
		ИначеЕсли ЕстьСуперБольшойЭкран Тогда
			
			МасштабРабочегоСтола = 150;
			
		Иначе
			
			МасштабРабочегоСтола = 100;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МасштабРабочегоСтола;
	
КонецФункции

// Определяет список общих картинок.
// 
// Возвращаемое значение:
//  Массив из Строка - Список общих картинок.
//  
Функция ОбщиеКартинки() Экспорт
	
	ОбщиеКартинки = Новый Массив;
	
	Для Каждого ОбщаяКартинка Из Метаданные.ОбщиеКартинки Цикл
		ОбщиеКартинки.Добавить(ОбщаяКартинка.Имя);
	КонецЦикла;
	
	Возврат ОбщиеКартинки;
	
КонецФункции

// Определяет все источники строкой.
// 
// Возвращаемое значение:
//  Массив из Строка - Список источников строкой.
//  
Функция ВсеИсточникиСтрокой() Экспорт
	
	ВсеИсточникиСтрокой = Новый Массив;
	
	Для Каждого ОчередныеМетаданные Из Метаданные.Справочники Цикл
		
		ВсеИсточникиСтрокой.Добавить(ОчередныеМетаданные.ПолноеИмя());
		
		Для Каждого ОчереднаяКоманда Из ОчередныеМетаданные.Команды Цикл
			
			ВсеИсточникиСтрокой.Добавить(ОчереднаяКоманда.ПолноеИмя());
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ОчередныеМетаданные Из Метаданные.Документы Цикл
		
		ВсеИсточникиСтрокой.Добавить(ОчередныеМетаданные.ПолноеИмя());
		
		Для Каждого ОчереднаяКоманда Из ОчередныеМетаданные.Команды Цикл
			
			ВсеИсточникиСтрокой.Добавить(ОчереднаяКоманда.ПолноеИмя());
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ОчередныеМетаданные Из Метаданные.Обработки Цикл
		
		ВсеИсточникиСтрокой.Добавить(ОчередныеМетаданные.ПолноеИмя());
		
		Для Каждого ОчереднаяКоманда Из ОчередныеМетаданные.Команды Цикл
			
			ВсеИсточникиСтрокой.Добавить(ОчереднаяКоманда.ПолноеИмя());
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ОчередныеМетаданные Из Метаданные.РегистрыСведений Цикл
		
		ВсеИсточникиСтрокой.Добавить(ОчередныеМетаданные.ПолноеИмя());
		
		Для Каждого ОчереднаяКоманда Из ОчередныеМетаданные.Команды Цикл
			
			ВсеИсточникиСтрокой.Добавить(ОчереднаяКоманда.ПолноеИмя());
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ОчередныеМетаданные Из Метаданные.БизнесПроцессы Цикл
		
		ВсеИсточникиСтрокой.Добавить(ОчередныеМетаданные.ПолноеИмя());
		
		Для Каждого ОчереднаяКоманда Из ОчередныеМетаданные.Команды Цикл
			
			ВсеИсточникиСтрокой.Добавить(ОчереднаяКоманда.ПолноеИмя());
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ОчередныеМетаданные Из Метаданные.РегистрыНакопления Цикл
		
		ВсеИсточникиСтрокой.Добавить(ОчередныеМетаданные.ПолноеИмя());
		
		Для Каждого ОчереднаяКоманда Из ОчередныеМетаданные.Команды Цикл
			
			ВсеИсточникиСтрокой.Добавить(ОчереднаяКоманда.ПолноеИмя());
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ОчередныеМетаданные Из Метаданные.ОбщиеКоманды Цикл
		
		ВсеИсточникиСтрокой.Добавить(ОчередныеМетаданные.ПолноеИмя());
		
	КонецЦикла;
	
	Возврат ВсеИсточникиСтрокой;
	
КонецФункции

// Определяет поддерживаемое количество показателей виджетом "Показатели".
// 
// Возвращаемое значение:
//  Число - Поддерживаемое количество показателей.
//
Функция ПоддерживаемоеКоличествоПоказателей() Экспорт
	
	Возврат 3;
	
КонецФункции

// Возвращает событие журнала регистрации подсистемы "Виджеты".
//  
// Возвращаемое значение:
//  Строка - Событие журнала регистрации.
//
Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Виджеты'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Обновляет данные виджетов, у которых пришёл срок обновления.
//
Процедура ОбновлениеДанныхВиджетов() Экспорт
	
	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбновлениеДанныхВиджетов,
		Отказ);
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Документы.ДанныеКонтроля.ОбновитьПоСроку();
	Исключение
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Если ТранзакцияАктивна() Тогда
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Рассчитывает значение показателя.
//
// Параметры:
//  Показатель - СправочникСсылка.Показатели.
// 
// Возвращаемое значение:
//  Произвольный - Значение показателя.
//
Функция ЗначениеПоказателя(Показатель, ИдентификаторКлиента)
	
	ВыражениеПоказателя = Справочники.ПоказателиВиджетов.ВыражениеПоказателя(Показатель);
	
	ЗначениеПоказателя = ВычислитьЗначениеВыражения(ВыражениеПоказателя, ИдентификаторКлиента);
	
	Возврат ЗначениеПоказателя;
	
КонецФункции

// Создает интерактивную надпись.
Функция СоздатьИнтерактивнуюНадпись(
	Форма,
	ДанныеВиджета,
	Заголовок,
	ДанныеДействия,
	Подсказка = "",
	Родитель = Неопределено)
	
	СозданнаяКоманда = СоздатьКоманду(Форма, ДанныеВиджета, Заголовок, Подсказка, ДанныеДействия);
	СозданныйЭлемент = СоздатьКнопку(Форма, ДанныеВиджета, СозданнаяКоманда.Имя, Родитель);
	
	Возврат СозданныйЭлемент;
	
КонецФункции

// Создает интерактивную надпись с картинкой.
//
Функция СоздатьИнтерактивнуюНадписьСКартинкой(Форма, ДанныеВиджета, Заголовок, Картинка, ДанныеДействия, Подсказка, Родитель)
	
	СозданнаяКоманда = СоздатьКоманду(Форма, ДанныеВиджета, Заголовок, Подсказка, ДанныеДействия, Картинка);
	СозданнаяКоманда.Отображение = ОтображениеКнопки.КартинкаИТекст;
	СозданныйЭлемент = СоздатьКнопку(Форма, ДанныеВиджета, СозданнаяКоманда.Имя, Родитель);
	
	Возврат СозданныйЭлемент;
	
КонецФункции

// Создает интерактивную картинку.
Функция СоздатьИнтерактивнуюКартинку(Форма, ДанныеВиджета, Картинка, ДанныеДействия, Подсказка = "", Родитель = Неопределено)
	
	Если ДанныеДействия <> Неопределено Тогда
		СозданнаяКоманда = СоздатьКоманду(
			Форма,
			ДанныеВиджета,
			Подсказка,
			Подсказка,
			ДанныеДействия,
			Картинка);
		СозданныйЭлемент = СоздатьКнопку(
			Форма,
			ДанныеВиджета,
			СозданнаяКоманда.Имя,
			Родитель);
	Иначе
		СозданныйЭлемент = СоздатьКартинку(
			Форма,
			ДанныеВиджета,
			Картинка,
			Родитель);
	КонецЕсли;
	
	Возврат СозданныйЭлемент;
	
КонецФункции

// Создает виджет-заголовок.
Функция СоздатьВиджетЗаголовок(Форма, ДанныеВиджета, Родитель)
	
	ГруппаВиджета = СоздатьОсновнуюГруппу(
		Форма,
		ДанныеВиджета,
		Родитель,
		Перечисления.ВариантыШириныВиджетов.Широкий,
		Перечисления.ВариантыВысотыВиджетов.ПоСодержимому,
		Истина);
	ГруппаВиджета.РастягиватьПоВертикали = Ложь;
	ГруппаВиджета.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	
	ЗначимыеДанныеВиджета = СоздатьОбычнуюГруппу(Форма, ДанныеВиджета);
	ЗначимыеДанныеВиджета.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ЗначимыеДанныеВиджета.РастягиватьПоГоризонтали = Истина;
	ЗначимыеДанныеВиджета.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
	ЗначимыеДанныеВиджета.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Лево;
	
	Если ДанныеВиджета.ПоказателиЗаголовка.Количество() > 0 Тогда
		ЭлементЗаголовка = СоздатьПолеПоказателяСЗаголовком(
			Форма,
			ДанныеВиджета,
			ДанныеВиджета.ПоказателиЗаголовка[0],
			"Лево",
			Ложь,
			ЗначимыеДанныеВиджета);
	Иначе
		Команда = ДанныеВиджета.Команды[0];
		ЭлементЗаголовка = СоздатьИнтерактивнуюНадпись(
			Форма,
			ДанныеВиджета,
			Команда.Заголовок,
			Команда.Действие,
			Команда.Подсказка,
			ЗначимыеДанныеВиджета);
	КонецЕсли;
	ЭлементЗаголовка.Шрифт = ДанныеВиджета.ОсновнойШрифт;
	ЭлементЗаголовка.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
	
	Если ДанныеВиджета.ОсновныеПоказатели.Количество() > 0 Тогда
		ЭлементПоказатель = СоздатьПолеПоказателяСЗаголовком(
			Форма,
			ДанныеВиджета,
			ДанныеВиджета.ОсновныеПоказатели[0],
			"Лево",
			Истина,
			ЗначимыеДанныеВиджета);
		ЭлементПоказатель.Шрифт = ДанныеВиджета.ВспомогательныйШрифт;
	КонецЕсли;
	
	ГруппаДополнительныхКоманд = СоздатьОбычнуюГруппу(Форма, ДанныеВиджета, ЗначимыеДанныеВиджета);
	ГруппаДополнительныхКоманд.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	Для Каждого ДанныеКоманды Из ДанныеВиджета.ДополнительныеКоманды Цикл
		
		СоздатьИнтерактивнуюКартинку(
			Форма,
			ДанныеВиджета,
			ДанныеКоманды.Картинка,
			ДанныеКоманды.Действие,
			ДанныеКоманды.Подсказка,
			ГруппаДополнительныхКоманд);
		
	КонецЦикла;
	
	СоздатьРазделитель(Форма, ДанныеВиджета);
	
	Возврат ГруппаВиджета;
	
КонецФункции

// Создает виджет "Показатели".
Функция СоздатьВиджетПоказатели(Форма, ДанныеВиджета, Родитель)
	
	КоличествоПоказателей = ДанныеВиджета.ОсновныеПоказатели.Количество();
	Если КоличествоПоказателей > ПоддерживаемоеКоличествоПоказателей() Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Виджет ""Показатели"" не поддерживает количество показателей %1.'"),
			КоличествоПоказателей);
	КонецЕсли;
	
	Если КоличествоПоказателей = 1 Тогда
		
		Возврат СоздатьВиджетПоказателиОдинПоказатель(Форма, ДанныеВиджета, Родитель);
		
	ИначеЕсли КоличествоПоказателей = 2 Тогда
		
		Возврат СоздатьВиджетПоказателиДваПоказателя(Форма, ДанныеВиджета, Родитель);
		
	ИначеЕсли КоличествоПоказателей = 3 Тогда
		
		Возврат СоздатьВиджетПоказателиТриПоказателя(Форма, ДанныеВиджета, Родитель);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Виджет ""Показатели"" не поддерживает количество показателей %1.'"),
			КоличествоПоказателей);
		
	КонецЕсли;
	
КонецФункции

// Создает виджет-показатель.
Функция СоздатьВиджетПоказателиОдинПоказатель(Форма, ДанныеВиджета, Родитель)
	
	ГруппаВиджета = СоздатьОсновнуюГруппу(
		Форма,
		ДанныеВиджета,
		Родитель,
		Перечисления.ВариантыШириныВиджетов.Обычный,
		Перечисления.ВариантыВысотыВиджетов.Обычный);
	
	// Для выравнивая заголовка виджета Команда и Показатель.
	ЗначимыеДанныеВиджета = СоздатьОбычнуюГруппу(Форма, ДанныеВиджета);
	ЗначимыеДанныеВиджета.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ЗначимыеДанныеВиджета.РастягиватьПоВертикали = Ложь;
	ЗначимыеДанныеВиджета.Высота = 6;
	
	ДанныеПоказателя = ДанныеВиджета.ОсновныеПоказатели[0];
	Если ДанныеВиджета.ПоложениеЗаголовка = "Низ" Тогда
		СоздатьПолеПоказателяВиджетаПоказателя(
			Форма,
			ДанныеВиджета,
			ДанныеПоказателя,
			ЗначимыеДанныеВиджета);
		ЭлементЗаголовок = СоздатьИнтерактивнуюНадпись(
			Форма,
			ДанныеВиджета,
			НРег(ДанныеПоказателя.Заголовок),
			ДанныеПоказателя.Действие,
			ДанныеПоказателя.Подсказка,
			ЗначимыеДанныеВиджета);
		НижнийЭлемент = ЭлементЗаголовок;
		НижнийЭлемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Низ;
	Иначе
		ЭлементЗаголовок = СоздатьИнтерактивнуюНадпись(
			Форма,
			ДанныеВиджета,
			ДанныеПоказателя.Заголовок,
			ДанныеПоказателя.Действие,
			ДанныеПоказателя.Подсказка,
			ЗначимыеДанныеВиджета);
		НижнийЭлемент = СоздатьПолеПоказателяВиджетаПоказателя(
			Форма,
			ДанныеВиджета,
			ДанныеПоказателя,
			ЗначимыеДанныеВиджета);
		ВерхнийЭлемент = ЭлементЗаголовок;
		ВерхнийЭлемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Верх;
	КонецЕсли;
	НижнийЭлемент.Шрифт = РаботаСРабочимСтоломПовтИсп.ШрифтСтиля("ПоказательВиджетаШрифт");
	ЭлементЗаголовок.Шрифт = РаботаСРабочимСтоломПовтИсп.ШрифтСтиля("ВстроенныйЗаголовокВиджетаШрифт");
	
	НастроитьВысотуЗаголовка(ЭлементЗаголовок, СтрДлина(ДанныеПоказателя.Заголовок));
	
	// Дополнительные команды и показатели.
	СоздатьДополнительныеЭлементы(Форма, ДанныеВиджета, ГруппаВиджета);
	
	Возврат ГруппаВиджета;
	
КонецФункции

// Создает виджет "Два показателя".
Функция СоздатьВиджетПоказателиДваПоказателя(Форма, ДанныеВиджета, Родитель)
	
	ГруппаВиджета = СоздатьОсновнуюГруппу(
		Форма,
		ДанныеВиджета,
		Родитель,
		Перечисления.ВариантыШириныВиджетов.Обычный,
		Перечисления.ВариантыВысотыВиджетов.Обычный);
	ГруппаВиджета.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Верх;
	ГруппаВиджета.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	
	// Заголовок.
	СоздатьВстроенныйЗаголовок(
		Форма,
		ДанныеВиджета,
		ГруппаВиджета);
	
	СоздатьОтступ(Форма, ДанныеВиджета, ГруппаВиджета);
	
	// Показатели.
	ГруппаПоказателей = СоздатьОбычнуюГруппу(Форма, ДанныеВиджета);
	
	СоздатьГруппуПоказателяВиджетаДваПоказателя(
		Форма,
		ДанныеВиджета,
		ДанныеВиджета.ОсновныеПоказатели[0],
		ГруппаПоказателей);
	
	СоздатьГруппуПоказателяВиджетаДваПоказателя(
		Форма,
		ДанныеВиджета,
		ДанныеВиджета.ОсновныеПоказатели[1],
		ГруппаПоказателей);
	
	// Дополнительные команды и показатели.
	СоздатьДополнительныеЭлементы(Форма, ДанныеВиджета, ГруппаВиджета);
	
	Возврат ГруппаВиджета;
	
КонецФункции

// Создаёт группу дополнительных элементов.
//
Функция СоздатьДополнительныеЭлементы(Форма, ДанныеВиджета, Родитель)
	
	ГруппаДополнительныхЭлементов = СоздатьОбычнуюГруппу(Форма, ДанныеВиджета, Родитель);
	ГруппаДополнительныхЭлементов.РастягиватьПоГоризонтали = Истина;
	ГруппаДополнительныхЭлементов.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Низ;
	
	Если ДанныеВиджета.ДополнительныеПоказатели.Количество() = 0
		И ДанныеВиджета.ДополнительныеКоманды.Количество() = 0 Тогда
		
		СоздатьКартинку(
			Форма,
			ДанныеВиджета,
			БиблиотекаКартинок.ОтступКартинкиПустого,
			ГруппаДополнительныхЭлементов);
		
	Иначе
		
		ГруппаДополнительныхПоказателей = СоздатьОбычнуюГруппу(Форма, ДанныеВиджета, ГруппаДополнительныхЭлементов);
		ГруппаДополнительныхПоказателей.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
		Для Каждого ДанныеПоказателя Из ДанныеВиджета.ДополнительныеПоказатели Цикл
			
			ПолеПоказателя = СоздатьПолеПоказателяСКартинкой(
				Форма,
				ДанныеВиджета,
				ДанныеПоказателя,
				Истина,
				ГруппаДополнительныхПоказателей);
			ПолеПоказателя.Шрифт = РаботаСРабочимСтоломПовтИсп.ШрифтСтиля("ДополнительныйПоказательВиджета");
			ПолеПоказателя.Видимость = Ложь;
			
		КонецЦикла;
		
		ГруппаДополнительныхКоманд = СоздатьОбычнуюГруппу(Форма, ДанныеВиджета, ГруппаДополнительныхЭлементов);
		ГруппаДополнительныхКоманд.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
		Для Каждого ДанныеКоманды Из ДанныеВиджета.ДополнительныеКоманды Цикл
			
			СоздатьИнтерактивнуюКартинку(
				Форма,
				ДанныеВиджета,
				ДанныеКоманды.Картинка,
				ДанныеКоманды.Действие,
				ДанныеКоманды.Подсказка,
				ГруппаДополнительныхКоманд);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ГруппаДополнительныхЭлементов;
	
КонецФункции

// Создает виджет "Три показателя".
Функция СоздатьВиджетПоказателиТриПоказателя(Форма, ДанныеВиджета, Родитель)
	
	ГруппаВиджета = СоздатьОсновнуюГруппу(
		Форма,
		ДанныеВиджета,
		Родитель,
		Перечисления.ВариантыШириныВиджетов.Обычный,
		Перечисления.ВариантыВысотыВиджетов.Обычный);
	ГруппаВиджета.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Верх;
	ГруппаВиджета.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	
	// Заголовок.
	СоздатьВстроенныйЗаголовок(
		Форма,
		ДанныеВиджета,
		ГруппаВиджета);
	
	СоздатьОтступ(Форма, ДанныеВиджета, ГруппаВиджета);
	
	// Показатели.
	ГруппаПоказателей = СоздатьОбычнуюГруппу(Форма, ДанныеВиджета);
	
	СоздатьГруппуПоказателяВиджетаТриПоказателя(
		Форма,
		ДанныеВиджета,
		ДанныеВиджета.ОсновныеПоказатели[0],
		ГруппаПоказателей);
	
	СоздатьГруппуПоказателяВиджетаТриПоказателя(
		Форма,
		ДанныеВиджета,
		ДанныеВиджета.ОсновныеПоказатели[1],
		ГруппаПоказателей);
	
	СоздатьГруппуПоказателяВиджетаТриПоказателя(
		Форма,
		ДанныеВиджета,
		ДанныеВиджета.ОсновныеПоказатели[2],
		ГруппаПоказателей);
		
	// Дополнительные команды и показатели.
	СоздатьДополнительныеЭлементы(Форма, ДанныеВиджета, ГруппаВиджета);
	
	Возврат ГруппаВиджета;
	
КонецФункции

// Создает виджет "Список".
Функция СоздатьВиджетСписок(Форма, ДанныеВиджета, Родитель)
	
	ГруппаВиджета = СоздатьОсновнуюГруппу(
		Форма,
		ДанныеВиджета,
		Родитель,
		Перечисления.ВариантыШириныВиджетов.Обычный,
		Перечисления.ВариантыВысотыВиджетов.Обычный);
	ГруппаВиджета.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Верх;
	ГруппаВиджета.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	
	// Заголовок.
	СоздатьВстроенныйЗаголовок(
		Форма,
		ДанныеВиджета,
		ГруппаВиджета);
	
	// Список - представление пустого списка.
	ГруппаПустого = СоздатьОбычнуюГруппу(Форма, ДанныеВиджета, ГруппаВиджета);
	ГруппаПустого.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
	ГруппаПустого.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаПустого.РастягиватьПоВертикали = Истина;
	ГруппаПустого.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Одинарный;
	
	ИмяКартинкиПустого = Неопределено;
	Если ДанныеВиджета.Картинка <> Неопределено Тогда
		
		КартинкаПустого = СоздатьКартинку(
			Форма,
			ДанныеВиджета,
			ДанныеВиджета.Картинка,
			ГруппаПустого);
		КартинкаПустого.Высота = 2;
		КартинкаПустого.Ширина = 5;
		КартинкаПустого.РазмерКартинки = РазмерКартинки.Пропорционально;
		
		ИмяКартинкиПустого = КартинкаПустого.Имя;
		
	КонецЕсли;
	УстановитьПараметрВиджета(
		Форма,
		ДанныеВиджета.Имя,
		ДанныеВиджета.Имя,
		"КартинкаПустого",
		ИмяКартинкиПустого);
	
	ПодписьПустого = СоздатьНадпись(
		Форма,
		ДанныеВиджета,
		ДанныеВиджета.ПредставлениеПустого,
		ГруппаПустого);
	ПодписьПустого.Шрифт = РаботаСРабочимСтоломПовтИсп.ШрифтСтиля("ПодписьВиджетаШрифт");
	ПодписьПустого.ЦветТекста = Перечисления.ЦветаВиджетов.ЦветПодписи(ДанныеВиджета.Цвет);
	ПодписьПустого.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
	ПодписьПустого.Высота = 1;
	УстановитьПараметрВиджета(
		Форма,
		ДанныеВиджета.Имя,
		ДанныеВиджета.Имя,
		"ПодписьПустого",
		ПодписьПустого.Имя);
	
	ПодписьИдетРасчет = СоздатьНадпись(
		Форма,
		ДанныеВиджета,
		"...",
		ГруппаВиджета);
	ПодписьИдетРасчет.Шрифт = РаботаСРабочимСтоломПовтИсп.ШрифтСтиля("ПодписьВиджетаШрифт");
	ПодписьИдетРасчет.ЦветТекста = Перечисления.ЦветаВиджетов.ЦветПодписи(ДанныеВиджета.Цвет);
	ПодписьИдетРасчет.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
	УстановитьПараметрВиджета(
		Форма,
		ДанныеВиджета.Имя,
		ДанныеВиджета.Имя,
		"ПодписьИдетРасчет",
		ПодписьИдетРасчет.Имя);
	
	// Список - показатели.
	ВсеСтрокиСписка = Новый Массив;
	Для ИндексПоказателя = 0 По ДанныеВиджета.ОсновныеПоказатели.ВГраница() Цикл
		
		ДанныеПоказателя = ДанныеВиджета.ОсновныеПоказатели[ИндексПоказателя];
		Если ДанныеПоказателя.ТипЗначенияПоказателя = Тип("Массив") Тогда
			
			// Список - строки списка.
			СоздатьРеквизит(
				Форма,
				ДанныеВиджета,
				"ДанныеСписка",
				ОбщегоНазначения.ОписаниеТипаСтрока(0),
				ДанныеПоказателя.Выражение,
				ДанныеПоказателя.События,
				ДанныеПоказателя.Показатель,
				"Список");
			Для НомерСтроки = 1 По МаксимальноеКоличествоСтрокВиджетаСписок() Цикл
				ОсноваИмениРеквизита = "Строка" + НомерСтроки;
				ГруппаСтроки = СоздатьСтрокуСписка(
					Форма,
					ДанныеВиджета,
					ДанныеПоказателя,
					ГруппаВиджета,
					ОсноваИмениРеквизита);
				ВсеСтрокиСписка.Добавить(ГруппаСтроки.Имя);
			КонецЦикла;
			
		ИначеЕсли ДанныеПоказателя.ТипЗначенияПоказателя = Тип("Число") Тогда
			
			// Список - показатель в списке.
			СоздатьРеквизит(
				Форма,
				ДанныеВиджета,
				ДанныеПоказателя.Заголовок,
				ОбщегоНазначения.ОписаниеТипаСтрока(5),
				ДанныеПоказателя.Выражение,
				ДанныеПоказателя.События,
				ДанныеПоказателя.Показатель,
				"Список",
				ДанныеПоказателя.Заголовок);
			ГруппаСтроки = СоздатьСтрокуСписка(
				Форма,
				ДанныеВиджета,
				ДанныеПоказателя,
				ГруппаВиджета,
				ДанныеПоказателя.Заголовок);
			ВсеСтрокиСписка.Добавить(ГруппаСтроки.Имя);
			
		Иначе
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный тип значения показателя %1 показателя %2 виджета %3.'"),
				ДанныеПоказателя.ТипЗначенияПоказателя,
				ДанныеПоказателя.Показатель,
				ДанныеВиджета.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	УстановитьПараметрВиджета(
		Форма,
		ДанныеВиджета.Имя,
		ДанныеВиджета.Имя,
		"ВсеСтрокиСписка",
		ВсеСтрокиСписка);
	
	// Дополнительные команды и показатели.
	СоздатьДополнительныеЭлементы(Форма, ДанныеВиджета, ГруппаВиджета);
	ЕстьДополнительныеЭлементы = ДанныеВиджета.ДополнительныеПоказатели.Количество() > 0
		Или ДанныеВиджета.ДополнительныеКоманды.Количество() > 0;
	УстановитьПараметрВиджета(
		Форма,
		ДанныеВиджета.Имя,
		ДанныеВиджета.Имя,
		"ЕстьДополнительныеЭлементы",
		ЕстьДополнительныеЭлементы);
	
	Возврат ГруппаВиджета;
	
КонецФункции

Функция СоздатьСтрокуСписка(Форма, ДанныеВиджета, ДанныеПоказателя, ГруппаВиджета, ОсноваИмениРеквизита)
	
	ГруппаСтроки = СоздатьОбычнуюГруппу(
		Форма,
		ДанныеВиджета,
		ГруппаВиджета);
	ГруппаСтроки.РастягиватьПоГоризонтали = Истина;
	ГруппаСтроки.Видимость = Ложь;
	ГруппаСтроки.Ширина = 22;
	ГруппаСтроки.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
	ГруппаСтроки.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Лево;
	ГруппаСтроки.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	
	УстановитьПараметрВиджета(
		Форма,
		ДанныеВиджета.Имя,
		ОсноваИмениРеквизита,
		"ГруппаСтроки",
		ГруппаСтроки.Имя);
	
	СоздатьКартинку(Форма, ДанныеВиджета, БиблиотекаКартинок.ПрозрачныйОтступ, ГруппаСтроки);
	
	ИмяКартинкиСтроки = Неопределено;
	Если ДанныеПоказателя.Картинка <> Неопределено Тогда
		КартинкаСтроки = СоздатьПолеКартинки(
			Форма,
			ДанныеВиджета,
			ОсноваИмениРеквизита + "Картинка",
			ДанныеПоказателя.Картинка,
			ДанныеПоказателя.Действие,
			ГруппаСтроки);
		ИмяКартинкиСтроки = КартинкаСтроки.Имя;
	КонецЕсли;
	УстановитьПараметрВиджета(
		Форма,
		ДанныеВиджета.Имя,
		ОсноваИмениРеквизита,
		"КартинкаСтроки",
		ИмяКартинкиСтроки);
	
	ЗаголовокСтроки = СоздатьИнтерактивнуюНадпись(
		Форма,
		ДанныеВиджета,
		ДанныеПоказателя.Заголовок,
		ДанныеПоказателя.Действие,
		ДанныеПоказателя.Подсказка,
		ГруппаСтроки);
	ЗаголовокСтроки.Шрифт = РаботаСРабочимСтоломПовтИсп.ШрифтСтиля("ПодписьВиджетаШрифт");
	УстановитьПараметрВиджета(
		Форма,
		ДанныеВиджета.Имя,
		ОсноваИмениРеквизита,
		"ЗаголовокСтроки",
		ЗаголовокСтроки.Имя);
	
	КомментарийСтроки = СоздатьИнтерактивнуюНадпись(
		Форма,
		ДанныеВиджета,
		"01.01",
		ДанныеПоказателя.Действие,
		ДанныеПоказателя.Подсказка,
		ГруппаСтроки);
	КомментарийСтроки.Шрифт = РаботаСРабочимСтоломПовтИсп.ШрифтСтиля("ПодписьВиджетаШрифт");
	КомментарийСтроки.ЦветТекста = Перечисления.ЦветаВиджетов.ЦветПодписи(ДанныеВиджета.Цвет);
	КомментарийСтроки.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	КомментарийСтроки.Видимость = Ложь;
	УстановитьПараметрВиджета(
		Форма,
		ДанныеВиджета.Имя,
		ОсноваИмениРеквизита,
		"КомментарийСтроки",
		КомментарийСтроки.Имя);
	
	Возврат ГруппаСтроки;
	
КонецФункции

Функция СоздатьВстроенныйЗаголовок(Форма, ДанныеВиджета, Родитель)
	
	ГруппаЗаголовка = СоздатьОбычнуюГруппу(Форма, ДанныеВиджета, Родитель);
	ГруппаЗаголовка.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Центр;
	
	Если ДанныеВиджета.ПоказателиЗаголовка.Количество() > 0 Тогда
		ЗаголовокВиджета = СоздатьПолеПоказателяСЗаголовком(
			Форма,
			ДанныеВиджета,
			ДанныеВиджета.ПоказателиЗаголовка[0],
			"Лево",
			Ложь,
			ГруппаЗаголовка);
	ИначеЕсли ДанныеВиджета.Команды.Количество() > 0 Тогда
		ДанныеКоманды = ДанныеВиджета.Команды[0];
		ЗаголовокВиджета = СоздатьИнтерактивнуюНадпись(
			Форма,
			ДанныеВиджета,
			ДанныеКоманды.Заголовок,
			ДанныеКоманды.Действие,
			ДанныеКоманды.Подсказка,
			ГруппаЗаголовка);
	Иначе
		ЗаголовокВиджета = СоздатьНадпись(
			Форма,
			ДанныеВиджета,
			ДанныеВиджета.Заголовок,
			ГруппаЗаголовка);
	КонецЕсли;
	ЗаголовокВиджета.Шрифт = РаботаСРабочимСтоломПовтИсп.ШрифтСтиля("ВстроенныйЗаголовокВиджетаШрифт");
	
	Если ЗначениеЗаполнено(ДанныеВиджета.Заголовок) Тогда
		ЗаголовокВиджета.Заголовок = ДанныеВиджета.Заголовок;
	КонецЕсли;
	
	Возврат ГруппаЗаголовка;
	
КонецФункции

// Создает виджет-диаграмму.
Функция СоздатьВиджетДиаграмма(Форма, ДанныеВиджета, Родитель)
	
	ГруппаВиджета = СоздатьОсновнуюГруппу(
		Форма,
		ДанныеВиджета,
		Родитель,
		Перечисления.ВариантыШириныВиджетов.Обычный,
		Перечисления.ВариантыВысотыВиджетов.Обычный);
	
	// Заголовок.
	СоздатьВстроенныйЗаголовок(
		Форма,
		ДанныеВиджета,
		ГруппаВиджета);
	
	// Диаграмма.
	СоздатьДиаграмму(
		Форма,
		ДанныеВиджета,
		ГруппаВиджета);
	
	Возврат ГруппаВиджета;
	
КонецФункции

// Создает виджет-диаграмму.
Функция СоздатьВиджетДиаграммаСЛегендой(Форма, ДанныеВиджета, Родитель)
	
	ГруппаВиджета = СоздатьОсновнуюГруппу(
		Форма,
		ДанныеВиджета,
		Родитель,
		Перечисления.ВариантыШириныВиджетов.Широкий,
		Перечисления.ВариантыВысотыВиджетов.Обычный);
	ГруппаВиджета.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаВиджета.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Лево;
	
	// Диаграмма
	ЭлементДиаграмма = СоздатьДиаграмму(Форма, ДанныеВиджета, ГруппаВиджета);
	ЭлементДиаграмма.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
	ЭлементДиаграмма.РастягиватьПоГоризонтали = Ложь;
	ЭлементДиаграмма.Высота = Перечисления.ВариантыВысотыВиджетов.ВысотаДиаграммы(
		Перечисления.ВариантыВысотыВиджетов.Обычный);
	ЭлементДиаграмма.Ширина = Перечисления.ВариантыШириныВиджетов.ШиринаДиаграммы(
		Перечисления.ВариантыШириныВиджетов.Узкий);
		
	// Список показателей.
	ГруппаСписокПоказателей = СоздатьОбычнуюГруппу(Форма, ДанныеВиджета);
	ГруппаСписокПоказателей.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаСписокПоказателей.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Центр;
	ГруппаСписокПоказателей.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
	ГруппаСписокПоказателей.РастягиватьПоГоризонтали = Ложь;
	ГруппаСписокПоказателей.РастягиватьПоВертикали = Ложь;
	ГруппаСписокПоказателей.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Одинарный;
	ГруппаСписокПоказателей.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	ГруппаСписокПоказателей.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	
	ГруппаСпискаВиджета = СоздатьОбычнуюГруппу(Форма, ДанныеВиджета, ГруппаСписокПоказателей);
	ГруппаСпискаВиджета.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Для Каждого ДанныеПоказателя Из ДанныеВиджета.ОсновныеПоказатели Цикл
		
		ГруппаПоказателя = СоздатьОбычнуюГруппу(Форма, ДанныеВиджета, ГруппаСпискаВиджета);
		ГруппаПоказателя.Объединенная = Ложь;
		
		Картинка = СоздатьИнтерактивнуюКартинку(
			Форма,
			ДанныеВиджета,
			ДанныеПоказателя.Картинка,
			ДанныеПоказателя.Действие,
			ДанныеПоказателя.Подсказка,
			ГруппаПоказателя);
		Картинка.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
		Картинка.Вид = ВидКнопкиФормы.Гиперссылка;
		
		СокращенныйЗаголовок = РаботаСоСтроками.Сократить(ДанныеПоказателя.Заголовок, 20);
		Надпись = СоздатьИнтерактивнуюНадпись(
			Форма,
			ДанныеВиджета,
			СокращенныйЗаголовок,
			ДанныеПоказателя.Действие,
			ДанныеПоказателя.Подсказка,
			ГруппаПоказателя);
		Надпись.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
		Надпись.Шрифт = ДанныеВиджета.ВспомогательныйШрифт;
		
		ПолеПоказателя = СоздатьПолеПоказателя(
			Форма,
			ДанныеВиджета,
			ДанныеПоказателя,
			ГруппаПоказателя);
		ПолеПоказателя.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
		ПолеПоказателя.Ширина = 5;
		ПолеПоказателя.Шрифт = ДанныеВиджета.ВспомогательныйШрифт;
		
		ГруппаРазделителя = СоздатьОбычнуюГруппу(Форма, ДанныеВиджета, ГруппаСпискаВиджета);
		ГруппаРазделителя.Объединенная = Ложь;
		ЭлементРазделительПервойКолонки = СоздатьРазделитель(Форма, ДанныеВиджета, ГруппаРазделителя);
		ЭлементРазделительПервойКолонки.Ширина = 3;
		ЭлементРазделительВторойКолонки = СоздатьРазделитель(Форма, ДанныеВиджета, ГруппаРазделителя);
		ЭлементРазделительВторойКолонки.Ширина = 18;
		СоздатьРазделитель(Форма, ДанныеВиджета, ГруппаРазделителя);
		
	КонецЦикла;
	
	Возврат ГруппаВиджета;
	
КонецФункции

// Создает виджет "Альтернативный".
Функция СоздатьВиджетАльтернативный(Форма, ДанныеВиджета, Родитель)
	
	Возврат СоздатьВиджет(Форма, ДанныеВиджета.ВложенныеВиджеты[0], Родитель);
	
КонецФункции

// Создает виджет блок навигации.
Функция СоздатьВиджетБлокНавигации(Форма, ДанныеВиджета, Родитель)
	
	ГруппаВиджета = СоздатьОсновнуюГруппу(
		Форма,
		ДанныеВиджета,
		Родитель,
		Перечисления.ВариантыШириныВиджетов.Полуторный,
		Перечисления.ВариантыВысотыВиджетов.ОченьВысокий,
		Истина);
	ГруппаВиджета.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	ГруппаВиджета.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Полуторный;
	ГруппаВиджета.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Верх;
	
	Если ДанныеВиджета.БлокиНавигации.Количество() = 0 Тогда
		Возврат ГруппаВиджета;
	КонецЕсли;
	
	ГруппаБлокиНавигации = СоздатьОбычнуюГруппу(Форма, ДанныеВиджета, ГруппаВиджета);
	ГруппаБлокиНавигации.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаБлокиНавигации.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Одинарный;
	ГруппаВыборБлоковНавигации = СоздатьОбычнуюГруппу(Форма, ДанныеВиджета, ГруппаБлокиНавигации);
	ГруппаВыборБлоковНавигации.Объединенная = Ложь;
	ГруппаРазделителиБлоковНавигации = СоздатьОбычнуюГруппу(Форма, ДанныеВиджета, ГруппаБлокиНавигации);
	ГруппаРазделителиБлоковНавигации.Объединенная = Ложь;
	СтраницыБлоков = СоздатьСтраницы(Форма, ДанныеВиджета, ГруппаВиджета);
	СтраницыБлоков.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
	СтраницыБлоков.РастягиватьПоГоризонтали = Истина; // Для того, чтобы полоса прокрутки была с краю.
	
	// Показать предыдущий блок.
	ЭлементПоказатьПредыдущийБлок = СоздатьИнтерактивнуюКартинку(
		Форма,
		ДанныеВиджета,
		БиблиотекаКартинок.ПредыдущийБлок,
		Перечисления.ДействияВиджетов.ПоказатьПредыдущийБлок(),
		НСтр("ru = 'Показать предыдущий блок'"),
		ГруппаВыборБлоковНавигации);
	РазделительБлока = СоздатьРазделительБлока(Форма, ДанныеВиджета, ГруппаРазделителиБлоковНавигации);
	РазделительБлока.РастягиватьПоГоризонтали = Ложь;
	РазделительБлока.Ширина = 2;
	
	ПараметрыДопОтображенияБлоков = Новый Структура(
		"ИменаБлоковНавигации, ГруппаВыборБлоковНавигации, ГруппаРазделителиБлоковНавигации",
		Новый Массив, ГруппаВыборБлоковНавигации, ГруппаРазделителиБлоковНавигации);
	
	РазместитьБлокиНавигацииЗакладками(Форма, ДанныеВиджета, СтраницыБлоков, ПараметрыДопОтображенияБлоков);
	
	// Показать следующий блок.
	ЭлементПоказатьСледующийБлок = СоздатьИнтерактивнуюКартинку(
		Форма,
		ДанныеВиджета,
		БиблиотекаКартинок.СледующийБлок,
		Перечисления.ДействияВиджетов.ПоказатьСледующийБлок(),
		НСтр("ru = 'Показать следующий блок'"),
		ГруппаВыборБлоковНавигации);
	РазделительБлока = СоздатьРазделительБлока(Форма, ДанныеВиджета, ГруппаРазделителиБлоковНавигации);
	РазделительБлока.РастягиватьПоГоризонтали = Ложь;
	РазделительБлока.Ширина = 2;
	
	// Выделить первый блок.
	ТекущийБлокНавигации = ДанныеВиджета.БлокиНавигации[0].Заголовок;
	УстановитьПараметрВиджета(
		Форма,
		ДанныеВиджета.Имя,
		ДанныеВиджета.Имя,
		"БлокиНавигации",
		ПараметрыДопОтображенияБлоков.ИменаБлоковНавигации);
	УстановитьПараметрВиджета(
		Форма,
		ДанныеВиджета.Имя,
		ДанныеВиджета.Имя,
		"МаксимальноеКоличествоВидимыхБлоков",
		МаксимальноеКоличествоВидимыхБлоков());
	УстановитьПараметрВиджета(
		Форма,
		ДанныеВиджета.Имя,
		ДанныеВиджета.Имя,
		"ТекущийБлокНавигации",
		"");
	УстановитьПараметрВиджета(
		Форма,
		ДанныеВиджета.Имя,
		ДанныеВиджета.Имя,
		"ЦветДоступногоБлока",
		РаботаСРабочимСтоломПовтИсп.ЦветСтиля("ДоступныйБлок"));
	УстановитьПараметрВиджета(
		Форма,
		ДанныеВиджета.Имя,
		ДанныеВиджета.Имя,
		"ЦветТекущегоБлока",
		РаботаСРабочимСтоломПовтИсп.ЦветСтиля("ТекущийБлок"));
	УстановитьПараметрВиджета(
		Форма,
		ДанныеВиджета.Имя,
		ДанныеВиджета.Имя,
		"ИмяЭлементаСтраницыБлоков",
		СтраницыБлоков.Имя);
	УстановитьПараметрВиджета(
		Форма,
		ДанныеВиджета.Имя,
		ДанныеВиджета.Имя,
		"ИмяЭлементаПоказатьПредыдущийБлок",
		ЭлементПоказатьПредыдущийБлок.Имя);
	УстановитьПараметрВиджета(
		Форма,
		ДанныеВиджета.Имя,
		ДанныеВиджета.Имя,
		"ИмяЭлементаПоказатьСледующийБлок",
		ЭлементПоказатьСледующийБлок.Имя);
	РаботаСВиджетамиКлиентСервер.ПоказатьБлок(Форма, ДанныеВиджета.Имя, ТекущийБлокНавигации);
	
	Возврат ГруппаВиджета;
	
КонецФункции

// Создает блоки навигации в виде закладок
Процедура РазместитьБлокиНавигацииЗакладками(Форма, ДанныеВиджета, Родитель,
	ПараметрыДопОтображенияБлоков = Неопределено)
	
	ОтображатьЗаголовкиОтдельно = ПараметрыДопОтображенияБлоков <> Неопределено;
	
	Для Каждого Блок Из ДанныеВиджета.БлокиНавигации Цикл
		
		Если ОтображатьЗаголовкиОтдельно Тогда
			// Показать блок.
			КнопкаПоказатьБлок = СоздатьИнтерактивнуюНадпись(
				Форма,
				ДанныеВиджета,
				Блок.Заголовок,
				Перечисления.ДействияВиджетов.ПоказатьБлок(),
				СтрШаблон(НСтр("ru = 'Показать блок ""%1""'"), Блок.Заголовок),
				ПараметрыДопОтображенияБлоков.ГруппаВыборБлоковНавигации);
			КнопкаПоказатьБлок.ЦветТекста = РаботаСРабочимСтоломПовтИсп.ЦветСтиля("ДоступныйБлок");
			КнопкаПоказатьБлок.Шрифт = РаботаСРабочимСтоломПовтИсп.ШрифтСтиля("БлокШрифт");
			РазделительНавигации = СоздатьРазделительБлока(Форма, ДанныеВиджета,
				ПараметрыДопОтображенияБлоков.ГруппаРазделителиБлоковНавигации);
		КонецЕсли;
		
		// Команды блока.
		СтраницаБлока = СоздатьСтраницу(Форма, ДанныеВиджета, Родитель);
		СтраницаБлока.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Лево;
		СтраницаБлока.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Полуторный;
		СтраницаБлока.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
		СтраницаБлока.ВертикальнаяПрокруткаПриСжатии = Истина;
		
		Если Не ОтображатьЗаголовкиОтдельно Тогда
			СтраницаБлока.Заголовок = Блок.Заголовок;
			СтраницаБлока.ОтображатьЗаголовок = Истина;
		КонецЕсли;
				
		Для Каждого КомандаБлока Из Блок.Команды Цикл
			
			ГруппаКоманды = СоздатьОбычнуюГруппу(Форма, ДанныеВиджета, СтраницаБлока);
			ГруппаКоманды.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Одинарный;
			
			Если КомандаБлока.ОсновнаяКоманда = Неопределено
				И КомандаБлока.ВспомогательнаяКоманда = Неопределено
				И КомандаБлока.Показатель = Неопределено Тогда
				СоздатьОтступ(Форма, ДанныеВиджета, ГруппаКоманды);
				Продолжить;
			КонецЕсли;
			
			Если КомандаБлока.Показатель <> Неопределено Тогда
				
				КнопкаБлока = СоздатьПолеПоказателяСЗаголовком(
					Форма,
					ДанныеВиджета,
					КомандаБлока.Показатель,
					"Лево",
					Ложь,
					ГруппаКоманды);
				КнопкаБлока.Шрифт = РаботаСРабочимСтоломПовтИсп.ШрифтСтиля("КомандаБлокаШрифт");
				КнопкаБлока.РастягиватьПоГоризонтали = Ложь;
				
			ИначеЕсли КомандаБлока.ОсновнаяКоманда <> Неопределено Тогда
				
				КнопкаБлока = СоздатьКомандуВиджета(Форма, ДанныеВиджета, КомандаБлока.ОсновнаяКоманда, ГруппаКоманды);
				КнопкаБлока.Шрифт = РаботаСРабочимСтоломПовтИсп.ШрифтСтиля("КомандаБлокаШрифт");
				КнопкаБлока.РастягиватьПоГоризонтали = Ложь;
				
			КонецЕсли; 
			
			Если КомандаБлока.ВспомогательнаяКоманда <> Неопределено Тогда
				
				КнопкаБлока = СоздатьКомандуВиджета(
					Форма,
					ДанныеВиджета,
					КомандаБлока.ВспомогательнаяКоманда,
					ГруппаКоманды);
				КнопкаБлока.Шрифт = РаботаСРабочимСтоломПовтИсп.ШрифтСтиля("КомандаБлокаШрифт");
				
			КонецЕсли;
			
			Если КомандаБлока.ДополнительныйПоказатель <> Неопределено Тогда
				
				ПолеПоказателя = СоздатьПолеПоказателяСКартинкой(
					Форма,
					ДанныеВиджета,
					КомандаБлока.ДополнительныйПоказатель,
					Истина,
					ГруппаКоманды);
				ПолеПоказателя.Шрифт = РаботаСРабочимСтоломПовтИсп.ШрифтСтиля("ДополнительныйПоказательВиджета");
				ПолеПоказателя.Видимость = Ложь;
				
			КонецЕсли;

		КонецЦикла;
		
		Если ОтображатьЗаголовкиОтдельно Тогда
			// Имена элементов формы блока.
			ИменаЭлементовБлока = ИменаЭлементовБлока();
			ИменаЭлементовБлока.ИмяКнопкиПоказать = КнопкаПоказатьБлок.Имя;
			ИменаЭлементовБлока.ИмяКомандыПоказать = КнопкаПоказатьБлок.ИмяКоманды;
			ИменаЭлементовБлока.ИмяРазделителяНавигации = РазделительНавигации.Имя;
			ИменаЭлементовБлока.ИмяСтраницыБлока = СтраницаБлока.Имя;
			УстановитьПараметрВиджета(
				Форма,
				ДанныеВиджета.Имя,
				Блок.Заголовок,
				"ИменаЭлементовБлока",
				ИменаЭлементовБлока);
			
			ПараметрыДопОтображенияБлоков.ИменаБлоковНавигации.Добавить(Блок.Заголовок);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Создает виджет-команду.
Функция СоздатьВиджетКоманду(Форма, ДанныеВиджета, Родитель)
	
	ГруппаВиджета = СоздатьОсновнуюГруппу(
		Форма,
		ДанныеВиджета,
		Родитель,
		Перечисления.ВариантыШириныВиджетов.Обычный,
		Перечисления.ВариантыВысотыВиджетов.Обычный);
	
	// Для выравнивая заголовка виджета Команда и Показатель.
	ЗначимыеДанныеВиджета = СоздатьОбычнуюГруппу(Форма, ДанныеВиджета);
	ЗначимыеДанныеВиджета.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ЗначимыеДанныеВиджета.РастягиватьПоВертикали = Ложь;
	ЗначимыеДанныеВиджета.Высота = 6;
	
	КомандаЗаголовка = ДанныеВиджета.Команды[0];
	Если ДанныеВиджета.Команды.Количество() > 1 Тогда
		КомандаКартинки = ДанныеВиджета.Команды[1];
	Иначе
		КомандаКартинки = ДанныеВиджета.Команды[0];
	КонецЕсли;
	
	Если ДанныеВиджета.ПоложениеЗаголовка = "Низ" Тогда
		
		Если КомандаКартинки.Картинка <> Неопределено Тогда
			СоздатьИнтерактивнуюКартинку(
				Форма,
				ДанныеВиджета,
				КомандаКартинки.Картинка,
				КомандаКартинки.Действие,
				КомандаКартинки.Подсказка,
				ЗначимыеДанныеВиджета);
		КонецЕсли;
		
		ЭлементЗаголовок = СоздатьИнтерактивнуюНадпись(
			Форма,
			ДанныеВиджета,
			НРег(КомандаЗаголовка.Заголовок),
			КомандаЗаголовка.Действие,
			КомандаЗаголовка.Подсказка,
			ЗначимыеДанныеВиджета);
		ЭлементЗаголовок.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Низ;
		
	Иначе
		
		ЭлементЗаголовок = СоздатьИнтерактивнуюНадпись(
			Форма,
			ДанныеВиджета,
			КомандаЗаголовка.Заголовок,
			КомандаЗаголовка.Действие,
			КомандаЗаголовка.Подсказка,
			ЗначимыеДанныеВиджета);
		ЭлементЗаголовок.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Верх;
		
		Если КомандаКартинки.Картинка <> Неопределено Тогда
			СоздатьИнтерактивнуюКартинку(
				Форма,
				ДанныеВиджета,
				КомандаКартинки.Картинка,
				КомандаКартинки.Действие,
				КомандаКартинки.Подсказка,
				ЗначимыеДанныеВиджета);
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементЗаголовок.Шрифт = РаботаСРабочимСтоломПовтИсп.ШрифтСтиля("ВстроенныйЗаголовокВиджетаШрифт");
	НастроитьВысотуЗаголовка(ЭлементЗаголовок, СтрДлина(КомандаЗаголовка.Заголовок));
	
	Возврат ГруппаВиджета;
	
КонецФункции


// Создает поле показателя виджета-показателя.
Функция СоздатьПолеПоказателяВиджетаПоказателя(Форма, ДанныеВиджета, ДанныеПоказателя, Родитель = Неопределено)
	
	ПолеПоказателя = СоздатьПолеПоказателя(
		Форма,
		ДанныеВиджета,
		ДанныеПоказателя,
		Родитель);
	ПолеПоказателя.Шрифт = ДанныеВиджета.ОсновнойШрифт;
	ПолеПоказателя.Ширина = 15;
	ПолеПоказателя.АвтоМаксимальнаяШирина = Ложь;
	ПолеПоказателя.МаксимальнаяШирина = 15;
	ПолеПоказателя.РастягиватьПоГоризонтали = Ложь;
	
	Возврат ПолеПоказателя;
	
КонецФункции

// Создает поле показателя виджета "Два показателя".
Функция СоздатьГруппуПоказателяВиджетаДваПоказателя(Форма, ДанныеВиджета, ДанныеПоказателя, Родитель = Неопределено)
	
	ГруппаПоказателя = СоздатьОбычнуюГруппу(Форма, ДанныеВиджета, Родитель);
	ГруппаПоказателя.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаПоказателя.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	
	// Контейнер показателя.
	КонтейнерПоказателя = СоздатьОбычнуюГруппу(Форма, ДанныеВиджета, ГруппаПоказателя);
	КонтейнерПоказателя.ЦветФона = РаботаСРабочимСтоломПовтИсп.ЦветСтиля("ФонВиджетаБелый");
	КонтейнерПоказателя.Ширина = 10;
	КонтейнерПоказателя.Высота = 3;
	КонтейнерПоказателя.РастягиватьПоГоризонтали = Ложь;
	КонтейнерПоказателя.РастягиватьПоВертикали = Ложь;
	КонтейнерПоказателя.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
	КонтейнерПоказателя.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Центр;
	ПоместитьВОбычнуюВнутреннююРамку(Форма, ДанныеВиджета, КонтейнерПоказателя);
	
	// Показатель
	ПолеПоказателя = СоздатьПолеПоказателя(
		Форма,
		ДанныеВиджета,
		ДанныеПоказателя,
		КонтейнерПоказателя);
	ПолеПоказателя.Шрифт = РаботаСРабочимСтоломПовтИсп.ШрифтСтиля("НесколькоПоказателейВиджетаШрифт");
	
	// Подпись.
	ПодписьПоказателя = СоздатьИнтерактивнуюНадпись(
		Форма,
		ДанныеВиджета,
		ДанныеПоказателя.Заголовок,
		ДанныеПоказателя.Действие,
		ДанныеПоказателя.Подсказка,
		ГруппаПоказателя);
	ПодписьПоказателя.Шрифт = РаботаСРабочимСтоломПовтИсп.ШрифтСтиля("ПодписьВиджетаШрифт");
	ПодписьПоказателя.ЦветТекста = Перечисления.ЦветаВиджетов.ЦветПодписи(ДанныеВиджета.Цвет);
	
	Возврат ГруппаПоказателя;
	
КонецФункции

// Создает поле показателя виджета "Три показателя".
Функция СоздатьГруппуПоказателяВиджетаТриПоказателя(Форма, ДанныеВиджета, ДанныеПоказателя, Родитель = Неопределено)
	
	ГруппаПоказателя = СоздатьОбычнуюГруппу(Форма, ДанныеВиджета, Родитель);
	ГруппаПоказателя.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаПоказателя.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	
	// Контейнер показателя.
	КонтейнерПоказателя = СоздатьОбычнуюГруппу(Форма, ДанныеВиджета, ГруппаПоказателя);
	КонтейнерПоказателя.ЦветФона = РаботаСРабочимСтоломПовтИсп.ЦветСтиля("ФонВиджетаБелый");
	КонтейнерПоказателя.Ширина = 6;
	КонтейнерПоказателя.Высота = 3;
	КонтейнерПоказателя.РастягиватьПоГоризонтали = Ложь;
	КонтейнерПоказателя.РастягиватьПоВертикали = Ложь;
	КонтейнерПоказателя.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
	КонтейнерПоказателя.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Центр;
	ПоместитьВУзкуюВнутреннююРамку(Форма, ДанныеВиджета, КонтейнерПоказателя);
	
	// Показатель
	ПолеПоказателя = СоздатьПолеПоказателя(
		Форма,
		ДанныеВиджета,
		ДанныеПоказателя,
		КонтейнерПоказателя);
	ПолеПоказателя.Шрифт = РаботаСРабочимСтоломПовтИсп.ШрифтСтиля("ПоказательВиджетаТриПоказателяШрифт");
	
	// Подпись.
	ПодписьПоказателя = СоздатьИнтерактивнуюНадпись(
		Форма,
		ДанныеВиджета,
		ДанныеПоказателя.Заголовок,
		ДанныеПоказателя.Действие,
		ДанныеПоказателя.Подсказка,
		ГруппаПоказателя);
	ПодписьПоказателя.Шрифт = РаботаСРабочимСтоломПовтИсп.ШрифтСтиля("ПодписьВиджетаТриПоказателяШрифт");
	ПодписьПоказателя.ЦветТекста = Перечисления.ЦветаВиджетов.ЦветПодписи(ДанныеВиджета.Цвет);
	
	Возврат ГруппаПоказателя;
	
КонецФункции

// Создает поле показателя.
Функция СоздатьПолеПоказателя(Форма,
	ДанныеВиджета,
	ДанныеПоказателя,
	Родитель = Неопределено) Экспорт
	
	ПолеПоказателя = СоздатьИнтерактивнуюНадпись(
		Форма,
		ДанныеВиджета,
		ДанныеПоказателя.Заголовок,
		ДанныеПоказателя.Действие,
		ДанныеПоказателя.Подсказка,
		Родитель);
	
	СоздатьРеквизит(
		Форма,
		ДанныеВиджета,
		ДанныеПоказателя.Заголовок + "Показатель",
		ОбщегоНазначения.ОписаниеТипаСтрока(5),
		ДанныеПоказателя.Выражение,
		ДанныеПоказателя.События,
		ДанныеПоказателя.Показатель,
		ПолеПоказателя.Имя);
	
	Возврат ПолеПоказателя;
	
КонецФункции

// Создает поле показателя.
Функция СоздатьПолеПоказателяСКартинкой(Форма, ДанныеВиджета, ДанныеПоказателя, СкрыватьПустой, Родитель)
	
	ПолеПоказателя = СоздатьИнтерактивнуюНадписьСКартинкой(
		Форма,
		ДанныеВиджета,
		ДанныеПоказателя.Заголовок,
		ДанныеПоказателя.Картинка,
		ДанныеПоказателя.Действие,
		ДанныеПоказателя.Подсказка,
		Родитель);
	
	СоздатьРеквизит(
		Форма,
		ДанныеВиджета,
		ДанныеПоказателя.Заголовок + "Показатель",
		ОбщегоНазначения.ОписаниеТипаСтрока(5),
		ДанныеПоказателя.Выражение,
		ДанныеПоказателя.События,
		ДанныеПоказателя.Показатель,
		ПолеПоказателя.Имя,,,
		СкрыватьПустой);
	
	Возврат ПолеПоказателя;
	
КонецФункции

// Создает поле показателя с заголовком.
Функция СоздатьПолеПоказателяСЗаголовком(Форма, ДанныеВиджета, ДанныеПоказателя, ПоложениеЗаголовка, СкрыватьПустой, Родитель = Неопределено)
	
	ПолеПоказателяСЗаголовком = СоздатьИнтерактивнуюНадпись(
		Форма,
		ДанныеВиджета,
		ДанныеПоказателя.Заголовок,
		ДанныеПоказателя.Действие,
		ДанныеПоказателя.Подсказка,
		Родитель);
	
	СоздатьРеквизит(
		Форма,
		ДанныеВиджета,
		ДанныеПоказателя.Заголовок + "Показатель",
		ОбщегоНазначения.ОписаниеТипаСтрока(5),
		ДанныеПоказателя.Выражение,
		ДанныеПоказателя.События,
		ДанныеПоказателя.Показатель,
		ПолеПоказателяСЗаголовком.Имя,
		ДанныеПоказателя.Заголовок,
		ПоложениеЗаголовка,
		СкрыватьПустой);
	
	Возврат ПолеПоказателяСЗаголовком;
	
КонецФункции

// Создаёт команду виджета.
Функция СоздатьКоманду(Форма, ДанныеВиджета, Заголовок, Подсказка, ДанныеДействия, Картинка = Неопределено)
	
	ИмяСобытия = "Команда";
	ИмяКомандыФормы = ИмяЭлемента(ДанныеВиджета, "Команда");
	СозданнаяКоманда = РаботаСФормами.ДобавитьКоманду(
		Форма,
		ИмяКомандыФормы,
		Заголовок,
		Подсказка,
		Картинка);
	УстановитьДействиеВиджета(Форма, ДанныеВиджета, СозданнаяКоманда.Имя, ИмяСобытия, ДанныеДействия);
	УстановитьКомандуВиджета(Форма, ДанныеВиджета.Имя, СозданнаяКоманда.Имя);
	
	Возврат СозданнаяКоманда;
	
КонецФункции

// Создаёт команду виджета.
Функция СоздатьКомандуВиджета(Форма, ДанныеВиджета, КомандаВиджета, Родитель = Неопределено)
	
	Если КомандаВиджета.Картинка <> Неопределено Тогда
		СозданныйЭлемент = СоздатьИнтерактивнуюКартинку(
			Форма,
			ДанныеВиджета,
			КомандаВиджета.Картинка,
			КомандаВиджета.Действие,
			КомандаВиджета.Подсказка,
			Родитель);
	Иначе
		СозданныйЭлемент = СоздатьИнтерактивнуюНадпись(
			Форма,
			ДанныеВиджета,
			КомандаВиджета.Заголовок,
			КомандаВиджета.Действие,
			КомандаВиджета.Подсказка,
			Родитель);
	КонецЕсли;
	
	Возврат СозданныйЭлемент;
	
КонецФункции

// Создаёт кнопку виджета.
Функция СоздатьКнопку(Форма, ДанныеВиджета, ИмяКомандыФормы, Родитель = Неопределено)
	
	Если Родитель = Неопределено Тогда
		Родитель = ДанныеВиджета.ОсновнаяГруппа;
	КонецЕсли;
	
	ИмяЭлемента = ИмяЭлемента(ДанныеВиджета, "Кнопка");
	СозданныйЭлемент = РаботаСФормами.ДобавитьКнопку(Форма, ИмяЭлемента, Родитель, ИмяКомандыФормы);
	СозданныйЭлемент.Шрифт = ДанныеВиджета.ОсновнойШрифт;
	СозданныйЭлемент.ЦветТекста = Перечисления.ЦветаВиджетов.ЦветТекста(ДанныеВиджета.Цвет);
	
	Возврат СозданныйЭлемент;
	
КонецФункции

// Создаёт основную группу виджета.
Функция СоздатьОсновнуюГруппу(Форма, ДанныеВиджета, Родитель, ВариантШирины, ВариантВысоты, БезРамки = Ложь)
	
	Если ДанныеВиджета.ОсновнаяГруппа <> Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Основная группа виджета уже создана.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	НомерВиджета = 1;
	ОригинальноеИмяВиджета = ДанныеВиджета.Имя;
	Пока Форма.Элементы.Найти(ДанныеВиджета.ПространствоИмен) <> Неопределено Цикл
		ДанныеВиджета.Имя = ОригинальноеИмяВиджета + Формат(НомерВиджета , "ЧГ=0");
		Справочники.Виджеты.ИнициализироватьВиджет(ДанныеВиджета);
		НомерВиджета = НомерВиджета + 1;
	КонецЦикла;
	
	КонтейнерВиджета = РаботаСФормами.ДобавитьОбычнуюГруппу(
		Форма,
		ДанныеВиджета.ПространствоИмен + "Контейнер",
		Родитель);
	КонтейнерВиджета.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	КонтейнерВиджета.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	КонтейнерВиджета.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	КонтейнерВиджета.Высота = Перечисления.ВариантыВысотыВиджетов.ВысотаВиджета(ВариантВысоты);
	КонтейнерВиджета.РастягиватьПоВертикали = Ложь;
	КонтейнерВиджета.РастягиватьПоГоризонтали = Ложь;
	
	// Данные элемент отвечает за горизонтальный размер виджета и растягивание виджета по ширине.
	ВерхняяГраницаКонтейнераВиджета = РаботаСФормами.ДобавитьКартинку(
		Форма,
		ДанныеВиджета.ПространствоИмен + "Верх",
		КонтейнерВиджета,
		Перечисления.ЦветаВиджетов.ГраницаКонтейнераВиджета(ДанныеВиджета.Цвет));
	ВерхняяГраницаКонтейнераВиджета.Ширина = Перечисления.ВариантыШириныВиджетов.ШиринаВиджета(ВариантШирины);
	ВерхняяГраницаКонтейнераВиджета.РазмерКартинки = РазмерКартинки.Растянуть;
	
	СозданныйЭлемент = РаботаСФормами.ДобавитьОбычнуюГруппу(
		Форма,
		ДанныеВиджета.ПространствоИмен,
		КонтейнерВиджета);
	СозданныйЭлемент.ЦветФона = Перечисления.ЦветаВиджетов.ЦветФона(ДанныеВиджета.Цвет);
	СозданныйЭлемент.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Одинарный;
	СозданныйЭлемент.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Одинарный;
	СозданныйЭлемент.РастягиватьПоГоризонтали = Истина;
	СозданныйЭлемент.РастягиватьПоВертикали = Ложь;
	СозданныйЭлемент.Высота = Перечисления.ВариантыВысотыВиджетов.ВысотаВиджета(ВариантВысоты);
	СозданныйЭлемент.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложениеЭлемента.Центр;
	СозданныйЭлемент.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
	СозданныйЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ДанныеВиджета.ОсновнаяГруппа = СозданныйЭлемент;
	
	УстановитьОсновнуюГруппуВиджета(Форма, ДанныеВиджета.Имя, ДанныеВиджета.ОсновнаяГруппа.Имя);
	
	Если Не БезРамки Тогда
		ПоместитьВоВнешнююРамку(Форма, ДанныеВиджета, КонтейнерВиджета, ВариантШирины);
	КонецЕсли;
	
	Возврат СозданныйЭлемент;
	
КонецФункции

// Создаёт поле ввода виджета.
Функция СоздатьПолеВвода(Форма, ДанныеВиджета, ПутьКДанным, Родитель = Неопределено)
	
	Если Родитель = Неопределено Тогда
		Родитель = ДанныеВиджета.ОсновнаяГруппа;
	КонецЕсли;
	
	ИмяЭлемента = ИмяЭлемента(ДанныеВиджета, "ПолеВвода");
	СозданныйЭлемент = РаботаСФормами.ДобавитьПолеВвода(Форма, ИмяЭлемента, Родитель, ПутьКДанным);
	СозданныйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	СозданныйЭлемент.Шрифт = ДанныеВиджета.ОсновнойШрифт;
	СозданныйЭлемент.ЦветТекста = Перечисления.ЦветаВиджетов.ЦветТекста(ДанныеВиджета.Цвет);
	
	Возврат СозданныйЭлемент;
	
КонецФункции

// Создаёт диаграмму виджета.
Функция СоздатьДиаграмму(Форма, ДанныеВиджета, Родитель)
	
	ИмяРеквизитаДиаграммы = СоздатьРеквизитДиаграммы(
		Форма,
		ДанныеВиджета,
		"Диаграмма");
	
	ЭлементДиаграммы = РаботаСФормами.ДобавитьДиаграмму(
		Форма,
		ИмяЭлемента(ДанныеВиджета, "Диаграмма"),
		Родитель,
		ИмяРеквизитаДиаграммы);
	ЭлементДиаграммы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементДиаграммы.РастягиватьПоВертикали = Истина;
	ЭлементДиаграммы.РастягиватьПоГоризонтали = Истина;
	ЭлементДиаграммы.Высота = Перечисления.ВариантыВысотыВиджетов.ВысотаДиаграммы(
		Перечисления.ВариантыВысотыВиджетов.Обычный) - 1;
	ЭлементДиаграммы.Ширина = Перечисления.ВариантыШириныВиджетов.ШиринаДиаграммы(
		Перечисления.ВариантыШириныВиджетов.Обычный) - 1;
	УстановитьДействиеЭлемента(
		Форма,
		ДанныеВиджета,
		ЭлементДиаграммы,
		"ОбработкаРасшифровки");
	
	Возврат ЭлементДиаграммы;
	
КонецФункции

// Создаёт обычную группу виджета.
Функция СоздатьОбычнуюГруппу(Форма, ДанныеВиджета, Родитель = Неопределено) Экспорт
	
	Если Родитель = Неопределено Тогда
		Родитель = ДанныеВиджета.ОсновнаяГруппа;
	КонецЕсли;
	
	ИмяЭлемента = ИмяЭлемента(ДанныеВиджета, "ОбычнаяГруппа");
	СозданныйЭлемент = РаботаСФормами.ДобавитьОбычнуюГруппу(Форма, ИмяЭлемента, Родитель);
	
	Возврат СозданныйЭлемент;
	
КонецФункции

// Создаёт страницы виджета.
Функция СоздатьСтраницы(Форма, ДанныеВиджета, Родитель = Неопределено)
	
	Если Родитель = Неопределено Тогда
		Родитель = ДанныеВиджета.ОсновнаяГруппа;
	КонецЕсли;
	
	ИмяЭлемента = ИмяЭлемента(ДанныеВиджета, "Страницы");
	СозданныйЭлемент = РаботаСФормами.ДобавитьСтраницы(Форма, ИмяЭлемента, Родитель);
	
	Возврат СозданныйЭлемент;
	
КонецФункции

// Создаёт страницу виджета.
Функция СоздатьСтраницу(Форма, ДанныеВиджета, Родитель = Неопределено)
	
	Если Родитель = Неопределено Тогда
		Родитель = ДанныеВиджета.ОсновнаяГруппа;
	КонецЕсли;
	
	ИмяЭлемента = ИмяЭлемента(ДанныеВиджета, "Страница");
	СозданныйЭлемент = РаботаСФормами.ДобавитьСтраницу(Форма, ИмяЭлемента, Родитель);
	
	Возврат СозданныйЭлемент;
	
КонецФункции

// Создаёт картинку виджета.
Функция СоздатьКартинку(Форма, ДанныеВиджета, Картинка, Родитель = Неопределено)
	
	Если Родитель = Неопределено Тогда
		Родитель = ДанныеВиджета.ОсновнаяГруппа;
	КонецЕсли;
	
	ИмяЭлемента = ИмяЭлемента(ДанныеВиджета, "Картинка");
	СозданныйЭлемент = РаботаСФормами.ДобавитьКартинку(Форма, ИмяЭлемента, Родитель, Картинка);
	
	Возврат СозданныйЭлемент;
	
КонецФункции

Функция СоздатьПолеКартинки(Форма, ДанныеВиджета, ИмяРеквизитаВиджета, Картинка, ДанныеДействия, Родитель)
	
	ИмяРеквизитаФормы = СоздатьРеквизит(Форма, ДанныеВиджета, ИмяРеквизитаВиджета, "Число");
	СозданныйЭлемент = СоздатьПолеВвода(Форма, ДанныеВиджета, ИмяРеквизитаФормы, Родитель);
	СозданныйЭлемент.Вид = ВидПоляФормы.ПолеКартинки;
	СозданныйЭлемент.КартинкаЗначений = Картинка;
	СозданныйЭлемент.Гиперссылка = Истина;
	СозданныйЭлемент.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	СозданныйЭлемент.РастягиватьПоГоризонтали = Ложь;
	СозданныйЭлемент.РастягиватьПоВертикали = Ложь;
	
	УстановитьДействиеЭлемента(Форма, ДанныеВиджета, СозданныйЭлемент, "Нажатие");
	УстановитьДействиеВиджета(Форма, ДанныеВиджета, СозданныйЭлемент.Имя, "Нажатие", ДанныеДействия);
	
	Возврат СозданныйЭлемент;
	
КонецФункции

// Создает отступ.
Функция СоздатьОтступ(Форма, ДанныеВиджета, Родитель = Неопределено)
	
	Если Родитель = Неопределено Тогда
		Родитель = ДанныеВиджета.ОсновнаяГруппа;
	КонецЕсли;
	
	ИмяЭлемента = ИмяЭлемента(ДанныеВиджета, "Отступ");
	СозданныйЭлемент = РаботаСФормами.ДобавитьОтступ(Форма, ИмяЭлемента, Родитель);
	
	Возврат СозданныйЭлемент;
	
КонецФункции

// Создаёт разделитель виджета.
Функция СоздатьРазделитель(Форма, ДанныеВиджета, Родитель = Неопределено)
	
	Если Родитель = Неопределено Тогда
		Родитель = ДанныеВиджета.ОсновнаяГруппа;
	КонецЕсли;
	
	ИмяЭлемента = ИмяЭлемента(ДанныеВиджета, "Разделитель");
	КартинкаРазделителя = РаботаСВиджетамиПовтИсп.РазделительРабочегоСтола();
	
	СозданныйЭлемент = РаботаСФормами.ДобавитьКартинку(Форма, ИмяЭлемента, Родитель, КартинкаРазделителя);
	СозданныйЭлемент.РазмерКартинки = РазмерКартинки.Черепица;
	СозданныйЭлемент.РастягиватьПоГоризонтали = Истина;
	
	Возврат СозданныйЭлемент;
	
КонецФункции

// Создаёт разделитель блока виджета.
Функция СоздатьРазделительБлока(Форма, ДанныеВиджета, Родитель = Неопределено)
	
	СозданныйЭлемент = СоздатьРазделитель(Форма, ДанныеВиджета, Родитель);
	СозданныйЭлемент.Картинка = БиблиотекаКартинок.РазделительБлока;
	
	Возврат СозданныйЭлемент;
	
КонецФункции

// Создаёт надпись виджета.
Функция СоздатьНадпись(Форма, ДанныеВиджета, ТекстНадписи, Родитель)
	
	ИмяЭлемента = ИмяЭлемента(ДанныеВиджета, "Надпись");
	СозданныйЭлемент = РаботаСФормами.ДобавитьНадпись(
		Форма,
		ИмяЭлемента,
		Родитель,
		ТекстНадписи);
	СозданныйЭлемент.Шрифт = ДанныеВиджета.ОсновнойШрифт;
	СозданныйЭлемент.ЦветТекста = Перечисления.ЦветаВиджетов.ЦветТекста(ДанныеВиджета.Цвет);
	
	Возврат СозданныйЭлемент;
	
КонецФункции

// Возвращает очередной номер элемента виджета.
Функция НомерЭлемента(ДанныеВиджета, ТипЭлемента)
	
	НомерЭлемента = ДанныеВиджета.СчетчикЭлементов.Получить(ТипЭлемента);
	НомерЭлемента = ?(НомерЭлемента <> Неопределено, НомерЭлемента + 1, 1);
	ДанныеВиджета.СчетчикЭлементов.Вставить(ТипЭлемента, НомерЭлемента);
	
	Возврат НомерЭлемента;
	
КонецФункции

// Формирует имя элемента виджета.
Функция ИмяЭлемента(ДанныеВиджета, ТипЭлемента) Экспорт
	
	НомерЭлемента = НомерЭлемента(ДанныеВиджета, ТипЭлемента);
	НомерЭлемента = Формат(НомерЭлемента , "ЧГ=0");
	ИмяЭлемента = ДанныеВиджета.ПространствоИмен + ТипЭлемента + НомерЭлемента;
	
	Возврат ИмяЭлемента;
	
КонецФункции

// Устанавливает действие формы.
Процедура УстановитьДействиеЭлемента(Форма, ДанныеВиджета, Элемент, ИмяСобытия) Экспорт
	
	ИмяОбработчика = "Подключаемый_" + ИмяСобытия;
	Элемент.УстановитьДействие(ИмяСобытия, ИмяОбработчика);
	
КонецПроцедуры

// Устанавливает действие виджета.
Процедура УстановитьДействиеВиджета(Форма, ДанныеВиджета, ИмяЭлемента, ИмяСобытия, ДанныеДействия) Экспорт
	
	СтрокаДействиеФормы = Форма.ТаблицаДействийВиджетов.Добавить();
	СтрокаДействиеФормы.ИмяВиджета = ДанныеВиджета.Имя;
	СтрокаДействиеФормы.ИмяЭлемента = ИмяЭлемента;
	СтрокаДействиеФормы.ИмяСобытия = ИмяСобытия;
	СтрокаДействиеФормы.ДействиеВиджета = ДанныеДействия.ДействиеВиджета;
	
	Для Каждого КлючИЗначение Из ДанныеДействия Цикл
		Если КлючИЗначение.Ключ = "ДействиеВиджета" Тогда
			Продолжить;
		КонецЕсли;
		УстановитьПараметрВиджета(
			Форма,
			ДанныеВиджета.Имя,
			ИмяЭлемента,
			КлючИЗначение.Ключ,
			КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает параметр виджета.
Процедура УстановитьПараметрВиджета(Форма, ИмяВиджета, ИмяЭлемента, ИмяПараметра, ЗначениеПараметра) Экспорт
	
	Если ТипЗнч(ЗначениеПараметра) = Тип("Массив") Тогда
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.ЗагрузитьЗначения(ЗначениеПараметра);
		УстанавливаемоеЗначениеПараметра = СписокЗначений
	Иначе
		УстанавливаемоеЗначениеПараметра = ЗначениеПараметра;
	КонецЕсли;
	
	НайденныеСтроки = Форма.ТаблицаПараметровВиджетов.НайтиСтроки(
		Новый Структура("ИмяВиджета, ИмяПараметра, ИмяЭлемента", ИмяВиджета, ИмяПараметра, ИмяЭлемента));
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаПараметра = НайденныеСтроки[0];
	Иначе
		СтрокаПараметра = Форма.ТаблицаПараметровВиджетов.Добавить();
		СтрокаПараметра.ИмяВиджета = ИмяВиджета;
		СтрокаПараметра.ИмяПараметра = ИмяПараметра;
		СтрокаПараметра.ИмяЭлемента = ИмяЭлемента;
	КонецЕсли;
	СтрокаПараметра.ЗначениеПараметра = УстанавливаемоеЗначениеПараметра;
	
КонецПроцедуры

// Устанавливает элемент виджета.
Процедура УстановитьОсновнуюГруппуВиджета(Форма, ИмяВиджета, ИмяЭлемента) Экспорт
	
	СтрокаЭлементВиджета = Форма.ТаблицаОсновныхГруппВиджетов.Добавить();
	СтрокаЭлементВиджета.ИмяВиджета = ИмяВиджета;
	СтрокаЭлементВиджета.ИмяОсновнойГруппы = ИмяЭлемента;
	
КонецПроцедуры

// Устанавливает команду виджета.
Процедура УстановитьКомандуВиджета(Форма, ИмяВиджета, ИмяКоманды)
	
	СтрокаЭлементВиджета = Форма.ТаблицаКомандВиджетов.Добавить();
	СтрокаЭлементВиджета.ИмяВиджета = ИмяВиджета;
	СтрокаЭлементВиджета.ИмяКоманды = ИмяКоманды;
	
КонецПроцедуры

// Возвращает команды виджетов.
Функция КомандыВиджетов(Форма)
	
	КомандыВиджетов = Новый Массив;
	Для Каждого СтрокаКомандыВиджета Из Форма.ТаблицаКомандВиджетов Цикл
		КомандаВиджета = Форма.Команды[СтрокаКомандыВиджета.ИмяКоманды];
		КомандыВиджетов.Добавить(КомандаВиджета);
	КонецЦикла;
	
	Возврат КомандыВиджетов;
	
КонецФункции

// Возвращает массив основных групп виджетов.
Функция ОсновныеГруппыВиджетов(Форма)
	
	ОсновныеГруппыВиджетов = Новый Массив;
	Для Каждого СтрокаОсновнойГруппыВиджета Из Форма.ТаблицаОсновныхГруппВиджетов Цикл
		ОсновнаяГруппаВиджета = Форма.Элементы[СтрокаОсновнойГруппыВиджета.ИмяОсновнойГруппы];
		ОсновныеГруппыВиджетов.Добавить(ОсновнаяГруппаВиджета);
	КонецЦикла;
	
	Возврат ОсновныеГруппыВиджетов;
	
КонецФункции

// Возвращает массив реквизитов виджетов.
Функция ПутиКРеквизитамВиджетов(Форма)
	
	ПутиКРеквизитамВиджетов = Новый Массив;
	Для Каждого СтрокаРеквизитаВиджета Из Форма.ТаблицаРеквизитовВиджетов Цикл
		ПутиКРеквизитамВиджетов.Добавить(СтрокаРеквизитаВиджета.ИмяРеквизитаФормы);
	КонецЦикла;
	
	Возврат ПутиКРеквизитамВиджетов;
	
КонецФункции

// Создает реквизит виджета.
Функция СоздатьРеквизит(
	Форма,
	ДанныеВиджета,
	ИмяРеквизитаВиджета,
	Тип,
	Выражение = "",
	События = Неопределено,
	Показатель = "",
	ПолеОтображения = "",
	ОсноваЗаголовка = "",
	ПоложениеЗаголовка = "",
	СкрыватьПустой = Ложь) Экспорт
	
	СписокСобытия = Новый СписокЗначений;
	Если События <> Неопределено Тогда
		СписокСобытия.ЗагрузитьЗначения(События);
	КонецЕсли;
	
	ИмяРеквизитаФормы = ИмяЭлемента(ДанныеВиджета, "Реквизит");
	РаботаСФормами.ДобавитьРеквизит(Форма, ИмяРеквизитаФормы, Тип);
	
	СтрокаРеквизитФормы = Форма.ТаблицаРеквизитовВиджетов.Добавить();
	СтрокаРеквизитФормы.ИмяВиджета = ДанныеВиджета.Имя;
	СтрокаРеквизитФормы.ИмяРеквизитаВиджета = ИмяРеквизитаВиджета;
	СтрокаРеквизитФормы.ИмяРеквизитаФормы = ИмяРеквизитаФормы;
	СтрокаРеквизитФормы.Выражение = Выражение;
	СтрокаРеквизитФормы.События = СписокСобытия;
	СтрокаРеквизитФормы.Показатель = Показатель;
	СтрокаРеквизитФормы.ПолеОтображения = ПолеОтображения;
	СтрокаРеквизитФормы.ОсноваЗаголовка = ОсноваЗаголовка;
	СтрокаРеквизитФормы.ПоложениеЗаголовка = ПоложениеЗаголовка;
	СтрокаРеквизитФормы.СкрыватьПустой = СкрыватьПустой;
	
	Возврат ИмяРеквизитаФормы;
	
КонецФункции

// Создает реквизит виджета.
Функция СоздатьРеквизитДиаграммы(Форма, ДанныеВиджета, ИмяРеквизитаВиджета) Экспорт
	
	ИмяРеквизитаДиаграммы = СоздатьРеквизит(
		Форма,
		ДанныеВиджета,
		ИмяРеквизитаВиджета,
		"Диаграмма");
	РеквизитДиаграммы = Форма[ИмяРеквизитаДиаграммы];
	
	РеквизитДиаграммы.Обновление = Ложь;
	
	РеквизитДиаграммы.Анимация = АнимацияДиаграммы.НеИспользовать;
	РеквизитДиаграммы.ОтображатьЛегенду = Ложь;
	РеквизитДиаграммы.ОтображатьЗаголовок = Ложь;
	РеквизитДиаграммы.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	РеквизитДиаграммы.ОбластьПостроения.Верх = 0;
	РеквизитДиаграммы.ОбластьПостроения.Лево = 0;
	РеквизитДиаграммы.ОбластьПостроения.ОтображатьЛинииЗначенийШкалы = Ложь;
	РеквизитДиаграммы.ОбластьПостроения.Шрифт = РаботаСРабочимСтоломПовтИсп.ШрифтСтиля("ШрифтДиаграммыВиджета");
	РеквизитДиаграммы.РежимСглаживания = РежимСглаживанияДиаграммы.ГладкаяКривая;
	
	РеквизитДиаграммы.ТипДиаграммы = ДанныеВиджета.ТипДиаграммы;
	РеквизитДиаграммы.ОбластьПостроения.ЦветФона = Перечисления.ЦветаВиджетов.ЦветФона(ДанныеВиджета.Цвет);
	Если ЗначениеЗаполнено(ДанныеВиджета.МаксимальноеЗначение)
		Или ЗначениеЗаполнено(ДанныеВиджета.МинимальноеЗначение) Тогда
		РеквизитДиаграммы.ОсьЗначений.МаксимальноеЗначение = ДанныеВиджета.МаксимальноеЗначение;
		РеквизитДиаграммы.ОсьЗначений.СпособОпределенияМаксимальногоЗначения =
			СпособОпределенияОграничивающегоЗначенияДиаграммы.ИспользоватьЗначениеСОграничением;
		РеквизитДиаграммы.ОсьЗначений.МинимальноеЗначение = ДанныеВиджета.МинимальноеЗначение;
		РеквизитДиаграммы.ОсьЗначений.СпособОпределенияМинимальногоЗначения =
			СпособОпределенияОграничивающегоЗначенияДиаграммы.ИспользоватьЗначение;
	КонецЕсли;
	
	Если РеквизитДиаграммы.ТипДиаграммы = ТипДиаграммы.Кольцевая Тогда
		
		РеквизитДиаграммы.ОтображатьЗаголовок = Истина;
		
		РеквизитДиаграммы.ОбластьЗаголовка.ПрозрачныйФон = Истина;
		РеквизитДиаграммы.ОбластьЗаголовка.Шрифт = РаботаСРабочимСтоломПовтИсп.ШрифтСтиля("СписокВиджетаШрифт");
		
		РеквизитДиаграммы.ОбластьЗаголовка.Расположение = РасположениеОбластиЗаголовкаДиаграммы.УказываетсяРасположение;
		РеквизитДиаграммы.ОбластьЗаголовка.Верх = 0;
		РеквизитДиаграммы.ОбластьЗаголовка.Лево = 0;
		РеквизитДиаграммы.ОбластьЗаголовка.Низ = 1;
		РеквизитДиаграммы.ОбластьЗаголовка.Право = 1;
		
	КонецЕсли; 
	
	ОтображаемыеПоказатели = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтображаемыеПоказатели, ДанныеВиджета.ОсновныеПоказатели);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОтображаемыеПоказатели, ДанныеВиджета.ДополнительныеПоказатели);
	Для Каждого ДанныеПоказателя Из ОтображаемыеПоказатели Цикл
		
		СерияПоказателя = РеквизитДиаграммы.УстановитьСерию(ДанныеПоказателя.Заголовок);
		СерияПоказателя.Цвет = ДанныеПоказателя.ЦветСерии;
		СерияПоказателя.Текст = ДанныеПоказателя.Заголовок;
		СерияПоказателя.Расшифровка = ДанныеПоказателя.Действие <> Неопределено;
		СерияПоказателя.Маркер = ТипМаркераДиаграммы.Нет;
		
		УстановитьПараметрВиджета(
			Форма,
			ДанныеВиджета.Имя,
			ИмяРеквизитаДиаграммы,
			ДанныеПоказателя.Заголовок + "Показатель",
			ДанныеПоказателя.Показатель);
		УстановитьПараметрВиджета(
			Форма,
			ДанныеВиджета.Имя,
			ИмяРеквизитаДиаграммы,
			ДанныеПоказателя.Заголовок + "Выражение",
			ДанныеПоказателя.Выражение);
		УстановитьПараметрВиджета(
			Форма,
			ДанныеВиджета.Имя,
			ИмяРеквизитаДиаграммы,
			ДанныеПоказателя.Заголовок + "События",
			ДанныеПоказателя.События);
		УстановитьПараметрВиджета(
			Форма,
			ДанныеВиджета.Имя,
			ИмяРеквизитаДиаграммы,
			ДанныеПоказателя.Заголовок + "ИзменилосьЗначение",
			Ложь);
		
		Если ДанныеПоказателя.Действие <> Неопределено Тогда
			
			УстановитьДействиеВиджета(
				Форма,
				ДанныеВиджета,
				ДанныеПоказателя.Заголовок,
				"Расшифровка",
				ДанныеПоказателя.Действие);
			
		КонецЕсли;
		
	КонецЦикла;
	
	РеквизитДиаграммы.Обновление = Истина;
	
	Возврат ИмяРеквизитаДиаграммы;
	
КонецФункции

// Инициализирует таблицу реквизитов виджетов.
Процедура ИнициализироватьТаблицуРеквизитовВиджетов(Форма, ДобавляемыеРеквизиты)
	
	ИмяТаблицы = "ТаблицаРеквизитовВиджетов";
	Если РаботаСФормами.РеквизитСуществует(Форма, ИмяТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	Колонки = Новый Массив;
	Колонки.Добавить(Новый Структура("Имя, Тип", "ИмяВиджета", "Строка"));
	Колонки.Добавить(Новый Структура("Имя, Тип", "ИмяРеквизитаВиджета", "Строка"));
	Колонки.Добавить(Новый Структура("Имя, Тип", "ИмяРеквизитаФормы", "Строка"));
	Колонки.Добавить(Новый Структура("Имя, Тип", "Показатель", "СправочникСсылка.ПоказателиВиджетов"));
	Колонки.Добавить(Новый Структура("Имя, Тип", "Выражение", "Строка"));
	Колонки.Добавить(Новый Структура("Имя, Тип", "События", ""));
	Колонки.Добавить(Новый Структура("Имя, Тип", "ИзменилосьЗначение", "Булево"));
	Колонки.Добавить(Новый Структура("Имя, Тип", "ПолеОтображения", "Строка"));
	Колонки.Добавить(Новый Структура("Имя, Тип", "СкрыватьПустой", "Булево"));
	Колонки.Добавить(Новый Структура("Имя, Тип", "ОсноваЗаголовка", "Строка"));
	Колонки.Добавить(Новый Структура("Имя, Тип", "ПоложениеЗаголовка", "Строка"));
	
	РаботаСФормами.ДобавляемыеРеквизитыДобавитьТаблицу(ДобавляемыеРеквизиты, ИмяТаблицы, Колонки);
	
КонецПроцедуры

// Инициализирует таблицу действий виджетов.
Процедура ИнициализироватьТаблицуДействийВиджетов(Форма, ДобавляемыеРеквизиты)
	
	ИмяТаблицы = "ТаблицаДействийВиджетов";
	Если РаботаСФормами.РеквизитСуществует(Форма, ИмяТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	Колонки = Новый Массив;
	Колонки.Добавить(Новый Структура("Имя, Тип", "ИмяВиджета", "Строка"));
	Колонки.Добавить(Новый Структура("Имя, Тип", "ИмяЭлемента", "Строка"));
	Колонки.Добавить(Новый Структура("Имя, Тип", "ИмяСобытия", "Строка"));
	Колонки.Добавить(Новый Структура("Имя, Тип", "ДействиеВиджета", Тип("ПеречислениеСсылка.ДействияВиджетов")));
	
	РаботаСФормами.ДобавляемыеРеквизитыДобавитьТаблицу(ДобавляемыеРеквизиты, ИмяТаблицы, Колонки);
	
КонецПроцедуры

// Инициализирует таблицу параметров виджетов.
Процедура ИнициализироватьТаблицуПараметровВиджетов(Форма, ДобавляемыеРеквизиты)
	
	ИмяТаблицы = "ТаблицаПараметровВиджетов";
	Если РаботаСФормами.РеквизитСуществует(Форма, ИмяТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	Колонки = Новый Массив;
	Колонки.Добавить(Новый Структура("Имя, Тип", "ИмяВиджета", "Строка"));
	Колонки.Добавить(Новый Структура("Имя, Тип", "ИмяПараметра", "Строка"));
	Колонки.Добавить(Новый Структура("Имя, Тип", "ИмяЭлемента", "Строка"));
	Колонки.Добавить(Новый Структура("Имя, Тип", "ЗначениеПараметра", ""));
	
	РаботаСФормами.ДобавляемыеРеквизитыДобавитьТаблицу(ДобавляемыеРеквизиты, ИмяТаблицы, Колонки);
	
КонецПроцедуры

// Инициализирует таблицу элементов виджетов.
Процедура ИнициализироватьТаблицуОсновныхГруппВиджетов(Форма, ДобавляемыеРеквизиты)
	
	ИмяТаблицы = "ТаблицаОсновныхГруппВиджетов";
	Если РаботаСФормами.РеквизитСуществует(Форма, ИмяТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	Колонки = Новый Массив;
	Колонки.Добавить(Новый Структура("Имя, Тип", "ИмяВиджета", "Строка"));
	Колонки.Добавить(Новый Структура("Имя, Тип", "ИмяОсновнойГруппы", "Строка"));
	
	РаботаСФормами.ДобавляемыеРеквизитыДобавитьТаблицу(ДобавляемыеРеквизиты, ИмяТаблицы, Колонки);
	
КонецПроцедуры

// Инициализирует таблицу команд виджетов.
Процедура ИнициализироватьТаблицуКомандВиджетов(Форма, ДобавляемыеРеквизиты)
	
	ИмяТаблицы = "ТаблицаКомандВиджетов";
	Если РаботаСФормами.РеквизитСуществует(Форма, ИмяТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	Колонки = Новый Массив;
	Колонки.Добавить(Новый Структура("Имя, Тип", "ИмяВиджета", "Строка"));
	Колонки.Добавить(Новый Структура("Имя, Тип", "ИмяКоманды", "Строка"));
	
	РаботаСФормами.ДобавляемыеРеквизитыДобавитьТаблицу(ДобавляемыеРеквизиты, ИмяТаблицы, Колонки);
	
КонецПроцедуры

// Инициализирует флаг обновить все реквизиты виджетов.
Процедура ИнициализироватьФлагОбновитьВсеРеквизитыВиджетов(Форма, ДобавляемыеРеквизиты)
	
	ИмяРеквизита = "ФлагОбновитьВсеРеквизитыВиджетов";
	Если РаботаСФормами.РеквизитСуществует(Форма, ИмяРеквизита) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФормами.ДобавляемыеРеквизитыДобавить(ДобавляемыеРеквизиты, ИмяРеквизита, "Булево");
	
КонецПроцедуры

// Инициализирует флаг использования фонового обновления.
Процедура ИнициализироватьФлагИспользоватьФоновоеОбновление(Форма, ДобавляемыеРеквизиты)
	
	ИмяРеквизита = "ФлагИспользоватьФоновоеОбновление";
	Если РаботаСФормами.РеквизитСуществует(Форма, ИмяРеквизита) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФормами.ДобавляемыеРеквизитыДобавить(ДобавляемыеРеквизиты, ИмяРеквизита, "Булево");
	
КонецПроцедуры

// Инициализирует реквизит для хранения данных о длительной операции фонового обновления виджетов.
Процедура ИнициализироватьДлительнаяОперацияФоновоеОбновлениеВиджетов(Форма, ДобавляемыеРеквизиты)
	
	ИмяРеквизита = "ДлительнаяОперацияФоновоеОбновлениеВиджетов";
	Если РаботаСФормами.РеквизитСуществует(Форма, ИмяРеквизита) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеТипаПроизвольный = Новый ОписаниеТипов;
	РаботаСФормами.ДобавляемыеРеквизитыДобавить(ДобавляемыеРеквизиты, ИмяРеквизита, ОписаниеТипаПроизвольный);
	
КонецПроцедуры

// Инициализирует таблицу параметров виджетов.
Процедура ИнициализироватьЗапомненныеСостоянияВиджетов(Форма, ДобавляемыеРеквизиты)
	
	ИмяРеквизита = "ЗапомненныеСостоянияВиджетов";
	Если РаботаСФормами.РеквизитСуществует(Форма, ИмяРеквизита) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФормами.ДобавляемыеРеквизитыДобавить(ДобавляемыеРеквизиты, ИмяРеквизита, "");
	
КонецПроцедуры

// Формирует структуру элементов блока.
Функция ИменаЭлементовБлока()
	
	ИменаЭлементовБлока = Новый Структура;
	ИменаЭлементовБлока.Вставить("ИмяКомандыПоказать");
	ИменаЭлементовБлока.Вставить("ИмяКнопкиПоказать");
	ИменаЭлементовБлока.Вставить("ИмяРазделителяНавигации");
	ИменаЭлементовБлока.Вставить("ИмяСтраницыБлока");
	
	Возврат ИменаЭлементовБлока;
	
КонецФункции

// Вычисляет максимальное количество видимых блоков.
Функция МаксимальноеКоличествоВидимыхБлоков()
	
	МасштабРабочегоСтола = МасштабРабочегоСтола();
	Если МасштабРабочегоСтола < 100 Тогда
		МаксимальноеКоличествоВидимыхБлоков = 2;
	Иначе
		МаксимальноеКоличествоВидимыхБлоков = 3;
	КонецЕсли;
	
	Возврат МаксимальноеКоличествоВидимыхБлоков;
	
КонецФункции

// Проверяет наличие виджета.
Функция ЕстьВиджет(Форма, ИмяВиджета)
	
	ЕстьВиджет = Форма.ТаблицаОсновныхГруппВиджетов.НайтиСтроки(Новый Структура("ИмяВиджета", ИмяВиджета)).Количество() <> 0;
	
	Возврат ЕстьВиджет;
	
КонецФункции

// Проверяет наличие блока навигации в виджете.
Функция ЕстьБлокНавигации(Форма, ИмяВиджета, ИмяБлокаНавигации)
	
	БлокиНавигации = РаботаСВиджетамиКлиентСервер.ПараметрВиджета(Форма, ИмяВиджета, ИмяВиджета, "БлокиНавигации");
	ЕстьБлокНавигации = БлокиНавигации.Найти(ИмяБлокаНавигации) <> Неопределено;
	
	Возврат ЕстьБлокНавигации;
	
КонецФункции

// Считывает настройку виджетов в форму.
Процедура ПрочитатьНастройки(Форма)
	
	Форма.ФлагИспользоватьФоновоеОбновление = РегистрыСведений.НастройкиРабочихСтолов.ЗначениеНастройки(
		Пользователи.ТекущийПользователь(),
		Перечисления.НастройкиРабочегоСтола.ФоновоеОбновление);
	
КонецПроцедуры

// Возвращает соответствие обновленных значений показателей виджетов.
Функция ОбновленныеЗначенияПоказателейВиджетов(Форма)
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	
	Если Форма.ФлагИспользоватьФоновоеОбновление Тогда
		
		ОбновленныеЗначенияПоказателейВиджетов =
			РегистрыСведений.ЗначенияПоказателейВиджетов.ЗначенияПоказателей(
				Пользователи.ТекущийПользователь(),
				ИдентификаторКлиента);
		
		// Считаем, что спустя 10 минут показатели виджетов устаревают, и не будут отображаются.
		ПериодУстареванияЗначенийПоказателейВиджетов = 600;
		ДопустимаяДатаРасчета = ТекущаяДатаСеанса() - ПериодУстареванияЗначенийПоказателейВиджетов;
		КлючиКУдалению = Новый Массив;
		Для Каждого КлючИЗначение Из ОбновленныеЗначенияПоказателейВиджетов Цикл
			Если КлючИЗначение.Значение.ДатаРасчета < ДопустимаяДатаРасчета Тогда
				КлючиКУдалению.Добавить(КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
		Для Каждого КлючКУдалению Из КлючиКУдалению Цикл
			ОбновленныеЗначенияПоказателейВиджетов.Удалить(КлючКУдалению);
		КонецЦикла;
		
	Иначе
		ОбновленныеЗначенияПоказателейВиджетов = Новый Соответствие;
	КонецЕсли;
	
	ПоказателиДляОтложенногоОбновления = Новый Массив;
	Для Каждого ДанныеВиджета Из Форма.ТаблицаРеквизитовВиджетов Цикл
		
		Если ЗначениеЗаполнено(ДанныеВиджета.Выражение) Тогда
			
			Если Не Форма.ФлагОбновитьВсеРеквизитыВиджетов
				И Не ДанныеВиджета.ИзменилосьЗначение Тогда
				Продолжить;
			КонецЕсли;
			
			Если Форма.ФлагИспользоватьФоновоеОбновление Тогда
				// Если нужно обновить показатель - инициируем фоновое обновление.
				ПоказателиДляОтложенногоОбновления.Добавить(ДанныеВиджета.Показатель);
			Иначе
				СтруктураЗначенияПоказателя = 
					РегистрыСведений.ЗначенияПоказателейВиджетов.СтруктураЗначенияПоказателя();
				СтруктураЗначенияПоказателя.Показатель = ДанныеВиджета.Показатель;
				СтруктураЗначенияПоказателя.ЗначениеПоказателя = ЗначениеПоказателя(ДанныеВиджета.Показатель, ИдентификаторКлиента);
				СтруктураЗначенияПоказателя.ДатаРасчета = ТекущаяДатаСеанса();
				ОбновленныеЗначенияПоказателейВиджетов.Вставить(ДанныеВиджета.Показатель, СтруктураЗначенияПоказателя);
			КонецЕсли;
			ДанныеВиджета.ИзменилосьЗначение = Ложь;
			
		ИначеЕсли ТипЗнч(Форма[ДанныеВиджета.ИмяРеквизитаФормы]) = Тип("Диаграмма") Тогда
			
			ТребуетсяОбновитьВиджет = Ложь;
			РеквизитДиаграмма = Форма[ДанныеВиджета.ИмяРеквизитаФормы];
			Если Форма.ФлагОбновитьВсеРеквизитыВиджетов Тогда
				
				ТребуетсяОбновитьВиджет = Истина;
				
			Иначе
				
				Для Каждого СерияПоказателя Из РеквизитДиаграмма.Серии Цикл
					
					ИзменилосьЗначение = РаботаСВиджетамиКлиентСервер.ПараметрВиджета(
						Форма,
						ДанныеВиджета.ИмяВиджета,
						ДанныеВиджета.ИмяРеквизитаФормы,
						СерияПоказателя.Значение + "ИзменилосьЗначение");
					Если ИзменилосьЗначение Тогда
						ТребуетсяОбновитьВиджет = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если Не ТребуетсяОбновитьВиджет Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого СерияПоказателя Из РеквизитДиаграмма.Серии Цикл
				
				Показатель = РаботаСВиджетамиКлиентСервер.ПараметрВиджета(
					Форма,
					ДанныеВиджета.ИмяВиджета,
					ДанныеВиджета.ИмяРеквизитаФормы,
					СерияПоказателя.Значение + "Показатель");
				
				Если Форма.ФлагИспользоватьФоновоеОбновление Тогда
					ПоказателиДляОтложенногоОбновления.Добавить(Показатель);
				Иначе
					СтруктураЗначенияПоказателя = 
						РегистрыСведений.ЗначенияПоказателейВиджетов.СтруктураЗначенияПоказателя();
					СтруктураЗначенияПоказателя.Показатель = Показатель;
					СтруктураЗначенияПоказателя.ЗначениеПоказателя = ЗначениеПоказателя(Показатель, ИдентификаторКлиента);
					СтруктураЗначенияПоказателя.ДатаРасчета = ТекущаяДатаСеанса();
					ОбновленныеЗначенияПоказателейВиджетов.Вставить(Показатель, СтруктураЗначенияПоказателя);
				КонецЕсли;
				
				РаботаСВиджетамиКлиентСервер.УстановитьПараметрВиджета(
					Форма,
					ДанныеВиджета.ИмяВиджета,
					ДанныеВиджета.ИмяРеквизитаФормы,
					СерияПоказателя.Значение + "ИзменилосьЗначение",
					Ложь);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	ПоказателиДляОтложенногоОбновления = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПоказателиДляОтложенногоОбновления);
	
	Если ПоказателиДляОтложенногоОбновления.Количество() > 0 Тогда
		
		ПараметрыВыполненияПроцедуры = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
		ПараметрыВыполненияПроцедуры.ОжидатьЗавершение = 0;
		ПараметрыВыполненияПроцедуры.НаименованиеФоновогоЗадания = НСтр("ru = 'Фоновое обновление виджетов'");
		
		Форма.ДлительнаяОперацияФоновоеОбновлениеВиджетов = ДлительныеОперации.ВыполнитьПроцедуру(
			ПараметрыВыполненияПроцедуры,
			"РаботаСВиджетами.ФоновоеОбновлениеВиджетов",
			ПоказателиДляОтложенногоОбновления,
			ИдентификаторКлиента);
		
	Иначе
		
		Форма.ДлительнаяОперацияФоновоеОбновлениеВиджетов = Неопределено;
		
	КонецЕсли;
	
	Возврат ОбновленныеЗначенияПоказателейВиджетов;
	
КонецФункции

// Формирует значение структуры значения показателя.
// Для пустого значения значение будет 0.
Функция ЗначениеСтруктурыЗначенияПоказателя(СтруктураЗначенияПоказателя)
	
	Возврат ?(СтруктураЗначенияПоказателя <> Неопределено,
		СтруктураЗначенияПоказателя.ЗначениеПоказателя,
		0);
	
КонецФункции

// Формирует представление структуры значения показателя.
// Для пустого значения представление будет "...".
// Для числа, большего 9999 представление будет ">9999".
Функция ПредставлениеСтруктурыЗначенияПоказателя(СтруктураЗначенияПоказателя)
	
	Возврат ?(СтруктураЗначенияПоказателя <> Неопределено,
		ПредставлениеЗначенияПоказателя(СтруктураЗначенияПоказателя.ЗначениеПоказателя),
		"...");
	
КонецФункции

// Формирует представление значения показателя.
// Для числа, большего 9999 представление будет ">9999".
Функция ПредставлениеЗначенияПоказателя(ЗначениеПоказателя)
	
	Если ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
		
		Возврат ?(ЗначениеПоказателя <= 9999,
			Формат(ЗначениеПоказателя, "ЧН=0; ЧГ=0"),
			">9999");
		
	Иначе
		
		Возврат Строка(ЗначениеПоказателя);
		
	КонецЕсли;
	
КонецФункции

// Настраивает высоту заголовка.
//
// Параметры:
//  ЭлементЗаголовок - КнопкаФормы - Элемент, являющийся заголовком.
//  ДлинаЗаголовка   - Число       - Длина заголовка.
//
Процедура НастроитьВысотуЗаголовка(ЭлементЗаголовок, ДлинаЗаголовка)
	
	ЭлементЗаголовок.Высота = 2;
	Если ДлинаЗаголовка > 25 Тогда
		ЭлементЗаголовок.ВысотаЗаголовка = 2;
	КонецЕсли;
	
КонецПроцедуры

// Помещает элемент в рамку (внешнюю).
//
Функция ПоместитьВоВнешнююРамку(Форма, ДанныеВиджета, Элемент, ВариантШирины)
	
	Если ВариантШирины = Перечисления.ВариантыШириныВиджетов.Обычный Тогда
		
		КартинкиРамки = Перечисления.ЦветаВиджетов.КартинкиОбычнойВнешнейРамки(ДанныеВиджета.Цвет);
		
	ИначеЕсли ВариантШирины = Перечисления.ВариантыШириныВиджетов.Широкий Тогда
		
		КартинкиРамки = Перечисления.ЦветаВиджетов.КартинкиШирокойВнешнейРамки(ДанныеВиджета.Цвет);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестны картинки рамки для вариант ширины %1'"),
			ВариантШирины);
		
	КонецЕсли;
	
	Возврат ПоместитьВРамку(Форма, ДанныеВиджета, Элемент, КартинкиРамки);
	
КонецФункции

// Помещает элемент в рамку (внутреннюю).
//
Функция ПоместитьВОбычнуюВнутреннююРамку(Форма, ДанныеВиджета, Элемент)
	
	КартинкиРамки = Перечисления.ЦветаВиджетов.КартинкиОбычнойВнутреннейРамки(ДанныеВиджета.Цвет);
	
	Возврат ПоместитьВРамку(Форма, ДанныеВиджета, Элемент, КартинкиРамки);
	
КонецФункции

// Помещает элемент в узкую рамку (внутреннюю).
//
Функция ПоместитьВУзкуюВнутреннююРамку(Форма, ДанныеВиджета, Элемент)
	
	КартинкиРамки = Перечисления.ЦветаВиджетов.КартинкиУзкойВнутреннейРамки(ДанныеВиджета.Цвет);
	
	Возврат ПоместитьВРамку(Форма, ДанныеВиджета, Элемент, КартинкиРамки);
	
КонецФункции

// Помещает элемент в рамку.
//
Функция ПоместитьВРамку(Форма, ДанныеВиджета, Элемент, КартинкиРамки)
	
	// Контейнер рамки.
	ГруппаРамка = РаботаСФормами.ДобавитьОбычнуюГруппу(
		Форма,
		Элемент.Имя + "Рамка",
		Элемент.Родитель);
	ГруппаРамка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаРамка.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	ГруппаРамка.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	ГруппаРамка.РастягиватьПоГоризонтали = Ложь;
	ГруппаРамка.РастягиватьПоВертикали = Ложь;
	
	// Верхняя граница.
	РамкаВерх = РаботаСФормами.ДобавитьКартинку(
		Форма,
		Элемент.Имя + "РамкаВерх",
		ГруппаРамка,
		КартинкиРамки.Верх);
	
	// Нижняя граница.
	РамкаНиз = РаботаСФормами.ДобавитьКартинку(
		Форма,
		Элемент.Имя + "РамкаНиз",
		ГруппаРамка,
		КартинкиРамки.Низ);
	
	// Поместим элемент в центр рамки.
	Форма.Элементы.Переместить(Элемент, ГруппаРамка, РамкаНиз);
	
	// Соберём информацию о созданной рамке.
	ДанныеРамки = Новый Структура(
		"ГруппаРамка,
		|ГруппаРамкаВерх, РамкаВерх,
		|ГруппаРамкаНиз, РамкаНиз");
	ДанныеРамки.ГруппаРамка = ГруппаРамка;
	ДанныеРамки.РамкаВерх = РамкаВерх;
	ДанныеРамки.РамкаНиз = РамкаНиз;
	
	Возврат ДанныеРамки;
	
КонецФункции

#КонецОбласти
