#Область ПрограммныйИнтерфейс

// Формирует строковое представление кода вопроса.
//
// Параметры:
//    Раздел - СправочникСсылка.РазделыОбращений -
//    Тематика - СправочникСсылка.ТематикиОбращений -
//    Тема - СправочникСсылка.ТемыОбращений -
//    Вопрос - СправочникСсылка.ВопросыОбращений -
//
// Возвращаемое значение:
//   Строка -
Функция СформироватьКодВопроса(Раздел, Тематика, Тема, Вопрос) Экспорт 
	
	КодВопроса = "";
	
	Если ЗначениеЗаполнено(Раздел) Тогда 
		КодВопроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Раздел, "Код") + ".";
	Иначе 
		КодВопроса = "0000.";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Тематика) Тогда 
		КодВопроса = КодВопроса + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Тематика, "Код") + ".";
	Иначе 
		КодВопроса = КодВопроса + "0000.";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Тема) Тогда 
		КодВопроса = КодВопроса + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Тема, "Код") + ".";
	Иначе 
		КодВопроса = КодВопроса + "0000.";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Вопрос) Тогда 
		КодВопроса = КодВопроса + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Вопрос, "Код");
	Иначе 
		КодВопроса = КодВопроса + "0000";
	КонецЕсли;
	
	Возврат КодВопроса;
	
КонецФункции

// Заполняет вопросы обращения по документу
//
Процедура ЗаполнитьВопросыДокумента(Форма, ТаблицаВопросов) Экспорт 
	
	Форма.ВопросыОбращения.Очистить();
	Для Каждого СтрокаТаблицы Из ТаблицаВопросов Цикл 
		НоваяСтрока = Форма.ВопросыОбращения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

// Формирует структуру данных сопроводительного документа.
// 
// Параметры:
//  Документ - СправочникСсылка.ДокументыПредприятия - ссылка на документ.
// 
// Возвращаемое значение:
//  Структура:
//	* Заголовок - Строка -
//	* ДатаРегистрации - Дата -
//	* РегистрационныйНомер - Строка -
//	* Проект - СправочникСсылка.Проекты -
//	* ВопросДеятельности - СправочникСсылка.ВопросыДеятельности -
//	* Получатель - СправочникСсылка.Контрагенты -
//	* Адресат - СправочникСсылка.КонтактныеЛица -
Функция ДанныеСопроводительногоДокумента(Документ) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура();
	Результат.Вставить("Заголовок", "");
	Результат.Вставить("ДатаРегистрации", '00010101');
	Результат.Вставить("РегистрационныйНомер", "");
	Результат.Вставить("Проект", Справочники.Проекты.ПустаяСсылка());
	Результат.Вставить("ВопросДеятельности", Справочники.ВопросыДеятельности.ПустаяСсылка());
	Результат.Вставить("Получатель", Справочники.Контрагенты.ПустаяСсылка());
	Результат.Вставить("Адресат", Справочники.КонтактныеЛица.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыПредприятия.Заголовок КАК Заголовок,
		|	ДокументыПредприятия.ДатаРегистрации КАК ДатаРегистрации,
		|	ДокументыПредприятия.РегистрационныйНомер КАК РегистрационныйНомер,
		|	ДокументыПредприятия.Проект КАК Проект,
		|	ДокументыПредприятия.ВопросДеятельности КАК ВопросДеятельности,
		|	Корреспонденция.Корреспонденты.(
		|		Адресат КАК Адресат,
		|		Корреспондент КАК Корреспондент
		|	) КАК Корреспонденты
		|ИЗ
		|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Корреспонденция КАК Корреспонденция
		|		ПО Корреспонденция.Основание = ДокументыПредприятия.Ссылка
		|ГДЕ
		|	ДокументыПредприятия.Ссылка = &Документ";
		
	Запрос.Параметры.Вставить("Документ", Документ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		ЗаполнитьЗначенияСвойств(
			Результат, Выборка, "Заголовок, ДатаРегистрации, РегистрационныйНомер, Проект, ВопросДеятельности");
		
		Получатели = Выборка.Корреспонденты.Выгрузить();
		Для Каждого Получатель Из Получатели Цикл 
			Результат.Получатель = Получатель.Корреспондент;
			Результат.Адресат = Получатель.Адресат;
			Прервать;
		КонецЦикла;
	Иначе 
		ПоляДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ,
			"РегистрационныйНомер, ДатаРегистрации, Заголовок, ВопросДеятельности, Проект");
		ЗаполнитьЗначенияСвойств(Результат, ПоляДокумента);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает список документов по вводу по строке.
//
// Параметры:
//    СтрокаПоиска - Строка - введенный текст.
//    Отправитель  - СправочникСсылка.Контрагенты - ссылка на отправителя.
//
// Возвращаемое значение:
//    СписокЗначений Из СправочникСсылка.ДокументыПредприятия - список документов, удовлетворяющих поиску.
//
Функция НайтиДокументыПредприятия(СтрокаПоиска, Отправитель = Неопределено) Экспорт 
	
	ДанныеВыбора = Новый СписокЗначений;

	Если Лев(СтрокаПоиска, 1) = "№" Тогда
		СтрокаПоиска = СокрЛП(Сред(СтрокаПоиска, 2));
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Отправитель) И Не ЗначениеЗаполнено(СтрокаПоиска)Тогда
		Возврат ДанныеВыбора;
	КонецЕсли;
		
	// Поиск по номеру или наименованию
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДокументыПредприятия.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
	|ГДЕ
	|	ДокументыПредприятия.РегистрационныйНомер ПОДОБНО &СтрокаПоиска
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыПредприятия.Ссылка
	|ИЗ
	|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
	|ГДЕ
	|	ДокументыПредприятия.Заголовок ПОДОБНО &СтрокаПоиска";
	
	Запрос.Параметры.Вставить("СтрокаПоиска", СтрокаПоиска + "%");
	
	Если ЗначениеЗаполнено(Отправитель) Тогда 
		Запрос.Текст = Запрос.Текст + "
		|	И ДокументыПредприятия.Контрагенты.Контрагент = &Получатель";
		Запрос.Параметры.Вставить("Получатель", Отправитель);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 

		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ДанныеВыбора.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
	КонецЕсли;	
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Возвращает значение константы "Актуализировать классификатор". 
//
// Возвращаемое значение:
//   Булево - Требуется ли обновить классификатор обращений граждан.
//
Функция АктуализироватьКлассификаторОбращенийГраждан() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.АктуализироватьКлассификаторОбращенийГраждан.Получить();
	
КонецФункции

// Найти актуальную выгрузку ССТУ, в которой есть нужный документ-обращение.
// 
// Параметры:
//  Документ - СправочникСсылка.ДокументыПредприятия -
// 
// Возвращаемое значение:
//  См. Документы.ВыгрузкаВССТУ.СостояниеВыгрузкиССТУДокумента
Функция СостояниеВыгрузкиССТУДокумента(Знач Документ) Экспорт
	
	Если Не ПравоДоступа("Чтение", Метаданные.Документы.ВыгрузкаВССТУ) Тогда
		Возврат Документы.ВыгрузкаВССТУ.НовыйСостояниеВыгрузкиССТУ();
	КонецЕсли;
	
	Возврат Документы.ВыгрузкаВССТУ.СостояниеВыгрузкиССТУДокумента(Документ);
	
КонецФункции

// Записать флаг "Готово к выгрузке ССТУ".
// 
// Параметры:
//  ДокументОбращение - СправочникСсылка.ДокументыПредприятия -
//  ГотовоКВыгрузкеССТУ - Булево -
Процедура ЗаписатьФлагГотовоКВыгрузкеССТУ(Знач ДокументОбращение, Знач ГотовоКВыгрузкеССТУ) Экспорт
	
	КорреспонденцияСсылка = РаботаСКорреспонденцией.КорреспонденцияДокумента(ДокументОбращение);
	КорреспонденцияОбъект = КорреспонденцияСсылка.ПолучитьОбъект();
	Если КорреспонденцияОбъект.ГотовоКВыгрузкеССТУ <> ГотовоКВыгрузкеССТУ Тогда
		КорреспонденцияОбъект.ГотовоКВыгрузкеССТУ = ГотовоКВыгрузкеССТУ;
		КорреспонденцияОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Корректность документа-выгрузки в целом, например без идентификатора ССТУ нельзя создать файл выгрузки.
// 
// Параметры:
//  ДокументыОбращения - Массив Из СправочникСсылка.ДокументыПредприятия -
//  Организация - СправочникСсылка.Организации -
// 
// Возвращаемое значение:
//  Булево - Истина, если есть ошибки
Функция ЕстьОшибкиВВыгрузкеВЦелом(ДокументыОбращения, Организация) Экспорт

	Возврат Документы.ВыгрузкаВССТУ.ЕстьОшибкиВВыгрузкеВЦелом(ДокументыОбращения, Организация);

КонецФункции

// Проверка ошибок в обращениях для целей выгрузки ССТУ, для вызова с клиента.
// 
// Параметры:
//  ДокументыОбращения - Массив Из СправочникСсылка.ДокументыПредприятия -
//  
// Возвращаемое значение:
//  См. Документы.ВыгрузкаВССТУ.ОшибкиВОбращениях
Функция ОшибкиВОбращениях(Знач ДокументыОбращения) Экспорт
	
	Возврат Документы.ВыгрузкаВССТУ.ОшибкиВОбращениях(ДокументыОбращения);
	
КонецФункции

// Создать файл выгрузки в ССТУ, для вызова с клиента.
// 
// Параметры:
//  ДокументыОбращения - Массив Из СправочникСсылка.ДокументыПредприятия - Документы-обращения
//  АдресВХранилище - Строка - Адрес во временном хранилище, туда будут в случае успеха помещены данные файла.
//  ВыгрузкаСсылка - ДокументСсылка.ВыгрузкаВССТУ -
//
// Возвращаемое значение:
//  См. Документы.ВыгрузкаВССТУ.СформироватьДвоичныеДанныеВыгрузки
Функция СоздатьДвоичныеДанныеВыгрузки(Знач ДокументыОбращения, Знач АдресВХранилище, Знач ВыгрузкаСсылка) Экспорт

	Возврат Документы.ВыгрузкаВССТУ.СформироватьДвоичныеДанныеВыгрузки(
		ДокументыОбращения, АдресВХранилище, ВыгрузкаСсылка);

КонецФункции

#КонецОбласти
