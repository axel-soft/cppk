// @strict-types


#Область ПрограммныйИнтерфейс

// Вызывается при создании нового объекта по данным из сообщения КОД
//  Если необходимо определенным образом предзаполнить объект - заполняется параметр "Объект"
//  Если объект имеет аналог в существующей базе - необходимо заполнить ссылку
// 
// Параметры:
//  ОбъектXDTO - ОбъектXDTO
//  Объект - Неопределено - Заполняемое значение
//  Ссылка - Неопределено - Заполняемое значение
Процедура ПриСозданииНовогоСсылочногоОбъектаИзСообщенияКОД(ОбъектXDTO, Объект, Ссылка) Экспорт
	
	ПолноеИмя = ОбъектXDTO.Тип().Имя;
	
	Если ПолноеИмя = "Справочник.ПрограммыЭлектроннойПодписиИШифрования" Тогда
		ПриСозданииНовойПрограммыЭП(ОбъектXDTO, Объект, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при определении вариантов размещения
// 
// Параметры:
//  ТипДанных - Структура:
//    * Наименование - Строка - Имя объекта, совпадает с полным именем объекта метаданных
//  Варианты - Массив Из ПеречислениеСсылка.РазмещениеДанныхВУзлахКОД
//
Процедура ПриОпределенииВариантовРазмещения(ТипДанных, Варианты) Экспорт
	
	ВариантыРазмещенияПереопределенные = ВариантыРазмещенияОбъектаБСП(ТипДанных);
	Если ВариантыРазмещенияПереопределенные.Количество() > 0 Тогда
		Варианты = ВариантыРазмещенияПереопределенные;
		Возврат;
	КонецЕсли;
	
	ВариантыРазмещенияПереопределенные = ВариантыРазмещенияОбъектаДО(ТипДанных);
	Если ВариантыРазмещенияПереопределенные.Количество() > 0 Тогда
		Варианты = ВариантыРазмещенияПереопределенные;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при определении имени поля владельца данных
// 
// Параметры:
//  ТипДанных - СправочникОбъект.ТипыДанныхКОД
//  ИмяПоля - Строка
//
Процедура ПриОпределенииИмениПоляВладельцаДанных(ТипДанных, ИмяПоля) Экспорт
	
	ИмяПоляПереопределенное = ОсобоеИмяПоляВладельцаБСП(ТипДанных);
	Если ЗначениеЗаполнено(ИмяПоляПереопределенное) Тогда
		ИмяПоля = ИмяПоляПереопределенное;
		Возврат;
	КонецЕсли;
	
	ИмяПоляПереопределенное = ОсобоеИмяПоляВладельцаДО(ТипДанных);
	Если ЗначениеЗаполнено(ИмяПоляПереопределенное) Тогда
		ИмяПоля = ИмяПоляПереопределенное;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Выполняется при определении адресатов самостоятельных данных для определения особого алгоритма.
//
// Параметры:
//   ТипДанныхОбмена - Структура - Описание типа данных КОД (см. КОДПовтИсп.ИдентификаторИТипыДанныхОбмена):
//     * ПолноеИмя - Строка - Полное имя объекта метаданных
//   КлючиДанных - Массив Из СправочникСсылка, ДокументСсылка - Ключи объектов, которые требуют определения адресатов.
//   ПараметрыРассмотрения - Структура
//   УзлыДанных - Соответствие Из КлючИЗначение - Неявно возвращаемый параметр, в него следует поместить результат.
//   СтандартнаяОбработка - Булево - Признак отключения стандартной логики определения адресатов.
//
Процедура ПриОпределенииАдресатовСамостоятельныхДанных(ТипДанныхОбмена, КлючиДанных, ПараметрыРассмотрения,
		УзлыДанных, СтандартнаяОбработка) Экспорт
	
	Если ТипДанныхОбмена.ПолноеИмя = "Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования" Тогда
		
		УзлыДанных = АдресатыСертификатов(КлючиДанных);
		СтандартнаяОбработка = Ложь;
		
	ИначеЕсли ТипДанныхОбмена.ПолноеИмя = "РегистрСведений.ДоверенностиЭлектронныхПодписей" Тогда
		
		УзлыДанных = АдресатыДоверенностейЭП(КлючиДанных);
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗагрузкаСправочникаПрограммЭП

// При создании новой программы ЭП и шифрования
// 
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - Объект XDTO:
//    * Идентификатор - Строка - идентификатор ссылки
//    * ИмяПрограммы - Строка - Имя программы, указываемое разработчиком криптографического ПО
//    * ТипПрограммы - Число - Тип программы, указывается разработчиком криптографического ПО
//  Объект - Неопределено - Объект
//  Ссылка - Неопределено - Ссылка
//
Процедура ПриСозданииНовойПрограммыЭП(ОбъектXDTO, Объект, Ссылка)
	
	Если КОДСервер.ЭтоЦентральныйУзел() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПрограммы = ОбъектXDTO.ИмяПрограммы;
	ТипПрограммы = ОбъектXDTO.ТипПрограммы;
	
	СсылкаНаСуществующий = СсылкаНаСуществующуюПрограммуЭП(ИмяПрограммы, ТипПрограммы);
	
	Если Не ЗначениеЗаполнено(СсылкаНаСуществующий) Тогда
		Возврат;
	КонецЕсли;
	
	СуществующийОбъект = СсылкаНаСуществующий.ПолучитьОбъект();
	СуществующийОбъект.Удалить();
	
КонецПроцедуры

Функция СсылкаНаСуществующуюПрограммуЭП(ИмяПрограммы, ТипПрограммы)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПрограммыЭлектроннойПодписиИШифрования.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПрограммыЭлектроннойПодписиИШифрования КАК ПрограммыЭлектроннойПодписиИШифрования
		|ГДЕ
		|	ПрограммыЭлектроннойПодписиИШифрования.ИмяПрограммы = &ИмяПрограммы
		|	И ПрограммыЭлектроннойПодписиИШифрования.ТипПрограммы = &ТипПрограммы
		|	И НЕ ПрограммыЭлектроннойПодписиИШифрования.ПометкаУдаления";
	Запрос.УстановитьПараметр("ИмяПрограммы", ИмяПрограммы);
	Запрос.УстановитьПараметр("ТипПрограммы", ТипПрограммы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.ПрограммыЭлектроннойПодписиИШифрования.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ДанныеКОДОбъектовЭП

Функция ОсобоеИмяПоляВладельцаБСП(ТипДанных)
	
	ДанныеОбъектов = ДанныеКОДОбъектовБСП();
	
	ДанныеОбъекта = ДанныеОбъектов.Получить(ТипДанных.Наименование);
	Если ДанныеОбъекта = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяПоляПереопределенное = ДанныеОбъекта.ИмяПоляВладельца;
	Если ИмяПоляПереопределенное <> "" Тогда
		Возврат ИмяПоляПереопределенное;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ОсобоеИмяПоляВладельцаДО(ТипДанных)
	
	ДанныеОбъектов = ДанныеКОДОбъектовДО();
	
	ДанныеОбъекта = ДанныеОбъектов.Получить(ТипДанных.Наименование);
	Если ДанныеОбъекта = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяПоляПереопределенное = ДанныеОбъекта.ИмяПоляВладельца;
	Если ИмяПоляПереопределенное <> "" Тогда
		Возврат ИмяПоляПереопределенное;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ВариантыРазмещенияОбъектаБСП(ТипДанных)
	
	ДанныеОбъектов = ДанныеКОДОбъектовБСП();
	
	ДанныеОбъекта = ДанныеОбъектов.Получить(ТипДанных.Наименование);
	Если ДанныеОбъекта = Неопределено Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	ВариантыПереопределенные = ДанныеОбъекта.ВариантыРазмещения;
	Если ВариантыПереопределенные.Количество() > 0 Тогда
		Возврат ВариантыПереопределенные;
	КонецЕсли;
	
	Возврат Новый Массив();
	
КонецФункции

Функция ВариантыРазмещенияОбъектаДО(ТипДанных)
	
	ДанныеОбъектов = ДанныеКОДОбъектовДО();
	
	ДанныеОбъекта = ДанныеОбъектов.Получить(ТипДанных.Наименование);
	Если ДанныеОбъекта = Неопределено Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	ВариантыПереопределенные = ДанныеОбъекта.ВариантыРазмещения;
	Если ВариантыПереопределенные.Количество() > 0 Тогда
		Возврат ВариантыПереопределенные;
	КонецЕсли;
	
	Возврат Новый Массив();
	
КонецФункции

// Данные КОД объектов БСП.
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Имя объекта КОД
//    * Значение - см. НовыеДанныеКОДОбъекта
//
Функция ДанныеКОДОбъектовБСП()
	
	ДанныеОбъектов = Новый Соответствие();
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "ЗаявленияНаВыпускСертификата";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().РегистрСведений;
	ДанныеОбъекта.ИмяПоляВладельца = "Сертификат";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ПоПравамИСсылкам);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "ОповещенияПользователейСертификатов";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().РегистрСведений;
	ДанныеОбъекта.ИмяПоляВладельца = "Сертификат";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ПоПравамИСсылкам);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "СертификатыШифрования";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().РегистрСведений;
	ДанныеОбъекта.ИмяПоляВладельца = "ЗашифрованныйОбъект";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ПоПравамИСсылкам);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "ЭлектронныеПодписи";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().РегистрСведений;
	ДанныеОбъекта.ИмяПоляВладельца = "ПодписанныйОбъект";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ПоПравамИСсылкам);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "СертификатыКлючейЭлектроннойПодписиИШифрования";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().Справочник;
	ДанныеОбъекта.ИмяПоляВладельца = "";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ПоПравамИСсылкам);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	Возврат ДанныеОбъектов;
	
КонецФункции

// Данные КОД объектов ДО.
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Имя объекта КОД
//    * Значение - см. НовыеДанныеКОДОбъекта
//
Функция ДанныеКОДОбъектовДО()
	
	ДанныеОбъектов = Новый Соответствие();
	
	ДанныеОбъекта = НовыеДанныеКОДОбъекта();
	ДанныеОбъекта.ИмяМетаданого = "ДоверенностиЭлектронныхПодписей";
	ДанныеОбъекта.ТипМетаданного = ТипыМетаданных().РегистрСведений;
	ДанныеОбъекта.ИмяПоляВладельца = "";
	ДанныеОбъекта.ВариантыРазмещения.Добавить(Перечисления.РазмещениеДанныхВУзлахКОД.ПоПравамИСсылкам);
	ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеОбъекта);
	
	Возврат ДанныеОбъектов;
	
КонецФункции

// Добавляет данные объекта в набор данных объектов
// 
// Параметры:
//  ДанныеОбъектов - Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Полное имя объекта метаданных типа "Справочник.ДокументыПредприятия"
//    * Значение см. НовыеДанныеКОДОбъекта
//  ДанныеКОДОбъекта см. НовыеДанныеКОДОбъекта
Процедура ДобавитьДанныеОбъектаКОДВДанныеОбъектов(ДанныеОбъектов, ДанныеКОДОбъекта)
	
	КлючОбъекта = СтрШаблон("%1.%2", ДанныеКОДОбъекта.ТипМетаданного, ДанныеКОДОбъекта.ИмяМетаданого);
	
	ДанныеОбъектов.Вставить(КлючОбъекта, ДанныеКОДОбъекта);
	
КонецПроцедуры

// Новые данные КОД объекта.
// 
// Возвращаемое значение:
//  Структура:
// * ТипМетаданного - Строка - одно из значений ТипыМетаданных
// * ИмяМетаданого - Строка
// * ИмяПоляВладельца - Строка
// * ВариантыРазмещения - Массив Из ПеречислениеСсылка.РазмещениеДанныхВУзлахКОД
Функция НовыеДанныеКОДОбъекта()
	
	ДанныеКОДВладельца = Новый Структура;
	ДанныеКОДВладельца.Вставить("ТипМетаданного", ТипыМетаданных().Справочник);
	ДанныеКОДВладельца.Вставить("ИмяМетаданого", "");
	ДанныеКОДВладельца.Вставить("ИмяПоляВладельца", "");
	ДанныеКОДВладельца.Вставить("ВариантыРазмещения", Новый Массив());
	
	Возврат ДанныеКОДВладельца;
	
КонецФункции

Функция ТипыМетаданных()
	
	ТипыМетаданных = Новый Структура;
	ТипыМетаданных.Вставить("Справочник", "Справочник");
	ТипыМетаданных.Вставить("Документ", "Документ");
	ТипыМетаданных.Вставить("РегистрСведений", "РегистрСведений");
	
	Возврат ТипыМетаданных;
	
КонецФункции

#КонецОбласти

#Область ОпределениеАдресатов

// Возвращает узлы-адресаты для сертификатов ЭП и шифрования
// 
// Параметры:
//  Сертификаты - Массив Из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//    * Значение - Массив Из СправочникСсылка.УзлыКОД
//
Функция АдресатыСертификатов(Сертификаты)
	
	УзлыСертификатов = Новый Соответствие();
	
	ПользователиСертификатов = ПользователиКоторымДоступныСертификаты(Сертификаты);
	ПользователиИУзлы = КОДПовтИсп.ПользователиИУзлы(КОДСервер.ВариантыОтбораУзлов().ВсеКромеЭтого);
	
	Для Каждого Сертификат Из Сертификаты Цикл
		
		УзлыСертификата = Новый Массив; // Массив Из СправочникСсылка.УзлыКОД
		УзлыСертификатов[Сертификат] = УзлыСертификата;
		
		ПользователиСертификата = ПользователиСертификатов[Сертификат];
		Для Каждого Пользователь Из ПользователиСертификата Цикл
			
			УзлыПользователя = ПользователиИУзлы[Пользователь];
			
			Если УзлыПользователя = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого УзелПользователя Из УзлыПользователя Цикл
				УзлыСертификата.Добавить(УзелПользователя);
			КонецЦикла;
			
		КонецЦикла;
		
		УзлыСертификата = ОбщегоНазначенияКлиентСервер.СвернутьМассив(УзлыСертификата);
		
	КонецЦикла;
	
	Возврат УзлыСертификатов;
	
КонецФункции

// Пользователи которым доступны сертификаты.
// 
// Параметры:
//  Сертификаты - Массив Из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//    * Значение - Массив Из СправочникСсылка.Пользователи
//
Функция ПользователиКоторымДоступныСертификаты(Сертификаты)
	
	ПользователиСертификатов = Новый Соответствие();
	Для Каждого Сертификат Из Сертификаты Цикл
		ПользователиСертификатов[Сертификат] = Новый Массив();
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка КАК Сертификат,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователь КАК Пользователь
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
		|ГДЕ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка В (&Сертификаты)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи.Ссылка КАК Поле1,
		|	СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи.Пользователь КАК Поле2
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователи КАК
		|		СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи
		|ГДЕ
		|	СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи.Ссылка В (&Сертификаты)";
	Запрос.УстановитьПараметр("Сертификаты", Сертификаты);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПользователиСертификата = ПользователиСертификатов[Выборка.Сертификат]; // Массив
		ПользователиСертификата.Добавить(Выборка.Пользователь);
	КонецЦикла;
	
	Возврат ПользователиСертификатов;
	
КонецФункции

#Область АдресатыДоверенностейЭлектронныхПодписей

// Адресаты доверенностей ЭП.
// 
// Параметры:
//  КлючиЗаписей - Массив Из СправочникСсылка.ИдентификаторыОбъектовМетаданных
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//    * Значение - Массив Из СправочникСсылка.УзлыКОД
//
Функция АдресатыДоверенностейЭП(КлючиЗаписей)
	
	УзлыЗаписей = Новый Соответствие();
	
	ОбъектыПоКлючам = ПодписанныеОбъектыПоКлючамЗаписейДоверенностейЭП(КлючиЗаписей);
	
	ВсеОбъекты = Новый Массив();
	Для Каждого Элемент Из ОбъектыПоКлючам Цикл
		ОбъектыКлюча = Элемент.Значение;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеОбъекты, ОбъектыКлюча);
	КонецЦикла;
	ВсеОбъекты = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВсеОбъекты);
	
	АдресатыОбъектов = АдресатыПодписанныхОбъектов(ВсеОбъекты);
	
	Для Каждого Ключ Из КлючиЗаписей Цикл
		
		АдресатыКлюча = Новый Массив();
		УзлыЗаписей[Ключ] = АдресатыКлюча;
		
		ОбъектыКлюча = ОбъектыПоКлючам[Ключ];
		Для Каждого Объект Из ОбъектыКлюча Цикл
			АдресатыОбъекта = АдресатыОбъектов[Объект];
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(АдресатыКлюча, АдресатыОбъекта);
		КонецЦикла;
		
		АдресатыКлюча = ОбщегоНазначенияКлиентСервер.СвернутьМассив(АдресатыКлюча);
		
	КонецЦикла;
	
	Возврат УзлыЗаписей;
	
КонецФункции

// Подписанные объекты по ключам записей доверенностей ЭП.
// 
// Параметры:
//  КлючиЗаписей - Массив Из СправочникСсылка.ИдентификаторыОбъектовМетаданных
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//    * Значение - Массив Из ОпределяемыйТип.ПодписанныйОбъект
//
Функция ПодписанныеОбъектыПоКлючамЗаписейДоверенностейЭП(КлючиЗаписей)
	
	ОбъектыПоКлючам = Новый Соответствие();
	Для Каждого Ключ Из КлючиЗаписей Цикл
		ОбъектыПоКлючам[Ключ] = Новый Массив;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоверенностиЭлектронныхПодписей.ИдентификаторОтметкиВремени КАК Ключ,
		|	ЭлектронныеПодписи.ПодписанныйОбъект КАК Объект
		|ИЗ
		|	РегистрСведений.ДоверенностиЭлектронныхПодписей КАК ДоверенностиЭлектронныхПодписей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|		ПО ДоверенностиЭлектронныхПодписей.УникальныйИдентификаторПодписи = ЭлектронныеПодписи.ИдентификаторПодписи
		|ГДЕ
		|	ДоверенностиЭлектронныхПодписей.ИдентификаторОтметкиВремени В (&КлючиЗаписей)";
	Запрос.УстановитьПараметр("КлючиЗаписей", КлючиЗаписей);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОбъектыКлюча = ОбъектыПоКлючам[Выборка.Ключ]; // Массив
		ОбъектыКлюча.Добавить(Выборка.Объект);
	КонецЦикла;
	
	Возврат ОбъектыПоКлючам;
	
КонецФункции

// Адресаты подписанных объектов.
// 
// Параметры:
//  ПодписанныеОбъекты - Массив Из ОпределяемыйТип.ПодписанныйОбъект
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - ОпределяемыйТип.ПодписанныйОбъект
//    * Значение - Массив Из СправочникСсылка.УзлыКОД
//
Функция АдресатыПодписанныхОбъектов(ПодписанныеОбъекты)
	
	УзлыПоОбъектам = Новый Соответствие();
	Для Каждого Объект Из ПодписанныеОбъекты Цикл
		УзлыПоОбъектам[Объект] = Новый Массив();
	КонецЦикла;
	
	ОбъектыПоТипам = ПодписанныеОбъектыПоТипам(ПодписанныеОбъекты);
	
	Для Каждого ЭлементТипа Из ОбъектыПоТипам Цикл
		
		Тип = ЭлементТипа.Ключ;
		ОбъектыТипа = ЭлементТипа.Значение;
		
		АдресатыОбъектовТипа = АдресатыОднотипныхПодписанныхОбъектов(ОбъектыТипа, Тип);
		
		Для Каждого ЭлементОбъекта Из АдресатыОбъектовТипа Цикл
			
			Объект = ЭлементОбъекта.Ключ;
			Адресаты = ЭлементОбъекта.Значение;
			
			УзлыОбъекта = УзлыПоОбъектам[Объект]; // Массив
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УзлыОбъекта, Адресаты);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат УзлыПоОбъектам;
	
КонецФункции

// Подписанные объекты по типам.
// 
// Параметры:
//  ПодписанныеОбъекты - Массив Из ОпределяемыйТип.ПодписанныйОбъект
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Имя типа подписанного объекта, см. ТипыПодписанныхОбъектов
//    * Значение - Массив Из ОпределяемыйТип.ПодписанныйОбъект
//
Функция ПодписанныеОбъектыПоТипам(ПодписанныеОбъекты)
	
	ОбъектыПоТипам = Новый Соответствие();
	Для Каждого Элемент Из ТипыПодписанныхОбъектов() Цикл
		ОбъектыПоТипам[Элемент.Значение] = Новый Массив();
	КонецЦикла;
	
	Для Каждого Объект Из ПодписанныеОбъекты Цикл
		
		Если ТипЗнч(Объект) = Тип(ТипыПодписанныхОбъектов().ФайлКонтейнераЭДО) Тогда
			ОбъектыПоТипу = ОбъектыПоТипам[ТипыПодписанныхОбъектов().ФайлКонтейнераЭДО]; // Массив
		ИначеЕсли ТипЗнч(Объект) = Тип(ТипыПодписанныхОбъектов().Файл) Тогда
			ОбъектыПоТипу = ОбъектыПоТипам[ТипыПодписанныхОбъектов().Файл];
		ИначеЕсли ТипЗнч(Объект) = Тип(ТипыПодписанныхОбъектов().Документ) Тогда
			ОбъектыПоТипу = ОбъектыПоТипам[ТипыПодписанныхОбъектов().Документ];
		ИначеЕсли ТипЗнч(Объект) = Тип(ТипыПодписанныхОбъектов().Резолюция) Тогда
			ОбъектыПоТипу = ОбъектыПоТипам[ТипыПодписанныхОбъектов().Резолюция];
		ИначеЕсли ТипЗнч(Объект) = Тип(ТипыПодписанныхОбъектов().ФайлСправкиСПАРКРиски) Тогда
			ОбъектыПоТипу = ОбъектыПоТипам[ТипыПодписанныхОбъектов().ФайлСправкиСПАРКРиски];
		ИначеЕсли ТипЗнч(Объект) = Тип(ТипыПодписанныхОбъектов().ВизаСогласования) Тогда
			ОбъектыПоТипу = ОбъектыПоТипам[ТипыПодписанныхОбъектов().ВизаСогласования];
		ИначеЕсли ТипЗнч(Объект) = Тип(ТипыПодписанныхОбъектов().ФайлСообщенияЭДО) Тогда
			ОбъектыПоТипу = ОбъектыПоТипам[ТипыПодписанныхОбъектов().ФайлСообщенияЭДО];
		ИначеЕсли ТипЗнч(Объект) = Тип(ТипыПодписанныхОбъектов().Мероприятие) Тогда
			ОбъектыПоТипу = ОбъектыПоТипам[ТипыПодписанныхОбъектов().Мероприятие];
		ИначеЕсли ТипЗнч(Объект) = Тип(ТипыПодписанныхОбъектов().ВерсияФайла) Тогда
			ОбъектыПоТипу = ОбъектыПоТипам[ТипыПодписанныхОбъектов().ВерсияФайла];
		Иначе
			ОбъектыПоТипу = ОбъектыПоТипам[ТипыПодписанныхОбъектов().Прочее];
		КонецЕсли;
		
		ОбъектыПоТипу.Добавить(Объект);
		
	КонецЦикла;
	
	Возврат ОбъектыПоТипам;
	
КонецФункции

Функция ТипыПодписанныхОбъектов()
	
	ТипыОбъектов = Новый Структура;
	ТипыОбъектов.Вставить("ФайлКонтейнераЭДО", "СправочникСсылка.ТранспортныйКонтейнерЭДОПрисоединенныеФайлы");
	ТипыОбъектов.Вставить("Файл", "СправочникСсылка.Файлы");
	ТипыОбъектов.Вставить("Документ", "СправочникСсылка.ДокументыПредприятия");
	ТипыОбъектов.Вставить("Резолюция", "СправочникСсылка.Резолюции");
	ТипыОбъектов.Вставить("ФайлСправкиСПАРКРиски", "СправочникСсылка.СправкиСПАРКРискиПрисоединенныеФайлы");
	ТипыОбъектов.Вставить("ВизаСогласования", "СправочникСсылка.ВизыСогласования");
	ТипыОбъектов.Вставить("ФайлСообщенияЭДО", "СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы");
	ТипыОбъектов.Вставить("Мероприятие", "СправочникСсылка.Мероприятия");
	ТипыОбъектов.Вставить("ВерсияФайла", "СправочникСсылка.ВерсииФайлов");
	ТипыОбъектов.Вставить("Прочее", "");
	
	Возврат ТипыОбъектов;
	
КонецФункции

// Адресаты однотипных подписанных объектов.
// 
// Параметры:
//  ПодписанныеОбъекты - Массив Из ОпределяемыйТип.ПодписанныйОбъект
//  Тип - Строка - Имя типа, см. ТипыПодписанныхОбъектов
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - ОпределяемыйТип.ПодписанныйОбъект
//    * Значение - Массив Из СправочникСсылка.УзлыКОД
//
Функция АдресатыОднотипныхПодписанныхОбъектов(ПодписанныеОбъекты, Тип)
	
	Если Тип = ТипыПодписанныхОбъектов().ФайлКонтейнераЭДО Тогда
		
		Возврат ОбменСКонтрагентамиДОХолдинг.УзлыФайловТранспортныхКонтейнеровЭДО(ПодписанныеОбъекты);
		
	ИначеЕсли Тип = ТипыПодписанныхОбъектов().Файл Тогда
		
		Возврат УзлыФайловДО(ПодписанныеОбъекты);
		
	ИначеЕсли Тип = ТипыПодписанныхОбъектов().Документ Тогда
		
		Возврат УзлыДокументовДО(ПодписанныеОбъекты);
		
	ИначеЕсли Тип = ТипыПодписанныхОбъектов().Резолюция Тогда
		
		Возврат УзлыРезолюций(ПодписанныеОбъекты);
		
	ИначеЕсли Тип = ТипыПодписанныхОбъектов().ФайлСправкиСПАРКРиски Тогда
		
		Возврат УзлыФайловСправокСПАРКРиски(ПодписанныеОбъекты);
		
	ИначеЕсли Тип = ТипыПодписанныхОбъектов().ВизаСогласования Тогда
		
		Возврат УзлыВизСогласования(ПодписанныеОбъекты);
		
	ИначеЕсли Тип = ТипыПодписанныхОбъектов().ФайлСообщенияЭДО Тогда
		
		Возврат ОбменСКонтрагентамиДОХолдинг.УзлыФайловСообщенийЭДО(ПодписанныеОбъекты);
		
	ИначеЕсли Тип = ТипыПодписанныхОбъектов().Мероприятие Тогда
		
		Возврат УзлыМероприятий(ПодписанныеОбъекты);
		
	ИначеЕсли Тип = ТипыПодписанныхОбъектов().ВерсияФайла Тогда
		
		Возврат УзлыВерсийФайлов(ПодписанныеОбъекты);
		
	ИначеЕсли Тип = ТипыПодписанныхОбъектов().Прочее Тогда
		
		Возврат УзлыПрочихПодписанныхОбъектов(ПодписанныеОбъекты);
		
	КонецЕсли;
	
КонецФункции

// Узлы файлов.
// 
// Параметры:
//  Файлы - Массив Из СправочникСсылка.Файлы
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - СправочникСсылка.Файлы
//    * Значение - Массив Из СправочникСсылка.УзлыКОД
Функция УзлыФайловДО(Файлы)
	
	УзлыФайлов = СтандартныеУзлыОднотипныхСамостоятельныхДанных(Файлы);
	
	Возврат УзлыФайлов;
	
КонецФункции

// Узлы документов ДО.
// 
// Параметры:
//  ДокументыДО - Массив Из СправочникСсылка.ДокументыПредприятия
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - СправочникСсылка.ДокументыПредприятия
//    * Значение - Массив Из СправочникСсылка.УзлыКОД
//
Функция УзлыДокументовДО(ДокументыДО)
	
	ПараметрыПолученияАдресатов = ДелопроизводствоХолдинг.НовыеПараметрыОпределенияАдресатовДокументов();
	УзлыДокументовПоПравилам = ДелопроизводствоХолдинг.АдресатыДокументов(ДокументыДО, ПараметрыПолученияАдресатов);
	УзлыДокументовПоНаличию = УзлыДанныхПоНаличию(ДокументыДО);
	
	УзлыДокументов = Новый Соответствие;
	Для Каждого Документ Из ДокументыДО Цикл
		
		УзлыДокумента = УзлыДокументов[Документ];
		Если УзлыДокумента = Неопределено Тогда
			УзлыДокумента = Новый Массив;
			УзлыДокументов[Документ] = УзлыДокумента;
		КонецЕсли;
		
		УзлыПоПравилам = УзлыДокументовПоПравилам[Документ];
		Если УзлыПоПравилам <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УзлыДокумента, УзлыПоПравилам);
		КонецЕсли;
		
		УзлыПоНаличию = УзлыДокументовПоНаличию[Документ]; // Массив
		Если УзлыПоНаличию <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УзлыДокумента, УзлыПоНаличию);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(УзлыДокумента);
		
	КонецЦикла;
	
	Возврат УзлыДокументов;
	
КонецФункции

// Узлы резолюций.
// 
// Параметры:
//  Резолюции - Массив Из СправочникСсылка.Резолюции
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - СправочникСсылка.Резолюции
//    * Значение - Массив Из СправочникСсылка.УзлыКОД
//
Функция УзлыРезолюций(Резолюции)
	
	УзлыРезолюций = СтандартныеУзлыОднотипныхСамостоятельныхДанных(Резолюции);
	
	Возврат УзлыРезолюций;
	
КонецФункции

// Узлы файлов справок СПАРКРиски.
// 
// Параметры:
//  ФайлыСправок - Массив Из СправочникСсылка.СправкиСПАРКРискиПрисоединенныеФайлы
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - СправочникСсылка.СправкиСПАРКРискиПрисоединенныеФайлы
//    * Значение - Массив Из СправочникСсылка.УзлыКОД
//
Функция УзлыФайловСправокСПАРКРиски(ФайлыСправок)
	
	ВсеУзлы = КОДСервер.ОстальныеУзлы();
	
	УзлыФайлов = Новый Соответствие();
	Для Каждого Файл Из ФайлыСправок Цикл
		УзлыФайлов[Файл] = ОбщегоНазначения.СкопироватьРекурсивно(ВсеУзлы);
	КонецЦикла;
	
	Возврат УзлыФайлов;
	
КонецФункции

// Узлы виз согласования.
// 
// Параметры:
//  Визы - Массив Из СправочникСсылка.ВизыСогласования
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - СправочникСсылка.ВизыСогласования
//    * Значение - Массив Из СправочникСсылка.УзлыКОД
//
Функция УзлыВизСогласования(Визы)
	
	УзлыВиз = СтандартныеУзлыОднотипныхСамостоятельныхДанных(Визы);
	
	Возврат УзлыВиз;
	
КонецФункции

// Узлы мероприятий.
// 
// Параметры:
//  Мероприятия - Массив Из СправочникСсылка.Мероприятия
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - СправочникСсылка.Мероприятия
//    * Значение - Массив Из СправочникСсылка.УзлыКОД
//
Функция УзлыМероприятий(Мероприятия)
	
	ВсеУзлы = КОДСервер.ОстальныеУзлы();
	
	УзлыМероприятий = Новый Соответствие();
	Для Каждого Мероприятие Из Мероприятия Цикл
		УзлыМероприятий[Мероприятие] = ОбщегоНазначения.СкопироватьРекурсивно(ВсеУзлы);
	КонецЦикла;
	
	Возврат УзлыМероприятий;
	
КонецФункции

// Узлы версий файлов.
// 
// Параметры:
//  ВерсииФайлов - Массив Из СправочникСсылка.ВерсииФайлов
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - СправочникСсылка.ВерсииФайлов
//    * Значение - Массив Из СправочникСсылка.УзлыКОД
//
Функция УзлыВерсийФайлов(ВерсииФайлов)
	
	ФайлыПоВерсиям = ФайлыПоВерсиямФайлов(ВерсииФайлов);
	Файлы = Новый Массив();
	Для Каждого Элемент Из ФайлыПоВерсиям Цикл
		Файл = Элемент.Значение;
		Файлы.Добавить(Файл);
	КонецЦикла;
	
	УзлыФайлов = УзлыФайловДО(Файлы);
	
	УзлыВерсий = Новый Соответствие();
	Для Каждого Версия Из ВерсииФайлов Цикл
		
		УзлыВерсии = Новый Массив();
		УзлыВерсий[Версия] = УзлыВерсии;
		
		Файл = ФайлыПоВерсиям[Версия];
		УзлыФайла = УзлыФайлов[Файл];
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УзлыВерсии, УзлыФайла);
		
	КонецЦикла;
	
	Возврат УзлыВерсий;
	
КонецФункции

// Файлы версий.
// 
// Параметры:
//  ВерсииФайлов - Массив Из СправочникСсылка.ВерсииФайлов
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - СправочникСсылка.ВерсииФайлов
//    * Значение - СправочникСсылка.Файлы
//
Функция ФайлыПоВерсиямФайлов(ВерсииФайлов)
	
	ФайлыПоВерсиям = Новый Соответствие();
	Для Каждого Версия Из ВерсииФайлов Цикл
		ФайлыПоВерсиям[Версия] = Справочники.Файлы.ПустаяСсылка();
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВерсииФайлов.Ссылка КАК Версия,
		|	ВерсииФайлов.Владелец КАК Файл
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|ГДЕ
		|	ВерсииФайлов.Ссылка В (&ВерсииФайлов)";
	Запрос.УстановитьПараметр("ВерсииФайлов", ВерсииФайлов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ФайлыПоВерсиям[Выборка.Версия] = Выборка.Файл;
	КонецЦикла;
	
	Возврат ФайлыПоВерсиям;
	
КонецФункции

// Узлы подписанных объектов, которые не определены стандартным методом
// 
// Параметры:
//  ПодписанныеОбъекты - Массив Из ОпределяемыйТип.ПодписанныйОбъект
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - ОпределяемыйТип.ПодписанныйОбъект
//    * Значение - Массив Из СправочникСсылка.УзлыКОД
//
Функция УзлыПрочихПодписанныхОбъектов(ПодписанныеОбъекты)
	
	УзлыОбъектов = Новый Соответствие();
	Для Каждого Объект Из ПодписанныеОбъекты Цикл
		УзлыОбъектов[Объект] = Новый Массив();
	КонецЦикла;
	
	Возврат УзлыОбъектов;
	
КонецФункции

// Стандартные узлы однотипных самостоятельных данных.
// 
// Параметры:
//  Данные - Массив Из ЛюбаяСсылка
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - ЛюбаяСсылка
//    * Значение - Массив Из СправочникСсылка.УзлыКОД
//
Функция СтандартныеУзлыОднотипныхСамостоятельныхДанных(Данные)
	
	УзлыОбъектовПоПравам = КОДСервер.УзлыСамостоятельныхДанныхПоПравам(Данные);
	УзлыОбъектовПоНаличию = УзлыДанныхПоНаличию(Данные);
	
	УзлыОбъектов = Новый Соответствие();
	Для Каждого Объект Из Данные Цикл
		
		УзлыОбъекта = УзлыОбъектов[Объект];
		Если УзлыОбъекта = Неопределено Тогда
			УзлыОбъекта = Новый Массив;
			УзлыОбъектов[Объект] = УзлыОбъекта;
		КонецЕсли;
		
		УзлыПоПравам = УзлыОбъектовПоПравам[Объект];
		Если УзлыПоПравам <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УзлыОбъекта, УзлыПоПравам);
		КонецЕсли;
		
		УзлыПоНаличию = УзлыОбъектовПоНаличию[Объект]; // Массив
		Если УзлыПоНаличию <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УзлыОбъекта, УзлыПоНаличию);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(УзлыОбъекта);
		
	КонецЦикла;
	
	Возврат УзлыОбъектов;
	
КонецФункции

// Узлы в которых есть данные.
// 
// Параметры:
//  Данные - Массив Из ЛюбаяСсылка
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - ЛюбаяСсылка
//    * Значение - Массив Из СправочникСсылка.УзлыКОД
//
Функция УзлыДанныхПоНаличию(Данные)
	
	ТаблицаДанных = ТаблицаДанныхКОД(Данные);
	ТаблицаКлючейДанных = ТаблицаКлючейДанных(ТаблицаДанных);
	
	ТаблицаУзловФайлов = КОДОтправка.УзлыВКоторыхЕстьДанные(ТаблицаКлючейДанных);
	
	УзлыДанныхПоНаличию = Новый Соответствие();
	Для Каждого СтрокаУзла Из ТаблицаУзловФайлов Цикл
		Ссылка = КОДСервер.КлючОтметокВремениВФорматКлючаДанных(
			СтрокаУзла.ИдентификаторКлюча, СтрокаУзла.ТипКлюча, СтрокаУзла.Объект);
		Узел = СтрокаУзла.Узел;
		
		УзлыСсылки = УзлыДанныхПоНаличию[Ссылка]; // Массив Из СправочникСсылка.УзлыКОД
		Если УзлыСсылки = Неопределено Тогда
			УзлыСсылки = Новый Массив;
			УзлыДанныхПоНаличию[Ссылка] = УзлыСсылки;
		КонецЕсли;
		
		УзлыСсылки.Добавить(Узел);
		
	КонецЦикла;
	
	Возврат УзлыДанныхПоНаличию;
	
КонецФункции

// Возвращает таблицу ключей в формате отметок времени для определения адресатов.
//
// Параметры:
//	ТаблицаДанных - см. ТаблицаДанныхКОД.
//
// Возвращаемое значение:
//	ТаблицаЗначений:
//		* ИдентификаторКлюча - УникальныйИдентификатор - Идентификатор ключа данных в формате отметок времени.
//		* ТипКлюча -см. КОДОтправка.ОписаниеТиповИдентификаторовОбъектовМетаданных
//		* Объект - см. КОДОтправка.ОписаниеТиповИдентификаторовОбъектовМетаданных.
//
Функция ТаблицаКлючейДанных(ТаблицаДанных)
	
	КлючиДанных = Новый ТаблицаЗначений;
	КлючиДанных.Колонки.Добавить("ИдентификаторКлюча", Новый ОписаниеТипов("УникальныйИдентификатор"));
	КлючиДанных.Колонки.Добавить("ТипКлюча", КОДОтправка.ОписаниеТиповИдентификаторовОбъектовМетаданных());
	КлючиДанных.Колонки.Добавить("Объект", КОДОтправка.ОписаниеТиповИдентификаторовОбъектовМетаданных());
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		КлючОтметокВремени =
			КОДСервер.КлючДанныхВФорматКлючаОтметокВремени(СтрокаДанных.Ключ, СтрокаДанных.Объект);
		
		СтрокаКлючей = КлючиДанных.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКлючей, КлючОтметокВремени);
		СтрокаКлючей.Объект = СтрокаДанных.Объект;
	КонецЦикла;
	
	Возврат КлючиДанных;
	
КонецФункции

// Таблица данных КОД.
//
// Параметры:
//	Данные - Массив Из ЛюбаяСсылка
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//    * Ключ - ЛюбаяСсылка
//    * Объект - СправочникСсылка.ИдентификаторыОбъектовМетаданных, СправочникСсылка.ИдентификаторыОбъектовРасширений -
Функция ТаблицаДанныхКОД(Данные)
	
	ТаблицаДанных = НоваяТаблицаДанныхКОД();
	
	Для Каждого Ссылка Из Данные Цикл
		Объект = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Ссылка));
		
		СтрокаДанных = ТаблицаДанных.Добавить();
		СтрокаДанных.Ключ = Ссылка;
		СтрокаДанных.Объект = Объект;
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Новая таблица данных
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Новая таблица данных:
// * Ключ - ЛюбаяСсылка
// * Объект - СправочникСсылка.ИдентификаторыОбъектовМетаданных, СправочникСсылка.ИдентификаторыОбъектовРасширений -
Функция НоваяТаблицаДанныхКОД()
	
	ТипОбъекта = КОДОтправка.ОписаниеТиповИдентификаторовОбъектовМетаданных();
	ТипКлюча = ОбщегоНазначения.ОписаниеТипаВсеСсылки();
	
	Данные = Новый ТаблицаЗначений();
	Данные.Колонки.Добавить("Ключ", ТипКлюча);
	Данные.Колонки.Добавить("Объект", ТипОбъекта);
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти
