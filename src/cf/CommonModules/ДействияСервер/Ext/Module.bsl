#Область ПрограммныйИнтерфейс

#Область СобытияФормыВидаДокумента

// Обработчик создания формы вида документа
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма вида документа.
// 	Отказ - Булево - Признак отказа от создания формы.
// 	СтандартнаяОбработка - Булево - передается признак выполнения стандартной (системной) обработки события.
//
Процедура ВидОбъектаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт

	ЗаполнитьВидыДействийПоВидуОбъекта(Форма);

КонецПроцедуры

// Обработчик "При записи" модуля объекта вида объекта.
// 
// Параметры:
// 	ВидОбъекта - ОпределяемыйТип.ВидОбъектаСОбработкой - записываемый вид объекта.
// 	ДополнительныеСвойства - Структура - Структура, содержащая параметры записи.
// 	Отказ - Булево - Признак отказа от записи. 
//
Процедура ВидОбъектаПриЗаписи(ВидОбъекта, ДополнительныеСвойства, Отказ) Экспорт
	
	Если Не ДополнительныеСвойства.Свойство("ВидыДействий") Тогда
		Возврат;
	КонецЕсли;
	
	// Если на изменение прав нет, то ничего не делаем
	Если Не ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(
		Справочники.НастройкиОбработкиВидовОбъектов.ПустаяСсылка()).Изменение Тогда
		Возврат;
	КонецЕсли;
	
	// сравнение отличий
	ПоказаныВсеНастройки = ДополнительныеСвойства.ПоказаныВсеНастройки;
	ПрежниеВидыДействий = ДополнительныеСвойства.ВидыДействий.Скопировать();
	ПрежниеВидыДействий.Строки.Очистить();
	Если ПоказаныВсеНастройки Тогда
		ТЗНастройкиОбработки = НастройкиОбработкиВидаОбъекта(ВидОбъекта);
	Иначе
		ТЗНастройкиОбработки = НастройкиОбработкиВидаОбъекта(ВидОбъекта, ТекущаяДатаСеанса());		
	КонецЕсли;
	
	ЗаполнитьДеревоВидыДействий(ПрежниеВидыДействий, ТЗНастройкиОбработки);
		
	Для Каждого СтрРодители Из ДополнительныеСвойства.ВидыДействий.Строки Цикл
		
		Если Не СтрРодители.ЭтоРодитель Тогда
			Продолжить;
		КонецЕсли;
		
		ВидыДействийДоЗаписи = Неопределено;				
		Если ЗначениеЗаполнено(СтрРодители.СсылкаНаНастройку) Тогда
			Настройка = СтрРодители.СсылкаНаНастройку.ПолучитьОбъект();
			ВидыДействийДоЗаписи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				СтрРодители.СсылкаНаНастройку, "ВидыДействий").Выгрузить();
			ВидыДействийДоЗаписи.Сортировать("НомерСтроки");
		Иначе
			Настройка = Справочники.НастройкиОбработкиВидовОбъектов.СоздатьЭлемент();
		КонецЕсли;
		
		ДанныеДляЗаполнения = Настройка.СтруктураДанныхДляЗаполнения();
		ДанныеДляЗаполнения.ВидОбъекта = ВидОбъекта;
		ДанныеДляЗаполнения.ДействуетС = СтрРодители.ДействуетС;
		ДанныеДляЗаполнения.ДействуетПо = СтрРодители.ДействуетПо;
		
		Для Каждого СтрВидДействия Из СтрРодители.Строки Цикл
			ДанныеДляЗаполнения.ВидыДействий.Добавить(СтрВидДействия.ВидДействия);
		КонецЦикла; 
		
		Настройка.Заполнить(ДанныеДляЗаполнения);
		
		Если Настройка.Модифицированность() Тогда
			
			Если ВидыДействийДоЗаписи <> Неопределено Тогда
				ВидыДействийПриЗаписи = Настройка.ВидыДействий.Выгрузить();
				ВидыДействийПриЗаписи.Сортировать("НомерСтроки");
				
				Если ОбщегоНазначенияДокументооборотКлиентСервер.ЕстьОтличияВТаблицах(
					ВидыДействийДоЗаписи, ВидыДействийПриЗаписи, "ВидДействия")
					И ЗначениеЗаполнено(РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаПоНастройке(
						Настройка.Ссылка)) Тогда
					ВызватьИсключение НСтр("ru = 'По данной настройке есть активные или завершенные обработки объектов.
									  |Изменение настройки запрещено.'");								
				КонецЕсли;
			КонецЕсли;
			
			Настройка.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ПрежняяСтрока Из ПрежниеВидыДействий.Строки Цикл
		
		НайдСтрока = ДополнительныеСвойства.ВидыДействий.Строки.Найти(ПрежняяСтрока.СсылкаНаНастройку);
		Если НайдСтрока = Неопределено Тогда
			
			НастройкаОбъект = ПрежняяСтрока.СсылкаНаНастройку.ПолучитьОбъект();
			
			ДанныеДляЗаполнения = НастройкаОбъект.СтруктураДанныхДляЗаполнения();
			ДанныеДляЗаполнения.ВидОбъекта = ВидОбъекта;
			ДанныеДляЗаполнения.ДействуетС = ПрежняяСтрока.ДействуетС;
			ДанныеДляЗаполнения.ДействуетПо = ПрежняяСтрока.ДействуетПо;
			
			НастройкаОбъект.Заполнить(ДанныеДляЗаполнения);
			Если НастройкаОбъект.Модифицированность() Тогда
				НастройкаОбъект.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Обработчик "Перед записью на сервере" формы вида объекта
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма вида объекта.
// 	Отказ - Булево - Признак отказа от записи. 
// 	ТекущийОбъект - ОпределяемыйТип.ВидОбъектаСОбработкойОбъект - записываемый объект.
// 	ПараметрыЗаписи - Структура - Структура, содержащая параметры записи.
//
Процедура ВидОбъектаПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт

	ТекущийОбъект.ДополнительныеСвойства.Вставить("ВидыДействий", Форма.РеквизитФормыВЗначение(
		"ВидыДействий"));
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ПоказаныВсеНастройки", Форма.ПоказатьВсеНастройки);

КонецПроцедуры

// Обработчик "После записи на сервере" формы вида объекта
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма вида объекта.
// 	Отказ - Булево - Признак отказа от записи. 
// 	ТекущийОбъект - ОпределяемыйТип.ВидОбъектаСОбработкойОбъект - записываемый объект.
// 	ПараметрыЗаписи - Структура - Структура, содержащая параметры записи.
//
Процедура ВидОбъектаПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	СтруктураПоиска = Новый Структура;
	
	Если Форма.Элементы.ВидыДействий.ТекущаяСтрока <> Неопределено Тогда
	
		ТекущаяСтрока = Форма.ВидыДействий.НайтиПоИдентификатору(
			Форма.Элементы.ВидыДействий.ТекущаяСтрока);
		
		Если ТекущаяСтрока <> Неопределено Тогда
			СтруктураПоиска.Вставить("ВидДействия", ТекущаяСтрока.ВидДействия);
			СтруктураПоиска.Вставить("ДействуетС", ТекущаяСтрока.ДействуетС);
			СтруктураПоиска.Вставить("ДействуетПо", ТекущаяСтрока.ДействуетПо);
			СтруктураПоиска.Вставить("ЭтоРодитель", ТекущаяСтрока.ЭтоРодитель);
			СтруктураПоиска.Вставить("ЭтоНастройкиГруппы", ТекущаяСтрока.ЭтоНастройкиГруппы);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьВидыДействийПоВидуОбъекта(Форма);
	
	Если ЗначениеЗаполнено(СтруктураПоиска) Тогда
		ТекущаяСтрока = ОбщегоНазначенияДокументооборотКлиентСервер.НайтиСтрокуДерева(
			Форма.ВидыДействий, СтруктураПоиска);
		Если ТекущаяСтрока <> Неопределено Тогда
			Форма.Элементы.ВидыДействий.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор(); 
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Обработчик "Проверки заполнения" формы вида документа
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма вида документа.
// 	Отказ - Булево - Признак отказа от записи.
// 	ПроверяемыеРеквизиты - Структура - Структура, содержащая проверяемые реквизиты объекта.
//
Процедура ВидОбъектаОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт

	// Проверка на дубли.
	Для Каждого Стр Из Форма.ВидыДействий.ПолучитьЭлементы() Цикл
		Если Не Стр.ЭтоРодитель Тогда
			Продолжить;
		КонецЕсли;
		ВидыПодчиненныхДействий = Стр.ПолучитьЭлементы();

		//Проверка табличной части ВидыДействий на задвоения
		КоличествоВидовДействий = ВидыПодчиненныхДействий.Количество();
		Если КоличествоВидовДействий > 1 Тогда
			Для Инд1 = 0 По КоличествоВидовДействий - 2 Цикл
				Для Инд2 = Инд1 + 1 По КоличествоВидовДействий - 1 Цикл
					Если ВидыПодчиненныхДействий[Инд1].ВидДействия = ВидыПодчиненныхДействий[Инд2].ВидДействия Тогда 
						ТекстСообщения = СтрШаблон(
							НСтр("ru = 'Вид действия ""%1"" указан дважды в настройке ""%2"". Запись невозможна.'"),
							ВидыПодчиненныхДействий[Инд2].ВидДействия,
							Стр.Представление);
						
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,
							"ВидыДействий",,Отказ);
						Возврат;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ЕстьПересечения = Ложь;
	// Ищем с ДействуетПо пустое - он должен быть только 1 (если больлше одного, это ошибка) или ни одного.
	ДействуетС_Последняя = Неопределено;

	Для Каждого Стр Из Форма.ВидыДействий.ПолучитьЭлементы() Цикл

		Если Не Стр.ЭтоРодитель Тогда
			Продолжить;
		КонецЕсли;

		Если Не ЗначениеЗаполнено(Стр.ДействуетПо) Тогда
			Если Не ЗначениеЗаполнено(ДействуетС_Последняя) Тогда
				ДействуетС_Последняя = Стр.ДействуетС;
			Иначе
				// ошибка
				ЕстьПересечения = Истина;
				ОбщегоНазначения.СообщитьПользователю(
					НСтр(
					"ru = 'Нельзя указать несколько интервалов с незаполненной датой окончания.'"), ,
					"ВидыДействий", , Отказ);

			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
	// Далее проверяем все кроме него - у них ДействуетПо должно быть меньше чем ДействуетС у этого.
	Если ДействуетС_Последняя <> Неопределено Тогда

		Для Каждого Стр Из Форма.ВидыДействий.ПолучитьЭлементы() Цикл

			Если Не Стр.ЭтоРодитель Тогда
				Продолжить;
			КонецЕсли;

			Если Стр.ДействуетС <> ДействуетС_Последняя Тогда
				Если Стр.ДействуетПо >= ДействуетС_Последняя Тогда
					// ошибка
					ЕстьПересечения = Истина;
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(НСтр(
						"ru = 'Интервал (%1, %2) пересекается с интервалом (с %3 и далее).'"),
						Формат(Стр.ДействуетС, "ДЛФ=D"), Формат(Стр.ДействуетПо,
						"ДЛФ=D"), Формат(ДействуетС_Последняя, "ДЛФ=D")), ,
						"ВидыДействий", , Отказ);

				КонецЕсли;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	СтрокиСообщений = Новый Соответствие;
	
	// Далее проверяем те, у кого заполнено оба поля. во первых С должно быть меньше По.  Во вторых нет пересечений.
	Для Каждого Стр Из Форма.ВидыДействий.ПолучитьЭлементы() Цикл

		Если Не Стр.ЭтоРодитель Тогда
			Продолжить;
		КонецЕсли;

		Если ЗначениеЗаполнено(Стр.ДействуетС) И ЗначениеЗаполнено(Стр.ДействуетПо) Тогда

			Если Стр.ДействуетС >= КонецДня(Стр.ДействуетПо) Тогда
				// ошибка
				ЕстьПересечения = Истина;
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр(
					"ru = 'У интервала (%1, %2) дата начала больше чем дата окончания.'"), Формат(
					Стр.ДействуетС, "ДЛФ=D"), Формат(Стр.ДействуетПо, "ДЛФ=D")), ,
					"ВидыДействий", , Отказ);

			КонецЕсли;	
			
			//  цикл для проверки пересечений.

			Для Каждого Стр2 Из Форма.ВидыДействий.ПолучитьЭлементы() Цикл

				Если Не Стр2.ЭтоРодитель Тогда
					Продолжить;
				КонецЕсли;

				Если ЗначениеЗаполнено(Стр2.ДействуетС) И ЗначениеЗаполнено(Стр2.ДействуетПо)
					И (Стр.ДействуетС <> Стр2.ДействуетС Или Стр.ДействуетПо <> Стр2.ДействуетПо) Тогда

					Если Стр.ДействуетС <= Стр2.ДействуетПо И Стр.ДействуетПо >= Стр2.ДействуетС Тогда
						// есть пересечение
						
						// ошибка
						ЕстьПересечения = Истина;

						Если Стр.ДействуетС < Стр2.ДействуетС Тогда

							ТекстОшибки = СтрШаблон(НСтр(
								"ru = 'Интервал (%1, %2) пересекается с интервалом (%3, %4).'"),
								Формат(Стр.ДействуетС, "ДЛФ=D"), Формат(Стр.ДействуетПо,
								"ДЛФ=D"), Формат(Стр2.ДействуетС, "ДЛФ=D"), Формат(
								Стр2.ДействуетПо, "ДЛФ=D"));
						Иначе
							ТекстОшибки = СтрШаблон(НСтр(
								"ru = 'Интервал (%1, %2) пересекается с интервалом (%3, %4).'"),
								Формат(Стр2.ДействуетС, "ДЛФ=D"), Формат(Стр2.ДействуетПо,
								"ДЛФ=D"), Формат(Стр.ДействуетС, "ДЛФ=D"), Формат(
								Стр.ДействуетПо, "ДЛФ=D"));

						КонецЕсли;

						Если СтрокиСообщений[ТекстОшибки] = Неопределено Тогда
							ОбщегоНазначения.СообщитьПользователю(
								ТекстОшибки, , "ВидыДействий", , Отказ);

							СтрокиСообщений[ТекстОшибки] = Истина;
						КонецЕсли;

					КонецЕсли;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	СообщениеОРазрывах = "";
	// Проверим разрывы. 
	Если Не ЕстьПересечения Тогда

		ЕстьРазрывы = Ложь;
		МассивРазрывов = Новый Массив;

		ТекДень = НачалоДня(ТекущаяДата());

		ТаблицаДат = Новый ТаблицаЗначений;

		КвалифДаты = Новый КвалификаторыДаты(ЧастиДаты.Дата);
		ОписаниеТипов = Новый ОписаниеТипов("Дата", , , , , КвалифДаты);
		ТаблицаДат.Колонки.Добавить("ДействуетС", ОписаниеТипов);
		ТаблицаДат.Колонки.Добавить("ДействуетПо", ОписаниеТипов);

		Для Каждого Стр Из Форма.ВидыДействий.ПолучитьЭлементы() Цикл

			Если Не Стр.ЭтоРодитель Тогда
				Продолжить;
			КонецЕсли;

			Если Стр.ДействуетПо > ТекДень Или Не ЗначениеЗаполнено(Стр.ДействуетПо) Тогда

				НовСтр = ТаблицаДат.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, Стр);

			КонецЕсли;

		КонецЦикла;

		ТаблицаДат.Сортировать("ДействуетС");

		ПредСтрока = Неопределено;
		Для Каждого Стр Из ТаблицаДат Цикл

			Если ЗначениеЗаполнено(ПредСтрока) Тогда

				Если Стр.ДействуетС - ПредСтрока.ДействуетПо > 86400 Тогда // 1 сутки
					ЕстьРазрывы = Истина;
					СтруктураРазрыва = Новый Структура("ДействуетС, ДействуетПо",
						ПредСтрока.ДействуетПо, Стр.ДействуетС);
					МассивРазрывов.Добавить(СтруктураРазрыва);
				КонецЕсли;

			КонецЕсли;
			ПредСтрока = Стр;

		КонецЦикла;

		Если ЕстьРазрывы Тогда // сформируем СообщениеОРазрывах

			Если МассивРазрывов.Количество() = 1 Тогда
				СообщениеОРазрывах = СтрШаблон(
					НСтр("ru = 'Есть разрыв в действии настроек (%1, %2).'"), Формат(
					МассивРазрывов[0].ДействуетС, "ДЛФ=D"), Формат(
					МассивРазрывов[0].ДействуетПо, "ДЛФ=D"));
			Иначе

				СообщениеОРазрывах = НСтр("ru = 'Есть разрывы в действии настроек'");
				Для Каждого Стр Из МассивРазрывов Цикл
					СообщениеОРазрывах = СообщениеОРазрывах + ". " + СтрШаблон("(%1, %2)", Формат(
						Стр.ДействуетС, "ДЛФ=D"), Формат(Стр.ДействуетПо, "ДЛФ=D"));
				КонецЦикла;

			КонецЕсли;

			ОбщегоНазначения.СообщитьПользователю(
				СообщениеОРазрывах, , "ВидыДействий", , Отказ);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ЗаписьДействий

// Добавляет в доп. свойства действия признак ЗаписьДействияПослеРазменованияПередЗапуском.
//
// Параметры:
//  Действие - ОпределяемыйТип.ДействияОбъект
//
Процедура УстановитьПризнакЗаписиДействияПослеРазменованияДляЗапуска(Действие) Экспорт

	Действие.ДополнительныеСвойства.Вставить("ЗаписьДействияПослеРазменованияДляЗапуска", Истина);

КонецПроцедуры

// Возвращает признак ЗаписьДействияПослеРазменованияДляЗапуска из доп. свойств действия.
//
// Параметры:
//  Действие - ОпределяемыйТип.ДействияОбъект
//
// Возвращаемое значение:
//  Булево
//
Функция ПризнакЗаписиДействияПослеРазменованияДляЗапуска(Действие) Экспорт

	Если Действие.ДополнительныеСвойства.Свойство("ЗаписьДействияПослеРазменованияДляЗапуска")
		И Действие.ДополнительныеСвойства.ЗаписьДействияПослеРазменованияДляЗапуска Тогда

		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

// Обработчик "Перед записью" действия
// 
// Параметры:
//	Объект - ОпределяемыйТип.ДействияОбъект - записываемый объект.
//
Процедура ДействияПередЗаписью(Объект) Экспорт
	
	Для Каждого Стр Из Объект.Участники Цикл
		Если Не ЗначениеЗаполнено(Стр.Идентификатор) Тогда
			Стр.Идентификатор = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьДополнительныеСвойства(Объект);
	
КонецПроцедуры

// Обработчик "При записи" действия
// 
// Параметры:
// 	Объект - ОпределяемыйТип.ДействияОбъект - записываемый объект.
// 	ДополнительныеСвойства - Структура - содержащая дополнительные свойства записи.
// 	ФункцияУчастника - ОпределяемыйТип.ФункцииУчастниковДействий - функция участника. 
//
Процедура ДействияПриЗаписи(Объект, ДополнительныеСвойства, ФункцияУчастника = Неопределено) Экспорт
	
	ПоПунктам = Ложь;
	Если ДополнительныеСвойства.Свойство("ПоПунктам") Тогда
		ПоПунктам = ДополнительныеСвойства.ПоПунктам;
	КонецЕсли;	
	
	//Логирование изменений по пунктам исполнения
	Если ДополнительныеСвойства.Свойство("СтарыеПункты") И ДополнительныеСвойства.СтарыеПункты <> Неопределено Тогда
		ЗафиксироватьИзмененияПунктовИсполнения(Объект, ДополнительныеСвойства);
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("БылиУчастники") И ДополнительныеСвойства.БылиУчастники <> Неопределено Тогда
		
		Измененные = Новый Массив;
		ТекстОписанияИзмененийЗащищенности = "";
		
		Для Каждого НовСтрока Из Объект.Участники Цикл
			
			ТекФункцияУчастника = ФункцияУчастника;
			
			Если Не ЗначениеЗаполнено(ТекФункцияУчастника) Тогда
				ТекФункцияУчастника = НовСтрока.ФункцияУчастника;
			КонецЕсли;
			
			СтараяСтрока = ДополнительныеСвойства.БылиУчастники.Найти(НовСтрока.Идентификатор,
				"Идентификатор");
			Если СтараяСтрока <> Неопределено Тогда
				
				ОбработатьЗаменуУчастникаДействийДляРезультатовИСостояний(
					Объект.Ссылка, СтараяСтрока.Участник, НовСтрока.Участник, ТекФункцияУчастника, ,
					НовСтрока.Идентификатор);
				Если СтараяСтрока.Участник <> НовСтрока.Участник Тогда
					Измененные.Добавить(
						Новый Структура("Идентификатор, НовыйУчастник, СтарыйУчастник",
						НовСтрока.Идентификатор, НовСтрока.Участник, СтараяСтрока.Участник));
				КонецЕсли;
				
				Если ДополнительныеСвойства.ЭтоДействиеСЭтапами = Истина Тогда
					ОбработатьЗаполнениеИдентификатораЭтапа(
						Объект.Ссылка, СтараяСтрока, НовСтрока, ТекФункцияУчастника, НовСтрока.Идентификатор);
				КонецЕсли;
				
				Если СтараяСтрока.Защищенный <> НовСтрока.Защищенный Тогда
					Если НовСтрока.Защищенный Тогда
						ОписаниеИзменения = НСтр("ru = 'Установлена защищенность участника: %1 (%2)'");
					Иначе
						ОписаниеИзменения = НСтр("ru = 'Снята защищенность участника: %1 (%2)'");
					КонецЕсли;
					ОписаниеИзменения = СтрШаблон(ОписаниеИзменения, НовСтрока.Участник, НовСтрока.Идентификатор);
					ТекстОписанияИзмененийЗащищенности = ТекстОписанияИзмененийЗащищенности
						+ Символы.ПС + ОписаниеИзменения;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	
		Если ЗначениеЗаполнено(ТекстОписанияИзмененийЗащищенности) Тогда
			
			ТекстОписанияИзмененийЗащищенности = НСтр("ru = 'Изменена защищенность участников: '") +
				ТекстОписанияИзмененийЗащищенности;
			
			ТекущаяОбработка = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(
						Объект.Ссылка);
		
			Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
			Событие.Обработка = ТекущаяОбработка;
			Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.ИзменениеУчастников;
			Событие.Действие = Объект.Ссылка;
			Событие.Описание = ТекстОписанияИзмененийЗащищенности;
			РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
			
		КонецЕсли;
	
		ДополнительныеСвойства.Вставить("Измененные", Измененные);
		
		ИдентификаторыИсполнителей = Новый Соответствие;
		Для Каждого СтрокаТаблицы Из Объект.Участники Цикл
			ИдентификаторыИсполнителей.Вставить(СтрокаТаблицы.Идентификатор, Истина);
		КонецЦикла;
		Для Каждого СтрокаТаблицы Из ДополнительныеСвойства.БылиУчастники Цикл
			Если ИдентификаторыИсполнителей.Получить(СтрокаТаблицы.Идентификатор) = Неопределено Тогда
				
				ТекФункцияУчастника = ФункцияУчастника;
				
				Если Не ЗначениеЗаполнено(ТекФункцияУчастника) Тогда
					ТекФункцияУчастника = СтрокаТаблицы.ФункцияУчастника;
				КонецЕсли;
				
				ИДЭтапа = Неопределено;
				Если ДействияКлиентСервер.ЭтоДействиеСЭтапами(Объект.Ссылка) Тогда
					ИДЭтапа = СтрокаТаблицы.ИдентификаторЭтапа;
				КонецЕсли;
				
				ОбработатьУдалениеУчастникаДействияДляРезультатовИСостояний(
					Объект.Ссылка, ТекФункцияУчастника, СтрокаТаблицы.Участник, 
					ИДЭтапа, СтрокаТаблицы.Идентификатор);
			КонецЕсли;
		КонецЦикла;
		
		Удаленные = Новый Массив;
		Добавленные = Новый Массив;
		Вытесненные = Новый Соответствие;
		ДополнительныеСвойства.Свойство("Удаленные", Удаленные);
		ДополнительныеСвойства.Свойство("Добавленные", Добавленные);
		ЕстьВытесненные = ДополнительныеСвойства.Свойство("ВытесненныеУчастники", Вытесненные);
		
		Если Не ПоПунктам И (Удаленные.Количество() <> 0 Или Добавленные.Количество() <> 0) Тогда
		
			ТекстОписания = "";
			
			Если Удаленные.Количество() Тогда
				
				ОписаниеУдаленных = "";
				
				Для Каждого Удаленный Из Удаленные Цикл
					Если ЕстьВытесненные И Вытесненные[Удаленный.Идентификатор] <> Неопределено Тогда
						
						Вытеснение = Вытесненные[Удаленный.Идентификатор];
						ОписаниеУдаленных = СтрШаблон(НСтр("ru = '%1, %2 вытеснен участником %3 (%4) действия %5'"),
							ОписаниеУдаленных,
							Удаленный.Участник, 
							Вытеснение.ВытесняющийСотрудник, Вытеснение.ИдентификаторВытеснившего,
							Вытеснение.ВытесняющееДействие);
						
					Иначе
						ОписаниеУдаленных = СтрШаблон("%1, %2", ОписаниеУдаленных, Удаленный.Участник);
					КонецЕсли;
				КонецЦикла;
				
				ОписаниеУдаленных = Сред(ОписаниеУдаленных, 3);
				ТекстОписания = СтрШаблон(НСтр("ru = 'Удалены участники: %1.'"), ОписаниеУдаленных);
				
			КонецЕсли;
			
			Если Добавленные.Количество() <> 0 Тогда
				ТекстОписания = ТекстОписания + ?(ЗначениеЗаполнено(ТекстОписания), " ", "") + СтрШаблон(НСтр(
					"ru = 'Добавлены участники: %1.'"), МассивВСтроку(Добавленные));
			КонецЕсли;
			
			ТекущаяОбработка = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(
				Объект.Ссылка);
			
			Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
			Событие.Обработка = ТекущаяОбработка;
			Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.ИзменениеУчастников;
			Событие.Действие = Объект.Ссылка;
			Событие.Описание = ТекстОписания;
			РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
			
		КонецЕсли;
	
	КонецЕсли;
	
	РаботаСВнешнимПодписанием.ДействияПриЗаписи(Объект, ДополнительныеСвойства, ФункцияУчастника);
	
	Контроль.ПриЗаписиДействияСКонтролем(Объект);
	
	РаботаСПроцессамиПоДействиям.ПриИзмененииОтложенногоНачалаВыполненияДействия(Объект, ДополнительныеСвойства);    
	
КонецПроцедуры

// Выполняет процедуры записи действия.
//
// Параметры:
//	Действие - ОпределяемыйТип.ДействияОбъект - Действие, которое необходимо записать.
//	Отказ - Булево - Признак отказа от записи.
//
Процедура ЗаписатьДействие(Действие, Отказ) Экспорт
	
	Если ДействияХолдингСервер.ДобавитьЗаданиеОбновитьДействиеОбработкиОбъекта(Действие) Тогда
		Возврат;
	КонецЕсли;
	
	Действие.ЗаписатьОбъект();
		
КонецПроцедуры

// Устанавливает значения дополнительных свойств действия.
//
// Параметры:
//	Объект - ОпределяемыйТип.ДействияОбъект - Действие, в котором необходимо заполниь дополнительные свойства.
//
Процедура УстановитьДополнительныеСвойства(Объект) Экспорт
	
	БылиУчастники = Неопределено;
	ПредыдущаяПометкаУдаления = Ложь;
	ПредыдущееПомещеноВИсторию = Ложь;
	
	Объект.ДополнительныеСвойства.Вставить("ЗаписьВНеродномУзлеКод", Ложь);
	Если ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга() 
		И ПолучитьФункциональнуюОпцию("ИспользоватьКОД")
		И Не ОбщегоНазначенияДокументооборот.ОбъектЭтогоУзла(Объект) И ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
		Объект.ДополнительныеСвойства.Вставить("ЗаписьВНеродномУзлеКод", Истина);
		Объект.ДополнительныеСвойства.Вставить("ВерсияФормата", КОДСервер.ТекущаяВерсияФормата());
		Объект.ДополнительныеСвойства.Вставить(
		"ХэшСуммаОбъекта", КОДСервер.ХешСуммаMD5СериализованногоОбъекта(Объект.Ссылка, ,
			Объект.ДополнительныеСвойства.ВерсияФормата));
			
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
	Иначе
		РеквизитыПрежние = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.Ссылка,
			"Участники, ПометкаУдаления, ПомещеноВИсторию, ОтложенноеНачалоВыполнения,
			|ОтложенноеВыполнениеДата");
		
		БылиУчастники = РеквизитыПрежние.Участники.Выгрузить();
		ПредыдущаяПометкаУдаления = РеквизитыПрежние.ПометкаУдаления;
		ПредыдущееПомещеноВИсторию = РеквизитыПрежние.ПомещеноВИсторию;
		
		Объект.ДополнительныеСвойства.Вставить(
			"ОтложенноеНачалоВыполнения", 
			РеквизитыПрежние.ОтложенноеНачалоВыполнения);
		Объект.ДополнительныеСвойства.Вставить(
			"ОтложенноеВыполнениеДата", 
			РеквизитыПрежние.ОтложенноеВыполнениеДата);
	КонецЕсли;
	
	Объект.ДополнительныеСвойства.Вставить("БылиУчастники", БылиУчастники);
	Объект.ДополнительныеСвойства.Вставить("ПредыдущаяПометкаУдаления", ПредыдущаяПометкаУдаления);
	Объект.ДополнительныеСвойства.Вставить("ПредыдущееПомещеноВИсторию", ПредыдущееПомещеноВИсторию);

	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			Объект.ДополнительныеСвойства, "БылиУчастники") <> Неопределено Тогда
		
		Удаленные = Новый Массив;
		Добавленные = Новый Массив;
		
		Для Каждого СтараяСтрока Из Объект.ДополнительныеСвойства.БылиУчастники Цикл
			УдаленныеСтроки = Объект.Участники.НайтиСтроки(Новый Структура("Идентификатор, Участник", 
				СтараяСтрока.Идентификатор, СтараяСтрока.Участник));
			Если УдаленныеСтроки.Количество() = 0 Тогда
				Удаленные.Добавить(
					Новый Структура("Идентификатор, Участник, Защищенный",
					СтараяСтрока.Идентификатор, СтараяСтрока.Участник, СтараяСтрока.Защищенный));
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого НоваяСтрока Из Объект.Участники Цикл
			Если ЭтоДействиеСУчетомФункцийУчастников(Объект) Тогда
				ФункцияУчастника = НоваяСтрока.ФункцияУчастника;
			Иначе
				ФункцияУчастника = ФункцияДействияУчастникаПоУмолчанию(Объект);
			КонецЕсли;
			
			СтараяСтрока =
				Объект.ДополнительныеСвойства.БылиУчастники.Найти(НоваяСтрока.Участник, "Участник");
			Если СтараяСтрока = Неопределено Тогда
				Добавленные.Добавить(Новый Структура("Идентификатор, Участник, ФункцияУчастника",
					НоваяСтрока.Идентификатор, НоваяСтрока.Участник, ФункцияУчастника));
			КонецЕсли;
		КонецЦикла;
		
		Объект.ДополнительныеСвойства.Вставить("Удаленные", Удаленные);
		Объект.ДополнительныеСвойства.Вставить("Добавленные", Добавленные);
		
	КонецЕсли;
	
	Объект.ДополнительныеСвойства.Вставить("ЭтоДействиеСЭтапами", 
		ДействияКлиентСервер.ЭтоДействиеСЭтапами(Объект.Ссылка));
	
	// Надо проверить права добавленных участников на предмет
	Если Объект.ДополнительныеСвойства.Свойство("Добавленные") Тогда
		Участники = РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников();
		Для Каждого Добавленный Из Добавленные Цикл
			НовСтр = Участники.Добавить();
			НовСтр.Участник = Добавленный.Участник;
		КонецЦикла;
		ТекстОшибки = РаботаСРабочимиГруппами.ПроверитьПраваУчастниковРабочейГруппыНаОбъект(
			Объект.Предмет, Участники);
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеДействий

// Отмечает начало выполнения действия его участником.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия
//  Параметры - Струкутра - см. СтруктураПараметровИзмененияДанныхДействия()
//              должны быть заполнены сведения об участнике (участник, идентификатор, функция)
//
Процедура НачатьВыполнениеДействияУчастником(Действие, Параметры) Экспорт

	МенеджерДействия = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Действие);
	МенеджерДействия.ОтметитьНачалоВыполнения(Действие, Параметры);  
	
	СообщениеОПараметрах = СокрЛП(Действие) + Символы.ПС;
	Для Каждого КЗ Из Параметры Цикл
		СообщениеОПараметрах = СообщениеОПараметрах + Строка(КЗ.Ключ) + "." + Строка(КЗ.Значение);
		СообщениеОПараметрах = СообщениеОПараметрах + Символы.ПС;
	КонецЦикла;

	ЗаписьЖурналаРегистрации(
		НСтр("ru='ДействияСобытия НачатьВыполнениеДействияУчастником'"),
		УровеньЖурналаРегистрации.Информация, , , СообщениеОПараметрах);

КонецПроцедуры

// Отмечает выполнение действия указанным в параметрах участником с нужным результатом и датой исполнения.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия
//  Параметры - Струкутра - см. СтруктураПараметровИзмененияДанныхДействия()
//              должны быть заполнены сведения об участнике (участник, идентификатор, функция),
//              результат и дата исполнения.
//
Процедура ВыполнитьДействиеУчастником(Действие, Параметры) Экспорт

	МенеджерДействия = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Действие);
	МенеджерДействия.ОтметитьВыполнение(Действие, Параметры);

	СообщениеОПараметрах = СокрЛП(Действие) + Символы.ВК;
	Для Каждого КЗ Из Параметры Цикл
		СообщениеОПараметрах = СообщениеОПараметрах + Строка(КЗ.Ключ) + "." + Строка(КЗ.Значение);
		СообщениеОПараметрах = СообщениеОПараметрах + Символы.ВК;
	КонецЦикла;

	ЗаписьЖурналаРегистрации(
		НСтр("ru='ДействияСобытия ВыполнитьДействиеУчастником'"),
		УровеньЖурналаРегистрации.Информация, , , СообщениеОПараметрах);

КонецПроцедуры

// Выполняет отмену выполнения действия участника.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия
//  Параметры - Структура - см. СтруктураПараметровИзмененияДанныхДействия()
//              должны быть заполнены сведения об участнике (участник, идентификатор, функция).
//
Процедура ОтменитьВыполнениеДействияУчастником(Действие, Параметры) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	РегистрыСведений.СостоянияДействий.УстановитьСостояние(
		Действие, Перечисления.СостоянияВыполненияДействий.Выполняется, Параметры);
		
	ПоПунктам = ЭтоДействиеПоПунктам(Действие);	
	
	Если ДействияКлиентСервер.ЭтоДействиеСЭтапами(Действие) Тогда
		РегистрыСведений.РезультатыДействий.УдалитьРезультат(
			Действие, Параметры.Функция, Параметры.Участник, 
			Параметры.ИдентификаторПункта , Параметры.ИдентификаторУчастника);
			
	ИначеЕсли ПоПунктам Тогда
		РегистрыСведений.РезультатыДействий.УдалитьРезультат(
			Действие, Параметры.Функция, Параметры.Участник, 
			Параметры.ИдентификаторПункта , Параметры.ИдентификаторУчастника);
			
	Иначе 
		РегистрыСведений.РезультатыДействий.УдалитьРезультат(
			Действие, Параметры.Функция, Параметры.Участник, , Параметры.ИдентификаторУчастника);
	КонецЕсли;
	
	МенеджерДействия = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Действие);
	
	Если ОбщегоНазначенияДокументооборот.ЕстьМетодМенеджера(МенеджерДействия, "ПриОтменеВыполненияДействияУчастником") Тогда
		МенеджерДействия.ПриОтменеВыполненияДействияУчастником(Действие, Параметры);
	КонецЕсли; 
	
	МенеджерДействия.ОбновитьРезультатВыполнения(Действие);

КонецПроцедуры

#КонецОбласти

#Область ОтметкаВыполненияВнеПрограммы

// Устанавливает видимость и заголовок команды выполнения вне программы в форме действия
// 
// Параметры:
//   ДанныеДействия - Структура - структура с данными действия. Используется для бесшовной интеграции.
//					- ФормаКлиентскогоПриложения - форма действия. Используется для просмотра действия на стороне ДО.
Процедура УстановитьВидимостьВыполненияВнеПрограммы(ДанныеДействия) Экспорт
	
	Если ТипЗнч(ДанныеДействия) = Тип("Структура")
		И Не ДанныеДействия.Элементы.Свойство("УчастникиДействиеВыполненоВнеПрограммы") Тогда
		Возврат;
	КонецЕсли;
	
	Обработка = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(ДанныеДействия.Объект.Предмет);
	СостояниеОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Обработка, "Состояние");
	
	КомандыДоступны = 
		СостояниеОбработки <> ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Выполняется")
		И СостояниеОбработки <> ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Остановлена")
		И СостояниеОбработки <> ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Завершена")
		И (Пользователи.ЭтоПолноправныйПользователь() Или РольДоступна("УстановкаРезультатовДействиямОбработки"));
	
	Если Не КомандыДоступны Тогда
		ДанныеДействия.Элементы.УчастникиДействиеВыполненоВнеПрограммы.Видимость = Ложь;
	КонецЕсли;
	
	Если ДанныеДействия.Объект.ВыполненоВнеПрограммы Тогда
		ДанныеДействия.Элементы.УчастникиДействиеВыполненоВнеПрограммы.Заголовок = НСтр("ru='Снять отметку о выполнении вне программы'");
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает действию результат выполнения и признак выполнения вне программы.
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия - Действие, выполненное вне программы
//  СведенияОРезультате - См. НовыйСведенияОРезультатеВыполненияДействияВнеПрограммы
// 
// Возвращаемое значение:
//  Булево - Установить результат выполнения действия вне программы
Функция УстановитьРезультатВыполненияДействияВнеПрограммы(Действие, СведенияОРезультате) Экспорт

	ЭтоДействиеПодписания = ДействияКлиентСервер.ЭтоДействиеПодписания(Действие);
	ЭтоДействиеИсполнения = ДействияКлиентСервер.ЭтоДействиеИсполнения(Действие);
	
	РезультатПроверки = ДействиеМожноОтметитьВыполненнымВнеПрограммы(Действие, СведенияОРезультате); 
	Если Не РезультатПроверки.ОтметкаВозможна Тогда
		ОбщегоНазначения.СообщитьПользователю(РезультатПроверки.Причина);
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	МаксДатаРезультата = ?(СведенияОРезультате.Участники.Количество(),
		СведенияОРезультате.Участники[0].Дата, СведенияОРезультате.ДатаРезультата);
	
	Попытка
 
		УстановитьБлокировкиДляОтметкиВыполненияВнеПрограммы(Действие);
 		
		ДействиеОбъект = Действие.ПолучитьОбъект();
		ДействиеОбъект.ВыполненоВнеПрограммы = Истина;
	
		Если ЭтоДействиеПодписания Тогда
			Для Каждого Участник Из СведенияОРезультате.Участники Цикл
				Если Участник.УсловиеНеВыполнено Тогда
					Продолжить;
				КонецЕсли;
				
				НайденныйУчастник = ДействиеОбъект.Участники.Найти(Участник.Идентификатор);
				Если НайденныйУчастник <> Неопределено Тогда
					НайденныйУчастник.Организация = Участник.Организация;
				КонецЕсли;
				Справочники.ДействияПодписания.ЗаписатьПодписаниеВПредметПриВыполненииВнеПрограммы(Действие, СведенияОРезультате);
			КонецЦикла;
		КонецЕсли;
		
		ДействиеОбъект.Записать();
		
		Если ДействияКлиентСервер.ЭтоДействиеСогласования(Действие) Тогда
			// Установка виз согласования предмету
			РаботаСВизамиСогласования.СоздатьВизыПоДействию(Действие);
		КонецЕсли;
		
		МассивУчастниковОзнакомления = Новый Массив; // Массив из Структура
		
		Для Каждого Участник Из СведенияОРезультате.Участники Цикл
			
			Если Участник.УсловиеНеВыполнено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Участник.Дата > МаксДатаРезультата Тогда
				МаксДатаРезультата = Участник.Дата;
			КонецЕсли;

			Сведения = Новый Структура(
				"Действие, ИдентификаторУчастника, ФактическийИсполнитель",
				Действие, 
				Участник.Идентификатор,
				Справочники.ФактическиеИсполнители.НайтиСоздатьФактическогоИсполнителя(
					Участник.Участник, , , Сотрудники.ОсновнойСотрудник()));
	
			РегистрыСведений.СведенияОбУчастникахДействий.ЗаписатьСведения(
				Действие, Участник.Идентификатор, Сведения);
			
			СтруктураУчастника = Новый Структура;
			СтруктураУчастника.Вставить("ФункцияУчастника", Участник.Функция);
			СтруктураУчастника.Вставить("Участник", Участник.Участник);
			СтруктураУчастника.Вставить("ИдентификаторПункта", Неопределено);
			СтруктураУчастника.Вставить("ИдентификаторУчастника", Участник.Идентификатор);
			
			ПараметрыВыполнения = ДействияКлиентСервер.СтруктураОтметитьРезультатВыполнения();
			ПараметрыВыполнения.ДатаИсполнения = Участник.Дата;
			Если ЭтоДействиеПодписания И ЗначениеЗаполнено(Участник.Организация) Тогда
				ПараметрыВыполнения.Комментарий = СтрШаблон(НСтр("ru='Подписание выполнено вне программы от имени %1'"),
					Участник.Организация);
			Иначе
				ПараметрыВыполнения.Комментарий = ДействияКлиентСервер.КомментарийОВыполненииВнеПрограммы();
			КонецЕсли;
			Если ЗначениеЗаполнено(Участник.Комментарий) Тогда
				ПараметрыВыполнения.Комментарий = СтрШаблон(
					"%1
					|%2: %3",
					ПараметрыВыполнения.Комментарий,
					?(Участник.Функция = Перечисления.ФункцииУчастниковИсполнения.Рассматривающий, "Резолюция", "Комментарий"),
					Участник.Комментарий);
			КонецЕсли;
			
			ДействияВызовСервера.ОтметитьРезультатВыполнения(Действие,
				СтруктураУчастника, 
				?(Участник.Функция = Перечисления.ФункцииУчастниковИсполнения.Рассматривающий, 
					СведенияОРезультате.РезультатРассмотрения, СведенияОРезультате.РезультатДействия),
				ПараметрыВыполнения); 
				
			Если ДействияКлиентСервер.ЭтоДействиеОзнакомления(Действие) Тогда

				СтруктураУчастникаОзнакомления = Новый Структура;
				СтруктураУчастникаОзнакомления.Вставить("Участник", Участник.Участник);
				СтруктураУчастникаОзнакомления.Вставить("Дата", Участник.Дата);
				СтруктураУчастникаОзнакомления.Вставить("ИдентификаторУчастника", Участник.Идентификатор);
				СтруктураУчастникаОзнакомления.Вставить("Комментарий", Участник.Комментарий);
				
				СтруктураУчастникаОзнакомления.Вставить("Срок", Участник.Срок);
				СтруктураУчастникаОзнакомления.Вставить("СрокДни", Участник.СрокДни);
				СтруктураУчастникаОзнакомления.Вставить("СрокМинуты", Участник.СрокМинуты);
				СтруктураУчастникаОзнакомления.Вставить("СрокЧасы", Участник.СрокЧасы);
				СтруктураУчастникаОзнакомления.Вставить("ВариантУстановкиСрока", Участник.ВариантУстановкиСрока);
				
				МассивУчастниковОзнакомления.Добавить(СтруктураУчастникаОзнакомления);
				
			КонецЕсли;

		КонецЦикла;
		
		Если ДействияКлиентСервер.ЭтоДействиеОзнакомления(Действие) Тогда
			Справочники.ДействияОзнакомления.УстановитьРезультатВыполненияВнеПрограммы(Действие, МассивУчастниковОзнакомления);
		КонецЕсли;
		
		ПараметрыДляРегистров = Новый Структура("ДатаИсполнения, ВыполненоВнеПрограммы", МаксДатаРезультата, Истина);
		РегистрыСведений.СостоянияДействий.УстановитьСостояние(Действие,
			Перечисления.СостоянияВыполненияДействий.Завершено, ПараметрыДляРегистров);
		
		ПараметрыУчастника = Новый Структура;
		ПараметрыУчастника.Вставить("ФункцияУчастника", СведенияОРезультате.ФункцияИсполнителяДействия);
		ПараметрыУчастника.Вставить("Участник", Неопределено);
		ПараметрыУчастника.Вставить("ИдентификаторПункта", Неопределено);
		ПараметрыУчастника.Вставить("ИдентификаторУчастника", Неопределено);
		УстановитьСостояниеПредметаПоДействию(Действие, ПараметрыУчастника);
		
		Если ДействияКлиентСервер.ЭтоДействиеРегистрации(Действие)
			И СведенияОРезультате.РезультатДействия = Перечисления.РезультатыРегистрации.Зарегистрировано Тогда
			
			СообщениеОбОшибке = "";
			ПараметрыРегистрации = Новый Структура("ДатаРегистрации", МаксДатаРезультата);
			Если Не Делопроизводство.ЗарегистрироватьПредмет(ДействиеОбъект.Предмет, СообщениеОбОшибке,
				, ПараметрыРегистрации) Тогда
				ВызватьИсключение СообщениеОбОшибке;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЭтоДействиеИсполнения И ЗначениеЗаполнено(СведенияОРезультате.РезультатРассмотрения) Тогда
			
			Рассматривающие = СведенияОРезультате.Участники.НайтиСтроки(
				Новый Структура("Функция", Перечисления.ФункцииУчастниковИсполнения.Рассматривающий));
			
			Если Рассматривающие.Количество() > 0 Тогда
				
				МаксДатаРассмотрения = Рассматривающие[0].Дата;
				Для Каждого Рассматривающий Из Рассматривающие Цикл
					Если Рассматривающий.Дата > МаксДатаРассмотрения Тогда
						МаксДатаРассмотрения = Рассматривающий.Дата;
					КонецЕсли;
				КонецЦикла;
				
				РегистрыСведений.РезультатыДействий.УстановитьРезультат(Действие,
					СведенияОРезультате.РезультатРассмотрения,
					Новый Структура("ДатаИсполнения, ВыполненоВнеПрограммы", МаксДатаРассмотрения, Истина));
				
				ПараметрыУчастника = Новый Структура;
				ПараметрыУчастника.Вставить("ФункцияУчастника",
					ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.Рассматривающий"));
				ПараметрыУчастника.Вставить("Участник", Неопределено);
				ПараметрыУчастника.Вставить("ИдентификаторПункта", Неопределено);
				ПараметрыУчастника.Вставить("ИдентификаторУчастника", Неопределено);
				УстановитьСостояниеПредметаПоДействию(Действие, ПараметрыУчастника);
				
			КонецЕсли;
		
		КонецЕсли;
		
		РегистрыСведений.РезультатыДействий.УстановитьРезультат(Действие,
			СведенияОРезультате.РезультатДействия, ПараметрыДляРегистров);
		
		ОбработкаДействия = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
		Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
		Событие.Обработка = ОбработкаДействия;
		Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.ОтметкаОВыполненииДействияВнеПрограммы;
		Событие.Действие = Действие;
		Событие.Описание = НСтр("ru='Установлена отметка о выполнении действия вне программы ""1С:Документооборот"".'");
		РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
		
		ЗафиксироватьТранзакцию();
		
		Возврат Истина;
	
	Исключение
	
		ОтменитьТранзакцию();
		ВызватьИсключение;
	
	КонецПопытки;
	
КонецФункции

// Возвращает признак выполнения действия вне программы
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия
// 
// Возвращаемое значение:
//  Булево
Функция ДействиеВыполненоВнеПрограммы(Действие) Экспорт
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "ВыполненоВнеПрограммы");
КонецФункции

// Сведения о результате выполнения действия вне программы.
// 
// Возвращаемое значение:
//  Структура - Сведения о результате выполнения действия вне программы:
// * РезультатДействия - ОпределяемыйТип.РезультатыВыполненияДействий - общий результат
// * ДатаРезультата - Дата - дата общего результата действия если нет участников
// * РезультатРассмотрения - ПеречислениеСсылка.РезультатыРассмотрения - дата общего результата рассмотрения
// * ФункцияИсполнителяДействия - ОпределяемыйТип.ФункцииУчастниковДействий, Неопределено
// * Участники - ТаблицаЗначений - :
// ** Идентификатор - УникальныйИдентификатор - 
// ** Функция - ОпределяемыйТип.ФункцииУчастниковДействий - 
// ** Участник - СправочникСсылка.Сотрудники - 
// ** Организация - СправочникСсылка.Организации - 
// ** Дата - Дата - Дата результата конкретного участника
// ** Комментарий - Строка - 
Функция НовыйСведенияОРезультатеВыполненияДействияВнеПрограммы() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("РезультатДействия", Неопределено);
	Результат.Вставить("ДатаРезультата");
	Результат.Вставить("РезультатРассмотрения", Перечисления.РезультатыРассмотрения.ПустаяСсылка());
	Результат.Вставить("ФункцияИсполнителяДействия", Неопределено);
		
	Участники = Новый ТаблицаЗначений();
	Участники.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("УникальныйИдентификатор"));
	Участники.Колонки.Добавить("Функция", Метаданные.ОпределяемыеТипы.ФункцииУчастниковДействий.Тип);
	Участники.Колонки.Добавить("Участник");
	Участники.Колонки.Добавить("Организация");
	Участники.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	Участники.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	
	Результат.Вставить("Участники", Участники);
	
	Возврат Результат;
	
КонецФункции

// Блокирует действия и кеширующие регистры чтобы отметить выполнение действия вне программы
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия - Действие
Процедура УстановитьБлокировкиДляОтметкиВыполненияВнеПрограммы(Действие) Экспорт
	
 	Блокировка = Новый БлокировкаДанных();
	
	//@skip-check invocation-parameter-type-intersect
	ЭлементБлокировки = Блокировка.Добавить("Справочник." + ИмяСправочникаПоВидуИДействию(Неопределено, Действие));
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Действие);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ТекущиеСостоянияДокументов");
	ЭлементБлокировки.УстановитьЗначение("Действие", Действие);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостоянияДействий");
	ЭлементБлокировки.УстановитьЗначение("Действие", Действие);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РезультатыДействий");
	ЭлементБлокировки.УстановитьЗначение("Действие", Действие);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	//@skip-check lock-out-of-try
	Блокировка.Заблокировать();
	
КонецПроцедуры

// Управляет видимостью команды "Отметить выполнение вне программы" в контекстном меню дерева обработки
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма документа
Процедура УстановитьВидимостьКомандВыполненияВнеПрограммы(Форма) Экспорт

	ВидимостьВыполненияВнеСистемы = Форма.СостояниеОбработки <> ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Выполняется")
		И Форма.СостояниеОбработки <> ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Остановлена")
		И Форма.СостояниеОбработки <> ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Завершена")
		И (РольДоступна("УстановкаРезультатовДействиямОбработки") Или Пользователи.ЭтоПолноправныйПользователь());
	
	Форма.Элементы.ДействияКонтекстноеМенюДействиеВыполненоВнеПрограммы.Видимость = ВидимостьВыполненияВнеСистемы;
	
КонецПроцедуры

// Снимает отметку о выполнении действия вне программы
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия - Действие, отметку с которого нужно снять
//
Процедура СнятьОтметкуОВыполненииВнеПрограммы(Действие) Экспорт

	НачатьТранзакцию();

	Попытка

		ДействиеОбъект = Действие.ПолучитьОбъект();
		ДействиеОбъект.ВыполненоВнеПрограммы = Ложь;
		ДействиеОбъект.Записать();

		РегистрыСведений.СведенияОбУчастникахДействий.ОчиститьСведенияПоВсемУчастникамДействия(
			Действие);

		РегистрыСведений.РезультатыДействий.УдалитьВсеРезультатыВыполненияДействия(Действие);

		РегистрыСведений.СостоянияДействий.УдалитьВсеСостоянияДействия(Действие);

		Делопроизводство.УдалитьСостоянияДокументаПоДействию(Действие);
		
		Если ДействияКлиентСервер.ЭтоДействиеСогласования(Действие) Тогда
			// Если по действию были визы согласования, то их нужно удалить
			Визы = РаботаСВизамиСогласования.АктивныеВизыПоДействию(ДействиеОбъект.Предмет, Действие);
			РаботаСВизамиСогласования.УдалитьВизы(Визы.ВыгрузитьКолонку("Ссылка"));
		КонецЕсли;
		
		Если ДействияКлиентСервер.ЭтоДействиеИсполнения(Действие) Тогда
			// Если по действию были резолюции, их нужно удалить
			Резолюции = РаботаСРезолюциями.ПолучитьРезолюции(ДействиеОбъект.Предмет, , , Действие);
			Для Каждого Резолюция Из Резолюции Цикл
				РаботаСРезолюциями.УстановитьПометкуНаУдаление(Резолюция, Истина);
			КонецЦикла;
		КонецЕсли;
		
		Если ДействияКлиентСервер.ЭтоДействиеОзнакомления(Действие) Тогда
			
			// удалим все записи по Действие
			РегистрыСведений.УчастникиОзнакомлений.УдалитьВсеЗаписи(Действие);
	 
		КонецЕсли;
		
		Если ДействияКлиентСервер.ЭтоДействиеПодписания(Действие) Тогда
			// Если участники действия - подписанты документа, надо снять с документа отметку о подписании
			Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет");
			
			Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
			
				УчастникиДействия = ДействиеОбъект.Участники;
				
				ПредметОбъект = Предмет.ПолучитьОбъект();
				Попытка
					ПредметОбъект.Заблокировать();
				Исключение
					ПодробноОписание = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					КтоБлокирует = БлокируетПредметИзОписанияОшибки(ПодробноОписание);
					
					ЗаписьЖурналаРегистрации("ЗаписатьПодписаниеВПредмет", УровеньЖурналаРегистрации.Ошибка,
						Метаданные.Справочники.ДействияПодписания, , ПодробноОписание);
						
					КраткийТекст = СтрШаблон(
						НСтр("ru = 'Не удалось снять отметку подписания документа ""%1"".
							|Возможно этот документ открыт вами или другим пользователем.у
							|%2
							|
							|Необходимо закрыть карточку документа.'"),
						Строка(Предмет), КтоБлокирует);
					ВызватьИсключение КраткийТекст;
				КонецПопытки;
				
				Для Каждого Участник Из УчастникиДействия Цикл
					
					Если Участник.Участник = ПредметОбъект.Подписал Тогда
						ПредметОбъект.Подписал = Неопределено;
						ПредметОбъект.ДатаПодписания = Неопределено;
					КонецЕсли;
					
					СтрокаСтороны = ПредметОбъект.Стороны.Найти(Участник.Организация);
					Если СтрокаСтороны <> Неопределено Тогда
						СтрокаСтороны.Подписал = Неопределено;
						СтрокаСтороны.Подписан = Ложь;
						СтрокаСтороны.ДатаПодписи = Неопределено;
					КонецЕсли;
					
				КонецЦикла;
				
				ПредметОбъект.Записать();
			
			КонецЕсли;
		КонецЕсли;
		
		Если ДействияКлиентСервер.ЭтоДействиеРегистрации(Действие) Тогда
			// Очистить регистрационный номер и дату регистрации
			Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет");
			ПредметОбъект = Предмет.ПолучитьОбъект();
			Попытка
				ПредметОбъект.Заблокировать();
			Исключение
				ПодробноОписание = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				КтоБлокирует = БлокируетПредметИзОписанияОшибки(ПодробноОписание);
				
				ЗаписьЖурналаРегистрации("ЗаписатьПодписаниеВПредмет", УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.ДействияПодписания, , ПодробноОписание);
					
				КраткийТекст = СтрШаблон(
					НСтр("ru = 'Не удалось снять отметку подписания документа ""%1"".
						|Возможно этот документ открыт вами или другим пользователем.у
						|%2
						|
						|Необходимо закрыть карточку документа.'"),
					Строка(Предмет), КтоБлокирует);
				ВызватьИсключение КраткийТекст;
			КонецПопытки;
			
			ПредметОбъект.ДатаРегистрации = Неопределено;
			ПредметОбъект.РегистрационныйНомер = "";
			
			ПредметОбъект.Записать();
			
		КонецЕсли;

		ОбработкаДействия = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
		Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
		Событие.Обработка = ОбработкаДействия;
		Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.ОтметкаОВыполненииДействияВнеПрограммы;
		Событие.Действие = Действие;
		Событие.Описание = НСтр(
			"ru='Снята отметка о выполнении действия вне программы ""1С:Документооборот"".'");
		РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);

		ЗафиксироватьТранзакцию();

	Исключение

		ОтменитьТранзакцию();
		ВызватьИсключение;

	КонецПопытки;

КонецПроцедуры

// Проверяет возможность установки результата выполнения действия вне программы.
// Если действие можно отметить как выполненное вне программы, то возвращает пустую строку.
// В противном случае возвращает строку с описанием причины, которая не позволяет отметить выполнение вне программы.
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия - Действие
//  СведенияОРезультате - См. НовыйСведенияОРезультатеВыполненияДействияВнеПрограммы
// 
// Возвращаемое значение:
//  Структура - Причина невозможности установки результата, если есть, пустая строка, если отметка выполнения вне программы доступна:
//  * ОтметкаВозможна - Булево - Действие можно отметить как выполненное вне программы
//  * Причина - Строка - Если действие нельзя отметить как выполненное вне программы, тут будут перечислены причины
//
Функция ДействиеМожноОтметитьВыполненнымВнеПрограммы(Действие, СведенияОРезультате) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ОтметкаВозможна", Истина);
	Результат.Вставить("Причина", "");
	
	Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет");
	ЭтоДействиеПодписания = ДействияКлиентСервер.ЭтоДействиеПодписания(Действие);
	ЭтоДействиеИсполнения = ДействияКлиентСервер.ЭтоДействиеИсполнения(Действие);
	
	Если ДействияВызовСервера.ДействиеПодписываетсяУЭП(Действие) Тогда
		Результат.ОтметкаВозможна = Ложь;
		Результат.Причина = НСтр("ru = 'Нельзя отмечать выполнение вне программы действия c подписанием усиленной ЭП'");
	КонецЕсли;
	
	ОбработкаПредмета = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(Предмет);
	СостояниеОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбработкаПредмета, "Состояние");
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "ВыполненоВнеПрограммы") Тогда
		ЗапрещенноеДействие = НСтр("ru='менять результат выполненных вне программы действий'");
	Иначе
		ЗапрещенноеДействие = НСтр("ru='отмечать выполнение действий вне программы'");
	КонецЕсли;
	
	Если СостояниеОбработки = ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Выполняется")
		Или СостояниеОбработки = ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Остановлена") Тогда
		Результат.ОтметкаВозможна = Ложь;
		Результат.Причина = Результат.Причина + Символы.ПС 
			+ СтрШаблон(НСтр("ru = 'Нельзя %1, если обработка уже запущена.'"), ЗапрещенноеДействие);
	КонецЕсли;
	
	Если СостояниеОбработки = ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Завершена") Тогда
		Результат.ОтметкаВозможна = Ложь;
		Результат.Причина = Результат.Причина + Символы.ПС 
			+ СтрШаблон(НСтр("ru = 'Нельзя %1, если обработка уже завершена.'"), ЗапрещенноеДействие);
	КонецЕсли;
	
	Если ДействияКлиентСервер.ДействиеЗавершено(РегистрыСведений.СостоянияДействий.СостояниеДействия(Действие)) Тогда
		Результат.ОтметкаВозможна = Ложь;
		Результат.Причина = Результат.Причина + Символы.ПС 
			+ НСтр("ru = 'Действие уже завершено.'");
	КонецЕсли;
	
	Участники = СведенияОРезультате.Участники;
	
	Если ЭтоДействиеПодписания Тогда
		Если Не Участники.Количество() Тогда
			Результат.ОтметкаВозможна = Ложь;
			Результат.Причина = Результат.Причина + Символы.ПС 
				+ НСтр("ru = 'Для отметки о подписании вне программы необходимо указать подписантов-сотрудников в действии подписания.'");
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Участник Из Участники Цикл
		Если ТипЗнч(Участник.Участник) <> Тип("СправочникСсылка.Сотрудники") Тогда
			ТекстПредупреждения = НСтр("ru = 'Для отметки о выполнении вне программы необходимо либо указать конкретных исполнителей действия, либо очистить список исполнителей.
				|Участник с ошибкой: %1'");
			ТекстПредупреждения = СтрШаблон(ТекстПредупреждения, Участник.Участник);
			
			Результат.ОтметкаВозможна = Ложь;
			Результат.Причина = Результат.Причина + Символы.ПС + ТекстПредупреждения;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ОбщегоНазначенияДокументооборот.ОбъектЭтогоУзла(Действие) Тогда
		Результат.ОтметкаВозможна = Ложь;
		Результат.Причина = Результат.Причина + Символы.ПС 
			+ НСтр("ru = 'Действие можно отмечать как выполненное вне программы только в том узле, в котором оно создано.'");
	КонецЕсли;
	
	Если ЭтоДействиеПодписания Тогда
		ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет.ВидДокумента"); // СправочникСсылка.ВидыДокументов
		ВидДокументаКэш = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидДокумента, "ВестиУчетСторон, ВестиУчетПоОрганизациям");
		Если ВидДокументаКэш.ВестиУчетСторон Или ВидДокументаКэш.ВестиУчетПоОрганизациям Тогда
			Для Каждого Участник Из СведенияОРезультате.Участники Цикл
				Если Не ЗначениеЗаполнено(Участник.Организация) Тогда
					Результат.ОтметкаВозможна = Ложь;
					Результат.Причина = Результат.Причина + Символы.ПС 
						+ СтрШаблон(НСтр("ru='Не заполнена организация у участника %1'"),
							Участник.Участник);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоДействиеИсполнения Тогда
		Для Каждого Участник Из СведенияОРезультате.Участники Цикл
			Если Участник.Функция = Перечисления.ФункцииУчастниковИсполнения.Рассматривающий 
				И Не ЗначениеЗаполнено(СведенияОРезультате.РезультатРассмотрения) Тогда
				
				Результат.ОтметкаВозможна = Ложь;
				Результат.Причина = Результат.Причина + Символы.ПС 
					+ НСтр("ru='Не заполнен результат рассмотрения'");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// Опрределяет все действия обработки и предмета.
// 
// Параметры:
//  Предмет - ОпределяемыйТип.ПредметДействия.
//  ВидОбъекта - ОпределяемыйТип.ВидОбъектаСОбработкой.
//  Обработка - СправочникСсылка.ОбработкиОбъектов.
//  ДатаОбработки - - Дата.
// 
// Возвращаемое значение:
//  РезультатЗапроса, Неопределено - Все действия обработки и предмета
//
Функция ВсеДействияОбработкиИПредмета(Предмет, ВидОбъекта, Обработка, ДатаОбработки) Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Действия.Ссылка КАК Действие,
	|	Действия.ВидДействия КАК ВидДействия,
	|	Действия.ДатаСоздания КАК ДатаСоздания,
	|	Действия.Представление КАК Представление,
	|	ДействияОбработкиОбъектов.Обработка КАК Обработка,
	|	Действия.ВыполненоВнеПрограммы
	|ПОМЕСТИТЬ Действия
	|ИЗ
	|	Справочник.ДействияИсполнения КАК Действия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДействияОбработкиОбъектов КАК ДействияОбработкиОбъектов
	|		ПО (ДействияОбработкиОбъектов.Действие = Действия.Ссылка)
	|		И (ДействияОбработкиОбъектов.Обработка = &Обработка)
	|ГДЕ
	|	Действия.Предмет = &Предмет
	|	И НЕ Действия.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Действия.Ссылка,
	|	Действия.ВидДействия,
	|	Действия.ДатаСоздания,
	|	Действия.Представление,
	|	ДействияОбработкиОбъектов.Обработка,
	|	Действия.ВыполненоВнеПрограммы
	|ИЗ
	|	Справочник.ДействияОзнакомления КАК Действия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДействияОбработкиОбъектов КАК ДействияОбработкиОбъектов
	|		ПО (ДействияОбработкиОбъектов.Действие = Действия.Ссылка)
	|		И (ДействияОбработкиОбъектов.Обработка = &Обработка)
	|ГДЕ
	|	Действия.Предмет = &Предмет
	|	И НЕ Действия.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Действия.Ссылка,
	|	Действия.ВидДействия,
	|	Действия.ДатаСоздания,
	|	Действия.Представление,
	|	ДействияОбработкиОбъектов.Обработка,
	|	Действия.ВыполненоВнеПрограммы
	|ИЗ
	|	Справочник.ДействияПодписания КАК Действия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДействияОбработкиОбъектов КАК ДействияОбработкиОбъектов
	|		ПО (ДействияОбработкиОбъектов.Действие = Действия.Ссылка)
	|		И (ДействияОбработкиОбъектов.Обработка = &Обработка)
	|ГДЕ
	|	Действия.Предмет = &Предмет
	|	И НЕ Действия.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Действия.Ссылка,
	|	Действия.ВидДействия,
	|	Действия.ДатаСоздания,
	|	Действия.Представление,
	|	ДействияОбработкиОбъектов.Обработка,
	|	Действия.ВыполненоВнеПрограммы
	|ИЗ
	|	Справочник.ДействияРегистрации КАК Действия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДействияОбработкиОбъектов КАК ДействияОбработкиОбъектов
	|		ПО (ДействияОбработкиОбъектов.Действие = Действия.Ссылка)
	|		И (ДействияОбработкиОбъектов.Обработка = &Обработка)
	|ГДЕ
	|	Действия.Предмет = &Предмет
	|	И НЕ Действия.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Действия.Ссылка,
	|	Действия.ВидДействия,
	|	Действия.ДатаСоздания,
	|	Действия.Представление,
	|	ДействияОбработкиОбъектов.Обработка,
	|	Действия.ВыполненоВнеПрограммы
	|ИЗ
	|	Справочник.ДействияСогласования КАК Действия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДействияОбработкиОбъектов КАК ДействияОбработкиОбъектов
	|		ПО (ДействияОбработкиОбъектов.Действие = Действия.Ссылка)
	|		И (ДействияОбработкиОбъектов.Обработка = &Обработка)
	|ГДЕ
	|	Действия.Предмет = &Предмет
	|	И НЕ Действия.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Действия.Ссылка,
	|	Действия.ВидДействия,
	|	Действия.ДатаСоздания,
	|	Действия.Представление,
	|	ДействияОбработкиОбъектов.Обработка,
	|	Действия.ВыполненоВнеПрограммы
	|ИЗ
	|	Справочник.ДействияУтверждения КАК Действия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДействияОбработкиОбъектов КАК ДействияОбработкиОбъектов
	|		ПО (ДействияОбработкиОбъектов.Действие = Действия.Ссылка)
	|		И (ДействияОбработкиОбъектов.Обработка = &Обработка)
	|ГДЕ
	|	Действия.Предмет = &Предмет
	|	И НЕ Действия.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыДействийНастройки.ВидДействия КАК ВидДействия,
	|	ВидыДействийНастройки.НомерСтроки КАК ПорядковыйНомер
	|ПОМЕСТИТЬ НастройкиОбработки
	|ИЗ
	|	Справочник.НастройкиОбработкиВидовОбъектов КАК НастройкиОбработкиВидовОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиОбработкиВидовОбъектов.ВидыДействий КАК ВидыДействийНастройки
	|		ПО НастройкиОбработкиВидовОбъектов.Ссылка = ВидыДействийНастройки.Ссылка
	|ГДЕ
	|	НастройкиОбработкиВидовОбъектов.ВидОбъекта = &ВидОбъекта
	|	И НастройкиОбработкиВидовОбъектов.ПометкаУдаления = ЛОЖЬ
	|	И НастройкиОбработкиВидовОбъектов.ДействуетС <= &ДатаОбработки
	|	И (НастройкиОбработкиВидовОбъектов.ДействуетПо = ДАТАВРЕМЯ(1, 1, 1)
	|	ИЛИ НастройкиОбработкиВидовОбъектов.ДействуетПо >= &ДатаОбработки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Действия.Действие КАК Действие,
	|	Действия.ВидДействия КАК ВидДействия,
	|	Действия.Представление КАК Представление,
	|	Действия.ВыполненоВнеПрограммы
	|ИЗ
	|	Действия КАК Действия
	|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиОбработки КАК НастройкиОбработки
	|		ПО (НастройкиОбработки.ВидДействия = Действия.ВидДействия)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕСТЬNULL(НастройкиОбработки.ПорядковыйНомер, 0),
	|	Действия.ДатаСоздания");

	Запрос.УстановитьПараметр("Предмет", Предмет);
	Запрос.УстановитьПараметр("ВидОбъекта", ВидОбъекта);
	Запрос.УстановитьПараметр("Обработка", Обработка);
	Запрос.УстановитьПараметр("ДатаОбработки", ДатаОбработки);

	Возврат Запрос.Выполнить();

КонецФункции

// Определяет вид объекта по виду предмета.
// 
// Параметры:
//  Предмет - ОпределяемыйТип.ПредметДействия.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ВидОбъектаСОбработкой - Вид объекта.
//
Функция ВидОбъекта(Предмет) Экспорт
	
	ВидОбъекта = Неопределено;
	Если Не ЗначениеЗаполнено(Предмет) Тогда
		Возврат ВидОбъекта;
	КонецЕсли;
	
	Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		
		КэшДокументыПредприятияФормаЭлемента =
			КэшиНаВремяВызоваПовтИсп.КэшДокументыПредприятияФормаЭлемента();
		Если КэшДокументыПредприятияФормаЭлемента.Инициализирован
			И КэшДокументыПредприятияФормаЭлемента.КэшДокумента.Ссылка = Предмет Тогда
			ВидОбъекта = КэшДокументыПредприятияФормаЭлемента.КэшДокумента.ВидДокумента;
		Иначе
			ВидОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "ВидДокумента");
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда
		
		ВидОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "ВидМероприятия");
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестен вид объекта предмет обработки %1 (%2)'"),
			Предмет,
			ТипЗнч(Предмет));
		
	КонецЕсли;
	
	Возврат ВидОбъекта;
	
КонецФункции

// Заполняет таблицу видов действий, заданных для вида объекта.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма вида объекта.
//
Процедура ЗаполнитьВидыДействийПоВидуОбъекта(Форма) Экспорт

	ВидОбъекта = Форма.Объект.Ссылка;

	Если Форма.ПоказатьВсеНастройки Тогда
		НастройкиОбработки = НастройкиОбработкиВидаОбъекта(ВидОбъекта);
	Иначе
		НастройкиОбработки = НастройкиОбработкиВидаОбъекта(
			ВидОбъекта, ТекущаяДатаСеанса(), Не ВидОбъекта.ЭтоГруппа);
	КонецЕсли;

	ДеревоВидыДействий = Форма.РеквизитФормыВЗначение("ВидыДействий");
	ЗаполнитьДеревоВидыДействий(ДеревоВидыДействий, НастройкиОбработки);
	Форма.ЗначениеВРеквизитФормы(ДеревоВидыДействий, "ВидыДействий");

	ДействияКлиентСервер.ОбновитьНумерациюОбработки(Форма.ВидыДействий, Форма.КоличествоДействий);
	
	ПравоРедактированияОбработки = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(
		Справочники.НастройкиОбработкиВидовОбъектов.ПустаяСсылка()).Изменение;
	Форма.ПравоРедактированияОбработки = ПравоРедактированияОбработки;
	Элементы = Форма.Элементы;
	Элементы.ВидыДействий.ИзменятьПорядокСтрок = ПравоРедактированияОбработки;
	Элементы.ВидыДействий.ИзменятьСоставСтрок = ПравоРедактированияОбработки;
	Элементы.ДобавитьВидДействия.Доступность = ПравоРедактированияОбработки;
	Элементы.УдалитьВидДействия.Доступность = ПравоРедактированияОбработки;
	Элементы.ПереместитьДействиеВверх.Доступность = ПравоРедактированияОбработки;
	Элементы.ПереместитьДействиеВниз.Доступность = ПравоРедактированияОбработки;
	Элементы.ВсеВидыДействий.Доступность = ПравоРедактированияОбработки;
	Элементы.ПодобратьДействие.Доступность = ПравоРедактированияОбработки;
	Элементы.ВидыДействийКонтекстноеМенюУдалитьРежимЗапуска.Доступность = ПравоРедактированияОбработки;
	
	// Копирование настроек доступно только "Полным правам"
	ЭтоПолноправныйПользователь = ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ();
	Элементы.ВидыДействийКонтекстноеМенюВыгрузитьНастройкиОбработкиВФайл.Видимость = ЭтоПолноправныйПользователь;
	Элементы.ВидыДействийКонтекстноеМенюЗагрузитьНастройкиОбработкиИзФайла.Видимость = ЭтоПолноправныйПользователь;
	
КонецПроцедуры

// Создает новое действие по параметрам
// 
// Параметры:
// 	ВидДействия - СправочникСсылка.ВидыДействий - ссылка на вид действия.
// 	Параметры - Структура - параметры создания действия.
// 	
// Возвращаемое значение:
// 	СправочникОбъект.Действие - созданное действие
Функция НовоеДействие(ВидДействия, Параметры) Экспорт

	ИмяСправочника = ИмяСправочникаПоВидуИДействию(
		ВидДействия);
	МенеджерДействия = Справочники[ИмяСправочника];

	Действие = МенеджерДействия.СоздатьЭлемент();
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ВидДействия", Параметры.ВидДействия);
	ДанныеЗаполнения.Вставить("Настройка", Параметры.Настройка);
	ДанныеЗаполнения.Вставить("Предмет", Параметры.Предмет);
	Действие.Заполнить(ДанныеЗаполнения);

	Возврат Действие;

КонецФункции

// Возвращает имя справочника, который соответствует действию.
//
// Параметры:
//  ВидДействия - СправочникСсылка.ВидыДействий.
//
// Возвращаемое значение:
//  Строка - имя вида справочника (напр., "ДействияИсполнения").
//
Функция ИмяСправочникаПоВидуДействия(ВидДействия) Экспорт

	ТипДействия = ДействияСерверПовтИсп.ТипДействияПоВидуДействия(ВидДействия);

	Возврат ИмяСправочникаПоТипуДействия(ТипДействия);

КонецФункции

// Возвращает имя справочника, который соответствует действию или виду действия. Заполненные
// действия имеют приоритет над типом вида.
//
// Параметры:
//  ВидДействия - СправочникСсылка.ВидыДействий.
//  Действие - ОпределяемыйТип.Действия.
//
// Возвращаемое значение:
//  Строка - имя вида справочника (напр., "ДействияИсполнения").
//
Функция ИмяСправочникаПоВидуИДействию(ВидДействия, Действие = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Действие) Тогда
		Возврат ДействияСерверПовтИсп.ИмяСправочникаПоВидуДействия(ВидДействия);
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияИсполнения") Тогда
		Возврат "ДействияИсполнения";
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
		Возврат "ДействияОзнакомления";
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияПодписания") Тогда
		Возврат "ДействияПодписания";
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияРегистрации") Тогда
		Возврат "ДействияРегистрации";
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияСогласования") Тогда
		Возврат "ДействияСогласования";
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияУтверждения") Тогда
		Возврат "ДействияУтверждения";
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный вид действия: %1'"), ВидДействия);
	КонецЕсли;

КонецФункции

// Возвращает имя справочника, который соответствует типу действия.
//
// Параметры:
//  ТипДействия - ПеречислениеСсылка.ТипыДействий.
//
// Возвращаемое значение:
//  Строка - имя вида справочника (напр., "ДействияИсполнения").
//
Функция ИмяСправочникаПоТипуДействия(ТипДействия) Экспорт

	Если ТипДействия = Перечисления.ТипыДействий.Исполнение Тогда
		Возврат "ДействияИсполнения";
	ИначеЕсли ТипДействия = Перечисления.ТипыДействий.Ознакомление Тогда
		Возврат "ДействияОзнакомления";
	ИначеЕсли ТипДействия = Перечисления.ТипыДействий.Подписание Тогда
		Возврат "ДействияПодписания";
	ИначеЕсли ТипДействия = Перечисления.ТипыДействий.Регистрация Тогда
		Возврат "ДействияРегистрации";
	ИначеЕсли ТипДействия = Перечисления.ТипыДействий.Согласование Тогда
		Возврат "ДействияСогласования";
	ИначеЕсли ТипДействия = Перечисления.ТипыДействий.Утверждение Тогда
		Возврат "ДействияУтверждения";
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный тип действия: %1'"), ТипДействия);
	КонецЕсли;

КонецФункции

// Возвращает строковое представление действия.
// 
// Параметры:
// 	Ссылка - ОпределяемыйТип.Действия - ссылка на действие.
// 	ВидДействия - СправочникСсылка.ВидыДействий = ссылка на вид действия.
// Возвращаемое значение:
// 	Строка - строковое представление действия
//
Функция ПредставлениеДействия(Ссылка, ВидДействия) Экспорт

	Если ЗначениеЗаполнено(ВидДействия) Тогда
		ПредставлениеВидаДействия = ВидДействия;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДействияИсполнения") Тогда
		ПредставлениеВидаДействия = НСтр("ru = 'Исполнение'");
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
		ПредставлениеВидаДействия = НСтр("ru = 'Ознакомление'");
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДействияПодписания") Тогда
		ПредставлениеВидаДействия = НСтр("ru = 'Подписание'");
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДействияРегистрации") Тогда
		ПредставлениеВидаДействия = НСтр("ru = 'Регистрация'");
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДействияСогласования") Тогда
		ПредставлениеВидаДействия = НСтр("ru = 'Согласование'");
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДействияУтверждения") Тогда
		ПредставлениеВидаДействия = НСтр("ru = 'Утверждение'");
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный тип: %1'"), ТипЗнч(Ссылка));
	КонецЕсли;

	Если Ссылка.Пустая() Тогда
		Представление = СтрШаблон(НСтр("ru = '%1 (Создание)'"), ПредставлениеВидаДействия);
	Иначе
		Представление = СтрШаблон(НСтр("ru = '%1'"), ПредставлениеВидаДействия);
	КонецЕсли;

	Возврат Представление;

КонецФункции

// Читает существующие действия в форму предмета.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма предмета.
// 	ПараметрыОбъектаОбработки - Структура - Параметры объекта обработки. См. ДействияКлиентСервер.НовыйПараметрыОбъектаОбработки().
// 	ПараметрыВидаОбъекта - Структура - Параметры вида объекта. См. ДействияКлиентСервер.НовыйПараметрыВидаОбъекта().
// 	НужнаИсторияОбработки - Булево - Истина, если читаем историю обработки тоже.
//
Процедура ПрочитатьДействияВФормуПредмета(Форма, ПараметрыОбъектаОбработки, ПараметрыВидаОбъекта, НужнаИсторияОбработки = Ложь) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ОбъектОбработки = ПараметрыОбъектаОбработки.ОбъектОбработки;
	ВидОбъекта = ПараметрыВидаОбъекта.ВидОбъекта;
	Элементы = Форма.Элементы;
	ДатаОбработки = ДатаОбработки(ОбъектОбработки);

	Форма.КоличествоДействий = 0;
	ЕстьЗавершенныеДействияБезОбработки = Ложь;
	ЕстьЗавершенноеДействиеСогласованияВРежимеЗамечаний = Ложь;
	ЕстьДействияСогласования = Ложь;
	ЕстьДействияОзнакомления = Ложь;
	ЕстьДействияОзнакомленияЗапущенные = Ложь;    
	ДействияОзнакомления = Новый Массив;
	
	ЕстьРодительскийКомплексныйПроцесс = Ложь;
	КППоПредмету = Неопределено;
	ЕстьПравоИзмененияПроцессаПоПредмету = Ложь;
	
	Если Не НужнаИсторияОбработки Тогда
		
		Если Форма.Параметры.Свойство("Действие")
			И ЗначениеЗаполнено(Форма.Параметры.Действие) Тогда
			ДействиеТекущейСтроки = Форма.Параметры.Действие;
		Иначе
			ДействиеТекущейСтроки = Неопределено;
		КонецЕсли;
		
		ПараметрыЗаполнения = НовыйПараметрыЗаполненияДереваОбработки();
		ПараметрыЗаполнения.РеквизитДерева = Форма.Действия;
		ПараметрыЗаполнения.ЭлементДерева = Элементы.Действия;
#Если Не ВнешнееСоединение Тогда
		ПараметрыЗаполнения.ПредметОбъект = Форма.РеквизитФормыВЗначение("Объект");
#Иначе
		ВызватьИсключение НСтр("ru = 'Метод ПрочитатьДействияВФормуПредмета не доступен во внешнем соединении.'");
#КонецЕсли
		ПараметрыЗаполнения.ДействияПоказыватьВсе = Форма.ДействияПоказыватьВсе;
		ПараметрыЗаполнения.ВидОбъекта = ВидОбъекта;
		ПараметрыЗаполнения.ОбъектОбработки = ОбъектОбработки;
		ПараметрыЗаполнения.ДатаОбработки = ДатаОбработки;
		ПараметрыЗаполнения.ДействиеТекущейСтроки = ДействиеТекущейСтроки;
		
		РезультатЗаполнения = ЗаполнитьДеревоОбработки(ПараметрыЗаполнения);
		
		Форма.КоличествоДействий = РезультатЗаполнения.КоличествоДействий;
		КППоПредмету = РезультатЗаполнения.КППоПредмету;
		ЕстьДействияСогласования = РезультатЗаполнения.ЕстьДействияСогласования;
		ЕстьРодительскийКомплексныйПроцесс = РезультатЗаполнения.ЕстьРодительскийКомплексныйПроцесс;
		ЕстьДействияОзнакомления = РезультатЗаполнения.ЕстьДействияОзнакомления;
		ДействияОзнакомления = РезультатЗаполнения.ДействияОзнакомления;
		ЕстьПравоИзмененияПроцессаПоПредмету =
			РезультатЗаполнения.ЕстьПравоИзмененияПроцессаПоПредмету;
		ЕстьЗавершенноеДействиеСогласованияВРежимеЗамечаний =
			РезультатЗаполнения.ЕстьЗавершенноеДействиеСогласованияВРежимеЗамечаний;
		Форма.ДействиеСогласованияВРежимеЗамечаний =
			РезультатЗаполнения.ДействиеСогласованияВРежимеЗамечаний;
		
		ЭлементыДействия = Форма.Действия.ПолучитьЭлементы();
		
	Иначе // для формы истории
		
		ЭлементыДействия = Форма.Действия.ПолучитьЭлементы();
		ЭлементыДействия.Очистить();
		
		ПредметОбъект = ОбъектОбработки.ПолучитьОбъект();
		
		ВсеОбработки = ВсеОбработкиОбъекта(ОбъектОбработки);

		Для Каждого СтрОбработка Из ВсеОбработки Цикл

			ВыборкаДействий = ВсеДействияОбработкиИПредмета(ОбъектОбработки, ВидОбъекта,
				СтрОбработка.Ссылка, СтрОбработка.ДатаСоздания);
			ДействияПредмета = ВыборкаДействий.Выбрать();
			
			// тут 2 уровня - Обработки, Действия

			РекизитыОбработки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				СтрОбработка.Ссылка, "ДатаОкончания, ДатаНачала, Состояние, ПричинаПрерывания, Прервал");

			ЭлементРодитель = Форма.Действия.ПолучитьЭлементы().Добавить();
			Если Не ЗначениеЗаполнено(РекизитыОбработки.ДатаОкончания) Тогда
				ЭлементРодитель.Представление = СтрШаблон(
					НСтр("ru = 'Текущая версия с %1'"), Формат(РекизитыОбработки.ДатаНачала,
					"ДФ='dd.MM.yyyy HH:mm'"));
			Иначе
				ЭлементРодитель.Представление = СтрШаблон(
					НСтр("ru = 'Версия с %1 по %2'"), Формат(РекизитыОбработки.ДатаНачала,
					"ДФ='dd.MM.yyyy HH:mm'"), Формат(РекизитыОбработки.ДатаОкончания,
					"ДФ='dd.MM.yyyy HH:mm'; ДП=..."));
			КонецЕсли;

			Если РекизитыОбработки.Состояние = Перечисления.СостоянияОбработкиОбъектов.Выполняется Тогда
				ЭлементРодитель.НомерКартинки = 6;
			ИначеЕсли РекизитыОбработки.Состояние
				= Перечисления.СостоянияОбработкиОбъектов.Завершена Тогда
				ЭлементРодитель.НомерКартинки = 1;
			ИначеЕсли РекизитыОбработки.Состояние
				= Перечисления.СостоянияОбработкиОбъектов.Прервана Тогда
				ЭлементРодитель.НомерКартинки = 9;
			
			ИначеЕсли РекизитыОбработки.Состояние
				= Перечисления.СостоянияОбработкиОбъектов.Остановлена Тогда
				ЭлементРодитель.НомерКартинки = 11;
			КонецЕсли;

			Если Не ПустаяСтрока(РекизитыОбработки.ПричинаПрерывания) Тогда
				ЭлементРодитель.ПредставлениеРезультата = СтрШаблон(
					НСтр("ru = '%1 (%2)'"), РекизитыОбработки.Состояние,
					РекизитыОбработки.ПричинаПрерывания);
			Иначе
				ЭлементРодитель.ПредставлениеРезультата = РекизитыОбработки.Состояние;
			КонецЕсли;
			
			ЭлементРодитель.ПредставлениеПрервал = РекизитыОбработки.Прервал;
			
			ЭлементыДействия = ЭлементРодитель.ПолучитьЭлементы();

			Пока ДействияПредмета.Следующий() Цикл

				Форма.КоличествоДействий = Форма.КоличествоДействий + 1;

				ЭлементДействие = ЭлементыДействия.Добавить();
				Действие = ДействияПредмета.Действие;
				МенеджерДействия = ОбщегоНазначения.МенеджерОбъектаПоСсылке(
					ДействияПредмета.Действие);

				МенеджерДействия.ЗаполнитьДействиеВФормеПредмета(
					ЭлементДействие, Действие, ПредметОбъект, Истина);

				Если Форма.Параметры.Свойство("Действие") И ЗначениеЗаполнено(
					Форма.Параметры.Действие) И Форма.Параметры.Действие = ЭлементДействие.Действие Тогда

					Элементы.Действия.ТекущаяСтрока = ЭлементДействие.ПолучитьИдентификатор();
				КонецЕсли;
				
				Если ДействияПредмета.ВыполненоВнеПрограммы Тогда
					ЭлементДействие.Представление = СтрШаблон("%1 (%2)",
						ЭлементДействие.Представление, ДействияКлиентСервер.КомментарийОВыполненииВнеПрограммы(Истина));
					ЭлементДействие.ПредставлениеЧистое = СтрШаблон("%1 (%2)",
						ЭлементДействие.ПредставлениеЧистое, ДействияКлиентСервер.КомментарийОВыполненииВнеПрограммы(Истина));
				КонецЕсли;

			КонецЦикла;

			ПеренумероватьДействия(Форма.Действия, ЭлементРодитель);
		КонецЦикла;

	КонецЕсли;

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов")
		И Элементы.Найти("ДействияСостояниеКонтроля") <> Неопределено Тогда
		Элементы.ДействияСостояниеКонтроля.Видимость = Ложь;
	КонецЕсли;
	
	Если Элементы.Найти("ВыполнитьДействие") <> Неопределено Тогда
		Если РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
			Элементы.ВыполнитьДействие.Видимость = Ложь;
		Иначе
			Элементы.ВыполнитьДействие.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;  
	
	ЕстьДействияОзнакомленияЗапущенные 
		= РегистрыСведений.УчастникиОзнакомлений.ЕстьДействияОзнакомленияЗапущенные(ДействияОзнакомления);
	
	Форма.КоличествоДействий = ЭлементыДействия.Количество();
	ПараметрыДляКоманд = Новый Структура; 
	ПараметрыДляКоманд.Вставить("ЕстьРодительскийКомплексныйПроцесс", ЕстьРодительскийКомплексныйПроцесс);
	ПараметрыДляКоманд.Вставить("ЕстьПравоИзмененияПроцессаПоПредмету", ЕстьПравоИзмененияПроцессаПоПредмету);
	ПараметрыДляКоманд.Вставить("ЕстьДействияСогласования", ЕстьДействияСогласования);
	ПараметрыДляКоманд.Вставить("ЕстьДействияОзнакомления", ЕстьДействияОзнакомления);
	ПараметрыДляКоманд.Вставить("ЕстьДействияОзнакомленияЗапущенные", ЕстьДействияОзнакомленияЗапущенные);
	ПараметрыДляКоманд.Вставить("ЕстьЗавершенноеДействиеСогласованияВРежимеЗамечаний", 
		ЕстьЗавершенноеДействиеСогласованияВРежимеЗамечаний);
	ПараметрыДляКоманд.Вставить("ЕстьЗавершенныеДействияБезОбработки", ЕстьЗавершенныеДействияБезОбработки);
	ПараметрыДляКоманд.Вставить("ПараметрыОбъектаОбработки", ПараметрыОбъектаОбработки);
	ПараметрыДляКоманд.Вставить("ПараметрыВидаОбъекта", ПараметрыВидаОбъекта);
	ПараметрыДляКоманд.Вставить("ВидОбъекта", ВидОбъекта);
	ПараметрыДляКоманд.Вставить("НужнаИсторияОбработки", НужнаИсторияОбработки);
	ПараметрыДляКоманд.Вставить("КППоПредмету", КППоПредмету);	
	
	УстановитьПривилегированныйРежим(Ложь);
	УстановитьВидимостьКомандОбработки(Форма, ОбъектОбработки, ПараметрыДляКоманд);
	
КонецПроцедуры

Процедура УстановитьВидимостьКомандОбработки(Форма, ОбъектОбработки, Параметры)
	
	Элементы = Форма.Элементы;
	Состояние = Неопределено;
	ТекущийПользователь = Форма.ТекущийПользователь;
	ИспользоватьВизыСогласования = ПолучитьФункциональнуюОпцию("ИспользоватьВизыСогласования");
	ТекущаяОбработкаОбъекта = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(ОбъектОбработки);
	
	Если Элементы.Найти("ГруппаСостояниеОбработки") <> Неопределено Тогда

		ДатаИзмененияСостоянияОбработки = Неопределено;
		ДатаНачалаОбработки = Неопределено;
		Состояние = ТекущееСостояниеОбработки(
			ОбъектОбработки, ДатаИзмененияСостоянияОбработки, ДатаНачалаОбработки, ТекущаяОбработкаОбъекта);

		Элементы.ДекорацияСостояния.Видимость = Ложь;
		Элементы.ДекорацияОписание.Видимость = Истина;
		Элементы.ДекорацияОписание.Заголовок = НСтр("ru = 'Не запущена'");
		Элементы.ДекорацияОписание.Подсказка = Элементы.ДекорацияОписание.Заголовок;
		
		Если Элементы.Найти("ДействияОтправить") <> Неопределено Тогда
			Элементы.ДействияОтправить.Видимость = Форма.КоличествоДействий <> 0;
		КонецЕсли;	
		
		Форма.СостояниеОбработки = Состояние;
		Элементы.ДекорацияОшибкаДействия.Видимость = Ложь;
		
		Если Элементы.Найти("ДействияПерезапуститьОбработку") <> Неопределено Тогда
			Элементы.ДействияПерезапуститьОбработку.Видимость = Ложь;
		КонецЕсли;	

		Если Элементы.Найти("ДействияПечатьЛистСогласования") <> Неопределено
			И Элементы.Найти("ПечатьЛистСогласованияСИсторией") <> Неопределено Тогда
			
			Элементы.ДействияПечатьЛистСогласования.Видимость = Параметры.ЕстьДействияСогласования И ИспользоватьВизыСогласования;
			Элементы.ПечатьЛистСогласованияСИсторией.Видимость = Параметры.ЕстьДействияСогласования И ИспользоватьВизыСогласования;
			
		КонецЕсли;
		Если Элементы.Найти("ЛистОзнакомления") <> Неопределено Тогда
			Элементы.ЛистОзнакомления.Видимость = Параметры.ЕстьДействияОзнакомления;
		КонецЕсли;
		Если Элементы.Найти("ХодОзнакомления") <> Неопределено Тогда
			Элементы.ХодОзнакомления.Видимость = Параметры.ЕстьДействияОзнакомленияЗапущенные;
		КонецЕсли;
		
		Если Элементы.Найти("ДействияПротоколРазногласий") <> Неопределено Тогда
			Элементы.ДействияПротоколРазногласий.Видимость 
				= ДействиеЗавершеноОтрицательноИЕстьЗамечания(Форма.ДействиеСогласованияВРежимеЗамечаний);
		КонецЕсли;

		Если Элементы.Найти("ДействияЗамечанияСогласования") <> Неопределено Тогда
			Элементы.ДействияЗамечанияСогласования.Видимость = 
				Параметры.ЕстьЗавершенноеДействиеСогласованияВРежимеЗамечаний;
		КонецЕсли;
		Если Элементы.Найти("ДействияОстановить") <> Неопределено Тогда
			Элементы.ДействияОстановить.Видимость = Ложь;
		КонецЕсли;
		
		Если Элементы.Найти("ДекорацияОтступСостояния") <> Неопределено Тогда
			Элементы.ДекорацияОтступСостояния.Видимость = Ложь;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Состояние)
			Или Состояние = Перечисления.СостоянияОбработкиОбъектов.Прервана Тогда

			Если (Форма.КоличествоДействий <> 0) И (Параметры.ЕстьЗавершенныеДействияБезОбработки = Ложь) Тогда

				Если Элементы.Найти("ДействияОтправить") <> Неопределено Тогда
					Элементы.ДействияОтправить.Заголовок = НСтр("ru = 'Начать обработку'");
					Если ТипЗнч(Параметры.ВидОбъекта) = Тип("СправочникСсылка.ВидыДокументов")Тогда	
						Подсказка = НСтр("ru = 'Начать обработку документа'");
					Иначе
						Подсказка = НСтр("ru = 'Начать обработку мероприятия'");
					КонецЕсли;
					
					Если ТипЗнч(Элементы.ДействияОтправить) = Тип("КнопкаФормы") Тогда
						Форма.Команды[Элементы.ДействияОтправить.ИмяКоманды].Подсказка = Подсказка;
					Иначе
						Элементы.ДействияОтправить.Подсказка = Подсказка;
					КонецЕсли;
				КонецЕсли;
				
				Если Элементы.Найти("ДействияОтправить") <> Неопределено Тогда
					Элементы.ДействияОтправить.Отображение = ОтображениеКнопки.КартинкаИТекст;
					Элементы.ДействияОтправить.Картинка = БиблиотекаКартинок.СформироватьОтчет;
				КонецЕсли;
				
			// нет действий	
			ИначеЕсли Элементы.Найти("ДействияОтправить") <> Неопределено Тогда
				Элементы.ДействияОтправить.Видимость = Ложь;
			КонецЕсли;
			Элементы.ДекорацияОписание.Видимость = Ложь;

		ИначеЕсли Состояние = Перечисления.СостоянияОбработкиОбъектов.Выполняется 
			Или Состояние = Перечисления.СостоянияОбработкиОбъектов.Остановлена Тогда
			
			ОбработкаВОчередиНаОстановку = ОбработкаОчередиЗаданийСервер.ОбъектЕстьВОчереди(ТекущаяОбработкаОбъекта, ,
				Перечисления.ТипыЗаданий.ОстановитьОбработку);
			
			ОбработкаВОчередиНаПродолжение = ОбработкаОчередиЗаданийСервер.ОбъектЕстьВОчереди(ТекущаяОбработкаОбъекта, ,
				Перечисления.ТипыЗаданий.ПродолжитьОбработку);
			
			Если Элементы.Найти("ДействияОтправить") <> Неопределено Тогда
				
				Если ЕстьПравоОстановкиОбработки(
					Параметры.ПараметрыОбъектаОбработки,
					ТекущийПользователь) Тогда
					Элементы.ДействияОтправить.Заголовок = НСтр("ru = 'Прервать'");
					Если ТипЗнч(Параметры.ВидОбъекта) = Тип("СправочникСсылка.ВидыДокументов")Тогда	
						Подсказка = НСтр("ru = 'Прервать обработку документа'");
					Иначе
						Подсказка = НСтр("ru = 'Прервать обработку мероприятия'");
					КонецЕсли;
					Если ТипЗнч(Элементы.ДействияОтправить) = Тип("КнопкаФормы") Тогда
						Форма.Команды[Элементы.ДействияОтправить.ИмяКоманды].Подсказка = Подсказка;
					Иначе
						Элементы.ДействияОтправить.Подсказка = Подсказка;
					КонецЕсли;
					
					Элементы.ДействияОтправить.Отображение = ОтображениеКнопки.Картинка;
					Элементы.ДействияОтправить.Картинка = БиблиотекаКартинок.ПрерватьОбработку;
					Элементы.ДекорацияОтступСостояния.Видимость = Истина;
					
					Элементы.ДействияОстановить.Видимость = Истина;
					Если Состояние = Перечисления.СостоянияОбработкиОбъектов.Выполняется
						И Не ОбработкаВОчередиНаОстановку Тогда 
						Элементы.ДействияОстановить.Заголовок = НСтр("ru = 'На паузу'");
						Если ТипЗнч(Параметры.ВидОбъекта) = Тип("СправочникСсылка.ВидыДокументов")Тогда	
							Подсказка = НСтр("ru = 'Поставить обработку документа на паузу'");
						Иначе
							Подсказка = НСтр("ru = 'Поставить обработку мероприятия на паузу'");
						КонецЕсли;
						Элементы.ДействияОстановить.Картинка = БиблиотекаКартинок.ЗнакПауза;
						
					ИначеЕсли Состояние = Перечисления.СостоянияОбработкиОбъектов.Остановлена
						И Не ОбработкаВОчередиНаПродолжение Тогда
						Элементы.ДействияОстановить.Заголовок = НСтр("ru = 'Продолжить'");
						Элементы.ДекорацияОтступСостояния.Видимость = Истина;
						Если ТипЗнч(Параметры.ВидОбъекта) = Тип("СправочникСсылка.ВидыДокументов")Тогда	
							Подсказка = НСтр("ru = 'Продолжить обработку документа'");
						Иначе
							Подсказка = НСтр("ru = 'Продолжить обработку мероприятия'");
						КонецЕсли;
						
						Элементы.ДействияОстановить.Картинка = БиблиотекаКартинок.СформироватьОтчет;
					Иначе
						Элементы.ДействияОстановить.Видимость = Ложь;
					КонецЕсли;
					
					Если ТипЗнч(Элементы.ДействияОтправить) = Тип("КнопкаФормы") Тогда
						Форма.Команды[Элементы.ДействияОстановить.ИмяКоманды].Подсказка = Подсказка;
					Иначе
						Элементы.ДействияОстановить.Подсказка = Подсказка;
					КонецЕсли;
	
				Иначе
					Элементы.ДействияОтправить.Видимость = Ложь; // простой пользователь не может прервать процесс
					Элементы.ДействияОтправить.Заголовок = "";
					Элементы.ДействияОстановить.Видимость = Ложь;
					Если ТипЗнч(Элементы.ДействияОтправить) = Тип("КнопкаФормы") Тогда
						Форма.Команды[Элементы.ДействияОтправить.ИмяКоманды].Подсказка = Элементы.ДействияОтправить.Заголовок;
					Иначе
						Элементы.ДействияОтправить.Подсказка = Элементы.ДействияОтправить.Заголовок;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ПереместитьДекорациюОписание(Элементы, Элементы.ГруппаСостояниеОбработки, Неопределено, 1, 25);
						
			Если Состояние = Перечисления.СостоянияОбработкиОбъектов.Выполняется Тогда
				Элементы.ДекорацияСостояния.Картинка = БиблиотекаКартинок.СформироватьОтчет;	
				Если ОбработкаВОчередиНаОстановку Тогда
					ПереместитьДекорациюОписание(Элементы, Элементы.ГруппаКнопкиЗапуска,
						Элементы.ГруппаДействияКомПанель, 0, 0);
					Элементы.ДекорацияСостояния.Картинка = БиблиотекаКартинок.ЗнакПауза;
					Элементы.ДекорацияОписание.Заголовок = Новый ФорматированнаяСтрока(
						НСтр("ru = 'Обработка будет поставлена на паузу.
							|Ожидайте выполнение.'"));
				Иначе
					Элементы.ДекорацияОписание.Заголовок = СтрШаблон(НСтр("ru = 'Обработка начата %1'"),
						Формат(ДатаНачалаОбработки, "ДФ='dd.MM.yyyy HH:mm'"));
				КонецЕсли;
			ИначеЕсли Состояние = Перечисления.СостоянияОбработкиОбъектов.Остановлена Тогда
				Элементы.ДекорацияСостояния.Картинка = БиблиотекаКартинок.ЗнакПауза;
				Если ОбработкаВОчередиНаПродолжение Тогда
					ПереместитьДекорациюОписание(Элементы, Элементы.ГруппаКнопкиЗапуска,
						Элементы.ГруппаДействияКомПанель, 0, 0);
					Элементы.ДекорацияСостояния.Картинка = БиблиотекаКартинок.СформироватьОтчет;
					Элементы.ДекорацияОписание.Заголовок = Новый ФорматированнаяСтрока(
						НСтр("ru = 'Будет выполнено продолжение обработки.
							|Ожидайте выполнение.'"));
				Иначе
					Элементы.ДекорацияОписание.Заголовок = СтрШаблон(НСтр("ru = 'Обработка на паузе с %1'"),
						Формат(ДатаИзмененияСостоянияОбработки, "ДФ='HH:mm dd.MM.yyyy'"));
				КонецЕсли;
			КонецЕсли;
			Элементы.ДекорацияОписание.Подсказка = Элементы.ДекорацияОписание.Заголовок;
			Элементы.ДекорацияСостояния.Видимость = Истина;

		ИначеЕсли Состояние = Перечисления.СостоянияОбработкиОбъектов.Завершена Тогда

			Если Элементы.Найти("ДействияПерезапуститьОбработку") <> Неопределено Тогда
				Элементы.ДействияПерезапуститьОбработку.Видимость = Истина;
			КонецЕсли;	

			Если Элементы.Найти("ДействияОтправить") <> Неопределено Тогда
				Элементы.ДействияОтправить.Видимость = Ложь;
			КонецЕсли;

			Если Элементы.Найти("ВыполнитьДействие") <> Неопределено Тогда
				Элементы.ВыполнитьДействие.Видимость = Ложь;
			КонецЕсли;

			Элементы.ДекорацияСостояния.Картинка = БиблиотекаКартинок.ЗеленаяГалочка;
			Элементы.ДекорацияОписание.Заголовок = СтрШаблон(НСтр("ru = 'Обработка завершена  %1'"),
				Формат(ДатаИзмененияСостоянияОбработки, "ДФ='dd.MM.yyyy HH:mm'"));
			Элементы.ДекорацияОписание.Подсказка = Элементы.ДекорацияОписание.Заголовок;
			Элементы.ДекорацияСостояния.Видимость = Истина;

		КонецЕсли;
		Если Элементы.Найти("ДействияОтправить") <> Неопределено Тогда
			Элементы.ДействияОтправить.Доступность = Не Форма.ТолькоПросмотр;
		КонецЕсли;
		Если Элементы.Найти("ДействияОстановить") <> Неопределено Тогда
			Элементы.ДействияОстановить.Доступность = Не Форма.ТолькоПросмотр;
		КонецЕсли;
		
		Если Не Параметры.НужнаИсторияОбработки Тогда	
			УстановитьВидимостьКомандУправленияОбработкой(
				ОбъектОбработки,
				Элементы,
				Параметры.ПараметрыВидаОбъекта,
				Форма.СостояниеОбработки);
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.ЕстьРодительскийКомплексныйПроцесс Тогда
		Форма.КомплексныйПроцессПоПредмету = Параметры.КППоПредмету;
		Форма.ЕстьПравоИзмененияПроцессаПоПредмету = Параметры.ЕстьПравоИзмененияПроцессаПоПредмету;
	КонецЕсли;
	
	ГруппаИнформацияОПрерыванииОбработки = Элементы.Найти("ГруппаИнформацияОПрерыванииОбработки");
	Если ГруппаИнформацияОПрерыванииОбработки <> Неопределено Тогда
		Элементы.ГруппаИнформацияОПрерыванииОбработки.Видимость = Ложь;
		Элементы.ГруппаПрервалОбработку.Видимость = Ложь;
		Если Состояние <> Перечисления.СостоянияОбработкиОбъектов.Выполняется 
			И Состояние <> Перечисления.СостоянияОбработкиОбъектов.Завершена
			И Состояние <> Перечисления.СостоянияОбработкиОбъектов.Остановлена Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Обработки.Ссылка КАК Ссылка,
			|	Обработки.ПричинаПрерывания КАК ПричинаПрерывания,
			|	Обработки.ДатаОкончания КАК ДатаОкончания,
			|	Обработки.Прервал КАК Прервал,
			|	ПРЕДСТАВЛЕНИЕ(Обработки.Прервал) КАК ПрервалПредставление,
			|	Обработки.Состояние
			|ПОМЕСТИТЬ ВТ_Обработки
			|ИЗ
			|	Справочник.ОбработкиОбъектов КАК Обработки
			|ГДЕ
			|	Обработки.Владелец = &Документ
			|
			|УПОРЯДОЧИТЬ ПО
			|	Обработки.ДатаНачала УБЫВ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Обработки.Ссылка,
			|	ВТ_Обработки.ПричинаПрерывания,
			|	ВТ_Обработки.ДатаОкончания,
			|	ВТ_Обработки.Прервал,
			|	ВТ_Обработки.ПрервалПредставление
			|ИЗ
			|	ВТ_Обработки КАК ВТ_Обработки
			|ГДЕ
			|	ВТ_Обработки.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбработкиОбъектов.Прервана)";

			Запрос.УстановитьПараметр("Документ", ОбъектОбработки);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Элементы.ГруппаИнформацияОПрерыванииОбработки.Видимость = Истина;
				Элементы.ДействияНадписьПричинаПрерыванияОбработки.АвтомаксимальнаяШирина = Ложь;
				ЖирныйШрифт = ШрифтыСтиля.ВажнаяНадписьШрифт;
				МассивСтрок = Новый Массив;
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.ПрерватьОбработку));
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр(
					"ru = ' Обработка прервана:'"), ЖирныйШрифт));
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Символы.НПП));
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Формат(Выборка.ДатаОкончания,
					"ДФ='dd.MM.yyyy HH:mm'")));
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Символы.ПС));
				Если ЗначениеЗаполнено(Выборка.ПричинаПрерывания) Тогда
					МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = ' Причина:'"), ЖирныйШрифт));
					МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Символы.НПП));
					МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Выборка.ПричинаПрерывания));
					МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Символы.ПС));
				КонецЕсли;
				Элементы.ДействияНадписьПричинаПрерыванияОбработки.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
				Если ЗначениеЗаполнено(Выборка.Прервал) Тогда
					Элементы.ГруппаПрервалОбработку.Видимость = Истина;
					Форма.ПрервалРасшифровка = Выборка.Прервал;
					МассивСтрок = Новый Массив;
					МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = ' Прервал:'"), ЖирныйШрифт));
					МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Символы.НПП));
					Элементы.ДействияНадписьПрервал.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
					Элементы.РасшифроватьПрервавшегоОбработку.Заголовок = Выборка.ПрервалПредставление;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Читает существующие действия обработки предмета. Используется при печати карточки документа, а также для
// передачи дерева обработки через бесшовную интеграцию.
//
// Параметры:
//   ПредметСсылка - ОпределяемыйТип.ПредметДействия - ссылка на предмет обработки.
//   ПредставлениеОбработки - Строка - неявно возвращаемое значение.
//   ВидОбъекта - ОпределяемыйТип.ВидОбъектаСОбработкой - ссылка на вид объекта предмета обработки.
//   ОбработкаОбъекта - СправочникСсылка.ОбработкиОбъектов - ссылка на конкретную обработку, данные которой требуются.
//
// Возвращаемое значение:
//   ДеревоЗначений
//
Функция ДеревоОбработки(ПредметСсылка, ПредставлениеОбработки, ВидОбъекта = Неопределено,
		ОбработкаОбъекта = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Действия = Новый ДеревоЗначений;
	
	// Добавим колонки.
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число");
	ОписаниеТиповСостояние = Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияВыполненияДействий");
	ОписаниеТиповGUID = Новый ОписаниеТипов("УникальныйИдентификатор");
	
	Действия.Колонки.Добавить("Представление");
	Действия.Колонки.Добавить("Действие");
	Действия.Колонки.Добавить("СрокПредставление");
	Действия.Колонки.Добавить("ЭтоДействие", ОписаниеТиповБулево);
	Действия.Колонки.Добавить("ЭтоУчастник", ОписаниеТиповБулево);
	Действия.Колонки.Добавить("Участник");
	Действия.Колонки.Добавить("НомерКартинки");
	Действия.Колонки.Добавить("ПредставлениеРезультата");
	Действия.Колонки.Добавить("СрокДни");
	Действия.Колонки.Добавить("СрокЧасы");
	Действия.Колонки.Добавить("СрокМинуты");
	Действия.Колонки.Добавить("СрокОбработкиРезультатовДни");
	Действия.Колонки.Добавить("СрокОбработкиРезультатовЧасы");
	Действия.Колонки.Добавить("СрокОбработкиРезультатовМинуты");
	Действия.Колонки.Добавить("ВариантУстановкиСрока");
	Действия.Колонки.Добавить("ВариантУстановкиСрокаОбработкиРезультатов");
	Действия.Колонки.Добавить("ВидДействия");
	Действия.Колонки.Добавить("Выполняется");
	Действия.Колонки.Добавить("Состояние", ОписаниеТиповСостояние);
	Действия.Колонки.Добавить("Описание");
	Действия.Колонки.Добавить("НаименованиеЗадачи");
	Действия.Колонки.Добавить("СрокОбщий");
	Действия.Колонки.Добавить("СрокИсполненияДни");
	Действия.Колонки.Добавить("СрокИсполненияЧасы");
	Действия.Колонки.Добавить("СрокИсполненияМинуты");
	Действия.Колонки.Добавить("ВариантУстановкиСрокаИсполнения");
	Действия.Колонки.Добавить("СрокИсполнения");
	Действия.Колонки.Добавить("СрокРассмотренияДни");
	Действия.Колонки.Добавить("СрокРассмотренияЧасы");
	Действия.Колонки.Добавить("СрокРассмотренияМинуты");
	Действия.Колонки.Добавить("ВариантУстановкиСрокаРассмотрения");
	Действия.Колонки.Добавить("СрокРассмотрения");
	Действия.Колонки.Добавить("ХешДействия");
	Действия.Колонки.Добавить("ПредставлениеСотрудникиДолжностьПодразделение");
	Действия.Колонки.Добавить("ПредставлениеСотрудники");
	Действия.Колонки.Добавить("Номер");
	Действия.Колонки.Добавить("ПредставлениеЧистое");
	Действия.Колонки.Добавить("ПометкаУдаления", ОписаниеТиповБулево);
	Действия.Колонки.Добавить("ЕстьРезультат", ОписаниеТиповБулево);
	Действия.Колонки.Добавить("РезультатСсылка");
	Действия.Колонки.Добавить("Результат");
	Действия.Колонки.Добавить("ДатаУстановкиСостояния", ОписаниеТиповДата);
	Действия.Колонки.Добавить("Функция");
	Действия.Колонки.Добавить("Идентификатор");
	Действия.Колонки.Добавить("ИдентификаторПункта", ОписаниеТиповGUID);
	Действия.Колонки.Добавить("Недоступно", ОписаниеТиповБулево);
	Действия.Колонки.Добавить("НедоступноГруппа", ОписаниеТиповБулево);
	Действия.Колонки.Добавить("Настройка");
	Действия.Колонки.Добавить("НеУдалосьРазыменовать", ОписаниеТиповБулево);
	Действия.Колонки.Добавить("ФактическийУчастник");
	Действия.Колонки.Добавить("РазыменованныйПользователь");
	Действия.Колонки.Добавить("Этап");
	Действия.Колонки.Добавить("ЭтоЭтап", ОписаниеТиповБулево);
	Действия.Колонки.Добавить("ЭтоПодзадача", ОписаниеТиповБулево);
	Действия.Колонки.Добавить("СлужебнаяСтрока");
	Действия.Колонки.Добавить("ДействиеЗадачи");
	Действия.Колонки.Добавить("ГлубинаВложенности");
	Действия.Колонки.Добавить("НомерИтерации");
	Действия.Колонки.Добавить("Защищенный", ОписаниеТиповБулево);
	Действия.Колонки.Добавить("ЕстьПодучастники", ОписаниеТиповБулево);
	Действия.Колонки.Добавить("Условие");
	Действия.Колонки.Добавить("БудетУдален", ОписаниеТиповБулево);
	Действия.Колонки.Добавить("СостояниеКонтроля");
	Действия.Колонки.Добавить("ЭтоВеткаПодзадачи", ОписаниеТиповБулево);
	Действия.Колонки.Добавить("РезультатТекстом");
	Действия.Колонки.Добавить("ЕстьФайлыОтчета", ОписаниеТиповБулево);
	
	Действия.Колонки.Добавить("СрокРассчитанный", ОписаниеТиповДата);
	Действия.Колонки.Добавить("СрокПревышен", ОписаниеТиповБулево);
	
	Действия.Колонки.Добавить("СколькоВсегоНадоОзнакомить", ОписаниеТиповЧисло);
	Действия.Колонки.Добавить("СколькоОзнакомлено", ОписаниеТиповЧисло);
	Действия.Колонки.Добавить("ДопОписаниеОзнакомиться");
	Действия.Колонки.Добавить("ФактическийУчастникОзнакомления");
	
	Если ОбработкаОбъекта = Неопределено Тогда
		ОбработкаОбъекта = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(ПредметСсылка);
	КонецЕсли;
	
	ДатаОбработки = ТекущаяДатаСеанса();
	Если ЗначениеЗаполнено(ОбработкаОбъекта) Тогда
		ДатаОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбработкаОбъекта, "ДатаСоздания");
	Иначе
		Возврат Действия;
	КонецЕсли;
	
	РеквизитыОбработки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ОбработкаОбъекта, "Состояние, ДатаНачала, ДатаОкончания");
	
	Если РеквизитыОбработки.Состояние = Перечисления.СостоянияОбработкиОбъектов.Выполняется Тогда
		ПредставлениеОбработки = СтрШаблон(НСтр("ru = 'Начата %1'"),
			Формат(РеквизитыОбработки.ДатаНачала, "ДФ='dd.MM.yyyy HH:mm'"));
	ИначеЕсли РеквизитыОбработки.Состояние = Перечисления.СостоянияОбработкиОбъектов.Завершена Тогда	
		ПредставлениеОбработки = СтрШаблон(НСтр("ru = 'Завершена %1'"),
			Формат(РеквизитыОбработки.ДатаОкончания, "ДФ='dd.MM.yyyy HH:mm'"));
	КонецЕсли;
	
	ЭлементыДействия = Действия.Строки;
	НужнаИсторияОбработки = Ложь;
	ПечатьКарточкиДокумента = Истина;
	
	ПредметОбъект = ПредметСсылка.ПолучитьОбъект();
	ДействияПредмета = ТекущиеДействияПредмета(ПредметСсылка, ВидОбъекта, ДатаОбработки).Выбрать();
	
	Пока ДействияПредмета.Следующий() Цикл
		ЭлементДействие = ЭлементыДействия.Добавить();
		Действие = ДействияПредмета.Действие;
		МенеджерДействия = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДействияПредмета.Действие);
		
		МенеджерДействия.ЗаполнитьДействиеВФормеПредмета(
			ЭлементДействие, Действие, ПредметОбъект, НужнаИсторияОбработки, ПечатьКарточкиДокумента);
	КонецЦикла;
	
	ПеренумероватьДействия(Действия,, ПечатьКарточкиДокумента);
	ПометитьВытесняемыхУчастников(Действия, ПредметОбъект, ПечатьКарточкиДокумента);
	
	Возврат Действия;
	
КонецФункции

// Заполняет дерево по действию на закладке Обработка
// 
// Параметры:
// 	ЭлементДействие - элемент дерева 
// 	Действие - ОпределяемыйТип.Действия - ссылка на действие.
// 	ЗначенияЗаполнения - Структура - содержит поля для заполнения дерева.
// 	ПредметОбъект - ОпределяемыйТип.ПредметДействияОбъект.
// 	ПорядокЭтапов - Неопределено, Массив - Массив содержащий ИД этапов.
// 	ЭтапыДействия - ТаблицаЗначений - см. ДействияСервер.НоваяТаблицаЭтапы().
// 	НужнаИсторияОбработки  - Булево 
// 	ПечатьКарточкиДокумента  - Булево
//
Процедура ЗаполнитьДействиеВФормеПредмета(ЭлементДействие, Действие, ЗначенияЗаполнения,
	ПредметОбъект, ПорядокЭтапов = Неопределено, ЭтапыДействия = Неопределено,
	НужнаИсторияОбработки = Ложь, ПечатьКарточкиДокумента = Ложь) Экспорт

	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию(
		"ИспользоватьДатуИВремяВСрокахЗадач");

	СведенияОбУчастниках = РегистрыСведений.СведенияОбУчастникахДействий.ПолучитьСведенияОбУчастникахДействия(
		Действие);
		
	СостояниеДействия = РегистрыСведений.СостоянияДействий.СостояниеДействия(Действие);

	МоментРазыменованияУчастников = ЗначенияЗаполнения.МоментРазыменованияУчастников;
	РазыменоватьПриСозданииДействия = РазыменоватьПриСозданииДействия(
		МоментРазыменованияУчастников);
	
	ВыполнятьДействияПроцессами = 
		РаботаСПроцессамиПоОбработкамОбъектов.ВыполнятьОбработкуОбъектовПроцессами();	

	ЗаполнитьЗначенияСвойств(ЭлементДействие, ЗначенияЗаполнения);
	ЭлементДействие.ЭтоДействие = Истина;

	ЭлементДействие.Представление = Строка(ЗначенияЗаполнения.ВидДействия);
	ЭлементДействие.ПредставлениеЧистое = ЭлементДействие.Представление;
	Срок = ЗначенияЗаполнения.СрокДействия;
	ЭлементДействие.СрокПредставление = СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
		Срок, 0, 0, 0, ИспользоватьДатуИВремяВСрокахЗадач, ЗначенияЗаполнения.ВариантУстановкиСрока);

	МассовыйРежим = Ложь;   
	
	ЗадачиПоИдентификатору = Новый Соответствие; // ключ - Идентификатор участника, значение - ЗадачаИсполнителя
		
	Если ЗначенияЗаполнения.Свойство("Участники") Тогда

		МассивКонтейнеров = Новый Массив;
		МассивИдУчастника = Новый Массив;
		
		Если ЗначенияЗаполнения.Свойство("МассовыйРежим") Тогда 
			МассовыйРежим = ЗначенияЗаполнения.МассовыйРежим;
		КонецЕсли;

		// В "массовом режиме" участников не разворачиваем
		Если Не МассовыйРежим Тогда 
		
			Для Каждого Исполнитель Из ЗначенияЗаполнения.Участники Цикл      
				
				МассивИдУчастника.Добавить(Исполнитель.Идентификатор);

				Если ТипЗнч(Исполнитель.Участник) = Тип("СправочникСсылка.СтруктураПредприятия")
					Или ТипЗнч(Исполнитель.Участник) = Тип("СправочникСсылка.РабочиеГруппы") Или ТипЗнч(
					Исполнитель.Участник) = Тип("СправочникСсылка.ПроектыКонтейнеры") Или ТипЗнч(
					Исполнитель.Участник) = Тип("СправочникСсылка.ПодразделенияКонтейнеры") Или ТипЗнч(
					Исполнитель.Участник) = Тип("СправочникСсылка.ПолныеРоли") Тогда
					МассивКонтейнеров.Добавить(Исполнитель.Участник);
				КонецЕсли;

			КонецЦикла;   
			
		КонецЕсли;

		СоответствиеСотрудниковВКонтейнерах = Новый Соответствие;
		Если МассивКонтейнеров.Количество() <> 0 Тогда
			СоответствиеСотрудниковВКонтейнерах = ДействующиеСотрудникиВКонтейнерах(МассивКонтейнеров);
		КонецЕсли;
		
		Если МассивИдУчастника.Количество() <> 0 Тогда
			ЗадачиПоИдентификатору = РаботаСПроцессамиПоДействиям.ЗадачиПроцессаПоУчастникамДействия(
					Действие, МассивИдУчастника);
		КонецЕсли;	
			
		МассивУчастникПервыйУровень = Новый Массив;
		Для Каждого Исполнитель Из ЗначенияЗаполнения.Участники Цикл
			// первый цикл - по тем, у кого Этап не заполнен 
			Если ЗначениеЗаполнено(Исполнитель.ИдентификаторЭтапа) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Исполнитель.ВышестоящийУчастник) Тогда
				МассивУчастникПервыйУровень.Добавить(Исполнитель);
			КонецЕсли;
		КонецЦикла;			
				
		Для Каждого Исполнитель Из МассивУчастникПервыйУровень Цикл
			// первый цикл - по тем, у кого Этап не заполнен 
			
			ПараметрыУчастника = Новый Структура();
			ПараметрыУчастника.Вставить("ИспользоватьДатуИВремяВСрокахЗадач", ИспользоватьДатуИВремяВСрокахЗадач);
			ПараметрыУчастника.Вставить("ГлубинаВложенности", 0);
			ПараметрыУчастника.Вставить("СоответствиеСотрудниковВКонтейнерах", СоответствиеСотрудниковВКонтейнерах);
			ПараметрыУчастника.Вставить("ВыполнятьДействияПроцессами", ВыполнятьДействияПроцессами);
			ПараметрыУчастника.Вставить("ПредметОбъект", ПредметОбъект);
			ПараметрыУчастника.Вставить("СведенияОбУчастниках", СведенияОбУчастниках);
			ПараметрыУчастника.Вставить("Действие", Действие);
			ПараметрыУчастника.Вставить("Защищенный", Исполнитель.Защищенный);
			ПараметрыУчастника.Вставить("НужнаИсторияОбработки", НужнаИсторияОбработки);
			
			ПараметрыУчастника.Вставить("СколькоОзнакомлено", Исполнитель.СколькоОзнакомлено);
			ПараметрыУчастника.Вставить("СколькоВсегоНадоОзнакомить", Исполнитель.СколькоВсегоНадоОзнакомить);
			ПараметрыУчастника.Вставить("ДопОписаниеОзнакомиться", Исполнитель.ДопОписаниеОзнакомиться);
			ПараметрыУчастника.Вставить("ЗадачиПоИдентификатору", ЗадачиПоИдентификатору);

			СтруктураОтбора = Новый Структура("ВышестоящийУчастник", Исполнитель.Идентификатор);
			СтрокиПодчиненные = ЗначенияЗаполнения.Участники.НайтиСтроки(СтруктураОтбора);
			ПараметрыУчастника.Вставить("ЕстьПодучастники", (СтрокиПодчиненные.Количество() <> 0));
			ПараметрыУчастника.Вставить("ЧислоСиблингов", МассивУчастникПервыйУровень.Количество());
			Если ПараметрыУчастника.ЕстьПодучастники Тогда
				ПараметрыУчастника.ЧислоСиблингов = 2; //чтобы не было свертки (если есть подчиненные участники)
			КонецЕсли;	
			
			МассивСтрокУчастник = ЗаполнитьСтрокуУчастника(
				Исполнитель, ЭлементДействие, ЗначенияЗаполнения, ПараметрыУчастника, ПечатьКарточкиДокумента);
				
			Для Каждого ЭлементУчастник Из МассивСтрокУчастник Цикл	
				
				// подчиненные участники - исполнители и помощники и обеспечивающий подписание
				Для Каждого ИсполнительПодчиненный Из СтрокиПодчиненные Цикл

					ПараметрыУчастника.Вставить("ГлубинаВложенности", 1);
					ПараметрыУчастника.Вставить("ЧислоСиблингов", 2); // тут всегда больше 1 чтобы не было свертки
					
					ЭлементПодучастник = ЗаполнитьСтрокуУчастника(
						ИсполнительПодчиненный, 
						ЭлементУчастник,
						ЗначенияЗаполнения,
						ПараметрыУчастника,
						ПечатьКарточкиДокумента);
				КонецЦикла;
				
			КонецЦикла;
					
		КонецЦикла;

		Если ЭтапыДействия <> Неопределено Тогда
	
			Если Не ПечатьКарточкиДокумента Тогда
				ЭлементыЭтапы = ЭлементДействие.ПолучитьЭлементы();
			Иначе
				ЭлементыЭтапы = ЭлементДействие.Строки;
			КонецЕсли;		
			МассивЭтапов = Новый Массив;
			УчастникиЭтапов = Новый Массив;
			
			Для Каждого СтрЭтап Из ЭтапыДействия Цикл

				СтруктураОтбора = Новый Структура("ИдентификаторЭтапа", СтрЭтап.Идентификатор);
				СтрокиЭтапаНайденные = ЗначенияЗаполнения.Участники.НайтиСтроки(СтруктураОтбора);
				СтрокиЭтапа = Новый Массив;
				Для Каждого Исполнитель Из СтрокиЭтапаНайденные Цикл
					Если Не ЗначениеЗаполнено(Исполнитель.ВышестоящийУчастник) Тогда
						СтрокиЭтапа.Добавить(Исполнитель);
					КонецЕсли;	
				КонецЦикла;	
				
				Если СтрокиЭтапа.Количество() = 0 Тогда
					Продолжить; //пустые этапы не выводим
				КонецЕсли;
				
				МассивЭтапов.Добавить(СтрЭтап);
				УчастникиЭтапов.Добавить(СтрокиЭтапа);
				
			КонецЦикла;	
			
			ЭтоЕдинственныйЭтап = (МассивЭтапов.Количество() = 1);

			НомерЭтапа = 0;
			Для Каждого СтрЭтап Из МассивЭтапов Цикл
				
				СтрокиЭтапа = УчастникиЭтапов[НомерЭтапа];
				НомерЭтапа = НомерЭтапа + 1;

				Если ЭтоЕдинственныйЭтап Тогда
					ЭлементЭтап = ЭлементДействие;
				Иначе	
					ЭлементЭтап = ЭлементыЭтапы.Добавить();
				КонецЕсли;
				
				ЭлементЭтап.ЭтоЭтап = Истина;
				ЭлементЭтап.Представление = СтрЭтап.Наименование;
				ЭлементЭтап.Функция = СтрЭтап.Функция;
				ЭлементЭтап.Идентификатор = СтрЭтап.Идентификатор;
				ЭлементЭтап.Действие = Действие;
				ЭлементЭтап.ВариантУстановкиСрока = СтрЭтап.ВариантУстановкиСрока;
				ЭлементЭтап.СрокРассчитанный = СтрЭтап.Срок;
				ЭлементЭтап.СрокПредставление = СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
					СтрЭтап.Срок, СтрЭтап.СрокДни, СтрЭтап.СрокЧасы, СтрЭтап.СрокМинуты,
					ИспользоватьДатуИВремяВСрокахЗадач, ЭлементЭтап.ВариантУстановкиСрока);
			
				Для Каждого Исполнитель Из СтрокиЭтапа Цикл

					ПараметрыУчастника = Новый Структура();
					ПараметрыУчастника.Вставить("ИспользоватьДатуИВремяВСрокахЗадач", ИспользоватьДатуИВремяВСрокахЗадач);
					ПараметрыУчастника.Вставить("ГлубинаВложенности", 0);
					ПараметрыУчастника.Вставить("СоответствиеСотрудниковВКонтейнерах", СоответствиеСотрудниковВКонтейнерах);
					ПараметрыУчастника.Вставить("ВыполнятьДействияПроцессами", ВыполнятьДействияПроцессами);
					ПараметрыУчастника.Вставить("ПредметОбъект", ПредметОбъект);
					ПараметрыУчастника.Вставить("СведенияОбУчастниках", СведенияОбУчастниках);
					ПараметрыУчастника.Вставить("Действие", Действие);
					ПараметрыУчастника.Вставить("Защищенный", Исполнитель.Защищенный);
					ПараметрыУчастника.Вставить("НужнаИсторияОбработки", НужнаИсторияОбработки);
					
					ПараметрыУчастника.Вставить("СколькоОзнакомлено", Исполнитель.СколькоОзнакомлено);
					ПараметрыУчастника.Вставить("СколькоВсегоНадоОзнакомить", Исполнитель.СколькоВсегоНадоОзнакомить);
					ПараметрыУчастника.Вставить("ДопОписаниеОзнакомиться", Исполнитель.ДопОписаниеОзнакомиться);   
					ПараметрыУчастника.Вставить("ЗадачиПоИдентификатору", ЗадачиПоИдентификатору);
					
					СтруктураОтбора = Новый Структура("ВышестоящийУчастник", Исполнитель.Идентификатор);
					СтрокиПодчиненные = ЗначенияЗаполнения.Участники.НайтиСтроки(СтруктураОтбора);
					ПараметрыУчастника.Вставить("ЕстьПодучастники", (СтрокиПодчиненные.Количество() <> 0));
					ПараметрыУчастника.Вставить("ЧислоСиблингов", СтрокиЭтапа.Количество());
					Если ПараметрыУчастника.ЕстьПодучастники Тогда
						ПараметрыУчастника.ЧислоСиблингов = 2; //чтобы не было свертки (если есть подчиненные участники)
					КонецЕсли;	
					
					МассивСтрокУчастник = ЗаполнитьСтрокуУчастника(
						Исполнитель, ЭлементЭтап, ЗначенияЗаполнения, ПараметрыУчастника,
						ПечатьКарточкиДокумента);
						
					// ЭлементУчастник 	 - считаем что после разыменовки тут будет ровно 1 строка
					
					Для Каждого ЭлементУчастник Из МассивСтрокУчастник Цикл	
						
						// подчиненные участники - исполнители и помощники и обеспечивающий подписание
						Для Каждого ИсполнительПодчиненный Из СтрокиПодчиненные Цикл

							ПараметрыУчастника.Вставить("ГлубинаВложенности", 1);
							ПараметрыУчастника.Вставить("ЧислоСиблингов", 2); // тут всегда больше 1 чтобы не было свертки
							
							ЭлементПодучастник = ЗаполнитьСтрокуУчастника(
								ИсполнительПодчиненный, 
								ЭлементУчастник,
								ЗначенияЗаполнения,
								ПараметрыУчастника,
								ПечатьКарточкиДокумента);
								
						КонецЦикла;
						
					КонецЦикла;	

				КонецЦикла;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;
	
	// Пометка дублей участников. Только если действие еще не выполняется
	Если РазыменоватьПриСозданииДействия = Ложь И Не ЗначениеЗаполнено(СостояниеДействия) Тогда
		
		// тут проходим только 1 уровень, т.к. дочерние исполнители не могут быть на этапе разыменования
		ДанныеУчастниковДляПометкиДублей = Новый Массив;
		ЭлементыУчастниковДействия = ДействияКлиентСервер.ЭлементыУчастниковДействия(
			ЭлементДействие, ПечатьКарточкиДокумента, Истина);
			
		ЭлементыУчастниковДействияКромеПроверяющих = Новый Массив;	
		
		Для Каждого ЭлементУчастникаДействия Из ЭлементыУчастниковДействия Цикл

			Если Не ЗначениеЗаполнено(ЭлементУчастникаДействия.РазыменованныйПользователь) Тогда
				Продолжить;
			КонецЕсли;

			Если ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(
				ЭлементУчастникаДействия.Функция) Тогда
				Продолжить;
			КонецЕсли; 
			
			// ОбеспечивающийПодписание - не удаляем дубли и не показываем серым
			Если ЭлементУчастникаДействия.Функция = Перечисления.ФункцииУчастниковПодписания.ОбеспечивающийПодписание Тогда
				Продолжить;
			КонецЕсли; 
			
			ЭлементыУчастниковДействияКромеПроверяющих.Добавить(ЭлементУчастникаДействия);

			ДанныеУчастникаДляПометкиДублей = ДействияКлиентСервер.ДанныеУчастникаДляПометкиДублей();
			ДанныеУчастникаДляПометкиДублей.РазвернутыйУчастник = ЭлементУчастникаДействия.РазыменованныйПользователь;
			ДанныеУчастникаДляПометкиДублей.НеразвернутыйУчастник = ЭлементУчастникаДействия.Участник;
			Если ЗначениеЗаполнено(ЭлементУчастникаДействия.Этап) Тогда
				ДанныеУчастникаДляПометкиДублей.ИдентификаторГруппы = ЭлементУчастникаДействия.Этап.УникальныйИдентификатор();
			Иначе
				ДанныеУчастникаДляПометкиДублей.ИдентификаторГруппы = ЭлементУчастникаДействия.ИдентификаторПункта; 
			КонецЕсли;
			ДанныеУчастникаДляПометкиДублей.НаименованиеЗадачи = ЭлементУчастникаДействия.НаименованиеЗадачи;
			ДанныеУчастникаДляПометкиДублей.Описание = ЭлементУчастникаДействия.Описание;
			ДанныеУчастникаДляПометкиДублей.ЭлементДереваУчастника = ЭлементУчастникаДействия;
			ДанныеУчастникаДляПометкиДублей.Защищенный = ЭлементУчастникаДействия.Защищенный;
			
			ДанныеУчастниковДляПометкиДублей.Добавить(ДанныеУчастникаДляПометкиДублей);

		КонецЦикла;

		ПометитьДублиУчастников(
			ДанныеУчастниковДляПометкиДублей, "ПредставлениеСотрудники", ПорядокЭтапов);
			
		// Пометить участников, которые будут удалены по условиям действий
		ПометитьУдаляемыхПоУсловиямУчастников(ПредметОбъект, ЭлементыУчастниковДействия,
			"ПредставлениеСотрудники");
			
		// Пометить участников регистрации и утверждения, которые будут удалены
		ПометитьУдаляемыхПоКоличествуУчастников(ЭлементДействие.Действие, ЭлементыУчастниковДействияКромеПроверяющих,
			"ПредставлениеСотрудники");

	КонецЕсли;

	ЗаполнитьСостоянияИРезультатыВФормеПредмета(ЭлементДействие, Действие, , ПечатьКарточкиДокумента);
	ЗаполнитьСостояниеКонтроляВФормеПредмета(ЭлементДействие, Действие);

КонецПроцедуры

// Помечает или снимает пометку на удаление у переданных действий и обновляет отображение в форме предмета
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма предмета.
// 	Действия - Массив - действий, которые нужно пометить на удаление/снять пометку удаления.
// 	ПометкаУдаления - Булево - если Истина, то ставим пометку на удаление, если Ложь, то снимаем.
// 	ПараметрыОбъектаОбработки - Структура - Параметры объекта обработки. См. ДействияКлиентСервер.НовыйПараметрыОбъектаОбработки().
// 	ПараметрыВидаОбъекта - Структура - Параметры вида объекта. См. ДействияКлиентСервер.НовыйПараметрыВидаОбъекта().
//
Процедура ПометитьНаУдалениеИоОбновитьОтображение(Форма, 
	Действия, ПометкаУдаления, ПараметрыОбъектаОбработки, ПараметрыВидаОбъекта) Экспорт

	ПометитьДействияНаУдаление(Действия, ПометкаУдаления);
	ПрочитатьДействияВФормуПредмета(Форма, ПараметрыОбъектаОбработки, ПараметрыВидаОбъекта);

КонецПроцедуры

// Помечает или снимает пометку на удаление у переданных действий
// 
// Параметры:
// 	МассивДействий - Массив - действий, которые нужно пометить на удаление/снять пометку удаления.
// 	ПометкаУдаления - Булево - если Истина, то ставим пометку на удаление, если Ложь, то снимаем.
//
Процедура ПометитьДействияНаУдаление(МассивДействий, ПометкаУдаления) Экспорт
	
	Для Каждого Действие Из МассивДействий Цикл

		ЗаблокироватьДанныеДляРедактирования(Действие);

		ОбъектДействие = Действие.ПолучитьОбъект();
		ОбъектДействие.УстановитьПометкуУдаления(ПометкаУдаления);

		РазблокироватьДанныеДляРедактирования(Действие);

	КонецЦикла;
	
КонецПроцедуры

// Возвращает таблицу настроек обработки вида документа.
//
// Параметры:
//  ВидОбъекта - ОпределяемыйТип.ВидОбъектаСОбработкой - Ссылка на вид объекта, для которого получаем настройки.
//  ДатаОбработки - Дата - если задана, то получает настройки на указанную дату. Если не задана, то возвращает все настройки.
//  ДобавитьРодителя - Булево - если Истина, то также получает настройки группы, к которому отнесен Вид объекта.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с настройками обработки.
//
Функция НастройкиОбработкиВидаОбъекта(ВидОбъекта, ДатаОбработки = Неопределено,
	Знач ДобавитьРодителя = Ложь) Экспорт
	
	Если Не ВидОбъекта.Метаданные().Иерархический Тогда
		ДобавитьРодителя = Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиОбработкиВидовОбъектов.Ссылка КАК СсылкаНаНастройку,
		|	НастройкиОбработкиВидовОбъектов.ВидОбъекта КАК ВидОбъекта,
		|	ВидыДействийНастройки.ВидДействия КАК ВидДействия,
		|	НастройкиОбработкиВидовОбъектов.ДействуетС КАК ДействуетС,
		|	НастройкиОбработкиВидовОбъектов.ДействуетПо КАК ДействуетПо,
		|	НастройкиОбработкиВидовОбъектов.Автор КАК Автор,
		|	ВидыДействийНастройки.НомерСтроки КАК ПорядковыйНомер,
		|	НастройкиОбработкиВидовОбъектов.ВидОбъекта.ЭтоГруппа КАК ЭтоНастройкиГруппы,
		|	ПараметрыСхемОбработокОбъектов.Ссылка КАК СхемаОбработки,
		|	ЕстьNull(ПараметрыСхемОбработокОбъектов.АвтоформируемаяСхема, ИСТИНА) КАК АвтоформируемаяСхема
		|ИЗ
		|	Справочник.НастройкиОбработкиВидовОбъектов КАК НастройкиОбработкиВидовОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиОбработкиВидовОбъектов.ВидыДействий КАК ВидыДействийНастройки
		|		ПО НастройкиОбработкиВидовОбъектов.Ссылка = ВидыДействийНастройки.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПараметрыСхемДляОбработокОбъектов КАК ПараметрыСхемОбработокОбъектов
		|		ПО ПараметрыСхемОбработокОбъектов.ВладелецСхемы = ВидыДействийНастройки.Ссылка
		|ГДЕ
		|	НастройкиОбработкиВидовОбъектов.ВидОбъекта = &ВидОбъекта
		|	И НастройкиОбработкиВидовОбъектов.ПометкаУдаления = ЛОЖЬ
		|	И &УсловиеОтбора
		|УПОРЯДОЧИТЬ ПО
		|	ДействуетС УБЫВ,
		|	ПорядковыйНомер";

	Если ЗначениеЗаполнено(ДатаОбработки) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбора", 
		"НастройкиОбработкиВидовОбъектов.ДействуетС <= &ДатаОбработки
		|	И (НастройкиОбработкиВидовОбъектов.ДействуетПо = ДАТАВРЕМЯ(1, 1, 1)
		|		ИЛИ НастройкиОбработкиВидовОбъектов.ДействуетПо >= &ДатаОбработки)");
		Запрос.Параметры.Вставить("ДатаОбработки", НачалоДня(ДатаОбработки));
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбора", "ИСТИНА");
	КонецЕсли;

	Запрос.Параметры.Вставить("ВидОбъекта", ВидОбъекта);
	
	// Если настройки для вида заданы, то берем их
	НастройкиОбработки = Запрос.Выполнить().Выгрузить();
	Если НастройкиОбработки.Количество() > 0 Или Не ДобавитьРодителя Тогда
		Возврат НастройкиОбработки;
	КонецЕсли;
	
	// Если настроек вида нет, то возвращаем настройки родителя
	Запрос.Параметры.Вставить("ВидОбъекта", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ВидОбъекта, "Родитель"));
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Вернет пустую таблицу участников.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица участников.
//
Функция НоваяТаблицаУчастники() Экспорт

	Участники = Новый ТаблицаЗначений;
	Участники.Колонки.Добавить("Участник");
	Участники.Колонки.Добавить("Идентификатор");

	ТипыКолонки = Новый ОписаниеТипов("Дата");
	Участники.Колонки.Добавить("Срок", ТипыКолонки);

	ТипыКолонки = Новый ОписаниеТипов("Число");
	Участники.Колонки.Добавить("СрокДни", ТипыКолонки);
	Участники.Колонки.Добавить("СрокМинуты", ТипыКолонки);
	Участники.Колонки.Добавить("СрокЧасы", ТипыКолонки);

	Участники.Колонки.Добавить("Функция");
	Участники.Колонки.Добавить("Этап");
	Участники.Колонки.Добавить("ИдентификаторЭтапа");
	
	Участники.Колонки.Добавить("ИдентификаторПункта");
	Участники.Колонки.Добавить("ОписаниеПункта");

	Участники.Колонки.Добавить("ВышестоящийУчастник");

	ТипыКолонки = Новый ОписаниеТипов("Строка");
	Участники.Колонки.Добавить("НаименованиеЗадачи", ТипыКолонки);
	Участники.Колонки.Добавить("Описание", ТипыКолонки);
	
	ТипыКолонки = Новый ОписаниеТипов("Булево");
	Участники.Колонки.Добавить("Защищенный", ТипыКолонки);
	
	Участники.Колонки.Добавить("Условие");

	ТипыКолонки = Новый ОписаниеТипов("Булево");
	Участники.Колонки.Добавить("Ответственный", ТипыКолонки);

	Участники.Колонки.Добавить("ВариантУстановкиСрока");      
	
	Участники.Колонки.Добавить("СколькоОзнакомлено");
	Участники.Колонки.Добавить("СколькоВсегоНадоОзнакомить");
	Участники.Колонки.Добавить("ДопОписаниеОзнакомиться");
	
	Участники.Колонки.Добавить("СостояниеОзнакомления");
	Участники.Колонки.Добавить("ДатаОзнакомления");   
	Участники.Колонки.Добавить("СрокОзнакомления");   
	Участники.Колонки.Добавить("РезультатОзнакомленияТекстом");  
	Участники.Колонки.Добавить("ФактическийУчастникОзнакомления");
	Участники.Колонки.Добавить("ПредставлениеФактическогоУчастникаОзнакомления");
	
	Участники.Колонки.Добавить("СрокРассчитанный");  
	
	Возврат Участники;

КонецФункции

// Вернет пустую таблицу этапов.
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - таблица этапов.
//
Функция НоваяТаблицаЭтапы() Экспорт

	Участники = Новый ТаблицаЗначений;
	Участники.Колонки.Добавить("ВариантУстановкиСрока");

	ТипыКолонки = Новый ОписаниеТипов("Дата");
	Участники.Колонки.Добавить("Срок", ТипыКолонки);

	ТипыКолонки = Новый ОписаниеТипов("Число");
	Участники.Колонки.Добавить("СрокДни", ТипыКолонки);
	Участники.Колонки.Добавить("СрокМинуты", ТипыКолонки);
	Участники.Колонки.Добавить("СрокЧасы", ТипыКолонки);

	Участники.Колонки.Добавить("Функция");
	Участники.Колонки.Добавить("Этап");
	Участники.Колонки.Добавить("Идентификатор");

	Участники.Колонки.Добавить("Порядок");
	Участники.Колонки.Добавить("РангПо");
	Участники.Колонки.Добавить("РангС");
	Участники.Колонки.Добавить("ТочкаМаршрута");

	Участники.Колонки.Добавить("Наименование");

	Возврат Участники;

КонецФункции

// Проверяет есть ли право остановки обработки.
// 
//Параметры:
//	ПараметрыОбъектаОбработки - Структура. См. ДействияКлиентСервер.НовыйПараметрыОбъектаОбработки().
//	ТекущийПользователь - СправочникСсылка.Пользователи
// 
// Возвращаемое значение:
//  Булево - Истина, если есть право остановки.
//
Функция ЕстьПравоОстановкиОбработки(ПараметрыОбъектаОбработки, ТекущийПользователь) Экспорт
	
	РолиПерекрываютНастройкиДоступностиДействий = РолиПерекрываютНастройкиДоступностиДействий();
	
	// Обработку зарегистрированных документов рядовым пользователям нельзя прерывать
	Если ЗначениеЗаполнено(ПараметрыОбъектаОбработки.РегистрационныйНомер)
		И Не РолиПерекрываютНастройкиДоступностиДействий
		И Не РольДоступна("ПрерываниеОбработки") Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ТипЗнч(ПараметрыОбъектаОбработки.ВидОбъекта) = Тип("СправочникСсылка.ВидыМероприятий") Тогда
		ПользовательИЕгоСотрудники = ДействияСерверПовтИсп.СотрудникиВключаяЗамещения(ТекущийПользователь, Истина);
	Иначе
		ПользовательИЕгоСотрудники = ДействияСерверПовтИсп.СотрудникиВключаяЗамещения(ТекущийПользователь);
	КонецЕсли;
	
	ТекущийПользовательОтветственный = Ложь;
	Для Каждого Ответственный Из ПараметрыОбъектаОбработки.Ответственные Цикл
		
		Если ПользовательИЕгоСотрудники.Найти(Ответственный) <> Неопределено Тогда
			ТекущийПользовательОтветственный = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если РолиПерекрываютНастройкиДоступностиДействий
		Или ТекущийПользовательОтветственный
		Или РольДоступна("ПрерываниеОбработки") Тогда
		Возврат Истина;
	КонецЕсли;

	Если Константы.ДобавлятьРуководителямДоступПодчиненных.Получить() Тогда
		
		Для Каждого Ответственный Из ПараметрыОбъектаОбработки.Ответственные Цикл
			
			РуководительОтветственного = Сотрудники.БлижайшийРуководитель(Ответственный);
			
			ТекущийПользовательРуководительОтветственного =
				ПользовательИЕгоСотрудники.Найти(РуководительОтветственного) <> Неопределено;
			Если ТекущийПользовательРуководительОтветственного Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;	
	
	Возврат Ложь;

КонецФункции

// Возвращает признак разрешенности изменения участников действия.
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - проверяемый пользователь
//
// Возвращаемое значение:
//  Булево - Истина, если есть полные права.
//
Функция РолиПерекрываютНастройкиДоступностиДействий(Пользователь = Неопределено) Экспорт

	Возврат РольДоступна("ПолныеПрава");

КонецФункции

// Структура параметров, которые нужны для изменения состояния и результата действия
// при записи задачи или поручения.
// 
// Возвращаемое значение:
//  Структура - параметры изменения данных.
//
Функция СтруктураПараметровИзмененияДанныхДействия() Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("Функция", Неопределено); // Функция участника действия.
	Параметры.Вставить("Участник", Неопределено); // Участник действия.
	Параметры.Вставить("Результат", Неопределено); // Результат действия.
	Параметры.Вставить("Поручение", Неопределено); // Используется для действия Исполнение.
	Параметры.Вставить("ФактическийИсполнитель", Неопределено); // Фактический Участник действия.
	Параметры.Вставить("ИдентификаторПункта", Неопределено); // ИдентификаторПункта
	Параметры.Вставить("ИдентификаторУчастника", Неопределено); // Идентификатор участника действия.
	Параметры.Вставить("ДатаИсполнения", Неопределено); // ДатаИсполнения задачи участника действия.
	Параметры.Вставить("Комментарий", "");
	Параметры.Вставить("НомерИтерации", 0);
	Параметры.Вставить("ПодписиЭП", Неопределено);
	Параметры.Вставить("ФактическийИсполнительПолный", Неопределено);
	Параметры.Вставить("СрокРассчитанный", Неопределено);
	Параметры.Вставить("ДатаНачала", Неопределено);
	Параметры.Вставить("РезультатВнешнегоПодписания", Ложь);
	Параметры.Вставить("ЭтоВыполнениеЗадачиПоПочте", Ложь);
	
	Возврат Параметры;

КонецФункции

// Структура параметров, которые нужны для изменения состояния и результата действия ознакомления
// 
// Возвращаемое значение:
//  Структура - параметры изменения данных.
//
Функция НовыеПараметровИзмененияДанныхДействияОзнакомления() Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("Функция", Неопределено); // Функция участника действия.
	Параметры.Вставить("Участник", Неопределено); // Участник действия.
	Параметры.Вставить("Результат", Неопределено); // Результат действия.
	Параметры.Вставить("ФактическийИсполнитель", Неопределено); // Фактический Участник действия.
	Параметры.Вставить("ИдентификаторУчастника", Неопределено); // Идентификатор участника действия.
	Параметры.Вставить("ДатаИсполнения", Неопределено); // ДатаИсполнения задачи участника действия.
	Параметры.Вставить("Комментарий", "");
	Параметры.Вставить("ПодписиЭП", Неопределено);
	Параметры.Вставить("ФактическийИсполнительПолный", Неопределено);
	Параметры.Вставить("РезультатВнешнегоПодписания", Ложь);
	Параметры.Вставить("ЭтоВыполнениеЗадачиПоПочте", Ложь);
	Параметры.Вставить("ВерсииФайлов", Неопределено);
	
	Возврат Параметры;

КонецФункции

// Возвращает активные действия указанного предмета
// 
// Параметры:
// 	Объект - ОпределяемыйТип.ПредметДействия.
// 	ВидОбъекта - ОпределяемыйТип.ВидОбъектаСОбработкой - ссылка на вид объекта.
// 	ДатаОбработки - Произвольный, Дата - дата обработки.
// 	ВключаяИсторию - Булево - Включая помещенные в историю.
// 	
// Возвращаемое значение:
// 	РезультатЗапроса, Неопределено - активные действия указанного предмета
//
Функция ТекущиеДействияПредмета(Объект, ВидОбъекта = Неопределено, ДатаОбработки, ВключаяИсторию = Ложь) Экспорт
	
	Если ВидОбъекта = Неопределено Тогда
		ВидОбъекта = ВидОбъекта(Объект);
	КонецЕсли;

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Действия.Ссылка КАК Действие,
	|	Действия.ВидДействия КАК ВидДействия,
	|	Действия.ДатаСоздания КАК ДатаСоздания,
	|	ЛОЖЬ КАК СогласованиеВРежимеЗамечаний,
	|	Действия.ВыполненоВнеПрограммы
	|ПОМЕСТИТЬ Действия
	|ИЗ
	|	Справочник.ДействияИсполнения КАК Действия
	|ГДЕ
	|	Действия.Предмет = &Объект
	|	И НЕ Действия.ПометкаУдаления
	|	И НЕ Действия.ПомещеноВИсторию
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Действия.Ссылка,
	|	Действия.ВидДействия,
	|	Действия.ДатаСоздания,
	|	ЛОЖЬ,
	|	Действия.ВыполненоВнеПрограммы
	|ИЗ
	|	Справочник.ДействияОзнакомления КАК Действия
	|ГДЕ
	|	Действия.Предмет = &Объект
	|	И НЕ Действия.ПометкаУдаления
	|	И НЕ Действия.ПомещеноВИсторию
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Действия.Ссылка,
	|	Действия.ВидДействия,
	|	Действия.ДатаСоздания,
	|	ЛОЖЬ,
	|	Действия.ВыполненоВнеПрограммы
	|ИЗ
	|	Справочник.ДействияПодписания КАК Действия
	|ГДЕ
	|	Действия.Предмет = &Объект
	|	И НЕ Действия.ПометкаУдаления
	|	И НЕ Действия.ПомещеноВИсторию
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Действия.Ссылка,
	|	Действия.ВидДействия,
	|	Действия.ДатаСоздания,
	|	ЛОЖЬ,
	|	Действия.ВыполненоВнеПрограммы
	|ИЗ
	|	Справочник.ДействияРегистрации КАК Действия
	|ГДЕ
	|	Действия.Предмет = &Объект
	|	И НЕ Действия.ПометкаУдаления
	|	И НЕ Действия.ПомещеноВИсторию
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Действия.Ссылка,
	|	Действия.ВидДействия,
	|	Действия.ДатаСоздания,
	|	Действия.СогласованиеВРежимеЗамечаний,
	|	Действия.ВыполненоВнеПрограммы
	|ИЗ
	|	Справочник.ДействияСогласования КАК Действия
	|ГДЕ
	|	Действия.Предмет = &Объект
	|	И НЕ Действия.ПометкаУдаления
	|	И НЕ Действия.ПомещеноВИсторию
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Действия.Ссылка,
	|	Действия.ВидДействия,
	|	Действия.ДатаСоздания,
	|	ЛОЖЬ,
	|	Действия.ВыполненоВнеПрограммы
	|ИЗ
	|	Справочник.ДействияУтверждения КАК Действия
	|ГДЕ
	|	Действия.Предмет = &Объект
	|	И НЕ Действия.ПометкаУдаления
	|	И НЕ Действия.ПомещеноВИсторию
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыДействийНастройки.ВидДействия КАК ВидДействия,
	|	ВидыДействийНастройки.НомерСтроки КАК ПорядковыйНомер
	|ПОМЕСТИТЬ НастройкиОбработки
	|ИЗ
	|	Справочник.НастройкиОбработкиВидовОбъектов КАК НастройкиОбработкиВидовОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиОбработкиВидовОбъектов.ВидыДействий КАК ВидыДействийНастройки
	|		ПО НастройкиОбработкиВидовОбъектов.Ссылка = ВидыДействийНастройки.Ссылка
	|ГДЕ
	|	НастройкиОбработкиВидовОбъектов.ВидОбъекта = &ВидОбъекта
	|	И НастройкиОбработкиВидовОбъектов.ПометкаУдаления = ЛОЖЬ
	|	И НастройкиОбработкиВидовОбъектов.ДействуетС <= &ДатаОбработки
	|	И (НастройкиОбработкиВидовОбъектов.ДействуетПо = ДАТАВРЕМЯ(1, 1, 1)
	|	ИЛИ НастройкиОбработкиВидовОбъектов.ДействуетПо >= &ДатаОбработки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Действия.Действие КАК Действие,
	|	Действия.ВидДействия КАК ВидДействия,
	|	Действия.СогласованиеВРежимеЗамечаний КАК СогласованиеВРежимеЗамечаний,
	|	Действия.ВыполненоВнеПрограммы
	|ИЗ
	|	Действия КАК Действия
	|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиОбработки КАК НастройкиОбработки
	|		ПО (НастройкиОбработки.ВидДействия = Действия.ВидДействия)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕСТЬNULL(НастройкиОбработки.ПорядковыйНомер, 0),
	|	Действия.ДатаСоздания");

	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("ВидОбъекта", ВидОбъекта);
	Запрос.УстановитьПараметр("ДатаОбработки", ДатаОбработки);
	
	Если ВключаяИсторию Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ Действия.ПомещеноВИсторию", "");
	КонецЕсли;
	
	Возврат Запрос.Выполнить();

КонецФункции

// Возвращает текущее состояние автивной обработки предмета
// 
// Параметры:
// 	Предмет - ОпределяемыйТип.ПредметДействия.
// 	ДатаИзмененияСостоянияОбработки - Дата - дата изменения состояния.
// 	ДатаНачалаОбработки - Дата - дата запуска обработки.
// 	ТекущаяОбработкаОбъекта - Неопределено, СправочникСсылка.ОбработкиОбъектов - Текущая обработка объекта
// 	
// Возвращаемое значение:
// 	Неопределено, ПеречислениеСсылка.СостоянияОбработкиОбъектов - состояние обработки
//
Функция ТекущееСостояниеОбработки(Предмет, ДатаИзмененияСостоянияОбработки = Неопределено,
	ДатаНачалаОбработки = Неопределено, ТекущаяОбработкаОбъекта = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	СостояниеОбработки = Неопределено;
	ДатаИзмененияСостоянияОбработки = Неопределено;
	ТекущаяОбработкаОбъекта = ?(ТекущаяОбработкаОбъекта = Неопределено,
		Справочники.ОбработкиОбъектов.ОбработкаОбъекта(Предмет), ТекущаяОбработкаОбъекта);
	Если ЗначениеЗаполнено(ТекущаяОбработкаОбъекта) Тогда
		КэшДокументыПредприятияФормаЭлемента =
			КэшиНаВремяВызоваПовтИсп.КэшДокументыПредприятияФормаЭлемента();
		Если КэшДокументыПредприятияФормаЭлемента.Инициализирован
			И КэшДокументыПредприятияФормаЭлемента.КэшДокумента.Ссылка = Предмет Тогда
			РеквизитыОбработки = КэшДокументыПредприятияФормаЭлемента.КэшОбработки;
		Иначе
			РеквизитыОбработки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ТекущаяОбработкаОбъекта,
				"Состояние, ДатаИзмененияСостояния, ДатаНачала");
		КонецЕсли;
		СостояниеОбработки = РеквизитыОбработки.Состояние;
		ДатаИзмененияСостоянияОбработки = РеквизитыОбработки.ДатаИзмененияСостояния;
		ДатаНачалаОбработки = РеквизитыОбработки.ДатаНачала;
	ИначеЕсли Справочники.ОбработкиОбъектов.ЕстьПрерванныеОбработки(Предмет) Тогда
		СостояниеОбработки = Перечисления.СостоянияОбработкиОбъектов.Прервана;
	Иначе
		Делопроизводство.ПрочитатьДанныеДокумента(Предмет, "СостояниеОбработки", СостояниеОбработки);
	КонецЕсли;

	Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		Делопроизводство.ПрочитатьДанныеДокумента(
			Предмет,
			"ДатаИзмененияСостоянияОбработки",
			ДатаИзмененияСостоянияОбработки);
	КонецЕсли;
	
	Возврат СостояниеОбработки;

КонецФункции

// Определяет текущие состояния обработок предметов.
// 
// Параметры:
//  Предметы - Массив из ОпределяемыйТип.ПредметДействия.
// 
// Возвращаемое значение:
//  Соответствие - Текущие состояния обработок.
//   * Ключ - ОпределяемыйТип.ПредметДействия.
//   * Значение - ПеречислениеСсылка.СостоянияОбработкиОбъектов
//  
Функция ТекущиеСостоянияОбработок(Предметы) Экспорт
	
	ТекущиеСостоянияОбработок = Новый Соответствие;
	Если Предметы.Количество() = 0 Тогда
		Возврат ТекущиеСостоянияОбработок;
	КонецЕсли;
	
	Для Каждого Предмет Из Предметы Цикл
		ТекущиеСостоянияОбработок.Вставить(
			Предмет,
			Перечисления.СостоянияОбработкиОбъектов.ПустаяСсылка());
	КонецЦикла;
	
	ТекущиеОбработки = Справочники.ОбработкиОбъектов.ТекущиеОбработки(Предметы);
	СостоянияОбработок = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		ОбщегоНазначенияДокументооборотКлиентСервер.ЗначенияСоответствия(ТекущиеОбработки),
		"Состояние");
	Для Каждого Предмет Из Предметы Цикл
		
		ТекущаяОбработка = ТекущиеОбработки[Предмет];
		Если Не ЗначениеЗаполнено(ТекущаяОбработка) Тогда
			Продолжить;
		КонецЕсли;
		
		СостояниеОбработки = СостоянияОбработок[ТекущаяОбработка];
		
		ТекущиеСостоянияОбработок.Вставить(Предмет, СостояниеОбработки);
		
	КонецЦикла;
	
	Возврат ТекущиеСостоянияОбработок;
	
КонецФункции

// Возвращает предопределенный идентификатор участника по имени
// 
// Параметры:
// 	Имя - Строка - имя участника.
// 	Обязательный - Булево - признак обязательности получения ИД.
// 	
// Возвращаемое значение:
// 	УникальныйИдентификатор, Неопределено - предопределенный идентификатор участника
//
Функция ПредопределенныйИдентификаторУчастника(Знач Имя, Обязательный = Истина) Экспорт

	Если ТипЗнч(Имя) <> Тип("Строка") Тогда
		Если ЗначениеЗаполнено(Имя) Тогда
			Имя = XMLСтрока(Имя);
		ИначеЕсли Не Обязательный Тогда
			Возврат Неопределено;
		Иначе
			ВызватьИсключение НСтр("ru = 'Недопустимое значение функции участника '") + """" + Имя
				+ " (" + ТипЗнч(Имя) + ")"".";
		КонецЕсли;
	КонецЕсли;

	Если Имя = "Регистратор" Тогда
		Возврат Новый УникальныйИдентификатор("15f85573-e150-4a0e-93df-d9acf04b2f4d");

	ИначеЕсли Имя = "Утверждающий" Тогда
		Возврат Новый УникальныйИдентификатор("52ce6fea-3df9-4ff8-8c89-2b9e7dd66aa3");

	ИначеЕсли Имя = "Проверяющий" Тогда
		Возврат Новый УникальныйИдентификатор("b2b9051d-7789-4bcc-a442-9da4590953ef");

	ИначеЕсли Имя = "Ознакомляющий" Тогда
		Возврат Новый УникальныйИдентификатор("d8ec155b-edc5-46b3-ac7f-54387b6416d5");

	ИначеЕсли Имя = "Контролер" Тогда
		Возврат Новый УникальныйИдентификатор("3f30e365-b9ff-4886-bf56-63d2a169481b");

	ИначеЕсли Имя = "ОбрабатывающийРезультат" Тогда // инициатор согласования
		Возврат Новый УникальныйИдентификатор("5e2449be-2385-4893-8c4c-07e1bc1d3f42");

	ИначеЕсли Имя = "ПодготовкаКВыполнению" Тогда // добавить комментарии
		Возврат Новый УникальныйИдентификатор("5e2559be-2385-4893-8c4c-07e1bc1d3f42");

	ИначеЕсли Имя = "ПодготовкаКОбработке" Тогда // создать html
		Возврат Новый УникальныйИдентификатор("5e2669be-2385-4893-8c4c-07e1bc1d3f42");

	ИначеЕсли Имя = "ПодготовкаКЗавершению" Тогда // удалить комментарии
		Возврат Новый УникальныйИдентификатор("5e2779be-2385-4893-8c4c-07e1bc1d3f42");

	ИначеЕсли Имя = "Автор" Тогда
		Возврат Новый УникальныйИдентификатор("7b54d47e-9f69-43bb-ac3b-b63d99cb3767");
		
	ИначеЕсли Имя = "ЭтапСогласовать" Тогда
		Возврат Новый УникальныйИдентификатор("7b54d47e-9f44-43bb-ac3b-b63d99cb3467");
		
	ИначеЕсли Имя = "ЭтапОбрабатывающийРезультатСогласование" Тогда
		Возврат Новый УникальныйИдентификатор("7b54d47e-9f32-43bb-ac3b-b63d99cb3647");
	
	ИначеЕсли Имя = "ЭтапПодписать" Тогда
		Возврат Новый УникальныйИдентификатор("7b54d47e-9f33-43bb-ac3b-b63d99cb3479");
		
	ИначеЕсли Имя = "ЭтапОбрабатывающийРезультатПодписание" Тогда
		Возврат Новый УникальныйИдентификатор("7b54d47e-9f23-43bb-ac3b-b63d99cb3648");
	
	ИначеЕсли Имя = "ЭтапОбрабатывающийРезультатРегистрации" Тогда
		Возврат Новый УникальныйИдентификатор("7b54d47e-9f13-43bb-ac4b-b63d99cb3678");
	
	ИначеЕсли Имя = "ЭтапОбрабатывающийРезультатУтверждения" Тогда
		Возврат Новый УникальныйИдентификатор("7b54d74e-9f03-48bb-ac4b-b63d99cb7736");				

	ИначеЕсли Имя = "Пустой" Тогда
		Возврат Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");

	ИначеЕсли Не Обязательный Тогда
		Возврат Неопределено;

	КонецЕсли;

	ВызватьИсключение НСтр("ru = 'Недопустимое имя участника '") + """" + Имя + """.";

КонецФункции

// Выполняет разыменование действий по предмету, в настройках которых указан момент
// разыменования "При запуске документа в обработку"
// 
// Параметры:
// 	Предмет - ОпределяемыйТип.ПредметДействия - ссылка на предмет действия.
// 	ОбработанныеДействия - Массив - обработанных действий.
// 	ДатаНачала - Дата - дата начала обработки.
//
Процедура ВыполнитьРазыменованиеДействийПриЗапускеВОбработку(Предмет, ОбработанныеДействия,
	ДатаНачала) Экспорт

	ВидОбъекта = ВидОбъекта(Предмет);
	ДействияПоПредмету = ТекущиеДействияПредмета(Предмет, ВидОбъекта, ДатаНачала);
	ДействияПоПредмету = ДействияПоПредмету.Выгрузить();
	
	Вытесняемые = ПравилаОбработкиСервер.ВытесняемыеУчастникиОбработки(Предмет);

	Для Каждого СтрокаТаблицы Из ДействияПоПредмету Цикл

		Если ОбработанныеДействия.Найти(СтрокаТаблицы.Действие) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МоментРазыменованияУчастников = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			СтрокаТаблицы.Действие, "МоментРазыменованияУчастников");
		Если МоментРазыменованияУчастников 
			<> Перечисления.МоментыРазыменованияУчастниковДействий.ПриЗапускеДокументаВОбработку Тогда
			
			// Для уже разыменованных надо проверить вытеснение еще раз
			НаУдаление = Новый Массив;
			Участники = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Действие, "Участники").Выгрузить();
			Для Каждого Участник Из Участники Цикл
				Если Вытесняемые[Участник.Идентификатор] <> Неопределено Тогда
					НаУдаление.Добавить(Участник.Идентификатор);
				КонецЕсли;
			КонецЦикла;
			
			Если НаУдаление.Количество() Тогда
				ДействиеОснование = СтрокаТаблицы.Действие.ПолучитьОбъект();
				Для Каждого УдаляемыйИдентификатор Из НаУдаление Цикл
					Участник = ДействиеОснование.Участники.Найти(УдаляемыйИдентификатор, "Идентификатор");
					Если Участник <> Неопределено Тогда
						ДействиеОснование.Участники.Удалить(Участник);
					КонецЕсли;
				КонецЦикла;
				ДействиеОснование.Записать();
				ОбработанныеДействия.Добавить(СтрокаТаблицы.Действие);
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;

		ДействиеОснование = СтрокаТаблицы.Действие.ПолучитьОбъект();

		ХешПередРазыменованием = ХешДействия(ДействиеОснование);
		ДействиеОснование.Разыменовать(ДействиеОснование.Предмет.ПолучитьОбъект(), Истина);
		ХешПослеРазыменования = ХешДействия(ДействиеОснование);

		Если Не СтрСравнить(ХешПередРазыменованием, ХешПослеРазыменования) = 0 Тогда

			УстановитьПризнакЗаписиДействияПослеРазменованияДляЗапуска(ДействиеОснование);
			ДействиеОснование.Записать();

		КонецЕсли;

		ОбработанныеДействия.Добавить(СтрокаТаблицы.Действие);

	КонецЦикла;

КонецПроцедуры

// Возвращает Истина, если момент разыменования участников - при создании
// 
// Параметры:
// 	МоментРазыменованияУчастников - ПеречислениеСсылка.МоментыРазыменованияУчастниковДействий - проверяемый момент.
// 	
// Возвращаемое значение:
// 	Булево - Истина, если момент разыменования участников - при создании действия
//
Функция РазыменоватьПриСозданииДействия(МоментРазыменованияУчастников) Экспорт

	Возврат МоментРазыменованияУчастников
		= Перечисления.МоментыРазыменованияУчастниковДействий.ПриСозданииДействия;

КонецФункции

// Возвращает Истина, если момент разыменования участников - Перед выполнением действия
// 
// Параметры:
// 	МоментРазыменованияУчастников - ПеречислениеСсылка.МоментыРазыменованияУчастниковДействий - проверяемый момент.
// 	
// Возвращаемое значение:
// 	Булево - Истина, если момент разыменования участников - Перед выполнением действия
//
Функция РазыменоватьПередВыполнениемДействия(МоментРазыменованияУчастников) Экспорт

	Возврат МоментРазыменованияУчастников
		= Перечисления.МоментыРазыменованияУчастниковДействий.ПередВыполнениемДействия;

КонецФункции

// Возвращает Истина, если момент разыменования участников - При запуске в обработку
// 
// Параметры:
// 	МоментРазыменованияУчастников - ПеречислениеСсылка.МоментыРазыменованияУчастниковДействий - проверяемый момент.
// 	
// Возвращаемое значение:
// 	Булево - Истина, если момент разыменования участников - При запуске в обработку
//
Функция РазыменоватьПриЗапускеДокументаВОбработку(МоментРазыменованияУчастников) Экспорт

	Возврат МоментРазыменованияУчастников
		= Перечисления.МоментыРазыменованияУчастниковДействий.ПриЗапускеДокументаВОбработку;

КонецФункции

// Нумерует действия по порядку
// 
// Параметры:
// 	ЭлементДействия - ДанныеФормыЭлементДерева - форма предмета, Действия.
// 	ЭлементРодитель - ДанныеФормыЭлементДерева   - строка дерева Действий.
// 	ПечатьКарточкиДокумента - Булево
//
Процедура ПеренумероватьДействия(ЭлементДействия, ЭлементРодитель = Неопределено,
	ПечатьКарточкиДокумента = Ложь) Экспорт

	НомерДействия = 1;

	Если ЭлементРодитель = Неопределено Тогда
		
		Если ПечатьКарточкиДокумента = Ложь Тогда
			ЭлементыДействия = ЭлементДействия.ПолучитьЭлементы();
		Иначе	
			ЭлементыДействия = ЭлементДействия.Строки
		КонецЕсли;
			
	Иначе
		
		Если ПечатьКарточкиДокумента = Ложь Тогда
			ЭлементыДействия = ЭлементРодитель.ПолучитьЭлементы();
		Иначе
			ЭлементыДействия = ЭлементРодитель.Строки;
		КонецЕсли;	
		
	КонецЕсли;

	Для Каждого ЭлементДействие Из ЭлементыДействия Цикл

		ЭлементДействие.Номер = НомерДействия;

		СтрокиНаименования = Новый Массив;
		СтрокиНаименования.Добавить(ЭлементДействие.Номер);
		СтрокиНаименования.Добавить(".");
		СтрокиНаименования.Добавить(" ");
		СтрокиНаименования.Добавить(ЭлементДействие.ПредставлениеЧистое);
		ЭлементДействие.Представление = СтрСоединить(СтрокиНаименования);

		НомерДействия = НомерДействия + 1;

	КонецЦикла;

КонецПроцедуры

// Записывает отличия в действии в ход обработки
// 
// Параметры:
// 	Объект - ОпределяемыйТип.ДействияОбъект - действие.
// 	БылиУчастники - ТаблицаЗначений - участники действия до записи.
// 	Участники - ТаблицаЗначений - текущие участники действия.
// 	Контекст - строка - контекст записи. 
//
Процедура ЗаписатьВХодОбработкиОтличия(Объект, БылиУчастники, Участники, Контекст) Экспорт

	Удаленные = Новый Массив;
	Добавленные = Новый Массив;

	Для Каждого СтараяСтрока Из БылиУчастники Цикл

		НоваяСтрока = Участники.Найти(СтараяСтрока.Участник, "Участник");
		Если НоваяСтрока = Неопределено Тогда
			Удаленные.Добавить(СтараяСтрока.Участник);
		КонецЕсли;

	КонецЦикла;

	Для Каждого НоваяСтрока Из Объект.Участники Цикл

		СтараяСтрока = БылиУчастники.Найти(НоваяСтрока.Участник, "Участник");
		Если СтараяСтрока = Неопределено Тогда
			Добавленные.Добавить(НоваяСтрока.Участник);
		КонецЕсли;

	КонецЦикла;

	Если Удаленные.Количество() <> 0 Или Добавленные.Количество() <> 0 Тогда

		ТекстОписания = "";
		Если Удаленные.Количество() <> 0 Тогда
			ТекстОписания = СтрШаблон(НСтр("ru = '%1. Удалены участники: %2.'"), Контекст,
				МассивВСтроку(Удаленные));
		КонецЕсли;
		Если Добавленные.Количество() <> 0 Тогда
			ТекстОписания = ТекстОписания + ?(ЗначениеЗаполнено(ТекстОписания), " ", "") + СтрШаблон(НСтр(
				"ru = '%1. Добавлены участники: %2.'"), Контекст, МассивВСтроку(Добавленные));
		КонецЕсли;

		ТекущаяОбработка = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(
			Объект.Ссылка);

		Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
		Событие.Обработка = ТекущаяОбработка;
		Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.ИзменениеУчастников;
		Событие.Действие = Объект.Ссылка;
		Событие.Описание = ТекстОписания;
		РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);

	КонецЕсли;

КонецПроцедуры

// Проверяет строки участников на возможность начать обработку по ним.
//
// Параметры:
//  МассивДействий - Массив Из ОпределяемыйТип.Действия
//  СообщенияОбОшибках - Массив Из Строка
//  ПараметрыПроверок - Структура
//
Процедура ПроверкаПередЗапуском(Знач МассивДействий, СообщенияОбОшибках, ПараметрыПроверок) Экспорт
	
	НастройкаОбработки = 
		Справочники.НастройкиОбработкиВидовОбъектов.НастройкаОбработкиДляОбъекта(ПараметрыПроверок.Объект);
	Если Не Справочники.НастройкиОбработкиВидовОбъектов.ЭтоДействующаяНастройка(НастройкаОбработки) Тогда
		ТекстСообщения = НСтр("ru = 'Запуск обработки невозможен. Обработка заполнена по недействующей настройке.
							  |Перед запуском обработку нужно перезаполнить.'");
		СообщенияОбОшибках.Добавить(ТекстСообщения);
		Возврат;
	КонецЕсли; 
	
	ПредметОбъект = ПараметрыПроверок.Объект.ПолучитьОбъект();

	Для Каждого Действие Из МассивДействий Цикл

		МенеджерДействия = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Действие);
		МенеджерДействия.ПроверкаПередЗапуском(Действие, ПредметОбъект, СообщенияОбОшибках,
			ПараметрыПроверок);

	КонецЦикла;

КонецПроцедуры

// Записывает ошибки, если среди участников действия есть контейнейры без исполнителей.
// 
// Параметры:
// 	Действие - ОпределяемыйТип.Действия - ссылка на действие.
// 	МассивУчастники - Массив - участники действия.
// 	ПредметОбъект - ОпределяемыйТип.ПредметДействияОбъект.
// 	СообщенияОбОшибках - Массив - сообщений об ошибках.
//
Процедура ПроверитьПустыеКонтейнеры(Действие, МассивУчастники, ПредметОбъект, СообщенияОбОшибках) Экспорт

	ВидДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "ВидДействия");

	Для Каждого Участник Из МассивУчастники Цикл

		ТекстОшибки = "";

		ДляПроверки = Истина;
		РазвернутыеУчастники = РазвернутыеУчастники(
			Участник, ПредметОбъект, ДляПроверки);

		Если ТипЗнч(Участник) = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов") Тогда
			Если РазвернутыеУчастники.Количество() = 0 Или ТипЗнч(РазвернутыеУчастники[0]) = 
				Тип("СправочникСсылка.АвтоподстановкиДляОбъектов") Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Если Не (РазвернутыеУчастники.Количество() > 0 
			И ТипЗнч(РазвернутыеУчастники[0]) = Тип("СправочникСсылка.Сотрудники")) Тогда

			Если ТипЗнч(Участник) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
				ТекстОшибки = СтрШаблон(
					НСтр(
					"ru = 'В подразделении ""%1"" указанном в действии ""%2"" нет действующих сотрудников.  Обратитесь к администратору.'"),
					Участник, ВидДействия);
			ИначеЕсли ТипЗнч(Участник) = Тип("СправочникСсылка.РабочиеГруппы") Тогда
				ТекстОшибки = СтрШаблон(
					НСтр(
					"ru = 'Отсутствуют сотрудники, состоящие в рабочей группе ""%1"" в действии ""%2"". Обратитесь к администратору.'"),
					Участник, ВидДействия);
			ИначеЕсли ТипЗнч(Участник) = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов") Тогда
				ТекстОшибки = СтрШаблон(
					НСтр(
					"ru = 'Не определены сотрудники по автоподстановке ""%1"" в действии ""%2"". Обратитесь к администратору.'"),
					Участник, ВидДействия);
			ИначеЕсли ТипЗнч(Участник) = Тип("СправочникСсылка.ПодразделенияКонтейнеры") Тогда
				ТекстОшибки = СтрШаблон(
					НСтр(
					"ru = 'Не определены сотрудники в подразделении-контейнере ""%1"" в действии ""%2"". Обратитесь к администратору.'"),
					Участник, ВидДействия);
			ИначеЕсли ТипЗнч(Участник) = Тип("СправочникСсылка.ПроектыКонтейнеры") Тогда
				ТекстОшибки = СтрШаблон(
					НСтр(
					"ru = 'Не определены сотрудники в проекте-контейнере ""%1"" в действии ""%2"". Обратитесь к администратору.'"),
					Участник, ВидДействия);
			ИначеЕсли ТипЗнч(Участник) = Тип("СправочникСсылка.ПолныеРоли") Тогда
				ТекстОшибки = СтрШаблон(
					НСтр(
					"ru = 'Не назначены исполнители роли ""%1"" в действии ""%2"". Обратитесь к администратору.'"),
					Участник, ВидДействия);
			КонецЕсли;

		КонецЕсли;

		Если Не ТекстОшибки = "" Тогда

			СообщенияОбОшибках.Добавить(ТекстОшибки);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Общая обработка получения формы. Подменяет формой предмета, если в ней есть действия.
// 
// Параметры:
// 	ВидФормы - Строка- Имя стандартной формы.
// 	Параметры - Структура- Параметры формы.
// 	ВыбраннаяФорма - Содержит имя открываемой формы или объект метаданных Форма. 
// 	ДополнительнаяИнформация - Структура- Дополнительная информация открытия формы.
// 	СтандартнаяОбработка - Булево- признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация,
	СтандартнаяОбработка) Экспорт

	Если Не Параметры.Свойство("Ключ") Тогда
		Возврат;
	КонецЕсли;

	Если ВидФормы = "ФормаОбъекта" И Не Параметры.Свойство("ОткрытьКарточкуДействия") Тогда
		Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "Предмет");
		СтандартнаяОбработка = Ложь;
		Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Предмет) Тогда
			ВыбраннаяФорма = "Справочник.ДокументыПредприятия.Форма.ФормаЭлемента";
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоМероприятие(Предмет) Тогда
			ВыбраннаяФорма = "Справочник.Мероприятия.Форма.ФормаЭлемента";
		КонецЕсли;
		Параметры.Вставить("Действие", Параметры.Ключ);
		Параметры.Ключ = Предмет;
	КонецЕсли;

КонецПроцедуры

// Формирует структуру данных участника для удаления дублей участников.
//
// Возвращаемое значение:
//  Структура - Параметры участника для удаления дублей участников.
//   * Участник            - Строка,
//                           СправочникСсылка.ДолжностныеЛица,
//                           СправочникСсылка.РабочиеГруппы,
//                           СправочникСсылка.ПолныеРоли,
//                           СправочникСсылка.Пользователи,
//                           СправочникСсылка.ВидыПодразделений,
//                           СправочникСсылка.СтруктураПредприятия - Участник, уже разыменованный, но с неразвернутыми ролями на одного исполнителя.
//   * ИдентификаторГруппы - УникальныйИдентификатор               - Идентификатор группировки, т.е. этапа или пункта.
//   * СтрокаУчастника     - СтрокаТаблицыЗначений                 - Строка участника в таблице участников.
//
Функция ДанныеУчастникаДляУдаленияДублей() Экспорт

	ДанныеУчастникаДляУдаленияДублей = Новый Структура("Участник, ИдентификаторГруппы, СтрокаУчастника");
	ДанныеУчастникаДляУдаленияДублей.ИдентификаторГруппы = УникальныйИдентификаторПустой();

	Возврат ДанныеУчастникаДляУдаленияДублей;

КонецФункции

// Удаляет дубли участников в соответствии с заданными параметрами.
//
// Параметры:
//  ДанныеУчастников  - Массив          - Массив данных участников. См. ДействияСервер.ДанныеУчастникаДляУдаленияДублей().
//  ТаблицаУчастников - Табличная часть - Табличная часть участников, из которых необходимо выполнить удаление.
//  ПорядокЭтапов     - Массив          - Порядок этапов участников.
//
Процедура УдалитьДублиУчастников(ДанныеУчастников, ТаблицаУчастников, ПорядокЭтапов = Неопределено) Экспорт

	Если ПорядокЭтапов = Неопределено Тогда
		ПорядокЭтапов = Новый Массив;
	КонецЕсли;
	
	// Разворачиваем участников.
	РазвернутыеУчастники = Новый Соответствие;
	Для Каждого ДанныеУчастника Из ДанныеУчастников Цикл

		РазвернутыйУчастник = РазвернутыеУчастники[ДанныеУчастника.Участник];
		Если РазвернутыйУчастник = Неопределено Тогда
			РазвернутыйУчастник = ЕдинственныйИсполнительРоли(ДанныеУчастника.Участник);
			РазвернутыеУчастники[ДанныеУчастника.Участник] = РазвернутыйУчастник;
		КонецЕсли;

	КонецЦикла;
	
	// Формируем данные для определения дублей.
	ДанныеУчастниковДляОпределенияДублей = Новый Массив;
	ИдентификаторыСтрокУчастников = Новый Соответствие;
	Для Каждого ДанныеУчастника Из ДанныеУчастников Цикл
		
		// Присваием данным участника уникальный идентификатор.
		УникальныйИдентификаторСоздан = Ложь;
		Пока Не УникальныйИдентификаторСоздан Цикл
			ИдентификаторСтрокиУчастника = Новый УникальныйИдентификатор;
			ДанныеУчастникаПоИдентификатору = ИдентификаторыСтрокУчастников[ИдентификаторСтрокиУчастника];
			Если ДанныеУчастникаПоИдентификатору = Неопределено Тогда
				ИдентификаторыСтрокУчастников[ИдентификаторСтрокиУчастника] = ДанныеУчастника;
				УникальныйИдентификаторСоздан = Истина;
			КонецЕсли;
		КонецЦикла;

		РазвернутыйУчастник = РазвернутыеУчастники[ДанныеУчастника.Участник];
		Если Не ЗначениеЗаполнено(РазвернутыйУчастник) Тогда
			Продолжить;
		КонецЕсли;
		
		// Формируем данные участника для определения дублей.
		ДанныеУчастникаДляОпределенияДублей = ДействияКлиентСервер.ДанныеУчастникаДляОпределенияДублей();
		ДанныеУчастникаДляОпределенияДублей.РазвернутыйУчастник = РазвернутыйУчастник;
		ДанныеУчастникаДляОпределенияДублей.НеразвернутыйУчастник = ДанныеУчастника.Участник;
		ДанныеУчастникаДляОпределенияДублей.ИдентификаторСтрокиУчастника = ИдентификаторСтрокиУчастника;

		ЗаполнитьЗначенияСвойств(
			ДанныеУчастникаДляОпределенияДублей, ДанныеУчастника.СтрокаУчастника);
		ДанныеУчастникаДляОпределенияДублей.ИдентификаторГруппы = ДанныеУчастника.ИдентификаторГруппы;
		ДанныеУчастниковДляОпределенияДублей.Добавить(ДанныеУчастникаДляОпределенияДублей);

	КонецЦикла;
	
	// Определяем дубли участников.
	ИдентификаторыСтрокДублей = ДублиУчастников(ДанныеУчастниковДляОпределенияДублей,
		ПорядокЭтапов);
	
	// Удаляем дубли участников.
	Для Каждого ИдентификаторСтрокиДубля Из ИдентификаторыСтрокДублей Цикл
		ДанныеДубляУчастника = ИдентификаторыСтрокУчастников[ИдентификаторСтрокиДубля];
		ТаблицаУчастников.Удалить(ДанныеДубляУчастника.СтрокаУчастника);
	КонецЦикла;

КонецПроцедуры

// Определяет дубли участников в соответствии с заданными параметрами.
//
// Параметры:
//  ДанныеУчастников - Массив - Массив данных участников. См. ДействияКлиентСервер.ДанныеУчастникаДляОпределенияДублей().
//  ПорядокЭтапов    - Массив - Порядок этапов участников.
//  ВернутьВсеСовпадения - Булево - Возвращать в списке дублей все совпадения.
//
// Возвращаемое значение:
//  Массив - Идентификаторы строк дублей участников.
//
Функция ДублиУчастников(ДанныеУчастников, ПорядокЭтапов, ВернутьВсеСовпадения = Ложь) Экспорт
	
	// Разделяем участников по группам.
	ДанныеУчастниковПоГруппам = Новый Соответствие;
	Для Каждого ДанныеУчастника Из ДанныеУчастников Цикл
		
		ДанныеУчастниковГруппы = ДанныеУчастниковПоГруппам[ДанныеУчастника.ИдентификаторГруппы];
		Если ДанныеУчастниковГруппы = Неопределено Тогда
			ДанныеУчастниковПоГруппам[ДанныеУчастника.ИдентификаторГруппы] = Новый Массив;
			ДанныеУчастниковГруппы = ДанныеУчастниковПоГруппам[ДанныеУчастника.ИдентификаторГруппы];
		КонецЕсли;
		
		ДанныеУчастниковГруппы.Добавить(ДанныеУчастника);
		
	КонецЦикла;
	
	// В каждой группе определяем участников, которых следует удалить.
	ИдентификаторыСтрокДублей = Новый Массив;
	Для Каждого КлючИЗначение Из ДанныеУчастниковПоГруппам Цикл
		
		ИдентификаторГруппы = КлючИЗначение.Ключ;
		ДанныеУчастниковГруппы = КлючИЗначение.Значение;
		
		// Собираем дополнительные данные об использовании участников.
		ДанныеИспользованияУчастников = Новый Соответствие;
		Для Каждого ДанныеУчастникаГруппы Из ДанныеУчастниковГруппы Цикл
		
			ДанныеИспользованияУчастника 
				= ДанныеИспользованияУчастников[ДанныеУчастникаГруппы.РазвернутыйУчастник];
			Если ДанныеИспользованияУчастника = Неопределено Тогда
				ДанныеИспользованияУчастников[ДанныеУчастникаГруппы.РазвернутыйУчастник] 
					= Новый Структура("ЧислоПовторений, МаксимальныйПриоритет",
					0, 0, Ложь, Ложь, Ложь);
				ДанныеИспользованияУчастника 
					= ДанныеИспользованияУчастников[ДанныеУчастникаГруппы.РазвернутыйУчастник];
			КонецЕсли;
			
			ПриоритетУчастника = ПриоритетУчастникаДляУдаленияДублей(
				ДанныеУчастникаГруппы.НеразвернутыйУчастник);
			
			ДанныеИспользованияУчастника.ЧислоПовторений = ДанныеИспользованияУчастника.ЧислоПовторений
				+ 1;
			ДанныеИспользованияУчастника.МаксимальныйПриоритет = Макс(
				ДанныеИспользованияУчастника.МаксимальныйПриоритет, ПриоритетУчастника);
			
		КонецЦикла;
		
		// Определяем, каких участников следует удалить, а каких оставить.
		УникальныеУчастникиМеждуГруппами = Новый Соответствие;
		Для Каждого ДанныеУчастникаГруппы Из ДанныеУчастниковГруппы Цикл
			
			СоставнойИдентификатор = СоставнойИдентификаторУчастника(ДанныеУчастникаГруппы);
			
			ПриоритетУчастника = ПриоритетУчастникаДляУдаленияДублей(
				ДанныеУчастникаГруппы.НеразвернутыйУчастник);
			
			ДанныеИспользованияУчастника 
				= ДанныеИспользованияУчастников[ДанныеУчастникаГруппы.РазвернутыйУчастник];
			
			Если УникальныеУчастникиМеждуГруппами[СоставнойИдентификатор] <> Неопределено Тогда
				
				ЕстьДубль = (Не ДанныеУчастникаГруппы.Защищенный
					Или ДанныеУчастникаГруппы.Защищенный И Не УникальныеУчастникиМеждуГруппами[СоставнойИдентификатор]);
				
				Если ДанныеУчастникаГруппы.Защищенный = Истина
					И УникальныеУчастникиМеждуГруппами[СоставнойИдентификатор] = Ложь Тогда
					
					УникальныеУчастникиМеждуГруппами[СоставнойИдентификатор] = Истина;
				КонецЕсли;
				
				// Участник уже есть, этот является дублем - этого участника удаляем.
				Если ЕстьДубль Тогда
					ИдентификаторыСтрокДублей.Добавить(
						ДанныеУчастникаГруппы.ИдентификаторСтрокиУчастника);
				КонецЕсли;
				
			Иначе
				
				// Такого участника ещё нет - оставим его.
				УникальныеУчастникиМеждуГруппами.Вставить(СоставнойИдентификатор, ДанныеУчастникаГруппы.Защищенный);
				
				Если ВернутьВсеСовпадения И ДанныеИспользованияУчастника.ЧислоПовторений > 1 Тогда
					ИдентификаторыСтрокДублей.Добавить(
						ДанныеУчастникаГруппы.ИдентификаторСтрокиУчастника);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Если задан порядок этапов - группы считаем этапами, 
	// задействуем логику удаления дублей между этапами.
	Если ПорядокЭтапов.Количество() <> 0 Тогда
		
		// Из участников ранних этапов удаляем участников поздних этапов, с учетом иерархии.
		КоличествоЭтапов = ПорядокЭтапов.Количество();
		УникальныеУчастникиМеждуГруппами = Новый Соответствие;
		Для Индекс = 1 По КоличествоЭтапов Цикл
			
			ИдентификаторГруппы = ПорядокЭтапов[КоличествоЭтапов - Индекс];
			ДанныеУчастниковГруппы = ДанныеУчастниковПоГруппам[ИдентификаторГруппы];
			Если ДанныеУчастниковГруппы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Определяем, каких участников следует удалить, а каких оставить.
			Для Каждого ДанныеУчастникаГруппы Из ДанныеУчастниковГруппы Цикл
				
				СоставнойИдентификатор = СоставнойИдентификаторУчастника(ДанныеУчастникаГруппы);
				
				// Определяем, использован ли участник уже в другой группе.
				ИдентификаторИспользованнойГруппы 
					= УникальныеУчастникиМеждуГруппами[СоставнойИдентификатор];
				Если ИдентификаторИспользованнойГруппы <> Неопределено Тогда
					УчастникИспользованВДругойГруппе = (ИдентификаторИспользованнойГруппы
						<> ИдентификаторГруппы);
				Иначе
					УчастникИспользованВДругойГруппе = Ложь;
				КонецЕсли;
				
				Если УчастникИспользованВДругойГруппе И Не ДанныеУчастникаГруппы.Защищенный Тогда
					
					// Участник уже есть в другой группе, этот является дублем - этого участника удаляем.
					ИдентификаторыСтрокДублей.Добавить(
						ДанныеУчастникаГруппы.ИдентификаторСтрокиУчастника);
					
				Иначе
					
					// Такого участника ещё нет - оставим его.
					УникальныеУчастникиМеждуГруппами.Вставить(СоставнойИдентификатор,
						ИдентификаторГруппы);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИдентификаторыСтрокДублей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
		ИдентификаторыСтрокДублей);
	
	Возврат ИдентификаторыСтрокДублей;
	
КонецФункции

// Возвращает единственного исполнителя указанной роли или, если он не единственный, саму роль.
//
// Параметры:
//  Участник - Строка,
//             СправочникСсылка.Сотрудники,
//             СправочникСсылка.РабочиеГруппы,
//             СправочникСсылка.ПолныеРоли,
//             СправочникСсылка.Пользователи,
//             СправочникСсылка.ВидыПодразделений,
//             СправочникСсылка.СтруктураПредприятия - Участник.
// 
// Возвращаемое значение:
//  СправочникСсылка.Сотрудники,
//  СправочникСсылка.РабочиеГруппы,
//  СправочникСсылка.ПолныеРоли,
//  СправочникСсылка.Пользователи,
//  СправочникСсылка.ВидыПодразделений,
//  СправочникСсылка.СтруктураПредприятия - Развернутый участник.
//
Функция ЕдинственныйИсполнительРоли(Участник) Экспорт

	РазвернутыйУчастник = Участник;
	Если ТипЗнч(Участник) <> Тип("СправочникСсылка.ПолныеРоли") Тогда
		Возврат РазвернутыйУчастник;
	КонецЕсли;

	РазвернутыеУчастники = РазвернутыеУчастники(
		Участник, 
		Неопределено, // Предмет
		Ложь,   //ДляПроверки
		Ложь); //МожноВозвращатьПустойМассив
		
	Если РазвернутыеУчастники.Количество() <> 1 Тогда
		Возврат РазвернутыйУчастник;
	КонецЕсли;

	РазвернутыйУчастник = РазвернутыеУчастники[0];

	Возврат РазвернутыйУчастник;

КонецФункции

// Помечает дубли участников подписью "(Будет удален автоматически как дубль)".
//
// Параметры:
//  ДанныеУчастников       - Массив - Массив данных участников. См. ДействияКлиентСервер.ДанныеУчастникаДляПометкиДублей().
//  ИмяРеквизитаДляПометки - Строка - Имя реквизита, в который будет добавлена пометка в строках участников.
//  ПорядокЭтапов          - Массив - Порядок этапов участников.
//
Процедура ПометитьДублиУчастников(ДанныеУчастников, ИмяРеквизитаПометки,
	ПорядокЭтапов = Неопределено) Экспорт

	Если ПорядокЭтапов = Неопределено Тогда
		ПорядокЭтапов = Новый Массив;
	КонецЕсли;
	
	// Формируем данные для определения дублей.
	ПараметрыДляПометкиДублейУчастников = ДействияКлиентСервер.ПараметрыДляПометкиДублейУчастников(
		ДанныеУчастников);
	ДанныеУчастниковДляОпределенияДублей = ПараметрыДляПометкиДублейУчастников.ДанныеУчастниковДляОпределенияДублей;
	ИдентификаторыСтрокУчастников = ПараметрыДляПометкиДублейУчастников.ИдентификаторыСтрокУчастников;
	
	// Определяем дубли участников.
	ИдентификаторыСтрокДублей = ДублиУчастников(ДанныеУчастниковДляОпределенияДублей,
		ПорядокЭтапов);
	
	// Помечаем дубли.
	ДействияКлиентСервер.ПометитьДублиУчастников(
		ДанныеУчастников, ИмяРеквизитаПометки, ИдентификаторыСтрокУчастников,
		ИдентификаторыСтрокДублей);

КонецПроцедуры

// Возвращает таблицу всех участников действия
// 
// Параметры:
// 	Действие - ОпределяемыйТип.Действия - ссылка на действие.
// 	
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание
// * Участник 
// * Идентификатор 
// * Срок 
// * СрокДни 
// * СрокМинуты 
// * СрокЧасы 
// * Функция 
// * Этап 
// * ВышестоящийУчастник 
// * НаименованиеЗадачи 
// * Описание 
Функция УчастникиДействия(Действие) Экспорт

	МенеджерДействия = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Действие);
	Участники = МенеджерДействия.УчастникиДействия(Действие);
	Возврат Участники;

КонецФункции	

// Возвращает таблицу ВСЕХ (включая проверяющих) участников действия
// 
// Параметры:
// 	Действие - ОпределяемыйТип.Действия - ссылка на действие.
// 	
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * Участник 
// * Идентификатор 
// * Срок 
// * СрокДни 
// * СрокМинуты 
// * СрокЧасы 
// * Функция 
// * Этап 
// * ВышестоящийУчастник 
// * НаименованиеЗадачи 
// * Описание 
Функция ВсеУчастникиДействия(Действие) Экспорт

	МенеджерДействия = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Действие);
	Участники = МенеджерДействия.ВсеУчастникиДействия(Действие);
	Возврат Участники;

КонецФункции	

// Производит разыменование Автора действия.
//
// Параметры:
//  ДействиеОбъект - ОпределяемыйТип.ДействияОбъект - заполняемое действие.
//  ПредметОбъект  - ОпределяемыйТип.ПредметДействия - Предмет, для которого работает заполнение автора действия.
//
Процедура РазыменоватьАвтора(ДействиеОбъект, ПредметОбъект) Экспорт

	Если ТипЗнч(ДействиеОбъект.Автор) = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов") Тогда
		
		Попытка
			ЗначениеАвтоподстановки = ШаблоныДокументов.ПолучитьЗначениеАвтоподстановки(
				ДействиеОбъект.Автор, ПредметОбъект);
		Исключение
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Не удалось разыменовать автоподстановку ""%1"" Автора действия ""%2"" по причине:'"),
				ДействиеОбъект.Автор, ДействиеОбъект.ВидДействия)
				+ Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
		// Если автоподстановка возвратила массив -- тогда берем только первого из разыменования
		Если ТипЗнч(ЗначениеАвтоподстановки) = Тип("Массив") Тогда
			Если ЗначениеАвтоподстановки.Количество() > 0 Тогда
				ЗначениеАвтоподстановки = ЗначениеАвтоподстановки[0];
			Иначе
				ЗначениеАвтоподстановки = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеАвтоподстановки) = Тип("Структура") Тогда
			Если ЗначениеАвтоподстановки.Свойство("РольИсполнителя") Тогда
				ЗначениеАвтоподстановки = ЗначениеАвтоподстановки.РольИсполнителя;
			ИначеЕсли ЗначениеАвтоподстановки.Свойство("Исполнитель") Тогда
				ЗначениеАвтоподстановки = ЗначениеАвтоподстановки.Исполнитель;
			Иначе
				ЗначениеАвтоподстановки = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			Исполнители = РегистрыСведений.ИсполнителиРолей.ИсполнителиРолей(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗначениеАвтоподстановки), Истина);
			Исполнители = Исполнители[ЗначениеАвтоподстановки];
			
			Если ТипЗнч(Исполнители) = Тип("Массив") И Исполнители.Количество() > 0 Тогда
				ЗначениеАвтоподстановки = Исполнители[0];
			Иначе
				ЗначениеАвтоподстановки = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		РазыменованныйАвтор = Неопределено;
		
		Если ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.Сотрудники") Тогда
			РазыменованныйАвтор = ЗначениеАвтоподстановки;
		ИначеЕсли ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.Пользователи") Тогда
			РазыменованныйАвтор = Сотрудники.ОсновнойСотрудникПользователя(ЗначениеАвтоподстановки);
		ИначеЕсли ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.ФактическиеИсполнители") Тогда
			РазыменованныйАвтор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеАвтоподстановки, "Факт");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(РазыменованныйАвтор) Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Не удалось разыменовать автоподстановку ""%1"" Автора действия ""%2"" до конкретного сотрудника.
					|Проверьте автоподстановку Автора действия, либо укажите конкретного сотрудника в качестве Автора.'"),
				ДействиеОбъект.Автор, ДействиеОбъект.ВидДействия);
		КонецЕсли;
		
		ДобавитьИсточник(
			ДействиеОбъект, "Автор", Неопределено, ДействиеОбъект.Автор, РазыменованныйАвтор);
		ДействиеОбъект.Автор = РазыменованныйАвтор;
	КонецЕсли;

КонецПроцедуры

// Добавляет разыменованных участников действия в таблицу Источники.
//
// Параметры:
//  ДействиеОбъект      - ОпределяемыйТип.ДействияОбъект - заполняемое действие.
//  ПутьКДанным         - Строка - строковое представление заполняемой действия.
//  Идентификатор       - УникальныйИдентификатор - идентификатор участника действия.
//  Источник            - Ссылка - разворачиваемый Участник действия.
//  ИсточникРазвернутый - Ссылка - развернутый Участник действия.
//
Процедура ДобавитьИсточник(ДействиеОбъект, ПутьКДанным, Идентификатор, Источник,
	ИсточникРазвернутый = Неопределено) Экспорт

	НовыйИсточник = ДействиеОбъект.Источники.Добавить();
	НовыйИсточник.ПутьКДанным = ПутьКДанным;
	НовыйИсточник.Идентификатор = Идентификатор;
	НовыйИсточник.Источник = Источник;
	НовыйИсточник.ИсточникРазвернутый = ИсточникРазвернутый;

КонецПроцедуры

// Разыменует автоподстановку и вернет массив разыменованных участников
// 
// Параметры:
// 	УчастникДоРазыменования - СправочникСсылка.Сотрудники,
//  		СправочникСсылка.РабочиеГруппы,
//  		СправочникСсылка.ПолныеРоли,
//  		СправочникСсылка.Пользователи,
//  		СправочникСсылка.ВидыПодразделений,
//  		СправочникСсылка.СтруктураПредприятия - участник действия.
// 	ПредметОбъект - ОпределяемыйТип.ПредметДействия - предмет действия.
// 	ФункцияУчастника - ОпределяемыйТип.ФункцииУчастниковДействий
// 	ФункцияОбрабатывающийРезультат - ОпределяемыйТип.ФункцииУчастниковДействий
// 	Расширенный - Булево - Расширенный режим автоподстановки, помимо ссылки может быть возвращена
// 	                       строка с дополнительным значениями.
//  ФункцияОбеспечитьПодписание - ОпределяемыйТип.ФункцииУчастниковДействий
// 	
// Возвращаемое значение:
// 	Массив - разыменованных участников
//
Функция РазыменоватьАвтоподстановку(УчастникДоРазыменования, ПредметОбъект,
	ФункцияУчастника, ФункцияОбрабатывающийРезультат, Расширенный,
	ФункцияОбеспечитьПодписание = Неопределено) Экспорт

	ДанныеРазыменования = Новый Массив;

	ЗначенияАвтоподстановок = ШаблоныДокументов.ПолучитьЗначениеАвтоподстановки(
		УчастникДоРазыменования,
		ПредметОбъект,
		Расширенный);

	Если ТипЗнч(ЗначенияАвтоподстановок) <> Тип("Массив") И ТипЗнч(ЗначенияАвтоподстановок) <> Тип(
		"ТаблицаЗначений") Тогда
		ЗначенияАвтоподстановок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
			ЗначенияАвтоподстановок);
	КонецЕсли;

	Для Каждого ЗначениеАвтоподстановки Из ЗначенияАвтоподстановок Цикл

		Если (ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.Пользователи") 
			Или ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.Сотрудники") 
			Или ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.ПолныеРоли")
			Или ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.ФактическиеИсполнители")) Тогда
			
			// Для обрабатывающего результат берем только первого исполнителя 
			Если (ФункцияУчастника = ФункцияОбрабатывающийРезультат
				Или (ЗначениеЗаполнено(ФункцияУчастника) И (ФункцияУчастника = ФункцияОбеспечитьПодписание)))
				И ДанныеРазыменования.Количество() <> 0 Тогда
				Продолжить;
			КонецЕсли;

			Если ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.Пользователи") Тогда
				ЗначениеАвтоподстановки = Сотрудники.ОсновнойСотрудникПользователя(
					ЗначениеАвтоподстановки);
			КонецЕсли;
			
			Если ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.ФактическиеИсполнители") Тогда
				ЗначениеАвтоподстановки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеАвтоподстановки, "Факт");
			КонецЕсли;

			ДанныеРазыменования.Добавить(ЗначениеАвтоподстановки);

		ИначеЕсли ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда

			ВызватьИсключение НСтр(
				"ru = 'Недопустимый тип для автоподстановки. СправочникСсылка.СтруктураПредприятия'");

		ИначеЕсли ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.РабочиеГруппы")
			Или ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.ПроектыКонтейнеры")
			Или ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.ПодразделенияКонтейнеры") Тогда

			СтрокиСотрудники = РегистрыСведений.СотрудникиВКонтейнерах.СотрудникиВКонтейнере(
				ЗначениеАвтоподстановки);
			Для Каждого Сотрудник Из СтрокиСотрудники Цикл
				// Для обрабатывающего результат берем только первого исполнителя
				Если (ФункцияУчастника = ФункцияОбрабатывающийРезультат
					Или ФункцияУчастника = ФункцияОбеспечитьПодписание)
					И ДанныеРазыменования.Количество() <> 0 Тогда
					Продолжить;
				КонецЕсли;

				ДанныеРазыменования.Добавить(Сотрудник);

			КонецЦикла;

		ИначеЕсли ТипЗнч(ЗначениеАвтоподстановки) = Тип("Структура") Тогда
			// Для обрабатывающего результат берем только первого исполнителя
			Если (ФункцияУчастника = ФункцияОбрабатывающийРезультат
				Или ФункцияУчастника = ФункцияОбеспечитьПодписание)
				И ДанныеРазыменования.Количество() <> 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если Расширенный Тогда
				ДанныеРазыменования.Добавить(ЗначениеАвтоподстановки);
			ИначеЕсли ЗначениеАвтоподстановки.Свойство("РольИсполнителя") Тогда
				ДанныеРазыменования.Добавить(ЗначениеАвтоподстановки.РольИсполнителя);
			Иначе
				ДанныеРазыменования.Добавить(ЗначениеАвтоподстановки.Исполнитель);
			КонецЕсли;

		ИначеЕсли ТипЗнч(ЗначениеАвтоподстановки) = Тип("СтрокаТаблицыЗначений") Тогда
			// Для обрабатывающего результат берем только первого исполнителя
			Если (ФункцияУчастника = ФункцияОбрабатывающийРезультат
				Или ФункцияУчастника = ФункцияОбеспечитьПодписание)
				И ДанныеРазыменования.Количество() <> 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеРазыменования.Добавить(ЗначениеАвтоподстановки.Исполнитель);

		КонецЕсли;

	КонецЦикла;
	
	ДанныеРазыменования = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДанныеРазыменования);
	
	КоличествоЭлементов = ДанныеРазыменования.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ОбратныйИндекс = КоличествоЭлементов - Индекс;
		ЭлементМассива = ДанныеРазыменования[ОбратныйИндекс];
		Если ТипЗнч(ЭлементМассива) = Тип("Структура") Или ЗначениеЗаполнено(ЭлементМассива) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеРазыменования.Удалить(ОбратныйИндекс);
		
	КонецЦикла;
	
	Возврат ДанныеРазыменования;

КонецФункции

// Вернет Истина если действие завершено с отрицательным результатом и есть замечания в статусе Отказать.
// 
// Параметры:
// 	ДействиеСогласования - СправочникСсылка.ДействияСогласования - ссылка на действие.
// 	
// Возвращаемое значение:
// 	Булево - Истина если действие завершено с отрицательным результатом и есть замечания в статусе Отказать.
//
Функция ДействиеЗавершеноОтрицательноИЕстьЗамечания(ДействиеСогласования) Экспорт
	
	Если Не ЗначениеЗаполнено(ДействиеСогласования) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	РезультатДействия = РегистрыСведений.РезультатыДействий.РезультатДействия(ДействиеСогласования);
	Если РезультатДействия = Перечисления.РезультатыСогласования.НеСогласовано Тогда
		МассивЗамечаний 
			= Справочники.ДействияСогласования.ЗамечанияВСтатусеОтказать(
			ДействиеСогласования);
		Возврат (МассивЗамечаний.Количество() <> 0);
	КонецЕсли;
		
	Возврат Ложь;
	
КонецФункции	

// Проверяет, есть ли в обработке объекта действия переданного типа
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма предмета обработки
// 	ТипДействия - ПеречислениеСсылка.ТипыДействий
// Возвращаемое значение:
// 	Булево - Признак наличия действий переданного типа
Функция ВОбработкеПредметаЕстьДействияТипа(Форма, ТипДействия) Экспорт
	
	Результат = Ложь;
	
	Для Каждого ЭлементДействия Из Форма.Действия.ПолучитьЭлементы() Цикл
		Если ЭлементДействия.ЭтоДействие И ЭлементДействия.ВидДействия.Тип = ТипДействия Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Подписанты предмета по функции обработки.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма предмета обработки
//  ФункцияУчастника - ПеречислениеСсылка.ФункцииУчастниковПодписания - Функция участника
// 
// Возвращаемое значение:
//  Структура:
//      * Подписанты - СписокЗначений - участники действий подписания.
//      * РазыменованныеПодписанты - СписокЗначений - разыменованные участники действий подписания.
Функция ПодписантыПредметаПоФункции(Форма, ФункцияУчастника) Экспорт
	
	РазыменованныеПодписанты = Новый СписокЗначений;
	Подписанты = Новый СписокЗначений;
	Для Каждого ЭлементДействия Из Форма.Действия.ПолучитьЭлементы() Цикл

		Если Не ЭлементДействия.ЭтоДействие 
			Или ТипЗнч(ЭлементДействия.Действие) <> Тип("СправочникСсылка.ДействияПодписания") Тогда
			Продолжить;
		КонецЕсли;
		
		Участники = ДействияКлиентСервер.ЭлементыУчастниковДействия(ЭлементДействия, Ложь, Истина);
		Для Каждого СтрокаУчастника Из Участники Цикл
			
			Если СтрокаУчастника.Функция <> ФункцияУчастника Тогда
				Продолжить;
			КонецЕсли; 
			
			Подписанты.Добавить(СтрокаУчастника.Участник);
			Если ТипЗнч(СтрокаУчастника.Участник) = Тип("СправочникСсылка.Сотрудники") Тогда
				РазыменованныеПодписанты.Добавить(СтрокаУчастника.Участник);
			ИначеЕсли ЗначениеЗаполнено(СтрокаУчастника.РазыменованныйПользователь)
				И ТипЗнч(СтрокаУчастника.РазыменованныйПользователь) = 
				Тип("СправочникСсылка.Сотрудники") Тогда
				РазыменованныеПодписанты.Добавить(СтрокаУчастника.РазыменованныйПользователь);
			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;
	
	Результат = Новый Структура("Подписанты, РазыменованныеПодписанты", 
		Подписанты, РазыменованныеПодписанты);
	Возврат Результат;
	
КонецФункции

// Устанавливает форме признак Только просмотр, если у по действию нет разрешения на изменение.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма вида документа.
// 	Разрешения - ТаблицаЗначений - таблица разрешений
//
Процедура УстановитьДоступностьИзмененияУчастников(Форма, Разрешения) Экспорт
	
	Если Форма.ТолькоПросмотр = Истина Тогда
		Возврат;
	КонецЕсли;
	
	РазрешениеОбщее = Неопределено;
	Если Разрешения.Количество() > 0 Тогда
		РазрешениеОбщее = Разрешения[0].Разрешение;
	КонецЕсли;
	
	Форма.ТолькоПросмотр = (Форма.ТолькоПросмотр
		Или РазрешениеОбщее = ПредопределенноеЗначение("Перечисление.ВариантыДоступностиИзмененияДействий.Запрещено"))
		И Не Форма.МожноТолькоДобавлятьУчастников;
	
	Форма.Элементы.ГруппаОписаниеОтложенногоВыполнения.Доступность = Не Форма.ТолькоПросмотр;
	
КонецПроцедуры

// Устанавливает видимость колонки "Условие", если в действии есть участники с условиями.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма действия.
//
Процедура УстановитьВидимостьУсловийУчастников(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы; 
	ЕстьУсловия = Ложь;
	Если Объект.МоментРазыменованияУчастников <> Перечисления.МоментыРазыменованияУчастниковДействий.ПриСозданииДействия Тогда
		Для Каждого СтрУчастник Из Объект.Участники Цикл
			Если ЗначениеЗаполнено(СтрУчастник.Условие) Тогда
				ЕстьУсловия = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Элементы.УчастникиУсловиеПредставление.Видимость = ЕстьУсловия;
	
КонецПроцедуры

// Вернет, подписан ли документ ПЭП (все ДействиеПодписания в состоянии Подписан и вариант подписания Электронная).
// Если предмет не может быть предметом действия, то вернёт Ложь.
// 
// Параметры:
// 	Предмет - ОпределяемыйТип.ПредметДействия.
// 	
// Возвращаемое значение:
//  Булево - Предмет подписан.
// 	
Функция ДокументПодписан(Предмет) Экспорт
	
	Если Не Метаданные.ОпределяемыеТипы.ПредметДействия.Тип.СодержитТип(ТипЗнч(Предмет)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВидОбъекта = ВидОбъекта(Предмет);

	ОбработкаОбъекта = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(Предмет);
	ДатаОбработки = Дата(1, 1, 1);
	Если ЗначениеЗаполнено(ОбработкаОбъекта) Тогда
		КэшДокументыПредприятияФормаЭлемента =
			КэшиНаВремяВызоваПовтИсп.КэшДокументыПредприятияФормаЭлемента();
		Если КэшДокументыПредприятияФормаЭлемента.Инициализирован
			И КэшДокументыПредприятияФормаЭлемента.КэшДокумента.Ссылка = Предмет Тогда
			ДатаОбработки = КэшДокументыПредприятияФормаЭлемента.КэшОбработки.ДатаСоздания;
		Иначе
			ДатаОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбработкаОбъекта, "ДатаСоздания");
		КонецЕсли;

	КонецЕсли;

	Если Не ЗначениеЗаполнено(ДатаОбработки) Тогда
		ДатаОбработки = ТекущаяДатаСеанса();
	КонецЕсли;

	ДействияПредмета = ТекущиеДействияПредмета(Предмет, ВидОбъекта, ДатаОбработки).Выбрать();

	ЕстьПодписания = Ложь; 
	
	ЕстьУчастникиБезРезультата = Ложь;
	ЕстьУчастникиСОтрицательнымРезультатом = Ложь;
	ЕстьУчастникиСПоложительнымРезультатом = Ложь;
	
	Пока ДействияПредмета.Следующий() Цикл
		
		Если ТипЗнч(ДействияПредмета.Действие) = Тип("СправочникСсылка.ДействияПодписания") Тогда
			
			СпособПодписания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ДействияПредмета.Действие, "СпособПодписания");
				
			Если СпособПодписания = Перечисления.СпособыПодписанияПредметаДействия.ПЭП Тогда
			
				ЕстьПодписания = Истина;
				
				РезультатДействия 
					= РегистрыСведений.РезультатыДействий.РезультатДействия(ДействияПредмета.Действие);
					
				СостояниеДействия = РегистрыСведений.СостоянияДействий.СостояниеДействия(ДействияПредмета.Действие);	
					
				Если СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Выполняется
					Или СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено Тогда
						
					// получаем результат всех участников действия
					Действие = ДействияПредмета.Действие;	
					МенеджерДействия = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Действие);
					Участники = МенеджерДействия.УчастникиДействияПодписывающие(Действие);
					
					Для Каждого Стр Из Участники Цикл
						
						Если ЗначениеЗаполнено(Стр.Участник) Тогда
							ДанныеПодписанта = РегистрыСведений.РезультатыДействий.РезультатУчастникаДействия(
								Действие, Стр.Идентификатор);
								
							Если Не ЗначениеЗаполнено(ДанныеПодписанта)	Тогда
								ЕстьУчастникиБезРезультата = Истина;
							Иначе	
								
								Если Не ЗначениеЗаполнено(ДанныеПодписанта.Результат) Тогда
									ЕстьУчастникиБезРезультата = Истина;
								КонецЕсли;
	
								Если ДанныеПодписанта.Результат = Перечисления.РезультатыПодписания.Подписано Тогда
									ЕстьУчастникиСПоложительнымРезультатом = Истина;
								КонецЕсли;
	
								Если ДанныеПодписанта.Результат = Перечисления.РезультатыПодписания.НеПодписано Тогда
									ЕстьУчастникиСОтрицательнымРезультатом = Истина;
								КонецЕсли;
									
							КонецЕсли;		
								
						КонецЕсли;		
							
					КонецЦикла;
							
				КонецЕсли;		
	
			КонецЕсли;		
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат (ЕстьПодписания И ЕстьУчастникиСПоложительнымРезультатом 
		И Не ЕстьУчастникиБезРезультата И Не ЕстьУчастникиСОтрицательнымРезультатом);
	
КонецФункции

// Вернет массив данных подписей (из действий подписания)
// 
// Параметры:
// 	Предмет - ОпределяемыйТип.ПредметДействия.
// 	
// Возвращаемое значение:
// Массив из Структура
//  *Подписант - СправочникССылка.Сотрудники
//  *Дата - Дата
// 	
Функция ДанныеПодписантовПЭП(Предмет) Экспорт
	
	МассивВозврата = Новый Массив;
	
	ВидПредмета = ВидОбъекта(Предмет);

	ОбработкаОбъекта = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(Предмет);
	ДатаОбработки = Дата(1, 1, 1);
	Если ЗначениеЗаполнено(ОбработкаОбъекта) Тогда
		ДатаОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбработкаОбъекта, "ДатаСоздания");
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ДатаОбработки) Тогда
		ДатаОбработки = ТекущаяДатаСеанса();
	КонецЕсли;

	ДействияПредмета = ТекущиеДействияПредмета(Предмет, ВидПредмета, ДатаОбработки).Выбрать();

	Пока ДействияПредмета.Следующий() Цикл
		
		Действие = ДействияПредмета.Действие;
		
		Если ТипЗнч(ДействияПредмета.Действие) = Тип("СправочникСсылка.ДействияПодписания") Тогда
			
			СпособПодписания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "СпособПодписания");
			Если СпособПодписания <> Перечисления.СпособыПодписанияПредметаДействия.ПЭП Тогда
				Продолжить;
			КонецЕсли;	
			
			РезультатДействия 
				= РегистрыСведений.РезультатыДействий.РезультатДействия(ДействияПредмета.Действие);
			Если РезультатДействия = Перечисления.РезультатыПодписания.Подписано Тогда
				
				МенеджерДействия = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Действие);
				Участники = МенеджерДействия.УчастникиДействияПодписывающие(Действие);
				
				СведенияОбУчастниках = РегистрыСведений.СведенияОбУчастникахДействий.ПолучитьСведенияОбУчастникахДействия(Действие);
				
				Для Каждого Стр Из Участники Цикл
					
					Если ЗначениеЗаполнено(Стр.Участник) Тогда
						ДанныеПодписанта = РегистрыСведений.РезультатыДействий.РезультатУчастникаДействия(
							Действие, Стр.Идентификатор);
							
						Если ДанныеПодписанта <> Неопределено Тогда
							Если ДанныеПодписанта.Результат = Перечисления.РезультатыПодписания.Подписано Тогда
								
								СведенияНайденные = СведенияОбУчастниках[Стр.Идентификатор];
								Если СведенияНайденные <> Неопределено Тогда
									ФактическийИсполнитель = СведенияНайденные.ФактическийИсполнитель;
								Иначе
									ФактическийИсполнитель = Стр.Участник;
								КонецЕсли;	
								
								Если ТипЗнч(ФактическийИсполнитель) = Тип("СправочникСсылка.ФактическиеИсполнители") Тогда
									ФактическийИсполнитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФактическийИсполнитель, "Факт");
								КонецЕсли;	
								
								Должность = "";
								Если ТипЗнч(ФактическийИсполнитель) = Тип("СправочникСсылка.Сотрудники") Тогда
									Должность = Сотрудники.ДолжностьСотрудника(ФактическийИсполнитель);
								КонецЕсли;
								
								ДанныеПодписи = Новый Структура("Подписант, Дата, Должность", 
									ФактическийИсполнитель, ДанныеПодписанта.Дата, Должность);
								МассивВозврата.Добавить(ДанныеПодписи);
							КонецЕсли;
						КонецЕсли;		
							
					КонецЕсли;	
					
				КонецЦикла;	 
				
			КонецЕсли;		
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат МассивВозврата;
	
КонецФункции

// Возвращает массив всех подписантов документа
// 
// Параметры:
//  Предмет - ОпределяемыйТип.ПредметДействия.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Сотрудники - Все подписанты по документу
//
Функция ВсеПодписывающиеПоДокументу(Предмет) Экспорт
	
	МассивВозврата = Новый Массив;
	
	ВидОбъекта = ВидОбъекта(Предмет);

	ОбработкаОбъекта = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(Предмет);
	ДатаОбработки = Дата(1, 1, 1);
	Если ЗначениеЗаполнено(ОбработкаОбъекта) Тогда
		ДатаОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбработкаОбъекта, "ДатаСоздания");
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ДатаОбработки) Тогда
		ДатаОбработки = ТекущаяДатаСеанса();
	КонецЕсли;

	ДействияПредмета = ТекущиеДействияПредмета(Предмет, ВидОбъекта, ДатаОбработки).Выбрать();

	Пока ДействияПредмета.Следующий() Цикл
		
		Действие = ДействияПредмета.Действие;
		Если ТипЗнч(ДействияПредмета.Действие) = Тип("СправочникСсылка.ДействияПодписания") Тогда
		
			МенеджерДействия = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Действие);
			Участники = МенеджерДействия.УчастникиДействияПодписывающие(Действие);
			
			Для Каждого Стр Из Участники Цикл
				Если ЗначениеЗаполнено(Стр.Участник)
					И МассивВозврата.Найти(Стр.Участник) = Неопределено Тогда
					МассивВозврата.Добавить(Стр.Участник);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

// Возвращает все существующие виды действий
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.ВидыДействий
//
Функция ВсеВидыДействий() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидыДействий.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыДействий КАК ВидыДействий
		|ГДЕ
		|	НЕ ВидыДействий.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыДействий.Тип,
		|	ВидыДействий.Наименование");
	
	ВсеВидыДействий = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат ВсеВидыДействий;
	
КонецФункции

// Действующие типы действий по виду объекта.
// 
// Параметры:
//  ВидОбъекта - ОпределяемыйТип.ВидОбъектаСОбработкой
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение -  Действующие типы действий по виду объекта:
//   * Ключ - СправочникСсылка.ВидыДействий
//   * Значение - Структура:
//    ** Тип - ПеречислениеСсылка.ТипыДействий
//
Функция ДействующиеТипыДействийПоВидуОбъекта(ВидОбъекта) Экспорт
	
	ВидыДействий = ДействующиеВидыДействийПоВидамОбъектов(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидОбъекта));
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВидыДействий, "Тип");
	
КонецФункции

// Действующие виды действий по видам объектов.
// 
// Параметры:
//  ВидыОбъектов - Массив из ОпределяемыйТип.ВидОбъектаСОбработкой.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.ВидыДействий - Ссылки на все действующие виды действий по переданным
//		видам документов
Функция ДействующиеВидыДействийПоВидамОбъектов(ВидыОбъектов) Экспорт
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НастройкиОбработкиВидовОбъектов.ВидОбъекта КАК ВидОбъекта,
		|	КОЛИЧЕСТВО(ВидыДействийНастройки.ВидДействия) КАК ВидДействияКоличество
		|ПОМЕСТИТЬ ВидыОбъектовСКоличествомДействий
		|ИЗ
		|	Справочник.НастройкиОбработкиВидовОбъектов КАК НастройкиОбработкиВидовОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиОбработкиВидовОбъектов.ВидыДействий КАК ВидыДействийНастройки
		|		ПО НастройкиОбработкиВидовОбъектов.Ссылка = ВидыДействийНастройки.Ссылка
		|ГДЕ
		|	НастройкиОбработкиВидовОбъектов.ВидОбъекта В (&ВидыОбъектов)
		|	И НастройкиОбработкиВидовОбъектов.ПометкаУдаления = ЛОЖЬ
		|	И НЕ НастройкиОбработкиВидовОбъектов.ВидОбъекта.ПометкаУдаления
		|СГРУППИРОВАТЬ ПО
		|	НастройкиОбработкиВидовОбъектов.ВидОбъекта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВидыДействийНастройки.ВидДействия КАК ВидДействия,
		|	ВидыДействийНастройки.ВидДействия.Тип КАК ВидДействияТип
		|ИЗ
		|	Справочник.НастройкиОбработкиВидовОбъектов КАК НастройкиОбработкиВидовОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыОбъектовСКоличествомДействий КАК ВидыОбъектовСКоличествомДействий
		|		ПО ВЫБОР
		|			КОГДА ВидыОбъектовСКоличествомДействий.ВидДействияКоличество = 0
		|				ТОГДА НастройкиОбработкиВидовОбъектов.ВидОбъекта = ВидыОбъектовСКоличествомДействий.ВидОбъекта.Родитель
		|			ИНАЧЕ НастройкиОбработкиВидовОбъектов.ВидОбъекта = ВидыОбъектовСКоличествомДействий.ВидОбъекта
		|		КОНЕЦ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиОбработкиВидовОбъектов.ВидыДействий КАК ВидыДействийНастройки
		|		ПО НастройкиОбработкиВидовОбъектов.Ссылка = ВидыДействийНастройки.Ссылка
		|ГДЕ
		|	НастройкиОбработкиВидовОбъектов.ПометкаУдаления = ЛОЖЬ
		|	И (НастройкиОбработкиВидовОбъектов.ДействуетПо = ДАТАВРЕМЯ(1, 1, 1)
		|	ИЛИ НастройкиОбработкиВидовОбъектов.ДействуетПо >= &ТекущаяДата)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидДействияТип,
		|	ВидДействия");
		
	Запрос.УстановитьПараметр("ВидыОбъектов", ВидыОбъектов);
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидДействия");
	
	Возврат Результат;
	
КонецФункции

// Возвращает соответствие состояний видов действий.
// 
// Параметры:
//  ВидыДействий - Массив - Виды действий.
// 
// Возвращаемое значение:
//  Соответствие - Состояния видов действий. Ключ - вид действия, значение - состояния по виду.
Функция СостоянияДокументовВидовДействий(ВидыДействий) Экспорт
	
	СостоянияДокументовВидовДействий = Новый Соответствие;
	ТипыДействий = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидыДействий, "Тип");
	Для Каждого ВидДействия Из ВидыДействий Цикл
		ТипДействия = ТипыДействий[ВидДействия];
		СостоянияДокументовВидаДействия = СостоянияДокументовТипаДействия(ТипДействия);
		СостоянияДокументовВидовДействий.Вставить(ВидДействия, СостоянияДокументовВидаДействия);
	КонецЦикла;
	
	Возврат СостоянияДокументовВидовДействий;
	
КонецФункции

//Возвращает массив состояний типа действия.
//
// Параметры:
//  ТипДействия - ПеречислениеСсылка.ТипыДействий - Тип действия.
// 
// Возвращаемое значение:
//  Массив - Состояния типа действия.
//
Функция СостоянияДокументовТипаДействия(ТипДействия) Экспорт
	
	Если ТипДействия = Перечисления.ТипыДействий.Исполнение Тогда
		СостоянияДокументовТипаДействия = Перечисления.СостоянияДокументов.СостоянияИсполнения();
	ИначеЕсли ТипДействия = Перечисления.ТипыДействий.Ознакомление Тогда
		СостоянияДокументовТипаДействия = Перечисления.СостоянияДокументов.СостоянияОзнакомления();
	ИначеЕсли ТипДействия = Перечисления.ТипыДействий.Подписание Тогда
		СостоянияДокументовТипаДействия = Перечисления.СостоянияДокументов.СостоянияПодписания();
	ИначеЕсли ТипДействия = Перечисления.ТипыДействий.Регистрация Тогда
		СостоянияДокументовТипаДействия = Перечисления.СостоянияДокументов.СостоянияРегистрации();
	ИначеЕсли ТипДействия = Перечисления.ТипыДействий.Согласование Тогда
		СостоянияДокументовТипаДействия = Перечисления.СостоянияДокументов.СостоянияСогласования();
	ИначеЕсли ТипДействия = Перечисления.ТипыДействий.Утверждение Тогда
		СостоянияДокументовТипаДействия = Перечисления.СостоянияДокументов.СостоянияУтверждения();
	Иначе
		СостоянияДокументовТипаДействия = Новый Массив;
	КонецЕсли;
	
	Возврат СостоянияДокументовТипаДействия;
	
КонецФункции

// Устанавливает видимость команд управления обработкой.
// 
// Параметры:
//  Элементы - ВсеЭлементыФормы - Элементы формы вызова
//  ПараметрыВидаОбъекта - Структура - См. ДействияКлиентСервер.НовыйПараметрыВидаОбъекта().
//  СостояниеОбработки - ПеречислениеСсылка.СостоянияОбработкиОбъектов
//
Процедура УстановитьВидимостьКомандУправленияОбработкой(
	Объект, Элементы, ПараметрыВидаОбъекта, СостояниеОбработки) Экспорт	
	
	// Если для вида объекта заданы настройки и правила обработки, то кнопки добавления и удаления скрываем.
	// Показываем только кнопку "Заполнить"
	ОбработкаНеНачата = Не ЗначениеЗаполнено(СостояниеОбработки)
		Или СостояниеОбработки = Перечисления.СостоянияОбработкиОбъектов.Прервана;
	
	Если ДействияКлиентСервер.ОбработкаЗаданаПравилами(ПараметрыВидаОбъекта) Тогда
		Элементы.ДействияУдалить.Видимость = Ложь;
		Элементы.ДобавитьДействие.Видимость = Ложь;
		Элементы.ДействияЗаполнить.Видимость = Истина;
	Иначе
		Элементы.ДобавитьДействие.Видимость = ОбработкаНеНачата;
		Элементы.ДействияУдалить.Видимость = ОбработкаНеНачата;
		Элементы.ДействияЗаполнить.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ДействияКонтекстноеМенюДобавить.Видимость = Элементы.ДобавитьДействие.Видимость;
	Элементы.ДействияКонтекстноеМенюУдалить.Видимость = Элементы.ДействияУдалить.Видимость;
	
	Элементы.ДействияКонтекстноеМенюПерейтиКВыполнениюДействия.Видимость =
		ОбработкиОбъектов.ВозможностьПереходаКВыполнениюДействия(
			Объект, ПараметрыВидаОбъекта, СостояниеОбработки);
	
	РаботаСПроцессамиПоОбработкамОбъектовСобытия.ПриУстановкеВидимостиКомандУправленияОбработкой(
		Элементы, ПараметрыВидаОбъекта, СостояниеОбработки);
	
КонецПроцедуры

// Заполняет карточку Контроля по действию.
// 
// Параметры:
//  КонтрольнаяКарточка - СправочникОбъект.Контроль - заполняемый элемент Контроля.
//  Действие - ОпределяемыйТип.Действия - данные заполнения.
//
Процедура ЗаполнитьКонтрольнуюКарточкуПоДействию(КонтрольнаяКарточка, Действие) Экспорт
	
	Если Не ДействияКлиентСервер.ЭтоДействие(Действие) Тогда
		Возврат;
	КонецЕсли;
	
	КонтрольнаяКарточка.Предмет = Действие;
	
	ДействиеОбъект = Неопределено;
	ПредметОбъект = Неопределено;
	ДанныеДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие,
		"ВидДействия, Описание, Участники, Предмет");
	
	Контейнеры = Новый Массив;
	Участники = ДанныеДействия.Участники.Выбрать();
	Пока Участники.Следующий() Цикл
		Если РегистрыСведений.СотрудникиВКонтейнерах.ЭтоКонтейнер(Участники.Участник) Тогда
			Контейнеры.Добавить(Участники.Участник);
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеСотрудниковВКонтейнерах = Новый Соответствие;
	Если Контейнеры.Количество() <> 0 Тогда
		СоответствиеСотрудниковВКонтейнерах 
			= РегистрыСведений.СотрудникиВКонтейнерах.СотрудникиВКонтейнерах(Контейнеры);
	КонецЕсли;
	
	Участники = ДанныеДействия.Участники.Выгрузить();
	Участники.Сортировать("НомерСтроки Возр");
	Для Каждого СтрокаУчастник Из Участники Цикл
		Если Не ЗначениеЗаполнено(СтрокаУчастник.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаУчастник.Участник) = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов") Тогда
			Если ДействиеОбъект = Неопределено Или ПредметОбъект Тогда
				ДействиеОбъект = Действие.ПолучитьОбъект();
				ПредметОбъект = ДанныеДействия.Предмет.ПолучитьОбъект();
			КонецЕсли;
			
			ДанныеРазыменования = РазыменоватьАвтоподстановку(
				СтрокаУчастник.Участник,
				ПредметОбъект,
				СтрокаУчастник.ФункцияУчастника,
				Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат,
				Ложь);
				
			Для Каждого РазыменованныйУчастник Из ДанныеРазыменования Цикл
				НовыйИсполнитель = КонтрольнаяКарточка.Исполнители.Добавить();
				НовыйИсполнитель.Исполнитель = РазыменованныйУчастник;
				НовыйИсполнитель.Идентификатор = СтрокаУчастник.Идентификатор;
			КонецЦикла;	
			
		ИначеЕсли ТипЗнч(СтрокаУчастник.Участник) = Тип("СправочникСсылка.СтруктураПредприятия")
			Или ТипЗнч(СтрокаУчастник.Участник) = Тип("СправочникСсылка.РабочиеГруппы")
			Или ТипЗнч(СтрокаУчастник.Участник) = Тип("СправочникСсылка.ПроектыКонтейнеры")
			Или ТипЗнч(СтрокаУчастник.Участник) = Тип("СправочникСсылка.ПодразделенияКонтейнеры") Тогда
			
			СтрокиСотрудники = СоответствиеСотрудниковВКонтейнерах[СтрокаУчастник.Участник];
			
			Если СтрокиСотрудники <> Неопределено Тогда
				Для Каждого Сотрудник Из СтрокиСотрудники Цикл
					НовыйИсполнитель = КонтрольнаяКарточка.Исполнители.Добавить();
					НовыйИсполнитель.Исполнитель = Сотрудник;
					НовыйИсполнитель.Идентификатор = СтрокаУчастник.Идентификатор;
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			НовыйИсполнитель = КонтрольнаяКарточка.Исполнители.Добавить();
			НовыйИсполнитель.Исполнитель = СтрокаУчастник.Участник;
			НовыйИсполнитель.Идентификатор = СтрокаУчастник.Идентификатор;
		КонецЕсли;
	КонецЦикла;
	
	МассивОписания = Новый Массив();
	МассивОписания.Добавить(СтрШаблон(НСтр("ru = 'Контролировать: %1 (%2)'"),
		СокрЛП(ДанныеДействия.ВидДействия), СокрЛП(ДанныеДействия.Предмет)));
		
	Если ЗначениеЗаполнено(ДанныеДействия.Описание) Тогда
		МассивОписания.Добавить(Символы.ПС);
		МассивОписания.Добавить(Символы.ПС);
		МассивОписания.Добавить(ДанныеДействия.Описание);
	КонецЕсли;
	
	КонтрольнаяКарточка.Описание = СтрСоединить(МассивОписания);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Действие, "СрокДействия")
		И ЗначениеЗаполнено(Действие.СрокДействия) Тогда
		
		КонтрольнаяКарточка.СрокИсполнения = Действие.СрокДействия;
	Иначе
		Если ДействияКлиентСервер.ЭтоДействиеПодписания(Действие)
			Или ДействияКлиентСервер.ЭтоДействиеСогласования(Действие) Тогда
			//@skip-check wrong-string-literal-content
			Этапы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Этапы").Выгрузить();
			Если Этапы.Количество() Тогда
				Этапы.Сортировать("НомерСтроки Возр");
				КонтрольнаяКарточка.СрокИсполнения = СрокЭтапов(Этапы, Участники);
			Иначе
				КонтрольнаяКарточка.СрокИсполнения = СрокУчастников(Участники);
			КонецЕсли;
			
		Иначе
			КонтрольнаяКарточка.СрокИсполнения = СрокУчастников(Участники);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет карточку Контроля по действию.
// 
// Параметры:
//  КонтрольнаяКарточка - СправочникОбъект.Контроль - заполняемый элемент Контроля.
//  Действие - СправочникСсылка.ДействияОзнакомления
//
Процедура ЗаполнитьКонтрольнуюКарточкуПоДействиюОзнакомления(КонтрольнаяКарточка, Действие) Экспорт
	
	Если Не ДействияКлиентСервер.ЭтоДействие(Действие) Тогда
		Возврат;
	КонецЕсли;
	
	КонтрольнаяКарточка.Предмет = Действие;

	ДействиеОбъект = Неопределено;
	ПредметОбъект = Неопределено;
	ДанныеДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие, 
		"ВидДействия, Описание, Участники, Предмет");        
	
	ДатаОтсчетаСрока = ТекущаяДатаСеанса();
	ОсновнойГрафикРаботы = ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы();
	ПараметрыТочногоСрока = ПараметрыДлительностиТочногоСрока();
	МаксимальныйСрокИсполнения = Дата(1, 1, 1);
	СрокИсполнения = Дата(1, 1, 1);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДействиеЗадачи.Ссылка КАК Ссылка,
		|	ДействиеЗадачи.ИдентификаторВИсточнике КАК ИдентификаторВИсточнике
		|ИЗ
		|	Документ.ДействиеЗадачи КАК ДействиеЗадачи
		|ГДЕ
		|	ДействиеЗадачи.Источник = &Источник");
	
	Запрос.УстановитьПараметр("Источник", Действие);
	ДействияЗадачи = Запрос.Выполнить().Выгрузить();
	
	СостояниеДействия = РегистрыСведений.СостоянияДействий.СостояниеДействия(Действие);
	Если СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Выполняется Тогда
	
		УчастникиИДатыДействия = РегистрыСведений.УчастникиОзнакомлений.УчастникиИДатыДействия(Действие);
		
		Для Каждого СтрУчастник Из УчастникиИДатыДействия Цикл
			
			НовыйИсполнитель = КонтрольнаяКарточка.Исполнители.Добавить();
			НовыйИсполнитель.Исполнитель = СтрУчастник.Участник;
			НовыйИсполнитель.Идентификатор = СтрУчастник.ИдентификаторУчастника; 
			
			СтрДействия = ДействияЗадачи.Найти(СтрУчастник.ИдентификаторУчастника, "ИдентификаторВИсточнике");
			Если СтрДействия <> Неопределено Тогда
				НовыйИсполнитель.Источник = СтрДействия.Ссылка;
			КонецЕсли;	
			
			МаксимальныйСрокИсполнения = Макс(МаксимальныйСрокИсполнения, СтрУчастник.Срок);
			
		КонецЦикла;	  
		
		КонтрольнаяКарточка.СрокИсполнения = МаксимальныйСрокИсполнения;
		
	Иначе
		
		ДействиеОбъект = Действие.ПолучитьОбъект(); 
		ПредметОбъект = ДействиеОбъект.Предмет.ПолучитьОбъект();  
		
		УчастникиРазыменовка = ДействиеОбъект.Участники.Выгрузить(); // копии, чтобы не менять оригинал
		Источники = ДействиеОбъект.Источники.Выгрузить();
		Выгруженные = ДействиеОбъект.Участники.Выгрузить();
		
		РазыменоватьАвтора = Ложь;
		ДействиеОбъект.РазыменоватьРеализация(ПредметОбъект, УчастникиРазыменовка, Источники, Выгруженные, РазыменоватьАвтора);
		
		УчастникиРазыменовка.Колонки.Добавить("ФункцияУчастника");
		
		Для Каждого СтрУчастник Из УчастникиРазыменовка Цикл
			
			НовыйИсполнитель = КонтрольнаяКарточка.Исполнители.Добавить();
			НовыйИсполнитель.Исполнитель = СтрУчастник.Участник;
			НовыйИсполнитель.Идентификатор = СтрУчастник.Идентификатор; 
			
			СтрДействия = ДействияЗадачи.Найти(СтрУчастник.Идентификатор, "ИдентификаторВИсточнике");
			Если СтрДействия <> Неопределено Тогда
				НовыйИсполнитель.Источник = СтрДействия.Ссылка;
			КонецЕсли;	       
			
			СтрУчастник.ФункцияУчастника = Перечисления.ФункцииУчастниковОзнакомления.Ознакомляемый;
			
		КонецЦикла;	    
		
		КонтрольнаяКарточка.СрокИсполнения = СрокУчастников(УчастникиРазыменовка);
		
	КонецЕсли;
	
	МассивОписания = Новый Массив();
	МассивОписания.Добавить(СтрШаблон(НСтр("ru = 'Контролировать: %1 (%2)'"), 
		СокрЛП(ДанныеДействия.ВидДействия), СокрЛП(ДанныеДействия.Предмет)));
		
	Если ЗначениеЗаполнено(ДанныеДействия.Описание) Тогда
		МассивОписания.Добавить(Символы.ПС);
		МассивОписания.Добавить(Символы.ПС);
		МассивОписания.Добавить(ДанныеДействия.Описание); 
	КонецЕсли;
	
	КонтрольнаяКарточка.Описание = СтрСоединить(МассивОписания);
	
КонецПроцедуры

// Заполняет карточку Контроля по пункту действия.
// 
// Параметры:
//  КонтрольнаяКарточка - СправочникОбъект.Контроль - заполняемый элемент Контроля.
//  ДанныеПункта - Структура - параметры пунктам исполнения
//  	*Действие - СправочникСсылка.ДействияИсполнения - данные заполнения.
//  	*ИдентификаторПункта - УникальныйИдентификатор - ИД пункта.
//  	*Описание - Строка - описание пункта.
//
Процедура ЗаполнитьКонтрольнуюКарточкуПоПунктуИсполнения(КонтрольнаяКарточка, ДанныеПункта) Экспорт
	
	Действие = ДанныеПункта.Действие;
	ИдентификаторПункта = ДанныеПункта.ИдентификаторПункта;
	Если ТипЗнч(Действие) <> Тип("СправочникСсылка.ДействияИсполнения") Тогда
		Возврат;
	КонецЕсли;
	
	КонтрольнаяКарточка.Предмет = Действие;
	КонтрольнаяКарточка.ИдентификаторПункта = ДанныеПункта.ИдентификаторПункта;
	
	ДействиеОбъект = Неопределено;
	ПредметОбъект = Неопределено;
	ДанныеДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие, 
		"ВидДействия, Участники, Предмет");
	
	Контейнеры = Новый Массив;
	Участники = ДанныеДействия.Участники.Выбрать();
	Пока Участники.Следующий() Цикл
		Если Участники.ИдентификаторПункта <> ИдентификаторПункта Тогда
			Продолжить;
		КонецЕсли;
		
		Если РегистрыСведений.СотрудникиВКонтейнерах.ЭтоКонтейнер(Участники.Участник) Тогда
			Контейнеры.Добавить(Участники.Участник);
		КонецЕсли;
	КонецЦикла;
	
	СоответствиеСотрудниковВКонтейнерах = Новый Соответствие;
	Если Контейнеры.Количество() <> 0 Тогда
		СоответствиеСотрудниковВКонтейнерах 
			= РегистрыСведений.СотрудникиВКонтейнерах.СотрудникиВКонтейнерах(Контейнеры);
	КонецЕсли;
	
	Участники = ДанныеДействия.Участники.Выгрузить();
	Участники.Сортировать("НомерСтроки Возр");
	УчастникиПункта = Новый Массив;
	Для Каждого СтрокаУчастник Из Участники Цикл
		Если СтрокаУчастник.ИдентификаторПункта <> ИдентификаторПункта
			Или Не ЗначениеЗаполнено(СтрокаУчастник.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		УчастникиПункта.Добавить(СтрокаУчастник);
		
		Если ТипЗнч(СтрокаУчастник.Участник) = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов") Тогда
			Если ДействиеОбъект = Неопределено Или ПредметОбъект Тогда
				ДействиеОбъект = Действие.ПолучитьОбъект();
				ПредметОбъект = ДанныеДействия.Предмет.ПолучитьОбъект();
			КонецЕсли;
			
			ДанныеРазыменования = РазыменоватьАвтоподстановку(
				СтрокаУчастник.Участник,
				ПредметОбъект,
				СтрокаУчастник.ФункцияУчастника,
				Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат,
				Ложь);
				
			Для Каждого РазыменованныйУчастник Из ДанныеРазыменования Цикл
				НовыйИсполнитель = КонтрольнаяКарточка.Исполнители.Добавить();
				НовыйИсполнитель.Исполнитель = РазыменованныйУчастник;
				НовыйИсполнитель.Идентификатор = СтрокаУчастник.Идентификатор;
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(СтрокаУчастник.Участник) = Тип("СправочникСсылка.СтруктураПредприятия")
			Или ТипЗнч(СтрокаУчастник.Участник) = Тип("СправочникСсылка.РабочиеГруппы")
			Или ТипЗнч(СтрокаУчастник.Участник) = Тип("СправочникСсылка.ПроектыКонтейнеры")
			Или ТипЗнч(СтрокаУчастник.Участник) = Тип("СправочникСсылка.ПодразделенияКонтейнеры") Тогда
			
			СтрокиСотрудники = СоответствиеСотрудниковВКонтейнерах[СтрокаУчастник.Участник];
			
			Если СтрокиСотрудники <> Неопределено Тогда
				Для Каждого Сотрудник Из СтрокиСотрудники Цикл
					НовыйИсполнитель = КонтрольнаяКарточка.Исполнители.Добавить();
					НовыйИсполнитель.Исполнитель = Сотрудник;
					НовыйИсполнитель.Идентификатор = СтрокаУчастник.Идентификатор;
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			НовыйИсполнитель = КонтрольнаяКарточка.Исполнители.Добавить();
			НовыйИсполнитель.Исполнитель = СтрокаУчастник.Участник;
			НовыйИсполнитель.Идентификатор = СтрокаУчастник.Идентификатор;
		КонецЕсли;
	КонецЦикла;
	
	МассивОписания = Новый Массив();
	
	МассивОписания.Добавить(СтрШаблон(НСтр("ru = 'Контролировать исполнение пункта № %1'"),
		ДанныеПункта.Номер));
	Если ЗначениеЗаполнено(ДанныеПункта.Описание) Тогда
		МассивОписания.Добавить(Символы.ПС);
		МассивОписания.Добавить(ДанныеПункта.Описание);
	КонецЕсли;
	
	МассивОписания.Добавить(Символы.ПС);
	МассивОписания.Добавить(СтрШаблон(НСтр("ru = '%1 (%2)'"),
		СокрЛП(ДанныеДействия.ВидДействия), СокрЛП(ДанныеДействия.Предмет)));
	
	КонтрольнаяКарточка.Описание = СтрСоединить(МассивОписания);
	КонтрольнаяКарточка.СрокИсполнения = ?(ЗначениеЗаполнено(ДанныеПункта.Срок),
		ДанныеПункта.Срок, СрокУчастников(УчастникиПункта));
	
КонецПроцедуры

// Заполняет карточку Контроля по подчиненному исполнению.
// 
// Параметры:
//  КонтрольнаяКарточка - СправочникОбъект.Контроль - заполняемый элемент Контроля.
//  ДанныеПодчиненногоИсполнения - Структура из КлючИЗначение - параметры пунктам исполнения:
//  	*Действие - СправочникСсылка.ДействияИсполнения
//  	*ИдентификаторВышестоящего - УникальныйИдентификатор - идентификатор этапа рассмотрения
//
Процедура ЗаполнитьКонтрольнуюКарточкуПоПодчиненномуИсполнению(КонтрольнаяКарточка, ДанныеПодчиненногоИсполнения) Экспорт
	
	Действие = ДанныеПодчиненногоИсполнения.Действие;
	Если Не ДействияКлиентСервер.ЭтоДействиеИсполнения(Действие) Тогда
		Возврат;
	КонецЕсли;
	
	КонтрольнаяКарточка.Предмет = Действие;
	КонтрольнаяКарточка.ИдентификаторВышестоящегоЭтапа = ДанныеПодчиненногоИсполнения.ИдентификаторВышестоящего;
	
	ПодчиненноеИсполнение = Справочники.ДействияИсполнения.ПодчиненноеИсполнение(Действие,
		ДанныеПодчиненногоИсполнения.ИдентификаторВышестоящего);
	
	Для Каждого Участник Из ПодчиненноеИсполнение Цикл
		
		НовыйИсполнитель = КонтрольнаяКарточка.Исполнители.Добавить();
		НовыйИсполнитель.Исполнитель = Участник.Участник;
		НовыйИсполнитель.Идентификатор = Участник.Идентификатор;
		
	КонецЦикла;
	
	КонтрольнаяКарточка.Описание = Контроль.ОписаниеКонтроляПодчиненногоИсполнения(
		Действие, ДанныеПодчиненногоИсполнения.ИдентификаторВышестоящего);
	КонтрольнаяКарточка.СрокИсполнения = СрокУчастников(ПодчиненноеИсполнение);
	
КонецПроцедуры

// Возвращает представление действия строкой.
// 
// Параметры:
// 	Действие - ОпределяемыйТип.Действия
// 	
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеДействияСтрокой(Действие) Экспорт
	
	МенеджерДействия = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Действие);
	Возврат МенеджерДействия.ПредставлениеДействияСтрокой(Действие);
	
КонецФункции

// Добавит или удалит запись РС ПодпискиНаБизнесСобытия
// 
// Параметры:
// 	ВидБизнесСобытияДляПроверки - СправочникСсылка.ВидыБизнесСобытий
Процедура ОбновитьПодпискуНаБизнесСобытия(ВидБизнесСобытияДляПроверки) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидБизнесСобытияДляПроверки) Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЕстьПодпискиВНастоящемИлиБудущем(ВидБизнесСобытияДляПроверки) Тогда
	
		БизнесСобытияВызовСервера.СохранитьПодпискуНаБизнесСобытия(
			ВидБизнесСобытияДляПроверки, 
			Перечисления.ПотребителиБизнесСобытий.АвтоматическийЗапускОбработкиОбъектов);
			
	Иначе
				
		БизнесСобытияВызовСервера.УдалитьПодпискуНаБизнесСобытия(
			ВидБизнесСобытияДляПроверки, 
			Перечисления.ПотребителиБизнесСобытий.АвтоматическийЗапускОбработкиОбъектов);
			
	КонецЕсли;	
	
КонецПроцедуры		

// Вернет настройку ВидИнтерактивногоСобытия. 
// Если заполнено - значит есть интерактивный автозапуск обработки.
// 
// Параметры:
// 	Предмет - СправочникССылка.ДокументыПредприятия, СправочникССылка.Мероприятия
// 	
// Возвращаемое значение:
// Структура
// *ВидИнтерактивногоСобытия - ПеречислениеСсылка.ВидыИнтерактивныхДействий
// *УсловияЗапуска - ТаблицаЗначений
// 	
Функция НастройкиАвтозапускаОбработки(Предмет) Экспорт
	
	Настройка = Справочники.НастройкиОбработкиВидовОбъектов.НастройкаОбработкиДляОбъекта(Предмет);
		
	Если Не ЗначениеЗаполнено(Настройка) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	РеквНастройки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Настройка, 
		"ВидИнтерактивногоСобытия, УсловияЗапуска");
		
	УсловияЗапуска = РеквНастройки.УсловияЗапуска.Выгрузить();	
		
	Возврат Новый Структура("ВидИнтерактивногоСобытия, УсловияЗапуска", 
		РеквНастройки.ВидИнтерактивногоСобытия, УсловияЗапуска);	
	
КонецФункции

// Вернет УсловияЗапуска 
// 
// Параметры:
// 	Предмет - СправочникССылка.ДокументыПредприятия, СправочникССылка.Мероприятия
// 	
// Возвращаемое значение:
// УсловияЗапуска - ТаблицаЗначений
// 	
Функция УсловияЗапускаОбработки(Предмет) Экспорт
	
	Настройка = Справочники.НастройкиОбработкиВидовОбъектов.НастройкаОбработкиДляОбъекта(Предмет);
	
	Если Не ЗначениеЗаполнено(Настройка) Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;	
	
	РеквНастройки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Настройка, 
		"УсловияЗапуска");
		
	УсловияЗапуска = РеквНастройки.УсловияЗапуска.Выгрузить();	
		
	Возврат УсловияЗапуска;	
	
КонецФункции

// Получает и помечает в дереве обработки участников, которые будут вытеснены участниками других действий.
// 
// Параметры:
//  ЭлементДействия - ДанныеФормыЭлементДерева - форма предмета, Действия.
//  ПредметОбъект - ОпределяемыйТип.ПредметДействияОбъект.
//  ПечатьКарточкиДокумента - Булево
//
Процедура ПометитьВытесняемыхУчастников(ЭлементДействия, ПредметОбъект, ПечатьКарточкиДокумента = Ложь) Экспорт
	
	Если Не ПечатьКарточкиДокумента Тогда
		ЭлементыДереваОбработки = ЭлементДействия.ПолучитьЭлементы();
	Иначе
		ЭлементыДереваОбработки = ЭлементДействия.Строки;
	КонецЕсли;	
	
	ВытесняемыеУчастники = ПравилаОбработкиСервер.ВытесняемыеУчастникиДереваОбработки(
		ЭлементыДереваОбработки,
		ПредметОбъект,
		ПечатьКарточкиДокумента);
	
	Для Каждого СтрокаДействия Из ЭлементыДереваОбработки Цикл
		
		Если ВытесняемыеУчастники[СтрокаДействия.Идентификатор] <> Неопределено Тогда
			
			ДобавитьОтметкуОВытеснении(СтрокаДействия.ПредставлениеСотрудники,
				ВытесняемыеУчастники[СтрокаДействия.Идентификатор]);
			СтрокаДействия.БудетУдален = Истина;
			
		Иначе
			
			Если Не ПечатьКарточкиДокумента Тогда
				СтрокаДействияЭлементы = СтрокаДействия.ПолучитьЭлементы();
			Иначе	
				СтрокаДействияЭлементы = СтрокаДействия.Строки;
			КонецЕсли;	
			
			Для Каждого СтрокаУчастникаИлиЭтапа Из СтрокаДействияЭлементы Цикл
				Если ВытесняемыеУчастники[СтрокаУчастникаИлиЭтапа.Идентификатор] <> Неопределено Тогда
					
					ДобавитьОтметкуОВытеснении(СтрокаУчастникаИлиЭтапа.ПредставлениеСотрудники,
						ВытесняемыеУчастники[СтрокаУчастникаИлиЭтапа.Идентификатор]);
					СтрокаУчастникаИлиЭтапа.БудетУдален = Истина;
					
				Иначе

					Если Не ПечатьКарточкиДокумента Тогда
						СтрокаУчастникаИлиЭтапаЭлементы = СтрокаУчастникаИлиЭтапа.ПолучитьЭлементы();
					Иначе	
						СтрокаУчастникаИлиЭтапаЭлементы = СтрокаУчастникаИлиЭтапа.Строки;
					КонецЕсли;	
						
					Для Каждого СтрокаУчастника Из СтрокаУчастникаИлиЭтапаЭлементы Цикл
					
						Если ВытесняемыеУчастники[СтрокаУчастника.Идентификатор] <> Неопределено Тогда
							
							ДобавитьОтметкуОВытеснении(СтрокаУчастника.ПредставлениеСотрудники,
								ВытесняемыеУчастники[СтрокаУчастника.Идентификатор]);
							СтрокаУчастника.БудетУдален = Истина;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Удаляет вытесняемых участников из действия при его заполнении
// 
// Параметры:
//  ДействиеОбъект - СправочникОбъект.ДействияСогласования - Заполняемое действие, из которого нужно удалить вытесненных
//  ВытесняемыеУчастники - Соответствие - Соответствие с вытесняемыми участниками.
//  	См. ПравилаОбработкиСервер.ВытесняемыеУчастникиНастроекОбработки
//
Процедура ОбработатьВытесняемыхУчастников(ДействиеОбъект, ВытесняемыеУчастники) Экспорт
	
	Н = ДействиеОбъект.Участники.Количество() - 1;
	Пока Н >= 0 Цикл
	
		УчастникСтрока = ДействиеОбъект.Участники[Н];
		
		Если ВытесняемыеУчастники[УчастникСтрока.Участник] <> Неопределено
			И Не УчастникСтрока.Защищенный
			И ВытесняемыеУчастники[УчастникСтрока.Участник].ВытесняемоеДействие = ДействиеОбъект.ВидДействия
			И Не ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(УчастникСтрока.ФункцияУчастника) Тогда
			ДействиеОбъект.Участники.Удалить(Н);
		КонецЕсли;
		
		Н = Н - 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет условия выполнения задач. В случае проблем - возвращает текст ошибки.
//
// Параметры:
//  РеквизитыЗадачиПроцесса - Структура - с полями:
//   * Ссылка - ЗадачаСсылка.ЗадачаИсполнителя -
//   * БизнесПроцесс - БизнесПроцессСсылка - Бизнес процесс, породивший данную задачу исполнителя.
//   * ИдентификаторИсполнителя - УникальныйИдентификатор - Идентификатор, совпадает с идентификатором в "Действии".
//   * Исполнитель - СправочникСсылка.Сотрудники -
//   * РезультатВыполнения - Строка -
//   * РольИсполнителя - СправочникСсылка.ПолныеРоли -
//   * ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка - Точка маршрута данного бизнес-процесса.
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи -
// 
// Возвращаемое значение:
//  Структура - Результат проверки условия:
//   * ЗапретВыполнения - Булево - Если да, то проверка не прошла.
//   * ТекстПредупреждения - Строка -
//   * ФорматированныйТекстПредупреждения - ФорматированнаяСтрока -
Функция ПроверитьУсловияПроверкиВыполнения(РеквизитыЗадачиПроцесса, ДействиеЗадачи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметры = Новый Структура();
	
	РезультатПроверки = Новый Структура();
	РезультатПроверки.Вставить("ЗапретВыполнения", Ложь);
	РезультатПроверки.Вставить("ТекстПредупреждения", "");
	РезультатПроверки.Вставить("ФорматированныйТекстПредупреждения", Новый ФорматированнаяСтрока(""));
	
	Если ТипЗнч(РеквизитыЗадачиПроцесса.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Приглашение") Тогда
		РезультатПриглашения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			РеквизитыЗадачиПроцесса.БизнесПроцесс, "РезультатПриглашения"); //@skip-check bsl-legacy-check-string-literal
		Параметры.Вставить("РезультатПриглашения", РезультатПриглашения);
	КонецЕсли;
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(РеквизитыЗадачиПроцесса.БизнесПроцесс);
	ИспользуетУсловияЗапретаВыполненияЗадач = МенеджерОбъекта.ИспользуетУсловияЗапретаВыполненияЗадач(
		РеквизитыЗадачиПроцесса.ТочкаМаршрута,
		Параметры);
	Если Не ИспользуетУсловияЗапретаВыполненияЗадач Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	ТекстПредупреждения = Новый Массив;
	ФорматированныйТекстПредупреждения = Новый Массив;
	КоличествоПредупреждений = 0;
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(
		РеквизитыЗадачиПроцесса.Ссылка, , Истина);
	
	Действие = РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(РеквизитыЗадачиПроцесса.БизнесПроцесс);
	
	// Проверка только по действиям	
	Если Не ЗначениеЗаполнено(Действие) Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	ПоляДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие, "ВидДействия, ВидДействия.Тип, Участники");
	ПоляДействия.Участники = ПоляДействия.Участники.Выгрузить();
	
	Для Каждого Предмет Из ОсновныеПредметы Цикл
		УсловияПроверки = УсловияПроверкиВыполнения(Предмет);
		Если УсловияПроверки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПредметОбъект = Предмет.ПолучитьОбъект();
		Для Каждого УсловиеПроверкиВыполнения Из УсловияПроверки Цикл
			Если УсловиеПроверкиВыполнения.ВидДействия <> ПоляДействия.ВидДействия Тогда
				Продолжить;
			КонецЕсли;
			
			ОбъектДляПроверки = ПредметОбъект;
			Если УсловиеПроверкиВыполнения.УсловиеТипОбъекта = Перечисления.ТипыОбъектов.ДействиеЗадачи Тогда
				ОбъектДляПроверки = ДействиеЗадачи.ПолучитьОбъект();
			КонецЕсли;
			
			// Если есть условие на Функцию или Этап, то более детальная проверка по строкам ТЧ Действия:
			ЕстьОтборФункции = ЗначениеЗаполнено(УсловиеПроверкиВыполнения.Функция);
			ЕстьОтборЭтапа = ЗначениеЗаполнено(УсловиеПроверкиВыполнения.Этап);
			// Все, кроме действий ознакомления - там в ТЧ нет "Функции участника".
			Если ТипЗнч(Действие) <> Тип("СправочникСсылка.ДействияОзнакомления") Тогда
				Если (ЕстьОтборФункции Или ЕстьОтборЭтапа) Тогда
					СтрокаУчастника = ПоляДействия.Участники.Найти(
						РеквизитыЗадачиПроцесса.ИдентификаторИсполнителя, "Идентификатор");
					Если СтрокаУчастника = Неопределено Тогда
						Продолжить; // Перестраховка, строка должна быть всегда найдена.
					Иначе
						Если ЕстьОтборФункции Тогда
							Если СтрокаУчастника.ФункцияУчастника <> УсловиеПроверкиВыполнения.Функция Тогда
								Продолжить; // Функция задана, но у участника она другая.
							КонецЕсли;
						КонецЕсли;
						
						Если ЕстьОтборЭтапа
							И ДействияКлиентСервер.ЭтоТипДействияСЭтапами(ПоляДействия.ВидДействияТип) Тогда
							ЭтапыДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Этапы").Выгрузить();
							СтрокаЭтап = ЭтапыДействия.Найти(СтрокаУчастника.ИдентификаторЭтапа, "Идентификатор");
							Если СтрокаЭтап = Неопределено Тогда
								Продолжить; // Например, при ознакомлении, если не согласовано.
							Иначе
								Если СтрокаЭтап.НаименованиеЭтапа <> УсловиеПроверкиВыполнения.Этап Тогда
									Продолжить; // Этап задан, но у участника он другой.
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли
			КонецЕсли;
			
			
			// Если пришли сюда, то совпадает связка "ВидДействия + Функция + Этап":
			Если Не РаботаСАлгоритмамиПроверки.АлгоритмПоПредметуВыполняется(
				ОбъектДляПроверки, УсловиеПроверкиВыполнения.Условие) Тогда
				ТекущийТекстПредупреждения = УсловиеПроверкиВыполнения.ТекстПредупреждения;
				Если Не ЗначениеЗаполнено(ТекущийТекстПредупреждения) Тогда
					ТекущийТекстПредупреждения = СтрШаблон(
						НСтр("ru = 'условие ""%1""'"),
						Строка(УсловиеПроверкиВыполнения.Условие));
				КонецЕсли;
				ТекстПредупреждения.Добавить(
					БизнесПроцессыИЗадачиСервер.ТекстПредупрежденияЗапретаВыполненияСтрока(
						РеквизитыЗадачиПроцесса.Ссылка,
						ТекущийТекстПредупреждения));
				ФорматированныйТекстПредупреждения.Добавить(
					БизнесПроцессыИЗадачиСервер.ТекстПредупрежденияЗапретаВыполненияФорматированнаяСтрока(
						РеквизитыЗадачиПроцесса.Ссылка,
						ТекущийТекстПредупреждения));
				КоличествоПредупреждений = КоличествоПредупреждений + 1;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Если КоличествоПредупреждений <> 0 И Не НагрузочноеТестирование.ЭтоНагрузочноеТестирование() Тогда
		
		ЗаголовокПредупреждения = НСтр("ru = 'Нельзя отметить выполнение задачи по причине:'");
		ПодвалПредупреждения = НСтр("ru = 'Проверьте данные и повторите выполнение задачи.'");
		
		// Текст предупреждения
		ТекстПредупреждения =
			ЗаголовокПредупреждения
			+ Символы.ПС
			+ СтрСоединить(ТекстПредупреждения, ";" + Символы.ПС)
			+ "."
			+ Символы.ПС
			+ Символы.ПС
			+ ПодвалПредупреждения;
		
		// Форматированный текст предупреждения
		Для Индекс = 0 По КоличествоПредупреждений - 1 Цикл
			НоваяСтрока = Новый Массив;
			НоваяСтрока.Добавить(Символы.ПС);
			НоваяСтрока.Добавить(ФорматированныйТекстПредупреждения[Индекс]);
			Если Индекс <> КоличествоПредупреждений - 1 Тогда
				НоваяСтрока.Добавить(";");
			Иначе
				НоваяСтрока.Добавить(".");
			КонецЕсли;
			ФорматированныйТекстПредупреждения[Индекс] = Новый ФорматированнаяСтрока(НоваяСтрока);
		КонецЦикла;
		ФорматированныйТекстПредупреждения.Вставить(0, ЗаголовокПредупреждения);
		ФорматированныйТекстПредупреждения.Добавить(Символы.ПС + Символы.ПС + ПодвалПредупреждения);
		ФорматированныйТекстПредупреждения =
			Новый ФорматированнаяСтрока(ФорматированныйТекстПредупреждения);
		
		РезультатПроверки.ЗапретВыполнения = Истина;
		РезультатПроверки.ТекстПредупреждения = ТекстПредупреждения;
		РезультатПроверки.ФорматированныйТекстПредупреждения = ФорматированныйТекстПредупреждения;
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Проверяет условия выполнения задач. В случае проблем - возвращает текст ошибки.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи -
// 
// Возвращаемое значение:
// Возвращаемое значение:
//  Структура - Результат проверки условия:
//   * ЗапретВыполнения - Булево - Если да, то проверка не прошла.
//   * ТекстПредупреждения - Строка -
//   * ФорматированныйТекстПредупреждения - ФорматированнаяСтрока -
Функция ПроверитьУсловияПроверкиВыполненияПоДействию(Действие, ДействиеЗадачи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ЗапретВыполнения", Ложь);
	РезультатПроверки.Вставить("ТекстПредупреждения", "");
	РезультатПроверки.Вставить("ФорматированныйТекстПредупреждения", Новый ФорматированнаяСтрока(""));
	
	ТекстПредупреждения = Новый Массив;
	ФорматированныйТекстПредупреждения = Новый Массив;
	КоличествоПредупреждений = 0;

	// Проверка только по действиям	
	Если Не ЗначениеЗаполнено(Действие) Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет");
	ОсновныеПредметы = Новый Массив;
	ОсновныеПредметы.Добавить(Предмет);
	
	ВидДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "ВидДействия");
	
	Для Каждого Предмет Из ОсновныеПредметы Цикл
		УсловияПроверки = УсловияПроверкиВыполнения(Предмет);
		Если УсловияПроверки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПредметОбъект = Предмет.ПолучитьОбъект();
		Для Каждого УсловиеПроверкиВыполнения Из УсловияПроверки Цикл
			Если УсловиеПроверкиВыполнения.ВидДействия <> ВидДействия Тогда
				Продолжить;
			КонецЕсли;
			
			ОбъектДляПроверки = ПредметОбъект;
			Если УсловиеПроверкиВыполнения.УсловиеТипОбъекта = Перечисления.ТипыОбъектов.ДействиеЗадачи Тогда
				ОбъектДляПроверки = ДействиеЗадачи.ПолучитьОбъект();
			КонецЕсли;
			
			Если Не РаботаСАлгоритмамиПроверки.АлгоритмПоПредметуВыполняется(
				ОбъектДляПроверки, УсловиеПроверкиВыполнения.Условие) Тогда
				ТекущийТекстПредупреждения = УсловиеПроверкиВыполнения.ТекстПредупреждения;
				Если Не ЗначениеЗаполнено(ТекущийТекстПредупреждения) Тогда
					ТекущийТекстПредупреждения = СтрШаблон(
						НСтр("ru = 'условие ""%1""'"),
						Строка(УсловиеПроверкиВыполнения.Условие));
				КонецЕсли;
				ТекстПредупреждения.Добавить(
					БизнесПроцессыИЗадачиСервер.ТекстПредупрежденияЗапретаВыполненияСтрокаПредметы(
						ОсновныеПредметы,
						ТекущийТекстПредупреждения));
				ФорматированныйТекстПредупреждения.Добавить(
					БизнесПроцессыИЗадачиСервер.ТекстПредупрежденияЗапретаВыполненияФорматированнаяСтрокаПредметы(
						ОсновныеПредметы,
						ТекущийТекстПредупреждения));
				КоличествоПредупреждений = КоличествоПредупреждений + 1;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Если КоличествоПредупреждений <> 0 И Не НагрузочноеТестирование.ЭтоНагрузочноеТестирование() Тогда
		
		ЗаголовокПредупреждения = НСтр("ru = 'Нельзя отметить выполнение задачи по причине:'");
		ПодвалПредупреждения = НСтр("ru = 'Проверьте данные и повторите выполнение задачи.'");
		
		// Текст предупреждения
		ТекстПредупреждения =
			ЗаголовокПредупреждения
			+ Символы.ПС
			+ СтрСоединить(ТекстПредупреждения, ";" + Символы.ПС)
			+ "."
			+ Символы.ПС
			+ Символы.ПС
			+ ПодвалПредупреждения;
		
		// Форматированный текст предупреждения
		Для Индекс = 0 По КоличествоПредупреждений - 1 Цикл
			НоваяСтрока = Новый Массив;
			НоваяСтрока.Добавить(Символы.ПС);
			НоваяСтрока.Добавить(ФорматированныйТекстПредупреждения[Индекс]);
			Если Индекс <> КоличествоПредупреждений - 1 Тогда
				НоваяСтрока.Добавить(";");
			Иначе
				НоваяСтрока.Добавить(".");
			КонецЕсли;
			ФорматированныйТекстПредупреждения[Индекс] = Новый ФорматированнаяСтрока(НоваяСтрока);
		КонецЦикла;
		ФорматированныйТекстПредупреждения.Вставить(0, ЗаголовокПредупреждения);
		ФорматированныйТекстПредупреждения.Добавить(Символы.ПС + Символы.ПС + ПодвалПредупреждения);
		ФорматированныйТекстПредупреждения =
			Новый ФорматированнаяСтрока(ФорматированныйТекстПредупреждения);
		
		РезультатПроверки.ЗапретВыполнения = Истина;
		РезультатПроверки.ТекстПредупреждения = ТекстПредупреждения;
		РезультатПроверки.ФорматированныйТекстПредупреждения = ФорматированныйТекстПредупреждения;
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Обновляет важность всех активных не завершенных действий по предмету.
// 
// Параметры:
//  Предмет - ОпределяемыйТип.ПредметДействия.
//  Важность - ПеречислениеСсылка.ВариантыВажностиОбъектов - Важность предмета.
//
Процедура ОбновитьВажностьДействийПоПредмету(Предмет, Важность) Экспорт

	АктивныеДействия = ДействияСервер.ТекущиеДействияПредмета(Предмет, , ТекущаяДатаСеанса()).Выгрузить();
	МассивДействий = АктивныеДействия.ВыгрузитьКолонку("Действие");
	
	ПроцессыОбработки = Новый Массив();
	ЭтоПервыйРаз = Истина;
	Для Каждого ДействиеСсылка Из МассивДействий Цикл
		Если ЭтоПервыйРаз Тогда
			// Т.к. по действию сначала ищется Обработка, и по документу есть только одна активная обработка, то можно
			// по любому одному активному действию найти все процессы по документу:
			ПроцессыОбработки = РаботаСПроцессамиПоОбработкамОбъектов.ВсеПроцессыОбработкиПоДействию(ДействиеСсылка);
			ЭтоПервыйРаз = Ложь;
		КонецЕсли;
		
		ДействиеОбъект = ДействиеСсылка.ПолучитьОбъект();
		Если ДействиеОбъект.Важность <> Важность Тогда
			ДействиеОбъект.Важность = Важность;
			ДействиеОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
	
	// В процессы обработки тоже нужно передать Важность.
	Для Каждого ПроцессОбработки Из ПроцессыОбработки Цикл
		Если Не ЗначениеЗаполнено(ПроцессОбработки) Тогда
			Продолжить;
		КонецЕсли;
		
		ПроцессОбработкиОбъект = ПроцессОбработки.ПолучитьОбъект();
		Если Не ПроцессОбработкиОбъект.Завершен И 
				ПроцессОбработкиОбъект.Важность <> Важность Тогда
			ПроцессОбработкиОбъект.Важность = Важность;
			ПроцессОбработкиОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Формирует структуру параметров вида объекта.
// 
// Параметры:
//  ВидОбъекта - ОпределяемыйТип.ВидПредметаОбработки.
// 
// Возвращаемое значение:
//  Структура - Параметры вида объекта. См. ДействияКлиентСервер.НовыйПараметрыВидаОбъекта().
//
Функция ПараметрыВидаОбъекта(ВидОбъекта) Экспорт
	
	ПараметрыВидаОбъекта = ДействияКлиентСервер.НовыйПараметрыВидаОбъекта();
	ПараметрыВидаОбъекта.ВидОбъекта = ВидОбъекта;
	
	Если Не ЗначениеЗаполнено(ВидОбъекта) Тогда
		Возврат ПараметрыВидаОбъекта;
	КонецЕсли;
	
	ПараметрыВидаОбъекта.ОбработкаЗадана =
		Справочники.НастройкиОбработкиВидовОбъектов.НастройкиОбработкиЗаданы(
			ВидОбъекта,
			ТекущаяДатаСеанса());
	ПараметрыВидаОбъекта.НастройкиДействийЗаданы =
		НастройкиДействий.КоличествоНастроекПравилОбработки(ВидОбъекта) > 0;
		
	Если ТипЗнч(ВидОбъекта) = Тип("СправочникСсылка.ВидыДокументов") Тогда
		
		РеквизитыВида = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ВидОбъекта,
			"ВестиУчетСторон, ВестиУчетПоТематикам, РолиФайлов");
		
		ПараметрыВидаОбъекта.ВестиУчетСторон = РеквизитыВида.ВестиУчетСторон;
		ПараметрыВидаОбъекта.ВестиУчетПоТематикам = РеквизитыВида.ВестиУчетПоТематикам;
		
		ТаблицаРолиФайлов = РеквизитыВида.РолиФайлов.Выгрузить();
		Для Каждого СтрокаРолиФайлов Из ТаблицаРолиФайлов Цикл
			
			СтруктураРолиФайлов = Новый Структура("Роль, Обязательная, ТолькоОдинФайл");
			СтруктураРолиФайлов.Роль = СтрокаРолиФайлов.Роль;
			СтруктураРолиФайлов.Обязательная = СтрокаРолиФайлов.Обязательная;
			СтруктураРолиФайлов.ТолькоОдинФайл = СтрокаРолиФайлов.ТолькоОдинФайл;
			
			ПараметрыВидаОбъекта.РолиФайлов.Добавить(СтруктураРолиФайлов);
			
		КонецЦикла;
			
	ИначеЕсли ТипЗнч(ВидОбъекта) = Тип("СправочникСсылка.ВидыМероприятий") Тогда
		
		// Тематика для видов мероприятий не используется.
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный вид предмета обработки %1 (%2).'"),
			ВидОбъекта,
			ТипЗнч(ВидОбъекта));
		
	КонецЕсли;
	
	Возврат ПараметрыВидаОбъекта;
	
КонецФункции

// Формирует структуру параметров объекта.
// 
// Параметры:
//  ОбъектОбработки - ОпределяемыйТип.ПредметДействия.
// 
// Возвращаемое значение:
//  Структура - Параметры объекта. См. ДействияКлиентСервер.НовыйПараметрыОбъектаОбработки().
//  
Функция ПараметрыОбъектаОбработки(ОбъектОбработки) Экспорт
	
	Если ТипЗнч(ОбъектОбработки) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ОбъектОбработки, 
			"ВидДокумента, Создал, Подготовил, Ответственный,
			|РегистрационныйНомер, Подразделение, Организация, Тематика");
		
	ИначеЕсли ТипЗнч(ОбъектОбработки) = Тип("СправочникСсылка.Мероприятия") Тогда

		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ОбъектОбработки, 
			"ВидМероприятия, Организатор, Куратор, Подготовил, Подразделение, Организация");
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный объект обработки %1 (%2).'"),
			ОбъектОбработки,
			ТипЗнч(ОбъектОбработки));
		
	КонецЕсли;
	
	ПараметрыОбъектаОбработки = ДействияКлиентСервер.ПараметрыОбъектаОбработки(
		ОбъектОбработки,
		РеквизитыОбъекта);
	
	Возврат ПараметрыОбъектаОбработки;
	
КонецФункции

// Индекс картинки коллекция взаимодействия сотрудников.
// 
// Параметры:
//  СостояниеОбработки - ПеречислениеСсылка.СостоянияОбработкиОбъектов.
// 
// Возвращаемое значение:
//  Число - Индекс картинки коллекции взаимодействия сотрудников.
//  
Функция ИндексКартинкиКоллекцияВзаимодействияСотрудников(СостояниеОбработки) Экспорт
	
	Возврат Перечисления.СостоянияОбработкиОбъектов.ИндексКартинкиКоллекцияВзаимодействияСотрудников(
		СостояниеОбработки);
	
КонецФункции

// Определяет, завершено ли действие с положительным результатом.
// 
// Параметры:
// 	Действие - ОпределяемыйТип.Действия - Действие, результат завершения которого необходимо проверить.
// 	
// Возвращаемое значение:
//	Булево:
//		* Истина - действие завершено с положительным результатом.
//		* Ложь - в противном случае.
//
Функция ДействиеЗавершеноСПоложительнымРезультатом(Действие) Экспорт
	
	Если Не ЗначениеЗаполнено(Действие) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	СостояниеДействия = РегистрыСведений.СостоянияДействий.СостояниеДействия(Действие);
	Если Не СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РезультатДействия = РегистрыСведений.РезультатыДействий.РезультатДействия(Действие);	
	Если РезультатДействия = Перечисления.РезультатыИсполнения.Исполнено
			Или РезультатДействия = Перечисления.РезультатыОзнакомления.Ознакомлен
			Или РезультатДействия = Перечисления.РезультатыПодписания.Подписано
			Или РезультатДействия = Перечисления.РезультатыПриглашения.Принято
			Или РезультатДействия = Перечисления.РезультатыРассмотрения.Рассмотрено
			Или РезультатДействия = Перечисления.РезультатыРегистрации.Зарегистрировано
			Или РезультатДействия = Перечисления.РезультатыСогласования.Согласовано
			Или РезультатДействия = Перечисления.РезультатыУтверждения.Утверждено Тогда
		
		Возврат Истина;
	КонецЕсли;
		
	Возврат Ложь;
	
КонецФункции	

// Возвращает описание результата завершения действия.
//
// Параметры:
//	Действие - ОпределяемыйТип.Действия - Действие, для которого необходимо получить описание результата завершения.
//	КодЯзыка - Строка - Код языка пользователя
//
// Возвращаемое значение:
//	Строка - Описание результата завершения действия.
//
Функция ОписаниеРезультатаЗавершенияДействия(Действие, КодЯзыка) Экспорт

	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Действие);
	Попытка
		ОписаниеРезультата = Менеджер.ОписаниеРезультатаЗавершенияДействия(Действие, КодЯзыка);
	Исключение
		// Метода может не быть.
		ОписаниеРезультата = "";
	КонецПопытки;
	
	Возврат ОписаниеРезультата;
	
КонецФункции

// Возвращает участника, которого необходимо ознакомить с результатом завершения действия.
//
// Параметры:
//	Действие - ОпределяемыйТип.Действия - Действие, в котором нужно найти участника, которого необходимо
//										  ознакомить с результатом.
//
// Возвращаемое значение:
//	* СправочникСсылка.Сотрудники,
//	  СправочникСсылка.ПолныеРоли, 
//	  СправочникСсылка.АвтоподстановкиДляОбъектов - участник, которого необходимо ознакомить.
//
//	* Неопределено - если участник не найден.
//
Функция ОзнакамливаемыйСРезультатом(Действие) Экспорт

	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Действие);
	Попытка
		ОзнакамливаемыйСРезультатом = Менеджер.ОзнакамливаемыйСРезультатом(Действие);
	Исключение
		ОзнакамливаемыйСРезультатом = Неопределено;
	КонецПопытки;
	
	Возврат ОзнакамливаемыйСРезультатом;
	
КонецФункции

// Возвращает Истину, если действие не нужно показывать исходя из настроек его видимости.
// 
// Параметры:
//  ВидДействия - СправочникСсылка.ВидДействия - ссылка на Вид действия
//  Действие - ОпределяемыйТип.Действия - ссылка на Действие
//  Предмет - ОпределяемыйТип.ПредметДействияОбъект - Предмет
//  СостояниеДействия - Неопределено, ПеречислениеСсылка.СостоянияВыполненияДействий - Состояние действия
// 
// Возвращаемое значение:
//  НеПоказыватьПоНастройке - Булево - Не показывать по настройке
Функция НеПоказыватьПоНастройке(ВидДействия, Действие, Предмет, СостояниеДействия) Экспорт
	
	НеПоказыватьПоНастройке = Ложь;
	
	Если СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Выполняется
		Или СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Остановлено Тогда
		// Выполняющиеся или действия на паузе выводятся всегда, чтобы было видно на ком сейчас обработка.
		Возврат НеПоказыватьПоНастройке;
	КонецЕсли;
	
	РеквизитыВидаДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ВидДействия, "НастройкаВидимости, ПоказыватьТолькоЕслиВызвано");
	
	НастройкаВидимости = РеквизитыВидаДействия.НастройкаВидимости;
	ПоказыватьТолькоЕслиВызвано = РеквизитыВидаДействия.ПоказыватьТолькоЕслиВызвано;
	
	Если ПоказыватьТолькоЕслиВызвано Тогда
		НеПоказыватьПоНастройке = Не ЗначениеЗаполнено(СостояниеДействия)
			Или СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Пропущено;
			
		// для ознакомления с Пропущено - проверим число участников  - если 0 - не скрываем
		Если ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияОзнакомления") 
			И СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Пропущено Тогда
			
			Ознакомляемые = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Участники");
			Ознакомляемые = Ознакомляемые.Выгрузить();
			
			Если Ознакомляемые.Количество() = 0 Тогда
				НеПоказыватьПоНастройке = Ложь;
			Иначе	
				НеПоказыватьПоНастройке = Истина;
			КонецЕсли;		
		КонецЕсли;
		
		// Действие не вызвано, поэтому не отображается ни при какой настройке.
		Если НеПоказыватьПоНастройке Тогда 
			Возврат НеПоказыватьПоНастройке;
		КонецЕсли;
	КонецЕсли;
	
	Если СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Пропущено Тогда
		
		НеПоказыватьПоНастройке = Истина;
		
	ИначеЕсли Не ЗначениеЗаполнено(НастройкаВидимости)
		Или НастройкаВидимости = Перечисления.ВидимостьДействийВПредметах.Всем Тогда
		
		НеПоказыватьПоНастройке = Ложь;
		
	ИначеЕсли НастройкаВидимости = Перечисления.ВидимостьДействийВПредметах.Никому Тогда
		
		НеПоказыватьПоНастройке = Истина;
		
	ИначеЕсли НастройкаВидимости = Перечисления.ВидимостьДействийВПредметах.АвторамИОтветственным Тогда
		
		ЭтоАвторИлиОтветственный = Ложь;
		ВсеСотрудники = Сотрудники.ВсеСотрудникиТекущегоПользователя(Ложь);
		
		Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Предмет) Тогда
			ЭтоАвторИлиОтветственный = ВсеСотрудники.Найти(Предмет.Ответственный) <> Неопределено
				Или ВсеСотрудники.Найти(Предмет.Подготовил) <> Неопределено;
				
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоМероприятие(Предмет) Тогда
			ЭтоАвторИлиОтветственный = ВсеСотрудники.Найти(Предмет.Организатор) <> Неопределено
				Или ВсеСотрудники.Найти(Предмет.Подготовил) <> Неопределено;
		КонецЕсли;
	
		Если Не ЭтоАвторИлиОтветственный Тогда
			НеПоказыватьПоНастройке = Истина;
		КонецЕсли;
		
	ИначеЕсли НастройкаВидимости = Перечисления.ВидимостьДействийВПредметах.УчастникамДействия Тогда
			
		Контейнеры = Новый Массив;
		РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие, "Участники, Автор");
		ВсеУчастники = РеквизитыДействия.Участники.Выгрузить();
		// Все участники + Автор
		Если ЗначениеЗаполнено(РеквизитыДействия.Автор) Тогда
			НоваяСтрока = ВсеУчастники.Добавить();
			НоваяСтрока.Участник = РеквизитыДействия.Автор;
		КонецЕсли;
		
		Для Каждого Выборка Из ВсеУчастники Цикл
			
			Если ТипЗнч(Выборка.Участник) = Тип("СправочникСсылка.СтруктураПредприятия")
				Или ТипЗнч(Выборка.Участник) = Тип("СправочникСсылка.РабочиеГруппы")
				Или ТипЗнч(Выборка.Участник) = Тип("СправочникСсылка.ПроектыКонтейнеры")
				Или ТипЗнч(Выборка.Участник) = Тип("СправочникСсылка.ПодразделенияКонтейнеры") 
				Или ТипЗнч(Выборка.Участник) = Тип("СправочникСсылка.Сотрудники")
				Или ТипЗнч(Выборка.Участник) = Тип("СправочникСсылка.ПолныеРоли") Тогда
				Контейнеры.Добавить(Выборка.Участник);
				
			ИначеЕсли ТипЗнч(Выборка.Участник) = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов") Тогда
			
				ДанныеРазыменования = ДействияСервер.РазыменоватьАвтоподстановку(
					Выборка.Участник, 
					Предмет,
					Неопределено, 
					Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат,
					Ложь);
					
				Для Каждого РазыменованныйУчастник Из ДанныеРазыменования Цикл
					Если ТипЗнч(РазыменованныйУчастник) = Тип("СправочникСсылка.СтруктураПредприятия")
						Или ТипЗнч(РазыменованныйУчастник) = Тип("СправочникСсылка.РабочиеГруппы")
						Или ТипЗнч(РазыменованныйУчастник) = Тип("СправочникСсылка.ПроектыКонтейнеры")
						Или ТипЗнч(РазыменованныйУчастник) = Тип("СправочникСсылка.ПодразделенияКонтейнеры") 
						Или ТипЗнч(РазыменованныйУчастник) = Тип("СправочникСсылка.Сотрудники")
						Или ТипЗнч(РазыменованныйУчастник) = Тип("СправочникСсылка.ПолныеРоли") Тогда
						Контейнеры.Добавить(РазыменованныйУчастник);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;	
			
		КонецЦикла;
		СоответствиеСотрудниковВКонтейнерах = Новый Соответствие;
		Если Контейнеры.Количество() <> 0 Тогда
			СоответствиеСотрудниковВКонтейнерах 
				= РегистрыСведений.СотрудникиВКонтейнерах.СотрудникиВКонтейнерах(Контейнеры);
		КонецЕсли;
		
		ЯвляетсяУчастником = Ложь;
		ВсеСотрудники = Сотрудники.ВсеСотрудникиТекущегоПользователя(Ложь);
		
		Для Каждого Сотрудник Из ВсеСотрудники Цикл
			
			Если СоответствиеСотрудниковВКонтейнерах.Получить(Сотрудник) <> Неопределено Тогда
				ЯвляетсяУчастником = Истина;
				Прервать;
			Иначе	
				
				Для Каждого КлючИЗначение Из СоответствиеСотрудниковВКонтейнерах Цикл
					
					Если КлючИЗначение.Значение.Найти(Сотрудник) <> Неопределено Тогда
						ЯвляетсяУчастником = Истина;
						Прервать;
					КонецЕсли;	
						
				КонецЦикла;	
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ЯвляетсяУчастником Тогда
			НеПоказыватьПоНастройке = Истина;
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат НеПоказыватьПоНастройке;
	
КонецФункции

// Вычисляет срок действия по таблице участников.
// 
// Параметры:
//  Участники - ТаблицаЗначений - участники действия.
//  ДатаОтсчетаСрока - Дата - дата отсчета относительного срока.
// 
// Возвращаемое значение:
//  Дата
// 
Функция СрокУчастников(Участники, ДатаОтсчетаСрока = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаОтсчетаСрока) Тогда
		ДатаОтсчетаСрока = ТекущаяДатаСеанса();
		Срок = Дата(1, 1, 1);
	Иначе
		Срок = ДатаОтсчетаСрока;
	КонецЕсли;
	
	ЕстьРассматривающие = Ложь;
	ЕстьИсполнители = Ложь;
	СрокУчастника = Дата(1, 1, 1);
	
	ПараметрыТочногоСрока = ПараметрыДлительностиТочногоСрока();
	ПараметрыТочногоСрока.ГрафикРаботы = ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы();
	
	Для Каждого СтрокаУчастник Из Участники Цикл
		
		Если СтрокаУчастник.ВариантУстановкиСрока = Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок Тогда
			
			ПараметрыТочногоСрока.Дни = СтрокаУчастник.СрокДни;
			
			Если ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(СтрокаУчастник.ФункцияУчастника) Тогда
				
				Если ЕстьРассматривающие Тогда
					ПараметрыТочногоСрока.ДатаОтсчета = ДатаОтсчетаСрока;
					СрокУчастника = СрокИсполненияПоДлительности(ПараметрыТочногоСрока);
				Иначе
					ПараметрыТочногоСрока.ДатаОтсчета = Макс(Срок, ДатаОтсчетаСрока);
					Срок = СрокИсполненияПоДлительности(ПараметрыТочногоСрока);
				КонецЕсли;
				
			ИначеЕсли СтрокаУчастник.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Рассматривающий Тогда
				
				ПараметрыТочногоСрока.ДатаОтсчета = ДатаОтсчетаСрока;
				СрокУчастника = СрокИсполненияПоДлительности(ПараметрыТочногоСрока);
				Если Не ЕстьРассматривающие Тогда
					ЕстьРассматривающие = Истина;
				КонецЕсли;
				
			ИначеЕсли СтрокаУчастник.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Исполнитель Тогда
				
				Если ЕстьИсполнители Тогда
					Продолжить;
				КонецЕсли;
				
				ПараметрыТочногоСрока.ДатаОтсчета = ДатаОтсчетаСрока;
				СрокУчастника = СрокИсполненияПоДлительности(ПараметрыТочногоСрока);
				ДатаОтсчетаСрока = ?(ЗначениеЗаполнено(СрокУчастника), СрокУчастника, ДатаОтсчетаСрока);
				
				ЕстьИсполнители = Истина;
				
			ИначеЕсли СтрокаУчастник.ФункцияУчастника = Перечисления.ФункцииУчастниковОзнакомления.Ознакомляемый Тогда	

				ПараметрыТочногоСрока.ДатаОтсчета = ДатаОтсчетаСрока;
				СрокУчастника = СрокИсполненияПоДлительности(ПараметрыТочногоСрока);
				
			Иначе
				
				ПараметрыТочногоСрока.ДатаОтсчета = ДатаОтсчетаСрока;
				СрокУчастника = СрокИсполненияПоДлительности(ПараметрыТочногоСрока);
				ДатаОтсчетаСрока = ?(ЗначениеЗаполнено(СрокУчастника), СрокУчастника, ДатаОтсчетаСрока);
				
			КонецЕсли;
			
			ПараметрыТочногоСрока.Дни = 0;
			
		Иначе
			СрокУчастника = СтрокаУчастник.Срок;
		КонецЕсли;
		
		Если СрокУчастника = Макс(Срок, СрокУчастника) Тогда
			Срок = СрокУчастника;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Срок;
	
КонецФункции

// Возвращает структуру параметров длительности для определения точного срока
// функцией СрокИсполненияПоДлительности.
//
// Возвращаемое значение:
//  Структура
//   * Дни - Число
//   * Часы - Число
//   * Минуты - Число
//   * ДатаОтсчета - Дата
//   * ГрафикРаботы - СправочникСсылка.ГрафикиРаботы
//
Функция ПараметрыДлительностиТочногоСрока() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Дни", 0);
	Параметры.Вставить("Часы", 0);
	Параметры.Вставить("Минуты", 0);
	Параметры.Вставить("ДатаОтсчета", Дата(1,1,1));
	Параметры.Вставить("ГрафикРаботы", Справочники.ГрафикиРаботы.ПустаяСсылка());
	
	Возврат Параметры
	
КонецФункции

// Возвращает структуру доступных обработчиков событий для менеджера действия
//
// Возвращаемое значение:
//  Структура - структура, в которой записана информация о наличии процедур обработки событий в модуле:
// * ОбработкаПрерывания - Булево -
// * ОбработкаСнятияПаузы - Булево -
// * ОбработкаПостановкиНаПаузу - Булево -
// * ОбработкаИзмененияУчастника - Булево -
Функция ДоступныеОбработчикиМенеджера() Экспорт
	
	ДоступныеОбработчики = Новый Структура;
	ДоступныеОбработчики.Вставить("ОбработкаПрерывания", Ложь);  
	ДоступныеОбработчики.Вставить("ОбработкаСнятияПаузы", Ложь);
	ДоступныеОбработчики.Вставить("ОбработкаПостановкиНаПаузу", Ложь);
	ДоступныеОбработчики.Вставить("ОбработкаИзмененияУчастника", Ложь);
	Возврат ДоступныеОбработчики;

КонецФункции

// Возвращает срок исполнения датой по длительности (срок в секундах).
//
// Используется для переопределения одноименной функции в модуле СрокиИсполненияПроцессов.
// Вместо текущей следует использовать функцию из модуля СрокиИсполненияПроцессов.
//
// Параметры:
//  ПараметрыДлительностиИсполнения - Структура - см. функцию ПараметрыДлительностиИсполненияДляОпределенияТочногоСрока.
//
// Возвращаемое значение:
//   Дата
//
Функция СрокИсполненияПоДлительности(ПараметрыДлительностиИсполнения) Экспорт
	
	СрокИсполнения = Дата(1,1,1);
	
	Дни = ПараметрыДлительностиИсполнения.Дни;
	Часы = ПараметрыДлительностиИсполнения.Часы;
	Минуты = ПараметрыДлительностиИсполнения.Минуты;
	ДатаОтсчета = ПараметрыДлительностиИсполнения.ДатаОтсчета;
	ГрафикРаботы = ПараметрыДлительностиИсполнения.ГрафикРаботы;
	
	Если Дни = 0 И Часы = 0 И Минуты = 0 Тогда
		Возврат СрокИсполнения;
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ГрафикРаботы", ГрафикРаботы);
	
	СрокиИсполненияПроцессов.СкорректироватьДатуОтсчета(ДатаОтсчета, ДопПараметры);
	
	ИспользоватьДатуИВремяВСрокахЗадач = 
		ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	
	Если ЗначениеЗаполнено(ГрафикРаботы) Тогда
		
		РеквизитыГрафикаРаботы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ГрафикРаботы, "Календарь, КоличествоРабочихЧасовВДне");
			
		Календарь = РеквизитыГрафикаРаботы.Календарь;
		КоличествоРабочихЧасовВДне = РеквизитыГрафикаРаботы.КоличествоРабочихЧасовВДне;
		
		Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
			
			СрокВСекундах = Дни * 3600 * КоличествоРабочихЧасовВДне + Часы * 3600 + Минуты * 60;
			
			ДатаНачала = ДатаОтсчета;
			ДатаОкончания = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, ДатаОтсчета, Дни);
			ДатаОкончания = КонецДня(ДатаОкончания);
			
			Пока СрокВСекундах > 0 Цикл
				
				ИнтервалыРабочегоВремени = ГрафикиРаботы.СформироватьТаблицуРабочегоВремени(
					ГрафикРаботы, ДатаНачала, ДатаОкончания);
			
				Для Каждого Интервал Из ИнтервалыРабочегоВремени Цикл
					
					Если СрокВСекундах = 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если СрокВСекундах > Интервал.Длительность Тогда
						СрокВСекундах = СрокВСекундах - Интервал.Длительность;
					Иначе
						СрокИсполнения = Интервал.ДатаНачала + СрокВСекундах;
						СрокВСекундах = 0;
					КонецЕсли;
					
				КонецЦикла;
				
				Если СрокВСекундах = 0 Тогда
					Прервать;
				КонецЕсли;
				
				ДатаНачала = ДатаОкончания;
				ДатаОкончания = КалендарныеГрафики.ПолучитьДатуПоКалендарю(
					Календарь, ДатаОкончания, 2);
					
				ДатаОкончания = КонецДня(ДатаОкончания);
				
			КонецЦикла;
			
		Иначе
			// Срок исполнения с учетом того, что время должно равняться концу дня.
			СрокИсполнения = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, ДатаОтсчета, Дни - 1);
			СрокИсполнения = КонецДня(СрокИсполнения);
		КонецЕсли;
		
	Иначе
		
		СрокВСекундах = Дни * 86400;
		Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
			СрокВСекундах = СрокВСекундах + Часы * 3600 + Минуты * 60;
		Иначе
			// Корректировка срока на последнюю секунду дня.
			// Предполагается, что если не используется время в сроках, то оно
			// равно концу дня.
			СрокВСекундах = СрокВСекундах - 1;
		КонецЕсли;
		
		СрокИсполнения = ДатаОтсчета + СрокВСекундах;
		
	КонецЕсли;
	
	Возврат СрокИсполнения;
	
КонецФункции

// Возвращает разрешение изменения действия.
//
// Параметры:
//   Действие - ОпределяемыйТип.Действия
//   ПредметДействия - ОпределяемыйТип.ПредметДействия
//
// Возвращаемое значение:
//   Булево
//
Функция ИзменениеДействияРазрешено(Действие, ПредметДействия) Экспорт
	
	Если Не ЗначениеЗаполнено(ПредметДействия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПраваДоступа = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(ПредметДействия);
	Состояние = РегистрыСведений.СостоянияДействий.СостояниеДействия(Действие);
	
	Возврат ПраваДоступа.Изменение
		И ((Состояние <> Перечисления.СостоянияВыполненияДействий.Завершено
				И Состояние <> Перечисления.СостоянияВыполненияДействий.Пропущено
				И Состояние <> Перечисления.СостоянияВыполненияДействий.Остановлено)
			Или ДействиеИсполняетсяСНовымиУчастниками(Действие));
	
КонецФункции

// Вычленит из текста ошибки - кто блокирует 
// Параметры:
//  ПодробноеОписание - Строка
// 
// Возвращаемое значение:
//  Строка
Функция БлокируетПредметИзОписанияОшибки(ПодробноеОписание) Экспорт
	
	// только на русском языке
	СтрокаПоиска = НСтр("ru = 'Объект уже заблокирован'");
	Позиция = СтрНайти(ПодробноеОписание, СтрокаПоиска);
	Если Позиция = 0 Тогда
		
		СтрокаПоиска = НСтр("ru = 'Object already locked'");
		Позиция = СтрНайти(ПодробноеОписание, СтрокаПоиска);
		Если Позиция = 0 Тогда
			Возврат "";
		КонецЕсли;	
		
	КонецЕсли;	
	
	КтоБлокирует = Сред(ПодробноеОписание, Позиция + СтрДлина(СтрокаПоиска) + 2);
	Возврат КтоБлокирует;
	
КонецФункции	

// Данные пунктов участников действия обработки.
// 
// Параметры:
//  ДействиеОбработки - ОпределяемыйТип.Действия.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - Данные пунктов участников:
//   * Ключ - УникальныйИдентификатор - Идентификатор участника.
//   * Значение - Структура - Данные пункта:
//      ** Автор - СправочникСсылка.Сотрудники.
//      ** Идентификатор - УникальныйИдентификатор.
//      ** Контролер - СправочникСсылка.Сотрудники, СправочникСсылка.АвтоподстановкиДляОбъектов, СправочникСсылка.ПолныеРоли - Контролер.
//      ** Номер - Строка.
//      ** Описание - Строка.
//      ** Срок - Дата.
// 
Функция ДанныеПунктовУчастников(ДействиеОбработки) Экспорт
	
	ДанныеПунктовУчастников = Новый Соответствие;
	
	Если ТипЗнч(ДействиеОбработки) <> Тип("СправочникСсылка.ДействияИсполнения") Тогда
		Возврат ДанныеПунктовУчастников;
	КонецЕсли;
	
	РеквизитыДействияОбработки =
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДействиеОбработки,
			"ПоПунктам, Пункты, Участники");
	
	Если Не РеквизитыДействияОбработки.ПоПунктам Тогда
		Возврат ДанныеПунктовУчастников;
	КонецЕсли;
	
	Пункты = РеквизитыДействияОбработки.Пункты.Выгрузить();
	Пункты.Сортировать("НомерСтроки Возр");
	Участники = РеквизитыДействияОбработки.Участники.Выгрузить();
	Участники.Сортировать("НомерСтроки Возр");
	
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		СтрокаПункты = Пункты.Найти(СтрокаУчастника.ИдентификаторПункта, "Идентификатор");
		
		Если СтрокаПункты = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеПункта = Новый Структура;
		ДанныеПункта.Вставить("Автор", СтрокаПункты.Автор);
		ДанныеПункта.Вставить("Идентификатор", СтрокаПункты.Идентификатор);
		ДанныеПункта.Вставить("Контролер", СтрокаПункты.Контролер);
		ДанныеПункта.Вставить("Номер", СтрокаПункты.Номер);
		ДанныеПункта.Вставить("Описание", СтрокаПункты.Описание);
		ДанныеПункта.Вставить("Срок", СтрокаПункты.Срок);
		
		ДанныеПунктовУчастников.Вставить(
			СтрокаУчастника.Идентификатор,
			ДанныеПункта);
		
	КонецЦикла;
	
	Возврат ДанныеПунктовУчастников;
	
КонецФункции

// Формирует пустую структуру параметров заполнения дерева обработки для функции ДействияСервер.ЗаполнитьДеревоОБработки.
// 
// Возвращаемое значение:
//  Структура - Параметры заполнения дерева обработки:
// * РеквизитДерева - ДанныеФормыДерево, Неопределено - Реквизит дерева.
// * ЭлементДерева - ТаблицаФормы, Неопределено - Элемент дерева. 
// * ПредметОбъект - ОпределяемыйТип.ПредметДействияОбъект, Неопределено - Объект предмета.
// * ДействияПоказыватьВсе - Булево.
// * ВидОбъекта - СправочникСсылка.ВидыДокументов, СправочникСсылка.ВидыМероприятий, Неопределено - Вид Объекта.
// * ОбъектОбработки - ОпределяемыйТип.ПредметДействия, Неопределено - Предмет обработки.
// * ДатаОбработки - Дата.
// * ДействиеТекущейСтроки - ОпределяемыйТип.Действия, Неопределено - Текущее действие 
// 
Функция НовыйПараметрыЗаполненияДереваОбработки() Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("РеквизитДерева", Неопределено);
	ПараметрыЗаполнения.Вставить("ЭлементДерева", Неопределено);
	ПараметрыЗаполнения.Вставить("ДействиеТекущейСтроки", Неопределено);
	ПараметрыЗаполнения.Вставить("ДействияПоказыватьВсе", Ложь);
	
	ПараметрыЗаполнения.Вставить("ПредметОбъект", Неопределено);
	ПараметрыЗаполнения.Вставить("ВидОбъекта", Неопределено);
	ПараметрыЗаполнения.Вставить("ОбъектОбработки", Неопределено);
	ПараметрыЗаполнения.Вставить("ДатаОбработки", Дата(1, 1, 1));
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Формирует структуру параметров заполнения дерева обработки для функции ДействияСервер.ЗаполнитьДеревоОБработки.
// Заполняет все данные, которые можно получить из базы данных по объекту обработки.
// 
// Параметры:
//  ОбъектОбработки - СправочникСсылка.ОбработкиОбъектов.
// 
// Возвращаемое значение:
//  См. ДействияСервер.НовыйПараметрыЗаполненияДереваОбработки.
// 
Функция ПараметрыЗаполненияДереваОбработки(ОбъектОбработки) Экспорт
	
	ПараметрыЗаполнения = НовыйПараметрыЗаполненияДереваОбработки();
	ПараметрыЗаполнения.ОбъектОбработки = ОбъектОбработки;
	ПараметрыЗаполнения.ПредметОбъект = ОбъектОбработки.ПолучитьОбъект();
	ПараметрыЗаполнения.ДатаОбработки = ДатаОбработки(ОбъектОбработки);
	
	ПараметрыОбъектаОбработки = ПараметрыОбъектаОбработки(ОбъектОбработки);
	ПараметрыЗаполнения.ВидОбъекта = ПараметрыОбъектаОбработки.ВидОбъекта;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Заполняет дерево обработки.
// 
// Параметры:
//  ПараметрыЗаполнения - см. ДействияСервер.НовыйПараметрыЗаполненияДереваОбработки.
// 
// Возвращаемое значение:
//  Структура - Результат заполнения:
// * КоличествоДействий - Число.
// * ЕстьЗавершенноеДействиеСогласованияВРежимеЗамечаний - Булево. 
// * ЕстьДействияСогласования - Булево.
// * ЕстьРодительскийКомплексныйПроцесс - Булево. 
// * ЕстьДействияОзнакомления - Булево.
// * ЕстьПравоИзмененияПроцессаПоПредмету - Булево.
// * ДействияОзнакомления - Массив из СправочникСсылка.ДействияОзнакомления.
// * ДействиеСогласованияВРежимеЗамечаний - СправочникСсылка.ДействияСогласования.
// * КППоПредмету - БизнесПроцессСсылка.КомплексныйПроцесс.
// 
Функция ЗаполнитьДеревоОбработки(ПараметрыЗаполнения) Экспорт
	
	РезультатЗаполнения = Новый Структура;
	РезультатЗаполнения.Вставить("КоличествоДействий", 0);
	РезультатЗаполнения.Вставить("ЕстьЗавершенноеДействиеСогласованияВРежимеЗамечаний", Ложь);
	РезультатЗаполнения.Вставить("ЕстьДействияСогласования", Ложь);
	РезультатЗаполнения.Вставить("ЕстьРодительскийКомплексныйПроцесс", Ложь);
	РезультатЗаполнения.Вставить("ЕстьДействияОзнакомления", Ложь);
	РезультатЗаполнения.Вставить("ЕстьПравоИзмененияПроцессаПоПредмету", Ложь);
	РезультатЗаполнения.Вставить("ДействияОзнакомления", Новый Массив);
	РезультатЗаполнения.Вставить("ДействиеСогласованияВРежимеЗамечаний",
		Справочники.ДействияСогласования.ПустаяСсылка());
	РезультатЗаполнения.Вставить("КППоПредмету", БизнесПроцессы.КомплексныйПроцесс.ПустаяСсылка());
	
	ЭлементыДействия = ПараметрыЗаполнения.РеквизитДерева.ПолучитьЭлементы();
	ЭлементыДействия.Очистить();
	
	ДействияПредмета = ТекущиеДействияПредмета(
		ПараметрыЗаполнения.ОбъектОбработки,
		ПараметрыЗаполнения.ВидОбъекта,
		ПараметрыЗаполнения.ДатаОбработки).Выбрать();
	
	РезультатЗаполнения.КППоПредмету = РаботаСПроцессамиПоОбработкамОбъектов.АктивныйКППоПредмету(
		ПараметрыЗаполнения.ПредметОбъект.Ссылка);
	ВедущийПроцесс = БизнесПроцессыИЗадачиСервер.КорневойВедущийПроцесс(
		РезультатЗаполнения.КППоПредмету);
	Если ЗначениеЗаполнено(ВедущийПроцесс) Тогда
		РезультатЗаполнения.КППоПредмету = ВедущийПроцесс;
	КонецЕсли;
	Если ЗначениеЗаполнено(РезультатЗаполнения.КППоПредмету) Тогда
		РезультатЗаполнения.ЕстьРодительскийКомплексныйПроцесс = Истина;
		РезультатЗаполнения.ЕстьПравоИзмененияПроцессаПоПредмету = 
			БизнесПроцессыИЗадачиВызовСервера.ЕстьПраваНаОстановкуБизнесПроцесса(
				РезультатЗаполнения.КППоПредмету);
	КонецЕсли;	

	Пока ДействияПредмета.Следующий() Цикл
		Действие = ДействияПредмета.Действие;
		СостояниеДействия = РегистрыСведений.СостоянияДействий.СостояниеДействия(Действие);
		Если Не ПараметрыЗаполнения.ДействияПоказыватьВсе И НеПоказыватьПоНастройке(
				ДействияПредмета.ВидДействия,
				Действие,
				ПараметрыЗаполнения.ПредметОбъект,
				СостояниеДействия) Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатЗаполнения.КоличествоДействий = РезультатЗаполнения.КоличествоДействий + 1;

		ЭлементДействие = ЭлементыДействия.Добавить();
		МенеджерДействия = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДействияПредмета.Действие);

		МенеджерДействия.ЗаполнитьДействиеВФормеПредмета(
			ЭлементДействие,
			Действие,
			ПараметрыЗаполнения.ПредметОбъект,
			Ложь);

		Если ЗначениеЗаполнено(ПараметрыЗаполнения.ДействиеТекущейСтроки)
			И ПараметрыЗаполнения.ДействиеТекущейСтроки = ЭлементДействие.Действие Тогда
			ПараметрыЗаполнения.ЭлементДерева.ТекущаяСтрока =
				ЭлементДействие.ПолучитьИдентификатор();
		КонецЕсли;
		
		Если ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияСогласования") Тогда
			ФормируетВизы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "ФормируетВизы");
			Если ФормируетВизы Тогда
				РезультатЗаполнения.ЕстьДействияСогласования = Истина;
			КонецЕсли;	
		КонецЕсли;
		
		Если ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
			РезультатЗаполнения.ЕстьДействияОзнакомления = Истина; 
			РезультатЗаполнения.ДействияОзнакомления.Добавить(ДействияПредмета.Действие);
		КонецЕсли;
		
		Если ДействияПредмета.СогласованиеВРежимеЗамечаний Тогда
			РезультатЗаполнения.ЕстьЗавершенноеДействиеСогласованияВРежимеЗамечаний =
				СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено;
			РезультатЗаполнения.ДействиеСогласованияВРежимеЗамечаний = Действие;
		КонецЕсли;
		
		Если ТипЗнч(ПараметрыЗаполнения.ВидОбъекта) = Тип("СправочникСсылка.ВидыДокументов")Тогда	
			
			ЭлементДействие.ВыполненоВнеПрограммы = ДействияПредмета.ВыполненоВнеПрограммы;
			
			Если ЭлементДействие.ВыполненоВнеПрограммы Тогда
				ЭлементДействие.Представление = СтрШаблон("%1 (%2)",
					ЭлементДействие.Представление, ДействияКлиентСервер.КомментарийОВыполненииВнеПрограммы(Истина));
				ЭлементДействие.ПредставлениеЧистое = СтрШаблон("%1 (%2)",
					ЭлементДействие.ПредставлениеЧистое, ДействияКлиентСервер.КомментарийОВыполненииВнеПрограммы(Истина));
			КонецЕсли;
			
			Если ЭлементДействие.ВыполненоВнеПрограммы Тогда
				Для Каждого Элемент Из ЭлементДействие.ПолучитьЭлементы() Цикл
					Элемент.ВыполненоВнеПрограммы = Истина;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;
	ПеренумероватьДействия(ПараметрыЗаполнения.РеквизитДерева);
	
	ПометитьВытесняемыхУчастников(
		ПараметрыЗаполнения.РеквизитДерева,
		ПараметрыЗаполнения.ПредметОбъект);
	
	Возврат РезультатЗаполнения;
	
КонецФункции

// Возвращает таблицу со всеми результатами действий по действию
// 
// Параметры:
// 	МассивДействий - Массив из ОпределяемыйТип.Действия - Ссылка на действие
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица с результатами по действию:
//	* Действие - ОпределяемыйТип.Действия
//	* Функция - УникальныйИдентификатор
//	* ИдентификаторУчастника - УникальныйИдентификатор
//	* ИдентификаторПункта - УникальныйИдентификатор
//	* Дата - Дата
//	* Результат - ОпределяемыйТип.РезультатыВыполненияДействий
//	* Состояние - ПеречислениеСсылка.СостоянияВыполненияДействий
//
Функция ВсеСостоянияИРезультаты(МассивДействий) Экспорт
	
	УстановитьПривилегированныйРежим(Истина); // права РС РезультатыДействий идут от предмета - документа - но мы его уже открываем - права есть
	
	// Получение всех состояний и результатов.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДействияОбработкиОбъектов.Действие,
		|	ВЫБОР
		|		КОГДА ОчередьЗаданийДокументооборота.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыЗаданий.ОстановитьОбработку)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Остановлено)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Выполняется)
		|	КОНЕЦ КАК СостояниеДействие
		|ПОМЕСТИТЬ ВТ_ОбработкаВОчереди
		|ИЗ
		|	РегистрСведений.ДействияОбработкиОбъектов КАК ДействияОбработкиОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
		|		ПО ОчередьЗаданийДокументооборота.ПредметЗадания = ДействияОбработкиОбъектов.Обработка
		|		И ДействияОбработкиОбъектов.Действие В (&МассивДействий)
		|		И ОчередьЗаданийДокументооборота.Тип В (ЗНАЧЕНИЕ(Перечисление.ТипыЗаданий.ОстановитьОбработку),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыЗаданий.ПродолжитьОбработку))
		|		И ОчередьЗаданийДокументооборота.СтатусЗадания <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Завершено)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостоянияДействий.Действие КАК Действие,
		|	СостоянияДействий.Функция КАК Функция,
		|	ВЫБОР
		|		КОГДА СостоянияДействий.ИдентификаторУчастника = &ПустойИД
		|			ТОГДА СостоянияДействий.Участник
		|		ИНАЧЕ СостоянияДействий.ИдентификаторУчастника
		|	КОНЕЦ КАК ИдентификаторУчастника,
		|	СостоянияДействий.ИдентификаторПункта КАК ИдентификаторПункта,
		|	СостоянияДействий.Участник КАК Участник,
		|	ЕСТЬNULL(РезультатыДействий.Дата, СостоянияДействий.Дата) КАК Дата,
		|	ЕСТЬNULL(РезультатыДействий.Результат, НЕОПРЕДЕЛЕНО) КАК Результат,
		|	ВЫБОР
		|		КОГДА СостоянияДействий.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Выполняется),
		|			ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Остановлено))
		|			ТОГДА ЕСТЬNULL(ВТ_ОбработкаВОчереди.СостояниеДействие, СостоянияДействий.Состояние)
		|		ИНАЧЕ СостоянияДействий.Состояние
		|	КОНЕЦ КАК Состояние,
		|	РезультатыДействий.ЕстьФайлыОтчета КАК ЕстьФайлыОтчета,
		|	РезультатыДействий.РезультатТекстом КАК РезультатТекстом
		|ИЗ
		|	РегистрСведений.СостоянияДействий КАК СостоянияДействий
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыДействий КАК РезультатыДействий
		|		ПО СостоянияДействий.Действие = РезультатыДействий.Действие
		|		И СостоянияДействий.ИдентификаторПункта = РезультатыДействий.ИдентификаторПункта
		|		И СостоянияДействий.ИдентификаторУчастника = РезультатыДействий.ИдентификаторУчастника
		|		И СостоянияДействий.Функция = РезультатыДействий.Функция
		|		И СостоянияДействий.Участник = РезультатыДействий.Участник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОбработкаВОчереди КАК ВТ_ОбработкаВОчереди
		|		ПО СостоянияДействий.Действие = ВТ_ОбработкаВОчереди.Действие
		|ГДЕ
		|	СостоянияДействий.Действие В (&МассивДействий)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УчастникиОзнакомлений.Действие,
		|	ЗНАЧЕНИЕ(Перечисление.ФункцииУчастниковОзнакомления.Ознакомляемый),
		|	ВЫБОР
		|		КОГДА УчастникиОзнакомлений.ИдентификаторУчастника = &ПустойИД
		|			ТОГДА УчастникиОзнакомлений.Участник
		|		ИНАЧЕ УчастникиОзнакомлений.ИдентификаторУчастника
		|	КОНЕЦ,
		|	&ПустойИД,
		|	УчастникиОзнакомлений.Участник,
		|	УчастникиОзнакомлений.ДатаНачала,
		|	НЕОПРЕДЕЛЕНО,
		|	ВТ_ОбработкаВОчереди.СостояниеДействие,
		|	Ложь,
		|	УчастникиОзнакомлений.РезультатОзнакомленияТекстом
		|ИЗ
		|	РегистрСведений.УчастникиОзнакомлений КАК УчастникиОзнакомлений
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДействий КАК СостоянияДействий
		|		ПО УчастникиОзнакомлений.Действие = СостоянияДействий.Действие
		|		И УчастникиОзнакомлений.ИдентификаторУчастника = СостоянияДействий.ИдентификаторУчастника
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОбработкаВОчереди КАК ВТ_ОбработкаВОчереди
		|		ПО УчастникиОзнакомлений.Действие = ВТ_ОбработкаВОчереди.Действие
		|ГДЕ
		|	УчастникиОзнакомлений.Действие В (&МассивДействий)
		|	И СостоянияДействий.Участник ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("МассивДействий", МассивДействий);
	Запрос.УстановитьПараметр("ПустойИД",
		ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
	
	ВсеСостоянияИРезультаты = Запрос.Выполнить().Выгрузить();
	
	Возврат ВсеСостоянияИРезультаты;
	
КонецФункции

// Возвращает массив участников действия, развернутых из контейнера. 
//
// Параметры:
//   Контейнер - СправочникСсылка.АвтоподстановкиДляОбъектов
//     СправочникСсылка.Пользователи,
//     СправочникСсылка.СтруктураПредприятия,
//     СправочникСсылка.РабочиеГруппы,
//     СправочникСсылка.ПолныеРоли,
//     СправочникСсылка.ПодразделенияКонтейнеры - разворачиваемый контейнер.
//   Предмет - ОпределяемыйТип.ПредметДействия, ОпределяемыйТип.ПредметДействияОбъект - предмет действия.
//
// Возвращаемое значение:
//   Массив - СправочникСсылка.Пользователи, СправочникСсылка.Сотрудники - участники контейнера.
//
Функция ВсеРазвернутыеУчастники(Контейнер, Знач Предмет) Экспорт
	
	РазвернутыеУчастники = Новый Массив;
	
	Если ТипЗнч(Контейнер) = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов") Тогда // автоподстановка.
		
		Если Метаданные.ОпределяемыеТипы.ПредметДействия.Тип.СодержитТип(ТипЗнч(Предмет)) 
			И ЗначениеЗаполнено(Предмет) Тогда
			Предмет = Предмет.ПолучитьОбъект();
		КонецЕсли;
		ЗначениеАвтоподстановки = ШаблоныДокументов.ПолучитьЗначениеАвтоподстановки(Контейнер, Предмет);
		
		Если ТипЗнч(ЗначениеАвтоподстановки) = Тип("Структура")
			Или ТипЗнч(ЗначениеАвтоподстановки) = Тип("ФиксированнаяСтруктура") Тогда
			Элементы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗначениеАвтоподстановки.РольИсполнителя);
		ИначеЕсли ТипЗнч(ЗначениеАвтоподстановки) = Тип("Массив")
			Или ТипЗнч(ЗначениеАвтоподстановки) = Тип("ФиксированныйМассив") Тогда
			Элементы = ЗначениеАвтоподстановки;
		ИначеЕсли ТипЗнч(ЗначениеАвтоподстановки) = Тип("ТаблицаЗначений") Тогда
			Элементы = ЗначениеАвтоподстановки.ВыгрузитьКолонку("Участник");
		ИначеЕсли ЗначениеАвтоподстановки = Неопределено Тогда
			Элементы = Новый Массив;
		Иначе
			Элементы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗначениеАвтоподстановки);
		КонецЕсли;
		
	Иначе
		Элементы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Контейнер);
	КонецЕсли;
	
	Для Каждого Элемент Из Элементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("СправочникСсылка.Пользователи") 
			Или ТипЗнч(Элемент) = Тип("СправочникСсылка.Сотрудники") Тогда
			
			РазвернутыеУчастники.Добавить(Элемент);
		
		ИначеЕсли ТипЗнч(Элемент) = Тип("СправочникСсылка.ФактическиеИсполнители") Тогда
			РазвернутыеУчастники.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент, "Факт"));
		Иначе
			
			СоставКонтейнера = РегистрыСведений.СотрудникиВКонтейнерах.СотрудникиВКонтейнере(Элемент);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РазвернутыеУчастники, СоставКонтейнера);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РазвернутыеУчастники;
	
КонецФункции

Функция ЭтоДействиеПоПунктам(Действие) Экспорт
	
	ПоПунктам = Ложь;
	Если ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияИсполнения") Тогда
		ПоПунктам = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "ПоПунктам");
	КонецЕсли;	
	
	Возврат ПоПунктам;
	
КонецФункции

// Обработчик регламентного задания СтартОтложенныхПроцессовИДействий - в части действий
Процедура СтартОтложенныхДействий() Экспорт      
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтотУзелОбмена = КОДПовтИсп.ИдентификаторТекущегоУзла();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДействияДляЗапуска.Действие КАК Действие,
		|	ДействияДляЗапуска.ДатаОтложенногоСтарта КАК ДатаОтложенногоСтарта,
		|	ДействияДляЗапуска.Состояние КАК Состояние,
		|	ДействияДляЗапуска.КоличествоПопытокОбработки КАК КоличествоПопытокОбработки,
		|	ДействияДляЗапуска.Предмет КАК Предмет,
		|	ДействияДляЗапуска.АвторДобавленияЗаписи КАК Автор
		|ИЗ
		|	РегистрСведений.НастройкиОтложенногоНачалаВыполненияДействий КАК ДействияДляЗапуска
		|ГДЕ
		|	ДействияДляЗапуска.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияЗапускаДействий.ГотовоКСтарту)
		|	И ДействияДляЗапуска.КоличествоПопытокОбработки <= 3
		|	И ДействияДляЗапуска.ДатаОтложенногоСтарта <= &ТекущаяДата
		|	И ДействияДляЗапуска.ДатаОтложенногоСтарта <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ДействияДляЗапуска.УзелОбработки = &ЭтотУзелОбмена";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ЭтотУзелОбмена", ЭтотУзелОбмена);
	
	Выборка  = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл    
		
		Действие = Выборка.Действие;
		ОжидатьЗавершения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "ОжидатьЗавершения");
		Предмет = Выборка.Предмет;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиОтложенногоНачалаВыполненияДействий");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Действие", Выборка.Действие);
		
		НачатьТранзакцию();
		
		// Пытаемся заблокировать действие и запись в регистре НастройкиОтложенногоНачалаВыполненияДействий.
		// Если не удается, то пропускаем запись и пробуем выполнить при след. обработке.
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Действие);
			Блокировка.Заблокировать();
		Исключение
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
		
		Попытка
			
			РегистрыСведений.НастройкиОтложенногоНачалаВыполненияДействий.ЗарегистрироватьСтарт(Выборка.Действие);

			ОбработкаДействия = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
			Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
			Событие.Обработка = ОбработкаДействия;
			Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.НачалоДействия;
			Событие.Действие = Действие;
			РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
			
			СколькоСоздано = Справочники.ДействияОзнакомления.ЗаполнитьРегистрУчастниковОзнакомленияИВернутьКоличество(Действие);
			
			Если СколькоСоздано <> 0 Тогда
				
				Если ОжидатьЗавершения Тогда    
					
					РегистрыСведений.СостоянияДействий.УстановитьСостояние(Действие, 
						Перечисления.СостоянияВыполненияДействий.Выполняется);	   
						
				Иначе		 
						
					РегистрыСведений.СостоянияДействий.УстановитьСостояние(Действие, 
						Перечисления.СостоянияВыполненияДействий.Завершено);
						
					Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Предмет) Тогда
						Делопроизводство.ЗаписатьСостояниеДокумента(
							Предмет,
							,
							Перечисления.СостоянияДокументов.ОзнакомлениеЗавершено,
							,
							Действие,
							Истина);
							
					ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда
							
						Период = ТекущаяДатаСеанса();	
						
						УправлениеМероприятиями.ЗаписатьСостояниеМероприятия(
							Предмет,
							Период,
							Перечисления.СостоянияМероприятий.СМатериаламиОзнакомились,
							Действие);
							
					КонецЕсли;	
						
					ОбработкаДействия = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
					Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
					Событие.Обработка = ОбработкаДействия;
					Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.ЗавершениеДействия;
					Событие.Действие = Действие;
					РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
						
					// выполним служебную задачу и пойдем дальше. Не используем очередь заданий	
					РаботаСПроцессамиПоОбработкамОбъектов.ПродолжитьВыполнениеОбработкиПослеЗавершенияОзнакомленияСОжиданием(
						Действие);
					
				КонецЕсли;	
					
			Иначе		
					
				РегистрыСведений.СостоянияДействий.УстановитьСостояние(Действие, 
					Перечисления.СостоянияВыполненияДействий.Пропущено);
					
				ОбработкаДействия = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
				Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
				Событие.Обработка = ОбработкаДействия;
				Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.ПропускДействия;
				Событие.Действие = Действие;
				РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);     
				
				// выполним служебную задачу и пойдем дальше. Не используем очередь заданий	
				РаботаСПроцессамиПоОбработкамОбъектов.ПродолжитьВыполнениеОбработкиПослеЗавершенияОзнакомленияСОжиданием(Действие);
					
			КонецЕсли;	
			
			РазблокироватьДанныеДляРедактирования(Выборка.Действие);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Если Выборка.КоличествоПопытокОбработки < 3 Тогда
				РегистрыСведений.НастройкиОтложенногоНачалаВыполненияДействий.ЗарегистрироватьПопыткуСтарта(Выборка.Действие);
			Иначе
				ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				Описание = СтрШаблон(НСтр("ru = 'Во время отложенного старта этого действия произошла ошибка:
					|%1
					|Попробуйте удалить настройку отложенного запуска у этого действия.'"), ОписаниеОшибки);
					
				РегистрыСведений.НастройкиОтложенногоНачалаВыполненияДействий.ЗарегистрироватьОтменуСтарта(
					Выборка.Действие, Описание);
					
				РаботаСУведомлениями.ОбработатьУведомлениеПрограммы(
					Описание,
					Сотрудники.ЛюбойПользовательСотрудника(Выборка.Автор),
					Выборка.Действие);   
					
				ЗаписьЖурналаРегистрации("СтартОтложенныхДействий", УровеньЖурналаРегистрации.Ошибка,,,Описание);	
					
			КонецЕсли;
				
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет действие задачи участника действия обработки.
// 
// Параметры:
//  ДействиеОбработки - ОпределяемыйТип.Действия
//  ИдентификаторУчастника - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  ДокументСсылка.ДействиеЗадачи
// 
Функция ДействиеЗадачиУчастникаДействияОбработки(ДействиеОбработки, ИдентификаторУчастника) Экспорт
	
	Если ДействияКлиентСервер.ЭтоДействиеОзнакомления(ДействиеОбработки) Тогда
		ДействиеЗадачи = ДействиеЗадачиДляСтрокиОзнакомления(ДействиеОбработки, ИдентификаторУчастника);
		Если ЗначениеЗаполнено(ДействиеЗадачи) Тогда
			Возврат ДействиеЗадачи;
		КонецЕсли;
	КонецЕсли;
	
	ЗадачаПроцесса = РаботаСПроцессамиПоДействиям.ЗадачаПроцессаПоУчастникуДействия(
		ДействиеОбработки,
		ИдентификаторУчастника);
	ДействиеЗадачи = Документы.ДействиеЗадачи.НайтиПоИсточнику(ЗадачаПроцесса);
	
	Возврат ДействиеЗадачи;
	
КонецФункции

// Определяет действие задачи и активность задачи участника действия обработки.
// 
// Параметры:
//  ДействиеОбработки - ОпределяемыйТип.Действия
//  ИдентификаторУчастника - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  Структура
// 
Функция ДействиеЗадачиИСостояниеУчастникаДействияОбработки(ДействиеОбработки, ИдентификаторУчастника) Экспорт
	
	ДанныеВозврата = Новый Структура("ДействиеЗадачи, Активна", Неопределено, Ложь);
	
	ДействиеЗадачи = ДействиеЗадачиУчастникаДействияОбработки(ДействиеОбработки, ИдентификаторУчастника);
	Если Не ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		Возврат ДанныеВозврата;
	КонецЕсли;
	
	ДанныеВозврата.ДействиеЗадачи = ДействиеЗадачи;          
	
	СостояниеУчастникаЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеЗадачи, "СостояниеУчастникаЗадачи");
	
	ВидСостоянияУчастниковЗадач = РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(
			СостояниеУчастникаЗадачи);
	ОжидаетВыполнения = Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОжидаемоеДействие(ВидСостоянияУчастниковЗадач);
	
	ДанныеВозврата.Активна = ОжидаетВыполнения;

	Возврат ДанныеВозврата;
	
КонецФункции	

// Вернет действие по задаче
// 
// Параметры:
//	Действие - ОпределяемыйТип.Действия
//	Идентификатор - УникальныйИдентификатор
// 	
// Возвращаемое значение:
//  ДокументСсылка.ДействиеЗадачи
// 
Функция ДействиеЗадачиДляСтрокиОзнакомления(Действие, Идентификатор) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДействиеЗадачи.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ДействиеЗадачи КАК ДействиеЗадачи
		|ГДЕ
		|	ДействиеЗадачи.ИдентификаторВИсточнике = &ИдентификаторВИсточнике
		|	И ДействиеЗадачи.Источник = &Источник");
	
	Запрос.УстановитьПараметр("Источник", Действие);
	Запрос.УстановитьПараметр("ИдентификаторВИсточнике", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДействиеЗадачи = ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
	Возврат ДействиеЗадачи;
	
КонецФункции	

// Заполнить представления в наборе записей участников ознакомлений/участников действий
//
// Параметры:
//  НаборЗаписей - РегистрСведенийНаборЗаписей.УчастникиОзнакомлений,
//                 РегистрСведенийНаборЗаписей.СведенияОбУчастникахДействий
//
Процедура ЗаполнитьПредставленияВНабореЗаписейУчастников(НаборЗаписей) Экспорт
	
	Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл
		
		Если ЗначениеЗаполнено(ЗаписьРегистра.ФактическийИсполнитель) Тогда
			
			ЭтоДействиеПЭП = ДействиеТребуетЗаписиПредставленияСотрудникаДляПЭП(ЗаписьРегистра.Действие);
			
			ИспользуетсяЯзык1 = МультиязычностьСервер.ИспользуетсяПервыйДополнительныйЯзык();
			ИспользуетсяЯзык2 = МультиязычностьСервер.ИспользуетсяВторойДополнительныйЯзык();
			
			ФактИсполнитель = ЗаписьРегистра.ФактическийИсполнитель; 
			РеквизитыФакт = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФактИсполнитель, "Отметил,Факт");
			Если ЗначениеЗаполнено(РеквизитыФакт.Отметил) И РеквизитыФакт.Отметил <> РеквизитыФакт.Факт Тогда
				Отметил = РеквизитыФакт.Отметил;
			Иначе
				Отметил = РеквизитыФакт.Факт;
			КонецЕсли;
			
			Если ЭтоДействиеПЭП Тогда
				
				СтрокаРеквизитовДляПЭП = "Наименование,ПредставлениеДолжностиПодразделения,Должность,Подразделение";
				
				Если ИспользуетсяЯзык1 Тогда
					
					СтрокаРеквизитовДляПЭП = 
						СтрокаРеквизитовДляПЭП + ",НаименованиеЯзык1,ПредставлениеДолжностиПодразделенияЯзык1";
					
				КонецЕсли;
				
				Если ИспользуетсяЯзык2 Тогда
					
					СтрокаРеквизитовДляПЭП = 
						СтрокаРеквизитовДляПЭП + ",НаименованиеЯзык2,ПредставлениеДолжностиПодразделенияЯзык2";
					
				КонецЕсли;
				
				ДанныеПЭП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Отметил, СтрокаРеквизитовДляПЭП);
				
			КонецЕсли;
			
			СтрокаРеквизитовФактическогоИсполнителя = "Факт,План,Отметил,Адресат";
			ДанныеФактическогоИсполнителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФактИсполнитель, 
				СтрокаРеквизитовФактическогоИсполнителя);
				
			Если ЭтоДействиеПЭП Тогда
				
				ПредставлениеСотрудникаДляПЭП = Справочники.Сотрудники.ПредставлениеСотрудникаСУчетомЯзыка(ДанныеПЭП, "");
				
				Если ПредставлениеСотрудникаДляПЭП = "" Тогда
					
					ПредставлениеСотрудникаДляПЭП = "<>";
					
				КонецЕсли;
				
				ЗаписьРегистра.ПредставлениеСотрудникаДляПЭП = ПредставлениеСотрудникаДляПЭП;
				
			КонецЕсли;
			
			ПредставлениеФактическогоИсполнителя = 
				Справочники.ФактическиеИсполнители.ПредставлениеФактическогоИсполнителя(ДанныеФактическогоИсполнителя, Истина, "");
				
			Если ПредставлениеФактическогоИсполнителя = "" Тогда
				
				ПредставлениеФактическогоИсполнителя = "<>";
				
			КонецЕсли;
			
			ЗаписьРегистра.ПредставлениеФактическогоИсполнителя = ПредставлениеФактическогоИсполнителя;
			
			Если ИспользуетсяЯзык1 Тогда
				
				Если ЭтоДействиеПЭП Тогда
					ПредставлениеСотрудника = Справочники.Сотрудники.ПредставлениеСотрудникаСУчетомЯзыка(ДанныеПЭП, "Язык1");
					ЗаписьРегистра.ПредставлениеСотрудникаДляПЭПЯзык1 = ПредставлениеСотрудника;
				КонецЕсли;
				
				ПредставлениеФактическогоИсполнителя = 
					Справочники.ФактическиеИсполнители.ПредставлениеФактическогоИсполнителя(
					ДанныеФактическогоИсполнителя, Истина, "Язык1");
				ЗаписьРегистра.ПредставлениеФактическогоИсполнителяЯзык1 = ПредставлениеФактическогоИсполнителя;
				
			КонецЕсли;
			
			Если ИспользуетсяЯзык2 Тогда
				
				Если ЭтоДействиеПЭП Тогда
					ПредставлениеСотрудника = Справочники.Сотрудники.ПредставлениеСотрудникаСУчетомЯзыка(ДанныеПЭП, "Язык2");
					ЗаписьРегистра.ПредставлениеСотрудникаДляПЭПЯзык2 = ПредставлениеСотрудника;
				КонецЕсли;
				
				ПредставлениеФактическогоИсполнителя = 
					Справочники.ФактическиеИсполнители.ПредставлениеФактическогоИсполнителя(
					ДанныеФактическогоИсполнителя, Истина, "Язык2");
				ЗаписьРегистра.ПредставлениеФактическогоИсполнителяЯзык2 = ПредставлениеФактическогоИсполнителя;
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Представление сотрудника для ПЭП по данным фактического исполнителя
//
// Параметры:
//  Данные - Структура:
// * Отметил - СправочникСсылка.Сотрудники
// * Факт - СправочникСсылка.Сотрудники
// 
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеСотрудникаДляПЭП(Данные) Экспорт
	
	Если ЗначениеЗаполнено(Данные.Отметил) И Данные.Отметил <> Данные.Факт Тогда
		ТекстПодписанта = Строка(Данные.Отметил);
	Иначе
		ТекстПодписанта = Строка(Данные.Факт);
	КонецЕсли;
	
	Возврат ТекстПодписанта;
	
КонецФункции

// Возвращает текст штампа ПЭП
//
// Параметры:
//  СтрокаИсполнитель - СтрокаДереваЗначений:
// * ПредставлениеСотрудникаДляПЭП - Строка
// * ФактическийИсполнитель - СправочникСсылка.ФактическиеИсполнители
//
// Возвращаемое значение:
//  Строка
//
Функция ТекстШтампаПЭППоСтрокеИсполнителя(СтрокаИсполнитель) Экспорт
	
	ПредставлениеСотрудника = СтрокаИсполнитель.ПредставлениеСотрудникаДляПЭП;
	
	// Если не успели отработать обработчики обновления, то ПредставлениеСотрудникаДляПЭП будет пустым
	Если Не ЗначениеЗаполнено(ПредставлениеСотрудника)
		И ЗначениеЗаполнено(СтрокаИсполнитель.ФактическийИсполнитель) Тогда
		
		Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаИсполнитель.ФактическийИсполнитель, "Отметил,Факт");
		ПредставлениеСотрудника = ДействияСервер.ПредставлениеСотрудникаДляПЭП(Данные);
		
	КонецЕсли;
	
	Возврат ДействияСервер.ШтампПЭП(ПредставлениеСотрудника);
	
КонецФункции

// Возвращает текст штампа
//
// Параметры:
//  Отметил - СправочникСсылка.Сотрудники, Строка
// 
// Возвращаемое значение:
//  Строка
//
Функция ШтампПЭП(Отметил) Экспорт
	
	ТекстПодписанта = СокрЛП(Отметил);
	ТекстПодписи = СтрШаблон(
		НСтр("ru = 'ПОДПИСАНО ПРОСТОЙ ЭЛЕКТРОННОЙ ПОДПИСЬЮ
		|%1'"),
		ТекстПодписанта);
	Возврат ТекстПодписи;
	
КонецФункции

// Возвращает участников действия, развернутых из контейнера. Для ролей, исполнитель которых
// неоднозначен, возвращаются сами роли.
//
// Параметры:
//   Контейнер - СправочникСсылка.АвтоподстановкиДляОбъектов
//     СправочникСсылка.Пользователи,
//     СправочникСсылка.СтруктураПредприятия,
//     СправочникСсылка.РабочиеГруппы,
//     СправочникСсылка.ПолныеРоли,
//     СправочникСсылка.ПодразделенияКонтейнеры - разворачиваемый контейнер.
//   Предмет - ОпределяемыйТип.ПредметДействияОбъект.
//   ДляПроверки - Булево - Истина, если нужно получитьодного участника для проверки существования.
//	 МожноВозвращатьПустойМассив - если Истина, и передана роль - в которой нет исполнителей - вернет пустой массив.
//		 - а не массив с самой ролью, как обычно.
//	 СоответствиеСотрудниковВКонтейнерах - Соответствие. Ключ - контейнер, скажем подразделение,
//	   значение - массив сотрудников.
//
// Возвращаемое значение:
//   Массив - СправочникСсылка.Пользователи, СправочникСсылка.ДолжностныеЛица - участники действия.
//
Функция РазвернутыеУчастники(Контейнер, Предмет, ДляПроверки = Ложь,
	МожноВозвращатьПустойМассив = Ложь, СоответствиеСотрудниковВКонтейнерах = Неопределено,
	МожноВернутьСтруктура = Ложь) Экспорт

	РазвернутыеУчастники = Новый Массив;

	Если ТипЗнч(Контейнер) = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов") Тогда // автоподстановка.

		Попытка
			ЗначениеАвтоподстановки = ШаблоныДокументов.ПолучитьЗначениеАвтоподстановки(Контейнер,
				Предмет);
		Исключение // Исключения не показываем: здесь у нас только оформительские задачи.
			Возврат РазвернутыеУчастники;
		КонецПопытки;

		Если ТипЗнч(ЗначениеАвтоподстановки) = Тип("Структура") Тогда
			Элементы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
				ЗначениеАвтоподстановки.РольИсполнителя);
		ИначеЕсли ТипЗнч(ЗначениеАвтоподстановки) = Тип("Массив") Тогда
			Элементы = ЗначениеАвтоподстановки;
		ИначеЕсли ТипЗнч(ЗначениеАвтоподстановки) = Тип("ТаблицаЗначений") Тогда
			Элементы = ЗначениеАвтоподстановки.ВыгрузитьКолонку("Участник");
		ИначеЕсли ЗначениеАвтоподстановки = Неопределено Тогда
			Элементы = Новый Массив;
		Иначе
			Элементы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗначениеАвтоподстановки);
		КонецЕсли;
		
	Иначе // не автоподстановка, в проверке на соответствие правилам коммуникаций сама по себе не нуждается
		
		Элементы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Контейнер);
		
	КонецЕсли;
	
	Для Каждого Элемент Из Элементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("СправочникСсылка.Пользователи") 
			Или ТипЗнч(Элемент) = Тип("СправочникСсылка.Сотрудники") Тогда
			
			РазвернутыеУчастники.Добавить(Элемент);
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("СправочникСсылка.ФактическиеИсполнители") Тогда
			
			РазвернутыеУчастники.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент, "Факт"));
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			
			ДобавлятьВМассив = Истина;
			
			Если СоответствиеСотрудниковВКонтейнерах <> Неопределено Тогда
				Исполнители = СоответствиеСотрудниковВКонтейнерах[Элемент];
				Если Исполнители = Неопределено Тогда
					Исполнители = Новый Массив;
				КонецЕсли;
			Иначе
				Исполнители = РегистрыСведений.СотрудникиВКонтейнерах.СотрудникиВКонтейнере(Элемент);
			КонецЕсли;
			
			Если Исполнители.Количество() = 0 И ТипЗнч(Контейнер) = Тип(
				"СправочникСсылка.ПолныеРоли") И МожноВозвращатьПустойМассив = Истина Тогда
				
				ДобавлятьВМассив = Ложь;
				
			КонецЕсли;
			
			Если ДобавлятьВМассив Тогда
				
				Разворачивать = ?(ДляПроверки, Исполнители.Количество() > 0, Исполнители.Количество() = 1);
				
				РазвернутыеУчастники.Добавить(?(Разворачивать, Исполнители[0], Элемент));
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("Структура") И Элемент.Свойство("Исполнитель") Тогда
				
			Если Не МожноВернутьСтруктура Тогда
				РазвернутыеУчастники.Добавить(Элемент.Исполнитель);
			Иначе
				Если Элемент.ФункцияУчастника <> Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат Тогда
					РазвернутыеУчастники.Добавить(Элемент);
				КонецЕсли;
			КонецЕсли;	
			
		Иначе // прочие контейнеры
			
			Если СоответствиеСотрудниковВКонтейнерах <> Неопределено Тогда
				СоставКонтейнера = СоответствиеСотрудниковВКонтейнерах[Элемент];
				Если СоставКонтейнера = Неопределено Тогда
					СоставКонтейнера = Новый Массив;
				КонецЕсли;
			Иначе
				СоставКонтейнера = РегистрыСведений.СотрудникиВКонтейнерах.СотрудникиВКонтейнере(
					Элемент);
			КонецЕсли;

			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РазвернутыеУчастники, СоставКонтейнера);

		КонецЕсли;

	КонецЦикла;

	Возврат РазвернутыеУчастники;

КонецФункции

// Удаляет пропущенные действия из переданной коллекции действий.
//
// Параметры:
//  Действия - Массив из ОпределяемыйТип.Действия
//
Процедура УдалитьПропущенныеДействия(Действия) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СостоянияДействий.Действие
		|ИЗ
		|	РегистрСведений.СостоянияДействий КАК СостоянияДействий
		|ГДЕ
		|	СостоянияДействий.Действие В (&Действия)
		|	И СостоянияДействий.ИдентификаторПункта = &ПустойИдентификатор
		|	И СостоянияДействий.ИдентификаторУчастника = &ПустойИдентификатор
		|	И СостоянияДействий.Функция = НЕОПРЕДЕЛЕНО
		|	И СостоянияДействий.Участник = НЕОПРЕДЕЛЕНО
		|	И СостоянияДействий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Пропущено)");
	
	Запрос.УстановитьПараметр("Действия", Действия);
	Запрос.УстановитьПараметр("ПустойИдентификатор",
		ОбщегоНазначенияДокументооборотКлиентСервер.ПустойУникальныйИдентификатор());
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Действие");
	
	Для Каждого Элемент Из Результат Цикл
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Действия, Элемент);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ВыполнениеДействий

#Область НаправлениеДействияНовымУчастникам

// Добавляет в доп. свойства действия признак ЗаписьИсполненияДействияСНовымиУчастниками.
//
// Параметры:
//  Действие - ОпределяемыйТип.ДействияОбъект
//
Процедура УстановитьПризнакЗаписиИсполненияДействияСНовымиУчастниками(Действие) Экспорт
		
	Действие.ДополнительныеСвойства.Вставить("ЗаписьИсполненияДействияСНовымиУчастниками", Истина);

КонецПроцедуры

// Возвращает признак ЗаписьИсполненияДействияСНовымиУчастниками из доп. свойств действия.
//
// Параметры:
//  Действие - ОпределяемыйТип.ДействияОбъект
//
// Возвращаемое значение:
//  Булево
//
Функция ПризнакЗаписиИсполненияДействияСНовымиУчастниками(Действие) Экспорт

	Если Действие.ДополнительныеСвойства.Свойство("ЗаписьИсполненияДействияСНовымиУчастниками")
		И Действие.ДополнительныеСвойства.ЗаписьИсполненияДействияСНовымиУчастниками Тогда

		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

// Возвращает признак исполнения действия с новыми участниками. 
// 
// Параметры:
//  Действие - ОпределяемыйТип.ДействияОбъект,
//             ОпределяемыйТип.Действия
// 
// Возвращаемое значение:
//  Булево
//
Функция ДействиеИсполняетсяСНовымиУчастниками(Действие) Экспорт
	
	СсылкаНаДействие = Действие;
	Если Не ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Действие)) Тогда
		СсылкаНаДействие = Действие.Ссылка;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СсылкаНаДействие) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Состояние = РегистрыСведений.СостоянияДействий.СостояниеДействия(СсылкаНаДействие);
	Если Состояние <> Перечисления.СостоянияВыполненияДействий.Завершено
		И Состояние <> Перечисления.СостоянияВыполненияДействий.Пропущено Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ДействиеИсполняетсяУчастниками(СсылкаНаДействие) Тогда
		 Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Устанавливает видимость команды направления действия с новыми участниками.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - открываемая форма действия
//
Процедура УстановитьВидимостьНаправленияНовымУчастникам(Форма) Экспорт	
	
	Объект = Форма.Объект;
	Разрешения = Форма.Разрешения;
	
	НаправитьНовымУчастникам = Ложь;
	
	Если Не Форма.ИсполнениеДействияСНовымиУчастниками Тогда
	
		Состояние = РегистрыСведений.СостоянияДействий.СостояниеДействия(Объект.Ссылка);
		Если Состояние = Перечисления.СостоянияВыполненияДействий.Завершено 
			Или Состояние = Перечисления.СостоянияВыполненияДействий.Пропущено Тогда
			
			Если Объект.Ссылка.Пустая() Тогда
				НастройкиДоступностиДействий.ЗаполнитьРазрешенияПоДействию(
					Объект, Разрешения);
			Иначе
				НастройкиДоступностиДействий.ЗаполнитьРазрешенияПоДействию(
					Объект.Ссылка, Разрешения);
			КонецЕсли;
			
			ЕстьРазрешениеНаИзменение = Ложь;
			Для Каждого СтрокаРазрешения Из Разрешения Цикл
				
				Если СтрокаРазрешения.Разрешение = ПредопределенноеЗначение(
					"Перечисление.ВариантыДоступностиИзмененияДействий.Разрешено") Тогда
					
					ЕстьРазрешениеНаИзменение = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьРазрешениеНаИзменение Тогда
				НаправитьНовымУчастникам = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Действия, отмеченные как выполненные вне программы, нельзя направлять новым участникам
	НаправитьНовымУчастникам = НаправитьНовымУчастникам И Не Форма.Объект.ВыполненоВнеПрограммы;
	
	Форма.Элементы.НаправитьНовымУчастникам.Видимость = НаправитьНовымУчастникам;
	
Конецпроцедуры

#КонецОбласти

// Проверяет актуальность действия для начала выполнения.
//
// Параметры:
//  ДействиеОбъект - СправочникОбъект.<Наименование справочника действий> - объект действия.
//
// Возвращаемое значение:
//  Булево - Истина, если актуально.
//
Функция ДействиеАктуальноДляНачалаВыполнения(ДействиеОбъект) Экспорт
	
	// Если нет необходимости выполнять действие, то ничего не создаем и удаляем его из очереди.
	Если ДействиеОбъект.ПометкаУдаления
		Или ДействиеОбъект.ПомещеноВИсторию
		Или ОбщегоНазначенияДокументооборот.ЭтоПомеченныйНаУдалениеОбъект(ДействиеОбъект.Предмет) Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Готовит действие к выполнению.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия, ОпределяемыйТип.ДействияОбъект
//  
//  Возвращаемое значение - Строка, например "НачатьВыполнение"
//
Функция ПодготовитьДействиеКВыполнению(Действие) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Действие)) Тогда
		ДействиеОснование = Действие.ПолучитьОбъект();
	Иначе
		ДействиеОснование = Действие;
	КонецЕсли;
	
	Если ДействиеОснование.ВыполненоВнеПрограммы Тогда
		Возврат "ПропускДействия";
	КонецЕсли;
	
	РегистрыСведений.РезультатыДействий.УдалитьВсеРезультатыВыполненияДействия(
		ДействиеОснование.Ссылка);
	
	РегистрыСведений.СостоянияДействий.УдалитьВсеСостоянияДействия(
		ДействиеОснование.Ссылка);
	
	ХешПередРазыменованием = ХешДействия(ДействиеОснование);
	ДействиеОснование.Разыменовать(ДействиеОснование.Предмет.ПолучитьОбъект(), Истина);
	ХешПослеРазыменования = ХешДействия(ДействиеОснование);

	Если Не СтрСравнить(ХешПередРазыменованием, ХешПослеРазыменования) = 0 Тогда
		УстановитьПризнакЗаписиДействияПослеРазменованияДляЗапуска(ДействиеОснование);
		ДействиеОснование.Записать();
	КонецЕсли;

	// надо ли пропустить
	ПропуститьДействие = Ложь;
	МенеджерДействия = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДействиеОснование.Ссылка);
	МенеджерДействия.ПроверитьНеобходимостьВыполненияДействия(ДействиеОснование.Ссылка, ПропуститьДействие);

	Если Не ПропуститьДействие Тогда 
		МенеджерДействия = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДействиеОснование.Ссылка);
		МенеджерДействия.ПодготовитьДействиеКВыполнению(ДействиеОснование.Ссылка);  
		РегистрыСведений.ЭскалированныеДействия.УдалитьПоДействию(ДействиеОснование.Ссылка);
		Возврат "НачатьВыполнение";
	Иначе	
		Возврат "ПропускДействия";
	КонецЕсли;

КонецФункции

// Обработает пропуск действия
// 
// Параметры:
// 	Действие - ОпределяемыйТип.Действия
Процедура ПропуститьДействие(Действие) Экспорт
	
	РеквизитыДействий = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие, "ВыполненоВнеПрограммы, Предмет");
	Если РеквизитыДействий.ВыполненоВнеПрограммы Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.СостоянияДействий.УстановитьСостояние(
		Действие, Перечисления.СостоянияВыполненияДействий.Пропущено);
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(РеквизитыДействий.Предмет)
		И (ДействияКлиентСервер.ЭтоДействиеПодписания(Действие)
		Или ДействияКлиентСервер.ЭтоДействиеУтверждения(Действие)) Тогда
		
		ДокументОбъект = РеквизитыДействий.Предмет.ПолучитьОбъект();
		ПодписанУтвержден = Делопроизводство.СтрокаПодписалУтвердил(ДокументОбъект);
		Делопроизводство.ЗаписатьДанныеДокумента(РеквизитыДействий.Предмет, "ПодписанУтвержден", ПодписанУтвержден);
		
	КонецЕсли;
	
	ОбработкиОбъектовСобытия.ПриПропускеДействия(Действие);
	
КонецПроцедуры 

// Отмечает начало выполнения действия участником.
// 
// Параметры:
// 	Действие - ОпределяемыйТип.Действия, ОпределяемыйТип.ДействияОбъект
// 	Параметры - Структура - данных участника.
//
Процедура ОтметитьНачалоВыполнения(Действие, Параметры) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Если ЗначениеЗаполнено(Параметры.Функция) И ЗначениеЗаполнено(Параметры.Участник) Тогда
		
		Если Не ДействияКлиентСервер.ЭтоДействиеОзнакомления(Действие) Тогда 
			
			ПоПунктам = ЭтоДействиеПоПунктам(Действие);
			
			РегистрыСведений.СостоянияДействий.УстановитьСостояние(
				Действие, Перечисления.СостоянияВыполненияДействий.Выполняется, Параметры);
			
			Если ПоПунктам Тогда
					
				РегистрыСведений.РезультатыДействий.УдалитьРезультат(
					Действие, Параметры.Функция, Параметры.Участник, Параметры.ИдентификаторПункта, ?(Параметры.Свойство(
					"ИдентификаторУчастника"), Параметры.ИдентификаторУчастника, Параметры.Идентификатор));
				
			Иначе	
				
					РегистрыСведений.РезультатыДействий.УдалитьРезультат(
						Действие, Параметры.Функция, Параметры.Участник, , ?(Параметры.Свойство(
						"ИдентификаторУчастника"), Параметры.ИдентификаторУчастника, Параметры.Идентификатор));
						
			КонецЕсли;	
				
		КонецЕсли;	
		
		РаботаСРабочимиГруппами.ОтметитьНачалоВыполненияДействия(Действие, Параметры);

	КонецЕсли;
	
	СостояниеДействия = РегистрыСведений.СостоянияДействий.СостояниеДействия(Действие);
	
	Если СостояниеДействия <> Перечисления.СостоянияВыполненияДействий.Завершено Тогда
		
		РегистрыСведений.СостоянияДействий.УстановитьСостояние(
			Действие, Перечисления.СостоянияВыполненияДействий.Выполняется);
	
		РегистрыСведений.РезультатыДействий.УдалитьРезультат(Действие);
		
		Если Не ЗначениеЗаполнено(СостояниеДействия) 
			Или СостояниеДействия = Перечисления.СостоянияВыполненияДействий.ОтложенныйЗапуск Тогда
		
			ТекущаяОбработка = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
		
			Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
			Событие.Обработка = ТекущаяОбработка;
			Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.НачалоДействия;
			Событие.Действие = Действие;
			РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
		КонецЕсли;
		
		УстановитьСостояниеПредметаПоДействию(Действие, Параметры);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.СрокРассчитанный) Или ЗначениеЗаполнено(Параметры.ДатаНачала) Тогда
		Сведения = Новый Структура(
			"Действие, ИдентификаторУчастника, ФактическийИсполнитель, СрокРассчитанный, ДатаНачала",
			Действие, 
			Параметры.ИдентификаторУчастника,
			Неопределено, // ФактическийУчастник, 
			Параметры.СрокРассчитанный,
			Параметры.ДатаНачала);
		
		РегистрыСведений.СведенияОбУчастникахДействий.ЗаписатьСведения(
			Действие, Параметры.ИдентификаторУчастника, Сведения);
	КонецЕсли;	

	Контроль.ОтметитьВыполнениеПоДействию(Действие, Параметры);
	
	РаботаСВнешнимПодписанием.ПриОтметкеНачалаВыполненияДействия(Действие, Параметры);
	
КонецПроцедуры

// Отмечает действие выполненным Участником.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия, ОпределяемыйТип.ДействияОбъект
//  Параметры - Структура
//
Процедура ОтметитьВыполнение(Действие, Параметры) Экспорт    
	
	ОбновлятьСостоянияДействий = Истина;
	Если Параметры.Свойство("ОбновлятьСостоянияДействий") Тогда
		ОбновлятьСостоянияДействий = Параметры.ОбновлятьСостоянияДействий;
	КонецЕсли;	
	
	Если ОбновлятьСостоянияДействий Тогда
		Если ЗначениеЗаполнено(Параметры.Результат) Тогда
			РегистрыСведений.РезультатыДействий.УстановитьРезультат(
				Действие, Параметры.Результат, Параметры);
		КонецЕсли;

		РегистрыСведений.СостоянияДействий.УстановитьСостояние(
			Действие, Перечисления.СостоянияВыполненияДействий.Завершено, Параметры);
	КонецЕсли;
	
	ТекущаяОбработка = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);

	Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
	ЗаполнитьЗначенияСвойств(Событие, Параметры);
	Событие.Обработка = ТекущаяОбработка;
	Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.Выполнение;
	Событие.Действие = Действие;
	Событие.Описание = Параметры.Комментарий;
	Событие.ИдентификаторУчастника = ?(
		Параметры.Свойство("ИдентификаторУчастника"), Параметры.ИдентификаторУчастника,
		Параметры.Идентификатор);
	
	РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
	
	УстановитьСостояниеПредметаПоДействию(Действие, Параметры);
	Контроль.ОтметитьВыполнениеПоДействию(Действие, Параметры);
	
	РаботаСВнешнимПодписанием.ПриОтметкеВыполненияДействия(Действие, Параметры);
	
КонецПроцедуры

// Сбросит результаты участников при переходе на следующий цикл
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия - ссылка на действие
//  Участники       - ТаблицаЗначений
//
Процедура СброситьРезультатыВыполнения(Действие, Участники) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	ЕстьЭтапы = ДействияКлиентСервер.ЭтоДействиеСЭтапами(Действие);
	
	ПоПунктам = ЭтоДействиеПоПунктам(Действие);
	
	Для Каждого Стр Из Участники Цикл
		Если ЕстьЭтапы Тогда
			РегистрыСведений.РезультатыДействий.УдалитьРезультат(
				Действие, Стр.Функция, Стр.Участник, Стр.ИдентификаторЭтапа, Стр.Идентификатор);
	
			РегистрыСведений.СостоянияДействий.УдалитьСостояние(
				Действие, Стр.Функция, Стр.Участник, Стр.ИдентификаторЭтапа, Стр.Идентификатор);
				
		ИначеЕсли ПоПунктам Тогда  
				
			РегистрыСведений.РезультатыДействий.УдалитьРезультат(
				Действие, Стр.Функция, Стр.Участник, Стр.ИдентификаторПункта, Стр.Идентификатор);
	
			РегистрыСведений.СостоянияДействий.УдалитьСостояние(
				Действие, Стр.Функция, Стр.Участник, Стр.ИдентификаторПункта, Стр.Идентификатор);
				
		Иначе
			
			РегистрыСведений.РезультатыДействий.УдалитьРезультат(
				Действие, Стр.Функция, Стр.Участник, , Стр.Идентификатор);
	
			РегистрыСведений.СостоянияДействий.УдалитьСостояние(
				Действие, Стр.Функция, Стр.Участник, , Стр.Идентификатор);
		КонецЕсли;
		
		РегистрыСведений.СведенияОбУчастникахДействий.УдалитьСведения(Действие, Стр.Идентификатор);

	КонецЦикла;
	
	МенеджерДействия = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Действие);
	МенеджерДействия.ПриСбросеРезультатовВыполнения(Действие, Участники);
	МенеджерДействия.ОбновитьРезультатВыполнения(Действие);

КонецПроцедуры

// Прерывает выполнение действия обработки.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия.
//
Процедура ПрерватьВыполнениеДействия(Действие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СостояниеДействия = РегистрыСведений.СостоянияДействий.СостояниеДействия(Действие);
	Если СостояниеДействия <> Перечисления.СостоянияВыполненияДействий.Выполняется
		И СостояниеДействия <> Перечисления.СостоянияВыполненияДействий.Остановлено Тогда
		
		ВызватьИсключение
			НСтр("ru = 'Прервать выполнение возможно только выполняющегося действия.'");
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		РегистрыСведений.РезультатыДействий.УдалитьВсеРезультатыВыполненияДействия(Действие);
		РегистрыСведений.СостоянияДействий.УдалитьВсеСостоянияДействия(Действие);
		
		МенеджерДействия = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Действие);
		МенеджерДействия.ПриПрерыванииВыполненияДействия(Действие);
		
		УдалитьСостояниеПредметаПоДействию(Действие);
		
		РаботаСПроцессамиПоДействиямСобытия.ПриПрерыванииВыполнениеДействия(Действие);
		
		ОбработкиОбъектовСобытия.ПриПрерыванииДействия(Действие);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	РаботаСВнешнимПодписанием.ПриПрерыванииВыполненияДействия(Действие);
	
КонецПроцедуры

// Удаляет результат выполнения действия.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия.
//
Процедура УдалитьРезультатыВыполненияДействия(Действие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СостояниеДействия = РегистрыСведений.СостоянияДействий.СостояниеДействия(Действие);
	Если СостояниеДействия <> Перечисления.СостоянияВыполненияДействий.Завершено
		И СостояниеДействия <> Перечисления.СостоянияВыполненияДействий.Пропущено Тогда
		
		ВызватьИсключение
			НСтр("ru = 'Удалить результаты выполнения возможно только для завершенных действий.'");
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		РегистрыСведений.РезультатыДействий.УдалитьВсеРезультатыВыполненияДействия(Действие);
		РегистрыСведений.СостоянияДействий.УдалитьВсеСостоянияДействия(Действие);
		
		МенеджерДействия = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Действие);
		МенеджерДействия.ПриУдаленииРезультатовВыполнения(Действие);
		
		УдалитьСостояниеПредметаПоДействию(Действие);
		
		ОбработкиОбъектовСобытия.ПриУдаленииРезультатовДействия(Действие);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ИсторияДействий

// Помещает действие в историю, обрабатывая связанные с ним данные.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия - ссылка на действие.
//  ПричинаПрерывания - Строка - причина помещения действий в историю.
//
Процедура ПоместитьДействиеВИсторию(Действие, ПричинаПрерывания = "") Экспорт

	МенеджерДействия = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Действие);
	МенеджерДействия.ПоместитьДействиеВИсторию(Действие, ПричинаПрерывания);
	
	УдалитьСостояниеПредметаПоДействию(Действие);
	РаботаСВнешнимПодписанием.ПриПомещенииДействияВИсторию(Действие);  
	
	ОбработкаОчередиЗаданийСервер.УдалитьЗаданияСОшибками(Действие);

КонецПроцедуры

// Добавляет в доп. свойства действия признак ЗаписьДействияПриПомещенииВИсторию.
//
// Параметры:
//  Действие - ОпределяемыйТип.ДействияОбъект
//
Процедура УстановитьПризнакЗаписиДействияПриПомещенииВИсторию(Действие) Экспорт

	Действие.ДополнительныеСвойства.Вставить("ЗаписьДействияПриПомещенииВИсторию", Истина);

КонецПроцедуры

// Возвращает признак ЗаписьДействияПриПомещенииВИсторию из доп. свойств действия.
//
// Параметры:
//  Действие - ОпределяемыйТип.ДействияОбъект
//
// Возвращаемое значение:
//  Булево
//
Функция ПризнакЗаписиДействияПриПомещенииВИсторию(Действие) Экспорт

	Если Действие.ДополнительныеСвойства.Свойство("ЗаписьДействияПриПомещенииВИсторию")
		И Действие.ДополнительныеСвойства.ЗаписьДействияПриПомещенииВИсторию Тогда

		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

#КонецОбласти

// Устанавливает управляемую блокировку на кэширующие регистры сведений по предмету
//
Процедура УстановитьБлокировкиПоПредмету(Предмет) Экспорт

	Если Не ЗначениеЗаполнено(Предмет) Тогда
		Возврат;
	КонецЕсли;

	Блокировка = Новый БлокировкаДанных;
	ЗаполнитьБлокировкиПоПредмету(Предмет, Блокировка);
	Блокировка.Заблокировать();

КонецПроцедуры

// Заполняет реквизиты подписания утверждения в форме.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ПараметрыВидаОбъекта - Структура - Параметры вида объекта. См. ДействияКлиентСервер.НовыйПараметрыВидаОбъекта().
//  Перезаполнить - Булево - Перезаполнить реквизиты объекта
//
Процедура ЗаполнитьРеквизитыПодписанияУтвержденияВФорме(Форма, ПараметрыВидаОбъекта, Перезаполнить = Ложь) Экспорт
	
	Объект = Форма.Объект;
	
	Форма.ЕстьДействияУтверждения = ВОбработкеПредметаЕстьДействияТипа(Форма,
		Перечисления.ТипыДействий.Утверждение);
	
	Форма.ЕстьДействияПодписания = ВОбработкеПредметаЕстьДействияТипа(Форма,
		Перечисления.ТипыДействий.Подписание);
	
	Если Форма.ЕстьДействияПодписания Тогда
		
		ПодписантыИзДействий = ПодписантыПредметаПоФункции(Форма,
			Перечисления.ФункцииУчастниковПодписания.Подписывающий);
		Форма.ПодписантыИзДействий = ПодписантыИзДействий.РазыменованныеПодписанты;
		Форма.ПодписантыПоОрганизациям = ПодписантыИОбеспечивающиеПодписаниеПредметаПоОрганизациям(Форма);
		
		Если Форма.ПодписантыПоОрганизациям.Количество() Тогда
			Для Каждого СтрокаСтороны Из Объект.Стороны Цикл
				Если РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(СтрокаСтороны.Сторона)
					И Форма.ПодписантыПоОрганизациям.Получить(СтрокаСтороны.Сторона) <> Неопределено
					И Форма.ПодписантыПоОрганизациям[СтрокаСтороны.Сторона].Количество() > 1 Тогда
					
					СтрокаСтороны.НесколькоПодписантовВДействиях = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Форма.Элементы.УтверждениеТекст.Видимость = Форма.ЕстьДействияУтверждения
		И Не Форма.ЯвляетсяКомплектом;
	Форма.Элементы.ПодписьТекст.Видимость = Форма.ЕстьДействияПодписания 
		И Не ПараметрыВидаОбъекта.ВестиУчетСторон
		И Не Форма.ЯвляетсяКомплектом;
	
	Если Форма.ПодписантыИзДействий.Количество() И Перезаполнить Тогда
		
		Объект.Подписал = Форма.ПодписантыИзДействий[0].Значение;
		
		Для Н = 0 По Объект.Стороны.Количество() - 1 Цикл
			Сторона = Объект.Стороны[Н];
			Если ТипЗнч(Сторона.Сторона) = Тип("СправочникСсылка.Организации") Тогда
				Сторона.Подписал = Форма.ПодписантыИзДействий[0].Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Форма.ЕстьДействияПодписания И ПодписантыИзДействий.Подписанты.Количество() И Перезаполнить Тогда
		Форма.ПодписьТекст = СтрШаблон(НСтр("ru = 'Нет (%1)'"), ПодписантыИзДействий.Подписанты[0]);
	КонецЕсли;
	
	Если Форма.Элементы.ПодписьТекст.Видимость И Не Объект.Ссылка.Пустая() Тогда
		Форма.ПодписьТекст = Делопроизводство.ПолучитьСтрокуПодписи(Объект.Ссылка, Объект.ВидДокумента,
				Новый Структура("ВариантДа, ВариантНет", НСтр("ru = 'Да'"), НСтр("ru = 'Нет'")));
	КонецЕсли;
	
	Форма.УтверждениеТекст = Делопроизводство.ПолучитьСтрокуУтверждения(Объект.Ссылка, Объект.ВидДокумента,
		Новый Структура("ВариантДа, ВариантНет", НСтр("ru = 'Да'"), НСтр("ru = 'Нет'")));
	
КонецПроцедуры

// Возвращает флаг разрешенности изменения и удаления защищенных участников обработки.
// 
// Возвращаемое значение:
// 	Булево
//
Функция РазрешеноИзменятьЗащищенныхУчастников() Экспорт

	Возврат Пользователи.ЭтоПолноправныйПользователь();
	
КонецФункции

// Устанавливает признак защищенности участников в настройке действия,
// чтобы в дальнейшем по этому признаку можно было отследить, можно ли установить или снять
// защищенность участника в форме действия.
// Используется в ПриСозданииНаСервере форм действий.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - открываемая форма действия.
//
Процедура УстановитьЗащищенностьУчастниковВНастройке(Форма) Экспорт
	
	СтрокиУчастников = Новый Массив;
	Для Каждого Участник Из Форма.Участники.ПолучитьЭлементы() Цикл
		Если Участник.ЭтоЭтап Тогда
			Для Каждого СтрокаУчастника Из Участник.ПолучитьЭлементы() Цикл
				СтрокиУчастников.Добавить(СтрокаУчастника);
			КонецЦикла;
		Иначе
			СтрокиУчастников.Добавить(Участник);
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьРеквизитЗащищенныйВНастройке(Форма.Объект, СтрокиУчастников);
	
КонецПроцедуры

// Устанавливает признак защищенности участников в настройке действия,
// чтобы в дальнейшем по этому признаку можно было отследить, можно ли установить или снять
// защищенность участника в форме действия.
// Используется в ПриСозданииНаСервере форм действий.
//
// Параметры:
//   Действие - ОпределяемыйТип.ДействияОбъект
//   Участники - Массив из ДанныеФормыЭлементДерева
//
Процедура ЗаполнитьРеквизитЗащищенныйВНастройке(Действие, Участники) Экспорт
	
	Настройка = Действие.НастройкаДействия;
	Если Не ЗначениеЗаполнено(Настройка) Тогда
		Возврат;
	КонецЕсли;
	
	УчастникиВНастройке = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Настройка, "Участники").Выгрузить();
	
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Отбор = Новый Структура("Участник");
		
		// Если участник получился разыменованием то нужно искать его по источнику.
		СтрокиИсточников = Действие.Источники.НайтиСтроки(Новый Структура("Идентификатор", СтрокаУчастника.Идентификатор));
		Если СтрокиИсточников.Количество() Тогда
			Отбор.Участник = СтрокиИсточников[0].Источник;
		Иначе
			Отбор.Участник = СтрокаУчастника.Участник;
		КонецЕсли;
		
		Если УчастникиВНастройке.Колонки.Найти("ФункцияУчастника") <> Неопределено Тогда
			Отбор.Вставить("ФункцияУчастника", СтрокаУчастника.Функция);
		КонецЕсли;
		Если УчастникиВНастройке.Колонки.Найти("Функция") <> Неопределено Тогда
			Отбор.Вставить("Функция", СтрокаУчастника.Функция);
		КонецЕсли;
		
		СтрокиИзНастройки = УчастникиВНастройке.НайтиСтроки(Отбор);
		
		Если СтрокиИзНастройки.Количество() Тогда
			СтрокаУчастника.ЗащищенныйВНастройке = СтрокиИзНастройки[0].Защищенный;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает признак создания этапа из настройки действия. Признак запрещает удаление этапов, созданных из
// настройки действия, для пользователей без полных прав.
// Используется в ПриСозданииНаСервере форм действий.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - открываемая форма действия.
//
Процедура УстановитьПризнакИзНастройкиДляЭтапов(Форма) Экспорт
	
	// Администратору разрешаем удалять этапы, созданные из настройки действия
	Если Сотрудники.ЭтоПолноправныйСотрудник(Сотрудники.ОсновнойСотрудник()) Тогда
		Возврат;
	КонецЕсли;
	
	Действие = Форма.Объект;
	Настройка = Действие.НастройкаДействия;
	Если Не ЗначениеЗаполнено(Настройка) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтапВНастройке = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Настройка, "Этапы").Выгрузить();
	
	Для Каждого СтрокаЭтапа Из Форма.Участники.ПолучитьЭлементы() Цикл
		
		Отбор = Новый Структура("Идентификатор", СтрокаЭтапа.Идентификатор);
		
		СтрокиИзНастройки = ЭтапВНастройке.НайтиСтроки(Отбор);
		
		Если СтрокиИзНастройки.Количество() Тогда
			СтрокаЭтапа.ИзНастройки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет обеспечивающих подписание из списка участников Действия или настройки действия.
// Срабатывает при смене способа подписания с "бумаги" на "электронную форму".
// 
// Параметры:
//  Участники - ТабличнаяЧасть - таблица участников
//
Процедура УдалитьОбеспечивающихПодписание(Участники) Экспорт
	
	// Удалим обеспечивающих подписание
	УчастникиКУдалению = Новый Массив();
	Для Каждого Участник Из Участники Цикл
		Если Не Участник.ФункцияУчастника = Перечисления.ФункцииУчастниковПодписания.ОбеспечивающийПодписание Тогда
			Продолжить;
		КонецЕсли;
		
		УчастникиКУдалению.Добавить(Участник);
	КонецЦикла;
	
	Для Каждого УчастникКУдалению Из УчастникиКУдалению Цикл
		Участники.Удалить(УчастникКУдалению);
	КонецЦикла;
		
КонецПроцедуры

// Возвращает текст запроса поиска действий предмета.
// 
// Параметры:
//  Предмет  - ЛюбаяСсылка - Ссылка на предмет.
//  ВременнаяТаблица - Булево - признак помещения запроса во временную таблицу.
// 
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция ТекстЗапросаДействияПредмета(Предмет, ВременнаяТаблица = Истина) Экспорт
	
	ТекстЗапросаПоДействиям = "";	
	Если Не ДелопроизводствоКлиентСервер.ЭтоДокумент(Предмет)
		И Не ДелопроизводствоКлиентСервер.ЭтоМероприятие(Предмет) Тогда
		Возврат ТекстЗапросаПоДействиям;
	КонецЕсли;
	
	ТекстЗапросаПоДействиям = 
		"ВЫБРАТЬ
		|	Действие.Ссылка
		|ПОМЕСТИТЬ ВсеДействия
		|ИЗ
		|	Справочник.ДействияИсполнения КАК Действие
		|ГДЕ
		|	Действие.Предмет В (&Предметы)
		|	И НЕ Действие.ПометкаУдаления
		|	И НЕ Действие.ПомещеноВИсторию
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Действие.Ссылка
		|ИЗ
		|	Справочник.ДействияОзнакомления КАК Действие
		|ГДЕ
		|	Действие.Предмет В (&Предметы)
		|	И НЕ Действие.ПометкаУдаления
		|	И НЕ Действие.ПомещеноВИсторию
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Действие.Ссылка
		|ИЗ
		|	Справочник.ДействияПодписания КАК Действие
		|ГДЕ
		|	Действие.Предмет В (&Предметы)
		|	И НЕ Действие.ПометкаУдаления
		|	И НЕ Действие.ПомещеноВИсторию
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Действие.Ссылка
		|ИЗ
		|	Справочник.ДействияРегистрации КАК Действие
		|ГДЕ
		|	Действие.Предмет В (&Предметы)
		|	И НЕ Действие.ПометкаУдаления
		|	И НЕ Действие.ПомещеноВИсторию
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Действие.Ссылка
		|ИЗ
		|	Справочник.ДействияСогласования КАК Действие
		|ГДЕ
		|	Действие.Предмет В (&Предметы)
		|	И НЕ Действие.ПометкаУдаления
		|	И НЕ Действие.ПомещеноВИсторию
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Действие.Ссылка
		|ИЗ
		|	Справочник.ДействияУтверждения КАК Действие
		|ГДЕ
		|	Действие.Предмет В (&Предметы)
		|	И НЕ Действие.ПометкаУдаления
		|	И НЕ Действие.ПомещеноВИсторию;";
		
	Если Не ВременнаяТаблица Тогда
		ТекстЗапросаПоДействиям = СтрЗаменить(ТекстЗапросаПоДействиям, 
			"ПОМЕСТИТЬ ВсеДействия", "");
		ТекстЗапросаПоДействиям = Лев(ТекстЗапросаПоДействиям, СтрДлина(ТекстЗапросаПоДействиям) - 1);
	КонецЕсли;
	
	Возврат ТекстЗапросаПоДействиям;
	
КонецФункции

// Действующие сотрудники в контейнерах.
// 
// Параметры:
//  Контейнеры - Массив Из ОпределяемыйТип.КонтейнерыСотрудников - Контейнеры
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//   * Ключ - ОпределяемыйТип.КонтейнерыСотрудников - Контейнер
//   * Значение - Массив Из СправочникСсылка.Сотрудники
//
Функция ДействующиеСотрудникиВКонтейнерах(Контейнеры) Экспорт
	
	СотрудникиВКонтейнерах = РегистрыСведений.СотрудникиВКонтейнерах.СотрудникиВКонтейнерах(Контейнеры);
	
	ВсеСотрудникиВКонтейнерах = Новый Массив; // Массив Из СправочникСсылка.Сотрудники
	Для Каждого КлючЗначение Из СотрудникиВКонтейнерах Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеСотрудникиВКонтейнерах, КлючЗначение.Значение, Истина);
	КонецЦикла;
	
	РеквизитыСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВсеСотрудникиВКонтейнерах, "Действует");
	
	Для Каждого КлючЗначение Из СотрудникиВКонтейнерах Цикл
		КУдалению = Новый Массив;
		Для Каждого Сотрудник Из КлючЗначение.Значение Цикл
			СотрудникДействует = РеквизитыСотрудников[Сотрудник];
			Если Не СотрудникДействует Тогда
				КУдалению.Добавить(Сотрудник);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Сотрудник Из КУдалению Цикл
			КлючЗначение.Значение.Удалить(КлючЗначение.Значение.Найти(Сотрудник));
		КонецЦикла;
	КонецЦикла;
	
	Возврат СотрудникиВКонтейнерах;
	
КонецФункции

// Подсказка кнопки "Разные сроки" в некоторых формах действий.
// 
// Параметры:
//  ПоПунктам - Булево -
//  ПоЭтапам - Булево -
// 
// Возвращаемое значение:
//  Строка - Подсказка
Функция ПодсказкаКнопкиРазныеСроки(ПоПунктам, ПоЭтапам) Экспорт
	
	Уточнение = "";
	Если ПоПунктам Тогда
		Уточнение = НСтр("ru = ', в пределах пункта'")
	ИначеЕсли ПоЭтапам Тогда
		Уточнение = НСтр("ru = ', в пределах этапа'")
	КонецЕсли;
	
	Возврат СтрШаблон(
		НСтр("ru = 'Включить возможность указания разных сроков для участников%1'"), Уточнение);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВсеОбработкиОбъекта(Объект) 

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
						  |	ОбработкиОбъектов.Ссылка КАК Ссылка,
						  |	ОбработкиОбъектов.ДатаСоздания КАК ДатаСоздания
						  |ИЗ
						  |	Справочник.ОбработкиОбъектов КАК ОбработкиОбъектов
						  |ГДЕ
						  |	ОбработкиОбъектов.Владелец = &Объект");

	Запрос.УстановитьПараметр("Объект", Объект);

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Формирует текстовое представление результата в элементе дерева обработки документа.
//
Процедура СформироватьПредставлениеРезультата(Действие, ЭлементДействия, УАрбитра,
	ЕстьЗаявкаОтказа, Предмет, ЭтапОбработкиПредмета)

	Если УАрбитра И ЭлементДействия.Состояние
		= Перечисления.СостоянияВыполненияДействий.Выполняется Тогда
		СостояниеСтрокой = НСтр("ru = 'У арбитра'");
	ИначеЕсли ЭлементДействия.Состояние = Перечисления.СостоянияВыполненияДействий.Пропущено Тогда
		СостояниеСтрокой = НСтр("ru = 'Пропущено'");
	ИначеЕсли ЕстьЗаявкаОтказа И ЭлементДействия.Состояние
		= Перечисления.СостоянияВыполненияДействий.Выполняется Тогда
		СостояниеСтрокой = НСтр("ru = 'Отказ'");
	Иначе
		
		Состояние = СостояниеДокументаДляПредставленияПоСостояниюРезультатуДействия(
			Действие,
			ЭлементДействия.Состояние,
			ЭлементДействия.Результат,
			ЭлементДействия.Функция,
			Предмет,
			ЭтапОбработкиПредмета);

		Если Не ЗначениеЗаполнено(Состояние) Тогда
			Если ЗначениеЗаполнено(ЭлементДействия.Результат) Тогда
				СостояниеСтрокой = Строка(ЭлементДействия.Результат);
				
				Если ЭлементДействия.ЭтоДействие
					И Не ЭлементДействия.ЭтоУчастник 
					И ЭлементДействия.Результат = Перечисления.РезультатыОзнакомления.Ознакомлен Тогда
					СостояниеСтрокой = Перечисления.СостоянияДокументов.ПредставлениеОзнакомлен();
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(ЭлементДействия.Состояние) Тогда
				СостояниеСтрокой = Строка(ЭлементДействия.Состояние);
				
				Если ЭлементДействия.ЭтоДействие 
					И ЭлементДействия.Состояние = Перечисления.СостоянияВыполненияДействий.ОтложенныйЗапуск Тогда
					СостояниеСтрокой = Перечисления.СостоянияВыполненияДействий.ПредставлениеОтложенногоВыполнения(Действие);
				КонецЕсли;
			Иначе
				СостояниеСтрокой = "";
			КонецЕсли;
		Иначе
			СостояниеСтрокой = Строка(Состояние);
			Если ЭлементДействия.ЭтоДействие
				И Не ЭлементДействия.ЭтоУчастник  
				И Состояние = Перечисления.СостоянияДокументов.ОзнакомлениеЗавершено Тогда
				СостояниеСтрокой = Перечисления.СостоянияДокументов.ПредставлениеОзнакомлен();
				
			ИначеЕсли ЭлементДействия.ЭтоДействие 
				И ЭлементДействия.Состояние = Перечисления.СостоянияВыполненияДействий.ОтложенныйЗапуск Тогда
				СостояниеСтрокой = Перечисления.СостоянияВыполненияДействий.ПредставлениеОтложенногоВыполнения(Действие);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ЭлементДействия.ПредставлениеРезультата = СостояниеСтрокой;
	
	Если ЭлементДействия.СколькоВсегоНадоОзнакомить <> 0 Тогда   
		
		ВывестиСколькоОзнакомлено = Истина;
		
		Если ЭлементДействия.ЭтоУчастник 
			И (ТипЗнч(ЭлементДействия.Участник) = Тип("СправочникСсылка.Сотрудники") 
			Или ТипЗнч(ЭлементДействия.Участник) = Тип("СправочникСсылка.ПолныеРоли")) Тогда
			ВывестиСколькоОзнакомлено = Ложь;
		КонецЕсли;	
			
		Если ВывестиСколькоОзнакомлено Тогда
			Если ЗначениеЗаполнено(ЭлементДействия.ПредставлениеРезультата) Тогда             
				ЭлементДействия.ПредставлениеРезультата = ЭлементДействия.ПредставлениеРезультата + ", ";
			КонецЕсли;	
			
			ЭлементДействия.ПредставлениеРезультата = ЭлементДействия.ПредставлениеРезультата 
				+ СтрШаблон(НСтр("ru = 'Ознакомлено %1 из %2'"), 
				ЭлементДействия.СколькоОзнакомлено, ЭлементДействия.СколькоВсегоНадоОзнакомить);
				
		КонецЕсли;		
		
	КонецЕсли;	

КонецПроцедуры

// Заполняет состояния и результаты действия.
// 
Процедура ЗаполнитьСостоянияИРезультатыВФормеПредмета(ЭлементДействие, ДействиеОбъект,
	КэшДанных = Неопределено, ПечатьКарточкиДокумента = Ложь)

	ДействиеСсылка = ДействиеОбъект.Ссылка;
	Если Не ЗначениеЗаполнено(ДействиеСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ДействиеУАрбитра = Ложь;
	ЭтапОбработкиПредмета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДействиеОбъект.ВидДействия,
		"ЭтапОбработкиПредмета");
	
	Если КэшДанных <> Неопределено Тогда
		ВсеСостоянияИРезультаты = КэшДанных.Получить("ВсеСостоянияИРезультаты");
		ДействиеУАрбитра = КэшДанных.Получить("ВсеДействияУАрбитра").Найти(ДействиеСсылка)
			<> Неопределено;
	КонецЕсли;

	Если ВсеСостоянияИРезультаты = Неопределено Тогда
		ВсеСостоянияИРезультаты = ВсеСостоянияИРезультаты(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДействиеСсылка));
	КонецЕсли;
	
	// Установка состояний и результатов.
	СтрокиДляОбработки = Новый Массив;
	СтрокиДляОбработки.Добавить(ЭлементДействие);
	Пока СтрокиДляОбработки.Количество() > 0 Цикл

		Стр = СтрокиДляОбработки[0];
		СтрокиДляОбработки.Удалить(0);

		Если Не ПечатьКарточкиДокумента Тогда
			СтрЭлементы = Стр.ПолучитьЭлементы();
		Иначе	
			СтрЭлементы = Стр.Строки;
		КонецЕсли;	 
		
		Если Стр.ЭтоДействие И Не Стр.ЭтоУчастник Тогда
			Стр.СколькоВсегоНадоОзнакомить = 0;
			Стр.СколькоОзнакомлено = 0;
		КонецЕсли;	
		
		ЕстьДочерние = Ложь;
		Для Каждого ПодчиненнаяСтрока Из СтрЭлементы Цикл
			
			СтрокиДляОбработки.Добавить(ПодчиненнаяСтрока);
			Если Не ПодчиненнаяСтрока.ЭтоВеткаПодзадачи Тогда
				ЕстьДочерние = Истина;
			КонецЕсли;	

			Если Стр.ЭтоДействие Тогда
				Стр.СколькоВсегоНадоОзнакомить = Стр.СколькоВсегоНадоОзнакомить + ПодчиненнаяСтрока.СколькоВсегоНадоОзнакомить;
				Стр.СколькоОзнакомлено = Стр.СколькоОзнакомлено + ПодчиненнаяСтрока.СколькоОзнакомлено;
			КонецЕсли;	
			
		КонецЦикла;     
		
		Если Стр.ЭтоЭтап И ЗначениеЗаполнено(Стр.СрокРассчитанный) 
			И Стр.СрокРассчитанный < ТекущаяДатаСеанса() Тогда
			Стр.СрокПревышен = Истина;
		КонецЕсли;

		ИдентификаторУчастникаСсылка = Неопределено;
		СтруктураОтбора = Новый Структура("Действие, Функция, ИдентификаторУчастника, ИдентификаторПункта",
			ДействиеСсылка);

		Если Стр.ЭтоДействие Тогда
			СтруктураОтбора.Функция = Неопределено;
			СтруктураОтбора.ИдентификаторУчастника = Неопределено;
			СтруктураОтбора.ИдентификаторПункта = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор();
		ИначеЕсли Не Стр.ЭтоУчастник И Не Стр.ЭтоПодзадача И Не Стр.ЭтоВеткаПодзадачи Тогда
			СтруктураОтбора.Функция = Неопределено;
			СтруктураОтбора.ИдентификаторУчастника = Неопределено;
			СтруктураОтбора.ИдентификаторПункта = Стр.ИдентификаторПункта;
		ИначеЕсли Стр.ЭтоУчастник Тогда
			// Участника ищем только по ИД, он всегда уникален.
			СтруктураОтбора = Новый Структура("Действие, Функция, ИдентификаторУчастника", 
				ДействиеСсылка, Стр.Функция, Стр.Идентификатор);
			ИдентификаторУчастникаСсылка = Стр.Участник;
		Иначе
			Продолжить;
		КонецЕсли;

		ЕстьЗаявкаОтказа = Ложь;

		НайденныеСтроки = ВсеСостоянияИРезультаты.НайтиСтроки(СтруктураОтбора);
		
		Если НайденныеСтроки.Количество() = 0 И ИдентификаторУчастникаСсылка <> Неопределено Тогда
			СтруктураОтбора = Новый Структура("Действие, ИдентификаторУчастника", ДействиеСсылка,
				ИдентификаторУчастникаСсылка);
			НайденныеСтроки = ВсеСостоянияИРезультаты.НайтиСтроки(СтруктураОтбора);
		КонецЕсли;

		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденнаяСтрока = НайденныеСтроки[0]; 
			
			НайденнаяСтрокаУчастника = Неопределено;
			Если Не ЕстьДочерние И Стр.ЭтоДействие И Стр.ЭтоУчастник Тогда           
				СтруктураОтбора.ИдентификаторУчастника = Стр.Идентификатор;
				СтруктураОтбора.ИдентификаторПункта = Стр.ИдентификаторПункта;
				СтруктураОтбора.Функция = Стр.Функция;                        
				
				Если ДействияКлиентСервер.ЭтоДействиеИсполнения(Стр.Действие) Тогда
					СтруктураОтбора.ИдентификаторПункта = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор();
				КонецЕсли;	
				
				НайденныеСтрокиУчастника = ВсеСостоянияИРезультаты.НайтиСтроки(СтруктураОтбора);
				Если НайденныеСтрокиУчастника.Количество() > 0 Тогда
					НайденнаяСтрокаУчастника = НайденныеСтрокиУчастника[0];
				КонецЕсли;		
			КонецЕсли;	
			
			Если Не Стр.ЭтоДействие 
				Или (Стр.ЭтоДействие И Не ЗначениеЗаполнено(Стр.Результат)) Тогда
				Стр.Результат = НайденнаяСтрока.Результат;    
			КонецЕсли;
			
			Стр.Состояние = НайденнаяСтрока.Состояние;
			Стр.ДатаУстановкиСостояния = НайденнаяСтрока.Дата;
			ИтоговоеСостояние = Стр.Состояние;          
			
			Стр.ЕстьФайлыОтчета = НайденнаяСтрока.ЕстьФайлыОтчета;
			Если ЗначениеЗаполнено(НайденнаяСтрока.РезультатТекстом) Тогда
				Стр.РезультатТекстом = НайденнаяСтрока.РезультатТекстом;
			КонецЕсли;
			Если НайденнаяСтрокаУчастника <> Неопределено Тогда
				Стр.ЕстьФайлыОтчета = НайденнаяСтрокаУчастника.ЕстьФайлыОтчета;
				Если ЗначениеЗаполнено(НайденнаяСтрокаУчастника.РезультатТекстом) Тогда
					Стр.РезультатТекстом = НайденнаяСтрокаУчастника.РезультатТекстом;   
				КонецЕсли;		
			КонецЕсли;	
			
			// Доступность.
			ДействиеНедоступно = ЗначениеЗаполнено(Стр.Результат) Или ЗначениеЗаполнено(
				Стр.Состояние);
			Стр.Недоступно = ДействиеНедоступно;
			Стр.НедоступноГруппа = ДействиеНедоступно;
			
			СостояниеУчастника = ?(Стр.ЭтоДействие Или Стр.ЭтоУчастник Или Стр.ЭтоПодзадача, ИтоговоеСостояние,
				Неопределено);
			Стр.НомерКартинки = ДействияКлиентСервер.НомерКартинкиРезультата(
				Стр.Результат, СостояниеУчастника, ЕстьЗаявкаОтказа);
				
		ИначеЕсли ЗначениеЗаполнено(Стр.Состояние) Тогда     
				
			СостояниеУчастника = Стр.Состояние;
				
			Стр.НомерКартинки = ДействияКлиентСервер.НомерКартинкиРезультата(
				Стр.Результат, СостояниеУчастника, ЕстьЗаявкаОтказа);
				
		КонецЕсли;    
			
		Если Стр.Состояние = Перечисления.СостоянияВыполненияДействий.Завершено 
			Или Не ЗначениеЗаполнено(Стр.Состояние) Тогда
			Стр.СрокПревышен = Ложь;
		КонецЕсли;	

		ФункцияОбработка = Стр.ЭтоУчастник И ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(
			Стр.Функция);
		
		Если Не ПечатьКарточкиДокумента
				И Стр.Состояние = Перечисления.СостоянияВыполненияДействий.ОтложенныйЗапуск
				И Стр.Свойство("ОтложенныйЗапуск") Тогда
			Стр.ОтложенныйЗапуск = Истина;
		КонецЕсли;
		
		СформироватьПредставлениеРезультата(
			Стр.Действие,
			Стр,
			ДействиеУАрбитра И (ФункцияОбработка Или Стр.ЭтоДействие),
			ЕстьЗаявкаОтказа,
			ДействиеОбъект.Предмет,
			ЭтапОбработкиПредмета);

	КонецЦикла;
	
	// Установка картинок результата для этапов.
	СтрокиДляОбработки = Новый Массив;
	СтрокиДляОбработки.Добавить(ЭлементДействие);
	Пока СтрокиДляОбработки.Количество() > 0 Цикл

		Стр = СтрокиДляОбработки[0];
		СтрокиДляОбработки.Удалить(0);

		ОбщееСостояние = Неопределено;
		ОбщийРезультат = Неопределено;
		
		Если Стр.ЭтоДействие 
			И (Стр.Состояние = Перечисления.СостоянияВыполненияДействий.Пропущено
				Или Стр.Состояние = Перечисления.СостоянияВыполненияДействий.ОтложенныйЗапуск) Тогда
			ОбщееСостояние = Стр.Состояние;
		КонецЕсли;	

		Если Не ПечатьКарточкиДокумента Тогда
			СтрЭлементы = Стр.ПолучитьЭлементы();
		Иначе	
			СтрЭлементы = Стр.Строки;
		КонецЕсли;	
		Для Каждого ПодчиненнаяСтрока Из СтрЭлементы Цикл
			
			Если Не ПодчиненнаяСтрока.ЭтоУчастник Тогда
				СтрокиДляОбработки.Добавить(ПодчиненнаяСтрока);
			КонецЕсли;
			
			Если ПодчиненнаяСтрока.ЭтоУчастник
				И ЭлементДействие.Состояние	= Перечисления.СостоянияВыполненияДействий.Завершено	
				И ЗначениеЗаполнено(ЭлементДействие.ДатаУстановкиСостояния)
				И ЗначениеЗаполнено(ПодчиненнаяСтрока.ДатаУстановкиСостояния)
				И ПодчиненнаяСтрока.ДатаУстановкиСостояния > 
					ЭлементДействие.ДатаУстановкиСостояния Тогда
				
				Продолжить;
			КонецЕсли;
			
			ОбщийРезультат = ДействияКлиентСервер.ОбщийРезультат(ОбщийРезультат,
				ПодчиненнаяСтрока.Результат);
			ОбщееСостояние = ДействияКлиентСервер.ОбщееСостояние(ОбщееСостояние,
				ПодчиненнаяСтрока.Состояние);
		КонецЦикла;

		Если Стр.ЭтоЭтап И Не Стр.ЭтоУчастник Тогда

			Стр.Результат = ?(ОбщееСостояние
				= Перечисления.СостоянияВыполненияДействий.Выполняется, Неопределено,
				ОбщийРезультат);
			Стр.Состояние = ОбщееСостояние;
			
			Если Стр.Состояние = Перечисления.СостоянияВыполненияДействий.Завершено 
				Или Не ЗначениеЗаполнено(Стр.Состояние) Тогда
				Стр.СрокПревышен = Ложь;
			КонецЕсли;	
			
			Стр.НомерКартинки = ДействияКлиентСервер.НомерКартинкиРезультата(
				Стр.Результат, ОбщееСостояние, ЕстьЗаявкаОтказа);

			СформироватьПредставлениеРезультата(
				Стр.Действие,
				Стр,
				Ложь,
				Ложь,
				ДействиеОбъект.Предмет,
				ЭтапОбработкиПредмета);
			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСостояниеКонтроляВФормеПредмета(ЭлементДействие, ДействиеОбъект)
	
	ДействиеСсылка = ДействиеОбъект.Ссылка;
	Если Не ЗначениеЗаполнено(ДействиеСсылка) 
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда
		Возврат;
	КонецЕсли;
	
	// Установка картинки контроля.
	СведенияОКонтроле = Контроль.ПолучитьСведенияОКонтроле(ДействиеСсылка);
	ЭлементДействие.СостояниеКонтроля = Контроль.ИндексКартинкиКонтроля(
		СведенияОКонтроле.СостояниеКонтроля,
		СведенияОКонтроле.СрокИсполнения,
		СведенияОКонтроле.СрокИсполненияОбщий);
	
КонецПроцедуры

// Заполняет состояния действий конкретных участников в форме действия
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма карточки действия
//
Процедура ЗаполнитьСостоянияИРезультатыВФормеДействия(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Если Форма.Параметры.Свойство("РежимДиалога") И Форма.Параметры.РежимДиалога Тогда
		Элементы.УчастникиНомерКартинки.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ДействиеСсылка = Форма.Параметры.Ключ;
	
	Если ДействиеСсылка.Пустая() Тогда
		Элементы.УчастникиНомерКартинки.Видимость = Ложь;
		Возврат;
	КонецЕсли;

	ВсеСостоянияИРезультаты = ВсеСостоянияИРезультаты(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДействиеСсылка));
	
	Если ВсеСостоянияИРезультаты.Количество() = 0 Тогда
		Элементы.УчастникиНомерКартинки.Видимость = Ложь;
		Возврат;
	КонецЕсли;

	// Установка состояний и результатов.
	СтрокиДляОбработки = Новый Массив;
	
	Для Каждого СтрокаУчастника Из Форма.Участники.ПолучитьЭлементы() Цикл
		СтрокиДляОбработки.Добавить(СтрокаУчастника);
		Для Каждого ПодчиненнаяСтрока Из СтрокаУчастника.ПолучитьЭлементы() Цикл
			СтрокиДляОбработки.Добавить(ПодчиненнаяСтрока);
			Для Каждого СтрокаОбеспечивающего Из ПодчиненнаяСтрока.ПолучитьЭлементы() Цикл
				СтрокиДляОбработки.Добавить(СтрокаОбеспечивающего);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	//Результаты и картинки исполнителей.
	ДатаУстановкиСостоянийУчастниками = Новый Соответствие();
	
	Для Каждого Строка Из СтрокиДляОбработки Цикл
		
		Если Строка.ЭтоЭтап Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("Действие, Функция, ИдентификаторУчастника", ДействиеСсылка);
		СтруктураОтбора.Функция = Строка.Функция;
		СтруктураОтбора.ИдентификаторУчастника = Строка.Идентификатор;
		НайденныеСтроки = ВсеСостоянияИРезультаты.НайтиСтроки(СтруктураОтбора);
		
		Если НайденныеСтроки.Количество() = 0 И Строка.Участник <> Неопределено Тогда
			СтруктураОтбора = Новый Структура("Действие, ИдентификаторУчастника", ДействиеСсылка,
				Строка.Участник);
			НайденныеСтроки = ВсеСостоянияИРезультаты.НайтиСтроки(СтруктураОтбора);
		КонецЕсли;
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденнаяСтрока = НайденныеСтроки[0];
			Строка.Результат = НайденнаяСтрока.Результат;
			Строка.Состояние = НайденнаяСтрока.Состояние;
			Строка.НомерКартинки = ДействияКлиентСервер.НомерКартинкиРезультата(Строка.Результат, Строка.Состояние, Ложь);
			
			ДатаУстановкиСостоянийУчастниками[НайденнаяСтрока.ИдентификаторУчастника] = НайденнаяСтрока.Дата;
		КонецЕсли;
		
	КонецЦикла;
	
	// Дата установки состояния действия.
	ДатаУстановкиСостоянияДействия = Дата(1, 1, 1);
	СостояниеДействия = Перечисления.СостоянияВыполненияДействий.ПустаяСсылка();
	
	СтруктураОтбора = Новый Структура(
		"Действие, Функция, ИдентификаторУчастника, ИдентификаторПункта");
	СтруктураОтбора.Действие = ДействиеСсылка;
	СтруктураОтбора.ИдентификаторПункта = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор();
	НайденныеСтроки = ВсеСостоянияИРезультаты.НайтиСтроки(СтруктураОтбора);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ДатаУстановкиСостоянияДействия = НайденныеСтроки[0].Дата;
		СостояниеДействия = НайденныеСтроки[0].Состояние;
	КонецЕсли;
	
	// Результаты и картинки этапов по результатам исполнителей.
	Для Каждого Строка Из СтрокиДляОбработки Цикл
		
		Если Не Строка.ЭтоЭтап Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщееСостояние = Неопределено;
		ОбщийРезультат = Неопределено;
		
		ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
		Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
			ДатаУстановкиСостояния = ДатаУстановкиСостоянийУчастниками[ПодчиненнаяСтрока.Идентификатор];
			
			Если СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено
					И ЗначениеЗаполнено(ДатаУстановкиСостояния)
					И ЗначениеЗаполнено(ДатаУстановкиСостоянияДействия)
					И ДатаУстановкиСостояния > ДатаУстановкиСостоянияДействия Тогда
				Продолжить;
			КонецЕсли;
			
			ОбщийРезультат = ДействияКлиентСервер.ОбщийРезультат(ОбщийРезультат, ПодчиненнаяСтрока.Результат);
			ОбщееСостояние = ДействияКлиентСервер.ОбщееСостояние(ОбщееСостояние, ПодчиненнаяСтрока.Состояние);
		КонецЦикла;
		
		Строка.Состояние = ОбщееСостояние;
		Строка.Результат = ?(ОбщееСостояние = Перечисления.СостоянияВыполненияДействий.Выполняется,
			Неопределено,
			ОбщийРезультат);
		
		Строка.НомерКартинки = ДействияКлиентСервер.НомерКартинкиРезультата(Строка.Результат, ОбщееСостояние, Ложь);
		
	КонецЦикла;
	
	// Отображение задержки запуска.
	Если Элементы.Найти("ГруппаОписаниеОтложенногоВыполнения") <> Неопределено И ЗначениеЗаполнено(СостояниеДействия) Тогда
		Элементы.ГруппаОписаниеОтложенногоВыполнения.Видимость = Ложь;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьОтложенноеНачалоВыполненияДействий") Тогда
			ДниИЧасыЗадержки = ДействияКлиентСервер.ДниИЧасыЗадержкиПоСроку(Форма.Объект.ОтложенноеНачалоВыполнения);
			Форма.ОтложенноеНачалоВыполненияДни = ДниИЧасыЗадержки.ЗадержкаДни;	
			Форма.ОтложенноеНачалоВыполненияЧасы = ДниИЧасыЗадержки.ЗадержкаЧасы;
			
			Если СостояниеДействия = Перечисления.СостоянияВыполненияДействий.ОтложенныйЗапуск Тогда
				Элементы.ГруппаОписаниеОтложенногоВыполнения.Видимость = Истина;
				ПредставлениеЗапуска = Перечисления.СостоянияВыполненияДействий.ПредставлениеОтложенногоВыполнения(
					ДействиеСсылка);
				ДействияКлиентСервер.НастроитьОтображениеОтложенногоНачалаВыполненияДействия(Форма, ПредставлениеЗапуска);
				
			Иначе
				Элементы.ГруппаОписаниеОтложенногоВыполнения.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.Найти("ГруппаНастройкиФлагов") <> Неопределено И ЗначениеЗаполнено(СостояниеДействия) Тогда
		Элементы.ГруппаНастройкиФлагов.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак исполнения действия участниками.
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия 
// 
// Возвращаемое значение:
//  Булево
//
Функция ДействиеИсполняетсяУчастниками(Действие)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СостоянияДействий.Состояние
		|ИЗ
		|	РегистрСведений.СостоянияДействий КАК СостоянияДействий
		|ГДЕ
		|	СостоянияДействий.Действие = &Действие
		|	И СостоянияДействий.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Выполняется)
		|	И СостоянияДействий.ИдентификаторУчастника <> &ИдентификаторУчастника";
		
	Запрос.УстановитьПараметр("Действие", Действие);
	Запрос.УстановитьПараметр("ИдентификаторУчастника", УникальныйИдентификаторПустой());
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает состояние документа по состоянию и результату действия
// 
Функция СостояниеДокументаДляПредставленияПоСостояниюРезультатуДействия(
	Действие,
	СостояниеДействия,
	РезультатДействия,
	ФункцияУчастника,
	Предмет,
	ЭтапОбработкиПредмета) 
	
	СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияДокументов.ПустаяСсылка();

	ТипДействия = ТипЗнч(Действие);
	ТипПредмета = ТипЗнч(Предмет);
	
	Если ЗначениеЗаполнено(РезультатДействия) Тогда

		Если ТипДействия = Тип("СправочникСсылка.ДействияИсполнения") Тогда
			
			Если РезультатДействия = Перечисления.РезультатыРассмотрения.Рассмотрено Тогда
				
				Если ТипПредмета = Тип("СправочникСсылка.Мероприятия") Тогда
					
					СостояниеДокументаВРазрезеДействия = НСтр("ru = 'Рассмотрено'");
					
				ИначеЕсли ТипПредмета = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
					
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияДокументов.Рассмотрен;
					
				Иначе
					
					ВызватьИсключение СтрШаблон(
						НСтр("ru = 'Неизвестный тип предмета %1 (%2).'"),
						Предмет,
						ТипПредмета);
					
				КонецЕсли;
				
			ИначеЕсли РезультатДействия = Перечисления.РезультатыИсполнения.Исполнено Тогда
				
				Если ТипПредмета = Тип("СправочникСсылка.Мероприятия")
					И ЭтапОбработкиПредмета  = Перечисления.ЭтапыОбработкиПредметов.ЗапроситьМатериалы Тогда
						
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияМероприятий.ПолученыМатериалыВыступающих;
					
				ИначеЕсли ТипПредмета = Тип("СправочникСсылка.Мероприятия")
					И ЭтапОбработкиПредмета  = Перечисления.ЭтапыОбработкиПредметов.ПодготовитьПротокол Тогда
						
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияМероприятий.ПротоколПодготовлен;
					
				ИначеЕсли ТипПредмета = Тип("СправочникСсылка.Мероприятия")
					И ЭтапОбработкиПредмета  = Перечисления.ЭтапыОбработкиПредметов.ПровестиМероприятие Тогда
						
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияМероприятий.МероприятиеПроведено;
					
				ИначеЕсли ТипПредмета = Тип("СправочникСсылка.Мероприятия")
					И ЭтапОбработкиПредмета  = Перечисления.ЭтапыОбработкиПредметов.ИсполнитьПротокол Тогда
						
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияМероприятий.ПротоколИсполнен;
					
				ИначеЕсли ТипПредмета = Тип("СправочникСсылка.Мероприятия") Тогда
					
					СостояниеДокументаВРазрезеДействия = НСтр("ru = 'Исполнено'");
					
				ИначеЕсли ТипПредмета = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
					
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияДокументов.Исполнен;
					
				Иначе
					
					ВызватьИсключение СтрШаблон(
						НСтр("ru = 'Неизвестный тип предмета %1 (%2).'"),
						Предмет,
						ТипПредмета);
					
				КонецЕсли;
				
			КонецЕсли;

		ИначеЕсли ТипДействия = Тип("СправочникСсылка.ДействияСогласования") Тогда
			
			Если РезультатДействия = Перечисления.РезультатыСогласования.Согласовано
				Или РезультатДействия = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда
				
				Если ТипПредмета = Тип("СправочникСсылка.Мероприятия")
					И ЭтапОбработкиПредмета  = Перечисления.ЭтапыОбработкиПредметов.СогласоватьПротокол Тогда
						
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияМероприятий.ПротоколСогласован;
					
				ИначеЕсли ТипПредмета = Тип("СправочникСсылка.Мероприятия") Тогда
					
					СостояниеДокументаВРазрезеДействия = НСтр("ru = 'Согласовано'");
					
				ИначеЕсли ТипПредмета = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
					
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияДокументов.Согласован;
					
				Иначе
					
					ВызватьИсключение СтрШаблон(
						НСтр("ru = 'Неизвестный тип предмета %1 (%2).'"),
						Предмет,
						ТипПредмета);
					
				КонецЕсли;
				
			ИначеЕсли РезультатДействия = Перечисления.РезультатыСогласования.НеСогласовано Тогда
				
				Если ТипПредмета = Тип("СправочникСсылка.Мероприятия")
					И ЭтапОбработкиПредмета  = Перечисления.ЭтапыОбработкиПредметов.СогласоватьПротокол Тогда
						
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияМероприятий.ПротоколНеСогласован;
					
				ИначеЕсли ТипПредмета = Тип("СправочникСсылка.Мероприятия") Тогда
					
					СостояниеДокументаВРазрезеДействия = НСтр("ru = 'Не согласовано'");
					
				ИначеЕсли ТипПредмета = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
					
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияДокументов.НеСогласован;
					
				Иначе
					
					ВызватьИсключение СтрШаблон(
						НСтр("ru = 'Неизвестный тип предмета %1 (%2).'"),
						Предмет,
						ТипПредмета);
					
				КонецЕсли;
				
			КонецЕсли;

		ИначеЕсли ТипДействия = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
			
			Если РезультатДействия = Перечисления.РезультатыОзнакомления.Ознакомлен Тогда
				
				Если ТипПредмета = Тип("СправочникСсылка.Мероприятия")
					И ЭтапОбработкиПредмета  = Перечисления.ЭтапыОбработкиПредметов.ОзнакомитьСМатериалами Тогда
					
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияМероприятий.СМатериаламиОзнакомились;
					
				ИначеЕсли ТипПредмета = Тип("СправочникСсылка.Мероприятия") Тогда
					
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияДокументов.ОзнакомлениеЗавершено;
					
				ИначеЕсли ТипПредмета = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
					
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияДокументов.ОзнакомлениеЗавершено;
					
				Иначе
					
					ВызватьИсключение СтрШаблон(
						НСтр("ru = 'Неизвестный тип предмета %1 (%2).'"),
						Предмет,
						ТипПредмета);
					
				КонецЕсли;
				
			КонецЕсли;

		ИначеЕсли ТипДействия = Тип("СправочникСсылка.ДействияПодписания") Тогда
			
			Если РезультатДействия = Перечисления.РезультатыПодписания.Подписано Тогда
				
				Если ТипПредмета = Тип("СправочникСсылка.Мероприятия") Тогда
					
					СостояниеДокументаВРазрезеДействия = НСтр("ru = 'Подписано'");
					
				ИначеЕсли ТипПредмета = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
					
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияДокументов.Подписан;
					
				Иначе
					
					ВызватьИсключение СтрШаблон(
						НСтр("ru = 'Неизвестный тип предмета %1 (%2).'"),
						Предмет,
						ТипПредмета);
					
				КонецЕсли;
				
			ИначеЕсли РезультатДействия = Перечисления.РезультатыПодписания.НеПодписано Тогда
				
				Если ТипПредмета = Тип("СправочникСсылка.Мероприятия") Тогда
					
					СостояниеДокументаВРазрезеДействия = НСтр("ru = 'Отклонено'");
					
				ИначеЕсли ТипПредмета = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
					
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияДокументов.Отклонен;
					
				Иначе
					
					ВызватьИсключение СтрШаблон(
						НСтр("ru = 'Неизвестный тип предмета %1 (%2).'"),
						Предмет,
						ТипПредмета);
					
				КонецЕсли;
				
			КонецЕсли;

		ИначеЕсли ТипДействия = Тип("СправочникСсылка.ДействияРегистрации") Тогда
			
			Если РезультатДействия = Перечисления.РезультатыРегистрации.Зарегистрировано Тогда
				
				Если ТипПредмета = Тип("СправочникСсылка.Мероприятия") Тогда
					
					СостояниеДокументаВРазрезеДействия = НСтр("ru = 'Зарегистрировано'");
					
				ИначеЕсли ТипПредмета = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
					
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияДокументов.Зарегистрирован;
					
				Иначе
					
					ВызватьИсключение СтрШаблон(
						НСтр("ru = 'Неизвестный тип предмета %1 (%2).'"),
						Предмет,
						ТипПредмета);
					
				КонецЕсли;
				
			ИначеЕсли РезультатДействия = Перечисления.РезультатыРегистрации.НеЗарегистрировано Тогда
				
				Если ТипПредмета = Тип("СправочникСсылка.Мероприятия") Тогда
					
					СостояниеДокументаВРазрезеДействия = НСтр("ru = 'Не зарегистрировано'");
					
				ИначеЕсли ТипПредмета = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
					
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияДокументов.НеЗарегистрирован;
					
				Иначе
					
					ВызватьИсключение СтрШаблон(
						НСтр("ru = 'Неизвестный тип предмета %1 (%2).'"),
						Предмет,
						ТипПредмета);
					
				КонецЕсли;
				
			КонецЕсли;

		ИначеЕсли ТипДействия = Тип("СправочникСсылка.ДействияУтверждения") Тогда
			
			Если РезультатДействия = Перечисления.РезультатыУтверждения.Утверждено Тогда
				
				Если ТипПредмета = Тип("СправочникСсылка.Мероприятия")
					И ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.УтвердитьПрограмму Тогда
					
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияМероприятий.ПрограммаУтверждена;
					
				ИначеЕсли ТипПредмета = Тип("СправочникСсылка.Мероприятия")
				 	И ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.УтвердитьПротокол Тогда
					
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияМероприятий.ПротоколУтвержден;
					
				ИначеЕсли ТипПредмета = Тип("СправочникСсылка.Мероприятия") Тогда
					
					СостояниеДокументаВРазрезеДействия = НСтр("ru = 'Утверждено'");
					
				ИначеЕсли ТипПредмета = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
					
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияДокументов.Утвержден;
					
				Иначе
					
					ВызватьИсключение СтрШаблон(
						НСтр("ru = 'Неизвестный тип предмета %1 (%2).'"),
						Предмет,
						ТипПредмета);
					
				КонецЕсли;
				 
			ИначеЕсли РезультатДействия = Перечисления.РезультатыУтверждения.НеУтверждено Тогда
				
				Если ТипПредмета = Тип("СправочникСсылка.Мероприятия")
					И ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.УтвердитьПрограмму Тогда
					
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияМероприятий.ПрограммаНеУтверждена;
					
				ИначеЕсли ТипПредмета = Тип("СправочникСсылка.Мероприятия")
				 	И ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.УтвердитьПротокол Тогда
					
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияМероприятий.ПротоколНеУтвержден;
					
				ИначеЕсли ТипПредмета = Тип("СправочникСсылка.Мероприятия") Тогда
					
					СостояниеДокументаВРазрезеДействия = НСтр("ru = 'Не утверждено'");
					
				ИначеЕсли ТипПредмета = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
					
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияДокументов.НеУтвержден;
					
				Иначе
					
					ВызватьИсключение СтрШаблон(
						НСтр("ru = 'Неизвестный тип предмета %1 (%2).'"),
						Предмет,
						ТипПредмета);
					
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;

	ИначеЕсли СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Выполняется
		И Не ЗначениеЗаполнено(РезультатДействия) Тогда

		Если ТипДействия = Тип("СправочникСсылка.ДействияИсполнения") Тогда
			
			Если ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Рассматривающий Тогда
				
				СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияДокументов.НаРассмотрении;
				
			ИначеЕсли ФункцияУчастника
				= Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат Тогда
				
				СостояниеДокументаВРазрезеДействия = НСтр("ru = 'На проверке'");
				
			Иначе
				
				Если ТипПредмета = Тип("СправочникСсылка.Мероприятия")
					И ЭтапОбработкиПредмета  = Перечисления.ЭтапыОбработкиПредметов.ЗапроситьМатериалы Тогда
						
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияМероприятий.МатериалыВыступающихЗапрошены;
					
				ИначеЕсли ТипПредмета = Тип("СправочникСсылка.Мероприятия")
					И ЭтапОбработкиПредмета  = Перечисления.ЭтапыОбработкиПредметов.ПодготовитьПротокол Тогда
						
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияМероприятий.ПротоколГотовиться;
					
				ИначеЕсли ТипПредмета = Тип("СправочникСсылка.Мероприятия")
					И ЭтапОбработкиПредмета  = Перечисления.ЭтапыОбработкиПредметов.ПровестиМероприятие Тогда
						
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияМероприятий.МероприятиеВСтадииПодготовки;
					
				ИначеЕсли ТипПредмета = Тип("СправочникСсылка.Мероприятия")
					И ЭтапОбработкиПредмета  = Перечисления.ЭтапыОбработкиПредметов.ИсполнитьПротокол Тогда
						
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияМероприятий.ПротоколНаИсполнении;
					
				ИначеЕсли ТипПредмета = Тип("СправочникСсылка.Мероприятия") Тогда
					
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияДокументов.НаИсполнении;
					
				ИначеЕсли ТипПредмета = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
					
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияДокументов.НаИсполнении;
					
				Иначе
					
					ВызватьИсключение СтрШаблон(
						НСтр("ru = 'Неизвестный тип предмета %1 (%2).'"),
						Предмет,
						ТипПредмета);
					
				КонецЕсли;
				
			КонецЕсли;

		ИначеЕсли ТипДействия = Тип("СправочникСсылка.ДействияСогласования") Тогда

			Если ФункцияУчастника
				= Перечисления.ФункцииУчастниковСогласования.ОбрабатывающийРезультат Тогда
				
				СостояниеДокументаВРазрезеДействия = НСтр("ru = 'На проверке'");
				
			ИначеЕсли ФункцияУчастника = Перечисления.ФункцииУчастниковСогласования.ОбеспечивающийСогласование
				Или ФункцияУчастника = Перечисления.ФункцииУчастниковСогласования.ПодготавливающийЗавершение
				Или ФункцияУчастника
				= Перечисления.ФункцииУчастниковСогласования.ПодготавливающийОбработкуРезультата Тогда
				
				СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияДокументов.НаПодготовке;
				
			Иначе
				
				Если ТипПредмета = Тип("СправочникСсылка.Мероприятия")
					И ЭтапОбработкиПредмета  = Перечисления.ЭтапыОбработкиПредметов.СогласоватьПротокол Тогда
						
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияМероприятий.ПротоколНаСогласовании;
					
				ИначеЕсли ТипПредмета = Тип("СправочникСсылка.Мероприятия") Тогда
					
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияДокументов.НаСогласовании;
					
				ИначеЕсли ТипПредмета = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
					
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияДокументов.НаСогласовании;
					
				Иначе
					
					ВызватьИсключение СтрШаблон(
						НСтр("ru = 'Неизвестный тип предмета %1 (%2).'"),
						Предмет,
						ТипПредмета);
					
				КонецЕсли;
				
			КонецЕсли;

		ИначеЕсли ТипДействия = Тип("СправочникСсылка.ДействияПодписания") Тогда

			Если ФункцияУчастника
				= Перечисления.ФункцииУчастниковПодписания.ОбеспечивающийПодписание Тогда
				
				СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияДокументов.НаИсполнении;
				
			ИначеЕсли ФункцияУчастника
				= Перечисления.ФункцииУчастниковПодписания.ОбрабатывающийРезультат Тогда
				
				СостояниеДокументаВРазрезеДействия = НСтр("ru = 'На проверке'");
				
			Иначе
				
				СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияДокументов.НаПодписании;
				
			КонецЕсли;
					
		ИначеЕсли ТипДействия = Тип("СправочникСсылка.ДействияРегистрации") Тогда
			

			Если ФункцияУчастника
				= Перечисления.ФункцииУчастниковРегистрации.ОбрабатывающийРезультат Тогда
				
				СостояниеДокументаВРазрезеДействия = НСтр("ru = 'На проверке'");
				
			Иначе
				
				СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияДокументов.НаРегистрации;
				
			КонецЕсли;

		ИначеЕсли ТипДействия = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
			
			Если ТипПредмета = Тип("СправочникСсылка.Мероприятия")
				И ЭтапОбработкиПредмета  = Перечисления.ЭтапыОбработкиПредметов.ОзнакомитьСМатериалами Тогда
				
				СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияМероприятий.МатериалыОтправленыНаОзнакомление;
				
			ИначеЕсли ТипПредмета = Тип("СправочникСсылка.Мероприятия") Тогда
				
				СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияДокументов.НаОзнакомлении;
				
			ИначеЕсли ТипПредмета = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
				
				СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияДокументов.НаОзнакомлении;
				
			Иначе
				
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Неизвестный тип предмета %1 (%2).'"),
					Предмет,
					ТипПредмета);
				
			КонецЕсли;
			
		ИначеЕсли ТипДействия = Тип("СправочникСсылка.ДействияУтверждения") Тогда
			

			Если ФункцияУчастника
				= Перечисления.ФункцииУчастниковУтверждения.ОбрабатывающийРезультат Тогда
				
				СостояниеДокументаВРазрезеДействия = НСтр("ru = 'На проверке'");
				
			Иначе
				
				Если ТипПредмета = Тип("СправочникСсылка.Мероприятия")
					И ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.УтвердитьПрограмму Тогда
					
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияМероприятий.ПрограммаНаУтверждении;
					
				ИначеЕсли ТипПредмета = Тип("СправочникСсылка.Мероприятия")
				 	И ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.УтвердитьПротокол Тогда
					
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияМероприятий.ПротоколНаУтверждении;
					
				ИначеЕсли ТипПредмета = Тип("СправочникСсылка.Мероприятия") Тогда
					
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияДокументов.НаУтверждении;
					
				ИначеЕсли ТипПредмета = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
					
					СостояниеДокументаВРазрезеДействия = Перечисления.СостоянияДокументов.НаУтверждении;
					
				Иначе
					
					ВызватьИсключение СтрШаблон(
						НСтр("ru = 'Неизвестный тип предмета %1 (%2).'"),
						Предмет,
						ТипПредмета);
					
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат СостояниеДокументаВРазрезеДействия;

КонецФункции

// Возвращает состояние предмета по действию и функции участника.
// 
// Параметры:
//  Предмет - ОпределяемыйТип.ПредметДействия.
//  Действие - ОпределяемыйТип.Действия
//  Параметры - Структура - Параметры выполнения действия
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СостоянияДокументов - Новое состояние предмета.
//
Функция СостояниеПредметаПоСостояниюРезультатуДействия(Предмет, Действие, Параметры) Экспорт
	
	Если Параметры.Свойство("ФункцияУчастника") Тогда
		ФункцияУчастника = Параметры.ФункцияУчастника;
	ИначеЕсли Параметры.Свойство("Функция") Тогда
		ФункцияУчастника = Параметры.Функция;
	Иначе
		ФункцияУчастника = Неопределено;
	КонецЕсли; 
	ТаблицаСостояний = ТаблицаВозможныхСостоянийПредмета(Действие);
	
	ТипПредмета = ОбщегоНазначенияДокументооборотКлиентСервер.ТипОбъекта(ТипЗнч(Предмет));
	
	ВидДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "ВидДействия");
	ЭтапОбработкиПредмета =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДействия, "ЭтапОбработкиПредмета");
	
	СостояниеДействия = СостояниеДействияДляСостоянияПредмета(Действие, ФункцияУчастника, Параметры);
	
	РезультатДействия = Неопределено;
	Если СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено Тогда
		РезультатДействия = РезультатДействияДляСостоянияПредмета(Действие, ФункцияУчастника);
	КонецЕсли;
	
	Отбор = Новый Структура(
		"ТипПредмета, ЭтапОбработкиПредмета, СостояниеДействия, РезультатДействия, ФункцияУчастника");
	Отбор.ТипПредмета = ТипПредмета;
	Отбор.ЭтапОбработкиПредмета = ЭтапОбработкиПредмета;
	Отбор.СостояниеДействия = СостояниеДействия;
	Отбор.РезультатДействия = РезультатДействия;
	Отбор.ФункцияУчастника = ФункцияУчастника;
	
	НайденныеСтроки = ТаблицаСостояний.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		СостояниеПредметаВРазрезеДействия = НайденныеСтроки[0].СостояниеДокумента;
		
	ИначеЕсли ТипПредмета = Перечисления.ТипыОбъектов.ДокументыПредприятия Тогда
		
		СостояниеПредметаВРазрезеДействия = Перечисления.СостоянияДокументов.ПустаяСсылка();
		
	ИначеЕсли ТипПредмета = Перечисления.ТипыОбъектов.Мероприятия Тогда
		
		СостояниеПредметаВРазрезеДействия = Перечисления.СостоянияМероприятий.ПустаяСсылка();
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестно пустое состояние в разрезе действия для предмета %1 (%2).'"),
			Предмет,
			ТипПредмета);
		
	КонецЕсли;

	Возврат СостояниеПредметаВРазрезеДействия;
	
КонецФункции

Процедура ЗаписатьСобытиеВХодОбработки(Обработка, ТипСобытия, Действие, Описание)
	
	Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
	Событие.Обработка = Обработка;
	Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.ИзменениеПунктовИсполнения;
	Событие.Действие = Действие;
	Событие.Описание = Описание;
	РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
	
КонецПроцедуры

// Возвращает хеш действия.
//
// Параметры:
//  Действие - СправочникОбъект.<Имя справочника действий>
//
// Возвращаемое значение:
//  Строка
//
Функция ХешДействия(Действие)

	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешированиеДанных.Добавить(ОбщегоНазначения.ЗначениеВСтрокуXML(Действие));
	Возврат СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");

КонецФункции

Процедура ОбработатьУдалениеУчастникаДействияДляРезультатовИСостояний(Действие, ФункцияУчастника,
	Участник, ИдентификаторПункта = Неопределено, ИдентификаторУчастника = Неопределено)

	Если Не ЗначениеЗаполнено(Участник) Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	РегистрыСведений.РезультатыДействий.УдалитьРезультат(
		Действие, ФункцияУчастника, Участник, ИдентификаторПункта, ИдентификаторУчастника);

	РегистрыСведений.СостоянияДействий.УдалитьСостояние(
		Действие, ФункцияУчастника, Участник, ИдентификаторПункта, ИдентификаторУчастника);

	Состояние = РегистрыСведений.СостоянияДействий.СостояниеДействия(Действие);
	Если ЗначениеЗаполнено(Состояние) Тогда
		МенеджерДействия = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Действие);
		МенеджерДействия.ОбновитьРезультатВыполнения(Действие);
	КонецЕсли;

КонецПроцедуры

Процедура ОбработатьЗаменуУчастникаДействийДляРезультатовИСостояний(Ссылка, СтарыйАвтор, Автор,
	ТекФункция, ИдентификаторПункта = Неопределено, ИдентификаторУчастника = Неопределено)

	Если СтарыйАвтор = Автор Тогда
		Возврат;
	КонецЕсли;

	РегистрыСведений.РезультатыДействий.ОбработатьЗаменуУчастникаДействия(
		Ссылка, ТекФункция, СтарыйАвтор, Автор, ИдентификаторУчастника);

	РегистрыСведений.СостоянияДействий.ОбработатьЗаменуУчастникаДействия(
		Ссылка, ТекФункция, СтарыйАвтор, Автор, ИдентификаторУчастника);

КонецПроцедуры

Процедура ОбработатьЗаполнениеИдентификатораЭтапа(Ссылка, СтараяСтрока, НоваяСтрока, ТекФункция, ИдентификаторУчастника)
	
	ИмяПоляИдентификатораЭтапа = "ИдентификаторЭтапа";
	СтарыйИдентификатор = СтараяСтрока[ИмяПоляИдентификатораЭтапа];
	НовыйИдентификатор = НоваяСтрока[ИмяПоляИдентификатораЭтапа];
	
	Если СтарыйИдентификатор = НовыйИдентификатор Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.РезультатыДействий.ОбработатьЗаполнениеИдентификатораЭтапа(
		Ссылка, ТекФункция, ИдентификаторУчастника, НовыйИдентификатор);

	РегистрыСведений.СостоянияДействий.ОбработатьЗаполнениеИдентификатораЭтапа(
		Ссылка, ТекФункция, ИдентификаторУчастника, НовыйИдентификатор);
	
КонецПроцедуры

// Вернет составной ИД - GUID + Описание + НаименованиеЗадачи.
Функция СоставнойИдентификаторУчастника(ДанныеУчастника)

	СоставнойИД = "";

	Если ЗначениеЗаполнено(ДанныеУчастника.РазвернутыйУчастник) И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(
		ДанныеУчастника.РазвернутыйУчастник)) Тогда
		СоставнойИД = Строка(ДанныеУчастника.РазвернутыйУчастник.УникальныйИдентификатор()) + "-"
			+ Лев(ДанныеУчастника.НаименованиеЗадачи, 100) + "-" + Лев(ДанныеУчастника.Описание,
			100);
	КонецЕсли;

	Возврат СоставнойИД;

КонецФункции

// Определяет приоритет неразвернутого участника для удаления дублей.
// Минимальный приоритет - 1.
// Максимальный приоритет - 9.
//
// Параметры:
//  НеразвернутыйУчастник - СправочникСсылка.СтруктураПредприятия,
//                          СправочникСсылка.ДолжностныеЛица,
//                          СправочникСсылка.РабочиеГруппы,
//                          Строка,
//                          СправочникСсылка.ПолныеРоли,
//                          СправочникСсылка.Пользователи,
//                          СправочникСсылка.ВидыПодразделений,
//                          СправочникСсылка.ПодразделенияКонтейнеры - Участник, ещё неразыменованный.
// 
// Возвращаемое значение:
//  Число - Приоритет участника для удаления дублей.
//
Функция ПриоритетУчастникаДляУдаленияДублей(НеразвернутыйУчастник)

	ТипНеразвернутогоУчастника = ТипЗнч(НеразвернутыйУчастник);
	Если ТипНеразвернутогоУчастника = Тип("СправочникСсылка.ПолныеРоли") Тогда

		ПриоритетУчастникаДляУдаленияДублей = 9;

	ИначеЕсли ТипНеразвернутогоУчастника = Тип("СправочникСсылка.ПодразделенияКонтейнеры") Тогда

		ПриоритетУчастникаДляУдаленияДублей = 8;

	ИначеЕсли ТипНеразвернутогоУчастника = Тип("СправочникСсылка.СтруктураПредприятия") Тогда

		ПриоритетУчастникаДляУдаленияДублей = 7;

	ИначеЕсли ТипНеразвернутогоУчастника = Тип("СправочникСсылка.Сотрудники") Тогда

		ПриоритетУчастникаДляУдаленияДублей = 6;

	ИначеЕсли ТипНеразвернутогоУчастника = Тип("СправочникСсылка.Пользователи") Тогда

		ПриоритетУчастникаДляУдаленияДублей = 5;

	ИначеЕсли ТипНеразвернутогоУчастника = Тип("СправочникСсылка.РабочиеГруппы") Тогда

		ПриоритетУчастникаДляУдаленияДублей = 4;

	ИначеЕсли ТипНеразвернутогоУчастника = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов") Тогда

		ПриоритетУчастникаДляУдаленияДублей = 3;

	Иначе

		ПриоритетУчастникаДляУдаленияДублей = 1;

	КонецЕсли;

	Возврат ПриоритетУчастникаДляУдаленияДублей;

КонецФункции

Процедура ЗаполнитьДеревоВидыДействий(ДеревоВидыДействий, ТЗНастройкиОбработки) Экспорт
	
	ДеревоВидыДействий.Строки.Очистить();
	
	ТекущаяДатаОбработки = Дата(1, 1, 1);
	УсловияПроверки = Новый ТаблицаЗначений();
	ПравилаЭскалацииТаблица = Новый ТаблицаЗначений();
	СтрРодитель = Неопределено;
	
	Для Каждого СтрНастройка Из ТЗНастройкиОбработки Цикл
		Если Не ЗначениеЗаполнено(ТекущаяДатаОбработки) Или ТекущаяДатаОбработки
			<> СтрНастройка.ДействуетС Тогда
			СтрРодитель = ДеревоВидыДействий.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрРодитель, СтрНастройка,
				"ДействуетС, ДействуетПо, ЭтоНастройкиГруппы, СсылкаНаНастройку, СхемаОбработки");
			СтрРодитель.ЭтоРодитель = Истина;
			СтрРодитель.Представление = ДействияКлиентСервер.ПредставлениеПериодаДействияОбработки(
				СтрНастройка.ДействуетС, СтрНастройка.ДействуетПо);
			ТекущаяДатаОбработки = СтрНастройка.ДействуетС;
			Если Не СтрНастройка.АвтоформируемаяСхема Тогда
				СтрРодитель.Схема = НСтр("ru = 'Измененная'");
			Иначе
				СтрРодитель.Схема = НСтр("ru = 'Стандартная'");
			КонецЕсли;
			
			РасширенныеНастройки = РасширенныеНастройкиОбработкиОбъекта(
				СтрРодитель.СсылкаНаНастройку, СтрНастройка.ВидДействия);
			СтрРодитель.ПравилаЗапуска = РасширенныеНастройки.ПравилаЗапуска;
			СтрРодитель.УсловияЗапуска = РасширенныеНастройки.УсловияЗапуска;
			СтрРодитель.ЕстьОбработка = РасширенныеНастройки.ЕстьОбработка;
			УсловияПроверки = РасширенныеНастройки.УсловияПроверки;
		КонецЕсли;

		ПравилаЭскалацииТаблица = ПравилаЭскалацииПоНастройке(СтрРодитель.СсылкаНаНастройку, 
			СтрНастройка.ВидДействия);
	
		НоваяСтрока = СтрРодитель.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрНастройка);
		НоваяСтрока.Представление = Символы.Таб + Строка(НоваяСтрока.ВидДействия);
		
		МассивУсловий = Новый Массив;
		Для Каждого Стр Из УсловияПроверки Цикл
			Если Стр.ВидДействия <> НоваяСтрока.ВидДействия Тогда
				Продолжить;
			КонецЕсли;
			
			МассивУсловий.Добавить(СокрЛП(Стр.Условие));
		КонецЦикла;
		
		НоваяСтрока.ПроверкаВыполнения = СтрСоединить(МассивУсловий, "; ");
		
		
		МассивЭскалаций = Новый Массив;
		Для Каждого Стр Из ПравилаЭскалацииТаблица Цикл
			МассивЭскалаций.Добавить(СокрЛП(Стр.Наименование));
		КонецЦикла;
		НоваяСтрока.ПравилаЭскалации = СтрСоединить(МассивЭскалаций, "; ");
		
	КонецЦикла;

КонецПроцедуры

// Заполняет блокировку данных по предмету.
//
Процедура ЗаполнитьБлокировкиПоПредмету(Предмет, Блокировка)

	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.КешИнформацииОбОбъектах");
	ЭлементБлокировки.УстановитьЗначение("Объект", Предмет);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Предмет) Тогда
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДанныеДокументовПредприятия");
		ЭлементБлокировки.УстановитьЗначение("Документ", Предмет);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоМероприятие(Предмет) Тогда
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДанныеМероприятий");
		ЭлементБлокировки.УстановитьЗначение("Мероприятие", Предмет);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	КонецЕсли;

КонецПроцедуры

Функция ПредставлениеУчастника(Участник, ФактическийУчастник,
	РазыменованныйПользователь = Неопределено, Исполнитель = Неопределено) Экспорт

	Если ЗначениеЗаполнено(Исполнитель) И ТипЗнч(Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
		РазвернутыеУчастники = РазвернутыеУчастники(
			Исполнитель, Неопределено);
		Если РазвернутыеУчастники.Количество() = 1 Тогда
			Исполнитель = РазвернутыеУчастники[0];
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(ФактическийУчастник) 
		И ТипЗнч(ФактическийУчастник) = Тип("СправочникСсылка.ФактическиеИсполнители") Тогда
		Возврат Строка(ФактическийУчастник);
		
	ИначеЕсли ЗначениеЗаполнено(ФактическийУчастник) 
		И ТипЗнч(Участник) = Тип("СправочникСсылка.ПолныеРоли") Тогда

		Если ЗначениеЗаполнено(Исполнитель) И Исполнитель <> ФактическийУчастник Тогда
			Возврат СтрШаблон(НСтр("ru = '%1 (за %2)'"), Строка(ФактическийУчастник), Строка(Участник));
		Иначе
			Возврат СтрШаблон(НСтр("ru = '%1 (%2)'"), Строка(ФактическийУчастник), Строка(Участник));
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ФактическийУчастник) Тогда
		Если ЗначениеЗаполнено(Исполнитель) И Исполнитель <> ФактическийУчастник Тогда
			Возврат СтрШаблон(НСтр("ru = '%1 (за %2)'"), Строка(ФактическийУчастник), 
				СклонениеПредставленийОбъектов.ПросклонятьПредставление(Строка(Участник), 4, Участник));

		Иначе
			Возврат Строка(ФактическийУчастник);
		КонецЕсли;

	ИначеЕсли ЗначениеЗаполнено(РазыменованныйПользователь) Тогда
		Возврат Строка(РазыменованныйПользователь);
	Иначе
		Возврат Участник;
	КонецЕсли;

КонецФункции

// Вернет Истина если это обрабатывающий результат и задача выполнена
// 
// Параметры
// ДействиеСсылка - ссылка на действие
// 	ФункцияУчастника - функция текущего участника 
// 	ФункцияОбработки  - функция обрабатываюещго для данного типа действия	
// 	Участник - участник - например Сотрудник или Роль 
// 	Идентификатор - Ид участника
// 
// Возвращаемое значение - булево
//
Функция ЭтоОбрабатывающийРезультатИЗадачаВыполнена(ДействиеСсылка, ФункцияУчастника,
	ФункцияОбработки, Участник, Идентификатор) Экспорт

	Если ФункцияУчастника = ФункцияОбработки Тогда
		СостояниеОбработкиРезультата = РегистрыСведений.СостоянияДействий.СостояниеДействияПоИдентификаторУчастника(
			ДействиеСсылка, ФункцияУчастника, Идентификатор);
		Если СостояниеОбработкиРезультата <> Перечисления.СостоянияВыполненияДействий.Выполняется Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

// Устанавливает состояние предмета действия, соответствующее состоянию действия
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия - Действие
//  Параметры - Структура - Параметры выполнения действия
Процедура УстановитьСостояниеПредметаПоДействию(Действие, Параметры) Экспорт
	
	Предмет = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Предмет");
	Если Не ЗначениеЗаполнено(Предмет) Тогда
		Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет");
	КонецЕсли;
	
	Период = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Период");
	Если Не ЗначениеЗаполнено(Период) Тогда
		Период = ТекущаяДатаСеанса();
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
	
		Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
			Блокировка = Новый БлокировкаДанных();
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ТекущиеСостоянияДокументов");
			ЭлементБлокировки.УстановитьЗначение("Документ", Предмет);
			ЭлементБлокировки.УстановитьЗначение("Действие", Действие);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
		КонецЕсли;
		
		СостояниеПредмета = СостояниеПредметаПоСостояниюРезультатуДействия(
			Предмет, Действие, Параметры);
		
		Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
			
			Если ЗначениеЗаполнено(СостояниеПредмета) Тогда
				
				УдалитьСостояниеБезДействия = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
					Параметры, "УдалитьСостояниеБезДействия", Ложь);
				
				Если УдалитьСостояниеБезДействия Тогда
					Набор = РегистрыСведений.ТекущиеСостоянияДокументов.СоздатьНаборЗаписей();
					Набор.Отбор.Документ.Установить(Предмет);
					Набор.Отбор.Состояние.Установить(СостояниеПредмета);
					Набор.Отбор.Действие.Установить(Неопределено);
					Набор.Записать();
				КонецЕсли;
				
				Делопроизводство.ЗаписатьСостояниеДокумента(
					Предмет,
					Период,
					СостояниеПредмета,
					Параметры.Участник,
					Действие,
					Истина);
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда
			
			Если ЗначениеЗаполнено(СостояниеПредмета) Тогда
				УправлениеМероприятиями.ЗаписатьСостояниеМероприятия(
					Предмет,
					Период,
					СостояниеПредмета,
					Действие);
			КонецЕсли;
			
			Если ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияИсполнения") Тогда
				УправлениеМероприятиями.УстановитьСостояниеПунктовПротоколаИзДействия(
					Предмет,
					Период,
					СостояниеПредмета,
					Действие);
			КонецЕсли;
			
		Иначе
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный тип предмета %1 (%2).'"),
				Предмет,
				ТипЗнч(Предмет));
				
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Удаляет состояния предмета, соответствующее действию.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия.
//
Процедура УдалитьСостояниеПредметаПоДействию(Действие) Экспорт
	
	Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет");
	
	ТипПредмета = ТипЗнч(Предмет);
	
	Если ТипПредмета = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		Делопроизводство.УдалитьСостоянияДокументаПоДействию(Действие);
	ИначеЕсли ТипПредмета = Тип("СправочникСсылка.Мероприятия") Тогда
		
		УправлениеМероприятиями.ОчиститьСостояниеМероприятияПоУстановившему(
			Предмет, Действие);
		
		УправлениеМероприятиями.ОчиститьСостояниеПунктовПротоколаИзДействия(
			Предмет, Действие);
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный тип предмета %1 (%2).'"),
			Предмет,
			ТипПредмета);
	КонецЕсли;
	
КонецПроцедуры


Функция СостояниеДействияДляСостоянияПредмета(Действие, ФункцияУчастника, Параметры) Экспорт

	Результат = Неопределено;
	
	Если ДействияКлиентСервер.ЭтоДействиеОзнакомления(Действие) Тогда
		
		Результат = РегистрыСведений.СостоянияДействий.СостояниеДействияПоФункцииУчастника(Действие,
			Перечисления.ФункцииУчастниковОзнакомления.Ознакомляемый);
			
	ИначеЕсли ДействияКлиентСервер.ЭтоДействиеИсполнения(Действие) Тогда
		
		Исполнитель = Перечисления.ФункцииУчастниковИсполнения.Исполнитель;
		Обрабатывающий = Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат;
		Завершено = Перечисления.СостоянияВыполненияДействий.Завершено;
		Выполняется = Перечисления.СостоянияВыполненияДействий.Выполняется;
		
		Результат = РегистрыСведений.СостоянияДействий.СостояниеДействияПоФункцииУчастника(Действие,
			ФункцияУчастника);
			
		Если Результат = Завершено И ФункцияУчастника = Исполнитель Тогда

			// Для исполнителей надо дополнительно проверить завершение обработки результата
			Участники = Справочники.ДействияИсполнения.ВсеУчастникиДействия(Действие);
			Если Участники.Найти(Обрабатывающий) <> Неопределено Тогда
				РезультатОбрабатывающего = РегистрыСведений.СостоянияДействий.СостояниеДействияПоФункцииУчастника(
					Действие, Обрабатывающий);
				
				Если РезультатОбрабатывающего <> Завершено Тогда
					Результат = Выполняется;
				КонецЕсли;
				
			КонецЕсли;
					
		КонецЕсли;
			
	ИначеЕсли ДействияКлиентСервер.ЭтоДействиеУтверждения(Действие) Тогда
		
		Результат = РегистрыСведений.СостоянияДействий.СостояниеДействияПоФункцииУчастника(Действие,
			Перечисления.ФункцииУчастниковУтверждения.Утверждающий);
			
	ИначеЕсли ДействияКлиентСервер.ЭтоДействиеПодписания(Действие) Тогда
		
		Если Справочники.ДействияПодписания.ПорядокУчастника(Действие, Параметры.ИдентификаторУчастника) = 
			Перечисления.ПорядокВыполненияЭтапаДействия.Последовательно Тогда
			Результат = РегистрыСведений.СостоянияДействий.СостояниеДействияПоФункцииУчастника(Действие,
				Перечисления.ФункцииУчастниковПодписания.Подписывающий, 
				Параметры.ИдентификаторПункта,
				Параметры.ИдентификаторУчастника);
		Иначе
			Результат = РегистрыСведений.СостоянияДействий.СостояниеДействияПоФункцииУчастника(Действие,
				Перечисления.ФункцииУчастниковПодписания.Подписывающий, Параметры.ИдентификаторПункта);
		КонецЕсли;
			
	ИначеЕсли ДействияКлиентСервер.ЭтоДействиеРегистрации(Действие) Тогда
	
		Результат = РегистрыСведений.СостоянияДействий.СостояниеДействияПоФункцииУчастника(Действие,
			Перечисления.ФункцииУчастниковРегистрации.Регистратор);
			
	ИначеЕсли ДействияКлиентСервер.ЭтоДействиеСогласования(Действие) Тогда
		
		Если Справочники.ДействияСогласования.ПорядокУчастника(Действие, Параметры.ИдентификаторУчастника) = 
			Перечисления.ПорядокВыполненияЭтапаДействия.Последовательно Тогда
			Результат = РегистрыСведений.СостоянияДействий.СостояниеДействияПоФункцииУчастника(Действие,
				Перечисления.ФункцииУчастниковСогласования.Согласующий, 
				Параметры.ИдентификаторПункта,
				Параметры.ИдентификаторУчастника);
		Иначе
			Результат = РегистрыСведений.СостоянияДействий.СостояниеДействияПоФункцииУчастника(Действие,
				Перечисления.ФункцииУчастниковСогласования.Согласующий, Параметры.ИдентификаторПункта);
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ТаблицаВозможныхСостоянийПредмета(Действие) Экспорт

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ТипПредмета");
	Результат.Колонки.Добавить("ЭтапОбработкиПредмета");
	Результат.Колонки.Добавить("СостояниеДействия");
	Результат.Колонки.Добавить("РезультатДействия");
	Результат.Колонки.Добавить("ФункцияУчастника");
	Результат.Колонки.Добавить("СостояниеДокумента");
	
	// На ознакомлении
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ПустаяСсылка();
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Выполняется;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковОзнакомления.Ознакомляемый;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияДокументов.НаОзнакомлении;
	
	// Ознакомление завершено
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ПустаяСсылка();
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковОзнакомления.Ознакомляемый;
	НовоеСостояние.РезультатДействия = Перечисления.РезультатыОзнакомления.Ознакомлен;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияДокументов.ОзнакомлениеЗавершено;
	
	// На исполнении
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ПустаяСсылка();
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Выполняется;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Исполнитель;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияДокументов.НаИсполнении;
	
	// На рассмотрении
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ПустаяСсылка();
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Выполняется;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Рассматривающий;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияДокументов.НаРассмотрении;
	
	// Исполнен
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ПустаяСсылка();
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Исполнитель;
	НовоеСостояние.РезультатДействия = Перечисления.РезультатыИсполнения.Исполнено;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияДокументов.Исполнен;
	
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ПустаяСсылка();
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат;
	НовоеСостояние.РезультатДействия = Перечисления.РезультатыИсполнения.Исполнено;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияДокументов.Исполнен;
	
	// Рассмотрен
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ПустаяСсылка();
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Рассматривающий;
	НовоеСостояние.РезультатДействия = Перечисления.РезультатыРассмотрения.Рассмотрено;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияДокументов.Рассмотрен;
	
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ПустаяСсылка();
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезолюцию;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияДокументов.Рассмотрен;
	
	// На утверждении
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ПустаяСсылка();
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Выполняется;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковУтверждения.Утверждающий;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияДокументов.НаУтверждении;
	
	// Утвержден
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ПустаяСсылка();
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковУтверждения.Утверждающий;
	НовоеСостояние.РезультатДействия = Перечисления.РезультатыУтверждения.Утверждено;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияДокументов.Утвержден;
	
	// Не утвержден
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ПустаяСсылка();
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковУтверждения.Утверждающий;
	НовоеСостояние.РезультатДействия = Перечисления.РезультатыУтверждения.НеУтверждено;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияДокументов.НеУтвержден;
	
	// На подписании
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ПустаяСсылка();
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Выполняется;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковПодписания.Подписывающий;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияДокументов.НаПодписании;
	
	// На подписании (выполняется задача обеспечивающего подписание)
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ПустаяСсылка();
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Выполняется;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковПодписания.ОбеспечивающийПодписание;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияДокументов.НаПодписании;
	
	// Подписан
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ПустаяСсылка();
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковПодписания.Подписывающий;
	НовоеСостояние.РезультатДействия = Перечисления.РезультатыПодписания.Подписано;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияДокументов.Подписан;
	
	// Отклонен
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ПустаяСсылка();
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковПодписания.Подписывающий;
	НовоеСостояние.РезультатДействия = Перечисления.РезультатыПодписания.НеПодписано;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияДокументов.Отклонен;
	
	// На регистрации
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ПустаяСсылка();
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Выполняется;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковРегистрации.Регистратор;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияДокументов.НаРегистрации;
	
	// Зарегистрирован
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ПустаяСсылка();
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковРегистрации.Регистратор;
	НовоеСостояние.РезультатДействия = Перечисления.РезультатыРегистрации.Зарегистрировано;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияДокументов.Зарегистрирован;
	
	// Не зарегистрирован
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ПустаяСсылка();
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковРегистрации.Регистратор;
	НовоеСостояние.РезультатДействия = Перечисления.РезультатыРегистрации.НеЗарегистрировано;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияДокументов.НеЗарегистрирован;
	
	// На согласовании
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ПустаяСсылка();
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Выполняется;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковСогласования.Согласующий;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияДокументов.НаСогласовании;
	
	// Согласован
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ПустаяСсылка();
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковСогласования.Согласующий;
	НовоеСостояние.РезультатДействия = Перечисления.РезультатыСогласования.Согласовано;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияДокументов.Согласован;
	
	// Согласован с замечаниями
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ПустаяСсылка();
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковСогласования.Согласующий;
	НовоеСостояние.РезультатДействия = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияДокументов.Согласован;
	
	// Не согласован
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ПустаяСсылка();
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковСогласования.Согласующий;
	НовоеСостояние.РезультатДействия = Перечисления.РезультатыСогласования.НеСогласовано;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияДокументов.НеСогласован;
	
	// Материалы выступающих запрошены
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.Мероприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ЗапроситьМатериалы;
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Выполняется;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Исполнитель;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияМероприятий.МатериалыВыступающихЗапрошены;
	
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.Мероприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ЗапроситьМатериалы;
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Выполняется;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Рассматривающий;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияМероприятий.МатериалыВыступающихЗапрошены;
	
	// Получены материалы выступающих
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.Мероприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ЗапроситьМатериалы;
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Исполнитель;
	НовоеСостояние.РезультатДействия = Перечисления.РезультатыИсполнения.Исполнено;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияМероприятий.ПолученыМатериалыВыступающих;
	
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.Мероприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ЗапроситьМатериалы;
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Рассматривающий;
	НовоеСостояние.РезультатДействия = Перечисления.РезультатыРассмотрения.Рассмотрено;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияМероприятий.ПолученыМатериалыВыступающих;
	
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.Мероприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ЗапроситьМатериалы;
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат;
	НовоеСостояние.РезультатДействия = Перечисления.РезультатыИсполнения.Исполнено;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияМероприятий.ПолученыМатериалыВыступающих;
	
	// Протокол на исполнении
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.Мероприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ИсполнитьПротокол;
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Выполняется;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Исполнитель;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияМероприятий.ПротоколНаИсполнении;
	
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.Мероприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ИсполнитьПротокол;
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Выполняется;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Рассматривающий;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияМероприятий.ПротоколНаИсполнении;
	
	// Протокол исполнен
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.Мероприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ИсполнитьПротокол;
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Исполнитель;
	НовоеСостояние.РезультатДействия = Перечисления.РезультатыИсполнения.Исполнено;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияМероприятий.ПротоколИсполнен;
	
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.Мероприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ИсполнитьПротокол;
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Рассматривающий;
	НовоеСостояние.РезультатДействия = Перечисления.РезультатыРассмотрения.Рассмотрено;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияМероприятий.ПротоколИсполнен;
	
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.Мероприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ИсполнитьПротокол;
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат;
	НовоеСостояние.РезультатДействия = Перечисления.РезультатыИсполнения.Исполнено;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияМероприятий.ПротоколИсполнен;
	
	// Мероприятие в стадии подготовки
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.Мероприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ПровестиМероприятие;
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Выполняется;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Исполнитель;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияМероприятий.МероприятиеВСтадииПодготовки;
	
	// Мероприятие в стадии подготовки
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.Мероприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ПровестиМероприятие;
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Выполняется;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Рассматривающий;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияМероприятий.МероприятиеВСтадииПодготовки;
	
	// Мероприятие проведено
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.Мероприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ПровестиМероприятие;
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Исполнитель;
	НовоеСостояние.РезультатДействия = Перечисления.РезультатыИсполнения.Исполнено;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияМероприятий.МероприятиеПроведено;
	
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.Мероприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ПровестиМероприятие;
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Рассматривающий;
	НовоеСостояние.РезультатДействия = Перечисления.РезультатыРассмотрения.Рассмотрено;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияМероприятий.МероприятиеПроведено;
	
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.Мероприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ПровестиМероприятие;
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат;
	НовоеСостояние.РезультатДействия = Перечисления.РезультатыИсполнения.Исполнено;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияМероприятий.МероприятиеПроведено;
	
	// Протокол готовится
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.Мероприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ПодготовитьПротокол;
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Выполняется;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Исполнитель;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияМероприятий.ПротоколГотовиться;
	
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.Мероприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ПодготовитьПротокол;
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Выполняется;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Рассматривающий;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияМероприятий.ПротоколГотовиться;
	
	// Протокол подготовлен
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.Мероприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ПодготовитьПротокол;
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Исполнитель;
	НовоеСостояние.РезультатДействия = Перечисления.РезультатыИсполнения.Исполнено;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияМероприятий.ПротоколПодготовлен;
	
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.Мероприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ПодготовитьПротокол;
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Рассматривающий;
	НовоеСостояние.РезультатДействия = Перечисления.РезультатыРассмотрения.Рассмотрено;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияМероприятий.ПротоколПодготовлен;
	
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.Мероприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ПодготовитьПротокол;
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат;
	НовоеСостояние.РезультатДействия = Перечисления.РезультатыИсполнения.Исполнено;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияМероприятий.ПротоколПодготовлен;
	
	// Протокол на согласовании
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.Мероприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.СогласоватьПротокол;
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Выполняется;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковСогласования.Согласующий;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияМероприятий.ПротоколНаСогласовании;
	
	// Протокол согласован
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.Мероприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.СогласоватьПротокол;
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковСогласования.Согласующий;
	НовоеСостояние.РезультатДействия = Перечисления.РезультатыСогласования.Согласовано;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияМероприятий.ПротоколСогласован;
	
	// Протокол не согласован
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.Мероприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.СогласоватьПротокол;
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковСогласования.Согласующий;
	НовоеСостояние.РезультатДействия = Перечисления.РезультатыСогласования.НеСогласовано;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияМероприятий.ПротоколНеСогласован;
		
	// Протокол на утверждении
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.Мероприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.УтвердитьПротокол;
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Выполняется;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковУтверждения.Утверждающий;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияМероприятий.ПротоколНаУтверждении;
	
	// Протокол утвержден
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.Мероприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.УтвердитьПротокол;
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковУтверждения.Утверждающий;
	НовоеСостояние.РезультатДействия = Перечисления.РезультатыУтверждения.Утверждено;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияМероприятий.ПротоколУтвержден;
	
	// Протокол не утвержден
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.Мероприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.УтвердитьПротокол;
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковУтверждения.Утверждающий;
	НовоеСостояние.РезультатДействия = Перечисления.РезультатыУтверждения.НеУтверждено;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияМероприятий.ПротоколНеУтвержден;
	
	// Программа на утверждении
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.Мероприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.УтвердитьПрограмму;
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Выполняется;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковУтверждения.Утверждающий;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияМероприятий.ПрограммаНаУтверждении;
	
	// Программа утверждена
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.Мероприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.УтвердитьПрограмму;
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковУтверждения.Утверждающий;
	НовоеСостояние.РезультатДействия = Перечисления.РезультатыУтверждения.Утверждено;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияМероприятий.ПрограммаУтверждена;
	
	// Программа не утверждена
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.Мероприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.УтвердитьПрограмму;
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковУтверждения.Утверждающий;
	НовоеСостояние.РезультатДействия = Перечисления.РезультатыУтверждения.НеУтверждено;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияМероприятий.ПрограммаНеУтверждена;
	
	// Материалы отправлены на ознакомление
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.Мероприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ОзнакомитьСМатериалами;
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Выполняется;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковОзнакомления.Ознакомляемый;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияМероприятий.МатериалыОтправленыНаОзнакомление;
	
	// С материалами ознакомились
	НовоеСостояние = Результат.Добавить();
	НовоеСостояние.ТипПредмета = Перечисления.ТипыОбъектов.Мероприятия;
	НовоеСостояние.ЭтапОбработкиПредмета = Перечисления.ЭтапыОбработкиПредметов.ОзнакомитьСМатериалами;
	НовоеСостояние.СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено;
	НовоеСостояние.ФункцияУчастника = Перечисления.ФункцииУчастниковОзнакомления.Ознакомляемый;
	НовоеСостояние.РезультатДействия = Перечисления.РезультатыОзнакомления.Ознакомлен;
	НовоеСостояние.СостояниеДокумента = Перечисления.СостоянияМероприятий.СМатериаламиОзнакомились;
	
	Возврат Результат;

КонецФункции

Функция РезультатДействияДляСостоянияПредмета(Действие, ФункцияУчастника) 

	РезультатДействия = Неопределено;

	Если ДействияКлиентСервер.ЭтоДействиеОзнакомления(Действие) Тогда
		
		РезультатДействия = Перечисления.РезультатыОзнакомления.Ознакомлен;
		
	ИначеЕсли ДействияКлиентСервер.ЭтоДействиеИсполнения(Действие) Тогда
		
		Если ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Исполнитель Тогда
			РезультатДействия = Перечисления.РезультатыИсполнения.Исполнено;
		ИначеЕсли ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Рассматривающий Тогда
			РезультатДействия = Перечисления.РезультатыРассмотрения.Рассмотрено;
		ИначеЕсли ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат Тогда
			РезультатДействия = Перечисления.РезультатыИсполнения.Исполнено;
		Иначе
			РезультатДействия = Неопределено;
		КонецЕсли;
		
	ИначеЕсли ДействияКлиентСервер.ЭтоДействиеУтверждения(Действие) Тогда
		
		Результаты = РегистрыСведений.РезультатыДействий.РезультатыДействияПоФункцииУчастников(
			Действие, Перечисления.ФункцииУчастниковУтверждения.Утверждающий);

		Если Результаты.Найти(Перечисления.РезультатыУтверждения.НеУтверждено) <> Неопределено Тогда
			РезультатДействия = Перечисления.РезультатыУтверждения.НеУтверждено;
		Иначе
			РезультатДействия = Перечисления.РезультатыУтверждения.Утверждено;
		КонецЕсли;
		
	ИначеЕсли ДействияКлиентСервер.ЭтоДействиеПодписания(Действие) Тогда
		
		Результаты = РегистрыСведений.РезультатыДействий.РезультатыДействияПоФункцииУчастников(
			Действие, Перечисления.ФункцииУчастниковПодписания.Подписывающий);

		Если Результаты.Найти(Перечисления.РезультатыПодписания.НеПодписано) <> Неопределено Тогда
			РезультатДействия = Перечисления.РезультатыПодписания.НеПодписано;
		Иначе
			РезультатДействия = Перечисления.РезультатыПодписания.Подписано;
		КонецЕсли;
		
	ИначеЕсли ДействияКлиентСервер.ЭтоДействиеРегистрации(Действие) Тогда
		
		Результаты = РегистрыСведений.РезультатыДействий.РезультатыДействияПоФункцииУчастников(
			Действие, Перечисления.ФункцииУчастниковРегистрации.Регистратор);

		Если Результаты.Найти(Перечисления.РезультатыРегистрации.НеЗарегистрировано) <> Неопределено Тогда
			РезультатДействия = Перечисления.РезультатыРегистрации.НеЗарегистрировано;
		Иначе
			РезультатДействия = Перечисления.РезультатыРегистрации.Зарегистрировано;
		КонецЕсли;
		
	ИначеЕсли ДействияКлиентСервер.ЭтоДействиеСогласования(Действие) Тогда
	
		Результаты = РегистрыСведений.РезультатыДействий.РезультатыДействияПоФункцииУчастников(
			Действие, Перечисления.ФункцииУчастниковСогласования.Согласующий);

		Если Результаты.Найти(Перечисления.РезультатыСогласования.НеСогласовано) <> Неопределено Тогда
			РезультатДействия = Перечисления.РезультатыСогласования.НеСогласовано;
		ИначеЕсли Результаты.Найти(Перечисления.РезультатыСогласования.СогласованоСЗамечаниями) <> Неопределено Тогда
			РезультатДействия = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями;
		Иначе
			РезультатДействия = Перечисления.РезультатыСогласования.Согласовано;
		КонецЕсли;
		
	КонецЕсли;

	Возврат РезультатДействия;

КонецФункции

// Добавляет пометку "будет удален по условию настроек" в представление участника в дереве обработки
// 
// Параметры:
//  ПредметДействия - ОпределяемыйТип.ПредметДействияОбъект.
//  ЭлементыУчастниковДействия - Массив - Элементы участников действия
//  ИмяКолонкиПредставления - Строка - Имя колонки представления в дереве обработки
//
Процедура ПометитьУдаляемыхПоУсловиямУчастников(ПредметДействия, ЭлементыУчастниковДействия,
	ИмяКолонкиПредставления)
	
	ПометкаОбУдалении = НСтр("ru = ' (Будет удален по условию настроек)'");
	
	Для Каждого ЭлементУчастника Из ЭлементыУчастниковДействия Цикл

		Если Не РаботаСАлгоритмамиПроверки.АлгоритмПоПредметуВыполняется(ПредметДействия,
			ЭлементУчастника.Условие) Тогда
			
			// Дополнить представление участника припиской о том что он будет удален
			ЭлементУчастника[ИмяКолонкиПредставления] = СтрШаблон("%1 %2",
				ЭлементУчастника[ИмяКолонкиПредставления],
				ПометкаОбУдалении);
			ЭлементУчастника.БудетУдален = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет пометку "будет удален", всем участникам кроме первого т.к. в действиях Регистрации и Утверждения должен быть всегда один участник
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия - Ссылка на действие.
//  ЭлементыУчастниковДействия - Массив - Элементы участников действия
//  ИмяКолонкиПредставления - Строка - Имя колонки представления в дереве обработки
//
Процедура ПометитьУдаляемыхПоКоличествуУчастников(Действие, ЭлементыУчастниковДействия,
	ИмяКолонкиПредставления)
	
	Если Не ДействияКлиентСервер.ЭтоДействиеРегистрации(Действие) 
		И Не ДействияКлиентСервер.ЭтоДействиеУтверждения(Действие) Тогда
		Возврат;
	КонецЕсли;
	
	НайденПервыйУчастник = Ложь;
	ПометкаОбУдалении = НСтр("ru = ' (Будет удален, т.к. в действии должен остаться один участник)'");
	Для Каждого ЭлементУчастника Из ЭлементыУчастниковДействия Цикл

		Если ЭлементУчастника.БудетУдален Тогда
			Продолжить;
		КонецЕсли;
		Если Не НайденПервыйУчастник Тогда
			НайденПервыйУчастник = Истина;
			Продолжить;
		КонецЕсли;
		
		// Дополнить представление участника припиской о том что он будет удален
		ЭлементУчастника[ИмяКолонкиПредставления] = СтрШаблон("%1 %2",
			ЭлементУчастника[ИмяКолонкиПредставления],
			ПометкаОбУдалении);
		ЭлементУчастника.БудетУдален = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьПодпискиВНастоящемИлиБудущем(ВидБизнесСобытия)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЕстьПодписка = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст 
		= "ВЫБРАТЬ
		|	НастройкиОбработкиВидовОбъектов.Ссылка,
		|	НастройкиОбработкиВидовОбъектов.ДействуетПо,
		|	НастройкиОбработкиВидовОбъектов.ДействуетС
		|ИЗ
		|	Справочник.НастройкиОбработкиВидовОбъектов КАК НастройкиОбработкиВидовОбъектов
		|ГДЕ
		|	НастройкиОбработкиВидовОбъектов.ПометкаУдаления = ЛОЖЬ
		|	И НастройкиОбработкиВидовОбъектов.ВидБизнесСобытия = &ВидБизнесСобытия";
		
	Запрос.УстановитьПараметр("ВидБизнесСобытия", ВидБизнесСобытия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекДень = НачалоДня(ТекущаяДата());
	
	Пока Выборка.Следующий() Цикл
		
		// Проверяем что настройка 
		// либо ДействуетС - в настоящем либо будущем.
		// либо ДействуетС - в прошлом, а ДействуетПо  -не заполнено, либо в настоящем либо будущем.  
		Если Выборка.ДействуетС >= ТекДень 
			Или (Выборка.ДействуетС < ТекДень И (Выборка.ДействуетПо >= ТекДень Или Не ЗначениеЗаполнено(Выборка.ДействуетПо))) 
			Тогда
				
			ЕстьПодписка = Истина;
			Прервать;
			
		КонецЕсли;	 
		
	КонецЦикла;		
	
	Возврат ЕстьПодписка;
	
КонецФункции

// Формирует условия запрета выполнения для предмета.
//
// Параметры:
//  Предмет - ОпределяемыйТип.ПредметДействия - Ссылка на объект обработки.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - С полями:
//   * ВидДействия - СправочникСсылка.ВидыДействий - ссылка на вид действия.
//   * ТекстПредупреждения - Строка - Текст предупреждения.
//   * Условие - СправочникСсылка.АлгоритмыПроверки - Условие (Алгоритм).
//   * УсловиеТипОбъекта - ПеречислениеСсылка.ТипыОбъектов - Тип объекта из алгоритма.
//   * Функция - ОпределяемыйТип.ФункцииУчастниковДействий - Функция, заполнена, если в настройке задан отбор по функции
//   														 участника.
//   * Этап - ОпределяемыйТип.НаименованиеЭтапа - Этап, для некоторых видов действий, если в настройке задан отбор по
//   											  этапу.
Функция УсловияПроверкиВыполнения(Предмет) 
	
	УстановитьПривилегированныйРежим(Истина);
	
	УсловияПроверкиВыполнения = Новый ТаблицаЗначений();
	УсловияПроверкиВыполнения.Колонки.Добавить("ВидДействия");
	УсловияПроверкиВыполнения.Колонки.Добавить("ТекстПредупреждения");
	УсловияПроверкиВыполнения.Колонки.Добавить("Условие");
	УсловияПроверкиВыполнения.Колонки.Добавить("УсловиеТипОбъекта");
	УсловияПроверкиВыполнения.Колонки.Добавить("Функция");
	УсловияПроверкиВыполнения.Колонки.Добавить("Этап");
	
	Если Не ЗначениеЗаполнено(Предмет) Тогда
		Возврат УсловияПроверкиВыполнения;
	КонецЕсли;

	НастройкаОбработки = Справочники.НастройкиОбработкиВидовОбъектов.НастройкаОбработкиДляОбъекта(Предмет);

	Если Не ЗначениеЗаполнено(НастройкаОбработки) Тогда
		Возврат УсловияПроверкиВыполнения;
	КонецЕсли;
	
	РезультатУсловияПроверкиВыполнения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		НастройкаОбработки,
		"УсловияПроверкиВыполнения");
	Если РезультатУсловияПроверкиВыполнения = Неопределено Тогда
		Возврат УсловияПроверкиВыполнения;
	КонецЕсли;
	УсловияПроверкиВыполнения = РезультатУсловияПроверкиВыполнения.Выгрузить();
	
	// Дополнение таблицы полем ТипОбъекта:
	УсловияПроверкиВыполнения.Колонки.Добавить("УсловиеТипОбъекта");
	ЗначенияКолонкиУсловие = УсловияПроверкиВыполнения.ВыгрузитьКолонку("Условие"); // Массив Из СправочникСсылка.АлгоритмыПроверки
	ТипыОбъектовУсловий = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ЗначенияКолонкиУсловие, "ТипОбъекта");
	Для Каждого СтрокаУсловия Из УсловияПроверкиВыполнения Цикл
		СтрокаУсловия.УсловиеТипОбъекта = ТипыОбъектовУсловий[СтрокаУсловия.Условие];
	КонецЦикла;
	
	Возврат УсловияПроверкиВыполнения;
	
КонецФункции

Функция ПредставлениеФункции(ФункцияУчастника) Экспорт
	
	Если ЗначениеЗаполнено(ФункцияУчастника) Тогда
		
		Если ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезолюцию Тогда
			Возврат НСтр("ru = 'Обработать резолюцию'");
			
		ИначеЕсли ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Рассматривающий Тогда
			Возврат НСтр("ru = 'Рассмотреть'");

		ИначеЕсли ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Исполнитель Тогда
			Возврат НСтр("ru = 'Исполнить'");
			
		ИначеЕсли ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат Тогда
			Возврат НСтр("ru = 'Проверить'");

		ИначеЕсли ФункцияУчастника = Перечисления.ФункцииУчастниковПодписания.Подписывающий Тогда
			Возврат НСтр("ru = 'Подписать'");
			
		ИначеЕсли ФункцияУчастника = Перечисления.ФункцииУчастниковПодписания.ОбрабатывающийРезультат Тогда
			Возврат НСтр("ru = 'Ознакомиться с результатом подписания'");
			
		ИначеЕсли ФункцияУчастника = Перечисления.ФункцииУчастниковПодписания.ОбеспечивающийПодписание Тогда
			Возврат НСтр("ru = 'Обеспечить подписание'");

		ИначеЕсли ФункцияУчастника = Перечисления.ФункцииУчастниковРегистрации.Регистратор Тогда
			Возврат НСтр("ru = 'Зарегистрировать'");
			
		ИначеЕсли ФункцияУчастника = Перечисления.ФункцииУчастниковРегистрации.ОбрабатывающийРезультат Тогда
			Возврат НСтр("ru = 'Ознакомиться с результатом регистрации'");

		ИначеЕсли ФункцияУчастника = Перечисления.ФункцииУчастниковСогласования.Согласующий Тогда
			Возврат НСтр("ru = 'Согласовать'");
			
		ИначеЕсли ФункцияУчастника = Перечисления.ФункцииУчастниковСогласования.ОбрабатывающийРезультат Тогда
			Возврат НСтр("ru = 'Ознакомиться с результатом согласования'");
			
		ИначеЕсли ФункцияУчастника = Перечисления.ФункцииУчастниковСогласования.ОбеспечивающийСогласование Тогда
			Возврат НСтр("ru = 'Обеспечить согласование'");

		ИначеЕсли ФункцияУчастника = Перечисления.ФункцииУчастниковУтверждения.Утверждающий Тогда
			Возврат НСтр("ru = 'Утвердить'");
			
		ИначеЕсли ФункцияУчастника = Перечисления.ФункцииУчастниковУтверждения.ОбрабатывающийРезультат Тогда
			Возврат НСтр("ru = 'Ознакомиться с результатом утверждения'");

		ИначеЕсли ФункцияУчастника = Перечисления.ФункцииУчастниковОзнакомления.Ознакомляемый Тогда
			Возврат НСтр("ru = 'Ознакомиться'");
			
		ИначеЕсли ФункцияУчастника = Перечисления.ФункцииУчастниковОзнакомления.Ознакомляющий Тогда
			Возврат НСтр("ru = 'Ознакомить'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Строка(ФункцияУчастника);
	
КонецФункции

// Добавляет отметку о вытеснении в переданное представление участника по информации из параметров вытеснения
// 
// Параметры:
//  Представление - Строка - Представление участника, в которое нужно добавить отметку
//  ПараметрыВытеснения - Структура - Параметры вытеснения. Структура параметров вытеснения участника из 
//  	ПравилаОбработкиСервер.ВытесняемыеУчастникиДереваОбработки
//
Процедура ДобавитьОтметкуОВытеснении(Представление, ПараметрыВытеснения)
	
	Представление = СтрШаблон(НСтр("ru = '%1 (Будет вытеснен участником действия %2)'"),
		Представление, 
		?(ЗначениеЗаполнено(ПараметрыВытеснения.ВытесняющееДействие.ПредставлениеЧистое),
			ПараметрыВытеснения.ВытесняющееДействие.ПредставлениеЧистое,
			ПараметрыВытеснения.ВытесняющееДействие.Представление));
	
КонецПроцедуры

Функция РасширенныеНастройкиОбработкиОбъекта(СсылкаНаНастройку, ВидДействия)
	
	РасширенныеНастройки = Новый Структура();
	РасширенныеНастройки.Вставить("ПравилаЗапуска", НСтр("ru = 'Не задан'"));
	РасширенныеНастройки.Вставить("УсловияПроверки", Новый ТаблицаЗначений());
	РасширенныеНастройки.Вставить("УсловияЗапуска", НСтр("ru = 'Не заданы'"));
	РасширенныеНастройки.Вставить("ЕстьОбработка", Ложь);

	Если Не ЗначениеЗаполнено(СсылкаНаНастройку) Тогда
		Возврат РасширенныеНастройки;
	КонецЕсли;	

	// обновим ПравилаЗапуска	
	РеквНастройки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаНастройку, 
		"ВидБизнесСобытия, ВидИнтерактивногоСобытия, УсловияПроверкиВыполнения, УсловияЗапуска");

	Если ЗначениеЗаполнено(РеквНастройки.ВидБизнесСобытия) 
		И Не ЗначениеЗаполнено(РеквНастройки.ВидИнтерактивногоСобытия) Тогда	
			
		РасширенныеНастройки.Вставить("ПравилаЗапуска", НСтр("ru = 'Задан'"));

	ИначеЕсли Не ЗначениеЗаполнено(РеквНастройки.ВидБизнесСобытия) 
		И ЗначениеЗаполнено(РеквНастройки.ВидИнтерактивногоСобытия) Тогда	
			
		РасширенныеНастройки.Вставить("ПравилаЗапуска", НСтр("ru = 'Задан'"));
		
	КонецЕсли;
	
	УсловияЗапуска = РеквНастройки.УсловияЗапуска.Выгрузить();
	Если УсловияЗапуска.Количество() <> 0 Тогда
		
		СтрокаУсловий = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru = ';%1 условие;;%1 условия;%1 условий;%1 условий'"),
				УсловияЗапуска.Количество());
		
		РасширенныеНастройки.Вставить("УсловияЗапуска", СтрокаУсловий);
		
	КонецЕсли;	
			 	
	РасширенныеНастройки.Вставить("УсловияПроверки", 
		РеквНастройки.УсловияПроверкиВыполнения.Выгрузить());

	РасширенныеНастройки.Вставить("ЕстьОбработка",
		ЗначениеЗаполнено(РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаПоНастройке(
			СсылкаНаНастройку)));
	
	Возврат РасширенныеНастройки;
	
КонецФункции

// Правила эскалации по настройке.
// 
// Параметры:
//  СсылкаНаНастройку  - СправочникСсылка.НастройкиОбработкиВидовОбъектов
//  ВидДействия  - СправочникСсылка.ВидыДействий
// 
// Возвращаемое значение:
//  
Функция ПравилаЭскалацииПоНастройке(СсылкаНаНастройку, ВидДействия) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПравилаЭскалацииЗадачОбработки.Ссылка КАК Ссылка,
	               |	ПравилаЭскалацииЗадачОбработки.Ссылка.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.ПравилаЭскалации.Обработки КАК ПравилаЭскалацииЗадачОбработки
	               |ГДЕ
	               |	ПравилаЭскалацииЗадачОбработки.Ссылка.ПометкаУдаления = ЛОЖЬ
	               |	И ПравилаЭскалацииЗадачОбработки.НастройкаОбработки = &НастройкаОбработки
	               |	И ПравилаЭскалацииЗадачОбработки.ВидДействия = &ВидДействия";
	
	Запрос.УстановитьПараметр("НастройкаОбработки", СсылкаНаНастройку);
	Запрос.УстановитьПараметр("ВидДействия", ВидДействия);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция МассивВСтроку(МассивЗначений)

	МассивСлияния = Новый Массив();
	Для Каждого Элем Из МассивЗначений Цикл
		Если ТипЗнч(Элем) = Тип("Структура") Тогда

			Участник = Строка(Элем.Участник);
			Если Элем.Свойство("Защищенный") И Элем.Защищенный Тогда
				Участник = СтрШаблон("%1 (%2)", Участник, НСтр("ru = 'защищенный'"));
			КонецЕсли;
			
			МассивСлияния.Добавить(Участник);
			
		Иначе
			МассивСлияния.Добавить(Строка(Элем));
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСлияния, ";");

КонецФункции

Функция ЗаполнитьСтрокуУчастника(Исполнитель, ЭлементДействие, ЗначенияЗаполнения, ПараметрыУчастника, ПечатьКарточкиДокумента)
	
	МассивСтрокУчастник = Новый Массив;   
	
	Если Не ПечатьКарточкиДокумента Тогда
		ЭлементыУчастники = ЭлементДействие.ПолучитьЭлементы();
	Иначе	
		ЭлементыУчастники = ЭлементДействие.Строки;
	КонецЕсли;	
	
	НужнаИсторияОбработки = ПараметрыУчастника.НужнаИсторияОбработки;
	ЧислоСиблингов = ПараметрыУчастника.ЧислоСиблингов;
	
	ЭлементУчастник = Неопределено;

	Задача = Неопределено; // это задача процесса
	ДействиеЗадачиПоИсточнику = Неопределено;
	Если ПараметрыУчастника.ВыполнятьДействияПроцессами Тогда
		
		НадоПолучатьЗадачу = Истина;
		
		Если ПараметрыУчастника.ЕстьПодучастники
			И Исполнитель.Функция = Перечисления.ФункцииУчастниковПодписания.Подписывающий Тогда
			НадоПолучатьЗадачу = Ложь;
		КонецЕсли;	
	
		Если НадоПолучатьЗадачу Тогда   
			
			Если Не ДействияКлиентСервер.ЭтоДействиеОзнакомления(ПараметрыУчастника.Действие) Тогда
				Задача = ПараметрыУчастника.ЗадачиПоИдентификатору[Исполнитель.Идентификатор];
			Иначе 
				ДействиеЗадачиПоИсточнику = ДействияВызовСервера.ДействиеЗадачиДляСтрокиОзнакомления(
					ПараметрыУчастника.Действие, Исполнитель.Идентификатор);
			КонецЕсли;		
		КонецЕсли;	
			
	КонецЕсли;		         

	МассовыйРежим = Ложь;
	Если ЗначенияЗаполнения.Свойство("МассовыйРежим") Тогда 
		МассовыйРежим = ЗначенияЗаполнения.МассовыйРежим;
	КонецЕсли;
	
	Если МассовыйРежим Тогда
		
		РазвернутыеУчастники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Исполнитель.Участник);
		
	Иначе	

		МожноВернутьСтруктура = Истина;
		РазвернутыеУчастники = РазвернутыеУчастники(
			Исполнитель.Участник, ПараметрыУчастника.ПредметОбъект, , // для проверки
			Истина, // можно вернуть пустой массив
			ПараметрыУчастника.СоответствиеСотрудниковВКонтейнерах,
			МожноВернутьСтруктура);
			
	КонецЕсли;	
		
	Если Исполнитель.Функция = Перечисления.ФункцииУчастниковПодписания.ОбеспечивающийПодписание 
		И РазвернутыеУчастники.Количество() > 1 Тогда
			
		Участник0 = РазвернутыеУчастники[0];
		Если ТипЗнч(Участник0) = Тип("Структура") Тогда
			Участник0 = Участник0.Исполнитель;
		КонецЕсли;	
		
		РазвернутыеУчастники.Очистить();
		РазвернутыеУчастники.Добавить(Участник0);
			
	КонецЕсли;		
	
	// В "массовом режиме" участников не разворачиваем
	Если МассовыйРежим Тогда 
		НеУдалосьРазыменовать = Ложь;
	Иначе 
		НеУдалосьРазыменовать = РазвернутыеУчастники.Количество() = 0;
	КонецЕсли;
	
	Если РазвернутыеУчастники.Количество() = 0 Тогда
		РазвернутыеУчастники.Добавить(Исполнитель.Участник);
	КонецЕсли;
	
	Для Каждого РазвернутыйУчастникСтрока Из РазвернутыеУчастники Цикл
		
		РазвернутыйУчастник = РазвернутыйУчастникСтрока;
		Если ТипЗнч(РазвернутыйУчастник) = Тип("Структура") Тогда
			РазвернутыйУчастник = РазвернутыйУчастник.Исполнитель;
		КонецЕсли;	
		
		ЭтоЕдинственныйУчастник = (ЧислоСиблингов = 1) И (РазвернутыеУчастники.Количество() = 1);

		Участник = Исполнитель.Участник;
		
		Если ЭтоЕдинственныйУчастник Тогда
			ЭлементУчастник = ЭлементДействие;
		Иначе	
			ЭлементУчастник = ЭлементыУчастники.Добавить();
		КонецЕсли;     
		
		МассивСтрокУчастник.Добавить(ЭлементУчастник);
		
		ЗаполнитьЗначенияСвойств(ЭлементУчастник, ЗначенияЗаполнения);
		ЗаполнитьЗначенияСвойств(ЭлементУчастник, Исполнитель, 
			"Функция, Идентификатор, Этап, НаименованиеЗадачи, Описание, Условие");
		ЭлементУчастник.ЭтоУчастник = Истина;
		ЭлементУчастник.Участник = Участник;
		ЭлементУчастник.РазыменованныйПользователь = РазвернутыйУчастник;
		ЭлементУчастник.НеУдалосьРазыменовать = НеУдалосьРазыменовать;
		
		ЭлементУчастник.ИдентификаторПункта =  Исполнитель.ИдентификаторЭтапа;
		
		Если МассовыйРежим Тогда
			
			ЭлементУчастник.Состояние = Исполнитель.СостояниеОзнакомления;
			ЭлементУчастник.ДатаУстановкиСостояния = Исполнитель.ДатаОзнакомления;
			ЭлементУчастник.РезультатТекстом = Исполнитель.РезультатОзнакомленияТекстом;
			Если ЭлементУчастник.Состояние = Перечисления.СостоянияВыполненияДействий.Завершено Тогда
				ЭлементУчастник.Результат = Перечисления.РезультатыОзнакомления.Ознакомлен;
			КонецЕсли;	

		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ЭлементУчастник.Функция)
			И Не ЗначениеЗаполнено(ЭлементУчастник.Представление) Тогда
				
			ЭлементУчастник.Представление = ПредставлениеФункции(ЭлементУчастник.Функция);
			
			Если Исполнитель.Ответственный Тогда
				ЭлементУчастник.Представление = ЭлементУчастник.Представление + НСтр("ru = ' (отв.)'"); 
			КонецЕсли;
				
		КонецЕсли;	
		
		ЭлементУчастник.ГлубинаВложенности = ПараметрыУчастника.ГлубинаВложенности;

		СведенияОбУчастнике = ПараметрыУчастника.СведенияОбУчастниках.Получить(ЭлементУчастник.Идентификатор);
		Если Не СведенияОбУчастнике = Неопределено Тогда
			ЭлементУчастник.ФактическийУчастник = СведенияОбУчастнике.ФактическийИсполнитель;
			
			Если ЗначениеЗаполнено(ЭлементУчастник.ФактическийУчастник) Тогда
				ЭлементУчастник.НеУдалосьРазыменовать = Ложь;
			КонецЕсли;	
			
			ЭлементУчастник.СрокРассчитанный = СведенияОбУчастнике.СрокРассчитанный;
			
			Если ЗначениеЗаполнено(ЭлементУчастник.СрокРассчитанный) 
				И ЭлементУчастник.СрокРассчитанный < ТекущаяДатаСеанса() Тогда
				ЭлементУчастник.СрокПревышен = Истина;
			КонецЕсли;       	
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Исполнитель.СрокОзнакомления) Тогда          
			ЭлементУчастник.СрокРассчитанный = Исполнитель.СрокОзнакомления;
			
			Если ЗначениеЗаполнено(ЭлементУчастник.СрокРассчитанный) 
				И ЭлементУчастник.СрокРассчитанный < ТекущаяДатаСеанса() Тогда
				ЭлементУчастник.СрокПревышен = Истина;
			Иначе	
				ЭлементУчастник.СрокПревышен = Ложь;
			КонецЕсли;       	
			
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Исполнитель.ФактическийУчастникОзнакомления) Тогда
			ЭлементУчастник.ФактическийУчастник = Исполнитель.ФактическийУчастникОзнакомления;
		КонецЕсли;

		УчастникДляПредставления = ЭлементУчастник.Участник;
		Если ЗначениеЗаполнено(РазвернутыйУчастник) Тогда
			УчастникДляПредставления = РазвернутыйУчастник;
		КонецЕсли;
		
		Если СведенияОбУчастнике <> Неопределено И ЗначениеЗаполнено(СведенияОбУчастнике.ФактическийИсполнитель) Тогда
			
			ЭлементУчастник.ПредставлениеСотрудники = СведенияОбУчастнике.ПредставлениеФактическогоИсполнителя;
			
		ИначеЕсли ЗначениеЗаполнено(Исполнитель.ПредставлениеФактическогоУчастникаОзнакомления) Тогда
			
			ЭлементУчастник.ПредставлениеСотрудники = Исполнитель.ПредставлениеФактическогоУчастникаОзнакомления;
			
		Иначе
			
			ЭлементУчастник.ПредставлениеСотрудники = ПредставлениеУчастника(
				УчастникДляПредставления, ЭлементУчастник.ФактическийУчастник); 
			
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ПараметрыУчастника.ДопОписаниеОзнакомиться) Тогда
			ЭлементУчастник.ПредставлениеСотрудники 
				= Строка(ЭлементУчастник.ПредставлениеСотрудники) 
				+ ПараметрыУчастника.ДопОписаниеОзнакомиться;
		КонецЕсли;	

		ЭлементУчастник.ВариантУстановкиСрока = ЗначенияЗаполнения.ВариантУстановкиСрока;
		ЭлементУчастник.СрокПредставление = СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
			Исполнитель.Срок, Исполнитель.СрокДни, Исполнитель.СрокЧасы, Исполнитель.СрокМинуты,
			ПараметрыУчастника.ИспользоватьДатуИВремяВСрокахЗадач, ЭлементУчастник.ВариантУстановкиСрока);
		
		ЭлементУчастник.Защищенный = ПараметрыУчастника.Защищенный;
		
		Если ТипЗнч(РазвернутыйУчастникСтрока) = Тип("Структура")
			И РазвернутыйУчастникСтрока.Свойство("ИдентификаторПункта") 
			И ЗначениеЗаполнено(РазвернутыйУчастникСтрока.ИдентификаторПункта) Тогда  
			
			ЭлементУчастник.ИдентификаторПункта =  РазвернутыйУчастникСтрока.ИдентификаторПункта;  
			
			Если РазвернутыйУчастникСтрока.Свойство("Срок") 
			И ЗначениеЗаполнено(РазвернутыйУчастникСтрока.Срок) Тогда  
			
				ЭлементУчастник.СрокПредставление = СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
					РазвернутыйУчастникСтрока.Срок, 0, 0, 0,
					ПараметрыУчастника.ИспользоватьДатуИВремяВСрокахЗадач, 
					Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок);
				
			КонецЕсли;
			
		КонецЕсли;	
		
		ЭлементУчастник.СколькоВсегоНадоОзнакомить = ПараметрыУчастника.СколькоВсегоНадоОзнакомить;
		ЭлементУчастник.СколькоОзнакомлено = ПараметрыУчастника.СколькоОзнакомлено;
		ЭлементУчастник.ДопОписаниеОзнакомиться = ПараметрыУчастника.ДопОписаниеОзнакомиться;
		
		Если Не ПечатьКарточкиДокумента Тогда	
			ЭлементыПодзадачи = ЭлементУчастник.ПолучитьЭлементы();
		Иначе
			ЭлементыПодзадачи = ЭлементУчастник.Строки;
		КонецЕсли;			

		// выводим подзадачи - только этой итерации. Как выполненные так и невыполненные.
		// как плюсик - отложенная загрузка
		Если Не НужнаИсторияОбработки 
			И ПараметрыУчастника.ВыполнятьДействияПроцессами 
			И (ЗначениеЗаполнено(Задача) Или ЗначениеЗаполнено(ДействиеЗадачиПоИсточнику)) Тогда
			
			Если ЗначениеЗаполнено(Задача) Тогда
				ДействиеЗадачиПоИсточнику = Документы.ДействиеЗадачи.НайтиПоИсточнику(Задача);
			КонецЕсли;	
			Если ЗначениеЗаполнено(ДействиеЗадачиПоИсточнику) Тогда
				
				НомерИтерации = РегистрыСведений.ИтерацииДействий.НомерИтерации(
					ПараметрыУчастника.Действие,
					ЭлементУчастник.Идентификатор);
				
				Подзадачи = ИнтеграцияЗадач.ПодзадачиПоДействию(
					ДействиеЗадачиПоИсточнику, НомерИтерации);
				ВсегоЗапланированныхЗадач = 0;	
				Для Каждого Стр Из Подзадачи Цикл
					
					ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(Стр.ВидЗадачи);
					
					Если Стр.СостояниеЗадачи <> ДанныеВидаЗадачи.СостояниеЗадачиЧерновик Тогда
						
						ДействияЗадач = ИнтеграцияЗадач.ДействияЗадачПоПодзадаче(Стр.Подзадача);
						
						Для Каждого ДействияЗадачСтрока Из ДействияЗадач Цикл
							
							Если РаботаСЗадачамиПовтИсп.ЭтоПроверяющий(ДействияЗадачСтрока.ВидУчастника) Тогда
								Продолжить;
							КонецЕсли;
							Если Не ЗначениеЗаполнено(ДействияЗадачСтрока.СостояниеУчастникаЗадачи) Тогда
								Продолжить;
							КонецЕсли;
						
							ВсегоЗапланированныхЗадач = ВсегоЗапланированныхЗадач + 1;
							
						КонецЦикла;	
						
					КонецЕсли;
						
				КонецЦикла;	 
					
				Если ВсегоЗапланированныхЗадач <> 0 Тогда
					
					Если ПечатьКарточкиДокумента Тогда // сразу добавим  (без веток "Подзадачи", тут не надо)
						
						ДобавитьПодзадачи(
							ЭлементыПодзадачи, 
							ЭлементУчастник);
						
					Иначе		

						// добавим фиктивную подветку
						// точнее сперва подветку "Подзадачи", а в ней фиктивную подветку
						
						ЭлементВеткаПодзадача = ЭлементыПодзадачи.Добавить();
						ЭлементВеткаПодзадача.Представление = НСтр("ru = 'Подзадачи'");
						ЭлементВеткаПодзадача.ЭтоВеткаПодзадачи = Истина;

						ЭлементПодзадача = ЭлементВеткаПодзадача.ПолучитьЭлементы().Добавить();
						ЭлементПодзадача.СлужебнаяСтрока = Истина;
						ЭлементПодзадача.ЭтоПодзадача = Истина;
						
					КонецЕсли;	
					
				КонецЕсли;	
				
				
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат МассивСтрокУчастник;

КонецФункции  

Процедура ДобавитьПодзадачи(ЭлементыУчастники, ЭлементУчастник)

	ЭлементСтрока = Новый Структура(
		"ДействиеЗадачи, ЭтоПодзадача, Этап, Участник, 
		|РазыменованныйПользователь, СрокПредставление, 
		|ПредставлениеСотрудники, ГлубинаВложенности,
		|Состояние, ПредставлениеРезультата,
		|Действие, ЭтоУчастник, Идентификатор,
		|ЕстьПодучастники, Функция,
		|НомерКартинки, НомерИтерации, ДатаУстановкиСостояния,
		|ВидУчастника, Подзадача, Заголовок, СрокРассчитанный, СрокПревышен");

	ЗаполнитьЗначенияСвойств(ЭлементСтрока, ЭлементУчастник);	

	МассивДочернихСтрок = ДействияВызовСервера.ПолучитьСтрокиПодзадач(ЭлементСтрока);

	ВсеПодзадачи = Новый Соответствие; // ключ - Задача, значение - Заголовок
	Для Каждого Строка Из МассивДочернихСтрок Цикл
		ВсеПодзадачи[Строка.Подзадача] = Строка.Заголовок;
	КонецЦикла;	
	ТолькоОднаПодзадача = (ВсеПодзадачи.Количество() = 1);

	ВсеПодзадачиВеткиДерева = Новый Соответствие; // ключ - Задача, значение - строка дерева

	Для Каждого Строка Из МассивДочернихСтрок Цикл
		
		Если ТолькоОднаПодзадача Тогда
			СтрокаПодзадачи = ЭлементыУчастники.Добавить();
		Иначе
			
			ВеткаПодзадачи = ВсеПодзадачиВеткиДерева.Получить(Строка.Подзадача);
			Если ВеткаПодзадачи = Неопределено Тогда
				
				ВеткаПодзадачи = ЭлементыУчастники.Добавить();
				ВеткаПодзадачи.ЭтоПодзадача = Истина;
				ВеткаПодзадачи.Представление = ВсеПодзадачи[Строка.Подзадача];
				
				ВсеПодзадачиВеткиДерева[Строка.Подзадача] = ВеткаПодзадачи;
				
			КонецЕсли;
			
			СтрокаПодзадачи = ВеткаПодзадачи.Строки.Добавить();
			
		КонецЕсли;		
		
		ЗаполнитьЗначенияСвойств(СтрокаПодзадачи, Строка);
		
		Если Не ЗначениеЗаполнено(СтрокаПодзадачи.Представление) Тогда
			Если Строка.ВидУчастника = ПредопределенноеЗначение("Справочник.ВидыУчастниковЗадач.Исполнитель") Тогда
				СтрокаПодзадачи.Представление = НСтр("ru = 'Исполнить'");
			ИначеЕсли Строка.ВидУчастника = ПредопределенноеЗначение("Справочник.ВидыУчастниковЗадач.Ответственный") Тогда	
				СтрокаПодзадачи.Представление = НСтр("ru = 'Исполнить (отв.)'");
			ИначеЕсли Строка.ВидУчастника = ПредопределенноеЗначение("Справочник.ВидыУчастниковЗадач.Проверяющий") Тогда	
				СтрокаПодзадачи.Представление = НСтр("ru = 'Проверить'");
			ИначеЕсли Строка.ВидУчастника = ПредопределенноеЗначение("Справочник.ВидыУчастниковЗадач.Ознакомляемый") Тогда	
				СтрокаПодзадачи.Представление = НСтр("ru = 'Ознакомиться'");
			ИначеЕсли Строка.ВидУчастника = ПредопределенноеЗначение("Справочник.ВидыУчастниковЗадач.Согласующий") Тогда	
				СтрокаПодзадачи.Представление = НСтр("ru = 'Согласовать'");
			ИначеЕсли Строка.ВидУчастника = ПредопределенноеЗначение("Справочник.ВидыУчастниковЗадач.ОбрабатывающийРезультат") Тогда	
				СтрокаПодзадачи.Представление = НСтр("ru = 'Обработать результат'");
			КонецЕсли;	
		КонецЕсли;	
		
		Если Строка.ЕстьПодзадачи Тогда         
			
			ДобавитьПодзадачи(СтрокаПодзадачи.Строки, СтрокаПодзадачи);

		КонецЕсли;	
		
	КонецЦикла;	 
	
КонецПроцедуры

// Проверяет, учитывает ли действие функции участников.
// 
// Параметры:
//	Действие - ОпределяемыйТип.Действия, ОпределяемыйТип.ДействияОбъект - Действие, которое необходимо проверить.
// 
// Возврашаемое значение:
//	Булево - Истина - Действие учитывает функции участников.
//
Функция ЭтоДействиеСУчетомФункцийУчастников(Действие)
	
	ТипДействия = ТипЗнч(Действие);
	
	Если ТипДействия = Тип("СправочникСсылка.ДействияОзнакомления")
			Или ТипДействия = Тип("СправочникОбъект.ДействияОзнакомления") Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает функцию участника действия по умолчанию.
// 
// Параметры:
//	Действие - ОпределяемыйТип.Действия,
//			   ОпределяемыйТип.ДействияОбъект - Действие, для котрого нужно получить функцию участника.
// 
// Возврашаемое значение:
//	ПеречислениеСсылка - Функция участника действия по умолчанию.
//
Функция ФункцияДействияУчастникаПоУмолчанию(Действие) Экспорт
	
	ТипДействия = ТипЗнч(Действие);
	
	ФункцияУчастника = Неопределено;
	
	Если ТипДействия = Тип("СправочникСсылка.ДействияИсполнения")
			Или ТипДействия = Тип("СправочникОбъект.ДействияИсполнения") Тогда
		
		ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Исполнитель;
	ИначеЕсли ТипДействия = Тип("СправочникСсылка.ДействияОзнакомления")
			Или ТипДействия = Тип("СправочникОбъект.ДействияОзнакомления") Тогда
		
		ФункцияУчастника =  Перечисления.ФункцииУчастниковОзнакомления.Ознакомляемый;
	ИначеЕсли ТипДействия = Тип("СправочникСсылка.ДействияПодписания")
			Или ТипДействия = Тип("СправочникОбъект.ДействияПодписания") Тогда
		
		ФункцияУчастника = Перечисления.ФункцииУчастниковПодписания.Подписывающий;
	ИначеЕсли ТипДействия = Тип("СправочникСсылка.ДействияРегистрации")
			Или ТипДействия = Тип("СправочникОбъект.ДействияРегистрации") Тогда
		
		ФункцияУчастника = Перечисления.ФункцииУчастниковРегистрации.Регистратор;
	ИначеЕсли ТипДействия = Тип("СправочникСсылка.ДействияСогласования")
			Или ТипДействия = Тип("СправочникОбъект.ДействияСогласования") Тогда
		
		ФункцияУчастника = Перечисления.ФункцииУчастниковСогласования.Согласующий;
	ИначеЕсли ТипДействия = Тип("СправочникСсылка.ДействияУтверждения")
			Или ТипДействия = Тип("СправочникОбъект.ДействияУтверждения") Тогда
		
		ФункцияУчастника = Перечисления.ФункцииУчастниковУтверждения.Утверждающий;
	КонецЕсли;
	
	Возврат ФункцияУчастника;
	
КонецФункции

// Возвращает сотрудников, выполнивших подписание и обеспечивших подписание предмета по организации.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма предмета обработки
// 
// Возвращаемое значение:
//  ФиксированноеСоответствие из КлючИЗначение:
// * Ключ - СправочникСсылка.Организации - организация подписания.
// * Значение - Соответствие из КлючИЗначение: 
//              ** Ключ - СправочникСсылка.Сотрудники - сотрудник, выполнивший подписание в обработке документа.
//              ** Значение - СправочникСсылка.Сотрудники - сотрудник, обеспечивающий подписание.
// 
Функция ПодписантыИОбеспечивающиеПодписаниеПредметаПоОрганизациям(Форма)
	
	Результат = Новый Соответствие;
	
	Если Форма.Объект.Ссылка.Пустая() Тогда
		Возврат Новый ФиксированноеСоответствие(Результат);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДействияПодписания = Новый Массив;
	Для Каждого ЭлементДействия Из Форма.Действия.ПолучитьЭлементы() Цикл
		
		Если Не ЭлементДействия.ЭтоДействие
			Или Не ДействияКлиентСервер.ЭтоДействиеПодписания(ЭлементДействия.Действие) Тогда
			Продолжить;
		КонецЕсли;
		
		ДействияПодписания.Добавить(ЭлементДействия);
		
	КонецЦикла;
	
	Для Каждого ЭлементДействия Из ДействияПодписания Цикл
		
		// Получить подписантов и обеспечивающих подписание с выполненным действием подписания
		Участники = УчастникиДействия(ЭлементДействия.Действие);
		СведенияОбУчастниках = РегистрыСведений.СведенияОбУчастникахДействий.ПолучитьСведенияОбУчастникахДействия(
			ЭлементДействия.Действие);
		
		Для Каждого Участник Из Участники Цикл
			
			Если СведенияОбУчастниках[Участник.Идентификатор] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Участник.Функция = Перечисления.ФункцииУчастниковПодписания.Подписывающий
				Или Участник.Функция = Перечисления.ФункцииУчастниковПодписания.ОбеспечивающийПодписание Тогда
				
				РезультатДействия = РегистрыСведений.РезультатыДействий.РезультатУчастникаДействия(
					ЭлементДействия.Действие, Участник.Идентификатор);
				
				Если РезультатДействия <> Неопределено
					И (РезультатДействия.Результат = Перечисления.РезультатыПодписания.Подписано
					Или РезультатДействия.Результат = Перечисления.РезультатыПодписания.Выполнено) Тогда
					
					Если Участник.Функция = Перечисления.ФункцииУчастниковПодписания.Подписывающий Тогда
						Если Результат[Участник.Организация] = Неопределено Тогда
							Результат.Вставить(Участник.Организация, Новый Соответствие);
						КонецЕсли;
						Результат[Участник.Организация].Вставить(
							СведенияОбУчастниках[Участник.Идентификатор].ФактическийИсполнитель.Факт,
							Справочники.Сотрудники.ПустаяСсылка());
					Иначе
						Подписант = СведенияОбУчастниках[Участник.ВышестоящийУчастник].ФактическийИсполнитель.Факт;
						Если Результат[Участник.Организация] <> Неопределено
							И Результат[Участник.Организация][Подписант] <> Неопределено Тогда
							
							Результат[Участник.Организация][Подписант] =
								СведенияОбУчастниках[Участник.Идентификатор].ФактическийИсполнитель.Факт;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла;
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(Результат);
	
КонецФункции

// Возвращает процент невыполненных, от 0 до 100
// 
// Параметры:
//  ВсегоНеВыполнено - Число
//  ВсегоЗадач - Число
// 
// Возвращаемое значение:
//  Число
Функция ПроцентНевыполненных(ВсегоНеВыполнено, ВсегоЗадач) Экспорт
	
	Если ВсегоЗадач = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Цел((ВсегоНеВыполнено / ВсегоЗадач) * 100);
	
КонецФункции	

// Возвращает процент выполненных, от 0 до 100
// 
// Параметры:
//  ВсегоВыполнено - Число
//  ВсегоЗадач - Число
// 
// Возвращаемое значение:
//  Число
Функция ПроцентВыполненных(ВсегоВыполнено, ВсегоЗадач) Экспорт
	
	Если ВсегоЗадач = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Цел((ВсегоВыполнено / ВсегоЗадач) * 100);
	
КонецФункции	

// Записывает изменение пунктов исполнения в ход обработки
// 
// Параметры:
//  Объект - СправочникОбъект.ДействияИсполнения - записываемый объект.
//  ДополнительныеСвойства - Структура - содержащая дополнительные свойства записи.
// 
Процедура ЗафиксироватьИзмененияПунктовИсполнения(Объект, ДополнительныеСвойства)
	
	НовыеПункты = Объект.Пункты;
	СтарыеПункты = ДополнительныеСвойства.СтарыеПункты;
	ТекущаяОбработка = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Объект.Ссылка);
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	
	//Для логирования добавления/удаления пунктов
	МассивУдаленныхПунктов = Новый Массив;
	МассивДобавленныхПунктов = Новый Массив;
	
	//Для логирования изменений реквизитов пунктов
	МассивОписаниеИзмененийПункта = Новый Массив;
	МассивОписаниеИзмененийПунктов = Новый Массив;
	ПроверяемыеРеквизитыПункта = Новый Массив;
	ПроверяемыеРеквизитыПункта.Добавить("Контролер");
	ПроверяемыеРеквизитыПункта.Добавить("Номер");
	ПроверяемыеРеквизитыПункта.Добавить("Описание");
	ПроверяемыеРеквизитыПункта.Добавить("Срок");
	
	// Для логирования изменений участников пунктов
	ОписаниеИзмененийУчастниковПунктов = НовыйОписаниеИзмененийУчастниковПунктов();
	
	//Для логирования изменений ответственных по пунктам
	МассивОписаниеОтветственныеПунктов = Новый Массив;
	
	//Для логирования изменений проверяющих пункты
	МассивОписаниеПроверяющиеПунктов = Новый Массив;
	
	//Для логирования изменений сроков проверки пунктов
	МассивОписаниеИзмененияСроковПроверкиПунктов = Новый Массив;
	
	//Для логирования изменений порядка пунктов
	МассивПорядокСтарыхПунктов = Новый Массив;
	МассивПорядокНовыхПунктов = Новый Массив;
	
	Для Каждого НовыйПункт Из НовыеПункты Цикл
		Если СтарыеПункты.Найти(НовыйПункт.Идентификатор, "Идентификатор") = Неопределено Тогда
			МассивДобавленныхПунктов.Добавить(НовыйПункт.Номер);
		Иначе
			МассивПорядокНовыхПунктов.Добавить(
				Новый Структура("Идентификатор, Номер", НовыйПункт.Идентификатор, НовыйПункт.Номер));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтарыйПункт Из СтарыеПункты Цикл
		
		НовыйПункт = НовыеПункты.Найти(СтарыйПункт.Идентификатор, "Идентификатор");
		
		Если НовыйПункт = Неопределено Тогда
			
			МассивУдаленныхПунктов.Добавить(СтарыйПункт.Номер);
			
		Иначе
			
			МассивОписаниеИзмененийПункта.Очистить();
			ПунктИзменен = Ложь;
			
			ОписаниеИзмененийУчастниковПунктов.ДобавленныеУчастникиПункта.Вставить(СтарыйПункт.Номер, Новый Массив);
			ОписаниеИзмененийУчастниковПунктов.УдаленныеУчастниковПункта.Вставить(СтарыйПункт.Номер, Новый Массив);
			ОписаниеИзмененийУчастниковПунктов.ИзмененияСроковУчастников.Вставить(СтарыйПункт.Номер, Новый Массив);
			
			Для Каждого Реквизит Из ПроверяемыеРеквизитыПункта Цикл
				
				Если СтарыйПункт[Реквизит] <> НовыйПункт[Реквизит] Тогда
					
					ПунктИзменен = Истина;
					
					ОписаниеИзмененияРеквизита = СтрШаблон(НСтр("ru = '""%1"": С ""%2"" На ""%3""'"),
						Реквизит,
						?(ЗначениеЗаполнено(СтарыйПункт[Реквизит]), СтарыйПункт[Реквизит], НСтр("ru = '<Не заполнен>'")),
						?(ЗначениеЗаполнено(НовыйПункт[Реквизит]), НовыйПункт[Реквизит], НСтр("ru = '<Не заполнен>'")));
					МассивОписаниеИзмененийПункта.Добавить(ОписаниеИзмененияРеквизита);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПунктИзменен Тогда
				
				ОписаниеИзмененияПункта
					= СтрШаблон(НСтр("ru = 'Изменены реквизиты пункта ""%1"":%2%3'"),
						СтарыйПункт.Номер, Символы.ПС, СтрСоединить(МассивОписаниеИзмененийПункта, Символы.ПС));
				МассивОписаниеИзмененийПунктов.Добавить(ОписаниеИзмененияПункта);
				
			КонецЕсли;
			
			СтарыйОтветственный = Неопределено;
			НовыйОтветственный = Неопределено;
			ОтборОтветственныйПункта = Новый Структура("ИдентификаторПункта, Ответственный",
				СтарыйПункт.Идентификатор, Истина);
			
			СтарыйПроверяющий = Неопределено;
			НовыйПроверяющий = Неопределено;
			ПредставлениеСрокаСтарогоПроверяющего = "";
			ПредставлениеСрокаНовогоПроверяющего = "";
			ОтборПроверяющийПункта = Новый Структура("ИдентификаторПункта, ФункцияУчастника",
				СтарыйПункт.Идентификатор, Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат);
			
			Если ДополнительныеСвойства.Свойство("БылиУчастники")
				И ДополнительныеСвойства.БылиУчастники <> Неопределено Тогда
				
				ЗафиксироватьИзмененияУчастниковПункта(СтарыйПункт, Объект.Участники,
					ДополнительныеСвойства.БылиУчастники, ОписаниеИзмененийУчастниковПунктов);
				
				НайденныеСтроки = ДополнительныеСвойства.БылиУчастники.НайтиСтроки(ОтборОтветственныйПункта);
				
				Если НайденныеСтроки.Количество() Тогда
					СтарыйОтветственный = НайденныеСтроки[0].Участник;
				КонецЕсли;
				
				НайденныеСтроки = ДополнительныеСвойства.БылиУчастники.НайтиСтроки(ОтборПроверяющийПункта);
				
				Если НайденныеСтроки.Количество() Тогда
					СтарыйПроверяющий = НайденныеСтроки[0].Участник;
					ПредставлениеСрокаСтарогоПроверяющего = СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
						НайденныеСтроки[0].Срок, НайденныеСтроки[0].СрокДни,
						НайденныеСтроки[0].СрокЧасы, НайденныеСтроки[0].СрокМинуты,
						ИспользоватьДатуИВремяВСрокахЗадач, НайденныеСтроки[0].ВариантУстановкиСрока);
				КонецЕсли;
				
			КонецЕсли;
			
			ОтборОтветственныйПункта.ИдентификаторПункта = НовыйПункт.Идентификатор;
			НайденныеСтроки = Объект.Участники.НайтиСтроки(ОтборОтветственныйПункта);
			
			Если НайденныеСтроки.Количество() Тогда
				НовыйОтветственный = НайденныеСтроки[0].Участник;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НовыйОтветственный) И НовыйОтветственный <> СтарыйОтветственный Тогда
				
				ОписаниеНазначенОтветственный = СтрШаблон(НСтр("ru = 'Установлен ответственный по пункту ""%1"": %2'"),
					СтарыйПункт.Номер, НовыйОтветственный);
				
				МассивОписаниеОтветственныеПунктов.Добавить(ОписаниеНазначенОтветственный);
				
			ИначеЕсли ЗначениеЗаполнено(СтарыйОтветственный) И НовыйОтветственный = Неопределено Тогда
				
				ОписаниеСнятОтветственный = СтрШаблон(НСтр("ru = 'Снят ответственный по пункту ""%1"": %2'"),
					СтарыйПункт.Номер, СтарыйОтветственный);
				
				МассивОписаниеОтветственныеПунктов.Добавить(ОписаниеСнятОтветственный);
				
			КонецЕсли;
			
			ОтборПроверяющийПункта.ИдентификаторПункта = НовыйПункт.Идентификатор;
			НайденныеСтроки = Объект.Участники.НайтиСтроки(ОтборПроверяющийПункта);
			
			Если НайденныеСтроки.Количество() Тогда
				НовыйПроверяющий = НайденныеСтроки[0].Участник;
				ПредставлениеСрокаНовогоПроверяющего = СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
					НайденныеСтроки[0].Срок, НайденныеСтроки[0].СрокДни,
					НайденныеСтроки[0].СрокЧасы, НайденныеСтроки[0].СрокМинуты,
					ИспользоватьДатуИВремяВСрокахЗадач, НайденныеСтроки[0].ВариантУстановкиСрока);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НовыйПроверяющий) Тогда
				
				Если НовыйПроверяющий <> СтарыйПроверяющий Тогда
					
					ОписаниеНазначенПроверяющий = СтрШаблон(НСтр("ru = 'Установлен проверяющий пункта ""%1"": %2'"),
						СтарыйПункт.Номер, НовыйПроверяющий);
					
					МассивОписаниеПроверяющиеПунктов.Добавить(ОписаниеНазначенПроверяющий);
					
				КонецЕсли;
				
				Если ПредставлениеСрокаСтарогоПроверяющего <> ПредставлениеСрокаНовогоПроверяющего Тогда
					
					ОписаниеИзмененияСрокаПроверяющего = СтрШаблон(НСтр("ru = 'Изменен срок проверки пункта ""%1"": С ""%2"" На ""%3""'"),
						СтарыйПункт.Номер,
						?(ЗначениеЗаполнено(ПредставлениеСрокаСтарогоПроверяющего),
							ПредставлениеСрокаСтарогоПроверяющего, НСтр("ru = '<Не заполнен>'")),
						?(ЗначениеЗаполнено(ПредставлениеСрокаНовогоПроверяющего),
							ПредставлениеСрокаНовогоПроверяющего, НСтр("ru = '<Не заполнен>'")));
					
					МассивОписаниеИзмененияСроковПроверкиПунктов.Добавить(ОписаниеИзмененияСрокаПроверяющего);
					
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(СтарыйПроверяющий) И НовыйПроверяющий = Неопределено Тогда
				
				ОписаниеСнятПроверяющий = СтрШаблон(НСтр("ru = 'Снят проверяющий пункта ""%1"": %2'"),
					СтарыйПункт.Номер, СтарыйПроверяющий);
				
				МассивОписаниеПроверяющиеПунктов.Добавить(ОписаниеСнятПроверяющий);
				
			КонецЕсли;
			
			МассивПорядокСтарыхПунктов.Добавить(
				Новый Структура("Идентификатор, Номер", СтарыйПункт.Идентификатор, СтарыйПункт.Номер));
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Запись информации о добавлении/удалении пунктов в лог
	Если МассивДобавленныхПунктов.Количество() Или МассивУдаленныхПунктов.Количество() Тогда
		
		ОписаниеДобавленныеПункты = "";
		ОписаниеУдаленныеПункты = "";
		
		Если МассивДобавленныхПунктов.Количество() Тогда
			ОписаниеДобавленныеПункты = СтрШаблон(НСтр("ru = 'Добавлены пункты: ""%1""'"),
				СтрСоединить(МассивДобавленныхПунктов, ", "));
		КонецЕсли;
		
		Если МассивУдаленныхПунктов.Количество() Тогда
			ОписаниеУдаленныеПункты = СтрШаблон(НСтр("ru = 'Удалены пункты: ""%1""'"),
				СтрСоединить(МассивУдаленныхПунктов, ", "));
		КонецЕсли;
		
		ОписаниеСобытияДобавленияУдаленияПунктов = СтрШаблон("%1%2",
			?(ЗначениеЗаполнено(ОписаниеДобавленныеПункты), ОписаниеДобавленныеПункты + Символы.ПС, ""),
			?(ЗначениеЗаполнено(ОписаниеУдаленныеПункты), ОписаниеУдаленныеПункты + Символы.ПС, ""));
		
		ЗаписатьСобытиеВХодОбработки(ТекущаяОбработка,
			Перечисления.ТипСобытияХодаОбработки.ИзменениеПунктовИсполнения,
			Объект.Ссылка, ОписаниеСобытияДобавленияУдаленияПунктов);
		
	КонецЕсли;
	
	//Запись информации об изменении пунктов в лог
	Если МассивОписаниеИзмененийПунктов.Количество() Тогда
		
		ОписаниеСобытияИзмененияПунктов = СтрСоединить(МассивОписаниеИзмененийПунктов, Символы.ПС);
		
		ЗаписатьСобытиеВХодОбработки(ТекущаяОбработка,
			Перечисления.ТипСобытияХодаОбработки.ИзменениеПунктовИсполнения,
			Объект.Ссылка, ОписаниеСобытияИзмененияПунктов);
		
	КонецЕсли;
	
	//Запись информации о добавлении/удалении участников пунктов в лог
	Если ОписаниеИзмененийУчастниковПунктов.ЕстьДобавленныеУдаленныеУчастникиПунктов Тогда
		
		ОписаниеСобытияДобавленияУдаленияУчастниковПунктов = "";
		
		Для Каждого Пункт Из ОписаниеИзмененийУчастниковПунктов.ДобавленныеУчастникиПункта Цикл
			
			Если Не ОписаниеИзмененийУчастниковПунктов.ДобавленныеУчастникиПункта[Пункт.Ключ].Количество() Тогда
				Продолжить;
			КонецЕсли;
			
			ОписаниеДобавленныеУчастникиПункта = СтрШаблон(НСтр("ru = 'В пункт ""%1"" добавлены участники:%2%3'"),
				Пункт.Ключ, Символы.ПС, СтрСоединить(
					ОписаниеИзмененийУчастниковПунктов.ДобавленныеУчастникиПункта[Пункт.Ключ], Символы.ПС));
			
			ОписаниеСобытияДобавленияУдаленияУчастниковПунктов = СтрШаблон("%1%2%3",
				ОписаниеСобытияДобавленияУдаленияУчастниковПунктов,
				ОписаниеДобавленныеУчастникиПункта,
				Символы.ПС);
			
		КонецЦикла;
		
		Для Каждого Пункт Из ОписаниеИзмененийУчастниковПунктов.УдаленныеУчастниковПункта Цикл
			
			Если Не ОписаниеИзмененийУчастниковПунктов.УдаленныеУчастниковПункта[Пункт.Ключ].Количество() Тогда
				Продолжить;
			КонецЕсли;
			
			ОписаниеУдаленныхУчастниковПункта = СтрШаблон(НСтр("ru = 'Из пункта ""%1"" удалены участники:%2%3'"),
				Пункт.Ключ, Символы.ПС, СтрСоединить(
					ОписаниеИзмененийУчастниковПунктов.УдаленныеУчастниковПункта[Пункт.Ключ], Символы.ПС));
			
			ОписаниеСобытияДобавленияУдаленияУчастниковПунктов = СтрШаблон("%1%2%3",
				ОписаниеСобытияДобавленияУдаленияУчастниковПунктов,
				ОписаниеУдаленныхУчастниковПункта,
				Символы.ПС);
			
		КонецЦикла;
		
		ЗаписатьСобытиеВХодОбработки(ТекущаяОбработка,
			Перечисления.ТипСобытияХодаОбработки.ИзменениеПунктовИсполнения,
			Объект.Ссылка, ОписаниеСобытияДобавленияУдаленияУчастниковПунктов);
		
	КонецЕсли;
	
	//Запись информации об изменении сроков участников пунктов в лог
	Если ОписаниеИзмененийУчастниковПунктов.ЕстьИзмененияСроковУчастниковПунктов Тогда
		
		ОписаниеСобытияИзмененияСроковУчастниковПунктов = "";
		
		Для Каждого Пункт Из ОписаниеИзмененийУчастниковПунктов.ИзмененияСроковУчастников Цикл
			
			Если Не ОписаниеИзмененийУчастниковПунктов.ИзмененияСроковУчастников[Пункт.Ключ].Количество() Тогда
				Продолжить;
			КонецЕсли;
			
			ОписаниеИзмененияСроковУчастниковПункта
				= СтрШаблон(НСтр("ru = 'В пункте ""%1"" изменены сроки участников:%2%3'"),
					Пункт.Ключ, Символы.ПС,
					СтрСоединить(ОписаниеИзмененийУчастниковПунктов.ИзмененияСроковУчастников[Пункт.Ключ], Символы.ПС));
			
			ОписаниеСобытияИзмененияСроковУчастниковПунктов = СтрШаблон("%1%2%3",
				ОписаниеСобытияИзмененияСроковУчастниковПунктов,
				ОписаниеИзмененияСроковУчастниковПункта,
				Символы.ПС);
			
		КонецЦикла;
		
		ЗаписатьСобытиеВХодОбработки(ТекущаяОбработка,
			Перечисления.ТипСобытияХодаОбработки.ИзменениеПунктовИсполнения,
			Объект.Ссылка, ОписаниеСобытияИзмененияСроковУчастниковПунктов);
		
	КонецЕсли;
	
	//Запись информации об изменении ответственных по пунктам в лог
	Если МассивОписаниеОтветственныеПунктов.Количество() Тогда
		
		ОписаниеСобытияИзмененияОтветственныхПунктов = СтрСоединить(МассивОписаниеОтветственныеПунктов, Символы.ПС);
		
		ЗаписатьСобытиеВХодОбработки(ТекущаяОбработка,
			Перечисления.ТипСобытияХодаОбработки.ИзменениеПунктовИсполнения,
			Объект.Ссылка, ОписаниеСобытияИзмененияОтветственныхПунктов);
		
	КонецЕсли;
	
	//Запись информации об изменении проверяющих пункты в лог
	Если МассивОписаниеПроверяющиеПунктов.Количество() Тогда
		
		ОписаниеСобытияИзмененияПроверяющихПункты = СтрСоединить(МассивОписаниеПроверяющиеПунктов, Символы.ПС);
		
		ЗаписатьСобытиеВХодОбработки(ТекущаяОбработка,
			Перечисления.ТипСобытияХодаОбработки.ИзменениеПунктовИсполнения,
			Объект.Ссылка, ОписаниеСобытияИзмененияПроверяющихПункты);
		
	КонецЕсли;
	
	//Запись информации об изменении сроков проверки пунктов
	Если МассивОписаниеИзмененияСроковПроверкиПунктов.Количество() Тогда
		
		ОписаниеСобытияИзмененияСроковПроверкиПунктов
			= СтрСоединить(МассивОписаниеИзмененияСроковПроверкиПунктов, Символы.ПС);
		
		ЗаписатьСобытиеВХодОбработки(ТекущаяОбработка,
			Перечисления.ТипСобытияХодаОбработки.ИзменениеПунктовИсполнения,
			Объект.Ссылка, ОписаниеСобытияИзмененияСроковПроверкиПунктов);
		
	КонецЕсли;
	
	//Запись информации об изменении порядка пунктов
	ПорядокПунктовИзменился = Ложь;
	Если МассивПорядокСтарыхПунктов.Количество() И МассивПорядокНовыхПунктов.Количество() Тогда
		
		МассивОписаниеПорядкаНовыхПунктов = Новый Массив;
		МассивОписаниеПорядкаСтарыхПунктов = Новый Массив;
		
		КоличествоСовпадающихПунктов = МассивПорядокНовыхПунктов.Количество();
		Для СчетчикПунктов = 0 По КоличествоСовпадающихПунктов - 1 Цикл
			
			Если МассивПорядокСтарыхПунктов[СчетчикПунктов].Идентификатор
				<> МассивПорядокНовыхПунктов[СчетчикПунктов].Идентификатор Тогда
				ПорядокПунктовИзменился = Истина;
			КонецЕсли;
			
			МассивОписаниеПорядкаСтарыхПунктов.Добавить(МассивПорядокСтарыхПунктов[СчетчикПунктов].Номер);
			МассивОписаниеПорядкаНовыхПунктов.Добавить(МассивПорядокНовыхПунктов[СчетчикПунктов].Номер);
			
		КонецЦикла;
		
		Если ПорядокПунктовИзменился Тогда
			
			ОписаниеСобытияИзмененияПорядкаПунктов
				= СтрШаблон(НСтр("ru = 'Изменен порядок пунктов:%1С: ""%2""%3На: ""%4""'"),
					Символы.ПС, СтрСоединить(МассивОписаниеПорядкаСтарыхПунктов, ", "), Символы.ПС,
					СтрСоединить(МассивОписаниеПорядкаНовыхПунктов, ", "));
			
			ЗаписатьСобытиеВХодОбработки(ТекущаяОбработка,
				Перечисления.ТипСобытияХодаОбработки.ИзменениеПунктовИсполнения,
				Объект.Ссылка, ОписаниеСобытияИзмененияПорядкаПунктов);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗафиксироватьИзмененияУчастниковПункта(Пункт, НовыеУчастники, СтарыеУчастники, ОписаниеИзменений)
	
	СтарыеУчастникиПункта = НовыйТаблицаУчастниковПункта();
	НовыеУчастникиПункта = НовыйТаблицаУчастниковПункта();
	
	СтруктураОтбораУчастникаПункта = Новый Структура("Участник");
	
	Для Каждого Участник Из НовыеУчастники Цикл
		Если Участник.ИдентификаторПункта = Пункт.Идентификатор
			И Участник.ФункцияУчастника <> Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат Тогда
			
			НовыйУчастник = НовыеУчастникиПункта.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйУчастник, Участник);
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Участник Из СтарыеУчастники Цикл
		Если Участник.ИдентификаторПункта = Пункт.Идентификатор
			И Участник.ФункцияУчастника <> Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат Тогда
			
			СтарыйУчастник = СтарыеУчастникиПункта.Добавить();
			ЗаполнитьЗначенияСвойств(СтарыйУчастник, Участник);
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого НовыйУчастник Из НовыеУчастникиПункта Цикл
		
		СтруктураОтбораУчастникаПункта.Участник = НовыйУчастник.Участник;
		
		Если Не СтарыеУчастникиПункта.НайтиСтроки(СтруктураОтбораУчастникаПункта).Количество() Тогда
			
			ОписаниеИзменений.ДобавленныеУчастникиПункта[Пункт.Номер].Добавить(НовыйУчастник.Участник);
			
			Если Не ОписаниеИзменений.ЕстьДобавленныеУдаленныеУчастникиПунктов Тогда
				ОписаниеИзменений.ЕстьДобавленныеУдаленныеУчастникиПунктов = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтарыйУчастник Из СтарыеУчастникиПункта Цикл
		
		СтруктураОтбораУчастникаПункта.Участник = СтарыйУчастник.Участник;
		НайденныйУчастник = НовыеУчастникиПункта.НайтиСтроки(СтруктураОтбораУчастникаПункта);
		
		Если Не НайденныйУчастник.Количество() Тогда
			
			ОписаниеИзменений.УдаленныеУчастниковПункта[Пункт.Номер].Добавить(СтарыйУчастник.Участник);
			Если Не ОписаниеИзменений.ЕстьДобавленныеУдаленныеУчастникиПунктов Тогда
				ОписаниеИзменений.ЕстьДобавленныеУдаленныеУчастникиПунктов = Истина;
			КонецЕсли;
			
		Иначе
			
			ОписаниеИзмененияСрока = "";
			НовыйУчастник = НайденныйУчастник[0];
			
			Для Каждого Реквизит Из ОписаниеИзменений.ПроверяемыеРеквизитыУчастника Цикл
				
				Если СтарыйУчастник[Реквизит] <> НовыйУчастник[Реквизит] Тогда
					
					СтарыйСрокУчастника
						= СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
							СтарыйУчастник["Срок"], СтарыйУчастник["СрокДни"],
							СтарыйУчастник["СрокЧасы"], СтарыйУчастник["СрокМинуты"],
							ОписаниеИзменений.ИспользоватьДатуИВремяВСрокахЗадач, СтарыйУчастник["ВариантУстановкиСрока"]);
					
					НовыйСрокУчастника
						= СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
							НовыйУчастник["Срок"], НовыйУчастник["СрокДни"],
							НовыйУчастник["СрокЧасы"], НовыйУчастник["СрокМинуты"],
							ОписаниеИзменений.ИспользоватьДатуИВремяВСрокахЗадач,
							НовыйУчастник["ВариантУстановкиСрока"]);
					
					Если СтарыйСрокУчастника <> НовыйСрокУчастника Тогда
						
						ОписаниеИзмененияСрока = СтрШаблон(НСтр("ru = '""%1"": С ""%2"" На ""%3""'"),
							СтарыйУчастник.Участник,
							?(ЗначениеЗаполнено(СтарыйСрокУчастника), СтарыйСрокУчастника, НСтр("ru = '<Не заполнен>'")),
							?(ЗначениеЗаполнено(НовыйСрокУчастника), НовыйСрокУчастника, НСтр("ru = '<Не заполнен>'")));
						ОписаниеИзменений.ИзмененияСроковУчастников[Пункт.Номер].Добавить(
							ОписаниеИзмененияСрока);
						
						Если Не ОписаниеИзменений.ЕстьИзмененияСроковУчастниковПунктов Тогда
							ОписаниеИзменений.ЕстьИзмененияСроковУчастниковПунктов = Истина;
						КонецЕсли;
						
						Прервать;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйОписаниеИзмененийУчастниковПунктов()
	
	ДобавленныеУчастникиПункта = Новый Соответствие;
	УдаленныеУчастниковПункта = Новый Соответствие;
	ИзмененияСроковУчастников = Новый Соответствие;
	
	ПроверяемыеРеквизитыУчастника = Новый Массив;
	ПроверяемыеРеквизитыУчастника.Добавить("Срок");
	ПроверяемыеРеквизитыУчастника.Добавить("СрокДни");
	ПроверяемыеРеквизитыУчастника.Добавить("СрокЧасы");
	ПроверяемыеРеквизитыУчастника.Добавить("СрокМинуты");
	
	СтруктураИзменений = Новый Структура();
	СтруктураИзменений.Вставить("ДобавленныеУчастникиПункта", ДобавленныеУчастникиПункта);
	СтруктураИзменений.Вставить("УдаленныеУчастниковПункта", УдаленныеУчастниковПункта);
	СтруктураИзменений.Вставить("ПроверяемыеРеквизитыУчастника", ПроверяемыеРеквизитыУчастника);
	СтруктураИзменений.Вставить("ИзмененияСроковУчастников", ИзмененияСроковУчастников);
	СтруктураИзменений.Вставить("ЕстьДобавленныеУдаленныеУчастникиПунктов", Ложь);
	СтруктураИзменений.Вставить("ИспользоватьДатуИВремяВСрокахЗадач",
		ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач"));
	СтруктураИзменений.Вставить("ЕстьИзмененияСроковУчастниковПунктов", Ложь);
	
	Возврат СтруктураИзменений;
	
КонецФункции

Функция НовыйТаблицаУчастниковПункта()
	
	УчастникиПункта = Новый ТаблицаЗначений;
	УчастникиПункта.Колонки.Добавить("Участник");
	УчастникиПункта.Колонки.Добавить("Срок");
	УчастникиПункта.Колонки.Добавить("СрокДни");
	УчастникиПункта.Колонки.Добавить("СрокЧасы");
	УчастникиПункта.Колонки.Добавить("СрокМинуты");
	УчастникиПункта.Колонки.Добавить("ВариантУстановкиСрока");
	
	Возврат УчастникиПункта;
	
КонецФункции

Функция СрокЭтапов(Этапы, Участники)
	
	Срок = Дата(1, 1, 1);
	УчастникиЭтапа = Новый Массив;
	
	Для Каждого Этап Из Этапы Цикл
		
		УчастникиЭтапа.Очистить();
		Для Каждого Участник Из Участники Цикл
			
			Если Участник.ИдентификаторЭтапа <> Этап.Идентификатор Тогда
				Продолжить;
			КонецЕсли;
			
			УчастникиЭтапа.Добавить(Участник);
			
			Если Этап.ПорядокВыполненияУчастниками = Перечисления.ПорядокВыполненияЭтапаДействия.Параллельно Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не УчастникиЭтапа.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		СрокЭтапа = СрокУчастников(УчастникиЭтапа, Срок);
		
		Если СрокЭтапа = Макс(Срок, СрокЭтапа) Тогда
			Срок = СрокЭтапа;
		КонецЕсли;
		
	КонецЦикла;
	
	ПоследнийУчастник = Участники[Участники.Количество() - 1];
	Если ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(ПоследнийУчастник.ФункцияУчастника) Тогда
		Срок = СрокУчастников(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПоследнийУчастник), Срок);
	КонецЕсли;
	
	Возврат Срок;
	
КонецФункции

Процедура ПереместитьДекорациюОписание(Элементы, Родитель, СледующийЭлемент = Неопределено, Высота = 0, Ширина = 0)
	
	Если Элементы.ДекорацияОписание.Родитель = Родитель Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Переместить(Элементы.ДекорацияОписание, Родитель, СледующийЭлемент);
	Элементы.ДекорацияОписание.Высота = Высота;
	Элементы.ДекорацияОписание.Ширина = Ширина;
	
КонецПроцедуры

// Формирует дату обработки.
// 
// Параметры:
//  ОбъектОбработки - ОпределяемыйТип.ПредметДействия.
// 
// Возвращаемое значение:
//  Дата.
// 
Функция ДатаОбработки(ОбъектОбработки)
	
	ОбработкаОбъекта = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(ОбъектОбработки);
	ДатаОбработки = Дата(1, 1, 1);
	Если ЗначениеЗаполнено(ОбработкаОбъекта) Тогда
		ДатаОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбработкаОбъекта, "ДатаСоздания");
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ДатаОбработки) Тогда
		ДатаОбработки = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат ДатаОбработки;
	
КонецФункции

// Возвращает Истина, если требуется записать ПредставленияСотрудникаДляПЭП в РС
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия
// 
// Возвращаемое значение:
//  Булево
//
Функция ДействиеТребуетЗаписиПредставленияСотрудникаДляПЭП(Действие)
	
	ТипДействия = ТипЗнч(Действие); 
	ЭтоДействиеПЭП = Истина;
	Если (ТипДействия = Тип("СправочникСсылка.ДействияОзнакомления")
		Или ТипДействия = Тип("СправочникСсылка.ДействияСогласования"))
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "ПодписыватьУЭП") Тогда
		
		ЭтоДействиеПЭП = Ложь;
		
	ИначеЕсли ТипДействия = Тип("СправочникСсылка.ДействияИсполнения") Тогда
		
		ЭтоДействиеПЭП = Ложь;
		
	ИначеЕсли ТипДействия = Тип("СправочникСсылка.ДействияПодписания") 
		И (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "СпособПодписания") <> 
		Перечисления.СпособыПодписанияПредметаДействия.ПЭП) тогда
		
		ЭтоДействиеПЭП = Ложь;
		
	КонецЕсли;
	
	Возврат ЭтоДействиеПЭП;
	
КонецФункции

#КонецОбласти
