////////////////////////////////////////////////////////////////////////////////
// Правила обработки вызов сервера: содержит процедуры и функции обеспечивающие
//                                     работу с обработками объектов на сервере.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает число не корректных настроек действия подписания по форме документа.
// 
// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокументов - Ссылка на вид документа, в котором поменялась форма.
//  ФормаДокумента - ПеречислениеСсылка.ВариантыФормДокументов - новая "Форма документа"
//  ТекстОшибкиПравДоступа - Строка - Текст ошибки прав доступа
// 
// Возвращаемое значение:
//   Число - Число не корректных настроек подписания по форме документа
//
Функция ЧислоНеКорректныхНастроекПодписания(ВидДокумента, ФормаДокумента,
	ТекстОшибкиПравДоступа = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	СпособыПодписания = Новый Массив();
	СпособыПодписания.Добавить(
			ПредопределенноеЗначение("Перечисление.СпособыПодписанияПредметаДействия.ПустаяСсылка"));
	Если ФормаДокумента = ПредопределенноеЗначение("Перечисление.ВариантыФормДокументов.Бумажная") Тогда
		СпособыПодписания.Добавить(
			ПредопределенноеЗначение("Перечисление.СпособыПодписанияПредметаДействия.УЭП"));
		СпособыПодписания.Добавить(
			ПредопределенноеЗначение("Перечисление.СпособыПодписанияПредметаДействия.ПЭП"));
	Иначе
		СпособыПодписания.Добавить(
			ПредопределенноеЗначение("Перечисление.СпособыПодписанияПредметаДействия.НаБумаге"));
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПравилаОбработкиОбъектов.Настройка КАК Настройка,
		|	ПравилаОбработкиОбъектов.ВидДействия КАК ВидДействия
		|ПОМЕСТИТЬ ПравилаОбработкиВида
		|ИЗ
		|	РегистрСведений.ПравилаОбработкиОбъектов КАК ПравилаОбработкиОбъектов
		|ГДЕ
		|	ПравилаОбработкиОбъектов.ВидОбъекта = &ВидДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(НастройкиДействийПодписания.Ссылка), 0) КАК ЧислоПравил
		|ИЗ
		|	Справочник.НастройкиДействийПодписания КАК НастройкиДействийПодписания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПравилаОбработкиВида КАК ПравилаОбработкиВида
		|		ПО ПравилаОбработкиВида.Настройка = НастройкиДействийПодписания.Ссылка
		|ГДЕ
		|	НастройкиДействийПодписания.СпособПодписания В (&СпособыПодписания)");
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	Запрос.УстановитьПараметр("СпособыПодписания", СпособыПодписания);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЧислоПравил = Выборка.ЧислоПравил;
	
	Если ЧислоПравил = 0 Тогда
		Возврат ЧислоПравил;
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.Справочники.НастройкиДействийПодписания) Тогда
		ТекстОшибкиПравДоступа = НСтр(
			"ru = 'Недостаточно прав доступа для изменения настроек подписания.
			|Обратитесь к администратору.'");
		Возврат ЧислоПравил;
	КонецЕсли;
	
	// Сразу проверим права доступа, если правил немного.
	Если ЧислоПравил < 100 Тогда
		ЧислоПравилБезПрав = 0;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПравилаОбработкиОбъектов.Настройка КАК Настройка,
		|	ПравилаОбработкиОбъектов.ВидДействия КАК ВидДействия
		|ПОМЕСТИТЬ ПравилаОбработкиВида
		|ИЗ
		|	РегистрСведений.ПравилаОбработкиОбъектов КАК ПравилаОбработкиОбъектов
		|ГДЕ
		|	ПравилаОбработкиОбъектов.ВидОбъекта = &ВидДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиДействийПодписания.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НастройкиДействийПодписания КАК НастройкиДействийПодписания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПравилаОбработкиВида КАК ПравилаОбработкиВида
		|		ПО ПравилаОбработкиВида.Настройка = НастройкиДействийПодписания.Ссылка
		|ГДЕ
		|	НастройкиДействийПодписания.СпособПодписания В (&СпособыПодписания)";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Не ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(Выборка.Ссылка).Изменение Тогда
				ЧислоПравилБезПрав = ЧислоПравилБезПрав + 1;
			КонецЕсли;
		КонецЦикла;
		Если ЧислоПравилБезПрав <> 0 Тогда
			Если ЧислоПравилБезПрав % 10 = 1
				И ЧислоПравилБезПрав <> 11 Тогда
				ЧислоПравилБезПрав = СтрШаблон(НСтр("ru = '%1 настройки, требующего изменения'"),
					ЧислоПравилБезПрав);
			Иначе
				ЧислоПравилБезПрав = СтрШаблон(НСтр("ru = '%1 настроек, требующих изменения'"),
					ЧислоПравилБезПрав);
			КонецЕсли;
			
			ЧислоПравилСтрокой = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru = ';%1 настройки;;%1 настроек;%1 настроек;%1 настройки'"),
				ЧислоПравил);
			ТекстОшибкиПравДоступа = СтрШаблон(НСтр(
				"ru = 'Недостаточно прав доступа для изменения %1 этого вида из %2.
				|Обратитесь к администратору.'"),
				ЧислоПравилСтрокой,
				ЧислоПравилБезПрав);
			Возврат ЧислоПравил;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЧислоПравил;
	
КонецФункции

// Получить запущенную обработку и настройку ПроверятьСхемуПриПерезаполненииОбработки.
// 
// Параметры:
//  Предмет  - СправочникССылка.ДокументыПредприятия
// 
// Возвращаемое значение:
//  Структура
//   *ОбработкаОбъекта 
//   *ПроверятьСхемуПриПерезаполненииОбработки
Функция ПолучитьЗапущеннуюОбработкуИНастройки(Предмет) Экспорт
	
	СтруктураРезультата = Новый Структура("ОбработкаОбъекта, ПроверятьСхемуПриПерезаполненииОбработки");
	
	СтруктураРезультата.ПроверятьСхемуПриПерезаполненииОбработки = ПроверятьСхемуПриПерезаполненииОбработки();
	
	ОбработкаОбъекта = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(Предмет);
	Если ЗначениеЗаполнено(ОбработкаОбъекта) Тогда
		
		Состояние = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбработкаОбъекта, "Состояние");
		
		Если ЗначениеЗаполнено(Состояние) Тогда
			СтруктураРезультата.ОбработкаОбъекта = ОбработкаОбъекта;
		Иначе
				
			Если ОбработкаОчередиЗаданийСервер.ОбъектЕстьВОчереди(ОбработкаОбъекта) Тогда
				СтруктураРезультата.ОбработкаОбъекта = ОбработкаОбъекта;
			КонецЕсли;	
				
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции	

// Проверить возможность смены реквизитов с проверкой схемы. Бросит исключение при невозможности.
// 
// Параметры:
//  Предмет  - СправочникССылка.ДокументыПредприятия
//  ОбработкаОбъекта  - СправочникСсылка.ОбработкиОбъектов
//  Отказ - Булево
//  ТекстОшибки - Строка
Процедура ПроверитьВозможностьСменыРеквизитовСПроверкойСхемы(
	Предмет, ОбработкаОбъекта, Отказ, ТекстОшибки) Экспорт
	
	РаботаСПроцессамиПоОбработкамОбъектовСобытия.ПриПроверкеВозможностиЗаполненияДействийОбработки(
		Предмет, ОбработкаОбъекта, Отказ, ТекстОшибки);
	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроверятьСхемуПриПерезаполненииОбработки()
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ПроверятьСхемуПриПерезаполненииОбработки.Получить();
	
КонецФункции	

#КонецОбласти
