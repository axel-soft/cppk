#Если Сервер Тогда

#Область ПрограммныйИнтерфейс

#Область ОбщиеНастройкиОформления

// Задает общие свойства для формы (СворачиваниеЭлементовПоВажности, ВертикальныйИнтервал,
// 	ВыравниваениеЭлементовИЗаголовков).
//
// Параметры:
//  Форма - Неопределено, ФормаКлиентскогоПриложения - Форма для которой нужно установить свойства;
//
Процедура УстановитьОбщиеСвойстваФормы(Форма) Экспорт

	Если Форма = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Форма.СворачиваниеЭлементовПоВажности = СворачиваниеЭлементовФормыПоВажности.НеИспользовать;
	Форма.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;

	Форма.ВыравниваниеЭлементовИЗаголовков = ВариантВыравниванияЭлементовИЗаголовков.ЭлементыПравоЗаголовкиЛево;

КонецПроцедуры

#КонецОбласти

#Область ПеремещениеЭлементов
	
// Процедура трансформирует кнопку в акцентную и перемещает ее в родителя
//  Параметры:
//   Форма - Форма - Исходная форма
//   ЭлементыСтиля - Структура- Стили моб. клиента
//   Кнопка - Кнопка - Кнопка для преобразования
//   Родитель - ЭлементыФормы - Родитель, куда переместить (по умолчанию - на форму, в самый низ)
//
Процедура ПреобразоватьКнопкуВАкцентную(Форма,
	ЭлементыСтиля,
	Кнопка,
	Родитель = Неопределено) Экспорт
	
	Форма.Элементы.Переместить(Кнопка, ?(Родитель = Неопределено, Форма, Родитель));
	МК_КлиентСервер.ОформитьАкцентнуюКнопку(Кнопка, ЭлементыСтиля);

КонецПроцедуры

#КонецОбласти

#Область ОформлениеЭлементов

// Задает свойства для акцентной кнопки на мобильном клиенте.
//
// Параметры:
//  Кнопка - КнопкаФормы - Кнопка для которой необходимо установить свойства;
//
Процедура ОформитьАкцентнуюКнопку(Кнопка) Экспорт

	Если Кнопка = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Кнопка) <> Тип("КнопкаФормы") Тогда
		Возврат;
	КонецЕсли;

	ОформитьБазовуюКнопку(Кнопка);
	Кнопка.Высота = 2;

	Кнопка.Шрифт = ШрифтыСтиля.МК_ШрифтАкцентнойКнопки;
	Кнопка.ЦветТекста = ЦветаСтиля.МК_ЦветТекстаАкцентнойКнопки;

	Кнопка.ЦветФона = ЦветаСтиля.ЦветАкцента;
	Кнопка.ЦветРамки = ЦветаСтиля.ЦветАкцента;

	Кнопка.Отображение = ОтображениеКнопки.Текст;

КонецПроцедуры

// Задает свойства для дополнительной кнопки на мобильном клиенте.
//
// Параметры:
//  Кнопка - КнопкаФормы - Кнопка для которой необходимо установить свойства;
//
Процедура ОформитьДополнительнуюКнопку(Кнопка, РастягиватьПоГоризонтали = Истина) Экспорт

	Если Кнопка = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Кнопка) <> Тип("КнопкаФормы") Тогда
		Возврат;
	КонецЕсли;

	ОформитьБазовуюКнопку(Кнопка);
	Кнопка.Высота = 2;

	Кнопка.Шрифт = ШрифтыСтиля.МК_ШрифтАкцентнойКнопки;
	Кнопка.ЦветТекста = WebЦвета.Черный;

	Кнопка.ЦветФона = ЦветаСтиля.МК_ЦветДополнительнойКнопки;
	Кнопка.ЦветРамки = ЦветаСтиля.МК_ЦветДополнительнойКнопки;

	Кнопка.Отображение = ОтображениеКнопки.Картинка;

	Кнопка.РастягиватьПоГоризонтали = РастягиватьПоГоризонтали;

КонецПроцедуры

// Задает свойства для кнопки, которая находится в строке с фильтрами на мобильном клиенте.
//
// Параметры:
//  Кнопка - КнопкаФормы - Кнопка для которой необходимо установить свойства;
//  ОтображениеКнопкиТекстом - Булево - отображать кнопку с текстом или с картинкой (по-умолчанию);
//
Процедура ОформитьКнопкуФильтра(Кнопка, ОтображениеКнопкиТекстом = Ложь) Экспорт

	Если Кнопка = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Кнопка) <> Тип("КнопкаФормы") Тогда
		Возврат;
	КонецЕсли;

	ОформитьДополнительнуюКнопку(Кнопка);
	Кнопка.Высота = 1;

	Если ОтображениеКнопкиТекстом Тогда
		Кнопка.Отображение = ОтображениеКнопки.Текст;
	Иначе
		Кнопка.Отображение = ОтображениеКнопки.Картинка;
	КонецЕсли;

КонецПроцедуры

// Задает свойства для кнопки в соответствии с ее состоянием на мобильном клиенте.
//
// Параметры:
//  Кнопка - КнопкаФормы - Кнопка для которой необходимо установить свойства;
//  Активная - Булево - Признак состояния кнопки;
//
Процедура ОформитьДополнительнуюКнопкуПоСостоянию(Кнопка, Активная) Экспорт

	Если Кнопка = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Кнопка) <> Тип("КнопкаФормы") Тогда
		Возврат;
	КонецЕсли;

	Кнопка.Шрифт = ШрифтыСтиля.МК_ШрифтДополнительнойКнопки;
	Кнопка.ЦветТекста = WebЦвета.Черный;

	Если Активная Тогда
		Кнопка.ЦветФона = ЦветаСтиля.МК_ЦветАктивнойДополнительнойКнопки;
		Кнопка.ЦветРамки = ЦветаСтиля.МК_ЦветАктивнойДополнительнойКнопки;
	Иначе
		Кнопка.ЦветФона = ЦветаСтиля.МК_ЦветДополнительнойКнопки;
		Кнопка.ЦветРамки = ЦветаСтиля.МК_ЦветДополнительнойКнопки;
	КонецЕсли;

КонецПроцедуры

// Задает базовые свойства для поля формы на мобильном клиенте.
//
// Параметры:
//  Поле - ПолеФормы - Поле для которой необходимо установить свойства;
//
Процедура ОформитьПолеФормы(Поле) Экспорт

	Если Поле = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Поле) <> Тип("ПолеФормы") И ТипЗнч(Поле) <> Тип("ДекорацияФормы") Тогда
		Возврат;
	КонецЕсли;

	Поле.Шрифт = ШрифтыСтиля.МК_ШрифтПоляФормы;
	Поле.ЦветТекста = ЦветаСтиля.МК_ЦветТекстаПоляФормы;

КонецПроцедуры

// Задает свойства для заголовка сворачиваемой группы на мобильном клиенте.
//
// Параметры:
//  Заголовок - ДекорацияФормы - Надпись для которой необходимо установить свойства;
//
Процедура ОформитьЗаголовокСворачиваемойГруппы(Заголовок) Экспорт

	Если Заголовок = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Заголовок) <> Тип("ДекорацияФормы") Тогда
		Возврат;
	КонецЕсли;

	ОформитьПолеФормы(Заголовок);

	Заголовок.РастягиватьПоГоризонтали = Истина;
	Заголовок.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
	Заголовок.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;

КонецПроцедуры

// Задает свойства для кнопки сворачиваемой группы в соответствии с ее состоянием на мобильном клиенте.
//
// Параметры:
//  Кнопка - КнопкаФормы - Кнопка для которой необходимо установить свойства;
//  Раскрыта - Булево - Признак состояния группы (раскрыта\свернута);
//
Процедура ОформитьКнопкуСворачиваемойГруппы(Кнопка, Раскрыта) Экспорт

	Если Кнопка = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Кнопка) <> Тип("КнопкаФормы") Тогда
		Возврат;
	КонецЕсли;

	ОформитьКнопкуФильтра(Кнопка);
	Кнопка.РастягиватьПоГоризонтали = Ложь;

	Если Раскрыта Тогда
		Кнопка.Картинка = БиблиотекаКартинок.СтрелкаВниз;
	Иначе
		Кнопка.Картинка = БиблиотекаКартинок.СтрелкаВверх;
	КонецЕсли;

	ОформитьДополнительнуюКнопкуПоСостоянию(Кнопка, Раскрыта);

КонецПроцедуры

// Задает базовые настройки для дополнительной (вложения, получатели и т.п.) таблицы на мобильном клиенте.
//
// Параметры:
//  Таблица - ТаблицаФормы - Представление таблицы на форме;
//
Процедура УстановитьБазовуюНастройкуДополнительнойТаблицы(Таблица) Экспорт

	Таблица.ВариантУправленияВысотой = ВариантУправленияВысотойТаблицы.ПоСодержимому;
	Таблица.АвтоМаксимальнаяВысота = Истина;
	Таблица.АвтоМаксимальнаяВысотаВСтрокахТаблицы = Истина;

	Таблица.ВысотаВСтрокахТаблицы = 0;
	Таблица.РастягиватьПоГоризонтали = Истина;
	Таблица.Высота = 1;
	Таблица.Ширина = 1;

КонецПроцедуры

// Задает новую фиксированную высоту для таблицы на мобильном клиенте.
//
// Параметры:
//  Таблица - ТаблицаФормы - Представление таблицы на форме;
//  НоваяВысотаТаблицы - Число - Новая высота таблицы;
//
Процедура УстановитьНовуюВысотуТаблицы(Таблица, НоваяВысотаТаблицы) Экспорт

	Если НоваяВысотаТаблицы = 0 Тогда
		Возврат;
	КонецЕсли;

	Если Не Таблица.Видимость Тогда
		Возврат;
	КонецЕсли;

	Таблица.АвтоМаксимальнаяВысота = Ложь;
	Таблица.АвтоМаксимальнаяВысотаВСтрокахТаблицы = Ложь;

	Таблица.ВысотаВСтрокахТаблицы = НоваяВысотаТаблицы;
	Таблица.МаксимальнаяВысотаВСтрокахТаблицы = НоваяВысотаТаблицы;
	Таблица.Высота = НоваяВысотаТаблицы;
	Таблица.МаксимальнаяВысота = НоваяВысотаТаблицы;

КонецПроцедуры

// Задает новую оптимальную высоту для дополнительной (вложения, получатели и т.п.) таблицы на мобильном клиенте.
//
// Параметры:
//  Таблица - ПолеФормы - Элемент - Представление таблицы на форме;
//  КоличествоЭлементов - Число - Количество элементов в таблице;
//
Процедура УстановитьНовуюВысотуДополнительнойТаблицы(Таблица, КоличествоЭлементов) Экспорт

	Если КоличествоЭлементов = 0 Тогда
		Возврат;
	КонецЕсли;

	Если Не Таблица.Видимость Тогда
		Возврат;
	КонецЕсли;

	НоваяВысотаТаблицы = ?(КоличествоЭлементов <= 3, КоличествоЭлементов, 3);

	Если (КоличествоЭлементов > 2) Тогда
		Таблица.ВариантУправленияВысотой = ВариантУправленияВысотойТаблицы.ПоСодержимому;
		Таблица.АвтоМаксимальнаяВысота = Ложь;
		Таблица.АвтоМаксимальнаяВысотаВСтрокахТаблицы = Ложь;

		Таблица.ВысотаВСтрокахТаблицы = НоваяВысотаТаблицы;
		Таблица.МаксимальнаяВысотаВСтрокахТаблицы = НоваяВысотаТаблицы;
		Таблица.Высота = НоваяВысотаТаблицы;
		Таблица.МаксимальнаяВысота = НоваяВысотаТаблицы;
	Иначе
		УстановитьБазовуюНастройкуДополнительнойТаблицы(Таблица);
	КонецЕсли;

КонецПроцедуры

// Выравнивает элемент формы по принципу "заголовок слева, элемент справа" на мобильном клиенте.
//
// Параметры:
//  Элемент - ПолеФормы - Поле которое необходимо выровнять;
//
Процедура ВыровнятьЭлементФормы(Элемент) Экспорт

	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Элемент) <> Тип("ПолеФормы") И ТипЗнч(Элемент) <> Тип("ДекорацияФормы") Тогда
		Возврат;
	КонецЕсли;

	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	Элемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
	Элемент.РастягиватьПоГоризонтали = Истина;

КонецПроцедуры

// Устанавливает скрытие поля, если условие не выполнено.
//
// Параметры:
//	Список - ДинамическийСписок - список для которого настраивается отбор;
//	ИмяПоля - Строка - Имя поля, по которому устанавливается условие;
//	ЗначениеУсловия - Произвольный -значение с чем сравнивается поле отбора;
//	Условие - ВидСравненияКомпоновкиДанных - Вид сравнения;
//	ИмяПоляУсловия - Строка - Имя поля.
//
Процедура УстановитьПолюУсловноеОформлениеСкрытНеВидим(Список, ИмяПоля, ЗначениеУсловия = Неопределено,
	Условие = Неопределено, ИмяПоляУсловия = Неопределено) Экспорт

	ЭлементЯчейкаСрок = Список.УсловноеОформление.Элементы.Добавить();
	ЭлементЯчейкаСрок.Представление = СтрШаблон(
		НСтр("ru = 'Скрытие ячейки ""%1"" если поле пустое' "), ИмяПоля);

	ЭлементЦветаОформления = ЭлементЯчейкаСрок.Оформление.Элементы.Найти("Видимость");
	ЭлементЦветаОформления.Использование = Истина;
	ЭлементЦветаОформления.Значение      = Ложь;

	ЭлементЦветаОформления = ЭлементЯчейкаСрок.Оформление.Элементы.Найти("Отображать");
	ЭлементЦветаОформления.Использование = Истина;
	ЭлементЦветаОформления.Значение      = Ложь;

	ЭлементОбластиОформления = ЭлементЯчейкаСрок.Поля.Элементы.Добавить();
	ЭлементОбластиОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);

	ПолеУсловия = ?(ИмяПоляУсловия = Неопределено, ИмяПоля, ИмяПоляУсловия);

	Если Условие = Неопределено Тогда

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементЯчейкаСрок.Отбор, ПолеУсловия,
			ВидСравненияКомпоновкиДанных.Равно, ЗначениеУсловия, "", Истина);

	ИначеЕсли Условие = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементЯчейкаСрок.Отбор, ПолеУсловия,
			ВидСравненияКомпоновкиДанных.НеЗаполнено, , "", Истина);

	ИначеЕсли Условие = ВидСравненияКомпоновкиДанных.Равно Тогда

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементЯчейкаСрок.Отбор, ПолеУсловия,
			ВидСравненияКомпоновкиДанных.Равно, ЗначениеУсловия, , Истина);

	КонецЕсли;

	ЭлементЯчейкаСрок.Использование  = Истина;

КонецПроцедуры

// Устанавливает свойства для колонки с картинкой в списке на мобильном клиенте.
//
// Параметры:
//  Картинка - ПолеКартинки - колонка с картинкой в списке;
//
Процедура НастроитьКолонкуСКартинкойДляСписка(Картинка) Экспорт

	Картинка.Высота = 1;
	Картинка.Ширина = 1;
	Картинка.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
	Картинка.АвтоМаксимальнаяШирина = Ложь;
	Картинка.МаксимальнаяШирина = 1;
	Картинка.АвтоМаксимальнаяВысота = Ложь;
	Картинка.МаксимальнаяВысота = 1;
	Картинка.РастягиватьПоВертикали = Ложь;
	Картинка.РастягиватьПоГоризонтали = Ложь;
	Картинка.РазмерКартинки = РазмерКартинки.Пропорционально;
	Картинка.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;

КонецПроцедуры

// Устанавливает свойства для колонки с датой в списке на мобильном клиенте.
//
// Параметры:
//  Дата - ПолеВвода - колонка с картинкой в списке;
//
Процедура НастроитьКолонкуСДатойДляСписка(Дата) Экспорт

	Дата.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;
	Дата.ЦветТекста = WebЦвета.ТемноСерый;
	Дата.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	Дата.АвтоМаксимальнаяШирина = Ложь;
	Дата.МаксимальнаяШирина = 1;

КонецПроцедуры

#КонецОбласти

#Область РаботаСЗадачами

// Возвращает специальный формат срока для задач для мобильного клиента.
//
// Возвращаемое значение:
//  Строка -  Формат срока для колонки;
//
Функция ПолучитьФорматСрокаДляЗадач() Экспорт

	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	ФорматСрокаДляКолонок = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='dd.MM
																  |H:mm'", "ДФ=dd.MM");

	Возврат ФорматСрокаДляКолонок;

КонецФункции

// Возвращает специальный формат срока для задач для мобильного клиента.
//
// Возвращаемое значение:
//  Строка -  Формат даты для колонки;
//
Функция ПолучитьФорматДатыДляЗадач() Экспорт

	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	ФорматДатыДляКолонок = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='dd.MM'", "ДФ=dd.MM");

	Возврат ФорматДатыДляКолонок;

КонецФункции

// Задает свойства для акцентной кнопки на мобильном клиенте.
//
// Параметры:
//  Кнопка - КнопкаФормы - Кнопка для которой необходимо установить свойства;
//
Процедура ОформитьКнопкуЗадачСПоложительнымВыполнением(Кнопка) Экспорт

	Если Кнопка = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Кнопка) <> Тип("КнопкаФормы") Тогда
		Возврат;
	КонецЕсли;

	ОформитьБазовуюКнопку(Кнопка);
	Кнопка.Высота = 2;

	Кнопка.Шрифт = ШрифтыСтиля.МК_ШрифтАкцентнойКнопки;
	Кнопка.ЦветТекста = ЦветаСтиля.МК_ЦветТекстаАкцентнойКнопки;

	Кнопка.ЦветФона = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
	Кнопка.ЦветРамки = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;

	Кнопка.Отображение = ОтображениеКнопки.Текст;

КонецПроцедуры

Процедура ОформитьКнопкуВыполненияЗадачСЗамечаниями(Кнопка) Экспорт

	Если Кнопка = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Кнопка) <> Тип("КнопкаФормы") Тогда
		Возврат;
	КонецЕсли;

	ОформитьБазовуюКнопку(Кнопка);
	Кнопка.Высота = 2;

	Кнопка.Шрифт = ШрифтыСтиля.МК_ШрифтАкцентнойКнопки;
	Кнопка.ЦветТекста = WebЦвета.Черный;

	Кнопка.ЦветФона = ЦветаСтиля.ЦветАктивности;
	Кнопка.ЦветРамки = ЦветаСтиля.ЦветАктивности;
	Кнопка.Отображение = ОтображениеКнопки.Текст;
//	Кнопка.Отображение = ОтображениеКнопки.Картинка;
//	Кнопка.Картинка = БиблиотекаКартинок.МК_КартинкаВыполненияЗадачиСЗамечаниями;

КонецПроцедуры

Процедура ОформитьКнопкуЗадачСОтрицательнымВыполнением(Кнопка) Экспорт

	Если Кнопка = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Кнопка) <> Тип("КнопкаФормы") Тогда
		Возврат;
	КонецЕсли;

	ОформитьБазовуюКнопку(Кнопка);
	Кнопка.Высота = 2;

	Кнопка.Шрифт = ШрифтыСтиля.МК_ШрифтАкцентнойКнопки;
	Кнопка.ЦветТекста = ЦветаСтиля.МК_ЦветТекстаАкцентнойКнопки;

	Кнопка.ЦветФона = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
	Кнопка.ЦветРамки = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
	Кнопка.Отображение = ОтображениеКнопки.Текст;
//	Кнопка.Отображение = ОтображениеКнопки.Картинка;
//	Кнопка.Картинка = БиблиотекаКартинок.МК_КартинкаОтрицательногоВыполненияЗадачи;

КонецПроцедуры

#КонецОбласти

#Область РаботаСПисьмами

//Возвращает Таблицу значений с краткими письмами
// Параметры:
//  
//  Письма - Массив - Массив писем:
//   *Письмо - ДокументСсылка.ВходящееПисьмо, ДокументСсылка.ИсходящееПисьмо - Письмо
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//   *Письмо - ДокументСсылка.ВходящееПисьмо, ДокументСсылка.ИсходящееПисьмо - Письмо
//   *ТекстКратко - Строка - Краткий текст письма
//
Функция ТаблицаКраткихТекстовИзПисем(Письма) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТекстыПисем.Письмо КАК Письмо
		|ПОМЕСТИТЬ ВТПисьма
		|ИЗ
		|	РегистрСведений.ТекстыПисем КАК ТекстыПисем
		|ГДЕ
		|	ТекстыПисем.Письмо В (&Письма)
		|СГРУППИРОВАТЬ ПО
		|	ТекстыПисем.Письмо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Письмо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТекстыПисем.ТекстПисьма КАК ТекстПисьма,
		|	ВТПисьма.Письмо
		|ИЗ
		|	 ВТПисьма Как ВТПисьма
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекстыПисем Как ТекстыПисем
		|		ПО ВТПисьма.Письмо = ТекстыПисем.Письмо";
	
	Запрос.УстановитьПараметр("Письма", Письма);

	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
	
		ТаблицаКраткихТекстов = РезультатЗапроса.Выгрузить();
		ТаблицаКраткихТекстов.Колонки.Добавить("ТекстКратко");
		
		Для Каждого Строка Из ТаблицаКраткихТекстов Цикл
			ПолныйТекст = Строка.ТекстПисьма.Получить();
			Если ПолныйТекст <> Неопределено Тогда
				ТекстКратко = СокрЛП(Лев(СтрЗаменить(ПолныйТекст, Символы.ПС, " "), 100));
				Строка.ТекстКратко = ТекстКратко;
			КонецЕсли;
		КонецЦикла;
		ТаблицаКраткихТекстов.Колонки.Удалить("ТекстПисьма");
	
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ЭлектроннаяПочта.Ссылка
			|ПОМЕСТИТЬ ВТПисьма
			|ИЗ
			|	ЖурналДокументов.ЭлектроннаяПочта КАК ЭлектроннаяПочта
			|ГДЕ
			|	ЭлектроннаяПочта.Ссылка В (&Письма)
			|СГРУППИРОВАТЬ ПО
			|	ЭлектроннаяПочта.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТПисьма.Ссылка как Письмо,
			|	ВходящееПисьмо.ТипТекста,
			|	ВходящееПисьмо.ТекстПисьмаПростойТекстХранилище КАК ПростойТекстХранилище,
			|	ВходящееПисьмо.ТекстПисьмаHTMLХранилище
			|ИЗ
			|	ВТПисьма КАК ВТПисьма
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВходящееПисьмо КАК ВходящееПисьмо
			|		ПО ВТПисьма.Ссылка = ВходящееПисьмо.Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВТПисьма.Ссылка,
			|	ИсходящееПисьмо.ТипТекста,
			|	ИсходящееПисьмо.ТекстХранилище,
			|	ИсходящееПисьмо.ТекстПисьмаHTMLХранилище
			|ИЗ
			|	ВТПисьма КАК ВТПисьма
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИсходящееПисьмо КАК ИсходящееПисьмо
			|		ПО ВТПисьма.Ссылка = ИсходящееПисьмо.Ссылка";
		
		Запрос.УстановитьПараметр("Письма", Письма);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			ТаблицаКраткихТекстов = РезультатЗапроса.Выгрузить();
			ТаблицаКраткихТекстов.Колонки.Добавить("ТекстКратко");
			
			Для Каждого Строка Из ТаблицаКраткихТекстов Цикл
				Если Строка.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст Тогда
					ПолныйТекстСтрокой = Строка.ПростойТекстХранилище.Получить();
					
				ИначеЕсли Строка.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
					ПолныйТекстHTML = Строка.ТекстПисьмаHTMLХранилище.Получить();
					ПолныйТекстСтрокой = РаботаС_HTML.ПолучитьТекстИзHTML(ПолныйТекстHTML);
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ПолныйТекстСтрокой) Тогда
					ТекстКратко = СокрЛП(Лев(СтрЗаменить(ПолныйТекстСтрокой, Символы.ПС, " "),
						100));
					Строка.ТекстКратко = ТекстКратко;
				КонецЕсли;

			КонецЦикла;
		КонецЕсли;
		
		ТаблицаКраткихТекстов.Колонки.Удалить("ПростойТекстХранилище");
		ТаблицаКраткихТекстов.Колонки.Удалить("ТекстПисьмаHTMLХранилище");
		ТаблицаКраткихТекстов.Колонки.Удалить("ТипТекста");
	
	КонецЕсли;
	
	Возврат ТаблицаКраткихТекстов;
	
КонецФункции

//Возвращает значение настройки "Множественный ввод адресатов"
//  Возвращаемое значение:
//   Булево - значение настройки (по умолчанию - Ложь)
//
Функция НастройкаМножественныйВвод() Экспорт

	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ВстроеннаяПочта",
		"МК_НастройкаМножественныйВводАдресатов",
		Ложь); // по умолчанию отключаем

КонецФункции

//Сохраняет настройку использования множественного ввода адресатов
//  Параметры:
//   ЗначениеНастройки - Булево
//
Процедура СохранитьНастройкуМножественногоВвода(ЗначениеНастройки) Экспорт

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ВстроеннаяПочта",
		"МК_НастройкаМножественныйВводАдресатов",
		ЗначениеНастройки);
	
КонецПроцедуры


#КонецОбласти


Процедура СохранитьИндексЦветаВиджетов(Значение) Экспорт

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("МК_ОбщиеНастройки", "ЦветВиджетов", Значение);

КонецПроцедуры

Функция ИндексЦветаВиджетов() Экспорт

	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("МК_ОбщиеНастройки", "ЦветВиджетов", 0);

КонецФункции

Процедура ИзменитьПорогДляНовых(Значение) Экспорт

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("МК_ОбщиеНастройки", "ПорогДляНовых", Значение);

КонецПроцедуры

Функция ПорогДляНовых() Экспорт

	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("МК_ОбщиеНастройки", "ПорогДляНовых", 20);

КонецФункции

//Добавляет на форму команды
//Параметры:
// Форма - Форма - Форма-источник
// КомПанель - КоманднаяПанель - Панель для команд
//
Процедура ДобавитьКомандыДляСоздания(Форма, КомПанель) Экспорт

	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗадачи") Тогда
		СведенияОКоманде = НовыйСведенияОКоманде();
		СведенияОКоманде.Имя = "МК_СоздатьЗадачу";
		СведенияОКоманде.Заголовок = НСтр("ru = 'Задача (Поручение)'");
		СведенияОКоманде.Действие = "Подключаемый_СоздатьЗадачу";
		СведенияОКоманде.Картинка = БиблиотекаКартинок.МК_ВиджетЗадачи;
		СоздатьКоманду(Форма, КомПанель, СведенияОКоманде);
	КонецЕсли;

	Если ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда
		СведенияОКоманде = НовыйСведенияОКоманде();
		СведенияОКоманде.Имя = "МК_СоздатьКонтроль";
		СведенияОКоманде.Заголовок = НСтр("ru = 'Контроль'");
		СведенияОКоманде.Действие = "Подключаемый_СоздатьКонтроль";
		СведенияОКоманде.Картинка = БиблиотекаКартинок.МК_ВиджетКонтроль;
		СоздатьКоманду(Форма, КомПанель, СведенияОКоманде);
	КонецЕсли;

	Если ПолучитьФункциональнуюОпцию("ИспользоватьВстроеннуюПочту") Тогда
		СведенияОКоманде = НовыйСведенияОКоманде();
		СведенияОКоманде.Имя = "МК_НовоеПисьмо";
		СведенияОКоманде.Заголовок = НСтр("ru = 'Письмо'");
		СведенияОКоманде.Действие = "Подключаемый_НовоеПисьмо";
		СведенияОКоманде.Картинка = БиблиотекаКартинок.МК_ВиджетПочта;
		СоздатьКоманду(Форма, КомПанель, СведенияОКоманде);
	КонецЕсли;

	Если ПолучитьФункциональнуюОпцию("ИспользоватьОтсутствия") Тогда
		СведенияОКоманде = НовыйСведенияОКоманде();
		СведенияОКоманде.Имя = "МК_НовоеОтсутствие";
		СведенияОКоманде.Заголовок = НСтр("ru = 'Отсутствие'");
		СведенияОКоманде.Действие = "Подключаемый_НовоеОтсутствие";
		СведенияОКоманде.Картинка = БиблиотекаКартинок.МК_ВиджетОтсутствия;
		СоздатьКоманду(Форма, КомПанель, СведенияОКоманде);
	КонецЕсли;

	Если ПолучитьФункциональнуюОпцию("ИспользоватьЕжедневныеОтчеты") Тогда
		СведенияОКоманде = НовыйСведенияОКоманде();
		СведенияОКоманде.Имя = "МК_ОтчетЗаДень";
		СведенияОКоманде.Заголовок = НСтр("ru = 'Отчет за день'");
		СведенияОКоманде.Действие = "Подключаемый_ОтчетЗаДень";
		СведенияОКоманде.Картинка = БиблиотекаКартинок.МК_ВиджетЕжедневныеОтчеты;
		СоздатьКоманду(Форма, КомПанель, СведенияОКоманде);
	КонецЕсли;

	Если ПолучитьФункциональнуюОпцию("ИспользоватьРабочийКалендарь") Тогда
		СведенияОКоманде = НовыйСведенияОКоманде();
		СведенияОКоманде.Имя = "МК_СоздатьСобытиеВКалендаре";
		СведенияОКоманде.Заголовок = НСтр("ru = 'Событие'");
		СведенияОКоманде.Действие = "Подключаемый_НовоеСобытиеВКалендаре";
		СведенияОКоманде.Картинка = БиблиотекаКартинок.МК_ВиджетКалендарь;
		СоздатьКоманду(Форма, КомПанель, СведенияОКоманде);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбсуждения") Тогда
		СведенияОКоманде = НовыйСведенияОКоманде();
		СведенияОКоманде.Имя = "МК_СоздатьТемуНаФоруме";
		СведенияОКоманде.Заголовок = НСтр("ru = 'Тема на форуме'");
		СведенияОКоманде.Действие = "Подключаемый_НоваяТемаНаФоруме";
		СведенияОКоманде.Картинка = БиблиотекаКартинок.МК_ВиджетФорум;
		СоздатьКоманду(Форма, КомПанель, СведенияОКоманде);
	КонецЕсли;

	Если МК_ПовтИсп.ВерсияПлатформыСервераВыше8322() Тогда
		СведенияОКоманде = НовыйСведенияОКоманде();
		СведенияОКоманде.Имя = "МК_СканыДокументов";
		СведенияОКоманде.Заголовок = НСтр("ru = 'Сканы документов'");
		СведенияОКоманде.Действие = "Подключаемый_СканироватьДокументы";
		СведенияОКоманде.Картинка = БиблиотекаКартинок.МК_ВиджетСканер;
		СоздатьКоманду(Форма, КомПанель, СведенияОКоманде);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОформлениеЭлементов

// Задает базовые свойства для кнопки на мобильном клиенте.
//
// Параметры:
//  Кнопка - КнопкаФормы - Кнопка для которой необходимо установить свойства;
//
Процедура ОформитьБазовуюКнопку(Кнопка)

	Если Кнопка = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Кнопка) <> Тип("КнопкаФормы") Тогда
		Возврат;
	КонецЕсли;

	Если Кнопка.Вид = ВидКнопкиФормы.Гиперссылка Тогда
		Кнопка.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	КонецЕсли;

	Кнопка.Ширина = 0;

	Кнопка.ВысотаЗаголовка = 1;
	Кнопка.РастягиватьПоГоризонтали = Истина;
	Кнопка.РастягиватьПоВертикали = Ложь;

	Кнопка.Фигура = ФигураКнопки.Овал;
	Кнопка.ОтображениеФигуры = ОтображениеФигурыКнопки.Всегда;

КонецПроцедуры

#КонецОбласти

#Область Виджеты

//Создает команду программно
// Параметры:
//  Форма - Форма - Форма-источник
//  Родитель - Группа, КоманднаяПанель - Контейнер для команды
//  СведенияОКоманде - Структура - Структура со сведениями о команде:
//   *Имя - Строка
//   *Заголовок - Строка
//   *Действие - Строка
//   *Картинка - Картинка
//
Процедура СоздатьКоманду(Форма, Родитель, СведенияОКоманде)

	Если Форма.Команды.Найти(СведенияОКоманде.Имя) = Неопределено Тогда
		Команда = РаботаСФормами.ДобавитьКоманду(Форма, СведенияОКоманде.Имя, СведенияОКоманде.Заголовок, ,
			СведенияОКоманде.Картинка);
		Команда.Действие = СведенияОКоманде.Действие;
	КонецЕсли;

	Если Форма.Элементы.Найти(СведенияОКоманде.Имя) = Неопределено Тогда
		КнопкаКоманды = РаботаСФормами.ДобавитьКнопку(Форма, СведенияОКоманде.Имя, Родитель, СведенияОКоманде.Имя);
		КнопкаКоманды.Заголовок = СведенияОКоманде.Заголовок;
	КонецЕсли;

КонецПроцедуры

//Конструктор для команды
//  Возвращаемое значение:
//  Структура - Структура со сведениями о команде:
//   *Имя - Строка
//   *Заголовок - Строка
//   *Действие - Строка
//   *Картинка - Картинка
//
Функция НовыйСведенияОКоманде()

	Возврат Новый Структура("Имя, Заголовок, Действие, Картинка");

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли