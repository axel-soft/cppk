// Интеграция "1С:Share" Клиент ( Документооборот)

#Область ПрограммныйИнтерфейс

// Переопределяет форму выбора присоединенных файлов документа перед публикацией.
// При необходимости можно описать вызов своей формы для выбора присоединенных файлов к документу,
// либо не открывать форму для выбора файлов и описать алгоритм подбора за пользователя.
// В ином случае, будет выполнена стандартная обработка с открытием формы для выбора файлов при их наличие.
// Файлы к публикации можно переопределить через метод
// ИнтеграцияShareПереопределяемый.ПриОпределенииФайловДокументаДляВыбораКПубликации.
//
// При описании своей логики необходимо установить параметр СтандартнаяОбработка = Ложь и по завершению продолжить
// выполнение публикации, вызвав обработчик оповещения из параметра "ОповещениеОбработкиРезультатаВыборФайлов"
// с результатом выбранных файлов.
// Ожидается результат с типом "Массив из см. ИнтеграцияShareКлиентСервер.НовыеДанныеФайлаДляВыбораКПубликации".
// В случае возникновения ошибок необходимо описывать самостоятельно.
// 
// Рекомендуется отбирать к выбору файлы с разрешенным расширением, используя метод см. ИнтеграцияShare.РасширениеФайлаДоступно.
// Иначе при публикации документа в сервисе возникнет ошибка.
//
// Результат с выбранными файлами к публикации формируется в пакет и проходит проверку на максимальный объем передаваемых данных.
// В случае, если проверка не прошла будет повторно вызван этот же метод, в котором будет заполнен параметр "РезультатПроверкиПакета".
// 
// Пример:
//	СтандартнаяОбработка = Ложь;
//
//	Если РезультатПроверкиПакета <> Неопределено
//		И РезультатПроверкиПакета.ПревышенРазмерПакета Тогда
//		// Описание алгоритма для изменения выбранных файлов
//		...
//	Иначе
//		// Описание алгоритма выбора файлов
//		...
//	КонецЕсли
//
//	ВыбранныеФайлы = Новый Массив;
//	ВыбранныйФайл = ИнтеграцияShareКлиентСервер.НовыеДанныеФайлаДляВыбораКПубликации();
//	ВыбранныеФайлы.Добавить(ВыбранныйФайл);
//
//	1) ВыполнитьОбработкуОповещения(ОповещениеОбработкиРезультатаВыборФайлов, ВыбранныеФайлы); // В случае когда форму не требуется открывать
//	2) Передать параметры при закрытии формы: Закрыть(ВыбранныеФайлы); // В случае когда вызвали свою форму
//
// Параметры:
//  ОповещениеОбработкиРезультатаВыборФайлов - ОписаниеОповещения - метод для обработки результата выбора файлов
//              при закрытии формы. В дополнительные параметры необходио передать результат с типом
//              "Массив из см. ИнтеграцияShareКлиентСервер.НовыеДанныеФайлаДляВыбораКПубликации".
//  СсылкаНаДокумент                         - ДокументСсылка, СправочникСсылка - ссылка на документ к публикации.
//  РезультатПроверкиПакета                  - Неопределено
//  										 - См. ИнтеграцияShareКлиентСервер.НовыйРезультатПроверкиПакета
//  СтандартнаяОбработка                     - Булево - признак стандартного выполнения загрузки. По умолчанию Истина.
//
Процедура ПриОткрытииФормыВыбораФайловДокументаКПубликации(ОповещениеОбработкиРезультатаВыборФайлов,
		Знач СсылкаНаДокумент, Знач РезультатПроверкиПакета, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РезультатПроверкиПакета", РезультатПроверкиПакета);
	ПараметрыФормы.Вставить("ЭлектронныйДокумент", СсылкаНаДокумент);
	
	ОткрытьФорму("ОбщаяФорма.Сервис1СShareФайлыДляОтправки", ПараметрыФормы,,,,,
		ОповещениеОбработкиРезультатаВыборФайлов);
	
КонецПроцедуры

// Переопределяет загрузку документа по данным электронного документа, полученных по публичной ссылке сервиса 1С:Share.
//
// При необходимости можно описать вызов своей формы для загрузки документа, либо сразу загружать данные документа в учетную базу.
// В случае использования своего алгоритма загрузки необходимо поддержать весь процесс чтения и загрузки электронного
// документа в учетную базу из данных транспортного контейнера. Для этого необходимо установить СтандартнаяОбработка = Ложь.
// При стандартной обработке загрузка выполняется с использованием механизмов ЭДО из подсистемы
// "ЭлектронноеВзаимодействие.ОбменСКонтрагентами", которую требуется поддержать.
// Если документ ранее уже был загружен - открывается учетный документ в базе.
//
// Примеры вариантов использования:
//	СтандартнаяОбработка = Ложь; // Устанавливается при использовании своей логики загрузки документа.
//	
//	1) ОткрытьФорму("Обработка.ЗагрузкаДокумента.ОсновнаяФорма", ДанныеДокумента); // Вызываем обработку для загрузки документа.
//	и в ней описываем логику загрузки документа.
//	
//	2) //В случае, если документ уже ранее загружался в базу можно открыть документ для просмотра или описать алгоритм перезаполнения документа.
//	// Поиск документа выполняется по типу метаданных и идентификатору документа из свойства ДанныеДокумента.ДанныеЗагрузкиДокумента
//	Если ЗначениеЗаполнено(ДанныеДокумента.ДанныеЗагрузкиДокумента.ОбъектУчета) Тогда
//		ПоказатьЗначение(Неопределено, ДанныеДокумента.ДанныеЗагрузкиДокумента.ОбъектУчета);
//		Возврат;
//	КонецЕсли;
//	
//	3) // По своей логике описываем загрузку документа.
//	СсылкаНаОбъект = ОбщийМодульВызовСервера.ЗагрузитьДокументПоСвоейЛогике(ДанныеДокумента); 
//	ПоказатьЗначение(Неопределено, СсылкаНаОбъект);
//	
// Если документ был загружен в базе успешно необходимо отправить отметку в сервис:
//    ПараметрыДокумента = ИнтеграцияShareКлиентСервер.НовыеПараметрыДокументаДляОтметкиЗагрузкиВБазу();
//    ПараметрыДокумента.ОбъектУчета                        = ДанныеДокумента.ДокументУчета;
//    ПараметрыДокумента.ТипМетаданныхДокументаВладельца    = 
//       Метаданные.НайтиПоТипу(ТипЗнч(ДанныеДокумента.ДокументУчета)).ПолноеИмя();
//    ПараметрыДокумента.ИдентификаторЭлектронногоДокумента = ДанныеДокумента.ИдентификаторЭлектронногоДокумента;
//    ИнтеграцияShare.ОтметитьВСервисеЗагрузкуДокументаВБазу(ПараметрыДокумента, Отказ);
//
// Параметры:
//  ДанныеДокумента      - Структура из См. ИнтеграцияShare.НовоеОписаниеДанныхЭлектронногоДокумента - данные загружаемого документа по ссылке.
//  СтандартнаяОбработка - Булево - признак стандартного выполнения загрузки. По умолчанию Истина.
//
Процедура ПриЗагрузкеДокументаПоСсылке(ДанныеДокумента, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ДанныеЗагрузки = ДанныеДокумента.ДанныеЗагрузкиДокумента;
	Если ЗначениеЗаполнено(ДанныеЗагрузки) И ЗначениеЗаполнено(ДанныеЗагрузки.ОбъектУчета) Тогда
		ПраваНаДокумент = ИнтеграцияShareДокументооборотВызовСервера.ПраваНаДокумент(
			ДанныеЗагрузки.ОбъектУчета);		
		ДанныеДокумента.ДоступКДокументуЗакрыт = Не ПраваНаДокумент.ЕстьПрава;
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецЕсли;
	
	ШаблоныДокумента = ИнтеграцияShareДокументооборотКлиентСервер.ШаблоныДляЗагрузкиДокумента();
	АдресХранилищаРезультата = "";
	ИспользоватьПредпросмотрФайлов = Ложь;
	ИнтеграцияShareДокументооборотВызовСервера.ПолучитьДанныеДляЗарузкиДокумента(ДанныеДокумента, ШаблоныДокумента,
		АдресХранилищаРезультата, ИспользоватьПредпросмотрФайлов);
	ДанныеЗагрузки = ДанныеДокумента.ДанныеЗагрузкиДокумента;
	Если ЗначениеЗаполнено(ДанныеЗагрузки) И ЗначениеЗаполнено(ДанныеЗагрузки.ОбъектУчета) Тогда
		СтандартнаяОбработка = Истина;
		Возврат;	
	КонецЕсли;		
	
	ДанныеПолучены = ЭтоАдресВременногоХранилища(АдресХранилищаРезультата);	
	Если ДанныеПолучены И ИспользоватьПредпросмотрФайлов Тогда
		ОткрытьФормуЗагрузкиФайлов(ДанныеДокумента, ШаблоныДокумента, АдресХранилищаРезультата);
	ИначеЕсли ДанныеПолучены И ЗначениеЗаполнено(ШаблоныДокумента.ШаблонДокумента) И ШаблоныДокумента.НайденВКэше Тогда
		ИнтеграцияShareДокументооборотВызовСервера.СоздатьДокументДО(ДанныеДокумента, ШаблоныДокумента, АдресХранилищаРезультата);
		ПослеСозданияДокументаДО(ДанныеДокумента);
	ИначеЕсли ДанныеПолучены Тогда
		ОткрытьФормуВыбораШаблонаДокумента(ДанныеДокумента, ШаблоныДокумента, АдресХранилищаРезультата,
			ИспользоватьПредпросмотрФайлов);
	КонецЕсли;
		
КонецПроцедуры

// Проверяет, что команда открывает ссылку в браузере.
// 
// Параметры:
//  ПараметрыСсылки - Соответствие Из КлючИзначение
// 
// Возвращаемое значение:
//  Булево - Истина, если ссылку открываем в браузере
//
Функция ЭтоПереходПоСсылкеВБраузер(ПараметрыСсылки) Экспорт
	
	Возврат ПараметрыСсылки[ПараметрОткрытияСсылкиВБраузере()]
		<> Неопределено;
		
КонецФункции
	
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Вывести описание ошибки доступа, если у пользователя нет прав на найденный(загруженный документ).
// 
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ДокументДОДляЭДО - загруженный или найденный документ
//  НавигационнаяСсылка - Строка - Навигационная ссылка
//  ОписаниеОшибки - Строка - Описание ошибки
//  
Процедура ВывестиОписаниеОшибкиДоступа(ОбъектУчета, НавигационнаяСсылка = "", ОписаниеОшибки = "") Экспорт
	
	Если Не ЗначениеЗаполнено(НавигационнаяСсылка) Тогда
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ОбъектУчета);
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Документ загружен (найден), но у вас нет прав на просмотр документа.
			|
			|Обратитесь к администратору.
			| 
			|Можете скопировать ссылку на документ:
			|
			|%1'"), НавигационнаяСсылка);
	КонецЕсли;	
	
	НастройкиДиалога = Новый Структура;
	НастройкиДиалога.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", Ложь);
	НастройкиДиалога.Вставить("Картинка", БиблиотекаКартинок.ДиалогВосклицание);
	НастройкиДиалога.Вставить("ПоказыватьКартинку", Ложь);
	НастройкиДиалога.Вставить("МожноКопировать", Истина);
	НастройкиДиалога.Вставить("КнопкаПоУмолчанию", 0);
	НастройкиДиалога.Вставить("ВыделятьКнопкуПоУмолчанию", Ложь);
	НастройкиДиалога.Вставить("БлокироватьВесьИнтерфейс", Ложь);
	НастройкиДиалога.Вставить("Заголовок", Нстр("ru = 'Ошибка прав доступа'"));	
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(0, НСтр("ru = 'Закрыть'"));
	
	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(Неопределено, ОписаниеОшибки, Кнопки,
		НастройкиДиалога);
	
КонецПроцедуры

// Вывести описание ошибки загрузки.
// 
// Параметры:
//  ОписаниеОшибки - Строка
//  Заголовок - Строка
//
Процедура ВывестиОписаниеОшибкиЗагрузки(ОписаниеОшибки, Заголовок) Экспорт
	
	НастройкиДиалога = Новый Структура;
	НастройкиДиалога.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", Ложь);
	НастройкиДиалога.Вставить("Картинка", БиблиотекаКартинок.ДиалогВосклицание);
	НастройкиДиалога.Вставить("ПоказыватьКартинку", Ложь);
	НастройкиДиалога.Вставить("МожноКопировать", Истина);
	НастройкиДиалога.Вставить("КнопкаПоУмолчанию", 0);
	НастройкиДиалога.Вставить("ВыделятьКнопкуПоУмолчанию", Ложь);
	НастройкиДиалога.Вставить("БлокироватьВесьИнтерфейс", Ложь);
	НастройкиДиалога.Вставить("Заголовок", Заголовок);	
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(0, НСтр("ru = 'Закрыть'"));
	
	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(Неопределено, ОписаниеОшибки, Кнопки,
		НастройкиДиалога);
	
КонецПроцедуры	

// Открывает документ, если он успешно загружен или найден в базе и у пользователя есть на него права,
// если прав нет, то в сообщении выводит навигационную ссылку документа
// 
// Параметры:
//  ДанныеДокумента - Структура из КлючИЗначение - - 
// - См. ИнтеграцияShare.НовоеОписаниеДанныхЭлектронногоДокумента
//  ОбъектУчета - ОпределяемыйТип.ДокументДОДляЭДО - загруженный или найденный документ
Процедура ПоказатьНайденныйЗагруженныйДокумент(ДанныеДокумента, ОбъектУчета) Экспорт
	
	Если Не ДанныеДокумента.ДоступКДокументуЗакрыт Тогда
		ПоказатьЗначение(Неопределено, ОбъектУчета);
	Иначе
		ВывестиОписаниеОшибкиДоступа(ОбъектУчета);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Открывает форму выбора шаблона.
// 
// Параметры:
//  ДанныеДокумента - См. ИнтеграцияShare.НовоеОписаниеДанныхЭлектронногоДокумента
//  ШаблоныДокумента - См. ИнтеграцияShareДокументооборотКлиентСервер.ШаблоныДляЗагрузкиДокумента
//  АдресХранилищаРезультата - Строка - Адрес временного хранилища.
//  ИспользоватьПредпросмотрФайлов - Булево
//
Процедура ОткрытьФормуВыбораШаблонаДокумента(ДанныеДокумента, ШаблоныДокумента, АдресХранилищаРезультата,
		ИспользоватьПредпросмотрФайлов)
	
	ДоступныеВидыДокументов = Новый СписокЗначений;
	ДоступныеВидыДокументов.ЗагрузитьЗначения(ШаблоныДокумента.ВидыДокументов);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИсточникСоздания", ПредопределенноеЗначение("Справочник.ИсточникиДанных.Сервис1СShare"));
	ПараметрыФормы.Вставить("ДоступныеВидыДокументов", ДоступныеВидыДокументов);
	ПараметрыФормы.Вставить("ШаблонДокумента", ШаблоныДокумента.ШаблонДокумента);
	ПараметрыФормы.Вставить("ИспользоватьПредпросмотрФайлов", ИспользоватьПредпросмотрФайлов);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДанныеДокумента", ДанныеДокумента);
	ДополнительныеПараметры.Вставить("ШаблоныДокумента", ШаблоныДокумента);
	ДополнительныеПараметры.Вставить("АдресХранилищаРезультата", АдресХранилищаРезультата);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораШаблонаДокумента", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.СозданиеДокументаПоШаблону", ПараметрыФормы,, Истина,,, ОписаниеОповещения);
	
КонецПроцедуры

// Открыть форму предпросмотра файлов
/// 
// Параметры:
//  ДанныеДокумента - См. ИнтеграцияShare.НовоеОписаниеДанныхЭлектронногоДокумента
//  ШаблоныДокумента - См. ИнтеграцияShareДокументооборотКлиентСервер.ШаблоныДляЗагрузкиДокумента
//  АдресХранилищаРезультата - Строка - Адрес временного хранилища.
//
Процедура ОткрытьФормуЗагрузкиФайлов(ДанныеДокумента, ШаблоныДокумента, АдресХранилищаРезультата)
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	ВыбратьШаблонДокумента = Не ЗначениеЗаполнено(ШаблоныДокумента.ШаблонДокумента) Или Не ШаблоныДокумента.НайденВКэше;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресХранилищаРезультата", АдресХранилищаРезультата);
	ПараметрыФормы.Вставить("ИдентификаторКлиента", ИдентификаторКлиента);
	ПараметрыФормы.Вставить("ВыбратьШаблонДокумента", ВыбратьШаблонДокумента);
	ПараметрыФормы.Вставить("ШаблонДокумента", ШаблоныДокумента.ШаблонДокумента);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДанныеДокумента", ДанныеДокумента);
	ДополнительныеПараметры.Вставить("АдресХранилищаРезультата", АдресХранилищаРезультата);
	ДополнительныеПараметры.Вставить("ВыбратьШаблонДокумента", ВыбратьШаблонДокумента);
	ДополнительныеПараметры.Вставить("ШаблоныДокумента", ШаблоныДокумента);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПросмотраФайлов", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.Сервис1СShareФайлыДляЗагрузки", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

// После просмотра файлов.
// 
// Параметры:
//  Результат - Строка -, Неопределено
//  
//  ДополнительныеПараметры - Структура:
// * ДанныеДокумента - См. ИнтеграцияShare.НовоеОписаниеДанныхЭлектронногоДокумента
// * ШаблоныДокумента - См. ИнтеграцияShareДокументооборотКлиентСервер.ШаблоныДляЗагрузкиДокумента
// * АдресХранилищаРезультата - Строка - Адрес временного хранилища
//
Процедура ПослеПросмотраФайлов(Результат, ДополнительныеПараметры)	Экспорт
	
	ДанныеДокумента = ДополнительныеПараметры.ДанныеДокумента;
	ШаблоныДокумента = ДополнительныеПараметры.ШаблоныДокумента;
	АдресХранилищаРезультата = ДополнительныеПараметры.АдресХранилищаРезультата;
	
	Если Результат = "Загрузить" Тогда
		ИнтеграцияShareДокументооборотВызовСервера.СоздатьДокументДО(ДанныеДокумента, ШаблоныДокумента,
			АдресХранилищаРезультата);
		ПослеСозданияДокументаДО(ДанныеДокумента);
	ИначеЕсли Результат = "Далее" Тогда
		ОткрытьФормуВыбораШаблонаДокумента(ДанныеДокумента, ШаблоныДокумента, АдресХранилищаРезультата, Истина);
	КонецЕсли;	
	
КонецПроцедуры	
	
// После создания документа ДО.
// 
// Параметры:
//  ДанныеДокумента - См. ИнтеграцияShare.НовоеОписаниеДанныхЭлектронногоДокумента
//
Процедура ПослеСозданияДокументаДО(ДанныеДокумента)
	
	ОчиститьСообщения();
	ДанныеЗагрузки = ДанныеДокумента.ДанныеЗагрузкиДокумента;
	Если ЗначениеЗаполнено(ДанныеЗагрузки)
		И ЗначениеЗаполнено(ДанныеЗагрузки.ОбъектУчета) Тогда
		ПоказатьНайденныйЗагруженныйДокумент(ДанныеДокумента, ДанныеЗагрузки.ОбъектУчета);
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = НСтр("ru = 'Не удалось загрузить документ. Подробности см. в журнале регистрации.'");
	ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки);
	
КонецПроцедуры

// После выбора шаблона документа.
// 
// Параметры:
//  Результат - Строка -, Структура:
//  * ШаблонДокумента - СправочникСсылка.ШаблоныДокументов
//  * ТематикаДокумента - СправочникСсылка.ТематикиДокументов
//  ДополнительныеПараметры - Структура:
// * ДанныеДокумента - См. ИнтеграцияShare.НовоеОписаниеДанныхЭлектронногоДокумента
// * ШаблоныДокумента - См. ИнтеграцияShareДокументооборотКлиентСервер.ШаблоныДляЗагрузкиДокумента
// * АдресХранилищаРезультата - Строка - Адрес временного хранилища
//
Процедура ПослеВыбораШаблонаДокумента(Результат, ДополнительныеПараметры) Экспорт
	
	ШаблоныДокумента = ДополнительныеПараметры.ШаблоныДокумента;
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.ШаблонДокумента <> ШаблоныДокумента.ШаблонДокумента 
			Или (Результат.Свойство("ТематикаДокумента")
			И Результат.ТематикаДокумента <> ШаблоныДокумента.ТематикаДокумента) Тогда
			ШаблоныДокумента.ЗаписатьКэш = Истина;
			ШаблоныДокумента.НайденВКэше = Ложь;	
		КонецЕсли;		
		ЗаполнитьЗначенияСвойств(ШаблоныДокумента, Результат);
		ИнтеграцияShareДокументооборотВызовСервера.СоздатьДокументДО(ДополнительныеПараметры.ДанныеДокумента,
			ШаблоныДокумента, ДополнительныеПараметры.АдресХранилищаРезультата);
		ПослеСозданияДокументаДО(ДополнительныеПараметры.ДанныеДокумента);
	ИначеЕсли Результат = "Назад" Тогда
		ОткрытьФормуЗагрузкиФайлов(ДополнительныеПараметры.ДанныеДокумента, ШаблоныДокумента,
			ДополнительныеПараметры.АдресХранилищаРезультата);
	КонецЕсли;
	
КонецПроцедуры

// Имя параметра в строке ссылки, наличие которого означает,
// что ссылка должна быть открыта не в базе 1с, а в интернет-браузере.
// 
// Возвращаемое значение:
//  Строка - Параметр открытия ссылки в браузере
//
Функция ПараметрОткрытияСсылкиВБраузере()
	
	Возврат "1сShareWebLink";
	
КонецФункции

#КонецОбласти