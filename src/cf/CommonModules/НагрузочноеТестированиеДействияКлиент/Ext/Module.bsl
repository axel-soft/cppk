// Содержит код действий, из которых формируются сценарии тестирования.

#Область СлужебныйПрограммныйИнтерфейс
	
	// Устанавливает курсор на папку в дереве папок списка документов предприятия.
	//
	// Параметры шага:
	//  * ПапкаДокумента - СправочникСсылка.ПапкиДокументов - Папка, к которой нужно перейти.
	//
	// Возвращаемое значение:
	//  Булево - Истина если успешно, иначе Ложь
	Функция Действие_ВыбратьПапкуДокумента() Экспорт
		
		Шаг = НагрузочноеТестированиеКлиент.ТекущийШагСценария();
		
		Форма = ОбщегоНазначенияДокументооборотКлиент.НайтиФормуПоИмени(
			"Справочник.ДокументыПредприятия.Форма.ФормаСпискаСПапками");
		
		Если Форма = Неопределено Тогда
			Возврат ЗавершитьВыполнениеСценарияСОшибкой(
				НСтр("ru = 'Не найдена открытая форма списка документов предприятия'"), Шаг.Действие);
		КонецЕсли;
		
		Если Шаг.Параметры.Свойство("ПапкаДокумента") 
			И ТипЗнч(Шаг.Параметры.ПапкаДокумента) = Тип("СправочникСсылка.ПапкиДокументов") Тогда
			
			Форма.Элементы.Папки.ТекущаяСтрока = Шаг.Параметры.ПапкаДокумента;
			
		КонецЕсли;
		
		Возврат Истина;
		
	КонецФункции
	
	// Устанавливает курсор на шаблон в дереве шаблонов при создании внутреннего,
	// входящего или исходящего документа.
	// Параметры шага:
	//  * Шаблон - СправочникСсылка.ШаблоныДокументов - Шаблон документа, к которому нужно перейти.
	// 
	// Возвращаемое значение:
	//  Булево - Истина
	Функция Действие_ВыбратьШаблонДокумента() Экспорт
		
		Форма = ОбщегоНазначенияДокументооборотКлиент.НайтиФормуПоИмени("ОбщаяФорма.СозданиеДокументаПоШаблону");
		Если Форма = Неопределено Тогда
			// Если нет шаблонов, то сразу открывается форма создания документа.
			Возврат Истина;
		КонецЕсли;
		
		Шаблоны = Форма.СписокШаблонов.ПолучитьЭлементы(); // ДанныеФормыКоллекцияЭлементовДерева
		ИмяПоляШаблонов = "СписокШаблонов";
		Если Шаблоны.Количество() = 0 Тогда
			Шаблоны = Форма.ТематикиДокументов.ПолучитьЭлементы(); // ДанныеФормыКоллекцияЭлементовДерева
			ИмяПоляШаблонов = "ТематикиДокументов";
		КонецЕсли;
		
		Если Шаблоны[0].ЭтоГруппа Тогда
			Для Каждого Шаблон Из Шаблоны Цикл
				Если СтрНачинаетсяС(Шаблон.Представление, "Все") Тогда
					Шаблоны = Шаблон.ПолучитьЭлементы();
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Шаг = НагрузочноеТестированиеКлиент.ТекущийШагСценария();
		
		Если Шаблоны.Количество() = 0 Тогда
			Возврат ЗавершитьВыполнениеСценарияСОшибкой(
				СтрШаблон(
					НСтр("ru = '%1 - в открывшейся форме вообще нет шаблонов'"), 
					Текст_НеУдалосьВыбратьШаблонДокумента()),
				Шаг.Действие);
		КонецЕсли;
		
		ТекущаяСтрока = Неопределено;
		Если Шаг.Параметры.Свойство("Шаблон") Тогда
			
			Для Каждого СтрокаШаблона Из Шаблоны Цикл
				Если СтрокаШаблона.КомандаСсылка = Шаг.Параметры.Шаблон Тогда
					ТекущаяСтрока = СтрокаШаблона.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ТекущаяСтрока = Неопределено Тогда
				// Первоначальный шаблон не подошел.
				// выберем случайный шаблон из списка, новый документ создастся по нему, но потом
				// в документе поменяется вид документа на тот, который изначально прописан по сценарию:
				СлучайныйИндекс = НагрузочноеТестированиеКлиент.СлучайноеЧислоСразу(0, Шаблоны.Количество() - 1);
				ТекущаяСтрока = Шаблоны[СлучайныйИндекс].ПолучитьИдентификатор();
			КонецЕсли;
		Иначе
			
			ИндексЭлемента = НагрузочноеТестированиеКлиент.СлучайноеЧислоСразу(0, Шаблоны.Количество() - 1);
			ТекущаяСтрока = Шаблоны[ИндексЭлемента].ПолучитьИдентификатор();
			
		КонецЕсли;
		
		Если ТекущаяСтрока = Неопределено Тогда
			Возврат ЗавершитьВыполнениеСценарияСОшибкой(Текст_НеУдалосьВыбратьШаблонДокумента(), Шаг.Действие);
		КонецЕсли;
		
		Форма.Элементы[ИмяПоляШаблонов].ТекущаяСтрока = ТекущаяСтрока;
		Возврат Истина;
		
	КонецФункции
	
	// Вызывает обработчик поля формы. Иногда требуется для некоторых полей при заполнении, чтоб заполнить связанные
	// реквизиты в этом или других объектах (например документ Корреспонденция для справочника ДокументыПредприятия.
	// При передаче имени команды префикс "НТ_" указывать не нужно.
	// Параметры шага:
	//  * ИмяФормы - Строка - Имя формы.
	//  * ИмяОбработчика - Строка - Имя обработчика, например КонтрагентПриИзменении
	//  * ИгнорироватьНевыполнение - Булево - Есть задан этот параметр, то невыполнение команды не прерывает сценарий 
	// 										  и не выдает ошибку. Тестирование идет дальше.
	//  * ИгнорироватьОтсутствиеФормы - Булево - Если задан этот параметр, то не выдавать ошибку и не прерывать
	//  										 сценарий, если открытая форма не найдена. Нужно для форм, которые могут
	//  										 открыться, а могут и не открыться на определенном шаге.
	//  
	// Возвращаемое значение:
	//  Булево - Истина если успешно, иначе Ложь
	Функция Действие_ВызватьОбработчикПоляФормы() Экспорт
		
		Шаг = НагрузочноеТестированиеКлиент.ТекущийШагСценария();
		
		Если Не Шаг.Параметры.Свойство("ИмяФормы") Тогда
			Возврат ЗавершитьВыполнениеСценарияСОшибкой(Текст_НеУказаноИмяФормы(), Шаг.Действие);
		КонецЕсли;
		
		Если Не Шаг.Параметры.Свойство("ИмяОбработчика") Тогда
			Возврат ЗавершитьВыполнениеСценарияСОшибкой(
				НСтр("ru = 'В параметрах шага не указано имя обработчика события формы'"), Шаг.Действие);
		КонецЕсли;
		
		Форма = ОбщегоНазначенияДокументооборотКлиент.НайтиФормуПоИмени(Шаг.Параметры.ИмяФормы);
		
		Если Форма = Неопределено Тогда
			Если Шаг.Параметры.Свойство("ИгнорироватьОтсутствиеФормы") И Шаг.Параметры.ИгнорироватьОтсутствиеФормы Тогда
				Возврат Истина; // Не смотря на отсутствие формы, сценарий идет дальше. 
			КонецЕсли;
			Возврат ЗавершитьВыполнениеСценарияСОшибкой(
				Текст_ОткрытаяФормаНеНайдена(Шаг.Параметры.ИмяФормы), Шаг.Действие);
		КонецЕсли;
		
		
		Если Не Вычислить(СтрШаблон("Форма.НТ_%1()", Шаг.Параметры.ИмяОбработчика)) Тогда
			Если Шаг.Параметры.Свойство("ИгнорироватьНевыполнение") И Шаг.Параметры.ИгнорироватьНевыполнение Тогда
				// Не смотря на ошибку, сценарий идет дальше.
			Иначе
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Обработчик события в форме ""%1"" - ""%2"" завершился ошибкой.'"), 
					Шаг.Параметры.ИмяФормы,
					Шаг.Параметры.ИмяОбработчика);
				Возврат ЗавершитьВыполнениеСценарияСОшибкой(ТекстОшибки, Шаг.Действие);
			КонецЕсли;
		КонецЕсли;
		Возврат Истина;
		
	КонецФункции
	
	// Выполняет команду открытой формы.
	// При передаче имени команды префикс "НТ_" указывать не нужно.
	// Параметры шага:
	//  * ИмяФормы - Строка - Имя ранее открытой формы.
	//  * ИмяКоманды - Строка - Имя экспортной функции формы с префиксом "НТ_".
	//  * Реквизиты - Соответствие - Необязательный параметр, не для всех команд нужен. 
	// 								 Соответствия реквизитов формы и их значений. Реквизиты должны быть заполнены
	// 								 перед вызовом команды.
	//  * ИгнорироватьНевыполнение - Булево - Есть задан этот параметр, то невыполнение команды не прерывает сценарий 
	//  									  и не выдает ошибку. Тестирование идет дальше.
	//  * ИгнорироватьОтсутствиеФормы - Булево - Если задан этот параметр, то не выдавать ошибку и не прерывать
	//  										 сценарий, если открытая форма не найдена. Нужно для форм, которые могут
	//  										 открыться, а могут и не открыться на определенном шаге.
	// 
	// Возвращаемое значение:
	//  Булево - Истина если успешно, иначе Ложь
	Функция Действие_ВыполнитьКомандуФормы() Экспорт
		
		Шаг = НагрузочноеТестированиеКлиент.ТекущийШагСценария();
		
		Если Не ЗначениеЗаполнено(Шаг.Параметры) Или Не Шаг.Параметры.Свойство("ИмяФормы") Тогда
			Возврат ЗавершитьВыполнениеСценарияСОшибкой(Текст_НеУказаноИмяФормы(), Шаг.Действие);
		КонецЕсли;
		
		Форма = ОбщегоНазначенияДокументооборотКлиент.НайтиФормуПоИмени(Шаг.Параметры.ИмяФормы);
		
		Если Форма = Неопределено Тогда
			Если Шаг.Параметры.Свойство("ИгнорироватьОтсутствиеФормы") И Шаг.Параметры.ИгнорироватьОтсутствиеФормы Тогда
				Возврат Истина; // Не смотря на отсутствие формы, сценарий идет дальше. 
			КонецЕсли;
			Возврат ЗавершитьВыполнениеСценарияСОшибкой(
				Текст_ОткрытаяФормаНеНайдена(Шаг.Параметры.ИмяФормы), Шаг.Действие);
		КонецЕсли;
		
		Если Шаг.Параметры.Свойство("Реквизиты") Тогда
			ЗаполнитьРеквизитыФормы(Форма, Шаг.Параметры.Реквизиты);
		КонецЕсли;
		Если Не Шаг.Параметры.Свойство("ИмяКоманды") Тогда
			Возврат ЗавершитьВыполнениеСценарияСОшибкой(
				НСтр("ru = 'В параметрах шага не указано имя выполняемой команды формы'"), Шаг.Действие);
		КонецЕсли;
		
		
		Если Не Вычислить(СтрШаблон("Форма.НТ_%1()", Шаг.Параметры.ИмяКоманды)) Тогда
			Если Шаг.Параметры.Свойство("ИгнорироватьНевыполнение") И Шаг.Параметры.ИгнорироватьНевыполнение Тогда
				// Не смотря на ошибку, сценарий идет дальше.
			Иначе
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Команда формы ""%1"" - ""%2"" завершилась ошибкой.'"), 
					Шаг.Параметры.ИмяФормы,
					Шаг.Параметры.ИмяКоманды);
				Возврат ЗавершитьВыполнениеСценарияСОшибкой(ТекстОшибки, Шаг.Действие);
			КонецЕсли;
		КонецЕсли;
		Возврат Истина;
		
	КонецФункции
	
	// Закрывает форму.
	// Параметры шага:
	//  * ИмяФормы - Строка - Имя закрываемой формы.
	//
	// Возвращаемое значение:
	//  Булево - Истина если успешно, иначе Ложь
	Функция Действие_ЗакрытьФорму() Экспорт
		
		Шаг = НагрузочноеТестированиеКлиент.ТекущийШагСценария();
		
		Если Не Шаг.Параметры.Свойство("ИмяФормы") Тогда
			Возврат ЗавершитьВыполнениеСценарияСОшибкой(Текст_НеУказаноИмяФормы(), Шаг.Действие);
		КонецЕсли;
		
		Форма = ОбщегоНазначенияДокументооборотКлиент.НайтиФормуПоИмени(Шаг.Параметры.ИмяФормы);
		Если Форма = Неопределено Тогда
			Возврат ЗавершитьВыполнениеСценарияСОшибкой(
				Текст_ОткрытаяФормаНеНайдена(Шаг.Параметры.ИмяФормы), Шаг.Действие);
		КонецЕсли;
		
		Форма.Закрыть();
		
		Возврат Истина;
		
	КонецФункции
	
	// Заполняет реквизиты формы и объекта формы.
	// Параметры шага:
	//  * ИмяФормы - Строка - Имя формы.
	//  * Реквизиты - Соответствие Из КлючИЗначение - Реквизиты формы:
	//  ** Ключ - Строка
	//  ** Значение - Произвольный - Значение реквизита
	//  * ИгнорироватьОтсутствиеФормы - Булево - Если задан этот параметр, то не выдавать ошибку и не прерывать
	//  										 сценарий, если открытая форма не найдена. Нужно для форм, которые могут
	//  										 открыться, а могут и не открыться на определенном шаге.
	//
	// Возвращаемое значение:
	//  Булево - Истина если успешно, иначе Ложь
	Функция Действие_ЗаполнитьРеквизитыФормы() Экспорт
		
		Шаг = НагрузочноеТестированиеКлиент.ТекущийШагСценария();
		
		Если Не Шаг.Параметры.Свойство("ИмяФормы") Тогда
			Возврат ЗавершитьВыполнениеСценарияСОшибкой(Текст_НеУказаноИмяФормы(), Шаг.Действие);
		КонецЕсли;
		
		Форма = ОбщегоНазначенияДокументооборотКлиент.НайтиФормуПоИмени(Шаг.Параметры.ИмяФормы);
		Если Форма = Неопределено Тогда
			Если Шаг.Параметры.Свойство("ИгнорироватьОтсутствиеФормы") И Шаг.Параметры.ИгнорироватьОтсутствиеФормы Тогда
				Возврат Истина; // Не смотря на отсутствие формы, сценарий идет дальше. 
			КонецЕсли;
			Возврат ЗавершитьВыполнениеСценарияСОшибкой(
				Текст_ОткрытаяФормаНеНайдена(Шаг.Параметры.ИмяФормы), Шаг.Действие);
		КонецЕсли;
		
		Если Шаг.Параметры.Свойство("Реквизиты") Тогда
			ЗаполнитьРеквизитыФормы(Форма, Шаг.Параметры.Реквизиты);
		КонецЕсли;
		
		Возврат Истина;
		
	КонецФункции
	
	// Открывает форму.
	// Параметры шага:
	//  * ИмяФормы - Строка - Имя формы.
	//  * ПараметрыФормы - Структура - Параметры открываемой формы.
	//  * ЗакрытьОткрытуюФорму - Булево - перед открытием проверить, если есть эта же открытая форма, то сначала
	//  								  закрыть ее.
	// 
	// Возвращаемое значение:
	//  Булево - Истина если успешно, иначе Ложь
	Функция Действие_ОткрытьФорму() Экспорт
		
		Шаг = НагрузочноеТестированиеКлиент.ТекущийШагСценария();
		
		Если Не Шаг.Параметры.Свойство("ИмяФормы") Тогда
			Возврат ЗавершитьВыполнениеСценарияСОшибкой(Текст_НеУказаноИмяФормы(), Шаг.Действие);
		КонецЕсли;
		
		Форма = ОбщегоНазначенияДокументооборотКлиент.НайтиФормуПоИмени(Шаг.Параметры.ИмяФормы);
		
		Если Форма <> Неопределено Тогда
			Если Шаг.Параметры.Свойство("ЗакрытьОткрытуюФорму") И Шаг.Параметры.ЗакрытьОткрытуюФорму Тогда
				Форма.Закрыть();
			Иначе
				Возврат Истина; // Форма найдена, она уже открыта, ничего делать не надо.
			КонецЕсли;
		КонецЕсли;
		
		// Открытой формы нет, открываем новую:
		ПараметрыФормы = Новый Структура();
		Если Шаг.Параметры.Свойство("ПараметрыФормы") И ТипЗнч(Шаг.Параметры.ПараметрыФормы) = Тип("Структура") Тогда
			ПараметрыФормы = Шаг.Параметры.ПараметрыФормы;
		КонецЕсли;
		
		ОткрытьФорму(Шаг.Параметры.ИмяФормы, ПараметрыФормы);
		
		Возврат Истина;
		
	КонецФункции
	
	// Переключается в форме на другой элемент (например переходит на нужную закладку).
	// Параметры шага:
	//  * ИмяФормы - Строка - Имя формы.
	//  * ТекущийЭлемент - Строка - имя элемента формы (закладки), на который надо переключиться.
	// 
	// Возвращаемое значение:
	//  Булево - Истина если успешно, иначе Ложь
	Функция Действие_ПереключитьТекущийЭлемент() Экспорт
		
		Шаг = НагрузочноеТестированиеКлиент.ТекущийШагСценария();
		
		Если Не Шаг.Параметры.Свойство("ИмяФормы") Или Не Шаг.Параметры.Свойство("ТекущийЭлемент") Тогда
			Возврат ЗавершитьВыполнениеСценарияСОшибкой(Текст_НеУказаноИмяФормы(), Шаг.Действие);
		КонецЕсли;
		Если Не Шаг.Параметры.Свойство("ТекущийЭлемент") Тогда
			Возврат ЗавершитьВыполнениеСценарияСОшибкой(
				НСтр("ru = 'В параметрах шага не указано имя текущего элемента формы'"), Шаг.Действие);
		КонецЕсли;
		
		Форма = ОбщегоНазначенияДокументооборотКлиент.НайтиФормуПоИмени(Шаг.Параметры.ИмяФормы);
		Если Форма = Неопределено Тогда
			Возврат ЗавершитьВыполнениеСценарияСОшибкой(
				Текст_ОткрытаяФормаНеНайдена(Шаг.Параметры.ИмяФормы), Шаг.Действие);
		КонецЕсли;
		
		Форма.ТекущийЭлемент = Форма.Элементы[Шаг.Параметры.ТекущийЭлемент];
		
		Возврат Истина;
		
	КонецФункции
	
	#Область РаботаСКарточкойДействияУчастников
		
		// Шаг 1. В форме документа предприятия в дереве действий ищется первое действие и открывается его карточка,
		// имитируя выбор (двойной клик) по колонке "Действия".
		// Параметры шага:
		// - Нет.
		// 
		// Возвращаемое значение:
		//  Булево - Истина если успешно, иначе Ложь
		Функция Действие_ОткрытьПервоеДействиеУчастника() Экспорт
			
			Шаг = НагрузочноеТестированиеКлиент.ТекущийШагСценария();
			
			Форма = ОбщегоНазначенияДокументооборотКлиент.НайтиФормуПоИмени(
				"Справочник.ДокументыПредприятия.Форма.ФормаЭлемента");
			Если Форма = Неопределено Тогда
				Возврат ЗавершитьВыполнениеСценарияСОшибкой(
					Текст_ОткрытаяФормаНеНайдена("Справочник.ДокументыПредприятия.Форма.ФормаЭлемента"), Шаг.Действие);
			КонецЕсли;
			
			// Обход до первой подходящей строки:
			ДействиеУчастника = НайтиДействиеУчастникаРекурсивно(Форма.Действия.ПолучитьЭлементы());
			
			Если ДействиеУчастника = Неопределено Тогда
				// не нашлось ни одной подходящей строки, где можно выбрать участника. Но не считаем это ошибкой, 
				// Открытие формы и выбор участника пропускается, сценарий идет дальше:
				Возврат Истина;
			КонецЕсли;
			
			// Открытие карточки действия нужного типа:
			// (аналогично, как она открывается "по-настоящему", См. ДействияКлиент.ОткрытьКарточкуДействия).
			// кроме "согласования в режиме замечаний", это в настоящее время не поддерживается.
			ИмяСправочника = ДействияВызовСервера.ИмяСправочникаПоВидуИДействию(
				Неопределено, ДействиеУчастника);
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("Ключ", ДействиеУчастника);
			ПараметрыФормы.Вставить("ТолькоПросмотр", Ложь);
			ПараметрыФормы.Вставить("ОткрытьКарточкуДействия", Истина);
			ОткрытьФорму(
				"Справочник." + ИмяСправочника +".ФормаОбъекта",
				ПараметрыФормы, Форма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Возврат Истина;
			
		КонецФункции
		
		// Шаг 2. Ищет форму действия участников, перебирая все возможные типы действий. В найденной формы, в
		// зависимости от ее типа ищет в дереве участников первого участника и меняет его на случайного. Если не
		// находит, то добавляет случайного участника (кроме некоторых случаев).
		// Параметры шага:
		//  * Участник - СправочникСсылка.Сотрудники - Сотрудник, которого нужно выбрать в форме
		//  * ИгнорироватьНевыполнение - Булево - Есть задан этот параметр, то невыполнение команды не прерывает
		//  									  сценарий и не выдает ошибку. Тестирование идет дальше.
		//  * ИгнорироватьОтсутствиеФормы - Булево - Если задан этот параметр, то не выдавать ошибку и не прерывать тест
		//
		// Возвращаемое значение:
		//  Булево - Истина если успешно, иначе Ложь
		Функция Действие_ВыбратьУчастникаВФормуДействия() Экспорт
			
			Шаг = НагрузочноеТестированиеКлиент.ТекущийШагСценария();
			
			Форма = НайтиФормуДействияУчастников();
			Если Форма = Неопределено Тогда
				Если Шаг.Параметры.Свойство("ИгнорироватьОтсутствиеФормы")
					И Шаг.Параметры.ИгнорироватьОтсутствиеФормы Тогда
					Возврат Истина; // Не смотря на отсутствие формы, сценарий идет дальше. 
				КонецЕсли;
				Возврат ЗавершитьВыполнениеСценарияСОшибкой(
					Текст_ОткрытаяФормаНеНайдена(Текст_ОФормеДействияУчастников()), Шаг.Действие);
			КонецЕсли;
			
			// Перебор всех возможных типов действий:
			Объект = Форма.Объект;
			УдалосьВставить = Ложь;
			Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ДействияИсполнения") Тогда
				
				УдалосьВставить = Исполнение_ВставитьУчастникаРекурсивно(
					Форма.Участники.ПолучитьЭлементы(), Шаг.Параметры.Участник);
				
			ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
				
				УдалосьВставить = Ознакомление_ВставитьУчастникаРекурсивно(
					Форма.Участники.ПолучитьЭлементы(), Шаг.Параметры.Участник);
				
			ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ДействияПодписания") Тогда
				
				УдалосьВставить = Подписание_ВставитьУчастникаРекурсивно(
					Форма.Участники.ПолучитьЭлементы(), Шаг.Параметры.Участник);
				
			ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ДействияРегистрации") Тогда
				
				УдалосьВставить = Регистрация_ВставитьУчастникаРекурсивно(
					Форма.Участники.ПолучитьЭлементы(), Шаг.Параметры.Участник);
				
			ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ДействияСогласования") Тогда
				
				УдалосьВставить = Согласование_ВставитьУчастникаРекурсивно(
					Форма.Участники.ПолучитьЭлементы(), Шаг.Параметры.Участник);
				
			ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.ДействияУтверждения") Тогда
				
				УдалосьВставить = Утверждение_ВставитьУчастникаРекурсивно(
					Форма.Участники.ПолучитьЭлементы(), Шаг.Параметры.Участник);
				
			КонецЕсли;
			Если УдалосьВставить Тогда
				Форма.Модифицированность = Истина;
				
				// Развернуть дерево, иначе даже не видно, что вставляется участник. Во всех формах действий
				// нужные элементы и реквизиты называются одинаково:
				Для Каждого СтрокаДерева Из Форма.Участники.ПолучитьЭлементы() Цикл
					Если СтрокаДерева.ЭтоЭтап Тогда
						Форма.Элементы.Участники.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			// (Если не удалось вставить - ошибкой тоже не считаем, могут быть такие ситуации.)
			
			Возврат Истина;
			
		КонецФункции
		
		// Шаг 3. Ищет открытую форму действия участников, перебирая все возможные типы действий. В найденной форме
		// нажимает кнопку "Готово".
		// Параметры шага:
		//  * ИгнорироватьНевыполнение - Булево - Есть задан этот параметр, то невыполнение команды не прерывает
		//  									  сценарий и не выдает ошибку. Тестирование идет дальше.
		//  * ИгнорироватьОтсутствиеФормы - Булево - Если задан этот параметр, то не выдавать ошибку и не прерывать
		//
		// Возвращаемое значение:
		//  Булево - Истина если успешно, иначе Ложь
		Функция Действие_ЗаписатьИЗакрытьФормуДействия() Экспорт
	
			Шаг = НагрузочноеТестированиеКлиент.ТекущийШагСценария();
			
			Форма = НайтиФормуДействияУчастников();
			Если Форма = Неопределено Тогда
				Если Шаг.Параметры.Свойство("ИгнорироватьОтсутствиеФормы")
					И Шаг.Параметры.ИгнорироватьОтсутствиеФормы Тогда
					Возврат Истина; // Не смотря на отсутствие формы, сценарий идет дальше. 
				КонецЕсли;
				Возврат ЗавершитьВыполнениеСценарияСОшибкой(
					Текст_ОткрытаяФормаНеНайдена(Текст_ОФормеДействияУчастников()), Шаг.Действие);
			КонецЕсли;
			
			
			// Имитация того же, что делаются во всех типах действий, сначала записать, потом закрыть с признаком ОК:
			Если Не Форма.Записать() Тогда
				Если Шаг.Параметры.Свойство("ИгнорироватьНевыполнение") И Шаг.Параметры.ИгнорироватьНевыполнение Тогда
					// Что-то пошло не так, но сценарий идет дальше:
					Форма.Закрыть(КодВозвратаДиалога.Отмена);
					Возврат Истина;
				Иначе
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Не удалось выполнить команду ""Готово"" в форме %1'"),
						Текст_ОФормеДействияУчастников());
					Возврат ЗавершитьВыполнениеСценарияСОшибкой(ТекстОшибки, Шаг.Действие);
				КонецЕсли;
			КонецЕсли;
			
			Форма.Закрыть(КодВозвратаДиалога.ОК);
			Возврат Истина;
			
		КонецФункции
		
	#КонецОбласти
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
	
	// Завершает выполнение сценария с выводом ошибки.
	//
	// Параметры:
	//  ТекстОшибки - Строка - Текст ошибки.
	//  ДействиеШага - Строка - Если заполнено, будет добавлено к сообщению об ошибке, для локализации места ошибки
	// 
	// Возвращаемое значение:
	//  Булево - Всегда Ложь.
	Функция ЗавершитьВыполнениеСценарияСОшибкой(ТекстОшибки, ДействиеШага)
		
		НагрузочноеТестированиеВызовСервера.ЗаписьВЖурналОРезультате(
			Истина,
			СтрШаблон(НСтр("ru = '%1. Шаг сценария ""%2""'"), ТекстОшибки, ДействиеШага));
		Возврат Ложь;
		
	КонецФункции
	
	// Заполняет реквизиты формы и объекта формы.
	//
	// Параметры:
	//  Форма - ФормаКлиентскогоПриложения - Форма, реквизиты которой необходимо заполнить, возможные поля:
	//  * Объект - ДанныеФормыСтруктура
	//  Реквизиты - Соответствие Из КлючИЗначение - Реквизиты формы:
	//  * Ключ - Строка
	//  * Значение - Произвольный - Значение реквизита
	Процедура ЗаполнитьРеквизитыФормы(Форма, Реквизиты)
		
		ОбъектСРеквизитом = Неопределено;
		ОбъектСТочкой = "Объект.";
		ДлинаОбъектаСТочкой = СтрДлина(ОбъектСТочкой);
		Для Каждого Реквизит Из Реквизиты Цикл
			
			ИмяРеквизита = Реквизит.Ключ;
			ЗначениеРеквизита = Реквизит.Значение;
			
			ЭтоРеквизитОбъекта = СтрНачинаетсяС(ИмяРеквизита, ОбъектСТочкой);
			Если ЭтоРеквизитОбъекта Тогда
				ИмяРеквизита = Сред(ИмяРеквизита, ДлинаОбъектаСТочкой + 1);
			КонецЕсли;
			
			// "*" в конце имени реквизита - признак, что надо перезаписать, если даже заполнен:
			ЭтоПерезаписьЗначения = СтрЗаканчиваетсяНа(ИмяРеквизита, "*");
			Если ЭтоПерезаписьЗначения Тогда
				ИмяРеквизита = СтрЗаменить(ИмяРеквизита, "*", "");
			КонецЕсли;
			
			Если ЭтоРеквизитОбъекта Тогда
				ОбъектСРеквизитом = Форма.Объект;
			Иначе // Реквизит формы
				ОбъектСРеквизитом = Форма;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОбъектСРеквизитом[ИмяРеквизита]) И Не ЭтоПерезаписьЗначения Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ЗначениеРеквизита) = Тип("Массив") Тогда
				ОбъектСРеквизитом[ИмяРеквизита].Очистить();
				Для Каждого ЭлементМассива Из ЗначениеРеквизита Цикл
					НоваяСтрока = ОбъектСРеквизитом[ИмяРеквизита].Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементМассива);
				КонецЦикла;
			Иначе
				ОбъектСРеквизитом[ИмяРеквизита] = ЗначениеРеквизита;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	#Область РаботаСКарточкамиДействияУчастников
		
		// Обход дерева действий из формы документа предприятия рекурсивно, чтобы найти нужное действие.
		// 
		// Параметры:
		//  ЭлементыДерева - ДанныеФормыКоллекцияЭлементовДерева - Строки дерева на текущем уровне
		//
		// Возвращаемое значение:
		//  Неопределено, ОпределяемыйТип.Действия - В случае нахождения .
		Функция НайтиДействиеУчастникаРекурсивно(ЭлементыДерева)
			
			Для Каждого СтрокаДействия Из ЭлементыДерева Цикл
				Если СтрокаДействия.ЭтоДействие И ЗначениеЗаполнено(СтрокаДействия.Действие)
					И Не СтрокаДействия.ЭтоПодзадача Тогда
					Возврат СтрокаДействия.Действие; // Нашли.
				КонецЕсли;
				
				Возврат НайтиДействиеУчастникаРекурсивно(СтрокаДействия.ПолучитьЭлементы())
			КонецЦикла;
			
			Возврат Неопределено;
			
		КонецФункции
		
		// Среди открытых форм ищет любую форму действия участников бизнес-процесса. По сценарию одновременно может быть
		// открыта только одна форма и один документ, поэтому она и будет единственно верной.
		//
		// Возвращаемое значение:
		//  ФормаКлиентскогоПриложения, Неопределено -
		Функция НайтиФормуДействияУчастников()
			
			// Перебор всех возможных типов действий:
			ИменаСправочников = Новый Массив();
			ИменаСправочников.Добавить("ДействияИсполнения");
			ИменаСправочников.Добавить("ДействияОзнакомления");
			ИменаСправочников.Добавить("ДействияПодписания");
			ИменаСправочников.Добавить("ДействияРегистрации");
			ИменаСправочников.Добавить("ДействияСогласования");
			ИменаСправочников.Добавить("ДействияУтверждения");
			Для Каждого ИмяСправочника Из ИменаСправочников Цикл
				Форма = ОбщегоНазначенияДокументооборотКлиент.НайтиФормуПоИмени(
					СтрШаблон("Справочник.%1.Форма.ФормаЭлемента", ИмяСправочника));
				Если Форма = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Возврат Форма;
			КонецЦикла;
			
			Возврат Неопределено;
			
		КонецФункции
		
		// Исполнение - вставить участника рекурсивно.
		// 
		// Параметры:
		//  ЭлементыДерева - ДанныеФормыКоллекцияЭлементовДерева - Строки дерева на текущем уровне
		//  Участник - СправочникСсылка.Сотрудники - Участник
		// 
		// Возвращаемое значение:
		//  Булево - Удалось вставить или нет.
		Функция Исполнение_ВставитьУчастникаРекурсивно(ЭлементыДерева, Участник)
			
			Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
				Если СтрокаДерева.ЭтоЭтап
					И (
						СтрокаДерева.Функция = ПредопределенноеЗначение(
							"Перечисление.ФункцииУчастниковИсполнения.Исполнитель")
						Или СтрокаДерева.Функция = ПредопределенноеЗначение(
							"Перечисление.ФункцииУчастниковИсполнения.Рассматривающий")
					) Тогда
					
					ПодчиненныеЭлементы = СтрокаДерева.ПолучитьЭлементы();
					Если ПодчиненныеЭлементы.Количество() = 0 Тогда
						// В этапе нет ни одного участника, создаем нового:
						СтрокаУчастника = ПодчиненныеЭлементы.Добавить();
						СтрокаУчастника.Участник = Участник;
						СтрокаУчастника.Идентификатор = Новый УникальныйИдентификатор();
						СтрокаУчастника.ВариантУстановкиСрока = ПредопределенноеЗначение(
							"Перечисление.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок");
						СтрокаУчастника.Функция = СтрокаДерева.Функция;
						СтрокаУчастника.ПредставлениеСтроки	= "" + Участник;
						СтрокаУчастника.Состояние = СтрокаДерева.Состояние;
						СтрокаУчастника.Защищенный = Истина;
						СтрокаУчастника.НаименованиеЗадачи = Текст_АвтоназваниеЗадачи();
						Возврат Истина;
					Иначе
						// заменяем в первом подходящем среди подчиненных:
						Возврат Исполнение_ВставитьУчастникаРекурсивно(ПодчиненныеЭлементы, Участник);
					КонецЕсли;
					
				ИначеЕсли Не СтрокаДерева.ЭтоЭтап И ЗначениеЗаполнено(СтрокаДерева.Участник) 
					И СтрокаДерева.Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.Завершено")
					И Не СтрокаДерева.Защищенный Тогда
					
					// Это участник, заменяем его на "нашего":
					СтрокаДерева.Участник = Участник;
					СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
					Если СтрокаРодитель = Неопределено Или Не ЗначениеЗаполнено(СтрокаРодитель.Функция) Тогда
						СтрокаДерева.Функция = ПредопределенноеЗначение(
							"Перечисление.ФункцииУчастниковИсполнения.Исполнитель");
					Иначе
						СтрокаДерева.Функция = СтрокаРодитель.Функция;
					КонецЕсли;
					СтрокаДерева.ПредставлениеСтроки = "" + Участник;
					СтрокаДерева.Защищенный = Истина;
					СтрокаДерева.НаименованиеЗадачи = Текст_АвтоназваниеЗадачи();
					Возврат Истина;
					
				КонецЕсли;
			КонецЦикла;
			
			Возврат Ложь;
			
		КонецФункции
		
		// Ознакомление - вставить участника рекурсивно.
		// 
		// Параметры:
		//  ЭлементыДерева - ДанныеФормыКоллекцияЭлементовДерева - Строки дерева на текущем уровне
		//  Участник - СправочникСсылка.Сотрудники - Участник
		// 
		// Возвращаемое значение:
		//  Булево - Удалось вставить или нет.
		Функция Ознакомление_ВставитьУчастникаРекурсивно(ЭлементыДерева, Участник)
			
			Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
				Если СтрокаДерева.ЭтоЭтап Тогда
					
					ПодчиненныеЭлементы = СтрокаДерева.ПолучитьЭлементы();
					Если ПодчиненныеЭлементы.Количество() = 0 Тогда
						// В этапе нет ни одного участника, создаем нового:
						СтрокаУчастника = ПодчиненныеЭлементы.Добавить();
						СтрокаУчастника.Участник = Участник;
						СтрокаУчастника.Идентификатор = Новый УникальныйИдентификатор();
						СтрокаУчастника.ВариантУстановкиСрока = ПредопределенноеЗначение(
							"Перечисление.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок");
						СтрокаУчастника.Функция = СтрокаДерева.Функция;
						СтрокаУчастника.ПредставлениеСтроки	= "" + Участник;
						СтрокаУчастника.Состояние = СтрокаДерева.Состояние;
						СтрокаУчастника.Защищенный = Истина;
						СтрокаУчастника.Описание = Текст_АвтоназваниеЗадачи();
						Возврат Истина;
					Иначе
						// заменяем в первом подходящем среди подчиненных:
						Возврат Ознакомление_ВставитьУчастникаРекурсивно(ПодчиненныеЭлементы, Участник);
					КонецЕсли;
					
				ИначеЕсли Не СтрокаДерева.ЭтоЭтап И ЗначениеЗаполнено(СтрокаДерева.Участник) 
					И СтрокаДерева.Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.Завершено")
					И Не СтрокаДерева.Защищенный Тогда
					
					// Это участник, заменяем его на "нашего":
					СтрокаДерева.Участник = Участник;
					СтрокаДерева.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковОзнакомления.Ознакомляемый");
					СтрокаДерева.ПредставлениеСтроки = "" + Участник;
					СтрокаДерева.Защищенный = Истина;
					СтрокаДерева.Описание = Текст_АвтоназваниеЗадачи();
					Возврат Истина;
					
				КонецЕсли;
			КонецЦикла;
			
			Возврат Ложь;
			
		КонецФункции
		
		// Подписание - вставить участника рекурсивно.
		// 
		// Параметры:
		//  ЭлементыДерева - ДанныеФормыКоллекцияЭлементовДерева - Строки дерева на текущем уровне
		//  Участник - СправочникСсылка.Сотрудники - Участник
		// 
		// Возвращаемое значение:
		//  Булево - Удалось вставить или нет.
		Функция Подписание_ВставитьУчастникаРекурсивно(ЭлементыДерева, Участник)
			
			Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
				Если СтрокаДерева.ЭтоЭтап
					И СтрокаДерева.Функция = ПредопределенноеЗначение(
						"Перечисление.ФункцииУчастниковПодписания.Подписывающий") Тогда
					
					ПодчиненныеЭлементы = СтрокаДерева.ПолучитьЭлементы();
					Если ПодчиненныеЭлементы.Количество() = 0 Тогда
						// В этапе нет ни одного участника, создаем нового:
						СтрокаУчастника = ПодчиненныеЭлементы.Добавить();
						СтрокаУчастника.Участник = Участник;
						СтрокаУчастника.Идентификатор = Новый УникальныйИдентификатор();
						СтрокаУчастника.ВариантУстановкиСрока = ПредопределенноеЗначение(
							"Перечисление.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок");
						СтрокаУчастника.Функция = СтрокаДерева.Функция;
						СтрокаУчастника.РазрешеноДобавлять = СтрокаДерева.РазрешеноДобавлять;
						СтрокаУчастника.ПредставлениеСтроки	= "" + Участник;
						СтрокаУчастника.Защищенный = Истина;
						СтрокаУчастника.НаименованиеЗадачи = Текст_АвтоназваниеЗадачи();
						Возврат Истина;
					Иначе
						// заменяем в первом подходящем среди подчиненных:
						Возврат Подписание_ВставитьУчастникаРекурсивно(ПодчиненныеЭлементы, Участник);
					КонецЕсли;
					
				ИначеЕсли Не СтрокаДерева.ЭтоЭтап И ЗначениеЗаполнено(СтрокаДерева.Участник) 
					И СтрокаДерева.Состояние <> ПредопределенноеЗначение(
						"Перечисление.СостоянияВыполненияДействий.Завершено")
					И Не СтрокаДерева.Защищенный Тогда
					
					// Это участник, заменяем его на "нашего":
					СтрокаДерева.Участник = Участник;
					СтрокаДерева.Функция = ПредопределенноеЗначение(
						"Перечисление.ФункцииУчастниковПодписания.Подписывающий");
					СтрокаДерева.ПредставлениеСтроки = "" + Участник;
					СтрокаДерева.Защищенный = Истина;
					СтрокаДерева.НаименованиеЗадачи = Текст_АвтоназваниеЗадачи();
					Возврат Истина;
					
				КонецЕсли;
			КонецЦикла;
			
			Возврат Ложь;
			
		КонецФункции
		
		// Регистрация - заменить участника рекурсивно. 
		// 
		// Параметры:
		//  ЭлементыДерева - ДанныеФормыКоллекцияЭлементовДерева - Строки дерева на текущем уровне
		//  Участник - СправочникСсылка.Сотрудники - Участник
		// 
		// Возвращаемое значение:
		//  Булево - Удалось вставить или нет.
		Функция Регистрация_ВставитьУчастникаРекурсивно(ЭлементыДерева, Участник)
			
			Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
				Если СтрокаДерева.ЭтоЭтап
					И СтрокаДерева.Функция = ПредопределенноеЗначение(
						"Перечисление.ФункцииУчастниковРегистрации.Регистратор") Тогда
					
					// В "Регистрации" в отличий от других действий можно только менять участника, добавлять нельзя.
					// заменяем в первом подходящем среди подчиненных:
					Возврат Регистрация_ВставитьУчастникаРекурсивно(СтрокаДерева.ПолучитьЭлементы(), Участник);
					
				ИначеЕсли Не СтрокаДерева.ЭтоЭтап И ЗначениеЗаполнено(СтрокаДерева.Участник) 
					И СтрокаДерева.Состояние <> ПредопределенноеЗначение(
						"Перечисление.СостоянияВыполненияДействий.Завершено")
					И Не СтрокаДерева.Защищенный Тогда
					
					// Это участник, заменяем его на "нашего":
					СтрокаДерева.Участник = Участник;
					СтрокаДерева.Функция = ПредопределенноеЗначение(
						"Перечисление.ФункцииУчастниковРегистрации.Регистратор");
					СтрокаДерева.ПредставлениеСтроки = "" + Участник;
					Возврат Истина;
					
				КонецЕсли;
			КонецЦикла;
			
			Возврат Ложь;
			
		КонецФункции
		
		// Согласование - вставить участника рекурсивно.
		// 
		// Параметры:
		//  ЭлементыДерева - ДанныеФормыКоллекцияЭлементовДерева - Строки дерева на текущем уровне
		//  Участник - СправочникСсылка.Сотрудники - Участник
		// 
		// Возвращаемое значение:
		//  Булево - Удалось вставить или нет.
		Функция Согласование_ВставитьУчастникаРекурсивно(ЭлементыДерева, Участник)
			
			Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
				Если СтрокаДерева.ЭтоЭтап 
					И СтрокаДерева.Функция = ПредопределенноеЗначение(
						"Перечисление.ФункцииУчастниковСогласования.Согласующий") Тогда
					
					ПодчиненныеЭлементы = СтрокаДерева.ПолучитьЭлементы();
					Если ПодчиненныеЭлементы.Количество() = 0 Тогда
						// В этапе нет ни одного участника, создаем нового:
						СтрокаУчастника = ПодчиненныеЭлементы.Добавить();
						СтрокаУчастника.Участник = Участник;
						СтрокаУчастника.Идентификатор = Новый УникальныйИдентификатор();
						СтрокаУчастника.ВариантУстановкиСрока = ПредопределенноеЗначение(
							"Перечисление.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок");
						СтрокаУчастника.Функция = СтрокаДерева.Функция;
						СтрокаУчастника.РазрешеноДобавлять = СтрокаДерева.РазрешеноДобавлять;
						СтрокаУчастника.ПредставлениеСтроки	= "" + Участник;
						СтрокаУчастника.Защищенный = Истина;
						СтрокаУчастника.НаименованиеЗадачи = Текст_АвтоназваниеЗадачи();
						Возврат Истина;
					Иначе
						// заменяем в первом подходящем среди подчиненных:
						Возврат Согласование_ВставитьУчастникаРекурсивно(ПодчиненныеЭлементы, Участник);
					КонецЕсли;
					
				ИначеЕсли Не СтрокаДерева.ЭтоЭтап И ЗначениеЗаполнено(СтрокаДерева.Участник)
					И СтрокаДерева.Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.Завершено")
					И Не СтрокаДерева.Защищенный Тогда
					
					// Это участник, заменяем его на "нашего":
					СтрокаДерева.Участник = Участник;
					СтрокаДерева.Функция = ПредопределенноеЗначение(
						"Перечисление.ФункцииУчастниковСогласования.Согласующий");
					СтрокаДерева.ПредставлениеСтроки = "" + Участник;
					СтрокаДерева.Защищенный = Истина;
					СтрокаДерева.НаименованиеЗадачи = Текст_АвтоназваниеЗадачи();
					Возврат Истина;
					
				КонецЕсли;
			КонецЦикла;
			
			Возврат Ложь;
			
		КонецФункции
		
		// Утверждение - заменить участника рекурсивно. 
		// 
		// Параметры:
		//  ЭлементыДерева - ДанныеФормыКоллекцияЭлементовДерева - Строки дерева на текущем уровне
		//  Участник - СправочникСсылка.Сотрудники - Участник
		// 
		// Возвращаемое значение:
		//  Булево - Удалось вставить или нет.
		Функция Утверждение_ВставитьУчастникаРекурсивно(ЭлементыДерева, Участник)
			
			Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
				Если СтрокаДерева.ЭтоЭтап
					И СтрокаДерева.Функция = ПредопределенноеЗначение(
						"Перечисление.ФункцииУчастниковУтверждения.Утверждающий") Тогда
					
					// В "Утверждении" в отличий от других действий можно только менять участника, добавлять нельзя.
					// заменяем в первом подходящем среди подчиненных:
					Возврат Утверждение_ВставитьУчастникаРекурсивно(СтрокаДерева.ПолучитьЭлементы(), Участник);
					
				ИначеЕсли Не СтрокаДерева.ЭтоЭтап И ЗначениеЗаполнено(СтрокаДерева.Участник) 
					И СтрокаДерева.Состояние <> ПредопределенноеЗначение(
						"Перечисление.СостоянияВыполненияДействий.Завершено")
					И Не СтрокаДерева.Защищенный Тогда
					
					// Это участник, заменяем его на "нашего":
					СтрокаДерева.Участник = Участник;
					СтрокаДерева.Функция = ПредопределенноеЗначение(
						"Перечисление.ФункцииУчастниковУтверждения.Утверждающий");
					СтрокаДерева.ПредставлениеСтроки = "" + Участник;
					Возврат Истина;
					
				КонецЕсли;
			КонецЦикла;
			
			Возврат Ложь;
			
		КонецФункции
		
	#КонецОбласти
	
	// Уникальное название задачи иногда спасает от блокирующей проверки дублей участников
	Функция Текст_АвтоназваниеЗадачи()
		
		Возврат СтрШаблон(НСтр("ru = 'Автоматическое название задачи %1'"), Новый УникальныйИдентификатор());
		
	КонецФункции
	
	Функция Текст_НеУдалосьВыбратьШаблонДокумента()
		
		Возврат НСтр("ru = 'Не удалось выбрать шаблон документа'");
		
	КонецФункции
	
	Функция Текст_НеУказаноИмяФормы()
		
		Возврат НСтр("ru = 'В параметрах шага не указано имя открытой формы'");
		
	КонецФункции
	
	Функция Текст_ОткрытаяФормаНеНайдена(ИмяФормы)
		
		Возврат СтрШаблон(НСтр("ru = 'Форма %1 не найдена среди открытых'"), ИмяФормы);
		
	КонецФункции
	
	Функция Текст_ОФормеДействияУчастников()
	
		Возврат НСтр("ru = 'элемента одного из справочников действий участников'");
	
	КонецФункции
	
#КонецОбласти
