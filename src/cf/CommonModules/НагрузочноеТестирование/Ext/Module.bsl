// Содержит код получения данных для сценариев.

#Область ПрограммныйИнтерфейс

	// Случайное число сразу, обертка для быстрого получения случайных чисел.
	// 
	// Параметры:
	//  От - Число - Нижняя граница от 0 до 2^32-1
	//  До - Число - Верхняя граница от 0 до 2^32-1
	// 
	// Возвращаемое значение:
	//  Число - Случайное число в заданном диапазоне
	Функция СлучайноеЧислоСразу(От, До) Экспорт
		
		Если От >= До Тогда
			// От > До - некорректно, но не будем считать ошибкой
			Возврат От;
		КонецЕсли;
		
		ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
		Возврат ГСЧ.СлучайноеЧисло(От, До);
		
	КонецФункции
	
	// Признак, что текущий сеанс - это нагрузочное тестирование. Вызывается для обхода
	// проверок, мешающих тестированию, чтобы подавить выдачу блокирующего сообщения в некоторых нестандартных случаях.
	// Чаще всего, для подавления "ПоказатьВопрос" или "ПоказатьПредупреждение", эти окна нельзя отследить сценарием
	// теста и программно закрыть.
	// 
	// Возвращаемое значение:
	//  Булево -
	Функция ЭтоНагрузочноеТестирование() Экспорт
		
		УстановитьПривилегированныйРежим(Истина);
		Возврат ПараметрыСеанса.ЭтоНагрузочноеТестирование;
		
	КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
	
	// Формирует незаполненную структуру шага сценария и добавляет его в переданный
	// сценарий.
	//
	// Параметры:
	//  Сценарий - Массив из См. НовыйШагСценария
	//  Действие - Строка - Если задано, то сразу задается имя действия, как суффикса функции в модуле 
	//  					см. НагрузочноеТестированиеДействияКлиент
	//  Пауза - Число - В секундах. Если задано, то сразу задается длительности паузы после действия. 
	//
	// Возвращаемое значение:
	//  см. НовыйШагСценария
	Функция ДобавитьШагСценария(Сценарий, Действие = "", Пауза = 1) Экспорт
		
		НовыйШаг = НовыйШагСценария(Действие, Пауза);
		Сценарий.Добавить(НовыйШаг);
		Возврат Сценарий[Сценарий.Количество() - 1];
		
	КонецФункции
	
	// Определяет наличие элементов в справочнике с учетом РЛС.
	//
	// Параметры:
	//  ИмяСправочника - Строка - Имя справочника.
	// 
	// Возвращаемое значение:
	//  Булево - 
	//
	Функция ЕстьДоступныеЭлементыСправочника(ИмяСправочника) Экспорт
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Ссылка
			|ИЗ
			|	Справочник.%ИмяСправочника%
			|ГДЕ
			|	НЕ ПометкаУдаления";
			
		Если Метаданные.Справочники[ИмяСправочника].Иерархический
			И Метаданные.Справочники[ИмяСправочника].ВидИерархии =
				Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
			
			Запрос.Текст = СтрШаблон("%1 И НЕ ЭтоГруппа", Запрос.Текст);
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяСправочника%", ИмяСправочника);
		Возврат Не Запрос.Выполнить().Пустой();
		
	КонецФункции
	
	#Область ГенерацияСлучайныхЗначений
	
		// Возвращает случайно выбранные реквизиты документа предприятия с учетом прав доступа, для
		// дальнейшего создания документа по этим реквизитам.
		// 
		// Параметры:
		//  ТолькоСОбработкой - Булево - Если Истина, подбирать только виды документа с обработкой.
		// 
		// Возвращаемое значение:
		//  См. НовыйРеквизитыДокумента
		Функция СлучайныеРеквизитыДокумента(ТолькоСОбработкой = Ложь) Экспорт
			
			Результат = НовыйРеквизитыДокумента();
			Результат.ВидДокумента = СлучайныйВидДокумента(ТолькоСОбработкой);
			Результат.ВопросДеятельности = СлучайныйЭлементСправочника("ВопросыДеятельности");
			Результат.ГрифДоступа = СлучайныйЭлементСправочника("ГрифыДоступа");
			Результат.Организация = СлучайныйЭлементСправочника("Организации");
			Если ПолучитьФункциональнуюОпцию("ИспользоватьПапкиДокументов") Тогда
				Результат.ПапкаДокумента = СлучайныйЭлементСправочника("ПапкиДокументов");
			КонецЕсли;
			Результат.Проект = СлучайныйЭлементСправочника("Проекты");
			Результат.Контрагент = СлучайныйЭлементСправочника("Контрагенты");
		
			Возврат Результат;
			
		КонецФункции
	
		// Возвращает случайный вид документа с учетом прав доступа.
		// 
		// Параметры:
		//  СОбработкой - Булево - Выбирать только среди документов, у которых есть обработка или среди всех.
		// 
		// Возвращаемое значение:
		//  СправочникСсылка.ВидыДокументов, ОпределяемыйТип.ВидОбъектаСОбработкой - Случайный вид документа
		Функция СлучайныйВидДокумента(СОбработкой = Ложь) Экспорт
			
			Если Не СОбработкой Тогда
				Возврат СлучайныйЭлементСправочника("ВидыДокументов");
			КонецЕсли;
			
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
				|	ВидыДокументов.Ссылка КАК ВидДокумента
				|ИЗ
				|	Справочник.ВидыДокументов КАК ВидыДокументов
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
				|	Справочник.НастройкиОбработкиВидовОбъектов КАК Настройки
				|		ПО Настройки.ВидОбъекта = ВидыДокументов.Ссылка
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
				|	Справочник.НастройкиОбработкиВидовОбъектов.ВидыДействий КАК НастройкиТЧ
				|		ПО Настройки.Ссылка = НастройкиТЧ.Ссылка
				|ГДЕ
				|	Настройки.ВидОбъекта ССЫЛКА Справочник.ВидыДокументов
				|	И НЕ Настройки.ПометкаУдаления
				|	И Настройки.ДействуетС <= &ТекущаяДата
				|	И (Настройки.ДействуетПо = ДАТАВРЕМЯ(1, 1, 1)
				|	ИЛИ КОНЕЦПЕРИОДА(Настройки.ДействуетПо, ДЕНЬ) >= &ТекущаяДата)");
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
			
			Выборка = Запрос.Выполнить().Выбрать();
			КолвоЭлементов = Выборка.Количество();
			Если КолвоЭлементов = 0 Тогда
				ВызватьИсключение Текст_НетДоступногоЭлемента("ВидыДокументов");
			КонецЕсли;
			СлучайныйНомер = СлучайноеЧислоСразу(1, Выборка.Количество());
			Счетчик = 0;
			Пока Выборка.Следующий() Цикл
				Счетчик = Счетчик + 1;
				Если СлучайныйНомер = Счетчик Тогда
					Возврат Выборка.ВидДокумента;
				КонецЕсли;
			КонецЦикла;
			
		КонецФункции
		
		// Возвращает случайно выбранный элемент справочника с учетом РЛС. Если элементов
		// для выборки нет, то вернет пустую ссылку.
		//
		// Параметры:
		//  ИмяСправочника - Строка - Имя справочника, из которого необходимо получить элемент.
		// 
		// Возвращаемое значение:
		//  СправочникСсылка - Ссылка на выбранный элемент любого справочника либо пустая ссылка.
		//
		Функция СлучайныйЭлементСправочника(ИмяСправочника) Экспорт
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 500
				|	Ссылка КАК ЭлементСправочника
				|ИЗ
				|	Справочник.%ИмяСправочника% КАК Т
				|ГДЕ
				|	НЕ ПометкаУдаления");
			Если Метаданные.Справочники[ИмяСправочника].Иерархический
				И Метаданные.Справочники[ИмяСправочника].ВидИерархии =
					Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
				
				Запрос.Текст = СтрШаблон("%1 И НЕ ЭтоГруппа", Запрос.Текст);
			КонецЕсли;
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяСправочника%", ИмяСправочника);
			
			Выборка = Запрос.Выполнить().Выбрать();
			КолвоЭлементов = Выборка.Количество();
			Если КолвоЭлементов = 0 Тогда
				ВызватьИсключение Текст_НетДоступногоЭлемента(ИмяСправочника);
			КонецЕсли;
			СлучайныйНомер = СлучайноеЧислоСразу(1, Выборка.Количество());
			Счетчик = 0;
			Пока Выборка.Следующий() Цикл
				Счетчик = Счетчик + 1;
				Если СлучайныйНомер = Счетчик Тогда
					Возврат Выборка.ЭлементСправочника;
				КонецЕсли;
			КонецЦикла;
			
		КонецФункции
		
		// Получить случайный элемент массива.
		// 
		// Параметры:
		//  Массив - Массив из Произвольный -
		// 
		// Возвращаемое значение:
		//  Произвольный - Случайный элемент из массива
		Функция СлучайныйЭлементМассива(Массив) Экспорт
			
			Если Массив.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			Возврат Массив[СлучайноеЧислоСразу(0,  Массив.Количество() - 1)];
			
		КонецФункции
		
		
		// Возвращает случайно выбранный шаблон документа с учетом значений отбора.
		//
		// Параметры:
		//  РеквизитыДокумента - См. НовыйРеквизитыДокумента
		//  ТолькоСОбработкой - Булево - Выбирать только такие, в которых есть обработка документа.
		// 
		// Возвращаемое значение:
		//  СправочникСсылка.ШаблоныДокументов -
		//
		Функция СлучайныйШаблонДокумента(РеквизитыДокумента = Неопределено, ТолькоСОбработкой = Ложь) Экспорт
			
			ТекстБезОтбора =
				"//%Вставка_втВидыСОбработкой
				|
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 100
				|	Шаблоны.Ссылка КАК ШаблонДокумента,
				|	Шаблоны.ВидДокумента КАК ВидДокумента
				|ИЗ
				|	Справочник.ШаблоныДокументов КАК Шаблоны
				|	//%Вставка_Соединение_втВидыСОбработкой
				|ГДЕ
				|	НЕ Шаблоны.ПометкаУдаления
				|	И НЕ Шаблоны.ЭтоГруппа";
				
			Если ТолькоСОбработкой Тогда
				ТекстБезОтбора = СтрЗаменить(
					ТекстБезОтбора, "//%Вставка_втВидыСОбработкой", ТекстЗапроса_ПоместитьВидыДокументовСОбработкой());
				ТекстБезОтбора = СтрЗаменить(
					ТекстБезОтбора,
					"//%Вставка_Соединение_втВидыСОбработкой",
					"ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВидыСОбработкой КАК ВидыСОбработкой
					|ПО ВидыСОбработкой.ВидДокумента = Шаблоны.ВидДокумента");
			КонецЕсли;
			
			Запрос = Новый Запрос(ТекстБезОтбора);
			Если ТолькоСОбработкой Тогда
				Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
			КонецЕсли;
			
			Если ТипЗнч(РеквизитыДокумента) = Тип("Структура") Тогда
				Если РеквизитыДокумента.Свойство("ПапкаДокумента")
					И ЗначениеЗаполнено(РеквизитыДокумента.ПапкаДокумента) Тогда
					Запрос.Текст = СтрШаблон("%1 И Шаблоны.Папка = &Папка", Запрос.Текст);
					Запрос.УстановитьПараметр("Папка", РеквизитыДокумента.ПапкаДокумента);
				КонецЕсли;
				Если РеквизитыДокумента.Свойство("ВидДокумента")
					И ЗначениеЗаполнено(РеквизитыДокумента.ВидДокумента) Тогда
					Запрос.Текст = СтрШаблон("%1 И Шаблоны.ВидДокумента = &ВидДокумента", Запрос.Текст);
					Запрос.УстановитьПараметр("ВидДокумента", РеквизитыДокумента.ВидДокумента);
				КонецЕсли;
				Если РеквизитыДокумента.Свойство("ГрифДоступа") И ЗначениеЗаполнено(РеквизитыДокумента.ГрифДоступа) Тогда
					Запрос.Текст = СтрШаблон("%1 И Шаблоны.ГрифДоступа = &ГрифДоступа", Запрос.Текст);
					Запрос.УстановитьПараметр("ГрифДоступа", РеквизитыДокумента.ГрифДоступа);
				КонецЕсли;
				Если РеквизитыДокумента.Свойство("ВопросДеятельности")
					И ЗначениеЗаполнено(РеквизитыДокумента.ВопросДеятельности) Тогда
					Запрос.Текст = СтрШаблон("%1 И Шаблоны.ВопросДеятельности = &ВопросДеятельности", Запрос.Текст);
					Запрос.УстановитьПараметр("ВопросДеятельности", РеквизитыДокумента.ВопросДеятельности);
				КонецЕсли;
				Если РеквизитыДокумента.Свойство("Организация") И ЗначениеЗаполнено(РеквизитыДокумента.Организация) Тогда
					Запрос.Текст = СтрШаблон("%1 И Шаблоны.Организация = &Организация", Запрос.Текст);
					Запрос.УстановитьПараметр("Организация", РеквизитыДокумента.Организация);
				КонецЕсли;
				Если РеквизитыДокумента.Свойство("Проект") И ЗначениеЗаполнено(РеквизитыДокумента.Проект) Тогда
					Запрос.Текст = СтрШаблон("%1 И Шаблоны.Проект = &Проект", Запрос.Текст);
					Запрос.УстановитьПараметр("Проект", РеквизитыДокумента.Проект);
				КонецЕсли;
			КонецЕсли;
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Количество() = 0 Тогда
				
				// Попробуем тот же запрос, но без отбора, если и тогда не найдено, то пусто.
				Если Запрос.Текст <> ТекстБезОтбора Тогда
					Запрос.Текст = ТекстБезОтбора;
				КонецЕсли;
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Количество() = 0 Тогда
					Возврат "Пустой";
				КонецЕсли;
			КонецЕсли;
			
			Индекс = СлучайноеЧислоСразу(0, Выборка.Количество() - 1);
			Пока Выборка.Следующий() Цикл
				Индекс = Индекс - 1;
				Если Индекс > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				// Если на входе был другой вид документа и по нему не нашелся шаблона, то текущим видом делаем 
				// вид документа из шаблона, неявно возвращаем в РеквизитыДокумента:
				Если РеквизитыДокумента.ВидДокумента <> Выборка.ВидДокумента Тогда
					РеквизитыДокумента.ВидДокумента = Выборка.ВидДокумента;
				КонецЕсли;
				
				Возврат Выборка.ШаблонДокумента;
			КонецЦикла;
			
			Возврат Справочники.ШаблоныДокументов.ПустаяСсылка();
			
		КонецФункции
		
		// Возвращает случайно выбранный вид просмотра списка документов предприятия.
		// В выборке участвуют только следующие значения:
		//   - ПоКатегориям
		//   - ПоПапкам
		// 
		// Возвращаемое значение:
		//  ПеречислениеСсылка.ВидыПросмотраСпискаОбъектов - выбранный вид просмотра.
		//
		Функция СлучайныйВидПросмотраСпискаДокументовПредприятия() Экспорт
			
			СлучайныйВидПросмотра = СлучайноеЧислоСразу(1, 2);
			Если СлучайныйВидПросмотра = 1 Тогда
				Результат = Перечисления.ВидыПросмотраСпискаОбъектов.ПоКатегориям;
			Иначе
				Результат = Перечисления.ВидыПросмотраСпискаОбъектов.ПоПапкам;
			КонецЕсли;
			
			Возврат Результат;
			
		КонецФункции
		
		
		// Случайное значение перечисления.
		// 
		// Параметры:
		//  ИмяПеречисления - Строка - Имя перечисления, как задано в конфигураторе
		// 
		// Возвращаемое значение:
		//  ПеречислениеСсылка -
		Функция СлучайноеЗначениеПеречисления(ИмяПеречисления) Экспорт
			
			Менеджер = Перечисления[ИмяПеречисления];
			КолвоЗначений = Менеджер.Количество();
			Если КолвоЗначений = 1 Тогда
				Возврат Менеджер[0];
			КонецЕсли;
			СлучайныйИндекс = СлучайноеЧислоСразу(1, КолвоЗначений) - 1;
			
			Возврат Менеджер[СлучайныйИндекс];
			
		КонецФункции
		
	#КонецОбласти
	
	// Получить номенклатуры дел для данного подразделения, пригодные для заполнения в документ.
	// 
	// Параметры:
	//  Подразделение - СправочникСсылка.СтруктураПредприятия - Подразделение
	// 
	// Возвращаемое значение:
	//  Массив Из СправочникСсылка.НоменклатураДел
	Функция ПодходящиеНоменклатурыДел(Подразделение) Экспорт
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	НД.Ссылка
			|ИЗ
			|	Справочник.НоменклатураДел КАК НД
			|ГДЕ
			|	НД.Раздел.Подразделение = &Подразделение
			|	И НЕ НД.ПометкаУдаления");
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	КонецФункции
	
	
	// Подходящие тематики для данного вида документа. Для подстановки в документ, чтоб он прошел проверку заполнения.
	// 
	// Параметры:
	//  ВидДокумента - СправочникСсылка.ВидыДокументов - Вид документа
	// 
	// Возвращаемое значение:
	//  Массив Из СправочникСсылка.ТематикиДокументов -
	Функция ПодходящиеТематики(ВидДокумента) Экспорт
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Тематики.Ссылка КАК Тематика
			|ИЗ
			|	Справочник.ТематикиДокументов КАК Тематики
			|ГДЕ
			|	Тематики.ВидДокумента В (&ВидыДокументов)
			|	И НЕ Тематики.ПометкаУдаления"
		);
		Запрос.УстановитьПараметр("ВидыДокументов", Делопроизводство.СписокРодителейВидаДокумента(ВидДокумента));
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Тематика");
		
	КонецФункции
	
	#Область ТипыДанных
		
		// Конструктор - для заполнения документа.
		//
		// Параметры:
		//   ТолькоСОбработкой - Булево - Только виды документов, где есть обработка
		// 
		// Возвращаемое значение:
		//  Структура:
		//  * ПапкаДокумента - СправочникСсылка.ПапкиДокументов -
		//  * ВидДокумента - СправочникСсылка.ВидыДокументов -
		//  * ГрифДоступа - СправочникСсылка.ГрифыДоступа -
		//  * ВопросДеятельности - СправочникСсылка.ВопросыДеятельности -
		//  * Организация - СправочникСсылка.Организации -
		//  * Проект - СправочникСсылка.Проекты -
		//  * Контрагент - СправочникСсылка.Контрагенты -
		Функция НовыйРеквизитыДокумента(ТолькоСОбработкой = Ложь) Экспорт
			
			Результат = Новый Структура();
			Результат.Вставить("ПапкаДокумента", Справочники.ПапкиДокументов.ПустаяСсылка());
			Результат.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
			Результат.Вставить("ВидДокумента", Справочники.ВидыДокументов.ПустаяСсылка());
			Результат.Вставить("ГрифДоступа", Справочники.ГрифыДоступа.ПустаяСсылка());
			Результат.Вставить("ВопросДеятельности", Справочники.ВопросыДеятельности.ПустаяСсылка());
			Результат.Вставить("Проект", Справочники.Проекты.ПустаяСсылка());
			Результат.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
			Возврат Результат;
			
		КонецФункции
		
		// Формирует незаполненную структуру шага сценария и добавляет его в переданный
		// сценарий.
		//
		// Параметры:
		//  Действие - Строка - Если задано, то сразу задается имя действия, как суффикса функции в модуле 
		//  					см. НагрузочноеТестированиеДействияКлиент
		//  Пауза - Число - В секундах. Если задано, то сразу задается длительности паузы после действия. 
		//
		// Возвращаемое значение:
		//  Структура - на созданный шаг:
		//   * Действие - Строка -
		//   * Параметры - Структура - Возможные поля (набор полей зависит от свойства "Действие"):
		//   ** ИмяФормы - Строка - Полный путь к форме в том виде, как принимает функция ОткрытьФорму(..)
		//   ** ИгнорироватьНевыполнение - Булево - для действий "ВыполнитьКомандуФормы", "ВызватьОбработчикПоляФормы".
		//   									   Невыполнение команды не прерывает сценарий и не выдает ошибку.
		//   									   Тестирование идет дальше.
		//   ** ИгнорироватьОтсутствиеФормы - Булево - Для действий "ВыполнитьКомандуФормы",
		//   										   "ВызватьОбработчикПоляФормы", "ЗаполнитьРеквизитыФормы".
		//   										   Если задано, то не будет ошибки, если форма не найдена среди
		//   										   открытых (актуально для форм, которые могут открыться, а могут не
		//   										   открыться на определенном шаге.
		//   ** ИмяКоманды - Строка - Имя команды в форме. Для действия "ВыполнитьКомандуФормы"
		//   ** Реквизиты - Соответствие Из КлючИЗначение - Для действия "ЗаполнитьРеквизитыФормы":
		//   *** Ключ - Строка - имя реквизита. Для реквизитов объекта формы необходимо
		//   					в имени реквизита добавлять префикс "Объект.".
		//   					По умолчанию заполненные значения реквизитов не перезаписываются.
		//   					Для перезаписи значения реквизита необходимо к имени реквизита добавлять постфикс "*".
		//   *** Значение - Произвольный - Значение реквизита, которое нужно назначить.
		//   ** ЗакрытьОткрытуюФорму - Булево - Принудительное закрытие ранее открытой формы (по умолчанию Ложь).
		//   ** ПараметрыФормы - Структура - Параметры, передаваемые в открываемую форму.
		//   ** ПапкаДокумента - СправочникСсылка.ПапкиДокументов - Папка, к которой нужно перейти,
		//   														для действия "ВыбратьПапкуДокумента".
		//   ** Шаблон - СправочникСсылка.ШаблоныДокументов - Для действия "ВыбратьШаблонДокумента".
		//   ** ТекущийЭлемент - Строка - Имя элемента формы, на который надо переключиться,
		//   							  для действия "ПереключитьТекущийЭлемент"
		//   ** ИмяОбработчика - Строка - Имя обработчика события поля в форме,
		//   							  для действия "ВызватьОбработчикПоляФормы".
		//   ** Участник - СправочникСсылка.Сотрудники - Участник для подстановки в форму действия участников, для
		//   											действия "ВыбратьУчастникаВФормуДействия"
		//   * Пауза - Число -
		Функция НовыйШагСценария(Действие = "", Пауза = 1) Экспорт
			
			Шаг = Новый Структура();
			Шаг.Вставить("Действие", Действие);
			Шаг.Вставить("Параметры", Новый Структура());
			Шаг.Вставить("Пауза", Пауза);
			Возврат Шаг;
			
		КонецФункции
		
	#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

	Функция ТекстЗапроса_ПоместитьВидыДокументовСОбработкой()
		Возврат
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Настройки.ВидОбъекта КАК ВидДокумента
			|
			|ПОМЕСТИТЬ втВидыСОбработкой
			|ИЗ
			|	Справочник.НастройкиОбработкиВидовОбъектов КАК Настройки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиОбработкиВидовОбъектов.ВидыДействий КАК НастройкиТЧ
			|		ПО Настройки.Ссылка = НастройкиТЧ.Ссылка
			|ГДЕ
			|	Настройки.ВидОбъекта ССЫЛКА Справочник.ВидыДокументов
			|	И НЕ Настройки.ПометкаУдаления
			|	И Настройки.ДействуетС <= &ТекущаяДата
			|	И (Настройки.ДействуетПо = ДАТАВРЕМЯ(1, 1, 1)
			|	ИЛИ КОНЕЦПЕРИОДА(Настройки.ДействуетПо, ДЕНЬ) >= &ТекущаяДата)
			|СГРУППИРОВАТЬ ПО
			|	Настройки.ВидОбъекта
			|;
			|";
	КонецФункции

	Функция Текст_НетДоступногоЭлемента(ИмяСправочника)
		
		Возврат СтрШаблон(
			НСтр("ru = 'Не удается сгенерировать случайный элемент справочника ""%1"", возможно у пользователя
			|недостаточно прав для нормальной работы с документами. Возможно, нужно выбрать для
			|нагрузочного тестирования другого пользователя...'"),
			Метаданные.Справочники[ИмяСправочника].Синоним);
		
	КонецФункции

#КонецОбласти
