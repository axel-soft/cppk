#Область ПрограммныйИнтерфейс

// Возвращает структуру прав доступа к указанному объекту для указанного сотрудника.
// 
Функция ПраваСотрудникаПоОбъекту(ОбъектДоступа, Сотрудник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если права доступа не включены, то все разрешено.
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Права = Новый Структура(
			"Добавление, Изменение, Удаление, УправлениеПравами, Чтение",
			Истина, Истина, Истина, Истина, Истина);
		Возврат Права;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		ВызватьИсключение НСтр("ru = 'Не указан сотрудник для проверки прав'");
	КонецЕсли;
	
	// Роли Полные права все разрешено.
	Пользователь = Сотрудники.ЛюбойПользовательСотрудника(Сотрудник);
	Если ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ(Пользователь) Тогда
		Права = Новый Структура(
			"Добавление, Изменение, Удаление, УправлениеПравами, Чтение",
			Истина, Истина, Истина, Истина, Истина);
		Возврат Права;
	КонецЕсли;
	
	Права = Новый Структура(
		"Добавление, Изменение, Удаление, УправлениеПравами, Чтение",
		Ложь, Ложь, Ложь, Ложь, Ложь);
		
	ОтборПоСотруднику = Новый Массив;
	ОтборПоСотруднику.Добавить(Сотрудник);
	ТаблицаПрав = ПраваСотрудниковПоОбъекту(ОбъектДоступа, Истина, ОтборПоСотруднику);
	
	Если ТаблицаПрав.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Права, ТаблицаПрав[0]);
	КонецЕсли;
	
	Возврат Права;
	
КонецФункции

// Возвращает права сотрудников на переданный ОбъектДоступа.
//
// Параметры:
//  ОбъектДоступа - ссылна на объект, чьи права нужно получить
//  УчитыватьНеограниченныеПрава - Булево - признак включения в результат пользователей с неограниченными правами на таблицу.
//  СотрудникиОтбор - Массив, Неопределено - массив сотрудников для отбора. Если не установлен, то по всем.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками Сотрудник, Чтение, Добавление, Изменение, Удаление, УправлениеПравами.
// 
Функция ПраваСотрудниковПоОбъекту(
			ОбъектДоступа, УчитыватьНеограниченныеПрава, СотрудникиОтбор = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
			
	// Если права доступа не включены, то все разрешено.
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		ТаблицаПрав = ТаблицаПравСотрудниковПоОбъектам();
		Если СотрудникиОтбор = Неопределено Тогда
			Запрос = Новый Запрос(
				"ВЫБРАТЬ Сотрудники.Ссылка ИЗ Справочник.Сотрудники КАК Сотрудники ГДЕ Действует");
			СотрудникиОтбор = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
		КонецЕсли;
		Для Сч = 1 По СотрудникиОтбор.Количество() Цикл
			ТаблицаПрав.Добавить();
		КонецЦикла;
		ТаблицаПрав.ЗаполнитьЗначения(ОбъектДоступа, "ОбъектДоступа");
		ТаблицаПрав.ЗагрузитьКолонку(СотрудникиОтбор, "Сотрудник");
		ТаблицаПрав.ЗаполнитьЗначения(Истина, "Чтение, Изменение, Добавление, Удаление, УправлениеПравами");
		Возврат ТаблицаПрав;
	КонецЕсли;
		
	ОбъектыДоступа = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектДоступа);
	Возврат ПраваСотрудниковПоОднотипнымОбъектам(
		ОбъектыДоступа, УчитыватьНеограниченныеПрава, СотрудникиОтбор);
	
КонецФункции

// Возвращает права сотрудников на переданные ОбъектыДоступа.
// 
Функция ПраваСотрудниковПоОбъектам(
			ОбъектыДоступа, УчитыватьНеограниченныеПрава, Знач СотрудникиОтбор = Неопределено) Экспорт
			
	УстановитьПривилегированныйРежим(Истина);
			
	ТаблицаПрав = ТаблицаПравСотрудниковПоОбъектам();
	
	Если ОбъектыДоступа.Количество() = 0 Тогда
		Возврат ТаблицаПрав;
	КонецЕсли;
	
	// Если права доступа не включены, то все разрешено.
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		ТаблицаПрав = ТаблицаПравСотрудниковПоОбъектам();
		Если СотрудникиОтбор = Неопределено Тогда
			Запрос = Новый Запрос(
				"ВЫБРАТЬ Сотрудники.Ссылка ИЗ Справочник.Сотрудники КАК Сотрудники ГДЕ Действует");
			СотрудникиОтбор = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
		КонецЕсли;
		Для Каждого ОбъектДоступа Из ОбъектыДоступа Цикл
			Для Каждого Сотрудник Из СотрудникиОтбор Цикл
				СтрПрав = ТаблицаПрав.Добавить();
				СтрПрав.ОбъектДоступа = ОбъектДоступа;
				СтрПрав.Сотрудник = Сотрудник;
			КонецЦикла;
		КонецЦикла;
		ТаблицаПрав.ЗаполнитьЗначения(Истина, "Чтение, Изменение, Добавление, Удаление, УправлениеПравами");
		Возврат ТаблицаПрав;
	КонецЕсли;
		
	ОбъектыСТипами = Новый ТаблицаЗначений;
	ОбъектыСТипами.Колонки.Добавить("Объект");
	ОбъектыСТипами.Колонки.Добавить("Тип");
	ОбъектыСТипами.Колонки.Добавить("ИДГруппы");
	Для Каждого Объект Из ОбъектыДоступа Цикл
		Стр = ОбъектыСТипами.Добавить();
		Стр.Объект = Объект;
		Стр.Тип = ТипЗнч(Объект);
	КонецЦикла;
	
	ТипыНеПоддерживающиеГрупповойАлгоритм = Новый Соответствие;
	ТипыНеПоддерживающиеГрупповойАлгоритм.Вставить(
		Тип("СправочникСсылка.ДескрипторыДоступаОбъектов"), Истина);
	ТипыНеПоддерживающиеГрупповойАлгоритм.Вставить(
		Тип("СправочникСсылка.ДескрипторыДоступаРегистров"), Истина);
	
	ПоследнийИД = 0;
	ИДТипов = Новый Соответствие;
	
	Для Каждого Стр Из ОбъектыСТипами Цикл
		// Эти объекты обрабатываются по одному.
		Если ТипыНеПоддерживающиеГрупповойАлгоритм.Получить(Стр.Тип) <> Неопределено Тогда
			Стр.ИДГруппы = ПоследнийИД;
			ПоследнийИД = ПоследнийИД + 1;
			Продолжить;
		КонецЕсли;
		НайденныйИД = ИДТипов.Получить(Стр.Тип);
		Если НайденныйИД <> Неопределено Тогда
			Стр.ИДГруппы = НайденныйИД;
		Иначе
			ИДТипов.Вставить(Стр.Тип, ПоследнийИД);
			Стр.ИДГруппы = ПоследнийИД;
			ПоследнийИД = ПоследнийИД + 1;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("ИДГруппы");
	Для Сч = 0 По ПоследнийИД - 1 Цикл
		ОднотипныеОбъекты = Новый Массив;
		СтруктураПоиска.ИДГруппы = Сч;
		НайденныеСтроки = ОбъектыСТипами.НайтиСтроки(СтруктураПоиска);
		Для Каждого Стр Из НайденныеСтроки Цикл
			ОднотипныеОбъекты.Добавить(Стр.Объект);
		КонецЦикла;
		Таб = ПраваСотрудниковПоОднотипнымОбъектам(
			ОднотипныеОбъекты, УчитыватьНеограниченныеПрава, СотрудникиОтбор);
		Для Каждого Стр Из Таб Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаПрав.Добавить(), Стр);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаПрав;
	
КонецФункции

// Возвращает права на переданные ОбъектыДоступа.
// по всем сотрудникам, либо с отбором по параметру СотрудникиОтбор.
// Важно! Переданные объекты должны иметь один тип.
// Используется только для режима с включенными правами, 
// т.е. константа ДокументооборотИспользоватьОграничениеПравДоступа не проверяется.
//
// Параметры:
//  ОбъектыДоступа - Массив - массив ссылок на объекты, чьи права нужно получить
//  УчитыватьНеограниченныеПрава - Булево - признак включения в результат пользователей с неограниченными правами на таблицу.
//  СотрудникиОтбор - Массив, Неопределено - массив сотрудников для отбора. Если не установлен, то по всем.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками ОбъектДоступа, Сотрудник, Чтение, Добавление, Изменение, Удаление, УправлениеПравами
// 
Функция ПраваСотрудниковПоОднотипнымОбъектам(
			ОбъектыДоступа, УчитыватьНеограниченныеПрава, СотрудникиОтбор = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаПрав = ТаблицаПравСотрудниковПоОбъектам();
	
	Если ОбъектыДоступа.Количество() = 0 Тогда
		Возврат ТаблицаПрав;
	КонецЕсли;
	
	ПервыйОбъектДоступа = ОбъектыДоступа[0];
	ТипОбъекта = ТипЗнч(ПервыйОбъектДоступа);
	ПолноеИмя = ПервыйОбъектДоступа.Метаданные().ПолноеИмя();
	
	// Объекты, имеющие свои алгоритмы получения прав.
	Если ОбщегоНазначенияДокументооборотПовтИсп.ЕстьМетодМенеджера(
			ПолноеИмя, "ПраваСотрудниковПоОбъектам") Тогда
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		Возврат Менеджер.ПраваСотрудниковПоОбъектам(ОбъектыДоступа, СотрудникиОтбор);
	КонецЕсли;
	
	// Файлы.
	Если ТипОбъекта = Тип("СправочникСсылка.Файлы")
		Или ТипОбъекта = Тип("СправочникСсылка.ВерсииФайлов") Тогда
		
		// Если менеджер владельца файла содержит метод ПраваСотрудниковПоФайлам,
		// права нужно получить через него.
		// В остальных случаях права на чтение совпадают с правами на чтение владельца,
		// а права на изменение, добавление, удаление - с парвами на изменение владельца.
		
		Если ТипОбъекта = Тип("СправочникСсылка.Файлы") Тогда
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	Файлы.Ссылка КАК ОбъектДоступа,
				|	ТИПЗНАЧЕНИЯ(Файлы.ВладелецФайла) КАК ТипВладельца
				|ИЗ
				|	Справочник.Файлы КАК Файлы
				|ГДЕ
				|	Файлы.Ссылка В(&ОбъектыДоступа)");
		Иначе
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ВерсииФайлов.Ссылка КАК ОбъектДоступа,
				|	ТИПЗНАЧЕНИЯ(Файлы.ВладелецФайла) КАК ТипВладельца
				|ИЗ
				|	Справочник.ВерсииФайлов КАК ВерсииФайлов
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
				|		ПО ВерсииФайлов.Владелец = Файлы.Ссылка
				|ГДЕ
				|	ВерсииФайлов.Ссылка В(&ОбъектыДоступа)");
		КонецЕсли;
		Запрос.УстановитьПараметр("ОбъектыДоступа", ОбъектыДоступа);
		
		МенеджерыВладельцевПоТипам = Новый Соответствие;
		ФайлыПоМенеджерамВладельцев = Новый Соответствие;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерВладельца = МенеджерыВладельцевПоТипам.Получить(Выборка.ТипВладельца);
			Если МенеджерВладельца = Неопределено Тогда
				ПолноеИмяВладельца = Метаданные.НайтиПоТипу(Выборка.ТипВладельца).ПолноеИмя();
				МенеджерВладельца = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяВладельца);
				Если Не ОбщегоНазначенияДокументооборот.ЕстьМетодМенеджера(
							МенеджерВладельца, "ПраваСотрудниковПоФайлам") Тогда
					МенеджерВладельца = Справочники.Файлы;  // Значение по умолчанию.
				КонецЕсли;
				МенеджерыВладельцевПоТипам.Вставить(Выборка.ТипВладельца, МенеджерВладельца);
			КонецЕсли;
			ФайлыТекущегоМенеджера = ФайлыПоМенеджерамВладельцев.Получить(МенеджерВладельца);
			Если ФайлыТекущегоМенеджера = Неопределено Тогда
				ФайлыТекущегоМенеджера = Новый Массив;
				ФайлыПоМенеджерамВладельцев.Вставить(МенеджерВладельца, ФайлыТекущегоМенеджера);
			КонецЕсли;
			ФайлыТекущегоМенеджера.Добавить(Выборка.ОбъектДоступа);
		КонецЦикла;
		
		Для Каждого Эл Из ФайлыПоМенеджерамВладельцев Цикл
			МенеджерВладельца = Эл.ключ;
			Файлы = Эл.Значение;
			Если МенеджерВладельца = Справочники.Файлы Тогда
				// Права считаются на основании прав владельцев.
				ТекущаяТаблицаПрав = ПолучитьПраваСотрудниковПоФайламОтВладельцев(
					Файлы, УчитыватьНеограниченныеПрава, СотрудникиОтбор);
			Иначе
				// Есть свой алгоритм расчета прав.
				ТекущаяТаблицаПрав = МенеджерВладельца.ПраваСотрудниковПоФайлам(
					Файлы, СотрудникиОтбор);
			КонецЕсли;
			Для Каждого Стр Из ТекущаяТаблицаПрав Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаПрав.Добавить(), Стр);
			КонецЦикла;
		КонецЦикла;
		
		Возврат ТаблицаПрав;
		
	КонецЕсли;
	
	// Остальные объекты.
	МетаданныеОбъекта = ПервыйОбъектДоступа.Метаданные();
	ИдентификаторОМ = ИдентификаторМетаданныхДляПроверкиПрав(ПервыйОбъектДоступа);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипОбъекта);
	ТаблицаПрав.Колонки.Удалить("ОбъектДоступа");
	ТаблицаПрав.Колонки.Добавить("ОбъектДоступа", Новый ОписаниеТипов(МассивТипов));
	
	ЗаменяемыеПодстроки = Новый Соответствие;
	Запрос = ДокументооборотПраваДоступаПереопределяемый.ЗапросНаПраваПоОбъекту(
		ОбъектыДоступа, ТипОбъекта, МетаданныеОбъекта, ЗаменяемыеПодстроки, СотрудникиОтбор);
	
	Если ЗаменяемыеПодстроки.Получить("%ОтборПоСотруднику%") = Неопределено Тогда
		ЗаменяемыеПодстроки.Вставить("%ОтборПоСотруднику%", 
			?(СотрудникиОтбор = Неопределено, "",
				"И ПраваПоДескрипторамДоступаОбъектов.Сотрудник В (&Сотрудники)"));
	КонецЕсли;
	
	Если ЗаменяемыеПодстроки.Получить("%ОтборПоСотрудникуСоставаСубъектов%") = Неопределено Тогда
		ЗаменяемыеПодстроки.Вставить("%ОтборПоСотрудникуСоставаСубъектов%",
			?(СотрудникиОтбор = Неопределено, "",
				"И СоставСубъектов.Сотрудник В (&Сотрудники)"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		
		// Запрос сформирован в переопределяемом модуле
		
	ИначеЕсли ОбщегоНазначения.ЭтоБизнесПроцесс(МетаданныеОбъекта) Тогда
		
		// Права на чтение имеют все участники процесса, права на изменение - только автор.
		// Также учитываются делегаты и руководители.
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВложенныйЗапрос.ОбъектДоступа КАК ОбъектДоступа,
			|	ВложенныйЗапрос.Сотрудник КАК Сотрудник,
			|	МАКСИМУМ(ВложенныйЗапрос.Чтение) КАК Чтение,
			|	МАКСИМУМ(ВложенныйЗапрос.Изменение) КАК Добавление,
			|	МАКСИМУМ(ВложенныйЗапрос.Изменение) КАК Изменение,
			|	МАКСИМУМ(ВложенныйЗапрос.Изменение) КАК Удаление,
			|	ЛОЖЬ КАК УправлениеПравами
			|ИЗ
			|	(ВЫБРАТЬ
			|		ТаблицаПроцесса.Ссылка КАК ОбъектДоступа,
			|		СоставСубъектов.Сотрудник КАК Сотрудник,
			|		ИСТИНА КАК Чтение,
			|		ЛОЖЬ КАК Изменение
			|	ИЗ
			|		#ТаблицаПроцесса КАК ТаблицаПроцесса
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчастникиПроцессов КАК УчастникиПроцессов
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектов
			|				ПО УчастникиПроцессов.Участник = СоставСубъектов.Субъект
			|					И (СоставСубъектов.ИмяОбластиДелегирования В (&ИменаОбластейЗамещения))
			|					%ОтборПоСотрудникуСоставаСубъектов%
			|			ПО ТаблицаПроцесса.Ссылка = УчастникиПроцессов.Процесс
			|	ГДЕ
			|		ТаблицаПроцесса.Ссылка В(&ОбъектыДоступа)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ТаблицаПроцесса.Ссылка,
			|		СоставСубъектов.Сотрудник,
			|		ИСТИНА,
			|		ИСТИНА
			|	ИЗ
			|		#ТаблицаПроцесса КАК ТаблицаПроцесса
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектов
			|			ПО ТаблицаПроцесса.Автор = СоставСубъектов.Субъект
			|				И (СоставСубъектов.ИмяОбластиДелегирования В (&ИменаОбластейЗамещения))
			|				%ОтборПоСотрудникуСоставаСубъектов%
			|	ГДЕ
			|		ТаблицаПроцесса.Ссылка В(&ОбъектыДоступа)) КАК ВложенныйЗапрос
			|
			|СГРУППИРОВАТЬ ПО
			|	ВложенныйЗапрос.ОбъектДоступа,
			|	ВложенныйЗапрос.Сотрудник";
			
		ЗаменяемыеПодстроки.Вставить("#ТаблицаПроцесса", МетаданныеОбъекта.ПолноеИмя());
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.Задача") Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВложенныйЗапрос.ОбъектДоступа,
			|	ВложенныйЗапрос.Сотрудник,
			|	МАКСИМУМ(ВложенныйЗапрос.Чтение) КАК Чтение,
			|	МАКСИМУМ(ВложенныйЗапрос.Добавление) КАК Добавление,
			|	МАКСИМУМ(ВложенныйЗапрос.Изменение) КАК Изменение,
			|	МАКСИМУМ(ВложенныйЗапрос.Удаление) КАК Удаление,
			|	МАКСИМУМ(ВложенныйЗапрос.УправлениеПравами) КАК УправлениеПравами
			|ИЗ
			|	(ВЫБРАТЬ
			|		ДескрипторыДляОбъектов.Объект КАК ОбъектДоступа,
			|		ПраваПоДескрипторамДоступаОбъектов.Сотрудник,
			|		ИСТИНА КАК Чтение,
			|		ПраваПоДескрипторамДоступаОбъектов.Добавление КАК Добавление,
			|		ПраваПоДескрипторамДоступаОбъектов.Изменение КАК Изменение,
			|		ПраваПоДескрипторамДоступаОбъектов.Удаление КАК Удаление,
			|		ПраваПоДескрипторамДоступаОбъектов.УправлениеПравами КАК УправлениеПравами
			|	ИЗ
			|		РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваПоДескрипторамДоступаОбъектов КАК ПраваПоДескрипторамДоступаОбъектов
			|			ПО ДескрипторыДляОбъектов.Дескриптор = ПраваПоДескрипторамДоступаОбъектов.Дескриптор
			|	ГДЕ
			|		ДескрипторыДляОбъектов.Объект В (&ОбъектыДоступа)
			|		%ОтборПоСотруднику%
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|	ВЫБРАТЬ
			|		ЗадачаДок.Ссылка,
			|		ЗамещающиеИПомощники.Замещающий,
			|		ИСТИНА,
			|		ИСТИНА,
			|		ИСТИНА,
			|		ИСТИНА,
			|		ЛОЖЬ
			|	ИЗ
			|		Документ.Задача КАК ЗадачаДок
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
			|			ПО ЗадачаДок.Автор = СотрудникиВКонтейнерах.Контейнер
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗамещающиеИПомощники КАК ЗамещающиеИПомощники
			|			ПО СотрудникиВКонтейнерах.Сотрудник = ЗамещающиеИПомощники.Сотрудник
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗамещающиеИПомощники.ВопросыЗамещения КАК ВопросыЗамещенияТЧ
			|			ПО ЗамещающиеИПомощники.Ссылка = ВопросыЗамещенияТЧ.Ссылка
			|	ГДЕ
			|		ЗадачаДок.Ссылка В (&ОбъектыДоступа)
			|		И ЗадачаДок.Источник = НЕОПРЕДЕЛЕНО
			|		И ЗадачаДок.ВышестоящаяЗадача = ЗНАЧЕНИЕ(Документ.Задача.ПустаяСсылка)
			|		И ЗамещающиеИПомощники.Действует
			|		И ВопросыЗамещенияТЧ.Область В (&ОбластиЗамещения)
			|		%ОтборПоЗамещающемуСотруднику%
			|) КАК ВложенныйЗапрос
			|СГРУППИРОВАТЬ ПО
			|	ВложенныйЗапрос.ОбъектДоступа,
			|	ВложенныйЗапрос.Сотрудник";
		
		ОбластиЗамещения = Новый Массив;
		ОбластиЗамещения.Добавить(Справочники.ОбластиЗамещения.ЗадачиПостановкаПоручений);
		ОбластиЗамещения.Добавить(Справочники.ОбластиЗамещения.Задачи);
		ОбластиЗамещения.Добавить(Справочники.ОбластиЗамещения.ВсеОбласти);
		Запрос.УстановитьПараметр("ОбластиЗамещения", ОбластиЗамещения);
		ЗаменяемыеПодстроки.Вставить("%ОтборПоЗамещающемуСотруднику%",
			?(СотрудникиОтбор = Неопределено, "", "И ЗамещающиеИПомощники.Замещающий В (&Сотрудники)"));
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
 			|	ДескрипторыДляОбъектов.Объект КАК Объект,
 			|	ДескрипторыДляОбъектов.Дескриптор КАК Дескриптор
 			|ПОМЕСТИТЬ Дескрипторы
 			|ИЗ
 			|	РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
 			|ГДЕ
 			|	ДескрипторыДляОбъектов.Объект В (&ОбъектыДоступа)
 			|	И ДескрипторыДляОбъектов.ТипДескриптора = 2
 			|
 			|ОБЪЕДИНИТЬ ВСЕ
 			|
 			|ВЫБРАТЬ
 			|	ДействиеЗадачи.Ссылка,
 			|	ДескрипторыДляОбъектов.Дескриптор
 			|ИЗ
 			|	Документ.ДействиеЗадачи КАК ДействиеЗадачи
 			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
 			|		ПО (ДескрипторыДляОбъектов.Объект = ДействиеЗадачи.Задача)
 			|ГДЕ
 			|	ДействиеЗадачи.Ссылка В (&ОбъектыДоступа)
 			|	И ДескрипторыДляОбъектов.ТипДескриптора = 2
 			|
 			|;
 			|
 			|////////////////////////////////////////////////////////////////////////////////
 			|ВЫБРАТЬ
 			|	ДескрипторыДляОбъектов.Объект КАК ОбъектДоступа,
 			|	ПраваПоДескрипторамДоступаОбъектов.Сотрудник КАК Сотрудник,
 			|	ИСТИНА КАК Чтение,
 			|	ПраваПоДескрипторамДоступаОбъектов.Добавление КАК Добавление,
 			|	ПраваПоДескрипторамДоступаОбъектов.Изменение КАК Изменение,
 			|	ПраваПоДескрипторамДоступаОбъектов.Удаление КАК Удаление,
 			|	ПраваПоДескрипторамДоступаОбъектов.УправлениеПравами КАК УправлениеПравами
 			|ПОМЕСТИТЬ ПраваПоОбъектам
 			|ИЗ
 			|	Дескрипторы КАК ДескрипторыДляОбъектов
 			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваПоДескрипторамДоступаОбъектов КАК ПраваПоДескрипторамДоступаОбъектов
 			|		ПО ДескрипторыДляОбъектов.Дескриптор = ПраваПоДескрипторамДоступаОбъектов.Дескриптор
 			|ГДЕ
 			|	НЕ ПраваПоДескрипторамДоступаОбъектов.ОбъектОснование ССЫЛКА Справочник.ЗамещающиеИПомощники
 			|	%ОтборПоСотруднику%
 			|
 			|ОБЪЕДИНИТЬ ВСЕ
 			|
 			|ВЫБРАТЬ
 			|	ДескрипторыДляОбъектов.Объект,
 			|	ПраваПоДескрипторамДоступаОбъектов.Сотрудник,
 			|	ИСТИНА,
 			|	ПраваПоДескрипторамДоступаОбъектов.Добавление,
 			|	ПраваПоДескрипторамДоступаОбъектов.Изменение,
 			|	ПраваПоДескрипторамДоступаОбъектов.Удаление,
 			|	ПраваПоДескрипторамДоступаОбъектов.УправлениеПравами
 			|ИЗ
 			|	Дескрипторы КАК ДескрипторыДляОбъектов
 			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваПоДескрипторамДоступаОбъектов КАК ПраваПоДескрипторамДоступаОбъектов
 			|		ПО ДескрипторыДляОбъектов.Дескриптор = ПраваПоДескрипторамДоступаОбъектов.Дескриптор
 			|		%ОтборПоСотруднику%
 			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗамещающиеИПомощники.ВопросыЗамещения КАК ЗамещающиеИПомощникиВопросыЗамещения
 			|		ПО (ПраваПоДескрипторамДоступаОбъектов.ОбъектОснование = ЗамещающиеИПомощникиВопросыЗамещения.Ссылка)
 			|		И (ЗамещающиеИПомощникиВопросыЗамещения.Область В (&ОбластиЗамещения))
 			|
 			|ОБЪЕДИНИТЬ ВСЕ
 			|
 			|ВЫБРАТЬ
 			|	ДействиеЗадачи.Ссылка,
 			|	ПраваПоДескрипторамДоступаОбъектов.Сотрудник,
 			|	ИСТИНА,
 			|	ПраваПоДескрипторамДоступаОбъектов.Добавление,
 			|	ПраваПоДескрипторамДоступаОбъектов.Изменение,
 			|	ПраваПоДескрипторамДоступаОбъектов.Удаление,
 			|	ПраваПоДескрипторамДоступаОбъектов.УправлениеПравами
 			|ИЗ
 			|	Документ.ДействиеЗадачи КАК ДействиеЗадачи
 			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
 			|	Дескрипторы КАК ДескрипторыДляОбъектов
 			|		ПО (ДескрипторыДляОбъектов.Объект = ДействиеЗадачи.Задача)
 			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
 			|	РегистрСведений.ПраваПоДескрипторамДоступаОбъектов КАК ПраваПоДескрипторамДоступаОбъектов
 			|		ПО ДескрипторыДляОбъектов.Дескриптор = ПраваПоДескрипторамДоступаОбъектов.Дескриптор
 			|		
 			|ГДЕ
 			|	ДействиеЗадачи.Ссылка В (&ОбъектыДоступа)
 			|	И НЕ ПраваПоДескрипторамДоступаОбъектов.ОбъектОснование ССЫЛКА Справочник.ЗамещающиеИПомощники
 			|	%ОтборПоСотруднику%
 			|;
 			|
 			|////////////////////////////////////////////////////////////////////////////////
 			|ВЫБРАТЬ
 			|	ПраваПоОбъектам.ОбъектДоступа КАК ОбъектДоступа,
 			|	ПраваПоОбъектам.Сотрудник КАК Сотрудник,
 			|	МАКСИМУМ(ПраваПоОбъектам.Чтение) КАК Чтение,
 			|	МАКСИМУМ(ПраваПоОбъектам.Добавление) КАК Добавление,
 			|	МАКСИМУМ(ПраваПоОбъектам.Изменение) КАК Изменение,
 			|	МАКСИМУМ(ПраваПоОбъектам.Удаление) КАК Удаление,
 			|	МАКСИМУМ(ПраваПоОбъектам.УправлениеПравами) КАК УправлениеПравами
 			|ИЗ
 			|	ПраваПоОбъектам КАК ПраваПоОбъектам
 			|СГРУППИРОВАТЬ ПО
 			|	ПраваПоОбъектам.ОбъектДоступа,
 			|	ПраваПоОбъектам.Сотрудник";
			
			ОбластиЗамещения = Новый Массив;
			ОбластиЗамещения.Добавить(Справочники.ОбластиЗамещения.ЗадачиВыполнениеПрочихПоручений);
			ОбластиЗамещения.Добавить(Справочники.ОбластиЗамещения.Задачи);
			ОбластиЗамещения.Добавить(Справочники.ОбластиЗамещения.ВсеОбласти);
			Запрос.УстановитьПараметр("ОбластиЗамещения", ОбластиЗамещения);

	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ЗаметкиДокументооборота") Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ЗаметкиДокументооборота.Автор = СоставСубъектов.Сотрудник
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК Чтение,
			|	ИСТИНА КАК Добавление,
			|	ИСТИНА КАК Изменение,
			|	ЛОЖЬ КАК Удаление,
			|	ЛОЖЬ КАК УправлениеПравами
			|ИЗ
			|	Справочник.ЗаметкиДокументооборота КАК ЗаметкиДокументооборота
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектов
			|		ПО ЗаметкиДокументооборота.Автор = СоставСубъектов.Субъект
			|			%ОтборПоСотрудникуСоставаСубъектов%
			|ГДЕ
			|	ЗаметкиДокументооборота.Ссылка В (&ОбъектыДоступа)";
			
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.СамочувствиеСотрудника") Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СамочувствиеСотрудника.Ссылка КАК ОбъектДоступа,
			|	СоставСубъектов.Сотрудник,
			|	ИСТИНА КАК Чтение,
			|	ВЫБОР
			|		КОГДА СамочувствиеСотрудника.Сотрудник = СоставСубъектов.Сотрудник
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК Добавление,
			|	ВЫБОР
			|		КОГДА СоставСубъектов.Субъект ЕСТЬ NULL 
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК Изменение,
			|	ЛОЖЬ КАК Удаление,
			|	ЛОЖЬ КАК УправлениеПравами
			|ИЗ
			|	Документ.СамочувствиеСотрудника КАК СамочувствиеСотрудника
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектов
			|		ПО (СамочувствиеСотрудника.Сотрудник = СоставСубъектов.Субъект)
			|			И СоставСубъектов.ИмяОбластиДелегирования В(&ИменаОбластейЗамещения)
			|			%ОтборПоСотрудникуСоставаСубъектов%
			|ГДЕ
			|	СамочувствиеСотрудника.Ссылка В (&ОбъектыДоступа)";
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.КаналыОбсуждений") Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КаналыОбсужденийУчастники.Ссылка КАК ОбъектДоступа,
			|	СоставСубъектов.Сотрудник,
			|	ИСТИНА КАК Чтение,
			|	КаналыОбсужденийУчастники.Роль = ЗНАЧЕНИЕ(Перечисление.РолиУчастниковКаналовОбсуждений.Администратор) КАК Добавление,
			|	КаналыОбсужденийУчастники.Роль = ЗНАЧЕНИЕ(Перечисление.РолиУчастниковКаналовОбсуждений.Администратор) КАК Изменение,
			|	КаналыОбсужденийУчастники.Роль = ЗНАЧЕНИЕ(Перечисление.РолиУчастниковКаналовОбсуждений.Администратор) КАК Удаление,
			|	ЛОЖЬ КАК УправлениеПравами
			|ИЗ
			|	Справочник.КаналыОбсуждений.Участники КАК КаналыОбсужденийУчастники
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
			|		ПО КаналыОбсужденийУчастники.Участник = СотрудникиВКонтейнерах.Контейнер
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектов
			|		ПО СотрудникиВКонтейнерах.Сотрудник = СоставСубъектов.Субъект
			|			И СоставСубъектов.ИмяОбластиДелегирования В (&ИменаОбластейЗамещения)
			|			%ОтборПоСотрудникуСоставаСубъектов%
			|ГДЕ
			|	КаналыОбсужденийУчастники.Ссылка В(&ОбъектыДоступа)";
			
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ЗамещающиеИПомощники") Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗамещающиеИПомощники.Ссылка КАК ОбъектДоступа,
			|	СоставСубъектов.Сотрудник,
			|	ИСТИНА КАК Чтение,
			|	ИСТИНА КАК Добавление,
			|	ИСТИНА КАК Изменение,
			|	ИСТИНА КАК Удаление,
			|	ЛОЖЬ КАК УправлениеПравами
			|ИЗ
			|	Справочник.ЗамещающиеИПомощники КАК ЗамещающиеИПомощники
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектов
			|		ПО ЗамещающиеИПомощники.Сотрудник = СоставСубъектов.Субъект
			|			И СоставСубъектов.ИмяОбластиДелегирования = """"
			|			%ОтборПоСотрудникуСоставаСубъектов%
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектовЗам
			|		ПО ЗамещающиеИПомощники.Замещающий = СоставСубъектовЗам.Субъект
			|			И СоставСубъектов.Сотрудник = СоставСубъектовЗам.Сотрудник
			|			И СоставСубъектовЗам.ИмяОбластиДелегирования = """"
			|ГДЕ
			|	ЗамещающиеИПомощники.Ссылка В (&ОбъектыДоступа)";
			
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ДескрипторыДоступаОбъектов") Тогда
		
		// Для отображения прав в форме дескриптора
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПраваПоДескрипторамДоступаОбъектов.Дескриптор КАК ОбъектДоступа,
			|	ПраваПоДескрипторамДоступаОбъектов.Сотрудник,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.Добавление) КАК Добавление,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.Изменение) КАК Изменение,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.Удаление) КАК Удаление,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.УправлениеПравами) КАК УправлениеПравами,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.Чтение) КАК Чтение
			|ИЗ
			|	РегистрСведений.ПраваПоДескрипторамДоступаОбъектов КАК ПраваПоДескрипторамДоступаОбъектов
			|ГДЕ
			|	ПраваПоДескрипторамДоступаОбъектов.Дескриптор В (&ОбъектыДоступа)
			|	%ДопУсловия%
			|	%ОтборПоСотруднику%
			|
			|СГРУППИРОВАТЬ ПО
			|	ПраваПоДескрипторамДоступаОбъектов.Дескриптор,
			|	ПраваПоДескрипторамДоступаОбъектов.Сотрудник";
			
		ТипОбъектаДоступа = ТипЗнч(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ИдентификаторОМ, "ЗначениеПустойСсылки"));
		
		ДопНастройки = ПолучитьДопНастройкиДляПолученияПравПоОбъекту(ТипОбъектаДоступа);
		
		ДопУсловия = "";
		Если Не ДопНастройки.ДобавлятьРуководителейИДелегатов Тогда
			ДопУсловия = ДопУсловия
				+ "И ПраваПоДескрипторамДоступаОбъектов.ОбъектОснование = Неопределено";
		КонецЕсли;
		
		ЗаменяемыеПодстроки.Вставить("%ДопУсловия%", ДопУсловия);
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ДескрипторыДоступаРегистров")Тогда
		
		// Для отображения прав в форме дескриптора
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПраваПоДескрипторамДоступаРегистров.Дескриптор КАК ОбъектДоступа,
			|	ПраваПоДескрипторамДоступаРегистров.Сотрудник,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаРегистров.Добавление) КАК Добавление,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаРегистров.Изменение) КАК Изменение,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаРегистров.Удаление) КАК Удаление,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаРегистров.УправлениеПравами) КАК УправлениеПравами,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаРегистров.Чтение) КАК Чтение
			|ИЗ
			|	РегистрСведений.ПраваПоДескрипторамДоступаРегистров КАК ПраваПоДескрипторамДоступаРегистров
			|ГДЕ
			|	ПраваПоДескрипторамДоступаРегистров.Дескриптор В (&ОбъектыДоступа)
			|	%ДопУсловия%
			|	%ОтборПоСотруднику%
			|
			|СГРУППИРОВАТЬ ПО
			|	ПраваПоДескрипторамДоступаРегистров.Дескриптор,
			|	ПраваПоДескрипторамДоступаРегистров.Сотрудник";
			
		ТипОбъектаДоступа = ТипЗнч(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ИдентификаторОМ, "ЗначениеПустойСсылки"));
		
		ДопНастройки = ПолучитьДопНастройкиДляПолученияПравПоОбъекту(ТипОбъектаДоступа);
		
		ДопУсловия = "";
		Если Не ДопНастройки.ДобавлятьРуководителейИДелегатов Тогда
			ДопУсловия = ДопУсловия
				+ "И ПраваПоДескрипторамДоступаОбъектов.ОбъектОснование = Неопределено";
		КонецЕсли;
		
		ЗаменяемыеПодстроки.Вставить("%ДопУсловия%", ДопУсловия);

	ИначеЕсли ДействияКлиентСервер.ЭтоДействие(ПервыйОбъектДоступа) Тогда
	
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Действия.Ссылка КАК ОбъектДоступа,
			|	ПраваПоДескрипторамДоступаОбъектов.Сотрудник,
			|	ИСТИНА КАК Чтение,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.Добавление) КАК Добавление,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.Изменение) КАК Изменение,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.Удаление) КАК Удаление,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.УправлениеПравами) КАК УправлениеПравами
			|ИЗ
			|	Справочник.%ТипДействия% КАК Действия
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
			|		ПО Действия.Предмет = ДескрипторыДляОбъектов.Объект
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваПоДескрипторамДоступаОбъектов КАК ПраваПоДескрипторамДоступаОбъектов
			|		ПО ДескрипторыДляОбъектов.Дескриптор = ПраваПоДескрипторамДоступаОбъектов.Дескриптор
			|ГДЕ
			|	Действия.Ссылка В(&ОбъектыДоступа)
			|	%ДопУсловия%
			|	%ОтборПоСотруднику%
			|
			|СГРУППИРОВАТЬ ПО
			|	Действия.Ссылка,
			|	ПраваПоДескрипторамДоступаОбъектов.Сотрудник";
		
		ТипДействия = "";
		Если ТипОбъекта = Тип("СправочникСсылка.ДействияИсполнения") Тогда
			ТипДействия = "ДействияИсполнения";
		ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
			ТипДействия = "ДействияОзнакомления";
		ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ДействияПодписания") Тогда
			ТипДействия = "ДействияПодписания";
		ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ДействияРегистрации") Тогда
			ТипДействия = "ДействияРегистрации";
		ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ДействияСогласования") Тогда
			ТипДействия = "ДействияСогласования";
		ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ДействияУтверждения") Тогда
			ТипДействия = "ДействияУтверждения";	
		КонецЕсли;
		ЗаменяемыеПодстроки.Вставить("%ТипДействия%", ТипДействия); 
			
		ДопНастройки = ПолучитьДопНастройкиДляПолученияПравПоОбъекту(ТипОбъекта);
		
		ДопУсловия = "";
		Если Не ДопНастройки.ДобавлятьРуководителейИДелегатов Тогда
			ДопУсловия = ДопУсловия
				+ "И ПраваПоДескрипторамДоступаОбъектов.ОбъектОснование = Неопределено";
		КонецЕсли;
		
		ЗаменяемыеПодстроки.Вставить("%ДопУсловия%", ДопУсловия); 		
		 		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ОбработкиОбъектов") Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ОбработкиОбъектов.Ссылка КАК ОбъектДоступа,
		|	ПраваПоДескрипторамДоступаОбъектов.Сотрудник,
		|	ИСТИНА КАК Чтение,
		|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.Добавление) КАК Добавление,
		|	ИСТИНА КАК Изменение,
		|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.Удаление) КАК Удаление,
		|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.УправлениеПравами) КАК УправлениеПравами
		|ИЗ
		|	Справочник.ОбработкиОбъектов КАК ОбработкиОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваПоДескрипторамДоступаОбъектов КАК ПраваПоДескрипторамДоступаОбъектов
		|			ПО ДескрипторыДляОбъектов.Дескриптор = ПраваПоДескрипторамДоступаОбъектов.Дескриптор
		|		ПО ОбработкиОбъектов.Владелец = ДескрипторыДляОбъектов.Объект
		|ГДЕ
		|	ОбработкиОбъектов.Ссылка В (&ОбъектыДоступа)
		|	%ОтборПоСотруднику%
		|СГРУППИРОВАТЬ ПО
		|	ОбработкиОбъектов.Ссылка,
		|	ПраваПоДескрипторамДоступаОбъектов.Сотрудник";
	
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПроектныеЗадачи.Ссылка КАК ОбъектДоступа,
			|	ПраваПоДескрипторамДоступаОбъектов.Сотрудник,
			|	ИСТИНА КАК Чтение,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.Добавление) КАК Добавление,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.Изменение) КАК Изменение,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.Удаление) КАК Удаление,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.УправлениеПравами) КАК УправлениеПравами
			|ИЗ
			|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
			|		ПО ПроектныеЗадачи.Владелец = ДескрипторыДляОбъектов.Объект
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваПоДескрипторамДоступаОбъектов КАК ПраваПоДескрипторамДоступаОбъектов
			|		ПО ДескрипторыДляОбъектов.Дескриптор = ПраваПоДескрипторамДоступаОбъектов.Дескриптор
			|ГДЕ
			|	ПроектныеЗадачи.Ссылка В (&ОбъектыДоступа)
			|	%ДопУсловия%
			|	%ОтборПоСотруднику%
			|
			|СГРУППИРОВАТЬ ПО
			|	ПроектныеЗадачи.Ссылка,
			|	ПраваПоДескрипторамДоступаОбъектов.Сотрудник";
		
		ДопНастройки = ПолучитьДопНастройкиДляПолученияПравПоОбъекту(ТипОбъекта);
		
		ДопУсловия = "";
		Если Не ДопНастройки.ДобавлятьРуководителейИДелегатов Тогда
			ДопУсловия = ДопУсловия
				+ "И ПраваПоДескрипторамДоступаОбъектов.ОбъектОснование = Неопределено";
		КонецЕсли;
		
		ЗаменяемыеПодстроки.Вставить("%ДопУсловия%", ДопУсловия);
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ПротоколыМероприятий") Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПротоколыМероприятий.Ссылка КАК ОбъектДоступа,
			|	ПраваПоДескрипторамДоступаОбъектов.Сотрудник,
			|	ИСТИНА КАК Чтение,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.Добавление) КАК Добавление,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.Изменение) КАК Изменение,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.Удаление) КАК Удаление,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.УправлениеПравами) КАК УправлениеПравами
			|ИЗ
			|	Справочник.ПротоколыМероприятий КАК ПротоколыМероприятий
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
			|		ПО ПротоколыМероприятий.Владелец = ДескрипторыДляОбъектов.Объект
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваПоДескрипторамДоступаОбъектов КАК ПраваПоДескрипторамДоступаОбъектов
			|		ПО ДескрипторыДляОбъектов.Дескриптор = ПраваПоДескрипторамДоступаОбъектов.Дескриптор
			|ГДЕ
			|	ПротоколыМероприятий.Ссылка В (&ОбъектыДоступа)
			|	%ДопУсловия%
			|	%ОтборПоСотруднику%
			|
			|СГРУППИРОВАТЬ ПО
			|	ПротоколыМероприятий.Ссылка,
			|	ПраваПоДескрипторамДоступаОбъектов.Сотрудник";
		
		ДопНастройки = ПолучитьДопНастройкиДляПолученияПравПоОбъекту(ТипОбъекта);
		
		ДопУсловия = "";
		Если Не ДопНастройки.ДобавлятьРуководителейИДелегатов Тогда
			ДопУсловия = ДопУсловия
				+ "И ПраваПоДескрипторамДоступаОбъектов.ОбъектОснование = Неопределено";
		КонецЕсли;
		
		ЗаменяемыеПодстроки.Вставить("%ДопУсловия%", ДопУсловия);
		
	ИначеЕсли ЭтоОбъектДоступаБЭД(ПервыйОбъектДоступа) Тогда
		
		// Для объектов БЭД дополнительно проверим и наличие полномочий, т.к. права на объекты БЭД
		// сейчас аналогичны правам их организаций. Это может привести к ситуации, когда есть права на организацию,
		// но нет доступа к документам БЭД, а функция при этом возвращает права на чтение.
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ДокументЭДО.Ссылка КАК ОбъектДоступа,
			|	ПраваПоДескрипторамДоступаОбъектов.Сотрудник КАК Сотрудник,
			|	ИСТИНА КАК Чтение,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.Добавление) КАК Добавление,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.Изменение) КАК Изменение,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.Удаление) КАК Удаление,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.УправлениеПравами) КАК УправлениеПравами
			|ИЗ
			|	Документ.ЭлектронныйДокументВходящийЭДО КАК ДокументЭДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
			|		ПО (ДокументЭДО.Организация = ДескрипторыДляОбъектов.Объект)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваПоДескрипторамДоступаОбъектов КАК ПраваПоДескрипторамДоступаОбъектов
			|		ПО (ДескрипторыДляОбъектов.Дескриптор = ПраваПоДескрипторамДоступаОбъектов.Дескриптор)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
			|		ПО (ПраваПоДескрипторамДоступаОбъектов.Сотрудник = СотрудникиВКонтейнерах.Сотрудник)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПолномочияСотрудников КАК ПолномочияСотрудников
			|		ПО (СотрудникиВКонтейнерах.Контейнер = ПолномочияСотрудников.Владелец)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК Роли
			|		ПО (ПолномочияСотрудников.Полномочия = Роли.Ссылка И Роли.Роль = &РольЧтениеПоОрганизациям)
			|ГДЕ
			|	ДокументЭДО.Ссылка В (&ОбъектыДоступа)
			|	%ОтборПоСотруднику%
			|СГРУППИРОВАТЬ ПО
			|	ПраваПоДескрипторамДоступаОбъектов.Сотрудник,
			|	ДокументЭДО.Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДокументЭДО.Ссылка КАК ОбъектДоступа,
			|	ПраваПоДескрипторамДоступаОбъектов.Сотрудник КАК Сотрудник,
			|	ИСТИНА КАК Чтение,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.Добавление) КАК Добавление,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.Изменение) КАК Изменение,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.Удаление) КАК Удаление,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.УправлениеПравами) КАК УправлениеПравами
			|ИЗ
			|	Документ.ЭлектронныйДокументВходящийЭДО КАК ДокументЭДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
			|		ПО (ДокументЭДО.Ссылка = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
			|		ПО (ОбъектыУчетаДокументовЭДО.ОбъектУчета = ДескрипторыДляОбъектов.Объект)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваПоДескрипторамДоступаОбъектов КАК ПраваПоДескрипторамДоступаОбъектов
			|		ПО (ДескрипторыДляОбъектов.Дескриптор = ПраваПоДескрипторамДоступаОбъектов.Дескриптор)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
			|		ПО (ПраваПоДескрипторамДоступаОбъектов.Сотрудник = СотрудникиВКонтейнерах.Сотрудник)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПолномочияСотрудников КАК ПолномочияСотрудников
			|		ПО (СотрудникиВКонтейнерах.Контейнер = ПолномочияСотрудников.Владелец)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК Роли
			|		ПО (ПолномочияСотрудников.Полномочия = Роли.Ссылка И Роли.Роль = &РольЧтениеПоСвязаннымДокументам)
			|ГДЕ
			|	ДокументЭДО.Ссылка В (&ОбъектыДоступа)
			|	%ОтборПоСотруднику%
			|СГРУППИРОВАТЬ ПО
			|	ПраваПоДескрипторамДоступаОбъектов.Сотрудник,
			|	ДокументЭДО.Ссылка";
			
			
		Запрос.УстановитьПараметр("РольЧтениеПоОрганизациям",
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
				Метаданные.Роли.ЧтениеЭлектронныхДокументовПоОрганизациямДокументооборот));
		Запрос.УстановитьПараметр("РольЧтениеПоСвязаннымДокументам",
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
				Метаданные.Роли.ЧтениеЭлектронныхДокументовПоДокументамДО));
				
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЭлектронныйДокументВходящийЭДО", МетаданныеОбъекта.Имя);
		
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ВыгрузкаВССТУ") Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВыгрузкаВССТУ.Ссылка КАК ОбъектДоступа,
			|	ПраваПоДескрипторамДоступаОбъектов.Сотрудник,
			|	ИСТИНА КАК Чтение,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.Добавление) КАК Добавление,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.Изменение) КАК Изменение,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.Удаление) КАК Удаление,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.УправлениеПравами) КАК УправлениеПравами
			|ИЗ
			|	Документ.ВыгрузкаВССТУ КАК ВыгрузкаВССТУ
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
			|		ПО ВыгрузкаВССТУ.Организация = ДескрипторыДляОбъектов.Объект
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ПраваПоДескрипторамДоступаОбъектов КАК ПраваПоДескрипторамДоступаОбъектов
			|		ПО ДескрипторыДляОбъектов.Дескриптор = ПраваПоДескрипторамДоступаОбъектов.Дескриптор
			|		
			|ГДЕ
			|	ВыгрузкаВССТУ.Ссылка В (&ОбъектыДоступа)
			|	%ОтборПоСотруднику%
			|СГРУППИРОВАТЬ ПО
			|	ПраваПоДескрипторамДоступаОбъектов.Сотрудник,
			|	ВыгрузкаВССТУ.Ссылка";
		
	Иначе // Права объектов, связанных с дескрипторами
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ДескрипторыДляОбъектов.Объект КАК ОбъектДоступа,
			|	ПраваПоДескрипторамДоступаОбъектов.Сотрудник,
			|	ИСТИНА КАК Чтение,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.Добавление) КАК Добавление,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.Изменение) КАК Изменение,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.Удаление) КАК Удаление,
			|	МАКСИМУМ(ПраваПоДескрипторамДоступаОбъектов.УправлениеПравами) КАК УправлениеПравами
			|ИЗ
			|	РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваПоДескрипторамДоступаОбъектов КАК ПраваПоДескрипторамДоступаОбъектов
			|		ПО ДескрипторыДляОбъектов.Дескриптор = ПраваПоДескрипторамДоступаОбъектов.Дескриптор
			|ГДЕ
			|	ДескрипторыДляОбъектов.Объект В(&ОбъектыДоступа)
			|	%ДопУсловия%
			|	%ОтборПоСотруднику%
			|
			|СГРУППИРОВАТЬ ПО
			|	ДескрипторыДляОбъектов.Объект,
			|	ПраваПоДескрипторамДоступаОбъектов.Сотрудник";
			
		ДопНастройки = ПолучитьДопНастройкиДляПолученияПравПоОбъекту(ТипОбъекта);
		
		ДопУсловия = "";
		Если Не ДопНастройки.ДобавлятьРуководителейИДелегатов Тогда
			ДопУсловия = ДопУсловия
				+ "И ПраваПоДескрипторамДоступаОбъектов.ОбъектОснование = Неопределено";
		КонецЕсли;
		
		ЗаменяемыеПодстроки.Вставить("%ДопУсловия%", ДопУсловия);
		
	КонецЕсли;
	
	Для Каждого Эл Из ЗаменяемыеПодстроки Цикл
		Запрос.Текст = СтрЗаменить(Запрос.Текст, Эл.Ключ, Эл.Значение);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ОбъектыДоступа", ОбъектыДоступа);
	Запрос.УстановитьПараметр("Сотрудники", СотрудникиОтбор);
	Запрос.УстановитьПараметр("ИдентификаторОМ", ИдентификаторОМ);
	Запрос.УстановитьПараметр("ИменаОбластейЗамещения",
		ЗамещающиеИПомощники.ИменаОбластейЗамещенияПоИдентификаторуОбъектаМетаданных(ИдентификаторОМ));
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаПрав.Добавить(), Выборка);
	КонецЦикла;
	
	// Добавление пользователей с неограниченными правами на таблицу
	Если УчитыватьНеограниченныеПрава Тогда
		РасширитьТаблицуПравНеограниченнымиПравами(
			ТаблицаПрав, ИдентификаторОМ, ОбъектыДоступа, СотрудникиОтбор);
	КонецЕсли;
	
	Возврат ТаблицаПрав;
	
КонецФункции

// Возвращает структуру прав доступа к указанному объекту для указанного пользователя.
// Если пользователь не указан, то используется текущий пользователь.
//
// Параметры:
//   ОбъектДоступа - ЛюбаяСсылка - ссылка на объект, чьи права нужно получить.
//   Пользователь - СправочникСсылка.Пользователи
//   КешДанных - Структура - кеш данных, который требуется для ускорения работы различных механизмов.
//
// Возвращаемое значение:
//   Структура:
//     * Добавление - Булево
//     * Изменение - Булево
//     * Удаление - Булево
//     * УправлениеПравами - Булево
//     * Чтение - Булево
//     * Пользователь - СправочникСсылка.Пользователи
//
Функция ПраваПользователяПоОбъекту(ОбъектДоступа, Пользователь = Неопределено, КешДанных = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если КешДанных <> Неопределено И КешДанных.Свойство("ПраваПоОбъектам") Тогда
		ПраваПоОбъекту = КешДанных.ПраваПоОбъектам[ОбъектДоступа];
		Если ПраваПоОбъекту <> Неопределено И ПраваПоОбъекту.Пользователь = Пользователь Тогда
			Возврат ПраваПоОбъекту;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Права = Новый Структура(
			"Добавление, Изменение, Удаление, УправлениеПравами, Чтение",
			Истина, Истина, Истина, Истина, Истина);
		Возврат Права;
	КонецЕсли;
	
	// Роли Полные права все разрешено	
	Если ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ(Пользователь) Тогда
		Права = Новый Структура(
			"Добавление, Изменение, Удаление, УправлениеПравами, Чтение",
			Истина, Истина, Истина, Истина, Истина);
		Возврат Права;
	КонецЕсли;
	
	Права = Новый Структура(
		"Добавление, Изменение, Удаление, УправлениеПравами, Чтение",
		Ложь, Ложь, Ложь, Ложь, Ложь);
	
	ОбъектыДоступа = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектДоступа);
	ПользователиДляОтбора = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Пользователь);
	ТаблицаПрав = ПраваПользователейПоОбъектам(ОбъектыДоступа, Истина, ПользователиДляОтбора);
	
	Если ТаблицаПрав.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Права, ТаблицаПрав[0]);
	КонецЕсли;
	
	Если КешДанных <> Неопределено И КешДанных.Свойство("ПраваПоОбъектам") Тогда
		Права.Вставить("Пользователь", Пользователь);
		КешДанных.ПраваПоОбъектам[ОбъектДоступа] = Права;
	КонецЕсли;
	
	Возврат Права;
	
КонецФункции

// Возвращает права пользователей на переданный ОбъектДоступа.
//
// Параметры:
//  ОбъектДоступа - ссылна на объект, чьи права нужно получить
//  УчитыватьНеограниченныеПрава - Булево - признак включения в результат пользователей с неограниченными правами на таблицу.
//  Пользователи - Массив, Неопределено - массив пользователей для отбора. Если не установлен, то по всем.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками Пользователь, Чтение, Добавление, Изменение, Удаление, УправлениеПравами
// 
Функция ПраваПользователейПоОбъекту(
			ОбъектДоступа, УчитыватьНеограниченныеПрава, ПользователиОтбор = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
			
	ОбъектыДоступа = Новый Массив;
	ОбъектыДоступа.Добавить(ОбъектДоступа);
	
	Возврат ПраваПользователейПоОбъектам(
		ОбъектыДоступа, УчитыватьНеограниченныеПрава, ПользователиОтбор);
	
КонецФункции

// Возвращает права пользователей на переданные ОбъектыДоступа.
// 
// Параметры:
//  ОбъектыДоступа - Массив Из ЛюбаяСсылка
//  УчитыватьНеограниченныеПрава - Булево
//  Пользователи - Массив Из СправочникСсылка.Пользователи
//   - СправочникСсылка.Пользователи, Неопределено
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  *ОбъектДоступа - ЛюбаяСсылка
//	*Пользователь - СправочникСсылка.Пользователи
//	*Чтение - Булево
//	*Изменение - Булево
//	*Добавление - Булево
//	*Удаление - Булево
//	*УправлениеПравами - Булево
Функция ПраваПользователейПоОбъектам(
			ОбъектыДоступа, УчитыватьНеограниченныеПрава, Пользователи = Неопределено) Экспорт

	ТаблицаПрав = ТаблицаПравСотрудниковПоОбъектам();
	ТаблицаПрав.Колонки.Удалить("Сотрудник");
	ТаблицаПрав.Колонки.Добавить("Пользователь",
		Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	
	Если ОбъектыДоступа.Количество() = 0 Тогда
		Возврат ТаблицаПрав;
	КонецЕсли;
	
	СотрудникиОтбор = Неопределено;
	Если Пользователи <> Неопределено Тогда
		// Вычисление сотрудников для отбора.
		СотрудникиОтбор = Новый Массив;
		ПользователиСотрудников = Новый Соответствие;
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СотрудникиПользователей.Сотрудник КАК Сотрудник,
			|	СотрудникиПользователей.Пользователь КАК Пользователь
			|ИЗ
			|	РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
			|ГДЕ
			|	СотрудникиПользователей.Пользователь В(&Пользователи)
			|ИТОГИ ПО
			|	Сотрудник");
		Запрос.УстановитьПараметр("Пользователи", Пользователи);
		ВыборкаСотрудник = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСотрудник.Следующий() Цикл
			СотрудникиОтбор.Добавить(ВыборкаСотрудник.Сотрудник);
			ПользователиСотрудника = Новый Массив;
			Выборка = ВыборкаСотрудник.Выбрать();
			Пока Выборка.Следующий() Цикл
				ПользователиСотрудника.Добавить(Выборка.Пользователь);
			КонецЦикла;
			ПользователиСотрудников[ВыборкаСотрудник.Сотрудник] = ПользователиСотрудника;
		КонецЦикла;
	КонецЕсли;
	
	ПраваСотрудников = ПраваСотрудниковПоОбъектам(
		ОбъектыДоступа, УчитыватьНеограниченныеПрава, СотрудникиОтбор);
	
	Если Пользователи = Неопределено Тогда
		// Вычисление пользователей по сотрудникам из таблицы прав.
		ПользователиСотрудников = Новый Соответствие;
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СотрудникиПользователей.Сотрудник КАК Сотрудник,
			|	СотрудникиПользователей.Пользователь КАК Пользователь
			|ИЗ
			|	РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
			|ГДЕ
			|	СотрудникиПользователей.Сотрудник В(&Сотрудники)
			|ИТОГИ ПО
			|	Сотрудник");
		Запрос.УстановитьПараметр("Сотрудники", ПраваСотрудников.ВыгрузитьКолонку("Сотрудник"));
		ВыборкаСотрудник = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСотрудник.Следующий() Цикл
			ПользователиСотрудника = Новый Массив;
			Выборка = ВыборкаСотрудник.Выбрать();
			Пока Выборка.Следующий() Цикл
				ПользователиСотрудника.Добавить(Выборка.Пользователь);
			КонецЦикла;
			ПользователиСотрудников[ВыборкаСотрудник.Сотрудник] = ПользователиСотрудника;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрПравСотрудника Из ПраваСотрудников Цикл
		ПользователиСотрудника = ПользователиСотрудников[СтрПравСотрудника.Сотрудник];
		Если ПользователиСотрудника = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Пользователь Из ПользователиСотрудника Цикл
			СтрПравПользователя = ТаблицаПрав.Добавить();
			ЗаполнитьЗначенияСвойств(СтрПравПользователя, СтрПравСотрудника);
			СтрПравПользователя.Пользователь = Пользователь;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаПрав.Свернуть("ОбъектДоступа, Пользователь",
		"Чтение, Изменение, Добавление, Удаление, УправлениеПравами");
	
	Возврат ТаблицаПрав;
	
КонецФункции

// Возвращает таблицу прав для файлов, копируя в нее права владельцев.
// 
Функция ПолучитьПраваСотрудниковПоФайламОтВладельцев(
			ОбъектыДоступа, УчитыватьНеограниченныеПрава, СотрудникиОтбор)
			
	ТаблицаПрав = ТаблицаПравСотрудниковПоОбъектам();		
			
	ТипОбъекта = ТипЗнч(ОбъектыДоступа[0]);
	Запрос = Новый Запрос;
	Если ТипОбъекта = Тип("СправочникСсылка.Файлы") Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Файлы.Ссылка КАК ОбъектДоступа,
			|	Файлы.ВладелецФайла КАК ВладелецФайла
			|ИЗ
			|	Справочник.Файлы КАК Файлы
			|ГДЕ
			|	Файлы.Ссылка В(&ОбъектыДоступа)";
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ВерсииФайлов") Тогда
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВерсииФайлов.Ссылка КАК ОбъектДоступа,
			|	ВерсииФайлов.Владелец.ВладелецФайла КАК ВладелецФайла
			|ИЗ
			|	Справочник.ВерсииФайлов КАК ВерсииФайлов
			|ГДЕ
			|	ВерсииФайлов.Ссылка В(&ОбъектыДоступа)";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ОбъектыДоступа", ОбъектыДоступа);
	ОбъектыСВладельцамиФайлов = Запрос.Выполнить().Выгрузить();
	УникальныеВладельцы = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		УникальныеВладельцы, ОбъектыСВладельцамиФайлов.ВыгрузитьКолонку("ВладелецФайла"));
	
	ПраваВладельцев = ПраваСотрудниковПоОбъектам(
		УникальныеВладельцы, УчитыватьНеограниченныеПрава, СотрудникиОтбор);
	ПраваВладельцев.Индексы.Добавить("ОбъектДоступа");
	
	Для Каждого Стр Из ОбъектыСВладельцамиФайлов Цикл
		СтрокиПравВладельца = ПраваВладельцев.НайтиСтроки(
			Новый Структура("ОбъектДоступа", Стр.ВладелецФайла));
		Для Каждого СтрокаПравВладельца из СтрокиПравВладельца Цикл 
			НоваяСтрока = ТаблицаПрав.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПравВладельца);
			НоваяСтрока.ОбъектДоступа = Стр.ОбъектДоступа;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаПрав;
	
КонецФункции

// Возвращает права пользователя на таблицу, не ограниченные RLS.
//
// Параметры:
//  Таблица - ОбъектМетаданных - объект метаданных конфигурации;
//          - Тип - тип, который можно успешно использовать в функции Метаданные.НайтиПоТипу();
//          - Строка - полное имя объекта метаданных, которое можно успешно использовать
//            		   в функции Метаданные.НайтиПоПолномуИмени().
//
// Возвращаемое значение:
//  Структура - структура с полями Чтение, Изменение.
// 
Функция НеограниченныеПраваНаТаблицу(Таблица, Пользователь = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(ПраваРолей.ЧтениеБезОграничения), ЛОЖЬ) КАК Чтение,
		|	ЕСТЬNULL(МАКСИМУМ(ПраваРолей.ИзменениеБезОграничения), ЛОЖЬ) КАК Изменение
		|ИЗ
		|	РегистрСведений.ПолномочияСотрудников КАК ПолномочияСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
		|		ПО ПолномочияСотрудников.Владелец = СотрудникиВКонтейнерах.Контейнер
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|		ПО СотрудникиВКонтейнерах.Сотрудник = СотрудникиПользователей.Сотрудник
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|		ПО ПолномочияСотрудников.Полномочия = ПрофилиГруппДоступаРоли.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваРолей КАК ПраваРолей
		|		ПО ПрофилиГруппДоступаРоли.Роль = ПраваРолей.Роль
		|ГДЕ
		|	СотрудникиПользователей.Пользователь = &Пользователь
		|	И ПраваРолей.ОбъектМетаданных = &ОбъектМетаданных");
		
	ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Таблица);
	Запрос.УстановитьПараметр("ОбъектМетаданных", ОбъектМетаданных);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура("Чтение, Изменение");
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

// Возвращает таблицу прав объекта, отсортированную по наименованию сотрудника и с колонкой "Картинка"
// 
Функция ПолучитьТаблицуПравДляОтображенияВИнтерфейсе(ОбъектДоступа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаПрав = ДокументооборотПраваДоступа.ПраваСотрудниковПоОбъекту(ОбъектДоступа, Истина);
	
	// Сортировка таблицы и фильтр по ролям пользователей
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиВКонтейнерах.Сотрудник
		|ПОМЕСТИТЬ СотрудникиСРолями
		|ИЗ
		|	РегистрСведений.ПраваРолей КАК ПраваРолей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|		ПО ПраваРолей.Роль = ПрофилиГруппДоступаРоли.Роль
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПолномочияСотрудников КАК ПолномочияСотрудников
		|		ПО ПрофилиГруппДоступаРоли.Ссылка = ПолномочияСотрудников.Полномочия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
		|		ПО ПолномочияСотрудников.Владелец = СотрудникиВКонтейнерах.Контейнер
		|ГДЕ
		|	ПраваРолей.ОбъектМетаданных = &ОбъектМетаданных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПрав.*
		|ПОМЕСТИТЬ ТаблицаПрав
		|ИЗ
		|	&ТаблицаПрав КАК ТаблицаПрав
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПрав.*,
		|	Сотрудники.Наименование КАК НаименованиеСотрудника
		|ИЗ
		|	ТаблицаПрав КАК ТаблицаПрав
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ТаблицаПрав.Сотрудник = Сотрудники.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СотрудникиСРолями КАК СотрудникиСРолями
		|		ПО ТаблицаПрав.Сотрудник = СотрудникиСРолями.Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	НаименованиеСотрудника");
		
	Запрос.УстановитьПараметр("ТаблицаПрав", ТаблицаПрав);
	Запрос.УстановитьПараметр("ОбъектМетаданных",
		ИдентификаторМетаданныхДляПроверкиПрав(ОбъектДоступа));
	
	ТаблицаПрав = Запрос.Выполнить().Выгрузить();
	
	// Добавление картинки
	ТаблицаПрав.Колонки.Добавить("Картинка");
	ТаблицаПрав.ЗаполнитьЗначения(Истина, "Картинка");
	
	Возврат ТаблицаПрав;
	
КонецФункции

Функция ИдентификаторМетаданныхДляПроверкиПрав(ОбъектДоступа)
	
	Результат = Неопределено;
	ТипОбъекта = ТипЗнч(ОбъектДоступа);
	
	Если ТипОбъекта = Тип("СправочникСсылка.ДескрипторыДоступаОбъектов") Тогда
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДоступа, "ИдентификаторОбъектаМетаданных");
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ДескрипторыДоступаРегистров") Тогда
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДоступа, "ОбъектМетаданных");
	Иначе
		Результат = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектДоступа.Метаданные());
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру настроек, которые будут использоваться при получении прав объекта
//
// Параметры:
//  ОбъектДоступа - Ссылка - объект доступа
//  ТипОбъекта - Тип - тип объекта доступа
//	
// Возвращаемое значение: 
//  Структура - структура настроек
//
Функция ПолучитьДопНастройкиДляПолученияПравПоОбъекту(ТипОбъекта) Экспорт
	
	ДопНастройки = Новый Структура;
	ДопНастройки.Вставить("ДобавлятьРуководителейИДелегатов", Истина);
	
	// Исключения
	Если ТипОбъекта = Тип("СправочникСсылка.Инструкции") Тогда
		ДопНастройки.ДобавлятьРуководителейИДелегатов = Ложь;
	КонецЕсли;
	
	// Переопределяемая часть
	ДокументооборотПраваДоступаПереопределяемый.ЗаполнитьДопНастройкиДляПолученияПравПоОбъекту(
		ДопНастройки, ТипОбъекта);
	
	Возврат ДопНастройки;
	
КонецФункции

// Обновляет права доступа по указанному дескриптору
//
Процедура ОбновитьПраваДоступаПоДескриптору(ДескрипторСсылка, Немедленно = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДескрипторСсылка);
	Менеджер.ОбновитьПрава(ДескрипторСсылка,, Немедленно);
	
КонецПроцедуры

// Определяет дескрипторы доступа для указанного объекта доступа и записывает их в базу.
// Параметры:
//  ОбъектДоступа - Ссылка, Объект - объект, дескрипторы которого надо определить или ссылка на него.
//  ОпределятьЗависимыеПрава - Булево - признак необходимости определения зависимых прав.
//  ПротоколРасчетаПрав - Массив, Неопределено - протокол расчет прав для отображения в интерфейсе.
//
// Возвращаемое значение:
//  Таблица значений - итоговая таблица дескрипторов объекта.
//
Функция ОпределитьДескрипторыОбъекта(ОбъектДоступа, ОпределятьЗависимыеПрава = Истина, ПротоколРасчетаПрав = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = РегистрыСведений.ДескрипторыДляОбъектов.СоздатьНаборЗаписей();
	ТаблицаДескрипторов = Набор.ВыгрузитьКолонки();
	
	МетаданныеОбъекта = ОбъектДоступа.Метаданные();
	ПолноеИмя = МетаданныеОбъекта.ПолноеИмя();
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	
	ОписаниеОбъекта = ОписаниеОбъектаДоступа(ОбъектДоступа);
	ОбъектДоступаСсылка = ОписаниеОбъекта.Ссылка;
	Если Не ЗначениеЗаполнено(ОбъектДоступаСсылка) Тогда
		ОбъектДоступаСсылка = ОбъектДоступа.ПолучитьСсылкуНового();
	КонецЕсли;
	
	ЕстьМетодЗаполнитьДескрипторыОбъекта = ОбщегоНазначенияДокументооборотПовтИсп.ЕстьМетодМенеджера(
		ПолноеИмя, "ЗаполнитьДескрипторыОбъекта");
	
	Если ЕстьМетодЗаполнитьДескрипторыОбъекта Тогда
		МенеджерОбъекта.ЗаполнитьДескрипторыОбъекта(ОписаниеОбъекта, ТаблицаДескрипторов, ПротоколРасчетаПрав);
	ИначеЕсли ЭтоОбъектДоступаБЭД(ОбъектДоступа) Тогда
		 ЗаполнитьДескрипторыОбъектаБЭД(ОписаниеОбъекта, ТаблицаДескрипторов, ПротоколРасчетаПрав);
	Иначе
		ЗаполнитьДескрипторыОбъектаСтандартно(ОписаниеОбъекта, ТаблицаДескрипторов);
	КонецЕсли;
	
	// Если используются рабочие группы, другие дескрипторы удаляются,
	// кроме дескрипторов локальных администраторов.
	Если ТаблицаДескрипторов.Найти(1, "ТипДескриптора") <> Неопределено Тогда
		
		КолЗаписей = ТаблицаДескрипторов.Количество();
		Для Сч = 1 По КолЗаписей Цикл
			СтрокаДескриптора = ТаблицаДескрипторов[КолЗаписей - Сч];
			Если СтрокаДескриптора.ТипДескриптора <> 1 // Рабочая группа.
				И СтрокаДескриптора.ТипДескриптора <> 4 Тогда // Локальный администратор.
				ТаблицаДескрипторов.Удалить(СтрокаДескриптора);
			КонецЕсли;
		КонецЦикла;
		
		Если ПротоколРасчетаПрав <> Неопределено Тогда
			ЗаписьПротокола = Новый Структура("Элемент, Описание",
				"РабочаяГруппа", НСтр("ru = 'Рабочая группа'"));
			ПротоколРасчетаПрав.Добавить(ЗаписьПротокола);
		КонецЕсли;
		
	КонецЕсли;
	
	РегистрыСведений.ДескрипторыДляОбъектов.Сохранить(
		ТаблицаДескрипторов, ОбъектДоступаСсылка, ОпределятьЗависимыеПрава);
	
	Возврат ТаблицаДескрипторов;
	
КонецФункции

// Определяет дескрипторы доступа для указанного объекта доступа.
// 
Процедура ЗаполнитьДескрипторыОбъектаСтандартно(ОписаниеОбъекта, ТаблицаДескрипторов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипСсылкиОбъекта = ТипЗнч(ОписаниеОбъекта.Ссылка);
	
	ТипыОбъектовСПравамиПоКасанию = ТипыОбъектовСПравамиПоКасанию();
	Если ТипыОбъектовСПравамиПоКасанию[ТипСсылкиОбъекта] = Неопределено Тогда
		ЗаполнитьДескрипторОбъектаОсновной(ОписаниеОбъекта, ТаблицаДескрипторов);
	КонецЕсли;
	
	ЗаполнитьДескрипторыОбъектаПоРабочейГруппе(ОписаниеОбъекта, ТаблицаДескрипторов);
	
	// Дескриптор для локальных администраторов.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЛокальныхАдминистраторов") Тогда
		ТипыСсылокКОбработке = ДокументооборотПраваДоступаПовтИсп.ТипыСсылокИспользующиеРазрезыДоступа();
		Если ТипыСсылокКОбработке.Найти(ТипСсылкиОбъекта) <> Неопределено Тогда
			ЗаполнитьДескрипторОбъектаДляЛокальныхАдминистраторов(ОписаниеОбъекта, ТаблицаДескрипторов);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ТипыОбъектовСПравамиПоКасанию()
	
	ТипыОбъектовСПравамиПоКасанию = Новый Соответствие;
	
	ТипыОбъектовСПравамиПоКасанию[Тип("СправочникСсылка.ДокументыПредприятия")] = Истина;
	ТипыОбъектовСПравамиПоКасанию[Тип("СправочникСсылка.ШаблоныДокументов")] = Истина;
	ТипыОбъектовСПравамиПоКасанию[Тип("СправочникСсылка.Мероприятия")] = Истина;
	ТипыОбъектовСПравамиПоКасанию[Тип("СправочникСсылка.Проекты")] = Истина;
	
	Возврат ТипыОбъектовСПравамиПоКасанию;
	
КонецФункции

Функция ТипыПапокОбъектовСПравамиПоКасанию()
	
	Результат = Новый Массив;
	
	Результат.Добавить(Тип("СправочникСсылка.ПапкиДокументов"));
	Результат.Добавить(Тип("СправочникСсылка.ПапкиМероприятий"));
	Результат.Добавить(Тип("СправочникСсылка.ПапкиПроектов"));
	
	Возврат Результат;
	
КонецФункции

// Определяет дескриптор доступа для указанного объекта доступа, 
// добавляет строку в переданную таблицу дескрипторов.
// 
Процедура ЗаполнитьДескрипторОбъектаОсновной(ОписаниеОбъекта, ТаблицаДескрипторов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДескрипторСсылка = ПолучитьОсновнойДескриптор(ОписаниеОбъекта);
	Стр = ТаблицаДескрипторов.Добавить();
	Стр.Дескриптор = ДескрипторСсылка;
	Стр.ТипДескриптора = 0;
	
КонецПроцедуры

// Определяет дескрипторы объекта в соответствии с рабочей группой,
// Возвращает Истина, если есть такие дескрипторы.
// 
Функция ЗаполнитьДескрипторыОбъектаПоРабочейГруппе(ОписаниеОбъекта, ТаблицаДескрипторов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипыОбъектовСРабочейГруппой = Метаданные.РегистрыСведений.РабочиеГруппы.Измерения.Объект.Тип;
	Если Не ТипыОбъектовСРабочейГруппой.СодержитТип(ТипЗнч(ОписаниеОбъекта.Ссылка)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РабочиеГруппы.Участник КАК Участник,
		|	РабочиеГруппы.Изменение КАК Изменение,
		|	ЕСТЬNULL(ДескрипторыДоступаОбъектов.Ссылка, НЕОПРЕДЕЛЕНО) КАК Дескриптор
		|ИЗ
		|	РегистрСведений.РабочиеГруппы КАК РабочиеГруппы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|		ПО РабочиеГруппы.Участник = ДескрипторыДоступаОбъектов.КонтейнерСотрудников
		|			И РабочиеГруппы.Изменение = ДескрипторыДоступаОбъектов.Изменение
		|			И (ДескрипторыДоступаОбъектов.ИдентификаторОбъектаМетаданных = &ОбъектМетаданных)
		|ГДЕ
		|	РабочиеГруппы.Объект = &Объект
		|	И РабочиеГруппы.Участник <> НЕОПРЕДЕЛЕНО");
		
	ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОписаниеОбъекта.Ссылка.Метаданные());
	Запрос.УстановитьПараметр("Объект", ОписаниеОбъекта.Ссылка);
	Запрос.УстановитьПараметр("ОбъектМетаданных", ОбъектМетаданных);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Дескриптор = Выборка.Дескриптор;
		Если Не ЗначениеЗаполнено(Дескриптор) Тогда
			ДескрипторОбъект = Справочники.ДескрипторыДоступаОбъектов.СоздатьДескрипторИндивидуальный(
				ОбъектМетаданных, Выборка.Участник, Выборка.Изменение);
			ДескрипторОбъект.Записать();
			Дескриптор = ДескрипторОбъект.Ссылка;
		КонецЕсли;
		
		Стр = ТаблицаДескрипторов.Добавить();
		Стр.Дескриптор = Дескриптор;
		Стр.ТипДескриптора = 1;
		
	КонецЦикла;
	
	ЕстьДескрпиторыРГ = Выборка.Количество() > 0;
	
	Возврат ЕстьДескрпиторыРГ;
	
КонецФункции

// Определяет дескриптор доступа, который будет хранить права лок. администраторов,
// добавляет строку в переданную таблицу дескрипторов.
// 
Процедура ЗаполнитьДескрипторОбъектаДляЛокальныхАдминистраторов(ОписаниеОбъекта, ТаблицаДескрипторов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НайденнаяСтрока = ТаблицаДескрипторов.Найти(0, "ТипДескриптора");
	ОсновнойДескриптор = ?(НайденнаяСтрока = Неопределено, Неопределено, НайденнаяСтрока.Дескриптор);
	ДескрипторСсылка = ПолучитьДескрипторДляЛокальныхАдминистраторов(ОписаниеОбъекта, ОсновнойДескриптор);
	
	Стр = ТаблицаДескрипторов.Добавить();
	Стр.Дескриптор = ДескрипторСсылка;
	Стр.ТипДескриптора = 4;
	
КонецПроцедуры

// Добавляет в таблицу дескрипторов объекта индивидуальный дескриптор,
// найденный по переданному контейнеру пользователей.
// 
Процедура ДобавитьИндивидуальныйДескриптор(
			ОписаниеОбъекта, ТаблицаДескрипторов, КонтейнерПользователей, Изменение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(КонтейнерПользователей) Тогда
		Возврат;
	КонецЕсли;
	
	Дескриптор = ПолучитьИндивидуальныйДескриптор(ОписаниеОбъекта, КонтейнерПользователей, Изменение);
	
	Стр = ТаблицаДескрипторов.Добавить();
	Стр.Дескриптор = Дескриптор;
	Стр.ТипДескриптора = 2; // Индивидуальный дескриптор.
	
КонецПроцедуры

// Заполняет дескрипторы от владельца.
// 
Процедура ЗаполнитьДескрипторыОбъектаОтВладельца(ОписаниеОбъекта, ТаблицаДескрипторов, Владелец) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДескрипторыДляОбъектов.Дескриптор
		|ИЗ
		|	РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
		|ГДЕ
		|	ДескрипторыДляОбъектов.Объект = &Владелец");
		
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТаблицаДескрипторов.Добавить();
			НоваяСтрока.Дескриптор = Выборка.Дескриптор;
			НоваяСтрока.ТипДескриптора = 3;
			НоваяСтрока.ПолученОт = Владелец;
		КонецЦикла;
		
	Иначе
		
		// Если у владельца нет дескрипторов, подставляется индивидуальный дескриптор текущего пользователя.
		// Тогда при появлении дескрипторов у владельца они будут назначены и подчиненному объекту.
		// Если оставить таблицу пустой, этого не произойдет.
		
		НоваяСтрока = ТаблицаДескрипторов.Добавить();
		НоваяСтрока.Дескриптор = ПолучитьИндивидуальныйДескриптор(
			ОписаниеОбъекта, Пользователи.ТекущийПользователь(), Ложь);
		НоваяСтрока.ТипДескриптора = 3;
		НоваяСтрока.ПолученОт = Владелец;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет основной дескриптор доступа для указанного объекта доступа.
// Работает по аналогии с ОпределитьДескрипторыОбъекта, но предназначен для тех случаев,
// когда нужно переопределить только основной дескриптор, не трогая остальные.
// 
Функция ОпределитьДескрипторОбъектаОсновной(ОбъектДоступаСсылка,
			ОпределятьЗависимыеПрава = Истина, ПроверятьНаличиеОсновногоДескриптора = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДескрипторыДляОбъектов.Дескриптор
		|ИЗ
		|	РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
		|ГДЕ
		|	ДескрипторыДляОбъектов.Объект = &Объект
		|	И ДескрипторыДляОбъектов.ТипДескриптора = 0");
		
	Запрос.УстановитьПараметр("Объект", ОбъектДоступаСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Результат = Запрос.Выполнить();
	
	Если ПроверятьНаличиеОсновногоДескриптора И Результат.Пустой() Тогда
		// Объект не использует основной дескриптор, ничего делать не нужно.
		Возврат Неопределено;
	КонецЕсли;
	
	СтарыйДескриптор = Неопределено;
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СтарыйДескриптор = Выборка.Дескриптор;
	КонецЕсли;
	
	НовыйДескриптор = ПолучитьОсновнойДескриптор(ОбъектДоступаСсылка);
	Если НовыйДескриптор <> СтарыйДескриптор Тогда
		
		Набор = РегистрыСведений.ДескрипторыДляОбъектов.СоздатьНаборЗаписей();
		Набор.Отбор.Объект.Установить(ОбъектДоступаСсылка);
		Набор.Отбор.ТипДескриптора.Установить(0);
		
		Стр = Набор.Добавить();
		Стр.Объект = ОбъектДоступаСсылка;
		Стр.Дескриптор = НовыйДескриптор;
		Стр.ТипДескриптора = 0;
		
		Если Не ОпределятьЗависимыеПрава Тогда
			Набор.ДополнительныеСвойства.Вставить("ПропуститьОпределениеЗависимыхПрав", Истина);
		КонецЕсли;
		
		Набор.Записать();
		
	КонецЕсли;
	
	Возврат НовыйДескриптор;
	
КонецФункции

// Определяет дескриптор(ы) доступа для указанного набора записей
// При необходимости создает новый дескриптор и вычисляет права
Функция ОпределитьДескрипторДоступаНабораЗаписей(НаборЗаписей) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МетаданныеНабораЗаписей = НаборЗаписей.Метаданные();
	ИдентификаторОбъектаМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(МетаданныеНабораЗаписей);
	
	Для каждого Запись Из НаборЗаписей Цикл
		
		Дескриптор = ПолучитьДескрипторДоступаЗаписиНабораЗаписей(
			ИдентификаторОбъектаМетаданных, 
			Запись);
		
	КонецЦикла;
	
	Возврат Дескриптор;
	
КонецФункции	

// Удаляет все данные, связанные с правами доступа
// Используется для полного обновления прав доступа ко всем данным информационной базы
Процедура УдалитьВсеДанныеОПравахДоступа(Немедленно = Неопределено) Экспорт
	
	Если Немедленно <> Истина
		И ДокументооборотПраваДоступаПовтИсп.ОтложенноеОбновлениеПравДоступа() Тогда
		
		// Полная очистка очереди.
		РегистрыСведений.ОчередьОбновленияПравДоступа.Очистить(Ложь);
		
		// Задание на удаление прав.
	  	РегистрыСведений.ОчередьОбновленияПравДоступа.Добавить(
			Перечисления.ЗаданияОчередиОбновленияПрав.ОчиститьВсеПрава, Дата("00000000"), 2);
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Удаление всех прав объектов
	Набор = РегистрыСведений.ПраваПоДескрипторамДоступаОбъектов.СоздатьНаборЗаписей();
	Набор.Записать();
	
	Набор = РегистрыСведений.ДескрипторыДляОбъектов.СоздатьНаборЗаписей();
	Набор.Записать();
	
	Выборка = Справочники.ДескрипторыДоступаОбъектов.Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.ПолучитьОбъект();
		Объект.Удалить();	
	КонецЦикла;
	
	// Удаление всех прав регистров 
	Набор = РегистрыСведений.ПраваПоДескрипторамДоступаРегистров.СоздатьНаборЗаписей();
	Набор.Записать();
	
	Выборка = Справочники.ДескрипторыДоступаРегистров.Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.ПолучитьОбъект();
		Объект.Удалить();	
	КонецЦикла;
	
	// Очистка очереди
	РегистрыСведений.ОчередьОбновленияПравДоступа.Очистить();
	
КонецПроцедуры

// Обновляет сведения о правах доступа всех данных информационной базы.
Процедура ОбновитьПраваВсехДанных(Немедленно = Неопределено) Экспорт
	
	Если Немедленно <> Истина
		И ДокументооборотПраваДоступаПовтИсп.ОтложенноеОбновлениеПравДоступа() Тогда
		
		РегистрыСведений.ОчередьОбновленияПравДоступа.Добавить(
			Перечисления.ЗаданияОчередиОбновленияПрав.РассчитатьВсеПрава, Дата("00000000"), 2);
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Обновление прав ролей - если в роли вносились изменения, нужно их принять
	РегистрыСведений.ПраваРолей.ОбновитьДанныеРегистра();
	
	// Обновление состава субъектов
	РегистрыСведений.СоставСубъектовПравДоступа.ОбновитьВсеДанные();
	
	// Объекты, права по которым должны рассчитываться в последнюю очередь
	ЗависимыеОбъекты = ДокументооборотПраваДоступаПереопределяемый.ОбъектыСЗависимымиПравами();
	
	// Пересчет прав
	ОбъектыМеханизмаПрав = ДокументооборотПраваДоступаПовтИсп.ВсеОбъектыМеханизмаПравДоступа();
	Для Каждого ОбъектМетаданных Из ОбъектыМеханизмаПрав Цикл 
		Если ЗависимыеОбъекты.Найти(ОбъектМетаданных) = Неопределено Тогда
			ОпределитьПраваОбъектовТаблицы(ОбъектМетаданных);
		КонецЕсли;
	КонецЦикла;
	
	// Пересчет прав зависимых объектов
	Для Каждого ЗависимыйОбъект Из ЗависимыеОбъекты Цикл 
		ОпределитьПраваОбъектовТаблицы(ЗависимыйОбъект);
	КонецЦикла;
	
	// Права объектов, которые не входят в механизм прав, но имеют файлы.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Файлы.ВладелецФайла
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(Файлы.ВладелецФайла) В (&ДоступныеТипыВладельцев)
		|	И НЕ ТИПЗНАЧЕНИЯ(Файлы.ВладелецФайла) В (&ТипыСсылокМеханизмаПрав)");
	
	Запрос.УстановитьПараметр("ДоступныеТипыВладельцев",
		Метаданные.РегистрыСведений.ДескрипторыДляОбъектов.Измерения.Объект.Тип.Типы());
	Запрос.УстановитьПараметр("ТипыСсылокМеханизмаПрав",
		ДокументооборотПраваДоступаПовтИсп.ТипыСсылокИспользующихДоступПоДескрипторам());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументооборотПраваДоступа.ОпределитьДескрипторыОбъекта(Выборка.ВладелецФайла);
	КонецЦикла;
	
	// Пересчет прав всех регистров
	ТипыВладельцев = Метаданные.ПодпискиНаСобытия.ДокументооборотПраваДоступаПередЗаписьюНабораЗаписей.Источник.Типы();
	Для Каждого Тип Из ТипыВладельцев Цикл 
		
		МетаданныеРегистра = Метаданные.НайтиПоТипу(Тип);
		ПолноеИмя = МетаданныеРегистра.ПолноеИмя(); 
		ОпределитьПраваПоИмениРегистра(ПолноеИмя);
		
	КонецЦикла;
	
КонецПроцедуры	

// Определяет права доступа для всех объектов указанной таблицы
// 
// Параметры:
//  ОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных - Объект метаданных для обновления прав
//  Немедленно - Булево - Расчитать права немедленно, или сделать запись в очереди обновления прав
//
Процедура ОпределитьПраваОбъектовТаблицы(ОбъектМетаданных, Немедленно = Ложь) Экспорт
	
	Если Немедленно <> Истина
		И ДокументооборотПраваДоступаПовтИсп.ОтложенноеОбновлениеПравДоступа() Тогда
		
		РегистрыСведений.ОчередьОбновленияПравДоступа.Добавить(
			ОбъектМетаданных, Дата("00000000"), 2, "ОпределитьПрава");
		
		Возврат;
		
	КонецЕсли;
	
    Запрос = Новый Запрос;
    Запрос.Текст = 
		"ВЫБРАТЬ
		|    Данные.Ссылка
		|ИЗ
		|    [Таблица] КАК Данные";
	
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "[Таблица]",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектМетаданных, "ПолноеИмя"));
	
    Выборка = Запрос.Выполнить().Выбрать();
    
    ПороговоеКоличество = КоличествоОбъектовДляРасчетаПравВОдномСеансе();
	Если Выборка.Количество() < ПороговоеКоличество Тогда
		
		// Непосредственный расчет прав
	
		Пока Выборка.Следующий() Цикл
			Попытка
				ОпределитьДескрипторыОбъекта(Выборка.Ссылка);
			Исключение
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Обновление прав доступа'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка, Выборка.Ссылка.Метаданные(), Выборка.Ссылка,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЦикла;
		
	Иначе
		
		// Распакуем таблицу в отдельные элементы очереди, если их слишком много для расчета за раз 
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне();
		ПараметрыВыполнения.ОжидатьЗавершение = 0;
		ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		
		// Фоновое задание, чтобы не задерживать расчет прав распаковкой
		ДлительныеОперации.ВыполнитьПроцедуру(
			ПараметрыВыполнения,
			"ДокументооборотПраваДоступа.РаспаковатьТаблицуВЗаписиОчередиОбновленияПрав",
			ОбъектМетаданных);
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ОпределитьПраваОбъектовТаблицыДляЛокальныхАдминистраторов(ОбъектМетаданных, Немедленно = Ложь) Экспорт
	
	Если Немедленно <> Истина
		И ДокументооборотПраваДоступаПовтИсп.ОтложенноеОбновлениеПравДоступа() Тогда
		
		РегистрыСведений.ОчередьОбновленияПравДоступа.Добавить(
			ОбъектМетаданных, Дата("00000000"), 2, "ОпределитьПраваДляЛокальныхАдминиистраторов");
		
		Возврат;
		
	КонецЕсли;
	
	НеобработанныеОбъекты = Новый Массив;
	ЛимитИтераций = 10000;
	НомерИтерации = 0;
	ДанныеОбработаны = Ложь;
	Пока Не ДанныеОбработаны И НомерИтерации < ЛимитИтераций Цикл
		
		НомерИтерации = НомерИтерации + 1;
		
	    Запрос = Новый Запрос;
	    Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 10000
			|	Данные.Ссылка
			|ИЗ
			|	[Таблица] КАК Данные
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектовЛокАдм
			|		ПО Данные.Ссылка = ДескрипторыДляОбъектовЛокАдм.Объект
			|			И (ДескрипторыДляОбъектовЛокАдм.ТипДескриптора = 4)
			|ГДЕ
			|	ДескрипторыДляОбъектовЛокАдм.Объект ЕСТЬ NULL
			|	И НЕ Данные.Ссылка В (&НеобработанныеОбъекты)";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "[Таблица]",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектМетаданных, "ПолноеИмя")); 
		Запрос.УстановитьПараметр("НеобработанныеОбъекты", НеобработанныеОбъекты);
		
	    Выборка = Запрос.Выполнить().Выбрать(); 
		Пока Выборка.Следующий() Цикл 
			
			Попытка
				ОписаниеОбъекта = ОписаниеОбъектаДоступа(Выборка.Ссылка);
				Дескриптор = ПолучитьДескрипторДляЛокальныхАдминистраторов(ОписаниеОбъекта);
				Запись = РегистрыСведений.ДескрипторыДляОбъектов.СоздатьМенеджерЗаписи();
				Запись.Объект = Выборка.Ссылка;
				Запись.Дескриптор = Дескриптор;
				Запись.ОбъектМетаданных = ОбъектМетаданных;
				Запись.ТипДескриптора = 4;
				Запись.Записать();
			Исключение
				НеОбработанныеОбъекты.Добавить(Выборка.Ссылка);
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Назначение дескриптора для локальных администраторов'",
						ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка, Выборка.Ссылка.Метаданные(), Выборка.Ссылка,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
		КонецЦикла;
		
		ДанныеОбработаны = Выборка.Количество() = 0;
		
	КонецЦикла;
	
КонецПроцедуры		

// Определяет права доступа для всех объектов указанной таблицы
// 
Процедура РассчитатьПраваОбъектовТаблицы(ОбъектМетаданных, Немедленно = Ложь) Экспорт
	
	Если Немедленно <> Истина
		И ДокументооборотПраваДоступаПовтИсп.ОтложенноеОбновлениеПравДоступа() Тогда
		
		РегистрыСведений.ОчередьОбновленияПравДоступа.Добавить(
			ОбъектМетаданных, Дата("00000000"), 2, "РассчитатьПрава");
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДескрипторыДоступаОбъектов.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|ГДЕ
		|	ДескрипторыДоступаОбъектов.ИдентификаторОбъектаМетаданных = &ИдентификаторОбъектаМетаданных");
	
	Запрос.УстановитьПараметр("ИдентификаторОбъектаМетаданных", ОбъектМетаданных);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры		

// Определяет права доступа для всех записей указанного регистра.
// 
// Параметры:
// 	ПолноеИмя - Строка - полное имя регистра.
// 
Процедура ОпределитьПраваПоИмениРегистра(ПолноеИмя) Экспорт
	
	МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	
	СведенияОПолях = Новый Структура("ОбъектДоступа1, ОбъектДоступа2, ОбъектДоступа3");
	МенеджерРегистра.ЗаполнитьСведенияОПоляхДоступа(СведенияОПолях);
	
	// Пересчет прав для всех уникальных сочетаний правообразующих измерений всех регистров.
	Запрос = Новый Запрос; 
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ";
	
	// Добавление к запросу правообразующих полей
	Запрос.Текст = Запрос.Текст + "Регистр." + СведенияОПолях.ОбъектДоступа1;
	Если СведенияОПолях.ОбъектДоступа2 <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + ", Регистр." + СведенияОПолях.ОбъектДоступа2;
	КонецЕсли;	
	Если СведенияОПолях.ОбъектДоступа3 <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + ", Регистр." + СведенияОПолях.ОбъектДоступа3;
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + "ИЗ " + ПолноеИмя + " КАК Регистр";
	
	Выборка = Запрос.Выполнить().Выбрать();
	НаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
		
		Запись = НаборЗаписей.Добавить();
		Запись[СведенияОПолях.ОбъектДоступа1] = Выборка[СведенияОПолях.ОбъектДоступа1];
		Если СведенияОПолях.ОбъектДоступа2 <> Неопределено Тогда
			Запись[СведенияОПолях.ОбъектДоступа2] = Выборка[СведенияОПолях.ОбъектДоступа2];
		КонецЕсли;
		Если СведенияОПолях.ОбъектДоступа3 <> Неопределено Тогда
			Запись[СведенияОПолях.ОбъектДоступа3] = Выборка[СведенияОПолях.ОбъектДоступа3];
		КонецЕсли;
		
	КонецЦикла;
	
	// Определение дескриптора для набора записей
	ОпределитьДескрипторДоступаНабораЗаписей(НаборЗаписей);
	
КонецПроцедуры

// Обновляет сведения о правах доступа всех разрезов доступа - 
//  организаций, видов документов и т.д.
// 
Процедура ОбновитьПраваВсехРазрезовДоступа(Немедленно = Неопределено) Экспорт
	
	Если Немедленно <> Истина
		И ДокументооборотПраваДоступаПовтИсп.ОтложенноеОбновлениеПравДоступа() Тогда
		
		РегистрыСведений.ОчередьОбновленияПравДоступа.Добавить(
			Перечисления.ЗаданияОчередиОбновленияПрав.РассчитатьПраваРазрезовДоступа,, 2);
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Пересчет прав.
	Запрос = Новый Запрос(
 		"ВЫБРАТЬ
 		|	ДескрипторыДоступаОбъектов.Ссылка
 		|ИЗ
 		|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
 		|ГДЕ
 		|	ДескрипторыДоступаОбъектов.ИдентификаторОбъектаМетаданных В(&Идентификаторы)");
 	
 	Запрос.УстановитьПараметр("Идентификаторы", ОбъектыМетаданныхВсехЗначенийДоступа());
	
	Выборка = Запрос.Выполнить().Выбрать();
 	Пока Выборка.Следующий() Цикл
 		Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(Выборка.Ссылка);
 	КонецЦикла;
	
КонецПроцедуры

Функция ОбъектыМетаданныхВсехЗначенийДоступа() Экспорт
	
	Результат = Новый Массив;
	
	СвойстваВидовДоступа = УправлениеДоступомПовтИспДокументооборот.СвойстваВидовДоступа();
	ТаблицаСвойствВидовДоступа = СвойстваВидовДоступа.Таблица.Получить();
	
	Для Каждого СтрВидаДоступа Из ТаблицаСвойствВидовДоступа Цикл
		Для Каждого ИмяТаблицы Из СтрВидаДоступа.Таблицы Цикл
			Результат.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ИмяТаблицы));
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает Истина если у указанного пользователя есть право регистрации переданного документа.
// 
Функция ЕстьПравоРегистрации(Документ, Пользователь = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	ДокументСсылка = Документ;
	Если Не Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ДокументСсылка)) Тогда
		ДокументСсылка = Документ.Ссылка;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПраваПоОбъекту = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(
		ДокументСсылка, Пользователь);
	
	Возврат ПраваПоОбъекту.Изменение;
	
КонецФункции

// Заполняет ТЧ дескриптора НастройкаПрав по настройкам папки
Процедура ЗаполнитьНастройкиДескриптора(ДескрипторДоступа, Папка) Экспорт
	
	НастройкиПравПапки = ПолучитьНастройкиПравПапки(Папка);
	ДескрипторДоступа.НастройкаПрав.Загрузить(НастройкиПравПапки);
	
КонецПроцедуры

// Возвращает таблицу настроек прав папки
Функция ПолучитьНастройкиПравПапки(Папка) Экспорт
	
	НастройкиПравПапки = Новый ТаблицаЗначений;
	НастройкиПравПапки.Колонки.Добавить("Пользователь");
	НастройкиПравПапки.Колонки.Добавить("Право");
	НастройкиПравПапки.Колонки.Добавить("ПравоЗапрещено");
	НастройкиПравПапки.Колонки.Добавить("НаследованиеРазрешено");
	
	// Собственные права папки
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НастройкиПравОбъектов.Пользователь КАК Пользователь,
		|	НастройкиПравОбъектов.Право КАК Право,
		|	НастройкиПравОбъектов.ПравоЗапрещено КАК ПравоЗапрещено,
		|	НастройкиПравОбъектов.НаследованиеРазрешено КАК НаследованиеРазрешено,
		|	НаследованиеНастроекПравОбъектов.Наследовать КАК Наследовать
		|ИЗ
		|	РегистрСведений.НаследованиеНастроекПравОбъектов КАК НаследованиеНастроекПравОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравОбъектов КАК НастройкиПравОбъектов
		|		ПО (НастройкиПравОбъектов.Объект = НаследованиеНастроекПравОбъектов.Родитель)
		|ГДЕ
		|	НаследованиеНастроекПравОбъектов.Объект = &Объект
		|	И НаследованиеНастроекПравОбъектов.Родитель = &Объект");
		
	Запрос.УстановитьПараметр("Объект", Папка.Ссылка);
	Результат = Запрос.Выполнить();
	
	Наследовать = Истина;
	Если Не Результат.Пустой() Тогда
		ТаблицаПрав = Результат.Выгрузить();
		Наследовать = ТаблицаПрав[0].Наследовать;
		Если ЗначениеЗаполнено(ТаблицаПрав[0].Право) Тогда
			НастройкиПравПапки = ТаблицаПрав;
		КонецЕсли;
	КонецЕсли;
	
	// Наследуемые права
	Если Наследовать Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	НастройкиПравОбъектов.Пользователь,
			|	НастройкиПравОбъектов.Право,
			|	НастройкиПравОбъектов.ПравоЗапрещено,
			|	ИСТИНА КАК НаследованиеРазрешено
			|ИЗ
			|	РегистрСведений.НастройкиПравОбъектов КАК НастройкиПравОбъектов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НаследованиеНастроекПравОбъектов КАК НаследованиеНастроекПравОбъектов
			|		ПО (НаследованиеНастроекПравОбъектов.Объект = &Объект)
			|			И (НаследованиеНастроекПравОбъектов.Родитель <> &Объект)
			|			И (НаследованиеНастроекПравОбъектов.Наследовать)
			|			И НастройкиПравОбъектов.Объект = НаследованиеНастроекПравОбъектов.Родитель
			|			И (НастройкиПравОбъектов.НаследованиеРазрешено)
			|
			|УПОРЯДОЧИТЬ ПО
			|	НастройкиПравОбъектов.Пользователь,
			|	НастройкиПравОбъектов.Право";
			
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НастройкиПравПапки.Добавить(), Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НастройкиПравПапки;
	
КонецФункции

// Включает регл. задание обработки оперативной очереди
Процедура ВключитьОбработкуОперативнойОчереди() Экспорт
	
	Задание = РегламентныеЗадания.НайтиПредопределенное("ДокументооборотОбновлениеПравДоступаОперативное");
	Задание.Использование = Истина;
	Задание.Записать();
	
КонецПроцедуры

// Включает регл. задание обработки долгой очереди
Процедура ВключитьОбработкуДолгойОчереди() Экспорт
	
	Задание = РегламентныеЗадания.НайтиПредопределенное("ДокументооборотОбновлениеПравДоступаДолгое");
	Задание.Использование = Истина;
	Задание.Записать();
	
КонецПроцедуры

// Обновляет права всех дескрипторов, которые зависят от указанного дескриптора
Процедура ОбновитьПраваСвязанныхДескрипторовПоДескриптору(ДескрипторСсылка) Экспорт
	
	Дескрипторы = Новый Массив;
	Дескрипторы.Добавить(ДескрипторСсылка);
	ОбновитьПраваСвязанныхДескрипторовПоДескрипторам(Дескрипторы);
	
КонецПроцедуры

// Обновляет права всех дескрипторов, которые зависят от указанных дескрипторов.
// 
Процедура ОбновитьПраваСвязанныхДескрипторовПоДескрипторам(Дескрипторы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗначениеПустойСсылки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Дескрипторы[0],
		"ИдентификаторОбъектаМетаданных.ЗначениеПустойСсылки");
	ТипСсылки = ТипЗнч(ЗначениеПустойСсылки);
	
	Если Не ЭтоПапка(ТипСсылки) Или ТипСсылки = Тип("СправочникСсылка.ПапкиФайлов") Тогда
		Возврат;
	КонецЕсли;
	
	// Обработка прав содержимого папок.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДескрипторыДоступаОбъектов.Ссылка
		|ИЗ
		|	РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|		ПО ДескрипторыДляОбъектов.Объект = ДескрипторыДоступаОбъектов.Папка
		|ГДЕ
		|	ДескрипторыДляОбъектов.Дескриптор В(&ДескрипторыПапок)");
	
	Запрос.УстановитьПараметр("ДескрипторыПапок", Дескрипторы);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Обновляет права всех дескрипторов, которые содержат ссылку на значение разреза доступа.
// 
Процедура ОбновитьПраваПоЗначениюРазрезаДоступа(РазрезДоступа, Немедленно = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(РазрезДоступа) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Возврат;
	КонецЕсли;
	
	Если Немедленно <> Истина
		И ДокументооборотПраваДоступаПовтИсп.ОтложенноеОбновлениеПравДоступа() Тогда
		
		РегистрыСведений.ОчередьОбновленияПравДоступа.Добавить(
			РазрезДоступа, Дата(1, 1, 1, 0, 0, 1), 2, "ОбновитьПраваПоЗначениюРазрезаДоступа");
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаВидаДоступа = Неопределено;
	ВидДоступа = РазрезДоступаПоЗначению(РазрезДоступа);
	
	ТаблицаРазрезовДоступа = ДокументооборотПраваДоступаПовтИсп.ТаблицаРазрезовДоступа(Ложь);
	СтрокаВидаДоступа = ТаблицаРазрезовДоступа.Найти(ВидДоступа, "ВидДоступа");
	
	Если СтрокаВидаДоступа <> Неопределено Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаДескриптора.Ссылка
			|ИЗ
			|	Справочник.ДескрипторыДоступаОбъектов%1 КАК ТаблицаДескриптора
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РазрешенияДляРазрезовДоступа КАК РазрешенияДляРазрезовДоступа
			|		ПО ТаблицаДескриптора.%2 = РазрешенияДляРазрезовДоступа.РазрезДоступа
			|ГДЕ
			|	РазрешенияДляРазрезовДоступа.Разрешение = &РазрезДоступа");
			
		Запрос.Текст = СтрШаблон(Запрос.Текст,
			?(ЗначениеЗаполнено(СтрокаВидаДоступа.ИмяТЧДескриптора),
				"." + СтрокаВидаДоступа.ИмяТЧДескриптора, ""),
			СтрокаВидаДоступа.ИмяПоляТаблицыДескриптора);
		
		Запрос.УстановитьПараметр("РазрезДоступа", РазрезДоступа);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(Выборка.Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
		
// Переопределяет дескрипторы объектов, зависимых от данного
//
// Параметры:
//  ОбъектВладелец - Ссылка - ссылка на объект, зависимые объекты которого нужно обработать
//  Немедленно - Булево - если ложь, то задание будет поставлено в очередь.
//
Процедура ПереопределитьДескрипторыЗависимыхОбъектов(ОбъектВладелец, Немедленно = Ложь) Экспорт
	
	ТипОбъекта = ТипЗнч(ОбъектВладелец);
	ЭтоПапка = ЭтоПапка(ТипОбъекта);
	
	// Для папок выполняется через очередь (кроме папок файлов).
	Если ДокументооборотПраваДоступаПовтИсп.ОтложенноеОбновлениеПравДоступа() И Немедленно <> Истина
		И ЭтоПапка И ТипОбъекта <> Тип("СправочникСсылка.ПапкиФайлов") Тогда
		
		// Добавление в очередь
		РегистрыСведений.ОчередьОбновленияПравДоступа.Добавить(
			ОбъектВладелец,, 2, "ПереопределитьПраваСодержимогоПапки");
		Возврат;
		
	КонецЕсли;
	
	// Содержимое папок
	Если ЭтоПапка Тогда
		ПапкиСПравамиПоКасанию = ТипыПапокОбъектовСПравамиПоКасанию();
		Если ПапкиСПравамиПоКасанию.Найти(ТипОбъекта) = Неопределено Тогда
			ПереопределитьПраваСодержимогоПапки(ОбъектВладелец, ТипОбъекта);
		КонецЕсли;
	КонецЕсли;
	
	// Дескрипторы от владельца с признаком ПолученОт.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДескрипторыДляОбъектов.Объект КАК ЗависимыйОбъект
		|ИЗ
		|	РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
		|ГДЕ
		|	ДескрипторыДляОбъектов.ПолученОт = &ОбъектВладелец");
		
	Запрос.УстановитьПараметр("ОбъектВладелец", ОбъектВладелец);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ЗапросПоДескрипторамВладельца = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДескрипторыДляОбъектов.Дескриптор
			|ИЗ
			|	РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
			|ГДЕ
			|	ДескрипторыДляОбъектов.Объект = &ОбъектВладелец");
		
		ЗапросПоДескрипторамВладельца.УстановитьПараметр("ОбъектВладелец", ОбъектВладелец);
		ТаблицаДескрипторовВладельца = ЗапросПоДескрипторамВладельца.Выполнить().Выгрузить();
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Набор = РегистрыСведений.ДескрипторыДляОбъектов.СоздатьНаборЗаписей();
			Набор.Отбор.Объект.Установить(Выборка.ЗависимыйОбъект);
			Набор.Отбор.ТипДескриптора.Установить(3);
			
			ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
				Выборка.ЗависимыйОбъект.Метаданные());
			
			Для Каждого СтрВладельца Из ТаблицаДескрипторовВладельца Цикл
				НоваяЗапись = Набор.Добавить();
				НоваяЗапись.Объект = Выборка.ЗависимыйОбъект;
				НоваяЗапись.ОбъектМетаданных = ОбъектМетаданных;
				НоваяЗапись.ТипДескриптора = 3;
				НоваяЗапись.ПолученОт = ОбъектВладелец;
				НоваяЗапись.Дескриптор = СтрВладельца.Дескриптор;
			КонецЦикла;
			
			Набор.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПереопределитьПраваСодержимогоПапки(Папка, ТипПапки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВсеТипыПапокИСодержимого = ДокументооборотПраваДоступаПовтИсп.ТипыПапокИСодержимого();
	МетаданныеСодержимогоПапки = ВсеТипыПапокИСодержимого.Получить(ТипПапки);
	
	Если МетаданныеСодержимогоПапки = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка при обновлении содержимого папки: тип не определен.'");
	КонецЕсли;
	
	// Переопределение прав зависимых папок
	Запрос = Новый Запрос(
		"ВЫБРАТЬ &Папка КАК Объект
		|ПОМЕСТИТЬ ЗависимыеПапки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НаследованиеНастроекПравОбъектов.Объект
		|ИЗ
		|	РегистрСведений.НаследованиеНастроекПравОбъектов КАК НаследованиеНастроекПравОбъектов
		// Проверка флага наследования прав от владельцев
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НаследованиеНастроекПравОбъектов КАК НаследованиеНастроекОтВладельцев
		|		ПО НаследованиеНастроекПравОбъектов.Объект = НаследованиеНастроекОтВладельцев.Объект
		|			И НаследованиеНастроекПравОбъектов.Объект = НаследованиеНастроекОтВладельцев.Родитель
		|			И (НаследованиеНастроекОтВладельцев.Наследовать)
		|ГДЕ
		|	НаследованиеНастроекПравОбъектов.Родитель = &Папка
		|	И НаследованиеНастроекПравОбъектов.Объект <> &Папка
		|	И НаследованиеНастроекПравОбъектов.Наследовать
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДескрипторыДляОбъектов.Объект,
		|	ДескрипторыДляОбъектов.Дескриптор КАК Дескриптор
		|ИЗ
		|	ЗависимыеПапки КАК ЗависимыеПапки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
		|		ПО ЗависимыеПапки.Объект = ДескрипторыДляОбъектов.Объект
		|ГДЕ
		// Дескриптор самой папки определять не нужно
		|	ЗависимыеПапки.Объект <> &Папка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дескриптор");
		
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	
	Запрос.УстановитьПараметр("Папка", Папка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЭтоПапкаФайлов = ТипПапки = Тип("СправочникСсылка.ПапкиФайлов");
	ПереопределитьПраваПоГруппамОбъектов(Выборка, Ложь);
	
	// Переопределение прав содержимого папки и зависимых папок
	Если Не ЭтоПапкаФайлов Тогда
		
		Если ПапкаИмеетИндивидуальныеНастройкиПрав(Папка) Тогда
			
			// Нужно переопределить дескрипторы для объектов,
			// в дескрипторах которых указана папка, не входящая в иерархию измененной папки.
			
			ШаблонТекстаЗапросаПоСодержимому = 
				"ВЫБРАТЬ
				|	ДескрипторыДляОбъектов.Объект,
				|	ДескрипторыДляОбъектов.Дескриптор КАК Дескриптор
				|ИЗ
				|	%ТаблицаСодержимогоПапки% КАК ТаблицаСодержимогоПапки
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
				|			ПО ДескрипторыДляОбъектов.Дескриптор = ДескрипторыДоступаОбъектов.Ссылка
				|		ПО ТаблицаСодержимогоПапки.Ссылка = ДескрипторыДляОбъектов.Объект
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗависимыеПапки КАК ЗависимыеПапки
				|		ПО ТаблицаСодержимогоПапки.Папка = ЗависимыеПапки.Объект
				|ГДЕ
				|	ДескрипторыДляОбъектов.ТипДескриптора = 0
				|	И ДескрипторыДоступаОбъектов.Папка <> Неопределено
				|	И НЕ ДескрипторыДоступаОбъектов.Папка В ИЕРАРХИИ (&Папка)
				|
				|УПОРЯДОЧИТЬ ПО
				|	Дескриптор,
				|	ЗависимыеПапки.Объект";
			
		Иначе
			
			// Нужно переопределить дескрипторы для объектов, которые
			// находятся в папках без индивидуальных настроек.
			// Для проверки инд. настроек достаточно обращения к РС НастройкиПравОбъектов,
			// условие по наследованию уже проверено выше.
			
			ШаблонТекстаЗапросаПоСодержимому = 
				"ВЫБРАТЬ
				|	ДескрипторыДляОбъектов.Объект КАК Объект,
				|	ДескрипторыДляОбъектов.Дескриптор КАК Дескриптор
				|ИЗ
				|	%ТаблицаСодержимогоПапки% КАК ТаблицаСодержимогоПапки
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
				|		ПО ТаблицаСодержимогоПапки.Ссылка = ДескрипторыДляОбъектов.Объект
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗависимыеПапки КАК ЗависимыеПапки
				|		ПО ТаблицаСодержимогоПапки.Папка = ЗависимыеПапки.Объект
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравОбъектов КАК НастройкиПравОбъектов
				|		ПО ТаблицаСодержимогоПапки.Папка = НастройкиПравОбъектов.Объект
				|ГДЕ
				|	НастройкиПравОбъектов.Объект ЕСТЬ NULL";
			
		КонецЕсли;
		
		ЗапросПоСодержимому = Новый Запрос;
		ЗапросПоСодержимому.МенеджерВременныхТаблиц = МВТ;
		ЗапросПоСодержимому.УстановитьПараметр("Папка", Папка);
		
		Для Каждого ОбъектМетаданныхСодержимого Из МетаданныеСодержимогоПапки Цикл
			
			ЗапросПоСодержимому.Текст = СтрЗаменить(ШаблонТекстаЗапросаПоСодержимому, 
				"%ТаблицаСодержимогоПапки%", 
				ОбъектМетаданныхСодержимого.ПолноеИмя());
			
			Выборка = ЗапросПоСодержимому.Выполнить().Выбрать();
			ПереопределитьПраваПоГруппамОбъектов(Выборка);
			
		КонецЦикла;
		
		МВТ.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет права объектов выборки с полями Объект, Дескриптор
// выборка должна быть отсортирована по дескриптору
//
Процедура ПереопределитьПраваПоГруппамОбъектов(Выборка, ОпределятьЗависимыеПрава = Истина) Экспорт
	
	ТекущийДескриптор = Неопределено;
	ДескрипторДляСравнения = Неопределено;	
	ДескрипторИзменился = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Дескриптор <> ДескрипторДляСравнения Тогда
			ДескрипторДляСравнения = Выборка.Дескриптор;
			ТекущийДескриптор = ОпределитьДескрипторОбъектаОсновной(Выборка.Объект, ОпределятьЗависимыеПрава);
			ДескрипторИзменился = Выборка.Дескриптор <> ТекущийДескриптор;
		ИначеЕсли ДескрипторИзменился Тогда
			РегистрыСведений.ДескрипторыДляОбъектов.СохранитьОсновнойДескриптор(
				ТекущийДескриптор, Выборка.Объект, ОпределятьЗависимыеПрава);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляет права всех дескрипторов, которые зависят от указанных 
// групп доступа физлиц
Процедура ОбновитьПраваПоГруппамДоступаФизлиц(ГруппыДоступа) Экспорт
	
	Если ГруппыДоступа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// ДескрипторыДоступаОбъектов
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДескрипторыДоступаОбъектовФизическиеЛица.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов.ФизическиеЛица КАК ДескрипторыДоступаОбъектовФизическиеЛица
		|ГДЕ
		|	ДескрипторыДоступаОбъектовФизическиеЛица.ГруппаДоступа В(&ГруппыДоступа)";

	Запрос.УстановитьПараметр("ГруппыДоступа", ГруппыДоступа);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	// ДескрипторыДоступаРегистров
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДескрипторыДоступаРегистров.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаРегистров КАК ДескрипторыДоступаРегистров
		|ГДЕ
		|	ДескрипторыДоступаРегистров.ОбъектДоступа1 В(&ГруппыДоступа)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДескрипторыДоступаРегистров.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаРегистров КАК ДескрипторыДоступаРегистров
		|ГДЕ
		|	ДескрипторыДоступаРегистров.ОбъектДоступа2 В(&ГруппыДоступа)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДескрипторыДоступаРегистров.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаРегистров КАК ДескрипторыДоступаРегистров
		|ГДЕ
		|	ДескрипторыДоступаРегистров.ОбъектДоступа3 В(&ГруппыДоступа)";

	Запрос.УстановитьПараметр("ГруппыДоступа", ГруппыДоступа);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Справочники.ДескрипторыДоступаРегистров.ОбновитьПрава(ВыборкаДетальныеЗаписи.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляет права объектов, которые зависят от прав на файл.
// 
// Параметры:
// 	ФайлСсылка - СправочникСсылка - ссылка на файл.
// 
Процедура ОбновитьПраваЗависящиеОтФайла(ФайлСсылка) Экспорт
	
	ДокументооборотПраваДоступаПереопределяемый.ОбновитьПраваЗависящиеОтФайла(ФайлСсылка);
	
КонецПроцедуры

Функция ТаблицаПравилОбработкиНастроекПапки() Экспорт
	
	ТаблицаПравил = Новый ТаблицаЗначений;
	
	ТипСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100));
	ТипБулево = Новый ОписаниеТипов("Булево");
	
	ТаблицаПравил.Колонки.Добавить("Настройка", ТипСтрока);
	ТаблицаПравил.Колонки.Добавить("Чтение", ТипБулево);
	ТаблицаПравил.Колонки.Добавить("Добавление", ТипБулево);
	ТаблицаПравил.Колонки.Добавить("Изменение", ТипБулево);
	ТаблицаПравил.Колонки.Добавить("Удаление", ТипБулево);
	ТаблицаПравил.Колонки.Добавить("УправлениеПравами", ТипБулево);
	
	Возврат ТаблицаПравил;
	
КонецФункции

// Заполняет папку дескриптора.
// Это первая вверх по иерархии папка, которая не наследует полностью настройки от родителей.
// 
Процедура ЗаполнитьПапкуДескриптораОбъекта(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	ТекущаяПапка = ОбъектДоступа.Папка;
	
	ПапкаДляДескриптора = Неопределено;
	Пока ПапкаДляДескриптора = Неопределено Цикл
		
		Если ТекущаяПапка = Неопределено Тогда
			ПапкаДляДескриптора = Неопределено;
			Прервать;
		КонецЕсли;
		
		Если ПапкаИмеетИндивидуальныеНастройкиПрав(ТекущаяПапка) Тогда
			ПапкаДляДескриптора = ТекущаяПапка;
		Иначе
			ТекущаяПапка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяПапка, "Родитель");
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПапкаДляДескриптора = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'При поиске папки для дескриптора произошла ошибка: папка не найдена'");
	КонецЕсли;
	
	ДескрипторДоступа.Папка = ПапкаДляДескриптора;
	ДескрипторДоступа.ПапкаПередаетВсеПрава = ОбъектДоступа.Папка = ПапкаДляДескриптора;
	
КонецПроцедуры

// Возвращает пустую таблицу для хранения прав сотрудников по объектам.
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  *ОбъектДоступа - ЛюбаяСсылка
//	*Сотрудник - СправочникСсылка.Сотрудники
//	*Чтение - Булево
//	*Изменение - Булево
//	*Добавление - Булево
//	*Удаление - Булево
//	*УправлениеПравами - Булево
Функция ТаблицаПравСотрудниковПоОбъектам() Экспорт
	
	ТипыОбъектов = Справочники.ТипВсеСсылки().Типы();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТипыОбъектов, Документы.ТипВсеСсылки().Типы());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТипыОбъектов, БизнесПроцессы.ТипВсеСсылки().Типы());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТипыОбъектов, Задачи.ТипВсеСсылки().Типы());
	
	ТипОбъектаДоступа = Новый ОписаниеТипов(ТипыОбъектов);
	ТипБулево = Новый ОписаниеТипов("Булево");
	
	ТаблицаПрав = Новый ТаблицаЗначений;
	ТаблицаПрав.Колонки.Добавить("ОбъектДоступа", ТипОбъектаДоступа);
	ТаблицаПрав.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаПрав.Колонки.Добавить("Чтение", ТипБулево);
	ТаблицаПрав.Колонки.Добавить("Изменение", ТипБулево);
	ТаблицаПрав.Колонки.Добавить("Добавление", ТипБулево);
	ТаблицаПрав.Колонки.Добавить("Удаление", ТипБулево);
	ТаблицаПрав.Колонки.Добавить("УправлениеПравами", ТипБулево);
	
	Возврат ТаблицаПрав;
	
КонецФункции

// Добавляет сотрудников с неограниченными правами в таблицу прав по объектам.
// 
// Параметры:
//   ТаблицаПрав - таблица значений - таблица с правами сотрудников,
//   	структуру таблицы см. в ТаблицаПравСотрудниковПоОбъектам().
// 
Процедура РасширитьТаблицуПравНеограниченнымиПравами(
			ТаблицаПрав, ИдентификаторОМ, ОбъектыДоступа, СотрудникиОтбор = Неопределено) Экспорт
	
	// Права ролей конфигурации.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СотрудникиВКонтейнерах.Сотрудник КАК Сотрудник,
		|	МАКСИМУМ(ПраваРолей.ЧтениеБезОграничения) КАК Чтение,
		|	МАКСИМУМ(ПраваРолей.ИзменениеБезОграничения) КАК Изменение,
		|	МАКСИМУМ(ПраваРолей.ИзменениеБезОграничения) КАК Добавление,
		|	МАКСИМУМ(ПраваРолей.ИзменениеБезОграничения) КАК Удаление,
		|	МАКСИМУМ(ПраваРолей.ЧтениеБезОграничения)
		|		И МАКСИМУМ(ПраваРолей.ИзменениеБезОграничения) КАК УправлениеПравами
		|ИЗ
		|	РегистрСведений.ПолномочияСотрудников КАК ПолномочияСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
		|		ПО ПолномочияСотрудников.Владелец = СотрудникиВКонтейнерах.Контейнер
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|		ПО ПолномочияСотрудников.Полномочия = ПрофилиГруппДоступаРоли.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваРолей КАК ПраваРолей
		|		ПО ПрофилиГруппДоступаРоли.Роль = ПраваРолей.Роль
		|ГДЕ
		|	ПраваРолей.ОбъектМетаданных = &ИдентификаторОМ
		|	И ПраваРолей.ЧтениеБезОграничения = ИСТИНА
		|	%ОтборПоСотруднику%
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиВКонтейнерах.Сотрудник");
	
	// Права ролей расширений.
	ПраваРолейРасширенийХранилище =
		РегистрыСведений.ПараметрыРаботыВерсийРасширений.ПараметрРаботыРасширения(
			"СтандартныеПодсистемы.УправлениеДоступом.ПраваРолей");
	Если ТипЗнч(ПраваРолейРасширенийХранилище) = Тип("ХранилищеЗначения") Тогда
		Отбор = Новый Структура("ОбъектМетаданных", ИдентификаторОМ);
		ПраваРолейРасширений = ПраваРолейРасширенийХранилище.Получить().Скопировать(Отбор);
		Если ПраваРолейРасширений.Количество() > 0 Тогда
			Запрос.УстановитьПараметр("ПраваРолейРасширений", ПраваРолейРасширений);
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ПраваРолейРасширений.Роль КАК Роль,
				|	ПраваРолейРасширений.ОбъектМетаданных КАК ОбъектМетаданных,
				|	ПраваРолейРасширений.ЧтениеБезОграничения КАК ЧтениеБезОграничения,
				|	ПраваРолейРасширений.ИзменениеБезОграничения КАК ИзменениеБезОграничения
				|ПОМЕСТИТЬ ПраваРолейРасширений
				|ИЗ
				|	&ПраваРолейРасширений КАК ПраваРолейРасширений
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВложенныйЗапрос.Сотрудник КАК Сотрудник,
				|	МАКСИМУМ(ВложенныйЗапрос.ЧтениеБезОграничения) КАК Чтение,
				|	МАКСИМУМ(ВложенныйЗапрос.ИзменениеБезОграничения) КАК Изменение,
				|	МАКСИМУМ(ВложенныйЗапрос.ИзменениеБезОграничения) КАК Добавление,
				|	МАКСИМУМ(ВложенныйЗапрос.ИзменениеБезОграничения) КАК Удаление,
				|	МАКСИМУМ(ВложенныйЗапрос.ЧтениеБезОграничения)
				|		И МАКСИМУМ(ВложенныйЗапрос.ИзменениеБезОграничения) КАК УправлениеПравами
				|ИЗ
				|	(ВЫБРАТЬ
				|		СотрудникиВКонтейнерах.Сотрудник КАК Сотрудник,
				|		ПраваРолей.ЧтениеБезОграничения КАК ЧтениеБезОграничения,
				|		ПраваРолей.ИзменениеБезОграничения КАК ИзменениеБезОграничения
				|	ИЗ
				|		РегистрСведений.ПолномочияСотрудников КАК ПолномочияСотрудников
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
				|			ПО ПолномочияСотрудников.Владелец = СотрудникиВКонтейнерах.Контейнер
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
				|			ПО ПолномочияСотрудников.Полномочия = ПрофилиГруппДоступаРоли.Ссылка
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваРолей КАК ПраваРолей
				|			ПО ПрофилиГруппДоступаРоли.Роль = ПраваРолей.Роль
				|	ГДЕ
				|		ПраваРолей.ОбъектМетаданных = &ИдентификаторОМ
				|		И ПраваРолей.ЧтениеБезОграничения = ИСТИНА
				|	    %ОтборПоСотруднику%
				|
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		СотрудникиВКонтейнерах.Сотрудник,
				|		ПраваРолейРасширений.ЧтениеБезОграничения,
				|		ПраваРолейРасширений.ИзменениеБезОграничения
				|	ИЗ
				|		РегистрСведений.ПолномочияСотрудников КАК ПолномочияСотрудников
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
				|			ПО ПолномочияСотрудников.Владелец = СотрудникиВКонтейнерах.Контейнер
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
				|			ПО ПолномочияСотрудников.Полномочия = ПрофилиГруппДоступаРоли.Ссылка
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПраваРолейРасширений КАК ПраваРолейРасширений
				|			ПО (ПрофилиГруппДоступаРоли.Роль = ПраваРолейРасширений.Роль)
				|	ГДЕ
				|		ПраваРолейРасширений.ОбъектМетаданных = &ИдентификаторОМ
				|		И ПраваРолейРасширений.ЧтениеБезОграничения = ИСТИНА
				|		И ПраваРолейРасширений.Роль ССЫЛКА Справочник.ИдентификаторыОбъектовРасширений
				|   	%ОтборПоСотруднику%
				|   ) КАК ВложенныйЗапрос
				|
				|СГРУППИРОВАТЬ ПО
				|	ВложенныйЗапрос.Сотрудник";
		КонецЕсли;
	КонецЕсли;
	
	Если СотрудникиОтбор = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоСотруднику%", "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"%ОтборПоСотруднику%", "И СотрудникиВКонтейнерах.Сотрудник В(&Сотрудники)");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Сотрудники", СотрудникиОтбор);
	Запрос.УстановитьПараметр("ИдентификаторОМ", ИдентификаторОМ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Для Каждого ОбъектДоступа Из ОбъектыДоступа Цикл
			Стр = ТаблицаПрав.Добавить();
			ЗаполнитьЗначенияСвойств(Стр, Выборка);
			Стр.ОбъектДоступа = ОбъектДоступа;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаПрав.Свернуть("ОбъектДоступа, Сотрудник",
		"Чтение, Изменение, Добавление, Удаление, УправлениеПравами");
	
КонецПроцедуры

// Добавляет руководителей и делегатов в таблицу прав пользователей по объектам.
// 
// Параметры:
//   ТаблицаПрав - таблица значений - таблица с правами пользователей,
//   	структуру таблицы см. в ТаблицаПравСотрудниковПоОбъектам().
// 
Процедура РасширитьТаблицуПравРуководителямиИДелегатами(ТаблицаПрав) Экспорт
	
	Если ТаблицаПрав.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаПрав.ОбъектДоступа,
		|	ТаблицаПрав.Сотрудник,
		|	ТаблицаПрав.Чтение,
		|	ТаблицаПрав.Изменение,
		|	ТаблицаПрав.Добавление,
		|	ТаблицаПрав.Удаление,
		|	ТаблицаПрав.УправлениеПравами
		|ПОМЕСТИТЬ ТаблицаПрав
		|ИЗ
		|	&ТаблицаПрав КАК ТаблицаПрав
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПрав.ОбъектДоступа,
		|	СоставСубъектовПравДоступа.Сотрудник,
		|	МАКСИМУМ(ТаблицаПрав.Чтение) КАК Чтение,
		|	МАКСИМУМ(ТаблицаПрав.Изменение) КАК Изменение,
		|	МАКСИМУМ(ТаблицаПрав.Добавление) КАК Добавление,
		|	МАКСИМУМ(ТаблицаПрав.Удаление) КАК Удаление,
		|	МАКСИМУМ(ТаблицаПрав.УправлениеПравами) КАК УправлениеПравами
		|ИЗ
		|	ТаблицаПрав КАК ТаблицаПрав
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектовПравДоступа
		|		ПО ТаблицаПрав.Сотрудник = СоставСубъектовПравДоступа.Субъект
		|ГДЕ 
		|	СоставСубъектовПравДоступа.ОбъектМетаданных = &ИдентификаторОМ
		|		ИЛИ СоставСубъектовПравДоступа.ОбъектМетаданных = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПрав.ОбъектДоступа,
		|	СоставСубъектовПравДоступа.Сотрудник");
	
	ИдентификаторОМ = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
		ТаблицаПрав[0].ОбъектДоступа.Метаданные());
	Запрос.УстановитьПараметр("ИдентификаторОМ", ИдентификаторОМ);
	Запрос.УстановитьПараметр("ТаблицаПрав", ТаблицаПрав);
	
	Выборка = Запрос.Выполнить().Выбрать();
	ТаблицаПрав.Очистить();
	
	// Построчное заполнение вместо выгрузки таблицы, т.к. нужно сохранить типы колонок.
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаПрав.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в таблицу дескрипторов объекта индивидуальные дескрипторы,
// найденные по переданным контейнерам пользователей.
// 
Процедура ДобавитьИндивидуальныеДескрипторы(
			ОписаниеОбъекта, ТаблицаДескрипторов, КонтейнерыДескрипторов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если КонтейнерыДескрипторов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КонтейнерыДескрипторов.Свернуть("КонтейнерСотрудников, Изменение");
	
	Дескрипторы = ПолучитьИндивидуальныеДескрипторы(ОписаниеОбъекта, КонтейнерыДескрипторов);
	
	Для Каждого Дескриптор Из Дескрипторы Цикл
		Стр = ТаблицаДескрипторов.Добавить();
		Стр.Дескриптор = Дескриптор;
		Стр.ТипДескриптора = 2; // Индивидуальный дескриптор.
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработчики подписок и регламентных заданий

// Обработчик подписки ДокументооборотПраваДоступаПередЗаписьюОбъектаДоступа
Процедура ДокументооборотПраваДоступаПередЗаписьюОбъектаДоступа(Источник, Отказ) Экспорт
	
	Если МиграцияПриложенийПереопределяемый.ЭтоЗагрузка(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНовый = Источник.ЭтоНовый();
	ЭтоУдаление = Ложь;
	
	Если Не ЭтоНовый Тогда
		ЭтоУдаление = Источник.ПометкаУдаления И Источник.ПометкаУдаления <>
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ПометкаУдаления");
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый);
	Источник.ДополнительныеСвойства.Вставить("ЭтоУдаление", ЭтоУдаление);
	
	// Проверка прав на изменение объекта в его начальном состоянии.
	// Выполняется для:
	// - объектов, которые имеют собственный алгоритм получения прав на изменение,
	// 		т.к. для таких объектов RLS на изменение отсутствует;
	// - объектов, которые переносятся из одной папки в другую.
	
	ПроверитьПравоУдаленияИзПапки = Ложь;
	Если Источник.ДополнительныеСвойства.Свойство("ПроверитьПравоУдаленияИзПапки") Тогда
		ПроверитьПравоУдаленияИзПапки = Источник.ДополнительныеСвойства.ПроверитьПравоУдаленияИзПапки;
	КонецЕсли;
		
	МетаданныеИсточника = Источник.Метаданные();
	ПолноеИмяМетаданных = МетаданныеИсточника.ПолноеИмя();
	Если ЭтоНовый
			Или (ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга()
					И ОбщегоНазначенияДокументооборотХолдинг.ЭтоЗагрузкаОбъекта(Источник))
			Или Пользователи.ЭтоПолноправныйПользователь()
			Или Не ПроверитьПравоУдаленияИзПапки
				И Не ОбщегоНазначенияДокументооборотПовтИсп.ЕстьМетодМенеджера(
						ПолноеИмяМетаданных, "ПраваСотрудниковПоОбъектам") Тогда
		
		Возврат;
	КонецЕсли;
	
	ПроверяемоеПраво = "Изменение";
	Если ЭтоУдаление Или ПроверитьПравоУдаленияИзПапки Тогда
		ПроверяемоеПраво = "Удаление";
	КонецЕсли;
	
	Права = ПраваПользователяПоОбъекту(Источник.Ссылка);
	НетПрав = Не Права[ПроверяемоеПраво];
	
	Если НетПрав Тогда
		
		ПредставлениеОбъекта = МетаданныеИсточника.ПредставлениеОбъекта;
		Если Не ЗначениеЗаполнено(ПредставлениеОбъекта) Тогда
			ПредставлениеОбъекта = МетаданныеИсточника.Синоним;
		КонецЕсли;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Недостаточно прав для выполнения операции. 
				|Обратитесь к администратору.
				|
				|Объект: %1 (%2)
				|Право: %3'"),
			Источник, ПредставлениеОбъекта, ПроверяемоеПраво);
		
		Если ПроверитьПравоУдаленияИзПапки Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Недостаточно прав для удаления объекта из папки. 
					|Обратитесь к администратору.
					|
					|Объект: %1 (%2)'"),
				Источник, ПредставлениеОбъекта);
		КонецЕсли;
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки ДокументооборотПраваДоступаПередЗаписьюДокумента
Процедура ДокументооборотПраваДоступаПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ДокументооборотПраваДоступаПередЗаписьюОбъектаДоступа(Источник, Отказ);
	
КонецПроцедуры

// Обработчик подписки ДокументооборотПраваДоступаПриЗаписиОбъектаДоступа
Процедура ДокументооборотПраваДоступаПриЗаписиОбъектаДоступа(Источник, Отказ) Экспорт
	
	Если МиграцияПриложенийПереопределяемый.ЭтоЗагрузка(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство(
			"ПропуститьОпределениеДескриптораДоступаИПроверкуПрав") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ЗагрузкаПриоритетныхДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументооборотПраваДоступаХолдинг.ДобавитьЗаданиеОпределитьДескрипторДоступаОбъекта(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ОпределитьДескрипторыОбъекта(Источник);
	
	Если (ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга()
				И ОбщегоНазначенияДокументооборотХолдинг.ЭтоЗагрузкаОбъекта(Источник))
			Или Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьПравоДобавленияВПапку = Ложь;
	Если Источник.ДополнительныеСвойства.Свойство("ПроверитьПравоДобавленияВПапку") Тогда
		ПроверитьПравоДобавленияВПапку = Источник.ДополнительныеСвойства.ПроверитьПравоДобавленияВПапку;
	КонецЕсли;
	
	ПроверяемоеПраво = "Изменение";
	Если Источник.ДополнительныеСвойства.ЭтоНовый Или ПроверитьПравоДобавленияВПапку Тогда
		ПроверяемоеПраво = "Добавление";
	ИначеЕсли Источник.ДополнительныеСвойства.ЭтоУдаление Тогда
		ПроверяемоеПраво = "Удаление";
	КонецЕсли;
	
	Права = ПраваПользователяПоОбъекту(Источник.Ссылка);
	НетПрав = Не Права[ПроверяемоеПраво];
	
	Если НетПрав Тогда
		
		МетаданныеИсточника = Источник.Метаданные();
		ПредставлениеОбъекта = МетаданныеИсточника.ПредставлениеОбъекта;
		Если Не ЗначениеЗаполнено(ПредставлениеОбъекта) Тогда
			ПредставлениеОбъекта = МетаданныеИсточника.Синоним;
		КонецЕсли;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Недостаточно прав для выполнения операции. 
				|Обратитесь к администратору.
				|
				|Объект: %1 (%2)
				|Право: %3'"),
			Источник, ПредставлениеОбъекта, ПроверяемоеПраво);
		
		Если ПроверитьПравоДобавленияВПапку Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Недостаточно прав для добавления объекта в папку. 
					|Обратитесь к администратору.
					|
					|Объект: %1 (%2)'"),
				Источник, ПредставлениеОбъекта);
		КонецЕсли;
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки ДокументооборотПраваДоступаПриЗаписиФайла
Процедура ДокументооборотПраваДоступаПередЗаписьюФайла(Источник, Отказ) Экспорт
	
	Если МиграцияПриложенийПереопределяемый.ЭтоЗагрузка(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНовый = Источник.ЭтоНовый();
	ЭтоУдаление = Ложь;
	
	Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый);
	Источник.ДополнительныеСвойства.Вставить("ЭтоУдаление", ЭтоУдаление);
	
	Если Не ЭтоНовый Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник.Ссылка, "ПометкаУдаления, ВладелецФайла");
		ЭтоУдаление = Источник.ПометкаУдаления <> ЗначенияРеквизитов.ПометкаУдаления;
		Источник.ДополнительныеСвойства.Вставить("СтарыйВладелец", ЗначенияРеквизитов.ВладелецФайла);
		
		Если Не ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга()
				Или Не ОбщегоНазначенияДокументооборотХолдинг.ЭтоЗагрузкаОбъекта(Источник) Тогда
			
			// Проверка прав на удаление файла из папки.
			Если Не Пользователи.ЭтоПолноправныйПользователь()
					И Источник.ВладелецФайла <> ЗначенияРеквизитов.ВладелецФайла
					И ТипЗнч(ЗначенияРеквизитов.ВладелецФайла) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
				
				Права = ПраваПользователяПоОбъекту(Источник.Ссылка);
				Если Не Права.Удаление Тогда
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Недостаточно прав для удаления файла из папки
							|
							|Файл: %1
							|Папка: %2'"),
						Источник,
						ЗначенияРеквизитов.ВладелецФайла);
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки ДокументооборотПраваДоступаПриЗаписиФайла
Процедура ДокументооборотПраваДоступаПриЗаписиФайла(Источник, Отказ) Экспорт
	
	Если МиграцияПриложенийПереопределяемый.ЭтоЗагрузка(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументооборотПраваДоступаХолдинг.ДобавитьЗаданиеОпределитьПраваФайла(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьИзменения = ОпределитьПраваФайла(Источник);
	
	// Проверка прав на запись файла.
	Если ПривилегированныйРежим()
			Или ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ()
			Или (ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга()
					И ОбщегоНазначенияДокументооборотХолдинг.ЭтоЗагрузкаОбъекта(Источник)) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверяемоеПраво = "Изменение";
	Если Источник.ДополнительныеСвойства.ЭтоНовый
			Или ЕстьИзменения И ТипЗнч(Источник.ВладелецФайла) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
		ПроверяемоеПраво = "Добавление";
	ИначеЕсли Источник.ДополнительныеСвойства.ЭтоУдаление Тогда
		ПроверяемоеПраво = "Удаление";
	КонецЕсли;
	
	Права = ПраваПользователяПоОбъекту(Источник.Ссылка);
	НетПрав = Не Права[ПроверяемоеПраво];
	Если НетПрав Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Недостаточно прав для выполнения операции с файлом. 
				|Обратитесь к администратору.
				|
				|Файл: %1
				|Право: %2'"),
			Источник, ПроверяемоеПраво);
		Если ПроверяемоеПраво = "Добавление" Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Недостаточно прав для добавления файла в папку
					|
					|Файл: %1
					|Папка: %2'"),
				Источник, Источник.ВладелецФайла);
		КонецЕсли;
		
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки ДокументооборотПраваДоступаПередЗаписьюНабораЗаписей
Процедура ДокументооборотПраваДоступаПередЗаписьюНабораЗаписей(Источник, Отказ, Замещение) Экспорт
	
	Если МиграцияПриложенийПереопределяемый.ЭтоЗагрузка(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументооборотПраваДоступаХолдинг.ДобавитьЗаданиеОпределитьДескрипторДоступаНабораЗаписей(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ОпределитьДескрипторДоступаНабораЗаписей(Источник);
	
КонецПроцедуры

// Обработчик подписки ДокументооборотПередЗаписьюПравообразующихОбъектов
Процедура ДокументооборотПередЗаписьюПравообразующихОбъектов(Источник, Отказ) Экспорт
	
	Если МиграцияПриложенийПереопределяемый.ЭтоЗагрузка(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтоНовый = Источник.ЭтоНовый();
	Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый);
	
	Если ДокументооборотПраваДоступаПереопределяемый.ДокументооборотПередЗаписьюПравообразующихОбъектов(
			Источник, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка на то, что изменились правообразующие реквизиты.
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.РабочиеГруппы") Тогда
		
		Если ЭтоНовый Тогда
			Возврат;
		КонецЕсли;
		
		СтарыеРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка,
			"Состав, Родитель, ПометкаУдаления");
			
		Если СтарыеРеквизиты.Состав = Неопределено Тогда
			СтарыйСостав = Источник.Состав.ВыгрузитьКолонки();
		Иначе
			СтарыйСостав = СтарыеРеквизиты.Состав.Выгрузить();
		КонецЕсли;
			
		Если Источник.Родитель <> СтарыеРеквизиты.Родитель
			И (СтарыйСостав.Количество() > 0 Или Источник.Состав.Количество() > 0 ) Тогда
			
			Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
			Источник.ДополнительныеСвойства.Вставить("СтарыйРодитель", СтарыеРеквизиты.Родитель);
			
		ИначеЕсли Источник.ПометкаУдаления <> СтарыеРеквизиты.ПометкаУдаления
			Или ОбщегоНазначенияДокументооборотКлиентСервер.ЕстьОтличияВТаблицах(
				Источник.Состав, СтарыйСостав, "Участник") Тогда
			
			Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.Сотрудники") Тогда
		
		СтарыеРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник.Ссылка, "ПометкаУдаления, Подразделение");
			
		Источник.ДополнительныеСвойства.Вставить("СтарыеРеквизиты", СтарыеРеквизиты);
		ИзмененаПометкаУдаления = Источник.ПометкаУдаления <> СтарыеРеквизиты.ПометкаУдаления;
		ИзмененоПодразделение = Источник.Подразделение <> СтарыеРеквизиты.Подразделение;
		
		Если ЭтоНовый Или ИзмененаПометкаУдаления Или ИзмененоПодразделение Тогда
			Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
			СтарыеКонтейнеры = РегистрыСведений.СотрудникиВКонтейнерах.КонтейнерыСотрудников(Источник.Ссылка);
			Источник.ДополнительныеСвойства.Вставить("СтарыеКонтейнеры", СтарыеКонтейнеры);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.Пользователи") Тогда
		
		СтараяПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Источник.Ссылка, "ПометкаУдаления");
		
		ИзмененаПометкаУдаления = Источник.ПометкаУдаления <> СтараяПометкаУдаления;
		Источник.ДополнительныеСвойства.Вставить("ИзмененаПометкаУдаления", ИзмененаПометкаУдаления);
		
		Если ИзмененаПометкаУдаления Тогда
			Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.СтруктураПредприятия") Тогда	
		
		Если Не ЭтоНовый Тогда
			
			СтарыеРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Источник.Ссылка, "Родитель, ПометкаУдаления");
			
			СтарыйРуководитель = СтруктураПредприятия.РуководительПодразделения(Источник.Ссылка, Ложь);
			НовыйРуководитель = СтруктураПредприятия.РуководительПодразделения(Источник, Ложь);
			
			Если НовыйРуководитель <> СтарыйРуководитель Тогда
				Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
				Источник.ДополнительныеСвойства.Вставить("ИзмененРуководитель", Истина);
			КонецЕсли;
			
			Если Источник.ПометкаУдаления <> СтарыеРеквизиты.ПометкаУдаления Тогда
				Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
				Источник.ДополнительныеСвойства.Вставить("ИзмененаПометкаУдаления", Истина);
			КонецЕсли;
			
			СтарыйРодитель = СтарыеРеквизиты.Родитель;
			Если Источник.Родитель <> СтарыйРодитель Тогда
				
				Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
				Источник.ДополнительныеСвойства.Вставить("ИзмененРодитель", Истина);
				Источник.ДополнительныеСвойства.Вставить("СтарыйРодитель", СтарыйРодитель);
				
				// Нужно обновить права руководителей по подразделениям, которые
				// являются старшими непересекающимися родителями для старого и нового состояний элемента.
				// А также обработать изменение состава контейнеров по всем затронутым подразделениям.
				
				СтарыеРодители = Новый Массив;
				НовыеРодители = Новый Массив;
				
				Если ЗначениеЗаполнено(СтарыйРодитель) Тогда
					СтарыеРодители = ОбщегоНазначенияДокументооборот.ВсеРодителиЭлемента(СтарыйРодитель);
					СтарыеРодители.Вставить(0, СтарыйРодитель);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Источник.Родитель) Тогда
					НовыеРодители = ОбщегоНазначенияДокументооборот.ВсеРодителиЭлемента(Источник.Родитель);
					НовыеРодители.Вставить(0, Источник.Родитель);
				КонецЕсли;
				
				ЭлементыКПересчету = НепересекающиесяПодразделения(НовыеРодители, СтарыеРодители);
				Источник.ДополнительныеСвойства.Вставить("ВсеРодителиКПересчету", ЭлементыКПересчету.Все);
				Источник.ДополнительныеСвойства.Вставить("СтаршиеРодителиКПересчету", ЭлементыКПересчету.Старшие);
				
			КонецЕсли;
			
		Иначе
			
			Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.Контрагенты") Тогда
		
		Если Не ЭтоНовый Тогда
			СтараяГруппаДоступа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ГруппаДоступа");
			Если Источник.ГруппаДоступа <> СтараяГруппаДоступа Тогда
				Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.Проекты") Тогда
		
		Если Не ЭтоНовый Тогда
			СтарыеРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Источник.Ссылка, "Руководитель, ПометкаУдаления");
			Если Источник.Руководитель <> СтарыеРеквизиты.Руководитель Тогда
				Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
				Источник.ДополнительныеСвойства.Вставить("ИзмененРуководитель", Истина);
			КонецЕсли;
			Если Источник.ПометкаУдаления <> СтарыеРеквизиты.ПометкаУдаления Тогда
				Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
				Источник.ДополнительныеСвойства.Вставить("ИзмененаПометкаУдаления", Истина);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыСеанса.ЗагрузкаОбработанныхДанныхИзДругойСистемы
			Или ОбщегоНазначенияДокументооборотХолдинг.ЭтоЗагрузкаОбъекта(Источник) Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
	КонецЕсли;
	
КонецПроцедуры	

// Обработчик подписки ДокументооборотПриЗаписиПравообразующихОбъектов
Процедура ДокументооборотПриЗаписиПравообразующихОбъектов(Источник, Отказ) Экспорт
	
	Если МиграцияПриложенийПереопределяемый.ЭтоЗагрузка(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Проверка на то, что правообразующие свойства источника были изменены
	Если Не Источник.ДополнительныеСвойства.Свойство("ЗначениеИзменено") 
		Или Не Источник.ДополнительныеСвойства.ЗначениеИзменено Тогда
		Возврат;
	КонецЕсли;
	
	ТипИсточника = ТипЗнч(Источник);
	
	ОбновитьПромежуточныеДанныеДляРасчетаПрав(Источник, ТипИсточника);
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументооборотПраваДоступаПереопределяемый.ДокументооборотПриЗаписиПравообразующихОбъектов(
		Источник, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументооборотПраваДоступаХолдинг.ДобавитьЗаданиеОбработатьЗаписьПравообразующегоОбъекта(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьЗаписьПравообразующегоОбъекта(Источник);
	
КонецПроцедуры	

// Обновляет закэшированные данные, такие как
//  - состав субъектов прав доступа
//  - состав контейнеров пользователей
// 
Процедура ОбновитьПромежуточныеДанныеДляРасчетаПрав(Источник, ТипИсточника)
	
	Если МиграцияПриложенийПереопределяемый.ЭтоЗагрузка(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументооборотПраваДоступаПереопределяемый.ОбновитьПромежуточныеДанныеДляРасчетаПрав(
			Источник, ТипИсточника) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипИсточника = Тип("СправочникОбъект.Сотрудники") Тогда
		
		РегистрыСведений.СоставСубъектовПравДоступа.ЗаписьСотрудника(Источник);
		
	ИначеЕсли ТипИсточника = Тип("СправочникОбъект.СтруктураПредприятия") Тогда
		
		Если Источник.ДополнительныеСвойства.Свойство("ИзмененаПометкаУдаления") Тогда
			РегистрыСведений.СоставСубъектовПравДоступа.ИзменениеПометкиУдаленияПодразделения(Источник);
		Иначе
			
			ПодразделенияКПересчету = Новый Массив;
			
			Если Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") Тогда
				ПодразделенияКПересчету.Добавить(Источник.Ссылка);
			КонецЕсли;
			
			Если Источник.ДополнительныеСвойства.Свойство("ИзмененРуководитель") Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					ПодразделенияКПересчету,
					ПодразделенияКПересчетуПриИзмененииРуководителя(Источник.Ссылка),
					Истина);
			КонецЕсли;
			
			Если Источник.ДополнительныеСвойства.Свойство("ИзмененРодитель") Тогда
				СтаршиеРодителиКПересчету = Источник.ДополнительныеСвойства.СтаршиеРодителиКПересчету;
				Если ЗначениеЗаполнено(СтаршиеРодителиКПересчету) Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
						ПодразделенияКПересчету, СтаршиеРодителиКПересчету, Истина);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПодразделенияКПересчету) Тогда
				РегистрыСведений.ПодчиненностьПодразделений.ЗаполнитьПоОбъекту(Источник.Ссылка);
				РегистрыСведений.СоставСубъектовПравДоступа.ЗаполнитьВсехРуководителей(
					ПодразделенияКПересчету);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("СправочникОбъект.ЗамещающиеИПомощники") Тогда
		
		РегистрыСведений.СоставСубъектовПравДоступа.ЗаписьЗамещения(Источник.Ссылка);
		
	ИначеЕсли ТипИсточника = Тип("РегистрСведенийНаборЗаписей.ИсполнителиРолей") Тогда
		
		РегистрыСведений.СоставСубъектовПравДоступа.ЗаписьИсполнителейРолей(Источник);
		
	ИначеЕсли ТипИсточника = Тип("КонстантаМенеджерЗначения.ДобавлятьРуководителямДоступПодчиненных") Тогда
		
		Если Источник.Значение Тогда
			РегистрыСведений.СоставСубъектовПравДоступа.ЗаполнитьВсехРуководителей();
		Иначе
			РегистрыСведений.СоставСубъектовПравДоступа.УдалитьВсехРуководителей();
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Обновляет права дескрипторов, доступных сотрудникам, в части руководителей и делегатов.
// 
// Параметры:
//  СотрудникиОтбор - Сотрудник, Массив - сотрудники, по правам которых будут отобраны дескрипторы.
//  Немедленно - Булево - если ложь, то задание будет поставлено в очередь.
// 
Процедура АктуализироватьПраваСотрудниковПоСоставуСубъектов(
			Знач СотрудникиОтбор = Неопределено, Немедленно = Ложь) Экспорт
	
	Если ТипЗнч(СотрудникиОтбор) <> Тип("Массив") Тогда
		СотрудникиОтбор = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СотрудникиОтбор);
	КонецЕсли;
	Если СотрудникиОтбор.Найти(Неопределено) <> Неопределено Тогда // Все сотрудники.
		СотрудникиОтбор = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Неопределено);
	КонецЕсли;
	
	// Проверка на отложенное обновление прав доступа
	Если Немедленно <> Истина
		И ДокументооборотПраваДоступаПовтИсп.ОтложенноеОбновлениеПравДоступа() Тогда
		// Добавление в очередь.
		Для Каждого Сотрудник Из СотрудникиОтбор Цикл
			РегистрыСведений.ОчередьОбновленияПравДоступа.Добавить(
				Сотрудник,, 2, "АктуализироватьПраваРуководителейИДелегатов");
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	// Права по дескрипторам объектов.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПраваПоДескрипторамДоступаОбъектов.Дескриптор
		|ИЗ
		|	РегистрСведений.ПраваПоДескрипторамДоступаОбъектов КАК ПраваПоДескрипторамДоступаОбъектов
		|ГДЕ
		|	НЕ ПраваПоДескрипторамДоступаОбъектов.ОбъектОснование ССЫЛКА Справочник.ЗамещающиеИпомощники
		|	И ПраваПоДескрипторамДоступаОбъектов.Сотрудник В (&Сотрудники)");
	
	Если СотрудникиОтбор = Неопределено
		Или ТипЗнч(СотрудникиОтбор) = Тип("Массив")
			И СотрудникиОтбор.Найти(Неопределено) <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"И ПраваПоДескрипторамДоступаОбъектов.Сотрудник В(&Сотрудники)", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Сотрудники", СотрудникиОтбор);
	
	ДескрипторыКОбновлению = Новый Массив;
	РазмерПорции = ДокументооборотПраваДоступаПовтИсп.РазмерПорцииДескрипторовДляРасширенияПравСоставомСубъектов();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДескрипторыКОбновлению.Добавить(Выборка.Дескриптор);
		Если ДескрипторыКОбновлению.Количество() >= РазмерПорции Тогда
			Справочники.ДескрипторыДоступаОбъектов.ОбновитьПраваПоСоставуСубъектов(ДескрипторыКОбновлению);
			ДескрипторыКОбновлению.Очистить();
		КонецЕсли;
	КонецЦикла;
	Справочники.ДескрипторыДоступаОбъектов.ОбновитьПраваПоСоставуСубъектов(ДескрипторыКОбновлению);
	
	// Права по дескрипторам регистров.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПраваПоДескрипторамДоступаРегистров.Дескриптор
		|ИЗ
		|	РегистрСведений.ПраваПоДескрипторамДоступаРегистров КАК ПраваПоДескрипторамДоступаРегистров
		|ГДЕ
		|	НЕ ПраваПоДескрипторамДоступаРегистров.ОбъектОснование ССЫЛКА Справочник.ЗамещающиеИпомощники
		|	И ПраваПоДескрипторамДоступаРегистров.Сотрудник В (&Сотрудники)");
		
	Если СотрудникиОтбор = Неопределено
		Или ТипЗнч(СотрудникиОтбор) = Тип("Массив")
			И СотрудникиОтбор.Найти(Неопределено) <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"И ПраваПоДескрипторамДоступаРегистров.Сотрудник В(&Сотрудники)", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Сотрудники", СотрудникиОтбор);
	
	ДескрипторыКОбновлению = Новый Массив;
	РазмерПорции = ДокументооборотПраваДоступаПовтИсп.РазмерПорцииДескрипторовДляРасширенияПравСоставомСубъектов();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДескрипторыКОбновлению.Добавить(Выборка.Дескриптор);
		Если ДескрипторыКОбновлению.Количество() >= РазмерПорции Тогда
			Справочники.ДескрипторыДоступаРегистров.ОбновитьПраваПоСоставуСубъектов(ДескрипторыКОбновлению);
			ДескрипторыКОбновлению.Очистить();
		КонецЕсли;
	КонецЦикла;
	Справочники.ДескрипторыДоступаРегистров.ОбновитьПраваПоСоставуСубъектов(ДескрипторыКОбновлению);
	
КонецПроцедуры

// Обновляет права дескрипторов, доступных сотрудникам подразделения, в части руководителей и делегатов.
// 
// Параметры:
//  Подразделения - Массив - подразделения, по правам сотрудников которых будут отобраны дескрипторы.
//  Немедленно - Булево - если Ложь, то задание будет поставлено в очередь.
// 
Процедура АктуализироватьПраваСотрудниковПодразделенийПоССПД(Знач Подразделения, Немедленно = Ложь) Экспорт
	
	Если ТипЗнч(Подразделения) <> Тип("Массив") Тогда
		Подразделения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Подразделения);
	КонецЕсли;
	
	// Проверка на отложенное обновление прав доступа
	Если Немедленно <> Истина 
		И ДокументооборотПраваДоступаПовтИсп.ОтложенноеОбновлениеПравДоступа() Тогда
		// Добавление в очередь
		Для Каждого Подр Из Подразделения Цикл
			РегистрыСведений.ОчередьОбновленияПравДоступа.Добавить(Подр,
				Дата(1, 1, 1, 0, 0, 1), 2, "АктуализироватьПраваРуководителей");
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка КАК Подразделение
		|ПОМЕСТИТЬ ПодразделенияДляОтбора
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Ссылка В ИЕРАРХИИ(&Подразделения)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Ссылка КАК Сотрудник
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПодразделенияДляОтбора КАК ПодразделенияДляОтбора
		|		ПО Сотрудники.Подразделение = ПодразделенияДляОтбора.Подразделение");
	Запрос.УстановитьПараметр("Подразделения", Подразделения);
	СотрудникиПодразделений = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	АктуализироватьПраваСотрудниковПоСоставуСубъектов(СотрудникиПодразделений);
	
КонецПроцедуры

Процедура ПриИзмененииСоставаКонтейнеровСотрудников(Источник, ТипИсточника)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИзмененныеКонтейнеры = Новый Массив;
	
	// Формирование полного массива измененных контейнеров.
	Если ТипИсточника = Тип("СправочникОбъект.Сотрудники") Тогда
		
		НовыеКонтейнеры = РегистрыСведений.СотрудникиВКонтейнерах.КонтейнерыСотрудников(
			Источник.Ссылка);
		СтарыеКонтейнеры = Новый Массив;
		Если Источник.ДополнительныеСвойства.Свойство("СтарыеКонтейнеры") Тогда
			СтарыеКонтейнеры = Источник.ДополнительныеСвойства.СтарыеКонтейнеры;
		КонецЕсли;
		
		ИзмененныеКонтейнеры = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
			НовыеКонтейнеры, СтарыеКонтейнеры);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ИзмененныеКонтейнеры,
			ОбщегоНазначенияКлиентСервер.РазностьМассивов(СтарыеКонтейнеры, НовыеКонтейнеры),
			Истина);
		
	ИначеЕсли ТипИсточника = Тип("СправочникОбъект.Пользователи") Тогда
		
		ИзмененныеКонтейнеры.Добавить(Источник.Ссылка);
		
	ИначеЕсли ТипИсточника = Тип("СправочникОбъект.СтруктураПредприятия") Тогда
		
		ВсеПодразделенияКПересчету = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Источник.Ссылка);
		ВсеРодителиКПересчету = Неопределено;
		Если Источник.ДополнительныеСвойства.Свойство(
				"ВсеРодителиКПересчету", ВсеРодителиКПересчету) Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				ВсеПодразделенияКПересчету, ВсеРодителиКПересчету);
		КонецЕсли;
		
		ИзмененныеПодразделения = Новый Массив;
		СпособыВключенияСотрудников = Новый Массив;
		ИзмененРуководитель = Неопределено;
		ИзмененаПометкаУдаления = Неопределено;
		Источник.ДополнительныеСвойства.Свойство("ИзмененРуководитель", ИзмененРуководитель);
		Источник.ДополнительныеСвойства.Свойство("ИзмененаПометкаУдаления", ИзмененаПометкаУдаления);
		ПеречислениеСпособыВключения = Перечисления.СпособВключенияСотрудниковПодразделения;
		Если ИзмененРуководитель = Истина Тогда
			СпособыВключенияСотрудников.Добавить(ПеречислениеСпособыВключения.ТолькоРуководитель);
			ИзмененныеПодразделения = ПодразделенияКПересчетуПриИзмененииРуководителя(Источник.Ссылка);
		КонецЕсли;
		Если ИзмененаПометкаУдаления = Истина Тогда
			СпособыВключенияСотрудников.Добавить(ПеречислениеСпособыВключения.ТолькоРуководитель);
			СпособыВключенияСотрудников.Добавить(ПеречислениеСпособыВключения.БезПодчиненных);
			СпособыВключенияСотрудников.Добавить(ПеречислениеСпособыВключения.СПодчиненными);
			ИзмененныеПодразделения.Добавить(Источник.Ссылка);
		КонецЕсли;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ПодразделенияКонтейнеры.Ссылка
			|ИЗ
			|	Справочник.ПодразделенияКонтейнеры КАК ПодразделенияКонтейнеры
			|ГДЕ
			|	ПодразделенияКонтейнеры.СпособВключенияПодчиненных
			|		= ЗНАЧЕНИЕ(Перечисление.СпособВключенияСотрудниковПодразделения.СПодчиненными)
			|	И ПодразделенияКонтейнеры.Владелец В (&ВсеПодразделенияКПересчету)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПодразделенияКонтейнеры.Ссылка
			|ИЗ
			|	Справочник.ПодразделенияКонтейнеры КАК ПодразделенияКонтейнеры
			|ГДЕ
			|	ПодразделенияКонтейнеры.Владелец В (&ИзмененныеПодразделения)
			|	И ПодразделенияКонтейнеры.СпособВключенияПодчиненных В (&СпособыВключенияСотрудников)");
		Запрос.УстановитьПараметр("ИзмененныеПодразделения", ИзмененныеПодразделения);
		Запрос.УстановитьПараметр("ВсеПодразделенияКПересчету", ВсеПодразделенияКПересчету);
		Запрос.УстановитьПараметр("СпособыВключенияСотрудников", СпособыВключенияСотрудников);
		ИзмененныеКонтейнеры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
		
	ИначеЕсли ТипИсточника = Тип("СправочникОбъект.Проекты") Тогда
		
		СпособыВключенияУчастников = Новый Массив;
		ИзмененРуководитель = Неопределено;
		ИзмененаПометкаУдаления = Неопределено;
		ПроектнаяКомандаИзменена = Неопределено;
		Источник.ДополнительныеСвойства.Свойство("ИзмененРуководитель", ИзмененРуководитель);
		Источник.ДополнительныеСвойства.Свойство("ИзмененаПометкаУдаления", ИзмененаПометкаУдаления);
		Источник.ДополнительныеСвойства.Свойство("ПроектнаяКомандаИзменена", ПроектнаяКомандаИзменена);
		ПеречислениеСпособыВключения = Перечисления.СпособВключенияУчастниковПроекта;
		Если ИзмененРуководитель = Истина Тогда
			СпособыВключенияУчастников.Добавить(ПеречислениеСпособыВключения.ТолькоРуководитель);
		КонецЕсли;
		Если ИзмененаПометкаУдаления = Истина Тогда
			СпособыВключенияУчастников.Добавить(ПеречислениеСпособыВключения.ТолькоРуководитель);
			СпособыВключенияУчастников.Добавить(ПеречислениеСпособыВключения.ВсеУчастники);
		КонецЕсли;
		Если ПроектнаяКомандаИзменена = Истина Тогда
			СпособыВключенияУчастников.Добавить(ПеречислениеСпособыВключения.ВсеУчастники);
		КонецЕсли;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ПроектыКонтейнеры.Ссылка
			|ИЗ
			|	Справочник.ПроектыКонтейнеры КАК ПроектыКонтейнеры
			|ГДЕ
			|	ПроектыКонтейнеры.Владелец = &ИзмененныйПроект
			|	И ПроектыКонтейнеры.СпособВключенияУчастников В (&СпособыВключенияУчастников)");
		Запрос.УстановитьПараметр("ИзмененныйПроект", Источник.Ссылка);
		Запрос.УстановитьПараметр("СпособыВключенияУчастников", СпособыВключенияУчастников);
		ИзмененныеКонтейнеры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
		
	ИначеЕсли ТипИсточника = Тип("СправочникОбъект.РабочиеГруппы") Тогда
		
		ИзмененныеКонтейнеры.Добавить(Источник.Ссылка);
		ВсеРодители = ОбщегоНазначенияДокументооборот.ВсеРодителиЭлемента(Источник.Ссылка);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИзмененныеКонтейнеры, ВсеРодители);
		
		СтарыйРодитель = Неопределено;
		Если Источник.ДополнительныеСвойства.Свойство("СтарыйРодитель", СтарыйРодитель) Тогда
			ИзмененныеКонтейнеры.Добавить(СтарыйРодитель);
			ВсеРодители = ОбщегоНазначенияДокументооборот.ВсеРодителиЭлемента(СтарыйРодитель);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИзмененныеКонтейнеры, ВсеРодители);
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("РегистрСведенийНаборЗаписей.ИсполнителиРолей") Тогда
		
		ОтборПоРоли = Источник.Отбор.РольИсполнителя;
		Если ОтборПоРоли.Использование Тогда
			ИзмененныеКонтейнеры.Добавить(ОтборПоРоли.Значение);
		Иначе
			РолиНабора = Источник.ВыгрузитьКолонку("РольИсполнителя");
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИзмененныеКонтейнеры, РолиНабора);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИзмененныеКонтейнеры.Количество() > 0 Тогда
		
		ОбновитьПраваПоСоставуКонтейнеров(ИзмененныеКонтейнеры);
		Справочники.ШаблоныДвухфакторнойАутентификации.ПриИзмененииСоставаКонтейнеров(ИзмененныеКонтейнеры);
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает права, зависящие от состава переданных контейнеров.
//
// Параметры:
//  ИзмененныеКонтейнеры - Массив - массив контейнеров.
//  Немедленно - Булево - если Ложь, то задание будет поставлено в очередь.
//
// 
Процедура ОбновитьПраваПоСоставуКонтейнеров(ИзмененныеКонтейнеры, Немедленно = Ложь) Экспорт
	
	Если ДокументооборотПраваДоступаПовтИсп.ОтложенноеОбновлениеПравДоступа() И Не Немедленно Тогда
		Для Каждого Контейнер Из ИзмененныеКонтейнеры Цикл
			РегистрыСведений.ОчередьОбновленияПравДоступа.Добавить(
				Контейнер, Дата(1, 1, 1, 0, 0, 1), 2, "ИзменениеСоставаКонтейнера");
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	// Локальные администраторы.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РазрешенияДляЛокальныхАдминистраторов.Предмет КАК Предмет
		|ИЗ
		|	РегистрСведений.РазрешенияДляЛокальныхАдминистраторов КАК РазрешенияДляЛокальныхАдминистраторов
		|ГДЕ
		|	РазрешенияДляЛокальныхАдминистраторов.Пользователь В(&ИзмененныеКонтейнеры)");
	Запрос.УстановитьПараметр("ИзмененныеКонтейнеры", ИзмененныеКонтейнеры);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РассчитатьПраваОбъектовТаблицы(Выборка.Предмет);
	КонецЦикла;
	
	// Поля дескриптора доступа объекта.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДескрипторыДоступаОбъектов.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|ГДЕ
		|	ДескрипторыДоступаОбъектов.КонтейнерСотрудников В(&ИзмененныеКонтейнеры)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДескрипторыДоступаОбъектовНастройкаПрав.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов.НастройкаПрав КАК ДескрипторыДоступаОбъектовНастройкаПрав
		|ГДЕ
		|	ДескрипторыДоступаОбъектовНастройкаПрав.Пользователь В(&ИзмененныеКонтейнеры)";
	
	Запрос.УстановитьПараметр("ИзмененныеКонтейнеры", ИзмененныеКонтейнеры);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(Выборка.Ссылка);
	КонецЦикла;
	
	// Объектные дескрипторы - дескрипторы процессов и проч.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДескрипторыДоступаОбъектов.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчастникиПроцессов КАК УчастникиПроцессов
		|		ПО ДескрипторыДоступаОбъектов.ОбъектДоступа = УчастникиПроцессов.Процесс
		|ГДЕ
		|	УчастникиПроцессов.Участник В(&ИзмененныеКонтейнеры)";
	
	Запрос.УстановитьПараметр("ИзмененныеКонтейнеры", ИзмененныеКонтейнеры);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(Выборка.Ссылка);
	КонецЦикла;
	
	// Если изменена группа ВсеПользователи, 
	// то выполняется обновление пустых дескрипторов и дескрипторов групп.
	Если ИзмененныеКонтейнеры.Найти(Справочники.РабочиеГруппы.ВсеПользователи) <> Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДескрипторыДоступаОбъектов.Ссылка
			|ИЗ
			|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
			|ГДЕ
			|	ДескрипторыДоступаОбъектов.ЭтоПустойДескриптор
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДескрипторыДоступаОбъектов.Ссылка
			|ИЗ
			|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
			|ГДЕ
			|	ДескрипторыДоступаОбъектов.Группа";
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(Выборка.Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки ДокументооборотПриЗаписиПравообразующихРегистров
Процедура ДокументооборотПриЗаписиПравообразующихРегистров(Источник, Отказ, Замещение) Экспорт
	
	Если МиграцияПриложенийПереопределяемый.ЭтоЗагрузка(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("РеорганизацияРолейСОбъектамиАдресации") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипИсточника = ТипЗнч(Источник);
	ОбновитьПромежуточныеДанныеДляРасчетаПрав(Источник, ТипИсточника);
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументооборотПраваДоступаПереопределяемый.ДокументооборотПриЗаписиПравообразующихРегистров(Источник, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументооборотПраваДоступаХолдинг.ДобавитьЗаданиеОбработатьЗаписьПравообразующегоРегистра(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьЗаписьПравообразующегоРегистра(Источник);
	
КонецПроцедуры

// Обработчик подписки ДокументооборотПраваДоступаПередЗаписьюПравообразующихКонстант
Процедура ДокументооборотПраваДоступаПередЗаписьюПравообразующихКонстант(Источник, Отказ) Экспорт
	
	Если МиграцияПриложенийПереопределяемый.ЭтоЗагрузка(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа()
		И ТипЗнч(Источник) <> Тип("КонстантаМенеджерЗначения.ДокументооборотИспользоватьОграничениеПравДоступа") Тогда
		Возврат;
	КонецЕсли;
	
	Если Константы[Источник.Метаданные().Имя].Получить() <> Источник.Значение Тогда
		Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("КонстантаМенеджерЗначения.ИспользованиеРазрезовДоступа") Тогда
		
		// Сравнение хранилищ значений.
		СтарыйСписок = Константы[Источник.Метаданные().Имя].Получить().Получить();
		
		Если СтарыйСписок = Неопределено Тогда
			// Это первоначальная установка, дополнительные действия не нужны.
			Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Ложь);
			Возврат;
		КонецЕсли;
		
		ИзмененныеРазрезы = Новый Массив;
		НовыйСписок = Источник.Значение.Получить();
		
		Для Каждого ЭлСтарогоСписка Из СтарыйСписок Цикл
			ТекущийРазрез = ЭлСтарогоСписка.Значение;
			ЭлНовогоСписка = НовыйСписок.НайтиПоЗначению(ТекущийРазрез);
			Если ЭлНовогоСписка = Неопределено Или ЭлСтарогоСписка.Пометка <> ЭлНовогоСписка.Пометка Тогда
				ИзмененныеРазрезы.Добавить(ТекущийРазрез);
			КонецЕсли;
		КонецЦикла;
		
		ЕстьИзменения = ИзмененныеРазрезы.Количество() > 0;
		Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", ЕстьИзменения);
		Источник.ДополнительныеСвойства.Вставить("ИзмененныеРазрезы", ИзмененныеРазрезы);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки ДокументооборотПраваДоступаПриЗаписиПравообразующихКонстант
Процедура ДокументооборотПраваДоступаПриЗаписиПравообразующихКонстант(Источник, Отказ) Экспорт
	
	Если МиграцияПриложенийПереопределяемый.ЭтоЗагрузка(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Источник.ДополнительныеСвойства.Свойство("ЗначениеИзменено") 
		Или Не Источник.ДополнительныеСвойства.ЗначениеИзменено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбновитьПромежуточныеДанныеДляРасчетаПрав(Источник, ТипЗнч(Источник));
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа()
		И ТипЗнч(Источник) <> Тип("КонстантаМенеджерЗначения.ДокументооборотИспользоватьОграничениеПравДоступа") Тогда
		Возврат;
	КонецЕсли;
	
	// Вызов переопределяемого метода
	Если ДокументооборотПраваДоступаПереопределяемый.ДокументооборотПраваДоступаПриЗаписиПравообразующихКонстант(
			Источник, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийПриоритетОчередиОбновленияПрав = ПараметрыСеанса.ПриоритетОчередиОбновленияПрав;
	ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = 2; // Долгая очередь
	Попытка
		ОбновитьПовторноИспользуемыеЗначения();
		ПриЗаписиКонстанты(Источник);
		ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = ТекущийПриоритетОчередиОбновленияПрав;
	Исключение	
		ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = ТекущийПриоритетОчередиОбновленияПрав;
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обработчик подписки ДокументооборотПраваДоступаПередЗаписьюПапок
Процедура ДокументооборотПраваДоступаПередЗаписьюПапок(Источник, Отказ) Экспорт
	
	Если МиграцияПриложенийПереопределяемый.ЭтоЗагрузка(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоЗагрузкаОбъектаХолдинг =
		ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга()
			И ОбщегоНазначенияДокументооборотХолдинг.ЭтоЗагрузкаОбъекта(Источник);
	
	ТипыОбъектовСДескрипторами =
		ДокументооборотПраваДоступаПовтИсп.ТипыОбъектовИспользующихДоступПоДескрипторам();
	ЭтоПапкаСНастройкамиПрав = ТипыОбъектовСДескрипторами.Найти(ТипЗнч(Источник)) <> Неопределено;
	
	Если Не ЭтоЗагрузкаОбъектаХолдинг Тогда
		ПредыдущееЗначениеРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка,"Родитель");
		Если Не Источник.ЭтоНовый() И Источник.Родитель <> ПредыдущееЗначениеРодитель Тогда
			
			Если ЗначениеЗаполнено(Источник.Родитель)
				И (Источник.Родитель = Источник.Ссылка 
					Или Источник.Родитель.ПринадлежитЭлементу(Источник.Ссылка)) Тогда
				ВызватьИсключение НСтр("ru = 'Нельзя перемещать папки в собственные подпапки.'");
			КонецЕсли;
			
			Если ЭтоПапкаСНастройкамиПрав Тогда
				СообщениеОбОшибке = "";
				Права = ПраваПользователяПоОбъекту(Источник.Ссылка);
				Если Не Права.Изменение Тогда
					СообщениеОбОшибке = НСтр("ru = 'Недостаточно прав на изменение папки.'");
					ВызватьИсключение СообщениеОбОшибке;
				КонецЕсли;
				Если Не ЕстьПравоПеремещенияПапки(
					ПредыдущееЗначениеРодитель, Источник.Родитель, СообщениеОбОшибке) Тогда
					ВызватьИсключение СообщениеОбОшибке;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоПапкаСНастройкамиПрав Тогда
		УстановитьПривилегированныйРежим(Истина);
		РегистрыСведений.НаследованиеНастроекПравОбъектов.Обновить(Источник);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик регламентного задания ДокументооборотОбновлениеПравДоступаОперативное
Процедура ДокументооборотОбновлениеПравДоступаОперативное() Экспорт
	
	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ДокументооборотОбновлениеПравДоступаОперативное, Отказ);
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	ОбработатьОчередьОбновленияПравДоступа(1);
	
КонецПроцедуры

Процедура ПередЗаписьюРазрезаДоступа(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если МиграцияПриложенийПереопределяемый.ЭтоЗагрузка(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоНовый()
		Или Источник.Метаданные().Иерархический
			И Источник.Родитель <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "Родитель") Тогда
		Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
	КонецЕсли;
	
	Если Не Источник.ЭтоНовый()
		И (ТипЗнч(Источник) = Тип("СправочникОбъект.ГруппыДоступаКонтрагентов")
			Или  ТипЗнч(Источник) = Тип("СправочникОбъект.ГруппыДоступаФизическихЛиц")) Тогда
		
		СтараяТЧДоступ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "Доступ");
		СтарыеУчастники = СтараяТЧДоступ.Выгрузить().ВыгрузитьКолонку("Участник");
		НовыеУчастники = Источник.Доступ.ВыгрузитьКолонку("Участник");
		Если Не ОбщегоНазначения.КоллекцииИдентичны(СтарыеУчастники, НовыеУчастники) Тогда
			Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписиРазрезаДоступа(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Проверка на то, что правообразующие свойства источника были изменены
	Если Не Источник.ДополнительныеСвойства.Свойство("ЗначениеИзменено") 
		Или Не Источник.ДополнительныеСвойства.ЗначениеИзменено Тогда
		Возврат;
	КонецЕсли;
	
	// Актуализация данных РС РазрешенияДляРазрезовДоступа.
	МетаданныеИсточника = Источник.Метаданные();
	ЭтоИерархическийСправочник = МетаданныеИсточника.Иерархический;
	ЭлементыРазрешений = Новый Массив;
	
	Если Не ЭтоИерархическийСправочник Тогда
		
		ЭлементыРазрешений.Добавить(Источник.Ссылка);
		
	Иначе
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ТаблицаЗначенияДоступа.Ссылка
			|ИЗ
			|	#ТаблицаЗначенияДоступа КАК ТаблицаЗначенияДоступа
			|ГДЕ
			|	ТаблицаЗначенияДоступа.Ссылка В ИЕРАРХИИ(&Родитель)
			|	И НЕ ТаблицаЗначенияДоступа.ЭтоГруппа");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаЗначенияДоступа", МетаданныеИсточника.ПолноеИмя());
			
		Если МетаданныеИсточника.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияЭлементов Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ ТаблицаЗначенияДоступа.ЭтоГруппа", "");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Родитель", Источник.Ссылка);
		ЭлементыРазрешений = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	КонецЕсли;
	
	Для Каждого ЭлементРазрешения Из ЭлементыРазрешений Цикл
		
		ВозможныеРазрешения = Новый Массив;
		ВозможныеРазрешения.Добавить(ЭлементРазрешения);
		ВозможныеРазрешения.Добавить(ДокументооборотПраваДоступа.РазрезДоступаПоЗначению(ЭлементРазрешения));
		
		Если ЭтоИерархическийСправочник Тогда
			Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементРазрешения, "Родитель");
			Пока ЗначениеЗаполнено(Родитель) Цикл
				ВозможныеРазрешения.Добавить(Родитель);
				Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Родитель, "Родитель");
			КонецЦикла;
		КонецЕсли;
		
		// Обновление разрешений для элемента.
		Набор = РегистрыСведений.РазрешенияДляРазрезовДоступа.СоздатьНаборЗаписей();
		Набор.Отбор.РазрезДоступа.Установить(ЭлементРазрешения);
		
		Для Каждого Разрешение Из ВозможныеРазрешения Цикл
			Стр = Набор.Добавить();
			Стр.РазрезДоступа = ЭлементРазрешения;
			Стр.Разрешение = Разрешение;
		КонецЦикла;
		
		Набор.Записать();
		ОбновитьПраваПоЗначениюРазрезаДоступа(ЭлементРазрешения);
		
	КонецЦикла;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Обработчик регламентного задания ДокументооборотОбновлениеПравДоступаДолгое
Процедура ДокументооборотОбновлениеПравДоступаДолгое() Экспорт
	
	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ДокументооборотОбновлениеПравДоступаДолгое, Отказ);
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ОбновитьПовторноИспользуемыеЗначения();
	
	ТекущийПриоритетОчередиОбновленияПрав = ПараметрыСеанса.ПриоритетОчередиОбновленияПрав;
	ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = 2; 
	
	ОбработатьОчередьОбновленияПравДоступа(2);
	
	ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = ТекущийПриоритетОчередиОбновленияПрав;
	
КонецПроцедуры

Процедура ОбработатьОчередьОбновленияПравДоступа(Приоритет) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = Приоритет;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Права доступа'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,,
		Приоритет,
		НСтр("ru = 'Начато обновление прав доступа'"));
	
	Количество = РегистрыСведений.ОчередьОбновленияПравДоступа.ОбработатьПорцию();
	Пока Количество <> 0 Цикл
		
		Количество = РегистрыСведений.ОчередьОбновленияПравДоступа.ОбработатьПорцию();
		
	КонецЦикла;	

	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Права доступа'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,,
		Приоритет,
		НСтр("ru = 'Закончено обновление прав доступа'"));
	
КонецПроцедуры

// Возвращает метаданные объектов, для которых осуществляется поиск запрещенных участников доступа.
//
// Возвращаемое значение:
//  Массив - объекты метаданных.
//
Функция МетаданныеОбъектовДляПоискаЗапрещенныхУчастников() Экспорт
	
	Результат = Новый Массив();
	Результат.Добавить(Метаданные.Справочники.ДокументыПредприятия);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда
		Результат.Добавить(Метаданные.Справочники.Мероприятия);
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда
		Результат.Добавить(Метаданные.Справочники.Проекты);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет необходимые действия при записи правообразующих регистров.
//
// Параметры:
//	НаборЗаписей - РегистрСведенийНаборЗаписей - Набор, записи которого необходимо обработать.
//
Процедура ОбработатьЗаписьПравообразующегоРегистра(НаборЗаписей) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Тип = ТипЗнч(НаборЗаписей);
	Если Тип = Тип("РегистрСведенийНаборЗаписей.ДескрипторыДляОбъектов") Тогда
		
		УникальныеОбъекты = Новый Соответствие;
		Для Каждого Запись Из НаборЗаписей Цикл
			Если УникальныеОбъекты.Получить(Запись.Объект) = Неопределено Тогда
				УникальныеОбъекты.Вставить(Запись.Объект, Истина);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого УникальныйОбъект Из УникальныеОбъекты Цикл
			
			ОбъектДоступа = УникальныйОбъект.Ключ;
			
			Если ЭтоПапка(ТипЗнч(ОбъектДоступа)) Тогда
				ОбновитьПраваПоПапке(ОбъектДоступа);
			КонецЕсли;
			
			// Переопределение дескрипторов связанных объектов
			Если Не НаборЗаписей.ДополнительныеСвойства.Свойство("ПропуститьОпределениеЗависимыхПрав")
					Или Не НаборЗаписей.ДополнительныеСвойства.ПропуститьОпределениеЗависимыхПрав Тогда
				
				ПереопределитьДескрипторыЗависимыхОбъектов(ОбъектДоступа);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Тип = Тип("РегистрСведенийНаборЗаписей.УдалитьРазрешенияДоступаОбщие") Тогда
		
		ОтборПоЗначениюДоступа = НаборЗаписей.Отбор.ЗначениеДоступа;
		Если Не ОтборПоЗначениюДоступа.Использование Тогда
			Возврат;
		КонецЕсли;
		
		ЗначениеСсылки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтборПоЗначениюДоступа.Значение, "Ссылка");
		Если ЗначениеСсылки = Неопределено Тогда
			Если Не НаборЗаписей.ОбменДанными.Загрузка Или НаборЗаписей.Количество() = 0 Тогда
				// Это удаление элемента, ставить его в очередь не нужно.
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьПраваПоЗначениюРазрезаДоступа(ОтборПоЗначениюДоступа.Значение);
		
	ИначеЕсли Тип = Тип("РегистрСведенийНаборЗаписей.УдалитьРазрешенияДоступаИсключительные") Тогда
		
		ПредметыКОбновлению =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ИзмененныеПредметы");
		
		Если Не ЗначениеЗаполнено(ПредметыКОбновлению) Тогда
			ОтборПоПредмету = НаборЗаписей.Отбор.Предмет;
			Если ОтборПоПредмету.Использование Тогда
				ПредметыКОбновлению = Новый Массив;
				ПредметыКОбновлению.Добавить(ОтборПоПредмету.Значение);
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПредметыКОбновлению) Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ДескрипторыДоступаОбъектов.Ссылка
			|ИЗ
			|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
			|ГДЕ
			|	ДескрипторыДоступаОбъектов.ИдентификаторОбъектаМетаданных В(&ПредметыКОбновлению)
			|	И ДескрипторыДоступаОбъектов.КонтейнерСотрудников = НЕОПРЕДЕЛЕНО
			|	И НЕ ДескрипторыДоступаОбъектов.ДляЛокальныхАдминистраторов");
			
		Запрос.УстановитьПараметр("ПредметыКОбновлению", ПредметыКОбновлению);
		
		ТекущийПриоритетОчередиОбновленияПрав = ПараметрыСеанса.ПриоритетОчередиОбновленияПрав;
		ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = 2; // Долгая очередь
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(Выборка.Ссылка);
		КонецЦикла;
		
		ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = ТекущийПриоритетОчередиОбновленияПрав;
		
	ИначеЕсли Тип = Тип("РегистрСведенийНаборЗаписей.РазрешенияДляЛокальныхАдминистраторов") Тогда
		
		ПредметыКОбновлению =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, "ИзмененныеПредметы");
		
		Если Не ЗначениеЗаполнено(ПредметыКОбновлению) Тогда
			ОтборПоПредмету = НаборЗаписей.Отбор.Предмет;
			Если ОтборПоПредмету.Использование Тогда
				ПредметыКОбновлению = Новый Массив;
				ПредметыКОбновлению.Добавить(ОтборПоПредмету.Значение);
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПредметыКОбновлению) Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ДескрипторыДоступаОбъектов.Ссылка
			|ИЗ
			|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
			|ГДЕ
			|	ДескрипторыДоступаОбъектов.ИдентификаторОбъектаМетаданных В(&ПредметыКОбновлению)
			|	И ДескрипторыДоступаОбъектов.КонтейнерСотрудников = НЕОПРЕДЕЛЕНО
			|	И ДескрипторыДоступаОбъектов.ДляЛокальныхАдминистраторов");
			
		Запрос.УстановитьПараметр("ПредметыКОбновлению", ПредметыКОбновлению);
		
		ТекущийПриоритетОчередиОбновленияПрав = ПараметрыСеанса.ПриоритетОчередиОбновленияПрав;
		ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = 2; // Долгая очередь
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(Выборка.Ссылка);
		КонецЦикла;
		
		ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = ТекущийПриоритетОчередиОбновленияПрав;
		
	ИначеЕсли Тип = Тип("РегистрСведенийНаборЗаписей.РазрешенияДляРазрезовДоступа") Тогда
		
		// Обновление прав выполняется в ПриЗаписиРазрезаДоступа
		
	ИначеЕсли Тип = Тип("РегистрСведенийНаборЗаписей.ИсполнителиРолей") Тогда
		
		ПриИзмененииСоставаКонтейнеровСотрудников(НаборЗаписей, Тип);
		
	ИначеЕсли Тип = Тип("РегистрСведенийНаборЗаписей.НастройкиПравОбъектов") Тогда
		
		Папка = НаборЗаписей.Отбор.Объект.Значение;
		Если ЗначениеЗаполнено(Папка) Тогда
			ПапкаОбъект = Папка.ПолучитьОбъект();
			Если ПапкаОбъект <> Неопределено Тогда  // Проверка на удаление папки
				
				// Аналог ОпределитьДескрипторыОбъекта, но с принудительной записью
				// для обработки изменения ресурса НаследованиеРазрешено
				
				ТаблицаДескрипторов = ОпределитьДескрипторыОбъекта(ПапкаОбъект);
				ТаблицаДескрипторов.ЗаполнитьЗначения(Папка, "Объект");
				ТаблицаДескрипторов.ЗаполнитьЗначения(
					ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Папка.Метаданные()), "ОбъектМетаданных");
				
				НаборЗаписей = РегистрыСведений.ДескрипторыДляОбъектов.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Объект.Установить(Папка);
				НаборЗаписей.Загрузить(ТаблицаДескрипторов);
				НаборЗаписей.Записать();
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Тип = Тип("РегистрСведенийНаборЗаписей.НаследованиеНастроекПравОбъектов") Тогда
		
		Если НаборЗаписей.Количество() > 0 Тогда
			Папка = НаборЗаписей.Отбор.Объект.Значение;
			Если ЗначениеЗаполнено(Папка)
				// Для новых папок ничего не делаем.
					И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Папка, "Ссылка") <> Неопределено Тогда
				ОпределитьДескрипторыОбъекта(Папка);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Тип = Тип("РегистрСведенийНаборЗаписей.УчастникиПроцессов") Тогда
		
		// Обновление прав файлов процессов.
		МассивПроцессов = Новый Массив;
		
		Процесс = НаборЗаписей.Отбор.Процесс.Значение;
		Если ЗначениеЗаполнено(Процесс) Тогда
			МассивПроцессов.Добавить(Процесс);
		Иначе
			Для Каждого СтрокаУчастника Из НаборЗаписей Цикл
				Процесс = СтрокаУчастника.Процесс;
				Если МассивПроцессов.Найти(Процесс) = Неопределено Тогда
					МассивПроцессов.Добавить(Процесс);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОбновитьПраваЗависящиеОтСоставаУчастниковПроцесса(МассивПроцессов);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет необходимые действия при записи правообразующих регистров.
//
// Параметры:
//	Объект - СправочникОбъект - Набор, записи которого необходимо обработать.
//
Процедура ОбработатьЗаписьПравообразующегоОбъекта(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Тип = ТипЗнч(Объект);
	
	Если Тип = Тип("СправочникОбъект.РабочиеГруппы") Тогда
		
		ПриИзмененииСоставаКонтейнеровСотрудников(Объект, Тип);
		
	ИначеЕсли Тип = Тип("СправочникОбъект.Сотрудники") Тогда
		
		// Состав контейнеров.
		ПриИзмененииСоставаКонтейнеровСотрудников(Объект, Тип);
		
		// Изменение подразделения.
		СтарыеРеквизиты = Объект.ДополнительныеСвойства.СтарыеРеквизиты;
		Если Объект.Подразделение <> СтарыеРеквизиты.Подразделение
				И Не Объект.ПометкаУдаления Тогда
			АктуализироватьПраваСотрудниковПоСоставуСубъектов(Объект.Ссылка);
		КонецЕсли;
		
		// Отмена пометки руководителей и делегатов.
		Если Не Объект.ПометкаУдаления
				И Объект.ПометкаУдаления <> СтарыеРеквизиты.ПометкаУдаления Тогда
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	Сотрудники.Ссылка КАК Сотрудник
				|ИЗ
				|	РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
				|		ПО ПодчиненностьПодразделений.Подчиненное = Сотрудники.Подразделение
				|ГДЕ
				|	ПодчиненностьПодразделений.РуководительВышестоящего = &Сотрудник
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ЗамещающиеИПомощники.Сотрудник
				|ИЗ
				|	Справочник.ЗамещающиеИПомощники КАК ЗамещающиеИПомощники
				|ГДЕ
				|	ЗамещающиеИПомощники.Замещающий = &Сотрудник");
			Запрос.УстановитьПараметр("Сотрудник", Объект.Ссылка);
			
			СотрудникиДляОбновленияПрав = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
			АктуализироватьПраваСотрудниковПоСоставуСубъектов(СотрудникиДляОбновленияПрав);
			
		КонецЕсли;
		
	ИначеЕсли Тип = Тип("СправочникОбъект.Пользователи") Тогда
		
		ПриИзмененииСоставаКонтейнеровСотрудников(Объект, Тип);
		
	ИначеЕсли Тип = Тип("СправочникОбъект.СтруктураПредприятия") Тогда
		
		ПриИзмененииСоставаКонтейнеровСотрудников(Объект, Тип);
		
		ПодразделенияКПересчету = Новый Массив;
		
		Если Объект.ДополнительныеСвойства.Свойство("ИзмененаПометкаУдаления")
				Или Объект.ДополнительныеСвойства.Свойство("ИзмененРуководитель") Тогда
			
			ПодразделенияКПересчету.Добавить(Объект.Ссылка);
		КонецЕсли;
		
		Если Объект.ДополнительныеСвойства.Свойство("ИзмененРодитель") Тогда
			// Нужно обновить права руководителей по подразделениям, которые
			// являются старшими непересекающимися родителями для старого и нового состояний элемента.
			СтаршиеРодителиКПересчету = Объект.ДополнительныеСвойства.СтаршиеРодителиКПересчету;
			Если ЗначениеЗаполнено(СтаршиеРодителиКПересчету) Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					ПодразделенияКПересчету, СтаршиеРодителиКПересчету, Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если ПодразделенияКПересчету.Количество() > 0 Тогда
			АктуализироватьПраваСотрудниковПодразделенийПоССПД(ПодразделенияКПересчету);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ЗамещающиеИПомощники") Тогда
		
		Если Объект.Действует Тогда
			
			// Актуализация прав дескрипторов, доступных делегирующему.
			АктуализироватьПраваСотрудниковПоСоставуСубъектов(Объект.Сотрудник);
			
			СтарыйСотрудник = Неопределено;
			Объект.ДополнительныеСвойства.Свойство("СтарыйСотрудник", СтарыйСотрудник);
			Если ЗначениеЗаполнено(СтарыйСотрудник) Тогда
				АктуализироватьПраваСотрудниковПоСоставуСубъектов(СтарыйСотрудник);
			КонецЕсли;
			
		Иначе
			
			// Удаление всех записей по этому делегированию.
			Набор = РегистрыСведений.ПраваПоДескрипторамДоступаОбъектов.СоздатьНаборЗаписей();
			Набор.Отбор.ОбъектОснование.Установить(Объект.Ссылка);
			Набор.Записать();
			
			Набор = РегистрыСведений.ПраваПоДескрипторамДоступаРегистров.СоздатьНаборЗаписей();
			Набор.Отбор.ОбъектОснование.Установить(Объект.Ссылка);
			Набор.Записать();
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.Контрагенты") Тогда
		
		ОбновитьПраваПоКонтрагенту(Объект.Ссылка);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.Проекты") Тогда
		
		ПриИзмененииСоставаКонтейнеровСотрудников(Объект, Тип);
		
		// Дескрипторы со ссылкой на проект.
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ДескрипторыДоступаРегистров.Ссылка
			|ИЗ
			|	Справочник.ДескрипторыДоступаРегистров КАК ДескрипторыДоступаРегистров
			|ГДЕ
			|	ДескрипторыДоступаРегистров.ОбъектДоступа1 = &Проект");
		Запрос.УстановитьПараметр("Проект", Объект.Ссылка);
		
		ТекущийПриоритетОчередиОбновленияПрав = ПараметрыСеанса.ПриоритетОчередиОбновленияПрав;
		ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = 2; // Долгая очередь
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Справочники.ДескрипторыДоступаРегистров.ОбновитьПрава(Выборка.Ссылка);
		КонецЦикла;
		
		ПараметрыСеанса.ПриоритетОчередиОбновленияПрав = ТекущийПриоритетОчередиОбновленияПрав;
		
	ИначеЕсли Тип = Тип("СправочникОбъект.ПрофилиГруппДоступа") Тогда
		
		// Если изменился состав ролей, все необходимые изменения будут выполнены
		// в процедуре ОбновитьПраваПриИзмененииРолейПользователей.
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет необходимые действия при записи правообразующих регистров.
//
// Параметры:
//	Файл - СправочникОбъект.Файлы - Файл, который необходимо обработать.
//
Функция ОпределитьПраваФайла(Файл) Экспорт
	
	ЕстьИзменения = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);

	// Создание дескриптора для владельцев файлов, которые сами не используют дескрипторы в RLS.
	ТипВладельца = ТипЗнч(Файл.ВладелецФайла);
	ТипыСсылок = ДокументооборотПраваДоступаПовтИсп.ТипыСсылокИспользующихДоступПоДескрипторам();
	
	Если ТипыСсылок.Найти(ТипВладельца) = Неопределено
			И Не РегистрыСведений.ДескрипторыДляОбъектов.ЕстьДескрипторыОбъекта(Файл.ВладелецФайла) Тогда
		ОпределитьДескрипторыОбъекта(Файл.ВладелецФайла);
	КонецЕсли;
	
	// Обновление зависимых прав.
	Если Файл.ДополнительныеСвойства.Свойство("СтарыйВладелец")
			И Файл.ДополнительныеСвойства.СтарыйВладелец <> Файл.Владелец Тогда
		
		ОбновитьПраваЗависящиеОтФайла(Файл.Ссылка);
		ЕстьИзменения = Истина;
	КонецЕсли;
	
	Возврат ЕстьИзменения;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьОсновнойДескриптор(ОбъектДоступа)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовыйДескриптор = Справочники.ДескрипторыДоступаОбъектов.СоздатьДескрипторОсновной(ОбъектДоступа);
	
	Возврат ПолучитьДескрипторПоОбразцу(НовыйДескриптор);
	
КонецФункции

Функция ПолучитьДескрипторДляЛокальныхАдминистраторов(ОбъектДоступа, ОсновнойДескрипторСсылка = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Копирование и модификация основного дескриптора.
	
	Если ОсновнойДескрипторСсылка = Неопределено Тогда
		НовыйДескриптор = Справочники.ДескрипторыДоступаОбъектов.СоздатьДескрипторОсновной(ОбъектДоступа);
	Иначе
		НовыйДескриптор = ОсновнойДескрипторСсылка.Скопировать();
	КонецЕсли;
	
	НеИспользуемыеРеквизиты = Новый Массив;
	НеИспользуемыеРеквизиты.Добавить("Папка");
	НеИспользуемыеРеквизиты.Добавить("ПапкаПередаетВсеПрава");
	НеИспользуемыеРеквизиты.Добавить("КонтейнерСотрудников");
	НеИспользуемыеРеквизиты.Добавить("Изменение");
	НеИспользуемыеРеквизиты.Добавить("ОбъектДоступа");
	
	Для Каждого ИмяРеквизита Из НеИспользуемыеРеквизиты Цикл
		НовыйДескриптор[ИмяРеквизита] = Неопределено;
	КонецЦикла;
	
	НовыйДескриптор.НастройкаПрав.Очистить();
	НовыйДескриптор.ДляЛокальныхАдминистраторов = Истина;
	НовыйДескриптор.РассчитатьХэш();
	
	Возврат ПолучитьДескрипторПоОбразцу(НовыйДескриптор);
	
КонецФункции

Функция ПолучитьИндивидуальныйДескриптор(ОбъектДоступа, КонтейнерПользователей, Изменение)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектДоступа.Ссылка.Метаданные());
	Дескриптор = ДокументооборотПраваДоступаПовтИсп.ПолучитьИндивидуальныйДескриптор(
		ОбъектМетаданных, КонтейнерПользователей, Изменение);
	
	Возврат Дескриптор;
	
КонецФункции

Функция ПолучитьДескрипторПоОбразцу(НовыйДескриптор)
	
	ГотовыйДескриптор = Справочники.ДескрипторыДоступаОбъектов.НайтиДескрипторПоОбразцу(НовыйДескриптор);
	
	Если ЗначениеЗаполнено(ГотовыйДескриптор) Тогда
		Возврат ГотовыйДескриптор;
	КонецЕсли;
	
	// Запись нового дескриптора
	НовыйДескриптор.Записать();
	
	Возврат НовыйДескриптор.Ссылка;
	
КонецФункции

Функция ПолучитьДескрипторДоступаЗаписиНабораЗаписей(ИдентификаторОбъектаМетаданных, Запись)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовыйДескриптор = Справочники.ДескрипторыДоступаРегистров.СоздатьНовыйДескриптор(ИдентификаторОбъектаМетаданных, Запись);
	
	ГотовыйДескриптор = Справочники.ДескрипторыДоступаРегистров.НайтиДескрипторПоОбразцу(НовыйДескриптор);
	
	Если ЗначениеЗаполнено(ГотовыйДескриптор) Тогда
		Возврат ГотовыйДескриптор;
	КонецЕсли;	

	// Запись нового дескриптора
	НовыйДескриптор.Записать();
	
	Возврат НовыйДескриптор.Ссылка;
	
КонецФункции	

Процедура ОбновлениеРолейПередЗаписьюОбъекта(Источник, Отказ) Экспорт
	
	Если МиграцияПриложенийПереопределяемый.ЭтоЗагрузка(Источник) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеРолейПриЗаписиОбъекта(Источник, Отказ) Экспорт
	
	Если МиграцияПриложенийПереопределяемый.ЭтоЗагрузка(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ПользователиКПересчету = Новый Массив;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ПрофилиГруппДоступа") Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СотрудникиПользователей.Пользователь
			|ИЗ
			|	РегистрСведений.ПолномочияСотрудников КАК ПолномочияСотрудников
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
			|		ПО ПолномочияСотрудников.Владелец = СотрудникиВКонтейнерах.Контейнер
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
			|		ПО СотрудникиВКонтейнерах.Сотрудник = СотрудникиПользователей.Сотрудник
			|ГДЕ
			|	ПолномочияСотрудников.Полномочия = &Полномочия");
		
		Запрос.УстановитьПараметр("Полномочия", Источник.Ссылка);
		ПользователиКПересчету = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
		
	КонецЕсли;
	
	// Обновление ролей.
	Если ПользователиКПересчету.Количество() > 0 Тогда
		УправлениеДоступом.ОбновитьРолиПользователей(ПользователиКПересчету);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеРолейПриЗаписиРегистра(Источник, Отказ, Замещение) Экспорт
	
	Если МиграцияПриложенийПереопределяемый.ЭтоЗагрузка(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыКПересчету = Новый Массив;
	
	Если ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ПолномочияСотрудников") Тогда
		
		ОтборПоВладельцу = Источник.Отбор.Владелец;
		Если ОтборПоВладельцу.Использование Тогда
			ЭлементыКПересчету = РегистрыСведений.СотрудникиВКонтейнерах.СотрудникиВКонтейнере(
				ОтборПоВладельцу.Значение);
		Иначе
			ЭлементыКПересчету = РегистрыСведений.СотрудникиВКонтейнерах.СотрудникиВКонтейнере(
				Справочники.РабочиеГруппы.ВсеПользователи);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.СотрудникиВКонтейнерах") Тогда
		
		ОтборПоКонтейнеру = Источник.Отбор.Контейнер;
		ОтборПоСотруднику = Источник.Отбор.Сотрудник;
		
		Если ОтборПоСотруднику.Использование Тогда
			
			ЭлементыКПересчету.Добавить(ОтборПоСотруднику.Значение);
			
		Иначе
			
			Если Не ОтборПоКонтейнеру.Использование Тогда
				Возврат;
			КонецЕсли;
			
			Контейнер = ОтборПоКонтейнеру.Значение;
			УдаленныеСотрудники = Неопределено;
			ДобавленныеСотрудники = Неопределено;
			Источник.ДополнительныеСвойства.Свойство("УдаленныеСотрудники", УдаленныеСотрудники);
			Источник.ДополнительныеСвойства.Свойство("ДобавленныеСотрудники", ДобавленныеСотрудники);
			
			Если УдаленныеСотрудники = Неопределено
				И ДобавленныеСотрудники = Неопределено Тогда
				Возврат
			КонецЕсли;
				
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	ИСТИНА КАК ЕстьЗаписи
				|ИЗ
				|	РегистрСведений.ПолномочияСотрудников КАК ПолномочияСотрудников
				|ГДЕ
				|	ПолномочияСотрудников.Владелец = &Контейнер");
			
			Запрос.УстановитьПараметр("Контейнер", Контейнер);
			Если Запрос.Выполнить().Пустой() Тогда
				// Нет полномочий, назначенных пользователям через этот контейнер.
				Возврат;
			КонецЕсли;
			
			Если УдаленныеСотрудники <> Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЭлементыКПересчету, УдаленныеСотрудники, Истина);
			КонецЕсли;
			Если ДобавленныеСотрудники <> Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЭлементыКПересчету, ДобавленныеСотрудники, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.СотрудникиПользователей") Тогда
		
		ОтборПоПользователю = Источник.Отбор.Пользователь;
		Если ОтборПоПользователю.Использование Тогда
			ЭлементыКПересчету.Добавить(ОтборПоПользователю.Значение);
		Иначе
			Для Каждого Стр Из Источник Цикл
				ЭлементыКПересчету.Добавить(Стр.Пользователь);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// Обновление ролей.
	Если ЭлементыКПересчету.Количество() > 0 Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СотрудникиПользователей.Пользователь
			|ИЗ
			|	РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
			|ГДЕ
			|	СотрудникиПользователей.Сотрудник В(&ЭлементыКПересчету)");
		Запрос.УстановитьПараметр("ЭлементыКПересчету", ЭлементыКПересчету);
		ПользователиКПересчету = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
		Для Каждого Эл Из ЭлементыКПересчету Цикл
			Если ТипЗнч(Эл) = Тип("СправочникСсылка.Пользователи") Тогда
				ПользователиКПересчету.Добавить(Эл);
			КонецЕсли;
		КонецЦикла;
		УправлениеДоступом.ОбновитьРолиПользователей(ПользователиКПересчету);
	КонецЕсли;
	
КонецПроцедуры

// Определяет идентификаторы объектов,
// права на которые изменились в результате изменения ролей.
// 
Функция ОбъектыСОтличиямиВПравахРолей(Роли1, Роли2)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПраваРолей.ОбъектМетаданных,
		|	МАКСИМУМ(ПраваРолей.Добавление) КАК Добавление,
		|	МАКСИМУМ(ПраваРолей.Изменение) КАК Изменение,
		|	МАКСИМУМ(ПраваРолей.ЧтениеБезОграничения) КАК ЧтениеБезОграничения,
		|	МАКСИМУМ(ПраваРолей.ИзменениеБезОграничения) КАК ИзменениеБезОграничения
		|ПОМЕСТИТЬ Права1
		|ИЗ
		|	РегистрСведений.ПраваРолей КАК ПраваРолей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыРолей
		|		ПО ПраваРолей.Роль = ИдентификаторыРолей.Ссылка
		|ГДЕ
		|	ИдентификаторыРолей.Ссылка В(&Роли1)
		|	И ПраваРолей.ОбъектМетаданных В(&ОбъектыМеханизмаПрав)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПраваРолей.ОбъектМетаданных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПраваРолей.ОбъектМетаданных,
		|	МАКСИМУМ(ПраваРолей.Добавление) КАК Добавление,
		|	МАКСИМУМ(ПраваРолей.Изменение) КАК Изменение,
		|	МАКСИМУМ(ПраваРолей.ЧтениеБезОграничения) КАК ЧтениеБезОграничения,
		|	МАКСИМУМ(ПраваРолей.ИзменениеБезОграничения) КАК ИзменениеБезОграничения
		|ПОМЕСТИТЬ Права2
		|ИЗ
		|	РегистрСведений.ПраваРолей КАК ПраваРолей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыРолей
		|		ПО ПраваРолей.Роль = ИдентификаторыРолей.Ссылка
		|ГДЕ
		|	ИдентификаторыРолей.Ссылка В(&Роли2)
		|	И ПраваРолей.ОбъектМетаданных В(&ОбъектыМеханизмаПрав)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПраваРолей.ОбъектМетаданных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Права1.ОбъектМетаданных, Права2.ОбъектМетаданных) КАК Таблица
		|ИЗ
		|	Права1 КАК Права1
		|		ПОЛНОЕ СОЕДИНЕНИЕ Права2 КАК Права2
		|		ПО Права1.ОбъектМетаданных = Права2.ОбъектМетаданных
		|			И Права1.Добавление = Права2.Добавление
		|			И Права1.Изменение = Права2.Изменение
		|			И Права1.ЧтениеБезОграничения = Права2.ЧтениеБезОграничения
		|			И Права1.ИзменениеБезОграничения = Права2.ИзменениеБезОграничения
		|ГДЕ
		|	(Права1.ОбъектМетаданных ЕСТЬ NULL 
		|			ИЛИ Права2.ОбъектМетаданных ЕСТЬ NULL )");
		
	Запрос.УстановитьПараметр("Роли1", Роли1);
	Запрос.УстановитьПараметр("Роли2", Роли2);
	Запрос.УстановитьПараметр("ОбъектыМеханизмаПрав",
		ДокументооборотПраваДоступаПовтИсп.ВсеОбъектыМеханизмаПравДоступа());
	
	ИзмененныеИдентификаторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Таблица");
	
	Возврат ИзмененныеИдентификаторы;
	
КонецФункции

// Пересчитывает права по дескрипторам при изменении ролей пользователей.
// 
// Параметры:
// 	РолиПользователей - Соответствие
// 
Процедура ОбновитьПраваПриИзмененииРолейПользователей(РолиПользователей) Экспорт
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Возврат;
	КонецЕсли;
	
	ВсеИзмененныеОбъекты = Новый Массив;
	
	Для Каждого КлючИЗначение Из РолиПользователей Цикл
		
		СтруктураПараметров = КлючИЗначение.Значение;
		
		Пользователь = СтруктураПараметров.ПользовательСсылка;
		ИменаРолейДляДобавления = СтруктураПараметров.РолиДляДобавления;
		ИменаРолейДляУдаления = СтруктураПараметров.РолиДляУдаления;
		
		ДобавленныеРоли = Новый Массив;
		УдаленныеРоли = Новый Массив;
		
		Для Каждого Эл Из ИменаРолейДляДобавления Цикл
			ИмяРоли = Эл.Ключ;
			Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.Найти(ИмяРоли));
			ДобавленныеРоли.Добавить(Роль);
		КонецЦикла;
		
		Для Каждого Эл Из ИменаРолейДляУдаления Цикл
			ИмяРоли = Эл.Ключ;
			Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Роли.Найти(ИмяРоли));
			УдаленныеРоли.Добавить(Роль);
		КонецЦикла;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ПрофилиГруппДоступаРоли.Роль
			|ИЗ
			|	РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
			|		ПО СотрудникиВКонтейнерах.Сотрудник = СотрудникиПользователей.Сотрудник
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПолномочияСотрудников КАК ПолномочияСотрудников
			|		ПО СотрудникиВКонтейнерах.Контейнер = ПолномочияСотрудников.Владелец
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
			|		ПО ПолномочияСотрудников.Полномочия = ПрофилиГруппДоступаРоли.Ссылка
			|ГДЕ
			|	СотрудникиПользователей.Пользователь = &Пользователь
			|	И НЕ ПрофилиГруппДоступаРоли.Роль В (&ДобавленныеРоли)
			|	И НЕ ПрофилиГруппДоступаРоли.Роль В (&УдаленныеРоли)");
			
		Запрос.УстановитьПараметр("Пользователь", Пользователь);
		Запрос.УстановитьПараметр("ДобавленныеРоли", ДобавленныеРоли);
		Запрос.УстановитьПараметр("УдаленныеРоли", УдаленныеРоли);
		
		НеИзмененныеРоли = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Роль");
		
		// Добавленные права.
		РолиДоДобавления = ОбщегоНазначения.СкопироватьРекурсивно(НеИзмененныеРоли);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РолиДоДобавления, УдаленныеРоли);
		ИзмененныеОбъекты = ОбъектыСОтличиямиВПравахРолей(РолиДоДобавления, ДобавленныеРоли);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеИзмененныеОбъекты, ИзмененныеОбъекты);
		
		// Удаленные права.
		РолиДоУдаления = ОбщегоНазначения.СкопироватьРекурсивно(НеИзмененныеРоли);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РолиДоУдаления, ДобавленныеРоли);
		ИзмененныеОбъекты = ОбъектыСОтличиямиВПравахРолей(РолиДоУдаления, УдаленныеРоли);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеИзмененныеОбъекты, ИзмененныеОбъекты);
		
	КонецЦикла;
	
	ВсеИзмененныеОбъекты = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВсеИзмененныеОбъекты);
	Для Каждого ИдентификаторОбъекта Из ВсеИзмененныеОбъекты Цикл
		РассчитатьПраваОбъектовТаблицы(ИдентификаторОбъекта);
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает запись правообразующих констант
Процедура ПриЗаписиКонстанты(Источник)
	
	Если ТипЗнч(Источник) = Тип("КонстантаМенеджерЗначения.ИспользоватьУчетПоОрганизациям") Тогда

		// Обработка всех дескрипторов, у которых установлен реквизит Организация
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДескрипторыДоступаОбъектов.Ссылка
			|ИЗ
			|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
			|ГДЕ
			|	ДескрипторыДоступаОбъектов.Организация <> &ПустаяОрганизация";

		Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Дескриптор = ВыборкаДетальныеЗаписи.Ссылка;
			Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(Дескриптор);
			
		КонецЦикла;

	ИначеЕсли ТипЗнч(Источник) = Тип("КонстантаМенеджерЗначения.ИспользоватьГрифыДоступа") Тогда

		// Обработка всех дескрипторов, у которых установлен реквизит ГрифДоступа
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДескрипторыДоступаОбъектов.Ссылка
			|ИЗ
			|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
			|ГДЕ
			|	ДескрипторыДоступаОбъектов.ГрифДоступа <> &ГрифДоступа";

		Запрос.УстановитьПараметр("ГрифДоступа", Справочники.ГрифыДоступа.ПустаяСсылка());

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Дескриптор = ВыборкаДетальныеЗаписи.Ссылка;
			Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(Дескриптор);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("КонстантаМенеджерЗначения.ИспользоватьВопросыДеятельности") Тогда

		// Обработка всех дескрипторов, у которых установлен реквизит ВопросДеятельности
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДескрипторыДоступаОбъектов.Ссылка
			|ИЗ
			|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
			|ГДЕ
			|	ДескрипторыДоступаОбъектов.ВопросДеятельности <> &ВопросДеятельности";

		Запрос.УстановитьПараметр("ВопросДеятельности", Справочники.ВопросыДеятельности.ПустаяСсылка());

		Результат = Запрос.Выполнить();

		ВыборкаДетальныеЗаписи = Результат.Выбрать();

		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Дескриптор = ВыборкаДетальныеЗаписи.Ссылка;
			Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(Дескриптор);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("КонстантаМенеджерЗначения.ДобавлятьРуководителямДоступПодчиненных") Тогда	
		
		// Обновление всех дескрипторов
		АктуализироватьПраваСотрудниковПоСоставуСубъектов();
		
		// ДескрипторыДоступаРегистров
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДескрипторыДоступаРегистров.Ссылка
			|ИЗ
			|	Справочник.ДескрипторыДоступаРегистров КАК ДескрипторыДоступаРегистров";
			
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Справочники.ДескрипторыДоступаРегистров.ОбновитьПрава(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("КонстантаМенеджерЗначения.СпецРазрешенияВПолитикахДоступа") Тогда
		
		Если Не Константы.СпецРазрешенияВПолитикахДоступа.Получить() Тогда
			
			// Очистка спец. разрешений.
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	РазрешенияДоступаИсключительные.Предмет
				|ИЗ
				|	РегистрСведений.УдалитьРазрешенияДоступаИсключительные КАК РазрешенияДоступаИсключительные");
				
			Результат = Запрос.Выполнить();
			ЕстьЗаписи = Не Результат.Пустой();
			Если ЕстьЗаписи Тогда
				Набор = РегистрыСведений.УдалитьРазрешенияДоступаИсключительные.СоздатьНаборЗаписей();
				Набор.ДополнительныеСвойства.Вставить(
					"ИзмененныеПредметы", Результат.Выгрузить().ВыгрузитьКолонку("Предмет"));
				Набор.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("КонстантаМенеджерЗначения.ИспользоватьЛокальныхАдминистраторов") Тогда
		
		Если Источник.Значение Тогда
			// При включении настройки нужно назначить объектам дескрипторы для лок. администраторов.
			ПредметыДоступаСРазрезами = ДокументооборотПраваДоступаПереопределяемый.ПредметыДоступаСРазрезами();
			Для Каждого СтрокаПредмета Из ПредметыДоступаСРазрезами Цикл
				ОпределитьПраваОбъектовТаблицыДляЛокальныхАдминистраторов(СтрокаПредмета.ОбъектМетаданных);
			КонецЦикла;
		Иначе
			// Удаление связей дескрипторов лок. администраторов с объектами.
			ОтключитьДескрипторыЛокАдминистраторов();
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("КонстантаМенеджерЗначения.ИспользованиеРазрезовДоступа") Тогда
		
		// Переопределение дескрипторов всех объектов, использующих измененные разрезы.
		
		ИзмененныеРазрезы = Источник.ДополнительныеСвойства.ИзмененныеРазрезы;
		ПредметыДоступаСРазрезами = ДокументооборотПраваДоступаПереопределяемый.ПредметыДоступаСРазрезами();
		
		Для Каждого СтрПредмета Из ПредметыДоступаСРазрезами Цикл
			Для Каждого Разрез Из ИзмененныеРазрезы Цикл
				Если СтрПредмета.ВидыДоступа.НайтиПоЗначению(Разрез) <> Неопределено Тогда
					ОпределитьПраваОбъектовТаблицы(СтрПредмета.ОбъектМетаданных);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Переопределение дескрипторов самих разрезов.
		
		СвойстваВидовДоступа = УправлениеДоступомПовтИспДокументооборот.СвойстваВидовДоступа();
		ТаблицаСвойствВидовДоступа = СвойстваВидовДоступа.Таблица.Получить();
		ВсеОбъектыМеханизмаПравДоступа = ДокументооборотПраваДоступаПовтИсп.ВсеОбъектыМеханизмаПравДоступа();
		
		Для Каждого Разрез Из ИзмененныеРазрезы Цикл
			СтрВида = ТаблицаСвойствВидовДоступа.Найти(Разрез, "ВидДоступа");
			Если СтрВида <> Неопределено Тогда
				Для Каждого ИмяОбъектаМетаданных Из СтрВида.Таблицы Цикл
					ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ИмяОбъектаМетаданных);
					Если ВсеОбъектыМеханизмаПравДоступа.Найти(ОбъектМетаданных) <> Неопределено Тогда
						ОпределитьПраваОбъектовТаблицы(ОбъектМетаданных);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает право текущего пользователя перемещать папки
// из папки Источник в папку Приемник.
// В случае отсутствия права формируется СообщениеОбОшибке.
//
Функция ЕстьПравоПеремещенияПапки(Источник, Приемник, СообщениеОбОшибке) Экспорт
	
	СообщениеОбОшибке = "";
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Источник)
		И Не РольДоступна("ПолныеПрава") Тогда
		СообщениеОбОшибке = НСтр("ru = 'Недостаточно прав на перемещение корневых папок.'");
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Приемник)
		И Не РольДоступна("ПолныеПрава") Тогда
		СообщениеОбОшибке = НСтр("ru = 'Недостаточно прав на перемещение папок в корень.'");
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник) Тогда
		Права = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(Источник);
		Если Не Права.Удаление Тогда
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Недостаточно прав на удаление из папки ""%1"".'"),
				Строка(Источник));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Приемник) Тогда
		Права = ПраваПользователяПоОбъекту(Приемник);
		Если Не Права.Добавление Тогда
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Недостаточно прав на добавление в папку ""%1"".'"),
				Строка(Приемник));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Включает\выключает использование прав доступа
//   используется в обработках обновления ИБ
Процедура УстановитьИспользованиеПравДоступа(НовоеЗначение) Экспорт
	
	Если Не ПараметрыСеанса.ДокументооборотИспользоватьОграниченияПравДоступа Тогда
		Возврат;
	КонецЕсли;
	
	СтароеЗначение = Константы.ДокументооборотИспользоватьОграничениеПравДоступа.Получить();
	Если СтароеЗначение <> НовоеЗначение Тогда
		НачатьТранзакцию();
		Константы.ДокументооборотИспользоватьОграничениеПравДоступа.Установить(НовоеЗначение);
		Константы.ДокументооборотВключитьПраваДоступа.Установить(СтароеЗначение);
		ЗафиксироватьТранзакцию();
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
КонецПроцедуры

// Возвращает Истина, если переданный тип - ссылка на справочник
// папок документов предприятия, файлов и т.д.
//
// Параметры:
//  ТипСсылки - Тип - тип проверяемого объекта
//
Функция ЭтоПапка(ТипСсылки) Экспорт
	
	Результат = Метаданные.ОпределяемыеТипы.Папки.Тип.Типы().Найти(ТипСсылки) <> Неопределено;
	
	Возврат Результат;
	
КонецФункции

// Обновляет права файлов переданных процессов 
//  и шаблонов, подчиненных комплексным процессам
//
Процедура ОбновитьПраваЗависящиеОтСоставаУчастниковПроцесса(МассивПроцессов)
	
	// Обновление прав дескрипторов процессов.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДескрипторыДоступаОбъектов.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|ГДЕ
		|	ДескрипторыДоступаОбъектов.ОбъектДоступа В(&МассивПроцессов)");
		
	Запрос.УстановитьПараметр("МассивПроцессов", МассивПроцессов);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(Выборка.Ссылка);
	КонецЦикла;
	
	ДокументооборотПраваДоступаПереопределяемый.ОбновитьПраваЗависящиеОтСоставаУчастниковПроцесса(
		МассивПроцессов);
	
КонецПроцедуры

// Обновляет права документов с указанным контрагентом
//
Процедура ОбновитьПраваПоКонтрагенту(Контрагент, Немедленно = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Проверка на отложенное обновление прав доступа
	Если ДокументооборотПраваДоступаПовтИсп.ОтложенноеОбновлениеПравДоступа() 
		И Немедленно <> Истина Тогда
		
		// Добавление в очередь
		РегистрыСведений.ОчередьОбновленияПравДоступа.Добавить(Контрагент,, 2);
		Возврат;
		
	КонецЕсли;
	
	ОписанияТаблиц = Новый Соответствие;
	
	ОписанияТаблиц.Вставить("Справочник.ДокументыПредприятия", "Контрагент");
	
	ОписанияТаблиц.Вставить("Справочник.СпискиРассылкиПоКонтрагентам.Получатели", "Получатель");
	
	ОписанияТаблиц.Вставить("Справочник.ШаблоныДокументов", "Контрагент");
	
	ДокументооборотПраваДоступаПереопределяемый.ДополнитьОписанияТаблицСоСсылкамиНаКонтрагентов(
		ОписанияТаблиц);
	
	ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДескрипторыДляОбъектов.Объект
		|ИЗ
		|	%ТаблицаОбъектов% КАК ТаблицаОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
		|		ПО ТаблицаОбъектов.Ссылка = ДескрипторыДляОбъектов.Объект
		|		И ДескрипторыДляОбъектов.ТипДескриптора = 0
		|ГДЕ
		|	ТаблицаОбъектов.%ИмяПоляКонтрагента% = &Контрагент";
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Для Каждого Эл Из ОписанияТаблиц Цикл
		
		Запрос.Текст = СтрЗаменить(ШаблонТекстаЗапроса, "%ТаблицаОбъектов%", Эл.Ключ);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяПоляКонтрагента%", Эл.Значение);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДокументооборотПраваДоступа.ОпределитьДескрипторыОбъекта(Выборка.Объект);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляет права всех дескрипторов, которые имеют ссылку на переданную папку.
// 
Процедура ОбновитьПраваПоПапке(Папка, Немедленно = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДокументооборотПраваДоступаПовтИсп.ОтложенноеОбновлениеПравДоступа()
		И Немедленно <> Истина Тогда
		
		РегистрыСведений.ОчередьОбновленияПравДоступа.Добавить(
			Папка,, 1, "ОбновитьПраваСодержимогоПапки");
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДескрипторыДоступаОбъектов.Ссылка
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|ГДЕ
		|	ДескрипторыДоступаОбъектов.Папка = &Папка");
	
	Запрос.УстановитьПараметр("Папка", Папка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Справочники.ДескрипторыДоступаОбъектов.ОбновитьПрава(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает вид доступа по ссылке на значение доступа.
// 
Функция РазрезДоступаПоЗначению(ЗначениеДоступа) Экспорт
	
	РазрезДоступа = Неопределено;
	
	Если Не ЗначениеЗаполнено(ЗначениеДоступа) Тогда
		Возврат РазрезДоступа;
	КонецЕсли;
	
	ЗначениеВМассиве = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗначениеДоступа);
	РазрезыДоступаПоЗначениям = РазрезыДоступаПоЗначениям(ЗначениеВМассиве);
	
	Если РазрезыДоступаПоЗначениям.Количество() > 0 Тогда
		РазрезДоступа = РазрезыДоступаПоЗначениям[0];
	КонецЕсли;
	
	Возврат РазрезДоступа;
	
КонецФункции

// Возвращает массив уникальных видов доступа, соответствующих переданным значениям.
// 
Функция РазрезыДоступаПоЗначениям(ЗначенияДоступа) Экспорт
	
	Результат = Новый Массив;
	ИменаМетаданныхЗначенийДоступа = Новый Массив;
	
	Для Каждого ЗначениеДоступа Из ЗначенияДоступа Цикл
		
		Если Не ЗначениеЗаполнено(ЗначениеДоступа) Тогда
			Продолжить;
		КонецЕсли;
		
		ТипЗначенияДоступа = ТипЗнч(ЗначениеДоступа);
		Если ТипЗначенияДоступа = Тип("ПланВидовХарактеристикСсылка.ВидыДоступа") Тогда
			Результат.Добавить(ЗначениеДоступа);
		Иначе
			ИменаМетаданныхЗначенийДоступа.Добавить(ЗначениеДоступа.Метаданные().ПолноеИмя());
		КонецЕсли;
		
	КонецЦикла;
	
	ИменаМетаданныхЗначенийДоступа = 
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИменаМетаданныхЗначенийДоступа);
	ТаблицаРазрезовДоступа = ДокументооборотПраваДоступаПовтИсп.ТаблицаРазрезовДоступа(Ложь);
	
	Для Каждого ИмяМетаданных Из ИменаМетаданныхЗначенийДоступа Цикл
		НайденнаяСтрока = ТаблицаРазрезовДоступа.Найти(ИмяМетаданных, "ИмяТаблицыЗначенийДоступа");
		Если НайденнаяСтрока <> Неопределено Тогда
			Результат.Добавить(НайденнаяСтрока.ВидДоступа);
		Иначе
			ВызватьИсключение 
				СтрШаблон(НСтр("ru = 'Не найден вид доступа для значения %1'"), ЗначениеДоступа);
		КонецЕсли;
	КонецЦикла;
	
	Результат = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Результат);
	
	Возврат Результат;
	
КонецФункции

// Проверяет, имеет ли папка свои настройки, или полностью наследует родительские.
//
// Параметры:
//  Папка - Ссылка - ссылка на папку.
//
// Возвращаемое значение:
//  Булево - Истина, если у папки есть индивидуальные права.
//
Функция ПапкаИмеетИндивидуальныеНастройкиПрав(Папка) Экспорт
	
	Если Не ЗначениеЗаполнено(Папка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НЕ НастройкиПравОбъектов.Объект ЕСТЬ NULL КАК ЕстьСобственнаяНастройка,
		|	НаследованиеНастроекПравОбъектов.Наследовать КАК НаследуетПрава,
		|	ТаблицаПапок.Родитель КАК Родитель
		|ИЗ
		|	#ТаблицаПапок КАК ТаблицаПапок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НаследованиеНастроекПравОбъектов КАК НаследованиеНастроекПравОбъектов
		|		ПО (НаследованиеНастроекПравОбъектов.Объект = ТаблицаПапок.Ссылка)
		|			И (НаследованиеНастроекПравОбъектов.Родитель = ТаблицаПапок.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравОбъектов КАК НастройкиПравОбъектов
		|		ПО (НастройкиПравОбъектов.Объект = ТаблицаПапок.Ссылка)
		|ГДЕ
		|	ТаблицаПапок.Ссылка = &Папка");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаПапок", Папка.Метаданные().ПолноеИмя());
	Запрос.УстановитьПараметр("Папка", Папка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = 
			Выборка.ЕстьСобственнаяНастройка 
			Или Не Выборка.НаследуетПрава
			Или Не ЗначениеЗаполнено(Выборка.Родитель); // Это корневая папка
	Иначе
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Дополняет текст запроса по правам обращением к составу субъектов
// и старым права по дескрипторам.
// 
// Параметры:
//   ТекстЗапроса - Строка - текст запроса. Должен содержать временную таблицу "НовыеПрава".
//   ДляДескрипторовРегистров - Булево - определяет, права каких дескрипторов
//   	рассчитываются в запросе (объектов или регистров).
// 
Процедура ДополнитьТекстЗапросаПоПравам(ТекстЗапроса, ДляДескрипторовРегистров = Ложь) Экспорт
	
	ДополнениеТекстаЗапроса = "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Дескриптор,
		|	ВложенныйЗапрос.Сотрудник,
		|	ВложенныйЗапрос.ОбъектОснование,
		|	МАКСИМУМ(ВложенныйЗапрос.Добавление) КАК Добавление,
		|	МАКСИМУМ(ВложенныйЗапрос.Изменение) КАК Изменение,
		|	МАКСИМУМ(ВложенныйЗапрос.Удаление) КАК Удаление,
		|	МАКСИМУМ(ВложенныйЗапрос.УправлениеПравами) КАК УправлениеПравами,
		|	МАКСИМУМ(ВложенныйЗапрос.Чтение) КАК Чтение
		|ПОМЕСТИТЬ НовыеПраваСУчетомССПД
		|ИЗ
		|	(ВЫБРАТЬ
		|		НовыеПрава.Дескриптор КАК Дескриптор,
		|		СоставСубъектовПравДоступа.Сотрудник КАК Сотрудник,
		|		СоставСубъектовПравДоступа.ОбъектОснование КАК ОбъектОснование,
		|		НовыеПрава.Добавление КАК Добавление,
		|		НовыеПрава.Изменение КАК Изменение,
		|		НовыеПрава.Удаление КАК Удаление,
		|		НовыеПрава.УправлениеПравами КАК УправлениеПравами,
		|		НовыеПрава.Чтение КАК Чтение
		|	ИЗ
		|		НовыеПрава КАК НовыеПрава
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК ДескрипторыДоступа
		|			ПО ДескрипторыДоступа.Ссылка = НовыеПрава.Дескриптор
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектовПравДоступа
		|			ПО НовыеПрава.Сотрудник = СоставСубъектовПравДоступа.Субъект
		|				И ДескрипторыДоступа.%2 = СоставСубъектовПравДоступа.ОбъектМетаданных
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		НовыеПрава.Дескриптор,
		|		СоставСубъектовПравДоступа.Сотрудник,
		|		СоставСубъектовПравДоступа.ОбъектОснование,
		|		НовыеПрава.Добавление,
		|		НовыеПрава.Изменение,
		|		НовыеПрава.Удаление,
		|		НовыеПрава.УправлениеПравами,
		|		НовыеПрава.Чтение
		|	ИЗ
		|		НовыеПрава КАК НовыеПрава
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектовПравДоступа
		|			ПО НовыеПрава.Сотрудник = СоставСубъектовПравДоступа.Субъект
		|				И СоставСубъектовПравДоступа.ОбъектМетаданных = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка)) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Дескриптор,
		|	ВложенныйЗапрос.Сотрудник,
		|	ВложенныйЗапрос.ОбъектОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Дескриптор КАК Дескриптор,
		|	ВложенныйЗапрос.Сотрудник,
		|	ВложенныйЗапрос.ОбъектОснование,
		|	ВложенныйЗапрос.Добавление,
		|	ВложенныйЗапрос.Изменение,
		|	ВложенныйЗапрос.Удаление,
		|	ВложенныйЗапрос.УправлениеПравами,
		|	ВложенныйЗапрос.Чтение,
		|	ВложенныйЗапрос.ЗаписьДобавленаИлиИзменена,
		|	ВложенныйЗапрос.ЗаписьУдалена,
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос.ЗаписьУдалена
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК АктуальныхЗаписейВсего,
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос.ЗаписьДобавленаИлиИзменена
		|				ИЛИ ВложенныйЗапрос.ЗаписьУдалена
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ИзмененныхЗаписейВсего
		|ИЗ
		|	(ВЫБРАТЬ
		|		НовыеПраваСУчетомССПД.Дескриптор КАК Дескриптор,
		|		НовыеПраваСУчетомССПД.Сотрудник КАК Сотрудник,
		|		НовыеПраваСУчетомССПД.ОбъектОснование КАК ОбъектОснование,
		|		НовыеПраваСУчетомССПД.Добавление КАК Добавление,
		|		НовыеПраваСУчетомССПД.Изменение КАК Изменение,
		|		НовыеПраваСУчетомССПД.Удаление КАК Удаление,
		|		НовыеПраваСУчетомССПД.УправлениеПравами КАК УправлениеПравами,
		|		НовыеПраваСУчетомССПД.Чтение КАК Чтение,
		|		РегистрПрав.Дескриптор ЕСТЬ NULL КАК ЗаписьДобавленаИлиИзменена,
		|		ЛОЖЬ КАК ЗаписьУдалена
		|	ИЗ
		|		НовыеПраваСУчетомССПД КАК НовыеПраваСУчетомССПД
		|			ЛЕВОЕ СОЕДИНЕНИЕ %3 КАК РегистрПрав
		|			ПО НовыеПраваСУчетомССПД.Дескриптор = РегистрПрав.Дескриптор
		|				И НовыеПраваСУчетомССПД.Сотрудник = РегистрПрав.Сотрудник
		|				И НовыеПраваСУчетомССПД.ОбъектОснование = РегистрПрав.ОбъектОснование
		|				И НовыеПраваСУчетомССПД.Добавление = РегистрПрав.Добавление
		|				И НовыеПраваСУчетомССПД.Изменение = РегистрПрав.Изменение
		|				И НовыеПраваСУчетомССПД.Удаление = РегистрПрав.Удаление
		|				И НовыеПраваСУчетомССПД.УправлениеПравами = РегистрПрав.УправлениеПравами
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РегистрПрав.Дескриптор,
		|		РегистрПрав.Сотрудник,
		|		РегистрПрав.ОбъектОснование,
		|		РегистрПрав.Добавление,
		|		РегистрПрав.Изменение,
		|		РегистрПрав.Удаление,
		|		РегистрПрав.УправлениеПравами,
		|		РегистрПрав.Чтение,
		|		ЛОЖЬ,
		|		ИСТИНА
		|	ИЗ
		|		%3 КАК РегистрПрав
		|			ЛЕВОЕ СОЕДИНЕНИЕ НовыеПраваСУчетомССПД КАК НовыеПраваСУчетомССПД
		|			ПО (НовыеПраваСУчетомССПД.Дескриптор = РегистрПрав.Дескриптор)
		|				И (НовыеПраваСУчетомССПД.Сотрудник = РегистрПрав.Сотрудник)
		|				И (НовыеПраваСУчетомССПД.ОбъектОснование = РегистрПрав.ОбъектОснование)
		|	ГДЕ
		|		РегистрПрав.Дескриптор В(&Дескрипторы)
		|		И НовыеПраваСУчетомССПД.Дескриптор ЕСТЬ NULL) КАК ВложенныйЗапрос
		|ИТОГИ
		|	СУММА(АктуальныхЗаписейВсего),
		|	СУММА(ИзмененныхЗаписейВсего)
		|ПО
		|	Дескриптор";
	
	ИмяСправочникаДескрипторов = "Справочник.ДескрипторыДоступаОбъектов";
	ИмяРеквизитаИОМ = "ИдентификаторОбъектаМетаданных";
	ИмяРегистраПрав = "РегистрСведений.ПраваПоДескрипторамДоступаОбъектов";
	
	Если ДляДескрипторовРегистров Тогда
		ИмяСправочникаДескрипторов = "Справочник.ДескрипторыДоступаРегистров";
		ИмяРеквизитаИОМ = "ОбъектМетаданных";
		ИмяРегистраПрав = "РегистрСведений.ПраваПоДескрипторамДоступаРегистров";
	КонецЕсли;
		
	ТекстЗапроса = ТекстЗапроса + СтрШаблон(ДополнениеТекстаЗапроса,
		ИмяСправочникаДескрипторов, ИмяРеквизитаИОМ, ИмяРегистраПрав);
		
КонецПроцедуры

// Возвращает описание объекта доступа.
// 
// Параметры:
// 	ОбъектДоступа - Объект, Ссылка
// 
// Возвращаемое значение:
// 	Объект, Структура - для объекта возвращает его самого, для ссылки возвращает структуру реквизитов.
// 
Функция ОписаниеОбъектаДоступа(ОбъектДоступа) Экспорт
	
	Если ЭтоОбъектДоступаБЭД(ОбъектДоступа) Тогда
		Возврат ОписаниеОбъектаДоступаБЭД(ОбъектДоступа);
	КонецЕсли;
	
	ОписаниеОбъекта = ОбъектДоступа;
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ОбъектДоступа)) Тогда
		
		// Для ссылки дескриптор заполняется на основании описания.
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ОбъектДоступа);
		СведенияОПоляхДоступа = МенеджерОбъекта.ПолучитьПоляДоступа();
		СведенияОПоляхДоступа = СтрЗаменить(СведенияОПоляхДоступа, " ", "");
		ОписаниеОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ОбъектДоступа, СведенияОПоляхДоступа);
		
		Если Не ЗначениеЗаполнено(ОписаниеОбъекта.Ссылка) Тогда
			ОписаниеОбъекта.Ссылка = ОбъектДоступа;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

Функция НепересекающиесяПодразделения(Подразделения1, Подразделения2)
	
	Все = Новый Массив;
	Старшие = Новый Массив;
	
	Результат = Новый Структура("Все, Старшие", Все, Старшие);
	
	Для Каждого Эл Из Подразделения1 Цикл
		Если Подразделения2.Найти(Эл) = Неопределено Тогда
			Все.Добавить(Эл);
		КонецЕсли;
	КонецЦикла;
	
	// Последнее из добавленных является старшим.
	Если Все.Количество() > 0 Тогда
		Старшие.Добавить(Все[Все.ВГраница()]);
	КонецЕсли;
	
	Для Каждого Эл Из Подразделения2 Цикл
		Если Подразделения1.Найти(Эл) = Неопределено Тогда
			Все.Добавить(Эл);
		КонецЕсли;
	КонецЦикла;
	
	// Последнее из добавленных является старшим.
	Если Все.Количество() > 0 Тогда
		Старшие.Добавить(Все[Все.ВГраница()]);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Удаляет связи между объектами и дескрипторами лок. администраторов.
// 
Процедура ОтключитьДескрипторыЛокАдминистраторов(Немедленно = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Немедленно <> Истина
		И ДокументооборотПраваДоступаПовтИсп.ОтложенноеОбновлениеПравДоступа() Тогда
		
		РегистрыСведений.ОчередьОбновленияПравДоступа.Добавить(
			Перечисления.ЗаданияОчередиОбновленияПрав.ОтключитьДескрипторыЛокАдминистраторов,
			Дата("00000000"), 2);
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДескрипторыДляОбъектов.Дескриптор
		|ИЗ
		|	РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
		|ГДЕ
		|	ДескрипторыДляОбъектов.ТипДескриптора = &ТипДескриптора");
		
	ТипДескриптораЛА = 4;
	Запрос.УстановитьПараметр("ТипДескриптора", ТипДескриптораЛА);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Набор = РегистрыСведений.ДескрипторыДляОбъектов.СоздатьНаборЗаписей();
		Набор.Отбор.Дескриптор.Установить(Выборка.Дескриптор);
		Набор.Отбор.ТипДескриптора.Установить(ТипДескриптораЛА);
		Набор.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает все подразделения к пересчету при изменении руководителя.
//
// Параметры:
//  Подразделение - СправочникСсылка.СтруктураПредприятия.
//
// Возвращаемое значение:
//  Массив из СправочникСсылка.СтруктураПредприятия.
//
Функция ПодразделенияКПересчетуПриИзмененииРуководителя(Подразделение)
	
	ПодразделенияКПересчету = Новый Массив;
	ПодразделенияКПересчету.Добавить(Подразделение);
	
	ПодразделенияДляОбработки = Новый Массив;
	ПодразделенияДляОбработки.Добавить(Подразделение);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПодразделенияУровня1.Ссылка КАК Подразделение1,
		|	ПодразделенияУровня2.Ссылка КАК Подразделение2,
		|	ПодразделенияУровня3.Ссылка КАК Подразделение3,
		|	ПодразделенияУровня4.Ссылка КАК Подразделение4,
		|	ПодразделенияУровня5.Ссылка КАК Подразделение5,
		|	ПодразделенияУровня1.Руководитель КАК Руководитель1,
		|	ПодразделенияУровня2.Руководитель КАК Руководитель2,
		|	ПодразделенияУровня3.Руководитель КАК Руководитель3,
		|	ПодразделенияУровня4.Руководитель КАК Руководитель4,
		|	ПодразделенияУровня5.Руководитель КАК Руководитель5
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК ПодразделенияУровня1
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК ПодразделенияУровня2
		|		ПО ПодразделенияУровня1.Ссылка = ПодразделенияУровня2.Родитель
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК ПодразделенияУровня3
		|		ПО ПодразделенияУровня2.Ссылка = ПодразделенияУровня3.Родитель
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК ПодразделенияУровня4
		|		ПО ПодразделенияУровня3.Ссылка = ПодразделенияУровня4.Родитель
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК ПодразделенияУровня5
		|		ПО ПодразделенияУровня4.Ссылка = ПодразделенияУровня5.Родитель
		|ГДЕ
		|	ПодразделенияУровня1.Родитель = &ВышестоящееПодразделение");
	
	Пока ПодразделенияДляОбработки.Количество() > 0 Цикл
		
		ПодразделениеДляОбработки = ПодразделенияДляОбработки[0];
		ПодразделенияДляОбработки.Удалить(0);
		
		Запрос.УстановитьПараметр("ВышестоящееПодразделение", ПодразделениеДляОбработки);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
		
			СмещениеРуководителя = 5;
			Для ИндексПоля = 0 По 4 Цикл
				
				ПодчиненноеПодразделение = Выборка[ИндексПоля];
				Руководитель = Выборка[ИндексПоля + СмещениеРуководителя];
				
				Если Не ЗначениеЗаполнено(ПодчиненноеПодразделение)
					Или ЗначениеЗаполнено(Руководитель) Тогда
					
					Прервать;
				КонецЕсли;
				
				ПодразделенияКПересчету.Добавить(ПодчиненноеПодразделение);
				
				Если ИндексПоля = 4 Тогда
					// Если у последнего подчиненного нет руководителя, то добавляем его
					// для обработки, чтобы проверить нижестоящие, возможно среди них
					// есть также подразделения без руководителей и они подлежат пересчету.
					ПодразделенияДляОбработки.Добавить(ПодчиненноеПодразделение);
				КонецЕсли;
				
				ИндексПоля = ИндексПоля + 1;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПодразделенияКПересчету = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПодразделенияКПересчету);
	
	Возврат ПодразделенияКПересчету;
	
КонецФункции

// Считывает все объекты из переданного метаданного и записывает их в очередь обновления прав для поштучного обновления.
// Используется при расчете прав для очень больших метаданных (больше 10000 элементов)
// 
// Параметры:
//  ОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных - Объект метаданных для обновления прав
//
Процедура РаспаковатьТаблицуВЗаписиОчередиОбновленияПрав(ОбъектМетаданных) Экспорт
	
	Запрос = Новый Запрос;
    Запрос.Текст = 
		"ВЫБРАТЬ
		|    Данные.Ссылка
		|ИЗ
		|    [Таблица] КАК Данные";
	
    Запрос.Текст = СтрЗаменить(Запрос.Текст, "[Таблица]",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектМетаданных, "ПолноеИмя"));
	
    Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Попытка
			РегистрыСведений.ОчередьОбновленияПравДоступа.Добавить(Выборка.Ссылка, , 2, "ОпределитьПраваОбъекта");
		Исключение
			ЗаписьЖурналаРегистрации(
				СтрШаблон(НСтр("ru = 'Обновление прав доступа: не удалось распаковать таблицу ""%1""'", ОбщегоНазначения.КодОсновногоЯзыка()), ОбъектМетаданных),
				УровеньЖурналаРегистрации.Ошибка, Выборка.Ссылка.Метаданные(), Выборка.Ссылка,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает пороговое число объектов в таблице для расчета прав в одном сеансе фоновым заданием
// 
// Возвращаемое значение:
//  Число - Количество объектов
Функция КоличествоОбъектовДляРасчетаПравВОдномСеансе()

	Возврат 10000;
	
КонецФункции

// Записать рассчитанные права поштучно.
// 
// Параметры:
//  КоличествоАктуальных - Число - Количество актуальных
//  КоличествоИзмененных - Число - Количество измененных
// 
// Возвращаемое значение:
//  Булево - Записать рассчитанные права поштучно
Функция ЗаписатьРассчитанныеПраваПоштучно(КоличествоАктуальных, КоличествоИзмененных) Экспорт
	
	ПороговыйКоэффициент = ДокументооборотПраваДоступаПовтИсп.ПороговыйКоэффициентДляЗаписиПравПоштучно();
	
	Если ПороговыйКоэффициент = 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	Если КоличествоАктуальных / КоличествоИзмененных <= ПороговыйКоэффициент Тогда
		// Измененных записей много по сравнению с количеством актуальных, лучше записать набором 
		Результат = Ложь;
	Иначе
		// Измененных записей мало по сравнению с количеством актуальных, лучше записать поштучно
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

Функция ПолучитьИндивидуальныеДескрипторы(ОбъектДоступа, КонтейнерыДескрипторов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектДоступа.Ссылка.Метаданные());
	
	РезультатПоиска = Справочники.ДескрипторыДоступаОбъектов.НайтиИндивидуальныеДескрипторы(
		ОбъектМетаданных,
		КонтейнерыДескрипторов);
	
	Дескрипторы = РезультатПоиска.НайденныеДескрипторы;
	
	Для Каждого СтрокаКонтейнера Из РезультатПоиска.КонтейнерыБезДескрипторов Цикл
		НовыйДескриптор = Справочники.ДескрипторыДоступаОбъектов.СоздатьДескрипторИндивидуальный(
			ОбъектМетаданных, СтрокаКонтейнера.КонтейнерСотрудников, СтрокаКонтейнера.Изменение);
		НовыйДескриптор.Записать();
		Дескрипторы.Добавить(НовыйДескриптор.Ссылка);
	КонецЦикла;
	
	Возврат Дескрипторы;
	
КонецФункции

#Область ПраваНаОбъектыБЭД

// Возвращает описание типов со ссылками на документы БЭД, для которых нужно определять дескрипторы особым образом
// 
// Возвращаемое значение:
//  ОписаниеТипов - Типы ссылок БЭД, для которых нужно определять дескрипторы
Функция ТипыСсылокБЭДДляОпределенияДескрипторов()
	
	Типы = Новый Массив;
	Типы.Добавить(Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО"));
	Типы.Добавить(Тип("ДокументСсылка.ЭлектронныйДокументИсходящийЭДО"));
	Типы.Добавить(Тип("ДокументСсылка.ТранспортныйКонтейнерЭДО"));

	Результат = Новый ОписаниеТипов(Типы);
	
	Возврат Результат;
	
КонецФункции

// Проверяет, относится ли объект доступа к БЭД. Если да, то для него нужно рассчитывать дескрипторы самостоятельно.
// 
// Параметры:
//  ОбъектДоступа - ДокументОбъект, ДокументСсылка
// 
// Возвращаемое значение:
//  Булево - Это объект доступа БЭД
Функция ЭтоОбъектДоступаБЭД(ОбъектДоступа)
	
	ТипСсылки = ТипЗнч(ОбъектДоступа.Ссылка);
	
	Возврат ТипыСсылокБЭДДляОпределенияДескрипторов().СодержитТип(ТипСсылки);
	
КонецФункции

// Возвращает описание объекта доступа.
// 
// Параметры:
// 	ОбъектДоступа - Объект, Ссылка
// 
// Возвращаемое значение:
// 	Объект, Структура - для объекта возвращает его самого, для ссылки возвращает структуру реквизитов.
Функция ОписаниеОбъектаДоступаБЭД(ОбъектДоступа)
	
	ОписаниеОбъекта = ОбъектДоступа;
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ОбъектДоступа)) Тогда
		
		// Для ссылки дескриптор заполняется на основании описания.
		СведенияОПоляхДоступа = "Ссылка, Организация";
		ОписаниеОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ОбъектДоступа, СведенияОПоляхДоступа);
		
		Если Не ЗначениеЗаполнено(ОписаниеОбъекта.Ссылка) Тогда
			ОписаниеОбъекта.Ссылка = ОбъектДоступа;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

// Заполняет дескрипторы доступа для документов БЭД.
// Для документов БЭД права доступа аналогичны правам на чтение организации документа.
// 
// Параметры:
//  ОписаниеОбъекта - См. ОписаниеОбъектаДоступаБЭД
//  ТаблицаДескрипторов - ТаблицаЗначений
//  ПротоколРасчетаПрав - Массив, Неопределено - протокол расчет прав для отображения в интерфейсе
//
Процедура ЗаполнитьДескрипторыОбъектаБЭД(ОписаниеОбъекта, ТаблицаДескрипторов, ПротоколРасчетаПрав)
	
	ЗаполнитьДескрипторыОбъектаОтВладельца(ОписаниеОбъекта, ТаблицаДескрипторов, ОписаниеОбъекта.Организация);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти