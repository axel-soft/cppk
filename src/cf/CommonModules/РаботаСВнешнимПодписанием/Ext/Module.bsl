// @strict-types

#Область СлужебныйПрограммныйИнтерфейс

#Область РегламентныеЗадания

Процедура ОбработкаРезультатовВнешнегоПодписания() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбработкаРезультатовВнешнегоПодписания);

	ОбработатьРезультатыВнешнегоПодписания();
	
КонецПроцедуры

#КонецОбласти

#Область СобытияДействий

// При отметке начала выполнения действия.
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия
//  Параметры см. ДействияСервер.СтруктураПараметровИзмененияДанныхДействия
//
Процедура ПриОтметкеНачалаВыполненияДействия(Действие, Параметры) Экспорт
	
	Если Не ВнешнееПодписаниеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	
	Если НЕ ЭтоОбрабатываемыйСценарийПриНачалаВыполнения(Действие, Параметры, Контекст) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьОтметкуНачалаВыполненияДействия(Действие, Параметры, Контекст);
	
КонецПроцедуры

// При отметке выполнения действия.
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия, ОпределяемыйТип.ДействияОбъект -
//  Параметры - Структура - Структура изменения ДействияСервер.СтруктураПараметровИзмененияДанныхДействия
//
Процедура ПриОтметкеВыполненияДействия(Действие, Параметры) Экспорт
	
	Если Не ВнешнееПодписаниеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	
	Если НЕ ЭтоОбрабатываемыйСценарийПриОтметкеВыполнения(Действие, Параметры, Контекст) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьОтметкуВыполненияДействия(Действие, Параметры, Контекст);
	
КонецПроцедуры

// При прерывании выполнения действия.
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия.
//
Процедура ПриПрерыванииВыполненияДействия(Действие) Экспорт
	
	Если Не ВнешнееПодписаниеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоОбрабатываемыйСценарийПриПрерывании(Действие) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьПрерываниеВыполненияДействия(Действие);

КонецПроцедуры

// При помещении действия в историю.
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия.
//
Процедура ПриПомещенииДействияВИсторию(Действие) Экспорт
	
	Если Не ВнешнееПодписаниеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоОбрабатываемыйСценарийПриПомещенииДействияВИсторию(Действие) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьПрерываниеВыполненияДействия(Действие);

КонецПроцедуры

// Действия при записи.
// 
// Параметры:
// 	Объект - ОпределяемыйТип.ДействияОбъект - записываемый объект.
// 	ДополнительныеСвойства - Структура - содержащая дополнительные свойства записи.
// 	ФункцияУчастника - ОпределяемыйТип.ФункцииУчастниковДействий - функция участника.
// 
Процедура ДействияПриЗаписи(Объект, ДополнительныеСвойства, ФункцияУчастника) Экспорт
	
	Если Не ВнешнееПодписаниеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	
	Если НЕ ЭтоОбрабатываемыйСценарийДействияПриЗаписи(Объект, ДополнительныеСвойства, ФункцияУчастника, Контекст) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьДействияПриЗаписи(Объект, ДополнительныеСвойства, ФункцияУчастника, Контекст);
	
КонецПроцедуры

// Обработать остановку продолжение выполнения действий.
// 
// Параметры:
//  Действия - Массив Из ОпределяемыйТип.Действия
//  СостояниеОбработки - ПеречислениеСсылка.СостоянияОбработкиОбъектов - Состояние обработки действия
//
Процедура ОбработатьОстановкуПродолжениеВыполненияДействий(Действия, СостояниеОбработки) Экспорт
	
	Если Не ВнешнееПодписаниеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СведенияОВнешнемПодписании.Ссылка КАК Сведение,
	|	СведенияОВнешнемПодписании.Сервис КАК Сервис
	|ИЗ
	|	Документ.СведенияОВнешнемПодписании КАК СведенияОВнешнемПодписании
	|ГДЕ
	|	СведенияОВнешнемПодписании.ПометкаУдаления = ЛОЖЬ
	|	И СведенияОВнешнемПодписании.РезультатОбработан = ЛОЖЬ
	|	И СведенияОВнешнемПодписании.Действие В (&Действия)";
	Запрос.УстановитьПараметр("Действия", Действия);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МодульОбработки = Неопределено;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если МодульОбработки = Неопределено Тогда
			МодульОбработки = МодульОбработкиПоСервису(Выборка.Сервис);
			Если МодульОбработки = Неопределено Тогда
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Отсутствует модуль обработки для сервиса %1'"), Выборка.Сервис);
			КонецЕсли;
		КонецЕсли;
		Если СостояниеОбработки = Перечисления.СостоянияОбработкиОбъектов.Остановлена Тогда
			МодульОбработки.ПриПометкеУдаленияСведенияОВнешнемПодписании(Выборка.Сведение);
		Иначе
			МодульОбработки.ПриСозданииСведенияОВнешнемПодписании(Выборка.Сведение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияДействийЗадач

// При выполнении действия задачи.
// 
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи - Действие задачи.
//  РезультатДействия - СправочникСсылка.РезультатыДействийЗадач - Результат действия.
//  КтоОтметил - СправочникСсылка.Сотрудники - Кто отметил в программе.
//  ПараметрыВыполнения см. РаботаСЗадачамиКлиентСервер.НовыйПараметрыВыполненияДействийЗадач
//
Процедура ПриВыполненииДействияЗадачи(ДействиеЗадачи, РезультатДействия, КтоОтметил, ПараметрыВыполнения) Экспорт
	
	Если Не ВнешнееПодписаниеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	
	Если Не ЭтоОбрабатываемыйСценарийПриВыполненииДействияЗадачи(ДействиеЗадачи, РезультатДействия,
			КтоОтметил, ПараметрыВыполнения, Контекст) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьВыполнениеДействияЗадачи(ДействиеЗадачи, РезультатДействия, КтоОтметил, ПараметрыВыполнения, Контекст);
	
КонецПроцедуры

// При взятиии задачи в работу.
//
// Параметры:
//  ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя
//  Исполнитель - СправочникСсылка.Сотрудники.
//  РольИсполнителя - СправочникСсылка.ПолныеРоли -
//  Отмена - Булево - Истина, если отмена взятия задачи в работу
//
Процедура ПриВзятииЗадачиВРаботу(ЗадачаПроцесса, Исполнитель, РольИсполнителя, Отмена) Экспорт
	
	Если Не ЗначениеЗаполнено(РольИсполнителя) Тогда
		Возврат;
	КонецЕсли;
	
	ВнешнееПодписаниеВключено = ВнешнееПодписаниеВключено();
	Если Не ВнешнееПодписаниеВключено Тогда
		Возврат;
	КонецЕсли;
	
	ДействиеЗадачи = Документы.ДействиеЗадачи.НайтиПоИсточнику(ЗадачаПроцесса);
	Действие = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеЗадачи, "Задача.Источник");
	Если ОбщегоНазначения.ЭтоБизнесПроцесс(Действие.Метаданные()) Тогда
		Действие = РегистрыСведений.ПроцессыДействий.ДействиеПоПроцессу(Действие);
	КонецЕсли;
	Если Не ДействияКлиентСервер.ЭтоДействие(Действие) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьВзятиеЗадачиВРаботу(Действие, Исполнитель, РольИсполнителя, ВнешнееПодписаниеВключено, Отмена);
	
КонецПроцедуры

// Обработать взятие задачи в работу.
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия -
//  Исполнитель - СправочникСсылка.Сотрудники -
//  РольИсполнителя - СправочникСсылка.ПолныеРоли - 
//  Отмена - Булево - Истина, если отмена взятия задачи в работу
//  ВнешнееПодписаниеВключено - Булево, Неопределено - определяет, что в базе используется или не используется
//  внешнее подписание
//
Процедура ОбработатьВзятиеЗадачиВРаботу(Действие, Исполнитель, РольИсполнителя, Отмена,
		ВнешнееПодписаниеВключено = Неопределено) Экспорт
	
	Если ВнешнееПодписаниеВключено = Ложь 
		Или (ВнешнееПодписаниеВключено = Неопределено И Не ВнешнееПодписаниеВключено()) Тогда 
			Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Исполнитель, "Владелец");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СведенияОВнешнемПодписании.Ссылка КАК Сведение,
	|	СведенияОВнешнемПодписании.Сервис КАК Сервис
	|ИЗ
	|	Документ.СведенияОВнешнемПодписании КАК СведенияОВнешнемПодписании
	|ГДЕ
	|	СведенияОВнешнемПодписании.ПометкаУдаления = ЛОЖЬ
	|	И СведенияОВнешнемПодписании.РезультатОбработан = ЛОЖЬ
	|	И СведенияОВнешнемПодписании.Действие = &Действие
	|	И СведенияОВнешнемПодписании.Участник = &Участник
	|	И СведенияОВнешнемПодписании.ФизическоеЛицо <> &ФизическоеЛицо";
	Запрос.УстановитьПараметр("Действие", Действие);
	Запрос.УстановитьПараметр("Участник", РольИсполнителя);
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МодульОбработки = Неопределено;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если МодульОбработки = Неопределено Тогда
			МодульОбработки = МодульОбработкиПоСервису(Выборка.Сервис);
			Если МодульОбработки = Неопределено Тогда
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Отсутствует модуль обработки для сервиса %1'"), Выборка.Сервис);
			КонецЕсли;
		КонецЕсли;
		Если Отмена Тогда
			МодульОбработки.ПриСозданииСведенияОВнешнемПодписании(Выборка.Сведение);
		Иначе
			МодульОбработки.ПриПометкеУдаленияСведенияОВнешнемПодписании(Выборка.Сведение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияСведенийОВнешнемПодписании

// При создании сведения о внешнем подписании.
// 
// Параметры:
//  СведенияОбъект - ДокументОбъект.СведенияОВнешнемПодписании,
//  Отказ - Булево
//
Процедура ПриСозданииСведенияОВнешнемПодписании(СведенияОбъект, Отказ) Экспорт
	
	Модуль = МодульОбработкиСведения(СведенияОбъект);
	Модуль.ПриСозданииСведенияОВнешнемПодписании(СведенияОбъект.Ссылка);
	
КонецПроцедуры

// При пометке удаления сведения о внешнем подписании.
// 
// Параметры:
//  СведенияОбъект - ДокументОбъект.СведенияОВнешнемПодписании,
//  Отказ - Булево
//
Процедура ПриПометкеУдаленияСведенияОВнешнемПодписании(СведенияОбъект, Отказ) Экспорт
	
	Модуль = МодульОбработкиСведения(СведенияОбъект);
	Модуль.ПриПометкеУдаленияСведенияОВнешнемПодписании(СведенияОбъект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СобытияИсполнителиРолей

// При записи исполнителей ролей.
// Анализирует необходимость обновления сведений о внешних подписаниях и
// ставит в очередь обработки сведения, для которых требуются дополнительные действия.
// 
// Параметры:
//  СтарыеСоставыКонтейнеров см. РегистрыСведений.СотрудникиВКонтейнерах.СотрудникиВКонтейнерах
//  НовыеСоставыКонтейнеров см. РегистрыСведений.СотрудникиВКонтейнерах.СотрудникиВКонтейнерах
//  Отказ - Булево
//
Процедура ИсполнителиРолейПриЗаписи(СтарыеСоставыКонтейнеров, НовыеСоставыКонтейнеров, Отказ) Экспорт
	
	Если Не ВнешнееПодписаниеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Изменившиеся = Новый Соответствие;
	Если Не СоставыКонтейнеровИзменились(Изменившиеся, СтарыеСоставыКонтейнеров, НовыеСоставыКонтейнеров) Тогда
		Возврат;
	КонецЕсли;

	ОбработатьИзменениеСоставаКонтейнера(Изменившиеся, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СобытияИзмененияПредметаВнешнегоПодписания

// При записи версии файла внешнее подписание при записи.
// 
// Параметры:
//  Источник - СправочникОбъект.ВерсииФайлов - Источник
//  Отказ - Булево - Отказ
//
Процедура ПриЗаписиВерсииФайлаВнешнееПодписаниеПриЗаписи(Источник, Отказ) Экспорт
	
	Если Не ВнешнееПодписаниеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ФайлСсылка = Источник.Владелец;
	РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФайлСсылка, "ТекущаяВерсия,ВладелецФайла");
	
	// Версия не поменялась или не поменялась пометка удаления.
	Если РеквизитыФайла.ТекущаяВерсия = Источник.Ссылка Тогда
		ИзмененаПометкаУдаления = Неопределено; // Булево
		Источник.ДополнительныеСвойства.Свойство("ИзмененаПометкаУдаления", ИзмененаПометкаУдаления);
		Если ИзмененаПометкаУдаления = Неопределено Или Не ИзмененаПометкаУдаления Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Владелец не документ.
	Если ТипЗнч(РеквизитыФайла.ВладелецФайла) <> Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьАктивныеОбработки = Справочники.ОбработкиОбъектов.ЕстьАктивныеОбработки(РеквизитыФайла.ВладелецФайла);
	Если Не ЕстьАктивныеОбработки Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущаяОбработка = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(РеквизитыФайла.ВладелецФайла);
	РеквизитыОбработки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяОбработка, "ДатаСоздания, Состояние");
	Если РеквизитыОбработки.Состояние = Перечисления.СостоянияОбработкиОбъектов.Остановлена Тогда
		Возврат;
	КонецЕсли;		
	ДатаСозданияОбработки = РеквизитыОбработки.ДатаСоздания;
	
	Документ = РеквизитыФайла.ВладелецФайла; // СправочникСсылка.ДокументыПредприятия	
	ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ВидДокумента");
	
	РезультатЗапросаДействияОбработки = ДействияСервер.ВсеДействияОбработкиИПредмета(
		Документ,
		ВидДокумента,
		ТекущаяОбработка,
		ДатаСозданияОбработки);
	
	Если РезультатЗапросаДействияОбработки.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	СлужебныйВнешнееПодписание = Ложь;
	Источник.ДополнительныеСвойства.Свойство("СлужебныйВнешнееПодписание", СлужебныйВнешнееПодписание);
	
	ДействияОбработки = РезультатЗапросаДействияОбработки.Выгрузить().ВыгрузитьКолонку("Действие");
	Сведения = ВсеАктивныеСведенияВнешнегоПодписанияПоДействиям(ДействияОбработки);
	Если Сведения.Количество() = 0 Или СлужебныйВнешнееПодписание Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	ВызватьИсключение 
		НСтр("ru = 'По документу есть активная обработка с возможностью выполнения действия через сервис 
			 |""1С:Кабинет сотрудника"". Изменение файлов документа не доступно.'");
	
КонецПроцедуры

// Перед записью документа.
// 
// Параметры:
//  ДокументОбъект - СправочникОбъект.ДокументыПредприятия
//  Отказ - Булево
//
Процедура ПередЗаписьюДокумента(ДокументОбъект, Отказ) Экспорт
	
	Если Не ВнешнееПодписаниеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства = ДокументОбъект.ДополнительныеСвойства;
	ЭтоНовый = Неопределено; // Булево
	ДополнительныеСвойства.Свойство("ЭтоНовый", ЭтоНовый);
	
	Если ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияДокументооборот.УстановитьДополнительноеСвойствоПредыдущиеЗначенияРеквизитов(ДокументОбъект);
	
КонецПроцедуры

// При записи документа.
// 
// Параметры:
//  ДокументОбъект - СправочникОбъект.ДокументыПредприятия
//  Отказ - Булево
//
Процедура ПриЗаписиДокумента(ДокументОбъект, Отказ) Экспорт
	
	Если Не ВнешнееПодписаниеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства = ДокументОбъект.ДополнительныеСвойства;
	ЭтоНовый = Неопределено; // Булево
	ДополнительныеСвойства.Свойство("ЭтоНовый", ЭтоНовый);
	
	Если ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	ОтслеживаемыеРеквизитыИзменились = ОбщегоНазначенияДокументооборот.ИзменилосьЗначениеРеквизитов(
		ДокументОбъект, Справочники.ДокументыПредприятия.ОтслеживаемыеРеквизиты());
	
	Если Не ОтслеживаемыеРеквизитыИзменились Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Если Не ЭтоОбрабатываемыйСценарийПриЗаписиДокумента(ДокументОбъект, Отказ, Контекст) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьПриЗаписиДокумента(ДокументОбъект, Контекст, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОчередьОбработкиРезультатовВнешнегоПодписания

// Поставить в очередь результат подписания.
// 
// Параметры:
//  Сведения - ДокументСсылка.СведенияОВнешнемПодписании
//  Результат см. КабинетСотрудникаМенеджерОбмена.ОписаниеОбъектРезультатСогласования
//
Процедура ПоставитьВОчередьРезультатПодписания(Сведения, Результат) Экспорт
	
	НаборЗаписей = РегистрыСведений.ОчередьОбработкиРезультатовВнешнегоПодписания.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сведения.Установить(Сведения);
	НаборЗаписей.Отбор.ИдентификаторОбъекта.Установить(Результат.ИдентификаторОбъекта);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		Запись = НаборЗаписей.Добавить();
		Запись.Сведения				= Сведения;
		Запись.ИдентификаторОбъекта	= Результат.ИдентификаторОбъекта;
		Запись.Данные				= Новый ХранилищеЗначения(Результат);
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССервисамиВнешнегоПодписания

#Область ИнтеграцияСМодулямиОбработкиСервисов

// Отметить отправленным.
// 
// Параметры:
//  Сведения - ДокументСсылка.СведенияОВнешнемПодписании
//
Процедура ОтметитьОтправленным(Сведения) Экспорт
	
	СведенияОбъект = Сведения.ПолучитьОбъект();
	СведенияОбъект.Отправлен = Истина;
	СведенияОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКлючами

// Есть ключи сервиса.
// 
// Параметры:
//  Сервис - СправочникСсылка.СервисыВнешнегоПодписания
// 
// Возвращаемое значение:
//  Булево - Есть ключи сервиса
//
Функция ЕстьКлючиСервиса(Сервис) Экспорт
	
	Возврат (КлючиСервисаИзБезопасногоХранилища(Сервис) <> Неопределено);
	
КонецФункции

// Получить ключи приложения из безопасного хранилища.
//
// Параметры:
//  Сервис - СправочникСсылка.СервисыВнешнегоПодписания
//
// Возвращаемое значение:
//  Неопределено, Структура - Ключи приложения из безопасного хранилища:
// * ИдентификаторКлиента - Строка
// * СекретКлиента - Строка
//
Функция КлючиСервисаИзБезопасногоХранилища(Сервис) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеВБезопасномХранилище = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		Сервис, "ИдентификаторКлиента,СекретКлиента");
	УстановитьПривилегированныйРежим(Ложь);
	
	ИдентификаторКлиента = Неопределено; // Строка
	СекретКлиента = Неопределено; // Строка
	ДанныеВБезопасномХранилище.Свойство("ИдентификаторКлиента",	ИдентификаторКлиента);
	ДанныеВБезопасномХранилище.Свойство("СекретКлиента",		СекретКлиента);
	
	Если ИдентификаторКлиента <> Неопределено
		И СекретКлиента <> Неопределено Тогда
		
		Ключи = НовыеКлючиСервиса();
		Ключи.ИдентификаторКлиента	= ИдентификаторКлиента;
		Ключи.СекретКлиента			= СекретКлиента;
		Возврат Ключи;
	КонецЕсли;
		
	Возврат Неопределено;

КонецФункции

// Сохранить ключи сервиса в безопасном хранилище.
// 
// Параметры:
//  Сервис - СправочникСсылка.СервисыВнешнегоПодписания
//  ИдентификаторКлиента - Строка
//  СекретКлиента - Строка
//
Процедура СохранитьКлючиСервисаВБезопасномХранилище(Сервис, ИдентификаторКлиента, СекретКлиента) Экспорт

	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Сервис, ИдентификаторКлиента, "ИдентификаторКлиента");
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Сервис, СекретКлиента, "СекретКлиента");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Прочее

// Получить ключ записи регистра идентификаторов для существующей записи или Неопределено.
// 
// Параметры:
//  ЗначенияКлюча - Структура
// 
// Возвращаемое значение:
//  Неопределено, РегистрСведенийКлючЗаписи.ИдентификаторыОбъектовВСервисахВнешнегоПодписания -
//
Функция ПолучитьКлючЗаписиРегистраИдентификаторов(ЗначенияКлюча) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ИдентификаторыОбъектовВСервисахВнешнегоПодписания.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ЗначенияКлюча);
	МенеджерЗаписи.Прочитать();
	
	Если Не МенеджерЗаписи.Выбран() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РегистрыСведений.ИдентификаторыОбъектовВСервисахВнешнегоПодписания.СоздатьКлючЗаписи(ЗначенияКлюча);
	
КонецФункции

// Идентификатор объекта в сервиса. Вернёт Неопределено если не задан или не заполнен. 
// 
// Параметры:
//  Сервис - СправочникСсылка.СервисыВнешнегоПодписания
//  Объект - ОпределяемыйТип.СопоставляемыеОбъектыВнешнегоПодписания
// 
// Возвращаемое значение:
//  Неопределено, Строка - Идентификатор объекта в сервиса
//
Функция ИдентификаторОбъектаВСервисе(Сервис, Объект) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ИдентификаторыОбъектовВСервисахВнешнегоПодписания.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Сервис = Сервис;
	МенеджерЗаписи.Объект = Объект;
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи.Прочитать();
	УстановитьПривилегированныйРежим(Ложь);
	Если МенеджерЗаписи.Выбран() И ЗначениеЗаполнено(МенеджерЗаписи.Идентификатор) Тогда
		Возврат МенеджерЗаписи.Идентификатор;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Объект по идентификатору сервиса.
// 
// Параметры:
//  Сервис        - СправочникСсылка.СервисыВнешнегоПодписания
//  Идентификатор - Строка
// 
// Возвращаемое значение:
//  Неопределено, ОпределяемыйТип.СопоставляемыеОбъектыВнешнегоПодписания -
//
Функция ОбъектПоИдентификаторуСервиса(Сервис, Идентификатор) Экспорт
	
	Выборка = ВыборкаОбъектПоИдентификаторуСервиса(Сервис, Идентификатор);
	Если Выборка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

// Получает хеш по алгоритму SHA256 и преобразовывает в HexСтроку.
//
// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные
//  
// Возвращаемое значение:
//  Строка
//
Функция ВерсияФайлаПоДвоичнымДанным(ДвоичныеДанные) Экспорт

	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
	ХешированиеДанных.Добавить(ДвоичныеДанные);
	
	Возврат ВРег(ПолучитьHexСтрокуИзДвоичныхДанных(ХешированиеДанных.ХешСумма));

КонецФункции

// Сведения о внешнем подписании по идентификаторам.
// 
// Параметры:
//  ИдентификаторыДокументов - Массив Из Строка
// 
// Возвращаемое значение:
// 	Соответствие Из КлючИЗначение:
//   * Ключ   - Строка - Идентификатор
//   * Значение - Структура:
//   	** Ссылка         - ДокументСсылка.СведенияОВнешнемПодписании
//   	** ВерсияПредмета - Строка
//
Функция СведенияОВнешнемПодписанииПоИдентификаторам(ИдентификаторыДокументов) Экспорт
	
	Выборка = ВыборкаСведенияОВнешнемПодписанииПоИдентификаторам(ИдентификаторыДокументов);
	Если Выборка = Неопределено Тогда
		Возврат Новый Соответствие
	КонецЕсли;
	
	Результат = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ДанныеПоИдентификатору = Новый Структура;
		ДанныеПоИдентификатору.Вставить("Ссылка", Выборка.Ссылка);
		ДанныеПоИдентификатору.Вставить("ВерсияПредмета", Выборка.ВерсияПредмета);
		Результат.Вставить(Выборка.ИдентификаторДокумента, ДанныеПоИдентификатору);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Занести информацию о внешнем подписании.
// 
// Параметры:
//  ИдентификаторПодписи - УникальныйИдентификатор
//  Сведения - ДокументСсылка.СведенияОВнешнемПодписании
//  СвойстваПодписи см. ЭлектроннаяПодписьКлиентСервер.НовыеСвойстваПодписи
//
Процедура ЗанестиИнформациюОВнешнемПодписании(ИдентификаторПодписи, Сведения, СвойстваПодписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.СведенияОВнешнемПодписанииЭлектронныхПодписей.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.УникальныйИдентификатор = ИдентификаторПодписи;
	МенеджерЗаписи.Сведения = Сведения;
	МенеджерЗаписи.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// При получении данных объектов для проверки подписей.
// Проверяем, есть ли среди подписей объектов внешние подписи, если есть, добавляет двоичные данные в данные объекта.
// 
// Параметры:
//  ДанныеОбъектов - Соответствие Из КлючИЗначение - сформированные данные объектов:
//   * Ключ - СправочникСсылка.ДокументыПредприятия, СправочникСсылка.ВерсииФайлов -
//   * Значение см. РаботаСЭПКлиентСервер.НовыеДанныеОбъектаДляПроверкиПодписи
//  ПараметрыПолучения см. РаботаСЭПКлиентСервер.НовыеПараметрыПолученияДанныхОбъектовДляПроверкиПодписей 
//
Процедура ПриПолученииДанныхОбъектовДляПроверкиПодписей(ДанныеОбъектов, ПараметрыПолучения) Экспорт
	
	// Для внешнего подписания через КС подписываемые двоичные данные общие, сформированные из документа.
	// Соберем из ключей структуры ДанныеОбъектов документы предприятия, получим для них двоичные данные.
	// Могут быть переданы на проверку как все подписи, так и отдельные.
	
	ВсеОбъекты = КлючиСоответствияВМассив(ДанныеОбъектов);
	ПоТипам = ОбщегоНазначенияДокументооборотКлиентСервер.СоответствиеПоТипам(ВсеОбъекты);
	
	ВсеВерсииФайлов = ПоТипам[Тип("СправочникСсылка.ВерсииФайлов")];
	ВсеДокументыПредприятия = ПоТипам[Тип("СправочникСсылка.ДокументыПредприятия")];
	
	КешДвоичныхДанныхПоДокументам = Новый Соответствие;
	
	Если ВсеДокументыПредприятия <> Неопределено Тогда
		Для Каждого ДокументПредприятия Из ВсеДокументыПредприятия Цикл // СправочникСсылка.ДокументыПредприятия
			ПополнитьКешДвоичныхДанныхПоДокументам(КешДвоичныхДанныхПоДокументам, 
				ПараметрыПолучения, ДокументПредприятия);
		КонецЦикла;
	КонецЕсли;
	
	Если ВсеВерсииФайлов <> Неопределено Тогда
		//@skip-check wrong-string-literal-content
		ВладельцыВерсийФайлов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВсеВерсииФайлов, "Владелец");
		ВсеФайлы = Новый Массив; // СправочникСсылка.Файлы
		Для Каждого КлючИЗначение Из ВладельцыВерсийФайлов Цикл
			ВсеФайлы.Добавить(КлючИЗначение.Значение);
		КонецЦикла;
		//@skip-check wrong-string-literal-content
		ВладельцыФайлов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВсеФайлы, "ВладелецФайла");
		Для Каждого ВерсияФайла Из ВсеВерсииФайлов Цикл // СправочникСсылка.ВерсииФайлов
			Файл = ВладельцыВерсийФайлов[ВерсияФайла];
			ДокументВладелец = ВладельцыФайлов[Файл]; // СправочникСсылка.ДокументыПредприятия
			ПополнитьКешДвоичныхДанныхПоДокументам(КешДвоичныхДанныхПоДокументам, 
				ПараметрыПолучения, ВерсияФайла, ДокументВладелец);
		КонецЦикла;
	КонецЕсли;
	
	Если КешДвоичныхДанныхПоДокументам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ДанныеОбъектов Цикл
		
		Объект = КлючИЗначение.Ключ;
		ДанныеОбъекта = КлючИЗначение.Значение;
		
		СведенияДляДополненияДанныхОбъектов = 
			КешДвоичныхДанныхПоДокументам[Объект]; // см. НовыеСведенияДляДополненияДанныхОбъектов
		Если СведенияДляДополненияДанныхОбъектов = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Версия = СведенияДляДополненияДанныхОбъектов.Версия;
		
		ДвоичныеДанныеВерсии = ДанныеОбъекта.ДвоичныеДанныеПоВерсиям[Версия];
		Если ДвоичныеДанныеВерсии = Неопределено Тогда
			ДвоичныеДанныеВерсии = Новый Массив;
			ДанныеОбъекта.ДвоичныеДанныеПоВерсиям.Вставить(Версия, ДвоичныеДанныеВерсии);
		КонецЕсли;
		
		Если ДанныеОбъекта.РазныеВерсииПодписей = Ложь И ЗначениеЗаполнено(ДанныеОбъекта.АдресДанных) Тогда
			ДанныеОбъекта.РазныеВерсииПодписей = Истина;
			ДвоичныеДанныеВерсии.Добавить(ДанныеОбъекта.АдресДанных);
			ДанныеОбъекта.АдресДанных = Неопределено;
		КонецЕсли;
		ДвоичныеДанныеВерсии.Добавить(СведенияДляДополненияДанныхОбъектов.АдресДвоичныхДанных);
		
	КонецЦикла;
	
КонецПроцедуры

// Возможно удаление идентификатора объекта сервиса.
// 
// Параметры:
//  Сервис - СправочникСсылка.СервисыВнешнегоПодписания
//  Объект - ОпределяемыйТип.СопоставляемыеОбъектыВнешнегоПодписания
// 
// Возвращаемое значение:
//  Булево - Возможно удаление идентификатора объекта сервиса
//
Функция ВозможноУдалениеИдентификатораОбъектаСервиса(Сервис, Объект) Экспорт
	
	ЧастиЗапроса = Новый Массив; // Массив Из Строка
	ЧастиЗапроса.Добавить("ВЫБРАТЬ ПЕРВЫЕ 1
	|	СведенияОВнешнемПодписании.Ссылка
	|ИЗ
	|	Документ.СведенияОВнешнемПодписании КАК СведенияОВнешнемПодписании
	|ГДЕ
	|	СведенияОВнешнемПодписании.ПометкаУдаления = ЛОЖЬ
	|	И СведенияОВнешнемПодписании.РезультатОбработан = ЛОЖЬ
	|	и СведенияОВнешнемПодписании.Сервис = &Сервис");
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
		ДополнениеТекстаЗапроса = "	И СведенияОВнешнемПодписании.Организация = &Объект";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ДополнениеТекстаЗапроса = "	И СведенияОВнешнемПодписании.ФизическоеЛицо = &Объект";
	Иначе
		ВызватьИсключение 
			НСтр("ru = 'Не предусмотренный Тип объекта при проверке возможности удаления идентификатора объекта'");
	КонецЕсли;
	ЧастиЗапроса.Добавить(ДополнениеТекстаЗапроса);
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	Запрос.УстановитьПараметр("Сервис", Сервис);
	Запрос.УстановитьПараметр("Объект", Объект);
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИзмененияСоставаПолныхРолей

// Составы контейнеров изменились. Заполняет данные по изменившимся контенйерам в параметре ИзменившиесяКонтейнеры
// 
// Параметры:
//  ИзменившиесяКонтейнеры - Соответствие Из КлючИЗначение:
//   * Ключ - СправочникСсылка.ПолныеРоли
//   * Значение - Структура:
//     ** Добавлены - Массив Из СправочникСсылка.ФизическиеЛица
//     ** Удалены - Массив Из СправочникСсылка.ФизическиеЛица
//  СтарыеСоставыКонтейнеров см. РегистрыСведений.СотрудникиВКонтейнерах.СотрудникиВКонтейнерах
//  НовыеСоставыКонтейнеров см. РегистрыСведений.СотрудникиВКонтейнерах.СотрудникиВКонтейнерах
// 
// Возвращаемое значение:
//  Булево - Составы контейнеров изменились
//
Функция СоставыКонтейнеровИзменились(ИзменившиесяКонтейнеры, СтарыеСоставыКонтейнеров, НовыеСоставыКонтейнеров)
	
	Для Каждого КлючИЗначение Из СтарыеСоставыКонтейнеров Цикл
		
		Контейнер = КлючИЗначение.Ключ;
		СтарыйСостав = КлючИЗначение.Значение; // Массив
		НовыйСостав = НовыеСоставыКонтейнеров[Контейнер]; // Массив
		
		СтарыйСоставФЛ = ФизическиеЛицаСотрудников(СтарыйСостав);
		НовыйСоставФЛ = ФизическиеЛицаСотрудников(НовыйСостав);
		
		УдаленныеФЛ = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СтарыйСоставФЛ, НовыйСоставФЛ);
		ДобавленныеФЛ = ОбщегоНазначенияКлиентСервер.РазностьМассивов(НовыйСоставФЛ, СтарыйСоставФЛ);
		
		Если УдаленныеФЛ.Количество() <> 0 Или ДобавленныеФЛ.Количество() <> 0 Тогда
			
			Изменения = Новый Структура("Добавлены, Удалены", ДобавленныеФЛ, УдаленныеФЛ);
			ИзменившиесяКонтейнеры.Вставить(Контейнер, Изменения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИзменившиесяКонтейнеры.Количество() <> 0;
	
КонецФункции

// Поставить в очередь обновления по изменившимся контейнерам. Находит сведения, по которым нужно выполнить обновление:
// Какие-то нужно пометить на удаление, какие-то нужно добавить.
// 
// Параметры:
//  ИзменившиесяКонтейнеры - Соответствие Из КлючИЗначение:
//   * Ключ - СправочникСсылка.ПолныеРоли
//   * Значение - Структура:
//     ** Добавлены - Массив Из СправочникСсылка.ФизическиеЛица
//     ** Удалены - Массив Из СправочникСсылка.ФизическиеЛица
//  Отказ - Булево
//
Процедура ОбработатьИзменениеСоставаКонтейнера(ИзменившиесяКонтейнеры, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		Данные = ДанныеКОбработкеПриИзмененииСоставаКонтейнеров(ИзменившиесяКонтейнеры);
		
		Если Данные <> Неопределено Тогда
			// Помечаем на удаление те, где нужно.
			СтрокиПометитьНаУдаление = Данные.НайтиСтроки(Новый Структура("ПометитьНаУдаление", Истина));
			ТаблицаСсылокПометитьНаУдаление = Данные.Скопировать(СтрокиПометитьНаУдаление, "Ссылка");
			ТаблицаСсылокПометитьНаУдаление.Свернуть("Ссылка");
			ПометитьНаУдалениеСведенияВПривилегированномРежиме(ТаблицаСсылокПометитьНаУдаление.ВыгрузитьКолонку("Ссылка"));
			
			СтрокиСоздать = Данные.НайтиСтроки(Новый Структура("Создать", Истина));
			ТаблицаСсылокСоздать = Данные.Скопировать(СтрокиСоздать, "Ссылка");
			ТаблицаСсылокСоздать.Свернуть("Ссылка");
			СсылкиСоздать = ТаблицаСсылокСоздать.ВыгрузитьКолонку("Ссылка");
			ДанныеСведений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СсылкиСоздать, 
				"Сервис,Действие,ИдентификаторУчастника,Участник,ПредметПодписания,
				|ВерсияПредмета,Организация,НазваниеДокумента,ДополнительныеПредставления");
			Для Каждого СтрокаСоздать Из СтрокиСоздать Цикл
				ДанныеСведения = ДанныеСведений[СтрокаСоздать.Ссылка];
				ДанныеЗаполнения = НовыеДанныеЗаполненияСведенияОВнешнемПодписании();
				ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ДанныеСведения, , "ДополнительныеПредставления");
				ДанныеЗаполнения.ФизическоеЛицо = СтрокаСоздать.ФизическоеЛицо;
				ДополнительныеПредставления = Неопределено; // РезультатЗапроса
				ДанныеСведения.Свойство("ДополнительныеПредставления", ДополнительныеПредставления);
				ТаблицаДополнительныхПредставлений = ДополнительныеПредставления.Выгрузить();
				МассивПредставлений = ТаблицаДополнительныхПредставлений.ВыгрузитьКолонку("Представление");
				ДанныеЗаполнения.ДополнительныеПредставления = МассивПредставлений;
				СоздатьСведенияВПривилегированномРежиме(ДанныеЗаполнения);
			КонецЦикла;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации("ВнешнееПодписание.Изменение состава контейнеров",
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Отказ = Истина;
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Данные к обработке при изменении состава контейнеров.
// 
// Параметры:
//  ИзменившиесяКонтейнеры - Соответствие Из КлючИЗначение - Изменившиеся контейнеры:
//   * Ключ - СправочникСсылка.ПолныеРоли -
//   * Значение - Структура -:
//   ** Добавлены - Массив из СправочникСсылка.ФизическиеЛица -
//   ** Удалены - Массив из СправочникСсылка.ФизическиеЛица -
// 
// Возвращаемое значение:
//  Неопределено, ТаблицаЗначений - Данные к обработке или Неопределено:
//   * Ссылка - ДокументСсылка.СведенияОВнешнемПодписании
//   * ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//   * ПометитьНаУдаление - Булево
//   * Создать - Булево
//
Функция ДанныеКОбработкеПриИзмененииСоставаКонтейнеров(ИзменившиесяКонтейнеры)
	
	ТаблицаДобавлены = Новый ТаблицаЗначений();
	ТаблицаДобавлены.Колонки.Добавить("Участник", Новый ОписаниеТипов("СправочникСсылка.ПолныеРоли"));
	ТаблицаДобавлены.Колонки.Добавить("ФизЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаУдалены = ТаблицаДобавлены.Скопировать();
	Для Каждого КлючИЗначение Из ИзменившиесяКонтейнеры Цикл
		ПолнаяРоль = КлючИЗначение.Ключ;
		Для Каждого ФизЛицо Из КлючИЗначение.Значение.Добавлены Цикл
			НоваяСтрока = ТаблицаДобавлены.Добавить();
			НоваяСтрока.Участник = ПолнаяРоль;
			НоваяСтрока.ФизЛицо = ФизЛицо;
		КонецЦикла;
		Для Каждого ФизЛицо Из КлючИЗначение.Значение.Удалены Цикл
			НоваяСтрока = ТаблицаУдалены.Добавить();
			НоваяСтрока.Участник = ПолнаяРоль;
			НоваяСтрока.ФизЛицо = ФизЛицо;
		КонецЦикла;
	КонецЦикла;
	
	Если ТаблицаДобавлены.Количество() = 0 И ТаблицаУдалены.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Удалены.Участник КАК Участник,
	|	Удалены.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ Удалены
	|ИЗ
	|	&Удалены КАК Удалены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Добавлены.Участник КАК Участник,
	|	Добавлены.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ Добавлены
	|ИЗ
	|	&Добавлены КАК Добавлены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДобавленыТ.Участник КАК Участник
	|ПОМЕСТИТЬ втВсеПолныеРоли
	|ИЗ
	|	Добавлены КАК ДобавленыТ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	УдаленыТ.Участник
	|ИЗ
	|	Удалены КАК УдаленыТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументСведения.Ссылка КАК Ссылка,
	|	ДокументСведения.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА УдаленыТ.ФизЛицо ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПометитьНаУдаление,
	|	ЛОЖЬ КАК Создать
	|ИЗ
	|	Документ.СведенияОВнешнемПодписании КАК ДокументСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Удалены КАК УдаленыТ
	|		ПО (УдаленыТ.Участник = ДокументСведения.Участник)
	|		И (УдаленыТ.ФизЛицо = ДокументСведения.ФизическоеЛицо)
	|ГДЕ
	|	ДокументСведения.ПометкаУдаления = ЛОЖЬ
	|	И ДокументСведения.Участник В
	|		(ВЫБРАТЬ
	|			втВсеПолныеРоли.Участник
	|		ИЗ
	|			втВсеПолныеРоли)
	|	И ВЫБОР
	|		КОГДА УдаленыТ.ФизЛицо ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ДокументСведения.Ссылка),
	|	ДобавленыТ.ФизЛицо,
	|	ЛОЖЬ,
	|	ИСТИНА
	|ИЗ
	|	Документ.СведенияОВнешнемПодписании КАК ДокументСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Добавлены КАК ДобавленыТ
	|		ПО (ДобавленыТ.Участник = ДокументСведения.Участник)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИдентификаторыОбъектовВСервисахВнешнегоПодписания КАК Идентфикаторы
	|		ПО Идентфикаторы.Сервис = ЗНАЧЕНИЕ(Справочник.СервисыВнешнегоПодписания.КабинетСотрудника)
	|		И Идентфикаторы.Объект = ДобавленыТ.ФизЛицо
	|ГДЕ
	|	ДокументСведения.ПометкаУдаления = ЛОЖЬ
	|	И ДокументСведения.Участник В
	|		(ВЫБРАТЬ
	|			втВсеПолныеРоли.Участник
	|		ИЗ
	|			втВсеПолныеРоли)
	|	И НЕ ДобавленыТ.ФизЛицо ЕСТЬ NULL
	|СГРУППИРОВАТЬ ПО
	|	ДокументСведения.Действие,
	|	ДокументСведения.ИдентификаторУчастника,
	|	ДобавленыТ.ФизЛицо";
	Запрос.УстановитьПараметр("Добавлены", ТаблицаДобавлены);
	Запрос.УстановитьПараметр("Удалены", ТаблицаУдалены);
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("Документ.СведенияОВнешнемПодписании");
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
	
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ЗаписьЖурналаРегистрации("ВнешнееПодписание.Изменение состава контейнеров.Блокировка",
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

#КонецОбласти

#Область ОбработкаСобытий

// Внешнее подписание включено.
// 
// Возвращаемое значение:
//  Булево - Используется внешнее подписание
//
Функция ВнешнееПодписаниеВключено()
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользуетсяВнешнееПодписание");
	
КонецФункции

// Действие подходит для обработки через сервисы внешнего подписания.
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия
//  Контекст - Неопределено, Структура -
// 
// Возвращаемое значение:
//  Булево
//
Функция ДействиеПодходитДляОбработкиЧерезСервисыВнешнегоПодписания(Действие, Контекст = Неопределено)
	
	Сервис = Справочники.СервисыВнешнегоПодписания.КабинетСотрудника;
	
	ЭтоДействиеПодписания = ДействияКлиентСервер.ЭтоДействиеПодписания(Действие);
	ЭтоДействиеОзнакомления = ДействияКлиентСервер.ЭтоДействиеОзнакомления(Действие);
	ЭтоДействиеПодписанияУсиленнойЭП = ЭтоДействиеПодписания И ЭтоПодписаниеУсиленнойЭП(Действие);
	
	Если Не ЭтоДействиеПодписанияУсиленнойЭП И Не ЭтоДействиеОзнакомления Тогда
		Возврат Ложь;
	КонецЕсли;

	// Проверяем наличие организации у предмета действия и наличие УИД в сервисе для организации.
	ПредметДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет");
	
	ОрганизацияПредмета = Неопределено;
	Если ТипЗнч(ПредметДействия) = Тип("СправочникСсылка.Мероприятия") Тогда
		Возврат Ложь;
	КонецЕсли;
	Если ТипЗнч(ПредметДействия) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		ОрганизацияПредмета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредметДействия, "Организация");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОрганизацияПредмета) Тогда
		ОрганизацииДокумента = Делопроизводство.ОрганизацииВСторонахДокумента(ПредметДействия);
		Если ОрганизацииДокумента.Количество() = 0 Тогда
			Возврат Ложь;
		ИначеЕсли ОрганизацииДокумента.Количество() > 1 Тогда
			Возврат Ложь;
		КонецЕсли;
		ОрганизацияПредмета = ОрганизацииДокумента[0];
	КонецЕсли;
	
	Если ИдентификаторОбъектаВСервисе(Сервис, ОрганизацияПредмета) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Контекст <> Неопределено Тогда
		Контекст.Вставить("Организация", ОрганизацияПредмета);
		Контекст.Вставить("ПредметДействия", ПредметДействия);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Это обрабатываемый сценарий При начале выполнения действия.
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия
//  Параметры см. ДействияСервер.СтруктураПараметровИзмененияДанныхДействия
//  Контекст - Неопределено, Структура -
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоОбрабатываемыйСценарийПриНачалаВыполнения(Действие, Параметры, Контекст = Неопределено)
	
	Сервис = Справочники.СервисыВнешнегоПодписания.КабинетСотрудника;
	
	ФункцияУчастника = Неопределено; // ОпределяемыйТип.ФункцииУчастниковДействий
	Параметры.Свойство("Функция", ФункцияУчастника);
	Если Не ЭтоОбрабатываемаяФункцияУчастника(ФункцияУчастника) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ДействиеПодходитДляОбработкиЧерезСервисыВнешнегоПодписания(Действие, Контекст) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверяем участника на наличие УИД в сервисе.
	Участник = Неопределено;
	Параметры.Свойство("Участник", Участник);
	Если Участник = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Участник) = Тип("СправочникСсылка.Сотрудники") Тогда
		Возврат СотрудникуДоступноПодписаниеВСервисе(Сервис, Участник, Контекст);
	ИначеЕсли ТипЗнч(Участник) = Тип("СправочникСсылка.ПолныеРоли") Тогда
		Возврат ПолнойРолиДоступноПодписаниеВСервисе(Сервис, Участник, Контекст);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Это обрабатываемый сценарий при прерывании выполнения действия.
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия.
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоОбрабатываемыйСценарийПриПрерывании(Действие)
	
	Возврат ЕстьАктивныеСведенияОВнешнемПодписанииПоДействию(Действие);
	
КонецФункции

// Это обрабатываемый сценарий при помещении действия в историю.
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия.
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоОбрабатываемыйСценарийПриПомещенииДействияВИсторию(Действие)
	
	Возврат ЕстьАктивныеСведенияОВнешнемПодписанииПоДействию(Действие);
	
КонецФункции

// Это обрабатываемый сценарий при отметке выполнения действия.
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия, ОпределяемыйТип.ДействияОбъект - 
//  Параметры см. ДействияСервер.СтруктураПараметровИзмененияДанныхДействия
//  Контекст - Неопределено, Структура - дополнительный заполняемый контекст, если не Неопределено.
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоОбрабатываемыйСценарийПриОтметкеВыполнения(Действие, Параметры, Контекст = Неопределено)
	
	// Если используются БП и Задачи, ловим событие ПриВыполненииДействияЗадачи
	Если РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РезультатВнешнегоПодписания = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры,
		"РезультатВнешнегоПодписания", Ложь);
		
	Если РезультатВнешнегоПодписания Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИдентификаторУчастника = Неопределено;
	Параметры.Свойство("ИдентификаторУчастника", ИдентификаторУчастника);
	СведенияУчастника = СведенияОВнешнемПодписанииУчастника(Новый УникальныйИдентификатор(ИдентификаторУчастника));
	
	Если СведенияУчастника = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Контекст <> Неопределено Тогда
		Контекст.Вставить("СведенияУчастника", СведенияУчастника);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЭтоОбрабатываемыйСценарийПриВыполненииДействияЗадачи(ДействиеЗадачи, РезультатДействия, КтоОтметил,
		ПараметрыВыполнения, Контекст)
	
	// Если Не используются БП и Задачи, ловим событие ПриОтметкеВыполнения
	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РезультатВнешнегоПодписания = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыВыполнения.ДополнительныеПараметры, 
		"РезультатВнешнегоПодписания", Ложь);
	
	Если РезультатВнешнегоПодписания Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Источник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеЗадачи, "Источник"); // ЗадачаСсылка.ЗадачаИсполнителя
	Если Не ЗначениеЗаполнено(Источник) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если ДействияКлиентСервер.ЭтоДействиеОзнакомления(Источник) Тогда
		ИдентификаторУчастника = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеЗадачи, "ИдентификаторВИсточнике");
	Иначе
		ИдентификаторУчастника = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, "ИдентификаторИсполнителя");
	КонецЕсли;
	СведенияУчастника = СведенияОВнешнемПодписанииУчастника(ИдентификаторУчастника);
	
	Если СведенияУчастника = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Контекст <> Неопределено Тогда
		Контекст.Вставить("СведенияУчастника", СведенияУчастника);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЭтоОбрабатываемыйСценарийДействияПриЗаписи(Объект, ДополнительныеСвойства, ФункцияУчастника, Контекст)
	
	ЭтоНовый = Неопределено; // Булево
	ДополнительныеСвойства.Свойство("ЭтоНовый", ЭтоНовый);
	Если ЭтоНовый Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПредметДействия = Объект.Предмет;
	ЕстьАктивныеОбработки = Справочники.ОбработкиОбъектов.ЕстьАктивныеОбработки(ПредметДействия);
	Если Не ЕстьАктивныеОбработки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ДействиеПодходитДляОбработкиЧерезСервисыВнешнегоПодписания(Объект.Ссылка, Контекст) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Нас интересуют 2 коллекции: удаленные и измененные.
	Удаленные = Неопределено; // Массив Из Структура
	Измененные = Неопределено; // Массив Из Структура
	ДополнительныеСвойства.Свойство("Удаленные", Удаленные);
	ДополнительныеСвойства.Свойство("Измененные", Измененные);
	
	Если Удаленные.Количество() = 0 И Измененные.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Контекст.Вставить("Удаленные", Удаленные);
	Контекст.Вставить("Измененные", Измененные);
	
	Возврат Истина;
	
КонецФункции

// Это обрабатываемый сценарий при записи документа.
// 
// Параметры:
//  ДокументОбъект - СправочникОбъект.ДокументыПредприятия - Документ объект
//  Отказ - Булево - Отказ
//  Контекст - Структура - Контекст
// 
// Возвращаемое значение:
//  Булево
//
Функция ЭтоОбрабатываемыйСценарийПриЗаписиДокумента(ДокументОбъект, Отказ, Контекст)
	
	ЕстьАктивныеОбработки = Справочники.ОбработкиОбъектов.ЕстьАктивныеОбработки(ДокументОбъект.Ссылка);
	Если Не ЕстьАктивныеОбработки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекущаяОбработка = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(ДокументОбъект.Ссылка);
	ДатаСозданияОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяОбработка, "ДатаСоздания");
	РезультатЗапросаДействияОбработки = ДействияСервер.ВсеДействияОбработкиИПредмета(
		ДокументОбъект.Ссылка,
		ДокументОбъект.ВидДокумента,
		ТекущаяОбработка,
		ДатаСозданияОбработки);
	
	Если РезультатЗапросаДействияОбработки.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДействияОбработки = РезультатЗапросаДействияОбработки.Выгрузить().ВыгрузитьКолонку("Действие");
	Контекст.Вставить("Действия", ДействияОбработки);
	Сведения = ВсеАктивныеСведенияВнешнегоПодписанияПоДействиям(ДействияОбработки);
	Если Сведения.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Контекст.Вставить("СведенияПриНачалеОбработки", Сведения);
	ПримерСведения = Сведения[0];
	
	РеквизитыСведения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПримерСведения, "ВерсияПредмета, Участник,
		|ФизическоеЛицо");
	ВерсияПредметаСейчас = РеквизитыСведения.ВерсияПредмета;
	ДанныеОзнакомления = Новый Структура;
	ДанныеОзнакомления.Вставить("Документ", ДокументОбъект.Ссылка);
	Если ТипЗнч(РеквизитыСведения.Участник) = Тип("СправочникСсылка.Сотрудники") Тогда
		ДанныеОзнакомления.Вставить("Исполнитель", РеквизитыСведения.Участник);
	ИначеЕсли ПолнойРолиДоступноПодписаниеВСервисе(Справочники.СервисыВнешнегоПодписания.КабинетСотрудника,
		РеквизитыСведения.Участник, Контекст) Тогда
		ДанныеОзнакомления.Вставить("Исполнитель", Контекст.СотрудникиФизЛиц[РеквизитыСведения.ФизическоеЛицо]);
	КонецЕсли;
	ДанныеОзнакомления.Вставить("ВерсииФайлов",
		Справочники.ДанныеОзнакомленияПодПодпись.ТекущиеВерсииФайловДокумента(ДокументОбъект.Ссылка));
	
	// Получим новый предмет подписания. Проверим, что ХЕШ изменился.
	ПараметрыПолученияДвоичныхДанных = Новый Структура;
	ПараметрыПолученияДвоичныхДанных.Вставить("ВнешнееПодписание", Истина);
	ПараметрыПолученияДвоичныхДанных.Вставить("ТипСервисаВнешнегоПодписания",
		Перечисления.ТипыСервисовВнешнегоПодписания.КабинетСотрудника);
	
	ДвоичныеДанные = РаботаСЭП.ПолучитьДвоичныеДанныеОбъекта(ДанныеОзнакомления,, ПараметрыПолученияДвоичныхДанных);
	ВерсияПредмета = ВерсияФайлаПоДвоичнымДанным(ДвоичныеДанные);
	Если ВерсияПредмета = ВерсияПредметаСейчас Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Контекст.Вставить("ДвоичныеДанные", ДвоичныеДанные);
	Контекст.Вставить("ВерсияПредмета", ВерсияПредмета);
	Контекст.Вставить("ПредметДействия", ДокументОбъект.Ссылка);
	
	Возврат Истина;
	
КонецФункции

// Обработать при записи документа.
// 
// Параметры:
//  ДокументОбъект - СправочникОбъект.ДокументыПредприятия - Документ объект
//  Контекст - Структура - Контекст:
//   * Действия - Массив Из ОпределяемыйТип.Действия
//   * СведенияПриНачалеОбработки - Массив Из ДокументСсылка.СведенияОВнешнемПодписании
//   * ДвоичныеДанные - ДвоичныеДанные
//   * ВерсияПредмета - Строка
//  Отказ - Булево - Отказ
//
Процедура ОбработатьПриЗаписиДокумента(ДокументОбъект, Контекст, Отказ)
	
	ВсеСведения = ВсеСведенияВнешнегоПодписанияПоДействиямСБлокировкой(Контекст.Действия);
	Если ВсеСведения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОдноСведение = ВсеСведения.Количество() = 1;	
	
	СозданныеФайлы = СоздатьФайлыДляНовыхСведенийПриЗаписи(
		ДокументОбъект.Ссылка,
		Контекст.ДвоичныеДанные,
		Контекст.ВерсияПредмета);
	
	РеквизитыСведений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВсеСведения,
		"Действие, Сервис, ИдентификаторУчастника, Участник, Организация,
		|ФизическоеЛицо, НазваниеДокумента, ДополнительныеПредставления");
	
	МассивПолныеРоли = Новый Массив; // Массив Из СправочникСсылка.ПолныеРоли
	Для Каждого РеквизитСведений Из РеквизитыСведений Цикл
		Участник = РеквизитСведений.Значение.Участник;
		Если ТипЗнч(Участник) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			МассивПолныеРоли.Добавить(Участник);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПолныеРоли = КонтекстДоступностиСервисаПолнымиРолями(
		Справочники.СервисыВнешнегоПодписания.КабинетСотрудника, МассивПолныеРоли);
		
	КоллекцияСоздать = Новый Массив; // Массив Из Структура
	
	Для Каждого Сведения Из ВсеСведения Цикл
		
		РеквизитыСведения = РеквизитыСведений[Сведения];
		ДанныеЗаполнения = НовыеДанныеЗаполненияСведенияОВнешнемПодписании();
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, РеквизитыСведения,, "ДополнительныеПредставления");
		Если ОдноСведение Тогда
			ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, СозданныеФайлы);
		Иначе
			Если ТипЗнч(РеквизитыСведения.Участник) = Тип("СправочникСсылка.ПолныеРоли") Тогда
				РеквизитыСведения.Участник = СтруктураПолныеРоли[РеквизитыСведения.Участник].
					СотрудникиФизЛиц[РеквизитыСведения.ФизическоеЛицо];
			КонецЕсли;	
			ЗаполнитьПредметПодписанияПоДокументу(ДокументОбъект.Ссылка, РеквизитыСведения, ДанныеЗаполнения);
		КонецЕсли;	
		
		ДополнительныеПредставления = РеквизитыСведения.ДополнительныеПредставления.Выгрузить();
		ДополнительныеПредставления.Сортировать("НомерСтроки");
		
		ПервоеПредставление = Истина;
		Для Каждого СтрокаПредставление Из ДополнительныеПредставления Цикл
			Если ПервоеПредставление Тогда
				ДанныеЗаполнения.ДополнительныеПредставления.Добавить(СозданныеФайлы.ВизуализацияПредмета);
				ПервоеПредставление = Ложь;
				Продолжить;
			КонецЕсли;
			ДанныеЗаполнения.ДополнительныеПредставления.Добавить(СтрокаПредставление.Представление);
		КонецЦикла;
		
		КоллекцияСоздать.Добавить(ДанныеЗаполнения);
		
	КонецЦикла;
	
	ПометитьНаУдалениеСведенияВПривилегированномРежиме(ВсеСведения);
	
	СоздатьСведенияВПривилегированномРежиме(КоллекцияСоздать);
	
КонецПроцедуры

// Создать файлы для новых сведений при записи.
// 
// Параметры:
//  ПредметДействия - СправочникСсылка.ДокументыПредприятия - Предмет действия
//  ДвоичныеДанные - ДвоичныеДанные - Двоичные данные
//  ВерсияПредмета - Строка - Версия предмета
// 
// Возвращаемое значение:
//  Структура - Создать файлы для новых сведений при записи:
// * ПредметПодписания - СправочникСсылка.Файлы, ОпределяемыйТип.ПрисоединенныйФайл, СправочникСсылкаИмяСправочника -
// * ВерсияПредмета - Строка
// * ВизуализацияПредмета - СправочникСсылка.Файлы, ОпределяемыйТип.ПрисоединенныйФайл, СправочникСсылкаИмяСправочника -
//
Функция СоздатьФайлыДляНовыхСведенийПриЗаписи(ПредметДействия, ДвоичныеДанные, ВерсияПредмета)
	
	// Шаг 1, добавляем новый служебный файл к документу.
	АдресДвоичныхДанных = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	ПараметрыДобавленияФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
	ПараметрыДобавленияФайла.Автор = ПараметрыСеанса.ТекущийПользователь;
	// Не понимает строгая типизация, что типы пересекаются.
	//@skip-check statement-type-change
	//@skip-check wrong-type-expression
	ПараметрыДобавленияФайла.ВладелецФайлов = ПредметДействия;
	ПараметрыДобавленияФайла.ИмяБезРасширения = Строка(ПредметДействия);
	ПараметрыДобавленияФайла.РасширениеБезТочки = "xml";
	ПараметрыДобавленияФайла.Служебный = Истина;
	ПараметрыДобавленияФайла.СлужебныйВнешнееПодписание = Истина;
	
	НовыйПредметПодписания = 
		РаботаСФайлами.ДобавитьФайл(ПараметрыДобавленияФайла, АдресДвоичныхДанных); // СправочникСсылка.Файлы
	РегистрыСведений.СлужебныеФайлыДокументов.ЗаписатьФайл(ПредметДействия, Неопределено,
		Перечисления.ОтношенияСлужебныхФайлов.ПредметВнешнегоПодписания, НовыйПредметПодписания);
	
	// Шаг 2, формируем новый файл визуализации.
	ДанныеКарточки = ДанныеКарточкиВизуализацииДокумента(ПредметДействия);
	Если ДанныеКарточки = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось сформировать визуализацию документа при записи'");
	КонецЕсли;
	
	ПараметрыДобавленияФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
	ПараметрыДобавленияФайла.Автор = ПараметрыСеанса.ТекущийПользователь;
	// Не понимает строгая типизация, что типы пересекаются.
	//@skip-check statement-type-change
	//@skip-check wrong-type-expression
	ПараметрыДобавленияФайла.ВладелецФайлов = ПредметДействия;
	ПараметрыДобавленияФайла.ИмяБезРасширения = "Карточка документа";
	ПараметрыДобавленияФайла.РасширениеБезТочки = "pdf";
	ПараметрыДобавленияФайла.Служебный = Истина;
	
	АдресДвоичныхДанных = ПоместитьВоВременноеХранилище(ДанныеКарточки.ДвоичныеДанные);
	НовыйФайлВизуализации =
		РаботаСФайлами.ДобавитьФайл(ПараметрыДобавленияФайла, АдресДвоичныхДанных); // СправочникСсылка.Файлы
	РегистрыСведений.СлужебныеФайлыДокументов.ЗаписатьФайл(ПредметДействия, НовыйПредметПодписания,
		Перечисления.ОтношенияСлужебныхФайлов.ВизуализацияПредметаВнешнегоПодписания, НовыйФайлВизуализации);
	
	Результат = Новый Структура;
	Результат.Вставить("ПредметПодписания", НовыйПредметПодписания);
	Результат.Вставить("ВерсияПредмета", ВерсияПредмета);
	Результат.Вставить("ВизуализацияПредмета", НовыйФайлВизуализации);
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьОтметкуНачалаВыполненияДействия(Действие, Параметры, Контекст)
	
	ДанныеЗаполненияВсехПодписантов = 
		СформироватьДанныеДляЗаполненияСведенияОВнешнемПодписании(Действие, Параметры, Контекст);
	
	СоздатьСведенияВПривилегированномРежиме(ДанныеЗаполненияВсехПодписантов);
	
КонецПроцедуры

Процедура ОбработатьПрерываниеВыполненияДействия(Действие)
	
	ВсеСведения =
		ВсеАктивныеСведенияВнешнегоПодписанияПоДействиям(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Действие));
	
	РеквизитыСведений =  ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектовВПривилегированномРежиме(
		ВсеСведения, "ИдентификаторУчастника");
	
	СведенияКПометкеУдаления = Новый Массив; // Массив Из ДокументСсылка.СведенияОВнешнемПодписании
	Для Каждого Сведения Из ВсеСведения Цикл
		ИдентификаторУчастника = РеквизитыСведений[Сведения]; // УникальныйИдентификатор
		Если Не ДействияВызовСервера.ЗадачаВыполнена(Действие, ИдентификаторУчастника) Тогда
			СведенияКПометкеУдаления.Добавить(Сведения)
		КонецЕсли;
	КонецЦикла;
	
	ПометитьНаУдалениеСведенияВПривилегированномРежиме(СведенияКПометкеУдаления);
	
КонецПроцедуры

Процедура ОбработатьОтметкуВыполненияДействия(Действие, Параметры, Контекст)
	
	СведенияУчастника = Неопределено; // Массив Из ДокументСсылка.СведенияОВнешнемПодписании
	Контекст.Свойство("СведенияУчастника", СведенияУчастника);
	
	Если СведенияУчастника = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Исключительная ситуация при обработке отметки выполнения действия.'");
	КонецЕсли;
	
	ПометитьНаУдалениеСведенияВПривилегированномРежиме(СведенияУчастника);
	
КонецПроцедуры

Процедура ОбработатьВыполнениеДействияЗадачи(ДействиеЗадачи, РезультатДействия, КтоОтметил, ПараметрыВыполнения,
	Контекст)
	
	СведенияУчастника = Неопределено; // Массив Из ДокументСсылка.СведенияОВнешнемПодписании
	Контекст.Свойство("СведенияУчастника", СведенияУчастника);
	
	Если СведенияУчастника = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Исключительная ситуация при обработке отметки выполнения действия.'");
	КонецЕсли;
	
	ПометитьНаУдалениеСведенияВПривилегированномРежиме(СведенияУчастника);
	
КонецПроцедуры

// Действия при записи.
// 
// Параметры:
// 	Объект - ОпределяемыйТип.ДействияОбъект - записываемый объект.
// 	ДополнительныеСвойства - Структура - содержащая дополнительные свойства записи.
// 	ФункцияУчастника - ОпределяемыйТип.ФункцииУчастниковДействий - функция участника.
// 	Контекст - Структура:
// 	 * Удаленные - Массив Из Структура:
// 	  ** Идентификатор - УникальныйИдентификатор
// 	  ** Участник - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли -
// 	  ** Защищенный - Булево
// 	 * Измененные - Массив Из Структура:
// 	  ** Идентификатор - УникальныйИдентификатор
// 	  ** НовыйУчастник - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли -
// 	  ** СтарыйУчастник - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли -
// 	 * Организация - СправочникСсылка.Организации
// 
Процедура ОбработатьДействияПриЗаписи(Объект, ДополнительныеСвойства, ФункцияУчастника, Контекст)
	
	НачатьТранзакцию();
	
	Попытка
		ОбработатьДействияПриЗаписиВнутренний(Объект, ДополнительныеСвойства, ФункцияУчастника, Контекст);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации("ВнешнееПодписание.Действия при записи",
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьДействияПриЗаписиВнутренний(Объект, ДополнительныеСвойства, ФункцияУчастника, Контекст)
	
	Удаленные = Контекст.Удаленные;
	Измененные = Контекст.Измененные;
	
	ЭтоДействиеОзнакомления = ДействияКлиентСервер.ЭтоДействиеОзнакомления(Объект.Ссылка);
			
	Данные = ДанныеКОбработкеПриЗаписиДействия(Объект.Ссылка, Удаленные, Измененные);
	
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПредметДействия = Объект.Предмет; // СправочникСсылка.ДокументыПредприятия
	
	// Помечаем на удаление те, где нужно.
	ПометитьНаУдалениеСведенияВПривилегированномРежиме(Данные.ВыгрузитьКолонку("Ссылка"));
	
	// Для действия "Ознакомление" вызывается метод РаботаСВнешнимПодписанием.ПриОтметкеНачалаВыполненияДействия	 
	// методом Справочник.ДействияОзнакомления.МодульМенеджера.ЗаполнитьРегистрУчастниковОзнакомленияИВернутьКоличество,
	// в котором добавляются новые участники действия
	Если ЭтоДействиеОзнакомления Тогда
		Возврат;
	КонецЕсли;	
	
	// Если ранее не было сведения о внешнем подписании для действия и идентификатора участника, тогда
	// В Данные этой записи не будет. Добавим её, чтобы анализировать все вместе.
	Для Каждого Измененный Из Измененные Цикл
		Если Данные.Найти(Измененный.Идентификатор, "ИдентификаторУчастника") = Неопределено Тогда
			ДобавленнаяСтрока = Данные.Добавить();
			ДобавленнаяСтрока.Действие = Объект.Ссылка;
			ДобавленнаяСтрока.ИдентификаторУчастника = Измененный.Идентификатор;
			ДобавленнаяСтрока.Участник = Измененный.СтарыйУчастник;
			ДобавленнаяСтрока.НовыйУчастник = Измененный.НовыйУчастник;
		КонецЕсли;
	КонецЦикла;
	
	// Если была роль и несколько ссылок на сведения, то могут появиться дубли.
	ДанныеСвернутые = Данные.Скопировать(, "Действие,ИдентификаторУчастника,Участник,НовыйУчастник");
	ДанныеСвернутые.Свернуть("Действие,ИдентификаторУчастника,Участник,НовыйУчастник");
	
	// Определяем каким новым участникам доступно подписание в сервисе.
	ПроверитьДоступностьСервиса = Новый Структура;
	СотрудникиКПроверке = Новый Массив; // Массив Из СправочникСсылка.Сотрудники
	ПроверитьДоступностьСервиса.Вставить("Сотрудники", СотрудникиКПроверке);
	ПолныеРолиКПроверке = Новый Массив; // Массив Из СправочникСсылка.ПолныеРоли
	ПроверитьДоступностьСервиса.Вставить("ПолныеРоли", ПолныеРолиКПроверке);
	Для Каждого СтрокаДанных Из ДанныеСвернутые Цикл
		Участник = СтрокаДанных.НовыйУчастник;
		Если Не ЗначениеЗаполнено(Участник) Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(Участник) = Тип("СправочникСсылка.Сотрудники") Тогда
			ПроверитьДоступностьСервиса.Сотрудники.Добавить(Участник);
		ИначеЕсли ТипЗнч(СтрокаДанных.НовыйУчастник) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			ПроверитьДоступностьСервиса.ПолныеРоли.Добавить(Участник);
		КонецЕсли;
	КонецЦикла;
	
	Сервис = Справочники.СервисыВнешнегоПодписания.КабинетСотрудника;
	КонтекстДоступностиСервисаСотрудниками = 
		КонтекстДоступностиСервисаСотрудниками(Сервис, ПроверитьДоступностьСервиса.Сотрудники);
	КонтекстДоступностиСервисаПолнымиРолями = 
		КонтекстДоступностиСервисаПолнымиРолями(Сервис, ПроверитьДоступностьСервиса.ПолныеРоли);
	СоздатьСведенияКопированием = Новый Соответствие;
	СоздатьНовыеСведения = Новый Массив; // Массив Из Структура
	Для Каждого СтрокаДанных Из ДанныеСвернутые Цикл
		Участник = СтрокаДанных.НовыйУчастник;
		Если Не ЗначениеЗаполнено(Участник) Тогда
			Продолжить;
		КонецЕсли;
		КонтекстУчастника = Неопределено; // Структура
		Если ТипЗнч(Участник) = Тип("СправочникСсылка.Сотрудники") Тогда
			КонтекстУчастника = КонтекстДоступностиСервисаСотрудниками[Участник]; // Структура
		ИначеЕсли ТипЗнч(СтрокаДанных.НовыйУчастник) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			КонтекстУчастника = КонтекстДоступностиСервисаПолнымиРолями[Участник]; // Структура
		КонецЕсли;
		Если Не КонтекстУчастника.СервисДоступен Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеОбработки = Новый Структура;
		ДанныеОбработки.Вставить("Участник", Участник);
		ДанныеОбработки.Вставить("КонтекстУчастника", КонтекстУчастника);
		ДанныеОбработки.Вставить("ИдентификаторУчастника", СтрокаДанных.ИдентификаторУчастника);
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Действие", СтрокаДанных.Действие);
		СтруктураОтбора.Вставить("ИдентификаторУчастника", СтрокаДанных.ИдентификаторУчастника);
		СтруктураОтбора.Вставить("Участник", СтрокаДанных.Участник);
		СтруктураОтбора.Вставить("НовыйУчастник", СтрокаДанных.НовыйУчастник);
		
		Найденные = Данные.НайтиСтроки(СтруктураОтбора);
		Если Найденные.Количество() <> 0 Тогда
			СведениеСтарое = Найденные[0].Ссылка; // ДокументСсылка.СведенияОВнешнемПодписании
		Иначе
			СведениеСтарое = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведениеСтарое) Тогда
			СоздатьСведенияКопированием.Вставить(СведениеСтарое, ДанныеОбработки);
		Иначе
			СоздатьНовыеСведения.Добавить(ДанныеОбработки);
		КонецЕсли;
	КонецЦикла;
	
	// Создаем новые сведения, копируя часть данных из старых.
	СсылкиСоздать = КлючиСоответствияВМассив(СоздатьСведенияКопированием);
	ДанныеСведений = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектовВПривилегированномРежиме(СсылкиСоздать, 
		"Сервис,Действие,ИдентификаторУчастника,ПредметПодписания,
		|ВерсияПредмета,Организация,НазваниеДокумента,ДополнительныеПредставления");
	Для Каждого ДанныеОбработкиКопирования Из СоздатьСведенияКопированием Цикл
		
		КопируемоеСведение = ДанныеОбработкиКопирования.Ключ;
		ДанныеОбработки = ДанныеОбработкиКопирования.Значение; // Структура
		КонтекстУчастника = Неопределено; // Структура
		ДанныеОбработки.Свойство("КонтекстУчастника", КонтекстУчастника);
		Участник = Неопределено;
		ДанныеОбработки.Свойство("Участник", Участник);
		ФизЛица = Неопределено;
		КонтекстУчастника.Свойство("ФизЛицо", ФизЛица);
		Если ФизЛица = Неопределено Тогда
			КонтекстУчастника.Свойство("ФизЛица", ФизЛица);
		КонецЕсли;
		Если ТипЗнч(ФизЛица) <> Тип("Массив") Тогда
			ФизЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизЛица);
		КонецЕсли;
		СотрудникиФизЛиц = Новый Соответствие;
		Если КонтекстУчастника.Свойство("СотрудникиФизЛиц") Тогда
			СотрудникиФизЛиц = КонтекстУчастника.СотрудникиФизЛиц;
		КонецЕсли;	
		
		ДанныеСведения = ДанныеСведений[КопируемоеСведение];
		ДанныеЗаполнения = НовыеДанныеЗаполненияСведенияОВнешнемПодписании();
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ДанныеСведения, , "ДополнительныеПредставления, ПредметПодписания,
			|ВерсияПредмета");
		ЗаполнитьПредметПодписанияПоДокументу(ПредметДействия, ДанныеОбработки, ДанныеЗаполнения);	
		ДополнительныеПредставления = Неопределено; // РезультатЗапроса
		ДанныеСведения.Свойство("ДополнительныеПредставления", ДополнительныеПредставления);
		ТаблицаДополнительныхПредставлений = ДополнительныеПредставления.Выгрузить();
		МассивПредставлений = ТаблицаДополнительныхПредставлений.ВыгрузитьКолонку("Представление");
		ДанныеЗаполнения.ДополнительныеПредставления = МассивПредставлений;
		ДанныеЗаполнения.Участник = Участник;
		ПредметПодписанияЗаполнен = ЗначениеЗаполнено(ДанныеЗаполнения.ПредметПодписания);
		Для Каждого ФизЛицо Из ФизЛица Цикл
			ДанныеЗаполненияФизЛицо = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеЗаполнения);
			ДанныеЗаполненияФизЛицо.ФизическоеЛицо = ФизЛицо;
			Если Не ПредметПодписанияЗаполнен Тогда
				ПараметрыФизЛица = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеОбработки);
				ПараметрыФизЛица.Участник = СотрудникиФизЛиц[ФизЛицо]; 
				ЗаполнитьПредметПодписанияПоДокументу(ПредметДействия, ПараметрыФизЛица,
					ДанныеЗаполненияФизЛицо);
				ЗаполнитьНазваниеДокумента(ДанныеЗаполненияФизЛицо, Объект.Ссылка);
			КонецЕсли;
			СоздатьСведенияВПривилегированномРежиме(ДанныеЗаполненияФизЛицо);
		КонецЦикла;
	КонецЦикла;
	
	// Создадим сведения, для которых нет готового сведения.
	Для Каждого ДанныеОбработкиНовых Из СоздатьНовыеСведения Цикл // Структура
		
		ИдентификаторУчастника = Неопределено;
		Участник = Неопределено;
		КонтекстУчастника = Неопределено; // Структура
		ДанныеОбработкиНовых.Свойство("ИдентификаторУчастника", ИдентификаторУчастника);
		ДанныеОбработкиНовых.Свойство("Участник", Участник);
		ДанныеОбработкиНовых.Свойство("КонтекстУчастника", КонтекстУчастника);
		
		Параметры = Новый Структура;
		Параметры.Вставить("ИдентификаторУчастника", ИдентификаторУчастника);
		Параметры.Вставить("Участник", Участник);
		
		КонтекстСозданияНовых = Новый Структура;
		КонтекстСозданияНовых.Вставить("Организация", Контекст.Организация);
		КонтекстСозданияНовых.Вставить("ПредметДействия", ПредметДействия);
		ФизЛицо = Неопределено;
		ФизЛица = Неопределено;
		Если КонтекстУчастника.Свойство("ФизЛицо", ФизЛицо) Тогда
			КонтекстСозданияНовых.Вставить("ФизическоеЛицо", ФизЛицо);
		ИначеЕсли КонтекстУчастника.Свойство("ФизЛица", ФизЛица) Тогда
			КонтекстСозданияНовых.Вставить("ФизическиеЛица", ФизЛица);
		КонецЕсли;
		СотрудникиФизЛиц = Неопределено;
		Если КонтекстУчастника.Свойство("СотрудникиФизЛиц", СотрудникиФизЛиц) Тогда
			КонтекстСозданияНовых.Вставить("СотрудникиФизлиц", СотрудникиФизЛиц);
		КонецЕсли;	
		
		ДанныеЗаполненияВсехПодписантов = 
			СформироватьДанныеДляЗаполненияСведенияОВнешнемПодписании(
				Объект.Ссылка, Параметры, КонтекстСозданияНовых);
		
		Для Каждого ДанныеЗаполнения Из ДанныеЗаполненияВсехПодписантов Цикл
			СоздатьСведенияВПривилегированномРежиме(ДанныеЗаполнения);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Данные к обработке при записи действия.
// 
// Параметры:
//  Действие - СправочникСсылка.ДействияПодписания, СправочникСсылка.ДействияОзнакомления - 
//  Удаленные - Массив из Структура - Удаленные:
//   * Идентификатор - УникальныйИдентификатор -
//   * Участник - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли -
//   * Защищенный - Булево -
//  Измененные - Массив из Структура - Измененные:
//   * Идентификатор - УникальныйИдентификатор -
//   * НовыйУчастник - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли -
//   * СтарыйУчастник - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли -
// 
// Возвращаемое значение:
//  Неопределено, ТаблицаЗначений - Неопределено или таблица значений с данными для обработки:
//   * Действие - СправочникСсылка.ДействияПодписания, СправочникСсылка.ДействияОзнакомления -
//   * ИдентификаторУчастника - УникальныйИдентификатор
//   * Участник - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли -
//   * НовыйУчастник - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли -
//   * Ссылка - ДокументСсылка.СведенияОВнешнемПодписании
//
Функция ДанныеКОбработкеПриЗаписиДействия(Действие, Удаленные, Измененные)
	
	ТаблицаПоиска = Новый ТаблицаЗначений;
	ТаблицаПоиска.Колонки.Добавить("Действие", Новый ОписаниеТипов("СправочникСсылка.ДействияПодписания,СправочникСсылка.ДействияОзнакомления"));
	ТаблицаПоиска.Колонки.Добавить("ИдентификаторУчастника", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаПоиска.Колонки.Добавить("Участник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники,СправочникСсылка.ПолныеРоли"));
	ТаблицаПоиска.Колонки.Добавить("НовыйУчастник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники,СправочникСсылка.ПолныеРоли"));
	
	СтрокиТаблицыПоИдентификаторам = Новый Соответствие();
	Для Каждого Удаленный Из Удаленные Цикл
		СтрокаПоиска = ТаблицаПоиска.Добавить();
		СтрокаПоиска.Действие = Действие;
		СтрокаПоиска.ИдентификаторУчастника = Удаленный.Идентификатор;
		СтрокаПоиска.Участник = Удаленный.Участник;
		СтрокаПоиска.НовыйУчастник = Неопределено;
		СтрокиТаблицыПоИдентификаторам[СтрокаПоиска.ИдентификаторУчастника] = СтрокаПоиска;
	КонецЦикла;
	Для Каждого Измененный Из Измененные Цикл
		// При змене участник в строке участников действия, участник будет и в удаленных и в изменённых.
		СтрокаПоиска = СтрокиТаблицыПоИдентификаторам[Измененный.Идентификатор]; // СтрокаТаблицыЗначений
		Если СтрокаПоиска = Неопределено Тогда
			СтрокаПоиска = ТаблицаПоиска.Добавить();
			СтрокаПоиска.Действие = Действие;
			СтрокаПоиска.ИдентификаторУчастника = Измененный.Идентификатор;
			СтрокаПоиска.Участник = Измененный.СтарыйУчастник;
			СтрокаПоиска.НовыйУчастник = Измененный.НовыйУчастник;
			СтрокиТаблицыПоИдентификаторам[Измененный.Идентификатор] = СтрокаПоиска;
		КонецЕсли;
		СтрокаПоиска.НовыйУчастник = Измененный.НовыйУчастник;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаПоиска.Действие КАК Действие,
	|	ТаблицаПоиска.ИдентификаторУчастника КАК ИдентификаторУчастника,
	|	ТаблицаПоиска.НовыйУчастник КАК НовыйУчастник,
	|	ТаблицаПоиска.Участник КАК Участник
	|ПОМЕСТИТЬ ТаблицаПоиска
	|ИЗ
	|	&ТаблицаПоиска КАК ТаблицаПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоискаТ.Действие КАК Действие,
	|	ТаблицаПоискаТ.ИдентификаторУчастника КАК ИдентификаторУчастника,
	|	ТаблицаПоискаТ.Участник КАК Участник,
	|	ТаблицаПоискаТ.НовыйУчастник КАК НовыйУчастник,
	|	ДокументыСведения.Ссылка КАК Ссылка
	|ИЗ
	|	ТаблицаПоиска КАК ТаблицаПоискаТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОВнешнемПодписании КАК ДокументыСведения
	|		ПО ТаблицаПоискаТ.Действие = ДокументыСведения.Действие
	|		И ТаблицаПоискаТ.ИдентификаторУчастника = ДокументыСведения.ИдентификаторУчастника
	|ГДЕ
	|	НЕ ДокументыСведения.Ссылка ЕСТЬ NULL";
	Запрос.УстановитьПараметр("ТаблицаПоиска", ТаблицаПоиска);
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		// Выгружаем всё равно, нужна таблица. Среди измененных могут быть такие, для которых не с чего копировать.
		// Нужно будет дополнить таблицу и обработать как новые.
		Возврат РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("Документ.СведенияОВнешнемПодписании");
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
	
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ЗаписьЖурналаРегистрации("ВнешнееПодписание.Действия при записи.Блокировка",
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

#КонецОбласти

#Область ОбработкаРезультатовВнешнегоПодписания

// Обработать результаты внешнего подписания.
// 
// Общий комментарий по процедуре.
// При проектировании блокировок нужно учитывать, что изменения, существенные с точки зрения очереди, это:
// 1. Установка пометки удаления на сведение в очереди конкурирующим процессом;
// 2. Выполнение задачи исполнителя конкурирующим процессом;
// Мы можем себе позволить заблокировать не все данные сразу, а перед непосредственной обработкой конкретной записи.
// 1. Собираем параметры
// 2. Если вообще можно обработать, то:
//    2.1. Блокируем все связанные данные;
//    2.2. Перепроверяем пометку удаления и состояние задачи;
//    2.3. Выполняем оработку; 
//
Процедура ОбработатьРезультатыВнешнегоПодписания()
	
	ДанныеОчереди = РезультатыВнешнегоПодписанияКОбработке();
	Если ДанныеОчереди = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Дубликаты = ДубликатыСведенийОВнешнемПодписании(ДанныеОчереди.ВыгрузитьКолонку("Сведения"));
	
	Для Каждого ДанныеКОбработке Из ДанныеОчереди Цикл
		
		// см. КабинетСотрудникаМенеджерОбмена.ОписаниеОбъектРезультатСогласования
		ДанныеВнешнегоПодписания = ДанныеКОбработке.Данные.Получить();
		Если ДанныеВнешнегоПодписания = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Сведения = ДанныеКОбработке.Сведения;
		ДубликатыСведения = Дубликаты[Сведения];
		
		Обработано = ОбработатьРезультатВнешнегоПодписания(Сведения, ДубликатыСведения, ДанныеВнешнегоПодписания);
		ЗафиксироватьРезультатОбработки(Обработано, ДанныеКОбработке.Сведения, ДанныеКОбработке.ИдентификаторОбъекта);
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет запись очереди или увеличивает количество попыток обработки.
// 
// Параметры:
//  Обработано - Булево - Обработано
//  Сведения - ДокументСсылка.СведенияОВнешнемПодписании - Сведения
//  ИдентификаторОбъекта - Строка - Идентификатор объекта
//
Процедура ЗафиксироватьРезультатОбработки(Обработано, Сведения, ИдентификаторОбъекта)
	
	МенеджерЗаписи = РегистрыСведений.ОчередьОбработкиРезультатовВнешнегоПодписания.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Сведения = Сведения;
	МенеджерЗаписи.ИдентификаторОбъекта = ИдентификаторОбъекта;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		Если Обработано Тогда
			МенеджерЗаписи.Удалить();
		Иначе
			МенеджерЗаписи.КоличествоПопытокОбработки = МенеджерЗаписи.КоличествоПопытокОбработки + 1;
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Результаты внешнего подписания к обработке.
// 
// Возвращаемое значение:
//  Неопределено, ТаблицаЗначений - Результаты внешнего подписания к обработке:
//   * Сведения - ДокументСсылка.СведенияОВнешнемПодписании
//   * ИдентификаторОбъекта - Строка
//   * Данные - ХранилищеЗначения
//
Функция РезультатыВнешнегоПодписанияКОбработке()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РезультатыВнешнегоПодписанияКОбработке.Сведения КАК Сведения,
	|	РезультатыВнешнегоПодписанияКОбработке.ИдентификаторОбъекта КАК ИдентификаторОбъекта,
	|	РезультатыВнешнегоПодписанияКОбработке.Данные КАК Данные
	|ИЗ
	|	РегистрСведений.ОчередьОбработкиРезультатовВнешнегоПодписания КАК РезультатыВнешнегоПодписанияКОбработке
	|ГДЕ
	|	РезультатыВнешнегоПодписанияКОбработке.КоличествоПопытокОбработки < 3";
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

// Дубликаты сведений о внешнем подписании.
// 
// Параметры:
//  Ссылки - Массив Из ДокументСсылка.СведенияОВнешнемПодписании
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - Дубликаты сведений о внешнем подписании
//
Функция ДубликатыСведенийОВнешнемПодписании(Ссылки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Оригиналы.Ссылка КАК Оригинал,
	|	Дубликаты.Ссылка КАК Дубликат
	|ИЗ
	|	Документ.СведенияОВнешнемПодписании КАК Оригиналы
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОВнешнемПодписании КАК Дубликаты
	|		ПО Дубликаты.ПометкаУдаления = ЛОЖЬ
	|			И Оригиналы.Действие = Дубликаты.Действие
	|			И Оригиналы.ИдентификаторУчастника = Дубликаты.ИдентификаторУчастника
	|			И Оригиналы.Ссылка <> Дубликаты.Ссылка
	|ГДЕ
	|	Оригиналы.Ссылка В (&Ссылки)
	|	И НЕ Дубликаты.Ссылка ЕСТЬ NULL";
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	ТаблицаДубликатов = РезультатЗапроса.Выгрузить();
	ТаблицаДубликатов.Индексы.Добавить("Оригинал");
	
	Результат = Новый Соответствие;
	Для Каждого Ссылка Из Ссылки Цикл
		ПараметрыОтбора = Новый Структура("Оригинал", Ссылка);
		СтрокиДубликатов = ТаблицаДубликатов.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиДубликатов.Количество() = 0 Тогда
			Результат.Вставить(Ссылка, Новый Массив);
			Продолжить;
		КонецЕсли;
		ТаблицаДубликатовПоОригиналу = ТаблицаДубликатов.Скопировать(СтрокиДубликатов, "Дубликат");
		ТаблицаДубликатовПоОригиналу.Свернуть("Дубликат");
		Результат.Вставить(Ссылка, ТаблицаДубликатовПоОригиналу.ВыгрузитьКолонку("Дубликат"));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#Область ЗаполнениеПараметровОбработкиРезультатаВнешнегоПодписания

// Конструктор параметров обработки результата внешнего подписания.
// 
// Возвращаемое значение:
//  Структура:
//   * Сведения   - ДокументСсылка.СведенияОВнешнемПодписании
//   * РеквизитыСведения - Неопределено, Структура - :
//     ** Действие - ОпределяемыйТип.Действия
//   * Данные     см. НовыеДанныеЗаполненияСведенияОВнешнемПодписании
//   * ОбработкаВозможна - Булево
//   * Ошибка - Строка
//   * СохранитьРезультат - Булево
//   * ОтменитьДубликаты - Булево
//   * Дубликаты - Массив Из ДокументСсылка.СведенияОВнешнемПодписании
//   * ВыполнятьОбработкуОбъектовПроцессами - Булево
//   * ОтметитьВыполнение - Булево
//   * ПараметрыВыполнения см. НовыеПараметрыВыполненияПриОбработкеРезультатаВнешнегоПодписания
//   * СохранитьПодписи - Булево
//   * ДанныеПодписей - Массив Из Структура
//
Функция НовыеПараметрыОбработкиРезультатаВнешнегоПодписания()
	
	Параметры = Новый Структура;
	Параметры.Вставить("Сведения", Документы.СведенияОВнешнемПодписании.ПустаяСсылка());
	Параметры.Вставить("РеквизитыСведения", Неопределено);
	Параметры.Вставить("Данные",   НовыеДанныеЗаполненияСведенияОВнешнемПодписании());
	Параметры.Вставить("ОбработкаВозможна", Истина);
	Параметры.Вставить("Ошибка", "");
	Параметры.Вставить("СохранитьРезультат", Ложь);
	Параметры.Вставить("ОтменитьДубликаты", Ложь);
	Параметры.Вставить("Дубликаты", Новый Массив);
	Параметры.Вставить("ВыполнятьОбработкуОбъектовПроцессами", Ложь);
	Параметры.Вставить("ОтметитьВыполнение", Ложь);
	Параметры.Вставить("ПараметрыВыполнения", НовыеПараметрыВыполненияПриОбработкеРезультатаВнешнегоПодписания());
	Параметры.Вставить("СохранитьПодписи", Ложь);
	Параметры.Вставить("ДанныеПодписей", Новый Массив);
	Возврат Параметры;
	
КонецФункции

// Сформировать параметры обработки внешнего подписания.
// 
// Параметры:
//  Сведения - ДокументСсылка.СведенияОВнешнемПодписании - Сведения
//  ДубликатыСведения - Массив Из ДокументСсылка.СведенияОВнешнемПодписании
//  ДанныеВнешнегоПодписания   см. НовыйРезультатВнешнегоПодписания
// 
// Возвращаемое значение:
//  см. НовыеПараметрыОбработкиРезультатаВнешнегоПодписания
//
Функция СформироватьПараметрыОбработкиВнешнегоПодписания(Сведения, ДубликатыСведения, ДанныеВнешнегоПодписания)
	
	Параметры = НовыеПараметрыОбработкиРезультатаВнешнегоПодписания();
	Параметры.Сведения = Сведения;
	РеквизитыСведения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сведения, 
		"Ссылка,ПометкаУдаления,ЕстьРезультат,Результат,РезультатОбработан,
		|Действие,ИдентификаторУчастника,Участник,ФизическоеЛицо,Сервис,ДополнительныеПредставления,Сервис");
	Параметры.РеквизитыСведения = РеквизитыСведения;
	Параметры.Данные = ДанныеВнешнегоПодписания;
	Параметры.СохранитьРезультат = СохранятьРезультатВнешнегоПодписания(РеквизитыСведения);
	Параметры.ОтменитьДубликаты = ОтменитьДубликатыСведенияВнешнегоПодписания(РеквизитыСведения);
	Параметры.Дубликаты = ДубликатыСведения;
	
	ЗаполнитьПараметрыОбработкиВнешнегоПодписанияПоВыполнению(Параметры, РеквизитыСведения, ДанныеВнешнегоПодписания);
	ЗаполнитьПараметрыОбработкиВнешнегоПодписанияПоПодписям(Параметры, РеквизитыСведения, ДанныеВнешнегоПодписания);
	
	Возврат Параметры;
	
КонецФункции

// Новые параметры выполнения при обработке результата внешнего подписания.
// 
// Возвращаемое значение:
//  Структура:
//   * РезультатВнешнегоПодписания - Булево - Всегда Истина.
//   * Комментарий - Строка
//   * ДатаВыполнения - Дата
//   * ИдентификаторПункта - Неопределено, УникальныйИдентификатор -
//   * ИдентификаторУчастника - Неопределено, УникальныйИдентификатор -
//   * Участник - Неопределено, СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли -
//   * ФункцияУчастника - Неопределено, ОпределяемыйТип.ФункцииУчастниковДействий -
//   * Функция - Неопределено, ОпределяемыйТип.ФункцииУчастниковДействий -
//   * РезультатДействия - Неопределено, ОпределяемыйТип.РезультатыВыполненияДействий, СправочникСсылка.РезультатыДействийЗадач -
//   * Результат - Неопределено, ОпределяемыйТип.РезультатыВыполненияДействий -
//   * ФактическийИсполнитель - Неопределено, СправочникСсылка.Сотрудники -
//   * Действие - Неопределено, ОпределяемыйТип.Действия -
//   * ЗадачаПроцесса - Неопределено, ЗадачаСсылка.ЗадачаИсполнителя -
//   * ДействиеЗадачи - Неопределено, ДокументСсылка.ДействиеЗадачи -
//   * ВыполнитьОтИмени - Неопределено, СправочникСсылка.Пользователи -
//   * ДополнительныеПараметры - Структура
//   * ФактическиеИсполнителиПолные - Соответствие Из КлючИЗначение
//   * ФактическиеИсполнителиПоДействиям - Соответствие Из КлючИЗначение
//   * ОснованияФактИсполнителейПоДействиям - Соответствие Из КлючИЗначение
//   * ВыбранныйФактическийИсполнитель - Структура
//
Функция НовыеПараметрыВыполненияПриОбработкеРезультатаВнешнегоПодписания()
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("РезультатВнешнегоПодписания", Истина);
	ПараметрыВыполнения.Вставить("Комментарий", "");
	ПараметрыВыполнения.Вставить("ДатаВыполнения", Дата(1,1,1));
	ПараметрыВыполнения.Вставить("ИдентификаторПункта", Неопределено);
	ПараметрыВыполнения.Вставить("ИдентификаторУчастника", Неопределено);
	ПараметрыВыполнения.Вставить("Участник", Неопределено);
	ПараметрыВыполнения.Вставить("ФункцияУчастника", Неопределено);
	ПараметрыВыполнения.Вставить("Функция", Неопределено);
	ПараметрыВыполнения.Вставить("РезультатДействия", Неопределено);
	ПараметрыВыполнения.Вставить("Результат", Неопределено);
	ПараметрыВыполнения.Вставить("ФактическийИсполнитель", Неопределено);
	ПараметрыВыполнения.Вставить("Действие", Неопределено);
	ПараметрыВыполнения.Вставить("ЗадачаПроцесса", Неопределено);
	ПараметрыВыполнения.Вставить("ДействиеЗадачи", Неопределено);
	ПараметрыВыполнения.Вставить("ВыполнитьОтИмени", Неопределено);
	ПараметрыВыполнения.Вставить("ДополнительныеПараметры", Новый Структура);
	ПараметрыВыполнения.Вставить("ФактическиеИсполнителиПолные", Новый Соответствие);
	ПараметрыВыполнения.Вставить("ФактическиеИсполнителиПоДействиям", Новый Соответствие);
	ПараметрыВыполнения.Вставить("ОснованияФактИсполнителейПоДействиям", Новый Соответствие);
	ПараметрыВыполнения.Вставить("ВыбранныйФактическийИсполнитель", Неопределено);
	Возврат ПараметрыВыполнения;
	
КонецФункции

// Заполнить параметры обработки внешнего подписания по выполнению.
// 
// Параметры:
//  Параметры см. НовыеПараметрыОбработкиРезультатаВнешнегоПодписания
//  РеквизитыСведения - Структура - Реквизиты сведения
//  ДанныеВнешнегоПодписания см. НовыйРезультатВнешнегоПодписания
//
Процедура ЗаполнитьПараметрыОбработкиВнешнегоПодписанияПоВыполнению(Параметры, РеквизитыСведения,
	ДанныеВнешнегоПодписания)
	
	ЗадачаПроцесса = РаботаСПроцессамиПоДействиям.ЗадачаПроцессаПоУчастникуДействия(РеквизитыСведения.Действие,
		РеквизитыСведения.ИдентификаторУчастника);
	Параметры.ВыполнятьОбработкуОбъектовПроцессами = ЗначениеЗаполнено(ЗадачаПроцесса);
	
	// Здесь заполняем общие параметры выполнения для 2-х сценариев.
	ШаблонКомментарияВыполнения = 
		"Отметка о выполнении проставлена автоматически при обработке результата внешнего подписания.
		|Фактический исполнитель: %1
		|Сервис: %2";
	КомментарийВыполнения = СтрШаблон(ШаблонКомментарияВыполнения,
		ДанныеВнешнегоПодписания.ИмяПодписанта, РеквизитыСведения.Сервис);
	Параметры.ПараметрыВыполнения.Комментарий = КомментарийВыполнения;
	
	Если Параметры.ВыполнятьОбработкуОбъектовПроцессами Тогда
		Параметры.ПараметрыВыполнения.ЗадачаПроцесса = ЗадачаПроцесса;
		ЗаполнитьПараметрыОбработкиВнешнегоПодписанияПоВыполнениюОтЗадачи(Параметры, 
			РеквизитыСведения, ДанныеВнешнегоПодписания);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПараметрыОбработкиВнешнегоПодписанияПоВыполнениюОтДействия(Параметры, 
			РеквизитыСведения, ДанныеВнешнегоПодписания);
	
КонецПроцедуры

// Заполнить параметры обработки внешнего подписания по выполнению от действия.
// 
// Параметры:
//  Параметры см. НовыеПараметрыОбработкиРезультатаВнешнегоПодписания
//  РеквизитыСведения - Структура - Реквизиты сведения
//  ДанныеВнешнегоПодписания см. НовыйРезультатВнешнегоПодписания
//
Процедура ЗаполнитьПараметрыОбработкиВнешнегоПодписанияПоВыполнениюОтДействия(Параметры, РеквизитыСведения,
	ДанныеВнешнегоПодписания)
	
	Действие = РеквизитыСведения.Действие;
	ИдентификаторУчастника = РеквизитыСведения.ИдентификаторУчастника;
	
	УчастникиДействия = ДействияСервер.УчастникиДействия(Действие);
	СтрокаУчастникаДействия = УчастникиДействия.Найти(ИдентификаторУчастника, "Идентификатор");
	Если СтрокаУчастникаДействия = Неопределено И ДействияКлиентСервер.ЭтоДействиеОзнакомления(Действие) Тогда
		СтрокаУчастникаДействия = РегистрыСведений.УчастникиОзнакомлений.ДанныеОзнакомления(Действие,
			ИдентификаторУчастника);
		Если СтрокаУчастникаДействия <> Неопределено Тогда
			СтрокаУчастникаДействия.Вставить("Функция", Перечисления.ФункцииУчастниковОзнакомления.Ознакомляемый);
			СтрокаУчастникаДействия.Вставить("ИдентификаторЭтапа", Неопределено);
		КонецЕсли;
	КонецЕсли;
	Если СтрокаУчастникаДействия = Неопределено Тогда
		Параметры.ОбработкаВозможна = Ложь;
		Параметры.Ошибка = ?(ПустаяСтрока(Параметры.Ошибка), "", Символы.ПС) + СтрШаблон(
			НСтр("ru = 'Не найден участник действия по идентификатору участника.
			|Идентификатор участника: %1
			|Участник: %2'"), Строка(ИдентификаторУчастника), РеквизитыСведения.Участник);
		Возврат;
	КонецЕсли;
	
	РезультатДействия = Неопределено;
	РезультатДействияЗадачи = Неопределено;
	ДействиеЗадачи = Документы.ДействиеЗадачи.ПустаяСсылка();
	ФункцияУчастника = СтрокаУчастникаДействия.Функция;
	Задача = Документы.Задача.НайтиПоИсточнику(Действие);
	Если ЗначениеЗаполнено(Задача) Тогда
		ДействияЗадачи = Документы.ДействиеЗадачи.НайтиДействияИсполнителя(Задача, РеквизитыСведения.Участник);
		Если ДействияЗадачи.Количество() > 0 Тогда
			ДействиеЗадачи = ДействияЗадачи[0];
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		Возврат;
	КонецЕсли;	
	
	Параметры.ОтметитьВыполнение = Не РаботаСЗадачами.ЭтоВыполненноеДействие(ДействиеЗадачи);
	Если Не Параметры.ОтметитьВыполнение Тогда
		Возврат;
	КонецЕсли;
	
	СотрудникиПодписанта = Сотрудники.ВсеСотрудникиФизЛица(ДанныеВнешнегоПодписания.Подписант);
	ФактическийИсполнитель = СотрудникиПодписанта[0]; // СправочникСсылка.Сотрудники
	ПользователиФактическогоИсполнителя = Сотрудники.ПользователиСотрудника(ФактическийИсполнитель);
	Если ПользователиФактическогоИсполнителя.Количество() = 0 Тогда
		Параметры.ОбработкаВозможна = Ложь;
		Параметры.Ошибка = ?(ПустаяСтрока(Параметры.Ошибка), "", Символы.ПС) + 
			НСтр("ru = 'Не удалось определить пользователя сотрудника.'");
		Возврат;
	КонецЕсли;
	
	ПользовательФактическогоИсполнителя = ПользователиФактическогоИсполнителя[0];
	Если ДействияКлиентСервер.ЭтоДействиеПодписания(Действие) Тогда
		РезультатДействия = Перечисления.РезультатыПодписания.Подписано;
		РезультатДействияЗадачи = Справочники.РезультатыДействийЗадач.Подписано;
		ФункцияУчастника = ?(ЗначениеЗаполнено(ФункцияУчастника), ФункцияУчастника,
			Перечисления.ФункцииУчастниковПодписания.Подписывающий);
	ИначеЕсли ДействияКлиентСервер.ЭтоДействиеОзнакомления(Действие) Тогда
		РезультатДействия = Перечисления.РезультатыОзнакомления.Ознакомлен;
		РезультатДействияЗадачи = Справочники.РезультатыДействийЗадач.Ознакомился;
		ФункцияУчастника = ?(ЗначениеЗаполнено(ФункцияУчастника), ФункцияУчастника,
			Перечисления.ФункцииУчастниковОзнакомления.Ознакомляемый);
	Иначе
		Параметры.ОбработкаВозможна = Ложь;
		Параметры.Ошибка = ?(ПустаяСтрока(Параметры.Ошибка), "", Символы.ПС) + 
			НСтр("ru = 'Не предусмотренный вид действия при обработке результата внешнего подписания.
				 |Возможна обработка результата внешнего подписания только для действий подписания и ознакомления.'");
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = Параметры.ПараметрыВыполнения;
	ПараметрыВыполнения.ДатаВыполнения = ДанныеВнешнегоПодписания.ДатаПодписи;
	//@skip-check statement-type-change
	//@skip-check property-return-type
	ПараметрыВыполнения.ИдентификаторПункта = СтрокаУчастникаДействия.ИдентификаторЭтапа;
	ПараметрыВыполнения.ИдентификаторУчастника = ИдентификаторУчастника;
	ПараметрыВыполнения.Участник = РеквизитыСведения.Участник;
	//@skip-check statement-type-change
	//@skip-check property-return-type
	ПараметрыВыполнения.ФункцияУчастника = ФункцияУчастника;
	ПараметрыВыполнения.Функция = ФункцияУчастника;
	//@skip-check statement-type-change
	ПараметрыВыполнения.РезультатДействия = РезультатДействияЗадачи;
	//@skip-check property-return-type
	ПараметрыВыполнения.Результат = РезультатДействия;
	ПараметрыВыполнения.ФактическийИсполнитель = ФактическийИсполнитель;
	ПараметрыВыполнения.Действие = Действие;
	ПараметрыВыполнения.ДействиеЗадачи = ДействиеЗадачи;
	ПараметрыВыполнения.ВыполнитьОтИмени = ПользовательФактическогоИсполнителя;
	ПараметрыВыполнения.ДополнительныеПараметры.Вставить("РезультатВнешнегоПодписания", Истина);
	
	ДействияЗадач = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДействиеЗадачи);
	РеквизитыДействийЗадач = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ДействияЗадач,
		"Задача, ВидДействия, Источник, Исполнитель, ВерсияДанных, РезультатДействияТекстом");
	
	ДанныеФактическихИсполнителей = РаботаСЗадачами.ОпределитьФактическихИсполнителей(
		ДействияЗадач,
		ПараметрыВыполнения.ВыполнитьОтИмени,
		ПараметрыВыполнения.ВыбранныйФактическийИсполнитель,
		РеквизитыДействийЗадач);
	
	ПараметрыВыполнения.ФактическиеИсполнителиПолные =
		ДанныеФактическихИсполнителей.ФактическиеИсполнителиПолные;
	ПараметрыВыполнения.ФактическиеИсполнителиПоДействиям =
		ДанныеФактическихИсполнителей.ФактическиеИсполнителиПоДействиям;
	ПараметрыВыполнения.ОснованияФактИсполнителейПоДействиям =
		ДанныеФактическихИсполнителей.ОснованияФактИсполнителейПоДействиям;
	
КонецПроцедуры

// Заполнить параметры обработки внешнего подписания по выполнению от задачи.
// 
// Параметры:
//  Параметры см. НовыеПараметрыОбработкиРезультатаВнешнегоПодписания
//  РеквизитыСведения - Структура - Реквизиты сведения:
//   * Действие - ОпределяемыйТип.Действия
//   * ИдентификаторУчастника - УникальныйИдентификатор
//   * Участник - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли -
//  ДанныеВнешнегоПодписания см. НовыйРезультатВнешнегоПодписания
//
Процедура ЗаполнитьПараметрыОбработкиВнешнегоПодписанияПоВыполнениюОтЗадачи(Параметры, РеквизитыСведения,
	ДанныеВнешнегоПодписания)
	
	Действие = РеквизитыСведения.Действие;
	ИдентификаторУчастника = РеквизитыСведения.ИдентификаторУчастника;
	Если ДействияКлиентСервер.ЭтоДействиеПодписания(Действие) Тогда
		РезультатДействия = Справочники.РезультатыДействийЗадач.Подписано;
	ИначеЕсли ДействияКлиентСервер.ЭтоДействиеОзнакомления(Действие) Тогда
		РезультатДействия = Справочники.РезультатыДействийЗадач.Ознакомился;
	Иначе
		Параметры.ОбработкаВозможна = Ложь;
		Параметры.Ошибка = ?(ПустаяСтрока(Параметры.Ошибка), "", Символы.ПС) + 
			НСтр("ru = 'Не предусмотренный вид действия при обработке результата внешнего подписания.
				 |Возможна обработка результата внешнего подписания только для действий подписания и ознакомления.'");
		Возврат;
	КонецЕсли;
	
	ЗадачаПроцесса =?(ЗначениеЗаполнено(Параметры.ПараметрыВыполнения.ЗадачаПроцесса),
		Параметры.ПараметрыВыполнения.ЗадачаПроцесса,
		РаботаСПроцессамиПоДействиям.ЗадачаПроцессаПоУчастникуДействия(Действие, ИдентификаторУчастника));
	Если Не ЗначениеЗаполнено(ЗадачаПроцесса) Тогда
		Параметры.ОбработкаВозможна = Ложь;
		Параметры.Ошибка = ?(ПустаяСтрока(Параметры.Ошибка), "", Символы.ПС) + 
			НСтр("ru = 'Не найдена задача процесса при подготовке параметров обработки результата внешнего подписания.
				 |Возможно, обработка документа приостановлена.'");
		Возврат;
	КонецЕсли;
	ДействиеЗадачи = Документы.ДействиеЗадачи.НайтиПоИсточнику(ЗадачаПроцесса);
	Параметры.ОтметитьВыполнение = Не РаботаСЗадачами.ЭтоВыполненноеДействие(ДействиеЗадачи);
	
	Если Не Параметры.ОтметитьВыполнение Тогда
		Возврат;
	КонецЕсли;
	
	СотрудникиПодписанта = Сотрудники.ВсеСотрудникиФизЛица(ДанныеВнешнегоПодписания.Подписант);
	ФактическийИсполнитель = СотрудникиПодписанта[0]; // СправочникСсылка.Сотрудники
	ПользователиФактическогоИсполнителя = Сотрудники.ПользователиСотрудника(ФактическийИсполнитель);
	Если ПользователиФактическогоИсполнителя.Количество() = 0 Тогда
		Параметры.ОбработкаВозможна = Ложь;
		Параметры.Ошибка = ?(ПустаяСтрока(Параметры.Ошибка), "", Символы.ПС) + 
			НСтр("ru = 'Не удалось определить пользователя сотрудника.'");
		Возврат;
	КонецЕсли;
	ПользовательФактическогоИсполнителя = ПользователиФактическогоИсполнителя[0];
	
	ПараметрыВыполнения = Параметры.ПараметрыВыполнения;
	ПараметрыВыполнения.ДатаВыполнения = ДанныеВнешнегоПодписания.ДатаПодписи;
	ПараметрыВыполнения.ИдентификаторУчастника = ИдентификаторУчастника;
	ПараметрыВыполнения.Участник = РеквизитыСведения.Участник;
	ПараметрыВыполнения.РезультатДействия = РезультатДействия;
	ПараметрыВыполнения.ФактическийИсполнитель = ФактическийИсполнитель;
	ПараметрыВыполнения.ЗадачаПроцесса = ЗадачаПроцесса;
	ПараметрыВыполнения.ДействиеЗадачи = ДействиеЗадачи;
	ПараметрыВыполнения.ВыполнитьОтИмени = ПользовательФактическогоИсполнителя;
	ПараметрыВыполнения.ДополнительныеПараметры.Вставить("РезультатВнешнегоПодписания", Истина);
	
	ДействияЗадач = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДействиеЗадачи);
	РеквизитыДействийЗадач = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ДействияЗадач,
		"Задача, ВидДействия, Источник, Исполнитель, ВерсияДанных, РезультатДействияТекстом");
	
	ДанныеФактическихИсполнителей = РаботаСЗадачами.ОпределитьФактическихИсполнителей(
		ДействияЗадач,
		ПараметрыВыполнения.ВыполнитьОтИмени,
		ПараметрыВыполнения.ВыбранныйФактическийИсполнитель,
		РеквизитыДействийЗадач);
	
	ПараметрыВыполнения.ФактическиеИсполнителиПолные =
		ДанныеФактическихИсполнителей.ФактическиеИсполнителиПолные;
	ПараметрыВыполнения.ФактическиеИсполнителиПоДействиям =
		ДанныеФактическихИсполнителей.ФактическиеИсполнителиПоДействиям;
	ПараметрыВыполнения.ОснованияФактИсполнителейПоДействиям =
		ДанныеФактическихИсполнителей.ОснованияФактИсполнителейПоДействиям;
	
КонецПроцедуры

// Заполнить параметры обработки внешнего подписания по подписям.
// 
// Параметры:
//  Параметры см. НовыеПараметрыОбработкиРезультатаВнешнегоПодписания
//  РеквизитыСведения - Структура - Реквизиты сведения:
//   * Действие - ОпределяемыйТип.Действия
//   * Сервис - СправочникСсылка.СервисыВнешнегоПодписания
//  ДанныеВнешнегоПодписания см. НовыйРезультатВнешнегоПодписания
//
Процедура ЗаполнитьПараметрыОбработкиВнешнегоПодписанияПоПодписям(Параметры, РеквизитыСведения,
	ДанныеВнешнегоПодписания)
	
	Если (Не ДействияКлиентСервер.ЭтоДействиеПодписания(РеквизитыСведения.Действие)
			Или Не ЭтоПодписаниеУсиленнойЭП(РеквизитыСведения.Действие))
				И Не ДействияКлиентСервер.ЭтоДействиеОзнакомления(РеквизитыСведения.Действие) Тогда
		Возврат;
	КонецЕсли;
		
	УстановившийПодпись = Неопределено;
	Подписант = ДанныеВнешнегоПодписания.Подписант; // СправочникСсылка.ФизическиеЛица
	СотрудникиФизЛица = Сотрудники.ВсеСотрудникиФизЛица(Подписант);
	Для Каждого Сотрудник Из СотрудникиФизЛица Цикл // СправочникСсылка.Сотрудники
		Пользователь = Сотрудники.ПользовательСотрудника(Сотрудник);
		Если ЗначениеЗаполнено(Пользователь) Тогда
			УстановившийПодпись = Пользователь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если УстановившийПодпись = Неопределено Тогда
		Параметры.ОбработкаВозможна = Ложь;
		Параметры.Ошибка = ?(ПустаяСтрока(Параметры.Ошибка), "", Символы.ПС) + 
			НСтр("ru = 'Не удалось определить пользователя, установившего подпись.'");
		Возврат;
	КонецЕсли;
	
	Сертификат = Base64Значение(ДанныеВнешнегоПодписания.СертификатЭП);
	СертификатКриптографии = Новый СертификатКриптографии(Сертификат);
	Отпечаток = Base64Строка(СертификатКриптографии.Отпечаток);
	Подпись = Base64Значение(ДанныеВнешнегоПодписания.ЭлектроннаяПодпись);
	
	СвойстваПодписи = ЭлектроннаяПодписьКлиентСервер.НовыеСвойстваПодписи();
	СвойстваПодписи.Подпись = Подпись;
	СвойстваПодписи.Отпечаток = Отпечаток;
	СвойстваПодписи.ДатаПодписи = ДанныеВнешнегоПодписания.ДатаПодписи;
	СвойстваПодписи.КомуВыданСертификат = ДанныеВнешнегоПодписания.ИмяПодписанта;
	Если ЗначениеЗаполнено(ДанныеВнешнегоПодписания.Комментарий) Тогда
		СвойстваПодписи.Комментарий = СтрШаблон(НСтр("ru = 'Сервис внешнего подписания ""%1"". %2'"),
			РеквизитыСведения.Сервис, ДанныеВнешнегоПодписания.Комментарий); 
	Иначе
		СвойстваПодписи.Комментарий = СтрШаблон(НСтр("ru = 'Сервис внешнего подписания ""%1"".'"),
			РеквизитыСведения.Сервис); 		
	КонецЕсли;
	СвойстваПодписи.СрокДействияПоследнейМеткиВремени = Дата(1,1,1);
	СвойстваПодписи.УстановившийПодпись = УстановившийПодпись;
	//@skip-check statement-type-change
	//@skip-check wrong-type-expression
	СвойстваПодписи.Сертификат = Сертификат;
	//@skip-check property-return-type
	СвойстваПодписи.ТипПодписи = Перечисления.ТипыПодписиКриптографии.ПустаяСсылка();
	СвойстваПодписи.Вставить("ВнешнееПодписание", РеквизитыСведения.Ссылка);
	
	ПредметДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыСведения.Действие, "Предмет");
	
	ДанныеПодписей = Новый Массив; // Массив Из Структура
	ДанныеПодписиПредмета = Новый Структура;
	ДанныеПодписиПредмета.Вставить("ПодписанныйОбъект", ПредметДействия);
	ДанныеПодписиПредмета.Вставить("СвойстваПодписи", СвойстваПодписи);
	ДанныеПодписей.Добавить(ДанныеПодписиПредмета);
	
	ДополнительныеПредставления = РеквизитыСведения.ДополнительныеПредставления; // РезультатЗапроса
	ПервоеПредставление = Истина;
	ДополнительныеПредставленияТаблица = ДополнительныеПредставления.Выгрузить();
	ДополнительныеПредставленияТаблица.Сортировать("НомерСтроки");
	Для Каждого СтрокаТЗ Из ДополнительныеПредставленияТаблица Цикл // ДокументТабличнаяЧастьСтрока.СведенияОВнешнемПодписании.ДополнительныеПредставления
		// Пропускаем представление "Карточка документа". Его нет в списке файлов, он служебный.
		Если ПервоеПредставление Тогда
			ПервоеПредставление = Ложь;
			Продолжить;
		КонецЕсли;
		СвойстваПодписиПредставления = ОбщегоНазначения.СкопироватьРекурсивно(СвойстваПодписи);
		СвойстваПодписиПредставления.ИдентификаторПодписи = Новый УникальныйИдентификатор;
		ДанныеПодписиПредставления = Новый Структура;
		ДанныеПодписиПредставления.Вставить("ПодписанныйОбъект", СтрокаТЗ.Представление);
		ДанныеПодписиПредставления.Вставить("СвойстваПодписи", СвойстваПодписиПредставления);
		ДанныеПодписей.Добавить(ДанныеПодписиПредставления);
	КонецЦикла;
	
	Параметры.СохранитьПодписи = Истина;
	Параметры.ДанныеПодписей = ДанныеПодписей;
	
КонецПроцедуры

// Сохранять результат внешнего подписания.
// 
// Параметры:
//  РеквизитыСведения - Структура - Реквизиты сведения:
//   * ЕстьРезультат - Булево
//   * Результат - ХранилищеЗначения
//   * РезультатОбработан - Булево
// 
// Возвращаемое значение:
//  Булево
//
Функция СохранятьРезультатВнешнегоПодписания(РеквизитыСведения)
	
	Возврат Не РеквизитыСведения.ЕстьРезультат;
	
КонецФункции

// Отменять дубликаты внешнего подписания.
// 
// Параметры:
//  РеквизитыСведения - Структура - Реквизиты сведения::
//   * Участник - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли -
// 
// Возвращаемое значение:
//  Булево - Отменить дубликаты сведения внешнего подписания
//
Функция ОтменитьДубликатыСведенияВнешнегоПодписания(РеквизитыСведения)
	
	Возврат ТипЗнч(РеквизитыСведения.Участник) = Тип("СправочникСсылка.ПолныеРоли");
	
КонецФункции

#КонецОбласти

// При обработке результата выполнения сервиса внешнего подписания. 
// 
// Параметры:
//  Сведения - ДокументСсылка.СведенияОВнешнемПодписании
//  ДубликатыСведения - Массив Из ДокументСсылка.СведенияОВнешнемПодписании
//  Данные см. НовыйРезультатВнешнегоПодписания
//  
// Возвращаемое значение:
//  Булево
//
Функция ОбработатьРезультатВнешнегоПодписания(Сведения, ДубликатыСведения, Данные)
	
	ПараметрыОбработки = СформироватьПараметрыОбработкиВнешнегоПодписания(Сведения, ДубликатыСведения, Данные);
	Если Не ПараметрыОбработки.ОбработкаВозможна Тогда
		ЗаписатьВЖРПриОбработкеРезультатаВнешнегоПодписания(
			"ВнешнееПодписание.Обработка очереди.Подготовка параметров",
			УровеньЖурналаРегистрации.Предупреждение, Сведения, Данные.ИдентификаторОбъекта,
			ПараметрыОбработки.Ошибка);
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		БлокировкаУдалась = Ложь;
		ЗаблокироватьДанныеПоПараметрамОбработки(ПараметрыОбработки);
		БлокировкаУдалась = Истина;
		ОбработатьДанныеПоПараметрамОбработки(ПараметрыОбработки);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Если Не БлокировкаУдалась Тогда
			ЗаписатьВЖРПриОбработкеРезультатаВнешнегоПодписания(
				"ВнешнееПодписание.Обработка очереди.Блокировка данных",
				УровеньЖурналаРегистрации.Ошибка, Сведения, Данные.ИдентификаторОбъекта,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		Иначе
			ЗаписатьВЖРПриОбработкеРезультатаВнешнегоПодписания(
				"ВнешнееПодписание.Обработка очереди.Обработка данных",
				УровеньЖурналаРегистрации.Ошибка, Сведения, Данные.ИдентификаторОбъекта,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Заблокировать данные по параметрам обработки. Должна бросать исключение, если не удалось заблокировать.
// 
// Параметры:
//  ПараметрыОбработки см. НовыеПараметрыОбработкиРезультатаВнешнегоПодписания 
//
Процедура ЗаблокироватьДанныеПоПараметрамОбработки(ПараметрыОбработки)
	
	ТаблицаСведений = Новый ТаблицаЗначений;
	ТаблицаСведений.Колонки.Добавить("Ссылка",
		Новый ОписаниеТипов("ДокументСсылка.СведенияОВнешнемПодписании"));
	
	ТаблицаДействияОзнакомления = Новый ТаблицаЗначений;
	ТаблицаДействияОзнакомления.Колонки.Добавить("Ссылка",
		Новый ОписаниеТипов("СправочникСсылка.ДействияОзнакомления"));
		
	ТаблицаДействияПодписания = Новый ТаблицаЗначений;
	ТаблицаДействияПодписания.Колонки.Добавить("Ссылка",
		Новый ОписаниеТипов("СправочникСсылка.ДействияПодписания"));
	
	ТаблицаЗадачПроцессов = Новый ТаблицаЗначений;
	ТаблицаЗадачПроцессов.Колонки.Добавить("Ссылка", 
		Новый ОписаниеТипов("ЗадачаСсылка.ЗадачаИсполнителя"));
	
	ТаблицаДействийЗадач = Новый ТаблицаЗначений;
	ТаблицаДействийЗадач.Колонки.Добавить("Ссылка", 
		Новый ОписаниеТипов("ДокументСсылка.ДействиеЗадачи"));
	
	// Здесь должны быть заблокированы дубликаты этого сведения.
	Если ПараметрыОбработки.ОтменитьДубликаты Тогда
		Для Каждого Ссылка Из ПараметрыОбработки.Дубликаты Цикл
			СтрокаТаблицы = ТаблицаСведений.Добавить();
			СтрокаТаблицы.Ссылка = Ссылка;
		КонецЦикла;
	КонецЕсли;
	
	// Здесь должны быть заблокировано само сведение.
	Если ПараметрыОбработки.СохранитьРезультат Тогда
		СтрокаТаблицы = ТаблицаСведений.Добавить();
		СтрокаТаблицы.Ссылка = ПараметрыОбработки.Сведения;
	КонецЕсли;
	
	// Здесь должно быть заблокирована задача или само действие в завимиости от использования процессов.
	Если ПараметрыОбработки.ОтметитьВыполнение Тогда
		Если ПараметрыОбработки.ВыполнятьОбработкуОбъектовПроцессами Тогда
			СтрокаТаблицы = ТаблицаЗадачПроцессов.Добавить();
			СтрокаТаблицы.Ссылка = ПараметрыОбработки.ПараметрыВыполнения.ЗадачаПроцесса;
			СтрокаТаблицы = ТаблицаДействийЗадач.Добавить();
			СтрокаТаблицы.Ссылка = ПараметрыОбработки.ПараметрыВыполнения.ДействиеЗадачи;
		ИначеЕсли ТипЗнч(ПараметрыОбработки.РеквизитыСведения.Действие) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
			СтрокаТаблицы = ТаблицаДействияОзнакомления.Добавить();
			СтрокаТаблицы.Ссылка = ПараметрыОбработки.РеквизитыСведения.Действие;
		ИначеЕсли ТипЗнч(ПараметрыОбработки.РеквизитыСведения.Действие) = Тип("СправочникСсылка.ДействияПодписания") Тогда
			СтрокаТаблицы = ТаблицаДействияПодписания.Добавить();
			СтрокаТаблицы.Ссылка = ПараметрыОбработки.РеквизитыСведения.Действие;
		КонецЕсли;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных();
	
	Если ТаблицаСведений.Количество() <> 0 Тогда
		ЭлементБлокировки = Блокировка.Добавить("Документ.СведенияОВнешнемПодписании");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ТаблицаСведений;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
	КонецЕсли;
	
	Если ТаблицаЗадачПроцессов.Количество() <> 0 Тогда
		ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ТаблицаЗадачПроцессов;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
	КонецЕсли;
	
	Если ТаблицаДействийЗадач.Количество() <> 0 Тогда
		ЭлементБлокировки = Блокировка.Добавить("Документ.ДействиеЗадачи");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ТаблицаДействийЗадач;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
	КонецЕсли;
	
	Если ТаблицаДействияОзнакомления.Количество() <> 0 Тогда
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ДействияОзнакомления");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ТаблицаДействияОзнакомления;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
	КонецЕсли;
	
	Если ТаблицаДействияПодписания.Количество() <> 0 Тогда
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ДействияПодписания");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ТаблицаДействияПодписания;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
	КонецЕсли;
	
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обработать данные по параметрам обработки. Должна бросать исключение, что-то не удалось обработать.
// 
// Параметры:
//  ПараметрыОбработки см. НовыеПараметрыОбработкиРезультатаВнешнегоПодписания
//
Процедура ОбработатьДанныеПоПараметрамОбработки(ПараметрыОбработки)
	
	// Перепроверим, не было ли помечено на удаление сведение.
	ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОбработки.Сведения, "ПометкаУдаления");
	Если ПометкаУдаления Тогда
		ПараметрыОбработки.ОтметитьВыполнение = Ложь;
		ПараметрыОбработки.СохранитьПодписи = Ложь;
	КонецЕсли;
	
	// Перепроверим, что задача исполнителя всё ещё не выполнена.
	Если ПараметрыОбработки.ОтметитьВыполнение И ПараметрыОбработки.ВыполнятьОбработкуОбъектовПроцессами Тогда
		Если РаботаСЗадачами.ЭтоВыполненноеДействие(ПараметрыОбработки.ПараметрыВыполнения.ДействиеЗадачи) Тогда
			ПараметрыОбработки.ОтметитьВыполнение = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Здесь должны быть заблокированы дубликаты этого сведения.
	Если ПараметрыОбработки.ОтменитьДубликаты Тогда
		ПометитьНаУдалениеСведенияВПривилегированномРежиме(ПараметрыОбработки.Дубликаты);
	КонецЕсли;
	
	// Здесь должно быть заблокировано само сведение.
	Если ПараметрыОбработки.СохранитьРезультат Тогда
		СведенияОбъект = ПараметрыОбработки.Сведения.ПолучитьОбъект();
		СведенияОбъект.ЕстьРезультат = Истина;
		СведенияОбъект.Результат = Новый ХранилищеЗначения(ПараметрыОбработки.Данные);
		СведенияОбъект.РезультатОбработан = Истина;
		СведенияОбъект.Записать();
	КонецЕсли;
	
	ЭтоДействиеОзнакомления = ДействияКлиентСервер.ЭтоДействиеОзнакомления(
		ПараметрыОбработки.ПараметрыВыполнения.Действие);
	
	// Здесь должно быть заблокирована задача или само действие в завимиости от использования процессов.
	Если ПараметрыОбработки.ОтметитьВыполнение Тогда
			
			ПараметрыВыполнения = РаботаСЗадачамиКлиентСервер.НовыйПараметрыВыполненияДействийЗадач();
			ПараметрыВыполнения.ДополнительныеПараметры.Вставить("РезультатВнешнегоПодписания", Истина);
			ПараметрыВыполнения.ВыполнитьОтИмени = ПараметрыОбработки.ПараметрыВыполнения.ВыполнитьОтИмени;
			ПараметрыВыполнения.ФактическиеИсполнителиПолные = 
				ПараметрыОбработки.ПараметрыВыполнения.ФактическиеИсполнителиПолные;
			ПараметрыВыполнения.ФактическиеИсполнителиПоДействиям = 
				ПараметрыОбработки.ПараметрыВыполнения.ФактическиеИсполнителиПоДействиям;
			ПараметрыВыполнения.ОснованияФактИсполнителейПоДействиям = 
				ПараметрыОбработки.ПараметрыВыполнения.ОснованияФактИсполнителейПоДействиям;
			Если ПараметрыОбработки.СохранитьПодписи И ЭтоДействиеОзнакомления Тогда
				ПодписиКДаннымОзнакомления = ПодписиКДаннымОзнакомления(
					ПараметрыОбработки.ПараметрыВыполнения.ДействиеЗадачи, ПараметрыОбработки.ДанныеПодписей);	
				ПараметрыВыполнения.ДополнительныеПараметры.Вставить("ПодписиКДаннымОзнакомления",
					ПодписиКДаннымОзнакомления);
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Истина);
			РаботаСЗадачами.ВыполнитьДействиеЗадачи(
				ПараметрыОбработки.ПараметрыВыполнения.ДействиеЗадачи,
				ПараметрыОбработки.ПараметрыВыполнения.РезультатДействия,
				ПараметрыОбработки.ПараметрыВыполнения.ФактическийИсполнитель,
				ПараметрыВыполнения);
			УстановитьПривилегированныйРежим(Ложь);
			
			Если Не ПараметрыОбработки.ВыполнятьОбработкуОбъектовПроцессами И Не ЭтоДействиеОзнакомления Тогда
				ДействияСервер.ВыполнитьДействиеУчастником(
					ПараметрыОбработки.ПараметрыВыполнения.Действие,
					ПараметрыОбработки.ПараметрыВыполнения);
			КонецЕсли;
			
	КонецЕсли;
	
	// Здесь блокировать не нужно ничего кажется.
	Если ПараметрыОбработки.СохранитьПодписи 
		И ДействияКлиентСервер.ЭтоДействиеПодписания(ПараметрыОбработки.ПараметрыВыполнения.Действие) Тогда
		
		РаботаСЭП.ЗанестиИнформациюОПодписях(ПараметрыОбработки.ДанныеПодписей);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует структуру электронных подписей для действия "Ознакомление"
// 
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
//  ДанныеПодписей - Массив из Структура:
//   * ПодписанныйОбъект - СправочникСсылка.ДокументыПредприятия, 
//    СправочникСсылка.Файлы
//   * СвойстваПодписи - см. ЭлектроннаяПодписьКлиентСервер.НовыеСвойстваПодписи
// 
// Возвращаемое значение:
// Соответствие из КлючИЗначение:
//  * Ключ - ДокументСсылка.ДействиеЗадачи
//  * Значение - Массив из Соответствие:
//   ** Ключ - СправочникСсылка.ДокументыПредприятия
//   ** Значение - Массив Из Структура см. ЭлектроннаяПодписьКлиентСервер.НовыеСвойстваПодписи 
//  
Функция ПодписиКДаннымОзнакомления(ДействиеЗадачи, ДанныеПодписей)
	
	ПодписиКДаннымОзнакомления = Новый Соответствие;
	ПодписиДокумента = Новый Соответствие;
	ПодписиДокумента.Вставить(ДанныеПодписей[0].ПодписанныйОбъект,
		ОбщегоНазначенияКлиентСервер.МассивЗначений(ДанныеПодписей[0].СвойстваПодписи));
	ПодписиКДаннымОзнакомления.Вставить(ДействиеЗадачи, ПодписиДокумента);
	
	Возврат ПодписиКДаннымОзнакомления; 
	
КонецФункции	

// Записать в журнал регистрации при обработке результата внешнего подписания.
// 
// Параметры:
//  Событие - Строка
//  Уровень - УровеньЖурналаРегистрации
//  Сведения - ДокументСсылка.СведенияОВнешнемПодписании
//  ИдентификаторОбъекта - Строка
//  ТекстОшибки - Строка
//
Процедура ЗаписатьВЖРПриОбработкеРезультатаВнешнегоПодписания(Событие, Уровень, Сведения, ИдентификаторОбъекта, ТекстОшибки)
	
	ЗаписьЖурналаРегистрации(Событие, Уровень,,, 
		КомментарийЖРПриОбработкеРезультатаВнешнегоПодписания(Сведения, ИдентификаторОбъекта, ТекстОшибки));
	
КонецПроцедуры

// Комментарий журнала регистрации при обработке результата внешнего подписания.
// 
// Параметры:
//  Сведения - ДокументСсылка.СведенияОВнешнемПодписании
//  ИдентификаторОбъекта - Строка
//  ТекстОшибки - Строка
// 
// Возвращаемое значение:
//  Строка - Комментарий
//
Функция КомментарийЖРПриОбработкеРезультатаВнешнегоПодписания(Сведения, ИдентификаторОбъекта, ТекстОшибки)
	
	Возврат СтрШаблон(НСтр("ru = 'Обработка результата внешнего подписания невозможна.
				 |Сведения внешнего подписания: %1
				 |Идентификатор объекта: %2
				 |Причина: %3'"), Строка(Сведения), ИдентификаторОбъекта, ТекстОшибки)
	
КонецФункции

#КонецОбласти

#Область СозданиеСведенияВнешнегоПодписания

// Сформировать данные для заполнения сведения о внешнем подписании, если в контексте несколько подписантов, 
// то в массиве будет больше одно элемента.
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия, ОпределяемыйТип.ДействияОбъект -
//  Параметры  - см. ДействияСервер.СтруктураПараметровИзмененияДанныхДействия
//  Контекст - Структура:
//   * Организация    - СправочникСсылка.Организации
//   * ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//   * ФизическиеЛица - Массив Из СправочникСсылка.ФизическиеЛица
//   * СотрудникиФизЛиц - Соответствие из КлючИЗначение:
//   	** Ключ - СправочникСсылка.ФизическиеЛица
//	 	** Значение - СправочникСсылка.Сотрудники 
// 
// Возвращаемое значение:
//  Массив Из см. НовыеДанныеЗаполненияСведенияОВнешнемПодписании
//
Функция СформироватьДанныеДляЗаполненияСведенияОВнешнемПодписании(Действие, Параметры, Контекст)
	
	Результат = Новый Массив; // Массив Из Структура
	
	Подписанты = Новый Массив;
	Если Контекст.Свойство("ФизическиеЛица") Тогда
		Подписанты = Контекст.ФизическиеЛица; 
	ИначеЕсли Контекст.Свойство("ФизическоеЛицо") Тогда
		Подписанты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Контекст.ФизическоеЛицо); 
	КонецЕсли;
	
	СотрудникиФизЛиц = Новый Соответствие;
	Если Контекст.Свойство("СотрудникиФизЛиц") Тогда
		СотрудникиФизЛиц = Контекст.СотрудникиФизЛиц; // Соответствие из КлючИЗначение
	КонецЕсли;	
	
	ДанныеЗаполненияШаблон = ШаблонДанныхЗаполненияСведенияОВнешнемПодписании(Действие, Параметры, Контекст);
	ПредметПодписанияЗаполнен = ЗначениеЗаполнено(ДанныеЗаполненияШаблон.ПредметПодписания);
	
	Для Каждого Подписант Из Подписанты Цикл
		
		ДанныеЗаполненияПодписанта = ОбщегоНазначения.СкопироватьРекурсивно(ДанныеЗаполненияШаблон);
		ДанныеЗаполненияПодписанта.ФизическоеЛицо = Подписант;
		
		Если Не ПредметПодписанияЗаполнен Тогда
			ПараметрыПодписанта = ОбщегоНазначения.СкопироватьРекурсивно(Параметры);
			ПараметрыПодписанта.Участник = СотрудникиФизЛиц[Подписант]; 
			ЗаполнитьПредметПодписанияПоДокументу(Контекст.ПредметДействия, ПараметрыПодписанта,
				ДанныеЗаполненияПодписанта);
			ЗаполнитьНазваниеДокумента(ДанныеЗаполненияПодписанта, Действие);
		КонецЕсли;	
		
		Результат.Добавить(ДанныеЗаполненияПодписанта);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Подготоваливаем шаблон для заполнения сведения о внешнем подписании.
// 
// Параметры:
//  Действие  - ОпределяемыйТип.Действия, ОпределяемыйТип.ДействияОбъект -
//  Параметры - Структура:
//   * ИдентификаторУчастника - УникальныйИдентификатор
//   * Участник - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли -
//  Контекст  - Структура:
//   * Организация            - СправочникСсылка.Организации
//   * ФизическоеЛицо         - СправочникСсылка.ФизическиеЛица
//   * ФизическиеЛица         - Массив Из СправочникСсылка.ФизическиеЛица
//   * ПредметДействия        - СправочникСсылка.ДокументыПредприятия
// 
// Возвращаемое значение:
//  см. НовыеДанныеЗаполненияСведенияОВнешнемПодписании
//
Функция ШаблонДанныхЗаполненияСведенияОВнешнемПодписании(Действие, Параметры, Контекст)
	
	// Если для текущего Действия есть уже сформированное Сведение, то файл визуализации, представления берём из него.
	ЭтоПервоеСведение = Ложь;
	ПовторноИспользуемыеДанные = ПовторноИспользуемыеДанныеСведения(Действие);
	Если ПовторноИспользуемыеДанные.ПредметПодписания = Неопределено Тогда
		// Если это первые сведения о внешнем подписании, формируем новые данные.
		ЭтоПервоеСведение = Истина;
		ПовторноИспользуемыеДанные = ДанныеЗаполненияСведенияОВнешнемПодписании(Действие, Параметры);
	КонецЕсли;
	
	ДанныеЗаполнения = НовыеДанныеЗаполненияСведенияОВнешнемПодписании();
	ДанныеЗаполнения.Сервис = Справочники.СервисыВнешнегоПодписания.КабинетСотрудника;
	ДанныеЗаполнения.Действие = СсылкаНаДействие(Действие);
	ДанныеЗаполнения.Организация = Контекст.Организация;
	ДанныеЗаполнения.ИдентификаторУчастника = Параметры.ИдентификаторУчастника;
	ДанныеЗаполнения.Участник = Параметры.Участник;
	
	Если Не ЭтоПервоеСведение Тогда
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ПовторноИспользуемыеДанные, , "ПредметПодписания, ВерсияПредмета");
		ЗаполнитьПредметПодписанияПоДокументу(Контекст.ПредметДействия, Параметры, ДанныеЗаполнения);
	Иначе
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ПовторноИспользуемыеДанные);
	КонецЕсли;	
	
	ЗадачаПроцесса = РаботаСПроцессамиПоДействиям.ЗадачаПроцессаПоУчастникуДействия(Действие,
		Параметры.ИдентификаторУчастника);
	
	Если ЗначениеЗаполнено(ЗадачаПроцесса) Тогда
		ДанныеЗаполнения.НазваниеДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаПроцесса, "Наименование");
	ИначеЕсли ЗначениеЗаполнено(ДанныеЗаполнения.ПредметПодписания) Тогда
		ЗаполнитьНазваниеДокумента(ДанныеЗаполнения, Действие);
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

// Заполнить название документа.
// 
// Параметры:
//  ДанныеЗаполнения - см. НовыеДанныеЗаполненияСведенияОВнешнемПодписании 
//  Действие - ОпределяемыйТип.Действия, ОпределяемыйТип.ДействияОбъект - Действие
//
Процедура ЗаполнитьНазваниеДокумента(ДанныеЗаполнения, Действие)
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.НазваниеДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	НаименованиеЗадачи = СтрШаблон("%1 ""%2""", Действие, ДанныеЗаполнения.ПредметПодписания);
	ИдентификаторУчастникаСтрока = СтрШаблон("_%1", ДанныеЗаполнения.ИдентификаторУчастника);
	НаименованиеЗадачи = СтрЗаменить(НаименованиеЗадачи, ИдентификаторУчастникаСтрока, "");
	ДанныеЗаполнения.НазваниеДокумента = НаименованиеЗадачи;
	
КонецПроцедуры	

Функция ПовторноИспользуемыеДанныеСведения(Действие)
	
	Результат = Новый Структура;
	Результат.Вставить("ПредметПодписания", Неопределено);
	Результат.Вставить("ВерсияПредмета", Неопределено);
	Результат.Вставить("ДополнительныеПредставления", Новый Массив);
	
	Выборка = ПолучитьВыборкуДанныеДействия(Действие);
	Если Выборка = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(Результат, Выборка, , "ДополнительныеПредставления");
	ДополнительныеПредставления = Выборка.ДополнительныеПредставления.Выгрузить();
	Результат.ДополнительныеПредставления = ДополнительныеПредставления.ВыгрузитьКолонку("Представление");
	
	Возврат Результат;
	
КонецФункции

// Данные заполнения сведения о внешнем подписании.
// 
// Параметры:
//  Действие - ОпределяемыйТип.ДействияОбъект
//  Параметры - Структура - Параметры:
//	 * ИдентификаторУчастника - УникальныйИдентификатор
//	 * Участник - СправочникСсылка.Сотрудники, 
// 		- СправочникСсылка.ПолныеРоли
// 
// Возвращаемое значение:
//  Структура - Данные заполнения сведения о внешнем подписании:
//	 * ПредметПодписания - СправочникСсылка.ДокументыПредприятия,
// 		- Неопределено 
//	 * ВерсияПредмета - Строка - хеш-строка по алгоритму SHA256,
// 		- Неопределено
//	 * ДополнительныеПредставления -  Массив Из СправочникСсылка.Файлы - 
//
Функция ДанныеЗаполненияСведенияОВнешнемПодписании(Действие, Параметры)
	
	Результат = Новый Структура;
	Результат.Вставить("ПредметПодписания", Неопределено);
	Результат.Вставить("ВерсияПредмета", Неопределено);
	Представления = Новый Массив; // Массив Из СправочникСсылка.Файлы
	Результат.Вставить("ДополнительныеПредставления", Представления);
	
	ПредметДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаДействие(Действие), "Предмет");
	
	Если Не ДелопроизводствоКлиентСервер.ЭтоДокумент(ПредметДействия) Тогда
		ВызватьИсключение "Не известный тип предмета действия";
	КонецЕсли;
	
	ЗаполнитьПредметПодписанияПоДокументу(ПредметДействия, Параметры, Результат);
	ЗаполнитьОсновноеПредставлениеПредметаПодписания(ПредметДействия, Результат); 
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.ДополнительныеПредставления,
		Делопроизводство.ПолучитьФайлыДокументаДляПодписания(ПредметДействия));
	
	Возврат Результат;
	
КонецФункции

// Заполнить предмет подписания по документу.
// 
// Параметры:
//  ПредметДействия - ОпределяемыйТип.ПредметДействия - Предмет действия
//  Параметры - Структура - Параметры:
//	 * ИдентификаторУчастника - УникальныйИдентификатор
//	 * Участник - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли -
//	
//  Результат - Структура - Результат:
//	 * ПредметПодписания - СправочникСсылка.Файлы
//	 * ВерсияПредмета - Строка - хеш-строка по алгоритму SHA256
//	 * ДополнительныеПредставления - Массив из СправочникСсылка.ФактическиеИсполнители
//
Процедура ЗаполнитьПредметПодписанияПоДокументу(ПредметДействия, Параметры, Результат)
	
	Участник = Неопределено;
	Если ТипЗнч(Параметры.Участник) = Тип("СправочникСсылка.Сотрудники") Тогда
		Участник = Параметры.Участник;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Участник) Тогда
		Возврат;
	КонецЕсли;		
		
	ПараметрыПолученияДвоичныхДанных = Новый Структура;
	ПараметрыПолученияДвоичныхДанных.Вставить("ВнешнееПодписание", Истина);
	ПараметрыПолученияДвоичныхДанных.Вставить("ТипСервисаВнешнегоПодписания",
		Перечисления.ТипыСервисовВнешнегоПодписания.КабинетСотрудника);
	
	ДанныеОзнакомления = Новый Структура;
	ДанныеОзнакомления.Вставить("Документ", ПредметДействия);
	ДанныеОзнакомления.Вставить("Исполнитель", Участник);
	ДанныеОзнакомления.Вставить("ВерсииФайлов",
		Справочники.ДанныеОзнакомленияПодПодпись.ТекущиеВерсииФайловДокумента(ПредметДействия));
	
	ДвоичныеДанные = РаботаСЭП.ПолучитьДвоичныеДанныеОбъекта(ДанныеОзнакомления,, ПараметрыПолученияДвоичныхДанных);
	Результат.ВерсияПредмета = ВерсияФайлаПоДвоичнымДанным(ДвоичныеДанные);
	АдресДвоичныхДанных = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
	СвойстваФайла = Новый Структура;
	СвойстваФайла.Вставить("ЗаписьПодписанногоОбъекта", Истина);
	ПараметрыДобавленияФайла = РаботаСФайлами.ПараметрыДобавленияФайла(СвойстваФайла);
	ПараметрыДобавленияФайла.Автор = ПараметрыСеанса.ТекущийПользователь;
	// Не понимает строгая типизация, что типы пересекаются.
	//@skip-check statement-type-change
	ПараметрыДобавленияФайла.ВладелецФайлов = ПредметДействия;
	ПараметрыДобавленияФайла.ИмяБезРасширения = СтрШаблон("%1_%2", ПредметДействия, Параметры.ИдентификаторУчастника);
	ПараметрыДобавленияФайла.РасширениеБезТочки = "xml";
	ПараметрыДобавленияФайла.Служебный = Истина;
	ПараметрыДобавленияФайла.СлужебныйВнешнееПодписание = Истина;
	
	Файл = РаботаСФайлами.ДобавитьФайл(ПараметрыДобавленияФайла, АдресДвоичныхДанных); // СправочникСсылка.Файлы
	РегистрыСведений.СлужебныеФайлыДокументов.ЗаписатьФайл(ПредметДействия, Неопределено,
		Перечисления.ОтношенияСлужебныхФайлов.ПредметВнешнегоПодписания, Файл);
	
	Результат.ПредметПодписания = Файл;
	
КонецПроцедуры

Процедура ЗаполнитьОсновноеПредставлениеПредметаПодписания(ПредметДействия, Результат)
	
	ДанныеКарточки = ДанныеКарточкиВизуализацииДокумента(ПредметДействия);
	Если ДанныеКарточки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваФайла = Новый Структура;
	СвойстваФайла.Вставить("ЗаписьПодписанногоОбъекта", Истина);
	ПараметрыДобавленияФайла = РаботаСФайлами.ПараметрыДобавленияФайла(СвойстваФайла);
	ПараметрыДобавленияФайла.Автор = ПараметрыСеанса.ТекущийПользователь;
	// Не понимает строгая типизация, что типы пересекаются.
	//@skip-check statement-type-change
	ПараметрыДобавленияФайла.ВладелецФайлов = ПредметДействия;
	ПараметрыДобавленияФайла.ИмяБезРасширения = "Карточка документа";
	ПараметрыДобавленияФайла.РасширениеБезТочки = "pdf";
	ПараметрыДобавленияФайла.Служебный = Истина;
	
	АдресДвоичныхДанных = ПоместитьВоВременноеХранилище(ДанныеКарточки.ДвоичныеДанные);
	Файл = РаботаСФайлами.ДобавитьФайл(ПараметрыДобавленияФайла, АдресДвоичныхДанных); // СправочникСсылка.Файлы
	РегистрыСведений.СлужебныеФайлыДокументов.ЗаписатьФайл(ПредметДействия, Результат.ПредметПодписания,
		Перечисления.ОтношенияСлужебныхФайлов.ВизуализацияПредметаВнешнегоПодписания, Файл);
	
	// Вставляем это представление первым.
	Результат.ДополнительныеПредставления.Вставить(0, Файл);
	
КонецПроцедуры

// Находит или создаёт служубный файл карточки документа для внешнего подписания.
// 
// Параметры:
//  Документ - СправочникСсылка.ДокументыПредприятия
//  
// Возвращаемое значение:
//  Неопределено, Структура - данные карточки:
//   * ИмяФайла - Строка - имя файла;
//   * ДвоичныеДанные - ДвоичныеДанные - файл печатной формы. 
//
Функция ДанныеКарточкиВизуализацииДокумента(Документ)
	
	КомандыПечати = УправлениеПечатью.СоздатьКоллекциюКомандПечати();
	СписокОбъектов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Документ);
	НастройкиСохранения = УправлениеПечатью.НастройкиСохранения();
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Справочник.ДокументыПредприятия";
	КомандаПечати.Идентификатор = "КарточкаДокументаВнешнееПодписание";
	КомандаПечати.Представление = НСтр("ru = 'Карточка документа'");
	
	КомандыПечатиМассив = ОбщегоНазначения.ТаблицаЗначенийВМассив(КомандыПечати);
	
	Напечатанное = УправлениеПечатью.НапечататьВФайл(КомандыПечатиМассив, СписокОбъектов, НастройкиСохранения);
	
	Если Напечатанное.Количество() <> 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Новый Структура("ИмяФайла, ДвоичныеДанные", Напечатанное[0].ИмяФайла, Напечатанное[0].ДвоичныеДанные);
	
КонецФункции

#КонецОбласти

#Область СервисыВнешнегоПодписания

// Модуль обработки сведения. Вызывает исклюение, если модуля нет или в модуле нет экспортных процедур.
// 
// Параметры:
//  СведенияОбъект - ДокументОбъект.СведенияОВнешнемПодписании, ДокументСсылка.СведенияОВнешнемПодписании -
// 
// Возвращаемое значение:
//  ОбщийМодуль - модуль обработки.
//
Функция МодульОбработкиСведения(СведенияОбъект)
	
	Модуль = МодульОбработкиПоСервису(СведенияОбъект.Сервис);
	Если Модуль = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Отсутствует модуль обработки для сервиса %1'"), СведенияОбъект);
	КонецЕсли;
	
	Возврат Модуль;
	
КонецФункции

// Модуль обработки по сервису.
// 
// Параметры:
//  Сервис - СправочникСсылка.СервисыВнешнегоПодписания - Сервис
// 
// Возвращаемое значение:
//  ОбщийМодуль, Неопределено - Модуль обработки по сервису
//
Функция МодульОбработкиПоСервису(Сервис)
	
	Если Сервис = Справочники.СервисыВнешнегоПодписания.КабинетСотрудника Тогда
		Возврат КабинетСотрудника;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Ссылка на действие.
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия, ОпределяемыйТип.ДействияОбъект -
// 
// Возвращаемое значение:
//  ОпределяемыйТип.Действия
//
Функция СсылкаНаДействие(Действие)
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Действие)) Тогда
		ДействиеСсылка = Действие;
	Иначе
		ДействиеСсылка = Действие.Ссылка;
	КонецЕсли;
	
	Возврат ДействиеСсылка;
	
КонецФункции

// Идентификаторы объектов сервиса.
// 
// Параметры:
//  Сервис - СправочникСсылка.СервисыВнешнегоПодписания
//  Объекты - Массив Из ОпределяемыйТип.СопоставляемыеОбъектыВнешнегоПодписания
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - Идентификаторы объектов в сервисе:
//   * Ключ - ОпределяемыйТип.СопоставляемыеОбъектыВнешнегоПодписания
//   * Значение - Строка
//
Функция ИдентификаторыОбъектовВСервисе(Сервис, Объекты)
	
	Результат = Новый Соответствие;
	
	РезультатТаблицей = ТаблицаИдентификаторыОбъектовВСервисе(Сервис, Объекты);
	
	Для Каждого Объект Из Объекты Цикл
		СтрокаТаблицы = РезультатТаблицей.Найти(Объект, "Объект");
		Если СтрокаТаблицы = Неопределено Тогда
			Идентификатор = Неопределено;
		Иначе
			Идентификатор = СтрокаТаблицы.Идентификатор;
		КонецЕсли;
		Результат.Вставить(Объект, Идентификатор);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Пометить на удаление сведения в привилегированном режиме.
// 
// Параметры:
//  МассивСведений - Массив Из ДокументСсылка.СведенияОВнешнемПодписании
//
Процедура ПометитьНаУдалениеСведенияВПривилегированномРежиме(МассивСведений)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Сведение Из МассивСведений Цикл
		Объект = Сведение.ПолучитьОбъект();
		Объект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Создать сведения в привилегированном режиме.
// 
// Параметры:
//  ДанныеЗаполнения - Структура
//                   - Массив Из Структура
//
Процедура СоздатьСведенияВПривилегированномРежиме(ДанныеЗаполнения)
	
	Коллекция = Неопределено;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Массив") Тогда
		Коллекция = ДанныеЗаполнения;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Коллекция = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеЗаполнения);
	КонецЕсли;
	
	Если Коллекция = Неопределено Тогда
		ВызватьИсключение 
			"Не предусмотренный вызов метода ""СоздатьСведенияВПривилегированномРежиме"".
			|На вход передать можно структуру или массив.";
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Элемент Из Коллекция Цикл
		Сведения = Документы.СведенияОВнешнемПодписании.СоздатьДокумент();
		Сведения.Заполнить(Элемент);
		Сведения.Записать();
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Контекст доступности сервиса сотрудников.
// 
// Параметры:
//  Сервис - СправочникСсылка.СервисыВнешнегоПодписания
//  МассивСотрудники - Массив Из СправочникСсылка.Сотрудники
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - Контекст доступности сервиса сотрудников:
//   * Ключ - СправочникСсылка.ПолныеРоли
//   * Значение - Структура:
//     ** СервисДоступен - Булево
//     ** ФизЛицо - СправочникСсылка.ФизическиеЛица
//
Функция КонтекстДоступностиСервисаСотрудниками(Сервис, МассивСотрудники)
	
	ФизЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСотрудники, "Владелец");
	УникальныеФизЛица = Новый Массив; // Массив Из СправочникСсылка.ФизическиеЛица
	УникальныеФизЛицаПоиск = Новый Соответствие;
	Для Каждого КлючИЗначение Из ФизЛицаСотрудников Цикл
		ФизЛицо = КлючИЗначение.Значение; // СправочникСсылка.ФизическиеЛица
		Если УникальныеФизЛицаПоиск[ФизЛицо] = Неопределено Тогда
			УникальныеФизЛица.Добавить(ФизЛицо);
			УникальныеФизЛицаПоиск[ФизЛицо] = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ИдентификаторыФизЛиц = ИдентификаторыОбъектовВСервисе(Сервис, УникальныеФизЛица);
	Результат = Новый Соответствие;
	Для Каждого Сотрудник Из МассивСотрудники Цикл
		ФизЛицо = ФизЛицаСотрудников[Сотрудник];
		КонтекстСотрудника = Новый Структура("СервисДоступен, ФизЛицо", 
			ИдентификаторыФизЛиц[ФизЛицо] <> Неопределено, ФизЛицо);
		Результат.Вставить(Сотрудник, КонтекстСотрудника);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Контекст доступности сервиса сотрудников.
// 
// Параметры:
//  Сервис - СправочникСсылка.СервисыВнешнегоПодписания
//  ПолныеРоли - Массив Из СправочникСсылка.ПолныеРоли
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - Контекст доступности сервиса сотрудников:
//   * Ключ - СправочникСсылка.ПолныеРоли
//   * Значение - Структура:
//     ** СервисДоступен - Булево
//     ** ФизЛица - Массив Из СправочникСсылка.ФизическиеЛица
//     * СотрудникиФизЛиц - Соответствие из КлючИЗначение:
//	 	** Ключ - СправочникСсылка.ФизическиеЛица
//	 	** Значение - СправочникСсылка.Сотрудники
//
Функция КонтекстДоступностиСервисаПолнымиРолями(Сервис, ПолныеРоли)
	
	ИсполнителиРолей = РегистрыСведений.ИсполнителиРолей.ИсполнителиРолей(ПолныеРоли);
	
	УникальныеСотрудники = Новый Массив; // Массив Из СправочникСсылка.Сотрудники
	УникальныеСотрудникиПоиск = Новый Соответствие;
	Для Каждого ИсполнителиРоли Из ИсполнителиРолей Цикл
		Для Каждого Сотрудник Из ИсполнителиРоли.Значение Цикл // СправочникСсылка.Сотрудники
			Если УникальныеСотрудникиПоиск[Сотрудник] = Неопределено Тогда
				УникальныеСотрудникиПоиск[Сотрудник] = Истина;
				УникальныеСотрудники.Добавить(Сотрудник);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ФизЛицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(УникальныеСотрудники, "Владелец");
	УникальныеФизЛица = Новый Массив; // Массив Из СправочникСсылка.ФизическиеЛица
	УникальныеФизЛицаПоиск = Новый Соответствие;
	Для Каждого КлючИЗначение Из ФизЛицаСотрудников Цикл
		ФизЛицо = КлючИЗначение.Значение;
		Если УникальныеФизЛицаПоиск[ФизЛицо] = Неопределено Тогда
			УникальныеФизЛица.Добавить(ФизЛицо);
			УникальныеФизЛицаПоиск[ФизЛицо] = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ИдентификаторыФизЛиц = ИдентификаторыОбъектовВСервисе(Сервис, УникальныеФизЛица);
	Результат = Новый Соответствие;
	Для Каждого ИсполнителиРоли Из ИсполнителиРолей Цикл
		КонтекстПолнойРоли = НовыйКонтекстПолнойРоли();
		Для Каждого Сотрудник Из ИсполнителиРоли.Значение Цикл
			ФизЛицоСотрудника = ФизЛицаСотрудников[Сотрудник];
			Если ИдентификаторыФизЛиц[ФизЛицоСотрудника] <> Неопределено Тогда
				КонтекстПолнойРоли.СервисДоступен = Истина;
				Если КонтекстПолнойРоли.ФизЛица.Найти(ФизЛицоСотрудника) = Неопределено Тогда
					КонтекстПолнойРоли.ФизЛица.Добавить(ФизЛицоСотрудника);
					КонтекстПолнойРоли.СотрудникиФизЛиц.Вставить(ФизЛицоСотрудника, Сотрудник);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Результат.Вставить(ИсполнителиРоли.Ключ, КонтекстПолнойРоли);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


// Физические лица сотрудников (уникальные).
// 
// Параметры:
//  МассивСотрудников - Массив Из СправочникСсылка.Сотрудники
// 
// Возвращаемое значение:
//  Массив Из СправочникСсылка.ФизическиеЛица
//
Функция ФизическиеЛицаСотрудников(МассивСотрудников)
	
	ФизическиеЛицаПоСотрудникам = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСотрудников, "Владелец");
	
	УникальныеФизическиеЛицаПоиск = Новый Соответствие;
	УникальныеФизическиеЛица = Новый Массив; // Массив Из СправочникСсылка.ФизическиеЛица
	Для Каждого КлючИЗначение Из ФизическиеЛицаПоСотрудникам Цикл
		ФизическоеЛицо = КлючИЗначение.Значение; // СправочникСсылка.ФизическиеЛица
		Если УникальныеФизическиеЛицаПоиск[ФизическоеЛицо] = Неопределено Тогда
			УникальныеФизическиеЛицаПоиск[ФизическоеЛицо] = Истина;
			УникальныеФизическиеЛица.Добавить(ФизическоеЛицо);
		КонецЕсли;
	КонецЦикла;
	
	Возврат УникальныеФизическиеЛица;
	
КонецФункции

Функция ЕстьАктивныеСведенияОВнешнемПодписанииПоДействию(Действие)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СведенияОВнешнемПодписании.Ссылка
	|ИЗ
	|	Документ.СведенияОВнешнемПодписании КАК СведенияОВнешнемПодписании
	|ГДЕ
	|	СведенияОВнешнемПодписании.ПометкаУдаления = ЛОЖЬ
	|	И СведенияОВнешнемПодписании.РезультатОбработан = ЛОЖЬ
	|	И СведенияОВнешнемПодписании.Действие = &Действие";
	Запрос.УстановитьПараметр("Действие", Действие);
	УстановитьПривилегированныйРежим(Истина);
	Результат = Не Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Результат;
	
КонецФункции

// Сотруднику доступно подписание в сервисе.
// 
// Параметры:
//  Сервис    - СправочникСсылка.СервисыВнешнегоПодписания - Сервис
//  Сотрудник - СправочникСсылка.Сотрудники - Сотрудник
//  Контекст  - Структура, Неопределено -
// 
// Возвращаемое значение:
//  Булево - Сотруднику доступно подписание в сервисе
//
Функция СотрудникуДоступноПодписаниеВСервисе(Сервис, Сотрудник, Контекст = Неопределено)
	
	ФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "Владелец");
	Доступно = ИдентификаторОбъектаВСервисе(Сервис, ФизЛицо) <> Неопределено;
	Если Доступно И Контекст <> Неопределено Тогда
		Контекст.Вставить("ФизическоеЛицо", ФизЛицо);
	КонецЕсли;
	Возврат Доступно;
	
КонецФункции

// Полной роли доступно подписание в сервисе.
// 
// Параметры:
//  Сервис     - СправочникСсылка.СервисыВнешнегоПодписания - Сервис
//  ПолнаяРоль - СправочникСсылка.ПолныеРоли
//  Контекст   - Структура, Неопределено -
// 
// Возвращаемое значение:
//  Булево - Полной роли доступно подписание в сервисе
//
Функция ПолнойРолиДоступноПодписаниеВСервисе(Сервис, ПолнаяРоль, Контекст = Неопределено)
	
	Если Контекст <> Неопределено Тогда
		ФизЛицаКонтекста = Новый Массив; // Массив Из СправочникСсылка.ФизическиеЛица
		Контекст.Вставить("ФизическиеЛица", ФизЛицаКонтекста);
		Контекст.Вставить("СотрудникиФизЛиц", Новый Соответствие);
	КонецЕсли;
	
	СотрудникиРоли = РегистрыСведений.ИсполнителиРолей.ИсполнителиРоли(ПолнаяРоль); // Массив Из СправочникСсылка.Сотрудники
	
	УникальныеФизическиеЛица = ФизическиеЛицаСотрудников(СотрудникиРоли);
	
	ИдентификаторыОбъектов = ИдентификаторыОбъектовВСервисе(Сервис, УникальныеФизическиеЛица);
	Для Каждого КлючИЗначение Из ИдентификаторыОбъектов Цикл
		Если КлючИЗначение.Значение <> Неопределено Тогда
			Если Контекст = Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
			Контекст.ФизическиеЛица.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.Владелец КАК ФизЛицо
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В (&СотрудникиРоли)
		|	И Сотрудники.Владелец В (&ФизЛица)";
	
	Запрос.УстановитьПараметр("СотрудникиРоли", СотрудникиРоли);
	Запрос.УстановитьПараметр("ФизЛица", Контекст.ФизическиеЛица);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Контекст.СотрудникиФизЛиц.Вставить(Выборка.Физлицо, Выборка.Сотрудник);
	КонецЦикла;
	
	Возврат Контекст.ФизическиеЛица.Количество() <> 0;
	
КонецФункции

// Получить выборку данные действия. 
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия
// 
// Возвращаемое значение:
//  Неопределено, ВыборкаИзРезультатаЗапроса - колонки:
//   * ПредметПодписания - СправочникСсылка.Файлы
//   * ВерсияПредмета    - Строка
//   * ДополнительныеПредставления - РезультатЗапроса:
//     ** Представление  - СправочникСсылка.Файлы
//
Функция ПолучитьВыборкуДанныеДействия(Действие)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	СведенияОВнешнемПодписании.ПредметПодписания КАК ПредметПодписания,
	|	СведенияОВнешнемПодписании.ВерсияПредмета КАК ВерсияПредмета,
	|	СведенияОВнешнемПодписании.ДополнительныеПредставления.(
	|		Представление КАК Представление) КАК ДополнительныеПредставления
	|ИЗ
	|	Документ.СведенияОВнешнемПодписании КАК СведенияОВнешнемПодписании
	|ГДЕ
	|	НЕ СведенияОВнешнемПодписании.ПометкаУдаления
	|	И СведенияОВнешнемПодписании.Действие = &Действие";
	Запрос.УстановитьПараметр("Действие", Действие);
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

// Сведения о внешнем подписании участника.
// 
// Параметры:
//  ИдентификаторУчастника - УникальныйИдентификатор, Неопределено - Идентификатор участника
// 
// Возвращаемое значение:
//  Неопределено, Массив Из ДокументСсылка.СведенияОВнешнемПодписании - Сведения о внешнем подписании участника
//
Функция СведенияОВнешнемПодписанииУчастника(ИдентификаторУчастника)
	
	Если ИдентификаторУчастника = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СведенияОВнешнемПодписании.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СведенияОВнешнемПодписании КАК СведенияОВнешнемПодписании
	|ГДЕ
	|	СведенияОВнешнемПодписании.ИдентификаторУчастника = &ИдентификаторУчастника";
	Запрос.УстановитьПараметр("ИдентификаторУчастника", ИдентификаторУчастника);
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Все активные сведения внешнего подписания по действию.
// 
// Параметры:
//  Действия - Массив Из ОпределяемыйТип.Действия
//  
// Возвращаемое значение:
//  Массив Из ДокументСсылка.СведенияОВнешнемПодписании
//
Функция ВсеАктивныеСведенияВнешнегоПодписанияПоДействиям(Действия)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СведенияОВнешнемПодписании.Ссылка
	|ИЗ
	|	Документ.СведенияОВнешнемПодписании КАК СведенияОВнешнемПодписании
	|ГДЕ
	|	СведенияОВнешнемПодписании.ПометкаУдаления = ЛОЖЬ
	|	И СведенияОВнешнемПодписании.РезультатОбработан = ЛОЖЬ
	|	И СведенияОВнешнемПодписании.Действие В (&Действия)";
	Запрос.УстановитьПараметр("Действия", Действия);
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат Результат;
	
КонецФункции

// Все активные сведения внешнего подписания по действию с блокировкой.
// 
// Параметры:
//  Действия - Массив Из ОпределяемыйТип.Действия
//  
// Возвращаемое значение:
//  Неопределено, Массив Из ДокументСсылка.СведенияОВнешнемПодписании -
//
Функция ВсеСведенияВнешнегоПодписанияПоДействиямСБлокировкой(Действия)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СведенияОВнешнемПодписании.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СведенияОВнешнемПодписании КАК СведенияОВнешнемПодписании
	|ГДЕ
	|	СведенияОВнешнемПодписании.ПометкаУдаления = ЛОЖЬ
	|	И СведенияОВнешнемПодписании.Действие В (&Действия)";
	Запрос.УстановитьПараметр("Действия", Действия);
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("Документ.СведенияОВнешнемПодписании");
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
	
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ЗаписьЖурналаРегистрации(
			"ВнешнееПодписание.При записи документа.Блокировка",
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Это обрабатываемая функция участника.
// 
// Параметры:
//  ФункцияУчастника - ОпределяемыйТип.ФункцииУчастниковДействий 
// 
// Возвращаемое значение:
//  Булево - Это обрабатываемая функция участника
//
Функция ЭтоОбрабатываемаяФункцияУчастника(ФункцияУчастника)
	
	ОбрабатываемыеФункции = Новый Соответствие;
	ОбрабатываемыеФункции.Вставить(Перечисления.ФункцииУчастниковОзнакомления.Ознакомляемый, Истина);
	
	Возврат ОбрабатываемыеФункции[ФункцияУчастника] <> Неопределено;
	
КонецФункции

// Это подписание усиленной ЭП.
// 
// Параметры:
//  Действие - СправочникСсылка.ДействияПодписания, СправочникОбъект.ДействияПодписания - 
// 
// Возвращаемое значение:
//  Булево
//
Функция ЭтоПодписаниеУсиленнойЭП(Действие)
	
	СпособыПодписанияУсиленнойЭП = ОбщегоНазначенияКлиентСервер.МассивЗначений(
		Перечисления.СпособыПодписанияПредметаДействия.УЭП,
		Перечисления.СпособыПодписанияПредметаПроцесса.УЭП);
	
	ДействиеСсылка = СсылкаНаДействие(Действие);
	СпособПодписания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеСсылка, "СпособПодписания");
	
	Возврат СпособыПодписанияУсиленнойЭП.Найти(СпособПодписания) <> Неопределено;
	
КонецФункции

// Это ознакомление ПЭП
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия - 
// 
// Возвращаемое значение:
//  Булево
//
Функция ЭтоОзнакомлениеБезУсиленнойЭП(Действие)
	
	Если Не ДействияКлиентСервер.ЭтоДействиеОзнакомления(Действие) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПодписыватьУЭП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "ПодписыватьУЭП");
	
	Возврат Не ПодписыватьУЭП;
	
КонецФункции

// Ключи соответствия в массив.
// 
// Параметры:
//  ПараметрСоответствие - Соответствие Из КлючИЗначение
// 
// Возвращаемое значение:
//  Массив Из Произвольный - Ключи соответствия в массив
//
Функция КлючиСоответствияВМассив(ПараметрСоответствие)
	
	Результат = Новый Массив; // Массив Из Произвольный
	Для Каждого КлючЗначение Из ПараметрСоответствие Цикл
		//@skip-check typed-value-adding-to-untyped-collection
		Результат.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Таблица идентификаторы объектов в сервисе.
// 
// Параметры:
//  Сервис - СправочникСсылка.СервисыВнешнегоПодписания - Сервис
//  Объекты - Массив из СправочникСсылка.ФизическиеЛица - Объекты
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица идентификаторы объектов в сервисе:
//   * Объект - ОпределяемыйТип.СопоставляемыеОбъектыВнешнегоПодписания
//   * Идентификатор - Строка
//
Функция ТаблицаИдентификаторыОбъектовВСервисе(Сервис, Объекты)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИдентификаторыОбъектовВСервисахВнешнегоПодписания.Объект КАК Объект,
	|	ИдентификаторыОбъектовВСервисахВнешнегоПодписания.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.ИдентификаторыОбъектовВСервисахВнешнегоПодписания КАК
	|		ИдентификаторыОбъектовВСервисахВнешнегоПодписания
	|ГДЕ
	|	ИдентификаторыОбъектовВСервисахВнешнегоПодписания.Сервис = &Сервис
	|	И ИдентификаторыОбъектовВСервисахВнешнегоПодписания.Объект В (&Объекты)";
	Запрос.УстановитьПараметр("Сервис", Сервис);
	Запрос.УстановитьПараметр("Объекты", Объекты);
	УстановитьПривилегированныйРежим(Истина);
	РезультатТаблицей = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	РезультатТаблицей.Индексы.Добавить("Объект");
	
	Возврат РезультатТаблицей;
	
КонецФункции

// Выборка объект по идентификатору сервиса.
// 
// Параметры:
//  Сервис - СправочникСсылка.СервисыВнешнегоПодписания - Сервис
//  Идентификатор - Строка - Идентификатор
// 
// Возвращаемое значение:
//  Неопределено, ВыборкаИзРезультатаЗапроса - Выборка объект по идентификатору сервиса:
//   * Ссылка - ОпределяемыйТип.СопоставляемыеОбъектыВнешнегоПодписания
//
Функция ВыборкаОбъектПоИдентификаторуСервиса(Сервис, Идентификатор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИдентификаторыОбъектовВСервисахВнешнегоПодписания.Объект КАК Ссылка
	|ИЗ
	|	РегистрСведений.ИдентификаторыОбъектовВСервисахВнешнегоПодписания КАК
	|		ИдентификаторыОбъектовВСервисахВнешнегоПодписания
	|ГДЕ
	|	ИдентификаторыОбъектовВСервисахВнешнегоПодписания.Сервис = &Сервис
	|	И ИдентификаторыОбъектовВСервисахВнешнегоПодписания.Идентификатор = &Идентификатор";
	Запрос.УстановитьПараметр("Сервис", Сервис);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

// Результат запроса сведения о внешнем подписании по идентификаторам.
// 
// Параметры:
//  ИдентификаторыДокументов - Массив из Строка - Идентификаторы документов
// 
// Возвращаемое значение:
//  Неопределено, ВыборкаИзРезультатаЗапроса - Результат запроса сведения о внешнем подписании по идентификаторам:
//   * Ссылка - ДокументСсылка.СведенияОВнешнемПодписании
//   * ИдентификаторДокумента - Строка
//   * ВерсияПредмета - Строка
//
Функция ВыборкаСведенияОВнешнемПодписанииПоИдентификаторам(ИдентификаторыДокументов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СведенияОВнешнемПодписании.Ссылка КАК Ссылка,
	|	СведенияОВнешнемПодписании.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	СведенияОВнешнемПодписании.ВерсияПредмета КАК ВерсияПредмета
	|ИЗ
	|	Документ.СведенияОВнешнемПодписании КАК СведенияОВнешнемПодписании
	|ГДЕ
	|	СведенияОВнешнемПодписании.ИдентификаторДокумента В (&ИдентификаторыДокументов)";
	Запрос.УстановитьПараметр("ИдентификаторыДокументов", ИдентификаторыДокументов);
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

Процедура ПополнитьКешДвоичныхДанныхПоДокументам(Кеш, ПараметрыПолучения, Объект, ВладелецОбъекта = Неопределено)
	
	Если Кеш[Объект] <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПодписейОбъекта = ПараметрыПолучения.ДанныеПодписейОбъектов[Объект];
	Для Каждого КлючИЗначение Из ДанныеПодписейОбъекта Цикл
		ДанныеПодписиДляПроверки = КлючИЗначение.Значение; // см. РаботаСЭПКлиентСервер.НовыеДанныеПодписиДляПроверки
		Если ЗначениеЗаполнено(ДанныеПодписиДляПроверки.ВнешнееПодписание) Тогда
			
			Если ВладелецОбъекта <> Неопределено Тогда
				Если Кеш[ВладелецОбъекта] <> Неопределено Тогда
					 Кеш[Объект] = Кеш[ВладелецОбъекта];
					 Возврат;
				КонецЕсли;
			КонецЕсли;
			
			ПараметрыПолученияДвоичныхДанных = Новый Структура;
			ПараметрыПолученияДвоичныхДанных.Вставить("ВнешнееПодписание", Истина);
			ПараметрыПолученияДвоичныхДанных.Вставить("ТипСервисаВнешнегоПодписания",
				Перечисления.ТипыСервисовВнешнегоПодписания.КабинетСотрудника);
			
			ДвоичныеДанные = РаботаСЭП.ПолучитьДвоичныеДанныеОбъекта(
				?(ВладелецОбъекта <> Неопределено, ВладелецОбъекта, Объект),,
				ПараметрыПолученияДвоичныхДанных);
			АдресДвоичныхДанных =
				ПоместитьВоВременноеХранилище(ДвоичныеДанные,
					ПараметрыПолучения.УникальныйИдентификаторФормы);
			
			СведенияДляДополненияДанныхОбъектов = 
				НовыеСведенияДляДополненияДанныхОбъектов(ДанныеПодписиДляПроверки.Версия, АдресДвоичныхДанных);
			Кеш[Объект] = СведенияДляДополненияДанныхОбъектов;
			Если ВладелецОбъекта <> Неопределено Тогда
				Кеш[ВладелецОбъекта] = СведенияДляДополненияДанныхОбъектов;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Конструкторы

// Новые сведения для дополнения данных объектов.
// 
// Параметры:
//  Версия - Число -
//  АдресДвоичныхДанных - Строка -
// 
// Возвращаемое значение:
//  Структура -Новые сведения для дополнения данных объектов::
// * Версия - Число
// * АдресДвоичныхДанных - Строка 
//
Функция НовыеСведенияДляДополненияДанныхОбъектов(Версия, АдресДвоичныхДанных)
	
	СведенияДляДополненияДанныхОбъектов = Новый Структура;
	СведенияДляДополненияДанныхОбъектов.Вставить("Версия", Версия);
	СведенияДляДополненияДанныхОбъектов.Вставить("АдресДвоичныхДанных", АдресДвоичныхДанных);
	Возврат СведенияДляДополненияДанныхОбъектов;
	
КонецФункции

// Конструктор пустой структуры данных для заполнения сведения о внешнем подписании.
// 
// Возвращаемое значение:
//  Структура - Новые данные заполнения сведения о внешнем подписании:
//   * Сервис                 - Неопределено, СправочникСсылка.СервисыВнешнегоПодписания -
//   * Действие               - Неопределено, ОпределяемыйТип.Действия -
//   * ИдентификаторУчастника - Неопределено, УникальныйИдентификатор -
//   * Участник               - Неопределено, СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли -
//   * ПредметПодписания      - Неопределено, СправочникСсылка.Файлы -
//   * ВерсияПредмета         - Строка
//   * Организация            - СправочникСсылка.Организации
//   * ФизическоеЛицо         - СправочникСсылка.ФизическиеЛица
//   * НазваниеДокумента      - Строка
//   * ДополнительныеПредставления см. НовыеДополнительныеПредставленияСведения()
//
Функция НовыеДанныеЗаполненияСведенияОВнешнемПодписании()
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Сервис", Неопределено);
	ДанныеЗаполнения.Вставить("Действие", Неопределено);
	ДанныеЗаполнения.Вставить("ИдентификаторУчастника", Неопределено);
	ДанныеЗаполнения.Вставить("Участник", Неопределено);
	ДанныеЗаполнения.Вставить("ПредметПодписания", Неопределено);
	ДанныеЗаполнения.Вставить("ВерсияПредмета", "");
	ДанныеЗаполнения.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("ФизическоеЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("НазваниеДокумента", "");
	ДанныеЗаполнения.Вставить("ДополнительныеПредставления", НовыеДополнительныеПредставленияСведения());
	Возврат ДанныеЗаполнения;
	
КонецФункции

// Новые дополнительные представления сведения о внешнем подписании.
// 
// Возвращаемое значение:
//  Массив Из СправочникСсылка.Файлы
//
Функция НовыеДополнительныеПредставленияСведения()
	
	Возврат Новый Массив;
	
КонецФункции

// Конструктор пустой структуры ключей сервиса.
// 
// Возвращаемое значение:
//  Структура:
//   * ИдентификаторКлиента - Строка
//   * СекретКлиента        - Строка
//
Функция НовыеКлючиСервиса()
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторКлиента",	"");
	Результат.Вставить("СекретКлиента",			"");
	Возврат Результат;
	
КонецФункции

// Новый контекст полной роли.
// 
// Возвращаемое значение:
//  Структура - Новый контекст полной роли:
//	 * СервисДоступен - Булево 
//	 * ФизЛица - Массив из СправочникСсылка.ФизическиеЛица
//	 * СотрудникиФизЛиц - Соответствие из КлючИЗначение:
//	 	** Ключ - СправочникСсылка.ФизическиеЛица
//	 	** Значение - СправочникСсылка.Сотрудники 
//
Функция НовыйКонтекстПолнойРоли()
	
	КонтекстПолнойРоли = Новый Структура;
	КонтекстПолнойРоли.Вставить("СервисДоступен", Ложь);
	КонтекстПолнойРоли.Вставить("ФизЛица", Новый Массив); // Массив из СправочникСсылка.ФизическиеЛица
	КонтекстПолнойРоли.Вставить("СотрудникиФизЛиц", Новый Соответствие);
	
	Возврат КонтекстПолнойРоли;
	
КонецФункции

#КонецОбласти

#КонецОбласти
