///////////////////////////////////////////////////////////////////////////////////////////////
// МОДУЛЬ СОДЕРЖИТ ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ВНУТРЕННИМИ, ВХОДЯЩИМИ И ИСХОДЯЩИМИ ДОКУМЕНТАМИ
// 

#Область ПрограммныйИнтерфейс

// Проверяет, зарегистрирован ли документ.
//
// Параметры:
//  Документ - СправочникСсылка.ДокументыПредприятия.
//
// Возвращаемое значение:
//  Булево - Документ зарегистрирован.
//
Функция ДокументЗарегистрирован(Документ) Экспорт
	
	ДокументЗарегистрирован = Ложь;
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат ДокументЗарегистрирован;
	КонецЕсли;
	
	РегистрационныйНомер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "РегистрационныйНомер");
	ДокументЗарегистрирован = ДелопроизводствоКлиентСервер.ДокументЗарегистрирован(РегистрационныйНомер);
	
	Возврат ДокументЗарегистрирован;
	
КонецФункции

// Возвращает итоги "Мои документы".
// 
// Возвращаемое значение:
//  Структура - Итоги "Мои документы":
//   * Всего - Число
//   * Просрочено - Число
//   * БезОтвета - Число
//   * Истекают - Число
//
Функция МоиДокументыИтоги() Экспорт
	
	МоиДокументыИтоги = Новый Структура;
	МоиДокументыИтоги.Вставить("Всего", 0);
	МоиДокументыИтоги.Вставить("Просрочено", 0);
	МоиДокументыИтоги.Вставить("БезОтвета", 0);
	МоиДокументыИтоги.Вставить("Истекают", 0);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ МоиДокументы.Документ) КАК Всего
		|ИЗ
		|	МоиДокументы КАК МоиДокументы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ МоиДокументы.Документ) КАК Просрочено
		|ИЗ
		|	МоиДокументы КАК МоиДокументы
		|ГДЕ
		|	МоиДокументы.Просрочен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ МоиДокументы.Документ) КАК Истекают
		|ИЗ
		|	МоиДокументы КАК МоиДокументы
		|ГДЕ
		|	МоиДокументы.Истекает");
	
	ВсеПричины = Перечисления.ПричиныДобавленияВМоиДокументы.ВсеПричины();
	Запрос.МенеджерВременныхТаблиц = МоиДокументы.ВременнаяТаблицаМоиДокументы(ВсеПричины);
	Результаты = Запрос.ВыполнитьПакет();
	
	ИндексРезультатаЗапросаВсего = 0;
	Выборка = Результаты[ИндексРезультатаЗапросаВсего].Выбрать();
	Выборка.Следующий();
	МоиДокументыИтоги.Всего = Выборка.Всего;
	
	ИндексРезультатаЗапросаПросрочено = 1;
	Выборка = Результаты[ИндексРезультатаЗапросаПросрочено].Выбрать();
	Выборка.Следующий();
	МоиДокументыИтоги.Просрочено = Выборка.Просрочено;
	
	ИндексРезультатаЗапросаИстекают = 2;
	Выборка = Результаты[ИндексРезультатаЗапросаИстекают].Выбрать();
	Выборка.Следующий();
	МоиДокументыИтоги.Истекают = Выборка.Истекают;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ МоиДокументы.Документ) КАК БезОтвета
		|ИЗ
		|	РегистрСведений.МоиДокументы КАК МоиДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДокументыПредприятия КАК ИсходящиеДокументы
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиОбъектов КАК СвязиОбъектов
		|			ПО ИсходящиеДокументы.Ссылка = СвязиОбъектов.Объект
		|				И (СвязиОбъектов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученОтвет))
		|		ПО МоиДокументы.Документ = ИсходящиеДокументы.Ссылка
		|		И ИсходящиеДокументы.ВидДокумента.ЯвляетсяИсходящейКорреспонденцией = Истина
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Корреспонденция.Корреспонденты КАК ИсходящиеДокументыПолучатели
		|		ПО (МоиДокументы.Документ = ИсходящиеДокументыПолучатели.Ссылка.Основание
		|				И ИсходящиеДокументыПолучатели.Отправлен)
		|ГДЕ
		|	(МоиДокументы.Причина = ЗНАЧЕНИЕ(Перечисление.ПричиныДобавленияВМоиДокументы.ЯвляюсьАвторомДокумента)
		|			ИЛИ МоиДокументы.Причина = ЗНАЧЕНИЕ(Перечисление.ПричиныДобавленияВМоиДокументы.ЯвляюсьОтветственнымЗаДокумент))
		|	И МоиДокументы.Сотрудник В (&Сотрудники)
		|	И НЕ ИсходящиеДокументы.ПометкаУдаления
		|	И ИсходящиеДокументы.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|	И ИсходящиеДокументы.СрокИсполнения < &ТекущаяДата
		|	И СвязиОбъектов.СвязанныйОбъект ЕСТЬ NULL");
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники.ВсеСотрудникиТекущегоПользователя());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	МоиДокументыИтоги.БезОтвета = Выборка.БезОтвета;
	
	Возврат МоиДокументыИтоги;
	
КонецФункции

// Формирует наименование документа из заголовка 
Функция НаименованиеДокумента(Документ) Экспорт 
	
	Заголовок = СокрЛП(Документ.Заголовок);
	ДлинаНаименования = Документ.Метаданные().ДлинаНаименования;
	
	Если ЗначениеЗаполнено(Документ.РегистрационныйНомер)
		И (СтрНайти(Заголовок, Документ.РегистрационныйНомер) = 0
		Или СтрНайти(Заголовок, Формат(Документ.ДатаРегистрации, "ДЛФ=D")) = 0) Тогда 
		Постфикс = " " + СтрШаблон(
							НСтр("ru = '(№ %1 от %2)'"),
							СокрЛП(Документ.РегистрационныйНомер),
							Формат(Документ.ДатаРегистрации, "ДЛФ=D"));
	ИначеЕсли ЗначениеЗаполнено(Документ.ВременныйНомер)
		И СтрНайти(Заголовок, Документ.ВременныйНомер) = 0 Тогда
		Постфикс = " " + СтрШаблон(
							НСтр("ru = '(врем. № %1)'"),
							СокрЛП(Документ.ВременныйНомер));
	Иначе
		Постфикс = "";
	КонецЕсли;
	
	Если СтрДлина(Заголовок + Постфикс) > ДлинаНаименования Тогда 
		
		Заголовок = Лев(Заголовок, ДлинаНаименования - СтрДлина(Постфикс));
		ДлинаЗаголовка = СтрДлина(Заголовок);
		
		ПозицияПробела = ДлинаЗаголовка;
		Пока ПозицияПробела > 0 Цикл
			Если Сред(Заголовок, ПозицияПробела, 1) = " " Тогда 
				Прервать;
			КонецЕсли;	
			ПозицияПробела = ПозицияПробела - 1;
		КонецЦикла;	
		
		Если ПозицияПробела > 1 Тогда 
			Заголовок = Лев(Заголовок, ПозицияПробела - 1);
		КонецЕсли;	
		
	КонецЕсли;	
	
	Возврат Заголовок + Постфикс;
	
КонецФункции	

// Формирует наименование по полному наименованию.
//
// Параметры:
//  ДелоОбъект - СправочникОбъект.ДелаХраненияДокументов, СправочникОбъект.НоменклатураДел - объект.
//  ТомЧастьСтрокой - Строка - представление тома и части (для спр. ДелаХраненияДокументов).
//  
// Возвращаемое значение:
//  Строка - наименование номенклатуры дел или дела. 
// 
Функция НаименованиеДела(ДелоОбъект, ТомЧастьСтрокой = "") Экспорт
	
	Заголовок = ДелоОбъект.ПолноеНаименование;
	Заголовок = СтрЗаменить(Заголовок, Символы.ПС, " ");
	Заголовок = СокрЛП(Заголовок);
	
	ДлинаНаименования = ДелоОбъект.Метаданные().ДлинаНаименования;
	
	Если ЗначениеЗаполнено(ТомЧастьСтрокой) И СтрНайти(Заголовок, ТомЧастьСтрокой) > 0 Тогда
		Заголовок = СокрЛП(СтрЗаменить(Заголовок, ТомЧастьСтрокой, ""));
		ДлинаНаименования = ДлинаНаименования - СтрДлина(ТомЧастьСтрокой) - 1;
	КонецЕсли;
	
	Пока СтрДлина(Заголовок) > ДлинаНаименования Цикл 
		ПозицияПробела = СтрНайти(Заголовок, " ", НаправлениеПоиска.СКонца);
		Если ПозицияПробела = 0 Тогда
			Заголовок = СокрЛП(Лев(Заголовок, ДлинаНаименования));
			Прервать;
		Иначе
			Заголовок = СокрЛП(Лев(Заголовок, ПозицияПробела - 1));
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТомЧастьСтрокой) Тогда
		Заголовок = Заголовок + " " + ТомЧастьСтрокой;
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции

// Возвращает количество файлов по документу
Функция КоличествоФайлов(Документ, ПоказатьУдаленные = Ложь) Экспорт 
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат 0;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &Документ";
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Если Не ПоказатьУдаленные Тогда
		Запрос.Текст = Запрос.Текст +"
			|	И Файлы.ПометкаУдаления = ЛОЖЬ";
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Количество;
	
КонецФункции

// Возвращает количество задач по документу
Функция КоличествоЗадач(Документ, ТолькоНевыполненные = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.Предметы.Предмет = &Документ
	|	И НЕ ЗадачаИсполнителя.ПометкаУдаления
	|	И ЗадачаИсполнителя.БизнесПроцесс.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)";
	
	Если ТолькоНевыполненные Тогда 
		Запрос.Текст = Запрос.Текст + " И (НЕ ЗадачаИсполнителя.Выполнена)";
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Количество;
	
КонецФункции	

// Возвращает вид документа по умолчанию
Функция ПолучитьВидДокументаПоУмолчанию(Ссылка) Экспорт
	
	ВидДокумента = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "ВидДокумента");
	
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ТаблицаВидаДокументов.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ВидыДокументов КАК ТаблицаВидаДокументов
			|ГДЕ
			|	НЕ ТаблицаВидаДокументов.ПометкаУдаления
			|	И НЕ ТаблицаВидаДокументов.ЭтоГруппа
			|	И ЛОЖЬ В
			|			(ВЫБРАТЬ
			|				ЛОЖЬ КАК ЗначениеЛожь
			|			ИЗ
			|				(ВЫБРАТЬ ПЕРВЫЕ 2
			|					ИСТИНА КАК ЗначениеИстина
			|				ИЗ
			|					Справочник.ВидыДокументов КАК ТаблицаВидаДокументов
			|				ГДЕ
			|					НЕ ТаблицаВидаДокументов.ПометкаУдаления
			|					И НЕ ТаблицаВидаДокументов.ЭтоГруппа) КАК ВыбранныеОбъекты
			|			ИМЕЮЩИЕ
			|				КОЛИЧЕСТВО(ВыбранныеОбъекты.ЗначениеИстина) = 1)";
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда 
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ВидДокумента = Выборка.Ссылка;
		КонецЕсли;	
	КонецЕсли;	
		
	Возврат ВидДокумента;
	
КонецФункции	

// Возвращает способ доставки по умолчанию
Функция ПолучитьСпособДоставкиПоУмолчанию(Тип) Экспорт 
	
	СпособДоставки = Справочники.СпособыДоставки.ПустаяСсылка();
	
	Если Тип = "СпособПолучения" Тогда 
		СпособДоставки = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "СпособПолучения");
	ИначеЕсли Тип = "СпособОтправки" Тогда 
		СпособДоставки = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "СпособОтправки");
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(СпособДоставки) Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СпособыДоставки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СпособыДоставки КАК СпособыДоставки
		|ГДЕ
		|	(НЕ СпособыДоставки.ПометкаУдаления)
		|	И ЛОЖЬ В
		|			(ВЫБРАТЬ
		|				ЛОЖЬ КАК ЗначениеЛожь
		|			ИЗ
		|				(ВЫБРАТЬ ПЕРВЫЕ 2
		|					ИСТИНА КАК ЗначениеИстина
		|				ИЗ
		|					Справочник.СпособыДоставки КАК СпособыДоставки
		|				ГДЕ
		|					(НЕ СпособыДоставки.ПометкаУдаления)
		|				) КАК ВыбранныеОбъекты
		|			ИМЕЮЩИЕ
		|				КОЛИЧЕСТВО(ВыбранныеОбъекты.ЗначениеИстина) = 1)";
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда 
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			СпособДоставки = Выборка.Ссылка;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат СпособДоставки;
	
КонецФункции	

Функция ПолучитьВалютуПоУмолчанию() Экспорт 
	
	Валюта = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "Валюта");
	Если ЗначениеЗаполнено(Валюта) Тогда 
		Возврат Валюта;
	КонецЕсли;
	
	Валюта = Константы.ОсновнаяВалюта.Получить();
	Возврат Валюта;
	
КонецФункции	

// Возвращает соответствие состояний документов
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия - Если параметр передан, будут возвращены только состояния,
// которые могут быть установлены действием такого типа, как переданное действие.
//
// Возвращаемое значение:
//  Соответствие - соответствие состояний и типов действий/типов состояний
Функция ПолучитьСоответствиеСостояний(Действие = Неопределено) Экспорт  
	
	Соответствие = Новый Соответствие;
	
	Если ЗначениеЗаполнено(Действие) Тогда
		ТипДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "ВидДействия.Тип");

		Если ТипДействия = Перечисления.ТипыДействий.Согласование Тогда
			Соответствие.Вставить(Перечисления.СостоянияДокументов.НаСогласовании, Действие);
			Соответствие.Вставить(Перечисления.СостоянияДокументов.НеСогласован, Действие);
			Соответствие.Вставить(Перечисления.СостоянияДокументов.Согласован, Действие);

		ИначеЕсли ТипДействия = Перечисления.ТипыДействий.Подписание Тогда
			Соответствие.Вставить(Перечисления.СостоянияДокументов.НаПодписании, Действие);
			Соответствие.Вставить(Перечисления.СостоянияДокументов.Отклонен, Действие);
			Соответствие.Вставить(Перечисления.СостоянияДокументов.Подписан, Действие);

		ИначеЕсли ТипДействия = Перечисления.ТипыДействий.Утверждение Тогда
			Соответствие.Вставить(Перечисления.СостоянияДокументов.НаУтверждении, Действие);
			Соответствие.Вставить(Перечисления.СостоянияДокументов.НеУтвержден, Действие);
			Соответствие.Вставить(Перечисления.СостоянияДокументов.Утвержден, Действие);

		ИначеЕсли ТипДействия = Перечисления.ТипыДействий.Регистрация Тогда
			Соответствие.Вставить(Перечисления.СостоянияДокументов.Проект, Действие);
			Соответствие.Вставить(Перечисления.СостоянияДокументов.НаРегистрации, Действие);
			Соответствие.Вставить(Перечисления.СостоянияДокументов.Зарегистрирован, Действие);
			Соответствие.Вставить(Перечисления.СостоянияДокументов.НеЗарегистрирован, Действие);

		ИначеЕсли ТипДействия = Перечисления.ТипыДействий.Исполнение Тогда
			Соответствие.Вставить(Перечисления.СостоянияДокументов.НаРассмотрении, Действие);
			Соответствие.Вставить(Перечисления.СостоянияДокументов.Рассмотрен, Действие);
			Соответствие.Вставить(Перечисления.СостоянияДокументов.НаИсполнении, Действие);
			Соответствие.Вставить(Перечисления.СостоянияДокументов.Исполнен, Действие);

		ИначеЕсли ТипДействия = Перечисления.ТипыДействий.Ознакомление Тогда
			Соответствие.Вставить(Перечисления.СостоянияДокументов.НаОзнакомлении, Действие);
			Соответствие.Вставить(Перечисления.СостоянияДокументов.ОзнакомлениеЗавершено, Действие);
		КонецЕсли;

	Иначе

		Соответствие.Вставить(Перечисления.СостоянияДокументов.НаСогласовании,
			"СостояниеСогласование");
		Соответствие.Вставить(Перечисления.СостоянияДокументов.НеСогласован,
			"СостояниеСогласование");
		Соответствие.Вставить(Перечисления.СостоянияДокументов.Согласован,
			"СостояниеСогласование");

		Соответствие.Вставить(Перечисления.СостоянияДокументов.НаУтверждении,
			"СостояниеУтверждение");
		Соответствие.Вставить(Перечисления.СостоянияДокументов.НеУтвержден,
			"СостояниеУтверждение");
		Соответствие.Вставить(Перечисления.СостоянияДокументов.Утвержден,
			"СостояниеУтверждение");

		Соответствие.Вставить(Перечисления.СостоянияДокументов.НаПодписании,
			"СостояниеПодписание");
		Соответствие.Вставить(Перечисления.СостоянияДокументов.Отклонен,
			"СостояниеПодписание");
		Соответствие.Вставить(Перечисления.СостоянияДокументов.Подписан,
			"СостояниеПодписание");

		Соответствие.Вставить(Перечисления.СостоянияДокументов.Проект,
			"СостояниеРегистрация");
		Соответствие.Вставить(Перечисления.СостоянияДокументов.НаРегистрации,
			"СостояниеРегистрация");
		Соответствие.Вставить(Перечисления.СостоянияДокументов.Зарегистрирован,
			"СостояниеРегистрация");
		Соответствие.Вставить(Перечисления.СостоянияДокументов.НеЗарегистрирован,
			"СостояниеРегистрация");

		Соответствие.Вставить(Перечисления.СостоянияДокументов.НаРассмотрении,
			"СостояниеИсполнение");
		Соответствие.Вставить(Перечисления.СостоянияДокументов.Рассмотрен,
			"СостояниеИсполнение");
		Соответствие.Вставить(Перечисления.СостоянияДокументов.НаИсполнении,
			"СостояниеИсполнение");
		Соответствие.Вставить(Перечисления.СостоянияДокументов.Исполнен,
			"СостояниеИсполнение");

		Соответствие.Вставить(Перечисления.СостоянияДокументов.НаОзнакомлении,
			"СостояниеОзнакомление");
		Соответствие.Вставить(Перечисления.СостоянияДокументов.ОзнакомлениеЗавершено,
			"СостояниеОзнакомление");
			
	КонецЕсли;
	
	Возврат Соответствие;
	
КонецФункции	

// Получает актуальные состояния документа
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица состояний.
//
Функция ПолучитьВсеСостоянияДокумента(Документ) Экспорт 
	
	ТаблицаСостояний = Новый ТаблицаЗначений;
	ТаблицаСостояний.Колонки.Добавить("Состояние");
	ТаблицаСостояний.Колонки.Добавить("Действие");
	ТаблицаСостояний.Колонки.Добавить("Установил");
	ТаблицаСостояний.Колонки.Добавить("ДатаУстановки");
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат ТаблицаСостояний;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТекущиеСостоянияДокументов.Состояние КАК Состояние,
		|	ТекущиеСостоянияДокументов.Установил КАК Установил,
		|	ТекущиеСостоянияДокументов.ДатаУстановки КАК ДатаУстановки,
		|	ТекущиеСостоянияДокументов.Действие КАК Действие,
		|	ТекущиеСостоянияДокументов.Документ.ВидДокумента КАК ВидДокумента,
		|	ТекущиеСостоянияДокументов.Действие.ВидДействия КАК ВидДействия
		|ПОМЕСТИТЬ ТекущиеСостояния
		|ИЗ
		|	РегистрСведений.ТекущиеСостоянияДокументов КАК ТекущиеСостоянияДокументов
		|ГДЕ
		|	ТекущиеСостоянияДокументов.Документ = &Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТекущиеСостояния.ВидДокумента КАК ВидДокумента,
		|	ТекущиеСостояния.ВидДействия КАК ВидДействия,
		|	ТекущиеСостояния.ДатаУстановки КАК ДатаУстановки,
		|	ВидыДействийНастройки.НомерСтроки КАК ПорядковыйНомер
		|ПОМЕСТИТЬ ПорядковыеНомера
		|ИЗ
		|	Справочник.НастройкиОбработкиВидовОбъектов КАК НастройкиОбработкиВидовОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТекущиеСостояния КАК ТекущиеСостояния
		|		ПО (НастройкиОбработкиВидовОбъектов.ВидОбъекта = ТекущиеСостояния.ВидДокумента
		|		И НастройкиОбработкиВидовОбъектов.ПометкаУдаления = ЛОЖЬ
		|		И НастройкиОбработкиВидовОбъектов.ДействуетС <= ТекущиеСостояния.ДатаУстановки
		|		И (НастройкиОбработкиВидовОбъектов.ДействуетПо >= ТекущиеСостояния.ДатаУстановки
		|		ИЛИ НастройкиОбработкиВидовОбъектов.ДействуетПо = ДАТАВРЕМЯ(1, 1, 1)))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиОбработкиВидовОбъектов.ВидыДействий КАК ВидыДействийНастройки
		|		ПО (ВидыДействийНастройки.Ссылка = НастройкиОбработкиВидовОбъектов.Ссылка
		|		И ТекущиеСостояния.ВидДействия = ВидыДействийНастройки.ВидДействия)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТекущиеСостояния.Состояние КАК Состояние,
		|	ТекущиеСостояния.Установил КАК Установил,
		|	ТекущиеСостояния.ДатаУстановки КАК ДатаУстановки,
		|	ТекущиеСостояния.Действие КАК Действие,
		|	ЕСТЬNULL(ПорядковыеНомера.ПорядковыйНомер, 0) КАК ПорядковыйНомер
		|ИЗ
		|	ТекущиеСостояния КАК ТекущиеСостояния
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядковыеНомера КАК ПорядковыеНомера
		|		ПО ТекущиеСостояния.ВидДокумента = ПорядковыеНомера.ВидДокумента
		|		И ТекущиеСостояния.ВидДействия = ПорядковыеНомера.ВидДействия
		|		И ТекущиеСостояния.ДатаУстановки = ПорядковыеНомера.ДатаУстановки
		|УПОРЯДОЧИТЬ ПО
		|	ПорядковыеНомера.ПорядковыйНомер,
		|	ТекущиеСостояния.ДатаУстановки";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат ТаблицаСостояний;
	КонецЕсли;	
	
	Возврат Результат.Выгрузить();
	
КонецФункции

Функция ПолучитьСтроковоеПредставлениеСостояний(Документ) Экспорт
	
	СтроковоеПредставление = "";	
	
	КэшДокументыПредприятияФормаЭлемента =
		КэшиНаВремяВызоваПовтИсп.КэшДокументыПредприятияФормаЭлемента();
	Если КэшДокументыПредприятияФормаЭлемента.Инициализирован
		И КэшДокументыПредприятияФормаЭлемента.КэшДокумента.Ссылка = Документ Тогда
		ВсеСостояния = КэшДокументыПредприятияФормаЭлемента.ВсеСостоянияДокумента;
		ВестиУчетСторон = КэшДокументыПредприятияФормаЭлемента.КэшВидаДокумента.ВестиУчетСторон;
	Иначе
		ВсеСостояния = ПолучитьВсеСостоянияДокумента(Документ);
		ВестиУчетСторон = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ВидДокумента.ВестиУчетСторон");
	КонецЕсли;
	МассивСостояний = ВсеСостояния.ВыгрузитьКолонку("Состояние");
	Действия = ВсеСостояния.ВыгрузитьКолонку("Действие");
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(Действия, Неопределено);
	ВидыДействий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Действия, "ВидДействия");
	
	Если МассивСостояний.Количество() = 1 И МассивСостояний[0] = Перечисления.СостоянияДокументов.Проект Тогда 
		Возврат Строка(МассивСостояний[0]); 
	КонецЕсли;	
	ПодписаниеСторонами = "";
	Для Каждого СтрокаСостояния Из ВсеСостояния Цикл
		Если СтрокаСостояния.Состояние = Перечисления.СостоянияДокументов.Проект Тогда 
			Продолжить;
		КонецЕсли;	
		
		ВидДействия = ВидыДействий[СтрокаСостояния.Действие];
		
		СтрСостояние = Строка(СтрокаСостояния.Состояние);
		Если СтрокаСостояния.Состояние = Перечисления.СостоянияДокументов.ОзнакомлениеЗавершено Тогда
			СтрСостояние = Перечисления.СостоянияДокументов.ПредставлениеОзнакомлен(); 
		КонецЕсли;
		
		Если ВидДействия <> Неопределено Тогда
			СтроковоеПредставление = СтрШаблон("%1, %2: %3", СтроковоеПредставление,
				Строка(ВидДействия.ВидДействия),
				СтрСостояние);
		
		// Подписание сторонами фиксируется отдельно, без действия. Тут требуется особая логика определения
		ИначеЕсли ВестиУчетСторон
			И (СтрокаСостояния.Состояние = Перечисления.СостоянияДокументов.Подписан
				Или СтрокаСостояния.Состояние = Перечисления.СостоянияДокументов.НаПодписании) Тогда 
			ПодписаниеСторонами = СтрШаблон("%1: %2",
				НСтр("ru = 'Подписание сторонами'"),
				СтрСостояние);
				
		Иначе
			СтроковоеПредставление = СтрШаблон("%1, %2", СтроковоеПредставление,
				СтрСостояние);
		КонецЕсли;
			
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(ПодписаниеСторонами) Тогда 
		СтроковоеПредставление = СтрШаблон("%1, %2", СтроковоеПредставление,
			ПодписаниеСторонами);
	КонецЕсли;
	Если Не ПустаяСтрока(СтроковоеПредставление) Тогда 
		СтроковоеПредставление = Сред(СтроковоеПредставление, 3);
	КонецЕсли;	
	
	Возврат СтроковоеПредставление;
	
КонецФункции	

// Получает актуальное состояние документа
// 
// Параметры:
//  Документ - СправочникСсылка.ДокументыПредприятия
//  ВозможныеСостояния - Строка, Массив из ПеречислениеСсылка.СостоянияДокументов - Варианты
//  	ожидаемого состояния. Зависит от состояния, которое нужно установить, см. метод
//  	Перечисления.СостоянияДокументов.ВсеВозможныеСостоянияЭтогоТипа()
//  Действие - ОпределяемыйТип.Действия
//  ТаблицаСостояний - см. Делопроизводство.ПолучитьВсеСостоянияДокумента
// 
// Возвращаемое значение:
//  Структура - структура состояния документа:
// * Состояние - ПеречислениеСсылка.СостоянияДокументов
// * ДатаУстановки - Дата
// * Установил - СправочникСсылка.Сотрудники, Неопределено
// * Действие - ОпределяемыйТип.Действия, Неопределено
//
Функция ПолучитьСтруктуруСостоянияДокумента(Документ, ВозможныеСостояния, Действие = Неопределено,
		ТаблицаСостояний = Неопределено) Экспорт
	
	СтруктураСостояния = Новый Структура;
	СтруктураСостояния.Вставить("Состояние", Перечисления.СостоянияДокументов.ПустаяСсылка());
	СтруктураСостояния.Вставить("ДатаУстановки", '00010101');
	СтруктураСостояния.Вставить("Установил", Неопределено);
	СтруктураСостояния.Вставить("Действие", Действие);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСостоянияДокументов") Тогда 
		Возврат СтруктураСостояния;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат СтруктураСостояния;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СоответствиеСостояний = ПолучитьСоответствиеСостояний(Действие);
	Если ТаблицаСостояний = Неопределено Тогда
		КэшДокументыПредприятияФормаЭлемента =
			КэшиНаВремяВызоваПовтИсп.КэшДокументыПредприятияФормаЭлемента();
		Если КэшДокументыПредприятияФормаЭлемента.Инициализирован
			И КэшДокументыПредприятияФормаЭлемента.КэшДокумента.Ссылка = Документ Тогда
			ТаблицаСостояний = КэшДокументыПредприятияФормаЭлемента.ВсеСостоянияДокумента;
		Иначе
			ТаблицаСостояний = ПолучитьВсеСостоянияДокумента(Документ);
		КонецЕсли;
	КонецЕсли;

	ТаблицаСостояний.Сортировать("ДатаУстановки Убыв");

	Если ТипЗнч(ВозможныеСостояния) = Тип("Массив") Тогда
		ВозможныеСостоянияМассив = ВозможныеСостояния;
	Иначе
		ВозможныеСостоянияМассив = Новый Массив;
		ВозможныеСостоянияМассив.Добавить(ВозможныеСостояния);
	КонецЕсли;

	Для Каждого Строка Из ТаблицаСостояний Цикл
		Если ЗначениеЗаполнено(Действие) И Строка.Действие = Действие Тогда
            СостояниеДляПроверки = Строка.Состояние;
        Иначе  
            СостояниеДляПроверки = СоответствиеСостояний.Получить(Строка.Состояние);
        КонецЕсли;

        Если ВозможныеСостоянияМассив.Найти(СостояниеДляПроверки) <> Неопределено Тогда
            ЗаполнитьЗначенияСвойств(СтруктураСостояния, Строка);
			Возврат СтруктураСостояния;
		КонецЕсли;	
	КонецЦикла;

	Возврат СтруктураСостояния;
	
КонецФункции

// Получает полное актуальное состояние документа
Функция ПолучитьСостояниеДокумента(Документ, ВозможныеСостояния, Действие = Неопределено) Экспорт
	
	СтруктураСостояния = ПолучитьСтруктуруСостоянияДокумента(Документ, ВозможныеСостояния, Действие);
	
	Возврат СтруктураСостояния.Состояние;
	
КонецФункции

// Получает полное актуальное состояние документа
Функция ПолучитьПоследнееСостояниеДокумента(Документ) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСостоянияДокументов") Тогда 
		Возврат Перечисления.СостоянияДокументов.ПустаяСсылка();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат Перечисления.СостоянияДокументов.ПустаяСсылка();
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостоянияДокументовСрезПоследних.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.ИсторияСостоянийДокументов.СрезПоследних(, Документ = &Документ) КАК СостоянияДокументовСрезПоследних";
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Перечисления.СостоянияДокументов.ПустаяСсылка();
	КонецЕсли;	
		
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Состояние; 
	
КонецФункции

// Устанавливает состояние документа, а также обновляет историю изменения состояний
// 
// Параметры:
//  Документ - СправочникСсылка.ДокументыПредприятия - Ссылка на документ
//  Период - Неопределено, Дата - дата изменения состояния
//  Состояние - ПеречислениеСсылка.СостоянияДокументов - устанавливаемое состояние
//  Установил - Неопределено, БизнесПроцессСсылка.Исполнение, СправочникСсылка.Сотрудники - Сотрудник или процесс, который меняет состояние
//  Действие - ОпределяемыйТип.Действия - Ссылка на Действие, в рамках которого меняется состояние
//  ПривилегированныйРежим - Булево - Привилегированный режим
//
Процедура ЗаписатьСостояниеДокумента(Документ, Знач Период = Неопределено, Знач Состояние,
	Знач Установил = Неопределено, Знач Действие = Неопределено, Знач ПривилегированныйРежим = Ложь) Экспорт
	
	Если ПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСостоянияДокументов") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Период) Тогда 
		Период = ТекущаяДатаСеанса();
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Установил) Тогда 
		Установил = Сотрудники.ОсновнойСотрудник();
	КонецЕсли;
	
	ТекущееСостояние = ПолучитьСостояниеДокумента(Документ,
		Перечисления.СостоянияДокументов.ВсеВозможныеСостоянияЭтогоТипа(Состояние),
		Действие);
	
	Если ТекущееСостояние = Состояние Тогда
		Возврат;
	КонецЕсли;
	
	// Особая обработка состояний рассмотрения и исполнения:
	// Они могут устанавливаться в рамках одного действия и затирать друг друга не должны
	СостоянияИсполнения = Перечисления.СостоянияДокументов.СостоянияИсполненияБезРассмотрения();
	СостоянияРассмотрения = Перечисления.СостоянияДокументов.СостоянияРассмотрения();
	ПерезаписьСостояния = Истина;
	Если СостоянияИсполнения.Найти(Состояние) <> Неопределено
		И СостоянияРассмотрения.Найти(ТекущееСостояние) <> Неопределено Тогда
		ПерезаписьСостояния = Ложь;
	ИначеЕсли СостоянияИсполнения.Найти(ТекущееСостояние) <> Неопределено
		И СостоянияРассмотрения.Найти(Состояние) <> Неопределено Тогда
		ПерезаписьСостояния = Ложь;
	КонецЕсли;
	
	
	// история
	МенеджерЗаписи = РегистрыСведений.ИсторияСостоянийДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = Период;
	МенеджерЗаписи.Документ = Документ;
	МенеджерЗаписи.Состояние = Состояние;
	МенеджерЗаписи.Установил = Установил;
	МенеджерЗаписи.Записать();
	
	// Текущие состояния документов
	МенеджерЗаписи = РегистрыСведений.ТекущиеСостоянияДокументов.СоздатьМенеджерЗаписи();
	Если ПерезаписьСостояния Тогда
		МенеджерЗаписи.Документ = Документ;
		МенеджерЗаписи.Состояние = ТекущееСостояние;
		МенеджерЗаписи.Действие = Действие;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли;
	КонецЕсли;
	
	МенеджерЗаписи.Документ = Документ;
	МенеджерЗаписи.Состояние = Состояние;
	МенеджерЗаписи.Установил = Установил;
	МенеджерЗаписи.Действие = Действие;
	МенеджерЗаписи.ДатаУстановки = Период;
	МенеджерЗаписи.Записать();
	
	// представление 
	ПредставлениеСостояния = ПолучитьСтроковоеПредставлениеСостояний(Документ);
	ЗаписатьДанныеДокумента(Документ, "ПредставлениеСостояния", ПредставлениеСостояния);
		
КонецПроцедуры	

// Очищает состояние документа
Процедура ОчиститьСостояниеДокумента(Документ, НачальноеСостояние) Экспорт

	МенеджерЗаписи = РегистрыСведений.ТекущиеСостоянияДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Документ = Документ;
	МенеджерЗаписи.Состояние = НачальноеСостояние;
	МенеджерЗаписи.Удалить();
	
	
	ЗначенияПоРеквизитам = Новый Соответствие();
	
	// признак исполнения 
	Если НачальноеСостояние = Перечисления.СостоянияДокументов.Исполнен Тогда 
		ЗначенияПоРеквизитам.Вставить("Исполнен", Ложь);
	КонецЕсли;
	
	// представление
	ПредставлениеСостояния = ПолучитьСтроковоеПредставлениеСостояний(Документ);
	ЗначенияПоРеквизитам.Вставить("ПредставлениеСостояния", ПредставлениеСостояния);
	ЗаписатьДанныеДокумента(Документ, ЗначенияПоРеквизитам);
	
КонецПроцедуры

// Возвращает состояния документа, установленные объектом Установил
//
// Возвращаемое значение:
//  Массив - массив объектов типа ПеречислениеСсылка.СостоянияДокументов, 
//			 либо неопределено в случае отсутствия
// 
Функция ПолучитьСостоянияДокумента(Документ, Установил) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСостоянияДокументов") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТекущиеСостоянияДокументов.Состояние.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.ТекущиеСостоянияДокументов КАК ТекущиеСостоянияДокументов
		|ГДЕ
		|	ТекущиеСостоянияДокументов.Документ = &Документ
		|	И ТекущиеСостоянияДокументов.Установил = &Установил";

	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Установил", Установил);

	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
КонецФункции

// Удаляет все состояния документа, установленные объектом Установил
//
Процедура УдалитьСостояниеДокумента(Документ, Установил) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСостоянияДокументов") Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = РегистрыСведений.ИсторияСостоянийДокументов.СоздатьНаборЗаписей();
	Набор.Отбор.Документ.Установить(Документ);
	Набор.Прочитать();
	ЗаписиКУдалению = Новый Массив;
	Для каждого Запись Из Набор Цикл
		Если Запись.Установил = Установил Тогда
			ЗаписиКУдалению.Добавить(Запись);
		КонецЕсли;
	КонецЦикла;
	Для каждого Запись Из ЗаписиКУдалению Цикл
		Набор.Удалить(Запись);
	КонецЦикла;
	Набор.Записать(Истина);
	
	// состояние
	Набор = РегистрыСведений.ТекущиеСостоянияДокументов.СоздатьНаборЗаписей();
	Набор.Отбор.Документ.Установить(Документ);
	Набор.Прочитать();
	ЗаписиКУдалению = Новый Массив;
	Для каждого Запись Из Набор Цикл
		Если Запись.Установил = Установил Тогда
			ЗаписиКУдалению.Добавить(Запись);
		КонецЕсли;
	КонецЦикла;
	Для каждого Запись Из ЗаписиКУдалению Цикл
		Набор.Удалить(Запись);
	КонецЦикла;
	Набор.Записать(Истина);
	
	
	ЗначенияПоРеквизитам = Новый Соответствие();
	
	// признак исполнения 
	СостояниеИсполнение = ПолучитьСостояниеДокумента(Документ, "СостояниеИсполнение");
	Если СостояниеИсполнение = Перечисления.СостоянияДокументов.Исполнен Тогда 
		ЗначенияПоРеквизитам.Вставить("Исполнен", Истина);
	Иначе
		ЗначенияПоРеквизитам.Вставить("Исполнен", Ложь);
	КонецЕсли;
	
	// представление
	ПредставлениеСостояния = ПолучитьСтроковоеПредставлениеСостояний(Документ);
	ЗначенияПоРеквизитам.Вставить("ПредставлениеСостояния", ПредставлениеСостояния);
	ЗаписатьДанныеДокумента(Документ, ЗначенияПоРеквизитам);
	
КонецПроцедуры

// Удаляет состояния документа, установленные по переданному действию.
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия - Действие, по которому нужно удалить состояния
//
Процедура УдалитьСостоянияДокументаПоДействию(Действие) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСостоянияДокументов") Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// состояние
	Набор = РегистрыСведений.ТекущиеСостоянияДокументов.СоздатьНаборЗаписей();
	Набор.Отбор.Действие.Установить(Действие);
	Набор.Прочитать();
	ЗаписиКУдалению = Новый Массив;
	Для каждого Запись Из Набор Цикл
		ЗаписиКУдалению.Добавить(Запись);
	КонецЦикла;
	Для каждого Запись Из ЗаписиКУдалению Цикл
		Набор.Удалить(Запись);
	КонецЦикла;
	Набор.Записать(Истина);
	
	
	ЗначенияПоРеквизитам = Новый Соответствие();
	
	// признак исполнения
	Документ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет");
	СостояниеИсполнение = ПолучитьСостояниеДокумента(Документ, "СостояниеИсполнение");
	Если СостояниеИсполнение = Перечисления.СостоянияДокументов.Исполнен Тогда 
		ЗначенияПоРеквизитам.Вставить("Исполнен", Истина);
	Иначе
		ЗначенияПоРеквизитам.Вставить("Исполнен", Ложь);
	КонецЕсли;
	
	// представление
	ПредставлениеСостояния = ПолучитьСтроковоеПредставлениеСостояний(Документ);
	ЗначенияПоРеквизитам.Вставить("ПредставлениеСостояния", ПредставлениеСостояния);
	ЗаписатьДанныеДокумента(Документ, ЗначенияПоРеквизитам);
	
КонецПроцедуры

// Возвращает признак использования номенклатуры дел
Функция ИспользоватьНоменклатуруДел() Экспорт 
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруДел");
	
КонецФункции

// Проверяет уникальность регистрационного/временного номера
//
// Параметры:
//   Объект - СправочникСсылка.ДокументыПредприятия, Структура - содержит ссылку на документ, номер и период проверки.
//   ЭтоВременныйНомер -Булево - признак проверки временного номера.
//
// Возвращаемое значение:
//   Булево - Истина, если номер уникален.
//
Функция НомерУникален(Объект, ЭтоВременныйНомер = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Нумератор = Нумерация.ПолучитьНумераторДокумента(Объект, Ложь);
	Если Не ЗначениеЗаполнено(Нумератор) Тогда // документ без номера
		Номер = ?(ЭтоВременныйНомер, Объект.ВременныйНомер, Объект.РегистрационныйНомер);
		Если НРег(Номер) = НСтр("ru = 'б\н'") Или НРег(Номер) = НСтр("ru = 'б/н'") Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Нумератор) Тогда // автонумерация
		РеквизитыНумератора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Нумератор,
			"Периодичность,НезависимаяНумерацияПоСвязанномуДокументу,ТипСвязи,
			|НезависимаяНумерацияПоОрганизациям,НезависимаяНумерацияПоПроекту,
			|НезависимаяНумерацияПоВопросуДеятельности,НезависимаяНумерацияПоПодразделению,
			|НезависимаяНумерацияПоТематике,НезависимаяНумерацияПоГрифуДоступа");
	Иначе 									// ручная нумерация
		РеквизитыНумератора = Новый Структура;
		РеквизитыНумератора.Вставить("Периодичность", Перечисления.ПериодичностьНумераторов.Год);
		РеквизитыНумератора.Вставить("НезависимаяНумерацияПоСвязанномуДокументу", Ложь);
		РеквизитыНумератора.Вставить("ТипСвязи", Справочники.ТипыСвязей.ПустаяСсылка());
		РеквизитыНумератора.Вставить("НезависимаяНумерацияПоОрганизациям", Истина);
		РеквизитыНумератора.Вставить("НезависимаяНумерацияПоПроекту", Ложь);
		РеквизитыНумератора.Вставить("НезависимаяНумерацияПоВопросуДеятельности", Ложь);
		РеквизитыНумератора.Вставить("НезависимаяНумерацияПоПодразделению", Ложь);
		РеквизитыНумератора.Вставить("НезависимаяНумерацияПоТематике", Ложь);
		РеквизитыНумератора.Вставить("НезависимаяНумерацияПоГрифуДоступа", Ложь);
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Ссылка ИЗ Справочник.ДокументыПредприятия КАК Справочник ";
	
	Если РеквизитыНумератора.НезависимаяНумерацияПоСвязанномуДокументу Тогда
		Запрос.Текст = Запрос.Текст + 
		" ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиОбъектов КАК СвязиОбъектов
		|	ПО СвязиОбъектов.Объект = Справочник.Ссылка И СвязиОбъектов.ТипСвязи = &ТипСвязи ";
		
		Запрос.УстановитьПараметр("ТипСвязи", РеквизитыНумератора.ТипСвязи);
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + 
	" ГДЕ
	|	%1 = &Номер
	|	И %2 МЕЖДУ &НачалоПериодаНумерации И &КонецПериодаНумерации
	|	И Ссылка <> &Ссылка 
	|	И (ВидДокумента = &ВидДокумента) ";
	Запрос.УстановитьПараметр("ВидДокумента", Объект.ВидДокумента);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") 
		И РеквизитыНумератора.НезависимаяНумерацияПоОрганизациям Тогда
		Запрос.Текст = Запрос.Текст + " И (Организация = &Организация) ";
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") И РеквизитыНумератора.НезависимаяНумерацияПоПроекту Тогда
		Запрос.Текст = Запрос.Текст + " И (Проект = &Проект) ";
		Запрос.УстановитьПараметр("Проект", Объект.Проект);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности") 
		И РеквизитыНумератора.НезависимаяНумерацияПоВопросуДеятельности Тогда
		Запрос.Текст = Запрос.Текст + " И (ВопросДеятельности = &ВопросДеятельности) ";
		Запрос.УстановитьПараметр("ВопросДеятельности", Объект.ВопросДеятельности);
	КонецЕсли;
	
	Если РеквизитыНумератора.НезависимаяНумерацияПоПодразделению Тогда
		Запрос.Текст = Запрос.Текст + " И (Подразделение = &Подразделение) ";
		Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	КонецЕсли;
	
	Если РеквизитыНумератора.НезависимаяНумерацияПоСвязанномуДокументу Тогда
		СвязанныйДокумент = СвязиОбъектов.ПолучитьСвязанныйОбъект(Объект.Ссылка, РеквизитыНумератора.ТипСвязи);
		
		Если ЗначениеЗаполнено(СвязанныйДокумент) Тогда 
			Запрос.Текст = Запрос.Текст + " И (СвязанныйОбъект = &СвязанныйОбъект) ";
			Запрос.УстановитьПараметр("СвязанныйОбъект", СвязанныйДокумент);
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыНумератора.НезависимаяНумерацияПоТематике Тогда
		Запрос.Текст = Запрос.Текст + " И (Тематика = &Тематика) ";
		Запрос.УстановитьПараметр("Тематика", Объект.Тематика);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда
		Запрос.Текст = Запрос.Текст + " И (УзелОбработки = &УзелКОД) ";
		Запрос.УстановитьПараметр("УзелКОД", КОДПовтИсп.ИдентификаторТекущегоУзла());
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа") И РеквизитыНумератора.НезависимаяНумерацияПоГрифуДоступа Тогда
		Запрос.Текст = Запрос.Текст + " И (ГрифДоступа = &ГрифДоступа) ";
		Запрос.УстановитьПараметр("ГрифДоступа", Объект.ГрифДоступа);
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Нумератор) Тогда // ручная нумерация
		Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Объект.Ссылка) Тогда 
			ВестиУчетПоКонтрагентам = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента,
				 "ВестиУчетПоКонтрагентам");
			Если ВестиУчетПоКонтрагентам Тогда 
				Запрос.Текст = Запрос.Текст + " И (Контрагент = &Контрагент) ";
				Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоВременныйНомер Тогда
		Запрос.Текст = СтрШаблон(Запрос.Текст, "ВременныйНомер", "ДатаСоздания");
	Иначе
		Запрос.Текст = СтрШаблон(Запрос.Текст, "РегистрационныйНомер", "ДатаРегистрации");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Номер", ?(ЭтоВременныйНомер, Объект.ВременныйНомер, Объект.РегистрационныйНомер));
	Запрос.УстановитьПараметр("НачалоПериодаНумерации", 
		Нумерация.НачалоПериодаНумерации(РеквизитыНумератора.Периодичность, ?(ЭтоВременныйНомер, Объект.ДатаСоздания, Объект.ДатаРегистрации)));
	Запрос.УстановитьПараметр("КонецПериодаНумерации", 
		Нумерация.КонецПериодаНумерации(РеквизитыНумератора.Периодичность, ?(ЭтоВременныйНомер, Объект.ДатаСоздания, Объект.ДатаРегистрации)));
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции	

// Возвращает персональную настройку текущего пользователя
Функция ПолучитьНастройкуПользователя(КлючНастройки, ИмяНастройки) Экспорт 
	
	Возврат ХранилищеОбщихНастроек.Загрузить(КлючНастройки,
		ИмяНастройки);
	
КонецФункции

Процедура ПолучитьДоступныеИНедоступныеПоСостояниюПоля(ДокументОбъект, 
	ДоступныеПоля, НедоступныеПоля) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВсеСостояния = Новый ТаблицаЗначений;
	ВсеСостояния.Колонки.Добавить("Состояние");
	ВсеСостояния.Колонки.Добавить("Действие");
	ВсеСостояния.Колонки.Добавить("Установил");
	ВсеСостояния.Колонки.Добавить("ДатаУстановки");
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда 
		Если ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(ДокументОбъект.Ссылка) Тогда 
			ВсеСостояния.Добавить().Состояние = Перечисления.СостоянияДокументов.НаРегистрации;
		Иначе
			ВсеСостояния.Добавить().Состояние = Перечисления.СостоянияДокументов.Проект;
		КонецЕсли;	
	Иначе
		ВсеСостояния = ПолучитьВсеСостоянияДокумента(ДокументОбъект.Ссылка);
	КонецЕсли;
	
	РГДоступна = Ложь;
	Если ЗначениеЗаполнено(ДокументОбъект.ВидДокумента) Тогда
		РГДоступна = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ДокументОбъект.ВидДокумента, "РазрешитьРучноеИзменениеСписковДоступа");
	КонецЕсли;
	
	// Удаление состояние Проект, если есть прочие состояния
	Если ВсеСостояния.Количество() > 1 Тогда 
		НайденныйИндекс = ВсеСостояния.Найти(Перечисления.СостоянияДокументов.Проект);
		Если НайденныйИндекс <> Неопределено Тогда 
			ВсеСостояния.Удалить(НайденныйИндекс);
		КонецЕсли;	
	КонецЕсли;
	
	НастройкиСостояний = ПолучитьНастройкиСостояний(ДокументОбъект);
	
	ВыборкаНастройки = ПолучитьВыборкуНастроекДоступности(НастройкиСостояний, ВсеСостояния);
	
	ВсеПоля = ПолучитьИменаПолейИКомандДляНастройкиДоступности();
	
	Пока ВыборкаНастройки.Следующий() Цикл
		
		ДоступностьДа = Новый Массив;
		ДоступностьНет = Новый Массив;
		ДоступностьПусто = Новый Массив;
		
		ВыборкаСостояния = ВыборкаНастройки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСостояния.Следующий() Цикл
			
			Выборка = ВыборкаСостояния.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.Доступность = 1 Тогда  // Да
					Если ДоступностьДа.Найти(Выборка.ИмяПоляКоманды) = Неопределено Тогда 
						ДоступностьДа.Добавить(Выборка.ИмяПоляКоманды);
					КонецЕсли;
					
				ИначеЕсли Выборка.Доступность = 2 Тогда  // Нет
					Если ДоступностьНет.Найти(Выборка.ИмяПоляКоманды) = Неопределено Тогда 
						ДоступностьНет.Добавить(Выборка.ИмяПоляКоманды);
					КонецЕсли;
					
				ИначеЕсли Выборка.Доступность = 0 Тогда  // Пусто
					Если ДоступностьПусто.Найти(Выборка.ИмяПоляКоманды) = Неопределено Тогда 
						ДоступностьПусто.Добавить(Выборка.ИмяПоляКоманды);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого СтрокаПоле Из ВсеПоля Цикл
			Если ДоступностьДа.Найти(СтрокаПоле.ИмяПоляКоманды) = Неопределено
				И ДоступностьНет.Найти(СтрокаПоле.ИмяПоляКоманды) = Неопределено Тогда
				// В данной НДПС нет особых настроек по этому полю
				ДоступностьПусто.Добавить(СтрокаПоле.ИмяПоляКоманды);
			КонецЕсли;
		КонецЦикла;
		
		// Исключение из доступных полей с доступностью Нет
		Для Каждого Поле Из ДоступностьНет Цикл
			Поз = ДоступностьДа.Найти(Поле);
			Если Поз <> Неопределено Тогда 
				ДоступностьДа.Удалить(Поз);
			КонецЕсли;
		КонецЦикла;	
		
		Для Каждого Поле Из ДоступностьДа Цикл
			Если ДоступныеПоля.Найти(Поле) = Неопределено Тогда 
				ДоступныеПоля.Добавить(Поле);
			КонецЕсли;
		КонецЦикла;	
		
		Для Каждого Поле Из ДоступностьНет Цикл
			Если НедоступныеПоля.Найти(Поле) = Неопределено Тогда 
				НедоступныеПоля.Добавить(Поле);
			КонецЕсли;
		КонецЦикла;	
		
		Для Каждого Поле Из ДоступностьПусто Цикл
			Если НедоступныеПоля.Найти(Поле) = Неопределено Тогда 
				НедоступныеПоля.Добавить(Поле);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// Если редактирование РГ не разрешено в виде документа, то таблица РГ всегда недоступна.
	// Если разрешено, то соответствует НДПС.
	Если Не РГДоступна Тогда
		ИмяПоля = "РабочаяГруппа";
		
		Поз = ДоступныеПоля.Найти(ИмяПоля);
		Если Поз <> Неопределено Тогда
			ДоступныеПоля.Удалить(Поз);
		КонецЕсли;
		
		Если НедоступныеПоля.Найти(ИмяПоля) = Неопределено Тогда 
			НедоступныеПоля.Добавить(ИмяПоля);
		КонецЕсли;
	КонецЕсли; 
	
		
	Для Каждого ДоступноеПоле Из ДоступныеПоля Цикл
		Поз = НедоступныеПоля.Найти(ДоступноеПоле);
		Если Поз <> Неопределено Тогда 
			НедоступныеПоля.Удалить(Поз);
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

// Устанавливает доступность полей карточки документа в зависимости от состояния
Процедура УстановитьДоступностьПоСостоянию(Форма, Ссылка, ОбщиеДоступныеПоля = "", ОбщиеНедоступныеПоля = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщиеДоступныеПоля = "";
	ОбщиеНедоступныеПоля = "";
	
	Если РольДоступна("ПолныеПрава") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСостоянияДокументов") Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ПолучитьФункциональнуюОпцию("ОграничиватьДоступностьПолейПоСостоянию") Тогда  
	
		Если ЗначениеЗаполнено(Ссылка) Тогда 
			ДокументОбъект = Ссылка.ПолучитьОбъект();
		Иначе	
			ДокументОбъект = Форма.РеквизитФормывЗначение("Объект");
		КонецЕсли;
		
		ДоступныеПоля = Новый Массив;
		НедоступныеПоля = Новый Массив;
		
		ПолучитьДоступныеИНедоступныеПоСостояниюПоля(ДокументОбъект, ДоступныеПоля, НедоступныеПоля);
		
		ИменаПолейИКомандДляНастройкиДоступности = ПолучитьИменаПолейИКомандДляНастройкиДоступности();	
		
		СтруктураРеквизитов = Новый Структура("Свойства_ИспользоватьДопРеквизиты", Ложь);
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Форма);
		Если СтруктураРеквизитов.Свойства_ИспользоватьДопРеквизиты = Истина Тогда 
			Для каждого ОписаниеСвойства Из Форма.Свойства_ОписаниеДополнительныхРеквизитов Цикл
				Строка = ИменаПолейИКомандДляНастройкиДоступности.Добавить();
				Строка.ИмяПоляКоманды = "Ad." + XMLСтрока(ОписаниеСвойства.Свойство);
				Строка.ИменаПолейНаФорме = ОписаниеСвойства.ИмяРеквизитаЗначение;
				Строка.ИмяГруппыПоляКоманды = "ДопРеквизиты";
			КонецЦикла;
		КонецЕсли;
		
		ОбщиеНедоступныеПоля = Новый Структура;
		ОбщиеДоступныеПоля = Новый Структура;
		Для Каждого НастройкаПоля Из ИменаПолейИКомандДляНастройкиДоступности Цикл
			
			Если НастройкаПоля.ИмяПоляКоманды = "ДопРеквизиты" Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПолей = Новый Структура(НастройкаПоля.ИменаПолейНаФорме);
			Для Каждого Поле Из СтруктураПолей Цикл
				ЭлементФормы = Форма.Элементы.Найти(Поле.Ключ);
				Если ЭлементФормы = Неопределено Тогда 
					
					Если Поле.Ключ = "ОтменяетДокументы" Тогда
						ОбщиеНедоступныеПоля.Вставить(Поле.Ключ);
					КонецЕсли;	
					
					Продолжить;
				КонецЕсли;
				
				Если ДоступныеПоля.Найти(НастройкаПоля.ИмяПоляКоманды) <> Неопределено
					Или ЗначениеЗаполнено(НастройкаПоля.ИмяГруппыПоляКоманды) И ДоступныеПоля.Найти(НастройкаПоля.ИмяГруппыПоляКоманды) <> Неопределено Тогда
					ОбщиеДоступныеПоля.Вставить(Поле.Ключ);
					Доступность = Истина;
				Иначе
					ОбщиеНедоступныеПоля.Вставить(Поле.Ключ);
					Доступность = Ложь;
				КонецЕсли;
				
				Если ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы") Тогда 
					ЭлементФормы.Доступность = Доступность;
				Иначе
					ЭлементФормы.ТолькоПросмотр = Не Доступность;
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЦикла;
		
		Если ДоступныеПоля.Найти("ДобавлениеОригиналов") <> Неопределено Тогда 
			ОбщиеДоступныеПоля.Вставить("СоздатьФайлОригинал");
		КонецЕсли;
		
		Если ДоступныеПоля.Найти("ДобавлениеФайлов") <> Неопределено Тогда 
			ОбщиеДоступныеПоля.Вставить("СоздатьФайлОбычный");
		КонецЕсли;

		Если ОбщиеНедоступныеПоля.Свойство("Редактировать") = Истина Тогда 
			ОбщиеНедоступныеПоля.Вставить("МенятьРолиФайловДрагДропом");
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов") Тогда 
			// поле Оригинал
			ДоступностьПоляОригинал = ОбщиеДоступныеПоля.Свойство("СоздатьФайлОригинал") И ОбщиеДоступныеПоля.Свойство("СоздатьФайлОбычный");
			
			Если Форма.Элементы.Найти("Оригинал") <> Неопределено Тогда 
				Форма.Элементы["Оригинал"].ТолькоПросмотр = Не ДоступностьПоляОригинал;
			КонецЕсли;	
			
			Если Форма.Элементы.Найти("ОригиналСоздание") <> Неопределено Тогда 
				Форма.Элементы["ОригиналСоздание"].ТолькоПросмотр = Не ДоступностьПоляОригинал;
			КонецЕсли;
		КонецЕсли;	
		
		// список файлов
		Если ОбщиеДоступныеПоля.Количество() = 0 И ОбщиеНедоступныеПоля.Количество() = 0 Тогда 
			
			Если Форма.Элементы.Найти("Файлы") <> Неопределено Тогда 
				Форма.Элементы["Файлы"].ИзменятьСоставСтрок = Истина;
			КонецЕсли;	
			
			Если Форма.Элементы.Найти("ФайлыСоздание") <> Неопределено Тогда 
				Форма.Элементы["ФайлыСоздание"].ИзменятьСоставСтрок = Истина;
			КонецЕсли;	
				
		КонецЕсли;
		
	КонецЕсли;
	
	// доступность поля состояние зависит от настройки
	Если Форма.Элементы.Найти("СостояниеТекст") <> Неопределено Тогда 
		
		Если (Не Константы.РазрешитьРучноеИзменениеСостоянияДокументов.Получить() 
			И ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи"))
			Или (ДоступныеПоля <> Неопределено И ДоступныеПоля.Найти("Состояние") = Неопределено)
			Или (НедоступныеПоля <> Неопределено И НедоступныеПоля.Найти("Состояние") <> Неопределено) Тогда 
			Форма.Элементы.СостояниеТекст.ТолькоПросмотр = Истина;
			Форма.ЗапретитьРучноеИзменениеСостоянияДокументов = Истина;
		КонецЕсли;
		
		Если Форма.Элементы.СостояниеТекст.ТолькоПросмотр Тогда 
			Форма.Элементы.СостояниеТекст.КнопкаВыбора = Ложь;
			Форма.Элементы.СостояниеТекст.КнопкаОткрытия = Истина;
		Иначе
			Форма.Элементы.СостояниеТекст.КнопкаВыбора = Истина;
			Форма.Элементы.СостояниеТекст.КнопкаОткрытия = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// Доступность самого поля ДелаетНедействующимиСтрока зависит от настройки.
	Если Форма.Элементы.Найти("ДелаетНедействующимиСтрока") <> Неопределено Тогда 
		
		Если (ДоступныеПоля <> Неопределено И ДоступныеПоля.Найти("ОтменяетДокументы") = Неопределено)
			Или (НедоступныеПоля <> Неопределено И НедоступныеПоля.Найти("ОтменяетДокументы") <> Неопределено) Тогда 
			
			Попытка
				Форма.ЗапретитьМенятьСписокОтменяемыхДокументов = Истина;
			Исключение
			КонецПопытки;
			
		Иначе	
			
			Попытка
				Форма.ЗапретитьМенятьСписокОтменяемыхДокументов = Ложь;
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив настроек доступности для переданного документа и пользователя  
Функция ПолучитьНастройкиСостояний(ДокументОбъект, Знач Пользователь = Неопределено) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Пользователь = Неопределено Тогда 
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;	
	
	Настройки = Новый Массив;
	
	// Настройки для всех видов
	ТипДокумента = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	
	// Настройки для переданного вида документа
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиДоступностиДляВидовДокументов.НастройкаДоступностиПоСостоянию КАК НастройкаДоступностиПоСостоянию,
	|	НастройкиДоступностиДляВидовДокументов.НастройкаДоступностиПоСостоянию.ПометкаУдаления КАК ПометкаУдаления,
	|	НастройкиДоступностиДляВидовДокументов.НастройкаДоступностиПоСостоянию.ИспользоватьДля КАК ИспользоватьДля
	|ИЗ
	|	РегистрСведений.НастройкиДоступностиДляВидовДокументов КАК НастройкиДоступностиДляВидовДокументов
	|ГДЕ
	|	НЕ НастройкиДоступностиДляВидовДокументов.НастройкаДоступностиПоСостоянию.ПометкаУдаления
	|	И НастройкиДоступностиДляВидовДокументов.ВидДокумента В (&ВидыДокументов)
	|	И
	|		НастройкиДоступностиДляВидовДокументов.НастройкаДоступностиПоСостоянию.ВариантНастройкиДляВидовДокументов = ЗНАЧЕНИЕ(Перечисление.ВариантыНастройкиДоступностиДляВидовДокументов.ДляВыбранныхВидовДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НастройкиДоступностиПоСостоянию.Ссылка,
	|	НастройкиДоступностиПоСостоянию.ПометкаУдаления,
	|	НастройкиДоступностиПоСостоянию.ИспользоватьДля
	|ИЗ
	|	Справочник.НастройкиДоступностиПоСостоянию КАК НастройкиДоступностиПоСостоянию
	|ГДЕ
	|	НЕ НастройкиДоступностиПоСостоянию.ПометкаУдаления
	|	И НастройкиДоступностиПоСостоянию.ТипДокумента = &ТипДокумента
	|	И
	|		НастройкиДоступностиПоСостоянию.ВариантНастройкиДляВидовДокументов = ЗНАЧЕНИЕ(Перечисление.ВариантыНастройкиДоступностиДляВидовДокументов.ДляВсехВидовДокументов)";
	
	Запрос.УстановитьПараметр("ТипДокумента", ТипДокумента);
	
	ВидыДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОбъект.ВидДокумента);
	РодителиВида = ОбщегоНазначенияДокументооборот.ВсеРодителиЭлемента(ДокументОбъект.ВидДокумента);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыДокументов, РодителиВида);
	Запрос.УстановитьПараметр("ВидыДокументов", ВидыДокументов);
	
	Настройки = Запрос.Выполнить().Выгрузить();
	
	КонтейнерыСотрудника = РегистрыСведений.СотрудникиВКонтейнерах.КонтейнерыСотрудников(
		Сотрудники.СотрудникиПользователя(Пользователь));
	
	Результат = Новый Массив;
	Для Каждого СтрНастройка Из Настройки Цикл
		
		Настройка = СтрНастройка.НастройкаДоступностиПоСостоянию;
		
		Если СтрНастройка.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		КонтейнерыИзНастройки = Новый Массив;
		Для Каждого Строка Из СтрНастройка.ИспользоватьДля Цикл
			
			Если Не ЗначениеЗаполнено(Строка.Участник) Тогда
				Продолжить;
			КонецЕсли;
			
			Если РегистрыСведений.СотрудникиВКонтейнерах.ЭтоКонтейнер(Строка.Участник) Тогда
				
				КонтейнерыИзНастройки.Добавить(Строка.Участник);
				
			ИначеЕсли ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов") Тогда
				
				ЗначениеАвтоподстановки = ШаблоныДокументов.ПолучитьЗначениеАвтоподстановки(
					Строка.Участник, ДокументОбъект);
				Если ЗначениеАвтоподстановки = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если РегистрыСведений.СотрудникиВКонтейнерах.ЭтоКонтейнер(ЗначениеАвтоподстановки) Тогда
					
					КонтейнерыИзНастройки.Добавить(ЗначениеАвтоподстановки);
					
				ИначеЕсли ТипЗнч(ЗначениеАвтоподстановки) = Тип("Массив")
					Или ТипЗнч(ЗначениеАвтоподстановки) = Тип("ФиксированныйМассив") Тогда
					
					Для Каждого ЗначениеАвтоподстановкиЭлемент Из ЗначениеАвтоподстановки Цикл
						Если РегистрыСведений.СотрудникиВКонтейнерах.ЭтоКонтейнер(ЗначениеАвтоподстановкиЭлемент) Тогда
							КонтейнерыИзНастройки.Добавить(ЗначениеАвтоподстановкиЭлемент);
						Иначе
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Функция автоподстановки %1 вернула некорректное значение %2.'"),
								Строка(Строка.Участник),
								Строка(ЗначениеАвтоподстановкиЭлемент));
							ВызватьИсключение ТекстСообщения;
						КонецЕсли;
					КонецЦикла;
					
				Иначе
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Функция автоподстановки %1 вернула некорректное значение %2.'"),
						Строка(Строка.Участник),
						Строка(ЗначениеАвтоподстановкиЭлемент));
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Контейнер Из КонтейнерыИзНастройки Цикл
			Если Не КонтейнерыСотрудника.Найти(Контейнер) = Неопределено Тогда
				Результат.Добавить(Настройка);
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает имена полей (команд) для документа переданного типа
Функция ПолучитьИменаПолейИКомандДляНастройкиДоступности() Экспорт 
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИмяПоляКоманды");
	Таблица.Колонки.Добавить("ПредставлениеПоляКоманды");
	Таблица.Колонки.Добавить("ИменаПолейНаФорме");
	Таблица.Колонки.Добавить("ИменаРеквизитовОбъекта");
	Таблица.Колонки.Добавить("ИменаDMService");
	Таблица.Колонки.Добавить("ИмяГруппыПоляКоманды");
	
	Макет = Справочники.НастройкиДоступностиПоСостоянию.ПолучитьМакет("НастройкиПолейКомандДокументПредприятия");
	
	// Найдем колонки макета по их заголовкам.
	КолонкаИмяПоляКоманды = НомерКолонкиПоЗаголовку(Макет, 2, "ИмяПоляКоманды");
	КолонкаПредставлениеПоляКоманды = НомерКолонкиПоЗаголовку(Макет, 2, "ПредставлениеПоляКоманды");
	КолонкаИменаПолейНаФорме = НомерКолонкиПоЗаголовку(Макет, 2, "ИменаПолейНаФорме");
	КолонкаИменаРеквизитовОбъекта = НомерКолонкиПоЗаголовку(Макет, 2, "ИменаРеквизитовОбъекта");
	КолонкаИменаDMService = НомерКолонкиПоЗаголовку(Макет, 2, "ИменаDMService");
	КолонкаФункциональнаяОпция = НомерКолонкиПоЗаголовку(Макет, 2, "ФункциональнаяОпция");
	
	НомерСтроки = 3;
	ИмяПоляКоманды = Макет.Область(НомерСтроки, КолонкаИмяПоляКоманды).Текст;
	Пока ИмяПоляКоманды <> "" Цикл
		
		ИмяФО = Макет.Область(НомерСтроки, КолонкаФункциональнаяОпция).Текст;
		Если Не ЗначениеЗаполнено(ИмяФО) Или ПолучитьФункциональнуюОпцию(ИмяФО) Тогда 
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.ИмяПоляКоманды = ИмяПоляКоманды;
			НоваяСтрока.ПредставлениеПоляКоманды = 
				Макет.Область(НомерСтроки, КолонкаПредставлениеПоляКоманды).Текст;
			НоваяСтрока.ИменаПолейНаФорме = 
				Макет.Область(НомерСтроки, КолонкаИменаПолейНаФорме).Текст;
			НоваяСтрока.ИменаРеквизитовОбъекта = 
				Макет.Область(НомерСтроки, КолонкаИменаРеквизитовОбъекта).Текст;
			НоваяСтрока.ИменаDMService = 
				Макет.Область(НомерСтроки, КолонкаИменаDMService).Текст;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		ИмяПоляКоманды = Макет.Область(НомерСтроки, КолонкаИмяПоляКоманды).Текст;
		
	КонецЦикла;
	
	Таблица.Сортировать("ИмяПоляКоманды");
	
	Возврат Таблица;
		
КонецФункции

// Возвращает настройки доступности по умолчанию
// 
// Параметры:
//  ТипДокумента - ПеречислениеСсылка.ТипыОбъектов
//  Роль - Строка - "Пользователь" или "Делопроизводитель"
//  ОтборИмяПоляКоманды - Строка - Для возможного дополнительного отбора. Если не указано, то стандартно по всем.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - с полями:
// * ИмяПоляКоманды - Строка -
// * Состояние - ПеречислениеСсылка.СостоянияДокументов -
// * Доступность - Число - 0 = нет настройки, 1 = да (доступно), 2 = нет (недоступно).
Функция ПолучитьНастройкиДоступностиПоУмолчанию(ТипДокумента, Роль, ОтборИмяПоляКоманды = "") Экспорт 
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИмяПоляКоманды");
	Таблица.Колонки.Добавить("Состояние");
	Таблица.Колонки.Добавить("Доступность");
	
	Макет = Справочники.НастройкиДоступностиПоСостоянию.ПолучитьМакет("НастройкиПолейКомандДокументПредприятия");
	
	// Определим номера колонок макета.
	КолонкаИмяПоляКоманды = НомерКолонкиПоЗаголовку(Макет, 2, "ИмяПоляКоманды");
	КолонкаПользователь = НомерКолонкиПоЗаголовку(Макет, 1, "Пользователь");
	КолонкаДелопроизводитель = НомерКолонкиПоЗаголовку(Макет, 1, "Делопроизводитель");
	КолонкаПоследняя = Макет.ШиринаТаблицы;
	
	НомерСтроки = 3;
	ИмяПоляКоманды = Макет.Область(НомерСтроки, КолонкаИмяПоляКоманды).Текст;
	Пока ИмяПоляКоманды <> "" Цикл
		
		Если ЗначениеЗаполнено(ОтборИмяПоляКоманды) И ИмяПоляКоманды <> ОтборИмяПоляКоманды Тогда
			// только одно, все прочие не нужны.
			НомерСтроки = НомерСтроки + 1;
			ИмяПоляКоманды = Макет.Область(НомерСтроки, КолонкаИмяПоляКоманды).Текст;
			Продолжить;
		КонецЕсли;
		
		Если Роль = "Пользователь" Тогда // настройки для пользователя - перед настройками для делопроизводителя
			Инд1 = КолонкаПользователь;
			Инд2 = КолонкаДелопроизводитель - 1;
		ИначеЕсли Роль = "Делопроизводитель" Тогда // настройки для делопроизводителя - до конца макета
			Инд1 = КолонкаДелопроизводитель;
			Инд2 = КолонкаПоследняя;
		КонецЕсли;
			
		Для Инд = Инд1 По Инд2 Цикл
			Состояние = Макет.Область(2, Инд).Текст;
			
			МетаданныеЗначение = Метаданные.Перечисления.СостоянияДокументов.ЗначенияПеречисления.Найти(Состояние);
			Индекс = Метаданные.Перечисления.СостоянияДокументов.ЗначенияПеречисления.Индекс(МетаданныеЗначение);
			ЗначениеПеречисления = Перечисления.СостоянияДокументов[Индекс];
			
			Доступность = Макет.Область(НомерСтроки, Инд).Текст;
			
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.ИмяПоляКоманды = ИмяПоляКоманды;
			НоваяСтрока.Состояние = ЗначениеПеречисления;
			
			Если Доступность = "Да" Тогда 
				НоваяСтрока.Доступность = 1;
			ИначеЕсли Доступность = "Нет" Тогда 
				НоваяСтрока.Доступность = 2;
			Иначе
				НоваяСтрока.Доступность = 0;
			КонецЕсли;
			
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
		ИмяПоляКоманды = Макет.Область(НомерСтроки, КолонкаИмяПоляКоманды).Текст;
		
	КонецЦикла;
	
	Возврат Таблица;
		
КонецФункции

// Возвращает номер колонки в макете, найдя ее по переданному заголовку. Вызывает
// исключение, если колонка не найдена.
//
// Параметры:
//   Макет - ТабличныйДокумент - макет, в котором выполняется поиск.
//   НомерСтроки - Число - номер строки макета.
//   Заголовок - Строка - текст заголовка, по которому выполняется поиск.
//
Функция НомерКолонкиПоЗаголовку(Макет, НомерСтроки, Заголовок)
	
	ОбластьЗаголовков = Макет.Область(НомерСтроки,, НомерСтроки);
	// Выполним поиск по ячейке целиком без учета регистра.
	Результат = Макет.НайтиТекст(Заголовок,,ОбластьЗаголовков,,Истина,,Истина);
	Если Результат = Неопределено Тогда
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В строке %1 макета не найдена колонка ""%2"".'"),
			НомерСтроки,
			Заголовок);
		ВызватьИсключение ТекстИсключения;
	Иначе
		Возврат Результат.Лево;
	КонецЕсли;
	
КонецФункции

// Возвращает Истина, если переданное поле доступно в текущем состоянии
Функция ПолеДокументаДоступноПоСостоянию(ИмяПоляКоманды, Документ) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если РольДоступна("ПолныеПрава") Тогда 
		Возврат Истина;
	КонецЕсли;	
	
	Если Не ДелопроизводствоКлиентСервер.ЭтоДокумент(Документ) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Если Не Константы.ИспользоватьСостоянияДокументов.Получить() Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Если Не Константы.ОграничиватьДоступностьПолейПоСостоянию.Получить() Тогда 
		Возврат Истина;
	КонецЕсли;
	
	ВсеСостояния = ПолучитьВсеСостоянияДокумента(Документ);
	// Удаление состояние Проект, если есть прочие состояния
	Если ВсеСостояния.Количество() > 1 Тогда 
		НайденныйИндекс = ВсеСостояния.Найти(Перечисления.СостоянияДокументов.Проект);
		Если НайденныйИндекс <> Неопределено Тогда 
			ВсеСостояния.Удалить(НайденныйИндекс);
		КонецЕсли;
	КонецЕсли;
	
	ВидыДействий = Новый Соответствие;
	
	ДокументОбъект = Документ.ПолучитьОбъект();
	НастройкиСостояний = ПолучитьНастройкиСостояний(ДокументОбъект);
	
	ДоступныеПоля = Новый Массив;
	Для Каждого НастройкаСостояния Из НастройкиСостояний Цикл
		
		ДоступностьДа = Новый Массив;
		ДоступностьНет = Новый Массив;
		
		Для Каждого СтрокаСостояния Из ВсеСостояния Цикл
			
			Отбор = Новый Структура("Состояние", СтрокаСостояния.Состояние);
			Если ЗначениеЗаполнено(СтрокаСостояния.Действие) Тогда
				ВидДействия = ВидыДействий[СтрокаСостояния.Действие];
				Если ВидДействия = Неопределено Тогда
					ВидДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаСостояния.Действие,
						"ВидДействия");
					ВидыДействий.Вставить(СтрокаСостояния.Действие, ВидДействия);
				КонецЕсли;
				
				Отбор.Вставить("ВидДействия", ВидДействия);
			КонецЕсли;
			 
			НайденныеСтроки = НастройкаСостояния.НастройкиДоступности.НайтиСтроки(Отбор);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				Если НайденнаяСтрока.Доступность = 1 Тогда  // Да
					Если ДоступностьДа.Найти(НайденнаяСтрока.ИмяПоляКоманды) = Неопределено Тогда 
						ДоступностьДа.Добавить(НайденнаяСтрока.ИмяПоляКоманды);
					КонецЕсли;
					
				ИначеЕсли НайденнаяСтрока.Доступность = 2 Тогда  // Нет
					Если ДоступностьНет.Найти(НайденнаяСтрока.ИмяПоляКоманды) = Неопределено Тогда 
						ДоступностьНет.Добавить(НайденнаяСтрока.ИмяПоляКоманды);
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЦикла;	
			
		КонецЦикла;	
		
		// Исключение из доступных полей с доступностью Нет
		Для Каждого Поле Из ДоступностьНет Цикл
			Поз = ДоступностьДа.Найти(Поле);
			Если Поз <> Неопределено Тогда 
				ДоступностьДа.Удалить(Поз);
			КонецЕсли;
		КонецЦикла;	
		
		Для Каждого Поле Из ДоступностьДа Цикл
			Если ДоступныеПоля.Найти(Поле) = Неопределено Тогда 
				ДоступныеПоля.Добавить(Поле);
			КонецЕсли;
		КонецЦикла;	
		
	КонецЦикла;	
	
	Если ДоступныеПоля.Найти(ИмяПоляКоманды) = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;	
		
	Возврат Истина;
	
КонецФункции	

// Возвращает описания поставляемых настроек доступности по состоянию
Функция ОписанияНачальногоЗаполненияНастроекДоступностиПоСостояниям() Экспорт

	ОписанияНастроекДоступности = Новый Массив;
		
	// настройки для документов предприятия
	ОписаниеОбластиДелегирования = Новый Структура("Идентификатор, Наименование, ТипДокумента, Роль");
	ОписаниеОбластиДелегирования.Идентификатор = "69557572-43a8-4c36-ad40-360889e868b7";
	ОписаниеОбластиДелегирования.Наименование = НСтр("ru = 'Общие настройки пользователей'");
	ОписаниеОбластиДелегирования.ТипДокумента = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	ОписаниеОбластиДелегирования.Роль = "Пользователь";
	ОписанияНастроекДоступности.Добавить(ОписаниеОбластиДелегирования);
	
	ОписаниеОбластиДелегирования = Новый Структура("Идентификатор, Наименование, ТипДокумента, Роль");
	ОписаниеОбластиДелегирования.Идентификатор = "b18212b3-c597-4117-8329-1d22c8524135";
	ОписаниеОбластиДелегирования.Наименование = НСтр("ru = 'Настройки для делопроизводителей'");
	ОписаниеОбластиДелегирования.ТипДокумента = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	ОписаниеОбластиДелегирования.Роль = "Делопроизводитель";
	ОписанияНастроекДоступности.Добавить(ОписаниеОбластиДелегирования);
	
	Возврат ОписанияНастроекДоступности;
	
КонецФункции	

Функция ИзменениеРезолюцииДоступноПоСостоянию(Форма) Экспорт 
	
	Документ = Форма.Объект.Документ;
	
	Если Не ПолеДокументаДоступноПоСостоянию("Резолюции", Документ) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

// Получает контактное лицо контрагента
Функция КонтактноеЛицоКонтрагента(Контрагент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтактныеЛица.Ссылка КАК КонтактноеЛицо
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|ГДЕ
	|	КонтактныеЛица.Владелец = &Владелец
	|	И (НЕ КонтактныеЛица.ПометкаУдаления)
	|	И ЛОЖЬ В
	|			(ВЫБРАТЬ
	|				ЛОЖЬ КАК ЗначениеЛожь
	|			ИЗ
	|				(ВЫБРАТЬ ПЕРВЫЕ 2
	|					ИСТИНА КАК ЗначениеИстина
	|				ИЗ
	|					Справочник.КонтактныеЛица КАК КонтактныеЛица
	|				ГДЕ
	|					(НЕ КонтактныеЛица.ПометкаУдаления)
	|					И КонтактныеЛица.Владелец = &Владелец
	|				) КАК ВыбранныеОбъекты
	|			ИМЕЮЩИЕ
	|				КОЛИЧЕСТВО(ВыбранныеОбъекты.ЗначениеИстина) = 1)";
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.КонтактноеЛицо;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	

// Возвращает количество документов переданного вида
Функция КоличествоДокументовПоВидуДокумента(ВидДокумента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	Справочник.ДокументыПредприятия
	|ГДЕ
	|	ВидДокумента = &ВидДокумента
	|	И РегистрационныйНомер <> """"";
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат 0;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Количество;
	
КонецФункции	

// Возвращает количество документов с пустым видом
Функция КоличествоДокументовСПустымВидом(ТипДокумента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
		|ГДЕ
		|	ДокументыПредприятия.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументов.ПустаяСсылка)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Количество;
	
КонецФункции	

// Инициализирует персональные настройки работы с документами - для использования на клиенте
Функция ПолучитьПерсональныеНастройкиРаботыСДокументамиСервер() Экспорт
	
	Настройки = Новый Структура;

	// ПоказыватьПредупреждениеПриРегистрации
	ПоказыватьПредупреждениеПриРегистрации = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "ПоказыватьПредупреждениеПриРегистрации");
	Если ПоказыватьПредупреждениеПриРегистрации = Неопределено Тогда
		ПоказыватьПредупреждениеПриРегистрации = Истина;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиРаботыСДокументами", "ПоказыватьПредупреждениеПриРегистрации", ПоказыватьПредупреждениеПриРегистрации);
	КонецЕсли;
	Настройки.Вставить("ПоказыватьПредупреждениеПриРегистрации", ПоказыватьПредупреждениеПриРегистрации И ПолучитьФункциональнуюОпцию("ИспользоватьСостоянияДокументов"));
	
	// ВариантПредупрежденияПриЗакрытииВходящего
	ВариантПредупрежденияПриЗакрытииВходящего = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "ВариантПредупрежденияПриЗакрытииВходящего");
	Если ВариантПредупрежденияПриЗакрытииВходящего = Неопределено Тогда 
		ПоказыватьПредупреждениеПриЗакрытии = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "ПоказыватьПредупреждениеПриЗакрытии");
		Если ПоказыватьПредупреждениеПриЗакрытии = Неопределено Тогда
			ПоказыватьПредупреждениеПриЗакрытии = Истина;
		КонецЕсли;
		
		Если ПоказыватьПредупреждениеПриЗакрытии Тогда 
			ВариантПредупрежденияПриЗакрытииВходящего = "ПоказыватьПредупреждение";
		Иначе
			ВариантПредупрежденияПриЗакрытииВходящего = "ЗакрыватьБезРегистрации";
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиРаботыСДокументами", "ВариантПредупрежденияПриЗакрытииВходящего", ВариантПредупрежденияПриЗакрытииВходящего);
	КонецЕсли;			
	Настройки.Вставить("ВариантПредупрежденияПриЗакрытииВходящего", ВариантПредупрежденияПриЗакрытииВходящего);
	
	// СпособОтраженияПередачиКонтрагенту
	ПоказыватьПредупреждениеПриЗакрытии = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами",
		"ПоказыватьПредупреждениеПриЗакрытии");
	Если ПоказыватьПредупреждениеПриЗакрытии = Неопределено Тогда
		ПоказыватьПредупреждениеПриЗакрытии = Истина;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиРаботыСДокументами", 
			"ПоказыватьПредупреждениеПриЗакрытии", ПоказыватьПредупреждениеПриЗакрытии);
	КонецЕсли;
	Настройки.Вставить("ПоказыватьПредупреждениеПриЗакрытии", ПоказыватьПредупреждениеПриЗакрытии);
	
	СпособОтраженияПередачиКонтрагенту = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "СпособОтраженияПередачиКонтрагенту");
	Если СпособОтраженияПередачиКонтрагенту = Неопределено Тогда
		СпособОтраженияПередачиКонтрагенту = Перечисления.СпособыОтраженияПередачиКонтрагенту.ЗадаватьВопрос;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиРаботыСДокументами", "СпособОтраженияПередачиКонтрагенту", СпособОтраженияПередачиКонтрагенту);
	КонецЕсли;
	Настройки.Вставить("СпособОтраженияПередачиКонтрагенту", СпособОтраженияПередачиКонтрагенту);
	
	Возврат Настройки; // параметры доступны только для чтения
	
КонецФункции

// Возвращает ключ записи регистра сведений ЖурналПередачиДокументов
Функция ПолучитьКлючЖурналаПередачи(Период, Документ, ТипЭкземпляра, НомерЭкземпляра) Экспорт
	
	Ключ = РегистрыСведений.ЖурналПередачиДокументов.СоздатьКлючЗаписи( 
		Новый Структура("Период, Документ, ТипЭкземпляра, НомерЭкземпляра",
		Период,
		Документ,
		ТипЭкземпляра,
		НомерЭкземпляра));
		
	Возврат Ключ;	
	
КонецФункции	

// Возвращает количество держателей документа
Функция КоличествоКомуПереданДокумент(Документ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	РегистрСведений.ЖурналПередачиДокументов КАК ЖурналПередачиДокументов
	|ГДЕ
	|	ЖурналПередачиДокументов.Документ = &Документ
	|	И ЖурналПередачиДокументов.Возвращен = ЛОЖЬ";
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат 0;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Количество;
	
КонецФункции	

// Формирует строку информации о держателях документа 
Функция СтрокаКомуПереданДокумент(Документ) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат "";
	КонецЕсли;
	
	ОригиналПередан = "";
	ОригиналПереданДата = '00010101';
	ОригиналПереданМассив = Новый Массив;
	ОригиналПереданКоличество = 0;
	ОригиналУПользователей = Ложь;
	ОригиналУКонтактныхЛиц = Ложь;
	
	КопияПередана = "";
	КопияПереданаДата = '00010101';
	КопияПереданаМассив = Новый Массив;
	КопияПереданаКоличество = 0;
	КопияУПользователей = Ложь;
	КопияУКонтактныхЛиц = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЖурналПередачиДокументов.ТипЭкземпляра КАК ТипЭкземпляра,
	|	ЖурналПередачиДокументов.Пользователь КАК Пользователь,
	|	ЖурналПередачиДокументов.Период КАК ДатаПередачи,
	|	ЖурналПередачиДокументов.НомерЭкземпляра КАК НомерЭкземпляра
	|ИЗ
	|	РегистрСведений.ЖурналПередачиДокументов КАК ЖурналПередачиДокументов
	|ГДЕ
	|	ЖурналПередачиДокументов.Документ = &Документ
	|	И ЖурналПередачиДокументов.Возвращен = ЛОЖЬ";
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ТипЭкземпляра = Перечисления.ТипыЭкземпляров.Оригинал Тогда 
			
			Если ОригиналПереданМассив.Найти(Выборка.Пользователь) = Неопределено Тогда 
				ОригиналПередан = ОригиналПередан + Строка(Выборка.Пользователь) + ", ";
				ОригиналПереданМассив.Добавить(Выборка.Пользователь);
				
				Если Не ОригиналУПользователей
					И ТипЗнч(Выборка.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
					ОригиналУПользователей = Истина;
				КонецЕсли;
				Если Не ОригиналУКонтактныхЛиц
					И (ТипЗнч(Выборка.Пользователь) = Тип("СправочникСсылка.КонтактныеЛица")
					Или ТипЗнч(Выборка.Пользователь) = Тип("СправочникСсылка.Контрагенты")) Тогда 
					ОригиналУКонтактныхЛиц = Истина;
				КонецЕсли;
			КонецЕсли;	
				
			ОригиналПереданКоличество = ОригиналПереданКоличество + 1;
			ОригиналПереданДата = Выборка.ДатаПередачи;
			
		ИначеЕсли Выборка.ТипЭкземпляра = Перечисления.ТипыЭкземпляров.Копия Тогда 
			
			Если КопияПереданаМассив.Найти(Выборка.Пользователь) = Неопределено Тогда 
				КопияПередана = КопияПередана + Строка(Выборка.Пользователь) + ", ";
				КопияПереданаМассив.Добавить(Выборка.Пользователь);
				
				Если Не КопияУПользователей
					И ТипЗнч(Выборка.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
					КопияУПользователей = Истина;
				КонецЕсли;
				Если Не КопияУКонтактныхЛиц
					И (ТипЗнч(Выборка.Пользователь) = Тип("СправочникСсылка.КонтактныеЛица") 
					Или ТипЗнч(Выборка.Пользователь) = Тип("СправочникСсылка.Контрагенты")) Тогда 
					КопияУКонтактныхЛиц = Истина;
				КонецЕсли;
			КонецЕсли;
			
			КопияПереданаКоличество = КопияПереданаКоличество + 1;
			КопияПереданаДата = Выборка.ДатаПередачи;
			
		КонецЕсли;	
	КонецЦикла;	
	
	Если ОригиналПередан <> "" Тогда
		ОригиналПередан = Лев(ОригиналПередан, СтрДлина(ОригиналПередан) - 2);
		
		Если ОригиналПереданКоличество = 1 Тогда
			
			Если ОригиналУПользователей Тогда  
				ОригиналПередан = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Оригинал находится у пользователя %1 с %2'"),
					ОригиналПередан,
					Формат(ОригиналПереданДата, "ДЛФ=D"));
			Иначе 
				ОригиналПередан = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Оригинал находится у контактного лица %1 с %2'"),
					ОригиналПередан,
					Формат(ОригиналПереданДата, "ДЛФ=D"));
			КонецЕсли;
			
		ИначеЕсли ОригиналПереданКоличество > 1 Тогда 
			
			ОригиналПереданПользователямКоличество = ОригиналПереданМассив.Количество();
			
			Если ОригиналПереданПользователямКоличество = 1 И ОригиналУПользователей Тогда 
				ОригиналПередан = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Оригиналы находятся у пользователя %1'"),
					ОригиналПередан);
			ИначеЕсли ОригиналПереданПользователямКоличество = 1 И ОригиналУКонтактныхЛиц Тогда 
				ОригиналПередан = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Оригиналы находятся у контактного лица %1'"),
					ОригиналПередан);
			ИначеЕсли ОригиналУПользователей И ОригиналУКонтактныхЛиц Тогда 
				ОригиналПередан = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Оригиналы находятся у пользователей и контактных лиц %1'"),
					ОригиналПередан);
			ИначеЕсли ОригиналУКонтактныхЛиц Тогда 
				ОригиналПередан = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Оригиналы находятся у контактных лиц %1'"),
					ОригиналПередан);
			Иначе 
				ОригиналПередан = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Оригиналы находятся у пользователей %1'"),
					ОригиналПередан);
			КонецЕсли;
				
		КонецЕсли;
	КонецЕсли;	
	
	Если КопияПередана <> "" Тогда
		КопияПередана = Лев(КопияПередана, СтрДлина(КопияПередана) - 2);
		
		Если КопияПереданаКоличество = 1 Тогда
			
			Если КопияУПользователей Тогда  
				КопияПередана = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Копия находится у пользователя %1 с %2'"),
					КопияПередана,
					Формат(КопияПереданаДата, "ДЛФ=D"));
			Иначе 
				КопияПередана = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Копия находится у контактного лица %1 с %2'"),
					КопияПередана,
					Формат(КопияПереданаДата, "ДЛФ=D"));
			КонецЕсли;
			
		ИначеЕсли КопияПереданаКоличество > 1 Тогда 
			
			КопияПереданаПользователямКоличество = КопияПереданаМассив.Количество();
			
			Если КопияПереданаПользователямКоличество = 1 И КопияУПользователей Тогда 
				КопияПередана = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Копии находятся у пользователя %1'"),
					КопияПередана);
			ИначеЕсли КопияПереданаПользователямКоличество = 1 И КопияУКонтактныхЛиц Тогда 
				КопияПередана = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Копии находятся у контактного лица %1'"),
					КопияПередана);
			ИначеЕсли КопияУПользователей И КопияУКонтактныхЛиц Тогда 
				КопияПередана = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Копии находятся у пользователей и контактных лиц %1'"),
					КопияПередана);
			ИначеЕсли КопияУКонтактныхЛиц Тогда 
				КопияПередана = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Копии находятся у контактных лиц %1'"),
					КопияПередана);
			Иначе 
				КопияПередана = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Копии находятся у пользователей %1'"),
					КопияПередана);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;	
	
	Если ОригиналПередан <> "" И КопияПередана <> "" Тогда 
		Возврат ОригиналПередан + Символы.ПС + КопияПередана;
	Иначе
		Возврат ОригиналПередан + КопияПередана;
	КонецЕсли;	
	
КонецФункции	

// Формирует список получателей и контактных лиц для автоподбора
Функция СформироватьДанныеВыбораПолучателяДляЖурналаПередачи(Текст) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Сотрудники.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Наименование ПОДОБНО &Текст
		|	И Сотрудники.Действует
		|	И НЕ Сотрудники.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтактныеЛица.Ссылка
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛица
		|ГДЕ
		|	КонтактныеЛица.Наименование ПОДОБНО &Текст
		|	И НЕ КонтактныеЛица.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 20
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Наименование ПОДОБНО &Текст
		|	И Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
		|	И НЕ Контрагенты.ПометкаУдаления");
		
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	
	ДанныеВыбора.ЗагрузитьЗначения(
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Формирует список документов для автоподбора
Функция СформироватьДанныеВыбораДокументаДляЖурналаПередачи(Текст) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументыПредприятия.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
		|ГДЕ
		|	ДокументыПредприятия.Наименование ПОДОБНО &Текст
		|	И НЕ ДокументыПредприятия.ПометкаУдаления");
		
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка, 
			Строка(Выборка.Ссылка) + " (" + Строка(ТипЗнч(Выборка.Ссылка)) + ")");
	КонецЦикла;
	
    Возврат ДанныеВыбора;
	
КонецФункции

// Получает актуальное состояние дела
Функция ПолучитьСостояниеДела(Дело) Экспорт
	
	Если Не ЗначениеЗаполнено(Дело) Тогда
		Возврат Перечисления.СостоянияДелХраненияДокументов.ПустаяСсылка();
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияДелХраненияДокументов.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.СостоянияДелХраненияДокументов.СрезПоследних(, ДелоХраненияДокументов = &Дело) КАК СостоянияДелХраненияДокументов";
	Запрос.УстановитьПараметр("Дело", Дело);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат Перечисления.СостоянияДелХраненияДокументов.ПустаяСсылка();
	КонецЕсли;	
		
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Состояние; 
	
КонецФункции

// Проверяет проверку возможности отнесения документа в дело 
Функция ДелоМожетСодержатьДокумент(ТипПроверки, ЗначениеПроверки, Дело) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НоменклатураДел = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Дело, "НоменклатураДел");
	
	Если ТипПроверки = "ВидыДокументов" Тогда 
		
		Если ЗначениеЗаполнено(ЗначениеПроверки) И НоменклатураДел.ВидыДокументов.Количество() > 0 Тогда 
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ИСТИНА 
			|ГДЕ
			|	&ВидДокумента В ИЕРАРХИИ
			|			(ВЫБРАТЬ
			|				ВидыДокументов.ВидДокумента
			|			ИЗ
			|				Справочник.НоменклатураДел.ВидыДокументов КАК ВидыДокументов
			|			ГДЕ
			|				ВидыДокументов.Ссылка = &НоменклатураДел)";
			Запрос.УстановитьПараметр("ВидДокумента", ЗначениеПроверки);
			Запрос.УстановитьПараметр("НоменклатураДел", НоменклатураДел);
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда 
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипПроверки = "Контрагенты" Тогда 
		
		Если ЗначениеЗаполнено(ЗначениеПроверки) И НоменклатураДел.Контрагенты.Количество() > 0 Тогда 
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ 
			|	ИСТИНА 
			|ГДЕ
			|	&Контрагент В ИЕРАРХИИ
			|			(ВЫБРАТЬ
			|				Контрагенты.Контрагент
			|			ИЗ
			|				Справочник.НоменклатураДел.Контрагенты КАК Контрагенты
			|			ГДЕ
			|				Контрагенты.Ссылка = &НоменклатураДел)";
			Запрос.УстановитьПараметр("Контрагент", ЗначениеПроверки);
			Запрос.УстановитьПараметр("НоменклатураДел", НоменклатураДел);
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда 
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;	
		
	ИначеЕсли ТипПроверки = "ВопросыДеятельности" Тогда 
		
		Если ЗначениеЗаполнено(ЗначениеПроверки) И НоменклатураДел.ВопросыДеятельности.Количество() > 0 Тогда 
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ 
			|	ИСТИНА 
			|ГДЕ
			|	&ВопросДеятельности В ИЕРАРХИИ
			|			(ВЫБРАТЬ
			|				ВопросыДеятельности.ВопросДеятельности
			|			ИЗ
			|				Справочник.НоменклатураДел.ВопросыДеятельности КАК ВопросыДеятельности
			|			ГДЕ
			|				ВопросыДеятельности.Ссылка = &НоменклатураДел)";
			Запрос.УстановитьПараметр("ВопросДеятельности", ЗначениеПроверки);
			Запрос.УстановитьПараметр("НоменклатураДел", НоменклатураДел);
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда 
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции	

// Возвращает Истина, если контрагент является юридическим лицом
Функция КонтрагентЮрЛицо(Контрагент) Экспорт 
	
	Если ЗначениеЗаполнено(Контрагент) 
		И ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда  
		ЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ЮрФизЛицо");
		Возврат Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо
		  Или Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель
		  Или Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент;
	КонецЕсли;
	 
	Возврат Ложь;
	
КонецФункции

// Возвращает структуру данных контрагента
Функция ПолучитьДанныеКонтрагента(Контрагент) Экспорт 
	
	ДанныеКонтрагента = Новый Структура;
	ДанныеКонтрагента.Вставить("КонтрагентЮрЛицо", КонтрагентЮрЛицо(Контрагент));
	ДанныеКонтрагента.Вставить("КонтактноеЛицо", 	 КонтактноеЛицоКонтрагента(Контрагент));
	
	Возврат ДанныеКонтрагента;
		  
КонецФункции

Процедура УдалитьВременныеСохраненныеПоиски(ТекущийПользователь) Экспорт
	
	СписокСохраненныхПоисков = ХранилищеНастроекДанныхФорм.ПолучитьСписок("Обработка.ПоискПоРеквизитам.Форма.ПоискДокументовИФайлов");
	Для Каждого СохраненныйПоиск Из СписокСохраненныхПоисков Цикл
		КлючПоиска = СохраненныйПоиск.Значение;
		Если Найти(КлючПоиска, "_временный_") > 0 Тогда
			УстановитьПривилегированныйРежим(Истина);
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ТекущийПользователь.ИдентификаторПользователяИБ);
			Если ПользовательИБ <> Неопределено Тогда
				ХранилищеНастроекДанныхФорм.Удалить("Обработка.ПоискПоРеквизитам.Форма.ПоискДокументовИФайлов", КлючПоиска, ПользовательИБ.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПротоколированиеРаботыСотрудников.ЗаписатьВыходИзСистемы();
	
КонецПроцедуры

Функция ПолучитьТекущуюДату() Экспорт
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

// Получает признак Отправлен
Функция ДокументОтправленПолучателю(ИсходящийДокумент, Получатель, Адресат) Экспорт
	
	Отправлен = Ложь;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсходящийДокумент,
		"ВидДокумента.ЯвляетсяИсходящейКорреспонденцией") Тогда			 
		КорреспонденцияДокумента = РаботаСКорреспонденцией.КорреспонденцияДокумента(ИсходящийДокумент);
		Если ЗначениеЗаполнено(КорреспонденцияДокумента) Тогда
			Корреспонденты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КорреспонденцияДокумента, "Корреспонденты");
			Выборка = Корреспонденты.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.Корреспондент = Получатель 
					И (Не ЗначениеЗаполнено(Адресат)
						Или (ЗначениеЗаполнено(Адресат) И Адресат = Выборка.Адресат)) Тогда
					Отправлен =	Выборка.Отправлен;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Отправлен;
	
КонецФункции	

// Заполнить подчиненные документы
Процедура ЗаполнитьПодчиненныеДокументы(СтрокаДерева, ПараметрыДокумент) Экспорт
	
	Ссылка = СтрокаДерева.Ссылка;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВидыДокументов.ЯвляетсяИсходящейКорреспонденцией КАК ЯвляетсяИсходящейКорреспонденцией,
		|	ВЫБОР
		|		КОГДА ВидыДокументов.ЯвляетсяИсходящейКорреспонденцией
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученВОтветНа)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ОтправленВОтветНа)
		|	КОНЕЦ КАК ТипСвязи
		|ПОМЕСТИТЬ ДанныеСсылки
		|ИЗ
		|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДокументов КАК ВидыДокументов
		|		ПО ДокументыПредприятия.ВидДокумента = ВидыДокументов.Ссылка
		|ГДЕ
		|	ДокументыПредприятия.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументыПредприятия.Ссылка КАК Ссылка,
		|	ДокументыПредприятия.Заголовок КАК Заголовок,
		|	ДокументыПредприятия.РегистрационныйНомер КАК РегистрационныйНомер,
		|	ДокументыПредприятия.ДатаРегистрации КАК ДатаРегистрации,
		|	ВЫБОР
		|		КОГДА ДанныеСсылки.ЯвляетсяИсходящейКорреспонденцией
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ИндексКартинки,
		|	ДокументыПредприятия.ДатаСоздания КАК ДатаСоздания
		|ИЗ
		|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиОбъектов КАК СвязьПредметПереписки
		|		ПО ДокументыПредприятия.Ссылка = СвязьПредметПереписки.Объект
		|			И (СвязьПредметПереписки.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПредметПереписки))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиОбъектов КАК СвязьВОтветНа
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеСсылки КАК ДанныеСсылки
		|			ПО СвязьВОтветНа.ТипСвязи = ДанныеСсылки.ТипСвязи
		|		ПО ДокументыПредприятия.Ссылка = СвязьВОтветНа.Объект
		|ГДЕ
		|	СвязьВОтветНа.СвязанныйОбъект = &Ссылка
		|	И СвязьПредметПереписки.СвязанныйОбъект = &ПредметПереписки
		|	И НЕ ДокументыПредприятия.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСоздания";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ПредметПереписки", ПараметрыДокумент);
	
	ТаблДокументовЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблДокументов = СкопироватьТаблицуДокументовЗапроса(ТаблДокументовЗапроса);
	
	ЭтоВходящаяКорреспонденция = Истина;
	
	Если ТаблДокументовЗапроса.Количество() 
		И ТаблДокументовЗапроса[0].ИндексКартинки = 0 Тогда
	
		 ЭтоВходящаяКорреспонденция = Ложь;
	
	КонецЕсли;
	
	ИспользованиеВстроеннойПочты = ПолучитьФункциональнуюОпцию("ИспользоватьВстроеннуюПочту")
		И ПолучитьФункциональнуюОпцию("ИспользованиеВстроеннойПочты");
	
	// Заполняем письма
	Если ИспользованиеВстроеннойПочты Тогда
		КорневыеПисьма = ВстроеннаяПочтаСервер.ПолучитьИнформациюКорневыхПисемПоПредмету(Ссылка);
		Для Каждого КорневоеПисьмо Из КорневыеПисьма Цикл
			СтрокаПисьма = ТаблДокументов.Добавить();
			СтрокаПисьма.ДатаРегистрации = КорневоеПисьмо.Дата;
			СтрокаПисьма.ДатаСоздания = КорневоеПисьмо.Дата;
			СтрокаПисьма.Ссылка = КорневоеПисьмо.Ссылка;
			СтрокаПисьма.Заголовок = КорневоеПисьмо.Тема;
		КонецЦикла;	
	КонецЕсли;
	
	ТаблДокументов.Сортировать("ДатаСоздания");
	
	Для Каждого Строка Из ТаблДокументов Цикл
		
		Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Строка.Ссылка) Тогда // письмо
			
			ЗаполнитьУзелДереваПереписки(СтрокаДерева.Строки, Строка.Ссылка, ПараметрыДокумент);
			
		Иначе	// документ
		
			НоваяСтрока = СтрокаДерева.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка); 
			
			Если ЭтоВходящаяКорреспонденция  Тогда 
				
				Запрос = Новый Запрос();
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	ДокументыПредприятия.Подписал КАК Подписал,
					|	ДокументыПредприятияКонтрагенты.Контрагент КАК Отправитель
					|ИЗ
					|	Справочник.ДокументыПредприятия.Контрагенты КАК ДокументыПредприятияКонтрагенты
					|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДокументыПредприятия КАК ДокументыПредприятия
					|		ПО ДокументыПредприятияКонтрагенты.Ссылка = ДокументыПредприятия.Ссылка
					|ГДЕ
					|	ДокументыПредприятия.Ссылка = &Ссылка";
				Запрос.Параметры.Вставить("Ссылка", Ссылка);
				РеквизитыСсылки = Запрос.Выполнить().Выгрузить()[0];
				
				Отправлен = ДокументОтправленПолучателю(Строка.Ссылка,
					РеквизитыСсылки.Отправитель, РеквизитыСсылки.Подписал);
				НоваяСтрока.ИндексКартинки = ?(Отправлен, 1, 3);
			КонецЕсли;
			
			ЗаполнитьПодчиненныеДокументы(НоваяСтрока, ПараметрыДокумент);
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ЗаполнитьУзелДереваПереписки(ЭлементыДерева, ПисьмоРодитель, Предмет) Экспорт
	
	СтрокаКорня = ЭлементыДерева.Добавить();
	
	РеквизитыПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПисьмоРодитель,
		"Дата, Тема");
	СтрокаКорня.Ссылка = ПисьмоРодитель;
	СтрокаКорня.ДатаРегистрации = РеквизитыПисьма.Дата;
	
	СтрокаКорня.Заголовок = РеквизитыПисьма.Тема;
	
	Если ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(ПисьмоРодитель) Тогда
		СтрокаКорня.ИндексКартинки = 1;
	Иначе
		СтрокаКорня.ИндексКартинки = 0;
	КонецЕсли;
	
	Таблица = ВстроеннаяПочтаСервер.ПолучитьПодчиненныеПисьмаПоПредмету(ПисьмоРодитель, Предмет);
	Для НомерПисьма = 0 По Таблица.Количество() - 1 Цикл
		
		Письмо = Таблица[НомерПисьма];
		ЗаполнитьУзелДереваПереписки(СтрокаКорня.Строки, Письмо.Ссылка, Предмет);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнить дерево переписки
Функция ЗаполнитьДерево(Дерево, ПараметрыДокумент) Экспорт
	
	Дерево.Строки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументыПредприятия.Ссылка КАК Ссылка,
	|	ДокументыПредприятия.ДатаРегистрации КАК ДатаРегистрации,
	|	ДокументыПредприятия.РегистрационныйНомер КАК РегистрационныйНомер,
	|	ДокументыПредприятия.Заголовок КАК Заголовок,
	|	ДокументыПредприятия.ДатаСоздания КАК ДатаСоздания,
	|	ДокументыПредприятия.ВидДокумента.ЯвляетсяВходящейКорреспонденцией КАК ЭтоВходящаяКорреспонденция
	|ИЗ
	|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиОбъектов КАК СвязьПредметПереписки
	|		ПО ДокументыПредприятия.Ссылка = СвязьПредметПереписки.Объект
	|			И (СвязьПредметПереписки.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПредметПереписки))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиОбъектов КАК СвязьВОтветНа
	|		ПО ДокументыПредприятия.Ссылка = СвязьВОтветНа.Объект
	|			И (СвязьВОтветНа.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученВОтветНа))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиОбъектов КАК СвязьВОтветНаПредметПереписки
	|		ПО (СвязьВОтветНа.СвязанныйОбъект = СвязьВОтветНаПредметПереписки.Объект)
	|			И (СвязьВОтветНаПредметПереписки.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПредметПереписки))
	|ГДЕ
	|	СвязьПредметПереписки.СвязанныйОбъект = &ПредметПереписки
	|	И (СвязьВОтветНа.СвязанныйОбъект ЕСТЬ NULL
	|			ИЛИ ЕСТЬNULL(СвязьВОтветНаПредметПереписки.СвязанныйОбъект, """") <> &ПредметПереписки)
	|	И НЕ ДокументыПредприятия.ПометкаУдаления
	|	И (ДокументыПредприятия.ВидДокумента.ЯвляетсяИсходящейКорреспонденцией
	|			ИЛИ ДокументыПредприятия.ВидДокумента.ЯвляетсяВходящейКорреспонденцией)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания";
	
	Запрос.УстановитьПараметр("ПредметПереписки", ПараметрыДокумент);
	
	ТаблДокументовЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблДокументов = СкопироватьТаблицуДокументовЗапроса(ТаблДокументовЗапроса);
	
	ИспользованиеВстроеннойПочты = ПолучитьФункциональнуюОпцию("ИспользоватьВстроеннуюПочту")
		И ПолучитьФункциональнуюОпцию("ИспользованиеВстроеннойПочты");
	
	// Заполняем письма
	Если ИспользованиеВстроеннойПочты Тогда
		КорневыеПисьма = ВстроеннаяПочтаСервер.ПолучитьИнформациюКорневыхПисемПоПредмету(ПараметрыДокумент);
		Для Каждого КорневоеПисьмо Из КорневыеПисьма Цикл
			СтрокаПисьма = ТаблДокументов.Добавить();
			СтрокаПисьма.ДатаРегистрации = КорневоеПисьмо.Дата;
			СтрокаПисьма.ДатаСоздания = КорневоеПисьмо.Дата;
			СтрокаПисьма.Ссылка = КорневоеПисьмо.Ссылка;
			СтрокаПисьма.Заголовок = КорневоеПисьмо.Тема;
		КонецЦикла;	
	КонецЕсли;
	
	ТаблДокументов.Сортировать("ДатаСоздания");
	
	Для Каждого Строка Из ТаблДокументов Цикл
		
		Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Строка.Ссылка) Тогда // письмо
			
			ЗаполнитьУзелДереваПереписки(Дерево.Строки, Строка.Ссылка, ПараметрыДокумент);
			
		Иначе	// документ
		
			НоваяСтрока = Дерево.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка); 
			
			Если Строка.ЭтоВходящаяКорреспонденция Тогда 
				НоваяСтрока.ИндексКартинки = 0;
			Иначе
				
				Если ТипЗнч(НоваяСтрока.Ссылка) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
					Корреспонденция = РаботаСКорреспонденцией.КорреспонденцияДокумента(НоваяСтрока.Ссылка);
					Получатели = Корреспонденция.Корреспонденты;
				Иначе
					Получатели = НоваяСтрока.Ссылка.Получатели;
				КонецЕсли;
				
				Если Получатели.Найти(Истина, "Отправлен") <> Неопределено Тогда 
					НоваяСтрока.ИндексКартинки = 1;
				Иначе
					НоваяСтрока.ИндексКартинки = 3;
				КонецЕсли;
			КонецЕсли;
			
			ЗаполнитьПодчиненныеДокументы(НоваяСтрока, ПараметрыДокумент);
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецФункции

// Делает копию таблицы значений, расширяя тип поля Ссылка документами ВхПисьмо ИсхПисьмо
Функция СкопироватьТаблицуДокументовЗапроса(ТаблДокументовЗапроса) Экспорт
	
	ТаблДокументов = Новый ТаблицаЗначений;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ДокументыПредприятия"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ВходящееПисьмо"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ИсходящееПисьмо"));
	ДопустимыеТипы = Новый ОписаниеТипов(МассивТипов);
	ТаблДокументов.Колонки.Добавить("Ссылка", ДопустимыеТипы);
	
	Колонка = ТаблДокументовЗапроса.Колонки.Найти("ДатаРегистрации");
	ТаблДокументов.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	
	Колонка = ТаблДокументовЗапроса.Колонки.Найти("ДатаСоздания");
	ТаблДокументов.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	
	Колонка = ТаблДокументовЗапроса.Колонки.Найти("Заголовок");
	ТаблДокументов.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	
	Колонка = ТаблДокументовЗапроса.Колонки.Найти("РегистрационныйНомер");
	ТаблДокументов.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	
	Колонка = ТаблДокументовЗапроса.Колонки.Найти("ЭтоВходящаяКорреспонденция");
	Если Колонка <> Неопределено Тогда
		ТаблДокументов.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЕсли;
	
	Колонка = ТаблДокументовЗапроса.Колонки.Найти("ИндексКартинки");
	Если Колонка <> Неопределено Тогда
		ТаблДокументов.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЕсли;
	
	Для Каждого Строка Из ТаблДокументовЗапроса Цикл
		НоваяСтрока = ТаблДокументов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;	
	
	Возврат ТаблДокументов;
	
КонецФункции	

// Устанавливает пометку удаления предварительно блокируя объект
Процедура УстановитьПометкуУдаления(Ссылка, Пометка) Экспорт
	
	Объект = Ссылка.ПолучитьОбъект();
	Объект.Заблокировать();
	Объект.УстановитьПометкуУдаления(Пометка);
	
КонецПроцедуры

// Добавить в дерево - построение дерева переписки для вх или исх документа
Процедура ДобавитьПисьмоВДерево(СтрокиДерева, Письмо, ТекущееПисьмо, ВыведенныеПисьма) Экспорт
	
	Если ВыведенныеПисьма.Найти(Письмо) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	ВыведенныеПисьма.Добавить(Письмо);
	
	СтрокаДерева = СтрокиДерева.Добавить();
	СтрокаДерева.Ссылка = Письмо;
	СтрокаДерева.ИндексКартинки = ПолучитьИндексКартинки(Письмо);
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Письмо) Тогда
		СтрокаДерева.Заголовок = ПолучитьПредставлениеДокумента(Письмо);
		РеквизитыПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Письмо,
			"РегистрационныйНомер, ДатаРегистрации, ДатаСоздания");
		СтрокаДерева.РегистрационныйНомер = РеквизитыПисьма.РегистрационныйНомер;
		СтрокаДерева.ДатаРегистрации = РеквизитыПисьма.ДатаРегистрации;
		СтрокаДерева.ДатаСоздания = РеквизитыПисьма.ДатаСоздания;
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Письмо) Тогда
		СтрокаДерева.Заголовок = ВстроеннаяПочтаСервер.ПолучитьПредставлениеПисьма(Письмо);
		СтрокаДерева.РегистрационныйНомер = "";
		ДатаПисьма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "Дата");
		СтрокаДерева.ДатаРегистрации = ДатаПисьма;
		СтрокаДерева.ДатаСоздания = ДатаПисьма;
	КонецЕсли;
	
	Если Письмо = ТекущееПисьмо Тогда
		СтрокаДерева.Текущий = Истина;
	КонецЕсли;
	
	ЗаполнитьПодчиненныеДокументыВходящегоИлиИсходящего(СтрокаДерева.Строки, Письмо, ТекущееПисьмо, ВыведенныеПисьма);
	
КонецПроцедуры

// Получить представление документа для истории переписки
Функция ПолучитьПредставлениеДокумента(Документ) Экспорт
	
	Возврат Документ.Заголовок + " " + ВКавычках(Документ.Метаданные().ПредставлениеОбъекта, "(", ")")
	
КонецФункции

// Заполнить подчиненные документы/письма - построение дерева переписки для вх или исх документа
Процедура ЗаполнитьПодчиненныеДокументыВходящегоИлиИсходящего(СтрокиДерева, Родитель, ТекущееПисьмо, ВыведенныеПисьма) Экспорт
	
	ПодчиненныеПисьма = Новый Массив;
	ВстроеннаяПочтаСервер.ПолучитьПодчиненныеПисьма(Родитель, ПодчиненныеПисьма);
	Для каждого ПодчиненноеПисьмо Из ПодчиненныеПисьма Цикл
		ДобавитьПисьмоВДерево(СтрокиДерева, ПодчиненноеПисьмо, ТекущееПисьмо, ВыведенныеПисьма);
	КонецЦикла;
	
	КорневыеПисьмаПоПредмету = ВстроеннаяПочтаСервер.ПолучитьКорневыеПисьмаПоПредмету(Родитель);
	Для каждого КорневоеПисьмо Из КорневыеПисьмаПоПредмету Цикл
		ДобавитьПисьмоВДерево(СтрокиДерева, КорневоеПисьмо, ТекущееПисьмо, ВыведенныеПисьма);
	КонецЦикла;
	
	СтрокиДерева.Сортировать("ДатаСоздания");
	
КонецПроцедуры

// Получить индекс картинки для истории переписки
Функция ПолучитьИндексКартинки(Документ) Экспорт
	
	Если ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(Документ) Тогда
		Возврат 0;
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоИсходящийДокумент(Документ) Тогда
		Корреспонденция = РаботаСКорреспонденцией.КорреспонденцияДокумента(Документ);
		Если Корреспонденция.Корреспонденты.Найти(Истина, "Отправлен") <> Неопределено Тогда
			Возврат 1;
		Иначе
			Возврат 3;
		КонецЕсли;
	
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Документ) Тогда
		Возврат 2;
	
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Документ) Тогда
		Возврат 0;
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Документ) Тогда
		ДатаОтправкиПисьма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ДатаОтправки");
		
		Если ЗначениеЗаполнено(ДатаОтправкиПисьма) Тогда
			Возврат 1;
		Иначе
			Возврат 3;
		КонецЕсли;
	Иначе
		ВызватьИсключение НСтр("ru = 'Передан некорректный вид документа'");
	КонецЕсли;
	
КонецФункции

// Выводит номенклатуру дел в дерево
Процедура ЗаполнитьДеревоНоменклатурыДел(Дерево, Год, Организация) Экспорт 
	
	// получение дерева разделов номенклатуры дел
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РазделыНоменклатурыДел.Индекс КАК Индекс,
	|	РазделыНоменклатурыДел.Наименование,
	|	РазделыНоменклатурыДел.ПометкаУдаления,
	|	РазделыНоменклатурыДел.Ссылка КАК Ссылка,
	|	РазделыНоменклатурыДел.Родитель
	|ИЗ
	|	Справочник.РазделыНоменклатурыДел КАК РазделыНоменклатурыДел ";
	
	Условие = "";
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") И ЗначениеЗаполнено(Организация) Тогда
		Условие = Условие + " (Организация = &Организация) И ";
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;	   
	Если ЗначениеЗаполнено(Год) Тогда 
		Условие = Условие + " (Год = &Год) И ";
		Запрос.УстановитьПараметр("Год", Год);
	КонецЕсли;	
	Если Условие <> "" Тогда 
		ТекстЗапроса = ТекстЗапроса + " ГДЕ " + Лев(Условие, СтрДлина(Условие)-2);
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	" ИТОГИ ПО
	|	Ссылка ТОЛЬКО ИЕРАРХИЯ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Ссылка) Тогда 
			Продолжить;
		КонецЕсли;
		
		Родитель = Выборка.Родитель;
		Если Родитель.Пустая() Тогда
			СтрокаРодитель = Дерево;
		Иначе
			СтрокаРодитель = Дерево.Строки.Найти(Родитель, "Ссылка", Истина);
		КонецЕсли;
		
		// Пропускаем дублирующийся разделы
		ДубльСтроки = СтрокаРодитель.Строки.Найти(Выборка.Ссылка, "Ссылка", Истина);
		Если ДубльСтроки <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СтрокаРодитель.Строки.Добавить();
		НоваяСтрока.Ссылка = Выборка.Ссылка;
		НоваяСтрока.Наименование = Выборка.Индекс + " " + Выборка.Наименование;
		НоваяСтрока.ИндексКартинки = ?(Выборка.ПометкаУдаления, 1, 0);
		НоваяСтрока.ЭтоГруппа = Истина;
		
	КонецЦикла;
	
	// получение списка элементов номенклатуры дел
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НоменклатураДел.Индекс,
	|	НоменклатураДел.Наименование,
	|	НоменклатураДел.ПометкаУдаления,
	|	НоменклатураДел.Ссылка КАК Ссылка,
	|	НоменклатураДел.Раздел
	|ИЗ
	|	Справочник.НоменклатураДел КАК НоменклатураДел ";
		
	Условие = "";
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") И ЗначениеЗаполнено(Организация) Тогда
		Условие = Условие + " (Организация = &Организация) И ";
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;	   
	Если ЗначениеЗаполнено(Год) Тогда 
		Условие = Условие + " (Год = &Год) И ";
		Запрос.УстановитьПараметр("Год", Год);
	КонецЕсли;	
	Если Условие <> "" Тогда 
		ТекстЗапроса = ТекстЗапроса + " ГДЕ " + Лев(Условие, СтрДлина(Условие)-2);
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + " УПОРЯДОЧИТЬ ПО Индекс";
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Раздел.Пустая() Тогда
			СтрокаРодитель = Дерево;
		Иначе
			СтрокаРодитель = Дерево.Строки.Найти(Выборка.Раздел, "Ссылка", Истина);
		КонецЕсли;	
		
		Если СтрокаРодитель <> Неопределено Тогда 
			НоваяСтрока = СтрокаРодитель.Строки.Добавить();
			НоваяСтрока.Ссылка = Выборка.Ссылка;
			НоваяСтрока.Наименование = Выборка.Индекс + " " + Выборка.Наименование;
			НоваяСтрока.ИндексКартинки = ?(Выборка.ПометкаУдаления, 3, 2);
			НоваяСтрока.ЭтоГруппа = Ложь;
		КонецЕсли;	
	КонецЦикла;	
	
	Если Дерево.Строки.Количество() > 0 Тогда
		НоваяСтрока = Дерево.Строки.Добавить();
		НоваяСтрока.Ссылка = Справочники.НоменклатураДел.ПустаяСсылка();
		НоваяСтрока.Наименование = НСтр("ru = '<Номенклатура дел не указана>'");
		НоваяСтрока.ИндексКартинки = 2;
		НоваяСтрока.ЭтоГруппа = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Выводит дела (тома) в дерево
Процедура ЗаполнитьДеревоДелТомов(Дерево, Год, Организация) Экспорт 
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДелаХраненияДокументов.Ссылка,
	|	ДелаХраненияДокументов.Наименование,
	|	ДелаХраненияДокументов.ПометкаУдаления,
	|	ДелаХраненияДокументов.НоменклатураДел.Раздел КАК Раздел
	|ИЗ
	|	Справочник.ДелаХраненияДокументов КАК ДелаХраненияДокументов";
	
	Условие = "";
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") И ЗначениеЗаполнено(Организация) Тогда
		Условие = Условие + " (ДелаХраненияДокументов.Организация = &Организация) И ";
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;	   
	Если ЗначениеЗаполнено(Год) Тогда 
		Условие = Условие + " (ДелаХраненияДокументов.НоменклатураДел.Год = &Год) И ";
		Запрос.УстановитьПараметр("Год", Год);
	КонецЕсли;	
	Если Условие <> "" Тогда 
		ТекстЗапроса = ТекстЗапроса + " ГДЕ " + Лев(Условие, СтрДлина(Условие)-2);
	КонецЕсли;	
	
	ТекстЗапроса = ТекстЗапроса + 
	" УПОРЯДОЧИТЬ ПО
	|	ДелаХраненияДокументов.НоменклатураДел.Индекс,
	|	ДелаХраненияДокументов.НомерТома,
	|	ДелаХраненияДокументов.НомерЧасти,
	|	ДелаХраненияДокументов.Наименование";
	
	Запрос.Текст = ТекстЗапроса;
	ТаблицаДела = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РазделыНоменклатурыДел.Индекс,
	|	РазделыНоменклатурыДел.Наименование,
	|	РазделыНоменклатурыДел.ПометкаУдаления,
	|	РазделыНоменклатурыДел.Ссылка КАК Ссылка,
	|	РазделыНоменклатурыДел.Родитель
	|ИЗ
	|	Справочник.РазделыНоменклатурыДел КАК РазделыНоменклатурыДел
	|ГДЕ
	|	РазделыНоменклатурыДел.Ссылка В(&Разделы)
	|ИТОГИ ПО
	|	Ссылка ТОЛЬКО ИЕРАРХИЯ
	|АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("Разделы", ТаблицаДела.ВыгрузитьКолонку("Раздел"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Ссылка) Тогда 
			Продолжить;
		КонецЕсли;
		
		Родитель = Выборка.Родитель;
		Если Родитель.Пустая() Тогда
			СтрокаРодитель = Дерево;
		Иначе
			СтрокаРодитель = Дерево.Строки.Найти(Родитель, "Ссылка", Истина);
		КонецЕсли;	
		
		НоваяСтрока = СтрокаРодитель.Строки.Добавить();
		НоваяСтрока.Ссылка = Выборка.Ссылка;
		НоваяСтрока.Наименование = Выборка.Индекс + " " + Выборка.Наименование;
		НоваяСтрока.ИндексКартинки = ?(Выборка.ПометкаУдаления, 1, 0);
		НоваяСтрока.ЭтоГруппа = Истина;
		
	КонецЦикла;
	
	
	Для Каждого Строка Из ТаблицаДела Цикл
		Если Строка.Раздел.Пустая() Тогда
			СтрокаРодитель = Дерево;
		Иначе
			СтрокаРодитель = Дерево.Строки.Найти(Строка.Раздел, "Ссылка", Истина);
		КонецЕсли;	
		
		Если СтрокаРодитель <> Неопределено Тогда 
			НоваяСтрока = СтрокаРодитель.Строки.Добавить();
			НоваяСтрока.Ссылка = Строка.Ссылка;
			НоваяСтрока.Наименование = Строка.Наименование;
			НоваяСтрока.ИндексКартинки = ?(Строка.ПометкаУдаления, 3, 2);
			НоваяСтрока.ЭтоГруппа = Ложь;
		КонецЕсли;	
	КонецЦикла;	
	
	Если Дерево.Строки.Количество() > 0 Тогда
		НоваяСтрока = Дерево.Строки.Добавить();
		НоваяСтрока.Ссылка = Справочники.ДелаХраненияДокументов.ПустаяСсылка();
		НоваяСтрока.Наименование = НСтр("ru = '<Дело (том) не указано>'");
		НоваяСтрока.ИндексКартинки = 2;
		НоваяСтрока.ЭтоГруппа = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

// Возвращает признак необходимости указания связи для регистрации документа
Функция ДляРегистрацииНеобходимоУказатьСвязанныйДокумент(СтруктураОбъекта) Экспорт
	
	Нумератор = Нумерация.ПолучитьНумераторДокумента(СтруктураОбъекта);
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Нумератор", Нумератор);
	
	Если Не ЗначениеЗаполнено(Нумератор) Тогда
		СтруктураВозврата.Вставить("СоздатьСвязьДляНумерации", Ложь);
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ПараметрыНумератора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Нумератор, 
		"ТипСвязи, ИспользоватьПропущенныеНомера");
	
	СтруктураВозврата.Вставить("ИспользоватьПропущенныеНомера",
		ПараметрыНумератора.ИспользоватьПропущенныеНомера);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСвязиОбъектов") Тогда 
		СтруктураВозврата.Вставить("СоздатьСвязьДляНумерации", Ложь);
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыНумератора.ТипСвязи) Тогда
		СтруктураВозврата.Вставить("СоздатьСвязьДляНумерации", Ложь);
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	СтруктураВозврата.Вставить("ТипСвязиНумератора", ПараметрыНумератора.ТипСвязи);
	
	ДокументДляНумерации = Неопределено;
	Если ЗначениеЗаполнено(СтруктураОбъекта.Ссылка) Тогда 
		ДокументДляНумерации = СвязиОбъектов.ПолучитьСвязанныйОбъект(СтруктураОбъекта.Ссылка, ПараметрыНумератора.ТипСвязи);
	Иначе
		ИмяТипаСвязи = Справочники.ТипыСвязей.ПолучитьИмяПредопределенного(Нумератор.ТипСвязи);
		Если ЗначениеЗаполнено(ИмяТипаСвязи) И СтруктураОбъекта.Свойство(ИмяТипаСвязи) Тогда 
			ДокументДляНумерации = СтруктураОбъекта[ИмяТипаСвязи];
		КонецЕсли;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ДокументДляНумерации) Тогда 
		СтруктураВозврата.Вставить("СоздатьСвязьДляНумерации", Ложь);
		Возврат СтруктураВозврата;
	КонецЕсли;	
	
	НастройкиСвязи = СвязиОбъектов.ПолучитьНастройкиСвязи(СтруктураОбъекта);
	СтрокиНастроекСвязи = НастройкиСвязи.НайтиСтроки(Новый Структура("ТипСвязи", ПараметрыНумератора.ТипСвязи));
		
	ТипыВидыСвязанныхДокументовДляНумерации = Новый Массив;
	Для Каждого СтрокаНастроекСвязи из СтрокиНастроекСвязи Цикл
		Строка = Новый Структура("Тип, Вид");
		Строка.Тип = СтрокаНастроекСвязи.ТипСсылкаНа;
		Строка.Вид = СтрокаНастроекСвязи.СсылкаНа;
			
		ТипыВидыСвязанныхДокументовДляНумерации.Добавить(Строка);
	КонецЦикла;
	СтруктураВозврата.Вставить("ТипыВидыСвязанныхДокументовДляНумерации", ТипыВидыСвязанныхДокументовДляНумерации);
	
	СтруктураВозврата.Вставить("СоздатьСвязьДляНумерации", Истина);
	Возврат СтруктураВозврата;
	
КонецФункции

// Проверяет возможность изменить вид документа, если у него имеются связанные документы
Процедура ПроверкаСвязейПриИзмененииВидаДокумента(Объект, Отказ) Экспорт
		
	Если Не Объект.Ссылка.Пустая() Тогда
		
		СтарыйВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ВидДокумента");
		
		// если изменен вид документа
		Если Объект.ВидДокумента <> СтарыйВидДокумента Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА СвязиОбъектов.СвязанныйОбъект <> НЕОПРЕДЕЛЕНО
			|			ТОГДА СвязиОбъектов.СвязанныйОбъект
			|		ИНАЧЕ СвязиОбъектов.СвязаннаяСтрока
			|	КОНЕЦ КАК СвязанныйОбъект,
			|	СвязиОбъектов.ТипСвязи КАК ТипСвязи
			|ИЗ
			|	РегистрСведений.СвязиОбъектов КАК СвязиОбъектов
			|ГДЕ
			|	СвязиОбъектов.Объект = &Документ";
			
			Запрос.УстановитьПараметр("Документ", Объект.Ссылка);		
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ДокументСтруктура = Новый Структура;
				ДокументСтруктура.Вставить("Ссылка", Объект.Ссылка);
				ДокументСтруктура.Вставить("ВидДокумента", Объект.ВидДокумента);
				
				НастройкаСвязи = СвязиОбъектов.ПолучитьНастройкуСвязи(ДокументСтруктура, Выборка.СвязанныйОбъект, Выборка.ТипСвязи);
				
				Если НастройкаСвязи = Неопределено Тогда				
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Для документа указана связь ""%1"", которую нельзя использовать для документов этого вида'"), 
						Строка(Выборка.ТипСвязи));
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.ВидДокумента",,Отказ);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает строку обязательного заполнения рабочей группы
Функция СтрокаОбязательноеЗаполнениеРабочихГруппДокументов(ВидДокумента) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента,
			"ОбязательноеЗаполнениеРабочихГруппДокументов") Тогда
		Возврат НСтр("ru = 'Заполнение рабочей группы является обязательным;'");
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Возвращает список дел по вводу по строке с указанным признаком дело закрыто
Функция СформироватьДанныеВыбораДелаХранения(Знач Текст, Знач Организация, Знач Подразделение = Неопределено,
			Знач ФормаДокумента = Неопределено, Знач ГрифДоступа = Неопределено) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДелаХраненияДокументов.Ссылка,
			|	ДелаХраненияДокументов.Наименование,
			|	ДелаХраненияДокументов.НоменклатураДел,
			|	ДелаХраненияДокументов.НоменклатураДел.Индекс КАК Индекс
			|ИЗ
			|	Справочник.ДелаХраненияДокументов КАК ДелаХраненияДокументов
			|ГДЕ
			|	(ДелаХраненияДокументов.Наименование ПОДОБНО &Текст
			|			ИЛИ ДелаХраненияДокументов.НоменклатураДел.Индекс + "" "" + ДелаХраненияДокументов.Наименование ПОДОБНО &ТекстСИндексом)
			|	И Не ДелаХраненияДокументов.ДелоЗакрыто
			|	И (&Дата >= НАЧАЛОПЕРИОДА(ДелаХраненияДокументов.ДатаНачала, ДЕНЬ)
			|			ИЛИ ДелаХраненияДокументов.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1))
			|	И (&Дата <= КОНЕЦПЕРИОДА(ДелаХраненияДокументов.ДатаОкончания, ДЕНЬ)
			|			ИЛИ ДелаХраненияДокументов.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))"; 
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И ДелаХраненияДокументов.Организация = &Организация";
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Запрос.Текст = Запрос.Текст +"
			|	И ДелаХраненияДокументов.Подразделение В(&Подразделение)";
			
		ПустоеИПодразделение = ПолучитьПодразделениеИПустуюСсылку(Подразделение);
		Запрос.УстановитьПараметр("Подразделение", ПустоеИПодразделение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГрифДоступа) Тогда
		Запрос.Текст = Запрос.Текст +"
			|	И ДелаХраненияДокументов.НоменклатураДел.ГрифДоступа В(&ГрифыДоступа)";
		ГрифыДоступа = Новый Массив;
		ГрифыДоступа.Добавить(ГрифДоступа);
		ГрифыДоступа.Добавить(Справочники.ГрифыДоступа.ПустаяСсылка());
		Запрос.УстановитьПараметр("ГрифыДоступа", ГрифыДоступа);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФормаДокумента) Тогда 
		Запрос.Текст = Запрос.Текст + "
			|	И ДелаХраненияДокументов.НоменклатураДел.ФормаДокументов = &ФормаДокумента";
			
		Запрос.УстановитьПараметр("ФормаДокумента", ФормаДокумента);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Текст", "%" + Текст + "%");
	Запрос.УстановитьПараметр("ТекстСИндексом", Текст + "%");
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка,
			СокрЛП(Выборка.Индекс) + " " + Выборка.Наименование);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Возвращает список значений, содержащий подходящих получателей
//
Функция СформироватьДанныеВыбораПолучателя(Текст, ТолькоФизическиеЛица = Ложь) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 20
		|	Контрагенты.Ссылка КАК Контрагент,
		|	Контрагенты.ЮрФизЛицо КАК ЮрФизЛицо,
		|	Контрагенты.Наименование КАК Наименование,
		|	Контрагенты.Наименование КАК ЗначениеПоиска,
		|	0 КАК ОпределительНахождения
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Наименование ПОДОБНО &Текст
		|	И НЕ Контрагенты.ЭтоГруппа
		|	И НЕ Контрагенты.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 20
		|	Контрагенты.Ссылка,
		|	Контрагенты.ЮрФизЛицо,
		|	Контрагенты.Наименование,
		|	Контрагенты.ИНН,
		|	1
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН ПОДОБНО &Текст
		|	И НЕ Контрагенты.ЭтоГруппа
		|	И НЕ Контрагенты.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 20
		|	Контрагенты.Ссылка,
		|	Контрагенты.ЮрФизЛицо,
		|	Контрагенты.Наименование,
		|	Контрагенты.РегистрационныйНомер,
		|	2
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.РегистрационныйНомер ПОДОБНО &Текст
		|	И НЕ Контрагенты.ЭтоГруппа
		|	И НЕ Контрагенты.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 20
		|	КонтрагентыКонтактнаяИнформация.Ссылка,
		|	КонтрагентыКонтактнаяИнформация.Ссылка.ЮрФизЛицо,
		|	КонтрагентыКонтактнаяИнформация.Ссылка.Наименование,
		|	КонтрагентыКонтактнаяИнформация.НомерТелефона,
		|	3
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.НомерТелефона ПОДОБНО &Текст
		|	И НЕ КонтрагентыКонтактнаяИнформация.Ссылка.ЭтоГруппа
		|	И НЕ КонтрагентыКонтактнаяИнформация.Ссылка.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 20
		|	КонтрагентыКонтактнаяИнформация.Ссылка,
		|	КонтрагентыКонтактнаяИнформация.Ссылка.ЮрФизЛицо,
		|	КонтрагентыКонтактнаяИнформация.Ссылка.Наименование,
		|	КонтрагентыКонтактнаяИнформация.АдресЭП,
		|	4
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.АдресЭП ПОДОБНО &Текст
		|	И НЕ КонтрагентыКонтактнаяИнформация.Ссылка.ЭтоГруппа
		|	И НЕ КонтрагентыКонтактнаяИнформация.Ссылка.ПометкаУдаления";
		
	Если ТолькоФизическиеЛица Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"И НЕ КонтрагентыКонтактнаяИнформация.Ссылка.ПометкаУдаления",
			"И НЕ КонтрагентыКонтактнаяИнформация.Ссылка.ПометкаУдаления И КонтрагентыКонтактнаяИнформация.Ссылка.ЮрФизЛицо = &ФизЛицо");
		Запрос.Параметры.Вставить("ФизЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
	КонецЕсли;
	
	Если СтрДлина(Текст) = 1 Тогда
		Запрос.УстановитьПараметр("Текст", Текст+"%");
	Иначе	
		Запрос.УстановитьПараметр("Текст", "%"+Текст+"%");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Представление = "";
		
		Если Выборка.ОпределительНахождения = 1 Тогда
			
			Представление = СтрШаблон(НСтр("ru = '%1 (ИНН %2)'"), Выборка.Наименование, Выборка.ЗначениеПоиска);
				
		ИначеЕсли Выборка.ОпределительНахождения = 2 Тогда
			
			Если Выборка.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда 
				
				Представление = СтрШаблон(НСтр("ru = '%1 (ОГРН %2)'"), Выборка.Наименование, Выборка.ЗначениеПоиска);
				
			ИначеЕсли Выборка.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда 
				
				Представление = СтрШаблон(НСтр("ru = '%1 (ОГРНИП %2)'"), Выборка.Наименование, Выборка.ЗначениеПоиска);
				
			ИначеЕсли Выборка.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда 	
				
				Представление = СтрШаблон(НСтр("ru = '%1 (Рег. номер %2)'"), Выборка.Наименование, Выборка.ЗначениеПоиска);	
					
			КонецЕсли;		
				
		ИначеЕсли Выборка.ОпределительНахождения = 3 Тогда 
			
			Представление = СтрШаблон(НСтр("ru = '%1 (тел. %2)'"), Выборка.Наименование, Выборка.ЗначениеПоиска);
		
		ИначеЕсли Выборка.ОпределительНахождения = 4 Тогда 
			
			Представление = СтрШаблон(НСтр("ru = '%1 (email %2)'"),	Выборка.Наименование, Выборка.ЗначениеПоиска);
			
		Иначе 
			
			Представление = Выборка.Наименование;
			
		КонецЕсли;
			
		ДанныеВыбора.Добавить(Выборка.Контрагент, Представление);
			
	КонецЦикла;
		
	Возврат ДанныеВыбора;
	
КонецФункции

// Возвращает список значений, содержащий подходящих получателей указанного контрагента
//
Функция СформироватьДанныеВыбораКонтактногоЛицаПолучателя(Текст, Контрагент) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 20
			|	КонтактныеЛица.Ссылка КАК КонтактноеЛицо,
			|	КонтактныеЛица.Наименование КАК КонтактноеЛицоНаименование,
			|	0 КАК ОпределительНахождения,
			|	NULL КАК НомерТелефона,
			|	NULL КАК АдресЭП,
			|	КонтактныеЛица.Владелец КАК Контрагент
			|ИЗ
			|	Справочник.КонтактныеЛица КАК КонтактныеЛица
			|ГДЕ
			|	КонтактныеЛица.Владелец = &Контрагент
			|	И КонтактныеЛица.Наименование ПОДОБНО &Текст
			|	И КонтактныеЛица.ПометкаУдаления = ЛОЖЬ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 20
			|	КонтактныеЛицаКонтактнаяИнформация.Ссылка,
			|	КонтактныеЛицаКонтактнаяИнформация.Ссылка.Наименование,
			|	1,
			|	КонтактныеЛицаКонтактнаяИнформация.НомерТелефона,
			|	КонтактныеЛицаКонтактнаяИнформация.АдресЭП,
			|	КонтактныеЛицаКонтактнаяИнформация.Ссылка.Владелец
			|ИЗ
			|	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
			|ГДЕ
			|	КонтактныеЛицаКонтактнаяИнформация.Ссылка.Владелец = &Контрагент
			|	И КонтактныеЛицаКонтактнаяИнформация.НомерТелефона ПОДОБНО &Текст
			|	И НЕ КонтактныеЛицаКонтактнаяИнформация.Ссылка.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 20
			|	КонтактныеЛицаКонтактнаяИнформация.Ссылка,
			|	КонтактныеЛицаКонтактнаяИнформация.Ссылка.Наименование,
			|	2,
			|	КонтактныеЛицаКонтактнаяИнформация.НомерТелефона,
			|	КонтактныеЛицаКонтактнаяИнформация.АдресЭП,
			|	КонтактныеЛицаКонтактнаяИнформация.Ссылка.Владелец
			|ИЗ
			|	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
			|ГДЕ
			|	КонтактныеЛицаКонтактнаяИнформация.Ссылка.Владелец = &Контрагент
			|	И КонтактныеЛицаКонтактнаяИнформация.АдресЭП ПОДОБНО &Текст
			|	И НЕ КонтактныеЛицаКонтактнаяИнформация.Ссылка.ПометкаУдаления";
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ОпределительНахождения = 1 Тогда 
			ДанныеВыбора.Добавить(
				Новый Структура("Контрагент, КонтактноеЛицо", Выборка.Контрагент, Выборка.КонтактноеЛицо),
				СтрШаблон(НСтр("ru = '%1 (тел. %2)'"),
					Выборка.КонтактноеЛицоНаименование, Выборка.НомерТелефона));
			
		ИначеЕсли Выборка.ОпределительНахождения = 2 Тогда 
			ДанныеВыбора.Добавить(
				Новый Структура("Контрагент, КонтактноеЛицо", Выборка.Контрагент, Выборка.КонтактноеЛицо),
				СтрШаблон(НСтр("ru = '%1 (email %2)'"),
					Выборка.КонтактноеЛицоНаименование, Выборка.АдресЭП));
			
		Иначе
			ДанныеВыбора.Добавить(
				Новый Структура("Контрагент, КонтактноеЛицо", Выборка.Контрагент, Выборка.КонтактноеЛицо),
				Выборка.КонтактноеЛицоНаименование);
		КонецЕсли;
	КонецЦикла;
		
	Возврат ДанныеВыбора;
	
КонецФункции

// Проверяет соответствие организации объекта с организацией указанной в номенклатуре дел
//
// Параметры:
//  СправочникОбъект - СправочникОбъект.ДокументыПредприятия, 
//  				   СправочникОбъект.ШаблоныДокументов - Объект, организацию которого необходимо проверить
//  Отказ	 		 - Булево - в него возвращается Истина в случае отказа
//
Процедура ПроверитьСоответствиеНоменклатурыДел(СправочникОбъект, Отказ) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруДел") Тогда 
		Возврат;
	КонецЕсли;
	
	РеквизитыНД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СправочникОбъект.НоменклатураДел, 
		"Организация, Раздел, Раздел.Подразделение, ФормаДокументов");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда 
		ВестиУчетСторон = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СправочникОбъект.ВидДокумента, "ВестиУчетСторон" );
		// для шаблона документа, по которому ведется учет сторон и таблица сторон пустая проверку
		// не выполняем
		Если Не (ВестиУчетСторон И СправочникОбъект.Стороны.Количество() = 0 И ТипЗнч(СправочникОбъект) = Тип(
			"СправочникОбъект.ШаблоныДокументов")) Тогда
			Если ЗначениеЗаполнено(СправочникОбъект.НоменклатураДел) И СправочникОбъект.Организация
				<> РеквизитыНД.Организация Тогда
				Если ТипЗнч(СправочникОбъект) = Тип("СправочникОбъект.ШаблоныДокументов") Тогда
					ТекстСообщения = РедакцииКонфигурацииКлиентСервер.ОшибкаНеСовпаденияОрганизацииНоменклатурыДел(
						Истина);
				Иначе
					ТекстСообщения = РедакцииКонфигурацииКлиентСервер.ОшибкаНеСовпаденияОрганизацииНоменклатурыДел();
				КонецЕсли;

				ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения, , "СправочникОбъект.НоменклатураДел", , Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыНД.Раздел)
		И ЗначениеЗаполнено(РеквизитыНД.РазделПодразделение)
		И ЗначениеЗаполнено(СправочникОбъект.Подразделение)
		И РеквизитыНД.РазделПодразделение <> СправочникОбъект.Подразделение Тогда 
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Подразделение номенклатуры дел не относится к подразделению документа.'"),,
			"СправочникОбъект.НоменклатураДел",,
			Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СправочникОбъект.НоменклатураДел) И ЗначениеЗаполнено(СправочникОбъект.ФормаДокумента)
		И РеквизитыНД.ФормаДокументов <> СправочникОбъект.ФормаДокумента Тогда 
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Форма хранения номенклатуры дел не совпадает с формой документа.'"),,
			"СправочникОбъект.ФормаДокумента",,
			Отказ);
	КонецЕсли;

КонецПроцедуры

// Проверяет соответствие организации объекта с организацией указанной в деле
//
// Параметры:
//  СправочникОбъект - СправочникОбъект.ДокументыПредприятия - Объект, организацию которого необходимо проверить
//  
// Возвращаемое значение
//    Булево
Функция ДелоОтноситсяКОрганизации(СправочникОбъект) Экспорт	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда 
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СправочникОбъект.Дело, "Организация");
		Возврат Не (ЗначениеЗаполнено(СправочникОбъект.Дело) 
			И СправочникОбъект.Организация <> Организация);
	КонецЕсли;	
	
	Возврат Истина;
КонецФункции

// Возвращает список значений, содержащий подходящие номенклатуры дел
//
Функция СформироватьДанныеВыбораНоменклатурыДел(Текст, Организация, Подразделение = Неопределено,
	ФормаДокумента = Неопределено) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	НоменклатураДел.Ссылка КАК Ссылка,
			|	НоменклатураДел.ПолноеНаименование,
			|	НоменклатураДел.Индекс
			|ИЗ
			|	Справочник.НоменклатураДел КАК НоменклатураДел
			|ГДЕ
			|	(НоменклатураДел.ПолноеНаименование ПОДОБНО &Текст
			|			ИЛИ НоменклатураДел.Индекс ПОДОБНО &Текст)
			|	И НоменклатураДел.Организация = &Организация
			|	И НоменклатураДел.Год = &Год";
			
	Если ЗначениеЗаполнено(Подразделение) Тогда 
		Запрос.Текст = Запрос.Текст + "
			|	И НоменклатураДел.Раздел.Подразделение В(&Подразделение)";
			
		МассивПодразделений = ПолучитьПодразделениеИПустуюСсылку(Подразделение);
		Запрос.УстановитьПараметр("Подразделение", МассивПодразделений);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФормаДокумента) Тогда 
		Запрос.Текст = Запрос.Текст + "
			|	И НоменклатураДел.ФормаДокументов = &ФормаДокумента";
			
		Запрос.УстановитьПараметр("ФормаДокумента", ФормаДокумента);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Год", Год(ТекущаяДата()));

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка, 
			Строка(Выборка.Индекс) + " " + Строка(Выборка.ПолноеНаименование));
	КонецЦикла;
		
	Возврат ДанныеВыбора;
	
КонецФункции

// Возвращает массив, содержащий подразделение и его родительские подразделения
//
// Параметры:
//  Подразделение  				- Справочник.СтруктураПредприятия - подразделение добавляемое в массив
//  ДобавитьПустоеПодразделение - Булево - если Истина, то в массив добавляется пустая ссылка 
//
// Возвращаемое значение
//    Массив - содержащий переданное подразделение, его родительские подразделения, 
//		и пустую ссылку справочника структуры предприятия, если параметр ДобавитьПустоеПодразделение = Истина
//
Функция ПолучитьПодразделениеИРодителей(Подразделение, ДобавитьПустоеПодразделение = Ложь) Экспорт
	
	МассивРодителей = Новый Массив;
	МассивРодителей.Добавить(Подразделение);	
	
	Если ДобавитьПустоеПодразделение Тогда 
		МассивРодителей.Добавить(Справочники.СтруктураПредприятия.ПустаяСсылка());	
	КонецЕсли;
	
	Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, "Родитель");
	Пока ЗначениеЗаполнено(Родитель) Цикл 
		МассивРодителей.Добавить(Родитель);
		Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Родитель, "Родитель");
	КонецЦикла;	
	
	Возврат МассивРодителей;
	
КонецФункции	

// Возвращает массив с подразделением и пустой ссылкой справочника структуры предприятия
//
// Параметры:
//  Подразделение  - Справочник.СтруктураПредприятия - подразделение добавляемое в массив
//
// Возвращаемое значение
//    Массив - содержащий переданное подразделение и пустую ссылку справочника структуры предприятия
//
Функция ПолучитьПодразделениеИПустуюСсылку(Подразделение) Экспорт
	
	ПодразделениеИПустое = Новый Массив;
	ПодразделениеИПустое.Добавить(Подразделение);	
	ПодразделениеИПустое.Добавить(Справочники.СтруктураПредприятия.ПустаяСсылка());	
		
	Возврат ПодразделениеИПустое;
	
КонецФункции	

// Проверяет является ли подразделение дочерним к родительскому подразделению
//
// Параметры:
//  Подразделение  	 		  - Справочник.СтруктураПредприятия - проверяемое подразделение
//  РодительскоеПодразделение - Справочник.СтруктураПредприятия - подразделение родитель
//
// Возвращаемое значение
//    Булево - Истина, если подразделение является дочерним к родительскому, Ложь в противном случае
//
Функция ЭтоДочернееПодразделение(Подразделение, РодительскоеПодразделение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИСТИНА КАК Результат
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	НЕ СтруктураПредприятия.ПометкаУдаления
		|	И СтруктураПредприятия.Ссылка В ИЕРАРХИИ(&РодительскоеПодразделение)
		|	И СтруктураПредприятия.Ссылка = &Подразделение";
	Запрос.Параметры.Вставить("РодительскоеПодразделение", РодительскоеПодразделение);
	Запрос.Параметры.Вставить("Подразделение", Подразделение);
		
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет, что файл является скан-копией оригинала документа
//
// Параметры
//    Файл - СправочникСсылка.Файлы - ссылка на файл
//
// Возвращаемое значение
//    Булево - Истина, если файл является оригиналом, Ложь в противном случае
//
Функция ФайлЯвляетсяОригиналом(Файл) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов") Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОФайлахДокументооборот.ЯвляетсяОригиналом
	|ИЗ
	|	РегистрСведений.СведенияОФайлахДокументооборот КАК СведенияОФайлахДокументооборот
	|ГДЕ
	|	СведенияОФайлахДокументооборот.Файл = &Файл";
	
	Запрос.УстановитьПараметр("Файл", Файл);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.ЯвляетсяОригиналом;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Заполняет дерево связей документа
//
// Параметры
//    Форма - ФормаКлиентскогоПриложения - форма документа, в котором заполняется дерево связей
//
Процедура ЗаполнитьДеревоСвязейДокумента(Форма) Экспорт
	
	Если Форма.Объект.Ссылка.Пустая() Тогда 
		Возврат;
	КонецЕсли;
	
	Дерево = Форма.РеквизитФормыВЗначение("ДеревоСвязей");
	Дерево.Строки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	СвязиОбъектов.ТипСвязи КАК ТипСвязи,
	|	СвязиОбъектов.ДатаУстановки,
	|	ВЫБОР
	|		КОГДА СвязиОбъектов.СвязанныйОбъект <> НЕОПРЕДЕЛЕНО
	|			ТОГДА СвязиОбъектов.СвязанныйОбъект
	|		ИНАЧЕ СвязиОбъектов.СвязаннаяСтрока
	|	КОНЕЦ КАК СвязанныйДокументСтрока,
	|	СвязиОбъектов.Комментарий КАК Комментарий,
	|	Файлы.Ссылка КАК Файл,
	|	Файлы.ПометкаУдаления КАК ФайлПометкаУдаления,
	|	Файлы.ПолноеНаименование КАК ПолноеНаименованиеФайла,
	|	Файлы.ИндексКартинки КАК ИндексКартинкиФайла,
	|	Файлы.ТекущаяВерсияРасширение КАК РасширениеФайла,
	|	Файлы.ТекущаяВерсияРазмер / 1024 КАК Размер,
	|	ЕСТЬNULL(СведенияОФайлахДокументооборот.ЯвляетсяОригиналом, ЛОЖЬ) КАК ЯвляетсяОригиналом,
	|	ВЫБОР
	|		КОГДА СвязиОбъектов.СвязанныйОбъект <> НЕОПРЕДЕЛЕНО
	|			ТОГДА СвязиОбъектов.СвязанныйОбъект.ПометкаУдаления
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПометкаУдаления,
	|	СвязиОбъектов.ДополнительныйОбъектСвязи КАК ДополнительныйОбъектСвязи,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(СвязиОбъектов.СвязанныйОбъект) = Тип(Справочник.ДокументыПредприятия)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СвязанныйОбъектЯвляетсяДокументом
	|ИЗ
	|	РегистрСведений.СвязиОбъектов КАК СвязиОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	|		ПО (Файлы.ВладелецФайла = СвязиОбъектов.СвязанныйОбъект)
	|			%1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФайлахДокументооборот КАК СведенияОФайлахДокументооборот
	|		ПО (Файлы.Ссылка = СведенияОФайлахДокументооборот.Файл)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
	|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
	|ГДЕ
	|	СвязиОбъектов.Объект = &Документ
	|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL
	|	%2
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипСвязи, ДатаУстановки
	|ИТОГИ 
	|	МАКСИМУМ(Комментарий),
	|	МАКСИМУМ(СвязанныйОбъектЯвляетсяДокументом)
	|ПО
	|	ТипСвязи, ДополнительныйОбъектСвязи,
	|	СвязанныйДокументСтрока";
	
	Если Не Форма.ПоказыватьУдаленныеСвязи Тогда 
		Запрос.Текст = СтрШаблон(Запрос.Текст, 
			"И (НЕ Файлы.ПометкаУдаления)",
			"И (СвязиОбъектов.СвязанныйОбъект <> НЕОПРЕДЕЛЕНО
	|				И СвязиОбъектов.СвязанныйОбъект.ПометкаУдаления = ЛОЖЬ
	|			ИЛИ СвязиОбъектов.СвязаннаяСтрока <> """")");
	Иначе 
		Запрос.Текст = СтрШаблон(Запрос.Текст, "", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Документ", Форма.Объект.Ссылка);
	
	ПоказыватьТолькоОригиналыВСвязях = Ложь;
	Если ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов") Тогда 
		ПоказыватьТолькоОригиналыВСвязях = Форма.ПоказыватьТолькоОригиналыВСвязях;
	КонецЕсли;	
	
	КоличествоСвязей = 0;
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	МассивСвязей = Результат.Выгрузить().ВыгрузитьКолонку("СвязанныйДокументСтрока");
	ОбщегоНазначенияДокументооборотКлиентСервер.УдалитьПустыеЗначения(МассивСвязей);
	МассивСвязей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСвязей);
	МассивБезСтрок = Новый Массив;
	Для Каждого СвязОбъект Из МассивСвязей Цикл 
		Если ТипЗнч(СвязОбъект) = Тип("Строка") Тогда 
			Продолжить;
		КонецЕсли;
		МассивБезСтрок.Добавить(СвязОбъект);
	КонецЦикла;
	
	ПраваСотрудников = ДокументооборотПраваДоступа.ПраваСотрудниковПоОбъектам(
		МассивБезСтрок, 
		Истина,
		Сотрудники.ВсеСотрудникиТекущегоПользователя(Ложь));
	
	ВыборкаТипСвязи = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаТипСвязи.Следующий() Цикл
		
		ВыборкаТипСвязиДопОбъект = ВыборкаТипСвязи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаТипСвязиДопОбъект.Следующий() Цикл
		
			НоваяСтрока = Дерево.Строки.Добавить();
			НоваяСтрока.ТипСвязи = ВыборкаТипСвязи.ТипСвязи;
			НоваяСтрока.ЭтоРодитель = Истина;
			НоваяСтрока.ИндексКартинки = -1;
			НоваяСтрока.ПометкаУдаления = Ложь;
			НоваяСтрока.ДополнительныйОбъектСвязи = ВыборкаТипСвязиДопОбъект.ДополнительныйОбъектСвязи;
			
			КоличествоДокументов = 0;
			ВыборкаДок = ВыборкаТипСвязиДопОбъект.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДок.Следующий() Цикл
				Если Не ЗначениеЗаполнено(ВыборкаДок.СвязанныйДокументСтрока) Тогда 
					Продолжить;
				КонецЕсли;	
				
				Если ТипЗнч(СвязОбъект) <> Тип("Строка") Тогда
					ДоступЕсть = Ложь;
					СтрокиДоступа = ПраваСотрудников.НайтиСтроки(
						Новый Структура("ОбъектДоступа", ВыборкаДок.СвязанныйДокументСтрока));
					Для Каждого СтрокаДоступа Из СтрокиДоступа Цикл 
						Если СтрокаДоступа.Чтение Тогда 
							ДоступЕсть = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если Не ДоступЕсть Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				СтрокаДок = НоваяСтрока.Строки.Добавить();
				СтрокаДок.ТипСвязи = ВыборкаДок.ТипСвязи;
				
				Если ТипЗнч(ВыборкаДок.СвязанныйДокументСтрока) = Тип("Строка") Тогда 
					СтрокаДок.СвязаннаяСтрока = ВыборкаДок.СвязанныйДокументСтрока;
					СтрокаДок.ПометкаУдаления = Ложь;
					
					Если ЗначениеЗаполнено(ВыборкаДок.Комментарий) Тогда
						СтрокаДок.Представление = СтрШаблон(НСтр("ru = '%1 (Внешняя ссылка)'"), ВыборкаДок.Комментарий);
					Иначе
						СтрокаДок.Представление = СтрокаДок.СвязаннаяСтрока;
					КонецЕсли;
				
				Иначе
					СтрокаДок.СвязанныйОбъект = ВыборкаДок.СвязанныйДокументСтрока;
					ИмяПредмета = МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(
						СтрокаДок.СвязанныйОбъект);
					СтрокаДок.Представление = ОбщегоНазначенияДокументооборотВызовСервера.ПредметСтрокой(
						СтрокаДок.СвязанныйОбъект, ИмяПредмета);
					СтрокаДок.ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
						СтрокаДок.СвязанныйОбъект, "ПометкаУдаления");
					
					Если ВыборкаДок.СвязанныйОбъектЯвляетсяДокументом Тогда
						РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДок.СвязанныйОбъект,
							"ВидДокумента.УчитыватьСуммуДокумента, Сумма, Валюта.Наименование");
							
						Если РеквизитыДокумента.ВидДокументаУчитыватьСуммуДокумента = Истина 
							И РеквизитыДокумента.Сумма > 0 Тогда 
							Копейки = РеквизитыДокумента.Сумма - Цел(РеквизитыДокумента.Сумма);
							СтрокаДок.Представление = Лев(СтрокаДок.Представление, СтрДлина(СтрокаДок.Представление) - 1)+ ", "
								+ ?(Копейки = 0, Формат(РеквизитыДокумента.Сумма, "ЧДЦ=0; ЧН=0"), 
									Формат(РеквизитыДокумента.Сумма, "ЧДЦ=2; ЧН=0; ЧРД=."))
								+ " " + РеквизитыДокумента.ВалютаНаименование 
								+ ")";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				СтрокаДок.ИндексКартинки = -1;
				СтрокаДок.ДополнительныйОбъектСвязи = ВыборкаТипСвязиДопОбъект.ДополнительныйОбъектСвязи;
				КоличествоСвязей = КоличествоСвязей + 1; 
				
				ВыборкаФайл = ВыборкаДок.Выбрать();
				Пока ВыборкаФайл.Следующий() Цикл
					Если Не ЗначениеЗаполнено(ВыборкаФайл.Файл) Тогда 
						Продолжить;
					КонецЕсли;	
					
					Если ПоказыватьТолькоОригиналыВСвязях И Не ВыборкаФайл.ЯвляетсяОригиналом Тогда 
						Продолжить;
					КонецЕсли;	
					
					СтрокаФайл = СтрокаДок.Строки.Добавить();
					СтрокаФайл.Файл = ВыборкаФайл.Файл;
					СтрокаФайл.ИндексКартинки = ВыборкаФайл.ИндексКартинкиФайла;
					СтрокаФайл.Представление = ВыборкаФайл.ПолноеНаименованиеФайла;
					СтрокаФайл.ТипСвязи = ВыборкаФайл.ТипСвязи;
					СтрокаФайл.ПометкаУдаления = ВыборкаФайл.ФайлПометкаУдаления;
					
					СтрокаФайл.РасширениеФайла = ВыборкаФайл.РасширениеФайла;
					СтрокаФайл.Размер = ВыборкаФайл.Размер;
					
					Если ТипЗнч(ВыборкаФайл.СвязанныйДокументСтрока) = Тип("Строка") Тогда 
						СтрокаФайл.СвязаннаяСтрока = ВыборкаФайл.СвязанныйДокументСтрока;
					Иначе
						СтрокаФайл.СвязанныйОбъект = ВыборкаФайл.СвязанныйДокументСтрока;
					КонецЕсли;
					
					СтрокаФайл.ЯвляетсяОригиналом = ВыборкаФайл.ЯвляетсяОригиналом;
				КонецЦикла;
					
				КоличествоДокументов = КоличествоДокументов + 1;	
			КонецЦикла;	
			
			Если ЗначениеЗаполнено(НоваяСтрока.ДополнительныйОбъектСвязи) Тогда 
				НоваяСтрока.Представление = Строка(НоваяСтрока.ТипСвязи) + ", " + Строка(НоваяСтрока.ДополнительныйОбъектСвязи)
					+ " (" + КоличествоДокументов + ")";
			Иначе 
				НоваяСтрока.Представление = Строка(НоваяСтрока.ТипСвязи) + " (" + КоличествоДокументов + ")";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	УдалитьПустыеТипыСвязи(Дерево);
	Форма.ЗначениеВРеквизитФормы(Дерево, "ДеревоСвязей");
	Форма.КоличествоСвязей = КоличествоСвязей;
	
КонецПроцедуры

// Заполняет список (таблицу значений) файлов в карточке документа.
//
// Параметры:
//   Форма                    - ФормаКлиентскогоПриложения - форма документа, в котором заполняется список файлов
//   ЗаполнитьПризнакОригинал - Булево - Истина, если требуется заполнить признак оригинала
//   ЭтоСписок                - Булево - Истина, если обращение к функции выполняется из списка документов
//   ЕстьЭДО 				  - Булево, есть связаныне документы ЭДО
//
Процедура ЗаполнитьСписокФайловДокумента(Форма, ЗаполнитьПризнакОригинал = Ложь, 
	ЭтоСписок = Ложь,
	ОтметитьЗахваченныеФайлы = Ложь,
	ЕстьЭДО = Ложь) Экспорт 
	
	Если ЭтоСписок Тогда 
		Документ = Форма.ТекущийДокумент;
	Иначе 
		Документ = Форма.Объект;
	КонецЕсли;
	
	Если Документ.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	МассивКомбинацийРолей = Новый Массив;
	ТаблицаФайлы = ПолучитьДанныеФайловДляСписка(Неопределено, Документ.Ссылка, 
		Форма.ПоказыватьУдаленныеФайлы, ОтметитьЗахваченныеФайлы,
		МассивКомбинацийРолей);
	
	Если Не ЗаполнитьПризнакОригинал Тогда
		СоответствиеФайлы = Новый Соответствие;
		Для Каждого Строка Из Форма.Файлы.ПолучитьЭлементы() Цикл
			Если Не Строка.ЭтоРольФайла И Не Строка.ЭтоДокумент И Не Строка.ЭтоДокументЭДО Тогда
				СоответствиеФайлы.Вставить(Строка.Ссылка, Строка.Оригинал);
			Иначе
				
				Для Каждого Подстрока Из Строка.ПолучитьЭлементы() Цикл
					СоответствиеФайлы.Вставить(Подстрока.Ссылка, Подстрока.Оригинал);
				КонецЦикла;
				
			КонецЕсли;
				
		КонецЦикла;
		
		Для Каждого Строка Из ТаблицаФайлы Цикл
			ЯвляетсяОригиналом = СоответствиеФайлы.Получить(Строка.Ссылка);
			Если ЯвляетсяОригиналом <> Неопределено Тогда
				Строка.Оригинал = ЯвляетсяОригиналом;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Форма.Файлы.ПолучитьЭлементы().Очистить();
	
	ИмяСписка = "Файлы";
	Если Форма.ИмяФормы = "РегистрСведений.МоиДокументы.Форма.ФормаМоиДокументы"
	Или ЭтоСписок Тогда 
		ИмяСписка = "ФайлыДокумента";
	КонецЕсли;
	
	ИспользоватьРолиФайлов = ПолучитьФункциональнуюОпцию("ИспользоватьРолиФайлов");
	Если (Не ИспользоватьРолиФайлов Или МассивКомбинацийРолей.Количество() = 0) Тогда
		
		// "плоское" дерево заполним
		
		Для Каждого Стр Из ТаблицаФайлы Цикл
			НовСтр = Форма.Файлы.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Стр);
		КонецЦикла;
		
		Если Не ЕстьЭДО Тогда
			Форма.Элементы[ИмяСписка].Отображение = ОтображениеТаблицы.Список;
		Иначе
			Форма.Элементы[ИмяСписка].Отображение = ОтображениеТаблицы.Дерево;
		КонецЕсли;
		
		Форма.Элементы.ФайлыРольФайла.Видимость = Ложь;
		
	Иначе
		
		Форма.Элементы[ИмяСписка].Отображение = ОтображениеТаблицы.Дерево;
		Форма.Элементы.ФайлыРольФайла.Видимость = Ложь;
		
		Для Каждого ОписаниеРоли Из МассивКомбинацийРолей Цикл
			
			Ветка = Форма.Файлы.ПолучитьЭлементы().Добавить();
			
			Ветка.Наименование = Строка(ОписаниеРоли.Роль);
			Если ОписаниеРоли.Роль = Справочники.РолиФайлов.ПустаяСсылка() Тогда
				Ветка.Наименование = "<>";
			КонецЕсли;
			
			Ветка.ЭтоРольФайла = Истина;
			Ветка.ИндексКартинки = 2;
			Ветка.СтатусПроверкиЭП = -1;
			Ветка.РольФайла = ОписаниеРоли.Роль;
			Ветка.РольОбязательная = ОписаниеРоли.Обязательная;
			
			Для Каждого Стр Из ТаблицаФайлы Цикл
				Если Стр.РольФайла = ОписаниеРоли.Роль Тогда
					НовСтр = Ветка.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, Стр);
				КонецЕсли;
			КонецЦикла;	
			
			Если Ветка.ПолучитьЭлементы().Количество() <> 0 Тогда  
				
				КолвоФайлов = 0;                             
				Для Каждого СтрФайлов Из Ветка.ПолучитьЭлементы() Цикл
					Если Не СтрФайлов.ПометкаУдаления Тогда
						КолвоФайлов = КолвоФайлов + 1; 
					КонецЕсли;	
				КонецЦикла;	
				
				Ветка.Наименование = Ветка.Наименование 
				+ СтрШаблон(" (%1)", КолвоФайлов);
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЕсли;	
	
	Форма.КоличествоФайлов = ТаблицаФайлы.Количество();
	
	Если ЭтоСписок Тогда 
		Если Форма.КоличествоФайлов > 0 Тогда 
			Форма.ЗаголовокСодержаниеФайлы = 
				СтрШаблон(НСтр("ru = 'Содержание, Файлы (%1)'"),
				Форма.КоличествоФайлов);
		Иначе
			Форма.ЗаголовокСодержаниеФайлы = 
				НСтр("ru = 'Содержание, Файлы'");
		КонецЕсли;
	Иначе 
		Форма.Элементы.НаименованиеФайла.Заголовок = 
			ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(Форма.КоличествоФайлов);
	КонецЕсли;
	
КонецПроцедуры

// Получает данные одного файла для обновления строки списка в карточке документа
//
// Параметры
//    Файл - СправочникСсылка.Файлы - ссылка на файл
//    ЗаполнитьПризнакОригинал - Булево - Истина, если требуется получить признак оригинала
//
// Возвращаемое значение
//    Структура - структура реквизитов файла
//
Функция ПолучитьДанныеФайлаДляСписка(Файл, ЗаполнитьПризнакОригинал = Ложь, ОтметитьЗахваченныеФайлы = Ложь) Экспорт 
	
	СтруктураДанных = Новый Структура;
	
	Файлы = Новый Массив;
	Файлы.Добавить(Файл);
	
	Таблица = ПолучитьДанныеФайловДляСписка(Файлы,,, ОтметитьЗахваченныеФайлы);
	
	Для Инд = 0 По Таблица.Колонки.Количество()-1 Цикл
		ИмяКолонки = Таблица.Колонки[Инд].Имя;
		
		Если Таблица.Количество() > 0 Тогда 
			СтруктураДанных.Вставить(ИмяКолонки, Таблица[0][Инд]);
		Иначе
			СтруктураДанных.Вставить(ИмяКолонки);
		КонецЕсли;
	КонецЦикла;	
	
	Если Не ЗаполнитьПризнакОригинал Тогда 
		СтруктураДанных.Удалить("Оригинал");
	КонецЕсли;	
	
	Возврат СтруктураДанных;
	
КонецФункции

// Получает данные нескольких файла для обновления строк списка в карточке документа.
//
// Параметры:
//   Файлы - Массив из СправочникСсылка.Файлы - массив ссылок на файлы.
//   ВладелецФайла - ОпределяемыйТип.ВладелецФайлов
//   ПоказыватьУдаленныеФайлы - Булево
//   ОтметитьЗахваченныеФайлы - Булево
//   МассивКомбинацийРолей - Массив из Структура:
//     * Роль - СправочникСсылка.РолиФайлов
//     * Обязательная - Булево
//   ЗаполнятьДанныеДляВизуализации - Булево
//   ВидДокумента - СправочникСсылка.ВидыДокументов
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица с реквизитами файлов.
//
Функция ПолучитьДанныеФайловДляСписка(Файлы, ВладелецФайла = Неопределено, ПоказыватьУдаленныеФайлы = Ложь,
		ОтметитьЗахваченныеФайлы = Ложь, МассивКомбинацийРолей = Неопределено, ЗаполнятьДанныеДляВизуализации = Истина,
		ВидДокумента = Неопределено) Экспорт
	
	МассивКомбинацийРолей = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Наименование КАК Наименование,
		|	Файлы.ВерсияДанных КАК ВерсияДанных,
		|	ПОДСТРОКА(Файлы.Описание, 0, 140) КАК Описание,
		|	Файлы.Ссылка КАК Ссылка,
		|	Файлы.ВладелецФайла КАК ВладелецФайла,
		|	Файлы.ДатаСоздания КАК ДатаСоздания,
		|	Файлы.Автор КАК Автор,
		|	Файлы.Редактирует КАК Редактирует,
		|	Файлы.ХранитьВерсии КАК ХранитьВерсии,
		|	Файлы.ПометкаУдаления КАК ПометкаУдаления,
		|	Файлы.ТекущаяВерсияРазмер / 1024 КАК ТекущаяВерсияРазмер,
		|	Файлы.ТекущаяВерсияДатаСоздания КАК ТекущаяВерсияДатаСоздания,
		|	Файлы.ТекущаяВерсияАвтор КАК ТекущаяВерсияАвтор,
		|	ВЫБОР
		|		КОГДА Файлы.ПометкаУдаления
		|			ТОГДА Файлы.ИндексКартинки + 1
		|		ИНАЧЕ Файлы.ИндексКартинки
		|	КОНЕЦ КАК ИндексКартинки,
		|	ВЫБОР
		|		КОГДА Файлы.Редактирует В (&ПользовательИЕгоСотрудники)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РедактируетТекущийПользователь,
		|	Файлы.ТекущаяВерсияРасширение КАК Расширение,
		|	Файлы.ТекущаяВерсияРасширение КАК ТекущаяВерсияРасширение,
		|	Файлы.ПодписанЭП КАК ПодписанЭП,
		|	ВЫБОР
		|		КОГДА Файлы.Зашифрован
		|			ТОГДА ВЫБОР
		|				КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписиНет)
		|					ТОГДА 0
		|				КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьНеПроверена)
		|					ТОГДА 2
		|				КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьДействительна)
		|					ТОГДА 4
		|				КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьНедействительна)
		|					ТОГДА 6
		|				ИНАЧЕ ВЫБОР
		|					КОГДА Файлы.ПодписанЭП
		|						ТОГДА 2
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|			КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|			КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписиНет)
		|				ТОГДА -1
		|			КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьНеПроверена)
		|				ТОГДА 1
		|			КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьДействительна)
		|				ТОГДА 3
		|			КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьНедействительна)
		|				ТОГДА 5
		|			ИНАЧЕ ВЫБОР
		|				КОГДА Файлы.ПодписанЭП
		|					ТОГДА 1
		|				ИНАЧЕ -1
		|			КОНЕЦ
		|		КОНЕЦ
		|	КОНЕЦ КАК СтатусПроверкиЭП,
		|	Файлы.Зашифрован КАК Зашифрован,
		|	ВЫБОР
		|		КОГДА Файлы.ШаблонОснованиеДляСоздания = ЗНАЧЕНИЕ(Справочник.Файлы.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК СозданИзШаблона,
		|	ЕСТЬNULL(СведенияОФайлахДокументооборот.ЯвляетсяОригиналом, ЛОЖЬ) КАК Оригинал,
		|	ЕСТЬNULL(СведенияОФайлахДокументооборот.ПорядковыйНомерВложения, 0) КАК ПорядковыйНомерВложения,
		|	ЕСТЬNULL(ФайлыСозданныеПоШаблону.СозданПоШаблону, ЛОЖЬ) КАК СозданПоШаблонуДокумента,
		|	ЕСТЬNULL(НастройкиЗаполнения.Условие, ЗНАЧЕНИЕ(Справочник.АлгоритмыПроверки.ПустаяСсылка)) КАК Условие,
		|	0 КАК НомерРоли,
		|	НЕ (ПредпросмотрФайлов.Файл Есть NULL) КАК ПредпросмотрЕстьВБазе,
		|	ЕСТЬNULL(ТаймлистДанныеРаботыСервиса.Статус, ЗНАЧЕНИЕ(Перечисление.ТаймлистСтатусы.ПустаяСсылка)) КАК ТаймлистСтатус,
		|	ЕСТЬNULL(ТаймлистДанныеРаботыСервиса.СледующиеШаги, """") КАК ТаймлистСледующиеШаги,
		|	ЕСТЬNULL(ТаймлистФайлыВОбработке.Задание, ЗНАЧЕНИЕ(Перечисление.ТаймлистТипыЗаданий.ПустаяСсылка)) КАК ТаймлистЗадание,
		|	ЕСТЬNULL(ТекстыВерсийФайлов.СтатусРаспознаванияТекста, ЗНАЧЕНИЕ(Перечисление.СтатусыРаспознаванияТекста.ПустаяСсылка)) КАК СтатусРаспознаванияТекста
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФайлыСозданныеПоШаблону КАК ФайлыСозданныеПоШаблону
		|		ПО (ФайлыСозданныеПоШаблону.Файл = Файлы.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныДокументов.ПравилаАвтозаполнения КАК НастройкиЗаполнения
		|		ПО Файлы.ШаблонОснованиеДляСоздания = НастройкиЗаполнения.ШаблонФайла
		|		ИЛИ Файлы.Ссылка = НастройкиЗаполнения.ШаблонФайла
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФайлахДокументооборот КАК СведенияОФайлахДокументооборот
		|		ПО (СведенияОФайлахДокументооборот.Файл = Файлы.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|		ПО Файлы.Ссылка = КешИнформацииОбОбъектах.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредпросмотрФайлов КАК ПредпросмотрФайлов
		|		ПО (ПредпросмотрФайлов.Файл = Файлы.Ссылка
		|		И ПредпросмотрФайлов.ВерсияФайла = Файлы.ТекущаяВерсия И ПредпросмотрФайлов.НомерБлока = 0)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТаймлистДанныеРаботыСервиса КАК ТаймлистДанныеРаботыСервиса
		|		ПО (ТаймлистДанныеРаботыСервиса.ВерсияФайла = Файлы.ТекущаяВерсия)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТаймлистФайлыВОбработке КАК ТаймлистФайлыВОбработке
		|		ПО (ТаймлистФайлыВОбработке.ВерсияФайла = Файлы.ТекущаяВерсия)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекстыВерсийФайлов КАК ТекстыВерсийФайлов
		|		ПО (ТекстыВерсийФайлов.Версия = Файлы.ТекущаяВерсия)
		|ГДЕ
		|	Файлы.Ссылка В(&Файлы)
		|УПОРЯДОЧИТЬ ПО
		|	Наименование");
	
	Если Файлы = Неопределено Тогда
		Если ПоказыватьУдаленныеФайлы Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"Файлы.Ссылка В(&Файлы)", "Файлы.ВладелецФайла = &ВладелецФайла И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"Файлы.Ссылка В(&Файлы)", "Файлы.ВладелецФайла = &ВладелецФайла И НЕ Файлы.ПометкаУдаления И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL");
		КонецЕсли;
		Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	Иначе
		Запрос.УстановитьПараметр("Файлы", Файлы);
	КонецЕсли;
	ПользовательИЕгоСотрудники = СотрудникиВызовСервера.ПользовательИЕгоСотрудники(Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ПользовательИЕгоСотрудники", ПользовательИЕгоСотрудники);
	
	ТаблицаФайлов = Запрос.Выполнить().Выгрузить();
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.РолиФайлов"));
	ТаблицаФайлов.Колонки.Добавить("РольФайла", Новый ОписаниеТипов(Массив));
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СписокЗначений"));
	ТаблицаФайлов.Колонки.Добавить("РолиФайлов", Новый ОписаниеТипов(Массив));
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.Файлы"));
	ТаблицаФайлов.Колонки.Добавить("ФайлВизуализации", Новый ОписаниеТипов(Массив));
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Булево"));
	ТаблицаФайлов.Колонки.Добавить("ФайлВизуализацииЗанятМной", Новый ОписаниеТипов(Массив));
	
	Если ОтметитьЗахваченныеФайлы Тогда
		ТаблицаФайлов.Колонки.Добавить("ПолноеИмяФайлаВРабочемКаталоге", Новый ОписаниеТипов("Строка"));
		ТаблицаФайлов.Колонки.Добавить("ДатаМодификацииУниверсальнаяВБазе", Новый ОписаниеТипов("Дата"));
		
		Для Каждого ФайлыПисьмаСтрока Из ТаблицаФайлов Цикл
			
			Если ФайлыПисьмаСтрока.РедактируетТекущийПользователь = Истина
					И ЗначениеЗаполнено(ФайлыПисьмаСтрока.Ссылка) Тогда
				
				ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ФайлыПисьмаСтрока.Ссылка);
				ФайлыПисьмаСтрока.ПолноеИмяФайлаВРабочемКаталоге = ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге;
				ФайлыПисьмаСтрока.ДатаМодификацииУниверсальнаяВБазе = ДанныеФайла.ДатаМодификацииУниверсальная;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ЗаполнятьДанныеДляВизуализации Тогда
		
		ДокументПодписан = Ложь;
		Если Не ЗначениеЗаполнено(ВладелецФайла) И ТаблицаФайлов.Количество() <> 0 Тогда
			ВладелецФайла = ТаблицаФайлов[0].ВладелецФайла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВладелецФайла) Тогда
			ДокументПодписан = ДействияСервер.ДокументПодписан(ВладелецФайла);
		КонецЕсли;
		
		Для Каждого ФайлыПисьмаСтрока Из ТаблицаФайлов Цикл
			// Заполним данные для файла визуализации.
			
			Если (ФайлыПисьмаСтрока.ПодписанЭП = Истина Или ДокументПодписан)
					И ЗначениеЗаполнено(ФайлыПисьмаСтрока.Ссылка) Тогда
				
				Если РаботаСФайламиКлиентСервер.ЭтоРасширениеДляАвтовизуализации(ФайлыПисьмаСтрока.Расширение) Тогда
					
					ФайлыПисьмаСтрока.ФайлВизуализации = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьСлужебныйФайл(
						ФайлыПисьмаСтрока.ВладелецФайла,
						ФайлыПисьмаСтрока.Ссылка,
						Перечисления.ОтношенияСлужебныхФайлов.ВизуализацияЭП);
					Если ЗначениеЗаполнено(ФайлыПисьмаСтрока.ФайлВизуализации) Тогда
						Редактирует = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
							ФайлыПисьмаСтрока.ФайлВизуализации, "Редактирует");
						ФайлыПисьмаСтрока.ФайлВизуализацииЗанятМной =
							(ПользовательИЕгоСотрудники.Найти(Редактирует) <> Неопределено);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ИспользованныеРоли = Новый Соответствие;
	
	Если ЗначениеЗаполнено(ВладелецФайла) И ДелопроизводствоКлиентСервер.ЭтоДокумент(ВладелецФайла) Тогда
		
		КэшДокументыПредприятияФормаЭлемента = КэшиНаВремяВызоваПовтИсп.КэшДокументыПредприятияФормаЭлемента();
		Если КэшДокументыПредприятияФормаЭлемента.Инициализирован
				И КэшДокументыПредприятияФормаЭлемента.КэшДокумента.Ссылка = ВладелецФайла Тогда
			ВидДокумента = КэшДокументыПредприятияФормаЭлемента.КэшДокумента.ВидДокумента;
			РолиФайлов = КэшДокументыПредприятияФормаЭлемента.КэшВидаДокумента.РолиФайлов;
		Иначе
			Если ВидДокумента = Неопределено Тогда
				ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецФайла, "ВидДокумента");
			КонецЕсли;
			РолиФайлов = РолиФайловДляВидаДокументов(ВидДокумента);
		КонецЕсли;
		
		Порядок = 0;
		Для Каждого Стр Из РолиФайлов Цикл
			ИспользованныеРоли.Вставить(Стр.Роль, 1);
			МассивКомбинацийРолей.Добавить(Новый Структура("Роль, Обязательная", Стр.Роль, Стр.Обязательная));
		КонецЦикла;
		
	КонецЕсли;
	
	// Прочитаем РолиФайловДокументов для массива файлов.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РолиФайловДокументов.Файл КАК Файл,
		|	РолиФайловДокументов.Роль КАК Роль
		|ИЗ
		|	РегистрСведений.РолиФайловДокументов КАК РолиФайловДокументов
		|ГДЕ
		|	РолиФайловДокументов.Файл В(&Файлы)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Файл");
	Запрос.УстановитьПараметр("Файлы", ТаблицаФайлов.ВыгрузитьКолонку("Ссылка"));
	ТаблРоли = Запрос.Выполнить().Выгрузить();
	
	ТаблРолиКопия = ТаблРоли.Скопировать();
	ТаблРолиКопия.Свернуть("Роль");
	Для Каждого Стр Из ТаблРолиКопия Цикл
		Если ИспользованныеРоли.Получить(Стр.Роль) = Неопределено Тогда
			ИспользованныеРоли.Вставить(Стр.Роль, 1);
			МассивКомбинацийРолей.Добавить(Новый Структура("Роль, Обязательная", Стр.Роль, Ложь));
		КонецЕсли;
	КонецЦикла;
	
	ЕстьНепустыеРоли = (ТаблРоли.Количество() <> 0)
		Или (МассивКомбинацийРолей.Количество() <> 0);
	
	ДобавленаВеткаБезРоли = Ложь;
	
	// Заполним у файлов (ТаблицаФайлов) РольФайла.
	Для Каждого ФайлыПисьмаСтрока Из ТаблицаФайлов Цикл
		
		ПараметрыОтбора = Новый Структура("Файл", ФайлыПисьмаСтрока.Ссылка);
		СтрокиРолей = ТаблРоли.НайтиСтроки(ПараметрыОтбора);
		
		Если СтрокиРолей.Количество() <> 0 Тогда
			
			ТекРоль = СтрокиРолей[0].Роль;
			ФайлыПисьмаСтрока.РольФайла = ТекРоль;
			
		Иначе // Создадим ветку для файлов без ролей.
			
			Если ЕстьНепустыеРоли И Не ДобавленаВеткаБезРоли Тогда
				
				ДобавленаВеткаБезРоли = Истина;
			
				МассивКомбинацийРолей.Добавить(
					Новый Структура("Роль, Обязательная", Справочники.РолиФайлов.ПустаяСсылка(), Ложь));
				
				ФайлыПисьмаСтрока.РольФайла = Справочники.РолиФайлов.ПустаяСсылка();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаФайлов.Сортировать("НомерРоли, ПорядковыйНомерВложения, Наименование");
	
	Возврат ТаблицаФайлов;
	
КонецФункции

// По массиву ролей вернет строку вида "Роль1, Роль2, Роль3, ....."
Функция СтрокаИдРолей(ТекМассивРолей) Экспорт
	
	ИдРолей = "";
	
	Для Каждого Роль Из ТекМассивРолей Цикл
		
		Если ЗначениеЗаполнено(ИдРолей) Тогда
			ИдРолей = ИдРолей + ", ";
		КонецЕсли;	
		ИдРолей = ИдРолей + Строка(Роль);
		
	КонецЦикла;	
	
	Возврат ИдРолей;
	
КонецФункции	

// Сохраняет в регистрах сведения, что файл является скан-копией оригинала документа
//
// Параметры:
//    Файл 			- СправочникСсылка.Файлы - ссылка на файл
//    ВладелецФайла - Произвольный - ссылка на владельца файла, необязательный,
//									 если не указан, то владелец получается из реквизита файла
//    ЯвляетсяОригиналом - Булево - признак оригинала, с которым будут сохранены сведения о файле
//    ОригиналПолученУстановленоВручную - Булево, Неопределено - признак, что отметка о получении оригинала была
//	  установлена в карточке документа вручную, вне зависимости от значения отметки "скан-копия оригинала" в списке
//	  файлов, Неопределено - если не было изменений информации о налиичи или отстутствии оригинала
//
Процедура СохранитьСведенияОбОригиналеФайла(
	Файл, 
	ВладелецФайла = Неопределено, 
	ЯвляетсяОригиналом = Истина,
	ОригиналПолученУстановленоВручную = Ложь) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ВладелецФайла) Тогда 
		ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ВладелецФайла");
	КонецЕсли;
	
	Если Не ДелопроизводствоКлиентСервер.ЭтоДокумент(ВладелецФайла) Тогда 
		Возврат
	КонецЕсли;
	
	РегистрыСведений.СведенияОФайлахДокументооборот.УстановитьПризнак(Файл, "ЯвляетсяОригиналом", ЯвляетсяОригиналом);
	
	Если ОригиналПолученУстановленоВручную = Ложь Тогда
		ОбновитьСведенияОНаличииОригинала(ВладелецФайла);
	КонецЕсли;
	
КонецПроцедуры	

// Сохраняет в регистрах сведения информацию о том, что файлы являются скан-копией оригинала документов
//
// Параметры
//    МассивФайлов 	- Массив - содержащий обрабатываемые файлы
//    ЯвляетсяОригиналом - Булево - признак оригинала, с которым будут сохранены сведения о файле
//
Процедура СохранитьСведенияОбОригиналеФайлов(МассивФайлов, ЯвляетсяОригиналом = Истина) Экспорт
	
	Для Каждого Файл Из МассивФайлов Цикл	
		СохранитьСведенияОбОригиналеФайла(Файл,, ЯвляетсяОригиналом);
	КонецЦикла; 	

КонецПроцедуры 

// Обновляет сведения о наличии скан-копии оригинала в документе
//
// Параметры
//    ВладелецФайла - СправочникСсылка.ДокументыПредприятия - ссылка на документ
//
Процедура ОбновитьСведенияОНаличииОригинала(ВладелецФайла) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ДелопроизводствоКлиентСервер.ЭтоДокумент(ВладелецФайла) Тогда 
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.СведенияОФайлахДокументооборот КАК СведенияОФайлахДокументооборот
	|ГДЕ
	|	СведенияОФайлахДокументооборот.Файл.ВладелецФайла = &ВладелецФайла
	|	И СведенияОФайлахДокументооборот.ЯвляетсяОригиналом
	|	И НЕ СведенияОФайлахДокументооборот.Файл.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	СодержитОригинал = Не Запрос.Выполнить().Пустой();
		
	ЗаписатьДанныеДокумента(ВладелецФайла, "СодержитОригинал", СодержитОригинал);
		
	Если СодержитОригинал И Не ДелопроизводствоКлиентСервер.ЭтоИсходящийДокумент(ВладелецФайла) Тогда 
		РегистрыСведений.ДанныеДокументовПредприятия.ЗаписатьОтметкуОПолученииОригиналаДокумента(
			ВладелецФайла, СодержитОригинал);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, что в регистре СведенияОФайлахДокументооборот есть запись для переданного файла
//
// Параметры
//    Файл - СправочникСсылка.Файлы - ссылка на файл
//
// Возвращаемое значение
//    Булево - Истина, если в регистре СведенияОФайлахДокументооборот есть запись для переданного файла
//
Функция ЕстьСведенияОбОригиналеФайла(Файл) Экспорт 
	
	Возврат ФайлЯвляетсяОригиналом(Файл);	
	
КонецФункции	

// Возвращает контрагента и контактное лицо по текстовым значениям
//
// Параметры:
//  Контрагент   - Строка - наименование искомого контрагента
//  КонтактноеЛицо  - Строка - наименование искомого контактного лица
//
// Возвращаемое значение
//    Структура - содержит ссылки на контрагента и контактное лицо
//
Функция НайтиКонтрагентаИКонтактноеЛицо(Контрагент, КонтактноеЛицо = "") Экспорт
	
	Структура = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда 
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КонтактныеЛица.Ссылка КАК КонтактноеЛицо,
			|	КонтактныеЛица.Владелец КАК Контрагент
			|ИЗ
			|	Справочник.КонтактныеЛица КАК КонтактныеЛица
			|ГДЕ
			|	НЕ КонтактныеЛица.ПометкаУдаления
			|	И КонтактныеЛица.Наименование = &КонтактноеЛицо
			|	И КонтактныеЛица.Владелец.Наименование = &Контрагент";	
		Запрос.УстановитьПараметр("КонтактноеЛицо", КонтактноеЛицо);	
	Иначе 
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Контрагенты.Ссылка КАК Контрагент,
			|	ЗНАЧЕНИЕ(Справочник.КонтактныеЛица.ПустаяСсылка) КАК КонтактноеЛицо
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	НЕ Контрагенты.ПометкаУдаления
			|	И Контрагенты.Наименование = &Контрагент";
	КонецЕсли;	
		
	Запрос.УстановитьПараметр("Контрагент", Контрагент);	
    Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Структура.Вставить("КонтактноеЛицо", Выборка.КонтактноеЛицо);	
		Структура.Вставить("Контрагент", Выборка.Контрагент);	
	КонецЕсли;

	Возврат Структура;
	
КонецФункции	

// Сохраняет в регистрах сведения об оригиналах в таблице файлов из карточки документа
//
// Параметры:
//    Файлы - ДанныеФормыКоллекция - таблица файлов
//	  Документ - СправочникСсылка.ДокументыПредприятия - ссылка на документ
//	  ОригиналПолученУстановленоВручную - Булево, Неопределено - признак, что отметка о получении оригинала была
//	  установлена в карточке документа вручную, вне зависимости от значения отметки "скан-копия оригинала" в списке
//	  файлов, Неопределено - если не было изменений информации о налиичи или отстутствии оригинала
//
Процедура СохранитьСведенияОбОригиналахФайловИзКарточки(Файлы, Документ,
		ОригиналПолученУстановленоВручную = Ложь) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);

	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов") Тогда
		Возврат;
	КонецЕсли;

	НачатьТранзакцию();
	Попытка
		Для Каждого Строка Из Файлы.ПолучитьЭлементы() Цикл			
			Если Не Строка.ЭтоРольФайла И Не Строка.ЭтоДокументЭДО Тогда
				РегистрыСведений.СведенияОФайлахДокументооборот.УстановитьПризнак(
					Строка.Ссылка, "ЯвляетсяОригиналом", Строка.Оригинал);
			Иначе
				Для Каждого Подстрока Из Строка.ПолучитьЭлементы() Цикл
					РегистрыСведений.СведенияОФайлахДокументооборот.УстановитьПризнак(
						Подстрока.Ссылка, "ЯвляетсяОригиналом", Подстрока.Оригинал);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		ЗаписатьСодержитОригиналВРегистр(Файлы, Документ, ОригиналПолученУстановленоВручную);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Проверяет ведется ли по документу учет не действующих документов
//
// Параметры
//    Документ - любая ссылка - проверяемый документ
//
// Возвращаемое значение
//    Булево - Истина, если по документу ведется учет недействующих документов,
//	 		 - Ложь в противном случае
//
Функция УчитыватьНеДействующие(Документ) Экспорт
	
	Возврат
		ТипЗнч(Документ) = Тип("СправочникСсылка.ДокументыПредприятия")
		И ЗначениеЗаполнено(Документ.ВидДокумента)
		И Документ.ВидДокумента.УчитыватьНедействующиеДокументы;
	
КонецФункции

// Рассчитывает количество дел и документов, хранящихся в переданном месте хранения
//
// Параметры:
//    МестоХранения - СправочникСсылка.МестаХраненияДел  - анализируемое место хранения
//
// Возвращаемое значение:
//    Структура - содержит количество дел и количество документов,
//		которые хранятся в анализируемом месте хранения
//
Функция РассчитатьКоличествоХранимыхДокументов(МестоХранения) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК КоличествоДел,
		|	0 КАК КоличествоДокументов,
		|	0 КАК КоличествоПодчиненных
		|ИЗ
		|	Справочник.ДелаХраненияДокументов КАК ДелаХраненияДокументов
		|ГДЕ
		|	НЕ ДелаХраненияДокументов.ПометкаУдаления
		|	И (ДелаХраненияДокументов.МестоХраненияДел = &МестоХранения
		|			ИЛИ ДелаХраненияДокументов.МестоХраненияДел В ИЕРАРХИИ (&МестоХранения))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	КОЛИЧЕСТВО(*),
		|	0
		|ИЗ
		|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
		|ГДЕ
		|	НЕ ДокументыПредприятия.ПометкаУдаления
		|	И (ДокументыПредприятия.Дело.МестоХраненияДел = &МестоХранения
		|			ИЛИ ДокументыПредприятия.Дело.МестоХраненияДел В ИЕРАРХИИ (&МестоХранения))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	0,
		|	КОЛИЧЕСТВО(*)
		|ИЗ
		|	Справочник.МестаХраненияДел КАК МестаХраненияДел
		|ГДЕ
		|	НЕ МестаХраненияДел.ПометкаУдаления
		|	И МестаХраненияДел.Ссылка В ИЕРАРХИИ(&МестоХранения)
		|	И МестаХраненияДел.Ссылка <> &МестоХранения";
	
	КоличествоДел = 0; КоличествоДокументов = 0; КоличествоПодчиненных = 0;
	Запрос.Параметры.Вставить("МестоХранения", МестоХранения);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		КоличествоДел = КоличествоДел + Выборка.КоличествоДел;
		КоличествоПодчиненных = КоличествоПодчиненных + Выборка.КоличествоПодчиненных;
		КоличествоДокументов = КоличествоДокументов + Выборка.КоличествоДокументов;
	КонецЦикла;
	
	Возврат Новый Структура("КоличествоДел, КоличествоДокументов, КоличествоПодчиненных",
		КоличествоДел, КоличествоДокументов, КоличествоПодчиненных);
	
КонецФункции

// Записывает состояние дела в документы, которые хранятся в деле.
// 
// Параметры:
//  ДелоХранения - СправочникСсылка.ДелаХраненияДокументов - Дело хранения
//  Состояние - ПеречислениеСсылка.СостоянияДелХраненияДокументов - Состояние, которое устанавливается документам.
Процедура ЗаписатьСостояниеДелаВДокументы(ДелоХранения, Состояние) Экспорт
	
	МассивДокументов = КритерииОтбора.ДокументыВДелеТоме.Найти(ДелоХранения);
	Для Каждого Документ Из МассивДокументов Цикл
		ЗаписатьДанныеДокумента(Документ, "СостояниеДелаХранения", Состояние);
	КонецЦикла;
		
КонецПроцедуры

// Возвращает список мест хранения ввода по строке
//
// Параметры:
//    Текст         - Строка - введенный в поле ввода
//    Организация   - СправочникСсылка.Организации  - дополнительная фильтрация по Организации
//    Подразделение - СправочникСсылка.СтруктураПредприятия - дополнительная фильтрация по Подразделению
//
// Возвращаемое значение:
//    ДанныеВыбора - СписокЗначений - содержит места хранения удовлетворяющие условиям отбора
//
Функция СформироватьДанныеВыбораМестХранения(Знач Текст, Знач Организация, Подразделение = Неопределено) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	МестаХраненияДел.Ссылка,
			|	МестаХраненияДел.Наименование
			|ИЗ
			|	Справочник.МестаХраненияДел КАК МестаХраненияДел
			|ГДЕ
			|	МестаХраненияДел.Наименование ПОДОБНО &Текст
			|	И НЕ МестаХраненияДел.ЗапрещеноРазмещатьНовыеДела
			|	И НЕ МестаХраненияДел.ПометкаУдаления"; 
			   
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
	   Запрос.Текст = Запрос.Текст +"
			|	И МестаХраненияДел.Организация В(&Организация)";
		Организации = Новый Массив;
		Организации.Добавить(Справочники.Организации.ПустаяСсылка());
		Организации.Добавить(Организация);
		Запрос.УстановитьПараметр("Организация", Организации);
  	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Запрос.Текст = Запрос.Текст +"
			|	И МестаХраненияДел.Подразделение В(&Подразделение)";
			
		ПустоеИПодразделение = ПолучитьПодразделениеИПустуюСсылку(Подразделение);
		Запрос.УстановитьПараметр("Подразделение", ПустоеИПодразделение);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Возвращает список помещений ввода по строке
//
// Параметры:
//    Текст         - Строка - введенный в поле ввода
//
// Возвращаемое значение:
//    ДанныеВыбора - СписокЗначений - содержит помещения удовлетворяющие условиям отбора
//
Функция СформироватьДанныеВыбораПомещения(Текст) Экспорт  
	
	ДанныеВыбора = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТерриторииИПомещения.Ссылка
			|ИЗ
			|	Справочник.ТерриторииИПомещения КАК ТерриторииИПомещения
			|ГДЕ
			|	ТерриторииИПомещения.Наименование ПОДОБНО &Текст
			|	И НЕ ТерриторииИПомещения.ПометкаУдаления"; 
			   
	
	Запрос.УстановитьПараметр("Текст", Текст + "%");  
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПланТекст = ДелопроизводствоКлиентСервер.ПолучитьПолныйПутьКПомещению(Выборка.Ссылка);
		ДанныеВыбора.Добавить(Выборка.Ссылка, ПланТекст);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

Процедура АктивизироватьЭлементПоУмолчанию(ЭтаФорма) Экспорт 
	
	Элементы = ЭтаФорма.Элементы;
	Объект = ЭтаФорма.Объект;
	
	Если Не ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		Элементы.ВидИТематикаТекст.АктивизироватьПоУмолчанию = Истина;
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.Заголовок) Тогда
		Элементы.Заголовок.АктивизироватьПоУмолчанию = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Содержание) Тогда
		Элементы.Содержание.АктивизироватьПоУмолчанию = Истина;
		Возврат;
	КонецЕсли;
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			Элементы.Организация.АктивизироватьПоУмолчанию = Истина;
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	
	ВестиУчетПоКонтрагентам = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ВестиУчетПоКонтрагентам");
	Если ВестиУчетПоКонтрагентам Тогда
		Если Не ЭтаФорма.НесколькоКонтрагентов И Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Элементы.Контрагент.АктивизироватьПоУмолчанию = Истина;
			Возврат;
		КонецЕсли;	
		
		Если Не ЭтаФорма.НесколькоКонтрагентов И Не ЗначениеЗаполнено(Объект.ПодписалОтКонтрагента) Тогда
			Элементы.ПодписалОтКонтрагента.АктивизироватьПоУмолчанию = Истина;
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

// Помечает переданные в массиве файлы на удаление
//
// Параметры
//   Форма             - ФормаКлиентскогоПриложения - форма документа, в котором файлы помечаются на удаление
//   МассивФайлов      - Массив - массив обрабатываемых файлов
//   ПометкаУдаления   - Булево - признак снятия/установки пометки на удаление
//   ЭтоСписок         - Булево - Истина, если обращение к функции выполняется из списка документов
//   ЭтоПерезаполнение - Булево - Истина, если обращение к функции выполняется по команде перезаполнения
//   ОригиналПолученУстановленоВручную - Булево, Неопределено - признак, что отметка о получении оригинала была
//	  установлена в карточке документа вручную, вне зависимости от значения отметки "скан-копия оригинала" в списке
//	  файлов, Неопределено - если не было изменений информации о налиичи или отстутствии оригинала
//
Процедура ПометитьФайлыНаУдаление(Форма, МассивФайлов, ПометкаУдаления, 
	ЭтоСписок = Ложь,
	ОтметитьЗахваченныеФайлы = Ложь,
	КоличествоЗанятыхФайлов = Неопределено,
	ЭтоПерезаполнение = Ложь,
	ОригиналПолученУстановленоВручную = Ложь) Экспорт
	
	НадоПересчитатьЗанятыеФайлы = Ложь;
	
	Для Каждого Файл Из МассивФайлов Цикл 
		
		Редактирует = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "Редактирует");
		ТекущийПользовательИСотрудники = СотрудникиПовтИсп.ТекущийПользовательИСотрудники();

		Если ЗначениеЗаполнено(Редактирует) И ТекущийПользовательИСотрудники.Найти(Редактирует) <> Неопределено Тогда
			РаботаСФайламиВызовСервера.ОсвободитьФайлПоСсылке(Файл);
			НадоПересчитатьЗанятыеФайлы = Истина;
		КонецЕсли;	
		
		ЗаблокироватьДанныеДляРедактирования(Файл);
		
		ОбъектФайл = Файл.ПолучитьОбъект();
		ОбъектФайл.Прочитать();
		Если ЭтоПерезаполнение Тогда
			ОбъектФайл.ДополнительныеСвойства.Вставить("ЭтоПерезаполнение", Истина);
		КонецЕсли;
		Если ОригиналПолученУстановленоВручную <> Ложь Тогда
			ОбъектФайл.ДополнительныеСвойства.Вставить("НеОбновлятьДанныеОригинала", Истина);
		КонецЕсли;	
		ОбъектФайл.УстановитьПометкуУдаления(ПометкаУдаления);
		
		РазблокироватьДанныеДляРедактирования(Файл);
		
	КонецЦикла;
	
	Если Не Форма.ПоказыватьУдаленныеФайлы Тогда
		
		СтрокаДокумент = Неопределено;
		ФайлыЭлементы = Форма.Файлы.ПолучитьЭлементы();
		Если ФайлыЭлементы.Количество() <> 0 Тогда
			СтрокаДокумент = ФайлыЭлементы.Получить(0);
			Если Не СтрокаДокумент.ЭтоДокумент Тогда
				СтрокаДокумент = Неопределено;
			КонецЕсли;	
		КонецЕсли;	
		 
		ЗаполнитьСписокФайловДокумента(Форма,, ЭтоСписок, ОтметитьЗахваченныеФайлы);
		
		Если СтрокаДокумент <> Неопределено Тогда
			НовСтр = Форма.Файлы.ПолучитьЭлементы().Вставить(0);
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДокумент);
		КонецЕсли;	
		
	КонецЕсли; 
	
	Если НадоПересчитатьЗанятыеФайлы Тогда
		КоличествоЗанятыхФайлов = РаботаСФайламиВызовСервера.ПолучитьКоличествоЗанятыхФайлов(,,Истина);
	КонецЕсли;	
	
КонецПроцедуры

// Читает обязательные типы связей.
//
// Параметры
//   Форма - управляемая форма
//   ОбязательныеТипыСвязей - возвращаемый параметр - таблица значений  (ТипСвязи  СсылкаНа)
//   Ссылка           - ссылка на вх исх внутр документ
//   ВидДокумента    - вид документа (не заполнен, если ссылка - не вх исх внутр документ)
//
Процедура ПрочитатьОбязательныеТипыСвязей(Форма = Неопределено, ОбязательныеТипыСвязей, Ссылка, ВидДокумента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбязательныеТипыСвязей.Очистить();
	
	Запрос = Новый Запрос;
	
	ТипСсылки = ТипЗнч(Ссылка);
	
	// Работаем только с документами.
	Если ТипСсылки <> Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкаСвязей.ТипСвязи КАК ТипСвязи,
		|	НастройкаСвязей.СсылкаНа КАК СсылкаНа
		|ПОМЕСТИТЬ ВсеНастройки
		|ИЗ
		|	РегистрСведений.НастройкаСвязей КАК НастройкаСвязей
		|ГДЕ
		|	НастройкаСвязей.Обязательная = ИСТИНА
		|	И НастройкаСвязей.СсылкаИз = &СсылкаИз
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	НастройкаСвязей.ТипСвязи,
		|	НастройкаСвязей.СсылкаНа
		|ИЗ
		|	РегистрСведений.НастройкаСвязей КАК НастройкаСвязей
		|ГДЕ
		|	НастройкаСвязей.Обязательная = ИСТИНА
		|	И НастройкаСвязей.СсылкаИз = &СсылкаИзПустойВид
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	НастройкаСвязей.ТипСвязи,
		|	НастройкаСвязей.СсылкаНа
		|ИЗ
		|	РегистрСведений.НастройкаСвязей КАК НастройкаСвязей
		|ГДЕ
		|	НастройкаСвязей.Обязательная = ИСТИНА
		|	И НастройкаСвязей.СсылкаИз В (&Родители)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеНастройки.ТипСвязи,
		|	ВсеНастройки.СсылкаНа
		|ИЗ
		|	ВсеНастройки КАК ВсеНастройки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыСвязей КАК ТипыСвязей
		|		ПО ВсеНастройки.ТипСвязи = ТипыСвязей.Ссылка
		|ГДЕ
		|	НЕ ТипыСвязей.ПометкаУдаления
		|	И НЕ ТипыСвязей.НеИспользовать";
	
	Запрос.УстановитьПараметр("СсылкаИз", ВидДокумента);
	
	Родители = СвязиОбъектов.ПолучитьРодителей(ВидДокумента);
	Запрос.УстановитьПараметр("Родители", Родители);
	Запрос.УстановитьПараметр("СсылкаИзПустойВид", Справочники.ВидыДокументов.ПустаяСсылка());
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Если Форма = Неопределено Тогда
		ОбязательныеТипыСвязей = Таблица;
	Иначе
		Форма.ЗначениеВРеквизитФормы(Таблица, "ОбязательныеТипыСвязей");
	КонецЕсли;
	
КонецПроцедуры

// Читает заполненные связи (из числа переданных типов связей).
//
// Параметры
//   ОбязательныеТипыСвязей - внутри СправочникСсылка.ТипыСвязей.
//   ОбязательныеСвязи - возвращаемый - ТаблицаЗначений - колонки ТипСвязи и СвязанныйДокумент.
//
Процедура ПрочитатьОбязательныеСвязи(Ссылка, Знач ОбязательныеТипыСвязей, ОбязательныеСвязи) Экспорт
	
	ОбязательныеСвязи.Очистить();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Строка Из ОбязательныеТипыСвязей Цикл
		
		ТипСвязи = Строка.ТипСвязи;
		СвязанныйДокумент = СвязиОбъектов.ПолучитьСвязанныйОбъект(Ссылка, ТипСвязи);
		Если СвязанныйДокумент <> Неопределено Тогда
			
			НоваяСтрока = ОбязательныеСвязи.Добавить();
			НоваяСтрока.ТипСвязи = ТипСвязи;
			НоваяСтрока.СсылкаНа = Строка.СсылкаНа;
			НоваяСтрока.СвязанныйОбъект = СвязанныйДокумент;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

// Возвращает запрет создания документов не по шаблону
//
// Параметры
//    Ссылка - ссылка на вх исх внутр документ. Может быть пустой.
//    ВидДокумента - вид документа
//    ПараметрШаблонДокумента - ссылка на шаблон документа
//    ТекстСообщения - Строка - возвращаемый - текст сообщения об ошибке
//    ПроверятьТолькоПриПустойСсылке - булево - проверять только для нового документа
//
// Возвращаемое значение
//    Булево - Истина, если запрещено
Функция ПолучитьЗапретСозданияДокументовНеПоШаблону(Ссылка, 
		ВидДокумента, ПараметрШаблонДокумента, ТекстСообщения, ПроверятьТолькоПриПустойСсылке = Истина) Экспорт
		
	Если ПроверятьТолькоПриПустойСсылке И ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда 
		
		ЗапретитьСозданиеДокументовНеПоШаблону = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ВидДокумента, "ЗапретитьСозданиеДокументовНеПоШаблону");
			
		Если ЗапретитьСозданиеДокументовНеПоШаблону Тогда	
			
			Если Не ЗначениеЗаполнено(ПараметрШаблонДокумента) Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Документы вида ""%1"" можно создавать только по шаблону.'"),
					ВидДокумента);
					
				Возврат Истина;
				
			Иначе // шаблон есть	
				
				ВидДокументаШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					ПараметрШаблонДокумента, "ВидДокумента");
					
				Если ВидДокументаШаблона <> ВидДокумента Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Документы вида ""%1"" можно создавать только по шаблону.'"),
						ВидДокумента);
						
					Возврат Истина;
					
				КонецЕсли;		
					
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции	

//  Возвращает свойство ЗапретитьРедактироватьФайлы у шаблона документа
//
// Параметры
//    ДокументСсылка - ссылка на документ.
//
// Возвращаемое значение
//    Булево - ЗапретитьРедактироватьФайлы.
Функция ПолучитьСвойствоШаблонаЗапретитьРедактироватьФайлы(ДокументСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапретитьРедактироватьФайлы = Ложь;
	
	ШаблонДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДокументСсылка, "Шаблон");
		
	Если ЗначениеЗаполнено(ШаблонДокумента) Тогда 
		
		ЗапретитьРедактироватьФайлы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ШаблонДокумента, "ЗапретитьРедактироватьФайлы");
			
	КонецЕсли;		
		
	Возврат ЗапретитьРедактироватьФайлы;	
		
КонецФункции	

#Область РегистрКэш_ДанныеДокументовПредприятия

// Записывает ресурс в регистр ДанныеДокументовПредприятия
// Если Значение в регистре не изменилось, то записи в регистр не будет.
// 
// Параметры:
//  Документ - СправочникСсылка.ДокументыПредприятия - Документ предприятия
//  Реквизиты - Строка - Имя реквизита - Если нужно записать один реквизит.
//			  - Соответствие Из КлючИЗначение - Если нужно записать несколько реквизитов, где:
//				 * Ключ - Строка - Имя реквизита
//				 * Значение - Произвольный - Значение реквизита.
//  Значение - Произвольный - Значение, которое нужно записать. Если в регистре уже стоит это же значение,
//							  то записи не будет. В случае, если в параметр Реквизиты передано Соответствие, то
//							  игнорируется и необязателен, т.к. значения уже переданы в этом соответствии.
//  ЭтоОбновление - Булево - Признак обновления ИБ.
//
Процедура ЗаписатьДанныеДокумента(Документ, Реквизиты, Значение = Неопределено, ЭтоОбновление = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Документ) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		ИмяРегистра = "ДанныеДокументовПредприятия";
	Иначе
		Возврат;
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	ЗначенияПоРеквизитам = Новый Соответствие();
	Если ТипЗнч(Реквизиты) = Тип("Соответствие") Тогда
		// Передано несколько реквизитов:
		ЗначенияПоРеквизитам = Реквизиты;
	Иначе
		// Передан один реквизит:
		Если МетаданныеРегистра.Ресурсы.Найти(Реквизиты) = Неопределено
			И МетаданныеРегистра.Измерения.Найти(Реквизиты) = Неопределено
			И МетаданныеРегистра.Реквизиты.Найти(Реквизиты) = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ЗначенияПоРеквизитам.Вставить(Реквизиты, Значение);
	КонецЕсли;
	
	РеквизитыСтрокой = ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(ЗначенияПоРеквизитам);
	ТекущиеРеквизиты = РегистрыСведений.ДанныеДокументовПредприятия.ЗначенияРеквизитовДокумента(
		Документ, РеквизитыСтрокой);
	НадоЗаписать = Ложь;
	Если ТекущиеРеквизиты <> Неопределено Тогда
		Для Каждого КлючЗначение Из ЗначенияПоРеквизитам Цикл
			Если ТекущиеРеквизиты[КлючЗначение.Ключ] <> КлючЗначение.Значение Тогда
				ТекущиеРеквизиты[КлючЗначение.Ключ] = КлючЗначение.Значение;
				НадоЗаписать = Истина;
			КонецЕсли;
		КонецЦикла;
	Иначе
		НадоЗаписать = Истина;
	КонецЕсли;
	
	Если НадоЗаписать = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений." + ИмяРегистра);
		ЭлементБлокировки.УстановитьЗначение("Документ", Документ);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Документ);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
			ЗаписьРегистра = НаборЗаписей[0];
		Иначе
			ЗаписьРегистра = НаборЗаписей.Добавить();
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Документ, "ДатаРегистрации, ДатаСоздания, ПометкаУдаления");
			ЗаписьРегистра.ДатаСортировки = ДатаУчетаДокумента(ЗначенияРеквизитов);
			ЗаписьРегистра.ПометкаУдаления = ЗначенияРеквизитов.ПометкаУдаления;
			ЗаписьРегистра.Документ = Документ;
		КонецЕсли;
		
		Для Каждого КлючЗначение Из ЗначенияПоРеквизитам Цикл
			Если ЗаписьРегистра[КлючЗначение.Ключ] <> КлючЗначение.Значение Тогда
				ЗаписьРегистра[КлючЗначение.Ключ] = КлючЗначение.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Если ЭтоОбновление Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		Иначе
			НаборЗаписей.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

//  Возвращает ключ записи регистра ДанныеДокументовПредприятия
//
// Параметры
//    Объект - объект или ссылка на документ предприятия.
//
// Возвращаемое значение
//    РегистрСведенийКлючЗаписиДанныеДокументовПредприятия
//
Функция ПолучитьКлючЗаписиРегистраДанныеДокументов(Объект) Экспорт 
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда 
	 	Реквизиты = "ДатаРегистрации, ДатаСоздания, ПометкаУдаления, Ссылка";
		Если ЗначениеЗаполнено(Объект) Тогда 
			ДанныеОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, Реквизиты);
		Иначе	
			ДанныеОбъекта = Новый Структура(Реквизиты);
		КонецЕсли;
	Иначе 
		ДанныеОбъекта = Объект; 
 	КонецЕсли; 
	
	Если ТипЗнч(ДанныеОбъекта.Ссылка) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда 
		ИмяРегистра = "ДанныеДокументовПредприятия";	
	Иначе	
		Возврат Неопределено;
	КонецЕсли;	
	
	ЗначениеКлюча = Новый Структура;
	ЗначениеКлюча.Вставить("ДатаСортировки", ДатаУчетаДокумента(ДанныеОбъекта));
	ЗначениеКлюча.Вставить("ПометкаУдаления", ДанныеОбъекта.ПометкаУдаления);
	ЗначениеКлюча.Вставить("Документ", ДанныеОбъекта.Ссылка);
	
	КлючЗаписи = РегистрыСведений[ИмяРегистра].СоздатьКлючЗаписи(ЗначениеКлюча);
	
	Возврат КлючЗаписи;
	
КонецФункции

// Возвращает представление таблицы контрагентов в виде строки
//
// Параметры:
//    Таблица - ТаблицаЗначений - таблица контрагентов
//    Колонка - Строка - имя колонки, содержащей контрагентов
//    ДатаАктуальности - Дата - Дата актуальности документа (дата регистрации или дата создания)
//
// Возвращаемое значение:
//    Строка - строка наименований контрагентов через запятую
Функция ПолучитьКонтрагентовДляСписков(Таблица, Колонка, ДатаАктуальности) Экспорт 
	
	Если Таблица.Колонки.Найти("НомерСтроки") <> Неопределено Тогда 
		Таблица.Сортировать("НомерСтроки");
	КонецЕсли;
	Таблица.Свернуть(Колонка);
	
	КонтрагентыДляСписков = "";
	Для Каждого Строка Из Таблица Цикл
		КонтрагентыДляСписков = КонтрагентыДляСписков + ?(КонтрагентыДляСписков = "", "", ", ")
			+ Юрлица.ПредставлениеЮрлицаНаДату(Строка[Колонка], ДатаАктуальности);
	КонецЦикла;
	
	Возврат КонтрагентыДляСписков;
	
КонецФункции

// Перезаписывает РС ДанныеДокументовПредприятия - поле АдресатыДляСписков в случае переименования адресата.
// 
// Параметры:
//  Адресат - СправочникСсылка.Сотрудники - для входящей/внутренней корреспонденции
// 			- СправочникСсылка.КонтактныеЛица - для исходящей корреспонденции
Процедура ЗаписатьДанныеДокументовПредприятия_ПереименованиеАдресата(Адресат) Экспорт
	
	// для "незаметности" - перезапись в фоне:
	Аргументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Адресат);
	
	ФоновоеЗадание = ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание();
	Если ФоновоеЗадание = Неопределено Тогда
		ФоновыеЗадания.Выполнить(
			"Делопроизводство.ЗаписатьВФонеДанныеДокументовПредприятия_ПереименованиеАдресата",
			Аргументы,
			,
			НСтр("ru = 'Переименование сотрудника - перезапись РС ""Данные документов предприятия""'"));
	Иначе
		// Уже в фоновом задании - непосредственный запуск:
		ЗаписатьВФонеДанныеДокументовПредприятия_ПереименованиеАдресата(Адресат);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Заполняет условное оформление пометки удаленных элементов в списке документов.
//
// Параметры:
//    Список - ДинамическийСписок - вх \ исх \ документов предприятия.
//
Процедура СписокДокументовУсловноеОформлениеПомеченныхНаУдаление(Список) Экспорт
	
	УсловноеОформлениеКД = Список.КомпоновщикНастроек.Настройки.УсловноеОформление;
	УсловноеОформлениеКД.ИдентификаторПользовательскойНастройки = "ОсновноеОформление";
	
	Элемент = УсловноеОформлениеКД.Элементы.Добавить();
	Элемент.Использование = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт",
		Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Ложь, Ложь, Ложь, Истина, ));
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.Использование = Истина;
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	Отбор.ПравоеЗначение = Истина;
	Если РаботаСФайламиВызовСервера.ЕстьДублирующийсяЭлемент(УсловноеОформлениеКД.Элементы, Элемент) Тогда
		УсловноеОформлениеКД.Элементы.Удалить(Элемент);
	КонецЕсли;
	
КонецПроцедуры

// Регистрирует предмет из задачи регистрации.
//
// Параметры:
//    Предмет              - СправочникСсылка.ДокументыПредприятия - регистрируемый документ.
//    СообщениеОбОшибке    - Строка - сообщение о возможных ошибках.
//    РегистрационныйНомер - Строка - регистрационный номер документа.
//
// Возвращаемое значение:
//    Булево - Истина, если документ успешно зарегистрирован,
//           - Ложь, в противном случае.
//
Функция ЗарегистрироватьПредмет(Предмет, СообщениеОбОшибке, РегистрационныйНомер = "", 
			ДополнительныеПараметры = Неопределено, ЗаписыватьПредмет = Истина) Экспорт 
	
	Если Не ДокументооборотПраваДоступа.ЕстьПравоРегистрации(Предмет) Тогда
		СообщениеОбОшибке = СтрШаблон(
			НСтр("ru = 'Вашего уровня доступа недостаточно для регистрации документа ""%1"".
				|Обратитесь к администратору.'"),
			Строка(Предмет));
		Возврат Ложь;
	КонецЕсли;   
	
	ИнтерактивнаяЗапись = Ложь;
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Предмет)) Тогда
		ПредметОбъект = Предмет.ПолучитьОбъект();
		Попытка
			ПредметОбъект.Заблокировать();
		Исключение
			
			ПодробноОписание = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КтоБлокирует = ДействияСервер.БлокируетПредметИзОписанияОшибки(ПодробноОписание);
			
			ЗаписьЖурналаРегистрации("ЗарегистрироватьПредмет", УровеньЖурналаРегистрации.Ошибка, 
				Метаданные.Справочники.ДействияПодписания, , ПодробноОписание);
				
			СообщениеОбОшибке = СтрШаблон(
				НСтр("ru = 'Не удалось зарегистрировать документ ""%1"".
					|Возможно этот документ открыт вами или другим пользователем.
					|%2
					|
					|Необходимо закрыть карточку документа.'"),
				Строка(Предмет), КтоБлокирует);
			
			Возврат Ложь;
			
		КонецПопытки;
	Иначе 
		ПредметОбъект = Предмет; 
		
		Если Предмет.ДополнительныеСвойства.Свойство("ИнтерактивнаяЗапись") Тогда
			ИнтерактивнаяЗапись = Предмет.ДополнительныеСвойства.ИнтерактивнаяЗапись;
		КонецЕсли;
	КонецЕсли;
	
	ДатаРегистрации = ТекущаяДатаСеанса();
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ДатаРегистрации")
		И ЗначениеЗаполнено(ДополнительныеПараметры.ДатаРегистрации) Тогда 
		ДатаРегистрации = ДополнительныеПараметры.ДатаРегистрации;
	КонецЕсли;
	
	Если РегистрационныйНомер = "" Тогда // сформировать автоматически
		
		ПредметОбъект.ДатаРегистрации = ДатаРегистрации;
		
		// числовой номер
		СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(ПредметОбъект);
		СтруктураПараметров.Вставить("СвязанныйДокумент", 
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "СвязанныйОбъект"));
		Нумерация.СформироватьЧисловойНомерДокумента(СтруктураПараметров, ПредметОбъект.ЧисловойНомер);
	
		// строковый номер
		СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(ПредметОбъект);
		СтруктураПараметров.Вставить("СвязанныйДокумент",
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "СвязанныйОбъект"));
	
		ОписанияОшибок = Новый СписокЗначений;
		Нумерация.СформироватьСтроковыйНомерДокумента(СтруктураПараметров,
			ПредметОбъект.РегистрационныйНомер,
			ОписанияОшибок);
			
		Для Каждого ОписаниеОшибки Из ОписанияОшибок Цикл
			СообщениеОбОшибке = ОписаниеОшибки;
			Возврат Ложь;
		КонецЦикла;
	
	Иначе
		ПредметОбъект.РегистрационныйНомер = РегистрационныйНомер;
		ПредметОбъект.ДатаРегистрации = ДатаРегистрации;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредметОбъект.РегистрационныйНомер) Тогда // успешно сформирован номер
		Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(ПредметОбъект) Тогда
			ПредметОбъект.Зарегистрировал = Сотрудники.ОсновнойСотрудник();
			Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
				И ДополнительныеПараметры.Свойство("Зарегистрировал") 
				И ЗначениеЗаполнено(ДополнительныеПараметры.Зарегистрировал) Тогда
				ПредметОбъект.Зарегистрировал = ДополнительныеПараметры.Зарегистрировал;
			КонецЕсли;
			
		Иначе
			ПредметОбъект.Зарегистрировал = Пользователи.ТекущийПользователь();
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаписыватьПредмет Тогда
		
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
			И ДополнительныеПараметры.Свойство("РазрешитьЗаписьОбъектаИзДругойСистемы") Тогда
			ПредметОбъект.ДополнительныеСвойства.Вставить("РазрешитьЗаписьОбъектаИзДругойСистемы", 
				ДополнительныеПараметры.РазрешитьЗаписьОбъектаИзДругойСистемы);
		КонецЕсли;
		ПредметОбъект.Записать();
		
	КонецЕсли; 
	
	Если Не ИнтерактивнаяЗапись Тогда   // только если не-интерактивно
		
		// "Делает не действующим" - установка связи "Не действует" и флага "Не действует" у старых документов
		СписокНеДействующихДокументов = Новый ТаблицаЗначений;
		СписокНеДействующихДокументов.Колонки.Добавить("Документ");
		СписокНеДействующихДокументов.Колонки.Добавить("ДатаОтмены");
		СписокНеДействующихДокументов.Колонки.Добавить("УжеУстановлен");
		СписокНеДействующихДокументов.Колонки.Добавить("Источник");
		
		СвязиОбъектов.ПрочитатьНеДействующие(Предмет.Ссылка, ПредметОбъект.РегистрационныйНомер, СписокНеДействующихДокументов);
		
		СписокНеДействующихДокументовНачальное = СписокНеДействующихДокументов.Скопировать();
		
		ТекДата = НачалоДня(ТекущаяДатаСеанса());  
		ДокументЗарегистрированАргумент = ЗначениеЗаполнено(ПредметОбъект.РегистрационныйНомер);	
		ЭтоРегистрация = Истина;	
		
		Если СписокНеДействующихДокументов.Количество() <> 0 Тогда
			СвязиОбъектов.УстановитьДелаетНеДействующим(Предмет.Ссылка, 
				СписокНеДействующихДокументовНачальное, СписокНеДействующихДокументов, 
				Справочники.ТипыСвязей.ДелаетНеДействующим,,,,
				ЭтоРегистрация, ДокументЗарегистрированАргумент);     
		КонецЕсли;	
		
		Для Каждого СтрокаДокумент Из СписокНеДействующихДокументов Цикл
				
			УстановитьРеквизит = Истина;
			
			Если ЗначениеЗаполнено(СтрокаДокумент.ДатаОтмены) Тогда
				
				УстановитьРеквизит = Ложь; 
				
				// дата в прошлом, и идет регистрация	
				Если СтрокаДокумент.ДатаОтмены <= ТекДата И СтрокаДокумент.Источник = "СвязиОбъектов" Тогда	
					УстановитьРеквизит = Истина; 
				КонецЕсли;	
				
				// если дата в будущем - не пишем
				
			КонецЕсли;	
			
			Если УстановитьРеквизит Тогда   
				
				СвязиОбъектов.УстановитьРеквизитыПриДобавленииСвязи(СтрокаДокумент.Документ,,
					Справочники.ТипыСвязей.НеДействуетВСоответствии, ДокументЗарегистрированАргумент,
					СтрокаДокумент.ДатаОтмены);
				
			КонецЕсли;
			
		КонецЦикла;	  
	КонецЕсли;
	
	// Зарегистрировать состояние для МЭДО, если это документ МЭДО:
	Направление = Перечисления.НаправленияСообщенийМЭДО.ПустаяСсылка();
	Если ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(ПредметОбъект) Тогда
		Направление = Перечисления.НаправленияСообщенийМЭДО.Входящее;
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоИсходящийДокумент(ПредметОбъект) Тогда
		Направление = Перечисления.НаправленияСообщенийМЭДО.Исходящее;
	КонецЕсли;
	МЭДОПереопределяемый.ПриРегистрацииДокумента(ПредметОбъект, Направление);
	
	
	ПротоколированиеРаботыСотрудников.ЗаписатьРегистрациюДокумента(ПредметОбъект.Ссылка, ПредметОбъект.РегистрационныйНомер);
	
	// очистим файл визуализации для всех файлов документа
	РаботаСФайламиВызовСервера.ОчиститьФайлыВизуализации(ПредметОбъект.Ссылка);
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	// заполним файлы (не только поля регистрации, а все поля)
	РаботаСФайламиВызовСервера.ЗаполнитьФайлыDocxOdt(ПредметОбъект.Ссылка);
	УстановитьОтключениеБезопасногоРежима(Ложь);
	
	Возврат Истина;
	
КонецФункции

// Проверяет возможность регистрации предмет из задачи регистрации.
//
// Параметры:
//    Предмет              - объект или ссылка на вх \ исх \ внутр документ - регистрируемый документ.
//    РегистрационныйНомер - Строка - регистрационный номер документа.
//    ДатаРегистрации - Дата - дата регистрации документа.
//    ТекстСообщения -Строка -возвращаемый текст ошибки
//	  ПоказыватьОшибки- Булево, если Истина - делает ОбщегоНазначенияКлиентСервер.СообщитьПользователю
//
// Возвращаемое значение:
//    Булево - Истина, если документ может быть зарегистрирован,
//           - Ложь, в противном случае.
//
Функция ПредметМожетБытьЗарегистрирован(Предмет, РегистрационныйНомер = "", ДатаРегистрации = Неопределено,
	ТекстСообщения = "", ПоказыватьОшибки = Истина) Экспорт 
	
	ПредметОбъект = Предмет.ПолучитьОбъект();
	
	Результат = Истина;
	ЭтоНагрузочноеТестирование = НагрузочноеТестирование.ЭтоНагрузочноеТестирование();
	
	// Проверка заполненности срока действия документа
	Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(ПредметОбъект.Ссылка) Тогда 
		Если ПолучитьФункциональнуюОпцию("УчитыватьСрокДействияДокумента", Новый Структура("ВидДокумента", ПредметОбъект.ВидДокумента)) Тогда
			Если Не ЗначениеЗаполнено(ПредметОбъект.ДатаНачалаДействия) Тогда 
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В документе ""%1"" не заполнена дата начала действия'"),
					Строка(Предмет));
				Если ПоказыватьОшибки Тогда	
					ОбщегоНазначения.СообщитьПользователю(
						ТекстСообщения,, "ДеревоПриложений");
				КонецЕсли;	
				Возврат Ложь Или ЭтоНагрузочноеТестирование;
			КонецЕсли;	
			
			Если Не ПредметОбъект.Бессрочный Тогда
				Если Не ЗначениеЗаполнено(ПредметОбъект.ДатаОкончанияДействия) Тогда 
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'В документе ""%1"" не заполнена дата окончания действия'"),
						Строка(Предмет));
					Если ПоказыватьОшибки Тогда	
						ОбщегоНазначения.СообщитьПользователю(
							ТекстСообщения,, "ДеревоПриложений");
					КонецЕсли;	
					Возврат Ложь Или ЭтоНагрузочноеТестирование;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ПредметОбъект.ПорядокПродления) Тогда 
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'В документе ""%1"" не заполнен порядок продления'"),
						Строка(Предмет));
					Если ПоказыватьОшибки Тогда	
						ОбщегоНазначения.СообщитьПользователю(
							ТекстСообщения,, "ДеревоПриложений");
					КонецЕсли;	
					Результат = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// проверка уникальности номера, указанного вручную
	Нумератор = Нумерация.ПолучитьНумераторДокумента(ПредметОбъект);
	Если Не ЗначениеЗаполнено(Нумератор) Тогда 
		Если ЗначениеЗаполнено(РегистрационныйНомер) Тогда 
			ОбъектСтруктура = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(ПредметОбъект);
			ОбъектСтруктура.Вставить("РегистрационныйНомер", РегистрационныйНомер);
			Если ЗначениеЗаполнено(ДатаРегистрации) Тогда
				ОбъектСтруктура.Вставить("ДатаРегистрации", ДатаРегистрации);
			Иначе
				ОбъектСтруктура.Вставить("ДатаРегистрации", ТекущаяДатаСеанса());
			КонецЕсли;
			
			Если Не НомерУникален(ОбъектСтруктура) Тогда 
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Регистрационный номер ""%1"", указанный для документа ""%2"", не уникален!'"),
					РегистрационныйНомер,
					Предмет);
					Если ПоказыватьОшибки Тогда	
						ОбщегоНазначения.СообщитьПользователю(
							ТекстСообщения,, "ДеревоПриложений");
					КонецЕсли;	
				Результат = Ложь;
				РегистрационныйНомер = "";
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьНоменклатуруДел = Ложь;
	Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(ПредметОбъект.Ссылка) Тогда 
		ИспользоватьНоменклатуруДел = ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруДелВоВнутренних", 
			Новый Структура("ВидДокумента", ПредметОбъект.ВидДокумента));
	КонецЕсли;	
	
	Если ИспользоватьНоменклатуруДел Тогда 
		Если Не ЗначениеЗаполнено(ПредметОбъект.НоменклатураДел) Тогда 
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'В документе ""%1"" не заполнено поле ""Номенклатура дел""'"), Предмет);
			Если ПоказыватьОшибки Тогда	
				ОбщегоНазначения.СообщитьПользователю(
					ТекстСообщения,, "ДеревоПриложений");
			КонецЕсли;	
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Проверка заполненности места хранения и ответственного за хранение
	Если ПолучитьФункциональнуюОпцию("ИспользоватьМестаХранения") Тогда
		Если ПредметОбъект.ФормаДокумента = Перечисления.ВариантыФормДокументов.Бумажная Тогда 
			
			РеквизитыВида = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
				ПредметОбъект.ВидДокумента, 
				"УчитыватьМестоХранения, УчитыватьОтветственногоЗаХранение");
			ВариантОбязательно = Перечисления.ВариантыИспользованияПолейХранения.Обязательно;
			Если РеквизитыВида.УчитыватьМестоХранения = ВариантОбязательно
				И Не ЗначениеЗаполнено(ПредметОбъект.МестоХранения) Тогда
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'В документе ""%1"" не заполнено поле ""Место хранения""'"),
					Строка(Предмет));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "ДеревоПриложений");
				Результат = Ложь;
			КонецЕсли;
			
			Если РеквизитыВида.УчитыватьОтветственногоЗаХранение = ВариантОбязательно
				И Не ЗначениеЗаполнено(ПредметОбъект.ОтветственныйЗаХранение) Тогда
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'В документе ""%1"" не заполнено поле ""Ответственный за хранение""'"),
					Строка(Предмет));
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "ДеревоПриложений");
				Результат = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	КоличествоЗанятыхФайлов = РаботаСФайламиВызовСервера.ПолучитьКоличествоЗанятыхФайлов(ПредметОбъект.Ссылка);
	Если КоличествоЗанятыхФайлов > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документ ""%1"" содержит файлы, занятые для редактирования'"),
			Строка(Предмет));
		Если ПоказыватьОшибки Тогда	
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,, "ДеревоПриложений");
		КонецЕсли;	
		Результат = Ложь;
	КонецЕсли;
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(ПредметОбъект.Ссылка) Тогда 
		// Не дадим зарегистрировать документ,
		// если у него файлы не удовлетворяют ролям.
		Если ЗначениеЗаполнено(ПредметОбъект.Ссылка) Тогда
			
			ТекстСообщения = "";
			Если Не РаботаСФайламиВызовСервера.ФайлыУдовлетворяютРолям(ПредметОбъект.Ссылка, ТекстСообщения) Тогда
				
				Если ПоказыватьОшибки Тогда
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Файлы");
				КонецЕсли;	
				Результат = Ложь;
				
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Результат Или ЭтоНагрузочноеТестирование;
	
КонецФункции

// Возвращает массив, содержащий вид документа и его родительские группы видов
//
// Параметры:
//  ВидДокумента - Справочник.ВидыДокументов
//
// Возвращаемое значение
//    Массив - содержащий переданный вид документа, и всех его родителей до корня
//
Функция ПолучитьВидДокументаИРодителей(ВидДокумента) Экспорт
	
	МассивРодителей = Новый Массив;
	МассивРодителей.Добавить(ВидДокумента);	
	
	Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, "Родитель");
	Пока ЗначениеЗаполнено(Родитель) Цикл 
		МассивРодителей.Добавить(Родитель);
		Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Родитель, "Родитель");
	КонецЦикла;	
	
	Возврат МассивРодителей;
	
КонецФункции	

// Помечает переданный шаблон документа на удаление
//
// Параметры
//   Шаблон    - СправочникСсылка.ШаблоныДокументов - шаблон
//   ПометкаУдаления - Булево - признак снятия/установки пометки на удаление
//
Процедура ПометитьШаблонНаУдаление(Шаблон, ПометкаУдаления) Экспорт 
	
	ЗаблокироватьДанныеДляРедактирования(Шаблон);
	ОбъектШаблон = Шаблон.ПолучитьОбъект();
	ОбъектШаблон.УстановитьПометкуУдаления(ПометкаУдаления);
	РазблокироватьДанныеДляРедактирования(Шаблон);
	
КонецПроцедуры

// Возвращает все письма, найденные поиском по заданным параметрам.
//
// Параметры:
//  ТаблицаПисем - ТаблицаЗначений - таблица используемая для отчета СводкаПоКонтрагенту.
//  Параметры - Структура - содержит параметры поиска.
//
// Возвращаемое значение
//  ТаблицаПисем - ТаблицаЗначений.
//
Функция ПолучитьПисьмаКонтрагента(ТаблицаПисем, Параметры) Экспорт 
	
	СписокEmailКонтрагента = Новый СписокЗначений;
	
	ВсеEmailКонтрагента = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Параметры.Контрагент,
		Справочники.ВидыКонтактнойИнформации.EmailКонтрагента,
		ТекущаяДатаСеанса(), 
		Ложь);
	
	Для Каждого EmailКонтрагента Из ВсеEmailКонтрагента Цикл
		СписокEmailКонтрагента.Добавить(EmailКонтрагента.Представление);
	КонецЦикла;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Контрагент, "ЮрФизЛицо")
		<> Перечисления.ЮрФизЛицо.ФизЛицо Тогда 
		// Контактные лица.
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КонтактныеЛица.Ссылка,
			|	КонтактныеЛица.Тип,
			|	КонтактныеЛица.Вид,
			|	КонтактныеЛица.Представление,
			|	КонтактныеЛица.ЗначенияПолей
			|ИЗ
			|	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛица
			|ГДЕ
			|	КонтактныеЛица.Ссылка.Владелец = &Контрагент
			|	И КонтактныеЛица.Вид = &Вид";
		  
		Если Не Параметры.ПометкаУдаления Тогда  
			Запрос.Текст = Запрос.Текст + "   
				|	И НЕ КонтактныеЛица.Ссылка.ПометкаУдаления";
		КонецЕсли;
		
		Запрос.Параметры.Вставить("Контрагент", Параметры.Контрагент);
		Запрос.Параметры.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица);
		КонтактныеЛица = Запрос.Выполнить().Выгрузить();
		Для Каждого Стр Из КонтактныеЛица Цикл 
			СписокEmailКонтрагента.Добавить(Стр.Представление);
		КонецЦикла;
	КонецЕсли;
	
	Если СписокEmailКонтрагента.Количество() = 0 Тогда 
		Возврат ТаблицаПисем;
	КонецЕсли;
	
	УсловияПоиска = Новый ТаблицаЗначений;
	УсловияПоиска.Колонки.Добавить("ВидУсловия");
	УсловияПоиска.Колонки.Добавить("ПредставлениеЗначенияУсловия");
	УсловияПоиска.Колонки.Добавить("ЗначенияУсловия");
	
	УсловияПоиска.Очистить();
	Для Каждого ЗначениеПеречисления Из Перечисления.ВидыУсловийПоискаПисем Цикл
		НоваяСтрока = УсловияПоиска.Добавить();
		НоваяСтрока.ВидУсловия = ЗначениеПеречисления;
		НоваяСтрока.ПредставлениеЗначенияУсловия = "";
		НоваяСтрока.ЗначенияУсловия = Новый СписокЗначений;
		
		Если ЗначениеПеречисления = Перечисления.ВидыУсловийПоискаПисем.ПерепискаС Тогда
			Для Каждого Адрес Из СписокEmailКонтрагента Цикл 
				НоваяСтрока.ЗначенияУсловия.Добавить(Адрес.Значение);
			КонецЦикла;
			
		ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийПоискаПисем.ЗаПериод 
			И (Параметры.ДатаНачала <> Дата(1,1,1) Или Параметры.ДатаОкончания <> Дата(1,1,1)) Тогда
			НоваяСтрока.ЗначенияУсловия.Добавить(Параметры.ДатаНачала);
			НоваяСтрока.ЗначенияУсловия.Добавить(Параметры.ДатаОкончания);
		ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийПоискаПисем.СпособОбъединенияУсловий Тогда
			НоваяСтрока.ЗначенияУсловия.Добавить(Перечисления.ТипыЛогическойСвязи.И);
		ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийПоискаПисем.Удалено 
			И Параметры.ПометкаУдаления <> Неопределено Тогда
			НоваяСтрока.ЗначенияУсловия.Добавить(Параметры.ПометкаУдаления);
		ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийПоискаПисем.ВыбратьПервые Тогда
			НоваяСтрока.ЗначенияУсловия.Добавить("1000");
		ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыУсловийПоискаПисем.ТипПисьма Тогда
			НоваяСтрока.ЗначенияУсловия.Добавить(0);
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатПоиска = ПоискПисемПоРеквизитам.ВыполнитьПоиск(УсловияПоиска);
	МассивСсылок = РезультатПоиска.МассивСсылок;
	
	Если Не ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ() Тогда
		ПользователиДляПроверкиПрав = Новый Массив;
		ПользователиДляПроверкиПрав.Добавить(ПользователиКлиентСервер.ТекущийПользователь());
		ПраваНаПредметы = ДокументооборотПраваДоступа.ПраваПользователейПоОбъектам(
			МассивСсылок, Истина, ПользователиДляПроверкиПрав);
		МассивСсылок = ПраваНаПредметы.ВыгрузитьКолонку("ОбъектДоступа");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого Письмо Из МассивСсылок Цикл
		Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Письмо) Тогда 
			РеквизитыПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Письмо,
				"Дата, ПометкаУдаления, Тема, ОтправительАдресат, 
				|ПолучателиПисьма, ПолучателиКопий, УчетнаяЗапись.ОтветственныеЗаОбработкуПисем");
			
			ПредставлениеАдресата = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(
				РеквизитыПисьма.ОтправительАдресат, Истина);
		
			ПредставлениеОт = ПредставлениеАдресата.Представление;
			ПредставлениеКому = ВстроеннаяПочтаСервер.СформироватьСтрокуПолучателейДляОтчета(
				РеквизитыПисьма.ПолучателиПисьма.Выгрузить(), "Кому");
			ПредставлениеКопии = ВстроеннаяПочтаСервер.СформироватьСтрокуПолучателейДляОтчета(
				РеквизитыПисьма.ПолучателиКопий.Выгрузить(), "Копия");
				
			Описание = НСтр("ru = 'От:'") + " " + ПредставлениеОт + Символы.ПС 
				+ НСтр("ru = 'Кому:'") + " " + ПредставлениеКому 
				+ ?(ЗначениеЗаполнено(ПредставлениеКопии), Символы.ПС + ПредставлениеКопии, "");
				
			Выборка = РеквизитыПисьма.УчетнаяЗаписьОтветственныеЗаОбработкуПисем.Выбрать();
			Пока Выборка.Следующий() Цикл 
				Ответственный = Выборка.Сотрудник;
				Прервать;
			КонецЦикла;
		Иначе 
			РеквизитыПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Письмо,
				"Дата, ПометкаУдаления, Тема, ОтправительКонтакт, ПолучателиПисьма, ПолучателиКопий");
				
			ПредставлениеОт = "";
			Если ЗначениеЗаполнено(РеквизитыПисьма.ОтправительКонтакт) Тогда
				ПредставлениеОт = РеквизитыПисьма.ОтправительКонтакт;
			КонецЕсли;
			
			ПредставлениеКому = ВстроеннаяПочтаСервер.СформироватьСтрокуПолучателейДляОтчета(
			РеквизитыПисьма.ПолучателиПисьма.Выгрузить(), "Кому");
			ПредставлениеКопии = ВстроеннаяПочтаСервер.СформироватьСтрокуПолучателейДляОтчета(
				РеквизитыПисьма.ПолучателиКопий.Выгрузить(), "Копия");
				
			Описание = ?(ЗначениеЗаполнено(ПредставлениеОт) ,НСтр("ru = 'От:'") + " " + ПредставлениеОт + Символы.ПС, "") 
				+ НСтр("ru = 'Кому:'") + " " + ПредставлениеКому 
				+ ?(ЗначениеЗаполнено(ПредставлениеКопии), Символы.ПС + ПредставлениеКопии, "");
				
			Ответственный = РеквизитыПисьма.ОтправительКонтакт;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПисем.Добавить();
		НоваяСтрока.Дата = РеквизитыПисьма.Дата;
		НоваяСтрока.ВидОбъекта = ТипЗнч(Письмо);
		НоваяСтрока.Ссылка = Письмо;
		НоваяСтрока.ПометкаУдаления = РеквизитыПисьма.ПометкаУдаления;
		НоваяСтрока.Содержание = Описание;
		НоваяСтрока.Наименование = РеквизитыПисьма.Тема;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.Сумма = 0;
		НоваяСтрока.Ответственный = Ответственный;
		
	КонецЦикла;
	
КонецФункции

// Возвращает строку с подробным описанием документа
//
// Параметры:
//  Ссылка - Справочник.ДокументыПредприятия - документ, по которому требуется получить подробности.
//  Состояние - ПеречисленияСсылка.СостоянияДокмуентов - состояние документа.
//
// Возвращаемое значение
//  Подробности - Строка - подробное описание документа.
//
Функция ПолучитьПодробностиПоДокументу(Ссылка, Содержание) Экспорт 
	
	Подробности = "";
	
	УстановитьПривилегированныйРежим(Истина);
	Если ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(Ссылка) Тогда 
		
		ОтправленОтвет = "";
		ОтправленыОтветы = СвязиОбъектов.ПолучитьСвязанныеОбъекты(
			Ссылка, Справочники.ТипыСвязей.ОтправленОтвет);
		Если ОтправленыОтветы.Количество() > 0 Тогда 
			ОтправленОтвет = ОтправленыОтветы[0];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтправленОтвет) Тогда
			Подробности = СтрШаблон(НСтр("ru = 'Отправлен ответ: ""%1""'"),
				ОтправленОтвет);
		КонецЕсли;
		
		СостояниеТекст = ПолучитьСтроковоеПредставлениеСостояний(Ссылка);
		Если ЗначениеЗаполнено(СостояниеТекст) Тогда
			Подробности = ?(ЗначениеЗаполнено(Подробности),
				Подробности + 
				СтрШаблон(НСтр("ru = ';
					|Состояние: %1'"),
					СостояниеТекст),
				СтрШаблон(НСтр("ru = 'Состояние: %1'"),
					СостояниеТекст));
		КонецЕсли;
		
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоИсходящийДокумент(Ссылка) Тогда 
		
		КорреспонденцияДокумента = РаботаСКорреспонденцией.КорреспонденцияДокумента(Ссылка);
		Если ЗначениеЗаполнено(КорреспонденцияДокумента) Тогда
			ДатаОтправки = КорреспонденцияДокумента.Корреспонденты[0].ДатаОтправки;
			Если ЗначениеЗаполнено(ДатаОтправки) Тогда
				Подробности = СтрШаблон(НСтр("ru = 'Отправлен: %1'"),
					Формат(ДатаОтправки, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
		КонецЕсли;		
		
		ПолученОтвет = "";
		ПолученыОтветы = СвязиОбъектов.ПолучитьСвязанныеОбъекты(
			Ссылка, Справочники.ТипыСвязей.ПолученОтвет);
		Для Каждого Строка Из ПолученыОтветы Цикл
			ПолученОтвет = Строка.Ссылка;
			Прервать;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ПолученОтвет) Тогда
			Подробности = ?(ЗначениеЗаполнено(Подробности),
				Подробности + ";" + Символы.ПС + СтрШаблон(НСтр("ru = 'Получен ответ: ""%1""'"),
					ПолученОтвет),
				СтрШаблон(НСтр("ru = 'Получен ответ: ""%1""'"),
					ПолученОтвет));
		КонецЕсли;
		
		СостояниеТекст = ПолучитьСтроковоеПредставлениеСостояний(Ссылка);
		Если ЗначениеЗаполнено(СостояниеТекст) Тогда
			Подробности = ?(ЗначениеЗаполнено(Подробности),
				Подробности + ";" + Символы.ПС + СтрШаблон(НСтр("ru = 'Состояние: %1'"),
					СостояниеТекст),
				СтрШаблон(НСтр("ru = 'Состояние: %1'"),
					СостояниеТекст));
		КонецЕсли;
	
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда 
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, 
			"Сумма, Валюта, ВидДокумента.УчитыватьСуммуДокумента");
		
		Если ЗначениеЗаполнено(Содержание) Тогда 
			Подробности = Содержание;
		КонецЕсли;
		
		Если Реквизиты.ВидДокументаУчитыватьСуммуДокумента И Реквизиты.Сумма > 0 Тогда
			Подробности = ?(ЗначениеЗаполнено(Подробности),
				Подробности + ";" + Символы.ПС + СтрШаблон(НСтр("ru = 'Сумма: %1 %2'"),
					Реквизиты.Сумма, Реквизиты.Валюта),
				СтрШаблон(НСтр("ru = 'Сумма: %1 %2'"),
					Формат(Реквизиты.Сумма,"ЧЦ=15; ЧДЦ=2"), Реквизиты.Валюта));
		КонецЕсли;
		
		СостояниеТекст = ПолучитьСтроковоеПредставлениеСостояний(Ссылка);
		Если ЗначениеЗаполнено(СостояниеТекст) Тогда
			Подробности = ?(ЗначениеЗаполнено(Подробности),
				Подробности + ";" + Символы.ПС + СтрШаблон(НСтр("ru = 'Состояние: %1'"), СостояниеТекст),
				СтрШаблон(НСтр("ru = 'Состояние: %1'"), СостояниеТекст));
		КонецЕсли;
	
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Мероприятия") Тогда 
		
		Если ЗначениеЗаполнено(Содержание) Тогда 
			Подробности = Содержание;
		КонецЕсли;
		
		СоответствиеСостояний = УправлениеМероприятиямиКлиентСервер.ПолучитьСоответствиеСостояний();
		МассивСостояний = УправлениеМероприятиями.ПолучитьВсеСостоянияМероприятия(Ссылка);
		
		НайденоСостояние = Перечисления.СостоянияМероприятий.ПустаяСсылка();
		Для Каждого Состояние Из МассивСостояний Цикл
			Если СоответствиеСостояний.Получить(Состояние) = "СостояниеМероприятия" Тогда 
				НайденоСостояние = Состояние;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(НайденоСостояние) Тогда
			Подробности = ?(ЗначениеЗаполнено(Подробности),
				Подробности + ";" + Символы.ПС + 
				СтрШаблон(НСтр("ru = 'Состояние: %1'"), СокрЛП(НайденоСостояние)),
				СтрШаблон(НСтр("ru = 'Состояние: %1'"), СокрЛП(НайденоСостояние)));
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Проекты") Тогда 
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, 
			"Состояние");
		
		Если ЗначениеЗаполнено(Содержание) Тогда 
			Подробности = Содержание;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Реквизиты.Состояние) Тогда
			Подробности = ?(ЗначениеЗаполнено(Подробности),
				Подробности + ";" + Символы.ПС + 
				СтрШаблон(НСтр("ru = 'Состояние: %1'"), СокрЛП(Реквизиты.Состояние)),
				СтрШаблон(НСтр("ru = 'Состояние: %1'"), СокрЛП(Реквизиты.Состояние)));
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Содержание) Тогда 
		
		Подробности = Содержание;
		
	КонецЕсли;
	
	Возврат Подробности;
	
КонецФункции

// Возвращает массив номенклатур дел, в которые входит дело по заданному периоду.
//
// Параметры:
//  ТекущаяНоменклатура - СправочникСсылка.НоменклатураДел - текущая номенклатура дела, по которой ищем остальные.
//  ДатаНачала - Дата - начало периода дела.
//  ДатаОкончания - Дата - конец периода дела.
//
// Возвращаемое значение
//  Массив - номенклатуры дел, в которые входит дело по заданному периоду.
//
Функция ПолучитьМассивНоменклатурЗаПериод(ТекущаяНоменклатура, ДатаНачала, ДатаОкончания) Экспорт
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяНоменклатура,
		"Индекс, Организация");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НоменклатураДел.Ссылка
		|ИЗ
		|	Справочник.НоменклатураДел КАК НоменклатураДел
		|ГДЕ
		|	НЕ НоменклатураДел.ПометкаУдаления
		|	И НоменклатураДел.Индекс = &Индекс
		|	И НоменклатураДел.Организация = &Организация
		|	И НоменклатураДел.Ссылка <> &ТекущаяНоменклатура
		|	И НоменклатураДел.Год >= &ДатаНачала";
		
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда 
		Запрос.Текст = Запрос.Текст + "
		|	И НоменклатураДел.Год <= &ДатаОкончания";
	
		Запрос.Параметры.Вставить("ДатаОкончания", Год(ДатаОкончания));
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	НоменклатураДел.Год";
	
	Запрос.Параметры.Вставить("Индекс", Реквизиты.Индекс);
	Запрос.Параметры.Вставить("Организация", Реквизиты.Организация);
	Запрос.Параметры.Вставить("ТекущаяНоменклатура", ТекущаяНоменклатура);
	Запрос.Параметры.Вставить("ДатаНачала", Год(ДатаНачала));
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает истина, если все реквизиты из шаблона наименования найдены в дереве реквизитов объекта
//
// Параметры:
//  МассивРеквизитов - Массив - реквизитов учавствующих в автозаголовке документа.
//  ВидДокумента -  СправочникСсылка.ВидыДокументов - вид документа, в котором анализируем вхождение реквизитов.
//  ОписаниеОшибки - Строка - текст ошибки, если она возникнет.
//
// Возвращаемое значение
//  Булево - Истина, если все реквизиты найдены.
//
Функция ПоляШаблонаНаименованияНайдены(МассивРеквизитов, ВидДокумента, ОписаниеОшибки) Экспорт 
	
	ДеревоРеквизитов = АвтозаполнениеШаблоновФайловСерверПовтИсп.ЗаполнитьДеревоРеквизитовДляШаблона(
		ВидДокумента, Истина);
		
	МассивПолейВДереве = Новый Массив;
	СтрокиКОбработке = Новый Массив;
	Для Каждого Строка Из ДеревоРеквизитов.Строки Цикл
		СтрокиКОбработке.Добавить(Строка);
	КонецЦикла;
	
	Пока СтрокиКОбработке.Количество() > 0 Цикл
		
		ТекущаяСтрока = СтрокиКОбработке[0];
		СтрокиКОбработке.Удалить(0);
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ОбъектРодитель) Тогда 
			ПолеПоиска = ТекущаяСтрока.ОбъектРодитель + "|" + ТекущаяСтрока.Наименование;
		Иначе
			ПолеПоиска = ТекущаяСтрока.Наименование;
		КонецЕсли;
		
		МассивПолейВДереве.Добавить(ПолеПоиска);
		
		Для Каждого Строка Из ТекущаяСтрока.Строки Цикл
			СтрокиКОбработке.Добавить(Строка);
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого Реквизит Из МассивРеквизитов Цикл 
		РеквизитНайден = МассивПолейВДереве.Найти(Реквизит);
		
		Если РеквизитНайден = Неопределено Тогда
			ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Реквизит ""%1"" не найден среди реквизитов объекта'"),
				Реквизит);
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Возвращает истина, если организация ПлательщикНДС.
//
// Параметры:
//  Организация -  СправочникСсылка.Организации - если передана организация, то проверяем только ее.
//
// Возвращаемое значение:
//  Булево - Истина, если организация является плательщиком НДС.
//
Функция УчитыватьНДС(Организация = Неопределено) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ПлательщикНДС";
		
	Если ЗначениеЗаполнено(Организация) Тогда 
		Запрос.Текст = Запрос.Текст + "
		|	И Организации.Ссылка = &Организация";
		Запрос.Параметры.Вставить("Организация", Организация);
	КонецЕсли;
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Переносит всю номенклатуру группы в таблицу формы
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа, в котором заполняется таблица товаров
//  ГруппаНоменклатуры - СправочникСсылка.Номенклатура - ссылка на группу номенклатур
// 
Процедура ПеренестиНоменклатуруИзГруппы(Форма, ГруппаНоменклатуры) Экспорт 
	
	ЭтоФормаДокумента = Истина;
	Если ДелопроизводствоКлиентСервер.ЭтоФормаВидаДокумента(Форма.ИмяФормы) Тогда 
		Объект = Форма.ШаблонДокумента;
		ЭтоФормаДокумента = Ложь;
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоФормаШаблонаДокумента(Форма.ИмяФормы) Тогда 
		Объект = Форма.Объект;
		ЭтоФормаДокумента = Ложь;
	Иначе 
		Объект = Форма.Объект;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка,
		|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Номенклатура.Цена,
		|	Номенклатура.СтавкаНДС
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Родитель В ИЕРАРХИИ(&ГруппаНоменклатуры)
		|	И НЕ Номенклатура.ПометкаУдаления
		|	И НЕ Номенклатура.ЭтоГруппа";
		
	Запрос.Параметры.Вставить("ГруппаНоменклатуры", ГруппаНоменклатуры);
	МассивНоменклатуры = Объект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
	Запрос.Параметры.Вставить("МассивНоменклатуры", МассивНоменклатуры);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		НайденныеСтроки = Объект.Товары.НайтиСтроки(
			Новый Структура("Номенклатура, ЕдиницаИзмерения",
			Выборка.Ссылка, Выборка.ЕдиницаИзмерения));
		
		Если НайденныеСтроки.Количество() = 0 Тогда 
			НайденнаяСтрока = Объект.Товары.Добавить();
			НайденнаяСтрока.Номенклатура = Выборка.Ссылка;
			НайденнаяСтрока.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
			НайденнаяСтрока.Количество = 1;
			
			Если ЭтоФормаДокумента Тогда 
				НайденнаяСтрока.Цена = Выборка.Цена;
				НайденнаяСтрока.СтавкаНДС = Выборка.СтавкаНДС;
				ДелопроизводствоКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(НайденнаяСтрока, НайденнаяСтрока.СтавкаНДС);
			КонецЕсли;
			
		Иначе 
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + 1;
				
				Если ЭтоФормаДокумента Тогда 
					ДелопроизводствоКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(НайденнаяСтрока, НайденнаяСтрока.СтавкаНДС);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Форма.Модифицированность = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает агрегатное поле «Подписан/Утвержден».
//
// Параметры:
//  Документ -  СправочникОбъект.ДокументыПредприятия - документ по которому необходимо собрать строку
//
// Возвращаемое значение:
//  Строка - результирующая строка по документу 
//
Функция СтрокаПодписалУтвердил(Документ) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ВидДокумента = Документ.ВидДокумента;
	РеквизитыВидаДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидДокумента,
		"ВариантПодписания, ВестиУчетСторон, ВестиУчетПоКонтрагентам, ВестиУчетПоОрганизациям,
		|ЯвляетсяВходящейКорреспонденцией, ЯвляетсяИсходящейКорреспонденцией");
	
	РезультирующаяСтрока = "";
	
	//Истина - положительно, ложь - отрицательно, неопределено - нет действий
	РезультатПодписанияУтверждения = Новый Структура("Подписан, Утвержден",
		Неопределено, Неопределено);
	
	// Проверим подписание со стороны организации по действиям
	Если Документ.Ссылка.Пустая() Тогда
		
		// Проверим, есть ли действия нужных типов в обработке
		ВидыДействий = ДействияСервер.ДействующиеВидыДействийПоВидамОбъектов(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидДокумента));
		ТипыДействий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВидыДействий, "Тип");
		
		Для Каждого Тип Из ТипыДействий Цикл
			Если Тип.Значение.Тип = Перечисления.ТипыДействий.Подписание Тогда
				РезультатПодписанияУтверждения.Подписан = Ложь;
			КонецЕсли;
			Если Тип.Значение.Тип = Перечисления.ТипыДействий.Утверждение Тогда
				РезультатПодписанияУтверждения.Утвержден = Ложь;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		// Получить все действия подписания и утверждения
		ВсеДействия = ДействияСервер.ТекущиеДействияПредмета(Документ.Ссылка, , ТекущаяДатаСеанса()).Выгрузить();
		МассивДействий = ВсеДействия.ВыгрузитьКолонку("Действие");
		ДействияСервер.УдалитьПропущенныеДействия(МассивДействий);
		ВидыДействий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивДействий, "ВидДействия");
		МассивВидовДействий = Новый Массив;
		Для Каждого Вид Из ВидыДействий Цикл
			МассивВидовДействий.Добавить(Вид.Значение.ВидДействия);
		КонецЦикла;
		ТипыДействий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивВидовДействий, "Тип");
		
		// Проверить результаты выполнения этих действий
		Для Каждого Действие Из МассивДействий Цикл
			
			Если ТипыДействий[ВидыДействий[Действие].ВидДействия].Тип = Перечисления.ТипыДействий.Подписание Тогда
				
				Если РезультатПодписанияУтверждения.Подписан = Неопределено Тогда
					РезультатПодписанияУтверждения.Подписан = Истина;
				КонецЕсли;
				
				РезультатДействия = РегистрыСведений.РезультатыДействий.РезультатДействия(Действие);
				
				Если ЗначениеЗаполнено(РезультатДействия) Тогда
					РезультатПодписанияУтверждения.Подписан = РезультатПодписанияУтверждения.Подписан
						И РезультатДействия = Перечисления.РезультатыПодписания.Подписано;
				Иначе
					РезультатПодписанияУтверждения.Подписан = Ложь;
				КонецЕсли;
				
			ИначеЕсли ТипыДействий[ВидыДействий[Действие].ВидДействия].Тип = Перечисления.ТипыДействий.Утверждение Тогда
			
				Если РезультатПодписанияУтверждения.Утвержден = Неопределено Тогда
					РезультатПодписанияУтверждения.Утвержден = Истина;
				КонецЕсли;
			
				РезультатДействия = РегистрыСведений.РезультатыДействий.РезультатДействия(Действие);
			
				Если ЗначениеЗаполнено(РезультатДействия) Тогда
					РезультатПодписанияУтверждения.Утвержден = РезультатПодписанияУтверждения.Утвержден
						И РезультатДействия = Перечисления.РезультатыУтверждения.Утверждено;
				Иначе
					РезультатПодписанияУтверждения.Утвержден = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
	// Если по действиям не удалось установить подписанность то проверим реквизиты документа
	Если РезультатПодписанияУтверждения.Подписан = Неопределено Тогда
		Если РеквизитыВидаДокумента.ВестиУчетСторон 
			И (РеквизитыВидаДокумента.ВариантПодписания = Перечисления.ВариантыПодписания.МыИКонтрагенты
				Или РеквизитыВидаДокумента.ВариантПодписания = Перечисления.ВариантыПодписания.ТолькоМы) Тогда
			Стороны = Документ.Стороны;
			Для Каждого СтрокаСтороны Из Стороны Цикл
				Если РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(СтрокаСтороны.Сторона) Тогда
					РезультатПодписанияУтверждения.Подписан = СтрокаСтороны.Подписан;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если РеквизитыВидаДокумента.ЯвляетсяИсходящейКорреспонденцией Тогда
				РезультатПодписанияУтверждения.Подписан = 
					Документ.РезультатПодписания = Перечисления.РезультатыПодписания.Подписано;
			ИначеЕсли Не РеквизитыВидаДокумента.ЯвляетсяВходящейКорреспонденцией И
				РеквизитыВидаДокумента.ВестиУчетПоОрганизациям Тогда
				РезультатПодписанияУтверждения.Подписан = 
					Документ.РезультатПодписания = Перечисления.РезультатыПодписания.Подписано;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	// Проверим подписание контрагентом
	ПодписанКонтрагентом = Неопределено;
	Если РеквизитыВидаДокумента.ВестиУчетСторон Тогда
		
		Если РеквизитыВидаДокумента.ВариантПодписания = Перечисления.ВариантыПодписания.ТолькоКонтрагенты
			Или РеквизитыВидаДокумента.ВариантПодписания = Перечисления.ВариантыПодписания.МыИКонтрагенты Тогда
		
			ПодписанКонтрагентом = Истина;
			Стороны = Документ.Стороны;			
		
			Для Каждого СтрокаСтороны Из Стороны Цикл
				Если РаботаСПодписямиДокументовКлиентСервер.ЭтоКонтрагент(СтрокаСтороны.Сторона) Тогда
					ПодписанКонтрагентом = ПодписанКонтрагентом И СтрокаСтороны.Подписан;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

	ИначеЕсли РеквизитыВидаДокумента.ВестиУчетПоКонтрагентам 
		И Не РеквизитыВидаДокумента.ЯвляетсяИсходящейКорреспонденцией Тогда
		
		ПодписанКонтрагентом = ЗначениеЗаполнено(Документ.ПодписалОтКонтрагента);
	
	КонецЕсли;
	
	
	Если ПодписанКонтрагентом <> Неопределено Тогда
		
		Если РеквизитыВидаДокумента.ЯвляетсяВходящейКорреспонденцией
			Или (Не РеквизитыВидаДокумента.ЯвляетсяИсходящейКорреспонденцией
				И РеквизитыВидаДокумента.ВестиУчетПоКонтрагентам) Тогда
			
			Если РезультатПодписанияУтверждения.Подписан = Неопределено Тогда
				РезультатПодписанияУтверждения.Подписан = ПодписанКонтрагентом;
			Иначе
				РезультатПодписанияУтверждения.Подписан = 
					РезультатПодписанияУтверждения.Подписан И ПодписанКонтрагентом;
			КонецЕсли;
			
		ИначеЕсли РеквизитыВидаДокумента.ВариантПодписания 
			= Перечисления.ВариантыПодписания.МыИКонтрагенты Тогда
			
			Если РезультатПодписанияУтверждения.Подписан = Неопределено Тогда
				РезультатПодписанияУтверждения.Подписан = Ложь;
			Иначе
				РезультатПодписанияУтверждения.Подписан = 
					РезультатПодписанияУтверждения.Подписан И ПодписанКонтрагентом;
			КонецЕсли;
			
		ИначеЕсли РеквизитыВидаДокумента.ВариантПодписания 
			= Перечисления.ВариантыПодписания.ТолькоКонтрагенты Тогда
			
			РезультатПодписанияУтверждения.Подписан = ПодписанКонтрагентом;
			
		КонецЕсли;
		
	КонецЕсли;
		
	
	Если РезультатПодписанияУтверждения.Подписан <> Неопределено Тогда
		РезультирующаяСтрока = ?(РезультатПодписанияУтверждения.Подписан,
			НСтр("ru = 'Подписан'"), НСтр("ru = 'Не подписан'"));
	КонецЕсли;
	
	Если РезультатПодписанияУтверждения.Утвержден <> Неопределено Тогда
		Если ЗначениеЗаполнено(РезультирующаяСтрока) Тогда
			РезультирующаяСтрока = СтрШаблон("%1, %2", РезультирующаяСтрока,
				?(РезультатПодписанияУтверждения.Утвержден,
					НСтр("ru = 'утвержден'"), НСтр("ru = 'не утвержден'")));
		Иначе
			РезультирующаяСтрока = ?(РезультатПодписанияУтверждения.Утвержден,
				НСтр("ru = 'Утвержден'"), НСтр("ru = 'Не утвержден'"));
		КонецЕсли;
	КонецЕсли;

	Возврат РезультирующаяСтрока;
		
КонецФункции

// Возвращает строку подписания документа в формате
// Иванов И. И.: не подписан, Петров П. П.: подписан
// 
// Параметры:
//  Документ - СправочникСсылка.ДокументыПредприятия - Документ, подписание которого нужно проверить.
//  ВидДокумента - СправочникСсылка.ВидыДокументов, Неопределено - Вид документа. Нужен, если документ
//  	еще не записан.
//  ВариантыТекста - Неопределено, Структура - Варианты текста вместо стандартных:
//  	*ВариантДа - Строка - положительный результат подписания (по умолчанию Подписан)
//  	*ВариантНет - Строка - отрицательный результат подписания (по умолчанию Не подписан)
// 
// Возвращаемое значение:
//  Строка - Строка с результатами подписания с перечислением подписантов и действий, если их больше 1.
//
Функция ПолучитьСтрокуПодписи(Документ, ВидДокумента = Неопределено, ВариантыТекста = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = "";
	
	Если ВидДокумента = Неопределено Тогда
		ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ВидДокумента");
		Если ВидДокумента = Неопределено Тогда
			// Передана пустая ссылка на документ и не передан вид документа
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Если ВариантыТекста <> Неопределено Тогда
		ПодписьДа = ВариантыТекста.ВариантДа;
		ПодписьНет = ВариантыТекста.ВариантНет;
	Иначе
		ПодписьДа = НСтр("ru = 'Подписан'");
		ПодписьНет = НСтр("ru = 'Не подписан'");
	КонецЕсли;
	
	Если Документ.Пустая() Тогда // Для пустой ссылки участники могут быть не разыменованы или заменены
		
		// Проверим, есть ли действия нужных типов в обработке		
		ТипыДействий = ДействияСерверПовтИспНаВремяВызова.ДействующиеТипыДействийПоВидуОбъекта(ВидДокумента);
		
		Для Каждого Тип Из ТипыДействий Цикл
			Если Тип.Значение.Тип = Перечисления.ТипыДействий.Подписание Тогда
				Результат = ПодписьНет;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		// Получить все действия подписания и их участников
		ВсеДействия = ДействияСервер.ТекущиеДействияПредмета(Документ, , ТекущаяДатаСеанса()).Выгрузить();
		ДействияПодписания = Новый Массив;
		МассивДействий = ВсеДействия.ВыгрузитьКолонку("Действие");
		ВидыДействий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивДействий, "ВидДействия");
		МассивВидовДействий = Новый Массив;
		Для Каждого Вид Из ВидыДействий Цикл
			МассивВидовДействий.Добавить(Вид.Значение.ВидДействия);
		КонецЦикла;
		ТипыДействий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивВидовДействий, "Тип");
		
		// Проверить результаты выполнения этих действий
		Для Каждого Действие Из МассивДействий Цикл
			
			Если ТипыДействий[ВидыДействий[Действие].ВидДействия].Тип <> Перечисления.ТипыДействий.Подписание Тогда
				Продолжить;
			Иначе
				ДействияПодписания.Добавить(Действие);
			КонецЕсли;
		
		КонецЦикла;
		
		ТребуетсяПрефиксДействия = ДействияПодписания.Количество() > 1;
		
		Для Каждого Действие Из ДействияПодписания Цикл
			
			Если ТребуетсяПрефиксДействия Тогда
				Результат = СтрШаблон("%1%2: ", Результат, Действие);
			КонецЕсли;
			
			// Получить подписантов и проверить кто из них подписал и кто нет				
			Участники = ДействияСервер.УчастникиДействия(Действие);
			СведенияОбУчастниках = РегистрыСведений.СведенияОбУчастникахДействий.ПолучитьСведенияОбУчастникахДействия(Действие);
			
			Для Каждого Участник Из Участники Цикл
				Если Участник.Функция = Перечисления.ФункцииУчастниковПодписания.Подписывающий Тогда

					РезультатДействия = РегистрыСведений.РезультатыДействий.РезультатУчастникаДействия(
						Действие, Участник.Идентификатор);

					Если РезультатДействия <> Неопределено
						И РезультатДействия.Результат = Перечисления.РезультатыПодписания.Подписано Тогда
						Результат = СтрШаблон("%1%2 (%3), ", Результат, ПодписьДа,
							СведенияОбУчастниках[Участник.Идентификатор].ПредставлениеФактическогоИсполнителя);
					Иначе
						Результат = СтрШаблон("%1%2 (%3), ", Результат, ПодписьНет, Участник.Участник);
					КонецЕсли;

				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		КэшДокументыПредприятияФормаЭлемента =
			КэшиНаВремяВызоваПовтИсп.КэшДокументыПредприятияФормаЭлемента();
		Если КэшДокументыПредприятияФормаЭлемента.Инициализирован
			И КэшДокументыПредприятияФормаЭлемента.КэшДокумента.ВидДокумента = ВидДокумента Тогда
			РеквизитыВидаДокумента = КэшДокументыПредприятияФормаЭлемента.КэшВидаДокумента;
		Иначе
			РеквизитыВидаДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидДокумента,
				"ВестиУчетПоКонтрагентам, ВестиУчетСторон, ЯвляетсяВходящейКорреспонденцией, ЯвляетсяИсходящейКорреспонденцией");
		КонецЕсли;
	
		Если РеквизитыВидаДокумента.ВестиУчетСторон Тогда
			
			КэшДокументыПредприятияФормаЭлемента =
				КэшиНаВремяВызоваПовтИсп.КэшДокументыПредприятияФормаЭлемента();
			Если КэшДокументыПредприятияФормаЭлемента.Инициализирован
				И КэшДокументыПредприятияФормаЭлемента.КэшДокумента.Ссылка = Документ Тогда
				РеквизитыДокумента = КэшДокументыПредприятияФормаЭлемента.КэшДокумента;
			Иначе
				РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ,
					"ДатаСоздания, ДатаРегистрации, Стороны");
			КонецЕсли;
			ДатаНачалаОтсчета = Делопроизводство.ДатаУчетаДокумента(РеквизитыДокумента);
			Стороны = РеквизитыДокумента.Стороны.Выгрузить();
			ПодписантыКонтрагентов = Новый Массив;
			Для Каждого СтрокаСтороны Из Стороны Цикл
				Если ДелопроизводствоКлиентСервер.ЭтоКонтрагент(СтрокаСтороны.Сторона) 
						И ЗначениеЗаполнено(СтрокаСтороны.Подписал)
						И (
							ТипЗнч(СтрокаСтороны.Подписал) = Тип("СправочникСсылка.Сотрудники")
							Или ТипЗнч(СтрокаСтороны.Подписал) = Тип("СправочникСсылка.КонтактныеЛица")
						) Тогда
					ПодписантыКонтрагентов.Добавить(СтрокаСтороны.Подписал);
				КонецЕсли;
			КонецЦикла;
			ДолжностиПодписантов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ПодписантыКонтрагентов, "Должность");
			
			Для Каждого СтрокаСтороны Из Стороны Цикл
				Если ДелопроизводствоКлиентСервер.ЭтоКонтрагент(СтрокаСтороны.Сторона) Тогда
					
					КонтрагентПредставление = Справочники.Контрагенты.ПредставлениеКонтрагентаНаДату(СтрокаСтороны.Сторона, ДатаНачалаОтсчета);
					
					Если ЗначениеЗаполнено(СтрокаСтороны.Подписал) Тогда
						
						Должность = ДолжностиПодписантов[СтрокаСтороны.Подписал];
						ПредставлениеСтороны = "";
						Если ЗначениеЗаполнено(Должность) Тогда
							ПредставлениеСтороны = СтрШаблон("%1, %2", Должность, КонтрагентПредставление);
						Иначе
							ПредставлениеСтороны = КонтрагентПредставление;
						КонецЕсли;
						
						Результат = СтрШаблон("%1%2 (%3 (%4)), ", Результат, 
							?(СтрокаСтороны.Подписан, ПодписьДа, ПодписьНет),
							СтрокаСтороны.Подписал,
							ПредставлениеСтороны);
							
					Иначе
						
						Результат = СтрШаблон("%1%2 (%3), ", Результат, 
							?(СтрокаСтороны.Подписан, ПодписьДа, ПодписьНет),
							КонтрагентПредставление);
							
					КонецЕсли;
				КонецЕсли;
			КонецЦикла
			
		ИначеЕсли РеквизитыВидаДокумента.ВестиУчетПоКонтрагентам Тогда
			
			КэшДокументыПредприятияФормаЭлемента =
				КэшиНаВремяВызоваПовтИсп.КэшДокументыПредприятияФормаЭлемента();
			Если КэшДокументыПредприятияФормаЭлемента.Инициализирован
				И КэшДокументыПредприятияФормаЭлемента.КэшДокумента.Ссылка = Документ Тогда
				РеквизитыДокумента = КэшДокументыПредприятияФормаЭлемента.КэшДокумента;
			Иначе
				РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ,
					"Контрагент, ПодписалОтКонтрагента, ДатаСоздания, ДатаРегистрации");
			КонецЕсли;
			Контрагент = РеквизитыДокумента.Контрагент;
			ПодписалОтКонтрагента = РеквизитыДокумента.ПодписалОтКонтрагента;
			ДатаНачалаОтсчета = Делопроизводство.ДатаУчетаДокумента(РеквизитыДокумента);
			
			Если ЗначениеЗаполнено(Контрагент) Тогда
				
				КонтрагентПредставление = Справочники.Контрагенты.ПредставлениеКонтрагентаНаДату(Контрагент, ДатаНачалаОтсчета);
				Если ЗначениеЗаполнено(ПодписалОтКонтрагента) Тогда
					
					ПредставлениеСтороны = КонтрагентПредставление;
					Должность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодписалОтКонтрагента, "Должность");
					Если ЗначениеЗаполнено(Должность) Тогда
						ПредставлениеСтороны = СтрШаблон("%1, %2", Должность, КонтрагентПредставление);
					КонецЕсли;
					
					Результат = СтрШаблон("%1%2 (%3 (%4)), ", Результат, ПодписьДа, 
						ПодписалОтКонтрагента, ПредставлениеСтороны);
					
				ИначеЕсли Не РеквизитыВидаДокумента.ЯвляетсяВходящейКорреспонденцией 
					И Не РеквизитыВидаДокумента.ЯвляетсяИсходящейКорреспонденцией Тогда 
					Результат = СтрШаблон("%1%2 (%3), ", Результат, ПодписьНет, 
						КонтрагентПредставление);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	
	Если СтрНачинаетсяС(Результат, ", ") Тогда
		Результат = Сред(Результат, 3);
	КонецЕсли;
	Если СтрЗаканчиваетсяНа(Результат, ", ") Тогда
		Результат = Сред(Результат, 1, СтрДлина(Результат)-2);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает строку подписания документа в формате
// Иванов И. И.: не подписан, Петров П. П.: подписан
// 
// Параметры:
//  Документ - СправочникСсылка.ДокументыПредприятия - Документ, подписание которого нужно проверить.
//  ВидДокумента - СправочникСсылка.ВидыДокументов, Неопределено - Вид документа. Нужен, если документ
//  	еще не записан.
//  ВариантыТекста - Неопределено, Структура - Варианты текста вместо стандартных:
//  	*ВариантДа - Строка - положительный результат подписания (по умолчанию Утвержден)
//  	*ВариантНет - Строка - отрицательный результат подписания (по умолчанию Не утвержден)
// 
// Возвращаемое значение:
//  Строка - Строка с результатами утверждения с перечислением утверждающих и действий, если их больше 1.
//
Функция ПолучитьСтрокуУтверждения(Документ, ВидДокумента = Неопределено, ВариантыТекста = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Результат = "";
	
	Если ВидДокумента = Неопределено Тогда
		ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ВидДокумента");
		Если ВидДокумента = Неопределено Тогда
			// Передана пустая ссылка на документ и не передан вид документа
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Если ВариантыТекста <> Неопределено Тогда
		ПодписьДа = ВариантыТекста.ВариантДа;
		ПодписьНет = ВариантыТекста.ВариантНет;
	Иначе
		ПодписьДа = НСтр("ru = 'Утвержден'");
		ПодписьНет = НСтр("ru = 'Не утвержден'");
	КонецЕсли;
	
	Если Документ.Пустая() Тогда // Для пустой ссылки участники могут быть не разыменованы
		
		// Проверим, есть ли действия нужных типов в обработке		
		ТипыДействий = ДействияСерверПовтИспНаВремяВызова.ДействующиеТипыДействийПоВидуОбъекта(ВидДокумента);
		
		Для Каждого Тип Из ТипыДействий Цикл
			Если Тип.Значение.Тип = Перечисления.ТипыДействий.Утверждение Тогда
				Результат = ПодписьНет;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		// Получить все действия утверждения и их участников
		ВсеДействия = ДействияСервер.ТекущиеДействияПредмета(Документ, , ТекущаяДатаСеанса()).Выгрузить();
		ДействияУтверждения = Новый Массив;
		МассивДействий = ВсеДействия.ВыгрузитьКолонку("Действие");
		ВидыДействий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивДействий, "ВидДействия");
		МассивВидовДействий = Новый Массив;
		Для Каждого Вид Из ВидыДействий Цикл
			МассивВидовДействий.Добавить(Вид.Значение.ВидДействия);
		КонецЦикла;
		ТипыДействий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивВидовДействий, "Тип");
		
		// Проверить результаты выполнения этих действий
		Для Каждого Действие Из МассивДействий Цикл
			
			Если ТипыДействий[ВидыДействий[Действие].ВидДействия].Тип <> Перечисления.ТипыДействий.Утверждение Тогда
				Продолжить;
			Иначе
				ДействияУтверждения.Добавить(Действие);
			КонецЕсли;
		
		КонецЦикла;
		
		ТребуетсяПрефиксДействия = ДействияУтверждения.Количество() > 1;
		
		Для Каждого Действие Из ДействияУтверждения Цикл
			
			Если ТребуетсяПрефиксДействия Тогда
				Результат = СтрШаблон("%1%2: ", Результат, Действие);
			КонецЕсли;
			
			// Получить подписантов и проверить кто из них подписал и кто нет				
			Участники = ДействияСервер.УчастникиДействия(Действие);
			СведенияОбУчастниках = РегистрыСведений.СведенияОбУчастникахДействий.ПолучитьСведенияОбУчастникахДействия(Действие);
			
			Для Каждого Участник Из Участники Цикл
				Если Участник.Функция = Перечисления.ФункцииУчастниковУтверждения.Утверждающий Тогда

					РезультатДействия = РегистрыСведений.РезультатыДействий.РезультатУчастникаДействия(
						Действие, Участник.Идентификатор); 
						
					Если РезультатДействия <> Неопределено
						И РезультатДействия.Результат = Перечисления.РезультатыУтверждения.Утверждено Тогда
						
						Результат = СтрШаблон("%1%2 (%3), ", Результат, ПодписьДа,
							СведенияОбУчастниках[Участник.Идентификатор].ПредставлениеФактическогоИсполнителя);
							
					Иначе
						
						Результат = СтрШаблон("%1%2 (%3), ", Результат, ПодписьНет,
							Строка(Участник.Участник));
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтрНачинаетсяС(Результат, ", ") Тогда
		Результат = Сред(Результат, 3);
	КонецЕсли;
	Если СтрЗаканчиваетсяНа(Результат, ", ") Тогда
		Результат = Сред(Результат, 1, СтрДлина(Результат)-2);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Регистрирует бизнес-событие "Назначение ответственного", если указан ответственный и он изменился.
//
// Параметры:
//  Документ                - СправочникСсылка.ДокументыПредприятия - Документ, запись которого выполняется.
//  Ответственный           - СправочникСсылка.Пользователи, СправочникСсылка.Сотрудники        - Ответственный за документ.
//  ЭтоНовыйДокумент        - Булево                               - Это новый документ.
//  ПредыдущийОтветственный - СправочникСсылка.Пользователи, СправочникСсылка.Сотрудники        - Предыдущий ответственный за документ.
//
Процедура ЗарегистрироватьСобытиеНазначениеОтветственного(Документ, Ответственный, ЭтоНовыйДокумент, ПредыдущийОтветственный) Экспорт
	
	Если Не ЗначениеЗаполнено(Ответственный) Или Ответственный = ПредыдущийОтветственный Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстСобытия = КонтекстСобытияНазначениеОтветственного();
	КонтекстСобытия.ЭтоНовыйДокумент = ЭтоНовыйДокумент;
	КонтекстСобытия.НовыйОтветственный = Ответственный;
	
	БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(
		Документ,
		Справочники.ВидыБизнесСобытий.НазначениеОтветственного,
		Новый ХранилищеЗначения(КонтекстСобытия));
	
КонецПроцедуры

// Формирует контекст события "Назначение ответственного".
//
// Возвращаемое значение:
//  Структура - Контекст события "Назначение ответственного".
//  * ЭтоНовыйДокумент   - Булево                        - Это новый документ.
//  * НовыйОтветственный - СправочникСсылка.Пользователи, СправочникСсылка.Сотрудники - Новый ответственный.
//
Функция КонтекстСобытияНазначениеОтветственного() Экспорт
	
	Возврат Новый Структура("ЭтоНовыйДокумент, НовыйОтветственный");
	
КонецФункции

// Проверяет, доступно ли переданное поле документа для изменения.
//
// Параметры:
//  ИмяПоляКоманды - Строка- имя проверяемого реквизита.
//  Документ - СправочникСсылка.ДокументыПредприятия, СправочникСсылка.ДокументыПредприятия,
//  	СправочникСсылка.ДокументыПредприятия,- ссылка на документ.
//
// Возвращаемое значение:
//  Булево - Истина, если если переданное поле доступно для изменения.
//
Функция ПолеДокументаДоступноДляИзменения(ИмяПоляКоманды, Документ) Экспорт 
	
	Если РольДоступна("ПолныеПрава") Тогда 
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Шаблон, ПодписанЭП");
	
	// ЭП
	Если Реквизиты.ПодписанЭП  Тогда
		Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Документ) Тогда 
			МассивИмен = Справочники.ДокументыПредприятия.ПолучитьИменаКлючевыхРеквизитов();
		КонецЕсли;
		
		Если МассивИмен.Найти(ИмяПоляКоманды) <> Неопределено Тогда 
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// Доступность по шаблону
	Шаблон = Реквизиты.Шаблон;
	Если ЗначениеЗаполнено(Шаблон) 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Шаблон, "ЗапретитьИзменятьРеквизитыИзШаблона") = Истина Тогда
		Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Документ) Тогда 
			ИменаРеквизитов = Справочники.ДокументыПредприятия.ИменаРеквизитовИзШаблона();
		КонецЕсли;
		
		Если СтрНайти(ИменаРеквизитов, ИмяПоляКоманды) > 0 Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Обновляет Форму документа в шаблонах зависимых от указанного вида документа
//
// Параметры:
//  ВидДокумента -  СправочникСсылка.ВидыДокументов - вид документа.
//  ФормаДокумента - Перечисление.ВариантыФормДокументов - устанавливаемая форма документа.
//
Процедура ОбновитьФормуДокументаУШаблонов(ВидДокумента, ФормаДокумента) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Меняем "Форму документа" у подчиненных шаблонов
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Шаблоны.Ссылка
		|ИЗ
		|	Справочник.ШаблоныДокументов КАК Шаблоны
		|ГДЕ
		|	Шаблоны.ВидДокумента = &Ссылка
		|	И Шаблоны.ФормаДокумента <> &ФормаДокумента";
	
	Запрос.Параметры.Вставить("Ссылка", ВидДокумента);
	Запрос.Параметры.Вставить("ФормаДокумента", ФормаДокумента);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		ШаблонОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ШаблонОбъект.ФормаДокумента = ФормаДокумента;
		ШаблонОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Обновляет список выбора Формы документа в зависимости от указанной настройки в виде документа
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа или шаблона, 
//    в котором заполняется реквизит "Форма документа".
//
Процедура ЗаполнитьСписокВыбораФормыДокумента(Форма) Экспорт 
	
	Объект = Форма.Объект;
	РеквизитФормаДокумента = Форма.Элементы.ФормаДокумента;
	
	РеквизитФормаДокумента.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда 
		
		КэшДокументыПредприятияФормаЭлемента =
			КэшиНаВремяВызоваПовтИсп.КэшДокументыПредприятияФормаЭлемента();
		Если КэшДокументыПредприятияФормаЭлемента.Инициализирован
			И КэшДокументыПредприятияФормаЭлемента.КэшДокумента.ВидДокумента = Объект.ВидДокумента Тогда
			ФормаВидаДокумента = КэшДокументыПредприятияФормаЭлемента.КэшВидаДокумента.ФормаДокумента;
		ИначеЕсли ТипЗнч(Форма.ВидДокументаКэш) = Тип("Структура") Тогда
			ФормаВидаДокумента = Форма.ВидДокументаКэш.ФормаДокумента;
		Иначе
			ФормаВидаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ФормаДокумента");
		КонецЕсли;
		
		Если ФормаВидаДокумента = ПредопределенноеЗначение(
			"Перечисление.ВариантыФормДокументов.БумажнаяИлиЭлектронная") Тогда 
			РеквизитФормаДокумента.СписокВыбора.Добавить(ПредопределенноеЗначение(
				"Перечисление.ВариантыФормДокументов.Бумажная"));
			РеквизитФормаДокумента.СписокВыбора.Добавить(ПредопределенноеЗначение(
				"Перечисление.ВариантыФормДокументов.Электронная"));
		ИначеЕсли ЗначениеЗаполнено(ФормаВидаДокумента) Тогда  
			РеквизитФормаДокумента.СписокВыбора.Добавить(ФормаВидаДокумента);
			
			Если Объект.ФормаДокумента <> ФормаВидаДокумента Тогда 
				Объект.ФормаДокумента = ФормаВидаДокумента;
				Форма.Модифицированность = Истина;
				
				Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Объект.Ссылка) Тогда
					Форма.ИзменилсяКлючНастроекОбработки = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе 
			РеквизитФормаДокумента.СписокВыбора.Добавить(ПредопределенноеЗначение(
				"Перечисление.ВариантыФормДокументов.Бумажная"));
		КонецЕсли;
	Иначе 
		РеквизитФормаДокумента.СписокВыбора.Добавить(ПредопределенноеЗначение(
			"Перечисление.ВариантыФормДокументов.Бумажная"));
	КонецЕсли;
	
КонецПроцедуры

// Обновляет сведения о наличии оригинала в карточке документа
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма документа.
//   ОбновлятьЭлементыФормы - Булево - будет обновлено оформление элементов формы.
//
Процедура ОбновитьСведенияОПолученииОригинала(Форма, ОбновлятьЭлементыФормы = Истина) Экспорт
	
	Объект = Форма.Объект;
	
	Форма.ОригиналПолученТекст = "";
	Форма.ОригиналПолучен = Ложь;
	
	Если ОбновлятьЭлементыФормы Тогда
		Элементы = Форма.Элементы;
		Элементы.ОригиналПолученТекст.Видимость = Истина;
		Элементы.ОригиналПолученТекст.ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;
	Иначе
		Элементы = Неопределено;
	КонецЕсли;
	
	КэшДокументыПредприятияФормаЭлемента =
		КэшиНаВремяВызоваПовтИсп.КэшДокументыПредприятияФормаЭлемента();
	Если КэшДокументыПредприятияФормаЭлемента.Инициализирован
		И КэшДокументыПредприятияФормаЭлемента.КэшДокумента.ВидДокумента = Объект.ВидДокумента Тогда
		КонтролироватьНаличиеОригинала = КэшДокументыПредприятияФормаЭлемента.КэшВидаДокумента.КонтролироватьНаличиеОригинала;
	ИначеЕсли ТипЗнч(Форма.ВидДокументаКэш) = Тип("Структура") Тогда
		КонтролироватьНаличиеОригинала = Форма.ВидДокументаКэш.КонтролироватьНаличиеОригинала;
	Иначе
		КонтролироватьНаличиеОригинала = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
			Объект.ВидДокумента, "КонтролироватьНаличиеОригинала");
	КонецЕсли;
	Если Не КонтролироватьНаличиеОригинала Тогда
		Если ОбновлятьЭлементыФормы Тогда
			Элементы.ОригиналПолученТекст.Видимость = Ложь;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Форма.ОригиналПолученТекст = НСтр("ru = 'Отсутствует'");
	
	Если Объект.Ссылка.Пустая() Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДанныеДокументовПредприятия.ОригиналПолучен КАК ОригиналПолучен,
		|	ДанныеДокументовПредприятия.ОригиналПолучил КАК ОригиналПолучил,
		|	ДанныеДокументовПредприятия.ДатаПолученияОригинала КАК ДатаПолученияОригинала,
		|	ДанныеДокументовПредприятия.ОригиналПолучил.ПредставлениеВДокументах КАК СотрудникПредставлениеВДокументах
		|ИЗ
		|	РегистрСведений.ДанныеДокументовПредприятия КАК ДанныеДокументовПредприятия
		|ГДЕ
		|	ДанныеДокументовПредприятия.Документ = &Документ");
	Запрос.Параметры.Вставить("Документ", Объект.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ОригиналПолучен Тогда
			Если ЗначениеЗаполнено(Выборка.СотрудникПредставлениеВДокументах) Тогда
				Сотрудник = Выборка.СотрудникПредставлениеВДокументах;
			Иначе
				Сотрудник = Строка(Выборка.ОригиналПолучил);
			КонецЕсли;
			
			Форма.ОригиналПолучен = Истина;
			Форма.ОригиналПолученТекст = СтрШаблон(НСтр("ru = 'Получен (%1, %2)'"),
				Сотрудник, Формат(Выборка.ДатаПолученияОригинала, "ДЛФ=D"));
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ОбновлятьЭлементыФормы И Не Форма.ОригиналПолучен И ЗначениеЗаполнено(Объект.РегистрационныйНомер) Тогда
		Элементы.ОригиналПолученТекст.ЦветТекста = ЦветаСтиля.ПросроченныеДанныеЦвет;
	КонецЕсли;
	
КонецПроцедуры

// Формирует список мест хранения при автоподборе
//
// Параметры:
//  МестоХраненияСтрока - Строка - введнное значение для поиска места хранения.
//
// Возвращаемое значение
//  ДанныеВыбора - Список значений - список, содержащий ссылки на подразделения, места хранения и помещения.
//
Функция СформироватьДанныеВыбораМестаХранения(МестоХраненияСтрока) Экспорт 
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить(МестоХраненияСтрока);
	
	Если СтрДлина(МестоХраненияСтрока) < 3 Тогда 
		Возврат ДанныеВыбора;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТерриторииИПомещения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ТерриторииИПомещения КАК ТерриторииИПомещения
	|ГДЕ
	|	ТерриторииИПомещения.Наименование ПОДОБНО &СтрокаПоиска
	|	И НЕ ТерриторииИПомещения.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МестаХраненияДел.Ссылка
	|ИЗ
	|	Справочник.МестаХраненияДел КАК МестаХраненияДел
	|ГДЕ
	|	МестаХраненияДел.Наименование ПОДОБНО &СтрокаПоиска
	|	И НЕ МестаХраненияДел.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтруктураПредприятия.Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|ГДЕ
	|	СтруктураПредприятия.Наименование ПОДОБНО &СтрокаПоиска
	|	И НЕ СтруктураПредприятия.ПометкаУдаления";
	
	Запрос.Параметры.Вставить("СтрокаПоиска", МестоХраненияСтрока + "%");
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ДанныеВыбора.Добавить(Выборка.Ссылка, 
				СокрЛП(Выборка.Ссылка) + " (" + ТипЗнч(Выборка.Ссылка) + ")");
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Обновляет видимость реквизитов хранения в карточке документа
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа 
//  Параметры -  Структура - реквизиты вида документа.
//
Процедура ОбновитьВидимостьРеквизитовХранения(Форма, Параметры = Неопределено) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМестаХранения") Тогда 
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	Если Объект.ФормаДокумента = Перечисления.ВариантыФормДокументов.Электронная Тогда 
		Элементы.МестоХранения.Видимость = Ложь;
		Элементы.ОтветственныйЗаХранение.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Параметры = Неопределено Тогда 
		Параметры = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
			Объект.ВидДокумента,
			"УчитыватьМестоХранения, УчитыватьОтветственногоЗаХранение");
	КонецЕсли;
	
	УчитыватьМестаХранения = 
		Параметры.УчитыватьМестоХранения <> Перечисления.ВариантыИспользованияПолейХранения.НеУчитывать;
	Элементы.МестоХранения.Видимость = УчитыватьМестаХранения;
	Элементы.МестоХранения.АвтоОтметкаНезаполненного = 
		Параметры.УчитыватьМестоХранения = Перечисления.ВариантыИспользованияПолейХранения.Обязательно;
		
	Если УчитыватьМестаХранения И Объект.МестоХранения = Неопределено Тогда 
		Объект.МестоХранения = "";
	КонецЕсли;
	
	Элементы.ОтветственныйЗаХранение.Видимость = 
		Параметры.УчитыватьОтветственногоЗаХранение <> Перечисления.ВариантыИспользованияПолейХранения.НеУчитывать;
	Элементы.ОтветственныйЗаХранение.АвтоОтметкаНезаполненного = 
		Параметры.УчитыватьОтветственногоЗаХранение = Перечисления.ВариантыИспользованияПолейХранения.Обязательно;
		
КонецПроцедуры

// Проверяет заполнение полей "Место хранения" и "Ответственный за хранение",
//  в зависимости от настройки вида документа
//
// Параметры:
//  СправочникОбъект     - СправочникОбъект.ДокументыПредприятия - реквизиты которого необходимо проверить
//  ПроверяемыеРеквизиты - Массив - путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ПроверитьЗаполнениеРеквизитовХранения(СправочникОбъект, ПроверяемыеРеквизиты) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМестаХранения") Тогда 
		Возврат;
	КонецЕсли;
	
	Если СправочникОбъект.ФормаДокумента = Перечисления.ВариантыФормДокументов.Электронная Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СправочникОбъект.РегистрационныйНомер) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыВида = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
		СправочникОбъект.ВидДокумента, 
		"УчитыватьМестоХранения, УчитыватьОтветственногоЗаХранение");
	ВариантОбязательно = Перечисления.ВариантыИспользованияПолейХранения.Обязательно;
	Если РеквизитыВида.УчитыватьМестоХранения = ВариантОбязательно
		И Не ЗначениеЗаполнено(СправочникОбъект.МестоХранения) Тогда 
		ПроверяемыеРеквизиты.Добавить("МестоХранения");
	КонецЕсли;
	
	Если РеквизитыВида.УчитыватьОтветственногоЗаХранение = ВариантОбязательно
		И Не ЗначениеЗаполнено(СправочникОбъект.ОтветственныйЗаХранение) Тогда 
		ПроверяемыеРеквизиты.Добавить("ОтветственныйЗаХранение");
	КонецЕсли;
	
КонецПроцедуры


// Проверяет заполнение полей "Место хранения" и "Ответственный за хранение",
//  в зависимости от настройки вида документа
//
// Параметры:
//  Форма - УправляемаяФорма - Форма элемента справочника ДокументыПредприятия,
//								заполнение которой нужно проверить
//  Результат - Булево - Флаг о возможности регистрации объекта
//
Процедура ПроверитьЗаполнениеРеквизитовХраненияВФорме(Форма, Результат) Экспорт
	
	Объект = Форма.Объект;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМестаХранения") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.ФормаДокумента = Перечисления.ВариантыФормДокументов.Электронная Тогда 
		Возврат;
	КонецЕсли;
	
	РеквизитыВида = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
		Объект.ВидДокумента, "УчитыватьМестоХранения, УчитыватьОтветственногоЗаХранение");
		
	ВариантОбязательно = Перечисления.ВариантыИспользованияПолейХранения.Обязательно;
	
	Если РеквизитыВида.УчитыватьМестоХранения = ВариантОбязательно
		И Не ЗначениеЗаполнено(Объект.МестоХранения) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Поле ""Место хранения"" не заполнено'"),,"Объект.МестоХранения");
		Результат = Ложь;
		
	КонецЕсли;
	
	Если РеквизитыВида.УчитыватьОтветственногоЗаХранение = ВариантОбязательно
		И Не ЗначениеЗаполнено(Объект.ОтветственныйЗаХранение) Тогда 
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Поле ""Ответственный за хранение"" не заполнено'"),,"Объект.ОтветственныйЗаХранение");
		Результат = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#Область КэшВидаДокумента

// Возвращает структуру, содержащую кэш вида документа
//
// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокументов
// Возвращаемое значение:
//   См. НовыйКэшВидаДокумента
Функция КэшВидаДокумента(ВидДокумента) Экспорт

	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		
		Возврат НовыйКэшВидаДокумента();
	
	Иначе
		
		ВидДокументаКэш = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
			ВидДокумента, 
			"Ссылка,
			|Наименование,
			|ЯвляетсяВходящейКорреспонденцией,
			|ЯвляетсяИсходящейКорреспонденцией,
			|ВестиУчетПоАдресатам,
			|ВестиУчетПоКонтрагентам,
			|ВестиУчетПоОрганизациям,
			|УчитыватьНедействующиеДокументы,
			|ЯвляетсяДоговором,
			|ВестиУчетТоваровИУслуг,
			|УчитыватьСрокДействия,
			|НеобходимаПечатьШтрихкода,
			|ВестиУчетПоСтатьямДДС,
			|ВестиУчетСторон,
			|ВариантПодписания,
			|ЯвляетсяОбращениемОтГраждан,
			|ВестиУчетПоТематикам,
			|ОбязательноУказаниеПроекта,
			|УчитыватьОтветственногоЗаХранение,
			|УчитыватьМестоХранения,
			|ЯвляетсяЗаявкойНаОплату,
			|ВестиУчетПоНоменклатуреДел,
			|ОбязательноеУказаниеОтветственного,
			|ИспользоватьВременныеНомера,
			|ИспользоватьВажность,
			|ИспользоватьЭДО,
			|УчитыватьВходящийНомерИДатуПолучателя,
			|СрокИсполнения,
			|СрокИсполненияУказанВРабочихДнях,
			|ИспользоватьСрокИсполнения,
			|ЯвляетсяКомплектомДокументов,
			|ОбязателенФайлОригинала,
			|Родитель,
			|РолиФайлов,
			|ФормаДокумента,
			|УчитыватьСуммуДокумента,
			|КонтролироватьНаличиеОригинала");

		РолиФайлов = РолиФайловДляВидаДокументов(ВидДокумента, ВидДокументаКэш);
		ВидДокументаКэш.Вставить("РолиФайлов", Новый Массив);
		Для Каждого Стр Из РолиФайлов Цикл
			ОписаниеРоли = Новый Структура(
				"Роль, Обязательная, ТолькоОдинФайл");
			ЗаполнитьЗначенияСвойств(ОписаниеРоли, Стр);
			ВидДокументаКэш.РолиФайлов.Добавить(ОписаниеРоли);
		КонецЦикла;	
		
		ВидДокументаКэш.Вставить("ОбработкаЗадана", 
			Справочники.НастройкиОбработкиВидовОбъектов.НастройкиОбработкиЗаданы(
			ВидДокумента, ТекущаяДатаСеанса()));
		ВидДокументаКэш.Вставить("НастройкиДействийЗаданы",
			НастройкиДействий.КоличествоНастроекПравилОбработки(ВидДокумента) > 0);
	КонецЕсли;
	
	Возврат ВидДокументаКэш; //@skip-check constructor-function-return-section

КонецФункции

// Конструктор "Кэша вида документа".
// 
// Возвращаемое значение:
//  Структура -  Новый кэш вида документа:
// * Ссылка - СправочникСсылка.ВидыДокументов - 
// * Наименование - Строка - 
// * ЯвляетсяВходящейКорреспонденцией - Булево - 
// * ЯвляетсяИсходящейКорреспонденцией - Булево - 
// * ВестиУчетПоАдресатам - Булево - 
// * ВестиУчетПоКонтрагентам - Булево - 
// * ВестиУчетПоОрганизациям - Булево - 
// * УчитыватьНедействующиеДокументы - Булево - 
// * ЯвляетсяДоговором - Булево - 
// * ВестиУчетТоваровИУслуг - Булево - 
// * УчитыватьСрокДействия - Булево - 
// * НеобходимаПечатьШтрихкода - Булево - 
// * ВестиУчетПоСтатьямДДС - Булево - 
// * ВестиУчетСторон - Булево - 
// * ВариантПодписания - ПеречислениеСсылка.ВариантыПодписания, Неопределено - 
// * ЯвляетсяОбращениемОтГраждан - Булево - 
// * ВестиУчетПоТематикам - Булево - 
// * РолиФайлов - Массив Из Структура:
//  ** Роль - СправочникСсылка.РолиФайлов -
//  ** Обязательная - Булево -
//  ** ТолькоОдинФайл - Булево -
// * ОбязательноУказаниеПроекта - Булево - 
// * УчитыватьОтветственногоЗаХранение - Булево - 
// * УчитыватьМестоХранения - Булево - 
// * ЯвляетсяЗаявкойНаОплату - Булево - 
// * ВестиУчетПоНоменклатуреДел - Булево - 
// * ОбязательноеУказаниеОтветственного - Булево - 
// * ИспользоватьВременныеНомера - Булево - 
// * ОбработкаЗадана - Булево - 
// * НастройкиДействийЗаданы - Булево - 
// * ИспользоватьВажность - Булево - 
// * УчитыватьВходящийНомерИДатуПолучателя - Булево - 
// * СрокИсполнения - Число, Неопределено - 
// * СрокИсполненияУказанВРабочихДнях - Булево - 
// * ИспользоватьСрокИсполнения - Булево - 
// * ЯвляетсяКомплектомДокументов - Булево - 
// * ОбязателенФайлОригинала - Булево - 
// * Родитель - СправочникСсылка.ВидыДокументов, Неопределено - 
// * ФормаДокумента - ПеречислениеСсылка.ВариантыФормДокументов, Неопределено - 
// * УчитыватьСуммуДокумента - Булево - 
// * КонтролироватьНаличиеОригинала - Булево - 
Функция НовыйКэшВидаДокумента() Экспорт
	
	ВидДокументаКэш = Новый Структура;
	ВидДокументаКэш.Вставить("Ссылка", Справочники.ВидыДокументов.ПустаяСсылка());
	ВидДокументаКэш.Вставить("Наименование", "");
	ВидДокументаКэш.Вставить("ЯвляетсяВходящейКорреспонденцией", Ложь);
	ВидДокументаКэш.Вставить("ЯвляетсяИсходящейКорреспонденцией", Ложь);
	ВидДокументаКэш.Вставить("ВестиУчетПоАдресатам", Ложь);
	ВидДокументаКэш.Вставить("ВестиУчетПоКонтрагентам", Ложь);
	ВидДокументаКэш.Вставить("ВестиУчетПоОрганизациям", Ложь);
	ВидДокументаКэш.Вставить("УчитыватьНедействующиеДокументы", Ложь);
	ВидДокументаКэш.Вставить("ЯвляетсяДоговором", Ложь);
	ВидДокументаКэш.Вставить("ВестиУчетТоваровИУслуг", Ложь);
	ВидДокументаКэш.Вставить("УчитыватьСрокДействия", Ложь);
	ВидДокументаКэш.Вставить("НеобходимаПечатьШтрихкода", Ложь);
	ВидДокументаКэш.Вставить("ВестиУчетПоСтатьямДДС", Ложь);
	ВидДокументаКэш.Вставить("ВестиУчетСторон", Ложь);
	ВидДокументаКэш.Вставить("ВариантПодписания", Неопределено);
	ВидДокументаКэш.Вставить("ЯвляетсяОбращениемОтГраждан", Ложь);
	ВидДокументаКэш.Вставить("ВестиУчетПоТематикам", Ложь);
	ВидДокументаКэш.Вставить("РолиФайлов", Новый Массив);
	ВидДокументаКэш.Вставить("ОбязательноУказаниеПроекта", Ложь);
	ВидДокументаКэш.Вставить("УчитыватьОтветственногоЗаХранение", Ложь);
	ВидДокументаКэш.Вставить("УчитыватьМестоХранения", Ложь);
	ВидДокументаКэш.Вставить("ЯвляетсяЗаявкойНаОплату", Ложь);
	ВидДокументаКэш.Вставить("ВестиУчетПоНоменклатуреДел", Ложь);
	ВидДокументаКэш.Вставить("ОбязательноеУказаниеОтветственного", Ложь);
	ВидДокументаКэш.Вставить("ИспользоватьВременныеНомера", Ложь);
	ВидДокументаКэш.Вставить("ОбработкаЗадана", Ложь);
	ВидДокументаКэш.Вставить("НастройкиДействийЗаданы", Ложь);
	ВидДокументаКэш.Вставить("ИспользоватьВажность", Ложь);
	ВидДокументаКэш.Вставить("УчитыватьВходящийНомерИДатуПолучателя", Ложь);
	ВидДокументаКэш.Вставить("СрокИсполнения", Неопределено);
	ВидДокументаКэш.Вставить("СрокИсполненияУказанВРабочихДнях", Ложь);
	ВидДокументаКэш.Вставить("ИспользоватьСрокИсполнения", Ложь);
	ВидДокументаКэш.Вставить("ИспользоватьЭДО", Ложь);
	ВидДокументаКэш.Вставить("ЯвляетсяКомплектомДокументов", Ложь);
	ВидДокументаКэш.Вставить("ОбязателенФайлОригинала", Ложь);
	ВидДокументаКэш.Вставить("Родитель", Неопределено);
	ВидДокументаКэш.Вставить("ФормаДокумента", Неопределено);
	ВидДокументаКэш.Вставить("УчитыватьСуммуДокумента", Ложь);
	ВидДокументаКэш.Вставить("КонтролироватьНаличиеОригинала", Ложь);
	Возврат ВидДокументаКэш;
	
КонецФункции

// Заполняет в форме структуру, содержащую кеш вида документа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой необходим кеш.
//  ВидДокумента - СправочникСсылка.ВидыДокументов - ссылка на вид документа.
//
Процедура ЗаполнитьКэшВидаДокументаНаФорме(Форма, ВидДокумента) Экспорт 
	
	Если Форма.ВидДокументаКэш = Неопределено 
		Или Форма.ВидДокументаКэш.Ссылка <> ВидДокумента 
		Или Не ЗначениеЗаполнено(ВидДокумента) Тогда
		
		КэшДокументыПредприятияФормаЭлемента =
			КэшиНаВремяВызоваПовтИсп.КэшДокументыПредприятияФормаЭлемента();
		Если (КэшДокументыПредприятияФормаЭлемента.Инициализирован
			И КэшДокументыПредприятияФормаЭлемента.КэшДокумента.ВидДокумента = ВидДокумента)
			Или Не ЗначениеЗаполнено(ВидДокумента) Тогда
			Форма.ВидДокументаКэш = КэшДокументыПредприятияФормаЭлемента.КэшВидаДокумента;
		Иначе
			Форма.ВидДокументаКэш = КэшВидаДокумента(ВидДокумента);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Возвращает список тематик по вводу по строке 
//
// Параметры:
//  Текст - Строка- введенный пользователем текст.
//  ВидДокумента - СправочникСсылка.ВидыДокументов - ссылка на вид документа.
//
// Возвращаемое значение:
//  ДанныеВыбора - СписокЗначений - список подходящих тематик.
//
Функция СформироватьДанныеВыбораТематики(Знач Текст, Знач ВидДокумента) Экспорт
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТематикиДокументов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ТематикиДокументов КАК ТематикиДокументов
		|ГДЕ
		|	НЕ ТематикиДокументов.ПометкаУдаления
		|	И ТематикиДокументов.Наименование ПОДОБНО &Текст
		|	И ТематикиДокументов.ВидДокумента В (&СписокРодителейВидаДокумента)");
	
	// Добавим вид документа и его родителей.
	СписокРодителейВидаДокумента = СписокРодителейВидаДокумента(ВидДокумента);
	
	Запрос.УстановитьПараметр("СписокРодителейВидаДокумента", СписокРодителейВидаДокумента);
	Запрос.УстановитьПараметр("Текст", "%" + Текст + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Возвращает список видов документов по вводу по строке 
//
// Параметры:
//  Текст - Строка- введенный пользователем текст.
//  ДополнительныеПараметры - Структура -
//
// Возвращаемое значение:
//  СписокЗначений Из СправочникСсылка.ВидыДокументов - Подходящие виды документов.
//
Функция ДанныеВыбораВидаДокумента(Текст, ДополнительныеПараметры = Неопределено) Экспорт 
	
	ПараметрыВыбора = Новый Структура("СтрокаПоиска", Текст);
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ЕстьОтбор = Ложь;
		Отбор = Новый Структура;
		Если ДополнительныеПараметры.Свойство("ТипКорреспонденции") Тогда
			Отбор.Вставить(ДополнительныеПараметры.ТипКорреспонденции, Истина);
			ЕстьОтбор = Истина;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ДоступныеВидыДокументов") Тогда
			Отбор.Вставить("Ссылка", ДополнительныеПараметры.ДоступныеВидыДокументов);
			ЕстьОтбор = Истина;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("ОтборОбращенийГраждан") Тогда
			Отбор.Вставить("ЯвляетсяОбращениемОтГраждан", Истина);
			ЕстьОтбор = Истина;
		КонецЕсли;
		
		Если ЕстьОтбор Тогда
			ПараметрыВыбора.Вставить("Отбор", Отбор);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Справочники.ВидыДокументов.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
КонецФункции

// Возвращает список, который содержит вид документа и всех его родителей.
//
// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокументов - ссылка на вид документа.
//
// Возвращаемое значение:
//  ДанныеВыбора - СписокЗначений - список, который содержит вид документа и всех его родителей.
//
Функция СписокРодителейВидаДокумента(ВидДокумента) Экспорт 
	
	СписокРодителейВидаДокумента = Новый СписокЗначений;
	Родитель = ВидДокумента;
	Пока ЗначениеЗаполнено(Родитель) Цикл 
		СписокРодителейВидаДокумента.Добавить(Родитель);
		Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Родитель, "Родитель");
	КонецЦикла;
	
	Возврат СписокРодителейВидаДокумента;
	
КонецФункции

// Читает ресурс из регистры ДанныеДокументовПредприятия
Процедура ПрочитатьДанныеДокумента(Документ, Реквизит, Значение) Экспорт 
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДокументовПредприятия.СостояниеОбработки КАК СостояниеОбработки
		|ИЗ
		|	РегистрСведений.ДанныеДокументовПредприятия КАК ДанныеДокументовПредприятия
		|ГДЕ
		|	ДанныеДокументовПредприятия.Документ = &Документ";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СостояниеОбработки", Реквизит);
		
	Запрос.УстановитьПараметр("Документ", Документ);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Значение = Неопределено;
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Значение = Выборка[Реквизит];
	
КонецПроцедуры

// Заполняет список (таблицу значений) файлов в карточке документа.
//
// Параметры:
//   Форма                    - ФормаКлиентскогоПриложения - форма документа, в котором заполняется список файлов
//   ЗаполнитьПризнакОригинал - Булево - Истина, если требуется заполнить признак оригинала
//   ЭтоСписок                - Булево - Истина, если обращение к функции выполняется из списка документов
//
Процедура ЗаполнитьСписокФайловДокумента_ВхИсх(Форма, ЗаполнитьПризнакОригинал = Ложь, ЭтоСписок = Ложь,
	ОтметитьЗахваченныеФайлы = Ложь) Экспорт 
	
	Если ЭтоСписок Тогда 
		Документ = Форма.ТекущийДокумент;
	Иначе 
		Документ = Форма.Объект;
	КонецЕсли;
	
	Если Документ.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаФайлы = ПолучитьДанныеФайловДляСписка(Неопределено, Документ.Ссылка, 
		Форма.ПоказыватьУдаленныеФайлы, ОтметитьЗахваченныеФайлы);
	
	Если Не ЗаполнитьПризнакОригинал Тогда
		СоответствиеФайлы = Новый Соответствие;
		Для Каждого Строка Из Форма.Файлы Цикл
			СоответствиеФайлы.Вставить(Строка.Ссылка, Строка.Оригинал);
		КонецЦикла;
		
		Для Каждого Строка Из ТаблицаФайлы Цикл
			ЯвляетсяОригиналом = СоответствиеФайлы.Получить(Строка.Ссылка);
			Если ЯвляетсяОригиналом <> Неопределено Тогда
				Строка.Оригинал = ЯвляетсяОригиналом;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Форма.ЗначениеВРеквизитФормы(ТаблицаФайлы, "Файлы");
	Форма.КоличествоФайлов = ТаблицаФайлы.Количество();
	
	Если ЭтоСписок Тогда 
		Если Форма.КоличествоФайлов > 0 Тогда 
			Форма.ЗаголовокСодержаниеФайлы = 
				СтрШаблон(НСтр("ru = 'Содержание, Файлы (%1)'"),
				Форма.КоличествоФайлов);
		Иначе
			Форма.ЗаголовокСодержаниеФайлы = 
				НСтр("ru = 'Содержание, Файлы'");
		КонецЕсли;
	Иначе 
		Форма.Элементы.НаименованиеФайла.Заголовок = 
			ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(Форма.КоличествоФайлов);
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет в регистрах сведения об оригиналах в таблице файлов из карточки документа
//
// Параметры
//    Файлы - ДанныеФормыКоллекция - таблица файлов
//	  Документ - СправочникСсылка.ДокументыПредприятия - ссылка на документ
//
Процедура СохранитьСведенияОбОригиналахФайловИзКарточки_ВхИсх(Файлы, Документ) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов") Тогда 
		Возврат;
	КонецЕсли;	
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого Строка Из Файлы Цикл
			
			РегистрыСведений.СведенияОФайлахДокументооборот.УстановитьПризнак(
				Строка.Ссылка, "ЯвляетсяОригиналом", Строка.Оригинал);
				
		КонецЦикла;
		
		СодержитОригинал = Ложь;
		Для Каждого Строка Из Файлы Цикл
			Если Строка.Оригинал И Не Строка.ПометкаУдаления Тогда 
				СодержитОригинал = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ЗаписатьДанныеДокумента(Документ, "СодержитОригинал", СодержитОригинал);
			
		Если СодержитОригинал И Не ДелопроизводствоКлиентСервер.ЭтоИсходящийДокумент(Документ) Тогда 
			РегистрыСведений.ДанныеДокументовПредприятия.ЗаписатьОтметкуОПолученииОригиналаДокумента(
				Документ, СодержитОригинал);
			КонецЕсли;
			
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры	

// Вернет таблицу значений - либо для вида документа, либо для его родителя.
// 
// Параметры
//  ВидДокумента - СправочникСсылка.ВидыДокументов
//  
//  Возвращаемое значение
//  ТаблицаЗначений
//
Функция РолиФайловДляВидаДокументов(ВидДокумента, ВидДокументаКэш  = Неопределено) Экспорт
	
	Если ТипЗнч(ВидДокумента) <> Тип("СправочникСсылка.ВидыДокументов") Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;	
	
	Если ВидДокументаКэш <> Неопределено Тогда
		Родитель = ВидДокументаКэш.Родитель;
	Иначе
		Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, "Родитель");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Родитель) Тогда
		
		РолиФайлов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Родитель, "РолиФайлов");
		РолиФайлов = РолиФайлов.Выгрузить();
		РолиФайлов.Сортировать("НомерСтроки");
		Если РолиФайлов.Количество() <> 0 Тогда
			Возврат РолиФайлов;
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если ВидДокументаКэш <> Неопределено Тогда
		РолиФайлов = ВидДокументаКэш.РолиФайлов;
	Иначе
		РолиФайлов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, "РолиФайлов");
	КонецЕсли;
	РолиФайлов = РолиФайлов.Выгрузить();
	РолиФайлов.Сортировать("НомерСтроки");
	Возврат РолиФайлов;
	
КонецФункции	

// Вернет массив ролей с флагом "Обязательная" для вид документа
Функция РолиДляСогласования(ВидДокумента) Экспорт
	
	МассивРолей = Новый Массив;
	
	РолиФайлов = РолиФайловДляВидаДокументов(ВидДокумента);
	Для Каждого Стр Из РолиФайлов Цикл
		Если Стр.Обязательная Тогда
			МассивРолей.Добавить(Стр.Роль);
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат МассивРолей;

КонецФункции	

// Получает файлы у владельца doc docx odt
Функция ПолучитьПриложенныеФайлыРедактора(ВладелецФайла) Экспорт
	
	СпособСогласованияВРежимеЗамечаний = Константы.СпособСогласованияВРежимеЗамечаний.Получить();
	
	МассивФайлов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ТекущаяВерсияРасширение КАК Расширение
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
	|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФайлах КАК СведенияОФайлах
	|		ПО (СведенияОФайлах.Файл = Файлы.Ссылка)
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла
	|	И Файлы.ПометкаУдаления = ЛОЖЬ
	|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПропуститьФайл = Ложь;
		Если СпособСогласованияВРежимеЗамечаний = ПредопределенноеЗначение("Перечисление.СпособыСогласованияВРежимеЗамечаний.OpenOfficeOrgWriter")
		И НРег(Выборка.Расширение) = "docx" Тогда
			ПропуститьФайл = Истина;
		КонецЕсли; 	
		
		Если СогласованиеВРежимеЗамечанийСерверПовтИсп.ЭтоФайлДляСогласованияВРежимеЗамечаний(Выборка.Расширение) 
			И Не ПропуститьФайл Тогда
				
			МассивФайлов.Добавить(Выборка.Ссылка);
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат МассивФайлов;
	
КонецФункции

// Вернет массив файлов
Функция ПолучитьФайлыДокументаДляСогласования(Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ВидДокумента");
	РолиДляСогласования = Делопроизводство.РолиДляСогласования(ВидДокумента);
	
	Запрос = Новый Запрос;
	
	Если РолиДляСогласования.Количество() = 0 Тогда // берем все файлы
		
		Возврат РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Документ, Ложь);	
		
	Иначе // берем только файлы с ролью РолиДляОтправки
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Файлы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Файлы КАК Файлы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РолиФайловДокументов КАК РолиФайловДокументов
			|		ПО Файлы.Ссылка = РолиФайловДокументов.Файл
			|			И (РолиФайловДокументов.Роль В (&РолиДляСогласования))
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
			|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
			|ГДЕ
			|	Файлы.ВладелецФайла = &ВладелецФайла
			|	И Файлы.ПометкаУдаления = ЛОЖЬ
			|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL";
		
		Запрос.УстановитьПараметр("РолиДляСогласования", РолиДляСогласования);
		
		Запрос.УстановитьПараметр("ВладелецФайла", Документ);
		Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Возврат Результат;
		
	КонецЕсли;	
	
КонецФункции	

// Вернет массив файлов (только doc docx) - только для получения html
Функция ПолучитьФайлыДокументаДляСогласованияВРежимеЗамечаний(Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СпособСогласованияВРежимеЗамечаний = Константы.СпособСогласованияВРежимеЗамечаний.Получить();
	
	
	ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ВидДокумента");
	РолиДляСогласования = Делопроизводство.РолиДляСогласования(ВидДокумента);
	
	Запрос = Новый Запрос;
	
	Если РолиДляСогласования.Количество() = 0 Тогда // берем все файлы
		
		Возврат ПолучитьПриложенныеФайлыРедактора(Документ);	
		
	Иначе // берем только файлы с ролью РолиДляОтправки
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Файлы.Ссылка КАК Ссылка,
			|	Файлы.ТекущаяВерсияРасширение КАК Расширение
			|ИЗ
			|	Справочник.Файлы КАК Файлы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РолиФайловДокументов КАК РолиФайловДокументов
			|		ПО Файлы.Ссылка = РолиФайловДокументов.Файл
			|			И (РолиФайловДокументов.Роль В (&РолиДляСогласования))
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
			|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
			|ГДЕ
			|	Файлы.ВладелецФайла = &ВладелецФайла
			|	И Файлы.ПометкаУдаления = ЛОЖЬ
			|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL";
		
		Запрос.УстановитьПараметр("РолиДляСогласования", РолиДляСогласования);
		
		Запрос.УстановитьПараметр("ВладелецФайла", Документ);
		Таблица = Запрос.Выполнить().Выгрузить();
		МассивФайлов = Новый Массив;
		Для Каждого Стр Из Таблица Цикл
			
			ПропуститьФайл = Ложь;
			Если СпособСогласованияВРежимеЗамечаний = ПредопределенноеЗначение("Перечисление.СпособыСогласованияВРежимеЗамечаний.OpenOfficeOrgWriter")
			И НРег(Стр.Расширение) = "docx" Тогда
				ПропуститьФайл = Истина;
			КонецЕсли; 	
			
			Если СогласованиеВРежимеЗамечанийСерверПовтИсп.ЭтоФайлДляСогласованияВРежимеЗамечаний(Стр.Расширение) 
				И Не ПропуститьФайл Тогда
					
				МассивФайлов.Добавить(Стр.Ссылка);
				
			КонецЕсли;	
			
		КонецЦикла;	
		
		Возврат МассивФайлов;
		
	КонецЕсли;	
	
КонецФункции	

// Вернет массив файлов
Функция ПолучитьФайлыДокументаДляПодписания(Документ) Экспорт
	
	Возврат РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Документ, Ложь);
	
КонецФункции	

// Пометит документ как прочтенный
Функция ПометитьКакПрочтенное(Форма, Ссылка) Экспорт
	
	РезультатОбработки = Новый Структура;
	
	НавСсылка = ПолучитьНавигационнуюСсылку(Ссылка);
	РезультатОбработки.Вставить("НавигационнаяСсылка", НавСсылка);
	
	МассивПисем = Новый Массив;
	МассивПисем.Добавить(Ссылка);
	
	ЗначениеПрочтен = РаботаСПрочтениями.ПолучитьСвойствоПрочтен(Ссылка);
	РаботаСПрочтениями.УстановитьСвойствоПрочтен(Ссылка, Не ЗначениеПрочтен);
	
	ЗначениеПрочтен = Не ЗначениеПрочтен;
	
	ЗаголовокВозврат = "";
	Если ЗначениеПрочтен Тогда  
		ЗаголовокВозврат = НСтр("ru = 'Документ помечен как прочтенный'");
	Иначе
		ЗаголовокВозврат = НСтр("ru = 'Документ помечен как непрочтенный'"); 
	КонецЕсли;		
	
	Описание = Строка(Ссылка);
	
	РезультатОбработки.Вставить("Описание", Описание);
	РезультатОбработки.Вставить("Заголовок", ЗаголовокВозврат);
	
	Если Не ЗначениеПрочтен Тогда		
		РезультатОбработки.Вставить("Картинка", БиблиотекаКартинок.ПрочтенноеПисьмо);
		Форма.Элементы.ПометитьКакПрочтенное.Заголовок = НСтр("ru = 'Пометить как прочтенный'");
	Иначе
		РезультатОбработки.Вставить("Картинка", БиблиотекаКартинок.ПрочтенноеПисьмо);
		Форма.Элементы.ПометитьКакПрочтенное.Заголовок = НСтр("ru = 'Пометить как непрочтенный'");
	КонецЕсли;

	Возврат РезультатОбработки;
	
КонецФункции

Функция ОбработатьРеквизит(Форма, ИмяРеквизита) Экспорт
	
	ДокументЗаписан = Ложь;
	Если Форма.ИмяФормы = "ОбщаяФорма.СозданиеДокументаПоШаблону" Тогда
		ЭтоФормаСоздания = Истина;
	Иначе 
		ЭтоФормаСоздания = Ложь;
		ДокументЗаписан = Не Форма.Объект.Ссылка.Пустая();
	КонецЕсли;
	
	Поле = Форма.Элементы[ИмяРеквизита];
	
	ДоступноИзменениеАвторстваДокументов = Истина;
	Поле.КнопкаВыбора = ДоступноИзменениеАвторстваДокументов;
	
	Если Не ДокументЗаписан Тогда
		
		СотрудникиПользователя = СотрудникиПовтИсп.ТаблицаСотрудникиПользователя(
			Форма.ТекущийПользователь);
		КоличествоСотрудников = СотрудникиПользователя.Количество();
		
		Если СотрудникиПользователя.Количество() > 0  Тогда
			ПодставитьСотрудника = Ложь;
			Если КоличествоСотрудников > 0 Тогда
				// Нужно выбрать сотрудника.
				Если ДоступноИзменениеАвторстваДокументов И Не ЭтоФормаСоздания  Тогда
					ПодставитьСотрудника = Истина;
				иначе
					Поле.СписокВыбора.Очистить();
					ДЛТекущегоПользователяНайден = Истина;
					
					Для Каждого Стр Из СотрудникиПользователя Цикл
						
						Поле.СписокВыбора.Добавить(Стр.Сотрудник,
							НСтр("ru = 'Я, как '") + Строка(Стр.Должность) + ", " + Стр.Подразделение);
								
					КонецЦикла;
					
					Если Поле.СписокВыбора.Количество() > 0 И Не ДокументЗаписан Тогда
						ПодставитьСотрудника = Истина;
						Поле.АвтоОтметкаНезаполненного = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли; 
			
			Если ПодставитьСотрудника Тогда
				Если КоличествоСотрудников = 1 Тогда 
					Если ЭтоФормаСоздания Тогда 
						Форма[ИмяРеквизита] = СотрудникиПользователя[0].Сотрудник;
						Поле.Видимость = Ложь;
						Форма.НесколькоСотрудников = Ложь;
					Иначе 
						Форма.Объект[ИмяРеквизита] = СотрудникиПользователя[0].Сотрудник;
					КонецЕсли;
				Иначе 
					Если ЭтоФормаСоздания Тогда 
						Форма[ИмяРеквизита] = Справочники.Сотрудники.ПустаяСсылка();
						Форма.НесколькоСотрудников = Истина;
					Иначе 
						Форма.Объект[ИмяРеквизита] = Справочники.Сотрудники.ПустаяСсылка();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли; 
			
		ИначеЕсли ЭтоФормаСоздания Тогда 
			Поле.Видимость = Ложь;
			Форма.НесколькоСотрудников = Ложь;
		КонецЕсли;
		
	КонецЕсли; 
КонецФункции

Процедура УстановитьНеобходимостьОтметкиОВозвратеДокумента(Форма) Экспорт

	Объект = Форма.Объект;
	ПредметПереписки = Форма.ПредметПереписки;
	
	Если Не Объект.Контрагенты.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("Контрагент", Объект.Контрагенты[0]);
	НайденныеСтроки = Форма.КонтрагентыДляОтраженияВЖурналеПередачи.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() Тогда
		СтрокаКонтрагент = НайденныеСтроки[0];
	Иначе
		СтрокаКонтрагент = Форма.КонтрагентыДляОтраженияВЖурналеПередачи.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКонтрагент, Объект.Контрагенты[0]);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаКонтрагент.НеобходимостьОтметкиВЖурналеПередачиПодтверждена) Тогда
		СтрокаКонтрагент.НеобходимостьОтметкиВЖурналеПередачиПодтверждена = 
			Перечисления.ДаНетСпрашивать.Спрашивать;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаРегистрации)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ДатаРегистрации") = Объект.ДатаРегистрации Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	РегистрСведений.ЖурналПередачиДокументов КАК ЖурналПередачиДокументов
	|ГДЕ
	|	ЖурналПередачиДокументов.Документ = &Документ
	|	И ТИПЗНАЧЕНИЯ(ЖурналПередачиДокументов.Пользователь) = ТИП(Справочник.КонтактныеЛица)
	|	И ЖурналПередачиДокументов.Пользователь.Владелец = &Контрагент
	|	И (НЕ ЖурналПередачиДокументов.Возвращен)";
	
	Запрос.УстановитьПараметр("Контрагент", СтрокаКонтрагент.Контрагент);
	Запрос.УстановитьПараметр("Документ", ПредметПереписки);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда 
		Возврат;
	ИначеЕсли Результат.Количество() = 1 Тогда 
		СтрокаКонтрагент.НеобходимоОтметитьВЖурналеПередачи = Истина;
	Иначе
		
		Если Не ЗначениеЗаполнено(СтрокаКонтрагент.КонтактноеЛицо) Тогда 
			СтрокаКонтрагент.НеобходимоОтметитьВЖурналеПередачи = Ложь;
		КонецЕсли;	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.ЖурналПередачиДокументов КАК ЖурналПередачиДокументов
		|ГДЕ
		|	ЖурналПередачиДокументов.Документ = &Документ
		|	И ЖурналПередачиДокументов.Пользователь = &КонтактноеЛицо
		|	И (НЕ ЖурналПередачиДокументов.Возвращен)";
	
		Запрос.УстановитьПараметр("КонтактноеЛицо", СтрокаКонтрагент.КонтактноеЛицо);
		Запрос.УстановитьПараметр("Документ", ПредметПереписки);
		
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() = 0 Тогда 
			СтрокаКонтрагент.НеобходимоОтметитьВЖурналеПередачи = Ложь;
		ИначеЕсли Результат.Количество() = 1 Тогда 
			СтрокаКонтрагент.НеобходимоОтметитьВЖурналеПередачи = Истина;
		Иначе	
			СтрокаКонтрагент.НеобходимоОтметитьВЖурналеПередачи = Ложь;
		КонецЕсли;	
		
	КонецЕсли;	

КонецПроцедуры

Процедура УстановитьНеобходимостьОтметкиОПередачеДокументаКонтрагенту(Форма) Экспорт

	Объект = Форма.Объект;
	ПредметПереписки = Форма.ПредметПереписки;

	Если Не Объект.Контрагенты.Количество() Тогда
		Возврат;
	КонецЕсли;

	СтрокаКонтрагента = Объект.Контрагенты[0];
	КонтрагентДляПередачи = СтрокаКонтрагента.Контрагент;
	КонтактноеЛицо = СтрокаКонтрагента.КонтактноеЛицо;

	Корреспонденция = РаботаСКорреспонденцией.КорреспонденцияДокумента(Объект.Ссылка);

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЖурналПередачиДокументов.Пользователь КАК КонтактноеЛицо
	|ИЗ
	|	РегистрСведений.ЖурналПередачиДокументов КАК ЖурналПередачиДокументов
	|ГДЕ
	|	ЖурналПередачиДокументов.Документ = &Документ
	|	И ЖурналПередачиДокументов.Пользователь = &КонтактноеЛицо
	|	И НЕ ЖурналПередачиДокументов.Возвращен";
	Запрос.УстановитьПараметр("КонтактноеЛицо", КонтактноеЛицо);
	Запрос.УстановитьПараметр("Документ", ПредметПереписки);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();

	Отбор = Новый Структура("Контрагент", КонтрагентДляПередачи);
	НайденныеСтроки = Форма.КонтрагентыДляОтраженияВЖурналеПередачи.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() Тогда
		СтрокаДляОтражения = НайденныеСтроки[0];
	Иначе
		СтрокаДляОтражения = Форма.КонтрагентыДляОтраженияВЖурналеПередачи.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДляОтражения, СтрокаКонтрагента);
	КонецЕсли;

	СтрокаДляОтражения.НеобходимоОтметитьВЖурналеПередачи = Истина;
	Если Не ЗначениеЗаполнено(СтрокаДляОтражения.НеобходимостьОтметкиВЖурналеПередачиПодтверждена) Тогда
		СтрокаДляОтражения.НеобходимостьОтметкиВЖурналеПередачиПодтверждена = Перечисления.ДаНетСпрашивать.Спрашивать;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		СтрокаДляОтражения.НеобходимоОтметитьВЖурналеПередачи = Ложь;
	КонецЕсли;

	Если Не СтрокаКонтрагента.Отправлен Тогда
		СтрокаДляОтражения.НеобходимоОтметитьВЖурналеПередачи = Ложь;
	КонецЕсли;

	Если ЗначениеЗаполнено(Корреспонденция) Тогда
		НайденнаяСтрока = Корреспонденция.Корреспонденты.Найти(КонтактноеЛицо, "Адресат");
		Если НайденнаяСтрока <> Неопределено И НайденнаяСтрока.Отправлен Тогда
			СтрокаДляОтражения.НеобходимоОтметитьВЖурналеПередачи = Ложь;
		КонецЕсли;
	КонецЕсли;

	НайденнаяСтрока = РезультатЗапроса.Найти(КонтактноеЛицо);
	Если НайденнаяСтрока <> Неопределено Тогда
		СтрокаДляОтражения.НеобходимоОтметитьВЖурналеПередачи = Ложь;
	КонецЕсли;

КонецПроцедуры

Функция ЕстьДоступныеШаблоныДокументов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	Справочник.ШаблоныДокументов КАК ШаблоныДокументов
	|ГДЕ
	|	НЕ ШаблоныДокументов.ПометкаУдаления";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции 

// Устанавливает состояние Исполнен предметам процесса,
//  если нет другизх активных Исполнений или Ознакомлений
//
// Параметры:
//  Процесс - БизнесПроцессСсылка.Исполнение,
//            БизнесПроцессСсылка.Ознакомление - Ссылка на исполняемый процесс.
//  ПредметыДляУстановки - Массив - массив предметов процесса.
//  ДатаИсполнения - Дата - дата изменения состояния.
//
Процедура УстановитьСостояниеИсполненПредметамПроцесса(Процесс, ПредметыДляУстановки, ДатаИсполнения) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	// Устанавливаем состояние, только если по предмету нет других активных Исполнений или Ознакомлений
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА 
	|ИЗ
	|	БизнесПроцесс.Исполнение.Предметы КАК ИсполнениеПредметы
	|ГДЕ
	|	ИсполнениеПредметы.Ссылка <> &Процесс
	|	И ИсполнениеПредметы.Предмет = &Предмет
	|	И ИсполнениеПредметы.РольПредмета = ЗНАЧЕНИЕ(Перечисление.РолиПредметов.Основной)
	|	И ИсполнениеПредметы.Ссылка.Стартован
	|	И НЕ ИсполнениеПредметы.Ссылка.Завершен
	|	И НЕ ИсполнениеПредметы.Ссылка.ПометкаУдаления
	|	И НЕ ИсполнениеПредметы.Ссылка.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	БизнесПроцесс.Ознакомление.Предметы КАК ОзнакомлениеПредметы
	|ГДЕ
	|	ОзнакомлениеПредметы.Ссылка <> &Процесс
	|	И ОзнакомлениеПредметы.Предмет = &Предмет
	|	И ОзнакомлениеПредметы.РольПредмета = ЗНАЧЕНИЕ(Перечисление.РолиПредметов.Основной)
	|	И ОзнакомлениеПредметы.Ссылка.Стартован
	|	И НЕ ОзнакомлениеПредметы.Ссылка.Завершен
	|	И НЕ ОзнакомлениеПредметы.Ссылка.ПометкаУдаления
	|	И НЕ ОзнакомлениеПредметы.Ссылка.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)";
	
	Запрос.УстановитьПараметр("Процесс", Процесс);
	
	Для Каждого Предмет Из ПредметыДляУстановки Цикл
		Запрос.УстановитьПараметр("Предмет", Предмет);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 0 Тогда
			ЗаписатьСостояниеДокумента(
				Предмет, ДатаИсполнения, Перечисления.СостоянияДокументов.Исполнен, Процесс);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Формирует представление элементов в списке выбора поля ВидИТематикаТекст
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма документа, в котором заполняется список выбора.
//
Процедура СформироватьПредставлениеСпискаВыбораВидаИТематики(Форма) Экспорт

	СписокВыбора = Форма.Элементы.ВидИТематикаТекст.СписокВыбора;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияСпискаВыбора.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ЗначенияСпискаВыбора
		|ИЗ
		|	&ЗначенияСпискаВыбора КАК ЗначенияСпискаВыбора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияСпискаВыбора.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗначенияСпискаВыбора.Ссылка) = ТИП(Справочник.ТематикиДокументов)
		|			ТОГДА Тематики.ВидДокумента
		|		ИНАЧЕ ЗначенияСпискаВыбора.Ссылка
		|	КОНЕЦ КАК ВидДокумента,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗначенияСпискаВыбора.Ссылка) = ТИП(Справочник.ТематикиДокументов)
		|			ТОГДА ЗначенияСпискаВыбора.Ссылка
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ТематикиДокументов.ПустаяСсылка)
		|	КОНЕЦ КАК Тематика
		|ИЗ
		|	ЗначенияСпискаВыбора КАК ЗначенияСпискаВыбора
		|		ЛЕВОЕ соединение Справочник.ТематикиДокументов КАК Тематики
		|		ПО Тематики.Ссылка = ЗначенияСпискаВыбора.Ссылка";
	
	Запрос.Параметры.Вставить(
		"ЗначенияСпискаВыбора", ТаблицаВидовИТематикИзСпискаЗначений(СписокВыбора));
	Результат = Запрос.Выполнить().Выгрузить();
	СписокВыбора.Очистить();
	
	Для Каждого Значение Из Результат Цикл
		
		Если ЗначениеЗаполнено(Значение.Тематика) Тогда
			Представление = СтрШаблон("%1 - %2", Значение.ВидДокумента, Значение.Тематика);
		Иначе
			Представление = Строка(Значение.ВидДокумента);
		КонецЕсли;
		
		СписокВыбора.Добавить(Значение.Ссылка, Представление);
	
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив организаций в сторонах переданного документа.
// 
// Параметры:
//  ДокументСсылка - СправочникСсылка.ДокументыПредприятия
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Организации - Организации в сторонах документа
//
Функция ОрганизацииВСторонахДокумента(ДокументСсылка) Экспорт
	
	Результат = Новый Массив;
	
	Стороны = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Стороны").Выгрузить();
	Для Каждого СтрокаСтороны Из Стороны Цикл
		Если РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(СтрокаСтороны.Сторона) Тогда
			Результат.Добавить(СтрокаСтороны.Сторона);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Вернет что вид документа можно отменить.
// 
// Параметры:
//  ВидДокумента - СправочникССылка.ВидыДокументов
// 
// Возвращаемое значение:
//  Булево - Этот вид документа можно отменить
Функция ЭтотВидДокументаМожноОтменить(ВидДокумента) Экспорт
	
	Если Не ЕстьЛиНастройкиСвязейОтмены() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВидыОтменяющихДокументов = ПолучитьВидыОтменяющихДокументов(ВидДокумента);
	Возврат (ВидыОтменяющихДокументов.Количество() <> 0);
	
КонецФункции	

// Вернет, есть ли настройки связей отмены.
// 
// Возвращаемое значение:
//  Булево - Есть ли настройки связей отмены
Функция ЕстьЛиНастройкиСвязейОтмены() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкаСвязей.СсылкаНа КАК СсылкаНа
		|ИЗ
		|	РегистрСведений.НастройкаСвязей КАК НастройкаСвязей
		|ГДЕ
		|	НастройкаСвязей.ТипСвязи = &ТипСвязи";	
		
	Запрос.УстановитьПараметр("ТипСвязи", Справочники.ТипыСвязей.НеДействуетВСоответствии);	
	
	МассивВидов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СсылкаНа");
	Для Каждого Вид Из МассивВидов Цикл
		Если ЗначениеЗаполнено(Вид) И ТипЗнч(Вид) = Тип("СправочникСсылка.ВидыДокументов") Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции	

// Вернет массив видов - новых документов, которые могут отменить текущий.
// 
// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокументов
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.ВидыДокументов
Функция ПолучитьВидыОтменяющихДокументов(ВидДокумента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкаСвязей.СсылкаНа КАК СсылкаНа
		|ИЗ
		|	РегистрСведений.НастройкаСвязей КАК НастройкаСвязей
		|ГДЕ
		|	НастройкаСвязей.СсылкаИз = &СсылкаИз
		|	И НастройкаСвязей.ТипСвязи = &ТипСвязи";	
		
	Запрос.УстановитьПараметр("СсылкаИз", ВидДокумента);	
	Запрос.УстановитьПараметр("ТипСвязи", Справочники.ТипыСвязей.НеДействуетВСоответствии);	
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СсылкаНа");
	
КонецФункции	

// Этот вид документа может отменять.
// 
// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокументов
// 
// Возвращаемое значение:
//  Булево - Этот вид документа может отменять
Функция ЭтотВидДокументаМожетОтменять(ВидДокумента) Экспорт
	
	Если Не ЕстьЛиНастройкиСвязейОтмены() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВидыОтменяющихДокументов = ПолучитьВидыОтменяемыхДокументов(ВидДокумента);
	Возврат (ВидыОтменяющихДокументов.Количество() <> 0);
	
КонецФункции	
	
// Вернет массив видов - старых документов, которые может отменить текущий
// 
// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокументов - Вид документа
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.ВидыДокументов
Функция ПолучитьВидыОтменяемыхДокументов(ВидДокумента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкаСвязей.СсылкаНа КАК СсылкаНа
		|ИЗ
		|	РегистрСведений.НастройкаСвязей КАК НастройкаСвязей
		|ГДЕ
		|	НастройкаСвязей.СсылкаИз = &СсылкаИз
		|	И НастройкаСвязей.ТипСвязи = &ТипСвязи";	
		
	Запрос.УстановитьПараметр("СсылкаИз", ВидДокумента);	
	Запрос.УстановитьПараметр("ТипСвязи", Справочники.ТипыСвязей.ДелаетНеДействующим);	
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СсылкаНа");
	
КонецФункции	

// Удалить данные об отменяемых документах. - из всех 2 регистров
// 
// Параметры:
//  Документ - СправочникССылка.ДокументыПредприятия
Процедура УдалитьДанныеОбОтменяемыхДокументах(Документ) Экспорт
	
	МассивДокументов = РегистрыСведений.ОтменяемыеДокументы.ПрочитатьДанные(Документ);
	Для Каждого ОтменяемыйДок Из МассивДокументов Цикл
		РегистрыСведений.ОтменяемыеДокументы.УдалитьДанные(Документ, ОтменяемыйДок.Документ);
	КонецЦикла;	
	
	МассивДокументов = РегистрыСведений.ОтложеннаяУстановкаСвязей.ПрочитатьДанные(Документ, 
		Справочники.ТипыСвязей.ДелаетНеДействующим);
	Для Каждого ОтменяемыйДок Из МассивДокументов Цикл
		РегистрыСведений.ОтложеннаяУстановкаСвязей.УдалитьДанные(
			Документ, ОтменяемыйДок.Документ, 
			Справочники.ТипыСвязей.ДелаетНеДействующим);
	КонецЦикла;	
	
КонецПроцедуры	

// Функция-"обертка", получает дату актуальности документа предприятия, это или его дата регистрации или 
// если ее нет, то дата создания.
// 
// Параметры:
//  ДокументИлиСтруктура - СправочникОбъект.ДокументыПредприятия, Структура, ДанныеФормыСтруктура, РегистрСведенийЗапись,
//  						ВыборкаИзРезультатаЗапроса и др. - Любой объект, у которого есть свойства
//  						ДатаРегистрации и ДатаСоздания
// 
// Возвращаемое значение:
//  Дата - Дата актуальности документа
Функция ДатаУчетаДокумента(ДокументИлиСтруктура) Экспорт
	
	Возврат ?(ЗначениеЗаполнено(ДокументИлиСтруктура.ДатаРегистрации), 
			ДокументИлиСтруктура.ДатаРегистрации, ДокументИлиСтруктура.ДатаСоздания);
	
КонецФункции

// Устанавливает константу "используется передача дел хранения" в значение Истина.
Процедура УстановитьИспользуетсяПередачаДелХранения() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не Константы.ИспользуетсяПередачаДелХранения.Получить() Тогда
		Константы.ИспользуетсяПередачаДелХранения.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

//  Устанавливает константу "используется передача дел хранения" в значение Ложь, 
//  если нет ни одного докмуента передачи в архив или на уничтожение.
// 
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПередачаДелВАрхив, ДокументСсылка.УничтожениеДел - ссылка на текущий документ
//
Процедура СнятьИспользуетсяПередачаДелХранения(ДокументСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПередачаДелВАрхив.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПередачаДелВАрхив КАК ПередачаДелВАрхив
		|ГДЕ
		|	ПередачаДелВАрхив.Проведен
		|	И ПередачаДелВАрхив.Ссылка <> &ДокументСсылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	УничтожениеДел.Ссылка
		|ИЗ
		|	Документ.УничтожениеДел КАК УничтожениеДел
		|ГДЕ
		|	УничтожениеДел.Проведен
		|	И УничтожениеДел.Ссылка <> &ДокументСсылка";
	Запрос.Параметры.Вставить("ДокументСсылка", ДокументСсылка);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Константы.ИспользуетсяПередачаДелХранения.Установить(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура КонтрольНаличияОригиналов() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.КонтрольНаличияОригиналов);
	
	РаботаСУведомлениями.КонтрольНаличияОригиналов();
	
КонецПроцедуры

Процедура ОтразитьВЖурналеПередачи(Форма) Экспорт

	Объект = Форма.Объект;
	
	ЭтоВходящий = Форма.ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией;
	ЭтоИсходящий = Форма.ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией;
	Документ = Форма.ПредметПереписки;
	КонтактныеЛица = Форма.КонтрагентыДляОтраженияВЖурналеПередачи.Выгрузить().ВыгрузитьКолонку("КонтактноеЛицо");
	Отражено = 0;
	СтрокаЖурналаПередачи = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЖурналПередачиДокументов.Пользователь КАК КонтактноеЛицо,
	|	ЖурналПередачиДокументов.НомерЭкземпляра КАК НомерЭкземпляра,
	|	ЖурналПередачиДокументов.ТипЭкземпляра КАК ТипЭкземпляра,
	|	ЖурналПередачиДокументов.Период КАК Период
	|ИЗ
	|	РегистрСведений.ЖурналПередачиДокументов КАК ЖурналПередачиДокументов
	|ГДЕ
	|	ЖурналПередачиДокументов.Документ = &Документ
	|	И НЕ ЖурналПередачиДокументов.Возвращен
	|	И (&БезОтбораПоКонтактномуЛицу
	|			ИЛИ ЖурналПередачиДокументов.Пользователь В (&КонтактныеЛица))";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("КонтактныеЛица", КонтактныеЛица);
	Запрос.УстановитьПараметр("БезОтбораПоКонтактномуЛицу", ЭтоИсходящий);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из Форма.КонтрагентыДляОтраженияВЖурналеПередачи Цикл
		
		Если Не Строка.НеобходимоОтметитьВЖурналеПередачи Или 
			Строка.НеобходимостьОтметкиВЖурналеПередачиПодтверждена <> Перечисления.ДаНетСпрашивать.Да Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстСообщения = "";
		
		Отбор = Новый Структура("КонтактноеЛицо", Строка.КонтактноеЛицо);
		СтрокиЖурналаПередачи = Результат.НайтиСтроки(Отбор);
		
		Если СтрокиЖурналаПередачи.Количество() = 0 И ЭтоВходящий Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документ ""%1"" не отмечен как переданный контактному лицу %2. 
					|Отразите возврат документа вручную'"),
				Документ, Строка.КонтактноеЛицо);
		ИначеЕсли СтрокиЖурналаПередачи.Количество() > 1 И ЭтоВходящий Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для документа ""%1"" есть несколько записей о передаче контактному лицу %2. 
					|Отразите возврат документа вручную'"),
				Документ, Строка.КонтактноеЛицо);
		ИначеЕсли СтрокиЖурналаПередачи.Количество() И ЭтоИсходящий Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Оригинал документа ""%1"" уже отмечен как переданный. 
					|Отразите передачу документа вручную'"),
				Документ);
		КонецЕсли;
			
		Если ТекстСообщения <> "" Тогда 
			КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Журнал передачи.Ошибка фиксации'", КодОсновногоЯзыка),
				УровеньЖурналаРегистрации.Ошибка,,,
				СтрШаблон(НСтр("ru = 'Ошибка фиксации в журнале передачи документа %1 получателю %2: %3'",
						КодОсновногоЯзыка),
					Строка(Объект.Ссылка),Строка(Строка.КонтактноеЛицо),ТекстСообщения));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		Менеджер = РегистрыСведений.ЖурналПередачиДокументов.СоздатьМенеджерЗаписи();
		Менеджер.Документ = Документ;
		Менеджер.Пользователь = Строка.КонтактноеЛицо;
		
		Если ЭтоВходящий Тогда
			
			СтрокаЖурналаПередачи = СтрокиЖурналаПередачи[0];
			
			Менеджер.Период = СтрокаЖурналаПередачи.Период;
			Менеджер.ДатаВозврата = Форма.Объект.Датарегистрации;
			Менеджер.ТипЭкземпляра = СтрокаЖурналаПередачи.ТипЭкземпляра;
			Менеджер.НомерЭкземпляра = СтрокаЖурналаПередачи.НомерЭкземпляра;
			Менеджер.Возвращен = Истина;
			
		Иначе
			
			Менеджер.Период = Строка.ДатаОтправки;
			Если Отражено = 0 Тогда
				Менеджер.ТипЭкземпляра = Перечисления.ТипыЭкземпляров.Оригинал;
			Иначе
				Менеджер.ТипЭкземпляра = Перечисления.ТипыЭкземпляров.Копия;
			КонецЕсли;
			Менеджер.НомерЭкземпляра = Отражено + 1;
			
		КонецЕсли;
		
		Менеджер.Записать(Истина);
		Отражено = Отражено + 1;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// В фоновом режиме перезаписывает в фоне РС ДанныеДокументовПредприятия - поле АдресатыДляСписков в случае переименования адресата.
// Экспортная, т.к. вызывается как фоновое задание.
// 
// Параметры:
//  Адресат - СправочникСсылка.Сотрудники - для входящей/внутренней корреспонденции
// 			- СправочникСсылка.КонтактныеЛица - для исходящей корреспонденции
Процедура ЗаписатьВФонеДанныеДокументовПредприятия_ПереименованиеАдресата(Адресат) Экспорт
	
	ОбщегоНазначенияБТС.Пауза(60); // Должна гарантированно закончиться транзакция записи "Адресата".
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТчОтбор.Ссылка.Основание КАК Документ,
		|	ТчВся.НомерСтроки,
		|	ВЫБОР
		|		КОГДА ТчВся.Адресат ССЫЛКА Справочник.КонтактныеЛица ТОГДА ТчВся.Адресат
		|		КОГДА ТчВся.Адресат ССЫЛКА Справочник.Сотрудники ТОГДА ТчВся.Адресат
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК Адресат
		|ИЗ
		|	Документ.Корреспонденция.Корреспонденты КАК ТчОтбор
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.Корреспонденция.Корреспонденты КАК ТчВся
		|		ПО
		|			ТчВся.Ссылка = ТчОтбор.Ссылка
		|ГДЕ
		|	ТчОтбор.Адресат = &Адресат
		|
		|УПОРЯДОЧИТЬ ПО
		|	Документ,
		|	ТчВся.НомерСтроки
		|
		|ИТОГИ ПО
		|	Документ");
	Запрос.УстановитьПараметр("Адресат", Адресат);
	ВыборкаДокументы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДокументы.Следующий() Цикл
		ВыборкаДетальные = ВыборкаДокументы.Выбрать();
		МассивАдресатов = Новый Массив();
		Пока ВыборкаДетальные.Следующий() Цикл
			МассивАдресатов.Добавить(ВыборкаДетальные.Адресат);
		КонецЦикла;
		АдресатыДляСписков = ОбщегоНазначенияДокументооборот.СтрСоединитьОграниченноеКолво(МассивАдресатов, 250);
		ЗаписатьДанныеДокумента(ВыборкаДокументы.Документ, "АдресатыДляСписков", АдресатыДляСписков);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьВыборкуНастроекДоступности(НастройкиСостояний, ВсеСостояния)
	
	ВидыДействий = Новый Соответствие;
	
	ЗапросНастроекДоступности = Новый Запрос;
	ТекстЗапросаШаблон =
		"ВЫБРАТЬ
		|	НастройкиДоступности.Ссылка КАК Настройка,
		|	НастройкиДоступности.НомерСтроки КАК НомерСтроки,
		|	НастройкиДоступности.ВидДействия КАК ВидДействия,
		|	НастройкиДоступности.Доступность КАК Доступность,
		|	НастройкиДоступности.ИмяПоляКоманды КАК ИмяПоляКоманды,
		|	НастройкиДоступности.Состояние КАК Состояние
		|ИЗ
		|	Справочник.НастройкиДоступностиПоСостоянию.НастройкиДоступности КАК НастройкиДоступности
		|ГДЕ
		|%1
		|ИТОГИ ПО
		|	Настройка,
		|	Состояние";
	
	ШаблонУсловия = 
		"	(НастройкиДоступности.Ссылка = &%1
		|	И НастройкиДоступности.Состояние = &%2
		|	И (&%3
		|			ИЛИ НастройкиДоступности.ВидДействия = &%4))";
	СоединительИли = 
		"	ИЛИ";
	ИмяПараметраНастройкаШаблон = "Настройка_%1";
	ИмяПараметраСостояниеШаблон = "Состояние_%1";
	ИмяПараметраНеИспользоватьУсловиеПоВидуДействияШаблон = "НеИспользоватьУсловиеПоВидуДействия_%1";
	ИмяПараметраВидДействияШаблон = "ВидДействия_%1";
	
	СчетчикУсловий = 0;
	ЧастиУсловия = Новый Массив;
	
	Для Каждого НастройкаСостояния Из НастройкиСостояний Цикл
		
		Для Каждого СтрокаСостояния Из ВсеСостояния Цикл
			
			СчетчикУсловий = СчетчикУсловий + 1;
			СчетчикУсловийСтрокой = Формат(СчетчикУсловий, "ЧГ=;");
			
			ИмяПараметраНастройка = СтрШаблон(ИмяПараметраНастройкаШаблон, СчетчикУсловийСтрокой);
			ИмяПараметраСостояние = СтрШаблон(ИмяПараметраСостояниеШаблон, СчетчикУсловийСтрокой);
			ИмяПараметраНеИспользоватьУсловиеПоВидуДействия = 
				СтрШаблон(ИмяПараметраНеИспользоватьУсловиеПоВидуДействияШаблон, СчетчикУсловийСтрокой);
			ИмяПараметраВидДействия = СтрШаблон(ИмяПараметраВидДействияШаблон, СчетчикУсловийСтрокой);
			
			ЗапросНастроекДоступности.УстановитьПараметр(ИмяПараметраНастройка, НастройкаСостояния);
			ЗапросНастроекДоступности.УстановитьПараметр(ИмяПараметраСостояние, СтрокаСостояния.Состояние);
			
			Если ЗначениеЗаполнено(СтрокаСостояния.Действие) Тогда
				ВидДействия = ВидыДействий[СтрокаСостояния.Действие];
				Если ВидДействия = Неопределено Тогда
					ВидДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаСостояния.Действие, "ВидДействия");
					ВидыДействий[СтрокаСостояния.Действие] = ВидДействия;
				КонецЕсли;
				
				ЗапросНастроекДоступности.УстановитьПараметр(ИмяПараметраНеИспользоватьУсловиеПоВидуДействия, Ложь);
				ЗапросНастроекДоступности.УстановитьПараметр(ИмяПараметраВидДействия, ВидДействия);
			Иначе
				ЗапросНастроекДоступности.УстановитьПараметр(ИмяПараметраНеИспользоватьУсловиеПоВидуДействия, Истина);
				ЗапросНастроекДоступности.УстановитьПараметр(ИмяПараметраВидДействия, Неопределено);
			КонецЕсли;
			
			УсловиеТекущее = СтрШаблон(ШаблонУсловия,
				ИмяПараметраНастройка,
				ИмяПараметраСостояние,
				ИмяПараметраНеИспользоватьУсловиеПоВидуДействия,
				ИмяПараметраВидДействия);
			ЧастиУсловия.Добавить(УсловиеТекущее);
			ЧастиУсловия.Добавить(СоединительИли);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЧастиУсловия.ВГраница() = -1 Тогда
		// Если у документа нет состояний, то нечего отбирать.
		ЧастиУсловия.Добавить("ЛОЖЬ");
	ИначеЕсли ЧастиУсловия[ЧастиУсловия.ВГраница()] = СоединительИли Тогда
		ЧастиУсловия.Удалить(ЧастиУсловия.ВГраница());
	КонецЕсли;
	
	ЗапросНастроекДоступности.Текст = СтрШаблон(ТекстЗапросаШаблон,
		СтрСоединить(ЧастиУсловия, Символы.ПС));
	
	Возврат ЗапросНастроекДоступности.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

Функция ТаблицаВидовИТематикИзСпискаЗначений(Список)

	ТаблицаВидовИТематик = НоваяТаблицаВидовИТематик();
	
	Для Каждого Элемент Из Список Цикл
	
		Строка = ТаблицаВидовИТематик.Добавить();
		Строка.Ссылка = Элемент.Значение;
	
	КонецЦикла;
	
	Возврат ТаблицаВидовИТематик;

КонецФункции

Функция НоваяТаблицаВидовИТематик()

	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("СправочникСсылка.ВидыДокументов"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ТематикиДокументов"));
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	
	ТаблицаВидовИТематик = Новый ТаблицаЗначений();
	ТаблицаВидовИТематик.Колонки.Добавить("Ссылка", ОписаниеТипов);
	
	Возврат ТаблицаВидовИТематик;

КонецФункции

// Возвращает полный путь к изображению регистрационного штампа по сведениям о регистрации.
//
// Параметры:
//   СведенияОРегистрации - Структура - Со свойствами:
//    * РегистрационныйНомер - Строка - регистрационный номер
//    * ДатаРегистрации - Дата - дата регистрации.
//    * ЭтоВходящийДокумент - Булево
//
// Возвращаемое значение:
//   Строка - полный путь к файлу с изображением регистрационного штампа.
//
Функция СоздатьРегистрационныйШтамп(СведенияОРегистрации) Экспорт
	
	ДлинаРегНомера = СтрДлина(СведенияОРегистрации.РегистрационныйНомер);
	
	Если ДлинаРегНомера <= 10 Тогда
		Макет = ПолучитьОбщийМакет("ШаблонРегистрационногоШтампа_мал");
	ИначеЕсли ДлинаРегНомера > 10 И ДлинаРегНомера <=25 Тогда
		Макет = ПолучитьОбщийМакет("ШаблонРегистрационногоШтампа_сред");	
	Иначе // выше 25 (до 40)
		Макет = ПолучитьОбщийМакет("ШаблонРегистрационногоШтампа_бол");	
	КонецЕсли;	
	
	Если СведенияОРегистрации.ЭтоВходящийДокумент Тогда
		
		Текст = СтрШаблон(НСтр("ru = '№ %1 от %2'"),
			СведенияОРегистрации.РегистрационныйНомер,
			Формат(СведенияОРегистрации.ДатаРегистрации, "ДФ=dd.MM.yyyy"));
		Строки = Новый Массив;
		Строки.Добавить(Новый Структура("Слева, Сверху, Текст", 10, 52, Текст));
		
	Иначе
		
		// исх или внутр
		
		Текст = СтрШаблон(НСтр("ru = '%1 № %2'"),
		Формат(СведенияОРегистрации.ДатаРегистрации, "ДФ=dd.MM.yyyy"),
			СведенияОРегистрации.РегистрационныйНомер);
		Строки = Новый Массив;
		Строки.Добавить(Новый Структура("Слева, Сверху, Текст", 10, 52, Текст));
		
	КонецЕсли;
		
	ПутьКРегистрационномуШтампу = РаботаСКартинками.НаложитьСтроки(Макет, "PNG", Строки, 36);
	
	Возврат ПутьКРегистрационномуШтампу;
	
КонецФункции

Функция УдалитьПустыеТипыСвязи(Дерево)
	
	ЕстьСвязанные = Ложь;
	МассивУдаляемыхГрупп = Новый Массив;
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		Если СтрокаДерева.ЭтоРодитель Тогда 
			Если Не УдалитьПустыеТипыСвязи(СтрокаДерева) Тогда 
				МассивУдаляемыхГрупп.Добавить(СтрокаДерева);
			Иначе 
				ЕстьСвязанные = Истина;
			КонецЕсли;
		Иначе 
			ЕстьСвязанные = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Группа Из МассивУдаляемыхГрупп Цикл 
		Для Каждого СтрокаДерева Из Дерево.Строки Цикл
			Если Группа = СтрокаДерева Тогда 
				Дерево.Строки.Удалить(СтрокаДерева);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ЕстьСвязанные;
	
КонецФункции

Процедура ЗаписатьСодержитОригиналВРегистр(Файлы, Документ, ОригиналПолученУстановленоВручную)
	
	Если ОригиналПолученУстановленоВручную <> Ложь Тогда
		Возврат;
	КонецЕсли;

	СодержитОригинал = Ложь;
	Для Каждого Строка Из Файлы.ПолучитьЭлементы() Цикл
		
		Если Не Строка.ЭтоРольФайла И Не Строка.ЭтоДокументЭДО Тогда
			Если Строка.Оригинал И Не Строка.ПометкаУдаления Тогда
				СодержитОригинал = Истина;
				Прервать;
			КонецЕсли;
		Иначе

			Для Каждого Подстрока Из Строка.ПолучитьЭлементы() Цикл
				Если Подстрока.Оригинал И Не Подстрока.ПометкаУдаления Тогда
					СодержитОригинал = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	ЗаписатьДанныеДокумента(Документ, "СодержитОригинал", СодержитОригинал);

	Если Не ДелопроизводствоКлиентСервер.ЭтоИсходящийДокумент(Документ) Тогда
		РегистрыСведений.ДанныеДокументовПредприятия.ЗаписатьОтметкуОПолученииОригиналаДокумента(
				Документ, СодержитОригинал);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти
