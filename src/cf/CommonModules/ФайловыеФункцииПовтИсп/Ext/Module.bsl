////////////////////////////////////////////////////////////////////////////////
// МОДУЛЬ СОДЕРЖИТ ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ФАЙЛАМИ
// 
//

#Область СлужебныйПрограммныйИнтерфейс

// Получает СписокРасширенийФайловOpenDocument
Функция ПолучитьСписокРасширенийФайловOpenDocument() Экспорт
	Возврат ФайловыеФункции.ПолучитьСписокРасширенийФайловOpenDocument();
КонецФункции

// Получает СписокРасширенийТекстовыхФайлов
Функция ПолучитьСписокРасширенийТекстовыхФайлов() Экспорт
	Возврат ФайловыеФункции.ПолучитьСписокРасширенийТекстовыхФайлов();
КонецФункции

// Вернет размер файлов на томе - в байтах
Функция ПодсчитатьРазмерФайловНаТоме(СсылкаТома) Экспорт
	
	Возврат ФайловыеФункции.ПодсчитатьРазмерФайловНаТоме(СсылкаТома);
	
КонецФункции

// Вернет персональную настройку
// 
// Возвращаемое значение:
//  Булево
Функция МасштабироватьPDFИКартинки() Экспорт
	
	МасштабироватьPDFИКартинкиЧтение =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиРаботыСДокументами",
			"МасштабироватьPDFИКартинки");
	Если МасштабироватьPDFИКартинкиЧтение = Неопределено Тогда
		МасштабироватьPDFИКартинкиЧтение = Истина;
	КонецЕсли;
				
	Возврат МасштабироватьPDFИКартинкиЧтение;			
	
КонецФункции

#Область КэшированиеКонстант

// Качество преобразования PDFДля предпросмотра. Кэширование константы.
// 
// Возвращаемое значение:
//  Число
Функция КачествоПреобразованияPDFДляПредпросмотра() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	DPI = Константы.КачествоПреобразованияPDFДляПредпросмотра.Получить();
	Возврат ?(DPI = 0, 150, DPI);
	
КонецФункции

// Получить общие настройки штампа ЭП. Кэширование констант.
// 
// Возвращаемое значение:
//  Структура - Получить настройки штампа ЭП:
// * РасположениеШтампаЭП - ПеречислениеСсылка.МестаВставкиКартинки -
// * СтраницаВставкиШтампаЭП - ПеречислениеСсылка.СтраницаВставкиКартинки -
// * ИтоговыйФорматФайлаСоШтампомЭП - ПеречислениеСсылка.ИтоговыйФорматФайлаСоШтампомЭП -
Функция ПолучитьОбщиеНастройкиШтампаЭП() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Настройки = Новый Структура();
	Настройки.Вставить("РасположениеШтампаЭП", Константы.РасположениеШтампаЭПВPdf.Получить());
	Настройки.Вставить("СтраницаВставкиШтампаЭП", Константы.СтраницаВставкиШтампаЭП.Получить());
	Настройки.Вставить("ИтоговыйФорматФайлаСоШтампомЭП", Константы.ИтоговыйФорматФайлаСоШтампомЭП.Получить());
	
	Настройки.Вставить("Использовать1СШтамп", ВизуализацияПовтИсп.Использовать1СШтамп());
	
	Возврат Настройки;
	
КонецФункции

// Путь к программе конвертации PDF (ImageMagick). Кэширование константы
// 
// Возвращаемое значение:
//  Строка
Функция ПутьКПрограммеКонвертацииPDF() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПутьКПрограммеКонвертацииPDF = Константы.ПутьКПрограммеКонвертацииPDF.Получить();
	
	Если ПустаяСтрока(ПутьКПрограммеКонвертацииPDF) Тогда

		ПутьКПрограммеКонвертацииPDF = "magick.exe"; // ImageMagick
		
		ТипПлатформыСервера = ОбщегоНазначенияДокументооборотПовтИсп.ТипПлатформыСервера();
		
		Если (ТипПлатформыСервера = ТипПлатформы.Linux_x86 
			Или ТипПлатформыСервера = ТипПлатформы.Linux_x86_64) Тогда
		
			ПутьКПрограммеКонвертацииPDF = "";
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ПутьКПрограммеКонвертацииPDF) Тогда
			Константы.ПутьКПрограммеКонвертацииPDF.Установить(ПутьКПрограммеКонвертацииPDF);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПутьКПрограммеКонвертацииPDF;
	
КонецФункции

// Получает расположение штампа ЭП в pdf.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.МестаВставкиКартинки -
Функция РасположениеШтампаЭПВPdf() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.РасположениеШтампаЭПВPdf.Получить();
	
КонецФункции

// ИспользоватьImageMagickДляРаспознаванияPDF.
// 
// Возвращаемое значение:
//  Булево
Функция ИспользоватьImageMagickДляРаспознаванияPDF() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ИспользоватьImageMagickДляРаспознаванияPDF.Получить();
	
КонецФункции

// ИспользоватьGhostscript.
// 
// Возвращаемое значение:
//  Булево
Функция ИспользоватьGhostscript() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ИспользоватьGhostscript.Получить();
	
КонецФункции

// Возвращает СпособВставкиШтампаЭПВPDF.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СпособыВставкиШтампаЭПВPDF
Функция СпособВставкиШтампаЭПВPDF() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.СпособВставкиШтампаЭПВPDF.Получить();
	
КонецФункции      

// Возвращает ПредельныйРазмерДляПредпросмотра.
// 
// Возвращаемое значение:
//  Число
Функция ПредельныйРазмерДляПредпросмотра() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПредельныйРазмер = Константы.ПредельныйРазмерДляПредпросмотра.Получить();
	Если ПредельныйРазмер = 0 Тогда
		ПредельныйРазмер = 10000000;
	КонецЕсли;	
	
	Возврат ПредельныйРазмер;
	
КонецФункции      

// Возвращает ИспользоватьLibreOffice. Только на Linux сервере.
// 
// Возвращаемое значение:
//  Булево
Функция ИспользоватьLibreOffice() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ИспользоватьLibreOffice = Константы.ИспользоватьLibreOffice.Получить();
	
	Если Не ОбщегоНазначения.ЭтоLinuxСервер() Тогда
		ИспользоватьLibreOffice = Ложь;
	КонецЕсли;	
	
	Возврат ИспользоватьLibreOffice;
	
КонецФункции      

#КонецОбласти

#КонецОбласти
