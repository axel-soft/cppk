///// Юрлица ///////////////////////////////////////////////////////////////////
// Процедуры, связанные с юридическими лицами - и организациями и контрагентами
// вызовы из форм элементов справочников Контрагенты и Организации
//////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Таблицы истории КПП и Наименований читаются из регистров и помещаются в реквизиты формы
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения	 - форма элемента Контрагенты или Организации, переданная из модуля формы
//
Процедура ПрочитатьИсториюВФорме(Форма) Экспорт
	
	#Если НЕ ВнешнееСоединение Тогда
	
	Юрлицо = Форма.Объект.Ссылка;
	Если Не ЗначениеЗаполнено(Юрлицо) Тогда
		Возврат;
	КонецЕсли;
	
	// История наименований:
	Таблица = РегистрыСведений.ИсторияНаименованийЮрлиц.ПрочитатьИсториюЮрлица(Юрлицо);
	Форма.ЗначениеВРеквизитФормы(Таблица, "ИсторияНаименований");
	ЮрлицаКлиентСервер.ОбновитьЗаголовокДекорацииИсторииНаименований(Форма);
	
	// История КПП:
	Таблица = РегистрыСведений.ИсторияКППЮрлиц.ПрочитатьИсториюЮрлица(Юрлицо);
	Форма.ЗначениеВРеквизитФормы(Таблица, "ИсторияКПП");
	ЮрлицаКлиентСервер.ОбновитьЗаголовокДекорацииИсторииКПП(Форма);
	
	#КонецЕсли
	
КонецПроцедуры

// Записать таблицы истории в форме. Из реквизитов формы непосредственно в регистры сведений.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма элемента Контрагенты или Организации, переданная из модуля формы
//  Юрлицо - СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Ссылка только что записанного в форме юрлица.
//  																	  (Форма.Объект.Ссылка - не годится, т.к.
//  																	  при записи нового еще будет пустая).
//  Отказ - Булево - Не используется, зарезервировано.
Процедура ЗаписатьИсториюВФорме(Форма, Юрлицо, Отказ) Экспорт
	
	#Если НЕ ВнешнееСоединение Тогда
	
	Если Не ЗначениеЗаполнено(Юрлицо) Тогда
		Возврат;// перестраховка, Юрлицо здесь должно быть всегда.
	КонецЕсли;
	
	
	Если Форма.ИсторияНаименований_Модифицированность Тогда
		
		Набор = РегистрыСведений.ИсторияНаименованийЮрлиц.СоздатьНаборИсторииЮрлица(Юрлицо);
		Для Каждого СтрокаИсторииВФорме Из Форма.ИсторияНаименований Цикл
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, СтрокаИсторииВФорме);
			Запись.Юрлицо = Юрлицо;
		КонецЦикла;
		Набор.Записать();
		
		Форма.ИсторияНаименований_Модифицированность = Ложь;
		
	КонецЕсли;
	
	Если Форма.ИсторияКПП_Модифицированность Тогда
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Юрлицо, "ЮрФизЛицо") = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			Набор = РегистрыСведений.ИсторияКППЮрлиц.СоздатьНаборИсторииЮрлица(Юрлицо);
			Для Каждого СтрокаИсторииВФорме Из Форма.ИсторияКПП Цикл
				Запись = Набор.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, СтрокаИсторииВФорме);
				Запись.Юрлицо = Юрлицо;
			КонецЦикла;
			Набор.Записать();
		КонецЕсли;
		
		Форма.ИсторияКПП_Модифицированность = Ложь;
		
	КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры

// Заполняет реквизиты формы, таблицы истории КПП и Наименований из данных ЕГРЮЛ
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма элемента Контрагенты или Организации, переданная из модуля формы
//  РеквизитыКомпании - Структура - Реквизиты компании. см. РаботаСКонтрагентами.СведенияОЮридическомЛицеПоИНН
//                                  или см. РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН
Процедура ЗаполнитьИсториюВФормеИзЕГРЮЛ(Форма, РеквизитыКомпании) Экспорт
	
	#Если Не ВнешнееСоединение Тогда
	
	ИсторияРеквизитов = Неопределено;
	Если Не РеквизитыКомпании.Свойство("ИсторияРеквизитов", ИсторияРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	
	
	// История наименований:
	Форма.ИсторияНаименований_Модифицированность = Истина;
	ТаблицаИсторииВФорме = Форма.ИсторияНаименований;
	ТаблицаИсторииВФорме.Очистить();
	
	ИсторияНаименованийИзЕГРЮЛ = Неопределено;
	Если ИсторияРеквизитов.Свойство("Наименование", ИсторияНаименованийИзЕГРЮЛ) 
			И ТипЗнч(ИсторияНаименованийИзЕГРЮЛ) = Тип("ТаблицаЗначений") И ИсторияНаименованийИзЕГРЮЛ.Количество() > 1
			Тогда
		
		ЭтоКонтрагент = РаботаСПодписямиДокументовКлиентСервер.ЭтоКонтрагент(Форма.Объект.Ссылка);
		Для Каждого СтрокаЕГРЮЛ Из ИсторияНаименованийИзЕГРЮЛ Цикл
			СтрокаИсторииВФорме = ТаблицаИсторииВФорме.Добавить();
			СтрокаИсторииВФорме.Период				= СтрокаЕГРЮЛ.Дата;
			СтрокаИсторииВФорме.Наименование		= СтрокаЕГРЮЛ.НаименованиеСокращенное;
			СтрокаИсторииВФорме.НаименованиеПолное	= ?(
				ЭтоКонтрагент, СтрокаЕГРЮЛ.НаименованиеСокращенное, СтрокаЕГРЮЛ.НаименованиеПолное);
		КонецЦикла;
		ТаблицаИсторииВФорме.Сортировать("Период");
	КонецЕсли;
	ЮрлицаКлиентСервер.ОбновитьЗаголовокДекорацииИсторииНаименований(Форма);
	
	
	// История КПП:
	Форма.ИсторияКПП_Модифицированность = Истина;
	ТаблицаИсторииВФорме = Форма.ИсторияКПП;
	ТаблицаИсторииВФорме.Очистить();
	
	ИсторияКППИзЕГРЮЛ = Неопределено;
	Если ИсторияРеквизитов.Свойство("КПП", ИсторияКППИзЕГРЮЛ)
			И ТипЗнч(ИсторияКППИзЕГРЮЛ) = Тип("ТаблицаЗначений") И ИсторияКППИзЕГРЮЛ.Количество() > 1 Тогда
		
		Для Каждого СтрокаЕГРЮЛ Из ИсторияКППИзЕГРЮЛ Цикл
			СтрокаИсторииВФорме = ТаблицаИсторииВФорме.Добавить();
			СтрокаИсторииВФорме.Период			= СтрокаЕГРЮЛ.Дата;
			СтрокаИсторииВФорме.КПП				= СтрокаЕГРЮЛ.Значение;
		КонецЦикла;
		ТаблицаИсторииВФорме.Сортировать("Период");
	КонецЕсли;
	ЮрлицаКлиентСервер.ОбновитьЗаголовокДекорацииИсторииКПП(Форма);
	
	#КонецЕсли
	
КонецПроцедуры

// Сведения о юрлице на требуемую дату.
// 
// Параметры:
//  Юрлицо - ОпределяемыйТип.Юрлицо - Юрлицо
//  ДатаСведений - Дата - На эту дату будут получены периодические сведения. Если дата пустая или Неопределено,
//                        то актуальные сведения на текущую дату
// 
// Возвращаемое значение:
//  Структура - Сведения о юрлице. Если передано пустое Юрлицо, то все поля возвращаются пустые:
//	* Наименование - Строка - Наименование.
//	* НаименованиеПолное - Строка - Полное наименование.
//	* Представление - Строка - НаименованиеПолное, если его нет, то Наименование
//	* ПредставлениеПолное - Строка - Строка вида "Наименование (ИНН / КПП)"
//	* ИНН - Строка - ИНН.
//	* КПП - Строка - КПП.
//	* ЮрФизЛицо - ПеречислениеСсылка.ЮрФизЛицо -
Функция СведенияОЮрлицеНаДату(Юрлицо, ДатаСведений) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Сведения = Новый Структура();
	Сведения.Вставить("Наименование", "");
	Сведения.Вставить("НаименованиеПолное", "");
	Сведения.Вставить("Представление", "");
	Сведения.Вставить("ПредставлениеПолное", "");
	Сведения.Вставить("ИНН", "");
	Сведения.Вставить("КПП", "");
	Сведения.Вставить("ЮрФизЛицо", Перечисления.ЮрФизЛицо.ПустаяСсылка());
	
	Если Не ЗначениеЗаполнено(Юрлицо) Тогда
		Возврат Сведения;
	КонецЕсли;
	
	
	Если Не РаботаСПодписямиДокументовКлиентСервер.ЭтоКонтрагент(Юрлицо)
			И Не РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(Юрлицо) Тогда
		// Для всех остальных типов упрощенная схема:
		Сведения.Наименование			= СокрЛП("" + Юрлицо);
		Сведения.НаименованиеПолное		= Сведения.Наименование;
		Сведения.Представление			= Сведения.Наименование;
		Сведения.ПредставлениеПолное	= Сведения.Наименование;
		Возврат Сведения;
	КонецЕсли;
	
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ИсторияНаименованийСрез.Наименование, Юрлица.Наименование) КАК Наименование,
		|	ЕСТЬNULL(ИсторияНаименованийСрез.НаименованиеПолное, Юрлица.НаименованиеПолное) КАК НаименованиеПолное,
		|	Юрлица.ИНН КАК ИНН,
		|	ЕСТЬNULL(ИсторияКППСрез.КПП, Юрлица.КПП) КАК КПП,
		|	Юрлица.ЮрФизЛицо КАК ЮрФизЛицо
		|ИЗ
		|	&ТаблицаЮрлица КАК Юрлица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияНаименованийЮрлиц.СрезПоследних(&ДатаСведений, Юрлицо = &Юрлицо) КАК ИсторияНаименованийСрез
		|		ПО ИсторияНаименованийСрез.Юрлицо = Юрлица.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияКППЮрлиц.СрезПоследних(&ДатаСведений, Юрлицо = &Юрлицо) КАК ИсторияКППСрез
		|		ПО ИсторияКППСрез.Юрлицо = Юрлица.Ссылка
		|ГДЕ
		|	Юрлица.Ссылка = &Юрлицо");
	ПодготовитьЗапросДляСведенийОЮрлице(Запрос, Юрлицо, ДатаСведений);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Сведения, Выборка);
		
		Сведения.Представление = СокрЛП(?(ЗначениеЗаполнено(Выборка.НаименованиеПолное), Выборка.НаименованиеПолное, Выборка.Наименование));
		Сведения.ПредставлениеПолное = ПредставлениеЮрлицаПолное(Сведения);
	КонецЕсли;
	
	
	Возврат Сведения;
	
КонецФункции

// Полное представление юрлица в общем случае "Наименование (ИНН / КПП)".
// 
// Параметры:
//  Данные - Структура - Структура с полями:
//     Наименование
//     ИНН
//     КПП
// 
// Возвращаемое значение:
//  Строка - Представление юрлица.
Функция ПредставлениеЮрлицаПолное(Данные) Экспорт
	
	Представление = Данные.Наименование;
	
	Если ЗначениеЗаполнено(Данные.ИНН) И ЗначениеЗаполнено(Данные.КПП) Тогда
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(Представление);
		МассивСтрок.Добавить(" (");
		МассивСтрок.Добавить(Данные.ИНН);
		МассивСтрок.Добавить(" / ");
		МассивСтрок.Добавить(Данные.КПП);
		МассивСтрок.Добавить(")");
		Представление = СтрСоединить(МассивСтрок);
		
	ИначеЕсли ЗначениеЗаполнено(Данные.ИНН) Тогда
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(Представление);
		МассивСтрок.Добавить(" (");
		МассивСтрок.Добавить(Данные.ИНН);
		МассивСтрок.Добавить(")");
		Представление = СтрСоединить(МассивСтрок);
		
	ИначеЕсли ЗначениеЗаполнено(Данные.КПП) Тогда 
		Представление = СтрШаблон(НСтр("ru = '%1 (КПП:%2)'"),
			Представление, Данные.КПП);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Актуальное на дату название юрлица - контрагента или организации.
// Т.е. либо полное наименование, либо просто наименование, если нет полного.
// 
// Параметры:
//  Юрлицо - ОпределяемыйТип.Юрлицо - Контрагент или организация
//  ДатаСведений - Дата - Дата сведений. 
//      Если передана пустая дата или Неопределено, то возвращаются актуальные данные, из самого справочника 
//      Контрагенты/Организации
//  ТолькоНаименование - Булево - если Истина, то вернет наименование юр. лица
// 
// Возвращаемое значение:
//  Строка - Наименование или полное наименование юрлица.
Функция ПредставлениеЮрлицаНаДату(Юрлицо, ДатаСведений, ТолькоНаименование = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Юрлицо) Тогда
		Возврат "";
	КонецЕсли;
	
	// Для контрагентов всегда полное представление, с ИНН и КПП:
	Если РаботаСПодписямиДокументовКлиентСервер.ЭтоКонтрагент(Юрлицо) Тогда
		Возврат СведенияОЮрлицеНаДату(Юрлицо, ДатаСведений).ПредставлениеПолное;
	КонецЕсли;
	
	
	Если Не РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(Юрлицо) Тогда
		// Для всех остальных типов, нестандартная ситуация, но может возникнуть в составных типах,
		// например в ДокументыПредприятия, табличная часть Стороны.
		// Передано не юрлицо, вернем обычное представление объекта.
		Возврат СокрЛП("" + Юрлицо);
	КонецЕсли;
	
	
	// для Организаций:
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ИсторияСрез.Наименование, Юрлица.Наименование) КАК Наименование,
		|	ЕСТЬNULL(ИсторияСрез.НаименованиеПолное, Юрлица.НаименованиеПолное) КАК НаименованиеПолное
		|ИЗ
		|	Справочник.Организации КАК Юрлица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияНаименованийЮрлиц.СрезПоследних(&ДатаСведений, Юрлицо = &Юрлицо) КАК
		|			ИсторияСрез
		|		ПО ИсторияСрез.Юрлицо = Юрлица.Ссылка
		|ГДЕ
		|	Юрлица.Ссылка = &Юрлицо"
	);
	Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
	Запрос.УстановитьПараметр("Юрлицо", Юрлицо);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ТолькоНаименование Тогда
			Возврат Выборка.Наименование;
		Иначе
			Возврат СокрЛП(?(ЗначениеЗаполнено(Выборка.НаименованиеПолное), Выборка.НаименованиеПолное, Выборка.Наименование));
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Актуальное на дату наименование юрлица - контрагента или организации.
// 
// Параметры:
//  Юрлицо - ОпределяемыйТип.Юрлицо - Контрагент или организация
//  ДатаСведений - Дата - Дата сведений. 
//      Если передана пустая дата или Неопределено, то возвращаются актуальные данные, из самого справочника 
//      Контрагенты/Организации
// 
// Возвращаемое значение:
//  Строка - наименование юрлица.
Функция НаименованиеЮрлицаНаДату(Юрлицо, ДатаСведений) Экспорт
	
	Если Не ЗначениеЗаполнено(Юрлицо) Тогда
		Возврат "";
	КонецЕсли;
	
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ИсторияНаименованийСрез.Наименование, Юрлица.Наименование) КАК Наименование
		|ИЗ
		|	&ТаблицаЮрлица КАК Юрлица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияНаименованийЮрлиц.СрезПоследних(&ДатаСведений, Юрлицо = &Юрлицо) КАК ИсторияНаименованийСрез
		|		ПО ИсторияНаименованийСрез.Юрлицо = Юрлица.Ссылка
		|ГДЕ
		|	Юрлица.Ссылка = &Юрлицо"
	);
	ПодготовитьЗапросДляСведенийОЮрлице(Запрос, Юрлицо, ДатаСведений);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Наименование;
	КонецЕсли;
	
	Возврат "" + Юрлицо;
	
КонецФункции

// Актуальное на дату полное наименование юрлица - контрагента или организации.
// 
// Параметры:
//  Юрлицо - ОпределяемыйТип.Юрлицо - Контрагент или организация
//  ДатаСведений - Дата - Дата сведений. 
//      Если передана пустая дата или Неопределено, то возвращаются актуальные данные, из самого справочника 
//      Контрагенты/Организации
// 
// Возвращаемое значение:
//  Строка - полное наименование юрлица.
Функция НаименованиеПолноеЮрлицаНаДату(Юрлицо, ДатаСведений) Экспорт
	
	Если Не ЗначениеЗаполнено(Юрлицо) Тогда
		Возврат "";
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ИсторияНаименованийСрез.НаименованиеПолное, Юрлица.НаименованиеПолное) КАК НаименованиеПолное
		|ИЗ
		|	&ТаблицаЮрлица КАК Юрлица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияНаименованийЮрлиц.СрезПоследних(&ДатаСведений, Юрлицо = &Юрлицо) КАК ИсторияНаименованийСрез
		|		ПО ИсторияНаименованийСрез.Юрлицо = Юрлица.Ссылка
		|ГДЕ
		|	Юрлица.Ссылка = &Юрлицо"
	);
	ПодготовитьЗапросДляСведенийОЮрлице(Запрос, Юрлицо, ДатаСведений);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.НаименованиеПолное;
	КонецЕсли;
	
	Возврат "" + Юрлицо;
	
КонецФункции

// Актуальный на дату КПП юрлица - контрагента или организации.
// 
// Параметры:
//  Юрлицо - ОпределяемыйТип.Юрлицо - Контрагент или организация
//  ДатаСведений - Дата - Дата сведений. 
//      Если передана пустая дата или Неопределено, то возвращаются актуальные данные, из самого справочника 
//      Контрагенты/Организации
// 
// Возвращаемое значение:
//  Строка - КПП юрлица.
Функция КППЮрлицаНаДату(Юрлицо, ДатаСведений) Экспорт
	
	Если Не ЗначениеЗаполнено(Юрлицо) Тогда
		Возврат "";
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ИсторияКППСрез.КПП, Юрлица.КПП) КАК КПП
		|ИЗ
		|	&ТаблицаЮрлица КАК Юрлица
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияНаименованийЮрлиц.СрезПоследних(&ДатаСведений, Юрлицо = &Юрлицо) КАК ИсторияНаименованийСрез
		|		ПО ИсторияНаименованийСрез.Юрлицо = Юрлица.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияКППЮрлиц.СрезПоследних(&ДатаСведений, Юрлицо = &Юрлицо) КАК ИсторияКППСрез
		|		ПО ИсторияКППСрез.Юрлицо = Юрлица.Ссылка
		|ГДЕ
		|	Юрлица.Ссылка = &Юрлицо"
	);
	ПодготовитьЗапросДляСведенийОЮрлице(Запрос, Юрлицо, ДатаСведений);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КПП;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

#Область ИсторияВерсийБСП

// При подготовке данных объекта. Расширение подсистемы "История изменений" БСП 
// для восстановления истории КПП и Наименований.
// При сохранении новой версии объекта дополнительно сохраняется история КПП и наименований.
// 
// Параметры:
//  Объект - СправочникОбъект.Контрагенты,СправочникОбъект.Организации - Объект, который сейчас сохраняется.
//  ДополнительныеРеквизиты - ТаблицаЗначений - см. параметр ДополнительныеРеквизиты
//  											в см. ВерсионированиеОбъектовПереопределяемый.ПриПодготовкеДанныхОбъекта
//
Процедура ПриПодготовкеДанныхОбъекта(Объект, ДополнительныеРеквизиты) Экспорт 
	
	Юрлицо = Объект.Ссылка;
	ЭтоОрганизация = РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(Юрлицо);
	Если Не РаботаСПодписямиДокументовКлиентСервер.ЭтоКонтрагент(Юрлицо)
			И Не ЭтоОрганизация Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВерсиюИсторииЮрлица(Юрлицо, ДополнительныеРеквизиты, "ИсторияНаименованийЮрлиц");
	ДобавитьВерсиюИсторииЮрлица(Юрлицо, ДополнительныеРеквизиты, "ИсторияКППЮрлиц");
	
	Если ЭтоОрганизация Тогда
		// РС ОтветственныеЛицаОрганизаций:
		Таблица = РегистрыСведений.ОтветственныеЛицаОрганизаций.ТаблицаПоОрганизации(Юрлицо);
		
		СтрокаИстории = ДополнительныеРеквизиты.Добавить();
		СтрокаИстории.Идентификатор = "РегистрСведений_ОтветственныеЛицаОрганизаций";
		СтрокаИстории.Значение = Новый ХранилищеЗначения(Таблица);
		СтрокаИстории.Наименование = "ОтветственныеЛицаОрганизаций";
		
	КонецЕсли;
	
КонецПроцедуры

// При восстановлении версии объекта. Расширение подсистемы "История изменений" БСП 
// для восстановления истории КПП и Наименований
// При восстановлении версии объекта, восстанавливает также историю КПП и наименований.
// 
// Параметры:
//  Объект - СправочникОбъект.Контрагенты,СправочникОбъект.Организации - Объект, который сейчас восстанавливается.
//  ДополнительныеРеквизиты - ТаблицаЗначений - см. параметр ДополнительныеРеквизиты
//  											в см. ВерсионированиеОбъектовПереопределяемый.ПриВосстановленииВерсииОбъекта
//
Процедура ПриВосстановленииВерсииОбъекта(Объект, ДополнительныеРеквизиты) Экспорт
	
	Юрлицо = Объект.Ссылка;
	ЭтоОрганизация = РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(Юрлицо);
	Если Не РаботаСПодписямиДокументовКлиентСервер.ЭтоКонтрагент(Юрлицо)
			И Не ЭтоОрганизация Тогда
		Возврат;
	КонецЕсли;
	
	ВосстановитьВерсиюИсторииЮрлица(Юрлицо, ДополнительныеРеквизиты, "ИсторияНаименованийЮрлиц");
	ВосстановитьВерсиюИсторииЮрлица(Юрлицо, ДополнительныеРеквизиты, "ИсторияКППЮрлиц");
	
	Если ЭтоОрганизация Тогда
		// РС ОтветственныеЛицаОрганизаций:
		// Пытаемся найти сохраненную версию истории:
		ИскомаяСтрока = ДополнительныеРеквизиты.Найти("ОтветственныеЛицаОрганизаций", "Наименование");
		Если ИскомаяСтрока <> Неопределено Тогда
			Если ТипЗнч(ИскомаяСтрока.Значение) = Тип("ХранилищеЗначения") Тогда
				Таблица = ИскомаяСтрока.Значение.Получить();
				Набор = РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьНаборЗаписей();
				Набор.Отбор.Организация.Установить(Юрлицо);
				Набор.Загрузить(Таблица);
				Набор.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Установить подсказки про историю на форме.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения -
Процедура УстановитьПодсказкиПроИсторию(Форма) Экспорт
	
	#Если Не ВнешнееСоединение Тогда
	
	Форма.Элементы.ДекорацияИсторияНаименований.Подсказка = ПодсказкаПроИсторию();
	Форма.Элементы.ДекорацияИсторияКПП.Подсказка = ПодсказкаПроИсторию();
	
	#КонецЕсли
	
КонецПроцедуры

// Текст-константа - подсказка для ссылок "История" и в формах редактирования истории.
// 
// Возвращаемое значение:
//  Строка - текст подсказки
Функция ПодсказкаПроИсторию() Экспорт
	
	Возврат НСтр ("ru = '- Редактирование нижней строки Истории изменит данные в карточке юрлица. 
			|- Редактирование карточки юрлица изменит нижнюю строку Истории.'");
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПодготовитьЗапросДляСведенийОЮрлице(Запрос, Юрлицо, ДатаСведений)
	
	Если РаботаСПодписямиДокументовКлиентСервер.ЭтоКонтрагент(Юрлицо) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаЮрлица", "Справочник.Контрагенты");
	ИначеЕсли РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(Юрлицо) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаЮрлица", "Справочник.Организации");
	Иначе
		ВызватьИсключение НСтр("ru = 'Неожиданный тип параметра ""Юрлицо"" (ожидается ""Контрагенты"" или ""Организации"")'");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
	Запрос.УстановитьПараметр("Юрлицо", Юрлицо);
	
КонецПроцедуры

Процедура ДобавитьВерсиюИсторииЮрлица(Юрлицо, ДополнительныеРеквизиты, ИмяРегистра)
	
	СтрокаИстории = ДополнительныеРеквизиты.Добавить();
	СтрокаИстории.Идентификатор = "РегистрСведений_" + ИмяРегистра;
	СтрокаИстории.Наименование = ИмяРегистра; // Это наименование - критерий для обратного восстановления.
	
	Таблица = РегистрыСведений[ИмяРегистра].ПрочитатьИсториюЮрлица(Юрлицо);
	СтрокаИстории.Значение = Новый ХранилищеЗначения(Таблица);
	
КонецПроцедуры

Процедура ВосстановитьВерсиюИсторииЮрлица(Юрлицо, ДополнительныеРеквизиты, ИмяРегистра)
	
	// Пытаемся найти сохраненную версию истории:
	ИскомаяСтрока = ДополнительныеРеквизиты.Найти(ИмяРегистра, "Наименование");
	Если ИскомаяСтрока <> Неопределено Тогда
		Если ТипЗнч(ИскомаяСтрока.Значение) <> Тип("ХранилищеЗначения") Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаИстории = ИскомаяСтрока.Значение.Получить();
		Набор = РегистрыСведений[ИмяРегистра].СоздатьНаборИсторииЮрлица(Юрлицо);
		Набор.Отбор.Юрлицо.Установить(Юрлицо);
		Набор.Загрузить(ТаблицаИстории);
		Набор.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
