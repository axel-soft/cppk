#Область ПрограммныйИнтерфейс

// Проверяет, соответствует ли переданное расширение файла списку,
// указанному в настройке.
// 
// Параметры:
//  РасширениеФайла - Строка
//
// Возвращаемое значение:
//  Булево - Истина, если расширение входит в список допустимых.
//
Функция ЭтоРасширениеФайлаТаймлист(Знач РасширениеФайла) Экспорт
	
	МассивРасширений = ТаймлистВызовСервераПовтИсп.РасширенияФайловТаймлист();
	РасширениеФайла = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(РасширениеФайла);
	
	Возврат МассивРасширений.Найти(НРег(РасширениеФайла)) <> Неопределено;
	
КонецФункции

// Возвращает строку расширений аудио- и видеофайлов, загружаемых в сервис Таймлист, по умолчанию.
// 
// Возвращаемое значение:
//  Строка
//
Функция РасширенияФайловТаймлистПоУмолчанию() Экспорт
	
	Возврат "mp4, mov, avi, webm, ogg, mpeg, mp3, m4a";
	
КонецФункции

// Возвращает HTML расшифровки с командой получения автопротокола.
// 
// Параметры:
//  Файл - СправочникСсылка.Файлы
//  РасшифровкаHTML - Строка
//
// Возвращаемое значение:
//  Строка
//
Функция HTMLПредставлениеКомандаПолучитьАвтопротокол(Файл, Знач РасшифровкаHTML) Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(
		"<head>
		|<style type=""text/css"">
		|.block
		|{
		|	width: 45%;
		|	font-family: Arial, Helvetica, sans-serif;
		|	font-size: 90%;
		|	line-height: 1.25;
		|	text-align: left;
		|	position: static;
		|}
		|a:link {
		|	color: #006699; text-decoration: none;}
		|a:visited {
		|	color: #006699; text-decoration: none;}
		|a:hover {
		|	color: #006699; text-decoration: underline;}
		|</style>
		|</head>");
	Результат.Добавить("<div class=""block"">");
	Результат.Добавить(СтрШаблон(
		НСтр("ru = '<font color=""#006699""><a href = ""v8doc:files/GetAutoprotocol/%1"">Получить автопротокол</a></font>'"),
		ПолучитьНавигационнуюСсылку(Файл)));
	Результат.Добавить("</div>");
	
	РезультатHTML = СтрСоединить(Результат, Символы.ПС);
	
	Возврат СтрЗаменить(РасшифровкаHTML, "TimelistGetAutoprotocol", РезультатHTML);
	
КонецФункции

// Возвращает HTML расшифровки с текстом ожидания получения автопротокола.
// 
// Параметры:
//  РасшифровкаHTML - Строка
//
// Возвращаемое значение:
//  Строка
//
Функция HTMLПредставлениеПолучениеАвтопротокола(Знач РасшифровкаHTML) Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(
		"<head>
		|<style type=""text/css"">
		|.block
		|{
		|	width: 45%;
		|	font-family: Arial, Helvetica, sans-serif;
		|	font-size: 90%;
		|	line-height: 1.25;
		|	text-align: left;
		|	position: static;
		|}
		|a:visited {
		|	color: #006699; text-decoration: none;}
		|a:hover {
		|	color: #006699; text-decoration: underline;}
		|</style>
		|</head>");
	Результат.Добавить("<div class=""block"">");
	Результат.Добавить(НСтр("ru = '<font color=""#006699"">Выполняется получение автопротокола... Ожидайте.</font>'"));
	Результат.Добавить("</div>");
	
	РезультатHTML = СтрСоединить(Результат, Символы.ПС);
	
	Возврат СтрЗаменить(РасшифровкаHTML, "TimelistGetAutoprotocol", РезультатHTML);
	
КонецФункции

// Возвращает HTML расшифровки без тега автопротокола.
// 
// Параметры:
//  РасшифровкаHTML - Строка
//
// Возвращаемое значение:
//  Строка
//
Функция РасшифровкаБезТегаАвтопротокола(Знач РасшифровкаHTML) Экспорт
	
	Возврат СтрЗаменить(РасшифровкаHTML, "<p>TimelistGetAutoprotocol</p>", "");
	
КонецФункции

#КонецОбласти