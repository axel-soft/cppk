///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбщиеПроцедурыИФункции

// Получает версию сервиса БИД.
//
// Параметры:
//   ИнтегрированнаяСистема - ПланОбменаСсылка.ИнтегрированныеСистемы - система, для которой
//     требуется получить версию встроенной в нее БИД.
//   ТекстСообщенияОбОшибке - Строка - неявно возвращаемое значение, текст сообщения об ошибке.
//
// Возвращаемое значение:
//   Строка - "0.0.0.0" если сервис недоступен, версия БИД если сервис доступен.
//
Функция ВерсияСервиса(ИнтегрированнаяСистема, ТекстСообщенияОбОшибке = "") Экспорт
	
	Если ПараметрыСеанса.ВерсияБИД <> "" Тогда
		// Если параметр сеанса установлен – значит сеанс инициирован вызовом веб-сервиса ДО из
		// интегрированной системы. Версия БИД в таком случае уже была передана в теле запроса к ДО.
		Возврат ПараметрыСеанса.ВерсияБИД;
	КонецЕсли;
	
	// Если параметр сеанса не установлен – значит вызов инициирован на стороне ДО, и для определения
	// версии БИД нужно сделать запрос к сервису интегрированной системы.
	
	Если Не ЗначениеЗаполнено(ИнтегрированнаяСистема) Тогда
		ТекстСообщенияОбОшибке = НСтр("ru = 'Ошибка определения версии сервиса.
									|Интегрированная система не задана.'");
		Возврат "0.0.0.0";
	КонецЕсли;
	
	Если ТипЗнч(ИнтегрированнаяСистема) <> Тип("ПланОбменаСсылка.ИнтегрированныеСистемы") Тогда
		ТекстСообщенияОбОшибке = СтрШаблон(НСтр("ru = 'Для системы типа ""%1"" нельзя определить версию сервиса.'"),
			ТипЗнч(ИнтегрированнаяСистема));
		Возврат "0.0.0.0";
	КонецЕсли;
	
	Попытка
		Ответ = РаботаСИнтегрированнымиСистемамиПовтИсп.СтруктураМетаданныхСистемыИнтегрированнойБесшовно(
			ИнтегрированнаяСистема);
		Возврат Ответ.dmilVersionNumber;
	Исключение
		ТекстСообщенияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат "0.0.0.0";
	КонецПопытки;
	
КонецФункции

// Добавляет в список выбора доступные интегрированные системы.
//
// Параметры:
//   СписокВыбора - СписокЗначений из ПланОбменаСсылка.ИнтегрированныеСистемы, Строка - список выбора интегрированных
//     систем.
//   ДанныеИнтегрированныхСистем - ДанныеФормыКоллекция - неявно возвращаемое значение, содержит доп. данные ИС:
//     * АдресСервиса - Строка
//     * СопоставлятьСотрудниковПоДолжности - Булево
//     * СопоставлятьСотрудниковПоПодразделению - Булево
//     * ИнтегрированнаяСистема - ПланОбменаСсылка.ИнтегрированныеСистемы
//                              - Строка
//     * Наименование - Строка
//
Процедура ОбновитьСписокИС(СписокВыбора, ДанныеИнтегрированныхСистем = Неопределено) Экспорт
	
	СписокВыбора.Очистить();
	
	Если ДанныеИнтегрированныхСистем <> Неопределено Тогда
		ДанныеИнтегрированныхСистем.Очистить();
	КонецЕсли;
	
	ЦветОбласти = Новый Цвет(200, 200, 200);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИнтегрированныеСистемы.Ссылка КАК ИнтегрированнаяСистема,
		|	ИнтегрированныеСистемы.Наименование КАК Наименование,
		|	ИнтегрированныеСистемы.АдресВебСервиса КАК АдресСервиса,
		|	ИнтегрированныеСистемы.СопоставлятьСотрудниковПоДолжности КАК СопоставлятьСотрудниковПоДолжности,
		|	ИнтегрированныеСистемы.СопоставлятьСотрудниковПоПодразделению КАК СопоставлятьСотрудниковПоПодразделению
		|ИЗ
		|	ПланОбмена.ИнтегрированныеСистемы КАК ИнтегрированныеСистемы
		|ГДЕ
		|	НЕ ИнтегрированныеСистемы.ПометкаУдаления
		|	И НЕ ИнтегрированныеСистемы.ЭтотУзел
		|	И ИнтегрированныеСистемы.ПоддерживаетПравилаЗагрузкиДанныхВДО
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИнтегрированныеСистемы.Наименование");
	Выборка = Запрос.Выполнить().Выбрать();
	
	ИмяОбласти = НСтр("ru = ' (бесшовная интеграция)'");
	Пока Выборка.Следующий() Цикл
		Представление = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(СокрЛП(Выборка.ИнтегрированнаяСистема),, Новый Цвет(0, 0, 0)),
			Новый ФорматированнаяСтрока(ИмяОбласти,,ЦветОбласти));
		СписокВыбора.Добавить(Выборка.ИнтегрированнаяСистема, Представление);
		
		Если ДанныеИнтегрированныхСистем <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ДанныеИнтегрированныхСистем.Добавить(), Выборка);
		КонецЕсли;
	КонецЦикла;
	
	ИмяОбласти = НСтр("ru = ' (макет)'");
	Для Каждого МакетМетаданные Из Метаданные.ПланыОбмена.ИнтегрированныеСистемы.Макеты Цикл
		Макет = ПланыОбмена.ИнтегрированныеСистемы.ПолучитьМакет(МакетМетаданные.Имя);
		ОбластьИмяРеквизита = Макет.Область(1, 1);
		ОбластьИмяТЧ = Макет.Область(1, 2);
		ОбластьИмяДокумента = Макет.Область(1, 3);
		Если ОбластьИмяРеквизита.Текст = НСтр("ru = 'Имя реквизита'")
				И ОбластьИмяТЧ.Текст = НСтр("ru = 'Имя табличной части'")
				И ОбластьИмяДокумента.Текст = НСтр("ru = 'Имя документа'") Тогда
			Представление = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(МакетМетаданные.Синоним,, Новый Цвет(0, 0, 0)),
				Новый ФорматированнаяСтрока(ИмяОбласти,,ЦветОбласти));
			СписокВыбора.Добавить(МакетМетаданные.Имя, Представление);
			
			Если ДанныеИнтегрированныхСистем <> Неопределено Тогда
				НоваяСтрока = ДанныеИнтегрированныхСистем.Добавить();
				НоваяСтрока.ИнтегрированнаяСистема = МакетМетаданные.Имя;
				НоваяСтрока.Наименование = МакетМетаданные.Синоним;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДополнитьСписокПрограммноОпределяемымиИнтегрированнымиСистемами(СписокВыбора, ДанныеИнтегрированныхСистем);
	
КонецПроцедуры

// Проверяет подключение к веб-сервису БИД и возвращает результат проверки.
//
// Параметры:
//   МестоположениеWSDL - Строка - адрес веб-сервиса БИД.
//   ИмяПользователя - Строка - имя пользователя ИС.
//   Пароль - Строка - пароль пользователя ИС.
//   ТекстСообщенияОбОшибке - Строка - неявно возвращаемое значение, текст сообщения об ошибке.
//
// Возвращаемое значение:
//   Булево - Истина, если подключиться удалось, и Ложь в противном случае.
//
Функция ПроверитьПодключение(МестоположениеWSDL, ИмяПользователя, Пароль, ТекстСообщенияОбОшибке = "") Экспорт
	
	// При использовании аутентификации ОС имя пользователя не нужно.
	Если Не ЗначениеЗаполнено(ИмяПользователя) Тогда
		ТекстСообщенияОбОшибке = НСтр("ru = 'Не указано имя пользователя 1С:Документооборота.'");
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(МестоположениеWSDL) Тогда
		ТекстСообщенияОбОшибке = НСтр("ru = 'Не указан адрес веб-сервиса 1С:Документооборота.'");
		Возврат Ложь;
	КонецЕсли;
	
	ОкончаниеWSDL = Прав(МестоположениеWSDL, 1);
	Если ОкончаниеWSDL <> "/" И ОкончаниеWSDL <> "\" Тогда
		МестоположениеWSDL = МестоположениеWSDL + "/";
	КонецЕсли;
	
	Таймаут = РаботаСИнтегрированнымиСистемами.ТаймаутСервиса();
	
	ИнтернетПрокси = Неопределено;
	РаботаСИнтегрированнымиСистемамиПереопределяемый.ПриПолученииWSПрокси(ИнтернетПрокси);
	
	ЗащищенноеСоединение = Неопределено;
	РаботаСИнтегрированнымиСистемамиПереопределяемый.ПриСозданииЗащищенногоСоединения(
		ЗащищенноеСоединение,
		МестоположениеWSDL);
	
	// При необходимости создадим защищенное соединение. Используем сертификаты из хранилища
	// Windows, если это имеет смысл для текущей платформы.
	ЭтоСоединениеSSL = СтрНачинаетсяС(МестоположениеWSDL, "https");
	Если ЗащищенноеСоединение = Неопределено И ЭтоСоединениеSSL Тогда
		Если РаботаСИнтегрированнымиСистемами.СерверРаботаетПодWindows() Тогда
			ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(
				Новый СертификатКлиентаWindows(),
				Новый СертификатыУдостоверяющихЦентровWindows());
		Иначе
			ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(
				Неопределено,
				Новый СертификатыУдостоверяющихЦентровLinux());
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Определения = Новый WSОпределения(МестоположениеWSDL + "ws/dmil.1cws?wsdl",
			ИмяПользователя,
			Пароль,
			ИнтернетПрокси,
			Таймаут,
			ЗащищенноеСоединение);
	Исключение
		Определения = Неопределено;
		ТекстСообщенияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Определения = Неопределено Тогда
		
		Попытка
			Определения = Новый WSОпределения(МестоположениеWSDL + "ws/DMILService?wsdl",
				ИмяПользователя,
				Пароль,
				ИнтернетПрокси,
				Таймаут,
				ЗащищенноеСоединение);
		Исключение
			Определения = Неопределено;
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке
				+ Символы.ПС
				+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
	КонецЕсли;
	
	Если Определения = Неопределено Тогда
		
		ЗаписьЖурналаРегистрации(
			РаботаСИнтегрированнымиСистемами.ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщенияОбОшибке);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Попытка
		Прокси = Новый WSПрокси(Определения,
			"http://www.1c.ru/dmil",
			"DMILService",
			"DMILServiceSoap",
			ИнтернетПрокси,
			Таймаут,
			ЗащищенноеСоединение);
	Исключение
		
		ТекстСообщенияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			РаботаСИнтегрированнымиСистемами.ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщенияОбОшибке);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Возвращает тип файла сохраняемой печатной формы по умолчанию.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ТипыФайловСохраненияПечатныхФормОбъектов - тип по умолчанию.
//
Функция ТипФайлаСохраняемойПечатнойФормыПоУмолчанию() Экспорт
	
	Возврат Перечисления.ТипыФайловСохраненияПечатныхФормОбъектов.PDF_A_1;
	
КонецФункции

#КонецОбласти

#Область РаботаСВходящимиДанными

// Возвращает количество строк, которыми будет заполняться таблица в режиме "По правилам для отдельных реквизитов".
//
// Параметры:
//   ХранилищеПравил - ХранилищеЗначения - содержит объект типа ТаблицаЗначений.
//
// Возвращаемое значение:
//   Число
//
Функция КоличествоСтрокЗаполненияТаблицы(ХранилищеПравил) Экспорт
	
	Если ТипЗнч(ХранилищеПравил) <> Тип("ХранилищеЗначения") Тогда
		Возврат 0;
	КонецЕсли;
	
	ТаблицаПравил = ХранилищеПравил.Получить();
	Если ТипЗнч(ТаблицаПравил) <> Тип("ТаблицаЗначений") Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат ТаблицаПравил.Количество();
	
КонецФункции

// Получает массив правил заполнения строк таблицы из хранилища значений.
//
// Параметры:
//   ХранилищеПравил - ХранилищеЗначения - содержит объект типа ТаблицаЗначений.
//   ИнтегрированнаяСистема - ПланОбменаСсылка.ИнтегрированныеСистемы, Строка - узел интегрированной системы.
//   ТипОбъектаДО - Строка - имя типа объекта Документооборота.
//   ТипОбъектаИС - Строка - имя типа объекта интегрированной системы.
//   Таблица - Строка - имя таблицы объекта Документооборота.
//   Обновлять - Булево - настройка обновления таблицы в правилах.
//   ВидДокумента - СправочникСсылка.ВидыДокументов - вид документа.
//   ДляОтображенияНаФорме - Булево - указывает нужно ли добавлять значения, необходимые для отображения на
//     форме правил, такие как картинка, представление реквизита объекта ИС и прочее.
//
// Возвращаемое значение:
//   Массив из Структура
//
Функция ПравилаЗаполненияСтрокТаблицыИзХранилища(ХранилищеПравил, ИнтегрированнаяСистема, ТипОбъектаДО, ТипОбъектаИС,
		Таблица, Обновлять, ВидДокумента = Неопределено, ДляОтображенияНаФорме = Истина) Экспорт
	
	ПравилаЗаполненияСтрокТаблицы = Новый Массив;
	
	Если ТипЗнч(ХранилищеПравил) <> Тип("ХранилищеЗначения") Тогда
		Возврат ПравилаЗаполненияСтрокТаблицы;
	КонецЕсли;
	
	ТаблицаПравил = ХранилищеПравил.Получить();
	Если ТипЗнч(ТаблицаПравил) <> Тип("ТаблицаЗначений") Тогда
		Возврат ПравилаЗаполненияСтрокТаблицы;
	КонецЕсли;
	
	МетаданныеПравилаЗаполненияРеквизита =
		Метаданные.Справочники.ПравилаЗагрузкиДанныхВДО.ТабличныеЧасти.ПравилаЗаполненияРеквизитовДО.Реквизиты;
	МассивРеквизитовТаблицыОбъектаДО = Справочники.ПравилаЗагрузкиДанныхВДО.РеквизитыТаблицыОбъектаДО(
		ТипОбъектаДО,
		Таблица,
		ВидДокумента);
	
	Для Каждого Строка Из ТаблицаПравил Цикл
		
		СтруктураСтроки = Новый Структура;
		
		Для Каждого Элемент Из МассивРеквизитовТаблицыОбъектаДО Цикл
			
			ПравилоЗаполненияРеквизитаСтроки = Новый Структура;
			Для Каждого Реквизит Из МетаданныеПравилаЗаполненияРеквизита Цикл
				ПравилоЗаполненияРеквизитаСтроки.Вставить(Реквизит.Имя, Неопределено);
			КонецЦикла;
			Если ДляОтображенияНаФорме Тогда
				// Добавим элементы формы.
				ПравилоЗаполненияРеквизитаСтроки.Вставить("Картинка", Неопределено);
				ПравилоЗаполненияРеквизитаСтроки.Вставить("ПредставлениеРеквизитаОбъектаИС", Неопределено);
				ПравилоЗаполненияРеквизитаСтроки.Вставить("Пояснение", Неопределено);
			КонецЕсли;
			
			// Заполним реквизиты объекта.
			ПравилоЗаполненияРеквизитаСтроки.ТипРеквизитаОбъектаДОВСтроку =
				РаботаСИнтегрированнымиСистемами.ТипРеквизитаОбъектаДОВСтроку(Элемент.Тип);
			ПравилоЗаполненияРеквизитаСтроки.Таблица = Таблица;
			ПравилоЗаполненияРеквизитаСтроки.Обновлять = Обновлять;
			ПравилоЗаполненияРеквизитаСтроки.ЭтоТаблица = Ложь;
			ПравилоЗаполненияРеквизитаСтроки.ЭтоДополнительныйРеквизитДО = Ложь;
			ПравилоЗаполненияРеквизитаСтроки.ИмяМетодаДляЗаполнения = "";
			ПравилоЗаполненияРеквизитаСтроки.ИмяМетодаПроверкиДоступностиПоСостоянию = "";
			ПравилоЗаполненияРеквизитаСтроки.ИмяПоляПроверкиДоступностиПоСостоянию = "";
			Для Каждого Реквизит Из РаботаСИнтегрированнымиСистемами.МассивРеквизитовХранилищаПравил() Цикл
				ПравилоЗаполненияРеквизитаСтроки[СтрЗаменить(Реквизит.ШаблонИмени, "%1_", "")] =
					Строка[СтрШаблон(Реквизит.ШаблонИмени, Элемент.Имя)];
			КонецЦикла;
			Если ДляОтображенияНаФорме Тогда
				// Заполним элементы формы.
				Если ПравилоЗаполненияРеквизитаСтроки.Вариант =
						Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта Тогда
					ПравилоЗаполненияРеквизитаСтроки.Картинка = 1;
					ПравилоЗаполненияРеквизитаСтроки.ПредставлениеРеквизитаОбъектаИС =
						РаботаСИнтегрированнымиСистемами.ПредставлениеРеквизитаОбъектаИнтегрированнойСистемы(
							ИнтегрированнаяСистема,
							ТипОбъектаИС,
							ПравилоЗаполненияРеквизитаСтроки.ИмяРеквизитаОбъектаИС);
				ИначеЕсли ПравилоЗаполненияРеквизитаСтроки.Вариант =
						Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение Тогда
					ПравилоЗаполненияРеквизитаСтроки.Картинка = 2;
				ИначеЕсли ПравилоЗаполненияРеквизитаСтроки.Вариант =
							Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке
						И ЗначениеЗаполнено(ПравилоЗаполненияРеквизитаСтроки.ВычисляемоеВыражение) Тогда
					ПравилоЗаполненияРеквизитаСтроки.Картинка = 3;
				КонецЕсли;
			КонецЕсли;
			
			СтруктураСтроки.Вставить(Элемент.Имя, ПравилоЗаполненияРеквизитаСтроки);
			
		КонецЦикла;
		
		ПравилаЗаполненияСтрокТаблицы.Добавить(СтруктураСтроки);
		
	КонецЦикла;
	
	Возврат ПравилаЗаполненияСтрокТаблицы;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Дополняет список интегрированных систем программно определяемыми.
//
// Параметры:
//   СписокВыбора - СписокЗначений Из ПланОбменаСсылка.ИнтегрированныеСистемы, Строка - список выбора интегрированных
//     систем.
//   ДанныеИнтегрированныхСистем - ДанныеФормыКоллекция - неявно возвращаемое значение, содержит доп. данные ИС:
//     * АдресСервиса - Строка
//     * СопоставлятьСотрудниковПоДолжности - Булево
//     * СопоставлятьСотрудниковПоПодразделению - Булево
//     * ИнтегрированнаяСистема - ПланОбменаСсылка.ИнтегрированныеСистемы
//                              - Строка
//     * Наименование - Строка
//
Процедура ДополнитьСписокПрограммноОпределяемымиИнтегрированнымиСистемами(СписокВыбора,
		ДанныеИнтегрированныхСистем = Неопределено)
	
	// АвтоматическоеСозданиеОбъектовПоДаннымЭД
	ОбменЭДОДокументооборот.ДополнитьСписокИнтегрированныхСистемОписаниемПодсистемыЭДО(
		СписокВыбора,
		ДанныеИнтегрированныхСистем);
	// Конец АвтоматическоеСозданиеОбъектовПоДаннымЭД
	
КонецПроцедуры

#КонецОбласти