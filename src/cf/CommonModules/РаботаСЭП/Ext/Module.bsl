////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции для работы с электронными подписями.
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Заполняет список подписей файла.
//
// Параметры:
//  ТекущийОбъект - СправочникСсылка.ВерсииФайлов
//
Процедура ЗаполнитьСписокПодписейФайла(ТекущийОбъект, ЭлементыДерева, КоличествоПодписей,
	УникальныйИдентификатор, ПолучитьДляПомеченногоНаУдалениеОбъекта = Ложь) Экспорт
	
	КоличествоПодписей = 0;
	
	ДанныеПодписей = ПодписиОбъектаСУчетомДоверенностей(ТекущийОбъект, УникальныйИдентификатор);
	ЗаполнитьСтатусыПодписейИДоверенностей(ДанныеПодписей);
	
	Для Каждого ДанныеПодписи Из ДанныеПодписей Цикл
		НоваяСтрока = ЭлементыДерева.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПодписи);
		
		Если НоваяСтрока.Свойство("АвторПодписиИСтатус") Тогда
			НоваяСтрока.АвторПодписиИСтатус = 
				НоваяСтрока.АвторПодписи
				+ Символы.ПС
				+ НоваяСтрока.Статус;
		КонецЕсли;
		Если НоваяСтрока.Свойство("ДатаПодписиИКомментарий") Тогда
			НоваяСтрока.ДатаПодписиИКомментарий = 
				Формат(НоваяСтрока.ДатаПодписи, "ДФ='dd.MM.yyyy HH:mm'")
				+ Символы.ПС
				+ НоваяСтрока.Комментарий;
		КонецЕсли;
		
		КоличествоПодписей = КоличествоПодписей + 1;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет список подписей Входящего Исходящего Документа предприятия и его подчиненных файлов.
//
Процедура ЗаполнитьСписокПодписей(ОбъектСсылка, ТаблицаПодписей, УникальныйИдентификатор, ГруппаЭП, ВсегоПодписей) Экспорт
	
	ВсегоПодписей = 0;
	ТаблицаПодписей.ПолучитьЭлементы().Очистить();
	
	ЭлементыДерева = ТаблицаПодписей.ПолучитьЭлементы();
	
	ФайлыДляОтображенияПодписей = Делопроизводство.ПолучитьФайлыДокументаДляПодписания(ОбъектСсылка);
	РеквизитыФайлов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ФайлыДляОтображенияПодписей, "ТекущаяВерсия, ИндексКартинки");
	ВерсииФайлов = Новый Массив();
	Для Каждого Элемент Из РеквизитыФайлов Цикл
		РеквизитыФайла = Элемент.Значение;
		ВерсииФайлов.Добавить(РеквизитыФайла.ТекущаяВерсия);
	КонецЦикла;
	
	ОбъектыСтрокПодписей = Новый Массив();
	ОбъектыСтрокПодписей.Добавить(ОбъектСсылка);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыСтрокПодписей, ФайлыДляОтображенияПодписей);
	
	ОбъектыДляПолученияПодписей = Новый Массив();
	ОбъектыДляПолученияПодписей.Добавить(ОбъектСсылка);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыДляПолученияПодписей, ВерсииФайлов);
	ДанныеПодписейПоОбъектам =
		ПодписиОбъектовСУчетомДоверенностей(ОбъектыДляПолученияПодписей, УникальныйИдентификатор);
	
	Для Каждого Объект Из ОбъектыСтрокПодписей Цикл
		
		ПодписанныйОбъект = Объект;
		ИндексКартинки = 0;
		Если ДелопроизводствоКлиентСервер.ЭтоФайл(ПодписанныйОбъект) Тогда
			РеквизитыФайла = РеквизитыФайлов[Объект];
			ПодписанныйОбъект = РеквизитыФайла.ТекущаяВерсия;
			ИндексКартинки = РеквизитыФайла.ИндексКартинки;
		КонецЕсли;
		
		ПодписиОбъекта = ДанныеПодписейПоОбъектам[ПодписанныйОбъект];
		Если ПодписиОбъекта.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОбъекта = ЭлементыДерева.Добавить();
		СтрокаОбъекта.Объект = Объект;
		СтрокаОбъекта.КомуВыданСертификат = Строка(ТипЗнч(Объект)) + " """ + Строка(Объект) + """"; 
		Если СтрокаОбъекта.Свойство("АвторПодписиИСтатус") Тогда
			СтрокаОбъекта.АвторПодписиИСтатус = СтрокаОбъекта.КомуВыданСертификат; 
		КонецЕсли;
		СтрокаОбъекта.ИндексКартинки = ИндексКартинки;
		
		ЗаполнитьСтатусыПодписейИДоверенностей(ПодписиОбъекта);
		Для Каждого ДанныеПодписи Из ПодписиОбъекта Цикл
			
			СтрокаПодписи = СтрокаОбъекта.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПодписи, ДанныеПодписи);
			
			Если СтрокаПодписи.Свойство("АвторПодписиИСтатус") Тогда
				СтрокаПодписи.АвторПодписиИСтатус = 
					СтрокаПодписи.АвторПодписи
					+ Символы.ПС
					+ СтрокаПодписи.Статус;
			КонецЕсли;
			Если СтрокаПодписи.Свойство("ДатаПодписиИКомментарий") Тогда
				СтрокаПодписи.ДатаПодписиИКомментарий = 
					Формат(СтрокаПодписи.ДатаПодписи, "ДФ='dd.MM.yyyy HH:mm'")
					+ Символы.ПС
					+ СтрокаПодписи.Комментарий;
			КонецЕсли;
			
			ВсегоПодписей = ВсегоПодписей + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ГруппаЭП <> Неопределено Тогда
		ТекстЗаголовка = НСтр("ru = 'ЭП'");
		Если ВсегоПодписей <> 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + " (" + Строка(ВсегоПодписей) + ")";
		КонецЕсли;
		ГруппаЭП.Заголовок = ТекстЗаголовка;
		
		Если ВсегоПодписей = 0 Тогда 
			ГруппаЭП.Видимость = Ложь;
		Иначе	
			ГруппаЭП.Видимость = Истина;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьДанныеПодписиОбъекта(ОбъектСсылка, ИдентификаторФормы) Экспорт
	
	ДанныеПодписей = ПодписиОбъектаСУчетомДоверенностей(ОбъектСсылка, ИдентификаторФормы);
	ЗаполнитьСтатусыПодписейИДоверенностей(ДанныеПодписей);
	
	Если ДанныеПодписей.Количество() = 0 Тогда
		Возврат НовыеДанныеПодписиСУчетомДоверенности();
	Иначе
		Возврат ДанныеПодписей[0];
	КонецЕсли;
	
КонецФункции

// Удаляет выделенные ЭП.
//
Процедура УдалитьПодписиИОбновитьСписок(РеквизитПодписанИзменен, ВыделенныеСтроки,
	ОбъектСсылка, ТаблицаПодписей, УникальныйИдентификатор, ГруппаЭП, ВсегоПодписей) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыПодписей = Новый Массив();
	Для Каждого Элемент Из ВыделенныеСтроки Цикл
		ДанныеСтроки = ТаблицаПодписей.НайтиПоИдентификатору(Элемент);
		Если ЗначениеЗаполнено(ДанныеСтроки.УникальныйИдентификатор) Тогда
			ИдентификаторыПодписей.Добавить(ДанныеСтроки.УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
	
	КлючиРегистраПоИдентификаторам = КлючиРегистраПодписейПоИдентификаторамПодписей(ИдентификаторыПодписей);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСФайламиСлужебный");
		ТипыПрисоединенныхФайлов = МодульРаботаСФайламиСлужебный.ТипыПрисоединенныхФайлов();
	КонецЕсли;
	
	ВсеОбъекты = Новый Соответствие; // соответствие объекта и таблицы номеров строк табл части
	Для Каждого Элемент Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ТаблицаПодписей.НайтиПоИдентификатору(Элемент);
		
		Если ДанныеСтроки.Объект <> Неопределено И (НЕ ДанныеСтроки.Объект.Пустая()) Тогда
			
			ИдентификаторПодписи = ДанныеСтроки.УникальныйИдентификатор;
			ПодписанныйОбъект = ДанныеСтроки.Объект;
			
			Если Не ЗначениеЗаполнено(ИдентификаторПодписи) Тогда
				Продолжить;
			КонецЕсли;  
			
			ТипОбъекта = ТипЗнч(ПодписанныйОбъект);
			ЭтоПрисоединенныйФайл = ТипыПрисоединенныхФайлов.СодержитТип(ТипОбъекта);
			Если ЭтоПрисоединенныйФайл 
				И ТипЗнч(ПодписанныйОбъект) <> Тип("СправочникСсылка.ВерсииФайлов") Тогда
				Продолжить;
			КонецЕсли;  
			
			МассивПодписей = ВсеОбъекты[ПодписанныйОбъект];
			Если МассивПодписей = Неопределено Тогда
				МассивПодписей = Новый Массив;
				ВсеОбъекты[ПодписанныйОбъект] = МассивПодписей;
			КонецЕсли;
			
			КлючРегистра = КлючиРегистраПоИдентификаторам[ИдентификаторПодписи]; // см. НовыйКлючРегистраЭлектронныхПодписей
			Если КлючРегистра = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			МассивПодписей.Добавить(КлючРегистра.ПорядковыйНомер);
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПараКлючЗначение Из ВсеОбъекты Цикл
		
		ПодписанныйОбъект = ПараКлючЗначение.Ключ;
		НомераПодписей = ПараКлючЗначение.Значение;
		
		Если ТипЗнч(ПодписанныйОбъект) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
			
			РаботаСФайламиСлужебныйВызовСервера.УдалитьПодписиВерсииФайла(ПодписанныйОбъект, НомераПодписей, 
				РеквизитПодписанИзменен, УникальныйИдентификатор);
			
		Иначе
				
			ЭлектроннаяПодпись.УдалитьПодпись(ПодписанныйОбъект, НомераПодписей, 
				УникальныйИдентификатор);
				
			ОбъектПодписан = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодписанныйОбъект, "ПодписанЭП");
			
			КоличествоПодписей = КоличествоПодписей(ПодписанныйОбъект);
			Если ОбъектПодписан = Истина И КоличествоПодписей = 0 Тогда
				РеквизитПодписанИзменен = Истина;
				Объект = ПодписанныйОбъект.ПолучитьОбъект(); 
				ЗаблокироватьДанныеДляРедактирования(ПодписанныйОбъект, , УникальныйИдентификатор);
				Объект.ПодписанЭП = Ложь;
				Объект.Записать();
				РазблокироватьДанныеДляРедактирования(ПодписанныйОбъект, УникальныйИдентификатор);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВсеОбъекты.Количество() > 0 Тогда
		ЗаполнитьСписокПодписей(ОбъектСсылка, ТаблицаПодписей, 
			УникальныйИдентификатор, ГруппаЭП, ВсегоПодписей);
	КонецЕсли;
	
КонецПроцедуры

// Удаляем все подписи объекта
//
Процедура УдалитьПодписиОбъекта(ПодписанныйОбъект) Экспорт
	
	НаборЗаписей = РегистрыСведений.ЭлектронныеПодписи.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПодписанныйОбъект.Установить(ПодписанныйОбъект);
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Снимает признак "Подписан ЭП" у указанного объекта, при необходимости снимая и у владельцев.
//
Процедура СнятьПризнакПодписанЭП(Ссылка) Экспорт
	
	СсылкиКСнятию = Новый Массив;
	Если Ссылка.Метаданные().Реквизиты.Найти("ПодписанЭП") <> Неопределено
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПодписанЭП") = Истина Тогда
		СсылкиКСнятию.Добавить(Ссылка);
	КонецЕсли;
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,
			"Владелец, Владелец.ТекущаяВерсия, Владелец.ПодписанЭП");
		Если ЗначенияРеквизитов.ВладелецТекущаяВерсия = Ссылка
			И ЗначенияРеквизитов.ВладелецПодписанЭП = Истина Тогда
			СсылкиКСнятию.Добавить(ЗначенияРеквизитов.Владелец);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СсылкаКСнятию Из СсылкиКСнятию Цикл
		Если ТипЗнч(СсылкаКСнятию) = Тип("СправочникСсылка.Файлы") Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаКСнятию,
				"ВладелецФайла, ВладелецФайла.ПодписанЭП");
			Если ЗначенияРеквизитов.ВладелецФайлаПодписанЭП = Истина
				И КоличествоПодписей(ЗначенияРеквизитов.ВладелецФайла) = 0 Тогда
				СсылкиКСнятию.Добавить(ЗначенияРеквизитов.ВладелецФайла);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СсылкиКСнятию.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	Для Каждого СсылкаКСнятию Из СсылкиКСнятию Цикл
		ЭлементБлокировки = Блокировка.Добавить(СсылкаКСнятию.Метаданные().ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаКСнятию);
	КонецЦикла;
	
	Попытка
		
		Блокировка.Заблокировать();
		
		Для Каждого СсылкаКСнятию Из СсылкиКСнятию Цикл
			ОбъектКСнятию = СсылкаКСнятию.ПолучитьОбъект();
			ОбъектКСнятию.ПодписанЭП = Ложь;
			ОбъектКСнятию.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Для Вх Исх Внутр документов формирует массив значений Полей (включая имя поля) - только важные реквизиты.
//
// Параметры:
//  ОбъектСсылка - СправочникСсылка
//  Версия - Число - Версия набора подписываемых ключевых параметров объекта.
//  ДополнительныеПараметры - Структура -
//  
Функция СформироватьНаборВажныхПолей(Знач ОбъектСсылка, Версия = Неопределено,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	МассивИмен = Новый Массив;
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(ОбъектСсылка) Тогда
		МассивИмен = Справочники.ДокументыПредприятия.ПолучитьИменаКлючевыхРеквизитов(Версия);
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоВизаСогласования(ОбъектСсылка) Тогда
		МассивИмен = Справочники.ВизыСогласования.ПолучитьИменаКлючевыхРеквизитов(Версия);
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоРезолюция(ОбъектСсылка) Тогда
		МассивИмен = Справочники.Резолюции.ПолучитьИменаКлючевыхРеквизитов(Версия);
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоДанныеОзнакомленияПодПодпись(ОбъектСсылка) Тогда
		МассивИмен = Справочники.ДанныеОзнакомленияПодПодпись.ПолучитьИменаКлючевыхРеквизитов(Версия);
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("Структура") Тогда
		Для Каждого Элемент Из ОбъектСсылка Цикл
			МассивИмен.Добавить(Элемент.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыФормирования = ПараметрыФормированияНабораВажныхПолей(Версия, ДополнительныеПараметры);
	
	МассивПолей = Новый Массив;
	Для Каждого ИмяПоля Из МассивИмен Цикл
		
		Если ПараметрыФормирования.ИсключаемыеРеквизиты[ИмяПоля] = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ПозицияТочки = Найти(ИмяПоля, ".");
		Если ПозицияТочки = 0 Тогда
			
			ДобавитьЗаписьПоляОбъектаВНаборВажныхПолей(ОбъектСсылка, ИмяПоля, МассивПолей, ПараметрыФормирования);
			
		Иначе  // табличные части отдельно обработать
			ИмяТабличнойЧасти = Лев(ИмяПоля, ПозицияТочки - 1);
			ИмяКолонки = Сред(ИмяПоля, ПозицияТочки + 1);
			
			РезультатЗапросаКТаблице = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, ИмяТабличнойЧасти);
			ВыборкаСтрок = РезультатЗапросаКТаблице.Выбрать();
			НомерСтроки = 0;
			Пока ВыборкаСтрок.Следующий() Цикл
				
				ЗначениеПоля = ЗначениеПоляТаблицыДляНабораВажныхПолей(
					ВыборкаСтрок, ИмяТабличнойЧасти, ИмяКолонки, НомерСтроки, ПараметрыФормирования);
				
				ИмяЯчейки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					 "%1_%2_%3", ИмяТабличнойЧасти, НомерСтроки, ИмяКолонки);
				СтрокаЗначения = ПолучитьДанныеОбъектаСтрокой(ЗначениеПоля, ИмяЯчейки);
				МассивПолей.Добавить(СтрокаЗначения);
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивПолей;
	
КонецФункции

// Формирует файл с именами и значениями полей.
//
Процедура СформироватьФайлКлючевыхПолей(МассивПолей, ИмяФайлаСПутем) Экспорт
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	
	Для Каждого ЗначениеПоля Из МассивПолей Цикл
		ТекстовыйДокумент.ДобавитьСтроку(ЗначениеПоля);
	КонецЦикла;
	
	ТекстовыйДокумент.Записать(ИмяФайлаСПутем);
	
КонецПроцедуры	

// Получить объекты для подписи - массив структур АдресФайла или ДвоичныеДанные, ОбъектСсылкаДляПодписи
//  где АдресФайла - адрес файла во временном хранилище
//
Процедура ПолучитьОбъектыДляПодписи(ОбъектСсылка, УникальныйИдентификаторФормы, МассивОбъектовДляПодписи) Экспорт
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(ОбъектСсылка) Тогда
		
		// тут формируем файл из важных полей карточки
		ДвоичныеДанные = ПолучитьДвоичныеДанныеОбъекта(ОбъектСсылка);
		
		ОбъектДляПодписи = Новый Структура("ДвоичныеДанные, ОбъектСсылкаДляПодписи", 
			ДвоичныеДанные, ОбъектСсылка);
		МассивОбъектовДляПодписи.Добавить(ОбъектДляПодписи);
		
		// тут собираем все подчиненные файлы
		МассивВозврата = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИНавигационнуюСсылкуВерсииВсехПодчиненныхФайлов(ОбъектСсылка, УникальныйИдентификаторФормы);
		ПервыйФайл = Истина;
		
		Для Каждого СтруктураВозврата Из МассивВозврата Цикл
			
			ДанныеФайла = СтруктураВозврата.ДанныеФайла;
			АдресФайла = СтруктураВозврата.НавигационнаяСсылкаВерсии;
			ОбъектСсылкаДляПодписи = ДанныеФайла.Ссылка;
			
			СтруктураДляПодписи = Неопределено;
			
			// только первый файл кладем как ДвоичныеДанные
			Если ПервыйФайл Тогда
				
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
				УдалитьИзВременногоХранилища(АдресФайла);
				
				СтруктураДляПодписи = Новый Структура("ДвоичныеДанные, ОбъектСсылкаДляПодписи", 
					ДвоичныеДанные, ОбъектСсылкаДляПодписи);
					
				ПервыйФайл = Ложь;
			Иначе
				СтруктураДляПодписи = Новый Структура("АдресФайла, ОбъектСсылкаДляПодписи", 
					АдресФайла, ОбъектСсылкаДляПодписи);
			КонецЕсли;
			
			МассивОбъектовДляПодписи.Добавить(СтруктураДляПодписи);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ВизыСогласования") 
		ИЛИ ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Резолюции") ИЛИ ТипЗнч(ОбъектСсылка) = Тип("Структура") Тогда 
		
		ДвоичныеДанные = ПолучитьДвоичныеДанныеОбъекта(ОбъектСсылка);
		
		ОбъектДляПодписи = Новый Структура("ДвоичныеДанные, ОбъектСсылкаДляПодписи", 
			ДвоичныеДанные, ОбъектСсылка);
		МассивОбъектовДляПодписи.Добавить(ОбъектДляПодписи);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает двоичные данные объекта (Входящий Исходящий Внутренний).
//
// Параметры:
//  ОбъектСсылка - СправочникСсылка.ДокументыПредприятия -
//               - СправочникСсылка.ВизыСогласования -
//               - СправочникСсылка.Резолюции -
//               - СправочникСсылка.ДанныеОзнакомленияПодПодпись -
//               - Структура -
//  Версия - Число - Версия набора подписываемых ключевых параметров объекта.
//  ДополнительныеПараметры - Структура -
//
// Возвращаемое значение:
// - ДвоичныеДанные
//
Функция ПолучитьДвоичныеДанныеОбъекта(ОбъектСсылка, Версия = Неопределено,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	ИмяФайлаСПутем = ПолучитьИмяВременногоФайла();
	МассивПолей = СформироватьНаборВажныхПолей(ОбъектСсылка, Версия, ДополнительныеПараметры);
	СформироватьФайлКлючевыхПолей(МассивПолей, ИмяФайлаСПутем);
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайлаСПутем);
	
	УдалитьФайлы(ИмяФайлаСПутем);
	
	Возврат ДвоичныеДанные;
	
КонецФункции

// Возвращает двоичные данные объекта (Входящий Исходящий Внутренний) и подписи.
//
// Параметры:
//  ОбъектСсылка
//  АдресПодписи
//  Версия - Число - Версия набора подписываемых ключевых параметров объекта.
//  ДополнительныеПараметры - Структура -
//
// Возвращаемое значение:
//  Структура -
//    ДвоичныеДанные
//    ДвоичныеДанныеПодписи
//
Функция ПолучитьДвоичныеДанныеОбъектаИПодписи(ОбъектСсылка,
	АдресПодписи, Версия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ДвоичныеДанные = ПолучитьДвоичныеДанныеОбъекта(ОбъектСсылка, Версия, ДополнительныеПараметры);
	
	Попытка
		ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(АдресПодписи);
	Исключение
		ДвоичныеДанныеПодписи = Неопределено;
	КонецПопытки;
	
	СтруктураВозврата = Новый Структура("ДвоичныеДанные, ДвоичныеДанныеПодписи", 
		ДвоичныеДанные, ДвоичныеДанныеПодписи);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Заносит информацию о массиве ЭП, замещая прежние подписи.
//
Процедура ЗаменитьИнформациюОПодписяхОбъекта(МассивДанныхДляЗанесенияВРегистр, ОбъектСсылка,
	УникальныйИдентификатор = Неопределено) Экспорт
	
	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Файлы") Тогда
		
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектСсылка, "Редактирует, Зашифрован");
		Редактирует = СтруктураРеквизитов.Редактирует;
		Зашифрован = СтруктураРеквизитов.Зашифрован;
		
		Если ЗначениеЗаполнено(Редактирует) Тогда
			СтрокаИсключения = НСтр("ru = 'Нельзя подписать занятый файл: ""'") + Строка(ОбъектСсылка) + """";
			ВызватьИсключение СтрокаИсключения;
		КонецЕсли;
		
		Зашифрован = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "Зашифрован");
		Если Зашифрован Тогда
			СтрокаИсключения = НСтр("ru = 'Нельзя подписать зашифрованный файл: ""'") + Строка(ОбъектСсылка) + """";
			ВызватьИсключение СтрокаИсключения;
		КонецЕсли;
		
	КонецЕсли;
	
	ПодписываемыйОбъектСсылка = ОбъектСсылка;
	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Файлы") Тогда
		ПодписываемыйОбъектСсылка = ОбъектСсылка.ТекущаяВерсия;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		ПодписываемыйОбъект = ПодписываемыйОбъектСсылка.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ПодписываемыйОбъектСсылка, , УникальныйИдентификатор);
		
		ОбъектСТЧЭП = ПодписываемыйОбъектСсылка.Метаданные().ТабличныеЧасти.Найти("ЭлектронныеЦифровыеПодписи") <> Неопределено;
		
		Если Не ОбъектСТЧЭП Тогда
			Выборка = ПолучитьЭлектронныеПодписи(ПодписываемыйОбъектСсылка);
		КонецЕсли;
		
		// проверим права на удаление подписей
		Если ОбъектСТЧЭП Тогда
			Если НЕ ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ() Тогда 
				Для Каждого Подпись Из ПодписываемыйОбъект.ЭлектронныеЦифровыеПодписи Цикл
					
					ПодписьУдаляется = Истина;
					
					Для Каждого Данные Из МассивДанныхДляЗанесенияВРегистр Цикл
						Если Подпись.ДатаПодписи = Данные.ДатаПодписи
							И Подпись.Комментарий = Данные.Комментарий
							И Подпись.КомуВыданСертификат = Данные.КомуВыданСертификат
							И Подпись.УстановившийПодпись = Данные.УстановившийПодпись
							И Подпись.Отпечаток = Данные.Отпечаток
							И Подпись.Подпись.Получить() = Данные.НоваяПодписьДвоичныеДанные
							И Подпись.Сертификат.Получить() = Данные.ДвоичныеДанныеСертификата Тогда
							
							ПодписьУдаляется = Ложь;
							Прервать;
							
						КонецЕсли;
					КонецЦикла;
					
					Если ПодписьУдаляется Тогда
						Если Подпись.УстановившийПодпись <> Пользователи.ТекущийПользователь() Тогда
							ВызватьИсключение НСтр("ru = 'У вас нет прав на удаление подписи.'");
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		Иначе
			Если НЕ ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ() Тогда
				Пока Выборка.Следующий() Цикл
					
					Подпись = Выборка;
					ПодписьУдаляется = Истина;
					
					Для Каждого Данные Из МассивДанныхДляЗанесенияВРегистр Цикл
						Если Подпись.ДатаПодписи = Данные.ДатаПодписи
							И Подпись.Комментарий = Данные.Комментарий
							И Подпись.КомуВыданСертификат = Данные.КомуВыданСертификат
							И Подпись.УстановившийПодпись = Данные.УстановившийПодпись
							И Подпись.Отпечаток = Данные.Отпечаток
							И Подпись.Подпись.Получить() = Данные.НоваяПодписьДвоичныеДанные
							И Подпись.Сертификат.Получить() = Данные.ДвоичныеДанныеСертификата Тогда
							
							ПодписьУдаляется = Ложь;
							Прервать;
							
						КонецЕсли;
					КонецЦикла;
					
					Если ПодписьУдаляется Тогда
						Если Подпись.УстановившийПодпись <> Пользователи.ТекущийПользователь() Тогда
							ВызватьИсключение НСтр("ru = 'У вас нет прав на удаление подписи.'");
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбъектСТЧЭП Тогда
			ПодписываемыйОбъект.ЭлектронныеЦифровыеПодписи.Очистить();
			Для Каждого Данные Из МассивДанныхДляЗанесенияВРегистр Цикл
				НоваяЗапись = ПодписываемыйОбъект.ЭлектронныеЦифровыеПодписи.Добавить();
				НоваяЗапись.КомуВыданСертификат = Данные.КомуВыданСертификат;
				НоваяЗапись.ДатаПодписи = Данные.ДатаПодписи;
				НоваяЗапись.ИмяФайлаПодписи = Данные.ИмяФайлаПодписи;
				НоваяЗапись.Комментарий = Данные.Комментарий;
				НоваяЗапись.Отпечаток = Данные.Отпечаток;
				НоваяЗапись.Подпись = Новый ХранилищеЗначения(Данные.НоваяПодписьДвоичныеДанные);
				НоваяЗапись.УстановившийПодпись = Данные.УстановившийПодпись;
				НоваяЗапись.Сертификат = Новый ХранилищеЗначения(Данные.ДвоичныеДанныеСертификата);
			КонецЦикла;
		Иначе
			РаботаСЭП.УдалитьПодписиОбъекта(ПодписываемыйОбъектСсылка);
			Для Каждого Данные Из МассивДанныхДляЗанесенияВРегистр Цикл
				СвойстваПодписи = Новый Структура;
				СвойстваПодписи.Вставить("Подпись", Данные.НоваяПодписьДвоичныеДанные);
				СвойстваПодписи.Вставить("Отпечаток", Данные.Отпечаток);
				СвойстваПодписи.Вставить("ДатаПодписи", Данные.ДатаПодписи);
				СвойстваПодписи.Вставить("Комментарий", Данные.Комментарий);
				СвойстваПодписи.Вставить("КомуВыданСертификат", Данные.КомуВыданСертификат);
				СвойстваПодписи.Вставить("Сертификат", Данные.ДвоичныеДанныеСертификата);
				СвойстваПодписи.Вставить("УстановившийПодпись", Данные.УстановившийПодпись);
				РаботаСЭП.ЗанестиИнформациюОПодписи(ПодписываемыйОбъектСсылка, СвойстваПодписи);
			КонецЦикла;
		КонецЕсли;
		
		ПодписываемыйОбъект.ПодписанЭП = (МассивДанныхДляЗанесенияВРегистр.Количество() <> 0);
		ПодписываемыйОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
		
		УстановитьПривилегированныйРежим(Истина);
		ПодписываемыйОбъект.Записать();
		РазблокироватьДанныеДляРедактирования(ПодписываемыйОбъектСсылка, УникальныйИдентификатор);
		
		Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Файлы") Тогда
			ФайлСсылка = ОбъектСсылка;
			ВерсияПодписана = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодписываемыйОбъектСсылка, "ПодписанЭП");
			
			ФайлСсылкаПодписан = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка, "ПодписанЭП");
			Если ФайлСсылкаПодписан <> ВерсияПодписана Тогда
				ФайлОбъект = ФайлСсылка.ПолучитьОбъект(); 
				ЗаблокироватьДанныеДляРедактирования(ФайлСсылка, , УникальныйИдентификатор);
				ФайлОбъект.ПодписанЭП = ВерсияПодписана;
				
				ФайлОбъект.Записать();
				РазблокироватьДанныеДляРедактирования(ФайлСсылка, УникальныйИдентификатор);
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Проверяет изменены ли ключевые поля и бросает исключение, если изменены.
//
Процедура ПроверитьИзмененностьКлючевыхПолей(МассивИмен, ПроверяемыйОбъект, Ссылка) Экспорт
	
	РеквизитыОбъектаДоИзменения = Ссылка.ПолучитьОбъект().Метаданные().Реквизиты;
	
	Для Каждого ИмяПоля Из МассивИмен Цикл
		
		ПозицияТочки = Найти(ИмяПоля, ".");
		Если ПозицияТочки = 0 Тогда
			
			Если РеквизитыОбъектаДоИзменения.Найти(ИмяПоля) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПроверяемыйОбъект[ИмяПоля] <> Ссылка[ИмяПоля] Тогда
				ВызватьИсключение НСтр("ru = 'Подписанный документ нельзя редактировать.'");
			КонецЕсли;
			
		Иначе  // табличные части отдельно обработать
			
			ИмяТабличнойЧасти = Лев(ИмяПоля, ПозицияТочки - 1);
			ИмяКолонки = Сред(ИмяПоля, ПозицияТочки + 1);
			
			Если ПроверяемыйОбъект[ИмяТабличнойЧасти].Количество() <> Ссылка[ИмяТабличнойЧасти].Количество() Тогда
				ВызватьИсключение НСтр("ru = 'Подписанный документ нельзя редактировать.'");
			КонецЕсли;
			
			НомерСтроки = 0;
			Для Каждого Строка Из ПроверяемыйОбъект[ИмяТабличнойЧасти] Цикл
				
				СтрокаВБазе = Ссылка[ИмяТабличнойЧасти][НомерСтроки];
				
				Если Строка[ИмяКолонки] <> СтрокаВБазе[ИмяКолонки] Тогда 
					ВызватьИсключение НСтр("ru = 'Подписанный документ нельзя редактировать.'");
				КонецЕсли;
				
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает признак того что объект может быть подписан ЭП.
//
Функция ОбъектМожетБытьПодписанЭП(ОбъектСсылка) Экспорт
	
	ТипОбъекта = ТипЗнч(ОбъектСсылка);
	Если ТипОбъекта = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "ВидДокумента");
		Если ЗначениеЗаполнено(ВидДокумента) И ВидДокумента.ЯвляетсяКомплектомДокументов Тогда
			Возврат Ложь;
		КонецЕсли;
		Возврат Истина;
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Файлы") Тогда
		Возврат Истина;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ВизыСогласования") Тогда
		Возврат Истина;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Резолюции") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает подписи, принадлежащие объекту.
//
Функция ПолучитьЭлектронныеПодписи(ПодписанныйОбъектСсылка, УстановившийПодпись = Неопределено,
	ДатаПодписи = Неопределено, ИдентификаторПодписи = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭП.ИдентификаторПодписи КАК УникальныйИдентификатор,
		|	ЭП.ИдентификаторПодписи КАК ИдентификаторПодписи,
		|	ЭП.ДатаПодписи,
		|	ЭП.ПодписанныйОбъект КАК Объект,
		|	ЭП.ПодписанныйОбъект КАК ПодписанныйОбъект,
		|	ЭП.ПорядковыйНомер КАК ПорядковыйНомер,
		|	ЭП.УстановившийПодпись,
		|	ЭП.Версия,
		|	ЭП.ДатаПроверкиПодписи,
		|	ЭП.СрокДействияПоследнейМеткиВремени,
		|	ЭП.ТипПодписи,
		|	ЭП.ИмяФайлаПодписи,
		|	ЭП.Комментарий,
		|	ЭП.КомуВыданСертификат,
		|	ЭП.Отпечаток,
		|	ЭП.Подпись,
		|	ЭП.ПодписьВерна,
		|	ЭП.Сертификат,
		|	ЭП.СертификатДействителен,
		|	ЭП.ТекстОшибкиПроверкиПодписи,
		|	ЭП.ТекстОшибкиПроверкиСертификата,
		|	ЕСТЬNULL(ВнешниеПодписи.Сведения, ЗНАЧЕНИЕ(Документ.СведенияОВнешнемПодписании.ПустаяСсылка)) КАК ВнешнееПодписание,
		|	ВЫБОР
		|		КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписиНет)
		|			ТОГДА 0
		|		КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьНеПроверена)
		|			ТОГДА 1
		|		КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьДействительна)
		|			ТОГДА 2
		|		КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьНедействительна)
		|			ТОГДА 3
		|		ИНАЧЕ ВЫБОР
		|			КОГДА ЭП.ПодписанныйОбъект.ПодписанЭП
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	КОНЕЦ КАК СтатусПроверкиЭП
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|		ПО ЭП.ПодписанныйОбъект = КешИнформацииОбОбъектах.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВнешнемПодписанииЭлектронныхПодписей КАК ВнешниеПодписи
		|		ПО ВнешниеПодписи.УникальныйИдентификатор = ЭП.ИдентификаторПодписи
		|ГДЕ
		|	ЭП.ПодписанныйОбъект = &ОбъектСсылка";
	Запрос.Параметры.Вставить("ОбъектСсылка", ПодписанныйОбъектСсылка);
	Если УстановившийПодпись <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И ЭП.УстановившийПодпись = &УстановившийПодпись";
		Запрос.Параметры.Вставить("УстановившийПодпись", УстановившийПодпись);
	КонецЕсли;
	Если ДатаПодписи <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И ЭП.ДатаПодписи = &ДатаПодписи";
		Запрос.Параметры.Вставить("ДатаПодписи", ДатаПодписи);
	КонецЕсли;
	Если ИдентификаторПодписи <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И ЭП.ИдентификаторПодписи = &ИдентификаторПодписи";
		Запрос.Параметры.Вставить("ИдентификаторПодписи", ИдентификаторПодписи);
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Возвращает количество подписей объекта.
//
Функция КоличествоПодписей(ПодписанныйОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
		|ГДЕ
		|	ЭП.ПодписанныйОбъект = &Объект";
	Запрос.Параметры.Вставить(
		"Объект", 
		?(ОбщегоНазначения.ЗначениеСсылочногоТипа(ПодписанныйОбъект), ПодписанныйОбъект, ПодписанныйОбъект.Ссылка));
	
	Возврат Запрос.Выполнить().Выбрать().Количество();
	
КонецФункции

// Возвращает первую найденную подпись к объекту, в ином случае возвращает Неопределено.
//
Функция ПолучитьЭлектроннуюПодпись(ПодписанныйОбъект,
	УстановившийПодпись = Неопределено, ДатаПодписи = Неопределено, ИдентификаторПодписи = Неопределено) Экспорт
	
	Выборка = ПолучитьЭлектронныеПодписи(ПодписанныйОбъект.Ссылка, УстановившийПодпись, ДатаПодписи, ИдентификаторПодписи);
	Если Выборка.Следующий() Тогда
		Подпись = РегистрыСведений.ЭлектронныеПодписи.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Подпись, Выборка);
		Подпись.Прочитать();
		Если Не Подпись.Выбран() Тогда
			Возврат Неопределено;
		КонецЕсли;
		Возврат Подпись;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Обновляет информацию о статусе проверки подписи в РС ЭлектронныеПодписи.
//
Процедура ОбновитьСтатусПроверкиПодписи(ДанныеПодписи, ДатаПроверки = Неопределено,
	ОбщийСтатусПроверки = Неопределено) Экспорт
	
	Если НЕ ДанныеПодписи.Свойство("Объект")
		ИЛИ НЕ ДанныеПодписи.Свойство("УстановившийПодпись")
		ИЛИ НЕ ДанныеПодписи.Свойство("ДатаПодписи") Тогда
		ВызватьИсключение НСтр("ru = 'Подпись не найдена.'");
	КонецЕсли;
	
	ПодписанныйОбъект = ДанныеПодписи.Объект;
	УникальныйИдентификатор = ДанныеПодписи.УникальныйИдентификатор;
	
	КлючиРегистраПоИдентификаторам = КлючиРегистраПодписейПоИдентификаторамПодписей(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(УникальныйИдентификатор));
	КлючРегистра = КлючиРегистраПоИдентификаторам[УникальныйИдентификатор]; // см. НовыйКлючРегистраЭлектронныхПодписей
	Если КлючРегистра = Неопределено Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Не удалось обновить статус проверки подписи объекта %1, не найдена подпись с идентификатором %2'"),
			ПодписанныйОбъект, УникальныйИдентификатор);
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ЭлектронныеПодписи.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ПодписанныйОбъект.Установить(КлючРегистра.ПодписанныйОбъект);
	НаборЗаписей.Отбор.ПорядковыйНомер.Установить(КлючРегистра.ПорядковыйНомер);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Не удалось обновить статус проверки подписи объекта %1, не найдена подпись с номером %2'"),
			ПодписанныйОбъект, КлючРегистра.ПорядковыйНомер);
	КонецЕсли;
	
	Подпись = НаборЗаписей[0];
	
	ЗаполнитьЗначенияСвойств(Подпись, ДанныеПодписи);
	Подпись.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
	
	НаборЗаписей.Записать();
	
	ДатаПроверки = Подпись.ДатаПроверкиПодписи;
	СрокПроверкиСертификата = СрокПроверкиДействияСертификата(
		Подпись.Сертификат.Получить(), Подпись.СрокДействияПоследнейМеткиВремени);
	ОбщийСтатусПроверки = РаботаСЭПКлиентСервер.ПолучитьОбщийСтатусПроверкиПодписи(
		Подпись.ПодписьВерна, Подпись.СертификатДействителен, Подпись.ДатаПроверкиПодписи, СрокПроверкиСертификата);
	
КонецПроцедуры

// Обновляет информацию о статусе проверки подписей в РС ЭлектронныеПодписи
//
// Параметры:
//  ДанныеПодписей  - Массив из Структура - содержит:
//         * УникальныйИдентификатор  - УникальныйИдентификатор - УИД подписи
//         * Объект  - ОпределяемыйТип.ПодписанныйОбъект - Подписанный объект
//         * УстановившийПодпись  - СправочникСсылка.Пользователи - Пользователь, поставивший подпись
//         * ДатаПодписи  - Дата - Дата подписи
//         * ПодписьВерна  - Булево - Указывает, верна ли подпись
//         * ТекстОшибкиПроверкиПодписи  - Строка - Описание ошибки проверки подписи
//         * СертификатДействителен  - Булево - Указывает, действителен ли сертификат подписи
//         * ТекстОшибкиПроверкиСертификата  - Строка - Описание ошибки проверки сертификата
//
Процедура ОбновитьСтатусыПроверкиПодписей(ДанныеПодписей) Экспорт
	
	Для Каждого ДанныеПодписи Из ДанныеПодписей Цикл
		ДанныеПодписиДляЗаписи = Новый Структура(
			"УникальныйИдентификатор,
			|Объект,
			|УстановившийПодпись,
			|ДатаПодписи,
			|ПодписьВерна,
			|ТекстОшибкиПроверкиПодписи,
			|СертификатДействителен,
			|ТекстОшибкиПроверкиСертификата");
		
		ЗаполнитьЗначенияСвойств(ДанныеПодписиДляЗаписи, ДанныеПодписи);
		
		ОбновитьСтатусПроверкиПодписи(ДанныеПодписиДляЗаписи);
	КонецЦикла;
	
КонецПроцедуры // ОбновитьСтатусыПроверкиПодписей()

// Сохраняет информацию о ЭП.
//
Процедура ЗанестиИнформациюОПодписи(ПодписанныеДанные, СвойстваПодписиАргумент) Экспорт
	
	СвойстваПодписи = СвойстваПодписиАргумент;
	
	Если ТипЗнч(СвойстваПодписи) = Тип("Строка") И ЭтоАдресВременногоХранилища(СвойстваПодписи) Тогда
		СвойстваПодписи = ПолучитьИзВременногоХранилища(СвойстваПодписи);
	КонецЕсли; 
	
	ДатаПодписиИзФайла = ЭлектроннаяПодпись.ДатаПодписания(СвойстваПодписи.Подпись);
	
	ПодписьЗагруженаИзФайла = Не СвойстваПодписи.Свойство("ДатаПодписи") 
		Или Не ЗначениеЗаполнено(СвойстваПодписи.ДатаПодписи);
	
	// Устанавливаем текущую дату сеанса в качестве даты создания подписи,
	// если последнюю не получилось извлечь из двоичных данных.
	Если ЗначениеЗаполнено(ДатаПодписиИзФайла) Тогда
		ДатаПодписи = ДатаПодписиИзФайла;
	ИначеЕсли Не ЗначениеЗаполнено(СвойстваПодписи.ДатаПодписи) Тогда
		ДатаПодписи = ТекущаяДатаСеанса();
	ИначеЕсли ЗначениеЗаполнено(СвойстваПодписи.ДатаПодписи) Тогда
		ДатаПодписи = СвойстваПодписи.ДатаПодписи;
	КонецЕсли;
	
	ИдентификаторПодписи = Новый УникальныйИдентификатор;
	
	МенеджерЗаписи = РегистрыСведений.ЭлектронныеПодписи.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ИдентификаторПодписи = ИдентификаторПодписи;
	МенеджерЗаписи.ПорядковыйНомер = СледующийНомерПодписиОбъекта(ПодписанныеДанные);
	МенеджерЗаписи.ДатаПодписи = ДатаПодписи;
	МенеджерЗаписи.ПодписанныйОбъект = ПодписанныеДанные;
	МенеджерЗаписи.УстановившийПодпись =  СвойстваПодписи.УстановившийПодпись;
	// Актуальная версия подписываемых данных на текущий момент
	МенеджерЗаписи.Версия = АктуальнаяВерсияПодписи();
	СвойстваПодписи.Свойство("Комментарий",МенеджерЗаписи.Комментарий);
	МенеджерЗаписи.КомуВыданСертификат = СвойстваПодписи.КомуВыданСертификат;
	МенеджерЗаписи.Отпечаток = СвойстваПодписи.Отпечаток;
	МенеджерЗаписи.Подпись = Новый ХранилищеЗначения(СвойстваПодписи.Подпись);
	МенеджерЗаписи.Сертификат = Новый ХранилищеЗначения(СвойстваПодписи.Сертификат);
	Если СвойстваПодписи.Свойство("ТипПодписи") Тогда
		МенеджерЗаписи.ТипПодписи = СвойстваПодписи.ТипПодписи;
	КонецЕсли;
	Если СвойстваПодписи.Свойство("СрокДействияПоследнейМеткиВремени") Тогда
		МенеджерЗаписи.СрокДействияПоследнейМеткиВремени = СвойстваПодписи.СрокДействияПоследнейМеткиВремени;
	КонецЕсли;
	
	// Сразу устанавливаем статус проверки подписи, созданной в программе.
	Если Не ПодписьЗагруженаИзФайла Тогда
		МенеджерЗаписи.ДатаПроверкиПодписи = ДатаПодписи;
		МенеджерЗаписи.ПодписьВерна = Истина;
		МенеджерЗаписи.СертификатДействителен = Истина;
	Иначе
		МенеджерЗаписи.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
		МенеджерЗаписи.ПодписьВерна = СвойстваПодписи.Свойство("ПодписьВерна") И СвойстваПодписи.ПодписьВерна;
		Если Не СвойстваПодписи.Свойство("СертификатДействителен") Тогда
			МенеджерЗаписи.СертификатДействителен = МенеджерЗаписи.ПодписьВерна;
		Иначе	
			МенеджерЗаписи.СертификатДействителен = СвойстваПодписи.СертификатДействителен;
		КонецЕсли;	
	КонецЕсли;
	
	МенеджерЗаписи.Записать();
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(ПодписанныеДанные) Тогда
		ПротоколированиеРаботыСотрудников.ЗаписатьПодписаниеЭП(ПодписанныеДанные, СвойстваПодписи.КомуВыданСертификат, МенеджерЗаписи.Комментарий);
	Иначе	
		ПолныйКомментарий = МенеджерЗаписи.Комментарий + " " + ПолучитьНавигационнуюСсылку(ПодписанныеДанные);
		ПротоколированиеРаботыСотрудников.ЗаписатьПодписаниеЭП(ПодписанныеДанные, СвойстваПодписи.КомуВыданСертификат, ПолныйКомментарий);
	КонецЕсли;
	
	Доверенность = Неопределено;
	Если СвойстваПодписи.Свойство("Доверенность") Тогда
		Доверенность = СвойстваПодписи.Доверенность;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Доверенность) Тогда
		ЗанестиИнформациюОДоверенностиЭП(ИдентификаторПодписи, Доверенность, СвойстваПодписи);
	КонецЕсли;
	
	ВнешнееПодписание = Неопределено;
	СвойстваПодписи.Свойство("ВнешнееПодписание", ВнешнееПодписание);
	Если ЗначениеЗаполнено(ВнешнееПодписание) Тогда
		РаботаСВнешнимПодписанием.ЗанестиИнформациюОВнешнемПодписании(ИдентификаторПодписи, ВнешнееПодписание,
			СвойстваПодписи);
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет информацию о массиве ЭП.
//
Процедура ЗанестиИнформациюОПодписях(ПодписанныеДанные, ИдентификаторФормы = Неопределено) Экспорт
	
	// Подписываемые файлы должны быть не заняты и не зашифрованы.
	Для Каждого Данные Из ПодписанныеДанные Цикл
		
		ПодписанныйОбъект = Данные.ПодписанныйОбъект;
		
		Если ДелопроизводствоКлиентСервер.ЭтоФайл(ПодписанныйОбъект) Тогда
			
			СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПодписанныйОбъект, "Редактирует, Зашифрован");
			
			Если ЗначениеЗаполнено(СтруктураРеквизитов.Редактирует) Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Нельзя подписать занятый файл: ""%1""'"),
					ПодписанныйОбъект);
			КонецЕсли;
				
			Если СтруктураРеквизитов.Зашифрован Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Нельзя подписать зашифрованный файл: ""%1""'"),
					ПодписанныйОбъект);
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
	
		Для Каждого Данные Из ПодписанныеДанные Цикл
			
			ПодписанныйОбъект = Данные.ПодписанныйОбъект;
			СвойстваПодписи = Данные.СвойстваПодписи;
			
			Если ДелопроизводствоКлиентСервер.ЭтоФайл(ПодписанныйОбъект) Тогда
				
				Если ТипЗнч(СвойстваПодписи) = Тип("Строка")
					И ЭтоАдресВременногоХранилища(СвойстваПодписи) Тогда
					
					СвойстваПодписи = ПолучитьИзВременногоХранилища(СвойстваПодписи);
				КонецЕсли;
				
				Если ТипЗнч(СвойстваПодписи) = Тип("Структура")
					И СвойстваПодписи.Свойство("ДанныеИзменены")
					И СвойстваПодписи.ДанныеИзменены = Истина Тогда
					
					ОбновитьФайлПередЗанесениемПодписи(ПодписанныйОбъект, СвойстваПодписи);
					
				КонецЕсли;
				
				РаботаСФайламиСлужебныйВызовСервера.ДобавитьПодписьКФайлу(
					ПодписанныйОбъект,
					СвойстваПодписи,
					ИдентификаторФормы);
				
			Иначе
				
				Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПодписанныйОбъект)) Тогда
					ПодписываемыйОбъект = ПодписанныйОбъект.ПолучитьОбъект();
					ЗаблокироватьДанныеДляРедактирования(ПодписанныйОбъект,, ИдентификаторФормы);
				Иначе
					ПодписываемыйОбъект = ПодписанныйОбъект;
				КонецЕсли;
				
				ПараметрыВыполнения = Неопределено;
				Данные.Свойство("ПараметрыВыполнения", ПараметрыВыполнения);
				
				Если ТипЗнч(ПараметрыВыполнения) = Тип("Структура")
					И ПараметрыВыполнения.Свойство("РазрешитьЗаписьОбъектаИзДругойСистемы")
					И ПараметрыВыполнения.РазрешитьЗаписьОбъектаИзДругойСистемы = Истина Тогда
					
					ПодписываемыйОбъект.ДополнительныеСвойства.Вставить(
						"РазрешитьЗаписьОбъектаИзДругойСистемы", Истина);
				КонецЕсли;
				
				ЗанестиИнформациюОПодписи(ПодписанныйОбъект, СвойстваПодписи);
				
				Если ДелопроизводствоКлиентСервер.ЭтоДокумент(ПодписываемыйОбъект)
					Или ДелопроизводствоКлиентСервер.ЭтоФайл(ПодписываемыйОбъект) Тогда
					
					ПодписываемыйОбъект.ПодписанЭП = Истина;
					Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(ПодписываемыйОбъект) Тогда
						
						Если ТипЗнч(СвойстваПодписи) = Тип("Структура") 
							И СвойстваПодписи.Свойство("ВидПодписи") Тогда 
							
							Если СвойстваПодписи.ВидПодписи = "ПодписьДокумента" Тогда
								
								ПодписываемыйОбъект.Подписал = 
									Сотрудники.ОсновнойСотрудникПользователя(СвойстваПодписи.УстановившийПодпись);
								
								ПодписываемыйОбъект.РезультатПодписания = Перечисления.РезультатыПодписания.Подписано;
								ПодписываемыйОбъект.ДатаПодписания = СвойстваПодписи.ДатаПодписи;
							КонецЕсли;
							
						ИначеЕсли ТипЗнч(ПараметрыВыполнения) = Тип("Структура")
							И ПараметрыВыполнения.Свойство("ПодписатьЭД")
							И ПараметрыВыполнения.Свойство("НаправлениеЭД")
							И ПараметрыВыполнения.ПодписатьЭД = Истина Тогда
							
							Если ПараметрыВыполнения.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий Тогда
								ЗанестиИнформациюПодписанта =
									ОбменСКонтрагентамиДОСервер.ДокументГотовКОбработкеВходящегоЭД(
										ПодписываемыйОбъект.Ссылка);
							Иначе
								ЗанестиИнформациюПодписанта =
									ОбменСКонтрагентамиДОСервер.ПоставитьДокументВОчередьФормированияЭД(
										ПодписываемыйОбъект.Ссылка, Неопределено, Ложь, Истина);
							КонецЕсли;
							
							Если ЗанестиИнформациюПодписанта И ПодписываемыйОбъект.Стороны.Количество() > 0 Тогда
								ОписаниеПодписи = СвойстваПодписи;
								Если ЭтоАдресВременногоХранилища(СвойстваПодписи) Тогда
									ОписаниеПодписи = ПолучитьИзВременногоХранилища(СвойстваПодписи);
								КонецЕсли;
								
								Подписал = Сотрудники.ОсновнойСотрудник();
								Если ТипЗнч(ОписаниеПодписи) = Тип("Структура")
									И ОписаниеПодписи.Свойство("Подписал") Тогда
										
									Подписал = ОписаниеПодписи.Подписал;
								КонецЕсли;
								
								ДатаПодписи = ТекущаяДатаСеанса();
								Если ТипЗнч(ОписаниеПодписи) = Тип("Структура")
									И ОписаниеПодписи.Свойство("ДатаПодписи") Тогда
									
									ДатаПодписи = ОписаниеПодписи.ДатаПодписи;
								КонецЕсли;
								
								СтрокаОрганизации = ПодписываемыйОбъект.Стороны[0];
								СтрокаОрганизации.Подписан = Истина;
								СтрокаОрганизации.ДатаПодписи = ДатаПодписи;
								СтрокаОрганизации.Подписал = Подписал;
								
							Иначе
								ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Не удалось подписать ""%1""'"),
									ПодписываемыйОбъект.Ссылка);
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
					
					ПодписываемыйОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
					
				ИначеЕсли ТипЗнч(ПодписываемыйОбъект) = Тип("СправочникСсылка.ВизыСогласования")
					Или ТипЗнч(ПодписываемыйОбъект) = Тип("СправочникОбъект.ВизыСогласования")
					Или ТипЗнч(ПодписываемыйОбъект) = Тип("СправочникСсылка.Резолюции")
					Или ТипЗнч(ПодписываемыйОбъект) = Тип("СправочникОбъект.Резолюции") Тогда
					
					ПодписываемыйОбъект.Подписана = Истина;
					
				КонецЕсли;
				
				Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПодписанныйОбъект)) Тогда
					УстановитьПривилегированныйРежим(Истина);
					ПодписываемыйОбъект.Записать();
					РазблокироватьДанныеДляРедактирования(ПодписанныйОбъект, ИдентификаторФормы);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Создает копии всех подписей от источника приемнику.
//
// Возвращаемое значение:
//  Количество скопированных подписей.
//
Функция СкопироватьВсеПодписи(ИсточникСсылка, ПриемникСсылка) Экспорт
	
	КоличествоПодписей = 0;
	
	Выборка = ПолучитьЭлектронныеПодписи(ИсточникСсылка);
	
	Попытка
		
		НаборЗаписей = РегистрыСведений.ЭлектронныеПодписи.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПодписанныйОбъект.Установить(ПриемникСсылка, Истина);
		НаборЗаписей.Прочитать();
		
		МаксимальныйНомерПодписи = 0;
		Для Каждого Запись Из НаборЗаписей Цикл
			МаксимальныйНомерПодписи = 
				?(МаксимальныйНомерПодписи > Запись.ПорядковыйНомер, МаксимальныйНомерПодписи, Запись.ПорядковыйНомер);
		КонецЦикла;
		
		НомерПодписи = МаксимальныйНомерПодписи;
		КоличествоПодписей = 0;
		Пока Выборка.Следующий() Цикл
			
			НомерПодписи = НомерПодписи + 1;
			
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			НоваяЗапись.ПодписанныйОбъект = ПриемникСсылка;
			НоваяЗапись.ПорядковыйНомер = НомерПодписи;
			НоваяЗапись.ИдентификаторПодписи = Новый УникальныйИдентификатор();
			
			КоличествоПодписей = КоличествоПодписей + 1;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	Исключение
		
		ИмяСобытия = НСтр("ru = 'ЭлектронныеПодписи.ОшибкаКопированияПодписей'");
		ТекстОшибки = СтрШаблон(НСтр("ru = 'При копировании подписей объекта ""%1"" в ""%2"" произошла ошибка:'"),
				ИсточникСсылка, ПриемникСсылка)
			+ Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,
			РегистрыСведений.ЭлектронныеПодписи, ,
			ТекстОшибки);
		
	КонецПопытки;
	

	Возврат КоличествоПодписей;
	
КонецФункции

// Проверяет существование хотя бы одной подписи для любого документа.
//
Функция СуществуютПодписиКДокументам() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Истина
	|ИЗ
	|	РегистрСведений.ЭлектронныеПодписи
	|ГДЕ
	|	ПодписанныйОбъект ССЫЛКА Справочник.ДокументыПредприятия";

	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Записывает в кеш информацию о статусе проверки ЭП.
//
// Параметры:
//  Ссылка - ссылка на документы или версии файлов.
//
Процедура УстановитьСтатусПроверки(Знач Ссылка, Статус) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
		Ссылка = Ссылка.Владелец;
	КонецЕсли;
	
	Если Не Ссылка.Пустая() И Ссылка.ПолучитьОбъект() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(Ссылка, "СтатусЭП", Статус);
		
	РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(Ссылка, "ДатаПроверкиЭП", ТекущаяДатаСеанса());
	
КонецПроцедуры

// Определяет и записывает в кеш информацию об общем статусе проверки ЭП под текущей версией файла.
// Общий статус подписи файла действителен только в том случае, когда действительны все
// подписи файла.
//
// Параметры:
//  ВерсияФайла - СправочникСсылка.ВерсииФайлов
//
Процедура УстановитьСтатусПроверкиДляФайла(ВерсияФайла) Экспорт
	
	ЭПФайла = РаботаСЭП.ПолучитьЭлектронныеПодписи(ВерсияФайла);
	
	Если ЭПФайла.Количество() = 0 Тогда
		УстановитьСтатусПроверки(ВерсияФайла, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписиНет"));
		Возврат;
	КонецЕсли;
	
	Пока ЭПФайла.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ЭПФайла.ДатаПроверкиПодписи) Тогда
			УстановитьСтатусПроверки(ВерсияФайла, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьНеПроверена"));
			Возврат;
		КонецЕсли;
		
		Если Не ЭПФайла.ПодписьВерна Тогда
			УстановитьСтатусПроверки(ВерсияФайла, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьНедействительна"));
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьСтатусПроверки(ВерсияФайла, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьДействительна"));
	
КонецПроцедуры

// Определяет и записывает в кеш информацию об общем статусе проверки ЭП под документом с учетом
// статусов подписей подчиненных файлов.
// Общий статус подписи документа действителен только в том случае, когда действительны все
// подписи самого документа и его подчиненных файлов.
//
// Параметры:
//  Документ - СправочникСсылка.ДокументыПредприятия
//
Процедура УстановитьСтатусПроверкиДляДокумента(Документ) Экспорт
	
	ЭПДокумента = ПолучитьЭлектронныеПодписи(Документ);
	
	// Если под самим документом нет ни одной подписи, то наличие подписей под подчиненными файлами
	// не учитываем.
	Если ЭПДокумента.Количество() = 0 Тогда
		УстановитьСтатусПроверки(Документ, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписиНет"));
		Возврат;
	КонецЕсли;
	
	Пока ЭПДокумента.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ЭПДокумента.ДатаПроверкиПодписи) Тогда
			УстановитьСтатусПроверки(Документ, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьНеПроверена"));
			Возврат;
		КонецЕсли;
		
		Если Не ЭПДокумента.ПодписьВерна Тогда
			УстановитьСтатусПроверки(Документ, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьНедействительна"));
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверяем статусы подписей подчиненных файлов.
	ПодчиненныеФайлы = Делопроизводство.ПолучитьФайлыДокументаДляПодписания(Документ);
	
	Для Каждого Файл Из ПодчиненныеФайлы Цикл
		
		ЭПФайла = РаботаСЭП.ПолучитьЭлектронныеПодписи(Файл.ТекущаяВерсия);
		
		Если ЭПФайла.Количество() = 0 Тогда
			УстановитьСтатусПроверки(Документ, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписиНет"));
			Возврат;
		КонецЕсли;
	
		Пока ЭПФайла.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ЭПФайла.ДатаПроверкиПодписи) Тогда
				УстановитьСтатусПроверки(Документ, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьНеПроверена"));
				Возврат;
			КонецЕсли;
			
			Если Не ЭПФайла.ПодписьВерна Тогда
				УстановитьСтатусПроверки(Документ, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьНедействительна"));
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	УстановитьСтатусПроверки(Документ, ПредопределенноеЗначение("Перечисление.СтатусПроверкиЭП.ПодписьДействительна"));
	
КонецПроцедуры

#Область ОбработкаСобытийРегистровЭП

// Вызывается при записи набора записей РС ЭлектронныеПодписи и обновляет связанные данные.
//
// Параметры:
//   НаборЗаписей - РегистрСведенийНаборЗаписей.ЭлектронныеПодписи.
//
Процедура ПриЗаписиЭлектронныхПодписей(НаборЗаписей) Экспорт
	
	ОбъектЭП = НаборЗаписей.Отбор.ПодписанныйОбъект.Значение;
	
	Если ТипЗнч(ОбъектЭП) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
		
		УстановитьСтатусПроверкиДляФайла(ОбъектЭП);
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектЭП,
			"Владелец, Владелец.ВладелецФайла");
		Файл = ЗначенияРеквизитов.Владелец;
		ВладелецФайла = ЗначенияРеквизитов.ВладелецВладелецФайла;
		Если ДелопроизводствоКлиентСервер.ЭтоДокумент(ВладелецФайла) Тогда
			
			УстановитьСтатусПроверкиДляДокумента(ВладелецФайла);
			
			Если ПолучитьФункциональнуюОпцию("АвтовизуализацияЭП") Тогда
				
				ИмяСвойства = ИмяСвойстваИзмененныхИдентификаторовПодписейНабораЗаписей();
				Если НаборЗаписей.ДополнительныеСвойства.Свойство(ИмяСвойства) Тогда
					
					ИзмененныеИдентификаторы = НаборЗаписей.ДополнительныеСвойства[ИмяСвойства]; // см. ИзмененныеИдентификаторыПодписей
					
					Для Каждого УдаленныйИдентификатор Из ИзмененныеИдентификаторы.УдаленныеИдентификаторы Цикл
						УдалитьОтметкуЭП(ВладелецФайла, УдаленныйИдентификатор);
					КонецЦикла;
					
				КонецЕсли;
				
				ТаблицаПодписей = НаборЗаписей.Выгрузить();
				ТаблицаПодписей.Сортировать("ДатаПодписи");
				
				// Исключение - для входящих МЭДО отметку генерировать не надо:
				ЭтоДокументСВнешнейПодписью = МЭДОПереопределяемый.ЭтоДокументМЭДОСВнешнейПодписью(ВладелецФайла);
				Для Каждого СтрокаПодписи Из ТаблицаПодписей Цикл
					Если ЭтоДокументСВнешнейПодписью
						И Не ЭтоПодписьНашейОрганизации(СтрокаПодписи.Отпечаток) Тогда
						Продолжить; // Отметку не генерируем, она приходит вместе с внешней ЭП извне.
					КонецЕсли;
					
					ОбновитьОтметкуЭП(ВладелецФайла, СтрокаПодписи);
				КонецЦикла;
				
				РаботаСФайламиВызовСервера.УдалитьВизуализациюЭП(ВладелецФайла, Файл, ОбъектЭП);
					
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоДокумент(ОбъектЭП) Тогда
		
		УстановитьСтатусПроверкиДляДокумента(ОбъектЭП);
		
	КонецЕсли;
	
	ИмяСвойства = ИмяСвойстваИзмененныхИдентификаторовПодписейНабораЗаписей();
	Если НаборЗаписей.ДополнительныеСвойства.Свойство(ИмяСвойства) Тогда
		
		ИзмененныеИдентификаторы = НаборЗаписей.ДополнительныеСвойства[ИмяСвойства]; // см. ИзмененныеИдентификаторыПодписей
		
		Для Каждого УдаленныйИдентификатор Из ИзмененныеИдентификаторы.УдаленныеИдентификаторы Цикл
			УдалитьЗаписьОДоверенностиЭП(УдаленныйИдентификатор);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// При записи доверенностей электронных подписей
// 
// Параметры:
//  НаборЗаписей - РегистрСведенийНаборЗаписей.ДоверенностиЭлектронныхПодписей - Набор записей
Процедура ПриЗаписиДоверенностейЭлектронныхПодписей(НаборЗаписей) Экспорт
	
	ОбновитьОтметкуЭППриЗаписиДоверенностей(НаборЗаписей);
	
КонецПроцедуры

// Возвращает набор добавленных и удаленных идентификаторов ЭП перед записью набора записей регистра
// 
// Параметры:
//  НаборЗаписей - РегистрСведенийНаборЗаписей.ЭлектронныеПодписи
// 
// Возвращаемое значение:
//  Структура:
//    * ДобавленныеИдентификаторы - Массив Из УникальныйИдентификатор
//    * УдаленныеИдентификаторы - Массив Из УникальныйИдентификатор
//
Функция ИзмененныеИдентификаторыПодписей(НаборЗаписей) Экспорт
	
	ИдентификаторыНовогоНабора = Новый Соответствие();
	Для Каждого Запись Из НаборЗаписей Цикл
		Если ЗначениеЗаполнено(Запись.ИдентификаторПодписи) Тогда
			ИдентификаторыНовогоНабора[Запись.ИдентификаторПодписи] = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ПредыдущиеИдентификаторы = ПредыдущиеИдентификаторыПодписейНабора(НаборЗаписей);
	
	ДобавленныеИдентификаторы = Новый Массив(); // Массив Из УникальныйИдентификатор
	Для Каждого Элемент Из ИдентификаторыНовогоНабора Цикл
		
		Идентификатор = Элемент.Ключ;
		Если ПредыдущиеИдентификаторы[Идентификатор] <> Истина Тогда
			ДобавленныеИдентификаторы.Добавить(Идентификатор);
		КонецЕсли;
		
	КонецЦикла;
	
	УдаленныеИдентификаторы = Новый Массив(); // Массив Из УникальныйИдентификатор
	Для Каждого Элемент Из ПредыдущиеИдентификаторы Цикл
		
		Идентификатор = Элемент.Ключ;
		Если ИдентификаторыНовогоНабора[Идентификатор] <> Истина Тогда
			УдаленныеИдентификаторы.Добавить(Идентификатор);
		КонецЕсли;
		
	КонецЦикла;
	
	ИзмененныеИдентификаторы = Новый Структура;
	ИзмененныеИдентификаторы.Вставить("ДобавленныеИдентификаторы", ДобавленныеИдентификаторы);
	ИзмененныеИдентификаторы.Вставить("УдаленныеИдентификаторы", УдаленныеИдентификаторы);
	
	Возврат ИзмененныеИдентификаторы;
	
КонецФункции

// Возвращает имя свойства измененных идентификаторов подписей в доп свойствах набора записей регистра
// 
// Возвращаемое значение:
//  Строка
Функция ИмяСвойстваИзмененныхИдентификаторовПодписейНабораЗаписей() Экспорт
	Возврат "ИзмененныеИдентификаторы";
КонецФункции

#КонецОбласти

#Область ПолучениеПодписей

// Возвращате подписи объектов с учетом доверенностей
// 
// Параметры:
//  Объекты - Массив Из ОпределяемыйТип.ПодписанныйОбъект
//  ИдентификаторФормы - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - ОпределяемыйТип.ПодписанныйОбъект
//    * Значение - Массив Из см. НовыеДанныеПодписиСУчетомДоверенности
Функция ПодписиОбъектовСУчетомДоверенностей(Объекты, ИдентификаторФормы) Экспорт
	
	ПодписиПоОбъектам = Новый Соответствие();
	Для Каждого Объект Из Объекты Цикл
		ПодписиПоОбъектам[Объект] = Новый Массив();
	КонецЦикла;
	
	ИдентификаторыПодписей = Новый Массив();
	
	ВыборкаПодписей = ВыборкаПодписейОбъектов(Объекты);
	Пока ВыборкаПодписей.Следующий() Цикл
		
		ДанныеПодписи = НовыеДанныеПодписиСУчетомДоверенности();
		ЗаполнитьЗначенияСвойств(ДанныеПодписи, ВыборкаПодписей);
		
		ДвоичныеДанныеПодписи = ВыборкаПодписей.Подпись.Получить();
		Если ДвоичныеДанныеПодписи <> Неопределено Тогда
			ДанныеПодписи.АдресПодписи = ПоместитьВоВременноеХранилище(
				ДвоичныеДанныеПодписи, ИдентификаторФормы);
		КонецЕсли;
		
		ДвоичныеДанныеСертификата = ВыборкаПодписей.Сертификат.Получить();
		Если ДвоичныеДанныеСертификата <> Неопределено Тогда
			ДанныеПодписи.АдресСертификата = ПоместитьВоВременноеХранилище(
				ДвоичныеДанныеСертификата, ИдентификаторФормы);
		КонецЕсли;
		
		Объект = ДанныеПодписи.Объект;
		ПодписиОбъекта = ПодписиПоОбъектам[Объект]; // Массив Из см. НовыеДанныеПодписиСУчетомДоверенности
		ПодписиОбъекта.Добавить(ДанныеПодписи);
		
		ИдентификаторыПодписей.Добавить(ДанныеПодписи.УникальныйИдентификатор);
		
	КонецЦикла;
	
	ДанныеДоверенностей = ДанныеДоверенностейПодписей(ИдентификаторыПодписей);
	
	Для Каждого Элемент Из ПодписиПоОбъектам Цикл
		
		Объект = Элемент.Ключ;
		ПодписиОбъекта = Элемент.Значение;
		
		Для Каждого ДанныеПодписи Из ПодписиОбъекта Цикл
			
			ДанныеДоверенности = ДанныеДоверенностей[ДанныеПодписи.УникальныйИдентификатор];
			Если ДанныеДоверенности = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ДанныеПодписи, ДанныеДоверенности);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ПодписиПоОбъектам;
	
КонецФункции

// Возвращает подписи объекта с учетом доверенностей
// 
// Параметры:
//  ПодписанныйОбъект - ОпределяемыйТип.ПодписанныйОбъект
//  УникальныйИдентификаторФормы - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  Произвольный, Массив из Произвольный - Подписи объекта с учетом доверенностей
Функция ПодписиОбъектаСУчетомДоверенностей(ПодписанныйОбъект, УникальныйИдентификаторФормы) Экспорт
	
	Объекты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПодписанныйОбъект);
	ПодписиОбъектов = ПодписиОбъектовСУчетомДоверенностей(Объекты, УникальныйИдентификаторФормы);
	Возврат ПодписиОбъектов[ПодписанныйОбъект];
	
КонецФункции

// Установленные подписи по уникальным идентификаторам подписей
// 
// Параметры:
//  ИдентификаторыПодписей - Массив из УникальныйИдентификатор - Идентификаторы подписей
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - УникальныйИдентификатор
//    * Значение - см. ЭлектроннаяПодписьКлиентСервер.НовыеСвойстваПодписи
//
Функция УстановленныеПодписиПоИдентификаторам(ИдентификаторыПодписей) Экспорт
	
	ПодписиПоИдентификаторам = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭлектронныеПодписи.ИдентификаторПодписи КАК ИдентификаторПодписи,
		|	ЭлектронныеПодписи.ДатаПодписи КАК ДатаПодписи,
		|	ЭлектронныеПодписи.ПодписанныйОбъект КАК ПодписанныйОбъект,
		|	ЭлектронныеПодписи.УстановившийПодпись КАК УстановившийПодпись,
		|	ЭлектронныеПодписи.Версия КАК Версия,
		|	ЭлектронныеПодписи.ДатаПроверкиПодписи КАК ДатаПроверкиПодписи,
		|	ЭлектронныеПодписи.ИмяФайлаПодписи КАК ИмяФайлаПодписи,
		|	ЭлектронныеПодписи.Комментарий КАК Комментарий,
		|	ЭлектронныеПодписи.КомуВыданСертификат КАК КомуВыданСертификат,
		|	ЭлектронныеПодписи.Отпечаток КАК Отпечаток,
		|	ЭлектронныеПодписи.Подпись КАК Подпись,
		|	ЭлектронныеПодписи.ПодписьВерна КАК ПодписьВерна,
		|	ЭлектронныеПодписи.Сертификат КАК Сертификат,
		|	ЭлектронныеПодписи.СертификатДействителен КАК СертификатДействителен,
		|	ЭлектронныеПодписи.СрокДействияПоследнейМеткиВремени КАК СрокДействияПоследнейМеткиВремени,
		|	ЭлектронныеПодписи.ТекстОшибкиПроверкиПодписи КАК ТекстОшибкиПроверкиПодписи,
		|	ЭлектронныеПодписи.ТекстОшибкиПроверкиСертификата КАК ТекстОшибкиПроверкиСертификата,
		|	ЭлектронныеПодписи.ТипПодписи КАК ТипПодписи,
		|	ЭлектронныеПодписи.ОшибкаПриАвтоматическомПродлении КАК ОшибкаПриАвтоматическомПродлении,
		|	ВЫБОР
		|		КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписиНет)
		|			ТОГДА 0
		|		КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьНеПроверена)
		|			ТОГДА 1
		|		КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьДействительна)
		|			ТОГДА 2
		|		КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьНедействительна)
		|			ТОГДА 3
		|		ИНАЧЕ ВЫБОР
		|			КОГДА ЭлектронныеПодписи.ПодписанныйОбъект.ПодписанЭП
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	КОНЕЦ КАК СтатусПроверкиЭП
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|		ПО ЭлектронныеПодписи.ПодписанныйОбъект = КешИнформацииОбОбъектах.Объект
		|ГДЕ
		|	ЭлектронныеПодписи.ИдентификаторПодписи В (&ИдентификаторыПодписей)";
	Запрос.УстановитьПараметр("ИдентификаторыПодписей", ИдентификаторыПодписей);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СвойстваПодписи = ЭлектроннаяПодписьКлиентСервер.НовыеСвойстваПодписи();
		
		ЗаполнитьЗначенияСвойств(СвойстваПодписи, Выборка);
		СвойстваПодписи.Подпись = СвойстваПодписи.Подпись.Получить();
		СвойстваПодписи.Сертификат = СвойстваПодписи.Сертификат.Получить();
		
		ПодписиПоИдентификаторам.Вставить(СвойстваПодписи.ИдентификаторПодписи, СвойстваПодписи);
		
	КонецЦикла;
	
	Возврат ПодписиПоИдентификаторам;
	
КонецФункции

// Возвращает ключи регистра электронных подписей по идентификаторам подписей.
// 	Если подписи с идентификатором не найдено - ключ примет значение Неопределено
// 
// Параметры:
//  ИдентификаторыПодписей - Массив Из УникальныйИдентификатор
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - УникальныйИдентификатор
//    * Значение - см. НовыйКлючРегистраЭлектронныхПодписей - Ключ регистра, если подпись была найдена
//               - Неопределено - Если подпись по идентификатору не была найдена
Функция КлючиРегистраПодписейПоИдентификаторамПодписей(ИдентификаторыПодписей) Экспорт
	
	КлючиРегистра = Новый Соответствие();
	Для Каждого Идентификатор Из ИдентификаторыПодписей Цикл
		КлючиРегистра[Идентификатор] = Неопределено;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныеПодписи.ПодписанныйОбъект КАК ПодписанныйОбъект,
		|	ЭлектронныеПодписи.ПорядковыйНомер КАК ПорядковыйНомер,
		|	ЭлектронныеПодписи.ИдентификаторПодписи КАК ИдентификаторПодписи
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|ГДЕ
		|	ЭлектронныеПодписи.ИдентификаторПодписи В (&ИдентификаторыПодписей)";
	Запрос.УстановитьПараметр("ИдентификаторыПодписей", ИдентификаторыПодписей);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		КлючРегистра = НовыйКлючРегистраЭлектронныхПодписей();
		КлючРегистра.ПодписанныйОбъект = Выборка.ПодписанныйОбъект;
		КлючРегистра.ПорядковыйНомер = Выборка.ПорядковыйНомер;
		
		КлючиРегистра[Выборка.ИдентификаторПодписи] = КлючРегистра;
		
	КонецЦикла;
	
	Возврат КлючиРегистра;
	
КонецФункции

// Конструктор ключа регистра электронных подписей
// 
// Возвращаемое значение:
//  Структура:
//    * ПодписанныйОбъект - ОпределяемыйТип.ПодписанныйОбъект
//    * ПорядковыйНомер - Число
//
Функция НовыйКлючРегистраЭлектронныхПодписей() Экспорт
	
	КлючРегистра = Новый Структура;
	КлючРегистра.Вставить("ПодписанныйОбъект", Справочники.Файлы.ПустаяСсылка());
	КлючРегистра.Вставить("ПорядковыйНомер", 0);
	
	Возврат КлючРегистра;
	
КонецФункции

#КонецОбласти

#Область ОтметкаЭП

// Получив сертфикаты подписей, обновляет изображения отметок ЭП в служебных файлах документа.
//
// Параметры:
//   Документ - СправочникСсылка.ДокументыПредприятия.
//   Версия - СправочникСсылка.ВерсииФайлов - подписываемая версия.
//   ЭП - РегистрСведенийЗапись.ЭлектронныеПодписи - электронная подпись.
//
Процедура ОбновитьОтметкуЭП(Документ, ЭП) Экспорт
	
	ИтоговыйФорматPdf = Ложь;
	НастройкиШтампаЭП = РаботаСФайламиВызовСервера.ПолучитьНастройкиШтампаЭП(Документ);
	Если НастройкиШтампаЭП.ИтоговыйФорматФайлаСоШтампомЭП = Перечисления.ИтоговыйФорматФайлаСоШтампомЭП.PDFA Тогда
		ИтоговыйФорматPdf = Истина;
	КонецЕсли;	
	
	ОписаниеЭП = ОписаниеЭПДляОтметки(ЭП);
	ПутьКОтметкеЭП = СоздатьОтметкуЭП(ОписаниеЭП, ИтоговыйФорматPdf);
	ЗаписатьОтметкуЭП(Документ, ЭП.ИдентификаторПодписи, ПутьКОтметкеЭП);
	УдалитьФайлы(ПутьКОтметкеЭП);
	
КонецПроцедуры

// Возвращает описание ЭП в виде структуры для отметки ЭП.
//
// Параметры:
//   ЭП - РегистрСведенийЗапись.ЭлектронныеПодписи - электронная подпись.
//
// Возвращаемое значение:
//   Структура - со свойствами:
//     Номер - Строка - серийный номер
//     Владелец - Строка - владелец сертификата (CN).
//     ДатаНачала - Дата - дата начала действия сертификата.
//     ДатаОкончания - Дата - дата окончания действия сертификата.
//
Функция ОписаниеЭПДляОтметки(ЭП) Экспорт
	
	ОписаниеЭП = НовоеОписаниеОтметкиЭП();
	
	Если ЭП = Неопределено Тогда
		Возврат ОписаниеЭП;
	КонецЕсли;
	
	Если ТипЗнч(ЭП.Сертификат) = Тип("ХранилищеЗначения") Тогда
		ДанныеСертификата = ЭП.Сертификат.Получить();
	Иначе
		ДанныеСертификата = ЭП.Сертификат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеСертификата) Тогда
		Возврат ОписаниеЭП;
	КонецЕсли;
	
	Сертификат = Новый СертификатКриптографии(ДанныеСертификата);
	
	ОписаниеЭП.Номер = СтрЗаменить(Сертификат.СерийныйНомер, " ", "");
	ОписаниеЭП.Владелец = ЭП.КомуВыданСертификат;
	ОписаниеЭП.Владелец = СтрЗаменить(ОписаниеЭП.Владелец, """", " ");
	ОписаниеЭП.ДатаНачала = Сертификат.ДатаНачала;
	ОписаниеЭП.ДатаОкончания = Сертификат.ДатаОкончания;
	
	ОписаниеЭП.ДанныеДоверенности = ОписаниеДоверенностиЭПДляОтметки(ЭП.ИдентификаторПодписи);
	
	Возврат ОписаниеЭП;
	
КонецФункции

// Возвращает полный путь к изображению отметки ЭП по описанию ЭП.
//
// Параметры:
//   ОписаниеЭП - Структура - со свойствами:
//     Номер - Строка - серийный номер
//     Владелец - Строка - владелец сертификата (CN).
//     ДатаНачала - Дата - дата начала действия сертификата.
//     ДатаОкончания - Дата - дата окончания действия сертификата.
//   ИтоговыйФорматPdf - Булево  
//
// Возвращаемое значение:
//   Строка - полный путь к файлу с изображением отметки ЭП.
//
Функция СоздатьОтметкуЭП(ОписаниеЭП, ИтоговыйФорматPdf = Ложь) Экспорт
	
	ПутьКОтметкеЭП = РаботаСЭППереопределяемый.СоздатьОтметкуЭП(ОписаниеЭП);
	Если ЗначениеЗаполнено(ПутьКОтметкеЭП) Тогда
		Возврат ПутьКОтметкеЭП;
	КонецЕсли;
	
	Если ОписаниеЭП.ДанныеДоверенности.ПодписьПоДоверенности = Истина Тогда
		ПутьКОтметкеЭП = РаботаСКартинками.СформироватьШтампЭПСДоверенностью(ОписаниеЭП,, ИтоговыйФорматPdf);
	Иначе
		ПутьКОтметкеЭП = РаботаСКартинками.СформироватьШтампЭП(ОписаниеЭП,, ИтоговыйФорматPdf);
	КонецЕсли;
	
	Возврат ПутьКОтметкеЭП;
	
КонецФункции

// Возвращает полный путь к изображению отметки ПЭП по описанию ЭП.
//
// Параметры:
//   ДанныеПодписанта - Структура(Подписант, Дата)
//   ИтоговыйФорматPdf - Булево
//
// Возвращаемое значение:
//   Строка - полный путь к файлу с изображением отметки ЭП.
//
Функция СоздатьОтметкуПЭП(ДанныеПодписанта, ИтоговыйФорматPdf = Ложь) Экспорт
	
	ПутьКОтметкеЭП = РаботаСЭППереопределяемый.СоздатьОтметкуПЭП(ДанныеПодписанта);
	Если ЗначениеЗаполнено(ПутьКОтметкеЭП) Тогда
		Возврат ПутьКОтметкеЭП;
	КонецЕсли;
	
	ПутьКОтметкеЭП = РаботаСКартинками.СформироватьШтампПЭП(ДанныеПодписанта,, ИтоговыйФорматPdf);
	
	Возврат ПутьКОтметкеЭП;
	
КонецФункции

// Записывает отметку ЭП в служебные файлы документа.
//
// Параметры:
//   Документ - СправочникСсылка.ДокументыПредприятия.
//   ИдентификаторЭП - УникальныйИдентификатор, СправочникСсылка.Файлы, Строка - идентификатор ЭП или Файл-владелец.
//   ПутьКОтметкеЭП - Строка - полный путь к файлу с изображением отметки ЭП.
//   Положение - См. МЭДОСтруктурыДанных.НовыйПоложениеИзображения.
Процедура ЗаписатьОтметкуЭП(Документ, ИдентификаторЭП, ПутьКОтметкеЭП, Положение = Неопределено) Экспорт
	
	ДанныеОтметки = Новый ДвоичныеДанные(ПутьКОтметкеЭП);
	АдресОтметки = ПоместитьВоВременноеХранилище(ДанныеОтметки);
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	СведенияОФайле.АдресВременногоХранилищаФайла = АдресОтметки;
	СведенияОФайле.ИмяБезРасширения = "ОтметкаЭП";
	СведенияОФайле.РасширениеБезТочки = "png";
	СведенияОФайле.ВремяИзменения = ТекущаяДатаСеанса();
	СведенияОФайле.ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
	СведенияОФайле.Размер = ДанныеОтметки.Размер();
	СведенияОФайле.Вставить("ЗаписьПодписанногоОбъекта", Истина);
	СведенияОФайле.Вставить("ДобавлениеРегШтампа", Истина);

	ОтметкаЭП = ПолучитьОтметкуЭП(Документ, ИдентификаторЭП, Положение);
	Если ЗначениеЗаполнено(ОтметкаЭП) Тогда
		Версия = РаботаСФайламиВызовСервера.СоздатьВерсию(ОтметкаЭП, СведенияОФайле);
		РаботаСФайламиВызовСервера.ОбновитьВерсиюВФайле(ОтметкаЭП, Версия, СведенияОФайле.АдресВременногоХранилищаТекста);
	Иначе
		ОтметкаЭП = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(Документ, СведенияОФайле);
		
		РегистрыСведений.СлужебныеФайлыДокументов.ЗаписатьФайл(
			Документ, 
			?(ТипЗнч(ИдентификаторЭП) = Тип("УникальныйИдентификатор"), "" + ИдентификаторЭП, ИдентификаторЭП),
			Перечисления.ОтношенияСлужебныхФайлов.ОтметкаЭП,
			ОтметкаЭП,
			Положение);
	КонецЕсли;
	
КонецПроцедуры

// Получает отметку ЭП из служебных файлов документа.
//
// Параметры:
//   Документ - СправочникСсылка.ДокументыПредприятия.
//   ИдентификаторЭП - УникальныйИдентификатор,СправочникСсылка.Файлы,Строка - идентификатор ЭП или Файл-владелец.
//   Положение - Структура - неявно возвращаемое значение, положение штампа.
//   						 См. МЭДОСтруктурыДанных.НовыйПоложениеИзображения.
//
//  Возвращаемое значение:
//    СправочникСсылка.Файлы - файл-изображение отметки ЭП.
//
Функция ПолучитьОтметкуЭП(Документ, ИдентификаторЭП, Положение = Неопределено) Экспорт
	
	ДополнительныеСведения = Неопределено;
	ОтметкаЭП = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьСлужебныйФайл(Документ,
		ИдентификаторЭП,
		Перечисления.ОтношенияСлужебныхФайлов.ОтметкаЭП,
		ДополнительныеСведения);
	
	Если ДополнительныеСведения <> Неопределено Тогда
		Положение = МЭДОСтруктурыДанных.НовыйПоложениеИзображения(Неопределено, 0, 0, 0, 0);
		ЗаполнитьЗначенияСвойств(Положение, ДополнительныеСведения);
	КонецЕсли;
	
	Возврат ОтметкаЭП;
	
КонецФункции

// Конструктор для передачи данных о картинке, с возможностью указать координаты вставки на лист.
// 
// Параметры:
//  Путь - Строка
//  Положение - См. МЭДОСтруктурыДанных.НовыйПоложениеИзображения
// 
// Возвращаемое значение:
//  Структура:
//   * Путь - Строка - Путь к файлу.
//   * Положение - См. МЭДОСтруктурыДанных.НовыйПоложениеИзображения
//   * ТипЭП - Строка - Текст "ПЭП" или "КЭП"
Функция НовыйПутьИПоложение(Путь, Положение) Экспорт
	
	Данные = Новый Структура();
	Данные.Вставить("Путь", Путь);
	Данные.Вставить("Положение", Положение); // Может передаваться и Неопределено.
	Данные.Вставить("ТипЭП", "");
	
	Возврат Данные;
	
КонецФункции

// Конструктор для передачи данных о картинке, с возможностью указать координаты вставки на лист.
// 
// Параметры:
//  ДвоичныеДанныеОтметки - ДвоичныеДанные
//  Положение - См. МЭДОСтруктурыДанных.НовыйПоложениеИзображения
// 
// Возвращаемое значение:
//  Структура:
//   * ДвоичныеДанныеОтметки - ДвоичныеДанные - Данные картинки отметки ЭП.
//   * Положение - См. МЭДОСтруктурыДанных.НовыйПоложениеИзображения
//   * ТипЭП - Строка - Текст "ПЭП" или "КЭП"
Функция НовыйДанныеОтметки(ДвоичныеДанныеОтметки, Положение) Экспорт
	
	Данные = Новый Структура();
	Данные.Вставить("ДвоичныеДанныеОтметки", ДвоичныеДанныеОтметки);
	Если Положение = Неопределено Тогда // Может передаваться и Неопределено:
		Данные.Вставить("Положение", МЭДОСтруктурыДанных.НовыйПоложениеИзображения(Неопределено, 0, 0, 0, 0));
	Иначе
		Данные.Вставить("Положение", Положение);
	КонецЕсли;
	
	Данные.Вставить("ТипЭП", "");
	
	Возврат Данные;
	
КонецФункции

// Удаляет отметку ЭП из служебных файлов документа.
//
// Параметры:
//   Документ - СправочникСсылка.ДокументыПредприятия.
//   ИдентификаторЭП - УникальныйИдентификатор - идентификатор ЭП.
Процедура УдалитьОтметкуЭП(Документ, ИдентификаторЭП) Экспорт
	
	ОтметкаЭП = ПолучитьОтметкуЭП(Документ, ИдентификаторЭП);
	Если ЗначениеЗаполнено(ОтметкаЭП) Тогда
		РегистрыСведений.СлужебныеФайлыДокументов.УдалитьФайл(ОтметкаЭП);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает картинку штампа ЭП
//
// Параметры:
//   Файл - СправочникСсылка.Файлы - подписанный файл
//   Сотрудник - СправочникСсылка.Сотрудники
//
// Возвращаемое значение:
//   СправочникСсылка.Файлы или Неопределено, если не нашли
//
Функция ПолучитьФайлШтампаЭП(Файл, Сотрудник) Экспорт
	
	ПользовательСотрудника = Сотрудники.ПользовательСотрудника(Сотрудник);
	
	ТекущаяВерсия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ТекущаяВерсия");
	ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ВладелецФайла");
	
	ЭПФайла = ПолучитьЭлектронныеПодписи(ТекущаяВерсия);
	
	Пока ЭПФайла.Следующий() Цикл
		
		Отпечаток = ЭПФайла.Отпечаток;
		
		СсылкаНаСертификат = ЭлектроннаяПодписьСлужебныйВызовСервера.СсылкаНаСертификат(
			Отпечаток, Неопределено);
			
		Если Не ЗначениеЗаполнено(СсылкаНаСертификат) Тогда
			Продолжить;
		КонецЕсли;		
		
		Если ЭПФайла.УстановившийПодпись <> ПользовательСотрудника Тогда
			Продолжить;
		КонецЕсли;		
				
		ФайлОтметки = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьСлужебныйФайл(
			ВладелецФайла, 
			Строка(ЭПФайла.УникальныйИдентификатор), 
			Перечисления.ОтношенияСлужебныхФайлов.ОтметкаЭП);
			
		Если ЗначениеЗаполнено(ФайлОтметки) Тогда
			Возврат ФайлОтметки;
		КонецЕсли;	
			
	КонецЦикла;	
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(ВладелецФайла) Тогда
		ДокументПодписан = ДействияСервер.ДокументПодписан(ВладелецФайла);
		
		УстановитьОтключениеБезопасногоРежима(Истина);
		
		Если ДокументПодписан Тогда
			ШтампПодписиЭП = РаботаСФайламиВызовСервера.ШтампПодписиПЭП(ВладелецФайла, Сотрудник);
			Возврат ШтампПодписиЭП;
		КонецЕсли;	
		 
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

// Вернет Истина если это подпись нашей организации (сертификат есть в спр СертификатыКлючейЭлектроннойПодписиИШифрования)
// 
// Параметры:
// 	Отпечаток - Строка
// 	
// Возвращаемое значение:
// Булево
// 	
Функция ЭтоПодписьНашейОрганизации(Отпечаток) Экспорт
	
	СсылкаНаСертификат = ЭлектроннаяПодписьСлужебныйВызовСервера.СсылкаНаСертификат(
		Отпечаток, Неопределено);
	Возврат ЗначениеЗаполнено(СсылкаНаСертификат);	
	
КонецФункции	

Функция АктуальнаяВерсияПодписи() Экспорт
	
	Возврат 6;
	
КонецФункции

Функция СрокПроверкиДействияСертификата(Знач Сертификат, СрокДействияПоследнейМеткиВремени) Экспорт
	
	Если Сертификат = Неопределено Тогда
		Возврат ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ТипЗнч(Сертификат) = Тип("Строка")
		И ЭтоАдресВременногоХранилища(Сертификат) Тогда
		
		ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(Сертификат);
		Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
	ИначеЕсли ТипЗнч(Сертификат) = Тип("ДвоичныеДанные") Тогда
		Сертификат = Новый СертификатКриптографии(Сертификат);
	КонецЕсли;
	
	ДатаДействительностиСертификата = Сертификат.ДатаОкончания;
	
	Если ДатаДействительностиСертификата > СрокДействияПоследнейМеткиВремени Тогда
		Возврат ДатаДействительностиСертификата;
	Иначе
		Возврат СрокДействияПоследнейМеткиВремени;
	КонецЕсли;
	
КонецФункции

// Текст подписи УЭП для вывода в печатную форму.
// 
// Параметры:
//  ОбъектПодписания  - СправочникСсылка.ВизыСогласования, СправочникСсылка.ДокументыПредприятия, 
//  					СправочникСсылка.Резолюции - подписанный объект
//  УстановилПодпись - СправочникСсылка.Пользователи, Неопределено - тот, кто установил подпись.
// 
// Возвращаемое значение:
//  Строка - Текст подписи УЭП 
Функция ТекстПодписиУЭПДляВывода(ОбъектПодписания, УстановилПодпись = Неопределено) Экспорт
	
	ТекстПодписи = "";
	
	ЭПОбъекта = РаботаСЭП.ПолучитьЭлектронныеПодписи(ОбъектПодписания);
	
	Пока ЭПОбъекта.Следующий() Цикл
		Если ЗначениеЗаполнено(УстановилПодпись) 
			И УстановилПодпись <> ЭПОбъекта.УстановившийПодпись Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеЭП = РаботаСЭП.ОписаниеЭПДляОтметки(ЭПОбъекта);
		ТекстПодписи  = ТекстПодписи + СтрШаблон(НСтр("ru = 'Сертификат: %1
		|Владелец: %2
		|Действителен: с %3 по %4'"),
		ОписаниеЭП.Номер,
		ОписаниеЭП.Владелец,
		Формат(ОписаниеЭП.ДатаНачала, "ДФ=dd.MM.yyyy;"),
		Формат(ОписаниеЭП.ДатаОкончания, "ДФ=dd.MM.yyyy;"));
			
	КонецЦикла;
		
	СтрокаВозврата = НСтр("ru = 'ПОДПИСАНО УСИЛЕННОЙ ЭЛЕКТРОННОЙ ПОДПИСЬЮ'")
		+ Символы.ПС + ТекстПодписи;
		 		
	Возврат СтрокаВозврата;		
	
КонецФункции

#Область ПроверкаПодписей

Функция ДанныеОбъектовДляПроверкиПодписей(ПараметрыПолучения) Экспорт
	
	ДанныеОбъектов = Новый Соответствие;
	
	ДанныеПодписейОбъектов = ПараметрыПолучения.ДанныеПодписейОбъектов;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСФайламиСлужебный");
		ТипыПрисоединенныхФайлов = МодульРаботаСФайламиСлужебный.ТипыПрисоединенныхФайлов();
	КонецЕсли;
	
	Для Каждого ЭлементОбъекта Из ДанныеПодписейОбъектов Цикл
		
		Объект = ЭлементОбъекта.Ключ;
		ДанныеПодписейОбъекта = ЭлементОбъекта.Значение;
		
		ТипОбъекта = ТипЗнч(Объект);
		ЭтоПрисоединенныйФайл = ТипыПрисоединенныхФайлов.СодержитТип(ТипОбъекта);
		
		Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Объект)
			Или ДелопроизводствоКлиентСервер.ЭтоВизаСогласования(Объект)
			Или ДелопроизводствоКлиентСервер.ЭтоРезолюция(Объект)
			Или ДелопроизводствоКлиентСервер.ЭтоДанныеОзнакомленияПодПодпись(Объект) Тогда
			
			ВерсииПодписей = ВерсииПодписейОбъекта(ДанныеПодписейОбъекта);
			ДанныеОбъекта = ДанныеОбъектаДОДляПроверкиПодписей(Объект, ВерсииПодписей, ПараметрыПолучения);
			
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Файлы")
			Или ТипЗнч(Объект) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
			
			ДанныеОбъекта = ДанныеФайлаДляПроверкиПодписей(Объект, ПараметрыПолучения);
			
		ИначеЕсли ЭтоПрисоединенныйФайл Тогда   
			
			ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(Объект);
			
			ДанныеОбъекта = РаботаСЭПКлиентСервер.НовыеДанныеОбъектаДляПроверкиПодписи();	
			ДанныеОбъекта.ОбъектШифрования = Объект;
			ДанныеОбъекта.АдресДанных = ПоместитьВоВременноеХранилище(
				ДвоичныеДанныеФайла, ПараметрыПолучения.УникальныйИдентификаторФормы); 
			
		Иначе	
			
		КонецЕсли;
		
		ДанныеОбъектов.Вставить(Объект, ДанныеОбъекта);
		
	КонецЦикла;
	
	РаботаСВнешнимПодписанием.ПриПолученииДанныхОбъектовДляПроверкиПодписей(ДанныеОбъектов, ПараметрыПолучения);
	
	Возврат ДанныеОбъектов;
	
КонецФункции

// Обновляет статусы подписей в регистре сведений электронных подписей
// 
// Параметры:
//  ДанныеПодписей - Массив Из см. РаботаСЭПКлиентСервер.НовыеДанныеПодписиДляПроверки
//  ДатаПроверки - Неопределено - если проверено текущим моментом
//               - Дата - Если известна дата проверки подписи
//
Процедура ОбновитьСтатусыПроверкиПодписейВРегистре(ДанныеПодписей, ДатаПроверки = Неопределено) Экспорт
	
	ИдентификаторыПодписей = Новый Массив(); // Массив Из УникальныйИдентификатор
	Для Каждого ДанныеПодписи Из ДанныеПодписей Цикл
		ИдентификаторыПодписей.Добавить(ДанныеПодписи.УникальныйИдентификатор);
	КонецЦикла;
	
	КлючиРегистраПоИдентификаторам = КлючиРегистраПодписейПоИдентификаторамПодписей(ИдентификаторыПодписей);
	
	Для Каждого ДанныеПодписи Из ДанныеПодписей Цикл
		
		КлючРегистра = КлючиРегистраПоИдентификаторам[ДанныеПодписи.УникальныйИдентификатор];
		
		Если КлючРегистра = Неопределено Тогда
			СообщениеПользователю = СтрШаблон(
				НСтр("ru = 'Не удалось обновить статус проверки подписи %1 к объекту %2: подпись не найдена'"),
				ДанныеПодписи.УникальныйИдентификатор,
				ДанныеПодписи.Объект);
			ВызватьИсключение СообщениеПользователю;
		КонецЕсли;
		
		ДанныеДляЗаписи = ДанныеПодписиДляЗаписи(ДанныеПодписи);
		ОбновитьСтатусПроверкиПодписиВРегистре(КлючРегистра, ДанныеДляЗаписи, ДатаПроверки);
	КонецЦикла;
	
КонецПроцедуры

// Результат проверки подписей
// 
// Параметры:
//  ДанныеПроверок  - Соответствие из КлючИЗначение:
//    * Ключ - УникальныйИдентификатор - УИД подписи
//    * Значение см. РаботаСЭП.НовыеДанныеПроверокПодписи
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//    * Ключ - УникальныйИдентификатор - УИД подписи
//    * Значение см. НовыйРезультатПроверкиПодписи
//
Функция РезультатПроверкиПодписей(ДанныеПроверок) Экспорт
	
	РезультатПроверки = Новый Соответствие;
	
	Для Каждого Элемент Из ДанныеПроверок Цикл
		
		ИдентификаторПодписи = Элемент.Ключ;
		ДанныеПроверокПодписи = Элемент.Значение;
		
		РезультатПодписи = РезультатПроверокПодписи(ДанныеПроверокПодписи);
		РезультатПроверки.Вставить(ИдентификаторПодписи, РезультатПодписи);
		
	КонецЦикла;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Новые данные проверок подписей
// 
// Возвращаемое значение:
//  Структура:
// * ДанныеДляПроверки см. РаботаСЭПКлиентСервер.НовыеДанныеПодписиДляПроверки
// * РезультатПроверкиПодписи см. РаботаСЭПКлиентСервер.НовыйРезультатПроверкиПодписи
// * РезультатПроверкиДоверенности - Структура, Неопределено - Протокол проверки доверенности см МашиночитаемыеДоверенности.НовыйПротоколПроверкиПодписи
// * ДатаПроверки - Дата - ДатаВыполненияПроверки
//
Функция НовыеДанныеПроверокПодписи() Экспорт
	
	НовыеДанныеДляПроверки = РаботаСЭПКлиентСервер.НовыеДанныеПодписиДляПроверки();
	НовыйРезультатПроверкиПодписи = РаботаСЭПКлиентСервер.НовыйРезультатПроверкиПодписи();
	
	ДанныеПроверок = Новый Структура;
	ДанныеПроверок.Вставить("ДанныеДляПроверки", НовыеДанныеДляПроверки);
	ДанныеПроверок.Вставить("РезультатПроверкиПодписи", НовыйРезультатПроверкиПодписи);
	ДанныеПроверок.Вставить("РезультатПроверкиДоверенности", Новый Структура);
	ДанныеПроверок.Вставить("ДатаПроверки", Дата(1, 1, 1));
	
	Возврат ДанныеПроверок;
	
КонецФункции

Функция ПроверитьПодписиНаСервере(ДанныеПодписейОбъектов, ДанныеОбъектов) Экспорт
	
	РезультатПроверкиПодписей = ПроверитьДействительностьЭПНаСервере(ДанныеПодписейОбъектов, ДанныеОбъектов);
	
	Возврат РаботаСЭПВызовСервера.ЗавершитьПроверкуПодписейНаСервере(ДанныеПодписейОбъектов, РезультатПроверкиПодписей);
	
КонецФункции

#КонецОбласти

#Область РаботаСМЧД

// Проверяет доверенности электронных подписей
// 
// Параметры:
//  ДанныеДляПроверки - Массив из Структура - см РаботаСЭПКлиентСервер.НовыеДанныеДляПроверкиДоверенностиПодписи
// 
// Возвращаемое значение:
//  Структура - Проверить доверенности электронных подписей:
//   * РезультатыПроверкиДоверенностей - Соответствие из КлючИЗначение:
//     ** Ключ - УникальныйИдентификатор - Уникальный идентификатор подписи
//     ** Значение - Структура - Протокол проверки доверенности см МашиночитаемыеДоверенности.НовыйПротоколПроверкиПодписи
//   * ОшибкиПриПроверке - Соответствие из КлючИЗначение:
//     ** Ключ - УникальныйИдентификатор - Уникальный идентификатор подписи
//     ** Значение - Строка - Описание проблемы при проверке подписи
//
Функция ПроверитьДоверенностиЭлектронныхПодписей(ДанныеДляПроверки) Экспорт
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("РезультатыПроверкиДоверенностей", Новый Соответствие);
	РезультатПроверки.Вставить("ОшибкиПриПроверке", Новый Соответствие);
	
	ДанныеДоверенностей = ДанныеМЧДВДанныхДляПроверкиДоверенностей(ДанныеДляПроверки);
	
	Для Каждого Данные Из ДанныеДляПроверки Цикл
		
		ИдентификаторПодписи = Данные.ДанныеПодписи.УникальныйИдентификатор;
		Доверенность = Данные.Доверенность;
		
		Если Не ЗначениеЗаполнено(Доверенность) Тогда
			СообщениеОшибки = СтрШаблон(НСтр("ru = 'Для подписи %1 к объекту %2 не указана доверенность'"),
				ИдентификаторПодписи, Данные.ДанныеПодписи.Объект);
			РезультатПроверки.ОшибкиПриПроверке.Вставить(ИдентификаторПодписи, СообщениеОшибки);
			Продолжить;
		КонецЕсли;
		
		ДанныеДоверенности = ДанныеДоверенностей[Доверенность];
		Если ДанныеДоверенности = Неопределено Тогда
			СообщениеОшибки = СтрШаблон(НСтр("ru = 'Не удалось получить данные доверенности %1'"),
				Доверенность);
			РезультатПроверки.ОшибкиПриПроверке.Вставить(ИдентификаторПодписи, СообщениеОшибки);
			Продолжить;
		КонецЕсли;
		
		ПараметрыПроверки = ПараметрыПроверкиДоверенностиЭП(Данные, ДанныеДоверенности);
		Результат = МашиночитаемыеДоверенности.ПроверитьПодпись(ПараметрыПроверки);
		
		РезультатПроверки.РезультатыПроверкиДоверенностей.Вставить(ИдентификаторПодписи, Результат.ПротоколПроверки);
		
	КонецЦикла;
	
	Возврат РезультатПроверки;
	
КонецФункции

Процедура ОбновитьСтатусыПроверкиДоверенностей(РезультатыПроверки, ДатаПроверки = Неопределено) Экспорт
	
	ДатаПроверкиДоверенности = ТекущаяДатаСеанса();
	Если ДатаПроверки <> Неопределено Тогда
		ДатаПроверкиДоверенности = ДатаПроверки;
	КонецЕсли;
	
	Для Каждого Элемент Из РезультатыПроверки Цикл
		
		ИдентификаторПодписи = Элемент.Ключ;
		ПротоколПроверки = Элемент.Значение;
		
		НаборЗаписей = РегистрыСведений.ДоверенностиЭлектронныхПодписей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.УникальныйИдентификаторПодписи.Установить(ИдентификаторПодписи);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			СообщениеПользователю = СтрШаблон(
				НСтр("ru = 'Не удалось обновить статус проверки доверенности подписи %1: запись о доверенности не найдена'"),
				ИдентификаторПодписи);
			ВызватьИсключение СообщениеПользователю;
		КонецЕсли;
		
		Запись = НаборЗаписей[0];
		
		РезультатПроверки = РаботаСЭПКлиентСервер.РезультатПроверкиДоверенностиПоПротоколу(ПротоколПроверки);
		
		ПротоколПроверкиJSON = ОбщегоНазначенияБЭД.JSONСтрока(ПротоколПроверки);
		
		Запись.ПротоколПроверки = Новый ХранилищеЗначения(ПротоколПроверкиJSON, Новый СжатиеДанных(9));
		Запись.ДатаПроверки = ДатаПроверкиДоверенности;
		Запись.ДоверенностьВерна = РезультатПроверки.ДоверенностьДействительна;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗанестиИнформациюОДоверенностиЭП(ИдентификаторПодписи, Доверенность, Знач СвойстваПодписи) Экспорт
	
	СвойстваПодписи.Вставить("УникальныйИдентификатор", ИдентификаторПодписи);
	
	ДанныеДляПроверкиДоверенности = РаботаСЭПКлиентСервер.НовыеДанныеДляПроверкиДоверенностиПодписи();
	ЗаполнитьЗначенияСвойств(ДанныеДляПроверкиДоверенности.ДанныеПодписи, СвойстваПодписи);
	
	Если СвойстваПодписи.Свойство("Подпись") И ТипЗнч(СвойстваПодписи.Подпись) = Тип("ДвоичныеДанные") Тогда
		ДанныеДляПроверкиДоверенности.ДанныеПодписи.АдресПодписи = ПоместитьВоВременноеХранилище(
			СвойстваПодписи.Подпись);
	КонецЕсли;
	
	Если СвойстваПодписи.Свойство("Сертификат") И ТипЗнч(СвойстваПодписи.Сертификат) = Тип("ДвоичныеДанные") Тогда
		ДанныеДляПроверкиДоверенности.ДанныеПодписи.АдресСертификата = ПоместитьВоВременноеХранилище(
			СвойстваПодписи.Сертификат);
	КонецЕсли;
	
	ДанныеДляПроверкиДоверенности.Доверенность = Доверенность;
	
	ДанныеДляПроверки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеДляПроверкиДоверенности);
	РезультатПроверки = ПроверитьДоверенностиЭлектронныхПодписей(ДанныеДляПроверки);
	ПротоколПроверки = РезультатПроверки.РезультатыПроверкиДоверенностей[ИдентификаторПодписи];
	ДоверенностьВерна =
		РаботаСЭПКлиентСервер.РезультатПроверкиДоверенностиПоПротоколу(ПротоколПроверки).ДоверенностьДействительна;
	
	ПротоколПроверкиJSON = ОбщегоНазначенияБЭД.JSONСтрока(ПротоколПроверки);
	
	МенеджерЗаписи = РегистрыСведений.ДоверенностиЭлектронныхПодписей.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.УникальныйИдентификаторПодписи = ИдентификаторПодписи;
	МенеджерЗаписи.Доверенность = Доверенность;
	МенеджерЗаписи.ДоверенностьВерна = ДоверенностьВерна;
	МенеджерЗаписи.ДатаПроверки = ТекущаяДатаСеанса();
	МенеджерЗаписи.ПротоколПроверки = Новый ХранилищеЗначения(ПротоколПроверкиJSON, Новый СжатиеДанных(9));
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура УдалитьЗаписьОДоверенностиЭП(ИдентификаторПодписи) Экспорт
	
	НаборЗаписей = РегистрыСведений.ДоверенностиЭлектронныхПодписей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УникальныйИдентификаторПодписи.Установить(ИдентификаторПодписи);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Доступные МЧД для подписания сертификатом.
// 
// Параметры:
//  Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
// 
// Возвращаемое значение:
//  Массив Из ОпределяемыйТип.МашиночитаемаяДоверенность
//
Функция ДоступныеМЧДДляПодписанияСертификатом(Сертификат) Экспорт
	
	СвойстваСубъекта = КриптографияБЭД.СвойстваСубъектаСертификатаПоСсылке(Сертификат);
	
	ДанныеПредставителя = РаботаСМЧДДокументооборот.НовыеДанныеПредставителяМЧД();
	ДанныеПредставителя.ИНН = СвойстваСубъекта.ИНН;
	
	ДоверенностиПоПредставителям = РаботаСМЧДДокументооборот.МЧДПоДаннымПредставителей(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеПредставителя));
	
	ВсеМЧД = Новый Массив();
	Для Каждого Элемент Из ДоверенностиПоПредставителям Цикл
		ДоверенностиПоКлючу = Элемент.Значение;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеМЧД, ДоверенностиПоКлючу);
	КонецЦикла;
	ВсеМЧД = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВсеМЧД);
	
	ДанныеМЧД = РаботаСМЧДДокументооборот.ДанныеМЧД(ВсеМЧД);
	ДанныеДоверителей = РаботаСМЧДДокументооборот.ДанныеДоверителейМЧД(ВсеМЧД);
	
	СтатусМЧДДоступенДляПодписания = Новый Соответствие();
	СтатусМЧДДоступенДляПодписания[
		Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Зарегистрировано] = Истина;
	СтатусМЧДДоступенДляПодписания[
		Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ДатаНачалаДействияНеНаступила] = Истина;
	СтатусМЧДДоступенДляПодписания[
		Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ИстекСрокДействия] = Истина;
	СтатусМЧДДоступенДляПодписания[
		Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ПустаяСсылка()] = Истина;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	ДоверенностиДляПодписания = Новый Массив();
	Для Каждого Доверенность Из ВсеМЧД Цикл
		
		ДанныеДоверенности = ДанныеМЧД[Доверенность]; // см. РаботаСМЧДДокументооборот.НовыеДанныеМЧД
		ДоверителиМЧД = ДанныеДоверителей[Доверенность]; // Массив Из см. РаботаСМЧДДокументооборот.НовыеДанныеДоверителяМЧД
		
		ДействуетПоСроку = (ТекущаяДата > ДанныеДоверенности.ДатаВыдачи)
			И (ДанныеДоверенности.ДатаОкончания > ТекущаяДата);
		
		ДоверителиДопустимыДляПодписания = Истина;
		Для Каждого ДанныеДоверителя Из ДоверителиМЧД Цикл
			Если Не ЗначениеЗаполнено(ДанныеДоверителя.Ссылка)
				Или ТипЗнч(ДанныеДоверителя.Ссылка) <> Тип("СправочникСсылка.Организации") Тогда
				
				ДоверителиДопустимыДляПодписания = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Если ДанныеДоверенности.ПометкаУдаления
			Или Не ДанныеДоверенности.Верна
			Или Не ДействуетПоСроку
			Или ДанныеДоверенности.Отозвана
			Или СтатусМЧДДоступенДляПодписания[ДанныеДоверенности.СтатусВРеестреФНС] <> Истина
			Или Не ДоверителиДопустимыДляПодписания Тогда
			
			Продолжить;
		КонецЕсли;
		
		ДоверенностиДляПодписания.Добавить(Доверенность);
		
	КонецЦикла;
	
	Возврат ДоверенностиДляПодписания;
	
КонецФункции

Функция СертификатуНужнаДоверенность(Сертификат) Экспорт
	
	Если ТипЗнч(Сертификат) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда
		СвойстваСубъекта = КриптографияБЭД.СвойстваСубъектаСертификатаПоСсылке(Сертификат);
		СвойстваИздателя = КриптографияБЭД.СвойстваИздателяСертификатаПоСсылке(Сертификат);
	Иначе
		СвойстваСубъекта = КриптографияБЭД.СвойстваСубъектаСертификата(Сертификат);
		СвойстваИздателя = КриптографияБЭД.СвойстваИздателяСертификата(Сертификат);
	КонецЕсли;
	
	ЭтоСертификатИП = (СвойстваСубъекта.ОГРНИП <> Неопределено);
	ЭтоСертификатФизЛица = КриптографияБЭД.ЭтоВидСертификатаФизическогоЛица(
		СвойстваСубъекта, СвойстваИздателя);
	
	Возврат ЭтоСертификатФизЛица И Не ЭтоСертификатИП;
	
КонецФункции

Функция ДанныеДоверенностейПодписей(ИдентификаторыПодписей) Экспорт
	
	ДанныеДоверенностей = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоверенностиЭлектронныхПодписей.УникальныйИдентификаторПодписи,
		|	ДоверенностиЭлектронныхПодписей.ДатаПроверки КАК ДатаПроверкиДоверенности,
		|	ДоверенностиЭлектронныхПодписей.Доверенность КАК Доверенность,
		|	ДоверенностиЭлектронныхПодписей.ДоверенностьВерна КАК ДоверенностьВерна,
		|	ДоверенностиЭлектронныхПодписей.ПротоколПроверки КАК ПротоколПроверкиДоверенности
		|ИЗ
		|	РегистрСведений.ДоверенностиЭлектронныхПодписей КАК ДоверенностиЭлектронныхПодписей
		|ГДЕ
		|	ДоверенностиЭлектронныхПодписей.УникальныйИдентификаторПодписи В (&ИдентификаторыПодписей)";
	Запрос.УстановитьПараметр("ИдентификаторыПодписей", ИдентификаторыПодписей);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеДоверенности = НовыеДанныеДоверенности();
		ЗаполнитьЗначенияСвойств(ДанныеДоверенности, Выборка, "Доверенность, ДатаПроверкиДоверенности, ДоверенностьВерна");
		
		ПротоколПроверкиJSON = Выборка.ПротоколПроверкиДоверенности.Получить();
		Если ПротоколПроверкиJSON <> Неопределено Тогда
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(ПротоколПроверкиJSON);
			ДанныеДоверенности.ПротоколПроверкиДоверенности = ПрочитатьJSON(ЧтениеJSON,,"ДатаПроверки");
			ЧтениеJSON.Закрыть();
		КонецЕсли;
		
		ДанныеДоверенностей.Вставить(Выборка.УникальныйИдентификаторПодписи, ДанныеДоверенности);
		
	КонецЦикла;
	
	Возврат ДанныеДоверенностей;
	
КонецФункции

Функция ДоступноУказаниеДоверенностиПодписи(ИдентификаторПопдиси, Знач Пользователь = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если Пользователи.ЭтоПолноправныйПользователь(Пользователь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Идентификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторПопдиси);
	ПодписиПоИдентификаторам = УстановленныеПодписиПоИдентификаторам(Идентификаторы);
	СвойстваПодписи = ПодписиПоИдентификаторам[ИдентификаторПопдиси];
	
	Если ТипЗнч(СвойстваПодписи) = Тип("Структура")
		И СвойстваПодписи.УстановившийПодпись = Пользователь Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ДанныеДоверенностейДляВыгрузки(Доверенности, ИдентификаторФормы) Экспорт
	
	ДанныеДоверенностей = Новый Соответствие;
	
	Для Каждого Доверенность Из Доверенности Цикл
		
		ДанныеДоверенности = ДанныеДоверенностей[Доверенность];
		Если ДанныеДоверенности <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДоверенности = НовыеДанныеДоверенностиДляВыгрузки();
		
		Если ТипЗнч(Доверенность) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций") Тогда
			РезультатВыгрузки = МашиночитаемыеДоверенности.ВыгрузитьДанныеДоверенности(Доверенность);
		ИначеЕсли ТипЗнч(Доверенность) = Тип("СправочникСсылка.МЧД003") Тогда
			РезультатВыгрузки = Справочники.МЧД003.ВыгрузитьДанныеДоверенности(Доверенность);
		Иначе
			РезультатВыгрузки = ВыгрузитьДанныеДоверенностиКонтрагента(Доверенность);
		КонецЕсли;
		
		Если РезультатВыгрузки.Ошибка Тогда
			ДанныеДоверенности.ОшибкаВыгрузки = РезультатВыгрузки.ТекстОшибки;
		Иначе
			ДанныеДоверенности.Выгружена = Истина;
			ДанныеДоверенности.АдресДанных = ПоместитьВоВременноеХранилище(
				РезультатВыгрузки.ОписаниеФайла.ДвоичныеДанные, ИдентификаторФормы);
			ДанныеДоверенности.ИмяФайла = РезультатВыгрузки.ОписаниеФайла.ИмяФайла;
		КонецЕсли;
		
		ДанныеДоверенностей.Вставить(Доверенность, ДанныеДоверенности);
		
	КонецЦикла;
	
	Возврат ДанныеДоверенностей;
	
КонецФункции

// Получает массив структур - zip файлов МЧД (1 файл на каждый МЧД)
// 
// Параметры:
// ВерсияФайла - СправочникССылка.ВерсииФайлов
// ИдентификаторФормы - УникальныйИдентификатор - Идентификатор формы для помещения данных во временное хранилище
// ИспользованныеМЧД - Соответствие
// 
// Возвращаемое значение:
//  Массив из Структура
Функция ФайлыДоверенностей(ВерсияФайла, ИдентификаторФормы, ИспользованныеМЧД) Экспорт
	
	КоллекцияПодписей = ЭлектроннаяПодпись.УстановленныеПодписи(ВерсияФайла);
	ДанныеДоверенностей = ДанныеДоверенностейКоллекцииПодписей(КоллекцияПодписей, ИдентификаторФормы);
	
	МассивФайлов = Новый Массив;   
	Для Каждого КлючИЗначение Из ДанныеДоверенностей Цикл
		
		Значение = КлючИЗначение.Значение;        
		
		Если ИспользованныеМЧД.Получить(Значение.ДоверенностьСсылка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	  
		
		Если Не ЗначениеЗаполнено(Значение.АдресДанныхВыгрузкиДоверенности) Тогда
			Продолжить;
		КонецЕсли;	  

		МЧДДанные = ПолучитьИзВременногоХранилища(Значение.АдресДанныхВыгрузкиДоверенности);
		
		СтруктураФайла = Новый Структура("Адрес, Представление, Размер",
			МЧДДанные.АдресДанных, МЧДДанные.ИмяФайла);
			
		ДвДанные = ПолучитьИзВременногоХранилища(МЧДДанные.АдресДанных);	
		СтруктураФайла.Размер = ДвДанные.Размер();
			
		МассивФайлов.Добавить(СтруктураФайла);
		ИспользованныеМЧД.Вставить(Значение.ДоверенностьСсылка, 1);
		
	КонецЦикла;	
	
	Возврат МассивФайлов;
	
КонецФункции	

Функция ДанныеДоверенностейКоллекцииПодписей(КоллекцияПодписей, ИдентификаторФормы)
	
	ИдентификаторыПодписей = Новый Массив;
	Для Каждого СвойстваПодписи Из КоллекцияПодписей Цикл
		ИдентификаторыПодписей.Добавить(СвойстваПодписи.ИдентификаторПодписи);
	КонецЦикла;
	
	ДанныеДоверенностей = РаботаСЭП.ДанныеДоверенностейПодписей(ИдентификаторыПодписей);
	
	Доверенности = Новый Массив;
	Для Каждого Элемент Из ДанныеДоверенностей Цикл
		ДанныеДоверенности = Элемент.Значение;
		Доверенности.Добавить(ДанныеДоверенности.Доверенность);
	КонецЦикла;
	
	Доверенности = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Доверенности);
	
	ДанныеДляВыгрузки = РаботаСЭП.ДанныеДоверенностейДляВыгрузки(Доверенности, ИдентификаторФормы);
	
	ДанныеДоверенностейКоллекции = Новый Соответствие;
	
	Для Каждого СвойстваПодписи Из КоллекцияПодписей Цикл
		
		ИдентификаторПопдиси = СвойстваПодписи.ИдентификаторПодписи;
		
		ДанныеДоверенностиКоллекции = Новый Структура;
		ДанныеДоверенностиКоллекции.Вставить("ДоверенностьСсылка", Неопределено);
		ДанныеДоверенностиКоллекции.Вставить("ДоверенностьПредставление", "");
		ДанныеДоверенностиКоллекции.Вставить("АдресДанныхВыгрузкиДоверенности", "");
		
		ДанныеДоверенности = ДанныеДоверенностей[ИдентификаторПопдиси];
		Если ДанныеДоверенности <> Неопределено Тогда
			
			Доверенность = ДанныеДоверенности.Доверенность;
			
			ДанныеДоверенностиКоллекции.ДоверенностьСсылка = Доверенность;
			ДанныеДоверенностиКоллекции.ДоверенностьПредставление = Строка(Доверенность);
			
			ДанныеВыгрузки = ДанныеДляВыгрузки[Доверенность];
			ДанныеДоверенностиКоллекции.АдресДанныхВыгрузкиДоверенности = ПоместитьВоВременноеХранилище(
				ДанныеВыгрузки, ИдентификаторФормы);
			
		КонецЕсли;
		
		ДанныеДоверенностейКоллекции.Вставить(ИдентификаторПопдиси, ДанныеДоверенностиКоллекции);
		
	КонецЦикла;
	
	Возврат ДанныеДоверенностейКоллекции;
	
КонецФункции

// Представления МЧД при подписании.
// 
// Параметры:
//  МЧД - Массив Из ОпределяемыйТип.МашиночитаемаяДоверенность
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - ОпределяемыйТип.МашиночитаемаяДоверенность
//    * Значение - Строка
Функция ПредставленияМЧДПриПодписании(МЧД) Экспорт
	
	ДанныеДоверителей = РаботаСМЧДДокументооборот.ДанныеДоверителейМЧД(МЧД);
	
	ПредставленияДоверенностей = Новый Соответствие();
	Для Каждого Доверенность Из МЧД Цикл
		
		ДанныеДоверителейДоверенности = ДанныеДоверителей[Доверенность];
		ПредставлениеДоверителя = РаботаСМЧДДокументооборот.ПредставлениеДоверителейМЧД(ДанныеДоверителейДоверенности);
		
		ПредставленияДоверенностей[Доверенность] = СтрШаблон(НСтр("ru = 'По доверенности %1 (от имени %2)'"),
			Доверенность, ПредставлениеДоверителя);
		
	КонецЦикла;
	
	Возврат ПредставленияДоверенностей;
	
КонецФункции

#КонецОбласти

#Область ПолучениеСертификатовИзПодписи

// Получает сертификаты из подписей (использование криптопровайдера на сервере).
// 
// Параметры:
// ПодписиБезСертификатов - Соответствие Из КлючИЗначение:
//   * Ключ - УникальныйИдентификатор - Идентификатор подписи
//   * Значение - Строка - Адрес двоичных данных подписи во временном хранилище
// ИдентификаторФормы - УникальныйИдентификатор - Идентификатор формы для помещения данных во временное хранилище
// 
// Возвращаемое значение:
//  Структура:
// * ДанныеСертификатовПоПодписям - Соответствие Из КлючИЗначение:
//   ** Ключ - УникальныйИдентификатор - Идентификатор подписи
//   ** Значение - см. РаботаСЭПКлиентСервер.НовыйРезультатПолученияДанныхСертификатаИзПодписи
// * ОшибкиПриПолученииСертификатов - Соответствие Из КлючИЗначение:
//   ** Ключ - УникальныйИдентификатор - Идентификатор подписи
//   ** Значение - Строка - Описание ошибки при получении сертификата из подписи
Функция ПолучитьСертификатыИзПодписейНаСервере(ПодписиБезСертификатов, ИдентификаторФормы = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеСертификатовПоПодписям", Новый Соответствие);
	Результат.Вставить("ОшибкиПриПолученииСертификатов", Новый Соответствие);
	
	Для Каждого Элемент Из ПодписиБезСертификатов Цикл
		
		ИдентификаторПодписи = Элемент.Ключ;
		АдресДанныхПодписи = Элемент.Значение;
		
		РезультатДляПодписи = ПолучитьДанныеСертификатаИзПодписи(АдресДанныхПодписи, ИдентификаторФормы);
		
		Если РезультатДляПодписи.Успех Тогда
			Результат.ДанныеСертификатовПоПодписям.Вставить(
				ИдентификаторПодписи, РезультатДляПодписи.ДанныеСертификата);
		Иначе
			Результат.ОшибкиПриПолученииСертификатов.Вставить(
				ИдентификаторПодписи, РезультатДляПодписи.ОписаниеОшибки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Заносит в регистр сведений ЭП данные о сертификатах
// 
// Параметры:
//  ДанныеСертификатовПоПодписям - Соответствие Из КлючИЗначение:
//    * Ключ - УникальныйИдентификатор - Идентификатор подписи
//    * Значение - см. РаботаСЭПКлиентСервер.НовыйРезультатПолученияДанныхСертификатаИзПодписи
//
Процедура ЗанестиДанныеСертификатовПодписей(ДанныеСертификатовПоПодписям) Экспорт
	
	ИдентификаторыПодписей = Новый Массив(); // Массив Из УникальныйИдентификатор
	
	Для Каждого Элемент Из ДанныеСертификатовПоПодписям Цикл
		ИдентификаторПодписи = Элемент.Ключ;
		ИдентификаторыПодписей.Добавить(ИдентификаторПодписи);
	КонецЦикла;
	
	КлючиЗаписейРегистра = КлючиРегистраПодписейПоИдентификаторамПодписей(ИдентификаторыПодписей);
	
	Для Каждого Элемент Из ДанныеСертификатовПоПодписям Цикл
		
		ИдентификаторПодписи = Элемент.Ключ;
		ДанныеСертификата = Элемент.Значение;
		
		КлючРегистра = КлючиЗаписейРегистра[ИдентификаторПодписи];
		
		Если КлючРегистра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗанестиДанныеСертификатаПодписи(КлючРегистра, ДанныеСертификата);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Возвращает ссылку, по которой открывается форма ЭП, если объект не подписан, то возвращает пустую строку
//
// Параметры:
//   Объект - ОпределяемыйТип.ПодписанныйОбъект
//
// Возвращаемое значение:
//   Строка - ссылка, по которой открывается форма ЭП
Функция СсылкаНаФормуЭПОбъекта(Объект) Экспорт
	
	ЗапросЭлектронныеПодписи = Новый Запрос(
	"ВЫБРАТЬ
	|	ЭлектронныеПодписи.ИдентификаторПодписи КАК УникальныйИдентификатор
	|ИЗ
	|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
	|ГДЕ
	|	ЭлектронныеПодписи.ПодписанныйОбъект = &Объект");
	ЗапросЭлектронныеПодписи.УстановитьПараметр("Объект", Объект);
	Выборка = ЗапросЭлектронныеПодписи.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат СтрШаблон("v8doc:MXLDetails/ShowESRecord/%1", Выборка.УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Возвращает соответствие следующих номеров подписей объектов
// 
// Параметры:
//  ПодписанныеОбъекты - Массив Из ОпределяемыйТип.ПодписанныйОбъект
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - ОпределяемыйТип.ПодписанныйОбъект
//    * Значение - Число
Функция СледующиеНомераПодписейОбъектов(ПодписанныеОбъекты) Экспорт
	
	СледующиеНомераОбъектов = Новый Соответствие();
	Для Каждого Объект Из ПодписанныеОбъекты Цикл
		СледующиеНомераОбъектов[Объект] = 1;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныеПодписи.ПодписанныйОбъект КАК ПодписанныйОбъект,
		|	МАКСИМУМ(ЭлектронныеПодписи.ПорядковыйНомер) КАК ПорядковыйНомер
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|ГДЕ
		|	ЭлектронныеПодписи.ПодписанныйОбъект В (&ПодписанныеОбъекты)
		|СГРУППИРОВАТЬ ПО
		|	ЭлектронныеПодписи.ПодписанныйОбъект";
	Запрос.УстановитьПараметр("ПодписанныеОбъекты", ПодписанныеОбъекты);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СледующиеНомераОбъектов[Выборка.ПодписанныйОбъект] = Выборка.ПорядковыйНомер + 1;
	КонецЦикла;
	
	Возврат СледующиеНомераОбъектов;
	
КонецФункции

#Область РаботаСУсовершенсвованнымиЭП

// Возвращает данные подписей для усовершенствования
// 
// Параметры:
//  ИдентификаторыПодписей - Массив из УникальныйИдентификатор - 
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - УникальныйИдентификатор
//    * Значение - см. РаботаСЭПКлиентСервер.НовыеДанныеПодписиДляУсовершенствования
Функция ДанныеПодписейДляУсовершенствованияПоИдентификаторам(ИдентификаторыПодписей) Экспорт
	
	ДанныеПодписей = Новый Соответствие();
	Для Каждого Идентификатор Из ИдентификаторыПодписей Цикл
		ДанныеПодписей[Идентификатор] = РаботаСЭПКлиентСервер.НовыеДанныеПодписиДляУсовершенствования();
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныеПодписи.ПодписанныйОбъект КАК ПодписанныйОбъект,
		|	ЭлектронныеПодписи.ПорядковыйНомер КАК ПорядковыйНомер,
		|	ЭлектронныеПодписи.ТипПодписи КАК ТипПодписи,
		|	ЭлектронныеПодписи.ИдентификаторПодписи КАК ИдентификаторПодписи
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|ГДЕ
		|	ЭлектронныеПодписи.ИдентификаторПодписи В (&ИдентификаторыПодписей)";
	
	Запрос.УстановитьПараметр("ИдентификаторыПодписей", ИдентификаторыПодписей);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПодписанныеОбъекты = Новый Массив();
	Пока Выборка.Следующий() Цикл
		ДанныеПодписи = ДанныеПодписей[Выборка.ИдентификаторПодписи];
		ЗаполнитьЗначенияСвойств(ДанныеПодписи, Выборка);
		ПодписанныеОбъекты.Добавить(Выборка.ПодписанныйОбъект);
	КонецЦикла;
	
	СтатусыРаботыПоОбъектам = СтатусыРаботыПоПодписаннымОбъектам(ПодписанныеОбъекты);
	Для Каждого Идентификатор Из ИдентификаторыПодписей Цикл
		
		ДанныеПодписи = ДанныеПодписей[Идентификатор]; // см. РаботаСЭПКлиентСервер.НовыеДанныеПодписиДляУсовершенствования
		ПодписанныйОбъект = ДанныеПодписи.ПодписанныйОбъект;
		СтатусОбъекта = СтатусыРаботыПоОбъектам[ПодписанныйОбъект];
		Если ЗначениеЗаполнено(СтатусОбъекта) Тогда
			ДанныеПодписи.СтатусРаботы = СтатусОбъекта;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеПодписей;
	
КонецФункции

#КонецОбласти

// Запишет в РС ЭлектронныеПодписи ЭП по файлу
// 
// Параметры:
// НовыйФайл - СправочникССылка.Файлы - ссылка на свежесозданный файл
// ФайлыЭП - ТаблицаЗначений - таблица с ЭП, где найдем ЭП именно к этому файлу
// АдресФайлаСтрока - Строка - Адрес во временном хранилище этого файла (по этому адресу найдем ЭП)
// Форма - ФормаКлиентскогоПриложения - Форма документа или мероприятия
// 
Процедура ЗаписатьЭПФайлу(НовыйФайл, ФайлыЭП, АдресФайлаСтрока, Форма) Экспорт
	
	Если ФайлыЭП.Количество() <> 0 И ЗначениеЗаполнено(АдресФайлаСтрока) Тогда
		
		МассивДанныхОПодписях = Новый Массив; 
		
		Для Каждого ЭПСтрока Из ФайлыЭП Цикл
			
			Если ЭПСтрока.АдресФайла <> АдресФайлаСтрока Тогда
				Продолжить;
			КонецЕсли;
			
			ЭПДвоичныеДанные = ПолучитьИзВременногоХранилища(ЭПСтрока.Адрес);
			ЭПИнфо = Новый Структура;
			ЭПИнфо.Вставить("ПодписанныйОбъект", НовыйФайл);
			ЭПИнфоСвойства = Новый Структура;
			ЭПИнфоСвойства.Вставить("ОбъектСсылка", НовыйФайл);
			ЭПИнфоСвойства.Вставить("Подпись", ЭПДвоичныеДанные);
			ЭПИнфоСвойства.Вставить("ДатаПодписи", "");
			ЭПИнфоСвойства.Вставить("Комментарий", "");
			ЭПИнфоСвойства.Вставить("ИмяФайлаПодписи", ЭПСтрока.Имя);
			Если Не ПустаяСтрока(ЭПСтрока.АдресСертификата) Тогда
				СертификатДвоичныеДанные = ПолучитьИзВременногоХранилища(ЭПСтрока.АдресСертификата);
				ЭПИнфоСвойства.Вставить("Отпечаток", ЭПСтрока.Отпечаток);
				ЭПИнфоСвойства.Вставить("Сертификат", СертификатДвоичныеДанные);
				ЭПИнфоСвойства.Вставить("КомуВыданСертификат", ЭПСтрока.КомуВыданСертификат);
			Иначе
				ЭПИнфоСвойства.Вставить("Отпечаток", "");
				ЭПИнфоСвойства.Вставить("Сертификат", Неопределено);
				ЭПИнфоСвойства.Вставить("КомуВыданСертификат", "");
			КонецЕсли;
			ЭПИнфоСвойства.Вставить("АдресФайла", "");
			
			ЭПИнфоСвойства.Вставить("ПодписьВерна",                   ЭПСтрока.ПодписьВерна);
			ЭПИнфоСвойства.Вставить("СертификатДействителен",         ЭПСтрока.СертификатДействителен);
			ЭПИнфоСвойства.Вставить("ТекстОшибкиПроверкиПодписи",     ЭПСтрока.ТекстОшибкиПроверкиПодписи);
			ЭПИнфоСвойства.Вставить("ТекстОшибкиПроверкиСертификата", ЭПСтрока.ТекстОшибкиПроверкиСертификата);
			ЭПИнфоСвойства.Вставить("ПодписьЗагруженаИзФайла",        ЭПСтрока.ПодписьЗагруженаИзФайла);
			
			ЭПИнфо.Вставить("СвойстваПодписи", ЭПИнфоСвойства);
			МассивДанныхОПодписях.Добавить(ЭПИнфо);
		КонецЦикла;    
		
		Если МассивДанныхОПодписях.Количество() > 0 Тогда
			РаботаСЭП.ЗанестиИнформациюОПодписях(МассивДанныхОПодписях, Форма.УникальныйИдентификатор);
			Форма.ЗаполнитьСписокПодписей();
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры	

// Заполнит ФайлыДвоичныеДанные по ФайлыДобавленные. Нужно для проверки подписей
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма документа или мероприятия
// 
Процедура ЗаполнитьСписокФайловИзВложений(Форма) Экспорт
	
	Для Каждого СтрФайл Из Форма.ФайлыДобавленные Цикл  
		
		Если ЗначениеЗаполнено(СтрФайл.Адрес) Тогда  // из легкой почты
			
			Форма.ФайлыДвоичныеДанные.Добавить(ПолучитьИзВременногоХранилища(СтрФайл.Адрес), СтрФайл.Адрес);
			
		ИначеЕсли ЗначениеЗаполнено(СтрФайл.ПолныйПуть) Тогда // из встроенной почты
			
			ДанныеФайла = ПолучитьИзВременногоХранилища(СтрФайл.ПолныйПуть);
			Источник = ДанныеФайла.Ссылка;
			СсылкаНаВерсиюИсточник = Источник.ТекущаяВерсия;
			
			ДвДанные = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеВерсииФайла(СсылкаНаВерсиюИсточник);
			
			Форма.ФайлыДвоичныеДанные.Добавить(ДвДанные, СтрФайл.ПолныйПуть);
			
		КонецЕсли;	   
		
	КонецЦикла;	
	
КонецПроцедуры

// Вернет массив структур файлов для проверки ЭП
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма документа или мероприятия
// 
// Возвращаемое значение:
//  Массив из Структура
Функция СписокФайлов(Форма) Экспорт
	
	СписокФайлов = Новый Массив;

	Для Каждого СтрФайл Из Форма.ФайлыДобавленные Цикл  
		
		Индекс = Форма.ФайлыДобавленные.Индекс(СтрФайл);
		СтруктураФайла = Новый Структура("Адрес, Наименование, Расширение, АдресДляПроверки, АдресСертификата");
		
		ЗаполнитьЗначенияСвойств(СтруктураФайла, СтрФайл);
		СтруктураФайла.АдресДляПроверки = СтрФайл.Адрес;
		
		Если Не ЗначениеЗаполнено(СтрФайл.Адрес) И ЗначениеЗаполнено(СтрФайл.ПолныйПуть) Тогда
			
			СтруктураФайла.Адрес = СтрФайл.ПолныйПуть; // для поиска потом ЭП - к какому файлу
			
			ДанныеФайла = ПолучитьИзВременногоХранилища(СтрФайл.ПолныйПуть);
			Источник = ДанныеФайла.Ссылка;
			СсылкаНаВерсиюИсточник = Источник.ТекущаяВерсия;
			
			ДвДанные = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеВерсииФайла(СсылкаНаВерсиюИсточник);
			СтруктураФайла.АдресДляПроверки = ПоместитьВоВременноеХранилище(ДвДанные, Форма.УникальныйИдентификатор);
			
		КонецЕсли;	   

		Если Форма.ПроверятьЭлектронныеПодписиНаСервере И РаботаСЭПКлиентСервер.ЭтоФайлПодписи(СтруктураФайла.Расширение) Тогда 
			ПодписиБезСертификатов = Новый Соответствие;
			ПодписиБезСертификатов.Вставить(Новый УникальныйИдентификатор, СтруктураФайла.АдресДляПроверки);
			РезультатПолучения = РаботаСЭП.ПолучитьСертификатыИзПодписейНаСервере(ПодписиБезСертификатов, Форма.УникальныйИдентификатор);
			
			Если РезультатПолучения.ДанныеСертификатовПоПодписям.Количество() = 1 Тогда
				Для Каждого КлючИЗначение Из РезультатПолучения.ДанныеСертификатовПоПодписям Цикл
					СтруктураФайла.АдресСертификата = КлючИЗначение.Значение.АдресСертификата;
				КонецЦикла;	
			КонецЕсли;	
			
		КонецЕсли;
		
		СписокФайлов.Добавить(СтруктураФайла);
		
	КонецЦикла;	  
	
	Возврат СписокФайлов;
	
КонецФункции	

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиОбновления

Процедура ОбновитьРегистрЭлектронныхПодписей_3_0_14() Экспорт
	
	НаборЗаписей = РегистрыСведений.ЭлектронныеПодписи.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	ТекущиеНомераПодписей = Новый Соответствие;
	
	НаборЗаписейКУдалению = Новый Массив(); // Массив Из РегистрСведенийЗапись.ЭлектронныеПодписи
	
	Для Каждого Запись Из НаборЗаписей Цикл
		
		Если ЗначениеЗаполнено(Запись.ИдентификаторПодписи) Тогда
			Продолжить;
		КонецЕсли;
		
		ПодписанныйОбъект = Запись.УдалитьОбъект;
		
		Если Не ЗначениеЗаполнено(ПодписанныйОбъект)
			Или Не ЗначениеЗаполнено(Запись.УдалитьУникальныйИдентификатор) Тогда
			НаборЗаписейКУдалению.Добавить(Запись);
			Продолжить;
		КонецЕсли;
		
		ТекущийНомер = ТекущиеНомераПодписей[ПодписанныйОбъект];
		Если ТекущийНомер = Неопределено Тогда
			ТекущийНомер = 0;
		КонецЕсли;
		ТекущийНомер = ТекущийНомер + 1;
		
		Запись.ПодписанныйОбъект = ПодписанныйОбъект;
		Запись.ПорядковыйНомер = ТекущийНомер;
		Запись.ДатаПодписи = Запись.УдалитьДатаПодписи;
		Запись.УстановившийПодпись = Запись.УдалитьУстановившийПодпись;
		Запись.ИдентификаторПодписи = Запись.УдалитьУникальныйИдентификатор;
		
		Запись.УдалитьУникальныйИдентификатор = УникальныйИдентификаторПустой();
		Запись.УдалитьДатаПодписи = Дата(1, 1, 1);
		Запись.УдалитьУстановившийПодпись = Справочники.Пользователи.ПустаяСсылка();
		Запись.УдалитьОбъект = Неопределено;
		
		ТекущиеНомераПодписей[ПодписанныйОбъект] = ТекущийНомер;
		
	КонецЦикла;
	
	Для Каждого Запись Из НаборЗаписейКУдалению Цикл
		НаборЗаписей.Удалить(Запись);
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает настройки текущего пользователя для работы с электронной подписью.
//
// Возвращаемое значение:
//   ПерсональныеНастройки (Структура)
//       |- ДействияПриСохраненииСЭП (Строка)
//       |- ПутьМодуляКриптографии (Строка)
//       |- РасширениеДляФайловПодписи (Строка)
//       |- РасширениеДляЗашифрованныхФайлов (Строка)
//       |- ОтпечатокЛичногоСертификатаДляШифрования (Строка)
//
Функция ПерсональныеНастройки(ТолькоЗначенияПоУмолчанию = Ложь) Экспорт
	
	ПерсональныеНастройки = Новый Структура;
	
	// Значения "по умолчанию".
	ПерсональныеНастройки.Вставить("ДействияПриСохраненииСЭП", Перечисления.ДействияПриСохраненииСЭП.Спрашивать);
	ПерсональныеНастройки.Вставить("ПутьМодуляКриптографии", "");
	ПерсональныеНастройки.Вставить("РасширениеДляФайловПодписи", "p7s");
	ПерсональныеНастройки.Вставить("РасширениеДляЗашифрованныхФайлов", "p7m");
	ПерсональныеНастройки.Вставить("ОтпечатокЛичногоСертификатаДляШифрования", "");
	
	Если ТолькоЗначенияПоУмолчанию Тогда
		Возврат ПерсональныеНастройки;
	КонецЕсли;
	
	КлючПодсистемы = "ЭП";
	
	Для Каждого КлючИЗначение Из ПерсональныеНастройки Цикл
		СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючПодсистемы, КлючИЗначение.Ключ);
		Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
			ПерсональныеНастройки.Вставить(КлючИЗначение.Ключ, СохраненноеЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Если ПерсональныеНастройки.ДействияПриСохраненииСЭП = Перечисления.ДействияПриСохраненииСЭП.Спрашивать Тогда
		ПерсональныеНастройки.ДействияПриСохраненииСЭП = "Спрашивать";
	ИначеЕсли ПерсональныеНастройки.ДействияПриСохраненииСЭП = Перечисления.ДействияПриСохраненииСЭП.СохранятьВсеПодписи Тогда
		ПерсональныеНастройки.ДействияПриСохраненииСЭП = "СохранятьВсеПодписи";
	КонецЕсли;
	
	Возврат ПерсональныеНастройки;
	
КонецФункции

Функция ПолучитьДанныеОбъектаСтрокой(Объект, Имя)
	
	СтроковоеПредставлениеОбъекта = "";
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	ЗаписатьXML(ЗаписьXML, Объект, Имя, НазначениеТипаXML.Явное); 
	
	СтроковоеПредставлениеОбъекта = ЗаписьXML.Закрыть();
	
	Возврат СтроковоеПредставлениеОбъекта;
	
КонецФункции

// Добавляет ЭП из сообщения почты.
//
Процедура ДобавитьЭПИзСообщения(ОбъектСсылка, МассивФайловПодписей) Экспорт
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	МассивДанныхДляЗанесенияВБазу = Новый Массив;
	
	Для Каждого ОбъектДляПодписи Из МассивФайловПодписей Цикл
		
		НоваяПодписьДвоичныеДанные = ОбъектДляПодписи.ДвоичныеДанные;
		ИмяФайлаПодписи = ОбъектДляПодписи.Имя;
		
		ОбъектСсылкаДляПодписи = ОбъектСсылка;
		
		Отпечаток = ОбъектДляПодписи.Отпечаток;
		КомуВыданСертификат = ОбъектДляПодписи.КомуВыданСертификат;
		
		ДвоичныеДанныеСертификата = ОбъектДляПодписи.ДвоичныеДанныеСертификата;
		
		ДанныеДляЗанесенияВБазу = Новый Структура;
		ДанныеДляЗанесенияВБазу.Вставить("ПодписанныйОбъект", ОбъектСсылкаДляПодписи);
		
		СвойстваПодписи = Новый Структура;
		СвойстваПодписи.Вставить("Подпись", НоваяПодписьДвоичныеДанные);
		СвойстваПодписи.Вставить("Отпечаток", Отпечаток);
		СвойстваПодписи.Вставить("ДатаПодписи", ДатаПодписи);
		СвойстваПодписи.Вставить("Комментарий", "");
		СвойстваПодписи.Вставить("КомуВыданСертификат", КомуВыданСертификат);
		СвойстваПодписи.Вставить("Сертификат", ДвоичныеДанныеСертификата);
		
		ДанныеДляЗанесенияВБазу.Вставить("СвойстваПодписи", СвойстваПодписи);
		
		МассивДанныхДляЗанесенияВБазу.Добавить(ДанныеДляЗанесенияВБазу);
		
	КонецЦикла;
	
	МассивАдресов = Новый Массив;
	ЗанестиИнформациюОПодписях(МассивДанныхДляЗанесенияВБазу);
	
КонецПроцедуры

Процедура ОбновитьФайлПередЗанесениемПодписи(ПодписанныйОбъект, СвойстваПодписи)
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайла(ПодписанныйОбъект);
	
	АдресНовыхДанных = ПоместитьВоВременноеХранилище(СвойстваПодписи.ИзмененныеДанные);
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	СведенияОФайле.АдресВременногоХранилищаФайла = АдресНовыхДанных;
	СведенияОФайле.ИмяБезРасширения = ДанныеФайла.ПолноеНаименованиеВерсии;
	СведенияОФайле.РасширениеБезТочки = ДанныеФайла.Расширение;
	СведенияОФайле.ВремяИзменения = ТекущаяДатаСеанса();
	СведенияОФайле.ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
	СведенияОФайле.Комментарий = СвойстваПодписи.ПричинаИзмененияДанных;
	
	НоваяВерсия = РаботаСФайламиСлужебныйВызовСервера.ОбновитьВерсиюФайла(ПодписанныйОбъект, СведенияОФайле);
	РаботаСФайламиСлужебныйВызовСервера.ОбновитьВерсиюВФайле(ПодписанныйОбъект, НоваяВерсия, );
	
КонецПроцедуры

// Вернет ИдентификаторПодписи подписи
// 
// Параметры:
//  ПодписанныйОбъект - ОпределяемыйТип.ПодписанныйОбъект
//  ПорядковыйНомер - Число
// 
// Возвращаемое значение:
//  УникальныйИдентификатор
Функция ИдентификаторПодписи(ПодписанныйОбъект, ПорядковыйНомер) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭП.ИдентификаторПодписи КАК ИдентификаторПодписи
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
		|ГДЕ
		|	ЭП.ПодписанныйОбъект = &ПодписанныйОбъект
		|	И ЭП.ПорядковыйНомер = &ПорядковыйНомер";
	
	Запрос.Параметры.Вставить("ПодписанныйОбъект", ПодписанныйОбъект); 
	Запрос.Параметры.Вставить("ПорядковыйНомер",   ПорядковыйНомер); 
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.ИдентификаторПодписи;
	
КонецФункции	

#Область ФормированиеНабораКлючевыхРеквизитов

Функция ПараметрыФормированияНабораВажныхПолей(Версия, ДополнительныеПараметры)
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("Версия", ?(ЗначениеЗаполнено(Версия), Версия, АктуальнаяВерсияПодписи()));
	ПараметрыФормирования.Вставить("ИсключаемыеРеквизиты", Новый Соответствие);
	ПараметрыФормирования.Вставить("ДанныеПодписанта", Неопределено);
	ПараметрыФормирования.Вставить("ОсобыеДанныеПодписания", Новый Соответствие);
	ПараметрыФормирования.Вставить("ЗаполнятьФормализованныеФайлыЭДО", Ложь);
	ПараметрыФормирования.Вставить("ДанныеЗаполненияФормализованногоЭДО",
		ФорматыЭДОДокументооборотКлиентСервер.НовыеДанныеДляЗаполненияФормализованногоДокумента());
	ПараметрыФормирования.Вставить("РеквизитОрганизацияНеЗаполнен", Ложь);
	ПараметрыФормирования.Вставить("ПодписалПользователь", Ложь);
	ПараметрыФормирования.Вставить("РасшифрованныеДанные", Новый Соответствие);
	ПараметрыФормирования.Вставить("ДоверенностиПриПодписании", Новый Массив);
	ПараметрыФормирования.Вставить("ВнешнееПодписание", Ложь);
	ПараметрыФормирования.Вставить("ТипСервисаВнешнегоПодписания", Неопределено);
	
	Если ТипЗнч(ДополнительныеПараметры) <> Тип("Структура") Тогда
		Возврат ПараметрыФормирования;
	КонецЕсли;
	
	ПараметрыФормирования.ИсключаемыеРеквизиты = ИсключаемыеРеквизитыНабораВажныхПолей(ДополнительныеПараметры);
	ПараметрыФормирования.ДанныеПодписанта = ДанныеПодписантаДляНабораВажныхПолей(ДополнительныеПараметры);
	ПараметрыФормирования.ОсобыеДанныеПодписания = ОсобыеДанныеПодписанияДляНабораВажныхПолей(ДополнительныеПараметры);
	
	Если ДополнительныеПараметры.Свойство("ЗаполнятьФормализованныйЭДО")
		И ДополнительныеПараметры.ЗаполнятьФормализованныйЭДО = Истина Тогда
		
		ПараметрыФормирования.ЗаполнятьФормализованныеФайлыЭДО = Истина;
		ПараметрыФормирования.ДанныеЗаполненияФормализованногоЭДО =
			ДополнительныеПараметры.ДанныеЗаполненияФормализованногоЭДО;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("РеквизитОрганизацияНеЗаполнен")
		И ДополнительныеПараметры.РеквизитОрганизацияНеЗаполнен = Истина Тогда
		
		ПараметрыФормирования.РеквизитОрганизацияНеЗаполнен = Истина;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ПодписалПользователь")
		И ДополнительныеПараметры.ПодписалПользователь = Истина Тогда
		
		ПараметрыФормирования.ПодписалПользователь = Истина;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("РасшифрованныеДанные")
		И ТипЗнч(ДополнительныеПараметры.РасшифрованныеДанные) = Тип("Соответствие") Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
			ПараметрыФормирования.РасшифрованныеДанные,
			ДополнительныеПараметры.РасшифрованныеДанные);
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ВнешнееПодписание")
		И ДополнительныеПараметры.ВнешнееПодписание = Истина Тогда
		
		ПараметрыФормирования.ВнешнееПодписание = Истина;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ТипСервисаВнешнегоПодписания")
		И ЗначениеЗаполнено(ДополнительныеПараметры.ТипСервисаВнешнегоПодписания) Тогда
		
		ПараметрыФормирования.ТипСервисаВнешнегоПодписания = ДополнительныеПараметры.ТипСервисаВнешнегоПодписания;
	КонецЕсли;
	
	Возврат ПараметрыФормирования;
	
КонецФункции

Функция ИсключаемыеРеквизитыНабораВажныхПолей(ДополнительныеПараметры)
	
	ИсключаемыеРеквизиты = Новый Соответствие;
	
	Если ДополнительныеПараметры.Свойство("ИсключаемыеКлючевыеРеквизиты")
		И ТипЗнч(ДополнительныеПараметры.ИсключаемыеКлючевыеРеквизиты) = Тип("Массив") Тогда
		
		Для Каждого ИмяРеквизита Из ДополнительныеПараметры.ИсключаемыеКлючевыеРеквизиты Цикл
			ИсключаемыеРеквизиты.Вставить(ИмяРеквизита, Истина);
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат ИсключаемыеРеквизиты;
	
КонецФункции

Функция ДанныеПодписантаДляНабораВажныхПолей(ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.Свойство("ДанныеПодписанта") Тогда
		
		Возврат ДополнительныеПараметры.ДанныеПодписанта;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОсобыеДанныеПодписанияДляНабораВажныхПолей(ДополнительныеПараметры)
	
	ДанныеПодписания = Новый Соответствие;
	
	Если ДополнительныеПараметры.Свойство("ОсобыеДанныеПодписания")
		И ТипЗнч(ДополнительныеПараметры.ОсобыеДанныеПодписания) = Тип("Массив") Тогда
		
		ОсобыеДанныеПодписания = ДополнительныеПараметры.ОсобыеДанныеПодписания;
		
		Для Каждого Элемент Из ОсобыеДанныеПодписания Цикл
			ДанныеСтроки = Новый Структура("Подписал, Подписан, ДатаПодписи");
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, Элемент);
			ДанныеПодписания.Вставить(Элемент.НомерСтроки, ДанныеСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеПодписания;
	
КонецФункции

Процедура ДобавитьЗаписьПоляОбъектаВНаборВажныхПолей(Объект, ИмяПоля, МассивПолей, ПараметрыФормирования)
	
	Если ИмяПоля = "Файлы" Тогда
		ДобавитьПоляФайловВНаборВажныхПолей(Объект, МассивПолей, ПараметрыФормирования);
		Возврат;
	КонецЕсли;
	
	Если ИмяПоля = "ВерсииФайлов" Тогда
		ДобавитьПоляВерсииФайловВНаборВажныхПолей(Объект, МассивПолей, ПараметрыФормирования);
		Возврат;
	КонецЕсли;
	
	Если ИмяПоля = "Организация"
		И ПараметрыФормирования.РеквизитОрганизацияНеЗаполнен Тогда
		
		ДобавитьПустуюОрганизациюВНаборВажныхПолей(МассивПолей);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("Структура") Тогда
		ЗначениеПоля = Объект[ИмяПоля];
	Иначе
		ЗначениеПоля = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, ИмяПоля);
	КонецЕсли;
	
	СтрокаЗначения = ПолучитьДанныеОбъектаСтрокой(
		ЗначениеПоля, ИмяПоля);
	МассивПолей.Добавить(СтрокаЗначения);
	
КонецПроцедуры

Процедура ДобавитьПоляФайловВНаборВажныхПолей(Объект, МассивПолей, ПараметрыФормирования)
	
	МассивФайлов = Делопроизводство.ПолучитьФайлыДокументаДляПодписания(Объект);
	
	ВнешнееПодписание = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыФормирования, "ВнешнееПодписание", Ложь);
	ТипСервисаВнешнегоПодписания = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыФормирования, "ТипСервисаВнешнегоПодписания", Неопределено);
	
	Если ТипСервисаВнешнегоПодписания <> Перечисления.ТипыСервисовВнешнегоПодписания.КабинетСотрудника Тогда
		ВнешнееПодписание = Ложь;
	КонецЕсли;
	
	МинимальнаяВерсияХешированияФайлов = 3;
	
	НомерЯчейки = 1;
	Для Каждого ФайлСсылка Из МассивФайлов Цикл
		
		Если ПараметрыФормирования.Версия >= МинимальнаяВерсияХешированияФайлов Или ВнешнееПодписание Тогда
			
			Если ВнешнееПодписание Тогда
				ХешДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
			Иначе
				ХешДанных = Новый ХешированиеДанных(ХешФункция.CRC32);
			КонецЕсли;
			
			ДвоичныеДанные = ДвоичныеДанныеФайлаДляПодписанияДокумента(ФайлСсылка, ПараметрыФормирования);
			
			ХешДанных.Добавить(ДвоичныеДанные);
			ЗначениеПоля = ХешДанных.ХешСумма;
		Иначе
			ЗначениеПоля = ФайлСсылка;
		КонецЕсли;
		
		Если ВнешнееПодписание Тогда
			ИмяЯчейки = "Файл-" + Строка(ФайлСсылка.УникальныйИдентификатор());
		Иначе
			ИмяЯчейки = "Файл" + Формат(НомерЯчейки, "ЧГ=0;");
		КонецЕсли;
		СтрокаЗначения = ПолучитьДанныеОбъектаСтрокой(ЗначениеПоля, ИмяЯчейки);
		МассивПолей.Добавить(СтрокаЗначения);
		НомерЯчейки = НомерЯчейки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДвоичныеДанныеФайлаДляПодписанияДокумента(ФайлСсылка, ПараметрыФормирования)
	
	ДанныеФайлаИДвоичныеДанные = РаботаСФайламиВызовСервера.ДанныеФайлаИДвоичныеДанные(ФайлСсылка);
	
	Если Не ПараметрыФормирования.ЗаполнятьФормализованныеФайлыЭДО Тогда
		
		ТекущаяВерсия = ДанныеФайлаИДвоичныеДанные.ДанныеФайла.ТекущаяВерсия;
		РасшифрованныеДанные = ПараметрыФормирования.РасшифрованныеДанные;
		
		Если РасшифрованныеДанные[ФайлСсылка] <> Неопределено Тогда
			Возврат ПолучитьИзВременногоХранилища(РасшифрованныеДанные[ФайлСсылка]);
		ИначеЕсли РасшифрованныеДанные[ТекущаяВерсия] <> Неопределено Тогда
			Возврат ПолучитьИзВременногоХранилища(РасшифрованныеДанные[ТекущаяВерсия]);
		Иначе
			Возврат ДанныеФайлаИДвоичныеДанные.ДвоичныеДанные;
		КонецЕсли;
		
	КонецЕсли;

	ДвоичныеДанные = ДанныеФайлаИДвоичныеДанные.ДвоичныеДанные;
	Расширение = ДанныеФайлаИДвоичныеДанные.ДанныеФайла.Расширение;
	
	Если ВРег(Расширение) <> ВРег("xml") Тогда
		Возврат ДвоичныеДанные;
	КонецЕсли;
	
	ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
	ОписаниеФайла.ДвоичныеДанные = ДвоичныеДанные;
	ОписаниеФайла.ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
		ДанныеФайлаИДвоичныеДанные.ДанныеФайла.ПолноеНаименованиеВерсии,
		ДанныеФайлаИДвоичныеДанные.ДанныеФайла.Расширение);
	
	РезультатЗаполнения =
		ФорматыЭДОДокументооборот.ЗаполнитьДанныеФормализованногоДокумента(ОписаниеФайла, 
		ПараметрыФормирования.ДанныеЗаполненияФормализованногоЭДО);
	
	Если РезультатЗаполнения.ДанныеИзменены Тогда
		Возврат РезультатЗаполнения.ДвоичныеДанные;
	Иначе
		Возврат ДвоичныеДанные;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьПоляВерсииФайловВНаборВажныхПолей(Объект, МассивПолей, ПараметрыФормирования)
	
	Если ДелопроизводствоКлиентСервер.ЭтоДанныеОзнакомленияПодПодпись(Объект) Тогда
		
		ДанныеВерсий = Справочники.ДанныеОзнакомленияПодПодпись.ДанныеВерсийФайловДляПодписанияИПроверкиЭП(Объект);
		
		НомерЯчейки = 1;
		Для Каждого ДанныеВерсии Из ДанныеВерсий Цикл
			
			ИмяЯчейки = "ВерсияФайла" + НомерЯчейки;
			СтрокаЗначения = ПолучитьДанныеОбъектаСтрокой(ДанныеВерсии.ХэшСуммаВерсииФайла, ИмяЯчейки);
			МассивПолей.Добавить(СтрокаЗначения);
			
			НомерЯчейки = НомерЯчейки + 1;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("Структура") Тогда
		
		МассивВерсийФайлов = Объект["ВерсииФайлов"];
		
		НомерЯчейки = 1; 
		
		Для Каждого ВерсияФайлСсылка Из МассивВерсийФайлов Цикл
			
			ЗначениеПоля = Справочники.ВерсииФайлов.ХэшСуммаВерсииФайлаCRC32(ВерсияФайлСсылка); 
			ИмяЯчейки = "ВерсияФайла" + НомерЯчейки;
			СтрокаЗначения = ПолучитьДанныеОбъектаСтрокой(ЗначениеПоля, ИмяЯчейки);
			МассивПолей.Добавить(СтрокаЗначения);
			НомерЯчейки = НомерЯчейки + 1;
		
		КонецЦикла;
		
	Иначе
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Для объекта типа %1 не определено получение версий файлов'"),
			ТипЗнч(Объект));
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПустуюОрганизациюВНаборВажныхПолей(МассивПолей)
	
	ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
	СтрокаЗначения = ПолучитьДанныеОбъектаСтрокой(ПустаяОрганизация, "Организация");
	МассивПолей.Добавить(СтрокаЗначения);
	
КонецПроцедуры

Функция ЗначениеПоляТаблицыДляНабораВажныхПолей(СтрокаТаблицы, ИмяТаблицы, ИмяКолонки,
		НомерСтроки, ПараметрыФормирования)
	
	Если ИмяТаблицы = "Стороны" Тогда
		
		// Если это первая строка -- это наша организация, для нее могут быть заданы особые параметры подписанта
		Если НомерСтроки = 0 Тогда
			
			ЗначениеДанныхПодписанта = ЗначениеИзДанныхПодписанта(ИмяКолонки, ПараметрыФормирования);
			Если ЗначениеДанныхПодписанта <> Неопределено Тогда
				Возврат ЗначениеДанныхПодписанта;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗначениеИзОсобыхДанныхПодписания = 
			ЗначениеИзОсобыхДанныхПодписания(ИмяКолонки, НомерСтроки, ПараметрыФормирования);
		Если ЗначениеИзОсобыхДанныхПодписания <> Неопределено Тогда
			Возврат ЗначениеИзОсобыхДанныхПодписания;
		КонецЕсли;
		
		Если ИмяКолонки = "Подписал" И ПараметрыФормирования.ПодписалПользователь Тогда
			Подписант = ПользовательПодписания(СтрокаТаблицы.Подписал);
			Если Подписант <> Неопределено Тогда
				Возврат Подписант;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаТаблицы[ИмяКолонки];
	
КонецФункции

Функция ЗначениеИзДанныхПодписанта(ИмяПоля, ПараметрыФормирования)
	
	Если ПараметрыФормирования.ДанныеПодписанта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеПодписанта = ПараметрыФормирования.ДанныеПодписанта;
	
	Если ИмяПоля = "Подписал" Тогда
		Возврат ДанныеПодписанта.Подписал;
	ИначеЕсли ИмяПоля = "ДатаПодписи" Тогда
		Возврат НачалоДня(ДанныеПодписанта.ДатаПодписи);
	ИначеЕсли ИмяПоля = "Подписан" Тогда
		Возврат ДанныеПодписанта.Подписан;
	Иначе
		// Неизвестное имя поля, которого нет в данных подписанта. Делать ничего не надо.
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ЗначениеИзОсобыхДанныхПодписания(ИмяПоля, НомерСтроки, ПараметрыФормирования)
	
	ДанныеПодписанияСтроки = ПараметрыФормирования.ОсобыеДанныеПодписания.Получить(НомерСтроки);
	
	Если ДанныеПодписанияСтроки <> Неопределено Тогда
		Если ИмяПоля = "Подписал" Тогда
			Возврат ДанныеПодписанияСтроки.Подписал;
		ИначеЕсли ИмяПоля = "Подписан" Тогда
			Возврат ДанныеПодписанияСтроки.Подписан;
		ИначеЕсли ИмяПоля = "ДатаПодписи" Тогда
			Возврат ДанныеПодписанияСтроки.ДатаПодписи;
		Иначе
			// Неизвестное имя поля. Не делаем ничего.
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПользовательПодписания(Сотрудник)
	
	ПользователиСотрудника = Сотрудники.ПользователиСотрудника(Сотрудник);
	
	Если ПользователиСотрудника.Количество() > 0 Тогда
		Возврат ПользователиСотрудника[0];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область РаботаСМЧД

Функция НовыеДанныеПодписиСУчетомДоверенности()
	
	СвойстваПодписи = Новый Структура;
	СвойстваПодписи.Вставить("УникальныйИдентификатор", УникальныйИдентификаторПустой());
	СвойстваПодписи.Вставить("ДатаПодписи", Дата(1, 1, 1));
	СвойстваПодписи.Вставить("Объект", Неопределено);
	СвойстваПодписи.Вставить("УстановившийПодпись", Справочники.Пользователи.ПустаяСсылка());
	СвойстваПодписи.Вставить("Версия", "");
	СвойстваПодписи.Вставить("ДатаПроверкиПодписи", Дата(1, 1, 1));
	СвойстваПодписи.Вставить("СрокДействияПоследнейМеткиВремени", Дата(1, 1, 1));
	СвойстваПодписи.Вставить("ТипПодписи", Перечисления.ТипыПодписиКриптографии.ПустаяСсылка());
	СвойстваПодписи.Вставить("ИмяФайлаПодписи", "");
	СвойстваПодписи.Вставить("Комментарий", "");
	СвойстваПодписи.Вставить("КомуВыданСертификат", "");
	СвойстваПодписи.Вставить("Отпечаток", "");
	СвойстваПодписи.Вставить("АдресПодписи", Неопределено);
	СвойстваПодписи.Вставить("ПодписьВерна", Ложь);
	СвойстваПодписи.Вставить("АдресСертификата", Неопределено);
	СвойстваПодписи.Вставить("СертификатДействителен", Ложь);
	СвойстваПодписи.Вставить("ТекстОшибкиПроверкиПодписи", "");
	СвойстваПодписи.Вставить("ТекстОшибкиПроверкиСертификата", "");
	СвойстваПодписи.Вставить("СтатусПроверкиЭП", 0);
	
	СвойстваПодписи.Вставить("АвторПодписи", "");
	СвойстваПодписи.Вставить("Статус", "");
	
	СвойстваПодписи.Вставить("Доверенность", Неопределено);
	СвойстваПодписи.Вставить("ДатаПроверки", Дата(1, 1, 1));
	СвойстваПодписи.Вставить("ДоверенностьВерна", Ложь);
	СвойстваПодписи.Вставить("ПротоколПроверки", Неопределено);
	
	СвойстваПодписи.Вставить("ВнешнееПодписание", Неопределено);
	
	Возврат СвойстваПодписи;
	
КонецФункции

Функция НовыеДанныеДоверенности()
	
	ДанныеДоверенности = Новый Структура;
	ДанныеДоверенности.Вставить("Доверенность", Неопределено);
	ДанныеДоверенности.Вставить("ДатаПроверкиДоверенности", Дата(1, 1, 1));
	ДанныеДоверенности.Вставить("ДоверенностьВерна", Ложь);
	ДанныеДоверенности.Вставить("ПротоколПроверкиДоверенности", Неопределено);
	
	Возврат ДанныеДоверенности;
	
КонецФункции

Процедура ЗаполнитьСтатусыПодписейИДоверенностей(ДанныеПодписей)
	
	Доверенности = Новый Массив;
	Для Каждого ДанныеПодписи Из ДанныеПодписей Цикл
		Если ЗначениеЗаполнено(ДанныеПодписи.Доверенность) Тогда
			Доверенности.Добавить(ДанныеПодписи.Доверенность);
		КонецЕсли;
	КонецЦикла;
	
	ДоверителиПоДоверенностям = РаботаСМЧДДокументооборот.ДанныеДоверителейМЧД(Доверенности);
	
	Для Каждого ДанныеПодписи Из ДанныеПодписей Цикл
		
		ДанныеДляСтатуса = РаботаСЭПКлиентСервер.НовыеДанныеДляПолученияСтатусаПодписи();
		ДанныеДляСтатуса.ПодписьВерна = ДанныеПодписи.ПодписьВерна;
		ДанныеДляСтатуса.СертификатДействителен = ДанныеПодписи.СертификатДействителен;
		ДанныеДляСтатуса.ТекстОшибкиПроверкиПодписи = ДанныеПодписи.ТекстОшибкиПроверкиПодписи;
		ДанныеДляСтатуса.ТекстОшибкиПроверкиСертификата = ДанныеПодписи.ТекстОшибкиПроверкиСертификата;
		
		Если Не ЗначениеЗаполнено(ДанныеПодписи.Доверенность) Тогда
			ДанныеДляСтатуса.ПодписьПоДоверенности = Ложь;
		Иначе
			ДанныеДляСтатуса.ПодписьПоДоверенности = Истина;
			ДанныеДляСтатуса.ДоверенностьДействительна = ДанныеПодписи.ДоверенностьВерна;
		КонецЕсли;
		
		ДанныеДляСтатуса.ДатаПроверки = ДанныеПодписи.ДатаПроверкиПодписи;
		
		Если ЗначениеЗаполнено(ДанныеПодписи.АдресСертификата) Тогда
			ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(ДанныеПодписи.АдресСертификата);
			
			ДанныеДляСтатуса.СрокПроверкиСертификата = СрокПроверкиДействияСертификата(
				ДвоичныеДанныеСертификата, ДанныеПодписи.СрокДействияПоследнейМеткиВремени);
		Иначе
			ДанныеДляСтатуса.СрокПроверкиСертификата = ТекущаяДатаСеанса();
		КонецЕсли;
		
		ДанныеПодписи.Статус = РаботаСЭПКлиентСервер.ОбщийСтатусПроверкиПодписи(ДанныеДляСтатуса);
		Если ЗначениеЗаполнено(ДанныеПодписи.Доверенность) Тогда
			ПредставлениеДоверителей = РаботаСМЧДДокументооборот.ПредставлениеДоверителейМЧД(
				ДоверителиПоДоверенностям[ДанныеПодписи.Доверенность]);
			
			ДанныеПодписи.АвторПодписи = СтрШаблон(
				НСтр("ru = '%1, от имени %2 по доверенности %3'"),
				ДанныеПодписи.КомуВыданСертификат,
				ПредставлениеДоверителей,
				ДанныеПодписи.Доверенность);
		Иначе
			ДанныеПодписи.АвторПодписи = ДанныеПодписи.КомуВыданСертификат;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеМЧДВДанныхДляПроверкиДоверенностей(ДанныеДляПроверки)
	
	Доверенности = Новый Массив(); // Массив Из ОпределяемыйТип.МашиночитаемаяДоверенность
	
	Для Каждого ЭлементДанных Из ДанныеДляПроверки Цикл
		
		Доверенность = ЭлементДанных.Доверенность;
		Если Не ЗначениеЗаполнено(Доверенность) Тогда
			Продолжить;
		КонецЕсли;
		
		Доверенности.Добавить(Доверенность);
	КонецЦикла;
	
	ДанныеДоверенностей = ДанныеМЧДДляПроверки(Доверенности);
	Возврат ДанныеДоверенностей;
	
КонецФункции

Функция ДанныеМЧДДляПроверки(Доверенности)
	
	ДанныеДоверенностей = Новый Соответствие;
	
	РеквизитыМЧД = РаботаСМЧДДокументооборот.ДанныеМЧД(Доверенности);
	ДанныеДоверителей = РаботаСМЧДДокументооборот.ДанныеДоверителейМЧД(Доверенности);
	
	Для Каждого Доверенность Из Доверенности Цикл
		
		ДанныеДоверенности = НовыеДанныеДоверенностиДляПроверки();
		
		РеквизитыДоверенности = РеквизитыМЧД[Доверенность];
		ДанныеДоверителейДоверенности = ДанныеДоверителей[Доверенность];
		
		Если ДанныеДоверителейДоверенности.Количество() > 0 Тогда
			ИННДоверителя = ДанныеДоверителейДоверенности[0].ИНН;
		Иначе
			ИННДоверителя = "";
		КонецЕсли;
		
		НомерДоверенности = РеквизитыДоверенности.Номер;
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Доверенность);
		СведенияМЧД = МенеджерОбъекта.СведенияМЧД(Доверенность);
		
		ДанныеДоверенности.ИННДоверителя = ИННДоверителя;
		ДанныеДоверенности.НомерДоверенности = НомерДоверенности;
		ДанныеДоверенности.Сведения = СведенияМЧД;
		
		ДанныеДоверенностей.Вставить(Доверенность, ДанныеДоверенности);
		
	КонецЦикла;
	
	Возврат ДанныеДоверенностей;
	
КонецФункции

Функция НовыеДанныеДоверенностиДляПроверки()
	
	ДанныеДоверенности = Новый Структура;
	ДанныеДоверенности.Вставить("ИННДоверителя", "");
	ДанныеДоверенности.Вставить("НомерДоверенности", "");
	ДанныеДоверенности.Вставить("Сведения", Новый Структура);
	
	Возврат ДанныеДоверенности;
	
КонецФункции

Функция ПараметрыПроверкиДоверенностиЭП(ДанныеПроверки, ДанныеДоверенности)
	
	СвойстваПодписи = КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи();
	СвойстваПодписи.Подпись = ПолучитьИзВременногоХранилища(ДанныеПроверки.ДанныеПодписи.АдресПодписи);
	СвойстваПодписи.Сертификат = ПолучитьИзВременногоХранилища(ДанныеПроверки.ДанныеПодписи.АдресСертификата);
	СвойстваПодписи.Отпечаток = ДанныеПроверки.ДанныеПодписи.Отпечаток;
	СвойстваПодписи.КомуВыданСертификат = ДанныеПроверки.ДанныеПодписи.КомуВыданСертификат;
	СвойстваПодписи.ДатаПодписи = ДанныеПроверки.ДанныеПодписи.ДатаПодписи;
	СвойстваПодписи.ПодписьВерна = ДанныеПроверки.ДанныеПодписи.ПодписьВерна;
	СвойстваПодписи.ДатаПроверкиПодписи = ДанныеПроверки.ДанныеПодписи.ДатаПроверкиПодписи;
	СвойстваПодписи.УстановившийПодпись = ДанныеПроверки.ДанныеПодписи.УстановившийПодпись;
	СвойстваПодписи.Комментарий = ДанныеПроверки.ДанныеПодписи.Комментарий;
	СвойстваПодписи.ТипПодписи = ДанныеПроверки.ДанныеПодписи.ТипПодписи;
	СвойстваПодписи.СрокДействияПоследнейМеткиВремени = ДанныеПроверки.ДанныеПодписи.СрокДействияПоследнейМеткиВремени;
	СвойстваПодписи.ПодписанныйОбъект = ДанныеПроверки.ДанныеПодписи.Объект;
	
	Если Не ЗначениеЗаполнено(СвойстваПодписи.Сертификат) Тогда
		СвойстваПодписи.Сертификат = ПолучитьИзВременногоХранилища(ДанныеПроверки.ДанныеПодписи.АдресСертификата);
	КонецЕсли;
	
	ПараметрыПроверки = МашиночитаемыеДоверенности.НовыеПараметрыПроверкиПодписи();
	ПараметрыПроверки.СвойстваПодписи = СвойстваПодписи;
	ПараметрыПроверки.ИННДоверителя = ДанныеДоверенности.ИННДоверителя;
	ПараметрыПроверки.СведенияМЧД = ДанныеДоверенности.Сведения;
	
	Возврат ПараметрыПроверки;
	
КонецФункции

Функция НовыеДанныеДоверенностиДляВыгрузки()
	
	ДанныеДоверенности = Новый Структура;
	ДанныеДоверенности.Вставить("Выгружена", Ложь);
	ДанныеДоверенности.Вставить("ОшибкаВыгрузки", "");
	ДанныеДоверенности.Вставить("ИмяФайла", "");
	ДанныеДоверенности.Вставить("АдресДанных", "");
	
	Возврат ДанныеДоверенности;
	
КонецФункции

Функция РезультатВыгрузкиНеподписаннойДоверенности(РезультатВыгрузки)
	
	РезультатВыгрузки.Ошибка = Истина;
	РезультатВыгрузки.ТекстОшибки = НСтр("ru = 'Выгружать в файл можно только подписанные доверенности. Подпишите и повторите выгрузку.'");
	Возврат РезультатВыгрузки;
	
КонецФункции

Функция ИмяФайлаМЧДКонтрагента(Ссылка)
	
	Реквизиты = "ДатаВыдачи, НомерДоверенности";
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);

	ЭлементыИмениФайла = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФорматыЭДО_ФНС.ПространствоИмен_МЧД());
	ДатаФайла = ?(ЗначениеЗаполнено(ЗначенияРеквизитов.ДатаВыдачи), ЗначенияРеквизитов.ДатаВыдачи,
		ТекущаяДатаСеанса());
	ЭлементыИмениФайла.Добавить(Формат(ДатаФайла, "ДФ=ггггММдд;"));
	ЭлементыИмениФайла.Добавить(ЗначенияРеквизитов.НомерДоверенности);

	Возврат СтрСоединить(ЭлементыИмениФайла, "_");
	
КонецФункции

Функция ВыгрузитьДанныеДоверенностиКонтрагента(Ссылка)
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ОписаниеФайла", РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла());
	РезультатВыгрузки.Вставить("Ошибка", Ложь);
	РезультатВыгрузки.Вставить("ТекстОшибки", "");
	
	Если Ссылка.Пустая() Тогда
		Возврат РезультатВыгрузкиНеподписаннойДоверенности(РезультатВыгрузки);
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ЭлектроннаяПодпись, XMLфайлМЧД");
	Подпись = ЗначенияРеквизитов.ЭлектроннаяПодпись.Получить();
	Если Подпись = Неопределено Тогда
		Возврат РезультатВыгрузкиНеподписаннойДоверенности(РезультатВыгрузки);
	КонецЕсли;
	
	ДвоичныеДанныеДоверенности = ЗначенияРеквизитов.XMLфайлМЧД.Получить();
	Если ДвоичныеДанныеДоверенности = Неопределено Тогда
		Возврат РезультатВыгрузкиНеподписаннойДоверенности(РезультатВыгрузки);
	КонецЕсли;
	
	Файлы = Новый Массив;
	
	ИмяВременногоКаталога = РаботаСФайламиБЭД.ВременныйКаталог();
	ИмяФайлаДоверенностьБезРасширения = ИмяФайлаМЧДКонтрагента(Ссылка);
	ИмяФайлаДоверенность = ИмяВременногоКаталога + ИмяФайлаДоверенностьБезРасширения + ".xml";
	ИмяФайлаПодпись = ИмяВременногоКаталога + ИмяФайлаДоверенностьБезРасширения + ".p7s";
	
	ДвоичныеДанныеДоверенности.Записать(ИмяФайлаДоверенность);
	Файлы.Добавить(ИмяФайлаДоверенность);
	
	Подпись.Записать(ИмяФайлаПодпись);
	Файлы.Добавить(ИмяФайлаПодпись);
		
	ИмяФайлаВизуализация = ИмяВременногоКаталога + ИмяФайлаДоверенностьБезРасширения + ".pdf";
	РезультатФормирования = МашиночитаемыеДоверенности.ТабличныйДокументМЧД(ДвоичныеДанныеДоверенности);
	
	ТабличныйДокумент = РезультатФормирования.ПредставлениеДокумента;
	Если ТабличныйДокумент <> Неопределено Тогда
		ТабличныйДокумент.Записать(ИмяФайлаВизуализация, ТипФайлаТабличногоДокумента.PDF);
		Файлы.Добавить(ИмяФайлаВизуализация);
	КонецЕсли;
	
	Архив = РаботаСФайламиБЭД.СформироватьАрхивФайлов(Файлы);
	
	УдалитьФайлы(ИмяВременногоКаталога);
	
	РезультатВыгрузки.ОписаниеФайла.ИмяФайла = ИмяФайлаДоверенностьБезРасширения + ".zip";
	РезультатВыгрузки.ОписаниеФайла.ДвоичныеДанные = Архив;
	
	Возврат РезультатВыгрузки;
	
КонецФункции

#КонецОбласти

#Область ПроверкаПодписей

#Область ЗаполнениеДанныхДляПроверки

Функция ВерсииПодписейОбъекта(ДанныеПодписейОбъекта)
	
	ВерсииПодписей = Новый Массив;
	
	Для Каждого Элемент Из ДанныеПодписейОбъекта Цикл
		ДанныеПодписи = Элемент.Значение;
		ВерсииПодписей.Добавить(ДанныеПодписи.Версия);
	КонецЦикла;
	
	ВерсииПодписей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВерсииПодписей);
	
	Возврат ВерсииПодписей;
	
КонецФункции

Функция ДанныеОбъектаДОДляПроверкиПодписей(Объект, Версии, ПараметрыПолучения)
	
	ДанныеОбъекта = РаботаСЭПКлиентСервер.НовыеДанныеОбъектаДляПроверкиПодписи();
	ДанныеОбъекта.Зашифрован = Ложь;
	ДанныеОбъекта.РазныеВерсииПодписей = Истина;
	
	Для Каждого Версия Из Версии Цикл
		
		ДвоичныеДанныеВерсии = ДанныеОбъекта.ДвоичныеДанныеПоВерсиям[Версия];
		Если ДвоичныеДанныеВерсии = Неопределено Тогда
			ДвоичныеДанныеВерсии = Новый Массив;
			ДанныеОбъекта.ДвоичныеДанныеПоВерсиям.Вставить(Версия, ДвоичныеДанныеВерсии);
		КонецЕсли;
		
		ВариантыДополнительныхПроверок = ВариантыДополнительныхПроверокПодписи(Версия, Объект);
		
		Для Каждого ВариантПроверки Из ВариантыДополнительныхПроверок Цикл
			ПараметрыПолученияДанных = Новый Структура;
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыПолученияДанных, ВариантПроверки);
			ПараметрыПолученияДанных.Вставить("РасшифрованныеДанные", ПараметрыПолучения.РасшифрованныеДанные);
			
			ДвоичныеДанные = ПолучитьДвоичныеДанныеОбъекта(Объект, Версия, ПараметрыПолученияДанных);
			АдресДанных = ПоместитьВоВременноеХранилище(
				ДвоичныеДанные, ПараметрыПолучения.УникальныйИдентификаторФормы);
			ДвоичныеДанныеВерсии.Добавить(АдресДанных);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Функция ДанныеФайлаДляПроверкиПодписей(Объект, ПараметрыПолучения)
	
	ДанныеОбъекта = РаботаСЭПКлиентСервер.НовыеДанныеОбъектаДляПроверкиПодписи();
	
	РасшифрованныеДанные = ПараметрыПолучения.РасшифрованныеДанные[Объект];
	Если РасшифрованныеДанные <> Неопределено Тогда
		ДанныеОбъекта.АдресДанных = РасшифрованныеДанные;
		Возврат ДанныеОбъекта;
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Файлы") Тогда
		СведенияФайла = РаботаСФайламиВызовСервера.ДанныеФайлаИДвоичныеДанные(Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
		СведенияФайла = РаботаСФайламиВызовСервера.ДанныеФайлаИДвоичныеДанные(,Объект);
	КонецЕсли;
	
	ДанныеОбъекта.Зашифрован = СведенияФайла.ДанныеФайла.Зашифрован;
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Файлы") Тогда
		ДанныеОбъекта.ОбъектШифрования = Объект;
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
		ДанныеОбъекта.ОбъектШифрования = СведенияФайла.ДанныеФайла.Ссылка;
	КонецЕсли;
	
	ДанныеОбъекта.АдресДанных = ПоместитьВоВременноеХранилище(
		СведенияФайла.ДвоичныеДанные, ПараметрыПолучения.УникальныйИдентификаторФормы);
	
	Возврат ДанныеОбъекта;
	
КонецФункции

#КонецОбласти

#Область ДополнительныеВариантыПроверок

Функция ВариантыДополнительныхПроверокПодписи(Версия, Объект)
	
	ВозможныеВариантыПроверок = Новый Структура;
	ИменаПараметров = Новый Массив;
	
	ЗаполнитьВозможныеВариантыПроверок(Объект, Версия, ВозможныеВариантыПроверок, ИменаПараметров);
	
	Если ИменаПараметров.Количество() = 0 Тогда
		ВариантыДополнительныхПроверок = Новый Массив;
		ВариантыДополнительныхПроверок.Добавить(Новый Структура);
		Возврат ВариантыДополнительныхПроверок;
	КонецЕсли;
	
	НомераЗначенийПараметров = Новый Структура;
	Для Каждого Элемент Из ВозможныеВариантыПроверок Цикл
		НомераЗначенийПараметров.Вставить(Элемент.Ключ, 0);
	КонецЦикла;
	
	НомераЗначенийПараметров[ИменаПараметров[0]] = -1;
	
	ВариантыДополнительныхПроверок = Новый Массив;
	
	ВсеВариантыПеребраны = Ложь;
	
	Пока Не ВсеВариантыПеребраны Цикл
		
		НомерПараметра = 0;
		
		Пока НомерПараметра < НомераЗначенийПараметров.Количество() Цикл
			
			ИмяПараметра = ИменаПараметров[НомерПараметра];
			КоличествоЗначенийПараметра = ВозможныеВариантыПроверок[ИмяПараметра].Количество();
			
			Если НомераЗначенийПараметров[ИмяПараметра] < КоличествоЗначенийПараметра - 1 Тогда
				
				НомераЗначенийПараметров[ИмяПараметра] =
					НомераЗначенийПараметров[ИмяПараметра] + 1;
				
				Для Инд = 0 По НомерПараметра - 1 Цикл
					НомераЗначенийПараметров[ИменаПараметров[Инд]] = 0;
				КонецЦикла;
				
				Прервать;
				
			Иначе
				НомерПараметра = НомерПараметра + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НомерПараметра >= НомераЗначенийПараметров.Количество() Тогда
			ВсеВариантыПеребраны = Истина;
		Иначе
			
			ВариантПроверки = Новый Структура;
			
			Для Каждого Элемент Из ВозможныеВариантыПроверок Цикл
				
				ВариантПроверки.Вставить(
					Элемент.Ключ,
					Элемент.Значение[НомераЗначенийПараметров[Элемент.Ключ]]);
			
			КонецЦикла;
			
			ВариантыДополнительныхПроверок.Добавить(ВариантПроверки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВариантыДополнительныхПроверок;
	
КонецФункции

Процедура ЗаполнитьВозможныеВариантыПроверок(Объект, Версия, ВозможныеВариантыПроверок, ИменаПараметров)
	
	// Повторная проверка подписи для случаев, когда подпись была
	// создана до включения учета по организациям.
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Объект) И Версия > 1 Тогда
		ДобавитьПроверкиУчетаПоОрганизациям(Объект, ВозможныеВариантыПроверок, ИменаПараметров);
	КонецЕсли;
	
	// Повторная проверка документов предприятия для версии подписи 3.
	Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Объект) И Версия = 3 Тогда
		ДобавитьПроверкиПоСтарымВерсиямПодписей(Объект, ВозможныеВариантыПроверок, ИменаПараметров);
	КонецЕсли;
	
	// Повторная проверка 5-й версии подписи для внутренних документов, отправленных по ЭДО.
	Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Объект)
		И Версия = 5 Тогда
		
		ДобавитьПроверкиДляИсходящихЭДО(Объект, ВозможныеВариантыПроверок, ИменаПараметров);
		ДобавитьПроверкиДляЗагруженныхИз21(Объект, ВозможныеВариантыПроверок, ИменаПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПроверкиУчетаПоОрганизациям(Объект, ВозможныеВариантыПроверок, ИменаПараметров)
	
	ВозможныеЗначенияПараметра = Новый Массив;
	
	ВозможныеЗначенияПараметра.Добавить(Ложь);
	ВозможныеЗначенияПараметра.Добавить(Истина);
	
	ИмяПараметра = "РеквизитОрганизацияНеЗаполнен";
	
	ВозможныеВариантыПроверок.Вставить(ИмяПараметра, ВозможныеЗначенияПараметра);
	
	ИменаПараметров.Добавить(ИмяПараметра);
	
КонецПроцедуры

Процедура ДобавитьПроверкиПоСтарымВерсиямПодписей(Объект, ВозможныеВариантыПроверок, ИменаПараметров)
	
	ИсключаемыеРеквизиты_2_1_7 = Новый Массив;
	ИсключаемыеРеквизиты_2_1_7.Добавить("Стороны.Подписал");
	ИсключаемыеРеквизиты_2_1_7.Добавить("Стороны.ДатаПодписи");
	ИсключаемыеРеквизиты_2_1_7.Добавить("Стороны.Сторона");
	ИсключаемыеРеквизиты = Новый Массив;
	ИсключаемыеРеквизиты.Добавить("Стороны.Подписал");
	ИсключаемыеРеквизиты.Добавить("Стороны.ДатаПодписи");
	
	ВозможныеЗначенияПараметра = Новый Массив;
	ВозможныеЗначенияПараметра.Добавить(Новый Массив);
	ВозможныеЗначенияПараметра.Добавить(ИсключаемыеРеквизиты);
	ВозможныеЗначенияПараметра.Добавить(ИсключаемыеРеквизиты_2_1_7);
	
	ИмяПараметра = "ИсключаемыеКлючевыеРеквизиты";
	
	ВозможныеВариантыПроверок.Вставить(ИмяПараметра, ВозможныеЗначенияПараметра);
	
	ИменаПараметров.Добавить(ИмяПараметра);
	
КонецПроцедуры

Процедура ДобавитьПроверкиДляИсходящихЭДО(Объект, ВозможныеВариантыПроверок, ИменаПараметров)
	
	ДанныеСостояния = ОбменСКонтрагентамиДОСлужебный.СостояниеДокумента(Объект);
	
	Если Не (ДанныеСостояния.Направление = Перечисления.НаправленияЭДО.Исходящий
		И ДанныеСостояния.Состояние = Перечисления.СостоянияЭДОДокументооборот.ОбменЗавершен) Тогда
		
		Возврат;
	КонецЕсли;
	
	// Если это исходящий документ и обмен завершен, то при подписании в таблице сторон со стороны контрагента
	// не было данных о подписании. Это необходимо указать в доп проверках
	ПустоеКонтактноеЛицо = ПредопределенноеЗначение("Справочник.КонтактныеЛица.ПустаяСсылка");
	
	ВозможныеЗначенияПараметра = Новый Массив;
	ВозможныеЗначенияПараметра.Добавить(Новый Массив);
	
	ДанныеПодписанияКонтрагентаДоОбмена = Новый Структура;
	ДанныеПодписанияКонтрагентаДоОбмена.Вставить("НомерСтроки", 1);
	ДанныеПодписанияКонтрагентаДоОбмена.Вставить("Подписал", ПустоеКонтактноеЛицо);
	ДанныеПодписанияКонтрагентаДоОбмена.Вставить("Подписан", Ложь);
	ДанныеПодписанияКонтрагентаДоОбмена.Вставить("ДатаПодписи", Дата(1, 1, 1));
	ДанныеПодписанияДоОбмена =
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеПодписанияКонтрагентаДоОбмена);
		
	ВозможныеЗначенияПараметра.Добавить(ДанныеПодписанияДоОбмена);
	
	ДанныеПодписанияКонтрагентаДоОбмена = Новый Структура;
	ДанныеПодписанияКонтрагентаДоОбмена.Вставить("НомерСтроки", 1);
	ДанныеПодписанияКонтрагентаДоОбмена.Вставить("Подписал", "");
	ДанныеПодписанияКонтрагентаДоОбмена.Вставить("Подписан", Ложь);
	ДанныеПодписанияКонтрагентаДоОбмена.Вставить("ДатаПодписи", Дата(1, 1, 1));
	ДанныеПодписанияДоОбмена =
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеПодписанияКонтрагентаДоОбмена);
		
	ВозможныеЗначенияПараметра.Добавить(ДанныеПодписанияДоОбмена);
	ДанныеПодписанияКонтрагентаДоОбмена = Новый Структура;
	ДанныеПодписанияКонтрагентаДоОбмена.Вставить("НомерСтроки", 1);
	ДанныеПодписанияКонтрагентаДоОбмена.Вставить("Подписал", "");
	ДанныеПодписанияКонтрагентаДоОбмена.Вставить("Подписан", Ложь);
	ДанныеПодписанияКонтрагентаДоОбмена.Вставить("ДатаПодписи", Дата(1, 1, 1));
	ДанныеПодписанияДоОбмена =
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеПодписанияКонтрагентаДоОбмена);
		
	ВозможныеЗначенияПараметра.Добавить(ДанныеПодписанияДоОбмена);
	
	ИмяПараметра = "ОсобыеДанныеПодписания";
	
	ВозможныеВариантыПроверок.Вставить(ИмяПараметра, ВозможныеЗначенияПараметра);
	
	ИменаПараметров.Добавить(ИмяПараметра);
	
КонецПроцедуры

Процедура ДобавитьПроверкиДляЗагруженныхИз21(Объект, ВозможныеВариантыПроверок, ИменаПараметров)
	
	ИсточникДанных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ИсточникДанных");
	
	Если ИсточникДанных <> ПредопределенноеЗначение("Справочник.ИсточникиДанных.ДО21") Тогда
		Возврат;
	КонецЕсли;
	
	ВозможныеЗначенияПараметра = Новый Массив;
	
	ВозможныеЗначенияПараметра.Добавить(Ложь);
	ВозможныеЗначенияПараметра.Добавить(Истина);
	
	ИмяПараметра = "ПодписалПользователь";
	
	ВозможныеВариантыПроверок.Вставить(ИмяПараметра, ВозможныеЗначенияПараметра);
	
	ИменаПараметров.Добавить(ИмяПараметра);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеДанныхВРегистре

// Данные подписи для записи.
// 
// Параметры:
//  ДанныеПодписи - см. РаботаСЭПКлиентСервер.НовыеДанныеПодписиДляПроверки
// 
// Возвращаемое значение:
//  Структура - Данные подписи для записи:
// * ПодписьВерна - Булево - 
// * ТекстОшибкиПроверкиПодписи - Строка - 
// * СертификатДействителен - Булево - 
// * ТекстОшибкиПроверкиСертификата - Строка - 
Функция ДанныеПодписиДляЗаписи(ДанныеПодписи)
	
	ДанныеДляЗаписи = Новый Структура;
	ДанныеДляЗаписи.Вставить("ПодписьВерна", Ложь);
	ДанныеДляЗаписи.Вставить("ТекстОшибкиПроверкиПодписи", "");
	ДанныеДляЗаписи.Вставить("СертификатДействителен", Ложь);
	ДанныеДляЗаписи.Вставить("ТекстОшибкиПроверкиСертификата", "");
	
	ЗаполнитьЗначенияСвойств(ДанныеДляЗаписи, ДанныеПодписи);
	
	Возврат ДанныеДляЗаписи;
	
КонецФункции

// Обновить статус проверки подписи в регистре.
// 
// Параметры:
//  КлючРегистра - см. НовыйКлючРегистраЭлектронныхПодписей
//  ДанныеПодписиДляЗаписи - см. ДанныеПодписиДляЗаписи
//  ДатаПроверки - Неопределено - если проверено текущим моментом
//               - Дата - Если известна дата проверки подписи
Процедура ОбновитьСтатусПроверкиПодписиВРегистре(КлючРегистра, ДанныеПодписиДляЗаписи, ДатаПроверки = Неопределено)
	
	НаборЗаписей = РегистрыСведений.ЭлектронныеПодписи.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ПодписанныйОбъект.Установить(КлючРегистра.ПодписанныйОбъект);
	НаборЗаписей.Отбор.ПорядковыйНомер.Установить(КлючРегистра.ПорядковыйНомер);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		СообщениеПользователю = СтрШаблон(
			НСтр("ru = 'Не удалось обновить статус проверки подписи № %1 к объекту %2: подпись не найдена'"),
			КлючРегистра.ПорядковыйНомер,
			КлючРегистра.ПодписанныйОбъект);
		ВызватьИсключение СообщениеПользователю;
	КонецЕсли;
	
	Подпись = НаборЗаписей[0];
	
	ДатаПроверкиПодписи = ТекущаяДатаСеанса();
	Если ДатаПроверки <> Неопределено Тогда
		ДатаПроверки = ДатаПроверкиПодписи;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Подпись, ДанныеПодписиДляЗаписи);
	Подпись.ДатаПроверкиПодписи = ДатаПроверки;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ВозвратРезультатаПроверкиПодписей

Функция РезультатПроверокПодписи(ДанныеПроверок)
	
	ДанныеДляПроверки = ДанныеПроверок.ДанныеДляПроверки;
	РезультатПроверкиПодписи = ДанныеПроверок.РезультатПроверкиПодписи;
	
	РезультатПроверок = НовыйРезультатПроверкиПодписи();
	
	РезультатПроверок.ПодписьВерна = РезультатПроверкиПодписи.ПодписьВерна;
	РезультатПроверок.СертификатДействителен = РезультатПроверкиПодписи.СертификатДействителен;
	РезультатПроверок.ДатаПроверкиПодписи = ДанныеПроверок.ДатаПроверки;
	
	Доверенность = ДанныеДляПроверки.Доверенность;
	Если Не ЗначениеЗаполнено(Доверенность) Тогда
		РезультатПроверок.ДоверенностьВерна = Ложь;
	Иначе
		ПротоколПроверки = ДанныеПроверок.РезультатПроверкиДоверенности;
		РезультатПоПротоколу = РаботаСЭПКлиентСервер.РезультатПроверкиДоверенностиПоПротоколу(ПротоколПроверки);
		РезультатПроверок.ДоверенностьВерна = РезультатПоПротоколу.ДоверенностьДействительна;
	КонецЕсли;
	
	РезультатПроверок.Статус = СтатусПроверкиПодписиПоДаннымПроверок(ДанныеПроверок);
	
	Возврат РезультатПроверок;
	
КонецФункции

Функция СтатусПроверкиПодписиПоДаннымПроверок(ДанныеПроверок)
	
	ДанныеДляСтатуса = РаботаСЭПКлиентСервер.НовыеДанныеДляПолученияСтатусаПодписи();
	
	ДанныеДляПроверки = ДанныеПроверок.ДанныеДляПроверки;
	РезультатПроверкиПодписи = ДанныеПроверок.РезультатПроверкиПодписи;
	
	ЗаполнитьЗначенияСвойств(ДанныеДляСтатуса, РезультатПроверкиПодписи);
	
	Доверенность = ДанныеДляПроверки.Доверенность;
	
	Если Не ЗначениеЗаполнено(Доверенность) Тогда
		ДанныеДляСтатуса.ПодписьПоДоверенности = Ложь;
		ДанныеДляСтатуса.ДоверенностьДействительна = Ложь;
		ДанныеДляСтатуса.ПротоколПроверкиДоверенности = Неопределено;
	Иначе
		ДанныеДляСтатуса.ПодписьПоДоверенности = Истина;
		
		ПротоколПроверки = ДанныеПроверок.РезультатПроверкиДоверенности;
		РезультатПоПротоколу = РаботаСЭПКлиентСервер.РезультатПроверкиДоверенностиПоПротоколу(ПротоколПроверки);
		
		ДанныеДляСтатуса.ДоверенностьДействительна = РезультатПоПротоколу.ДоверенностьДействительна;
		ДанныеДляСтатуса.ПротоколПроверкиДоверенности = ПротоколПроверки;
	КонецЕсли;
	
	ДанныеДляСтатуса.ДатаПроверки = ДанныеПроверок.ДатаПроверки;
	Сертификат = ПолучитьИзВременногоХранилища(ДанныеДляПроверки.АдресСертификата);
	ДанныеДляСтатуса.СрокПроверкиСертификата =
		СрокПроверкиДействияСертификата(Сертификат, ДанныеДляПроверки.СрокДействияПоследнейМеткиВремени);
	
	Возврат РаботаСЭПКлиентСервер.ОбщийСтатусПроверкиПодписи(ДанныеДляСтатуса);
	
КонецФункции

Функция НовыйРезультатПроверкиПодписи()
	
	ПустаяДата = Дата(1, 1, 1);
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ПодписьВерна", Ложь);
	РезультатПроверки.Вставить("СертификатДействителен", Ложь);
	РезультатПроверки.Вставить("ДатаПроверкиПодписи", ПустаяДата);
	РезультатПроверки.Вставить("ДоверенностьВерна", Ложь);
	
	РезультатПроверки.Вставить("Статус", "");
	
	Возврат РезультатПроверки;
	
КонецФункции

#КонецОбласти

#Область ПроверкаЭПНаСервере

Функция ПроверитьДействительностьЭПНаСервере(ДанныеПодписейОбъектов, ДанныеОбъектов)
	
	РезультатыПроверкиПодписей = Новый Соответствие;
	
	Для Каждого ЭлементОбъекта Из ДанныеПодписейОбъектов Цикл
		
		Объект = ЭлементОбъекта.Ключ;
		ДанныеПодписейОбъекта = ЭлементОбъекта.Значение;
		
		Для Каждого ЭлементПодписи Из ДанныеПодписейОбъекта Цикл
			
			ИдентификаторПодписи = ЭлементПодписи.Ключ;
			ДанныеПодписи = ЭлементПодписи.Значение;
			
			РезультатПроверки = ПроверитьПодписьОбъекта(ДанныеОбъектов, Объект, ДанныеПодписи);
			
			РезультатыПроверкиПодписей.Вставить(ИдентификаторПодписи, РезультатПроверки);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат РезультатыПроверкиПодписей;
	
КонецФункции

Функция ПроверитьПодписьОбъекта(ДанныеОбъектов, Объект, ДанныеПодписи)
	
	РезультатПроверкиПодписи = РаботаСЭПКлиентСервер.НовыйРезультатПроверкиПодписи();
	
	ДанныеОбъектаСУчетомДополнительныхПроверок = Новый Массив;
	
	ДанныеОбъекта = ДанныеОбъектов[Объект];
	Версия = ДанныеПодписи.Версия;
	
	Если Не ДанныеОбъекта.РазныеВерсииПодписей Тогда
		ДанныеОбъектаСУчетомДополнительныхПроверок.Добавить(ДанныеОбъекта.АдресДанных);
	Иначе
		ДанныеОбъектаСУчетомДополнительныхПроверок = ДанныеОбъекта.ДвоичныеДанныеПоВерсиям[Версия];
	КонецЕсли;
	
	Для Каждого Данные Из ДанныеОбъектаСУчетомДополнительныхПроверок Цикл
		
		ОписаниеОшибки = "";
		
		РезультатПроверкиБСП = ЭлектроннаяПодписьКлиентСервер.РезультатПроверкиПодписи();
		
		ЭлектроннаяПодпись.ПроверитьПодпись(, Данные, ДанныеПодписи.АдресПодписи,
			ОписаниеОшибки, ДанныеПодписи.ДатаПодписи, РезультатПроверкиБСП);
		
		РезультатПроверкиПодписи = РаботаСЭПКлиентСервер.РезультатПроверкиДОПоРезультатуБСП(РезультатПроверкиБСП);
		
		Если РезультатПроверкиПодписи.ПодписьВерна = Истина Тогда
			Возврат РезультатПроверкиПодписи;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатПроверкиПодписи;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПолучениеСертификатовИзПодписи

Функция ПолучитьДанныеСертификатаИзПодписи(АдресДанныхПодписи, ИдентификаторФормы)
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ДанныеСертификата", РаботаСЭПКлиентСервер.НовыйРезультатПолученияДанныхСертификатаИзПодписи());
	
	Если Не ЭлектроннаяПодпись.ПроверятьЭлектронныеПодписиНаСервере() Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Некорректный вызов метода: электронные подписи проверяются только на клиенте'");
		Возврат Результат;
	КонецЕсли;
	
	МенеджерКриптографии = Неопределено;
	
	Если Не (ТипЗнч(АдресДанныхПодписи) = Тип("Строка")
		И ЭтоАдресВременногоХранилища(АдресДанныхПодписи)) Тогда
		
		Результат.ОписаниеОшибки = НСтр("ru = 'Некорректный вызов метода: переданный параметр не является адресом данных временного хранилища'");
		Возврат Результат;
	КонецЕсли;
	
	ДанныеПодписи = ПолучитьИзВременногоХранилища(АдресДанныхПодписи);
	Если ТипЗнч(ДанныеПодписи) <> Тип("ДвоичныеДанные") Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Не удалось получить данные подписи из хранилища'");
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		МенеджерКриптографии = ЭлектроннаяПодпись.МенеджерКриптографии("ПолучениеСертификатов");
	Исключение
		Результат.ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Не удалось получить менеджер криптографии по причине: %1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если ТипЗнч(МенеджерКриптографии) <> Тип("МенеджерКриптографии") Тогда
		
		Если Не ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
			Результат.ОписаниеОшибки = НСтр("ru = 'Не удалось получить менеджер криптографии'");
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЕсли;
	
	Попытка
		Сертификаты = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ДанныеПодписи);
	Исключение
		Результат.ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Не удалось получить сертификаты из подписи по причине: %1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Результат;
	КонецПопытки;
	
	Если ТипЗнч(Сертификаты) <> Тип("Массив") Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Не удалось получить сертификаты из подписи'");
		Возврат Результат;
	КонецЕсли;
	
	Сертификат = КриптографияБЭДСлужебныйКлиентСервер.НайтиСертификатПодписавшейСтороныРекурсивно(Сертификаты);
	
	Если ТипЗнч(Сертификат) <> Тип("СертификатКриптографии") Тогда
		Результат.ОписаниеОшибки = НСтр("ru = 'Не удалось получить сертификат из данных подписи'");
		Возврат Результат;
	КонецЕсли;
	
	Результат.Успех = Истина;
	
	Результат.ДанныеСертификата.АдресСертификата =
		ПоместитьВоВременноеХранилище(Сертификат.Выгрузить(), ИдентификаторФормы);
	Результат.ДанныеСертификата.КомуВыданСертификат = ЭлектроннаяПодпись.ПредставлениеСубъекта(Сертификат);
	Результат.ДанныеСертификата.Отпечаток = Base64Строка(Сертификат.Отпечаток);
	
	Возврат Результат;
	
КонецФункции

// Заносит в регистр сведений данные о сертификате ЭП
// 
// Параметры:
//  КлючРегистра - см. НовыйКлючРегистраЭлектронныхПодписей
//  ДанныеСертификата - см. РаботаСЭПКлиентСервер.НовыйРезультатПолученияДанныхСертификатаИзПодписи
Процедура ЗанестиДанныеСертификатаПодписи(КлючРегистра, ДанныеСертификата)
	
	НаборЗаписей = РегистрыСведений.ЭлектронныеПодписи.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПодписанныйОбъект.Установить(КлючРегистра.ПодписанныйОбъект);
	НаборЗаписей.Отбор.ПорядковыйНомер.Установить(КлючРегистра.ПорядковыйНомер);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(ДанныеСертификата.АдресСертификата);
	Если ТипЗнч(ДвоичныеДанныеСертификата) <> Тип("ДвоичныеДанные") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Запись.Сертификат = Новый ХранилищеЗначения(ДвоичныеДанныеСертификата);
		Запись.КомуВыданСертификат = ДанныеСертификата.КомуВыданСертификат;
		Запись.Отпечаток = ДанныеСертификата.Отпечаток;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ОтметкаЭП

Функция НовоеОписаниеОтметкиЭП()
	
	ОписаниеЭП = Новый Структура;
	ОписаниеЭП.Вставить("Номер", "");
	ОписаниеЭП.Вставить("Владелец", "");
	ОписаниеЭП.Вставить("ДатаНачала", "");
	ОписаниеЭП.Вставить("ДатаОкончания", "");
	
	НовыеДанныеДоверенности = НовоеОписаниеДоверенностиЭПДляОтметки();
	
	ОписаниеЭП.Вставить("ДанныеДоверенности", НовыеДанныеДоверенности);
	
	Возврат ОписаниеЭП;
	
КонецФункции

Функция НовоеОписаниеДоверенностиЭПДляОтметки()
	
	ДанныеДляОтметки = Новый Структура;
	ДанныеДляОтметки.Вставить("ПодписьПоДоверенности", Ложь);
	ДанныеДляОтметки.Вставить("НомерДоверенности", "");
	ДанныеДляОтметки.Вставить("ДоверительПредставление", "");
	ДанныеДляОтметки.Вставить("ДатаВыдачи", Дата(1, 1, 1));
	
	Возврат ДанныеДляОтметки;
	
КонецФункции

Функция ОписаниеДоверенностиЭПДляОтметки(ИдентификаторПодписи)
	
	ДанныеДляОтметки = НовоеОписаниеДоверенностиЭПДляОтметки();
	
	ИдентификаторыПодписей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторПодписи);
	ДанныеДоверенностей = ДанныеДоверенностейПодписей(ИдентификаторыПодписей);
	ДанныеДоверенности = ДанныеДоверенностей[ИдентификаторПодписи];
	
	Если ДанныеДоверенности = Неопределено Тогда
		Возврат ДанныеДляОтметки;
	КонецЕсли;
	
	Доверенность = ДанныеДоверенности.Доверенность;
	
	Если Не ЗначениеЗаполнено(Доверенность) Тогда
		Возврат ДанныеДляОтметки;
	КонецЕсли;
	
	ДанныеМЧД = РаботаСМЧДДокументооборот.ДанныеМЧД(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Доверенность));
	ДанныеДоверителей = РаботаСМЧДДокументооборот.ДанныеДоверителейМЧД(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Доверенность));
	
	РеквизитыДоверенности = ДанныеМЧД[Доверенность];
	ДоверителиДоверенности = ДанныеДоверителей[Доверенность];
	
	ДанныеДляОтметки.ПодписьПоДоверенности = Истина;
	ДанныеДляОтметки.НомерДоверенности = РеквизитыДоверенности.Номер;
	ДанныеДляОтметки.ДоверительПредставление =
		РаботаСМЧДДокументооборот.ПредставлениеДоверителейМЧД(ДоверителиДоверенности);
	ДанныеДляОтметки.ДатаВыдачи = РеквизитыДоверенности.ДатаВыдачи;
	
	Возврат ДанныеДляОтметки;
	
КонецФункции

Процедура ОбновитьОтметкуЭППриЗаписиДоверенностей(НаборЗаписей)
	
	Если Не ПолучитьФункциональнуюОпцию("АвтовизуализацияЭП") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторПопдиси = НаборЗаписей.Отбор.УникальныйИдентификаторПодписи.Значение;
	
	Если Не ЗначениеЗаполнено(ИдентификаторПопдиси) Тогда
		Возврат;
	КонецЕсли;
	
	Идентификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторПопдиси);
	ДанныеПодписей = УстановленныеПодписиПоИдентификаторам(Идентификаторы);
	ДанныеПодписи = ДанныеПодписей[ИдентификаторПопдиси];
	
	Если ДанныеПодписи = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Объект = ДанныеПодписи.ПодписанныйОбъект;
	Если ТипЗнч(Объект) <> Тип("СправочникСсылка.ВерсииФайлов") Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект,
		"Владелец, Владелец.ВладелецФайла");
	Файл = ЗначенияРеквизитов.Владелец;
	ВладелецФайла = ЗначенияРеквизитов.ВладелецВладелецФайла;
	
	Если Не ДелопроизводствоКлиентСервер.ЭтоДокумент(ВладелецФайла) Тогда
		Возврат;
	КонецЕсли;
		
	ОбновитьОтметкуЭП(ВладелецФайла, ДанныеПодписи);
	
	РаботаСФайламиВызовСервера.УдалитьВизуализациюЭП(ВладелецФайла, Файл, Объект);
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанныхПодписей

// Возвращает выборку подписей объектов
// 
// Параметры:
//  Объекты - Массив Из ОпределяемыйТип.ПодписанныйОбъект
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
//    * УникальныйИдентификатор - УникальныйИдентификатор - 
//    * ИдентификаторПодписи - УникальныйИдентификатор - 
//    * ДатаПодписи - Дата - 
//    * Объект - ОпределяемыйТип.ПодписанныйОбъект - 
//    * ПодписанныйОбъект - ОпределяемыйТип.ПодписанныйОбъект - 
//    * ПорядковыйНомер - Число - 
//    * УстановившийПодпись - СправочникСсылка.Пользователи - 
//    * Версия - Число - 
//    * ДатаПроверкиПодписи - Дата - 
//    * СрокДействияПоследнейМеткиВремени - Дата - 
//    * ТипПодписи - ПеречислениеСсылка.ТипыПодписиКриптографии - 
//    * ИмяФайлаПодписи - Строка - 
//    * Комментарий - Строка - 
//    * КомуВыданСертификат - Строка - 
//    * Отпечаток - Строка - 
//    * Подпись - ХранилищеЗначения - 
//    * ПодписьВерна - Булево - 
//    * Сертификат - ХранилищеЗначения - 
//    * СертификатДействителен - Булево - 
//    * ТекстОшибкиПроверкиПодписи - Строка - 
//    * ТекстОшибкиПроверкиСертификата - Строка - 
//    * ВнешнееПодписание - ДокументСсылка.СведенияОВнешнемПодписании - 
//    * СтатусПроверкиЭП - Число - 
Функция ВыборкаПодписейОбъектов(Объекты)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭП.ИдентификаторПодписи КАК УникальныйИдентификатор,
		|	ЭП.ИдентификаторПодписи КАК ИдентификаторПодписи,
		|	ЭП.ДатаПодписи КАК ДатаПодписи,
		|	ЭП.ПодписанныйОбъект КАК Объект,
		|	ЭП.ПодписанныйОбъект КАК ПодписанныйОбъект,
		|	ЭП.ПорядковыйНомер КАК ПорядковыйНомер,
		|	ЭП.УстановившийПодпись КАК УстановившийПодпись,
		|	ЭП.Версия КАК Версия,
		|	ЭП.ДатаПроверкиПодписи КАК ДатаПроверкиПодписи,
		|	ЭП.СрокДействияПоследнейМеткиВремени КАК СрокДействияПоследнейМеткиВремени,
		|	ЭП.ТипПодписи КАК ТипПодписи,
		|	ЭП.ИмяФайлаПодписи КАК ИмяФайлаПодписи,
		|	ЭП.Комментарий КАК Комментарий,
		|	ЭП.КомуВыданСертификат КАК КомуВыданСертификат,
		|	ЭП.Отпечаток КАК Отпечаток,
		|	ЭП.Подпись КАК Подпись,
		|	ЭП.ПодписьВерна КАК ПодписьВерна,
		|	ЭП.Сертификат КАК Сертификат,
		|	ЭП.СертификатДействителен КАК СертификатДействителен,
		|	ЭП.ТекстОшибкиПроверкиПодписи КАК ТекстОшибкиПроверкиПодписи,
		|	ЭП.ТекстОшибкиПроверкиСертификата КАК ТекстОшибкиПроверкиСертификата,
		|	ЕСТЬNULL(ВнешниеПодписи.Сведения, ЗНАЧЕНИЕ(Документ.СведенияОВнешнемПодписании.ПустаяСсылка)) КАК ВнешнееПодписание,
		|	ВЫБОР
		|		КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписиНет)
		|			ТОГДА 0
		|		КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьНеПроверена)
		|			ТОГДА 1
		|		КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьДействительна)
		|			ТОГДА 2
		|		КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьНедействительна)
		|			ТОГДА 3
		|		ИНАЧЕ ВЫБОР
		|			КОГДА ЭП.ПодписанныйОбъект.ПодписанЭП
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	КОНЕЦ КАК СтатусПроверкиЭП
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|		ПО ЭП.ПодписанныйОбъект = КешИнформацииОбОбъектах.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВнешнемПодписанииЭлектронныхПодписей КАК ВнешниеПодписи
		|		ПО ВнешниеПодписи.УникальныйИдентификатор = ЭП.ИдентификаторПодписи
		|ГДЕ
		|	ЭП.ПодписанныйОбъект В (&ПодписанныеОбъекты)";
	Запрос.УстановитьПараметр("ПодписанныеОбъекты", Объекты);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

#КонецОбласти

Функция СледующийНомерПодписиОбъекта(Объект)
	
	Объекты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект);
	НомераОбъектов = СледующиеНомераПодписейОбъектов(Объекты);
	Возврат НомераОбъектов[Объект];
	
КонецФункции

// Возвращает соответствие предыдущих идентификаторов подписей по набору записей
// 
// Параметры:
//  НаборЗаписей - РегистрСведенийНаборЗаписей.ЭлектронныеПодписи
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - УникальныйИдентификатор
//    * Значение - Булево
Функция ПредыдущиеИдентификаторыПодписейНабора(НаборЗаписей)
	
	ПодписанныйОбъект = НаборЗаписей.Отбор.ПодписанныйОбъект.Значение; // ОпределяемыйТип.ПодписанныйОбъект
	НомерПодписи = НаборЗаписей.Отбор.ПорядковыйНомер.Значение; // Число
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныеПодписи.ИдентификаторПодписи КАК ИдентификаторПодписи
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|ГДЕ
		|	ЭлектронныеПодписи.ПодписанныйОбъект = &ПодписанныйОбъект
		|	И &ОтборПоНомеру";
	Запрос.УстановитьПараметр("ПодписанныйОбъект", ПодписанныйОбъект);
	
	Если ЗначениеЗаполнено(НомерПодписи) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоНомеру",
			"ЭлектронныеПодписи.ПорядковыйНомер = &ПорядковыйНомер");
		Запрос.УстановитьПараметр("ПорядковыйНомер", НомерПодписи);
	Иначе
		Запрос.УстановитьПараметр("ОтборПоНомеру", Истина);
	КонецЕсли;
	
	СтарыеИдентификаторы = Новый Соответствие();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтарыеИдентификаторы[Выборка.ИдентификаторПодписи] = Истина;
	КонецЦикла;
	
	Возврат СтарыеИдентификаторы;
	
КонецФункции

#Область РаботаСУсовершенствованнымиЭП

// Возвращает, доступно ли текущему пользователю усовершенствование ЭП
// 
// Возвращаемое значение:
//  Булево - Доступно усовершенствование ЭП
Функция ДоступноУсовершенствованиеЭП() Экспорт
	
	Возврат Пользователи.РолиДоступны("УсовершенствованиеЭлектронныхПодписей");
	
КонецФункции

// Возвращает статусы работы с подписанными объектами
// 
// Параметры:
//  ПодписанныеОбъекты - Массив Из ОпределяемыйТип.ПодписанныйОбъект
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - ОпределяемыйТип.ПодписанныйОбъект
//    * Значение - Строка - см. РаботаСЭПКлиентСервер.СтатусыРаботыСПодписаннымиОбъектами
Функция СтатусыРаботыПоПодписаннымОбъектам(ПодписанныеОбъекты)
	
	Статусы = РаботаСЭПКлиентСервер.СтатусыРаботыСПодписаннымиОбъектами();
	
	СтатусыПоОбъектам = Новый Соответствие();
	Для Каждого Объект Из ПодписанныеОбъекты Цикл
		СтатусыПоОбъектам[Объект] = Статусы.НеОпределен;
	КонецЦикла;
	
	ОбъектыРаботыПоПодписаннымОбъектам = ОбъектыРаботыПодписанныхОбъектов(ПодписанныеОбъекты);
	
	ДокументыДО = Новый Массив();
	ДокументыЭДО = Новый Массив();
	
	Для Каждого Элемент Из ОбъектыРаботыПоПодписаннымОбъектам Цикл
		
		ОбъектРаботы = Элемент.Значение;
		
		Если Не ЗначениеЗаполнено(ОбъектРаботы) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДелопроизводствоКлиентСервер.ЭтоДокумент(ОбъектРаботы) Тогда
			ДокументыДО.Добавить(ОбъектРаботы);
		ИначеЕсли ТипЗнч(ОбъектРаботы) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО")
			Или ТипЗнч(ОбъектРаботы) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящийЭДО") Тогда
			
			ДокументыЭДО.Добавить(ОбъектРаботы);
		КонецЕсли;
		
	КонецЦикла;
	
	СтатусыДокументовДО = СтатусыРаботыПоДокументамДО(ДокументыДО);
	СтатусыДокументовЭДО = СтатусыРаботыПоДокументамЭДО(ДокументыЭДО);
	
	Для Каждого Объект Из ПодписанныеОбъекты Цикл
		
		ОбъектРаботы = ОбъектыРаботыПоПодписаннымОбъектам[Объект];
		Если Не ЗначениеЗаполнено(ОбъектРаботы) Тогда
			Продолжить;
		КонецЕсли;
		
		Статус = Неопределено;
		Если ДелопроизводствоКлиентСервер.ЭтоДокумент(ОбъектРаботы) Тогда
			Статус = СтатусыДокументовДО[ОбъектРаботы];
		ИначеЕсли ТипЗнч(ОбъектРаботы) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО")
			Или ТипЗнч(ОбъектРаботы) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящийЭДО") Тогда
			
			Статус = СтатусыДокументовЭДО[ОбъектРаботы];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Статус) Тогда
			СтатусыПоОбъектам[Объект] = Статус;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтатусыПоОбъектам;
	
КонецФункции

// Возвращает соответствие объектов с которыми может вестись работа по подписанным объектам
// 
// Параметры:
//  ПодписанныеОбъекты - Массив Из ОпределяемыйТип.ПодписанныйОбъект
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - ОпределяемыйТип.ПодписанныйОбъект
//    * Значение - СправочникСсылка.ДокументыПредприятия -
//               - ДокументСсылка.ЭлектронныйДокументВходящийЭДО -
//               - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО -
//               - Неопределено -
//
Функция ОбъектыРаботыПодписанныхОбъектов(ПодписанныеОбъекты)
	
	ОбъектыРаботы = Новый Соответствие();
	Для Каждого Объект Из ПодписанныеОбъекты Цикл
		ОбъектыРаботы[Объект] = Неопределено;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВерсииФайлов.Ссылка КАК Версия,
		|	ВерсииФайлов.Владелец КАК Файл
		|ПОМЕСТИТЬ ПодписанныеВерсииФайлов
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|ГДЕ
		|	ВерсииФайлов.Ссылка В (&ПодписанныеОбъекты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Файлы.Ссылка КАК Файл,
		|	Файлы.ВладелецФайла КАК ВладелецФайла
		|ПОМЕСТИТЬ ПодписанныеФайлы
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.Ссылка В (&ПодписанныеОбъекты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыПредприятия.Ссылка КАК Документ
		|ПОМЕСТИТЬ ПодписанныеДокументы
		|ИЗ
		|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
		|ГДЕ
		|	ДокументыПредприятия.Ссылка В (&ПодписанныеОбъекты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВизыСогласования.Ссылка КАК Виза,
		|	ВизыСогласования.Документ КАК Документ
		|ПОМЕСТИТЬ ПодписанныеВизы
		|ИЗ
		|	Справочник.ВизыСогласования КАК ВизыСогласования
		|ГДЕ
		|	ВизыСогласования.Ссылка В (&ПодписанныеОбъекты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеОзнакомленияПодПодпись.Ссылка КАК ДанныеОзнакомления,
		|	ДанныеОзнакомленияПодПодпись.Документ КАК Документ
		|ПОМЕСТИТЬ ПодписанныеДанныеОзнакомления
		|ИЗ
		|	Справочник.ДанныеОзнакомленияПодПодпись КАК ДанныеОзнакомленияПодПодпись
		|ГДЕ
		|	ДанныеОзнакомленияПодПодпись.Ссылка В (&ПодписанныеОбъекты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Резолюции.Ссылка КАК Резолюция,
		|	Резолюции.Документ КАК Документ
		|ПОМЕСТИТЬ ПодписанныеРезолюции
		|ИЗ
		|	Справочник.Резолюции КАК Резолюции
		|ГДЕ
		|	Резолюции.Ссылка В (&ПодписанныеОбъекты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СообщениеЭДОПрисоединенныеФайлы.Ссылка КАК ФайлСообщенияЭДО,
		|	СообщениеЭДОПрисоединенныеФайлы.ВладелецФайла КАК Сообщение
		|ПОМЕСТИТЬ ПодписанныеФайлыСообщенияЭДО
		|ИЗ
		|	Справочник.СообщениеЭДОПрисоединенныеФайлы КАК СообщениеЭДОПрисоединенныеФайлы
		|ГДЕ
		|	СообщениеЭДОПрисоединенныеФайлы.Ссылка В (&ПодписанныеОбъекты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодписанныеВерсииФайлов.Версия КАК ПодписанныйОбъект,
		|	Файлы.ВладелецФайла КАК Документ
		|ИЗ
		|	ПодписанныеВерсииФайлов КАК ПодписанныеВерсииФайлов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО ПодписанныеВерсииФайлов.Файл = Файлы.Ссылка
		|ГДЕ
		|	Файлы.ВладелецФайла ССЫЛКА Справочник.ДокументыПредприятия
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПодписанныеФайлы.Файл,
		|	ПодписанныеФайлы.ВладелецФайла
		|ИЗ
		|	ПодписанныеФайлы КАК ПодписанныеФайлы
		|ГДЕ
		|	ПодписанныеФайлы.ВладелецФайла ССЫЛКА Справочник.ДокументыПредприятия
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПодписанныеДокументы.Документ,
		|	ПодписанныеДокументы.Документ
		|ИЗ
		|	ПодписанныеДокументы КАК ПодписанныеДокументы
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПодписанныеДанныеОзнакомления.ДанныеОзнакомления,
		|	ПодписанныеДанныеОзнакомления.Документ
		|ИЗ
		|	ПодписанныеДанныеОзнакомления КАК ПодписанныеДанныеОзнакомления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПодписанныеРезолюции.Резолюция,
		|	ПодписанныеРезолюции.Документ
		|ИЗ
		|	ПодписанныеРезолюции КАК ПодписанныеРезолюции
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПодписанныеВизы.Виза,
		|	ПодписанныеВизы.Документ
		|ИЗ
		|	ПодписанныеВизы КАК ПодписанныеВизы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодписанныеФайлыСообщенияЭДО.ФайлСообщенияЭДО КАК ПодписанныйОбъект,
		|	СообщениеЭДО.ЭлектронныйДокумент КАК ДокументЭДО
		|ИЗ
		|	ПодписанныеФайлыСообщенияЭДО КАК ПодписанныеФайлыСообщенияЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО ПодписанныеФайлыСообщенияЭДО.Сообщение = СообщениеЭДО.Ссылка";
	Запрос.УстановитьПараметр("ПодписанныеОбъекты", ПодписанныеОбъекты);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаПоДокументам = РезультатыЗапроса[РезультатыЗапроса.ВГраница() - 1].Выбрать();
	ВыборкаПоДокументамЭДО = РезультатыЗапроса[РезультатыЗапроса.ВГраница()].Выбрать();
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		ОбъектыРаботы[ВыборкаПоДокументам.ПодписанныйОбъект] = ВыборкаПоДокументам.Документ;
	КонецЦикла;
	
	Пока ВыборкаПоДокументамЭДО.Следующий() Цикл
		ОбъектыРаботы[ВыборкаПоДокументамЭДО.ПодписанныйОбъект] = ВыборкаПоДокументамЭДО.ДокументЭДО;
	КонецЦикла;
	
	Возврат ОбъектыРаботы;
	
КонецФункции

// Возвращает статусы работы по документам ДО
// 
// Параметры:
//  ДокументыДО - Массив Из СправочникСсылка.ДокументыПредприятия
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - СправочникСсылка.ДокументыПредприятия
//    * Значение - Строка - см. РаботаСЭПКлиентСервер.СтатусыРаботыСПодписаннымиОбъектами
Функция СтатусыРаботыПоДокументамДО(ДокументыДО)
	
	ОбработкиДокументов = Справочники.ОбработкиОбъектов.ТекущиеОбработки(ДокументыДО);
	
	НаборОбработок = Новый Массив();
	Для Каждого Элемент Из ОбработкиДокументов Цикл
		
		Обработка = Элемент.Значение;
		
		Если Не ЗначениеЗаполнено(Обработка) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборОбработок.Добавить(Обработка);
		
	КонецЦикла;
	
	РеквизитыОбработок = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(НаборОбработок, "Состояние");
	
	СтатусыРабот = РаботаСЭПКлиентСервер.СтатусыРаботыСПодписаннымиОбъектами();
	СтатусыДокументов = Новый Соответствие();
	Для Каждого Документ Из ДокументыДО Цикл
		
		СтатусДокумента = СтатусыРабот.НеОпределен;
		
		ОбработкаДокумента = ОбработкиДокументов[Документ];
		РеквизитыОбработки = РеквизитыОбработок[ОбработкаДокумента];
		Если ЗначениеЗаполнено(РеквизитыОбработки) Тогда
			СтатусДокумента = СтатусРаботыПоСостояниюОбработки(РеквизитыОбработки.Состояние);
		КонецЕсли;
		
		СтатусыДокументов[Документ] = СтатусДокумента;
		
	КонецЦикла;
	
	Возврат СтатусыДокументов;
	
КонецФункции

// Возвращает статус работы по состоянию обработки документа
// 
// Параметры:
//  Состояние - ПеречислениеСсылка.СостоянияОбработкиОбъектов
// 
// Возвращаемое значение:
//  Строка - см. РаботаСЭПКлиентСервер.СтатусыРаботыСПодписаннымиОбъектами
Функция СтатусРаботыПоСостояниюОбработки(Состояние)
	
	Состояния = Перечисления.СостоянияОбработкиОбъектов;
	Статусы = РаботаСЭПКлиентСервер.СтатусыРаботыСПодписаннымиОбъектами();
	
	СтатусыПоСостояниям = Новый Соответствие();
	СтатусыПоСостояниям[Состояния.ПустаяСсылка()] = Статусы.НеОпределен;
	СтатусыПоСостояниям[Состояния.Выполняется] = Статусы.ВРаботе;
	СтатусыПоСостояниям[Состояния.Остановлена] = Статусы.НеОпределен;
	СтатусыПоСостояниям[Состояния.Прервана] = Статусы.НеОпределен;
	СтатусыПоСостояниям[Состояния.Завершена] = Статусы.РаботаЗавершена;
	
	Статус = СтатусыПоСостояниям[Состояние];
	Если Статус = Неопределено Тогда
		Возврат Статусы.НеОпределен;
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

// Возвращает статусы работы по документам ДО
// 
// Параметры:
//  ДокументыЭДО - Массив Из ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО -
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО -
//    * Значение - Строка - см. РаботаСЭПКлиентСервер.СтатусыРаботыСПодписаннымиОбъектами
Функция СтатусыРаботыПоДокументамЭДО(ДокументыЭДО)
	
	СостоянияПоДокументам = ЭлектронныеДокументыЭДО.СостоянияДокументов(ДокументыЭДО);
	
	СтатусыДокументов = Новый Соответствие();
	Для Каждого Документ Из ДокументыЭДО Цикл
		Состояние = СостоянияПоДокументам[Документ];
		СтатусДокумента = СтатусРаботыПоСостояниюЭДО(Состояние);
		СтатусыДокументов[Документ] = СтатусДокумента;
	КонецЦикла;
	
	Возврат СтатусыДокументов;
	
КонецФункции

// Возвращает статус работы по состоянию документа ЭДО
// 
// Параметры:
//  СостояниеЭДО - ПеречислениеСсылка.СостоянияДокументовЭДО
// 
// Возвращаемое значение:
//  Строка - см. РаботаСЭПКлиентСервер.СтатусыРаботыСПодписаннымиОбъектами
Функция СтатусРаботыПоСостояниюЭДО(СостояниеЭДО)
	
	Состояния = Перечисления.СостоянияДокументовЭДО;
	Статусы = РаботаСЭПКлиентСервер.СтатусыРаботыСПодписаннымиОбъектами();
	
	СтатусыПоСостояниям = Новый Соответствие();
	СтатусыПоСостояниям[Состояния.Аннулирован] = Статусы.РаботаЗавершена;
	СтатусыПоСостояниям[Состояния.ЗакрытПринудительно] = Статусы.РаботаЗавершена;
	СтатусыПоСостояниям[Состояния.ЗакрытСОтклонением] = Статусы.РаботаЗавершена;
	СтатусыПоСостояниям[Состояния.ЗакрытСОтклонениемПриглашения] = Статусы.РаботаЗавершена;
	СтатусыПоСостояниям[Состояния.ЗакрытСОшибкойПередачи] = Статусы.НеОпределен;
	СтатусыПоСостояниям[Состояния.НеПолучен] = Статусы.НеОпределен;
	СтатусыПоСостояниям[Состояния.НеСформирован] = Статусы.НеОпределен;
	СтатусыПоСостояниям[Состояния.ОбменЗавершен] = Статусы.РаботаЗавершена;
	СтатусыПоСостояниям[Состояния.ОбменЗавершенСИсправлением] = Статусы.РаботаЗавершена;
	СтатусыПоСостояниям[Состояния.ОжидаетсяИзвещениеОПолучении] = Статусы.ВРаботе;
	СтатусыПоСостояниям[Состояния.ОжидаетсяИзвещениеПоОтклонению] = Статусы.ВРаботе;
	СтатусыПоСостояниям[Состояния.ОжидаетсяИсправление] = Статусы.ВРаботе;
	СтатусыПоСостояниям[Состояния.ОжидаетсяОтветНаПриглашение] = Статусы.ВРаботе;
	СтатусыПоСостояниям[Состояния.ОжидаетсяПередачаОператору] = Статусы.ВРаботе;
	СтатусыПоСостояниям[Состояния.ОжидаетсяПодтверждение] = Статусы.ВРаботе;
	СтатусыПоСостояниям[Состояния.ОжидаетсяПодтверждениеАннулирования] = Статусы.ВРаботе;
	СтатусыПоСостояниям[Состояния.ОжидаетсяПодтверждениеОператора] = Статусы.ВРаботе;
	СтатусыПоСостояниям[Состояния.ТребуетсяИзвещениеОПолучении] = Статусы.ВРаботе;
	СтатусыПоСостояниям[Состояния.ТребуетсяИзвещениеПоОтклонению] = Статусы.ВРаботе;
	СтатусыПоСостояниям[Состояния.ТребуетсяИсправлениеОшибкиПередачи] = Статусы.НеОпределен;
	СтатусыПоСостояниям[Состояния.ТребуетсяОтправка] = Статусы.ВРаботе;
	СтатусыПоСостояниям[Состояния.ТребуетсяОтправкаАннулирования] = Статусы.ВРаботе;
	СтатусыПоСостояниям[Состояния.ТребуетсяОтправкаИзвещения] = Статусы.ВРаботе;
	СтатусыПоСостояниям[Состояния.ТребуетсяОтправкаИзвещенияПоОтклонению] = Статусы.ВРаботе;
	СтатусыПоСостояниям[Состояния.ТребуетсяОтправкаОтклонения] = Статусы.ВРаботе;
	СтатусыПоСостояниям[Состояния.ТребуетсяОтправкаПриглашения] = Статусы.ВРаботе;
	СтатусыПоСостояниям[Состояния.ТребуетсяПовторнаяОтправка] = Статусы.ВРаботе;
	СтатусыПоСостояниям[Состояния.ТребуетсяПодготовкаКОтправке] = Статусы.ВРаботе;
	СтатусыПоСостояниям[Состояния.ТребуетсяПодготовкаКОтправкеАннулирования] = Статусы.ВРаботе;
	СтатусыПоСостояниям[Состояния.ТребуетсяПодготовкаКОтправкеИзвещения] = Статусы.ВРаботе;
	СтатусыПоСостояниям[Состояния.ТребуетсяПодготовкаКОтправкеИзвещенияПоОтклонению] = Статусы.ВРаботе;
	СтатусыПоСостояниям[Состояния.ТребуетсяПодготовкаКОтправкеОтклонения] = Статусы.ВРаботе;
	СтатусыПоСостояниям[Состояния.ТребуетсяПодписание] = Статусы.ВРаботе;
	СтатусыПоСостояниям[Состояния.ТребуетсяПодписаниеАннулирования] = Статусы.ВРаботе;
	СтатусыПоСостояниям[Состояния.ТребуетсяПодписаниеИзвещения] = Статусы.ВРаботе;
	СтатусыПоСостояниям[Состояния.ТребуетсяПодписаниеИзвещенияПоОтклонению] = Статусы.ВРаботе;
	СтатусыПоСостояниям[Состояния.ТребуетсяПодписаниеОтклонения] = Статусы.ВРаботе;
	СтатусыПоСостояниям[Состояния.ТребуетсяПодтверждениеАннулирования] = Статусы.ВРаботе;
	СтатусыПоСостояниям[Состояния.ТребуетсяУтверждение] = Статусы.ВРаботе;
	СтатусыПоСостояниям[Состояния.ТребуетсяУточнение] = Статусы.ВРаботе;
	СтатусыПоСостояниям[Состояния.ОжидаетсяОбработкаОблачнымЭДО] = Статусы.ВРаботе;
	
	Статус = СтатусыПоСостояниям[СостояниеЭДО];
	Если Статус = Неопределено Тогда
		Возврат Статусы.НеОпределен;
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

#КонецОбласти

#КонецОбласти