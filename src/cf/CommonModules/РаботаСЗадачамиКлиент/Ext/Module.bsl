////////////////////////////////////////////////////////////////////////////////
// Работа с задачами (клиент).
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает на доработку задачу.
//
// Параметры:
//  ЗадачаИлиДействие - ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи - Задача или действие.
//
Процедура ВернутьНаДоработку(ЗадачаИлиДействие) Экспорт
	
	Если Не ЗначениеЗаполнено(ЗадачаИлиДействие) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВернутьНаДоработкуПослеВводаПричины",
		ЭтотОбъект,
		ЗадачаИлиДействие);
	
	ПараметрыОткрытия = Новый Структура("ЗадачаИлиДействие", ЗадачаИлиДействие);
	
	ОткрытьФорму(
		"Документ.Задача.Форма.ВводПричиныВозврата",
		ПараметрыОткрытия,,,,,
		ОписаниеОповещения);

КонецПроцедуры

// Открывает форму выбора результата действия текстом.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//  ОписаниеОповещения - ОписаниеОповещения.
//
Процедура ВыбратьРезультатДействияТекстом(ДействиеЗадачи, ОписаниеОповещения) Экспорт
	
	ПараметрыВыбора = РаботаСЗадачамиВызовСервера.ПараметрыВыбораРезультатаДействияТекстом(
		ДействиеЗадачи);
	
	ПараметрыФормы = Новый Структура("ОбластьПрименения, Заголовок, ЗаголовокФормыСоздания");
	ПараметрыФормы.ОбластьПрименения = ПараметрыВыбора.ОбластьПрименения;
	ПараметрыФормы.Заголовок = ПараметрыВыбора.ЗаголовокФормыВыбора;
	ПараметрыФормы.ЗаголовокФормыСоздания = ПараметрыВыбора.ЗаголовокФормыСоздания;
	
	ОткрытьФорму("Справочник.ШаблоныТекстов.ФормаВыбора", 
		ПараметрыФормы,,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

// Показывает выбор участника задачи, для выбора действия задачи.
// 
// Параметры:
//  Задача - ДокументСсылка.Задача.
//  ОписаниеОповещения - ОписаниеОповещения.
Процедура ВыбратьДействиеЗадачи(Задача, ОписаниеОповещения) Экспорт
	
	СписокВыбораДействийЗадачи = РаботаСЗадачамиВызовСервера.СписокВыбораДействийЗадачи(Задача);
	
	СписокВыбораДействийЗадачи.ПоказатьВыборЭлемента(
		ОписаниеОповещения,
		НСтр("ru = 'Выбор исполнителя'"));
	
КонецПроцедуры

// Берёт в работу действия задачи.
//
// Параметры:
//  ДействияЗадач - Массив из ДокументСсылка.ДействиеЗадачи.
//  Владелец - ФормаКлиентскогоПриложения.
//  ВыбранныйФактическийИсполнитель - Структура.
//
Процедура ВзятьВРаботу(ДействияЗадач, Владелец, ВыбранныйФактическийИсполнитель = Неопределено) Экспорт
	
	Если ДействияЗадач.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КлючевыеОперации = "ЗадачиВзятьВРаботу";
	Если ДействияЗадач.Количество() > 1 Тогда
		КлючевыеОперации = "ЗадачиВзятьВРаботуНесколькоЗадач";
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(КлючевыеОперации);
	
	Попытка
		
		РезультатВзятияВРаботу =
			РаботаСЗадачамиВызовСервера.ВзятьВРаботу(
				ДействияЗадач,
				ВыбранныйФактическийИсполнитель);
		
		Если РезультатВзятияВРаботу.ВзятиеВРаботуОбработано Тогда
			ОповеститьОбОперации(
				ДействияЗадач,
				НСтр("ru = 'Взята в работу'"));
		КонецЕсли;
		
		Если РезультатВзятияВРаботу.НужноВыбратьФактическогоИсполнителя Тогда
			ВзятьВРаботуСВыборомИсполнителя(
				РезультатВзятияВРаботу.ДействияДляВыбора,
				Владелец);
		КонецЕсли;
		
	Исключение
		
		ОповеститьОбИсключении();
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Берёт в работу действия задачи с выбором фактического исполнителя.
//
// Параметры:
//  ДействияЗадач - Массив из ДокументСсылка.ДействиеЗадачи - Действия задач.
//  Владелец - ФормаКлиентскогоПриложения - Владелец формы выбора исполнителя.
//
Процедура ВзятьВРаботуСВыборомИсполнителя(ДействияЗадач, Владелец) Экспорт
	
	Если ДействияЗадач.Количество() = 0
		Или ОткрытВыборФактическогоИсполнителя(Владелец) Тогда
		Возврат;
	КонецЕсли;
	
	КлючевыеОперации = "ЗадачиВыборФактическогоИсполнителя";
	ОценкаПроизводительностиКлиент.ЗамерВремени(КлючевыеОперации);
	
	КонтекстВзятияВРаботу = Новый Структура;
	КонтекстВзятияВРаботу.Вставить("ДействияЗадач", ДействияЗадач);
	КонтекстВзятияВРаботу.Вставить("Владелец", Владелец);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВзятьВРаботуПослеВыбораИсполнителя",
		ЭтотОбъект,
		КонтекстВзятияВРаботу);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДействияЗадач", ДействияЗадач);
	
	ОткрытьФорму("ОбщаяФорма.ВыборФактическогоИсполнителяЗадачи", 
		ПараметрыФормы,
		Владелец,
		Владелец.УникальныйИдентификатор,,,
		ОписаниеОповещения);
	
КонецПроцедуры

// Включает отчет об исполнении и приложения в отчет об исполнении вышестоящей задачи.
//
// Параметры:
//  ЗадачаИлиДействие - ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи - Задача или действие.
//  Владелец - ФормаКлиентскогоПриложения.
//
Процедура ВзятьОтчетОбИсполненииИПриложения(ЗадачаИлиДействие, Владелец) Экспорт
	
	Если Не ЗначениеЗаполнено(ЗадачаИлиДействие) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		РезультатВзятияОтчета =
			РаботаСЗадачамиВызовСервера.ВзятьОтчетОбИсполненииИПриложения(ЗадачаИлиДействие);
		
		Если ЗначениеЗаполнено(РезультатВзятияОтчета.ИзмененноеДействие) Тогда
			ОповеститьОбОперации(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
					РезультатВзятияОтчета.ИзмененноеДействие),
				НСтр("ru = 'Взят отчет об исполнении'"));
		КонецЕсли;
		
		Если РезультатВзятияОтчета.НужноВыбратьФактическогоИсполнителя Тогда
			ВзятьВРаботуСВыборомИсполнителя(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
					РезультатВзятияОтчета.ДействиеДляВзятияВРаботу),
				Владелец);
		КонецЕсли;
		
	Исключение
		
		ОповеститьОбИсключении();
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Выполняет действие задачи.
//
// Параметры:
//  ДействияЗадач - Массив из ДокументСсылка.ДействиеЗадачи - Действия задач.
//  РезультатДействия - СправочникСсылка.РезультатыДействийЗадач.
//  ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
//  ВерсииДанных - Соответствие из КлючИЗначение - Соответствие действий задач и их версий данных для последующей проверки.
//
Процедура ВыполнитьДействиеЗадачи(
	ДействияЗадач, РезультатДействия, ФормаВладелец, ВерсииДанных = Неопределено) Экспорт
	
	Если ДействияЗадач.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	АвтоЗавершение = Ложь;
	Если ДействияЗадач.Количество() = 1 Тогда
		КлючевыеОперации = "ВыполнитьДействиеЗадачиОднаЗадача";
		УИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени(КлючевыеОперации,,АвтоЗавершение);
	Иначе
		КлючевыеОперации = "ВыполнитьДействиеЗадачиНесколькоЗадач";
		УИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени(КлючевыеОперации,АвтоЗавершение);
	КонецЕсли;	
	
	Попытка
		
		ПараметрыВыполнения = РаботаСЗадачамиКлиентСервер.НовыйПараметрыВыполненияДействийЗадач();
		Если ВерсииДанных <> Неопределено Тогда
			ПараметрыВыполнения.ВерсииДанных = ВерсииДанных;
		КонецЕсли;
		ПараметрыВыполнения.ДанныеФормыВладельца.ИмяФормы = ФормаВладелец.ИмяФормы;
		ПараметрыВыполнения.ДанныеФормыВладельца.ИдентификаторФормы = ФормаВладелец.УникальныйИдентификатор;
		
		ДанныеВыполнения = РаботаСЗадачамиВызовСервера.ВыполнитьДействиеЗадачи(
			ДействияЗадач,
			РезультатДействия,
			ПараметрыВыполнения);
		
		КонтекстВыполненияЗадачи = НовыйКонтекстВыполненияЗадачи();
		КонтекстВыполненияЗадачи.ДействияЗадач = ДействияЗадач;
		КонтекстВыполненияЗадачи.РезультатДействия = РезультатДействия;
		КонтекстВыполненияЗадачи.ИдентификаторФормы = ФормаВладелец.УникальныйИдентификатор;
		КонтекстВыполненияЗадачи.ПараметрыВыполнения = ПараметрыВыполнения;
		КонтекстВыполненияЗадачи.ДанныеВыполнения = ДанныеВыполнения;
		КонтекстВыполненияЗадачи.УИДЗамера = УИДЗамера;
		
		ОбработатьДанныеВыполнения(КонтекстВыполненияЗадачи, ФормаВладелец);
		
	Исключение
		
		ОповеститьОбИсключении();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Обработчик оповещения процедуры ВыполнитьДействиеЗадачи.
// 
// Параметры:
//  Результат - Неопределено.
//  ДополнительныеПараметры - Неопределено.
//
Процедура ВыполнитьДействиеЗадачиПослеВводаВремени(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Обработка не требуется
	
КонецПроцедуры

// Развернуть дерево приложений
// 
// Параметры:
//  РеквизитДеревоПриложений - ДанныеФормыДерево.
//  ЭлементДеревоПриложений - ТаблицаФормы.
//
Процедура ДеревоПриложенийРазвернуть(РеквизитДеревоПриложений, ЭлементДеревоПриложений) Экспорт
	
	Для Каждого ЭлементДереваПервогоУровня Из РеквизитДеревоПриложений.ПолучитьЭлементы() Цикл
		
		// сперва Предметы
		ЭлементДеревоПриложений.Развернуть(
			ЭлементДереваПервогоУровня.ПолучитьИдентификатор(),
			Ложь);
		
		// тут роли
		Для Каждого ЭлементДереваВторогоУровня ИЗ ЭлементДереваПервогоУровня.ПолучитьЭлементы() Цикл
			
			Если ЗначениеЗаполнено(ЭлементДереваВторогоУровня.РольФайла)
				И ЭлементДереваВторогоУровня.РольОбязательная Тогда
				
				ЭлементДеревоПриложений.Развернуть(
					ЭлементДереваВторогоУровня.ПолучитьИдентификатор(),
					Ложь);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры	

// Добавляет приложение задачи.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//  ИмяПриложения - СправочникСсылка.ИменаПредметов.
//  Приложение - ОпределяемыйТип.ПриложениеЗадач.
//
Процедура ДобавитьПриложениеЗадачи(ДействиеЗадачи, ИмяПриложения, Приложение) Экспорт
	
	Если Не ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = РаботаСЗадачамиВызовСервера.ПараметрыДобавленияПриложенияЗадачи(ДействиеЗадачи);
	ИсточникДействияЗадачи = ПараметрыВыполнения.ИсточникДействияЗадачи;
	БизнесПроцесс = ПараметрыВыполнения.БизнесПроцесс;
	ВедущаяЗадача = ПараметрыВыполнения.ВедущаяЗадача;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("БизнесПроцесс", БизнесПроцесс);
	ПараметрыОткрытия.Вставить("ПроверкаЗаполнения", Истина);
	ПараметрыОткрытия.Вставить("Предмет", Приложение);
	ПараметрыОткрытия.Вставить("РольПредмета", ПредопределенноеЗначение("Перечисление.РолиПредметов.Заполняемый"));
	ПараметрыОткрытия.Вставить("ИмяПредмета", ИмяПриложения);
	
	СписокИменПриложений = Новый СписокЗначений;
	СписокИменПриложений.Добавить(ИмяПриложения);
	ПараметрыОткрытия.Вставить("ИменаПредметов", СписокИменПриложений);
	
	Если Приложение = Неопределено Тогда
		
		ИмяФормыВыбораПредмета = "ОбщаяФорма.ВыборПредметаБизнесПроцессаРасширенный";
		
	ИначеЕсли ТипЗнч(Приложение) = Тип("СправочникСсылка.Файлы") Тогда
		
		Если МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(БизнесПроцесс)
			Или МультипредметностьКлиентСервер.ЭтоПроцессОбработкиДокументов(БизнесПроцесс)
			Или МультипредметностьКлиентСервер.ЭтоПроцессРассмотрения(БизнесПроцесс)
			Или ЗначениеЗаполнено(ВедущаяЗадача) Тогда
			
			ИмяФормыВыбораПредмета = "Справочник.Файлы.Форма.ФормаВыбораФайлаВПапках";
			
		Иначе
			
			Если РаботаСоСканеромКлиентПовтИсп.ДоступнаКомандаСканировать() Тогда
				
				ИмяФормыВыбораПредмета = "ОбщаяФорма.ВыборПредметаБизнесПроцессаФайлаСоСканера";
				
			Иначе
				
				ИмяФормыВыбораПредмета = "ОбщаяФорма.ВыборПредметаБизнесПроцессаФайла";
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ИмяФормыВыбораПредмета = "ОбщаяФорма.ВыборПредметаБизнесПроцессаБыстрый";
		
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДействиеЗадачи", ДействиеЗадачи);
	ПараметрыОбработчика.Вставить("ИмяПредмета", ИмяПриложения);
	ПараметрыОбработчика.Вставить("ИсточникДействияЗадачи", ИсточникДействияЗадачи);
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(
		"ДобавитьПредметЗадачиПослеВыбора",
		ЭтотОбъект,
		ПараметрыОбработчика);
	
	ОткрытьФорму(
		ИмяФормыВыбораПредмета,
		ПараметрыОткрытия,,,,,
		ОписаниеОповещенияОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Удаляет приложение задачи.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//  ИмяПредмета - СправочникСсылка.ИменаПредметов.
//
Процедура УдалитьПриложениеЗадачи(ДействиеЗадачи, ИмяПредмета) Экспорт
	
	Если Не ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = РаботаСЗадачамиВызовСервера.ПараметрыДобавленияПриложенияЗадачи(ДействиеЗадачи);
	ИсточникДействияЗадачи = ПараметрыВыполнения.ИсточникДействияЗадачи;
	
	Попытка
		
		МультипредметностьВызовСервера.ИзменитьПредметКорневогоБизнесПроцесса(
			ИсточникДействияЗадачи,
			Неопределено,
			ИмяПредмета,
			Неопределено, 
			Истина);
		
	Исключение
		
		//@skip-check object-deprecated
		СообщениеОбОшибке = СтрШаблон(
			НСтр("ru = 'Не удалось установить предмет в задаче:
			|%1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение СообщениеОбОшибке;
		
	КонецПопытки;
	
	ОповеститьОбОперации(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДействиеЗадачи),
		НСтр("ru = 'Удален предмет'"));
	
КонецПроцедуры

// Добавляет приложение к отчету об исполнении задачи.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//  ФормаВладелец - ФормаКлиентскогоПриложения.
//
Асинх Процедура ДобавитьКартинкуИзБуфераКОтчету(ДействиеЗадачи, ФормаВладелец) Экспорт
	
	Контекст = Новый Структура("ДействиеЗадачи, ФормаВладелец, ПутьКФайлу", ДействиеЗадачи, ФормаВладелец, "");
	
	КартинкаИзБуфераОбмена = Ждать СредстваБуфераОбмена.ПолучитьДанныеАсинх(СтандартныйФорматДанныхБуфераОбмена.Картинка);
	
	Если КартинкаИзБуфераОбмена = Неопределено Тогда
		ПоказатьПредупреждение(
			, НСтр(
				"ru='Буфер обмена не содержит картинки'"
				, "ru"
			)
		);
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = "";
	
#Если Не ВебКлиент Тогда 
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла("png");
	КартинкаИзБуфераОбмена.Записать(ПутьКФайлу);
	
	Контекст.ПутьКФайлу = ПутьКФайлу;

#КонецЕсли
	
	ЗавершитьДобавлениеКартинкиИзБуфераКОтчету(Истина, Контекст);
	
КонецПроцедуры

// Добавляет приложение к отчету об исполнении задачи.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//  ФормаВладелец - ФормаКлиентскогоПриложения.
//
Процедура ДобавитьПриложениеКОтчету(ДействиеЗадачи, ФормаВладелец) Экспорт
	
	Контекст = Новый Структура("ДействиеЗадачи, ФормаВладелец", ДействиеЗадачи, ФормаВладелец);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьДобавлениеПриложенияКОтчету", ЭтотОбъект, Контекст);
	
	ОткрытьФорму(
		"Документ.ДействиеЗадачи.Форма.ВыборПриложения",
		Новый Структура("ДействиеЗадачи", ДействиеЗадачи),,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

// Добавляет файл к отчету об исполнении задачи.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//  ФормаВладелец - ФормаКлиентскогоПриложения.
//
Процедура ДобавитьФайлКОтчету(ДействиеЗадачи, ФормаВладелец) Экспорт
	
	РежимСоздания = 2; // с диска
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
	НеОткрыватьФормуВыбораРежимаСозданияФайла = Истина;
	
	Контекст = Новый Структура("ДействиеЗадачи, ФормаВладелец", ДействиеЗадачи, ФормаВладелец);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьДобавлениеПриложенияКОтчету", ЭтотОбъект, Контекст);
	
	РаботаСФайламиКлиент.ДобавитьФайл(
		ОписаниеОповещения,
		ДействиеЗадачи,
		ФормаВладелец,
		РежимСоздания,
		НеОткрыватьКарточкуПослеСозданияИзФайла,
		,,,,
		НеОткрыватьФормуВыбораРежимаСозданияФайла);
	
КонецПроцедуры

// Закрывает указанные задачи.
//
// Параметры:
//  ЗадачиКЗакрытию - Массив из ДокументСсылка.Задача.
//
Процедура Закрыть(ЗадачиКЗакрытию) Экспорт
	
	Попытка
		
		ДлительнаяОперация = РаботаСЗадачамиВызовСервера.Закрыть(ЗадачиКЗакрытию);
		
		Если ДлительнаяОперация <> Неопределено Тогда
			
			Обработчик = Новый ОписаниеОповещения(
				"ЗакрытьПослеДлительнойОперации",
				ЭтотОбъект,
				ЗадачиКЗакрытию);
			
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
			ПараметрыОжидания.Заголовок = НСтр("ru = 'Закрытие задач'");
			ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
			
			ДлительныеОперацииКлиент.ОжидатьЗавершение(
				ДлительнаяОперация,
				Обработчик,
				ПараметрыОжидания);
			
		Иначе
			
			ОповеститьОбОперацииЗакрыть(ЗадачиКЗакрытию);
			
		КонецЕсли;
		
	Исключение
		
		ОповеститьОбИсключении();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Проверяет заполненность полей задачи и направляет её на исполнение, если все поля корректно заполнены.
//
// Параметры:
//  Задача - ДокументСсылка.Задача.
//  ИдентификаторФормы - УникальныйИдентификатор.
//
Процедура НаправитьНаИсполнение(Задача, ИдентификаторФормы) Экспорт
	
	Попытка
		
		ПараметрыНаправленияНаИсполнение =
			РаботаСЗадачамиКлиентСервер.НовыйПараметрыНаправленияНаИсполнение();
		ПараметрыНаправленияНаИсполнение.Задача = Задача;
		ПараметрыНаправленияНаИсполнение.ЭтоИнтерактивноеДействие = Истина;
		ПараметрыНаправленияНаИсполнение.ИдентификаторФормы = ИдентификаторФормы;
		
		РезультатНаправленияНаИсполнение =
			РаботаСЗадачамиВызовСервера.НаправитьНаИсполнение(ПараметрыНаправленияНаИсполнение);
		
		ОбработатьРезультатНаправленияНаИсполнение(РезультатНаправленияНаИсполнение);
	
	Исключение
		ОповеститьОбИсключении();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обработать команду жизненного цикла.
// 
// Параметры:
//  Команда - КомандаФормы.
//  ДанныеЖизненногоЦикла - ДанныеФормыКоллекция.
//  УникальныйИдентификатор - УникальныйИдентификатор.
//  ПредыдущийАдресФайла - Строка.
//  ЗадачаИлиДействие - ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи - Задача.
// 
Процедура ОбработатьКомандуЖизненногоЦикла(Команда, ДанныеЖизненногоЦикла, УникальныйИдентификатор, ПредыдущийАдресФайла, ЗадачаИлиДействие) Экспорт
	
	ВыбраннаяКоманда = Неопределено;
	Приложение = Неопределено;
	Для Каждого ЭлементДанныхЖизненногоЦикла Из ДанныеЖизненногоЦикла Цикл
		
		Для Каждого ЭлементДанныхПриложения Из ЭлементДанныхЖизненногоЦикла.ДанныеПриложенийУзла Цикл
			
			Если ЭлементДанныхПриложения.Значение.КомандаПросмотреть = Команда.Имя Тогда
				ВыбраннаяКоманда = "Просмотреть";
			ИначеЕсли ЭлементДанныхПриложения.Значение.КомандаСохранитьНаДиск = Команда.Имя Тогда
				ВыбраннаяКоманда = "СохранитьНаДиск";
			Иначе
				Продолжить;
			КонецЕсли;
			
			Приложение = ЭлементДанныхПриложения.Значение.Приложение;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Приложение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбраннаяКоманда = "Просмотреть" Тогда
		
		ПросмотретьПриложениеЖизненногоЦикла(
			Приложение,
			УникальныйИдентификатор,
			ПредыдущийАдресФайла);
		
	ИначеЕсли ВыбраннаяКоманда = "СохранитьНаДиск" Тогда
		
		СохранитьНаДискПриложениеЖизненногоЦикла(Приложение, УникальныйИдентификатор);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестная команда %1.'"), ВыбраннаяКоманда);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработать нажатие жизненного цикла.
// 
// Параметры:
//  Элемент - ДекорацияФормы.
//  ДанныеЖизненногоЦикла - ДанныеФормыКоллекция.
//  СтандартнаяОбработка - Булево.
//  УникальныйИдентификатор - УникальныйИдентификатор.
//  ПредыдущийАдресФайла - Строка.
//  ЗадачаИлиДействие - ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи - Задача.
// 
Процедура ОбработатьНажатиеЖизненногоЦикла(Элемент, ДанныеЖизненногоЦикла, СтандартнаяОбработка, УникальныйИдентификатор, ПредыдущийАдресФайла, ЗадачаИлиДействие) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Элемент.Подсказка)
		И Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Нет Тогда
		РаботаС_HTMLКлиент.ОбработатьСсылку1СДокументооборота(Элемент.Подсказка);
		Возврат;
	КонецЕсли;
	
	Приложение = Неопределено;
	Для Каждого ЭлементДанныхЖизненногоЦикла Из ДанныеЖизненногоЦикла Цикл
		
		Для Каждого ЭлементДанныхПриложения Из ЭлементДанныхЖизненногоЦикла.ДанныеПриложенийУзла Цикл
			
			Если ЭлементДанныхПриложения.Значение.КартинкаПриложения <> Элемент.Имя
				И ЭлементДанныхПриложения.Значение.ЗаголовокПриложения <> Элемент.Имя Тогда
				Продолжить;
			КонецЕсли;
			
			Приложение = ЭлементДанныхПриложения.Значение.Приложение;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Приложение) Тогда
		Возврат;
	КонецЕсли;
	
	ПросмотретьПриложениеЖизненногоЦикла(
		Приложение,
		УникальныйИдентификатор,
		ПредыдущийАдресФайла);
	
КонецПроцедуры

// Проверяет, что открыт выбор фактического исполнителя.
// 
// Параметры:
//  Владелец - ФормаКлиентскогоПриложения.
// 
// Возвращаемое значение:
//  Булево - Открыт выбор фактического исполнителя.
//  
Функция ОткрытВыборФактическогоИсполнителя(Владелец) Экспорт
	
	ОткрытВыборФактическогоИсполнителя = Ложь;
	
	Для Каждого ОчередноеОкно Из ПолучитьОкна() Цикл
		
		Для Каждого ЭлементСодержимого Из ОчередноеОкно.Содержимое Цикл
			
			Если ТипЗнч(ЭлементСодержимого) = Тип("ФормаКлиентскогоПриложения")
				И ЭлементСодержимого.ВладелецФормы = Владелец
				И ЭлементСодержимого.ИмяФормы = "ОбщаяФорма.ВыборФактическогоИсполнителяЗадачи"
				И Владелец <> Неопределено Тогда
				
				ОткрытВыборФактическогоИсполнителя = Истина;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ОткрытВыборФактическогоИсполнителя;
	
КонецФункции

// Открывает карточку автор или исполнителя задачи.
// 
// Параметры:
//  ЗадачаИлиДействиеЗадачи - ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи - Задача.
//
Процедура ОткрытьКарточкуЗадачи(ЗадачаИлиДействиеЗадачи) Экспорт
	
	Если Не ЗначениеЗаполнено(ЗадачаИлиДействиеЗадачи) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ЗадачаИлиДействиеЗадачи) = Тип("ДокументСсылка.Задача") Тогда
		ОткрытьКарточкуАвтораЗадачи(ЗадачаИлиДействиеЗадачи);
	ИначеЕсли ТипЗнч(ЗадачаИлиДействиеЗадачи) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		ОткрытьКарточкуИсполнителяЗадачи(ЗадачаИлиДействиеЗадачи);
	КонецЕсли;
	
КонецПроцедуры

// Открывает карточку исполнителя задачи.
// 
// Параметры:
//  Задача - ДокументСсылка.Задача.
//
Процедура ОткрытьКарточкуАвтораЗадачи(Задача) Экспорт
	
	ПараметрыОткрытия =
		РаботаСЗадачамиВызовСервера.ПараметрыОткрытияКарточкиАвтора(Задача);
	
	ОткрытьФорму(
		ПараметрыОткрытия.ИмяФормы,
		ПараметрыОткрытия.ПараметрыФормы,,
		ПараметрыОткрытия.ПараметрыФормы.Ключ);
	
КонецПроцедуры

// Открывает карточку исполнителя задачи.
// 
// Параметры:
//  КлючОткрытия - Произвольный - Ключ открытия - Обычная ссылка или навигационная ссылка.
//  ДополнительныеПараметрыОткрытия - Структура, Неопределено - Дополнительные параметры открытия.
//  ТихаяПопытка - Булево - Тихая попытка получения параметров открытия, без исключения.
// 
// Возвращаемое значение:
//  Булево - Ключ открытия передан корректный, карточка открыта.
//  
Функция ОткрытьКарточкуИсполнителяЗадачи(КлючОткрытия, ДополнительныеПараметрыОткрытия = Неопределено, ТихаяПопытка = Истина) Экспорт
	
	КлючевыеОперации = "ЗадачиОткрытиеФормыКарточкиЗадачи";
	ОценкаПроизводительностиКлиент.ЗамерВремени(КлючевыеОперации);
	
	ПараметрыОткрытия =
		РаботаСЗадачамиВызовСервера.ПараметрыОткрытияКарточкиИсполнителя(
			КлючОткрытия,
			ДополнительныеПараметрыОткрытия,
			ТихаяПопытка);
	
	Если Не ПараметрыОткрытия.КлючОткрытияКорректный Тогда
		
		КарточкаОткрыта = Ложь;
		
		Возврат КарточкаОткрыта;
		
	КонецЕсли;
	
	ОткрытьФорму(
		ПараметрыОткрытия.ИмяФормы,
		ПараметрыОткрытия.ПараметрыФормы,,
		ПараметрыОткрытия.ПараметрыФормы.Ключ);
	
	КарточкаОткрыта = Истина;
	
	Возврат КарточкаОткрыта;
	
КонецФункции

// Отменяет указанные задачи.
//
// Параметры:
//  ЗадачиКОтмене - Массив из ДокументСсылка.Задача.
//
Процедура Отменить(ЗадачиКОтмене) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтменитьПослеВводаПричиныОтмены",
		ЭтотОбъект,
		ЗадачиКОтмене);
	
	ПараметрыФормы = Новый Структура("ЗадачиКОтмене", ЗадачиКОтмене);
	
	ОткрытьФорму("Документ.Задача.Форма.ВводПричиныОтмены", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

// Отменяет выполнение действия задачи.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//  ВерсияДанных - Строка.
//
Процедура ОтменитьВыполнение(ДействиеЗадачи, ВерсияДанных) Экспорт
	
	Если Не ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ЗадачиОтменитьВыполнение");
	
	Попытка
		
		РаботаСЗадачамиВызовСервера.ОтменитьВыполнение(
			ДействиеЗадачи,
			ВерсияДанных);
		
		ОповеститьОбОперации(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДействиеЗадачи),
			НСтр("ru = 'Отменено выполнение'"));
		
	Исключение
		
		ОповеститьОбИсключении();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Оповещает об исключении при выполнении операции с задачами.
//
Процедура ОповеститьОбИсключении() Экспорт
	
	ОповеститьОбИзменении(Тип("ДокументСсылка.Задача"));
	Оповестить("Запись_Задача");
	
	ОповеститьОбИзменении(Тип("ДокументСсылка.ДействиеЗадачи"));
	Оповестить("Запись_ДействиеЗадачи");
	
КонецПроцедуры

// Рассылает оповещение об операции.
//
// Параметры:
//  ЗадачиИлиДействия - Массив из ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи.
//  ПредставлениеОперации - Строка.
//
Процедура ОповеститьОбОперации(ЗадачиИлиДействия, ПредставлениеОперации) Экспорт
	
	// Оповещение пользователю.
	НавигационнаяСсылка = ?(ЗадачиИлиДействия.Количество() = 1,
		ПолучитьНавигационнуюСсылку(ЗадачиИлиДействия[0]),
		Неопределено);
	
	Пояснение = ?(ЗадачиИлиДействия.Количество() = 1,
		Строка(ЗадачиИлиДействия[0]),
		СтрокаСЧислом(
			НСтр("ru = ';%1 задача;;%1 задачи;%1 задач;%1 задачи'"),
			ЗадачиИлиДействия.Количество(),
			ВидЧисловогоЗначения.Количественное));
		
	ПоказатьОповещениеПользователя(
		ПредставлениеОперации,
		НавигационнаяСсылка,
		Пояснение,
		БиблиотекаКартинок.ДиалогИнформация);
	
	// Оповещение формам.
	МассивЗадач = Новый Массив;
	МассивДействийЗадач = Новый Массив;
	Для Каждого ЗадачаИлиДействие Из ЗадачиИлиДействия Цикл
		
		ИсторияРаботыПользователя.Добавить(ЗадачаИлиДействие);
		
		Если ТипЗнч(ЗадачаИлиДействие) = Тип("ДокументСсылка.Задача") Тогда
			МассивЗадач.Добавить(ЗадачаИлиДействие);
		ИначеЕсли ТипЗнч(ЗадачаИлиДействие) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
			МассивДействийЗадач.Добавить(ЗадачаИлиДействие);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивЗадач.Количество() = 1 Тогда
		
		ЕдинственнаяЗадача = МассивЗадач[0];
		ОповеститьОбИзменении(ЕдинственнаяЗадача);
		Оповестить("Запись_Задача",, ЕдинственнаяЗадача);
		
	ИначеЕсли МассивЗадач.Количество() > 1 Тогда
		
		ОповеститьОбИзменении(Тип("ДокументСсылка.Задача"));
		Оповестить("Запись_Задача");
		
	КонецЕсли;
	
	Если МассивДействийЗадач.Количество() = 1 Тогда
		
		ЕдинственноеДействиеЗадачи = МассивДействийЗадач[0];
		ОповеститьОбИзменении(ЕдинственноеДействиеЗадачи);
		Оповестить("Запись_ДействиеЗадачи",, ЕдинственноеДействиеЗадачи);
		
	ИначеЕсли МассивДействийЗадач.Количество() > 1 Тогда
		
		ОповеститьОбИзменении(Тип("ДокументСсылка.ДействиеЗадачи"));
		Оповестить("Запись_ДействиеЗадачи");
		
	КонецЕсли;
	
КонецПроцедуры

// Рассылает оповещение о записи задачи.
//
// Параметры:
//  Задача - ДокументСсылка.Задача - Записанная задача.
//  ВышестоящаяЗадача - ДокументСсылка.Задача - Вышестоящая задача.
//  ИдентификаторФормы - УникальныйИдентификатор - Идентификатор формы.
//
Процедура ОповеститьОЗаписиЗадачи(Задача, ВышестоящаяЗадача, ИдентификаторФормы) Экспорт
	
	ПараметрОповещения = Новый Структура("ВышестоящаяЗадача, ИдентификаторФормы");
	ПараметрОповещения.ВышестоящаяЗадача = ВышестоящаяЗадача;
	ПараметрОповещения.ИдентификаторФормы = ИдентификаторФормы;
	
	Оповестить("Запись_Задача", ПараметрОповещения, Задача);
	
КонецПроцедуры

// Перенаправляет указанные задачи или действия задач.
//
// Параметры:
//  ЗадачиИлиДействия - Массив из ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи - Задачи или действия задач.
//  ИдентификаторФормы - УникальныйИдентификатор, Неопределено - Идентификатор формы.
//
Процедура Перенаправить(ЗадачиИлиДействия, ИдентификаторФормы) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗадачиИлиДействия", ЗадачиИлиДействия);
	
	ДополнительныеПараметры = Новый Структура("ЗадачиИлиДействия, ИдентификаторФормы, ЗакрыватьПодзадачи");
	ДополнительныеПараметры.ЗадачиИлиДействия = ЗадачиИлиДействия;
	ДополнительныеПараметры.ИдентификаторФормы = ИдентификаторФормы;
	ДополнительныеПараметры.ЗакрыватьПодзадачи = Неопределено;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПеренаправитьПослеВыбораКому",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ОткрытьФорму("Документ.Задача.Форма.ПеренаправлениеЗадачи",
		ПараметрыФормы,,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

// Обработчика выбора в дереве подзадач.
//
// Параметры:
//  Элемент - ТаблицаФормы - Дерево подзадач.
//  ВыбраннаяСтрока - Число - Значение выбранной строки.
//  Поле - ПолеФормы - Активное поле (колонка).
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ПодзадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) Экспорт
	
	ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ДанныеСтроки.ДействиеЗадачи) Тогда
		ОткрытьКарточкуИсполнителяЗадачи(ДанныеСтроки.ДействиеЗадачи);
	Иначе
		ОткрытьКарточкуАвтораЗадачи(ДанныеСтроки.Задача);
	КонецЕсли;
	
КонецПроцедуры

// Показывает историю выполнения задачи.
// 
// Параметры:
//  Задача - ДокументСсылка.Задача.
//
Процедура ПоказатьИсториюВыполнения(Задача) Экспорт
	
	ПараметрыФормы = Новый Структура("Задача", Задача);
	ОткрытьФорму("РегистрСведений.ИсторияЗадач.Форма.ИсторияВыполнения", ПараметрыФормы);
	
КонецПроцедуры

// Показывает приложение задачи.
//
// Параметры:
//  Приложение - ОпределяемыйТип.ПриложениеЗадач - Приложение.
//
Процедура ПоказатьПриложение(Приложение) Экспорт
	
	Если Не ЗначениеЗаполнено(Приложение) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСЗадачамиКлиентСервер.ЭтоПриложениеБезПрав(Приложение) Тогда
		ПоказатьЗначение(, Приложение);
		Возврат;
	КонецЕсли;
	
	ДанныеВложенногоПисьма = РаботаСЗадачамиВызовСервера.ДанныеВложенногоПисьма(Приложение);
	Если ДанныеВложенногоПисьма = Неопределено Тогда
		ПоказатьЗначение(, Приложение);
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("ДвоичныеДанные", ДанныеВложенногоПисьма);
	ОткрытьФорму(
		"ЖурналДокументов.ЭлектроннаяПочта.Форма.ПросмотрВложенногоПисьма", 
		ПараметрыОткрытия);
	
КонецПроцедуры

// Показывает причину отмены задачи.
//
// Параметры:
//  Задача - ДокументСсылка.Задача.
//
Процедура ПоказатьПричинуОтмены(Задача) Экспорт
	
	ОткрытьФорму("Документ.Задача.Форма.ПричинаОтменыЗадачи", Новый Структура("Задача", Задача));
	
КонецПроцедуры

// Переключает флаг задачи.
//
// Параметры:
//  ЗадачаИлиДействие - ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи - Задача или действие задачи.
//
Процедура ПереключитьФлаг(ЗадачаИлиДействие) Экспорт
	
	Попытка
		
		Флаг = РаботаСЗадачамиВызовСервера.ПереключитьФлаг(ЗадачаИлиДействие);
		
		ОповеститьОбОперации(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗадачаИлиДействие),
			?(ЗначениеЗаполнено(Флаг),
				Строка(Флаг),
				НСтр("ru = 'Очищен флаг'")));
		
	Исключение
		
		ОповеститьОбИсключении();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Открывает приложение задачи для просмотра.
//
// Параметры:
//  Приложение - ОпределяемыйТип.ПриложениеЗадач.
//  ИдентификаторФормы - УникальныйИдентификатор.
//  ПредыдущийАдресФайла - Строка.
//
Процедура ПросмотретьПриложение(Приложение, ИдентификаторФормы, ПредыдущийАдресФайла) Экспорт
	
	Если ТипЗнч(Приложение) = Тип("СправочникСсылка.Файлы") Тогда
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
			Приложение, 
			Неопределено, 
			ИдентификаторФормы, 
			Неопределено, 
			ПредыдущийАдресФайла);

		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(
			Неопределено, 
			ДанныеФайла,
			ИдентификаторФормы); 
		
	Иначе	
		
		ПоказатьПриложение(Приложение);
		
	КонецЕсли;	
	
КонецПроцедуры

// Открывает для просмотра приложение жизненного цикла.
// 
// Параметры:
//  Приложение - ЛюбаяСсылка.
//  УникальныйИдентификатор - УникальныйИдентификатор.
//  ПредыдущийАдресФайла - Строка.
// 
Процедура ПросмотретьПриложениеЖизненногоЦикла(Приложение, УникальныйИдентификатор, ПредыдущийАдресФайла) Экспорт
	
	Если ТипЗнч(Приложение) <> Тип("СправочникСсылка.Файлы") Тогда
		ПоказатьЗначение(, Приложение);
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСЗадачамиВызовСервера.ДанныеФайлаДляОткрытия(
		Приложение,
		УникальныйИдентификатор,
		ПредыдущийАдресФайла);
		
	РаботаСФайламиКлиент.ОткрытьФайлСОповещением(
		Неопределено,
		ДанныеФайла,
		УникальныйИдентификатор);
	
КонецПроцедуры

// Снимает пометку удаления с задачи.
// 
// Параметры:
//  Задача - ДокументСсылка.Задача.
//
Процедура СнятьПометкуУдаления(Задача) Экспорт
	
	Попытка
		
		РаботаСЗадачамиВызовСервера.СнятьПометкуУдаления(Задача);
		
		ОповеститьОбОперации(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Задача),
			НСтр("ru = 'Снята пометка удаления'"));
		
	Исключение
		
		ОповеститьОбИсключении();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Согласовывает перенос срока.
// 
// Параметры:
//  Задача - ЗадачаСсылка.ЗадачаИсполнителя, ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи - Задача.
//
Процедура СогласоватьПереносСрока(Задача) Экспорт
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Задача", Задача);
	ЗначенияЗаполнения.Вставить("ВидВопроса",
		ПредопределенноеЗначение("Перечисление.ВидыВопросовВыполненияЗадач.ПереносСрока"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму(
		"БизнесПроцесс.РешениеВопросовВыполненияЗадач.ФормаОбъекта",
		ПараметрыФормы);
	
КонецПроцедуры

// Открывает форму создания задачи.
// 
// Параметры:
//  Основание - Неопределено
//            - ДокументСсылка.Задача
//            - Массив из ДокументСсылка.Задача
// 
Процедура СоздатьЗадачу(Основание = Неопределено) Экспорт
	
	ЕстьНазначенныеШаблоны = РаботаСЗадачамиВызовСервера.ЕстьНазначенныеШаблоны(Основание);
	
	Если ЕстьНазначенныеШаблоны Тогда
		ПомощникОтправитьКлиент.ОтправитьЗадачу(Основание);
	Иначе
		ПараметрыФормы = Новый Структура;
		Если Основание <> Неопределено Тогда
			ПараметрыФормы.Вставить("Основание", Основание);
		КонецЕсли;
		ОткрытьФорму("Документ.Задача.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет результат действия.
// 
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи - Действие задачи.
//  РезультатДействияТекстом - Строка - Результат действия текстом.
//  ВерсияДанныхДействия - Строка - Текущая версия данных действия
//  ВзятьВРаботуАвтоматически - Булево - Взять в работу автоматически.
//  ПоказатьВыборФактическогоИсполнителя - Булево - Показать выбор фактического исполнителя.
//  Владелец - ФормаКлиентскогоПриложения.
// 
// Возвращаемое значение:
//  Структура - См. РаботаСЗадачамиКлиентСервер.НовыйРезультатСохраненияЗадачи.
//
Функция СохранитьРезультатДействия(ДействиеЗадачи, РезультатДействияТекстом, ВерсияДанныхДействия, ВзятьВРаботуАвтоматически, ПоказатьВыборФактическогоИсполнителя, Владелец) Экспорт
	
	РезультатСохранения = РаботаСЗадачамиВызовСервера.СохранитьРезультатДействия(
		ДействиеЗадачи,
		РезультатДействияТекстом,
		ВерсияДанныхДействия,
		ВзятьВРаботуАвтоматически);
	
	Если РезультатСохранения.Успешно Тогда
	
		ИсторияРаботыПользователя.Добавить(ДействиеЗадачи);
	
		ОповеститьОбИзменении(ДействиеЗадачи);
		Оповестить("Запись_ДействиеЗадачи", , ДействиеЗадачи);
	
	КонецЕсли;
	
	Если РезультатСохранения.НужноВыбратьФактическогоИсполнителя И ПоказатьВыборФактическогоИсполнителя Тогда
		
		ВзятьВРаботуСВыборомИсполнителя(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДействиеЗадачи),
			Владелец);
		
	КонецЕсли;
	
	Если РезультатСохранения.ВерсииДанныхРазличаются Тогда
		
		Сообщение = НСтр("ru = 'Не удалось сохранить изменения. Возможно, задача была выполнена или изменена другим сотрудником. Отображение данных задачи обновлено.'");
		Оповестить("Запись_ДействиеЗадачи", , ДействиеЗадачи);
		ПоказатьПредупреждение(, Сообщение);
		
	КонецЕсли;
	
	Возврат РезультатСохранения;
	
КонецФункции

// Сохраняет персональную настройку текущего пользователя.
//
// Параметры:
//  Настройка - Строка - Настройка.
//  Значение - Произвольный - Значение настройки.
//
Процедура УстановитьПерсональнуюНастройку(Настройка, Значение) Экспорт
	
	РаботаСЗадачамиВызовСервера.УстановитьПерсональнуюНастройку(Настройка, Значение);
	
	Оповестить("ИзмененыНастройкиЗадач",, Настройка);
	
КонецПроцедуры

// Устанавливает флаг указанным задачам или действиями задач.
//
// Параметры:
//  ЗадачиИлиДействия - Массив из ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи - Задачи или действия задач.
//  Флаг - ПеречислениеСсылка.ФлагиОбъектов - Флаг.
//
Процедура УстановитьФлаг(ЗадачиИлиДействия, Флаг) Экспорт
	
	Попытка
		
		РаботаСЗадачамиВызовСервера.УстановитьФлаг(ЗадачиИлиДействия, Флаг);
		
		ОповеститьОбОперации(
			ЗадачиИлиДействия,
			?(ЗначениеЗаполнено(Флаг),
				Строка(Флаг),
				НСтр("ru = 'Очищен флаг'")));
		
	Исключение
		
		ОповеститьОбИсключении();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Проверяет, является ли проверяемое действие действием подзадачи.
//
// Параметры:
//  ДеревоПодзадач - ДанныеФормыДерево - Дерево подзадач.
//  ПроверяемоеДействиеПодзадачи - ДокументСсылка.ДействиеЗадачи - Проверяемое действие подзадачи.
// 
// Возвращаемое значение:
//  Булево - Это действие подзадачи.
//
Функция ЭтоДействиеПодзадачи(ДеревоПодзадач, ПроверяемоеДействиеПодзадачи) Экспорт
	
	ЭтоДействиеПодзадачи = Ложь;
	
	УзлыКОбходу = Новый Массив;
	УзлыКОбходу.Добавить(ДеревоПодзадач);
	Пока УзлыКОбходу.Количество() > 0 Цикл
		
		УзелКОбходу = УзлыКОбходу[0];
		УзлыКОбходу.Удалить(0);
		
		Для Каждого НижестоящийУзел Из УзелКОбходу.ПолучитьЭлементы() Цикл
			
			Если НижестоящийУзел.ДействиеЗадачи = ПроверяемоеДействиеПодзадачи Тогда
				ЭтоДействиеПодзадачи = Истина;
				Прервать;
			КонецЕсли;
			
			УзлыКОбходу.Добавить(НижестоящийУзел);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ЭтоДействиеПодзадачи;
	
КонецФункции

// Проверяет, является ли проверяемая задача подзадачей текущей задачи.
//
// Параметры:
//  ТекущаяЗадача - ДокументСсылка.Задача - Текущая задача.
//  ДеревоПодзадач	 - ДанныеФормыДерево - Дерево подзадач.
//  ПроверяемаяПодзадача - ДокументСсылка.Задача - Проверяемая задача.
//  ПроверяемаяВышестоящаяЗадача - ДокументСсылка.Задача - Вышестоящая задача проверяемое задачи.
// 
// Возвращаемое значение:
//  Булево - Это подзадача.
//
Функция ЭтоПодзадача(ТекущаяЗадача, ДеревоПодзадач, ПроверяемаяПодзадача, ПроверяемаяВышестоящаяЗадача) Экспорт
	
	Если ПроверяемаяВышестоящаяЗадача = ТекущаяЗадача Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЭтоПодзадача = Ложь;
	
	УзлыКОбходу = Новый Массив;
	УзлыКОбходу.Добавить(ДеревоПодзадач);
	Пока УзлыКОбходу.Количество() > 0 Цикл
		
		УзелКОбходу = УзлыКОбходу[0];
		УзлыКОбходу.Удалить(0);
		
		Для Каждого НижестоящийУзел Из УзелКОбходу.ПолучитьЭлементы() Цикл
			
			Если НижестоящийУзел.Задача = ПроверяемаяПодзадача
				Или НижестоящийУзел.Задача = ПроверяемаяВышестоящаяЗадача Тогда
				ЭтоПодзадача = Истина;
				Прервать;
			КонецЕсли;
			
			УзлыКОбходу.Добавить(НижестоящийУзел);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ЭтоПодзадача;
	
КонецФункции

// Удаляет приложения действий задач.
// 
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//  МассивПриложений - Массив из ОпределяемыйТип.ПриложениеОтчетовОбИсполнении.
// 
Процедура УдалитьПриложенияРезультата(ДействиеЗадачи, МассивПриложений) Экспорт
	
	КоличествоПриложений = МассивПриложений.Количество();
	
	Если КоличествоПриложений = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ДействиеЗадачи", ДействиеЗадачи);
	Параметры.Вставить("МассивПриложений", МассивПриложений);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УдалитьПриложенияРезультатаПослеВопроса",
		ЭтотОбъект,
		Параметры);
		
	Если КоличествоПриложений > 1 Тогда 
		ТекстВопроса = НСтр("ru = 'Удалить выделенные приложения?'");
	Иначе 
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Удалить ""%1""?'"), Строка(МассивПриложений[0]));
	КонецЕсли;
	
	ПоказатьВопрос(
		ОписаниеОповещения,
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет,,
		КодВозвратаДиалога.Да);
	
КонецПроцедуры

// Выполняет подключаемую команду.
// 
// Параметры:
//  Команда - КомандаФормы
//  ТекущаяЗадачаИлиДействие - ДокументСсылка.Задача
//                           - ДокументСсылка.ДействиеЗадачи
//  ДанныеЖизненногоЦикла - ДанныеФормыКоллекция
//  УникальныйИдентификатор - УникальныйИдентификатор
//  ПредыдущийАдресФайла - Строка
// 
Процедура ВыполнитьПодключаемуюКоманду(Команда, ТекущаяЗадачаИлиДействие, ДанныеЖизненногоЦикла, УникальныйИдентификатор, ПредыдущийАдресФайла) Экспорт
	
	Если СтрНачинаетсяС(Команда.Имя, РаботаСЗадачамиКлиентСервер.ПрефиксИмениДополнительнойКоманды()) Тогда
		
		ИнтеграцияЗадачКлиент.ВыполнитьДополнительнуюКоманду(
			Команда.Имя,
			ТекущаяЗадачаИлиДействие);
		
	Иначе
		
		ОбработатьКомандуЖизненногоЦикла(
			Команда,
			ДанныеЖизненногоЦикла,
			УникальныйИдентификатор,
			ПредыдущийАдресФайла,
			ТекущаяЗадачаИлиДействие);
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Обрабатывает данные выполнения, при попытке интерактивного выполнения задач.
//
// Параметры:
//  КонтекстВыполненияЗадачи - См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи
//  ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
//
Процедура ОбработатьДанныеВыполнения(КонтекстВыполненияЗадачи, ФормаВладелец) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("КонтекстВыполненияЗадачи", КонтекстВыполненияЗадачи);
	ПараметрыОповещения.Вставить("ФормаВладелец", ФормаВладелец);
	
	Если КонтекстВыполненияЗадачи.ДанныеВыполнения.ВернутьсяКЗадаче Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если КонтекстВыполненияЗадачи.ДанныеВыполнения.ЗадачиНельзяВыполнить.Количество() <> 0 Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗадачиНельзяВыполнить",
			КонтекстВыполненияЗадачи.ДанныеВыполнения.ЗадачиНельзяВыполнить);
		ПараметрыФормы.Вставить("ЧислоЗадач", КонтекстВыполненияЗадачи.ДанныеВыполнения.ЧислоЗадач);
		ПараметрыФормы.Вставить("ДействияЗадач", КонтекстВыполненияЗадачи.ДействияЗадач);
		ПараметрыФормы.Вставить("РезультатДействия", КонтекстВыполненияЗадачи.РезультатДействия);
		
		ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.ОшибкиГрупповогоВыполнения", 
			ПараметрыФормы,
			,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
		
		Возврат;
		
	КонецЕсли;
	
	Если КонтекстВыполненияЗадачи.ДанныеВыполнения.ЗапретВыполнения Тогда
		
		ОткрытьФорму("ОбщаяФорма.ЗапретВыполнения",
			Новый Структура(
				"ТекстПредупреждения",
				КонтекстВыполненияЗадачи.ДанныеВыполнения.ПричинаЗапретаВыполнения));
		
		Возврат;
		
	КонецЕсли;
	
	Если КонтекстВыполненияЗадачи.ДанныеВыполнения.ВерсииДанныхРазличаются Тогда
		
		Оповестить("ЗадачаИзмениласьПередПопыткойИсполненияИлиИзменения",
			КонтекстВыполненияЗадачи.ИдентификаторФормы);
		Возврат;
		
	КонецЕсли;
	
	Если КонтекстВыполненияЗадачи.ДанныеВыполнения.ПоказатьПредупреждение Тогда
		
		Если КонтекстВыполненияЗадачи.ДанныеВыполнения.ПредупредитьОЗаполненииДополнительныхРеквизитов Тогда
			Оповестить("ПредупредитьОЗаполненииДополнительныхРеквизитов", КонтекстВыполненияЗадачи.ИдентификаторФормы);
		Иначе
			ПредупреждениеЗаполняемыхПредметов = СтрСоединить(
				КонтекстВыполненияЗадачи.ДанныеВыполнения.Предупреждения,
				Символы.ПС + Символы.ПС);
			ПоказатьПредупреждение(, ПредупреждениеЗаполняемыхПредметов);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если КонтекстВыполненияЗадачи.ДанныеВыполнения.ВыбратьИсполнителяЗадачи Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОбработатьДанныеВыполненияПослеВыбораИсполнителя",
			ЭтотОбъект,
			ПараметрыОповещения);
		
		ОткрытьФорму("ОбщаяФорма.ВыборФактическогоИсполнителяЗадачи", 
			КонтекстВыполненияЗадачи,
			ФормаВладелец,
			КонтекстВыполненияЗадачи.ИдентификаторФормы,,,
			ОписаниеОповещения);
		
		Возврат;
		
	КонецЕсли;
	
	Если КонтекстВыполненияЗадачи.ДанныеВыполнения.ВыбратьПомощника Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОбработатьДанныеВыполненияПослеВыбораПомощника",
			ЭтотОбъект,
			ПараметрыОповещения);
		
		ОткрытьФорму("ОбщаяФорма.ВыборПомощникаДляОбработкиРезолюции", 
			КонтекстВыполненияЗадачи, , , , ,
			ОписаниеОповещения);
		Возврат;
		
	КонецЕсли;
	
	Если КонтекстВыполненияЗадачи.ДанныеВыполнения.ПредложитьЗакрытьПодзадачи Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОбработатьДанныеВыполненияПослеПредложенияЗакрытьПодзадачи",
			ЭтотОбъект,
			ПараметрыОповещения);
		
		ПредложитьЗакрытьПодзадачи(
			КонтекстВыполненияЗадачи.ДанныеВыполнения.КоличествоНезавершенныхПодзадач,
			ОписаниеОповещения);
		
		Возврат;
		
	КонецЕсли;
	
	Если КонтекстВыполненияЗадачи.ДанныеВыполнения.ПроверитьЗанятыеФайлы Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОбработатьДанныеВыполненияПослеПроверкиЗанятыхФайлов",
			ЭтотОбъект,
			ПараметрыОповещения);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СообщениеВопрос", НСтр("ru = 'Выполнить задачу?'"));
		ПараметрыФормы.Вставить("СообщениеЗаголовок", НСтр("ru = 'Некоторые файлы приложенных документов заняты для редактирования:'"));
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Выполнение задачи'"));
		ПараметрыФормы.Вставить("ТекстКнопкиЗакончитьИЗакрыть", НСтр("ru = 'Закончить редактирование и выполнить'"));
		ПараметрыФормы.Вставить("ТекстКнопкиЗакрыть", НСтр("ru = 'Выполнить'"));
		ПараметрыФормы.Вставить("ФайлыДляПроверки", КонтекстВыполненияЗадачи.ДанныеВыполнения.ФайлыДляПроверки);
		ПараметрыФормы.Вставить("Редактирует", ПользователиКлиент.ТекущийПользователь());
		
		ФиксированныйМассивВсеСотрудникиТекущегоПользователя =
			СотрудникиКлиент.ВсеСотрудникиТекущегоПользователя();
		МассивВсеСотрудникиТекущегоПользователя = Новый Массив(
			ФиксированныйМассивВсеСотрудникиТекущегоПользователя);
		СотрудникиТекущегоПользователя = Новый СписокЗначений();
		СотрудникиТекущегоПользователя.ЗагрузитьЗначения(МассивВсеСотрудникиТекущегоПользователя);
		ПараметрыФормы.Вставить("СотрудникиТекущегоПользователя", СотрудникиТекущегоПользователя);
		
		ТекущийПользователь = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ТекущийПользователь;
		ПараметрыФормы.Вставить("ТекущийПользователь", ТекущийПользователь);
		
		РаботаСФайламиКлиент.ОткрытьДиалогСписокЗанятыхФайлов(ПараметрыФормы, ОписаниеОповещения);
		Если ПараметрыФормы.КоличествоЗанятыхФайлов > 0 Тогда
			Возврат;
		Иначе
			КонтекстВыполненияЗадачи.ДанныеВыполнения.ПроверитьЗанятыеФайлы = Ложь;
			КонтекстВыполненияЗадачи.ПараметрыВыполнения.ЗанятыеФайлыПроверены = Истина;
			КонтекстВыполненияЗадачи.ТребуетсяПовторитьВыполнениеЗадачи = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если КонтекстВыполненияЗадачи.ДанныеВыполнения.ТребуетсяВвестиПричинуВозврата Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОбработатьДанныеВыполненияПослеВводаПричиныВозврата",
			ЭтотОбъект,
			ПараметрыОповещения);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить(
			"ЗадачаИлиДействие",
			КонтекстВыполненияЗадачи.ДанныеВыполнения.ЗадачаДляВозврата);
		ПараметрыОткрытия.Вставить(
			"ОбщаяПричинаВозврата",
			КонтекстВыполненияЗадачи.ДанныеВыполнения.ОбщаяПричинаВозврата);
		
		ОткрытьФорму(
			"Документ.Задача.Форма.ВводПричиныВозврата",
			ПараметрыОткрытия,,,,,
			ОписаниеОповещения);
		
		Возврат;
		
	КонецЕсли;
	
	Если КонтекстВыполненияЗадачи.ДанныеВыполнения.ПредупредитьОбОтсутствиях Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОбработатьДанныеВыполненияПослеПредупрежденияОбОтсутствиях",
			ЭтотОбъект,
			ПараметрыОповещения);
		
		ОтсутствияКлиент.ПредупредитьОбОтсутствиях(
			КонтекстВыполненияЗадачи.ДанныеВыполнения.РезультатПроверкиОтсутствий,
			ОписаниеОповещения);
		
		Возврат;
		
	КонецЕсли;
	
	Если КонтекстВыполненияЗадачи.ДанныеВыполнения.ПроизвольныйВопрос.ЗадатьВопрос Тогда
		Обработчик = Новый ОписаниеОповещения(
			"ОбработатьДанныеВыполненияПослеПодтверждающегоВопроса",
			ЭтотОбъект,
			ПараметрыОповещения);
		Если НагрузочноеТестированиеКлиент.ЭтоНагрузочноеТестирование() Тогда
			// При нагрузочном тестировании вопросы не нужны, вызов обработчика напрямую.
			ВыполнитьОбработкуОповещения(Обработчик, КодВозвратаДиалога.Да);
			Возврат;
		КонецЕсли;
		
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.ЗагрузитьЗначения(КонтекстВыполненияЗадачи.ДанныеВыполнения.ПроизвольныйВопрос.Кнопки);
		
		ПоказатьВопрос(Обработчик, КонтекстВыполненияЗадачи.ДанныеВыполнения.ПроизвольныйВопрос.Текст, СписокКнопок);
		Возврат;
	КонецЕсли;
	
	Если ИнтеграцияЗадачКлиент.ОбработатьДанныеВыполнения(КонтекстВыполненияЗадачи, ФормаВладелец) Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтекстВыполненияЗадачи.ТребуетсяПовторитьВыполнениеЗадачи Тогда
		
		КонтекстВыполненияЗадачи.ТребуетсяПовторитьВыполнениеЗадачи = Ложь;
		
		АвтоЗавершение = Ложь;
		Если КонтекстВыполненияЗадачи.ДействияЗадач.Количество() = 1 Тогда	
			КлючевыеОперации = "ВыполнитьДействиеЗадачиОднаЗадача";
			УИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени(КлючевыеОперации,,АвтоЗавершение);
		Иначе
			КлючевыеОперации = "ВыполнитьДействиеЗадачиНесколькоЗадач";
			УИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени(КлючевыеОперации,АвтоЗавершение);
		КонецЕсли;	
		КонтекстВыполненияЗадачи.УИДЗамера = УИДЗамера;
		
		КонтекстВыполненияЗадачи.ДанныеВыполнения = РаботаСЗадачамиВызовСервера.ВыполнитьДействиеЗадачи(
			КонтекстВыполненияЗадачи.ДействияЗадач,
			КонтекстВыполненияЗадачи.РезультатДействия,
			КонтекстВыполненияЗадачи.ПараметрыВыполнения);
		
		ОбработатьДанныеВыполнения(КонтекстВыполненияЗадачи, ФормаВладелец);
		
		Возврат;
		
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(КонтекстВыполненияЗадачи.УИДЗамера);
	ОбработатьВыполнениеДействияЗадачи(
		КонтекстВыполненияЗадачи.ДействияЗадач,
		КонтекстВыполненияЗадачи.ИдентификаторФормы,
		КонтекстВыполненияЗадачи.ДанныеВыполнения);
	
КонецПроцедуры

// Обработчик оповещения процедуры РаботаСЗадачами.Отменить().
// 
// Параметры:
//  ПричинаОтмены - Строка.
//  ЗадачиКОтмене - Массив из ДокументСсылка.Задача.
//
Процедура ОтменитьПослеВводаПричиныОтмены(ПричинаОтмены, ЗадачиКОтмене) Экспорт
	
	Если ПричинаОтмены = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ДлительнаяОперация = РаботаСЗадачамиВызовСервера.Отменить(ЗадачиКОтмене, ПричинаОтмены);
		
		Если ДлительнаяОперация <> Неопределено Тогда
			
			Обработчик = Новый ОписаниеОповещения(
				"ОтменитьПослеДлительнойОперации",
				ЭтотОбъект,
				ЗадачиКОтмене);
			
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
			ПараметрыОжидания.Заголовок = НСтр("ru = 'Отмена задач'");
			ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
			
			ДлительныеОперацииКлиент.ОжидатьЗавершение(
				ДлительнаяОперация,
				Обработчик,
				ПараметрыОжидания);
			
		Иначе
			
			ОповеститьОбОперацииОтменить(ЗадачиКОтмене);
			
		КонецЕсли;
		
		ОповеститьОбОперации(
			ЗадачиКОтмене,
			НСтр("ru = 'Отмена'"));
		
	Исключение
		
		ОповеститьОбИсключении();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Обработчик изменения срока на форме.
// 
// Параметры:
//  Срок - Дата - Срок, возвращаемый параметр.
//  ИспользоватьДатуИВремяВСрокахЗадач - Булево.
//  СрокВышестоящейЗадачи - Дата.
//  Задача - ДокументСсылка.Задача.
// 
Процедура СрокПриИзменении(Срок, ИспользоватьДатуИВремяВСрокахЗадач, СрокВышестоящейЗадачи, Задача) Экспорт
	
	ПроверитьСрокИсполнения(Срок, СрокВышестоящейЗадачи, Задача);
	
	Если ЗначениеЗаполнено(Срок) И Не ИспользоватьДатуИВремяВСрокахЗадач Тогда
		Срок = КонецДня(Срок);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик выбора срока на форме.
// 
// Параметры:
//  ВыбранноеЗначение - Дата.
//  СтандартнаяОбработка - Булево.
//  Срок - Дата - Срок, возвращаемый параметр
//  ИспользоватьДатуИВремяВСрокахЗадач - Булево.
//  СрокВышестоящейЗадачи - Дата.
//  Задача - ДокументСсылка.Задача.
// 
Процедура СрокОбработкаВыбора(ВыбранноеЗначение, СтандартнаяОбработка, Срок, ИспользоватьДатуИВремяВСрокахЗадач, СрокВышестоящейЗадачи, Задача) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Срок = РаботаСЗадачамиВызовСервера.ОкончаниеРабочегоДня(ВыбранноеЗначение);
	
	ПроверитьСрокИсполнения(Срок, СрокВышестоящейЗадачи, Задача);
	
	Если ЗначениеЗаполнено(Срок) И Не ИспользоватьДатуИВремяВСрокахЗадач Тогда
		Срок = КонецДня(Срок);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обработчик оповещения процедуры ВернутьНаДоработку.
//
// Параметры:
//  ДанныеВозвратаНаДоработку - См. РаботаСЗадачамиКлиентСервер.НовыйДанныеВозвратаНаДоработку.
//  ЗадачаИлиДействие - ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи - Задача или действие.
//
Процедура ВернутьНаДоработкуПослеВводаПричины(ДанныеВозвратаНаДоработку, ЗадачаИлиДействие) Экспорт
	
	Если ДанныеВозвратаНаДоработку = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		РезультатВозвратаНаДоработку = РаботаСЗадачамиВызовСервера.ВернутьНаДоработку(
			ЗадачаИлиДействие,
			ДанныеВозвратаНаДоработку);
		
		Если РезультатВозвратаНаДоработку.ДлительнаяОперация <> Неопределено Тогда
			
			Обработчик = Новый ОписаниеОповещения(
				"ВернутьНаДоработкуПослеДлительнойОперации",
				ЭтотОбъект,
				РезультатВозвратаНаДоработку.ИзмененнаяЗадача);
			
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
			ПараметрыОжидания.Заголовок = НСтр("ru = 'Возврат на доработку задачи'");
			ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
			
			ДлительныеОперацииКлиент.ОжидатьЗавершение(
				РезультатВозвратаНаДоработку.ДлительнаяОперация,
				Обработчик,
				ПараметрыОжидания);
			
		Иначе
			
			ОповеститьОбОперацииВернутьНаДоработку(РезультатВозвратаНаДоработку.ИзмененнаяЗадача);
			
		КонецЕсли;
		
	Исключение
		
		ОповеститьОбИсключении();
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры


// Обработчик описания оповещения процедуры ВзятьВРаботуСВыборомИсполнителя.
//
// Параметры:
//  ВыбранныйФактическийИсполнитель - Структура.
//  КонтекстВзятияВРаботу - Структура.
//
Процедура ВзятьВРаботуПослеВыбораИсполнителя(ВыбранныйФактическийИсполнитель, КонтекстВзятияВРаботу) Экспорт
	
	Если ТипЗнч(ВыбранныйФактическийИсполнитель) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ВзятьВРаботу(
		КонтекстВзятияВРаботу.ДействияЗадач,
		КонтекстВзятияВРаботу.Владелец,
		ВыбранныйФактическийИсполнитель);
	
КонецПроцедуры

// Обработчик оповещения процедуры РаботаСЗадачамиКлиент.ДобавитьПредметЗадачи().
//
// Параметры:
//  РезультатВыбора - СправочникСсылка.Файлы, Структура, Массив из СправочникСсылка.Файлы, Неопределено - Результат выбора.
//  ДополнительныеПараметры - Структура.
//
Процедура ДобавитьПредметЗадачиПослеВыбора(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ТипРезультатаВыбора = ТипЗнч(РезультатВыбора);
	
	Если ТипРезультатаВыбора <> Тип("СправочникСсылка.Файлы")
		И ТипРезультатаВыбора <> Тип("Структура")
		И ТипРезультатаВыбора <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	ДействиеЗадачи = ДополнительныеПараметры.ДействиеЗадачи;
	ИсточникДействияЗадачи = ДополнительныеПараметры.ИсточникДействияЗадачи;
	ИмяПредмета = ДополнительныеПараметры.ИмяПредмета;
	
	Если ТипРезультатаВыбора = Тип("Структура") Тогда
		
		Попытка
			
			МультипредметностьВызовСервера.ИзменитьПредметКорневогоБизнесПроцесса(
				ИсточникДействияЗадачи,
				Неопределено,
				ИмяПредмета,
				РезультатВыбора.Предмет, 
				Ложь);
			
		Исключение
			
			//@skip-check object-deprecated
			СообщениеОбОшибке = СтрШаблон(
				НСтр("ru = 'Не удалось установить предмет в задаче:
				|%1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение СообщениеОбОшибке;
			
		КонецПопытки;
		
	ИначеЕсли ТипЗнч(РезультатВыбора) = Тип("Массив") Тогда
		
		Для Каждого Результат Из РезультатВыбора Цикл
			
			Попытка
				
				МультипредметностьВызовСервера.ИзменитьПредметКорневогоБизнесПроцесса(
					ИсточникДействияЗадачи,
					Неопределено,
					Результат.ИмяПредмета,
					Результат.Предмет,
					Ложь);
				
			Исключение
				
				//@skip-check object-deprecated
				СообщениеОбОшибке = СтрШаблон(
					НСтр("ru = 'Не удалось установить предмет в задаче:
						|%1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ВызватьИсключение СообщениеОбОшибке;
				
			КонецПопытки;
			
		КонецЦикла;
		
	ИначеЕсли ТипРезультатаВыбора = Тип("СправочникСсылка.Файлы") Тогда
		
		Попытка
			
			МультипредметностьВызовСервера.ИзменитьПредметКорневогоБизнесПроцесса(
				ИсточникДействияЗадачи,
				Неопределено,
				ИмяПредмета,
				РезультатВыбора,
				Ложь);
			
		Исключение
			
			//@skip-check object-deprecated
			СообщениеОбОшибке = СтрШаблон(
				НСтр("ru = 'Не удалось установить предмет в задаче:
				|%1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение СообщениеОбОшибке;
			
		КонецПопытки;
		
	КонецЕсли;
	
	ОповеститьОбОперации(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДействиеЗадачи),
		НСтр("ru = 'Установлен предмет'"));
	
КонецПроцедуры

// Обработчик оповещения процедуры ДобавитьФайлКОтчету.
// 
// Параметры:
// 	Приложение - ОпределяемыйТип.ПриложениеОтчетовОбИсполнении, Массив из СправочникСсылка.Файлы, Строка - Приложение.
//  Контекст - Структура.
//   * ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//   * ФормаВладелец - ФормаКлиентскогоПриложения.
//
Процедура ЗавершитьДобавлениеПриложенияКОтчету(Приложение, Контекст) Экспорт
	
	Если Не ЗначениеЗаполнено(Приложение) Тогда
		Возврат;
	КонецЕсли;
	
	Если Приложение = "ФайлСДиска" Тогда
		ДобавитьФайлКОтчету(Контекст.ДействиеЗадачи, Контекст.ФормаВладелец);
		Возврат;
	КонецЕсли;
	
	Попытка
		
		РезультатДобавленияПриложения = РаботаСЗадачамиВызовСервера.ДобавитьПриложение(
			Контекст.ДействиеЗадачи,
			Приложение);
		
		ОповеститьОбОперации(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Контекст.ДействиеЗадачи),
			НСтр("ru = 'Добавлено приложение'"));
		
		Если РезультатДобавленияПриложения.НужноВыбратьФактическогоИсполнителя Тогда
			ВзятьВРаботуСВыборомИсполнителя(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Контекст.ДействиеЗадачи),
				Контекст.ФормаВладелец);
		КонецЕсли;
		
	Исключение
		
		ОповеститьОбИсключении();
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Обработчик оповещения процедуры ДобавитьФайлКОтчету.
// 
// Параметры:
// 	КомпонентаИнициализирована - Булево.
//  Контекст - Структура.
//   * ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//   * ФормаВладелец - ФормаКлиентскогоПриложения.
//
Процедура ЗавершитьДобавлениеКартинкиИзБуфераКОтчету(КомпонентаИнициализирована, Контекст)
	
	Если КомпонентаИнициализирована <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ПутьКФайлу = Контекст.ПутьКФайлу;
	
		Если ПустаяСтрока(ПутьКФайлу) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Буфер обмена не содержит картинки'"));
			Возврат;
		КонецЕсли;
			
		НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
		Приложение = РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(
			ПутьКФайлу,
			Контекст.ДействиеЗадачи,
			Контекст.ФормаВладелец,
			НеОткрыватьКарточкуПослеСозданияИзФайла);
		
		РезультатДобавленияПриложения = РаботаСЗадачамиВызовСервера.ДобавитьПриложение(
			Контекст.ДействиеЗадачи,
			Приложение);
		
		ОповеститьОбОперации(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Контекст.ДействиеЗадачи),
			НСтр("ru = 'Добавлено приложение'"));
		
		Если РезультатДобавленияПриложения.НужноВыбратьФактическогоИсполнителя Тогда
			ВзятьВРаботуСВыборомИсполнителя(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Контекст.ДействиеЗадачи),
				Контекст.ФормаВладелец);
		КонецЕсли;
		
	Исключение
		
		ОповеститьОбИсключении();
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Формирует пустую структура контекста выполнения задач.
// 
// Возвращаемое значение:
//  Структура - Контекст выполнения задач:
//   * ДействияЗадач - Массив из ДокументСсылка.ДействиеЗадачи - Действия задач.
//   * РезультатДействия - СправочникСсылка.РезультатыДействийЗадач.
//   * ИдентификаторФормы - УникальныйИдентификатор, Неопределено - Идентификатор формы.
//   * ПараметрыВыполнения - См. РаботаСЗадачамиКлиентСервер.НовыйПараметрыВыполненияДействийЗадач
//   * ДанныеВыполнения - См. РаботаСЗадачамиКлиентСервер.НовыйДанныеВыполненияДействийЗадач
//   * ТребуетсяПовторитьВыполнениеЗадачи - Булево.
//   * УИДЗамера - УникальныйИдентификатор, Неопределено - Идентификатор замера.
//
Функция НовыйКонтекстВыполненияЗадачи() Экспорт
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ДействияЗадач", Новый Массив);
	ПараметрыВыполнения.Вставить("РезультатДействия",
		ПредопределенноеЗначение("Справочник.РезультатыДействийЗадач.ПустаяСсылка"));
	ПараметрыВыполнения.Вставить("ИдентификаторФормы", Неопределено);
	ПараметрыВыполнения.Вставить("ПараметрыВыполнения",
		РаботаСЗадачамиКлиентСервер.НовыйПараметрыВыполненияДействийЗадач());
	ПараметрыВыполнения.Вставить("ДанныеВыполнения",
		РаботаСЗадачамиКлиентСервер.НовыйДанныеВыполненияДействийЗадач());
	ПараметрыВыполнения.Вставить("ТребуетсяПовторитьВыполнениеЗадачи", Ложь);
	ПараметрыВыполнения.Вставить("УИДЗамера", Неопределено);
	
	Возврат ПараметрыВыполнения;
	
КонецФункции

// Обработчик описания оповещения процедуры ВзятьВРаботуСВыборомИсполнителя.
//
// Параметры:
//  ДанныеВозвратаНаДоработку - См. РаботаСЗадачамиКлиентСервер.НовыйДанныеВозвратаНаДоработку.
//  ПараметрыОповещения - Структура:
//   * КонтекстВыполненияЗадачи - Структура - Контекст выполнения задачи. См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи.
//   * ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
//
Процедура ОбработатьДанныеВыполненияПослеВводаПричиныВозврата(ДанныеВозвратаНаДоработку, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(ДанныеВозвратаНаДоработку) <> Тип("Структура") Тогда
		// Вернуться к задаче.
		Возврат;
	КонецЕсли;
	
	КонтекстВыполненияЗадачи = ПараметрыОповещения.КонтекстВыполненияЗадачи;
	ФормаВладелец = ПараметрыОповещения.ФормаВладелец;
	
	// Выполнить задачу.
	КонтекстВыполненияЗадачи.ДанныеВыполнения.ТребуетсяВвестиПричинуВозврата = Ложь;
	КонтекстВыполненияЗадачи.ПараметрыВыполнения.ДанныеВозвратаНаДоработку =
		ДанныеВозвратаНаДоработку;
	КонтекстВыполненияЗадачи.ТребуетсяПовторитьВыполнениеЗадачи = Истина;
	
	ОбработатьДанныеВыполнения(КонтекстВыполненияЗадачи, ФормаВладелец);
	
КонецПроцедуры

// Обработчик описания оповещения процедуры ОбработатьДанныеВыполнения.
//
// Параметры:
//  Результат - СправочникСсылка.Сотрудники, Неопределено - Выбранный исполнитель.
//  ПараметрыОповещения - Структура:
//   * КонтекстВыполненияЗадачи - Структура - Контекст выполнения задачи. См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи.
//   * ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
//
Процедура ОбработатьДанныеВыполненияПослеВыбораИсполнителя(Результат, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		// Вернуться к задаче.
		Возврат;
	КонецЕсли;
	
	КонтекстВыполненияЗадачи = ПараметрыОповещения.КонтекстВыполненияЗадачи;
	ФормаВладелец = ПараметрыОповещения.ФормаВладелец;
	
	// Выполнить задачу.
	КонтекстВыполненияЗадачи.ДанныеВыполнения.ВыбратьИсполнителяЗадачи = Ложь;
	КонтекстВыполненияЗадачи.ПараметрыВыполнения.ВыбранныйФактическийИсполнитель = Результат;
	КонтекстВыполненияЗадачи.ТребуетсяПовторитьВыполнениеЗадачи = Истина;
	
	ОбработатьДанныеВыполнения(КонтекстВыполненияЗадачи, ФормаВладелец);
	
КонецПроцедуры

// Обработчик описания оповещения процедуры ОбработатьДанныеВыполнения.
//
// Параметры:
//  Результат - СправочникСсылка.Сотрудники, Неопределено - Закрывать или нет подзадачи.
//  ПараметрыОповещения - Структура:
//   * КонтекстВыполненияЗадачи - Структура - Контекст выполнения задачи. См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи.
//   * ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
//
Процедура ОбработатьДанныеВыполненияПослеВыбораПомощника(Результат, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("СправочникСсылка.Сотрудники") Тогда
		// Вернуться к задаче.
		Возврат;
	КонецЕсли;
	
	КонтекстВыполненияЗадачи = ПараметрыОповещения.КонтекстВыполненияЗадачи;
	ФормаВладелец = ПараметрыОповещения.ФормаВладелец;
	
	// Выполнить задачу.
	КонтекстВыполненияЗадачи.ДанныеВыполнения.ВыбратьПомощника = Ложь;
	КонтекстВыполненияЗадачи.ПараметрыВыполнения.ОбрабатывающийРезолюцию = Результат;
	КонтекстВыполненияЗадачи.ТребуетсяПовторитьВыполнениеЗадачи = Истина;
	
	ОбработатьДанныеВыполнения(КонтекстВыполненияЗадачи, ФормаВладелец);
	
КонецПроцедуры

// Обработчик описания оповещения процедуры ОбработатьДанныеВыполнения в случае возникновения подтверждающего вопроса.
//
// Параметры:
//  Ответ - КодВозвратаДиалога - Ответ пользователя на вопрос (Да или Нет)
//  ПараметрыОповещения - Структура:
//   * КонтекстВыполненияЗадачи - См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи
//   * ФормаВладелец - ФормаКлиентскогоПриложения - Владелец формы.
Процедура ОбработатьДанныеВыполненияПослеПодтверждающегоВопроса(Ответ, ПараметрыОповещения) Экспорт
	
	// Выполнить задачу.
	// Чтобы больше не задавать вопрос:
	ПараметрыОповещения.КонтекстВыполненияЗадачи.ДанныеВыполнения.ПроизвольныйВопрос.ЗадатьВопрос = Ложь;
	ПараметрыОповещения.КонтекстВыполненияЗадачи.ПараметрыВыполнения.ОтветНаПроизвольныйВопрос = Ответ;
	ПараметрыОповещения.КонтекстВыполненияЗадачи.ТребуетсяПовторитьВыполнениеЗадачи = Истина;
	ОбработатьДанныеВыполнения(ПараметрыОповещения.КонтекстВыполненияЗадачи, ПараметрыОповещения.ФормаВладелец);
	
КонецПроцедуры

// Обработчик описания оповещения процедуры ОбработатьДанныеВыполнения.
//
// Параметры:
//  Результат - КодВозвратаДиалога - Закрывать или нет подзадачи.
//  ПараметрыОповещения - Структура:
//   * КонтекстВыполненияЗадачи - Структура - Контекст выполнения задачи. См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи.
//   * ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
//
Процедура ОбработатьДанныеВыполненияПослеПредложенияЗакрытьПодзадачи(Результат, ПараметрыОповещения) Экспорт
	
	КонтекстВыполненияЗадачи = ПараметрыОповещения.КонтекстВыполненияЗадачи;
	ФормаВладелец = ПараметрыОповещения.ФормаВладелец;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		// Выполнить задачу.
		КонтекстВыполненияЗадачи.ДанныеВыполнения.ПредложитьЗакрытьПодзадачи = Ложь;
		КонтекстВыполненияЗадачи.ПараметрыВыполнения.ЗакрыватьПодзадачи = Истина;
		КонтекстВыполненияЗадачи.ТребуетсяПовторитьВыполнениеЗадачи = Истина;
		
		ОбработатьДанныеВыполнения(КонтекстВыполненияЗадачи, ФормаВладелец);
		
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		
		// Выполнить задачу.
		КонтекстВыполненияЗадачи.ДанныеВыполнения.ПредложитьЗакрытьПодзадачи = Ложь;
		КонтекстВыполненияЗадачи.ПараметрыВыполнения.ЗакрыватьПодзадачи = Ложь;
		КонтекстВыполненияЗадачи.ТребуетсяПовторитьВыполнениеЗадачи = Истина;
		
		ОбработатьДанныеВыполнения(КонтекстВыполненияЗадачи, ФормаВладелец);
		
	Иначе
		
		// Вернуться к задаче.
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик описания оповещения процедуры ОбработатьДанныеВыполнения.
//
// Параметры:
//  Результат - КодВозвратаДиалога - Выполнить задачу или нет.
//  ПараметрыОповещения - Структура:
//   * КонтекстВыполненияЗадачи - Структура - Контекст выполнения задачи. См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи.
//   * ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
//
Процедура ОбработатьДанныеВыполненияПослеПроверкиЗанятыхФайлов(Результат, ПараметрыОповещения) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		// Вернуться к задаче.
		Возврат;
	КонецЕсли;
	
	КонтекстВыполненияЗадачи = ПараметрыОповещения.КонтекстВыполненияЗадачи;
	ФормаВладелец = ПараметрыОповещения.ФормаВладелец;
	
	// Выполнить задачу.
	КонтекстВыполненияЗадачи.ДанныеВыполнения.ПроверитьЗанятыеФайлы = Ложь;
	КонтекстВыполненияЗадачи.ПараметрыВыполнения.ЗанятыеФайлыПроверены = Истина;
	КонтекстВыполненияЗадачи.ТребуетсяПовторитьВыполнениеЗадачи = Истина;
	
	ОбработатьДанныеВыполнения(КонтекстВыполненияЗадачи, ФормаВладелец);
	
КонецПроцедуры

// Обрабатывает данные выполнения действия задачи.
// 
// Параметры:
//  ДействияЗадач - Массив из ДокументСсылка.ДействиеЗадачи - Действия задач.
//  ИдентификаторФормы - УникальныйИдентификатор, Неопределено - Идентификатор формы.
//  ДанныеВыполнения - Структура- Данные выполнения. См. РаботаСЗадачамиВызовСервера.ВыполнитьДействиеЗадачи.
//
Процедура ОбработатьВыполнениеДействияЗадачи(ДействияЗадач, ИдентификаторФормы, ДанныеВыполнения)
	
	// Оповещение об операции.
	ОповеститьОбОперации(
		ДействияЗадач,
		ДанныеВыполнения.ПредставлениеРезультата);
	
	Если ДействияЗадач.Количество() = 1 Тогда
		Оповестить("ВыполненоДействиеЗадачи", ДействияЗадач[0], ИдентификаторФормы);
	КонецЕсли;
	
	// Учёт трудозатрат на задачу.
	УчетВремениКлиент.ДобавитьВОтчетПослеВыполненияЗадачи(
		ДанныеВыполнения.ПараметрыУчетаВремени.ОпцияИспользоватьУчетВремени,
		ОбщегоНазначенияКлиент.ДатаСеанса(),
		ДействияЗадач[0],
		ДанныеВыполнения.ПараметрыУчетаВремени.ВключенХронометраж,
		ДанныеВыполнения.ПараметрыУчетаВремени.ДатаНачалаХронометража,
		ДанныеВыполнения.ПараметрыУчетаВремени.ДатаКонцаХронометража,
		ДанныеВыполнения.ПараметрыУчетаВремени.ВидыРабот,
		ДанныеВыполнения.ПараметрыУчетаВремени.СпособУказанияВремени,
		Новый ОписаниеОповещения("ВыполнитьДействиеЗадачиПослеВводаВремени", ЭтотОбъект));
	
	Для Каждого ДанныеОповещения Из ДанныеВыполнения.ОповещенияПослеВыполнения Цикл
		Оповестить(ДанныеОповещения.ИмяСобытия, ДанныеОповещения.Параметр, ДанныеОповещения.Источник);
	КонецЦикла;
	
КонецПроцедуры

// Обработчик описания оповещения процедура РаботаСЗадачами.Перенаправить.
//
// Параметры:
//  ПараметрыПеренаправления - Структура:
//   * ОтКого - ОпределяемыйТип.УчастникЗадач
//   * Кому - ОпределяемыйТип.УчастникЗадач
//   * Комментарий - Строка
//  ДополнительныеПараметры - Структура:
//   * ЗадачиИлиДействия - Массив из ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи
//   * ИдентификаторФормы - УникальныйИдентификатор
//   * ЗакрыватьПодзадачи - Булево
//                        - Неопределено
//
Процедура ПеренаправитьПослеВыбораКому(ПараметрыПеренаправления, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ПараметрыПеренаправления) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		КлючевыеОперации = "ЗадачиПеренаправить";
		УИДЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени(КлючевыеОперации, Ложь, Ложь);
		
		ЗадачиИлиДействия = ДополнительныеПараметры.ЗадачиИлиДействия;
		ИдентификаторФормы = ДополнительныеПараметры.ИдентификаторФормы;
		ЗакрыватьПодзадачи = ДополнительныеПараметры.ЗакрыватьПодзадачи;
		
		ДанныеПеренаправления = РаботаСЗадачамиВызовСервера.Перенаправить(
			ЗадачиИлиДействия,
			ПараметрыПеренаправления.ОтКого,
			ПараметрыПеренаправления.Кому,
			ПараметрыПеренаправления.Комментарий,
			ЗакрыватьПодзадачи);
		
		Если ДанныеПеренаправления.ПредложитьЗакрытьПодзадачи Тогда
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("ПараметрыПеренаправления", ПараметрыПеренаправления);
			ПараметрыОповещения.Вставить("ЗадачиИлиДействия", ЗадачиИлиДействия);
			ПараметрыОповещения.Вставить("ИдентификаторФормы", ИдентификаторФормы);
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПеренаправитьПослеПредложенияЗакрытьПодзадачи",
				ЭтотОбъект,
				ПараметрыОповещения);
			
			ПредложитьЗакрытьПодзадачи(
				ДанныеПеренаправления.КоличествоНезавершенныхПодзадач,
				ОписаниеОповещения);
			
			Возврат;
			
		КонецЕсли;
		
		ОповеститьОПеренаправлении(
			ЗадачиИлиДействия,
			ИдентификаторФормы);
		
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамера);
		
	Исключение
		
		ОповеститьОбИсключении();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Сохраняет над иск приложение жизненного цикла.
// 
// Параметры:
//  Приложение - СправочникСсылка.Файлы.
//  УникальныйИдентификатор - УникальныйИдентификатор.
// 
Процедура СохранитьНаДискПриложениеЖизненногоЦикла(Приложение, УникальныйИдентификатор)
	
	ДанныеФайла = РаботаСЗадачамиВызовСервера.ДанныеФайлаДляСохранения(
		Приложение,
		УникальныйИдентификатор);
	
	КомандыРаботыСФайламиКлиент.СохранитьКак(
		ДанныеФайла,
		УникальныйИдентификатор);
	
КонецПроцедуры


// Обработчик оповещения процедуры УдалитьПриложенияРезультата.
// 
// Параметры:
//  Результат - КодВозвратаДиалога.
//  Параметры - Структура.
//   * ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//   * МассивПриложений - Массив из ОпределяемыйТип.ПриложениеОтчетовОбИсполнении.
//
Процедура УдалитьПриложенияРезультатаПослеВопроса(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ДействиеЗадачи = Параметры.ДействиеЗадачи;
		МассивПриложений = Параметры.МассивПриложений;
		
		РаботаСЗадачамиВызовСервера.УдалитьПриложенияРезультата(ДействиеЗадачи, МассивПриложений);
		
		Если МассивПриложений.Количество() > 1 Тогда
			ПредставлениеОперации = НСтр("ru = 'Удалены приложения'");
		Иначе
			ПредставлениеОперации = НСтр("ru = 'Удалено приложение'");
		КонецЕсли;
		
		ОповеститьОбОперации(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДействиеЗадачи),
			ПредставлениеОперации);
		
	Исключение
		
		ОповеститьОбИсключении();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Обработчик описания оповещения процедуры ВзятьВРаботуСВыборомИсполнителя.
//
// Параметры:
//  Результат - КодВозвратаДиалога.
//  ПараметрыОповещения - Структура:
//   * КонтекстВыполненияЗадачи - Структура - Контекст выполнения задачи. См. РаботаСЗадачамиКлиент.НовыйКонтекстВыполненияЗадачи.
//   * ФормаВладелец - ФормаКлиентскогоПриложения - Владелец вспомогательных форм.
//
Процедура ОбработатьДанныеВыполненияПослеПредупрежденияОбОтсутствиях(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстВыполненияЗадачи = ПараметрыОповещения.КонтекстВыполненияЗадачи;
	ФормаВладелец = ПараметрыОповещения.ФормаВладелец;
	
	// Выполнить задачу.
	КонтекстВыполненияЗадачи.ПараметрыВыполнения.ОтсутствияПроверены = Истина;
	КонтекстВыполненияЗадачи.ДанныеВыполнения.ПредупредитьОбОтсутствиях = Ложь;
	КонтекстВыполненияЗадачи.ТребуетсяПовторитьВыполнениеЗадачи = Истина;
	
	ОбработатьДанныеВыполнения(КонтекстВыполненияЗадачи, ФормаВладелец);
	
КонецПроцедуры

// Проверяет срок при изменении.
// 
// Параметры:
//  Срок - Дата.
//  СрокВышестоящейЗадачи - Дата.
//  Задача - ДокументСсылка.Задача.
// 
Процедура ПроверитьСрокИсполнения(Срок, СрокВышестоящейЗадачи, Задача)
	
	Если ЗначениеЗаполнено(СрокВышестоящейЗадачи)
		И Срок > СрокВышестоящейЗадачи Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Установленный срок превышает срок вышестоящей задачи.'"));
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Срок) И Срок < ОбщегоНазначенияКлиент.ДатаСеанса() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Установленный срок уже прошел.'"));
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает результат направления на исполнение.
// 
// Параметры:
//  РезультатНаправленияНаИсполнение - см. РаботаСЗадачамиКлиентСервер.НовыйРезультатНаправленияНаИсполнение.
//
Процедура ОбработатьРезультатНаправленияНаИсполнение(РезультатНаправленияНаИсполнение)
	
	Попытка
		
		Если РезультатНаправленияНаИсполнение.ТребуетсяПредупредитьОбОтсутствиях Тогда
			
			Обработчик = Новый ОписаниеОповещения(
				"НаправитьНаИсполнениеПослеПредупрежденияОбОтсутствиях",
				ЭтотОбъект,
				РезультатНаправленияНаИсполнение);
			
			ОтсутствияКлиент.ПредупредитьОбОтсутствиях(
				РезультатНаправленияНаИсполнение.РезультатПроверкиОтсутствий,
				Обработчик);
			
			Возврат;
			
		КонецЕсли;
		
		Если РезультатНаправленияНаИсполнение.ТребуетсяНаправитьНаИсполнение Тогда
			
			РезультатНаправленияНаИсполнение = РаботаСЗадачамиВызовСервера.НаправитьНаИсполнение(
				РезультатНаправленияНаИсполнение.ПараметрыНаправленияНаИсполнение);
			
			ОбработатьРезультатНаправленияНаИсполнение(РезультатНаправленияНаИсполнение);
			
			Возврат;
			
		КонецЕсли;
		
		Если РезультатНаправленияНаИсполнение.НаправленаНаИсполнение Тогда
			
			Задача = РезультатНаправленияНаИсполнение.ПараметрыНаправленияНаИсполнение.Задача;
			ИдентификаторФормы = РезультатНаправленияНаИсполнение.ПараметрыНаправленияНаИсполнение.ИдентификаторФормы;
			
			ПоказатьОповещениеПользователя(
				РезультатНаправленияНаИсполнение.ТекстОповещения,
				ПолучитьНавигационнуюСсылку(Задача),
				Строка(Задача),
				БиблиотекаКартинок.ДиалогИнформация);
			
			ОповеститьОбИзменении(Задача);
			ОповеститьОЗаписиЗадачи(
				Задача,
				РезультатНаправленияНаИсполнение.ВышестоящаяЗадача,
				ИдентификаторФормы);
			
			Оповестить("НаправленаНаИсполнение", Задача, ИдентификаторФормы);
			
			Возврат;
			
		КонецЕсли;
		
		Если РезультатНаправленияНаИсполнение.ЗапущенаДлительнаяОперация Тогда
			
			Обработчик = Новый ОписаниеОповещения(
				"НаправитьНаИсполнениеПослеЗавершенияДлительнойОперации",
				ЭтотОбъект);
			
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
			ПараметрыОжидания.Заголовок = НСтр("ru = 'Отправка задачи'");
			ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
			
			ДлительныеОперацииКлиент.ОжидатьЗавершение(
				РезультатНаправленияНаИсполнение.ДлительнаяОперация,
				Обработчик,
				ПараметрыОжидания);
			
			Возврат;
			
		КонецЕсли;
		
	Исключение
		ОповеститьОбИсключении();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обработчик описания оповещения процедуры ОбработатьРезультатНаправленияНаИсполнение.
// 
// Параметры:
//  Результат - КодВозвратаДиалога.
//  РезультатНаправленияНаИсполнение -  см. РаботаСЗадачамиКлиентСервер.НовыйРезультатНаправленияНаИсполнение.
// 
Процедура НаправитьНаИсполнениеПослеПредупрежденияОбОтсутствиях(Результат, РезультатНаправленияНаИсполнение) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	РезультатНаправленияНаИсполнение.ТребуетсяНаправитьНаИсполнение = Истина;
	РезультатНаправленияНаИсполнение.ТребуетсяПредупредитьОбОтсутствиях = Ложь;
	РезультатНаправленияНаИсполнение.ПараметрыНаправленияНаИсполнение.ОтсутствияПроверены = Истина;
	
	ОбработатьРезультатНаправленияНаИсполнение(РезультатНаправленияНаИсполнение);
	
КонецПроцедуры

// Обработчик описания оповещения процедуры ОбработатьРезультатНаправленияНаИсполнение.
// 
// Параметры:
//   Результат - Структура.
//   ДополнительныеПараметры - Неопределено.
// 
Процедура НаправитьНаИсполнениеПослеЗавершенияДлительнойОперации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ОповеститьОбИсключении();
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		РезультатНаправленияНаИсполнение = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		ОбработатьРезультатНаправленияНаИсполнение(РезультатНаправленияНаИсполнение);
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ОповеститьОбИсключении();
		
		ВызватьИсключение Результат.ПодробноеПредставлениеОшибки;
		
	Иначе
		
		ОповеститьОбИсключении();
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный статус длительной операции %1'"),
			Результат.Статус);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик описания оповещения процедуры Закрыть.
// 
// Параметры:
//  Результат - Структура.
//  ЗадачиКЗакрытию - Массив из ДокументСсылка.Задача.
// 
Процедура ЗакрытьПослеДлительнойОперации(Результат, ЗадачиКЗакрытию) Экспорт
	
	Если Результат = Неопределено Тогда
		ОповеститьОбИсключении();
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		ОповеститьОбОперацииЗакрыть(ЗадачиКЗакрытию);
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ОповеститьОбИсключении();
		
		ВызватьИсключение Результат.ПодробноеПредставлениеОшибки;
		
	Иначе
		
		ОповеститьОбИсключении();
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный статус длительной операции %1'"),
			Результат.Статус);
		
	КонецЕсли;
	
КонецПроцедуры

// Оповещает о закрытии указанных задач.
//
// Параметры:
//  ЗадачиКЗакрытию - Массив из ДокументСсылка.Задача.
// 
Процедура ОповеститьОбОперацииЗакрыть(ЗадачиКЗакрытию)
	
	ОповеститьОбОперации(
		ЗадачиКЗакрытию,
		НСтр("ru = 'Закрыта'"));
	
КонецПроцедуры

// Обработчик описания оповещения процедуры ОтменитьПослеВводаПричиныОтмены.
// 
// Параметры:
//  Результат - Структура.
//  ЗадачиКОтмене - Массив из ДокументСсылка.Задача.
// 
Процедура ОтменитьПослеДлительнойОперации(Результат, ЗадачиКОтмене) Экспорт
	
	Если Результат = Неопределено Тогда
		ОповеститьОбИсключении();
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		ОповеститьОбОперацииОтменить(ЗадачиКОтмене);
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ОповеститьОбИсключении();
		
		ВызватьИсключение Результат.ПодробноеПредставлениеОшибки;
		
	Иначе
		
		ОповеститьОбИсключении();
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный статус длительной операции %1'"),
			Результат.Статус);
		
	КонецЕсли;
	
КонецПроцедуры

// Оповещает об отмене указанных задач.
//
// Параметры:
//  ЗадачиКОтмене - Массив из ДокументСсылка.Задача.
// 
Процедура ОповеститьОбОперацииОтменить(ЗадачиКОтмене)
	
	ОповеститьОбОперации(
		ЗадачиКОтмене,
		НСтр("ru = 'Отмена'"));
	
КонецПроцедуры

// Обработчик описания оповещения процедуры ВернутьНаДоработкуПослеВводаПричины.
// 
// Параметры:
//  Результат - Структура.
//  ИзмененнаяЗадача - ДокументСсылка.Задача.
// 
Процедура ВернутьНаДоработкуПослеДлительнойОперации(Результат, ИзмененнаяЗадача) Экспорт
	
	Если Результат = Неопределено Тогда
		ОповеститьОбИсключении();
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		ОповеститьОбОперацииВернутьНаДоработку(ИзмененнаяЗадача);
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ОповеститьОбИсключении();
		
		ВызватьИсключение Результат.ПодробноеПредставлениеОшибки;
		
	Иначе
		
		ОповеститьОбИсключении();
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный статус длительной операции %1'"),
			Результат.Статус);
		
	КонецЕсли;
	
КонецПроцедуры

// Оповещает о возврате на доработку указанных задач.
//
// Параметры:
//  ИзмененнаяЗадача - ДокументСсылка.Задача.
// 
Процедура ОповеститьОбОперацииВернутьНаДоработку(ИзмененнаяЗадача)
	
	ОповеститьОбОперации(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИзмененнаяЗадача),
		НСтр("ru = 'Возвращена на доработку'"));
	
КонецПроцедуры

// Оповещает об операции перенаправления.
// 
// Параметры:
//  ЗадачиИлиДействия - Массив из ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи
//  ИдентификаторФормы - УникальныйИдентификатор
// 
Процедура ОповеститьОПеренаправлении(ЗадачиИлиДействия, ИдентификаторФормы)
	
	ОповеститьОбОперации(ЗадачиИлиДействия,НСтр("ru = 'Перенаправление задачи'"));
	
	Если ЗадачиИлиДействия.Количество() = 1
		И ТипЗнч(ЗадачиИлиДействия[0]) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		
		Оповестить("ДействиеЗадачиПеренаправлено", ЗадачиИлиДействия[0], ИдентификаторФормы);
	
	КонецЕсли;
	
КонецПроцедуры

// Предлагает закрыть подзадачи.
// 
// Параметры:
//  КоличествоНезавершенныхПодзадач - Число
//  ОписаниеОповещения - ОписаниеОповещения
// 
Процедура ПредложитьЗакрытьПодзадачи(КоличествоНезавершенныхПодзадач, ОписаниеОповещения)
	
	Если НагрузочноеТестированиеКлиент.ЭтоНагрузочноеТестирование() Тогда
		
		// При нагрузочном тестировании предупреждения не нужны, вызов обработчика напрямую.
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Нет);
		
		Возврат;
		
	КонецЕсли;
	
	ТекстВопроса = СтрШаблон(
		НСтр("ru = 'Есть невыполненные подзадачи (%1). Выполнить их?'"),
		КоличествоНезавершенныхПодзадач);
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Вернуться к задаче'"));
	Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Выполнить'"));
	Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не выполнять'"));
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, 0, КодВозвратаДиалога.Отмена);
	
КонецПроцедуры

// Обработчик описания оповещения процедуры ОбработатьДанныеВыполнения.
//
// Параметры:
//  Результат - КодВозвратаДиалога - Закрывать или нет подзадачи.
//  ДополнительныеПараметры - Структура:
//   * ПараметрыПеренаправления - Структура:
//    ** ОтКого - ОпределяемыйТип.УчастникЗадач
//    ** Кому - ОпределяемыйТип.УчастникЗадач
//    ** Комментарий - Строка
//   * ЗадачиИлиДействия - Массив из ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи
//   * ИдентификаторФормы - УникальныйИдентификатор
//   * ЗакрыватьПодзадачи - Булево
//
Процедура ПеренаправитьПослеПредложенияЗакрытьПодзадачи(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыПеренаправления = ДополнительныеПараметры.ПараметрыПеренаправления;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ЗадачиИлиДействия", ДополнительныеПараметры.ЗадачиИлиДействия);
	ПараметрыОповещения.Вставить("ИдентификаторФормы", ДополнительныеПараметры.ИдентификаторФормы);
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПараметрыОповещения.Вставить("ЗакрыватьПодзадачи", Истина);
		
		ПеренаправитьПослеВыбораКому(ПараметрыПеренаправления, ПараметрыОповещения);
		
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		
		ПараметрыОповещения.Вставить("ЗакрыватьПодзадачи", Ложь);
		
		ПеренаправитьПослеВыбораКому(ПараметрыПеренаправления, ПараметрыОповещения);
		
	Иначе
		
		// Вернуться к задаче.
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти