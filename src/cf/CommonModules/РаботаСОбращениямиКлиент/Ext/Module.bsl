#Область ПрограммныйИнтерфейс

// Обновляет отборы списков при вводе кода вопроса вручную
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма вызова.
//
Процедура ОбновитьСписки(Форма) Экспорт 
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Тематики,
		"Раздел",
		Форма.Раздел,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Темы,
		"Тематика",
		Форма.Тематика,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Вопросы,
		"Тема",
		Форма.Тема,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
КонецПроцедуры

// Обновляет элементы формы при изменении результата рассмотрения вопроса обращения
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма вызова.
//
Процедура РезультатРассмотренияПриИзменении(Форма) Экспорт 
	
	Элементы = Форма.Элементы;
	РезультатРассмотрения = Форма.РезультатРассмотрения;
	Элементы.ГруппаОрганИСопроводительныйДокумент.Видимость = Ложь;
	Элементы.ДатаОтвета.Видимость = Ложь;
	Элементы.ГруппаОтветныйДокумент.Видимость = Ложь;
	Элементы.ГруппаМнениеАвтора.Видимость = Ложь;
	
	Если РезультатРассмотрения = ПредопределенноеЗначение(
		"Перечисление.РезультатыРассмотренияОбращений.НаправленоВИнойОрган") Тогда 
		Элементы.ГруппаОрганИСопроводительныйДокумент.Видимость = Истина;
		Если Не ЗначениеЗаполнено(Форма.ДатаОтвета) Тогда 
			Форма.ДатаОтвета = ОбщегоНазначенияКлиент.ДатаСеанса();
		КонецЕсли;
		Форма.ОтветныйДокумент = Неопределено;
		
	ИначеЕсли РаботаСОбращениямиКлиентСервер.РезультатРассмотренияТребуетОтвета(РезультатРассмотрения) Тогда
		Элементы.ДатаОтвета.Видимость = Истина;
		Элементы.ДатаОтвета.Заголовок = НСтр("ru = 'Дата ответа'");
		Элементы.ГруппаМнениеАвтора.Видимость = Истина;
		Форма.СопроводительныйДокумент = Неопределено;
		
		Если Не ЗначениеЗаполнено(Форма.ДатаОтвета) Тогда 
			Форма.ДатаОтвета = ОбщегоНазначенияКлиент.ДатаСеанса();
		КонецЕсли;
		
		Элементы.ГруппаОтветныйДокумент.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Открывает диалог выбора вопроса обращения
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма вызова.
//  ОписаниеОповещения - ОписаниеОповещения - для обработки результата.
//  ТолькоПросмотр - Булево - признак, что форму открываем только для просмотра.
//
Процедура ВвестиКодВопроса(Форма, ОписаниеОповещения = Неопределено, ТолькоПросмотр = Ложь) Экспорт 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Раздел", Форма.Раздел);
	ПараметрыФормы.Вставить("Тематика", Форма.Тематика);
	ПараметрыФормы.Вставить("Тема", Форма.Тема);
	ПараметрыФормы.Вставить("Вопрос", Форма.Вопрос);
	ПараметрыФормы.Вставить("КодВопроса", Форма.КодВопроса);
	
	ПараметрыФормы.Вставить("СокращенныйРежим", Истина);
	ПараметрыФормы.Вставить("КлючСохраненияПоложенияОкна", "ВыборОдногоВопроса");
	ПараметрыФормы.Вставить("ДляПросмотра", ТолькоПросмотр);
	
	ОткрытьФорму("ОбщаяФорма.ПомощникВыбораВопроса", ПараметрыФормы,,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Обновляет отборы списков при вводе кода вопроса вручную
//
// Параметры:
//  ОписаниеОповещения - ОписаниеОповещения - для обработки результата.
//  Заголовок - Строка - заголовок формы.
//  Комментарий - Строка - текущий текст поля.
//
Процедура ВвестиКомментарий(ОписаниеОповещения, Заголовок, Комментарий) Экспорт 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Комментарий", Комментарий);
	ПараметрыФормы.Вставить("Заголовок", Заголовок);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("ОбщаяФорма.ВводКомментария", ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с "Сопроводительный документ"

Процедура СопроводительныйДокументПриИзменении(Форма, Элемент) Экспорт 
	
	Если Не ЗначениеЗаполнено(Форма.СопроводительныйДокументСтрока) Тогда 
		Форма.СопроводительныйДокумент = Неопределено; 
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура СопроводительныйДокументНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт 
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущаяСтрока", Форма.СопроводительныйДокумент);
	
	Если ЗначениеЗаполнено(Форма.ОрганДляПередачи) Тогда
		ПараметрыФормы.Вставить("Получатель", Форма.ОрганДляПередачи);
		ПараметрыФормы.Вставить("НеОтправленные", Истина);
	КонецЕсли;
	
	Если Форма.ИмяФормы = "Справочник.ДокументыПредприятия.Форма.ФормаВыбораИзКлассификатора" Тогда 
		ПараметрыФормы.Вставить("Обращение", Форма.Документ);
	Иначе 
		ПараметрыФормы.Вставить("Обращение", Форма.Объект);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ДокументыПредприятия.ФормаВыбора", ПараметрыФормы, 
		Форма.Элементы.СопроводительныйДокументСтрока);
	
КонецПроцедуры

Процедура СопроводительныйДокументОчистка(Форма, Элемент, СтандартнаяОбработка) Экспорт 
	
	Форма.СопроводительныйДокумент = Неопределено; 
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

Процедура СопроводительныйДокументОткрытие(Форма, Элемент, СтандартнаяОбработка) Экспорт 
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Форма.СопроводительныйДокумент) Тогда
		ПоказатьЗначение(, Форма.СопроводительныйДокумент);
	КонецЕсли;	

КонецПроцедуры

Процедура СопроводительныйДокументОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт 
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
		Возврат;
	КонецЕсли;
	
	Форма.СопроводительныйДокумент = ВыбранноеЗначение;
	Результат = РаботаСОбращениямиВызовСервера.ДанныеСопроводительногоДокумента(Форма.СопроводительныйДокумент);
	
	Если ЗначениеЗаполнено(Результат.РегистрационныйНомер) И ЗначениеЗаполнено(Результат.ДатаРегистрации) Тогда
		Форма.СопроводительныйДокументСтрока = СтрШаблон(
			НСтр("ru = '№ %1 от %2'"), Результат.РегистрационныйНомер, Формат(Результат.ДатаРегистрации, "ДЛФ=D"));
	Иначе
		Форма.СопроводительныйДокументСтрока = Результат.Заголовок;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.ОрганДляПередачи) Тогда
		Если ЗначениеЗаполнено(Результат.Получатель) Тогда 
			Форма.ОрганДляПередачи = Результат.Получатель;
		КонецЕсли;
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

Процедура СопроводительныйДокументАвтоПодбор(Форма, Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка) Экспорт 
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;		
		ДанныеВыбора = РаботаСОбращениямиВызовСервера.НайтиДокументыПредприятия(Текст, Форма.ОрганДляПередачи);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопроводительныйДокументОкончаниеВводаТекста(Форма, Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт 
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСОбращениямиВызовСервера.НайтиДокументыПредприятия(Текст, Форма.ОрганДляПередачи);
	Иначе 
		Форма.СопроводительныйДокумент = Неопределено; 
		Форма.СопроводительныйДокументСтрока = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с "Ответный документ"

Процедура ОтветныйДокументПриИзменении(Форма, Элемент) Экспорт 
	
	Если Не ЗначениеЗаполнено(Форма.ОтветныйДокументСтрока) Тогда 
		Форма.ОтветныйДокумент = Неопределено; 
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтветныйДокументНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт 
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущаяСтрока", Форма.ОтветныйДокумент);
	
	Отправитель = Неопределено;
	
	Если Форма.ИмяФормы = "Справочник.ДокументыПредприятия.Форма.ФормаВыбораИзКлассификатора" Тогда 
		ПараметрыФормы.Вставить("Обращение", Форма.Документ);
		Отправитель = Форма.Отправитель;
	Иначе 
		ПараметрыФормы.Вставить("Обращение", Форма.Объект);
		Отправитель = Форма.Объект.Контрагент;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отправитель) Тогда
		ПараметрыФормы.Вставить("Получатель", Отправитель);
		ПараметрыФормы.Вставить("НеОтправленные", Истина);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ДокументыПредприятия.ФормаВыбора", ПараметрыФормы, 
		Форма.Элементы.ОтветныйДокументСтрока);
	
КонецПроцедуры

Процедура ОтветныйДокументОчистка(Форма, Элемент, СтандартнаяОбработка) Экспорт 
	
	Форма.ОтветныйДокумент = Неопределено; 
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

Процедура ОтветныйДокументОткрытие(Форма, Элемент, СтандартнаяОбработка) Экспорт 
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Форма.ОтветныйДокумент) Тогда
		ПоказатьЗначение(, Форма.ОтветныйДокумент);
	КонецЕсли;	

КонецПроцедуры

Процедура ОтветныйДокументОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт 
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
		Возврат;
	КонецЕсли;
	
	Форма.ОтветныйДокумент = ВыбранноеЗначение;
	Результат = РаботаСОбращениямиВызовСервера.ДанныеСопроводительногоДокумента(Форма.ОтветныйДокумент);
	
	Если ЗначениеЗаполнено(Результат.РегистрационныйНомер) И ЗначениеЗаполнено(Результат.ДатаРегистрации) Тогда
		Форма.ОтветныйДокументСтрока = СтрШаблон(
			НСтр("ru = '№ %1 от %2'"), Результат.РегистрационныйНомер, Формат(Результат.ДатаРегистрации, "ДЛФ=D"));
	Иначе
		Форма.ОтветныйДокументСтрока = Результат.Заголовок;
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

Процедура ОтветныйДокументАвтоПодбор(Форма, Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка) Экспорт 
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		Отправитель = Неопределено;
		
		Если Форма.ИмяФормы = "Справочник.ДокументыПредприятия.Форма.ФормаВыбораИзКлассификатора" Тогда 
			Отправитель = Форма.Отправитель;
		Иначе 
			Отправитель = Форма.Объект.Контрагент;
		КонецЕсли;
	
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСОбращениямиВызовСервера.НайтиДокументыПредприятия(Текст, Отправитель);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтветныйДокументОкончаниеВводаТекста(Форма, Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт 
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Отправитель = Неопределено;
		
		Если Форма.ИмяФормы = "Справочник.ДокументыПредприятия.Форма.ФормаВыбораИзКлассификатора" Тогда 
			Отправитель = Форма.Отправитель;
		Иначе 
			Отправитель = Форма.Объект.Контрагент;
		КонецЕсли;
		
		ДанныеВыбора = РаботаСОбращениямиВызовСервера.НайтиДокументыПредприятия(Текст, Отправитель);
	Иначе 
		Форма.ОтветныйДокумент = Неопределено; 
		Форма.ОтветныйДокументСтрока = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Работа с таблицей Вопросы

Процедура ПриДобавленииВопроса(Форма, Отказ, Копирование, ОписаниеОповещения, Заголовок = "") Экспорт 
	
	Отказ = Истина;
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Копирование Тогда 
		ТекущиеДанные = Элементы.Вопросы.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
		ПараметрыФормы.Вставить("Отправитель", Неопределено);
		ПараметрыФормы.Вставить("Раздел", ТекущиеДанные.Раздел);
		ПараметрыФормы.Вставить("Тематика", ТекущиеДанные.Тематика);
		ПараметрыФормы.Вставить("Тема", ТекущиеДанные.Тема);
		ПараметрыФормы.Вставить("Вопрос", ТекущиеДанные.Вопрос);
		ПараметрыФормы.Вставить("КодВопроса", ТекущиеДанные.КодВопроса);
		
		ПараметрыФормы.Вставить("РезультатРассмотрения", ТекущиеДанные.РезультатРассмотрения);
		ПараметрыФормы.Вставить("ДатаОтвета", ТекущиеДанные.ДатаОтвета);
		ПараметрыФормы.Вставить("ОрганДляПередачи", ТекущиеДанные.ОрганДляПередачи);
		ПараметрыФормы.Вставить("МнениеАвтораОРезультатах", ТекущиеДанные.МнениеАвтораОРезультатах);
		ПараметрыФормы.Вставить("МнениеАвтораОМерах", ТекущиеДанные.МнениеАвтораОМерах);
		
		ПараметрыФормы.Вставить("СопроводительныйДокументСтрока", ТекущиеДанные.СопроводительныйДокументСтрока);
		ПараметрыФормы.Вставить("СопроводительныйДокумент", ТекущиеДанные.СопроводительныйДокумент);
		
		ПараметрыФормы.Вставить("ОтветныйДокументСтрока", ТекущиеДанные.ОтветныйДокументСтрока);
		ПараметрыФормы.Вставить("ОтветныйДокумент", ТекущиеДанные.ОтветныйДокумент);
		
		Если ЗначениеЗаполнено(Заголовок) Тогда 
			ПараметрыФормы.Вставить("Заголовок", Заголовок);
		КонецЕсли;
		
		ПараметрыФормы.Вставить("КлючСохраненияПоложенияОкна", "ВыборНесколькихВопросов");	
				
		ОткрытьФорму("Справочник.ДокументыПредприятия.Форма.ФормаВыбораИзКлассификатора", ПараметрыФормы,,,,,
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе 
		ОткрытьФорму(
			"ОбщаяФорма.ПомощникВыбораВопроса", , , , , ,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Обращения граждан

Процедура ПовторноеПриИзменении(Форма, Элемент) Экспорт 
	
	Элементы = Форма.Элементы;
	
	Если Не Форма.Повторное И ЗначениеЗаполнено(Форма.ПервичноеОбращение) Тогда 
		Форма.ПервичноеОбращение = Неопределено; 
	КонецЕсли;
	
	Элементы.ПервичноеОбращение.Доступность = Форма.Повторное;
	Элементы.ПервичноеОбращение.АвтоОтметкаНезаполненного = Форма.Повторное;
	Элементы.ПервичноеОбращение.ОтметкаНезаполненного = Форма.Повторное 
		И Не ЗначениеЗаполнено(Форма.ПервичноеОбращение);
	
КонецПроцедуры

Процедура ДубликатПриИзменении(Форма, Элемент) Экспорт 
	
	Элементы = Форма.Элементы;
	
	Если Не Форма.Дубликат И ЗначениеЗаполнено(Форма.ОсновноеОбращение) Тогда 
		Форма.ОсновноеОбращение = Неопределено; 
	КонецЕсли;
	
	Элементы.ОсновноеОбращение.Доступность = Форма.Дубликат;
	Элементы.ОсновноеОбращение.АвтоОтметкаНезаполненного = Форма.Дубликат;
	Элементы.ОсновноеОбращение.ОтметкаНезаполненного = Форма.Дубликат 
		И Не ЗначениеЗаполнено(Форма.ОсновноеОбращение);
	
КонецПроцедуры

Процедура ВидОбращенияПриИзменении(Форма, Элемент) Экспорт 
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если Форма.ВидОбращения = ПредопределенноеЗначение("Перечисление.ВидыОбращенийГраждан.Анонимное") Тогда 
		Объект.Контрагент = Неопределено;
		Объект.ПодписалОтКонтрагента = Неопределено;
		Объект.Контрагенты.Очистить();
		Элементы.Контрагент.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Контрагент.ОтметкаНезаполненного = Ложь;
		Элементы.Контрагент.Доступность = Ложь;
		Элементы.ПодписалОтКонтрагента.Доступность = Ложь;
	Иначе
		Элементы.Контрагент.АвтоОтметкаНезаполненного = Истина;
		Элементы.Контрагент.ОтметкаНезаполненного = Не ЗначениеЗаполнено(Объект.Контрагент);
		Элементы.Контрагент.Доступность = Истина;
		Элементы.ПодписалОтКонтрагента.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПервичноеОбращениеНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт 
	
	СтандартнаяОбработка = Ложь;
	Объект = Форма.Объект;
	ВидОбращенияАнонимное = ПредопределенноеЗначение("Перечисление.ВидыОбращенийГраждан.Анонимное");
	
	ПараметрыФормы = Новый Структура;
	Если Форма.ВидОбращения = ВидОбращенияАнонимное Тогда 
		ПараметрыФормы.Вставить("Отбор",
			Новый Структура("ВидОбращения, ЯвляетсяОбращениемОтГраждан", ВидОбращенияАнонимное, Истина));
	Иначе	
		Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не заполнено поле ""Отправитель""'"),,"Объект.Контрагент");
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы.Вставить("Отбор", 
			Новый Структура("Контрагент, ЯвляетсяОбращениемОтГраждан", Объект.Контрагент, Истина));
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ДокументыПредприятия.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

Процедура ОсновноеОбращениеНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт 
	
	СтандартнаяОбработка = Ложь;
	Объект = Форма.Объект;
	ВидОбращенияАнонимное = ПредопределенноеЗначение("Перечисление.ВидыОбращенийГраждан.Анонимное");
	
	ПараметрыФормы = Новый Структура;
	Если Форма.ВидОбращения = ВидОбращенияАнонимное Тогда 
		ПараметрыФормы.Вставить("Отбор", 
			Новый Структура("ВидОбращения, ЯвляетсяОбращениемОтГраждан", ВидОбращенияАнонимное, Истина));
	Иначе	
		Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не заполнено поле ""Отправитель""'"),,"Объект.Контрагент");
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы.Вставить("Отбор", 
			Новый Структура("Контрагент, ЯвляетсяОбращениемОтГраждан", Объект.Контрагент, Истина));
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ДокументыПредприятия.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

Процедура ОбращениеАвтоПодбор(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка) Экспорт 
	
	Объект = Форма.Объект;
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПараметрыПолученияДанных.Отбор.Вставить("Контрагент", Объект.Контрагент);
	КонецЕсли;
	
	ПараметрыПолученияДанных.Отбор.Вставить("ВидДокумента", Новый Структура("ЯвляетсяОбращениемОтГраждан", Истина));
	
КонецПроцедуры

// Открыть форму показа проблемных объектов.
// 
// Параметры:
//  ПроблемныеОбъекты - Массив Из См. Документы.ВыгрузкаВССТУ.НовыйПроблемныйОбъект
Процедура ОткрытьПроблемныеОбъекты(ПроблемныеОбъекты) Экспорт
	
	Если ПроблемныеОбъекты.Количество() = 0 Тогда
		Возврат; // Перестраховка, с пустым массивом вызывать не рекомендуется.
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ПроблемныеОбъекты", ПроблемныеОбъекты);
	ОткрытьФорму(
		"Документ.ВыгрузкаВССТУ.Форма.ПроблемныеОбъекты",
		ПараметрыФормы, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

// Создать документ "Выгрузка в ССТУ" из формы документа предприятия.
// 
// Параметры:
//  Форма - См. Справочник.ДокументыПредприятия.Форма.ФормаЭлемента
Асинх Процедура СоздатьВыгрузкуВССТУ(Форма) Экспорт
	
	Если Не Форма.ВидДокументаКэш.ЯвляетсяОбращениемОтГраждан Тогда
		// Перестраховка, кнопка не должна быть видна.
		ПоказатьПредупреждение(
			, НСтр("ru = 'Можно выгрузить только документ, являющийся обращением граждан/организацией'"));
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.Объект.РегистрационныйНомер) Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Сначала обращение должно быть зарегистрировано.'"));
		Возврат;
	КонецЕсли;
	
	Если Не Форма.ГотовоКВыгрузкеССТУ Тогда
		Если Форма.Элементы.ГотовоКВыгрузкеССТУ.ТолькоПросмотр Тогда
			// Если галочка недоступна (НДПС), то и новую выгрузку сразу создать нельзя.
			// Перестраховка, т.к. НДПС завязан на регистрацию, но могли вручную поправить НДПС.
			ПоказатьПредупреждение( ,
				НСтр("ru = 'Выгрузку в ССТУ пока создать недоступно по состоянию документа.'"));
			Возврат;
		КонецЕсли;
		
		Если Ждать ВопросАсинх(
			НСтр("ru = 'Установить признак ""Готово к выгрузке ССТУ и создать ""Выгрузку в ССТУ?""'"),
			РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
		Форма.ГотовоКВыгрузкеССТУ = Истина;
		Форма.Модифицированность = Истина;
		Если Не Форма.Записать() Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если Форма.Модифицированность Или Форма.Объект.Ссылка.Пустая() Тогда
			Если Ждать ВопросАсинх(
				НСтр("ru = 'Документ-обращение сначала должно быть записано. После этого будет создана
				|""Выгрузка в ССТУ"". Продолжить?'"),
				РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
			
			Если Не Форма.Записать() Тогда
				Возврат;
			КонецЕсли;
		Иначе
			Если Ждать ВопросАсинх(
				НСтр("ru = 'Будет создана ""Выгрузка в ССТУ"". Продолжить?'"),
				РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЭтоСозданиеПоСписку", Истина);
	ПараметрыФормы.Вставить("ДатаНачала", Форма.Объект.ДатаРегистрации);
	ПараметрыФормы.Вставить("ДатаОкончания", Форма.Объект.ДатаРегистрации);
	ПараметрыФормы.Вставить("Организация", Форма.Объект.Организация);
	ПараметрыФормы.Вставить("ДокументыОбращения", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Форма.Объект.Ссылка));
	ОткрытьФорму("Документ.ВыгрузкаВССТУ.Форма.ФормаДокумента", ПараметрыФормы, Форма, , , , );
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Обертка открывает диалог, дает выбрать файл, для вызова с форм из процедур "Асинх".
// 
// Параметры:
//  РежимДиалога - РежимДиалогаВыбораФайла - Открытие или Сохранение
//  НачальноеИмяФайла - Строка - Начальное имя, которое будет предложено пользователю
//  Фильтр - Строка - Фильтр, синтаксис по правилам фильтра для диалогов.
// 
// Возвращаемое значение:
//  Строка - Полное имя файла, или ""
Асинх Функция ФайлВыбранныйВДиалоге_Асинх(РежимДиалога, НачальноеИмяФайла, Фильтр) Экспорт

	Диалог = Новый ДиалогВыбораФайла(РежимДиалога);
	Диалог.МножественныйВыбор = Ложь;
	Диалог.ПолноеИмяФайла = НачальноеИмяФайла;
	Диалог.Фильтр = Фильтр;
	Если РежимДиалога = РежимДиалогаВыбораФайла.Сохранение Тогда
		Диалог.Заголовок = НСтр("ru = 'Укажите имя файла для сохранения'");
	ИначеЕсли РежимДиалога = РежимДиалогаВыбораФайла.Открытие Тогда
		Диалог.Заголовок = НСтр("ru = 'Укажите имя файла для открытия'");
	ИначеЕсли РежимДиалога = РежимДиалогаВыбораФайла.ВыборКаталога Тогда 
		Диалог.Заголовок = НСтр("ru = 'Укажите каталог'");
	Иначе
		ВызватьИсключение НСтр("ru = 'Передан неожиданный ""Режим диалога""'");
	КонецЕсли;
	
	РезультатВыбораФайла = Ждать Диалог.ВыбратьАсинх();
	Если РезультатВыбораФайла = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат РезультатВыбораФайла[0];
	
КонецФункции

// Шаблон имени файла - начальное имя выгрузки.
// 
// Параметры:
//  НомерВыгрузки - Число -
//  ДатаВыгрузки - Дата -
// 
// Возвращаемое значение:
//  Строка - Имя файла для показа в диалоге
Функция НачальноеИмяВыгрузки(НомерВыгрузки, ДатаВыгрузки) Экспорт
	
	Возврат СтрШаблон(НСтр("ru = 'Выгрузка %1 от %2.zip'"), НомерВыгрузки, Формат(ДатаВыгрузки, "ДЛФ=D"));
	
КонецФункции

// Функция-константа - "Фильтр" для диалога выбора файла.
// 
// Возвращаемое значение:
//  Строка -
Функция ФильтрZip() Экспорт
	
	Возврат НСтр("ru = 'Zip-архив | *.zip'");
	
КонецФункции

#КонецОбласти
