#Область ПрограммныйИнтерфейс

// Возвращает Истина, если параметр является ссылкой на действие.
// 
// Параметры:
// 	Ссылка - ЛюбаяСсылка - проверяемая ссылка.
// Возвращаемое значение:
// 	Булево - Истина, если параметр является ссылкой на действие
//
Функция ЭтоДействие(Ссылка) Экспорт
	
	Возврат ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДействияИсполнения")
		Или ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДействияОзнакомления")
		Или ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДействияПодписания")
		Или ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДействияРегистрации")
		Или ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДействияСогласования")
		Или ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДействияУтверждения");
	
КонецФункции

// Обновляет нумерацию обработки объекта
// 
// Параметры:
// 	ВидыДействий - ДеревоЗначений - дерево видов действий.
// 	КоличествоДействий - Число - счетчик количества действий.
// 
Процедура ОбновитьНумерациюОбработки(ВидыДействий, КоличествоДействий) Экспорт 
	
	Количество = 0;
	Для Каждого ВидДействияПериод Из ВидыДействий.ПолучитьЭлементы() Цикл
		НомерДействий = 1; 
		Для Каждого ВидДействия Из ВидДействияПериод.ПолучитьЭлементы() Цикл
			ВидДействия.НомерСтроки = НомерДействий;
			НомерДействий = НомерДействий + 1;
			Количество = Количество + 1;
		КонецЦикла;
	КонецЦикла;
	
	КоличествоДействий = Количество;
	
КонецПроцедуры

// Возвращает номер картинки из КоллекцияРезультатыВыполненияДействий.
//
Функция НомерКартинкиРезультата(Результат, Состояние = Неопределено, ЕстьЗаявкаОтказа = Ложь, ХарактерРезультата = Неопределено) Экспорт
	
	Если ХарактерРезультата = ПредопределенноеЗначение("Перечисление.ХарактерыРезультатов.Положительный") Тогда
		Возврат 4; // Выполнено положительно
	ИначеЕсли ХарактерРезультата = ПредопределенноеЗначение("Перечисление.ХарактерыРезультатов.ПоложительныйСЗамечаниями") Тогда
		Возврат 3; // Выполнено положительно с замечаниями
	ИначеЕсли ХарактерРезультата = ПредопределенноеЗначение("Перечисление.ХарактерыРезультатов.Отрицательный") Тогда
		Возврат 2; // Выполнено с отрицательным результатом	
	ИначеЕсли ХарактерРезультата = ПредопределенноеЗначение("Перечисление.ХарактерыРезультатов.Нейтральный") Тогда
		Возврат 1; // Выполнено
	КонецЕсли;
	
	Если ЕстьЗаявкаОтказа Тогда
		Возврат 5; // Отказ
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат) Тогда 
		Если ЗначениеЗаполнено(Состояние) 
			И (Состояние = ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.Выполняется") 
			Или Состояние = ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.ОтложенныйЗапуск")) Тогда
			Возврат 6;
		ИначеЕсли ЗначениеЗаполнено(Состояние) 
			И Состояние = ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.ВОчередиВыполнения") Тогда
			Возврат 7;
		ИначеЕсли ЗначениеЗаполнено(Состояние) 
			И Состояние = ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.Пропущено") Тогда
			Возврат 8;
		ИначеЕсли ЗначениеЗаполнено(Состояние) 
			И Состояние = ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.Остановлено") Тогда
			Возврат 11;
		ИначеЕсли ЗначениеЗаполнено(Состояние) 
			И Состояние = ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.Завершено") Тогда
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	
	Ранг = ДействияВызовСервера.РангРезультатаДействия(Результат);

	Если Ранг = 0 Тогда
		Возврат 0; // Пусто
		
	ИначеЕсли Ранг = 1 Тогда
		Возврат 5; // Отказ
		
	ИначеЕсли Ранг = 4 Тогда
		Возврат 1; // Выполнено
		
	ИначеЕсли Ранг = 2 Тогда
		Возврат 2; // Выполнено с отрицательным результатом	
		
	ИначеЕсли Ранг = 3 Тогда
		Возврат 3; // Выполнено положительно с замечаниями
		
	ИначеЕсли Ранг = 5 Тогда
		Возврат 4; // Выполнено положительно
		
	Иначе
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции

// Возвращает характер результата.
// 
// Параметры:
//  Результат - ПеречислениеСсылка.Результаты<ВидДействия> - результат действия.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ХарактерыРезультатов - Характер результата.
//
Функция ХарактерРезультата(Результат) Экспорт
	
	Ранг = ДействияВызовСервера.РангРезультатаДействия(Результат);

	Если Ранг = 4 Тогда
		
		ХарактерРезультата =
			ПредопределенноеЗначение("Перечисление.ХарактерыРезультатов.Нейтральный");
		
	ИначеЕсли Ранг = 2 Тогда
		
		ХарактерРезультата =
			ПредопределенноеЗначение("Перечисление.ХарактерыРезультатов.Отрицательный");	
		
	ИначеЕсли Ранг = 3 Тогда
		
		ХарактерРезультата =
			ПредопределенноеЗначение("Перечисление.ХарактерыРезультатов.ПоложительныйСЗамечаниями");
		
	ИначеЕсли Ранг = 5 Тогда
		
		ХарактерРезультата =
			ПредопределенноеЗначение("Перечисление.ХарактерыРезультатов.Положительный");
		
	Иначе
		
		ХарактерРезультата =
			ПредопределенноеЗначение("Перечисление.ХарактерыРезультатов.ПустаяСсылка");
		
	КонецЕсли;
	
	Возврат ХарактерРезультата;
	
КонецФункции

// Возвращает общий результат двух результатов участников.
//
Функция ОбщийРезультат(Результат1, Результат2) Экспорт
	
	ДляВыбораМинимального = Ложь;
	Если Результат1	= ПредопределенноеЗначение("Перечисление.РезультатыСогласования.НеСогласовано")
		Или Результат2 = ПредопределенноеЗначение("Перечисление.РезультатыСогласования.НеСогласовано") Тогда
		ДляВыбораМинимального = Истина;
	КонецЕсли;	
	Если Результат1	= ПредопределенноеЗначение("Перечисление.РезультатыПодписания.НеПодписано")
		Или Результат2 = ПредопределенноеЗначение("Перечисление.РезультатыПодписания.НеПодписано") Тогда
		ДляВыбораМинимального = Истина;
	КонецЕсли;	
	
	Если Результат1 = Неопределено
		Или Результат1 = Результат2
		Или ДействияВызовСервера.РангРезультатаДействия(Результат1, ДляВыбораМинимального)
			>= ДействияВызовСервера.РангРезультатаДействия(Результат2, ДляВыбораМинимального) Тогда
		
		Возврат Результат2;
	
	Иначе
		Возврат Результат1;
		
	КонецЕсли;
		
КонецФункции

// Возвращает общее состояние двух участников.
//
Функция ОбщееСостояние(Состояние1, Состояние2) Экспорт
	
	Если Состояние1 = Неопределено
		Или Состояние1 = Состояние2
		Или ДействияВызовСервера.РангСостоянияДействия(Состояние1, Истина) >= ДействияВызовСервера.РангСостоянияДействия(Состояние2, Истина) Тогда
		
		Возврат Состояние2;
	
	Иначе
		Возврат Состояние1;
		
	КонецЕсли;
		
КонецФункции

// Возвращает Истина, если указанное действие является действием исполнения.
//
Функция ЭтоДействиеИсполнения(Действие) Экспорт
	
	Возврат ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияИсполнения");
	
КонецФункции

// Возвращает Истина, если указанное действие является действием рассмотрения.
//
Функция ЭтоДействиеСогласования(Действие) Экспорт
	
	Возврат ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияСогласования");
	
КонецФункции

// Возвращает Истина, если указанное действие является действием ознакомления.
//
Функция ЭтоДействиеОзнакомления(Действие) Экспорт
	
	Возврат ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияОзнакомления");
	
КонецФункции

// Возвращает Истина, если указанное действие является действием Подписания.
//
Функция ЭтоДействиеПодписания(Действие) Экспорт
	
	Возврат ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияПодписания");
	
КонецФункции

// Возвращает Истина, если указанное действие является действием Регистрации.
//
Функция ЭтоДействиеРегистрации(Действие) Экспорт
	
	Возврат ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияРегистрации");
	
КонецФункции

// Возвращает Истина, если указанное действие является действием утверждения.
//
Функция ЭтоДействиеУтверждения(Действие) Экспорт
	
	Возврат ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияУтверждения");
	
КонецФункции

// Возвращает Истина, если указанное действие является действием с порядком исполнения.
//
Функция ЭтоДействиеСПорядком(Действие) Экспорт
	
	Возврат ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияИсполнения")
		Или ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияСогласования")
		Или ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияПодписания");
	
КонецФункции

// Возвращает Истина, если переданный тип действия поддерживает этапы.
//
Функция ЭтоТипДействияСЭтапами(ТипДействия) Экспорт
	
	Возврат ТипДействия = ПредопределенноеЗначение("Перечисление.ТипыДействий.Подписание")
		Или ТипДействия = ПредопределенноеЗначение("Перечисление.ТипыДействий.Согласование");
	
КонецФункции

// Возвращает Истина, если действие завершено.
//
// Параметры:
//	СостояниеДействия - ПеречислениеСсылка.СостоянияВыполненияДействий
//
Функция ДействиеЗавершено(СостояниеДействия) Экспорт
	
	Возврат 
		ЗначениеЗаполнено(СостояниеДействия) 
			И СостояниеДействия = ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.Завершено");
	
КонецФункции

Функция ПредставлениеПериодаДействияОбработки(ДействуетС, ДействуетПо) Экспорт 
	
	Представление = "";
	Если ЗначениеЗаполнено(ДействуетС) И ЗначениеЗаполнено(ДействуетПо) Тогда 
		Представление = СтрШаблон(НСтр("ru = 'Действует с %1 по %2'"),
			Формат(ДействуетС, "ДЛФ=D"), Формат(ДействуетПо, "ДЛФ=D"));
	Иначе 
		Представление = СтрШаблон(НСтр("ru = 'Действует с %1'"),
			Формат(ДействуетС, "ДЛФ=D"));
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Формирует структуру данных участника для удаления дублей участников.
//
// Возвращаемое значение:
//  Структура - Параметры участника для удаления дублей участников.
//   * РазвернутыйУчастник          - СправочникСсылка.ПолныеРоли,
//                                    СправочникСсылка.Пользователи,
//                                    СправочникСсылка.Сотрудники         - Участник, уже разыменованный, с развернутыми ролями на одного исполнителя.
//   * НеразвернутыйУчастник        - СправочникСсылка.СтруктураПредприятия,
//                                    СправочникСсылка.Сотрудники,
//                                    СправочникСсылка.РабочиеГруппы,
//                                    СправочникСсылка.ПолныеРоли,
//                                    СправочникСсылка.Пользователи,
//                                    СправочникСсылка.ВидыПодразделений,
//                                    СправочникСсылка.ПодразделенияКонтейнеры - Участник, ещё неразыменованный.
//   * ИдентификаторГруппы          - УникальныйИдентификатор                  - Идентификатор группировки, т.е. этапа или пункта.
//   * ИдентификаторСтрокиУчастника - УникальныйИдентификатор                  - Присвоенный строке участника идентификатор.
//
Функция ДанныеУчастникаДляОпределенияДублей() Экспорт
	
	ДанныеУчастникаДляОпределенияДублей = Новый Структура(
		"РазвернутыйУчастник,
		|НеразвернутыйУчастник,
		|ИдентификаторГруппы,
		|ИдентификаторСтрокиУчастника,
		|НаименованиеЗадачи,
		|Описание,
		|Защищенный");
	ДанныеУчастникаДляОпределенияДублей.ИдентификаторГруппы = УникальныйИдентификаторПустой();
	ДанныеУчастникаДляОпределенияДублей.НаименованиеЗадачи = "";
	ДанныеУчастникаДляОпределенияДублей.Описание = "";
	
	Возврат ДанныеУчастникаДляОпределенияДублей;
	
КонецФункции

// Для элемента действия в дереве "Обработка" собирает элементы его участников в дереве.
// 
// Параметры:
//  ЭлементДействия - ДанныеФормыЭлементДерева - Элемент действия дерева "Обработка".
//  ПечатьКарточкиДокумента - Булево
//  ВсеУровни - Булево - рекурсивно бежать вниз
// 
// Возвращаемое значение:
//  Массив - Элементы участников действия дереве "Обработка".
//
Функция ЭлементыУчастниковДействия(ЭлементДействия, ПечатьКарточкиДокумента = Ложь, ВсеУровни = Ложь) Экспорт
	
	ЭлементыУчастниковДействия = Новый Массив;
	ЭлементыКОбходу = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭлементДействия);
	Пока ЭлементыКОбходу.Количество() > 0 Цикл
		
		ЭлементКОбходу = ЭлементыКОбходу[0];
		ЭлементыКОбходу.Удалить(0);
		
		// Если это участник действия - отметим это.
		Если ЭлементКОбходу.ЭтоУчастник Тогда
			ЭлементыУчастниковДействия.Добавить(ЭлементКОбходу);
		КонецЕсли;
		
		// Выполним просмотр дерева вниз.
		ИндексОчередногоЭлемента = 0; // Для корректного порядка участников.
		
		Если Не ПечатьКарточкиДокумента Тогда
			ЭлементыСледующегоУровня = ЭлементКОбходу.ПолучитьЭлементы();
		Иначе
			ЭлементыСледующегоУровня = ЭлементКОбходу.Строки;
		КонецЕсли;		
		
		Если ВсеУровни = Истина Или 
			(ВсеУровни = Ложь И ЭлементыУчастниковДействия.Количество() = 0) Тогда // чтобы брать только первый уровень участников
			
			Для Каждого ЭлементСледующегоУровня Из ЭлементыСледующегоУровня Цикл
				ЭлементыКОбходу.Вставить(ИндексОчередногоЭлемента, ЭлементСледующегоУровня);
				ИндексОчередногоЭлемента = ИндексОчередногоЭлемента + 1;
			КонецЦикла;
			
		КонецЕсли;
		
		
	КонецЦикла;
	
	Возврат ЭлементыУчастниковДействия;
	
КонецФункции

// Помечает дубли участников подписью "(Будет удален автоматически как дубль)".
//
// Параметры:
//  ДанныеУчастников         - Массив       - Массив данных участников.
//                                            См. ДействияКлиентСервер.ДанныеУчастникаДляПометкиДублей().
//  ИмяРеквизитаПометки      - Строка       - Имя реквизита, в который будет добавлена пометка в строках участников.
//  ИдентификаторыУчастников - Соответствие - Идентификаторы строк участников.
//   * Ключ     - УникальныйИдентификатор  - Идентификатор строки участника.
//   * Значение - ДанныеФормыЭлементДерева - Элемент участника в дереве обработки.
//  ИдентификаторыДублей     - Массив       - Идентификаторы строк участников, которые являются дублями.
//
Процедура ПометитьДублиУчастников(ДанныеУчастников,
	ИмяРеквизитаПометки,
	ИдентификаторыУчастников,
	ИдентификаторыДублей) Экспорт
	
	// Снимаем старые пометки дублей участников.
	ТекстБудетУдаленКакДубль = НСтр("ru = 'Будет удален автоматически как дубль'");
	ПометкаДубляУчастника = СтрШаблон(" (%1)", ТекстБудетУдаленКакДубль);
	Для Каждого ДанныеУчастника Из ДанныеУчастников Цикл
		
		Если СтрНайти(ДанныеУчастника.ЭлементДереваУчастника[ИмяРеквизитаПометки], ПометкаДубляУчастника) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеУчастника.ЭлементДереваУчастника[ИмяРеквизитаПометки] =
			СтрЗаменить(ДанныеУчастника.ЭлементДереваУчастника[ИмяРеквизитаПометки], ПометкаДубляУчастника, "");
		
	КонецЦикла;
	
	// Устанавливаем новые пометки дублей участников.
	Для Каждого ИдентификаторДубля Из ИдентификаторыДублей Цикл
		ДанныеДубляУчастника = ИдентификаторыУчастников[ИдентификаторДубля];
		ДанныеДубляУчастника.ЭлементДереваУчастника[ИмяРеквизитаПометки] = СтрШаблон("%1 %2",
			ДанныеДубляУчастника.ЭлементДереваУчастника[ИмяРеквизитаПометки],
			ПометкаДубляУчастника);
		
		ДанныеДубляУчастника.ЭлементДереваУчастника.БудетУдален = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Формирует структуру данных участника для пометки дублей участников.
//
// Возвращаемое значение:
//  Структура - Параметры участника для пометки дублей участников.
//   * РазвернутыйУчастник    - СправочникСсылка.ПолныеРоли,
//                              СправочникСсылка.Пользователи,
//                              СправочникСсылка.Сотрудники         - Участник, уже разыменованный, с развернутыми ролями на одного исполнителя.
//   * НеразвернутыйУчастник  - СправочникСсылка.СтруктураПредприятия,
//                              СправочникСсылка.Сотрудники,
//                              СправочникСсылка.РабочиеГруппы,
//                              СправочникСсылка.ПолныеРоли,
//                              СправочникСсылка.Пользователи,
//                              СправочникСсылка.ВидыПодразделений,
//                              СправочникСсылка.ПодразделенияКонтейнеры - Участник, ещё неразыменованный.
//   * ИдентификаторГруппы    - УникальныйИдентификатор                  - Идентификатор группировки, т.е. этапа или пункта.
//   * ЭлементДереваУчастника - ДанныеФормыЭлементДерева                 - Элемент участника в дереве обработки.
//
Функция ДанныеУчастникаДляПометкиДублей() Экспорт
	
	ДанныеУчастникаДляПометкиДублей =Новый Структура(
		"РазвернутыйУчастник,
		|НеразвернутыйУчастник,
		|ИдентификаторГруппы,
		|ЭлементДереваУчастника,
		|НаименованиеЗадачи,
		|Описание,
		|Защищенный");
	ДанныеУчастникаДляПометкиДублей.ИдентификаторГруппы = УникальныйИдентификаторПустой();
	ДанныеУчастникаДляПометкиДублей.НаименованиеЗадачи = "";
	ДанныеУчастникаДляПометкиДублей.Описание = "";
	
	Возврат ДанныеУчастникаДляПометкиДублей;
	
КонецФункции

// Формирует параметры для пометки дублей участников.
//
// Параметры:
//  ДанныеУчастников - Массив - Массив данных участников для пометки дублей.
//                              См. ДействияКлиентСервер.ДанныеУчастникаДляПометкиДублей().
// 
// Возвращаемое значение:
//  Структура - Параметры для пометки дублей участников.
//   * ДанныеУчастниковДляОпределенияДублей - Массив - Массив данных участников определения дублей.
//                                                     См. ДействияКлиентСервер.ДанныеУчастникаДляОпределенияДублей().
//   * ИдентификаторыСтрокУчастников        - Соответствие - Идентификаторы строк участников.
//    * Ключ     - УникальныйИдентификатор  - Присвоенный строке участника идентификатор.
//    * Значение - ДанныеФормыЭлементДерева - Элемент участника в дереве обработки.
//
Функция ПараметрыДляПометкиДублейУчастников(ДанныеУчастников) Экспорт
	
	// Формируем данные для определения дублей.
	ДанныеУчастниковДляОпределенияДублей = Новый Массив;
	ИдентификаторыСтрокУчастников = Новый Соответствие;
	Для Каждого ДанныеУчастника Из ДанныеУчастников Цикл
		
		// Присваием данным участника уникальный идентификатор.
		УникальныйИдентификаторСоздан = Ложь;
		Пока Не УникальныйИдентификаторСоздан Цикл
			ИдентификаторСтрокиУчастника = Новый УникальныйИдентификатор;
			ДанныеУчастникаПоИдентификатору = ИдентификаторыСтрокУчастников[ИдентификаторСтрокиУчастника];
			Если ДанныеУчастникаПоИдентификатору = Неопределено Тогда
				ИдентификаторыСтрокУчастников[ИдентификаторСтрокиУчастника] = ДанныеУчастника;
				УникальныйИдентификаторСоздан = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ДанныеУчастника.РазвернутыйУчастник) Тогда
			Продолжить;
		КонецЕсли;
		
		// Формируем данные участника для определения дублей.
		ДанныеУчастникаДляОпределенияДублей = ДанныеУчастникаДляОпределенияДублей();
		ДанныеУчастникаДляОпределенияДублей.РазвернутыйУчастник = ДанныеУчастника.РазвернутыйУчастник;
		ДанныеУчастникаДляОпределенияДублей.НеразвернутыйУчастник = ДанныеУчастника.НеразвернутыйУчастник;
		ДанныеУчастникаДляОпределенияДублей.ИдентификаторСтрокиУчастника = ИдентификаторСтрокиУчастника;
		
		ЗаполнитьЗначенияСвойств(
			ДанныеУчастникаДляОпределенияДублей,
			ДанныеУчастника);
			
		ДанныеУчастниковДляОпределенияДублей.Добавить(ДанныеУчастникаДляОпределенияДублей);
		
	КонецЦикла;
	
	ПараметрыДляПометкиДублейУчастников = Новый Структура(
		"ДанныеУчастниковДляОпределенияДублей,
		|ИдентификаторыСтрокУчастников");
	ПараметрыДляПометкиДублейУчастников.ДанныеУчастниковДляОпределенияДублей = ДанныеУчастниковДляОпределенияДублей;
	ПараметрыДляПометкиДублейУчастников.ИдентификаторыСтрокУчастников = ИдентификаторыСтрокУчастников;
	
	Возврат ПараметрыДляПометкиДублейУчастников;
	
КонецФункции

// Возвращает Истина, если параметр является функцией участника, обрабатывающего результат.
//
Функция ЭтоФункцияОбработатьРезультат(ФункцияУчастника) Экспорт
	
	Если ФункцияУчастника = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат")
		Или ФункцияУчастника = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.ОбрабатывающийРезолюцию")
		Или ФункцияУчастника = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.ОбрабатывающийРезультат")
		Или ФункцияУчастника = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковРегистрации.ОбрабатывающийРезультат")
		Или ФункцияУчастника = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковСогласования.ОбрабатывающийРезультат")
		Или ФункцияУчастника = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковУтверждения.ОбрабатывающийРезультат") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет, участвует ли переданный тип действия в логике вытеснения участников
// 
// Параметры:
//  ТипДействия - ПеречислениеСсылка.ТипыДействий
// 
// Возвращаемое значение:
//  Булево - Истина, если участвует 
//
Функция ТипДействияУчаствуетВВытеснении(ТипДействия) Экспорт
	
	Возврат ТипДействия = ПредопределенноеЗначение("Перечисление.ТипыДействий.Подписание")
			Или ТипДействия = ПредопределенноеЗначение("Перечисление.ТипыДействий.Утверждение")
			Или ТипДействия = ПредопределенноеЗначение("Перечисление.ТипыДействий.Согласование");
	
КонецФункции

// Формирует новую структуру параметров вида объекта.
// 
// Возвращаемое значение:
//  Структура - Параметры вида объекта.
//   * ВидОбъекта - ОпределяемыйТип.ВидПредметаОбработки.
//   * ОбработкаЗадана - Булево.
//   * НастройкиДействийЗаданы - Булево.
//   * ВестиУчетСторон - Булево.
//   * ВестиУчетПоТематикам - Булево.
//   * РолиФайлов - Массив из Структура - Роли файлов.
//      ** Роль - СправочникСсылка.РолиФайлов.
//      ** Обязательная - Булево.
//      ** ТолькоОдинФайл - Булево.
//  
Функция НовыйПараметрыВидаОбъекта() Экспорт
	
	ПараметрыВидаОбъекта = Новый Структура;
	ПараметрыВидаОбъекта.Вставить("ВидОбъекта", Неопределено);
	ПараметрыВидаОбъекта.Вставить("ОбработкаЗадана", Ложь);
	ПараметрыВидаОбъекта.Вставить("НастройкиДействийЗаданы", Ложь);
	ПараметрыВидаОбъекта.Вставить("ВестиУчетСторон", Ложь);
	ПараметрыВидаОбъекта.Вставить("ВестиУчетПоТематикам", Ложь);
	ПараметрыВидаОбъекта.Вставить("РолиФайлов", Новый Массив);
	
	Возврат ПараметрыВидаОбъекта;
	
КонецФункции

// Формирует новую структуру параметров объекта обработки.
// 
// Возвращаемое значение:
//  Структура - Параметры объекта обработки.
//   * ОбъектОбработки - ОпределяемыйТип.ПредметДействия.
//   * ВидОбъекта - ОпределяемыйТип.ВидПредметаОбработки.
//   * Ответственные - Массив из СправочникСсылка.Сотрудники, СправочникСсылка.Пользователи.
//   * РегистрационныйНомер - Строка.
//   * Тематика - СправочникСсылка.ТематикиДокументов.
//   * Подразделение - СправочникСсылка.СтруктураПредприятия.
//   * Организация - СправочникСсылка.Организации.
//  
Функция НовыйПараметрыОбъектаОбработки() Экспорт
	
	НовыйПараметрыОбъекта = Новый Структура;
	НовыйПараметрыОбъекта.Вставить("ОбъектОбработки", Неопределено);
	НовыйПараметрыОбъекта.Вставить("ВидОбъекта", Неопределено);
	НовыйПараметрыОбъекта.Вставить("Ответственные", Новый Массив);
	НовыйПараметрыОбъекта.Вставить("РегистрационныйНомер", "");
	НовыйПараметрыОбъекта.Вставить("Тематика",
		ПредопределенноеЗначение("Справочник.ТематикиДокументов.ПустаяСсылка"));
	НовыйПараметрыОбъекта.Вставить("Подразделение",
		ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"));
	НовыйПараметрыОбъекта.Вставить("Организация",
		ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	НовыйПараметрыОбъекта.Вставить("Подготовил", Неопределено);	
	
	Возврат НовыйПараметрыОбъекта;
	
КонецФункции

// Формирует структуру параметров объекта.
// 
// Параметры:
//  ОбъектОбработки - ОпределяемыйТип.ПредметДействия.
//  РеквизитыОбъекта - ОпределяемыйТип.ПредметДействияОбъект, ДанныеФормыСтруктура, Структура.
// 
// Возвращаемое значение:
//  Структура - Параметры объекта. См. ДействияКлиентСервер.НовыйПараметрыОбъектаОбработки().
//  
Функция ПараметрыОбъектаОбработки(ОбъектОбработки, РеквизитыОбъекта) Экспорт
	
	ПараметрыОбъектаОбработки = НовыйПараметрыОбъектаОбработки();
	ПараметрыОбъектаОбработки.ОбъектОбработки = ОбъектОбработки;
	
	Если ТипЗнч(ОбъектОбработки) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		
		РеквизитыДокумента = РеквизитыОбъекта;
		
		ПараметрыОбъектаОбработки.ВидОбъекта = РеквизитыДокумента.ВидДокумента;
		ПараметрыОбъектаОбработки.РегистрационныйНомер = РеквизитыДокумента.РегистрационныйНомер;
		ПараметрыОбъектаОбработки.Тематика = РеквизитыДокумента.Тематика;
		ПараметрыОбъектаОбработки.Подразделение = РеквизитыДокумента.Подразделение;
		ПараметрыОбъектаОбработки.Организация = РеквизитыДокумента.Организация;
		
		Если ЗначениеЗаполнено(РеквизитыДокумента.Создал) Тогда
			ПараметрыОбъектаОбработки.Ответственные.Добавить(РеквизитыДокумента.Создал);
		КонецЕсли;
		Если ЗначениеЗаполнено(РеквизитыДокумента.Подготовил) Тогда
			ПараметрыОбъектаОбработки.Ответственные.Добавить(РеквизитыДокумента.Подготовил);
		КонецЕсли;
		Если ЗначениеЗаполнено(РеквизитыДокумента.Ответственный) Тогда
			ПараметрыОбъектаОбработки.Ответственные.Добавить(РеквизитыДокумента.Ответственный);
		КонецЕсли;
		
		ПараметрыОбъектаОбработки.Подготовил = РеквизитыДокумента.Подготовил;
		
	ИначеЕсли ТипЗнч(ОбъектОбработки) = Тип("СправочникСсылка.Мероприятия") Тогда
		
		РеквизитыМероприятия = РеквизитыОбъекта;
		
		ПараметрыОбъектаОбработки.ВидОбъекта = РеквизитыМероприятия.ВидМероприятия;
		ПараметрыОбъектаОбработки.Подразделение = РеквизитыМероприятия.Подразделение;
		ПараметрыОбъектаОбработки.Организация = РеквизитыМероприятия.Организация;
		
		Если ТипЗнч(РеквизитыМероприятия.Организатор) = Тип("СправочникСсылка.Сотрудники")
			Или ТипЗнч(РеквизитыМероприятия.Организатор) = Тип("СправочникСсылка.Пользователи") Тогда
			Если ЗначениеЗаполнено(РеквизитыМероприятия.Организатор) Тогда
				ПараметрыОбъектаОбработки.Ответственные.Добавить(РеквизитыМероприятия.Организатор);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(РеквизитыМероприятия.Куратор) Тогда
			ПараметрыОбъектаОбработки.Ответственные.Добавить(РеквизитыМероприятия.Куратор);
		КонецЕсли;
		Если ЗначениеЗаполнено(РеквизитыМероприятия.Подготовил) Тогда
			ПараметрыОбъектаОбработки.Ответственные.Добавить(РеквизитыМероприятия.Подготовил);
		КонецЕсли;
		
		ПараметрыОбъектаОбработки.Подготовил = РеквизитыМероприятия.Подготовил;
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный объект обработки %1 (%2).'"),
			ОбъектОбработки,
			ТипЗнч(ОбъектОбработки));
		
	КонецЕсли;
	
	ПараметрыОбъектаОбработки.Ответственные = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
		ПараметрыОбъектаОбработки.Ответственные);
	
	Возврат ПараметрыОбъектаОбработки;
	
КонецФункции

// Возвращает Истина, если указанное действие является действием с этапами.
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия - Ссылка на действие
// 
// Возвращаемое значение:
//  Булево - Истина, если указанное действие является действием с этапами.
//
Функция ЭтоДействиеСЭтапами(Действие) Экспорт
	
	Возврат ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияСогласования")
		Или ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияПодписания")
		Или Действие = ПредопределенноеЗначение("Перечисление.ТипыДействий.Согласование")
		Или Действие = ПредопределенноеЗначение("Перечисление.ТипыДействий.Подписание");
	
КонецФункции

// Возвращает текстовое Представление участника с дополнительным отступом.
// 
// Параметры:
//  Участник - ОпределяемыйТип.УчастникЗадач - участник действия.
// 
// Возвращаемое значение:
//  Строка - Представление участника
Функция ПредставлениеУчастника(Участник) Экспорт

	Возврат Строка(Участник) + "                              ";
			
КонецФункции

// Устанавливает описание, подсказку и отображение задержки начала выполнения действия.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - карточка настройки действия или действия.
//   ПредставлениеЗапуска - Строка, ФорматированнаяСтрока - описание задержки запуска 
//
Процедура НастроитьОтображениеОтложенногоНачалаВыполненияДействия(Форма, ПредставлениеЗапуска = Неопределено) Экспорт
	
	ОтложенноеНачалоВыполненияДни = Форма.ОтложенноеНачалоВыполненияДни;
	ОтложенноеНачалоВыполненияЧасы = Форма.ОтложенноеНачалоВыполненияЧасы;
	Элементы = Форма.Элементы;
	Элементы.ОчиститьЗадержку.Видимость = Истина;
	Элементы.ОписаниеОтложенногоНачалаВыполнения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
	Если ЭтоДействие(Форма.Объект.Ссылка) Тогда
		Элементы.ОписаниеОтложенногоНачалаВыполнения.ВысотаЗаголовка = 1;
	Иначе
		Элементы.ОписаниеОтложенногоНачалаВыполнения.ВысотаЗаголовка = 2;
	КонецЕсли;
	
	Если ЕстьЭлемент(Элементы, "ОтложенноеДействие") Тогда
		Элементы.ОтложенноеДействие.Видимость = Ложь;
	КонецЕсли;
	#Если Сервер Тогда
		Форма.Команды.ОчиститьЗадержку.Подсказка = НСтр("ru = 'Очистить отложенное начало выполнения действия'");
	#КонецЕсли
	
	Если ЗначениеЗаполнено(ПредставлениеЗапуска) Тогда
		Форма.ОписаниеОтложенногоНачалаВыполнения = ПредставлениеЗапуска;
		Элементы.ОписаниеОтложенногоНачалаВыполнения.Подсказка = 
			НСтр("ru = 'Выполнение действия начнется в указанное время'");
		Элементы.ОписаниеОтложенногоНачалаВыполнения.Ширина = 20;
		Элементы.ОписаниеОтложенногоНачалаВыполнения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Если ЕстьЭлемент(Элементы, "ОтложенноеДействие") Тогда
			Элементы.ОтложенноеДействие.Видимость = Истина;
		КонецЕсли;
		#Если Сервер Тогда
			Форма.Команды.ОчиститьЗадержку.Подсказка = НСтр("ru = 'Начать выполнение действия немедленно'");
		#КонецЕсли
		
		Возврат;
	Иначе
		Если ЭтоДействие(Форма.Объект.Ссылка) И ЗначениеЗаполнено(Форма.Объект.ОтложенноеВыполнениеДата) Тогда
			Форма.ОписаниеОтложенногоНачалаВыполнения = СтрШаблон(
				НСтр("ru = 'на %1'"),
				Формат(Форма.Объект.ОтложенноеВыполнениеДата, "ДФ='HH:mm dd.MM.yyyy'"));
			Элементы.ОписаниеОтложенногоНачалаВыполнения.Ширина = 15;
				
		ИначеЕсли ЗначениеЗаполнено(ОтложенноеНачалоВыполненияДни) И ЗначениеЗаполнено(ОтложенноеНачалоВыполненияЧасы) Тогда
			Форма.ОписаниеОтложенногоНачалаВыполнения = СтрШаблон(
				НСтр("ru = '%1 %2 и %3 %4'"),
				Строка(ОтложенноеНачалоВыполненияДни),
				ДелопроизводствоКлиентСервер.ПолучитьПодписьДней(ОтложенноеНачалоВыполненияДни),
				Строка(ОтложенноеНачалоВыполненияЧасы),
				ДелопроизводствоКлиентСервер.ПолучитьПодписьЧасов(ОтложенноеНачалоВыполненияЧасы));
			Элементы.ОписаниеОтложенногоНачалаВыполнения.Ширина = 11;
				
		ИначеЕсли ЗначениеЗаполнено(ОтложенноеНачалоВыполненияДни) Тогда
			Форма.ОписаниеОтложенногоНачалаВыполнения = СтрШаблон(
				НСтр("ru = '%1 %2'"),
				Строка(ОтложенноеНачалоВыполненияДни),
				ДелопроизводствоКлиентСервер.ПолучитьПодписьДней(ОтложенноеНачалоВыполненияДни));
			Элементы.ОписаниеОтложенногоНачалаВыполнения.Ширина = 5;
				
		ИначеЕсли ЗначениеЗаполнено(ОтложенноеНачалоВыполненияЧасы) Тогда
			Форма.ОписаниеОтложенногоНачалаВыполнения = СтрШаблон(
				НСтр("ru = '%1 %2'"),
				Строка(ОтложенноеНачалоВыполненияЧасы),
				ДелопроизводствоКлиентСервер.ПолучитьПодписьЧасов(ОтложенноеНачалоВыполненияЧасы));
			Элементы.ОписаниеОтложенногоНачалаВыполнения.Ширина = 5;
		Иначе
			Форма.ОписаниеОтложенногоНачалаВыполнения = НСтр("ru = 'не настроено'");
			Элементы.ОчиститьЗадержку.Видимость = Ложь;
			Элементы.ОписаниеОтложенногоНачалаВыполнения.Ширина = 9;
		КонецЕсли;
	КонецЕсли;
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
		УстановитьТекстПодсказкиОписаниеОтложенногоНачалаВыполнения(Форма, ИспользоватьГрафикиРаботы);
	#КонецЕсли
		
КонецПроцедуры

Функция ДниИЧасыЗадержкиПоСроку(СрокЗадержки) Экспорт
	
	ЗадержкаДни = Цел(СрокЗадержки/86400);
	ЗадержкаЧасы = 
		(СрокЗадержки - ЗадержкаДни * 86400)/3600;
			
	Возврат Новый Структура("ЗадержкаДни, ЗадержкаЧасы", ЗадержкаДни, ЗадержкаЧасы);
	
КонецФункции

// Возвращает структуру пункта исполнения.
// 
// Возвращаемое значение:
//  Структура:
//   * Номер - Массив.
//   * Описание - Строка.
//   * Срок - Дата.
//   * Автор - СправочникСсылка.Сотрудники.
//   * Контролер - СправочникСсылка.Сотрудники.
//   * УчастникиПункта - Массив из Структура:
//    ** Структура - см. ПараметраУчастникаПунктаИсполнения.
//
Функция СтруктураПунктаИсполнения() Экспорт
	
	СтруктураПункта = Новый Структура;
	СтруктураПункта.Вставить("Номер", Новый Массив());
	СтруктураПункта.Вставить("Описание", "");
	СтруктураПункта.Вставить("Срок", Дата(1, 1, 1));
	СтруктураПункта.Вставить("Автор", ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка"));
	СтруктураПункта.Вставить("Контролер", ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка"));
	СтруктураПункта.Вставить("УчастникиПункта", Новый Массив());
	
	Возврат СтруктураПункта;
	
КонецФункции

// Возвращает структуру параметров для участника пункта исполнения.
// 
// Возвращаемое значение:
//  Структура
//   * Участник - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли.
//   * Идентификатор - УникальныйИдентификатор.
//   * Ответственный - Булево.
//   * Срок - Дата.
//   * СрокДни - Число.
//   * СрокМинуты - Число.
//   * СрокЧасы - Число.
//   * ВариантУстановкиСрока - ПеречислениеСсылка.ВариантыУстановкиСрокаИсполнения.
//   * Функция - ПеречислениеСсылка.ФункцииУчастниковИсполнения.
//
Функция ПараметраУчастникаПунктаИсполнения() Экспорт
	
	ПараметрыУчастника = Новый Структура;
	
	ПараметрыУчастника.Вставить("Участник", Неопределено);
	ПараметрыУчастника.Вставить("Идентификатор", УникальныйИдентификаторПустой());
	ПараметрыУчастника.Вставить("Ответственный", Ложь);
	ПараметрыУчастника.Вставить("Срок", Дата(1,1,1));
	ПараметрыУчастника.Вставить("СрокДни", 0);
	ПараметрыУчастника.Вставить("СрокЧасы", 0);
	ПараметрыУчастника.Вставить("СрокМинуты", 0);
	
	ПараметрыУчастника.Вставить("ВариантУстановкиСрока",
		ПредопределенноеЗначение("Перечисление.ВариантыУстановкиСрокаИсполнения.ПустаяСсылка"));
	
	ПараметрыУчастника.Вставить("Функция",
		ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.ПустаяСсылка"));
		
	Возврат ПараметрыУчастника;
	
КонецФункции

// Вернет структуру для ОтметитьРезультатВыполнения   
// Возвращаемое значение:
//  Структура:
//   * Комментарий - Строка.
//   * НомерИтерации - Число.
//   * ПодписиЭП - ТаблицаЗначений.
//   * ДатаИсполнения - Дата.
//   * ЕстьФайлыОтчета - Булево.
//
Функция СтруктураОтметитьРезультатВыполнения() Экспорт
	
	Возврат Новый Структура ("Комментарий, НомерИтерации, ПодписиЭП, ДатаИсполнения, ЕстьФайлыОтчета, ЭтоВыполнениеЗадачиПоПочте, ЭтоВыполнениеЗадачиПоЭскалации",
	 						 "", 0, , , Ложь, Ложь, Ложь);
	
КонецФункции	

// Определяет наличие элемента по имени.
//
// Параметры:
//   Элементы - Структура - структура с данными действия. Используется для бесшовной интеграции.
//            - ВсеЭлементыФормы - элементы формы действия. Используется для просмотра действия на стороне ДО
//   ИмяЭлемента - Строка - имя искомого элемента.
//
// Возвращаемое значение:
//   Булево
//
Функция ЕстьЭлемент(Элементы, ИмяЭлемента) Экспорт
	
	Если ТипЗнч(Элементы) = Тип("Структура") Тогда
		Возврат Элементы.Свойство(ИмяЭлемента);
		
	ИначеЕсли ТипЗнч(Элементы) = Тип("ВсеЭлементыФормы") Тогда
		Возврат (Элементы.Найти(ИмяЭлемента) <> Неопределено);
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Строка с комментарием о выполнении действия вне программы
// 
// Параметры:
//  НижнийРегистр - Булево - комментарий должен быть в нижнем регистре
// 
// Возвращаемое значение:
//  Строка - Комментарий о выполнении вне программы
Функция КомментарийОВыполненииВнеПрограммы(НижнийРегистр = Ложь) Экспорт
	
	Результат = НСтр("ru='Выполнено вне программы'");
	
	Если НижнийРегистр Тогда
		Результат = НРег(Результат);
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливает текст подсказки описания отложенного начала выполнения в карточке действия.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка действия.
//  ИспользоватьГрафикиРаботы - Булево - используются графики работы.
//
Процедура УстановитьТекстПодсказкиОписаниеОтложенногоНачалаВыполнения(Форма, ИспользоватьГрафикиРаботы)
	
	ЭтоНастройкаДействия = НастройкиДействийКлиентСервер.ЭтоНастройкаДействия(Форма.Объект.Ссылка);
	
	Если ИспользоватьГрафикиРаботы Тогда
		Если ЭтоНастройкаДействия Тогда
			Форма.Элементы.ОписаниеОтложенногоНачалаВыполнения.Подсказка = 
				НСтр("ru = 'Если задано, то выполнение действия произойдет через указанное количество рабочих дней/часов, с учетом производственного календаря'");
		Иначе
			Форма.Элементы.ОписаниеОтложенногоНачалаВыполнения.Подсказка = 
				НСтр("ru = 'Если задано, то выполнение действия произойдет в указанное время или через указанное количество рабочих дней/часов, с учетом производственного календаря'");
		КонецЕсли;
	Иначе
		Если ЭтоНастройкаДействия Тогда
			Форма.Элементы.ОписаниеОтложенногоНачалаВыполнения.Подсказка = 
				НСтр("ru = 'Если задано, то выполнение действия произойдет через указанное количество календарных дней/часов'");
		Иначе
			Форма.Элементы.ОписаниеОтложенногоНачалаВыполнения.Подсказка = 
				НСтр("ru = 'Если задано, то выполнение действия произойдет в указанное время или через указанное количество календарных дней/часов'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Проставляет отметку защищенности этапу, если она совпадает у всех его участников
// 
// Параметры:
// 	Этап - ДанныеФормыЭлементДерева - Строка этапа в дереве участников обработки
//
Процедура УстановитьОтметкуЗащищенностиЭтапаПоУчастникам(Этап) Экспорт

	Участники = Этап.ПолучитьЭлементы();
	Если Участники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ЗащищенностьУчастников = ЗащищенностьУчастниковЭтапа(Этап);
	Если ЗащищенностьУчастников.ОтметкаСовпадает Тогда
		Этап.Защищенный = ЗащищенностьУчастников.ЗначениеОтметки;
	Иначе
		Этап.Защищенный = Ложь;
	КонецЕсли;

КонецПроцедуры

// Проверяет, совпадает ли отметка защищенности у всех участников этапа, и возвращает ее значение
// 
// Параметры:
// 	Этап - ДанныеФормыЭлементДерева - Строка этапа из дерева участников обработки
// Возвращаемое значение:
// 	Структура - Структура с признаком одинаковой отметки и значением этой отметки:
// * ЗначениеОтметки - Булево, Неопределено - Значение отметки в строках участников.
// 											  Неопределено, если оно не совпадает.
// * ОтметкаСовпадает - Булево - Признак совпадения отметки у всех участников.
//
Функция ЗащищенностьУчастниковЭтапа(Этап) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ОтметкаСовпадает", Истина);
	Результат.Вставить("ЗначениеОтметки", Неопределено);

	Участники = Этап.ПолучитьЭлементы();
	
	Если Участники.Количество() = 0 Тогда
		Результат.ОтметкаСовпадает = Ложь;
	КонецЕсли;
	
	Если Участники.Количество() > 0 Тогда
		ОтметкаПервого = Участники[0].Защищенный;
		Для Каждого Участник Из Участники Цикл
			Если Участник.Защищенный <> ОтметкаПервого Тогда
				Результат.ОтметкаСовпадает = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Результат.ОтметкаСовпадает Тогда
		Результат.Вставить("ЗначениеОтметки", ОтметкаПервого);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Проверяет наличие хотя бы одного защищенного участника в переданном этапе
// 
// Параметры:
//  Этап - ДанныеФормыЭлементДерева - Строка этапа из дерева участников обработки
// 
// Возвращаемое значение:
//  Булево - Есть защищенные участники
Функция ЕстьЗащищенныеУчастники(Этап) Экспорт

	Результат = Ложь;

	Участники = Этап.ПолучитьЭлементы();
	Если Участники.Количество() > 0 Тогда
		Для Каждого Участник Из Участники Цикл
			Если Участник.Защищенный Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак того, что обработка вида документа задана правилами.
// 
// Параметры:
//  ПараметрыВидаОбъекта - Структура - см. ДействияКлиентСервер.НовыйПараметрыВидаОбъекта().
// 
// Возвращаемое значение:
//  Булево - Истина, если обработка вида документа задана правилами
//
Функция ОбработкаЗаданаПравилами(ПараметрыВидаОбъекта) Экспорт
	
	Если ТипЗнч(ПараметрыВидаОбъекта) = Тип("Структура") 
		И ПараметрыВидаОбъекта.Свойство("ОбработкаЗадана") И ПараметрыВидаОбъекта.ОбработкаЗадана
		И ПараметрыВидаОбъекта.Свойство("НастройкиДействийЗаданы") И ПараметрыВидаОбъекта.НастройкиДействийЗаданы Тогда
		Возврат Истина;	
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Запоминает участников при открытии карточки действия.
// 
// Работает в паре с функцией УчастникиДействияИзмененыВКарточке.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка действия.
//
Процедура ЗапомнитьУчастниковПриОткрытииКарточки(Форма) Экспорт
	
	Для Каждого СтрокаУчастника Из Форма.Объект.Участники Цикл
		 ЗаполнитьЗначенияСвойств(Форма.УчастникиПриОткрытии.Добавить(), СтрокаУчастника);
	КонецЦикла;
	
КонецПроцедуры

// Проверяет факт изменения участников в карточке действия.
// 
// Работает в паре с процедурой ЗапомнитьУчастниковПриОткрытииКарточки.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка действия.
// 
// Возвращаемое значение:
//  Булево
//  
Функция УчастникиДействияИзмененыВКарточке(Форма) Экспорт
	
	Возврат ОбщегоНазначенияДокументооборотКлиентСервер.ЕстьОтличияВТаблицах(
		Форма.УчастникиПриОткрытии, Форма.Объект.Участники, "Участник, Идентификатор");
	
КонецФункции

#КонецОбласти