#Область ПрограммныйИнтерфейс

/////////////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКА ТИПОВ ЗНАЧЕНИЙ

// Возвращает Истина, если переданное значение является
// ссылкой на ДокументыПредприятия или Объектом типа ДокументыПредприятия
Функция ЭтоДокументПредприятия(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ДокументыПредприятия")
			Или ТипЗнч(Значение) = Тип("СправочникОбъект.ДокументыПредприятия");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ДокументыПредприятия");
	#КонецЕсли
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой или Объектом на Документ являющийся входящей корреспонденцией
Функция ЭтоВходящийДокумент(Значение) Экспорт
	
	Если Не ЭтоДокументПредприятия(Значение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		ЯвляетсяВходящейКорреспонденцией = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
			Значение, "ВидДокумента.ЯвляетсяВходящейКорреспонденцией");
	Иначе
		ЯвляетсяВходящейКорреспонденцией = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
			Значение.ВидДокумента, "ЯвляетсяВходящейКорреспонденцией");
	КонецЕсли;
	
	Возврат ЯвляетсяВходящейКорреспонденцией = Истина;
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой или Объектом на Документ являющийся исходящей корреспонденцией
Функция ЭтоИсходящийДокумент(Значение) Экспорт
	
	Если Не ЭтоДокументПредприятия(Значение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		ЯвляетсяИсходящейКорреспонденцией = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
			Значение, "ВидДокумента.ЯвляетсяИсходящейКорреспонденцией");
	Иначе
		ЯвляетсяИсходящейКорреспонденцией = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
			Значение.ВидДокумента, "ЯвляетсяИсходящейКорреспонденцией");
	КонецЕсли;
	
	Возврат ЯвляетсяИсходящейКорреспонденцией = Истина;
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на *Документы или Объектом типа *Документы
Функция ЭтоДокумент(Значение) Экспорт
	
	Возврат ЭтоДокументПредприятия(Значение);
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на ДокументыПредприятия или Объектом типа ДокументыПредприятия
// и у вида документа установлен признак того, что это комплект
Функция ЭтоКомплект(Значение) Экспорт
	
	Возврат ЭтоДокументПредприятия(Значение)
		И Значение.ВидДокумента.ЯвляетсяКомплектомДокументов;
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на Файлы или Объектом типа Файлы
Функция ЭтоФайл(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.Файлы")
			Или ТипЗнч(Значение) = Тип("СправочникОбъект.Файлы");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.Файлы");
	#КонецЕсли
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на ШаблоныДокументов или Объектом типа ШаблоныДокументов
Функция ЭтоШаблонДокументаПредприятия(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ШаблоныДокументов")
			Или ТипЗнч(Значение) = Тип("СправочникОбъект.ШаблоныДокументов");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ШаблоныДокументов");
	#КонецЕсли
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на шаблон документа или Объектом типа шаблон документа
Функция ЭтоШаблонДокумента(Значение) Экспорт
	
	Возврат ЭтоШаблонДокументаПредприятия(Значение);
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на ЗадачаИсполнителя или Объектом типа ЗадачаИсполнителя
Функция ЭтоЗадачаИсполнителя(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
			Или ТипЗнч(Значение) = Тип("ЗадачаОбъект.ЗадачаИсполнителя");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("ЗадачаСсылка.ЗадачаИсполнителя");
	#КонецЕсли
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на Контрагенты или Объектом типа Контрагенты
Функция ЭтоКонтрагент(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.Контрагенты")
			Или ТипЗнч(Значение) = Тип("СправочникОбъект.Контрагенты");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.Контрагенты");
	#КонецЕсли
	
КонецФункции

// Сформировать заголовок группы Файлы
Функция КоличествоФайловВЗаголовок(КоличествоФайлов) Экспорт
	
	Заголовок = НСтр("ru = 'Документ и файлы'");
	
	Если КоличествоФайлов <> 0 Тогда
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документ и файлы (%1)'"),
			КоличествоФайлов);
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции

// Получает строковое строку из регистрационного номера и даты регистрации
Функция ПредставлениеНомераИДаты(РегистрационныйНомер, ДатаРегистрации) Экспорт
	
	Если ЗначениеЗаполнено(РегистрационныйНомер) И ЗначениеЗаполнено(ДатаРегистрации) Тогда
		
		ПредставлениеНомераИДаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '№ %1 от %2'"),
			РегистрационныйНомер,
			Формат(ДатаРегистрации, "ДЛФ=D"));
		
	ИначеЕсли ЗначениеЗаполнено(РегистрационныйНомер) Тогда
		
		ПредставлениеНомераИДаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '№ %1'"),
			РегистрационныйНомер);
		
	Иначе
		
		ПредставлениеНомераИДаты = "";
	
	КонецЕсли;
	
	Возврат ПредставлениеНомераИДаты;
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на *Документы
Функция ЭтоСсылкаНаДокумент(Ссылка) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Подпись к количеству лет по склонениям
Функция ПодписьЛет(Количество) Экспорт
	
	Если Количество > 10 И Количество < 20 Тогда
		Возврат НСтр("ru = 'лет'");
	Иначе
		Срок = Количество - Цел(Количество / 10) * 10;
		Если Срок = 0 Тогда
			Возврат НСтр("ru = 'лет'");
		ИначеЕсли Срок = 1 Тогда
			Возврат НСтр("ru = 'год'");
		ИначеЕсли Срок < 5 Тогда
			Возврат НСтр("ru = 'года'");
		Иначе
			Возврат НСтр("ru = 'лет'");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Строковое описание разности дат в днях с учетом склонений
Функция РазностьДатВДнях(Дата1, Дата2) Экспорт
	
	ИспользоватьДатуИВремяВСрокахЗадач = РаботаСБизнесПроцессамиВызовСервера.ПолучитьИспользованиеДатыИВремениВСрокахЗадач();
	
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		ЧислоЧасов = Окр((Дата1 - Дата2) / (60*60));
		ЧислоДней = Окр(ЧислоЧасов / 24);
		ЧислоЧасов = ЧислоЧасов - ЧислоДней * 24;
	Иначе
		ЧислоЧасов = 0;
		ЧислоДней = (НачалоДня(Дата1) - НачалоДня(Дата2)) / (60*60*24);
	КонецЕсли;
		
	Если ЧислоЧасов < 0 Тогда
		ЧислоДней = ЧислоДней - 1;
		ЧислоЧасов = ЧислоЧасов + 24;
	КонецЕсли;
	ПодписьДней = ПолучитьПодписьДней(ЧислоДней);
	ПодписьЧасов = ПолучитьПодписьЧасов(ЧислоЧасов);
	
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		Если ЧислоДней > 0 И ЧислоЧасов > 0 Тогда
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 %2 и %3 %4'"),
				Строка(ЧислоДней),
				ПодписьДней,
				Строка(ЧислоЧасов),
				ПодписьЧасов);
		ИначеЕсли ЧислоДней > 0 Тогда
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1 %2",
				Строка(ЧислоДней),
				ПодписьДней);
		ИначеЕсли ЧислоЧасов > 0 Тогда
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1 %2",
				Строка(ЧислоЧасов),
				ПодписьЧасов);
		Иначе
			Возврат НСтр("ru = 'Менее 1 часа'");
		КонецЕсли;
	Иначе
		Если ЧислоДней > 0 Тогда
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1 %2",
				Строка(ЧислоДней),
				ПодписьДней);
		Иначе
			Возврат НСтр("ru = 'Менее 1 дня'");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Подпись к количеству дней по склонениям
Функция ПолучитьПодписьДней(ЧислоДней) Экспорт
	
	Если ЧислоДней > 10 И ЧислоДней < 20 Тогда
		Подпись = НСтр("ru = 'дней'");
	Иначе
		ПоследниеДвеЦифры = ЧислоДней - Цел(ЧислоДней / 100) * 100;
		ПоследняяЦифра = ЧислоДней - Цел(ЧислоДней / 10) * 10;
		
		Если ПоследняяЦифра = 0 Тогда
			Подпись = НСтр("ru = 'дней'");
		ИначеЕсли ПоследниеДвеЦифры > 10 И ПоследниеДвеЦифры < 20 Тогда
			Подпись = Нстр("ru = 'дней'");
		ИначеЕсли ПоследниеДвеЦифры < 10 Или ПоследниеДвеЦифры > 20 Тогда
			Если ПоследняяЦифра = 1 Тогда
				Подпись = Нстр("ru = 'день'");
			ИначеЕсли ПоследняяЦифра < 5 Тогда
				Подпись = НСтр("ru = 'дня'");
			Иначе
				Подпись = НСтр("ru = 'дней'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Подпись к количеству рабочих дней по склонениям
Функция ПолучитьПодписьРабочихДней(ЧислоДней) Экспорт
	
	Если ЧислоДней > 10 И ЧислоДней < 20 Тогда
		Подпись = НСтр("ru = 'рабочих дней'");
	Иначе
		ПоследниеДвеЦифры = ЧислоДней - Цел(ЧислоДней / 100) * 100;
		ПоследняяЦифра = ЧислоДней - Цел(ЧислоДней / 10) * 10;
		
		Если ПоследняяЦифра = 0 Тогда
			Подпись = НСтр("ru = 'рабочих дней'");
		ИначеЕсли ПоследниеДвеЦифры > 10 И ПоследниеДвеЦифры < 20 Тогда
			Подпись = Нстр("ru = 'рабочих дней'");
		ИначеЕсли ПоследниеДвеЦифры < 10 Или ПоследниеДвеЦифры > 20 Тогда
			Если ПоследняяЦифра = 1 Тогда
				Подпись = Нстр("ru = 'рабочий день'");
			ИначеЕсли ПоследняяЦифра < 5 Тогда
				Подпись = НСтр("ru = 'рабочих дня'");
			Иначе
				Подпись = НСтр("ru = 'рабочих дней'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Подпись к количеству часов по склонениям
Функция ПолучитьПодписьЧасов(ЧислоЧасов) Экспорт
	
	Если ЧислоЧасов > 10 И ЧислоЧасов < 20 Тогда
		Подпись = НСтр("ru = 'часов'");
	Иначе
		ПоследниеДвеЦифры = ЧислоЧасов - Цел(ЧислоЧасов / 100) * 100;
		ПоследняяЦифра = ЧислоЧасов - Цел(ЧислоЧасов / 10) * 10;
		
		Если ПоследняяЦифра = 0 Тогда
			Подпись = НСтр("ru = 'часов'");
		ИначеЕсли ПоследниеДвеЦифры > 10 И ПоследниеДвеЦифры < 20 Тогда 
			Подпись = НСтр("ru = 'часов'");
		ИначеЕсли ПоследниеДвеЦифры < 10 Или ПоследниеДвеЦифры > 20 Тогда
			Если ПоследняяЦифра = 1 Тогда
				Подпись = Нстр("ru = 'час'");
			ИначеЕсли ПоследняяЦифра < 5 Тогда
				Подпись = НСтр("ru = 'часа'");
			Иначе
				Подпись = НСтр("ru = 'часов'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Подпись к количеству минут по склонениям
Функция ПолучитьПодписьМинут(ЧислоМинут) Экспорт
	
	Если ЧислоМинут > 10 И ЧислоМинут < 20 Тогда
		Подпись = НСтр("ru = 'минут'");
	Иначе
		Срок = ЧислоМинут - Цел(ЧислоМинут / 10) * 10;
		Если Срок = 0 Тогда
			Подпись = НСтр("ru = 'минут'");
		ИначеЕсли Срок = 1 Тогда
			Подпись = НСтр("ru = 'минута'");
		ИначеЕсли Срок < 5 Тогда
			Подпись = НСтр("ru = 'минуты'");
		Иначе
			Подпись = НСтр("ru = 'минут'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Подпись к количеству месяцев по склонениям
Функция ПолучитьПодписьМесяцев(ЧислоМесяцев) Экспорт
	
	Если ЧислоМесяцев > 10 И ЧислоМесяцев < 20 Тогда
		Подпись = НСтр("ru = 'месяцев'");
	Иначе
		Срок = ЧислоМесяцев - Цел(ЧислоМесяцев / 10) * 10;
		Если Срок = 0 Тогда
			Подпись = НСтр("ru = 'месяцев'");
		ИначеЕсли Срок = 1 Тогда
			Подпись = НСтр("ru = 'месяц'");
		ИначеЕсли Срок < 5 Тогда
			Подпись = НСтр("ru = 'месяца'");
		Иначе
			Подпись = НСтр("ru = 'месяцев'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Подпись к количеству недель по склонениям
Функция ПолучитьПодписьНедель(ЧислоНедель) Экспорт
	
	Если ЧислоНедель > 10 И ЧислоНедель < 20 Тогда
		Подпись = НСтр("ru = 'недель'");
	Иначе
		Срок = ЧислоНедель - Цел(ЧислоНедель / 10) * 10;
		Если Срок = 0 Тогда
			Подпись = НСтр("ru = 'недель'");
		ИначеЕсли Срок = 1 Тогда
			Подпись = НСтр("ru = 'неделя'");
		ИначеЕсли Срок < 5 Тогда
			Подпись = НСтр("ru = 'недели'");
		Иначе
			Подпись = НСтр("ru = 'недель'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Подпись к количеству секунд по склонениям
Функция ПолучитьПодписьСекунд(ЧислоСекунд) Экспорт
	
	Если ЧислоСекунд > 10 И ЧислоСекунд < 20 Тогда
		Подпись = НСтр("ru = 'секунд'");
	Иначе
		ПоследниеДвеЦифры = ЧислоСекунд - Цел(ЧислоСекунд / 100) * 100;
		ПоследняяЦифра = ЧислоСекунд - Цел(ЧислоСекунд / 10) * 10;
		
		Если ПоследняяЦифра = 0 Тогда
			Подпись = НСтр("ru = 'секунд'");
		ИначеЕсли ПоследниеДвеЦифры > 10 И ПоследниеДвеЦифры < 20 Тогда
			Подпись = Нстр("ru = 'секунд'");
		ИначеЕсли ПоследниеДвеЦифры < 10 Или ПоследниеДвеЦифры > 20 Тогда
			Если ПоследняяЦифра = 1 Тогда
				Подпись = Нстр("ru = 'секунда'");
			ИначеЕсли ПоследняяЦифра < 5 Тогда
				Подпись = НСтр("ru = 'секунды'");
			Иначе
				Подпись = НСтр("ru = 'секунд'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на УведомленияПрограммы или Объектом типа УведомленияПрограммы
Функция ЭтоУведомлениеПрограммы(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.УведомленияПрограммы")
			Или ТипЗнч(Значение) = Тип("СправочникОбъект.УведомленияПрограммы");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.УведомленияПрограммы");
	#КонецЕсли
	
КонецФункции

// Проверяет, является ли переданное значение расширением скан-копии
//
// Параметры:
//    Расширение - Строка - расширение файла
//    КоличествоРасширенийСканКопий - Число - количество расширений скан-копией.
//
// Возвращаемое значение:
//    Булево - Истина, если переданное значение является расширением скан-копии
//
Функция ЭтоРасширениеСканКопии(Расширение, КоличествоРасширенийСканКопий = 0) Экспорт 
	
	РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Расширение);
	СписокРасширенийСканКопийОригиналов = 
		ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами().СписокРасширенийСканКопийОригиналов;
	
	СписокРасширенийСканКопийОригиналов = СтрЗаменить(СписокРасширенийСканКопийОригиналов, " ", ",");
	СписокРасширенийСканКопийОригиналов = СтрЗаменить(СписокРасширенийСканКопийОригиналов, ";", ",");
	МассивРасширенийСканКопий = СтрРазделить(СписокРасширенийСканКопийОригиналов, ",", Ложь);
	
	// Если расширения скан-копий не заданы, то автопометку скан-копией не делаем
	КоличествоРасширенийСканКопий = МассивРасширенийСканКопий.Количество();
	Если КоличествоРасширенийСканКопий = 0 Тогда 
		Возврат Ложь;
	Иначе 
		Возврат МассивРасширенийСканКопий.Найти(РасширениеБезТочки) <> Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает строковое представление срока действия документа
// Параметры
//    ДокументПредприятия - СправочникСсылка.ДокументыПредприятия - ссылка на документ
//    Комментарий        - Строка - комментарий к сроку действия
//
// Возвращаемое значение
//    Результат - строка - представление срока действия
Функция СформироватьПредставлениеСрокаДействия(ДокументПредприятия, Комментарий = "") Экспорт
	
	Результат = "";
	
	Если ЗначениеЗаполнено(ДокументПредприятия.ДатаНачалаДействия) Тогда
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'с %1'"),
			Формат(ДокументПредприятия.ДатаНачалаДействия, "ДЛФ=D")); 
	КонецЕсли;
	
	Если ДокументПредприятия.Бессрочный Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(Результат, ", ", НСтр("ru = 'бессрочный'"));
	ИначеЕсли ЗначениеЗаполнено(ДокументПредприятия.ДатаОкончанияДействия) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат,
			" ",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'по %1'"),
				Формат(ДокументПредприятия.ДатаОкончанияДействия, "ДЛФ=D")));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументПредприятия.ПорядокПродления) Тогда
		Если ДокументПредприятия.ПорядокПродления = ПредопределенноеЗначение(
				"Перечисление.ПорядокПродления.НеПродлевается") Тогда 
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				Результат,
				Символы.ПС,
					НСтр("ru = 'Не продлевается'"));
		ИначеЕсли ДокументПредприятия.ПорядокПродления = ПредопределенноеЗначение(
				"Перечисление.ПорядокПродления.ДопускаетПродление") Тогда 
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				Результат,
				Символы.ПС,
					НСтр("ru = 'Допускает продление'"));
		Иначе		
			ДобавитьЗначениеКСтрокеЧерезРазделитель(
				Результат,
				Символы.ПС,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Продлевается %1'"),
					НРег(ДокументПредприятия.ПорядокПродления)));
		КонецЕсли;		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Комментарий) Тогда 
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат,
			"",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '. %1'"),
				Комментарий));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на ВизыСогласования или Объектом типа ВизыСогласования
Функция ЭтоВизаСогласования(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ВизыСогласования")
			Или ТипЗнч(Значение) = Тип("СправочникОбъект.ВизыСогласования");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ВизыСогласования");
	#КонецЕсли
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на Резолюции или Объектом типа Резолюции
Функция ЭтоРезолюция(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.Резолюции")
			Или ТипЗнч(Значение) = Тип("СправочникОбъект.Резолюции");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.Резолюции");
	#КонецЕсли
	
КонецФункции

// Возвращает Истина, если переданное значение является ссылкой или объектом данных ознакомления под подпись
// 
// Параметры:
//  Значение - Произвольный
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоДанныеОзнакомленияПодПодпись(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ДанныеОзнакомленияПодПодпись")
			Или ТипЗнч(Значение) = Тип("СправочникОбъект.ДанныеОзнакомленияПодПодпись");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ДанныеОзнакомленияПодПодпись");
	#КонецЕсли
	
КонецФункции

// Устанавливает значение свойства Доступность/Видимость команды Создать в списке документов.
//
// Параметры:
//  Элементы - ВсеЭлементыФормы - коллекция элементов управляемой формы списка
//  ИмяСвойства - Строка - название свойства, которое требуется установить
//  ЗначениеСвойства - Булево - значение 
//
Процедура УстановитьВидимостьДоступностьКомандСоздания(Элементы, ИмяСвойства, ЗначениеСвойства) Экспорт 
	
	Элементы.СоздатьДокумент[ИмяСвойства] = ЗначениеСвойства;
	Элементы.СоздатьДокументВсеДействия[ИмяСвойства] = ЗначениеСвойства;
	
	// в новой платформе команды создания привязанные к списку скрываются сами собой. Попытка скрыть их кодом приводит к ошибке.
	//Элементы.СписокКонтекстноеМенюСоздать[ИмяСвойства] = ЗначениеСвойства;
	
КонецПроцедуры

// Возвращает руководителя текущего или вышестоящего подразделения.
//
// Параметры:
//    Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение, руководителя которого требуется найти
//    СотрудникПользователь - СправочникСсылка.Пользователи, СправочникСсылка.Сотрудники - ссылка на пользователя
//
// Возвращаемое значение:
//    Результат - СправочникСсылка.Пользователи, СправочникСсылка.Сотрудники - непосредственный руководитель подразделения
//
Функция ПолучитьНепосредственногоРуководителя(Подразделение, СотрудникПользователь) Экспорт
	
	РуководительПодразделения = СтруктураПредприятияВызовСервера.РуководительПодразделения(Подразделение);
	
	РодительПодразделения = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
		Подразделение, "Родитель");
	
	Если РуководительПодразделения = СотрудникПользователь Тогда 
		
		Если ЗначениеЗаполнено(РодительПодразделения) Тогда
			Руководитель = СтруктураПредприятияВызовСервера.РуководительПодразделения(
				РодительПодразделения);
		Иначе
			Руководитель = Неопределено;
		КонецЕсли;
		
	Иначе
		Руководитель = РуководительПодразделения;
	КонецЕсли;
	
	Возврат Руководитель;
	
КонецФункции

// Формирует текстовое представление состава документа
//
Функция ПолучитьСтрокуСоставДокумента(Ссылка) Экспорт
	
	СтрокаСостав = ?(Ссылка.КоличествоЛистов > 0, СтрШаблон(
		НСтр("ru = 'листов %1,'") + " ", Ссылка.КоличествоЛистов), "");
			
	СтрокаСостав = СтрокаСостав + ?(Ссылка.КоличествоПриложений > 0, СтрШаблон(
		НСтр("ru = 'приложений %1,'") + " ", Ссылка.КоличествоПриложений), "");
			
	СтрокаСостав = СтрокаСостав + ?(Ссылка.ЛистовВПриложениях > 0, СтрШаблон(
		НСтр("ru = 'листов в приложениях %1,'") + " ", Ссылка.ЛистовВПриложениях), "");
			
	СтрокаСостав = СтрокаСостав + ?(Ссылка.КоличествоЭкземпляров > 0, СтрШаблон(
		НСтр("ru = 'экземпляров %1,'") + " ", Ссылка.КоличествоЭкземпляров), "");
			
	СтрокаСостав = ВРег(Лев(СтрокаСостав,1))+Прав(СтрокаСостав, СтрДлина(СтрокаСостав) - 1);
	
	Если Прав(СтрокаСостав, 2) = ", " Тогда
		СтрокаСостав = Лев(СтрокаСостав, СтрДлина(СтрокаСостав) - 2);
	КонецЕсли;
	
	Возврат СтрокаСостав;
	
КонецФункции

// Возвращает Истину, если форма является формой вида документа
// Параметры
//    ИмяФормы - Строка - имя проверяемой формы
//
// Возвращаемое значение
//    Истина, если форма является формой вида документа
//
Функция ЭтоФормаВидаДокумента(ИмяФормы) Экспорт 
	
	Если ИмяФормы = "Справочник.ВидыДокументов.Форма.ФормаЭлемента" Тогда 
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает Истину, если форма является формой шаблона документа
// Параметры
//    ИмяФормы - Строка - имя проверяемой формы
//
// Возвращаемое значение
//    Истина, если форма является формой шаблона документа
//
Функция ЭтоФормаШаблонаДокумента(ИмяФормы) Экспорт 
	
	Если ИмяФормы = "Справочник.ШаблоныДокументов.Форма.ШаблонДокумента" Тогда 
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции


// Проверяет, является ли переданное имя формы именем формы элемента справочника ДокументыПредприятия
// 
// Параметры:
//  ИмяФормы - Строка - Имя формы для проверки
// 
// Возвращаемое значение:
//  Булево - Это форма документа
Функция ЭтоФормаДокумента(ИмяФормы) Экспорт
	Возврат ИмяФормы = "Справочник.ДокументыПредприятия.Форма.ФормаЭлемента";
КонецФункции

// Проверяет, является ли переданное имя формы именем формы элемента справочника Проекты
// 
// Параметры:
//  ИмяФормы - Строка - Имя формы для проверки
// 
// Возвращаемое значение:
//  Булево - Это форма проекта
Функция ЭтоФормаПроекта(ИмяФормы) Экспорт
	Возврат ИмяФормы = "Справочник.Проекты.Форма.ФормаЭлемента";
КонецФункции

// Проверяет, является ли переданное имя формы именем формы элемента справочника Мероприятия
// 
// Параметры:
//  ИмяФормы - Строка - Имя формы для проверки
// 
// Возвращаемое значение:
//  Булево - Это форма мероприятия
Функция ЭтоФормаМероприятия(ИмяФормы) Экспорт
	Возврат ИмяФормы = "Справочник.Мероприятия.Форма.ФормаЭлемента";
КонецФункции

// Получает все реквизиты из шаблона наименования документа.
//
// Параметры:
//  ТекстШаблона - Строка - анализируемый шаблон наименования
//  МассивРеквизитов - Массив - найденных реквизитов, учавствующих в автозаголовке документа.
//  ОписаниеОшибки - Строка - текст ошибки, если она возникнет.
//
Процедура ПолучитьПоляШаблонаНаименования(ТекстШаблона, МассивРеквизитов, ОписаниеОшибки) Экспорт 
	
	// проверка соответствия скобок
	ПозицияСкобки = 0;
	ПоказательСкобки = 0;
	
	врТекстШаблона = СокрЛП(ТекстШаблона);
	Для Инд = 1 По СтрДлина(врТекстШаблона) Цикл
		
		ТекСимвол = Сред(врТекстШаблона, Инд, 1);
		Если (ТекСимвол <> "[") И (ТекСимвол <> "]") Тогда
			Продолжить;
		КонецЕсли;	
		
		Если (ТекСимвол = "[") Тогда
			ПоказательСкобки = ПоказательСкобки + 1;
			Если ПоказательСкобки > 1 Тогда 
				ФрагментОшибки = Сред(врТекстШаблона, ПозицияСкобки + 1, Инд - ПозицияСкобки);
				
				Если ФрагментОшибки = "" Тогда 
					ОписаниеОшибки = НСтр("ru = 'Отсутствует символ ""]""'");
				Иначе
					ОписаниеОшибки = СтрШаблон(
						НСтр("ru = 'Отсутствует символ ""]"" в фрагменте ""%1""'"), ФрагментОшибки);
				КонецЕсли;
				
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если (ТекСимвол = "]") Тогда
			ПоказательСкобки = ПоказательСкобки - 1;
			Если ПоказательСкобки < 0 Тогда 
				ФрагментОшибки = Сред(врТекстШаблона, ПозицияСкобки + 1, Инд - ПозицияСкобки);
				
				Если ФрагментОшибки = "" Тогда 
					ОписаниеОшибки = НСтр("ru = 'Отсутствует символ ""[""'");
				Иначе
					ОписаниеОшибки = СтрШаблон(
						НСтр("ru = 'Отсутствует символ ""["" в фрагменте ""%1""'"), ФрагментОшибки);
				КонецЕсли;
				Возврат;
			Иначе 
				НайденноеПоле = Сред(врТекстШаблона, ПозицияСкобки + 1, Инд - ПозицияСкобки -1);
				МассивРеквизитов.Добавить(НайденноеПоле);
			КонецЕсли;
		КонецЕсли;
		
		ПозицияСкобки = Инд;
	КонецЦикла;
	
	Если ПоказательСкобки > 0 Тогда 
		ФрагментОшибки = Сред(врТекстШаблона, ПозицияСкобки + 1);
		
		Если ФрагментОшибки = "" Тогда 
			ОписаниеОшибки = НСтр("ru = 'Отсутствует символ ""]""'");
		Иначе
			ОписаниеОшибки = СтрШаблон(
				НСтр("ru = 'Отсутствует символ ""]"" в фрагменте ""%1""'"), ФрагментОшибки);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает сумму в строке при изменении цены или количества.
//
// Параметры:
//  ТекущаяСтрока - ТекущиеДанныеСписка - строка табличной части "Товары и услуги".
//  СтавкаНДС - СправочникСсылка.СтавкиНДС
//
Процедура ПересчитатьСуммуВСтрокеТЧ(ТекущаяСтрока, СтавкаНДС) Экспорт 
	
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущаяСтрока.Сумма = Окр(ТекущаяСтрока.Цена * ТекущаяСтрока.Количество, 2);
	КонецЕсли;
	
	ПересчитатьСуммуНДСВСтрокеТЧ(ТекущаяСтрока, СтавкаНДС);
	
КонецПроцедуры

// Пересчитывает цену в строке при изменении суммы.
//
// Параметры:
//  ТекущаяСтрока - ТекущиеДанныеСписка - строка табличной части "Товары и услуги".
//  СтавкаНДС - СправочникСсылка.СтавкиНДС
//
Процедура ПересчитатьЦенуПоСуммеВСтрокеТЧ(ТекущаяСтрока, СтавкаНДС) Экспорт
	
	Если ТекущаяСтрока.Количество = 0 Тогда
		ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма;
	Иначе
		ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока.Количество, 2);
	КонецЕсли;
	
	ПересчитатьСуммуНДСВСтрокеТЧ(ТекущаяСтрока, СтавкаНДС);
	
КонецПроцедуры

// Пересчитывает в строке сумму НДС от суммы в зависимости от включения НДС в цену.
//
// Параметры:
//  ТекущаяСтрока - ТекущиеДанныеСписка - строка табличной части "Товары и услуги".
//   СтавкаНДС - СправочникСсылка.СтавкиНДС
//
Процедура ПересчитатьСуммуНДСВСтрокеТЧ(ТекущаяСтрока, СтавкаНДС) Экспорт
	
	ТекПроцентНДС = УчетНДСВызовСервераПовтИсп.ЗначениеСтавкиНДС(СтавкаНДС);
	ТекущаяСтрока.СуммаНДС = РассчитатьСуммуНДС(ТекущаяСтрока.Сумма, ТекПроцентНДС);
	
КонецПроцедуры

// Рассчитывает сумму НДС от суммы в зависимости от включения НДС в цену.
//
// Параметры: 
//  Сумма - Число - сумма, от которой необходимо рассчитать сумму НДС.
//  ПроцентНДС - Число - ставка НДС числом.
//  ЦенаВключаетНДС - Булево - признак включения НДС в цену.
//
// Возвращаемое значение:
//  Число
//
Функция РассчитатьСуммуНДС(Сумма, ПроцентНДС, ЦенаВключаетНДС = Истина) Экспорт
	
	Если ЦенаВключаетНДС Тогда
		СуммаНДС = Сумма * ПроцентНДС / (ПроцентНДС + 100);
	Иначе
		СуммаНДС = Сумма * ПроцентНДС / 100;
	КонецЕсли;
	
	Возврат СуммаНДС;
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на Отсутствие или Объектом типа Отсутствие.
Функция ЭтоОтсутствие(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("ДокументСсылка.Отсутствие")
			Или ТипЗнч(Значение) = Тип("ДокументОбъект.Отсутствие");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("ДокументСсылка.Отсутствие");
	#КонецЕсли
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на Бронь или Объектом типа Бронь.
Функция ЭтоБронь(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("ДокументСсылка.Бронь")
			Или ТипЗнч(Значение) = Тип("ДокументОбъект.Бронь");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("ДокументСсылка.Бронь");
	#КонецЕсли
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на Контроль или Объектом типа Контроль
Функция ЭтоКонтрольОбъектов(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.Контроль")
			Или ТипЗнч(Значение) = Тип("СправочникОбъект.Контроль");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.Контроль");
	#КонецЕсли
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на Мероприятия или Объектом типа Мероприятия
Функция ЭтоМероприятие(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.Мероприятия")
			Или ТипЗнч(Значение) = Тип("СправочникОбъект.Мероприятия");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.Мероприятия");
	#КонецЕсли
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на Проекты или Объектом типа Проекты
Функция ЭтоПроект(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.Проекты")
			Или ТипЗнч(Значение) = Тип("СправочникОбъект.Проекты");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.Проекты");
	#КонецЕсли
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на ПроектныеЗадачи или Объектом типа ПроектныеЗадачи
Функция ЭтоПроектнаяЗадача(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ПроектныеЗадачи")
			Или ТипЗнч(Значение) = Тип("СправочникОбъект.ПроектныеЗадачи");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ПроектныеЗадачи");
	#КонецЕсли
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на СообщенияОбсуждений или Объектом типа СообщенияОбсуждений
Функция ЭтоСообщение(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.СообщенияОбсуждений")
			Или ТипЗнч(Значение) = Тип("СправочникОбъект.СообщенияОбсуждений");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.СообщенияОбсуждений");
	#КонецЕсли
	
КонецФункции

// Подпись к количеству писем по склонениям
Функция ПолучитьПодписьПисем(ЧислоПисем) Экспорт
	
	Если ЧислоПисем > 10 И ЧислоПисем < 20 Тогда
		Подпись = НСтр("ru = 'писем'");
	Иначе
		ПоследниеДвеЦифры = ЧислоПисем - Цел(ЧислоПисем / 100) * 100;
		ПоследняяЦифра = ЧислоПисем - Цел(ЧислоПисем / 10) * 10;
		
		Если ПоследняяЦифра = 0 Тогда
			Подпись = НСтр("ru = 'писем'");
		ИначеЕсли ПоследниеДвеЦифры > 10 И ПоследниеДвеЦифры < 20 Тогда
			Подпись = Нстр("ru = 'писем'");
		ИначеЕсли ПоследниеДвеЦифры < 10 Или ПоследниеДвеЦифры > 20 Тогда
			Если ПоследняяЦифра = 1 Тогда
				Подпись = Нстр("ru = 'письмо'");
			ИначеЕсли ПоследняяЦифра < 5 Тогда
				Подпись = НСтр("ru = 'письма'");
			Иначе
				Подпись = НСтр("ru = 'писем'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Возвращает строковое представление полного пути к территории/помещению 
// Параметры
//    ТерриторияПомещение - СправочникСсылка.ТерриторииИПомещения - ссылка на территорию
//
// Возвращаемое значение
//    ПолныйПутьТекст - Строка - представление полного пути
Функция ПолучитьПолныйПутьКПомещению(ТерриторияПомещение) Экспорт 
	
	ПолныйПуть = "";
	
	Если ЗначениеЗаполнено(ТерриторияПомещение) Тогда 
		ТекущийРодитель = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ТерриторияПомещение, "Родитель");
		Пока Не ТекущийРодитель.Пустая() Цикл
			ПолныйПуть = СокрЛП(ТекущийРодитель) + "\ " + ПолныйПуть;
			ТекущийРодитель = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ТекущийРодитель, "Родитель");
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолныйПуть) Тогда 
		ПолныйПуть = Лев(ПолныйПуть, СтрДлина(ПолныйПуть) - 2);
		ПолныйПутьТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (%2)'"),
			СокрЛП(ТерриторияПомещение), ПолныйПуть);
	Иначе 
		ПолныйПутьТекст = СокрЛП(ТерриторияПомещение);
	КонецЕсли;
	
	Возврат ПолныйПутьТекст;
	
КонецФункции

// Возвращает строковое представление полного пути к месту хранения дел 
// Параметры
//    МестоХранения - СправочникСсылка.МестаХраненияДел - ссылка на место хранения
//
// Возвращаемое значение
//    ПолныйПутьТекст - Строка - представление полного пути
Функция ПолучитьПолныйПутьКМестуХранения(МестоХранения, ИспользоватьСхемыПомещений = Ложь) Экспорт 
	
	Если Не ИспользоватьСхемыПомещений Тогда 
		Возврат СокрЛП(МестоХранения);
	КонецЕсли;
	
	ПолныйПуть = "";
	
	Если ЗначениеЗаполнено(МестоХранения) Тогда 
		ТекущийРодитель = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(МестоХранения, "ТерриторияПомещение");
		
		Пока Не ТекущийРодитель.Пустая() Цикл
			ПолныйПуть = СокрЛП(ТекущийРодитель) + "\ " + ПолныйПуть;
			ТекущийРодитель = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ТекущийРодитель, "Родитель");
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолныйПуть) Тогда 
		ПолныйПуть = Лев(ПолныйПуть, СтрДлина(ПолныйПуть) - 2);
		ПолныйПутьТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (%2)'"),
			СокрЛП(МестоХранения), ПолныйПуть);
	Иначе 
		ПолныйПутьТекст = СокрЛП(МестоХранения);
	КонецЕсли;
	
	Возврат ПолныйПутьТекст;
	
КонецФункции

// Возвращает Истина, если переданное значение является
// ссылкой на ЗаметкиДокументооборота или Объектом типа ЗаметкиДокументооборота
Функция ЭтоЗаметка(Значение) Экспорт
	
	#Если Сервер Тогда
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ЗаметкиДокументооборота")
			Или ТипЗнч(Значение) = Тип("СправочникОбъект.ЗаметкиДокументооборота");
	#Иначе
		Возврат ТипЗнч(Значение) = Тип("СправочникСсылка.ЗаметкиДокументооборота");
	#КонецЕсли
	
КонецФункции

// Формирует текстовое представление группы полей подписания
//
Функция ПолучитьСтрокуПодписи(Объект, ВыводитьКомментарий = Истина) Экспорт
	
	СтрокаПодпись = "";
	
	Если Объект.РезультатПодписания
		= ПредопределенноеЗначение("Перечисление.РезультатыПодписания.Подписано") Тогда
			РезультатПодписания = НСтр("ru = 'Да'");
	ИначеЕсли Объект.РезультатПодписания
		= ПредопределенноеЗначение("Перечисление.РезультатыПодписания.НеПодписано") Тогда
			РезультатПодписания = НСтр("ru = 'Отклонен'");
	Иначе
			РезультатПодписания = НСтр("ru = 'Нет'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаПодписания)
		И (Объект.РезультатПодписания
			= ПредопределенноеЗначение("Перечисление.РезультатыПодписания.Подписано")
			Или Объект.РезультатПодписания
			= ПредопределенноеЗначение("Перечисление.РезультатыПодписания.НеПодписано")) Тогда
				СтрокаПодпись = СтрШаблон("%1 (%2, %3)",
					РезультатПодписания, Объект.Подписал, Формат(Объект.ДатаПодписания, "ДЛФ=D"));
	Иначе
		СтрокаПодпись = СтрШаблон("%1 (%2)",
			РезультатПодписания, Объект.Подписал);
	КонецЕсли;
	
	Если Прав(СтрокаПодпись, 2) = "()" Тогда
		СтрокаПодпись = Лев(СтрокаПодпись, СтрДлина(СтрокаПодпись) - 3);
	КонецЕсли;
	
	Если ВыводитьКомментарий И ЗначениеЗаполнено(Объект.КомментарийПодписи) Тогда
		СтрокаПодпись = СтрокаПодпись + " " + Объект.КомментарийПодписи;
	КонецЕсли;
	
	Возврат СтрокаПодпись;
	
КонецФункции

// Проверяет, зарегистрирован ли документ.
//
// Параметры:
//  РегистрационныйНомер - Строка - Регистрационный номер документа.
//
// Возвращаемое значение:
//  Булево - Документ зарегистрирован.
//
Функция ДокументЗарегистрирован(РегистрационныйНомер) Экспорт
	
	ДокументЗарегистрирован = ЗначениеЗаполнено(РегистрационныйНомер);
	
	Возврат ДокументЗарегистрирован;
	
КонецФункции

// Возвращает значение заголовка дела, которое будет сформировано автоматически
// на основании заголовка номенклатуры, номера тома и номера части.
// 
// Параметры:
//  ЗаголовокНоменклатурыДел - Строка
//  ТомЧастьСтрокой - Строка
//
// Возвращаемое значение:
//  Строка - Заголовок дела.
//
Функция АвтоЗаголовокДела(ЗаголовокНоменклатурыДел, ТомЧастьСтрокой) Экспорт
	
	ЗаголовокДела = "";
	Если Не ЗначениеЗаполнено(ЗаголовокНоменклатурыДел) Тогда
		Возврат ЗаголовокДела;
	КонецЕсли;
	
	ЗаголовокДела = ЗаголовокНоменклатурыДел + " " + ТомЧастьСтрокой;
	
	Возврат ЗаголовокДела;
	
КонецФункции

// Вычисляет представление тома и части для наименования дела.
//
// Параметры:
//  НомерТома - Число
//  НомерЧасти - Число
//
// Возвращаемое значение:
//  Строка - представление.
// 
Функция НомерТомаЧастиДляНаименования(НомерТома, НомерЧасти) Экспорт
	
	ТомЧастьСтрокой = "";
	
	НомерТомаСтрокой = Формат(НомерТома, "ЧГ=");
	НомерЧастиСтрокой = Формат(НомерЧасти, "ЧГ=");
	
	Если ЗначениеЗаполнено(НомерТома) Тогда
		Если ЗначениеЗаполнено(НомерЧасти) Тогда
			ТомЧастьСтрокой = СтрШаблон(НСтр("ru = '(том №%1, ч. %2)'"),
				НомерТомаСтрокой, НомерЧастиСтрокой);
		Иначе
			ТомЧастьСтрокой = СтрШаблон(НСтр("ru = '(том №%1)'"), НомерТомаСтрокой);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(НомерЧасти) Тогда
		ТомЧастьСтрокой = СтрШаблон(НСтр("ru = '(ч. %1)'"), НомерЧастиСтрокой);
	КонецЕсли;
	
	Возврат ТомЧастьСтрокой;
	
КонецФункции

// Однотипный текст "Нет разрешения на создание документов вида ...". Для вывода сообщений.
// 
// Возвращаемое значение:
//  Строка -
Функция Текст_НетРазрешенияНаСозданиеДокументовВида() Экспорт
	
	Возврат НСтр("ru = 'Нет разрешения на создание документов вида'");
	
КонецФункции

// Однотипный текст сообщения для вызовов при создании документов.
// 
// Возвращаемое значение:
//  Строка -
Функция Текст_НетШаблоновИлиДоступаКНим() Экспорт
	
	Возврат
		НСтр("ru = 'Документ можно создавать только по шаблону. Отсутствуют шаблоны, либо нет разрешения на доступ к ним.
		|Обратитесь к администратору.'")
	
КонецФункции

// Перечисление вариантов доступности по состоянию
// 
// Возвращаемое значение:
//  Структура:
//    * Доступно - Строка
//    * Недоступно - Строка
//    * НеНастроено - Строка
Функция ВариантыДоступностиПоСостоянию() Экспорт
	
	ВариантыДоступности = Новый Структура;
	ВариантыДоступности.Вставить("Доступно", "Доступно");
	ВариантыДоступности.Вставить("Недоступно", "Недоступно");
	ВариантыДоступности.Вставить("НеНастроено", "НеНастроено");
	
	Возврат ВариантыДоступности;
	
КонецФункции

// Возвращает доступность поля карточки документа по состоянию
//  Во внешнем соединении всегда вернет вариант ВариантыДоступностиПоСостоянию().НеНастроено
// 
// Параметры:
//  Форма - см. Справочник.ДокументыПредприятия.Форма.ФормаЭлемента
//  ИмяПоля - Строка
// 
// Возвращаемое значение:
//  Строка - см. ВариантыДоступностиПоСостоянию
Функция ДоступностьПоляФормыДокументаПоСостоянию(Форма, ИмяПоля) Экспорт
	
	#Если Не ВнешнееСоединение Тогда
	
	ДоступныеПоля = Форма.ДоступныеПоля;
	Если ТипЗнч(ДоступныеПоля) = Тип("Структура")
		И ДоступныеПоля.Свойство(ИмяПоля) Тогда
		
		Возврат ВариантыДоступностиПоСостоянию().Доступно;
	КонецЕсли;
	
	НедоступныеПоля = Форма.НедоступныеПоля;
	Если ТипЗнч(НедоступныеПоля) = Тип("Структура")
		И НедоступныеПоля.Свойство(ИмяПоля) Тогда
		
		Возврат ВариантыДоступностиПоСостоянию().Недоступно;
	КонецЕсли;
	
	#КонецЕсли
	
	Возврат ВариантыДоступностиПоСостоянию().НеНастроено;
	
КонецФункции

#КонецОбласти
