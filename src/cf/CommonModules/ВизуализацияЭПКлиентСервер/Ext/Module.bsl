#Если НЕ ВебКлиент И Не МобильныйКлиент Тогда

#Область ПрограммныйИнтерфейс
	
//Выполняет вставку изображения визуализации ЭП в файл MSWord вместо тэга
//
//	Параметры:
//	ДвоичныеДанныеФайла - ДвоичныеДанные - Двоичные данные исходного файла
//	Расширение -Строка - Расширение файла
//	ШтампыПодписейЭП - Соответствие из КлючИЗначение:
//	 * Ключ - Строка - см. ВизуализацияЭПКлиентСервер.ТегВсеПодписи
//	                   см. ВизуализацияЭПКлиентСервер.ТегНашиПодписи
//	                   см. ВизуализацияЭПКлиентСервер.ТегПодписиКонтрагентов
//	 * Значение - Массив из см. РаботаСЭП.НовыйДанныеОтметки.
//	НастройкиШтампаЭП - Структура из см. РаботаСФайламиВызовСервера.ПолучитьНастройкиШтампаЭП
//
//	Возвращаемое значение:
//		ДвоичныеДанные,
//		Булево:
//			Истина, если тэг в файле найден и произведена вставка изображения визуализации
//			Ложь, если изображение визуализации не было вставлено
Функция ВставитьВизуализациюЭПВместоТэга(
	Знач ДвоичныеДанныеФайла, 
	Знач Расширение,
	Знач ШтампыПодписейЭП,
	НастройкиШтампаЭП) Экспорт

	МассивТегов = Новый Массив;
	Для Каждого КлючИЗначение Из ШтампыПодписейЭП Цикл
		МассивТегов.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;	 
	
	ВсеДанныеОтметок = ШтампыПодписейЭП[ТегВсеПодписи()];
	
	Результат = Ложь;
	
	СтраницаВставкиШтампаЭП = НастройкиШтампаЭП.СтраницаВставкиШтампаЭП;
	ИтоговыйФорматФайлаСоШтампомЭП = НастройкиШтампаЭП.ИтоговыйФорматФайлаСоШтампомЭП;
	
	ВставкаНаКлиенте = 
		НРег(Расширение) = "doc"
		Или ( (НРег(Расширение) = "xls" Или НРег(Расширение) = "xlsx") И Не НастройкиШтампаЭП.Использовать1СШтамп)
		Или (НРег(Расширение) = "docx" 
		И СтраницаВставкиШтампаЭП = ПредопределенноеЗначение("Перечисление.СтраницаВставкиКартинки.Каждая")
		И Не НастройкиШтампаЭП.Использовать1СШтамп);

	НадоПреобразоватьВPdf = 
		(НРег(Расширение) <> "pdf" 
		И ИтоговыйФорматФайлаСоШтампомЭП = ПредопределенноеЗначение("Перечисление.ИтоговыйФорматФайлаСоШтампомЭП.PDFA"));
	
	WordApp = Неопределено;
	
	СисИнфо = Новый СистемнаяИнформация;   
	ЭтоLinux = Ложь;
	Если (СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86 
		Или СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86_64) Тогда
		ЭтоLinux = Истина;
	КонецЕсли;	
	
	Если ЭтоLinux
		И ВставкаНаКлиенте 
		И Не НастройкиШтампаЭП.Использовать1СШтамп Тогда
		Возврат ДвоичныеДанныеФайла; // вернем что было, без штампа 	
	КонецЕсли;  
	
	#Если ВебКлиент Тогда

		Если ВставкаНаКлиенте 
			И НадоПреобразоватьВPdf 
			И Не НастройкиШтампаЭП.Использовать1СШтамп Тогда
			Возврат ДвоичныеДанныеФайла; // вернем что было, без штампа 	
		КонецЕсли;  
		
	#КонецЕсли	
	
	ЭтоТонкийКлиент = Ложь;
	#Если ТонкийКлиент Тогда
		
		ЭтоТонкийКлиент = Истина;

	#КонецЕсли	
	
	НеИщемТеги = Ложь;
	Если (ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Или ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент()) 
		И НастройкиШтампаЭП.Использовать1СШтамп Тогда
		ВставкаНаКлиенте = Ложь; // вставки по тегам не будет.
		НеИщемТеги = Истина;
	КонецЕсли;     
	
	ВысотаКартинки = 22;
		
	Если Расширение = "odt" Тогда
		
	    НайденТэгШтрихкода = НайтиТэгДляВставкиКартинки(ДвоичныеДанныеФайла, Расширение, МассивТегов); 
		Если НайденТэгШтрихкода Тогда
			
			
			ДвоичныеДанныеЗаполненногоФайла 
				= ВизуализацияЭПOpenOfficeВызовСервера.ВставитьВизуализациюВФайлODTВместоТэга(
				МассивТегов, ШтампыПодписейЭП, ДвоичныеДанныеФайла, ВысотаКартинки, НастройкиШтампаЭП);
			
		Иначе
			
			Если НастройкиШтампаЭП.Использовать1СШтамп Тогда
				
				Возврат ВизуализацияЭПВызовСервера.ДвоичныеДанныеФайлаСШтампомИспользуя1СШтамп(
					Расширение, ДвоичныеДанныеФайла, ВсеДанныеОтметок, НастройкиШтампаЭП);
					
			КонецЕсли;	
			
			ДвоичныеДанныеЗаполненногоФайла 
				= ВизуализацияЭПOpenOfficeВызовСервера.ВставитьИзображениеЭПВФайлODTСУказаниемПоложения(
					ВсеДанныеОтметок, ДвоичныеДанныеФайла, НастройкиШтампаЭП, 
					ВысотаКартинки);
			
		КонецЕсли;
		
		Если НадоПреобразоватьВPdf И ЭтоТонкийКлиент Тогда
			// на клиенте в pdf преобразуем
			ДвоичныеДанныеЗаполненногоФайла = ПреобразоватьOpenOfficeВPdf(
				ДвоичныеДанныеЗаполненногоФайла, Расширение);
		КонецЕсли;			

		Возврат ДвоичныеДанныеЗаполненногоФайла;       

	ИначеЕсли Расширение = "xls" Или Расширение = "xlsx" Тогда	
		
		Если НастройкиШтампаЭП.Использовать1СШтамп Тогда
			
			Возврат ВизуализацияЭПВызовСервера.ДвоичныеДанныеФайлаСШтампомИспользуя1СШтамп(
				Расширение, ДвоичныеДанныеФайла, ВсеДанныеОтметок, НастройкиШтампаЭП);
				
		КонецЕсли;	
		
		ИмяФайла = ВставитьКартинкуВФайлXlsСУказаниемПоложения(Расширение, ДвоичныеДанныеФайла, 
			ВсеДанныеОтметок, НастройкиШтампаЭП);
			
	  	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
		УдалитьФайлы(ИмяФайла);
				
		Возврат ДвоичныеДанныеФайла;       

	ИначеЕсли АвтозаполнениеШаблоновФайловКлиентСервер.ФорматMSWord(Расширение) Тогда	
		
		Если ВставкаНаКлиенте Тогда
			Попытка
				СисИнфо = Новый СистемнаяИнформация;
				Если СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
					WordApp = Новый COMОбъект("Word.Application");
				КонецЕсли;
			Исключение
				ВызватьИсключение(НСтр("ru = 'Ошибка работы с приложением MS Word. Необходимо проверить правильность установки приложения.'"));
			КонецПопытки;
		КонецЕсли;
		
		НайденТэгШтрихкода = Ложь;
		Если НеИщемТеги Или (ЭтоLinux И Расширение = "doc") Тогда
			НайденТэгШтрихкода = Ложь;
		Иначе	
			НайденТэгШтрихкода = НайтиТэгДляВставкиКартинки(ДвоичныеДанныеФайла, 
				Расширение, МассивТегов, WordApp); 
		КонецЕсли;	
			
		Если НайденТэгШтрихкода Тогда
			
			// вместо тега - тут docx всегда на сервере
			Если Расширение = "doc" Тогда 
				
				ИмяФайла = ВставитьШтампВФайлMSWordВместоТэга(Расширение, 
					МассивТегов, ШтампыПодписейЭП, ДвоичныеДанныеФайла, 
					НастройкиШтампаЭП, WordApp);
			  	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
				УдалитьФайлы(ИмяФайла);
					
				Если WordApp <> Неопределено Тогда
					WordApp.Quit();
					WordApp = Неопределено;
				КонецЕсли;
				
				Возврат ДвоичныеДанныеФайла;
			ИначеЕсли Расширение = "docx" Тогда
				
				ДвоичныеДанныеЗаполненногоФайла 
					= ВизуализацияЭПВызовСервера.ВставитьВизуализациюВместоТэгаВФайлDocx(
					МассивТегов, ШтампыПодписейЭП, ДвоичныеДанныеФайла, Расширение, ВысотаКартинки,
					НастройкиШтампаЭП);
					
				Если НадоПреобразоватьВPdf И ЭтоТонкийКлиент Тогда
					// на клиенте в pdf преобразуем
					ДвоичныеДанныеЗаполненногоФайла = ПреобразоватьWordВPdf(
						ДвоичныеДанныеЗаполненногоФайла, Расширение);
				КонецЕсли;			
					
				Возврат ДвоичныеДанныеЗаполненногоФайла;
					
			КонецЕсли;
		Иначе
			
			Если НастройкиШтампаЭП.Использовать1СШтамп Тогда
				
				Если WordApp <> Неопределено Тогда
					WordApp.Quit();
					WordApp = Неопределено;
				КонецЕсли;
				
				Возврат ВизуализацияЭПВызовСервера.ДвоичныеДанныеФайлаСШтампомИспользуя1СШтамп(
					Расширение, ДвоичныеДанныеФайла, ВсеДанныеОтметок, НастройкиШтампаЭП);
					
			КонецЕсли;	
			
			// нет тега - по положению вставка - тут docx могут быть и на клиенте
			Если ВставкаНаКлиенте Тогда
				
				Если ВсеДанныеОтметок.Количество() > 1 Тогда
					ВсеДанныеОтметок = РаботаСФайламиВызовСервера.СобратьВсеШтампыВОдин(ВсеДанныеОтметок);
				КонецЕсли;	
				
				ИмяФайла = ВставитьКартинкуВФайлDocСУказаниемПоложения(Расширение, ДвоичныеДанныеФайла, 
					ВсеДанныеОтметок, НастройкиШтампаЭП);
					
			  	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
				УдалитьФайлы(ИмяФайла);
					
				Если WordApp <> Неопределено Тогда
					WordApp.Quit();
					WordApp = Неопределено;
				КонецЕсли;
				
				Возврат ДвоичныеДанныеФайла;
				
			ИначеЕсли Расширение = "docx" Тогда	    
				
				ДвоичныеДанныеФайла 
					= ВизуализацияЭПВызовСервера.ВставитьИзображениеЭПВФайлDocxСУказаниемПоложения(
					Расширение, "", ДвоичныеДанныеФайла, ВсеДанныеОтметок, 
					НастройкиШтампаЭП, ВысотаКартинки);
					
				Если НадоПреобразоватьВPdf И ЭтоТонкийКлиент Тогда
					// на клиенте в pdf преобразуем
					ДвоичныеДанныеФайла = ПреобразоватьWordВPdf(
						ДвоичныеДанныеФайла, Расширение);
				КонецЕсли;			
					
				Возврат ДвоичныеДанныеФайла;	
				
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если WordApp <> Неопределено Тогда
		WordApp.Quit();
		WordApp = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Осуществляет поиск тэга для вставки изображения штрихкода в файле MSWord или Open Office Writer
//Параметры:
//	ДвоичныеДанныеФайла - ДвоичныеДанные - двоичные данные файла, в котором осуществляется поиск тэга
//			Расширение - Строка - расширение файла, по нему определяется, с помощью какого приложения осуществлять поиск
//			МассивТегов - строка - Массив строк с тэгами
//			WordApp - COMОбъект - COM Объект приложения MS Word. Необязательный параметр.
//Возвращаемое значение:
//	Булево:
//			Истина, если тэг найден
//			Ложь, если тэг не найден или указано неподдерживаемое расширение файла
Функция НайтиТэгДляВставкиКартинки(ДвоичныеДанныеФайла, Расширение, МассивТегов, WordApp = Неопределено) Экспорт 
	
	НайденТэгШтрихкода = Ложь;
	
	Если Расширение = "odt" Тогда
		ВременныйФайлИмя = ПолучитьИмяВременногоФайла("odt");
		ДвоичныеДанныеФайла.Записать(ВременныйФайлИмя);
		НайденТэгШтрихкода = АвтозаполнениеШаблоновФайловКлиентСервер.НайтиДанныеВФайлеOpenOfficeWriter(
			ВременныйФайлИмя, МассивТегов, "Строка");
		УдалитьФайлы(ВременныйФайлИмя);
	ИначеЕсли АвтозаполнениеШаблоновФайловКлиентСервер.ФорматMSWord(Расширение) Тогда
		ВременныйФайлИмя = ПолучитьИмяВременногоФайла(Расширение);
		ДвоичныеДанныеФайла.Записать(ВременныйФайлИмя);
		Если Расширение = "doc" Тогда
			НайденТэгШтрихкода = АвтозаполнениеШаблоновФайловКлиентСервер.ПроверитьНаличиеСтрокиВФайлеMSWord(
				ВременныйФайлИмя, МассивТегов, WordApp);
		ИначеЕсли Расширение = "docx" Тогда
			НайденТэгШтрихкода = АвтозаполнениеШаблоновФайловКлиентСервер.ПроверитьНаличиеСтрокиВФайлеDocX(
				МассивТегов, ВременныйФайлИмя);
		КонецЕсли;
		УдалитьФайлы(ВременныйФайлИмя);	
	КонецЕсли;

	Возврат НайденТэгШтрихкода;
	
Конецфункции

// Вернет имя тега для всех подписей
// 
// Возвращаемое значение:
// 	Строка - имя тега
Функция ТегВсеПодписи() Экспорт
	Возврат "ВставитьЭП";	
КонецФункции

// Вернет имя тега для подписей наших организаций
// 
// Возвращаемое значение:
// 	Строка - имя тега
Функция ТегНашиПодписи() Экспорт
	Возврат "ВставитьШтампНашаОрганизация";	
КонецФункции

// Вернет имя тега для подписей сторонних контрагентов
// 
// Возвращаемое значение:
// 	Строка - имя тега
Функция ТегПодписиКонтрагентов() Экспорт
	Возврат "ВставитьШтампКонтрагенты";	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция преобразует Windows имя файла в URL OpenOffice.
Функция ПреобразоватьВURL(ИмяФайла)
	
	Возврат "file:///" + СтрЗаменить(ИмяФайла, "\", "/");
	
КонецФункции

// Создание структуры для параметров OpenOffice.
Функция ПрисвоитьЗначениеСвойству(Объект, ИмяСвойства, ЗначениеСвойства)
	
	Свойства = Объект.Bridge_GetStruct("com.sun.star.beans.PropertyValue");
	Свойства.Name = ИмяСвойства;
	Свойства.Value = ЗначениеСвойства;
	
	Возврат Свойства;
	
КонецФункции

// Вернет ДвоичныеДанные
Функция ПреобразоватьOpenOfficeВPdf(ДвоичныеДанныеФайла, Расширение)
	
	СисИнфо = Новый СистемнаяИнформация;
	Если СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Попытка
			
			// Открыть OpenOffice
			ОбъектServiceManager = Новый COMОбъект("com.sun.star.ServiceManager");
			ИнстансDesktop = ОбъектServiceManager.createInstance("com.sun.star.frame.Desktop");
			
		Исключение
			ВызватьИсключение(НСтр("ru = 'Ошибка работы с приложением Open Office. Необходимо проверить правильность установки приложения.'"));
		КонецПопытки;
	Иначе
		ВызватьИсключение(НСтр("ru = 'Преобразование в pdf файла Open Office возможна только в Windows. Обратитесь к администратору.'"));	
	КонецЕсли;
	
	РасширениеДляЗаписи = "pdf";
	
	ИмяВременногоФайлаOffice = ПолучитьИмяВременногоФайла(Расширение);
	НовыйПутьКФайлу = ПолучитьИмяВременногоФайла(РасширениеДляЗаписи);
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайлаOffice);
	
	// Параметры открытия: отключение исполнения макросов.
	ПараметрыДокумента = Новый COMSafeArray("VT_VARIANT", 2);
	
	РежимЗапуска = ПрисвоитьЗначениеСвойству(ОбъектServiceManager,
		"MacroExecutionMode",
		0); // const short NEVER_EXECUTE = 0
	ПараметрыДокумента.SetValue(0, РежимЗапуска);

	Hidden = ПрисвоитьЗначениеСвойству(ОбъектServiceManager,
		"Hidden",
		Истина); // true
	ПараметрыДокумента.SetValue(1, Hidden);
	
	
	// Открыть документ OpenOffice.
	Document = ИнстансDesktop.loadComponentFromURL(ПреобразоватьВURL(ИмяВременногоФайлаOffice), 
		"_blank", 0, ПараметрыДокумента);
	
	//Document.setVisible(Истина);
	
	//ТекущееОкно = ИнстансDesktop.getCurrentFrame();
	
	ПараметрыСохранения = Новый COMSafeArray("VT_VARIANT", 2);
	FilterName = ПрисвоитьЗначениеСвойству(ОбъектServiceManager,
		"FilterName",
		"writer_pdf_Export");
	ПараметрыСохранения.SetValue(0, FilterName);
	
	SelectPdfVersion = ПрисвоитьЗначениеСвойству(ОбъектServiceManager,
		"SelectPdfVersion",
		1); // 1 - PDF/A-1 (ISO 19005-1:2005) 
	ПараметрыСохранения.SetValue(1, SelectPdfVersion);
	
	Document.storeToURL(ПреобразоватьВURL(НовыйПутьКФайлу), ПараметрыСохранения);
	
	Document.close(-1);        //Закрыть документ
	
 	Document     = Неопределено;
    ИнстансDesktop     = Неопределено;	
    ОбъектServiceManager = Неопределено;
    ИнстансDispatcher = Неопределено;
		
	УдалитьФайлы(ИмяВременногоФайлаOffice);
	
	Возврат Новый ДвоичныеДанные(НовыйПутьКФайлу);
	
КонецФункции	

// Вернет ДвоичныеДанные
Функция ПреобразоватьWordВPdf(ДвоичныеДанныеФайла, Расширение)
	
	СисИнфо = Новый СистемнаяИнформация;
	Если СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Попытка
			WordApp = Новый COMОбъект("Word.Application");
		Исключение
			ВызватьИсключение(НСтр("ru = 'Ошибка работы с приложением MS Word. Необходимо проверить правильность установки приложения.'"));
		КонецПопытки;
	Иначе
		ВызватьИсключение(НСтр("ru = 'Преобразование в pdf файла MS Word возможна только в Windows. Обратитесь к администратору.'"));	
	КонецЕсли;
	
	WordApp.WordBasic.DisableAutoMacros(1);
	РасширениеДляЗаписи = "pdf";
	
	ИмяВременногоФайлаOffice = ПолучитьИмяВременногоФайла(Расширение);
	НовыйПутьКФайлу = ПолучитьИмяВременногоФайла(РасширениеДляЗаписи);
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайлаOffice);
	
	Док = WordApp.Documents.Add(ИмяВременногоФайлаOffice);
	
	wdExportFormatPDF = 17;
	UseISO19005_1 = Истина;
	Док.ExportAsFixedFormat(НовыйПутьКФайлу, wdExportFormatPDF,,,,,,,,,,,,UseISO19005_1);
	
	Док.Close(0);  // 0 -закрыть без сохранения

	WordApp.Quit();
	WordApp = Неопределено;
	
	УдалитьФайлы(ИмяВременногоФайлаOffice);
	
	Возврат Новый ДвоичныеДанные(НовыйПутьКФайлу);
	
КонецФункции	

// Вставить штамп в файл MSWord вместо тэга
Функция ВставитьШтампВФайлMSWordВместоТэга(Расширение,
	МассивТегов,
	ШтампыПодписейЭП, 
	ДвоичныеДанныеФайла,
	НастройкиШтампаЭП,
	WordApp = Неопределено)
	
	ИтоговыйФорматФайлаСоШтампомЭП = НастройкиШтампаЭП.ИтоговыйФорматФайлаСоШтампомЭП;
	
	НадоПреобразоватьВPdf = 
		(НРег(Расширение) <> "pdf" 
		И ИтоговыйФорматФайлаСоШтампомЭП = ПредопределенноеЗначение("Перечисление.ИтоговыйФорматФайлаСоШтампомЭП.PDFA"));
	
	РасширениеДляЗаписи = Расширение;
	Если НадоПреобразоватьВPdf Тогда
		РасширениеДляЗаписи = "pdf";
	КонецЕсли;	
	
	ЗакрыватьПриложение = Ложь;
	Если WordApp = Неопределено Тогда 
		
		СисИнфо = Новый СистемнаяИнформация;
		Если СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
			Попытка
				WordApp = Новый COMОбъект("Word.Application");
			Исключение
				ВызватьИсключение(НСтр("ru = 'Ошибка работы с приложением MS Word. Необходимо проверить правильность установки приложения.'"));
			КонецПопытки;
		Иначе
			ВызватьИсключение(НСтр("ru = 'Вставка штампа в файл MS Word(doc) возможна только в Windows. Обратитесь к администратору.'"));	
		КонецЕсли;
		ЗакрыватьПриложение = Истина;
		
	КонецЕсли;
	
	WordApp.WordBasic.DisableAutoMacros(1);
	ИмяВременногоФайлаOffice = ПолучитьИмяВременногоФайла(Расширение);
	НовыйПутьКФайлу = ПолучитьИмяВременногоФайла(РасширениеДляЗаписи);
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайлаOffice);
	
	ШиринаКартинкиШаблон = 230;//300;
	ВысотаКартинкиШаблон = 62; // в 4 раза меньше ширины
	
	Док = WordApp.Documents.Add(ИмяВременногоФайлаOffice);   
	WordApp.ActiveWindow.ActivePane.View.Type = 3; // wdPrintView = 3
	
	Для Каждого КлючИЗначение Из ШтампыПодписейЭП Цикл
		
		Тэг  = КлючИЗначение.Ключ;
		ДанныеОтметок = ШтампыПодписейЭП[Тэг];

		//Выполним поиск тэга для вставки изображения вместо него
	    НайденТэг = WordApp.Selection.Find.Execute(Тэг);
		Если НайденТэг Тогда
			//если найден, то вместо тэга вставляется картинка
			
			НомерПодписи = 0;
			Для Каждого ДанныеОтметки Из ДанныеОтметок Цикл
				
				ДвоичныеДанныеКартинки = ДанныеОтметки.ДвоичныеДанныеОтметки;
				ТипЭП = ДанныеОтметки.ТипЭП;    
				ЭтоВизуализацияПЭП = (ТипЭП = "ПЭП");
				
				Если ЭтоВизуализацияПЭП Тогда
					ШиринаКартинки = Цел(ШиринаКартинкиШаблон * 3 / 4);
					ВысотаКартинки = Цел(ВысотаКартинкиШаблон * 3 / 4);
				Иначе	
					ШиринаКартинки = ШиринаКартинкиШаблон;
					ВысотаКартинки = ВысотаКартинкиШаблон;
				КонецЕсли;	
				
				ТекКартинка = Новый Картинка(ДвоичныеДанныеКартинки);
				ТекВысота = ТекКартинка.Высота();
				
				ТекВысотаКартинки = Цел(ТекВысота * 62 / 310);  // перевод из старого значения ВысотаКартинки 62 (для высоты картинки в пикселах 310)
				
				ИмяВременногоФайлаКартинки = ПолучитьИмяВременногоФайла("png");
				ДвоичныеДанныеКартинки.Записать(ИмяВременногоФайлаКартинки);
				
				oGraphicObject = WordApp.Selection.InlineShapes.AddPicture(ИмяВременногоФайлаКартинки);
				oGraphicObject.AlternativeText = Тэг;
				
				oGraphicObject.Width = ШиринаКартинки;
				oGraphicObject.Height = ТекВысотаКартинки;
				
				НомерПодписи = НомерПодписи + 1;
				
			КонецЦикла;
			
		Иначе
			//тэг не найден, проверим изображения
			Для Каждого InlineShape Из WordApp.ActiveDocument.InlineShapes Цикл
				Если InlineShape.AlternativeText = Тэг Тогда
					InlineShape.Select();
					
					НомерПодписи = 0;
					Для Каждого ДанныеОтметки Из ДанныеОтметок Цикл
				
						ДвоичныеДанныеКартинки = ДанныеОтметки.ДвоичныеДанныеОтметки;
						
						ИмяВременногоФайлаКартинки = ПолучитьИмяВременногоФайла("png");
						ДвоичныеДанныеКартинки.Записать(ИмяВременногоФайлаКартинки);
					
						oGraphicObject = WordApp.Selection.InlineShapes.AddPicture(ИмяВременногоФайлаКартинки);
						oGraphicObject.AlternativeText = Тэг;
						
						НомерПодписи = НомерПодписи + 1;
						
					КонецЦикла;
					
					Прервать;
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		
	КонецЦикла;	
	
	Если НадоПреобразоватьВPdf Тогда
		
		wdExportFormatPDF = 17;
		UseISO19005_1 = Истина;
		Док.ExportAsFixedFormat(НовыйПутьКФайлу, wdExportFormatPDF,,,,,,,,,,,,UseISO19005_1);
		
		Док.Close(0);  // 0 -закрыть без сохранения
		
	Иначе
		
		// 12 - word 2007. 15 - word 2013

		ВерсияСтрока = WordApp.Build;
		МассивСтр = СтрРазделить(ВерсияСтрока, ".", Ложь);
		ВерсияЧисло = ОбщегоНазначенияДокументооборотКлиентСервер.СтрокаВЧисло(МассивСтр[0]);
		
		Если ВерсияЧисло >= 12 Тогда
		
			Если Расширение = "docx" Тогда
				Док.SaveAs(НовыйПутьКФайлу, 12);                        
			Иначе
				Док.SaveAs(НовыйПутьКФайлу, 0);
			КонецЕсли;
		Иначе
		    Если Расширение = "docx" Тогда
				Док.SaveAs(НовыйПутьКФайлу, 109);                        
			Иначе
				Док.SaveAs(НовыйПутьКФайлу);
			КонецЕсли;
		КонецЕсли;
		
		Док.Saved = Истина;
		Док.Close();
	
	КонецЕсли;
	
	Если ЗакрыватьПриложение Тогда
		WordApp.Close();
		WordApp.Quit();
	КонецЕсли;
	УдалитьФайлы(ИмяВременногоФайлаКартинки);
	УдалитьФайлы(ИмяВременногоФайлаOffice);
	
	Возврат НовыйПутьКФайлу;
	
КонецФункции

// Вставит картинку штампа в Word файл с указанием положения, скажем Право-Верх. (т.е. не вместо тега)
// 
// Параметры:
// 	Расширение - Строка
// 	ДвоичныеДанныеФайла - ДвоичныеДанные - ДД исходного файла 
// 	ДанныеОтметок - Массив из см. РаботаСЭП.НовыйДанныеОтметки.
// 	НастройкиШтампаЭП - см. РаботаСФайламиВызовСервера.ПолучитьНастройкиШтампаЭП.
// 	
// Возвращаемое значение:
// 	Строка - путь к временному файлу куда вставлен штамп
Функция ВставитьКартинкуВФайлDocСУказаниемПоложения(
	Знач Расширение, 
	Знач ДвоичныеДанныеФайла, 
	Знач ДанныеОтметок, 
	НастройкиШтампаЭП)
	
	ПоложениеНаСтранице = НастройкиШтампаЭП.РасположениеШтампаЭП;
	СтраницаВставкиШтампаЭП = НастройкиШтампаЭП.СтраницаВставкиШтампаЭП;
	ИтоговыйФорматФайлаСоШтампомЭП = НастройкиШтампаЭП.ИтоговыйФорматФайлаСоШтампомЭП;
	
	НадоПреобразоватьВPdf = 
		(НРег(Расширение) <> "pdf" 
		И ИтоговыйФорматФайлаСоШтампомЭП = ПредопределенноеЗначение("Перечисление.ИтоговыйФорматФайлаСоШтампомЭП.PDFA"));
			
	СисИнфо = Новый СистемнаяИнформация;
	Если СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Попытка
			WordApp = Новый COMОбъект("Word.Application");
		Исключение
			ВызватьИсключение(НСтр("ru = 'Ошибка работы с приложением MS Word. Необходимо проверить правильность установки приложения.'"));
		КонецПопытки;
	Иначе
		ВызватьИсключение(НСтр("ru = 'Вставка штампа в файл MS Word(doc) возможна только в Windows. Обратитесь к администратору.'"));	
	КонецЕсли;
	
	WordApp.WordBasic.DisableAutoMacros(1);
	
	ВерсияСтрока = WordApp.Build;
	МассивСтр = СтрРазделить(ВерсияСтрока, ".", Ложь);
	ВерсияЧисло = ОбщегоНазначенияДокументооборотКлиентСервер.СтрокаВЧисло(МассивСтр[0]);
	
	РасширениеДляЗаписи = Расширение;
	Если НадоПреобразоватьВPdf Тогда
		РасширениеДляЗаписи = "pdf";
	КонецЕсли;	
	
	ИмяВременногоФайлаOffice = ПолучитьИмяВременногоФайла(Расширение);
	НовыйПутьКФайлу = ПолучитьИмяВременногоФайла(РасширениеДляЗаписи);
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайлаOffice);
	
	Док = WordApp.Documents.Add(ИмяВременногоФайлаOffice); 
	WordApp.ActiveWindow.ActivePane.View.Type = 3; // wdPrintView = 3
	
	Если СтраницаВставкиШтампаЭП = ПредопределенноеЗначение("Перечисление.СтраницаВставкиКартинки.Последняя") Тогда
		
	   //переходим на последнюю страницу	
		wdStatisticPages = 2;
		ЧислоСтраниц = Док.ComputeStatistics(wdStatisticPages);
		
		// wdGoToPage 1  wdGoToAbsolute 1
		Range1 = Док.GoTo(1, 1, ЧислоСтраниц);
		Range1.Select();
		
	КонецЕсли;

	Если ПоложениеНаСтранице = ПредопределенноеЗначение("Перечисление.МестаВставкиКартинки.ПравыйНижний") Тогда
		СмещениеПоГоризонтали = "MAX";
		СмещениеПоВертикали = "MAX";
	ИначеЕсли ПоложениеНаСтранице = ПредопределенноеЗначение("Перечисление.МестаВставкиКартинки.ПравыйВерхний") Тогда
		СмещениеПоГоризонтали = "MAX";
		СмещениеПоВертикали = "MIN";
	ИначеЕсли ПоложениеНаСтранице = ПредопределенноеЗначение("Перечисление.МестаВставкиКартинки.ЛевыйВерхний") Тогда
		СмещениеПоГоризонтали = "MIN";
		СмещениеПоВертикали = "MIN";
	ИначеЕсли ПоложениеНаСтранице = ПредопределенноеЗначение("Перечисление.МестаВставкиКартинки.ЛевыйНижний") Тогда
		СмещениеПоГоризонтали = "MIN";
		СмещениеПоВертикали = "MAX";
	КонецЕсли;

	ШиринаКартинкиШаблон = 240;// ширина картинки в пикселях.
	ВысотаКартинки = 65; // высота картинки в пикселях.        
	
	Если СтраницаВставкиШтампаЭП = ПредопределенноеЗначение("Перечисление.СтраницаВставкиКартинки.Каждая") Тогда
		
		ШиринаКартинкиШаблон = 120;// ширина картинки в пикселях.
		ВысотаКартинки = 33; // высота картинки в пикселях.        
		
	КонецЕсли;	
	
	//СмещениеПоYНаОднуПодпись = 10;
	СмещениеПоYНакопленное = 0;

	НомерПодписи = 0;
	Для Каждого ДанныеОтметки Из ДанныеОтметок Цикл
		
		ДвоичныеДанныеКартинки = ДанныеОтметки.ДвоичныеДанныеОтметки;
		
		ТипЭП = ДанныеОтметки.ТипЭП;    
		ЭтоВизуализацияПЭП = (ТипЭП = "ПЭП");
		
		Если ЭтоВизуализацияПЭП Тогда
			ШиринаКартинки = Цел(ШиринаКартинкиШаблон * 3 / 4);
		Иначе	
			ШиринаКартинки = ШиринаКартинкиШаблон;
		КонецЕсли;	
		
		ТекКартинка = Новый Картинка(ДвоичныеДанныеКартинки);
		ТекВысота = ТекКартинка.Высота();
		
		ТекВысотаКартинки = Цел(ТекВысота * ВысотаКартинки / 310);  // перевод из старого значения ВысотаКартинки 65 (для высоты картинки в пикселах 310)
		//СмещениеПоYНаОднуПодпись = ТекВысота * 7.5 / 310;// перевод из старого значения 8 (для высоты картинки в пикселах 310)
		СмещениеПоYНаОднуПодпись = ТекВысотаКартинки + 2;// перевод из старого значения 8 (для высоты картинки в пикселах 310)
		
		ИмяВременногоФайлаКартинки = ПолучитьИмяВременногоФайла("png");
		ДвоичныеДанныеКартинки.Записать(ИмяВременногоФайлаКартинки);
		
		Если СтраницаВставкиШтампаЭП = ПредопределенноеЗначение("Перечисление.СтраницаВставкиКартинки.Каждая") Тогда

		    wdHeaderFooterEvenPages = 3; // — Все к-тулы, даже на пронумерованных статьях.
		    wdHeaderFooterFirstPage = 2; // — Первый к-тул в документе или разделе.
		    wdHeaderFooterPrimary   = 1; // — Возвращает к-тулы на всех, кроме первой страницы документа или раздела.
			
			НомерСекции = 1;     
			ВсегоСекций = Док.Sections.Count;
			
			Для Каждого Секция Из Док.Sections Цикл
				
				Если НомерСекции = 1 Тогда
					ВставитьВКолонтитул(Секция, wdHeaderFooterFirstPage,
						ИмяВременногоФайлаКартинки, СмещениеПоВертикали,
						ВерсияЧисло,
						ШиринаКартинки,
						ТекВысотаКартинки,
						WordApp,
						СмещениеПоГоризонтали);
				КонецЕсли;	

				Если НомерСекции = 2 Или (ВсегоСекций = 1)  Тогда
					ВставитьВКолонтитул(Секция, wdHeaderFooterPrimary,
						ИмяВременногоФайлаКартинки, СмещениеПоВертикали,
						ВерсияЧисло,
						ШиринаКартинки,
						ТекВысотаКартинки,
						WordApp,
						СмещениеПоГоризонтали); 
				КонецЕсли;	
					
				НомерСекции = НомерСекции + 1;
					
			КонецЦикла;	
			
		Иначе	
		
			oGraphicObject = Док.Shapes.AddTextBox(1, 10, 10, ШиринаКартинки, ТекВысотаКартинки);
			
			//устанавливаем привязку положения к печатной области
			oGraphicObject.RelativeHorizontalPosition = 0; // 0 -wdRelativeVerticalPositionMargin
			oGraphicObject.RelativeVerticalPosition = 0;  
			
			Если СмещениеПоГоризонтали = "MAX" Тогда
				
				//выравнивание к правому краю
				oGraphicObject.Left = -999996; // wdShapeRight
	
			ИначеЕсли СмещениеПоГоризонтали = "MIN" Тогда
				//выравнивание к левому краю
				oGraphicObject.left = -999998; // wdShapeLeft
			КонецЕсли;
			
			Если СмещениеПоВертикали = "MAX" Тогда
				
	//			//выравнивание по нижнему краю
	
				oGraphicObject.RelativeVerticalPosition = 1; //  1 wdRelativeVerticalPositionPage
				oGraphicObject.TopRelative = 83 - Цел(СмещениеПоYНакопленное); 
				
			ИначеЕсли СмещениеПоВертикали = "MIN" Тогда
				
	//			//выравнивание по верхнему краю
	
				oGraphicObject.RelativeVerticalPosition = 1; //  1 wdRelativeVerticalPositionPage
				oGraphicObject.TopRelative = 0 + Цел(СмещениеПоYНакопленное); 
				
			КонецЕсли;  
			
			СмещениеПоYНакопленное = СмещениеПоYНакопленное + СмещениеПоYНаОднуПодпись;
			
			oGraphicObject.Select();
			   
			
			WordApp.Selection.ShapeRange.Line.Visible = Ложь;
			
			Если ВерсияЧисло < 12 Тогда  // ниже word 2007 - т.е. 2003 и ниже
			
				WordApp.Selection.InlineShapes.AddPicture(ИмяВременногоФайлаКартинки);
			
			Иначе	
			
			    range = WordApp.Selection.Range;
	            КартинкаWord = WordApp.Selection.InlineShapes.AddPicture(
					ИмяВременногоФайлаКартинки, False, True, range);
					
			КонецЕсли;	
			
			WordApp.Selection.ShapeRange.TextFrame.AutoSize = Истина;
			WordApp.Selection.ShapeRange.Fill.Visible = Ложь;
			WordApp.Selection.Font.Bold = Истина;
			
		КонецЕсли;
		
		НомерПодписи = НомерПодписи + 1;
		
	КонецЦикла;
	
	Если НадоПреобразоватьВPdf Тогда
		
		wdExportFormatPDF = 17;
		UseISO19005_1 = Истина;
		Док.ExportAsFixedFormat(НовыйПутьКФайлу, wdExportFormatPDF,,,,,,,,,,,,UseISO19005_1);
		
		Док.Close(0);  // 0 -закрыть без сохранения
		
	Иначе	
		
		// 12 - word 2007. 15 - word 2013

		
		Если ВерсияЧисло >= 12 Тогда
		
			Если Расширение = "docx" Тогда
				Док.SaveAs(НовыйПутьКФайлу, 12);                        
			Иначе
				Док.SaveAs(НовыйПутьКФайлу, 0);
			КонецЕсли;
		Иначе
		    Если Расширение = "docx" Тогда
				Док.SaveAs(НовыйПутьКФайлу, 109);                        
			Иначе
				Док.SaveAs(НовыйПутьКФайлу);
			КонецЕсли;
		КонецЕсли;
		
		Док.Saved = Истина;	
		Док.Close(); 
		
	КонецЕсли;
	
	WordApp.Quit();
	WordApp = Неопределено;
	
	УдалитьФайлы(ИмяВременногоФайлаOffice);
	
	Возврат НовыйПутьКФайлу;
	
КонецФункции

Процедура ВставитьВКолонтитул(Секция, wdHeader,
	ИмяВременногоФайлаКартинки, СмещениеПоВертикали,
	ВерсияЧисло,
	ШиринаКартинки,
	ТекВысотаКартинки,
	WordApp,
	СмещениеПоГоризонтали)      

	Колонтитул = Неопределено;
	Если СмещениеПоВертикали = "MAX" Тогда
		Колонтитул = Секция.Footers(wdHeader); // wdHeaderFooterPrimary
	Иначе
		Колонтитул = Секция.Headers(wdHeader); // wdHeaderFooterPrimary
	КонецЕсли;	
	
	
	Если ВерсияЧисло < 12 Тогда  // ниже word 2007 - т.е. 2003 и ниже
	
		КартинкаWord = Колонтитул.Range.InlineShapes.AddPicture(
			ИмяВременногоФайлаКартинки);
		
		КартинкаWord.Width  =  ШиринаКартинки;
		КартинкаWord.Height = ТекВысотаКартинки;	
	
	Иначе

		range = Колонтитул.Range;
		КартинкаWord = WordApp.Selection.InlineShapes.AddPicture(
			ИмяВременногоФайлаКартинки, False, True, range);
			
		ИтогШиринаПрежняя = КартинкаWord.Width * КартинкаWord.ScaleWidth / 100;	
		ИтогВысотаПрежняя = КартинкаWord.Height * КартинкаWord.ScaleHeight / 100;	
		
		Если ИтогШиринаПрежняя <> 0 Тогда
			КартинкаWord.ScaleWidth  = Цел(КартинкаWord.ScaleWidth  * ШиринаКартинки / ИтогШиринаПрежняя);
		Иначе
			
			Если КартинкаWord.Width <> 0 Тогда
				КартинкаWord.ScaleWidth  = Цел( (ШиринаКартинки / КартинкаWord.Width) * 100);
			КонецЕсли;
				
		КонецЕсли;	
		
		Если ИтогВысотаПрежняя <> 0 Тогда
			КартинкаWord.ScaleHeight = Цел(КартинкаWord.ScaleHeight * ТекВысотаКартинки / ИтогВысотаПрежняя);	
		Иначе
			
			Если КартинкаWord.Height <> 0 Тогда
				КартинкаWord.ScaleHeight  = Цел( (ТекВысотаКартинки / КартинкаWord.Height) * 100);
			КонецЕсли;	
			
		КонецЕсли;	
			
	КонецЕсли;	

	Если СмещениеПоГоризонтали = "MAX" Тогда
		Колонтитул.Range.Paragraphs(1).Alignment = 2; // wdAlignParagraphRight
	КонецЕсли;		
		
КонецПроцедуры	

// Вставит картинку штампа в Xls файл с указанием положения, скажем Право-Верх. (т.е. не вместо тега)
// 
// Параметры:
// 	Расширение - Строка
// 	ДвоичныеДанныеФайла - ДвоичныеДанные - ДД исходного файла 
// 	ДанныеОтметок - Массив из см. РаботаСЭП.НовыйДанныеОтметки.
// 	НастройкиШтампаЭП - см. РаботаСФайламиВызовСервера.ПолучитьНастройкиШтампаЭП.
// 	
// Возвращаемое значение:
// 	Строка - путь к временному файлу куда вставлен штамп
Функция ВставитьКартинкуВФайлXlsСУказаниемПоложения(
	Знач Расширение, 
	Знач ДвоичныеДанныеФайла, 
	Знач ДанныеОтметок, 
	НастройкиШтампаЭП)
	
	ПоложениеНаСтранице = НастройкиШтампаЭП.РасположениеШтампаЭП;
	СтраницаВставкиШтампаЭП = НастройкиШтампаЭП.СтраницаВставкиШтампаЭП;
	ИтоговыйФорматФайлаСоШтампомЭП = НастройкиШтампаЭП.ИтоговыйФорматФайлаСоШтампомЭП;
	
	НадоПреобразоватьВPdf = 
		(НРег(Расширение) <> "pdf" 
		И ИтоговыйФорматФайлаСоШтампомЭП = ПредопределенноеЗначение("Перечисление.ИтоговыйФорматФайлаСоШтампомЭП.PDFA"));
			
	СисИнфо = Новый СистемнаяИнформация;
	Если СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Попытка
			Excel = Новый COMОбъект("Excel.Application");
		Исключение
			ВызватьИсключение(НСтр("ru = 'Ошибка работы с приложением MS Excel. Необходимо проверить правильность установки приложения.'"));
		КонецПопытки;
	Иначе
		ВызватьИсключение(НСтр("ru = 'Вставка штампа в файл MS Excel(xls) возможна только в Windows. Обратитесь к администратору.'"));	
	КонецЕсли;
	
	Excel.AutomationSecurity = 3; // msoAutomationSecurityForceDisable = 3
	//Excel.Visible = Истина;
	
	ВерсияСтрока = Excel.Build;
	МассивСтр = СтрРазделить(ВерсияСтрока, ".", Ложь);
	ВерсияЧисло = ОбщегоНазначенияДокументооборотКлиентСервер.СтрокаВЧисло(МассивСтр[0]);
	
	РасширениеДляЗаписи = Расширение;
	Если НадоПреобразоватьВPdf Тогда
		РасширениеДляЗаписи = "pdf";
	КонецЕсли;	
	
	ИмяВременногоФайлаOffice = ПолучитьИмяВременногоФайла(Расширение);
	НовыйПутьКФайлу = ПолучитьИмяВременногоФайла(РасширениеДляЗаписи);
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайлаOffice);
	
	Книга = Excel.WorkBooks.Open(ИмяВременногоФайлаOffice);   
	
	ШиринаКартинки = 300;
	ВысотаКартинки = 85;
	КоординатаY = 0;

	КоординатаX = 0;
	
	Если ПоложениеНаСтранице = ПредопределенноеЗначение("Перечисление.МестаВставкиКартинки.ПравыйНижний") Тогда
		КоординатаX = 600 - ШиринаКартинки - 150;
	ИначеЕсли ПоложениеНаСтранице = ПредопределенноеЗначение("Перечисление.МестаВставкиКартинки.ПравыйВерхний") Тогда
		КоординатаX = 600 - ШиринаКартинки - 150;
	ИначеЕсли ПоложениеНаСтранице = ПредопределенноеЗначение("Перечисление.МестаВставкиКартинки.ЛевыйВерхний") Тогда
		КоординатаX = 0; //отступ
	ИначеЕсли ПоложениеНаСтранице = ПредопределенноеЗначение("Перечисление.МестаВставкиКартинки.ЛевыйНижний") Тогда
		КоординатаX = 0; //отступ
	КонецЕсли;      
	
	ИспользованныеСтроки = Книга.Worksheets(1).UsedRange;
	ЧислоСтрок = ИспользованныеСтроки.Rows.Count;
	
	ПоследняяСтрока = ИспользованныеСтроки.Cells(ЧислоСтрок, 1);
	
	ПоследняяСтрокаTop = ПоследняяСтрока.Top;
	ПоследняяСтрокаHeight = ПоследняяСтрока.Height; 
	
	КоординатаY = Цел(ПоследняяСтрокаTop + ПоследняяСтрокаHeight); // вставляем ниже конца занятых строк
	
	НомерПодписи = 0;
	Для Каждого ДанныеОтметки Из ДанныеОтметок Цикл
		
		ДвоичныеДанныеКартинки = ДанныеОтметки.ДвоичныеДанныеОтметки;
		
		ИмяВременногоФайлаКартинки = ПолучитьИмяВременногоФайла("png");
		ДвоичныеДанныеКартинки.Записать(ИмяВременногоФайлаКартинки);
		
		Попытка
			
			Книга.Worksheets(1).Shapes.AddPicture(
				ИмяВременногоФайлаКартинки, Ложь, Истина, КоординатаX, КоординатаY, ШиринаКартинки, ВысотаКартинки);

		Исключение        
				
			ПодробноОписание = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())	
				+ Символы.ПС + Символы.ПС + НСтр("ru = ' Возможно лист защищен.'");
				
			ВызватьИсключение ПодробноОписание;
			
		КонецПопытки;
		
		НомерПодписи = НомерПодписи + 1;
		КоординатаY = КоординатаY + ВысотаКартинки;
		
	КонецЦикла;
	
	Если НадоПреобразоватьВPdf Тогда
		
		xlTypePDF = 0;
		Книга.ExportAsFixedFormat(xlTypePDF, НовыйПутьКФайлу,,,,,,,);
		
		Книга.Close(0);  // 0 -закрыть без сохранения
		
	Иначе	                                    
		
		Книга.CheckCompatibility = Ложь;
		Excel.DisplayAlerts = Ложь;
		
		ТипФормата = 56;
		Если Расширение = "xls" Тогда 
			//56 	Книга Excel 97–2003 	*.xls
			ТипФормата = 56;
		ИначеЕсли Расширение = "xlsx" Тогда 	
			ТипФормата = 51; // xlOpenXMLWorkbook
		КонецЕсли;	
		
		ReadOnlyRecommended  = Ложь;
		ConflictResolution = 2;// xlLocalSessionChanges 2		
		
		Книга.SaveAs(НовыйПутьКФайлу, ТипФормата,,,ReadOnlyRecommended,,,ConflictResolution,,,,);                        

		Книга.Saved = Истина;	
		Книга.Close(); 
		
	КонецЕсли;
	
	Excel.Quit();
	Excel = Неопределено;
	
	УдалитьФайлы(ИмяВременногоФайлаOffice);
	
	Возврат НовыйПутьКФайлу;
	
КонецФункции

#КонецОбласти

#КонецЕсли
