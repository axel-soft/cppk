////////////////////////////////////////////////////////////////////////////////
// Работа с задачами (сервер).
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выполняет попытку определения фактического исполнения.
// 
// Параметры:
//  ДействияЗадач - Массив из ДокументСсылка.ДействиеЗадачи.
//  ВыполнитьОтИмени - СправочникСсылка.Пользователи.
//  ВыбранныйФактическийИсполнитель - Структура.
//  РеквизитыДействийЗадач - Соответствие.
// 
// Возвращаемое значение:
//  Структура - Определить фактических исполнителей:
// * ДействияБезФактИсполнителя - Массив из ДокументСсылка.ДействиеЗадачи.
// * ДействияБезКомуАдресовано - Массив из ДокументСсылка.ДействиеЗадачи
// * ФактическиеИсполнителиПолные - Соответствие.
// * ФактическиеИсполнителиПоДействиям - Соответствие.
// * ОснованияФактИсполнителейПоДействиям - Соответствие.
//
Функция ОпределитьФактическихИсполнителей(ДействияЗадач, ВыполнитьОтИмени, ВыбранныйФактическийИсполнитель, РеквизитыДействийЗадач = Неопределено) Экспорт
	
	ИсполнителиРолей = Новый Соответствие;
	
	Если РеквизитыДействийЗадач = Неопределено Тогда
		РеквизитыДействийЗадач = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			ДействияЗадач, "Исполнитель");
	КонецЕсли;
	
	ТаблицаВсехЗамещений = Неопределено;
	
	ДействияБезФактИсполнителя = Новый Массив;
	ДействияБезКомуАдресовано = Новый Массив;
	ФактическиеИсполнителиПолные = Новый Соответствие;
	ФактическиеИсполнителиПоДействиям = Новый Соответствие;
	ОснованияФактИсполнителейПоДействиям = Новый Соответствие;
	
	ВсеСотрудникиТекущегоПользователя =
		СотрудникиПовтИсп.ВсеСотрудникиТекущегоПользователя();
	Если ВыполнитьОтИмени = Неопределено
		Или ВсеСотрудникиТекущегоПользователя.Найти(ВыполнитьОтИмени) <> Неопределено Тогда
		
		ОсновнойСотрудник = Сотрудники.ОсновнойСотрудник();
		ВсеСотрудники = СотрудникиПовтИсп.ВсеСотрудникиТекущегоПользователя();
		ВыполнениеОтИмени = Неопределено;
		
	Иначе
		
		ОсновнойСотрудник = Сотрудники.ОсновнойСотрудникПользователя(ВыполнитьОтИмени);
		ВсеСотрудники = Сотрудники.СотрудникиПользователя(ВыполнитьОтИмени);
		ВыполнениеОтИмени = ИсполнителиЗадач(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыполнитьОтИмени),
			Ложь,
			Ложь);
		
	КонецЕсли;
	
	Для Каждого ДействиеЗадачи Из ДействияЗадач Цикл
		
		Если ФактическиеИсполнителиПолные[ДействиеЗадачи] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитыДействия = РеквизитыДействийЗадач[ДействиеЗадачи];
		
		// Проверим, выполняет ли сам сотрудник.
		Если ТипЗнч(РеквизитыДействия.Исполнитель) = Тип("СправочникСсылка.Сотрудники") Тогда
			
			Если ВыполнениеОтИмени <> Неопределено Тогда
				
				ВыполняетСотрудник =
					ВыполнениеОтИмени.Найти(РеквизитыДействия.Исполнитель) <> Неопределено;
				
			Иначе
				
				ВыполняетСотрудник = 
					Сотрудники.ЭтоСотрудникТекущегоПользователя(РеквизитыДействия.Исполнитель);
				
			КонецЕсли;
			
			Если ВыполняетСотрудник Тогда
				
				ФактическиеИсполнителиПолные[ДействиеЗадачи] = 
					Справочники.ФактическиеИсполнители.НайтиСоздатьФактическогоИсполнителя(
						РеквизитыДействия.Исполнитель);
				ФактическиеИсполнителиПоДействиям[ДействиеЗадачи] = РеквизитыДействия.Исполнитель;
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Проверим, выполняет ли исполнитель роли.
		Если ТипЗнч(РеквизитыДействия.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			
			Если ВыполнениеОтИмени <> Неопределено Тогда
				
				ВыполняетИсполнительРоли =
					ВыполнениеОтИмени.Найти(РеквизитыДействия.Исполнитель) <> Неопределено;
				
			Иначе
				
				ВыполняетИсполнительРоли =
					ЭтоРольТекущегоПользователя(РеквизитыДействия.Исполнитель);
				
			КонецЕсли;
			
			Если ВыполняетИсполнительРоли Тогда
				
				Если ИсполнителиРолей[РеквизитыДействия.Исполнитель] = Неопределено Тогда
					ИсполнителиРолей[РеквизитыДействия.Исполнитель] =
						РегистрыСведений.ИсполнителиРолей.ИсполнителиРоли(РеквизитыДействия.Исполнитель);
				КонецЕсли;
				ИсполнителиРоли = ИсполнителиРолей[РеквизитыДействия.Исполнитель];			
				ПодходящиеСотрудники =
					ОбщегоНазначенияДокументооборотКлиентСервер.ПересечениеМассивов(ВсеСотрудники, ИсполнителиРоли);
				Если ПодходящиеСотрудники.Количество() > 0 Тогда
					СотрудникИсполняющийРоль = ПодходящиеСотрудники[0];
				Иначе
					СотрудникИсполняющийРоль = ОсновнойСотрудник;
				КонецЕсли;
				
				ФактическиеИсполнителиПолные[ДействиеЗадачи] = 
					Справочники.ФактическиеИсполнители.НайтиСоздатьФактическогоИсполнителя(
						РеквизитыДействия.Исполнитель,
						СотрудникИсполняющийРоль,
						СотрудникИсполняющийРоль,
						СотрудникИсполняющийРоль);
				ФактическиеИсполнителиПоДействиям[ДействиеЗадачи] = СотрудникИсполняющийРоль;
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Проверим, выполняет ли заместитель или помощник.
		Если ТаблицаВсехЗамещений = Неопределено Тогда
			ТаблицаВсехЗамещений =
				Справочники.ЗамещающиеИПомощники.ВсеЗамещенияПоДействиямЗадач(
					ДействияЗадач,
					ВсеСотрудники);
		КонецЕсли;
		
		ДействияБезФактИсполнителя.Добавить(ДействиеЗадачи);
		
		ЗамещенияДействия = ТаблицаВсехЗамещений.НайтиСтроки(
			Новый Структура("ДействиеЗадачи", ДействиеЗадачи));
		Если ЗамещенияДействия.Количество() > 1 Или ЗамещенияДействия.Количество() = 0 Тогда
			ДействияБезКомуАдресовано.Добавить(ДействиеЗадачи);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДействияБезФактИсполнителя.Количество() > 0 
		И ВыбранныйФактическийИсполнитель <> Неопределено Тогда
		
		Для Каждого ДействиеЗадачи Из ДействияБезФактИсполнителя Цикл
			
			РеквизитыДействия = РеквизитыДействийЗадач[ДействиеЗадачи];
			Адресат = ВыбранныйФактическийИсполнитель.Адресат;
			
			Если ВыбранныйФактическийИсполнитель.ЭтоЗамещающий Тогда
				ФактИсполнитель = ОсновнойСотрудник;
			Иначе
				ФактИсполнитель = ВыбранныйФактическийИсполнитель.Сотрудник;
			КонецЕсли;

			ФактИсполнительПолный = Справочники.ФактическиеИсполнители.НайтиСоздатьФактическогоИсполнителя(
				РеквизитыДействия.Исполнитель,
				Адресат,
				ФактИсполнитель,
				ОсновнойСотрудник);
			
			ФактическиеИсполнителиПолные[ДействиеЗадачи] = ФактИсполнительПолный;
			ФактическиеИсполнителиПоДействиям[ДействиеЗадачи] = ФактИсполнитель;
			ДействияБезФактИсполнителя.Удалить(ДействияБезФактИсполнителя.Найти(ДействиеЗадачи));
			ДействияБезКомуАдресовано.Удалить(ДействияБезКомуАдресовано.Найти(ДействиеЗадачи));
			
		КонецЦикла;
			
	КонецЕсли;
	
	Если ДействияБезФактИсполнителя.Количество() > 0 Тогда
		
		ТаблицаЗамещений = Справочники.ЗамещающиеИПомощники.АктуальныеЗамещенияПоДействиямЗадач(
			ДействияЗадач,
			ВсеСотрудники);
		
		Для Каждого СтрЗамещения Из ТаблицаЗамещений Цикл
			
			ДействиеЗадачи = СтрЗамещения.ДействиеЗадачи;
			
			// Требует уточнение "Кому" адресована задача, поэтому уточние фактического исполнителя выполним позже.
			Если ДействияБезКомуАдресовано.Найти(ДействиеЗадачи) <> Неопределено 
				И ВыбранныйФактическийИсполнитель = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЭтоПомощник = СтрЗамещения.ВидЗамещения = Перечисления.ВидыЗамещения.Помощники;
			// Замещающий всегда является фактическим исполнителем, а ОбрабатывающийРезолюцию никогда.
			РеквизитыДействия = РеквизитыДействийЗадач[ДействиеЗадачи];
			ФактИсполнитель = Неопределено;
			Если ЭтоПомощник Тогда
				ФактИсполнитель = Справочники.ФактическиеИсполнители.НайтиСоздатьФактическогоИсполнителя(
					РеквизитыДействия.Исполнитель,
					СтрЗамещения.Сотрудник, 
					СтрЗамещения.Сотрудник,
					СтрЗамещения.Замещающий);
			ИначеЕсли СтрЗамещения.ВидЗамещения = Перечисления.ВидыЗамещения.Замещающие Тогда
				ФактИсполнитель = Справочники.ФактическиеИсполнители.НайтиСоздатьФактическогоИсполнителя(
					РеквизитыДействия.Исполнитель,
					СтрЗамещения.Сотрудник,
					СтрЗамещения.Замещающий,
					СтрЗамещения.Замещающий);
			КонецЕсли;
			ФактическиеИсполнителиПолные[ДействиеЗадачи] = ФактИсполнитель;
			
			ФактИсполнитель = ?(ЭтоПомощник, СтрЗамещения.Сотрудник, СтрЗамещения.Замещающий);
			ФактическиеИсполнителиПоДействиям[ДействиеЗадачи] = ФактИсполнитель;
			ОснованияФактИсполнителейПоДействиям[ДействиеЗадачи] = СтрЗамещения.Замещение;
			ДействияБезФактИсполнителя.Удалить(ДействияБезФактИсполнителя.Найти(ДействиеЗадачи));
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеФактическихИсполнителей = Новый Структура;
	ДанныеФактическихИсполнителей.Вставить(
		"ДействияБезФактИсполнителя",
		ДействияБезФактИсполнителя);
	ДанныеФактическихИсполнителей.Вставить(
		"ДействияБезКомуАдресовано",
		ДействияБезКомуАдресовано);
	ДанныеФактическихИсполнителей.Вставить(
		"ФактическиеИсполнителиПолные",
		ФактическиеИсполнителиПолные);
	ДанныеФактическихИсполнителей.Вставить(
		"ФактическиеИсполнителиПоДействиям",
		ФактическиеИсполнителиПоДействиям);
	ДанныеФактическихИсполнителей.Вставить(
		"ОснованияФактИсполнителейПоДействиям",
		ОснованияФактИсполнителейПоДействиям);
	
	Возврат ДанныеФактическихИсполнителей;
	
КонецФункции

// Определяет источник действия задачи.
//
// Параметры:
//   ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи - текущее действие задачи.
//                  - СтрокаТаблицыЗначений - см. ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗапросСОтборами
//
// Возвращаемое значение:
//   ОпределяемыйТип.ИсточникДействийЗадач - источник действия задачи.
//
Функция ИсточникДействияЗадачи(ДействиеЗадачи) Экспорт
	
	Если Не ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ДействиеЗадачи) = Тип("СтрокаТаблицыЗначений") Тогда
		Возврат ДействиеЗадачи.Источник;
	Иначе
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеЗадачи, "Источник");
	КонецЕсли;
	
КонецФункции

// Возвращает на доработку задачу.
//
// Параметры:
//  Задача - ДокументСсылка.Задача.
//  ДанныеВозвратаНаДоработку - См. РаботаСЗадачамиКлиентСервер.НовыйДанныеВозвратаНаДоработку.
//  КтоОтметил - СправочникСсылка.Сотрудники
//
Процедура ВернутьНаДоработку(Задача, ДанныеВозвратаНаДоработку, КтоОтметил) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.Задача");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Задача);
		Блокировка.Заблокировать();
		
		ЗадачаОбъект = Задача.ПолучитьОбъект();
		
		ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ЗадачаОбъект.ВидЗадачи);
		
		СтрокаПроверяющего = Неопределено;
		Для Каждого СтрокаУчастника Из ЗадачаОбъект.Участники Цикл
			
			Если Не РаботаСЗадачамиПовтИсп.ЭтоПроверяющий(СтрокаУчастника.ВидУчастника) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаПроверяющего = СтрокаУчастника;
			
		КонецЦикла;
		
		Если СтрокаПроверяющего = Неопределено Тогда
			
			ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ЗадачаОбъект.ВидЗадачи);
			Если Не ЗначениеЗаполнено(ДанныеВидаЗадачи.ВидУчастникаПроверяющий) Тогда
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Не поддерживается возврат на доработку задачи вида  %1.'"),
					ЗадачаОбъект.ВидЗадачи);
			КонецЕсли;
			
			СтрокаПроверяющего = ЗадачаОбъект.Участники.Добавить();
			СтрокаПроверяющего.ВидУчастника = ДанныеВидаЗадачи.ВидУчастникаПроверяющий;
			СтрокаПроверяющего.Участник = Сотрудники.ОсновнойСотрудник();
			
			ЗадачаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		ИначеЕсли Не ЭтоТекущийИсполнитель(СтрокаПроверяющего.Участник) Тогда
			
			СтрокаПроверяющего.Участник = Сотрудники.ОсновнойСотрудник();
			
			ЗадачаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЕсли;
		
		ДействиеПроверяющего = Документы.ДействиеЗадачи.ПустаяСсылка();
		Для Каждого СтрокаУчастника Из ЗадачаОбъект.Участники Цикл
			
			Если Не РаботаСЗадачамиПовтИсп.ЭтоПроверяющий(СтрокаУчастника.ВидУчастника) Тогда
				Продолжить;
			КонецЕсли;
			
			ДействиеПроверяющего = СтрокаУчастника.ДействиеУчастника;
			
		КонецЦикла;
		
		ПараметрыВыполнения =
			РаботаСЗадачамиКлиентСервер.НовыйПараметрыВыполненияДействийЗадач();
		ПараметрыВыполнения.ЗакрыватьПодзадачи = Ложь;
		ПараметрыВыполнения.ЗанятыеФайлыПроверены = Истина;
		ПараметрыВыполнения.ВерсииДанных[ДействиеПроверяющего] = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеПроверяющего, "ВерсияДанных");
		ПараметрыВыполнения.ДанныеВозвратаНаДоработку = ДанныеВозвратаНаДоработку;
		
		Если Не ЗначениеЗаполнено(ДанныеВидаЗадачи.РезультатПроверяющегоВозвращеноНаДоработку) Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Для вида задачи %1 не определен возврат на доработку.'"),
				ЗадачаОбъект.ВидЗадачи);
		КонецЕсли;
		
		ВыполнитьДействиеЗадачи(
			ДействиеПроверяющего,
			ДанныеВидаЗадачи.РезультатПроверяющегоВозвращеноНаДоработку,
			КтоОтметил,
			ПараметрыВыполнения);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Возвращает данные для выбора фактического исполнителя задачи.
//
// Параметры:
//   ДействияЗадач - Массив из ДокументСсылка.ДействиеЗадачи
//                 - ДокументСсылка.ДействиеЗадачи
//
// Возвращаемое значение:
//   Структура:
//     * АдресатыЗадачи - ТаблицаЗначений:
//       ** Адресат - СправочникСсылка.Сотрудники
//       ** ЭтоЗамещающий - Булево
//     * ФактическиеИсполнители - ТаблицаЗначений:
//       ** Исполнитель - Строка
//       ** ВидЗамещения - ПеречислениеСсылка.ВидыЗамещения
//       ** Сотрудник - СправочникСсылка.Сотрудники
//
Функция ДанныеДляВыбораФактическогоИсполнителя(Знач ДействияЗадач) Экспорт
	
	АдресатыЗадачи = Новый ТаблицаЗначений;
	АдресатыЗадачи.Колонки.Добавить("Адресат", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	АдресатыЗадачи.Колонки.Добавить("ЭтоЗамещающий", Новый ОписаниеТипов("Булево"));
	
	ФактическиеИсполнители = Новый ТаблицаЗначений;
	ФактическиеИсполнители.Колонки.Добавить("Исполнитель", Новый ОписаниеТипов("Строка"));
	ФактическиеИсполнители.Колонки.Добавить("ВидЗамещения", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗамещения"));
	ФактическиеИсполнители.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	Если ТипЗнч(ДействияЗадач) <> Тип("Массив") Тогда
		ДействияЗадач = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДействияЗадач);
	КонецЕсли;
	
	ОсновнойСотрудник = Сотрудники.ОсновнойСотрудник();
	ВсеСотрудникиПользователя = СотрудникиПовтИсп.ВсеСотрудникиТекущегоПользователя();
	ТаблицаВсехЗамещений = Справочники.ЗамещающиеИПомощники.ВсеЗамещенияПоДействиямЗадач(
		ДействияЗадач, ВсеСотрудникиПользователя);
	ТаблицаЗамещений = Справочники.ЗамещающиеИПомощники.АктуальныеЗамещенияПоДействиямЗадач(
		ДействияЗадач, ВсеСотрудникиПользователя);
	
	Для Каждого ДействиеЗадачи Из ДействияЗадач Цикл
		ЗамещенияДействия = ТаблицаВсехЗамещений.НайтиСтроки(
			Новый Структура("ДействиеЗадачи", ДействиеЗадачи));
		Если ЗамещенияДействия.Количество() > 0 Тогда
			Для Каждого Замещение Из ЗамещенияДействия Цикл
				НовСтрока = АдресатыЗадачи.Добавить();
				НовСтрока.Адресат = Замещение.Сотрудник;
				НовСтрока.ЭтоЗамещающий = 
					Замещение.ВидЗамещения = ПредопределенноеЗначение("Перечисление.ВидыЗамещения.Замещающие");
			КонецЦикла;
		
		// Если сотрудник не является заместителем или помощником, то смотрим на исполнителя задачи.	
		Иначе
			СотрудникиИсполнителя 
				= РегистрыСведений.СотрудникиВКонтейнерах.СотрудникиВКонтейнере(ДействиеЗадачи.Исполнитель);
			Для Каждого Сотрудник Из СотрудникиИсполнителя Цикл
				НовСтрока = АдресатыЗадачи.Добавить();
				НовСтрока.Адресат = Сотрудник;
			КонецЦикла;
		КонецЕсли;
		
		ЗамещенияДействия = ТаблицаЗамещений.НайтиСтроки(
			Новый Структура("ДействиеЗадачи", ДействиеЗадачи));
		
		Если ЗамещенияДействия.Количество() = 0 Тогда
			НовСтрока = ФактическиеИсполнители.Добавить();
			НовСтрока.Исполнитель = СтрШаблон(
				НСтр("ru = 'Я, %1'"),
				Строка(
					РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(ОсновнойСотрудник)));
			НовСтрока.Сотрудник = ОсновнойСотрудник;
			НовСтрока.ВидЗамещения = Перечисления.ВидыЗамещения.Замещающие;
			
			НовСтрока = ФактическиеИсполнители.Добавить();
			НовСтрока.Исполнитель = НСтр("ru = 'Исполнитель, которому адресована'");
			НовСтрока.ВидЗамещения = Перечисления.ВидыЗамещения.Помощники;
		Иначе
			Для Каждого Замещение Из ЗамещенияДействия Цикл
				НовСтрока = ФактическиеИсполнители.Добавить();
				НовСтрока.Исполнитель = НСтр("ru = 'Исполнитель, которому адресована'");
				НовСтрока.ВидЗамещения = Замещение.ВидЗамещения;
				Прервать;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	АдресатыЗадачи.Сортировать("Адресат");
	
	Возврат Новый Структура("АдресатыЗадачи, ФактическиеИсполнители", АдресатыЗадачи, ФактическиеИсполнители);
	
КонецФункции

// Формирует данные действий задач.
// 
// Параметры:
//  МассивДействийЗадач - Массив из ДокументСсылка.ДействиеЗадачи.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Данные действий задач.
//                    См. РегистрыСведений.РеестрЗадачПоИсполнителям.ДанныеДействийЗадач().
//  
Функция ДанныеДействийЗадач(МассивДействийЗадач) Экспорт
	
	ДанныеДействийЗадач = РегистрыСведений.РеестрЗадачПоИсполнителям.ДанныеДействийЗадач(МассивДействийЗадач);
	
	Возврат ДанныеДействийЗадач;
	
КонецФункции

// Формирует данные действия задачи.
// 
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений, Неопределено - Данные действий задач.
//  См. РегистрыСведений.РеестрЗадачПоИсполнителям.ДанныеДействийЗадач().
//  
Функция ДанныеДействияЗадачи(ДействиеЗадачи) Экспорт
 	
 	МассивДействийЗадач = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДействиеЗадачи);
 	ДанныеДействийЗадач = ДанныеДействийЗадач(МассивДействийЗадач);
 	Если ДанныеДействийЗадач.Количество() = 0 Тогда
 		Возврат Неопределено;
 	КонецЕсли;
 	
 	ДанныеДействияЗадачи = ДанныеДействийЗадач.Получить(0);
 	
 	Возврат ДанныеДействияЗадачи;
 	
 КонецФункции

// Определяет другие виды действий задач.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.ВидыДействийЗадач - Другие виды действий задач.
// 	
Функция ДругиеВидыДействийЗадач() Экспорт
	
	ДругиеВидыДействийЗадач = РаботаСЗадачамиПовтИсп.ВсеВидыДействийЗадач();
	
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(
		ДругиеВидыДействийЗадач,
		Справочники.ВидыДействийЗадач.Исполнить);	
	
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(
		ДругиеВидыДействийЗадач,
		Справочники.ВидыДействийЗадач.Рассмотреть);
		
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(
		ДругиеВидыДействийЗадач,
		Справочники.ВидыДействийЗадач.Ознакомиться);
		
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(
		ДругиеВидыДействийЗадач,
		Справочники.ВидыДействийЗадач.Зарегистрировать);
		
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(
		ДругиеВидыДействийЗадач,
		Справочники.ВидыДействийЗадач.Согласовать);
		
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(
		ДругиеВидыДействийЗадач,
		Справочники.ВидыДействийЗадач.Утвердить);	
	
	Возврат ДругиеВидыДействийЗадач;
		
КонецФункции

// Проверяет, активна ли задача исполнителя, т.е. доступна ли для исполнения исполнителем.
//
// Параметры:
//  ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя - Проверяемая задача.
// 
// Возвращаемое значение:
//  Булево - Задача активна.
//
Функция ЗадачаАктивна(ЗадачаСсылка) Экспорт
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка,
		"ПометкаУдаления, ИсключенаИзПроцесса, Выполнена, СостояниеБизнесПроцесса");
	СостояниеВыполненияЗадачи = ОбработкаОчередиЗаданийСервер.СостояниеВыполненияЗадачи(ЗадачаСсылка);
	
	ЗадачаАктивна =
		РеквизитыЗадачи.ПометкаУдаления = Ложь
		И РеквизитыЗадачи.ИсключенаИзПроцесса = Ложь
		И РеквизитыЗадачи.Выполнена = Ложь
		И РеквизитыЗадачи.СостояниеБизнесПроцесса <> Перечисления.СостоянияБизнесПроцессов.Прерван
		И СостояниеВыполненияЗадачи.СостояниеВыполнения <> Перечисления.СостоянияЗадачДляВыполнения.ГотоваКВыполнению;
	
	Возврат ЗадачаАктивна;
	
КонецФункции

// Определяет задачи по приложению.
// 
// Параметры:
// 	Приложение - ОпределяемыйТип.ПриложениеЗадач.
// 	ВсеЗадачи - Булево.
// 	
// Возвращаемое значение:
//   Массив из ДокументСсылка.Задача - Задачи по приложению.
// 	
Функция ЗадачиПоПриложению(Приложение, ВсеЗадачи = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗадачиПоПриложению = Новый Массив;
	Если Не ЗначениеЗаполнено(Приложение) Тогда
		Возврат ЗадачиПоПриложению;
	КонецЕсли; 
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗадачаПриложения.Ссылка
		|ИЗ
		|	Документ.Задача.Приложения КАК ЗадачаПриложения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Задача КАК Задача
		|		ПО ЗадачаПриложения.Ссылка = Задача.Ссылка
		|ГДЕ
		|	ЗадачаПриложения.Приложение = &Приложение
		|	И Задача.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("Приложение", Приложение);
	
	ЗадачиПоПриложению = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ИнтеграцияЗадач.ПриОпределенииЗадачПоПриложению(Приложение, ЗадачиПоПриложению, ВсеЗадачи);
	
	Возврат ЗадачиПоПриложению;
	
КонецФункции

// Определяет задачи по проекту.
// 
// Параметры:
// 	Проект - СправочникСсылка.Проекты.
// 	
// Возвращаемое значение:
//   Массив из ДокументСсылка.Задача - Задачи по проекту.
// 	
Функция ЗадачиПоПроекту(Проект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗадачиПоПроекту = Документы.Задача.НайтиПоПроекту(Проект);
	
	Возврат ЗадачиПоПроекту;
	
КонецФункции

// Формирует заголовок команды "Задачи по приложению".
// 
// Параметры:
// 	Приложение - ОпределяемыйТип.ПриложениеЗадач.
// 	
// Возвращаемое значение:
//   Строка - Заголовок команды "Задачи по приложению".
// 	
Функция ЗаголовокКомандыЗадачиПоПриложению(Приложение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаголовокКомандыЗадачиПоПриложению = "";
	
	ЗадачиПоПриложению = ЗадачиПоПриложению(Приложение);
	КоличествоЗадач = ЗадачиПоПриложению.Количество();
	Если КоличествоЗадач = 0 Тогда
		Возврат ЗаголовокКомандыЗадачиПоПриложению;
	КонецЕсли;
	
	ЭтоОжидающиеВыполненияЗадачи = ЭтоОжидающиеВыполненияЗадачи(ЗадачиПоПриложению);
	
	КоличествоОжидающихВыполненияЗадач = 0;
	Для Каждого Задача Из ЗадачиПоПриложению Цикл
		
		ЭтоОжидающаяВыполненияЗадача = ЭтоОжидающиеВыполненияЗадачи[Задача];
		Если ЭтоОжидающаяВыполненияЗадача Тогда
			КоличествоОжидающихВыполненияЗадач = КоличествоОжидающихВыполненияЗадач + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ЭтоОбъектДругойСистемы =
		МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемыСПроверкой(Приложение);
	
	Если Не ЭтоОбъектДругойСистемы Тогда
		ЗаголовокКомандыЗадачиПоПриложени = ИнтеграцияЗадач.ЗаголовокКомандыЗадачиПоПриложению(
			Приложение,
			КоличествоЗадач,
			КоличествоОжидающихВыполненияЗадач);
		Если ЗначениеЗаполнено(ЗаголовокКомандыЗадачиПоПриложени) Тогда
			Возврат ЗаголовокКомандыЗадачиПоПриложени;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьОжидающиеВыполненияЗадачи = КоличествоОжидающихВыполненияЗадач > 0;
	Если ЕстьОжидающиеВыполненияЗадачи Тогда
		
		ЗаголовокКомандыЗадачиПоПриложению = СтрШаблон(
			НСтр("ru = 'Задачи: %1 (выполняется %2)'"),
			КоличествоЗадач,
			КоличествоОжидающихВыполненияЗадач);
			
	Иначе
		
		ЗаголовокКомандыЗадачиПоПриложению = СтрШаблон(
			НСтр("ru = 'Задачи: %1'"),
			КоличествоЗадач);
		
	КонецЕсли;
	
	Возврат ЗаголовокКомандыЗадачиПоПриложению;
		
КонецФункции

// Отмечает взятие в работу действия задачи.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//  КтоОтметил - СправочникСсылка.Сотрудники.
//  ВыбранныйФактическийИсполнитель - Структура.
//
// Возвращаемое значение:
//  Структура - Результат взятия в работу:
//   * ВзятиеПереопределено - Булево.
//   * ВзятиеВРаботуОбработано - Булево.
//   * НужноВыбратьФактическогоИсполнителя -  Булево.
//
Функция ВзятьВРаботу(ДействиеЗадачи, КтоОтметил, ВыбранныйФактическийИсполнитель = Неопределено) Экспорт
	
	РезультатВзятияВРаботу = ИнтеграцияЗадач.ОбработатьВзятиеВРаботу(
		ДействиеЗадачи,
		КтоОтметил,
		ВыбранныйФактическийИсполнитель);
	Если РезультатВзятияВРаботу.ВзятиеПереопределено Тогда
		
		Если РезультатВзятияВРаботу.ВзятиеВРаботуОбработано Тогда
			
			РеквДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ДействиеЗадачи,
				"Исполнитель, Задача");
			ОписаниеВПротокол = СтрШаблон(
				НСтр("ru = 'Взятие задачи участника %1 в работу'"),
				РеквДействия.Исполнитель);
			ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(РеквДействия.Задача, ОписаниеВПротокол);
			
		КонецЕсли;
		
		Возврат РезультатВзятияВРаботу;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		ДействиеЗадачиОбъект = ДействиеЗадачи.ПолучитьОбъект();
		
		ВидЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеЗадачиОбъект.Задача, "ВидЗадачи");
		ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
		
		ВидСостоянияУчастниковЗадач = РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(ДействиеЗадачиОбъект.СостояниеУчастникаЗадачи);
		Если Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоНовоеДействие(ВидСостоянияУчастниковЗадач) Тогда
			
			Если ДействиеЗадачиОбъект.ВидДействия = ДанныеВидаЗадачи.ВидДействияИсполнителя Тогда
				ДействиеЗадачиОбъект.УстановитьСостояние(
					ДанныеВидаЗадачи.СостояниеУчастниковВРаботе,
					КтоОтметил,
					Истина);
			ИначеЕсли ДействиеЗадачиОбъект.ВидДействия = ДанныеВидаЗадачи.ВидДействияПроверяющего Тогда
				ДействиеЗадачиОбъект.УстановитьСостояние(
					ДанныеВидаЗадачи.СостояниеУчастниковНаПроверке,
					КтоОтметил,
					Истина);
			Иначе
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Неизвестен способ взятия в работу задачи %1.'"),
					ДействиеЗадачиОбъект.ВидДействия);
			КонецЕсли;
			
			Если ТипЗнч(ДействиеЗадачиОбъект.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
				
				ДанныеФактическихИсполнителей = 
					ОпределитьФактическихИсполнителей(
						ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДействиеЗадачи),
						КтоОтметил,
						ВыбранныйФактическийИсполнитель);
				
				РезультатВзятияВРаботу.НужноВыбратьФактическогоИсполнителя = 
					ДанныеФактическихИсполнителей.ДействияБезФактИсполнителя.Количество() > 0
					Или ДанныеФактическихИсполнителей.ДействияБезКомуАдресовано.Количество() > 0;
				
				Если Не РезультатВзятияВРаботу.НужноВыбратьФактическогоИсполнителя Тогда
					
					ФактическийИсполнитель = ДанныеФактическихИсполнителей.ФактическиеИсполнителиПолные[ДействиеЗадачи];
					РеквизитыФактическогоИсполнителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
						ФактическийИсполнитель,
						"План");
					ДействиеЗадачиОбъект.Исполнитель = РеквизитыФактическогоИсполнителя.План;
					
					Если Не ЗначениеЗаполнено(ДействиеЗадачиОбъект.Исполнитель) Тогда
						ВызватьИсключение СтрШаблон(
							НСтр("ru = 'Не удалось определить фактического исполнителя дла действия задачи %1.'"),
							ДействиеЗадачиОбъект.Ссылка);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не РезультатВзятияВРаботу.НужноВыбратьФактическогоИсполнителя Тогда
				
				ДействиеЗадачиОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
				РеквДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДействиеЗадачи, "Исполнитель, Задача");
				ОписаниеВПротокол = СтрШаблон(
					НСтр("ru = 'Взятие задачи участника %1 в работу'"),
					РеквДействия.Исполнитель);
				ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(РеквДействия.Задача, ОписаниеВПротокол);
				
				РезультатВзятияВРаботу.ВзятиеВРаботуОбработано = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат РезультатВзятияВРаботу;
	
КонецФункции

// Включает отчет об исполнении и приложения в отчет об исполнении вышестоящей задачи.
//
// Параметры:
//  ЗадачаИлиДействие - ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи - Задача или действие.
//  КтоОтметил - СправочникСсылка.Сотрудники
// 	
// Возвращаемое значение:
//  Структура - Результат взятия отчета об исполнении:
//   * ИзмененноеДействие - ДокументСсылка.ДействиеЗадачи, Неопределено - Измененное действие.
//   * НужноВыбратьФактическогоИсполнителя - Булево.
//   * ДействиеДляВзятияВРаботу - ДокументСсылка.ДействиеЗадачи, Неопределено - Действие для взятия в работу.
//
Функция ВзятьОтчетОбИсполненииИПриложения(ЗадачаИлиДействие, КтоОтметил) Экспорт
	
	РезультатВзятияОтчета = Новый Структура;
	РезультатВзятияОтчета.Вставить("ИзмененноеДействие", Неопределено);
	РезультатВзятияОтчета.Вставить("НужноВыбратьФактическогоИсполнителя", Ложь);
	РезультатВзятияОтчета.Вставить("ДействиеДляВзятияВРаботу", Неопределено);
	
	Если Не ЗначениеЗаполнено(ЗадачаИлиДействие) Тогда
		Возврат РезультатВзятияОтчета;
	КонецЕсли;
	
	Если ТипЗнч(ЗадачаИлиДействие) = Тип("ДокументСсылка.Задача") Тогда
		
		Задача = ЗадачаИлиДействие;
		ДействиеЗадачи = Неопределено;
		РеквизитыДействияЗадачи = Неопределено;
		
	ИначеЕсли ТипЗнч(ЗадачаИлиДействие) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		
		ДействиеЗадачи = ЗадачаИлиДействие;
		РеквизитыДействияЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДействиеЗадачи,
			"Задача");
		
		Задача = РеквизитыДействияЗадачи.Задача;
			
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестное значение параметра %1 (%2)'"),
			ЗадачаИлиДействие,
			ТипЗнч(ЗадачаИлиДействие));
		
	КонецЕсли;
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задача,
		"ВышестоящееДействие, Участники");
	Если Не ЗначениеЗаполнено(РеквизитыЗадачи.ВышестоящееДействие) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестно вышестоящее действие задачи %1'"),
			Задача);
	КонецЕсли;
	
	ВсеДействияИсполнителей = Новый Массив;
	
	Если ДействиеЗадачи <> Неопределено Тогда
		
		ВсеДействияИсполнителей.Добавить(ДействиеЗадачи);
		
	Иначе
		
		ТаблицаУчастники = РеквизитыЗадачи.Участники.Выгрузить();
		ТаблицаУчастники.Сортировать("НомерСтроки Возр");
		
		Для Каждого СтрокаУчастника Из ТаблицаУчастники Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаУчастника.ДействиеУчастника)
				Или Не РаботаСЗадачамиПовтИсп.ЭтоИсполнитель(СтрокаУчастника.ВидУчастника) Тогда
				Продолжить;
			КонецЕсли;
			
			ВсеДействияИсполнителей.Добавить(СтрокаУчастника.ДействиеУчастника);
			
		КонецЦикла;
		
	КонецЕсли;
	
	РеквизитыДействий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ВсеДействияИсполнителей,
		"Исполнитель, РезультатДействияТекстом, Приложения");
	
	ДанныеОтчетов = Новый Массив;
	Для Каждого ДействиеИсполнителя Из ВсеДействияИсполнителей Цикл
		
		РеквизитыДействия = РеквизитыДействий[ДействиеИсполнителя];
		
		ДанныеОтчета = Новый Структура("Автор, ОтчетОбИсполнении, Приложения");
		
		ДанныеОтчета.Автор = РеквизитыДействия.Исполнитель;
		ДанныеОтчета.ОтчетОбИсполнении = РеквизитыДействия.РезультатДействияТекстом;
		ДанныеОтчета.Приложения = РеквизитыДействия.Приложения.Выгрузить().ВыгрузитьКолонку("Приложение");
		
		Если Не ЗначениеЗаполнено(ДанныеОтчета.ОтчетОбИсполнении)
			И ДанныеОтчета.Приложения.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеОтчетов.Добавить(ДанныеОтчета);
		
	КонецЦикла;
	
	Если ДанныеОтчетов.Количество() = 0 Тогда
		Возврат РезультатВзятияОтчета;
	КонецЕсли;
	
	МассивОбщийОтчетОбИсполнении = Новый Массив;
	ТолькоОдинОтчет = ДанныеОтчетов.Количество() = 1;
	
	Для Каждого ДанныеОтчета Из ДанныеОтчетов Цикл
		
		МассивОтчетОбИсполнении = Новый Массив;
		
		Если Не ТолькоОдинОтчет Тогда
			МассивОтчетОбИсполнении.Добавить(СтрШаблон("%1:", Строка(ДанныеОтчета.Автор)));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеОтчета.ОтчетОбИсполнении) Тогда
			МассивОтчетОбИсполнении.Добавить(ДанныеОтчета.ОтчетОбИсполнении);
		КонецЕсли;
		
		Если ДанныеОтчета.Приложения.Количество() > 0 Тогда
			
			МассивОтчетОбИсполнении.Добавить(
				СтрШаблон(
					"
					|%1:",
					НСтр("ru = 'Приложения'")));
			Для Каждого Приложение Из ДанныеОтчета.Приложения Цикл
				МассивОтчетОбИсполнении.Добавить(Строка(Приложение));
			КонецЦикла;
			
		КонецЕсли;
		
		ОтчетОбИсполнении = СтрСоединить(МассивОтчетОбИсполнении, Символы.ПС);
		
		МассивОбщийОтчетОбИсполнении.Добавить(ОтчетОбИсполнении);
		
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ДействиеЗадачи");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", РеквизитыЗадачи.ВышестоящееДействие);
		Блокировка.Заблокировать();
		
		РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			РеквизитыЗадачи.ВышестоящееДействие,
			"ВерсияДанных, РезультатДействияТекстом");
		
		Если ЗначениеЗаполнено(РеквизитыДействия.РезультатДействияТекстом) Тогда
			МассивОбщийОтчетОбИсполнении.Вставить(0, РеквизитыДействия.РезультатДействияТекстом);
		КонецЕсли;
		
		ОбщийОтчетОбИсполнении = СтрСоединить(МассивОбщийОтчетОбИсполнении, Символы.ПС + Символы.ПС);
		
		РезультатСохраненияРезультата = СохранитьРезультатДействия(
			РеквизитыЗадачи.ВышестоящееДействие,
			ОбщийОтчетОбИсполнении,
			РеквизитыДействия.ВерсияДанных,
			КтоОтметил,
			Истина);
		Если РезультатСохраненияРезультата.НужноВыбратьФактическогоИсполнителя Тогда
			РезультатВзятияОтчета.НужноВыбратьФактическогоИсполнителя =
				РезультатСохраненияРезультата.НужноВыбратьФактическогоИсполнителя;
			РезультатВзятияОтчета.ДействиеДляВзятияВРаботу = РеквизитыЗадачи.ВышестоящееДействие;
		КонецЕсли;
		
		ДобавляемыеПриложения = Новый Массив;
		Для Каждого ДанныеОтчета Из ДанныеОтчетов Цикл
			
			Для Каждого Приложение Из ДанныеОтчета.Приложения Цикл
				
				Если ТипЗнч(Приложение) = Тип("СправочникСсылка.Файлы") Тогда
					ДобавляемоеПриложение = РаботаСФайламиВызовСервера.СкопироватьФайл(
						Приложение,
						РеквизитыЗадачи.ВышестоящееДействие);
				Иначе
					ДобавляемоеПриложение = Приложение;
				КонецЕсли;
				
				ДобавляемыеПриложения.Добавить(ДобавляемоеПриложение);
						
			КонецЦикла;
			
		КонецЦикла;
		
		ДобавитьПриложения(
			РеквизитыЗадачи.ВышестоящееДействие,
			ДобавляемыеПриложения,
			КтоОтметил,
			Истина);
		
		РезультатВзятияОтчета.ИзмененноеДействие = РеквизитыЗадачи.ВышестоящееДействие;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат РезультатВзятияОтчета;
	
КонецФункции

// Определяет вид действия участника по виду частника.
//
// Параметры:
//  ВидЗадачи - СправочникСсылка.ВидыЗадач
//  ВидУчастника - СправочникСсылка.ВидыУчастниковЗадач
// 
// Возвращаемое значение:
//  СправочникСсылка.ВидыДействийЗадач
//
Функция ВидДействияПоВидуУчастника(ВидЗадачи, ВидУчастника) Экспорт
	
	Если ВидУчастника = Справочники.ВидыУчастниковЗадач.Ответственный
		Или ВидУчастника = Справочники.ВидыУчастниковЗадач.Исполнитель Тогда
		
		Возврат Справочники.ВидыДействийЗадач.Исполнить;
		
	ИначеЕсли ВидУчастника = Справочники.ВидыУчастниковЗадач.Проверяющий Тогда
		
		Возврат Справочники.ВидыДействийЗадач.Проверить;
		
	ИначеЕсли ВидУчастника = Справочники.ВидыУчастниковЗадач.ОбеспечивающийПодписание Тогда
		
		Возврат Справочники.ВидыДействийЗадач.ОбеспечитьПодписание;
		
	ИначеЕсли ВидУчастника = Справочники.ВидыУчастниковЗадач.ОбрабатывающийРезолюцию Тогда
		
		Возврат Справочники.ВидыДействийЗадач.ОбработатьРезолюцию;
		
	ИначеЕсли ВидУчастника = Справочники.ВидыУчастниковЗадач.ОбрабатывающийРезультат Тогда
		
		Возврат Справочники.ВидыДействийЗадач.ОбработатьРезультат;
		
	ИначеЕсли ВидУчастника = Справочники.ВидыУчастниковЗадач.Ознакомляемый Тогда
		
		Возврат Справочники.ВидыДействийЗадач.Ознакомиться;
		
	ИначеЕсли ВидУчастника = Справочники.ВидыУчастниковЗадач.ОзнакомляемыйСРезультатом Тогда
		
		Возврат Справочники.ВидыДействийЗадач.ОзнакомитьсяСРезультатом;
		
	ИначеЕсли ВидУчастника = Справочники.ВидыУчастниковЗадач.ОтКого Тогда
		
		Возврат Справочники.ВидыДействийЗадач.ОбработатьРезультат;
		
	ИначеЕсли ВидУчастника = Справочники.ВидыУчастниковЗадач.Подписывающий Тогда
		
		Возврат Справочники.ВидыДействийЗадач.Подписать;
		
	ИначеЕсли ВидУчастника = Справочники.ВидыУчастниковЗадач.Приглашенный Тогда
		
		Возврат Справочники.ВидыДействийЗадач.ПринятьПриглашение;
		
	ИначеЕсли ВидУчастника = Справочники.ВидыУчастниковЗадач.Рассматривающий Тогда
		
		Возврат Справочники.ВидыДействийЗадач.Рассмотреть;
		
	ИначеЕсли ВидУчастника = Справочники.ВидыУчастниковЗадач.РассматривающийВопрос Тогда
		
		Возврат Справочники.ВидыДействийЗадач.РассмотретьВопрос;
		
	ИначеЕсли ВидУчастника = Справочники.ВидыУчастниковЗадач.РассматривающийЗапрос Тогда
		
		Возврат Справочники.ВидыДействийЗадач.РассмотретьЗапрос;
		
	ИначеЕсли ВидУчастника = Справочники.ВидыУчастниковЗадач.Регистратор Тогда
		
		Возврат Справочники.ВидыДействийЗадач.Зарегистрировать;
		
	ИначеЕсли ВидУчастника = Справочники.ВидыУчастниковЗадач.Согласующий Тогда
		
		Возврат Справочники.ВидыДействийЗадач.Согласовать;
		
	ИначеЕсли ВидУчастника = Справочники.ВидыУчастниковЗадач.Утверждающий Тогда
		
		Возврат Справочники.ВидыДействийЗадач.Утвердить;
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Незивестен вид действия для вида участника %1'"),
			ВидУчастника);
		
	КонецЕсли;
	
КонецФункции

// Определяет виды участников задачи.
//
// Параметры:
//  ВидЗадачи - СправочникСсылка.ВидыЗадач.
// 
// Возвращаемое значение:
//  Структура - Виды участников задачи:
//   * Ответственные - Массив из СправочникСсылка.ВидыУчастниковЗадач
//   * Исполнители - Массив из СправочникСсылка.ВидыУчастниковЗадач
//   * Проверяющие - Массив из СправочникСсылка.ВидыУчастниковЗадач
//
Функция ВидыУчастниковЗадачи(ВидЗадачи) Экспорт
	
	ВидыУчастниковЗадачи = Новый Структура;
	ВидыУчастниковЗадачи.Вставить("Ответственные", Новый Массив);
	ВидыУчастниковЗадачи.Вставить("Исполнители", Новый Массив);
	ВидыУчастниковЗадачи.Вставить("Проверяющие", Новый Массив);
	
	Если Не ЗначениеЗаполнено(ВидЗадачи) Тогда
		Возврат ВидыУчастниковЗадачи;
	КонецЕсли;
	
	// Определим все виды участников.
	ВсеВидыУчастников = Новый Массив;
	ДанныеНабораСостояний = РаботаСЗадачамиПовтИсп.ДанныеНабораСостояний(ВидЗадачи);
	
	Для Каждого КлючИЗначение Из ДанныеНабораСостояний.СостоянияУчастниковВРаботе Цикл
		
		ВидУчастника = КлючИЗначение.Ключ;
		
		ВсеВидыУчастников.Добавить(ВидУчастника);
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ДанныеНабораСостояний.СостоянияУчастниковСовершено Цикл
		
		ВидУчастника = КлючИЗначение.Ключ;
		
		ВсеВидыУчастников.Добавить(ВидУчастника);
		
	КонецЦикла;
	
	ВсеВидыУчастников = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВсеВидыУчастников);
	
	// Распределим виды участников по типам.
	Для Каждого ВидУчастника Из ВсеВидыУчастников Цикл
		
		Если РаботаСЗадачамиПовтИсп.ЭтоОтветственный(ВидУчастника) Тогда
			ВидыУчастниковЗадачи.Ответственные.Добавить(ВидУчастника);
		КонецЕсли;
		
		Если РаботаСЗадачамиПовтИсп.ЭтоИсполнитель(ВидУчастника) Тогда
			ВидыУчастниковЗадачи.Исполнители.Добавить(ВидУчастника);
		КонецЕсли;
		
		Если РаботаСЗадачамиПовтИсп.ЭтоПроверяющий(ВидУчастника) Тогда
			ВидыУчастниковЗадачи.Проверяющие.Добавить(ВидУчастника);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВидыУчастниковЗадачи;
	
КонецФункции

// Выполняет действие задачи.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи - Действие задачи.
//  РезультатДействия - СправочникСсылка.РезультатыДействийЗадач - Результат действия.
//  КтоОтметил - СправочникСсылка.Сотрудники - Кто отметил в программе.
//  ПараметрыВыполнения - Структура - Параметры выполнения. См. РаботаСЗадачамиКлиентСервер.НовыйПараметрыВыполненияДействийЗадач
//
Процедура ВыполнитьДействиеЗадачи(ДействиеЗадачи, РезультатДействия, КтоОтметил, ПараметрыВыполнения) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Если ПараметрыВыполнения.ВыполнитьОтИмени <> Неопределено Тогда
			
			Если Не ПривилегированныйРежим() Тогда
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Для выполнения задачи от имени пользователя %1 (%2) необходимо установить привилегированный режим.'"),
					ПараметрыВыполнения.ВыполнитьОтИмени,
					ТипЗнч(ПараметрыВыполнения.ВыполнитьОтИмени));
			КонецЕсли;
			
			ТекущийПользователь = ПараметрыВыполнения.ВыполнитьОтИмени;
			ОсновнойСотрудник = Сотрудники.ОсновнойСотрудникПользователя(ПараметрыВыполнения.ВыполнитьОтИмени);
			
		Иначе
			
			ТекущийПользователь = Пользователи.ТекущийПользователь();
			ОсновнойСотрудник = Сотрудники.ОсновнойСотрудник();
			
		КонецЕсли;
		
		ПраваПользователяПоОбъекту = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(
			ДействиеЗадачи,
			ТекущийПользователь);
		Если Не ПраваПользователяПоОбъекту.Изменение Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Недостаточно прав для выполнения задачи %1.'"),
				ДействиеЗадачи);
		КонецЕсли;
		
		ВыполнениеОбработано = ИнтеграцияЗадач.ОбработатьВыполнениеДействияЗадачи(
			ДействиеЗадачи,
			РезультатДействия,
			КтоОтметил,
			ПараметрыВыполнения);
		Если Не ВыполнениеОбработано Тогда
			
			ДействиеЗадачиОбъект = ДействиеЗадачи.ПолучитьОбъект();
			
			ВидЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеЗадачиОбъект.Задача, "ВидЗадачи");
			ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
			
			Если РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполнена Тогда
				
				ЕстьОбработкаРезультата = ЕстьОбработкаРезультата(ДействиеЗадачиОбъект.Задача);
				Если ЕстьОбработкаРезультата Тогда
					ДействиеЗадачиОбъект.УстановитьСостояние(
						ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверки,
						КтоОтметил,
						Истина);
				Иначе
					ДействиеЗадачиОбъект.УстановитьСостояние(
						ДанныеВидаЗадачи.СостояниеУчастниковВыполнена,
						КтоОтметил,
						Истина);
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(ДанныеВидаЗадачи.РезультатИсполнителяВыполненаСЗамечаниями)
				И РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполненаСЗамечаниями Тогда
				
				ЕстьОбработкаРезультата = ЕстьОбработкаРезультата(ДействиеЗадачиОбъект.Задача);
				Если ЕстьОбработкаРезультата Тогда
					ДействиеЗадачиОбъект.УстановитьСостояние(
						ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиСЗамечаниями,
						КтоОтметил,
						Истина);
				Иначе
					ДействиеЗадачиОбъект.УстановитьСостояние(
						ДанныеВидаЗадачи.СостояниеУчастниковВыполненаСЗамечаниями,
						КтоОтметил,
						Истина);
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(ДанныеВидаЗадачи.РезультатИсполнителяВыполненаОтрицательно)
				И РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполненаОтрицательно Тогда
				
				ЕстьОбработкаРезультата = ЕстьОбработкаРезультата(ДействиеЗадачиОбъект.Задача);
				Если ЕстьОбработкаРезультата Тогда
					ДействиеЗадачиОбъект.УстановитьСостояние(
						ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиОтрицательно,
						КтоОтметил,
						Истина);
				Иначе
					ДействиеЗадачиОбъект.УстановитьСостояние(
						ДанныеВидаЗадачи.СостояниеУчастниковВыполненаОтрицательно,
						КтоОтметил,
						Истина);
				КонецЕсли;
				
			ИначеЕсли РезультатДействия = ДанныеВидаЗадачи.РезультатПроверяющегоПроверено Тогда
				
				ДействиеЗадачиОбъект.УстановитьСостояние(
					ДанныеВидаЗадачи.СостояниеУчастниковПроверено,
					КтоОтметил,
					Истина);
				
			ИначеЕсли РезультатДействия = ДанныеВидаЗадачи.РезультатПроверяющегоВозвращеноНаДоработку Тогда
				
				Если ПараметрыВыполнения.ДанныеВозвратаНаДоработку = Неопределено Тогда
					ВызватьИсключение НСтр("ru = 'Не указаны данные возврата на доработку.'");
				КонецЕсли;
				
				ДанныеВозвратаНаДоработку = ПараметрыВыполнения.ДанныеВозвратаНаДоработку;
				ДействияДляВозврата = ДанныеВозвратаНаДоработку.ДействияДляВозврата;
				
				НужноЗаписатьЗадачу = Ложь;
				ЗадачаОбъект = ДействиеЗадачиОбъект.Задача.ПолучитьОбъект();
				
				// Изменение срока.
				Если ЗадачаОбъект.Срок <> ДанныеВозвратаНаДоработку.Срок Тогда
					
					ЗадачаОбъект.Срок = ДанныеВозвратаНаДоработку.Срок;
					
					НужноЗаписатьЗадачу = Истина;
					
				КонецЕсли;
				 
				// Удаление участников.
				Для Каждого УдаленноеДействие Из ДанныеВозвратаНаДоработку.УдаленныеДействия Цикл
					
					СтрокаКУдалению = ЗадачаОбъект.Участники.Найти(
						УдаленноеДействие,
						"ДействиеУчастника");
					Если СтрокаКУдалению = Неопределено Тогда
						ВызватьИсключение СтрШаблон(
							НСтр("ru = 'Не удалось найти строку к удалению %1.'"),
							ПолучитьНавигационнуюСсылку(УдаленноеДействие));
					КонецЕсли;
					
					ЗадачаОбъект.Участники.Удалить(СтрокаКУдалению);
					
					НужноЗаписатьЗадачу = Истина;
					
				КонецЦикла;
				
				// Изменение ответственного.
				СтрокаОтветственного =
					ЗадачаОбъект.Участники.Найти(
						ДанныеВидаЗадачи.ВидУчастникаОтветственный,
						"ВидУчастника");
				
				УстановитьОтветственного = Ложь;
				Если СтрокаОтветственного = Неопределено
					И ДанныеВозвратаНаДоработку.Ответственный = Неопределено Тогда
					
					// Ответственный установлен корректно.
					
				ИначеЕсли СтрокаОтветственного = Неопределено
					И ДанныеВозвратаНаДоработку.Ответственный <> Неопределено Тогда
					
					УстановитьОтветственного = Истина;
					
				ИначеЕсли СтрокаОтветственного <> Неопределено
					И ДанныеВозвратаНаДоработку.Ответственный = СтрокаОтветственного.ДействиеУчастника Тогда
					
					// Ответственный установлен корректно.
					
				ИначеЕсли СтрокаОтветственного <> Неопределено
					И ДанныеВозвратаНаДоработку.Ответственный <> СтрокаОтветственного.ДействиеУчастника Тогда
					
					СтрокаОтветственного.ВидУчастника = ДанныеВидаЗадачи.ВидУчастникаИсполнитель;
					
					УстановитьОтветственного = Истина;
					
					НужноЗаписатьЗадачу = Истина;
					
				КонецЕсли;
				
				Если УстановитьОтветственного
					И ТипЗнч(ДанныеВозвратаНаДоработку.Ответственный) = Тип("ДокументСсылка.ДействиеЗадачи")
					И ЗначениеЗаполнено(ДанныеВозвратаНаДоработку.Ответственный) Тогда
					
					СтрокаОтветственного =
						ЗадачаОбъект.Участники.Найти(
							ДанныеВозвратаНаДоработку.Ответственный,
							"ДействиеУчастника");
					Если СтрокаОтветственного = Неопределено Тогда
						ВызватьИсключение СтрШаблон(
							НСтр("ru = 'Не удалось найти строку ответственного %1.'"),
							ПолучитьНавигационнуюСсылку(ДанныеВозвратаНаДоработку.Ответственный));
					КонецЕсли;
					
					СтрокаОтветственного.ВидУчастника = ДанныеВидаЗадачи.ВидУчастникаОтветственный;
					
					НужноЗаписатьЗадачу = Истина;
					
				КонецЕсли;
				
				Для Каждого ДобавленныйУчастник Из ДанныеВозвратаНаДоработку.ДобавленныеУчастники Цикл
					
					НоваяСтрокаУчастника = ЗадачаОбъект.Участники.Добавить();
					НоваяСтрокаУчастника.ВидУчастника =
						?(ДобавленныйУчастник = ДанныеВозвратаНаДоработку.Ответственный,
							ДанныеВидаЗадачи.ВидУчастникаОтветственный,
							ДанныеВидаЗадачи.ВидУчастникаИсполнитель);
					НоваяСтрокаУчастника.Участник = ДобавленныйУчастник;
					НоваяСтрокаУчастника.ДействиеУчастника = Документы.ДействиеЗадачи.ПолучитьСсылку();
					
					Если Не ЗадачаОбъект.ДополнительныеСвойства.Свойство("НовыеДействия") Тогда
						ЗадачаОбъект.ДополнительныеСвойства.Вставить("НовыеДействия", Новый Массив);
					КонецЕсли;
					
					ЗадачаОбъект.ДополнительныеСвойства.НовыеДействия.Добавить(
						НоваяСтрокаУчастника.ДействиеУчастника);
					
					ДействияДляВозврата.Добавить(НоваяСтрокаУчастника.ДействиеУчастника);
					
					ОсобаяПричинаВозврата =
						ДанныеВозвратаНаДоработку.ОсобыеПричиныВозврата[ДобавленныйУчастник];
					Если ЗначениеЗаполнено(ОсобаяПричинаВозврата) Тогда
						ДанныеВозвратаНаДоработку.ОсобыеПричиныВозврата.Вставить(
							НоваяСтрокаУчастника.ДействиеУчастника,
							ОсобаяПричинаВозврата);
						ДанныеВозвратаНаДоработку.ОсобыеПричиныВозврата.Удалить(
							ДобавленныйУчастник);
					КонецЕсли;
					
					НужноЗаписатьЗадачу = Истина;
					
				КонецЦикла;
				
				Если НужноЗаписатьЗадачу Тогда
					
					ЗадачаОбъект.СортироватьУчастников();
					УстановитьПривилегированныйРежим(Истина);
					ЗадачаОбъект.Записать(РежимЗаписиДокумента.Проведение);
					УстановитьПривилегированныйРежим(Ложь);
					
				КонецЕсли;
				
				ДействиеЗадачиОбъект.ОбщаяПричинаВозврата =
					ДанныеВозвратаНаДоработку.ОбщаяПричинаВозврата;
				ДействиеЗадачиОбъект.ОсобыеПричиныВозврата =
					Новый ХранилищеЗначения(ДанныеВозвратаНаДоработку.ОсобыеПричиныВозврата);
				ДействиеЗадачиОбъект.РезультатДействияТекстом =
					ДанныеВозвратаНаДоработку.ПричинаВозврата;
				ДействиеЗадачиОбъект.ДополнительныеСвойства.Вставить(
					"ДействияДляВозврата",
					ДействияДляВозврата);
				
				ДействиеЗадачиОбъект.УстановитьСостояние(
					ДанныеВидаЗадачи.СостояниеУчастниковВозвращеноНаДоработку,
					КтоОтметил,
					Истина);
				
			Иначе
				
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Неизвестное состояние результата действия %1.'"),
					РезультатДействия);
				
			КонецЕсли;
			
			ПлановыйИсполнитель = ДействиеЗадачиОбъект.Исполнитель;
			
			ВычисленныйФактИсполнитель =
				ПараметрыВыполнения.ФактическиеИсполнителиПоДействиям[ДействиеЗадачи];
			ОснованиеФактическогоИсполнителя =
				ПараметрыВыполнения.ОснованияФактИсполнителейПоДействиям[ДействиеЗадачи];
			Если ВычисленныйФактИсполнитель <> Неопределено Тогда
				ДействиеЗадачиОбъект.Исполнитель = ВычисленныйФактИсполнитель;
			Иначе
				ДействиеЗадачиОбъект.Исполнитель = ОсновнойСотрудник;
			КонецЕсли;
			
			ФактИсполнительПолный =
				ПараметрыВыполнения.ФактическиеИсполнителиПолные[ДействиеЗадачи];
			Если ФактИсполнительПолный <> Неопределено Тогда
				ДействиеЗадачиОбъект.ФактическийИсполнитель = ФактИсполнительПолный;
			Иначе
				ДействиеЗадачиОбъект.ФактическийИсполнитель =
					Справочники.ФактическиеИсполнители.НайтиСоздатьФактическогоИсполнителя(
						ДействиеЗадачиОбъект.Исполнитель,
						ОсновнойСотрудник,
						ОсновнойСотрудник,
						ОсновнойСотрудник);
			КонецЕсли;
			
			// История выполнения задачи.
			КонтекстВыполненияЗадачи = РегистрыСведений.ИсторияЗадач.КонтекстВыполнения();
			КонтекстВыполненияЗадачи.Исполнитель = ДействиеЗадачиОбъект.Исполнитель;
			КонтекстВыполненияЗадачи.ПлановыйИсполнитель = ПлановыйИсполнитель;
			КонтекстВыполненияЗадачи.ОснованиеФактическогоИсполнителя = ОснованиеФактическогоИсполнителя;
			КонтекстВыполненияЗадачи.ТекстРезультатаВыполнения = ДействиеЗадачиОбъект.РезультатДействияТекстом;
			КонтекстВыполненияЗадачи.ПриложенияРезультатаВыполнения = СлепокПриложенийРезультата(ДействиеЗадачи);
			КонтекстВыполненияЗадачи.РезультатДействия = РезультатДействия;
			КонтекстВыполненияЗадачи.ФактическийИсполнитель = ФактИсполнительПолный;
			
			РегистрыСведений.ИсторияЗадач.Добавить(
				ДействиеЗадачиОбъект.Задача,
				ДействиеЗадачиОбъект.Ссылка,
				ТекущаяДатаСеанса(),
				Справочники.СобытияЗадач.Выполнение,
				КонтекстВыполненияЗадачи,
				ТекущийПользователь);

			ДействиеЗадачиОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			ФактИсполнительПолныйДляПротокола = ФактИсполнительПолный;
			Если  Не ЗначениеЗаполнено(ФактИсполнительПолныйДляПротокола) Тогда
				ФактИсполнительПолныйДляПротокола = ДействиеЗадачиОбъект.Исполнитель;
			КонецЕсли;
			ОписаниеВПротокол = СтрШаблон(
				НСтр("ru = 'Выполнение задачи участника %1'"),
				ФактИсполнительПолныйДляПротокола);
			ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(ДействиеЗадачиОбъект.Задача, ОписаниеВПротокол);
			
		Иначе // если уже выполнено в ИнтеграцияЗадач.ОбработатьВыполнениеДействияЗадачи(		

			ФактИсполнительПолныйДляПротокола = ПараметрыВыполнения.ФактическиеИсполнителиПолные[ДействиеЗадачи];
			Если Не ЗначениеЗаполнено(ФактИсполнительПолныйДляПротокола) Тогда
				ФактИсполнительПолныйДляПротокола = "";
			КонецЕсли;
			ОписаниеВПротокол = СтрШаблон(
				НСтр("ru = 'Выполнение задачи участника %1'"),
				ФактИсполнительПолныйДляПротокола);
			Задача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеЗадачи, "Задача");
			ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(Задача, ОписаниеВПротокол);
				
		КонецЕсли;
		
		Если ПараметрыВыполнения.ЗакрыватьПодзадачи = Истина Тогда
			ЗакрытьПодзадачи(ДействиеЗадачи);
		КонецЕсли;
		
		ИсторияРаботыПользователя.Добавить(ДействиеЗадачи);
		
		ИнтеграцияЗадач.ПриВыполненииДействияЗадачи(ДействиеЗадачи);
		
		РаботаСВнешнимПодписанием.ПриВыполненииДействияЗадачи(ДействиеЗадачи, РезультатДействия,
			КтоОтметил, ПараметрыВыполнения);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Возвращает границу истечения срока.
// 
// Возвращаемое значение:
// 	Дата - Граница истечения срока.
Функция ГраницаИстеченияСрока() Экспорт
	
	КоличествоДнейИстекает = 3;
	КоличествоСекундВДне = 86400;
	ГраницаИстеченияСрока = НачалоДня(ТекущаяДатаСеанса()) + КоличествоДнейИстекает * КоличествоСекундВДне; 
	
	Возврат ГраницаИстеченияСрока;
	
КонецФункции

// Возвращает данные набора состояний.
//
// Параметры:
//  ВидЗадачи - СправочникСсылка.ВидыЗадач
// 
// Возвращаемое значение:
//  См. Справочники.НаборыСостоянийЗадач.ДанныеНабораСостояний
//
Функция ДанныеНабораСостояний(ВидЗадачи) Экспорт
	
	НаборСостояний = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидЗадачи, "НаборСостояний");
	
	Возврат Справочники.НаборыСостоянийЗадач.ДанныеНабораСостояний(НаборСостояний);
	
КонецФункции

// Формирует структуру данных приложения задачи.
// 
// Возвращаемое значение:
//  Структура - Данные приложения задачи:
//   * Приложение - ОпределяемыйТип.ПриложениеЗадач
//                - Неопределено
//   * ИмяПредмета - СправочникСсылка.ИменаПредметов
//   * РольПредмета - ПеречислениеСсылка.РолиПредметов
//   * Представление - Строка
//   * ОбязательноеЗаполнение - Булево
//
Функция ДанныеПриложенияЗадачи() Экспорт
	
	ДанныеПриложенияЗадачи = Новый Структура;
	ДанныеПриложенияЗадачи.Вставить("Приложение", Неопределено);
	ДанныеПриложенияЗадачи.Вставить("ИмяПредмета", Справочники.ИменаПредметов.ПустаяСсылка());
	ДанныеПриложенияЗадачи.Вставить("РольПредмета", Перечисления.РолиПредметов.ПустаяСсылка());
	ДанныеПриложенияЗадачи.Вставить("Представление", "");
	ДанныеПриложенияЗадачи.Вставить("ОбязательноеЗаполнение", Ложь);
	
	Возврат ДанныеПриложенияЗадачи;
	
КонецФункции

// Добавляет приложение задачи.
//
// Параметры:
//  Действие - ДокументСсылка.ДействиеЗадачи.
//  Приложения - Массив из ОпределяемыйТип.ПриложениеЗадач.
//  КтоОтметил - СправочникСсылка.Сотрудники.
//  ВзятьВРаботуАвтоматически - Булево.
//  
// Возвращаемое значение:
//  Структура - Результат добавления приложения:
//   * НужноВыбратьФактическогоИсполнителя - Булево.
//
Функция ДобавитьПриложения(Действие, Приложения, КтоОтметил, ВзятьВРаботуАвтоматически) Экспорт
	
	РезультатДобавленияПриложения = Новый Структура;
	РезультатДобавленияПриложения.Вставить("НужноВыбратьФактическогоИсполнителя", Ложь);
	
	Если Приложения.Количество() = 0 Тогда
		Возврат РезультатДобавленияПриложения;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ДействиеЗадачи");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Действие);
		Блокировка.Заблокировать();
		
		ДействиеОбъект = Действие.ПолучитьОбъект();
		
		ОписаниеТиповПриложений =
			Метаданные.Документы.ДействиеЗадачи.ТабличныеЧасти.Приложения.Реквизиты.Приложение.Тип;
		Для Каждого Приложение Из Приложения Цикл
			
			Если Не ЗначениеЗаполнено(Приложение) Тогда
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Не указано приложение %1 (%2).'"),
					Приложение,
					ТипЗнч(Приложение));
			КонецЕсли;
			
			Если Не ОписаниеТиповПриложений.СодержитТип(ТипЗнч(Приложение)) Тогда
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Не поддерживается тип приложения %1 (%2).'"),
					Приложение,
					ТипЗнч(Приложение));
			КонецЕсли;
			
			Если ДействиеОбъект.Приложения.Найти(Приложение, "Приложение") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаПриложения = ДействиеОбъект.Приложения.Добавить();
			СтрокаПриложения.Приложение = Приложение;
			
		КонецЦикла;
		
		ДействиеОбъект.Записать();
		
		ВидСостоянияУчастниковЗадач = РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(
			ДействиеОбъект.СостояниеУчастникаЗадачи);
		Если ВзятьВРаботуАвтоматически
			И Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоНовоеДействие(ВидСостоянияУчастниковЗадач) Тогда
			РезультатВзятияВРаботу = ВзятьВРаботу(
				Действие,
				КтоОтметил);
			РезультатДобавленияПриложения.НужноВыбратьФактическогоИсполнителя =
				РезультатВзятияВРаботу.НужноВыбратьФактическогоИсполнителя;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат РезультатДобавленияПриложения;
	
КонецФункции

// Добавляет запись в историю задач.
//
// Параметры:
//  ИсточникЗадачи - ОпределяемыйТип.ИсточникЗадач.
//  ИсточникДействияЗадачи - ОпределяемыйТип.ИсточникДействийЗадач.
//  Дата - Дата.
//  Событие - СправочникСсылка.СобытияЗадач.
//  Контекст - Произвольный.
//  Пользователь - СправочникСсылка.Пользователи.
//
Процедура ДобавитьВИсториюПоИсточнику(ИсточникЗадачи, ИсточникДействияЗадачи, Дата, Событие, Контекст, Пользователь) Экспорт
	
	Если ПараметрыСеанса.ЗагрузкаОбработанныхДанныхИзДругойСистемы Тогда
		Возврат;
	КонецЕсли;
	
	Задача = Документы.Задача.НайтиПоИсточнику(ИсточникЗадачи);
	Если Не ЗначениеЗаполнено(Задача) Тогда
		
		ИнтеграцияЗадач.ОбновитьЗадачуПоИсточнику(ИсточникЗадачи);
		Задача = Документы.Задача.НайтиПоИсточнику(ИсточникЗадачи);
		Если Не ЗначениеЗаполнено(Задача) Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Не найдена задача по источнику %1 (%2)'"),
				ИсточникЗадачи,
				ТипЗнч(ИсточникЗадачи));
		КонецЕсли;
		
	КонецЕсли;
	
	ДействиеЗадачи = Документы.ДействиеЗадачи.НайтиПоИсточнику(ИсточникДействияЗадачи);
	
	РегистрыСведений.ИсторияЗадач.Добавить(
		Задача,
		ДействиеЗадачи,
		Дата,
		Событие,
		Контекст,
		Пользователь);
	
КонецПроцедуры

// Определяет доступность команды по задачам.
// 
// Параметры:
//  МассивЗадач - Массив из ДокументСсылка.Задача
//  Команда - ОбъектМетаданных
// 
// Возвращаемое значение:
//  см. РаботаСЗадачами.НовыеДанныеДоступностиКоманды
// 
Функция ДанныеДоступностиКомандыЗадач(МассивЗадач, Команда) Экспорт
	
	ДанныеДоступностиКомандЗадач = ДанныеДоступностиКомандЗадач(МассивЗадач);
	ЗначениеСоответствия = ДанныеДоступностиКомандЗадач[Команда];
	Если ТипЗнч(ЗначениеСоответствия) = Тип("Структура") Тогда
		ДанныеДоступностиКомандыЗадач = ЗначениеСоответствия; // см. РаботаСЗадачами.НовыеДанныеДоступностиКоманды
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Невозможно определить данные доступности команды %1'"),
			Команда);
	КонецЕсли;
	
	Возврат ДанныеДоступностиКомандыЗадач;
	
КонецФункции

// Определяет доступность команд по задачам.
// 
// Параметры:
//  МассивЗадач - Массив из ДокументСсылка.Задача.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - Данные доступности команд задач:
//   * Ключ - ОбъектМетаданных
//   * Значение - см. РаботаСЗадачами.НовыеДанныеДоступностиКоманды
//  
Функция ДанныеДоступностиКомандЗадач(МассивЗадач) Экспорт
	
	ДанныеДоступностиКоманд = Новый Соответствие;
	
	РеквизитыЗадач = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		МассивЗадач,
		"ВидЗадачи, Источник, СостояниеЗадачи");
	
	// Закрыть.
	ДанныеДоступностиКоманды = НовыеДанныеДоступностиКоманды();
	ДанныеДоступностиКоманды.Команда = Метаданные.Документы.Задача.Команды.Закрыть;
	ДанныеДоступностиКоманды.ПодходящиеЗадачи = Новый Массив;
	
	Для Каждого Задача Из МассивЗадач Цикл
		
		РеквизитыЗадачи = РеквизитыЗадач[Задача];
		Если РеквизитыЗадачи = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВидСостоянияЗадачи = РаботаСЗадачамиПовтИсп.ВидСостоянияЗадач(
			РеквизитыЗадачи.СостояниеЗадачи);
		
		Если Перечисления.ВидыСостоянийЗадач.ЭтоЧерновик(ВидСостоянияЗадачи)
			Или Перечисления.ВидыСостоянийЗадач.ЭтоВыполненнаяЗадача(ВидСостоянияЗадачи)
			Или ЗначениеЗаполнено(РеквизитыЗадачи.Источник) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДоступностиКоманды.ПодходящиеЗадачи.Добавить(Задача);
		
	КонецЦикла;
	
	ДанныеДоступностиКоманды.Доступность =
		ДанныеДоступностиКоманды.ПодходящиеЗадачи.Количество() > 0;
	ДанныеДоступностиКоманд[ДанныеДоступностиКоманды.Команда] = ДанныеДоступностиКоманды;
	
	// Вернуть на доработку.
	ДанныеДоступностиКоманды = НовыеДанныеДоступностиКоманды();
	ДанныеДоступностиКоманды.Команда = Метаданные.Документы.Задача.Команды.ВернутьНаДоработку;
	ДанныеДоступностиКоманды.ПодходящиеЗадачи = Новый Массив;
	
	Для Каждого Задача Из МассивЗадач Цикл
		
		РеквизитыЗадачи = РеквизитыЗадач[Задача];
		Если РеквизитыЗадачи = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(РеквизитыЗадачи.ВидЗадачи);
		Если Не ЗначениеЗаполнено(ДанныеВидаЗадачи.ВидУчастникаПроверяющий) Тогда
			Продолжить;
		КонецЕсли;
		
		ВидСостоянияЗадачи = РаботаСЗадачамиПовтИсп.ВидСостоянияЗадач(
			РеквизитыЗадачи.СостояниеЗадачи);
		
		Если Перечисления.ВидыСостоянийЗадач.ЭтоЧерновик(ВидСостоянияЗадачи)
			Или Перечисления.ВидыСостоянийЗадач.ЭтоНоваяЗадача(ВидСостоянияЗадачи)
			Или Перечисления.ВидыСостоянийЗадач.ЭтоЗадачаВРаботе(ВидСостоянияЗадачи)
			Или ЗначениеЗаполнено(РеквизитыЗадачи.Источник) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДоступностиКоманды.ПодходящиеЗадачи.Добавить(Задача);
		
	КонецЦикла;
	
	ДанныеДоступностиКоманды.Доступность =
		ДанныеДоступностиКоманды.ПодходящиеЗадачи.Количество() > 0;
	ДанныеДоступностиКоманд[ДанныеДоступностиКоманды.Команда] = ДанныеДоступностиКоманды;
	
	// Отменить.
	ДанныеДоступностиКоманды = НовыеДанныеДоступностиКоманды();
	ДанныеДоступностиКоманды.Команда = Метаданные.Документы.Задача.Команды.Отменить;
	ДанныеДоступностиКоманды.ПодходящиеЗадачи = Новый Массив;
	
	ОграничиватьДоступностьПолейПоСостоянию =
		ПолучитьФункциональнуюОпцию("ОграничиватьДоступностьПолейПоСостоянию") 
		И ПолучитьФункциональнуюОпцию("ИспользоватьСостоянияДокументов")
		И Не Пользователи.ЭтоПолноправныйПользователь();
	
	Для Каждого Задача Из МассивЗадач Цикл
		
		РеквизитыЗадачи = РеквизитыЗадач[Задача];
		Если РеквизитыЗадачи = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВидСостоянияЗадачи = РаботаСЗадачамиПовтИсп.ВидСостоянияЗадач(
			РеквизитыЗадачи.СостояниеЗадачи);
		
		Если ЗначениеЗаполнено(РеквизитыЗадачи.Источник)
			И (Перечисления.ВидыСостоянийЗадач.ЭтоЧерновик(ВидСостоянияЗадачи)
				Или Перечисления.ВидыСостоянийЗадач.ЭтоВыполненнаяЗадача(ВидСостоянияЗадачи)) Тогда
			Продолжить;
		ИначеЕсли Не ЗначениеЗаполнено(РеквизитыЗадачи.Источник)
			И (Перечисления.ВидыСостоянийЗадач.ЭтоЧерновик(ВидСостоянияЗадачи)
				Или Перечисления.ВидыСостоянийЗадач.ЭтоОтмененнаяЗадача(ВидСостоянияЗадачи)) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыЗадачи.Источник) И ОграничиватьДоступностьПолейПоСостоянию Тогда
			
			ДействиеОбработки = Справочники.ДействияИсполнения.ПустаяСсылка();
			Если БизнесПроцессыИЗадачиСервер.ЭтоПроцессИлиШаблонПроцесса(РеквизитыЗадачи.Источник)Тогда
				ДействиеОбработки = РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(
					РеквизитыЗадачи.Источник);
			ИначеЕсли ТипЗнч(РеквизитыЗадачи.Источник) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
				ДействиеОбработки = РеквизитыЗадачи.Источник;
			КонецЕсли;
			
			ПредметДействия = Справочники.ДокументыПредприятия.ПустаяСсылка();
			Если ЗначениеЗаполнено(ДействиеОбработки) Тогда
				ПредметДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеОбработки, "Предмет");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПредметДействия)
				И ДелопроизводствоКлиентСервер.ЭтоДокумент(ПредметДействия) Тогда
				
				ДоступныеПоля = Новый Массив;
				НедоступныеПоля = Новый Массив;
				
				Делопроизводство.ПолучитьДоступныеИНедоступныеПоСостояниюПоля(
					ПредметДействия.ПолучитьОбъект(), 
					ДоступныеПоля,
					НедоступныеПоля);
					
				ДоступноОтменятьЗадачу = НедоступныеПоля.Найти("Обработка") = Неопределено;
				
				Если Не ДоступноОтменятьЗадачу Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеДоступностиКоманды.ПодходящиеЗадачи.Добавить(Задача);
		
	КонецЦикла;
	
	ДанныеДоступностиКоманды.Доступность =
		ДанныеДоступностиКоманды.ПодходящиеЗадачи.Количество() > 0;
	ДанныеДоступностиКоманд[ДанныеДоступностиКоманды.Команда] = ДанныеДоступностиКоманды;
	
	Возврат ДанныеДоступностиКоманд;
	
КонецФункции

// Обновляет дерево соисполнителей.
//
// Параметры:
//   Задача - ДокументСсылка.Задача.
//   ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи - текущее действие задачи.
//                  - СтрокаТаблицыЗначений - см. ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗапросСОтборами
//   КлючНазначения - Строка - Ключ назначения. "Дерево" или "ОписаниеHTML", "ОписаниеПростойТекст".
//   КешДанных - Структура - кеш данных, который требуется для ускорения работы различных механизмов.
//
// Возвращаемое значение:
//   см. РаботаСЗадачамиКлиентСервер.НовыйДанныеСоисполнителей
//
Функция ДанныеСоисполнителей(Задача, ДействиеЗадачи, КлючНазначения, КешДанных = Неопределено) Экспорт
	
	ДанныеСоисполнителей = РаботаСЗадачамиКлиентСервер.НовыйДанныеСоисполнителей();
	Если Не ЗначениеЗаполнено(Задача) Тогда
		Возврат ДанныеСоисполнителей;
	КонецЕсли;
	
	Если ТипЗнч(ДействиеЗадачи) = Тип("СтрокаТаблицыЗначений") Тогда
		ДействиеЗадачиСсылка = ДействиеЗадачи.Ссылка;
	Иначе
		ДействиеЗадачиСсылка = ДействиеЗадачи;
	КонецЕсли;
	
	ПраваПоОбъекту = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(Задача,, КешДанных);
	Если Не ПраваПоОбъекту.Чтение Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Не достаточно прав для просмотра данных о соисполнителях по задаче %1.'"),
			ДействиеЗадачиСсылка);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если КлючНазначения <> "Дерево"
			И КлючНазначения <> "ОписаниеHTML"
			И КлючНазначения <> "ОписаниеПростойТекст" Тогда
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестный ключ назначения %1.'"),
				КлючНазначения);
	КонецЕсли;
	
	// Рассчитаем вспомогательные данные.
	КэшОбластиПросмотра = КэшиНаВремяВызоваПовтИсп.КэшЗадачаОбластьПросмотра();
	
	Если КэшОбластиПросмотра.Заполнен И КэшОбластиПросмотра.Задача = Задача Тогда
		РеквизитыЗадачи = КэшОбластиПросмотра.ЗадачаОбъект;
		Участники = КэшОбластиПросмотра.ЗадачаОбъект.Участники;
	Иначе
		РеквизитыЗадачи = Неопределено;
		Если КешДанных <> Неопределено И КешДанных.Свойство("ДанныеДокументовЗадача") Тогда
			РеквизитыЗадачи = КешДанных.ДанныеДокументовЗадача[Задача];
		КонецЕсли;
		Если РеквизитыЗадачи = Неопределено Тогда
			РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Задача,
				"Источник, Участники");
		КонецЕсли;
		Участники = РеквизитыЗадачи.Участники.Выгрузить();
		Участники.Сортировать("НомерСтроки Возр");
	КонецЕсли;
	
	ДанныеПодчиненныхУчастников = Новый Соответствие;
	
	ВидДействия = Справочники.ВидыДействийЗадач.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ДействиеЗадачиСсылка) Тогда
		
		КэшОбластиПросмотра = КэшиНаВремяВызоваПовтИсп.КэшЗадачаОбластьПросмотра();
		
		Если КэшОбластиПросмотра.Заполнен И КэшОбластиПросмотра.ДействиеЗадачи = ДействиеЗадачиСсылка Тогда
			РеквизитыДействияЗадачи = КэшОбластиПросмотра.РеквизитыДействияЗадачи;
		ИначеЕсли ТипЗнч(ДействиеЗадачи) = Тип("СтрокаТаблицыЗначений") Тогда
			РеквизитыДействияЗадачи = ДействиеЗадачи;
		Иначе
			РеквизитыДействияЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ДействиеЗадачи,
				"ВидДействия");
		КонецЕсли;
		
		КешНСИЗадач = РаботаСЗадачамиПовтИсп.КешНСИЗадач();
		РеквизитыВидаДействия = КешНСИЗадач.РеквизитыВидовДействий[РеквизитыДействияЗадачи.ВидДействия];
		ВидДействия = РеквизитыДействияЗадачи.ВидДействия;
		
		ДанныеСоисполнителей.Представление = РеквизитыВидаДействия.ТерминСоисполнители;
		
	Иначе
		
		ДанныеСоисполнителей.Представление =
			Метаданные.Документы.Задача.ТабличныеЧасти.Участники.Синоним;
		
	КонецЕсли;
	
	РежимОтображения = "Автор";
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если СтрокаУчастника.ВидУчастника = Справочники.ВидыУчастниковЗадач.ОбеспечивающийПодписание Тогда
			СтрокаУчастника.ВидУчастника = Справочники.ВидыУчастниковЗадач.Подписывающий;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДействиеЗадачиСсылка) Или СтрокаУчастника.ДействиеУчастника <> ДействиеЗадачиСсылка Тогда
			Продолжить;
		КонецЕсли;
		
		Если РаботаСЗадачамиПовтИсп.ЭтоИсполнитель(СтрокаУчастника.ВидУчастника) Тогда
			РежимОтображения = "Исполнитель";
		ИначеЕсли РаботаСЗадачамиПовтИсп.ЭтоПроверяющий(СтрокаУчастника.ВидУчастника) Тогда
			РежимОтображения = "Проверяющий";
		КонецЕсли;
		
	КонецЦикла;
	
	// Для исполнителя в HTML описании не показываем соисполнителей.
	Если РежимОтображения = "Исполнитель" И КлючНазначения = "ОписаниеHTML" Тогда
		Возврат ДанныеСоисполнителей;
	КонецЕсли;
	
	// Для ознакомления при выполнении задач по почте не показываем соисполнителей.
	Если РежимОтображения = "Исполнитель"
		И КлючНазначения = "ОписаниеПростойТекст"
		И ВидДействия = Справочники.ВидыДействийЗадач.Ознакомиться Тогда
		Возврат ДанныеСоисполнителей;
	КонецЕсли;
	
	ДанныеОсобыхУчастников = ИнтеграцияЗадач.ОсобыеУчастникиДляСоисполнителей(
		РежимОтображения,
		РеквизитыЗадачи.Источник);
	Если ДанныеОсобыхУчастников <> Неопределено Тогда
		Участники = ДанныеОсобыхУчастников.Участники;
		ДанныеТекущегоЦикла = ДанныеОсобыхУчастников.ДанныеТекущегоЦикла;
		ДанныеПодчиненныхУчастников = ДанныеОсобыхУчастников.ДанныеПодчиненныхУчастников;
	Иначе
		ДанныеТекущегоЦикла = ИнтеграцияЗадач.ДанныеТекущегоЦикла(РеквизитыЗадачи.Источник);
	КонецЕсли;
	
	ВсеДействия = Новый Массив;
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если ЗначениеЗаполнено(СтрокаУчастника.ДействиеУчастника) Тогда
			ВсеДействия.Добавить(СтрокаУчастника.ДействиеУчастника);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ДанныеПодчиненныхУчастников Цикл
		
		ДанныеПодчиненныхУчастника = КлючИЗначение.Значение;
		
		Для Каждого СтрокаУчастника Из ДанныеПодчиненныхУчастника Цикл
			
			Если ЗначениеЗаполнено(СтрокаУчастника.ДействиеУчастника) Тогда
				ВсеДействия.Добавить(СтрокаУчастника.ДействиеУчастника);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	РеквизитыВсехДействий = Неопределено;
	СписокРеквизитов = "ДатаВыполнения, Исполнитель, Источник, Проведен,
		|ЕстьПриложения, РезультатДействия, РезультатДействияТекстом, ФактическийИсполнитель";
	Если КешДанных <> Неопределено И КешДанных.Свойство("ДанныеДокументовДействиеЗадачи") Тогда
		РеквизитыВсехДействий = КешДанных.ДанныеДокументовДействиеЗадачи;
		НедостающиеДействия = Новый Массив;
		Для Каждого Действие Из ВсеДействия Цикл
			Если РеквизитыВсехДействий[Действие] = Неопределено И НедостающиеДействия.Найти(Действие) = Неопределено Тогда
				НедостающиеДействия.Добавить(Действие);
			КонецЕсли;
		КонецЦикла;
		Если НедостающиеДействия.Количество() > 0 Тогда
			РеквизитыНедостающихДействий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(НедостающиеДействия, СписокРеквизитов);
			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(РеквизитыВсехДействий, РеквизитыНедостающихДействий, Истина);
		КонецЕсли;
	КонецЕсли;
	Если РеквизитыВсехДействий = Неопределено Тогда
		РеквизитыВсехДействий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВсеДействия, СписокРеквизитов);
	КонецЕсли;
	
	ДанныеВсехДействий = ДанныеДействийЗадач(ВсеДействия);
	ДанныеВсехДействий.Индексы.Добавить("ДействиеЗадачи");
	
	ДействияДругихЭтапов = Новый Соответствие;
	ТекущийИсполнительЕдинственный = Истина;
	ВидыУчастников = Новый Массив;
	КоличествоУчастниковПоВидам = Новый Соответствие;
	ОтображаемыеУчастники = Новый Массив;
	ОтображаемыеПодчиненныеУчастников = Новый Соответствие;
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		РеквизитыДействияУчастника = РеквизитыВсехДействий[СтрокаУчастника.ДействиеУчастника];
		
		// Для исполнителя и проверяющего отображаем только исполнителей.
		// Для автора отображаем всех.
		Если (РежимОтображения = "Исполнитель" Или РежимОтображения = "Проверяющий")
			И Не РаботаСЗадачамиПовтИсп.ЭтоИсполнитель(СтрокаУчастника.ВидУчастника) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеТекущегоЦикла <> Неопределено Тогда
			
			ЗадачаПроцессаЭтапа = Неопределено;
			Если ЗначениеЗаполнено(СтрокаУчастника.ВнешнийИдентификатор) Тогда
				ЗадачаПроцессаЭтапа = ДанныеТекущегоЦикла[СтрокаУчастника.ВнешнийИдентификатор];
			КонецЕсли;
			
			// Для "Обрабатывающий результат" и "Ознакомляемый с результатом" требуется чтобы они были этого цикла.
			Если (СтрокаУчастника.ВидУчастника = Справочники.ВидыУчастниковЗадач.ОбрабатывающийРезультат
					Или СтрокаУчастника.ВидУчастника = Справочники.ВидыУчастниковЗадач.ОзнакомляемыйСРезультатом)
				И (РеквизитыДействияУчастника = Неопределено
					Или ЗадачаПроцессаЭтапа = Неопределено
					Или РеквизитыДействияУчастника.Источник <> ЗадачаПроцессаЭтапа) Тогда
				Продолжить;
			КонецЕсли;
			
			// Для ссылки на действие исполнителя требуется чтобы они были этого цикла.
			Если ЗначениеЗаполнено(СтрокаУчастника.ДействиеУчастника)
				И (РеквизитыДействияУчастника = Неопределено
					Или РеквизитыДействияУчастника.Источник <> ЗадачаПроцессаЭтапа) Тогда
				ДействияДругихЭтапов[СтрокаУчастника.ДействиеУчастника] = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДействиеЗадачиСсылка) Или СтрокаУчастника.ДействиеУчастника <> ДействиеЗадачиСсылка Тогда
			ТекущийИсполнительЕдинственный = Ложь;
		КонецЕсли;
		
		ОтображаемыеУчастники.Добавить(СтрокаУчастника);
		
		ВидУчастникаДляЭтапа = СтрокаУчастника.ВидУчастника;
		Если ВидУчастникаДляЭтапа = Справочники.ВидыУчастниковЗадач.Ответственный Тогда
			ВидУчастникаДляЭтапа = Справочники.ВидыУчастниковЗадач.Исполнитель;
		КонецЕсли;
		
		Если ВидыУчастников.Найти(ВидУчастникаДляЭтапа) = Неопределено Тогда
			
			ВидыУчастников.Добавить(ВидУчастникаДляЭтапа);
			
		КонецЕсли;
		
		Если КоличествоУчастниковПоВидам[ВидУчастникаДляЭтапа] = Неопределено Тогда
			КоличествоУчастниковПоВидам[ВидУчастникаДляЭтапа] = 0;
		КонецЕсли;
		КоличествоУчастниковПоВидам[ВидУчастникаДляЭтапа] =
			КоличествоУчастниковПоВидам[ВидУчастникаДляЭтапа] + 1;
		
		ОтображаемыеПодчиненныеУчастника = Новый Массив;
		ДанныеПодчиненныхУчастника = ДанныеПодчиненныхУчастников[СтрокаУчастника.ВнешнийИдентификатор];
		Если ДанныеПодчиненныхУчастника <> Неопределено Тогда
			
			Для Каждого СтрокаПодчиненногоУчастника Из ДанныеПодчиненныхУчастника Цикл
				
				РеквизитыПодчиненногоУчастника = РеквизитыВсехДействий[
					СтрокаПодчиненногоУчастника.ДействиеУчастника];
				
				Если ДанныеТекущегоЦикла <> Неопределено Тогда
					
					ЗадачаПроцессаЭтапа = Неопределено;
					Если ЗначениеЗаполнено(СтрокаПодчиненногоУчастника.ВнешнийИдентификатор) Тогда
						ЗадачаПроцессаЭтапа = ДанныеТекущегоЦикла[СтрокаПодчиненногоУчастника.ВнешнийИдентификатор];
					КонецЕсли;
					
					// Для "Обрабатывающий результат" и "Ознакомляемый с результатом" требуется чтобы они были этого цикла.
					Если (СтрокаПодчиненногоУчастника.ВидУчастника = Справочники.ВидыУчастниковЗадач.ОбрабатывающийРезультат
							Или СтрокаПодчиненногоУчастника.ВидУчастника = Справочники.ВидыУчастниковЗадач.ОзнакомляемыйСРезультатом)
						И (РеквизитыПодчиненногоУчастника = Неопределено
							Или ЗадачаПроцессаЭтапа = Неопределено
							Или РеквизитыДействияУчастника.Источник <> ЗадачаПроцессаЭтапа) Тогда
						Продолжить;
					КонецЕсли;
					
					// Для ссылки на действие исполнителя требуется чтобы они были этого цикла.
					Если ЗначениеЗаполнено(СтрокаПодчиненногоУчастника.ДействиеУчастника)
						И (РеквизитыПодчиненногоУчастника = Неопределено
							Или РеквизитыПодчиненногоУчастника.Источник <> ЗадачаПроцессаЭтапа) Тогда
						ДействияДругихЭтапов[СтрокаПодчиненногоУчастника.ДействиеУчастника] = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ДействиеЗадачиСсылка)
						Или СтрокаПодчиненногоУчастника.ДействиеУчастника <> ДействиеЗадачиСсылка Тогда
					ТекущийИсполнительЕдинственный = Ложь;
				КонецЕсли;
				
				ОтображаемыеПодчиненныеУчастника.Добавить(СтрокаПодчиненногоУчастника);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ОтображаемыеПодчиненныеУчастников[СтрокаУчастника.ВнешнийИдентификатор] = ОтображаемыеПодчиненныеУчастника;
		
	КонецЦикла;
	
	// Определим данные этапов.
	КешНСИЗадач = РаботаСЗадачамиПовтИсп.КешНСИЗадач();
	РеквизитыВидовУчастников = КешНСИЗадач.РеквизитыВидовУчастниковЗадач;
	
	Если (РежимОтображения = "Автор" И КлючНазначения = "Дерево")
		Или КлючНазначения = "ОписаниеHTML"
		Или КлючНазначения = "ОписаниеПростойТекст"
		Или (ДанныеОсобыхУчастников <> Неопределено И ВидыУчастников.Количество() > 1) Тогда
		РежимЭтапов = "ВидыУчастников";
	ИначеЕсли (РежимОтображения = "Исполнитель" Или РежимОтображения = "Проверяющий")
		И КлючНазначения = "Дерево" Тогда
		РежимЭтапов = "БезЭтапов";
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестный способ формирования этапов.'");
	КонецЕсли;
	
	ВнешниеДанныеЭтапов = ИнтеграцияЗадач.ВнешниеДанныеЭтапов(РеквизитыЗадачи.Источник, РежимЭтапов);
	Если ВнешниеДанныеЭтапов.Этапы.Количество() > 0 Тогда
		РежимЭтапов = "ВнешниеЭтапы";
	КонецЕсли;
	
	Если РежимЭтапов = "ВнешниеЭтапы" Тогда
		
		ДанныеСоисполнителей.Этапы = ВнешниеДанныеЭтапов.Этапы;
		Для Каждого ДанныеЭтапа Из ДанныеСоисполнителей.Этапы Цикл
			ДанныеСоисполнителейЭтапа = Новый Массив;
			ДанныеСоисполнителей.СоисполнителиПоЭтапам[ДанныеЭтапа.Этап] = ДанныеСоисполнителейЭтапа;
		КонецЦикла;
		
	ИначеЕсли РежимЭтапов = "БезЭтапов" Тогда
		
		Этап = УникальныйИдентификаторПустой();
		ДанныеСоисполнителейЭтапа = Новый Массив;
		ДанныеСоисполнителей.СоисполнителиПоЭтапам[Этап] = ДанныеСоисполнителейЭтапа;
		
	ИначеЕсли РежимЭтапов = "ВидыУчастников" Тогда
		
		Для Каждого ВидУчастника Из ВидыУчастников Цикл
			
			РеквизитыВидаУчастника = РеквизитыВидовУчастников[ВидУчастника];
			КоличествоУчастниковВида = КоличествоУчастниковПоВидам[ВидУчастника];
			
			ДанныеЭтапа = РаботаСЗадачамиКлиентСервер.НовыйДанныеЭтапа();
			ДанныеЭтапа.Этап = ВидУчастника.УникальныйИдентификатор();
			ДанныеЭтапа.Представление =
				?(КоличествоУчастниковВида > 1,
					РеквизитыВидаУчастника.МножественноеЧисло,
					РеквизитыВидаУчастника.Наименование);
			ДанныеЭтапа.ЭтоИсполнитель =
				РаботаСЗадачамиПовтИсп.ЭтоИсполнитель(ВидУчастника);
			
			ДанныеСоисполнителей.Этапы.Добавить(ДанныеЭтапа);
			
			ДанныеСоисполнителейЭтапа = Новый Массив;
			ДанныеСоисполнителей.СоисполнителиПоЭтапам[ДанныеЭтапа.Этап] =
				ДанныеСоисполнителейЭтапа;
			
		КонецЦикла;
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Неизвестный способ формирования этапов.'");
		
	КонецЕсли;
	
	// Определим данные участников.
	ВсеУчастникиДляОтображения = Новый Массив;
	УчастникиДляОтображения = Новый Соответствие;
	КоличествоЭлементов = ОтображаемыеУчастники.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ОбратныйИндекс = КоличествоЭлементов - Индекс;
		СтрокаУчастника = ОтображаемыеУчастники[ОбратныйИндекс];
		
		РеквизитыДействия = РеквизитыВсехДействий[СтрокаУчастника.ДействиеУчастника];
		
		Если РеквизитыДействия <> Неопределено Тогда
			
			УточнениеИсполнителя = ИнтеграцияЗадач.УточнениеИсполнителя(
				РеквизитыЗадачи.Источник,
				СтрокаУчастника.ВнешнийИдентификатор,
				РеквизитыДействия.Источник);
			Если УточнениеИсполнителя <> Неопределено Тогда
				УчастникДляОтображения = УточнениеИсполнителя.Исполнитель;
			ИначеЕсли ЗначениеЗаполнено(РеквизитыДействия.ФактическийИсполнитель)
				И ДействияДругихЭтапов[СтрокаУчастника.ДействиеУчастника] <> Истина Тогда
				УчастникДляОтображения = РеквизитыДействия.ФактическийИсполнитель;
			Иначе
				УчастникДляОтображения = РеквизитыДействия.Исполнитель;
			КонецЕсли;
			
		Иначе
			
			УчастникДляОтображения = СтрокаУчастника.Участник;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(УчастникДляОтображения) Тогда
			ОтображаемыеУчастники.Удалить(ОбратныйИндекс);
			Продолжить;
		КонецЕсли;
		
		УчастникиДляОтображения.Вставить(
			СтрокаУчастника.ДействиеУчастника,
			УчастникДляОтображения);
		ВсеУчастникиДляОтображения.Добавить(УчастникДляОтображения);
		
	КонецЦикла;
	
	ПредставленияУчастников = Новый Соответствие;
	РеквизитыУчастников = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ВсеУчастникиДляОтображения, "Представление");
	Для Каждого КлючИЗначение Из УчастникиДляОтображения Цикл
		
		ДействиеУчастника = КлючИЗначение.Ключ;
		УчастникДляОтображения = КлючИЗначение.Значение;
		
		РеквизитыУчастника = РеквизитыУчастников.Получить(УчастникДляОтображения);
		Если РеквизитыУчастника <> Неопределено Тогда
			ПредставлениеУчастника = РеквизитыУчастника.Представление;
		Иначе
			ПредставлениеУчастника = Строка(УчастникДляОтображения);
		КонецЕсли;
		ПредставленияУчастников.Вставить(ДействиеУчастника, ПредставлениеУчастника);
		
	КонецЦикла;
	
	Для Каждого СтрокаУчастника Из ОтображаемыеУчастники Цикл
		
		ВидУчастникаДляЭтапа = СтрокаУчастника.ВидУчастника;
		Если ВидУчастникаДляЭтапа = Справочники.ВидыУчастниковЗадач.Ответственный Тогда
			ВидУчастникаДляЭтапа = Справочники.ВидыУчастниковЗадач.Исполнитель;
		КонецЕсли;
		
		ДанныеСоисполнителя = РаботаСЗадачамиКлиентСервер.НовыйДанныеСоисполнителя();
		
		ДанныеСоисполнителя.КлючИсполнителя =
			?(ЗначениеЗаполнено(СтрокаУчастника.ДействиеУчастника),
				СтрокаУчастника.ДействиеУчастника,
				СтрокаУчастника.ВнешнийИдентификатор);
		ДанныеСоисполнителя.ЭтоОтветственный =
			РаботаСЗадачамиПовтИсп.ЭтоОтветственный(СтрокаУчастника.ВидУчастника);
		
		МассивПредставлениеРезультата = Новый Массив;
		
		РеквизитыДействия = РеквизитыВсехДействий[СтрокаУчастника.ДействиеУчастника];
		ДанныеДействия = ДанныеВсехДействий.Найти(
			СтрокаУчастника.ДействиеУчастника,
			"ДействиеЗадачи");
		
		ПредставлениеУчастника = ПредставленияУчастников[СтрокаУчастника.ДействиеУчастника];
		
		МассивПредставлениеРезультата.Добавить(ПредставлениеУчастника);
		
		Если РеквизитыДействия <> Неопределено
			И ДанныеДействия <> Неопределено
			И ДействияДругихЭтапов[СтрокаУчастника.ДействиеУчастника] <> Истина
			И РеквизитыДействия.Проведен Тогда
			
			ДанныеСоисполнителя.ДействиеЗадачи = СтрокаУчастника.ДействиеУчастника;
			ДанныеСоисполнителя.РезультатДействия = РеквизитыДействия.РезультатДействия;
			ДанныеСоисполнителя.ХарактерРезультата =
				РаботаСЗадачамиПовтИсп.ХарактерРезультата(РеквизитыДействия.РезультатДействия);
			
			Если ЗначениеЗаполнено(РеквизитыДействия.РезультатДействия) Тогда
				
				ДанныеСоисполнителя.ИндексКартинкиСостояния =
					Перечисления.ХарактерыРезультатов.ИндексКартинкиСостояния(
						ДанныеСоисполнителя.ХарактерРезультата);
				
			Иначе
				
				ДанныеСоисполнителя.ИндексКартинкиСостояния = 
					Перечисления.ВидыСостоянийУчастниковЗадач.ИндексКартинкиСостояния(
						ДанныеДействия.ВидСостоянияУчастниковЗадач);
				
			КонецЕсли;
			Если ДанныеСоисполнителя.ИндексКартинкиСостояния = -1 Тогда
				ДанныеСоисполнителя.ИндексКартинкиСостояния = 1;
			КонецЕсли;
			
			ДанныеСоисполнителя.ЕстьПриложения = РеквизитыДействия.ЕстьПриложения;
			
			Если ЗначениеЗаполнено(РеквизитыДействия.РезультатДействия) Тогда
				
				ПредставлениеРезультата =
					СтрШаблон(
						", %1 (%2)",
						Строка(РеквизитыДействия.РезультатДействия),
						Формат(
							РеквизитыДействия.ДатаВыполнения,
							Метаданные.Документы.ДействиеЗадачи.Реквизиты.ДатаВыполнения));
				
				МассивПредставлениеРезультата.Добавить(ПредставлениеРезультата);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитыДействия.РезультатДействияТекстом) Тогда
				
				ПредставлениеРезультата =
					СтрШаблон(
						", %1",
						Строка(РеквизитыДействия.РезультатДействияТекстом));
				
				МассивПредставлениеРезультата.Добавить(ПредставлениеРезультата);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеСоисполнителя.Представление = СтрСоединить(МассивПредставлениеРезультата, "");
		
		Если РежимЭтапов = "ВнешниеЭтапы" Тогда
			
			Этап = ВнешниеДанныеЭтапов.ЭтапыУчастников[СтрокаУчастника.ВнешнийИдентификатор];
			
		ИначеЕсли РежимЭтапов = "БезЭтапов" Тогда
			
			Этап = УникальныйИдентификаторПустой();
			
		ИначеЕсли РежимЭтапов = "ВидыУчастников" Тогда
			
			Этап = ВидУчастникаДляЭтапа.УникальныйИдентификатор()
			
		Иначе
			
			ВызватьИсключение НСтр("ru = 'Неизвестный способ формирования этапов.'");
			
		КонецЕсли;
		
		ОтображаемыеПодчиненныеУчастника = 
			ОтображаемыеПодчиненныеУчастников[СтрокаУчастника.ВнешнийИдентификатор];
		Для Каждого СтрокаПодчиненногоУчастника Из ОтображаемыеПодчиненныеУчастника Цикл
			
			ДанныеПодчиненного = РаботаСЗадачамиКлиентСервер.НовыйДанныеСоисполнителя();
			
			ДанныеПодчиненного.КлючИсполнителя =
				?(ЗначениеЗаполнено(СтрокаПодчиненногоУчастника.ДействиеУчастника),
					СтрокаПодчиненногоУчастника.ДействиеУчастника,
					СтрокаПодчиненногоУчастника.ВнешнийИдентификатор);
			ДанныеПодчиненного.ЭтоОтветственный =
				РаботаСЗадачамиПовтИсп.ЭтоОтветственный(СтрокаПодчиненногоУчастника.ВидУчастника);
			
			МассивПредставлениеРезультата = Новый Массив;
			
			РеквизитыПодчиненногоДействия = РеквизитыВсехДействий[СтрокаПодчиненногоУчастника.ДействиеУчастника];
			ДанныеПодчиненногоДействия = ДанныеВсехДействий.Найти(
				СтрокаПодчиненногоУчастника.ДействиеУчастника,
				"ДействиеЗадачи");
				
			Если РеквизитыПодчиненногоДействия <> Неопределено Тогда
				
				УточнениеИсполнителя = ИнтеграцияЗадач.УточнениеИсполнителя(
					РеквизитыЗадачи.Источник,
					СтрокаПодчиненногоУчастника.ВнешнийИдентификатор,
					РеквизитыПодчиненногоДействия.Источник);
				Если УточнениеИсполнителя <> Неопределено Тогда
					УчастникДляОтображения = УточнениеИсполнителя.Исполнитель;
				ИначеЕсли ЗначениеЗаполнено(РеквизитыПодчиненногоДействия.ФактическийИсполнитель)
					И ДействияДругихЭтапов[СтрокаПодчиненногоУчастника.ДействиеУчастника] <> Истина Тогда
					УчастникДляОтображения = РеквизитыПодчиненногоДействия.ФактическийИсполнитель;
				Иначе
					УчастникДляОтображения = РеквизитыПодчиненногоДействия.Исполнитель;
				КонецЕсли;
				ПредставлениеУчастника = УчастникДляОтображения;
				
			Иначе
				
				ПредставлениеУчастника = СтрокаПодчиненногоУчастника.Участник;
				
			КонецЕсли;
			
			Если СтрокаПодчиненногоУчастника.ВидУчастника = Справочники.ВидыУчастниковЗадач.Ответственный
				И ОтображаемыеПодчиненныеУчастника.Количество() > 1 Тогда
				
				ПредставлениеУчастника =
					СтрШаблон(
						"%1 (%2)",
						ПредставлениеУчастника,
						НСтр("ru = 'отв.'"));
				
			ИначеЕсли СтрокаПодчиненногоУчастника.ВидУчастника = Справочники.ВидыУчастниковЗадач.Проверяющий Тогда
				
				ПредставлениеУчастника =
					СтрШаблон(
						"%1 (%2)",
						ПредставлениеУчастника,
						НСтр("ru = 'проверяющий'"));
				
			КонецЕсли;
			
			МассивПредставлениеРезультата.Добавить(ПредставлениеУчастника);
			
			Если РеквизитыПодчиненногоДействия <> Неопределено
				И ДанныеПодчиненногоДействия <> Неопределено
				И ДействияДругихЭтапов[СтрокаПодчиненногоУчастника.ДействиеУчастника] <> Истина
				И РеквизитыПодчиненногоДействия.Проведен Тогда
				
				ДанныеПодчиненного.ДействиеЗадачи = СтрокаПодчиненногоУчастника.ДействиеУчастника;
				ДанныеПодчиненного.РезультатДействия = РеквизитыПодчиненногоДействия.РезультатДействия;
				ДанныеПодчиненного.ХарактерРезультата =
					РаботаСЗадачамиПовтИсп.ХарактерРезультата(РеквизитыПодчиненногоДействия.РезультатДействия);
				
				Если ЗначениеЗаполнено(РеквизитыДействия.РезультатДействия) Тогда
					
					ДанныеПодчиненного.ИндексКартинкиСостояния =
						Перечисления.ХарактерыРезультатов.ИндексКартинкиСостояния(
							ДанныеПодчиненного.ХарактерРезультата);
					
				Иначе
					
					ДанныеПодчиненного.ИндексКартинкиСостояния = 
						Перечисления.ВидыСостоянийУчастниковЗадач.ИндексКартинкиСостояния(
							ДанныеПодчиненногоДействия.ВидСостоянияУчастниковЗадач);
					
				КонецЕсли;
				Если ДанныеПодчиненного.ИндексКартинкиСостояния = -1 Тогда
					ДанныеПодчиненного.ИндексКартинкиСостояния = 1;
				КонецЕсли;
				
				ДанныеПодчиненного.ЕстьПриложения = РеквизитыПодчиненногоДействия.ЕстьПриложения;
				
				Если ЗначениеЗаполнено(РеквизитыПодчиненногоДействия.РезультатДействия) Тогда
					
					ПредставлениеРезультата =
						СтрШаблон(
							", %1 (%2)",
							Строка(РеквизитыПодчиненногоДействия.РезультатДействия),
							Формат(
								РеквизитыПодчиненногоДействия.ДатаВыполнения,
								Метаданные.Документы.ДействиеЗадачи.Реквизиты.ДатаВыполнения));
					
					МассивПредставлениеРезультата.Добавить(ПредставлениеРезультата);
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(РеквизитыПодчиненногоДействия.РезультатДействияТекстом) Тогда
					
					ПредставлениеРезультата =
						СтрШаблон(
							", %1",
							Строка(РеквизитыПодчиненногоДействия.РезультатДействияТекстом));
					
					МассивПредставлениеРезультата.Добавить(ПредставлениеРезультата);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ДанныеПодчиненного.Представление = СтрСоединить(МассивПредставлениеРезультата, "");
			
			ДанныеСоисполнителя.ДанныеПодчиненных.Добавить(ДанныеПодчиненного);
			
		КонецЦикла;
		
		ДанныеСоисполнителейЭтапа = ДанныеСоисполнителей.СоисполнителиПоЭтапам[Этап];
		Если ДанныеСоисполнителейЭтапа = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеСоисполнителейЭтапа.Добавить(ДанныеСоисполнителя);
		
	КонецЦикла;
	
	// Рассчитаем итоги этапов.
	ХарактерОбщегоРезультата = Неопределено;
	ПредставлениеОбщегоРезультата = Неопределено;
	Для Каждого ДанныеЭтапа Из ДанныеСоисполнителей.Этапы Цикл
		
		ДанныеЭтапа.ИндексКартинкиСостояния = Неопределено;
		
		ДанныеСоисполнителейЭтапа = ДанныеСоисполнителей.СоисполнителиПоЭтапам[ДанныеЭтапа.Этап];
		
		Для Каждого ДанныеСоисполнителя Из ДанныеСоисполнителейЭтапа Цикл
			
			Если ДанныеЭтапа.ИндексКартинкиСостояния = Неопределено Тогда
				ДанныеЭтапа.ИндексКартинкиСостояния =
					ДанныеСоисполнителя.ИндексКартинкиСостояния;
			Иначе
				ДанныеЭтапа.ИндексКартинкиСостояния = Мин(
					ДанныеЭтапа.ИндексКартинкиСостояния,
					ДанныеСоисполнителя.ИндексКартинкиСостояния);
			КонецЕсли;
			
			Если ДанныеЭтапа.ЭтоИсполнитель
				И ЗначениеЗаполнено(ДанныеСоисполнителя.РезультатДействия) Тогда
				
				Если ХарактерОбщегоРезультата = Неопределено Тогда
					
					ХарактерОбщегоРезультата = ДанныеСоисполнителя.ХарактерРезультата;
					ПредставлениеОбщегоРезультата = Строка(ДанныеСоисполнителя.РезультатДействия);
					
				ИначеЕсли ХарактерОбщегоРезультата = Перечисления.ХарактерыРезультатов.Положительный
					И (ДанныеСоисполнителя.ХарактерРезультата = Перечисления.ХарактерыРезультатов.ПоложительныйСЗамечаниями
						Или ДанныеСоисполнителя.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Отрицательный) Тогда
					
					ХарактерОбщегоРезультата = ДанныеСоисполнителя.ХарактерРезультата;
					ПредставлениеОбщегоРезультата = Строка(ДанныеСоисполнителя.РезультатДействия);
					
				ИначеЕсли ХарактерОбщегоРезультата = Перечисления.ХарактерыРезультатов.ПоложительныйСЗамечаниями
					И ДанныеСоисполнителя.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Отрицательный Тогда
					
					ХарактерОбщегоРезультата = ДанныеСоисполнителя.ХарактерРезультата;
					ПредставлениеОбщегоРезультата = Строка(ДанныеСоисполнителя.РезультатДействия);
					
				КонецЕсли;
				
			ИначеЕсли ДанныеЭтапа.ЭтоИсполнитель
				И Не ЗначениеЗаполнено(ДанныеСоисполнителя.РезультатДействия) Тогда
				
				ХарактерОбщегоРезультата = Перечисления.ХарактерыРезультатов.ПустаяСсылка();
				ПредставлениеОбщегоРезультата = "";
				
			КонецЕсли;
			
			Для Каждого ДанныеПодчиненного Из ДанныеСоисполнителя.ДанныеПодчиненных Цикл
				
				ДанныеЭтапа.ИндексКартинкиСостояния = Мин(
					ДанныеЭтапа.ИндексКартинкиСостояния,
					ДанныеПодчиненного.ИндексКартинкиСостояния);
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если ДанныеЭтапа.ИндексКартинкиСостояния = Неопределено Тогда
			ДанныеЭтапа.ИндексКартинкиСостояния = -1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ХарактерОбщегоРезультата = Неопределено Тогда
		ХарактерОбщегоРезультата = Перечисления.ХарактерыРезультатов.ПустаяСсылка();
	КонецЕсли;
	
	Если ПредставлениеОбщегоРезультата = Неопределено Тогда
		ПредставлениеОбщегоРезультата = "";
	КонецЕсли;
	
	// Для проверяющего и автора:
	// - Одного участника на этап показываем в HTML описании.
	// - Более одного участника на этап показываем в дереве, а в HTML описании результат общий.
	ТолькоОдинУчастникНаЭтап = Истина;
	Для Каждого КлючИЗначение Из ДанныеСоисполнителей.СоисполнителиПоЭтапам Цикл
		
		ДанныеСоисполнителейЭтапа = КлючИЗначение.Значение;
		Если ДанныеСоисполнителейЭтапа.Количество() > 1 Тогда
			ТолькоОдинУчастникНаЭтап = Ложь;
			Прервать;
		КонецЕсли;
		
		Для Каждого ДанныеСоисполнителя Из ДанныеСоисполнителейЭтапа Цикл
			
			Если ДанныеСоисполнителя.ДанныеПодчиненных.Количество() > 0 Тогда
				ТолькоОдинУчастникНаЭтап = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если (РежимОтображения = "Проверяющий" Или РежимОтображения = "Автор")
		И КлючНазначения = "Дерево"
		И ТолькоОдинУчастникНаЭтап Тогда
		
		ДанныеСоисполнителей.Этапы = Новый Массив;
		ДанныеСоисполнителей.СоисполнителиПоЭтапам = Новый Соответствие;
		
	ИначеЕсли (РежимОтображения = "Проверяющий" Или РежимОтображения = "Автор")
		И КлючНазначения = "ОписаниеHTML"
		И Не ТолькоОдинУчастникНаЭтап Тогда
		
		ДанныеСоисполнителей.Этапы = Новый Массив;
		ДанныеСоисполнителей.СоисполнителиПоЭтапам = Новый Соответствие;
		
		ДанныеСоисполнителей.ПредставлениеОбщегоРезультата = ПредставлениеОбщегоРезультата;
		ДанныеСоисполнителей.ХарактерОбщегоРезультата = ХарактерОбщегоРезультата;
		
	ИначеЕсли РежимОтображения = "Исполнитель" И ТекущийИсполнительЕдинственный Тогда
		
		ДанныеСоисполнителей.Этапы = Новый Массив;
		ДанныеСоисполнителей.СоисполнителиПоЭтапам = Новый Соответствие;
		
	КонецЕсли;
	
	КоличествоЭлементов = ДанныеСоисполнителей.Этапы.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ОбратныйИндекс = КоличествоЭлементов - Индекс;
		ДанныеЭтапа = ДанныеСоисполнителей.Этапы[ОбратныйИндекс];
		
		СоисполнителиЭтапа = ДанныеСоисполнителей.СоисполнителиПоЭтапам[ДанныеЭтапа.Этап];
		Если СоисполнителиЭтапа <> Неопределено И СоисполнителиЭтапа.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСоисполнителей.Этапы.Удалить(ОбратныйИндекс);
		ДанныеСоисполнителей.СоисполнителиПоЭтапам.Удалить(ДанныеЭтапа.Этап);
		
	КонецЦикла;
	
	Возврат ДанныеСоисполнителей;
	
КонецФункции

// Определяет, доступны ли "Задачи мне" пользователю.
// 
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи
//               - Неопределено
// 
// Возвращаемое значение:
//  Булево - "Задачи мне" доступны пользователю.
//
Функция ДоступныЗадачиМне(Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено
		Или Пользователь = Пользователи.ТекущийПользователь() Тогда
		ТекущиеИсполнителиЗадач = РаботаСЗадачамиПовтИсп.ТекущиеИсполнителиЗадач();
	Иначе
		ТекущиеИсполнителиЗадач = ИсполнителиЗадач(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Пользователь));
	КонецЕсли;
	ДоступныЗадачиМне = ТекущиеИсполнителиЗадач.Количество() > 0;
	
	Возврат ДоступныЗадачиМне;
	
КонецФункции

// Определяет, доступны ли "Задачи от меня" текущему пользователю.
// 
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи
//               - Неопределено
// 
// Возвращаемое значение:
//  Булево - "Задачи от меня" доступны текущему пользователю.
//
Функция ДоступныЗадачиОтМеня(Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		ТекущиеИсполнителиЗадач = ИсполнителиЗадач(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Пользователи.ТекущийПользователь()),
			Истина,
			Ложь);
	Иначе
		ТекущиеИсполнителиЗадач = ИсполнителиЗадач(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Пользователь),
			Истина,
			Ложь);
	КонецЕсли;
	ДоступныЗадачиОтМеня = ТекущиеИсполнителиЗадач.Количество() > 0;
	
	Возврат ДоступныЗадачиОтМеня;
	
КонецФункции

// Определяет, доступны ли "Задачи подчиненных" текущему пользователю.
// 
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи
//               - Неопределено
// 
// Возвращаемое значение:
//  Булево - "Задачи подчиненных" доступны текущему пользователю.
//
Функция ДоступныЗадачиПодчиненных(Пользователь  = Неопределено) Экспорт
	
	ДоступныЗадачиПодчиненных = РаботаСЗадачамиПовтИсп.ДоступныЗадачиПодчиненных();
	
	Возврат ДоступныЗадачиПодчиненных;
	
КонецФункции

// Определяет, доступны ли "Задачи по проектам" текущему пользователю.
// 
// Возвращаемое значение:
//  Булево - "Задачи по проектам" доступны текущему пользователю.
//
Функция ДоступныЗадачиПоПроектам() Экспорт
	
	АктивныеПроектыРуководителя = РаботаСПроектами.АктивныеПроектыРуководителей(
		Сотрудники.ТекущийПользовательИСотрудники());
	ДоступныЗадачиПоПроектам = АктивныеПроектыРуководителя.Количество() > 0;
	
	Возврат ДоступныЗадачиПоПроектам;
	
КонецФункции

// Рассчитывает дни просрочки выполнения действия.
//
// Параметры:
//  Исполнитель - ОпределяемыйТип.УчастникЗадач - Исполнитель.
//  Срок - Дата - Срок.
//  ДатаВыполнения - Дата - Дата выполнения
// 
// Возвращаемое значение:
//  Число - Дни просрочки выполнения действия.
//
Функция ДниПросрочки(Исполнитель, Срок, ДатаВыполнения) Экспорт
	
	ДатаОкончанияПросрочки = ?(ЗначениеЗаполнено(ДатаВыполнения), ДатаВыполнения, ТекущаяДатаСеанса());
	Если Не ЗначениеЗаполнено(Срок) Или ДатаОкончанияПросрочки <= Срок Тогда
		Возврат 0;
	КонецЕсли;
	
	ДниПросрочки = 0;
	РассчитаныДниПросрочки = Ложь;
	
	Если Не ТипЗнч(Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
		ГрафикРаботы = ГрафикиРаботы.ГрафикРаботыСотрудника(Исполнитель);
	Иначе
		ГрафикРаботы = ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы();
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ГрафикРаботы) Тогда
		
		Попытка
			
			ДлительностьПериодаСек = ГрафикиРаботы.ПолучитьДлительностьПериодаСек(
				ГрафикРаботы,
				Срок,
				ДатаОкончанияПросрочки);
			
			КоличествоРабочихЧасовВДне = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ГрафикРаботы,
				"КоличествоРабочихЧасовВДне");
			Если Не ЗначениеЗаполнено(КоличествоРабочихЧасовВДне) Тогда
				КоличествоРабочихЧасовВДне = 8;
			КонецЕсли;
			
			КоличествоСекундВЧасе = 3600;
			
			ДниПросрочки = ДлительностьПериодаСек / (КоличествоРабочихЧасовВДне * КоличествоСекундВЧасе);
			
			РассчитаныДниПросрочки = Истина;
			
		Исключение
			
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если Не РассчитаныДниПросрочки Тогда
		
		КоличествоСекундВДне = 86400;
		ДниПросрочки = (ДатаОкончанияПросрочки - Срок) / КоличествоСекундВДне;
		
	КонецЕсли;
	
	ДниПросрочки = Окр(ДниПросрочки, 2);
	
	Возврат ДниПросрочки;
	
КонецФункции

// Определяет, есть ли активные подзадачи.
//
// Параметры:
//  ЗадачаИлиДействие - ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи - Задачи или действие задачи.
// 
// Возвращаемое значение:
//  Булево - Есть активные подзадачи.
//
Функция ЕстьПодзадачи(ЗадачаИлиДействие) Экспорт
	
	Если ТипЗнч(ЗадачаИлиДействие) = Тип("ДокументСсылка.Задача") Тогда
		НайденныеПодзадачи = Документы.Задача.НайтиПодзадачи(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗадачаИлиДействие));
	ИначеЕсли ТипЗнч(ЗадачаИлиДействие) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		НайденныеПодзадачи = Документы.ДействиеЗадачи.НайтиПодзадачи(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗадачаИлиДействие));
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный тип владельца подзадач %1.'"),
			ТипЗнч(ЗадачаИлиДействие));
	КонецЕсли;
	
	ЕстьПодзадачи = НайденныеПодзадачи.Количество() > 0;
	
	Возврат ЕстьПодзадачи;
	
КонецФункции

// Определяет, есть ли активные подзадачи.
//
// Параметры:
//  ЗадачаИлиДействие - ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи - Задачи или действие задачи.
// 
// Возвращаемое значение:
//  Булево - Есть активные подзадачи.
//
Функция ЕстьПодзадачиСПравами(ЗадачаИлиДействие) Экспорт
	
	Если ТипЗнч(ЗадачаИлиДействие) = Тип("ДокументСсылка.Задача") Тогда
		НайденныеПодзадачи = Документы.Задача.НайтиПодзадачи(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗадачаИлиДействие));
	ИначеЕсли ТипЗнч(ЗадачаИлиДействие) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		НайденныеПодзадачи = Документы.ДействиеЗадачи.НайтиПодзадачи(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗадачаИлиДействие));
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный тип владельца подзадач %1.'"),
			ТипЗнч(ЗадачаИлиДействие));
	КонецЕсли;
	
	ПраваСотрудниковПоОбъектам = ДокументооборотПраваДоступа.ПраваСотрудниковПоОбъектам(
		НайденныеПодзадачи,
		Истина,
		ПараметрыСеанса.СотрудникиПользователя);
	
	ПраваЧтенияПоЗадачам = Новый Соответствие;
	
	Для Каждого СтрокаПрав Из ПраваСотрудниковПоОбъектам Цикл
		
		Если ПраваЧтенияПоЗадачам[СтрокаПрав.ОбъектДоступа] = Неопределено Тогда
			ПраваЧтенияПоЗадачам[СтрокаПрав.ОбъектДоступа] = Ложь;
		КонецЕсли;
		
		ПраваЧтенияПоЗадачам[СтрокаПрав.ОбъектДоступа] =
			ПраваЧтенияПоЗадачам[СтрокаПрав.ОбъектДоступа] Или СтрокаПрав.Чтение;
		
	КонецЦикла;
	
	КоличествоЭлементов = НайденныеПодзадачи.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ОбратныйИндекс = КоличествоЭлементов - Индекс;
		Подзадача = НайденныеПодзадачи[ОбратныйИндекс];
		Если ПраваЧтенияПоЗадачам[Подзадача] = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныеПодзадачи.Удалить(ОбратныйИндекс);
		
	КонецЦикла;
	
	ЕстьПодзадачи = НайденныеПодзадачи.Количество() > 0;
	
	Возврат ЕстьПодзадачи;
	
КонецФункции

// Определяет, есть ли возврат задачи на доработку.
//
// Параметры:
//  Задача - ДокументСсылка.Задача - Задача.
// 
// Возвращаемое значение:
//  Булево - Есть возврат на доработку.
//
Функция ЕстьВозвратНаДоработку(Задача) Экспорт
	
	ЕстьВозвратНаДоработку = Ложь;
	Если Не ЗначениеЗаполнено(Задача) Тогда
		Возврат ЕстьВозвратНаДоработку;
	КонецЕсли;
	
	ВидЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "ВидЗадачи");
	Если Не ЗначениеЗаполнено(ВидЗадачи) Тогда
		Возврат ЕстьВозвратНаДоработку;
	КонецЕсли;
	
	ОбрабатывающийРезультат = Справочники.ВидыЗадач.ОбрабатывающийРезультат(ВидЗадачи);
	Если Не ЗначениеЗаполнено(ОбрабатывающийРезультат) Тогда
		Возврат ЕстьВозвратНаДоработку;
	КонецЕсли;
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
	Если Не ЗначениеЗаполнено(ДанныеВидаЗадачи.РезультатПроверяющегоВозвращеноНаДоработку) Тогда
		Возврат ЕстьВозвратНаДоработку;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	1 КАК ЕстьВозвратНаДоработку
		|ИЗ
		|	Документ.Задача.Участники КАК ЗадачаУчастники
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДействиеЗадачи КАК ДействиеЗадачи
		|		ПО ЗадачаУчастники.ДействиеУчастника = ДействиеЗадачи.Ссылка
		|ГДЕ
		|	ЗадачаУчастники.Ссылка = &Задача
		|	И ЗадачаУчастники.ВидУчастника = &ОбрабатывающийРезультат
		|	И ЗадачаУчастники.ДействиеУчастника.РезультатДействия = &РезультатВозвратаНаДоработку");
	
	Запрос.УстановитьПараметр("Задача", Задача);
	Запрос.УстановитьПараметр("ОбрабатывающийРезультат", ОбрабатывающийРезультат);
	Запрос.УстановитьПараметр("РезультатВозвратаНаДоработку", ДанныеВидаЗадачи.РезультатПроверяющегоВозвращеноНаДоработку);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЕстьОбработкаРезультата = Не РезультатЗапроса.Пустой();
	
	Возврат ЕстьОбработкаРезультата;
	
КонецФункции

// Определяет, есть ли обработка результата задачи.
//
// Параметры:
//  Задача - ДокументСсылка.Задача - Задача.
// 
// Возвращаемое значение:
//  Булево - Есть обработка результата.
//
Функция ЕстьОбработкаРезультата(Задача) Экспорт
	
	ЕстьОбработкаРезультата = Ложь;
	Если Не ЗначениеЗаполнено(Задача) Тогда
		Возврат ЕстьОбработкаРезультата;
	КонецЕсли;
	
	ВидЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "ВидЗадачи");
	Если Не ЗначениеЗаполнено(ВидЗадачи) Тогда
		Возврат ЕстьОбработкаРезультата;
	КонецЕсли;
	
	ОбрабатывающийРезультат = Справочники.ВидыЗадач.ОбрабатывающийРезультат(ВидЗадачи);
	Если Не ЗначениеЗаполнено(ОбрабатывающийРезультат) Тогда
		Возврат ЕстьОбработкаРезультата;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	1 КАК ЕстьОбработкаРезультата
		|ИЗ
		|	Документ.Задача.Участники КАК ЗадачаУчастники
		|ГДЕ
		|	ЗадачаУчастники.Ссылка = &Задача
		|	И ЗадачаУчастники.ВидУчастника = &ОбрабатывающийРезультат");
	
	Запрос.УстановитьПараметр("Задача", Задача);
	Запрос.УстановитьПараметр("ОбрабатывающийРезультат", ОбрабатывающийРезультат);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЕстьОбработкаРезультата = Не РезультатЗапроса.Пустой();
	
	Возврат ЕстьОбработкаРезультата;
	
КонецФункции

// Определяет задачи пользователю.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи
//  ТолькоПерваяПорция - Булево
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
//   * Заголовок - Строка
//
Функция ЗадачиМнеВсе(Пользователь, ТолькоПерваяПорция) Экспорт
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		ЗадачиМнеВсе = Новый ТаблицаЗначений;
		ЗадачиМнеВсе.Колонки.Добавить("ДействиеЗадачи");
		ЗадачиМнеВсе.Колонки.Добавить("Заголовок");
		Возврат ЗадачиМнеВсе;
	КонецЕсли;
	
	РеестрЗадачиМне = Справочники.РеестрыЗадач.РеестрЗадачиМне(Пользователь);
	Состояние = "ОжидаетВыполнения";
	
	ЗадачиМнеВсе = РегистрыСведений.РеестрЗадачПоИсполнителям.ЗадачиРеестра(
		РеестрЗадачиМне,
		Состояние,
		ТолькоПерваяПорция);
	
	Возврат ЗадачиМнеВсе;
	
КонецФункции

// Определяет новые задачи пользователю.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи
//  ТолькоПерваяПорция - Булево
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
//   * Заголовок - Строка
//
Функция ЗадачиМнеНовые(Пользователь, ТолькоПерваяПорция) Экспорт
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		ЗадачиМнеНовые = Новый ТаблицаЗначений;
		ЗадачиМнеНовые.Колонки.Добавить("ДействиеЗадачи");
		ЗадачиМнеНовые.Колонки.Добавить("Заголовок");
		Возврат ЗадачиМнеНовые;
	КонецЕсли;
	
	РеестрЗадачиМне = Справочники.РеестрыЗадач.РеестрЗадачиМне(Пользователь);
	Состояние = "Новое";
	
	ЗадачиМнеНовые = РегистрыСведений.РеестрЗадачПоИсполнителям.ЗадачиРеестра(
		РеестрЗадачиМне,
		Состояние,
		ТолькоПерваяПорция);
	
	Возврат ЗадачиМнеНовые;
	
КонецФункции

// Определяет просроченные задачи пользователю.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи
//  ТолькоПерваяПорция - Булево
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
//   * Заголовок - Строка
//
Функция ЗадачиМнеПросроченные(Пользователь, ТолькоПерваяПорция) Экспорт
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		ЗадачиМнеПросроченные = Новый ТаблицаЗначений;
		ЗадачиМнеПросроченные.Колонки.Добавить("ДействиеЗадачи");
		ЗадачиМнеПросроченные.Колонки.Добавить("Заголовок");
		Возврат ЗадачиМнеПросроченные;
	КонецЕсли;
	
	РеестрЗадачиМне = Справочники.РеестрыЗадач.РеестрЗадачиМне(Пользователь);
	Состояние = "ПросроченоИОжидаетВыполнения";
	
	ЗадачиМнеПросроченные = РегистрыСведений.РеестрЗадачПоИсполнителям.ЗадачиРеестра(
		РеестрЗадачиМне,
		Состояние,
		ТолькоПерваяПорция);
	
	Возврат ЗадачиМнеПросроченные;
	
КонецФункции

// Определяет истекающие задачи пользователю.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи
//  ТолькоПерваяПорция - Булево
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
//   * Заголовок - Строка
//
Функция ЗадачиМнеИстекающие(Пользователь, ТолькоПерваяПорция) Экспорт
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		ЗадачиМнеИстекающие = Новый ТаблицаЗначений;
		ЗадачиМнеИстекающие.Колонки.Добавить("ДействиеЗадачи");
		ЗадачиМнеИстекающие.Колонки.Добавить("Заголовок");
		Возврат ЗадачиМнеИстекающие;
	КонецЕсли;
	
	РеестрЗадачиМне = Справочники.РеестрыЗадач.РеестрЗадачиМне(Пользователь);
	Состояние = "Истекает";
	
	ЗадачиМнеИстекающие = РегистрыСведений.РеестрЗадачПоИсполнителям.ЗадачиРеестра(
		РеестрЗадачиМне,
		Состояние,
		ТолькоПерваяПорция);
	
	Возврат ЗадачиМнеИстекающие;
	
КонецФункции

// Рассчитывает итоги "Задачи мне" для исполнителя.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь.
// 
// Возвращаемое значение:
//  См. РегистрыНакопления.КоличествоЗадачПоИсполнителям.НовыеДанныеИтогов.
//
Функция ЗадачиМнеИтоги(Пользователь) Экспорт
	
	РеестрЗадачиМне = Справочники.РеестрыЗадач.РеестрЗадачиМне(Пользователь);
	
	ПараметрыОтбора = РегистрыНакопления.КоличествоЗадачПоИсполнителям.НовыеПараметрыОтбора();
	ПараметрыОтбора.РеестрЗадач = РеестрЗадачиМне;
	
	ЗадачиМнеИтоги =
		РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтоги(ПараметрыОтбора);
	
	Возврат ЗадачиМнеИтоги;
	
КонецФункции
 
// Рассчитывает расширенные итоги "Задачи мне".
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи.
// 
// Возвращаемое значение:
//  Структура - Итоги "Задачи мне":
//   * ОжидающихВыполнения - Число.
//   * НовыхБезОзнакомления - Число.
//   * ИстекаетБезОзнакомления - Число.
//   * ПросроченоБезОзнакомления - Число.
//   * ВСрокБезОзнакомления - Число.
//   * НаОзнакомлениеСРезультатом - Число.
//   * ПоступилиОбновления - Число.
//
Функция ЗадачиМнеИтогиРасширенные(Пользователь) Экспорт
	
	ЗадачиМнеИтоги = ЗадачиМнеИтоги(Пользователь);
	
	ЗадачиМнеИтогиРасширенные = Новый Структура;
	ЗадачиМнеИтогиРасширенные.Вставить("ОжидающихВыполнения", ЗадачиМнеИтоги.ОжидающихВыполнения);
	ЗадачиМнеИтогиРасширенные.Вставить("НовыхБезОзнакомления", ЗадачиМнеИтоги.Новых);
	ЗадачиМнеИтогиРасширенные.Вставить("ИстекаетБезОзнакомления", ЗадачиМнеИтоги.Истекающих);
	ЗадачиМнеИтогиРасширенные.Вставить("ПросроченоБезОзнакомления", ЗадачиМнеИтоги.Просроченных);
	ЗадачиМнеИтогиРасширенные.Вставить("ВСрокБезОзнакомления", ЗадачиМнеИтоги.ВСрок);
	ЗадачиМнеИтогиРасширенные.Вставить("НаОзнакомлениеСРезультатом", 0);
	ЗадачиМнеИтогиРасширенные.Вставить("ПоступилиОбновления", ЗадачиМнеИтоги.ПоступилиОбновления);
		
	Возврат ЗадачиМнеИтогиРасширенные;
	
КонецФункции

// Рассчитывает итоги "Задачи мне" по видам.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи.
// 
// Возвращаемое значение:
//  Структура - Итоги "Задачи мне":
//   * НаРассмотрение - Число.
//   * НаСогласование - Число.
//   * НаУтверждение - Число.
//   * НаИсполнение - Число.
//   * НаОзнакомление - Число.
//   * НаРегистрацию - Число.
//   * Другие - Число.
//
Функция ЗадачиМнеИтогиПоВидам(Пользователь) Экспорт
	
	ЗадачиМнеИтогиРасширенные = Новый Структура;
	ЗадачиМнеИтогиРасширенные.Вставить("НаРассмотрение", 0);
	ЗадачиМнеИтогиРасширенные.Вставить("НаСогласование", 0);
	ЗадачиМнеИтогиРасширенные.Вставить("НаУтверждение", 0);
	ЗадачиМнеИтогиРасширенные.Вставить("НаИсполнение", 0);
	ЗадачиМнеИтогиРасширенные.Вставить("НаОзнакомление", 0);
	ЗадачиМнеИтогиРасширенные.Вставить("НаРегистрацию", 0);
	ЗадачиМнеИтогиРасширенные.Вставить("Другие", 0);
	
	РеестрЗадачиМне = Справочники.РеестрыЗадач.РеестрЗадачиМне(Пользователь);
	
	ПараметрыОтбора = РегистрыНакопления.КоличествоЗадачПоИсполнителям.НовыеПараметрыОтбора();
	ПараметрыОтбора.РеестрЗадач = РеестрЗадачиМне;
	
	Измерения = "ВидДействия";
	
	ЗадачиМнеИтогиПоВидамДействий =
		РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтогиПоИзмерениям(
			ПараметрыОтбора,
			Измерения);
	
	Для Каждого ИтогиПоВидуДействия Из ЗадачиМнеИтогиПоВидамДействий Цикл
		
		Если ИтогиПоВидуДействия.ВидДействия = Справочники.ВидыДействийЗадач.Рассмотреть Тогда
			
			ЗадачиМнеИтогиРасширенные.НаРассмотрение =
				ЗадачиМнеИтогиРасширенные.НаРассмотрение + ИтогиПоВидуДействия.ОжидающихВыполнения; 
			
		ИначеЕсли ИтогиПоВидуДействия.ВидДействия = Справочники.ВидыДействийЗадач.Согласовать Тогда
			
			ЗадачиМнеИтогиРасширенные.НаСогласование =
				ЗадачиМнеИтогиРасширенные.НаСогласование + ИтогиПоВидуДействия.ОжидающихВыполнения;
			
		ИначеЕсли ИтогиПоВидуДействия.ВидДействия = Справочники.ВидыДействийЗадач.Утвердить Тогда
			
			ЗадачиМнеИтогиРасширенные.НаУтверждение =
				ЗадачиМнеИтогиРасширенные.НаУтверждение + ИтогиПоВидуДействия.ОжидающихВыполнения;
			
		ИначеЕсли ИтогиПоВидуДействия.ВидДействия = Справочники.ВидыДействийЗадач.Исполнить Тогда
			
			ЗадачиМнеИтогиРасширенные.НаИсполнение =
				ЗадачиМнеИтогиРасширенные.НаИсполнение + ИтогиПоВидуДействия.ОжидающихВыполнения;
			
		ИначеЕсли ИтогиПоВидуДействия.ВидДействия = Справочники.ВидыДействийЗадач.Ознакомиться Тогда
			
			ЗадачиМнеИтогиРасширенные.НаОзнакомление =
				ЗадачиМнеИтогиРасширенные.НаОзнакомление + ИтогиПоВидуДействия.ОжидающихВыполнения;
			
		ИначеЕсли ИтогиПоВидуДействия.ВидДействия = Справочники.ВидыДействийЗадач.Зарегистрировать Тогда
			
			ЗадачиМнеИтогиРасширенные.НаРегистрацию =
				ЗадачиМнеИтогиРасширенные.НаРегистрацию + ИтогиПоВидуДействия.ОжидающихВыполнения;
			
		Иначе
			
			ЗадачиМнеИтогиРасширенные.Другие =
				ЗадачиМнеИтогиРасширенные.Другие + ИтогиПоВидуДействия.ОжидающихВыполнения;
			
		КонецЕсли;
		
	КонецЦикла;
	 
	Возврат ЗадачиМнеИтогиРасширенные;
	
КонецФункции

// Рассчитывает итоги "Задачи отдела" для руководителя.
// 
// Параметры:
//  Руководитель - СправочникСсылка.Пользователи - Руководитель.
// 
// Возвращаемое значение:
//  См. РегистрыНакопления.КоличествоЗадачПоИсполнителям.НовыеДанныеИтогов.
//
Функция ЗадачиОтделаИтоги(Руководитель) Экспорт
	
	РеестрЗадачиПодчиненных = Справочники.РеестрыЗадач.РеестрЗадачиПодчиненных(Руководитель);
	
	ПараметрыОтбора = РегистрыНакопления.КоличествоЗадачПоИсполнителям.НовыеПараметрыОтбора();
	ПараметрыОтбора.РеестрЗадач = РеестрЗадачиПодчиненных;
	
	ЗадачиОтделаИтоги =
		РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтоги(ПараметрыОтбора);
	
	Возврат ЗадачиОтделаИтоги;
	
КонецФункции

// Рассчитывает итоги "Задачи от меня" для автора.
// 
// Параметры:
//  Автор - СправочникСсылка.Пользователи.
// 
// Возвращаемое значение:
//  См. РегистрыНакопления.КоличествоЗадачПоАвторам.НовыеДанныеИтогов.
//
Функция ЗадачиОтМеняИтоги(Автор) Экспорт
	
	ПараметрыОтбора = РегистрыНакопления.КоличествоЗадачПоАвторам.НовыеПараметрыОтбора();
	ПараметрыОтбора.РеестрЗадач = Справочники.РеестрыЗадач.РеестрЗадачиОтМеня(Автор);
	
	ЗадачиОтМеняИтоги =
		РегистрыНакопления.КоличествоЗадачПоАвторам.ЗадачиРеестраИтоги(
			ПараметрыОтбора);
	
	Возврат ЗадачиОтМеняИтоги;
	
КонецФункции

// Определяет просроченные задачи автора.
//
// Параметры:
//  Автор - СправочникСсылка.Пользователи
//  ТолькоПерваяПорция - Булево
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * Задача - ДокументСсылка.Задача
//   * Заголовок - Строка
//
Функция ЗадачиОтМеняПросроченные(Автор, ТолькоПерваяПорция) Экспорт
	
	Если Не ЗначениеЗаполнено(Автор) Тогда
		ЗадачиОтМеняПросроченные = Новый ТаблицаЗначений;
		ЗадачиОтМеняПросроченные.Колонки.Добавить("Задача");
		ЗадачиОтМеняПросроченные.Колонки.Добавить("Заголовок");
		Возврат ЗадачиОтМеняПросроченные;
	КонецЕсли;
	
	РеестрЗадачиОтМеня = Справочники.РеестрыЗадач.РеестрЗадачиОтМеня(Автор);
	Состояние = "ПросроченоИОжидаетВыполнения";
	
	ЗадачиОтМеняПросроченные = РегистрыСведений.РеестрЗадачПоАвторам.ЗадачиРеестра(
		РеестрЗадачиОтМеня,
		Состояние,
		ТолькоПерваяПорция);
	
	Возврат ЗадачиОтМеняПросроченные;
	
КонецФункции

// Закрывает указанные задачи.
//
// Параметры:
//  ЗадачиКЗакрытию - Массив из ДокументСсылка.Задача.
//
Процедура ЗакрытьЗадачи(ЗадачиКЗакрытию) Экспорт
	
	Для Каждого ЗадачаКЗакрытию Из ЗадачиКЗакрытию Цикл
		
		ЗакрытьЗадачу(ЗадачаКЗакрытию);
		
	КонецЦикла;
	
КонецПроцедуры

// Закрывает задачу.
//
// Параметры:
//  Задача - ДокументСсылка.Задача - Задача.
//
Процедура ЗакрытьЗадачу(Задача) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ЗадачаОбъект = Задача.ПолучитьОбъект();
		
		ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ЗадачаОбъект.ВидЗадачи);
		
		ДействияУчастников = Новый Массив;
		Для Каждого СтрокаУчастника Из ЗадачаОбъект.Участники Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаУчастника.ДействиеУчастника) Тогда
				Продолжить;
			КонецЕсли;
			
			ДействияУчастников.Добавить(СтрокаУчастника.ДействиеУчастника);
			
		КонецЦикла;
		
		ЕстьРезультатОтрицательный = Ложь;
		ЕстьРезультатСЗамечаниями = Ложь;
		
		РеквизитыДействий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			ДействияУчастников,
			"РезультатДействия");
		
		Для Каждого СтрокаУчастника Из ЗадачаОбъект.Участники Цикл
			
			РеквизитыДействия = РеквизитыДействий[ДействияУчастников];
			Если РеквизитыДействия = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеВидаЗадачи.РезультатИсполнителяВыполненаОтрицательно)
				И РеквизитыДействия.РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполненаОтрицательно Тогда
				ЕстьРезультатОтрицательный = Истина;
			ИначеЕсли ЗначениеЗаполнено(ДанныеВидаЗадачи.РезультатИсполнителяВыполненаСЗамечаниями)
				И РеквизитыДействия.РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполненаСЗамечаниями Тогда
				ЕстьРезультатСЗамечаниями = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьРезультатОтрицательный Тогда
			РасчитанноеСостояниеЗадачиЗакрыта = ДанныеВидаЗадачи.СостояниеЗадачиЗакрытаОтрицательно;
		ИначеЕсли ЕстьРезультатСЗамечаниями Тогда
			РасчитанноеСостояниеЗадачиЗакрыта = ДанныеВидаЗадачи.СостояниеЗадачиЗакрытаСЗамечаниями;
		Иначе
			РасчитанноеСостояниеЗадачиЗакрыта = ДанныеВидаЗадачи.СостояниеЗадачиЗакрыта;
		КонецЕсли;
		
		ЗадачаОбъект.УстановитьСостояние(РасчитанноеСостояниеЗадачиЗакрыта, Истина);
		ЗадачаОбъект.ДополнительныеСвойства.Вставить("ЗакрытьЗадачу", Истина);
		ЗадачаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		ЗакрытьПодзадачи(Задача);
		
		ИнтеграцияЗадач.ПриЗакрытииЗадачи(Задача);

		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Закрывает подзадачи задачи или действия задачи.
//
// Параметры:
//  ЗадачаИлиДействие - ДокументСсылка.ДействиеЗадачи, ДокументСсылка.Задача - Задача или действие.
//
Процедура ЗакрытьПодзадачи(ЗадачаИлиДействие) Экспорт
	
	Если Не ЗначениеЗаполнено(ЗадачаИлиДействие) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПодзадачПодлежащихЗакрытию = ПодзадачиПодлежащиеЗакрытию(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗадачаИлиДействие));
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыПодзадач = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ДанныеПодзадачПодлежащихЗакрытию.ПодзадачиПодлежащиеЗакрытию,
		"ВидЗадачи, Источник, СостояниеЗадачи");
	Для Каждого Подзадача Из ДанныеПодзадачПодлежащихЗакрытию.ПодзадачиПодлежащиеЗакрытию Цикл
		
		РеквизитыПодзадачи = РеквизитыПодзадач[Подзадача];
		
		ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(РеквизитыПодзадачи.ВидЗадачи);
		
		ВидСостоянияЗадачи =
			РаботаСЗадачамиПовтИсп.ВидСостоянияЗадач(РеквизитыПодзадачи.СостояниеЗадачи);
		
		ЭтоОжидающаяВыполненияЗадача =
			Перечисления.ВидыСостоянийЗадач.ЭтоОжидающаяВыполненияЗадача(ВидСостоянияЗадачи);
		ЭтоНеЗапланированнаяЗадача =
			Перечисления.ВидыСостоянийЗадач.ЭтоЧерновик(ВидСостоянияЗадачи);
		
		Если ЭтоНеЗапланированнаяЗадача Тогда
			
			УдалитьЗадачу(Подзадача);
			
		ИначеЕсли ЭтоОжидающаяВыполненияЗадача И ДанныеВидаЗадачи.ЗакрыватьПодзадачи Тогда
			
			ЗакрытьЗадачу(Подзадача);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет поставляемые данные.
// При первоначальном заполнении заполняется только в центральном узле.
// 
// Параметры:
//  ЭтоПервоначальноеЗаполнение - Булево
// 
Процедура ЗаполнитьПоставляемыеДанные(ЭтоПервоначальноеЗаполнение) Экспорт
	
	Справочники.ГруппировкиЗадач.ЗаполнитьПоставляемыеДанные();
	Справочники.РеестрыЗадач.ЗаполнитьПоставляемыеДанные();
	
	Если ЭтоПервоначальноеЗаполнение
		И ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга()
		И КОДСервер.ЭтоПодчиненныйУзел() Тогда
		Возврат;
	КонецЕсли;
	
	Справочники.ВидыДействийЗадач.ЗаполнитьПоставляемыеДанные();
	Справочники.ВидыЗадач.ЗаполнитьПоставляемыеДанные();
	Справочники.ВидыУчастниковЗадач.ЗаполнитьПоставляемыеДанные();
	Справочники.НаборыСостоянийЗадач.ЗаполнитьПоставляемыеДанные();
	Справочники.ПриоритетыЗадач.ЗаполнитьПоставляемыеДанные();
	Справочники.РезультатыДействийЗадач.ЗаполнитьПоставляемыеДанные();
	Справочники.РезультатыЗадач.ЗаполнитьПоставляемыеДанные();
	Справочники.СобытияОбновленияЗадач.ЗаполнитьПоставляемыеДанные();
	Справочники.СостоянияЗадач.ЗаполнитьПоставляемыеДанные();
	Справочники.СостоянияУчастниковЗадач.ЗаполнитьПоставляемыеДанные();
	
КонецПроцедуры

// Возвращает представление исполнителей действий задач для отображения в интерфейсе.
//
// Параметры:
//   ДанныеДействий - Массив из Структура:
//     * ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи - текущее действие задачи.
//                      - СтрокаТаблицыЗначений - см. ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗапросСОтборами
//     * Участник - ОпределяемыйТип.УчастникЗадач
//     * ЕстьЗамещающие - Булево.
//   Расширенное - Булево
//
// Возвращаемое значение:
//   Соответствие из КлючИЗначение - представление исполнителей действий задач:
//     * Ключ - ДокументСсылка.ДействиеЗадачи - действие задачи.
//     * Значение - Строка - представление исполнителя.
//
Функция ПредставленияИсполнителейДействийЗадач(ДанныеДействий, Расширенное) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИсполнителиСтрокой = Новый Соответствие;
	Если ДанныеДействий.Количество() = 0 Тогда
		Возврат ИсполнителиСтрокой;
	КонецЕсли;
	
	ЗадачиГдеЯПомощникИлиЗамещающий = Новый Массив;
	РолевыеЗадачиДляУточненияЗамещающих = Новый Массив;
	Для Каждого ДанныеДействия Из ДанныеДействий Цикл
		ЭтоМояЗадача = Ложь;
		Если ТипЗнч(ДанныеДействия.ДействиеЗадачи) = Тип("СтрокаТаблицыЗначений") Тогда
			Действие = ДанныеДействия.ДействиеЗадачи.Ссылка;
		Иначе
			Действие = ДанныеДействия.ДействиеЗадачи;
		КонецЕсли;
		Исполнитель = ДанныеДействия.Участник;
		Если ЗначениеЗаполнено(ДанныеДействия.ФактическийИсполнитель) Тогда
			ПредставлениеИсполнителя = Строка(ДанныеДействия.ФактическийИсполнитель);
		Иначе
			Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Сотрудники")
				И Сотрудники.ЭтоСотрудникТекущегоПользователя(Исполнитель) Тогда
				ЭтоМояЗадача = Истина;
				ПредставлениеИсполнителя = НСтр("ru = 'Мне'")
					+ ?(ДанныеДействия.ЕстьЗамещающие, НСтр("ru = ' (есть замещающие)'"), "");
			ИначеЕсли ТипЗнч(Исполнитель) = Тип("СправочникСсылка.ПолныеРоли")
				И ЭтоРольТекущегоПользователя(Исполнитель) Тогда
				// Для ролевых "есть замещающие" отображается только если они есть именно у текущего пользователя.
				ЭтоМояЗадача = Истина;
				ПредставлениеИсполнителя =
					РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(Исполнитель, Расширенное);
				РолевыеЗадачиДляУточненияЗамещающих.Добавить(Действие);
			Иначе
				ПредставлениеИсполнителя =
					РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(Исполнитель, Расширенное);
			КонецЕсли;
			Если Не ЭтоМояЗадача И ЭтоТекущийИсполнитель(Исполнитель) Тогда
				ЗадачиГдеЯПомощникИлиЗамещающий.Добавить(Действие);
			КонецЕсли;
		КонецЕсли;
		ИсполнителиСтрокой[Действие] = ПредставлениеИсполнителя;
	КонецЦикла;
	
	Если РолевыеЗадачиДляУточненияЗамещающих.Количество() > 0 Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ВсеИсполнителиДействийЗадач.ДействиеЗадачи КАК ДействиеЗадачи
			|ИЗ
			|	РегистрСведений.ВсеИсполнителиДействийЗадач КАК ВсеИсполнителиДействийЗадач
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗамещающиеИПомощники КАК ЗамещающиеИПомощники
			|		ПО ВсеИсполнителиДействийЗадач.Основание = ЗамещающиеИПомощники.Ссылка
			|ГДЕ
			|	ВсеИсполнителиДействийЗадач.ДействиеЗадачи В (&РолевыеЗадачиДляУточненияЗамещающих)
			|	И ЗамещающиеИПомощники.Сотрудник В (&СотрудникиТекущегоПользователя)
			|	И ЗамещающиеИПомощники.ВидЗамещения = ЗНАЧЕНИЕ(Перечисление.ВидыЗамещения.Замещающие)
			|СГРУППИРОВАТЬ ПО
			|	ВсеИсполнителиДействийЗадач.ДействиеЗадачи");
		Запрос.УстановитьПараметр("РолевыеЗадачиДляУточненияЗамещающих",
			РолевыеЗадачиДляУточненияЗамещающих);
		Запрос.УстановитьПараметр("СотрудникиТекущегоПользователя",
			Сотрудники.ВсеСотрудникиТекущегоПользователя());
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ИсполнителиСтрокой[Выборка.ДействиеЗадачи] = ИсполнителиСтрокой[Выборка.ДействиеЗадачи] 
				+ НСтр("ru = ' (есть замещающие)'");
		КонецЦикла;
	КонецЕсли;
	
	Если ЗадачиГдеЯПомощникИлиЗамещающий.Количество() > 0 Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ЗадачиГдеЯПомощникИлиЗамещающийТЗ.ДействиеЗадачи КАК ДействиеЗадачи
			|ПОМЕСТИТЬ ЗадачиГдеЯПомощникИлиЗамещающий
			|ИЗ
			|	&ЗадачиГдеЯПомощникИлиЗамещающийТЗ КАК ЗадачиГдеЯПомощникИлиЗамещающийТЗ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗадачиГдеЯПомощникИлиЗамещающий.ДействиеЗадачи КАК ДействиеЗадачи,
			|	МАКСИМУМ(ЗамещающиеИПомощники.ВидЗамещения = 
			|		ЗНАЧЕНИЕ(Перечисление.ВидыЗамещения.Замещающие)) КАК ЭтоЗамещающий
			|ИЗ
			|	РегистрСведений.ВсеИсполнителиДействийЗадач КАК ВсеИсполнителиДействийЗадач
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗамещающиеИПомощники КАК ЗамещающиеИПомощники
			|		ПО ВсеИсполнителиДействийЗадач.Основание = ЗамещающиеИПомощники.Ссылка
			|		И ВсеИсполнителиДействийЗадач.ДействиеЗадачи В (&ЗадачиГдеЯПомощникИлиЗамещающий)
			|		И ВсеИсполнителиДействийЗадач.Исполнитель В (&СотрудникиТекущегоПользователя)
			|		ПРАВОЕ СОЕДИНЕНИЕ ЗадачиГдеЯПомощникИлиЗамещающий КАК ЗадачиГдеЯПомощникИлиЗамещающий
			|		ПО ВсеИсполнителиДействийЗадач.ДействиеЗадачи = ЗадачиГдеЯПомощникИлиЗамещающий.ДействиеЗадачи
			|СГРУППИРОВАТЬ ПО
			|	ЗадачиГдеЯПомощникИлиЗамещающий.ДействиеЗадачи");
			
		ЗадачиГдеЯПомощникИлиЗамещающийТЗ = Новый ТаблицаЗначений;
		
		ТипДействиеЗадачиСсылка = Новый ОписаниеТипов("ДокументСсылка.ДействиеЗадачи");
		
		ЗадачиГдеЯПомощникИлиЗамещающийТЗ.Колонки.Добавить("ДействиеЗадачи", ТипДействиеЗадачиСсылка);
			
		Для Каждого ЗадачаГдеЯПомощникИлиЗамещающий Из ЗадачиГдеЯПомощникИлиЗамещающий Цикл
			СтрокаЗадача = ЗадачиГдеЯПомощникИлиЗамещающийТЗ.Добавить();
			СтрокаЗадача.ДействиеЗадачи = ЗадачаГдеЯПомощникИлиЗамещающий;
		КонецЦикла; 
			
		Запрос.УстановитьПараметр("ЗадачиГдеЯПомощникИлиЗамещающий",
			ЗадачиГдеЯПомощникИлиЗамещающий);
		Запрос.УстановитьПараметр("СотрудникиТекущегоПользователя",
			Сотрудники.ВсеСотрудникиТекущегоПользователя(Ложь));
		Запрос.УстановитьПараметр("ЗадачиГдеЯПомощникИлиЗамещающийТЗ", 
			ЗадачиГдеЯПомощникИлиЗамещающийТЗ);
			
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.ЭтоЗамещающий) Тогда
				ИсполнителиСтрокой[Выборка.ДействиеЗадачи] = ИсполнителиСтрокой[Выборка.ДействиеЗадачи] 
					+ ?(Выборка.ЭтоЗамещающий, НСтр("ru = ' (я замещающий)'"), НСтр("ru = ' (я помощник)'"));
			Иначе
				ИсполнителиСтрокой[Выборка.ДействиеЗадачи] = ИсполнителиСтрокой[Выборка.ДействиеЗадачи] 
					+ НСтр("ru = ' (недействителен)'");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ИсполнителиСтрокой;
	
КонецФункции

// Определяет, задачи каких исполнителей направляются пользователю или сотруднику, с учетом ролевой адресации и делегирования.
//
// Параметры:
//  МассивПользователейИСотрудников - Массив из СправочникСсылка.Пользователи, СправочникСсылка.Сотрудники.
//  ВключаяЗамещаемых - Булево.
//  ВключаяПереданных - Булево.
// 
// Возвращаемое значение:
//  Массив из ОпределяемыйТип.УчастникЗадач - Исполнители, задачи которых может выполнять пользователь или сотрудник.
//
Функция ИсполнителиЗадач(МассивПользователейИСотрудников, ВключаяЗамещаемых = Истина, ВключаяПереданных = Истина) Экспорт
	
	МассивСотрудников = Сотрудники.ЗаменитьПользователейСотрудниками(
		МассивПользователейИСотрудников,
		Ложь);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиВКонтейнерах.Контейнер КАК Исполнитель
		|ИЗ
		|	РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
		|ГДЕ
		|	СотрудникиВКонтейнерах.Сотрудник В (&СотрудникиПользователя)
		|	И (СотрудникиВКонтейнерах.Контейнер ССЫЛКА Справочник.Сотрудники
		|		ИЛИ СотрудникиВКонтейнерах.Контейнер ССЫЛКА Справочник.ПолныеРоли)");
	
	Если ВключаяЗамещаемых Тогда
		Запрос.Текст = Запрос.Текст +
			"
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	СотрудникиВКонтейнерах.Контейнер
			|ИЗ
			|	Справочник.ЗамещающиеИПомощники КАК ЗамещающиеИПомощники
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
			|		ПО ЗамещающиеИПомощники.Сотрудник = СотрудникиВКонтейнерах.Сотрудник
			|ГДЕ
			|	ЗамещающиеИПомощники.Действует
			|	И ЗамещающиеИПомощники.Замещающий В (&СотрудникиПользователя)
			|	И (СотрудникиВКонтейнерах.Контейнер ССЫЛКА Справочник.Сотрудники
			|		ИЛИ СотрудникиВКонтейнерах.Контейнер ССЫЛКА Справочник.ПолныеРоли)";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СотрудникиПользователя", МассивСотрудников);
	
	ИсполнителиЗадач = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0); 
	
	Если ВключаяПереданных Тогда
		
		ПереданныеИсполнители = 
			РегистрыСведений.ИсполнителиВместоНедействительных.ПереданныеИсполнители(МассивСотрудников);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсполнителиЗадач, ПереданныеИсполнители);
		
	КонецЕсли;
	
	Возврат ИсполнителиЗадач;
	
КонецФункции

// Определяет, задачи каких исполнителей направляются пользователю, с учетом ролевой адресации и делегирования.
//
// Параметры:
//  МассивСотрудников - Массив из СправочникСсылка.Сотрудники
//  ВключаяЗамещаемых - Булево
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//   * Ключ - СправочникСсылка.Пользователи
//   * Значение - Массив из ОпределяемыйТип.УчастникЗадач
//
Функция ИсполнителиЗадачПоСотрудникам(МассивСотрудников, ВключаяЗамещаемых = Истина) Экспорт
	
	ИсполнителиЗадачПоСотрудникам = Новый Соответствие;
	Если МассивСотрудников.Количество() = 0 Тогда
		Возврат ИсполнителиЗадачПоСотрудникам;
	КонецЕсли;
	
	Для Каждого Сотрудник Из МассивСотрудников Цикл
		ИсполнителиЗадачПоСотрудникам.Вставить(Сотрудник, Новый Массив);
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиВКонтейнерах.Сотрудник КАК Сотрудник,
		|	СотрудникиВКонтейнерах.Контейнер КАК Исполнитель
		|ИЗ
		|	РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
		|ГДЕ
		|	СотрудникиВКонтейнерах.Сотрудник В (&МассивСотрудников)
		|	И (СотрудникиВКонтейнерах.Контейнер ССЫЛКА Справочник.Сотрудники
		|		ИЛИ СотрудникиВКонтейнерах.Контейнер ССЫЛКА Справочник.ПолныеРоли)");
	
	Если ВключаяЗамещаемых Тогда
		Запрос.Текст = Запрос.Текст +
			"
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ЗамещающиеИПомощники.Замещающий,
			|	СотрудникиВКонтейнерах.Контейнер
			|ИЗ
			|	Справочник.ЗамещающиеИПомощники КАК ЗамещающиеИПомощники
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
			|		ПО ЗамещающиеИПомощники.Сотрудник = СотрудникиВКонтейнерах.Сотрудник
			|ГДЕ
			|	ЗамещающиеИПомощники.Действует
			|	И ЗамещающиеИПомощники.Замещающий В (&МассивСотрудников)
			|	И (СотрудникиВКонтейнерах.Контейнер ССЫЛКА Справочник.Сотрудники
			|		ИЛИ СотрудникиВКонтейнерах.Контейнер ССЫЛКА Справочник.ПолныеРоли)";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИсполнителиЗадачПоПользователю = ИсполнителиЗадачПоСотрудникам[Выборка.Сотрудник];
		ИсполнителиЗадачПоПользователю.Добавить(Выборка.Исполнитель);
	КонецЦикла;
	
	Возврат ИсполнителиЗадачПоСотрудникам;
	
КонецФункции

// Возвращает историю выполнения по источнику.
// 
// Параметры:
// 	Источник - ОпределяемыйТип.ИсточникЗадач.
// 	
// Возвращаемое значение:
// 	Строка - История выполнения задачи.
//
Функция ИсторияВыполненияПоИсточнику(Источник) Экспорт
	
	ИсторияВыполненияПоИсточнику = "";
	
	Задача = Документы.Задача.НайтиПоИсточнику(Источник);
	Если Не ЗначениеЗаполнено(Задача) Тогда
		Возврат ИсторияВыполненияПоИсточнику;
	КонецЕсли;
	
	ИсторияВыполненияПоИсточнику = РегистрыСведений.ИсторияЗадач.ИсторияВыполнения(Задача);
	
	Возврат ИсторияВыполненияПоИсточнику;
	
КонецФункции

// Определяет источник задачи.
//
// Параметры:
//  ЗадачаИлиДействие - ДокументСсылка.Задача
//                    - ДокументСсылка.ДействиеЗадачи
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ИсточникЗадач - Источник задачи.
//
Функция ИсточникЗадачи(ЗадачаИлиДействие) Экспорт
	
	ЗадачиИлиДействия = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗадачаИлиДействие);
	ИсточникиЗадач = ИсточникиЗадач(ЗадачиИлиДействия);
	ИсточникЗадачи = ИсточникиЗадач[ЗадачаИлиДействие];
	
	Возврат ИсточникЗадачи;
	
КонецФункции

// Определяет источники задач.
//
// Параметры:
//  ЗадачиИлиДействия - Массив из ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи - Задачи или действия задач.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//   * Ключ - ДокументСсылка.Задача
//          - ДокументСсылка.ДействиеЗадачи
//   * Значение - ОпределяемыйТип.ИсточникЗадач
//
Функция ИсточникиЗадач(ЗадачиИлиДействия) Экспорт
	
	МассивЗадач = Новый Массив; // Массив из ДокументСсылка.Задача
	МассивДействийЗадач = Новый Массив; // Массив из ДокументСсылка.ДействиеЗадачи
	Для Каждого ЗадачаИлиДействие Из ЗадачиИлиДействия Цикл
		
		Если ТипЗнч(ЗадачаИлиДействие) = Тип("ДокументСсылка.Задача") Тогда
			МассивЗадач.Добавить(ЗадачаИлиДействие);
		ИначеЕсли ТипЗнч(ЗадачаИлиДействие) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
			МассивДействийЗадач.Добавить(ЗадачаИлиДействие);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗадачиДействий = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивДействийЗадач, "Задача");
	Для Каждого КлючИЗначение Из ЗадачиДействий Цикл
		
		ДействиеЗадачи = КлючИЗначение.Ключ;
		Задача = КлючИЗначение.Значение;
		
		МассивЗадач.Добавить(Задача);
		
	КонецЦикла;
	
	РеквизитыИсточникиЗадач = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивЗадач, "Источник");
	
	ИсточникиЗадач = Новый Соответствие;
	Для Каждого ЗадачаИлиДействие Из ЗадачиИлиДействия Цикл
		
		Если ТипЗнч(ЗадачаИлиДействие) = Тип("ДокументСсылка.Задача") Тогда
			Задача = ЗадачаИлиДействие;
		ИначеЕсли ТипЗнч(ЗадачаИлиДействие) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
			ДействиеЗадачи = ЗадачаИлиДействие;
			Задача = ЗадачиДействий[ДействиеЗадачи];
		Иначе
			ИсточникиЗадач.Вставить(ЗадачаИлиДействие, Неопределено);
			Продолжить;
		КонецЕсли;
		
		ИсточникЗадачи = РеквизитыИсточникиЗадач[Задача];
		Если Не ЗначениеЗаполнено(ИсточникЗадачи)
			Или Не ЭтоИсточникЗадач(ИсточникЗадачи) Тогда
			ИсточникиЗадач.Вставить(ЗадачаИлиДействие, Неопределено);
			Продолжить;
		КонецЕсли;
		
		ИсточникиЗадач.Вставить(ЗадачаИлиДействие, ИсточникЗадачи);
		
	КонецЦикла;
	
	Возврат ИсточникиЗадач;
	
КонецФункции

// Корневая задача.
//
// Параметры:
//   ЗадачаИлиДействие - ДокументСсылка.Задача
//                     - ДокументСсылка.ДействиеЗадачи
//                     - СтрокаТаблицыЗначений - см. ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗапросСОтборами
//
// Возвращаемое значение:
//   ДокументСсылка.Задача - корневая задача.
//
Функция КорневаяЗадача(ЗадачаИлиДействие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КорневаяЗадача = Документы.Задача.ПустаяСсылка();
	Если Не ЗначениеЗаполнено(ЗадачаИлиДействие) Тогда
		Возврат КорневаяЗадача;
	КонецЕсли;
	
	Если ТипЗнч(ЗадачаИлиДействие) = Тип("ДокументСсылка.Задача") Тогда
		
		Задача = ЗадачаИлиДействие;
		
	ИначеЕсли ТипЗнч(ЗадачаИлиДействие) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		
		Действие = ЗадачаИлиДействие;
		Задача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Задача");
		
	ИначеЕсли ТипЗнч(ЗадачаИлиДействие) = Тип("СтрокаТаблицыЗначений") Тогда
		
		Задача = ЗадачаИлиДействие.Задача;
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестен алгоритм определения корневой задачи для %1 (%2)'"),
			ЗадачаИлиДействие,
			ТипЗнч(ЗадачаИлиДействие));
		
	КонецЕсли;
	
	ОбработанныеЗадачи = Новый Соответствие;
	ВышестоящаяЗадача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "ВышестоящаяЗадача");
	Пока ЗначениеЗаполнено(ВышестоящаяЗадача) Цикл
		
		Если ОбработанныеЗадачи[ВышестоящаяЗадача] = Истина Тогда
			КорневаяЗадача = Документы.Задача.ПустаяСсылка();
			Прервать;
		КонецЕсли;
		
		КорневаяЗадача = ВышестоящаяЗадача;
		ОбработанныеЗадачи[ВышестоящаяЗадача] = Истина;
		ВышестоящаяЗадача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВышестоящаяЗадача, "ВышестоящаяЗадача");
		
	КонецЦикла;
	
	Возврат КорневаяЗадача;
	
КонецФункции

// Ищем корневую задачу и также ее действие. 
// Бежим вверх, пока не нашли первую задачу с Источник непуст (процесс). или до корня. 
// 
// Параметры:
//  ЗадачаИлиДействие - ДокументСсылка.Задача
//                    - ДокументСсылка.ДействиеЗадачи
//  КорневоеДействие - ДокументСсылка.ДействиеЗадачи
//
// Возвращаемое значение:
//  ДокументСсылка.Задача - Корневая задача.
//
Функция КорневаяЗадачаИДействие(ЗадачаИлиДействие, КорневоеДействие) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВышестоящееДействие = Неопределено; 
	КорневоеДействие = Неопределено;
	
	КорневаяЗадача = Документы.Задача.ПустаяСсылка();
	Если Не ЗначениеЗаполнено(ЗадачаИлиДействие) Тогда
		Возврат КорневаяЗадача;
	КонецЕсли;
	
	Если ТипЗнч(ЗадачаИлиДействие) = Тип("ДокументСсылка.Задача") Тогда
		
		Задача = ЗадачаИлиДействие;
		
	ИначеЕсли ТипЗнч(ЗадачаИлиДействие) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		
		Действие = ЗадачаИлиДействие;
		Задача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Задача");
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестен алгоритм обработки перенаправления для %1 (%2)'"),
			ЗадачаИлиДействие,
			ТипЗнч(ЗадачаИлиДействие));
		
	КонецЕсли;
	
	РеквЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, 
		"ВышестоящаяЗадача, ВышестоящееДействие, Источник");
	ВышестоящаяЗадача = РеквЗадачи.ВышестоящаяЗадача;
	ВышестоящееДействие = РеквЗадачи.ВышестоящееДействие;
	Источник = РеквЗадачи.Источник;
	
	Если ЗначениеЗаполнено(Источник) 
		И ОбщегоНазначения.ЭтоБизнесПроцесс(Источник.Метаданные()) Тогда

		Действие = РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(
			Источник);
	
		Если ЗначениеЗаполнено(Действие) Тогда
			КорневаяЗадача = Задача;
			Возврат КорневаяЗадача;
		КонецЕсли;
				
	КонецЕсли;	

	ОбработанныеЗадачи = Новый Соответствие;
	
	Пока ЗначениеЗаполнено(ВышестоящаяЗадача) Цикл
		
		Если ОбработанныеЗадачи[ВышестоящаяЗадача] = Истина Тогда
			КорневаяЗадача = Документы.Задача.ПустаяСсылка();
			Прервать;
		КонецЕсли;
		
		КорневаяЗадача = ВышестоящаяЗадача;
		КорневоеДействие = ВышестоящееДействие;
		ОбработанныеЗадачи[ВышестоящаяЗадача] = Истина;
		
		РеквЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВышестоящаяЗадача, 
			"ВышестоящаяЗадача, ВышестоящееДействие, Источник");
		ВышестоящаяЗадача = РеквЗадачи.ВышестоящаяЗадача;
		ВышестоящееДействие = РеквЗадачи.ВышестоящееДействие;
		
		Источник = РеквЗадачи.Источник;
		Если ЗначениеЗаполнено(Источник) 
			И ОбщегоНазначения.ЭтоБизнесПроцесс(Источник.Метаданные()) Тогда
	
			Возврат КорневаяЗадача;
					
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат КорневаяЗадача;
	
КонецФункции

// Возвращает все менеджеры источников задач.
// 
// Возвращаемое значение:
//  Массив из СправочникМенеджер, ДокументМенеджер, БизнесПроцессМенеджер
//
Функция МенеджерыИсточниковЗадач() Экспорт
	
	МенеджерыИсточниковЗадач = Новый Массив;
	Для Каждого ТипИсточника Из Метаданные.ОпределяемыеТипы.ИсточникЗадач.Тип.Типы() Цикл
		
		МетаданныеИсточника = Метаданные.НайтиПоТипу(ТипИсточника);
		МенеджерИсточника = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеИсточника.ПолноеИмя());
		
		МенеджерыИсточниковЗадач.Добавить(МенеджерИсточника);
		
	КонецЦикла;
	
	Возврат МенеджерыИсточниковЗадач;
	
КонецФункции

// Определяет начало рабочего дня на указанную дату.
//
// Параметры:
//  Дата - Дата - Дата, начало рабочего дня которой необходимо получить.
// 
// Возвращаемое значение:
//  Дата - Начало рабочего дня.
//
Функция НачалоРабочегоДня(Дата) Экспорт
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Возврат Дата;
	КонецЕсли;
	
	ГрафикРаботы = ГрафикиРаботы.ГрафикРаботыСотрудника(Сотрудники.ОсновнойСотрудник());
	Если Не ЗначениеЗаполнено(ГрафикРаботы) Тогда
		Возврат КонецДня(Дата);
	КонецЕсли;
	
	Попытка
		
		НачалоДня = ГрафикиРаботы.ПолучитьНачалоИОкончаниеРабочегоДня(Дата, ГрафикРаботы).НачалоДня;
		Если Не ЗначениеЗаполнено(НачалоДня) Тогда
			Возврат НачалоДня(Дата);
		КонецЕсли;
		
		Возврат Дата(
			Год(Дата),
			Месяц(Дата),
			День(Дата),
			Час(НачалоДня),
			Минута(НачалоДня),
			Секунда(НачалоДня));
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Графики работы'", Метаданные.ОсновнойЯзык.КодЯзыка),
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат КонецДня(Дата);
		
	КонецПопытки;
	
КонецФункции

// Возвращает данные, необходимые для обновления области действия задачи.
//
// Параметры:
//   ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
//                  - Неопределено
//   ВыделенныеДействия - Массив из ДокументСсылка.ДействиеЗадачи
//   Задача - ДокументСсылка.Задача
//   РеквизитыДействий - Соответствие из КлючИЗначение:
//     * Ключ - ДокументСсылка.ДействиеЗадачи
//     * Значение - Структура:
//       ** ВидДействия - СправочникСсылка.ВидыДействийЗадач
//       ** Задача - ДокументСсылка.Задача
//       ** Источник - ОпределяемыйТип.ИсточникДействийЗадач
//       ** Исполнитель - ОпределяемыйТип.УчастникЗадач
//       ** РезультатДействияТекстом - Строка
//       ** СостояниеУчастникаЗадачи - СправочникСсылка.СостоянияУчастниковЗадач
//       ** Флаг - ПеречислениеСсылка.ФлагиОбъектов
//       ** Приложения - Неопределено
//       ** ВерсияДанных - Строка
//       ** ИсточникДанных - СправочникСсылка.ИсточникиДанных
//   КешДанных - Структура - кеш данных, который требуется для ускорения работы различных механизмов.
//
// Возвращаемое значение:
//   Структура:
//     * ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
//                      - Неопределено
//     * РеквизитыДействий - Неопределено
//                         - Соответствие из КлючИЗначение:
//       ** Ключ - ДокументСсылка.ДействиеЗадачи
//       ** Значение - Структура:
//         *** ВидДействия - СправочникСсылка.ВидыДействийЗадач
//         *** Задача - ДокументСсылка.Задача
//         *** Источник - ОпределяемыйТип.ИсточникДействийЗадач
//         *** Исполнитель - ОпределяемыйТип.УчастникЗадач
//         *** РезультатДействияТекстом - Строка
//         *** СостояниеУчастникаЗадачи - СправочникСсылка.СостоянияУчастниковЗадач
//         *** Флаг - ПеречислениеСсылка.ФлагиОбъектов
//         *** Приложения - ТаблицаЗначений:
//           **** Приложение - ОпределяемыйТип.ПриложениеОтчетовОбИсполнении
//         *** ВерсияДанных - Строка
//     * РеквизитыПодготовленыЗаранее - Булево
//     * ДействиеУказано - Булево
//     * ВидДействия - СправочникСсылка.ВидыДействийЗадач
//     * РезультатДействияТекстом - Строка
//     * Флаг - ПеречислениеСсылка.ФлагиОбъектов
//     * Приложения - Массив из ОпределяемыйТип.ПриложениеОтчетовОбИсполнении
//     * ЕстьПриложения - Булево
//     * РежимОдногоДействия - Булево
//     * ОжидаетВыполнения - Булево
//     * ЕстьНовыеДействия - Булево
//     * ЕстьДействияВРаботе - Булево
//     * ЕстьОбъектыИзДругихСистем - Булево
//     * ВсеДействияДоступны - Булево
//     * ЕстьДобавлениеУчастников - Булево
//     * ЕстьПостановкаПодзадач - Булево
//     * ДействиеОбработки - см. ОпределяемыйТип.Действия
//
Функция ДанныеДляОбновления(ДействиеЗадачи, ВыделенныеДействия, Задача,
	РеквизитыДействий = Неопределено,
	КешДанных = Неопределено) Экспорт
	
	ДанныеДляОбновления = Новый Структура;
	ДанныеДляОбновления.Вставить("ДействиеЗадачи", ДействиеЗадачи);
	
	ЭтоПолноправныйПользователь = Пользователи.РолиДоступны("КонтрольЗадачИБизнесПроцессов", Неопределено, Ложь);
	ТекущиеИсполнителиЗадач = РаботаСЗадачамиПовтИсп.ТекущиеИсполнителиЗадач();
	
	// Считаем реквизиты выделенных действий.
	РеквизитыПодготовленыЗаранее = Истина;
	Если РеквизитыДействий = Неопределено Тогда
		РеквизитыПодготовленыЗаранее = Ложь;
		РеквизитыДействий = Новый Соответствие;
		Если ЗначениеЗаполнено(ДействиеЗадачи) Или ВыделенныеДействия.Количество() > 0 Тогда
			
			ДействияДляПолученияРеквизитов = Новый Массив;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				ДействияДляПолученияРеквизитов,
				ВыделенныеДействия,
				Истина);
			
			РеквизитыДействияЗадачи = Неопределено;
			Если ЗначениеЗаполнено(ДействиеЗадачи) Тогда
				
				КэшОбластиПросмотра = КэшиНаВремяВызоваПовтИсп.КэшЗадачаОбластьПросмотра();
				
				Если КэшОбластиПросмотра.Заполнен И КэшОбластиПросмотра.ДействиеЗадачи = ДействиеЗадачи Тогда
					
					РеквизитыДействияЗадачи = КэшОбластиПросмотра.РеквизитыДействияЗадачи;
					ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(
						ДействияДляПолученияРеквизитов,
						ДействиеЗадачи);
					
				Иначе
					
					Если ДействияДляПолученияРеквизитов.Найти(ДействиеЗадачи) = Неопределено Тогда
						ДействияДляПолученияРеквизитов.Добавить(ДействиеЗадачи);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			РеквизитыДействий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
				ДействияДляПолученияРеквизитов,
				"ВидДействия, ВидУчастника, Задача, Источник, Исполнитель,
				|РезультатДействияТекстом, СостояниеУчастникаЗадачи, Флаг, Приложения, ВерсияДанных");
			Если РеквизитыДействияЗадачи <> Неопределено Тогда
				РеквизитыДействий.Вставить(ДействиеЗадачи, РеквизитыДействияЗадачи);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	ДанныеДляОбновления.Вставить("РеквизитыДействий", РеквизитыДействий);
	ДанныеДляОбновления.Вставить("РеквизитыПодготовленыЗаранее", РеквизитыПодготовленыЗаранее);
	
	// Считаем реквизиты действия.
	ДанныеДляОбновления.Вставить("ДействиеУказано", ЗначениеЗаполнено(ДействиеЗадачи));
	ДанныеДляОбновления.Вставить("ВидДействия", Справочники.ВидыДействийЗадач.ПустаяСсылка());
	ДанныеДляОбновления.Вставить("РезультатДействияТекстом", "");
	ДанныеДляОбновления.Вставить("Флаг", Перечисления.ФлагиОбъектов.ПустаяСсылка());
	ДанныеДляОбновления.Вставить("Приложения", Новый Массив);
	ДанныеДляОбновления.Вставить("ЕстьДобавлениеУчастников", Ложь);
	ДанныеДляОбновления.Вставить("ЕстьПостановкаПодзадач", Истина);
	ДанныеДляОбновления.Вставить("ДействиеОбработки", Неопределено);
	
	СостояниеУчастникаЗадачи = Справочники.СостоянияУчастниковЗадач.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Задача) Тогда
		
		ДействиеОбработки =
			ИнтеграцияЗадач.ДействиеОбработкиЗадачи(Задача);
		ДанныеДляОбновления.ДействиеОбработки = ДействиеОбработки;
		
		Если ЗначениеЗаполнено(ДействиеОбработки) Тогда
			
			РеквизитыДействияОбработки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ДействиеОбработки,
				"Предмет, ВидДействия");
			
			РеквизитыВидаДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				РеквизитыДействияОбработки.ВидДействия,
				"ЗапретитьПостановкуПодзадач");
			
			Если РеквизитыВидаДействия.ЗапретитьПостановкуПодзадач Тогда
				ДанныеДляОбновления.ЕстьПостановкаПодзадач = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеДляОбновления.ДействиеУказано Тогда
			
			РеквизитыДействия = РеквизитыДействий[ДействиеЗадачи];
			СостояниеУчастникаЗадачи = РеквизитыДействия.СостояниеУчастникаЗадачи;
			
			ДанныеДляОбновления.ВидДействия = РеквизитыДействия.ВидДействия;
			ДанныеДляОбновления.РезультатДействияТекстом = РеквизитыДействия.РезультатДействияТекстом;
			ДанныеДляОбновления.Флаг = РеквизитыДействия.Флаг;
			Если РеквизитыДействия.Приложения = Неопределено Тогда
				ДанныеДляОбновления.Приложения = Новый Массив;
			Иначе
				ДанныеДляОбновления.Приложения = РеквизитыДействия.Приложения.Выгрузить().ВыгрузитьКолонку("Приложение");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДействиеОбработки) Тогда
				
				ЭтоИсполнитель =
					РаботаСЗадачамиПовтИсп.ЭтоИсполнитель(РеквизитыДействия.ВидУчастника)
					Или РеквизитыДействия.ВидУчастника = Справочники.ВидыУчастниковЗадач.ОбрабатывающийРезолюцию;
				
				ПоддерживаетДобавлениеИсполнителей =
					ДействияКлиентСервер.ЭтоДействиеИсполнения(ДействиеОбработки)
					Или ДействияКлиентСервер.ЭтоДействиеОзнакомления(ДействиеОбработки)
					Или ДействияКлиентСервер.ЭтоДействиеПодписания(ДействиеОбработки)
					Или ДействияКлиентСервер.ЭтоДействиеСогласования(ДействиеОбработки);
				
				ЕстьОсобыеРазрешения = Ложь;
				Если ДействияКлиентСервер.ЭтоДействиеОзнакомления(ДействиеОбработки) Тогда
					
					РеквизитыДействияОзнакомления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
						ДействиеОбработки,
						"ОжидатьЗавершения");
					
					Если Не РеквизитыДействияОзнакомления.ОжидатьЗавершения Тогда
						
						// Действие ознакомления сразу завершается и не можем завершенные по обычным
						// правам редактировать. Но можем направить новым участникам.
						ПраваДоступа = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(
							ДействиеОбработки);
						ИзменениеДействияРазрешено = ПраваДоступа.Изменение;
						
						ЕстьОсобыеРазрешения = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ЕстьОсобыеРазрешения Тогда
					ИзменениеДействияРазрешено = ДействияСервер.ИзменениеДействияРазрешено(
						ДействиеОбработки,
						РеквизитыДействияОбработки.Предмет);
				КонецЕсли;
				
				ЕстьРазрешениеДобавления = Ложь;
				
				РазрешенияСотрудникаПоДействию =
					НастройкиДоступностиДействий.РазрешенияСотрудникаПоДействию(
						ДействиеОбработки);
				
				Для Каждого КлючИЗначение Из РазрешенияСотрудникаПоДействию Цикл
					
					РазрешениеЭтапа = КлючИЗначение.Значение;
					
					Если РазрешениеЭтапа = Перечисления.ВариантыДоступностиИзмененияДействий.Авто
						Или РазрешениеЭтапа = Перечисления.ВариантыДоступностиИзмененияДействий.Разрешено
						Или РазрешениеЭтапа = Перечисления.ВариантыДоступностиИзмененияДействий.РазрешеноДобавлять Тогда
						ЕстьРазрешениеДобавления = Истина;
					КонецЕсли;
					
				КонецЦикла;
				
				ДанныеДляОбновления.ЕстьДобавлениеУчастников =
					ЭтоИсполнитель
					И ПоддерживаетДобавлениеИсполнителей
					И ИзменениеДействияРазрешено
					И ЕстьРазрешениеДобавления;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Рассчитаем вторичные данные.
	ДанныеДляОбновления.Вставить("ЕстьПриложения", (ДанныеДляОбновления.Приложения.Количество() > 0));
	ДанныеДляОбновления.Вставить("РежимОдногоДействия",
		(ДанныеДляОбновления.ДействиеУказано И ВыделенныеДействия.Количество() = 1));
	
	ВидСостоянияУчастниковЗадач = РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(СостояниеУчастникаЗадачи);
	ДанныеДляОбновления.Вставить("ОжидаетВыполнения",
		Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОжидаемоеДействие(ВидСостоянияУчастниковЗадач));
	
	ЕстьНовыеДействия = Ложь;
	ЕстьДействияВРаботе = Ложь;
	ЕстьОбъектыИзДругихСистем = Ложь;
	ВсеДействияДоступны = Истина;
	
	ПраваНаВыделенныеДействия = Неопределено;
	
	Для Каждого ВыделенноеДействие Из ВыделенныеДействия Цикл
		
		РеквизитыДействия = РеквизитыДействий[ВыделенноеДействие];
		
		ВидСостоянияУчастниковЗадач =
			РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(РеквизитыДействия.СостояниеУчастникаЗадачи);
		
		Если Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоНовоеДействие(ВидСостоянияУчастниковЗадач) Тогда
			ЕстьНовыеДействия = Истина;
		КонецЕсли;
		
		Если Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоДействиеВРаботе(ВидСостоянияУчастниковЗадач) Тогда
			ЕстьДействияВРаботе = Истина;
		КонецЕсли;
		
		Если Не ЭтоПолноправныйПользователь
				И ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
			//@skip-check query-in-loop
			Если ТекущиеИсполнителиЗадач.Найти(РеквизитыДействия.Исполнитель) = Неопределено
					И Не ЭтоПодчиненныйИсполнитель(РеквизитыДействия.Исполнитель) Тогда
				ВсеДействияДоступны = Ложь;
			Иначе
				// Проверка прав.
				ПраваНаДействие = Неопределено;
				Если КешДанных <> Неопределено И КешДанных.Свойство("ПраваПоОбъектам") Тогда
					ПраваНаДействие = КешДанных.ПраваПоОбъектам[ВыделенноеДействие];
				КонецЕсли;
				Если ПраваНаДействие = Неопределено Тогда
					Если ПраваНаВыделенныеДействия = Неопределено Тогда 
						ПраваНаВыделенныеДействия = ДокументооборотПраваДоступа.ПраваПользователейПоОбъектам(
							ВыделенныеДействия,
							Истина,
							ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
								Пользователи.ТекущийПользователь()));
					КонецЕсли;
					ПраваНаДействие = ПраваНаВыделенныеДействия.Найти(ВыделенноеДействие, "ОбъектДоступа");
				КонецЕсли;
				Если ПраваНаДействие = Неопределено Или ПраваНаДействие.Изменение <> Истина Тогда
					ВсеДействияДоступны = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыДействия.Источник) Тогда
			
			Если Не РеквизитыПодготовленыЗаранее Тогда
				ЭтоОбъектИзДругойСистемыСПроверкой =
					МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемыСПроверкой(РеквизитыДействия.Источник);
			Иначе
				Если ЗначениеЗаполнено(РеквизитыДействия.ИсточникДанных) Тогда
					ЭтоОбъектИзДругойСистемыСПроверкой = ОбщегоНазначенияДокументооборотПовтИсп.ИсточникАктивен(
						РеквизитыДействия.ИсточникДанных);
				Иначе
					ЭтоОбъектИзДругойСистемыСПроверкой = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ЭтоОбъектИзДругойСистемыСПроверкой Тогда
				ЕстьОбъектыИзДругихСистем = Истина;
				ВсеДействияДоступны = Ложь;
			КонецЕсли;
			
			Если ОбщегоНазначения.ЭтоЗадача(РеквизитыДействия.Источник.Метаданные()) Тогда
				ЗадачаПроцесса = РеквизитыДействия.Источник; // ЗадачаСсылка.ЗадачаИсполнителя
				Процесс = Неопределено;
				Если КешДанных <> Неопределено И КешДанных.Свойство("ДанныеЗадачИсполнителей") Тогда
					ДанныеЗадачи = КешДанных.ДанныеЗадачИсполнителей[ЗадачаПроцесса];
					Если ДанныеЗадачи <> Неопределено Тогда
						Процесс = ДанныеЗадачи.БизнесПроцесс;
					КонецЕсли;
				КонецЕсли;
				Если Процесс = Неопределено Тогда
					Процесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаПроцесса, "БизнесПроцесс");
				КонецЕсли;
				Действие = РегистрыСведений.ПроцессыДействий.ДействиеПоПроцессу(Процесс);
				ОбработкаОбъекта = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
				Если ОбработкаОчередиЗаданийСервер.ОбъектЕстьВОчереди(Процесс)
					Или ОбработкаОчередиЗаданийСервер.ОбъектЕстьВОчереди(ЗадачаПроцесса, ,
						Перечисления.ТипыЗаданий.ОтменитьВыполнениеЗадачи)
					Или ОбработкаОчередиЗаданийСервер.ОбъектЕстьВОчереди(ОбработкаОбъекта, ,
						Перечисления.ТипыЗаданий.ОстановитьОбработку) Тогда
						ВсеДействияДоступны = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляОбновления.Вставить("ЕстьНовыеДействия", ЕстьНовыеДействия);
	ДанныеДляОбновления.Вставить("ЕстьДействияВРаботе", ЕстьДействияВРаботе);
	ДанныеДляОбновления.Вставить("ЕстьОбъектыИзДругихСистем", ЕстьОбъектыИзДругихСистем);
	ДанныеДляОбновления.Вставить("ВсеДействияДоступны", ВсеДействияДоступны);
	
	Возврат ДанныеДляОбновления;
	
КонецФункции

// Обновляет область результата действия текстом.
//
// Параметры:
//   ОбластьДействия - Структура - описание области действия задачи.
//                     См. РаботаСЗадачамиКлиентСервер.НоваяОбластьДействия.
//   ДанныеДляОбновления - см. РаботаСЗадачами.ДанныеДляОбновления
//
Процедура ОбновитьРезультатДействияТекстом(ОбластьДействия, ДанныеДляОбновления) Экспорт
	
	ДанныеРезультатаДействияТекстом = ДанныеРезультатаДействияТекстом(ДанныеДляОбновления);
	
	ОбластьДействия.РезультатДействияТекстом.Видимость =
		ДанныеРезультатаДействияТекстом.РезультатДействияТекстомВидимость;
	ОбластьДействия.РезультатДействияТекстом.ТолькоПросмотр =
		ДанныеРезультатаДействияТекстом.РезультатДействияТекстомТолькоПросмотр;
	ОбластьДействия.ВзятьВРаботу.Доступность = ДанныеРезультатаДействияТекстом.ВзятьВРаботуДоступность;
	Если ОбластьДействия.ДокументЗадачаСоздатьПодзадачу <> Неопределено Тогда
		ОбластьДействия.ДокументЗадачаСоздатьПодзадачу.Доступность =
			ДанныеРезультатаДействияТекстом.ДокументЗадачаСоздатьПодзадачуДоступность;
	КонецЕсли;
	Если ОбластьДействия.СоздатьПодзадачу <> Неопределено Тогда
		ОбластьДействия.СоздатьПодзадачу.Доступность =
			ДанныеРезультатаДействияТекстом.СоздатьПодзадачуДоступность;
	КонецЕсли;
	Если ОбластьДействия.СогласоватьПереносСрока <> Неопределено Тогда
		ОбластьДействия.СогласоватьПереносСрока.Доступность =
			ДанныеРезультатаДействияТекстом.СогласоватьПереносСрокаДоступность;
	КонецЕсли;
	ОбластьДействия.РезультатДействияТекстом.ПодсказкаВвода =
		ДанныеРезультатаДействияТекстом.РезультатДействияТекстомПодсказкаВвода;
	
КонецПроцедуры

// Обновляет узлы подзадач в дереве.
// 
// Параметры:
//  ЭлементыУзлаДерева - ДанныеФормыКоллекцияЭлементовДерева
//  ДанныеПодзадач - ТаблицаЗначений:
//   * Задача - ДокументСсылка.Задача
//   * Заголовок - Строка
//   * ВышестоящаяЗадача - ДокументСсылка.Задача
//   * ВышестоящееДействие - ДокументСсылка.ДействиеЗадачи
//   * СостояниеЗадачи - СправочникСсылка.СостоянияЗадач
//   * Срок - Дата
//   * ПросроченаИОжидаетВыполнения - Булево
//  ДанныеДействийПодзадач - ТаблицаЗначений:
//   * Задача - ДокументСсылка.Задача
//   * ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
//   * ЕстьПриложения - Булево
//   * Участник - ОпределяемыйТип.УчастникЗадач
//   * СостояниеУчастникаЗадачи - СправочникСсылка.СостоянияУчастниковЗадач
//   * РезультатДействияТекстом - Строка.
//   * ЭтоОтветственный - Булево
//  ЭтоПервыйУровень - Булево
//  ПоказыватьСразуИсполнителей - Булево
//  ПечатьКарточкиДокумента - Булево
//
Процедура ОбновитьПодзадачиУзла(
	ЭлементыУзлаДерева,
	ДанныеПодзадач,
	ДанныеДействийПодзадач,
	ЭтоПервыйУровень,
	ПоказыватьСразуИсполнителей = Неопределено,
	ПечатьКарточкиДокумента = Ложь) Экспорт
	
#Если Не ВнешнееСоединение Тогда
	
	Если ПоказыватьСразуИсполнителей = Неопределено Тогда
		ПоказыватьСразуИсполнителей = ДанныеПодзадач.Количество() = 1;
	КонецЕсли;
	
	Если ЭлементыУзлаДерева.Количество() > 0 Тогда
		
		ТекущийПоказыватьСразуИсполнителей =
			ЗначениеЗаполнено(ЭлементыУзлаДерева[0].ДействиеЗадачи);
		Если ПоказыватьСразуИсполнителей <> ТекущийПоказыватьСразуИсполнителей Тогда
			ЭлементыУзлаДерева.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
	// Добавим новые узлы.
	Для Каждого ДанныеПодзадачи Из ДанныеПодзадач Цикл
		
		Если Не ПоказыватьСразуИсполнителей Тогда
			
			ЭлементПодзадачи = Неопределено;
			Для Каждого ЭлементУзлаДерева Из ЭлементыУзлаДерева Цикл
				
				Если ЭлементУзлаДерева.Задача <> ДанныеПодзадачи.Задача Тогда
					Продолжить;
				КонецЕсли;
				
				ЭлементПодзадачи = ЭлементУзлаДерева;
				Прервать;
				
			КонецЦикла;
			
			Если ЭлементПодзадачи = Неопределено Тогда
				
				ЭлементПодзадачи = ЭлементыУзлаДерева.Добавить();
				ЭлементПодзадачи.КлючСтроки = ДанныеПодзадачи.Задача;
				ЭлементПодзадачи.Задача = ДанныеПодзадачи.Задача;
				
			КонецЕсли;
			
			ЭлементыУзлаПодзадачи = РаботаСЗадачамиКлиентСервер.ПолучитьСтроки(ЭлементПодзадачи);
			
		Иначе
			
			ЭлементыУзлаПодзадачи = ЭлементыУзлаДерева;
			
		КонецЕсли;
		
		ЭлементыДействийПодзадач = Новый Соответствие;
		Для Каждого ЭлементУзлаДерева Из ЭлементыУзлаПодзадачи Цикл
			
			ЭлементыДействийПодзадач[ЭлементУзлаДерева.ДействиеЗадачи] = ЭлементУзлаДерева;
			
		КонецЦикла;
		
		Для Каждого ДанныеДействияПодзадачи Из ДанныеДействийПодзадач Цикл
			
			Если ДанныеДействияПодзадачи.Задача <> ДанныеПодзадачи.Задача Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементДействияПодзадачи = ЭлементыДействийПодзадач[ДанныеДействияПодзадачи.ДействиеЗадачи];
			Если ЭлементДействияПодзадачи = Неопределено Тогда
				
				ЭлементДействияПодзадачи = ЭлементыУзлаПодзадачи.Добавить();
				ЭлементДействияПодзадачи.КлючСтроки = ДанныеДействияПодзадачи.ДействиеЗадачи;
				ЭлементДействияПодзадачи.Задача = ДанныеДействияПодзадачи.Задача;
				ЭлементДействияПодзадачи.ДействиеЗадачи = ДанныеДействияПодзадачи.ДействиеЗадачи;
				
				ЭлементыДействийПодзадач[ЭлементДействияПодзадачи.ДействиеЗадачи] = ЭлементДействияПодзадачи;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Обновим данные существующих узлов и удалим лишние.
	КоллекцииУзловКОбработке = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭлементыУзлаДерева);
	Пока КоллекцииУзловКОбработке.Количество() > 0 Цикл
		
		КоллекцияУзловКОбработке = КоллекцииУзловКОбработке[0];
		КоллекцииУзловКОбработке.Удалить(0);
		
		КоличествоЭлементов = КоллекцияУзловКОбработке.Количество();
		Для Индекс = 1 По КоличествоЭлементов Цикл
			
			ОбратныйИндекс = КоличествоЭлементов - Индекс;
			ЭлементУзлаДерева = КоллекцияУзловКОбработке[ОбратныйИндекс];
			
			ДанныеПодзадачи = ДанныеПодзадач.Найти(
				ЭлементУзлаДерева.Задача,
				"Задача");
			ДанныеДействияПодзадачи = ?(ЗначениеЗаполнено(ЭлементУзлаДерева.ДействиеЗадачи),
				ДанныеДействийПодзадач.Найти(
					ЭлементУзлаДерева.ДействиеЗадачи,
					"ДействиеЗадачи"),
				Неопределено);
			
			ЭлементУзлаУстарел =
				(ЗначениеЗаполнено(ЭлементУзлаДерева.Задача) И ДанныеПодзадачи = Неопределено)
				Или (ЗначениеЗаполнено(ЭлементУзлаДерева.ДействиеЗадачи) И ДанныеДействияПодзадачи = Неопределено);
			
			Если ЭлементУзлаУстарел Тогда
				КоллекцияУзловКОбработке.Удалить(ОбратныйИндекс);
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЭлементУзлаДерева.Задача)
				И Не ЗначениеЗаполнено(ЭлементУзлаДерева.ДействиеЗадачи) Тогда
				
				КоллекцииУзловКОбработке.Добавить(
					РаботаСЗадачамиКлиентСервер.ПолучитьСтроки(ЭлементУзлаДерева));
				
			КонецЕсли;
			
			ЭлементУзлаДерева.Заголовок = ДанныеПодзадачи.Заголовок;
			ЭлементУзлаДерева.Срок = ДанныеПодзадачи.Срок;
			ЭлементУзлаДерева.СостояниеЗадачи = ДанныеПодзадачи.СостояниеЗадачи;
			
			Если ДанныеДействияПодзадачи <> Неопределено Тогда
				ЭлементУзлаДерева.СостояниеУчастникаЗадачи = ДанныеДействияПодзадачи.СостояниеУчастникаЗадачи;
				ЭлементУзлаДерева.ЕстьПриложения = ДанныеДействияПодзадачи.ЕстьПриложения;
				ЭлементУзлаДерева.Участник = ДанныеДействияПодзадачи.Участник;
				ЭлементУзлаДерева.РезультатДействияТекстом = ДанныеДействияПодзадачи.РезультатДействияТекстом;
			КонецЕсли;
			
			ВидСостоянияЗадачи =
					РаботаСЗадачамиПовтИсп.ВидСостоянияЗадач(ЭлементУзлаДерева.СостояниеЗадачи);
			Если ЗначениеЗаполнено(ЭлементУзлаДерева.ДействиеЗадачи) Тогда
				
				ЭлементУзлаДерева.Представление = ДанныеДействияПодзадачи.Представление;
				
				ВидСостоянияУчастника =
					РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(ЭлементУзлаДерева.СостояниеУчастникаЗадачи);
					
				КешНСИЗадач = РаботаСЗадачамиПовтИсп.КешНСИЗадач();
				РезультатДействия = КешНСИЗадач.РезультатыСостоянийУчастниковЗадач[ЭлементУзлаДерева.СостояниеУчастникаЗадачи];
				Если ЗначениеЗаполнено(РезультатДействия) Тогда
					ХарактерРезультата = РаботаСЗадачамиПовтИсп.ХарактерРезультата(РезультатДействия);
					ЭлементУзлаДерева.ИндексКартинкиСостояния = Перечисления.ХарактерыРезультатов.ИндексКартинкиСостояния(ХарактерРезультата);
				Иначе
					ЭлементУзлаДерева.ИндексКартинкиСостояния = ИндексКартинкиСостоянияУчастникаЗадачи(
						ВидСостоянияУчастника,
						ДанныеПодзадачи.ПросроченаИОжидаетВыполнения);
				КонецЕсли;
				
				ЭлементУзлаДерева.ЭтоВыполненнаяЗадача =
					Перечисления.ВидыСостоянийЗадач.ЭтоОтмененнаяЗадача(ВидСостоянияЗадачи)
					Или Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОжидающееПроверкиДействие(ВидСостоянияУчастника)
					Или Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоВыполненноеДействие(ВидСостоянияУчастника);
				
			Иначе
				
				ЭлементУзлаДерева.Представление = ДанныеПодзадачи.Представление;
				
				Если ЗначениеЗаполнено(ДанныеПодзадачи.РезультатЗадачи) Тогда
					ХарактерРезультата = РаботаСЗадачамиПовтИсп.ХарактерРезультата(ДанныеПодзадачи.РезультатЗадачи);
					ЭлементУзлаДерева.ИндексКартинкиСостояния = Перечисления.ХарактерыРезультатов.ИндексКартинкиСостояния(ХарактерРезультата);
				Иначе
					ЭлементУзлаДерева.ИндексКартинкиСостояния = ИндексКартинкиСостоянияЗадачи(
						ВидСостоянияЗадачи,
						ДанныеПодзадачи.ПросроченаИОжидаетВыполнения);
				КонецЕсли;
				
				ЭлементУзлаДерева.ЭтоВыполненнаяЗадача =
					Перечисления.ВидыСостоянийЗадач.ЭтоОтмененнаяЗадача(ВидСостоянияЗадачи)
					Или Перечисления.ВидыСостоянийЗадач.ЭтоОжидающаяПроверкиЗадача(ВидСостоянияЗадачи)
					Или Перечисления.ВидыСостоянийЗадач.ЭтоВыполненнаяЗадача(ВидСостоянияЗадачи);
				
			КонецЕсли;
			
			ЭлементУзлаДерева.ВозможенВозвратНаДоработку =
				Перечисления.ВидыСостоянийЗадач.ЭтоВыполненнаяЗадача(ВидСостоянияЗадачи)
				Или Перечисления.ВидыСостоянийЗадач.ЭтоОжидающаяПроверкиЗадача(ВидСостоянияЗадачи);
			
			ЭлементУзлаДерева.ЭтоПервыйУровень = ЭтоПервыйУровень;
			
		КонецЦикла;
		
	КонецЦикла;
	
#Иначе
	ВызватьИсключение НСтр("ru = 'Метод ОбновитьПодзадачиУзла не доступен во внешнем соединении.'");
#КонецЕсли
	
КонецПроцедуры

// Обновляет жизненный цикл на форме.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  ГруппаЖизненныйЦикл - ГруппаФормы - Группа формы, в которой размещается жизненный цикл.
//  ГруппаЖизненныйЦиклКонтейнерПрокрутка - ГруппаФормы - Группа, отображающая в том числе контейнер жизненного цикла.
//  ДанныеЖизненногоЦикла - ДанныеФормыКоллекция - Данные жизненного цикла, отображаемые на форме:
//   * Актуален - Булево - Данный узел актуален.
//   * ОтступУзла - Строка - Имя элемента формы, который является отступом узла.
//   * ГруппаУзла - Строка - Имя элемента формы, который является группой узла.
//   * ГруппаОсноваУзла - Строка - Имя элемента формы, который является группой основы узла.
//   * ГруппаДополнениеУзла - Строка - Имя элемента формы, который является дополнения узла.
//   * КартинкаУзла - Строка - Имя элемента формы, который является картинкой узла.
//   * ДатаУзла - Строка - Имя элемента формы, который является датой узла.
//   * ЗаголовокУзла - Строка - Имя элемента формы, который является заголовком узла.
//   * КартинкаДополненияУзла - Строка - Имя элемента формы, который является картинкой дополнения узла.
//   * ОписаниеДополненияУзла - Строка - Имя элемента формы, который является описанием дополнения узла.
//   * ГруппаДатаИЗаголовокУзла - Строка - Имя элемента формы, который является группой даты и заголовка узла.
//   * ГруппаОписаниеДополнения - Строка - Имя элемента формы, который является группой описания дополнения.
//   * ДанныеПриложенийУзла - СписокЗначений из Структура - Данные приложений узла:
//      ** Актуален - Булево - Данное приложение актуально.
//      ** ГруппаПриложениеДополнения - Строка - Имя элемента формы, который является группой приложения.
//      ** ЗаголовокПриложения - Строка - Имя элемента формы, который является заголовком приложения.
//      ** КартинкаПриложения - Строка - Имя элемента формы, который является картинкой приложения.
//      ** Приложение - ЛюбаяСсылка - Приложение.
//  СхемаЖизненногоЦикла - Массив из Структура - Новые данные жизненного цикла. См. РаботаСЗадачами.ЭлементСхемыЖизненногоЦикла().
//
Процедура ОбновитьЖизненныйЦикл(
	Форма,
	ГруппаЖизненныйЦикл,
	ГруппаЖизненныйЦиклКонтейнерПрокрутка,
	ДанныеЖизненногоЦикла,
	СхемаЖизненногоЦикла) Экспорт
	
#Если Не ВнешнееСоединение Тогда
	
	ЦветТекстаЖизненногоЦиклаВспомогательный = ЦветаСтиля.ЦветТекстаЖизненногоЦиклаВспомогательный;
	ЦветТекстаЖизненногоЦиклаВажный = ЦветаСтиля.ЦветТекстаЖизненногоЦиклаВажный;
	ЦветТекстаЖизненногоЦиклаОсновной = ЦветаСтиля.ЦветТекстаЖизненногоЦиклаОсновной;
	ЦветТекстаГиперссылка = ЦветаСтиля.ГиперссылкаЦвет;
	
	ШрифтЖизненногоЦиклаВспомогательный = ШрифтыСтиля.ШрифтЖизненногоЦиклаВспомогательный;
	ШрифтЖизненногоЦиклаВажный = ШрифтыСтиля.ШрифтЖизненногоЦиклаВажный;
	ШрифтЖизненногоЦиклаОсновной = ШрифтыСтиля.ШрифтЖизненногоЦиклаОсновной;
	
	// Добавим или изменим новые.
	Для Каждого ЭлементДанныхЖизненногоЦикла Из ДанныеЖизненногоЦикла Цикл
		ЭлементДанныхЖизненногоЦикла.Актуален = Ложь;
	КонецЦикла;
	
	РазмерСхемыЖизненногоЦикла = СхемаЖизненногоЦикла.Количество();
	
	ИндексЭлемента = 0;
	Для Каждого ЭлементСхемыЖизненногоЦикла Из СхемаЖизненногоЦикла Цикл
		
		НомерЭлемента = ИндексЭлемента + 1;
		
		ЭтоПервыйЭлемент = НомерЭлемента = 1;
		ЭтоПоследнийЭлемент = НомерЭлемента = РазмерСхемыЖизненногоЦикла;
		
		Если РазмерСхемыЖизненногоЦикла > НомерЭлемента Тогда
			СледующийЭлементСхемыЖизненногоЦикла = СхемаЖизненногоЦикла[ИндексЭлемента + 1];
			ХарактерСледующегоУзла = СледующийЭлементСхемыЖизненногоЦикла.ХарактерРезультата;
		Иначе
			ХарактерСледующегоУзла = Перечисления.ХарактерыРезультатов.ПустаяСсылка();
		КонецЕсли;
		
		ЭлементДанныхЖизненногоЦикла = ?(ДанныеЖизненногоЦикла.Количество() >= НомерЭлемента,
			ДанныеЖизненногоЦикла[ИндексЭлемента],
			ДанныеЖизненногоЦикла.Добавить());
		ЭлементДанныхЖизненногоЦикла.Актуален = Истина;
		
		// Группа узла.
		Если ЗначениеЗаполнено(ЭлементДанныхЖизненногоЦикла.ГруппаУзла) Тогда
			ГруппаУзла = Форма.Элементы[ЭлементДанныхЖизненногоЦикла.ГруппаУзла];
		Иначе
			ГруппаУзла = РаботаСФормами.ДобавитьОбычнуюГруппу(
				Форма,
				СтрШаблон("ГруппаУзла%1", НомерЭлемента),
				ГруппаЖизненныйЦикл);
			ЭлементДанныхЖизненногоЦикла.ГруппаУзла = ГруппаУзла.Имя;
		КонецЕсли;
		ГруппаУзла.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаУзла.Видимость = Истина;
		
		// Отступ узла.
		Если ИндексЭлемента <> 0 Тогда
			
			Если ЗначениеЗаполнено(ЭлементДанныхЖизненногоЦикла.ОтступУзла) Тогда
				ОтступУзла = Форма.Элементы[ЭлементДанныхЖизненногоЦикла.ОтступУзла];
			Иначе
				ОтступУзла = РаботаСФормами.ДобавитьКартинку(
					Форма,
					СтрШаблон("ОтступУзла%1", НомерЭлемента),
					ГруппаУзла,
					Новый Картинка);
				ЭлементДанныхЖизненногоЦикла.ОтступУзла = ОтступУзла.Имя;
			КонецЕсли;
			
			Если ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Нейтральный Тогда
				
				ОтступУзла.Картинка = БиблиотекаКартинок.ОтступЖизненногоЦиклаСерый;
				
			ИначеЕсли ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Положительный
				Или ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = Перечисления.ХарактерыРезультатов.ПоложительныйСЗамечаниями Тогда
				
				ОтступУзла.Картинка = БиблиотекаКартинок.ОтступЖизненногоЦиклаЗеленый;
				
			ИначеЕсли ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Отрицательный Тогда
				
				ОтступУзла.Картинка = БиблиотекаКартинок.ОтступЖизненногоЦиклаКрасный;
				
			Иначе
				
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Неизвестный характер результата %1.'"),
					ЭлементСхемыЖизненногоЦикла.ХарактерРезультата);
				
			Конецесли;
			
		КонецЕсли;
		
		// Группа основы узла.
		Если ЗначениеЗаполнено(ЭлементДанныхЖизненногоЦикла.ГруппаОсноваУзла) Тогда
			ГруппаОсноваУзла = Форма.Элементы[ЭлементДанныхЖизненногоЦикла.ГруппаОсноваУзла];
		Иначе
			ГруппаОсноваУзла = РаботаСФормами.ДобавитьОбычнуюГруппу(
				Форма,
				СтрШаблон("ГруппаОсноваУзла%1", НомерЭлемента),
				ГруппаУзла);
			ЭлементДанныхЖизненногоЦикла.ГруппаОсноваУзла = ГруппаОсноваУзла.Имя;
		КонецЕсли;
		ГруппаОсноваУзла.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаОсноваУзла.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
		
		// Картинка узла.
		Если ЗначениеЗаполнено(ЭлементДанныхЖизненногоЦикла.КартинкаУзла) Тогда
			КартинкаУзла = Форма.Элементы[ЭлементДанныхЖизненногоЦикла.КартинкаУзла];
		Иначе
			КартинкаУзла = РаботаСФормами.ДобавитьКартинку(
				Форма,
				СтрШаблон("КартинкаУзла%1", НомерЭлемента),
				ГруппаОсноваУзла,
				Новый Картинка);
			ЭлементДанныхЖизненногоЦикла.КартинкаУзла = КартинкаУзла.Имя;
		КонецЕсли;
		
		Если ЭлементСхемыЖизненногоЦикла.ТипУзла = Перечисления.ТипыУзловЖизненногоЦикла.УзелСостояния Тогда
			
			КартинкаУзла.Картинка = ЭлементСхемыЖизненногоЦикла.Картинка;
			
		ИначеЕсли ЭлементСхемыЖизненногоЦикла.ТипУзла = Перечисления.ТипыУзловЖизненногоЦикла.ПромежуточныйУзел Тогда
			
			КартинкаУзла.Картинка = КартинкаПромежуточногоУзлаЖизненногоЦикла(
				ЭлементСхемыЖизненногоЦикла.ХарактерРезультата,
				ХарактерСледующегоУзла,
				ЭтоПервыйЭлемент,
				ЭтоПоследнийЭлемент);
			
		КонецЕсли;
		
		КартинкаУзла.РазмерКартинки = РазмерКартинки.Растянуть;
		КартинкаУзла.РастягиватьПоВертикали = Истина;
		
		Если ЗначениеЗаполнено(ЭлементСхемыЖизненногоЦикла.НавигационнаяСсылка) Тогда
			КартинкаУзла.Гиперссылка = Истина;
			КартинкаУзла.Подсказка = ЭлементСхемыЖизненногоЦикла.НавигационнаяСсылка;
		Иначе
			КартинкаУзла.Гиперссылка = Ложь;
			КартинкаУзла.Подсказка = "";
		КонецЕсли;
		КартинкаУзла.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		КартинкаУзла.УстановитьДействие("Нажатие", "Подключаемый_Нажатие");
		
		// Группа дата и заголовок узла.
		Если ЗначениеЗаполнено(ЭлементДанныхЖизненногоЦикла.ГруппаДатаИЗаголовокУзла) Тогда
			ГруппаДатаИЗаголовокУзла = Форма.Элементы[ЭлементДанныхЖизненногоЦикла.ГруппаДатаИЗаголовокУзла];
		Иначе
			ГруппаДатаИЗаголовокУзла = РаботаСФормами.ДобавитьОбычнуюГруппу(
				Форма,
				СтрШаблон("ГруппаДатаИЗаголовокУзла%1", НомерЭлемента),
				ГруппаОсноваУзла);
			ЭлементДанныхЖизненногоЦикла.ГруппаДатаИЗаголовокУзла = ГруппаДатаИЗаголовокУзла.Имя;
		КонецЕсли;
		ГруппаДатаИЗаголовокУзла.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		
		// Дата узла.
		Если ЗначениеЗаполнено(ЭлементДанныхЖизненногоЦикла.ДатаУзла) Тогда
			ДатаУзла = Форма.Элементы[ЭлементДанныхЖизненногоЦикла.ДатаУзла];
		Иначе
			ДатаУзла = РаботаСФормами.ДобавитьНадпись(
				Форма,
				СтрШаблон("ДатаУзла%1", НомерЭлемента),
				ГруппаДатаИЗаголовокУзла,
				"");
			ЭлементДанныхЖизненногоЦикла.ДатаУзла = ДатаУзла.Имя;
		КонецЕсли;
		ДатаУзла.ЦветТекста = ЦветТекстаЖизненногоЦиклаВспомогательный;
		ДатаУзла.Шрифт = ШрифтЖизненногоЦиклаВспомогательный;
		ДатаУзла.Заголовок = Формат(ЭлементСхемыЖизненногоЦикла.Дата, "ДФ='dd.MM.yyyy HH:mm'");
		ДатаУзла.Видимость = ЗначениеЗаполнено(ДатаУзла.Заголовок);
		ДатаУзла.Высота = 1;
		
		// Заголовок узла.
		Если ЗначениеЗаполнено(ЭлементДанныхЖизненногоЦикла.ЗаголовокУзла) Тогда
			ЗаголовокУзла = Форма.Элементы[ЭлементДанныхЖизненногоЦикла.ЗаголовокУзла];
		Иначе
			ЗаголовокУзла = РаботаСФормами.ДобавитьНадпись(
				Форма,
				СтрШаблон("ЗаголовокУзла%1", НомерЭлемента),
				ГруппаДатаИЗаголовокУзла,
				"");
			
			ЭлементДанныхЖизненногоЦикла.ЗаголовокУзла = ЗаголовокУзла.Имя;
		КонецЕсли;
		ЗаголовокУзла.РастягиватьПоГоризонтали = Истина;
		ЗаголовокУзла.Ширина = 1;
		ЗаголовокУзла.Высота =
			?(ЭлементСхемыЖизненногоЦикла.ТипУзла = Перечисления.ТипыУзловЖизненногоЦикла.УзелСостояния,
				2,
				1);
		ЗаголовокУзла.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
		ЗаголовокУзла.Заголовок = ЭлементСхемыЖизненногоЦикла.Заголовок;
		ЗаголовокУзла.Видимость = ЗначениеЗаполнено(ЗаголовокУзла.Заголовок);
		
		Если ЭлементСхемыЖизненногоЦикла.ТипУзла = Перечисления.ТипыУзловЖизненногоЦикла.УзелСостояния Тогда
			ЗаголовокУзла.ЦветТекста = ЦветТекстаЖизненногоЦиклаВажный;
			ЗаголовокУзла.Шрифт = ШрифтЖизненногоЦиклаВажный;
		Иначе
			ЗаголовокУзла.ЦветТекста = ЦветТекстаЖизненногоЦиклаОсновной;
			ЗаголовокУзла.Шрифт = ШрифтЖизненногоЦиклаОсновной;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементСхемыЖизненногоЦикла.НавигационнаяСсылка) Тогда
			ЗаголовокУзла.Гиперссылка = Истина;
			ЗаголовокУзла.Подсказка = ЭлементСхемыЖизненногоЦикла.НавигационнаяСсылка;
			ЗаголовокУзла.ЦветТекста = ЦветТекстаГиперссылка;
		Иначе
			ЗаголовокУзла.Гиперссылка = Ложь;
			ЗаголовокУзла.Подсказка = "";
		КонецЕсли;
		ЗаголовокУзла.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		ЗаголовокУзла.УстановитьДействие("Нажатие", "Подключаемый_Нажатие");
		
		// Группа дополнения узла.
		Если ЗначениеЗаполнено(ЭлементДанныхЖизненногоЦикла.ГруппаДополнениеУзла) Тогда
			ГруппаДополнениеУзла = Форма.Элементы[ЭлементДанныхЖизненногоЦикла.ГруппаДополнениеУзла];
		Иначе
			ГруппаДополнениеУзла = РаботаСФормами.ДобавитьОбычнуюГруппу(
				Форма,
				СтрШаблон("ГруппаДополнениеУзла%1", НомерЭлемента),
				ГруппаУзла);
			ЭлементДанныхЖизненногоЦикла.ГруппаДополнениеУзла = ГруппаДополнениеУзла.Имя;
		КонецЕсли;
		ГруппаДополнениеУзла.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ЕстьДополнение = ЗначениеЗаполнено(ЭлементСхемыЖизненногоЦикла.Описание)
			Или ЭлементСхемыЖизненногоЦикла.Приложения.Количество() > 0;
		ГруппаДополнениеУзла.Видимость = ЕстьДополнение;
		
		// Картинка дополнения узла
		Если ЗначениеЗаполнено(ЭлементДанныхЖизненногоЦикла.КартинкаДополненияУзла) Тогда
			КартинкаДополненияУзла = Форма.Элементы[ЭлементДанныхЖизненногоЦикла.КартинкаДополненияУзла];
		Иначе
			КартинкаДополненияУзла = РаботаСФормами.ДобавитьКартинку(
				Форма,
				СтрШаблон("КартинкаДополненияУзла%1", НомерЭлемента),
				ГруппаДополнениеУзла,
				Новый Картинка);
			ЭлементДанныхЖизненногоЦикла.КартинкаДополненияУзла = КартинкаДополненияУзла.Имя;
		КонецЕсли;
		КартинкаДополненияУзла.РастягиватьПоВертикали = Истина;
		КартинкаДополненияУзла.РазмерКартинки = РазмерКартинки.Растянуть;
		
		Если ХарактерСледующегоУзла = Перечисления.ХарактерыРезультатов.Нейтральный Тогда
			
			КартинкаДополненияУзла.Картинка = БиблиотекаКартинок.ОтступЖизненногоЦиклаСерый;
			
		ИначеЕсли ХарактерСледующегоУзла = Перечисления.ХарактерыРезультатов.Положительный Тогда
			
			КартинкаДополненияУзла.Картинка = БиблиотекаКартинок.ОтступЖизненногоЦиклаЗеленый;
			
		ИначеЕсли ХарактерСледующегоУзла = Перечисления.ХарактерыРезультатов.Отрицательный Тогда
			
			КартинкаДополненияУзла.Картинка = БиблиотекаКартинок.ОтступЖизненногоЦиклаКрасный;
			
		Иначе
			
			КартинкаДополненияУзла.Картинка = БиблиотекаКартинок.ОтступЖизненногоЦиклаПрозрачный;
			
		Конецесли;
		
		// Группа описание дополнения.
		Если ЗначениеЗаполнено(ЭлементДанныхЖизненногоЦикла.ГруппаОписаниеДополнения) Тогда
			ГруппаОписаниеДополнения = Форма.Элементы[ЭлементДанныхЖизненногоЦикла.ГруппаОписаниеДополнения];
		Иначе
			ГруппаОписаниеДополнения = РаботаСФормами.ДобавитьОбычнуюГруппу(
				Форма,
				СтрШаблон("ГруппаОписаниеДополнения%1", НомерЭлемента),
				ГруппаДополнениеУзла);
			ЭлементДанныхЖизненногоЦикла.ГруппаОписаниеДополнения = ГруппаОписаниеДополнения.Имя;
		КонецЕсли;
		ГруппаОписаниеДополнения.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ГруппаОписаниеДополнения.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
		
		// Описание дополнения.
		Если ЗначениеЗаполнено(ЭлементДанныхЖизненногоЦикла.ОписаниеДополненияУзла) Тогда
			ОписаниеДополненияУзла = Форма.Элементы[ЭлементДанныхЖизненногоЦикла.ОписаниеДополненияУзла];
		Иначе
			ОписаниеДополненияУзла = РаботаСФормами.ДобавитьНадпись(
				Форма,
				СтрШаблон("ОписаниеДополненияУзла%1", НомерЭлемента),
				ГруппаОписаниеДополнения,
				"");
			ЭлементДанныхЖизненногоЦикла.ОписаниеДополненияУзла = ОписаниеДополненияУзла.Имя;
		КонецЕсли;
		ОписаниеДополненияУзла.ЦветТекста = ЦветТекстаЖизненногоЦиклаВспомогательный;
		ОписаниеДополненияУзла.Шрифт = ШрифтЖизненногоЦиклаОсновной;
		ОписаниеДополненияУзла.РастягиватьПоГоризонтали = Истина;
		ОписаниеДополненияУзла.Ширина = 1;
		ОписаниеДополненияУзла.Заголовок = ЭлементСхемыЖизненногоЦикла.Описание;
		ОписаниеДополненияУзла.Видимость = ЗначениеЗаполнено(ОписаниеДополненияУзла.Заголовок);
		
		// Приложения дополнения.
		ИндексПриложения = 0;
		Для Каждого ЭлементДанныхПриложения Из ЭлементДанныхЖизненногоЦикла.ДанныеПриложенийУзла Цикл
			ЭлементДанныхПриложения.Значение.Актуален = Ложь;
		КонецЦикла;
		
		Для Каждого Приложение Из ЭлементСхемыЖизненногоЦикла.Приложения Цикл
			
			НомерПриложения = ИндексПриложения + 1;
			
			Если ЭлементДанныхЖизненногоЦикла.ДанныеПриложенийУзла.Количество() >= НомерПриложения Тогда
				
				ЭлементДанныхПриложения = ЭлементДанныхЖизненногоЦикла.ДанныеПриложенийУзла[ИндексПриложения].Значение;
				
			Иначе
				
				ЭлементДанныхПриложения = Новый Структура;
				ЭлементДанныхПриложения.Вставить("Актуален", Ложь);
				ЭлементДанныхПриложения.Вставить("ГруппаПриложениеДополнения", "");
				ЭлементДанныхПриложения.Вставить("ЗаголовокПриложения", "");
				ЭлементДанныхПриложения.Вставить("КартинкаПриложения", "");
				ЭлементДанныхПриложения.Вставить("Приложение", Неопределено);
				ЭлементДанныхПриложения.Вставить("КомандаПросмотреть", "");
				ЭлементДанныхПриложения.Вставить("КнопкаПросмотретьКартинка", "");
				ЭлементДанныхПриложения.Вставить("КнопкаПросмотретьЗаголовок", "");
				ЭлементДанныхПриложения.Вставить("КомандаСохранитьНаДиск", "");
				ЭлементДанныхПриложения.Вставить("КнопкаСохранитьНаДискКартинка", "");
				ЭлементДанныхПриложения.Вставить("КнопкаСохранитьНаДискЗаголовок", "");
				
				ЭлементДанныхЖизненногоЦикла.ДанныеПриложенийУзла.Добавить(ЭлементДанныхПриложения);
				
			КонецЕсли;
			ЭлементДанныхПриложения.Актуален = Истина;
			ЭлементДанныхПриложения.Приложение = Приложение.Приложение;
			
			// Группа приложение дополнения.
			Если ЗначениеЗаполнено(ЭлементДанныхПриложения.ГруппаПриложениеДополнения) Тогда
				ГруппаПриложениеДополнения = Форма.Элементы[ЭлементДанныхПриложения.ГруппаПриложениеДополнения];
			Иначе
				ГруппаПриложениеДополнения = РаботаСФормами.ДобавитьОбычнуюГруппу(
					Форма,
					СтрШаблон("ГруппаПриложениеДополнения%1_%2", НомерЭлемента, НомерПриложения),
					ГруппаОписаниеДополнения);
				ЭлементДанныхПриложения.ГруппаПриложениеДополнения = ГруппаПриложениеДополнения.Имя;
			КонецЕсли;
			ГруппаПриложениеДополнения.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаПриложениеДополнения.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
			
			// Команда "Просмотреть".
			Если ЗначениеЗаполнено(ЭлементДанныхПриложения.КомандаПросмотреть) Тогда
				КомандаПросмотреть = Форма.Команды[ЭлементДанныхПриложения.КомандаПросмотреть];
			Иначе
				КомандаПросмотреть = РаботаСФормами.ДобавитьКоманду(
					Форма,
					СтрШаблон("КомандаПросмотреть%1_%2", НомерЭлемента, НомерПриложения),
					НСтр("ru = 'Просмотреть'"),
					НСтр("ru = 'Открыть для просмотра'"),
					БиблиотекаКартинок.ОткрытьВыбранныйФайл);
				ЭлементДанныхПриложения.КомандаПросмотреть = КомандаПросмотреть.Имя;
			КонецЕсли;
			
			// Команда "Сохранить на диск".
			Если ЗначениеЗаполнено(ЭлементДанныхПриложения.КомандаСохранитьНаДиск) Тогда
				КомандаСохранитьНаДиск = Форма.Команды[ЭлементДанныхПриложения.КомандаСохранитьНаДиск];
			Иначе
				КомандаСохранитьНаДиск = РаботаСФормами.ДобавитьКоманду(
					Форма,
					СтрШаблон("КомандаСохранитьНаДиск%1_%2", НомерЭлемента, НомерПриложения),
					НСтр("ru = 'Сохранить на диск...'"),
					НСтр("ru = 'Сохранить на диск...'"),
					БиблиотекаКартинок.СохранитьФайлКак);
				ЭлементДанныхПриложения.КомандаСохранитьНаДиск = КомандаСохранитьНаДиск.Имя;
			КонецЕсли;
			
			// Картинка приложения.
			Если ЗначениеЗаполнено(ЭлементДанныхПриложения.КартинкаПриложения) Тогда
				
				КартинкаПриложения = Форма.Элементы[ЭлементДанныхПриложения.КартинкаПриложения];
				
			Иначе
				
				ПутьКартинкиПриложения = СтрШаблон("КартинкаПриложения%1_%2", НомерЭлемента, НомерПриложения);
				
				РаботаСФормами.ДобавитьРеквизит(
					Форма,
					ПутьКартинкиПриложения,
					Тип("Число"));
				Форма[ПутьКартинкиПриложения] = Приложение.ИндексКартинки;
				
				КартинкаПриложения = РаботаСФормами.ДобавитьПолеКартинки(
					Форма,
					ПутьКартинкиПриложения,
					ГруппаПриложениеДополнения,
					ПутьКартинкиПриложения,
					БиблиотекаКартинок.КоллекцияПиктограммФайлов);
				КартинкаПриложения.УстановитьДействие("Нажатие", "Подключаемый_Нажатие");
				
				ЭлементДанныхПриложения.КартинкаПриложения = КартинкаПриложения.Имя;
				
			КонецЕсли;
			КартинкаПриложения.Гиперссылка = Истина;
			
			// Кнопка "Просмотреть" в контекстном меню картинки приложения.
			Если ЗначениеЗаполнено(ЭлементДанныхПриложения.КнопкаПросмотретьКартинка) Тогда
				КнопкаПросмотретьКартинка = Форма.Элементы[ЭлементДанныхПриложения.КнопкаПросмотретьКартинка];
			Иначе
				КнопкаПросмотретьКартинка = РаботаСФормами.ДобавитьКнопку(
					Форма,
					СтрШаблон("КнопкаПросмотретьКартинка%1_%2", НомерЭлемента, НомерПриложения),
					КартинкаПриложения.КонтекстноеМеню,
					КомандаПросмотреть.Имя);
				ЭлементДанныхПриложения.КнопкаПросмотретьКартинка = КнопкаПросмотретьКартинка.Имя;
			КонецЕсли;
			
			// Кнопка "Сохранить на диск" в контекстном меню картинки приложения.
			Если ЗначениеЗаполнено(ЭлементДанныхПриложения.КнопкаСохранитьНаДискКартинка) Тогда
				КнопкаСохранитьНаДискКартинка = Форма.Элементы[ЭлементДанныхПриложения.КнопкаСохранитьНаДискКартинка];
			Иначе
				КнопкаСохранитьНаДискКартинка = РаботаСФормами.ДобавитьКнопку(
					Форма,
					СтрШаблон("КнопкаСохранитьНаДискКартинка%1_%2", НомерЭлемента, НомерПриложения),
					КартинкаПриложения.КонтекстноеМеню,
					КомандаСохранитьНаДиск.Имя);
				ЭлементДанныхПриложения.КнопкаСохранитьНаДискКартинка = КнопкаСохранитьНаДискКартинка.Имя;
			КонецЕсли;
			КнопкаСохранитьНаДискКартинка.Видимость =
				ТипЗнч(Приложение.Приложение) = Тип("СправочникСсылка.Файлы");
			
			// Заголовок приложения.
			Если ЗначениеЗаполнено(ЭлементДанныхПриложения.ЗаголовокПриложения) Тогда
				
				ЗаголовокПриложения = Форма.Элементы[ЭлементДанныхПриложения.ЗаголовокПриложения];
				
			Иначе
				
				ПутьЗаголовкаПриложения = СтрШаблон("ЗаголовокПриложения%1_%2", НомерЭлемента, НомерПриложения);
				
				ЗаголовокПриложения = РаботаСФормами.ДобавитьНадпись(
					Форма,
					ПутьЗаголовкаПриложения,
					ГруппаПриложениеДополнения,
					"");
				ЗаголовокПриложения.УстановитьДействие("Нажатие", "Подключаемый_Нажатие");
				
				ЭлементДанныхПриложения.ЗаголовокПриложения = ЗаголовокПриложения.Имя;
				
			КонецЕсли;
			ЗаголовокПриложения.ЦветТекста = ЦветТекстаЖизненногоЦиклаВспомогательный;
			ЗаголовокПриложения.Шрифт = ШрифтЖизненногоЦиклаВспомогательный;
			ЗаголовокПриложения.РастягиватьПоГоризонтали = Истина;
			ЗаголовокПриложения.Ширина = 1;
			ЗаголовокПриложения.Гиперссылка = Истина;
			ЗаголовокПриложения.Заголовок = Приложение.Заголовок;
			
			// Кнопка "Просмотреть" в контекстном меню картинки приложения.
			Если ЗначениеЗаполнено(ЭлементДанныхПриложения.КнопкаПросмотретьЗаголовок) Тогда
				КнопкаПросмотретьЗаголовок = Форма.Элементы[ЭлементДанныхПриложения.КнопкаПросмотретьЗаголовок];
			Иначе
				КнопкаПросмотретьЗаголовок = РаботаСФормами.ДобавитьКнопку(
					Форма,
					СтрШаблон("КнопкаПросмотретьЗаголовок%1_%2", НомерЭлемента, НомерПриложения),
					ЗаголовокПриложения.КонтекстноеМеню,
					КомандаПросмотреть.Имя);
				ЭлементДанныхПриложения.КнопкаПросмотретьЗаголовок = КнопкаПросмотретьЗаголовок.Имя;
			КонецЕсли;
			
			// Кнопка "Сохранить на диск" в контекстном меню картинки приложения.
			Если ЗначениеЗаполнено(ЭлементДанныхПриложения.КнопкаСохранитьНаДискЗаголовок) Тогда
				КнопкаСохранитьНаДискЗаголовок = Форма.Элементы[ЭлементДанныхПриложения.КнопкаСохранитьНаДискЗаголовок];
			Иначе
				КнопкаСохранитьНаДискЗаголовок = РаботаСФормами.ДобавитьКнопку(
					Форма,
					СтрШаблон("КнопкаСохранитьНаДискЗаголовок%1_%2", НомерЭлемента, НомерПриложения),
					ЗаголовокПриложения.КонтекстноеМеню,
					КомандаСохранитьНаДиск.Имя);
				ЭлементДанныхПриложения.КнопкаСохранитьНаДискЗаголовок = КнопкаСохранитьНаДискЗаголовок.Имя;
			КонецЕсли;
			КнопкаСохранитьНаДискЗаголовок.Видимость =
				ТипЗнч(Приложение.Приложение) = Тип("СправочникСсылка.Файлы");
				
			ИндексПриложения = ИндексПриложения + 1;
			
		КонецЦикла;
		
		Для Каждого ЭлементДанныхПриложения Из ЭлементДанныхЖизненногоЦикла.ДанныеПриложенийУзла Цикл
			
			Форма.Элементы[ЭлементДанныхПриложения.Значение.ГруппаПриложениеДополнения].Видимость =
				ЭлементДанныхПриложения.Значение.Актуален;
			
		КонецЦикла;
		
		ИндексЭлемента = ИндексЭлемента + 1;
		
	КонецЦикла;
	
	// Удалим невостребованные.
	Для Каждого ЭлементДанныхЖизненногоЦикла Из ДанныеЖизненногоЦикла Цикл
		
		Если ЭлементДанныхЖизненногоЦикла.Актуален Тогда
			Продолжить;
		КонецЕсли;
		
		Форма.Элементы[ЭлементДанныхЖизненногоЦикла.ГруппаУзла].Видимость = Ложь;
		
	КонецЦикла;
	
	ГруппаЖизненныйЦиклКонтейнерПрокрутка.Видимость = РазмерСхемыЖизненногоЦикла <> 0;
	
#Иначе
	ВызватьИсключение НСтр("ru = 'Метод ОбновитьЖизненныйЦикл не доступен во внешнем соединении.'");
#КонецЕсли
	
КонецПроцедуры

// Обрабатывает отмену задачи.
//
// Параметры:
//  ЗадачаКОтмене - ДокументСсылка.Задача.
//  ПредметКОтмене - Произвольный.
//  ПричинаОтмены - Строка.
//  ОбработанныеПредметы - Соответствие из КлючИЗначение:
//   * Ключ - Произвольный
//   * Значение - Булево
//
Процедура ОбработатьОтмену(ЗадачаКОтмене, ПредметКОтмене, ПричинаОтмены, ОбработанныеПредметы) Экспорт
	
	Если ОбработанныеПредметы[ПредметКОтмене] <> Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	НачатьТранзакцию();
	Попытка
		
		ОтменаОбработана = ИнтеграцияЗадач.ОбработатьОтмену(
			ЗадачаКОтмене,
			ПредметКОтмене,
			ПричинаОтмены);
		Если Не ОтменаОбработана Тогда
			
			ЗадачаОбъект = ЗадачаКОтмене.ПолучитьОбъект();
			
			ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ЗадачаОбъект.ВидЗадачи);
			
			ЗадачаОбъект.УстановитьСостояние(ДанныеВидаЗадачи.СостояниеЗадачиОтменена, Истина);
			ЗадачаОбъект.ПричинаОтмены = ПричинаОтмены;
			
			ЗадачаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			КонтекстОтмены = РегистрыСведений.ИсторияЗадач.КонтекстОтмены();
			КонтекстОтмены.ПричинаОтмены = ПричинаОтмены;
			
			РегистрыСведений.ИсторияЗадач.Добавить(
				ЗадачаКОтмене,
				Документы.ДействиеЗадачи.ПустаяСсылка(),
				ТекущаяДатаСеанса(),
				Справочники.СобытияЗадач.Отмена,
				КонтекстОтмены,
				ПользователиДокументооборот.ОлицетворяемыйПользователь());
			
		КонецЕсли;
		
		ОбработанныеПредметы[ПредметКОтмене] = Истина;
		
		ИнтеграцияЗадач.ПриОтменеЗадачи(ЗадачаКОтмене);
		
		УстановитьПривилегированныйРежим(Истина);
		
		ПодзадачиКОтмене = ПодзадачиКОтмене(ЗадачаКОтмене);
		Для Каждого Подзадача Из ПодзадачиКОтмене Цикл
			
			ОбработатьОтмену(Подзадача, Подзадача, ПричинаОтмены, ОбработанныеПредметы);
			
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обрабатывает остановку задачи. (паузу)
//
// Параметры:
//  ЗадачаКОтмене - ДокументСсылка.Задача
//  ПредметКОтмене - Произвольный
//  НаПаузу - Булево
//  ОбработанныеПредметы - Соответствие из КлючИЗначение:
//   * Ключ - Произвольный
//   * Значение - Булево
//
Процедура ОбработатьОстановку(ЗадачаКОтмене, ПредметКОтмене, НаПаузу, ОбработанныеПредметы) Экспорт
	
	Если ОбработанныеПредметы[ПредметКОтмене] <> Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	НачатьТранзакцию();
	Попытка
		
		ЗадачаОбъект = ЗадачаКОтмене.ПолучитьОбъект();
		
		ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ЗадачаОбъект.ВидЗадачи);

		Если НаПаузу Тогда
			ЗадачаОбъект.УстановитьСостояние(ДанныеВидаЗадачи.СостояниеЗадачиОтложена, Истина);
		Иначе	
			
			ОтложенаПроверка = Ложь;
			
			Для Каждого СтрокаУчастника Из ЗадачаОбъект.Участники Цикл
				
				Если СтрокаУчастника.ВидУчастника <> ДанныеВидаЗадачи.ВидУчастникаПроверяющий Тогда
					Продолжить;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаУчастника.ДействиеУчастника) Тогда
					Прервать;
				КонецЕсли;
				
				СостояниеПроверяющего = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					СтрокаУчастника.ДействиеУчастника, "СостояниеУчастникаЗадачи");
				
				ОтложенаПроверка =
					СостояниеПроверяющего = Справочники.СостоянияУчастниковЗадач.Отложена;
				
				Прервать;
				
			КонецЦикла;
			
			Если ОтложенаПроверка Тогда
				ЗадачаОбъект.УстановитьСостояние(ДанныеВидаЗадачи.СостояниеЗадачиНаПроверке, Истина);
			Иначе
				ЗадачаОбъект.УстановитьСостояние(ДанныеВидаЗадачи.СостояниеЗадачиВРаботе, Истина);
			КонецЕсли;
			
		КонецЕсли;	
		
		ЗадачаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		КонтекстИзмененияЗадачи = РегистрыСведений.ИсторияЗадач.КонтекстИзмененияЗадачи();
		
		РегистрыСведений.ИсторияЗадач.Добавить(
			ЗадачаКОтмене,
			Документы.ДействиеЗадачи.ПустаяСсылка(),
			ТекущаяДатаСеанса(),
			Справочники.СобытияЗадач.ИзмененаЗадача,
			КонтекстИзмененияЗадачи,
			ПользователиДокументооборот.ОлицетворяемыйПользователь());
		
		ОбработанныеПредметы[ПредметКОтмене] = Истина;
		
		УстановитьПривилегированныйРежим(Истина);
		
		//ПодзадачиКОтмене = ПодзадачиКОтмене(ЗадачаКОтмене);   
		
		Если НаПаузу Тогда
			ПодзадачиКОтмене = ПодзадачиКОтмене(ЗадачаКОтмене);
		Иначе	
			ПодзадачиКОтмене = ПодзадачиНаПаузе(ЗадачаКОтмене);
		КонецЕсли;	
		
		Для Каждого Подзадача Из ПодзадачиКОтмене Цикл
			
			ОбработатьОстановку(Подзадача, Подзадача, НаПаузу, ОбработанныеПредметы);
			
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обработчик регламентного задания "Обслуживание итогов задач".
//
Процедура ОбслуживаниеИтоговЗадач() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбслуживаниеИтоговЗадач);
	
	МаксимальныйПериод  = Дата(1,1,1); // Не используем рассчитанные итоги.
	МинимальныйПериод = Дата(1,1,1); // Не используем рассчитанные итоги.
	
	// Расчет итогов для регистров накопления.
	РегистрыНакопленияКОбработке = Новый Массив;
	РегистрыНакопленияКОбработке.Добавить(РегистрыНакопления.КоличествоЗадачПоАвторам);
	РегистрыНакопленияКОбработке.Добавить(РегистрыНакопления.КоличествоЗадачПоИсполнителям);
	
	Для Каждого РегистрНакопленияМенеджер Из РегистрыНакопленияКОбработке Цикл
		
		Если РегистрНакопленияМенеджер.ПолучитьМинимальныйПериодРассчитанныхИтогов() <> МинимальныйПериод Тогда
			РегистрНакопленияМенеджер.УстановитьМинимальныйПериодРассчитанныхИтогов(МинимальныйПериод);
		КонецЕсли;
		
		Если РегистрНакопленияМенеджер.ПолучитьМаксимальныйПериодРассчитанныхИтогов() <> МаксимальныйПериод Тогда
			РегистрНакопленияМенеджер.УстановитьМаксимальныйПериодРассчитанныхИтогов(МаксимальныйПериод);
		КонецЕсли;
		
		РегистрНакопленияМенеджер.ПересчитатьТекущиеИтоги();
		
	КонецЦикла;
	
КонецПроцедуры

// Отменяет взятие в работу действия задачи.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
//  КтоОтметил - СправочникСсылка.Сотрудники
//
Процедура ОтменитьВзятиеВРаботу(ДействиеЗадачи, КтоОтметил) Экспорт
	
	ОтменаВзятияВРаботуОбработано = ИнтеграцияЗадач.ОбработатьОтменуВзятияВРаботу(
		ДействиеЗадачи,
		КтоОтметил);
	Если ОтменаВзятияВРаботуОбработано Тогда
		
		РеквДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДействиеЗадачи, "Исполнитель, Задача");
		ОписаниеВПротокол = СтрШаблон(
			НСтр("ru = 'Отмена взятия задачи участника %1 в работу'"),
			РеквДействия.Исполнитель);
		ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(РеквДействия.Задача, ОписаниеВПротокол);
		
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		ДействиеЗадачиОбъект = ДействиеЗадачи.ПолучитьОбъект();
		ВидСостоянияУчастниковЗадач = РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(ДействиеЗадачиОбъект.СостояниеУчастникаЗадачи);
		Если Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоДействиеВРаботе(ВидСостоянияУчастниковЗадач) Тогда
			
			ВидЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеЗадачиОбъект.Задача, "ВидЗадачи");
			
			ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
			
			ДействиеЗадачиОбъект.УстановитьСостояние(
				ДанныеВидаЗадачи.СостояниеУчастниковНовая,
				КтоОтметил,
				Истина);
			
			ИсходныйИсполнитель = Документы.ДействиеЗадачи.ИсходныйИсполнитель(ДействиеЗадачи);
			Если ДействиеЗадачиОбъект.Исполнитель <> ИсходныйИсполнитель Тогда
				ДействиеЗадачиОбъект.Исполнитель = ИсходныйИсполнитель;
			КонецЕсли;
			
			ДействиеЗадачиОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			ОписаниеВПротокол = СтрШаблон(
				НСтр("ru = 'Отмена взятия задачи участника %1 в работу'"),
				ДействиеЗадачиОбъект.Исполнитель);
			ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(ДействиеЗадачиОбъект.Задача, ОписаниеВПротокол);
			
		КонецЕсли;

		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Возвращает описание поступивших обновлений задачи.
// 
// Параметры:
// 	ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
// 	
// Возвращаемое значение:
// 	Строка.
//
Функция ОписаниеПоступившихОбновленийЗадачи(ДействиеЗадачи) Экспорт
	
	ДанныеДействияЗадачи = ДанныеДействияЗадачи(ДействиеЗадачи);
	Если ДанныеДействияЗадачи = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ОписаниеПоступившихОбновленийЗадачи = ДанныеДействияЗадачи.ОписаниеПоступившихОбновлений;
	
	Возврат ОписаниеПоступившихОбновленийЗадачи;
	
КонецФункции

// Формирует HTML описание инструкции.
// 
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
// 
// Возвращаемое значение:
//  Строка - HTML описание инструкции.
// 
Функция ОписаниеHTMLИнструкции(ДействиеЗадачи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОписаниеHTMLИнструкции = "";
	Если Не ЗначениеЗаполнено(ДействиеЗадачи)
		Или ТипЗнч(ДействиеЗадачи) <> Тип("ДокументСсылка.ДействиеЗадачи")
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции") Тогда
		Возврат ОписаниеHTMLИнструкции;
	КонецЕсли;
	
	РеквизитыДействияЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДействиеЗадачи,
		"Задача, ВидДействия, Источник");
	Если ЗначениеЗаполнено(РеквизитыДействияЗадачи.Источник)
		И ТипЗнч(РеквизитыДействияЗадачи.Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		ДанныеФормыВыполненияЗадачи =
			БизнесПроцессыИЗадачиВызовСервера.ПолучитьФормуВыполненияЗадачи(
				РеквизитыДействияЗадачи.Источник);
		Если Не ДанныеФормыВыполненияЗадачи.Свойство("ИмяФормы")
			Или Не ЗначениеЗаполнено(ДанныеФормыВыполненияЗадачи.ИмяФормы) Тогда
			Возврат ОписаниеHTMLИнструкции;
		КонецЕсли;
		
		ИмяФормы = ДанныеФормыВыполненияЗадачи.ИмяФормы;
		
		ЗадачаПроцесса = РеквизитыДействияЗадачи.Источник; // ЗадачаСсылка.ЗадачаИсполнителя
		ПредметыЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ЗадачаПроцесса,
			"Предметы").Выгрузить();
		ПредметыЗадачи.Сортировать("НомерСтроки Возр");
		
	ИначеЕсли РеквизитыДействияЗадачи.ВидДействия = Справочники.ВидыДействийЗадач.Исполнить
		Или РеквизитыДействияЗадачи.ВидДействия = Справочники.ВидыДействийЗадач.Проверить
		Или РеквизитыДействияЗадачи.ВидДействия = Справочники.ВидыДействийЗадач.Согласовать
		Или РеквизитыДействияЗадачи.ВидДействия = Справочники.ВидыДействийЗадач.ОбработатьРезультат
		Или РеквизитыДействияЗадачи.ВидДействия = Справочники.ВидыДействийЗадач.Ознакомиться Тогда
		
		Если РеквизитыДействияЗадачи.ВидДействия = Справочники.ВидыДействийЗадач.Исполнить Тогда
			
			ИмяФормы = "БизнесПроцесс.Поручение.Форма.ФормаЗадачиИсполнителя";
			
		ИначеЕсли РеквизитыДействияЗадачи.ВидДействия = Справочники.ВидыДействийЗадач.Проверить Тогда
			
			ИмяФормы = "БизнесПроцесс.Поручение.Форма.ФормаЗадачиПроверяющего";
			
		ИначеЕсли РеквизитыДействияЗадачи.ВидДействия = Справочники.ВидыДействийЗадач.Согласовать Тогда
			
			ИмяФормы = "БизнесПроцесс.Согласование.Форма.ФормаЗадачиИсполнителя";
			
		ИначеЕсли РеквизитыДействияЗадачи.ВидДействия = Справочники.ВидыДействийЗадач.ОбработатьРезультат Тогда
			
			ИмяФормы = "БизнесПроцесс.Согласование.Форма.ФормаЗадачиОзнакомиться";
			
		ИначеЕсли РеквизитыДействияЗадачи.ВидДействия = Справочники.ВидыДействийЗадач.Ознакомиться Тогда
			
			ИмяФормы = "БизнесПроцесс.Ознакомление.Форма.ФормаЗадачиИсполнителя";
			
		КонецЕсли;
		
		ПредметыЗадачи = Новый ТаблицаЗначений;
		ПредметыЗадачи.Колонки.Добавить("Предмет");
		
		ПриложенияЗадачи = ПриложенияЗадачи(РеквизитыДействияЗадачи.Задача, ДействиеЗадачи);
		
		Для Каждого ДанныеПриложенияЗадачи Из ПриложенияЗадачи Цикл
			
			Если Не ЗначениеЗаполнено(ДанныеПриложенияЗадачи.Приложение) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаПредмета = ПредметыЗадачи.Добавить();
			СтрокаПредмета.Предмет = ДанныеПриложенияЗадачи.Приложение;
			
		КонецЦикла;
		
	Иначе
		
		Возврат ОписаниеHTMLИнструкции;
		
	КонецЕсли;
	
	ПредметыИнструкции = Новый Массив;
	РаботаСИнструкциямиПереопределяемый.ПредметыИнструкцийСоответствующиеФорме(
		ПредметыИнструкции,
		Неопределено,
		ИмяФормы,
		ПредметыЗадачи);
	
	Инструкции = Новый Массив;
	Если Не РаботаСИнструкциями.ЕстьИнструкции(ПредметыИнструкции, Инструкции) Тогда
		Возврат ОписаниеHTMLИнструкции;
	КонецЕсли;
	
	ОписаниеHTMLИнструкции = РаботаСИнструкциями.ТекстыИнструкций(Инструкции);
	
	Возврат ОписаниеHTMLИнструкции;
	
КонецФункции

// Очищает приложения задачи.
// 
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//
Процедура ОчиститьПриложения(ДействиеЗадачи) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ДействиеОбъект = ДействиеЗадачи.ПолучитьОбъект();
		
		Для Каждого СтрокаПриложения Из ДействиеОбъект.Приложения Цикл
			
			Если ТипЗнч(СтрокаПриложения.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
				
				ФайлОбъект = СтрокаПриложения.Приложение.ПолучитьОбъект();
				Если ФайлОбъект.ВладелецФайла = ДействиеЗадачи Тогда
					ФайлОбъект.УстановитьПометкуУдаления(Истина);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДействиеОбъект.Приложения.Очистить();
		
		ДействиеОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Определяет подзадачи.
//
// Параметры:
//  ЗадачаИлиДействие - ДокументСсылка.Задача
//                    - ДокументСсылка.ДействиеЗадачи
// 
// Возвращаемое значение:
//  Массив из ДокументСсылка.Задача
//
Функция Подзадачи(ЗадачаИлиДействие) Экспорт
	
	НайденныеПодзадачи = Новый Массив;
	Если Не ЗначениеЗаполнено(ЗадачаИлиДействие) Тогда
		Возврат НайденныеПодзадачи;
	КонецЕсли;
	
	Если ТипЗнч(ЗадачаИлиДействие) = Тип("ДокументСсылка.Задача") Тогда
		НайденныеПодзадачи = Документы.Задача.НайтиПодзадачи(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗадачаИлиДействие));
	ИначеЕсли ТипЗнч(ЗадачаИлиДействие) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		НайденныеПодзадачи = Документы.ДействиеЗадачи.НайтиПодзадачи(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗадачаИлиДействие));
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный тип владельца подзадач %1.'"),
			ТипЗнч(ЗадачаИлиДействие));
	КонецЕсли;
	
	Возврат НайденныеПодзадачи;
	
КонецФункции

// Определяет, задачи каких исполнителей являются задачами подчиненных.
//
// Параметры:
//  ТолькоДействующие - Булево.
//  ВключаяЗамещаемых - Булево.
// 
// Возвращаемое значение:
//  Массив из ОпределяемыйТип.УчастникЗадач - Исполнители, задачи которых может выполнять пользователь или сотрудник.
//
Функция ПодчиненныеИсполнителиЗадач(ТолькоДействующие = Истина, ВключаяЗамещаемых = Ложь) Экспорт
	
	Подчиненные = РаботаСПользователями.Подчиненные(
		Пользователи.ТекущийПользователь(),
		ТолькоДействующие);
	
	ИсключенияИзПодчиненных = ИсключенияИзПодчиненных();
	Подчиненные = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		Подчиненные,
		ИсключенияИзПодчиненных);
	
	ПодчиненныеИсполнителиЗадач = ИсполнителиЗадач(Подчиненные, ВключаяЗамещаемых, Ложь);
	
	Возврат ПодчиненныеИсполнителиЗадач;
	
КонецФункции

// Определяет приложения задачи.
//
// Параметры:
//   Задача - ДокументСсылка.Задача.
//   ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//   КешДанных - Структура - кеш данных, который требуется для ускорения работы различных механизмов.
//
// Возвращаемое значение:
//   Массив из см. РаботаСЗадачами.ДанныеПриложенияЗадачи
//
Функция ПриложенияЗадачи(Задача, ДействиеЗадачи, КешДанных = Неопределено) Экспорт
	
	ПриложенияЗадачи = Новый Массив;
	Если Не ЗначениеЗаполнено(Задача) Тогда
		Возврат ПриложенияЗадачи;
	КонецЕсли;
	
	ПриложенияЗадачи = ИнтеграцияЗадач.ПриложенияЗадачи(Задача, ДействиеЗадачи, КешДанных);
	Если ПриложенияЗадачи <> Неопределено Тогда
		Возврат ПриложенияЗадачи;
	КонецЕсли;
	
	ПриложенияЗадачи = Новый Массив;
	
	ТаблицаПриложения = Неопределено;
	Если КешДанных <> Неопределено И КешДанных.Свойство("ДанныеДокументовЗадача") Тогда
		РеквизитыЗадачи = КешДанных.ДанныеДокументовЗадача[Задача];
		Если РеквизитыЗадачи <> Неопределено Тогда
			ТаблицаПриложения = РеквизитыЗадачи.Приложения;
		КонецЕсли;
	КонецЕсли;
	Если ТаблицаПриложения = Неопределено Тогда
		ТаблицаПриложения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "Приложения");
	КонецЕсли;
	
	ТаблицаПриложения = ТаблицаПриложения.Выгрузить();
	ТаблицаПриложения.Сортировать("НомерСтроки Возр");
	
	Для Каждого СтрокаПриложения Из ТаблицаПриложения Цикл
		
		ДанныеПриложенияЗадачи = ДанныеПриложенияЗадачи();
		ДанныеПриложенияЗадачи.Приложение = СтрокаПриложения.Приложение;
		
		ПриложенияЗадачи.Добавить(ДанныеПриложенияЗадачи);
		
	КонецЦикла;
	
	Возврат ПриложенияЗадачи;
	
КонецФункции

// Обновляет дерево приложений на форме.
//
// Параметры:
//   ПараметрыОбновления - см. РаботаСЗадачамиКлиентСервер.НовыйПараметрыОбновленияДереваПриложений
//   ОписаниеHTMLИнструкции - Строка - неявно возвращаемое значение, описание HTML инструкции.
//   КешДанных - Структура - кеш данных, который требуется для ускорения работы различных механизмов.
//
Процедура ОбновитьДеревоПриложений(ПараметрыОбновления, ОписаниеHTMLИнструкции = "", КешДанных = Неопределено) Экспорт
	
	// Сформируем данные строк.
	ДанныеДереваПриложений = ДанныеДереваПриложений(
		ПараметрыОбновления.Задача,
		ПараметрыОбновления.ДействиеЗадачи,
		КешДанных);
	РаботаСЗадачамиКлиентСервер.ОбновитьДеревоПриложений(
		ПараметрыОбновления.РеквизитДерева,
		ПараметрыОбновления.ЭлементДерева,
		ДанныеДереваПриложений);
	
	// Сформируем текст инструкции для БИД.
	Если Не ПараметрыСеанса.ЭтоМобильныйКлиент Тогда
		ОписаниеHTMLИнструкции = ОписаниеHTMLИнструкции(ПараметрыОбновления.ДействиеЗадачи);
	КонецЕсли;
	
КонецПроцедуры

// Определяет окончание рабочего дня на указанную дату.
//
// Параметры:
//  Дата - Дата - Дата, окончание рабочего дня которой необходимо получить.
// 
// Возвращаемое значение:
//  Дата - Окончание рабочего дня.
//
Функция ОкончаниеРабочегоДня(Дата) Экспорт
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Возврат Дата;
	КонецЕсли;
	
	ГрафикРаботы = ГрафикиРаботы.ГрафикРаботыСотрудника(Сотрудники.ОсновнойСотрудник());
	Если Не ЗначениеЗаполнено(ГрафикРаботы) Тогда
		Возврат КонецДня(Дата);
	КонецЕсли;
	
	Попытка
		
		ОкончаниеДня = ГрафикиРаботы.ПолучитьНачалоИОкончаниеРабочегоДня(Дата, ГрафикРаботы).ОкончаниеДня;
		Если Не ЗначениеЗаполнено(ОкончаниеДня) Тогда
			Возврат КонецДня(Дата);
		КонецЕсли;
		
		Возврат Дата(
			Год(Дата),
			Месяц(Дата),
			День(Дата),
			Час(ОкончаниеДня),
			Минута(ОкончаниеДня),
			Секунда(ОкончаниеДня));
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Графики работы'", Метаданные.ОсновнойЯзык.КодЯзыка),
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат КонецДня(Дата);
		
	КонецПопытки;
	
КонецФункции

// Отменяет указанные задачи.
//
// Параметры:
//  ЗадачиКОтмене - Массив из ДокументСсылка.Задача.
//  ПричинаОтмены - Строка.
//
Процедура ОтменитьЗадачи(ЗадачиКОтмене, ПричинаОтмены) Экспорт
	
	ОбработанныеПредметы = Новый Соответствие;
	
	ПредметыКОтмене = ПредметыКОтмене(ЗадачиКОтмене);
	Для Каждого ЗадачаКОтмене Из ЗадачиКОтмене Цикл
		
		ПредметКОтмене = ПредметыКОтмене[ЗадачаКОтмене];
		Если ОбработанныеПредметы[ПредметКОтмене] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбработатьОтмену(ЗадачаКОтмене, ПредметКОтмене, ПричинаОтмены, ОбработанныеПредметы);
		
	КонецЦикла;
	
КонецПроцедуры

// Отменяет выполнение действия задачи.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//  ВерсияДанных - Строка.
//
Процедура ОтменитьВыполнение(Знач ДействиеЗадачи, Знач ВерсияДанных) Экспорт
	
	Если Не ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Не указано действие задачи %1 (%2).'"),
			ДействиеЗадачи,
			ТипЗнч(ДействиеЗадачи));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВерсияДанных) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Не указана версия данных %1 (%2).'"),
			ВерсияДанных,
			ТипЗнч(ВерсияДанных));
	КонецЕсли;
	
	Задача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеЗадачи, "Задача");
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.Задача");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Задача);
		ЭлементБлокировки = Блокировка.Добавить("Документ.ДействиеЗадачи");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ДействиеЗадачи);
		Блокировка.Заблокировать();
		
		РеквизитыДействияЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДействиеЗадачи,
			"Ссылка, ВерсияДанных, Задача, Источник, Исполнитель");
		РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Задача,
			"Ссылка, Автор, ВидЗадачи, СостояниеЗадачи, Участники");
		ТаблицаУчастники = РеквизитыЗадачи.Участники.Выгрузить();
		ТаблицаУчастники.Сортировать("НомерСтроки Возр");
		
		ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(РеквизитыЗадачи.ВидЗадачи);
		
		Если РеквизитыДействияЗадачи.ВерсияДанных <> ВерсияДанных Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось отменить выполнение. Возможно, задача была изменена другим сотрудником.'");
		КонецЕсли;
		
		Если Не ДоступнаОтменаВыполнения(ДействиеЗадачи) Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Не доступна отмена выполнения задачи %1 (%2).'"),
				ДействиеЗадачи,
				ТипЗнч(ДействиеЗадачи));
		КонецЕсли;
		
		ОтменаВыполненияОбработана = ИнтеграцияЗадач.ОбработатьОтменуВыполнение(РеквизитыДействияЗадачи);
		Если Не ОтменаВыполненияОбработана Тогда
			
			ДействиеЗадачиОбъект = ДействиеЗадачи.ПолучитьОбъект();
			
			Если ЗначениеЗаполнено(ДействиеЗадачиОбъект.ФактическийИсполнитель) Тогда
				РеквизитыФактическогоИсполнителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					ДействиеЗадачиОбъект.ФактическийИсполнитель,
					"План");
				ДействиеЗадачиОбъект.Исполнитель = РеквизитыФактическогоИсполнителя.План;
				ДействиеЗадачиОбъект.ФактическийИсполнитель = Справочники.ФактическиеИсполнители.ПустаяСсылка();
			КонецЕсли;
			
			Если ДействиеЗадачиОбъект.ВидДействия = ДанныеВидаЗадачи.ВидДействияИсполнителя Тогда
				
				ДействиеЗадачиОбъект.УстановитьСостояние(
					ДанныеВидаЗадачи.СостояниеУчастниковВРаботе,
					Сотрудники.ОсновнойСотрудник(),
					Истина);
				
			ИначеЕсли ДействиеЗадачиОбъект.ВидДействия = ДанныеВидаЗадачи.ВидДействияПроверяющего Тогда
				
				ДействиеЗадачиОбъект.УстановитьСостояние(
					ДанныеВидаЗадачи.СостояниеУчастниковНаПроверке,
					Сотрудники.ОсновнойСотрудник(),
					Истина);
				
			Иначе
				
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Неизвестный алгоритм для отмены выполнения действия вида %1.'"),
					ДействиеЗадачиОбъект.ВидДействия);
				
			КонецЕсли;
			
			ДействиеЗадачиОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЕсли;
		
		// Уведомления.
		АдресатыУведомления = Новый Массив;
		
		УведомитьИсполнителя = Не Сотрудники.ЭтоСотрудникиОдногоФизЛица(
			РеквизитыДействияЗадачи.Исполнитель,
			Сотрудники.ОсновнойСотрудник());
		Если УведомитьИсполнителя И ЗначениеЗаполнено(РеквизитыДействияЗадачи.Исполнитель) Тогда
			АдресатыУведомления.Добавить(РеквизитыДействияЗадачи.Исполнитель);
		КонецЕсли;
		
		УведомитьАвтора = 
			(РеквизитыЗадачи.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЗакрыта
				Или (ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеЗадачиЗакрытаОтрицательно)
					И РеквизитыЗадачи.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЗакрытаОтрицательно)
				Или (ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеЗадачиЗакрытаСЗамечаниями)
					И РеквизитыЗадачи.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЗакрытаСЗамечаниями))
			И Не Сотрудники.ЭтоСотрудникиОдногоФизЛица(
				РеквизитыЗадачи.Автор,
				Сотрудники.ОсновнойСотрудник());
		Если УведомитьАвтора И ЗначениеЗаполнено(РеквизитыЗадачи.Автор) Тогда
			АдресатыУведомления.Добавить(РеквизитыЗадачи.Автор);
		КонецЕсли;
		
		Если РеквизитыЗадачи.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиНаПроверке Тогда
			
			СтрокаПроверяющего = ТаблицаУчастники.Найти(
				ДанныеВидаЗадачи.ВидУчастникаПроверяющий,
				"ВидУчастника");
			Проверяющий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				СтрокаПроверяющего.ДействиеУчастника,
				"Исполнитель");
			УведомитьАвтора = Не Сотрудники.ЭтоСотрудникиОдногоФизЛица(
				Проверяющий,
				Сотрудники.ОсновнойСотрудник());
			Если УведомитьАвтора И ЗначениеЗаполнено(Проверяющий) Тогда
				АдресатыУведомления.Добавить(Проверяющий);
			КонецЕсли;
			
		КонецЕсли;
		
		КонтекстСобытия = Новый Структура;
		КонтекстСобытия.Вставить("Дата", ТекущаяДатаСеанса());
		КонтекстСобытия.Вставить("ДействиеЗадачи", ДействиеЗадачи);
		КонтекстСобытия.Вставить("Задача", РеквизитыДействияЗадачи.Задача);
		КонтекстСобытия.Вставить("Исполнитель", РеквизитыДействияЗадачи.Исполнитель);
		КонтекстСобытия.Вставить("Автор", РеквизитыЗадачи.Автор);
		КонтекстСобытия.Вставить("КтоОтметил", Сотрудники.ОсновнойСотрудник());
		КонтекстСобытия.Вставить("АдресатыУведомления", АдресатыУведомления);
		
		БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(
			ДействиеЗадачи,
			Справочники.ВидыБизнесСобытий.ОтменаВыполненияЗадачи,
			Новый ХранилищеЗначения(КонтекстСобытия));
		
		// История задач.
		КонтекстОтменыВыполнения = РегистрыСведений.ИсторияЗадач.КонтекстОтменыВыполнения();
		КонтекстОтменыВыполнения.Исполнитель = РеквизитыДействияЗадачи.Исполнитель;
		КонтекстОтменыВыполнения.ДействиеЗадачи = ДействиеЗадачи;
		
		РегистрыСведений.ИсторияЗадач.Добавить(
			РеквизитыДействияЗадачи.Задача,
			РеквизитыДействияЗадачи.Ссылка,
			ТекущаяДатаСеанса(),
			Справочники.СобытияЗадач.ОтменаВыполнения,
			КонтекстОтменыВыполнения,
			ПользователиДокументооборот.ОлицетворяемыйПользователь());
		
		// Протокол работы.
		ОписаниеВПротокол = СтрШаблон(
			НСтр("ru = 'Отмена выполнения задачи участника %1'"), 
			РеквизитыДействияЗадачи.Исполнитель);
		
		ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(
			РеквизитыДействияЗадачи.Задача,
			ОписаниеВПротокол);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Определяет ожидающие выполнения действия задач по приложениям.
// 
// Параметры:
// 	Приложения - Массив из ОпределяемыйТип.ПриложениеЗадач.
// 	
// Возвращаемое значение:
// 	Массив из ДокументСсылка.ДействиеЗадачи.
// 	
Функция ОжидающиеВыполненияДействияЗадачПоПриложениям(Приложения) Экспорт
	
	ОжидающиеВыполненияДействия = Новый Массив;
	Если Приложения.Количество() = 0 Тогда
		Возврат ОжидающиеВыполненияДействия;
	КонецЕсли;
	
	ЗадачиПоПриложениям = Документы.Задача.НайтиПоПриложениям(Приложения);
	
	ОжидающиеВыполненияДействия = Документы.ДействиеЗадачи.ОжидающиеВыполненияДействияЗадач(ЗадачиПоПриложениям);
	
	Возврат ОжидающиеВыполненияДействия;
	
КонецФункции

// Определяет действия задач начатые.
// 
// Параметры:
// 	МассивЗадач -  Массив Из ДокументСсылка.Задача.
// 	
// Возвращаемое значение:
// 	Массив из ДокументСсылка.ДействиеЗадачи.
// 	
Функция НачатыеИлиОжидаемыеДействияЗадачПоЗадачам(МассивЗадач) Экспорт
	
	НачатыеИлиОжидаемыеДействия = Новый Массив;
	Если МассивЗадач.Количество() = 0 Тогда
		Возврат НачатыеИлиОжидаемыеДействия;
	КонецЕсли;
	
	НачатыеИлиОжидаемыеДействия = Документы.ДействиеЗадачи.НачатыеИлиОжидаемыеДействияЗадач(МассивЗадач);
	
	Возврат НачатыеИлиОжидаемыеДействия;
	
КонецФункции

// Проверяет заполненность полей задачи и направляет её на исполнение, если все поля корректно заполнены.
//
// Параметры:
//  ПараметрыНаправленияНаИсполнение - см. РаботаСЗадачамиКлиентСервер.НовыйПараметрыНаправленияНаИсполнение.
// 	
// Возвращаемое значение:
// 	См. РаботаСЗадачамиКлиентСервер.НовыйРезультатНаправленияНаИсполнение.
//
Функция НаправитьНаИсполнение(ПараметрыНаправленияНаИсполнение) Экспорт
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПараметрыНаправленияНаИсполнение.Задача,
		"ДатаНачалаПлан, Срок, Участники");
	ВсеУчастники = РеквизитыЗадачи.Участники.Выгрузить().ВыгрузитьКолонку("Участник");
	
	Если ПараметрыНаправленияНаИсполнение.ЭтоИнтерактивноеДействие Тогда
		
		РезультатНаправленияНаИсполнение =
			РаботаСЗадачамиКлиентСервер.НовыйРезультатНаправленияНаИсполнение();
		РезультатНаправленияНаИсполнение.ПараметрыНаправленияНаИсполнение =
			ПараметрыНаправленияНаИсполнение;
		
		Если Не ПараметрыНаправленияНаИсполнение.ОтсутствияПроверены Тогда
			
			РезультатНаправленияНаИсполнение.РезультатПроверкиОтсутствий =
				Отсутствия.ПроверитьОтсутствия(
					ВсеУчастники,
					РеквизитыЗадачи.ДатаНачалаПлан,
					РеквизитыЗадачи.Срок);
			Если РезультатНаправленияНаИсполнение.РезультатПроверкиОтсутствий.ЕстьОтсутствия Тогда
				РезультатНаправленияНаИсполнение.ТребуетсяПредупредитьОбОтсутствиях = Истина;
				РезультатНаправленияНаИсполнение.ТребуетсяИнтерактивноеДействие = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если РезультатНаправленияНаИсполнение.ТребуетсяИнтерактивноеДействие Тогда
			Возврат РезультатНаправленияНаИсполнение;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыНаправленияНаИсполнение.ЗапуститьВФоне = Неопределено Тогда
		
		ЗадачиОперации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
			ПараметрыНаправленияНаИсполнение.Задача);
		РеквизитыЗадач = Новый Соответствие;
		РеквизитыЗадач[ПараметрыНаправленияНаИсполнение.Задача] = РеквизитыЗадачи;
		
		ПараметрыНаправленияНаИсполнение.ЗапуститьВФоне = ЭтоДлительнаяОперация(
			ЗадачиОперации,
			РеквизитыЗадач);
		
	КонецЕсли;
	
	Если ПараметрыНаправленияНаИсполнение.ЗапуститьВФоне Тогда
		
		ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(
			ПараметрыНаправленияНаИсполнение.ИдентификаторФормы);
		ПараметрыВыполненияВФоне.ОжидатьЗавершение = 0;
		
		ДлительнаяОперация = ДлительныеОперации.ВыполнитьФункцию(
			ПараметрыВыполненияВФоне,
			"РаботаСЗадачами.НаправитьНаИсполнениеРеализация",
			ПараметрыНаправленияНаИсполнение);
		Если ДлительнаяОперация.Статус = "Выполняется" Тогда
			
			РезультатНаправленияНаИсполнение.ЗапущенаДлительнаяОперация = Истина;
			РезультатНаправленияНаИсполнение.ДлительнаяОперация = ДлительнаяОперация;
			
		ИначеЕсли ДлительнаяОперация.Статус = "Выполнено" Тогда
			
			ЗначениеИзХранилища = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
			ЗаполнитьЗначенияСвойств(РезультатНаправленияНаИсполнение, ЗначениеИзХранилища);
			
		ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
			
			ВызватьИсключение ДлительнаяОперация.ПодробноеПредставлениеОшибки;
			
		ИначеЕсли ДлительнаяОперация.Статус = "Отменено" Тогда
			
			ВызватьИсключение НСтр("ru = 'Не удалось направить на исполнение, длительная операция отменена.'");
			
		Иначе
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный статус длительной операции %1'"),
				ДлительнаяОперация.Статус);
			
		КонецЕсли;
		
	Иначе
		
		РезультатНаправленияНаИсполнение = НаправитьНаИсполнениеРеализация(ПараметрыНаправленияНаИсполнение);
		
	КонецЕсли;
	
	Возврат РезультатНаправленияНаИсполнение;
	
КонецФункции

// Реализация направления на исполнения задачи..
//
// Параметры:
//  ПараметрыНаправленияНаИсполнение - см. РаботаСЗадачамиКлиентСервер.НовыйПараметрыНаправленияНаИсполнение.
//  
// Возвращаемое значение:
//  См. РаботаСЗадачамиКлиентСервер.НовыйРезультатНаправленияНаИсполнение.
//
Функция НаправитьНаИсполнениеРеализация(ПараметрыНаправленияНаИсполнение) Экспорт
	
	РезультатНаправленияНаИсполнение =
		РаботаСЗадачамиКлиентСервер.НовыйРезультатНаправленияНаИсполнение();
	РезультатНаправленияНаИсполнение.ПараметрыНаправленияНаИсполнение =
		ПараметрыНаправленияНаИсполнение;
	
	НачатьТранзакцию();
	Попытка
		
		ЗадачаОбъект =
			РезультатНаправленияНаИсполнение.ПараметрыНаправленияНаИсполнение.Задача.ПолучитьОбъект();
		
		ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ЗадачаОбъект.ВидЗадачи);
		
		ЗадачаОбъект.УстановитьСостояние(ДанныеВидаЗадачи.СостояниеЗадачиНовая, Истина);
		
		Если ЗадачаОбъект.ПроверитьЗаполнение() Тогда 
			
			ЗадачаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			РегистрыСведений.ИсторияЗадач.Добавить(
				ЗадачаОбъект.Ссылка,
				Документы.ДействиеЗадачи.ПустаяСсылка(),
				ТекущаяДатаСеанса(),
				Справочники.СобытияЗадач.НаправленаНаИсполнение,
				Неопределено,
				ЗадачаОбъект.Автор);
			Если ЗначениеЗаполнено(ЗадачаОбъект.ВышестоящаяЗадача) Тогда
				
				КонтекстПодзадачи = РегистрыСведений.ИсторияЗадач.КонтекстПодзадачи();
				КонтекстПодзадачи.АвторПодзадачи = ЗадачаОбъект.Автор;
				КонтекстПодзадачи.Подзадача = ЗадачаОбъект.Ссылка;
				КонтекстПодзадачи.ПредставлениеИсполнителей = ПредставлениеИсполнителейЗадачи(ЗадачаОбъект.Ссылка);
				
				РегистрыСведений.ИсторияЗадач.Добавить(
					ЗадачаОбъект.ВышестоящаяЗадача,
					ЗадачаОбъект.ВышестоящееДействие,
					ТекущаяДатаСеанса(),
					Справочники.СобытияЗадач.ПодзадачаНаправленаНаИсполнение,
					КонтекстПодзадачи,
					ЗадачаОбъект.Автор);
				
			КонецЕсли;
			
			РезультатНаправленияНаИсполнение.НаправленаНаИсполнение = Истина;
			
			ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ЗадачаОбъект.ВидЗадачи);
			РезультатНаправленияНаИсполнение.ТекстОповещения =
				ДанныеВидаЗадачи.ТерминНаправленаНаИсполнение;
			
			РезультатНаправленияНаИсполнение.ВышестоящаяЗадача = ЗадачаОбъект.ВышестоящаяЗадача;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат РезультатНаправленияНаИсполнение;
	
КонецФункции

// Перенаправляет задачу.
//
// Параметры:
//  ЗадачиИлиДействия - Массив из ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи
//  ОтКого - ОпределяемыйТип.УчастникЗадач
//  Кому - ОпределяемыйТип.УчастникЗадач
//  Комментарий - Строка
//  ЗакрыватьПодзадачи - Булево
//                     - Неопределено
// 
// Возвращаемое значение:
//  См. РаботаСЗадачамиКлиентСервер.НовыеДанныеПеренаправления
// 
Функция Перенаправить(ЗадачиИлиДействия, ОтКого, Кому, Комментарий, ЗакрыватьПодзадачи) Экспорт
	
	ДанныеПеренаправления = РаботаСЗадачамиКлиентСервер.НовыеДанныеПеренаправления();
	
	Если ЗакрыватьПодзадачи = Неопределено Тогда
		
		ДанныеПодзадачПодлежащихЗакрытию = ПодзадачиПодлежащиеЗакрытию(ЗадачиИлиДействия);
		Если ДанныеПодзадачПодлежащихЗакрытию.ПодзадачиПодлежащиеЗакрытию.Количество() > 0 Тогда
			
			ДанныеПеренаправления.ПредложитьЗакрытьПодзадачи = Истина;
			ДанныеПеренаправления.КоличествоНезавершенныхПодзадач =
				ДанныеПодзадачПодлежащихЗакрытию.ПодзадачиПодлежащиеЗакрытию.Количество();
			
			ДанныеПеренаправления.ТребуетсяИнтерактивноеДействие = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеПеренаправления.ТребуетсяИнтерактивноеДействие Тогда
		Возврат ДанныеПеренаправления;
	КонецЕсли;
	
	Для Каждого ЗадачаИлиДействие Из ЗадачиИлиДействия Цикл
		
		Задача = Неопределено;
		ОтКогоФактический = Неопределено;
			
		Если ТипЗнч(ЗадачаИлиДействие) = Тип("ДокументСсылка.Задача") Тогда
			
			Задача = ЗадачаИлиДействие;
			ОтКогоФактический = ОтКого;
			
			Действие = Неопределено;
			
			ТаблицаУчастники = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "Участники");
			ТаблицаУчастники = ТаблицаУчастники.Выгрузить();
			ТаблицаУчастники.Сортировать("НомерСтроки Возр");
			
			Для Каждого СтрокаУчастника Из ТаблицаУчастники Цикл
				
				РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					СтрокаУчастника.ДействиеУчастника,
					"Исполнитель, СостояниеУчастникаЗадачи");
				Если РеквизитыДействия.Исполнитель <> ОтКого Тогда
					Продолжить;
				КонецЕсли;
				
				ВидСостояния = РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(
					РеквизитыДействия.СостояниеУчастникаЗадачи);
				
				ЭтоОжидаемоеДействие = Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОжидаемоеДействие(
					ВидСостояния);
				Если Не ЭтоОжидаемоеДействие Тогда
					Продолжить;
				КонецЕсли;
				
				Действие = СтрокаУчастника.ДействиеУчастника;
				
			КонецЦикла;
			
			Если Действие = Неопределено Тогда
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Не найдено действие участника %1.'"),
					ОтКого);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЗадачаИлиДействие) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
			
			Действие = ЗадачаИлиДействие;
			РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие, "Задача, Исполнитель");
			Задача = РеквизитыДействия.Задача;
			ОтКогоФактический = РеквизитыДействия.Исполнитель;
			
		Иначе
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестен алгоритм обработки перенаправления для %1 (%2)'"),
				ЗадачаИлиДействие,
				ТипЗнч(ЗадачаИлиДействие));
			
		КонецЕсли;
		
		Если Не ПривилегированныйРежим() Тогда
			ПраваНаДействия = ДокументооборотПраваДоступа.ПраваПользователейПоОбъектам(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Действие),
				Истина,
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Пользователи.ТекущийПользователь()));
			ПраваНаДействие = ПраваНаДействия.Найти(Действие, "ОбъектДоступа");
			Если ПраваНаДействие = Неопределено Или ПраваНаДействие.Изменение <> Истина Тогда
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Недостаточно прав для перенаправления действия %1'"),
					Действие);
			КонецЕсли;
		КонецЕсли;
				
		УстановитьПривилегированныйРежим(Истина);

		НачатьТранзакцию();
		Попытка
			
			ПеренаправлениеОбработано = ИнтеграцияЗадач.ОбработатьПеренаправление(
				Действие,
				Кому,
				Комментарий);
				
			Если Не ПеренаправлениеОбработано Тогда
				
				ДействиеОбъект = Действие.ПолучитьОбъект();
				
				ВидСостоянияУчастниковЗадач = РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(ДействиеОбъект.СостояниеУчастникаЗадачи);
				Если Не Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОжидаемоеДействие(ВидСостоянияУчастниковЗадач) Тогда
					ВызватьИсключение СтрШаблон(
						НСтр("ru = 'Невозможно перенаправить задачу, т.к. она находится в состоянии %1.'"),
						ДействиеОбъект.СостояниеУчастникаЗадачи);
				КонецЕсли;
				
				ДействиеОбъект.Исполнитель = Кому;
				ДействиеОбъект.СостояниеУчастникаЗадачи = Справочники.СостоянияУчастниковЗадач.Новая;
				ДействиеОбъект.ДатаНачала = Дата(1, 1, 1);
				ДействиеОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
				Документы.Задача.ОбновитьЗадачуПриПеренаправлении(Задача, Действие, Ложь);
				
				Задача = ДействиеОбъект.Задача;
			
				КонтекстПеренаправления = РегистрыСведений.ИсторияЗадач.КонтекстПеренаправления();
				КонтекстПеренаправления.ОтКого = ОтКогоФактический;
				КонтекстПеренаправления.Кому = Кому;
				КонтекстПеренаправления.Комментарий = Комментарий;
				
				РегистрыСведений.ИсторияЗадач.Добавить(
					Задача,
					ДействиеОбъект.Ссылка,
					ТекущаяДатаСеанса(),
					Справочники.СобытияЗадач.Перенаправление,
					КонтекстПеренаправления,
					ПользователиДокументооборот.ОлицетворяемыйПользователь());
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Комментарий) Тогда
				ОписаниеВПротокол = СтрШаблон(НСтр("ru = 'Задача: %1 перенаправлена к %2. Комментарий: %3'"), 
					ОтКогоФактический, Кому, Комментарий);
			Иначе
				ОписаниеВПротокол = СтрШаблон(НСтр("ru = 'Задача: %1 перенаправлена к %2.'"), 
					ОтКогоФактический, Кому);	
			КонецЕсли;	
			ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(Задача, ОписаниеВПротокол);
			
			Если ЗакрыватьПодзадачи = Истина Тогда
				ЗакрытьПодзадачи(Действие);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЦикла;
	
	Возврат ДанныеПеренаправления;
	
КонецФункции

// Возвращает персональную настройку текущего пользователя.
//
// Параметры:
//  Настройка- Строка - Настройка.
// 
// Возвращаемое значение:
//  Произвольный - Значение настройки.
//
Функция ПолучитьПерсональнуюНастройку(Настройка) Экспорт
	
	Если СтрНачинаетсяС(Настройка, "БыстрыйПоиск") Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"Задачи",
			Настройка,
			Новый Массив);
		
	ИначеЕсли СтрНачинаетсяС(Настройка, "ПоказыватьВыполненные") Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"Задачи",
			Настройка,
			Ложь);
		
	ИначеЕсли Настройка = "СрокПоУмолчанию" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"Задачи",
			"СрокПоУмолчанию",
			0);
		
	ИначеЕсли Настройка = "ОтображениеКарточкиЗадачи" Тогда
		
		Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"Задачи",
			"ОтображениеКарточкиЗадачи",
			Перечисления.ВариантыОтображенияОбластиЧтения.Справа);
		Если Значение = Перечисления.ВариантыОтображенияОбластиЧтения.Внизу Тогда
			Значение = Перечисления.ВариантыОтображенияОбластиЧтения.Справа;
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Некорректная персональная настройка: ""%1""'"),
			Настройка);
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Определяет, каким пользователям направляются задачи исполнителей, с учетом ролевой адресации и делегирования.
//
// Параметры:
//  Исполнители - ОпределяемыйТип.УчастникЗадач, 
//				  Массив из ОпределяемыйТип.УчастникЗадач
//				  СписокЗначений из ОпределяемыйТип.УчастникЗадач - Исполнители.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Пользователи - Пользователи, которые могут выполнять задачи исполнителей.
//
Функция ПользователиИсполнителей(Исполнители) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиРолейИДелегаты.ИсполнительДелегат КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|ГДЕ
		|	ИсполнителиРолейИДелегаты.РольСотрудник В (&Исполнители)
		|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""Задачи"", ""ЗадачиПросмотр"")");
	
	Запрос.УстановитьПараметр("Исполнители", Исполнители);
	
	СотрудникиИсполнителей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	ПользователиИсполнителей = Сотрудники.ПользователиСотрудников(СотрудникиИсполнителей);
	
	Возврат ПользователиИсполнителей;
	
КонецФункции

// Определяет порядок состояний участников для каждого вида участника задачи.
//
// Параметры:
//  ВидЗадачи - СправочникСсылка.ВидыЗадач - Вид задачи.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.ВидыУчастниковЗадач
//  * Значение - Массив из СправочникСсылка.СостоянияУчастниковЗадач
//
Функция ПорядокСостоянийУчастников(ВидЗадачи) Экспорт
	
	ПорядокСостоянийУчастников = Новый Соответствие;
	Если Не ЗначениеЗаполнено(ВидЗадачи) Тогда
		Возврат ПорядокСостоянийУчастников;
	КонецЕсли;
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
	ДанныеНабораСостояний = РаботаСЗадачамиПовтИсп.ДанныеНабораСостояний(ВидЗадачи);
	
	ВсеВидыУчастников = Новый Массив;
	ВсеРезультатыДействий = Новый Массив;
	Для Каждого КлючИЗначение Из ДанныеНабораСостояний.СостоянияУчастниковВРаботе Цикл
		
		ВидУчастника = КлючИЗначение.Ключ;
		
		Если Не ЗначениеЗаполнено(ВидУчастника) Тогда
			Продолжить;
		КонецЕсли;
		
		ВсеВидыУчастников.Добавить(ВидУчастника);
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ДанныеНабораСостояний.СостоянияУчастниковСовершено Цикл
		
		ВидУчастника = КлючИЗначение.Ключ;
		СостоянияПоРезультатам = КлючИЗначение.Значение;
		
		Если Не ЗначениеЗаполнено(ВидУчастника) Тогда
			Продолжить;
		КонецЕсли;
		
		ВсеВидыУчастников.Добавить(ВидУчастника);
		
		Для Каждого ВложенныйКлючИЗначение Из СостоянияПоРезультатам Цикл
			
			РезультатДействия = ВложенныйКлючИЗначение.Ключ;
			
			Если Не ЗначениеЗаполнено(ВидУчастника) Тогда
				Продолжить;
			КонецЕсли;
			
			ВсеРезультатыДействий.Добавить(РезультатДействия);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВсеВидыУчастников = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВсеВидыУчастников);
	ВсеРезультатыДействий = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВсеРезультатыДействий);
	
	СписокСортировки = Новый СписокЗначений();
	Для Каждого РезультатДействия Из ВсеРезультатыДействий Цикл
		ХарактерРезультата = РаботаСЗадачамиПовтИсп.ХарактерРезультата(РезультатДействия);
		ПорядокСостояния = Перечисления.ХарактерыРезультатов.ПорядокСостояния(ХарактерРезультата);
		СтрокаСортировки = СтрШаблон("%1/%2",
			ПорядокСостояния,
			РезультатДействия.УникальныйИдентификатор());
		СписокСортировки.Добавить(РезультатДействия, СтрокаСортировки);
	КонецЦикла;
	СписокСортировки.СортироватьПоПредставлению();
	ВсеРезультатыДействий = СписокСортировки.ВыгрузитьЗначения();
	
	ПорядокСостоянийУчастников = Новый Соответствие;
	Для Каждого ВидУчастника Из ВсеВидыУчастников Цикл
		
		ПорядокСостоянийУчастника = Новый Массив;
		
		ПорядокСостоянийУчастника.Добавить(
			СостояниеУчастникаЗадачи(
				Перечисления.ВидыСостоянийУчастниковЗадач.ПустаяСсылка(),
				ВидЗадачи,
				ВидУчастника,
				Справочники.РезультатыДействийЗадач.ПустаяСсылка()));
		
		ПорядокСостоянийУчастника.Добавить(
			СостояниеУчастникаЗадачи(
				Перечисления.ВидыСостоянийУчастниковЗадач.Новая,
				ВидЗадачи,
				ВидУчастника,
				Справочники.РезультатыДействийЗадач.ПустаяСсылка()));
		
		ПорядокСостоянийУчастника.Добавить(
			СостояниеУчастникаЗадачи(
				Перечисления.ВидыСостоянийУчастниковЗадач.ВРаботе,
				ВидЗадачи,
				ВидУчастника,
				Справочники.РезультатыДействийЗадач.ПустаяСсылка()));
		
		Если ЭтоИсполнитель(ВидУчастника) Тогда
			
			Если ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверки) Тогда
				ПорядокСостоянийУчастника.Добавить(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверки);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиОтрицательно) Тогда
				ПорядокСостоянийУчастника.Добавить(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиОтрицательно);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиСЗамечаниями) Тогда
				ПорядокСостоянийУчастника.Добавить(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиСЗамечаниями);
			КонецЕсли;
			
		КонецЕсли;
		
		ПорядокСостоянийУчастника.Добавить(
			СостояниеУчастникаЗадачи(
				Перечисления.ВидыСостоянийУчастниковЗадач.НаОбработкеРезультата,
				ВидЗадачи,
				ВидУчастника,
				Справочники.РезультатыДействийЗадач.ПустаяСсылка()));
		
		Для Каждого РезультатДействия Из ВсеРезультатыДействий Цикл
			
			СостояниеВыполнена = СостояниеУчастникаЗадачи(
				Перечисления.ВидыСостоянийУчастниковЗадач.Выполнена,
				ВидЗадачи,
				ВидУчастника,
				РезультатДействия);
			Если Не ЗначениеЗаполнено(СостояниеВыполнена) Тогда
				Продолжить;
			КонецЕсли;
			
			ПорядокСостоянийУчастника.Добавить(СостояниеВыполнена);
			
		КонецЦикла;
		
		ПорядокСостоянийУчастника.Добавить(
			СостояниеУчастникаЗадачи(
				Перечисления.ВидыСостоянийУчастниковЗадач.Отложена,
				ВидЗадачи,
				ВидУчастника,
				Справочники.РезультатыДействийЗадач.ПустаяСсылка()));
		
		ПорядокСостоянийУчастника.Добавить(
			СостояниеУчастникаЗадачи(
				Перечисления.ВидыСостоянийУчастниковЗадач.Отменена,
				ВидЗадачи,
				ВидУчастника,
				Справочники.РезультатыДействийЗадач.ПустаяСсылка()));
		
		// Перевернём массив.
		ПеревернутыйМассив = Новый Массив;
		
		КоличествоЭлементов = ПорядокСостоянийУчастника.Количество();
		Для Индекс = 1 По КоличествоЭлементов Цикл
			ПеревернутыйМассив.Добавить(ПорядокСостоянийУчастника[КоличествоЭлементов - Индекс]);
		КонецЦикла;
		
		ПорядокСостоянийУчастника = ПеревернутыйМассив;
		
		ПорядокСостоянийУчастников.Вставить(
			ВидУчастника,
			ПорядокСостоянийУчастника);
		
	КонецЦикла;
	
	Возврат ПорядокСостоянийУчастников;
	
КонецФункции

// Определяет предметы к отмене.
// 
// Параметры:
//  ЗадачиКОтмене - Массив из ДокументСсылка.Задача.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//   * Ключ - ДокументСсылка.Задача
//   * Значение - Произвольный
//
Функция ПредметыКОтмене(ЗадачиКОтмене) Экспорт
	
	ПредметыКОтмене = ИнтеграцияЗадач.ПредметыКОтмене(ЗадачиКОтмене);
	
	Для Каждого ЗадачаКОтмене Из ЗадачиКОтмене Цикл
		
		Если ПредметыКОтмене[ЗадачаКОтмене] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПредметыКОтмене[ЗадачаКОтмене] = ЗадачаКОтмене;
		
	КонецЦикла;
	
	Возврат ПредметыКОтмене;
	
КонецФункции

// Определяет предмет к отмене.
// 
// Параметры:
//  ЗадачаКОтмене - ДокументСсылка.Задача.
// 
// Возвращаемое значение:
//  Произвольный - Предмет к отмене.
//  
Функция ПредметКОтмене(ЗадачаКОтмене) Экспорт
	
	ЗадачиКОтмене = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗадачаКОтмене);
	ПредметыКОтмене = ПредметыКОтмене(ЗадачиКОтмене);
	ПредметКОтмене = ПредметыКОтмене[ЗадачаКОтмене];
	
	Возврат ПредметКОтмене;
	
КонецФункции

// Формирует представление дней просрочки выполнения действия.
//
// Параметры:
//  Исполнитель - ОпределяемыйТип.УчастникЗадач - Исполнитель.
//  Срок - Дата - Срок.
//  ДатаВыполнения - Дата - Дата выполнения
// 
// Возвращаемое значение:
//  Строка - Представление дней просрочки выполнения действия.
//
Функция ПредставлениеДнейПросрочки(Исполнитель, Срок, ДатаВыполнения) Экспорт
	
	ПредставлениеДнейПросрочки = "";
	ДниПросрочки = ДниПросрочки(Исполнитель, Срок, ДатаВыполнения);
	
	Если Не ЗначениеЗаполнено(ДниПросрочки) Тогда
		Возврат ПредставлениеДнейПросрочки;
	КонецЕсли;
	
	Если ДниПросрочки < 1 Тогда
		ДниПросрочки = 1;
	КонецЕсли;
	
	ДниПросрочки = Окр(ДниПросрочки);
#Если Не ВнешнееСоединение Тогда
	ПредставлениеДнейПросрочки = СтрокаСЧислом(
		НСтр("ru = ';%1 день;;%1 дня;%1 дней;%1 дня'"),
		ДниПросрочки,
		ВидЧисловогоЗначения.Количественное);
#Иначе
	ВызватьИсключение НСтр("ru = 'Метод ПредставлениеДнейПросрочки не доступен во внешнем соединении.'");
#КонецЕсли
	
	Возврат ПредставлениеДнейПросрочки;
	
КонецФункции

// Формирует представление исполнителей задач.
//
// Параметры:
//  МассивЗадач - Массив из ДокументСсылка.Задача - Задачи.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//   * Ключ - ДокументСсылка.Задача
//   * Значение - Строка
//
Функция ПредставлениеИсполнителейЗадач(МассивЗадач) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставлениеИсполнителейЗадач = Новый Соответствие;
	Если МассивЗадач.Количество() = 0 Тогда
		Возврат ПредставлениеИсполнителейЗадач;
	КонецЕсли;
	
	Для Каждого Задача Из МассивЗадач Цикл
		ПредставлениеИсполнителейЗадач.Вставить(Задача, "");
	КонецЦикла;
	
	УчастникиЗадач = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивЗадач, "Участники");
	
	ДействияУчастниковЗадач = Новый Массив; // Массив из ДокументСсылка.ДействиеЗадачи
	Для Каждого Задача Из МассивЗадач Цикл
		
		УчастникиЗадачи = УчастникиЗадач[Задача].Выгрузить();
		УчастникиЗадачи.Сортировать("НомерСтроки Возр");
		
		Для Каждого УчастникЗадачи Из УчастникиЗадачи Цикл
			
			Если Не ЗначениеЗаполнено(УчастникЗадачи.ДействиеУчастника) Тогда
				Продолжить;
			КонецЕсли;
			
			ДействияУчастниковЗадач.Добавить(УчастникЗадачи.ДействиеУчастника);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ИсполнителиДействий = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		ДействияУчастниковЗадач,
		"Исполнитель");
	
	Для Каждого Задача Из МассивЗадач Цикл
		
		УчастникиЗадачи = УчастникиЗадач[Задача].Выгрузить();
		УчастникиЗадачи.Сортировать("НомерСтроки Возр");
		
		МассивУчастникиЗадачи = Новый Массив;
		Для Каждого УчастникЗадачи Из УчастникиЗадачи Цикл
			
			Если Не РаботаСЗадачамиПовтИсп.ЭтоИсполнитель(УчастникЗадачи.ВидУчастника) Тогда
				Продолжить;
			КонецЕсли;
			
			ИсполнительДействия = ИсполнителиДействий[УчастникЗадачи.ДействиеУчастника];
			
			Если ЗначениеЗаполнено(ИсполнительДействия) Тогда
				МассивУчастникиЗадачи.Добавить(
					РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(
						ИсполнительДействия));
			Иначе
				МассивУчастникиЗадачи.Добавить(
					РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(
						УчастникЗадачи.Участник));
			КонецЕсли;
			
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивУчастникиЗадачи);
		ПредставлениеИсполнителейЗадачи = СтрСоединить(МассивУчастникиЗадачи, ", ");
		
		ПредставлениеИсполнителейЗадач.Вставить(Задача, ПредставлениеИсполнителейЗадачи);
		
	КонецЦикла;
	
	Возврат ПредставлениеИсполнителейЗадач;
	
КонецФункции

// Формирует представление исполнителей задачи.
//
// Параметры:
//  Задача - ДокументСсылка.Задача.
// 
// Возвращаемое значение:
//  Строка - Представление исполнителей.
//
Функция ПредставлениеИсполнителейЗадачи(Задача) Экспорт
	
	МассивЗадач = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Задача);
	ПредставлениеИсполнителейЗадач = ПредставлениеИсполнителейЗадач(МассивЗадач);
	ПредставлениеИсполнителейЗадачи = ПредставлениеИсполнителейЗадач[Задача];
	
	Возврат ПредставлениеИсполнителейЗадачи;
	
КонецФункции

// Возвращает представление вида предмета к отмене.
// 
// Параметры:
//  ПредметКОтмене - Произвольный.
// 
// Возвращаемое значение:
//  Строка - Представление вида предмета к отмене.
//  
Функция ПредставлениеВидаПредметаКОтмене(ПредметКОтмене) Экспорт
	
	ПредставлениеВидаПредметаКОтмене =
		ИнтеграцияЗадач.ПредставлениеВидаПредметаКОтмене(ПредметКОтмене);
	Если ЗначениеЗаполнено(ПредставлениеВидаПредметаКОтмене) Тогда
		Возврат ПредставлениеВидаПредметаКОтмене;
	КонецЕсли;
	
	ЗадачаКОтмене = ПредметКОтмене; // ДокументСсылка.Задача
	ВидЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаКОтмене, "ВидЗадачи");
	Если ЗначениеЗаполнено(ВидЗадачи) Тогда
		ПредставлениеВидаПредметаКОтмене = Строка(ВидЗадачи);
	Иначе
		ПредставлениеВидаПредметаКОтмене = Метаданные.Документы.Задача.ПредставлениеОбъекта;
	КонецЕсли;
	
	Возврат ПредставлениеВидаПредметаКОтмене;
	
КонецФункции

// Формирует представление срока.
//
// Параметры:
//  Срок - Дата - Срок.
//  КоличествоПереносовСроков - Число - Количество переносов сроков.
// 
// Возвращаемое значение:
//  Строка - Представление срока.
//
Функция ПредставлениеСрока(Срок, КоличествоПереносовСроков) Экспорт
	
	ПредставлениеСрока = ОбщегоНазначенияДокументооборот.ПредставлениеДаты(Срок);
	
	Если ЗначениеЗаполнено(КоличествоПереносовСроков) Тогда
		ПредставлениеСрока = СтрШаблон("%1 (%2→)", ПредставлениеСрока, КоличествоПереносовСроков);
	КонецЕсли;
	
	Возврат ПредставлениеСрока;
	
КонецФункции

// Формирует представление трудоемкости.
//
// Параметры:
//  ТрудоемкостьОт - Число - Нижняя граница трудоемкости.
//  ТрудоемкостьДо - Число - Верхняя границы трудоемкости.
//  КоличествоБезТрудоемкости - Число - Количество задач без трудоемкости.
// 
// Возвращаемое значение:
//  Строка - Представление трудоемкости.
//
Функция ПредставлениеТрудоемкости(ТрудоемкостьОт, ТрудоемкостьДо, КоличествоБезТрудоемкости) Экспорт
	
	Если Не ЗначениеЗаполнено(ТрудоемкостьОт)
		И Не ЗначениеЗаполнено(ТрудоемкостьДо)
		И Не ЗначениеЗаполнено(КоличествоБезТрудоемкости) Тогда
		Возврат "";
	КонецЕсли;
	
	МассивПредставлениеТрудоемкости = Новый Массив;
	
	Если Не ЗначениеЗаполнено(КоличествоБезТрудоемкости)
		И (ЗначениеЗаполнено(ТрудоемкостьОт) Или ЗначениеЗаполнено(ТрудоемкостьДо)) Тогда
		МассивПредставлениеТрудоемкости.Добавить(
			СтрШаблон("%1 – %2",
				ПредставлениеЧелчасов(ТрудоемкостьОт),
				ПредставлениеЧелчасов(ТрудоемкостьДо)));
	ИначеЕсли ЗначениеЗаполнено(КоличествоБезТрудоемкости) И ЗначениеЗаполнено(ТрудоемкостьОт) Тогда
		МассивПредставлениеТрудоемкости.Добавить(
			СтрШаблон("%1 – ?",
				ПредставлениеЧелчасов(ТрудоемкостьОт)));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КоличествоБезТрудоемкости) Тогда
		МассивПредставлениеТрудоемкости.Добавить(
			?(КоличествоБезТрудоемкости = 1,
				"?",
				СтрШаблон("%1?", КоличествоБезТрудоемкости)));
	КонецЕсли;
	
	ПредставлениеТрудоемкости = СтрСоединить(МассивПредставлениеТрудоемкости, ", ");
	
	Возврат ПредставлениеТрудоемкости;
	
КонецФункции

// Формирует представление трудозатрат.
//
// Параметры:
//  Трудозатраты - Число - Трудозатраты.
//  ПотериТрудозатрат - Число - Потери трудозатрат.
//  КоличествоБезТрудозатрат - Число - Количество без трудозатрат.
// 
// Возвращаемое значение:
//  Строка - Представление трудозатрат.
//
Функция ПредставлениеТрудозатрат(Трудозатраты, ПотериТрудозатрат, КоличествоБезТрудозатрат) Экспорт
	
	Если Не ЗначениеЗаполнено(Трудозатраты)
		И Не ЗначениеЗаполнено(ПотериТрудозатрат)
		И Не ЗначениеЗаполнено(КоличествоБезТрудозатрат) Тогда
		Возврат "";
	КонецЕсли;
	
	МассивПредставлениеТрудозатрат = Новый Массив;
	
	Если ЗначениеЗаполнено(Трудозатраты)
		И (Не ЗначениеЗаполнено(ПотериТрудозатрат) Или Трудозатраты > ПотериТрудозатрат)Тогда
		МассивПредставлениеТрудозатрат.Добавить(ПредставлениеЧелчасов(Трудозатраты));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПотериТрудозатрат) Тогда
		МассивПредставлениеТрудозатрат.Добавить(СтрШаблон("%1↓", ПотериТрудозатрат));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КоличествоБезТрудозатрат) Тогда
		МассивПредставлениеТрудозатрат.Добавить(
			?(КоличествоБезТрудозатрат = 1,
				"?",
				СтрШаблон("%1?", КоличествоБезТрудозатрат)));
	КонецЕсли;
	
	ПредставлениеТрудозатрат = СтрСоединить(МассивПредставлениеТрудозатрат, ", ");
	
	Возврат ПредставлениеТрудозатрат;
	
КонецФункции

// Формирует представление количества человеко-часов.
//
// Параметры:
//  Челчасов - Число - Количества человеко-часов.
// 
// Возвращаемое значение:
//  Строка - Представление количества человеко-часов.
//
Функция ПредставлениеЧелчасов(Челчасов) Экспорт
	
	Если Не ЗначениеЗаполнено(Челчасов) Тогда
		Возврат "";
	КонецЕсли;
	
	ПредставлениеЧелчасов = Формат(Окр(Челчасов), "ЧДЦ=0");
	
	Возврат ПредставлениеЧелчасов;
	
КонецФункции

// Формирует представление числа со знаком.
//
// Параметры:
//  Число - Число - Число.
// 
// Возвращаемое значение:
//  Строка - Число со знаком.
//
Функция ПредставлениеЧислаСоЗнаком(Число) Экспорт
	
	Если ТипЗнч(Число) <> Тип("Число") Тогда
		Возврат "";
	КонецЕсли;
	
	ОтображаемоеЧисло = Окр(Число);
	
	Если ОтображаемоеЧисло > 0 Тогда
		
		ПредставлениеЧислаСоЗнаком = "+" + Строка(ОтображаемоеЧисло);
		
	ИначеЕсли ОтображаемоеЧисло < 0 Тогда
		
		ПредставлениеЧислаСоЗнаком = Строка(ОтображаемоеЧисло);
		
	Иначе
		
		ПредставлениеЧислаСоЗнаком = "";
		
	КонецЕсли;
	
	Возврат ПредставлениеЧислаСоЗнаком;
	
КонецФункции

// Обработчик регламентного задания "Пометка задач просроченными".
//
Процедура ПометкаЗадачПросроченными() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ПометкаЗадачПросроченными);
	
	РегистрыСведений.РеестрЗадачПоИсполнителям.ПометитьПросроченныеЗадачи();
	РегистрыСведений.РеестрЗадачПоИсполнителям.ПометитьИстекающиеЗадачи();
	РегистрыСведений.РеестрЗадачПоАвторам.ПометитьПросроченныеЗадачи();
	РегистрыНакопления.КоличествоЗадачПоАвторам.ПометитьПросроченныеЗадачи();
	РегистрыНакопления.КоличествоЗадачПоИсполнителям.ПометитьПросроченныеЗадачи();
	РегистрыНакопления.КоличествоЗадачПоИсполнителям.ПометитьИстекающиеЗадачи();
	
КонецПроцедуры

// Разыменовывает отбор по проекту.
//
// Параметры:
//  ОтборПоПроекту - ПеречислениеСсылка.ОтборыПоПроектамЗадач.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Проекты - Разыменованный отбор по проекту.
//
Функция РазыменоватьОтборПоПроекту(ОтборПоПроекту) Экспорт
	
	РазыменованныйОтборПоПроекту = Новый Массив;
	
	Если ОтборПоПроекту = Перечисления.ОтборыПоПроектамЗадач.АктивныеПроекты Тогда
		
		РазыменованныйОтборПоПроекту =
			РаботаСПроектами.АктивныеПроектыРуководителей(
				Сотрудники.ТекущийПользовательИСотрудники())
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный отбор по проекту %1'"),
			ОтборПоПроекту);
		
	КонецЕсли;
	
	Возврат РазыменованныйОтборПоПроекту;
	
КонецФункции

// Разыменовывает отбора по участнику задачи.
//
// Параметры:
//  ОтборПоУчастнику - ОпределяемыйТип.УчастникЗадач
//                   - ПеречислениеСсылка.ОтборыПоУчастникамЗадач
//  ОтборРазыменован - Булево - Признак того, что отбор уже был разыменован.
//  ВключаяЗамещаемых - Булево.
//  ТолькоДействующие - Булево.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.УчастникЗадач - Разыменованный отбор.
//
Функция РазыменоватьОтборПоУчастнику(ОтборПоУчастнику, ОтборРазыменован, ВключаяЗамещаемых, ТолькоДействующие = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(ОтборПоУчастнику) Тогда
		Возврат ОтборПоУчастнику;
	КонецЕсли;
	
	Если ТипЗнч(ОтборПоУчастнику) = Тип("СправочникСсылка.Пользователи") И ОтборРазыменован Тогда
		
		Возврат ОтборПоУчастнику;
		
	ИначеЕсли ТипЗнч(ОтборПоУчастнику) = Тип("СправочникСсылка.Сотрудники") И ОтборРазыменован Тогда
		
		Возврат ОтборПоУчастнику;
		
	ИначеЕсли ТипЗнч(ОтборПоУчастнику) = Тип("СправочникСсылка.Пользователи") И Не ОтборРазыменован Тогда
		
		Возврат ИсполнителиЗадач(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОтборПоУчастнику),
			ВключаяЗамещаемых,
			Ложь);
		
	ИначеЕсли ТипЗнч(ОтборПоУчастнику) = Тип("СправочникСсылка.Сотрудники") И Не ОтборРазыменован Тогда
		
		Возврат ИсполнителиЗадач(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОтборПоУчастнику),
			ВключаяЗамещаемых,
			Ложь);
		
	ИначеЕсли ТипЗнч(ОтборПоУчастнику) = Тип("СправочникСсылка.ПолныеРоли") Тогда
		
		Возврат ОтборПоУчастнику;
		
	ИначеЕсли ТипЗнч(ОтборПоУчастнику) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		СотрудникиПодразделения = Сотрудники.СотрудникиПодразделения(
			ОтборПоУчастнику,
			ТолькоДействующие);
		
		СотрудникиПодразделения = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
			СотрудникиПодразделения,
			Сотрудники.ТекущийПользовательИСотрудники());
		
		Возврат ИсполнителиЗадач(СотрудникиПодразделения, ВключаяЗамещаемых, Ложь);
		
	ИначеЕсли ОтборПоУчастнику = Перечисления.ОтборыПоУчастникамЗадач.ТекущийПользователь Тогда
		
		Возврат ИсполнителиЗадач(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
				Пользователи.ТекущийПользователь()),
			ВключаяЗамещаемых,
			Ложь);
		
	ИначеЕсли ОтборПоУчастнику = Перечисления.ОтборыПоУчастникамЗадач.Подчиненные Тогда
		
		Возврат ПодчиненныеИсполнителиЗадач(
			ТолькоДействующие,
			ВключаяЗамещаемых);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный способ разыменования %1 (%2)'"),
			ОтборПоУчастнику,
			ТипЗнч(ОтборПоУчастнику));
		
	КонецЕсли;
	
КонецФункции

// Возвращает результаты вариантов выполнения задачи.
//
// Параметры:
//   ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
//                  - Неопределено
//   ВидЗадачи - СправочникСсылка.ВидыЗадач
//   ВидДействия - СправочникСсылка.ВидыДействийЗадач
//   КешДанных - Структура - кеш данных, который требуется для ускорения работы различных механизмов.
//
// Возвращаемое значение:
//   Соответствие из КлючИЗначение - результаты вариантов выполнения:
//     * Ключ - Число - вариант выполнения.
//     * Значение - СправочникСсылка.РезультатыДействийЗадач - результат задачи.
//
Функция РезультатыВариантовВыполнения(ДействиеЗадачи, ВидЗадачи, ВидДействия, КешДанных = Неопределено) Экспорт
	
	РезультатыВариантовВыполнения = Новый Соответствие;
	Если Не ЗначениеЗаполнено(ВидДействия) Тогда
		Возврат РезультатыВариантовВыполнения;
	КонецЕсли;
	
	Если ВидДействия = Справочники.ВидыДействийЗадач.ОзнакомитьсяСРезультатом
		И (ВидЗадачи = Справочники.ВидыЗадач.Подписание
			Или ВидЗадачи = Справочники.ВидыЗадач.Регистрация
			Или ВидЗадачи = Справочники.ВидыЗадач.Согласование
			Или ВидЗадачи = Справочники.ВидыЗадач.Утверждение) Тогда
		
		РезультатыВариантовВыполнения.Вставить(
			1,
			Справочники.РезультатыДействийЗадач.Ознакомился);
		
	ИначеЕсли ВидДействия = Справочники.ВидыДействийЗадач.ОбработатьРезультат
		И (ВидЗадачи = Справочники.ВидыЗадач.Подписание
			Или ВидЗадачи = Справочники.ВидыЗадач.Регистрация
			Или ВидЗадачи = Справочники.ВидыЗадач.Согласование
			Или ВидЗадачи = Справочники.ВидыЗадач.Утверждение) Тогда
		
		РезультатыВариантовВыполнения.Вставить(
			1,
			Справочники.РезультатыДействийЗадач.ОтправленоПовторно);
		РезультатыВариантовВыполнения.Вставить(
			2,
			Справочники.РезультатыДействийЗадач.Завершил);
		
	Иначе
		
		НастроитьНаправитьАвторуПомощнику = ДействияСерверПовтИсп.НастроитьНаправитьАвторуПомощнику(ВидДействия, ВидЗадачи);
				
		ЕстьПомощники = Ложь;
		Если НастроитьНаправитьАвторуПомощнику Тогда
			АктуальныеПомощники = ЗамещающиеИПомощники.ПодходящиеЗамещения(
				ДействиеЗадачи, Перечисления.ВидыЗамещения.Помощники, КешДанных);
			ЕстьПомощники = (АктуальныеПомощники.Количество() > 0);
		КонецЕсли;
		
		ТекущийНомерРезультата = 1;
		ДанныеНабораСостояний = РаботаСЗадачамиПовтИсп.ДанныеНабораСостояний(ВидЗадачи);
		Для Каждого КлючИЗначение Из ДанныеНабораСостояний.ПорядокРезультатов Цикл
			
			ВидУчастника = КлючИЗначение.Ключ;
			ПорядокРезультатов = КлючИЗначение.Значение;
			
			ОчереднойВидДействия = ВидДействияПоВидуУчастника(ВидЗадачи, ВидУчастника);
			Если ОчереднойВидДействия <> ВидДействия Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого РезультатДействия Из ПорядокРезультатов Цикл
				
				Если НастроитьНаправитьАвторуПомощнику Тогда
					Если (ЕстьПомощники И РезультатДействия = Справочники.РезультатыДействийЗадач.НаправленоАвтору)
						Или (Не ЕстьПомощники И РезультатДействия = Справочники.РезультатыДействийЗадач.НаправленоПомощнику) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				РезультатыВариантовВыполнения.Вставить(ТекущийНомерРезультата, РезультатДействия);
				
				ТекущийНомерРезультата = ТекущийНомерРезультата + 1;
				
			КонецЦикла;
			
			Прервать;
			
		КонецЦикла;
		
		Если РезультатыВариантовВыполнения.Количество() = 0 Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестны варианты выполнения для вида действия %1 (%2).'"),
				ВидЗадачи,
				ВидДействия);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатыВариантовВыполнения;
	
КонецФункции

// Результат обработки результата.
//
// Параметры:
//   ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи - текущее действие задачи.
//                  - СтрокаТаблицыЗначений - см. ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗапросСОтборами
//   КешДанных - Структура - кеш данных, который требуется для ускорения работы различных механизмов.
//   КодЯзыка - Строка
//
// Возвращаемое значение:
//   Структура - результат обработки результата задачи:
//     * ЕстьРезультат - Булево
//     * Заголовок - Строка
//     * РезультатТекстом - Строка
//     * Приложения - Массив из ОпределяемыйТип.ПриложениеЗадач
//
Функция РезультатОбработкиРезультата(ДействиеЗадачи, КешДанных, КодЯзыка) Экспорт
	
	Если ТипЗнч(ДействиеЗадачи) = Тип("СтрокаТаблицыЗначений") Тогда
		ДействиеЗадачиСсылка = ДействиеЗадачи.Ссылка;
	Иначе
		ДействиеЗадачиСсылка = ДействиеЗадачи;
	КонецЕсли;
	
	РезультатОбработкиРезультата = Новый Структура;
	РезультатОбработкиРезультата.Вставить("ЕстьРезультат", Ложь);
	РезультатОбработкиРезультата.Вставить("Заголовок", "");
	РезультатОбработкиРезультата.Вставить("РезультатТекстом", "");
	РезультатОбработкиРезультата.Вставить("Приложения", Новый Массив);
	
	КэшОбластиПросмотра = КэшиНаВремяВызоваПовтИсп.КэшЗадачаОбластьПросмотра();
	
	Если КэшОбластиПросмотра.Заполнен И КэшОбластиПросмотра.ДействиеЗадачи = ДействиеЗадачиСсылка Тогда
		РеквизитыДействияЗадачи = КэшОбластиПросмотра.РеквизитыДействияЗадачи;
	ИначеЕсли ТипЗнч(ДействиеЗадачи) = Тип("СтрокаТаблицыЗначений") Тогда
		РеквизитыДействияЗадачи = ДействиеЗадачи;
	Иначе
		РеквизитыДействияЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДействиеЗадачи,
			"Ссылка, Задача, Источник");
	КонецЕсли;
	
	Если КэшОбластиПросмотра.Заполнен И КэшОбластиПросмотра.Задача = РеквизитыДействияЗадачи.Задача Тогда
		Участники = КэшОбластиПросмотра.ЗадачаОбъект.Участники;
	Иначе
		РеквизитыЗадачи = Неопределено;
		Если КешДанных <> Неопределено И КешДанных.Свойство("ДанныеДокументовЗадача") Тогда
			РеквизитыЗадачи = КешДанных.ДанныеДокументовЗадача[РеквизитыДействияЗадачи.Задача];
		КонецЕсли;
		Если РеквизитыЗадачи = Неопределено Тогда
			РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				РеквизитыДействияЗадачи.Задача,
				"Участники");
		КонецЕсли;
		Участники = РеквизитыЗадачи.Участники.Выгрузить();
		Участники.Сортировать("НомерСтроки Возр");
	КонецЕсли;
	
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаУчастника.ДействиеУчастника) Тогда
			Продолжить;
		КонецЕсли;
		
		Если РаботаСЗадачамиПовтИсп.ЭтоПроверяющий(СтрокаУчастника.ВидУчастника) Тогда
			
			РеквизитыДействияПроверяющего = 
				ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
					СтрокаУчастника.ДействиеУчастника,
					"ВидДействия, РезультатДействия, РезультатДействияТекстом,
					|Приложения, ОбщаяПричинаВозврата, ОсобыеПричиныВозврата");
			
			МассивПричинаВозврата = Новый Массив;
			
			Если ЗначениеЗаполнено(РеквизитыДействияПроверяющего.ОбщаяПричинаВозврата) Тогда
				МассивПричинаВозврата.Добавить(
					РеквизитыДействияПроверяющего.ОбщаяПричинаВозврата);
			КонецЕсли;
			
			ОсобыеПричиныВозврата = РеквизитыДействияПроверяющего.ОсобыеПричиныВозврата.Получить();
			Если ОсобыеПричиныВозврата <> Неопределено Тогда
				
				ОсобаяПричинаВозврата = ОсобыеПричиныВозврата[ДействиеЗадачиСсылка];
				Если ОсобаяПричинаВозврата <> Неопределено Тогда
					МассивПричинаВозврата.Добавить(ОсобаяПричинаВозврата);
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(РеквизитыДействияПроверяющего.РезультатДействияТекстом) Тогда
				
				МассивПричинаВозврата.Добавить(
					РеквизитыДействияПроверяющего.РезультатДействияТекстом);
				
			КонецЕсли;
			
			РезультатОбработкиРезультата.РезультатТекстом =
				СтрСоединить(МассивПричинаВозврата, Символы.ПС);
			
			РезультатОбработкиРезультата.Приложения = 
				РеквизитыДействияПроверяющего.Приложения.Выгрузить().ВыгрузитьКолонку("Приложение");
			
			Если СтрокаУчастника.ВидУчастника = Справочники.ВидыУчастниковЗадач.Проверяющий Тогда
				
				РезультатОбработкиРезультата.Заголовок = НСтр("ru = 'Замечания проверяющего'", КодЯзыка);
				
			ИначеЕсли СтрокаУчастника.ВидУчастника = Справочники.ВидыУчастниковЗадач.ОбрабатывающийРезолюцию
				Или СтрокаУчастника.ВидУчастника = Справочники.ВидыУчастниковЗадач.ОбрабатывающийРезультат
				Или СтрокаУчастника.ВидУчастника = Справочники.ВидыУчастниковЗадач.ОзнакомляемыйСРезультатом
				Или СтрокаУчастника.ВидУчастника = Справочники.ВидыУчастниковЗадач.ОтКого Тогда
				
				РезультатОбработкиРезультата.Заголовок = НСтр("ru = 'Комментарий обрабатывающего результат'", КодЯзыка);
				
			Иначе
				
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Неизвестный вид участника %1 (%2).'"),
					СтрокаУчастника.ВидУчастника,
					ТипЗнч(СтрокаУчастника.ВидУчастника));
				
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВнешнийИдентификатор = Неопределено;
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если СтрокаУчастника.ДействиеУчастника <> ДействиеЗадачиСсылка Тогда
			Продолжить;
		КонецЕсли;
		
		ВнешнийИдентификатор = СтрокаУчастника.ВнешнийИдентификатор;
		Прервать;
		
	КонецЦикла;
	
	ИнтеграцияЗадач.ПриОпределенииРезультатаОбработкиРезультата(
		РеквизитыДействияЗадачи,
		ВнешнийИдентификатор,
		РезультатОбработкиРезультата,
		КешДанных);
	
	РезультатОбработкиРезультата.ЕстьРезультат =
		ЗначениеЗаполнено(РезультатОбработкиРезультата.РезультатТекстом)
		Или РезультатОбработкиРезультата.Приложения.Количество() > 0;
	
	Возврат РезультатОбработкиРезультата;
	
КонецФункции

// Снимает пометку удаления с задачи.
// 
// Параметры:
//  Задача - ДокументСсылка.Задача.
//
Процедура СнятьПометкуУдаления(Задача) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.Задача");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Задача);
		Блокировка.Заблокировать();
		
		ЗадачаОбъект = Задача.ПолучитьОбъект();
		Если ЗадачаОбъект.ПометкаУдаления Тогда
			ЗадачаОбъект.ПометкаУдаления = Ложь;
			ЗадачаОбъект.Записать(РежимЗаписиДокумента.Проведение);			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Формирует массив, содержащий версии файлов текущего результата задачи.
// 
// Параметры:
// 	ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
// 	
// Возвращаемое значение:
//  Массив из Структура:
//   * ПолноеНаименование - Строка
//   * Расширение - Строка
//   * ИндексКартинки - Число
//   * Версия - СправочникСсылка.ВерсииФайлов
// 	
Функция СлепокПриложенийРезультата(ДействиеЗадачи) Экспорт
	
	СлепокПриложенийРезультата = Новый Массив;
	Если Не ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		Возврат СлепокПриложенийРезультата;
	КонецЕсли;
	
	ФайлыРезультата = Новый Массив;
	ДругиеПриложения = Новый Массив;
	
	Приложения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеЗадачи, "Приложения");
	Приложения = Приложения.Выгрузить().ВыгрузитьКолонку("Приложение");
	
	Для Каждого Приложение Из Приложения Цикл
		
		Если ТипЗнч(Приложение) = Тип("СправочникСсылка.Файлы") Тогда
			ФайлыРезультата.Добавить(Приложение);
		Иначе
			ДругиеПриложения.Добавить(Приложение);
		КонецЕсли;
		
	КонецЦикла;
	
	// Файлы результата.
	РеквизитыФайлов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ФайлыРезультата,
		"ПолноеНаименование, ИндексКартинки, ТекущаяВерсия, ТекущаяВерсияРасширение");
	
	Для Каждого Файл Из ФайлыРезультата Цикл
		
		РеквизитыФайла = РеквизитыФайлов[Файл];
		
		СлепокПриложения = Новый Структура;
		СлепокПриложения.Вставить("ПолноеНаименование", РеквизитыФайла.ПолноеНаименование);
		СлепокПриложения.Вставить("ИндексКартинки", РеквизитыФайла.ИндексКартинки);
		СлепокПриложения.Вставить("Версия", РеквизитыФайла.ТекущаяВерсия);
		СлепокПриложения.Вставить("Расширение", РеквизитыФайла.ТекущаяВерсияРасширение);
		
		СлепокПриложенийРезультата.Добавить(СлепокПриложения);
		
	КонецЦикла;
	
	// Другие приложения.
	Для Каждого Приложение Из ДругиеПриложения Цикл
		
		СлепокПриложения = Новый Структура;
		СлепокПриложения.Вставить("ПолноеНаименование", Строка(Приложение));
		СлепокПриложения.Вставить("ИндексКартинки", РаботаСЗадачамиКлиентСервер.ИндексКартинкиПриложения(Приложение));
		СлепокПриложения.Вставить("Версия", Приложение);
		СлепокПриложения.Вставить("Расширение", "");
		
		СлепокПриложенийРезультата.Добавить(СлепокПриложения);
		
	КонецЦикла;

	Возврат СлепокПриложенийРезультата;
	
КонецФункции

// Формирует массив, содержащий версии файлов текущего результата задачи.
// 
// Параметры:
// 	Источник - ОпределяемыйТип.ИсточникДействийЗадач.
// 	
// Возвращаемое значение:
//  Массив из Структура:
//   * ПолноеНаименование - Строка
//   * Расширение - Строка
//   * ИндексКартинки - Число
//   * Версия - СправочникСсылка.ВерсииФайлов
// 	
Функция СлепокПриложенийРезультатаПоИсточнику(Источник) Экспорт
	
	ДействиеЗадачи = Документы.ДействиеЗадачи.НайтиПоИсточнику(Источник);
	СлепокПриложенийРезультата = СлепокПриложенийРезультата(ДействиеЗадачи);
	
	Возврат СлепокПриложенийРезультата;
	
КонецФункции

// Создаёт задачу.
// 
// Параметры:
//  ВидЗадачи - СправочникСсылка.ВидыЗадач.
//  ОтКого - ОпределяемыйТип.УчастникЗадач.
//  Кому - ОпределяемыйТип.УчастникЗадач.
//  Заголовок - Строка.
//  Описание - Строка, ФорматированныйДокумент - Описание (возможно форматированное).
//  Срок - Дата.
// 
// Возвращаемое значение:
//  ДокументСсылка.Задача - Созданная задача.
//  
Функция СоздатьЗадачу(ВидЗадачи, ОтКого, Кому, Заголовок, Описание, Срок) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("ВидЗадачи", ВидЗадачи);
		ПараметрыЗаполнения.Вставить("Автор", ОтКого);
		ПараметрыЗаполнения.Вставить("Заголовок", Заголовок);
		ПараметрыЗаполнения.Вставить("Срок", Срок);
		
		Если ТипЗнч(Описание) = Тип("Строка") Тогда
			ПараметрыЗаполнения.Вставить("Описание", Описание);
		ИначеЕсли ТипЗнч(Описание) = Тип("ФорматированныйДокумент") Тогда
			ПараметрыЗаполнения.Вставить("ОписаниеФорматированное", Описание);
		КонецЕсли;
		
		ЗадачаОбъект = Документы.Задача.СоздатьДокумент();
		ЗадачаОбъект.Заполнить(ПараметрыЗаполнения);
		
		ЗадачаОбъект.УстановитьУчастника(
			Кому,
			ДанныеВидаЗадачи.ВидУчастникаИсполнитель);
				
		ЗадачаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		ПараметрыНаправленияНаИсполнение =
			РаботаСЗадачамиКлиентСервер.НовыйПараметрыНаправленияНаИсполнение();
		ПараметрыНаправленияНаИсполнение.Задача = ЗадачаОбъект.Ссылка;
		ПараметрыНаправленияНаИсполнение.ЭтоИнтерактивноеДействие = Ложь;
		ПараметрыНаправленияНаИсполнение.ЗапуститьВФоне = Ложь;
		НаправитьНаИсполнение(ПараметрыНаправленияНаИсполнение);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ЗадачаОбъект.Ссылка;
	
КонецФункции

// Возвращает событие журнала регистрации для подсистемы Задачи.
// 
// Возвращаемое значение:
//  Строка - Событие журнала регистрации для подсистемы Задачи.
//
Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Задачи'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Рассчитывает состояние участника задачи по переданным данным.
//
// Параметры:
//  ВидСостоянияУчастниковЗадач - ПеречислениеСсылка.ВидыСостоянийУчастниковЗадач - Вид состояния участников.
//  ВидЗадачи - СправочникСсылка.ВидыЗадач - Вид задачи.
//  ВидУчастника - СправочникСсылка.ВидыУчастниковЗадач - Вид участника.
//  РезультатДействия - СправочникСсылка.РезультатыДействийЗадач - Результат действия.
// 
// Возвращаемое значение:
//  СправочникСсылка.СостоянияУчастниковЗадач - Состояние участника задачи.
//
Функция СостояниеУчастникаЗадачи(ВидСостоянияУчастниковЗадач, ВидЗадачи, ВидУчастника, РезультатДействия) Экспорт
	
	Если ВидСостоянияУчастниковЗадач = Перечисления.ВидыСостоянийУчастниковЗадач.ВРаботе Тогда
		
		ДанныеНабораСостояний = РаботаСЗадачамиПовтИсп.ДанныеНабораСостояний(ВидЗадачи);
		СостояниеУчастникаЗадачи = ДанныеНабораСостояний.СостоянияУчастниковВРаботе[ВидУчастника];
		
		Возврат ?(ЗначениеЗаполнено(СостояниеУчастникаЗадачи),
			СостояниеУчастникаЗадачи,
			Справочники.СостоянияУчастниковЗадач.ВРаботе);
		
	ИначеЕсли ВидСостоянияУчастниковЗадач = Перечисления.ВидыСостоянийУчастниковЗадач.Выполнена Тогда
		
		ДанныеНабораСостояний = РаботаСЗадачамиПовтИсп.ДанныеНабораСостояний(ВидЗадачи);
		СостоянияУчастниковПоРезультатам = ДанныеНабораСостояний.СостоянияУчастниковСовершено[ВидУчастника];
		СостояниеУчастникаЗадачи = ?(СостоянияУчастниковПоРезультатам <> Неопределено,
			СостоянияУчастниковПоРезультатам[РезультатДействия],
			Неопределено);
		
		Возврат ?(ЗначениеЗаполнено(СостояниеУчастникаЗадачи),
			СостояниеУчастникаЗадачи,
			Справочники.СостоянияУчастниковЗадач.ВОчереди);
		
	ИначеЕсли ВидСостоянияУчастниковЗадач = Перечисления.ВидыСостоянийУчастниковЗадач.НаОбработкеРезультата Тогда
		
		Возврат Справочники.СостоянияУчастниковЗадач.ОжидаетПроверки;
		
	ИначеЕсли ВидСостоянияУчастниковЗадач = Перечисления.ВидыСостоянийУчастниковЗадач.Новая Тогда
		
		Возврат Справочники.СостоянияУчастниковЗадач.Новая;
		
	ИначеЕсли ВидСостоянияУчастниковЗадач = Перечисления.ВидыСостоянийУчастниковЗадач.Отложена Тогда
		
		Возврат Справочники.СостоянияУчастниковЗадач.Отложена;
		
	ИначеЕсли ВидСостоянияУчастниковЗадач = Перечисления.ВидыСостоянийУчастниковЗадач.Отменена Тогда
		
		Возврат Справочники.СостоянияУчастниковЗадач.Отменена;
		
	ИначеЕсли ВидСостоянияУчастниковЗадач = Перечисления.ВидыСостоянийУчастниковЗадач.ПустаяСсылка() Тогда
		
		Возврат Справочники.СостоянияУчастниковЗадач.ПустаяСсылка();
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестное состояние действия задачи %1'"),
			ВидСостоянияУчастниковЗадач);
		
	КонецЕсли;
	
КонецФункции

// Сохраняет результат действия.
// 
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
//  РезультатДействияТекстом - Строка
//  ВерсияДанныхДействия - Строка
//  КтоОтметил - СправочникСсылка.Сотрудники
//  ВзятьВРаботуАвтоматически - Булево
// 
// Возвращаемое значение:
//  См. РаботаСЗадачамиКлиентСервер.НовыйРезультатСохраненияЗадачи
//  
Функция СохранитьРезультатДействия(ДействиеЗадачи, РезультатДействияТекстом, ВерсияДанныхДействия, КтоОтметил, ВзятьВРаботуАвтоматически) Экспорт
	
	Результат = РаботаСЗадачамиКлиентСервер.НовыйРезультатСохраненияЗадачи();
	
	Если ЗначениеЗаполнено(ВерсияДанныхДействия) Тогда
		
		ВерсияДанныхАктуальна = ОбщегоНазначенияДокументооборот.ВерсияДанныхАктуальна(
			ДействиеЗадачи,
			ВерсияДанныхДействия);
		Если Не ВерсияДанныхАктуальна Тогда
			
			Результат.Успешно = Ложь;
			Результат.ВерсииДанныхРазличаются = Истина;
			Результат.НоваяВерсияДанных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ДействиеЗадачи,
				"ВерсияДанных");
			
			Возврат Результат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатОбработкиСохранения = ИнтеграцияЗадач.ОбработатьСохранениеРезультатаДействия(
		ДействиеЗадачи,
		РезультатДействияТекстом,
		КтоОтметил,
		ВзятьВРаботуАвтоматически);
	Результат.НужноВыбратьФактическогоИсполнителя =
		РезультатОбработкиСохранения.НужноВыбратьФактическогоИсполнителя;
	
	Если Не РезультатОбработкиСохранения.СохранениеРезультатаДействияОбработано Тогда
		
		НачатьТранзакцию();
		Попытка
			
			ДействиеЗадачиОбъект = ДействиеЗадачи.ПолучитьОбъект();
			ДействиеЗадачиОбъект.РезультатДействияТекстом = РезультатДействияТекстом;
			ДействиеЗадачиОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			Если ВзятьВРаботуАвтоматически И ЗначениеЗаполнено(РезультатДействияТекстом) Тогда
				ВидСостоянияУчастниковЗадач =
					РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(
						ДействиеЗадачиОбъект.СостояниеУчастникаЗадачи);
				ЭтоНовоеДействие = Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоНовоеДействие(
					ВидСостоянияУчастниковЗадач);
				Если ЭтоНовоеДействие Тогда
					РезультатВзятияВРаботу = ВзятьВРаботу(ДействиеЗадачи, КтоОтметил);
					Результат.НужноВыбратьФактическогоИсполнителя =
						РезультатВзятияВРаботу.НужноВыбратьФактическогоИсполнителя;
				КонецЕсли;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;
	
	Результат.НоваяВерсияДанных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДействиеЗадачи,
		"ВерсияДанных");
	
	Возврат Результат;
	
КонецФункции

// Рассчитывает срок задачи по умолчанию для текущего пользователя.
// 
// Параметры:
//  СрокИсполнения - Дата
//  ГрафикРаботы - СправочникСсылка.ГрафикиРаботы
//
// Возвращаемое значение:
//  Дата
//
Функция СрокПоУмолчанию(СрокИсполнения, ГрафикРаботы) Экспорт
	
	СрокПоУмолчаниюВДнях = ПолучитьПерсональнуюНастройку("СрокПоУмолчанию");
	Если Не ЗначениеЗаполнено(СрокПоУмолчаниюВДнях) Тогда
		Возврат Дата(1, 1, 1);
	КонецЕсли;
	
	СрокПоУмолчанию = НачалоДня(ТекущаяДатаСеанса()) + СрокПоУмолчаниюВДнях * 86400; // 86400 - число секунд в дне.
	
	ГрафикРаботы = ГрафикиРаботы.ГрафикРаботыСотрудника(Сотрудники.ОсновнойСотрудник());
	Если Не ЗначениеЗаполнено(ГрафикРаботы) Тогда
		Возврат КонецДня(СрокПоУмолчанию);
	КонецЕсли;
	
	Попытка
		
		ОкончаниеДня = ГрафикиРаботы.ПолучитьНачалоИОкончаниеРабочегоДня(СрокПоУмолчанию, ГрафикРаботы).ОкончаниеДня;
		Если Не ЗначениеЗаполнено(ОкончаниеДня) Тогда
			Возврат ГрафикиРаботы.ПолучитьПоследнееРабочееВремяДня(ГрафикРаботы, СрокПоУмолчанию);
		КонецЕсли;
		
		Возврат Дата(
			Год(СрокПоУмолчанию),
			Месяц(СрокПоУмолчанию),
			День(СрокПоУмолчанию),
			Час(ОкончаниеДня),
			Минута(ОкончаниеДня),
			Секунда(ОкончаниеДня));
		
	Исключение
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Графики работы'", Метаданные.ОсновнойЯзык.КодЯзыка),
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат КонецДня(СрокПоУмолчанию);
		
	КонецПопытки;
	
КонецФункции

// Формирует данные схемы жизненного цикла задачи.
//
// Параметры:
//  Задача - ДокументСсылка.Задача - Задача.
// 
// Возвращаемое значение:
//  Массив из Структура - Данные схемы жизненного цикла задачи. См. РаботаСЗадачами.ЭлементСхемыЖизненногоЦикла().
//
Функция СхемаЖизненногоЦикла(Задача) Экспорт
	
	СхемаЖизненногоЦикла = Новый Массив;
	Если Не ЗначениеЗаполнено(Задача) Тогда
		Возврат СхемаЖизненногоЦикла;
	КонецЕсли;
	
	ИнтеграцияЗадач.ПриОпределенииСхемыЖизненногоЦикла(Задача, СхемаЖизненногоЦикла);
	Если СхемаЖизненногоЦикла.Количество() > 0 Тогда
		СократитьСхемуЖизненногоЦикла(СхемаЖизненногоЦикла);
		Возврат СхемаЖизненногоЦикла;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина); // ОШ11100
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задача,
		"Автор, ВидЗадачи, Дата, ДатаОтмены, ДатаСоздания, Источник,
		|ПричинаОтмены, КтоОтменил, Создал, СостояниеЗадачи, Участники");
	Если РеквизитыЗадачи.Участники <> Неопределено Тогда
		//@skip-check bsl-legacy-check-expression-type
		РеквизитыЗадачи.Участники = РеквизитыЗадачи.Участники.Выгрузить();
		РеквизитыЗадачи.Участники.Сортировать("НомерСтроки Возр");
	Иначе
		//@skip-check bsl-legacy-check-expression-type
		РеквизитыЗадачи.Участники = Новый ТаблицаЗначений;
	КонецЕсли;
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(РеквизитыЗадачи.ВидЗадачи);
	
	ЕстьВозможностьОтрицательногоВыполнения =
		ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковВыполненаОтрицательно);
	
	ДанныеНабораСостояний = РаботаСЗадачамиПовтИсп.ДанныеНабораСостояний(РеквизитыЗадачи.ВидЗадачи);
	
	ВидСостоянияЗадачи = РаботаСЗадачамиПовтИсп.ВидСостоянияЗадач(РеквизитыЗадачи.СостояниеЗадачи);
	Если Не ЗначениеЗаполнено(ВидСостоянияЗадачи) Тогда
		ВидСостоянияЗадачи = Перечисления.ВидыСостоянийЗадач.Черновик;
	КонецЕсли;
	
	ДействияУчастников = Новый Массив;
	Для Каждого СтрокаУчастника Из РеквизитыЗадачи.Участники Цикл
		Если Не ЗначениеЗаполнено(СтрокаУчастника.ДействиеУчастника) Тогда
			Продолжить;
		КонецЕсли;
		ДействияУчастников.Добавить(СтрокаУчастника.ДействиеУчастника);
	КонецЦикла;
	
	ОбщийРезультатУчастников = Справочники.РезультатыДействийЗадач.ПустаяСсылка();
	ОбщийХарактерРезультата = Перечисления.ХарактерыРезультатов.ПустаяСсылка();
	ДанныеДействийУчастников = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ДействияУчастников,
		"ВидУчастника, ВидДействия, ДатаВыполнения, ДатаНачала, ФактическийИсполнитель, Исполнитель, Источник,
		|РезультатДействия, РезультатДействияТекстом, СостояниеУчастникаЗадачи, Приложения");
	Для Каждого КлючИЗначение Из ДанныеДействийУчастников Цикл
		
		ДанныеДействияУчастника = КлючИЗначение.Значение;
		
		Если ДанныеДействияУчастника.Приложения <> Неопределено Тогда
			ДанныеДействияУчастника.Приложения = ДанныеДействияУчастника.Приложения.Выгрузить();
			ДанныеДействияУчастника.Приложения.Сортировать("НомерСтроки Возр");
		Иначе
			ДанныеДействияУчастника.Приложения = Новый ТаблицаЗначений;
		КонецЕсли;
		
		Если РаботаСЗадачамиПовтИсп.ЭтоИсполнитель(ДанныеДействияУчастника.ВидУчастника) Тогда
			
			Если Не ЗначениеЗаполнено(ДанныеДействияУчастника.РезультатДействия) Тогда
				Продолжить;
			КонецЕсли;
			
			ХарактерРезультата = РаботаСЗадачамиПовтИсп.ХарактерРезультата(ДанныеДействияУчастника.РезультатДействия);
			Если ХарактерРезультата = Перечисления.ХарактерыРезультатов.Нейтральный
				И Не ЗначениеЗаполнено(ОбщийХарактерРезультата) Тогда
				
				ОбщийРезультатУчастников = ДанныеДействияУчастника.РезультатДействия;
				ОбщийХарактерРезультата = ХарактерРезультата;
				
			ИначеЕсли ХарактерРезультата = Перечисления.ХарактерыРезультатов.Положительный
				И (Не ЗначениеЗаполнено(ОбщийХарактерРезультата)
					Или ОбщийХарактерРезультата = Перечисления.ХарактерыРезультатов.Нейтральный) Тогда
				
				ОбщийРезультатУчастников = ДанныеДействияУчастника.РезультатДействия;
				ОбщийХарактерРезультата = ХарактерРезультата;
				
			ИначеЕсли ХарактерРезультата = Перечисления.ХарактерыРезультатов.ПоложительныйСЗамечаниями
				И (Не ЗначениеЗаполнено(ОбщийХарактерРезультата)
					Или ОбщийХарактерРезультата = Перечисления.ХарактерыРезультатов.Положительный) Тогда
				
				ОбщийРезультатУчастников = ДанныеДействияУчастника.РезультатДействия;
				ОбщийХарактерРезультата = ХарактерРезультата;
				
			ИначеЕсли ХарактерРезультата = Перечисления.ХарактерыРезультатов.Отрицательный
				И (Не ЗначениеЗаполнено(ОбщийХарактерРезультата)
					Или ОбщийХарактерРезультата = Перечисления.ХарактерыРезультатов.Положительный
					Или ОбщийХарактерРезультата = Перечисления.ХарактерыРезультатов.ПоложительныйСЗамечаниями) Тогда
				
				ОбщийРезультатУчастников = ДанныеДействияУчастника.РезультатДействия;
				ОбщийХарактерРезультата = ХарактерРезультата;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	Если Не ЗначениеЗаполнено(ОбщийХарактерРезультата) Тогда
		ОбщийХарактерРезультата = Перечисления.ХарактерыРезультатов.Нейтральный;
	КонецЕсли;
	
	Если ОбщийХарактерРезультата = Перечисления.ХарактерыРезультатов.Нейтральный
		Или ОбщийХарактерРезультата = Перечисления.ХарактерыРезультатов.Положительный
		Или ОбщийХарактерРезультата = Перечисления.ХарактерыРезультатов.ПоложительныйСЗамечаниями Тогда
		
		ВыполненаОтрицательно = Ложь;
		
	ИначеЕсли ОбщийХарактерРезультата = Перечисления.ХарактерыРезультатов.Отрицательный Тогда
		
		ВыполненаОтрицательно = Истина;
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный общий характер результата %1.'"),
			ОбщийХарактерРезультата);
		
	КонецЕсли;
	
	ДанныеДействияПроверяющего = Неопределено;
	Для Каждого СтрокаУчастника Из РеквизитыЗадачи.Участники Цикл
		
		Если РаботаСЗадачамиПовтИсп.ЭтоПроверяющий(СтрокаУчастника.ВидУчастника)
			И ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
			
			ДанныеДействияПроверяющего = ДанныеДействийУчастников[СтрокаУчастника.ДействиеУчастника];
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Промежуточный узел "Создал".
	ЕстьУзелСоздал = Ложь;
	Если ЗначениеЗаполнено(РеквизитыЗадачи.Дата)
		И (ОбщегоНазначенияДокументооборотКлиентСервер.ДатаБезСекунд(РеквизитыЗадачи.Дата) <>
			ОбщегоНазначенияДокументооборотКлиентСервер.ДатаБезСекунд(РеквизитыЗадачи.ДатаСоздания)
			Или РеквизитыЗадачи.Создал <> РеквизитыЗадачи.Автор
			Или Не ЗначениеЗаполнено(РеквизитыЗадачи.ДатаСоздания)) Тогда
		
		ЕстьУзелСоздал = Истина;
		
		ЭлементСхемыЖизненногоЦикла = ЭлементСхемыЖизненногоЦикла();
		ЭлементСхемыЖизненногоЦикла.ТипУзла = Перечисления.ТипыУзловЖизненногоЦикла.ПромежуточныйУзел;
		
		ЭлементСхемыЖизненногоЦикла.Дата = РеквизитыЗадачи.Дата;
		
		ЭлементСхемыЖизненногоЦикла.Заголовок = СтрШаблон(
			?(РаботаСЗадачамиПовтИсп.ПолУчастника(РеквизитыЗадачи.Создал) = Перечисления.ПолФизическогоЛица.Женский,
				НСтр("ru = 'Создала %1'"),
				НСтр("ru = 'Создал %1'")),
			РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(
				РеквизитыЗадачи.Создал));
		
		Если Перечисления.ВидыСостоянийЗадач.ЭтоОтмененнаяЗадача(ВидСостоянияЗадачи) Тогда
			ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Отрицательный;
		Иначе
			ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Положительный;
		КонецЕсли;
		
		СхемаЖизненногоЦикла.Добавить(ЭлементСхемыЖизненногоЦикла);
		
	КонецЕсли;
	
	// Промежуточный узел "Направил на исполнение".
	Если Не Перечисления.ВидыСостоянийЗадач.ЭтоЧерновик(ВидСостоянияЗадачи) Тогда
		
		ЭлементСхемыЖизненногоЦикла = ЭлементСхемыЖизненногоЦикла();
		ЭлементСхемыЖизненногоЦикла.ТипУзла = Перечисления.ТипыУзловЖизненногоЦикла.ПромежуточныйУзел;
		
		ЭлементСхемыЖизненногоЦикла.Дата = РеквизитыЗадачи.ДатаСоздания;
		
		ЭлементСхемыЖизненногоЦикла.Заголовок = СтрШаблон(
			"%1 %2",
			?(РаботаСЗадачамиПовтИсп.ПолУчастника(РеквизитыЗадачи.Автор) = Перечисления.ПолФизическогоЛица.Женский,
				?(ЕстьУзелСоздал,
					ДанныеВидаЗадачи.ТерминНаправилНаИсполнениеЖенский,
					НСтр("ru = 'Создала и направила'")),
				?(ЕстьУзелСоздал,
					ДанныеВидаЗадачи.ТерминНаправилНаИсполнениеМужской,
					НСтр("ru = 'Создал и направил'"))),
			РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(РеквизитыЗадачи.Автор));
		
		Если ВыполненаОтрицательно Или Перечисления.ВидыСостоянийЗадач.ЭтоОтмененнаяЗадача(ВидСостоянияЗадачи) Тогда
			ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Отрицательный;
		Иначе
			ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Положительный;
		КонецЕсли;
		
		СхемаЖизненногоЦикла.Добавить(ЭлементСхемыЖизненногоЦикла);
		
	КонецЕсли;
	
	// Узел состояния "Выполнена".
	ЭлементСхемыЖизненногоЦикла = ЭлементСхемыЖизненногоЦикла();
	ЭлементСхемыЖизненногоЦикла.ТипУзла = Перечисления.ТипыУзловЖизненногоЦикла.УзелСостояния;
	Если Перечисления.ВидыСостоянийЗадач.ЭтоОтмененнаяЗадача(ВидСостоянияЗадачи) Тогда
		
		Если ЕстьВозможностьОтрицательногоВыполнения Тогда
			ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеПроверяетсяКрасное;
		Иначе
			ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеВыполненаКрасное;
		КонецЕсли;
		ЭлементСхемыЖизненногоЦикла.Заголовок = Строка(РеквизитыЗадачи.ВидЗадачи);
		ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Отрицательный;
		
	ИначеЕсли Перечисления.ВидыСостоянийЗадач.ЭтоНоваяЗадача(ВидСостоянияЗадачи) Тогда
		
		Если ЕстьВозможностьОтрицательногоВыполнения Тогда
			ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеПроверяетсяЗеленое;
		Иначе
			ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеВыполненаЗеленое;
		КонецЕсли;
		ЭлементСхемыЖизненногоЦикла.Заголовок = Строка(РеквизитыЗадачи.СостояниеЗадачи);
		ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Положительный;
		
	ИначеЕсли Перечисления.ВидыСостоянийЗадач.ЭтоЗадачаВРаботе(ВидСостоянияЗадачи) Тогда
		
		Если ВыполненаОтрицательно Тогда
			ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеПроверяетсяКрасное;
		ИначеЕсли ЕстьВозможностьОтрицательногоВыполнения Тогда
			ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеПроверяетсяЗеленое;
		Иначе
			ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеВыполненаЗеленое;
		КонецЕсли;
		ЭлементСхемыЖизненногоЦикла.Заголовок = Строка(РеквизитыЗадачи.СостояниеЗадачи);
		ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Положительный;
		
	ИначеЕсли Перечисления.ВидыСостоянийЗадач.ЭтоОжидающаяПроверкиЗадача(ВидСостоянияЗадачи)
		Или Перечисления.ВидыСостоянийЗадач.ЭтоВыполненнаяЗадача(ВидСостоянияЗадачи) Тогда
		
		ЭлементСхемыЖизненногоЦикла.Заголовок = Строка(ОбщийРезультатУчастников);
		ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = ОбщийХарактерРезультата;
		
		Если ВыполненаОтрицательно Тогда
			Если ЕстьВозможностьОтрицательногоВыполнения Тогда
				ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеВозвращеноНаДоработкуКрасное;
			Иначе
				ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеВыполненаКрасное;
			КонецЕсли;
		Иначе
			Если ЕстьВозможностьОтрицательногоВыполнения Тогда
				ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеПровереноЗеленое;
			Иначе
				ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеВыполненаЗеленое;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Если ЕстьВозможностьОтрицательногоВыполнения Тогда
			ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеПроверяетсяСерое;
		Иначе
			ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеВыполненаСерое;
		КонецЕсли;
		ЭлементСхемыЖизненногоЦикла.Заголовок = Строка(РеквизитыЗадачи.СостояниеЗадачи);
		ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Нейтральный;
		
	КонецЕсли;
	СхемаЖизненногоЦикла.Добавить(ЭлементСхемыЖизненногоЦикла);
	
	// Промежуточные узлы "Взял в работу" и "Выполнил".
	ТаблицаСортировки = Новый ТаблицаЗначений;
	ТаблицаСортировки.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаСортировки.Колонки.Добавить("Значение");
	
	Для Каждого СтрокаУчастника Из РеквизитыЗадачи.Участники Цикл
		
		Если Не РаботаСЗадачамиПовтИсп.ЭтоИсполнитель(СтрокаУчастника.ВидУчастника)
			Или Не ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДействияИсполнителя = ДанныеДействийУчастников[СтрокаУчастника.ДействиеУчастника];
		Если ДанныеДействияИсполнителя = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		УточнениеИсполнителя = ИнтеграцияЗадач.УточнениеИсполнителя(
			РеквизитыЗадачи.Источник,
			СтрокаУчастника.ВнешнийИдентификатор,
			ДанныеДействияИсполнителя.Источник);
		Если УточнениеИсполнителя <> Неопределено Тогда
			УточненныйИсполнитель = УточнениеИсполнителя.Исполнитель;
		ИначеЕсли ЗначениеЗаполнено(ДанныеДействияИсполнителя.ФактическийИсполнитель) Тогда
			УточненныйИсполнитель = ДанныеДействияИсполнителя.ФактическийИсполнитель;
		Иначе
			УточненныйИсполнитель = ДанныеДействияИсполнителя.Исполнитель;
		КонецЕсли;

		// Промежуточный узел "Взял в работу".
		Если ЗначениеЗаполнено(ДанныеДействияИсполнителя.ДатаНачала)
			И (Не ЗначениеЗаполнено(ДанныеДействияИсполнителя.ДатаВыполнения)
				Или ОбщегоНазначенияДокументооборотКлиентСервер.ДатаБезСекунд(ДанныеДействияИсполнителя.ДатаНачала) <
					ОбщегоНазначенияДокументооборотКлиентСервер.ДатаБезСекунд(ДанныеДействияИсполнителя.ДатаВыполнения)) Тогда
			
			ЭлементСхемыЖизненногоЦикла = ЭлементСхемыЖизненногоЦикла();
			ЭлементСхемыЖизненногоЦикла.ТипУзла = Перечисления.ТипыУзловЖизненногоЦикла.ПромежуточныйУзел;
			
			СостояниеВРаботе = ДанныеНабораСостояний.СостоянияУчастниковВРаботе[ДанныеДействияИсполнителя.ВидУчастника];
			
			ЭлементСхемыЖизненногоЦикла.Дата = ДанныеДействияИсполнителя.ДатаНачала;
			ЭлементСхемыЖизненногоЦикла.Заголовок = СтрШаблон(
				"%1 %2",
				ТерминПереходаВСостояние(СостояниеВРаботе, УточненныйИсполнитель),
				РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(УточненныйИсполнитель));
			
			Если ВыполненаОтрицательно Или Перечисления.ВидыСостоянийЗадач.ЭтоОтмененнаяЗадача(ВидСостоянияЗадачи) Тогда
				ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Отрицательный;
			Иначе
				ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Положительный;
			КонецЕсли;
			
			СтрокаСортировки = ТаблицаСортировки.Добавить();
			СтрокаСортировки.Дата = ЭлементСхемыЖизненногоЦикла.Дата;
			СтрокаСортировки.Значение = ЭлементСхемыЖизненногоЦикла;
			
		КонецЕсли;
		
		// Промежуточный узел "Выполнил".
		Если ЗначениеЗаполнено(ДанныеДействияИсполнителя.ДатаВыполнения)
			И ЗначениеЗаполнено(ДанныеДействияИсполнителя.РезультатДействия) Тогда
			
			ЭлементСхемыЖизненногоЦикла = ЭлементСхемыЖизненногоЦикла();
			ЭлементСхемыЖизненногоЦикла.ТипУзла = Перечисления.ТипыУзловЖизненногоЦикла.ПромежуточныйУзел;
			
			СостоянияУчастниковСовершеноПоРезультатам =
				ДанныеНабораСостояний.СостоянияУчастниковСовершено[ДанныеДействияИсполнителя.ВидУчастника];
			СостояниеВыполнено =
				СостоянияУчастниковСовершеноПоРезультатам[ДанныеДействияИсполнителя.РезультатДействия];
			
			ЭлементСхемыЖизненногоЦикла.Дата = ДанныеДействияИсполнителя.ДатаВыполнения;
			ЭлементСхемыЖизненногоЦикла.Заголовок = СтрШаблон(
				"%1 %2",
				ТерминПереходаВСостояние(СостояниеВыполнено, УточненныйИсполнитель),
				РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(УточненныйИсполнитель));
			
			Если ВыполненаОтрицательно Или Перечисления.ВидыСостоянийЗадач.ЭтоОтмененнаяЗадача(ВидСостоянияЗадачи) Тогда
				ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Отрицательный;
			Иначе
				ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Положительный;
			КонецЕсли;
			
			СтрокаСортировки = ТаблицаСортировки.Добавить();
			СтрокаСортировки.Дата = ЭлементСхемыЖизненногоЦикла.Дата;
			СтрокаСортировки.Значение = ЭлементСхемыЖизненногоЦикла;
			
			// Дополнение промежуточного узла "Выполнил".
			Если (ЗначениеЗаполнено(ДанныеДействияИсполнителя.РезультатДействияТекстом)
				Или ДанныеДействияИсполнителя.Приложения.Количество() > 0) Тогда
				
				Если ЗначениеЗаполнено(ДанныеДействияИсполнителя.РезультатДействияТекстом) Тогда
					ЭлементСхемыЖизненногоЦикла.Описание = ДанныеДействияИсполнителя.РезультатДействияТекстом;
				КонецЕсли;
				
				ДанныеДействияИсполнителя.Приложения.Сортировать("Приложение");
				Для Каждого ДанныеПриложения Из ДанныеДействияИсполнителя.Приложения Цикл
					
					СтрокаПриложения = ЭлементСхемыЖизненногоЦикла.Приложения.Добавить();
					
					Если ТипЗнч(ДанныеПриложения.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
						
						РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
							ДанныеПриложения.Приложение,
							"ПолноеНаименование, ИндексКартинки, ТекущаяВерсияРасширение");
						
						СтрокаПриложения.ИндексКартинки = РеквизитыФайла.ИндексКартинки;
						СтрокаПриложения.Заголовок = РеквизитыФайла.ПолноеНаименование;
						Если ЗначениеЗаполнено(РеквизитыФайла.ТекущаяВерсияРасширение) Тогда
							СтрокаПриложения.Заголовок = СтрШаблон(
								"%1.%2",
								СтрокаПриложения.Заголовок,
								РеквизитыФайла.ТекущаяВерсияРасширение);
						КонецЕсли;
						
						СтрокаПриложения.Приложение = ДанныеПриложения.Приложение;
						
					Иначе
						
						СтрокаПриложения.Приложение = ДанныеПриложения.Приложение;
						СтрокаПриложения.Заголовок = Строка(ДанныеПриложения.Приложение);
						СтрокаПриложения.ИндексКартинки = 10;
						
					КонецЕсли;
					
				КонецЦикла;
				
			Конецесли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаСортировки.Сортировать("Дата Возр");
	Для Каждого СтрокаСортировки Из ТаблицаСортировки Цикл
		СхемаЖизненногоЦикла.Добавить(СтрокаСортировки.Значение);
	КонецЦикла;
	
	// Узлы "Проверки".
	Если ДанныеДействияПроверяющего <> Неопределено Тогда
		
		// Узел состояния "Проверена".
		ЭлементСхемыЖизненногоЦикла = ЭлементСхемыЖизненногоЦикла();
		ЭлементСхемыЖизненногоЦикла.ТипУзла = Перечисления.ТипыУзловЖизненногоЦикла.УзелСостояния;
		Если Перечисления.ВидыСостоянийЗадач.ЭтоОтмененнаяЗадача(ВидСостоянияЗадачи) Тогда
			
		Если ЕстьВозможностьОтрицательногоВыполнения Тогда
			ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеВыполненаКрасное;
		Иначе
			ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеПроверяетсяКрасное;
		КонецЕсли;
			ВидДействияЗадачи = ДанныеДействияПроверяющего.ВидДействия; // СправочникСсылка.ВидыДействийЗадач
			ЭлементСхемыЖизненногоЦикла.Заголовок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ВидДействияЗадачи,
				"ТерминДействия");
			ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Отрицательный;
			
		ИначеЕсли Перечисления.ВидыСостоянийЗадач.ЭтоОжидающаяПроверкиЗадача(ВидСостоянияЗадачи) Тогда
			
			СостояниеНачатаПроверка =
				ДанныеНабораСостояний.СостоянияУчастниковВРаботе[ДанныеДействияПроверяющего.ВидУчастника];
			
			ЭлементСхемыЖизненногоЦикла.Заголовок = Строка(СостояниеНачатаПроверка);
			
			Если ВыполненаОтрицательно Тогда
				Если ЕстьВозможностьОтрицательногоВыполнения Тогда
					ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеВыполненаКрасное;
				Иначе
					ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеПроверяетсяКрасное;
				КонецЕсли;
				ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Отрицательный;
			Иначе
				Если ЕстьВозможностьОтрицательногоВыполнения Тогда
					ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеВыполненаЗеленое;
				Иначе
					ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеПроверяетсяЗеленое;
				КонецЕсли;
				ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Положительный;
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(ДанныеДействияПроверяющего.РезультатДействия) Тогда
			
			СостоянияУчастниковСовершеноПоРезультатам =
				ДанныеНабораСостояний.СостоянияУчастниковСовершено[ДанныеДействияПроверяющего.ВидУчастника];
			СостояниеПроверено =
				СостоянияУчастниковСовершеноПоРезультатам[ДанныеДействияПроверяющего.РезультатДействия];
			
			ЭлементСхемыЖизненногоЦикла.Заголовок = Строка(СостояниеПроверено);
			
			ХарактеРезультатаПроверки = РаботаСЗадачамиПовтИсп.ХарактерРезультата(ДанныеДействияПроверяющего.РезультатДействия);
			Если ХарактеРезультатаПроверки = Перечисления.ХарактерыРезультатов.Нейтральный
				Или ХарактеРезультатаПроверки = Перечисления.ХарактерыРезультатов.Положительный
				Или ХарактеРезультатаПроверки = Перечисления.ХарактерыРезультатов.ПоложительныйСЗамечаниями Тогда
				
				Если ВыполненаОтрицательно Тогда
					Если ЕстьВозможностьОтрицательногоВыполнения Тогда
						ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеВыполненаКрасное;
					Иначе
						ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеПровереноКрасное;
					КонецЕсли;
					ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Отрицательный;
				Иначе
					Если ЕстьВозможностьОтрицательногоВыполнения Тогда
						ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеВыполненаЗеленое;
					Иначе
						ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеПровереноЗеленое;
					КонецЕсли;
					ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Положительный;
				КонецЕсли;
				
			ИначеЕсли ХарактеРезультатаПроверки = Перечисления.ХарактерыРезультатов.Отрицательный Тогда
				
				Если ЕстьВозможностьОтрицательногоВыполнения Тогда
					ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеВыполненаКрасное;
				Иначе
					ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеВозвращеноНаДоработкуКрасное;
				КонецЕсли;
				ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Отрицательный;
				
			Иначе
				
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Неизвестный общий характер результата %1.'"),
					ОбщийХарактерРезультата);
				
			КонецЕсли;
			
		Иначе
			
			ВидДействияЗадачи = ДанныеДействияПроверяющего.ВидДействия; // СправочникСсылка.ВидыДействийЗадач
			ЭлементСхемыЖизненногоЦикла.Заголовок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ВидДействияЗадачи,
				"ТерминБудущегоДействия");
			
			Если ВыполненаОтрицательно И Перечисления.ВидыСостоянийЗадач.ЭтоВыполненнаяЗадача(ВидСостоянияЗадачи) Тогда
				
				Если ЕстьВозможностьОтрицательногоВыполнения Тогда
					ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеВыполненаКрасное;
				Иначе
					ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеПроверяетсяКрасное;
				КонецЕсли;
				ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Отрицательный;
				
			ИначеЕсли Перечисления.ВидыСостоянийЗадач.ЭтоВыполненнаяЗадача(ВидСостоянияЗадачи) Тогда
				
				Если ЕстьВозможностьОтрицательногоВыполнения Тогда
					ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеВыполненаЗеленое;
				Иначе
					ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеПроверяетсяЗеленое;
				КонецЕсли;
				ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Положительный;
				
			Иначе
				
				Если ЕстьВозможностьОтрицательногоВыполнения Тогда
					ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеВыполненаСерое;
				Иначе
					ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеПроверяетсяСерое;
				КонецЕсли;
				ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Нейтральный;
				
			КонецЕсли;
			
		КонецЕсли;
		СхемаЖизненногоЦикла.Добавить(ЭлементСхемыЖизненногоЦикла);
		
		Если ЗначениеЗаполнено(ДанныеДействияПроверяющего.ФактическийИсполнитель) Тогда
			УточненныйПроверяющий = ДанныеДействияПроверяющего.ФактическийИсполнитель;
		Иначе
			УточненныйПроверяющий = ДанныеДействияПроверяющего.Исполнитель;
		КонецЕсли;
		
		// Промежуточный узел "Начал проверку".
		Если ДанныеДействияПроверяющего <> Неопределено
			И ЗначениеЗаполнено(ДанныеДействияПроверяющего.ДатаНачала)
			И (Не ЗначениеЗаполнено(ДанныеДействияПроверяющего.ДатаВыполнения)
				Или ОбщегоНазначенияДокументооборотКлиентСервер.ДатаБезСекунд(ДанныеДействияПроверяющего.ДатаНачала) <
					ОбщегоНазначенияДокументооборотКлиентСервер.ДатаБезСекунд(ДанныеДействияПроверяющего.ДатаВыполнения)) Тогда
			
			ЭлементСхемыЖизненногоЦикла = ЭлементСхемыЖизненногоЦикла();
			ЭлементСхемыЖизненногоЦикла.ТипУзла = Перечисления.ТипыУзловЖизненногоЦикла.ПромежуточныйУзел;
			
			СостояниеНачатаПроверка =
				ДанныеНабораСостояний.СостоянияУчастниковВРаботе[ДанныеДействияПроверяющего.ВидУчастника];
			
			ЭлементСхемыЖизненногоЦикла.Дата = ДанныеДействияПроверяющего.ДатаНачала;
			ЭлементСхемыЖизненногоЦикла.Заголовок = СтрШаблон(
				"%1 %2",
				ТерминПереходаВСостояние(
					СостояниеНачатаПроверка,
					УточненныйПроверяющий),
				РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(
					УточненныйПроверяющий));
			
			Если ВыполненаОтрицательно Или Перечисления.ВидыСостоянийЗадач.ЭтоОтмененнаяЗадача(ВидСостоянияЗадачи) Тогда
				ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Отрицательный;
			ИначеЕсли ЗначениеЗаполнено(ДанныеДействияПроверяющего.РезультатДействия) Тогда
				ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = РаботаСЗадачамиПовтИсп.ХарактерРезультата(ДанныеДействияПроверяющего.РезультатДействия);
			Иначе
				ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Положительный;
			КонецЕсли;
			
			СхемаЖизненногоЦикла.Добавить(ЭлементСхемыЖизненногоЦикла);
			
		КонецЕсли;
		
		// Промежуточный узел "Проверил".
		Если ДанныеДействияПроверяющего <> Неопределено
			И ЗначениеЗаполнено(ДанныеДействияПроверяющего.ДатаВыполнения)
			И ЗначениеЗаполнено(ДанныеДействияПроверяющего.РезультатДействия) Тогда
			
			ЭлементСхемыЖизненногоЦикла = ЭлементСхемыЖизненногоЦикла();
			ЭлементСхемыЖизненногоЦикла.ТипУзла = Перечисления.ТипыУзловЖизненногоЦикла.ПромежуточныйУзел;
			
			СостоянияУчастниковСовершеноПоРезультатам =
				ДанныеНабораСостояний.СостоянияУчастниковСовершено[ДанныеДействияПроверяющего.ВидУчастника];
			СостояниеПроверено =
				СостоянияУчастниковСовершеноПоРезультатам[ДанныеДействияПроверяющего.РезультатДействия];
			
			ЭлементСхемыЖизненногоЦикла.Заголовок = СтрШаблон(
				"%1 %2",
				ТерминПереходаВСостояние(
					СостояниеПроверено,
					УточненныйПроверяющий),
				РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(
					УточненныйПроверяющий));
				
			ЭлементСхемыЖизненногоЦикла.Дата = ДанныеДействияПроверяющего.ДатаВыполнения;
			Если ВыполненаОтрицательно Или Перечисления.ВидыСостоянийЗадач.ЭтоОтмененнаяЗадача(ВидСостоянияЗадачи) Тогда
				ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Отрицательный;
			Иначе
				ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = РаботаСЗадачамиПовтИсп.ХарактерРезультата(ДанныеДействияПроверяющего.РезультатДействия);
			КонецЕсли;
			
			// Дополнение промежуточного узла "Проверил".
			Если (ЗначениеЗаполнено(ДанныеДействияПроверяющего.РезультатДействияТекстом)
				Или ДанныеДействияПроверяющего.Приложения.Количество() > 0) Тогда
				
				Если ЗначениеЗаполнено(ДанныеДействияПроверяющего.РезультатДействияТекстом) Тогда
					ЭлементСхемыЖизненногоЦикла.Описание =
						ДанныеДействияПроверяющего.РезультатДействияТекстом;
				КонецЕсли;
				
				Для Каждого ДанныеПриложения Из ДанныеДействияПроверяющего.Приложения Цикл
					
					СтрокаПриложения = ЭлементСхемыЖизненногоЦикла.Приложения.Добавить();
					
					Если ТипЗнч(ДанныеПриложения.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
						
						РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
							ДанныеПриложения.Приложение,
							"ПолноеНаименование, ИндексКартинки, ТекущаяВерсияРасширение");
						
						СтрокаПриложения.ИндексКартинки = РеквизитыФайла.ИндексКартинки;
						СтрокаПриложения.Заголовок = РеквизитыФайла.ПолноеНаименование;
						Если ЗначениеЗаполнено(РеквизитыФайла.ТекущаяВерсияРасширение) Тогда
							СтрокаПриложения.Заголовок = СтрШаблон(
								"%1.%2",
								СтрокаПриложения.Заголовок,
								РеквизитыФайла.ТекущаяВерсияРасширение);
						КонецЕсли;
						
						СтрокаПриложения.Приложение = ДанныеПриложения.Приложение;
						
					Иначе
						
						СтрокаПриложения.Приложение = ДанныеПриложения.Приложение;
						СтрокаПриложения.Заголовок = Строка(ДанныеПриложения.Приложение);
						СтрокаПриложения.ИндексКартинки = 10;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			СхемаЖизненногоЦикла.Добавить(ЭлементСхемыЖизненногоЦикла);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Узел состояния "Закрыта".
	ЭлементСхемыЖизненногоЦикла = ЭлементСхемыЖизненногоЦикла();
	ЭлементСхемыЖизненногоЦикла.ТипУзла = Перечисления.ТипыУзловЖизненногоЦикла.УзелСостояния;
	Если ВыполненаОтрицательно И Перечисления.ВидыСостоянийЗадач.ЭтоВыполненнаяЗадача(ВидСостоянияЗадачи) Тогда
		
		ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеЗакрытаКрасное;
		ЭлементСхемыЖизненногоЦикла.Заголовок = НСтр("ru = 'Закрыта'");
		ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Отрицательный;
		
	ИначеЕсли Перечисления.ВидыСостоянийЗадач.ЭтоВыполненнаяЗадача(ВидСостоянияЗадачи) Тогда
		
		ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеЗакрытаЗеленое;
		ЭлементСхемыЖизненногоЦикла.Заголовок = НСтр("ru = 'Закрыта'");
		ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Положительный;
		
	ИначеЕсли Перечисления.ВидыСостоянийЗадач.ЭтоОтмененнаяЗадача(ВидСостоянияЗадачи) Тогда
		
		ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеЗакрытаКрасное;
		ЭлементСхемыЖизненногоЦикла.Заголовок = НСтр("ru = 'Отменена'");
		ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Отрицательный;
		
	Иначе
		
		ЭлементСхемыЖизненногоЦикла.Картинка = БиблиотекаКартинок.СостояниеЗакрытаСерое;
		ЭлементСхемыЖизненногоЦикла.Заголовок = НСтр("ru = 'Не закрыта'");
		ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Нейтральный;
		
	КонецЕсли;
	СхемаЖизненногоЦикла.Добавить(ЭлементСхемыЖизненногоЦикла);
	
	// Промежуточный узел "Отменил".
	Если Перечисления.ВидыСостоянийЗадач.ЭтоОтмененнаяЗадача(ВидСостоянияЗадачи) Тогда
		
		ЭлементСхемыЖизненногоЦикла = ЭлементСхемыЖизненногоЦикла();
		ЭлементСхемыЖизненногоЦикла.ТипУзла = Перечисления.ТипыУзловЖизненногоЦикла.ПромежуточныйУзел;
		
		ЭлементСхемыЖизненногоЦикла.Дата = РеквизитыЗадачи.ДатаОтмены;
		
		ЭлементСхемыЖизненногоЦикла.Заголовок = СтрШаблон(
			?(РаботаСЗадачамиПовтИсп.ПолУчастника(РеквизитыЗадачи.КтоОтменил) = Перечисления.ПолФизическогоЛица.Женский,
				НСтр("ru = 'Отменила %1'"),
				НСтр("ru = 'Отменил %1'")),
			РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(
				РеквизитыЗадачи.КтоОтменил));
		
		ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = Перечисления.ХарактерыРезультатов.Отрицательный;
		
		ЭлементСхемыЖизненногоЦикла.Описание = РеквизитыЗадачи.ПричинаОтмены;
		
		СхемаЖизненногоЦикла.Добавить(ЭлементСхемыЖизненногоЦикла);
		
	КонецЕсли;
	
	СократитьСхемуЖизненногоЦикла(СхемаЖизненногоЦикла);
	
	Возврат СхемаЖизненногоЦикла;
	
КонецФункции

// Удаляет задачу.
//
// Параметры:
//  Задача - ДокументСсылка.Задача - Задача.
//
Процедура УдалитьЗадачу(Задача) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ЗадачаОбъект = Задача.ПолучитьОбъект();
		ЗадачаОбъект.УстановитьПометкуУдаления(Истина);
		
		ЗакрытьПодзадачи(Задача);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Сохраняет персональную настройку текущего пользователя.
//
// Параметры:
//  Настройка - Строка - Настройка.
//  Значение - Произвольный - Значение настройки.
//
Процедура УстановитьПерсональнуюНастройку(Настройка, Значение) Экспорт
	
	Если СтрНачинаетсяС(Настройка, "БыстрыйПоиск") Тогда
		
		Если ТипЗнч(Значение) <> Тип("Массив") Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"Задачи",
			Настройка,
			Значение);
		
	ИначеЕсли СтрНачинаетсяС(Настройка, "ПоказыватьВыполненные") Тогда
		
		Если ТипЗнч(Значение) <> Тип("Булево") Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"Задачи",
			Настройка,
			Значение);
		
	ИначеЕсли Настройка = "СрокПоУмолчанию" Тогда
		
		Если ТипЗнч(Значение) <> Тип("Число") Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"Задачи",
			"СрокПоУмолчанию",
			Значение);
		
	ИначеЕсли Настройка = "ОтображениеКарточкиЗадачи" Тогда
		
		Если ТипЗнч(Значение) <> Тип("ПеречислениеСсылка.ВариантыОтображенияОбластиЧтения") Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректное значение настройки: ""%1""'"),
				Настройка);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"Задачи",
			"ОтображениеКарточкиЗадачи",
			Значение);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Некорректная персональная настройка: ""%1""'"),
			Настройка);
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает флаг указанной задаче или действию задачи.
//
// Параметры:
//  ЗадачаИлиДействие - ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи - Задачи или действия задач.
//  Флаг - ПеречислениеСсылка.ФлагиОбъектов - Флаг.
//
Процедура УстановитьФлаг(ЗадачаИлиДействие, Флаг) Экспорт
	
	УстановкаФлагаОбработана = ИнтеграцияЗадач.ОбработатьУстановкуФлага(ЗадачаИлиДействие, Флаг);
	Если УстановкаФлагаОбработана Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		ЗаполнитьФлагиВсехДействий = Ложь;
		ВсеДействия = Новый Массив;
		
		Если ТипЗнч(ЗадачаИлиДействие) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
			
			ДействиеЗадачиОбъект = ЗадачаИлиДействие.ПолучитьОбъект();
			ДействиеЗадачиОбъект.Флаг = Флаг;
			ДействиеЗадачиОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			ЧейФлаг = ДействиеЗадачиОбъект.Исполнитель;
			
			ЗадачаОбъект = ДействиеЗадачиОбъект.Задача.ПолучитьОбъект();
			Если ЗадачаОбъект.Автор = ЧейФлаг Тогда
				
				ЗадачаОбъект.Флаг = Флаг;
				ЗадачаОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
				ЗаполнитьФлагиВсехДействий = Истина;
				ВсеДействия = Документы.ДействиеЗадачи.НайтиПоЗадаче(ДействиеЗадачиОбъект.Задача);
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЗадачаИлиДействие) = Тип("ДокументСсылка.Задача") Тогда
			
			ЗадачаОбъект = ЗадачаИлиДействие.ПолучитьОбъект();
			ЗадачаОбъект.Флаг = Флаг;
			ЗадачаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			ЧейФлаг = ЗадачаОбъект.Автор;
			
			ЗаполнитьФлагиВсехДействий = Истина;
			ВсеДействия = Документы.ДействиеЗадачи.НайтиПоЗадаче(ЗадачаОбъект.Ссылка);
			
		Иначе
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный тип объекта %1'"),
				ТипЗнч(ЗадачаИлиДействие));
			
		КонецЕсли;
		
		Если ЗаполнитьФлагиВсехДействий Тогда
			
			РеквизитыДействий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВсеДействия, "Исполнитель");
			Для Каждого ДействиеЗадачи Из ВсеДействия Цикл
				
				Если ДействиеЗадачи = ЗадачаИлиДействие Тогда
					Продолжить;
				КонецЕсли;
				
				РеквизитыДействия = РеквизитыДействий[ДействиеЗадачи];
				Если РеквизитыДействия.Исполнитель <> ЧейФлаг Тогда
					Продолжить;
				КонецЕсли;
				
				ДействиеЗадачиОбъект = ДействиеЗадачи.ПолучитьОбъект();
				ДействиеЗадачиОбъект.Флаг = Флаг;
				ДействиеЗадачиОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Устанавливает условное оформление подзадач на форме.
//
// Параметры:
//  УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - Содержит настройки условного оформления формы.
//
Процедура УстановитьУсловноеОформлениеПодзадач(УсловноеОформление) Экспорт
	
	// Не запланированные задачи.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПодзадачиПредставление");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подзадачи.ИндексКартинкиСостояния");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыСостоянийЗадач.ИндексКартинкиСостояния(
		Перечисления.ВидыСостоянийЗадач.Черновик);
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"ЦветТекста",
		ЦветаСтиля.ЗакрытыеНеактуальныеЗаписи);
	
	// Отмененные задачи.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПодзадачиПредставление");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подзадачи.ИндексКартинкиСостояния");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыСостоянийЗадач.ИндексКартинкиСостояния(
		Перечисления.ВидыСостоянийЗадач.Отменена);
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"ЦветТекста",
		ЦветаСтиля.ЗакрытыеНеактуальныеЗаписи);
	
	// Выполненные задачи.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПодзадачиПредставление");
	
	ГруппаОтбораИли = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подзадачи.ИндексКартинкиСостояния");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыСостоянийЗадач.ИндексКартинкиСостояния(
		Перечисления.ВидыСостоянийЗадач.Закрыта);
	
	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подзадачи.ИндексКартинкиСостояния");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХарактерыРезультатов.ИндексКартинкиСостояния(
		Перечисления.ХарактерыРезультатов.Положительный);
	
	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подзадачи.ИндексКартинкиСостояния");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХарактерыРезультатов.ИндексКартинкиСостояния(
		Перечисления.ХарактерыРезультатов.ПоложительныйСЗамечаниями);
	
	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подзадачи.ИндексКартинкиСостояния");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХарактерыРезультатов.ИндексКартинкиСостояния(
		Перечисления.ХарактерыРезультатов.Отрицательный);
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"ЦветТекста",
		ЦветаСтиля.ЗакрытыеНеактуальныеЗаписи);
	
	// Просроченные задачи.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПодзадачиПредставление");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подзадачи.ИндексКартинкиСостояния");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 4;
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"ЦветТекста",
		ЦветаСтиля.ПросроченныеДанныеЦвет);
	
КонецПроцедуры

// Устанавливает условное оформление дерева "Приложений".
// 
// Параметры:
//  УсловноеОформление - УсловноеОформлениеКомпоновкиДанных
//
Процедура УстановитьУсловноеОформлениеДереваПриложений(УсловноеОформление) Экспорт
	
	// Редактирует текущий пользователь.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ДеревоПриложений");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПриложений.РедактируетТекущийПользователь");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"ЦветТекста",
		ЦветаСтиля.ФайлЗанятыйТекущимПользователем);
	
	// Редактирует другой пользователь.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ДеревоПриложений");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПриложений.РедактируетДругойПользователь");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"ЦветТекста",
		ЦветаСтиля.ФайлЗанятыйДругимПользователем);
		
	// Не заполненный предмет.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ДеревоПриложений");
	
	ГруппаОтбораИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПриложений.ОбязательноеЗаполнение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПриложений.Приложение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"ЦветТекста",
		ЦветаСтиля.НеЗаполненныйПредмет);
	
КонецПроцедуры

// Получает все файлы приложений.
//
// Параметры:
//  Приложения - Массив из ОпределяемыйТип.ПриложениеЗадач.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//   * Ключ - ОпределяемыйТип.ПриложениеЗадач
//   * Значение -  Массив из СправочникСсылка.Файлы
//
Функция ФайлыПриложений(Приложения) Экспорт
	
	ФайлыПриложений = Новый Соответствие;
	Если Приложения.Количество() = 0 Тогда
		Возврат ФайлыПриложений;
	КонецЕсли;
	
	Для Каждого Приложение Из Приложения Цикл
		ФайлыПриложений.Вставить(Приложение, Новый Массив);
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.ВладелецФайла КАК Приложение,
		|	Файлы.Ссылка КАК Файл
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО Файлы.Ссылка = СлужебныеФайлыДокументов.Файл
		|ГДЕ
		|	Файлы.ВладелецФайла В(&Приложения)
		|	И Файлы.ПометкаУдаления = ЛОЖЬ
		|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	Файлы.Наименование");
	
	Запрос.УстановитьПараметр("Приложения", Приложения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ФайлыПриложения = ФайлыПриложений[Выборка.Приложение];
		ФайлыПриложения.Добавить(Выборка.Файл);
	КонецЦикла;
	
	Возврат ФайлыПриложений;
	
КонецФункции

// Формирует новую структуру элемента схемы жизненного цикла.
// 
// Возвращаемое значение:
//  Структура - Элемент схемы жизненного цикла:
//   * Дата - Дата - Дата.
//   * Заголовок - Строка - Заголовок.
//   * Картинка - Картинка - Картинка.
//   * Описание - Строка - Описание.
//   * Приложения - ТаблицаЗначений - Приложения:
//     ** Приложение - СправочникСсылка.Файлы - Приложение.
//     ** Заголовок - Строка - Заголовок.
//     ** ИндексКартинки - Число - Индекс картинки.
//   * ТипУзла - ПеречислениеСсылка.ТипыУзловЖизненногоЦикла - Тип узла.
//   * ХарактерРезультата - ПеречислениеСсылка.ХарактерыРезультатов - Характер результата.
//   * НавигационнаяСсылка - Строка
//
Функция ЭлементСхемыЖизненногоЦикла() Экспорт
	
	ЭлементСхемыЖизненногоЦикла = Новый Структура;
	ЭлементСхемыЖизненногоЦикла.Вставить("Дата", Дата(1, 1, 1));
	ЭлементСхемыЖизненногоЦикла.Вставить("Заголовок", "");
	ЭлементСхемыЖизненногоЦикла.Вставить("Картинка", Новый Картинка);
	ЭлементСхемыЖизненногоЦикла.Вставить("Описание", "");
	ЭлементСхемыЖизненногоЦикла.Вставить("Приложения", Новый ТаблицаЗначений);
	ЭлементСхемыЖизненногоЦикла.Приложения.Колонки.Добавить(
		"Приложение",
		Метаданные.ОпределяемыеТипы.ПриложениеЗадач.Тип);
	ЭлементСхемыЖизненногоЦикла.Приложения.Колонки.Добавить(
		"Заголовок",
		Новый ОписаниеТипов("Строка"));
	ЭлементСхемыЖизненногоЦикла.Приложения.Колонки.Добавить(
		"ИндексКартинки",
		Новый ОписаниеТипов("Число"));
	ЭлементСхемыЖизненногоЦикла.Вставить("ТипУзла",
		Перечисления.ТипыУзловЖизненногоЦикла.ПустаяСсылка());
	ЭлементСхемыЖизненногоЦикла.Вставить("ХарактерРезультата",
		Перечисления.ХарактерыРезультатов.ПустаяСсылка());
	ЭлементСхемыЖизненногоЦикла.Вставить("НавигационнаяСсылка", "");
	
	Возврат ЭлементСхемыЖизненногоЦикла;
	
КонецФункции

// Определяет, являются ли данные действия выполненными.
//
// Параметры:
//  ДействияЗадач - Массив из ДокументСсылка.ДействиеЗадачи.
// 
// Возвращаемое значение:
//  Соответствие.
//   * Ключ - ДокументСсылка.ДействиеЗадачи - Действие.
//   * Значение - Булево - Это выполненное действие.
// 	
Функция ЭтоВыполненныеДействия(ДействияЗадач) Экспорт
	
	ЭтоВыполненныеДействия = Новый Соответствие;
	Если ДействияЗадач.Количество() = 0 Тогда
		Возврат ЭтоВыполненныеДействия;
	КонецЕсли;
		
	Для Каждого ДействиеЗадачи Из ДействияЗадач Цикл
		ЭтоВыполненныеДействия[ДействиеЗадачи] = Ложь;
	КонецЦикла;
	
	СостоянияУчастниковЗадач =
		ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ДействияЗадач, "СостояниеУчастникаЗадачи");
	
	Для Каждого ДействиеЗадачи Из ДействияЗадач Цикл
		
		СостояниеУчастникаЗадачи = СостоянияУчастниковЗадач[ДействиеЗадачи];
		ВидСостоянияУчастника = РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(СостояниеУчастникаЗадачи);
		ЭтоВыполненныеДействия[ДействиеЗадачи] =
			Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоВыполненноеДействие(ВидСостоянияУчастника);
		
	КонецЦикла;
	
	Возврат ЭтоВыполненныеДействия;
	
КонецФункции

// Определяет, являются ли данное действие выполненными.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
// 
// Возвращаемое значение:
//  Булево - Это выполненное действие.
// 	
Функция ЭтоВыполненноеДействие(ДействиеЗадачи) Экспорт
	
	ДействияЗадач = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДействиеЗадачи);
	ЭтоВыполненныеДействия = ЭтоВыполненныеДействия(ДействияЗадач);
	ЭтоВыполненноеДействие = ЭтоВыполненныеДействия[ДействиеЗадачи];
	
	Возврат ЭтоВыполненноеДействие;
	
КонецФункции

// Определяет, находятся ли данные действия на обработке результата.
//
// Параметры:
//  ДействияЗадач - Массив из ДокументСсылка.ДействиеЗадачи.
// 
// Возвращаемое значение:
//  Соответствие.
//   * Ключ - ДокументСсылка.ДействиеЗадачи - Действие.
//   * Значение - Булево - Истина, если действия на обработке результата.
// 	
Функция ЭтоДействияНаОбработкеРезультата(ДействияЗадач) Экспорт
	
	ДействияНаОбработкеРезультата = Новый Соответствие;
	Если ДействияЗадач.Количество() = 0 Тогда
		Возврат ДействияНаОбработкеРезультата;
	КонецЕсли;
		
	Для Каждого ДействиеЗадачи Из ДействияЗадач Цикл
		ДействияНаОбработкеРезультата[ДействиеЗадачи] = Ложь;
	КонецЦикла;
	
	СостоянияУчастниковЗадач =
		ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ДействияЗадач, "СостояниеУчастникаЗадачи");
	
	Для Каждого ДействиеЗадачи Из ДействияЗадач Цикл
		
		СостояниеУчастникаЗадачи = СостоянияУчастниковЗадач[ДействиеЗадачи];
		ВидСостоянияУчастника = РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(СостояниеУчастникаЗадачи);
		ДействияНаОбработкеРезультата[ДействиеЗадачи] =
			Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОжидающееПроверкиДействие(ВидСостоянияУчастника);
		
	КонецЦикла;
	
	Возврат ДействияНаОбработкеРезультата;
	
КонецФункции

// Определяет, находится ли данное действие на обработке результата.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
// 
// Возвращаемое значение:
//  Булево - Это выполненное действие.
// 	
Функция ЭтоДействиеНаОбработкеРезультата(ДействиеЗадачи) Экспорт
	
	ДействияЗадач = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДействиеЗадачи);
	ДействияНаОбработкеРезультата = ЭтоДействияНаОбработкеРезультата(ДействияЗадач);
	ЭтоВыполненноеДействие = ДействияНаОбработкеРезультата[ДействиеЗадачи];
	
	Возврат ЭтоВыполненноеДействие;
	
КонецФункции

// Определяет, данное действие выполнено или на обработке результата.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
// 
// Возвращаемое значение:
//  Булево - Это выполненное действие.
// 	
Функция ЭтоДействиеВыполненоИлиНаОбработкеРезультата(ДействиеЗадачи) Экспорт
	
	Возврат ЭтоВыполненноеДействие(ДействиеЗадачи) 
		Или ЭтоДействиеНаОбработкеРезультата(ДействиеЗадачи);
	
КонецФункции

// Определяет, отменены ли данные действия.
//
// Параметры:
//  ДействияЗадач - Массив из ДокументСсылка.ДействиеЗадачи.
// 
// Возвращаемое значение:
//  Соответствие.
//   * Ключ - ДокументСсылка.ДействиеЗадачи - Действие.
//   * Значение - Булево - Истина, если действия отменены.
// 	
Функция ЭтоОтмененныеДействия(ДействияЗадач) Экспорт
	
	ОтмененныеДействия = Новый Соответствие;
	Если ДействияЗадач.Количество() = 0 Тогда
		Возврат ОтмененныеДействия;
	КонецЕсли;
		
	Для Каждого ДействиеЗадачи Из ДействияЗадач Цикл
		ОтмененныеДействия[ДействиеЗадачи] = Ложь;
	КонецЦикла;
	
	СостоянияУчастниковЗадач =
		ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ДействияЗадач, "СостояниеУчастникаЗадачи");
	
	Для Каждого ДействиеЗадачи Из ДействияЗадач Цикл
		
		СостояниеУчастникаЗадачи = СостоянияУчастниковЗадач[ДействиеЗадачи];
		ВидСостоянияУчастника = РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(СостояниеУчастникаЗадачи);
		ОтмененныеДействия[ДействиеЗадачи] =
			Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОтмененноеДействие(ВидСостоянияУчастника);
		
	КонецЦикла;
	
	Возврат ОтмененныеДействия;
	
КонецФункции

// Определяет, отменено ли данное действие или нет.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
// 
// Возвращаемое значение:
//  Булево
// 	
Функция ЭтоОтмененноеДействия(ДействиеЗадачи) Экспорт
	
	ДействияЗадач = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДействиеЗадачи);
	ОтмененныеДействия = ЭтоОтмененныеДействия(ДействияЗадач);
	ЭтоОтмененныеДействия = ОтмененныеДействия[ДействиеЗадачи];
	
	Возврат ЭтоОтмененныеДействия;
	
КонецФункции

// Определяет, являются ли данные задачи выполненными.
//
// Параметры:
//  МассивЗадач - Массив из ДокументСсылка.Задача.
// 
// Возвращаемое значение:
//  Соответствие.
//   * Ключ - ДокументСсылка.Задача - Задача.
//   * Значение - Булево - Это выполненная задача.
// 	
Функция ЭтоВыполненныеЗадачи(МассивЗадач) Экспорт
	
	ЭтоВыполненныеЗадачи = Новый Соответствие;
	Если МассивЗадач.Количество() = 0 Тогда
		Возврат ЭтоВыполненныеЗадачи;
	КонецЕсли;
		
	Для Каждого Задача Из МассивЗадач Цикл
		ЭтоВыполненныеЗадачи[Задача] = Ложь;
	КонецЦикла;
	
	СостоянияЗадач =
		ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивЗадач, "СостояниеЗадачи");
	
	Для Каждого Задача Из МассивЗадач Цикл
		
		СостояниеЗадачи = СостоянияЗадач[Задача];
		ВидСостоянияЗадачи = РаботаСЗадачамиПовтИсп.ВидСостоянияЗадач(СостояниеЗадачи);
		ЭтоВыполненныеЗадачи[Задача] =
			Перечисления.ВидыСостоянийЗадач.ЭтоВыполненнаяЗадача(ВидСостоянияЗадачи);
		
	КонецЦикла;
	
	Возврат ЭтоВыполненныеЗадачи;
	
КонецФункции

// Определяет, являются ли данные задачи выполненными.
//
// Параметры:
//  Задача - ДокументСсылка.Задача.
// 
// Возвращаемое значение:
//  Булево - Это выполненная задача.
// 
Функция ЭтоВыполненнаяЗадача(Задача) Экспорт
	
	МассивЗадач = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Задача);
	ЭтоВыполненныеЗадачи = ЭтоВыполненныеЗадачи(МассивЗадач);
	ЭтоВыполненнаяЗадача = ЭтоВыполненныеЗадачи[Задача];
	
	Возврат ЭтоВыполненнаяЗадача;
	
КонецФункции

// Определяет, может ли проверяемая ссылка выступать в качестве источника действий задач.
//
// Параметры:
//  ПроверяемаяСсылка - ЛюбаяСсылка.
// 
// Возвращаемое значение:
//  Булево - Проверяемая ссылка может выступать источником действий задач.
//
Функция ЭтоИсточникДействийЗадач(ПроверяемаяСсылка) Экспорт
	
	Если Не ЗначениеЗаполнено(ПроверяемаяСсылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Метаданные.ОпределяемыеТипы.ИсточникДействийЗадач.Тип.СодержитТип(ТипЗнч(ПроверяемаяСсылка));
	
КонецФункции

// Определяет, может ли проверяемая ссылка выступать в качестве источника задач.
//
// Параметры:
//  ПроверяемаяСсылка - ЛюбаяСсылка - Проверяемая ссылка.
// 
// Возвращаемое значение:
//  Булево - Проверяемая ссылка может выступать источником задач.
//
Функция ЭтоИсточникЗадач(ПроверяемаяСсылка) Экспорт
	
	Если Не ЗначениеЗаполнено(ПроверяемаяСсылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Метаданные.ОпределяемыеТипы.ИсточникЗадач.Тип.СодержитТип(ТипЗнч(ПроверяемаяСсылка));
	
КонецФункции

// Проверяет, что вид участника соответствует исполнителю.
//
// Параметры:
//  ВидУчастника - СправочникСсылка.ВидыУчастниковЗадач - Вид участника.
// 
// Возвращаемое значение:
//  Булево - Это исполнитель.
//
Функция ЭтоИсполнитель(ВидУчастника) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидУчастника) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КешНСИЗадач = РаботаСЗадачамиПовтИсп.КешНСИЗадач();
	РеквизитыВидаУчастниковЗадач = КешНСИЗадач.РеквизитыВидовУчастниковЗадач[ВидУчастника];
	
	Возврат РеквизитыВидаУчастниковЗадач.ЭтоИсполнитель;
	
КонецФункции

// Проверяет, является ли указанное действие ожидаемым от пользователя.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
//  Пользователь - СправочникСсылка.Пользователи
// 
// Возвращаемое значение:
//  Булево
//
Функция ЭтоИсполнительОжидаемогоДействия(ДействиеЗадачи, Пользователь) Экспорт
	
	Если Не ЗначениеЗаполнено(ДействиеЗадачи) Или Не ЗначениеЗаполнено(Пользователь) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДействиеЗадачи,
		"Проведен, Исполнитель, СостояниеУчастникаЗадачи");
	
	ВидСостоянияУчастникаЗадачи = РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(
		РеквизитыДействия.СостояниеУчастникаЗадачи);
	
	ЭтоОжидаемоеДействие =
		РеквизитыДействия.Проведен
		И Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОжидаемоеДействие(ВидСостоянияУчастникаЗадачи);
	Если Не ЭтоОжидаемоеДействие Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИсполнителиЗадач = ИсполнителиЗадач(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Пользователь));
	ЭтоИсполнительОжидаемогоДействия =
		ИсполнителиЗадач.Найти(РеквизитыДействия.Исполнитель) <> Неопределено;
	
	Возврат ЭтоИсполнительОжидаемогоДействия;
	
КонецФункции

// Проверяет, что вид участника соответствует ответственному.
//
// Параметры:
//  ВидУчастника - СправочникСсылка.ВидыУчастниковЗадач - Вид участника.
// 
// Возвращаемое значение:
//  Булево - Это ответственный.
//
Функция ЭтоОтветственный(ВидУчастника) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидУчастника) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КешНСИЗадач = РаботаСЗадачамиПовтИсп.КешНСИЗадач();
	РеквизитыВидаУчастниковЗадач = КешНСИЗадач.РеквизитыВидовУчастниковЗадач[ВидУчастника];
	
	Возврат РеквизитыВидаУчастниковЗадач.ЭтоОтветственный;
	
КонецФункции

// Определяет, являются ли данные задачи ожидающими выполнения.
//
// Параметры:
//  МассивЗадач - Массив из ДокументСсылка.Задача.
// 
// Возвращаемое значение:
//  Соответствие.
//   * Ключ - ДокументСсылка.Задача - Задача.
//   * Значение - Булево - Это ожидающая выполнения задача.
// 	
Функция ЭтоОжидающиеВыполненияЗадачи(МассивЗадач) Экспорт
	
	ЭтоОжидающиеВыполненияЗадачи = Новый Соответствие;
	Если МассивЗадач.Количество() = 0 Тогда
		Возврат ЭтоОжидающиеВыполненияЗадачи;
	КонецЕсли;
		
	Для Каждого Задача Из МассивЗадач Цикл
		ЭтоОжидающиеВыполненияЗадачи[Задача] = Ложь;
	КонецЦикла;
	
	СостоянияЗадач =
		ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивЗадач, "СостояниеЗадачи");
	
	Для Каждого Задача Из МассивЗадач Цикл
		
		СостояниеЗадачи = СостоянияЗадач[Задача];
		ВидСостоянияЗадачи = РаботаСЗадачамиПовтИсп.ВидСостоянияЗадач(СостояниеЗадачи);
		ЭтоОжидающиеВыполненияЗадачи[Задача] =
			Перечисления.ВидыСостоянийЗадач.ЭтоОжидающаяВыполненияЗадача(ВидСостоянияЗадачи);
		
	КонецЦикла;
	
	Возврат ЭтоОжидающиеВыполненияЗадачи;
	
КонецФункции

// Определяет, являются ли данные задачи ожидающими проверки.
//
// Параметры:
//  МассивЗадач - Массив из ДокументСсылка.Задача.
// 
// Возвращаемое значение:
//  Соответствие.
//   * Ключ - ДокументСсылка.Задача - Задача.
//   * Значение - Булево - Это ожидающая проверки задача.
// 	
Функция ЭтоОжидающиеПроверкиЗадачи(МассивЗадач) Экспорт
	
	ЭтоОжидающиеПроверкиЗадачи = Новый Соответствие;
	Если МассивЗадач.Количество() = 0 Тогда
		Возврат ЭтоОжидающиеПроверкиЗадачи;
	КонецЕсли;
		
	Для Каждого Задача Из МассивЗадач Цикл
		ЭтоОжидающиеПроверкиЗадачи[Задача] = Ложь;
	КонецЦикла;
	
	СостоянияЗадач =
		ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивЗадач, "СостояниеЗадачи");
	
	Для Каждого Задача Из МассивЗадач Цикл
		
		СостояниеЗадачи = СостоянияЗадач[Задача];
		ВидСостоянияЗадачи = РаботаСЗадачамиПовтИсп.ВидСостоянияЗадач(СостояниеЗадачи);
		ЭтоОжидающиеПроверкиЗадачи[Задача] =
			Перечисления.ВидыСостоянийЗадач.ЭтоОжидающаяПроверкиЗадача(ВидСостоянияЗадачи);
		
	КонецЦикла;
	
	Возврат ЭтоОжидающиеПроверкиЗадачи;
	
КонецФункции

// Определяет, являются ли данные задачи ожидающими проверки.
//
// Параметры:
//  Задача - ДокументСсылка.Задача.
// 
// Возвращаемое значение:
//  Булево - Это ожидающая проверки задача.
// 
Функция ЭтоОжидающаяПроверкиЗадача(Задача) Экспорт
	
	МассивЗадач = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Задача);
	ЭтоОжидающиеПроверкиЗадачи = ЭтоОжидающиеПроверкиЗадачи(МассивЗадач);
	ЭтоОжидающаяПроверкиЗадача = ЭтоОжидающиеПроверкиЗадачи[Задача];
	
	Возврат ЭтоОжидающаяПроверкиЗадача;
	
КонецФункции

// Проверяет, что вид участника соответствует проверяющему.
//
// Параметры:
//  ВидУчастника - СправочникСсылка.ВидыУчастниковЗадач - Вид участника.
// 
// Возвращаемое значение:
//  Булево - Это проверяющий.
//
Функция ЭтоПроверяющий(ВидУчастника) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидУчастника) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КешНСИЗадач = РаботаСЗадачамиПовтИсп.КешНСИЗадач();
	РеквизитыВидаУчастниковЗадач = КешНСИЗадач.РеквизитыВидовУчастниковЗадач[ВидУчастника];
	//удалить при сливании веток
	Если РеквизитыВидаУчастниковЗадач = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	
	Возврат РеквизитыВидаУчастниковЗадач.ЭтоПроверяющий;
	
КонецФункции

// Проверяет, является ли указанная роль ролью текущего пользователя.
//
// Параметры:
//  Участник - ОпределяемыйТип.УчастникЗадач.
// 
// Возвращаемое значение:
//  Булево - Это роль текущего пользователя.
//
Функция ЭтоРольТекущегоПользователя(Участник) Экспорт
	
	Если ТипЗнч(Участник) <> Тип("СправочникСсылка.ПолныеРоли") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РолиТекущегоПользователя = РаботаСЗадачамиПовтИсп.РолиТекущегоПользователя();
	ЭтоРольТекущегоПользователя = РолиТекущегоПользователя.Найти(Участник) <> Неопределено;
	
	Возврат ЭтоРольТекущегоПользователя;
	
КонецФункции

// Проверяет, является ли текущий пользователь указанным исполнителем.
//
// Параметры:
//  Участник - ОпределяемыйТип.УчастникЗадач.
// 
// Возвращаемое значение:
//  Булево - Это текущий исполнитель.
//
Функция ЭтоТекущийИсполнитель(Участник) Экспорт
	
	ТекущиеИсполнителиЗадач = РаботаСЗадачамиПовтИсп.ТекущиеИсполнителиЗадач();
	ЭтоТекущийИсполнитель = ТекущиеИсполнителиЗадач.Найти(Участник) <> Неопределено;
	
	Возврат ЭтоТекущийИсполнитель;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// Заполняет структуру параметров, необходимых для работы клиентского кода
// конфигурации.
//
// Параметры:
//   Параметры - Структура - Структура параметров.
//
Процедура ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт
	
	// Параметры отсутствуют.
	Возврат;
	
КонецПроцедуры

// Определяет следующие свойств регламентных заданий:
//  - зависимость от функциональных опций.
//  - возможность выполнения в различных режимах работы программы.
//  - прочие параметры.
//
// Параметры:
//  Настройки - ТаблицаЗначений - таблица значений с колонками:
//    * РегламентноеЗадание - ОбъектМетаданныхРегламентноеЗадание - регламентное задание.
//    * ФункциональнаяОпция - ОбъектМетаданныхФункциональнаяОпция - функциональная опция,
//        от которой зависит регламентное задание.
//    * ЗависимостьПоИ      - Булево - если регламентное задание зависит более, чем
//        от одной функциональной опции и его необходимо включать только тогда,
//        когда все функциональные опции включены, то следует указывать Истина
//        для каждой зависимости.
//        По умолчанию Ложь - если хотя бы одна функциональная опция включена,
//        то регламентное задание тоже включено.
//    * ВключатьПриВключенииФункциональнойОпции - Булево, Неопределено - если Ложь, то при
//        включении функциональной опции регламентное задание не будет включаться. Значение
//        Неопределено соответствует значению Истина.
//        По умолчанию - неопределено.
//    * ДоступноВПодчиненномУзлеРИБ - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в РИБ.
//        По умолчанию - неопределено.
//    * ДоступноВПодчиненномУзлеКОД - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в подчиненном узле КОД.
//        По умолчанию - неопределено.
//    * ДоступноВАвтономномРабочемМесте - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в автономном рабочем месте.
//        По умолчанию - неопределено.
//    * ДоступноВМоделиСервиса      - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в модели сервиса.
//        По умолчанию - неопределено.
//    * РаботаетСВнешнимиРесурсами  - Булево - Истина, если регламентное задание модифицирует данные
//        во внешних источниках (получение почты, синхронизация данных и т.п.). Не следует устанавливать
//        значение Истина, для регламентных заданий, не модифицирующих данные во внешних источниках.
//        Например, регламентное задание ЗагрузкаКурсовВалют. По умолчанию - Ложь.
//    * Параметризуется             - Булево - Истина, если регламентное задание параметризованное.
//        По умолчанию - Ложь.
//
// Например:
//	Настройка = Настройки.Добавить();
//	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеСтатусовДоставкиSMS;
//	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьПочтовыйКлиент;
//	Настройка.ДоступноВМоделиСервиса = Ложь;
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ПометкаЗадачПросроченными;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьЗадачи;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбслуживаниеИтоговЗадач;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьЗадачи;
	
КонецПроцедуры

#КонецОбласти

#Область ПоступившиеОбновления

// Восстанавливает поступившие обновления задач для указанного пользователя в текущем узле.
//
// Параметры:
//  ПользовательДляВосстановления - СправочникСсылка.Пользователи.
//
Процедура ВосстановитьПоступившиеОбновленияЗадач(ПользовательДляВосстановления) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ПользовательДляВосстановления) Тогда
		Возврат;
	КонецЕсли;
	
	НовыеПоступившиеОбновленияЗадач = НовыеПоступившиеОбновленияЗадач();
	
	// Восстанавливаем поступившие обновления задач только по активным задачам пользователю.
	ТолькоПерваяПорция = Ложь;
	ЗадачиМнеВсе = ЗадачиМнеВсе(ПользовательДляВосстановления, ТолькоПерваяПорция);
	ЗадачиИсполнителю = ЗадачиМнеВсе.ВыгрузитьКолонку("ДействиеЗадачи");
	
	// Обрабатываем задачи порция по 100.
	РазмерПорции = 100;
	ПорцииДействийЗадач = ОбщегоНазначенияДокументооборотКлиентСервер.РазделитьМассив(
		ЗадачиИсполнителю,
		РазмерПорции);
	Для Каждого ПорцияДействийЗадач Из ПорцииДействийЗадач Цикл
		
		РеквизитыДействий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ПорцияДействийЗадач, "ВидДействия, Задача");
		
		ИнтеграцияЗадач.ВосстановитьПоступившиеОбновленияЗадач(
			НовыеПоступившиеОбновленияЗадач,
			ПорцияДействийЗадач,
			РеквизитыДействий);
		
		// Восстановление событий "Исполнена задача ответственного исполнителя" и "Исполнена задача соисполнителя".
		ВосстановитьПоступившиеОбновленияЗадачПоДругимУчастникам(
			НовыеПоступившиеОбновленияЗадач,
			ПорцияДействийЗадач,
			РеквизитыДействий);
		
		// Восстановление события "Исполнено подчиненное поручение".
		ВосстановитьПоступившиеОбновленияЗадачПоПодзадачам(НовыеПоступившиеОбновленияЗадач, ПорцияДействийЗадач);
		
	КонецЦикла;
	
	ЗаписатьПоступившиеОбновленияЗадач(НовыеПоступившиеОбновленияЗадач, Истина);
	
КонецПроцедуры

// Добавляет запись в таблицу поступивших обновлений задач, с контролем уникальности.
//
// Параметры:
//  НовыеПоступившиеОбновленияЗадач - См. РаботаСЗадачами.НовыеПоступившиеОбновленияЗадач
//  Задача - ЗадачаСсылка.ЗадачаИсполнителя
//  СобытиеОбновления - СправочникСсылка.СобытияОбновленияЗадач
//
Процедура ДобавитьПоступившееОбновлениеЗадачи(НовыеПоступившиеОбновленияЗадач, Задача, СобытиеОбновления) Экспорт
	
	// Проверим уникальность в таблице.
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Задача", Задача);
	ПараметрыОтбора.Вставить("СобытиеОбновления", СобытиеОбновления);
	НайденныеСтроки = НовыеПоступившиеОбновленияЗадач.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Добавим в таблицу.
	НоваяСтрока = НовыеПоступившиеОбновленияЗадач.Добавить();
	НоваяСтрока.Задача = Задача;
	НоваяСтрока.СобытиеОбновления = СобытиеОбновления;
	
КонецПроцедуры

// Добавляет записи в регистр ПоступившиеОбновленияЗадач, предварительно проверяя выполненность задач.
//
// Параметры:
//  НовыеПоступившиеОбновленияЗадач - См. РаботаСЗадачами.НовыеПоступившиеОбновленияЗадач.
//  ЛокальнаяЗапись - Булево - Запись следует выполнить локально, без направления в другие узлы.
//
Процедура ЗаписатьПоступившиеОбновленияЗадач(НовыеПоступившиеОбновленияЗадач, ЛокальнаяЗапись) Экспорт
	
	// Удалим из таблицы выполненные задачи.
	ВсеЗадачи = НовыеПоступившиеОбновленияЗадач.ВыгрузитьКолонку("Задача"); // Массив из ДокументСсылка.ДействиеЗадачи
	ВсеЗадачи = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВсеЗадачи);
	СостоянияУчастниковЗадач = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВсеЗадачи, "СостояниеУчастникаЗадачи");

	СостоянияОжидаетВыполнения = Справочники.СостоянияУчастниковЗадач.СостоянияОжидаетВыполнения();
	
	КоличествоЭлементов = НовыеПоступившиеОбновленияЗадач.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		СтрокаТаблицы = НовыеПоступившиеОбновленияЗадач[КоличествоЭлементов - Индекс];
		
		СостояниеУчастникаЗадачи = СостоянияУчастниковЗадач[СтрокаТаблицы.Задача];
		
		ЗадачаОжидаетВыполнения = СостоянияОжидаетВыполнения.Найти(СостояниеУчастникаЗадачи) <> Неопределено;
		Если ЗадачаОжидаетВыполнения Тогда
			Продолжить;
		КонецЕсли;
		
		НовыеПоступившиеОбновленияЗадач.Удалить(СтрокаТаблицы);
		
	КонецЦикла;
	
	// Запишем в регистр сведений ПоступившиеОбновленияЗадач.
	Для Каждого НовоеПоступившееОбновлениеЗадачи Из НовыеПоступившиеОбновленияЗадач Цикл
		
		РегистрыСведений.ПоступившиеОбновленияЗадач.ДобавитьЗапись(
			НовоеПоступившееОбновлениеЗадачи.Задача,
			НовоеПоступившееОбновлениеЗадачи.СобытиеОбновления,
			ЛокальнаяЗапись);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует таблицу новых поступивших обновлений задач.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Пустая таблица новых поступившие обновления задач:
//   * Задача - ДокументСсылка.ДействиеЗадачи
//   * СобытиеОбновления - СправочникСсылка.СобытияОбновленияЗадач
//
Функция НовыеПоступившиеОбновленияЗадач() Экспорт
	
	НовыеПоступившиеОбновленияЗадач = Новый ТаблицаЗначений;
	НовыеПоступившиеОбновленияЗадач.Колонки.Добавить("Задача",
		Метаданные.РегистрыСведений.ПоступившиеОбновленияЗадач.Измерения.ДействиеЗадачи.Тип);
	НовыеПоступившиеОбновленияЗадач.Колонки.Добавить("СобытиеОбновления",
		Метаданные.РегистрыСведений.ПоступившиеОбновленияЗадач.Измерения.СобытиеОбновления.Тип);
	
	Возврат НовыеПоступившиеОбновленияЗадач;
	
КонецФункции


// Обновить поступившие обновления.
// 
// Параметры:
// 	ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
// 	
Процедура ОбновитьПоступившиеОбновления(ДействиеЗадачи) Экспорт
	
	РегистрыСведений.РеестрЗадачПоИсполнителям.ОбновитьПоДействиюЗадачи(ДействиеЗадачи);
	РегистрыНакопления.КоличествоЗадачПоИсполнителям.ОбновитьПоДействиюЗадачи(ДействиеЗадачи);
	
КонецПроцедуры

// Обрабатываем изменение состояния действия задачи.
// 
// Параметры:
// 	ДействиеЗадачиОбъект - ДокументОбъект.ДействиеЗадачи.
// 	
Процедура ОбработатьИзменениеСостоянияДействияЗадачи(ДействиеЗадачиОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредыдущиеЗначенияРеквизитов = ДействиеЗадачиОбъект.ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов;
	Если Не ЗначениеЗаполнено(ПредыдущиеЗначенияРеквизитов.СостояниеУчастникаЗадачи) Тогда
		Возврат;
	КонецЕсли;
	
	СтарыйВидСостояния = РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(ПредыдущиеЗначенияРеквизитов.СостояниеУчастникаЗадачи);
	НовыйВидСостояния = РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(ДействиеЗадачиОбъект.СостояниеУчастникаЗадачи);
	
	ЗадачаВыполнена =
		Не (Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОжидающееПроверкиДействие(СтарыйВидСостояния)
			Или Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоВыполненноеДействие(СтарыйВидСостояния))
		И (Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОжидающееПроверкиДействие(НовыйВидСостояния)
			Или Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоВыполненноеДействие(НовыйВидСостояния));
	Если ЗадачаВыполнена Тогда
		ОбработатьПоступившиеОбновленияПриВыполненииЗадачи(ДействиеЗадачиОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатываем изменение состояния задачи.
// 
// Параметры:
// 	ЗадачаОбъект - ДокументОбъект.Задача.
// 	
Процедура ОбработатьИзменениеСостоянияЗадачи(ЗадачаОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ЗадачаОбъект.ВышестоящееДействие) Тогда
		// Т.к. поддерживается только одно событие, завязанное на подзадачи, то заранее проверим только их.
		Возврат;
	КонецЕсли;
	
	ПредыдущиеЗначенияРеквизитов = ЗадачаОбъект.ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов;
	Если Не ЗначениеЗаполнено(ПредыдущиеЗначенияРеквизитов.СостояниеЗадачи) Тогда
		Возврат;
	КонецЕсли;
	
	СтарыйВидСостояния = РаботаСЗадачамиПовтИсп.ВидСостоянияЗадач(ПредыдущиеЗначенияРеквизитов.СостояниеЗадачи);
	Если Перечисления.ВидыСостоянийЗадач.ЭтоЧерновик(СтарыйВидСостояния) Тогда
		Возврат;
	КонецЕсли;
	
	НовыйВидСостояния = РаботаСЗадачамиПовтИсп.ВидСостоянияЗадач(ЗадачаОбъект.СостояниеЗадачи);
	
	ЗадачаВозвращенаНаДоработку =
		Перечисления.ВидыСостоянийЗадач.ЭтоОжидающаяПроверкиЗадача(СтарыйВидСостояния)
		И Не Перечисления.ВидыСостоянийЗадач.ЭтоОжидающаяПроверкиЗадача(НовыйВидСостояния)
		И Перечисления.ВидыСостоянийЗадач.ЭтоОжидающаяВыполненияЗадача(НовыйВидСостояния);
	ЗадачаЗакрыта =
		Перечисления.ВидыСостоянийЗадач.ЭтоОжидающаяПроверкиЗадача(СтарыйВидСостояния)
		И Не Перечисления.ВидыСостоянийЗадач.ЭтоОжидающаяПроверкиЗадача(НовыйВидСостояния)
		И Перечисления.ВидыСостоянийЗадач.ЭтоВыполненнаяЗадача(НовыйВидСостояния); 
	
	Если ЗадачаВозвращенаНаДоработку Или ЗадачаЗакрыта Тогда
		ПроверитьАктуальностьСобытияИсполненаПодзадача(ЗадачаОбъект.ВышестоящееДействие);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет ознакомления с обновлениями задач.
//
// Параметры:
//  ЗадачиДляОзнакомления - Массив из ДокументСсылка.ДействиеЗадачи.
//
Процедура ОзнакомитьсяСОбновлениямиЗадач(ЗадачиДляОзнакомления) Экспорт
	
	ПоступившиеОбновленияЗадач = ПоступившиеОбновленияЗадач(ЗадачиДляОзнакомления);
	Для Каждого ПоступившееОбновлениеЗадачи Из ПоступившиеОбновленияЗадач Цикл
		
		РегистрыСведений.ПоступившиеОбновленияЗадач.УдалитьЗапись(
			ПоступившееОбновлениеЗадачи.Период,
			ПоступившееОбновлениеЗадачи.ДействиеЗадачи,
			ПоступившееОбновлениеЗадачи.СобытиеОбновления,
			Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Формирует список выбора формы автора задачи.
// 
// Параметры:
//  ВидЗадачи - СправочникСсылка.ВидыЗадач
//  Ссылка - ДокументСсылка.Задача
//  Автор - СправочникСсылка.Сотрудники
//  ФункцияУчастника - ПеречислениеСсылка.ПравилаКоммуникацийФункцииУчастников
//  КонтролироватьСотрудниковБезПользователя - Булево
// 
// Возвращаемое значение:
//  СписокЗначений из СправочникСсылка.Сотрудники
// 
Функция СписокВыбораФормыАвтораЗадачи(ВидЗадачи, Ссылка, Автор, ФункцияУчастника,
	КонтролироватьСотрудниковБезПользователя) Экспорт
	
	ТекСписок = Новый СписокЗначений();

	Если Не ЗначениеЗаполнено(Автор)
		Или ТипЗнч(Автор) <> Тип("СправочникСсылка.Сотрудники") Тогда
		Возврат ТекСписок;
	КонецЕсли;
	
	// Нужно предлагать - первым сотрудников подразделения в котором нахожусь я, 
	// сотрудников подразделений где я руководитель непосредственный, 
	// а так же руководителей подразделений, подчиненных мне напрямую.
	
	ДобавленныеСотрудники = Новый Соответствие();
	
	ПодразделениеАвтора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Автор, "Подразделение");
	МассивСотрудников = Сотрудники.СотрудникиПодразделения(ПодразделениеАвтора);
	Для Каждого Сотрудник Из МассивСотрудников Цикл
		ДобавленныеСотрудники[Сотрудник] = Истина;
	КонецЦикла;
	
	ПодчиненныеПодразделения = СтруктураПредприятия.ПодчиненныеПодразделения(Автор);
	ИндексПодразделения = ПодчиненныеПодразделения.Найти(ПодразделениеАвтора);
	Если ИндексПодразделения <> Неопределено Тогда
		ПодчиненныеПодразделения.Удалить(ИндексПодразделения);
	КонецЕсли;
	СотрудникиПодразделений = Сотрудники.СотрудникиПодразделений(ПодчиненныеПодразделения);
	Для Каждого Сотрудник Из СотрудникиПодразделений Цикл
		Если ДобавленныеСотрудники[Сотрудник] = Истина Тогда
			Продолжить;
		КонецЕсли;
		ДобавленныеСотрудники[Сотрудник] = Истина;
		МассивСотрудников.Добавить(Сотрудник);
	КонецЦикла;
	
	Если СтруктураПредприятия.ЭтоРуководитель(Автор) Тогда
	
		// руководителей подразделений подчиненных мне напрямую
		РуководителиПодразделенийНиже = 
			СтруктураПредприятия.РуководителиПодразделенийВНепосредственномПодчинении(Автор);
		Для Каждого Сотрудник Из РуководителиПодразделенийНиже Цикл
			Если ДобавленныеСотрудники[Сотрудник] = Истина Тогда
				Продолжить;
			КонецЕсли;
			ДобавленныеСотрудники[Сотрудник] = Истина;
			МассивСотрудников.Добавить(Сотрудник);
		КонецЦикла;
		
	КонецЕсли;	
	
	ТекСотрудник = Сотрудники.ОсновнойСотрудник();
	Если ДобавленныеСотрудники[ТекСотрудник] = Неопределено Тогда
		МассивСотрудников.Вставить(0, ТекСотрудник);// самого себя добавим
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Вид", ВидЗадачи);
	Контекст.Вставить("Инициатор", Автор);
	Контекст.Вставить("ФункцияУчастника", ФункцияУчастника);
	Контекст.Вставить("Ссылка", Ссылка);
	МассивСотрудников = Справочники.ПравилаКоммуникаций.ПроверитьЭлементы(
		МассивСотрудников, 
		Контекст);
		
	// Если слишком много -покажем первые 20, и обязательно себя.
	Если МассивСотрудников.Количество() > 20 Тогда
		
		МассивСотрудниковКопия = ОбщегоНазначения.СкопироватьРекурсивно(МассивСотрудников);
		 
		МассивСотрудников.Очистить();
		МассивСотрудников.Добавить(ТекСотрудник);// самого себя добавим
		
		Для Каждого СтрСотрудник Из МассивСотрудниковКопия Цикл
			Если МассивСотрудников.Найти(СтрСотрудник) = Неопределено Тогда
				МассивСотрудников.Добавить(СтрСотрудник);
			КонецЕсли;
		КонецЦикла;	
		
	КонецЕсли;	
	
	Если КонтролироватьСотрудниковБезПользователя Тогда
		СотрудникиБезПользователя = Сотрудники.СотрудникиБезПользователя(МассивСотрудников);
	КонецЕсли;
	
	ДанныеСотрудников = ДанныеСотрудников(МассивСотрудников);
	
	ДанныеСотрудников.Сортировать("Представление");	
	
	// проверим. т.к. после правил коммуникаций себя может не быть	
	НайденнаяСтрока = ДанныеСотрудников.Найти(ТекСотрудник, "Ссылка");
	Если НайденнаяСтрока <> Неопределено Тогда
		// сдвинем в начало. (уже после сортировки по ФИО)
		ИндексСтроки = ДанныеСотрудников.Индекс(НайденнаяСтрока);
		ДанныеСотрудников.Сдвинуть(НайденнаяСтрока, -ИндексСтроки);		
	КонецЕсли;	 	
	
	Для Каждого Выборка Из ДанныеСотрудников Цикл
		
		Сотрудник = Выборка.Ссылка;
		
		НадоВыделитьЖирным = Ложь;
		
		Если Сотрудник = Выборка.Руководитель Тогда
			НадоВыделитьЖирным = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Пояснение1) И ЗначениеЗаполнено(Выборка.Пояснение2) Тогда 
			ТекстПояснения = СтрШаблон(" (%1, %2)", СтрСокращенно(Выборка.Пояснение1, 60), СтрСокращенно(Выборка.Пояснение2, 60));
		ИначеЕсли ЗначениеЗаполнено(Выборка.Пояснение1) Тогда
			ТекстПояснения = СтрШаблон(" (%1)", СтрСокращенно(Выборка.Пояснение1, 100));
		ИначеЕсли ЗначениеЗаполнено(Выборка.Пояснение2) Тогда
			ТекстПояснения = СтрШаблон(" (%1, %2)", "", СтрСокращенно(Выборка.Пояснение2, 100));
		Иначе
			ТекстПояснения = СтрШаблон(" (%1)", НРег(ТипЗнч(Выборка.Ссылка)));
		КонецЕсли;
		
		ЦветНедействительный = WebЦвета.Серый;
		
		Если НадоВыделитьЖирным Тогда
			//@skip-check new-font
			ПредставлениеЭлемента = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(Выборка.Представление, Новый Шрифт(,,Истина)),
				Новый ФорматированнаяСтрока(ТекстПояснения, , ЦветНедействительный));
		Иначе
			ПредставлениеЭлемента = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(Выборка.Представление),
				Новый ФорматированнаяСтрока(ТекстПояснения, , ЦветНедействительный));
		КонецЕсли;	
	 	
	 	НовыйЭлементСписка = Сотрудник;
	 	Если КонтролироватьСотрудниковБезПользователя И СотрудникиБезПользователя.Найти(Сотрудник) <> Неопределено Тогда
			НовыйЭлементСписка = Новый Структура("Ссылка, СотрудникБезПользователя", Сотрудник, Истина);
	 	КонецЕсли;
	 	
		ТекСписок.Добавить(НовыйЭлементСписка, ПредставлениеЭлемента);
		
		Если ТекСписок.Количество() >= 20 Тогда
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	ТекСписок.СортироватьПоПредставлению();
	
	Возврат ТекСписок;

КонецФункции

// Дерево задач для печати карточки.
// 
// Параметры:
//  ОтборПоПриложению - СправочникСсылка.ДокументыПредприятия 
//  Заголовок - Строка.
// 
// Возвращаемое значение:
//  ДеревоЗначений
// 
Функция ДеревоЗадачДляПечатиКарточкиДокумента(ОтборПоПриложению, Заголовок) Экспорт
	
	Если Не ЗначениеЗаполнено(ОтборПоПриложению) Тогда
		ВызватьИсключение
			НСтр("ru = 'Режим дерева поддерживается только при отборе по приложению.'");
	КонецЕсли;
	
	ПечатьКарточкиДокумента = Истина;
	
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	ДеревоЗадач = Новый ДеревоЗначений;
	ДеревоЗадач.Колонки.Добавить("КлючСтроки");
	ДеревоЗадач.Колонки.Добавить("Представление");
	ДеревоЗадач.Колонки.Добавить("Задача");
	ДеревоЗадач.Колонки.Добавить("ДействиеЗадачи");
	ДеревоЗадач.Колонки.Добавить("Срок");
	ДеревоЗадач.Колонки.Добавить("СостояниеЗадачи");
	ДеревоЗадач.Колонки.Добавить("СостояниеУчастникаЗадачи");
	ДеревоЗадач.Колонки.Добавить("ЕстьПриложения", ОписаниеТиповБулево);
	ДеревоЗадач.Колонки.Добавить("Участник");
	ДеревоЗадач.Колонки.Добавить("РезультатДействияТекстом");
	ДеревоЗадач.Колонки.Добавить("Заголовок");
	ДеревоЗадач.Колонки.Добавить("ИндексКартинкиСостояния");
	ДеревоЗадач.Колонки.Добавить("ЭтоВыполненнаяЗадача", ОписаниеТиповБулево);
	ДеревоЗадач.Колонки.Добавить("ЭтоПервыйУровень", ОписаниеТиповБулево);
	ДеревоЗадач.Колонки.Добавить("ВозможенВозвратНаДоработку", ОписаниеТиповБулево);

	УстановитьПривилегированныйРежим(Истина);
	
	// Сформируем вспомогательные данные.
	ЗадачиПоПриложению = ЗадачиПоПриложению(ОтборПоПриложению);
	
	АктивныеДействияПоЗадачам =
		Документы.ДействиеЗадачи.АктивныеДействияПоЗадачам(ЗадачиПоПриложению);
	ЭтоПросроченныеИОжидающиеВыполненияЗадачи =
		РегистрыСведений.РеестрЗадачПоАвторам.ЭтоПросроченныеИОжидающиеВыполненияЗадачи(
			ЗадачиПоПриложению);
	ЭтоОжидающиеПроверкиЗадачи =
		РегистрыСведений.РеестрЗадачПоАвторам.ЭтоОжидающиеПроверкиЗадачи(ЗадачиПоПриложению);
	РеквизитыЗадач = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ЗадачиПоПриложению,
		"Автор, Номер, ВышестоящаяЗадача, ВышестоящееДействие, ДатаСоздания,
		|Заголовок, СостояниеЗадачи, РезультатЗадачи, Срок, Участники");
	
	ПодзадачиПоДействиям = Новый Соответствие;
	Для Каждого ЗадачаПоПриложению Из ЗадачиПоПриложению Цикл
			
		РеквизитыЗадачи = РеквизитыЗадач[ЗадачаПоПриложению];
		
		//@skip-check bsl-legacy-check-expression-type
		РеквизитыЗадачи.Участники = РеквизитыЗадачи.Участники.Выгрузить();
		РеквизитыЗадачи.Участники.Сортировать("НомерСтроки Возр");
		
		Если ЗначениеЗаполнено(РеквизитыЗадачи.ВышестоящееДействие) Тогда
			
			Если ПодзадачиПоДействиям[РеквизитыЗадачи.ВышестоящееДействие] = Неопределено Тогда
				ПодзадачиПоДействиям[РеквизитыЗадачи.ВышестоящееДействие] = Новый Массив;
			КонецЕсли; 
			
			ПодзадачиПоДействию = ПодзадачиПоДействиям[РеквизитыЗадачи.ВышестоящееДействие];
			ПодзадачиПоДействию.Добавить(ЗадачаПоПриложению);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПраваСотрудниковПоОбъектам = ДокументооборотПраваДоступа.ПраваСотрудниковПоОбъектам(
		ЗадачиПоПриложению,
		Истина,
		ПараметрыСеанса.СотрудникиПользователя);
	
	ПраваЧтенияПоЗадачам = Новый Соответствие;
	
	Для Каждого СтрокаПрав Из ПраваСотрудниковПоОбъектам Цикл
		
		Если ПраваЧтенияПоЗадачам[СтрокаПрав.ОбъектДоступа] = Неопределено Тогда
			ПраваЧтенияПоЗадачам[СтрокаПрав.ОбъектДоступа] = Ложь;
		КонецЕсли;
		
		ПраваЧтенияПоЗадачам[СтрокаПрав.ОбъектДоступа] =
			ПраваЧтенияПоЗадачам[СтрокаПрав.ОбъектДоступа] Или СтрокаПрав.Чтение;
		
	КонецЦикла;
	
	ТекстОписаниеСкрыто = НСтр("ru = 'Описание скрыто'");
	
	// Обработаем каждый уровень дерева.
	ДействияТекущегоУровня = Новый Массив;
	ЭтоПервыйУровень = Истина;
	Пока ДействияТекущегоУровня.Количество() > 0 Или ЭтоПервыйУровень Цикл
		
		// Определим задачи текущего уровня.
		ЗадачиТекущегоУровня = Новый Массив;
		
		Для Каждого ЗадачаПоПриложению Из ЗадачиПоПриложению Цикл
			
			РеквизитыЗадачи = РеквизитыЗадач[ЗадачаПоПриложению];
			
			ЗаполненоВышестоящееДействие = ЗначениеЗаполнено(РеквизитыЗадачи.ВышестоящееДействие);
			ЕстьВышестоящаяЗадача =
				ЗадачиПоПриложению.Найти(РеквизитыЗадачи.ВышестоящаяЗадача) <> Неопределено;
			ЕстьВышестоящееДействиеВИерархии = ЗаполненоВышестоящееДействие И ЕстьВышестоящаяЗадача;
			
			ЭтоПодзадачаТекущегоУровня =
				ДействияТекущегоУровня.Найти(РеквизитыЗадачи.ВышестоящееДействие) <> Неопределено;
			
			Если ЭтоПервыйУровень И Не ЕстьВышестоящееДействиеВИерархии Тогда
				
				ЗадачиТекущегоУровня.Добавить(ЗадачаПоПриложению);
				
			ИначеЕсли Не ЭтоПервыйУровень И ЭтоПодзадачаТекущегоУровня Тогда
				
				ЗадачиТекущегоУровня.Добавить(ЗадачаПоПриложению);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Сформируем данные задач
		ВышестоящиеДействияТекущегоУровня = Новый Массив;
		
		ДанныеЗадач = Новый ТаблицаЗначений;
		ДанныеЗадач.Колонки.Добавить("Задача");
		ДанныеЗадач.Колонки.Добавить("Заголовок");
		ДанныеЗадач.Колонки.Добавить("ВышестоящаяЗадача");
		ДанныеЗадач.Колонки.Добавить("ВышестоящееДействие");
		ДанныеЗадач.Колонки.Добавить("СостояниеЗадачи");
		ДанныеЗадач.Колонки.Добавить("РезультатЗадачи");
		ДанныеЗадач.Колонки.Добавить("ДатаСоздания");
		ДанныеЗадач.Колонки.Добавить("Срок");
		ДанныеЗадач.Колонки.Добавить("ПросроченаИОжидаетВыполнения");
		ДанныеЗадач.Колонки.Добавить("Представление");
		
		Для Каждого ЗадачаТекущегоУровня Из ЗадачиТекущегоУровня Цикл
			
			РеквизитыЗадачи = РеквизитыЗадач[ЗадачаТекущегоУровня];
			
			СтрокаДанныеПодзадачи = ДанныеЗадач.Добавить();
			СтрокаДанныеПодзадачи.Задача = ЗадачаТекущегоУровня;
			СтрокаДанныеПодзадачи.Заголовок = РеквизитыЗадачи.Заголовок;
			СтрокаДанныеПодзадачи.ВышестоящаяЗадача = РеквизитыЗадачи.ВышестоящаяЗадача;
			СтрокаДанныеПодзадачи.ВышестоящееДействие = РеквизитыЗадачи.ВышестоящееДействие;
			СтрокаДанныеПодзадачи.СостояниеЗадачи = РеквизитыЗадачи.СостояниеЗадачи;
			СтрокаДанныеПодзадачи.РезультатЗадачи = РеквизитыЗадачи.РезультатЗадачи;
			СтрокаДанныеПодзадачи.Срок = РеквизитыЗадачи.Срок;
			СтрокаДанныеПодзадачи.ДатаСоздания = РеквизитыЗадачи.ДатаСоздания;
			СтрокаДанныеПодзадачи.ПросроченаИОжидаетВыполнения =
				ЭтоПросроченныеИОжидающиеВыполненияЗадачи[ЗадачаТекущегоУровня];
			
			ПредставлениеЗаголовка =
				?(ПраваЧтенияПоЗадачам[ЗадачаТекущегоУровня] = Истина,
					РеквизитыЗадачи.Заголовок,
					ТекстОписаниеСкрыто);
			ПредставлениеНомера = Документы.Задача.ПредставлениеНомера(РеквизитыЗадачи.Номер);
			
			Если ЭтоПервыйУровень Тогда
				
				Если ЗначениеЗаполнено(РеквизитыЗадачи.Срок) Тогда
					СтрокаДанныеПодзадачи.Представление = СтрШаблон(
						НСтр("ru = '%1 № %2 от %3 до %4'"),
						ПредставлениеЗаголовка,
						ПредставлениеНомера,
						Сотрудники.ПредставлениеСотрудникаНаДату(РеквизитыЗадачи.Автор, РеквизитыЗадачи.ДатаСоздания),
						Формат(РеквизитыЗадачи.Срок, Метаданные.Документы.Задача.Реквизиты.Срок));
				Иначе
					СтрокаДанныеПодзадачи.Представление = СтрШаблон(
						НСтр("ru = '%1 № %2 от %3'"),
						ПредставлениеЗаголовка,
						ПредставлениеНомера,
						Сотрудники.ПредставлениеСотрудникаНаДату(РеквизитыЗадачи.Автор, РеквизитыЗадачи.ДатаСоздания));
				КонецЕсли;
			
			Иначе
				
				СтрокаДанныеПодзадачи.Представление = ПредставлениеЗаголовка;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитыЗадачи.ВышестоящееДействие) Тогда
				ВышестоящиеДействияТекущегоУровня.Добавить(РеквизитыЗадачи.ВышестоящееДействие);
			КонецЕсли;
			
		КонецЦикла;
		
		ДанныеЗадач.Сортировать("ДатаСоздания Убыв");
		ДанныеЗадач.Индексы.Добавить("Задача");
		
		ВышестоящиеДействияТекущегоУровня =
			ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВышестоящиеДействияТекущегоУровня);
		
		// Определим количество действий по задачам.
		КоличествоДействийПоЗадачам = 
			КоличествоДействийПоЗадачам(
				АктивныеДействияПоЗадачам,
				ЗадачиТекущегоУровня,
				РеквизитыЗадач,
				ЭтоОжидающиеПроверкиЗадачи);
		
		// Сформируем данные действий задач
		ДанныеДействийПодзадач = Новый ТаблицаЗначений;
		ДанныеДействийПодзадач.Колонки.Добавить("Задача");
		ДанныеДействийПодзадач.Колонки.Добавить("ДействиеЗадачи");
		ДанныеДействийПодзадач.Колонки.Добавить("ЕстьПриложения");
		ДанныеДействийПодзадач.Колонки.Добавить("Участник");
		ДанныеДействийПодзадач.Колонки.Добавить("СостояниеУчастникаЗадачи");
		ДанныеДействийПодзадач.Колонки.Добавить("РезультатДействияТекстом");
		ДанныеДействийПодзадач.Колонки.Добавить("ЭтоОтветственный");
		ДанныеДействийПодзадач.Колонки.Добавить("ЭтоПроверяющий");
		ДанныеДействийПодзадач.Колонки.Добавить("ВышестоящееДействие");
		ДанныеДействийПодзадач.Колонки.Добавить("Представление");
		
		ДействияСледующегоУровня = Новый Массив;
		Для Каждого СтрокаДействия Из АктивныеДействияПоЗадачам Цикл
			
			Если ЗадачиТекущегоУровня.Найти(СтрокаДействия.Задача) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			РеквизитыЗадачи = РеквизитыЗадач[СтрокаДействия.Задача];
			Если РеквизитыЗадачи = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаУчастника = РеквизитыЗадачи.Участники.Найти(
				СтрокаДействия.ДействиеЗадачи,
				"ДействиеУчастника");
			Если СтрокаУчастника = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЭтоОжидающаяПроверкиЗадача = ЭтоОжидающиеПроверкиЗадачи[СтрокаДействия.Задача];
			Если Не ЭтоОжидающаяПроверкиЗадача
				И РаботаСЗадачамиПовтИсп.ЭтоПроверяющий(СтрокаУчастника.ВидУчастника) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДанныеДействия = ДанныеДействийПодзадач.Добавить();
			СтрокаДанныеДействия.Задача = СтрокаДействия.Задача;
			СтрокаДанныеДействия.ДействиеЗадачи = СтрокаДействия.ДействиеЗадачи;
			СтрокаДанныеДействия.ЕстьПриложения = СтрокаДействия.ЕстьПриложения;
			СтрокаДанныеДействия.Участник = СтрокаДействия.Исполнитель;
			СтрокаДанныеДействия.СостояниеУчастникаЗадачи = СтрокаДействия.СостояниеУчастникаЗадачи;
			СтрокаДанныеДействия.РезультатДействияТекстом = СтрокаДействия.РезультатДействияТекстом;
			СтрокаДанныеДействия.ЭтоОтветственный =
				РаботаСЗадачамиПовтИсп.ЭтоОтветственный(СтрокаУчастника.ВидУчастника);
			СтрокаДанныеДействия.ЭтоПроверяющий =
				РаботаСЗадачамиПовтИсп.ЭтоПроверяющий(СтрокаУчастника.ВидУчастника);
			СтрокаДанныеДействия.ВышестоящееДействие = РеквизитыЗадачи.ВышестоящееДействие;
			СтрокаДанныеДействия.Представление = ПредставлениеДействияВДереве(
				СтрокаДанныеДействия,
				КоличествоДействийПоЗадачам[СтрокаДанныеДействия.Задача],
				ПраваЧтенияПоЗадачам[СтрокаДанныеДействия.Задача] = Истина,
				СтрокаУчастника.ВидУчастника,
				СтрокаДействия.ФактическийИсполнитель);
		
			ДействияСледующегоУровня.Добавить(СтрокаДействия.ДействиеЗадачи);
			
		КонецЦикла;
		
		ДанныеДействийПодзадач.Сортировать("ЭтоОтветственный Убыв, ЭтоПроверяющий, Участник");
		ДанныеДействийПодзадач.Индексы.Добавить("ДействиеЗадачи");
		
		// Обновим отображение в дереве.
		Если ЭтоПервыйУровень Тогда
			
			ОбновитьПодзадачиУзла(
				ДеревоЗадач.Строки,
				ДанныеЗадач,
				ДанныеДействийПодзадач,
				ЭтоПервыйУровень,
				Ложь,
				ПечатьКарточкиДокумента);
			
		Иначе
			
			УзлыДействий = Новый Соответствие;
			
			УзлыКОбработке = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДеревоЗадач);
			Пока УзлыКОбработке.Количество() > 0 Цикл
				
				УзелКОбработке = УзлыКОбработке.Получить(0);
				УзлыКОбработке.Удалить(0);
				
				Для Каждого ОчереднойУзел Из УзелКОбработке.Строки Цикл
					
					Если ЗначениеЗаполнено(ОчереднойУзел.ДействиеЗадачи) Тогда
						УзлыДействий.Вставить(ОчереднойУзел.ДействиеЗадачи, ОчереднойУзел);
					КонецЕсли;
					
					УзлыКОбработке.Добавить(ОчереднойУзел);
					
				КонецЦикла;
				
			КонецЦикла;
			
			Для Каждого ВышестоящееДействие Из ВышестоящиеДействияТекущегоУровня Цикл
				
				УзелВышестоящегоДействия = УзлыДействий[ВышестоящееДействие];
				Если УзелВышестоящегоДействия = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеПодзадачУзла = ДанныеЗадач.Скопировать(
					Новый Структура("ВышестоящееДействие", ВышестоящееДействие));
				ДанныеДействийПодзадачУзла = ДанныеДействийПодзадач.Скопировать(
					Новый Структура("ВышестоящееДействие", ВышестоящееДействие));
				
				ОбновитьПодзадачиУзла(
					УзелВышестоящегоДействия.Строки,
					ДанныеПодзадачУзла,
					ДанныеДействийПодзадачУзла,
					ЭтоПервыйУровень,
					ПечатьКарточкиДокумента);
					
			КонецЦикла;
			
		КонецЕсли;
		
		// Подготовим следующую итерацию.
		ДействияТекущегоУровня = ДействияСледующегоУровня;
		ЭтоПервыйУровень = Ложь;
		
	КонецЦикла;
	
	// Обновим заголовок.
	КоличествоЗадач = ЗадачиПоПриложению.Количество();
	
	ЭтоОжидающиеВыполненияЗадачи = ЭтоОжидающиеВыполненияЗадачи(ЗадачиПоПриложению);
	
	КоличествоОжидающихВыполненияЗадач = 0;
	Для Каждого Задача Из ЗадачиПоПриложению Цикл
		
		ЭтоОжидающаяВыполненияЗадача = ЭтоОжидающиеВыполненияЗадачи[Задача];
		Если ЭтоОжидающаяВыполненияЗадача Тогда
			КоличествоОжидающихВыполненияЗадач = КоличествоОжидающихВыполненияЗадач + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(КоличествоОжидающихВыполненияЗадач) Тогда
		Заголовок =
			СтрШаблон(
				НСтр("ru = '%1 (Выполняется: %2, Всего: %3)'"),
				Метаданные.Документы.Задача.Команды.ЗадачиПоПриложению.Синоним,
				Формат(КоличествоОжидающихВыполненияЗадач, "ЧН=0;"),
				Формат(КоличествоЗадач, "ЧН=0;"));
	Иначе
		Заголовок =
			СтрШаблон(
				НСтр("ru = '%1 (Всего: %2)'"),
				Метаданные.Документы.Задача.Команды.ЗадачиПоПриложению.Синоним,
				Формат(КоличествоЗадач, "ЧН=0;"));
	КонецЕсли;
	
	Возврат ДеревоЗадач;
	
КонецФункции	

// Формирует параметры выбора результата действия текстом.
//
// Параметры:
//   ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи - текущее действие задачи.
//                  - СтрокаТаблицыЗначений - см. ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗапросСОтборами
//
// Возвращаемое значение:
//   Структура - параметры выбора результата действия текстом:
//     * ОбластьПрименения - ПеречислениеСсылка.ОбластиПримененияШаблоновТекстов
//     * ЗаголовокФормыВыбора - Строка
//     * ЗаголовокФормыСоздания - Строка
//
Функция ПараметрыВыбораРезультатаДействияТекстом(ДействиеЗадачи) Экспорт
	
	КэшОбластиПросмотра = КэшиНаВремяВызоваПовтИсп.КэшЗадачаОбластьПросмотра();
	
	Если КэшОбластиПросмотра.Заполнен И КэшОбластиПросмотра.ДействиеЗадачи = ДействиеЗадачи Тогда
		РеквизитыДействия = КэшОбластиПросмотра.РеквизитыДействияЗадачи;
	ИначеЕсли ТипЗнч(ДействиеЗадачи) = Тип("СтрокаТаблицыЗначений") Тогда
		РеквизитыДействия = ДействиеЗадачи;
	Иначе
		РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДействиеЗадачи,
			"ВидДействия, Задача");
	КонецЕсли;
	
	КешНСИЗадач = РаботаСЗадачамиПовтИсп.КешНСИЗадач();
	РеквизитыВида = КешНСИЗадач.РеквизитыВидовДействий[РеквизитыДействия.ВидДействия];
	
	ОбластьПрименения = РеквизитыВида.ОбластьПримененияШаблоновТекстов;
	Если Не ЗначениеЗаполнено(ОбластьПрименения) Тогда
		ОбластьПрименения = Перечисления.ОбластиПримененияШаблоновТекстов.ЗадачаИсполнить;
	Конецесли;
	
	Если ОбластьПрименения = Перечисления.ОбластиПримененияШаблоновТекстов.ЗадачаОбработатьРезультат Тогда
		
		РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			РеквизитыДействия.Задача,
			"ВидЗадачи");
		Если РеквизитыЗадачи.ВидЗадачи = Справочники.ВидыЗадач.Вопрос Тогда
			ОбластьПрименения = Перечисления.ОбластиПримененияШаблоновТекстов.ЗадачаОбработатьРезультатВопроса;
		ИначеЕсли РеквизитыЗадачи.ВидЗадачи = Справочники.ВидыЗадач.ЗапросНаПереносСрока Тогда
			ОбластьПрименения = Перечисления.ОбластиПримененияШаблоновТекстов.ЗадачаОбработатьРезультатЗапроса;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ОбластьПрименения, ЗаголовокФормыВыбора, ЗаголовокФормыСоздания");
	ПараметрыФормы.Вставить("ОбластьПрименения", ОбластьПрименения);
	ПараметрыФормы.Вставить("ЗаголовокФормыВыбора", НСтр("ru = 'Выбор шаблона текста'"));
	ПараметрыФормы.Вставить("ЗаголовокФормыСоздания", НСтр("ru = 'Шаблон текста'"));
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Определяет, какие сотрудники считаются сотрудниками руководителя для текущего пользователя.
// В подразделениях руководителя в форме "Задачи подчиненных" не показываются задачи руководителя ему самому.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Сотрудники - Исключения из подчиненных.
//  
Функция ИсключенияИзПодчиненных() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПодразделенияРуководителя = РаботаСЗадачамиПовтИсп.ПодразделенияРуководителя();
	
	РеквизитыПодразделений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ПодразделенияРуководителя, "Руководитель");
	
	ИсключенияИзПодчиненных = Новый Массив;
	
	Для Каждого ПодразделениеРуководителя Из ПодразделенияРуководителя Цикл
		
		РеквизитыПодразделения = РеквизитыПодразделений[ПодразделениеРуководителя];
		
		Если ЗначениеЗаполнено(РеквизитыПодразделения.Руководитель) Тогда
			ИсключенияИзПодчиненных.Добавить(РеквизитыПодразделения.Руководитель);
		КонецЕсли;
		
	КонецЦикла;
	
	ИсключенияИзПодчиненных = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИсключенияИзПодчиненных);
	
	Возврат ИсключенияИзПодчиненных;
	
КонецФункции

// Исключает файлы задач из массива приложений.
// 
// Параметры:
//  Приложения - Массив.
//
Процедура ИсключитьФайлыЗадач(Приложения) Экспорт
	
	ПриложенияФайлы = Новый Массив; // Массив из СправочникСсылка.Файлы
	Для Каждого Приложение Из Приложения Цикл
		
		Если ТипЗнч(Приложение) <> Тип("СправочникСсылка.Файлы") Тогда
			Продолжить;
		КонецЕсли;
		
		ПриложенияФайлы.Добавить(Приложение);
		
	КонецЦикла;
	
	ВладельцыФайлов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ПриложенияФайлы, "ВладелецФайла");
	
	КоличествоЭлементов = Приложения.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ОбратныйИндекс = КоличествоЭлементов - Индекс;
		Приложение = Приложения[ОбратныйИндекс];
		
		ВладелецФайла = ВладельцыФайлов[Приложение];
		
		Если ТипЗнч(ВладелецФайла) = Тип("ДокументСсылка.Задача")
			Или ТипЗнч(ВладелецФайла) = Тип("СправочникСсылка.ШаблоныЗадач")
			Или ТипЗнч(ВладелецФайла) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
			
			Приложения.Удалить(ОбратныйИндекс);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Формат срока.
// 
// Возвращаемое значение:
//  Строка - Формат срока.
//
Функция ФорматСрока() Экспорт
	
	ФорматСрока = ?(ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач"),
		"ДФ='dd.MM.yy H:mm'",
		"ДФ='dd.MM.yy'");
	
	Возврат ФорматСрока;
	
КонецФункции

// Формат срока полный.
// 
// Возвращаемое значение:
//  Строка - Формат срока.
//
Функция ФорматСрокаПолный() Экспорт
	
	ФорматСрокаПолный = ?(ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач"),
		"ДФ='dd.MM.yyyy H:mm'",
		"ДФ='dd.MM.yyyy'");
	
	Возврат ФорматСрокаПолный;
	
КонецФункции

// Проверяет, что есть особые права просмотра.
// 
// Параметры:
//  Приложение - ОпределяемыйТип.ПриложениеЗадач.
// 
// Возвращаемое значение:
//  Булево - Есть особые права просмотра.
// 
Функция ЕстьОсобыеПраваПросмотра(Приложение) Экспорт
	
	ЕстьОсобыеПраваПросмотра = Ложь;
	
	Если Не РаботаСЗадачамиКлиентСервер.ЭтоПриложениеБезПрав(Приложение) Тогда
		Возврат ЕстьОсобыеПраваПросмотра;
	КонецЕсли;
	
	ЗадачиПоПриложению = Документы.Задача.НайтиПоПриложениям(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Приложение));
	
	ПраваПоЗадачам = ДокументооборотПраваДоступа.ПраваПользователейПоОбъектам(
		ЗадачиПоПриложению,
		Истина,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Пользователи.ТекущийПользователь()));
	
	Для Каждого СтрокаПрав Из ПраваПоЗадачам Цикл
		Если СтрокаПрав.Чтение Тогда
			ЕстьОсобыеПраваПросмотра = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьОсобыеПраваПросмотра;
	
КонецФункции

// Параметры отбора задач текущему пользователю.
// 
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи
// 
// Возвращаемое значение:
//  Структура - Параметры отбора задач текущему пользователю:
//   * УчитыватьЗамещаемых - Булево
//   * Исполнитель - Массив из ОпределяемыйТип.УчастникЗадач
//   * ИсполнительБезЗамещаемых - Массив из ОпределяемыйТип.УчастникЗадач
//   * ИсполнительБезЗамещаемыхИПереданных - Массив из ОпределяемыйТип.УчастникЗадач
//   * ПереданныеИсполнители - Массив из ОпределяемыйТип.УчастникЗадач
// 
Функция ПараметрыОтбораЗадачТекущемуПользователю(Пользователь) Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("УчитыватьЗамещаемых", Истина);
	ПараметрыОтбора.Вставить("Исполнитель", Новый Массив);
	ПараметрыОтбора.Вставить("ИсполнительБезЗамещаемых", Новый Массив);
	ПараметрыОтбора.Вставить("ИсполнительБезЗамещаемыхИПереданных", Новый Массив);
	ПараметрыОтбора.Вставить("ПереданныеИсполнители", Новый Массив);
	
	Если Пользователь = Пользователи.ТекущийПользователь() Тогда
		СотрудникиПользователя = ПараметрыСеанса.СотрудникиПользователя;
	Иначе
		СотрудникиПользователя = Сотрудники.СотрудникиПользователя(Пользователь, Ложь);
	КонецЕсли;
	
	ПараметрыОтбора.Исполнитель = РазыменоватьОтборПоУчастнику(
		Пользователь,
		Ложь,
		Истина);
	ПараметрыОтбора.ИсполнительБезЗамещаемых =  РазыменоватьОтборПоУчастнику(
		Пользователь,
		Ложь,
		Ложь);
	ПараметрыОтбора.ИсполнительБезЗамещаемыхИПереданных = ИсполнителиЗадач(
		СотрудникиПользователя,
		Ложь,
		Ложь);
	ПараметрыОтбора.ПереданныеИсполнители =
		РегистрыСведений.ИсполнителиВместоНедействительных.ПереданныеИсполнители(
			СотрудникиПользователя);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ПараметрыОтбора.Исполнитель,
		ПараметрыОтбора.ПереданныеИсполнители);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ПараметрыОтбора.ИсполнительБезЗамещаемых,
		ПараметрыОтбора.ПереданныеИсполнители);
	
	Возврат ПараметрыОтбора;
	
КонецФункции

// Определяет сотрудников участника.
// 
// Параметры:
//  Участник - ОпределяемыйТип.УчастникЗадач.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Сотрудники.
// 
Функция СотрудникиУчастника(Участник) Экспорт
	
	СотрудникиУчастника = Новый Массив; // СправочникСсылка.Сотрудники
	
	ТипУчастника = ТипЗнч(Участник);
	Если ТипУчастника = Тип("СправочникСсылка.Сотрудники") Тогда
		
		// Если сотрудник помечен на удаление, то он не даёт прав пользователю и руководителям,
		// и поэтому не включаем его в реестры задач, а так же не даём право выполнения его задач руководителю.
		РеквизитыСотруднкиа =
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Участник, "ПометкаУдаления");
		Если РеквизитыСотруднкиа.ПометкаУдаления = Ложь Тогда
			СотрудникиУчастника.Добавить(Участник);
		КонецЕсли;
		
	ИначеЕсли ТипУчастника = Тип("СправочникСсылка.ПолныеРоли") Тогда
		
		СотрудникиУчастника = РегистрыСведений.ИсполнителиРолей.ИсполнителиРоли(Участник);
		
	ИначеЕсли ТипУчастника = Тип("Неопределено") Тогда
		
		// Нет сотрудников у исполнителя.
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный тип участника %1 (%2).'"),
			Участник,
			ТипУчастника);
		
	КонецЕсли;
	
	Возврат СотрудникиУчастника;
	
КонецФункции

// Определяет замещающих и помощников, у которых есть доступ к задачам.
// 
// Параметры:
//  МассивСотрудников - Массив из СправочникСсылка.Сотрудники.
// 
// Возвращаемое значение:
//  См. Справочники.ЗамещающиеИПомощники.АктуальныеЗамещения.
// 
Функция ЗамещающиеИПомощникиПоЗадачам(МассивСотрудников) Экспорт
	
	ОбластиЗамещения = ОбластиЗамещенияЗадач();
	
	ЗамещающиеИПомощникиРуководителей =
		Справочники.ЗамещающиеИПомощники.АктуальныеЗамещенияСотрудников(
			МассивСотрудников,
			ОбластиЗамещения);
	
	Возврат ЗамещающиеИПомощникиРуководителей;
	
КонецФункции

// Формирует описание поступивших обновлений действий задач.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
// 
// Возвращаемое значение:
//  Строка - Описание поступивших обновлений.
//
Функция ОписаниеПоступившихОбновленийДействияЗадачи(ДействиеЗадачи) Экспорт
	
	ДействияЗадач = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДействиеЗадачи);
	ОписанияПоступившихОбновлений = ОписанияПоступившихОбновленийДействийЗадач(ДействияЗадач);
	ОписаниеПоступившихОбновлений = ОписанияПоступившихОбновлений[ДействиеЗадачи];
	
	Возврат ОписаниеПоступившихОбновлений;
	
КонецФункции

// Определяет, какие подразделения считаются подразделениями руководителя для текущего пользователя.
// В подразделениях руководителя в форме "Задачи подчиненных" не показываются задачи руководителя ему самому.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.СтруктураПредприятия.
// 
Функция ПодразделенияРуководителя() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозможныеРуководители = Новый Массив;
	
	// Возможно - сам сотрудник руководитель.
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВозможныеРуководители,
		ПараметрыСеанса.СотрудникиПользователя);
	
	// Возможно - сотрудник является помощником или заместителя руководителя.
	ОбластиЗамещения = ОбластиЗамещенияЗадач();
	АктуальныеЗамещения = Справочники.ЗамещающиеИПомощники.АктуальныеЗамещения(
		ПараметрыСеанса.СотрудникиПользователя,
		ОбластиЗамещения);
	АктуальныеЗамещаемые = АктуальныеЗамещения.ВыгрузитьКолонку("Сотрудник");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВозможныеРуководители,
		АктуальныеЗамещаемые);
	
	ВозможныеРуководители = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВозможныеРуководители);
	ФизЛицаПоРуководителям = Сотрудники.ФизЛицаПоСотрудникам(ВозможныеРуководители);
	ФизЛицаВозможныхРуководителей =
		ОбщегоНазначенияДокументооборотКлиентСервер.ЗначенияСоответствия(ФизЛицаПоРуководителям);
	СотрудникиПоФизЛицам = Сотрудники.СотрудникиПоФизЛицам(ФизЛицаВозможныхРуководителей);
	ВсеВозможныеСотрудникиРуководителей =
		ОбщегоНазначенияДокументооборотКлиентСервер.ЗначенияСоответствия(СотрудникиПоФизЛицам);
	
	// Определим - какими подразделениями может руководить текущий пользователь.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка КАК Подразделение,
		|	СтруктураПредприятия.Руководитель КАК Руководитель
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Руководитель В (&ВсеВозможныеСотрудникиРуководителей)");
	
	Запрос.УстановитьПараметр("ВсеВозможныеСотрудникиРуководителей",
		ВсеВозможныеСотрудникиРуководителей);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
	
	ВозможныеПодразделения = Новый Массив;
	ВсеПодразделенияВозможныхРуководителей = Новый Массив;
	РуководителиПодразделений = Новый Соответствие;
	
	Для Каждого СтрокаРезультата Из ТаблицаРезультата Цикл
		
		ВсеПодразделенияВозможныхРуководителей.Добавить(СтрокаРезультата.Подразделение);
		РуководителиПодразделений[СтрокаРезультата.Подразделение] = СтрокаРезультата.Руководитель;
		
		Если ВозможныеРуководители.Найти(СтрокаРезультата.Руководитель) <> Неопределено Тогда
			ВозможныеПодразделения.Добавить(СтрокаРезультата.Подразделение);
		КонецЕсли;
		
	КонецЦикла;
	
	// Определим - вышестоящие руководители, задачи которых показываем в "Задачи мне".
	РуководителиПодразделенийПоИерархии =
		СтруктураПредприятия.РуководителиПодразделенийПоИерархии(
			ВсеПодразделенияВозможныхРуководителей);
	РуководителиПодразделенийПоИерархии.Индексы.Добавить("Подразделение");
	РуководителиПодразделенийПоИерархии.Индексы.Добавить("ПодчиненноеПодразделение");
	
	ПодразделенияРуководителя = Новый Массив;
	
	Для Каждого ВозможноеПодразделение Из ВозможныеПодразделения Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ПодчиненноеПодразделение", ВозможноеПодразделение);
		
		НайденныеСтроки = РуководителиПодразделенийПоИерархии.НайтиСтроки(СтруктураОтбора);
		
		ЕстьДругойВышестоящийРуководитель = Ложь;
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			ЭтоДанныеОбИерархииСамогоПодразделения =
				НайденнаяСтрока.Подразделение = НайденнаяСтрока.ПодчиненноеПодразделение;
			Если ЭтоДанныеОбИерархииСамогоПодразделения Тогда
				Продолжить;
			КонецЕсли;
			
			ЭтоВышестоящийВозможныйРуководитель = ВозможныеРуководители.Найти(
				НайденнаяСтрока.Руководитель) <> Неопределено;
			Если Не ЭтоВышестоящийВозможныйРуководитель Тогда
				Продолжить;
			КонецЕсли;
			
			ФизЛицоВышестоящегоРуководителя =
				ФизЛицаПоРуководителям[НайденнаяСтрока.Руководитель];
			ФизЛицоПодчиненногоРуководителя =
				ФизЛицаПоРуководителям[НайденнаяСтрока.РуководительПодчиненного];
			
			ЭтоОдинРуководитель =
				ФизЛицоВышестоящегоРуководителя = ФизЛицоПодчиненногоРуководителя;
			Если ЭтоОдинРуководитель Тогда
				Продолжить;
			КонецЕсли;
			
			ЕстьДругойВышестоящийРуководитель = Истина;
			
			Прервать;
			
		КонецЦикла;
		
		Если ЕстьДругойВышестоящийРуководитель Тогда
			Продолжить;
		КонецЕсли;
		
		ПодразделенияРуководителя.Добавить(ВозможноеПодразделение);
		
	КонецЦикла;
	
	// Определим - нижестоящие подразделения вышестоящих руководителей, если помощник только части лиц.
	НижестоящиеПодразделенияРуководителя = Новый Массив;
	Для Каждого ПодразделениеРуководителя Из ПодразделенияРуководителя Цикл
		
		РуководительПодразделения = РуководителиПодразделений[ПодразделениеРуководителя];
		ФизЛицоРуководителя = ФизЛицаПоРуководителям[РуководительПодразделения];
		ВсеСотрудникиРуководителя = СотрудникиПоФизЛицам[ФизЛицоРуководителя];
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Подразделение", ПодразделениеРуководителя);
		
		НайденныеСтроки = РуководителиПодразделенийПоИерархии.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			НайденныйЭлемент =
				ВсеСотрудникиРуководителя.Найти(НайденнаяСтрока.РуководительПодчиненного);
			ЭтоСтрокаДругогоСотрудникаРуководителя = НайденныйЭлемент <> Неопределено;
			Если Не ЭтоСтрокаДругогоСотрудникаРуководителя Тогда
				Продолжить;
			КонецЕсли;
			
			ПодразделениеУжеУчтено =
				ПодразделенияРуководителя.Найти(НайденнаяСтрока.ПодчиненноеПодразделение) <> Неопределено
				Или НижестоящиеПодразделенияРуководителя.Найти(НайденнаяСтрока.ПодчиненноеПодразделение) <> Неопределено;
			
			Если ПодразделениеУжеУчтено Тогда
				Продолжить;
			КонецЕсли;
			
			НижестоящиеПодразделенияРуководителя.Добавить(НайденнаяСтрока.ПодчиненноеПодразделение);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ПодразделенияРуководителя,
		НижестоящиеПодразделенияРуководителя);
	
	ПодразделенияРуководителя =
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПодразделенияРуководителя);
	
	Возврат ПодразделенияРуководителя;
	
КонецФункции

// Определяет, считается ли указанное подразделением подразделением руководителя для текущего пользователя.
// В подразделениях руководителя в форме "Задачи подчиненных" не показываются задачи руководителя ему самому.
// Сами данные о подразделениях руководителя кэшируются.
// 
// Параметры:
//  Подразделение - СправочникСсылка.СтруктураПредприятия.
// 
// Возвращаемое значение:
//  Булево.
// 
Функция ЭтоПодразделениеРуководителя(Подразделение) Экспорт
	
	ПодразделенияРуководителя = РаботаСЗадачамиПовтИсп.ПодразделенияРуководителя();
	
	ЭтоПодразделениеРуководителя = ПодразделенияРуководителя.Найти(Подразделение) <> Неопределено;
	
	Возврат ЭтоПодразделениеРуководителя;
	
КонецФункции

// Формирует данные возврата на доработку по умолчанию.
// 
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//  ПричинаВозврата - Строка.
// 
// Возвращаемое значение:
//  См. РаботаСЗадачамиКлиентСервер.НовыйДанныеВозвратаНаДоработку.
// 
Функция ДанныеВозвратаНаДоработкуПоУмолчанию(ДействиеЗадачи, ПричинаВозврата) Экспорт
	
	РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДействиеЗадачи, "Задача");
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		РеквизитыДействия.Задача,
		"ВидЗадачи, Срок, Участники");
	Участники = РеквизитыЗадачи.Участники.Выгрузить();
	Участники.Сортировать("НомерСтроки");
	
	ДанныеВозвратаНаДоработку = РаботаСЗадачамиКлиентСервер.НовыйДанныеВозвратаНаДоработку();
	ДанныеВозвратаНаДоработку.ОбщаяПричинаВозврата = ПричинаВозврата;
	ДанныеВозвратаНаДоработку.ПричинаВозврата = ПричинаВозврата;
	ДанныеВозвратаНаДоработку.Срок = РеквизитыЗадачи.Срок;
	
	ДействияДляВозврата = Новый Массив;
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если Не РаботаСЗадачамиПовтИсп.ЭтоИсполнитель(СтрокаУчастника.ВидУчастника) Тогда
			Продолжить;
		КонецЕсли;
		
		Если РаботаСЗадачамиПовтИсп.ЭтоОтветственный(СтрокаУчастника.ВидУчастника) Тогда
			ДанныеВозвратаНаДоработку.Ответственный = СтрокаУчастника.ДействиеУчастника;
		КонецЕсли;
		
		ДействияДляВозврата.Добавить(СтрокаУчастника.ДействиеУчастника);
		
	КонецЦикла;
	
	ДанныеВозвратаНаДоработку.ДействияДляВозврата = ДействияДляВозврата;
	
	Возврат ДанныеВозвратаНаДоработку;
	
КонецФункции

// Формирует представление назначения.
// 
// Параметры:
//  ДанныеНазначения - см. РаботаСЗадачамиКлиентСервер.НовыеДанныеНазначения
// 
// Возвращаемое значение:
//  Строка
// 
Функция ПредставлениеНазначения(ДанныеНазначения) Экспорт
	
	МассивПредставления = Новый Массив;
	
	Если ЗначениеЗаполнено(ДанныеНазначения.Кому) Тогда
		ЧастьПредставления = СтрШаблон("%1: %2",
			НСтр("ru = 'Кому'"),
			ДанныеНазначения.Кому);
		МассивПредставления.Добавить(ЧастьПредставления);
	Иначе
		МассивПредставления.Добавить(НСтр("ru = 'Кому: Никому'"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеНазначения.ВариантИерархии) Тогда
		ЧастьПредставления = СтрШаблон("%1: %2",
			НСтр("ru = 'Вариант иерархии'"),
			ДанныеНазначения.ВариантИерархии);
		МассивПредставления.Добавить(ЧастьПредставления);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеНазначения.ТипПриложения) Тогда
		ЧастьПредставления = СтрШаблон("%1: %2",
			НСтр("ru = 'Тип приложения'"),
			ДанныеНазначения.ТипПриложения);
		МассивПредставления.Добавить(ЧастьПредставления);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеНазначения.ВидПриложения) Тогда
		ЧастьПредставления = СтрШаблон("%1: %2",
			НСтр("ru = 'Вид приложения'"),
			ДанныеНазначения.ВидПриложения);
		МассивПредставления.Добавить(ЧастьПредставления);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеНазначения.Тематика) Тогда
		ЧастьПредставления = СтрШаблон("%1: %2",
			НСтр("ru = 'Тематика'"),
			ДанныеНазначения.Тематика);
		МассивПредставления.Добавить(ЧастьПредставления);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеНазначения.Важность) Тогда
		ЧастьПредставления = СтрШаблон("%1: %2",
			НСтр("ru = 'Важность'"),
			ДанныеНазначения.Важность);
		МассивПредставления.Добавить(ЧастьПредставления);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеНазначения.ГрифДоступа) Тогда
		ЧастьПредставления = СтрШаблон("%1: %2",
			НСтр("ru = 'Гриф доступа'"),
			ДанныеНазначения.ГрифДоступа);
		МассивПредставления.Добавить(ЧастьПредставления);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеНазначения.Организация) Тогда
		ЧастьПредставления = СтрШаблон("%1: %2",
			НСтр("ru = 'Организация'"),
			ДанныеНазначения.Организация);
		МассивПредставления.Добавить(ЧастьПредставления);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеНазначения.Подразделение) Тогда
		ЧастьПредставления = СтрШаблон("%1: %2",
			НСтр("ru = 'Подразделение'"),
			ДанныеНазначения.Подразделение);
		МассивПредставления.Добавить(ЧастьПредставления);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеНазначения.ФормаДокумента) Тогда
		ЧастьПредставления = СтрШаблон("%1: %2",
			НСтр("ru = 'Форма документа'"),
			ДанныеНазначения.ФормаДокумента);
		МассивПредставления.Добавить(ЧастьПредставления);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеНазначения.ВидДействияОбработки) Тогда
		ЧастьПредставления = СтрШаблон("%1: %2",
			НСтр("ru = 'Вид действия обработки'"),
			ДанныеНазначения.ВидДействияОбработки);
		МассивПредставления.Добавить(ЧастьПредставления);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеНазначения.ФункцияУчастникаДействия) Тогда
		ЧастьПредставления = СтрШаблон("%1: %2",
			НСтр("ru = 'Функция участника действия'"),
			ДанныеНазначения.ФункцияУчастникаДействия);
		МассивПредставления.Добавить(ЧастьПредставления);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеНазначения.ДополнительноеУсловие) Тогда
		ЧастьПредставления = СтрШаблон("%1: %2",
			НСтр("ru = 'Дополнительное условие'"),
			ДанныеНазначения.ДополнительноеУсловие);
		МассивПредставления.Добавить(ЧастьПредставления);
	КонецЕсли;
	
	ПредставлениеНазначения = СтрСоединить(МассивПредставления, "; ");
		
	Возврат ПредставлениеНазначения;
	
КонецФункции

// Проверяет, есть ли назначенные шаблоны задач.
// 
// Параметры:
//  Основание - Неопределено
//            - ДокументСсылка.Задача
//            - Массив из ДокументСсылка.Задача
// 
// Возвращаемое значение:
//  Булево
// 
Функция ЕстьНазначенныеШаблоны(Основание) Экспорт
	
	НазначенныеШаблоны = НазначенныеШаблоны(Основание);
	
	ЕстьНазначенныеШаблоны = НазначенныеШаблоны.Количество() > 0;
	
	Возврат ЕстьНазначенныеШаблоны;
	
КонецФункции

// Определяет назначенные шаблоны для создания задачи.
// 
// Параметры:
//  Основание - Неопределено
//            - ДокументСсылка.Задача
//            - Массив из ДокументСсылка.Задача
// 
// Возвращаемое значение:
//  Массив из см. РаботаСЗадачамиКлиентСервер.НовыеДанныеШаблона
// 
Функция НазначенныеШаблоны(Основание) Экспорт
	
	МассивОснования = Новый Массив;
	Если ТипЗнч(Основание) = Тип("Массив") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОснования, Основание);
	ИначеЕсли ЗначениеЗаполнено(Основание) Тогда
		МассивОснования.Добавить(Основание);
	КонецЕсли;
	
	ВсеПриложения = Новый Массив;
	ВышестоящееДействие = Неопределено;
	ВышестоящаяЗадача = Неопределено;
	Для Каждого ЭлементОснования Из МассивОснования Цикл
		
		ТипЭлемента = ТипЗнч(ЭлементОснования);
		
		Если ТипЭлемента = Тип("ДокументСсылка.Задача") Тогда
			
			ВышестоящаяЗадача = ЭлементОснования;
			
			РеквизитыВышестоящейЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ВышестоящаяЗадача,
				"Приложения");
			ПриложенияВышестоящейЗадачи = РеквизитыВышестоящейЗадачи.Приложения.Выгрузить();
			ПриложенияВышестоящейЗадачи.Сортировать("НомерСтроки");
			
			Для Каждого СтрокаПриложения Из ПриложенияВышестоящейЗадачи Цикл
				ВсеПриложения.Добавить(СтрокаПриложения.Приложение);
			КонецЦикла;
			
		ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
			
			ВышестоящееДействие = ЭлементОснования;
			
			РеквизитыВышестоящегоДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ВышестоящееДействие,
				"Задача");
			
			ВышестоящаяЗадача = РеквизитыВышестоящегоДействия.Задача;
			
			РеквизитыВышестоящейЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ВышестоящаяЗадача,
				"Приложения");
			ПриложенияВышестоящейЗадачи = РеквизитыВышестоящейЗадачи.Приложения.Выгрузить();
			ПриложенияВышестоящейЗадачи.Сортировать("НомерСтроки");
			
			Для Каждого СтрокаПриложения Из ПриложенияВышестоящейЗадачи Цикл
				ВсеПриложения.Добавить(СтрокаПриложения.Приложение);
			КонецЦикла;
			
		ИначеЕсли Метаданные.ОпределяемыеТипы.ПриложениеЗадач.Тип.СодержитТип(ТипЭлемента) Тогда
			
			ВсеПриложения.Добавить(ЭлементОснования);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВидПриложения = ВидПриложения(ВсеПриложения);
	ТипПриложения = Перечисления.ТипыПриложенийЗадач.ТипПриложения(ВсеПриложения);
	
	Если ВсеПриложения.Количество() = 1 Тогда
		ЕдинственноеПриложение = ВсеПриложения[0];
	Иначе
		ЕдинственноеПриложение = Неопределено;
	КонецЕсли;
	
	ПредметПроверкиАлгоритма = ЕдинственноеПриложение;
	
	НазначенныеШаблоны = Новый Массив;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШаблоныЗадачНазначения.Ссылка КАК Ссылка,
		|	ШаблоныЗадачНазначения.ДополнительноеУсловие КАК ДополнительноеУсловие,
		|	ПРЕДСТАВЛЕНИЕ(ШаблоныЗадачНазначения.Ссылка) КАК Представление
		|ИЗ
		|	Справочник.ШаблоныЗадач.Назначения КАК ШаблоныЗадачНазначения
		|ГДЕ
		|	ШаблоныЗадачНазначения.Кому В (&Кому)
		|	И ШаблоныЗадачНазначения.Важность В (&Важности)
		|	И ШаблоныЗадачНазначения.ВариантИерархии В (&ВариантыИерархии)
		|	И ШаблоныЗадачНазначения.ВидПриложения В (&ВидыПриложений)
		|	И ШаблоныЗадачНазначения.ГрифДоступа В (&ГрифыДоступа)
		|	И ШаблоныЗадачНазначения.Организация В (&Организации)
		|	И ШаблоныЗадачНазначения.Подразделение В (&Подразделения)
		|	И ШаблоныЗадачНазначения.Тематика В (&Тематики)
		|	И ШаблоныЗадачНазначения.ТипПриложения В (&ТипыПриложений)
		|	И ШаблоныЗадачНазначения.ФормаДокумента В (&ФормыДокументов)
		|	И ШаблоныЗадачНазначения.ВидДействияОбработки В (&ВидыДействийОбработки)
		|	И ШаблоныЗадачНазначения.ФункцияУчастникаДействия В (&ФункцииУчастниковДействий)");
	
	
	СотрудникиДляНазначенияШаблонов = СотрудникиДляНазначенияШаблонов();
	Кому = РегистрыСведений.СотрудникиВКонтейнерах.КонтейнерыСотрудников(
		СотрудникиДляНазначенияШаблонов);
	Запрос.УстановитьПараметр("Кому", Кому);
	
	ВариантыИерархии = Новый Массив;
	ВариантыИерархии.Добавить(Перечисления.ВариантыИерархииЗадач.ПустаяСсылка());
	Если ЗначениеЗаполнено(ВышестоящаяЗадача) Тогда
		ВариантыИерархии.Добавить(Перечисления.ВариантыИерархииЗадач.ТолькоДляПодзадач);
	Иначе
		ВариантыИерархии.Добавить(Перечисления.ВариантыИерархииЗадач.ТолькоДляКорневыхЗадач);
	КонецЕсли;
	Запрос.УстановитьПараметр("ВариантыИерархии", ВариантыИерархии);
	
	ТипыПриложений = Новый Массив;
	ТипыПриложений.Добавить(Перечисления.ТипыПриложенийЗадач.ПустаяСсылка());
	ТипыПриложений.Добавить(ТипПриложения);
	Запрос.УстановитьПараметр("ТипыПриложений", ТипыПриложений);
	
	ВидыПриложений = Новый Массив;
	ВидыПриложений.Добавить(Справочники.ВидыДокументов.ПустаяСсылка());
	Если ЗначениеЗаполнено(ВидПриложения) Тогда
		ВидыПриложений.Добавить(ВидПриложения);
	КонецЕсли;
	Запрос.УстановитьПараметр("ВидыПриложений", ВидыПриложений);
	
	Важности = Новый Массив;
	Важности.Добавить(Перечисления.ВариантыВажностиОбъектов.ПустаяСсылка());
	
	ГрифыДоступа = Новый Массив;
	ГрифыДоступа.Добавить(Справочники.ГрифыДоступа.ПустаяСсылка());
	
	Организации = Новый Массив;
	Организации.Добавить(Справочники.Организации.ПустаяСсылка());
	
	Подразделения = Новый Массив;
	Подразделения.Добавить(Справочники.СтруктураПредприятия.ПустаяСсылка());
	
	Тематики = Новый Массив;
	Тематики.Добавить(Справочники.ТематикиДокументов.ПустаяСсылка());
	
	ФормыДокументов = Новый Массив;
	ФормыДокументов.Добавить(Перечисления.ВариантыФормДокументов.ПустаяСсылка());
	
	Если ТипЗнч(ЕдинственноеПриложение) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ЕдинственноеПриложение,
			"Важность, ГрифДоступа, Организация, Подразделение, Тематика, ФормаДокумента");
		
		Если ЗначениеЗаполнено(РеквизитыДокумента.Важность) Тогда
			Важности.Добавить(РеквизитыДокумента.Важность);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыДокумента.ГрифДоступа) Тогда
			ГрифыДоступа.Добавить(РеквизитыДокумента.ГрифДоступа);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыДокумента.Организация) Тогда
			Организации.Добавить(РеквизитыДокумента.Организация);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыДокумента.Подразделение) Тогда
			Подразделения.Добавить(РеквизитыДокумента.Подразделение);
			ВышестоящееПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				РеквизитыДокумента.Подразделение,
				"Родитель");
			Пока ЗначениеЗаполнено(ВышестоящееПодразделение) Цикл
				Подразделения.Добавить(ВышестоящееПодразделение);
				ВышестоящееПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					ВышестоящееПодразделение,
					"Родитель");
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыДокумента.Тематика) Тогда
			Тематики.Добавить(РеквизитыДокумента.Тематика);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыДокумента.ФормаДокумента) Тогда
			ФормыДокументов.Добавить(РеквизитыДокумента.ФормаДокумента);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЕдинственноеПриложение) = Тип("СправочникСсылка.Мероприятия") Тогда
		
		РеквизитыМероприятия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ЕдинственноеПриложение,
			"Важность, ГрифДоступа, Организация, Подразделение");
		
		Если ЗначениеЗаполнено(РеквизитыМероприятия.Важность) Тогда
			Важности.Добавить(РеквизитыМероприятия.Важность);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыМероприятия.ГрифДоступа) Тогда
			ГрифыДоступа.Добавить(РеквизитыМероприятия.ГрифДоступа);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыМероприятия.Организация) Тогда
			Организации.Добавить(РеквизитыМероприятия.Организация);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыМероприятия.Подразделение) Тогда
			Подразделения.Добавить(РеквизитыМероприятия.Подразделение);
			ВышестоящееПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				РеквизитыМероприятия.Подразделение,
				"Родитель");
			Пока ЗначениеЗаполнено(ВышестоящееПодразделение) Цикл
				Подразделения.Добавить(ВышестоящееПодразделение);
				ВышестоящееПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					ВышестоящееПодразделение,
					"Родитель");
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЕдинственноеПриложение) = Тип("ДокументСсылка.ВходящееПисьмо")
		Или ТипЗнч(ЕдинственноеПриложение) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
		
		РеквизитыПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ЕдинственноеПриложение,
			"Важность");
		
		ВариантВажностиОбъектов =
			Перечисления.ВажностьПисем.ВариантВажностиОбъектов(РеквизитыПисьма.Важность);
		
		Если ЗначениеЗаполнено(ВариантВажностиОбъектов) Тогда
			Важности.Добавить(ВариантВажностиОбъектов);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЕдинственноеПриложение) = Тип("СправочникСсылка.ПроектныеЗадачи")  Тогда
		
		РеквизитыПроектнойЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ЕдинственноеПриложение,
			"Владелец");
		
		РеквизитыПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			РеквизитыПроектнойЗадачи.Владелец,
			"ГрифДоступа, Организация, Подразделение");
		
		Если ЗначениеЗаполнено(РеквизитыПроекта.ГрифДоступа) Тогда
			ГрифыДоступа.Добавить(РеквизитыПроекта.ГрифДоступа);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыПроекта.Организация) Тогда
			Организации.Добавить(РеквизитыПроекта.Организация);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыПроекта.Подразделение) Тогда
			Подразделения.Добавить(РеквизитыПроекта.Подразделение);
			ВышестоящееПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				РеквизитыПроекта.Подразделение,
				"Родитель");
			Пока ЗначениеЗаполнено(ВышестоящееПодразделение) Цикл
				Подразделения.Добавить(ВышестоящееПодразделение);
				ВышестоящееПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					ВышестоящееПодразделение,
					"Родитель");
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЕдинственноеПриложение) = Тип("СправочникСсылка.Проекты")  Тогда
		
		РеквизитыПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ЕдинственноеПриложение,
			"ГрифДоступа, Организация, Подразделение");
		
		Если ЗначениеЗаполнено(РеквизитыПроекта.ГрифДоступа) Тогда
			ГрифыДоступа.Добавить(РеквизитыПроекта.ГрифДоступа);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыПроекта.Организация) Тогда
			Организации.Добавить(РеквизитыПроекта.Организация);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыПроекта.Подразделение) Тогда
			Подразделения.Добавить(РеквизитыПроекта.Подразделение);
			ВышестоящееПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				РеквизитыПроекта.Подразделение,
				"Родитель");
			Пока ЗначениеЗаполнено(ВышестоящееПодразделение) Цикл
				Подразделения.Добавить(ВышестоящееПодразделение);
				ВышестоящееПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					ВышестоящееПодразделение,
					"Родитель");
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЕдинственноеПриложение) = Тип("СправочникСсылка.ПротоколыМероприятий") Тогда
		
		РеквизитыПунктаПротокола = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ЕдинственноеПриложение,
			"Владелец");
		
		РеквизитыМероприятия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			РеквизитыПунктаПротокола.Владелец,
			"Важность, ГрифДоступа, Организация, Подразделение");
		
		Если ЗначениеЗаполнено(РеквизитыМероприятия.Важность) Тогда
			Важности.Добавить(РеквизитыМероприятия.Важность);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыМероприятия.ГрифДоступа) Тогда
			ГрифыДоступа.Добавить(РеквизитыМероприятия.ГрифДоступа);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыМероприятия.Организация) Тогда
			Организации.Добавить(РеквизитыМероприятия.Организация);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыМероприятия.Подразделение) Тогда
			Подразделения.Добавить(РеквизитыМероприятия.Подразделение);
			ВышестоящееПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				РеквизитыМероприятия.Подразделение,
				"Родитель");
			Пока ЗначениеЗаполнено(ВышестоящееПодразделение) Цикл
				Подразделения.Добавить(ВышестоящееПодразделение);
				ВышестоящееПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					ВышестоящееПодразделение,
					"Родитель");
			КонецЦикла;
		КонецЕсли;
		
		ПредметПроверкиАлгоритма = РеквизитыПунктаПротокола.Владелец;
		
	ИначеЕсли ТипЗнч(ЕдинственноеПриложение) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		РеквизитыСотрудника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ЕдинственноеПриложение,
			"Подразделение");
		
		Если ЗначениеЗаполнено(РеквизитыСотрудника.Подразделение) Тогда
			Подразделения.Добавить(РеквизитыСотрудника.Подразделение);
			ВышестоящееПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				РеквизитыСотрудника.Подразделение,
				"Родитель");
			Пока ЗначениеЗаполнено(ВышестоящееПодразделение) Цикл
				Подразделения.Добавить(ВышестоящееПодразделение);
				ВышестоящееПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					ВышестоящееПодразделение,
					"Родитель");
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Важности", Важности);
	Запрос.УстановитьПараметр("ГрифыДоступа", ГрифыДоступа);
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("Подразделения", Подразделения);
	Запрос.УстановитьПараметр("Тематики", Тематики);
	Запрос.УстановитьПараметр("ФормыДокументов", ФормыДокументов);
	
	ВидыДействийОбработки = Новый Массив;
	ВидыДействийОбработки.Добавить(Справочники.ВидыДействий.ПустаяСсылка());
	
	Если ЗначениеЗаполнено(ВышестоящаяЗадача) Тогда
		
		ДействиеОбработки = ИнтеграцияЗадач.ДействиеОбработкиЗадачи(ВышестоящаяЗадача);
		
		Если ЗначениеЗаполнено(ДействиеОбработки) Тогда
			
			РеквизитыДействияОбработки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ДействиеОбработки,
				"ВидДействия");
			Если ЗначениеЗаполнено(РеквизитыДействияОбработки.ВидДействия) Тогда
				ВидыДействийОбработки.Добавить(РеквизитыДействияОбработки.ВидДействия);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидыДействийОбработки", ВидыДействийОбработки);
	
	ФункцииУчастниковДействий = Новый Массив;
	ФункцииУчастниковДействий.Добавить(Перечисления.ФункцииУчастниковИсполнения.ПустаяСсылка());
	
	Если ЗначениеЗаполнено(ВышестоящееДействие) Тогда
		
		ИсточникДействияЗадачи = ИсточникДействияЗадачи(ВышестоящееДействие);
		
		Если ЗначениеЗаполнено(ИсточникДействияЗадачи) Тогда
			
			Если ТипЗнч(ИсточникДействияЗадачи) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
				ФункцияУчастника = Перечисления.ФункцииУчастниковОзнакомления.Ознакомляемый;
			ИначеЕсли ТипЗнч(ИсточникДействияЗадачи) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				РеквизитыЗадачиПроцессов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					ИсточникДействияЗадачи,
					"ТочкаМаршрута");
				ФункцияУчастника =
					РаботаСПроцессамиПоДействиям.ФункцияПоТочкеМаршрутаБезИсключения(
						РеквизитыЗадачиПроцессов.ТочкаМаршрута);
			Иначе
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Неизвестный тип источника действия задачи %1 (%2).'"),
					ИсточникДействияЗадачи,
					ТипЗнч(ИсточникДействияЗадачи));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ФункцияУчастника) Тогда
				ФункцииУчастниковДействий.Добавить(ФункцияУчастника);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ФункцииУчастниковДействий", ФункцииУчастниковДействий);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СписокДляСортировки = Новый СписокЗначений();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДополнительноеУсловие) Тогда
			
			Если ПредметПроверкиАлгоритма <> Неопределено Тогда
				
				ОбъектПроверкиАлгоритма = ПредметПроверкиАлгоритма.ПолучитьОбъект();
				
				ДополнительноеУсловиеВыполняется =
					РаботаСАлгоритмамиПроверки.АлгоритмПоПредметуВыполняется(
						ОбъектПроверкиАлгоритма,
						ВыборкаДетальныеЗаписи.ДополнительноеУсловие);
			Иначе
				
				ДополнительноеУсловиеВыполняется = Ложь;
				
			КонецЕсли;
			
			Если Не ДополнительноеУсловиеВыполняется Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеШаблона = РаботаСЗадачамиКлиентСервер.НовыеДанныеШаблона();
		ДанныеШаблона.Шаблон = ВыборкаДетальныеЗаписи.Ссылка;
		ДанныеШаблона.Представление = ВыборкаДетальныеЗаписи.Представление;
		
		СписокДляСортировки.Добавить(ДанныеШаблона, ВыборкаДетальныеЗаписи.Представление);
		
	КонецЦикла;
	
	СписокДляСортировки.СортироватьПоПредставлению();
	
	Для Каждого ДанныеШаблона Из СписокДляСортировки.ВыгрузитьЗначения() Цикл
		
		НазначенныеШаблоны.Добавить(ДанныеШаблона);
		
	КонецЦикла;
	
	Возврат НазначенныеШаблоны;
	
КонецФункции

// Определяет вид приложения.
// 
// Параметры:
//  ВсеПриложения - Массив из ОпределяемыйТип.ВидПриложенияЗадач
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ВидПриложенияЗадач
// 
Функция ВидПриложения(ВсеПриложения) Экспорт
	
	Если ВсеПриложения.Количество() = 1
		И ТипЗнч(ВсеПриложения[0]) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		
		ЕдинственноеПриложение = ВсеПриложения[0]; // СправочникСсылка.ДокументыПредприятия
		ВидПриложения =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕдинственноеПриложение, "ВидДокумента");
		
	ИначеЕсли ВсеПриложения.Количество() = 1
		И ТипЗнч(ВсеПриложения[0]) = Тип("СправочникСсылка.Мероприятия") Тогда
		
		ЕдинственноеПриложение = ВсеПриложения[0]; // СправочникСсылка.Мероприятия
		ВидПриложения =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕдинственноеПриложение, "ВидМероприятия");
		
	ИначеЕсли ВсеПриложения.Количество() = 1
		И ТипЗнч(ВсеПриложения[0]) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
		
		ЕдинственноеПриложение = ВсеПриложения[0]; // СправочникСсылка.ПроектныеЗадачи
		РеквизитыПроекта =
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЕдинственноеПриложение, "Владелец");
		ВидПриложения =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыПроекта.Владелец, "ВидПроекта");
		
	ИначеЕсли ВсеПриложения.Количество() = 1
		И ТипЗнч(ВсеПриложения[0]) = Тип("СправочникСсылка.Проекты") Тогда
		
		ЕдинственноеПриложение = ВсеПриложения[0]; // СправочникСсылка.Проекты
		ВидПриложения =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕдинственноеПриложение, "ВидПроекта");
		
	ИначеЕсли ВсеПриложения.Количество() = 1
		И ТипЗнч(ВсеПриложения[0]) = Тип("СправочникСсылка.ПротоколыМероприятий") Тогда
		
		ЕдинственноеПриложение = ВсеПриложения[0]; // СправочникСсылка.ПротоколыМероприятий
		РеквизитыМероприятия =
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЕдинственноеПриложение, "Владелец");
		ВидПриложения =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыМероприятия.Владелец, "ВидМероприятия");
		
	Иначе
		
		ВидПриложения = Справочники.ВидыДокументов.ПустаяСсылка();
		
	КонецЕсли;
	
	Возврат ВидПриложения;
	
КонецФункции

// Проверяет, есть ли право назначения шаблонов задач.
// 
// Возвращаемое значение:
//  Булево
// 
Функция ЕстьПравоНазначенияШаблонов() Экспорт
	
	ЕстьПравоНазначенияШаблонов = Пользователи.РолиДоступны("ДобавлениеИзменениеНСИ");
	
	Возврат ЕстьПравоНазначенияШаблонов;
	
КонецФункции

// Определяет сотрудников, от кого текущий пользователь получает назначенные шаблоны.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Сотрудники
// 
Функция СотрудникиДляНазначенияШаблонов() Экспорт
	
	СотрудникиДляНастройкиШаблонов = Новый Массив;
	
	// Получает назначенные любому своему сотруднику, даже недействительным.
	ВсеСотрудникиТекущегоПользователя = ПараметрыСеанса.СотрудникиПользователя;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		СотрудникиДляНастройкиШаблонов,
		ВсеСотрудникиТекущегоПользователя);
	
	// Получаем назначенные шаблоны от того, кому помогаем или кого замещаем.
	ОбластиЗамещения = ОбластиЗамещенияЗадач();
	АктуальныеЗамещения = Справочники.ЗамещающиеИПомощники.АктуальныеЗамещения(
		ПараметрыСеанса.СотрудникиПользователя,
		ОбластиЗамещения);
	КогоЗамещаем = АктуальныеЗамещения.ВыгрузитьКолонку("Сотрудник");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		СотрудникиДляНастройкиШаблонов,
		КогоЗамещаем);
	
	Возврат СотрудникиДляНастройкиШаблонов;
	
КонецФункции

// Определяет сотрудников, для кого текущий пользователь может настраивать шаблоны.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Сотрудники
// 
Функция СотрудникиДляНастройкиШаблонов() Экспорт
	
	СотрудникиДляНастройкиШаблонов = Новый Массив;
	
	// Можно настроить любому своему действительном сотруднику.
	ТолькоДействующие = Истина;
	ВсеДействующиеСотрудникиТекущегоПользователя =
		Сотрудники.ВсеСотрудникиТекущегоПользователя(ТолькоДействующие);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		СотрудникиДляНастройкиШаблонов,
		ВсеДействующиеСотрудникиТекущегоПользователя);
	
	// Можно настроить шаблоны тому, кому помогаем или кого замещаем.
	ОбластиЗамещения = ОбластиЗамещенияЗадач();
	АктуальныеЗамещения = Справочники.ЗамещающиеИПомощники.АктуальныеЗамещения(
		ПараметрыСеанса.СотрудникиПользователя,
		ОбластиЗамещения);
	КогоЗамещаем = АктуальныеЗамещения.ВыгрузитьКолонку("Сотрудник");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		СотрудникиДляНастройкиШаблонов,
		КогоЗамещаем);
	
	Возврат СотрудникиДляНастройкиШаблонов;
	
КонецФункции

// Подзадачи подлежащие закрытию.
// 
// Параметры:
//  ЗадачиИлиДействия - Массив из ДокументСсылка.ДействиеЗадачи, ДокументСсылка.Задача
// 
// Возвращаемое значение:
//  Структура:
//   * ПодзадачиПодлежащиеЗакрытию - Массив из ДокументСсылка.Задача
//   * ДействияСПодзадачами - Массив из ДокументСсылка.ДействиеЗадачи
// 
Функция ПодзадачиПодлежащиеЗакрытию(ЗадачиИлиДействия) Экспорт
	
	ДанныеПодзадачПодлежащихЗакрытию = Новый Структура;
	ДанныеПодзадачПодлежащихЗакрытию.Вставить("ПодзадачиПодлежащиеЗакрытию", Новый Массив);
	ДанныеПодзадачПодлежащихЗакрытию.Вставить("ДействияСПодзадачами", Новый Массив);
	
	МассивЗадач = Новый Массив;
	МассивДействийЗадач = Новый Массив;
	
	Для Каждого ЗадачаИлиДействие Из ЗадачиИлиДействия Цикл
		
		Если ТипЗнч(ЗадачаИлиДействие) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
			МассивДействийЗадач.Добавить(ЗадачаИлиДействие);
		ИначеЕсли ТипЗнч(ЗадачаИлиДействие) = Тип("ДокументСсылка.Задача") Тогда
			МассивЗадач.Добавить(ЗадачаИлиДействие);
		Иначе
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный тип %1'"),
				ТипЗнч(ЗадачаИлиДействие));
		КонецЕсли;
		
	КонецЦикла;
	
	ВсеПодзадачи = Документы.ДействиеЗадачи.НайтиПодзадачи(МассивДействийЗадач);
	ПодзадачиЗадач = Документы.Задача.НайтиПодзадачи(МассивДействийЗадач);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеПодзадачи, ПодзадачиЗадач, Истина);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыПодзадач = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ВсеПодзадачи,
		"ВидЗадачи, ВышестоящееДействие, Источник, СостояниеЗадачи");
	Для Каждого Подзадача Из ВсеПодзадачи Цикл
		
		РеквизитыПодзадачи = РеквизитыПодзадач[Подзадача];
		
		Если ЗначениеЗаполнено(РеквизитыПодзадачи.Источник)
			И ЭтоИсточникЗадач(РеквизитыПодзадачи.Источник) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(РеквизитыПодзадачи.ВидЗадачи);
		
		ВидСостоянияЗадачи =
			РаботаСЗадачамиПовтИсп.ВидСостоянияЗадач(РеквизитыПодзадачи.СостояниеЗадачи);
		
		Выполнена = Перечисления.ВидыСостоянийЗадач.ЭтоВыполненнаяЗадача(ВидСостоянияЗадачи);
		ЭтоЧерновик = Перечисления.ВидыСостоянийЗадач.ЭтоЧерновик(ВидСостоянияЗадачи);
		
		Если (Не Выполнена И ДанныеВидаЗадачи.ЗакрыватьПодзадачи) Или ЭтоЧерновик Тогда
			
			ДанныеПодзадачПодлежащихЗакрытию.ПодзадачиПодлежащиеЗакрытию.Добавить(Подзадача);
			ДанныеПодзадачПодлежащихЗакрытию.ДействияСПодзадачами.Добавить(
				РеквизитыПодзадачи.ВышестоящееДействие);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеПодзадачПодлежащихЗакрытию.ДействияСПодзадачами =
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(
			ДанныеПодзадачПодлежащихЗакрытию.ДействияСПодзадачами);
	
	Возврат ДанныеПодзадачПодлежащихЗакрытию;
	
КонецФункции

// Данные дерева приложений.
// 
// Параметры:
//  Задача - ДокументСсылка.Задача
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
//  КешДанных - Структура
//            - Неопределено
// 
// Возвращаемое значение:
//  Массив из см. РаботаСЗадачами.НоваяСтрокаДереваПриложений
// 
Функция ДанныеДереваПриложений(Задача, ДействиеЗадачи, КешДанных = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДереваПриложений = Новый Массив;
	
	// Задача.
	СтрокаЗадача = НоваяСтрокаДереваПриложений();
	СтрокаЗадача.КлючСтроки = Перечисления.ТипыСтрокДереваПриложений.Задача;
	СтрокаЗадача.ТипСтроки = Перечисления.ТипыСтрокДереваПриложений.Задача;
	СтрокаЗадача.ПредставлениеПриложения = Строка(СтрокаЗадача.ТипСтроки);
	СтрокаЗадача.ИндексКартинки = 10;
	ДанныеДереваПриложений.Добавить(СтрокаЗадача);
	
	// Задача - Дополнительные реквизиты.
	ЕстьДополнительныеРеквизиты = Ложь;
	Если ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		РеквизитыДействияЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДействиеЗадачи, "Источник");
		Если ЗначениеЗаполнено(РеквизитыДействияЗадачи.Источник)
			И ТипЗнч(РеквизитыДействияЗадачи.Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			СвойстваОбъекта = УправлениеСвойствами.СвойстваОбъекта(РеквизитыДействияЗадачи.Источник);
			ЕстьДополнительныеРеквизиты = СвойстваОбъекта.Количество() > 0;
		КонецЕсли;
	КонецЕсли;
	Если ЕстьДополнительныеРеквизиты Тогда
		СтрокаДополнительныеРеквизиты = НоваяСтрокаДереваПриложений();
		СтрокаДополнительныеРеквизиты.КлючСтроки = Перечисления.ТипыСтрокДереваПриложений.ДополнительныеРеквизиты;
		СтрокаДополнительныеРеквизиты.ТипСтроки = Перечисления.ТипыСтрокДереваПриложений.ДополнительныеРеквизиты;
		СтрокаДополнительныеРеквизиты.ПредставлениеПриложения = Строка(СтрокаДополнительныеРеквизиты.ТипСтроки);
		СтрокаДополнительныеРеквизиты.ИндексКартинки = -1;
		СтрокаЗадача.Строки.Добавить(СтрокаДополнительныеРеквизиты);
	КонецЕсли;
	
	// Задача - Инструкция.
	Если Не ПараметрыСеанса.ЭтоМобильныйКлиент Тогда
		ОписаниеHTMLИнструкции = ОписаниеHTMLИнструкции(ДействиеЗадачи);
		Если ЗначениеЗаполнено(ОписаниеHTMLИнструкции) Тогда
			СтрокаИнструкция = НоваяСтрокаДереваПриложений();
			СтрокаИнструкция.КлючСтроки = Перечисления.ТипыСтрокДереваПриложений.Инструкция;
			СтрокаИнструкция.ТипСтроки = Перечисления.ТипыСтрокДереваПриложений.Инструкция;
			СтрокаИнструкция.ПредставлениеПриложения = Строка(СтрокаИнструкция.ТипСтроки);
			СтрокаИнструкция.ИндексКартинки = -1;
			СтрокаЗадача.Строки.Добавить(СтрокаИнструкция);
		КонецЕсли;
	КонецЕсли;
	
	// Задача - История выполнения.
	Если Не ПараметрыСеанса.ЭтоМобильныйКлиент Тогда
		СтрокаИсторияВыполнения = НоваяСтрокаДереваПриложений();
		СтрокаИсторияВыполнения.КлючСтроки = Перечисления.ТипыСтрокДереваПриложений.ИсторияВыполнения;
		СтрокаИсторияВыполнения.ТипСтроки = Перечисления.ТипыСтрокДереваПриложений.ИсторияВыполнения;
		СтрокаИсторияВыполнения.ПредставлениеПриложения = Строка(СтрокаИсторияВыполнения.ТипСтроки);
		СтрокаИсторияВыполнения.ИндексКартинки = -1;
		СтрокаЗадача.Строки.Добавить(СтрокаИсторияВыполнения);
	КонецЕсли;
	
	// Задача - Подзадачи.
	Если ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		ЕстьПодзадачи = ЕстьПодзадачиСПравами(ДействиеЗадачи);
	Иначе
		ЕстьПодзадачи = ЕстьПодзадачиСПравами(Задача);
	КонецЕсли;
	Если Не ПараметрыСеанса.ЭтоМобильныйКлиент И ЕстьПодзадачи Тогда
		КоличествоПодзадач = КоличествоПодзадач(Задача, ДействиеЗадачи);
		СтрокаПодзадачи = НоваяСтрокаДереваПриложений();
		СтрокаПодзадачи.КлючСтроки = Перечисления.ТипыСтрокДереваПриложений.Подзадачи;
		СтрокаПодзадачи.ТипСтроки = Перечисления.ТипыСтрокДереваПриложений.Подзадачи;
		Если КоличествоПодзадач.Всего > 0 Тогда
			СтрокаПодзадачи.ПредставлениеПриложения = СтрШаблон(
				"%1 (%2/%3)",
				Строка(СтрокаПодзадачи.ТипСтроки),
				КоличествоПодзадач.Выполнено,
				КоличествоПодзадач.Всего);
		Иначе
			СтрокаПодзадачи.ПредставлениеПриложения = Строка(СтрокаПодзадачи.ТипСтроки);
		КонецЕсли;
		СтрокаПодзадачи.ИндексКартинки = -1;
		СтрокаЗадача.Строки.Добавить(СтрокаПодзадачи);
	КонецЕсли;
	
	// Задача - Соисполнители.
	ДанныеСоисполнителей = ДанныеСоисполнителей(Задача, ДействиеЗадачи, "Дерево");
	ЕстьСоисполнители = ДанныеСоисполнителей.СоисполнителиПоЭтапам.Количество() > 0;
	Если Не ПараметрыСеанса.ЭтоМобильныйКлиент И ЕстьСоисполнители Тогда
		СтрокаСоисполнители = НоваяСтрокаДереваПриложений();
		СтрокаСоисполнители.КлючСтроки = Перечисления.ТипыСтрокДереваПриложений.Соисполнители;
		СтрокаСоисполнители.ТипСтроки = Перечисления.ТипыСтрокДереваПриложений.Соисполнители;
		СтрокаСоисполнители.ПредставлениеПриложения = ДанныеСоисполнителей.Представление;
		СтрокаСоисполнители.ИндексКартинки = -1;
		СтрокаЗадача.Строки.Добавить(СтрокаСоисполнители);
	КонецЕсли;
	
	// Приложения задачи.
	ПриложенияБезДокументов = Новый Массив;
	ПриложенияЗадачи = ПриложенияЗадачи(Задача, ДействиеЗадачи, КешДанных);
	Для Каждого ДанныеПриложения Из ПриложенияЗадачи Цикл
		
		СтрокаПриложения = НоваяСтрокаДереваПриложений();
		Если ДанныеПриложения.РольПредмета = Перечисления.РолиПредметов.Заполняемый Тогда
			СтрокаПриложения.КлючСтроки = ДанныеПриложения.ИмяПредмета;
		Иначе
			СтрокаПриложения.КлючСтроки = ДанныеПриложения.Приложение;
		КонецЕсли;
		СтрокаПриложения.ИмяПредмета = ДанныеПриложения.ИмяПредмета;
		СтрокаПриложения.РольПредмета = ДанныеПриложения.РольПредмета;
		СтрокаПриложения.Приложение = ДанныеПриложения.Приложение;
		Если ТипЗнч(СтрокаПриложения.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
			СтрокаПриложения.ТипСтроки = Перечисления.ТипыСтрокДереваПриложений.Файл;
		Иначе
			СтрокаПриложения.ТипСтроки = Перечисления.ТипыСтрокДереваПриложений.Приложение;
		КонецЕсли;
		СтрокаПриложения.ПредставлениеПриложения = ДанныеПриложения.Представление;
		СтрокаПриложения.ОбязательноеЗаполнение = ДанныеПриложения.ОбязательноеЗаполнение;
		ДанныеДереваПриложений.Добавить(СтрокаПриложения);
		
		Если ЗначениеЗаполнено(ДанныеПриложения.Приложение)
			И Не ДелопроизводствоКлиентСервер.ЭтоДокумент(ДанныеПриложения.Приложение) Тогда
			ПриложенияБезДокументов.Добавить(ДанныеПриложения.Приложение);
		КонецЕсли;
		
	КонецЦикла;
	
	// Файлы приложений.
	ФайлыПриложенийБезДокументов = ФайлыПриложений(ПриложенияБезДокументов);
	Для Каждого СтрокаПриложения Из ДанныеДереваПриложений Цикл // См. РаботаСЗадачами.НоваяСтрокаДереваПриложений
		
		Если Не ЗначениеЗаполнено(СтрокаПриложения.Приложение) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДелопроизводствоКлиентСервер.ЭтоДокумент(СтрокаПриложения.Приложение) Тогда
			
			ДанныеПредмета = Неопределено;
			Если КешДанных <> Неопределено И КешДанных.Свойство("ДанныеПредметов") Тогда
				ДанныеПредмета = КешДанных.ДанныеПредметов[СтрокаПриложения.Приложение];
			КонецЕсли;
			Если ДанныеПредмета <> Неопределено Тогда
				МассивКомбинацийРолей = ДанныеПредмета.МассивКомбинацийРолей;
				ТаблицаФайлы = ДанныеПредмета.ТаблицаФайлы;
			Иначе
				МассивКомбинацийРолей = Новый Массив;
				ТаблицаФайлы = Делопроизводство.ПолучитьДанныеФайловДляСписка(
					Неопределено,
					СтрокаПриложения.Приложение,
					Ложь,
					Истина,
					МассивКомбинацийРолей);
			КонецЕсли;
			
			ЭлектронныеДокументыОбъектаУчета = ОбменЭДОДокументооборот.ЭлектронныеДокументыОбъектаУчета(
				СтрокаПриложения.Приложение);
			
			// Документ - Документ ЭДО.
			Для Каждого ДокументЭДО Из ЭлектронныеДокументыОбъектаУчета Цикл
				
				СтрокаЭДО = НоваяСтрокаДереваПриложений();
				СтрокаЭДО.КлючСтроки = ДокументЭДО;
				СтрокаЭДО.ТипСтроки = Перечисления.ТипыСтрокДереваПриложений.ДокументЭДО;
				СтрокаЭДО.ПредставлениеПриложения = Строка(ДокументЭДО) + НСтр("ru = ' (Документ ЭДО)'");
				СтрокаЭДО.ИндексКартинки = 30; // как xml
				СтрокаЭДО.ДокументЭДО = ДокументЭДО;
				СтрокаПриложения.Строки.Добавить(СтрокаЭДО);
				
			КонецЦикла;
			
			Если МассивКомбинацийРолей.Количество() = 0 Тогда
				
				// Документ - Файл.
				Для Каждого ДанныеФайла Из ТаблицаФайлы Цикл
					
					СтрокаФайла = НоваяСтрокаДереваПриложений();
					СтрокаФайла.КлючСтроки = ДанныеФайла.Ссылка;
					СтрокаФайла.Приложение = ДанныеФайла.Ссылка;
					СтрокаФайла.ТипСтроки = Перечисления.ТипыСтрокДереваПриложений.Файл;
					СтрокаФайла.ПредпросмотрЕстьВБазе = ДанныеФайла.ПредпросмотрЕстьВБазе;
					СтрокаФайла.РедактируетТекущийПользователь = ДанныеФайла.РедактируетТекущийПользователь;
					СтрокаФайла.ПолноеИмяФайлаВРабочемКаталоге = ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге;
					СтрокаФайла.ДатаМодификацииУниверсальнаяВБазе = ДанныеФайла.ДатаМодификацииУниверсальнаяВБазе;
					СтрокаФайла.ТекущаяВерсияРазмер = ДанныеФайла.ТекущаяВерсияРазмер;
					СтрокаПриложения.Строки.Добавить(СтрокаФайла);
					
				КонецЦикла;
				
			Иначе
				
				Для Каждого ОписаниеРоли Из МассивКомбинацийРолей Цикл
					
					// Документ - Роль файлов.
					СтрокаРоли = НоваяСтрокаДереваПриложений();
					СтрокаРоли.КлючСтроки = ОписаниеРоли.Роль;
					СтрокаРоли.ТипСтроки = Перечисления.ТипыСтрокДереваПриложений.РольФайла;
					СтрокаРоли.ПредставлениеПриложения = Строка(ОписаниеРоли.Роль);
					СтрокаРоли.РольФайла = ОписаниеРоли.Роль;
					СтрокаРоли.РольОбязательная = ОписаниеРоли.Обязательная;
					Если Не ЗначениеЗаполнено(СтрокаРоли.ПредставлениеПриложения) Тогда
						СтрокаРоли.ПредставлениеПриложения = "<>";
					КонецЕсли;
					СтрокаПриложения.Строки.Добавить(СтрокаРоли);
					
					// Документ - Роль файлов - Файл.
					Для Каждого ДанныеФайла Из ТаблицаФайлы Цикл
						
						Если ДанныеФайла.РольФайла <> ОписаниеРоли.Роль Тогда
							Продолжить;
						КонецЕсли;
						
						СтрокаФайла = НоваяСтрокаДереваПриложений();
						СтрокаФайла.КлючСтроки = ДанныеФайла.Ссылка;
						СтрокаФайла.Приложение = ДанныеФайла.Ссылка;
						СтрокаФайла.ТипСтроки = Перечисления.ТипыСтрокДереваПриложений.Файл;
						
						СтрокаФайла.ПредпросмотрЕстьВБазе = ДанныеФайла.ПредпросмотрЕстьВБазе;
						СтрокаРоли.Строки.Добавить(СтрокаФайла);
						
					КонецЦикла;
					
					КоличествоФайловРоли = СтрокаРоли.Строки.Количество();
					Если КоличествоФайловРоли > 0 Тогда
						СтрокаРоли.ПредставлениеПриложения =
							СтрШаблон(
								"%1 (%2)",
								СтрокаРоли.ПредставлениеПриложения,
								КоличествоФайловРоли);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			// Приложение - Файл.
			ФайлыПриложения = ФайлыПриложенийБезДокументов[СтрокаПриложения.Приложение];
			Для Каждого ФайлПриложения Из ФайлыПриложения Цикл
				
				СтрокаФайла = НоваяСтрокаДереваПриложений();
				СтрокаФайла.КлючСтроки = ФайлПриложения;
				СтрокаФайла.Приложение = ФайлПриложения;
				СтрокаФайла.ТипСтроки = Перечисления.ТипыСтрокДереваПриложений.Файл;
				СтрокаПриложения.Строки.Добавить(СтрокаФайла);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Обновим представление приложений.
	Если КешДанных <> Неопределено И КешДанных.Свойство("ДанныеФайлов") Тогда
		РеквизитыФайлов = КешДанных.ДанныеФайлов;
	Иначе
		РеквизитыФайлов = Новый Соответствие;
	КонецЕсли;
	
	МассивФайлов = Новый Массив;
	СтрокиДляОбработки = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиДляОбработки, ДанныеДереваПриложений);
	Пока СтрокиДляОбработки.Количество() > 0 Цикл
		
		СтрокаДляОбработки = СтрокиДляОбработки[0]; // См. РаботаСЗадачами.НоваяСтрокаДереваПриложений
		СтрокиДляОбработки.Удалить(0);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиДляОбработки, СтрокаДляОбработки.Строки);
		
		Если ТипЗнч(СтрокаДляОбработки.Приложение) = Тип("СправочникСсылка.Файлы")
			И РеквизитыФайлов[СтрокаДляОбработки.Приложение] = Неопределено Тогда
			МассивФайлов.Добавить(СтрокаДляОбработки.Приложение);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивФайлов.Количество() > 0 Тогда
		РеквизитыНовыхФайлов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			МассивФайлов,
			"ИндексКартинки, ХранитьВерсии, Редактирует, Описание,
			|ПометкаУдаления, ПодписанЭП, ТекущаяВерсияРасширение");
		Для Каждого РеквизитыФайла Из РеквизитыНовыхФайлов Цикл
			РеквизитыФайлов[РеквизитыФайла.Ключ] = РеквизитыФайла.Значение;
		КонецЦикла;
	КонецЕсли;
	
	СтрокиДляОбработки = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиДляОбработки, ДанныеДереваПриложений);
	Пока СтрокиДляОбработки.Количество() > 0 Цикл
		
		СтрокаДляОбработки = СтрокиДляОбработки[0]; // См. РаботаСЗадачами.НоваяСтрокаДереваПриложений
		СтрокиДляОбработки.Удалить(0);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиДляОбработки, СтрокаДляОбработки.Строки);
		
		Если Не ЗначениеЗаполнено(СтрокаДляОбработки.ПредставлениеПриложения) Тогда
			
			МассивПредставление = Новый Массив;
			МассивПредставление.Добавить(Строка(СтрокаДляОбработки.Приложение));
			
			Если ТипЗнч(СтрокаДляОбработки.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
				
				РеквизитыФайла = РеквизитыФайлов[СтрокаДляОбработки.Приложение];
				Если ЗначениеЗаполнено(РеквизитыФайла.Описание) Тогда
					МассивПредставление.Добавить(РеквизитыФайла.Описание);
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаДляОбработки.ПредставлениеПриложения = СтрСоединить(МассивПредставление, ", ");
			
		КонецЕсли;
		
		Если СтрокаДляОбработки.ИндексКартинки = - 1 Тогда
			
			// Строка без картинки.
			
		ИначеЕсли ТипЗнч(СтрокаДляОбработки.Приложение) = Тип("СправочникСсылка.Файлы")
			И ЗначениеЗаполнено(СтрокаДляОбработки.Приложение) Тогда
			
			РеквизитыФайла = РеквизитыФайлов[СтрокаДляОбработки.Приложение];
			
			СтрокаДляОбработки.ИндексКартинки = РеквизитыФайла.ИндексКартинки;
			СтрокаДляОбработки.Расширение = РеквизитыФайла.ТекущаяВерсияРасширение;
			Если РеквизитыФайла.ПометкаУдаления = Истина Тогда
				СтрокаДляОбработки.ИндексКартинки = СтрокаДляОбработки.ИндексКартинки + 1;
			КонецЕсли;
			
			СтрокаДляОбработки.ХранитьВерсии = РеквизитыФайла.ХранитьВерсии;
			СтрокаДляОбработки.Редактирует = РеквизитыФайла.Редактирует;
			Если ЗначениеЗаполнено(СтрокаДляОбработки.Редактирует)
				И Сотрудники.ЭтоСотрудникИлиПользовательТекущегоПользователя(СтрокаДляОбработки.Редактирует) Тогда
				
				СтрокаДляОбработки.РедактируетТекущийПользователь = Истина;
				СтрокаДляОбработки.РедактируетДругойПользователь = Ложь;
				
			ИначеЕсли ЗначениеЗаполнено(СтрокаДляОбработки.Редактирует) Тогда
				
				СтрокаДляОбработки.РедактируетТекущийПользователь = Ложь;
				СтрокаДляОбработки.РедактируетДругойПользователь = Истина;
				
			Иначе
				
				СтрокаДляОбработки.РедактируетТекущийПользователь = Ложь;
				СтрокаДляОбработки.РедактируетДругойПользователь = Ложь;
				
			КонецЕсли;
			
			СтрокаДляОбработки.ПодписанЭП = РеквизитыФайла.ПодписанЭП;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаДляОбработки.ДокументЭДО) Тогда
			
			СтрокаДляОбработки.ИндексКартинки = 30;
			
		Иначе
			
			ЭтоЗадача = СтрокаДляОбработки.ТипСтроки = Перечисления.ТипыСтрокДереваПриложений.Задача;
			СтрокаДляОбработки.ИндексКартинки = РаботаСЗадачамиКлиентСервер.ИндексКартинкиПриложения(
				СтрокаДляОбработки.Приложение,
				СтрокаДляОбработки.РольПредмета,
				СтрокаДляОбработки.РольФайла,
				ЭтоЗадача);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеДереваПриложений;
	
КонецФункции

// Формирует пустую структуру данных строки дерева приложений.
// 
// Возвращаемое значение:
//  Структура:
//   * ТипСтроки - ПеречислениеСсылка.ТипыСтрокДереваПриложений
//   * ПредставлениеПриложения - Строка
//   * ИндексКартинки - Число
//   * Строки - Массив из см. РаботаСЗадачами.НоваяСтрокаДереваПриложений
//   * ИмяПредмета - СправочникСсылка.ИменаПредметов
//   * Приложение - см. ОпределяемыйТип.ПриложениеЗадач
//   * РольПредмета - ПеречислениеСсылка.РолиПредметов
//   * ОбязательноеЗаполнение - Булево
//   * ДокументЭДО - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//                 - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//   * ПредпросмотрЕстьВБазе - Булево
//   * РедактируетТекущийПользователь - Булево
//   * ПолноеИмяФайлаВРабочемКаталоге - Строка
//   * ДатаМодификацииУниверсальнаяВБазе - Дата
//   * ТекущаяВерсияРазмер - Число
//   * РольФайла - СправочникСсылка.РолиФайлов
//   * РольОбязательная - Булево
//   * Расширение - Строка
//   * ХранитьВерсии - Булево
//   * Редактирует - СправочникСсылка.Сотрудники
//   * РедактируетДругойПользователь - Булево
//   * ПодписанЭП - Булево
//   * КлючСтроки - ПеречислениеСсылка.ТипыСтрокДереваПриложений
//                - СправочникСсылка.ИменаПредметов
//                - см. ОпределяемыйТип.ПриложениеЗадач
//                - СправочникСсылка.РолиФайлов
//                - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//                - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
Функция НоваяСтрокаДереваПриложений() Экспорт
	
	СтрокаДереваПриложений = Новый Структура;
	СтрокаДереваПриложений.Вставить("ТипСтроки", Перечисления.ТипыСтрокДереваПриложений.ПустаяСсылка());
	СтрокаДереваПриложений.Вставить("ПредставлениеПриложения", "");
	СтрокаДереваПриложений.Вставить("ИндексКартинки", 0);
	СтрокаДереваПриложений.Вставить("Строки", Новый Массив);
	СтрокаДереваПриложений.Вставить("ИмяПредмета", Справочники.ИменаПредметов.ПустаяСсылка());
	СтрокаДереваПриложений.Вставить("Приложение", Справочники.ДокументыПредприятия.ПустаяСсылка());
	СтрокаДереваПриложений.Вставить("РольПредмета", Перечисления.РолиПредметов.ПустаяСсылка());
	СтрокаДереваПриложений.Вставить("ОбязательноеЗаполнение", Ложь);
	СтрокаДереваПриложений.Вставить("ДокументЭДО", Документы.ЭлектронныйДокументВходящийЭДО.ПустаяСсылка());
	СтрокаДереваПриложений.Вставить("ПредпросмотрЕстьВБазе", Ложь);
	СтрокаДереваПриложений.Вставить("РедактируетТекущийПользователь", Ложь);
	СтрокаДереваПриложений.Вставить("ПолноеИмяФайлаВРабочемКаталоге", "");
	СтрокаДереваПриложений.Вставить("ДатаМодификацииУниверсальнаяВБазе", Дата(1, 1, 1));
	СтрокаДереваПриложений.Вставить("ТекущаяВерсияРазмер", 0);
	СтрокаДереваПриложений.Вставить("РольФайла", Справочники.РолиФайлов.ПустаяСсылка());
	СтрокаДереваПриложений.Вставить("РольОбязательная", Ложь);
	СтрокаДереваПриложений.Вставить("Расширение", "");
	СтрокаДереваПриложений.Вставить("ХранитьВерсии", Ложь);
	СтрокаДереваПриложений.Вставить("Редактирует", Справочники.Сотрудники.ПустаяСсылка());
	СтрокаДереваПриложений.Вставить("РедактируетДругойПользователь", Ложь);
	СтрокаДереваПриложений.Вставить("ПодписанЭП", Ложь);
	СтрокаДереваПриложений.Вставить("КлючСтроки", Перечисления.ТипыСтрокДереваПриложений.ПустаяСсылка());
	
	Возврат СтрокаДереваПриложений;
	
КонецФункции

// Формирует данные области действия.
//
// Параметры:
//   ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
//                  - Неопределено
//   ВыделенныеДействия - Массив из ДокументСсылка.ДействиеЗадачи
//   Задача - ДокументСсылка.Задача
//   МаксимальнаяДлинаОбщая - Число
// 
// Возвращаемое значение:
//  См. РаботаСЗадачами.НовыеДанныеОбластиДействия
// 
Функция ДанныеОбластиДействия(ДействиеЗадачи, ВыделенныеДействия, Задача, МаксимальнаяДлинаОбщая) Экспорт
	
	ДанныеДляОбновления = ДанныеДляОбновления(ДействиеЗадачи, ВыделенныеДействия, Задача);
	
	ДанныеОбластиДействия = НовыеДанныеОбластиДействия();
	
	// Объекты из другой системы.
	ДанныеОбластиДействия.ГруппаОбъектИзДругойСистемыВидимость = ДанныеДляОбновления.ЕстьОбъектыИзДругихСистем;
	
	// Результат действия текстом.
	ДанныеОбластиДействия.РезультатДействияТекстомКнопкаВыбораВидимость =
		ДанныеДляОбновления.ОжидаетВыполнения
		И ДанныеДляОбновления.РежимОдногоДействия
		И ДанныеДляОбновления.ВсеДействияДоступны;
	ДанныеОбластиДействия.ГруппаКомандыПриложенийРезультатаВидимость =
		ДанныеДляОбновления.ОжидаетВыполнения
		И ДанныеДляОбновления.РежимОдногоДействия
		И ДанныеДляОбновления.ВсеДействияДоступны;
	ДанныеОбластиДействия.ДанныеРезультатаДействияТекстом = ДанныеРезультатаДействияТекстом(ДанныеДляОбновления);
	
	// Данные таблицы приложений результата.
	МассивФайлов = Новый Массив;
	Для Каждого Приложение Из ДанныеДляОбновления.Приложения Цикл
		Если ТипЗнч(Приложение) <> Тип("СправочникСсылка.Файлы") Тогда
			Продолжить;
		КонецЕсли;
		МассивФайлов.Добавить(Приложение);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыФайлов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		МассивФайлов,
		"ИндексКартинки, Редактирует");
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаПриложенияРезультата = Новый ТаблицаЗначений;
	ТаблицаПриложенияРезультата.Колонки.Добавить("Приложение");
	ТаблицаПриложенияРезультата.Колонки.Добавить("ИндексКартинки");
	ТаблицаПриложенияРезультата.Колонки.Добавить("РедактируетТекущийПользователь");
	ТаблицаПриложенияРезультата.Колонки.Добавить("Редактирует");
	Для Каждого Приложение Из ДанныеДляОбновления.Приложения Цикл
		
		СтрокаПриложения = ТаблицаПриложенияРезультата.Добавить();
		СтрокаПриложения.Приложение = Приложение;
		
		Если ТипЗнч(Приложение) = Тип("СправочникСсылка.Файлы") Тогда
			РеквизитыФайла = РеквизитыФайлов[Приложение];
			СтрокаПриложения.ИндексКартинки = РеквизитыФайла.ИндексКартинки;
			СтрокаПриложения.Редактирует = РеквизитыФайла.Редактирует;
			СтрокаПриложения.РедактируетТекущийПользователь =
				Сотрудники.ЭтоСотрудникИлиПользовательТекущегоПользователя(РеквизитыФайла.Редактирует);
		Иначе
			СтрокаПриложения.ИндексКартинки = 10;
			СтрокаПриложения.Редактирует = Справочники.Сотрудники.ПустаяСсылка();
			СтрокаПриложения.РедактируетТекущийПользователь = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаПриложенияРезультата.Сортировать("Приложение");
	
	Для Каждого СтрокаПриложения Из ТаблицаПриложенияРезультата Цикл
		СтруктураПриложения = Новый Структура;
		СтруктураПриложения.Вставить("Приложение", СтрокаПриложения.Приложение);
		СтруктураПриложения.Вставить("ИндексКартинки", СтрокаПриложения.ИндексКартинки);
		СтруктураПриложения.Вставить("РедактируетТекущийПользователь", СтрокаПриложения.РедактируетТекущийПользователь);
		СтруктураПриложения.Вставить("Редактирует", СтрокаПриложения.Редактирует);
		ДанныеОбластиДействия.ПриложенияРезультата.Добавить(СтруктураПриложения);
	КонецЦикла;
	
	// Таблица приложений результата.
	ДанныеОбластиДействия.ПриложенияРезультатаИзменятьСоставСтрок =
		ДанныеДляОбновления.ОжидаетВыполнения
		И ДанныеДляОбновления.ВсеДействияДоступны;
	ОтображатьТаблицуПриложений =
		ДанныеДляОбновления.Приложения.Количество() > 3
		И Не ОбщегоНазначения.ЭтоМобильныйКлиент();
	ДанныеОбластиДействия.ПриложенияРезультатаВидимость = ОтображатьТаблицуПриложений;
	
	// Приложение 1.
	ДанныеОбластиДействия.СтрокаПриложенияРезультата1Видимость =
		Не ОтображатьТаблицуПриложений
		И ТаблицаПриложенияРезультата.Количество() >= 1;
	Если ТаблицаПриложенияРезультата.Количество() >= 1 Тогда
		
		ДанныеПриложения = ТаблицаПриложенияРезультата[0];
		
		Если ДанныеПриложения.РедактируетТекущийПользователь Тогда
			ДанныеОбластиДействия.ПриложенияРезультатаПриложение1ЦветТекста =
				ЦветаСтиля.ФайлЗанятыйТекущимПользователем;
		ИначеЕсли ЗначениеЗаполнено(ДанныеПриложения.Редактирует) Тогда
			ДанныеОбластиДействия.ПриложенияРезультатаПриложение1ЦветТекста =
				ЦветаСтиля.ФайлЗанятыйДругимПользователем;
		Иначе
			ДанныеОбластиДействия.ПриложенияРезультатаПриложение1ЦветТекста =
				Новый Цвет;
		КонецЕсли;
		
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиУдалить1Доступность =
			ДанныеОбластиДействия.ПриложенияРезультатаИзменятьСоставСтрок;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаУдалить1Доступность =
			ДанныеОбластиДействия.ПриложенияРезультатаИзменятьСоставСтрок;
		
		ЭтоФайл = Ложь;
		Если ТипЗнч(ДанныеПриложения.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
			
			ЭтоФайл = Истина;
			
			ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата1Доступность =
				Не ЗначениеЗаполнено(ДанныеПриложения.Редактирует)
				И ДанныеОбластиДействия.ПриложенияРезультатаИзменятьСоставСтрок;
			ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата1Доступность =
				Не ЗначениеЗаполнено(ДанныеПриложения.Редактирует)
				И ДанныеОбластиДействия.ПриложенияРезультатаИзменятьСоставСтрок;
			
			ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла1Доступность =
				ДанныеПриложения.РедактируетТекущийПользователь
				И ДанныеОбластиДействия.ПриложенияРезультатаИзменятьСоставСтрок;
			ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла1Доступность =
				ДанныеПриложения.РедактируетТекущийПользователь
				И ДанныеОбластиДействия.ПриложенияРезультатаИзменятьСоставСтрок;
			
			ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата1Доступность =
				ДанныеПриложения.РедактируетТекущийПользователь
				И ДанныеОбластиДействия.ПриложенияРезультатаИзменятьСоставСтрок;
			ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата1Доступность =
				ДанныеПриложения.РедактируетТекущийПользователь
				И ДанныеОбластиДействия.ПриложенияРезультатаИзменятьСоставСтрок;
			
			ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата1Доступность =
				ДанныеОбластиДействия.ПриложенияРезультатаИзменятьСоставСтрок;
			ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл1Доступность =
				ДанныеОбластиДействия.ПриложенияРезультатаИзменятьСоставСтрок;
			
		КонецЕсли;
		
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОткрытьПриложениеРезультата1Видимость =
			ЭтоФайл;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОткрытьПриложениеРезультата1Видимость =
			ЭтоФайл;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата1Видимость =
			ЭтоФайл;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата1Видимость =
			ЭтоФайл;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла1Видимость =
			ЭтоФайл;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла1Видимость =
			ЭтоФайл;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата1Видимость =
			ЭтоФайл;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата1Видимость =
			ЭтоФайл;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата1Видимость =
			ЭтоФайл;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл1Видимость =
			ЭтоФайл;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиСохранитьКакФайлРезультата1Видимость =
			ЭтоФайл;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаСохранитьКакФайлРезультата1Видимость =
			ЭтоФайл;
		
	КонецЕсли;
	
	// Приложение 2.
	ДанныеОбластиДействия.СтрокаПриложенияРезультата2Видимость =
		Не ОтображатьТаблицуПриложений
		И ТаблицаПриложенияРезультата.Количество() >= 2;
	Если ТаблицаПриложенияРезультата.Количество() >= 2 Тогда
		
		ДанныеПриложения = ТаблицаПриложенияРезультата[1];
		
		Если ДанныеПриложения.РедактируетТекущийПользователь Тогда
			ДанныеОбластиДействия.ПриложенияРезультатаПриложение2ЦветТекста =
				ЦветаСтиля.ФайлЗанятыйТекущимПользователем;
		ИначеЕсли ЗначениеЗаполнено(ДанныеПриложения.Редактирует) Тогда
			ДанныеОбластиДействия.ПриложенияРезультатаПриложение2ЦветТекста =
				ЦветаСтиля.ФайлЗанятыйДругимПользователем;
		Иначе
			ДанныеОбластиДействия.ПриложенияРезультатаПриложение2ЦветТекста =
				Новый Цвет;
		КонецЕсли;
		
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиУдалить2Доступность =
			ДанныеОбластиДействия.ПриложенияРезультатаИзменятьСоставСтрок;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаУдалить2Доступность =
			ДанныеОбластиДействия.ПриложенияРезультатаИзменятьСоставСтрок;
		
		ЭтоФайл = Ложь;
		Если ТипЗнч(ДанныеПриложения.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
			
			ЭтоФайл = Истина;
			
			ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата2Доступность =
				Не ЗначениеЗаполнено(ДанныеПриложения.Редактирует)
				И ДанныеОбластиДействия.ПриложенияРезультатаИзменятьСоставСтрок;
			ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата2Доступность =
				Не ЗначениеЗаполнено(ДанныеПриложения.Редактирует)
				И ДанныеОбластиДействия.ПриложенияРезультатаИзменятьСоставСтрок;
			
			ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла2Доступность =
				ДанныеПриложения.РедактируетТекущийПользователь
				И ДанныеОбластиДействия.ПриложенияРезультатаИзменятьСоставСтрок;
			ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла2Доступность =
				ДанныеПриложения.РедактируетТекущийПользователь
				И ДанныеОбластиДействия.ПриложенияРезультатаИзменятьСоставСтрок;
			
			ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата2Доступность =
				ДанныеПриложения.РедактируетТекущийПользователь
				И ДанныеОбластиДействия.ПриложенияРезультатаИзменятьСоставСтрок;
			ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата2Доступность =
				ДанныеПриложения.РедактируетТекущийПользователь
				И ДанныеОбластиДействия.ПриложенияРезультатаИзменятьСоставСтрок;
			
			ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата2Доступность =
				ДанныеОбластиДействия.ПриложенияРезультатаИзменятьСоставСтрок;
			ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл2Доступность =
				ДанныеОбластиДействия.ПриложенияРезультатаИзменятьСоставСтрок;
			
		КонецЕсли;
		
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОткрытьПриложениеРезультата2Видимость =
			ЭтоФайл;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОткрытьПриложениеРезультата2Видимость =
			ЭтоФайл;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата2Видимость =
			ЭтоФайл;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата2Видимость =
			ЭтоФайл;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла2Видимость =
			ЭтоФайл;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла2Видимость =
			ЭтоФайл;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата2Видимость =
			ЭтоФайл;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата2Видимость =
			ЭтоФайл;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата2Видимость =
			ЭтоФайл;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл2Видимость =
			ЭтоФайл;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиСохранитьКакФайлРезультата2Видимость =
			ЭтоФайл;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаСохранитьКакФайлРезультата2Видимость =
			ЭтоФайл;
		
	КонецЕсли;
	
	// Приложение 3.
	ДанныеОбластиДействия.СтрокаПриложенияРезультата3Видимость =
		Не ОтображатьТаблицуПриложений
		И ТаблицаПриложенияРезультата.Количество() >= 3;
	Если ТаблицаПриложенияРезультата.Количество() >= 3 Тогда
		
		ДанныеПриложения = ТаблицаПриложенияРезультата[2];
		
		Если ДанныеПриложения.РедактируетТекущийПользователь Тогда
			ДанныеОбластиДействия.ПриложенияРезультатаПриложение3ЦветТекста =
				ЦветаСтиля.ФайлЗанятыйТекущимПользователем;
		ИначеЕсли ЗначениеЗаполнено(ДанныеПриложения.Редактирует) Тогда
			ДанныеОбластиДействия.ПриложенияРезультатаПриложение3ЦветТекста =
				ЦветаСтиля.ФайлЗанятыйДругимПользователем;
		Иначе
			ДанныеОбластиДействия.ПриложенияРезультатаПриложение3ЦветТекста =
				Новый Цвет;
		КонецЕсли;
		
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиУдалить3Доступность =
			ДанныеОбластиДействия.ПриложенияРезультатаИзменятьСоставСтрок;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаУдалить3Доступность =
			ДанныеОбластиДействия.ПриложенияРезультатаИзменятьСоставСтрок;
		
		ЭтоФайл = Ложь;
		Если ТипЗнч(ДанныеПриложения.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
			
			ЭтоФайл = Истина;
			
			ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата3Доступность =
				Не ЗначениеЗаполнено(ДанныеПриложения.Редактирует)
				И ДанныеОбластиДействия.ПриложенияРезультатаИзменятьСоставСтрок;
			ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата3Доступность =
				Не ЗначениеЗаполнено(ДанныеПриложения.Редактирует)
				И ДанныеОбластиДействия.ПриложенияРезультатаИзменятьСоставСтрок;
			
			ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла3Доступность =
				ДанныеПриложения.РедактируетТекущийПользователь
				И ДанныеОбластиДействия.ПриложенияРезультатаИзменятьСоставСтрок;
			ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла3Доступность =
				ДанныеПриложения.РедактируетТекущийПользователь
				И ДанныеОбластиДействия.ПриложенияРезультатаИзменятьСоставСтрок;
			
			ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата3Доступность =
				ДанныеПриложения.РедактируетТекущийПользователь
				И ДанныеОбластиДействия.ПриложенияРезультатаИзменятьСоставСтрок;
			ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата3Доступность =
				ДанныеПриложения.РедактируетТекущийПользователь
				И ДанныеОбластиДействия.ПриложенияРезультатаИзменятьСоставСтрок;
			
			ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата3Доступность =
				ДанныеОбластиДействия.ПриложенияРезультатаИзменятьСоставСтрок;
			ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл3Доступность =
				ДанныеОбластиДействия.ПриложенияРезультатаИзменятьСоставСтрок;
			
		КонецЕсли;
		
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОткрытьПриложениеРезультата3Видимость =
			ЭтоФайл;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОткрытьПриложениеРезультата3Видимость =
			ЭтоФайл;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата3Видимость =
			ЭтоФайл;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата3Видимость =
			ЭтоФайл;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла3Видимость =
			ЭтоФайл;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла3Видимость =
			ЭтоФайл;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата3Видимость =
			ЭтоФайл;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата3Видимость =
			ЭтоФайл;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата3Видимость =
			ЭтоФайл;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл3Видимость =
			ЭтоФайл;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиСохранитьКакФайлРезультата3Видимость =
			ЭтоФайл;
		ДанныеОбластиДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаСохранитьКакФайлРезультата3Видимость =
			ЭтоФайл;
		
	КонецЕсли;
	
	// Кнопки действия.
	ДанныеОбластиДействия.ОтменитьВзятиеВРаботуДоступность = ДанныеДляОбновления.ЕстьДействияВРаботе;
	ДанныеОбластиДействия.ПодменюФлагиДоступность = ДанныеДляОбновления.ВсеДействияДоступны;
	ДанныеОбластиДействия.ДругаяКнопкаВидимость = ДанныеДляОбновления.ДействиеУказано;
	
	// Перенаправление.
	ДанныеОбластиДействия.ПеренаправитьДоступность =
		(ДанныеДляОбновления.ДействиеУказано
			И ДанныеДляОбновления.ВсеДействияДоступны
			И ДанныеДляОбновления.ОжидаетВыполнения)
		Или Не ДанныеДляОбновления.ДействиеУказано;
	
	// Команда "Добавить участников".
	ЕстьДобавлениеУчастников = ДанныеДляОбновления.ЕстьДобавлениеУчастников;
	ДанныеОбластиДействия.ФормаДобавитьУчастниковВидимость = ЕстьДобавлениеУчастников;
	ДанныеОбластиДействия.ФормаДобавитьУчастниковДоступность =
		ДанныеДляОбновления.ОжидаетВыполнения И ДанныеДляОбновления.ВсеДействияДоступны;
	ДанныеОбластиДействия.КомандаДобавитьУчастниковВидимость = ЕстьДобавлениеУчастников;
	ДанныеОбластиДействия.КомандаДобавитьУчастниковДоступность = 
		ДанныеДляОбновления.ОжидаетВыполнения И ДанныеДляОбновления.ВсеДействияДоступны;
	
	// Команда "Добавить подзадачу".
	ДанныеОбластиДействия.ДокументЗадачаСоздатьПодзадачуВидимость = ДанныеДляОбновления.ЕстьПостановкаПодзадач;
	ДанныеОбластиДействия.СоздатьПодзадачуВидимость = ДанныеДляОбновления.ЕстьПостановкаПодзадач;
	
	// Данные вариантов выполнения.
	ДанныеОбластиДействия.ДанныеВариантовВыполненияЗадачи = ДанныеВариантовВыполненияЗадачи(
		ДействиеЗадачи,
		ВыделенныеДействия,
		ДанныеДляОбновления,
		МаксимальнаяДлинаОбщая);
	
	// Формируем возвращаемое значение.
	ДанныеОбластиДействия.РезультатДействияТекстом = ДанныеДляОбновления.РезультатДействияТекстом;
	ДанныеОбластиДействия.ДействиеОбработки = ДанныеДляОбновления.ДействиеОбработки;
	
	Возврат ДанныеОбластиДействия;
	
КонецФункции

// Формирует пустую структуру данных области действия.
// 
// Возвращаемое значение:
//  Структура:
//   * ГруппаОбъектИзДругойСистемыВидимость - Булево
//   * РезультатДействияТекстомКнопкаВыбораВидимость - Булево
//   * ГруппаКомандыПриложенийРезультатаВидимость - Булево
//   * ДанныеРезультатаДействияТекстом - см. РаботаСЗадачами.НовыеДанныеРезультатаДействияТекстом
//   * ПриложенияРезультата - Массив из Структура:
//      ** Приложение - см. ОпределяемыйТип.ПриложениеЗадач
//      ** ИндексКартинки - Число
//      ** РедактируетТекущийПользователь - Булево
//      ** Редактирует - СправочникСсылка.Сотрудники
//   * ПриложенияРезультатаИзменятьСоставСтрок - Булево
//   * ПриложенияРезультатаВидимость - Булево
//   * СтрокаПриложенияРезультата1Видимость - Булево
//   * ПриложенияРезультатаПриложение1ЦветТекста - Цвет
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиУдалить1Доступность - Булево
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаУдалить1Доступность - Булево
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата1Доступность - Булево
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата1Доступность - Булево
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла1Доступность - Булево
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла1Доступность - Булево
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата1Доступность - Булево
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата1Доступность - Булево
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата1Доступность - Булево
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл1Доступность - Булево
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиОткрытьПриложениеРезультата1Видимость - Булево
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаОткрытьПриложениеРезультата1Видимость - Булево
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата1Видимость - Булево
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата1Видимость - Булево
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла1Видимость - Булево
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла1Видимость - Булево
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата1Видимость - Булево
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата1Видимость - Булево
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата1Видимость - Булево
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл1Видимость - Булево
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиСохранитьКакФайлРезультата1Видимость - Булево
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаСохранитьКакФайлРезультата1Видимость - Булево
//   * СтрокаПриложенияРезультата2Видимость - Булево
//   * ПриложенияРезультатаПриложение2ЦветТекста - Цвет
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиУдалить2Доступность - Булево
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаУдалить2Доступность - Булево
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата2Доступность - Булево
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата2Доступность - Булево
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла2Доступность - Булево
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла2Доступность - Булево
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата2Доступность - Булево
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата2Доступность - Булево
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата2Доступность - Булево
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл2Доступность - Булево
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиОткрытьПриложениеРезультата2Видимость - Булево
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаОткрытьПриложениеРезультата2Видимость - Булево
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата2Видимость - Булево
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата2Видимость - Булево
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла2Видимость - Булево
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла2Видимость - Булево
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата2Видимость - Булево
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата2Видимость - Булево
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата2Видимость - Булево
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл2Видимость - Булево
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиСохранитьКакФайлРезультата2Видимость - Булево
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаСохранитьКакФайлРезультата2Видимость - Булево
//   * СтрокаПриложенияРезультата3Видимость - Булево
//   * ПриложенияРезультатаПриложение3ЦветТекста - Цвет
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиУдалить3Доступность - Булево
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаУдалить3Доступность - Булево
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата3Доступность - Булево
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата3Доступность - Булево
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла3Доступность - Булево
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла3Доступность - Булево
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата3Доступность - Булево
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата3Доступность - Булево
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата3Доступность - Булево
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл3Доступность - Булево
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиОткрытьПриложениеРезультата3Видимость - Булево
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаОткрытьПриложениеРезультата3Видимость - Булево
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата3Видимость - Булево
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата3Видимость - Булево
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла3Видимость - Булево
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла3Видимость - Булево
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата3Видимость - Булево
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата3Видимость - Булево
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата3Видимость - Булево
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл3Видимость - Булево
//   * ПриложенияРезультатаКонтекстноеМенюКартинкиСохранитьКакФайлРезультата3Видимость - Булево
//   * ПриложенияРезультатаКонтекстноеМенюЗаголовкаСохранитьКакФайлРезультата3Видимость - Булево
//   * ОтменитьВзятиеВРаботуДоступность - Булево
//   * ПодменюФлагиДоступность - Булево
//   * ДругаяКнопкаВидимость - Булево
//   * ПеренаправитьДоступность - Булево
//   * ФормаДобавитьУчастниковВидимость - Булево
//   * ФормаДобавитьУчастниковДоступность - Булево
//   * КомандаДобавитьУчастниковВидимость - Булево
//   * КомандаДобавитьУчастниковДоступность - Булево
//   * ДокументЗадачаСоздатьПодзадачуВидимость - Булево
//   * СоздатьПодзадачуВидимость - Булево
//   * РезультатДействияТекстом - Строка
//   * ДействиеОбработки - см. ОпределяемыйТип.Действия
//   * ДанныеВариантовВыполненияЗадачи -см. РаботаСЗадачами.НовыеДанныеВариантовВыполненияЗадачи
// 
Функция НовыеДанныеОбластиДействия() Экспорт
	
	ДанныеОбластиДействия = Новый Структура;
	
	// Объекты из другой системы.
	ДанныеОбластиДействия.Вставить("ГруппаОбъектИзДругойСистемыВидимость", Ложь);
	
	// Результат действия текстом.
	ДанныеОбластиДействия.Вставить("РезультатДействияТекстомКнопкаВыбораВидимость", Ложь);
	ДанныеОбластиДействия.Вставить("ГруппаКомандыПриложенийРезультатаВидимость", Ложь);
	ДанныеОбластиДействия.Вставить("ДанныеРезультатаДействияТекстом", НовыеДанныеРезультатаДействияТекстом());
	
	// Таблица приложений результата.
	ДанныеОбластиДействия.Вставить("ПриложенияРезультата", Новый Массив);
	ДанныеОбластиДействия.Вставить("ПриложенияРезультатаИзменятьСоставСтрок", Ложь);
	ДанныеОбластиДействия.Вставить("ПриложенияРезультатаВидимость", Ложь);
	
	// Отдельное приложение 1.
	ДанныеОбластиДействия.Вставить("СтрокаПриложенияРезультата1Видимость", Ложь);
	ДанныеОбластиДействия.Вставить("ПриложенияРезультатаПриложение1ЦветТекста", Новый Цвет);
	ДанныеОбластиДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюКартинкиУдалить1Доступность", Ложь);
	ДанныеОбластиДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюЗаголовкаУдалить1Доступность", Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата1Доступность",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата1Доступность",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла1Доступность",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла1Доступность",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата1Доступность",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата1Доступность",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата1Доступность",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл1Доступность",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюКартинкиОткрытьПриложениеРезультата1Видимость",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюЗаголовкаОткрытьПриложениеРезультата1Видимость",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата1Видимость",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата1Видимость",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла1Видимость",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла1Видимость",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата1Видимость",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата1Видимость",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата1Видимость",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл1Видимость",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюКартинкиСохранитьКакФайлРезультата1Видимость",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюЗаголовкаСохранитьКакФайлРезультата1Видимость",
		Ложь);
	
	// Отдельное приложение 2.
	ДанныеОбластиДействия.Вставить("СтрокаПриложенияРезультата2Видимость", Ложь);
	ДанныеОбластиДействия.Вставить("ПриложенияРезультатаПриложение2ЦветТекста", Новый Цвет);
	ДанныеОбластиДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюКартинкиУдалить2Доступность", Ложь);
	ДанныеОбластиДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюЗаголовкаУдалить2Доступность", Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата2Доступность",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата2Доступность",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла2Доступность",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла2Доступность",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата2Доступность",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата2Доступность",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата2Доступность",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл2Доступность",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюКартинкиОткрытьПриложениеРезультата2Видимость",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюЗаголовкаОткрытьПриложениеРезультата2Видимость",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата2Видимость",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата2Видимость",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла2Видимость",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла2Видимость",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата2Видимость",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата2Видимость",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата2Видимость",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл2Видимость",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюКартинкиСохранитьКакФайлРезультата2Видимость",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюЗаголовкаСохранитьКакФайлРезультата2Видимость",
		Ложь);
	
	// Отдельное приложение 3.
	ДанныеОбластиДействия.Вставить("СтрокаПриложенияРезультата3Видимость", Ложь);
	ДанныеОбластиДействия.Вставить("ПриложенияРезультатаПриложение3ЦветТекста", Новый Цвет);
	ДанныеОбластиДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюКартинкиУдалить3Доступность", Ложь);
	ДанныеОбластиДействия.Вставить("ПриложенияРезультатаКонтекстноеМенюЗаголовкаУдалить3Доступность", Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата3Доступность",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата3Доступность",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла3Доступность",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла3Доступность",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата3Доступность",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата3Доступность",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата3Доступность",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл3Доступность",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюКартинкиОткрытьПриложениеРезультата3Видимость",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюЗаголовкаОткрытьПриложениеРезультата3Видимость",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата3Видимость",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата3Видимость",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла3Видимость",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла3Видимость",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата3Видимость",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата3Видимость",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата3Видимость",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл3Видимость",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюКартинкиСохранитьКакФайлРезультата3Видимость",
		Ложь);
	ДанныеОбластиДействия.Вставить(
		"ПриложенияРезультатаКонтекстноеМенюЗаголовкаСохранитьКакФайлРезультата3Видимость",
		Ложь);
	
	// Кнопки действия.
	ДанныеОбластиДействия.Вставить("ОтменитьВзятиеВРаботуДоступность", Ложь);
	ДанныеОбластиДействия.Вставить("ПодменюФлагиДоступность", Ложь);
	ДанныеОбластиДействия.Вставить("ДругаяКнопкаВидимость", Ложь);
	
	// Перенаправление.
	ДанныеОбластиДействия.Вставить("ПеренаправитьДоступность", Ложь);
	
	// Команда "Добавить участников".
	ДанныеОбластиДействия.Вставить("ФормаДобавитьУчастниковВидимость", Ложь);
	ДанныеОбластиДействия.Вставить("ФормаДобавитьУчастниковДоступность", Ложь);
	ДанныеОбластиДействия.Вставить("КомандаДобавитьУчастниковВидимость", Ложь);
	ДанныеОбластиДействия.Вставить("КомандаДобавитьУчастниковДоступность", Ложь);
	
	// Команда "Добавить подзадачу".
	ДанныеОбластиДействия.Вставить("ДокументЗадачаСоздатьПодзадачуВидимость", Ложь);
	ДанныеОбластиДействия.Вставить("СоздатьПодзадачуВидимость", Ложь);
	
	// Данные вариантов выполнения задачи.
	ДанныеОбластиДействия.Вставить("ДанныеВариантовВыполненияЗадачи", НовыеДанныеВариантовВыполненияЗадачи());
	
	// Формируем возвращаемое значение.
	ДанныеОбластиДействия.Вставить("РезультатДействияТекстом", "");
	ДанныеОбластиДействия.Вставить("ДействиеОбработки", Справочники.ДействияИсполнения.ПустаяСсылка());
	
	Возврат ДанныеОбластиДействия;
	
КонецФункции

// Формирует данные области результата действия текстом.
//
// Параметры:
//   ДанныеДляОбновления - см. РаботаСЗадачами.ДанныеДляОбновления
// 
// Возвращаемое значение:
//  См. РаботаСЗадачами.НовыеДанныеРезультатаДействияТекстом
// 
Функция ДанныеРезультатаДействияТекстом(ДанныеДляОбновления) Экспорт
	
	ДанныеРезультатаДействияТекстом = НовыеДанныеРезультатаДействияТекстом();
	ДанныеРезультатаДействияТекстом.РезультатДействияТекстомВидимость = ДанныеДляОбновления.РежимОдногоДействия;
	ДанныеРезультатаДействияТекстом.РезультатДействияТекстомТолькоПросмотр =
		Не ДанныеДляОбновления.ОжидаетВыполнения Или Не ДанныеДляОбновления.ВсеДействияДоступны;
	ДанныеРезультатаДействияТекстом.ВзятьВРаботуДоступность =
		ДанныеДляОбновления.ЕстьНовыеДействия
		И ДанныеДляОбновления.ОжидаетВыполнения
		И ДанныеДляОбновления.ВсеДействияДоступны;
	ДанныеРезультатаДействияТекстом.ДокументЗадачаСоздатьПодзадачуДоступность =
		(ДанныеДляОбновления.ОжидаетВыполнения И ДанныеДляОбновления.ВсеДействияДоступны)
			Или Не ДанныеДляОбновления.ДействиеУказано;
	ДанныеРезультатаДействияТекстом.СоздатьПодзадачуДоступность =
		(ДанныеДляОбновления.ОжидаетВыполнения И ДанныеДляОбновления.ВсеДействияДоступны)
			Или Не ДанныеДляОбновления.ДействиеУказано;
	ДанныеРезультатаДействияТекстом.СогласоватьПереносСрокаДоступность =
		(ДанныеДляОбновления.ОжидаетВыполнения И ДанныеДляОбновления.ВсеДействияДоступны)
			Или Не ДанныеДляОбновления.ДействиеУказано;
	ДанныеРезультатаДействияТекстом.РезультатДействияТекстомПодсказкаВвода =
		РаботаСЗадачамиПовтИсп.ЗаголовокРезультатаТекстом(ДанныеДляОбновления.ВидДействия);
	
	// Обработки логики процессов.
	Если ДанныеДляОбновления.РежимОдногоДействия Тогда
		
		РеквизитыДействия = ДанныеДляОбновления.РеквизитыДействий[ДанныеДляОбновления.ДействиеЗадачи];
		
		Если ЗначениеЗаполнено(РеквизитыДействия.Источник)
			И ТипЗнч(РеквизитыДействия.Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
			РеквизитыИсточника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				РеквизитыДействия.Источник,
				"БизнесПроцесс, ТочкаМаршрута");
			
			Если РаботаСПроцессамиПоДействиям.ПроцессВыполняетДействие(РеквизитыИсточника.БизнесПроцесс) Тогда
				
				// Комментарий должен быть виден во всех задачах, в том числе
				// в задачах проверки и ознакомления с отрицательным результатом.
				ДанныеРезультатаДействияТекстом.РезультатДействияТекстомВидимость = Истина;
				
				ДействиеОбработки =
					РегистрыСведений.ПроцессыДействий.ДействиеПоПроцессу(РеквизитыИсточника.БизнесПроцесс);
				Если ЗначениеЗаполнено(ДействиеОбработки)
					И ТипЗнч(ДействиеОбработки) = Тип("СправочникСсылка.ДействияСогласования") Тогда
					
					СогласованиеВРежимеЗамечаний = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
						ДействиеОбработки, "СогласованиеВРежимеЗамечаний");
					
					// для согласования в режиме замечаний поле комментария не показываем,
					//  комментарий должен вводиться как замечание, привязанное к html.
					Если СогласованиеВРежимеЗамечаний Тогда
						ДанныеРезультатаДействияТекстом.РезультатДействияТекстомВидимость = Ложь;
					КонецЕсли;
						
				КонецЕсли;
				
			Иначе
				
				Если РеквизитыИсточника.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить Тогда
					ДанныеРезультатаДействияТекстом.РезультатДействияТекстомВидимость = Ложь;
				Иначе
					ДанныеРезультатаДействияТекстом.РезультатДействияТекстомВидимость = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеРезультатаДействияТекстом;
	
КонецФункции

// Формирует пустую структуру данных области результата действия текстом.
// 
// Возвращаемое значение:
//  Структура:
//   * РезультатДействияТекстомВидимость - Булево
//   * РезультатДействияТекстомТолькоПросмотр - Булево
//   * ВзятьВРаботуДоступность - Булево
//   * ДокументЗадачаСоздатьПодзадачуДоступность - Булево
//   * СоздатьПодзадачуДоступность - Булево
//   * СогласоватьПереносСрокаДоступность - Булево
//   * РезультатДействияТекстомПодсказкаВвода - Строка
// 
Функция НовыеДанныеРезультатаДействияТекстом() Экспорт
	
	ДанныеРезультатаДействияТекстом = Новый Структура;
	ДанныеРезультатаДействияТекстом.Вставить("РезультатДействияТекстомВидимость", Ложь);
	ДанныеРезультатаДействияТекстом.Вставить("РезультатДействияТекстомТолькоПросмотр", Ложь);
	ДанныеРезультатаДействияТекстом.Вставить("ВзятьВРаботуДоступность", Ложь);
	ДанныеРезультатаДействияТекстом.Вставить("ДокументЗадачаСоздатьПодзадачуДоступность", Ложь);
	ДанныеРезультатаДействияТекстом.Вставить("СоздатьПодзадачуДоступность", Ложь);
	ДанныеРезультатаДействияТекстом.Вставить("СогласоватьПереносСрокаДоступность", Ложь);
	ДанныеРезультатаДействияТекстом.Вставить("РезультатДействияТекстомПодсказкаВвода", "");
		
	Возврат ДанныеРезультатаДействияТекстом;
	
КонецФункции

// Формирует данные вариантов выполнения задачи.
//
// Параметры:
//   ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
//                  - Неопределено
//   ВыделенныеДействия - Массив из ДокументСсылка.ДействиеЗадачи
//   ДанныеДляОбновления - см. РаботаСЗадачами.ДанныеДляОбновления
//   МаксимальнаяДлинаОбщая - Число
//   КешДанных - Структура - Кеш данных, который требуется для ускорения работы различных механизмов.
// 
// Возвращаемое значение:
//  См. РаботаСЗадачами.НовыеДанныеВариантовВыполненияЗадачи
// 
Функция ДанныеВариантовВыполненияЗадачи(ДействиеЗадачи, ВыделенныеДействия, ДанныеДляОбновления, МаксимальнаяДлинаОбщая, КешДанных = Неопределено) Экспорт
	
	ДанныеВариантовВыполненияЗадачи = НовыеДанныеВариантовВыполненияЗадачи();
	
	// Рассчитаем вспомогательные данные.
	РезультатыОжидаемыхДействий = Новый Массив;
	КоличествоЗадачПоРезультатам = Новый Соответствие;
	ЗадачиПоРезультатам = Новый Соответствие;
	Для Каждого ВыделенноеДействие Из ВыделенныеДействия Цикл
		
		РеквизитыДействия = ДанныеДляОбновления.РеквизитыДействий[ВыделенноеДействие];
		
		ВидСостоянияУчастниковЗадач = РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(
			РеквизитыДействия.СостояниеУчастникаЗадачи);
		Если Не Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОжидаемоеДействие(ВидСостоянияУчастниковЗадач) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеДляОбновления.РеквизитыПодготовленыЗаранее Тогда
			ВидЗадачи = РеквизитыДействия.ВидЗадачи;
		Иначе
			КэшОбластиПросмотра = КэшиНаВремяВызоваПовтИсп.КэшЗадачаОбластьПросмотра();
			Если КэшОбластиПросмотра.Заполнен И КэшОбластиПросмотра.Задача = РеквизитыДействия.Задача Тогда
				ВидЗадачи = КэшОбластиПросмотра.ЗадачаОбъект.ВидЗадачи;
			Иначе
				ВидЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДействия.Задача, "ВидЗадачи");
			КонецЕсли;
		КонецЕсли;
		
		РезультатыВариантовВыполнения = РезультатыВариантовВыполнения(
			ВыделенноеДействие,
			ВидЗадачи,
			РеквизитыДействия.ВидДействия,
			КешДанных);
		
		Для Каждого КлючИЗначение Из РезультатыВариантовВыполнения Цикл
			
			РезультатВарианта = КлючИЗначение.Значение;
			
			РезультатыОжидаемыхДействий.Добавить(РезультатВарианта);
			
			Если КоличествоЗадачПоРезультатам[РезультатВарианта] = Неопределено Тогда
				КоличествоЗадачПоРезультатам[РезультатВарианта] = 0;
			КонецЕсли;
			КоличествоЗадачПоРезультатам[РезультатВарианта] = КоличествоЗадачПоРезультатам[РезультатВарианта] + 1;
			
			Если ЗадачиПоРезультатам[РезультатВарианта] = Неопределено Тогда
				ЗадачиПоРезультатам[РезультатВарианта] = Новый Массив;
			КонецЕсли;
			ЗадачиПоРезультатам[РезультатВарианта].Добавить(ВыделенноеДействие);
			
		КонецЦикла;
		
	КонецЦикла;
	
	РезультатыОжидаемыхДействий = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РезультатыОжидаемыхДействий);
	
	СписокСортировки = Новый СписокЗначений;
	Для Каждого РезультатВарианта Из РезультатыОжидаемыхДействий Цикл
		СписокСортировки.Добавить(РезультатВарианта, Строка(РезультатВарианта));
	КонецЦикла;
	СписокСортировки.СортироватьПоПредставлению();
	РезультатыОжидаемыхДействий = СписокСортировки.ВыгрузитьЗначения();
	
	РеквизитыРезультатов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		РезультатыОжидаемыхДействий,
		"ДоступноГрупповоеВыполнение, ЗаголовокКоманды, ЗаголовокКомандыЯзык1, ХарактерРезультата");
	
	// Обновим кнопки вариантов в соответствии с текущим вариантом обзора.
	Если ДанныеДляОбновления.ДействиеУказано И ДанныеДляОбновления.РежимОдногоДействия Тогда
		
		// Обновим заголовки кнопок вариантов.
		РезультатыПоВариантам = Новый Соответствие;
		ВыделенноеДействие = ВыделенныеДействия[0];
		РеквизитыДействия = ДанныеДляОбновления.РеквизитыДействий[ВыделенноеДействие];
		
		ВидСостоянияУчастниковЗадач = РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(
			РеквизитыДействия.СостояниеУчастникаЗадачи);
		Если Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОжидаемоеДействие(ВидСостоянияУчастниковЗадач) Тогда
			
			Если ДанныеДляОбновления.РеквизитыПодготовленыЗаранее Тогда
				ВидЗадачи = РеквизитыДействия.ВидЗадачи;
			Иначе
				КэшОбластиПросмотра = КэшиНаВремяВызоваПовтИсп.КэшЗадачаОбластьПросмотра();
				Если КэшОбластиПросмотра.Заполнен И КэшОбластиПросмотра.Задача = РеквизитыДействия.Задача Тогда
					ВидЗадачи = КэшОбластиПросмотра.ЗадачаОбъект.ВидЗадачи;
				Иначе
					ВидЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДействия.Задача, "ВидЗадачи");
				КонецЕсли;
			КонецЕсли;
			
			РезультатыВариантовВыполнения = РезультатыВариантовВыполнения(
				ДействиеЗадачи,
				ВидЗадачи,
				РеквизитыДействия.ВидДействия);
			
			Для Каждого КлючИЗначение Из РезультатыВариантовВыполнения Цикл
				
				ВариантВыполнения = КлючИЗначение.Ключ;
				РезультатВарианта = КлючИЗначение.Значение;
				
				РезультатыПоВариантам[ВариантВыполнения] = РезультатВарианта;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Для ВариантВыполнения = 1 По 3 Цикл
			РезультатВарианта = РезультатыПоВариантам[ВариантВыполнения];
			Если РезультатВарианта = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДанныеВариантовВыполненияЗадачи.ДоступныеРезультаты.Добавить(РезультатВарианта);
		КонецЦикла;
		
		ИнтеграцияЗадач.ПриОбновленииКнопокВариантовВыполнения(
			ДействиеЗадачи,
			РеквизитыДействия.Источник,
			РезультатыПоВариантам,
			КешДанных,
			ДанныеВариантовВыполненияЗадачи);
		
		// Кнопки выполнения по шаблонам.
		ОбластьПрименения =
			ПараметрыВыбораРезультатаДействияТекстом(ДействиеЗадачи).ОбластьПрименения;
		ШаблоныДляВыполнения = Справочники.ШаблоныТекстов.ШаблоныДляВыполнения(
			ОбластьПрименения,
			ДанныеВариантовВыполненияЗадачи.ДоступныеРезультаты);
		
		КоличествоКнопокПоШаблонам = 3;
		КоличествоШаблонов = ШаблоныДляВыполнения.Количество();
		ОтображатьВыборШаблона =
			КоличествоКнопокПоШаблонам < КоличествоШаблонов И КоличествоШаблонов > 0;
		ДанныеВариантовВыполненияЗадачи.ВыбратьШаблонДляВыполненияЗадачиВидимость = ОтображатьВыборШаблона;
		Для Каждого ДанныеШаблона Из ШаблоныДляВыполнения Цикл
			ДанныеВариантовВыполненияЗадачи.ШаблоныДляВыбора.Добавить(
				ДанныеШаблона.Ссылка,
				ДанныеШаблона.Наименование);
		КонецЦикла;
		
	ИначеЕсли ДанныеДляОбновления.ДействиеУказано И Не ДанныеДляОбновления.РежимОдногоДействия Тогда
		
		ОчереднойНомерРезультата = 1;
		ЕстьНедоступныеВарианты = Ложь;
		НомераРезультатов = Новый Соответствие;
		Для Каждого РезультатВарианта Из РезультатыОжидаемыхДействий Цикл
			
			РеквизитыРезультата = РеквизитыРезультатов[РезультатВарианта];
			Если Не РеквизитыРезультата.ДоступноГрупповоеВыполнение Тогда
				ЕстьНедоступныеВарианты = Истина;
				Продолжить;
			КонецЕсли;
			
			НомерРезультата = НомераРезультатов[РезультатВарианта];
			Если НомерРезультата = Неопределено Тогда
				
				НомераРезультатов[РезультатВарианта] = ОчереднойНомерРезультата;
				
				ДанныеГрупповогоДействия = Новый Структура("Результат, Задачи, ВерсииДанных");
				ДанныеГрупповогоДействия.Результат = РезультатВарианта;
				ДанныеГрупповогоДействия.Задачи = ЗадачиПоРезультатам[РезультатВарианта];
				ДанныеГрупповогоДействия.ВерсииДанных = Новый Соответствие;
				Для Каждого Задача Из ДанныеГрупповогоДействия.Задачи Цикл
					ДанныеГрупповогоДействия.ВерсииДанных[Задача] =
						ДанныеДляОбновления.РеквизитыДействий[Задача].ВерсияДанных;
				КонецЦикла;
				ДанныеВариантовВыполненияЗадачи.ДанныеГрупповыхДействий.Добавить(ДанныеГрупповогоДействия);
				
				ОчереднойНомерРезультата = ОчереднойНомерРезультата + 1;
				
			Конецесли;
			
		КонецЦикла;
		
		ДанныеВариантовВыполненияЗадачи.ГруппаИнформацияПроОтрицательныеВидимость = ЕстьНедоступныеВарианты;
		
	КонецЕсли;
	
	// Отмена выполнения.
	ДанныеВариантовВыполненияЗадачи.ОтменитьВыполнениеВидимость =
		ДанныеДляОбновления.ДействиеУказано
		И ДанныеДляОбновления.РежимОдногоДействия
		И ДоступнаОтменаВыполнения(ДействиеЗадачи, КешДанных);
	
	// Формируем возвращаемое значение.
	Если ДанныеДляОбновления.РежимОдногоДействия И ДанныеДляОбновления.ДействиеУказано Тогда
		ДанныеВариантовВыполненияЗадачи.ВерсияДанных = РеквизитыДействия.ВерсияДанных;
		ДанныеВариантовВыполненияЗадачи.ТекущийИсточникДействия = РеквизитыДействия.Источник;
	КонецЕсли;
	
	// Согласование в режиме замечаний.
	КэшОбластиПросмотра = КэшиНаВремяВызоваПовтИсп.КэшЗадачаОбластьПросмотра();
	
	Если КэшОбластиПросмотра.Заполнен И КэшОбластиПросмотра.ДействиеЗадачи = ДействиеЗадачи Тогда
		ИсточникДействияЗадачи = КэшОбластиПросмотра.РеквизитыДействияЗадачи.Источник;
	Иначе
		ИсточникДействияЗадачи = ИсточникДействияЗадачи(ДействиеЗадачи);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсточникДействияЗадачи)
		И ТипЗнч(ИсточникДействияЗадачи) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
	
		УстановитьПривилегированныйРежим(Истина);
		
		РеквизитыИсточника = Неопределено;
		Если КешДанных <> Неопределено И КешДанных.Свойство("ДанныеЗадачИсполнителей") Тогда
			РеквизитыИсточника = КешДанных.ДанныеЗадачИсполнителей[ИсточникДействияЗадачи];
		КонецЕсли;
		Если РеквизитыИсточника = Неопределено Тогда
			РеквизитыИсточника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ИсточникДействияЗадачи,
				"БизнесПроцесс, ТочкаМаршрута");
		КонецЕсли;
		
		СогласованиеВРежимеЗамечаний = Ложь;
		Действие = РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(РеквизитыИсточника.БизнесПроцесс);
		Если ЗначениеЗаполнено(Действие) И ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияСогласования") Тогда
			СогласованиеВРежимеЗамечаний = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Действие,
				"СогласованиеВРежимеЗамечаний");
		КонецЕсли;
		ДанныеВариантовВыполненияЗадачи.ОсобаяОбработкаОткрытияФайлов = СогласованиеВРежимеЗамечаний;
		
	ИначеЕсли Не ЗначениеЗаполнено(ИсточникДействияЗадачи) Тогда
		
		Действие = Неопределено;
		Если ИнтеграцияЗадач.ЭтоЗадачаСогласованияВРежимеЗамечаний(ДействиеЗадачи, Действие) Тогда
			СогласованиеВРежимеЗамечаний = Ложь;
			Если ЗначениеЗаполнено(Действие) И ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияСогласования") Тогда
				СогласованиеВРежимеЗамечаний = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					Действие,
					"СогласованиеВРежимеЗамечаний");
			КонецЕсли;
			ДанныеВариантовВыполненияЗадачи.ОсобаяОбработкаОткрытияФайлов = СогласованиеВРежимеЗамечаний;
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеВариантовВыполненияЗадачи.ДоступныКомандыВыполнения = ДанныеДляОбновления.ВсеДействияДоступны;
	
	Возврат ДанныеВариантовВыполненияЗадачи;
	
КонецФункции

// Формирует пустую структуру данных вариантов выполнения задачи.
// 
// Возвращаемое значение:
//  Структура:
//   * ДанныеГрупповыхДействий - Массив из Структура:
//      ** Результат - СправочникСсылка.ВидыДействий
//      ** Задачи - Массив из ДокументСсылка.ДействиеЗадачи
//      ** ВерсииДанных - Соответствие из КлючИЗначение:
//          *** Ключ - ДокументСсылка.ДействиеЗадачи
//          *** Значение - Строка
//   * ВерсияДанных - Строка - версия данных первой задачи из выделенных. Используется для режима одной задачи.
//   * ШаблоныДляВыбора - СписокЗначений из СправочникСсылка.ШаблоныТекстов
//   * ВыбратьШаблонДляВыполненияЗадачиВидимость - Булево
//   * ГруппаИнформацияПроОтрицательныеВидимость - Булево
//   * ОтменитьВыполнениеВидимость - Булево
//   * ОсобаяОбработкаОткрытияФайлов - Булево
//   * ДоступныКомандыВыполнения - Булево
//   * ДанныеДополнительныхКоманд - Массив из см. РаботаСЗадачамиКлиентСервер.НовыеДанныеДополнительнойКоманды
//   * ТекущийИсточникДействия - Неопределено
//                             - см. ОпределяемыйТип.ИсточникДействийЗадач
//   * ДоступныеРезультаты - Массив из СправочникСсылка.РезультатыДействийЗадач
//   * РезультатыСЭП - Массив из СправочникСсылка.РезультатыДействийЗадач
// 
Функция НовыеДанныеВариантовВыполненияЗадачи() Экспорт
	
	ДанныеВариантовВыполненияЗадачи = Новый Структура;
	ДанныеВариантовВыполненияЗадачи.Вставить("ДанныеГрупповыхДействий", Новый Массив);
	ДанныеВариантовВыполненияЗадачи.Вставить("ВерсияДанных", "");
	ДанныеВариантовВыполненияЗадачи.Вставить("ШаблоныДляВыбора", Новый СписокЗначений);
	ДанныеВариантовВыполненияЗадачи.Вставить("ВыбратьШаблонДляВыполненияЗадачиВидимость", Ложь);
	ДанныеВариантовВыполненияЗадачи.Вставить("ГруппаИнформацияПроОтрицательныеВидимость", Ложь);
	ДанныеВариантовВыполненияЗадачи.Вставить("ОтменитьВыполнениеВидимость", Ложь);
	ДанныеВариантовВыполненияЗадачи.Вставить("ОсобаяОбработкаОткрытияФайлов", Ложь);
	ДанныеВариантовВыполненияЗадачи.Вставить("ТекущийИсточникДействия", Неопределено);
	ДанныеВариантовВыполненияЗадачи.Вставить("ДоступныКомандыВыполнения", Ложь);
	ДанныеВариантовВыполненияЗадачи.Вставить("ДанныеДополнительныхКоманд", Новый Массив);
	ДанныеВариантовВыполненияЗадачи.Вставить("ДоступныеРезультаты", Новый Массив);
	ДанныеВариантовВыполненияЗадачи.Вставить("РезультатыСЭП", Новый Массив);
	
	Возврат ДанныеВариантовВыполненияЗадачи;
	
КонецФункции

// Формирует новые данные доступности команд.
// 
// Возвращаемое значение:
//  Структура:
//   * Команда - ОбъектМетаданных
//             - Неопределено
//   * Доступность - Булево
//   * ПодходящиеЗадачи - Массив из ДокументСсылка.Задача
// 
Функция НовыеДанныеДоступностиКоманды() Экспорт
	
	ДанныеДоступностиКоманд = Новый Структура;
	ДанныеДоступностиКоманд.Вставить("Команда", Неопределено);
	ДанныеДоступностиКоманд.Вставить("Доступность", Ложь);
	ДанныеДоступностиКоманд.Вставить("ПодходящиеЗадачи", Новый Массив);
	
	Возврат ДанныеДоступностиКоманд;
	
КонецФункции

// Формирует данные команд для выполнения.
// 
// Возвращаемое значение:
//  Массив из см. РаботаСЗадачами.НовыеДанныеКомандыВыполнения
// 
Функция ДанныеВсехКомандВыполнения() Экспорт
	
	ДанныеВсехКомандВыполнения = Новый Массив;
	
	ЦветаРезультатов = Новый Соответствие;
	
	// Команды результатов.
	ПрефиксИмениКомандыРезультата = РаботаСЗадачамиКлиентСервер.ПрефиксИмениКомандыРезультата();
	ПрефиксИмениКомандыГрупповогоРезультата = РаботаСЗадачамиКлиентСервер.ПрефиксИмениКомандыГрупповогоРезультата();
	КонфигурацияИспользуетТолькоОдинЯзык = МультиязычностьПовтИсп.КонфигурацияИспользуетТолькоОдинЯзык(Ложь);
	ИспользуетсяЯзык1 = Не КонфигурацияИспользуетТолькоОдинЯзык И Не МультиязычностьСервер.ЭтоОсновнойЯзык();
	ОбработанныеСтандартныеКоманды = Новый Соответствие;
	
	РезультатыДляКоторыхВозможнаЭП = Новый Соответствие;
	РезультатыДляКоторыхВозможнаЭП.Вставить(Справочники.РезультатыДействийЗадач.Подписано, Истина);
	РезультатыДляКоторыхВозможнаЭП.Вставить(Справочники.РезультатыДействийЗадач.Рассмотрено, Истина);
	РезультатыДляКоторыхВозможнаЭП.Вставить(Справочники.РезультатыДействийЗадач.Согласовано, Истина);
	РезультатыДляКоторыхВозможнаЭП.Вставить(Справочники.РезультатыДействийЗадач.СогласованоСЗамечаниями, Истина);
	РезультатыДляКоторыхВозможнаЭП.Вставить(Справочники.РезультатыДействийЗадач.НеСогласовано, Истина);
	РезультатыДляКоторыхВозможнаЭП.Вставить(Справочники.РезультатыДействийЗадач.Утверждено, Истина);
	РезультатыДляКоторыхВозможнаЭП.Вставить(Справочники.РезультатыДействийЗадач.Ознакомился, Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НаборыСостоянийЗадачСостоянияУчастниковСовершено.НомерСтроки КАК НомерСтроки,
		|	НаборыСостоянийЗадачСостоянияУчастниковСовершено.РезультатДействия КАК РезультатДействия,
		|	РезультатыДействийЗадач.ЗаголовокКоманды КАК ЗаголовокКоманды,
		|	РезультатыДействийЗадач.ЗаголовокКомандыЯзык1 КАК ЗаголовокКомандыЯзык1,
		|	РезультатыДействийЗадач.ХарактерРезультата КАК ХарактерРезультата,
		|	РезультатыДействийЗадач.ДоступноГрупповоеВыполнение КАК ДоступноГрупповоеВыполнение
		|ИЗ
		|	Справочник.НаборыСостоянийЗадач.СостоянияУчастниковСовершено КАК НаборыСостоянийЗадачСостоянияУчастниковСовершено
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РезультатыДействийЗадач КАК РезультатыДействийЗадач
		|		ПО НаборыСостоянийЗадачСостоянияУчастниковСовершено.РезультатДействия = РезультатыДействийЗадач.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ОбработанныеСтандартныеКоманды[ВыборкаДетальныеЗаписи.РезультатДействия] = Истина Тогда
			Продолжить;
		КонецЕсли;
		ОбработанныеСтандартныеКоманды[ВыборкаДетальныеЗаписи.РезультатДействия] = Истина;
		
		ИдентификаторРезультата = ВыборкаДетальныеЗаписи.РезультатДействия.УникальныйИдентификатор();
		
		// Команда выполнения.
		ДанныеКомандыВыполнения = НовыеДанныеКомандыВыполнения();
		ДанныеКомандыВыполнения.ИмяКоманды = РаботаСЗадачамиКлиентСервер.ИмяКомандыВыполнения(
			ПрефиксИмениКомандыРезультата,
			ИдентификаторРезультата);
		ДанныеКомандыВыполнения.ИмяЭлемента = РаботаСЗадачамиКлиентСервер.ИмяЭлементаВыполненияСРезультатом(
			ДанныеКомандыВыполнения.ИмяКоманды);
		ДанныеКомандыВыполнения.Заголовок = ?(ИспользуетсяЯзык1,
			ВыборкаДетальныеЗаписи.ЗаголовокКомандыЯзык1,
			ВыборкаДетальныеЗаписи.ЗаголовокКоманды);
		ДанныеКомандыВыполнения.ЦветТекста = Перечисления.ХарактерыРезультатов.ЦветТекстаКоманды(
			ВыборкаДетальныеЗаписи.ХарактерРезультата);
		ДанныеВсехКомандВыполнения.Добавить(ДанныеКомандыВыполнения);
		
		ЦветаРезультатов[ВыборкаДетальныеЗаписи.РезультатДействия] = ДанныеКомандыВыполнения.ЦветТекста;
		
		// Команда выполнения с ЭП.
		ВозможнаЭП = РезультатыДляКоторыхВозможнаЭП[ВыборкаДетальныеЗаписи.РезультатДействия] = Истина;
		Если ВозможнаЭП Тогда
			ДанныеКомандыВыполненияСЭП = НовыеДанныеКомандыВыполнения();
			ДанныеКомандыВыполненияСЭП.ИмяКоманды = ДанныеКомандыВыполнения.ИмяКоманды;
			ДанныеКомандыВыполненияСЭП.ИмяЭлемента = РаботаСЗадачамиКлиентСервер.ИмяЭлементаВыполненияСРезультатомИЭП(
				ДанныеКомандыВыполнения.ИмяКоманды);
			ДанныеКомандыВыполненияСЭП.Заголовок =
				РаботаСЗадачамиКлиентСервер.ЗаголовокКомандыСЭП(ДанныеКомандыВыполнения.Заголовок);
			ДанныеКомандыВыполненияСЭП.ЦветТекста = ДанныеКомандыВыполнения.ЦветТекста;
			ДанныеВсехКомандВыполнения.Добавить(ДанныеКомандыВыполненияСЭП);
		КонецЕсли;
		
		// Команда группового выполнения.
		Если ВыборкаДетальныеЗаписи.ДоступноГрупповоеВыполнение Тогда
			ДанныеКомандыГрупповогоВыполнения = НовыеДанныеКомандыВыполнения();
			ДанныеКомандыГрупповогоВыполнения.ИмяКоманды = РаботаСЗадачамиКлиентСервер.ИмяКомандыВыполнения(
				ПрефиксИмениКомандыГрупповогоРезультата,
				ИдентификаторРезультата);
			ДанныеКомандыГрупповогоВыполнения.ИмяЭлемента =
				РаботаСЗадачамиКлиентСервер.ИмяЭлементаВыполненияСРезультатом(
					ДанныеКомандыГрупповогоВыполнения.ИмяКоманды);
			ДанныеКомандыГрупповогоВыполнения.Заголовок = ДанныеКомандыВыполнения.Заголовок;
			ДанныеКомандыГрупповогоВыполнения.ЦветТекста = ДанныеКомандыВыполнения.ЦветТекста;
			ДанныеКомандыГрупповогоВыполнения.ЭтоГрупповаяКоманда = Истина;
			ДанныеВсехКомандВыполнения.Добавить(ДанныеКомандыГрупповогоВыполнения);
		КонецЕсли;
		
	КонецЦикла;
	
	// Команды шаблонов.
	ПрефиксИмениКомандыШаблона = РаботаСЗадачамиКлиентСервер.ПрефиксИмениКомандыШаблоны();
	ВсеШаблоныДляВыполнения = Справочники.ШаблоныТекстов.ВсеШаблоныДляВыполнения();
	Для Каждого ДанныеШаблонаДляВыполнения Из ВсеШаблоныДляВыполнения Цикл
		ДанныеКомандыВыполнения = НовыеДанныеКомандыВыполнения();
		ИдентификаторШаблона = ДанныеШаблонаДляВыполнения.Ссылка.УникальныйИдентификатор();
		ДанныеКомандыВыполнения.ИмяКоманды = РаботаСЗадачамиКлиентСервер.ИмяКомандыВыполнения(
			ПрефиксИмениКомандыШаблона,
			ИдентификаторШаблона);
		ДанныеКомандыВыполнения.ИмяЭлемента = РаботаСЗадачамиКлиентСервер.ИмяЭлементаВыполненияСРезультатом(
			ДанныеКомандыВыполнения.ИмяКоманды);
		ДанныеКомандыВыполнения.Заголовок = ДанныеШаблонаДляВыполнения.Наименование;
		ЦветРезультата = ЦветаРезультатов[ДанныеШаблонаДляВыполнения.РезультатДействия];
		Если ЦветРезультата <> Неопределено Тогда
			ДанныеКомандыВыполнения.ЦветТекста = ЦветРезультата;
		КонецЕсли;
		ДанныеВсехКомандВыполнения.Добавить(ДанныеКомандыВыполнения);
	КонецЦикла;
	
	// Дополнительные команды - Внести замечания.
	ДанныеДополнительнойКомандыВнестиЗамечания =
		РаботаСЗадачамиКлиентСервер.ДанныеДополнительнойКомандыВнестиЗамечания();
	ДанныеКомандыВыполнения = НовыеДанныеКомандыВыполнения();
	ДанныеКомандыВыполнения.ИмяКоманды = ДанныеДополнительнойКомандыВнестиЗамечания.ИмяКоманды;
	ДанныеКомандыВыполнения.ИмяЭлемента = ДанныеДополнительнойКомандыВнестиЗамечания.ИмяЭлемента;
	ДанныеКомандыВыполнения.Заголовок = ДанныеДополнительнойКомандыВнестиЗамечания.Заголовок;
	ДанныеВсехКомандВыполнения.Добавить(ДанныеКомандыВыполнения);
	
	// Дополнительные команды - Обработать замечания.
	ДанныеДополнительнойКомандыВнестиЗамечания =
		РаботаСЗадачамиКлиентСервер.ДанныеДополнительнойКомандыОбработатьЗамечания();
	ДанныеКомандыВыполнения = НовыеДанныеКомандыВыполнения();
	ДанныеКомандыВыполнения.ИмяКоманды = ДанныеДополнительнойКомандыВнестиЗамечания.ИмяКоманды;
	ДанныеКомандыВыполнения.ИмяЭлемента = ДанныеДополнительнойКомандыВнестиЗамечания.ИмяЭлемента;
	ДанныеКомандыВыполнения.Заголовок = ДанныеДополнительнойКомандыВнестиЗамечания.Заголовок;
	ДанныеВсехКомандВыполнения.Добавить(ДанныеКомандыВыполнения);
	
	// Настром высоту команд.
	Для Каждого ДанныеКомандыВыполнения Из ДанныеВсехКомандВыполнения Цикл
		ДанныеКомандыВыполнения.ВысотаЗаголовка = ВысотаЗаголовкаКомандыВыполнения(ДанныеКомандыВыполнения.Заголовок);
	КонецЦикла;
	
	Возврат ДанныеВсехКомандВыполнения;
	
КонецФункции

// Обновляет команды выполнения.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ДанныеКомандВыполнения - ДанныеФормыКоллекция
//  РодительКомандВыполнения - ГруппаФормы
//  ВставитьПеред - КнопкаФормы
//  РодительКомандГрупповогоВыполнения - ГруппаФормы
//                                     - Неопределено
// 
Процедура ОбновитьКомандыВыполнения(Форма, ДанныеКомандВыполнения, РодительКомандВыполнения, ВставитьПеред,
	РодительКомандГрупповогоВыполнения = Неопределено) Экспорт
	
#Если Не ВнешнееСоединение Тогда
	
	ДанныеВсехКомандВыполнения = ДанныеВсехКомандВыполнения();
	
	Для Каждого ДанныеКомандыВыполнения Из ДанныеВсехКомандВыполнения Цикл
		
		Если ДанныеКомандыВыполнения.ЭтоГрупповаяКоманда
			И РодительКомандГрупповогоВыполнения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеКомандыВыполнения.ЭтоГрупповаяКоманда Тогда
			РодительКоманды = РодительКомандГрупповогоВыполнения;
			ВставитьПередЭлемента = Неопределено;
		Иначе
			РодительКоманды = РодительКомандВыполнения;
			ВставитьПередЭлемента = ВставитьПеред;
		КонецЕсли;
		
		// Команды выполнения.
		КомандаДляВыполнения = Форма.Команды.Найти(ДанныеКомандыВыполнения.ИмяКоманды);
		Если КомандаДляВыполнения = Неопределено Тогда
			РаботаСФормами.ДобавитьКоманду(
				Форма,
				ДанныеКомандыВыполнения.ИмяКоманды,
				ДанныеКомандыВыполнения.Заголовок,
				"");
		КонецЕсли;
		
		// Кнопка выполнения.
		КнопкаКоманды = Форма.Элементы.Найти(ДанныеКомандыВыполнения.ИмяЭлемента);
		Если КнопкаКоманды = Неопределено Тогда
			КнопкаКоманды = РаботаСФормами.ДобавитьКнопку(
				Форма,
				ДанныеКомандыВыполнения.ИмяЭлемента,
				РодительКоманды,
				ДанныеКомандыВыполнения.ИмяКоманды,
				ВставитьПередЭлемента);
			СтрокаДанныхКоманды = ДанныеКомандВыполнения.Добавить();
			СтрокаДанныхКоманды.ИмяЭлемента = ДанныеКомандыВыполнения.ИмяЭлемента;
			СтрокаДанныхКоманды.ИмяКоманды = ДанныеКомандыВыполнения.ИмяКоманды;
		КонецЕсли;
		КнопкаКоманды.Заголовок = ДанныеКомандыВыполнения.Заголовок;
		КнопкаКоманды.Высота = 2;
		КнопкаКоманды.ЦветТекста = ДанныеКомандыВыполнения.ЦветТекста;
		КнопкаКоманды.ВысотаЗаголовка = ДанныеКомандыВыполнения.ВысотаЗаголовка;
		КнопкаКоманды.Шрифт = ШрифтыСтиля.ШрифтКнопкиВыполненияЗадачиОбычный;
		КнопкаКоманды.ОтображениеФигуры = ОтображениеФигурыКнопки.Всегда;
		КнопкаКоманды.Видимость = Ложь;
		
		Если ПараметрыСеанса.ЭтоМобильныйКлиент Тогда
			Если ДанныеКомандыВыполнения.ЭтоГрупповаяКоманда Тогда
				МК.ОформитьАкцентнуюКнопку(КнопкаКоманды);
			ИначеЕсли ДанныеКомандыВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи Тогда
				МК.ОформитьКнопкуЗадачСОтрицательнымВыполнением(КнопкаКоманды);
			Иначе
				МК.ОформитьКнопкуЗадачСПоложительнымВыполнением(КнопкаКоманды);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
#Иначе
	ВызватьИсключение НСтр("ru = 'Метод ОбновитьКомандыВыполнения не доступен во внешнем соединении.'");
#КонецЕсли
	
КонецПроцедуры

// Определяет высоту заголовка команды выполнения.
// 
// Параметры:
//  Заголовок - Строка
// 
// Возвращаемое значение:
//  Число
// 
Функция ВысотаЗаголовкаКомандыВыполнения(Заголовок) Экспорт
	
	ПределОднойСтроки = 18;
	Если СтрДлина(Заголовок) > ПределОднойСтроки Тогда
		ВысотаЗаголовка = 2;
	Иначе
		ВысотаЗаголовка = 0;
	КонецЕсли;
	
	Возврат ВысотаЗаголовка;
	
КонецФункции

// Формирует данные дерева подзадач.
// 
// Параметры:
//  Задача - ДокументСсылка.Задача
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
// 
// Возвращаемое значение:
//  Массив из см. РаботаСЗадачами.НовыеДанныеСтрокиДереваПодзадач
// 
Функция ДанныеДереваПодзадач(Задача, ДействиеЗадачи) Экспорт
	
	ДанныеДереваПодзадач = Новый Массив;
	Если Не ЗначениеЗаполнено(Задача) Тогда
		Возврат ДанныеДереваПодзадач;
	КонецЕсли;
	
	ДействияТекущегоУровня = Новый Массив;
	ЭтоПервыйУровень = Истина;
	
	ТекстОписаниеСкрыто = НСтр("ru = 'Описание скрыто'");
	
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	ДеревоПодзадач = Новый ДеревоЗначений;
	ДеревоПодзадач.Колонки.Добавить("КлючСтроки");
	ДеревоПодзадач.Колонки.Добавить("Представление");
	ДеревоПодзадач.Колонки.Добавить("Задача");
	ДеревоПодзадач.Колонки.Добавить("ДействиеЗадачи");
	ДеревоПодзадач.Колонки.Добавить("Срок");
	ДеревоПодзадач.Колонки.Добавить("СостояниеЗадачи");
	ДеревоПодзадач.Колонки.Добавить("СостояниеУчастникаЗадачи");
	ДеревоПодзадач.Колонки.Добавить("ЕстьПриложения", ОписаниеТиповБулево);
	ДеревоПодзадач.Колонки.Добавить("Участник");
	ДеревоПодзадач.Колонки.Добавить("РезультатДействияТекстом");
	ДеревоПодзадач.Колонки.Добавить("Заголовок");
	ДеревоПодзадач.Колонки.Добавить("ИндексКартинкиСостояния");
	ДеревоПодзадач.Колонки.Добавить("ЭтоВыполненнаяЗадача", ОписаниеТиповБулево);
	ДеревоПодзадач.Колонки.Добавить("ЭтоПервыйУровень", ОписаниеТиповБулево);
	ДеревоПодзадач.Колонки.Добавить("ВозможенВозвратНаДоработку", ОписаниеТиповБулево);
	
	Пока ДействияТекущегоУровня.Количество() > 0 Или ЭтоПервыйУровень Цикл
		
		// Определеим все подзадачи.
		Если Не ЭтоПервыйУровень Тогда
			
			ВсеПодзадачи = Документы.ДействиеЗадачи.НайтиПодзадачи(ДействияТекущегоУровня);
			
		ИначеЕсли ЗначениеЗаполнено(ДействиеЗадачи) Тогда
			
			ВсеПодзадачи = Документы.ДействиеЗадачи.НайтиПодзадачи(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДействиеЗадачи));
			
		Иначе
			
			ВсеПодзадачи = Документы.Задача.НайтиПодзадачи(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Задача));
			
		КонецЕсли;
		
		АктивныеДействияПоЗадачам =
			Документы.ДействиеЗадачи.АктивныеДействияПоЗадачам(ВсеПодзадачи);
		ЭтоПросроченныеИОжидающиеВыполненияЗадачи =
			РегистрыСведений.РеестрЗадачПоАвторам.ЭтоПросроченныеИОжидающиеВыполненияЗадачи(ВсеПодзадачи);
		ЭтоОжидающиеПроверкиЗадачи =
			РегистрыСведений.РеестрЗадачПоАвторам.ЭтоОжидающиеПроверкиЗадачи(ВсеПодзадачи);
		РеквизитыПодзадач = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			ВсеПодзадачи,
			"ВышестоящаяЗадача, ВышестоящееДействие, ДатаСоздания,
			|Заголовок, СостояниеЗадачи, РезультатЗадачи, Срок, Участники");
		
		ПраваСотрудниковПоОбъектам = ДокументооборотПраваДоступа.ПраваСотрудниковПоОбъектам(
			ВсеПодзадачи,
			Истина,
			ПараметрыСеанса.СотрудникиПользователя);
		
		ПраваЧтенияПоЗадачам = Новый Соответствие;
		
		Для Каждого СтрокаПрав Из ПраваСотрудниковПоОбъектам Цикл
			
			Если ПраваЧтенияПоЗадачам[СтрокаПрав.ОбъектДоступа] = Неопределено Тогда
				ПраваЧтенияПоЗадачам[СтрокаПрав.ОбъектДоступа] = Ложь;
			КонецЕсли;
			
			ПраваЧтенияПоЗадачам[СтрокаПрав.ОбъектДоступа] =
				ПраваЧтенияПоЗадачам[СтрокаПрав.ОбъектДоступа] Или СтрокаПрав.Чтение;
			
		КонецЦикла;
		
		Для Каждого Подзадача Из ВсеПодзадачи Цикл
			
			РеквизитыПодзадачи = РеквизитыПодзадач[Подзадача];
			//@skip-check bsl-legacy-check-expression-type
			РеквизитыПодзадачи.Участники = РеквизитыПодзадачи.Участники.Выгрузить();
			РеквизитыПодзадачи.Участники.Сортировать("НомерСтроки Возр");
			
		КонецЦикла;
		
		ВышестоящиеДействияТекущегоУровня = Новый Массив;
		
		ДанныеПодзадач = Новый ТаблицаЗначений;
		ДанныеПодзадач.Колонки.Добавить("Задача");
		ДанныеПодзадач.Колонки.Добавить("Заголовок");
		ДанныеПодзадач.Колонки.Добавить("ВышестоящаяЗадача");
		ДанныеПодзадач.Колонки.Добавить("ВышестоящееДействие");
		ДанныеПодзадач.Колонки.Добавить("СостояниеЗадачи");
		ДанныеПодзадач.Колонки.Добавить("РезультатЗадачи");
		ДанныеПодзадач.Колонки.Добавить("ДатаСоздания");
		ДанныеПодзадач.Колонки.Добавить("Срок");
		ДанныеПодзадач.Колонки.Добавить("ПросроченаИОжидаетВыполнения");
		ДанныеПодзадач.Колонки.Добавить("Представление");
		
		Если ЭтоПервыйУровень Тогда
			
			КоличествоЭлементов = ВсеПодзадачи.Количество();
			Для Индекс = 1 По КоличествоЭлементов Цикл
				
				ОбратныйИндекс = КоличествоЭлементов - Индекс;
				Подзадача = ВсеПодзадачи[ОбратныйИндекс];
				Если ПраваЧтенияПоЗадачам[Подзадача] = Истина Тогда
					Продолжить;
				КонецЕсли;
				
				ВсеПодзадачи.Удалить(ОбратныйИндекс);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Для Каждого Подзадача Из ВсеПодзадачи Цикл
			
			РеквизитыПодзадачи = РеквизитыПодзадач[Подзадача];
			
			СтрокаДанныеПодзадачи = ДанныеПодзадач.Добавить();
			СтрокаДанныеПодзадачи.Задача = Подзадача;
			СтрокаДанныеПодзадачи.ВышестоящаяЗадача = РеквизитыПодзадачи.ВышестоящаяЗадача;
			СтрокаДанныеПодзадачи.ВышестоящееДействие = РеквизитыПодзадачи.ВышестоящееДействие;
			СтрокаДанныеПодзадачи.СостояниеЗадачи = РеквизитыПодзадачи.СостояниеЗадачи;
			СтрокаДанныеПодзадачи.РезультатЗадачи = РеквизитыПодзадачи.РезультатЗадачи;
			СтрокаДанныеПодзадачи.Срок = РеквизитыПодзадачи.Срок;
			СтрокаДанныеПодзадачи.ДатаСоздания = РеквизитыПодзадачи.ДатаСоздания;
			СтрокаДанныеПодзадачи.ПросроченаИОжидаетВыполнения =
				ЭтоПросроченныеИОжидающиеВыполненияЗадачи[Подзадача];
			
			ПредставлениеЗаголовка =
				?(ПраваЧтенияПоЗадачам[Подзадача] = Истина,
					РеквизитыПодзадачи.Заголовок,
					ТекстОписаниеСкрыто);
			СтрокаДанныеПодзадачи.Заголовок = ПредставлениеЗаголовка;
			СтрокаДанныеПодзадачи.Представление = ПредставлениеЗаголовка;
			
			Если ЗначениеЗаполнено(РеквизитыПодзадачи.ВышестоящееДействие) Тогда
				ВышестоящиеДействияТекущегоУровня.Добавить(РеквизитыПодзадачи.ВышестоящееДействие);
			КонецЕсли;
			
		КонецЦикла;
		
		ДанныеПодзадач.Сортировать("ДатаСоздания Убыв");
		ДанныеПодзадач.Индексы.Добавить("Задача");
		
		ВышестоящиеДействияТекущегоУровня =
			ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВышестоящиеДействияТекущегоУровня);
		
		// Определим количество действий по задачам.
		КоличествоДействийПоЗадачам = 
			КоличествоДействийПоЗадачам(
				АктивныеДействияПоЗадачам,
				ВсеПодзадачи,
				РеквизитыПодзадач,
				ЭтоОжидающиеПроверкиЗадачи);
		
		// Определим все действия подзадач.
		ДанныеДействийПодзадач = Новый ТаблицаЗначений;
		ДанныеДействийПодзадач.Колонки.Добавить("Задача");
		ДанныеДействийПодзадач.Колонки.Добавить("ДействиеЗадачи");
		ДанныеДействийПодзадач.Колонки.Добавить("ЕстьПриложения");
		ДанныеДействийПодзадач.Колонки.Добавить("Участник");
		ДанныеДействийПодзадач.Колонки.Добавить("ПредставлениеУчастника");
		ДанныеДействийПодзадач.Колонки.Добавить("СостояниеУчастникаЗадачи");
		ДанныеДействийПодзадач.Колонки.Добавить("РезультатДействияТекстом");
		ДанныеДействийПодзадач.Колонки.Добавить("ЭтоОтветственный");
		ДанныеДействийПодзадач.Колонки.Добавить("ЭтоПроверяющий");
		ДанныеДействийПодзадач.Колонки.Добавить("ВышестоящееДействие");
		ДанныеДействийПодзадач.Колонки.Добавить("Представление");
		
		ДействияСледующегоУровня = Новый Массив;
		
		Для Каждого СтрокаДействия Из АктивныеДействияПоЗадачам Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаДействия.Исполнитель) Тогда
				Продолжить;
			КонецЕсли;
			
			РеквизитыПодзадачи = РеквизитыПодзадач[СтрокаДействия.Задача];
			Если РеквизитыПодзадачи = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаУчастника = РеквизитыПодзадачи.Участники.Найти(
				СтрокаДействия.ДействиеЗадачи,
				"ДействиеУчастника");
			Если СтрокаУчастника = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЭтоОжидающаяПроверкиЗадача = ЭтоОжидающиеПроверкиЗадачи[СтрокаДействия.Задача];
			Если Не ЭтоОжидающаяПроверкиЗадача
				И РаботаСЗадачамиПовтИсп.ЭтоПроверяющий(СтрокаУчастника.ВидУчастника) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДанныеДействия = ДанныеДействийПодзадач.Добавить();
			СтрокаДанныеДействия.Задача = СтрокаДействия.Задача;
			СтрокаДанныеДействия.ДействиеЗадачи = СтрокаДействия.ДействиеЗадачи;
			СтрокаДанныеДействия.ЕстьПриложения = СтрокаДействия.ЕстьПриложения;
			СтрокаДанныеДействия.Участник = СтрокаДействия.Исполнитель;
			СтрокаДанныеДействия.СостояниеУчастникаЗадачи = СтрокаДействия.СостояниеУчастникаЗадачи;
			СтрокаДанныеДействия.РезультатДействияТекстом = СтрокаДействия.РезультатДействияТекстом;
			СтрокаДанныеДействия.ЭтоОтветственный =
				РаботаСЗадачамиПовтИсп.ЭтоОтветственный(СтрокаУчастника.ВидУчастника);
			СтрокаДанныеДействия.ЭтоПроверяющий =
				РаботаСЗадачамиПовтИсп.ЭтоПроверяющий(СтрокаУчастника.ВидУчастника);
			СтрокаДанныеДействия.ВышестоящееДействие = РеквизитыПодзадачи.ВышестоящееДействие;
			СтрокаДанныеДействия.Представление = ПредставлениеДействияВДереве(
				СтрокаДанныеДействия,
				КоличествоДействийПоЗадачам[СтрокаДанныеДействия.Задача],
				ПраваЧтенияПоЗадачам[СтрокаДанныеДействия.Задача] = Истина,
				СтрокаУчастника.ВидУчастника,
				СтрокаДействия.ФактическийИсполнитель);
			
			ДействияСледующегоУровня.Добавить(СтрокаДействия.ДействиеЗадачи);
			
		КонецЦикла;
		
		ВсеУчастники = ДанныеДействийПодзадач.ВыгрузитьКолонку("Участник");
		//@skip-check bsl-legacy-check-string-literal
		ПредставленияУчастников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВсеУчастники, "Представление");
		Для Каждого СтрокаДанныеДействия Из ДанныеДействийПодзадач Цикл
			СтрокаДанныеДействия.ПредставлениеУчастника = ПредставленияУчастников[СтрокаДанныеДействия.Участник];
		КонецЦикла;
		
		ДанныеДействийПодзадач.Сортировать("ЭтоОтветственный Убыв, ЭтоПроверяющий, ПредставлениеУчастника");
		ДанныеДействийПодзадач.Индексы.Добавить("ДействиеЗадачи");
		
		// Обновим дерево подзадач.
		Если ЭтоПервыйУровень Тогда
			
			ОбновитьПодзадачиУзла(
				ДеревоПодзадач.Строки,
				ДанныеПодзадач,
				ДанныеДействийПодзадач,
				ЭтоПервыйУровень);
			
		Иначе
			
			УзлыДействий = Новый Соответствие;
			
			УзлыКОбработке = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДеревоПодзадач);
			Пока УзлыКОбработке.Количество() > 0 Цикл
				
				УзелКОбработке = УзлыКОбработке.Получить(0);
				УзлыКОбработке.Удалить(0);
				
				Для Каждого ОчереднойУзел Из УзелКОбработке.Строки Цикл
					
					Если ЗначениеЗаполнено(ОчереднойУзел.ДействиеЗадачи) Тогда
						УзлыДействий.Вставить(ОчереднойУзел.ДействиеЗадачи, ОчереднойУзел);
					КонецЕсли;
					
					УзлыКОбработке.Добавить(ОчереднойУзел);
					
				КонецЦикла;
				
			КонецЦикла;
			
			Для Каждого ВышестоящееДействие Из ВышестоящиеДействияТекущегоУровня Цикл
				
				УзелВышестоящегоДействия = УзлыДействий[ВышестоящееДействие];
				Если УзелВышестоящегоДействия = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеПодзадачУзла = ДанныеПодзадач.Скопировать(
					Новый Структура("ВышестоящееДействие", ВышестоящееДействие));
				ДанныеДействийПодзадачУзла = ДанныеДействийПодзадач.Скопировать(
					Новый Структура("ВышестоящееДействие", ВышестоящееДействие));
				
				ОбновитьПодзадачиУзла(
					УзелВышестоящегоДействия.Строки,
					ДанныеПодзадачУзла,
					ДанныеДействийПодзадачУзла,
					ЭтоПервыйУровень);
					
			КонецЦикла;
			
		КонецЕсли;
		
		ДействияТекущегоУровня = ДействияСледующегоУровня;
		ЭтоПервыйУровень = Ложь;
		
	КонецЦикла;
	
	Для Каждого СтрокаДереваПодзадач Из ДеревоПодзадач.Строки Цикл
		ДанныеСтрокиДереваПодзадач = ДанныеСтрокиДереваПодзадач(СтрокаДереваПодзадач);
		ДанныеДереваПодзадач.Добавить(ДанныеСтрокиДереваПодзадач);
	КонецЦикла;
	
	Возврат ДанныеДереваПодзадач;
	
КонецФункции

// Формирует данные строки дерева подзадач.
// 
// Параметры:
//  СтрокаДереваПодзадач - СтрокаДереваЗначений
// 
// Возвращаемое значение:
//  См. РаботаСЗадачами.НовыеДанныеСтрокиДереваПодзадач
// 
Функция ДанныеСтрокиДереваПодзадач(СтрокаДереваПодзадач) Экспорт
	
	ДанныеСтрокиДереваПодзадач = НовыеДанныеСтрокиДереваПодзадач();
	ДанныеСтрокиДереваПодзадач.КлючСтроки = СтрокаДереваПодзадач.КлючСтроки;
	ДанныеСтрокиДереваПодзадач.Представление = СтрокаДереваПодзадач.Представление;
	ДанныеСтрокиДереваПодзадач.Задача = СтрокаДереваПодзадач.Задача;
	ДанныеСтрокиДереваПодзадач.ДействиеЗадачи = СтрокаДереваПодзадач.ДействиеЗадачи;
	ДанныеСтрокиДереваПодзадач.Срок = СтрокаДереваПодзадач.Срок;
	ДанныеСтрокиДереваПодзадач.СостояниеЗадачи = СтрокаДереваПодзадач.СостояниеЗадачи;
	ДанныеСтрокиДереваПодзадач.СостояниеУчастникаЗадачи = СтрокаДереваПодзадач.СостояниеУчастникаЗадачи;
	ДанныеСтрокиДереваПодзадач.ЕстьПриложения = СтрокаДереваПодзадач.ЕстьПриложения;
	ДанныеСтрокиДереваПодзадач.Участник = СтрокаДереваПодзадач.Участник;
	ДанныеСтрокиДереваПодзадач.РезультатДействияТекстом = СтрокаДереваПодзадач.РезультатДействияТекстом;
	ДанныеСтрокиДереваПодзадач.Заголовок = СтрокаДереваПодзадач.Заголовок;
	ДанныеСтрокиДереваПодзадач.ИндексКартинкиСостояния = СтрокаДереваПодзадач.ИндексКартинкиСостояния;
	ДанныеСтрокиДереваПодзадач.ЭтоВыполненнаяЗадача = СтрокаДереваПодзадач.ЭтоВыполненнаяЗадача;
	ДанныеСтрокиДереваПодзадач.ЭтоПервыйУровень = СтрокаДереваПодзадач.ЭтоПервыйУровень;
	ДанныеСтрокиДереваПодзадач.ВозможенВозвратНаДоработку = СтрокаДереваПодзадач.ВозможенВозвратНаДоработку;
	
	Для Каждого ПодчиненнаяСтрокаДереваПодзадач Из СтрокаДереваПодзадач.Строки Цикл
		ДанныеПодчиненнойСтрокиДереваПодзадач = ДанныеСтрокиДереваПодзадач(ПодчиненнаяСтрокаДереваПодзадач);
		ДанныеСтрокиДереваПодзадач.Строки.Добавить(ДанныеПодчиненнойСтрокиДереваПодзадач);
	КонецЦикла;
	
	Возврат ДанныеСтрокиДереваПодзадач;
	
КонецФункции

// Формирует пустую структуру данных строки дерева подзадач.
// 
// Возвращаемое значение:
//  Структура:
//   * КлючСтроки - Неопределено
//                - ДокументСсылка.Задача
//                - ДокументСсылка.ДействиеЗадачи
//                - см. ОпределяемыйТип.УчастникЗадач
//   * Строки - Массив из см. РаботаСЗадачами.НовыеДанныеСтрокиДереваПодзадач
//   * Представление - Строка
//   * Задача - ДокументСсылка.Задача
//   * ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
//   * Срок - Дата
//   * СостояниеЗадачи - СправочникСсылка.СостоянияЗадач
//   * СостояниеУчастникаЗадачи - СправочникСсылка.СостоянияУчастниковЗадач
//   * ЕстьПриложения - Булево
//   * Участник - см. ОпределяемыйТип.УчастникЗадач
//   * РезультатДействияТекстом - Строка
//   * Заголовок - Строка
//   * ИндексКартинкиСостояния - Число
//   * ЭтоВыполненнаяЗадача - Булево
//   * ЭтоПервыйУровень - Булево
//   * ВозможенВозвратНаДоработку - Булево
// 
Функция НовыеДанныеСтрокиДереваПодзадач() Экспорт
	
	ДанныеСтрокиДереваПодзадач = Новый Структура;
	ДанныеСтрокиДереваПодзадач.Вставить("КлючСтроки", Неопределено);
	ДанныеСтрокиДереваПодзадач.Вставить("Строки", Новый Массив);
	
	ДанныеСтрокиДереваПодзадач.Вставить("Представление", "");
	ДанныеСтрокиДереваПодзадач.Вставить("Задача", Документы.Задача.ПустаяСсылка());
	ДанныеСтрокиДереваПодзадач.Вставить("ДействиеЗадачи", Документы.ДействиеЗадачи.ПустаяСсылка());
	ДанныеСтрокиДереваПодзадач.Вставить("Срок", Дата(1, 1, 1));
	ДанныеСтрокиДереваПодзадач.Вставить("СостояниеЗадачи", Справочники.СостоянияЗадач.ПустаяСсылка());
	ДанныеСтрокиДереваПодзадач.Вставить("СостояниеУчастникаЗадачи",
		Справочники.СостоянияУчастниковЗадач.ПустаяСсылка());
	ДанныеСтрокиДереваПодзадач.Вставить("ЕстьПриложения", Ложь);
	ДанныеСтрокиДереваПодзадач.Вставить("Участник", Справочники.Сотрудники.ПустаяСсылка());
	ДанныеСтрокиДереваПодзадач.Вставить("РезультатДействияТекстом", "");
	ДанныеСтрокиДереваПодзадач.Вставить("Заголовок", "");
	ДанныеСтрокиДереваПодзадач.Вставить("ИндексКартинкиСостояния", 0);
	ДанныеСтрокиДереваПодзадач.Вставить("ЭтоВыполненнаяЗадача", Ложь);
	ДанныеСтрокиДереваПодзадач.Вставить("ЭтоПервыйУровень", Ложь);
	ДанныеСтрокиДереваПодзадач.Вставить("ВозможенВозвратНаДоработку", Ложь);
	
	Возврат ДанныеСтрокиДереваПодзадач;
	
КонецФункции

// Формирует данные дерева соисполнителей.
//
// Параметры:
//  Задача - ДокументСсылка.Задача
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
// 
// Возвращаемое значение:
//  Массив из см. РаботаСЗадачами.НовыеДанныеСтрокиДереваСоисполнителей
//
Функция ДанныеДереваСоисполнителей(Задача, ДействиеЗадачи) Экспорт
	
	ДанныеДереваСоисполнителей = Новый Массив;
	Если Не ЗначениеЗаполнено(Задача) Тогда
		Возврат ДанныеДереваСоисполнителей;
	КонецЕсли;
	
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	ДеревоСоисполнителей = Новый ДеревоЗначений;
	ДеревоСоисполнителей.Колонки.Добавить("КлючСтроки");
	ДеревоСоисполнителей.Колонки.Добавить("ВыделятьЖирным", ОписаниеТиповБулево);
	ДеревоСоисполнителей.Колонки.Добавить("ДействиеЗадачи");
	ДеревоСоисполнителей.Колонки.Добавить("ЕстьПриложения", ОписаниеТиповБулево);
	ДеревоСоисполнителей.Колонки.Добавить("ИндексКартинкиСостояния");
	ДеревоСоисполнителей.Колонки.Добавить("КлючИсполнителя");
	ДеревоСоисполнителей.Колонки.Добавить("Представление");
	ДеревоСоисполнителей.Колонки.Добавить("Этап");
	ДеревоСоисполнителей.Колонки.Добавить("ЭтоОтветственный", ОписаниеТиповБулево);
	
	СтрокиДерева = ДеревоСоисполнителей.Строки;
	
	ДанныеСоисполнителей = ДанныеСоисполнителей(Задача, ДействиеЗадачи, "Дерево");
	
	// Этапы.
	ЭтапыКОбработке = Новый Массив;
	СтрокиЭтаповПоКлючам = Новый Соответствие;
	Для Каждого ДанныеЭтапа Из ДанныеСоисполнителей.Этапы Цикл
		
		ЭтапыКОбработке.Добавить(ДанныеЭтапа.Этап);
		
		СтрокаДерева = СтрокиДерева.Добавить();
		СтрокаДерева.КлючСтроки = ДанныеЭтапа.Этап;
		СтрокаДерева.Этап = ДанныеЭтапа.Этап;
		
		СтрокиЭтаповПоКлючам[СтрокаДерева.Этап] = СтрокаДерева;
		
		СтрокаДерева.ВыделятьЖирным = Истина;
		СтрокаДерева.Представление = ДанныеЭтапа.Представление;
		СтрокаДерева.ИндексКартинкиСостояния = ДанныеЭтапа.ИндексКартинкиСостояния;
		
	КонецЦикла;
	
	// Соисполнители.
	Если ЭтапыКОбработке.Количество() = 0 И ДанныеСоисполнителей.СоисполнителиПоЭтапам.Количество() = 1 Тогда
		ЭтапыКОбработке.Добавить(УникальныйИдентификаторПустой());
	КонецЕсли;
	
	Для Каждого Этап Из ЭтапыКОбработке Цикл
		
		Для Каждого ДанныеИсполнителя Из ДанныеСоисполнителей.СоисполнителиПоЭтапам[Этап] Цикл
			
			Если ЗначениеЗаполнено(Этап) Тогда
				
				СтрокаДерева = СтрокиЭтаповПоКлючам[Этап];
				Если СтрокаДерева = Неопределено Тогда
					ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найдена строка этапа %1.'"), Этап);
				КонецЕсли;
				
				СтрокиВетви = СтрокаДерева.Строки;
				
			Иначе
				
				СтрокиВетви = СтрокиДерева;
				
			КонецЕсли;
			
			СтрокаВетви = СтрокиВетви.Добавить();
			СтрокаВетви.КлючСтроки = ДанныеИсполнителя.КлючИсполнителя;
			СтрокаВетви.Этап = Этап;
			СтрокаВетви.КлючИсполнителя = ДанныеИсполнителя.КлючИсполнителя;
			
			СтрокаВетви.ДействиеЗадачи = ДанныеИсполнителя.ДействиеЗадачи;
			СтрокаВетви.Представление = ДанныеИсполнителя.Представление;
			СтрокаВетви.ИндексКартинкиСостояния = ДанныеИсполнителя.ИндексКартинкиСостояния;
			СтрокаВетви.ЕстьПриложения = ДанныеИсполнителя.ЕстьПриложения;
			СтрокаВетви.ЭтоОтветственный = ДанныеИсполнителя.ЭтоОтветственный;
			
			// Подчиненные строки.
			СтрокиПодчиненных = СтрокаВетви.Строки;
			Для Каждого ДанныеПодчиненного Из ДанныеИсполнителя.ДанныеПодчиненных Цикл
				
				СтрокаПодчиненного = СтрокиПодчиненных.Добавить();
				СтрокаПодчиненного.КлючСтроки = ДанныеПодчиненного.КлючИсполнителя;
				СтрокаПодчиненного.Этап = Этап;
				СтрокаПодчиненного.КлючИсполнителя = ДанныеПодчиненного.КлючИсполнителя;
				
				СтрокаПодчиненного.ДействиеЗадачи = ДанныеПодчиненного.ДействиеЗадачи;
				СтрокаПодчиненного.Представление = ДанныеПодчиненного.Представление;
				СтрокаПодчиненного.ИндексКартинкиСостояния = ДанныеПодчиненного.ИндексКартинкиСостояния;
				СтрокаПодчиненного.ЕстьПриложения = ДанныеПодчиненного.ЕстьПриложения;
				СтрокаПодчиненного.ЭтоОтветственный = ДанныеПодчиненного.ЭтоОтветственный;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого СтрокаДереваСоисполнителей Из ДеревоСоисполнителей.Строки Цикл
		ДанныеСтрокиДереваСоисполнителей = ДанныеСтрокиДереваСоисполнителей(СтрокаДереваСоисполнителей);
		ДанныеДереваСоисполнителей.Добавить(ДанныеСтрокиДереваСоисполнителей);
	КонецЦикла;
	
	Возврат ДанныеДереваСоисполнителей;
	
КонецФункции

// Формирует данные строки дерева подзадач.
// 
// Параметры:
//  СтрокаДереваСоисполнителей - СтрокаДереваЗначений
// 
// Возвращаемое значение:
//  См. РаботаСЗадачами.НовыеДанныеСтрокиДереваСоисполнителей
// 
Функция ДанныеСтрокиДереваСоисполнителей(СтрокаДереваСоисполнителей) Экспорт
	
	ДанныеСтрокиДереваСоисполнителей = НовыеДанныеСтрокиДереваСоисполнителей();
	ДанныеСтрокиДереваСоисполнителей.КлючСтроки = СтрокаДереваСоисполнителей.КлючСтроки;
	ДанныеСтрокиДереваСоисполнителей.ВыделятьЖирным = СтрокаДереваСоисполнителей.ВыделятьЖирным;
	ДанныеСтрокиДереваСоисполнителей.ДействиеЗадачи = СтрокаДереваСоисполнителей.ДействиеЗадачи;
	ДанныеСтрокиДереваСоисполнителей.ЕстьПриложения = СтрокаДереваСоисполнителей.ЕстьПриложения;
	ДанныеСтрокиДереваСоисполнителей.ИндексКартинкиСостояния = СтрокаДереваСоисполнителей.ИндексКартинкиСостояния;
	ДанныеСтрокиДереваСоисполнителей.КлючИсполнителя = СтрокаДереваСоисполнителей.КлючИсполнителя;
	ДанныеСтрокиДереваСоисполнителей.Представление = СтрокаДереваСоисполнителей.Представление;
	ДанныеСтрокиДереваСоисполнителей.Этап = СтрокаДереваСоисполнителей.Этап;
	ДанныеСтрокиДереваСоисполнителей.ЭтоОтветственный = СтрокаДереваСоисполнителей.ЭтоОтветственный;
	
	Для Каждого ПодчиненнаяСтрокаДереваСоисполнителей Из СтрокаДереваСоисполнителей.Строки Цикл
		ДанныеПодчиненнойСтрокиДереваСоисполнителей =
			ДанныеСтрокиДереваСоисполнителей(ПодчиненнаяСтрокаДереваСоисполнителей);
		ДанныеСтрокиДереваСоисполнителей.Строки.Добавить(ДанныеПодчиненнойСтрокиДереваСоисполнителей);
	КонецЦикла;
	
	Возврат ДанныеСтрокиДереваСоисполнителей;
	
КонецФункции

// Формирует пустую структуру данных строки дерева подзадач.
// 
// Возвращаемое значение:
//  Структура:
//   * КлючСтроки - Неопределено
//                - УникальныйИдентификатор
//                - ДокументСсылка.ДействиеЗадачи
//   * Строки - Массив из см. РаботаСЗадачами.НовыеДанныеСтрокиДереваПодзадач
//   * ВыделятьЖирным - Булево
//   * ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
//   * ЕстьПриложения - Булево
//   * ИндексКартинкиСостояния - Число
//   * КлючИсполнителя - ДокументСсылка.ДействиеЗадачи
//                     - УникальныйИдентификатор
//   * Представление - Строка
//   * Этап - УникальныйИдентификатор
//   * ЭтоОтветственный - Булево
// 
Функция НовыеДанныеСтрокиДереваСоисполнителей() Экспорт
	
	ДанныеСтрокиДереваСоисполнителей = Новый Структура;
	ДанныеСтрокиДереваСоисполнителей.Вставить("КлючСтроки", Неопределено);
	ДанныеСтрокиДереваСоисполнителей.Вставить("Строки", Новый Массив);
	
	ДанныеСтрокиДереваСоисполнителей.Вставить("ВыделятьЖирным", Ложь);
	ДанныеСтрокиДереваСоисполнителей.Вставить("ДействиеЗадачи", Документы.ДействиеЗадачи.ПустаяСсылка());
	ДанныеСтрокиДереваСоисполнителей.Вставить("ЕстьПриложения", Ложь);
	ДанныеСтрокиДереваСоисполнителей.Вставить("ИндексКартинкиСостояния", 0);
	ДанныеСтрокиДереваСоисполнителей.Вставить("КлючИсполнителя", Документы.ДействиеЗадачи.ПустаяСсылка());
	ДанныеСтрокиДереваСоисполнителей.Вставить("Представление", "");
	ДанныеСтрокиДереваСоисполнителей.Вставить("Этап", УникальныйИдентификаторПустой());
	ДанныеСтрокиДереваСоисполнителей.Вставить("ЭтоОтветственный", Ложь);
	
	Возврат ДанныеСтрокиДереваСоисполнителей;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Проверяет актуальность версии данных действия задачи перед выполнением
// 
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
//  ВерсииДанных - Соответствие из КлючИЗначение
//  РеквизитыДействия - Структура:
//   * Задача - ДокументСсылка.Задача
//   * Источник - ОпределяемыйТип.ИсточникДействийЗадач
//   * Исполнитель - ОпределяемыйТип.УчастникЗадач
//   * ВерсияДанных - Строка - Текущая версия данных задачи
//  ДанныеВыполнения - см. РаботаСЗадачамиКлиентСервер.НовыйДанныеВыполненияДействийЗадач
// 
Процедура ПередИнтерактивнымВыполнениемДействияПроверкаВерсииДанных(ДействиеЗадачи,
	ВерсииДанных, РеквизитыДействия, ДанныеВыполнения) Экспорт
	
	ВерсияДанных = ВерсииДанных[ДействиеЗадачи];
	
	Если РеквизитыДействия.ВерсияДанных <> ВерсияДанных Тогда
		ДанныеВыполнения.ВерсииДанныхРазличаются = Истина;
		ДанныеВыполнения.ТребуетсяИнтерактивноеДействие = Истина;
	КонецЕсли;

КонецПроцедуры

// Представление действия в дереве.
// 
// Параметры:
//  СтрокаДанныеДействия - СтрокаТаблицыЗначений
//  КоличествоДействийПоЗадаче - Число
//  ЗадачаДоступна - Булево
//  ВидУчастника - СправочникСсылка.ВидыУчастниковЗадач
//  ФактическийИсполнитель - СправочникСсылка.ФактическиеИсполнители
// 
// Возвращаемое значение:
//  Строка - Представление действия в дереве.
//
Функция ПредставлениеДействияВДереве(СтрокаДанныеДействия, КоличествоДействийПоЗадаче, ЗадачаДоступна, ВидУчастника, ФактическийИсполнитель) Экспорт
	
	МассивПредставление = Новый Массив;
	
	Если ЗначениеЗаполнено(ФактическийИсполнитель) Тогда
		ПредставлениеУчастника = Строка(ФактическийИсполнитель);
	Иначе
		ДатаСозданияЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДанныеДействия.Задача, "ДатаСоздания");
		ПредставлениеУчастника = 
			Сотрудники.ПредставлениеСотрудникаНаДату(СтрокаДанныеДействия.Участник, ДатаСозданияЗадачи);
	КонецЕсли;
	
	Если СтрокаДанныеДействия.ЭтоОтветственный И КоличествоДействийПоЗадаче > 1 Тогда
		
		МассивПредставление.Добавить(
			СтрШаблон(
				"%1 (%2)",
				ПредставлениеУчастника,
				НСтр("ru = 'отв.'")));
				
	ИначеЕсли ВидУчастника = Справочники.ВидыУчастниковЗадач.ОтКого Тогда
		
		МассивПредставление.Добавить(
			СтрШаблон(
				"%1 (%2)",
				ПредставлениеУчастника,
				НСтр("ru = 'обрабатывающий результат'")));
				
	ИначеЕсли СтрокаДанныеДействия.ЭтоПроверяющий Тогда
		
		МассивПредставление.Добавить(
			СтрШаблон(
				"%1 (%2)",
				ПредставлениеУчастника,
				НСтр("ru = 'проверяющий'")));
				
	Иначе
		
		МассивПредставление.Добавить(ПредставлениеУчастника);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанныеДействия.РезультатДействияТекстом) Тогда
		
		ПредставлениеРезультата =
			?(ЗадачаДоступна,
				СтрокаДанныеДействия.РезультатДействияТекстом,
				НСтр("ru = 'Отчет об исполнении скрыт'"));
		
		МассивПредставление.Добавить(ПредставлениеРезультата);
		
	КонецЕсли;
	
	ПредставлениеДействия = СтрСоединить(МассивПредставление, ", ");
	
	Возврат ПредставлениеДействия;
	
КонецФункции

// Проверяетть права на приложения, если нет прав - вызывает исключение.
// 
// Параметры:
//  ПриложенияДляПроверки - Массив из ОпределяемыйТип.ПриложениеЗадач.
//  УчастникиДляПроверки - Массив из ОпределяемыйТип.УчастникЗадач.
//
Процедура ПроверитьПраваНаПриложения(ПриложенияДляПроверки, УчастникиДляПроверки) Экспорт
	
	Если ПриложенияДляПроверки.Количество() = 0 Или УчастникиДляПроверки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СотрудникиДляПроверкиПрав = Новый Массив;
	РолиДляПроверки = Новый Массив;
	КонтейнерыДляПроверки = Новый Массив;
	Для Каждого УчастникДляПроверки Из УчастникиДляПроверки Цикл
		
		ТипУчастника = ТипЗнч(УчастникДляПроверки);
		Если ТипУчастника = Тип("СправочникСсылка.Сотрудники") Тогда
			СотрудникиДляПроверкиПрав.Добавить(УчастникДляПроверки);
		ИначеЕсли ТипУчастника = Тип("СправочникСсылка.ПолныеРоли") Тогда	
			РолиДляПроверки.Добавить(УчастникДляПроверки);
		ИначеЕсли Метаданные.ОпределяемыеТипы.КонтейнерПользователей.Тип.СодержитТип(ТипУчастника) Тогда	
			КонтейнерыДляПроверки.Добавить(УчастникДляПроверки);
		Иначе
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный тип участника %1 (%2).'"),
				УчастникДляПроверки,
				ТипЗнч(УчастникДляПроверки));
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИсполнителиРолей = РегистрыСведений.ИсполнителиРолей.ИсполнителиРолей(РолиДляПроверки);
	Для Каждого Роль Из РолиДляПроверки Цикл
		
		ИсполнителиРоли = ИсполнителиРолей[Роль];
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СотрудникиДляПроверкиПрав,
			ИсполнителиРоли,
			Истина);
		
	КонецЦикла;
	
	СотрудникиВКонтейнерах =
		РегистрыСведений.СотрудникиВКонтейнерах.СотрудникиВКонтейнерах(КонтейнерыДляПроверки);
	Для Каждого КонтейнерДляПроверки Из КонтейнерыДляПроверки Цикл
		
		СотрудникиВКонтейнере = СотрудникиВКонтейнерах[КонтейнерДляПроверки];
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СотрудникиДляПроверкиПрав,
			СотрудникиВКонтейнере,
			Истина);
		
	КонецЦикла;
	
	НормированныеПриложенияДляПроверки = Новый Массив;
	Для Каждого ПриложениеДляПроверки Из ПриложенияДляПроверки Цикл
		
		Если ТипЗнч(ПриложениеДляПроверки) = Тип("СправочникСсылка.ПротоколыМероприятий") Тогда
			НормированноеПриложение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ПриложениеДляПроверки,
				"Владелец");
		Иначе
			НормированноеПриложение = ПриложениеДляПроверки;
		КонецЕсли;
		
		НормированныеПриложенияДляПроверки.Добавить(НормированноеПриложение);
		
	КонецЦикла;
	
	ПраваСотрудниковПоОбъектам = ДокументооборотПраваДоступа.ПраваСотрудниковПоОбъектам(
		НормированныеПриложенияДляПроверки,
		Истина,
		СотрудникиДляПроверкиПрав);
	
	ЕстьУчастникиБезПрав = Ложь;
	Для Каждого ПриложениеДляПроверки Из НормированныеПриложенияДляПроверки Цикл
		
		ЕстьУчастникиБезПравНаПриложение =
			ПроверитьПраваНаПриложение(
				УчастникиДляПроверки,
				ПраваСотрудниковПоОбъектам,
				ИсполнителиРолей,
				ПриложениеДляПроверки,
				СотрудникиВКонтейнерах);
		
		ЕстьУчастникиБезПрав = ЕстьУчастникиБезПрав Или ЕстьУчастникиБезПравНаПриложение;
		
	КонецЦикла;
	
	Если ЕстьУчастникиБезПрав Тогда
		
		ВызватьИсключение НСтр("ru = 'Не у всех участников задачи есть права на приложения.'");
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет количество действий по задачам.
// 
// Параметры:
//  АктивныеДействияПоЗадачам - ТаблицаЗначений - См. Документы.ДействиеЗадачи.АктивныеДействияПоЗадачам().
//  ЗадачиТекущегоУровня - Массив из ДокументСсылка.Задача.
//  РеквизитыЗадач - Соответствие.
//  ЭтоОжидающиеПроверкиЗадачи - Соответствие.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//   * Ключ - ДокументСсылка.Задача
//   * Значение - Число
//
Функция КоличествоДействийПоЗадачам(
	АктивныеДействияПоЗадачам,
	ЗадачиТекущегоУровня,
	РеквизитыЗадач,
	ЭтоОжидающиеПроверкиЗадачи) Экспорт
	
	КоличествоДействийПоЗадачам = Новый Соответствие;
	Для Каждого СтрокаДействия Из АктивныеДействияПоЗадачам Цикл
		
		Если ЗадачиТекущегоУровня.Найти(СтрокаДействия.Задача) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитыЗадачи = РеквизитыЗадач[СтрокаДействия.Задача];
		Если РеквизитыЗадачи = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаУчастника = РеквизитыЗадачи.Участники.Найти(
			СтрокаДействия.ДействиеЗадачи,
			"ДействиеУчастника");
		Если СтрокаУчастника = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоОжидающаяПроверкиЗадача = ЭтоОжидающиеПроверкиЗадачи[СтрокаДействия.Задача];
		Если Не ЭтоОжидающаяПроверкиЗадача
			И РаботаСЗадачамиПовтИсп.ЭтоПроверяющий(СтрокаУчастника.ВидУчастника) Тогда
			Продолжить;
		КонецЕсли;
		
		Если КоличествоДействийПоЗадачам[СтрокаДействия.Задача] = Неопределено Тогда
			КоличествоДействийПоЗадачам[СтрокаДействия.Задача] = 0;
		КонецЕсли;
		КоличествоДействийПоЗадачам[СтрокаДействия.Задача] =
			КоличествоДействийПоЗадачам[СтрокаДействия.Задача] + 1;
		
	КонецЦикла;
	
	Возврат КоличествоДействийПоЗадачам;
	
КонецФункции

// Проверяет, что строка содержит только допустимые символы.
//
// Параметры:
//  Строка - Строка.
//  ДопустимыеСимволы - Строка.
// 
// Возвращаемое значение:
//  Булево - Строка содержит только допустимые символы.
//
Функция СтрокаСодержитТолькоДопустимыеСимволы(Строка, ДопустимыеСимволы) Экспорт
	
	ВсеДопустимыеСимволы = Новый Соответствие;
	Для Позиция = 1 По СтрДлина(ДопустимыеСимволы) Цикл
		ВсеДопустимыеСимволы[Сред(ДопустимыеСимволы, Позиция, 1)] = Истина;
	КонецЦикла;
	
	Для Позиция = 1 По СтрДлина(Строка) Цикл
		Если ВсеДопустимыеСимволы[Сред(Строка, Позиция, 1)] = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует данные соисполнителей.
// 
// Возвращаемое значение:
//  Массив из см. РаботаСЗадачами.ДанныеУчастника
//
Функция ДанныеУчастников(ДействиеЗадачи)
	
	ДанныеУчастников = Новый Массив;
	
	Задача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеЗадачи, "Задача");
	Участники = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "Участники");
	Участники = Участники.Выгрузить();
	Участники.Сортировать("НомерСтроки Возр");
	
	ВсеДействияУчастников = Новый Массив;
	Для Каждого СтрокаУчастника Из Участники Цикл
		ВсеДействияУчастников.Добавить(СтрокаУчастника.ДействиеУчастника);
		
	КонецЦикла;
	
	ЭтоВыполненныеДействия = ЭтоВыполненныеДействия(ВсеДействияУчастников);
	
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		ДанныеУчастника = ДанныеУчастника();
		ДанныеУчастника.ВидУчастника = СтрокаУчастника.ВидУчастника;
		ДанныеУчастника.Выполнил = ЭтоВыполненныеДействия[СтрокаУчастника.ДействиеУчастника];
		ДанныеУчастника.Участник = СтрокаУчастника.Участник;
		ДанныеУчастника.ДействиеУчастника = СтрокаУчастника.ДействиеУчастника;
		ДанныеУчастника.ЭтоОтветственный = РаботаСЗадачамиПовтИсп.ЭтоОтветственный(СтрокаУчастника.ВидУчастника);
		ДанныеУчастника.ЭтоПроверяющий = РаботаСЗадачамиПовтИсп.ЭтоПроверяющий(СтрокаУчастника.ВидУчастника);
		ДанныеУчастника.ЭтоИсполнитель = РаботаСЗадачамиПовтИсп.ЭтоИсполнитель(СтрокаУчастника.ВидУчастника);
		
		ДанныеУчастников.Добавить(ДанныеУчастника);
		
	КонецЦикла;
	
	Возврат ДанныеУчастников;
	
КонецФункции

// Формирует данные другого участника.
// 
// Возвращаемое значение:
//  Структура:
//   * ВидУчастника - СправочникСсылка.ВидыУчастниковЗадач
//   * Выполнил - Булево
//   * Участник - ОпределяемыйТип.УчастникЗадач
//              - Неопределено
//   * ДействиеУчастника - ДокументСсылка.ДействиеЗадачи
//   * ЭтоОтветственный - Булево
//   * ЭтоПроверяющий - Булево
//   * ЭтоИсполнитель - Булево
//
Функция ДанныеУчастника()
	
	ДанныеУчастника = Новый Структура;
	ДанныеУчастника.Вставить("ВидУчастника", Справочники.ВидыУчастниковЗадач.ПустаяСсылка());
	ДанныеУчастника.Вставить("Выполнил", Ложь);
	ДанныеУчастника.Вставить("Участник", Неопределено);
	ДанныеУчастника.Вставить("ДействиеУчастника", Документы.ДействиеЗадачи.ПустаяСсылка());
	ДанныеУчастника.Вставить("ЭтоОтветственный", Ложь);
	ДанныеУчастника.Вставить("ЭтоПроверяющий", Ложь);
	ДанныеУчастника.Вставить("ЭтоИсполнитель", Ложь);
	
	Возврат ДанныеУчастника;
	
КонецФункции

// Определяет, доступна ли отмена выполнения.
//
// Параметры:
//   ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи - текущее действие задачи.
//                  - СтрокаТаблицыЗначений - см. ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗапросСОтборами
//   КешДанных - Структура - кеш данных, который требуется для ускорения работы различных механизмов.
//
// Возвращаемое значение:
//   Булево - доступна отмена выполнения.
//
Функция ДоступнаОтменаВыполнения(ДействиеЗадачи, КешДанных = Неопределено)
	
	ДоступнаОтменаВыполнения = ИнтеграцияЗадач.ДоступнаОтменаВыполнения(ДействиеЗадачи, КешДанных);
	
	Если ДоступнаОтменаВыполнения <> Неопределено Тогда
		Возврат ДоступнаОтменаВыполнения;
	КонецЕсли;
	
	ДоступнаОтменаВыполнения = Ложь;
	
	Если ТипЗнч(ДействиеЗадачи) = Тип("СтрокаТаблицыЗначений") Тогда
		РеквизитыДействия = ДействиеЗадачи;
	Иначе
		РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДействиеЗадачи,
			"Ссылка, ВидДействия, Задача, СостояниеУчастникаЗадачи, Источник");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыДействия.Источник) Тогда
		Возврат ДоступнаОтменаВыполнения;
	КонецЕсли;
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		РеквизитыДействия.Задача,
		"ВидЗадачи, СостояниеЗадачи, Источник, Участники");
	Участники = РеквизитыЗадачи.Участники.Выгрузить();
	Участники.Сортировать("НомерСтроки Возр");
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(РеквизитыЗадачи.ВидЗадачи);
	
	Если ЗначениеЗаполнено(РеквизитыЗадачи.Источник)
		Или РеквизитыЗадачи.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиОтменена
		Или РеквизитыЗадачи.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиОтложена Тогда
		Возврат ДоступнаОтменаВыполнения;
	КонецЕсли;
	
	ЭтоИсторическоеДействиеЗадачи =
		Документы.Задача.ЭтоИсторическоеДействиеЗадачи(РеквизитыДействия.Ссылка);
	Если ЭтоИсторическоеДействиеЗадачи Тогда
		Возврат ДоступнаОтменаВыполнения;
	КонецЕсли;
	
	Если РеквизитыДействия.ВидДействия = ДанныеВидаЗадачи.ВидДействияИсполнителя
		И ((ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверки)
				И РеквизитыДействия.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверки)
			Или (ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиОтрицательно)
				И РеквизитыДействия.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиОтрицательно)
			Или (ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиСЗамечаниями)
				И РеквизитыДействия.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиСЗамечаниями)) Тогда
		
		// Исполнитель может отменить выполнение своей задачи, в любой момент, после того как выполнил.
		// Если задача была на проверке – то она будет снята с проверки.
		ДоступнаОтменаВыполнения = Истина;
		
	ИначеЕсли РеквизитыДействия.ВидДействия = ДанныеВидаЗадачи.ВидДействияИсполнителя
		И (РеквизитыДействия.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковВыполнена
			Или (ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковВыполненаОтрицательно)
				И РеквизитыДействия.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковВыполненаОтрицательно)
			Или (ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковВыполненаСЗамечаниями)
				И РеквизитыДействия.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковВыполненаСЗамечаниями)) Тогда
		
		// Исполнитель может отменить выполнение своей задачи, в любой момент, после того как выполнил.
		// Если задача была проверена – то исполнитель не может отменить её выполнение.
		СтрокаПроверяющего = Участники.Найти(
			ДанныеВидаЗадачи.ВидУчастникаПроверяющий,
			"ВидУчастника");
		Если СтрокаПроверяющего = Неопределено Тогда
			ДоступнаОтменаВыполнения = Истина;
		КонецЕсли;
		
	ИначеЕсли РеквизитыДействия.ВидДействия = ДанныеВидаЗадачи.ВидДействияПроверяющего
		И РеквизитыДействия.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковПроверено Тогда
		
		// Проверяющий может отменить выполнение своей задачи, в любой момент, после того как выполнил её с результатом «Проверено».
		// Отменить выполнение своей задачи с результатом «Возвращено на доработку» он не сможет.
		ДоступнаОтменаВыполнения = Истина;
		
	КонецЕсли;
	
	Возврат ДоступнаОтменаВыполнения;
	
КонецФункции

// Определяет индекс картинки состояния из коллекции "КоллекцияСостоянияЗадач".
//
// Параметры:
//  ВидСостояния - ПеречислениеСсылка.ВидыСостоянийЗадач.
//  ПросроченаИОжидаетВыполнения - Булево.
// 
// Возвращаемое значение:
//  Число - Индекс картинки состояния из коллекции "КоллекцияСостоянияЗадач".
//
Функция ИндексКартинкиСостоянияЗадачи(ВидСостояния, ПросроченаИОжидаетВыполнения)
	
	Если Перечисления.ВидыСостоянийЗадач.ЭтоОжидающаяВыполненияЗадача(ВидСостояния)
		И ПросроченаИОжидаетВыполнения Тогда
		
		ИндексКартинкиСостояния = 4;
		
	Иначе
		
		ИндексКартинкиСостояния =
			Перечисления.ВидыСостоянийЗадач.ИндексКартинкиСостояния(ВидСостояния);
		
	КонецЕсли;
	
	Возврат ИндексКартинкиСостояния;
	
КонецФункции

// Определяет индекс картинки состояния из коллекции "КоллекцияСостоянияЗадач".
//
// Параметры:
//  ВидСостояния - ПеречислениеСсылка.ВидыСостоянийУчастниковЗадач.
//  ПросроченаИОжидаетВыполнения - Булево.
// 
// Возвращаемое значение:
//  Число - Индекс картинки состояния из коллекции "КоллекцияСостоянияЗадач".
//
Функция ИндексКартинкиСостоянияУчастникаЗадачи(ВидСостояния, ПросроченаИОжидаетВыполнения)
	
	Если Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОжидаемоеДействие(ВидСостояния)
		И ПросроченаИОжидаетВыполнения Тогда
		
		ИндексКартинкиСостояния = 4;
		
	Иначе
		
		ИндексКартинкиСостояния =
			Перечисления.ВидыСостоянийУчастниковЗадач.ИндексКартинкиСостояния(ВидСостояния);
		
	КонецЕсли;
	
	Возврат ИндексКартинкиСостояния;
	
КонецФункции

// Определяет картинку промежуточного узла жизненного цикла.
//
// Параметры:
//  ХарактерЭтогоУзла - ПеречислениеСсылка.ХарактерыРезультатов - Характер результата этого узла.
//  ХарактерСледующегоУзла - ПеречислениеСсылка.ХарактерыРезультатов - Характер результата следующего узла.
//  ЭтоПервыйЭлемент - Булево - Это первый элемент в схеме жизненного цикла.
//  ЭтоПоследнийЭлемент - Булево - Это последний элемент в схеме жизненного цикла.
// 
// Возвращаемое значение:
//  Картинка - Картинка промежуточного узла жизненного цикла.
//
Функция КартинкаПромежуточногоУзлаЖизненногоЦикла(ХарактерЭтогоУзла, ХарактерСледующегоУзла, ЭтоПервыйЭлемент, ЭтоПоследнийЭлемент)
	
	Если ЭтоПервыйЭлемент
		И ХарактерЭтогоУзла = Перечисления.ХарактерыРезультатов.Нейтральный Тогда
		
		Возврат БиблиотекаКартинок.НачальныйУзелЖизненногоЦиклаСерый;
		
	ИначеЕсли ЭтоПервыйЭлемент
		И ХарактерЭтогоУзла = Перечисления.ХарактерыРезультатов.Положительный
		И ХарактерСледующегоУзла = Перечисления.ХарактерыРезультатов.Нейтральный Тогда
		
		Возврат БиблиотекаКартинок.НачальныйУзелЖизненногоЦиклаЗеленыйСерый;
		
	ИначеЕсли ЭтоПервыйЭлемент
		И ХарактерЭтогоУзла = Перечисления.ХарактерыРезультатов.Положительный Тогда
		
		Возврат БиблиотекаКартинок.НачальныйУзелЖизненногоЦиклаЗеленый;
		
	ИначеЕсли ЭтоПервыйЭлемент
		И ХарактерЭтогоУзла = Перечисления.ХарактерыРезультатов.Отрицательный Тогда
		
		Возврат БиблиотекаКартинок.НачальныйУзелЖизненногоЦиклаКрасный;
		
	ИначеЕсли ЭтоПоследнийЭлемент
		И ХарактерЭтогоУзла = Перечисления.ХарактерыРезультатов.Нейтральный Тогда
		
		Возврат БиблиотекаКартинок.КонечныйУзелЖизненногоЦиклаСерый;
		
	ИначеЕсли ЭтоПоследнийЭлемент
		И ХарактерЭтогоУзла = Перечисления.ХарактерыРезультатов.Положительный Тогда
		
		Возврат БиблиотекаКартинок.КонечныйУзелЖизненногоЦиклаЗеленый;
		
	ИначеЕсли ЭтоПоследнийЭлемент
		И ХарактерЭтогоУзла = Перечисления.ХарактерыРезультатов.Отрицательный Тогда
		
		Возврат БиблиотекаКартинок.КонечныйУзелЖизненногоЦиклаКрасный;
		
	ИначеЕсли ХарактерЭтогоУзла = Перечисления.ХарактерыРезультатов.Нейтральный Тогда
		
		Возврат БиблиотекаКартинок.ПромежуточныйУзелЖизненногоЦиклаСерый;
		
	ИначеЕсли ХарактерЭтогоУзла = Перечисления.ХарактерыРезультатов.Положительный
		И ХарактерСледующегоУзла = Перечисления.ХарактерыРезультатов.Нейтральный Тогда
		
		Возврат БиблиотекаКартинок.ПромежуточныйУзелЖизненногоЦиклаЗеленыйСерый;
		
	ИначеЕсли ХарактерЭтогоУзла = Перечисления.ХарактерыРезультатов.Положительный
		И ХарактерСледующегоУзла = Перечисления.ХарактерыРезультатов.Отрицательный Тогда
		
		Возврат БиблиотекаКартинок.ПромежуточныйУзелЖизненногоЦиклаЗеленыйКрасный;
		
	ИначеЕсли ХарактерЭтогоУзла = Перечисления.ХарактерыРезультатов.Положительный Тогда
		
		Возврат БиблиотекаКартинок.ПромежуточныйУзелЖизненногоЦиклаЗеленый;
		
	ИначеЕсли ХарактерЭтогоУзла = Перечисления.ХарактерыРезультатов.Положительный Тогда
		
		Возврат БиблиотекаКартинок.ПромежуточныйУзелЖизненногоЦиклаЗеленый;
		
	ИначеЕсли ХарактерЭтогоУзла = Перечисления.ХарактерыРезультатов.Отрицательный
		И ХарактерСледующегоУзла = Перечисления.ХарактерыРезультатов.Нейтральный Тогда
		
		Возврат БиблиотекаКартинок.ПромежуточныйУзелЖизненногоЦиклаКрасныйСерый;
		
	ИначеЕсли ХарактерЭтогоУзла = Перечисления.ХарактерыРезультатов.Отрицательный Тогда
		
		Возврат БиблиотекаКартинок.ПромежуточныйУзелЖизненногоЦиклаКрасный;
		
	Иначе
		
		Возврат БиблиотекаКартинок.ПромежуточныйУзелЖизненногоЦиклаСерый;
		
	Конецесли;
	
КонецФункции

// Определяет какие подзадачи нужно отменить, при отмене задачи.
// 
// Параметры:
//  ЗадачаКОтмене - ДокументСсылка.Задача.
// 
// Возвращаемое значение:
//  Массив из ДокументСсылка.Задача - Подзадачи к отмене.
//
Функция ПодзадачиКОтмене(ЗадачаКОтмене) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПодзадачиКОтмене = Новый Массив;
	
	ВсеПодзадачи = Подзадачи(ЗадачаКОтмене);
	СостоянияПодзадач =
		ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВсеПодзадачи, "СостояниеЗадачи");
	Для Каждого Подзадача Из ВсеПодзадачи Цикл
		
		СостояниеПодзадачи = СостоянияПодзадач[Подзадача];
		ВидСостоянияПодзадачи = РаботаСЗадачамиПовтИсп.ВидСостоянияЗадач(СостояниеПодзадачи);
		ЭтоОжидающаяВыполненияПодзадача =
			Перечисления.ВидыСостоянийЗадач.ЭтоОжидающаяВыполненияЗадача(ВидСостоянияПодзадачи);
		Если Не ЭтоОжидающаяВыполненияПодзадача Тогда
			Продолжить;
		КонецЕсли;
		
		ПодзадачиКОтмене.Добавить(Подзадача);
		
	КонецЦикла;
	
	Возврат ПодзадачиКОтмене;
		
КонецФункции

// Определяет какие подзадачи нужно вернуть, при снятии с паузы
// 
// Параметры:
//  ЗадачаКОтмене - ДокументСсылка.Задача.
// 
// Возвращаемое значение:
//  Массив из ДокументСсылка.Задача - Подзадачи к отмене.
//
Функция ПодзадачиНаПаузе(ЗадачаКОтмене) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПодзадачиКОтмене = Новый Массив;
	
	ВсеПодзадачи = Подзадачи(ЗадачаКОтмене);
	СостоянияПодзадач =
		ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВсеПодзадачи, "СостояниеЗадачи");
	Для Каждого Подзадача Из ВсеПодзадачи Цикл
		
		СостояниеПодзадачи = СостоянияПодзадач[Подзадача];
		ВидСостоянияПодзадачи = РаботаСЗадачамиПовтИсп.ВидСостоянияЗадач(СостояниеПодзадачи);
		ЭтоОжидающаяВыполненияПодзадача =
			Перечисления.ВидыСостоянийЗадач.ЭтоОтложеннаяЗадача(ВидСостоянияПодзадачи);
		Если Не ЭтоОжидающаяВыполненияПодзадача Тогда
			Продолжить;
		КонецЕсли;
		
		ПодзадачиКОтмене.Добавить(Подзадача);
		
	КонецЦикла;
	
	Возврат ПодзадачиКОтмене;
		
КонецФункции

Функция СтрСокращенно(Строка, Длина)
	
	Если СтрДлина(Строка) <= Длина Тогда
		Возврат Строка;
	Иначе
		Возврат Лев(Строка, Длина - 3) + "...";
	КонецЕсли;
	
КонецФункции

Функция ДанныеСотрудников(МассивСотрудников)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.Ссылка КАК Ссылка,
			|	Сотрудники.Наименование КАК Представление,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Сотрудники.Подразделение) КАК Пояснение1,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Сотрудники.Должность) КАК Пояснение2,
			|	ПодчиненностьПодразделений.РуководительПодчиненного КАК Руководитель
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
			|		ПО Сотрудники.Подразделение = ПодчиненностьПодразделений.Подчиненное
			|		И Сотрудники.Подразделение = ПодчиненностьПодразделений.Вышестоящее
			|ГДЕ
			|	Сотрудники.Ссылка В (&МассивСотрудников)";
			
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	
	Возврат Запрос.Выполнить().Выгрузить();		
	
КонецФункции

// Сокращает схему жизненного цикла, убираю большое количество промежуточных узлов.
// 
// Параметры:
//  СхемаЖизненногоЦикла - Массив из Структура - Новые данные жизненного цикла. См. РаботаСЗадачами.ЭлементСхемыЖизненногоЦикла().
//
Процедура СократитьСхемуЖизненногоЦикла(СхемаЖизненногоЦикла)
	
	ПредельноеКоличествоПромежуточныхУзловПодряд = 20;
	
	УзлыДляСокращения = Новый Массив;
	КоличествоПромежуточныхУзловПодряд = 0;
	
	Для Индекс = 0 По СхемаЖизненногоЦикла.ВГраница() Цикл
		
		ЭлементСхемыЖизненногоЦикла = СхемаЖизненногоЦикла[Индекс];
		
		Если ЭлементСхемыЖизненногоЦикла.ТипУзла <> Перечисления.ТипыУзловЖизненногоЦикла.ПромежуточныйУзел Тогда
			КоличествоПромежуточныхУзловПодряд = 0;
			Продолжить;
		КонецЕсли;
		
		КоличествоПромежуточныхУзловПодряд = КоличествоПромежуточныхУзловПодряд + 1;
		Если КоличествоПромежуточныхУзловПодряд < ПредельноеКоличествоПромежуточныхУзловПодряд Тогда
			Продолжить;
		КонецЕсли;
		
		УзлыДляСокращения.Добавить(Индекс);
		
	КонецЦикла;
	
	КоличествоЭлементов = СхемаЖизненногоЦикла.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ОбратныйИндекс = КоличествоЭлементов - Индекс;
		
		Если УзлыДляСокращения.Найти(ОбратныйИндекс) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если УзлыДляСокращения.Найти(ОбратныйИндекс - 1) <> Неопределено Тогда
			СхемаЖизненногоЦикла.Удалить(ОбратныйИндекс);
			Продолжить;
		КонецЕсли;
		
		ЭлементСхемыЖизненногоЦикла = ЭлементСхемыЖизненногоЦикла();
		ЭлементСхемыЖизненногоЦикла.ТипУзла = Перечисления.ТипыУзловЖизненногоЦикла.ПромежуточныйУзел;
		ЭлементСхемыЖизненногоЦикла.Заголовок = НСтр("ru = 'и другие'");
		ЭлементСхемыЖизненногоЦикла.ХарактерРезультата = СхемаЖизненногоЦикла[ОбратныйИндекс].ХарактерРезультата;
		
		СхемаЖизненногоЦикла[ОбратныйИндекс] = ЭлементСхемыЖизненногоЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает термин перехода в состояние, с учётом пола исполнителя.
//
// Параметры:
//  Состояние - СправочникСсылка.СостоянияУчастниковЗадач.
//  Исполнитель - ОпределяемыйТип.УчастникЗадач.
// 
// Возвращаемое значение:
//  Строка - Термин перехода в состояние.
//
Функция ТерминПереходаВСостояние(Состояние, Исполнитель)
	
	ТерминПереходаВСостояние = "";
	
	Если Не ЗначениеЗаполнено(Состояние) Тогда
		Возврат ТерминПереходаВСостояние;
	КонецЕсли;
	
	ПолУчастника = РаботаСЗадачамиПовтИсп.ПолУчастника(Исполнитель);
	
	РеквизитыСостояния = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Состояние,
		"ТерминПереходаВСостояниеЖенский, ТерминПереходаВСостояниеМужской");
	
	ТерминПереходаВСостояние =
		?(ПолУчастника = Перечисления.ПолФизическогоЛица.Женский,
			РеквизитыСостояния.ТерминПереходаВСостояниеЖенский,
			РеквизитыСостояния.ТерминПереходаВСостояниеМужской);
	
	Возврат ТерминПереходаВСостояние;
	
КонецФункции

// Проверяет права на приложение
//
// Параметры:
//  УчастникиДляПроверки - Массив из СправочникСсылка.СостоянияУчастниковЗадач.
//  ПраваСотрудниковПоОбъектам - ТаблицаЗначений.
//  ИсполнителиРолей - Соответствие.
//  ПриложениеДляПроверки - ОпределяемыйТип.ПриложениеЗадач.
//  СотрудникиВКонтейнерах - Соответствие.
// 
// Возвращаемое значение:
//  Булево - Есть участники без прав.
//
Функция ПроверитьПраваНаПриложение(УчастникиДляПроверки, ПраваСотрудниковПоОбъектам, ИсполнителиРолей, ПриложениеДляПроверки, СотрудникиВКонтейнерах)
	
	ЕстьУчастникиБезПрав = Ложь;
	СотрудникиБезПрав = Новый Массив;
	РолиБезПрав = Новый Массив;
	КонтейнерыБезПрав = Новый Массив;
	
	ПраваСотрудниковПоПриложению = ПраваСотрудниковПоОбъектам.Скопировать(
		Новый Структура("ОбъектДоступа", ПриложениеДляПроверки));
	
	Для Каждого УчастникДляПроверки Из УчастникиДляПроверки Цикл
		
		ТипУчастника = ТипЗнч(УчастникДляПроверки);
		
		Если ТипУчастника = Тип("СправочникСсылка.Сотрудники") Тогда
			
			ПраваСотрудникаПоПриложению =
				ПраваСотрудниковПоПриложению.Найти(УчастникДляПроверки, "Сотрудник");
			
			Если ПраваСотрудникаПоПриложению <> Неопределено
				И ПраваСотрудникаПоПриложению.Чтение = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			СотрудникиБезПрав.Добавить(УчастникДляПроверки);
			
			ЕстьУчастникиБезПрав = Истина;
			
		ИначеЕсли ТипУчастника = Тип("СправочникСсылка.ПолныеРоли") Тогда	
			
			ИсполнителиРоли = ИсполнителиРолей[УчастникДляПроверки];
			
			ЕстьИсполнительСПравами = Ложь;
			Для Каждого ИсполнительРоли Из ИсполнителиРоли Цикл
				
				ПраваСотрудникаПоПриложению =
					ПраваСотрудниковПоПриложению.Найти(ИсполнительРоли, "Сотрудник");
				
				Если ПраваСотрудникаПоПриложению <> Неопределено
					И ПраваСотрудникаПоПриложению.Чтение = Истина Тогда
					ЕстьИсполнительСПравами = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьИсполнительСПравами Тогда
				Продолжить;
			КонецЕсли;
			
			РолиБезПрав.Добавить(УчастникДляПроверки);
			
			ЕстьУчастникиБезПрав = Истина;
			
		ИначеЕсли Метаданные.ОпределяемыеТипы.КонтейнерПользователей.Тип.СодержитТип(ТипУчастника) Тогда	
			
			СотрудникиВКонтейнере = СотрудникиВКонтейнерах[УчастникДляПроверки];
			
			ЕстьСотрудникБезПрав = Ложь;
			Для Каждого СотрудникВКонтейнере Из СотрудникиВКонтейнере Цикл
				
				ПраваСотрудникаПоПриложению =
					ПраваСотрудниковПоПриложению.Найти(СотрудникВКонтейнере, "Сотрудник");
				
				Если ПраваСотрудникаПоПриложению = Неопределено
					Или ПраваСотрудникаПоПриложению.Чтение = Ложь Тогда
					ЕстьСотрудникБезПрав = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не ЕстьСотрудникБезПрав Тогда
				Продолжить;
			КонецЕсли;
			
			КонтейнерыБезПрав.Добавить(УчастникДляПроверки);
			
			ЕстьУчастникиБезПрав = Истина;
			
		Иначе
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный тип участника %1 (%2).'"),
				УчастникДляПроверки,
				ТипЗнч(УчастникДляПроверки));
			
		КонецЕсли;
		
	КонецЦикла;
	
	СотрудникиБезПрав = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СотрудникиБезПрав);
	Если СотрудникиБезПрав.Количество() = 1 Тогда
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Сотрудник ""%1"" не имеет прав на предмет ""%2"".'"),
			СотрудникиБезПрав[0],
			ПриложениеДляПроверки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		
	ИначеЕсли СотрудникиБезПрав.Количество() > 1 Тогда
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Сотрудники:
				|%1
				|не имеют прав на предмет ""%2"".'"),
			СтрСоединить(СотрудникиБезПрав, Символы.ПС + " "),
			ПриложениеДляПроверки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		
	КонецЕсли;
	
	РолиБезПрав = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РолиБезПрав);
	Если РолиБезПрав.Количество() = 1 Тогда
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Никто из исполнителей роли ""%1"" не имеет прав на предмет ""%2"".'"),
			РолиБезПрав[0],
			ПриложениеДляПроверки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		
	ИначеЕсли РолиБезПрав.Количество() > 1 Тогда
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Никто из исполнителей ролей:
				|%1
				|не имеет прав на предмет ""%2"".'"),
			СтрСоединить(РолиБезПрав, Символы.ПС + " "),
			ПриложениеДляПроверки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		
	КонецЕсли;
	
	КонтейнерыБезПрав = ОбщегоНазначенияКлиентСервер.СвернутьМассив(КонтейнерыБезПрав);
	Если КонтейнерыБезПрав.Количество() = 1 Тогда
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не все сотрудники контейнера ""%1"" имеют права на предмет ""%2"".'"),
			КонтейнерыБезПрав[0],
			ПриложениеДляПроверки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		
	ИначеЕсли КонтейнерыБезПрав.Количество() > 1 Тогда
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не все сотрудники контейнеров:
				|%1
				|имеют права на предмет ""%2"".'"),
			СтрСоединить(КонтейнерыБезПрав, Символы.ПС + " "),
			ПриложениеДляПроверки);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		
	КонецЕсли;
	
	Возврат ЕстьУчастникиБезПрав;
	
КонецФункции

// Проверяет права на действия задачи
//
// Параметры:
//  ВыделенноеДействие - ДокументСсылка.ДействиеЗадачи.
// 
// Возвращаемое значение:
//  Булево - Есть права на выполнение задачи
//
Функция ЕстьВсеПраваНаДействие(ВыделенноеДействие) Экспорт
	
	ВсеДействияДоступны = Истина;
	
	ЭтоПолноправныйПользователь = Пользователи.РолиДоступны("КонтрольЗадачИБизнесПроцессов", Неопределено, Ложь);
	ТекущиеИсполнителиЗадач = РаботаСЗадачамиПовтИсп.ТекущиеИсполнителиЗадач();
	
	Исполнитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыделенноеДействие, "Исполнитель");

	Если Не ЭтоПолноправныйПользователь
			И ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Если ТекущиеИсполнителиЗадач.Найти(Исполнитель) = Неопределено
				И Не ЭтоПодчиненныйИсполнитель(Исполнитель) Тогда
			ВсеДействияДоступны = Ложь;
		Иначе
			// Проверка прав.
			ПраваНаДействие = Неопределено;   
			ПраваНаВыделенныеДействия = Неопределено;
			
			Если ПраваНаДействие = Неопределено Тогда
				Если ПраваНаВыделенныеДействия = Неопределено Тогда 
					ПраваНаВыделенныеДействия = ДокументооборотПраваДоступа.ПраваПользователейПоОбъектам(
						ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыделенноеДействие),
						Истина,
						ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
							Пользователи.ТекущийПользователь()));
				КонецЕсли;
				ПраваНаДействие = ПраваНаВыделенныеДействия.Найти(ВыделенноеДействие, "ОбъектДоступа");
			КонецЕсли;
			Если ПраваНаДействие = Неопределено Или ПраваНаДействие.Изменение <> Истина Тогда
				ВсеДействияДоступны = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;     
	
	Возврат ВсеДействияДоступны;
	
КонецФункции

// Определяет, является ли операция над задачами длительной.
//
// Параметры:
//  ЗадачиОперации - Массив из ДокументСсылка.Задача.
//  РеквизитыЗадач - Неопределено, Соответствие из КлючИЗначение - Реквизиты задач.
// 
// Возвращаемое значение:
//  Булево - Это длительная операция над задачами.
//
Функция ЭтоДлительнаяОперация(ЗадачиОперации, РеквизитыЗадач = Неопределено) Экспорт
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ЭтоДлительнаяОперация = Ложь;
		Возврат ЭтоДлительнаяОперация;
	КонецЕсли;
	
	Если РеквизитыЗадач = Неопределено Тогда
		РеквизитыЗадач = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ЗадачиОперации, "Участники");
	КонецЕсли;
	
	ВсегоУчастников = 0;
	ЛимитУчастниковДлительнойОперации = 20;
	
	Для Каждого ЗадачаОперации Из ЗадачиОперации Цикл
		
		РеквизитыЗадачи = РеквизитыЗадач[ЗадачаОперации];
		ВсеУчастники = РеквизитыЗадачи.Участники.Выгрузить().ВыгрузитьКолонку("Участник");
		
		ВсегоУчастников = ВсегоУчастников + ВсеУчастники.Количество();
		
	КонецЦикла;
	
	ЭтоДлительнаяОперация = ВсегоУчастников > ЛимитУчастниковДлительнойОперации;
	
	Возврат ЭтоДлительнаяОперация;
	
КонецФункции

// Возвращает области замещения, которые дают доступ к задачам.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.ОбластиЗамещения.
// 
Функция ОбластиЗамещенияЗадач()
	
	ОбластиЗамещения = Новый Массив;
	ОбластиЗамещения.Добавить(Справочники.ОбластиЗамещения.ЗадачиПросмотр);
	ОбластиЗамещения.Добавить(Справочники.ОбластиЗамещения.Задачи);
	
	Возврат ОбластиЗамещения;
	
КонецФункции

// Определяет, является ли исполнитель подчиненным текущего пользователя.
//
// Параметры:
//  Исполнитель - ОпределяемыйТип.УчастникЗадач.
// 
// Возвращаемое значение:
//  Булево - Определяет, является ли исполнитель подчиненным текущего пользователя.
//
Функция ЭтоПодчиненныйИсполнитель(Исполнитель)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Исполнитель)
		Или Не РаботаСЗадачамиПовтИсп.ДобавлятьРуководителямДоступПодчиненных() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СотрудникиИсполнителя = СотрудникиУчастника(Исполнитель);
	
	Если СотрудникиИсполнителя.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПодразделенияСотрудников = Сотрудники.ПодразделенияСотрудников(СотрудникиИсполнителя);
	
	ОбластиЗамещения = ОбластиЗамещенияЗадач();
	АктуальныеЗамещения = Справочники.ЗамещающиеИПомощники.АктуальныеЗамещения(
		ПараметрыСеанса.СотрудникиПользователя,
		ОбластиЗамещения);
	Руководители = АктуальныеЗамещения.ВыгрузитьКолонку("Сотрудник");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		Руководители,
		ПараметрыСеанса.СотрудникиПользователя,
		Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПодчиненностьПодразделений.Подчиненное КАК Подразделение
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
		|		ПО СтруктураПредприятия.Ссылка = ПодчиненностьПодразделений.Вышестоящее
		|			И (ПодчиненностьПодразделений.Подчиненное В (&ПодразделенияСотрудников))
		|ГДЕ
		|	СтруктураПредприятия.Руководитель В(&Руководители)");
	
	Запрос.УстановитьПараметр("Руководители", Руководители);
	Запрос.УстановитьПараметр("ПодразделенияСотрудников", ПодразделенияСотрудников);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЭтоПодчиненныйИсполнитель = Не РезультатЗапроса.Пустой();
	
	Возврат ЭтоПодчиненныйИсполнитель;
	
КонецФункции

// Формирует пустую структуру данных команды выполнения.
// 
// Возвращаемое значение:
//  Структура:
//   * ИмяКоманды - Строка
//   * ИмяЭлемента - Строка
//   * Заголовок - Строка
//   * ЦветТекста - Цвет
//   * ВысотаЗаголовка - Число
//   * ЭтоГрупповаяКоманда - Булево
// 
Функция НовыеДанныеКомандыВыполнения()
	
	ДанныеКомандыВыполнения = Новый Структура;
	ДанныеКомандыВыполнения.Вставить("ИмяКоманды", "");
	ДанныеКомандыВыполнения.Вставить("ИмяЭлемента", "");
	ДанныеКомандыВыполнения.Вставить("Заголовок", "");
	ДанныеКомандыВыполнения.Вставить("ЦветТекста", ЦветаСтиля.ЦветТекстаФормы);
	ДанныеКомандыВыполнения.Вставить("ВысотаЗаголовка", 0);
	ДанныеКомандыВыполнения.Вставить("ЭтоГрупповаяКоманда", Ложь);
	
	Возврат ДанныеКомандыВыполнения;
	
КонецФункции

// Определяет количество подзадач.
// 
// Параметры:
//  Задача - ДокументСсылка.Задача
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
// 
// Возвращаемое значение:
//  Структура:
//   * Выполнено - Число
//   * Всего - Число
// 
Функция КоличествоПодзадач(Задача, ДействиеЗадачи)
	
	КоличествоПодзадач = Новый Структура;
	КоличествоПодзадач.Вставить("Выполнено", 0);
	КоличествоПодзадач.Вставить("Всего", 0);
	Если Не ЗначениеЗаполнено(Задача) И Не ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		Возврат КоличествоПодзадач;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		ВсеПодзадачи = Документы.ДействиеЗадачи.НайтиПодзадачи(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДействиеЗадачи));
	Иначе
		ВсеПодзадачи = Документы.Задача.НайтиПодзадачи(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Задача));
	КонецЕсли;
	Если ВсеПодзадачи.Количество() = 0 Тогда
		Возврат КоличествоПодзадач;
	КонецЕсли;
	
	АктивныеДействияПоЗадачам = Документы.ДействиеЗадачи.АктивныеДействияПоЗадачам(ВсеПодзадачи);
	Для Каждого СтрокаДействияЗадачи Из АктивныеДействияПоЗадачам Цикл
		
		// Если ещё не дошли до проверки, то оно скрывается в дереве.
		Если Не ЗначениеЗаполнено(СтрокаДействияЗадачи.СостояниеУчастникаЗадачи) Тогда
			Продолжить;
		КонецЕсли;
		
		// Возвращенные на доработку задачи проверки скрываются в дереве.
		ЭтоВозвратНаДоработку =
			СтрокаДействияЗадачи.РезультатДействия = Справочники.РезультатыДействийЗадач.ВозвращеноНаДоработку;
		Если ЭтоВозвратНаДоработку Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоПодзадач.Всего = КоличествоПодзадач.Всего + 1;
		
		// Для счётчика выполнеными считаем не только выполненные, но и ещё не проверенные.
		ВидСостоянияУчастника = РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(
			СтрокаДействияЗадачи.СостояниеУчастникаЗадачи);
		ЭтоВыполненноеДействие = Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоВыполненноеДействие(
			ВидСостоянияУчастника);
		ЭтоОжидающееПроверкиДействие = Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОжидающееПроверкиДействие(
			ВидСостоянияУчастника);
		Если ЭтоВыполненноеДействие Или ЭтоОжидающееПроверкиДействие Тогда
			КоличествоПодзадач.Выполнено = КоличествоПодзадач.Выполнено + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоличествоПодзадач;
	
КонецФункции

#Область ПоступившиеОбновления

// Восстановление событий "Исполнена задача ответственного исполнителя" и "Исполнена задача соисполнителя".
// 
// Параметры:
//  НовыеПоступившиеОбновленияЗадач - См. РаботаСЗадачами.НовыеПоступившиеОбновленияЗадач.
//  ПорцияДействийЗадач - Массив из ДокументСсылка.ДействиеЗадачи.
//  РеквизитыДействий - Соответствие.
//
Процедура ВосстановитьПоступившиеОбновленияЗадачПоДругимУчастникам(НовыеПоступившиеОбновленияЗадач, ПорцияДействийЗадач, РеквизитыДействий)
	
	ПорцияДействийИсполнения = Новый Массив;
	Для Каждого ДействиеЗадачи Из ПорцияДействийЗадач Цикл
		
		РеквизитыДействия = РеквизитыДействий[ДействиеЗадачи];
		Если РеквизитыДействия.ВидДействия = Справочники.ВидыДействийЗадач.Исполнить Тогда
			ПорцияДействийИсполнения.Добавить(ДействиеЗадачи);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ДействиеЗадачиИсполнить Из ПорцияДействийИсполнения Цикл
		
		ДанныеУчастников = ДанныеУчастников(ДействиеЗадачиИсполнить);
		
		ИсполненаЗадачаОтветственногоИсполнителя = Ложь;
		ИсполненаЗадачаСоисполнителя = Ложь;
		Для Каждого ДанныеУчастника Из ДанныеУчастников Цикл
			
			Если ДанныеУчастника.ДействиеУчастника = ДействиеЗадачиИсполнить Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДанныеУчастника.Выполнил = Истина
				И ДанныеУчастника.ЭтоИсполнитель = Истина
				И ДанныеУчастника.ЭтоОтветственный = Истина Тогда
				
				ИсполненаЗадачаОтветственногоИсполнителя = Истина;
				
			ИначеЕсли ДанныеУчастника.Выполнил = Истина
				И ДанныеУчастника.ЭтоИсполнитель = Истина
				И ДанныеУчастника.ЭтоОтветственный = Ложь Тогда
				
				ИсполненаЗадачаСоисполнителя = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИсполненаЗадачаОтветственногоИсполнителя Тогда
			
			ДобавитьПоступившееОбновлениеЗадачи(
				НовыеПоступившиеОбновленияЗадач,
				ДействиеЗадачиИсполнить,
				Справочники.СобытияОбновленияЗадач.ИсполненаЗадачаОтветственногоИсполнителя);
			
		ИначеЕсли ИсполненаЗадачаСоисполнителя Тогда
			
			ДобавитьПоступившееОбновлениеЗадачи(
				НовыеПоступившиеОбновленияЗадач,
				ДействиеЗадачиИсполнить,
				Справочники.СобытияОбновленияЗадач.ИсполненаЗадачаСоисполнителя);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Восстановление события "Исполнено подчиненное поручение".
// 
// Параметры:
//  НовыеПоступившиеОбновленияЗадач - См. РаботаСЗадачами.НовыеПоступившиеОбновленияЗадач.
// 	ПорцияДействийЗадач - Массив из ДокументСсылка.ДействиеЗадачи.
//
Процедура ВосстановитьПоступившиеОбновленияЗадачПоПодзадачам(НовыеПоступившиеОбновленияЗадач, ПорцияДействийЗадач)
	
	ПодзадачиПоДействиям = Документы.ДействиеЗадачи.ПодзадачиПоДействиям(ПорцияДействийЗадач);
	
	ПодзадачиПорции = Новый Массив;
	Для Каждого КлючИЗначение Из ПодзадачиПоДействиям Цикл
		ПодзадачиПоДействию = КлючИЗначение.Значение;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПодзадачиПорции, ПодзадачиПоДействию);
	КонецЦикла;
	
	ЭтоВыполненныеЗадачи = ЭтоВыполненныеЗадачи(ПодзадачиПорции);
	ЭтоОжидающиеПроверкиЗадачи = ЭтоОжидающиеПроверкиЗадачи(ПодзадачиПорции);
	
	Для Каждого ДействиеПорции Из ПорцияДействийЗадач Цикл
		
		ПодзадачиПоДействию = ПодзадачиПоДействиям[ДействиеПорции];
		
		ИсполненаПодзадача = Ложь;
		Для Каждого ПодзадачаПоДействию Из ПодзадачиПоДействию Цикл
			
			ИсполненаПодзадача = ИсполненаПодзадача
				Или ЭтоВыполненныеЗадачи[ПодзадачаПоДействию]
				Или ЭтоОжидающиеПроверкиЗадачи[ПодзадачаПоДействию];
			
		КонецЦикла; 
		
		Если ИсполненаПодзадача Тогда
			
			ДобавитьПоступившееОбновлениеЗадачи(
				НовыеПоступившиеОбновленияЗадач,
				ДействиеПорции,
				Справочники.СобытияОбновленияЗадач.ИсполненаПодзадача);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обрабатываем поступившие обновления при выполнении задачи.
// 
// Параметры:
// 	ДействиеЗадачиОбъект - ДокументОбъект.ДействиеЗадачи.
// 	
Процедура ОбработатьПоступившиеОбновленияПриВыполненииЗадачи(ДействиеЗадачиОбъект)
	
	НовыеПоступившиеОбновленияЗадач = НовыеПоступившиеОбновленияЗадач();
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДействиеЗадачиОбъект.Задача,
		"ВышестоящееДействие, Участники");
	Участники = РеквизитыЗадачи.Участники.Выгрузить();
	ЭтоМассоваяЗадача = Участники.Количество() > 20;
	Если ЭтоМассоваяЗадача Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоОтветственный = Ложь;
	ЭтоИсполнитель = Ложь;
	Если ДействиеЗадачиОбъект.ВидДействия = Справочники.ВидыДействийЗадач.Исполнить Тогда
		ДанныеУчастников = ДанныеУчастников(ДействиеЗадачиОбъект.Ссылка);
	Иначе
		ДанныеУчастников = Новый Массив;
	КонецЕсли;
	
	Для Каждого ДанныеУчастника Из ДанныеУчастников Цикл
		
		Если ДанныеУчастника.ДействиеУчастника <> ДействиеЗадачиОбъект.Ссылка Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеУчастника.ЭтоОтветственный Тогда
			ЭтоОтветственный = Истина;
		ИначеЕсли Не ДанныеУчастника.ЭтоОтветственный И ДанныеУчастника.ЭтоИсполнитель Тогда
			ЭтоИсполнитель = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Исполнение задача "Ответственное исполнение" с соисполнителями - будет формироваться событие
	// "Исполнена задача ответственного исполнителя" для всех задач соисполнителей.
	Если ЭтоОтветственный Тогда
		
		Для Каждого ДанныеУчастника Из ДанныеУчастников Цикл
			
			Если ДанныеУчастника.ДействиеУчастника = ДействиеЗадачиОбъект.Ссылка Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ДанныеУчастника.ЭтоОтветственный И ДанныеУчастника.ЭтоИсполнитель Тогда
				ДобавитьПоступившееОбновлениеЗадачи(
					НовыеПоступившиеОбновленияЗадач,
					ДанныеУчастника.ДействиеУчастника,
					Справочники.СобытияОбновленияЗадач.ИсполненаЗадачаОтветственногоИсполнителя);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Исполнение задача "Исполнение" с соисполнителями - будет формироваться событие
	// "Исполнена задача соисполнителя" для всех задач соисполнителей.
	Если ЭтоИсполнитель Тогда
		
		Для Каждого ДанныеУчастника Из ДанныеУчастников Цикл
			
			Если ДанныеУчастника.ДействиеУчастника = ДействиеЗадачиОбъект.Ссылка Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДанныеУчастника.ЭтоИсполнитель Тогда
				ДобавитьПоступившееОбновлениеЗадачи(
					НовыеПоступившиеОбновленияЗадач,
					ДанныеУчастника.ДействиеУчастника,
					Справочники.СобытияОбновленияЗадач.ИсполненаЗадачаСоисполнителя);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Исполнение задачи, являющейся задачей подчиненного поручения - будет формироваться событие
	// "Исполнено подчиненное поручение" для задачи, из которой поставлено поручение.
	Если (ДействиеЗадачиОбъект.ВидДействия = Справочники.ВидыДействийЗадач.Исполнить
			Или ДействиеЗадачиОбъект.ВидДействия = Справочники.ВидыДействийЗадач.Согласовать)
		И ЗначениеЗаполнено(РеквизитыЗадачи.ВышестоящееДействие) Тогда
		
		ДобавитьПоступившееОбновлениеЗадачи(
			НовыеПоступившиеОбновленияЗадач,
			РеквизитыЗадачи.ВышестоящееДействие,
			Справочники.СобытияОбновленияЗадач.ИсполненаПодзадача);
		
	КонецЕсли;
	
	ЗаписатьПоступившиеОбновленияЗадач(НовыеПоступившиеОбновленияЗадач, Ложь);
	
КонецПроцедуры

// Формирует текстовое описание поступивших обновлений, в соответствии с правилами формирования представления:
//  - каждое событие участвует в представлении один раз;
//  - события умеют вытеснять друг друга.
//
// Параметры:
//  СобытияПоступившихОбновлений - Массив из СправочникСсылка.СобытияОбновленияЗадач.
// 
// Возвращаемое значение:
//  Строка - Текстовое описание поступивших обновлений.
//
Функция ОписаниеПоступившихОбновлений(СобытияПоступившихОбновлений)
	
	// Каждое событие участвует в формировании представления только один раз.
	СобытияДляФормированияПредставления =
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(СобытияПоступившихОбновлений);
	
	РеквизитыСобытий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		СобытияПоступившихОбновлений,
		"Описание, ВытесняемыеСобытия");
	
	// События участвуют в формировании представления всегда в одном и том же порядке.
	СобытияДляФормированияПредставления =
		ОбщегоНазначенияДокументооборотКлиентСервер.СортироватьМассив(СобытияДляФормированияПредставления);
	
	// События вытесняют друг друга по правилам вытеснения.
	Для Каждого КлючИЗначение Из РеквизитыСобытий Цикл
		
		ВытесняющееЗначение = КлючИЗначение.Ключ;
		РеквизитыСобытия = КлючИЗначение.Значение;
		
		ВытесняемыеСобытия = РеквизитыСобытия.ВытесняемыеСобытия.Выгрузить(); 
		ВытесняемыеСобытия.Сортировать("НомерСтроки Возр");
		
		Для Каждого СтрокаВытесняемогоСобытия Из ВытесняемыеСобытия Цикл
			
			ВытесняемоеЗначение = СтрокаВытесняемогоСобытия.ВытесняемоеСобытие;
			
			ОбщегоНазначенияДокументооборотКлиентСервер.ВытеснитьИзМассива(
				СобытияДляФормированияПредставления,
				ВытесняющееЗначение,
				ВытесняемоеЗначение);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Формируем представление событий.
	МассивОписанийПоступившихОбновленийЗадачи = Новый Массив;
	Для Каждого СобытиеДляФормированияПредставления Из СобытияДляФормированияПредставления Цикл
		РеквизитыСобытия = РеквизитыСобытий[СобытиеДляФормированияПредставления];
		Если РеквизитыСобытия = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивОписанийПоступившихОбновленийЗадачи.Добавить(РеквизитыСобытия.Описание);
	КонецЦикла;
	
	ОписаниеПоступившихОбновленийЗадачи = СтрСоединить(МассивОписанийПоступившихОбновленийЗадачи, ", ");
	
	Возврат ОписаниеПоступившихОбновленийЗадачи;
	
КонецФункции

// Формирует описания поступивших обновлений действий задач.
//
// Параметры:
//  ДействияЗадач - Массив из ДокументСсылка.ДействиеЗадачи.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//   * Ключ - ДокументСсылка.ДействиеЗадачи
//   * Значение - Строка
//
Функция ОписанияПоступившихОбновленийДействийЗадач(ДействияЗадач)
	
	ОписанияПоступившихОбновленийЗадач = Новый Соответствие;
	ПоступившиеОбновленияЗадач = ПоступившиеОбновленияЗадач(ДействияЗадач);
	Для Каждого ДействиеЗадачи Из ДействияЗадач Цикл
		
		// Сформируем массив событий обновления задачи.
		СобытияОбновленияЗадачи = Новый Массив;
		ПараметрыОтбораПоЗадаче = Новый Структура("ДействиеЗадачи", ДействиеЗадачи);
		ПоступившиеОбновленияЗадачи = ПоступившиеОбновленияЗадач.НайтиСтроки(ПараметрыОтбораПоЗадаче);
		Для Каждого ПоступившееОбновлениеЗадачи Из ПоступившиеОбновленияЗадачи Цикл
			СобытияОбновленияЗадачи.Добавить(ПоступившееОбновлениеЗадачи.СобытиеОбновления);
		КонецЦикла;
		
		// Сформируем описание событий обновления задачи.
		ОписаниеПоступившихОбновленийЗадачи = ОписаниеПоступившихОбновлений(СобытияОбновленияЗадачи);
		ОписанияПоступившихОбновленийЗадач.Вставить(ДействиеЗадачи, ОписаниеПоступившихОбновленийЗадачи);
		
	КонецЦикла;
	
	Возврат ОписанияПоступившихОбновленийЗадач;
	
КонецФункции

// Возвращает поступившие обновления задачи по событию.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
//  СобытиеОбновления - СправочникСсылка.СобытияОбновленияЗадач
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * Период - Дата
//   * ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
//   * СобытиеОбновления - СправочникСсылка.СобытияОбновленияЗадач
//
Функция ПоступившиеОбновленияЗадачиПоСобытию(ДействиеЗадачи, СобытиеОбновления)
	
	ПоступившиеОбновленияЗадачиПоСобытию =
		РегистрыСведений.ПоступившиеОбновленияЗадач.ПолучитьЗаписиПоЗадачеИСобытию(
			ДействиеЗадачи,
			СобытиеОбновления);
	
	Возврат ПоступившиеОбновленияЗадачиПоСобытию;
	
КонецФункции

// Возвращает поступившие обновления задач.
//
// Параметры:
//  СсылкиНаЗадачи - Массив из ДокументСсылка.ДействиеЗадачи
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * Период - Дата
//   * ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
//   * СобытиеОбновления - СправочникСсылка.СобытияОбновленияЗадач
//
Функция ПоступившиеОбновленияЗадач(СсылкиНаЗадачи)
	
	ПоступившиеОбновленияЗадач =
		РегистрыСведений.ПоступившиеОбновленияЗадач.ПолучитьЗаписиПоДействиямЗадач(СсылкиНаЗадачи);
	
	Возврат ПоступившиеОбновленияЗадач;
	
КонецФункции

// Проверяет актуальность события "Исполнена подзадача".
// 
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
//
Процедура ПроверитьАктуальностьСобытияИсполненаПодзадача(ДействиеЗадачи)

	// Если вышестоящего действия нет - нет задачи, по которой нужно обновить события.	
	Если Не ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		Возврат;
	КонецЕсли;
	
	// Если по прежнему есть ожидающие проверки подзадачи - снимать событие "Исполнена подзадача" не нужно.
	ПодзадачиПоДействию = Документы.ДействиеЗадачи.НайтиПодзадачи(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДействиеЗадачи));
	
	ЭтоОжидающиеПроверкиЗадачи = ЭтоОжидающиеПроверкиЗадачи(ПодзадачиПоДействию);
	
	ЕстьОжидающиеПроверки = Ложь;
	Для Каждого ПодзадачаПоДействию Из ПодзадачиПоДействию Цикл
		
		ЕстьОжидающиеПроверки = ЕстьОжидающиеПроверки
			Или ЭтоОжидающиеПроверкиЗадачи[ПодзадачаПоДействию];
		
	КонецЦикла; 
	
	Если ЕстьОжидающиеПроверки Тогда
		Возврат;
	КонецЕсли;
	
	// Удаляем все записи задачи по событию "Исполнена подзадача". 
	ПоступившиеОбновленияЗадачи = ПоступившиеОбновленияЗадачиПоСобытию(
		ДействиеЗадачи,
		Справочники.СобытияОбновленияЗадач.ИсполненаПодзадача);
	Для Каждого ПоступившееОбновлениеЗадачи Из ПоступившиеОбновленияЗадачи Цикл
		
		РегистрыСведений.ПоступившиеОбновленияЗадач.УдалитьЗапись(
			ПоступившееОбновлениеЗадачи.Период,
			ПоступившееОбновлениеЗадачи.ДействиеЗадачи,
			ПоступившееОбновлениеЗадачи.СобытиеОбновления,
			Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
