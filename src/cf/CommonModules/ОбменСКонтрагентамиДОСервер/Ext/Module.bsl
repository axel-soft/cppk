#Область ПрограммныйИнтерфейс

#Область ФорматДокументПредприятия

// Поиск и создание учетного документа при отражении в учете документа предприятия.
//
// Параметры:
//  СсылкаНаОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - найденный или созданный объект учета.
//  КонструкторЭД - ОбработкаОбъект.ФорматДокументПредприятия
//  ПараметрыОбработки - Структура - дополнительные параметры для обработки объекта:
//    * СпособОбработки   - Строка - способ сохранения данных в информационной базе.
//          См. ОбменСКонтрагентамиПереопределяемый.ПриОпределенииСпособовОбработкиПрикладногоТипаЭлектронногоДокумента
//  ОписаниеОшибки - Строка - описание ошибки создания учетного документа. Может быть выведена пользователю.
//  ДополнительныеДанные - Структура - дополнительные данные для отражения в учете. Могут передаваться другими подсистемами
//                                     из состава библиотеки. Состав данных должен быть описан в документации соответствующей подсистемы.
//
Процедура НайтиСоздатьДокументПредприятия(СсылкаНаОбъектУчета, КонструкторЭД, ПараметрыОбработки, ОписаниеОшибки,
		ДополнительныеДанные = Неопределено) Экспорт
	
	ИнформацияДокумента = КонструкторЭД.ИнформацияДокумента[0];
	ВнешнийИдентификатор = ИнформацияДокумента.ВнешнийИдентификатор;
	СсылкаНового = Справочники.ДокументыПредприятия.ПолучитьСсылку(Новый УникальныйИдентификатор(ВнешнийИдентификатор));
	Если ЗначениеЗаполнено(СсылкаНового) И ОбщегоНазначения.СсылкаСуществует(СсылкаНового) Тогда
		СсылкаНаОбъектУчета = СсылкаНового;
		Возврат;
	КонецЕсли;
	ШаблонДокумента = Неопределено;
	Если ТипЗнч(ДополнительныеДанные) = Тип("Структура") Тогда
		ДополнительныеДанные.Свойство("ШаблонДокумента", ШаблонДокумента);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ШаблонДокумента) Тогда
		ОписаниеОшибки = НСтр("ru = 'Не указан шаблон для создания документа.'");
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	ОтправленаИсходящаяКорреспонденция = Ложь;
	Если ИнформацияДокумента.СвойстваВидаДокумента <> Неопределено Тогда
		ОтправленаИсходящаяКорреспонденция = ИнформацияДокумента.СвойстваВидаДокумента.ЯвляетсяИсходящейКорреспонденцией;
	КонецЕсли;	
	
	ОбъектУчета = Справочники.ДокументыПредприятия.СоздатьЭлемент();
	ОбъектУчета.УстановитьСсылкуНового(СсылкаНового);
	Основание = Новый Структура;
	Основание.Вставить("ШаблонДокумента", ШаблонДокумента);
	ОбъектУчета.Заполнить(Основание);
	ОбъектУчета.Тематика = ДополнительныеДанные.ТематикаДокумента;

	НастройкиДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектУчета.ВидДокумента,
	 	"ВестиУчетСторон, ОбязательноеУказаниеОтветственного, ЯвляетсяВходящейКорреспонденцией,
	 		|ЯвляетсяИсходящейКорреспонденцией, ЯвляетсяЗаявкойНаОплату");
	ЗаполнитьЗначенияСвойств(ОбъектУчета, ИнформацияДокумента);
	Если ИнформацияДокумента.СоставДокумента <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ОбъектУчета, ИнформацияДокумента.СоставДокумента);
	КонецЕсли;	
	ОбъектУчета.Заголовок  = ИнформацияДокумента.Наименование;
	Если Не НастройкиДокумента.ЯвляетсяВходящейКорреспонденцией
		Или (НастройкиДокумента.ЯвляетсяВходящейКорреспонденцией И Не ОтправленаИсходящаяКорреспонденция) Тогда
		ОбъектУчета.ДатаРегистрации  = ИнформацияДокумента.Дата;
		ОбъектУчета.РегистрационныйНомер = ИнформацияДокумента.Номер;
	КонецЕсли;
	
	ЗеркальныйПоиск = Истина; // Поиск контрагента по данным организации, организации по данным контрагента
	ОбъектУчета.Организация = ОрганизацияУчета(ИнформацияДокумента, ЗеркальныйПоиск);
	ОбъектУчета.Контрагент = КонтрагентУчета(ИнформацияДокумента, ОбъектУчета.Организация, ЗеркальныйПоиск);
	
	Если НастройкиДокумента.ВестиУчетСторон Тогда
		ЗаполнитьСтороныДокументаПредприятия(ОбъектУчета, ИнформацияДокумента, НастройкиДокумента, ЗеркальныйПоиск);
	Иначе
		ЗаполнитьКонтрагентовДокументаПредприятия(ОбъектУчета, ИнформацияДокумента.Контрагент,
			ИнформацияДокумента.Организация, ЗеркальныйПоиск);
		ЗаполнитьПодписантовИКонтактныхЛиц(ОбъектУчета, ИнформацияДокумента, НастройкиДокумента, ЗеркальныйПоиск);
	КонецЕсли;

	Если ЗначениеЗаполнено(ИнформацияДокумента.Валюта) Тогда
		ОбъектУчета.Валюта = Справочники.Валюты.НайтиПоКоду(ИнформацияДокумента.Валюта.Код);
		Если Не ЗначениеЗаполнено(ОбъектУчета.Валюта) Тогда
			ОбъектУчета.Валюта = Константы.ОсновнаяВалюта.Получить();
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(ИнформацияДокумента.ФормаДокумента) Тогда
		ОбъектУчета.ФормаДокумента = Перечисления.ВариантыФормДокументов[ИнформацияДокумента.ФормаДокумента];
	КонецЕсли;

	Если ЗначениеЗаполнено(ИнформацияДокумента.ПорядокПродления) Тогда
		ОбъектУчета.ПорядокПродления = Перечисления.ПорядокПродления[ИнформацияДокумента.ПорядокПродления.Идентификатор];
	КонецЕсли;
	Если ДополнительныеДанные.СпособОбмена = Перечисления.СпособыОбменаЭД.Через1CShare Тогда
		ОбъектУчета.Источник = Справочники.ИсточникиДанных.Сервис1СShare;
		ОбъектУчета.ИсточникДанных = Справочники.ИсточникиДанных.Сервис1СShare;
	КонецЕсли;

	РабочаяГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектУчета.Шаблон, "РабочаяГруппаДокумента").Выгрузить();
	ОбъектУчета.ДополнительныеСвойства.Вставить("РабочаяГруппаДобавить", РабочаяГруппа);
	
	ЗаполнитьПараметрыКорреспонденции(ОбъектУчета, ИнформацияДокумента, НастройкиДокумента,
		ОтправленаИсходящаяКорреспонденция);
	
	ВидДокументаФорма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектУчета.ВидДокумента, "ФормаДокумента");
	Если ЗначениеЗаполнено(ВидДокументаФорма) И ВидДокументаФорма
		<> Перечисления.ВариантыФормДокументов.БумажнаяИлиЭлектронная И ВидДокументаФорма
		<> ОбъектУчета.ФормаДокумента Тогда
		ОбъектУчета.ФормаДокумента = ВидДокументаФорма;
	КонецЕсли;
	ОбъектУчета.ДатаСоздания = ТекущаяДатаСеанса();
	ОбъектУчета.Бессрочный = ИнформацияДокумента.ЯвляетсяБессрочным;
	
	ОбъектУчета.Записать();
	
	ДанныеФайла = ДанныеФайла(ДополнительныеДанные.ДанныеОсновногоФайла.ИмяФайла);
	ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
	ПараметрыФайла.ВладелецФайлов = ОбъектУчета.Ссылка;
	ЗаполнитьЗначенияСвойств(ПараметрыФайла, ДанныеФайла);
	ПараметрыФайла.РасширениеБезТочки = ДанныеФайла.Расширение;
	РаботаСфайлами.ДобавитьФайл(ПараметрыФайла, ПоместитьВоВременноеХранилище(
		ДополнительныеДанные.ДанныеОсновногоФайла.ДвоичныеДанные));
	ДобавитьФайлыДокумента(ОбъектУчета.Ссылка, ДополнительныеДанные.ДополнительныеФайлыДокумента, НастройкиДокумента);
	ЗаполнитьРолиФайлов(ОбъектУчета);
	
	Делопроизводство.ЗаписатьСостояниеДокумента(ОбъектУчета.Ссылка, ТекущаяДатаСеанса(),
		Перечисления.СостоянияДокументов.Проект, Сотрудники.ОсновнойСотрудник());
	Если ЗначениеЗаполнено(ОбъектУчета.РегистрационныйНомер) И ЗначениеЗаполнено(ОбъектУчета.ДатаРегистрации) Тогда
		Делопроизводство.ЗаписатьСостояниеДокумента(ОбъектУчета.Ссылка, ТекущаяДатаСеанса(),
			Перечисления.СостоянияДокументов.Зарегистрирован, Сотрудники.ОсновнойСотрудник());
	КонецЕсли;
	Делопроизводство.ЗаписатьДанныеДокумента(ОбъектУчета.Ссылка, "ДатаСортировки", ОбъектУчета.ДатаСоздания);	
	
	СсылкаНаОбъектУчета = ОбъектУчета.Ссылка;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиПереопределяемый.ЗаполнитьДанныеПоДокументуПредприятия.
Процедура ЗаполнитьДанныеПоДокументуПредприятия(СсылкаНаОбъект, КонструкторЭД, Отказ) Экспорт

	Данные = Справочники.ДокументыПредприятия.ДанныеДляФорматаДокументПредприятия(СсылкаНаОбъект);
	Данные.Следующий();
	
	ИнформацияДокумента = КонструкторЭД.ИнформацияДокумента(); // см. ОбработкаОбъект.ФорматДокументПредприятия
	ИнформацияДокумента.ВнешнийИдентификатор = XMLСтрока(СсылкаНаОбъект);

	Если Данные.УчитыватьСуммуДокумента Тогда
		ИнформацияДокумента.Сумма = Данные.Сумма;
		Если Данные.ПлательщикНДС Тогда
			ИнформацияДокумента.СуммаНДС = Данные.СуммаНДС;
		КонецЕсли;
	КонецЕсли;
	
	Если Данные.УчитыватьСуммуДокумента И ЗначениеЗаполнено(Данные.Валюта_Код) Тогда
		ИнформацияДокумента.Валюта = КонструкторЭД.НоваяВалюта();
		ИнформацияДокумента.Валюта.Код = Данные.Валюта_Код;
		ИнформацияДокумента.Валюта.Наименование = Данные.Валюта_Наименование;
	КонецЕсли;
	
	Если Данные.УчитыватьСрокДействия Тогда
		ЗаполнитьЗначенияСвойств(ИнформацияДокумента, Данные, "ЯвляетсяБессрочным, ДатаНачалаДействия, ДатаОкончанияДействия");
	КонецЕсли;
	
	Если Данные.УчитыватьСрокДействия И Не Данные.ЯвляетсяБессрочным И ЗначениеЗаполнено(Данные.ПорядокПродления) Тогда
		ИнформацияДокумента.ПорядокПродления = КонструкторЭД.НовыйПорядокПродления();
		ИнформацияДокумента.ПорядокПродления.Идентификатор = ОбщегоНазначения.ИмяЗначенияПеречисления(Данные.ПорядокПродления);
		ИнформацияДокумента.ПорядокПродления.Наименование = Строка(Данные.ПорядокПродления);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ИнформацияДокумента, Данные,, "ПорядокПродления, Контрагент, ФормаДокумента, Сумма, СуммаНДС,
		|ЯвляетсяБессрочным, ДатаНачалаДействия, ДатаОкончанияДействия, Организация");
	ИнформацияДокумента.ФормаДокумента = Строка(Данные.ФормаДокумента);		
	КонструкторЭД.ОбработчикОшибок.УстановитьСвязь(ИнформацияДокумента, "Наименование", "Объект.Наименование",, СсылкаНаОбъект);	

	ИнформацияДокумента.СвойстваВидаДокумента = КонструкторЭД.НовыеСвойстваВидаДокумента();
	ЗаполнитьЗначенияСвойств(ИнформацияДокумента.СвойстваВидаДокумента, Данные);
	ИнформацияДокумента.СвойстваВидаДокумента.Наименование = Данные.ВидДокумента_Наименование;
	ИнформацияДокумента.СоставДокумента =  КонструкторЭД.НовыйСоставБумажногоДокумента();
	ЗаполнитьЗначенияСвойств(ИнформацияДокумента.СоставДокумента, Данные);	
	
	ЗаполнитьСведенияСторонДокументаДляДокументаПредприятия(Данные, ИнформацияДокумента, КонструкторЭД);
	ЗаполнитьСвойстваФайловДокументаПредприятия(СсылкаНаОбъект, ИнформацияДокумента, КонструкторЭД );
	
КонецПроцедуры

#КонецОбласти

// Текст надписи, которая будет отображаться на месте документа учета, если к нему нет доступа
// 
// Возвращаемое значение:
//  Строка
//
Функция ТекстНадписиНетДоступаКОбъектуУчета() Экспорт
	
	Возврат НСтр("ru='<Нет доступа>'");
	
КонецФункции

#КонецОбласти

// Обработчик регламентного задания.
// Формирует документы 1С:Документооборот из входящих электронных документов
Процедура СформироватьДокументыДОПоВходящимЭД() Экспорт
	
	// Формирование документов 1С:Документооборот на основании ЭД.
	СоздатьДокументыДОПоВходящимЭДОАвтоматически();
	
КонецПроцедуры

Процедура СформироватьОбъектыЭДОПоДокументамДО() Экспорт
	
	ПараметрыФормирования = ОбменСКонтрагентамиДОСлужебныйКлиентСервер.НовыеПараметрыФормированияЭДПоДокументамДО();
	
	ПараметрыФормирования.ЭтоРегламентноеЗадание = Истина;
	
	СформироватьЭДПоГотовымДокументамДО(ПараметрыФормирования);
	
КонецПроцедуры

// Возвращает описание состояния обмена по ЭДО документа 1С:Документооборот
// 
// Параметры:
//  ДокументДО - ОпределяемыйТип.ДокументДОДляЭДО - Документ ДО для которого необходимо получить описание состояния
//  ЭтоАннулирование - Булево - Является ли документ документом аннулирования
//  ВнешниеДанныеСостоянияЭДО - Структура - Описание состояния, по которому необходимо получить описание:
//    * Дата - Дата - Дата, на которую актуально состояние
//    * Состояние - ПеречислениеСсылка.СостоянияЭДОДокументооборот - Состояние документа
//    * Направление - ПеречислениеСсылка.НаправленияЭДО - Направление обмена
//    * Комментарий - Строка - Комментарий установки состояния
//    * Контрагент - СправочникСсылка.Контрагенты - Контрагент с которым производится обмен
// 
// Возвращаемое значение:
//  Структура - Описание состояни:
// * СостояниеСНашейСтороны - Строка - Описание состояния с нашей стороны
// * СостояниеСоСтороныКонтрагента - Строка - Описание состояния со стороны контрагента
// * ДатаУстановкиСостояния - Дата - Дата установки состояния
// * СостояниеСНашейСтороныЦвет - Строка - Цвет, которым необходимо выводить состояние с нашей стороны
// * СостояниеСоСтороныКонтрагентаЦвет - Строка - Цвет, которым необходимо выводить состояни со стороны контрагента
Функция ПолучитьОписаниеСостоянияЭДО(ДокументДО, ЭтоАннулирование = Ложь,
	ВнешниеДанныеСостоянияЭДО = Неопределено) Экспорт
	
	ОписаниеСостоянияЭДО = Новый Структура(
		"СостояниеСНашейСтороны, СостояниеСоСтороныКонтрагента, ДатаУстановкиСостояния,
		|СостояниеСНашейСтороныЦвет, СостояниеСоСтороныКонтрагентаЦвет", 
		"", "", Дата(1, 1, 1), "", "");
	
	Если ВнешниеДанныеСостоянияЭДО = Неопределено Тогда
		ДанныеСостоянияЭДО = ОбменСКонтрагентамиДОСлужебный.СостояниеДокумента(ДокументДО);
	Иначе
		ДанныеСостоянияЭДО = ВнешниеДанныеСостоянияЭДО;
	КонецЕсли;
	
	СостояниеЭДО = ДанныеСостоянияЭДО.Состояние;
	Направление = ?(Не ЗначениеЗаполнено(ДанныеСостоянияЭДО.Направление), 
		Перечисления.НаправленияЭДО.Исходящий, 
		ДанныеСостоянияЭДО.Направление);
		
	Если Направление = Перечисления.НаправленияЭДО.Исходящий Тогда
		
		Если Не ЗначениеЗаполнено(СостояниеЭДО) Или СостояниеЭДО = Перечисления.СостоянияЭДОДокументооборот.НеСформирован Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Обмен не начат'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Обмен не начат'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияЭДОДокументооборот.Подписан
				Или СостояниеЭДО = Перечисления.СостоянияЭДОДокументооборот.ОжидаетсяОтправка
				Или СостояниеЭДО = Перечисления.СостоянияЭДОДокументооборот.ОжидаетСозданияПакетаЭДО Тогда
			
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Подписан'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
			
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияЭДОДокументооборот.ПоставленВОчередьНаОтправку Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Ожидается отправка'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияЭДОДокументооборот.Отправлен Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Отправлен'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Ожидается результат проверки'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли Перечисления.СостоянияЭДОДокументооборот.ИсходящийОтклоненКонтрагентом(СостояниеЭДО) Тогда
			
			Если ЭтоАннулирование Тогда
				ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Предложенно аннулирование'");
				ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Отказано в аннулировании'");
				ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
			Иначе
				ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Требуется корректировка'");
				ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Ожидается корректировка'");
				ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
			КонецЕсли;
			
		ИначеЕсли Перечисления.СостоянияЭДОДокументооборот.ОбменВыполненУспешно(СостояниеЭДО) Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Завершен'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Завершен'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияЭДОДокументооборот.ЗакрытПринудительно Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Закрыт принудительно'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияЭДОДокументооборот.ОшибкаПередачи Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Ошибка отправки документа'");
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороныЦвет = "b22222";
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияЭДОДокументооборот.ОжидаетсяПодтверждениеАннулирования Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Предложенно аннулирование'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Ожидается решение о аннулировании'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияЭДОДокументооборот.ТребуетсяАннулировать Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Ожидается решение о аннулировании'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Предложенно аннулирование'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияЭДОДокументооборот.Аннулирован Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Аннулирован'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Аннулирован'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		КонецЕсли;
		
	Иначе
		
		Если Не ЗначениеЗаполнено(СостояниеЭДО) 
				Или СостояниеЭДО = Перечисления.СостоянияЭДОДокументооборот.Получен
				Или СостояниеЭДО = Перечисления.СостоянияЭДОДокументооборот.НаПодписи
				Или СостояниеЭДО = Перечисления.СостоянияЭДОДокументооборот.НаУтверждении Тогда
				
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Требуется проверка'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Подписан'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияЭДОДокументооборот.ОтклоненПолучателем
				Или СостояниеЭДО = Перечисления.СостоянияЭДОДокументооборот.ЗакрытСОтклонением
				Или СостояниеЭДО = Перечисления.СостоянияЭДОДокументооборот.ТребуетсяУточнение
				Или СостояниеЭДО = Перечисления.СостоянияЭДОДокументооборот.ОжидаетсяИсправление Тогда
			
			Если ЭтоАннулирование Тогда
				ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Отказано в аннулировании'");
				ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Предложенно аннулирование'");
				ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
			Иначе
				ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Ожидается исправление'");
				ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Требуется исправление'");
				ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
			КонецЕсли;
			
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияЭДОДокументооборот.Подписан
				Или СостояниеЭДО = Перечисления.СостоянияЭДОДокументооборот.ПоставленВОчередьНаОтправку
				Или СостояниеЭДО = Перечисления.СостоянияЭДОДокументооборот.Отправлен Тогда
				
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Подписан'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Подписан'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли Перечисления.СостоянияЭДОДокументооборот.ОбменВыполненУспешно(СостояниеЭДО) Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Завершен'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Завершен'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияЭДОДокументооборот.НеСформирован Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Обмен не начат'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Обмен не начат'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияЭДОДокументооборот.ЗакрытПринудительно Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Закрыт принудительно'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияЭДОДокументооборот.ОшибкаПередачи Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Ошибка приема документа'");
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороныЦвет = "b22222";
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Подписан'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияЭДОДокументооборот.ОжидаетсяПодтверждениеАннулирования Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Предложенно аннулирование'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Ожидается решение о аннулировании'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияЭДОДокументооборот.ТребуетсяАннулировать Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Ожидается решение о аннулировании'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Предложенно аннулирование'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		ИначеЕсли СостояниеЭДО = Перечисления.СостоянияЭДОДокументооборот.Аннулирован Тогда
			ОписаниеСостоянияЭДО.СостояниеСНашейСтороны = НСтр("ru = 'Аннулирован'");
			ОписаниеСостоянияЭДО.СостояниеСоСтороныКонтрагента = НСтр("ru = 'Аннулирован'");
			ОписаниеСостоянияЭДО.ДатаУстановкиСостояния = ДанныеСостоянияЭДО.Дата;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписаниеСостоянияЭДО;
	
КонецФункции

#Область РассылкаУведомленийОПроблемахЭДО

// Обработчик регламентного задания РассылкаУведомленийОПроблемахЭДО.
// Создает уведомления по ошибкам обмена ЭДО, записанным в регистр "ОшибкиЭДОКИсправлению"
Процедура ОтправитьУведомленияОПроблемахЭДО() Экспорт
	
	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.РассылкаУведомленийОПроблемахЭДО, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РазослатьОзнакомленияОПроблемах(
		РаботаСУведомлениями.СписокПолучателейУведомленийОПроблемах(
			Перечисления.РазделыУведомленийОПроблемах.ОтправкаПоЭДО),
		Ложь);
	РазослатьОзнакомленияОПроблемах(
		РаботаСУведомлениями.СписокПолучателейУведомленийОПроблемах(
			Перечисления.РазделыУведомленийОПроблемах.ПриемПоЭДО),
		Истина);
	
КонецПроцедуры

// Создает уведомления о проблемах обмена ЭДО и ставит в очередь к рассылке указанным получателям
// 
// Параметры:
//  МассивПолучателей - Массив из сотрудников - Массив сотрудников, которые должны получить сообщения о проблеме
//  ЭтоПроблемыПриема - Булево - Указывает, рассылаются ли уведомления о проблемах приема документов, либо о проблемах отправки.
//                    Истина - Рассылать уведомления о проблемах приема документов по ЭДО
//                    Ложь - Рассылать уведомления о проблемах отправки документов по ЭДО
// 
Процедура РазослатьОзнакомленияОПроблемах(МассивПолучателей, ЭтоПроблемыПриема)
	
	Если МассивПолучателей.Количество() = 0 Тогда
		Если ЭтоПроблемыПриема Тогда
			ОписаниеСообщения =
				НСтр("ru = 'Рассылка уведомлений о проблемах приема по ЭДО не проводилась, поскольку нет получателей.'");
		Иначе
			ОписаниеСообщения =
				НСтр("ru = 'Рассылка уведомлений о проблемах отправки по ЭДО не проводилась, поскольку нет получателей.'");
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияОтправкиУведомленийЭДО(),
			УровеньЖурналаРегистрации.Информация, , ,
			ОписаниеСообщения);
		
		Возврат;
	КонецЕсли;
	
	Если ЭтоПроблемыПриема Тогда
		ОписаниеСообщения =
			НСтр("ru = 'Начало рассылки уведомлений о проблемах приема документов по ЭДО'");
	Иначе
		ОписаниеСообщения =
			НСтр("ru = 'Начало рассылки уведомлений о проблемах отправки документов по ЭДО'");
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияОтправкиУведомленийЭДО(),
		УровеньЖурналаРегистрации.Информация, , ,
		ОписаниеСообщения);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ОшибкиЭДОКИсправлению.ПредметОшибки КАК ПредметОшибки,
		|	ОшибкиЭДОКИсправлению.ОписаниеПроблемы КАК ОписаниеПроблемы,
		|	ВЫБОР
		|		КОГДА ОшибкиЭДОКИсправлению.ПредметОшибки ССЫЛКА Справочник.%ИмяСправочникаДокументаДО%
		|			ТОГДА "" (Документ)""
		|		КОГДА ОшибкиЭДОКИсправлению.ПредметОшибки ССЫЛКА Документ.ЭлектронныйДокументВходящийЭДО
		|			ТОГДА "" (Входящий электронный документ)""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ТипПредметаОшибки
		|ИЗ
		|	РегистрСведений.ОшибкиЭДОКИсправлению КАК ОшибкиЭДОКИсправлению
		|ГДЕ
		|	НЕ ОшибкиЭДОКИсправлению.УведомлениеОтправлено
		|	И %УсловиеОперации%";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"%ИмяСправочникаДокументаДО%",
		ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ИмяСправочникаДокументовДО());
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Если ЭтоПроблемыПриема Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"%УсловиеОперации%",
			"ОшибкиЭДОКИсправлению.ПредметОшибки ССЫЛКА Документ.ЭлектронныйДокументВходящийЭДО");
	Иначе
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"%УсловиеОперации%",
			СтрШаблон("ОшибкиЭДОКИсправлению.ПредметОшибки ССЫЛКА Справочник.%1",
				ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ИмяСправочникаДокументовДО()));
	КонецЕсли;
	
	СозданоУведомлений = 0;
	
	ВыборкаНегруппируемых = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаНегруппируемых.Следующий() Цикл
		
		СозданоУведомлений = СозданоУведомлений + 1;
		
		СтрокиОписания = Новый Массив;
		
		Если ЭтоПроблемыПриема Тогда
			СтрокиОписания.Добавить(НСтр("ru ='При приеме по ЭДО документа произошли ошибки'"));
		Иначе
			СтрокиОписания.Добавить(НСтр("ru ='При отправке по ЭДО документа произошли ошибки'"));
		КонецЕсли;
		
		СтрокиОписания.Добавить(
			СтрШаблон(НСтр("ru = 'Предмет ошибки: %1%2.'"),
				РаботаСУведомлениями.ПолучитьНавигационнуюСсылкуУведомления(ВыборкаНегруппируемых.ПредметОшибки),
				ВыборкаНегруппируемых.ТипПредметаОшибки));
		
		СтрокиОписания.Добавить(Символы.ПС);
		
		СтрокиОписания.Добавить(ВыборкаНегруппируемых.ОписаниеПроблемы);
		
		НачатьТранзакцию();
		Попытка
			
			РегистрыСведений.ОшибкиЭДОКИсправлению.УстановитьОтправленностьУведомления(
				ВыборкаНегруппируемых.ПредметОшибки);
			
			Для Каждого Получатель Из МассивПолучателей Цикл
				РаботаСУведомлениями.ОбработатьУведомлениеПрограммы(
					СтрСоединить(СтрокиОписания, Символы.ПС),
					Получатель,
					ВыборкаНегруппируемых.ПредметОшибки);
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			
			СозданоУведомлений = СозданоУведомлений - 1;
			
			Если ЭтоПроблемыПриема Тогда
				ОписаниеПроблемы = СтрШаблон(
					НСтр("ru = 'При отправке уведомления о ошибке приема ЭДО документа %1 возникли ошибки'"),
						ВыборкаНегруппируемых.ПредметОшибки)
					+ Символы.ПС + Символы.ПС
					+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Иначе
				ОписаниеПроблемы = СтрШаблон(
					НСтр("ru = 'При отправке уведомления о ошибке отправки ЭДО документа %1 возникли ошибки'"),
						ВыборкаНегруппируемых.ПредметОшибки)
					+ Символы.ПС + Символы.ПС
					+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецЕсли;
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияОтправкиУведомленийЭДО(),
				УровеньЖурналаРегистрации.Ошибка, ,
				ВыборкаНегруппируемых.ПредметОшибки,
				ОписаниеПроблемы);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ЭтоПроблемыПриема Тогда
		ОписаниеРезультата =
			СтрШаблон(
				НСтр("ru = 'Завершена рассылка уведомлений о проблемах при приеме документов по ЭДО.'")
					+ Символы.ПС
					+ НСтр("ru = 'Создано %1 уведомлений.'"),
				СозданоУведомлений);
	Иначе
		ОписаниеРезультата =
			СтрШаблон(
				НСтр("ru = 'Завершена рассылка уведомлений о проблемах при отправке документов по ЭДО.'")
					+ Символы.ПС
					+ НСтр("ru = 'Создано %1 уведомлений.'"),
				СозданоУведомлений);
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияОтправкиУведомленийЭДО(),
		УровеньЖурналаРегистрации.Информация, , ,
		ОписаниеРезультата);
КонецПроцедуры

#КонецОбласти

#Область ПостановкаДокумента1СДокументооборотВОчередьНаОтправку

Функция ПоставитьДокументВОчередьФормированияЭД(
			Документ,
			КонтрагентыГотовыеКЭДО = Неопределено,
			ПроверятьПодписанДокумент = Истина,
			УстановитьСостояниеПодписан = Ложь,
			ВыводитьСообщение = Истина) Экспорт
	
	Если КонтрагентыГотовыеКЭДО = Неопределено Тогда
		Если Не ДокументГотовКФормированиюИсходящегоЭДО(
				Документ, 
				ВыводитьСообщение, 
				КонтрагентыГотовыеКЭДО, 
				ПроверятьПодписанДокумент) Тогда
				
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(КонтрагентыГотовыеКЭДО) Тогда
		Для Каждого КонтрагентГотовыйКЭДО Из КонтрагентыГотовыеКЭДО Цикл
			ДанныеСостояния = ОбменСКонтрагентамиДОСлужебный.НовыеДанныеСостоянияДляУстановки();
			ДанныеСостояния.Состояние = Перечисления.СостоянияЭДОДокументооборот.Подписан;
			ДанныеСостояния.Направление = Перечисления.НаправленияЭДО.Исходящий;
			
			ОбменСКонтрагентамиДОСлужебный.УстановитьСостояниеДокументаЭДО(
				Документ, 
				КонтрагентГотовыйКЭДО,
				ДанныеСостояния);
		КонецЦикла; 
		
		РегистрыСведений.ОчередьСозданияОбъектовЭДО.ПоставитьВОчередь(Документ);
		
		Возврат Истина;
	КонецЕсли; 
	
	Возврат Ложь;

КонецФункции

#КонецОбласти

#Область ФормированиеДокументов1СДокументооборотНаОснованииОбъектовЭДО

// Создает документы ДО для тех документов ЭДО, которые отмечены к автоматическому созданию
// 
// Возвращаемое значение:
//  Структура:
// * КоличествоКСозданию - Число - Количество документов, которые необходимо было обработать.
// * КоличествоСоздано - Число - Количество документов, по которым удалось создать документы ДО.
// * КоличествоСозданоСОшибками - Число - Количество документов, по которым удалось создать документ ДО,
//                                        но в процессе создания возникли ошибки
// * Ошибки - Массив из Структура - см. ОбменСКонтрагентамиДОСлужебныйКлиентСервер.НоваяОшибкаКонтекстаОтражения()
// * СозданныеДокументы - Соответствие Из КлючИЗначение:
//    ** Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - Документ ЭДО по которому удалось создать документ ДО.
//    ** Значение - ОпределяемыйТип.ДокументДОДляЭДО - Документ ДО, который был создан по входящему ЭДО в ключе.
Функция СоздатьДокументыДОПоВходящимЭДОАвтоматически() Экспорт
	
	ВызватьИсключение ОбменЭДОДокументооборотКлиентСервер.ТекстСообщенияФункционалНеИспользуетсяВНовойВерсии();
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("КоличествоКСозданию", 0);
	СтруктураВозврата.Вставить("КоличествоСоздано", 0);
	СтруктураВозврата.Вставить("КоличествоСозданоСОшибками", 0);
	СтруктураВозврата.Вставить("Ошибки", Новый Массив);
	СтруктураВозврата.Вставить("СозданныеДокументы", Новый Соответствие);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяСобытия = ИмяСобытияСозданияДокументовДОНаОснованииЭД();
	Комментарий = Нстр("ru = 'Начато создание документов 1С:Документооборот на основании ЭД.'");
	ЗаписатьСобытиеВЖурналРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, Комментарий);
	
	ДокументыКОбработке = ВходящиеЭДОКАвтоматическомуСозданиюДокументовДО();
	
	СтруктураВозврата.КоличествоКСозданию = ДокументыКОбработке.Количество();
	
	Для Каждого ДокументЭДО Из ДокументыКОбработке Цикл
		
		РезультатСоздания = СоздатьДокументДОПоВходящемуЭДОВАвтоматическомРежиме(ДокументЭДО);
		
		Если РезультатСоздания.Успех Тогда
			СтруктураВозврата.КоличествоСоздано = СтруктураВозврата.КоличествоСоздано + 1;
			
			Если РезультатСоздания.Ошибки.Количество() > 0 Тогда
				СтруктураВозврата.КоличествоСозданоСОшибками = СтруктураВозврата.КоличествоСозданоСОшибками + 1;
			КонецЕсли;
			
			СтруктураВозврата.СозданныеДокументы.Вставить(ДокументЭДО, РезультатСоздания.ДокументДО);
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтруктураВозврата.Ошибки, РезультатСоздания.Ошибки);
		
	КонецЦикла;
	
	Комментарий = 
		ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ОписаниеРезультатаСозданияДокументовДОПоВходящимЭД(
			СтруктураВозврата.КоличествоКСозданию,
			СтруктураВозврата.КоличествоСоздано,
			СтруктураВозврата.КоличествоСозданоСОшибками);
	ЗаписатьСобытиеВЖурналРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, Комментарий);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция СоздатьДокументДОПоВходящемуЭДОВАвтоматическомРежиме(ДокументЭДО)
	
	РезультатСоздания = Новый Структура;
	РезультатСоздания.Вставить("Успех", Ложь);
	РезультатСоздания.Вставить("Ошибки", Новый Массив);
	РезультатСоздания.Вставить("ДокументДО", Неопределено);
	
	ПопыткаОбработки = РегистрыСведений.ДокументыЭДОКСозданиюВДО.ДобавитьПопыткуАвтоматическогоСоздания(ДокументЭДО);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДокументыЭДОКСозданиюВДО");
	ЭлементБлокировки.УстановитьЗначение("ДокументЭДО", ДокументЭДО);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка.Заблокировать();
		
		КонтекстОтраженияДокумента = ОбменСКонтрагентамиДОСлужебныйКлиентСервер.НовыйКонтекстОтраженияДокументовВДО();
		КонтекстОтраженияДокумента.ДокументЭДО = ДокументЭДО;
		КонтекстОтраженияДокумента.АвтоматическоеВыполнение = Истина;
		
		ОбменСКонтрагентамиДОСлужебный.ЗаполнитьКонтекстОтраженияДокументовВДО(КонтекстОтраженияДокумента);
		
		Если КонтекстОтраженияДокумента.Отказ Тогда
			ОтменитьТранзакцию();
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатСоздания.Ошибки, КонтекстОтраженияДокумента.Ошибки);
			ОбработатьОшибкуСозданияДокументаДО(ДокументЭДО, РезультатСоздания.Ошибки, ПопыткаОбработки);
			Возврат РезультатСоздания;
		КонецЕсли;
		
		ДокументДО = Справочники.ДокументыПредприятия.СоздатьЭлемент();
		
		ЗаполнитьДокументПоШаблону(ДокументДО, 
			КонтекстОтраженияДокумента.ОснованиеЗаполненияДокумента.ДанныеДляОтраженияПоЭДО.ВидДокумента, 
			КонтекстОтраженияДокумента.ОснованиеЗаполненияДокумента.ДанныеДляОтраженияПоЭДО.Тематика);
		ОбменСКонтрагентамиДОСлужебный.ЗаполнитьРеквизитыДокументаПоКонтекстуОтраженияЭДО(
			ДокументДО, КонтекстОтраженияДокумента);
		
		ДокументДО.ДополнительныеСвойства.Вставить("ОтразитьВходящийЭДО", Истина);
		ДокументДО.ДополнительныеСвойства.Вставить("КонтекстОтраженияВходящегоЭДО", КонтекстОтраженияДокумента);
		
		ДокументДО.Записать();
		
		ЗаполнитьОбработкуДокументаПоПОД(ДокументДО);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатСоздания.Ошибки, КонтекстОтраженияДокумента.Ошибки);
		
		ОписаниеПроблемы = Нстр("ru = 'При создании документа возникли ошибки:'")
			+ Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Ошибка = Новый Структура;
		Ошибка.Вставить("Описание", ОписаниеПроблемы);
		Ошибка.Вставить("ПредметОшибки", ДокументЭДО);
		Ошибка.Вставить("Критическая", Истина);
		
		РезультатСоздания.Ошибки.Добавить(Ошибка);
		
		ОбработатьОшибкуСозданияДокументаДО(ДокументЭДО, РезультатСоздания.Ошибки, ПопыткаОбработки);
		
		Возврат РезультатСоздания;
	КонецПопытки;
	
	РезультатСоздания.Успех = Истина;
	РезультатСоздания.ДокументДО = ДокументДО.Ссылка;
	
	Возврат РезультатСоздания;
	
КонецФункции

Функция ИменаПередаваемыхРеквизитов() Экспорт
	
	СтруктураИменПередаваемыхРеквизитов = Новый Структура;
	СтруктураИменПередаваемыхРеквизитов.Вставить("ВидДокумента");
	СтруктураИменПередаваемыхРеквизитов.Вставить("КонтактноеЛицо");
	СтруктураИменПередаваемыхРеквизитов.Вставить("Стороны");
	СтруктураИменПередаваемыхРеквизитов.Вставить("ДатаСоздания");
	
	СтруктураИменПередаваемыхРеквизитов.Вставить("Сумма");
	СтруктураИменПередаваемыхРеквизитов.Вставить("СуммаНДС");
	СтруктураИменПередаваемыхРеквизитов.Вставить("Валюта");
	
	СтруктураИменПередаваемыхРеквизитов.Вставить("КоличествоЛистов");
	СтруктураИменПередаваемыхРеквизитов.Вставить("КоличествоПриложений");
	СтруктураИменПередаваемыхРеквизитов.Вставить("КоличествоЭкземпляров");
	СтруктураИменПередаваемыхРеквизитов.Вставить("ЛистовВПриложениях");
	
	СтруктураИменПередаваемыхРеквизитов.Вставить("Папка");
	СтруктураИменПередаваемыхРеквизитов.Вставить("ГрифДоступа");
	СтруктураИменПередаваемыхРеквизитов.Вставить("Ответственный");
	СтруктураИменПередаваемыхРеквизитов.Вставить("ВопросДеятельности");
	
	СтруктураИменПередаваемыхРеквизитов.Вставить("ДатаНачалаДействия");
	СтруктураИменПередаваемыхРеквизитов.Вставить("ДатаОкончанияДействия");
	СтруктураИменПередаваемыхРеквизитов.Вставить("Бессрочный");
	СтруктураИменПередаваемыхРеквизитов.Вставить("ПорядокПродления");
	
	СтруктураИменПередаваемыхРеквизитов.Вставить("ИдентификаторДокументаДО");
	
	Возврат СтруктураИменПередаваемыхРеквизитов;
	
КонецФункции

Процедура ОбработатьОшибкуСозданияДокументаДО(ДокументЭДО, Ошибки, ПопыткаОбработки)
	
	СтрокиОшибок = Новый Массив;
	
	Для Каждого Ошибка Из Ошибки Цикл
		СтрокиОшибок.Добавить(Ошибка.Описание);
	КонецЦикла;
	
	ОписаниеПроблемы = СтрСоединить(СтрокиОшибок, Символы.ПС + Символы.ПС);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияСозданияДокументовДОНаОснованииЭД(),
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Документы.ЭлектронныйДокументВходящийЭДО,
		ДокументЭДО,
		СтрШаблон(НСтр("ru = 'При создании документа 1С:Документооборот по входящему ЭДО %1 возникли проблемы:'"),
			ДокументЭДО)
			+ Символы.ПС
			+ ОписаниеПроблемы);
	
	Если ПопыткаОбработки > 2 Тогда
		
		НачатьТранзакцию();
		Попытка
			РегистрыСведений.ОшибкиЭДОКИсправлению.ДобавитьЗаписьОбОшибке(
				ДокументЭДО,
				ОписаниеПроблемы);
			
			РегистрыСведений.ДокументыЭДОКСозданиюВДО.СнятьДокументСАвтоматическогоСоздания(ДокументЭДО);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Не удалось записать ошибку создания документа 1С:Документооборот по входящему ЭДО.'"),
				УровеньЖурналаРегистрации.Ошибка, , ,
				СтрШаблон(НСтр("ru = 'Не удалось снять входящий документ ЭДО %1 с автоматического создания и сделать запись о ошибке приема по причине:'"),
					ДокументЭДО)
					+ Символы.ПС
					+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВходящиеЭДОКАвтоматическомуСозданиюДокументовДО()
	
	ДокументыЭДО = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументыЭДОКСозданиюВДО.ДокументЭДО
		|ИЗ
		|	РегистрСведений.ДокументыЭДОКСозданиюВДО КАК ДокументыЭДОКСозданиюВДО
		|ГДЕ
		|	ДокументыЭДОКСозданиюВДО.АвтоматическоеСоздание
		|	И ДокументыЭДОКСозданиюВДО.КоличествоПопытокОбработки < 3";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументыЭДО.Добавить(Выборка.ДокументЭДО);
	КонецЦикла;
	
	Возврат ДокументыЭДО;
	
КонецФункции

Процедура ЗаполнитьОбработкуДокументаПоПОД(ДокументДО)
	
	Обработка = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(ДокументДО.Ссылка);
	
	Если ЗначениеЗаполнено(Обработка) Тогда
		Возврат;
	КонецЕсли;
	
	Обработка = Справочники.ОбработкиОбъектов.НоваяОбработкаОбъекта(ДокументДО.Ссылка);
	
	ПравилаОбработкиСервер.ЗаполнитьДействияПрограммно(
		ДокументДО.Ссылка,
		Сотрудники.ОсновнойСотрудникПользователя(
			?(ЗначениеЗаполнено(ДокументДО.Ответственный),
				ДокументДО.Ответственный,
				"ТекущийПользователь")));
	
КонецПроцедуры



#Область ПараметрыЗаполненияСтроковыхПолей

Функция НовыеПараметрыЗаполненияСтроковыхПолей() Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	
	ПараметрыЗаполнения.Вставить("ВидДокументаЭДО",    Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("ДатаДокумента",      Дата(1, 1, 1));
	ПараметрыЗаполнения.Вставить("НомерДокумента",     "");
	ПараметрыЗаполнения.Вставить("ДатаЭД",             Дата(1, 1, 1));
	ПараметрыЗаполнения.Вставить("НомерЭД",            "");
	ПараметрыЗаполнения.Вставить("Организация",        Справочники.Организации.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("Контрагент",         Справочники.Контрагенты);
	ПараметрыЗаполнения.Вставить("Сумма",              0);
	ПараметрыЗаполнения.Вставить("Валюта",             Справочники.Валюты.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("Шаблон",             Справочники.ШаблоныДокументов.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("Ответственный",      Справочники.Сотрудники.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("Папка",              Справочники.ПапкиДокументов.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("ГрифДоступа",        Справочники.ГрифыДоступа.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("ВопросДеятельности", Справочники.ВопросыДеятельности.ПустаяСсылка());
	
	ПараметрыЗаполнения.Вставить("ВходящийЭД",         Документы.ЭлектронныйДокументВходящийЭДО.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("СообщениеЭДО",       Документы.СообщениеЭДО.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("ФайлЭД",             Справочники.СообщениеЭДОПрисоединенныеФайлы.ПустаяСсылка());
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Возвращает дерево параметров для заполнения строковых полей
// 
// Параметры:
//  ИмяМакета - Строка - Имя макета, содержащего описание параметров заполнения строковых полей.
// 
// Возвращаемое значение:
//  ДеревоЗначений - дерево, содержащее в себе доступные параметры для вывода. Колонки:
//      Представление - Строка - то, как пользователь увидит параметр
//      ПредставлениеПолное - Строка - полный путь до параметра для пользователя
//      ИмяПоля - Строка - Имя поля структуры параметров
//      ПолучатьЗапросом - Булево - Необходимо ли получать данный параметр запросом 
//      ИмяТаблицы - Строка - имя таблицы для построения запроса
//      КлючТаблицы - Строка - имя поля, по которому наложено условие на отбор из таблицы
//      ЗначениеКлючаТаблицы - Строка - имя поля структуры парметров, по значению которого будет наложено условие
//                             см. ПараметрыЗаполненияСтроковыхПолей()
//      ДоступноДляВыбора - Булево - Доступен ли данный параметр для выбора
Функция ДеревоПараметровЗаполненияСтроковыхПолей(ИмяМакета = "ДеревоПараметровСозданияДокумента") Экспорт
	
	Макет = РегистрыСведений.ПравилаУчетаВидовЭДДО.ПолучитьМакет(ИмяМакета);
	ОбластьЗаголовоков = Макет.Область("C1:C13");
	
	Построитель = Новый ПостроительЗапроса;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьЗаголовоков);
	Построитель.Выполнить();
	
	ВыборкаДанныхМакета = Построитель.Результат.Выбрать();
	
	ДеревоПараметров = Новый ДеревоЗначений;
	
	ДеревоПараметров.Колонки.Добавить("КодСтроки");
	ДеревоПараметров.Колонки.Добавить("Представление");
	ДеревоПараметров.Колонки.Добавить("ПредставлениеПолное");
	ДеревоПараметров.Колонки.Добавить("ИмяПоля");
	ДеревоПараметров.Колонки.Добавить("ПолучатьЗапросом");
	ДеревоПараметров.Колонки.Добавить("ИмяТаблицы");
	ДеревоПараметров.Колонки.Добавить("КлючТаблицы");
	ДеревоПараметров.Колонки.Добавить("ЗначениеКлючаТаблицы");
	ДеревоПараметров.Колонки.Добавить("ДоступноДляВыбора");
	
	Пока ВыборкаДанныхМакета.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаДанныхМакета.ИмяФункциональнойОпции)
			И Не ПолучитьФункциональнуюОпцию(ВыборкаДанныхМакета.ИмяФункциональнойОпции) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Родитель = ДеревоПараметров.Строки.Найти(
			ВыборкаДанныхМакета.КодСтрокиРодителя,
			"КодСтроки",
			Истина);
		
		Если Родитель = Неопределено Тогда
			СтрокаДерева = ДеревоПараметров.Строки.Добавить();
		Иначе
			СтрокаДерева = Родитель.Строки.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(
			СтрокаДерева,
			ВыборкаДанныхМакета,
			"КодСтроки, Представление, ПредставлениеПолное, ИмяПоля");
		
		Если НРег(ВыборкаДанныхМакета.ДоступноДляВыбора) <> "да" Тогда
			СтрокаДерева.ДоступноДляВыбора = Ложь;
			Продолжить;
		Иначе
			СтрокаДерева.ДоступноДляВыбора = Истина;
		КонецЕсли;
		
		Если НРег(ВыборкаДанныхМакета.ПолучатьЗапросом) <> "да" Тогда
			СтрокаДерева.ПолучатьЗапросом = Ложь;
		Иначе
			
			СтрокаДерева.ПолучатьЗапросом = Истина;
			ЗаполнитьЗначенияСвойств(
				СтрокаДерева,
				ВыборкаДанныхМакета,
				"ИмяТаблицы, КлючТаблицы, ЗначениеКлючаТаблицы");
			
		КонецЕсли;
		
		Если НРег(ВыборкаДанныхМакета.ДобавитьРеквизиты) = "да" Тогда
			
			ДобавитьРеквизитыВСтрокуДереваЗаполненияСтроковыхПолей(
				СтрокаДерева,
				ВыборкаДанныхМакета.ИмяОбъектаМетаданных);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДеревоПараметров;
	
КонецФункции // ПолучитьДеревоЗаполненияСтроковыхПолей()

// Добавляет в дочерние строки реквизиты объекта метаданных
// 
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - строка дерева, к которой нужно добавить дочерние строки с реквизитам,
//                 см. ДеревоПараметровЗаполненияСтроковыхПолей()
//  ОбъектМетаданных - ОбъектМетаданных - объект метаданных конфигурации, реквизиты которого нужно добавить к выбору
//  ИмяТаблицы - Строка - Имя таблицы для построения запроса
Процедура ДобавитьРеквизитыВСтрокуДереваЗаполненияСтроковыхПолей(СтрокаДерева, ИмяОбъектаМетаданных);
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяОбъектаМетаданных);
	
	Для каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		
		НовСтрДерева = СтрокаДерева.Строки.Добавить();
		НовСтрДерева.Представление				= Реквизит.Представление();
		НовСтрДерева.ПредставлениеПолное		= СтрокаДерева.ПредставлениеПолное + "|" + Реквизит.Имя;
		НовСтрДерева.ИмяПоля					= Реквизит.Имя;
		НовСтрДерева.ПолучатьЗапросом			= Истина;
		НовСтрДерева.ИмяТаблицы					= ИмяОбъектаМетаданных;
		НовСтрДерева.КлючТаблицы				= "Ссылка";
		НовСтрДерева.ЗначениеКлючаТаблицы		= СтрокаДерева.ИмяПоля;
		НовСтрДерева.ДоступноДляВыбора			= Истина;
		
	КонецЦикла;
	
КонецПроцедуры

// Выделяет параметры из шаблона
//
// Параметры:
//  ШаблонСтроковогоПоля - Строка - Строка, содержащая шаблон для подстановки параметров.
//      Параметры выделяются квадратными скобками [ и ], не могут иметь вложенной структуры, параметр не может быть пустым.
//
// Возвращаемое значение:
//  Структура - Описание результата выделения параметров:
//      Успех - Булево - определяет, успешно ли завершена операция выделения параметров
//      Описание - Строка - строковое описание результата выполнения операции
//      МассивПараметров - Массив - массив строк, которые выделены как параметры в шаблоне, т.е. заключены в квадратные скобки [].
Функция ПараметрыВШаблонеСтроковогоПоля(ШаблонСтроковогоПоля) Экспорт
	
	СтруктураВозврата = Новый Структура("Успех, МассивПараметров, Описание");
	
	МассивПараметровВСтроке = Новый Массив;
	
	Индекс = 1;
	ПоложениеОткрывающейСкобки = 0;
	ПоложениеЗакрывающейСкобки = 0;
	СкобкаОткрыта = Ложь;
	
	ДлинаСтроки = СтрДлина(ШаблонСтроковогоПоля);
	
	Пока Индекс <= ДлинаСтроки Цикл
		
		ТекущийСимвол = Сред(ШаблонСтроковогоПоля, Индекс, 1);
		
		Если ТекущийСимвол = "[" Тогда
			
			Если Не СкобкаОткрыта Тогда
				
				ПоложениеОткрывающейСкобки = Индекс;
				СкобкаОткрыта = Истина;
				
			Иначе
				
				ПроблемныйУчастокТекста = Сред(
					ШаблонСтроковогоПоля,
					ПоложениеОткрывающейСкобки,
					Индекс - ПоложениеОткрывающейСкобки + 1);
				
				СтруктураВозврата.Успех = Ложь;
				СтруктураВозврата.Описание = СтрШаблон(
					НСтр("ru = 'На участке ""%1"" отсутсвует закрывающая скобка ""]""'"),
					ПроблемныйУчастокТекста);
				
				Возврат СтруктураВозврата;
			
			КонецЕсли;
			
		ИначеЕсли ТекущийСимвол = "]" Тогда
			
			Если Не СкобкаОткрыта Тогда
				
				ПроблемныйУчастокТекста = Сред(
					ШаблонСтроковогоПоля,
					?(ПоложениеЗакрывающейСкобки = 0, 1, ПоложениеЗакрывающейСкобки),
					Индекс - ПоложениеЗакрывающейСкобки + 1);
				
				СтруктураВозврата.Успех = Ложь;
				СтруктураВозврата.Описание = СтрШаблон(
					НСтр("ru = 'На участке ""%1"" отсутствует открывающая скобка ""[""'"),
					ПроблемныйУчастокТекста);
				
				Возврат СтруктураВозврата;
				
			Иначе
			
				ПоложениеЗакрывающейСкобки = Индекс;
				СкобкаОткрыта = Ложь;
				
				Если ПоложениеЗакрывающейСкобки - ПоложениеОткрывающейСкобки <= 1 Тогда
					
					НачСимволПроблемногоУчастка = 
						?(ПоложениеОткрывающейСкобки > 5,
						ПоложениеОткрывающейСкобки - 5,
						1);
					КонСимволПроблемногоУчастка =
						?(ДлинаСтроки - ПоложениеЗакрывающейСкобки > 5,
						ПоложениеЗакрывающейСкобки + 5,
						ДлинаСтроки);
					
					ПроблемныйУчастокТекста = Сред(
						ШаблонСтроковогоПоля,
						НачСимволПроблемногоУчастка,
						КонСимволПроблемногоУчастка - НачСимволПроблемногоУчастка + 1);
					
					СтруктураВозврата.Успех = Ложь;
					СтруктураВозврата.Описание = СтрШаблон(
						НСтр("ru = 'На участке ""%1"" присутствует пустой параметр'"),
						ПроблемныйУчастокТекста);
					
					Возврат СтруктураВозврата;
					
				КонецЕсли;
				
				СтрокаПараметра = Сред(
					ШаблонСтроковогоПоля,
					ПоложениеОткрывающейСкобки + 1,
					ПоложениеЗакрывающейСкобки - ПоложениеОткрывающейСкобки - 1);
				
				МассивПараметровВСтроке.Добавить(СтрокаПараметра);
			
			КонецЕсли;
			
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Если СкобкаОткрыта Тогда
		ПроблемныйУчастокТекста = Сред(
			ШаблонСтроковогоПоля,
			ПоложениеОткрывающейСкобки);
		
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание = СтрШаблон(
			НСтр("ru = 'На участке ""%1"" отсутсвует закрывающая скобка ""]""'"),
			ПроблемныйУчастокТекста);
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	СтруктураВозврата.Успех = Истина;
	СтруктураВозврата.Описание = НСтр("ru = 'Операция выделения параметров завершена успешно'");
	СтруктураВозврата.МассивПараметров = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивПараметровВСтроке);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Выполняет заполнение шаблона строки по строковым параметрам, описанным в функции ДеревоПараметровЗаполненияСтроковыхПолей()
// 
// Параметры:
//  ШаблонСтроки - Строка - Строка, содержащая шаблон для подстановки параметров.
//      Параметры выделяются квадратными скобками [ и ], не могут иметь вложенной структуры, параметр не может быть пустым,
//      все параметры должны быть описаны в дереве возвращаемом функцией ДеревоПараметровЗаполненияСтроковыхПолей()
//  ПараметрыЗаполненияСтроковыхПолей - Структура, содержащая значения для подстановки параметров,
//                                      см. ПараметрыЗаполненияСтроковыхПолей()
//  ИмяМакета - Строка - Имя макета, содержащего описание параметров заполнения строковых полей.
// 
// Возвращаемое значение:
//  Структура - результат заполнения
//      * Успех - Булево - Указывает, завершилась ли операция заполнения успехом.
//      * ЗаполненнаяСтрока - Строка, Неопределено - В случае успеха возвращает строку с заполненными параметрами, в случае неудачи - Неопределено.
//      * Описание - Строка - Описание результата выполнения операции, в случае неудачи - описание ошибки.
Функция ЗаполнитьСтроковыеПараметрыПоШаблону(ШаблонСтроки, ПараметрыЗаполненияСтроковыхПолей,
	ИмяМакета = "ДеревоПараметровСозданияДокумента") Экспорт
	
	СтруктураВозврата = Новый Структура("Успех, ЗаполненнаяСтрока, Описание");
	
	РазборПараметров = ПараметрыВШаблонеСтроковогоПоля(ШаблонСтроки);
	
	Если Не РазборПараметров.Успех Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, РазборПараметров);
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ЗначенияПараметров = Новый Соответствие;
	
	ТаблицаДляСоставленияЗапросов = Новый ТаблицаЗначений;
	ТаблицаДляСоставленияЗапросов.Колонки.Добавить("ИмяТаблицы");
	ТаблицаДляСоставленияЗапросов.Колонки.Добавить("КлючТаблицы");
	ТаблицаДляСоставленияЗапросов.Колонки.Добавить("ЗначениеКлючаТаблицы");
	ТаблицаДляСоставленияЗапросов.Колонки.Добавить("ОписанияПолучаемыхПараметров");
	
	ДеревоПараметров = ДеревоПараметровЗаполненияСтроковыхПолей(ИмяМакета);
	
	Для каждого ИмяПараметра Из РазборПараметров.МассивПараметров Цикл
		
		ОписаниеПараметра = ДеревоПараметров.Строки.Найти(ИмяПараметра, "ПредставлениеПолное", Истина);
		
		Если ОписаниеПараметра = Неопределено Тогда
			
			СтруктураВозврата.Успех = Ложь;
			СтруктураВозврата.Описание = СтрШаблон(
				НСтр("ru = 'Параметр [%1] не найден в возможных параметрах заполнения.'") +
				Символы.ПС +
				НСтр("ru = 'Пожалуйста проверьте корректность указания этого параметра,'") + 
				Символы.ПС +
				НСтр("ru = 'при необходимости перетащите его из дерева доступных параметров'"),
				ИмяПараметра);
			
			Возврат СтруктураВозврата;
			
		КонецЕсли;
		
		Если Не ОписаниеПараметра.ПолучатьЗапросом Тогда
			
			ЗначенияПараметров.Вставить(
				ИмяПараметра,
				ПараметрыЗаполненияСтроковыхПолей[ОписаниеПараметра.ИмяПоля]);
			
		Иначе
			
			ОтборСтрокТаблицы = Новый Структура("ИмяТаблицы, КлючТаблицы, ЗначениеКлючаТаблицы");
			ЗаполнитьЗначенияСвойств(ОтборСтрокТаблицы, ОписаниеПараметра);
			
			СтрокиТаблицы = ТаблицаДляСоставленияЗапросов.НайтиСтроки(ОтборСтрокТаблицы);
			
			Если СтрокиТаблицы.Количество() > 0 Тогда
				СтрокаТаблицыДляЗапроса = СтрокиТаблицы[0];
			Иначе
				СтрокаТаблицыДляЗапроса = ТаблицаДляСоставленияЗапросов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыДляЗапроса, ОтборСтрокТаблицы);
				СтрокаТаблицыДляЗапроса.ОписанияПолучаемыхПараметров = Новый Массив;
			КонецЕсли;
			
			ОписаниеПолученияПараметра = Новый Структура;
			
			ОписаниеПолученияПараметра.Вставить("Представление", ИмяПараметра);
			ОписаниеПолученияПараметра.Вставить("ИмяПоля", ОписаниеПараметра.ИмяПоля);
			
			СтрокаТаблицыДляЗапроса.ОписанияПолучаемыхПараметров.Добавить(ОписаниеПолученияПараметра);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьЗначенияПараметровВСоответствиеПоЗапросу(
		ЗначенияПараметров,
		ТаблицаДляСоставленияЗапросов,
		ПараметрыЗаполненияСтроковыхПолей);
	
	ЗаполненнаяСтрока = ШаблонСтроки;
	
	Для каждого Параметр Из ЗначенияПараметров Цикл
		
		СтрокаДляПодстановки = "";
		ТипЗначения = ТипЗнч(Параметр.Значение);
		
		Если ТипЗначения = Тип("Дата") Тогда
			СтрокаДляПодстановки = Формат(Параметр.Значение, "ДФ=dd.MM.yyyy")
		Иначе
			СтрокаДляПодстановки = Строка(Параметр.Значение);
		КонецЕсли;
		
		ЗаполненнаяСтрока = СтрЗаменить(
			ЗаполненнаяСтрока,
			"[" + Параметр.Ключ + "]",
			СтрокаДляПодстановки);
		
	КонецЦикла;
	
	СтруктураВозврата.Успех = Истина;
	СтруктураВозврата.Описание = НСтр("ru = 'Строка заполнена успешно'");
	СтруктураВозврата.ЗаполненнаяСтрока = ЗаполненнаяСтрока;
	
	Возврат СтруктураВозврата;
	
КонецФункции // ЗаполнитьСтрокуПоШаблону()

// Добавляет значения параметров в соответствие, получаемые из запроса
//
// Параметры:
//  ЗначенияПараметров - Соответствие - Соответствие, в которое будут добавлены значения параметров
//      Ключ - Строка - полное представление параметра,
//      Значение - Произвольный - Значение параметра
//  ТаблицаДляЗапроса - ТаблицаЗначений - Таблица, по которой будет строится запрос на получение значений параметров. Колонки:
//      * ИмяТаблицы - Строка - Имя таблица базы данных для построения запроса.
//      * КлючТаблицы - Строка - Имя поля таблицы, по которому будет производится отбор
//      * ЗначениеКлючаТаблицы - Строка - Имя поля в структуре параметров, по которому будет производиться отбор
//      * ОписанияПолучаемыхПараметров - Массив - МассивСтруктур, содержащих описание параметров, получаемых из запроса.
//          Описание структур параметров:
//              * Представление - Строка - Полное представление параметра
//              * ИмяПоля - Строка - Имя поля в таблице запроса.
//  ПараметрыЗаполненияСтроковыхПолей - Структура - Структура, содержащая значения параметров для подстановки.
//
Процедура ДобавитьЗначенияПараметровВСоответствиеПоЗапросу(ЗначенияПараметров, ТаблицаДляЗапроса,
		ПараметрыЗаполненияСтроковыхПолей)
	
	Если ТаблицаДляЗапроса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	НомерЗапроса = 0;
	
	Для каждого СтрокаДляЗапроса Из ТаблицаДляЗапроса Цикл
		
		НомерЗапроса = НомерЗапроса + 1;
		
		ТекстЗапроса = ТекстЗапроса +
			?(ТекстЗапроса = "",
			"",
			"
			|;
			|//////////////////////////////////
			|") +
			"
			|ВЫБРАТЬ ПЕРВЫЕ 1";
		
		КоличествоПолей = СтрокаДляЗапроса.ОписанияПолучаемыхПараметров.Количество();
		
		МассивДобавленныхПолей = Новый Массив;
		
		Для Индекс = 0 По КоличествоПолей - 1 Цикл
			ПолучаемоеПоле = СтрокаДляЗапроса.ОписанияПолучаемыхПараметров[Индекс];
			ИмяПоля = ПолучаемоеПоле.ИмяПоля;
			
			Если МассивДобавленныхПолей.Найти(ИмяПоля) = Неопределено Тогда
				
				ТекстЗапроса = ТекстЗапроса + "
					|	Таблица." + ИмяПоля + " КАК " + ИмяПоля + ?(Индекс = КоличествоПолей - 1, "", ",");
				
				МассивДобавленныхПолей.Добавить(ИмяПоля);
				
			КонецЕсли;
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + "
			|ИЗ
			|	" + СтрокаДляЗапроса.ИмяТаблицы + " КАК Таблица
			|
			|ГДЕ
			|	Таблица." + СтрокаДляЗапроса.КлючТаблицы + " = &Параметр" + НомерЗапроса;
		
		Запрос.УстановитьПараметр("Параметр" + НомерЗапроса,
			ПараметрыЗаполненияСтроковыхПолей[СтрокаДляЗапроса.ЗначениеКлючаТаблицы]);
		
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Индекс = 0 По ТаблицаДляЗапроса.Количество() - 1 Цикл
		
		ТаблицаРезультатаЗапроса = МассивРезультатов[Индекс].Выгрузить();;
		СтрокаЗапроса = ТаблицаДляЗапроса[Индекс];
		
		Если ТаблицаРезультатаЗапроса.Количество() > 0 Тогда
			
			Для каждого ОписаниеПараметра Из СтрокаЗапроса.ОписанияПолучаемыхПараметров Цикл
				ЗначенияПараметров.Вставить(
					ОписаниеПараметра.Представление,
					ТаблицаРезультатаЗапроса[0][ОписаниеПараметра.ИмяПоля]);
			КонецЦикла;
			
		Иначе
			
			Для каждого ОписаниеПараметра Из СтрокаЗапроса.ОписанияПолучаемыхПараметров Цикл
				ЗначенияПараметров.Вставить(ОписаниеПараметра.Представление, Неопределено);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ФормированиеОбъектовЭДОНаОснованииДокументов1СДокументооборот

// Формирует электронные документы по документам 1С:Документооборот
// 
// Параметры:
// 	ПараметрыФормирования - Неопределено, Структура -
// 	                        см. ОбменСКонтрагентамиДОСлужебныйКлиентСервер.НовыеПараметрыФормированияЭДПоДокументамДО
// Возвращаемое значение:
// 	Структура - Результат формирования объектов ЭДО:
// * ОшибкиФормироваия - Соответствие Из КлючИЗначение:
//     ** Ключ - ОпределяемыйТип.ДокументДОДляЭДО - Документ к которому относится ошибка.
//     ** Значение - Строка - Описание ошибки
// * ОбработанныеДокументы - Соответствие Из КлючИЗначение:
//     ** Ключ - ОпределяемыйТип.ДокументДОДляЭДО - Документ ДО.
//     ** Значение - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - Документ ЭДО
Функция СформироватьЭДПоГотовымДокументамДО(Знач ПараметрыФормирования = Неопределено) Экспорт
	
	ВызватьИсключение ОбменЭДОДокументооборотКлиентСервер.ТекстСообщенияФункционалНеИспользуетсяВНовойВерсии();
	
	Если Не ЗначениеЗаполнено(ПараметрыФормирования) Тогда
		ПараметрыФормирования = ОбменСКонтрагентамиДОСлужебныйКлиентСервер.НовыеПараметрыФормированияЭДПоДокументамДО();
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяСобытия = ИмяСобытияСозданияЭДНаОснованииДокументовДО();
	
	Комментарий = Нстр("ru = 'Начато создание ЭД на основании документов 1С:Документооборот.'");
	ЗаписатьСобытиеВЖурналРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, Комментарий);
	
	СтруктураВозврата.Вставить("ОбработанныеДокументы", Новый Соответствие);
	СтруктураВозврата.Вставить("ОшибкиФормирования", Новый Соответствие);
	
	ДокументыКСозданиюОбъектовЭДО = ДокументыКСозданиюОбъектовЭДО(ПараметрыФормирования);
	
	КСозданию = ДокументыКСозданиюОбъектовЭДО.Количество();
	
	Для Каждого Документ Из ДокументыКСозданиюОбъектовЭДО Цикл
		
		КонтекстФормирования = Новый Структура;
		КонтекстФормирования.Вставить("Документ", Документ);
		КонтекстФормирования.Вставить("ЭтоРегламентноеЗадание", ПараметрыФормирования.ЭтоРегламентноеЗадание);
		
		Результат = СформироватьЭДПоДокументуДО(КонтекстФормирования);
		
		Если Результат.Успех Тогда
			ДанныеПоОбработанномуДокументу = Новый Структура;
			ДанныеПоОбработанномуДокументу.Вставить("ДокументЭДО", Результат.ДокументЭДО);
			ДанныеПоОбработанномуДокументу.Вставить("Состояние", Результат.Состояние);
			
			СтруктураВозврата.ОбработанныеДокументы.Вставить(
				КонтекстФормирования.Документ, ДанныеПоОбработанномуДокументу);
		Иначе
			СтруктураВозврата.ОшибкиФормирования.Вставить(
				КонтекстФормирования.Документ, Результат.ОписаниеОшибкиСоздания);
		КонецЕсли;
		
	КонецЦикла;
	
	Комментарий = ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ОписаниеРезультатаСозданияЭДПоДокументамДО(
		КСозданию, СтруктураВозврата.ОбработанныеДокументы.Количество());
		
	ЗаписатьСобытиеВЖурналРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, Комментарий);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ДокументыКСозданиюОбъектовЭДО(ПараметрыФормирования = Неопределено)
	
	ДокументыКСозданию = Новый Массив;
	
	Если ТипЗнч(ПараметрыФормирования) = Тип("Структура")
		И ПараметрыФормирования.ДокументыДО.Количество() > 0 Тогда
		
		ДокументыКСозданию = ПараметрыФормирования.ДокументыДО;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ОчередьСозданияОбъектовЭДО.Документ
			|ИЗ
			|	РегистрСведений.ОчередьСозданияОбъектовЭДО КАК ОчередьСозданияОбъектовЭДО
			|ГДЕ
			|	ОчередьСозданияОбъектовЭДО.КоличествоПопытокОбработки < 3";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ДокументыКСозданию.Добавить(Выборка.Документ);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДокументыКСозданию;
	
КонецФункции

Функция СформироватьЭДПоДокументуДО(КонтекстФормирования)
	
	СтруктураВозврата = Новый Структура("Успех, ДокументЭДО, Состояние, ОписаниеОшибкиСоздания");
	
	КонтекстФормирования.Вставить("ПопыткаОбработки", 0);
	
	// Добавляем попытку обработки и удаляем ошибки только в случае запуска регламентным заданием.
	//  В ином случае ошибки будут выданы пользователю, он посмотрит, что нужно исправить в документе.
	Если КонтекстФормирования.ЭтоРегламентноеЗадание Тогда
		
		КонтекстФормирования.ПопыткаОбработки = 
			РегистрыСведений.ОчередьСозданияОбъектовЭДО.ДобавитьПопыткуОбработки(КонтекстФормирования.Документ);
		
		РегистрыСведений.ОшибкиЭДОКИсправлению.УдалитьЗаписьОбОшибке(КонтекстФормирования.Документ);
		
	КонецЕсли;
	
	РезультатПроверки = ВозможностьСозданияЭД(КонтекстФормирования);
	
	Блокировка = Новый БлокировкаДанных();
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостояниеДокументовПоЭДО");
	ЭлементБлокировки.УстановитьЗначение("ДокументДО", КонтекстФормирования.Документ);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СоставПакетовЭДОДокументооборот");
	ЭлементБлокировки.УстановитьЗначение("Документ", КонтекстФормирования.Документ);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Если Не РезультатПроверки.Успех Тогда
		
		ОбработатьОшибкуФормированияЭД(
			КонтекстФормирования,
			РезультатПроверки.Описание);
		
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.ОписаниеОшибкиСоздания = РезультатПроверки.Описание;
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	Если Не РезультатПроверки.Свойство("ПараметрыОтправки")
		ИЛИ ТипЗнч(РезультатПроверки.ПараметрыОтправки) <> Тип("Структура") Тогда
		
		ОписаниеПроблемы = 
			НСтр("ru = 'Не удалось получить параметры отправки документа.'");
		
		ОбработатьОшибкуФормированияЭД(
			КонтекстФормирования,
			ОписаниеПроблемы);
		
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.ОписаниеОшибкиСоздания = ОписаниеПроблемы;
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка.Заблокировать();
		
		РезультатПроверкиФайла = ПроверитьСоответствиеФайлаПараметрамОтправки(
			КонтекстФормирования, РезультатПроверки.ПараметрыОтправки);
		
		Если Не РезультатПроверкиФайла.Успех Тогда
			
			ОтменитьТранзакцию();
			
			ОбработатьОшибкуФормированияЭД(
				КонтекстФормирования,
				РезультатПроверкиФайла.ОписаниеОшибки);
			
			СтруктураВозврата.Успех = Ложь;
			СтруктураВозврата.ОписаниеОшибкиСоздания = РезультатПроверкиФайла.ОписаниеОшибки;
			Возврат СтруктураВозврата;
			
		КонецЕсли;
		
		НастройкиОтправки = РезультатПроверкиФайла.НастройкиОтправки;
		
		КонтекстФормирования.Вставить("НастройкиОтправки", НастройкиОтправки);
		
		Если ЗначениеЗаполнено(НастройкиОтправки.Формат) Тогда
			
			ДокументЭДО = СформироватьФормализованныйЭД(КонтекстФормирования);
			
		Иначе
			
			ДокументЭДО = СформироватьПроизвольныйЭД(КонтекстФормирования);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДокументЭДО) Тогда
			
			ОтменитьТранзакцию();
			
			ОписаниеПроблемы = 
				НСтр("ru = 'Не удалось сформировать ЭД.'");
			
			ОбработатьОшибкуФормированияЭД(
				КонтекстФормирования,
				ОписаниеПроблемы);
			
			СтруктураВозврата.Успех = Ложь;
			СтруктураВозврата.ОписаниеОшибкиСоздания = ОписаниеПроблемы;
			Возврат СтруктураВозврата;
			
		КонецЕсли;
		
		КонтекстФормирования.Вставить("ДокументЭДО", ДокументЭДО);
		
		РезультатКопированияПодписей = СкопироватьПодписиВФайлЭД(КонтекстФормирования);
		
		Если Не РезультатКопированияПодписей.Успех Тогда
			
			ОтменитьТранзакцию();
			
			ОписаниеПроблемы = 
				НСтр("ru = 'При копировании подписей для отправки по ЭДО возникли ошибки:'")
				+ Символы.ПС
				+ РезультатКопированияПодписей.Описание;
			
			ОбработатьОшибкуФормированияЭД(
				КонтекстФормирования,
				ОписаниеПроблемы);
			
			СтруктураВозврата.Успех = Ложь;
			СтруктураВозврата.ОписаниеОшибкиСоздания = ОписаниеПроблемы;
			Возврат СтруктураВозврата;
			
		КонецЕсли;
		
		ПакетДокумента = ОбменСКонтрагентамиДОСлужебный.ПакетДокумента(КонтекстФормирования.Документ);
		
		Если ЗначениеЗаполнено(ПакетДокумента) Тогда
			НовоеСостояние = Перечисления.СостоянияЭДОДокументооборот.ОжидаетСозданияПакетаЭДО;
		Иначе
			НовоеСостояние = Перечисления.СостоянияЭДОДокументооборот.ОжидаетсяОтправка;
		КонецЕсли;
		
		ДанныеСостояния = ОбменСКонтрагентамиДОСлужебный.НовыеДанныеСостоянияДляУстановки();
		ДанныеСостояния.Состояние = НовоеСостояние;
		ДанныеСостояния.Комментарий = НСтр("ru = 'Создан исходящий по ЭДО документ'");
		
		ОбменСКонтрагентамиДОСлужебный.УстановитьСостояниеДокументаЭДО(
				КонтекстФормирования.Документ, 
				НастройкиОтправки.Получатель,
				ДанныеСостояния);
		
		РегистрыСведений.ОчередьСозданияОбъектовЭДО.УдалитьИзОчереди(КонтекстФормирования.Документ);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ОписаниеПроблемы =
			НСтр("ru = 'При создании документа ЭДО по документу предприятия возникли ошибки:'")
			+ Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ОбработатьОшибкуФормированияЭД(
			КонтекстФормирования,
			ОписаниеПроблемы);
		
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.ОписаниеОшибкиСоздания = ОписаниеПроблемы;
		Возврат СтруктураВозврата;
	КонецПопытки;
	
	СтруктураВозврата.Успех = Истина;
	СтруктураВозврата.ДокументЭДО = КонтекстФормирования.ДокументЭДО;
	СтруктураВозврата.Состояние = НовоеСостояние;
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ВозможностьСозданияЭД(КонтекстФормирования)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Успех", Ложь);
	СтруктураВозврата.Вставить("Описание", "");
	СтруктураВозврата.Вставить("ПараметрыОтправки", Новый Структура);
	
	ПараметрыПроверки = Новый Структура;
	
	ТаблицыПроверки = ТаблицыДляПроверкиВозможностиСозданияИсходящегоЭДО(КонтекстФормирования.Документ);
	
	Организации = ТаблицыПроверки.Организации;
	
	Если Организации.Количество() = 0 Тогда
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание =
			НСтр("ru = 'В первой строке таблицы сторон не указана организация.
				|Пожалуйста, проверьте корректность заполнения таблицы сторон и повторите отправку документа.'");
		
		Возврат СтруктураВозврата;
	Иначе
		ПараметрыПроверки.Вставить("Организация", Организации[0].Организация);
	КонецЕсли;
	
	Если ТаблицыПроверки.УчетныеЗаписиЭДО.Количество() = 0 Тогда
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание =
			НСтр("ru = 'Для организации документа нет учетных записей ЭДО.
				|Пожалуйста, проверьте наличие учетных записей ЭДО и повторите отправку документа.'");
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Контрагенты = ТаблицыПроверки.Контрагенты;
	
	Если Контрагенты.Количество() = 0 Тогда
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание =
			НСтр("ru = 'В таблицы сторон не указан контрагент, которому необходимо отправить документ.
				|Пожалуйста, проверьте корректность заполнения таблицы сторон и повторите отправку документа.'");
		
		Возврат СтруктураВозврата;
	Иначе
		ПараметрыПроверки.Вставить("Организация", Контрагенты[0].Организация);
		ПараметрыПроверки.Вставить("Контрагент", Контрагенты[0].Контрагент);
		ПараметрыПроверки.Вставить("ВидДокумента", Контрагенты[0].ВидДокумента);
	КонецЕсли;
	
	НастройкиОтправкиДО = ТаблицыПроверки.НастройкиОтправкиДО;
	
	Если НастройкиОтправкиДО.Количество() = 0
		Или ТаблицыПроверки.НастройкиОтправки.Количество() = 0 Тогда
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание =
			СтрШаблон(
				НСтр("ru = 'Не найдены настройки отправки по ЭДО документов вида %1 от организации %2 контрагенту %3.
					|Пожалуйста, проверьте настройки отправки ЭДО и повторите отправку.'"),
				ПараметрыПроверки.Организация,
				ПараметрыПроверки.Контрагент,
				ПараметрыПроверки.ВидДокумента);
		
		Возврат СтруктураВозврата;
	Иначе
		ПараметрыПроверки.Вставить("Организация", НастройкиОтправкиДО[0].Организация);
		ПараметрыПроверки.Вставить("Контрагент", НастройкиОтправкиДО[0].Контрагент);
	КонецЕсли;
	
	ДействующиеНастройкиОтправки = ТаблицыПроверки.ДействующиеНастройкиОтправки;
	
	Если ДействующиеНастройкиОтправки.Количество() = 0 Тогда
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание =
			СтрШаблон(
				НСтр("ru = 'Приглашение к обмену между организацией %1 и контрагентом %2 не принято.
					|Пожалуйста, проверьте статус приглашения к обмену ЭДО и повторите отправку.'"),
				ПараметрыПроверки.Организация,
				ПараметрыПроверки.Контрагент);
		
		Возврат СтруктураВозврата;
	Иначе
		СтрокаНастроек = ДействующиеНастройкиОтправки[0];
		
		ПараметрыПроверки.Вставить("Организация",                     СтрокаНастроек.Организация);
		ПараметрыПроверки.Вставить("Контрагент",                      СтрокаНастроек.Контрагент);
		
		ПараметрыПроверки.Вставить("ИдентификаторОрганизации",        СтрокаНастроек.ИдентификаторОрганизации);
		ПараметрыПроверки.Вставить("ИдентификаторКонтрагента",        СтрокаНастроек.ИдентификаторКонтрагента);
		ПараметрыПроверки.Вставить("МаршрутПодписания",               СтрокаНастроек.МаршрутПодписания);
		ПараметрыПроверки.Вставить("ВыгружатьДополнительныеСведения", СтрокаНастроек.ВыгружатьДополнительныеСведения);
		ПараметрыПроверки.Вставить("СпособОбмена",                    СтрокаНастроек.СпособОбмена);
		ПараметрыПроверки.Вставить("ВидДокументаЭДО",                 СтрокаНастроек.ВидДокументаЭДО);
		ПараметрыПроверки.Вставить("ТребуетсяИзвещениеОПолучении",    СтрокаНастроек.ТребуетсяИзвещениеОПолучении);
		ПараметрыПроверки.Вставить("ТребуетсяОтветнаяПодпись",        СтрокаНастроек.ТребуетсяОтветнаяПодпись);
		ПараметрыПроверки.Вставить("Формат",                          СтрокаНастроек.Формат);
	КонецЕсли;
	
	РолиФайловВидаДокумента = ТаблицыПроверки.РолиФайловВидаДокумента;
	ТаблицаРолейДляОтправки = ТаблицыПроверки.РольФайлаДляОтправки;
	
	Если РолиФайловВидаДокумента.Количество() > 0 И ТаблицаРолейДляОтправки.Количество() = 0 Тогда
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание = СтрШаблон(
			НСтр("ru = 'В виде документов %1 не указана роль файла, используемая для отправки по ЭДО.
				|Пожалуйста, проверьте в настройках вида документа, что имеется роль файла со свойством ""Файл электронного документа""'"),
			ПараметрыПроверки.ВидДокумента);
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ФайлыДляОтправки = ТаблицыПроверки.ФайлыДляОтправки;
	
	Если ФайлыДляОтправки.Количество() = 0 Тогда
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание =
			НСтр("ru = 'В документе нет файлов для отправки.
				|Пожалуйста, проверьте наличие актуального файла и повторите отправку.'");
		
		Возврат СтруктураВозврата;
	ИначеЕсли ФайлыДляОтправки.Количество() > 1 Тогда
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание =
			НСтр("ru = 'В документе более одного файла для отправки. Отправлять по ЭДО можно только один файл.
				|Пожалуйста, удалите лишние файлы и повторите отправку.'");
		
		Возврат СтруктураВозврата;
	Иначе
		ПараметрыПроверки.Вставить("Файл", ФайлыДляОтправки[0].Файл);
		ПараметрыПроверки.Вставить("ВерсияФайла", ФайлыДляОтправки[0].ТекущаяВерсия);
	КонецЕсли;
	
	ПодписиФайлов = ТаблицыПроверки.ПодписиФайлов;
	
	Если ПодписиФайлов.Количество() = 0 Тогда
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание =
			НСтр("ru = 'Не найдены электронные подписи, установленные на файл документа.
				|Пожалуйста, проверьте наличие подписей на файле документа и повторите отправку.'");
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Для Каждого СтрокаЭП Из ПодписиФайлов Цикл
		
		Если Не СтрокаЭП.ПодписьВерна Или Не СтрокаЭП.СертификатДействителен Тогда
			СтруктураВозврата.Успех = Ложь;
			СтруктураВозврата.Описание =
				НСтр("ru = 'Среди подписей файла есть неверные подписи или подписи с недействительным сертификатом.
					|Пожалуйста, проверьте действительность подписей и повторите отправку.'");
			
			Возврат СтруктураВозврата;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицыПроверки.ОтпечаткиДляОтправки.Количество() = 0 Тогда
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание =
			НСтр("ru = 'Среди подписей файла нет тех, которые разрешены к обмену ЭДО.
				|Пожалуйста, проверьте список сертификатов, используемых для обмена в учетной записи ЭДО.'");
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Если ТаблицыПроверки.СостоянияДокументаДО.Количество() = 0 Тогда
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание =
			НСтр("ru = 'По документу не найдена запись о текущем состоянии ЭДО.
				|Формировать документы ЭДО можно только по документам, имеющим состояние ""Подписан""'");
		
		Возврат СтруктураВозврата;
	Иначе
		Для Каждого Строка Из ТаблицыПроверки.СостоянияДокументаДО Цикл
			Если Строка.Состояние <> Перечисления.СостоянияЭДОДокументооборот.Подписан Тогда
				СтруктураВозврата.Успех = Ложь;
				СтруктураВозврата.Описание =
					НСтр("ru = 'Документ имеет неправильное состояние по ЭДО.
						|Формировать документы ЭДО можно только по документам, имеющим статус ""Подписан""'");
				
				Возврат СтруктураВозврата;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТаблицыПроверки.ЭлектронныеДокументы.Количество() > 0 Тогда
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание =
			НСтр("ru = 'По документу уже создан документ ЭДО.
				|Отвяжите существующий документ ЭДО от документа 1С:Документооборот и повторите создание.'");
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Отправитель",                     ПараметрыПроверки.Организация);
	ПараметрыОтправки.Вставить("Получатель",                      ПараметрыПроверки.Контрагент);
	
	ПараметрыОтправки.Вставить("ИдентификаторОтправителя",        ПараметрыПроверки.ИдентификаторОрганизации);
	ПараметрыОтправки.Вставить("ИдентификаторПолучателя",         ПараметрыПроверки.ИдентификаторКонтрагента);
	ПараметрыОтправки.Вставить("МаршрутПодписания",               ПараметрыПроверки.МаршрутПодписания);
	ПараметрыОтправки.Вставить("ВыгружатьДополнительныеСведения", ПараметрыПроверки.ВыгружатьДополнительныеСведения);
	ПараметрыОтправки.Вставить("СпособОбмена",                    ПараметрыПроверки.СпособОбмена);
	ПараметрыОтправки.Вставить("ВидДокумента",                    ПараметрыПроверки.ВидДокументаЭДО);
	ПараметрыОтправки.Вставить("ТребуетсяИзвещениеОПолучении",    ПараметрыПроверки.ТребуетсяИзвещениеОПолучении);
	ПараметрыОтправки.Вставить("ТребуетсяОтветнаяПодпись",        ПараметрыПроверки.ТребуетсяОтветнаяПодпись);
	ПараметрыОтправки.Вставить("Формат",                          ПараметрыПроверки.Формат);
	
	СтруктураВозврата.ПараметрыОтправки = ПараметрыОтправки;
	
	СтруктураВозврата.Успех = Истина;
	
	КонтекстФормирования.Вставить("ФайлДляОтправки", ПараметрыПроверки.Файл);
	КонтекстФормирования.Вставить("ВерсияДляОтправки", ПараметрыПроверки.ВерсияФайла);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПроверитьСоответствиеФайлаПараметрамОтправки(КонтекстФормирования, ПараметрыОтправки) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Успех", Ложь);
	СтруктураВозврата.Вставить("ОписаниеОшибки", "");
	
	НастройкиОтправки = НовыеНастройкиОтправкиОбъекта();
	
	НастройкиОтправки.ОбъектУчета = КонтекстФормирования.ВерсияДляОтправки;
	
	ЗаполнитьЗначенияСвойств(НастройкиОтправки, ПараметрыОтправки, ,
		"Формат, ВидДокумента");
	
	СтруктураВозврата.Вставить("НастройкиОтправки", НастройкиОтправки);
	
	ВидДокументаВНастройках = ПараметрыОтправки.ВидДокумента;
	ТипДокументаВНастройках = ?(ЗначениеЗаполнено(ВидДокументаВНастройках),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокументаВНастройках, "ТипДокумента"),
		Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
	ФорматВНастройках = ПараметрыОтправки.Формат;
	
	ФорматыЭД = ЭлектронныеДокументыЭДО.ФорматыЭлектронныхДокументов();
	
	Если ЗначениеЗаполнено(ВидДокументаВНастройках) Тогда
		ОтборФормата = Новый Структура("ВидДокумента", ВидДокументаВНастройках);
		СтрокиФормата = ФорматыЭД.НайтиСтроки(ОтборФормата);
		
		НеформализованныйДокументВНастройках = (СтрокиФормата.Количество() = 0);
	Иначе
		НеформализованныйДокументВНастройках = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФорматВНастройках) Тогда
		
		ОтборФормата = Новый Структура("ИдентификаторФормата", ФорматВНастройках);
		
		СтрокиФормата = ФорматыЭД.НайтиСтроки(ОтборФормата);
		
		Если СтрокиФормата.Количество() = 0 Тогда
			СтруктураВозврата.Успех = Ложь;
			СтруктураВозврата.ОписаниеОшибки = СтрШаблон(
				НСтр("ru = 'Не найден формат ""%1"", указанный для отправки. Проверьте настройки отправки ЭДО.'"),
				ФорматВНастройках);
			
			Возврат СтруктураВозврата;
		КонецЕсли;
		
		НайденДействующийФормат = Ложь;
		НайденВидДокумента = Ложь;
		
		ПредставлениеФормата = СтрокиФормата[0].ПредставлениеФормата;
		
		Для Каждого СтрокаФормата Из СтрокиФормата Цикл
			Если СтрокаФормата.Действует Тогда
				НайденДействующийФормат = Истина;
				
				Если СтрокаФормата.ВидДокумента = ВидДокументаВНастройках Тогда
					НайденВидДокумента = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Не НайденДействующийФормат Тогда
			СтруктураВозврата.Успех = Ложь;
			СтруктураВозврата.ОписаниеОшибки = СтрШаблон(
				НСтр("ru = 'Формат документов %1 не действует. Измените формат в настройках отправки.'"),
				ПредставлениеФормата);
			
			Возврат СтруктураВозврата;
		КонецЕсли;
		
		Если Не НайденВидДокумента Тогда
			СтруктураВозврата.Успех = Ложь;
			СтруктураВозврата.ОписаниеОшибки = СтрШаблон(
				НСтр("ru = 'Формат документов %1 нельзя использовать с видом документов %2.
					|Проверьте настройки отправки документов.'"),
				ПредставлениеФормата,
				ВидДокументаВНастройках);
			
			Возврат СтруктураВозврата;
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеФайлаИДвоичныеДанные = РаботаСФайламиВызовСервера.ДанныеФайлаИДвоичныеДанные(
		КонтекстФормирования.ФайлДляОтправки,
		КонтекстФормирования.ВерсияДляОтправки);
	
	Если ДанныеФайлаИДвоичныеДанные = Неопределено Тогда
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.ОписаниеОшибки =
			НСтр("ru = 'Не удалось получить двоичные данные файла для отправки.'");
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ДанныеЭДФайла = Неопределено;
	
	// Пробуем разобрать файл как формализованный только в том случае, если он имеет расширение XML,
	//   файлы других форматов как форализованные не рассматриваем
	Если ВРег(ДанныеФайлаИДвоичныеДанные.ДанныеФайла.Расширение) = "XML" Тогда
		ДанныеЭДФайла = ОбменСКонтрагентами.ДанныеЭлектронногоДокументаПоФайлу(ДанныеФайлаИДвоичныеДанные.ДвоичныеДанные);
	КонецЕсли;
	
	ПолучитьСообщенияПользователю(Истина);
	
	// Документ неформализованный
	Если НеформализованныйДокументВНастройках
		Или ТипЗнч(ДанныеЭДФайла) <> Тип("Структура") Тогда
		
		Если ЗначениеЗаполнено(ФорматВНастройках) Тогда
			СтруктураВозврата.Успех = Ложь;
			СтруктураВозврата.ОписаниеОшибки = СтрШаблон(
				НСтр("ru = 'Файл не соответствует формату %1.'"),
				ПредставлениеФормата);
			
			Возврат СтруктураВозврата;
		КонецЕсли;
		
		СтруктураВозврата.Успех = Истина;
		
		НастройкиОтправки.Формат = "";
		
		Если ЗначениеЗаполнено(ВидДокументаВНастройках) Тогда
			
			НастройкиОтправки.ВидДокумента = ВидДокументаВНастройках;
			СтруктураВозврата.НастройкиОтправки.ТипДокумента = ТипДокументаВНастройках;
			
		Иначе
			
			ВидДокументаПрочее = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(
				Перечисления.ТипыДокументовЭДО.Прочее);
			
			НастройкиОтправки.ВидДокумента = ВидДокументаПрочее;
			НастройкиОтправки.ТипДокумента = 
				Перечисления.ТипыДокументовЭДО.Прочее;
			
		КонецЕсли;
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	ТипДокументаВФайле = ДанныеЭДФайла.НовыйЭД.ВидЭД;
	ФорматВФайле = ДанныеЭДФайла.НовыйЭД.ВерсияФормата;
	
	ОтборФормата = Новый Структура("ИдентификаторФормата", ФорматВФайле);
	СтрокиФормата = ФорматыЭД.НайтиСтроки(ОтборФормата);
	
	Если СтрокиФормата.Количество() = 0 Тогда
		
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.ОписаниеОшибки =
			НСтр("ru = 'Файл неизвестного формата. Проверьте приложенный файл.'");
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	ПредставлениеФорматаФайла = СтрокиФормата[0].ПредставлениеФормата;
	
	Если ЗначениеЗаполнено(ФорматВНастройках)
		И ФорматВНастройках <> ФорматВФайле Тогда
		
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.ОписаниеОшибки = СтрШаблон(
			НСтр("ru = 'Формат файла документа (%1) не соответствует формату в настройках (%2).'"),
			ПредставлениеФорматаФайла,
			ПредставлениеФормата);
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипДокументаВНастройках)
		И ТипДокументаВФайле <> ТипДокументаВНастройках Тогда
		
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.ОписаниеОшибки = СтрШаблон(
			НСтр("ru = 'Тип электронного документа файла (%1) не соответствует виду документа в настройках (%2).'"),
			ТипДокументаВФайле,
			ТипДокументаВНастройках);
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	СтруктураВозврата.Успех = Истина;
	
	НастройкиОтправки.Формат = ФорматВФайле;
	
	Если ЗначениеЗаполнено(ВидДокументаВНастройках) Тогда
		
		НастройкиОтправки.ВидДокумента = ВидДокументаВНастройках;
		
	Иначе
		
		ВидДокументаПоФайлу = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(ТипДокументаВФайле);
		
		НастройкиОтправки.ВидДокумента = ВидДокументаПоФайлу;
		
	КонецЕсли;
	
	НастройкиОтправки.ТипДокумента = ТипДокументаВФайле;
	
	ОписаниеВидаДокумента = ЭлектронныеДокументыЭДО.ОписаниеВидаДокумента(НастройкиОтправки.ВидДокумента);
	НастройкиРегламента =
		ЭлектронныеДокументыЭДО.НастройкиРегламента(ОписаниеВидаДокумента, НастройкиОтправки.Формат);
	
	Если Не НастройкиРегламента.РедактироватьОтветнуюПодпись Тогда
		НастройкиОтправки.ТребуетсяОтветнаяПодпись = НастройкиРегламента.ТребуетсяОтветнаяПодпись;
	КонецЕсли;
	
	Если Не НастройкиРегламента.РедактироватьИзвещение Тогда
		НастройкиОтправки.ТребуетсяИзвещениеОПолучении = НастройкиРегламента.ТребуетсяИзвещениеОПолучении;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция НовыеНастройкиОтправкиОбъекта()
	
	НастройкиОтправки = Новый Структура;
	
	НастройкиОтправки.Вставить("ОбъектУчета",                     Справочники.ВерсииФайлов.ПустаяСсылка());
	НастройкиОтправки.Вставить("Направление",                     Перечисления.НаправленияЭДО.Исходящий);
	НастройкиОтправки.Вставить("Отправитель",                     Справочники.Организации.ПустаяСсылка());
	НастройкиОтправки.Вставить("Получатель",                      Справочники.Контрагенты.ПустаяСсылка());
	НастройкиОтправки.Вставить("Договор",                         Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка());
	НастройкиОтправки.Вставить("ТипДокумента",                    Перечисления.ТипыДокументовЭДО.ПустаяСсылка());
	НастройкиОтправки.Вставить("ВидДокумента",                    Справочники.ВидыДокументовЭДО.ПустаяСсылка());
	НастройкиОтправки.Вставить("Формат",                          "");
	НастройкиОтправки.Вставить("МаршрутПодписания",               Справочники.МаршрутыПодписания.ПустаяСсылка());
	НастройкиОтправки.Вставить("СпособОбмена",                    Перечисления.СпособыОбменаЭД.ПустаяСсылка());
	НастройкиОтправки.Вставить("ИдентификаторОтправителя",        "");
	НастройкиОтправки.Вставить("ИдентификаторПолучателя",         "");
	НастройкиОтправки.Вставить("ТребуетсяОтветнаяПодпись",        Истина);
	НастройкиОтправки.Вставить("ТребуетсяИзвещениеОПолучении",    Истина);
	НастройкиОтправки.Вставить("ВыгружатьДополнительныеСведения", Истина);
	НастройкиОтправки.Вставить("ОбменБезПодписи",                 Ложь);
	НастройкиОтправки.Вставить("Формировать",                     Истина);
	НастройкиОтправки.Вставить("ВерсияФорматаУстановленаВручную", Истина);
	НастройкиОтправки.Вставить("ЗаполнениеКодаТовара",            "");
	
	Возврат НастройкиОтправки;
	
КонецФункции

Функция СформироватьФормализованныйЭД(КонтекстФормирования)
	
	ПараметрыВыполненияДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	
	НаборДействий = Новый Соответствие;
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, Перечисления.ДействияПоЭДО.Сформировать);
	
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ОбъектыУчета.Добавить(
		КонтекстФормирования.ВерсияДляОтправки);
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	
	ПараметрыВыполненияДействийПоЭДО.НастройкиОбъектов.Вставить(
		КонтекстФормирования.ВерсияДляОтправки,
		КонтекстФормирования.НастройкиОтправки);
	
	// @skip-warning МетодНеОбнаружен - этот функционал уже не используется
	РезультатФормирования = ЭлектронныеДокументыЭДО.ВыполнитьДействияПоЭДО(ПараметрыВыполненияДействийПоЭДО);
	
	Если РезультатФормирования.Итог.ОбработаноПоДействиям[Перечисления.ДействияПоЭДО.Сформировать] = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось сформировать формализованный ЭД.'");
	КонецЕсли;
	
	ЭлектронныйДокумент = ИнтеграцияЭДО.АктуальныйЭлектронныйДокументОбъектаУчета(
		КонтекстФормирования.ВерсияДляОтправки,
		КонтекстФормирования.НастройкиОтправки.ВидДокумента,
		КонтекстФормирования.НастройкиОтправки.Получатель,
		КонтекстФормирования.НастройкиОтправки.Договор);
	
	Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		Возврат ЭлектронныйДокумент;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция СформироватьПроизвольныйЭД(КонтекстФормирования)
	
	НастройкиОтправки = КонтекстФормирования.НастройкиОтправки;
	
	// @skip-warning МетодНеОбнаружен - этот функционал уже не используется
	ПараметрыСоздания = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыСозданияДокументаПоФайлу();
	
	ПараметрыСоздания.Организация = НастройкиОтправки.Отправитель;
	ПараметрыСоздания.Контрагент = НастройкиОтправки.Получатель;
	ПараметрыСоздания.Договор = НастройкиОтправки.Договор;
	ПараметрыСоздания.ОбъектыУчета =
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КонтекстФормирования.ВерсияДляОтправки);
	ПараметрыСоздания.ВидДокумента = НастройкиОтправки.ВидДокумента;
	
	ПараметрыСоздания.Вставить("ТребуетсяОтветнаяПодпись", НастройкиОтправки.ТребуетсяОтветнаяПодпись);
	ПараметрыСоздания.Вставить("ТребуетсяИзвещениеОПолучении", НастройкиОтправки.ТребуетсяИзвещениеОПолучении);
	
	РеквизитыДокументаДО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КонтекстФормирования.Документ,
		"ДатаРегистрации, РегистрационныйНомер, ВременныйНомер, Сумма");
	
	Если ЗначениеЗаполнено(РеквизитыДокументаДО.ДатаРегистрации) Тогда
		ПараметрыСоздания.ДатаДокумента = РеквизитыДокументаДО.ДатаРегистрации;
	Иначе
		ПараметрыСоздания.ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыДокументаДО.РегистрационныйНомер) Тогда
		ПараметрыСоздания.НомерДокумента = РеквизитыДокументаДО.РегистрационныйНомер;
	ИначеЕсли ЗначениеЗаполнено(РеквизитыДокументаДО.ВременныйНомер) Тогда
		ПараметрыСоздания.НомерДокумента = РеквизитыДокументаДО.ВременныйНомер;
	Иначе
		ПараметрыСоздания.НомерДокумента = НСтр("ru = 'б/н'");
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыДокументаДО.Сумма) Тогда
		ПараметрыСоздания.СуммаДокумента = РеквизитыДокументаДО.Сумма;
	КонецЕсли;
	
	ДанныеФайлаИДвоичныеДанные = РаботаСФайламиВызовСервера.ДанныеФайлаИДвоичныеДанные(
		КонтекстФормирования.ФайлДляОтправки,
		КонтекстФормирования.ВерсияДляОтправки);
	
	Если Не ЗначениеЗаполнено(ДанныеФайлаИДвоичныеДанные) Тогда
		
		ВызватьИсключение НСтр("ru = 'Не удалось получить данные файла для отправки.'");
		
	КонецЕсли;
	
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
		ДанныеФайлаИДвоичныеДанные.ДанныеФайла.ПолноеНаименованиеВерсии,
		ДанныеФайлаИДвоичныеДанные.ДанныеФайла.Расширение);
	ИмяФайла = СтроковыеФункции.СтрокаЛатиницей(ИмяФайла);
	ИмяФайла = СтрЗаменить(ИмяФайла, " ", "_");
	
	ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
	
	ОписаниеФайла.ИмяФайла = ИмяФайла;
	ОписаниеФайла.ДвоичныеДанные = ДанныеФайлаИДвоичныеДанные.ДвоичныеДанные;
	
	РезультатСоздания = ЭлектронныеДокументыЭДО.СоздатьДокументПоФайлу(
		ПараметрыСоздания, ОписаниеФайла);
	
	Если Не РезультатСоздания.Успех Тогда
		
		ВызватьИсключение НСтр("ru = 'Не удалось создать неформализованный электронный документ.'");
		
	КонецЕсли;
	
	ДокументЭДО = РезультатСоздания.ЭлектронныйДокумент;
	
	Возврат ДокументЭДО;
	
КонецФункции

Функция СкопироватьПодписиВФайлЭД(КонтекстФормирования)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Успех", Истина);
	СтруктураВозврата.Вставить("Описание", "");
	
	ФайлЭД = Неопределено;
	СообщениеЭДО = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
			"ВЫБРАТЬ
			|	ЭлектронныйДокументИсходящийЭДО.Ссылка КАК ДокументЭДО,
			|	СообщениеЭДО.Ссылка КАК СообщениеЭДО,
			|	СообщениеЭДО.ОсновнойФайл КАК ФайлЭД
			|ИЗ
			|	Документ.СообщениеЭДО КАК СообщениеЭДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящийЭДО КАК ЭлектронныйДокументИсходящийЭДО
			|		ПО СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныйДокументИсходящийЭДО.Ссылка
			|ГДЕ
			|	ЭлектронныйДокументИсходящийЭДО.Ссылка = &ДокументЭДО
			|	И СообщениеЭДО.Состояние = &Состояние";
	Запрос.УстановитьПараметр("ДокументЭДО", КонтекстФормирования.ДокументЭДО);
	Запрос.УстановитьПараметр("Состояние", Перечисления.СостоянияСообщенийЭДО.Подписание);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СообщениеЭДО = Выборка.СообщениеЭДО;
		ФайлЭД = Выборка.ФайлЭД;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СообщениеЭДО)
		Или Не ЗначениеЗаполнено(ФайлЭД) Тогда
		
		ОписаниеПроблемы =
			НСтр("ru = 'Для созданного документа ЭДО не найдено сообщение с файлом, готовые к подписанию.
				|Проверьте содержимое отправляемого файла и повторите отправку.'");
		
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание = ОписаниеПроблемы;
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	КонтекстФормирования.Вставить("СообщениеЭДО", СообщениеЭДО);
	КонтекстФормирования.Вставить("ФайлЭД", ФайлЭД);
	
	ФайлыЭД = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФайлЭД);
	ДвоичныеДанныеФайловЭД = РаботаСФайламиБЭД.ДвоичныеДанныеФайлов(ФайлыЭД);
	
	УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(КонтекстФормирования.ВерсияДляОтправки);
	
	Если УстановленныеПодписи.Количество() = 0 Тогда
		
		ОписаниеПроблемы =
			НСтр("ru = 'Не найдены подписи, установленные на файл для отправки. Проверье подписание файла и повторите отправку.'");
		
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание = ОписаниеПроблемы;
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	ДанныеДоверенностей = ДанныеДоверенностейЭП(УстановленныеПодписи);
	
	ПодписанныеДокументы = Новый Массив;
	
	Для Каждого Подпись Из УстановленныеПодписи Цикл
		
		Сертификат = ЭлектроннаяПодпись.СсылкаНаСертификат(Подпись.Сертификат);
		
		// @skip-warning МетодНеОбнаружен - этот функционал уже не используется
		ОписаниеПодписанногоДокумента = ЭлектронныеДокументыЭДО.НовоеОписаниеПодписанногоСообщения();
		ОписаниеПодписанногоДокумента.Ссылка = СообщениеЭДО;
		ОписаниеПодписанногоДокумента.ВыбранныйСертификат = Сертификат;
		ОписаниеПодписанногоДокумента.СвойстваПодписи = Подпись;
		ОписаниеПодписанногоДокумента.ПрисоединенныйФайл = ФайлЭД;
		ОписаниеПодписанногоДокумента.ОбновитьДанные = Ложь;
		ОписаниеПодписанногоДокумента.Данные = ДвоичныеДанныеФайловЭД[ФайлЭД];
		
		ДанныеДоверенности = ДанныеДоверенностей[Подпись.ИдентификаторПодписи];
		Если ТипЗнч(ДанныеДоверенности) = Тип("Структура")
			И ДанныеДоверенности.Свойство("Доверенность")
			И ЗначениеЗаполнено(ДанныеДоверенности.Доверенность) Тогда
			
			ОписаниеПодписанногоДокумента.ВыбраннаяМЧД = ДанныеДоверенности.Доверенность;
		КонецЕсли;
		
		ПодписанныеДокументы.Добавить(ОписаниеПодписанногоДокумента);
		
	КонецЦикла;
	
	НаборДействий = Новый Соответствие;
	НаборДействий.Вставить(Перечисления.ДействияПоЭДО.Подписать, Ложь);
	
	ПараметрыВыполненияДействийЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийЭДО.НаборДействий = НаборДействий;
	ПараметрыВыполненияДействийЭДО.ОбъектыДействий.ЭлектронныеДокументы.Добавить(
		КонтекстФормирования.ДокументЭДО);
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики();
	
	ИтогДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО();
	
	// @skip-warning МетодНеОбнаружен - этот функционал уже не используется
	РезультатВыполнения = ЭлектронныеДокументыЭДО.ВыполнитьДействияПоЭДОПослеПодписания(
		ПодписанныеДокументы,
		ПараметрыВыполненияДействийЭДО,
		КонтекстДиагностики,
		ИтогДействийПоЭДО);
	
	Если РезультатВыполнения.Итог.ОбработаноПоДействиям[Перечисления.ДействияПоЭДО.Подписать] = 0  Тогда
		
		ОписаниеПроблемы =
			НСтр("ru = 'Не удалось скопировать подписи файла и выполнить процедуры после подписания.'");
		
		СтруктураВозврата.Успех = Ложь;
		СтруктураВозврата.Описание = ОписаниеПроблемы;
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	СтруктураВозврата.Успех = Истина;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ДанныеДоверенностейЭП(УстановленныеПодписи)
	
	ИдентификаторыПодписей = Новый Массив;
	
	Для Каждого Подпись Из УстановленныеПодписи Цикл
		Если ЗначениеЗаполнено(Подпись.ИдентификаторПодписи) Тогда
			ИдентификаторыПодписей.Добавить(Подпись.ИдентификаторПодписи);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РаботаСЭП.ДанныеДоверенностейПодписей(ИдентификаторыПодписей);
	
КонецФункции

Процедура ОбработатьОшибкуФормированияЭД(КонтекстФормирования, Описание)
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияСозданияЭДНаОснованииДокументовДО(),
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Справочники.ДокументыПредприятия,
		КонтекстФормирования.Документ,
		СтрШаблон(НСтр("ru = 'При отправке документа %1 по ЭДО возникли поблемы:'"),
				КонтекстФормирования.Документ)
			+ Символы.ПС
			+ Описание);
	
	Если КонтекстФормирования.ЭтоРегламентноеЗадание Тогда
		
		Если КонтекстФормирования.ПопыткаОбработки > 2 Тогда
			
			НачатьТранзакцию();
			Попытка
				РегистрыСведений.ОшибкиЭДОКИсправлению.ДобавитьЗаписьОбОшибке(
					КонтекстФормирования.Документ,
					Описание);
				
				РегистрыСведений.ОчередьСозданияОбъектовЭДО.УдалитьИзОчереди(КонтекстФормирования.Документ);
				
				СостояниеДокумента = РегистрыСведений.СостояниеДокументовПоЭДО.ПолучитьСостояниеДокумента(
						КонтекстФормирования.Документ);
				
				ДанныеСостояния = ОбменСКонтрагентамиДОСлужебный.НовыеДанныеСостоянияДляУстановки();
				ДанныеСостояния.Состояние = Перечисления.СостоянияЭДОДокументооборот.ОшибкаПередачи;
				ДанныеСостояния.Комментарий =
					НСтр("ru = 'Ошибка при формировании исходящего документа ЭДО по документу 1С:Документооборот'");
				
				ОбменСКонтрагентамиДОСлужебный.УстановитьСостояниеДокументаЭДО(
					КонтекстФормирования.Документ,
					СостояниеДокумента.Контрагент,
					ДанныеСостояния);
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Не удалось удалить документ из очереди отправки сообщений ЭДО.'"),
					УровеньЖурналаРегистрации.Ошибка, , ,
					СтрШаблон(НСтр("ru = 'Не удалось удалить документ %1 из очереди отправки сообщений ЭДО и сделать запись о ошибке отправки по причине:'"),
						КонтекстФормирования.Документ)
						+ Символы.ПС
						+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПакетовЭДО

Функция СформироватьПакетыЭДО(ИдентификаторыПакетов) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ОбработанныеПакеты", Новый Соответствие);
	СтруктураВозврата.Вставить("ОшибкиФормирования", Новый Соответствие);
	
	ДанныеПакетов = ДанныеПакетовДляФормирования(ИдентификаторыПакетов);
	
	Для Каждого Элемент Из ДанныеПакетов Цикл
		
		ИДПакета = Элемент.Ключ;
		ДанныеПакета = Элемент.Значение;
		
		РезультатФормирования = СформироватьПакетЭДО(ИДПакета, ДанныеПакета);
		
		Если РезультатФормирования.Успех Тогда
			ДанныеПоПакету = Новый Структура;
			ДанныеПоПакету.Вставить("ОбработанныеДокументы", РезультатФормирования.ОбработанныеДокументы);
			ДанныеПоПакету.Вставить("ИдентификаторПакетаБЭД", РезультатФормирования.ИдентификаторПакетаБЭД);
			
			СтруктураВозврата.ОбработанныеПакеты.Вставить(ИДПакета, ДанныеПоПакету);
		Иначе
			СтруктураВозврата.ОшибкиФормирования.Вставить(ИДПакета, РезультатФормирования.ОписаниеОшибки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ДанныеПакетовДляФормирования(ИдентификаторыПакетов)
	
	ДанныеПакетов = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоставПакетовЭДОДокументооборот.ИдентификаторПакета,
		|	СоставПакетовЭДОДокументооборот.Документ
		|ПОМЕСТИТЬ ДокументыПакетов
		|ИЗ
		|	РегистрСведений.СоставПакетовЭДОДокументооборот КАК СоставПакетовЭДОДокументооборот
		|ГДЕ
		|	СоставПакетовЭДОДокументооборот.ИдентификаторПакета В (&ИдентификаторыПакетов)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыПакетов.ИдентификаторПакета,
		|	ДокументыПакетов.Документ,
		|	ЕСТЬNULL(СостояниеДокументовПоЭДОСрезПоследних.СостояниеВерсииДокументаПоЭДО,
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЭДОДокументооборот.ПустаяСсылка)) КАК Состояние
		|ПОМЕСТИТЬ ДокументыССостояниями
		|ИЗ
		|	ДокументыПакетов КАК ДокументыПакетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеДокументовПоЭДО.СрезПоследних КАК СостояниеДокументовПоЭДОСрезПоследних
		|		ПО ДокументыПакетов.Документ = СостояниеДокументовПоЭДОСрезПоследних.ДокументДО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыПакетов.Документ,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент КАК ДокументЭДО
		|ПОМЕСТИТЬ ДокументыЭДОДляДокументов
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПакетов КАК ДокументыПакетов
		|		ПО ДокументыПакетов.Документ = Файлы.ВладелецФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ПО (ОбъектыУчетаДокументовЭДО.ОбъектУчета = Файлы.ТекущаяВерсия
		|		И ОбъектыУчетаДокументовЭДО.Актуальный)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыССостояниями.ИдентификаторПакета,
		|	ДокументыССостояниями.Документ,
		|	ДокументыССостояниями.Состояние,
		|	ЕСТЬNULL(ДокументыЭДОДляДокументов.ДокументЭДО, НЕОПРЕДЕЛЕНО) КАК ДокументЭДО
		|ИЗ
		|	ДокументыССостояниями КАК ДокументыССостояниями
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыЭДОДляДокументов КАК ДокументыЭДОДляДокументов
		|		ПО ДокументыССостояниями.Документ = ДокументыЭДОДляДокументов.Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПакетыЭДОДокументооборот.ИдентификаторПакета,
		|	ПакетыЭДОДокументооборот.Организация,
		|	ПакетыЭДОДокументооборот.Контрагент,
		|	ПакетыЭДОДокументооборот.Направление,
		|	ПакетыЭДОДокументооборот.ИдентификаторПакетаБЭД
		|ИЗ
		|	РегистрСведений.ПакетыЭДОДокументооборот КАК ПакетыЭДОДокументооборот
		|ГДЕ
		|	ПакетыЭДОДокументооборот.ИдентификаторПакета В (&ИдентификаторыПакетов)";
	Запрос.УстановитьПараметр("ИдентификаторыПакетов", ИдентификаторыПакетов);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаПакетов = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выбрать();
	ВыборкаДокументов = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выбрать();
	
	Пока ВыборкаПакетов.Следующий() Цикл
		
		ДанныеПакета = Новый Структура;
		ДанныеПакета.Вставить("Организация", ВыборкаПакетов.Организация);
		ДанныеПакета.Вставить("Контрагент", ВыборкаПакетов.Контрагент);
		ДанныеПакета.Вставить("Направление", ВыборкаПакетов.Направление);
		ДанныеПакета.Вставить("ИдентификаторПакетаБЭД", ВыборкаПакетов.ИдентификаторПакетаБЭД);
		ДанныеПакета.Вставить("ДанныеДокументов", Новый Соответствие);
		
		ДанныеПакетов.Вставить(ВыборкаПакетов.ИдентификаторПакета, ДанныеПакета);
		
	КонецЦикла;
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		ДанныеДокумента = Новый Структура;
		ДанныеДокумента.Вставить("Состояние", ВыборкаДокументов.Состояние);
		ДанныеДокумента.Вставить("ДокументЭДО", ВыборкаДокументов.ДокументЭДО);
		
		ДанныеПакета = ДанныеПакетов[ВыборкаДокументов.ИдентификаторПакета];
		
		ДанныеПакета.ДанныеДокументов.Вставить(ВыборкаДокументов.Документ, ДанныеДокумента);
		
	КонецЦикла;
	
	Возврат ДанныеПакетов;
	
КонецФункции

Функция СформироватьПакетЭДО(ИдентификаторПакета, ДанныеПакета)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Успех", Ложь);
	СтруктураВозврата.Вставить("ОписаниеОшибки", "");
	СтруктураВозврата.Вставить("ОбработанныеДокументы", Новый Соответствие);
	СтруктураВозврата.Вставить("ИдентификаторПакетаБЭД", Неопределено);
	
	РезультатПроверки = ПроверитьВозможностьСозданияПакетаБЭД(ДанныеПакета);
	
	Если Не РезультатПроверки.Успех Тогда
		СтруктураВозврата.ОписаниеОшибки = РезультатПроверки.ОписаниеОшибки;
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ДокументыДО = Новый Массив;
	ДокументыЭДО = Новый Массив;
	Для Каждого Элемент Из ДанныеПакета.ДанныеДокументов Цикл
		ДокументыДО.Добавить(Элемент.Ключ);
		
		ДокументыЭДО.Добавить(Элемент.Значение.ДокументЭДО);
	КонецЦикла;
	
	Блокировка = Новый БлокировкаДанных;
	
	Для Каждого Документ Из ДокументыДО Цикл
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостояниеДокументовПоЭДО");
		ЭлементБлокировки.УстановитьЗначение("ДокументДО", Документ);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	КонецЦикла;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПакетыЭДОДокументооборот");
	ЭлементБлокировки.УстановитьЗначение("ИдентификаторПакета", ИдентификаторПакета);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка.Заблокировать();
		
		УстановитьПривилегированныйРежим(Истина);
		
		ИДПакетаБЭД = ПакетыДокументовЭДО.СоздатьПакетДокументов(ДокументыЭДО, Неопределено);
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Не ЗначениеЗаполнено(ИДПакетаБЭД) Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось создать пакет документов для отправки оператору ЭДО.'");
		КонецЕсли;
		
		ВыборкаСведенийСостояний = ВыборкаСведенийОСостоянияхЭДОИсходящих(ДокументыДО);
		
		Пока ВыборкаСведенийСостояний.Следующий() Цикл
			
			ДанныеСостояния = ОбменСКонтрагентамиДОСлужебный.НовыеДанныеСостоянияДляУстановки();
			ДанныеСостояния.Состояние = Перечисления.СостоянияЭДОДокументооборот.ОжидаетсяОтправка;
			ДанныеСостояния.Комментарий = НСтр("ru = 'Пакет ЭДО сформирован, документ подготовлен к отправке.'");
			
			ОбменСКонтрагентамиДОСлужебный.УстановитьСостояниеДокументаЭДО(
				ВыборкаСведенийСостояний.ДокументДО,
				ВыборкаСведенийСостояний.Контрагент,
				ДанныеСостояния);
			
		КонецЦикла;
		
		Запись = РегистрыСведений.ПакетыЭДОДокументооборот.СоздатьМенеджерЗаписи();
		Запись.ИдентификаторПакета = ИдентификаторПакета;
		Запись.Прочитать();
		
		Запись.ИдентификаторПакетаБЭД = ИДПакетаБЭД;
		
		Запись.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		СтруктураВозврата.ОписаниеОшибки =
			НСтр("ru = 'При создании пакета документов для отправки оператору ЭДО возникла ошибка:'")
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат СтруктураВозврата;
		
	КонецПопытки;
	
	СтруктураВозврата.Успех = Истина;
	
	Для Каждого Элемент Из ДанныеПакета.ДанныеДокументов Цикл
		СтруктураВозврата.ОбработанныеДокументы.Вставить(Элемент.Ключ, Элемент.Значение.ДокументЭДО);
	КонецЦикла;
	
	СтруктураВозврата.ИдентификаторПакетаБЭД = ИДПакетаБЭД;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПроверитьВозможностьСозданияПакетаБЭД(ДанныеПакета)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Успех", Ложь);
	СтруктураВозврата.Вставить("ОписаниеОшибки", "");
	
	Если ЗначениеЗаполнено(ДанныеПакета.ИдентификаторПакетаБЭД) Тогда
		СтруктураВозврата.ОписаниеОшибки = НСтр("ru = 'Пакет для отправки был создан ранее.'");
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Если ДанныеПакета.Направление <> Перечисления.НаправленияЭДО.Исходящий Тогда
		СтруктураВозврата.ОписаниеОшибки = НСтр("ru = 'Пакет не является исходящим.'");
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Для Каждого Элемент Из ДанныеПакета.ДанныеДокументов Цикл
		
		ДанныеДокумента = Элемент.Значение;
		
		Если ДанныеДокумента.Состояние <>
			Перечисления.СостоянияЭДОДокументооборот.ОжидаетСозданияПакетаЭДО Тогда
			
			СтруктураВозврата.ОписаниеОшибки =
				НСтр("ru = 'Некоторые документы не находятся в статусе ""Ожидает формирования пакета"".'");
			Возврат СтруктураВозврата;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеДокумента.ДокументЭДО) Тогда
			
			СтруктураВозврата.ОписаниеОшибки =
				НСтр("ru = 'Для некоторых документов не создан документ ЭДО.'");
			Возврат СтруктураВозврата;
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураВозврата.Успех = Истина;
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#Область ПроверкаВозможностиСозданияЭД

Функция ДокументГотовКФормированиюИсходящегоЭДО(Документ, ВыводитьСообщения = Ложь,
	КонтрагентыГотовыеКЭДО = Неопределено, ПроверятьПодписаниеДокумента = Истина) Экспорт
	
	Если Не ОбщегоНазначенияБЭД.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		
		СообщитьОНевозможностиФормирования(Документ,
			НастройкиБЭДКлиентСервер.ТекстСообщенияОНеобходимостиНастройкиСистемы("РаботаСЭД"),
			ВыводитьСообщения);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ТаблицыДляПроверки = ТаблицыДляПроверкиВозможностиСозданияИсходящегоЭДО(Документ);
	
	Если ТаблицыДляПроверки.Организации.Количество() = 0 Тогда
		СообщитьОНевозможностиФормирования(Документ,
			НСтр("ru = 'В первой строке таблицы сторон не указана организация.'"),
			ВыводитьСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ПроверятьПодписаниеДокумента
		И (Не ЗначениеЗаполнено(ТаблицыДляПроверки.Организации[0].Подписант)
		Или ТаблицыДляПроверки.Организации[0].Подписан <> Истина) Тогда
		
		СообщитьОНевозможностиФормирования(Документ,
			НСтр("ru = 'Документ не подписан с нашей стороны.'"),
			ВыводитьСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Организация = ТаблицыДляПроверки.Организации[0].Организация;
	
	Если ТаблицыДляПроверки.УчетныеЗаписиЭДО.Количество() = 0 Тогда
		СообщитьОНевозможностиФормирования(Документ,
			СтрШаблон(НСтр("ru = 'У организации %1 нет учетных записей ЭДО.'"), Организация),
			ВыводитьСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТаблицыДляПроверки.Контрагенты.Количество() = 0 Тогда
		СообщитьОНевозможностиФормирования(Документ,
			НСтр("ru = 'В таблице сторон не указаны контрагенты.'"),
			ВыводитьСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Контрагент = ТаблицыДляПроверки.Контрагенты[0].Контрагент;
	ВидДокумента = ТаблицыДляПроверки.Контрагенты[0].ВидДокумента;
	
	Если ТаблицыДляПроверки.НастройкиОтправкиДО.Количество() = 0
		Или ТаблицыДляПроверки.НастройкиОтправки.Количество() = 0 Тогда
		
		СообщитьОНевозможностиФормирования(Документ,
			СтрШаблон(НСтр("ru = 'Нет правил отправки документов вида %1 контрагенту %2.'"),
				ВидДокумента, Контрагент),
			ВыводитьСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТаблицыДляПроверки.ДействующиеНастройкиОтправки.Количество() = 0 Тогда
		
		СообщитьОНевозможностиФормирования(Документ,
			СтрШаблон(НСтр("ru = 'Соглашение по обмену документами между %1 и %2 не действует.'"),
				Организация, Контрагент),
			ВыводитьСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	РолиФайловВидаДокумента = ТаблицыДляПроверки.РолиФайловВидаДокумента;
	ТаблицаРолейДляОтправки = ТаблицыДляПроверки.РольФайлаДляОтправки;
	
	Если РолиФайловВидаДокумента.Количество() > 0 И ТаблицаРолейДляОтправки.Количество() = 0 Тогда
		СообщитьОНевозможностиФормирования(Документ,
			СтрШаблон(НСтр("ru = 'В виде документов %1 не указана роль файла, используемая для отправки по ЭДО.'"),
				ВидДокумента),
			ВыводитьСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТаблицыДляПроверки.ФайлыДляОтправки.Количество() = 0 Тогда
		СообщитьОНевозможностиФормирования(Документ,
			НСтр("ru = 'В документе нет файла для отправки.'"),
			ВыводитьСообщения);
		Возврат Ложь;
	ИначеЕсли ТаблицыДляПроверки.ФайлыДляОтправки.Количество() > 1 Тогда
		СообщитьОНевозможностиФормирования(Документ,
			НСтр("ru = 'В документе более одного файла для отправки. Отправлять по ЭДО можно только один файл.'"),
			ВыводитьСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТаблицыДляПроверки.ПодписиФайлов.Количество() = 0 Тогда
		СообщитьОНевозможностиФормирования(Документ,
			НСтр("ru = 'Нет подписей файла документа.'"),
			ВыводитьСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого СтрокаЭП Из ТаблицыДляПроверки.ПодписиФайлов Цикл
		
		Если Не СтрокаЭП.ПодписьВерна Или Не СтрокаЭП.СертификатДействителен Тогда
			СообщитьОНевозможностиФормирования(Документ,
				НСтр("ru = 'Среди подписей файла есть неверные подписи или подписи с недействительным сертификатом.'"),
				ВыводитьСообщения);
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицыДляПроверки.ОтпечаткиДляОтправки.Количество() = 0 Тогда
		СообщитьОНевозможностиФормирования(Документ,
			НСтр("ru = 'Среди подписей файла нет тех, которые разрешены к обмену ЭДО.'"),
			ВыводитьСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	КонтрагентыГотовыеКЭДО = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
		ТаблицыДляПроверки.ДействующиеНастройкиОтправки.ВыгрузитьКолонку("Контрагент"));
	
	Возврат Истина;
	
КонецФункции

Функция ДокументГотовКОбработкеВходящегоЭД(Документ, ВыводитьСообщения = Истина) Экспорт
	
	Если Не ОбщегоНазначенияБЭД.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		
		СообщитьОНевозможностиФормирования(Документ,
			НастройкиБЭДКлиентСервер.ТекстСообщенияОНеобходимостиНастройкиСистемы("РаботаСЭД"),
			ВыводитьСообщения);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ТаблицыДляПроверки = ТаблицыДляПроверкиВозможностиОбработкиВходящегоЭДО(Документ);
	
	Если ТаблицыДляПроверки.Организации.Количество() = 0 Тогда
		СообщитьОНевозможностиФормирования(Документ,
			НСтр("ru = 'В первой строке таблицы сторон не указана организация.'"),
			ВыводитьСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Организация = ТаблицыДляПроверки.Организации[0].Организация;
	
	Если ТаблицыДляПроверки.УчетныеЗаписиЭДО.Количество() = 0 Тогда
		СообщитьОНевозможностиФормирования(Документ,
			СтрШаблон(НСтр("ru = 'У организации %1 нет учетных записей ЭДО.'"), Организация),
			ВыводитьСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТаблицыДляПроверки.Контрагенты.Количество() = 0 Тогда
		СообщитьОНевозможностиФормирования(Документ,
			НСтр("ru = 'В таблице сторон не указаны контрагенты.'"),
			ВыводитьСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТаблицыДляПроверки.ДокументыЭДО.Количество() = 0 Тогда
		СообщитьОНевозможностиФормирования(Документ,
			НСтр("ru = 'С документом нет связанных актуальных документов ЭДО.'"),
			ВыводитьСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура СообщитьОНевозможностиФормирования(Документ, Причина, ВыводитьСообщения)
	
	Если Не ВыводитьСообщения Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = 
		СтрШаблон(НСтр("ru = 'Документ %1 не может быть отправленным по ЭДО, поскольку:'"), Документ)
		+ Символы.ПС
		+ Причина;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

Функция ТаблицыДляПроверкиВозможностиСозданияИсходящегоЭДО(Документ)
	
	ТекстОсновногоЗапроса =
		"ВЫБРАТЬ
		|	ДокументыДОСтороны.Ссылка КАК Документ,
		|	ДокументыДОСтороны.Сторона КАК Организация,
		|	ДокументыДОСтороны.Ссылка.ВидДокумента КАК ВидДокумента,
		|	ДокументыДОСтороны.Подписан КАК Подписан,
		|	ДокументыДОСтороны.Подписал КАК Подписант
		|ПОМЕСТИТЬ ДокументСОрганизацией
		|ИЗ
		|	Справочник.%ИмяСправочникаДокументаДО%.Стороны КАК ДокументыДОСтороны
		|ГДЕ
		|	ДокументыДОСтороны.Ссылка = &Документ
		|	И ДокументыДОСтороны.НомерСтроки = 1
		|	И ДокументыДОСтороны.Сторона ССЫЛКА Справочник.Организации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументСОрганизацией.Документ КАК Документ,
		|	ДокументСОрганизацией.Организация КАК Организация,
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО
		|ПОМЕСТИТЬ УчетныеЗаписиЭДООрганизации
		|ИЗ
		|	ДокументСОрганизацией КАК ДокументСОрганизацией
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ПО ДокументСОрганизацией.Организация = УчетныеЗаписиЭДО.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументСОрганизацией.Документ КАК Документ,
		|	ДокументСОрганизацией.Организация КАК Организация,
		|	ДокументыДОСтороны.Сторона КАК Контрагент,
		|	ДокументСОрганизацией.ВидДокумента КАК ВидДокумента
		|ПОМЕСТИТЬ ДокументСоСторонами
		|ИЗ
		|	ДокументСОрганизацией КАК ДокументСОрганизацией
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.%ИмяСправочникаДокументаДО%.Стороны КАК ДокументыДОСтороны
		|		ПО ДокументСОрганизацией.Документ = ДокументыДОСтороны.Ссылка
		|ГДЕ
		|	ДокументыДОСтороны.Сторона ССЫЛКА Справочник.Контрагенты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументСоСторонами.Документ КАК Документ,
		|	ДокументСоСторонами.Организация КАК Организация,
		|	ДокументСоСторонами.Контрагент КАК Контрагент,
		|	НастройкиОтправкиДО.ВидДокументаЭДО КАК ВидДокументаЭДО,
		|	НастройкиОтправкиДО.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещениеОПолучении,
		|	НастройкиОтправкиДО.ТребуетсяОтветнаяПодпись КАК ТребуетсяОтветнаяПодпись,
		|	НастройкиОтправкиДО.Формат КАК Формат
		|ПОМЕСТИТЬ НастройкиОтправкиДО
		|ИЗ
		|	ДокументСоСторонами КАК ДокументСоСторонами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиДокументовПоЭДО КАК НастройкиОтправкиДО
		|		ПО ДокументСоСторонами.Организация = НастройкиОтправкиДО.Отправитель
		|		И ДокументСоСторонами.Контрагент = НастройкиОтправкиДО.Получатель
		|		И ДокументСоСторонами.ВидДокумента = НастройкиОтправкиДО.ВидДокумента
		|ГДЕ
		|	НастройкиОтправкиДО.Отправлять
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиОтправкиДО.Документ КАК Документ,
		|	НастройкиОтправкиДО.Организация КАК Организация,
		|	НастройкиОтправкиДО.Контрагент КАК Контрагент,
		|	НастройкиОтправки.ИдентификаторОтправителя КАК ИдентификаторОрганизации,
		|	НастройкиОтправки.ИдентификаторПолучателя КАК ИдентификаторКонтрагента,
		|	НастройкиОтправки.МаршрутПодписания КАК МаршрутПодписания,
		|	НастройкиОтправки.СпособОбменаЭД КАК СпособОбмена,
		|	НастройкиОтправки.ВыгружатьДополнительныеСведения КАК ВыгружатьДополнительныеСведения,
		|	НастройкиОтправкиДО.ВидДокументаЭДО КАК ВидДокументаЭДО,
		|	НастройкиОтправкиДО.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещениеОПолучении,
		|	НастройкиОтправкиДО.ТребуетсяОтветнаяПодпись КАК ТребуетсяОтветнаяПодпись,
		|	НастройкиОтправкиДО.Формат КАК Формат
		|ПОМЕСТИТЬ НастройкиОтправки
		|ИЗ
		|	НастройкиОтправкиДО КАК НастройкиОтправкиДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправки
		|		ПО НастройкиОтправкиДО.Организация = НастройкиОтправки.Отправитель
		|		И НастройкиОтправкиДО.Контрагент = НастройкиОтправки.Получатель
		|		И (НастройкиОтправкиДО.ВидДокументаЭДО = НастройкиОтправки.ВидДокумента
		|		ИЛИ НастройкиОтправкиДО.ВидДокументаЭДО = ЗНАЧЕНИЕ(Справочник.ВидыДокументовЭДО.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиОтправки.Документ КАК Документ,
		|	НастройкиОтправки.Организация КАК Организация,
		|	НастройкиОтправки.Контрагент КАК Контрагент,
		|	НастройкиОтправки.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	НастройкиОтправки.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ПриглашенияКОбмену.Статус КАК Статус,
		|	НастройкиОтправки.МаршрутПодписания КАК МаршрутПодписания,
		|	НастройкиОтправки.ВыгружатьДополнительныеСведения КАК ВыгружатьДополнительныеСведения,
		|	НастройкиОтправки.СпособОбмена КАК СпособОбмена,
		|	НастройкиОтправки.ВидДокументаЭДО КАК ВидДокументаЭДО,
		|	НастройкиОтправки.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещениеОПолучении,
		|	НастройкиОтправки.ТребуетсяОтветнаяПодпись КАК ТребуетсяОтветнаяПодпись,
		|	НастройкиОтправки.Формат КАК Формат
		|ПОМЕСТИТЬ ДействующиеНастройкиОтправки
		|ИЗ
		|	НастройкиОтправки КАК НастройкиОтправки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбмену
		|		ПО НастройкиОтправки.ИдентификаторОрганизации = ПриглашенияКОбмену.ИдентификаторОрганизации
		|		И НастройкиОтправки.ИдентификаторКонтрагента = ПриглашенияКОбмену.ИдентификаторКонтрагента
		|ГДЕ
		|	ПриглашенияКОбмену.Статус В (&СтатусыДействующегоПриглашения)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыДокументовРолиФайлов.Ссылка КАК ВидДокумента,
		|	ВидыДокументовРолиФайлов.Роль КАК РольФайла,
		|	ВидыДокументовРолиФайлов.ФайлЭлектронногоДокумента
		|ПОМЕСТИТЬ РолиФайловВидаДокумента
		|ИЗ
		|	ДокументСоСторонами КАК ДокументСоСторонами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументов.РолиФайлов КАК ВидыДокументовРолиФайлов
		|		ПО ДокументСоСторонами.ВидДокумента = ВидыДокументовРолиФайлов.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РолиФайловВидаДокумента.РольФайла КАК РольФайла
		|ПОМЕСТИТЬ РольФайлаДляОтправки
		|ИЗ
		|	РолиФайловВидаДокумента КАК РолиФайловВидаДокумента
		|ГДЕ
		|	РолиФайловВидаДокумента.ФайлЭлектронногоДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Файлы.Ссылка КАК Файл,
		|	ЕСТЬNULL(РолиФайловДокументов.Роль, ЗНАЧЕНИЕ(Справочник.РолиФайлов.ПустаяСсылка)) КАК Роль,
		|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия
		|ПОМЕСТИТЬ ФайлыДокумента
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО СлужебныеФайлыДокументов.Файл = Файлы.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РолиФайловДокументов КАК РолиФайловДокументов
		|		ПО Файлы.Ссылка = РолиФайловДокументов.Файл
		|ГДЕ
		|	Файлы.ВладелецФайла = &Документ
		|	И НЕ Файлы.ПометкаУдаления
		|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФайлыДокумента.Файл,
		|	ФайлыДокумента.ТекущаяВерсия,
		|	ФайлыДокумента.Роль
		|ПОМЕСТИТЬ ФайлыДляОтправки
		|ИЗ
		|	ФайлыДокумента КАК ФайлыДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РольФайлаДляОтправки КАК РольФайлаДляОтправки
		|		ПО ФайлыДокумента.Роль = РольФайлаДляОтправки.РольФайла
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ФайлыДокумента.Файл,
		|	ФайлыДокумента.ТекущаяВерсия,
		|	ФайлыДокумента.Роль
		|ИЗ
		|	ФайлыДокумента КАК ФайлыДокумента
		|ГДЕ
		|	ФайлыДокумента.Роль = ЗНАЧЕНИЕ(Справочник.РолиФайлов.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФайлыДляОтправки.Файл КАК Файл,
		|	ФайлыДляОтправки.ТекущаяВерсия КАК ТекущаяВерсия,
		|	ЭлектронныеПодписи.Отпечаток КАК Отпечаток,
		|	ЭлектронныеПодписи.ПодписьВерна КАК ПодписьВерна,
		|	ЭлектронныеПодписи.СертификатДействителен КАК СертификатДействителен
		|ПОМЕСТИТЬ ПодписиФайловДокумента
		|ИЗ
		|	ФайлыДляОтправки КАК ФайлыДляОтправки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|		ПО ФайлыДляОтправки.ТекущаяВерсия = ЭлектронныеПодписи.ПодписанныйОбъект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УчетныеЗаписиЭДООрганизации.Документ КАК Документ,
		|	УчетныеЗаписиЭДООрганизации.Организация КАК Организация,
		|	УчетныеЗаписиЭДООрганизации.ИдентификаторЭДО КАК ИдентификаторЭДО,
		|	СертификатыУчетныхЗаписейЭДО.Сертификат КАК Сертификат,
		|	СертификатыУчетныхЗаписейЭДО.Сертификат.Отпечаток КАК Отпечаток
		|ПОМЕСТИТЬ СертификатыДляОбменаЭДО
		|ИЗ
		|	УчетныеЗаписиЭДООрганизации КАК УчетныеЗаписиЭДООрганизации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыУчетныхЗаписейЭДО КАК СертификатыУчетныхЗаписейЭДО
		|		ПО УчетныеЗаписиЭДООрганизации.ИдентификаторЭДО = СертификатыУчетныхЗаписейЭДО.ИдентификаторЭДО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодписиФайловДокумента.Файл КАК Файл,
		|	ПодписиФайловДокумента.ТекущаяВерсия КАК ТекущаяВерсия,
		|	СертификатыДляОбменаЭДО.Отпечаток КАК Отпечаток
		|ПОМЕСТИТЬ ПодписиПоДоступнымСертификатам
		|ИЗ
		|	ПодписиФайловДокумента КАК ПодписиФайловДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СертификатыДляОбменаЭДО КАК СертификатыДляОбменаЭДО
		|		ПО ПодписиФайловДокумента.Отпечаток = СертификатыДляОбменаЭДО.Отпечаток
		|ГДЕ
		|	ПодписиФайловДокумента.ПодписьВерна
		|	И ПодписиФайловДокумента.СертификатДействителен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент КАК ДокументЭДО
		|ПОМЕСТИТЬ ЭлектронныеДокументы
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ПО (Файлы.ТекущаяВерсия = ОбъектыУчетаДокументовЭДО.ОбъектУчета
		|		И ОбъектыУчетаДокументовЭДО.Актуальный)
		|ГДЕ
		|	Файлы.ВладелецФайла = &Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостояниеДокументовПоЭДОСрезПоследних.СостояниеВерсииДокументаПоЭДО КАК Состояние
		|ПОМЕСТИТЬ СостоянияДокументаДО
		|ИЗ
		|	РегистрСведений.СостояниеДокументовПоЭДО.СрезПоследних(, ДокументДО = &Документ) КАК
		|		СостояниеДокументовПоЭДОСрезПоследних";
	ТекстОсновногоЗапроса = СтрЗаменить(ТекстОсновногоЗапроса,
		"%ИмяСправочникаДокументаДО%",
		ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ИмяСправочникаДокументовДО());
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ТекстОсновногоЗапроса);
	
	НеобходимыеТаблицы = Новый Структура;
	НеобходимыеТаблицы.Вставить("Организации",                      "ДокументСОрганизацией");
	НеобходимыеТаблицы.Вставить("УчетныеЗаписиЭДО",                 "УчетныеЗаписиЭДООрганизации");
	НеобходимыеТаблицы.Вставить("Контрагенты",                      "ДокументСоСторонами");
	
	НеобходимыеТаблицы.Вставить("НастройкиОтправкиДО",              "НастройкиОтправкиДО");
	НеобходимыеТаблицы.Вставить("НастройкиОтправки",                "НастройкиОтправки");
	НеобходимыеТаблицы.Вставить("ДействующиеНастройкиОтправки",     "ДействующиеНастройкиОтправки");
	НеобходимыеТаблицы.Вставить("РолиФайловВидаДокумента",          "РолиФайловВидаДокумента");
	НеобходимыеТаблицы.Вставить("РольФайлаДляОтправки",             "РольФайлаДляОтправки");
	НеобходимыеТаблицы.Вставить("ФайлыДокумента",                   "ФайлыДокумента");
	НеобходимыеТаблицы.Вставить("ФайлыДляОтправки",                 "ФайлыДляОтправки");
	НеобходимыеТаблицы.Вставить("ПодписиФайлов",                    "ПодписиФайловДокумента");
	НеобходимыеТаблицы.Вставить("ОтпечаткиДляОтправки",             "ПодписиПоДоступнымСертификатам");
	
	НеобходимыеТаблицы.Вставить("ЭлектронныеДокументы", "ЭлектронныеДокументы");
	НеобходимыеТаблицы.Вставить("СостоянияДокументаДО", "СостоянияДокументаДО");
	
	Для Каждого Элемент Из НеобходимыеТаблицы Цикл
		ТекстыЗапроса.Добавить(
			"ВЫБРАТЬ
			|	*
			|ИЗ
			|	" + Элемент.Значение + " КАК " + Элемент.Значение);
	КонецЦикла;
	
	РазделительЗапросов =
		"
		|;
		|////////////////////////////////////////////////////////////
		|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, РазделительЗапросов);
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("СтатусыДействующегоПриглашения", Перечисления.СтатусыПриглашений.Принято);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	КоличествоПакетов = РезультатыЗапроса.Количество();
	КоличествоТаблиц = НеобходимыеТаблицы.Количество();
	
	Итератор = 0;
	
	ТаблицыДляПроверки = Новый Структура;
	
	Для Каждого Элемент Из НеобходимыеТаблицы Цикл
		Таблица = РезультатыЗапроса[КоличествоПакетов - КоличествоТаблиц + Итератор].Выгрузить();
		ТаблицыДляПроверки.Вставить(Элемент.Ключ, Таблица);
		
		Итератор = Итератор + 1;
	КонецЦикла;
	
	Возврат ТаблицыДляПроверки;
	
КонецФункции

Функция ТаблицыДляПроверкиВозможностиОбработкиВходящегоЭДО(Документ)
	
	ТекстОсновногоЗапроса =
		"ВЫБРАТЬ
		|	ДокументыДОСтороны.Ссылка КАК Документ,
		|	ДокументыДОСтороны.Сторона КАК Организация,
		|	ДокументыДОСтороны.Ссылка.ВидДокумента КАК ВидДокумента,
		|	ДокументыДОСтороны.Подписан КАК Подписан,
		|	ДокументыДОСтороны.Подписал КАК Подписант
		|ПОМЕСТИТЬ ДокументСОрганизацией
		|ИЗ
		|	Справочник.%ИмяСправочникаДокументаДО%.Стороны КАК ДокументыДОСтороны
		|ГДЕ
		|	ДокументыДОСтороны.Ссылка = &Документ
		|	И ДокументыДОСтороны.НомерСтроки = 1
		|	И ДокументыДОСтороны.Сторона ССЫЛКА Справочник.Организации
		|;
		|////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументСОрганизацией.Документ КАК Документ,
		|	ДокументСОрганизацией.Организация КАК Организация,
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО
		|ПОМЕСТИТЬ УчетныеЗаписиЭДООрганизации
		|ИЗ
		|	ДокументСОрганизацией КАК ДокументСОрганизацией
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ПО ДокументСОрганизацией.Организация = УчетныеЗаписиЭДО.Организация
		|;
		|////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументСОрганизацией.Документ КАК Документ,
		|	ДокументСОрганизацией.Организация КАК Организация,
		|	ДокументыДОСтороны.Сторона КАК Контрагент,
		|	ДокументСОрганизацией.ВидДокумента КАК ВидДокумента
		|ПОМЕСТИТЬ ДокументСоСторонами
		|ИЗ
		|	ДокументСОрганизацией КАК ДокументСОрганизацией
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.%ИмяСправочникаДокументаДО%.Стороны КАК ДокументыДОСтороны
		|		ПО ДокументСОрганизацией.Документ = ДокументыДОСтороны.Ссылка
		|ГДЕ
		|	ДокументыДОСтороны.Сторона ССЫЛКА Справочник.Контрагенты
		|;
		|////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументСОрганизацией.Документ КАК ДокументДО,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент КАК ДокументЭДО
		|ПОМЕСТИТЬ ДокументыЭДОПоДокументам
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументСОрганизацией КАК ДокументСОрганизацией
		|		ПО Файлы.ВладелецФайла = ДокументСОрганизацией.Документ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ПО Файлы.ТекущаяВерсия = ОбъектыУчетаДокументовЭДО.ОбъектУчета
		|ГДЕ
		|	ОбъектыУчетаДокументовЭДО.Актуальный";
	ТекстОсновногоЗапроса = СтрЗаменить(ТекстОсновногоЗапроса,
		"%ИмяСправочникаДокументаДО%",
		ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ИмяСправочникаДокументовДО());
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ТекстОсновногоЗапроса);
	
	НеобходимыеТаблицы = Новый Структура;
	НеобходимыеТаблицы.Вставить("Организации",      "ДокументСОрганизацией");
	НеобходимыеТаблицы.Вставить("УчетныеЗаписиЭДО", "УчетныеЗаписиЭДООрганизации");
	НеобходимыеТаблицы.Вставить("Контрагенты",      "ДокументСоСторонами");
	
	НеобходимыеТаблицы.Вставить("ДокументыЭДО",     "ДокументыЭДОПоДокументам");
	
	Для Каждого Элемент Из НеобходимыеТаблицы Цикл
		ТекстыЗапроса.Добавить(
			"ВЫБРАТЬ
			|	*
			|ИЗ
			|	" + Элемент.Значение + " КАК " + Элемент.Значение);
	КонецЦикла;
	
	РазделительЗапросов =
		"
		|;
		|////////////////////////////////////////////////////////////
		|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, РазделительЗапросов);
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	КоличествоПакетов = РезультатыЗапроса.Количество();
	КоличествоТаблиц = НеобходимыеТаблицы.Количество();
	
	Итератор = 0;
	
	ТаблицыДляПроверки = Новый Структура;
	
	Для Каждого Элемент Из НеобходимыеТаблицы Цикл
		Таблица = РезультатыЗапроса[КоличествоПакетов - КоличествоТаблиц + Итератор].Выгрузить();
		ТаблицыДляПроверки.Вставить(Элемент.Ключ, Таблица);
		
		Итератор = Итератор + 1;
	КонецЦикла;
	
	Возврат ТаблицыДляПроверки;
	
КонецФункции

#КонецОбласти

#Область АннулированиеДокументов

// Аннулирование добавим позже

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьСобытиеВЖурналРегистрации(Событие, Уровень, Комментарий)
	
	ЗаписьЖурналаРегистрации(Событие, Уровень, , , Комментарий);
	
КонецПроцедуры

Функция ИмяСобытияСозданияДокументовДОНаОснованииЭД()
	
	Возврат НСтр("ru = 'ЭДО.Создание документов 1С:ДО на основании ЭД'");
	
КонецФункции

Функция ИмяСобытияСозданияЭДНаОснованииДокументовДО()
	
	Возврат НСтр("ru = 'ЭДО.Создание ЭД на основании документов 1С:ДО'");
	
КонецФункции

Функция ИмяСобытияОтправкиУведомленийЭДО()
	
	Возврат НСтр("ru = 'Рассылка уведомлений о проблемах обмена ЭДО.'");
	
КонецФункции

Функция ВыборкаСведенийОСостоянияхЭДОИсходящих(Документы)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СостояниеДокументовПоЭДОСрезПоследних.ДокументДО,
		|	СостояниеДокументовПоЭДОСрезПоследних.Контрагент,
		|	СостояниеДокументовПоЭДОСрезПоследних.СостояниеВерсииДокументаПоЭДО,
		|	СостояниеДокументовПоЭДОСрезПоследних.Комментарий,
		|	СостояниеДокументовПоЭДОСрезПоследних.НаправлениеЭД
		|ИЗ
		|	РегистрСведений.СостояниеДокументовПоЭДО.СрезПоследних(, ДокументДО В (&Документы)
		|	И НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭДО.Исходящий)) КАК СостояниеДокументовПоЭДОСрезПоследних";
	Запрос.УстановитьПараметр("Документы", Документы);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Заполняет документ по шаблону в соответствии с видом и тематикой
//
// Параметры:
//  ДокументДО - СправочникОбъект.ДокументыПредприятия
//  ВидДокумента - СправочникСсылка.ВидыДокументов
//  Тематика - СправочникСсылка.ТематикиДокументов
//
Процедура ЗаполнитьДокументПоШаблону(ДокументДО, ВидДокумента, Тематика)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШаблоныДокументов.Ссылка КАК ШаблонДокумента
	|ИЗ
	|	Справочник.ШаблоныДокументов КАК ШаблоныДокументов
	|ГДЕ
	|	ШаблоныДокументов.ВидДокумента = &ВидДокумента
	|	И ШаблоныДокументов.Тематика = &Тематика
	|	И ШаблоныДокументов.Тематика <> ЗНАЧЕНИЕ(Справочник.ТематикиДокументов.ПустаяСсылка)
	|	И ШаблоныДокументов.ПометкаУдаления = ЛОЖЬ
	|	И ШаблоныДокументов.ЭтоГруппа = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ШаблоныДокументов.Ссылка
	|ИЗ
	|	Справочник.ШаблоныДокументов КАК ШаблоныДокументов
	|ГДЕ
	|	ШаблоныДокументов.ВидДокумента = &ВидДокумента
	|	И ШаблоныДокументов.Тематика = ЗНАЧЕНИЕ(Справочник.ТематикиДокументов.ПустаяСсылка)
	|	И ШаблоныДокументов.ПометкаУдаления = ЛОЖЬ
	|	И ШаблоныДокументов.ЭтоГруппа = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	Запрос.УстановитьПараметр("Тематика", Тематика);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ШаблоныДокументов.ЗаполнитьРеквизитыДокументаПоШаблону(Выборка.ШаблонДокумента, ДокументДО);
		
	КонецЕсли;
	
КонецПроцедуры


#Область ФорматДокументПредприятия

#Область ЗагрузкаДокумента

// Заполняет роли загруженных файлов.
// 
// Параметры:
//  ДокументДО - СправочникОбъект.ДокументыПредприятия
//
Процедура ЗаполнитьРолиФайлов(ДокументДО) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВидыДокументовРолиФайлов.Роль,
		|	ВидыДокументовРолиФайлов.Обязательная КАК Обязательная,
		|	ВидыДокументовРолиФайлов.ТолькоОдинФайл КАК ТолькоОдинФайл
		|ИЗ
		|	Справочник.ВидыДокументов.РолиФайлов КАК ВидыДокументовРолиФайлов
		|ГДЕ
		|	ВидыДокументовРолиФайлов.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Обязательная УБЫВ,
		|	ТолькоОдинФайл УБЫВ";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументДО.ВидДокумента);	
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;	
	
	ФайлРоль = Новый Соответствие;
	ФайлыБезРолей = ФайлыБезРолей(ДокументДО.Ссылка);
	
	Выборка = РезультатЗапроса.Выбрать();
	КоличествоРолей = Выборка.Количество();
	НомерВыборки = 1;
	Пока Выборка.Следующий() Цикл
		Для Каждого Файл Из ФайлыБезРолей Цикл
			Если ФайлРоль.Получить(Файл) = Неопределено Тогда
				РегистрыСведений.РолиФайловДокументов.ЗаписатьРольФайла(Файл, Выборка.Роль);
				ФайлРоль.Вставить(Файл, Выборка.Роль);
			КонецЕсли;	
			Если Выборка.ТолькоОдинФайл Тогда
				Прервать;
			КонецЕсли;
			Если НомерВыборки <> КоличествоРолей Тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		НомерВыборки = НомерВыборки + 1; 
	КонецЦикла;
		
КонецПроцедуры

// Создаёт файлы документа.
// 
// Параметры:
//  ДокументДО - ОпределяемыйТип.ДокументДОДляЭДО
//  Файлы - см. СинхронизацияЭДО.НовоеОписаниеДополнительныхФайлов
//  НастройкиВидаДокумента - Структура
//
Процедура ДобавитьФайлыДокумента(ДокументДО, Файлы, НастройкиВидаДокумента) Экспорт
	
	ВестиУчетСканКопийОригиналовДокументов = ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов");
		
	Для Каждого Файл Из Файлы Цикл
		ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
		ПараметрыФайла.ВладелецФайлов = ДокументДО;
		ЗаполнитьЗначенияСвойств(ПараметрыФайла, Файл);
		НовыйФайл = РаботаСфайлами.ДобавитьФайл(ПараметрыФайла, ПоместитьВоВременноеХранилище(Файл.ДвоичныеДанныеФайла));
		Если ВестиУчетСканКопийОригиналовДокументов
			И ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(ПараметрыФайла.РасширениеБезТочки) Тогда
			Делопроизводство.СохранитьСведенияОбОригиналеФайла(НовыйФайл, ДокументДО);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Контактное лицо стороны документа.
// 
// Параметры:
//  Владелец - ОпределяемыйТип.УчастникЭДО
//  Наименование - Строка
//  Телефон - Строка - Номер телефона.
//  АдресЭП - Строка - Адрес электронной почты.
//  Должность - Строка
// 
// Возвращаемое значение:
//  СправочникСсылка.Пользователи, СправочникСсылка.КонтактныеЛица -
//
Функция КонтактноеЛицоСтороныДокумента(Владелец, Наименование, Телефон, АдресЭП, Должность)
	
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат КонтактноеЛицоКонтрагента(Владелец, Наименование, Телефон, АдресЭП, Должность);
	КонецЕсли;	
	
	Возврат КонтактноеЛицоОрганизации(Наименование, Телефон, АдресЭП);
	
КонецФункции

// Контактное лицо контрагента.
// 
// Параметры:
//  Владелец - СправочникСсылка.Контрагенты
//  Наименование - Строка
//  Телефон - Строка - Номер телефона.
//  АдресЭП - Строка - Адрес электронной почты.
//  Должность - Строка
// 
// Возвращаемое значение:
//  СправочникСсылка.КонтактныеЛица
//
Функция КонтактноеЛицоКонтрагента(Владелец, Наименование, Телефон, АдресЭП, Должность)	
	
	КонтактноеЛицо = Справочники.КонтактныеЛица.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(Наименование) Или Не ЗначениеЗаполнено(Владелец) Тогда
		Возврат КонтактноеЛицо;
	КонецЕсли;	
	
	НомерТелефона = СтрЗаменить(Телефон, " ", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, ")", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "(", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "+", "");
	
	Если ЗначениеЗаполнено(НомерТелефона) И ЗначениеЗаполнено(АдресЭП)  Тогда

		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КонтактныеЛица.Ссылка КАК КонтактноеЛицо
			|ИЗ
			|	Справочник.КонтактныеЛица КАК КонтактныеЛица
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
			|		ПО КонтактныеЛица.Ссылка = КонтактныеЛицаКонтактнаяИнформация.Ссылка
			|		И КонтактныеЛица.Владелец = &Владелец
			|		И КонтактныеЛицаКонтактнаяИнформация.НомерТелефона = &НомерТелефона
			|		И КонтактныеЛицаКонтактнаяИнформация.АдресЭП = &АдресЭП";

		Запрос.УстановитьПараметр("НомерТелефона", НомерТелефона);
		Запрос.УстановитьПараметр("АдресЭП", АдресЭП);
		Запрос.УстановитьПараметр("Владелец", Владелец);
		
		РезультатЗапроса = Запрос.Выполнить();

		Выборка = РезультатЗапроса.Выбрать();

		Если Выборка.Следующий() Тогда
			Возврат Выборка.КонтактноеЛицо;
		КонецЕсли;

	КонецЕсли;	
	
	Если ЗначениеЗаполнено(НомерТелефона) Тогда

		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КонтактныеЛица.Ссылка КАК КонтактноеЛицо
			|ИЗ
			|	Справочник.КонтактныеЛица КАК КонтактныеЛица
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
			|		ПО КонтактныеЛица.Ссылка = КонтактныеЛицаКонтактнаяИнформация.Ссылка
			|		И КонтактныеЛица.Владелец = &Владелец
			|		И КонтактныеЛицаКонтактнаяИнформация.НомерТелефона = &НомерТелефона";

		Запрос.УстановитьПараметр("НомерТелефона", НомерТелефона);
		Запрос.УстановитьПараметр("Владелец", Владелец);
		РезультатЗапроса = Запрос.Выполнить();

		Выборка = РезультатЗапроса.Выбрать();

		Если Выборка.Следующий() Тогда
			Возврат Выборка.КонтактноеЛицо;
		КонецЕсли;

	КонецЕсли;

	Если ЗначениеЗаполнено(АдресЭП) Тогда

		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КонтактныеЛица.Ссылка КАК КонтактноеЛицо
			|ИЗ
			|	Справочник.КонтактныеЛица КАК КонтактныеЛица
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
			|		ПО КонтактныеЛица.Ссылка = КонтактныеЛицаКонтактнаяИнформация.Ссылка
			|		И КонтактныеЛица.Владелец = &Владелец
			|		И КонтактныеЛицаКонтактнаяИнформация.АдресЭП = &АдресЭП";
		Запрос.УстановитьПараметр("Владелец", Владелец);
		Запрос.УстановитьПараметр("АдресЭП", АдресЭП);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();

		Если Выборка.Следующий() Тогда
			Возврат Выборка.КонтактноеЛицо;
		КонецЕсли;

	КонецЕсли;
	
	КонтактноеЛицо = Справочники.КонтактныеЛица.НайтиПоНаименованию(Наименование, , , Владелец );
	Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		Возврат КонтактноеЛицо;
	КонецЕсли;	
	
	КонтактноеЛицоОбъект = Справочники.КонтактныеЛица.СоздатьЭлемент();
	КонтактноеЛицоОбъект.Владелец = Владелец;
	КонтактноеЛицоОбъект.Наименование = Наименование;
	КонтактноеЛицоОбъект.Должность = Справочники.Должности.НайтиПоНаименованию(Должность);
	
	Если ЗначениеЗаполнено(Телефон) Тогда
		Контакт = КонтактноеЛицоОбъект.КонтактнаяИнформация.Добавить();
		Контакт.Представление = Телефон;
		Контакт.НомерТелефона = НомерТелефона;
		Контакт.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
		Контакт.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		Контакт.ВидДляСписка = Контакт.Вид;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(АдресЭП) Тогда
		Контакт = КонтактноеЛицоОбъект.КонтактнаяИнформация.Добавить();
		Контакт.Представление = АдресЭП;
		Контакт.АдресЭП = АдресЭП;
		Контакт.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		Контакт.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
		Контакт.ВидДляСписка = 	Контакт.Вид;
	КонецЕсли;
	
	КонтактноеЛицоОбъект.Записать();
	
	КонтактноеЛицо = КонтактноеЛицоОбъект.Ссылка;
	
	Возврат КонтактноеЛицо;	
	
КонецФункции	

// Контактное лицо органиазации.
// 
// Параметры:
//  Наименование - Строка
//  Телефон - Строка - Номер телефона.
//  АдресЭП - Строка - Адрес электронной почты.
// 
// Возвращаемое значение:
//  СправочникСсылка.Сотрудники
//
Функция КонтактноеЛицоОрганизации(Наименование, Телефон, АдресЭП)
	
	Если Не ЗначениеЗаполнено(Наименование) Тогда
		Возврат Справочники.Сотрудники.ПустаяСсылка();
	КонецЕсли;

	НомерТелефона = СтрЗаменить(Телефон, " ", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, ")", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "(", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "+", "");

	Если ЗначениеЗаполнено(НомерТелефона) И ЗначениеЗаполнено(АдресЭП) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СотрудникиКонтактнаяИнформация.Ссылка КАК КонтактноеЛицо
			|ИЗ
			|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
			|ГДЕ
			|	СотрудникиКонтактнаяИнформация.НомерТелефона = &НомерТелефона
			|	И СотрудникиКонтактнаяИнформация.АдресЭП = &АдресЭП";

		Запрос.УстановитьПараметр("НомерТелефона", НомерТелефона);
		Запрос.УстановитьПараметр("АдресЭП", АдресЭП);
		
		РезультатЗапроса = Запрос.Выполнить();

		Выборка = РезультатЗапроса.Выбрать();

		Если Выборка.Следующий() Тогда
			Возврат Выборка.КонтактноеЛицо;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерТелефона) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СотрудникиКонтактнаяИнформация.Ссылка КАК КонтактноеЛицо
			|ИЗ
			|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
			|ГДЕ
			|	СотрудникиКонтактнаяИнформация.НомерТелефона = &НомерТелефона";

		Запрос.УстановитьПараметр("НомерТелефона", НомерТелефона);

		РезультатЗапроса = Запрос.Выполнить();

		Выборка = РезультатЗапроса.Выбрать();

		Если Выборка.Следующий() Тогда
			Возврат Выборка.КонтактноеЛицо;
		КонецЕсли;
		
	КонецЕсли;

	Если  ЗначениеЗаполнено(АдресЭП) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СотрудникиКонтактнаяИнформация.Ссылка КАК КонтактноеЛицо
			|ИЗ
			|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
			|ГДЕ
			|	СотрудникиКонтактнаяИнформация.АдресЭП = &АдресЭП";

		Запрос.УстановитьПараметр("АдресЭП", АдресЭП);

		РезультатЗапроса = Запрос.Выполнить();

		Выборка = РезультатЗапроса.Выбрать();

		Если Выборка.Следующий() Тогда
			Возврат Выборка.КонтактноеЛицо;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Справочники.Сотрудники.НайтиПоНаименованию(Наименование);
	
КонецФункции

// Заполнить контрагентов документа предприятия.
// 
// Параметры:
//  ДокументДО - СправочникОбъект.ДокументыПредприятия
//  Контрагенты - см. Обработка.ФорматДокументПредприятия.ИнформацияДокумента.Контрагент
//  Организация - см. Обработка.ФорматДокументПредприятия.ИнформацияДокумента.Организация
//  ЗеркальныйПоиск - Булево - Истина, если поиск организации по данным контрагента и контрагента по данным организации
//
Процедура ЗаполнитьКонтрагентовДокументаПредприятия(ДокументДО, Контрагенты, Организация, ЗеркальныйПоиск)
	
	ЕстьКонтрагенты = Контрагенты.Количество() > 0;
	ДокументДО.Контрагенты.Очистить();
	
	Если ЗначениеЗаполнено(ДокументДО.Контрагент) Тогда
		СтрокаТЧ = ДокументДО.Контрагенты.Добавить();
		СтрокаТЧ.Контрагент = ДокументДО.Контрагент;

		ДанныеКонтактаКА = ?(ЗеркальныйПоиск Или Не ЕстьКонтрагенты, Организация.КонтактныеДанные,
			Контрагенты[0].КонтактныеДанные);
		Если ДанныеКонтактаКА <> Неопределено Тогда
			СтрокаТЧ.КонтактноеЛицо = КонтактноеЛицоКонтрагента(ДокументДО.Контрагент, ДанныеКонтактаКА.Наименование,
				ДанныеКонтактаКА.НомерТелефона, ДанныеКонтактаКА.АдресЭлектроннойПочты, ДанныеКонтактаКА.Должность);
		КонецЕсли;

		ДанныеПодписантаКА = ?(ЗеркальныйПоиск Или Не ЕстьКонтрагенты, Организация.СведенияОПодписанте,
			Контрагенты[0].СведенияОПодписанте);
		Если ДанныеПодписантаКА <> Неопределено Тогда
			СтрокаТЧ.ПодписалОтКонтрагента = КонтактноеЛицоКонтрагента(ДокументДО.Контрагент,
				ДанныеПодписантаКА.Наименование, ДанныеПодписантаКА.НомерТелефона,
				ДанныеПодписантаКА.АдресЭлектроннойПочты, ДанныеПодписантаКА.Должность);
		КонецЕсли;
	КонецЕсли;

	Если Контрагенты.Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;
	
	Для Индекс = 1 По Контрагенты.ВГраница() Цикл
		
		//@skip-check query-in-loop
		Контрагент = СторонаДокументаПоДаннымДокументаПредприятия(Контрагенты[Индекс].ИдентификационныеСведения,
			"Контрагент");

		Если Не ЗначениеЗаполнено(Контрагент) Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТЧ = ДокументДО.Контрагенты.Добавить();
		СтрокаТЧ.Контрагент = Контрагент;

		ДанныеКонтакта = Контрагенты[Индекс].КонтактныеДанные;
		Если ДанныеКонтакта <> Неопределено Тогда
			//@skip-check query-in-loop
			СтрокаТЧ.КонтактноеЛицо = КонтактноеЛицоКонтрагента(Контрагент, ДанныеКонтакта.Наименование,
				ДанныеКонтакта.НомерТелефона, ДанныеКонтакта.АдресЭлектроннойПочты, ДанныеКонтакта.Должность);
		КонецЕсли;

		ДанныеПодписанта = Контрагенты[Индекс].СведенияОПодписанте;
		Если ДанныеПодписанта <> Неопределено Тогда
			//@skip-check query-in-loop
			СтрокаТЧ.ПодписалОтКонтрагента = КонтактноеЛицоКонтрагента(Контрагент, ДанныеПодписанта.Наименование,
				ДанныеПодписанта.НомерТелефона, ДанныеПодписанта.АдресЭлектроннойПочты, ДанныеПодписанта.Должность);
		КонецЕсли;

	КонецЦикла;
					
КонецПроцедуры	

// Заполнить стороны документа предприятия.
// 
// Параметры:
//  ДокументДО - СправочникОбъект.ДокументыПредприятия
//  ИнформацияДокумента - СтрокаТабличнойЧасти - см. Обработка.ФорматДокументПредприятия.ИнформацияДокумента
//  НастройкиДокумента - Структура:
//   * ВестиУчетСторон - Булево
//   * ОбязательноеУказаниеОтветственного - Булево
//   * ЯвляетсяВходящейКорреспонденцией - Булево
//   * ЯвляетсяИсходящейКорреспонденцией - Булево
//   * ЯвляетсяЗаявкойНаОплату - Булево
//  ЗеркальныйПоиск - Булево - Истина, если поиск организации по данным контрагента и контрагента по данным организации 
//
Процедура ЗаполнитьСтороныДокументаПредприятия(ДокументДО, ИнформацияДокумента, НастройкиДокумента, ЗеркальныйПоиск)
	
	Организация = ИнформацияДокумента.Организация;
	Контрагенты = ИнформацияДокумента.Контрагент;
	ДокументДО.Стороны.Очистить();
	
	ЗаполнитьСторонуПоОрганизации(ДокументДО, Контрагенты, Организация, ЗеркальныйПоиск);
	ЗаполнитьСторонуПоКонтрагенту(ДокументДО, Контрагенты, Организация, ЗеркальныйПоиск);
	ЗаполнитьНаименованияСторонДляЗаявкиНаОплату(ДокументДО, НастройкиДокумента);
	
	Если Контрагенты.Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;
	
	Для Н = 1 По Контрагенты.ВГраница() Цикл
		
		//@skip-check query-in-loop
		Сторона = СторонаДокументаПоДаннымДокументаПредприятия(Контрагенты[Н].ИдентификационныеСведения, "Контрагент");
		Если Не ЗначениеЗаполнено(Сторона) Тогда
			//@skip-check query-in-loop
			Сторона = СторонаДокументаПоДаннымДокументаПредприятия(Контрагенты[Н].ИдентификационныеСведения,
				"Организация");
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(Сторона) Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТЧ = ДокументДО.Стороны.Добавить();
		СтрокаТЧ.Сторона = Сторона;
		СтрокаТЧ.ДатаПодписи = Контрагенты[Н].ДатаПодписания;
		
		ДанныеКонтакта = Контрагенты[Н].КонтактныеДанные;
		Если ДанныеКонтакта <> Неопределено Тогда
			//@skip-check query-in-loop
			СтрокаТЧ.КонтактноеЛицо = КонтактноеЛицоСтороныДокумента(Сторона, ДанныеКонтакта.Наименование,
				ДанныеКонтакта.НомерТелефона, ДанныеКонтакта.АдресЭлектроннойПочты, ДанныеКонтакта.Должность);
		КонецЕсли;

		ДанныеПодписанта = Контрагенты[Н].СведенияОПодписанте;
		Если ДанныеПодписанта <> Неопределено Тогда
			//@skip-check query-in-loop
			СтрокаТЧ.Подписал = КонтактноеЛицоСтороныДокумента(Сторона, ДанныеПодписанта.Наименование,
				ДанныеПодписанта.НомерТелефона, ДанныеПодписанта.АдресЭлектроннойПочты, ДанныеПодписанта.Должность);
		КонецЕсли;
		
	КонецЦикла;
					
КонецПроцедуры

// Заполнить сторону документа предприятия по данным реквизита "Организация".
// 
// Параметры:
//  ДокументДО - СправочникОбъект.ДокументыПредприятия
//  Контрагенты - см. Обработка.ФорматДокументПредприятия.ИнформацияДокумента.Контрагент
//  Организация - см. Обработка.ФорматДокументПредприятия.ИнформацияДокумента.Организация
//  ЗеркальныйПоиск - Булево - Истина, если поиск организации по данным контрагента и контрагента по данным организации
//
Процедура ЗаполнитьСторонуПоОрганизации(ДокументДО, Контрагенты, Организация, ЗеркальныйПоиск)
	
	Если Не ЗначениеЗаполнено(ДокументДО.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьКонтрагенты = Контрагенты.Количество() > 0;
	
	СтрокаТЧ = ДокументДО.Стороны.Добавить();
	СтрокаТЧ.Сторона = ДокументДО.Организация;
	СтрокаТЧ.ДатаПодписи = ?(ЗеркальныйПоиск И ЕстьКонтрагенты, Контрагенты[0].ДатаПодписания,
		Организация.ДатаПодписания);

	ДанныеКонтактаОрг = ?(ЗеркальныйПоиск И ЕстьКонтрагенты, Контрагенты[0].КонтактныеДанные,
		Организация.КонтактныеДанные);
	Если ДанныеКонтактаОрг <> Неопределено Тогда
		СтрокаТЧ.КонтактноеЛицо = КонтактноеЛицоОрганизации(ДанныеКонтактаОрг.Наименование,
			ДанныеКонтактаОрг.НомерТелефона, ДанныеКонтактаОрг.АдресЭлектроннойПочты);
	КонецЕсли;

	ДанныеПодписантаОрг = ?(ЗеркальныйПоиск И ЕстьКонтрагенты, Контрагенты[0].СведенияОПодписанте,
		Организация.СведенияОПодписанте);
	Если ДанныеПодписантаОрг <> Неопределено Тогда
		СтрокаТЧ.Подписал = КонтактноеЛицоОрганизации(ДанныеПодписантаОрг.Наименование,
			ДанныеПодписантаОрг.НомерТелефона, ДанныеПодписантаОрг.АдресЭлектроннойПочты);
	КонецЕсли;
	
КонецПроцедуры

// Заполнить сторону документа предприятия по данным реквизита "Контрагент".
// 
// Параметры:
//  ДокументДО - СправочникОбъект.ДокументыПредприятия
//  Контрагенты - см. Обработка.ФорматДокументПредприятия.ИнформацияДокумента.Контрагент
//  Организация - см. Обработка.ФорматДокументПредприятия.ИнформацияДокумента.Организация
//  ЗеркальныйПоиск - Булево - Истина, если поиск организации по данным контрагента и контрагента по данным организации
//
Процедура ЗаполнитьСторонуПоКонтрагенту(ДокументДО, Контрагенты, Организация, ЗеркальныйПоиск)
	
	Если Не ЗначениеЗаполнено(ДокументДО.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьКонтрагенты = Контрагенты.Количество() > 0;
	
	СтрокаТЧ = ДокументДО.Стороны.Добавить();
	СтрокаТЧ.Сторона = ДокументДО.Контрагент;
	СтрокаТЧ.ДатаПодписи = ?(ЗеркальныйПоиск Или Не ЕстьКонтрагенты, Организация.ДатаПодписания,
		Контрагенты[0].ДатаПодписания);

	ДанныеКонтактаКА = ?(ЗеркальныйПоиск Или Не ЕстьКонтрагенты, Организация.КонтактныеДанные,
		Контрагенты[0].КонтактныеДанные);
	Если ДанныеКонтактаКА <> Неопределено Тогда
		СтрокаТЧ.КонтактноеЛицо = КонтактноеЛицоКонтрагента(ДокументДО.Контрагент, ДанныеКонтактаКА.Наименование,
			ДанныеКонтактаКА.НомерТелефона, ДанныеКонтактаКА.АдресЭлектроннойПочты, ДанныеКонтактаКА.Должность);
	КонецЕсли;

	ДанныеПодписантаКА = ?(ЗеркальныйПоиск Или Не ЕстьКонтрагенты, Организация.СведенияОПодписанте,
		Контрагенты[0].СведенияОПодписанте);
	Если ДанныеПодписантаКА <> Неопределено Тогда
		СтрокаТЧ.Подписал = КонтактноеЛицоКонтрагента(ДокументДО.Контрагент, ДанныеПодписантаКА.Наименование,
			ДанныеПодписантаКА.НомерТелефона, ДанныеПодписантаКА.АдресЭлектроннойПочты, ДанныеПодписантаКА.Должность);
	КонецЕсли;
	
КонецПроцедуры		

// Сторона документа по данным документ предприятия.
// 
// Параметры:
//  Данные - см. Обработки.ФорматДокументПредприятия.ТипыСторонДоговора
//  ИмяСтороны - Строка
// 
// Возвращаемое значение:
//  Неопределено, СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Сторона документа по данным документ предприятия.
//
Функция СторонаДокументаПоДаннымДокументаПредприятия(Данные, ИмяСтороны)
	
	ТипыСторон = Обработки.ФорматДокументПредприятия.ТипыСторонДоговора();
	
	Если ТипЗнч(Данные) = ТипыСторон.Предприниматель Тогда
		ПараметрыПоиска = НовыеПараметрыПоискаСтороныДокумента();
		ПараметрыПоиска.ИНН                = Данные.ИНН;
	ИначеЕсли ТипЗнч(Данные) = ТипыСторон.Организация Тогда
		ПараметрыПоиска = НовыеПараметрыПоискаСтороныДокумента();
		ПараметрыПоиска.ИНН                = Данные.ИНН;
		ПараметрыПоиска.КПП                = Данные.КПП;
	ИначеЕсли ТипЗнч(Данные) = ТипыСторон.ФизическоеЛицо Тогда
		ПараметрыПоиска = НовыеПараметрыПоискаСтороныДокумента();
		ПараметрыПоиска.ИНН                = Данные.ИНН;
		ПараметрыПоиска.НаименованиеПолное = СтрШаблон("%1 %2%3", Данные.Фамилия, Данные.Имя,
			?(ПустаяСтрока(Данные.Отчество), "", СтрШаблон(" %1", Данные.Отчество)));
	ИначеЕсли ТипЗнч(Данные) = ТипыСторон.ИностранноеЛицо Тогда
		ПараметрыПоиска = НовыеПараметрыПоискаСтороныДокумента();
		ПараметрыПоиска.ИНН                = Данные.TIN;
		ПараметрыПоиска.НаименованиеПолное = Данные.Наименование;
		ПараметрыПоиска.КПП                = Данные.КПП;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СторонаДокументаПоДаннымЭД(ИмяСтороны, ПараметрыПоиска);
	
КонецФункции

// Сторона документа по данным ЭД.
// 
// Параметры:
//  ИмяСтороныПоиска - Строка - Имя стороны поиска.
//  ПараметрыПоиска - см. НовыеПараметрыПоискаСтороныДокумента 
//
// 
// Возвращаемое значение:
//  Неопределено, СправочникСсылка.Контрагенты, СправочникСсылка.Организации - Сторона документа по данным ЭД.
//
Функция СторонаДокументаПоДаннымЭД(Знач ИмяСтороныПоиска, Знач ПараметрыПоиска)
	
	Если ИмяСтороныПоиска = "Контрагент" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СторонаДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК СторонаДокумента
		|ГДЕ
		|	НЕ СторонаДокумента.ПометкаУдаления
		|	И &УсловияПоиска";
		
	ИначеЕсли ИмяСтороныПоиска = "Организация" Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СторонаДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК СторонаДокумента
		|ГДЕ
		|	НЕ СторонаДокумента.ПометкаУдаления
		|	И &УсловияПоиска";
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	УсловияЗапроса = Новый Массив;
	Если ЗначениеЗаполнено(ПараметрыПоиска.ИНН) Тогда
		Запрос.УстановитьПараметр("ИНН", ПараметрыПоиска.ИНН);
		УсловияЗапроса.Добавить("СторонаДокумента.ИНН = &ИНН");
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыПоиска.КПП) Тогда
		Запрос.УстановитьПараметр("КПП", ПараметрыПоиска.КПП);
		УсловияЗапроса.Добавить("СторонаДокумента.КПП = &КПП");
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыПоиска.НаименованиеПолное) Тогда
		Запрос.УстановитьПараметр("НаименованиеПолное",ПараметрыПоиска. НаименованиеПолное);
		УсловияЗапроса.Добавить("ВЫРАЗИТЬ(СторонаДокумента.НаименованиеПолное КАК СТРОКА(1024)) = &НаименованиеПолное");
	КонецЕсли;
	
	СтрокаУсловияЗапроса = СтрСоединить(УсловияЗапроса, " И ");
	ТекстЗапроса         = СтрЗаменить(ТекстЗапроса, "&УсловияПоиска", СтрокаУсловияЗапроса);
	
	Запрос.Текст = ТекстЗапроса;
	
	СторонаДокумента = Неопределено;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СторонаДокумента = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат СторонаДокумента;
	
КонецФункции

Функция НовыеПараметрыПоискаСтороныДокумента()
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ИНН");
	ПараметрыПоиска.Вставить("НаименованиеПолное");
	ПараметрыПоиска.Вставить("КПП");
	
	Возврат ПараметрыПоиска;
	
КонецФункции

// Получает значение для реквизита "Организация" документа предприятия, определяет значение параметра "ЗеркальныйПоиск"
// 
// Параметры:
//  ИнформацияДокумента - см. ОбработкаОбъект.ФорматДокументПредприятия.ИнформацияДокумента
//  ЗеркальныйПоиск - Булево - Истина, если поиск организации по данным контрагента и контрагента по данным организации,
//  значение по умолчанию - Истина 
// 
// Возвращаемое значение:
//  Неопределено, 
//  СправочникСсылка.Организации
//
Функция ОрганизацияУчета(ИнформацияДокумента, ЗеркальныйПоиск = Истина)
	
	Организация = Неопределено;
	ПолеПоиска = "Организация";
	Если ИнформацияДокумента.Контрагент.Количество() > 0 Тогда
		Организация = СторонаДокументаПоДаннымДокументаПредприятия(ИнформацияДокумента.Контрагент[0].
			ИдентификационныеСведения, ПолеПоиска);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Организация) И ИнформацияДокумента.Контрагент.Количество() > 1 Тогда
		Для Индекс = 1 По ИнформацияДокумента.Контрагент.ВГраница() Цикл
			//@skip-check query-in-loop
			Организация = СторонаДокументаПоДаннымДокументаПредприятия(ИнформацияДокумента.Контрагент[Индекс].
				ИдентификационныеСведения, ПолеПоиска);
			Если ЗначениеЗаполнено(Организация)	Тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Организация = СторонаДокументаПоДаннымДокументаПредприятия(ИнформацияДокумента.Организация.
			ИдентификационныеСведения, ПолеПоиска);
		ЗеркальныйПоиск = Не ЗначениеЗаполнено(Организация);
	КонецЕсли;	
	
	Возврат Организация;
	
КонецФункции

// Получает значение для реквизита "Контрагент" документа предприятия
// 
// Параметры:
//  ИнформацияДокумента - см. ОбработкаОбъект.ФорматДокументПредприятия.ИнформацияДокумента
//  Организация - СправочникСсылка.Организации - ранее найденная организация документа предприятия
//  ЗеркальныйПоиск - Булево - Истина, если поиск организации по данным контрагента и контрагента по данным организации
// 
// Возвращаемое значение:
//  Неопределено, 
//  СправочникСсылка.Контрагенты
//
Функция КонтрагентУчета(ИнформацияДокумента, Организация, ЗеркальныйПоиск)
	
	Контрагент = Неопределено;
	Если ЗеркальныйПоиск Тогда
		Контрагент = СторонаДокументаПоДаннымДокументаПредприятия(
			ИнформацияДокумента.Организация.ИдентификационныеСведения, "Контрагент");
	ИначеЕсли ИнформацияДокумента.Контрагент.Количество() > 0 Тогда
		Контрагент = СторонаДокументаПоДаннымДокументаПредприятия(
			ИнформацияДокумента.Контрагент[0].ИдентификационныеСведения, "Контрагент");
	КонецЕсли;

	Возврат Контрагент;
	
КонецФункции

// Заполняет наименования сторон документа при загрузке через "1С:Share", если документ является заявкой на оплату
// 
// Параметры:
//  ОбъектУчета - СправочникОбъект.ДокументыПредприятия
//  НастройкиДокумента - Структура:
//   * ВестиУчетСторон - Булево
//   * ОбязательноеУказаниеОтветственного - Булево
//   * ЯвляетсяВходящейКорреспонденцией - Булево
//   * ЯвляетсяИсходящейКорреспонденцией - Булево
//   * ЯвляетсяЗаявкойНаОплату - Булево
//
Процедура ЗаполнитьНаименованияСторонДляЗаявкиНаОплату(ОбъектУчета, НастройкиДокумента) Экспорт
	
	Если НастройкиДокумента.ЯвляетсяЗаявкойНаОплату Тогда
		Если ОбъектУчета.Стороны.Количество() = СтандартноеКоличествоСторонДокумента() Тогда
			ОбъектУчета.Стороны[0].Наименование = Справочники.НаименованияСторон.Плательщик;
			ОбъектУчета.Стороны[1].Наименование = Справочники.НаименованияСторон.Получатель;
		ИначеЕсли ОбъектУчета.Стороны.Количество() = 1 Тогда
			Если ТипЗнч(ОбъектУчета.Стороны[0].Сторона) = Тип("СправочникСсылка.Организации") Тогда
				ОбъектУчета.Стороны[0].Наименование = Справочники.НаименованияСторон.Плательщик;
			Иначе
				ОбъектУчета.Стороны[0].Наименование = Справочники.НаименованияСторон.Получатель;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
				
КонецПроцедуры

// Заполняет подписантов и контактных лиц документа при загрузке через "1С:Share".
// 
// Параметры:
//  ОбъектУчета - СправочникОбъект.ДокументыПредприятия
//  ИнформацияДокумента - СтрокаТабличнойЧасти - см. Обработка.ФорматДокументПредприятия.ИнформацияДокумента
//  НастройкиДокумента - Структура:
//   * ВестиУчетСторон - Булево
//   * ОбязательноеУказаниеОтветственного - Булево
//   * ЯвляетсяВходящейКорреспонденцией - Булево
//   * ЯвляетсяИсходящейКорреспонденцией - Булево
//   * ЯвляетсяЗаявкойНаОплату - Булево
//  ЗеркальныйПоиск - Булево - Истина, если поиск организации по данным контрагента и контрагента по данным организации 
//
Процедура ЗаполнитьПодписантовИКонтактныхЛиц(ОбъектУчета, ИнформацияДокумента, НастройкиДокумента, ЗеркальныйПоиск)
	
	ЕстьКонтрагенты = ИнформацияДокумента.Контрагент.Количество() > 0;
	ОбъектУчета.ДатаПодписания = ИнформацияДокумента.Организация.ДатаПодписания;
	ДанныеПодписантаОрганизации = ?(ЗеркальныйПоиск И ЕстьКонтрагенты,
		ИнформацияДокумента.Контрагент[0].СведенияОПодписанте, ИнформацияДокумента.Организация.СведенияОПодписанте);
	Если ДанныеПодписантаОрганизации <> Неопределено Тогда
		ОбъектУчета.Подписал = КонтактноеЛицоОрганизации(ДанныеПодписантаОрганизации.Наименование,
			ДанныеПодписантаОрганизации.НомерТелефона, ДанныеПодписантаОрганизации.АдресЭлектроннойПочты);
	КонецЕсли;
	ДанныеКонтактаОрганизации = ?(ЗеркальныйПоиск И ЕстьКонтрагенты,
		ИнформацияДокумента.Контрагент[0].КонтактныеДанные, ИнформацияДокумента.Организация.КонтактныеДанные);
	Если ЗначениеЗаполнено(ДанныеКонтактаОрганизации) И НастройкиДокумента.ОбязательноеУказаниеОтветственного Тогда
		ОбъектУчета.Ответственный = КонтактноеЛицоОрганизации(ДанныеКонтактаОрганизации.Наименование,
			ДанныеКонтактаОрганизации.НомерТелефона, ДанныеКонтактаОрганизации.АдресЭлектроннойПочты);
	ИначеЕсли ЗначениеЗаполнено(ДанныеКонтактаОрганизации) И НастройкиДокумента.ЯвляетсяВходящейКорреспонденцией Тогда
		ОбъектУчета.Адресат = КонтактноеЛицоОрганизации(ДанныеКонтактаОрганизации.Наименование,
			ДанныеКонтактаОрганизации.НомерТелефона, ДанныеКонтактаОрганизации.АдресЭлектроннойПочты);	
	КонецЕсли;
	
КонецПроцедуры

// Заполняет параметры корреспонденции при загрузке через "1С:Share".
// 
// Параметры:
//  ОбъектУчета - СправочникОбъект.ДокументыПредприятия
//  ИнформацияДокумента - СтрокаТабличнойЧасти - см. Обработка.ФорматДокументПредприятия.ИнформацияДокумента
//  НастройкиДокумента - Структура:
//   * ВестиУчетСторон - Булево
//   * ОбязательноеУказаниеОтветственного - Булево
//   * ЯвляетсяВходящейКорреспонденцией - Булево
//   * ЯвляетсяИсходящейКорреспонденцией - Булево
//   * ЯвляетсяЗаявкойНаОплату - Булево
//  ОтправленаИсходящаяКорреспонденция - Булево - Истина, если была отправлена исходящая корреспонденция 
//
Процедура ЗаполнитьПараметрыКорреспонденции(ОбъектУчета, ИнформацияДокумента, НастройкиДокумента,
		ОтправленаИсходящаяКорреспонденция)
	
	Если Не (НастройкиДокумента.ЯвляетсяВходящейКорреспонденцией
		Или НастройкиДокумента.ЯвляетсяИсходящейКорреспонденцией) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКорреспонденции = Документы.Корреспонденция.НовыеПараметрыКорреспонденции();
	ВидДокументаКэш = Новый Структура;
	ВидДокументаКэш.Вставить("ЯвляетсяВходящейКорреспонденцией", НастройкиДокумента.ЯвляетсяВходящейКорреспонденцией);
	ВидДокументаКэш.Вставить("ЯвляетсяИсходящейКорреспонденцией", НастройкиДокумента.ЯвляетсяИсходящейКорреспонденцией);
	ВидДокументаКэш.Вставить("УчитыватьВходящийНомерИДатуПолучателя", Ложь);
	Если НастройкиДокумента.ЯвляетсяВходящейКорреспонденцией Тогда
		ПараметрыКорреспонденции.АдресатВходящейКорреспонденции = ОбъектУчета.Адресат;
	КонецЕсли;
	Если НастройкиДокумента.ЯвляетсяВходящейКорреспонденцией И ОтправленаИсходящаяКорреспонденция Тогда
		ПараметрыКорреспонденции.ИсходящийНомер = ИнформацияДокумента.Номер;
		ПараметрыКорреспонденции.ИсходящаяДата = ИнформацияДокумента.Дата;
	КонецЕсли;
	Если ОбъектУчета.Источник = Справочники.ИсточникиДанных.Сервис1СShare Тогда
		ПараметрыКорреспонденции.СпособПолучения = Справочники.СпособыДоставки.Сервис1СShare;
	КонецЕсли;
	ПараметрыКорреспонденции.Вставить("Контрагент", ОбъектУчета.Контрагент);
	ПараметрыКорреспонденции.Вставить("ВидДокументаКэш", ВидДокументаКэш);
	ПараметрыКорреспонденции.Вставить("Ссылка", ОбъектУчета.Ссылка);
	ОбъектУчета.ДополнительныеСвойства.Вставить("ПараметрыКорреспонденции", ПараметрыКорреспонденции);

КонецПроцедуры	

#КонецОбласти

#Область ОтправкаДокумента

// Заполнить сведения сторон документа для документа предприятия.
// 
// Параметры:
//  Данные - см. Справочники.ДокументыПредприятия.ДанныеДляФорматаДокументПредприятия
//  ИнформацияДокумента - см. ОбработкаОбъект.ФорматДокументПредприятия.ИнформацияДокумента
//  КонструкторЭД - ОбработкаОбъект.ФорматДокументПредприятия
//
Процедура ЗаполнитьСведенияСторонДокументаДляДокументаПредприятия(Знач Данные, ИнформацияДокумента, КонструкторЭД)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДействияПодписания.Ссылка КАК Действие,
		|	МАКСИМУМ(РезультатыДействий.Дата) КАК ДатаПодписания,
		|	ДействияПодписания.Предмет,
		|	РезультатыДействий.Функция
		|ПОМЕСТИТЬ ВТ_ПоследниеПодписания
		|ИЗ
		|	Справочник.ДействияПодписания КАК ДействияПодписания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыДействий КАК РезультатыДействий
		|		ПО ДействияПодписания.Предмет = &ДокументДО
		|		И ДействияПодписания.Ссылка = РезультатыДействий.Действие
		|		И РезультатыДействий.Функция = ЗНАЧЕНИЕ(Перечисление.ФункцииУчастниковПодписания.Подписывающий)
		|		И РезультатыДействий.Результат = ЗНАЧЕНИЕ(Перечисление.РезультатыПодписания.Подписано)
		|СГРУППИРОВАТЬ ПО
		|	ДействияПодписания.Ссылка,
		|	ДействияПодписания.Предмет,
		|	РезультатыДействий.Функция
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПоследниеПодписания.Действие,
		|	ВТ_ПоследниеПодписания.ДатаПодписания КАК ДатаПодписания,
		|	РезультатыДействий.Участник КАК Подписал,
		|	ВТ_ПоследниеПодписания.Предмет
		|ПОМЕСТИТЬ ВТ_Подписания
		|ИЗ
		|	ВТ_ПоследниеПодписания КАК ВТ_ПоследниеПодписания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыДействий КАК РезультатыДействий
		|		ПО ВТ_ПоследниеПодписания.Действие = РезультатыДействий.Действие
		|		И ВТ_ПоследниеПодписания.Функция = РезультатыДействий.Функция
		|		И ВТ_ПоследниеПодписания.ДатаПодписания = РезультатыДействий.Дата
		|		И РезультатыДействий.Результат = ЗНАЧЕНИЕ(Перечисление.РезультатыПодписания.Подписано)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыПредприятияСтороны.Сторона,
		|	ДокументыПредприятияСтороны.ДатаПодписи,
		|	ДокументыПредприятияСтороны.Подписал,
		|	ДокументыПредприятияСтороны.КонтактноеЛицо
		|ПОМЕСТИТЬ ВТ_Стороны
		|ИЗ
		|	Справочник.ДокументыПредприятия.Стороны КАК ДокументыПредприятияСтороны
		|ГДЕ
		|	&ВестиУчетСторон
		|	И ДокументыПредприятияСтороны.Ссылка = &ДокументДО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументыПредприятияКонтрагенты.Контрагент,
		|	&ДатаПодписи,
		|	ДокументыПредприятияКонтрагенты.ПодписалОтКонтрагента,
		|	ВЫБОР
		|		КОГДА ДокументыПредприятияКонтрагенты.КонтактноеЛицо = ЗНАЧЕНИЕ(Справочник.КонтактныеЛица.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(ОсновныеКонтактныеЛицаКонтрагентов.КонтактноеЛицо, ЗНАЧЕНИЕ(Справочник.КонтактныеЛица.ПустаяСсылка))
		|		ИНАЧЕ ДокументыПредприятияКонтрагенты.КонтактноеЛицо
		|	КОНЕЦ
		|ИЗ
		|	Справочник.ДокументыПредприятия.Контрагенты КАК ДокументыПредприятияКонтрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеКонтактныеЛицаКонтрагентов КАК ОсновныеКонтактныеЛицаКонтрагентов
		|		ПО ДокументыПредприятияКонтрагенты.Контрагент = ОсновныеКонтактныеЛицаКонтрагентов.Контрагент
		|ГДЕ
		|	НЕ &ВестиУчетСторон
		|	И ДокументыПредприятияКонтрагенты.Ссылка = &ДокументДО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументыПредприятия.Организация,
		|	ЕСТЬNULL(ВТ_Подписания.ДатаПодписания, ДокументыПредприятия.ДатаПодписания),
		|	ВЫБОР
		|		КОГДА ДокументыПредприятия.ДатаПодписания <> ДАТАВРЕМЯ(1, 1, 1)
		|		И НЕ ДокументыПредприятия.Подписал В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка),
		|			ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
		|			ТОГДА ДокументыПредприятия.Подписал
		|		КОГДА НЕ ВТ_Подписания.Подписал ЕСТЬ NULL
		|			ТОГДА ВТ_Подписания.Подписал
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|	КОНЕЦ,
		|	&КонтактноеЛицо
		|ИЗ
		|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Подписания КАК ВТ_Подписания
		|		ПО ДокументыПредприятия.Ссылка = ВТ_Подписания.Предмет
		|ГДЕ
		|	ДокументыПредприятия.Ссылка = &ДокументДО
		|	И НЕ &ВестиУчетСторон
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Организации.Ссылка КАК СсылкаНаСторону,
		|	Организации.ИНН КАК ИНН,
		|	Организации.КПП КАК КПП,
		|	Организации.ОсновнойБанковскийСчет КАК БанковскийСчет,
		|	КлассификаторБанков.Наименование КАК БанковскийСчет_Наименование,
		|	""Организация"" КАК ТипСтороны,
		|	БанковскиеСчета.НомерСчета КАК БанковскийСчет_НомерСчета,
		|	КлассификаторБанков.ИНН КАК БанковскийСчет_ИНН,
		|	КлассификаторБанков.Код КАК БанковскийСчет_БИК,
		|	КлассификаторБанков.КоррСчет КАК БанковскийСчет_КоррСчет,
		|	Организации.ЮрФизЛицо КАК ЮрФизЛицо,
		|	ВТ_Стороны.ДатаПодписи КАК ДатаПодписи,
		|	ВТ_Стороны.Подписал КАК Подписал,
		|	КлассификаторБанков.СВИФТБИК КАК БанковскийСчет_КодSWIFT,
		|	ВТ_Стороны.КонтактноеЛицо КАК КонтактноеЛицо
		|ИЗ
		|	ВТ_Стороны КАК ВТ_Стороны
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
		|				ПО БанковскиеСчета.Банк = КлассификаторБанков.Ссылка
		|			ПО Организации.ОсновнойБанковскийСчет = БанковскиеСчета.Ссылка
		|		ПО ВТ_Стороны.Сторона = Организации.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка,
		|	Контрагенты.ИНН,
		|	Контрагенты.КПП,
		|	Контрагенты.ОсновнойБанковскийСчет,
		|	КлассификаторБанков.Наименование,
		|	""Контрагент"",
		|	БанковскиеСчета.НомерСчета,
		|	КлассификаторБанков.ИНН,
		|	КлассификаторБанков.Код,
		|	КлассификаторБанков.КоррСчет,
		|	Контрагенты.ЮрФизЛицо,
		|	ВТ_Стороны.ДатаПодписи,
		|	ВТ_Стороны.Подписал,
		|	КлассификаторБанков.СВИФТБИК,
		|	ВТ_Стороны.КонтактноеЛицо
		|ИЗ
		|	ВТ_Стороны КАК ВТ_Стороны
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
		|				ПО БанковскиеСчета.Банк = КлассификаторБанков.Ссылка
		|			ПО Контрагенты.ОсновнойБанковскийСчет = БанковскиеСчета.Ссылка
		|		ПО ВТ_Стороны.Сторона = Контрагенты.Ссылка";

	Запрос.УстановитьПараметр("ДокументДО", Данные.Ссылка);
	Запрос.УстановитьПараметр("ВестиУчетСторон", Данные.ВестиУчетСторон);
	Запрос.УстановитьПараметр("ДатаПодписи", Данные.ДатаПодписания);
	Запрос.УстановитьПараметр("КонтактноеЛицо", Данные.КонтактноеЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		ДанныеСтороны = КонструкторЭД.НовыеСведенияОСторонахДокумента();
		ДанныеСтороны.ДатаПодписания = Выборка.ДатаПодписи;
		ДатаСрезаКИ = ?(ЗначениеЗаполнено(Данные.Дата), Данные.Дата, ТекущаяДатаСеанса());
		Если Выборка.ТипСтороны = "Организация" Тогда
			ДанныеСтороны.Адрес = КонструкторЭД.ЗаполнитьАдресАвтоматически(
				Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, Выборка.СсылкаНаСторону, ДатаСрезаКИ, КонструкторЭД);
		Иначе
			ДанныеСтороны.Адрес = КонструкторЭД.ЗаполнитьАдресАвтоматически(
				Справочники.ВидыКонтактнойИнформации.ЮридическийАдресКонтрагента, Выборка.СсылкаНаСторону, ДатаСрезаКИ,
					КонструкторЭД);
		КонецЕсли;	
		ЗаполнитьСведенияСтороныДокументаДляДокументаПредприятия(ДанныеСтороны, Данные, КонструкторЭД,
			Выборка.СсылкаНаСторону, Выборка.ЮрФизЛицо);
		ЗаполнитьБанковскиеРеквизитыСтороныДокументаПредприятия(ДанныеСтороны, КонструкторЭД, Выборка);
		ЗаполнитьКонтактныеДанныеСтороныДокументаПредприятия(ДанныеСтороны, КонструкторЭД, Выборка.КонтактноеЛицо, Ложь);
		ЗаполнитьКонтактныеДанныеСтороныДокументаПредприятия(ДанныеСтороны, КонструкторЭД, Выборка.Подписал, Истина);
		Если Выборка.СсылкаНаСторону = Данные.Организация Тогда
			ИнформацияДокумента.Организация = ДанныеСтороны;
		Иначе
			ИнформацияДокумента.Контрагент.Добавить(ДанныеСтороны);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

// Заполнить банковские реквизиты стороны документа предприятия.
// 
// Параметры:
//  ДанныеСтороны - ОбработкаТабличнаяЧастьСтрока.ФорматДокументПредприятия.СведенияОСторонахДокумента,
//   ОбработкаТабличнаяЧастьСтрока.ФорматДокументПредприятия.ИдентификационныеСведенияИностранногоЛица, 
//   ОбработкаТабличнаяЧастьСтрока.ФорматДокументПредприятия.ИдентификационныеСведенияЮрЛица - Данные стороны.
//  КонструкторЭД - ОбработкаОбъект.ФорматДокументПредприятия - Конструктор ЭД.
//  БанковскиеРеквизиты - ВыборкаИзРезультатаЗапроса:
// 	 * СсылкаНаСторону - СправочникСсылка.Организации
// 					   - СправочникСсылка.Контрагенты 
// 	 * ИНН - Строка 
//   * КПП - Строка 
// 	 * БанковскийСчет - СправочникСсылка.БанковскиеСчета
// 	 * БанковскийСчет_Наименование - Строка
// 	 * БанковскийСчет_НомерСчета - Строка
// 	 * БанковскийСчет_ИНН - Строка
// 	 * БанковскийСчет_БИК - СправочникСсылка.КлассификаторБанков
// 	 * БанковскийСчет_КоррСчет - Строка 
// 	 * БанковскийСчет_КодSWIFT - Строка
//
Процедура ЗаполнитьБанковскиеРеквизитыСтороныДокументаПредприятия(ДанныеСтороны, КонструкторЭД, БанковскиеРеквизиты)
	
	Если Не ЗначениеЗаполнено(БанковскиеРеквизиты.БанковскийСчет) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтороны.БанковскиеРеквизиты = КонструкторЭД.НовыеБанковскиеРеквизиты();
	ДанныеСтороны.БанковскиеРеквизиты.ИНН                   = БанковскиеРеквизиты.БанковскийСчет_ИНН;
	ДанныеСтороны.БанковскиеРеквизиты.НомерСчета            = БанковскиеРеквизиты.БанковскийСчет_НомерСчета;
	ДанныеСтороны.БанковскиеРеквизиты.Наименование          = БанковскиеРеквизиты.БанковскийСчет_Наименование;
	ДанныеСтороны.БанковскиеРеквизиты.БИК                   = БанковскиеРеквизиты.БанковскийСчет_БИК;
	ДанныеСтороны.БанковскиеРеквизиты.КодSWIFT			    = БанковскиеРеквизиты.БанковскийСчет_КодSWIFT;
	ДанныеСтороны.БанковскиеРеквизиты.КорреспондентскийСчет = БанковскиеРеквизиты.БанковскийСчет_КоррСчет;
	
КонецПроцедуры

// Заполнить контактные данные стороны документа предприятия.
// 
// Параметры:
//  ДанныеСтороны - ОбработкаТабличнаяЧастьСтрока.ФорматДокументПредприятия.СведенияОСторонахДокумента,
//   ОбработкаТабличнаяЧастьСтрока.ФорматДокументПредприятия.ИдентификационныеСведенияИностранногоЛица, 
//   ОбработкаТабличнаяЧастьСтрока.ФорматДокументПредприятия.ИдентификационныеСведенияЮрЛица - Данные стороны.
//  КонструкторЭД - ОбработкаОбъект.ФорматДокументПредприятия - Конструктор ЭД.
//  КонтактноеЛицо - СправочникСсылка.Сотрудники
//  			   - СправочникСсылка.КонтактныеЛица
//  ЭтоПодписант - Булево - Истина, если контактное лицо является подписантом документа.
//
Процедура ЗаполнитьКонтактныеДанныеСтороныДокументаПредприятия(ДанныеСтороны, КонструкторЭД, КонтактноеЛицо, ЭтоПодписант)
	
	Если Не ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(КонтактноеЛицо) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		ИмяДанных = ?(ЭтоПодписант,"СведенияОПодписанте", "КонтактныеДанные");
		КонтактныеДанные = ?(ЭтоПодписант, КонструкторЭД.НовыеСведенияОПодписанте(), КонструкторЭД.НовыеКонтактныеДанные());
		КонтактныеДанные.Наименование = Строка(КонтактноеЛицо);
		КонтактныеДанные.Должность = Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтактноеЛицо, "Должность"));
		КонтактныеДанные.АдресЭлектроннойПочты = УправлениеКонтактнойИнформациейДокументооборот.
			ПредставлениеКонтактнойИнформации(КонтактноеЛицо, Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица);
		Телефон = УправлениеКонтактнойИнформациейДокументооборот.ПредставлениеКонтактнойИнформации(КонтактноеЛицо,
			Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица);
		МобильныйТелефон = УправлениеКонтактнойИнформациейДокументооборот.ПредставлениеКонтактнойИнформации(КонтактноеЛицо,
			Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица);
		Если Не ЗначениеЗаполнено(Телефон) Тогда
			Телефон = МобильныйТелефон;	
		КонецЕсли;
		КонтактныеДанные.НомерТелефона = Телефон;
		ДанныеСтороны[ИмяДанных] = КонтактныеДанные;
	ИначеЕсли ТипЗнч(КонтактноеЛицо) = Тип("СправочникСсылка.Сотрудники") Тогда
		ИмяДанных = ?(ЭтоПодписант,"СведенияОПодписанте", "КонтактныеДанные");
		КонтактныеДанные = ?(ЭтоПодписант, КонструкторЭД.НовыеСведенияОПодписанте(), КонструкторЭД.НовыеКонтактныеДанные());
		КонтактныеДанные.Наименование = Строка(КонтактноеЛицо);
		КонтактныеДанные.Должность = Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтактноеЛицо, "Должность"));
		КонтактныеДанные.АдресЭлектроннойПочты = УправлениеКонтактнойИнформациейДокументооборот.
			ПредставлениеКонтактнойИнформации(КонтактноеЛицо, Справочники.ВидыКонтактнойИнформации.EmailСотрудника);
		КонтактныеДанные.НомерТелефона = УправлениеКонтактнойИнформациейДокументооборот.
			ПредставлениеКонтактнойИнформации(КонтактноеЛицо, Справочники.ВидыКонтактнойИнформации.ТелефонСотрудника);
		ДанныеСтороны[ИмяДанных] = КонтактныеДанные;
	ИначеЕсли ТипЗнч(КонтактноеЛицо) = Тип("СправочникСсылка.ПолныеРоли") Тогда
		ИсполнителиРоли = РегистрыСведений.ИсполнителиРолей.ИсполнителиРоли(КонтактноеЛицо, Истина);
		Если ИсполнителиРоли.Количество() > 0 Тогда
			ЗаполнитьКонтактныеДанныеСтороныДокументаПредприятия(ДанныеСтороны, КонструкторЭД, ИсполнителиРоли[0],
				ЭтоПодписант)
		КонецЕсли;	
	КонецЕсли;	
		
КонецПроцедуры

// Заполнить файлы документа предприятия.
// 
// Параметры:
//  ДокументДО - СправочникСсылка.ДокументыПредприятия
//  ИнформацияДокумента - см. ОбработкаОбъект.ФорматДокументПредприятия.ИнформацияДокумента
//  КонструкторЭД - ОбработкаОбъект.ФорматДокументПредприятия
//  
Процедура ЗаполнитьСвойстваФайловДокументаПредприятия(ДокументДО, ИнформацияДокумента, КонструкторЭД)
	
	ИспользоватьСервис1сShare = ПолучитьФункциональнуюОпцию("ИспользоватьСервис1сShare");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Файлы.Наименование,
		|	Файлы.Описание,
		|	Файлы.ДатаСоздания,
		|	Файлы.ТекущаяВерсияДатаМодификацииФайла КАК ДатаМодификации,
		|	ЕСТЬNULL(СведенияОФайлахДокументооборот.ЯвляетсяОригиналом, Ложь) КАК ЯвляетсяОригиналом
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФайлахДокументооборот КАК СведенияОФайлахДокументооборот
		|		ПО Файлы.Ссылка = СведенияОФайлахДокументооборот.Файл
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО Файлы.Ссылка = СлужебныеФайлыДокументов.Файл
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла
		|	И НЕ Файлы.ПометкаУдаления
		|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ДокументДО);	
	
	Если ИспользоватьСервис1сShare Тогда
		Запрос.Текст = Запрос.Текст + " И Файлы.Ссылка В (&ФайлыОтправки) ";
		Запрос.УстановитьПараметр("ФайлыОтправки", РегистрыСведений.Сервис1СShareКэшФайловОтправки.ФайлыОтправки(ДокументДО));
	КонецЕсли;		
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СвойстваФайлов = КонструкторЭД.НовыеСвойстваФайла();
		ЗаполнитьЗначенияСвойств(СвойстваФайлов, Выборка);
		ИнформацияДокумента.СвойстваФайлов.Добавить(СвойстваФайлов);
	КонецЦикла;	
	
	Если ИспользоватьСервис1сShare Тогда
		РегистрыСведений.Сервис1СShareКэшФайловОтправки.УдалитьФайлыОтправки(ДокументДО);
	КонецЕсли;	
	
КонецПроцедуры

// Заполнить сведения стороны документа для документа предприятия.
// 
// Параметры:
//  ДанныеСтороны - ОбработкаТабличнаяЧастьСтрока.ФорматДокументПредприятия.СведенияОСторонахДокумента
//  Данные см. Справочники.ДокументыПредприятия.ДанныеДляФорматаДокументПредприятия
//  КонструкторЭД - ОбработкаОбъект.ФорматДокументПредприятия - Конструктор ЭД.
//  СсылкаНаСторону - ОпределяемыйТип.УчастникЭДО - Ссылка на сторону.
//  ТипСтороны - ПеречислениеСсылка.ЮрФизЛицо - Тип стороны.
//
Процедура ЗаполнитьСведенияСтороныДокументаДляДокументаПредприятия(ДанныеСтороны, Знач Данные, Знач КонструкторЭД,
	Знач СсылкаНаСторону, Знач ТипСтороны)
	
	СведенияСтороны = Неопределено;
	Если ТипСтороны = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
		СведенияСтороны = ЭлектронноеВзаимодействие.СтруктураДанныхЮрФизЛица();
		ОбменСКонтрагентамиДОСлужебный.ПолучитьДанныеЮрФизЛица(СсылкаНаСторону, СведенияСтороны);
		
		ДанныеСтороны.ИдентификационныеСведения = КонструкторЭД.НовыеИдентификационныеСведенияИП();
		ДанныеСтороны.ИдентификационныеСведения.Наименование = СведенияСтороны.ПолноеНаименование;
		ДанныеСтороны.ИдентификационныеСведения.ИНН          = СведенияСтороны.ИНН;
		
	ИначеЕсли ТипСтороны = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		СведенияСтороны = ЭлектронноеВзаимодействие.СтруктураДанныхЮрФизЛица();
		ОбменСКонтрагентамиДОСлужебный.ПолучитьДанныеЮрФизЛица(СсылкаНаСторону, СведенияСтороны);
	
		ДанныеСтороны.ИдентификационныеСведения = КонструкторЭД.НовыеИдентификационныеСведенияЮрЛица();
		ДанныеСтороны.ИдентификационныеСведения.Наименование = СведенияСтороны.ПолноеНаименование;
		ДанныеСтороны.ИдентификационныеСведения.ИНН          = СведенияСтороны.ИНН;
		ДанныеСтороны.ИдентификационныеСведения.КПП          = СведенияСтороны.КПП;
		
	ИначеЕсли ТипСтороны = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		СведенияСтороны = ЭлектронноеВзаимодействие.СтруктураДанныхФизЛица();
		ФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаСторону, "ФизЛицо");
		ОбменСКонтрагентамиДОСлужебный.ПолучитьДанныеФизЛица(ФизЛицо, СведенияСтороны);
		
		ДанныеСтороны.ИдентификационныеСведения = КонструкторЭД.НовыеИдентификационныеСведенияФизЛица();
		ДанныеСтороны.ИдентификационныеСведения.СНИЛС                 = СведенияСтороны.СтраховойНомерПФР;
		ДанныеСтороны.ИдентификационныеСведения.ИНН                   = СведенияСтороны.ИНН;
		ДанныеСтороны.ИдентификационныеСведения.Фамилия               = СведенияСтороны.Фамилия;
		ДанныеСтороны.ИдентификационныеСведения.Имя                   = СведенияСтороны.Имя;
		ДанныеСтороны.ИдентификационныеСведения.Отчество              = СведенияСтороны.Отчество;
		ДанныеСтороны.ИдентификационныеСведения.Телефон               = СведенияСтороны.Телефоны;
		ДанныеСтороны.ИдентификационныеСведения.АдресЭлектроннойПочты = СведенияСтороны.ЭлектроннаяПочта;
		
	ИначеЕсли ТипСтороны = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		
		Реквизиты = "НаименованиеПолное, РегистрационныйНомер";
	
		СведенияСтороны = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаСторону, Реквизиты);
		
		ДанныеСтороны.ИдентификационныеСведения = КонструкторЭД.НовыеИдентификационныеСведенияИностранногоЛица();
		ДанныеСтороны.ИдентификационныеСведения.Наименование = СведенияСтороны.НаименованиеПолное;
		ДанныеСтороны.ИдентификационныеСведения.TIN          = СведенияСтороны.РегистрационныйНомер;
		ДатаСрезаКИ = ?(ЗначениеЗаполнено(Данные.Дата), Данные.Дата, ТекущаяДатаСеанса());
		ДанныеСтороны.ИдентификационныеСведения.КодСтраны    = КонструкторЭД.ЗаполнитьКодСтраныИностранногоАдреса(
			Справочники.ВидыКонтактнойИнформации.ЮридическийАдресКонтрагента, СсылкаНаСторону, ДатаСрезаКИ);

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Файлы без ролей.
// 
// Параметры:
//  ДокументДО - ОпределяемыйТип.ДокументДОДляЭДО
// 
// Возвращаемое значение:
//  Массив Из СправочникСсылка.Файлы
//
Функция ФайлыБезРолей(ДокументДО)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Файлы.Ссылка КАК Файл
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО Файлы.Ссылка = СлужебныеФайлыДокументов.Файл
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РолиФайловДокументов КАК РолиФайловДокументов
		|		ПО Файлы.Ссылка = РолиФайловДокументов.Файл
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла
		|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL
		|	И РолиФайловДокументов.Роль ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	Файлы.ДатаСоздания";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ДокументДО);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Файл");

КонецФункции

// Возвращает данные файла.
//
// Параметры:
// 	Файл - Файл, Строка - Файл или полное имя файла.
//
// Возвращаемое значение:
// 	Структура - Данные файла:
//   * ИмяФайла - Строка - Имя файла.
//   * ИмяБезРасширения - Строка - Имя файла без расширения.
//   * Расширение - Строка - Расширение файла.
//
Функция ДанныеФайла(Знач Файл) Экспорт
	
	Если ТипЗнч(Файл) = Тип("Строка") Тогда
		Файл = Новый Файл(Файл);
	КонецЕсли;
	
	ДанныеФайла = Новый Структура;
	ДанныеФайла.Вставить("ИмяФайла", Файл.Имя);
	ДанныеФайла.Вставить("ИмяБезРасширения", Файл.ИмяБезРасширения);
	ДанныеФайла.Вставить("Расширение", Сред(Файл.Расширение, 2));
	
	Возврат ДанныеФайла;
	
КонецФункции

// Задает соответствие типов и представлений объектов учета по типу электронного документа.
//
// Параметры:
//  ТипДокумента          - См. ОбменСКонтрагентами.ТипыДокументов - тип электронного документа
//  ОписанияОбъектовУчета - СписокЗначений Из СправочникСсылка, ДокументСсылка - список ссылок на объекты учета. В качестве ключа задается пустая ссылка
//                          объекта, в качестве представления представление объекта учета, которое может быть показано пользователю.
//
Процедура СписокТиповДокументовПоТипуЭлектронногоДокумента(ТипДокумента, ОписанияОбъектовУчета) Экспорт
	
	ОписанияОбъектовУчета.Добавить(Справочники.ДокументыПредприятия.ПустаяСсылка(), НСтр("ru = 'Документ предприятия'"));
	
КонецПроцедуры

Функция СтандартноеКоличествоСторонДокумента()
	
	Возврат 2;
	
КонецФункции	

#КонецОбласти	
	
#КонецОбласти
