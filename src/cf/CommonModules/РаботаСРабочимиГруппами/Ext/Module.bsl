#Область ПрограммныйИнтерфейс
/////////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ДЛЯ РАБОТЫ С РАБОЧЕЙ ГРУППОЙ ДОКУМЕНТА

#Область РабочаяГруппаДокумента

// Перезаписывает участников рабочей группы документа.
//
// Параметры:
// Ссылка  - ЛюбаяСсылка - любая ссылка, которая может хранится в измерении Объект РС РабочиеГруппы.
// Участники (ТаблицаЗначений)
// * Участник - СправочникСсылка - контейнер сотрудников
// * Изменение - Булево - право изменения 
// ОбновитьПраваДоступа - Булево - указывает на необходимость обновления прав доступа
// АвторИзменений - Пользователь - пользователь, который запрашивает изменение РГ
//
Процедура ПерезаписатьРабочуюГруппуОбъекта(
			Знач СсылкаИлиДокументОбъект,
			Знач Участники,
			ОбновитьПрава,
			ПроверятьПрава = Истина,
			АвторИзменений = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(СсылкаИлиДокументОбъект) = Тип("СправочникОбъект.ДокументыПредприятия") Тогда
		Ссылка = СсылкаИлиДокументОбъект.ДополнительныеСвойства.СсылкаНового;
	Иначе
		Ссылка = СсылкаИлиДокументОбъект;
	КонецЕсли;
	
	Участники.Свернуть("Участник", "Изменение, Источник, Автоподстановка");
	
	// Проверка отличий.
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Было.Участник,
		|	Было.Изменение
		|ПОМЕСТИТЬ Было
		|ИЗ
		|	&Было КАК Было
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Стало.Участник,
		|	Стало.Изменение
		|ПОМЕСТИТЬ Стало
		|ИЗ
		|	&Стало КАК Стало
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Было.Участник КАК УчастникБыл,
		|	Было.Изменение КАК ИзмененоБыло,
		|	Стало.Участник КАК УчастникСтал,
		|	Стало.Изменение КАК ИзмененоСтало,
		|	Было.Участник ЕСТЬ NULL КАК ЭтоНовыйУчастник
		|ИЗ
		|	Было КАК Было
		|		ПОЛНОЕ СОЕДИНЕНИЕ Стало КАК Стало
		|		ПО Было.Участник = Стало.Участник
		|ГДЕ
		|	(Было.Участник ЕСТЬ NULL 
		|			ИЛИ Стало.Участник ЕСТЬ NULL 
		|			ИЛИ Было.Изменение <> Стало.Изменение)";
		
	ТекущаяРабочаяГруппа = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Ссылка);
	Запрос.УстановитьПараметр("Было", ТекущаяРабочаяГруппа);
	Запрос.УстановитьПараметр("Стало", Участники);
	РезультатПроверкиОтличий = Запрос.Выполнить();
	
	Если РезультатПроверкиОтличий.Пустой() Тогда
		Возврат; // Запись не требуется.
	КонецЕсли;
	
	ТаблицаОтличий = РезультатПроверкиОтличий.Выгрузить();
	
	// Проверка прав.
	Если ПроверятьПрава Тогда
		ЕстьНовыеУчастники = ТаблицаОтличий.Найти(Истина, "ЭтоНовыйУчастник") <> Неопределено;
		ПроверитьПраваПередЗаписьюРабочейГруппы(СсылкаИлиДокументОбъект, Участники, АвторИзменений, ЕстьНовыеУчастники);
	КонецЕсли;
	
	// Описание изменений рабочей группы для протокола работы пользователей.
	ИзмененияДобавлено = "";
	ИзмененияИзменено = "";
	ИзмененияУдалено = "";
	Для Каждого СтрОтличий Из ТаблицаОтличий Цикл
		Если (ЗначениеЗаполнено(СтрОтличий.УчастникБыл)
			И ЗначениеЗаполнено(СтрОтличий.УчастникСтал))
			И Не СтрОтличий.ИзмененоБыло = СтрОтличий.ИзмененоСтало Тогда
			ИзмененияИзменено = ИзмененияИзменено
				+ СтрШаблон(
					НСтр("ru = 'Изменено: %1, Изменение = %2 => %3, %4'"),
					Строка(СтрОтличий.УчастникБыл),
					СтрОтличий.ИзмененоБыло,
					СтрОтличий.ИзмененоСтало,
					ПолучитьНавигационнуюСсылку(СтрОтличий.УчастникБыл))
				+ Символы.ПС;
		ИначеЕсли ЗначениеЗаполнено(СтрОтличий.УчастникБыл) 
			И Не ЗначениеЗаполнено(СтрОтличий.УчастникСтал) Тогда
			ИзмененияУдалено = ИзмененияУдалено
				+ СтрШаблон(
					НСтр("ru = 'Удалено: %1, Изменение = %2, %3'"),
					Строка(СтрОтличий.УчастникБыл),
					СтрОтличий.ИзмененоБыло,
					ПолучитьНавигационнуюСсылку(СтрОтличий.УчастникБыл))
				+ Символы.ПС;
		ИначеЕсли ЗначениеЗаполнено(СтрОтличий.УчастникСтал) 
			И Не ЗначениеЗаполнено(СтрОтличий.УчастникБыл) Тогда
			ИзмененияДобавлено = ИзмененияДобавлено
				+ СтрШаблон(
					НСтр("ru = 'Добавлено: %1, Изменение = %2, %3'"),
					Строка(СтрОтличий.УчастникСтал),
					СтрОтличий.ИзмененоСтало,
					ПолучитьНавигационнуюСсылку(СтрОтличий.УчастникСтал))
				+ Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
	// Запись рабочей группы.
	Попытка
		НачатьТранзакцию();
		НеобходимоПротоколироватьИзменения = Метаданные.БизнесПроцессы.Найти(Ссылка.Метаданные()) = Неопределено;
		Если НеобходимоПротоколироватьИзменения Тогда
			ПротоколированиеРаботыСотрудников.ЗаписатьИзменениеРабочейГруппы(
				Ссылка, 
				СтрШаблон("%1%2%3", ИзмененияДобавлено, ИзмененияИзменено, ИзмененияУдалено));
		КонецЕсли;
		РегистрыСведений.РабочиеГруппы.ЗаписатьНаборПоОбъекту(Ссылка, Участники, ОбновитьПрава);
		
		РасширитьРабочуюГруппуСвязанныхОбъектов(Ссылка);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Перезаписывает рабочие группы предметов бизнес-процесса
//
// Параметры:
//	 - БизнесПроцессОбъект - БизнесПроцессОбъект - бизнес процесс объект для которого производится
//							  запись рабочих групп.
//	 - Предметы - Массив - массив предметов бизнес-процесса.
//
Процедура ПерезаписатьРабочиеГруппыПредметовБизнесПроцесса(БизнесПроцессОбъект, Предметы) Экспорт
	
	Если ТипЗнч(Предметы) <> Тип("Массив")
		ИЛИ Предметы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если БизнесПроцессОбъект.Состояние <> Перечисления.СостоянияБизнесПроцессов.Активен Тогда
		Возврат;
	КонецЕсли;	
	
	МетаданныеБизнесПроцессов = Метаданные.БизнесПроцессы;
	МассивТиповБизнесПроцессов = Новый Массив;
	
	Для Каждого МетаданныеБизнесПроцеса ИЗ МетаданныеБизнесПроцессов Цикл
		МассивТиповБизнесПроцессов.Добавить(Тип("БизнесПроцессОбъект." + МетаданныеБизнесПроцеса.Имя));
	КонецЦикла;
	
	ТипБизнесПроцесса = ТипЗнч(БизнесПроцессОбъект);
	Если МассивТиповБизнесПроцессов.Найти(ТипБизнесПроцесса) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерБизнесПроцесса = БизнесПроцессы[БизнесПроцессОбъект.Метаданные().Имя];
	Если НЕ МенеджерБизнесПроцесса.ЕстьМетодДобавитьУчастниковВТаблицу() Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Предмет Из Предметы Цикл
		// Формирование рабочей группы перед проверкой прав.
		ОбъектДляРасширенияРГ = ОбъектДляАвтоматическогоРасширенияРабочейГруппы(Предмет);
		Если ПоОбъектуВедетсяАвтоматическоеЗаполнениеРабочейГруппы(ОбъектДляРасширенияРГ) Тогда
			РабочаяГруппа = РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников();
			МенеджерБизнесПроцесса.ДобавитьУчастниковВТаблицу(РабочаяГруппа, БизнесПроцессОбъект);
			Попытка
				ДобавитьУчастниковВРабочуюГруппуОбъекта(ОбъектДляРасширенияРГ, РабочаяГруппа, Истина);
			Исключение
				ПредставлениеПредмета = Строка(ОбъектДляРасширенияРГ);
				ТипПредмета = ТипЗнч(ОбъектДляРасширенияРГ);
				ОбработатьИсключениеПерезаписиРабочейГруппыПредметаПроцесса(
					ПредставлениеПредмета,
					ТипПредмета,
					ИнформацияОбОшибке());
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Отключает перезапись рабочей группы предмета процесса.
//
// Параметры:
//  Предмет - СправочникОбъект.ДокументыПредприятия - предмет, при записи которого отключается перезапись рабочей группы.
//
Процедура ОтключитьПерезаписьРабочейГруппыПредметаПроцесса(Предмет) Экспорт
	
	Предмет.ДополнительныеСвойства.Вставить("ПерезаписьРабочейГруппыПредметаПроцессаОтключена", Истина);
	
КонецПроцедуры

// Определяет признак отключения перезаписи рабочей группы предмета процесса.
//
// Параметры:
//  Предмет - СправочникОбъект.ДокументыПредприятия - предмет, при записи которого может быть
//                                                   отключена перезапись рабочей группы.
//
Функция ПерезаписьРабочейГруппыПредметаПроцессаОтключена(Предмет) Экспорт
	
	Если Предмет.ДополнительныеСвойства.Свойство(
			"ПерезаписьРабочейГруппыПредметаПроцессаОтключена")
		И Предмет.ДополнительныеСвойства.ПерезаписьРабочейГруппыПредметаПроцессаОтключена Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Выполняет обработку исключения, возникшего при перезаписи рабочей группы
// предмета процесса.
//
// Если исключение возникает в сеансе пользователя, то процедура прерывает выполнение
// программного кода, иначе пишется запись в журнал регистрации и выполнение продолжается.
//
Процедура ОбработатьИсключениеПерезаписиРабочейГруппыПредметаПроцесса(
	ПредставлениеПредмета, ТипПредмета, ИнформацияОбОшибке) Экспорт
	
	Если ТипПредмета = Тип("СправочникСсылка.ПроектныеЗадачи")
		Или ТипПредмета = Тип("СправочникСсылка.Проекты") Тогда
		
		НаименованиеОбъекта = НСтр("ru = 'проекта'");
	ИначеЕсли ТипПредмета = Тип("СправочникСсылка.ПротоколыМероприятий")
		Или ТипПредмета = Тип("СправочникСсылка.Мероприятия") Тогда
		НаименованиеОбъекта = НСтр("ru = 'мероприятия'");
	Иначе
		НаименованиеОбъекта = НСтр("ru = 'предмета'");
	КонецЕсли;
	
	ТекстИсключения = НСтр("ru = 'Не удалось обновить рабочую группу %1 ""%2"" по следующей причине:
		|
		|%3'");
		
	ТекстИсключения = СтрШаблон(ТекстИсключения,
		НаименованиеОбъекта, ПредставлениеПредмета, ИнформацияОбОшибке.Описание);
		
	Если РаботаСБизнесПроцессами.ЭтоФоновоеВыполнениеПроцесса() Тогда
		
		// Если исключение возникает в фоновом задании, то в журнал регистрации пишется ошибка
		// и работа кода не прерывается.
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Перезапись рабочей группы предмета процесса'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстИсключения);
	Иначе
		// Иначе вызывается исключение.
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет участников в рабочую группу документа.
//
// Параметры:
// Объект (СправочникСсылка.ДокументыПредприятия и др.)
// Участники (ТаблицаЗначений)
// - Участник (СправочникСсылка.Пользователи, СправочникСсылка.РабочиеГруппы, СправочникСсылка.ПолныеРоли)
// ОбновитьПраваДоступа - если установлен, то будет вызвано обновление прав доступа для указанного предмета
// 
Процедура ДобавитьУчастниковВРабочуюГруппуОбъекта(
			Объект,
			Участники,
			ОбновитьПрава = Истина,
			ПроверятьПрава = Истина) Экспорт
	
	Если ЗначениеЗаполнено(Объект) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ТаблицаНабора = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект);
		Для Каждого УчастникиСтрока Из Участники Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаНабора.Добавить(), УчастникиСтрока);
		КонецЦикла;
		
		ПерезаписатьРабочуюГруппуОбъекта(Объект, ТаблицаНабора, ОбновитьПрава, ПроверятьПрава);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет участников в рабочую группу документа из источника
//
// Параметры:
// Документ (СправочникСсылка.ДокументыПредприятия)
// Источник (СправочникСсылка.ДокументыПредприятия, БизнесПроцессСсылка)
// 
Процедура ДобавитьУчастниковВРабочуюГруппуДокументаИзИсточника(
			Документ, Источник, ЗаписатьДокумент = Истина) Экспорт
	
	Если Документ = Неопределено Или Документ.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПоОбъектуВедетсяАвтоматическоеЗаполнениеРабочейГруппы(Документ) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаУчастников = ПолучитьПустуюТаблицуУчастников();
	ДобавитьУчастниковИзИсточника(ТаблицаУчастников, Источник);
	ДобавитьУчастниковВРабочуюГруппуОбъекта(
		Документ, ТаблицаУчастников, ЗаписатьДокумент);
	
КонецПроцедуры

Процедура ДобавитьУчастниковБизнесПроцессовВТаблицу(ТаблицаУчастников, ДокументСсылка)
	
	ШаблонЗапросаБизнесПроцессы =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БизнесПроцессПредметы.Ссылка КАК Ссылка
		|ИЗ
		|	БизнесПроцесс.[ВидБизнесПроцесса].Предметы КАК БизнесПроцессПредметы
		|ГДЕ
		|	БизнесПроцессПредметы.Предмет = &Предмет";
	
	Если ТипЗнч(ДокументСсылка) = Тип("СправочникСсылка.Проекты") Тогда
		ШаблонЗапросаБизнесПроцессы =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БизнесПроцесс.Ссылка КАК Ссылка
		|ИЗ
		|	БизнесПроцесс.[ВидБизнесПроцесса] КАК БизнесПроцесс
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.[ВидБизнесПроцесса].Предметы КАК БизнесПроцессПредметы
		|		ПО БизнесПроцесс.Ссылка = БизнесПроцессПредметы.Ссылка
		|ГДЕ
		|	(БизнесПроцесс.Проект = &Предмет
		|			ИЛИ БизнесПроцессПредметы.Предмет = &Предмет
		|			ИЛИ БизнесПроцессПредметы.Предмет В
		|				(ВЫБРАТЬ
		|					ПроектныеЗадачи.Ссылка
		|				ИЗ
		|					Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
		|				ГДЕ
		|					ПроектныеЗадачи.Владелец = &Предмет))"
	КонецЕсли;
	
	Для каждого МетаданныеБизнесПроцесс Из Метаданные.БизнесПроцессы Цикл
		ТекстЗапросаБизнесПроцессы = СтрЗаменить(ШаблонЗапросаБизнесПроцессы, "[ВидБизнесПроцесса]", МетаданныеБизнесПроцесс.Имя);
		Запрос = Новый Запрос(ТекстЗапросаБизнесПроцессы);
		Запрос.Параметры.Вставить("Предмет", ДокументСсылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДобавитьУчастниковИзИсточника(ТаблицаУчастников, Выборка.Ссылка);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Перезаполняет рабочую группу
//
Процедура ПерезаполнитьРабочуюГруппуДокумента(Документ, ЗаписатьДокумент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаУчастников = ПолучитьПустуюТаблицуУчастников();
	ДобавитьУчастниковИзИсточника(ТаблицаУчастников, Документ);
	ДобавитьУчастниковБизнесПроцессовВТаблицу(ТаблицаУчастников, Документ);
	ДобавитьУчастниковВРабочуюГруппуОбъекта(Документ, ТаблицаУчастников, ЗаписатьДокумент);
	
КонецПроцедуры

// Перезаполняет рабочую группу в форме документа
//
Процедура ПерезаполнитьРабочуюГруппуНаФорме(Форма) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаУчастников = ПолучитьПустуюТаблицуУчастников();
	
	ТипИсточника = ТипЗнч(Форма.Объект.Ссылка);
	ИмяСправочника = Метаданные.НайтиПоТипу(ТипИсточника).Имя;
	ЕстьМетодДобавитьУчастниковВТаблицу = Ложь;
	Попытка
		ЕстьМетодДобавитьУчастниковВТаблицу = Справочники[ИмяСправочника].ЕстьМетодДобавитьУчастниковВТаблицу();
	Исключение
		// Метода может не быть.
	КонецПопытки;
	Если ЕстьМетодДобавитьУчастниковВТаблицу Тогда
		Справочники[ИмяСправочника].ДобавитьУчастниковВТаблицу(ТаблицаУчастников, Форма.Объект);
	КонецЕсли;
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Форма.Объект.Ссылка) Тогда
		ДобавитьУчастниковИзШаблонаВТаблицу(ТаблицаУчастников, Форма);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		ДобавитьУчастниковБизнесПроцессовВТаблицу(ТаблицаУчастников, Форма.Объект.Ссылка);
	КонецЕсли;
	
	Форма.РабочаяГруппаТаблица.Очистить();
	ФормаДокументаДобавитьУчастников(Форма, ТаблицаУчастников);
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

// Добавляет в набор участников рабочей группы переданного источника
Процедура ДобавитьУчастниковИзИсточника(ТаблицаНабора, Источник) Экспорт
	
	ТипИсточника = ТипЗнч(Источник);
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипИсточника) Тогда
		ИмяСправочника = Метаданные.НайтиПоТипу(ТипИсточника).Имя;
		ЕстьМетодДобавитьУчастниковВТаблицу = Ложь;
		Попытка
			ЕстьМетодДобавитьУчастниковВТаблицу = Справочники[ИмяСправочника].ЕстьМетодДобавитьУчастниковВТаблицу();
		Исключение
			// Метода может не быть.
		КонецПопытки;
		Если ЕстьМетодДобавитьУчастниковВТаблицу Тогда
			Справочники[ИмяСправочника].ДобавитьУчастниковВТаблицу(ТаблицаНабора, Источник);
		КонецЕсли;
	ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипИсточника) Тогда
		ИмяБизнесПроцесса = Метаданные.НайтиПоТипу(ТипИсточника).Имя;
		ЕстьМетодДобавитьУчастниковВТаблицу = Ложь;
		Попытка
			ЕстьМетодДобавитьУчастниковВТаблицу = БизнесПроцессы[ИмяБизнесПроцесса].ЕстьМетодДобавитьУчастниковВТаблицу();
		Исключение
			// Метода может не быть.
		КонецПопытки;
		Если ЕстьМетодДобавитьУчастниковВТаблицу Тогда
			БизнесПроцессы[ИмяБизнесПроцесса].ДобавитьУчастниковВТаблицу(ТаблицаНабора, Источник);
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаНабора.Свернуть("Участник", "Изменение, Источник, Автоподстановка");
	
КонецПроцедуры

// Добавляет участника в переданную таблицу.
// Параметр СтрокаДобавленаАвтоматически определяет признак того, что нужно скорректировать
//  реквизит "Изменение" в соответствии со стандартными правами.
//          
// Параметры:
//   ТаблицаНабора - ТаблицаЗначений
//   Участник - ОпределяемыйТип.КонтейнерыСотрудников
//   Изменение - Булево
//   Источник - СправочникСсылка.Контроль, СправочникСсылка.Проекты, СправочникСсылка.ДействияОзнакомления, ДокументСсылка.ВходящееПисьмо, СправочникСсылка.ДействияСогласования, СправочникСсылка.ДействияРегистрации, ДокументСсылка.ИсходящееПисьмо, СправочникСсылка.ДействияПодписания, СправочникСсылка.ДействияУтверждения, СправочникСсылка.ШаблоныДокументов, СправочникСсылка.ДокументыПредприятия, СправочникСсылка.ДействияИсполнения, СправочникСсылка.Мероприятия
//   Автоподстановка - СправочникСсылка.АвтоподстановкиДляОбъектов
//
Функция ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Участник, Изменение = Ложь,
	Знач Источник = Неопределено, Знач Автоподстановка = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Участник) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не РегистрыСведений.СотрудникиВКонтейнерах.ЭтоКонтейнер(Участник) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Участник", Участник);
	Отбор.Вставить("Изменение", Изменение);
	
	Если ТаблицаНабора.НайтиСтроки(Отбор).Количество() > 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаТаблицы = ТаблицаНабора.Добавить();
	СтрокаТаблицы.Участник = Участник;
	СтрокаТаблицы.Изменение = Изменение;
	
	СтрокаТаблицы.Источник = Источник;
	СтрокаТаблицы.Автоподстановка = Автоподстановка;
	
	Если Автоподстановка <> Неопределено 
		И ТаблицаНабора.Колонки.Найти("Иконка") <> Неопределено Тогда
		Если ТипЗнч(СтрокаТаблицы.Участник) = Тип("СправочникСсылка.Сотрудники") Тогда
			СтрокаТаблицы.Иконка = 3;
		ИначеЕсли ТипЗнч(СтрокаТаблицы.Участник) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			СтрокаТаблицы.Иконка = 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрокаТаблицы;
	
КонецФункции

// Добавляет участников в переданную таблицу.
//          
// Параметры:
//   ТаблицаНабора - ТаблицаЗначений
//   БизнесПроцесс - БизнесПроцессОбъект
//   ИмяТабличнойЧасти - Строка
//
Процедура ДобавитьУчастниковПоТабличнойЧастиБизнесПроцесса(
	ТаблицаНабора,
	БизнесПроцесс,
	ИмяТабличнойЧасти) Экспорт
	
	Для Каждого ИсполнителиСтрока Из БизнесПроцесс[ИмяТабличнойЧасти] Цикл
		
		ТипИсполнителя = ТипЗнч(ИсполнителиСтрока.Исполнитель);
		
		Если Не ЗначениеЗаполнено(ИсполнителиСтрока.Исполнитель)
			Или ТипИсполнителя = Тип("Строка")
			Или ТипИсполнителя = Тип("СправочникСсылка.АвтоподстановкиДляПроцессов") Тогда
			
			Продолжить;
		КонецЕсли;
		
		УсловиеУчастника = Новый Структура("Условие", Неопределено);
		ЗаполнитьЗначенияСвойств(УсловиеУчастника, ИсполнителиСтрока);
		Если ЗначениеЗаполнено(УсловиеУчастника.Условие) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ИсполнителиСтрока.Исполнитель) = Тип("СправочникСсылка.Пользователи")
			Или ТипЗнч(ИсполнителиСтрока.Исполнитель) = Тип("СправочникСсылка.Сотрудники")
			Или ТипЗнч(ИсполнителиСтрока.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			
			ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора,
				ИсполнителиСтрока.Исполнитель, Ложь, БизнесПроцесс);
			
		Иначе
			ВызватьИсключение НСтр("ru = 'Некорректный исполнитель.'");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьРабочуюГруппуДокумента(Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Документ);
	
КонецФункции

// Добавляет участника рабочей группы на форму шаблона.
//
Процедура ФормаШаблонаДобавитьУчастника(
	Форма,
	РабочаяГруппаТаблица,
	Участник)
	
	Если Не ЗначениеЗаполнено(Участник) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Участник", Участник);
	Если РабочаяГруппаТаблица.НайтиСтроки(Отбор).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = РабочаяГруппаТаблица.Добавить();
	СтрокаТаблицы.Участник = Участник;
	УстановитьРеквизитыУсловногоОформления(СтрокаТаблицы);
	
КонецПроцедуры

// Добавляет участника рабочей группы на форму документа, исключая дубликаты.
// 
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма документа.
//   СтрокаУчастника - СтрокаТаблицыЗначений - строка с данными участника.
//
Процедура ФормаДокументаДобавитьУчастника(Форма, СтрокаУчастника)
	
	Если Не ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Участник", СтрокаУчастника.Участник);
	Отбор.Вставить("Изменение", СтрокаУчастника.Изменение);
	Если Форма.РабочаяГруппаТаблица.НайтиСтроки(Отбор).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = Форма.РабочаяГруппаТаблица.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаУчастника);
	УстановитьРеквизитыУсловногоОформления(СтрокаТаблицы);
	
КонецПроцедуры

// Добавляет участников рабочей группы на форму документа.
// 
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма документа.
//   РабочаяГруппаТаблица - ТаблицаЗначений - таблица с данными участников.
//
Процедура ФормаДокументаДобавитьУчастников(Форма, РабочаяГруппаТаблица) Экспорт
	
	Для каждого РабочаяГруппаТаблицаСтрока Из РабочаяГруппаТаблица Цикл
		ФормаДокументаДобавитьУчастника(Форма, РабочаяГруппаТаблицаСтрока);
	КонецЦикла;
	
	Форма.КоличествоУчастниковРабочейГруппы = Форма.РабочаяГруппаТаблица.Количество();
	
КонецПроцедуры

// Обработчик события формы
// Заполняет рабочую группу по данным копируемого документа и его шаблона
// Устанавливает параметры списка рабочей группы,
// устанавливает реквизит формы КоличествоУчастниковРабочейГруппы
// устанавливает условное оформление списка рабочей группы
// Вызывается из процедур документов ПриСозданииНаСервере
//
Процедура ДокументПриКопировании(Форма) Экспорт
	
	ЗначениеКопирования = Форма.Параметры.ЗначениеКопирования;
	Если Не ЗначениеЗаполнено(ЗначениеКопирования)
		Или Не ДелопроизводствоКлиентСервер.ЭтоДокумент(ЗначениеКопирования) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(ЗначениеКопирования) Тогда
		ИмяТаблицыШаблона = "ШаблоныДокументов";
	Иначе
		Возврат;
	КонецЕсли;
	
	Форма.РабочаяГруппаТаблица.Очистить();
	Шаблон = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеКопирования, "Шаблон");
	
	ТаблицаУчастников = ПолучитьПустуюТаблицуУчастников();
	ДобавитьУчастниковИзШаблонаВТаблицу(ТаблицаУчастников, Форма, Шаблон);
	ФормаДокументаДобавитьУчастников(Форма, ТаблицаУчастников);
	
КонецПроцедуры

// Обновляет участников по автоподстановкам в рабочей группе, сохраняя их порядок
// 
// Параметры:
//  РабочаяГруппа - ТаблицаЗначений:
// * Участник - СправочникСсылка - контейнер сотрудников
// * Изменение - Булево - право изменения
// * Автоподстановка - СправочникСсылка.АвтоподстановкиДляДокументов - АП-источник участника 
//
Процедура ОбновитьУчастниковРабочейГруппыПоАвтоподстановкам(РабочаяГруппа, Знач Объект) Экспорт
	
	НоваяРГ = РабочаяГруппа.Скопировать();
	НоваяРГ.Очистить();
	ОбработанныеАП = Новый Массив;
	
	Для Каждого Строка Из РабочаяГруппа Цикл
		
		Если ЗначениеЗаполнено(Строка.Автоподстановка) Тогда
			Если ОбработанныеАП.Найти(Строка.Автоподстановка) = Неопределено Тогда
				
				ОбработанныеАП.Добавить(Строка.Автоподстановка);

				ТипыКонтейнеровСотрудников = Метаданные.ОпределяемыеТипы.КонтейнерыСотрудников.Тип;
			
				ЗначениеАвтоподстановки = ШаблоныДокументов.ПолучитьЗначениеАвтоподстановки(
					Строка.Автоподстановка, Объект);
					
				Если ЗначениеАвтоподстановки = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТипыКонтейнеровСотрудников.СодержитТип(ТипЗнч(ЗначениеАвтоподстановки)) Тогда
					
					НоваяСтрока = ДобавитьУчастникаВТаблицуНабора(НоваяРГ,
						ЗначениеАвтоподстановки,
						Строка.Изменение,
						Строка.Источник,
						Строка.Автоподстановка);
					
				ИначеЕсли ТипЗнч(ЗначениеАвтоподстановки) = Тип("Структура") Тогда
					
					НоваяСтрока = ДобавитьУчастникаВТаблицуНабора(НоваяРГ, 
						ЗначениеАвтоподстановки.РольИсполнителя,
						Строка.Изменение,
						Строка.Источник,
						Строка.Автоподстановка);
					
				ИначеЕсли ТипЗнч(ЗначениеАвтоподстановки) = Тип("Массив") Тогда 
					
					Для Каждого ЗначениеАвтоподстановкиЭлемент Из ЗначениеАвтоподстановки Цикл
						
						Если ТипыКонтейнеровСотрудников.СодержитТип(ТипЗнч(ЗначениеАвтоподстановкиЭлемент)) Тогда
							
							НоваяСтрока = ДобавитьУчастникаВТаблицуНабора(НоваяРГ,
								ЗначениеАвтоподстановкиЭлемент,
								Строка.Изменение,
								Строка.Источник,
								Строка.Автоподстановка);
							
						ИначеЕсли ТипЗнч(ЗначениеАвтоподстановкиЭлемент) = Тип("Структура") Тогда
							
							НоваяСтрока = ДобавитьУчастникаВТаблицуНабора(НоваяРГ, 
								ЗначениеАвтоподстановкиЭлемент.РольИсполнителя,
								Строка.Изменение,
								Строка.Источник,
								Строка.Автоподстановка);
							
						Иначе
							ВызватьИсключение НСтр("ru = 'Функция автоподстановки вернула некорректное значение участника рабочей группы.'");
						КонецЕсли;
						
					КонецЦикла;
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, ,
						"Участник, Изменение, Источник, Автоподстановка");
					
				Иначе
					ВызватьИсключение НСтр("ru = 'Функция автоподстановки вернула некорректное значение участника рабочей группы.'");
				КонецЕсли;
				
			Иначе
				Продолжить
			КонецЕсли;
		Иначе
			ЗаполнитьЗначенияСвойств(НоваяРГ.Добавить(), Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	РабочаяГруппа = НоваяРГ;
	
КонецПроцедуры

// Заменяет сотрудников текущего пользователя в переданной РГ на другого
// 
// Параметры:
//  РабочаяГруппа - См. ПолучитьПустуюТаблицуУчастников
//  КемЗаменить - ОпределяемыйТип.КонтейнерыСотрудников - Новый участник РГ вместо заменяемых
Процедура ЗаменитьСотрудниковТекущегоПользователя(РабочаяГруппа, КемЗаменить) Экспорт
	
	КогоЗаменить = Сотрудники.СотрудникиПользователя();
	
	Для Каждого СтрокаРГ Из РабочаяГруппа Цикл
		
		Если КогоЗаменить.Найти(СтрокаРГ.Участник) <> Неопределено 
			И СтрокаРГ.Участник <> КемЗаменить Тогда
			
			СтрокаРГ.Участник = КемЗаменить
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

/////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ И ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ

// Обработка настройки рабочей группы при создании формы 
// Вызывается из процедур ПриСозданииНаСервере
//
Процедура ПриСозданииНаСервере(Форма) Экспорт
	
	ИмяФормы = Форма.ИмяФормы;
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		
		Если Форма.Элементы.Найти("ГруппаРабочаяГруппа") <> Неопределено Тогда 
			Форма.Элементы.ГруппаРабочаяГруппа.Видимость = Ложь;
		КонецЕсли;
		
		Если ДелопроизводствоКлиентСервер.ЭтоФормаВидаДокумента(ИмяФормы)
			Или ДелопроизводствоКлиентСервер.ЭтоФормаШаблонаДокумента(ИмяФормы) Тогда
			Если Форма.Элементы.Найти("РабочаяГруппаДокумента") <> Неопределено Тогда
				Форма.Элементы.РабочаяГруппаДокумента.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.Элементы.РабочаяГруппаТаблица.Видимость = Истина;
	Если Не ДелопроизводствоКлиентСервер.ЭтоФормаВидаДокумента(ИмяФормы)
		И Не ДелопроизводствоКлиентСервер.ЭтоФормаШаблонаДокумента(ИмяФормы) Тогда 
		ДокументУстановитьУсловноеОформлениеСпискаРабочейГруппы(Форма);
		ПриИзмененииВидаОбъекта(Форма);
	КонецЕсли;
	
	УстановитьДоступностьРедактированияСпискаДоступа(Форма);
	
КонецПроцедуры

// Обработчик события формы
// Устанавливает параметры спика рабочей группы,
// устанавливает реквизит формы КоличествоУчастниковРабочейГруппы
// устанавливает условное оформление списка рабочей группы
// Вызывается из процедур документов ПриЧтенииНаСервере
//
Процедура ПриЧтенииНаСервере(Форма) Экспорт
	
	ЭтоФормаВидаДокумента = ДелопроизводствоКлиентСервер.ЭтоФормаВидаДокумента(Форма.ИмяФормы);
	ЭтоФормаШаблонаДокумента = ДелопроизводствоКлиентСервер.ЭтоФормаШаблонаДокумента(Форма.ИмяФормы);
	
	Если ЭтоФормаВидаДокумента Тогда 
		ОбновитьДополнительныеРеквизитыУчастников(Форма.ШаблонДокумента.РабочаяГруппаДокумента);
		ОбъектШаблон = Форма.ШаблонДокумента;
	Иначе 
		Если ЭтоФормаШаблонаДокумента Тогда
			ОбновитьДополнительныеРеквизитыУчастников(Форма.Объект.РабочаяГруппаДокумента);
		КонецЕсли;
		ОбъектШаблон = Форма.Объект;
	КонецЕсли;
	ШаблонСсылка = ОбъектШаблон.Ссылка;
	
	Форма.РабочаяГруппаТаблица.Очистить();
	КэшДокументыПредприятияФормаЭлемента =
		КэшиНаВремяВызоваПовтИсп.КэшДокументыПредприятияФормаЭлемента();
	Если КэшДокументыПредприятияФормаЭлемента.Инициализирован
		И КэшДокументыПредприятияФормаЭлемента.КэшДокумента.Ссылка = ШаблонСсылка Тогда
		УчастникиРГ = КэшДокументыПредприятияФормаЭлемента.УчастникиРабочейГруппы;
	Иначе
		УчастникиРГ = ПолучитьРабочуюГруппуДокумента(ШаблонСсылка);
	КонецЕсли;
	ФормаДокументаДобавитьУчастников(Форма, УчастникиРГ);
	Форма.РабочаяГруппаТаблица.Сортировать("Иконка, ЭтоРоль Убыв, Участник");
	Форма.Элементы.РабочаяГруппаТаблица.Видимость = Истина;
	
КонецПроцедуры

// Обработчик события формы
Процедура ОбъектПередЗаписьюНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Если ДелопроизводствоКлиентСервер.ЭтоФормаВидаДокумента(Форма.ИмяФормы) Тогда 
		СсылкаНаОбъект = Форма.ШаблонДокумента.Ссылка;
	Иначе 
		СсылкаНаОбъект = Форма.Объект.Ссылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Если ДелопроизводствоКлиентСервер.ЭтоДокумент(СсылкаНаОбъект) Тогда
			Если ПоОбъектуВедетсяАвтоматическоеЗаполнениеРабочейГруппы(СсылкаНаОбъект) Тогда
				
				// Для не новых документов добавляем новых участников по документу.
				ПредыдущиеУчастники = ПолучитьПустуюТаблицуУчастников();
				ДобавитьУчастниковИзИсточника(ПредыдущиеУчастники, СсылкаНаОбъект);
				
				ТаблицаУчастников = ПолучитьПустуюТаблицуУчастников();
				ДобавитьУчастниковИзИсточника(ТаблицаУчастников, Форма.Объект);
				
				Отбор = Новый Структура(
					"Участник, Изменение");
				УдаляемыеСтроки = Новый Массив;
				Для каждого ТаблицаУчастниковСтрока Из ТаблицаУчастников Цикл
					ЗаполнитьЗначенияСвойств(Отбор, ТаблицаУчастниковСтрока);
					НайденныеСтроки = ПредыдущиеУчастники.НайтиСтроки(Отбор);
					Если НайденныеСтроки.Количество() > 0 Тогда
						УдаляемыеСтроки.Добавить(ТаблицаУчастниковСтрока);
					КонецЕсли;
				КонецЦикла;
				Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
					ТаблицаУчастников.Удалить(УдаляемаяСтрока);
				КонецЦикла;
				
				ФормаДокументаДобавитьУчастников(Форма, ТаблицаУчастников);
				
			КонецЕсли;
		КонецЕсли;
		ПараметрыЗаписи.Вставить("ЭтоНовый", Ложь);
	Иначе
		ПараметрыЗаписи.Вставить("ЭтоНовый", Истина);
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппа", Форма.РабочаяГруппаТаблица.Выгрузить());
	
КонецПроцедуры

// Обработчик события формы
Процедура ОбъектПослеЗаписиНаСервере(Форма, ПараметрыЗаписи) Экспорт
	
	Если ДелопроизводствоКлиентСервер.ЭтоФормаВидаДокумента(Форма.ИмяФормы) Тогда 
		СсылкаНаОбъект = Форма.ШаблонДокумента.Ссылка;
	Иначе 
		СсылкаНаОбъект = Форма.Объект.Ссылка;
	КонецЕсли;
	
	// Формирование исходной рабочей группы
	Участники = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(СсылкаНаОбъект);
	Форма.ИсходнаяРабочаяГруппа.Очистить();
	Для каждого Эл Из Участники Цикл
		
		Строка = Форма.ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник; 
		Строка.Изменение = Эл.Изменение;
		
	КонецЦикла;
	
	ПриЧтенииНаСервере(Форма);
	
КонецПроцедуры

// Обработчик события формы
Процедура ПриИзмененииВидаОбъекта(Форма) Экспорт
	
	ОбеспечитьУсловиеОбязательногоЗаполненияРабочейГруппы(Форма);
	УстановитьДоступностьРедактированияСпискаДоступа(Форма);
	
КонецПроцедуры

// Обработчик события формы ОбработкаВыбора шаблона документа
//
Процедура ШаблонОбработкаВыбора(Форма, ВыбранноеЗначение, РабочаяГруппаТаблица, РабочаяГруппаЭлемент) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ТекущаяСтрока = РабочаяГруппаЭлемент.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущиеДанные = РабочаяГруппаТаблица.НайтиПоИдентификатору(ТекущаяСтрока);
			ТекущиеДанные.Участник = ВыбранноеЗначение.РольИсполнителя;
			УстановитьРеквизитыУсловногоОформления(ТекущиеДанные);
			Форма.Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		РабочаяГруппаТаблица.Очистить();
		Для каждого РабочаяГруппаСтрока Из ВыбранноеЗначение Цикл
			ФормаШаблонаДобавитьУчастника(
				Форма,
				РабочаяГруппаТаблица,
				РабочаяГруппаСтрока.Исполнитель);
		КонецЦикла;
		Форма.Модифицированность = Истина;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		ТекущаяСтрока = РабочаяГруппаЭлемент.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущиеДанные = РабочаяГруппаТаблица.НайтиПоИдентификатору(ТекущаяСтрока);
			ТекущиеДанные.Участник = ВыбранноеЗначение[0].Значение;
			УстановитьРеквизитыУсловногоОформления(ТекущиеДанные);
			Форма.Модифицированность = Истина;
		КонецЕсли;
		Для Индекс = 1 по ВыбранноеЗначение.Количество() - 1 Цикл
			ФормаШаблонаДобавитьУчастника(
				Форма,
				РабочаяГруппаТаблица,
				ВыбранноеЗначение[Индекс].Значение);
			Форма.Модифицированность = Истина;
		КонецЦикла;	
	Иначе
		ТекущаяСтрока = РабочаяГруппаЭлемент.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущиеДанные = РабочаяГруппаТаблица.НайтиПоИдентификатору(ТекущаяСтрока);
			ТекущиеДанные.Участник = ВыбранноеЗначение;
			УстановитьРеквизитыУсловногоОформления(ТекущиеДанные);
			Форма.Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события формы шаблона документа ПриСозданииНаСервере
//
Процедура ШаблонПриСозданииНаСервере(Форма) Экспорт
	
	ШаблонУстановитьУсловноеОформлениеСпискаРабочейГруппы(Форма);
	
КонецПроцедуры

// Устанавливает условное оформление списка рабочей группы в форме шаблона документа
//
Процедура ШаблонУстановитьУсловноеОформлениеСпискаРабочейГруппы(Форма)
	
	Если ДелопроизводствоКлиентСервер.ЭтоФормаВидаДокумента(Форма.ИмяФормы) Тогда 
		ПолеЭтоРоль = Новый ПолеКомпоновкиДанных("ШаблонДокумента.РабочаяГруппаДокумента.ЭтоРоль");
		ПолеПометкаУдаления = Новый ПолеКомпоновкиДанных("ШаблонДокумента.РабочаяГруппаДокумента.ПометкаУдаления");
		ПолеНедействителен = Новый ПолеКомпоновкиДанных("ШаблонДокумента.РабочаяГруппаДокумента.Недействителен");
		ОформляемоеПоле = Новый ПолеКомпоновкиДанных("РабочаяГруппаДокументаУчастник");
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоФормаШаблонаДокумента(Форма.ИмяФормы) Тогда 
		ПолеЭтоРоль = Новый ПолеКомпоновкиДанных("Объект.РабочаяГруппаДокумента.ЭтоРоль");
		ПолеПометкаУдаления = Новый ПолеКомпоновкиДанных("Объект.РабочаяГруппаДокумента.ПометкаУдаления");
		ПолеНедействителен = Новый ПолеКомпоновкиДанных("Объект.РабочаяГруппаДокумента.Недействителен");
		ОформляемоеПоле = Новый ПолеКомпоновкиДанных("РабочаяГруппаДокументаУчастник");
	Иначе
		ПолеЭтоРоль = Новый ПолеКомпоновкиДанных("РабочаяГруппаТаблица.ЭтоРоль");
		ПолеПометкаУдаления = Новый ПолеКомпоновкиДанных("РабочаяГруппаТаблица.ПометкаУдаления");
		ПолеНедействителен = Новый ПолеКомпоновкиДанных("РабочаяГруппаТаблица.Недействителен");
		ОформляемоеПоле = Новый ПолеКомпоновкиДанных("РабочаяГруппаТаблицаУчастник");
	КонецЕсли;
	
	// Роль.
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаРоли);
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = ПолеЭтоРоль;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ПолеЭлементаУсловногоОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлементаУсловногоОформления.Поле = ОформляемоеПоле;
	
	// Пометка удаления.
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.УдаленныйОбъектЦвет);
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = ПолеПометкаУдаления;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ПолеЭлементаУсловногоОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлементаУсловногоОформления.Поле = ОформляемоеПоле;
	
	// Недействительность.
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедействительныеОбъекты);
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = ПолеНедействителен;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ПолеЭлементаУсловногоОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлементаУсловногоОформления.Поле = ОформляемоеПоле;
	
КонецПроцедуры

// Устанавливает условное оформление списка рабочей группы в форме документа
//
Процедура ДокументУстановитьУсловноеОформлениеСпискаРабочейГруппы(Форма) Экспорт
	
	// Роль.
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Использование = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаРоли);
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РабочаяГруппаТаблица.ЭтоРоль");
	ЭлементОтбора.ПравоеЗначение = Истина;
	ПолеЭлементаУсловногоОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлементаУсловногоОформления.Поле = Новый ПолеКомпоновкиДанных("РабочаяГруппаТаблицаУчастник");
	
	// Пометка удаления.
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Использование = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.УдаленныйОбъектЦвет);
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РабочаяГруппаТаблица.ПометкаУдаления");
	ЭлементОтбора.ПравоеЗначение = Истина;
	ПолеЭлементаУсловногоОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлементаУсловногоОформления.Поле = Новый ПолеКомпоновкиДанных("РабочаяГруппаТаблицаУчастник");
	
	// Недействительность.
	
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Использование = Истина;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедействительныеОбъекты);
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РабочаяГруппаТаблица.Недействителен");
	ЭлементОтбора.ПравоеЗначение = Истина;
	ПолеЭлементаУсловногоОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлементаУсловногоОформления.Поле = Новый ПолеКомпоновкиДанных("РабочаяГруппаТаблицаУчастник");
	
КонецПроцедуры

// Обновляет дополнительные реквизиты участников, отсутствующие в данных объекта.
//
// Параметры:
//   РабочаяГруппа - ДанныеФормыКоллекция - обновляемая рабочая группа, должна
//     содержать свойства Участник, ПометкаУдаления, Недействителен.
//
Процедура ОбновитьДополнительныеРеквизитыУчастников(РабочаяГруппа)
	
	Если РабочаяГруппа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УчастникиПользователи = Новый Массив;
	УчастникиРабочиеГруппы = Новый Массив;
	УчастникиПолныеРоли = Новый Массив;
	УчастникиСтруктураПредприятия = Новый Массив;
	Для Каждого Строка Из РабочаяГруппа Цикл
		Строка.ПометкаУдаления = Ложь;
		Строка.Недействителен = Ложь;
		Если ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.Пользователи") Тогда
			УчастникиПользователи.Добавить(Строка.Участник);
		ИначеЕсли ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.РабочиеГруппы") Тогда
			УчастникиРабочиеГруппы.Добавить(Строка.Участник);
		ИначеЕсли ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			УчастникиПолныеРоли.Добавить(Строка.Участник);
		ИначеЕсли ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			УчастникиСтруктураПредприятия.Добавить(Строка.Участник);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Участники.Ссылка КАК Участник,
		|	Участники.ПометкаУдаления КАК ПометкаУдаления,
		|	Участники.Недействителен КАК Недействителен
		|ИЗ
		|	Справочник.Пользователи КАК Участники
		|ГДЕ
		|	Участники.Ссылка В (&Пользователи)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Участники.Ссылка КАК Участник,
		|	Участники.ПометкаУдаления КАК ПометкаУдаления,
		|	Участники.Недействительна КАК Недействителен
		|ИЗ
		|	Справочник.РабочиеГруппы КАК Участники
		|ГДЕ
		|	Участники.Ссылка В (&РабочиеГруппы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Участники.Ссылка КАК Участник,
		|	Участники.ПометкаУдаления КАК ПометкаУдаления,
		|	ЛОЖЬ КАК Недействителен
		|ИЗ
		|	Справочник.ПолныеРоли КАК Участники
		|ГДЕ
		|	Участники.Ссылка В (&ПолныеРоли)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Участники.Ссылка КАК Участник,
		|	Участники.ПометкаУдаления КАК ПометкаУдаления,
		|	ЛОЖЬ КАК Недействителен
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК Участники
		|ГДЕ
		|	Участники.Ссылка В (&СтруктураПредприятия)
		|");
	Запрос.УстановитьПараметр("Пользователи", УчастникиПользователи);
	Запрос.УстановитьПараметр("РабочиеГруппы", УчастникиРабочиеГруппы);
	Запрос.УстановитьПараметр("ПолныеРоли", УчастникиПолныеРоли);
	Запрос.УстановитьПараметр("СтруктураПредприятия", УчастникиСтруктураПредприятия);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из РабочаяГруппа Цикл
		СтрокаРезультат = Результат.Найти(Строка.Участник);
		Если СтрокаРезультат <> Неопределено Тогда
			Строка.ПометкаУдаления = СтрокаРезультат.ПометкаУдаления;
			Строка.Недействителен = СтрокаРезультат.Недействителен;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает в строке реквизиты, необходимые для условного оформления
//
Процедура УстановитьРеквизитыУсловногоОформления(ТекущиеДанные) Экспорт
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные.ЭтоРоль = Ложь;
	Если ЗначениеЗаполнено(ТекущиеДанные.Участник) Тогда
		Если ТипЗнч(ТекущиеДанные.Участник) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			ТекущиеДанные.Иконка = 1;
			ТекущиеДанные.ЭтоРоль = Истина;
		ИначеЕсли ТипЗнч(ТекущиеДанные.Участник) = Тип("СправочникСсылка.РабочиеГруппы") Тогда
			ТекущиеДанные.Иконка = 2;
		ИначеЕсли ТипЗнч(ТекущиеДанные.Участник) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			ТекущиеДанные.Иконка = 2;
		ИначеЕсли ТипЗнч(ТекущиеДанные.Участник) = Тип("СправочникСсылка.ПодразделенияКонтейнеры") Тогда
			ТекущиеДанные.Иконка = 2;
		ИначеЕсли ТипЗнч(ТекущиеДанные.Участник) = Тип("СправочникСсылка.ПроектыКонтейнеры") Тогда
			ТекущиеДанные.Иконка = 2;
		ИначеЕсли ТипЗнч(ТекущиеДанные.Участник) = Тип("СправочникСсылка.Сотрудники") Тогда
			ТекущиеДанные.Иконка = 3;
		ИначеЕсли ТипЗнч(ТекущиеДанные.Участник) = Тип("СправочникСсылка.Пользователи") Тогда
			ТекущиеДанные.Иконка = 3;
		ИначеЕсли ТипЗнч(ТекущиеДанные.Участник) = Тип("Строка") Тогда
			ТекущиеДанные.Иконка = 4;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет участников из шаблона в таблицу.
//
Процедура ДобавитьУчастниковИзШаблонаВТаблицу(ТаблицаУчастников, Форма, ШаблонДокумента = Неопределено)
	
	Если ШаблонДокумента = Неопределено Тогда 
		ШаблонДокумента = Форма.Объект.Шаблон;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ШаблонДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого РабочаяГруппаСтрока Из ШаблонДокумента.РабочаяГруппаДокумента Цикл
		
		Если Не ЗначениеЗаполнено(РабочаяГруппаСтрока.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		ТипыКонтейнеровСотрудников = Метаданные.ОпределяемыеТипы.КонтейнерыСотрудников.Тип;
		Если ТипЗнч(РабочаяГруппаСтрока.Участник) = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов") Тогда
			
			ЗначениеАвтоподстановки = ШаблоныДокументов.ПолучитьЗначениеАвтоподстановки(
				РабочаяГруппаСтрока.Участник,
				Форма.Объект);
				
			Если ЗначениеАвтоподстановки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипыКонтейнеровСотрудников.СодержитТип(ТипЗнч(ЗначениеАвтоподстановки)) Тогда
				
				ДобавитьУчастникаВТаблицуНабора(ТаблицаУчастников,
					ЗначениеАвтоподстановки,
					РабочаяГруппаСтрока.Изменение,
					ШаблонДокумента,
					РабочаяГруппаСтрока.Участник);
				
			ИначеЕсли ТипЗнч(ЗначениеАвтоподстановки) = Тип("Структура")
				Или ТипЗнч(ЗначениеАвтоподстановки) = Тип("ФиксированнаяСтруктура") Тогда
				
				ДобавитьУчастникаВТаблицуНабора(ТаблицаУчастников, 
					ЗначениеАвтоподстановки.РольИсполнителя,
					РабочаяГруппаСтрока.Изменение,
					ШаблонДокумента,
					РабочаяГруппаСтрока.Участник);
				
			ИначеЕсли ТипЗнч(ЗначениеАвтоподстановки) = Тип("Массив")
				Или ТипЗнч(ЗначениеАвтоподстановки) = Тип("ФиксированныйМассив") Тогда
				
				Для Каждого ЗначениеАвтоподстановкиЭлемент Из ЗначениеАвтоподстановки Цикл
					
					Если ТипыКонтейнеровСотрудников.СодержитТип(ТипЗнч(ЗначениеАвтоподстановкиЭлемент)) Тогда
						
						ДобавитьУчастникаВТаблицуНабора(ТаблицаУчастников,
							ЗначениеАвтоподстановкиЭлемент,
							РабочаяГруппаСтрока.Изменение,
							ШаблонДокумента,
							РабочаяГруппаСтрока.Участник);
						
					ИначеЕсли ТипЗнч(ЗначениеАвтоподстановкиЭлемент) = Тип("Структура")
						Или ТипЗнч(ЗначениеАвтоподстановкиЭлемент) = Тип("ФиксированнаяСтруктура") Тогда
						
						ДобавитьУчастникаВТаблицуНабора(ТаблицаУчастников, 
							ЗначениеАвтоподстановкиЭлемент.РольИсполнителя,
							РабочаяГруппаСтрока.Изменение,
							ШаблонДокумента,
							РабочаяГруппаСтрока.Участник);
						
					Иначе
						ВызватьИсключение НСтр("ru = 'Функция автоподстановки вернула некорректное значение участника рабочей группы.'");
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				ВызватьИсключение НСтр("ru = 'Функция автоподстановки вернула некорректное значение участника рабочей группы.'");
			КонецЕсли;
			
		ИначеЕсли ТипыКонтейнеровСотрудников.СодержитТип(ТипЗнч(РабочаяГруппаСтрока.Участник)) Тогда
			
			ДобавитьУчастникаВТаблицуНабора(ТаблицаУчастников,
				РабочаяГруппаСтрока.Участник,
				РабочаяГруппаСтрока.Изменение,
				ШаблонДокумента);
			
		Иначе
			ВызватьИсключение НСтр("ru = 'В шаблоне некорректно задан участник рабочей группы.'");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет участников в рабочую группу документа из шаблона
//
Процедура ДобавитьУчастниковВРабочуюГруппуДокументаИзШаблона(Форма) Экспорт
	
	ШаблонДокумента = Форма.Объект.Шаблон;
	Если Не ЗначениеЗаполнено(ШаблонДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	// Формируем таблицу участников рабочей группы с учетом автоподстановок
	ТаблицаУчастников = ПолучитьПустуюТаблицуУчастников();
	ДобавитьУчастниковИзШаблонаВТаблицу(ТаблицаУчастников, Форма);
	ФормаДокументаДобавитьУчастников(Форма, ТаблицаУчастников);
	
КонецПроцедуры

// Возвращает признак автоматического заполнения состава участников рабочей группы
// Параметры:
// Объект - ссылка или объект справочника ДокументыПредприятия
// 
Функция ПоОбъектуВедетсяАвтоматическоеЗаполнениеРабочейГруппы(Объект) Экспорт
	
	Результат = Ложь;
	
	ТипОбъекта = ТипЗнч(Объект);
	
	Если ТипОбъекта = Тип("СправочникОбъект.ДокументыПредприятия") Тогда
		Результат =  Не Объект.ЗапретитьАвтоматическоеРасширениеДоступа;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		АвторасширениеЗапрещено = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект,
			"ЗапретитьАвтоматическоеРасширениеДоступа");
		Результат = АвторасширениеЗапрещено = Ложь;
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.Проекты") Тогда
		Результат = Не Объект.ЭтоГруппа;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Проекты") Тогда
		ЭтоГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ЭтоГруппа");
		Результат =  Не ЭтоГруппа;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Мероприятия") Тогда
		Результат =  Истина;
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.Мероприятия") Тогда
		Результат =  Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает настройку ОбязательноеЗаполнениеРабочихГруппДокументов
//
Функция ОбязательноеЗаполнениеРабочихГруппДокументов(ВидДокумента) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыПроектов") Тогда
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВидыПроектов") Тогда
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// При необходимости добавляет в рабочую группу документа ТекущегоПользователя
// Только для новых документов
//
Процедура ОбеспечитьУсловиеОбязательногоЗаполненияРабочейГруппы(Форма)
	
	Объект = Форма.Объект;
	Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.Мероприятия") Тогда
		Если Не ОбязательноеЗаполнениеРабочихГруппДокументов(Объект.ВидМероприятия) Тогда
			Возврат;
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоМероприятие(Объект.Ссылка) 
			И МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(Объект.ИсточникДанных) Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.Проекты") Тогда
		Если Не ОбязательноеЗаполнениеРабочихГруппДокументов(Объект.ВидПроекта) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Если Не ОбязательноеЗаполнениеРабочихГруппДокументов(Объект.ВидДокумента) Тогда
			Возврат;
			
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоДокумент(Объект.Ссылка) 
			И МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(Объект.ИсточникДанных) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.РабочаяГруппаТаблица.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Участник = Сотрудники.ОсновнойСотрудник();
	РабочаяГруппаТаблицаСтрока = Форма.РабочаяГруппаТаблица.Добавить();
	РабочаяГруппаТаблицаСтрока.Участник = Участник;
	РабочаяГруппаТаблицаСтрока.Изменение = Истина;
	УстановитьРеквизитыУсловногоОформления(РабочаяГруппаТаблицаСтрока);
	Форма.КоличествоУчастниковРабочейГруппы = Форма.РабочаяГруппаТаблица.Количество();
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

// Возвращает пустую таблицу участников рабочей группы
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Получить пустую таблицу участников:
// * Участник - ОпределяемыйТип.КонтейнерыСотрудников - участник рабочей группы или контейнер участников
// * Изменение - Булево - право на изменение объекта рабочей группы
// * Источник - ЛюбаяСсылка - источник участника (не используется)
// * Автоподстановка - СправочникСсылка.АвтоподстановкиДляОбъектов - автоподстановка, из которой получен участник (не используется) 
Функция ПолучитьПустуюТаблицуУчастников() Экспорт
	
	Возврат РегистрыСведений.РабочиеГруппы.СоздатьНаборЗаписей().ВыгрузитьКолонки(
		"Участник, Изменение, Источник, Автоподстановка");
	
КонецФункции

// Проверяет права текущего пользователя и добавляемых участников.
//
// Параметры: см. параметры процедуры ПерезаписатьРабочуюГруппуОбъекта().
//
Процедура ПроверитьПраваПередЗаписьюРабочейГруппы(СсылкаИлиДокументОбъект, Участники, АвторИзменений, ЕстьНовыеУчастники) Экспорт
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СсылкаИлиДокументОбъект) = Тип("СправочникОбъект.ДокументыПредприятия") Тогда
		Ссылка = СсылкаИлиДокументОбъект.Ссылка;
	Иначе
		Ссылка = СсылкаИлиДокументОбъект;
	КонецЕсли;
	
	ТипСсылки = ТипЗнч(Ссылка);
	ТипыОбъектовИспользующихДескрипторы =
		ДокументооборотПраваДоступаПовтИсп.ТипыСсылокИспользующихДоступПоДескрипторам();
	
	Если ТипыОбъектовИспользующихДескрипторы.Найти(ТипСсылки) = Неопределено
		Или ТипСсылки = Тип("СправочникСсылка.ТемыОбсуждений") Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьПраваАвтораПередЗаписьюРабочейГруппы(Ссылка, Участники, АвторИзменений);
	Если ЕстьНовыеУчастники Тогда
		ТекстОшибки = ПроверитьПраваУчастниковРабочейГруппыНаОбъект(СсылкаИлиДокументОбъект, Участники);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет прав автора изменений РГ на изменение объекта.
// 
Процедура ПроверитьПраваАвтораПередЗаписьюРабочейГруппы(Ссылка, Участники, АвторИзменений)
	
	Если ТипЗнч(АвторИзменений) <> Тип("СправочникСсылка.Пользователи") Тогда
		Возврат;
	КонецЕсли;

	ПраваАвтора = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(Ссылка, АвторИзменений);
	Если Не ПраваАвтора.Изменение Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Пользователь %1 не имеет права на изменение объекта.
				|Изменение рабочей группы запрещено.'"),
			АвторИзменений);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет права участников рабочей группы на группы доступа контрагентов, грифы доступа и организации
// 
// Параметры:
//  СсылкаИлиДокументОбъект - ЛюбаяСсылка, СправочникОбъект.ДокументыПредприятия - любая ссылка, которая может хранится в измерении Объект РС РабочиеГруппы.
//  Участники - ТаблицаЗначений - (ТаблицаЗначений):
// * Недействителен - Булево -
// * Участник - СправочникСсылка - контейнер сотрудников
// * Изменение - Булево - право изменения
// 
// Возвращаемое значение:
//  Неопределено, Строка - Проверить права участников рабочей группы на объект
Функция ПроверитьПраваУчастниковРабочейГруппыНаОбъект(СсылкаИлиДокументОбъект, Участники) Экспорт
	
	Если ПараметрыСеанса.ЗагрузкаОбработанныхДанныхИзДругойСистемы Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(СсылкаИлиДокументОбъект) = Тип("СправочникОбъект.ДокументыПредприятия") Тогда
		Ссылка = СсылкаИлиДокументОбъект.Ссылка;
		Представление = СсылкаИлиДокументОбъект.Заголовок;
	Иначе
		Ссылка = СсылкаИлиДокументОбъект;
		Представление = Строка(Ссылка);
	КонецЕсли;
	
	
	// Проверка на то, что рабочая группа не выходит за рамки настроек групп доступа контрагентов.
	ГДК = Новый Массив();
	Если ТипЗнч(СсылкаИлиДокументОбъект) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		
		ЗапросГДК = Новый Запрос(
			"ВЫБРАТЬ
			|	ГруппыДоступаКонтрагентов.Ссылка КАК ГруппаДоступа
			|ИЗ
			|	Справочник.ГруппыДоступаКонтрагентов КАК ГруппыДоступаКонтрагентов
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|	Справочник.Контрагенты КАК КонтрагентыСпр
			|		ПО КонтрагентыСпр.ГруппаДоступа = ГруппыДоступаКонтрагентов.Ссылка
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.ДокументыПредприятия.Контрагенты КАК ДокументыТЧКонтрагенты
			|		ПО ДокументыТЧКонтрагенты.Контрагент = КонтрагентыСпр.Ссылка
			|ГДЕ
			|	ДокументыТЧКонтрагенты.Ссылка = &Ссылка");
		ЗапросГДК.УстановитьПараметр("Ссылка", Ссылка);
		ГДК = ЗапросГДК.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
		
	ИначеЕсли ТипЗнч(СсылкаИлиДокументОбъект) = Тип("СправочникОбъект.ДокументыПредприятия") Тогда
		
		Контрагенты = СсылкаИлиДокументОбъект.Контрагенты.ВыгрузитьКолонку("Контрагент");
		ГДКСоответствие = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Контрагенты, "ГруппаДоступа");
		Для Каждого КлючИЗначение Из ГДКСоответствие Цикл
			Если ЗначениеЗаполнено(КлючИЗначение.Значение.ГруппаДоступа) Тогда
				ГДК.Добавить(КлючИЗначение.Значение.ГруппаДоступа);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ГДК.Количество() > 0 Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СотрудникиУчастников.Контейнер КАК Участник,
			|	СотрудникиУчастников.Сотрудник КАК Сотрудник,
			|	ДоступТЧ.Ссылка КАК ГруппаДоступа
			|ИЗ
			|	РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиУчастников
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступаКонтрагентов.Доступ КАК ДоступТЧ
			|		ПО ДоступТЧ.Ссылка В (&ГруппыДоступа)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваПоДескрипторамДоступаОбъектов КАК ПраваПоДескрипторам
			|			ПО ДескрипторыДляОбъектов.Дескриптор = ПраваПоДескрипторам.Дескриптор
			|		ПО ДоступТЧ.Ссылка = ДескрипторыДляОбъектов.Объект
			|		И ПраваПоДескрипторам.Сотрудник = СотрудникиУчастников.Сотрудник
			|ГДЕ
			|	СотрудникиУчастников.Контейнер В (&УчастникиРГ)
			|	И СотрудникиУчастников.Сотрудник.Действует
			|	И ДескрипторыДляОбъектов.Объект ЕСТЬ NULL");
		Запрос.УстановитьПараметр("УчастникиРГ", Участники.ВыгрузитьКолонку("Участник"));
		Запрос.УстановитьПараметр("ГруппыДоступа", ГДК);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ТекстОшибки = "";
			Если ТипЗнч(Выборка.Участник) = Тип("СправочникСсылка.Сотрудники") Тогда
				ТекстОшибки = СтрШаблон( 
					НСтр("ru = 'Нарушение настроек групп доступа контрагентов:
						|сотрудник %1 не имеет разрешения на группу ""%2"".
						|Объект: %3.'"),
					Выборка.Участник, Выборка.ГруппаДоступа, Представление);
			Иначе
				ТекстОшибки = СтрШаблон( 
					НСтр("ru = 'Нарушение настроек групп доступа контрагентов:
						|не все сотрудники ""%1"" имеют разрешение на группу ""%2"".
						|Пример: %3.
						|Объект: %4.'"),
					Выборка.Участник, Выборка.ГруппаДоступа, Выборка.Сотрудник, Представление);
			КонецЕсли;

			Возврат ТекстОшибки;
			
		КонецЕсли;
	КонецЕсли;


	// Проверка на то, что рабочая группа не выходит за рамки настроек грифов доступа.
	Если Ссылка.Метаданные().Реквизиты.Найти("ГрифДоступа") <> Неопределено Тогда
		
		Если ТипЗнч(СсылкаИлиДокументОбъект) = Тип("СправочникОбъект.ДокументыПредприятия") Тогда
			ГрифДоступа = СсылкаИлиДокументОбъект.ГрифДоступа;
		Иначе
			ГрифДоступа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ГрифДоступа");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ГрифДоступа) Тогда
			Запрос = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	СотрудникиУчастников.Контейнер КАК Участник,
				|	СотрудникиУчастников.Сотрудник КАК Сотрудник,
				|	ДоступТЧ.Ссылка КАК ГрифДоступа
				|ИЗ
				|	РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиУчастников
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГрифыДоступа.Доступ КАК ДоступТЧ
				|		ПО ДоступТЧ.Ссылка = &ГрифДоступа
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваПоДескрипторамДоступаОбъектов КАК ПраваПоДескрипторам
				|			ПО ДескрипторыДляОбъектов.Дескриптор = ПраваПоДескрипторам.Дескриптор
				|		ПО ДоступТЧ.Ссылка = ДескрипторыДляОбъектов.Объект
				|		И ПраваПоДескрипторам.Сотрудник = СотрудникиУчастников.Сотрудник
				|ГДЕ
				|	СотрудникиУчастников.Контейнер В (&УчастникиРГ)
				|	И СотрудникиУчастников.Сотрудник.Действует
				|	И ДескрипторыДляОбъектов.Объект ЕСТЬ NULL");
			Запрос.УстановитьПараметр("УчастникиРГ", Участники.ВыгрузитьКолонку("Участник"));
			Запрос.УстановитьПараметр("ГрифДоступа", ГрифДоступа);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ТекстОшибки = "";
				Если ТипЗнч(Выборка.Участник) = Тип("СправочникСсылка.Сотрудники") Тогда
					ТекстОшибки = СтрШаблон( 
						НСтр("ru = 'Нарушение настроек грифа доступа:
							|сотрудник %1 не имеет разрешения на гриф ""%2"".
							|Объект: %3.'"),
						Выборка.Участник, Выборка.ГрифДоступа, Представление);
				Иначе
					ТекстОшибки = СтрШаблон( 
						НСтр("ru = 'Нарушение настроек грифа доступа:
							|не все сотрудники ""%1"" имеют разрешение на гриф ""%2"".
							|Пример: %3.
							|Объект: %4.'"),
						Выборка.Участник, Выборка.ГрифДоступа, Выборка.Сотрудник, Представление);
				КонецЕсли;
				
				Возврат ТекстОшибки;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	
	// Проверка на то, что рабочая группа не выходит за рамки настроек доступа организаций
	Если Ссылка.Метаданные().Реквизиты.Найти("Организация") <> Неопределено Тогда
		
		Если ТипЗнч(СсылкаИлиДокументОбъект) = Тип("СправочникОбъект.ДокументыПредприятия") Тогда
			Организация = СсылкаИлиДокументОбъект.Организация;
		Иначе
			Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Организация");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Организация) Тогда
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	СотрудникиУчастников.Контейнер КАК Участник,
				|	СотрудникиУчастников.Сотрудник КАК Сотрудник,
				|	ДоступТЧ.Ссылка КАК Организация,
				|	ДескрипторыДляОбъектов.Дескриптор КАК Дескриптор
				|ПОМЕСТИТЬ ОрганизацииИДескрипторы
				|ИЗ
				|	РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиУчастников
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации.Доступ КАК ДоступТЧ
				|		ПО (ДоступТЧ.Ссылка = &Организация)
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
				|		ПО (ДоступТЧ.Ссылка = ДескрипторыДляОбъектов.Объект)
				|ГДЕ
				|	СотрудникиУчастников.Контейнер В(&УчастникиРГ)
				|	И СотрудникиУчастников.Сотрудник.Действует
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ОрганизацииИДескрипторы.Организация КАК Организация,
				|	ПраваПоДескрипторамДоступаОбъектов.Сотрудник КАК Сотрудник
				|ПОМЕСТИТЬ ИмеющиеПрава
				|ИЗ
				|	ОрганизацииИДескрипторы КАК ОрганизацииИДескрипторы
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваПоДескрипторамДоступаОбъектов КАК ПраваПоДескрипторамДоступаОбъектов
				|		ПО ОрганизацииИДескрипторы.Дескриптор = ПраваПоДескрипторамДоступаОбъектов.Дескриптор
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ОрганизацииИДескрипторы.Участник КАК Участник,
				|	ОрганизацииИДескрипторы.Сотрудник КАК Сотрудник,
				|	ОрганизацииИДескрипторы.Организация КАК Организация
				|ИЗ
				|	ОрганизацииИДескрипторы КАК ОрганизацииИДескрипторы
				|		ЛЕВОЕ СОЕДИНЕНИЕ ИмеющиеПрава КАК ИмеющиеПрава
				|		ПО ОрганизацииИДескрипторы.Сотрудник = ИмеющиеПрава.Сотрудник
				|ГДЕ
				|	ИмеющиеПрава.Сотрудник ЕСТЬ NULL");
			Запрос.УстановитьПараметр("УчастникиРГ", Участники.ВыгрузитьКолонку("Участник"));
			Запрос.УстановитьПараметр("Организация", Организация);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ТекстОшибки = "";
				Если ТипЗнч(Выборка.Участник) = Тип("СправочникСсылка.Сотрудники") Тогда
					ТекстОшибки = СтрШаблон( 
						НСтр("ru = 'Нарушение настроек доступа организации:
							|сотрудник %1 не имеет разрешения на организацию ""%2"".
							|Объект: %3.'"),
						Выборка.Участник, Выборка.Организация, Представление);
				Иначе
					ТекстОшибки = СтрШаблон( 
						НСтр("ru = 'Нарушение настроек доступа организации:
							|не все сотрудники ""%1"" имеют разрешение на организацию ""%2"".
							|Пример: %3.
							|Объект: %4.'"),
						Выборка.Участник, Выборка.Организация, Выборка.Сотрудник, Представление);
				КонецЕсли;
				
				Возврат ТекстОшибки;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Определяет, для какого объекта следует расширить рабочую группу,
// если переданный предмет указан в предметах процесса.
// Для документов, мероприятий, проектов это будет сам предмет. Для зависимых объектов - владелец.
// 
Функция ОбъектДляАвтоматическогоРасширенияРабочейГруппы(Предмет) Экспорт
	
	Результат = Предмет;
	Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ПроектныеЗадачи")
		Или ТипЗнч(Предмет) = Тип("СправочникСсылка.ПротоколыМероприятий") Тогда
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "Владелец");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Расширяет рабочие группы связанных объектов
Процедура РасширитьРабочуюГруппуСвязанныхОбъектов(Объект, Немедленно = Ложь) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если БизнесПроцессыИЗадачиСервер.ЭтоПроцессИлиШаблонПроцесса(Объект) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Немедленно <> Истина
		И ДокументооборотПраваДоступаПовтИсп.ОтложенноеОбновлениеПравДоступа() Тогда
		РегистрыСведений.ОчередьРасширенияРабочихГрупп.Добавить(
			Объект,, "РасширитьРабочуюГруппуСвязанныхОбъектов");
		Возврат;
	КонецЕсли;
	
	Участники = ПолучитьРабочуюГруппуДокумента(Объект);
	Если Участники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Расширить рабочую группу связанных объектов
	МассивДокументов = СвязиОбъектов.СвязанныеОбъектыДляРасширенияРабочихГрупп(Объект,
		Перечисления.ВариантыСинхронизацииДоступа.Расширять);
	Для Каждого Документ Из МассивДокументов Цикл
		
		ПредставлениеПредмета = Строка(Документ);
		ТипПредмета = ТипЗнч(Документ);
		
		Попытка
			
			ДобавитьУчастниковВРабочуюГруппуОбъекта(Документ, Участники);
				
		Исключение
			
			ОбработатьИсключениеПерезаписиРабочейГруппыПредметаПроцесса(
				ПредставлениеПредмета,
				ТипПредмета,
				ИнформацияОбОшибке());
			
		КонецПопытки;
	КонецЦикла;
	
	// Скопировать рабочую группу в связанные объекты
	МассивДокументов = СвязиОбъектов.СвязанныеОбъектыДляРасширенияРабочихГрупп(Объект,
		Перечисления.ВариантыСинхронизацииДоступа.Копировать);
	
	Для Каждого Документ Из МассивДокументов Цикл
		ПредставлениеПредмета = Строка(Документ);
		ТипПредмета = ТипЗнч(Документ);
		Попытка
			ПерезаписатьРабочуюГруппуОбъекта(Документ, Участники, Истина);
		Исключение
			ОбработатьИсключениеПерезаписиРабочейГруппыПредметаПроцесса(
				ПредставлениеПредмета,
				ТипПредмета,
				ИнформацияОбОшибке());
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьДоступностьРедактированияСпискаДоступа(Форма) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФормы = Форма.ИмяФормы;
	
	ВидОбъекта = Неопределено;
	
	Если ДелопроизводствоКлиентСервер.ЭтоФормаДокумента(ИмяФормы) Тогда
		ВидОбъекта = Форма.Объект.ВидДокумента;
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоФормаМероприятия(ИмяФормы) Тогда
		ВидОбъекта = Форма.Объект.ВидМероприятия;
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоФормаПроекта(ИмяФормы) Тогда
		ВидОбъекта = Форма.Объект.ВидПроекта;
	КонецЕсли;
	
	Если ДелопроизводствоКлиентСервер.ЭтоФормаВидаДокумента(ИмяФормы)
		Или ДелопроизводствоКлиентСервер.ЭтоФормаШаблонаДокумента(ИмяФормы) Тогда
		// Редактировать можно, если можно редактировать сам вид документа/шаблон.
	ИначеЕсли ЗначениеЗаполнено(ВидОбъекта) Тогда
		Форма.Элементы.РабочаяГруппаТаблица.ТолькоПросмотр = 
			Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидОбъекта, "РазрешитьРучноеИзменениеСписковДоступа");
	Иначе
		Форма.Элементы.РабочаяГруппаТаблица.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Форма.Элементы.ПодобратьУчастниковРабочейГруппы.Доступность =
		НЕ Форма.Элементы.РабочаяГруппаТаблица.ТолькоПросмотр;
	
КонецПроцедуры

#КонецОбласти

#Область ПодпискиНаСобытияИРегламентныеЗадания

/////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ПОДПИСОК НА СОБЫТИЯ

// Обработчик подписки РабочиеГруппыДокументыПередЗаписью
//
Процедура ДокументыПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПоОбъектуВедетсяАвтоматическоеЗаполнениеРабочейГруппы(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПроверяемыеРеквизиты = Новый Массив;
	ПроверяемыеРеквизиты.Добавить("Создал");
	ПроверяемыеРеквизиты.Добавить("Ответственный");
	ПроверяемыеРеквизиты.Добавить("Проект");
	
	ПредыдущиеЗначенияРеквизитов = Новый Структура;
	Для Каждого ИмяРеквизита Из ПроверяемыеРеквизиты Цикл
		Если ЗначениеЗаполнено(Источник[ИмяРеквизита]) Тогда
			ПредыдущиеЗначенияРеквизитов.Вставить(ИмяРеквизита, Неопределено);
		КонецЕсли;
	КонецЦикла;
	
	Если ПредыдущиеЗначенияРеквизитов.Количество() > 0 Тогда
		
		ДобавляемыеУчастникиРГ = Новый Соответствие;
		
		Если Не Источник.ЭтоНовый() И ПредыдущиеЗначенияРеквизитов.Количество() > 0 Тогда
			ПредыдущиеЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка,
				ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(ПредыдущиеЗначенияРеквизитов));
		КонецЕсли;
		Для Каждого КлючИЗначение Из ПредыдущиеЗначенияРеквизитов Цикл
			Если Источник[КлючИЗначение.Ключ] = КлючИЗначение.Значение Тогда
				Продолжить;
			КонецЕсли;
			Если КлючИЗначение.Ключ = "Проект" Тогда
				Проект = Источник[КлючИЗначение.Ключ];
				ДобавляемыеУчастникиРГ.Вставить(
					Справочники.ПроектыКонтейнеры.НайтиСоздатьПроектКонтейнер(
						Проект, Перечисления.СпособВключенияУчастниковПроекта.ТолькоРуководитель), Истина);
				ПраваНаДокументыВсемУчастникам = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					Проект, "ПраваНаДокументыВсемУчастникам");
				Если ПраваНаДокументыВсемУчастникам Тогда
					ДобавляемыеУчастникиРГ.Вставить(
						Справочники.ПроектыКонтейнеры.НайтиСоздатьПроектКонтейнер(
							Проект, Перечисления.СпособВключенияУчастниковПроекта.ВсеУчастники), Ложь);
				КонецЕсли;
			Иначе
				Если КлючИЗначение.Ключ <> "Создал" Или ПредыдущиеЗначенияРеквизитов[КлючИЗначение.Ключ] <> Неопределено Тогда
					ДобавляемыеУчастникиРГ.Вставить(Источник[КлючИЗначение.Ключ], Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Источник.ДополнительныеСвойства.Вставить("ДобавляемыеУчастникиРГ", ДобавляемыеУчастникиРГ);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки РабочиеГруппыДокументыПриЗаписи
//
Процедура ДокументыПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПоОбъектуВедетсяАвтоматическоеЗаполнениеРабочейГруппы(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДобавляемыеУчастникиРГ = Неопределено;
	Если Источник.ДополнительныеСвойства.Свойство("ДобавляемыеУчастникиРГ", ДобавляемыеУчастникиРГ)
		И ДобавляемыеУчастникиРГ.Количество() > 0 Тогда
		
		ТаблицаНабора = ПолучитьРабочуюГруппуДокумента(Источник.Ссылка);
		КолСтрокДоДобавления = ТаблицаНабора.Количество();
		Для Каждого КлючИЗначение Из ДобавляемыеУчастникиРГ Цикл
			ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, КлючИЗначение.Ключ, КлючИЗначение.Значение,
				Источник.Ссылка);
		КонецЦикла;
		
		Если ТаблицаНабора.Количество() > КолСтрокДоДобавления Тогда
			ПерезаписатьРабочуюГруппуОбъекта(Источник.Ссылка, ТаблицаНабора, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки РабочиеГруппыДействияПередЗаписью
//
Процедура ДействияПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СтарыеУчастники = Новый Массив;
	РезультатЗапроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "Участники.Участник");
	Если РезультатЗапроса <> Неопределено Тогда
		СтарыеУчастники = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку(0);
	КонецЕсли;
	Источник.ДополнительныеСвойства.Вставить("СтарыеУчастники", СтарыеУчастники);
	
КонецПроцедуры

// Обработчик подписки РабочиеГруппыДействияПриЗаписи
//
Процедура ДействияПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(Источник.ИсточникДанных) Тогда
		Возврат;
	КонецЕсли;	
	
	Если Не ПоОбъектуВедетсяАвтоматическоеЗаполнениеРабочейГруппы(Источник.Предмет) Тогда
		Возврат;
	КонецЕсли;
	
	Состояние = РегистрыСведений.СостоянияДействий.СостояниеДействия(Источник.Ссылка);
	Если Состояние = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	УчастникиДляДобавленияВРГ = Новый Массив;
	СтарыеУчастники = Источник.ДополнительныеСвойства.СтарыеУчастники;
	
	ДобавленныеУчастники = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		Источник.Участники.ВыгрузитьКолонку("Участник"), СтарыеУчастники);
	ТипыУчастниковРГ = Метаданные.ОпределяемыеТипы.КонтейнерыСотрудников.Тип;
	Для Каждого Участник Из ДобавленныеУчастники Цикл
		Если ТипыУчастниковРГ.СодержитТип(ТипЗнч(Участник)) Тогда
			УчастникиДляДобавленияВРГ.Добавить(Участник);
		КонецЕсли;
	КонецЦикла;
	
	Если УчастникиДляДобавленияВРГ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПравоИзменения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Источник.ВидДействия, "РазрешитьУчастникамИзменятьПредмет");
	
	ТаблицаНабора = ПолучитьРабочуюГруппуДокумента(Источник.Предмет);
	КолСтрокДоДобавления = ТаблицаНабора.Количество();
	Для Каждого Участник Из УчастникиДляДобавленияВРГ Цикл
		ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Участник, ПравоИзменения, Источник.Ссылка);
	КонецЦикла;
	
	Если ТаблицаНабора.Количество() > КолСтрокДоДобавления Тогда
		ПерезаписатьРабочуюГруппуОбъекта(Источник.Предмет, ТаблицаНабора, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Расширяет рабочую группу предметов, по которым ведется автоматическое заполнение рабочей группы.
// 
// Параметры:
// 	ВсеПредметы - Массив из Произвольный.
// 	ДобавленныеУчастникиРГ - Массив из Произвольный.
// 	ПравоИзменения - Булево.
//
Процедура РасширитьРабочуюГруппуПредметов(ВсеПредметы, ДобавленныеУчастникиРГ, ПравоИзменения,
	Источник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	УчастникиДляДобавленияВРГ = Новый Массив;
	ТипыУчастниковРГ = Метаданные.ОпределяемыеТипы.КонтейнерыСотрудников.Тип;
	Для Каждого Участник Из ДобавленныеУчастникиРГ Цикл
		Если ТипыУчастниковРГ.СодержитТип(ТипЗнч(Участник)) Тогда
			УчастникиДляДобавленияВРГ.Добавить(Участник);
		КонецЕсли;
	КонецЦикла;
	
	Если УчастникиДляДобавленияВРГ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Предмет Из ВсеПредметы Цикл
		
		Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ПротоколыМероприятий") Тогда
			Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "Владелец");
		ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Файлы") Тогда
			ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "ВладелецФайла");
			Если ТипЗнч(ВладелецФайла) <> Тип("СправочникСсылка.ПапкиФайлов") Тогда
				Предмет = ВладелецФайла;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПоОбъектуВедетсяАвтоматическоеЗаполнениеРабочейГруппы(Предмет) Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаНабора = ПолучитьРабочуюГруппуДокумента(Предмет);
		КолСтрокДоДобавления = ТаблицаНабора.Количество();
		Для Каждого Участник Из УчастникиДляДобавленияВРГ Цикл
			ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Участник, ПравоИзменения, Источник.Ссылка);
		КонецЦикла;
		
		Если ТаблицаНабора.Количество() > КолСтрокДоДобавления Тогда
			ПерезаписатьРабочуюГруппуОбъекта(Предмет, ТаблицаНабора, Истина);
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры

// Обработчик подписки РабочиеГруппыБизнесПроцессыПередЗаписью
//
Процедура РабочиеГруппыБизнесПроцессыПередЗаписьюПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка
			И Не ОбщегоНазначенияДокументооборотХолдинг.ЭтоЗагрузкаОбъекта(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(Источник.ИсточникДанных) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ВидЗаписи")
		И Источник.ДополнительныеСвойства.ВидЗаписи <>
			"ЗаписьСОбновлением_Предметов_ПредметовЗадач_Проекта_ОбщегоСпискаПроцессов_РабочихГруппПредметов_РабочихГруппПроцессов_ДопРеквизитовПоПредметам" Тогда
		
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтоНовый = Источник.ЭтоНовый();
	Источник.ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый);
	
	СтартПроцесса = Ложь;
	Если Не ЭтоНовый Тогда
		СтартПроцесса = Не ОбщегоНазначенияДокументооборот.
			ЗначениеРеквизитаОбъектаВПривилегированномРежиме(Источник.Ссылка, "Стартован")
			И Источник.Стартован;
	КонецЕсли;
	Источник.ДополнительныеСвойства.Вставить("СтартПроцесса", СтартПроцесса);
	
	Если Не ЭтоНовый Тогда
		ТаблицаУчастников = ПолучитьПустуюТаблицуУчастников();
		ПредыдущиеПредметы = Мультипредметность.ПолучитьПредметыПроцесса(Источник.Ссылка);
		Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") И ЗначениеЗаполнено(Источник.Проект) Тогда
			ПредыдущийПроект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "Проект");
			Если Источник.Проект = ПредыдущийПроект Тогда
				// Формирование списка старых участников рабочей группы 
				ДобавитьУчастниковИзИсточника(ТаблицаУчастников, Источник.Ссылка);
				Источник.ДополнительныеСвойства.Вставить("ПредыдущиеУчастники", ТаблицаУчастников);
			Иначе
				Источник.ДополнительныеСвойства.Вставить("ПредыдущийПроект", ПредыдущийПроект);
			КонецЕсли;
		КонецЕсли;
		
		Если Мультипредметность.ИзмененыПредметыПроцесса(Источник) Тогда
			Источник.ДополнительныеСвойства.Вставить("ПредыдущиеПредметы", ПредыдущиеПредметы);
		Иначе
			// Формирование списка старых участников рабочей группы 
			ДобавитьУчастниковИзИсточника(ТаблицаУчастников, Источник.Ссылка);
			Если Источник.ДополнительныеСвойства.Свойство("ПредыдущиеУчастники") Тогда
				Источник.ДополнительныеСвойства.ПредыдущиеУчастники = ТаблицаУчастников;
			Иначе
				Источник.ДополнительныеСвойства.Вставить("ПредыдущиеУчастники", ТаблицаУчастников);
			КонецЕсли;
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки РабочиеГруппыБизнесПроцессыПриЗаписи
//
Процедура РабочиеГруппыБизнесПроцессыПриЗаписиПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка
			И Не ОбщегоНазначенияДокументооборотХолдинг.ЭтоЗагрузкаОбъекта(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(Источник.ИсточникДанных) Тогда
		Возврат;
	КонецЕсли; 
	
	Если Источник.ДополнительныеСвойства.Свойство("ВидЗаписи")
		И Источник.ДополнительныеСвойства.ВидЗаписи <>
			"ЗаписьСОбновлением_Предметов_ПредметовЗадач_Проекта_ОбщегоСпискаПроцессов_РабочихГруппПредметов_РабочихГруппПроцессов_ДопРеквизитовПоПредметам" Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Источник.Состояние <> Перечисления.СостоянияБизнесПроцессов.Активен Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Источник);
	
	// Для нового бизнес-процесса в рабочую группу добавляем всех участников бизнес-процесса
	Если Источник.ДополнительныеСвойства.ЭтоНовый Тогда
		
		// Обновление прав всех ведущих и главных процессов
		ТаблицаУчастников = ПолучитьПустуюТаблицуУчастников();
		ДобавитьУчастниковИзИсточника(ТаблицаУчастников, Источник.Ссылка);
		ОбновитьРабочиеГруппыРодительскихПроцессов(Источник.Ссылка, ТаблицаУчастников);
		
	ИначеЕсли Источник.ДополнительныеСвойства.СтартПроцесса Тогда
		
		Если Не РаботаСПроцессамиПоДействиямСобытия.ОбработатьРасширениеРабочихГруппПредметовПроцессов(Источник.Ссылка) Тогда
			Для Каждого Предмет Из Предметы Цикл 
				ОбъектДляРасширенияРГ = ОбъектДляАвтоматическогоРасширенияРабочейГруппы(Предмет);
				ПредставлениеПредмета = Строка(ОбъектДляРасширенияРГ);
				ТипПредмета = ТипЗнч(ОбъектДляРасширенияРГ);
				Попытка
					ДобавитьУчастниковВРабочуюГруппуДокументаИзИсточника(
						ОбъектДляРасширенияРГ, Источник.Ссылка);
				Исключение
					ОбработатьИсключениеПерезаписиРабочейГруппыПредметаПроцесса(
						ПредставлениеПредмета,
						ТипПредмета,
						ИнформацияОбОшибке());
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам")
			И ЗначениеЗаполнено(Источник.Проект) Тогда
			ПредставлениеПредмета = Строка(Источник.Проект);
			ТипПредмета = ТипЗнч(Источник.Проект);
			Попытка
				ДобавитьУчастниковВРабочуюГруппуДокументаИзИсточника(Источник.Проект, Источник.Ссылка);
			Исключение
				ОбработатьИсключениеПерезаписиРабочейГруппыПредметаПроцесса(
					ПредставлениеПредмета,
					ТипПредмета,
					ИнформацияОбОшибке());
			КонецПопытки;
		КонецЕсли;
		
	Иначе
		
		ПредыдущиеПредметы = Неопределено;
		Если Источник.ДополнительныеСвойства.Свойство("ПредыдущиеПредметы") Тогда
			ПредыдущиеПредметы = Источник.ДополнительныеСвойства.ПредыдущиеПредметы;
		КонецЕсли;
		
		ПредыдущийПроект = Неопределено;
		Если Источник.ДополнительныеСвойства.Свойство("ПредыдущийПроект") Тогда
			ПредыдущийПроект = Источник.ДополнительныеСвойства.ПредыдущийПроект;
		КонецЕсли;

		// Формирование списка отличий старой рабочей группы от новой.
		ТаблицаУчастников = ПолучитьПустуюТаблицуУчастников();
		ДобавитьУчастниковИзИсточника(ТаблицаУчастников, Источник.Ссылка);
		Если Источник.ДополнительныеСвойства.Свойство("ПредыдущиеУчастники") Тогда
			ПредыдущиеУчастники = Источник.ДополнительныеСвойства.ПредыдущиеУчастники;
			Отбор = Новый Структура("Участник");
			УдаляемыеСтроки = Новый Массив;
			Для каждого ТаблицаУчастниковСтрока Из ТаблицаУчастников Цикл
				ЗаполнитьЗначенияСвойств(Отбор, ТаблицаУчастниковСтрока);
				НайденныеСтроки = ПредыдущиеУчастники.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() > 0 Тогда
					УдаляемыеСтроки.Добавить(ТаблицаУчастниковСтрока);
				КонецЕсли;
			КонецЦикла;
			Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
				ТаблицаУчастников.Удалить(УдаляемаяСтрока);
			КонецЦикла;
		КонецЕсли;
		
		// Заполнение рабочих групп, если у процесса изменился предмет или проект
					
		// Если предмет изменился, в рабочую группу добавляем всех участников бизнес-процесса.
		Если Предметы.Количество() > 0 И ПредыдущиеПредметы <> Неопределено Тогда
			Для Каждого Предмет Из Предметы Цикл 
				ОбъектДляРасширенияРГ = ОбъектДляАвтоматическогоРасширенияРабочейГруппы(Предмет);
				ПредставлениеПредмета = Строка(ОбъектДляРасширенияРГ);
				ТипПредмета = ТипЗнч(ОбъектДляРасширенияРГ);
				Попытка
					ДобавитьУчастниковВРабочуюГруппуДокументаИзИсточника(
						ОбъектДляРасширенияРГ, Источник.Ссылка);
				Исключение
					ОбработатьИсключениеПерезаписиРабочейГруппыПредметаПроцесса(
						ПредставлениеПредмета,
						ТипПредмета,
						ИнформацияОбОшибке());
				КонецПопытки;
			КонецЦикла;
		Иначе // предмет не изменился
			Для Каждого Предмет Из Предметы Цикл 
				ОбъектДляРасширенияРГ = ОбъектДляАвтоматическогоРасширенияРабочейГруппы(Предмет);
				Если Не ПоОбъектуВедетсяАвтоматическоеЗаполнениеРабочейГруппы(ОбъектДляРасширенияРГ) Тогда
					Продолжить;
				КонецЕсли;
				ПредставлениеПредмета = Строка(ОбъектДляРасширенияРГ);
				ТипПредмета = ТипЗнч(ОбъектДляРасширенияРГ);
				Попытка
					ДобавитьУчастниковВРабочуюГруппуДокументаИзИсточника(
						ОбъектДляРасширенияРГ, ТаблицаУчастников);
				Исключение
					ОбработатьИсключениеПерезаписиРабочейГруппыПредметаПроцесса(
						ПредставлениеПредмета,
						ТипПредмета,
						ИнформацияОбОшибке());
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
		
		// Если проект изменился, в рабочую группу добавляем всех участников бизнес-процесса.
		Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") И ЗначениеЗаполнено(Источник.Проект) Тогда
			ПредставлениеПредмета = Строка(Источник.Проект);
			ТипПредмета = ТипЗнч(Источник.Проект);
			Попытка
				Если ПредыдущийПроект <> Источник.Проект Тогда
					ДобавитьУчастниковВРабочуюГруппуДокументаИзИсточника(Источник.Проект, Источник.Ссылка);
				Иначе // проект не изменился
					ДобавитьУчастниковВРабочуюГруппуОбъекта(Источник.Проект, ТаблицаУчастников);
				КонецЕсли;
			Исключение
				ОбработатьИсключениеПерезаписиРабочейГруппыПредметаПроцесса(
					ПредставлениеПредмета,
					ТипПредмета,
					ИнформацияОбОшибке());
			КонецПопытки;
		КонецЕсли;
		
		// Обновление прав всех ведущих и главных процессов
		ОбновитьРабочиеГруппыРодительскихПроцессов(Источник.Ссылка, ТаблицаУчастников);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обновление рабочих групп всех родительских процессов
Процедура ОбновитьРабочиеГруппыРодительскихПроцессов(Процесс, ТаблицаУчастников) Экспорт
	
	Если Не ЗначениеЗаполнено(Процесс)
		Или Не ЗначениеЗаполнено(ТаблицаУчастников) Тогда
		Возврат;
	КонецЕсли;
	
	// Обновление ведущего процесса
	ВедущаяЗадача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Процесс, "ВедущаяЗадача");
	
	Если ЗначениеЗаполнено(ВедущаяЗадача) Тогда
		
		РодительскийПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедущаяЗадача, "БизнесПроцесс");
		Если ЗначениеЗаполнено(РодительскийПроцесс) Тогда
			УстановитьПривилегированныйРежим(Истина);
			
			ТаблицаНабора = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(РодительскийПроцесс);
			ТаблицаНабора.Индексы.Добавить("Участник");
			
			СтруктураПоиска = Новый Структура("Участник");
			ЕстьДобавленныеСтроки = Ложь;
			
			Для Каждого УчастникиСтрока Из ТаблицаУчастников Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, УчастникиСтрока);
				НайденныеСтроки = ТаблицаНабора.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() = 0 Тогда
					ЕстьДобавленныеСтроки = Истина;
					ЗаполнитьЗначенияСвойств(ТаблицаНабора.Добавить(), УчастникиСтрока);
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьДобавленныеСтроки Тогда
				
				ПерезаписатьРабочуюГруппуОбъекта(
					РодительскийПроцесс, 
					ТаблицаНабора, 
					Ложь); // Обновить права
					
				// Рекурсивный вызов	
				ОбновитьРабочиеГруппыРодительскихПроцессов(РодительскийПроцесс, ТаблицаУчастников);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	// Обновление главного процесса
	Если ЗначениеЗаполнено(Процесс.ГлавнаяЗадача) Тогда
		РодительскийПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Процесс.ГлавнаяЗадача, "БизнесПроцесс");
		Если ЗначениеЗаполнено(РодительскийПроцесс) Тогда
			УстановитьПривилегированныйРежим(Истина);
			
			ТаблицаНабора = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(РодительскийПроцесс);
			ТаблицаНабора.Индексы.Добавить("Участник");
			
			СтруктураПоиска = Новый Структура("Участник");
			ЕстьДобавленныеСтроки = Ложь;
			
			Для каждого УчастникиСтрока Из ТаблицаУчастников Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, УчастникиСтрока);
				НайденныеСтроки = ТаблицаНабора.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() = 0 Тогда
					ЕстьДобавленныеСтроки = Истина;
					ЗаполнитьЗначенияСвойств(ТаблицаНабора.Добавить(), УчастникиСтрока);
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьДобавленныеСтроки Тогда
				
				ПерезаписатьРабочуюГруппуОбъекта(
					РодительскийПроцесс, 
					ТаблицаНабора, 
					Ложь); // Обновить права
				
				// Рекурсивный вызов
				ОбновитьРабочиеГруппыРодительскихПроцессов(РодительскийПроцесс, ТаблицаУчастников);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Выполняется регл. заданием ОбработкаОчередиРасширенияРабочихГрупп.
// 
Процедура ОбработкаОчередиРасширенияРабочихГрупп() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбработкаОчередиРасширенияРабочихГрупп);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Количество = РегистрыСведений.ОчередьРасширенияРабочихГрупп.ОбработатьПорцию(Ложь);
	Пока Количество <> 0 Цикл
		Количество = РегистрыСведений.ОчередьРасширенияРабочихГрупп.ОбработатьПорцию(Ложь);
	КонецЦикла;
	
КонецПроцедуры

// Выполняется регл. заданием ОбработкаОчередиРасширенияРабочихГрупп.
// 
Процедура ОбработкаОчередиРасширенияРабочихГруппОперативная() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбработкаОчередиРасширенияРабочихГруппОперативная);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Количество = РегистрыСведений.ОчередьРасширенияРабочихГрупп.ОбработатьПорцию(Истина);
	Пока Количество <> 0 Цикл
		Количество = РегистрыСведений.ОчередьРасширенияРабочихГрупп.ОбработатьПорцию(Истина);
	КонецЦикла;
	
КонецПроцедуры

// Выполняется одноименным регламентным заданием. Перезаполняет все автозаполняемые рабочие группы
Процедура ОбновлениеАвтозаполняемыхРабочихГрупп() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбновлениеАвтозаполняемыхРабочихГрупп);
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"Обновление автозаполняемых рабочих групп");
	
	ИмяДляЖР = НСтр("ru = 'Обновление автозаполняемых рабочих групп'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Ссылка,
	|	АлгоритмАвтозаполнения
	|ИЗ
	|	Справочник.РабочиеГруппы
	|Где
	|	Автозаполнение
	|	И Не Недействительна
	|	И Не ПометкаУдаления";
	
	РабочиеГруппы = Запрос.Выполнить().Выгрузить();
	
	Для Каждого РабочаяГруппа Из РабочиеГруппы Цикл
		
		КоличествоДанных = 0;
		Результат = УчастникиРабочейГруппыПоАлгоритму(РабочаяГруппа.АлгоритмАвтозаполнения);
			
		Если ЗначениеЗаполнено(Результат.Ошибка) Тогда
			
			ОбщегоНазначенияДокументооборот.УведомитьОтветственныхОПроблеме(
				НСтр("ru = 'Ошибка при выполнении алгоритма автозаполнения рабочей группы'"),
				Результат.Ошибка,
				ИмяДляЖР,
				Метаданные.Справочники.РабочиеГруппы,
				РабочаяГруппа.Ссылка);
			
			Продолжить;
			
		КонецЕсли;

		РГОбъект = РабочаяГруппа.Ссылка.ПолучитьОбъект();

		Если ОбщегоНазначения.ДанныеСовпадают(РГОбъект.Состав.Выгрузить().ВыгрузитьКолонку("Участник"),
			Результат.Участники) Тогда
			
			ЗаписьЖурналаРегистрации(ИмяДляЖР,
				УровеньЖурналаРегистрации.Информация,
				Метаданные.Справочники.РабочиеГруппы,
				РабочаяГруппа.Ссылка,
				НСтр("ru = 'Состав автозаполняемой рабочей группы совпадает с результатом выполнения скрипта автозаполнения. Обновление не требуется.'"));
				
		Иначе
			
			НачатьТранзакцию();
			Попытка
				РГОбъект.Состав.Очистить();
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(РГОбъект.Состав,
					Результат.Участники,
					"Участник");
				РГОбъект.Записать();
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
			
			ЗаписьЖурналаРегистрации(ИмяДляЖР,
				УровеньЖурналаРегистрации.Информация,
				Метаданные.Справочники.РабочиеГруппы,
				РабочаяГруппа.Ссылка,
				НСтр("ru = 'Состав автозаполняемой рабочей группы обновлен по алгоритму автозаполнения.'"));
			
			КоличествоДанных = 1;
			
		КонецЕсли;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(ОписаниеЗамера,
			КоличествоДанных,
			"Обновлена рабочая группа",
			Строка(РабочаяГруппа.Ссылка));
		
	КонецЦикла;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, РабочиеГруппы.Количество());
	
КонецПроцедуры

// При начале выполнения действия расширяет рабочую группу предмета его участниками
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия
Процедура ОтметитьНачалоВыполненияДействия(Действие, Параметры) Экспорт
	
	Участник = Параметры.Участник;
	ТипыУчастниковРГ = Метаданные.ОпределяемыеТипы.КонтейнерыСотрудников.Тип;
	Если Не ТипыУчастниковРГ.СодержитТип(ТипЗнч(Участник)) Тогда
		Возврат;
	КонецЕсли;
	
	Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет");
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РабочиеГруппы");
	ЭлементБлокировки.УстановитьЗначение("Объект", Предмет);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
		
	// Если в РГ не хватает участника, добавим его
	ПравоИзменения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Действие, "ВидДействия.РазрешитьУчастникамИзменятьПредмет");
	
	ТаблицаУчастниковРГ = РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников();
	ЗаполнитьЗначенияСвойств(ТаблицаУчастниковРГ.Добавить(),
		Новый Структура("Участник, Изменение", Участник, ПравоИзменения));
	
	// Права замещающих и помощников на приложения.
	Замещения = ЗамещающиеИПомощники.ПодходящиеЗамещенияПоДействиюИИсполнителю(Действие, Участник);
	Для Каждого СтрЗамещения Из Замещения Цикл
		Стр = ТаблицаУчастниковРГ.Добавить();
		Стр.Участник = СтрЗамещения.Замещающий;
		Стр.Изменение = ПравоИзменения;
	КонецЦикла;

	Если Не ДействияКлиентСервер.ЭтоДействиеОзнакомления(Действие) Тогда
		// Действия ознакомления самостоятельно пишут своих участников в РГ предмета
		ДобавитьУчастниковВРабочуюГруппуОбъекта(Предмет, ТаблицаУчастниковРГ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АвтозаполняемыеРабочиеГруппы

// Возвращает участников рабочей группы по алгоритму
// 
// Параметры:
//  Алгоритм - СправочникСсылка.Алгоритмы -
// 
// Возвращаемое значение:
//  Структура - Участники рабочей группы по алгоритму:
// * Участники - Массив из СправочникСсылка.Сотрудники
// * Ошибка - Строка - Описание ошибки при попытке выполнить алгоритм и получить участников.
//		Пустая строка, если ошибок не было
//
Функция УчастникиРабочейГруппыПоАлгоритму(Алгоритм) Экспорт
	
	Результат = Новый Структура("Участники, Ошибка", Новый Массив, "");
	
	Если Не ЗначениеЗаполнено(Алгоритм) Тогда
		Результат.Ошибка = НСтр(
			"ru = 'Ошибка при заполнении рабочей группы по алгоритму: алгоритм не заполнен.'");
		Возврат Результат;
	КонецЕсли;
	
	ТекстОшибки = "";
	КлючДляВызова = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Алгоритм,	"КлючДляВызова");
	
	Попытка
		Участники = Справочники.Алгоритмы.Вызвать(КлючДляВызова);
	Исключение
		ТекстОшибки = НСтр(
			"ru = 'Ошибка при заполнении рабочей группы по алгоритму: попытка выполнить алгоритм привела к исключению. Убедитесь, что алгоритм не использует никаких параметров для выполнения.
			|%1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ОписаниеОшибки());
		Результат.Ошибка = ТекстОшибки;
		
		ЗаписьЖурналаРегистрации(НСтр(
			"ru = 'Ошибка при заполнении рабочей группы по алгоритму: попытка выполнить алгоритм привела к исключению.'"),
			УровеньЖурналаРегистрации.Информация,
			Метаданные.Справочники.Алгоритмы,
			Алгоритм,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат Результат;
	КонецПопытки;
	
	Если ТипЗнч(Участники) <> Тип("Массив") Тогда
		ТекстОшибки = НСтр(
			"ru = 'Ошибка при заполнении рабочей группы по алгоритму: алгоритм вернул не массив.'");
	ИначеЕсли Участники.Количество() = 0 Тогда
		ТекстОшибки = НСтр(
			"ru = 'Ошибка при заполнении рабочей группы по алгоритму: алгоритм вернул пустой массив.'");
	Иначе
		Для Каждого Участник Из Участники Цикл
			Если ТипЗнч(Участник) <> Тип("СправочникСсылка.Сотрудники") Тогда
				ТекстОшибки = НСтр(
					"ru = 'Ошибка при заполнении рабочей группы по алгоритму: в массиве участников должны быть только ссылки на справочник ""Сотрудники"".'");
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Участники = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Участники);
	
	Результат.Участники = Участники;
	Результат.Ошибка = ТекстОшибки;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция - константа.
// 
// Возвращаемое значение:
//  Строка -
Функция Текст_ДоступенВсем() Экспорт
	
	Возврат НСтр("ru = 'Доступен всем'");
	
КонецФункции

#КонецОбласти


