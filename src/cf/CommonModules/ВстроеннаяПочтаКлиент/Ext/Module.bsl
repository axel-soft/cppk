////////////////////////////////////////////////////////////////////////////////
// Встроенная почта (клиент)
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Открывает вложенный файл электронного письма
//
// Параметры
// - Ссылка (СправочникСсылка.Файлы)
//
Процедура ОткрытьВложение(Ссылка, УникальныйИдентификаторФормы, 
	УпрощенныйРежимРаботыСФайлами = Ложь,
	ПредыдущийАдресФайла = Неопределено) Экспорт
	
	Если Не УпрощенныйРежимРаботыСФайлами Тогда
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
			Ссылка,
			Неопределено, // Версия
			УникальныйИдентификаторФормы,
			,
			ПредыдущийАдресФайла);
		КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
		
	Иначе
		
		ПоказыватьОповещения = Ложь;
		КомандыРаботыСФайламиКлиент.Редактировать(Ссылка, , , ПоказыватьОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

// Откроет форму приглашения или запись календаря
// 
// Параметры:
//  Письмо - ссылка на письмо
//  ФайлСсылка - ссылка на файл.
//  УникальныйИдентификатор - УникальныйИдентификатор формы
//
Процедура ОткрытьПриглашение(Письмо, ФайлСсылка, УникальныйИдентификатор) Экспорт
	
	ОткрыватьПриглашенияВнутриДО = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПерсональнуюНастройку("ОткрыватьПриглашенияВнутриДО");
	
	Если ОткрыватьПриглашенияВнутриДО = Истина Тогда
	
		ЗаписьКалендаря = РаботаСРабочимКалендаремСервер.НайтиЗаписьКалендаря(ФайлСсылка, Письмо, 
			СотрудникиКлиент.ВсеСотрудникиТекущегоПользователя());
		Если ЗначениеЗаполнено(ЗаписьКалендаря) Тогда
			ПоказатьЗначение(,ЗаписьКалендаря);
			Возврат;
		КонецЕсли;	
		
		ПараметрыФормы = Новый Структура("ФайлСсылка", ФайлСсылка);
		ОткрытьФорму("ЖурналДокументов.ЭлектроннаяПочта.Форма.ПросмотрПриглашений", ПараметрыФормы);
	
	Иначе
		
		ОткрытьВложение(ФайлСсылка, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры	

// Копирует ссылку в буфер обмена.
// Если не удалось скопировать ссылку, то выдает предупреждение пользователю.
//
// Параметры:
//  ДокументHTML - ПолеФормы - ПолеHTMLДокумента, из которого следует копировать ссылку.
//
Процедура КопироватьСсылку(ПолеHTMLДокумента) Экспорт
	
	#Если ВебКлиент Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось скопировать ссылку. В веб-клиенте данная возможность не поддерживается.'"));
		Возврат;
	#КонецЕсли

	Если ПолеHTMLДокумента.Вид <> ВидПоляФормы.ПолеHTMLДокумента Тогда
		Текст = НСтр("ru = 'Не удалось скопировать ссылку.'");
		ПоказатьПредупреждение(, Текст);
		Возврат;
	КонецЕсли;
	
	ДокументHTML = ПолеHTMLДокумента.Документ;
	
	АктивныйЭлемент = ДокументHTML.activeElement;
	Если НРег(АктивныйЭлемент.nodeName) <> "a" Тогда
		Текст = НСтр("ru = 'Не удалось скопировать ссылку: не выбрана ссылка.'");
		ПоказатьПредупреждение(, Текст);
		Возврат;
	КонецЕсли;
	
	Ссылка = АктивныйЭлемент.href;
	Ссылка = РаботаС_HTML.УдалитьСхемуДокументооборота(Ссылка);
	
	ВременныйЭлемент = ДокументHTML.createElement("textarea");
	ВременныйЭлемент.value = Ссылка;
	ДокументHTML.body.appendChild(ВременныйЭлемент);
	ВременныйЭлемент.select();
	ДокументHTML.execCommand("copy");
	ДокументHTML.body.removeChild(ВременныйЭлемент);
	
КонецПроцедуры

// Открывает ссылку в теле письма.
//
Процедура ОткрытьСсылку(Href, Element, ТекущееПисьмо = Неопределено, HTMLДокумент = Неопределено) Экспорт
	
	ВыбраннаяСсылка = Неопределено;
	
	Если Href <> Неопределено Тогда
		// Если у данных события заполнено свойство Href - будем считать что переход будет по этой ссылке.
		ВыбраннаяСсылка = Href;
	Иначе
		Попытка
			// Если у элемента события заполнено свойство Href и элемент AREA - будем считать что переход будет по этой ссылке.
			Если ВРег(Element.tagName) = "AREA" Тогда
				ВыбраннаяСсылка = Element.Href;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	// null - для обхода нажатия на ссылку с пустом href в WebKit
	Если ПустаяСтрока(ВыбраннаяСсылка) Или ВыбраннаяСсылка = "null" Тогда
		Возврат;
	КонецЕсли;
	
	Если РаботаС_HTMLКлиент.ПерейтиПоВстроеннойСсылке(HTMLДокумент, ВыбраннаяСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	СхемаСсылки = ВстроеннаяПочтаКлиентСервер.СхемаСсылки(ВыбраннаяСсылка);
	
	Если СхемаСсылки = "v8doc:" Тогда
		
		ОбработатьСсылку1СДокументооборота(ВыбраннаяСсылка, ТекущееПисьмо, HTMLДокумент);
		
	ИначеЕсли СхемаСсылки = "e1c://" Тогда
		
		Если Не ПерейтиПоВнутреннейНавигационнойСсылке(ВыбраннаяСсылка) Тогда
			ПерейтиПоВнешнейНавигационнойСсылке(ВыбраннаяСсылка, Element);
		КонецЕсли;
		
	ИначеЕсли СхемаСсылки = "file://" Тогда
		
		РасширениеПодключено = ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено();
		Если РасширениеПодключено Тогда
			ЗапуститьПриложение(ВыбраннаяСсылка);
		Иначе
			ПерейтиПоВнешнейНавигационнойСсылке(ВыбраннаяСсылка, Element);
		КонецЕсли;
		
	ИначеЕсли (СхемаСсылки = "http://" И Найти(ВыбраннаяСсылка, "e1cib") > 0)
		ИЛИ (СхемаСсылки = "https://" И Найти(ВыбраннаяСсылка, "e1cib") > 0) Тогда
		
		Если Не ПерейтиПоВнутреннейНавигационнойСсылке(ВыбраннаяСсылка) Тогда
			ПерейтиПоВнешнейНавигационнойСсылке(ВыбраннаяСсылка, Element);
		КонецЕсли;
		
	ИначеЕсли СхемаСсылки = "mailto:" Тогда
		
		СоздатьПисьмоНаОснованииСсылкиMailto(ВыбраннаяСсылка);
		
	Иначе
		
		ПерейтиПоВнешнейНавигационнойСсылке(ВыбраннаяСсылка, Element);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует ссылку
Функция СформироватьСсылку(
	Ссылка = "",
	ТипСсылки = "",
	ТипТекста = Неопределено,
	Представление = "") Экспорт
	
	Если ТипТекста = Неопределено Тогда
		ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML")
	КонецЕсли;
	
	СформированнаяСсылка = "";
	
	СформированнаяСсылка = СформированнаяСсылка + Ссылка;
	
	Если Не ПустаяСтрока(Ссылка) Тогда
		
		Если ТипТекста = ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML") Тогда
			
			Если ПустаяСтрока(Представление) Тогда
				Представление = СформированнаяСсылка;
			КонецЕсли;
			
			СформированнаяСсылка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a href=""%1%2"">%3</a>", 
				ТипСсылки,
				СформированнаяСсылка,
				Представление);
			
		Иначе
			
			СформированнаяСсылка = ТипСсылки + СформированнаяСсылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СформированнаяСсылка;
	
КонецФункции

// Обработка команды "Написать". Открывает форму нового исходящего письма.
//
Процедура СоздатьПисьмо() Экспорт
	
	ОткрытьФорму(
		"Документ.ИсходящееПисьмо.ФормаОбъекта",,,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

// Создает письмо при выполнени действия из состояния Чат-бота.
//
// Параметры:
//  Тема - Строка - тема письма.
//  ТекстПисьма - Строка - Текст письма.
//  Адресаты - СписокЗначений - содержит список структур адресатов. См. ВстроеннаяПочтаСервер.ПолучитьАдресЭлектроннойПочты
//
Процедура СоздатьПисьмоИзДействияЧатБота(Тема, Текст, Адресаты) Экспорт 
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Тема", Тема);
	ПараметрыФормы.Вставить("ТекстПисьма", Текст);
	ПараметрыФормы.Вставить("СписокПочтовыхАдресов", Адресаты);
	ПараметрыФормы.Вставить("ЗаполнитьИзЧатБота", Истина);
	
	ОткрытьФорму("Документ.ИсходящееПисьмо.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

// Обработка команды "Создать на основании - Письмо".
//
Процедура СоздатьПисьмоНаОсновании(Ссылка) Экспорт
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Ссылка) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"СоздатьПисьмоНаОснованииПроверитьНаличиеЗанятыхФайлов",
			ЭтотОбъект);

		ПроверитьНаличиеЗанятыхФайлов(Ссылка, ОписаниеОповещения);
		
		Возврат;
		
	КонецЕсли;	
	
	СоздатьПисьмоНаОснованииПродолжение(Ссылка);
	
КонецПроцедуры

Процедура СоздатьПисьмоНаОснованииПроверитьНаличиеЗанятыхФайлов(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьПисьмоНаОснованииПродолжение(Параметры.Ссылка);

КонецПроцедуры

Функция ПроверитьНаличиеЗанятыхФайлов(Объект, ОписаниеОповещенияИсходное) Экспорт
	
	ТекущийПользователь = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ТекущийПользователь;
	
	ПараметрыОбработчикаОповещения = Новый Структура;
	ПараметрыОбработчикаОповещения.Вставить("ОписаниеОповещения", ОписаниеОповещенияИсходное);
	ПараметрыОбработчикаОповещения.Вставить("Ссылка", Объект);    
	ПараметрыОбработчикаОповещения.Вставить("КоличествоЗанятыхФайлов", 0);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВопросОВыполненииПриЗанятыхФайлах", 
		ЭтотОбъект,
		ПараметрыОбработчикаОповещения);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СообщениеВопрос", НСтр("ru = 'Создать письмо?'"));
	ПараметрыФормы.Вставить("СообщениеЗаголовок", НСтр("ru = 'Некоторые файлы документа заняты для редактирования:'"));
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Создание письма'"));
	ПараметрыФормы.Вставить("ТекстКнопкиЗакончитьИЗакрыть", НСтр("ru = 'Закончить редактирование и создать'"));
	ПараметрыФормы.Вставить("ТекстКнопкиЗакрыть", НСтр("ru = 'Создать'"));
	ПараметрыФормы.Вставить("ВладелецФайла", Объект);

	ФиксированныйМассивВсеСотрудникиТекущегоПользователя =
		СотрудникиКлиент.ВсеСотрудникиТекущегоПользователя();
	МассивВсеСотрудникиТекущегоПользователя = Новый Массив(
		ФиксированныйМассивВсеСотрудникиТекущегоПользователя);
	СотрудникиТекущегоПользователя = Новый СписокЗначений();
	СотрудникиТекущегоПользователя.ЗагрузитьЗначения(МассивВсеСотрудникиТекущегоПользователя);
	ПараметрыФормы.Вставить("СотрудникиТекущегоПользователя", СотрудникиТекущегоПользователя);

	ТекущийПользователь = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ТекущийПользователь;
	ПараметрыФормы.Вставить("ТекущийПользователь", ТекущийПользователь);
	
	РаботаСФайламиКлиент.ОткрытьДиалогСписокЗанятыхФайлов(ПараметрыФормы, ОписаниеОповещения);
	
	ПараметрыОбработчикаОповещения.Вставить("КоличествоЗанятыхФайлов", ПараметрыФормы.КоличествоЗанятыхФайлов);
	
	Если ПараметрыФормы.КоличествоЗанятыхФайлов = 0 Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
		
КонецФункции

Процедура ВопросОВыполненииПриЗанятыхФайлах(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		ВыполнитьОбработкуОповещения(Параметры.ОписаниеОповещения, Результат);
		Возврат;
	КонецЕсли;
	
	СоздатьПисьмоНаОснованииПродолжение(Параметры.Ссылка);
	
КонецПроцедуры

// Обработка команды "Создать на основании - Письмо".
//
Процедура СоздатьПисьмоНаОснованииПродолжение(Ссылка) Экспорт
	
	ПараметрыФормы = Новый Структура("Основание", Ссылка);
	ОткрытьФорму(
		"Документ.ИсходящееПисьмо.ФормаОбъекта",
		ПараметрыФормы,,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

// Обработка команды "Создать на основании - Письмо" для Пользователя.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - которому пишется письмо
//
Процедура СоздатьПисьмоНаОснованииПользователя(Пользователь) Экспорт
	
	СписокПочтовыхАдресов = Новый СписокЗначений;
	Адресат = ВстроеннаяПочтаСервер.ПолучитьАдресЭлектроннойПочты(Пользователь);
	
	Если ЗначениеЗаполнено(Адресат) Тогда
		СписокПочтовыхАдресов.Добавить(Адресат);
	КонецЕсли;
	
	Если СписокПочтовыхАдресов.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Для отправки письма необходимо ввести адрес электронной почты'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("СписокПочтовыхАдресов", СписокПочтовыхАдресов);
	ОткрытьФорму("Документ.ИсходящееПисьмо.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

// Обработка команды "Создать на основании - Письмо" для массива Пользователя.
//
// Параметры:
//  Получатели - Массив
//   * Пользователь - СправочникСсылка.Пользователи - которому пишется письмо
//
Процедура СоздатьПисьмоНаОснованииПользователей(МассивПользователи) Экспорт
	
	СписокПочтовыхАдресов = Новый СписокЗначений;
	
	СотрудникиПолучатели = СотрудникиВызовСервера.ЛюбыеСотрудникиПользователей(МассивПользователи);
	
	Для Каждого Сотрудник Из СотрудникиПолучатели Цикл
		
		Адресат = ВстроеннаяПочтаСервер.ПолучитьАдресЭлектроннойПочты(Сотрудник);
	
		Если ЗначениеЗаполнено(Адресат) Тогда
			СписокПочтовыхАдресов.Добавить(Адресат);
		КонецЕсли;
		
	КонецЦикла;	
	
	Если СписокПочтовыхАдресов.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Для отправки письма необходимо ввести адрес электронной почты'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("СписокПочтовыхАдресов", СписокПочтовыхАдресов);
	ОткрытьФорму("Документ.ИсходящееПисьмо.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

// Обработка команды "Создать на основании - Письмо" для массива Пользователя.
//
// Параметры:
//  Получатели - Массив
//   * Сотрудник - СправочникСсылка.Сотрудники - которому пишется письмо
//
Процедура СоздатьПисьмоНаОснованииСотрудников(Получатели) Экспорт
	
	СписокПочтовыхАдресов = Новый СписокЗначений;
	
	Для Каждого Сотрудник Из Получатели Цикл
		
		Адресат = ВстроеннаяПочтаСервер.ПолучитьАдресЭлектроннойПочты(Сотрудник);
	
		Если ЗначениеЗаполнено(Адресат) Тогда
			СписокПочтовыхАдресов.Добавить(Адресат);
		КонецЕсли;
		
	КонецЦикла;	
	
	Если СписокПочтовыхАдресов.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Для отправки письма необходимо ввести адрес электронной почты'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("СписокПочтовыхАдресов", СписокПочтовыхАдресов);
	ОткрытьФорму("Документ.ИсходящееПисьмо.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

// Обработка команды "Создать на основании - Письмо".
//
Процедура СоздатьПисьмоНаОснованииФайлов(Файлы) Экспорт
	
	ПараметрыФормы = Новый Структура("Файлы", Файлы);
	ОткрытьФорму(
		"Документ.ИсходящееПисьмо.ФормаОбъекта",
		ПараметрыФормы,,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

// Обработка создания письма при клике на ссылку mailto
Процедура СоздатьПисьмоНаОснованииСсылкиMailto(СсылкаMailto) Экспорт
	
	ПараметрыФормы = Новый Структура("СсылкаMailto", СсылкаMailto);
	ОткрытьФорму(
		"Документ.ИсходящееПисьмо.ФормаОбъекта",
		ПараметрыФормы,,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

// Обработка команды "Переслать". Открывает форму нового исходящего письма.
// Заполняет необходимые реквизиты.
//
Процедура ПереслатьПисьмо(Письмо) Экспорт
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Команда", "Переслать");
	ЗначенияЗаполнения.Вставить("Письмо", Письмо);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму(
		"Документ.ИсходящееПисьмо.ФормаОбъекта",
		ПараметрыОткрытия,,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

// Обработка команды "Ответить". Открывает форму нового исходящего письма.
// Заполняет необходимые реквизиты.
//
Процедура ОтветитьНаПисьмо(Письмо) Экспорт
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Команда", "Ответить");
	ЗначенияЗаполнения.Вставить("Письмо", Письмо);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму(
		"Документ.ИсходящееПисьмо.ФормаОбъекта",
		ПараметрыОткрытия,,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

// Обработка команды "Ответить всем". Открывает форму нового исходящего письма.
// Заполняет необходимые реквизиты.
//
Процедура ОтветитьВсемНаПисьмо(Письмо) Экспорт
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Команда", "ОтветитьВсем");
	ЗначенияЗаполнения.Вставить("Письмо", Письмо);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму(
		"Документ.ИсходящееПисьмо.ФормаОбъекта",
		ПараметрыОткрытия,,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

// Обработка команды "Переслать предыдущему". Открывает форму нового исходящего письма.
// Заполняет необходимые реквизиты.
//
Функция ПереслатьПредыдущему(Письмо) Экспорт
	
	ПараметрыОбработчика = Новый Структура("Письмо", Письмо);
	
	АдресатыВТекстеПисьма = ВстроеннаяПочтаСервер.НайтиАдресатовВТекстеПисьма(Письмо);
	Если АдресатыВТекстеПисьма.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'В тексте письма не найдено ни одного предыдущего отправителя'"));
		Возврат Ложь;
	ИначеЕсли АдресатыВТекстеПисьма.Количество() = 1 Тогда 
		ВыбранныйЭлемент = АдресатыВТекстеПисьма[0];
	Иначе
		
		ПоследнийЭлемент = АдресатыВТекстеПисьма[АдресатыВТекстеПисьма.Количество() - 1];
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПереслатьПредыдущемуПродолжение",
			ЭтотОбъект,
			ПараметрыОбработчика);
		
		АдресатыВТекстеПисьма.ПоказатьВыборЭлемента(ОписаниеОповещения, 
			НСтр("ru = 'Выберите получателя'"), ПоследнийЭлемент);
		Возврат Истина;
		
	КонецЕсли;	
	
	ПереслатьПредыдущемуПродолжение(ВыбранныйЭлемент, ПараметрыОбработчика);
	
	Возврат Истина;	
	
КонецФункции

Процедура ПереслатьПредыдущемуПродолжение(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Письмо = Параметры.Письмо;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Команда", "Переслать");
	ЗначенияЗаполнения.Вставить("Письмо", Письмо);
	
	ЗначенияЗаполнения.Вставить("ПолучателиПисьма", Новый Массив);
	ЗначенияЗаполнения.ПолучателиПисьма.Добавить(ВыбранныйЭлемент.Значение);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму(
		"Документ.ИсходящееПисьмо.Форма.ФормаДокумента",
		ПараметрыОткрытия,,
		Новый УникальныйИдентификатор);
		
КонецПроцедуры

// Обработка команды "Переслать с копией автору". Открывает форму нового исходящего письма. 
// Заполняет необходимые реквизиты и автора пересылаемого письма заносит в получателей копии.
// 
// Параметры:
//	Письмо - Входящее или Исходящее письмо - ссылка на пересылаемое письмо
//
Процедура ПереслатьПисьмоСКопией(Письмо) Экспорт
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Команда", "ПереслатьСКопией");
	ЗначенияЗаполнения.Вставить("Письмо", Письмо);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.ИсходящееПисьмо.Форма.ФормаДокумента",
		ПараметрыОткрытия,,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

// Обработка команды "ПереслатьКакВложение". Открывает форму нового исходящего письма.
// Заполняет необходимые реквизиты.
//
// Параметры:
// - Письмо - ДокументСсылка.ИсходящееПисьмо, ДокументСсылка.ВходящееПисьмо - пересылаемое письмо
//
Процедура ПереслатьКакВложение(Письмо) Экспорт
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Команда", "ПереслатьКакВложение");
	ЗначенияЗаполнения.Вставить("Письмо", Письмо);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму(
		"Документ.ИсходящееПисьмо.Форма.ФормаДокумента",
		ПараметрыОткрытия,,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

// Обработка команды "Перенаправить". Открывает форму нового исходящего письма.
// Заполняет необходимые реквизиты.
//
Процедура ПеренаправитьПисьмо(Письмо) Экспорт
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Команда", "Перенаправить");
	ЗначенияЗаполнения.Вставить("Письмо", Письмо);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму(
		"Документ.ИсходящееПисьмо.Форма.ФормаДокумента",
		ПараметрыОткрытия,,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

// Открывает форму переписки по письму.
//
Процедура ОткрытьДеревоПереписки(Письмо) Экспорт
	
	ПараметрыФормы = Новый Структура("ТекущееПисьмо", Письмо);
	ОткрытьФорму("ЖурналДокументов.ЭлектроннаяПочта.Форма.ИсторияПереписки", ПараметрыФормы);
	
КонецПроцедуры

// Открывает форму всех получателей письма.
//
Процедура ОткрытьФормуВсехПолучателей(Письмо, ТипАдреса) Экспорт
	
	ПараметрыФормы = Новый Структура("Письмо, ТипАдреса", Письмо, ТипАдреса);
	
	ОткрытьФорму("ЖурналДокументов.ЭлектроннаяПочта.Форма.ВсеАдресатыПисьма", 
		ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Получение данных письма и запись текста письма
Процедура СохранитьТекстПисьма(Письмо, УникальныйИдентификатор) Экспорт
	
	ДанныеПисьма = ВстроеннаяПочтаСервер.ПолучитьДанныеПисьмаДляСохраненияТекста(Письмо, УникальныйИдентификатор);	
	
	ЗаписатьТекстПисьма(ДанныеПисьма, УникальныйИдентификатор);

КонецПроцедуры

// Запись текста письма на диск
Процедура ЗаписатьТекстПисьма(
	ДанныеПисьма, 
	УникальныйИдентификатор, 
	ЗапомнитьНовыйПуть = Истина, 
	УказанныйПутьВыбора = Неопределено, 
	УказанноеИмяФайла = Неопределено, 
	НеСпрашиватьВариантСохранения = Ложь) Экспорт
	
	Расширение = ДанныеПисьма.Расширение;

	РасширениеПодключено = ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено();
	
	Если РасширениеПодключено Тогда
		ПутьВыбора = ДанныеПисьма.ПутьВыбора;
		
		ВыбранФайл = Ложь;
		Если ЗначениеЗаполнено(УказанныйПутьВыбора) И ЗначениеЗаполнено(УказанноеИмяФайла) Тогда
			ПерезаписатьФайл = Ложь;
			ИмяБезРасширения = УказанноеИмяФайла;
			ИмяСРасширением = ФайловыеФункцииКлиент.ПолучитьИмяСРасширением(ИмяБезРасширения, Расширение);
			ИмяСРасширением = 
				ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяСРасширением, "_");
			ВыбранФайл = Истина;
			ВыбранныйПутьВыбора = УказанныйПутьВыбора;
			ВыбранноеПолноеИмяФайла = УказанныйПутьВыбора + ИмяСРасширением;
		Иначе
			ПерезаписатьФайл = Истина;
			ИмяБезРасширения = ДанныеПисьма.Тема; 
			ИмяСРасширением = ФайловыеФункцииКлиент.ПолучитьИмяСРасширением(ИмяБезРасширения, Расширение);
			ИмяСРасширением = 
				ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяСРасширением, "_");
			ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			ВыборФайла.МножественныйВыбор = Ложь;
			ВыборФайла.ПолноеИмяФайла = ИмяСРасширением;
			Фильтр = НСтр("ru = 'Простой текст (*.txt)|*.txt|Веб-страница (*.html)|*.html'");
			Если Расширение = "txt" Тогда
				ВыборФайла.ИндексФильтра = 0;
			ИначеЕсли Расширение = "html" Тогда
				ВыборФайла.ИндексФильтра = 1;
			КонецЕсли;
			ВыборФайла.Фильтр = Фильтр;
			ВыборФайла.Каталог = ПутьВыбора;
			
			Если ВыборФайла.Выбрать() Тогда
				ВыбранФайл = Истина;
				ВыбранноеПолноеИмяФайла = ВыборФайла.ПолноеИмяФайла;
				ВыбранныйПутьВыбора = ВыборФайла.Каталог;				
			КонецЕсли;
		КонецЕсли;
				
		Если ВыбранФайл Тогда
			
			ТекстПояснения =
			НСтр("ru = 'Выполняется сохранение текста письма.
				|Пожалуйста, подождите...'");
			Состояние(ТекстПояснения);
			
			АдресФайла = ДанныеПисьма.АдресФайла;
			ВыбранныйПутьВыбора = ФайловыеФункцииКлиент.НормализоватьКаталог(ВыбранныйПутьВыбора);
			
			ВыбранноеИмяБезРасширения = ИмяБезРасширения;
			
			Файл = Новый Файл(ВыбранноеПолноеИмяФайла);
			Если Файл.Существует() Тогда
				Если ПерезаписатьФайл Тогда
					Файл.УстановитьТолькоЧтение(Ложь);
					УдалитьФайлы(ВыбранноеПолноеИмяФайла);
				Иначе
					
					Счетчик = 1;
					Пока Файл.Существует() Цикл
						ВыбранноеИмяБезРасширения = ИмяБезРасширения + " (" + Строка(Счетчик) + ")";
						ИмяФайла = ФайловыеФункцииКлиентСервер.ПолучитьИмяСРасширением(ВыбранноеИмяБезРасширения, Расширение);
						ВыбранноеПолноеИмяФайла = ВыбранныйПутьВыбора + ИмяФайла;
						Файл = Новый Файл(ВыбранноеПолноеИмяФайла);
						Счетчик = Счетчик + 1;
					КонецЦикла;
					
				КонецЕсли;
			КонецЕсли;
			
			ПередаваемыеФайлы = Новый Массив;
			Описание = Новый ОписаниеПередаваемогоФайла(ВыбранноеПолноеИмяФайла, АдресФайла);
			ПередаваемыеФайлы.Добавить(Описание);
			
			ПутьКФайлу = Файл.Путь;
			ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
				ПутьКФайлу, ОбщегоНазначенияКлиент.ТипПлатформыКлиента());
			
			ТекстПисьмаСохранен = Ложь;
			#Если ВебКлиент Тогда
				Если ПолучитьФайлы(ПередаваемыеФайлы,, ПутьКФайлу, Ложь) Тогда
					НовыйФайл = Новый Файл(ВыбранноеПолноеИмяФайла);
					ТекстПисьмаСохранен = Истина;
				КонецЕсли;
			#Иначе
				Если Расширение = "html" Тогда
					// Разбираем HTML
					ЧтениеHTML = Новый ЧтениеHTML;
					ЧтениеHTML.УстановитьСтроку(ДанныеПисьма.ТекстПисьма);
					ПостроительDOM = Новый ПостроительDOM;
					ДокументDOM = ПостроительDOM.Прочитать(ЧтениеHTML);
					КоличествоКартинок = ДокументDOM.ПолучитьЭлементыПоИмени("img").Количество();
					Если КоличествоКартинок > 0 Тогда
						// Создаем отдельный каталог для картинок
						КаталогСФайлами = ВыбранноеИмяБезРасширения + "_files" + ПолучитьРазделительПутиКлиента();
						ПутьККаталогуСФайлами = ВыбранныйПутьВыбора + КаталогСФайлами;
						СоздатьКаталог(ПутьККаталогуСФайлами);
						// Сохраняем картинки в отдельный каталог
						Для Индекс = 0 По КоличествоКартинок - 1 Цикл
							SrcАтрибут = ДокументDOM.ПолучитьЭлементыПоИмени("img").Элемент(Индекс).ПолучитьАтрибут("src");
							Если ЗначениеЗаполнено(SrcАтрибут) И Найти(SrcАтрибут, "base64,") > 0 Тогда
								Base64Строка = Сред(SrcАтрибут, Найти(SrcАтрибут, "base64,") + СтрДлина("base64,"));
								РасширениеФайла = Сред(
									SrcАтрибут,
									Найти(SrcАтрибут, "data:image/") + СтрДлина("data:image/"),
									Найти(SrcАтрибут, ";") - СтрДлина("data:image/") - 1);
								Попытка
									ИмяФайла = Строка(Индекс) + "." + РасширениеФайла;
									Картинка = Новый Картинка(Base64Значение(Base64Строка));
									Картинка.Записать(ПутьККаталогуСФайлами + ИмяФайла);
									ДокументDOM.ПолучитьЭлементыПоИмени("img").Элемент(Индекс).УстановитьАтрибут(
										"src", КаталогСФайлами + ИмяФайла);
								Исключение
									// Пропускаем тэги, которые не получилось обработать.
								КонецПопытки;
							ИначеЕсли ЗначениеЗаполнено(SrcАтрибут) И Найти(SrcАтрибут, "e1c://") > 0 Тогда 
								Попытка
									РасширениеФайла = ДокументDOM.ПолучитьЭлементыПоИмени("img").Элемент(Индекс).ПолучитьАтрибут("data-ext");
									ИмяФайла = Строка(Индекс) + "." + РасширениеФайла;
									Если ПолучитьФайл(SrcАтрибут, ПутьККаталогуСФайлами + ИмяФайла, Ложь) Тогда
										ДокументDOM.ПолучитьЭлементыПоИмени("img").Элемент(Индекс).УстановитьАтрибут(
											"src", КаталогСФайлами + ИмяФайла);
									КонецЕсли;
								Исключение
									// Пропускаем тэги, которые не получилось обработать.
								КонецПопытки;
							КонецЕсли;
						КонецЦикла;
						// Бъем ссылки "v8doc:"
						КоличествоСсылок = ДокументDOM.ПолучитьЭлементыПоИмени("a").Количество();
						Для Индекс = 0 По КоличествоСсылок - 1 Цикл
							HrefАтрибут = ДокументDOM.ПолучитьЭлементыПоИмени("a").Элемент(Индекс).ПолучитьАтрибут("href");
							Если ЗначениеЗаполнено(HrefАтрибут) И Найти(HrefАтрибут, "v8doc:") > 0 Тогда
								ДокументDOM.ПолучитьЭлементыПоИмени("a").Элемент(Индекс).УстановитьАтрибут("href", "#");
							КонецЕсли;
						КонецЦикла;
						// Формируем новый HTML
						ЗаписьDOM = Новый ЗаписьDOM; 
						ЗаписьHTML = Новый ЗаписьHTML; 
						ЗаписьHTML.УстановитьСтроку(); 
						ЗаписьDOM.Записать(ДокументDOM, ЗаписьHTML); 
						ДанныеПисьма.ТекстПисьма = ЗаписьHTML.Закрыть();
					КонецЕсли;
				КонецЕсли;
				
				Текст = Новый ЗаписьТекста(ВыбранноеПолноеИмяФайла, ДанныеПисьма.Кодировка);
				Текст.Записать(ДанныеПисьма.ТекстПисьма);
				Текст.Закрыть();
				ТекстПисьмаСохранен = Истина;
			#КонецЕсли
			
			Состояние(НСтр("ru = 'Текст письма успешно сохранен в файл'"), , ВыбранноеПолноеИмяФайла);
			Если ЗапомнитьНовыйПуть И ТекстПисьмаСохранен Тогда
				ПутьВыбораПрежний = ПутьВыбора;
				ПутьВыбора = ВыбранныйПутьВыбора;
				ПутьВыбора = ФайловыеФункцииКлиент.НормализоватьКаталог(ПутьВыбора);
				Если ПутьВыбораПрежний <> ПутьВыбора Тогда
					ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПапкаДляСохраненияПисем", ПутьВыбора);
				КонецЕсли;	
			КонецЕсли;
							
		КонецЕсли;
	Иначе 
		АдресФайла = ДанныеПисьма.АдресФайла;
		
		Если ЗначениеЗаполнено(УказанныйПутьВыбора) И ЗначениеЗаполнено(УказанноеИмяФайла) Тогда
			ИмяСРасширением = ФайловыеФункцииКлиент.ПолучитьИмяСРасширением(УказанноеИмяФайла, Расширение);
			ИмяСРасширением = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяСРасширением, "_");
		Иначе
			ИмяСРасширением = ФайловыеФункцииКлиент.ПолучитьИмяСРасширением(ДанныеПисьма.Тема, Расширение);
		КонецЕсли;
		
		ТекстПояснения =
		НСтр("ru = 'Выполняется сохранение текста письма.
			|Пожалуйста, подождите...'");
		Состояние(ТекстПояснения);
		
		ПолучитьФайл(АдресФайла, ИмяСРасширением, Истина);
	КонецЕсли;

КонецПроцедуры

// Функция предназначена для сохранения списка файлов, с запоминанием
// папки для сохранения вложений писем. При повторном сохранении вложений писем
// открывается выбранная в прошлый раз папка для выбора.
Функция СохранитьВложенияКак(СписокФайлов, УникальныйИдентификатор) Экспорт
	
	ДанныеСохраняемыхФайлов = ВстроеннаяПочтаСервер.ПолучитьДанныеФайловДляСохраненияФайлов(СписокФайлов, УникальныйИдентификатор);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СохранитьЗавершение",
		ЭтотОбъект);
	
	РаботаСФайламиКлиент.СохранитьФайлы(ОписаниеОповещения, ДанныеСохраняемыхФайлов, УникальныйИдентификатор, "ПапкаДляСохраненияПисем");
	
КонецФункции

// продолжение СохранитьВложенияКак
Процедура СохранитьЗавершение(КодВозврата, Параметры) Экспорт 
	
	ТекстПояснения = НСтр("ru = 'Сохранение файлов завершено.'");
	Состояние(ТекстПояснения);
	
КонецПроцедуры

// Функция обирает данные файлов, оставляя в данных сохраняемых файлов только
// файлы, указанные в списке файлов.
Функция ОтобратьДанныеФайловДляСохранения(ДанныеСохраняемыхФайлов, СписокФайлов, ПутьВыбора = Неопределено) Экспорт
	
	СписокДанныхФайлов = Новый СписокЗначений();
	ОбщийРазмер = 0;
	
	Для Каждого СтрокаФайл Из ДанныеСохраняемыхФайлов.СписокДанныхФайлов Цикл
		
		ДанныеФайла = СтрокаФайл.Значение;
		
		Если ЗначениеЗаполнено(ДанныеФайла.Ссылка) Тогда
			
			МассивНайденныхФайлов = СписокФайлов.НайтиСтроки(Новый Структура("Ссылка", ДанныеФайла.Ссылка)); 
			
			Если МассивНайденныхФайлов.Количество() > 0 Тогда
				
				ФайлВСписке = МассивНайденныхФайлов[0];
				
				Наименование = ФайлВСписке.ИмяФайлаДляСохранения;
				Расширение = ФайловыеФункцииКлиентСервер.ПолучитьРасширениеИмениФайла(Наименование);
				Если ЗначениеЗаполнено(Расширение) Тогда
					Наименование = Лев(Наименование, СтрДлина(Наименование) - СтрДлина(Расширение) - 1);
				КонецЕсли;
				
				ДанныеФайла.ПолноеНаименованиеВерсии = Наименование; 
				ДанныеФайла.Расширение = Расширение;
				СписокДанныхФайлов.Добавить(ДанныеФайла);
				ОбщийРазмер = ОбщийРазмер + ДанныеФайла.Размер;
				
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(ДанныеФайла.НавигационнаяСсылкаТекущейВерсии) Тогда
			
			МассивНайденныхФайлов = СписокФайлов.НайтиСтроки(Новый Структура("Адрес", ДанныеФайла.НавигационнаяСсылкаТекущейВерсии)); 
			
			Если МассивНайденныхФайлов.Количество() > 0 Тогда
				
				ФайлВСписке = МассивНайденныхФайлов[0];
				
				Наименование = ФайлВСписке.ИмяФайлаДляСохранения;
				Расширение = ФайловыеФункцииКлиентСервер.ПолучитьРасширениеИмениФайла(Наименование);
				Если ЗначениеЗаполнено(Расширение) Тогда
					Наименование = Лев(Наименование, СтрДлина(Наименование) - СтрДлина(Расширение) - 1);
				КонецЕсли;
				
				ДанныеФайла.ПолноеНаименованиеВерсии = Наименование; 
				ДанныеФайла.Расширение = Расширение;
				СписокДанныхФайлов.Добавить(ДанныеФайла);
				ОбщийРазмер = ОбщийРазмер + ДанныеФайла.Размер;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоФайлов = СписокФайлов.Количество();
	Если Не ЗначениеЗаполнено(ПутьВыбора) Тогда
		ПутьВыбора = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПапкаДляСохраненияВложенийПочты");
	КонецЕсли;
	
	ДанныеСохраняемыхФайлов = Новый Структура;
	ДанныеСохраняемыхФайлов.Вставить("СписокДанныхФайлов", СписокДанныхФайлов);
	ДанныеСохраняемыхФайлов.Вставить("СписокФайлов", СписокФайлов);
	ДанныеСохраняемыхФайлов.Вставить("ПутьВыбора", ПутьВыбора);
	ДанныеСохраняемыхФайлов.Вставить("КоличествоФайлов", КоличествоФайлов);
	ДанныеСохраняемыхФайлов.Вставить("ОбщийРазмер", ОбщийРазмер);
	
	Возврат ДанныеСохраняемыхФайлов;
	
КонецФункции

// Процедура предназначена для сохранения текста письма и вложений письма в папку.
// Открывает форму сохранения письма.
Процедура СохранитьПисьмо(Письмо, ВключатьПомеченныеНаУдаление = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Письмо) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Письмо", Письмо);
	
	ОткрытьФорму("ЖурналДокументов.ЭлектроннаяПочта.Форма.СохранениеПисьма", СтруктураПараметры);
	
КонецПроцедуры

// Обработка команды "Скопировать" исходящего письма.
//
Процедура СкопироватьПисьмо(Письмо) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначениеКопирования", Письмо);
	
	ОткрытьФорму(
		"Документ.ИсходящееПисьмо.Форма.ФормаДокумента",
		ПараметрыОткрытия,,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

// Процедура предназначена для создания структуру письма.
Функция СформироватьСтруктуруПисьма(Письмо, ТекстПисьма, ФайлыПисьма, Получатели) Экспорт
	
	СтруктураПисьма = Новый Структура;
	СтруктураПисьма.Вставить("ТемаПисьма", Письмо.Тема);
	СтруктураПисьма.Вставить("УчетнаяЗапись", Письмо.УчетнаяЗапись);
	СтруктураПисьма.Вставить("ДатаОтправки", Письмо.ДатаОтправки);
	СтруктураПисьма.Вставить("Кодировка", Письмо.Кодировка);
	СтруктураПисьма.Вставить("ТекстПисьма", ТекстПисьма);
	СтруктураПисьма.Вставить("ФайлыПисьма", ФайлыПисьма);
	СтруктураПисьма.Вставить("Получатели", Получатели);
	
	Возврат СтруктураПисьма;
	
КонецФункции

// Открывает форму настроек почты.
//
Процедура ОткрытьФормуНастроек(ОткрытьЗакладкуПисьмо = Ложь) Экспорт
	
	ПараметрыФормы = Новый Структура("ОткрытьЗакладкуПисьмо", ОткрытьЗакладкуПисьмо);
	ОткрытьФорму("Обработка.НастройкаПочты.Форма.НастройкиВстроеннойПочты", ПараметрыФормы, , , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Возвращает символы -разделители
Функция ПолучитьСимволыРазделители() Экспорт 
	
	СимволыРазделители = " .,;:?!-+*/\%=<>[](){}""'|~@#$^&_";
	СимволыРазделители = СимволыРазделители + Символ(9) + Символ(10) + Символ(13) + Символ(160);
	Возврат СимволыРазделители;
	
КонецФункции	

// Удаляет на диске (на клиенте) автосохраненные файлы
Процедура УдалитьАвтосохраненныеФайлы() Экспорт
	
	Если СтандартныеПодсистемыКлиент.ОтключенаЛогикаНачалаРаботыСистемы() Тогда
		Возврат;
	КонецЕсли;	
	
#Если Не ВебКлиент И Не МобильныйКлиент Тогда
	
	АвтоматическиСохранятьВерсииНеотправленногоПисьма =
		СтандартныеПодсистемыКлиент.ПараметрКлиента(
			"АвтоматическиСохранятьВерсииНеотправленногоПисьма");
	
	Если Не АвтоматическиСохранятьВерсииНеотправленногоПисьма Тогда
		Возврат;
	КонецЕсли;
	
	Каталог = КаталогВременныхФайлов();
	Каталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
		Каталог,
		ОбщегоНазначенияКлиент.ТипПлатформыКлиента());
		
	МаскаПоиска = "v8cln_Автосохранение_*";
	
	Попытка
		
		МассивФайлов = НайтиФайлы(Каталог, МаскаПоиска);
		
		Для Каждого Файл Из МассивФайлов Цикл
			
			ВремяИзменения = Файл.ПолучитьВремяИзменения();
			Если ВремяИзменения > ТекущаяДата() - 12 * 3600 Тогда  // новее чем 12ч назад - не удаляем
				
				Продолжить;
				
			КонецЕсли;	
			
			УдалитьФайлы(Файл.ПолноеИмя);
			
		КонецЦикла;	
		
	Исключение 
		// не выдаем ошибки
	КонецПопытки;

#КонецЕсли
	
КонецПроцедуры

// Включает периодическую проверку поступления новых писем
//
Процедура ВключитьПроверкуПоступленияНовыхПисем() Экспорт
	
	НастройкиОповещений =
		ВстроеннаяПочтаСервер.ПолучитьНастройкиОповещенийОНовыхПисьмах();
		
	Если НастройкиОповещений.ПроверятьНаличиеНовыхПисем 
		И НастройкиОповещений.ИнтервалПроверкиВМинутах <> 0 Тогда
		
		ИнтервалПроверкиПочты = НастройкиОповещений.ИнтервалПроверкиВМинутах * 60;
		ДатаПоследнейПроверкиПочты = ТекущаяДата();
		
	КонецЕсли;
	
КонецПроцедуры

// Отключает периодическую проверку поступления новых писем
//
Процедура ОтключитьПроверкуПоступленияНовыхПисем() Экспорт
	
	ИнтервалПроверкиПочты = Неопределено;
	ДатаПоследнейПроверкиПочты = Неопределено;
	
КонецПроцедуры

// Выполняет поиск автосохраненных писем и открывает форму, если такие письма найдены. 
Процедура ВыполнитьПоискАвтосохраненныхПисем() Экспорт
	
#Если Не ВебКлиент Тогда
	Каталог = КаталогВременныхФайлов();
	Каталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Каталог,
		ОбщегоНазначенияКлиент.ТипПлатформыКлиента());
		
	МаскаПоиска = "v8cln_Автосохранение_Новое_*.*";
	МассивФайлов = НайтиФайлы(Каталог, МаскаПоиска);
	
	Если МассивФайлов.Количество() <> 0 Тогда
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("Документ.ИсходящееПисьмо.Форма.НесохраненныеПисьма", , , , , , , РежимОткрытияОкна);
	КонецЕсли;
#КонецЕсли
	
КонецПроцедуры

// заполняет картинки адресатов в списке выбора
Процедура ЗаполнитьКартинкиВСпискеВыбора(ДанныеВыбора) Экспорт	
	
	Если ТипЗнч(ДанныеВыбора) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого Строка Из ДанныеВыбора Цикл
		
		Если ТипЗнч(Строка.Значение) = Тип("Структура") И Строка.Значение.Свойство("Внешний") Тогда
			
			Если Строка.Значение.Внешний Тогда 
				КартинкаВыбора = БиблиотекаКартинок.ВнешнийАдресат16;
			Иначе
				
				ОписаниеОтсутствия = Неопределено;
				Строка.Значение.Свойство("ОписаниеОтсутствия", ОписаниеОтсутствия);
				Если ОписаниеОтсутствия = Неопределено Тогда
					КартинкаВыбора = БиблиотекаКартинок.ВнутреннийАдресат16;
				Иначе
					КартинкаВыбора = БиблиотекаКартинок.ВнутреннийАдресатОтсутствует16;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Строка.Значение.Свойство("ЭтоГруппа") И Строка.Значение.ЭтоГруппа = Истина Тогда
				КартинкаВыбора = БиблиотекаКартинок.ВзаимодействиеСотрудников;
			КонецЕсли;	
			
			Строка.Картинка = КартинкаВыбора;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры	

// Выполняет отзыв письма
// Письмо - ссылка на отзываемое письмо
Процедура ОтозватьПисьмо(Письмо, Форма = Неопределено) Экспорт 
	
	ТекстВопроса = НСтр("ru = 'Письмо будет отозвано у всех получателей.'");
	ТекстЗаголовка = НСтр("ru = 'Отзыв письма'");
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("Отозвать", НСтр("ru = 'Отозвать'"));
	Кнопки.Добавить("НеОтзывать", НСтр("ru = 'Не отзывать'"));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Письмо", Письмо);
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ТекстЗаголовка", ТекстЗаголовка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжениеОтозватьПисьмо", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , "НеОтзывать", ТекстЗаголовка);
	
КонецПроцедуры

Процедура ПродолжениеОтозватьПисьмо(Результат, Параметры) Экспорт
	
	Если Результат <> "Отозвать" Тогда 
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = "";
	ВстроеннаяПочтаСервер.ОтозватьПисьмо(Параметры.Письмо, ТекстСообщения);
	
	Оповестить("ПисьмаИзмененыНоваяФорма");
	ОповеститьОбИзменении(Параметры.Письмо);
	
	Форма = Параметры.Форма;
	Если ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения") И Форма.ИмяФормы = "Документ.ИсходящееПисьмо.Форма.ФормаДокумента" Тогда 
		ПараметрыПослеОтзыва = Новый Структура;
		ПараметрыПослеОтзыва.Вставить("Форма", Форма);
		
		ПослеОтзыва1 = Новый ОписаниеОповещения("ПослеОтзыва1", ЭтотОбъект, ПараметрыПослеОтзыва);
		ПослеОтзыва2 = Новый ОписаниеОповещения("ПослеОтзыва2", ЭтотОбъект, ПараметрыПослеОтзыва);
	Иначе	
		ПослеОтзыва1 = Неопределено;
		ПослеОтзыва2 = Неопределено;
	КонецЕсли;	
	
	Если Найти(ТекстСообщения, Символы.ПС) = 0 Тогда 
		ПоказатьПредупреждение(ПослеОтзыва1, ТекстСообщения, , Параметры.ТекстЗаголовка);
	Иначе	
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", Параметры.ТекстЗаголовка);
		ПараметрыФормы.Вставить("ТекстСообщения", ТекстСообщения);
	
		ОткрытьФорму("ОбщаяФорма.ФорматированноеСообщение", ПараметрыФормы,,,,,ПослеОтзыва2, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеОтзыва1(ДополнительныеПараметры) Экспорт 
	
	Форма = ДополнительныеПараметры.Форма;
	Форма.ПодключитьОбработчикОжидания("ЗакрытьФорму", 0.2, Истина);
	
КонецПроцедуры	

Процедура ПослеОтзыва2(РезультатЗакрытия, ДополнительныеПараметры) Экспорт 
	
	Форма = ДополнительныеПараметры.Форма;
	Форма.ПодключитьОбработчикОжидания("ЗакрытьФорму", 0.2, Истина);
	
КонецПроцедуры

// Открыть карточку письма
Процедура ОткрытьПисьмо(ВыбранноеПисьмо) Экспорт
	
	ПоказатьЗначение(, ВыбранноеПисьмо);
	
КонецПроцедуры

// Групповая отправка писем

Процедура ОтправитьПисьмаИзСписка(Письма, Форма) Экспорт 
	
	СписокОшибок = Новый СписокЗначений;
	
	ДанныеПисем = ВстроеннаяПочтаСервер.ПолучитьДанныеПисемДляОтправкиИзСписка(Письма);
	Для Каждого ДанныеПисьма Из ДанныеПисем Цикл
		Письмо = ДанныеПисьма.Ссылка;
		
		// Проверка учетной записи
		УчетнаяЗапись = ДанныеПисьма.УчетнаяЗапись;
		Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
			СписокОшибок.Добавить(Письмо, НСтр("ru = 'Не указана учетная запись.'"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
			Если ДанныеПисьма.УчетнаяЗаписьВариантИспользования <> ПредопределенноеЗначение("Перечисление.ВариантыИспользованияПочты.Встроенная") Тогда
				СписокОшибок.Добавить(Письмо, НСтр("ru = 'В учетной записи не установлен признак использования для встроенной почты'"));
			КонецЕсли;
			
			Если ДанныеПисьма.УчетнаяЗаписьПометкаУдаления Тогда
				СписокОшибок.Добавить(Письмо, НСтр("ru = 'Учетная запись помечена на удаление.'"));
			КонецЕсли;
			
			Если Не ДанныеПисьма.УчетнаяЗаписьИспользоватьДляОтправки Тогда
				СписокОшибок.Добавить(Письмо, НСтр("ru = 'В учетной записи снят флаг использования для отправки'"));
			КонецЕсли;
		КонецЕсли;
		
		// Проверка адресатов
		Получатели = ДанныеПисьма.Получатели;
		Если Получатели.Количество() = 0 Тогда
			СписокОшибок.Добавить(Письмо, НСтр("ru = 'Не указано ни одного получателя.'"));
		КонецЕсли;	
		
		АдресЗапрещенныйБезПроекта = "dir@1c.ru";
		СписокУникальныхАдресов = Новый Массив;
		Для каждого Строка Из Получатели Цикл
			Адрес = Строка.Адрес;
			
			Если СписокУникальныхАдресов.Найти(Адрес) <> Неопределено Тогда
				СписокОшибок.Добавить(Письмо, СтрШаблон(НСтр("ru = 'Почтовый адрес ""%1"" указан дважды.'"), Адрес));
			КонецЕсли;	
			СписокУникальныхАдресов.Добавить(Адрес);
			
			Если Не Строка.ЭтоАдресЭлектроннойПочты Тогда
				СписокОшибок.Добавить(Письмо, СтрШаблон(НСтр("ru = 'Указан некорректный почтовый адрес получателя ""%1""'"), Адрес));
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДанныеПисьма.Проект) И НРег(Адрес) = НРег(АдресЗапрещенныйБезПроекта) Тогда 
				СписокОшибок.Добавить(Письмо, 
					СтрШаблон(НСтр("ru = 'Для писем на адрес %1 нужно обязательно указать проект.'"), 
					АдресЗапрещенныйБезПроекта));
			КонецЕсли;
		КонецЦикла;
		
		// Проверка темы
		Если ПустаяСтрока(ДанныеПисьма.Тема) Тогда
			Если ДанныеПисьма.ТипОтвета <> ПредопределенноеЗначение("Перечисление.ТипыОтвета.ПеренаправлениеПисьма") Тогда 
				СписокОшибок.Добавить(Письмо, НСтр("ru = 'Не заполнена тема.'"));
			КонецЕсли;
		КонецЕсли;	
		
		// Проверка занятых файлов
		Если ДанныеПисьма.ПисьмоСодержитЗанятыеФайлы Тогда
			СписокОшибок.Добавить(Письмо, НСтр("ru = 'Некоторые файлы заняты для редактирования.'"));
		КонецЕсли;
		
		// Проверка размера письма
		Если Не ДанныеПисьма.ПроверитьПредельныйРазмерПисьма Тогда
			СписокОшибок.Добавить(Письмо, ДанныеПисьма.ТекстОшибкиПредельныйРазмерПисьма);
		КонецЕсли;	
		
	КонецЦикла;
	
	ПисьмаБезОшибок = Новый Массив;
	Для Каждого ДанныеПисьма Из ДанныеПисем Цикл
		Письмо = ДанныеПисьма.Ссылка;
		Если СписокОшибок.НайтиПоЗначению(Письмо) = Неопределено Тогда 
			ПисьмаБезОшибок.Добавить(ДанныеПисьма);
		КонецЕсли;	
	КонецЦикла;	
	
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Письма", ПисьмаБезОшибок);
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	ОписаниеОповещеня = Новый ОписаниеОповещения("ОтправитьПисьмаИзСпискаПродолжение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если СписокОшибок.Количество() > 0 Тогда 
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СписокОшибок", СписокОшибок);
		ПараметрыФормы.Вставить("ВсеСОшибками", ПисьмаБезОшибок.Количество() = 0);
		
		ОткрытьФорму("Документ.ИсходящееПисьмо.Форма.ПросмотрОшибокПриОтправкеИзСписка", ПараметрыФормы, Форма,,,, ОписаниеОповещеня);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещеня, Истина);
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет переход по внешней навигационной ссылке.
Процедура ПерейтиПоВнешнейНавигационнойСсылке(НавигационнаяСсылка, Element)
	
	ПерейтиПоНавигационнойСсылке(НавигационнаяСсылка);
	
КонецПроцедуры

// Проверяет, содержит ли ссылка схему
Функция СтрокаНачинаетсяСПодстроки(Строка, Подстрока)
	
	Если Найти(НРег(СокрЛ(Строка)), НРег(Подстрока)) = 1 Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Обрабатывает ссылку 1С:Документооборота
Процедура ОбработатьСсылку1СДокументооборота(Ссылка1СДокументооборота, ТекущееПисьмо, HTMLДокумент)
	
	СхемаСсылок1СДокументооборота = "v8doc:";
	
	Если  ВстроеннаяПочтаКлиентСервер.СхемаСсылки(Ссылка1СДокументооборота) <> СхемаСсылок1СДокументооборота Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка1СДокументооборота = Сред(Ссылка1СДокументооборота, СтрДлина(СхемаСсылок1СДокументооборота) + 1);
	ТипСсылки = ОпределитьТипСсылки1СДокументооборота(Ссылка1СДокументооборота);
	
	Если ТипСсылки = "e1cib/" Или ТипСсылки = "e1ccs/" Тогда
		
		ПерейтиПоНавигационнойСсылке(Ссылка1СДокументооборота);
		
	ИначеЕсли ТипСсылки = "mail/" Тогда
		
		Ссылка1СДокументооборота = Сред(Ссылка1СДокументооборота, СтрДлина(ТипСсылки) + 1);
		
		Если СтрокаНачинаетсяСПодстроки(Ссылка1СДокументооборота, "correspondencehistory") Тогда
			
			ВстроеннаяПочтаКлиент.ОткрытьДеревоПереписки(ТекущееПисьмо);
			
		ИначеЕсли СтрокаНачинаетсяСПодстроки(Ссылка1СДокументооборота, "allrecipientsto") Тогда
			
			ОткрытьФормуВсехПолучателей(ТекущееПисьмо, "Кому");
			
		ИначеЕсли СтрокаНачинаетсяСПодстроки(Ссылка1СДокументооборота, "allrecipientscopy") Тогда
			
			ОткрытьФормуВсехПолучателей(ТекущееПисьмо, "Копия");

		ИначеЕсли СтрокаНачинаетсяСПодстроки(Ссылка1СДокументооборота, "documentlinks") Тогда
			
			ОткрытьФорму("ОбщаяФорма.СвязиОбъекта",
				Новый Структура("ОсновнойОбъект, ТолькоВажные, ТолькоСвязиВОтветНа, ТолькоПисьмоОснование", 
					ТекущееПисьмо, Ложь, Ложь, Истина),,
				Новый УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет попытку перехода по внутренней навигационной ссылке
//
Функция ПерейтиПоВнутреннейНавигационнойСсылке(НавигационнаяСсылка)
	
	ПозицияВнутреннейНавигационнойСсылки = Найти(НавигационнаяСсылка, "#e1cib/");
	Если ПозицияВнутреннейНавигационнойСсылки = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВнутренняяНавигационнаяСсылка = Сред(НавигационнаяСсылка, ПозицияВнутреннейНавигационнойСсылки + 1);
	Попытка
		ПерейтиПоНавигационнойСсылке(ВнутренняяНавигационнаяСсылка);
	Исключение
		// Внутренней навигационный ссылки может не быть в базе.
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Определяет тип ссылки 1С:Документооборота
Функция ОпределитьТипСсылки1СДокументооборота(Ссылка1СДокументооборота)
	
	Если СтрокаНачинаетсяСПодстроки(Ссылка1СДокументооборота, "e1cib/") Тогда
		
		Возврат "e1cib/";
		
	ИначеЕсли СтрокаНачинаетсяСПодстроки(Ссылка1СДокументооборота, "e1ccs/") Тогда
		
		Возврат "e1ccs/"
		
	ИначеЕсли СтрокаНачинаетсяСПодстроки(Ссылка1СДокументооборота, "mail/") Тогда
		
		Возврат "mail/"
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

Процедура ОтправитьПисьмаИзСпискаПродолжение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат <> Истина Тогда 
		Возврат;
	КонецЕсли;	
	
	Письма = ДополнительныеПараметры.Письма;
	ИндексПисьма = -1;
	ОтправляемыеПисьма = Новый Массив;
	Форма = ДополнительныеПараметры.Форма;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Письма", Письма);
	Параметры.Вставить("ИндексПисьма", ИндексПисьма);
	Параметры.Вставить("ОтправляемыеПисьма", ОтправляемыеПисьма);
	Параметры.Вставить("Форма", Форма);
	
	ПерейтиКСледующемуПисьму(Параметры);
	
КонецПроцедуры	

Процедура ОтправитьПисьмаИзСпискаЗавершение(ДополнительныеПараметры)
	
	ОтправляемыеПисьма = ДополнительныеПараметры.ОтправляемыеПисьма;
	Если ОтправляемыеПисьма.Количество() > 0 Тогда 
		
		СписокОшибок = Новый СписокЗначений;
		ОтправленныеПисьма = Новый Массив;
		
		ВстроеннаяПочтаСервер.ОтправитьПисьмаПриГрупповойОтправке(ОтправляемыеПисьма, ОтправленныеПисьма, СписокОшибок);
		
		Если ОтправленныеПисьма.Количество() > 0 Тогда 
			
			Оповестить("ПисьмаИзменены");
			
			Если ОтправленныеПисьма.Количество() = 1 Тогда 
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Письмо ""%1"" успешно отправлено.'"),
					ОтправленныеПисьма[0]);
			Иначе	
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Письма (%1 шт.) успешно отправлены.'"),
					ОтправленныеПисьма.Количество());
			КонецЕсли;	
		
			ПоказатьОповещениеПользователя(ТекстСообщения);
			
		КонецЕсли;	
		
		Если СписокОшибок.Количество() > 0 Тогда 
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("СписокОшибок", СписокОшибок);
			ПараметрыФормы.Вставить("ВсеСОшибками", Истина);
			
			ОткрытьФорму("Документ.ИсходящееПисьмо.Форма.ПросмотрОшибокПриОтправкеИзСписка", ПараметрыФормы, ДополнительныеПараметры.Форма);
			
		КонецЕсли;
		
	КонецЕсли;	
	 
КонецПроцедуры	

Процедура ОтправитьПисьмоПроверкаЧислаАдресатов(ДополнительныеПараметры)
	
	ИндексПисьма = ДополнительныеПараметры.ИндексПисьма;
	Письмо = ДополнительныеПараметры.Письма[ИндексПисьма].Ссылка;
	ТемаПисьма = ДополнительныеПараметры.Письма[ИндексПисьма].Тема;
	Получатели = ДополнительныеПараметры.Письма[ИндексПисьма].Получатели;
	
	ПоказыватьПредупреждениеПриОтправкеПисьмаБольшомуЧислуАдресатов =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ПоказыватьПредупреждениеПриОтправкеПисьмаБольшомуЧислуАдресатов");
	
	Если ПоказыватьПредупреждениеПриОтправкеПисьмаБольшомуЧислуАдресатов 
		И ВстроеннаяПочтаКлиентСервер.ЭтоРассылка(Получатели.Количество()) Тогда
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Внимание!
			|Письмо ""%1"" будет отправлено %2 адресатам.
			|Вы уверены?'"),
			Строка(ТемаПисьма),
			Строка(Получатели.Количество()));
			
		ПараметрыФормы = Новый Структура("Вопрос", ТекстВопроса); 
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОтправитьПисьмоПроверкаЧислаАдресатовПродолжение", 
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		ОткрытьФорму("Документ.ИсходящееПисьмо.Форма.ВопросПриОтправке", 
			ПараметрыФормы,
			ДополнительныеПараметры.Форма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
		Возврат;
		
	КонецЕсли;
	
	ОтправитьПисьмоПроверкаПересылкиВнутреннегоПисьмаВнешнимПолучателям(ДополнительныеПараметры);
	
КонецПроцедуры	

Процедура ОтправитьПисьмоПроверкаЧислаАдресатовПродолжение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		ПерейтиКСледующемуПисьму(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;	
	
	БольшеНеЗадаватьЭтотВопрос = Результат.БольшеНеЗадаватьЭтотВопрос;
	Если БольшеНеЗадаватьЭтотВопрос Тогда
		ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
			"ПоказыватьПредупреждениеПриОтправкеПисьмаБольшомуЧислуАдресатов", Ложь);
	КонецЕсли;
		
	Если Результат.Отправить <> Истина Тогда
		ПерейтиКСледующемуПисьму(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	ОтправитьПисьмоПроверкаПересылкиВнутреннегоПисьмаВнешнимПолучателям(ДополнительныеПараметры);
	
КонецПроцедуры	
	
Процедура ОтправитьПисьмоПроверкаПересылкиВнутреннегоПисьмаВнешнимПолучателям(ДополнительныеПараметры)
	ДанныеПисьма = ДополнительныеПараметры.Письма[ДополнительныеПараметры.ИндексПисьма];
	
	Письмо = ДанныеПисьма.Ссылка;
	Получатели = ДанныеПисьма.Получатели;
	
	ПересылкаВнутреннегоПисьма = ВстроеннаяПочтаСервер.ПересылкаВнутреннегоПисьма(Письмо);
	
	ПредупреждатьПриПересылкеВнутреннихПисемВнешнимПолучателям 
		= ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ПредупреждатьПриПересылкеВнутреннихПисемВнешнимПолучателям");
	
	Если ПересылкаВнутреннегоПисьма И ПредупреждатьПриПересылкеВнутреннихПисемВнешнимПолучателям Тогда  
		
		ВнешниеАдресаты = Новый СписокЗначений;
		Для Каждого Строка Из Получатели Цикл
			Если Строка.Внешний Тогда 
				ВнешниеАдресаты.Добавить(Строка.Адресат, Строка.Представление);
			КонецЕсли;	
		КонецЦикла;	
		
		Если ВнешниеАдресаты.Количество() > 0 Тогда 
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ВнешниеАдресаты", ВнешниеАдресаты);
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ОтправитьПисьмоПроверкаПересылкиВнутреннегоПисьмаВнешнимПолучателямПродолжение", 
				ЭтотОбъект,
				ДополнительныеПараметры);
			
			ОткрытьФорму("Документ.ИсходящееПисьмо.Форма.ВопросПриПересылкеВнешнимАдресатам", 
				ПараметрыФормы,
				ДополнительныеПараметры.Форма,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
			Возврат;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	ОтправитьПисьмоПроверкаПисьмоВФорматеICalendar(ДополнительныеПараметры);
	
КонецПроцедуры	

Процедура ОтправитьПисьмоПроверкаПересылкиВнутреннегоПисьмаВнешнимПолучателямПродолжение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда 
		ПерейтиКСледующемуПисьму(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	ОтправитьПисьмоПроверкаПисьмоВФорматеICalendar(ДополнительныеПараметры);
	
КонецПроцедуры	

Процедура ОтправитьПисьмоПроверкаПисьмоВФорматеICalendar(ДополнительныеПараметры)
	ДанныеПисьма = ДополнительныеПараметры.Письма[ДополнительныеПараметры.ИндексПисьма];
	
	Письмо = ДанныеПисьма.Ссылка;
	ТемаПисьма = ДанныеПисьма.Тема;
	ПисьмоОснование = ДанныеПисьма.ПисьмоОснование;
	ОригинальноеПисьмоВФорматеICalendar = ДанныеПисьма.ОригинальноеПисьмоВФорматеICalendar;
	
	ПоказыватьПредупреждениеПриОтправкеОтветаНаICalendar =
		ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("ПоказыватьПредупреждениеПриОтправкеОтветаНаICalendar");
		
	Если ОригинальноеПисьмоВФорматеICalendar И ПоказыватьПредупреждениеПриОтправкеОтветаНаICalendar Тогда
		
		ТекстВопроса = СтрШаблон(
			НСтр("ru = 'Внимание!
			|Письмо ""%1"" будет отправлено как обычное письмо (а не как принятие приглашения).
			|Продолжить?'"),
			ТемаПисьма);
			
		ПараметрыФормы = Новый Структура("Вопрос", ТекстВопроса);	
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьПисьмоПроверкаПисьмоВФорматеICalendarПродолжение", 
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		ОткрытьФорму("Документ.ИсходящееПисьмо.Форма.ВопросПриОтправке", 
			ПараметрыФормы,
			ДополнительныеПараметры.Форма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
		Возврат;	
		
	КонецЕсли;
	
	ОтправитьПисьмоПроверкаОтсутсвие(ДополнительныеПараметры);
	
КонецПроцедуры	

Процедура ОтправитьПисьмоПроверкаПисьмоВФорматеICalendarПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		ПерейтиКСледующемуПисьму(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;	
		
	БольшеНеЗадаватьЭтотВопрос = Результат.БольшеНеЗадаватьЭтотВопрос;
	Если БольшеНеЗадаватьЭтотВопрос Тогда
		ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
			"ПоказыватьПредупреждениеПриОтправкеОтветаНаICalendar", Ложь);
	КонецЕсли;
		
	Если Результат.Отправить <> Истина Тогда
		ПерейтиКСледующемуПисьму(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	ОтправитьПисьмоПроверкаОтсутсвие(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОтправитьПисьмоПроверкаОтсутсвие(ДополнительныеПараметры)
	
	ДанныеПисьма = ДополнительныеПараметры.Письма[ДополнительныеПараметры.ИндексПисьма];
	
	Письмо = ДанныеПисьма.Ссылка;
	Получатели = ДанныеПисьма.Получатели;
	ПроверятьОтсутствие = ДанныеПисьма.ПроверятьОтсутствие;
	
	Если ПроверятьОтсутствие Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Некоторые адресаты письма сейчас отсутствуют.'");
		ТекстВопроса = НСтр("ru = 'Отправить письмо?'");
		ТекстКоманды = НСтр("ru = 'Отправить'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьПисьмоПроверкаОтсутсвиеПродолжение", 
			ЭтотОбъект,
			ДополнительныеПараметры);
			
		Если Не ВстроеннаяПочтаКлиентСервер.ЭтоРассылка(Получатели.Количество()) Тогда
			
			// Проверка отсутствия
			МассивПользователей = Новый Массив;
			Для Каждого Строка Из получатели Цикл
				Контакт = Строка.Контакт;
				Если ЗначениеЗаполнено(Контакт)
					И ТипЗнч(Контакт) = Тип("СправочникСсылка.Пользователи")
					И МассивПользователей.Найти(Контакт) = Неопределено Тогда 
					МассивПользователей.Добавить(Контакт);
				КонецЕсли;
			КонецЦикла;
	
			ИнформацияОбОтсутствии =
				ОтсутствияВызовСервера.ПроверитьОтсутствиеПользователей(МассивПользователей);
				
			ЕстьПредупреждения = Не ОтсутствияКлиент.ОбработатьИнформациюОбОтсутствии(
				ИнформацияОбОтсутствии, 
				ОписаниеОповещения, 
				ТекстВопроса, 
				ТекстКоманды, 
				ТекстПредупреждения,
				ДополнительныеПараметры.Форма);	
				
			Если ЕстьПредупреждения Тогда
			
				Возврат;
			
			КонецЕсли;
			
		КонецЕсли;		
		
	КонецЕсли;
	
	ДополнительныеПараметры.ОтправляемыеПисьма.Добавить(Письмо);
	ПерейтиКСледующемуПисьму(ДополнительныеПараметры);
	
КонецПроцедуры	

Процедура ОтправитьПисьмоПроверкаОтсутсвиеПродолжение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		ПерейтиКСледующемуПисьму(ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	Письмо = ДополнительныеПараметры.Письма[ДополнительныеПараметры.ИндексПисьма].Ссылка;
	ДополнительныеПараметры.ОтправляемыеПисьма.Добавить(Письмо);
	ПерейтиКСледующемуПисьму(ДополнительныеПараметры);
	
КонецПроцедуры	

Процедура ПерейтиКСледующемуПисьму(ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.ИндексПисьма < ДополнительныеПараметры.Письма.Количество() - 1 Тогда 
		
		ДополнительныеПараметры.ИндексПисьма = ДополнительныеПараметры.ИндексПисьма + 1;
		
		ОтправитьПисьмоПроверкаЧислаАдресатов(ДополнительныеПараметры);
		
	Иначе	
		
		ОтправитьПисьмаИзСпискаЗавершение(ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти