///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

Функция СформироватьВложенияПисьма(ДанныеОтладки, УникальныйИдентификатор) Экспорт
	
	Вложения = Новый Массив;
	
	Счетчик = 0;
	
	ПараметрыМодели = Новый ТаблицаЗначений;
	ПараметрыМодели.Колонки.Добавить("Вариант",      , НСтр("ru = 'Локально/Облачно'"));
	ПараметрыМодели.Колонки.Добавить("АудиоФайл",    , НСтр("ru = 'Аудио файл'"));
	ПараметрыМодели.Колонки.Добавить("Акустика",     , НСтр("ru = 'Акустика'"));
	ПараметрыМодели.Колонки.Добавить("Грамматика",   , НСтр("ru = 'Грамматика'"));
	ПараметрыМодели.Колонки.Добавить("Версия",       , НСтр("ru = 'Версия'"));
	ПараметрыМодели.Колонки.Добавить("КодЯзыка",     , НСтр("ru = 'Код языка'"));
	ПараметрыМодели.Колонки.Добавить("ВремяНачала",  , НСтр("ru = 'Время начала'"));
	ПараметрыМодели.Колонки.Добавить("ВремяКонца",   , НСтр("ru = 'Время конца'"));
	ПараметрыМодели.Колонки.Добавить("Длительность", , НСтр("ru = 'Длительность обработки'"));
	
	Для Каждого Аудио Из ДанныеОтладки.Аудио Цикл
		
		Если Аудио.АудиоДанные <> Неопределено Тогда
			ДобавитьВоВложение(УникальныйИдентификатор, Вложения, XMLСтрока(Счетчик) + ".pcm", Аудио.АудиоДанные);
		КонецЕсли;
		
		НоваяСтрока = ПараметрыМодели.Добавить();
		НоваяСтрока.Вариант      = Строка(Аудио.ВариантИспользования);
		НоваяСтрока.АудиоФайл    = XMLСтрока(Счетчик) + ".pcm";
		НоваяСтрока.Акустика     = Строка(Аудио.ПараметрыМодели.Акустика);
		НоваяСтрока.Грамматика   = Строка(Аудио.ПараметрыМодели.Грамматика);
		НоваяСтрока.Версия       = Строка(Аудио.ПараметрыМодели.Версия);
		НоваяСтрока.КодЯзыка     = Строка(Аудио.ПараметрыМодели.КодЯзыка);
		НоваяСтрока.ВремяНачала  = XMLСтрока(Аудио.Начало);
		НоваяСтрока.ВремяКонца   = XMLСтрока(Аудио.Конец);
		НоваяСтрока.Длительность = XMLСтрока(Аудио.Длительность);
		
		Результат = Новый ТаблицаЗначений;
		Результат.Колонки.Добавить("Данные",        , НСтр("ru = 'Распознанный текст'"));
		Результат.Колонки.Добавить("Постобработка", , НСтр("ru = 'Постобработка'"));
		Результат.Колонки.Добавить("Завершено",     , НСтр("ru = 'Распознавание фразы завершено'"));
		Результат.Колонки.Добавить("ВремяНачала",   , НСтр("ru = 'Время начала обработки'"));
		Результат.Колонки.Добавить("ВремяКонца",    , НСтр("ru = 'Время конца обработки'"));
		Результат.Колонки.Добавить("Длительность",  , НСтр("ru = 'Длительность обработки'"));
		
		Если ДанныеОтладки.Текст.Количество() > Счетчик Тогда
			Для Каждого СтруктураТекста Из ДанныеОтладки.Текст[Счетчик] Цикл
				
				НоваяСтрока = Результат.Добавить();
				НоваяСтрока.Данные        = СтруктураТекста.Данные;
				НоваяСтрока.Постобработка = СтруктураТекста.ДанныеПостобработка;
				НоваяСтрока.Завершено     = XMLСтрока(СтруктураТекста.РаспознаваниеФразыЗавершено);
				НоваяСтрока.ВремяНачала   = XMLСтрока(СтруктураТекста.Начало);
				НоваяСтрока.ВремяКонца    = XMLСтрока(СтруктураТекста.Конец);
				НоваяСтрока.Длительность  = XMLСтрока(СтруктураТекста.Длительность);
				
			КонецЦикла;
		КонецЕсли;
		
		ДобавитьВоВложение(УникальныйИдентификатор, Вложения, XMLСтрока(Счетчик) + ".xlsx", 
			ТаблицуЗначенийВТабличныйДокументВДвоичныеДанные(Результат, НСтр("ru = 'Результат распознавания'"))
		);
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Если ДанныеОтладки.Исключения.Количество() > 0 Тогда
		
		Исключения = Новый ТаблицаЗначений;
		Исключения.Колонки.Добавить("Исключение", , НСтр("ru = 'Исключение'"));
		
		Для Каждого Данные из ДанныеОтладки.Исключения Цикл
			НоваяСтрока = Исключения.Добавить();
			НоваяСтрока.Исключение = Данные;
		КонецЦикла;
		
		ДобавитьВоВложение(УникальныйИдентификатор, Вложения, "errors.xlsx", 
			ТаблицуЗначенийВТабличныйДокументВДвоичныеДанные(Исключения, НСтр("ru = 'Ошибки'"))
		);
		
	КонецЕсли;
	
	ДобавитьВоВложение(УникальныйИдентификатор, Вложения, "param.xlsx",
		ТаблицуЗначенийВТабличныйДокументВДвоичныеДанные(ПараметрыМодели, НСтр("ru = 'Параметры модели'"))
	);
	
	Возврат Вложения;
	
КонецФункции

Процедура ДобавитьВоВложение(УникальныйИдентификатор, Вложения, ИмяФайла, ДвоичныеДанные)
	
	СтруктураВложения = Новый Структура;
	СтруктураВложения.Вставить("Представление", ИмяФайла);
	СтруктураВложения.Вставить("АдресВоВременномХранилище",
		ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор));
	
	Вложения.Добавить(СтруктураВложения);
	
КонецПроцедуры

Функция ТаблицуЗначенийВТабличныйДокументВДвоичныеДанные(ТаблицаЗначений, Заголовок)
	
	Построитель = Новый ПостроительОтчета;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаЗначений);
	Построитель.Выполнить();
	Построитель.ВыводитьЗаголовокОтчета = Истина;
	Построитель.ТекстЗаголовка = Заголовок;

	Для каждого Колонка Из Построитель.ВыбранныеПоля Цикл
		Колонка.Представление = ТаблицаЗначений.Колонки[Колонка.Имя].Заголовок;
	КонецЦикла;

	ТабДок = Новый ТабличныйДокумент;
	Построитель.Вывести(ТабДок);
	ОбластьТабДок = ТабДок.Область();
	ОбластьТабДок.ШиринаКолонки = 20;
	
	ТабДок.ОтображатьЗаголовки = Истина;
	
	ПотокВПамяти = Новый ПотокВПамяти();
	ТабДок.Записать(ПотокВПамяти, ТипФайлаТабличногоДокумента.XLSX);
	Возврат ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецФункции

#КонецОбласти
