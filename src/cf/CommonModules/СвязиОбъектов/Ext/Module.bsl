////////////////////////////////////////////////////////////////////////////////
// Функции для работы со связями объектов.
// - создание, удаление, обновление связей;
// - получение связей и связанных Объектов;
// - работа с настройками связей;
// - работа с типами связей.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Функция ПолучитьСвязанныйОбъект(Объект, Знач ТипСвязи, 
	ДополнительныйОбъектСвязи = Неопределено, Комментарий = Неопределено) Экспорт
	
	Если ТипЗнч(ТипСвязи) = Тип("Строка") Тогда
		ТипСвязи = Справочники.ТипыСвязей[ТипСвязи];
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СвязиОбъектов.СвязанныйОбъект,
		|	СвязиОбъектов.СвязаннаяСтрока,
		|	СвязиОбъектов.Комментарий,
		|	СвязиОбъектов.Установил,
		|	СвязиОбъектов.ДатаУстановки
		|ИЗ
		|	РегистрСведений.СвязиОбъектов КАК СвязиОбъектов
		|ГДЕ
		|	СвязиОбъектов.Объект = &Объект
		|	И СвязиОбъектов.ТипСвязи = &ТипСвязи";
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("ТипСвязи", ТипСвязи);
	
	Если ЗначениеЗаполнено(ДополнительныйОбъектСвязи) Тогда 
		Запрос.Текст = Запрос.Текст + "
		|	И СвязиОбъектов.ДополнительныйОбъектСвязи = &ДополнительныйОбъектСвязи";
		Запрос.УстановитьПараметр("ДополнительныйОбъектСвязи", ДополнительныйОбъектСвязи);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Комментарий = Выборка.Комментарий;
	Если ЗначениеЗаполнено(Выборка.СвязаннаяСтрока)
		И Не ЗначениеЗаполнено(Выборка.СвязанныйОбъект) Тогда
		Возврат Выборка.СвязаннаяСтрока;
	Иначе
		Возврат Выборка.СвязанныйОбъект;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСвязанныеОбъекты(Объект, Знач ТипСвязи) Экспорт
	
	Если ТипЗнч(ТипСвязи) = Тип("Строка") Тогда
		ТипСвязи = Справочники.ТипыСвязей[ТипСвязи];
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязиОбъектов.СвязанныйОбъект,
		|	СвязиОбъектов.Комментарий,
		|	СвязиОбъектов.Установил,
		|	СвязиОбъектов.ДатаУстановки
		|ИЗ
		|	РегистрСведений.СвязиОбъектов КАК СвязиОбъектов
		|ГДЕ
		|	СвязиОбъектов.Объект = &Объект
		|	И СвязиОбъектов.ТипСвязи = &ТипСвязи";
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("ТипСвязи", ТипСвязи);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СвязанныйОбъект");
	
КонецФункции

Функция ПолучитьСвязанныеОбъектыПоМассивуОбъектов(Объекты, Знач ТипСвязи) Экспорт

	Если Не Объекты.Количество() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Если ТипЗнч(ТипСвязи) = Тип("Строка") Тогда
		ТипСвязи = Справочники.ТипыСвязей[ТипСвязи];
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязиОбъектов.СвязанныйОбъект,
		|	СвязиОбъектов.Объект
		|ИЗ
		|	РегистрСведений.СвязиОбъектов КАК СвязиОбъектов
		|ГДЕ
		|	СвязиОбъектов.Объект В (&Объекты)
		|	И СвязиОбъектов.ТипСвязи = &ТипСвязи";
	
	Запрос.УстановитьПараметр("Объекты", Объекты);
	Запрос.УстановитьПараметр("ТипСвязи", ТипСвязи);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СвязанныйОбъект");
	
КонецФункции

Процедура СоздатьНастройкуСвязи(
	СтруктураНастройкиСвязи,
	Предопределенная = Ложь,
	Комментарий = "") Экспорт
	
	МенеджерЗаписи = РегистрыСведений.НастройкаСвязей.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураНастройкиСвязи);
	МенеджерЗаписи.Предопределенная = Предопределенная;
	МенеджерЗаписи.Комментарий = Комментарий;
	МенеджерЗаписи.Записать();
	
	Если ЗначениеЗаполнено(СтруктураНастройкиСвязи.ТипОбратнойСвязи) Тогда
		МенеджерЗаписи = РегистрыСведений.НастройкаСвязей.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТипСвязи = СтруктураНастройкиСвязи.ТипОбратнойСвязи ;
		МенеджерЗаписи.СсылкаИз = СтруктураНастройкиСвязи.СсылкаНа;
		МенеджерЗаписи.СсылкаНа = СтруктураНастройкиСвязи.СсылкаИз;
		МенеджерЗаписи.ХарактерСвязи = СтруктураНастройкиСвязи.ХарактерОбратнойСвязи;
		МенеджерЗаписи.ТипОбратнойСвязи = СтруктураНастройкиСвязи.ТипСвязи;
		МенеджерЗаписи.ХарактерОбратнойСвязи = СтруктураНастройкиСвязи.ХарактерСвязи;
		МенеджерЗаписи.ВидКорреспонденцииДокументИз = СтруктураНастройкиСвязи.ВидКорреспонденцииДокументНа;
		МенеджерЗаписи.ВидКорреспонденцииДокументНа = СтруктураНастройкиСвязи.ВидКорреспонденцииДокументИз;
		МенеджерЗаписи.Предопределенная = Предопределенная;
		МенеджерЗаписи.Комментарий = Комментарий;
		МенеджерЗаписи.Важная = Истина;
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьСвязь(
	Объект,
	СвязанныйОбъект,
	ТипСвязи,
	Установил = Неопределено,
	ДатаУстановки = Неопределено,
	Комментарий = "",
	Порядок = 0,
	ДополнительныйОбъектСвязи = Неопределено) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		МенеджерЗаписи = РегистрыСведений.СвязиОбъектов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект = Объект;
		
		Если ТипЗнч(СвязанныйОбъект) = Тип("Строка") Тогда 
			МенеджерЗаписи.СвязаннаяСтрока = СвязанныйОбъект;
		Иначе
			МенеджерЗаписи.СвязанныйОбъект = СвязанныйОбъект;
		КонецЕсли;	

		МенеджерЗаписи.ТипСвязи = ТипСвязи;
		МенеджерЗаписи.Комментарий = Комментарий;
		МенеджерЗаписи.Порядок = Порядок;
		
		Если Установил = Неопределено Тогда
			МенеджерЗаписи.Установил = Сотрудники.ОсновнойСотрудник();
		Иначе
			МенеджерЗаписи.Установил = Установил;
		КонецЕсли;
		
		Если ДатаУстановки = Неопределено Тогда
			МенеджерЗаписи.ДатаУстановки = ТекущаяДатаСеанса();
		Иначе
			МенеджерЗаписи.ДатаУстановки = ДатаУстановки;
		КонецЕсли;
		
		МенеджерЗаписи.ДополнительныйОбъектСвязи = ДополнительныйОбъектСвязи;
		
		МенеджерЗаписи.Записать();
		
		ИнтеграцияЗадач.ОбработатьСозданиеСвязи(
			Объект,
			СвязанныйОбъект,
			ТипСвязи);
		
		НастройкаСвязи = ПолучитьНастройкуСвязи(Объект, СвязанныйОбъект, ТипСвязи);
		
		Если НастройкаСвязи = Неопределено Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Тип связи %1 не настроен для %2'"), Строка(ТипСвязи), Строка(СвязанныйОбъект));
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НастройкаСвязи.ТипОбратнойСвязи) Тогда
			
			МенеджерОбратнойЗаписи = РегистрыСведений.СвязиОбъектов.СоздатьМенеджерЗаписи();
			МенеджерОбратнойЗаписи.Объект = МенеджерЗаписи.СвязанныйОбъект;
			МенеджерОбратнойЗаписи.СвязанныйОбъект = МенеджерЗаписи.Объект;
			МенеджерОбратнойЗаписи.ТипСвязи = НастройкаСвязи.ТипОбратнойСвязи;
			МенеджерОбратнойЗаписи.Установил = МенеджерЗаписи.Установил;
			МенеджерОбратнойЗаписи.ДатаУстановки = МенеджерЗаписи.ДатаУстановки;
			МенеджерОбратнойЗаписи.Комментарий = МенеджерЗаписи.Комментарий;
			МенеджерОбратнойЗаписи.Порядок = МенеджерЗаписи.Порядок;
			МенеджерОбратнойЗаписи.ДополнительныйОбъектСвязи = ДополнительныйОбъектСвязи;
			МенеджерОбратнойЗаписи.Записать();
			
			
			ИнтеграцияЗадач.ОбработатьСозданиеСвязи(
				СвязанныйОбъект,
				Объект,
				НастройкаСвязи.ТипОбратнойСвязи);
			
		КонецЕсли;
		
		// Перезаполнение рабочих групп связанных объектов.
		Если НастройкаСвязи.СинхронизироватьДоступ = Перечисления.ВариантыСинхронизацииДоступа.Копировать
			Или НастройкаСвязи.СинхронизироватьДоступ = Перечисления.ВариантыСинхронизацииДоступа.Расширять Тогда 
			РаботаСРабочимиГруппами.РасширитьРабочуюГруппуСвязанныхОбъектов(Объект);
		КонецЕсли;  
		
		Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Объект) 
			И ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(СвязанныйОбъект) Тогда
			
			РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(СвязанныйОбъект, "ЕстьДокументы", Истина);
			
		КонецЕсли;	
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура УдалитьСвязь(Объект, СвязанныйОбъект, ТипСвязи,
	ДополнительныйОбъектСвязи = Неопределено, ПисатьПротокол = Ложь) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.СвязиОбъектов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект = Объект;
	
	Если ТипЗнч(СвязанныйОбъект) = Тип("Строка") Тогда 
		МенеджерЗаписи.СвязаннаяСтрока = СвязанныйОбъект;
	Иначе
		МенеджерЗаписи.СвязанныйОбъект = СвязанныйОбъект;
	КонецЕсли;	

	МенеджерЗаписи.ТипСвязи = ТипСвязи;
	МенеджерЗаписи.ДополнительныйОбъектСвязи = ДополнительныйОбъектСвязи;
	МенеджерЗаписи.Удалить();
	
	НастройкаСвязи = ПолучитьНастройкуСвязи(Объект, СвязанныйОбъект, ТипСвязи);
	Если НастройкаСвязи = Неопределено Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Тип связи %1 не настроен для %2'"), Строка(ТипСвязи), Строка(СвязанныйОбъект));
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкаСвязи.ТипОбратнойСвязи) Тогда
		МенеджерЗаписи = РегистрыСведений.СвязиОбъектов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект = СвязанныйОбъект;
		МенеджерЗаписи.СвязанныйОбъект = Объект;
		МенеджерЗаписи.ТипСвязи = НастройкаСвязи.ТипОбратнойСвязи;
		МенеджерЗаписи.ДополнительныйОбъектСвязи = ДополнительныйОбъектСвязи;
		МенеджерЗаписи.Удалить();
	КонецЕсли;
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Объект) 
		И ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(СвязанныйОбъект) Тогда
		
		ДокументыПоПисьму = ВстроеннаяПочтаСервер.ДокументыНаОсновании(СвязанныйОбъект);
		Если ДокументыПоПисьму = "" Тогда
			РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(СвязанныйОбъект, "ЕстьДокументы", Ложь);
		КонецЕсли;
		
	КонецЕсли;	

	Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(СвязанныйОбъект) 
		И ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Объект) Тогда
		
		ДокументыПоПисьму = ВстроеннаяПочтаСервер.ДокументыНаОсновании(Объект);
		Если ДокументыПоПисьму = "" Тогда
			РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(Объект, "ЕстьДокументы", Ложь);
		КонецЕсли;
		
	КонецЕсли;	  
	
	Если ПисатьПротокол Тогда
		ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(
			Объект,
			СтрШаблон(НСтр("ru = 'Удаление связи ""%1""'"), ТипСвязи)
		);
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьРодителей(Элемент) Экспорт
	
	Родители = Новый Массив;
	
	ТекущийРодитель = Элемент.Родитель;
	Пока Не ТекущийРодитель.Пустая() Цикл
		Родители.Добавить(ТекущийРодитель);
		ТекущийРодитель = ТекущийРодитель.Родитель;
	КонецЦикла;
	
	Возврат Родители;
	
КонецФункции

Функция ПолучитьНастройкуСвязи(Объект, СвязанныйОбъект, ТипСвязи) Экспорт
	
	СтруктураВозврата = Новый Структура("ТипСвязи, СсылкаИз, СсылкаНа,
	|ТипОбратнойСвязи, ХарактерСвязи, ХарактерОбратнойСвязи, СинхронизироватьДоступ, Важная, Обязательная");
	
	НастройкиСвязи = Новый ТаблицаЗначений;
	НастройкиСвязи.Колонки.Добавить("ТипСвязи");
	НастройкиСвязи.Колонки.Добавить("СсылкаИз");
	НастройкиСвязи.Колонки.Добавить("УровеньСсылкаИз");
	НастройкиСвязи.Колонки.Добавить("СсылкаНа");
	НастройкиСвязи.Колонки.Добавить("УровеньСсылкаНа");
	НастройкиСвязи.Колонки.Добавить("Уровень");
	НастройкиСвязи.Колонки.Добавить("ХарактерСвязи");
	НастройкиСвязи.Колонки.Добавить("ТипОбратнойСвязи");
	НастройкиСвязи.Колонки.Добавить("ХарактерОбратнойСвязи");
	НастройкиСвязи.Колонки.Добавить("СинхронизироватьДоступ");
	НастройкиСвязи.Колонки.Добавить("Важная", Новый ОписаниеТипов("Булево"));
	НастройкиСвязи.Колонки.Добавить("Обязательная", Новый ОписаниеТипов("Булево"));
	
	РодителиСсылкаНа = Новый Массив;
	РодителиСсылкаИз = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкаСвязей.ТипСвязи КАК ТипСвязи,
		|	НастройкаСвязей.СсылкаИз КАК СсылкаИз,
		|	НастройкаСвязей.СсылкаНа КАК СсылкаНа,
		|	НастройкаСвязей.ХарактерСвязи КАК ХарактерСвязи,
		|	НастройкаСвязей.ТипОбратнойСвязи КАК ТипОбратнойСвязи,
		|	НастройкаСвязей.ХарактерОбратнойСвязи КАК ХарактерОбратнойСвязи,
		|	НастройкаСвязей.Комментарий КАК Комментарий,
		|	НастройкаСвязей.СинхронизироватьДоступ КАК СинхронизироватьДоступ,
		|	НастройкаСвязей.Важная КАК Важная,
		|	НастройкаСвязей.Обязательная КАК Обязательная
		|ИЗ
		|	РегистрСведений.НастройкаСвязей КАК НастройкаСвязей
		|ГДЕ
		|	НастройкаСвязей.ТипСвязи = &ТипСвязи";
	Запрос.УстановитьПараметр("ТипСвязи", ТипСвязи);
	РодителиСсылкаИз = Неопределено; РодителиСсылкаНа = Неопределено;
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Файлы")
		Или ТипЗнч(Объект) = Тип("СправочникСсылка.Мероприятия")
		Или ТипЗнч(Объект) = Тип("СправочникСсылка.Проекты")
		Или ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Объект)
		Или ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Объект) Тогда
		Запрос.Текст = Запрос.Текст +
		" И (ТИПЗНАЧЕНИЯ(НастройкаСвязей.СсылкаИз) = ТИПЗНАЧЕНИЯ(&Объект)) ";
		Запрос.УстановитьПараметр("Объект", Объект);
	Иначе
		Запрос.Текст = Запрос.Текст +
		" И (НастройкаСвязей.СсылкаИз = &ВидДокумента
		| ИЛИ НастройкаСвязей.СсылкаИз В (&Родители)
		| ИЛИ НастройкаСвязей.СсылкаИз = &ПустаяСсылка) ";
		
		Если ТипЗнч(Объект) = Тип("Структура") Тогда 
			ВидДокументаСсылкаИз = Объект.ВидДокумента;
		Иначе 
			ВидДокументаСсылкаИз = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ВидДокумента");
		КонецЕсли;
		
		ПустаяСсылкаИз = Справочники[ВидДокументаСсылкаИз.Метаданные().Имя].ПустаяСсылка();
		РодителиСсылкаИз = ПолучитьРодителей(ВидДокументаСсылкаИз);
		
		Запрос.УстановитьПараметр("ВидДокумента", ВидДокументаСсылкаИз);
		Запрос.УстановитьПараметр("Родители", 	  РодителиСсылкаИз);
		Запрос.УстановитьПараметр("ПустаяСсылка", ПустаяСсылкаИз);
	КонецЕсли;
	
	Если ТипЗнч(СвязанныйОбъект) = Тип("Строка")
		Или ТипЗнч(СвязанныйОбъект) = Тип("СправочникСсылка.Файлы")
		Или ТипЗнч(СвязанныйОбъект) = Тип("СправочникСсылка.Мероприятия")
		Или ТипЗнч(СвязанныйОбъект) = Тип("СправочникСсылка.Проекты")
		Или ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(СвязанныйОбъект)
		Или ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(СвязанныйОбъект) Тогда
		Запрос.Текст = Запрос.Текст +
			" И (ТИПЗНАЧЕНИЯ(НастройкаСвязей.СсылкаНа) = ТИПЗНАЧЕНИЯ(&СвязанныйОбъект)) ";
		Запрос.УстановитьПараметр("СвязанныйОбъект", СвязанныйОбъект);
	Иначе
		
		Если ТипЗнч(СвязанныйОбъект) = Тип("Структура") Тогда 
			ВидДокументаСсылкаНа = СвязанныйОбъект.ВидДокумента;
		ИначеЕсли ЗначениеЗаполнено(СвязанныйОбъект) Тогда 
			ВидДокументаСсылкаНа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвязанныйОбъект, "ВидДокумента");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидДокументаСсылкаНа) Тогда
			
			РодителиСсылкаНа = ПолучитьРодителей(ВидДокументаСсылкаНа);
			ПустаяСсылкаНа = Справочники[ВидДокументаСсылкаНа.Метаданные().Имя].ПустаяСсылка();
			
			Запрос.Текст = Запрос.Текст +
				" И (НастройкаСвязей.СсылкаНа = &ВидДокументаСсылкаНа
				|	ИЛИ НастройкаСвязей.СсылкаНа В (&РодителиСсылкаНа)
				|	ИЛИ НастройкаСвязей.СсылкаНа = &ПустаяСсылкаНа) ";
			
			Запрос.УстановитьПараметр("ВидДокументаСсылкаНа", ВидДокументаСсылкаНа);
			Запрос.УстановитьПараметр("РодителиСсылкаНа", РодителиСсылкаНа);
			Запрос.УстановитьПараметр("ПустаяСсылкаНа", ПустаяСсылкаНа);
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = НастройкиСвязи.Добавить();
		НоваяСтрока.ТипСвязи = Выборка.ТипСвязи;
		НоваяСтрока.СсылкаИз = Выборка.СсылкаИз;
		НоваяСтрока.СсылкаНа = Выборка.СсылкаНа;
		
		Если ТипЗнч(Выборка.СсылкаИз) = Тип("СправочникСсылка.Файлы")
			Или ТипЗнч(Выборка.СсылкаИз) = Тип("СправочникСсылка.Мероприятия")
			Или ТипЗнч(Выборка.СсылкаИз) = Тип("СправочникСсылка.Проекты")
			Или ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Выборка.СсылкаИз)
			Или ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Выборка.СсылкаИз) Тогда
			НоваяСтрока.УровеньСсылкаИз = 0;
		Иначе
			Если Выборка.СсылкаИз = ВидДокументаСсылкаИз Тогда
				НоваяСтрока.УровеньСсылкаИз = 0;
			ИначеЕсли Выборка.СсылкаИз = ПустаяСсылкаИз Тогда
				НоваяСтрока.УровеньСсылкаИз = 1000;
			ИначеЕсли РодителиСсылкаИз <> Неопределено Тогда
				НоваяСтрока.УровеньСсылкаИз = РодителиСсылкаИз.Найти(Выборка.СсылкаИз) + 1;
			Иначе
				НоваяСтрока.УровеньСсылкаИз = 10000;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(Выборка.СсылкаНа) = Тип("Строка")
			Или ТипЗнч(Выборка.СсылкаНа) = Тип("СправочникСсылка.Файлы")
			Или ТипЗнч(Выборка.СсылкаНа) = Тип("СправочникСсылка.Мероприятия")
			Или ТипЗнч(Выборка.СсылкаНа) = Тип("СправочникСсылка.Проекты")
			Или ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Выборка.СсылкаНа)
			Или ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Выборка.СсылкаНа) Тогда
			НоваяСтрока.УровеньСсылкаНа = 0;
		Иначе
			Если Выборка.СсылкаНа = ВидДокументаСсылкаНа Тогда
				НоваяСтрока.УровеньСсылкаНа = 0;
			ИначеЕсли Выборка.СсылкаНа = ПустаяСсылкаНа Тогда
				НоваяСтрока.УровеньСсылкаНа = 1000;
			ИначеЕсли РодителиСсылкаНа <> Неопределено Тогда 
				НайденныйУровеньСсылкаНа = РодителиСсылкаНа.Найти(Выборка.СсылкаНа);
				НоваяСтрока.УровеньСсылкаНа =
					?(ЗначениеЗаполнено(НайденныйУровеньСсылкаНа), НайденныйУровеньСсылкаНа + 1, 1);
			Иначе
				НоваяСтрока.УровеньСсылкаНа = 10000;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.Уровень = НоваяСтрока.УровеньСсылкаИз + НоваяСтрока.УровеньСсылкаНа;
		НоваяСтрока.ХарактерСвязи = Выборка.ХарактерСвязи;
		НоваяСтрока.ТипОбратнойСвязи = Выборка.ТипОбратнойСвязи;
		НоваяСтрока.ХарактерОбратнойСвязи = Выборка.ХарактерОбратнойСвязи;
		НоваяСтрока.СинхронизироватьДоступ = Выборка.СинхронизироватьДоступ;
		НоваяСтрока.Важная = Выборка.Важная;
		НоваяСтрока.Обязательная = Выборка.Обязательная;
	КонецЦикла;
			
	НастройкиСвязи.Сортировать("Уровень Возр");
	Если НастройкиСвязи.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, НастройкиСвязи[0]);
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьНастройкиСвязи(Объект, СвязанныйОбъект = Неопределено) Экспорт
	
	НастройкиСвязи = Новый ТаблицаЗначений;
	НастройкиСвязи.Колонки.Добавить("ТипСвязи");
	НастройкиСвязи.Колонки.Добавить("СсылкаИз");
	НастройкиСвязи.Колонки.Добавить("ТипСсылкаИз");
	НастройкиСвязи.Колонки.Добавить("ТипСсылкаИзПредставление");
	НастройкиСвязи.Колонки.Добавить("СсылкаНа");
	НастройкиСвязи.Колонки.Добавить("ТипСсылкаНа");
	НастройкиСвязи.Колонки.Добавить("ТипСсылкаНаПредставление");
	НастройкиСвязи.Колонки.Добавить("ХарактерСвязи");
	НастройкиСвязи.Колонки.Добавить("ТипОбратнойСвязи");
	НастройкиСвязи.Колонки.Добавить("ХарактерОбратнойСвязи");
	НастройкиСвязи.Колонки.Добавить("Предопределенная");
	НастройкиСвязи.Колонки.Добавить("Обязательная");
	НастройкиСвязи.Колонки.Добавить("СинхронизироватьДоступ");
	НастройкиСвязи.Колонки.Добавить("Важная");
	НастройкиСвязи.Колонки.Добавить("КомментарийСвязи");
	
	Если Не ЗначениеЗаполнено(Объект) Тогда
		Возврат НастройкиСвязи;
	КонецЕсли;
	
	ИспользованиеВстроеннойПочты = ПолучитьФункциональнуюОпцию("ИспользоватьВстроеннуюПочту")
		И ПолучитьФункциональнуюОпцию("ИспользованиеВстроеннойПочты");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкаСвязей.ТипСвязи КАК ТипСвязи,
		|	НастройкаСвязей.СсылкаИз КАК СсылкаИз,
		|	НастройкаСвязей.СсылкаНа КАК СсылкаНа,
		|	НастройкаСвязей.ХарактерСвязи КАК ХарактерСвязи,
		|	НастройкаСвязей.ТипОбратнойСвязи КАК ТипОбратнойСвязи,
		|	НастройкаСвязей.ХарактерОбратнойСвязи КАК ХарактерОбратнойСвязи,
		|	НастройкаСвязей.Предопределенная КАК Предопределенная,
		|	НастройкаСвязей.Обязательная КАК Обязательная,
		|	НастройкаСвязей.Комментарий КАК Комментарий,
		|	НастройкаСвязей.СинхронизироватьДоступ КАК СинхронизироватьДоступ,
		|	НастройкаСвязей.Важная КАК Важная,
		|	ТипыСвязей.Комментарий КАК КомментарийСвязи
		|ИЗ
		|	РегистрСведений.НастройкаСвязей КАК НастройкаСвязей
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыСвязей КАК ТипыСвязей
		|		ПО НастройкаСвязей.ТипСвязи = ТипыСвязей.Ссылка
		|ГДЕ
		|	НЕ НастройкаСвязей.ТипСвязи.ПометкаУдаления
		|	И НЕ НастройкаСвязей.ТипСвязи.НеИспользовать";
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Файлы")
		Или ТипЗнч(Объект) = Тип("СправочникСсылка.Мероприятия")
		Или ТипЗнч(Объект) = Тип("СправочникСсылка.Проекты")
		Или ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Объект)
		Или ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Объект) Тогда
		Запрос.Текст = Запрос.Текст +
		" И (ТИПЗНАЧЕНИЯ(НастройкаСвязей.СсылкаИз) = ТИПЗНАЧЕНИЯ(&Объект)) ";
		Запрос.УстановитьПараметр("Объект", Объект);
	Иначе
		Запрос.Текст = Запрос.Текст +
			" И (НастройкаСвязей.СсылкаИз = &ВидДокумента
			| ИЛИ НастройкаСвязей.СсылкаИз В (&Родители)
			| ИЛИ НастройкаСвязей.СсылкаИз = &ПустаяСсылка) 
			| И НастройкаСвязей.ВидКорреспонденцииДокументИз = &ВидКорреспонденцииИз";
		
		Если ТипЗнч(Объект) = Тип("Структура") Тогда 
			ВидДокументаСсылкаИз = Объект.ВидДокумента;
		Иначе 
			ВидДокументаСсылкаИз = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ВидДокумента");
		КонецЕсли;
		
		РеквизитыВида = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидДокументаСсылкаИз,
			"ЯвляетсяВходящейКорреспонденцией, ЯвляетсяИсходящейКорреспонденцией");
		
		Если РеквизитыВида.ЯвляетсяВходящейКорреспонденцией = Истина Тогда 
			Запрос.УстановитьПараметр("ВидКорреспонденцииИз", Перечисления.ВидыКорреспонденции.Входящая);
			
		ИначеЕсли РеквизитыВида.ЯвляетсяИсходящейКорреспонденцией = Истина Тогда 
			Запрос.УстановитьПараметр("ВидКорреспонденцииИз", Перечисления.ВидыКорреспонденции.Исходящая);
			
		Иначе 
			Запрос.УстановитьПараметр("ВидКорреспонденцииИз", Перечисления.ВидыКорреспонденции.ПустаяСсылка());
		КонецЕсли;
		
		ПустаяСсылкаИз = Справочники[ВидДокументаСсылкаИз.Метаданные().Имя].ПустаяСсылка();
		РодителиИз = ПолучитьРодителей(ВидДокументаСсылкаИз);
		
		Запрос.УстановитьПараметр("ВидДокумента", ВидДокументаСсылкаИз);
		Запрос.УстановитьПараметр("Родители", РодителиИз);
		Запрос.УстановитьПараметр("ПустаяСсылка", ПустаяСсылкаИз);
	КонецЕсли;
	
	Если Не ИспользованиеВстроеннойПочты Тогда 
		Запрос.Текст = Запрос.Текст + "
			| И ТИПЗНАЧЕНИЯ(НастройкаСвязей.СсылкаИз) <> ТИП(Документ.ВходящееПисьмо)
			| И ТИПЗНАЧЕНИЯ(НастройкаСвязей.СсылкаИз) <> ТИП(Документ.ИсходящееПисьмо)
			| И ТИПЗНАЧЕНИЯ(НастройкаСвязей.СсылкаНа) <> ТИП(Документ.ВходящееПисьмо)
			| И ТИПЗНАЧЕНИЯ(НастройкаСвязей.СсылкаНа) <> ТИП(Документ.ИсходящееПисьмо)";
	КонецЕсли;
	
	Если СвязанныйОбъект <> Неопределено Тогда
		Если ТипЗнч(СвязанныйОбъект) = Тип("Строка")
			Или ТипЗнч(СвязанныйОбъект) = Тип("СправочникСсылка.Файлы")
			Или ТипЗнч(СвязанныйОбъект) = Тип("СправочникСсылка.Мероприятия")
			Или ТипЗнч(СвязанныйОбъект) = Тип("СправочникСсылка.Проекты")
			Или ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(СвязанныйОбъект)
			Или ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(СвязанныйОбъект) Тогда
			Запрос.Текст = Запрос.Текст +
			" И (ТИПЗНАЧЕНИЯ(НастройкаСвязей.СсылкаНа) = ТИПЗНАЧЕНИЯ(&СвязанныйОбъект)) ";
			Запрос.УстановитьПараметр("СвязанныйОбъект", СвязанныйОбъект);
		Иначе
			Запрос.Текст = Запрос.Текст +
			" И (НастройкаСвязей.СсылкаНа = &ВидДокументаСсылкаНа
			| ИЛИ НастройкаСвязей.СсылкаНа В (&РодителиСсылкаНа)
			| ИЛИ НастройкаСвязей.СсылкаНа = &ПустаяСсылкаНа) 
			| И НастройкаСвязей.ВидКорреспонденцииДокументНа = &ВидКорреспонденцииНа";
			
			Если ТипЗнч(СвязанныйОбъект) = Тип("Структура") Тогда 
				ВидДокументаСсылкаНа = СвязанныйОбъект.ВидДокумента;
			Иначе 
				ВидДокументаСсылкаНа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвязанныйОбъект, "ВидДокумента");
			КонецЕсли;
			
			РеквизитыВида = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидДокументаСсылкаНа,
				"ЯвляетсяВходящейКорреспонденцией, ЯвляетсяИсходящейКорреспонденцией");
			
			Если РеквизитыВида.ЯвляетсяВходящейКорреспонденцией = Истина Тогда 
				Запрос.УстановитьПараметр("ВидКорреспонденцииНа", Перечисления.ВидыКорреспонденции.Входящая);
				
			ИначеЕсли РеквизитыВида.ЯвляетсяИсходящейКорреспонденцией = Истина Тогда 
				Запрос.УстановитьПараметр("ВидКорреспонденцииНа", Перечисления.ВидыКорреспонденции.Исходящая);
				
			Иначе 
				Запрос.УстановитьПараметр("ВидКорреспонденцииНа", Перечисления.ВидыКорреспонденции.ПустаяСсылка());
			КонецЕсли;
			
			РодителиСсылкаНа = ПолучитьРодителей(ВидДокументаСсылкаНа);
			ПустаяСсылкаНа = Справочники[ВидДокументаСсылкаНа.Метаданные().Имя].ПустаяСсылка();
			
			Запрос.УстановитьПараметр("ВидДокументаСсылкаНа", ВидДокументаСсылкаНа);
			Запрос.УстановитьПараметр("РодителиСсылкаНа", РодителиСсылкаНа);
			Запрос.УстановитьПараметр("ПустаяСсылкаНа", ПустаяСсылкаНа);
		КонецЕсли;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = НастройкиСвязи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		ЗаполнитьТипИПредставлениеСсылки(ТипЗнч(Выборка.СсылкаИз),
			НоваяСтрока.ТипСсылкаИз,
			НоваяСтрока.ТипСсылкаИзПредставление);
		
		ЗаполнитьТипИПредставлениеСсылки(ТипЗнч(Выборка.СсылкаНа),
			НоваяСтрока.ТипСсылкаНа,
			НоваяСтрока.ТипСсылкаНаПредставление);
		
	КонецЦикла;
	
	Возврат НастройкиСвязи;
	
КонецФункции

// Заполняет имя типа и представление типа ссылки.
//
Процедура ЗаполнитьТипИПредставлениеСсылки(Тип, ИмяТипа, ПредставлениеТипа)
	
	Если Тип = Тип("СправочникСсылка.ВидыДокументов")
		Или Тип = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		ИмяТипа = "СправочникСсылка.ДокументыПредприятия";
		ПредставлениеТипа = НСтр("ru = 'Документ'");
	ИначеЕсли Тип = Тип("Строка") Тогда
		ИмяТипа = "Строка";
		ПредставлениеТипа = НСтр("ru = 'Внешняя ссылка'");
	ИначеЕсли Тип = Тип("СправочникСсылка.Файлы") Тогда
		ИмяТипа = "СправочникСсылка.Файлы";
		ПредставлениеТипа = НСтр("ru = 'Файл'");
	ИначеЕсли Тип = Тип("СправочникСсылка.Мероприятия") Тогда
		ИмяТипа = "СправочникСсылка.Мероприятия";
		ПредставлениеТипа = НСтр("ru = 'Мероприятие'");
	ИначеЕсли Тип = Тип("СправочникСсылка.Проекты") Тогда
		ИмяТипа = "СправочникСсылка.Проекты";
		ПредставлениеТипа = НСтр("ru = 'Проект'");
	ИначеЕсли Тип = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
		ИмяТипа = "ДокументСсылка.ВходящееПисьмо";
		ПредставлениеТипа = НСтр("ru = 'Входящее письмо'");
	ИначеЕсли Тип = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
		ИмяТипа = "ДокументСсылка.ИсходящееПисьмо";
		ПредставлениеТипа = НСтр("ru = 'Исходящее письмо'");
	КонецЕсли;
		
КонецПроцедуры

Процедура УстановитьСвязь(
	Объект,
	НачальныйСвязанныйОбъект,
	СвязанныйОбъект,
	ТипСвязи,
	Установил = Неопределено,
	ДатаУстановки = Неопределено,
	Комментарий = "",
	ДополнительныйОбъектСвязи = Неопределено,
	ПисатьПротокол = Ложь) Экспорт
	
	Если НачальныйСвязанныйОбъект = СвязанныйОбъект Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НачальныйСвязанныйОбъект) Тогда
		Если ЗначениеЗаполнено(СвязанныйОбъект) Тогда
			СвязиОбъектов.УдалитьСвязь(Объект, НачальныйСвязанныйОбъект, ТипСвязи, ДополнительныйОбъектСвязи);
			СвязиОбъектов.СоздатьСвязь(Объект, СвязанныйОбъект, ТипСвязи, Установил,
				ДатаУстановки, Комментарий,, ДополнительныйОбъектСвязи);
		Иначе
			СвязиОбъектов.УдалитьСвязь(Объект, НачальныйСвязанныйОбъект, ТипСвязи, ДополнительныйОбъектСвязи);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(СвязанныйОбъект) Тогда
			СвязиОбъектов.СоздатьСвязь(Объект, СвязанныйОбъект, ТипСвязи, Установил, ДатаУстановки, Комментарий,,
				ДополнительныйОбъектСвязи);
		КонецЕсли;
	КонецЕсли;
	
	НачальныйСвязанныйОбъект = СвязанныйОбъект;
	
	Если ПисатьПротокол Тогда
		ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(
			Объект,
			СтрШаблон(НСтр("ru = 'Добавление связи ""%1""'"), ТипСвязи)
		);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбновитьСвязиОбъекта(СвязанныйОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СвязиОбъектов.Объект,
		|	СвязиОбъектов.ТипСвязи,
		|	СвязиОбъектов.СвязанныйОбъект
		|ИЗ
		|	РегистрСведений.СвязиОбъектов КАК СвязиОбъектов
		|ГДЕ
		|	СвязиОбъектов.СвязанныйОбъект = &СвязанныйОбъект";
	Запрос.УстановитьПараметр("СвязанныйОбъект", СвязанныйОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.СвязиОбъектов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект = Выборка.Объект;
		МенеджерЗаписи.ТипСвязи = Выборка.ТипСвязи;
		МенеджерЗаписи.СвязанныйОбъект = Выборка.СвязанныйОбъект;
		МенеджерЗаписи.СвязаннаяСтрока = "";
		МенеджерЗаписи.Прочитать();
		
		Если ДелопроизводствоКлиентСервер.ЭтоИсходящийДокумент(СвязанныйОбъект) Тогда
			КорреспонденцияДокумента = РаботаСКорреспонденцией.КорреспонденцияДокумента(СвязанныйОбъект);
			Если ЗначениеЗаполнено(КорреспонденцияДокумента) Тогда
				Получатели = КорреспонденцияДокумента.Корреспонденты;
				Отправлен = Ложь;
				Если Получатели.Количество() = 1 Тогда
					Отправлен = Получатели[0].Отправлен;
					
				ИначеЕсли Получатели.Найти(Ложь, "Отправлен") = Неопределено Тогда
					Отправлен = Истина;
					
				ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(Выборка.Объект) Тогда
					КорреспонденцияВходящего = РаботаСКорреспонденцией.КорреспонденцияДокумента(Выборка.Объект);
					СтрокаКорреспонденцииВходящего = КорреспонденцияВходящего.Корреспонденты[0];
					ПараметрыОтбора = Новый Структура("Корреспондент", СтрокаКорреспонденцииВходящего.Корреспондент);
					НайденныеСтроки = Получатели.НайтиСтроки(ПараметрыОтбора);
					Если НайденныеСтроки.Количество() = 1 Тогда
						Отправлен = НайденныеСтроки[0].Отправлен;
					Иначе
						ПараметрыОтбора = Новый Структура("Корреспондент, Адресат", 
							СтрокаКорреспонденцииВходящего.Корреспондент, СтрокаКорреспонденцииВходящего.Адресат);
						НайденныеСтроки = Получатели.НайтиСтроки(ПараметрыОтбора);
						Если НайденныеСтроки.Количество() = 1 Тогда
							Отправлен = НайденныеСтроки[0].Отправлен;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				Если Отправлен <> МенеджерЗаписи.СвязанныйОбъектОтправлен Тогда
					МенеджерЗаписи.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

// Установить реквизиты при добавлении связи.
// 
// Параметры:
//  ДокументСсылка  - СправочникССылка.ДокументыПредприятия
//  УникальныйИдентификаторДокумента - УникальныйИдентификатор
//  ТипСвязи  - СправочникССылка.ТипыСвязей
//  ДокументЗарегистрирован - Булево
//  ДатаОкончанияДействия - Дата
// 
// Возвращаемое значение:
//  Булево - реквизиты документа изменены
Функция УстановитьРеквизитыПриДобавленииСвязи(ДокументСсылка, 
	УникальныйИдентификаторДокумента, ТипСвязи,
	ДокументЗарегистрирован = Ложь,
	ДатаОкончанияДействия = Неопределено) Экспорт
	
	РеквизитыИзменены = Ложь;
	Если ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(ДокументСсылка) Тогда
		КорреспонденцияДокумента = РаботаСКорреспонденцией.КорреспонденцияДокумента(ДокументСсылка);
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КорреспонденцияДокумента,
			"ЭтоПовторноеОбращение, ЭтоДубликатОбращения");
		
		Если (ТипСвязи = Справочники.ТипыСвязей.ПервичноеОбращение) И (Не РеквизитыДокумента.ЭтоПовторноеОбращение) Тогда
			ЗаблокироватьДанныеДляРедактирования(ДокументСсылка, , УникальныйИдентификаторДокумента);
			ДокументОбъект = КорреспонденцияДокумента.ПолучитьОбъект();
			ДокументОбъект.ЭтоПовторноеОбращение = Истина;
			ДокументОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(ДокументОбъект.Ссылка, УникальныйИдентификаторДокумента);
			РеквизитыИзменены = Истина;
		КонецЕсли;
	
		Если (ТипСвязи = Справочники.ТипыСвязей.ОсновноеОбращение) И (Не РеквизитыДокумента.ЭтоДубликатОбращения) Тогда
			ЗаблокироватьДанныеДляРедактирования(ДокументСсылка, , УникальныйИдентификаторДокумента);
			ДокументОбъект = КорреспонденцияДокумента.ПолучитьОбъект();
			ДокументОбъект.ЭтоДубликатОбращения = Истина;
			ДокументОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(ДокументОбъект.Ссылка, УникальныйИдентификаторДокумента);
			РеквизитыИзменены = Истина;
		КонецЕсли;

	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		
		Если ТипСвязи = Справочники.ТипыСвязей.НеДействуетВСоответствии
			И ДокументЗарегистрирован
			И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "НеДействует") Тогда
			
			ЗаблокироватьДанныеДляРедактирования(ДокументСсылка, , УникальныйИдентификаторДокумента);
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.НеДействует = Истина;
			
			Если ЗначениеЗаполнено(ДатаОкончанияДействия) Тогда
				ДокументОбъект.ДатаОкончанияДействия = ДатаОкончанияДействия;
			Иначе	
				ДокументОбъект.ДатаОкончанияДействия = ТекущаяДатаСеанса();
			КонецЕсли;	
			
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.ВидДокумента, "УчитыватьСрокДействия") = Истина
				И (НачалоДня(ДокументОбъект.ДатаОкончанияДействия) <> НачалоДня(ТекущаяДатаСеанса()) 
				Или  ДокументОбъект.Бессрочный <> Ложь 
				Или ДокументОбъект.ПорядокПродления <> Перечисления.ПорядокПродления.НеПродлевается) Тогда
				
				Если Не ЗначениеЗаполнено(ДатаОкончанияДействия) Тогда	
					ДокументОбъект.ДатаОкончанияДействия = ТекущаяДатаСеанса();
				КонецЕсли;	
				
				ДокументОбъект.Бессрочный = Ложь;
				ДокументОбъект.ПорядокПродления = Перечисления.ПорядокПродления.НеПродлевается;
			КонецЕсли;
			
			ДокументОбъект.ДополнительныеСвойства.Вставить("РазрешитьЗаписьОбъектаИзДругойСистемы", Истина);	
			
			ДокументОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(ДокументОбъект.Ссылка, УникальныйИдентификаторДокумента);
			РеквизитыИзменены = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РеквизитыИзменены;
	
КонецФункции

Функция УстановитьРеквизитыПриУдаленииСвязи(ДокументСсылка, УникальныйИдентификаторДокумента, ТипСвязи) Экспорт
	
	РеквизитыИзменены = Ложь;
	Если ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(ДокументСсылка) Тогда
		
		КорреспонденцияДокумента = РаботаСКорреспонденцией.КорреспонденцияДокумента(ДокументСсылка);
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КорреспонденцияДокумента,
			"ЭтоПовторноеОбращение, ЭтоДубликатОбращения");
		
		Если (ТипСвязи = Справочники.ТипыСвязей.ПервичноеОбращение) И РеквизитыДокумента.ЭтоПовторноеОбращение Тогда
			ЗаблокироватьДанныеДляРедактирования(КорреспонденцияДокумента, , УникальныйИдентификаторДокумента);
			ДокументОбъект = КорреспонденцияДокумента.ПолучитьОбъект();
			ДокументОбъект.ЭтоПовторноеОбращение = Ложь;
			ДокументОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(ДокументОбъект.Ссылка, УникальныйИдентификаторДокумента);
			РеквизитыИзменены = Истина;
		КонецЕсли;
	
		Если (ТипСвязи = Справочники.ТипыСвязей.ОсновноеОбращение) И РеквизитыДокумента.ЭтоДубликатОбращения Тогда
			ЗаблокироватьДанныеДляРедактирования(КорреспонденцияДокумента, , УникальныйИдентификаторДокумента);
			ДокументОбъект = КорреспонденцияДокумента.ПолучитьОбъект();
			ДокументОбъект.ЭтоДубликатОбращения = Ложь;
			ДокументОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(ДокументОбъект.Ссылка, УникальныйИдентификаторДокумента);
			РеквизитыИзменены = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		
		Если ТипСвязи = Справочники.ТипыСвязей.НеДействуетВСоответствии
			И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "НеДействует") Тогда
			ЗаблокироватьДанныеДляРедактирования(ДокументСсылка, , УникальныйИдентификаторДокумента);
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.НеДействует = Ложь;
			ДокументОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(ДокументОбъект.Ссылка, УникальныйИдентификаторДокумента);
			РеквизитыИзменены = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РеквизитыИзменены;
	
КонецФункции

// Пересчитывает ресурсы ОтправленОтвет и Переслан регистра сведений
// КешИнформацииОбОбъектах.
//
Процедура ОбновитьКешИнформацииОбОбъектах() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВнешняяТранзакция = ТранзакцияАктивна();
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		
		НаборЗаписей = РегистрыСведений.КешИнформацииОбОбъектах.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		Для каждого Запись Из НаборЗаписей Цикл
			Запись.ОтправленОтвет = Ложь;
			Запись.Переслан = Ложь;
			Запись.ПолученОтвет = Ложь;
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СвязиОбъектов.Объект КАК Ссылка,
			|	ВЫБОР
			|		КОГДА СвязиОбъектов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ОтправленоОтветноеПисьмо)
			|				ИЛИ СвязиОбъектов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ОтправленОтветныйДокумент)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ОтправленОтвет,
			|	ВЫБОР
			|		КОГДА СвязиОбъектов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПересланоПисьмом)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК Переслан,
			|	ВЫБОР
			|		КОГДА СвязиОбъектов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученоОтветноеПисьмо)
			|				ИЛИ СвязиОбъектов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученОтветныйДокумент)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ПолученОтвет
			|ИЗ
			|	РегистрСведений.СвязиОбъектов КАК СвязиОбъектов
			|ГДЕ
			|	(СвязиОбъектов.Объект ССЫЛКА Документ.ВходящееПисьмо
			|			ИЛИ СвязиОбъектов.Объект ССЫЛКА Документ.ИсходящееПисьмо)
			|	И (СвязиОбъектов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ОтправленоОтветноеПисьмо)
			|			ИЛИ СвязиОбъектов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ОтправленОтветныйДокумент)
			|			ИЛИ СвязиОбъектов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПересланоПисьмом)
			|			ИЛИ СвязиОбъектов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученоОтветноеПисьмо)
			|			ИЛИ СвязиОбъектов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученОтветныйДокумент))");
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ОтправленОтвет Тогда
				РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(
					Выборка.Ссылка,
					"ОтправленОтвет",
					Истина);
			ИначеЕсли Выборка.Переслан Тогда
				РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(
					Выборка.Ссылка,
					"Переслан",
					Истина);
			ИначеЕсли Выборка.ПолученОтвет Тогда
				РегистрыСведений.КешИнформацииОбОбъектах.УстановитьПризнак(
					Выборка.Ссылка,
					"ПолученОтвет",
					Истина);
			КонецЕсли;
		КонецЦикла;
		
		Если Не ВнешняяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает имя ресурса в регистре сведений КешИнформацииОбОбъекте для
// указанного типа связи.
//
Функция ПолучитьИмяПризнакаДляТипаСвязи(ТипСвязи) Экспорт
	
	Если ТипСвязи = Справочники.ТипыСвязей.ОтправленоОтветноеПисьмо
		Или ТипСвязи = Справочники.ТипыСвязей.ОтправленОтветныйДокумент Тогда
		Возврат "ОтправленОтвет";
	ИначеЕсли ТипСвязи = Справочники.ТипыСвязей.ПересланоПисьмом Тогда
		Возврат "Переслан";
	ИначеЕсли ТипСвязи = Справочники.ТипыСвязей.ПеренаправленоПисьмом Тогда
		Возврат "Перенаправлен";
	ИначеЕсли ТипСвязи = Справочники.ТипыСвязей.ПолученоОтветноеПисьмо
		Или ТипСвязи = Справочники.ТипыСвязей.ПолученОтветныйДокумент Тогда
		Возврат "ПолученОтвет";
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректный тип связи письма'");
	КонецЕсли;
	
КонецФункции

// Проверяет возможность установки проверяемого типа связи между проверяемыми документами 
//
// Параметры:
//  Документ  	 			  - Любая ссылка - документ основание связи
//  СвязанныйДокумент	 	  - Любая ссылка - документ с которым пытаемся создать связь
//  ТипСвязи			  	  - Справочник.ТипыСвязи - проверяемый тип связи
//
// Возвращаемое значение
//    Булево - Истина - если между проверяемыми документами возможно установить проверяемый тип связи
//			   Ложь - в противном случае
//
Функция ЭтоПодходящийТипСвязи(ОбъектСсылка, СвязанныйОбъект, ТипСвязи) Экспорт 
	
	Если ТипСвязи = Справочники.ТипыСвязей.ПервичноеОбращение 
		Или ТипСвязи = Справочники.ТипыСвязей.ПовторноеОбращение
		Или ТипСвязи = Справочники.ТипыСвязей.ОсновноеОбращение
		Или ТипСвязи = Справочники.ТипыСвязей.Дубликат Тогда 
		ВестиУчетОбращенийГраждан = ПолучитьФункциональнуюОпцию("ВестиУчетОбращенийГраждан");
		
		Если Не ВестиУчетОбращенийГраждан Тогда
			Возврат Ложь;
		ИначеЕсли ЗначениеЗаполнено(СвязанныйОбъект)
			И ТипЗнч(СвязанныйОбъект) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда 
			УчитыватьКакОбращениеГраждан = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвязанныйОбъект,
				"ВидДокумента.ЯвляетсяОбращениемОтГраждан");
			
			Если УчитыватьКакОбращениеГраждан = Ложь Тогда 
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	
	ИначеЕсли ТипСвязи = Справочники.ТипыСвязей.Содержит 
		И Не РаботаСКомплектамиДокументовСервер.ЭтоКомплект(ОбъектСсылка) Тогда
		Возврат Ложь;
	ИначеЕсли ТипСвязи = Справочники.ТипыСвязей.ВходитВКомплект 
		И Не РаботаСКомплектамиДокументовСервер.ЭтоКомплект(СвязанныйОбъект) Тогда
		Возврат Ложь;
	ИначеЕсли ТипСвязи = Справочники.ТипыСвязей.ДелаетНеДействующим  Тогда
		Возврат Ложь;
	ИначеЕсли ТипСвязи = Справочники.ТипыСвязей.НеДействуетВСоответствии Тогда
		Возврат Ложь;
		
	//* Эти связи временно исключаем, они ставятся программно  
	ИначеЕсли ТипСвязи = Справочники.ТипыСвязей.ПерепискаПоПредмету
		Или ТипСвязи = Справочники.ТипыСвязей.ПредметПереписки Тогда  
		Возврат Ложь;
	
	//* Связи в ответ на и переадресация временно исключаем, они ставятся программно  
	ИначеЕсли ТипСвязи = Справочники.ТипыСвязей.ПолученВОтветНа 
		Или ТипСвязи = Справочники.ТипыСвязей.ПолученОтвет
		Или ТипСвязи = Справочники.ТипыСвязей.ОтправленВОтветНа
		Или ТипСвязи = Справочники.ТипыСвязей.ОтправленОтвет
		Или ТипСвязи = Справочники.ТипыСвязей.ПереадресацияДокумента
		Или ТипСвязи = Справочники.ТипыСвязей.ПереадресованДокументом
		Или ТипСвязи = Справочники.ТипыСвязей.ОтветПереадресовавшему
		Или ТипСвязи = Справочники.ТипыСвязей.ВОтветНаПереадресованное Тогда 
		Возврат Ложь;
		
	// Эти связи устанавливаются только программно
	ИначеЕсли ТипСвязи = Справочники.ТипыСвязей.ПереадресованДокументомПоВопросу
		Или ТипСвязи = Справочники.ТипыСвязей.ПереадресацияДокументаПоВопросу
		Или ТипСвязи = Справочники.ТипыСвязей.Исправление
		Или ТипСвязи = Справочники.ТипыСвязей.ИсправлениеК 
		Или ТипСвязи = Справочники.ТипыСвязей.Корректировка
		Или ТипСвязи = Справочники.ТипыСвязей.КорректировкаК Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

Функция ПолучитьВсеСвязиОбъекта(Объект, ПолучатьПомеченныеНаУдаление = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязиОбъектов.СвязанныйОбъект КАК СвязанныйОбъект,
		|	СвязиОбъектов.Комментарий КАК Комментарий,
		|	СвязиОбъектов.Установил КАК Установил,
		|	СвязиОбъектов.ДатаУстановки КАК ДатаУстановки,
		|	СвязиОбъектов.ТипСвязи КАК ТипСвязи,
		|	СвязиОбъектов.ДополнительныйОбъектСвязи КАК ДополнительныйОбъектСвязи
		|ИЗ
		|	РегистрСведений.СвязиОбъектов КАК СвязиОбъектов
		|ГДЕ
		|	СвязиОбъектов.Объект = &Объект";
		
	Если НЕ ПолучатьПомеченныеНаУдаление Тогда
		Запрос.Текст = Запрос.Текст + " И СвязиОбъектов.СвязанныйОбъект.ПометкаУдаления = ЛОЖЬ";
	КонецЕсли;	
		
	Запрос.УстановитьПараметр("Объект", Объект);
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции

// Возвращает список всех типов связей, которые установлены с проверяемыми документами 
//
// Параметры:
//  МассивДокументов - Массив - документы, для которых ищем установленные типы связи 
//
// Возвращаемое значение:
//  ТипыСвязей - СписокЗначений - список всех типов связей, которые установлены с проверяемыми документами
//
Функция ПолучитьАктуальныеТипыСвязейОбъектов(МассивОбъектов) Экспорт 
	
	ТипыСвязей = Новый СписокЗначений;
	Если МассивОбъектов.Количество() = 0 Тогда
		Возврат ТипыСвязей;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СвязиОбъектов.ТипСвязи
		|ИЗ
		|	РегистрСведений.СвязиОбъектов КАК СвязиОбъектов
		|ГДЕ
		|	СвязиОбъектов.Объект В(&МассивОбъектов)";
		
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТипыСвязей.Добавить(Выборка.ТипСвязи);
	КонецЦикла;
	
	Возврат ТипыСвязей;
	
КонецФункции

// Возвращает документы, рабочие группы которых связаны с текщим документом.
//
// Параметры
//    Объект - любая ссылка - проверяемый Объект
//
// Возвращаемое значение
//    МассивОбъектов - массив - массив Объектов оснований, для которых будет расширена рабочая группа
//
Функция СвязанныеОбъектыДляРасширенияРабочихГрупп(Объект, ВариантСинхронизации) Экспорт
	
	МассивОбъектов = Новый Массив;
	МассивСвязанныхОбъектов = ПолучитьВсеСвязиОбъекта(Объект, Ложь);
	
	Для Каждого Связь Из МассивСвязанныхОбъектов Цикл 
		Настройка = ПолучитьНастройкуСвязи(Объект, Связь.СвязанныйОбъект, Связь.ТипСвязи);
		Если Настройка = Неопределено 
			Или Настройка.СинхронизироватьДоступ <> ВариантСинхронизации Тогда 
			Продолжить;
		КонецЕсли;
			
		Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Связь.СвязанныйОбъект)
			И РаботаСРабочимиГруппами.ПоОбъектуВедетсяАвтоматическоеЗаполнениеРабочейГруппы(Связь.СвязанныйОбъект) Тогда 
			МассивОбъектов.Добавить(Связь.СвязанныйОбъект);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивОбъектов;
	
КонецФункции

// Возвращает краткие сведения о связях документа. (имя связи1: сколько документов,  имя связи2: сколько документов,....)
// Параметры
//  Документ - СправочникССылка.ДокументыПредприятия
//  ВажныхСвязей - Число - возвращаемое значение
//
// Возвращаемое значение -Строка
Функция КраткиеСведенияОСвязях(Документ, ВажныхСвязей = 0) Экспорт
	
	КраткиеСведенияОСвязях = "";
	
	УстановитьПривилегированныйРежим(Истина);
	
	СведенияОСвязях = Новый Массив;
	ВсегоСвязей = 0;
	ВажныхСвязей = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СвязиОбъектов.ТипСвязи КАК ТипСвязи,
		|	СвязиОбъектов.Объект КАК Документ,
		|	СвязиОбъектов.СвязанныйОбъект КАК СвязанныйОбъект,
		|	0 КАК Важная,
		|	1 КАК ЧислоСвязей,
		|	ТипыСвязей.СокращенноеНаименование КАК СокращенноеНаименование
		|ИЗ
		|	РегистрСведений.СвязиОбъектов КАК СвязиОбъектов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыСвязей КАК ТипыСвязей
		|		ПО СвязиОбъектов.ТипСвязи = ТипыСвязей.Ссылка
		|ГДЕ
		|	СвязиОбъектов.Объект = &Документ";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	ТаблицаСвязи = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр Из ТаблицаСвязи Цикл 
		НастройкаСвязи = ПолучитьНастройкуСвязи(Стр.Документ, Стр.СвязанныйОбъект, Стр.ТипСвязи);
		Если НастройкаСвязи <> Неопределено И НастройкаСвязи.Важная Тогда
			Стр.Важная = 1;
		КонецЕсли;	
	КонецЦикла;	
	
	ТаблицаСвязи.Сортировать("ТипСвязи");
	
	ТаблицаСвязиСокращенная = Новый ТаблицаЗначений;
	ТаблицаСвязиСокращенная.Колонки.Добавить("СокращенноеНаименование", 
		Новый ОписаниеТипов("Строка"));
	ТаблицаСвязиСокращенная.Колонки.Добавить("ЧислоСвязей", 
		Новый ОписаниеТипов("Число"));
	
	ПредТипСвязи = Неопределено;
	СокращенноеНаименование = "";
	ЧислоСвязей = 0;
	Для Каждого Стр Из ТаблицаСвязи Цикл 
		
		ВсегоСвязей = ВсегоСвязей + 1;
		
		Если ЗначениеЗаполнено(ПредТипСвязи)
			И ПредТипСвязи <> Стр.ТипСвязи
			И ЧислоСвязей <> 0 Тогда
			
			НовСтр = ТаблицаСвязиСокращенная.Добавить();
			НовСтр.СокращенноеНаименование = СокращенноеНаименование;
			НовСтр.ЧислоСвязей = ЧислоСвязей;
			
			СокращенноеНаименование = "";
			ЧислоСвязей = 0;
			
		КонецЕсли;	
		
		Если Стр.Важная = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		ВажныхСвязей = ВажныхСвязей + 1;
		
		ПредТипСвязи = Стр.ТипСвязи;
		СокращенноеНаименование = Стр.СокращенноеНаименование;
		ЧислоСвязей = ЧислоСвязей + 1;

	КонецЦикла;	
	
	Если ЧислоСвязей <> 0 Тогда
		
		НовСтр = ТаблицаСвязиСокращенная.Добавить();
		НовСтр.СокращенноеНаименование = СокращенноеНаименование;
		НовСтр.ЧислоСвязей = ЧислоСвязей;
		
	КонецЕсли;	
			
	ТаблицаСвязиСокращенная.Сортировать("СокращенноеНаименование");
	
	Для Каждого Стр Из ТаблицаСвязиСокращенная Цикл 
		
		Если ТаблицаСвязиСокращенная.Количество() > 1 Тогда
		
			СведенияОСвязях.Добавить(
				СтрШаблон(
					НСтр("ru='%1: %2'"),
					Стр.СокращенноеНаименование,
					Формат(Стр.ЧислоСвязей, "ЧРГ=; ЧН=0; ЧГ=")));
				
		Иначе
			
			СведенияОСвязях.Добавить(
				СтрШаблон(
					НСтр("ru='%1'"),
					Стр.СокращенноеНаименование));
			
		КонецЕсли;		
		
	КонецЦикла;	
	
	Если ВажныхСвязей = 0 Тогда
		Возврат "";
	КонецЕсли;	
	
	СведенияОСвязях.Вставить(0,
		СтрШаблон(НСтр("ru='Связей: %1'"), Формат(ВажныхСвязей, "ЧРГ=; ЧН=0; ЧГ=")));
		
	КраткиеСведенияОСвязях = СтрСоединить(СведенияОСвязях, ". ");	
	
	Возврат КраткиеСведенияОСвязях;
	
КонецФункции

// Прочитать все данные для показа в карточке документа (далее в форме ВводНеДействующихДокументов)
// 
// Параметры:
//  ДокументСсылка - СправочникССылка.ДокументыПредприятия
//  РегистрационныйНомер  - Строка
//  СписокНеДействующихДокументов - таблица формы (Документ ДатаОтмены УжеУстановлен Источник)
Процедура ПрочитатьНеДействующие(ДокументСсылка, РегистрационныйНомер, СписокНеДействующихДокументов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивДок = РегистрыСведений.ОтменяемыеДокументы.ПрочитатьДанные(ДокументСсылка);
	Для Каждого Строка Из МассивДок Цикл
		НовСтр = СписокНеДействующихДокументов.Добавить();
		НовСтр.Документ = Строка.Документ;
		НовСтр.ДатаОтмены = Строка.ДатаОтмены;
		НовСтр.УжеУстановлен = Ложь;
		НовСтр.Источник = "ОтменяемыеДокументы";
	КонецЦикла;	
	МассивДок = ПолучитьСвязанныеОбъекты(ДокументСсылка, Справочники.ТипыСвязей.ДелаетНеДействующим);
	Для Каждого Док Из МассивДок Цикл
		НовСтр = СписокНеДействующихДокументов.Добавить();
		НовСтр.Документ = Док;
		НовСтр.УжеУстановлен = ЗначениеЗаполнено(РегистрационныйНомер);
		НовСтр.Источник = "СвязиОбъектов";
	КонецЦикла;	
	МассивДок = РегистрыСведений.ОтложеннаяУстановкаСвязей.ПрочитатьДанные(ДокументСсылка, Справочники.ТипыСвязей.ДелаетНеДействующим);
	Для Каждого Строка Из МассивДок Цикл
		НовСтр = СписокНеДействующихДокументов.Добавить();
		НовСтр.Документ = Строка.Документ;
		НовСтр.ДатаОтмены = Строка.ДатаОтмены;
		НовСтр.УжеУстановлен = Ложь;
		НовСтр.Источник = "ОтложеннаяУстановкаСвязей";
	КонецЦикла;	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры	

// Пишет данные, введенные в диалоге ВводНеДействующихДокументов
// либюо сразу в связи, либо в РС ОтложеннаяУстановкаСвязей, либо в РС ОтложеннаяУстановкаСвязей 
// 
// Параметры:
//  Документ  - СправочникССылка.ДокументыПредприятия
//  НачальныйСписокДокументов  - таблица формы (Документ ДатаОтмены УжеУстановлен Источник) - начальное значение на момент открытия формы документа
//  СписокДокументов Список - таблица формы (Документ ДатаОтмены УжеУстановлен Источник)
//  ТипСвязи  - СправочникССылка.ТипыСвязей
//  Установил - СправочникСсылка.Сотрудники
//  ДатаУстановки - Дата
//  Комментарий - Строка
//  ЭтоРегистрация - Булево - Это регистрация
//  ДокументЗарегистрирован - Булево - Документ зарегистрирован
Процедура УстановитьДелаетНеДействующим(
	Документ,
	НачальныйСписокДокументов,
	СписокДокументов,
	ТипСвязи,
	Установил = Неопределено,
	ДатаУстановки = Неопределено,
	Комментарий = "",
	ЭтоРегистрация = Ложь,
	ДокументЗарегистрирован = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если заполнена дата: и если ЭтоРегистрация, 
	//  то стираем из РС ОтложеннаяУстановкаСвязей, и пишем в Связи
	
	ТекущаяДата = НачалоДня(ТекущаяДата());
	
	Расширить = Ложь;
	
	// Очистим старые связи - неважно, изменились или нет
	Для Каждого СтрокаДокумент Из НачальныйСписокДокументов Цикл 
		
		Если СтрокаДокумент.Источник = "СвязиОбъектов" Тогда
			УдалитьСвязь(Документ, СтрокаДокумент.Документ, ТипСвязи);
		ИначеЕсли СтрокаДокумент.Источник = "ОтложеннаяУстановкаСвязей" Тогда
			РегистрыСведений.ОтложеннаяУстановкаСвязей.УдалитьДанные(Документ, СтрокаДокумент.Документ, ТипСвязи);
		ИначеЕсли СтрокаДокумент.Источник = "ОтменяемыеДокументы" Тогда
			РегистрыСведений.ОтменяемыеДокументы.УдалитьДанные(Документ, СтрокаДокумент.Документ);
		КонецЕсли;	
		
	КонецЦикла;
	
	ОписаниеСтрока = НСтр("ru = 'УстановитьДелаетНеДействующим.'");
	ЕстьСтроки = Ложь;
	
	// всегда запишем новые связи
	Для Каждого СтрокаДокумент Из СписокДокументов Цикл 
		
		ЕстьСтроки = Истина;
		ОписаниеСтрока = ОписаниеСтрока + Символы.ВК 
			+ СтрШаблон(НСтр("ru = 'Документ %1.  ДатаОтмены %2'"), СтрокаДокумент.Документ, СтрокаДокумент.ДатаОтмены);
		
		НастройкаСвязи = ПолучитьНастройкуСвязи(Документ, СтрокаДокумент.Документ, Справочники.ТипыСвязей.ДелаетНеДействующим);	
		
		Если НастройкаСвязи <> Неопределено
			И (НастройкаСвязи.СинхронизироватьДоступ = Перечисления.ВариантыСинхронизацииДоступа.Копировать
				Или НастройкаСвязи.СинхронизироватьДоступ = Перечисления.ВариантыСинхронизацииДоступа.Расширять) Тогда 
			Расширить = Истина;
		КонецЕсли;
		
		Если ДокументЗарегистрирован = Ложь Тогда
			
			РегистрыСведений.ОтменяемыеДокументы.ЗаписатьДанные(Документ, СтрокаДокумент.Документ, 
				СтрокаДокумент.ДатаОтмены);
			СтрокаДокумент.Источник = "ОтменяемыеДокументы";	
			
		Иначе
			
			Если Не ЗначениеЗаполнено(СтрокаДокумент.ДатаОтмены)
				Или (ЗначениеЗаполнено(СтрокаДокумент.ДатаОтмены) И СтрокаДокумент.ДатаОтмены < ТекущаяДата) Тогда 

				СоздатьСвязь(Документ, СтрокаДокумент.Документ, ТипСвязи, Установил, ДатаУстановки, Комментарий);
				СтрокаДокумент.Источник = "СвязиОбъектов";
				
			Иначе	
					
				РегистрыСведений.ОтложеннаяУстановкаСвязей.ЗаписатьДанные(Документ, СтрокаДокумент.Документ, ТипСвязи, 
					СтрокаДокумент.ДатаОтмены);
				СтрокаДокумент.Источник = "ОтложеннаяУстановкаСвязей";	
					
			КонецЕсли;	
				
		КонецЕсли;	
		
	КонецЦикла;
	
	Если ЕстьСтроки Тогда
		ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(Документ,
			ОписаниеСтрока);
	КонецЕсли;		
	
	// Перезаполнение рабочих групп связанных объектов.
	Если Расширить Тогда 
		РаботаСРабочимиГруппами.РасширитьРабочуюГруппуСвязанныхОбъектов(Документ);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция МассивТиповВажныхСвязей(ВидДокументаСсылкаИз) 
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипыСвязей = Новый Соответствие;
	
	РодителиСсылкаИз = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкаСвязей.ТипСвязи КАК ТипСвязи
		|ИЗ
		|	РегистрСведений.НастройкаСвязей КАК НастройкаСвязей
		|ГДЕ
		|	НастройкаСвязей.Важная = ИСТИНА
		|	И (НастройкаСвязей.СсылкаИз = &ВидДокумента
		|			ИЛИ НастройкаСвязей.СсылкаИз В (&Родители)
		|			ИЛИ НастройкаСвязей.СсылкаИз = &ПустаяСсылка)
		|	И НастройкаСвязей.ВидКорреспонденцииДокументИз = &ВидКорреспонденцииИз";
	
	РодителиСсылкаИз = Неопределено;
	
	ПустаяСсылкаИз = Справочники[ВидДокументаСсылкаИз.Метаданные().Имя].ПустаяСсылка();

	РеквизитыВида = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидДокументаСсылкаИз,
		"ЯвляетсяВходящейКорреспонденцией, ЯвляетсяИсходящейКорреспонденцией, Родитель");
	// ПолучитьРодителей вызовм только если Родитель непусто.
		
	Если ЗначениеЗаполнено(РеквизитыВида.Родитель) Тогда
		РодителиСсылкаИз = ПолучитьРодителей(ВидДокументаСсылкаИз);	
	КонецЕсли;	
		
	Если РеквизитыВида.ЯвляетсяВходящейКорреспонденцией = Истина Тогда 
		Запрос.УстановитьПараметр("ВидКорреспонденцииИз", Перечисления.ВидыКорреспонденции.Входящая);
		
	ИначеЕсли РеквизитыВида.ЯвляетсяИсходящейКорреспонденцией = Истина Тогда 
		Запрос.УстановитьПараметр("ВидКорреспонденцииИз", Перечисления.ВидыКорреспонденции.Исходящая);
		
	Иначе 
		Запрос.УстановитьПараметр("ВидКорреспонденцииИз", Перечисления.ВидыКорреспонденции.ПустаяСсылка());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокументаСсылкаИз);
	Запрос.УстановитьПараметр("Родители", 	  РодителиСсылкаИз);
	Запрос.УстановитьПараметр("ПустаяСсылка", ПустаяСсылкаИз);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТипыСвязей.Вставить(Выборка.ТипСвязи, 1);
		
	КонецЦикла;
	
	Возврат ТипыСвязей;

КонецФункции	

// Вернет Соответствие (Документ, КолвоВажныхСвязей)
// 
// Параметры:
//    МассивДокументов - Массив из Структура
//   * Ссылка                - СправочникСсылка.ДокументыПредприятия
//   * ВидДокумента 		 - СправочникСсылка.ВидыДокументов
Функция ЧислоВажныхСвязейДокументов(МассивДокументов) Экспорт   
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатСоответствие = Новый Соответствие; // ключ - Документ, Значение - число связей
	
	КешНастроекСвязей = Новый Соответствие;  // (Ключ - ВидДокумента, Значение - Соответствие из спр.ТипыСвязей)
	
	КешВидыДокументов = Новый Соответствие;  // (Ключ - Документ, Значение - ВидДокумента)

	// в цикле по кажлому виду документов получим типы связей только важные
	// сперва найдя в кеше (Ключ - ВидДокумента, Значение - Массив из спр.ТипыСвязей)
	//  - если нет в кеше, тогда ищем. 
	
	МассивССылок = Новый Массив;
	
	Для Каждого ОписаниеДокумента Из МассивДокументов Цикл      
		
		ВидДокумента = ОписаниеДокумента.ВидДокумента;  
		
		МассивССылок.Добавить(ОписаниеДокумента.Ссылка);
		КешВидыДокументов[ОписаниеДокумента.Ссылка] = ВидДокумента;
		
		ТипыСвязей = КешНастроекСвязей.Получить(ВидДокумента);
		
		Если ТипыСвязей = Неопределено Тогда
			
			ТипыСвязей = МассивТиповВажныхСвязей(ВидДокумента);
			
			КешНастроекСвязей[ВидДокумента] = ТипыСвязей;
			
		КонецЕсли;	
		
	КонецЦикла;
		
	
	// как тут (Функция ПолучитьВсеСвязиОбъекта), или как тут ПолучитьСвязанныеОбъектыПоМассивуОбъектов 
	// но по массиву документов  получим все связи.
	// прогоним их по типам.
	// найдем сумму по каждому документу.

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СвязиОбъектов.ТипСвязи КАК ТипСвязи,
		|	СвязиОбъектов.Объект КАК Объект
		|ИЗ
		|	РегистрСведений.СвязиОбъектов КАК СвязиОбъектов
		|ГДЕ
		|	СвязиОбъектов.Объект В(&Объекты)
		|ИТОГИ ПО
		|	Объект";
	
	Запрос.УстановитьПараметр("Объекты", МассивССылок);
	РезультатЗапроса = Запрос.Выполнить();
	
	ДеревоВыборки = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);	

	Для каждого СтрокаДокумента Из ДеревоВыборки.Строки Цикл
		
		Объект = СтрокаДокумента.Объект;     
		ВидДокумента = КешВидыДокументов[Объект];  
		ТипыСвязей = КешНастроекСвязей.Получить(ВидДокумента); // ТипыСвязей - Соответствие
		
		КолвоВажныхСвязей = 0;

		Для каждого СтрокаТипСвязи Из СтрокаДокумента.Строки Цикл
			
			ТипСвязи = СтрокаТипСвязи.ТипСвязи;
			Если ТипыСвязей.Получить(ТипСвязи) <> Неопределено Тогда
				КолвоВажныхСвязей = КолвоВажныхСвязей + 1;
			КонецЕсли;	
			
		КонецЦикла;   
		
		РезультатСоответствие[Объект] = КолвоВажныхСвязей;
		
	КонецЦикла;	
	
	Возврат РезультатСоответствие;
	
КонецФункции	

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура УстановитьКомментарийТипаСвязи(ТипСвязи, Комментарий) Экспорт
	
	ТипСвязиОбъект = ТипСвязи.ПолучитьОбъект();
	ТипСвязиОбъект.Комментарий = Комментарий;
	ТипСвязиОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти
