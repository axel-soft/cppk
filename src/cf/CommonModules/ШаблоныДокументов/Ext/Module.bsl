#Область ПрограммныйИнтерфейс

//	Получает значение для автоподстановки по названию функции.
//
//	Параметры:
//		Автоподстановка - СправочникСсылка.АвтоподстановкиДляОбъектов.
//		Объект - СправочникОбъект.ДокументПредприятия,
//              СправочникОбъект.ВходящийДокумент,
//              СправочникОбъект.ИсходящийДокумент - заполняемый объект.
//      Расширенный - Булево
//      ВключаяСтроки - Булево - включает строки, если истина.
//
//	Возвращаемое значение:
//		СправочникСсылка.Пользователи,
//		СправочникСсылка.СтруктураПредприятия,
//		СправочникСсылка.ПолныеРоли,
//		Массив,
//		Структура,
//		Строка,
//		Неопределено. 
//
Функция ПолучитьЗначениеАвтоподстановки(Автоподстановка, Объект, Расширенный = Ложь, ВключаяСтроки = Ложь) Экспорт
	
	УстановитьБезопасныйРежим(Истина);
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Для Каждого ИмяРазделителя Из РаботаВМоделиСервиса.РазделителиКонфигурации() Цикл
			УстановитьБезопасныйРежимРазделенияДанных(ИмяРазделителя, Истина);
		КонецЦикла;
	КонецЕсли;
	
	ВыражениеАвтоподстановки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Автоподстановка, "Выражение");
	Если Не ЗначениеЗаполнено(ВыражениеАвтоподстановки) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не заполнено выражение автоподстановки ""%1""'"), Автоподстановка);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если ИспользуетсяКэшированиеАвтоподстановок() Тогда
		Результат = ЗначениеАвтоПодстановкиИзКэша(Автоподстановка, Объект, Расширенный, ВключаяСтроки);
		Если Результат <> Неопределено Тогда
			Если Результат = НедопустимыйРезультатАвтоподстановкиВКэше() Тогда
				Результат = Неопределено;
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Результат = Неопределено;
	Попытка
		ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
		// Выполнение выражения.
		Выполнить(ВыражениеАвтоподстановки);
		// Замер времени.
		УстановитьБезопасныйРежим(Ложь);
		КлючеваяОперация = "Автоподстановка_" + ПолучитьНавигационнуюСсылку(Автоподстановка);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при выполнении автоподстановки %1:
			|%2'"), Автоподстановка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	ДопустимыеТипыРезультата = Метаданные.ОпределяемыеТипы.КонтейнерыСотрудников.Тип.Типы();
	ДопустимыеТипыРезультата.Добавить(Тип("Структура"));
	ДопустимыеТипыРезультата.Добавить(Тип("Массив"));
	
	Если ВключаяСтроки Тогда
		ДопустимыеТипыРезультата.Добавить(Тип("Строка"));
		ДопустимыеТипыРезультата.Добавить(Тип("ФорматированныйДокумент"));
	КонецЕсли;
	
	ЭтоДопустимыйРезультат = Ложь;
	Если ДопустимыеТипыРезультата.Найти(ТипЗнч(Результат)) <> Неопределено Тогда
		Если ТипЗнч(Результат) = Тип("ФорматированныйДокумент") Тогда
			ЭтоДопустимыйРезультат = Истина;
		ИначеЕсли ТипЗнч(Результат) = Тип("Массив") Тогда
			ЭтоДопустимыйРезультат = Результат.Количество() > 0;
		Иначе
			ЭтоДопустимыйРезультат = ЗначениеЗаполнено(Результат);
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользуетсяКэшированиеАвтоподстановок() Тогда
		Если ЭтоДопустимыйРезультат Тогда
			РезультатДляКэша = Результат;
		Иначе
			РезультатДляКэша = НедопустимыйРезультатАвтоподстановкиВКэше();
		КонецЕсли;
		ДобавитьЗначениеАвтоПодстановкиВКэш(
			Автоподстановка, Объект, Расширенный, ВключаяСтроки, РезультатДляКэша);
	КонецЕсли;
	
	Если ЭтоДопустимыйРезультат Тогда
		Возврат Результат;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

//	Получает массив файлов с учетом условий добавления в документ.
//
//	Параметры:
//	 Документ - СправочникСсылка.ДокументыПредприятия.
//	 ИгнорируемыеФайлы - Массив Из СправочникСсылка.Файлы - файлы из шаблона, которые не требуется получать.
// 
//	Возвращаемое значение:
//	  Массив Из СправочникСсылка.Файлы - файлы, подходящие под условия добавления.
//
Функция ПолучитьФайлыСогласноУловиямДобавления(Документ, ИгнорируемыеФайлы) Экспорт
	
	ШаблонДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Шаблон");
	
	МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(ШаблонДокумента, Ложь);
		
	Для Каждого Файл Из ИгнорируемыеФайлы Цикл
		ИндексНайденного = МассивФайлов.Найти(Файл);
		Если ИндексНайденного <> Неопределено Тогда
			МассивФайлов.Удалить(ИндексНайденного);
		КонецЕсли;
	КонецЦикла;
	
	ПрименитьУсловияДобавленияФайлов(Документ, МассивФайлов);
	
	Возврат МассивФайлов;
	
КонецФункции

//	Отбирает из массива файлов шаблона подходящие под условия добавления в документ.
// 
//	Параметры:
//	 Документ - СправочникСсылка.ДокументыПредприятия.
//	 Файлы - Массив из СправочникСсылка.Файлы.
//	       - ТаблицаЗначений - формируется в ОбработкаЗапросовXDTOДокументы.ФайлыШаблона.
//	                           Параметр данного типа передается, если метод вызывается из DMService.
//
Процедура ПрименитьУсловияДобавленияФайлов(Документ, Файлы) Экспорт
	
	Если Не Файлы.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Шаблон");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НастройкиАвтозаполнения.ШаблонФайла КАК ШаблонФайла,
		|	НастройкиАвтозаполнения.Условие КАК Условие
		|ИЗ
		|	Справочник.ШаблоныДокументов.ПравилаАвтозаполнения КАК НастройкиАвтозаполнения
		|ГДЕ
		|	НастройкиАвтозаполнения.Ссылка = &Шаблон
		|	И НастройкиАвтозаполнения.Условие <> ЗНАЧЕНИЕ(Справочник.АлгоритмыПроверки.ПустаяСсылка)";
		
	Запрос.УстановитьПараметр("Шаблон", ШаблонДокумента);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не РаботаСАлгоритмамиПроверки.АлгоритмПоПредметуВыполняется(Документ, Выборка.Условие) Тогда
			ФайлКУдалению = Файлы.Найти(Выборка.ШаблонФайла);
			Если ФайлКУдалению <> Неопределено Тогда
				Файлы.Удалить(ФайлКУдалению);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет реквизиты документа (объекта) по шаблону документа.
//
// Параметры:
//   Шаблон - СправочникСсылка.ШаблоныДокументов - источник данных заполнения.
//   Документ - СправочникОбъект.ДокументПредприятия - заполняемый объект.
//
Процедура ЗаполнитьРеквизитыДокументаПоШаблону(Шаблон, Документ) Экспорт
	
	Если Не ЗначениеЗаполнено(Шаблон) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Шаблон) <> Тип("СправочникСсылка.ШаблоныДокументов") Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыШаблона = Шаблон.Метаданные().Реквизиты;
	РеквизитыДокумента = Документ.Метаданные().Реквизиты;
	СтандартныеРеквизитыДокумента = Документ.Метаданные().СтандартныеРеквизиты;
	
	ИнформацияОКорреспонденции = РаботаСКорреспонденцией.ВидДокументаОтноситсяККорреспонденции(
		Шаблон.ВидДокумента);
	ЭтоКорреспонденция = ИнформацияОКорреспонденции.ЭтоКорреспонденция;
	ЭтоВходящаяКорреспонденция = ИнформацияОКорреспонденции.ЭтоВходящаяКорреспонденция;
	
	Для Каждого Реквизит Из РеквизитыШаблона Цикл
		
		Если Реквизит.Имя = "КомментарийКДокументу" 
			И Не ПустаяСтрока(Шаблон.КомментарийКДокументу) Тогда
			 
			Документ.Комментарий = Шаблон.КомментарийКДокументу;
			
		ИначеЕсли Реквизит.Имя = "ДлительностьИсполнения" 
			И Не Шаблон.ДлительностьИсполнения = 0 Тогда
			
			ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
			Если Шаблон.СрокИсполненияУказанВРабочихДнях И ИспользоватьГрафикиРаботы Тогда
				ОсновнойКалендарь = ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы().Календарь;
				Документ.СрокИсполнения = КалендарныеГрафикиДокументооборот.ПолучитьДатуПоОсновномуКалендарю(
					ТекущаяДатаСеанса(), Шаблон.ДлительностьИсполнения);
			Иначе
				Документ.СрокИсполнения = ТекущаяДатаСеанса() + Шаблон.ДлительностьИсполнения*60*60*24;
			КонецЕсли;
			
		ИначеЕсли Реквизит.Имя <> "КомментарийКШаблону"
			И Реквизит.Имя <> "ВладелецШаблона"
			И Реквизит.Имя <> "КомментарийКДокументу"
			И Реквизит.Имя <> "ДлительностьИсполнения" 
			И ЗначениеЗаполнено(Шаблон[Реквизит.Имя]) Тогда
			
			НайденоВСтандартныхРеквизитах = Ложь;
			Для Каждого СтандРеквизит Из СтандартныеРеквизитыДокумента Цикл
				Если СтандРеквизит.Имя = Реквизит.Имя Тогда
					НайденоВСтандартныхРеквизитах = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если (РеквизитыДокумента.Найти(Реквизит.Имя) <> Неопределено 
				Или НайденоВСтандартныхРеквизитах)
				И ЗначениеЗаполнено(Шаблон[Реквизит.Имя]) Тогда
				Документ[Реквизит.Имя] = Шаблон[Реквизит.Имя];
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Контрагенты документа предприятия.
	Если ТипЗнч(Шаблон) = Тип("СправочникСсылка.ШаблоныДокументов")
		И Шаблон.Контрагенты.Количество() > 0 Тогда
			
		КонтрагентыШаблона = Шаблон.Контрагенты;
		КонтрагентыДокумента = Документ.Контрагенты;
		
		КонтрагентыДокумента.Очистить();
		
		Для Каждого СтрокаШаблона из КонтрагентыШаблона Цикл
			НоваяСтрока = КонтрагентыДокумента.Добавить();
			НоваяСтрока.Контрагент = СтрокаШаблона.Контрагент;
			Если ЭтоКорреспонденция И ЭтоВходящаяКорреспонденция Тогда
				НоваяСтрока.ПодписалОтКонтрагента = СтрокаШаблона.КонтактноеЛицо;
			Иначе
				НоваяСтрока.КонтактноеЛицо = СтрокаШаблона.КонтактноеЛицо;
			КонецЕсли;
		КонецЦикла;
		
		Если КонтрагентыДокумента.Количество() > 0 Тогда 
			Документ.Контрагент = КонтрагентыДокумента[0].Контрагент;
			Если ЭтоКорреспонденция И ЭтоВходящаяКорреспонденция Тогда
				Документ.ПодписалОтКонтрагента = КонтрагентыДокумента[0].ПодписалОтКонтрагента;
			Иначе
				Документ.КонтактноеЛицо = КонтрагентыДокумента[0].КонтактноеЛицо;
			КонецЕсли;
		Иначе
			Документ.Контрагент = Неопределено;
			Документ.КонтактноеЛицо = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	// Стороны документа предприятия
	Если ТипЗнч(Шаблон) = Тип("СправочникСсылка.ШаблоныДокументов")
		И Шаблон.Стороны.Количество() > 0 Тогда
		
		Документ.Стороны.Очистить();
		
		Для Каждого СтрокаШаблона из Шаблон.Стороны Цикл
			НоваяСтрока = Документ.Стороны.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаШаблона, "Сторона, КонтактноеЛицо, Наименование");
			НоваяСтрока.Подписал = СтрокаШаблона.Подписант;
		КонецЦикла;
		
		// Копирование контрагента
		СторонаКонтрагент = Неопределено;
		ИндексСторон = Документ.Стороны.Количество()-1;
		
		Пока ИндексСторон > -1 Цикл
			
			Если ЗначениеЗаполнено(Документ.Стороны[ИндексСторон].Сторона)
				И РаботаСПодписямиДокументовКлиентСервер.ЭтоКонтрагент(Документ.Стороны[ИндексСторон].Сторона) Тогда
					СторонаКонтрагент = Документ.Стороны[ИндексСторон].Сторона;
			КонецЕсли;
			
			ИндексСторон = ИндексСторон - 1;
		КонецЦикла;
		
		Если СторонаКонтрагент <> Неопределено Тогда
			Документ.Контрагент = СторонаКонтрагент;
		КонецЕсли;
		
		// копирование организации
		Если Документ.Стороны.Количество() > 0
			И РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(Документ.Стороны[0].Сторона) Тогда
			Если Документ.Организация <> Документ.Стороны[0].Сторона Тогда
				Документ.Организация = Документ.Стороны[0].Сторона;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Товары и услуги.
	Если ТипЗнч(Шаблон) = Тип("СправочникСсылка.ШаблоныДокументов")
		И Шаблон.Товары.Количество() > 0 Тогда
		Документ.Товары.Очистить();
		
		Для Каждого СтрокаНоменклатуры Из Шаблон.Товары Цикл 
			НоваяСтрока = Документ.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНоменклатуры);
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаНоменклатуры.Номенклатура,
				"Цена, СтавкаНДС");
			
			НоваяСтрока.Цена = Реквизиты.Цена;
			НоваяСтрока.СтавкаНДС = Реквизиты.СтавкаНДС;
			ДелопроизводствоКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(НоваяСтрока, НоваяСтрока.СтавкаНДС);
		КонецЦикла;
		
		Документ.Сумма = Документ.Товары.Итог("Сумма");
		Документ.СуммаНДС = Документ.Товары.Итог("СуммаНДС");
	КонецЕсли;
	
	Если ТипЗнч(Шаблон) = Тип("СправочникСсылка.ШаблоныДокументов") Тогда
		Документ.Подписал = Шаблон.Подписант;
	КонецЕсли;
	
	Документ.Шаблон = Шаблон;
	// Заполним Наименование по шаблону
	Если ЗначениеЗаполнено(Шаблон.Заголовок) И Шаблон.ЗаполнениеНаименованияПоШаблону Тогда 
		Документ.Заголовок = СформироватьНаименованиеПоШаблону(Документ, Шаблон.Заголовок);
	КонецЕсли;
	
	// Заполним "ОтветственныйЗаХранение" по значению автоподстановки.
	Если ЗначениеЗаполнено(Шаблон.ОтветственныйЗаХранение)
		И ТипЗнч(Шаблон.ОтветственныйЗаХранение) = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов") Тогда
		
		ЗначениеАвтоподстановки = ШаблоныДокументов.ПолучитьЗначениеАвтоподстановки(
			Шаблон.ОтветственныйЗаХранение,
			Документ);
			
		Если ЗначениеАвтоподстановки <> Неопределено Тогда
			Если ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.Пользователи") Тогда
				
				Документ.ОтветственныйЗаХранение = 
					Сотрудники.ОсновнойСотрудникПользователя(
					ЗначениеАвтоподстановки);
				
			ИначеЕсли ТипЗнч(ЗначениеАвтоподстановки) = Тип("Массив") Тогда 
				
				Для Каждого ЗначениеАвтоподстановкиЭлемент Из ЗначениеАвтоподстановки Цикл
					Если ТипЗнч(ЗначениеАвтоподстановкиЭлемент) = Тип("СправочникСсылка.Пользователи")Тогда 
						Документ.ОтветственныйЗаХранение = 
							Сотрудники.ОсновнойСотрудникПользователя(
							ЗначениеАвтоподстановкиЭлемент);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат;
	КонецЕсли;
	
	// Получим массив дополнительных реквизитов.
	НаборСвойств = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(Документ);
	НаборСвойствОбъекта = Новый Массив;
	Для Каждого Элемент Из НаборСвойств Цикл
		Для Каждого ДопРеквизит Из Элемент.Набор.ДополнительныеРеквизиты Цикл
			Если НаборСвойствОбъекта.Найти(ДопРеквизит.Свойство) = Неопределено Тогда
				НаборСвойствОбъекта.Добавить(ДопРеквизит.Свойство);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Скопируем из шаблона подходящие дополнительные реквизиты.
	Для Каждого ДопРеквизитШаблона Из Шаблон.ДополнительныеРеквизиты Цикл
		Если НаборСвойствОбъекта.Найти(ДопРеквизитШаблона.Свойство) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрокаДопРеквизита = Документ.ДополнительныеРеквизиты.Найти(
			ДопРеквизитШаблона.Свойство,
			"Свойство");
		Если СтрокаДопРеквизита = Неопределено Тогда
			СтрокаДопРеквизита = Документ.ДополнительныеРеквизиты.Добавить();
			СтрокаДопРеквизита.Свойство = ДопРеквизитШаблона.Свойство;
		КонецЕсли;
		СтрокаДопРеквизита.Значение = ДопРеквизитШаблона.Значение;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет файлы документа по шаблону, при необходимости удаляя файлы других шаблонов.
//
// Параметры:
//   Шаблон - СправочникСсылка.ШаблоныДокументов - источник данных заполнения.
//   Файлы - ТаблицаЗначений, ДанныеФормыКоллекция - заполняемый список файлов:
//     Наименование - Строка.
//     Расширение - Строка.
//     ПолныйПуть - Строка.
//     ИндексКартинки - Число.
//     Условие - СправочникСсылка.АлгоритмыПроверки.
//     ШаблонОснованиеДляСоздания - СправочникСсылка.Файлы.
//     ДобавленИзШаблона - Булево.
//   УдалятьФайлыИзДругогоШаблона - Булево - Истина, если требуется заместить файлы
//     других шаблонов.
//
Процедура ЗаполнитьФайлыДокументаПоШаблону(Шаблон, Файлы, УдалятьФайлыИзДругогоШаблона,
	ДокументОбъект = Неопределено) Экспорт
	
	Если УдалятьФайлыИзДругогоШаблона Тогда
		КоличествоФайлов = Файлы.Количество();
		Для Индекс = 1 По КоличествоФайлов Цикл
			Если Файлы[КоличествоФайлов - Индекс].ДобавленИзШаблона Тогда
				Файлы.Удалить(КоличествоФайлов - Индекс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнениеДляФормы = (ТипЗнч(Файлы) = Тип("ДанныеФормыКоллекция"));
	
	МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Шаблон, Ложь);
	
	Для Каждого ПрикрепленныйФайл Из МассивФайлов Цикл 
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ПрикрепленныйФайл.Ссылка);
		Если ТипЗнч(ДанныеФайла) <> Тип("Структура")
			Или Не ДанныеФайла.Свойство("Ссылка")
			Или ДанныеФайла.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		АдресВременногоХранилища = ПоместитьВоВременноеХранилище(
			ДанныеФайла, Новый УникальныйИдентификатор());
		НоваяСтрока = Файлы.Добавить();
		НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
		
		НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
		
		Если ЗаполнениеДляФормы Тогда
			НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.
				ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
		Иначе
			НоваяСтрока.Расширение = ДанныеФайла.Расширение;
		КонецЕсли;
		НоваяСтрока.ШаблонОснованиеДляСоздания = ПрикрепленныйФайл.Ссылка;
		НоваяСтрока.ДобавленИзШаблона = Истина;
		РолиФайла = РегистрыСведений.РолиФайловДокументов.ПолучитьРолиФайла(ПрикрепленныйФайл.Ссылка);
		Если РолиФайла.Количество() <> 0 Тогда
			НоваяСтрока.РольФайла = РолиФайла[0];
		КонецЕсли;	
		
		НоваяСтрока.Порядок = РегистрыСведений.СведенияОФайлахДокументооборот.ПолучитьПризнак(
			ПрикрепленныйФайл.Ссылка, "ПорядковыйНомерВложения");
		
	КонецЦикла;
	
	ЗаполнитьУсловияДобавленияФайлов(Шаблон, Файлы)
	
КонецПроцедуры

// Заполняет статьи движения денежных средств по шаблону.
//
// Параметры:
//   Шаблон - СправочникСсылка.ШаблоныДокументов - источник данных заполнения.
//   СтатьиДДС - ТаблицаЗначений, ДанныеФормыКоллекция - заполняемый список с колонкой
//     СтатьяДвиженияДенежныхСредств - СправочникСсылка.СтатьиДвиженияДенежныхСредств.
//   Сумма - Число - сумма документа.
//   СуммаНДС - Число - сумма НДС документа.
//
Процедура ЗаполнитьСтатьиДДСДокументаПоШаблону(Шаблон, СтатьиДДС,
	Сумма = 0, СуммаНДС = 0) Экспорт
	
	Если Не ЗначениеЗаполнено(Шаблон) 
		Или ТипЗнч(Шаблон) <> Тип("СправочникСсылка.ШаблоныДокументов") Тогда
		Возврат;
	КонецЕсли;
	
	СтатьиДДС.Очистить();
	
	СтатьяДвиженияДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Шаблон, "СтатьяДвиженияДенежныхСредств");
	Если ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредств) Тогда
		НоваяСтрока = СтатьиДДС.Добавить();
		НоваяСтрока.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
		НоваяСтрока.Сумма = Сумма;
		НоваяСтрока.СуммаНДС = СуммаНДС;
	КонецЕсли;
	
КонецПроцедуры

// Помечает / снимает пометку удаления у правил заполнения шаблона.
//
// Параметры:
//  Шаблон - СправочникСсылка.ШаблоныДокументов -
//           шаблон, владелец правила автозаполнения.
//  ПометкаУдаления - Булево - признак установки/снятия пометки удаления.
//
Процедура ПометитьНаУдалениеПравилаЗаполнения(Шаблон, ПометкаУдаления) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПравилаАвтозаполненияФайлов.ПравилоАвтозаполнения КАК Ссылка
		|ИЗ
		|	Справочник.ШаблоныДокументов.ПравилаАвтозаполнения КАК ПравилаАвтозаполненияФайлов
		|ГДЕ
		|	ПравилаАвтозаполненияФайлов.Ссылка = &Шаблон";
	
	Запрос.УстановитьПараметр("Шаблон", Шаблон);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда 
			Попытка
				ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
				ПравилоОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ПравилоОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
				РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			Исключение
				Продолжить;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Помечает / снимает пометку удаления с шаблонов документов.
//
// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокументов -
//           вид документа, по которому созданы шаблоны документов.
//  ПометкаУдаления - Булево - признак установки/снятия пометки удаления.
//
Процедура ПометитьНаУдалениеШаблоныДокументов(ВидДокумента, ПометкаУдаления) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШаблоныДокументов.Ссылка,
		|	ШаблоныДокументов.ПометкаУдаления
		|ИЗ
		|	Справочник.ШаблоныДокументов КАК ШаблоныДокументов
		|ГДЕ
		|	ШаблоныДокументов.ВидДокумента = &ВидДокумента";
	
	Запрос.Параметры.Вставить("ВидДокумента", ВидДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Ссылка) И Выборка.ПометкаУдаления <> ПометкаУдаления Тогда 
			Попытка
				ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
				ШаблонОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ШаблонОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
				РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			Исключение
				Прервать;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает сформированный по шаблону заголовок документа
//
// Параметры:
//   Документ - Справочник.<Тип документа> - документ, для которого
//                         вычисляется заголовок
//   ШаблонЗаголовка - Строка - шаблон, по которому формируется заголовок
//
// Возвращаемое значение:
//  Результат - Строка - заголовок документа
//
Функция СформироватьНаименованиеПоШаблону(Документ, ШаблонЗаголовка) Экспорт 
	
	Результат = ШаблонЗаголовка;
	
	МассивРеквизитов = Новый Массив; ОписаниеОшибки = "";
	ДелопроизводствоКлиентСервер.ПолучитьПоляШаблонаНаименования(
		ШаблонЗаголовка, МассивРеквизитов, ОписаниеОшибки);
	ПараметрыКорреспонденции = Неопределено; Корреспонденция = Неопределено;
	Если Документ.ДополнительныеСвойства.Свойство("ПараметрыКорреспонденции") Тогда 
		
		ПараметрыКорреспонденции = Документ.ДополнительныеСвойства.ПараметрыКорреспонденции;
	Иначе
		Корреспонденция = РаботаСКорреспонденцией.КорреспонденцияДокумента(Документ.Ссылка)
	КонецЕсли;
		
	Для Каждого Реквизит Из МассивРеквизитов Цикл 
		ДопРеквизит = Найти(Реквизит, "ДопРеквизиты") > 0
			Или Найти(Реквизит, "ДопСвойства") > 0;
		
		Если ДопРеквизит Тогда 
			ЗначениеРеквизита = ПолучитьЗначениеДопРеквизитаДляЗаполненияШаблона(Реквизит, Документ);
		
		ИначеЕсли Найти(Реквизит, НСтр("ru = 'Корреспонденция'")) > 0 Тогда
				
			ЗначениеРеквизита = "";
			
			Попытка
				Если ПараметрыКорреспонденции <> Неопределено Тогда
					ЗначениеРеквизита = 
						РаботаСКорреспонденцией.ЗначениеРеквизитаКорреспонденцииИзПараметров(
							Реквизит, ПараметрыКорреспонденции);
				ИначеЕсли ЗначениеЗаполнено(Корреспонденция) Тогда
					ЗначениеРеквизита = 
						АвтозаполнениеШаблоновФайловВызовСервераПовтИспВызов.ПолучитьЗначениеРеквизитаКорреспонденцииДляЗамены(
							Реквизит, Корреспонденция);
				КонецЕсли;
				
				Если ТипЗнч(ЗначениеРеквизита) = Тип("Дата") Тогда 
					ЗначениеРеквизита = Формат(ЗначениеРеквизита, "ДЛФ=D");
				КонецЕсли;
			Исключение
				ОшибкаИнфо = ИнформацияОбОшибке();
				Если ОшибкаИнфо.Описание = "ОшибкаДоступаКРеквизиту" Тогда
					ВызватьИсключение ЗначениеРеквизита;
				Иначе
					ВызватьИсключение(ОшибкаИнфо.Описание);
				КонецЕсли;
			КонецПопытки;
					
		// Реквизит "Получатель" введен искусственно, поэтому его определяем в особом порядке.
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоИсходящийДокумент(Документ)
			И СтрНайти(Реквизит, "Получатель") Тогда 
			Если ЗначениеЗаполнено(Документ.Контрагенты) Тогда 
				ЗначениеРеквизита = Документ.Контрагенты[0].Контрагент;
			Иначе 
				ЗначениеРеквизита = "";
			КонецЕсли;
		Иначе 
			ЗначениеРеквизита = ПолучитьЗначениеРеквизитаДляЗаполненияШаблона(Реквизит, Документ);
		КонецЕсли; 
		
		Результат = СтрЗаменить(Результат, "[" + Реквизит + "]", ЗначениеРеквизита);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = ШаблонЗаголовка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Создает файлы на основании файлов шаблона документа.
// 
// Параметры:
//  ВладелецФайла - СправочникСсылка.ДокументыПредприятия
//  ФайлыДобавленные - см. ФайлыШаблона
//  ШаблонДокумента - СправочникСсылка.ШаблоныДокументов
//
Процедура СоздатьФайлыПоШаблонуДокумента(ВладелецФайла, ФайлыДобавленные, ШаблонДокумента) Экспорт
	
	// Автозаполнение файлов
	ИзменениеФайловMSWordНаСервере = Константы.ИзменениеФайловMSWordТолькоНаСервере.Получить();
	ИспользоватьШтрихкоды = ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды");
	УникальныйИдентификатор = Новый УникальныйИдентификатор;

	Индекс = ФайлыДобавленные.Количество() - 1;
	Пока Индекс >= 0 Цикл

		ФайлТаблицы = ФайлыДобавленные[Индекс];

		Если Не ЭтоАдресВременногоХранилища(ФайлТаблицы.ПолныйПуть) Тогда
			Индекс = Индекс - 1;
			Продолжить;
		КонецЕсли;

		ДанныеФайла = ПолучитьИзВременногоХранилища(ФайлТаблицы.ПолныйПуть);
		Источник = ДанныеФайла.Ссылка;
		ХранитьВерсииНовыйФайл = ДанныеФайла.ХранитьВерсии;
		Расширение = ДанныеФайла.Расширение;
		ХранитьВерсииНовыйФайл = Истина;
		ТекстХранилище = РегистрыСведений.ТекстыВерсийФайлов.ПолучитьТекстХранилище(ДанныеФайла.ТекущаяВерсия);

		Если ДанныеФайла.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			ХранилищеФайла = РаботаСФайламиВызовСервера.ПолучитьХранилищеФайлаИзИнформационнойБазы(
					ДанныеФайла.ТекущаяВерсия);
		КонецЕсли;
		
		СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
		СведенияОФайле.Комментарий = ДанныеФайла.Описание;
		СведенияОФайле.ИмяБезРасширения = ФайлТаблицы.Наименование; //Источник.ПолноеНаименование;
		СсылкаНаВерсиюИсточник = ДанныеФайла.ТекущаяВерсия;
		Размер = ДанныеФайла.Размер;
		ДатаМодификацииФайла = ДанныеФайла.ДатаМодификацииФайла;
		ДатаМодификацииУниверсальная = ДанныеФайла.ДатаМодификацииУниверсальная;
		СведенияОФайле.ХранитьВерсии = ХранитьВерсииНовыйФайл;

		Приемник = РаботаСФайламиВызовСервера.СоздатьФайл(ВладелецФайла, СведенияОФайле);
		РегистрыСведений.ФайлыСозданныеПоШаблону.ЗанестиИнформациюОФайле(Приемник, Истина);
		СведенияОФайле.Размер = Размер;
		СведенияОФайле.РасширениеБезТочки = Расширение;
		СведенияОФайле.АдресВременногоХранилищаФайла = ХранилищеФайла;
		СведенияОФайле.АдресВременногоХранилищаТекста = ТекстХранилище;
		СведенияОФайле.СсылкаНаВерсиюИсточник = СсылкаНаВерсиюИсточник;
		СведенияОФайле.ВремяИзменения = ДатаМодификацииФайла;
		СведенияОФайле.ВремяИзмененияУниверсальное = ДатаМодификацииУниверсальная;

		Версия = РаботаСФайламиВызовСервера.СоздатьВерсию(Приемник, СведенияОФайле);

		РаботаСФайламиВызовСервера.ОбновитьВерсиюВФайле(Приемник, Версия, ТекстХранилище);

		РаботаСФайламиВызовСервера.ЗаписатьОригинальноеИмяФайла(Приемник, ФайлТаблицы.Наименование);

		РегистрыСведений.РолиФайловДокументов.ЗаписатьРольФайла(Приемник, ФайлТаблицы.РольФайла); 
				
		// тут заполним порядок из шаблона.
		Если ФайлТаблицы.Порядок <> 0 Тогда
			РаботаСФайламиВызовСервера.ЗаписатьПорядокФайла(Приемник, ФайлТаблицы.Порядок);
		КонецЕсли;

		ИОМВладелеца = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
					Тип("СправочникСсылка.ДокументыПредприятия"));
		ПараметрыРаспознавания = РаботаСФайламиВызовСервера.ПодготовитьПараметрыРаспознавания(ИОМВладелеца);
		Если ПараметрыРаспознавания <> Неопределено И ПараметрыРаспознавания.Свойство("РаспознатьПослеДобавления")
			И ПараметрыРаспознавания.РаспознатьПослеДобавления Тогда
			РаспознатьНемедленно = Ложь;
			ОписаниеОшибки = "";
			РаспознанныйТекст = "";
			РаботаСФайламиВызовСервера.РаспознатьФайл(Приемник, ПараметрыРаспознавания, ОписаниеОшибки,
				РаспознанныйТекст, УникальныйИдентификатор, РаспознатьНемедленно);
		КонецЕсли;

		ФайлОбъект = Приемник.ПолучитьОбъект();
		ФайлОбъект.ШаблонОснованиеДляСоздания = ФайлТаблицы.ШаблонОснованиеДляСоздания;
		Если ФайлОбъект.ПодписанЭП Тогда
			ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
		КонецЕсли;
		ФайлОбъект.Записать();
		
		Если ЗначениеЗаполнено(ДанныеФайла) И ДанныеФайла.Зашифрован Тогда

			ФайлОбъект = Приемник.ПолучитьОбъект();
			ФайлОбъект.Зашифрован = Истина;

			ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
			ФайлОбъект.Записать();

			ВерсияОбъект = ФайлОбъект.ТекущаяВерсия.ПолучитьОбъект();
			ВерсияОбъект.Зашифрован = Истина;
			ВерсияОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
			ВерсияОбъект.Записать();

			РегистрыСведений.СертификатыШифрования.СкопироватьСертификатыШифрования(Источник.Ссылка, ФайлОбъект.Ссылка);

		КонецЕсли;

		Если ИспользоватьШтрихкоды Тогда
			ДанныеОШтрихкоде = ШтрихкодированиеСервер.ПолучитьДанныеДляВставкиШтрихкодаВОбъект(Приемник);

			Если (ИзменениеФайловMSWordНаСервере И ФайлОбъект.ТекущаяВерсияРасширение = "doc")
				Или ФайлОбъект.ТекущаяВерсияРасширение <> "doc" Тогда
				Если ДанныеОШтрихкоде <> Неопределено И ДанныеОШтрихкоде.Свойство("ДвоичныеДанныеФайла") Тогда
					ШтрихкодированиеКлиентСервер.ВставитьШтрихкодВместоТэга(ФайлОбъект.Ссылка,
						"ВставитьИзображениеШтрихкода", Ложь, ДанныеОШтрихкоде.ДвоичныеДанныеИзображения,
						ДанныеОШтрихкоде.ДвоичныеДанныеФайла, ДанныеОШтрихкоде.Расширение,
						ДанныеОШтрихкоде.ФайлРедактируется, ДанныеОШтрихкоде.ИзменениеФайловMSWordТолькоНаСервере,
						ДанныеОШтрихкоде.НастройкиШтрихкода.ВысотаШК);
				КонецЕсли;
			КонецЕсли;
			
			// печать организации
			Если ФайлОбъект.ТекущаяВерсияРасширение = "docx" Или ФайлОбъект.ТекущаяВерсияРасширение = "odt" Тогда

				КартинкиПечатейОрганизации = Справочники.Организации.КартинкиПечатейОрганизации(ВладелецФайла);

				ПечатиОрганизации = Новый Соответствие;
				ПечатиОрганизации.Вставить(ВставкаКартинкиОрганизацииСервер.ТегЛоготипОрганизации(),
					КартинкиПечатейОрганизации);
				
				// сюда же скрипты будут вставлены со своими тегами.
				ДополнитьПечатиОрганизацииИзСкриптов(ПечатиОрганизации, ВладелецФайла, ФайлОбъект.Ссылка);

				Если КартинкиПечатейОрганизации.Количество() <> 0 Тогда
					ДвоичныеДанныеФайла = АвтозаполнениеШаблоновФайловВызовСервера.ПолучитьДвоичныеДанныеФайла(
						ФайлОбъект.Ссылка);

					ВставкаКартинкиОрганизацииСервер.ВставитьПечатиОрганизацииВместоТэга(ФайлОбъект.Ссылка,
						ПечатиОрганизации, ДвоичныеДанныеФайла, ФайлОбъект.ТекущаяВерсияРасширение,
							УникальныйИдентификатор);
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;
		
		Индекс = Индекс - 1;
		
	КонецЦикла;
	
КонецПроцедуры

#Область КэшированиеРезультатовАвтоподстановок

// Включить кэширование результатов автоподстановок.
//
Процедура ВключитьКэшированиеРезультатовАвтоподстановок() Экспорт
	
	ПараметрыСеанса.ИспользоватьКэшированиеАвтоПодстановокОбъектов = Истина;
	
КонецПроцедуры

// Отключить кэширование результатов автоподстановок.
//
Процедура ОтключитьКэшированиеРезультатовАвтоподстановок() Экспорт
	
	ПараметрыСеанса.ИспользоватьКэшированиеАвтоПодстановокОбъектов = Ложь;
	
	ПараметрыСеанса.КэшРезультатовАвтоПодстановокОбъектов =
		Новый ФиксированноеСоответствие(Новый Соответствие);
	
КонецПроцедуры

// При установке параметров сеанса.
// 
// Параметры:
//  ИменаПараметровСеанса - см. СтандартныеПодсистемыСервер.УстановкаПараметровСеанса.ИменаПараметровСеанса.
//
Процедура ПриУстановкеПараметровСеанса(ИменаПараметровСеанса) Экспорт
	
	Если ИменаПараметровСеанса = Неопределено
		Или ИменаПараметровСеанса.Найти("КэшРезультатовАвтоПодстановокОбъектов") <> Неопределено Тогда
		
		ПараметрыСеанса.КэшРезультатовАвтоПодстановокОбъектов =
			Новый ФиксированноеСоответствие(Новый Соответствие);
		
	КонецЕсли;
		
	Если ИменаПараметровСеанса = Неопределено
		Или ИменаПараметровСеанса.Найти("ИспользоватьКэшированиеАвтоПодстановокОбъектов") <> Неопределено Тогда
		
		ПараметрыСеанса.ИспользоватьКэшированиеАвтоПодстановокОбъектов = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//Получает значение реквизита документа
//
Функция ПолучитьЗначениеРеквизитаДляЗаполненияШаблона(Знач НазваниеПоля, Документ)
	
	Результат = "";
	Попытка
		Если СтрНайти(НазваниеПоля, "|") > 0 Тогда
			МассивСтрок = СтрРазделить(НазваниеПоля, "|");
			НазваниеПоля = СтрЗаменить(НазваниеПоля, "|", ".");
		Иначе
			МассивСтрок = СтрРазделить(НазваниеПоля, ".");
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		Счетчик = 0; ВыражениеРеквизита = ""; ВыражениеНеПустое = Ложь;
		Для Каждого Реквизит Из МассивСтрок Цикл
			Счетчик = Счетчик + 1;
			Если Счетчик = 1 Тогда 
				ЗначениеПервогоРеквизита = Документ[Реквизит];
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗначениеПервогоРеквизита) Тогда 
				ВыражениеРеквизита = ВыражениеРеквизита + ?(ВыражениеНеПустое, ".", "") + Реквизит;
				ВыражениеНеПустое = Истина;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ЗначениеПервогоРеквизита) Тогда 
			Если ЗначениеЗаполнено(ВыражениеРеквизита) Тогда 
				
				Если РаботаСПодписямиДокументовКлиентСервер.ЭтоКонтрагент(ЗначениеПервогоРеквизита)
						Или РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(ЗначениеПервогоРеквизита) Тогда
					
					ЭтоНаименованиеНаДату = СтрНайти(ВыражениеРеквизита, "НаименованиеНаДату") > 0;
					ЭтоНаименованиеПолноеНаДату = СтрНайти(ВыражениеРеквизита, "НаименованиеПолноеНаДату") > 0;
					ЭтоКППНаДату = СтрНайти(ВыражениеРеквизита, "КППНаДату") > 0;
					Если ЭтоНаименованиеНаДату Или ЭтоНаименованиеПолноеНаДату Или ЭтоКППНаДату Тогда
						// виртуальный реквизит
						ДатаСведений = Неопределено;
						Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Документ) Тогда
							ДатаСведений = Делопроизводство.ДатаУчетаДокумента(Документ);
						КонецЕсли;
						
						Если ЭтоНаименованиеНаДату Тогда
							Результат = Юрлица.НаименованиеЮрлицаНаДату(ЗначениеПервогоРеквизита, ДатаСведений);
						ИначеЕсли ЭтоНаименованиеПолноеНаДату Тогда 
							Результат = Юрлица.НаименованиеПолноеЮрлицаНаДату(ЗначениеПервогоРеквизита, ДатаСведений);
						ИначеЕсли ЭтоКППНаДату Тогда
							Результат = Юрлица.КППЮрлицаНаДату(ЗначениеПервогоРеквизита, ДатаСведений);
						КонецЕсли;
					
					Иначе
						// обычный реквизит Юрлица:
						Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеПервогоРеквизита, ВыражениеРеквизита);
					КонецЕсли;
				
				Иначе
					Если ТипЗнч(ЗначениеПервогоРеквизита) = Тип("СправочникСсылка.Сотрудники") Тогда // представление сотрудника
						
						Если ВыражениеРеквизита = "ПредставлениеВДокументах" Тогда
							Результат = ЗначениеПервогоРеквизита.ПредставлениеВДокументах;
						ИначеЕсли ВыражениеРеквизита = "ПредставлениеВПереписке" Тогда
							Результат = ЗначениеПервогоРеквизита.ПредставлениеВПереписке;
						ИначеЕсли ВыражениеРеквизита = "ФИО" Тогда
							Результат = Строка(ЗначениеПервогоРеквизита.Владелец);
						ИначеЕсли ВыражениеРеквизита = "ФамилияИнициалы" Тогда
							Результат = ФизическиеЛица.ФамилияИнициалыФизЛица(Строка(ЗначениеПервогоРеквизита.Владелец));
						КонецЕсли;
					Иначе
						Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеПервогоРеквизита, ВыражениеРеквизита); // обычный реквизит
					КонецЕсли;
				КонецЕсли;
			Иначе 
				Результат = ЗначениеПервогоРеквизита;
			КонецЕсли;
		КонецЕсли;
	Исключение
		ВызватьИсключение("ОшибкаДоступаКРеквизиту");
	КонецПопытки;
	
	Если ТипЗнч(Результат) = Тип("Дата") Тогда 
		Результат = Формат(Результат, "ДЛФ=D");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Получает значение дополнительного реквизита документа
//
Функция ПолучитьЗначениеДопРеквизитаДляЗаполненияШаблона(НазваниеПоля, Документ)  
	
	Результат = "";
	
	Если СтрНайти(НазваниеПоля, "|") > 0 Тогда
		МассивСтрок = СтрРазделить(НазваниеПоля, "|");
	Иначе
		МассивСтрок = СтрРазделить(НазваниеПоля, ".");
	КонецЕсли;
	
	Если МассивСтрок.Количество() = 1 Тогда
		Возврат Результат;
	КонецЕсли;
	ИмяДопРеквизита = МассивСтрок[МассивСтрок.Количество() - 1];
	
	Счетчик = 0;
	Пока Счетчик < МассивСтрок.Количество() Цикл
		Если Найти(МассивСтрок[Счетчик], "ДопСвойства") > 0
			Или Найти(МассивСтрок[Счетчик], "ДопРеквизиты") > 0
			Или Найти(МассивСтрок[Счетчик], ИмяДопРеквизита) > 0 Тогда
			МассивСтрок.Удалить(Счетчик);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Элемент Из МассивСтрок Цикл
		Если Не ЗначениеЗаполнено(Документ[Элемент]) Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	ВладелецДопРеквизита = ?(МассивСтрок.Количество(), Документ[СтрСоединить(МассивСтрок, ".")], Документ);
	
	МассивСвойств = УправлениеСвойствами.СвойстваОбъекта(ВладелецДопРеквизита);
	РеквизитыСвойств = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСвойств,
		"Наименование, ФорматСвойства");
	
	Для Каждого ДопСвойство Из МассивСвойств Цикл
		Если РеквизитыСвойств[ДопСвойство].Наименование = ИмяДопРеквизита Тогда
		
			СтрокаСвойства = ВладелецДопРеквизита.ДополнительныеРеквизиты.Найти(ДопСвойство);
			Если СтрокаСвойства <> Неопределено Тогда
				
				Результат = СтрокаСвойства.Значение;
				Если СтрДлина(Результат) = 1024 И ЗначениеЗаполнено(СтрокаСвойства.ТекстоваяСтрока) Тогда 
					Результат = СтрокаСвойства.ТекстоваяСтрока;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(РеквизитыСвойств[ДопСвойство].ФорматСвойства) Тогда
					Результат = Формат(Результат, РеквизитыСвойств[ДопСвойство].ФорматСвойства);
				КонецЕсли;
			
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
	КонецЦикла; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьУсловияДобавленияФайлов(Шаблон, Файлы)
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ШаблоныДокументовПравилаАвтозаполнения.ШаблонФайла,
		|	ШаблоныДокументовПравилаАвтозаполнения.Условие
		|ИЗ
		|	Справочник.ШаблоныДокументов.ПравилаАвтозаполнения КАК ШаблоныДокументовПравилаАвтозаполнения
		|ГДЕ
		|	ШаблоныДокументовПравилаАвтозаполнения.Ссылка = &Шаблон
		|	И ШаблоныДокументовПравилаАвтозаполнения.Условие <> ЗНАЧЕНИЕ(Справочник.АлгоритмыПроверки.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Шаблон", Шаблон);
	СтруктураОтбора = Новый Структура("ШаблонОснованиеДляСоздания");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураОтбора.ШаблонОснованиеДляСоздания = Выборка.ШаблонФайла;
		МассивНайденныхСтрок = Файлы.НайтиСтроки(СтруктураОтбора);
		
		Если МассивНайденныхСтрок.Количество() Тогда
			
			МассивНайденныхСтрок[0].Условие = Выборка.Условие;
			МассивНайденныхСтрок[0].ЕстьУсловие = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область КэшированиеРезультатовАвтоподстановок

Функция ИспользуетсяКэшированиеАвтоподстановок()
	
	Возврат ПараметрыСеанса.ИспользоватьКэшированиеАвтоПодстановокОбъектов;
	
КонецФункции

Функция ЗначениеАвтоПодстановкиИзКэша(Автоподстановка, Объект, Расширенный, ВключаяСтроки)
		
	КлючЗначения = КлючЗначенияАвтоПодстановки(Автоподстановка, Объект, Расширенный, ВключаяСтроки);
	Возврат ПараметрыСеанса.КэшРезультатовАвтоПодстановокОбъектов.Получить(КлючЗначения);
	
КонецФункции

Функция НедопустимыйРезультатАвтоподстановкиВКэше()
	
	Возврат "НедопустимыйРезультат";
	
КонецФункции

Функция КлючЗначенияАвтоПодстановки(Автоподстановка, Объект, Расширенный, ВключаяСтроки)
	
	СтрокиКлюча = Новый Массив;
	СтрокиКлюча.Добавить(Строка(Автоподстановка.УникальныйИдентификатор()));
	СтрокиКлюча.Добавить(Строка(Объект.Ссылка.УникальныйИдентификатор()));
	СтрокиКлюча.Добавить(Строка(Расширенный));
	СтрокиКлюча.Добавить(Строка(ВключаяСтроки));
	
	Возврат СтрСоединить(СтрокиКлюча, "_");
	
КонецФункции

Процедура ДобавитьЗначениеАвтоПодстановкиВКэш(Автоподстановка, Объект, Расширенный, ВключаяСтроки, Значение)
		
	КэшРезльтатовАвтоПодстановок = Новый Соответствие(
		ПараметрыСеанса.КэшРезультатовАвтоПодстановокОбъектов);
	
	КлючЗначения = КлючЗначенияАвтоПодстановки(Автоподстановка, Объект, Расширенный, ВключаяСтроки);
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		Значение = Новый ФиксированныйМассив(Значение);
	ИначеЕсли ТипЗнч(Значение) = Тип("Структура") Тогда
		Значение = Новый ФиксированнаяСтруктура(Значение);
	КонецЕсли;
	КэшРезльтатовАвтоПодстановок[КлючЗначения] = Значение;
	
	ПараметрыСеанса.КэшРезультатовАвтоПодстановокОбъектов = Новый ФиксированноеСоответствие(
		КэшРезльтатовАвтоПодстановок);
	
КонецПроцедуры

// Файлы шаблона.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Файлы шаблона:
//   * Адрес - Строка 
//   * ДобавленИзШаблона - Булево
//   * ЕстьУсловие - Булево
//   * ИндексКартинки - Число
//   * Наименование - Строка
//   * ПолныйПуть - Строка
//   * Порядок - Число
//   * Размер - Число
//   * Расширение - Строка
//   * РольФайла - СправочникСсылка.РолиФайлов
//   * Условие - СправочникСсылка.АлгоритмыПроверки 
//   * ФайлОтраженияЭДО - Булево 
//   * ШаблонОснованиеДляСоздания - СправочникСсылка.Файлы
//
Функция ФайлыШаблона() Экспорт
	
	ФайлыШаблона = Новый ТаблицаЗначений;
	ФайлыШаблона.Колонки.Добавить("Адрес", Новый ОписаниеТипов("Строка"));
	ФайлыШаблона.Колонки.Добавить("ДобавленИзШаблона", Новый ОписаниеТипов("Булево"));
	ФайлыШаблона.Колонки.Добавить("ЕстьУсловие", Новый ОписаниеТипов("Булево"));
	ФайлыШаблона.Колонки.Добавить("ИндексКартинки", Новый ОписаниеТипов("Число"));
	ФайлыШаблона.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ФайлыШаблона.Колонки.Добавить("ПолныйПуть", Новый ОписаниеТипов("Строка"));
	ФайлыШаблона.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	ФайлыШаблона.Колонки.Добавить("Размер", Новый ОписаниеТипов("Число"));
	ФайлыШаблона.Колонки.Добавить("Расширение", Новый ОписаниеТипов("Строка"));
	ФайлыШаблона.Колонки.Добавить("РольФайла", Новый ОписаниеТипов("СправочникСсылка.РолиФайлов"));
	ФайлыШаблона.Колонки.Добавить("Условие", Новый ОписаниеТипов("СправочникСсылка.АлгоритмыПроверки"));
	ФайлыШаблона.Колонки.Добавить("ФайлОтраженияЭДО", Новый ОписаниеТипов("Булево"));
	ФайлыШаблона.Колонки.Добавить("ШаблонОснованиеДляСоздания", Новый ОписаниеТипов("СправочникСсылка.Файлы"));
	
	Возврат ФайлыШаблона;
	
КонецФункции

Процедура ДополнитьПечатиОрганизацииИзСкриптов(ПечатиОрганизации, ДокументВладелецФайла, ФайлСсылка)
				
	НастройкиАвтозаполнения =
		АвтозаполнениеШаблоновФайловВызовСервера.ПолучитьНастройкиАвтозаполненияШаблоновФайлов(
			ФайлСсылка,
			ДокументВладелецФайла,
			,
			Истина); // ИспользоватьСкриптыСДвоичнымиДанными

	Для Каждого Стр Из НастройкиАвтозаполнения.МассивЗамен Цикл
		Если ТипЗнч(Стр.ЗначениеЗамены) = Тип("ДвоичныеДанные") Тогда
			ИмяТега = Стр.ТермДляЗамены;
			Если  Не ЗначениеЗаполнено(ИмяТега) Тогда
				ИмяТега = Стр.ЗаменяемаяСтрока;
			КонецЕсли;	
			МассивДвДанные = Новый Массив;
			МассивДвДанные.Добавить(Стр.ЗначениеЗамены);
			ПечатиОрганизации[ИмяТега] = МассивДвДанные; 
		КонецЕсли;	
	КонецЦикла;	
							
КонецПроцедуры		

#КонецОбласти

#КонецОбласти