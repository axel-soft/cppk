// @strict-types


#Область ПрограммныйИнтерфейс

// Заполняет данные формализованного документа ЭДО
// 
// Параметры:
//  ОписаниеФайла - см. РаботаСФайламиБЭД.НовоеОписаниеФайла
//  ДанныеДляЗаполнения - см. ФорматыЭДОДокументооборотКлиентСервер.НовыеДанныеДляЗаполненияФормализованногоДокумента
// 
// Возвращаемое значение:
//  Структура - Заполнить данные формализованного документа:
//    * ДвоичныеДанные - Неопределено, ДвоичныеДанные - Двоичные данные заполненного документа
//    * ДанныеИзменены - Булево
//    * ЗаполненИдентификаторФайла - Булево
//    * ЗаполненПодписантДокумента - Булево
//    * ЗаполненыДоверенностиДокумента - Булево
//    * ЗаполненыУчастникиДокументооборота - Булево
//
Функция ЗаполнитьДанныеФормализованногоДокумента(ОписаниеФайла, ДанныеДляЗаполнения) Экспорт
	
	Контекст = НовыйКонтекстЗаполненияФормализованногоФайлаЭДО();
	Контекст.ОписаниеФайла = ОписаниеФайла;
	Контекст.ДанныеДляЗаполнения = ДанныеДляЗаполнения;
	Контекст.СодержаниеДокумента = ФорматыЭДО.ПрочитатьСодержаниеДокумента(ОписаниеФайла);
	
	Если Контекст.СодержаниеДокумента = Неопределено Тогда
		Возврат Контекст.Результат;
	КонецЕсли;
	
	ЗаполнитьИдентификаторФайла(Контекст);
	
	ЗаполнитьПодписантаДокумента(Контекст);
	
	ЗаполнитьДоверенностиДокумента(Контекст);
	
	ЗаполнитьДанныеУчастниковДокументооборота(Контекст);
	
	Возврат Контекст.Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйРезультатЗаполненияДанныхФормализованногоДокумента()
	
	Результат = Новый Структура;
	Результат.Вставить("ДвоичныеДанные", Неопределено);
	Результат.Вставить("ДанныеИзменены", Ложь);
	
	Результат.Вставить("ЗаполненИдентификаторФайла", Ложь);
	Результат.Вставить("ЗаполненПодписантДокумента", Ложь);
	Результат.Вставить("ЗаполненыДоверенностиДокумента", Ложь);
	Результат.Вставить("ЗаполненыУчастникиДокументооборота", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Новый контекст заполнения формализованного файла ЭДО.
// 
// Возвращаемое значение:
//  Структура - Новый контекст заполнения формализованного файла ЭДО:
// * ОписаниеФайла - см. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
// * ДанныеДляЗаполнения - см. ФорматыЭДОДокументооборотКлиентСервер.НовыеДанныеДляЗаполненияФормализованногоДокумента
// * СодержаниеДокумента - Неопределено
//                       - Структура:
//                           ** ИдентификаторДокумента - Строка
//                           ** ТипДокумента - ПеречислениеСсылка.ТипыДокументовЭДО
//                           ** ПрикладнойТипДокумента - Неопределено
//                           ** ТипРегламента - ПеречислениеСсылка.ТипыРегламентовЭДО
//                           ** НомерДокумента - Строка
//                           ** ДатаДокумента - Дата
//                           ** СуммаДокумента - Число
//                           ** ЕстьМаркировка - Булево
//                           ** Отправитель - Структура:
//                             *** Наименование - Строка
//                             *** ИНН - Строка
//                             *** КПП - Строка
//                           ** Получатель - Структура:
//                             *** Наименование - Строка
//                             *** ИНН - Строка
//                             *** КПП - Строка
//                           ** Формат - Строка
//                           ** ОтражениеВУчете - Неопределено
// * Результат - см. ЗаполнитьДанныеФормализованногоДокумента
//
Функция НовыйКонтекстЗаполненияФормализованногоФайлаЭДО()
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОписаниеФайла", РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла());
	Контекст.Вставить("ДанныеДляЗаполнения",
		ФорматыЭДОДокументооборотКлиентСервер.НовыеДанныеДляЗаполненияФормализованногоДокумента());
	Контекст.Вставить("СодержаниеДокумента", Неопределено);
	Контекст.Вставить("Результат", НовыйРезультатЗаполненияДанныхФормализованногоДокумента());
	
	Возврат Контекст;
	
КонецФункции

#Область ЗаполнениеИдентификатораФайла

Процедура ЗаполнитьИдентификаторФайла(Контекст)
	
	ДанныеДляЗаполнения = Контекст.ДанныеДляЗаполнения;
	СодержаниеДокумента = Контекст.СодержаниеДокумента;
	ОписаниеФайла = Контекст.ОписаниеФайла;
	
	Если (ДанныеДляЗаполнения.ИдентификаторФайла = Неопределено
		И ДанныеДляЗаполнения.УчастникиДокументооборота = Неопределено) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Не ЗаполнениеИдентификатораФайлаДоступно(СодержаниеДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	ХешДоЗаполнения = ХешПоОписаниюФайла(ОписаниеФайла);
	
	ОписаниеЗаполненногоФайла = ЗаполнитьПолеИдентификатораФайла(ОписаниеФайла, СодержаниеДокумента, ДанныеДляЗаполнения);
	
	ХешПослеЗаполнения = ХешПоОписаниюФайла(ОписаниеЗаполненногоФайла);
	
	Если ХешПослеЗаполнения <> ХешДоЗаполнения Тогда
		Контекст.Результат.ДанныеИзменены = Истина;
		Контекст.Результат.ДвоичныеДанные = ОписаниеЗаполненногоФайла.ДвоичныеДанные;
		Контекст.Результат.ЗаполненИдентификаторФайла = Истина;
		Контекст.ОписаниеФайла = ОписаниеЗаполненногоФайла;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнениеИдентификатораФайлаДоступно(СодержаниеДокумента)
	
	Формат = СодержаниеДокумента.Формат;
	ПоддерживаемыеФорматы = ФорматыЭДО.ПоддерживаемыеФорматы();
	
	Возврат Формат = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПродавца
		Или Формат = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПокупателя
		Или Формат = ПоддерживаемыеФорматы.ФНС.УПД.ИнформацияПокупателя
		Или Формат = ПоддерживаемыеФорматы.ФНС.ПередачаТоваров.ИнформацияПродавца
		Или Формат = ПоддерживаемыеФорматы.ФНС.ПередачаТоваров.ИнформацияПокупателя
		Или Формат = ПоддерживаемыеФорматы.ФНС.ПередачаРабот.ИнформацияПродавца
		Или Формат = ПоддерживаемыеФорматы.ФНС.ПередачаРабот.ИнформацияПокупателя
		Или Формат = ПоддерживаемыеФорматы.ФНС.ПриемкаСдачаРабот.ИнформацияПокупателя
		Или Формат = ПоддерживаемыеФорматы.ФНС.АктОРасхождениях.ИнформацияПокупателя
		Или Формат = ПоддерживаемыеФорматы.ФНС.УКД.ИнформацияПродавца
		Или Формат = ПоддерживаемыеФорматы.ФНС.УКД.ИнформацияПокупателя
		Или Формат = ПоддерживаемыеФорматы.ФНС.УКД2020.ИнформацияПродавца
		Или Формат = ПоддерживаемыеФорматы.ФНС.УКД2020.ИнформацияПокупателя
		Или Формат = ПоддерживаемыеФорматы.ФНС.ИзвещениеОПолучении
		Или Формат = ПоддерживаемыеФорматы.ПредложениеОбАннулировании
		Или Формат = ПоддерживаемыеФорматы.ФНС.УведомлениеОбУточнении;
	
КонецФункции

Функция ЗаполнитьПолеИдентификатораФайла(ОписаниеФайла, СодержаниеДокумента, ДанныеДляЗаполнения)
	
	Формат = СодержаниеДокумента.Формат;
	ПространствоИмен = ПространствоИменПоФормату(Формат);
	ДанныеФайла = ОбъектXDTOИзДанныхФайла(ОписаниеФайла.ДвоичныеДанные, ПространствоИмен);
	
	ИдентификаторЗаписанный = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайла, "ИдФайл");
	
	Если Не ИдентификаторСоответствуетСтандарту(ИдентификаторЗаписанный, Формат) Тогда
		Возврат ОписаниеФайла;
	КонецЕсли;
	
	СоставИдентификатора = СоставИдентификатораФайла(ИдентификаторЗаписанный, Формат);
	
	Если ДанныеДляЗаполнения.ИдентификаторФайла <> Неопределено Тогда
		СоставИдентификатора.ГУИД = Строка(ДанныеДляЗаполнения.ИдентификаторФайла);
	КонецЕсли;
	
	СведенияУчастников = ДанныеДляЗаполнения.УчастникиДокументооборота;
	Если СведенияУчастников <> Неопределено Тогда
		СоставИдентификатора.ИдентификаторОтправителя = СведенияУчастников.ИдентификаторОтправителя;
		СоставИдентификатора.ИдентификаторПолучателя = СведенияУчастников.ИдентификаторПолучателя;
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	СоставИдентификатора.Дата = ТекущаяДата;
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайла, "ИдФайл", ИдентификаторФайлаПоСоставу(СоставИдентификатора));
	
	// @skip-check invocation-parameter-type-intersect - Ошибка библиотеки
	ДвоичныеДанные = РаботаСФайламиБЭД.XDTOВДвоичныеДанные(ДанныеФайла, Ложь);
	ДвоичныеДанные = ОбщегоНазначенияБЭД.УдалитьПространствоИмен(ДвоичныеДанные, ПространствоИмен);
	
	ИтоговыйФайл = РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла();
	ИтоговыйФайл.ДвоичныеДанные = ДвоичныеДанные;
	ИтоговыйФайл.ИмяФайла = ОписаниеФайла.ИмяФайла;
	
	Возврат ИтоговыйФайл;
	
КонецФункции

Функция ИдентификаторСоответствуетСтандарту(Идентификатор, Формат) Экспорт
	
	ПрефиксФормата = ПрефиксИдентификатораФайла(Формат);
	Если Не СтрНачинаетсяС(Идентификатор, ПрефиксФормата) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЧастиИдентификатора = СтрРазделить(Идентификатор, "_");
	
	Если ЧастиИдентификатора.Количество() < 4 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЧастьГУИДА = ЧастиИдентификатора[ЧастиИдентификатора.ВГраница()];
	Если СтрДлина(ЧастьГУИДА) <> 36 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЧастьДаты = ЧастиИдентификатора[ЧастиИдентификатора.ВГраница() - 1];
	Если Не (СтрДлина(ЧастьДаты) = 8
			Или СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЧастьДаты)) Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Месяц = Число(Сред(ЧастьДаты, 5, 2));
	Число = Число(Прав(ЧастьДаты, 2));
	
	Если Не (Месяц >= 1 И Месяц <= 12) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не (Число >= 1 И Число <= 31) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СоставИдентификатораФайла(Знач ИдентификаторСтрокой, Формат)
	
	СоставИдентификатора = Новый Структура;
	СоставИдентификатора.Вставить("ПрефиксФормата", "");
	СоставИдентификатора.Вставить("ИдентификаторОтправителя", "");
	СоставИдентификатора.Вставить("ИдентификаторПолучателя", "");
	СоставИдентификатора.Вставить("Дата", Дата(1, 1, 1));
	СоставИдентификатора.Вставить("ГУИД", "");
	
	Если Не ИдентификаторСоответствуетСтандарту(ИдентификаторСтрокой, Формат) Тогда
		Возврат СоставИдентификатора;
	КонецЕсли;
	
	ПрефиксОбязательный = ПрефиксИдентификатораФайла(Формат);
	
	ДлинаИдентификатора = СтрДлина(ИдентификаторСтрокой);
	ДлинаПрефикса = СтрДлина(ПрефиксОбязательный);
	ИдентификаторСтрокой = Прав(ИдентификаторСтрокой, ДлинаИдентификатора - ДлинаПрефикса);
	
	ЧастиИдентификатора = СтрРазделить(ИдентификаторСтрокой, "_");
	
	СоставИдентификатора.ПрефиксФормата = ПрефиксОбязательный + ЧастиИдентификатора[0];
	ЧастиИдентификатора.Удалить(0);
	
	СоставИдентификатора.ГУИД = ЧастиИдентификатора[ЧастиИдентификатора.ВГраница()];
	ЧастиИдентификатора.Удалить(ЧастиИдентификатора.ВГраница());
	
	ДатаСтрокой = ЧастиИдентификатора[ЧастиИдентификатора.ВГраница()];
	
	Год = Число(Лев(ДатаСтрокой, 4));
	Месяц = Число(Сред(ДатаСтрокой, 5, 2));
	Число = Число(Прав(ДатаСтрокой, 2));
	
	СоставИдентификатора.Дата = Дата(Год, Месяц, Число);
	ЧастиИдентификатора.Удалить(ЧастиИдентификатора.ВГраница());
	
	ЧастиИдентификатораОтправителя = Новый Массив();
	ЧастиИдентификатораПолучателя = Новый Массив();
	
	ПоследнийИндексПолучателя = Цел(ЧастиИдентификатора.ВГраница()/2);
	
	Для Счетчик = 0 По ЧастиИдентификатора.ВГраница() Цикл
		
		Часть = ЧастиИдентификатора[Счетчик];
		
		Если Счетчик > ПоследнийИндексПолучателя Тогда
			ЧастиИдентификатораОтправителя.Добавить(Часть);
		Иначе
			ЧастиИдентификатораПолучателя.Добавить(Часть);
		КонецЕсли;
		
	КонецЦикла;
	
	СоставИдентификатора.ИдентификаторОтправителя = СтрСоединить(ЧастиИдентификатораОтправителя, "_");
	СоставИдентификатора.ИдентификаторПолучателя = СтрСоединить(ЧастиИдентификатораПолучателя, "_");
	
	Возврат СоставИдентификатора;
	
КонецФункции

Функция ПрефиксИдентификатораФайла(Формат)
	
	ПоддерживаемыеФорматы = ФорматыЭДО.ПоддерживаемыеФорматы();
	Если Формат = ПоддерживаемыеФорматы.ФНС.УПД.ИнформацияПокупателя Тогда
		Возврат "ON_SCHFDOPPOK";
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПродавца Тогда
		Возврат "ON_NSCHFDOPPR";
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПокупателя Тогда
		Возврат "ON_NSCHFDOPPOK";
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.ПередачаТоваров.ИнформацияПродавца Тогда
		Возврат "DP_TOVTORGPR";
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.ПередачаТоваров.ИнформацияПокупателя Тогда
		Возврат "DP_TOVTORGPOK";
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.ПередачаРабот.ИнформацияПродавца Тогда
		Возврат "DP_REZRUISP";
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.ПередачаРабот.ИнформацияПокупателя Тогда
		Возврат "DP_REZRUZAK";
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.ПриемкаСдачаРабот.ИнформацияПокупателя Тогда
		Возврат "DP_ZAKTPRM";
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.АктОРасхождениях.ИнформацияПокупателя Тогда
		Возврат "DP_PRIRASXPRIN";
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.УКД.ИнформацияПродавца Тогда
		Возврат "ON_KORSCHFDOPPR";
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.УКД.ИнформацияПокупателя Тогда
		Возврат "ON_KORSCHFDOPPOK";
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.УКД2020.ИнформацияПродавца Тогда
		Возврат "ON_NKORSCHFDOPPR";
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.УКД2020.ИнформацияПокупателя Тогда
		Возврат "ON_NKORSCHFDOPPOK";
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.ИзвещениеОПолучении Тогда
		Возврат "DP_IZVPOL";
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ПредложениеОбАннулировании Тогда
		Возврат "DP_PRANNUL";
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.УведомлениеОбУточнении Тогда
		Возврат "DP_UVUTOCH";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ИдентификаторФайлаПоСоставу(СоставИдентификатора)
	
	Возврат СтрШаблон("%1_%2_%3_%4_%5",
		СоставИдентификатора.ПрефиксФормата,
		СоставИдентификатора.ИдентификаторПолучателя,
		СоставИдентификатора.ИдентификаторОтправителя,
		Формат(СоставИдентификатора.Дата, "ДФ=yyyyMMdd;"),
		СоставИдентификатора.ГУИД);
	
КонецФункции

#КонецОбласти

Процедура ЗаполнитьПодписантаДокумента(Контекст)
	
	ДанныеПодписанта = Контекст.ДанныеДляЗаполнения.ПодписантДокумента;
	СодержаниеДокумента = Контекст.СодержаниеДокумента;
	ОписаниеФайла = Контекст.ОписаниеФайла;
	
	Если ДанныеПодписанта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ФорматыЭДО.ЗаполнениеДанныхПодписантаДоступно(СодержаниеДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	ХешДоЗаполнения = ХешПоОписаниюФайла(ОписаниеФайла);
	
	ОписаниеЗаполненногоФайла = ФорматыЭДО.ЗаполнитьДанныеПодписантаДокумента(
		ОписаниеФайла,
		ДанныеПодписанта.Организация,
		ДанныеПодписанта.Сертификат,
		СодержаниеДокумента);
	
	ХешПослеЗаполнения = ХешПоОписаниюФайла(ОписаниеЗаполненногоФайла);
	
	Если ХешПослеЗаполнения <> ХешДоЗаполнения Тогда
		Контекст.Результат.ДанныеИзменены = Истина;
		Контекст.Результат.ДвоичныеДанные = ОписаниеЗаполненногоФайла.ДвоичныеДанные;
		Контекст.Результат.ЗаполненПодписантДокумента = Истина;
		Контекст.ОписаниеФайла = ОписаниеЗаполненногоФайла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДоверенностиДокумента(Контекст)
	
	ДополнитьДоверенностиДоверенностьюПодписанта(Контекст);
	
	ДанныеПодписанта = Контекст.ДанныеДляЗаполнения.ПодписантДокумента;
	Доверенности = Контекст.ДанныеДляЗаполнения.ДоверенностиДокумента;
	СодержаниеДокумента = Контекст.СодержаниеДокумента;
	ОписаниеФайла = Контекст.ОписаниеФайла;
	
	// Если не заполнен подписант документа, то доверенности также не имеют смысла
	Если Доверенности = Неопределено
		Или ДанныеПодписанта Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Не ФорматыЭДО.ЗаполнениеДанныхПодписантаДоступно(СодержаниеДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	ХешДоЗаполнения = ХешПоОписаниюФайла(ОписаниеФайла);
	
	ОписаниеЗаполненногоФайла = ФорматыЭДО.ЗаполнитьДанныеДоверенностейДокумента(
		ОписаниеФайла,
		ДанныеПодписанта.Организация,
		Доверенности,
		СодержаниеДокумента);
	
	ХешПослеЗаполнения = ХешПоОписаниюФайла(ОписаниеЗаполненногоФайла);
	
	Если ХешПослеЗаполнения <> ХешДоЗаполнения Тогда
		Контекст.Результат.ДанныеИзменены = Истина;
		Контекст.Результат.ДвоичныеДанные = ОписаниеЗаполненногоФайла.ДвоичныеДанные;
		Контекст.Результат.ЗаполненыДоверенностиДокумента = Истина;
		Контекст.ОписаниеФайла = ОписаниеЗаполненногоФайла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДоверенностиДоверенностьюПодписанта(Контекст)
	
	ДанныеПодписанта = Контекст.ДанныеДляЗаполнения.ПодписантДокумента;
	Доверенности = Контекст.ДанныеДляЗаполнения.ДоверенностиДокумента;
	
	Если ДанныеПодписанта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеПодписанта.Доверенность) Тогда
		Возврат;
	КонецЕсли;
	
	Если Доверенности = Неопределено Тогда
		Доверенности = ФорматыЭДОДокументооборотКлиентСервер.НовыеДанныеДоверенностейДокумента();
	КонецЕсли;
	
	Доверенности.Добавить(ДанныеПодписанта.Доверенность);
	
	Контекст.ДанныеДляЗаполнения.ДоверенностиДокумента = Доверенности;
	
КонецПроцедуры

#Область ЗаполнениеДанныхУчастников

Процедура ЗаполнитьДанныеУчастниковДокументооборота(Контекст)
	
	ДанныеУчастников = Контекст.ДанныеДляЗаполнения.УчастникиДокументооборота;
	СодержаниеДокумента = Контекст.СодержаниеДокумента;
	ОписаниеФайла = Контекст.ОписаниеФайла;
	
	Если ДанныеУчастников = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗаполнениеДанныхУчастниковЭДОДоступно(СодержаниеДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	ХешДоЗаполнения = ХешПоОписаниюФайла(ОписаниеФайла);
	
	ОписаниеЗаполненногоФайла = ЗаполнитьПоляУчастниковЭДОВФайле(ОписаниеФайла, СодержаниеДокумента.Формат, ДанныеУчастников);
	
	ХешПослеЗаполнения = ХешПоОписаниюФайла(ОписаниеЗаполненногоФайла);
	
	Если ХешПослеЗаполнения <> ХешДоЗаполнения Тогда
		Контекст.Результат.ДанныеИзменены = Истина;
		Контекст.Результат.ДвоичныеДанные = ОписаниеЗаполненногоФайла.ДвоичныеДанные;
		Контекст.Результат.ЗаполненыУчастникиДокументооборота = Истина;
		Контекст.ОписаниеФайла = ОписаниеЗаполненногоФайла;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнениеДанныхУчастниковЭДОДоступно(СодержаниеДокумента)
	
	Формат = СодержаниеДокумента.Формат;
	
	ПоддерживаемыеФорматы = ФорматыЭДО.ПоддерживаемыеФорматы();
	
	Возврат Формат = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПродавца
		Или Формат = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПокупателя
		Или Формат = ПоддерживаемыеФорматы.ФНС.УПД.ИнформацияПокупателя
		Или Формат = ПоддерживаемыеФорматы.ФНС.ПередачаТоваров.ИнформацияПродавца
		Или Формат = ПоддерживаемыеФорматы.ФНС.ПередачаТоваров.ИнформацияПокупателя
		Или Формат = ПоддерживаемыеФорматы.ФНС.ПередачаРабот.ИнформацияПродавца
		Или Формат = ПоддерживаемыеФорматы.ФНС.ПередачаРабот.ИнформацияПокупателя
		Или Формат = ПоддерживаемыеФорматы.ФНС.ПриемкаСдачаРабот.ИнформацияПокупателя
		Или Формат = ПоддерживаемыеФорматы.ФНС.АктОРасхождениях.ИнформацияПокупателя
		Или Формат = ПоддерживаемыеФорматы.ФНС.УКД.ИнформацияПродавца
		Или Формат = ПоддерживаемыеФорматы.ФНС.УКД.ИнформацияПокупателя
		Или Формат = ПоддерживаемыеФорматы.ФНС.УКД2020.ИнформацияПродавца
		Или Формат = ПоддерживаемыеФорматы.ФНС.УКД2020.ИнформацияПокупателя;
	
КонецФункции

Функция ЗаполнитьПоляУчастниковЭДОВФайле(ОписаниеФайла, Формат, ДанныеУчастников)
	
	ПространствоИмен = ПространствоИменПоФормату(Формат);
	
	ДанныеФайла = ОбъектXDTOИзДанныхФайла(ОписаниеФайла.ДвоичныеДанные, ПространствоИмен);
	
	ИменаПолей = ИменаПолейСведенийУчастниковЭДО(Формат);
	
	АдресСведенийУчастников = СтрШаблон("Файл.%1", ИменаПолей.СведенияУчастников);
	СведенияУчастниковЭДО = ФорматыЭДО.ПолучитьОбъектТипаCML(АдресСведенийУчастников, ПространствоИмен);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияУчастниковЭДО,
		ИменаПолей.ИдентификаторОтправителя, ДанныеУчастников.ИдентификаторОтправителя);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияУчастниковЭДО,
		ИменаПолей.ИдентификаторПолучателя, ДанныеУчастников.ИдентификаторПолучателя);
	
	АдресСведенийОператора = СтрШаблон("Файл.%1.%2", ИменаПолей.СведенияУчастников, ИменаПолей.СведенияОператора);
	СведенияОператораЭДО = ФорматыЭДО.ПолучитьОбъектТипаCML(АдресСведенийОператора, ПространствоИмен);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОператораЭДО,
		ИменаПолей.НаименованиеОператора, ДанныеУчастников.Оператор.Наименование);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОператораЭДО,
		ИменаПолей.ИННОператора, ДанныеУчастников.Оператор.ИНН);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияОператораЭДО,
		ИменаПолей.ИдентификаторОператора, ДанныеУчастников.Оператор.Идентификатор);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведенияУчастниковЭДО, ИменаПолей.СведенияОператора, СведенияОператораЭДО);
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ДанныеФайла, ИменаПолей.СведенияУчастников, СведенияУчастниковЭДО);
	
	// @skip-check invocation-parameter-type-intersect - Ошибка библиотеки
	ДвоичныеДанные = РаботаСФайламиБЭД.XDTOВДвоичныеДанные(ДанныеФайла, Ложь);
	ДвоичныеДанные = ОбщегоНазначенияБЭД.УдалитьПространствоИмен(ДвоичныеДанные, ПространствоИмен);
	
	ИтоговыйФайл = РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла();
	ИтоговыйФайл.ДвоичныеДанные = ДвоичныеДанные;
	ИтоговыйФайл.ИмяФайла = ОписаниеФайла.ИмяФайла;
	
	Возврат ИтоговыйФайл;
	
КонецФункции

Функция ИменаПолейСведенийУчастниковЭДО(Формат)
	
	ИменаПолей = Новый Структура;
	
	ИменаПолей.Вставить("СведенияУчастников", "СвУчДокОбор");
	
	ИменаПолей.Вставить("ИдентификаторОтправителя", "ИдОтпр");
	ИменаПолей.Вставить("ИдентификаторПолучателя", "ИдПол");
	
	ИменаПолей.Вставить("СведенияОператора", "СвОЭДОтпр");
	
	ИменаПолей.Вставить("НаименованиеОператора", "НаимОрг");
	ИменаПолей.Вставить("ИННОператора", "ИННЮЛ");
	ИменаПолей.Вставить("ИдентификаторОператора", "ИдЭДО");
	
	ПоддерживаемыеФорматы = ФорматыЭДО.ПоддерживаемыеФорматы();
	Если Формат = ПоддерживаемыеФорматы.ФНС.ПриемкаСдачаРабот.ИнформацияПокупателя Тогда
		
		ИменаПолей.ИдентификаторПолучателя = "ИдПок";
		ИменаПолей.СведенияОператора = "СвОЭДОтпрСФ";
		
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.АктОРасхождениях.ИнформацияПокупателя Тогда
		
		ИменаПолей.СведенияОператора = "СвОЭДОтпрСФ";
		
	КонецЕсли;
	
	Возврат ИменаПолей;
	
КонецФункции

#КонецОбласти

#Область ОбщиеМетодыРаботыСФайлами

Функция ХешПоОписаниюФайла(ОписаниеФайла)
	
	Хеширование = Новый ХешированиеДанных(ХешФункция.CRC32);
	Хеширование.Добавить(ОписаниеФайла.ДвоичныеДанные);
	
	Возврат Хеширование.ХешСумма;
	
КонецФункции

Функция ПространствоИменПоФормату(Формат)
	
	ПоддерживаемыеФорматы = ФорматыЭДО.ПоддерживаемыеФорматы();
	
	Если Формат = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПродавца Тогда
		Возврат "ON_NSCHFDOPPR_2019";
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПокупателя Тогда
		Возврат "ON_NSCHFDOPPOK_2019";
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.УПД.ИнформацияПокупателя Тогда
		Возврат "ON_SCHFDOPPOK_5_01";
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.ПередачаТоваров.ИнформацияПродавца Тогда
		Возврат "TORGPR";
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.ПередачаТоваров.ИнформацияПокупателя Тогда
		Возврат "TORGPOK";
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.ПередачаРабот.ИнформацияПродавца Тогда
		Возврат "RUISP";
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.ПередачаРабот.ИнформацияПокупателя Тогда
		Возврат "RUZAK";
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.ПриемкаСдачаРабот.ИнформацияПокупателя Тогда
		Возврат "ZAKTPRM_5_01_02";
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.АктОРасхождениях.ИнформацияПокупателя Тогда
		Возврат "DP_PRIRASXPRIN_5_01";
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.УКД.ИнформацияПродавца Тогда
		Возврат "ON_KORSCHFDOPPR";
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.УКД.ИнформацияПокупателя Тогда
		Возврат "ON_KORSCHFDOPPOK";
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.УКД2020.ИнформацияПродавца Тогда
		Возврат "ON_NKORSCHFDOPPR_2020";
	ИначеЕсли Формат = ПоддерживаемыеФорматы.ФНС.УКД2020.ИнформацияПокупателя Тогда
		Возврат "ON_NKORSCHFDOPPOK_2020";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ОбъектXDTOИзДанныхФайла(ДвоичныеДанные, ПространствоИмен)
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьПоток(ДвоичныеДанные.ОткрытьПотокДляЧтения());
	
	ПостроительDOM = Новый ПостроительDOM();
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	ДокументDOM.ЭлементДокумента.УстановитьСоответствиеПространстваИмен("", ПространствоИмен);
	
	ПотокЗаписи = Новый ПотокВПамяти();
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.ОткрытьПоток(ПотокЗаписи);
	
	ЗаписьDOM = Новый ЗаписьDOM();
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	ЗаписьXML.Закрыть();
	
	ПотокЗаписи.Перейти(0, ПозицияВПотоке.Начало);
	
	// @skip-check invocation-parameter-type-intersect - Ошибка библиотеки
	ТипДанныхXDTO = ФорматыЭДО.ПолучитьТипЗначенияCML("Файл", ПространствоИмен);
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьПоток(ПотокЗаписи);
	ДанныеФайла = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипДанныхXDTO); // ОбъектXDTO
	
	Возврат ДанныеФайла;
	
КонецФункции

#КонецОбласти

#КонецОбласти
