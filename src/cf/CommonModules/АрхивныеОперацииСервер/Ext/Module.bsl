#Область ПрограммныйИнтерфейс

// Выполняется регл. заданием ОбработкаОчередиОперацийСДелами.
// 
Процедура ОбработкаОчередиОперацийСДелами() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбработкаОчередиОперацийСДелами);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Количество = РегистрыСведений.ОчередьОперацийСДелами.ОбработатьПорцию();
	Пока Количество <> 0 Цикл
		Количество = РегистрыСведений.ОчередьОперацийСДелами.ОбработатьПорцию();
	КонецЦикла;	
	
КонецПроцедуры

// Выполняет отложенные операции по передаче документов дела в архив.
//
// Параметры:
//  Дело - СправочникСсылка.ДелаХраненияДокументов - дело.
//  ДатаОперации - Дата - если указана, то запись не будет обрабатываться до наступления этой даты.
//  Немедленно - Булево - если Ложь, то задание записывается в очередь, удаление выполняется отложенно.
// 
Процедура ОбработатьПередачуДокументовВАрхив(Дело, ДатаОперации = '00010101', Немедленно = Ложь) Экспорт
	
	Если Не Немедленно Тогда
		ОтсрочкаВДнях = Константы.ОтсрочкаУдаленияДанныхУничтоженныхДокументов.Получить();
		Если Не ЗначениеЗаполнено(ОтсрочкаВДнях) Тогда
			ОтсрочкаВДнях = 14;
		КонецЕсли;
		ДатаУдаления = Макс(ДатаОперации, ТекущаяДатаСеанса() + ОтсрочкаВДнях * 24 * 3600);
		РегистрыСведений.ОчередьОперацийСДелами.Добавить(
			Дело, ДатаУдаления, "ОбработатьПередачуДокументовВАрхив");
		Возврат;
	КонецЕсли;
	
	УдалитьФайлыДокументовДела(Дело, НСтр("ru = 'Передача дел в архив'"));
	УдалитьПодписиДокументовДела(Дело);
	
КонецПроцедуры

// Выполняет отложенные операции по уничтожению документов дела.
//
// Параметры:
//  Дело - СправочникСсылка.ДелаХраненияДокументов - дело.
//  ДатаОперации - Дата - если указана, то запись не будет обрабатываться до наступления этой даты.
//  Немедленно - Булево - если Ложь, то задание записывается в очередь, удаление выполняется отложенно.
// 
Процедура ОбработатьУничтожениеДокументов(Дело, ДатаОперации = '00010101', Немедленно = Ложь) Экспорт
	
	Если Не Немедленно Тогда
		ОтсрочкаВДнях = Константы.ОтсрочкаУдаленияДанныхУничтоженныхДокументов.Получить();
		Если Не ЗначениеЗаполнено(ОтсрочкаВДнях) Тогда
			ОтсрочкаВДнях = 14;
		КонецЕсли;
		ДатаУдаления = Макс(ДатаОперации, ТекущаяДатаСеанса() + ОтсрочкаВДнях * 24 * 3600);
		РегистрыСведений.ОчередьОперацийСДелами.Добавить(
			Дело, ДатаУдаления, "ОбработатьУничтожениеДокументов");
		Возврат;
	КонецЕсли;
	
	УдалитьФайлыДокументовДела(Дело, НСтр("ru = 'Уничтожение дел'"));
	УдалитьПодписиДокументовДела(Дело);
	
КонецПроцедуры

// Отменяет отложенные операции по уничтожению документов.
//
// Параметры:
//  ДокументУничтожение - ДокументСсылка.УничтожениеДел - документ "Уничтожение дел".
// 
Процедура ОтменитьУничтожениеДокументов(ДокументУничтожение) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОчередьОперацийСДелами.Объект КАК Объект,
		|	ОчередьОперацийСДелами.ДопСведения КАК ДопСведения
		|ИЗ
		|	Документ.УничтожениеДел.ДелаХраненияДокументов КАК УничтожениеДелДелаХраненияДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьОперацийСДелами КАК ОчередьОперацийСДелами
		|		ПО УничтожениеДелДелаХраненияДокументов.ДелоХраненияДокументов = ОчередьОперацийСДелами.Объект
		|ГДЕ
		|	УничтожениеДелДелаХраненияДокументов.Ссылка = &ДокументУничтожение
		|	И ОчередьОперацийСДелами.ДопСведения = &ИмяОперации");
	
	Запрос.УстановитьПараметр("ДокументУничтожение", ДокументУничтожение);
	Запрос.УстановитьПараметр("ИмяОперации", "ОбработатьУничтожениеДокументов");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.ОчередьОперацийСДелами.Удалить(Выборка.Объект, Выборка.ДопСведения);
	КонецЦикла;
	
КонецПроцедуры

// Отменяет отложенные операции по уничтожению документов.
//
// Параметры:
//  ДокументПередача - ДокументСсылка.ПередачаДелВАрхив - документ "Передача дел в архив".
// 
Процедура ОтменитьПередачуДокументовВАрхив(ДокументПередача) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОчередьОперацийСДелами.Объект КАК Объект,
		|	ОчередьОперацийСДелами.ДопСведения КАК ДопСведения
		|ИЗ
		|	Документ.ПередачаДелВАрхив.ДелаХраненияДокументов КАК ПередачаДелДелаХраненияДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьОперацийСДелами КАК ОчередьОперацийСДелами
		|		ПО ПередачаДелДелаХраненияДокументов.ДелоХраненияДокументов = ОчередьОперацийСДелами.Объект
		|ГДЕ
		|	ПередачаДелДелаХраненияДокументов.Ссылка = &ДокументПередача
		|	И ОчередьОперацийСДелами.ДопСведения = &ИмяОперации");
	
	Запрос.УстановитьПараметр("ДокументПередача", ДокументПередача);
	Запрос.УстановитьПараметр("ИмяОперации", "ОбработатьПередачуДокументовВАрхив");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.ОчередьОперацийСДелами.Удалить(Выборка.Объект, Выборка.ДопСведения);
	КонецЦикла;
	
КонецПроцедуры

// Удаляет файлы документов переданного дела, включая служебные.
//
// Параметры:
//  Дело - СправочникСсылка.ДелаХраненияДокументов - дело.
//  ИмяОперацииОснования - Строка - имя операции для протоколирования. Например, "Уничтожение дел".
//
Процедура УдалитьФайлыДокументовДела(Дело, ИмяОперацииОснования) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Поиск и обработка документов.
	УдаленоФайлов = 0;
	УдаленоВерсий = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КритерийОтбораДокументыВДеле.Ссылка КАК Документ
		|ПОМЕСТИТЬ ДокументыДела
		|ИЗ
		|	КритерийОтбора.ДокументыВДелеТоме(&Дело) КАК КритерийОтбораДокументыВДеле
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыДела.Документ КАК Документ,
		|	Файлы.Ссылка КАК Файл,
		|	ВерсииФайлов.Ссылка КАК ВерсияФайла,
		|	ВерсииФайлов.ТипХраненияФайла = ЗНАЧЕНИЕ(Перечисление.ТипыХраненияФайлов.ВТомахНаДиске) КАК ХранитсяВТоме,
		|	ВерсииФайлов.Том КАК Том,
		|	ВерсииФайлов.ПутьКФайлу КАК ПутьКФайлу
		|ИЗ
		|	ДокументыДела КАК ДокументыДела
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО ДокументыДела.Документ = Файлы.ВладелецФайла
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
		|		ПО (Файлы.Ссылка = ВерсииФайлов.Владелец)
		|			И (НЕ ВерсииФайлов.ФайлУдален)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДокументыДела.Документ,
		|	СлужебныеФайлыДокументов.Файл,
		|	ВерсииФайлов.Ссылка,
		|	ВерсииФайлов.ТипХраненияФайла = ЗНАЧЕНИЕ(Перечисление.ТипыХраненияФайлов.ВТомахНаДиске),
		|	ВерсииФайлов.Том,
		|	ВерсииФайлов.ПутьКФайлу
		|ИЗ
		|	ДокументыДела КАК ДокументыДела
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО ДокументыДела.Документ = СлужебныеФайлыДокументов.Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
		|		ПО (СлужебныеФайлыДокументов.Файл = ВерсииФайлов.Владелец)
		|			И (НЕ ВерсииФайлов.ФайлУдален)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Документ
		|ИТОГИ ПО
		|	Документ,
		|	Файл");
	
	Запрос.УстановитьПараметр("Дело", Дело);
	ВыборкаДокументы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДокументы.Следующий() Цикл
		
		ПредставленияУдаленныхФайлов = Новый Массив;
		
		НачатьТранзакцию();
		Попытка
			
			ВыборкаФайлы = ВыборкаДокументы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаФайлы.Следующий() Цикл
				
				// Файлы и версии помечаются на удаление,
				// в версиях удаляется извлеченный текст,
				// физические файлы удаляются.
				
				ФайлОбъект = ВыборкаФайлы.Файл.ПолучитьОбъект();
				ФайлОбъект.ПометкаУдаления = Истина;
				ФайлОбъект.ТекущаяВерсияТом = Неопределено;
				ФайлОбъект.ТекущаяВерсияПутьКФайлу = "";
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ФайлОбъект);
				
				РегистрыСведений.ТекстыФайлов.УдалитьЗапись(ВыборкаФайлы.Файл);
				
				ПредставленияУдаленныхФайлов.Добавить(СтрШаблон("%1 (%2)",
					ФайлОбъект.Наименование, ПолучитьНавигационнуюСсылку(ФайлОбъект.Ссылка)));
				
				Выборка = ВыборкаФайлы.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					Если Не ЗначениеЗаполнено(Выборка.ВерсияФайла) Тогда
						Продолжить;
					КонецЕсли;
					
					ВерсияФайлаОбъект = Выборка.ВерсияФайла.ПолучитьОбъект();
					Если ВерсияФайлаОбъект = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ВерсияФайлаОбъект.ПометкаУдаления = Истина;
					ВерсияФайлаОбъект.ФайлХранилище = Неопределено;
					ВерсияФайлаОбъект.ФайлУдален = Истина;
					ВерсияФайлаОбъект.Том = Неопределено;
					ВерсияФайлаОбъект.ПутьКФайлу = "";
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВерсияФайлаОбъект);
					
					РегистрыСведений.ТекстыВерсийФайлов.УдалитьЗапись(Выборка.ВерсияФайла);
					
					Если Выборка.ХранитсяВТоме Тогда
						ПолныйПуть = ФайловыеФункции.ПолныйПутьТома(Выборка.Том) + Выборка.ПутьКФайлу; 
						ФайлКУдалению = Новый Файл(ПолныйПуть);
						Если Не ФайлКУдалению.Существует() Тогда
							Продолжить;
						КонецЕсли;
						Если ФайлКУдалению.ПолучитьТолькоЧтение() Тогда
							ФайлКУдалению.УстановитьТолькоЧтение(Ложь);
						КонецЕсли;
						УдалитьФайлы(ПолныйПуть);
					Иначе
						РаботаСФайламиВызовСервера.УдалитьЗаписьИзРегистраХранимыеФайлыВерсий(Выборка.ВерсияФайла);
					КонецЕсли;
					УдаленоВерсий = УдаленоВерсий + 1;
					
				КонецЦикла;
				УдаленоФайлов = УдаленоФайлов + 1;
				
				НаборПредпросмотрФайлов = РегистрыСведений.ПредпросмотрФайлов.СоздатьНаборЗаписей();
				НаборПредпросмотрФайлов.Отбор.Файл.Установить(ВыборкаФайлы.Файл);
				НаборПредпросмотрФайлов.Записать();
				
			КонецЦикла;
			
			
			ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(
				ВыборкаДокументы.Документ,
				СтрШаблон(
					НСтр("ru = 'Автоматическое удаление файлов документов дела %1 на основании операции %2.
						|Список удаленных файлов:
						|%3'"),
					Дело,
					ИмяОперацииОснования,
					СтрСоединить(ПредставленияУдаленныхФайлов)));
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при обработке документа %1: %2'"),
				ПолучитьНавигационнуюСсылку(ВыборкаДокументы.Документ),
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Удаление файлов документов дела'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				ВыборкаДокументы.Документ.Метаданные(),
				ВыборкаДокументы.Документ,
				ТекстОшибки);
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Удаление файлов документов'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,
		Дело.Метаданные(),
		Дело,
		СтрШаблон(НСтр("ru = 'Удаление выполнено успешно. Удалено %1 версий %2 файлов.'"),
			УдаленоВерсий, УдаленоФайлов));
	
КонецПроцедуры

// Удаляет информацию о подписях файлов документов, помещенных в дело.
// 
// Параметры:
//  Дело - СправочникСсылка.ДелаХраненияДокументов - дело.
//
Процедура УдалитьПодписиДокументовДела(Дело) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЭлектронныеПодписи.ИдентификаторПодписи КАК УникальныйИдентификатор,
		|	ЭлектронныеПодписи.ПодписанныйОбъект КАК ПодписанныйОбъект,
		|	ЭлектронныеПодписи.ПорядковыйНомер КАК ПорядковыйНомер
		|ИЗ
		|	КритерийОтбора.ДокументыВДелеТоме(&Дело) КАК ДокументыВДелеТоме
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|		ПО ДокументыВДелеТоме.Ссылка = ЭлектронныеПодписи.ПодписанныйОбъект
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныеПодписи.ИдентификаторПодписи,
		|	ЭлектронныеПодписи.ПодписанныйОбъект,
		|	ЭлектронныеПодписи.ПорядковыйНомер
		|ИЗ
		|	КритерийОтбора.ДокументыВДелеТоме(&Дело) КАК ДокументыВДелеТоме
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО ДокументыВДелеТоме.Ссылка = Файлы.ВладелецФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
		|		ПО Файлы.Ссылка = ВерсииФайлов.Владелец
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|		ПО ВерсииФайлов.Ссылка = ЭлектронныеПодписи.ПодписанныйОбъект");
	
	Запрос.УстановитьПараметр("Дело", Дело);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЭП = РегистрыСведений.ЭлектронныеПодписи.СоздатьНаборЗаписей();
		НаборЭП.Отбор.ПодписанныйОбъект.Установить(Выборка.ПодписанныйОбъект);
		НаборЭП.Отбор.ПорядковыйНомер.Установить(Выборка.ПорядковыйНомер);
		НаборЭП.Записать();
		
		НаборМЧД = РегистрыСведений.ДоверенностиЭлектронныхПодписей.СоздатьНаборЗаписей();
		НаборМЧД.Отбор.УникальныйИдентификаторПодписи.Установить(Выборка.УникальныйИдентификатор);
		НаборМЧД.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив возможных статусов обмена с 1С:Архив для документа Передача дел в Архив.
//
// Параметры:
//  Документ - ДокументСсылка.ПередачаДелВАрхив - документ, по которому определяются возмодные статусы.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбменаСАрхивом - возможные статусы обмена с 1С:Архив для документа.
//
Функция ПолучитьСписокВыбораСтатусовВыгрузкиВАрхив(Документ) Экспорт

	МассивДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Документ);
	Возврат Документы.ПередачаДелВАрхив.ПолучитьСписокВыбораСтатусовВыгрузкиВАрхив(МассивДокументов);
	
КонецФункции

#КонецОбласти
