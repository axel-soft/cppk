////////////////////////////////////////////////////////////////////////////////
// Общий модуль для работы с виджетами.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выполняет создание настройки блока навигации.
Процедура СоздатьБлокНавигации() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьСозданиеНастройкиБлокаНавигации", ЭтотОбъект);
	ИсточникПоставляемыхДанных = "Справочник.БлокиНавигации";
	Заголовок = НСтр("ru = 'Создание блока навигации'");
	ВыбратьВариантСоздания(ОписаниеОповещения, ИсточникПоставляемыхДанных, Заголовок);
	
КонецПроцедуры

// Обрабатывает открытие формы.
Процедура ПриОткрытии(Форма) Экспорт
	
	Форма.ПодключитьОбработчикОжидания("Подключаемый_Автообновление", 60);
	ОжидатьЗавершениеДлительнойОперацииФоновогоОбновленияВиджетов(Форма);
	
КонецПроцедуры

// Обработчик автообновления.
Процедура Автообновление(Форма) Экспорт
	
	Форма.ФлагОбновитьВсеРеквизитыВиджетов = Истина;
	ОбновитьРеквизитыВиджетов(Форма);
	
КонецПроцедуры

// Обработчик ожидания активизации.
Процедура ОжиданиеАктивизации(Форма) Экспорт
	
	ВводДоступенРасширенный = ВводДоступенРасширенный(Форма);
	Если Не ВводДоступенРасширенный Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ОтключитьОбработчикОжидания("Подключаемый_ОжиданиеАктивизации");
	ОбновитьРеквизитыВиджетов(Форма);
	
КонецПроцедуры

// Обработчик завершения фонового обновления.
Процедура ЗавершениеФоновогоОбновления(Форма, Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьРеквизитыВиджетов(Форма);
	
КонецПроцедуры

// Обрабатывает оповещение.
Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИзменилисьЗначенияРеквизитовВиджетов(Форма, ИмяСобытия) Тогда
		ОбновитьРеквизитыВиджетов(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает событие при изменении.
Процедура ОбработчикСобытияПриИзменении(Форма, Элемент) Экспорт
	
	ИмяЭлемента = Элемент.Имя;
	ИмяСобытия = "ПриИзменении";
	ОбработатьСобытие(Форма, ИмяЭлемента, ИмяСобытия);
	
КонецПроцедуры

// Обрабатывает событие нажатие.
Процедура ОбработчикСобытияНажатие(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ИмяЭлемента = Элемент.Имя;
	ИмяСобытия = "Нажатие";
	ОбработатьСобытие(Форма, ИмяЭлемента, ИмяСобытия);
	
КонецПроцедуры

// Обрабатывает команду.
Процедура ОбработчикКоманды(Форма, Команда) Экспорт
	
	ИмяЭлемента = Команда.Имя;
	ИмяСобытия = "Команда";
	ОбработатьСобытие(Форма, ИмяЭлемента, ИмяСобытия);
	
КонецПроцедуры

// Обрабатывает расшифровку.
Процедура ОбработкаРасшифровки(Форма, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ИмяСобытия = "Расшифровка";
	
	ДанныеВиджета = ДанныеВиджета(
		Форма,
		Расшифровка.Серия,
		ИмяСобытия);
	Если ДанныеВиджета = Неопределено Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Не найдены данные виджета для элемента %1 по серии %2 по событию %3.'"),
			Элемент.Имя,
			Расшифровка.Серия,
			ИмяСобытия);
	КонецЕсли;
	
	Действие = Действие(
		Форма,
		ДанныеВиджета.ИмяВиджета,
		Расшифровка.Серия,
		ДанныеВиджета.ДействиеВиджета,
		Расшифровка.Точка);
	ВыполнитьДействие(
		Форма,
		ДанныеВиджета.ИмяВиджета,
		Действие);
	
КонецПроцедуры

// Подключает ожидание завершения длительной операции фонового обновления виджетов.
Процедура ОжидатьЗавершениеДлительнойОперацииФоновогоОбновленияВиджетов(Форма) Экспорт
	
	Если Форма.ДлительнаяОперацияФоновоеОбновлениеВиджетов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"Подключаемый_ЗавершениеФоновогоОбновления",
		Форма);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.Интервал = 1;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		Форма.ДлительнаяОперацияФоновоеОбновлениеВиджетов,
		ОповещениеОЗавершении,
		ПараметрыОжидания);
	
	Форма.ДлительнаяОперацияФоновоеОбновлениеВиджетов = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет выбор вариант создания настройки блока навигации.
Процедура ВыбратьВариантСоздания(ОписаниеОповещения, ИсточникПоставляемыхДанных, Заголовок)
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ПараметрыОбработчика.Вставить("ИсточникПоставляемыхДанных", ИсточникПоставляемыхДанных);
	ОписаниеОповещенияПослеВыбораВариантСоздания = Новый ОписаниеОповещения(
		"ПослеВыбораВариантСоздания",
		ЭтотОбъект,
		ПараметрыОбработчика);
	
	ТекстВопроса = НСтр("ru = 'Создать на основании поставляемых данных?'");
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("НаОсновании", НСтр("ru = 'Создать'"));
	Кнопки.Добавить("СНуля", НСтр("ru = 'Создать с нуля'"));
	Кнопки.Добавить("Отмена", НСтр("ru = 'Отмена'"));
	
	ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
	ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
	ПараметрыВопроса.Вставить("КнопкаПоУмолчанию", "НаОсновании");
	ПараметрыВопроса.Заголовок = Заголовок;
	
	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(
		ОписаниеОповещенияПослеВыбораВариантСоздания,
		ТекстВопроса,
		Кнопки,
		ПараметрыВопроса);
	
КонецПроцедуры

// Обработчик оповещения процедуры ВыбратьВариантСоздания.
Процедура ПослеВыбораВариантСоздания(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения);
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = "НаОсновании" Тогда
		ВыбратьПоставляемыеДанные(ДополнительныеПараметры.ОписаниеОповещения, ДополнительныеПараметры.ИсточникПоставляемыхДанных);
	ИначеЕсли Результат.Значение = "СНуля" Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, "СНуля");
	ИначеЕсли Результат.Значение = "Отмена" Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения);
	Иначе
		ТекстОшибки = НСтр("ru = 'Неизвестный вариант ответа.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет выбор вариант создания настройки блока навигации.
Процедура ВыбратьПоставляемыеДанные(ОписаниеОповещения, ИсточникПоставляемыхДанных)
	
	СписокПоставляемыхДанных = РаботаСВиджетамиВызовСервера.СписокПоставляемыхДанных(ИсточникПоставляемыхДанных);
	Заголовок = НСтр("ru = 'Выбор поставляемых данных'");
	
	СписокПоставляемыхДанных.ПоказатьВыборЭлемента(ОписаниеОповещения, Заголовок);
	
КонецПроцедуры

// Обработчик оповещения СоздатьНастройкуБлокаНавигации;
Процедура ВыполнитьСозданиеНастройкиБлокаНавигации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = "СНуля" Тогда
		Основание = Неопределено;
	ИначеЕсли ТипЗнч(Результат) = Тип("ЭлементСпискаЗначений") Тогда
		Основание = Результат.Значение;
	Иначе
		ТекстОшибки = НСтр("ru = 'Неизвестные поставляемые данные.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Основание", Основание);
	ОткрытьФорму("Справочник.БлокиНавигации.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

// Обновляет реквизиты виджетов.
Процедура ОбновитьРеквизитыВиджетов(Форма)
	
	ВводДоступенРасширенный = ВводДоступенРасширенный(Форма);
	Если Не ВводДоступенРасширенный Тогда
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ОжиданиеАктивизации", 1);
		Возврат;
	КонецЕсли;
	
	// &ЗамерПроизводительности
	УИДЗамераРабочийСтолОбновление = ОценкаПроизводительностиКлиент.ЗамерВремени(
		"РабочийСтолОбновление",
		Ложь,
		Ложь);
	
	Форма.Подключаемый_ОбновитьРеквизитыВиджетов();
	ОжидатьЗавершениеДлительнойОперацииФоновогоОбновленияВиджетов(Форма);
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамераРабочийСтолОбновление);
	
КонецПроцедуры

// Обрабатывает оповещение.
Функция ИзменилисьЗначенияРеквизитовВиджетов(Форма, ИмяСобытия)
	
	ИзменилосьЗначение = Ложь;
	Для Каждого ДанныеВиджета Из Форма.ТаблицаРеквизитовВиджетов Цикл
		
		Если ЗначениеЗаполнено(ДанныеВиджета.Выражение) Тогда
			
			СписокСобытия = ДанныеВиджета.События;
			Если СписокСобытия.НайтиПоЗначению(ИмяСобытия) <> Неопределено Тогда
				ДанныеВиджета.ИзменилосьЗначение = Истина;
				ИзменилосьЗначение = Истина;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Форма[ДанныеВиджета.ИмяРеквизитаФормы]) = Тип("Диаграмма") Тогда
			
			Для Индекс = 0 По Форма[ДанныеВиджета.ИмяРеквизитаФормы].Серии.Количество() - 1 Цикл
				
				СерияПоказателя = Форма[ДанныеВиджета.ИмяРеквизитаФормы].Серии.Получить(Индекс);
				
				МассивСобытия = РаботаСВиджетамиКлиентСервер.ПараметрВиджета(
					Форма,
					ДанныеВиджета.ИмяВиджета,
					ДанныеВиджета.ИмяРеквизитаФормы,
					СерияПоказателя.Значение + "События");
				ИзменилосьЗначениеСерии = МассивСобытия.Найти(ИмяСобытия) <> Неопределено;
				Если ИзменилосьЗначениеСерии Тогда
					РаботаСВиджетамиКлиентСервер.УстановитьПараметрВиджета(
						Форма,
						ДанныеВиджета.ИмяВиджета,
						ДанныеВиджета.ИмяРеквизитаФормы,
						СерияПоказателя.Значение + "ИзменилосьЗначение",
						ИзменилосьЗначениеСерии);
					ИзменилосьЗначение = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИзменилосьЗначение;
	
КонецФункции

// Обрабатывает событие нажатие.
Процедура ОбработатьСобытие(Форма, ИмяЭлемента, ИмяСобытия)
	
	ДанныеВиджета = ДанныеВиджета(
		Форма,
		ИмяЭлемента,
		ИмяСобытия);
	Если ДанныеВиджета = Неопределено Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Не найдены данные виджета для элемента %1 по событию %2.'"),
			ИмяЭлемента,
			ИмяСобытия);
	КонецЕсли;
	
	Действие = Действие(
		Форма,
		ДанныеВиджета.ИмяВиджета,
		ИмяЭлемента,
		ДанныеВиджета.ДействиеВиджета);
	ВыполнитьДействие(
		Форма,
		ДанныеВиджета.ИмяВиджета,
		Действие);
	
КонецПроцедуры

// Обрабатывает событие нажатие.
Процедура ВыполнитьДействие(Форма, ИмяВиджета, Действие)
	
	Если Действие.ДействиеВиджета = ПредопределенноеЗначение("Перечисление.ДействияВиджетов.ПереходПоСсылке") Тогда
		
		ПереходПоСсылке(Действие.СсылкаДляПерехода);
		
	ИначеЕсли Действие.ДействиеВиджета = ПредопределенноеЗначение("Перечисление.ДействияВиджетов.ОткрытьФорму") Тогда
		
		ДействиеОткрытьФорму(Действие.ИмяФормыДляОткрытия, Действие.ПараметрыФормыДляОткрытия);
		
	ИначеЕсли Действие.ДействиеВиджета = ПредопределенноеЗначение("Перечисление.ДействияВиджетов.ОткрытьРеестр") Тогда
		
		РаботаСРеестрамиКлиент.ОткрытьРеестр(Действие.Реестр);
		
	ИначеЕсли Действие.ДействиеВиджета = ПредопределенноеЗначение("Перечисление.ДействияВиджетов.ПоказатьПредыдущийБлок") Тогда
		
		ПоказатьПредыдущийБлок(Форма, ИмяВиджета);
		
	ИначеЕсли Действие.ДействиеВиджета = ПредопределенноеЗначение("Перечисление.ДействияВиджетов.ПоказатьСледующийБлок") Тогда
		
		ПоказатьСледующийБлок(Форма, ИмяВиджета);
		
	ИначеЕсли Действие.ДействиеВиджета = ПредопределенноеЗначение("Перечисление.ДействияВиджетов.ПоказатьБлок") Тогда
		
		ПоказатьБлок(Форма, ИмяВиджета, Действие.Блок);
		
	ИначеЕсли Действие.ДействиеВиджета = ПредопределенноеЗначение("Перечисление.ДействияВиджетов.СоздатьДокумент") Тогда
		
		СоздатьДокумент(Действие.ВидыДокументов);
		
	ИначеЕсли Действие.ДействиеВиджета = ПредопределенноеЗначение("Перечисление.ДействияВиджетов.ПоказатьВыборИзМеню") Тогда
		
		ПоказатьВыборИзМеню(Форма, ИмяВиджета, Действие.Меню);
		
	ИначеЕсли Действие.ДействиеВиджета = ПредопределенноеЗначение("Перечисление.ДействияВиджетов.НичегоНеДелать") Тогда
		
		// Действия нет.
		
	ИначеЕсли Действие.ДействиеВиджета = ПредопределенноеЗначение("Перечисление.ДействияВиджетов.СоздатьЕжедневныйОтчет") Тогда
		
		УчетВремениКлиент.СоздатьЕжедневныйОтчет(Действие.ДатаОтчета);
		
	ИначеЕсли Действие.ДействиеВиджета = ПредопределенноеЗначение("Перечисление.ДействияВиджетов.СоздатьЭлементРеестра") Тогда
		
		РаботаСРеестрамиКлиент.СоздатьЭлементРеестра(Действие.Реестр);
		
	Иначе
		
		ТекстОшибки = НСтр("ru = 'Неизвестное действие виджета.'");
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет переход по ссылке.
Процедура ПереходПоСсылке(СсылкаДляПерехода)
	
	// &ЗамерПроизводительности
	УИДЗамераПереходПоСсылке = ОценкаПроизводительностиКлиент.ЗамерВремени("РабочийСтолПереходПоСсылке");
	ОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(УИДЗамераПереходПоСсылке, СсылкаДляПерехода);
	
	ПерейтиПоНавигационнойСсылке(СсылкаДляПерехода);
	
КонецПроцедуры

// Выполняет открытие формы.
Процедура ДействиеОткрытьФорму(ИмяФормыДляОткрытия, ПараметрыФормыДляОткрытия)
	
	// &ЗамерПроизводительности
	УИДЗамераОткрытьФорму = ОценкаПроизводительностиКлиент.ЗамерВремени("РабочийСтолОткрытьФорму");
	ОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(УИДЗамераОткрытьФорму, ИмяФормыДляОткрытия);
	
	КлючНазначения = Неопределено;
	Если ЗначениеЗаполнено(ПараметрыФормыДляОткрытия) 
		И ТипЗнч(ПараметрыФормыДляОткрытия) = Тип("Структура")
		И ПараметрыФормыДляОткрытия.Свойство("КлючНазначенияИспользования") Тогда
		КлючНазначения = ПараметрыФормыДляОткрытия.КлючНазначенияИспользования;
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыДляОткрытия, ПараметрыФормыДляОткрытия,, КлючНазначения);
	
КонецПроцедуры

// Выполняет показ предыдущего блока.
Процедура ПоказатьПредыдущийБлок(Форма, ИмяВиджета)
	
	ПредыдущийБлок = РаботаСВиджетамиКлиентСервер.ПредыдущийБлок(Форма, ИмяВиджета);
	РаботаСВиджетамиКлиентСервер.ПоказатьБлок(Форма, ИмяВиджета, ПредыдущийБлок);
	
КонецПроцедуры

// Выполняет показ следующего блока.
Процедура ПоказатьСледующийБлок(Форма, ИмяВиджета)
	
	СледующийБлок = РаботаСВиджетамиКлиентСервер.СледующийБлок(Форма, ИмяВиджета);
	РаботаСВиджетамиКлиентСервер.ПоказатьБлок(Форма, ИмяВиджета, СледующийБлок);
	
КонецПроцедуры

// Выполняет показ блока.
Процедура ПоказатьБлок(Форма, ИмяВиджета, Блок)
	
	РаботаСВиджетамиКлиентСервер.ПоказатьБлок(Форма, ИмяВиджета, Блок);
	
КонецПроцедуры

// Выполняет создание документа.
Процедура СоздатьДокумент(ВидыДокументов)
	
	ДоступныеВидыДокументов = Новый СписокЗначений;
	ДоступныеВидыДокументов.ЗагрузитьЗначения(ВидыДокументов);
	
	Параметры = РаботаСШаблонамиДокументовКлиент.ДополнительныеПараметрыВыбораШаблонаДокумента();
	Параметры.ДоступныеВидыДокументов = ДоступныеВидыДокументов;
	
	ДелопроизводствоКлиент.СоздатьДокументПредприятия(Параметры);
	
КонецПроцедуры

// Выполняет показ выбора из меню.
Процедура ПоказатьВыборИзМеню(Форма, ИмяВиджета, Меню)
	
	СписокВыбора = Новый СписокЗначений;
	Для НомерКоманды = 0 По Меню.ВГраница() Цикл
		ЭлементМеню = Меню[НомерКоманды];
		СписокВыбора.Добавить(НомерКоманды, ЭлементМеню.Заголовок,, ЭлементМеню.Картинка);
	КонецЦикла;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Форма", Форма);
	ПараметрыОбработчика.Вставить("ИмяВиджета", ИмяВиджета);
	ПараметрыОбработчика.Вставить("Меню", Меню);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораИзМеню", ЭтотОбъект, ПараметрыОбработчика);
	
	Форма.ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВыбора);
	
КонецПроцедуры

// Обработчик оповещения процедуры ПоказатьВыборИзМеню.
Процедура ПослеВыбораИзМеню(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементМеню = ДополнительныеПараметры.Меню[Результат.Значение];
	ВыполнитьДействие(
		ДополнительныеПараметры.Форма,
		ДополнительныеПараметры.ИмяВиджета,
		ЭлементМеню.Действие);
	
КонецПроцедуры

// Определяет данные виджета.
Функция ДанныеВиджета(Форма, ИмяЭлемента, ИмяСобытия)
	
	ДанныеВиджета = Неопределено;
	Для Каждого СтрокаДействияВиджета Из Форма.ТаблицаДействийВиджетов Цикл
		Если СтрокаДействияВиджета.ИмяЭлемента = ИмяЭлемента И СтрокаДействияВиджета.ИмяСобытия = ИмяСобытия Тогда
			ДанныеВиджета = СтрокаДействияВиджета;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеВиджета;
	
КонецФункции

// Определяет действие виджета.
Функция Действие(Форма, ИмяВиджета, ИмяЭлемента, ДействиеВиджета, ДополнительныйПараметр = Неопределено)
	
	Действие = Новый Структура;
	Действие.Вставить("ДействиеВиджета", ДействиеВиджета);
	Если ДействиеВиджета = ПредопределенноеЗначение("Перечисление.ДействияВиджетов.ПереходПоСсылке") Тогда
		
		СсылкаДляПерехода =
			?(ДополнительныйПараметр <> Неопределено,
				ДополнительныйПараметр,
				РаботаСВиджетамиКлиентСервер.ПараметрВиджета(
					Форма,
					ИмяВиджета,
					ИмяЭлемента,
					"СсылкаДляПерехода"));
		Действие.Вставить("СсылкаДляПерехода", СсылкаДляПерехода);
		
	ИначеЕсли ДействиеВиджета = ПредопределенноеЗначение("Перечисление.ДействияВиджетов.ОткрытьФорму") Тогда
		
		ИмяФормыДляОткрытия = РаботаСВиджетамиКлиентСервер.ПараметрВиджета(
			Форма,
			ИмяВиджета,
			ИмяЭлемента,
			"ИмяФормыДляОткрытия");
		ПараметрыФормыДляОткрытия = РаботаСВиджетамиКлиентСервер.ПараметрВиджета(
			Форма,
			ИмяВиджета,
			ИмяЭлемента,
			"ПараметрыФормыДляОткрытия");
		Действие.Вставить("ИмяФормыДляОткрытия", ИмяФормыДляОткрытия);
		Действие.Вставить("ПараметрыФормыДляОткрытия", ПараметрыФормыДляОткрытия);
		
	ИначеЕсли ДействиеВиджета = ПредопределенноеЗначение("Перечисление.ДействияВиджетов.ОткрытьРеестр") Тогда
		
		Реестр = РаботаСВиджетамиКлиентСервер.ПараметрВиджета(
			Форма,
			ИмяВиджета,
			ИмяЭлемента,
			"Реестр");
		Действие.Вставить("Реестр", Реестр);
		
	ИначеЕсли ДействиеВиджета = ПредопределенноеЗначение("Перечисление.ДействияВиджетов.ПоказатьПредыдущийБлок") Тогда
		
		// Нет параметров действия.
		
	ИначеЕсли ДействиеВиджета = ПредопределенноеЗначение("Перечисление.ДействияВиджетов.ПоказатьСледующийБлок") Тогда
		
		// Нет параметров действия.
		
	ИначеЕсли ДействиеВиджета = ПредопределенноеЗначение("Перечисление.ДействияВиджетов.ПоказатьБлок") Тогда
		
		Блок = РаботаСВиджетамиКлиентСервер.НайтиБлокПоИмениКомандыПоказатьБлок(Форма, ИмяВиджета, ИмяЭлемента);
		Действие.Вставить("Блок", Блок);
		
	ИначеЕсли ДействиеВиджета = ПредопределенноеЗначение("Перечисление.ДействияВиджетов.СоздатьДокумент") Тогда
		
		ВидыДокументов = РаботаСВиджетамиКлиентСервер.ПараметрВиджета(
			Форма,
			ИмяВиджета,
			ИмяЭлемента,
			"ВидыДокументов");
		Действие.Вставить("ВидыДокументов", ВидыДокументов);
		
	ИначеЕсли ДействиеВиджета = ПредопределенноеЗначение("Перечисление.ДействияВиджетов.ПоказатьВыборИзМеню") Тогда
		
		Меню = РаботаСВиджетамиКлиентСервер.ПараметрВиджета(
			Форма, ИмяВиджета, ИмяЭлемента, "Меню");
		Действие.Вставить("Меню", Меню);
		
	ИначеЕсли ДействиеВиджета = ПредопределенноеЗначение("Перечисление.ДействияВиджетов.НичегоНеДелать") Тогда
		
		// Нет параметров действия.
		
	ИначеЕсли ДействиеВиджета = ПредопределенноеЗначение("Перечисление.ДействияВиджетов.СоздатьЕжедневныйОтчет") Тогда
		
		ДатаОтчета =
			?(ДополнительныйПараметр <> Неопределено,
				ДополнительныйПараметр,
				РаботаСВиджетамиКлиентСервер.ПараметрВиджета(
					Форма,
					ИмяВиджета,
					ИмяЭлемента,
					"ДатаОтчета"));
		Действие.Вставить("ДатаОтчета", ДатаОтчета);
		
	ИначеЕсли ДействиеВиджета = ПредопределенноеЗначение("Перечисление.ДействияВиджетов.СоздатьЭлементРеестра") Тогда
		
		Реестр = РаботаСВиджетамиКлиентСервер.ПараметрВиджета(
			Форма,
			ИмяВиджета,
			ИмяЭлемента,
			"Реестр");
		Действие.Вставить("Реестр", Реестр);
		
	Иначе
		
		ТекстОшибки = НСтр("ru = 'Неизвестное действие виджета.'");
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Возврат Действие;
	
КонецФункции

// Проверяет что ввод доступен расширенным способом - в том числе просто единственная открытая форма.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения.
// 
// Возвращаемое значение:
//  Булево - Ввод доступен, но расширенным способом.
//
Функция ВводДоступенРасширенный(Форма)
	
	ТолькоНачальнаяСтраница = Истина;
	
	НачальнаяСтраница = Неопределено;
	Для Каждого Окно Из ПолучитьОкна() Цикл
		
		Если Не Окно.НачальнаяСтраница Тогда
			Если Не Окно.Основное Тогда
				ТолькоНачальнаяСтраница = Ложь;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		НачальнаяСтраница = Окно;
		
	КонецЦикла;
	
	ЭтоФормаНачальнойСтраницы = Ложь;
	Если НачальнаяСтраница <> Неопределено Тогда
		
		Для Каждого ФормаНачальнойСтраницы Из НачальнаяСтраница.Содержимое Цикл
			
			Если Форма = ФормаНачальнойСтраницы Тогда
				ЭтоФормаНачальнойСтраницы = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПроверяемыеФормы = Новый Массив;
	Если ЭтоФормаНачальнойСтраницы Тогда
		
		Для Каждого ФормаНачальнойСтраницы Из НачальнаяСтраница.Содержимое Цикл
			
			ПроверяемыеФормы.Добавить(ФормаНачальнойСтраницы);
			
		КонецЦикла;
		
	Иначе
		
		ПроверяемыеФормы.Добавить(Форма);
		
	КонецЕсли;
	
	ВводДоступенРасширенный = Ложь;
	Для Каждого ПроверяемаяФорма Из ПроверяемыеФормы Цикл
		
		ВводДоступенРасширенный = ВводДоступенРасширенный Или ПроверяемаяФорма.ВводДоступен();
		
	КонецЦикла;
	
	Если ТолькоНачальнаяСтраница И ЭтоФормаНачальнойСтраницы Тогда
		
		ВводДоступенРасширенный = Истина;
		
	КонецЕсли;
	
	Возврат ВводДоступенРасширенный;
	
КонецФункции

#КонецОбласти