#Область ПрограммныйИнтерфейс

// Определяет иерархию подчиненных подразделений.
// 
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Подчиненные подразделения:
//   * ПодчиненноеПодразделение - СправочникСсылка.СтруктураПредприятия - Подчиненное подразделение.
//   * ВышестоящееПодразделение - СправочникСсылка.СтруктураПредприятия - Вышестоящее подразделение.
//   * Руководитель - СправочникСсылка.Сотрудники, СправочникСсылка.Пользователи - Руководитель подразделения.
//
Функция ИерархияПодчиненныхПодразделений(Пользователь) Экспорт
	
	// Получим руководителей, чьи полномочия выполняет текущий пользователь.
	ОбластиЗамещения = Новый Массив;
	ОбластиЗамещения.Добавить(Справочники.ОбластиЗамещения.ЗадачиПросмотр);
	ОбластиЗамещения.Добавить(Справочники.ОбластиЗамещения.Задачи);
	СотрудникиПользователя = Сотрудники.СотрудникиПользователя(Пользователь);
	АктуальныеЗамещения = Справочники.ЗамещающиеИПомощники.АктуальныеЗамещения(
		СотрудникиПользователя, ОбластиЗамещения);
	Руководители = АктуальныеЗамещения.ВыгрузитьКолонку("Сотрудник");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Руководители, СотрудникиПользователя, Истина);
	
	// Получим подчиненных пользователей.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СтруктураПредприятия.Ссылка КАК ПодчиненноеПодразделение,
		|	СтруктураПредприятия.Родитель КАК ВышестоящееПодразделение,
		|	ПодчиненностьПодразделений.РуководительПодчиненного КАК Руководитель
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
		|		ПО ПодчиненностьПодразделений.Подчиненное = СтруктураПредприятия.Ссылка
		|		И ПодчиненностьПодразделений.Вышестоящее = СтруктураПредприятия.Ссылка
		|ГДЕ
		|	СтруктураПредприятия.Ссылка В ИЕРАРХИИ
		|			(ВЫБРАТЬ
		|				ПодчиненностьПодразделений.Подчиненное
		|			ИЗ
		|				РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
		|			ГДЕ
		|				ПодчиненностьПодразделений.Подчиненное = ПодчиненностьПодразделений.Вышестоящее
		|				И ПодчиненностьПодразделений.РуководительПодчиненного В (&Руководители))
		|	И СтруктураПредприятия.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПодчиненноеПодразделение ИЕРАРХИЯ");
	
	Запрос.УстановитьПараметр("Руководители", Руководители);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Определяет подчиненные подразделения.
// 
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь.
//
// Возвращаемое значение:
//  Массив из СправочникСсылка.СтруктураПредприятия - Подчиненные подразделения.
//
Функция ПодчиненныеПодразделения(Пользователь) Экспорт
	
	Возврат ИерархияПодчиненныхПодразделений(Пользователь).ВыгрузитьКолонку("ПодчиненноеПодразделение");
	
КонецФункции

// Определяет подчиненных пользователей и их подразделения.
// 
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь.
//  ТолькоДействующие - Булево.
//  ИерархияПодчиненныхПодразделений - ТаблицаЗначений - Заполняемый параметр. См. РаботаСПользователями.ИерархияПодчиненныхПодразделений().
//
// Возвращаемое значение:
//  ТаблицаЗначений - Подразделения подчиненных.
//
Функция ПодразделенияПодчиненных(Пользователь, ТолькоДействующие = Истина, ИерархияПодчиненныхПодразделений = Неопределено) Экспорт
	
	ДанныеПодразделенийПодчиненных = РаботаСПользователямиПовтИспНаВремяВызова.ДанныеПодразделенийПодчиненных(
		Пользователь,
		ТолькоДействующие);
	ПодразделенияПодчиненных = ДанныеПодразделенийПодчиненных.ПодразделенияПодчиненных;
	ИерархияПодчиненныхПодразделений = ДанныеПодразделенийПодчиненных.ИерархияПодчиненныхПодразделений;
	
	Возврат ПодразделенияПодчиненных;
	
КонецФункции

// Определяет подчиненных пользователей.
// 
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь.
//  ТолькоДействующие - Булево.
//
// Возвращаемое значение:
//  Массив из СправочникСсылка.Сотрудники - Подчиненные пользователи.
//
Функция Подчиненные(Пользователь, ТолькоДействующие = Истина) Экспорт
	
	ПодразделенияПодчиненных = ПодразделенияПодчиненных(Пользователь, ТолькоДействующие);
	ПодчиненныеПользователи = ПодразделенияПодчиненных.ВыгрузитьКолонку("Подчиненный"); 
	
	Возврат ПодчиненныеПользователи;
	
КонецФункции

// Возвращает подразделение для переданного пользователя.
//
Функция ПолучитьПодразделение(Пользователь) Экспорт 

	Если Не ЗначениеЗаполнено(Пользователь) Тогда 
		Возврат Справочники.СтруктураПредприятия.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Сотрудники.ПодразделениеСотрудника(
		Сотрудники.ОсновнойСотрудникПользователя(Пользователь));

КонецФункции

// Возвращает должность для переданного пользователя.
//
Функция ПолучитьДолжность(Пользователь) Экспорт 

	Если Не ЗначениеЗаполнено(Пользователь) Тогда 
		Возврат Справочники.Должности.ПустаяСсылка();
	КонецЕсли;	
	
	Возврат Сотрудники.ДолжностьСотрудника(
		Сотрудники.ОсновнойСотрудникПользователя(Пользователь));

КонецФункции

// Возвращает руководителя для переданного пользователя.
//
Функция ПолучитьРуководителя(Пользователь) Экспорт
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда 
		Возврат Справочники.Пользователи.ПустаяСсылка()
	КонецЕсли;	
	
	РуководительСотрудника = Сотрудники.БлижайшийРуководитель(
		Сотрудники.ОсновнойСотрудникПользователя(Пользователь));
		
	Возврат Сотрудники.ПользовательСотрудника(РуководительСотрудника);
		
КонецФункции	

// Возвращает список пользователей и, если указано, их контейнеров и автоподстановок для целей автоподбора.
//
// Параметры:
//   Текст - Строка - символы, введенные пользователем.
//   ДополнениеТипа - ОписаниеТипов - необязательный, дополнение типа выбираемых объектов (по умолчанию - только
//     пользователи. Для автоподстановок указывается тип "Строка".
//  ТипОбъекта - ПеречислениеСсылка.ТипыОбъектов - Тип объекта, для дополнения типа "СправочникСсылка.АвтоподстановкиДляОбъектов".
//
// Возвращаемое значение:
//   СписокЗначений - подходящие пользователи (контейнеры, автоподстановки) и их представления с уточнением.
//
Функция СформироватьДанныеВыбора(Текст, Знач ДополнениеТипа = Неопределено, ТипОбъекта = Неопределено) Экспорт
	
	Если ДополнениеТипа = Неопределено Тогда
		ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	КонецЕсли;
	
	// Пользователей выбираем всегда.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 20
		|	Пользователи.Ссылка КАК Ссылка,
		|	Сотрудники.Подразделение КАК Пояснение1,
		|	Сотрудники.Должность КАК Пояснение2
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСотрудники КАК ОсновныеСотрудники
		|		ПО Пользователи.ФизЛицо = ОсновныеСотрудники.ФизическоеЛицо
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ОсновныеСотрудники.Сотрудник = Сотрудники.Ссылка
		|ГДЕ
		|	Пользователи.Наименование ПОДОБНО &Текст
		|	И Не Пользователи.Недействителен
		|	И Не Пользователи.ПометкаУдаления
		|	И ЕСТЬNULL(Сотрудники.Действует, ЛОЖЬ)
		|	И НЕ ЕСТЬNULL(Сотрудники.ПометкаУдаления, ИСТИНА)");
		
	// Роли.
	Если ДополнениеТипа.СодержитТип(Тип("СправочникСсылка.РолиИсполнителей"))
		Или ДополнениеТипа.СодержитТип(Тип("СправочникСсылка.ПолныеРоли")) Тогда
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|";
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ ПЕРВЫЕ 20
		|	РолиИсполнителей.Ссылка,
		|	&Роль,
		|	""""
		|ИЗ
		|	Справочник.РолиИсполнителей КАК РолиИсполнителей
		|ГДЕ
		|	РолиИсполнителей.Наименование ПОДОБНО &Текст
		|	И Не РолиИсполнителей.ПометкаУдаления
		|";
		Запрос.УстановитьПараметр("Роль", НСтр("ru = 'роль'"));
	КонецЕсли;
	
	// Группы.
	Если ДополнениеТипа.СодержитТип(Тип("СправочникСсылка.РабочиеГруппы")) Тогда
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|";
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ ПЕРВЫЕ 20
		|	РабочиеГруппы.Ссылка,
		|	&Группа,
		|	""""
		|ИЗ
		|	Справочник.РабочиеГруппы КАК РабочиеГруппы
		|ГДЕ
		|	РабочиеГруппы.Наименование ПОДОБНО &Текст
		|	И Не РабочиеГруппы.ПометкаУдаления
		|	И Не РабочиеГруппы.Недействительна
		|";
		Запрос.УстановитьПараметр("Группа", НСтр("ru = 'группа'"));
	КонецЕсли;
	
	// Подразделения.
	Если ДополнениеТипа.СодержитТип(Тип("СправочникСсылка.СтруктураПредприятия"))
		Или ДополнениеТипа.СодержитТип(Тип("СправочникСсылка.ПодразделенияКонтейнеры")) Тогда
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|";
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ ПЕРВЫЕ 20
		|	СтруктураПредприятия.Ссылка,
		|	&Подразделение,
		|	""""
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Наименование ПОДОБНО &Текст
		|	И Не СтруктураПредприятия.ПометкаУдаления
		|";
		Запрос.УстановитьПараметр("Подразделение", НСтр("ru = 'подразделение'"));
	КонецЕсли;
	
	// Проекты.
	Если ДополнениеТипа.СодержитТип(Тип("СправочникСсылка.Проекты"))
		Или ДополнениеТипа.СодержитТип(Тип("СправочникСсылка.ПроектыКонтейнеры")) Тогда
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ ВСЕ
		|";
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ *
		|ИЗ (ВЫБРАТЬ ПЕРВЫЕ 20
		|	Проекты.Ссылка,
		|	&Проект,
		|	""""
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	Проекты.Наименование ПОДОБНО &Текст
		|	И Не Проекты.ПометкаУдаления
		|УПОРЯДОЧИТЬ ПО
		|	(Проекты.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПроектов.Завершен))) КАК ВложенныйЗапрос
		|";
		Запрос.УстановитьПараметр("Проект", НСтр("ru = 'проект'"));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Пояснение1)
			И ЗначениеЗаполнено(Выборка.Пояснение2) Тогда 
			ТекстПояснения = СтрШаблон(" (%1, %2)",
				Выборка.Пояснение1,
				Выборка.Пояснение2);
		ИначеЕсли ЗначениеЗаполнено(Выборка.Пояснение1) Тогда
			ТекстПояснения = СтрШаблон(" (%1)",
				Выборка.Пояснение1);
		ИначеЕсли ЗначениеЗаполнено(Выборка.Пояснение2) Тогда
			ТекстПояснения = СтрШаблон(" (%1)",
				Выборка.Пояснение2);
		Иначе
			ДанныеВыбора.Добавить(Выборка.Ссылка);
			Продолжить;
		КонецЕсли;
		ПредставлениеФорматированнаяСтрока = Новый ФорматированнаяСтрока(
			Строка(Выборка.Ссылка), 
			Новый ФорматированнаяСтрока(ТекстПояснения,, WebЦвета.Серый));
		ДанныеВыбора.Добавить(Выборка.Ссылка, ПредставлениеФорматированнаяСтрока);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Возвращает пользователей переданного подразделения.
//
// Параметры:
//  Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение, пользователи которого возвращаются.
//  СУчетомИерархии - Булево - если Истина, то возвращаются пользователи переданного и подчиненных подразделений,
//                             если Ложь, то только пользователи переданного подразделения, по умолчанию - Ложь.
//  ТолькоДействительныхПользователей - Булево - если Истина, тогда возвращается массив только с действительными пользователями
//                                               не помеченными на удаление, иначе все пользователи подразделения(й).
//
// Возвращаемое значение:
//  Массив - массив пользователей подразделения.
//
Функция ПолучитьПользователейПодразделения(
	Подразделение, СУчетомИерархии = Ложь, ТолькоДействительныхПользователей = Истина) Экспорт
	
	СотрудникиПодразделения = Сотрудники.СотрудникиПодразделения(
		Подразделение, ТолькоДействительныхПользователей, СУчетомИерархии);
		
	Возврат Сотрудники.ЗаменитьСотрудниковПользователями(СотрудникиПодразделения); 
		
КонецФункции

// Получает список пользователей, входящих в рабочую группу.
//
Функция ПолучитьПользователейРабочейГруппы(РабочаяГруппа, СУчетомИерархии = Истина) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РабочиеГруппы.Ссылка
		|ИЗ
		|	Справочник.РабочиеГруппы КАК РабочиеГруппы
		|ГДЕ";
		
	Если СУчетомИерархии Тогда
		Запрос.Текст = Запрос.Текст + " РабочиеГруппы.Ссылка В ИЕРАРХИИ (&Ссылка)";	
	Иначе
		Запрос.Текст = Запрос.Текст + " РабочиеГруппы.Ссылка = &Ссылка";
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", РабочаяГруппа);
    МассивГрупп = Запрос.Выполнить().Выгрузить();	
	Для Каждого Группа из МассивГрупп Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СоставыГруппПользователей.Пользователь
			|ИЗ
			|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
			|ГДЕ
			|	СоставыГруппПользователей.ГруппаПользователей = &РабочаяГруппа";

		Запрос.УстановитьПараметр("РабочаяГруппа", Группа.Ссылка);

		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		Для Каждого ЭлементСостава Из РезультатЗапроса Цикл
			Если Результат.Найти(ЭлементСостава.Пользователь) = Неопределено Тогда
				Результат.Добавить(ЭлементСостава.Пользователь);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

// Возвращает массив пользователей
//
// Возвращаемое значение:
//   Массив
//     СправочникСсылка.Пользователи
//
Функция ПолучитьВсехПользователей() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ПометкаУдаления = ЛОЖЬ
		|	И Пользователи.Недействителен = ЛОЖЬ
		|	И Пользователи.Служебный = ЛОЖЬ";
		
	ВсеПользователи = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат ВсеПользователи;
	
КонецФункции

// Проверяет, является ли указанный пользователь руководителем.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи.
//
// Возвращаемое значение:
//  Булево - Пользователь это руководитель.
//
Функция ЭтоРуководитель(Пользователь) Экспорт 
	
	Возврат СтруктураПредприятия.ЭтоРуководитель(Сотрудники.ПользовательИСотрудники(Пользователь));
	
КонецФункции	

// Проверяет, является ли указанный пользователь руководителем или помощником руководителя.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи.
//  ОбластиЗамещения - Массив из СправочникСсылка.ОбластиЗамещения.
//
// Возвращаемое значение:
//  Булево - Пользователь это руководитель или помощник руководителя.
//
Функция ЭтоРуководительИлиПомощник(Пользователь, ОбластиЗамещения) Экспорт 
	
	СотрудникиПользователя = Сотрудники.СотрудникиПользователя(Пользователь);
	АктуальныеЗамещения = Справочники.ЗамещающиеИПомощники.АктуальныеЗамещения(
		СотрудникиПользователя, ОбластиЗамещения);
	Руководители = АктуальныеЗамещения.ВыгрузитьКолонку("Сотрудник");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Руководители, СотрудникиПользователя, Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	НЕ СтруктураПредприятия.ПометкаУдаления
		|	И СтруктураПредприятия.Руководитель В (&Руководители)");
	
	Запрос.Параметры.Вставить("Руководители", Руководители);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЭтоРуководительИлиПомощник = Не РезультатЗапроса.Пустой();
	
	Возврат ЭтоРуководительИлиПомощник;
	
КонецФункции

// Возвращает представление пользователя с пояснением.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - ссылка на пользователя.
//
// Возвращаемое значение:
//  ФорматированнаяСтрока
//
Функция ПредставлениеПользователяCПояснением(Пользователь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Ссылка,
		|	Сотрудники.Подразделение КАК Пояснение1,
		|	Сотрудники.Должность КАК Пояснение2
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСотрудники КАК ОсновныеСотрудники
		|		ПО Пользователи.ФизЛицо = ОсновныеСотрудники.ФизическоеЛицо
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ОсновныеСотрудники.Сотрудник = Сотрудники.Ссылка
		|ГДЕ
		|	Пользователи.Ссылка = &Пользователь
		|	И Не Пользователи.Недействителен
		|	И Не Пользователи.ПометкаУдаления
		|	И ЕСТЬNULL(Сотрудники.Действует, ЛОЖЬ)
		|	И НЕ ЕСТЬNULL(Сотрудники.ПометкаУдаления, ИСТИНА)";
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Представление = Строка(Выборка.Ссылка);
	
	ТекстПояснения = "";
	Если ЗначениеЗаполнено(Выборка.Пояснение1)
		И ЗначениеЗаполнено(Выборка.Пояснение2) Тогда 
		ТекстПояснения = СтрШаблон(" (%1, %2)", Выборка.Пояснение1, Выборка.Пояснение2);
	ИначеЕсли ЗначениеЗаполнено(Выборка.Пояснение1) Тогда
		ТекстПояснения = СтрШаблон(" (%1)", Выборка.Пояснение1);
	ИначеЕсли ЗначениеЗаполнено(Выборка.Пояснение2) Тогда
		ТекстПояснения = СтрШаблон(" (%1)", Выборка.Пояснение2);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекстПояснения) Тогда
		Представление = Представление + ТекстПояснения;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Проверяет, является ли пользователь ответственным за НСИ.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи.
// 
// Возвращаемое значение:
//  Булево - Пользователь является ответственным за НСИ.
//
Функция ЭтоОтветственныйЗаНСИ(Пользователь = Неопределено) Экспорт
	
	ЭтоОтветственныйЗаНСИ = Пользователи.РолиДоступны("ДобавлениеИзменениеНСИ", Пользователь, Ложь);
	
	Возврат ЭтоОтветственныйЗаНСИ;
	
КонецФункции

// рег задание  ПроверкаИзбранного
Процедура ПроверкаИзбранного() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПроверкаИзбранного);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Пользователи.Ссылка КАК Ссылка,
	               |	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ,
	               |	Пользователи.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл                   
		
		Пользователь = Выборка.Ссылка;
		
		Попытка
			СвойстваПользователяИБ = Пользователи.СвойстваПользователяИБ(Выборка.ИдентификаторПользователяИБ);
			
			Если СвойстваПользователяИБ <> Неопределено Тогда
				
				Имя = СвойстваПользователяИБ.Имя;  
				
				Избранное = ХранилищеСистемныхНастроек.Загрузить("Общее/ИзбранноеРаботыПользователя", "", , Имя);
				Если Избранное <> Неопределено Тогда
					
					МассивИзбранное = Новый Массив;
					Для Каждого Строка Из Избранное Цикл
						МассивИзбранное.Добавить(
							Новый Структура("Важное, НавигационнаяСсылка, Представление", 
							Строка.Важное,
							Строка.НавигационнаяСсылка,
							Строка.Представление)
						);
					КонецЦикла;	
					
					МассивВБазе = РегистрыСведений.ИзбранноеПользователей.ПолучитьЗапись(Пользователь);
					
					МассивыОтличаются = Ложь;   
					Если МассивИзбранное.Количество() <>  МассивВБазе.Количество() Тогда
						МассивыОтличаются = Истина;
					Иначе
						
						Для Индекс = 0 По МассивИзбранное.Количество() - 1 Цикл
							Элемент1 = МассивИзбранное[Индекс];
							Элемент2 = МассивВБазе[Индекс];  
							
							Если Элемент1.Важное <> Элемент2.Важное
								Или Элемент1.НавигационнаяСсылка <> Элемент2.НавигационнаяСсылка
								Или Элемент1.Представление <> Элемент2.Представление Тогда
								МассивыОтличаются = Истина;
								Прервать;
							КонецЕсли;
							
						КонецЦикла;	
						
					КонецЕсли;	
					
					Если МассивыОтличаются Тогда
						РегистрыСведений.ИзбранноеПользователей.ДобавитьЗапись(Пользователь, МассивИзбранное);
					КонецЕсли;	
					
				КонецЕсли;
				
			КонецЕсли;	
		
		Исключение
			
			СтекОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); //@skip-check object-deprecated
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось заполнить избранное пользователя ""%1""
					|по причине:
					|%2'"),
				Пользователь, Пользователь); 
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Пользователь.Метаданные(),
				Пользователь,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти