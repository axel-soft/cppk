///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Процедура ВставитьРезультатРаспознаванияПоКурсору(Форма, Элемент, ИмяРеквизита, РезультатРаспознавания) Экспорт
	
	ВставитьТекстПоКурсору(
		Форма, Элемент, ИмяРеквизита,
		ОбработкаРаспознанногоТекстаКлиентСервер.ТекстИзРезультатаРаспознавания(РезультатРаспознавания),
		Не РезультатРаспознавания.РаспознаваниеФразыЗавершено
	);
	
КонецПроцедуры

Процедура ВставитьТекстПоКурсору(Форма, Элемент, ИмяРеквизита, Текст, ВыделитьТекст = Ложь) Экспорт
	
	Если Элемент.Вид = ВидПоляФормы.ПолеHTMLДокумента Тогда
		ВставитьТекстПоКурсоруВПолеHTMLДокумента(Форма, Элемент, Текст, ВыделитьТекст);
	ИначеЕсли Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
		ВставитьТекстПоКурсоруВПолеВвода(Форма, Элемент, ИмяРеквизита, Текст, ВыделитьТекст);
	ИначеЕсли Элемент.Вид = ВидПоляФормы.ПолеФорматированногоДокумента Тогда
		ВставитьТекстПоКурсоруВПолеФорматированногоДокумента(Форма, Элемент, ИмяРеквизита, Текст, ВыделитьТекст);
	Иначе
		ВызватьИсключение НСтр("ru = 'Поддерживаются только поля вида ""ПолеВвода"" и ""ПолеHTMLДокумента"".'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПолеВвода

Процедура ВставитьТекстПоКурсоруВПолеВвода(Форма, Элемент, ИмяРеквизита, Знач Текст, ВыделитьТекст)
	
	ИнициализироватьПараметрыВыделения(Форма.УникальныйИдентификатор);
	
	ИсходныйТекст = Элемент.ТекстРедактирования;
	
	НачальнаяПозиция = 1;
	КонечнаяПозиция  = 1;
	ПолучитьГраницыВыделения(Форма, Элемент, НачальнаяПозиция, КонечнаяПозиция);
	
	ПредыдущийФрагмент = Лев(ИсходныйТекст, НачальнаяПозиция - 1);
	
	Если ПоследнийСимволТребуетТРег(ПредыдущийФрагмент) Тогда
		Текст = ОбработкаРаспознанногоТекстаКлиентСервер.ТРегВнутр(Текст);
	КонецЕсли;
	
	Если Не ПустаяСтрока(Прав(ПредыдущийФрагмент, 1)) И Не ПервыйСимволПишетсяСлитно(Текст) Тогда
		Текст = " " + Текст;
	КонецЕсли;
	
	НовыйТекст = ПредыдущийФрагмент + Текст
		+ Прав(ИсходныйТекст, СтрДлина(ИсходныйТекст) - КонечнаяПозиция + 1);
	
	Форма[ИмяРеквизита] = НовыйТекст;
	Форма.ОбновитьОтображениеДанных(Элемент);
	
	Если ВыделитьТекст Тогда
		НоваяНачальнаяПозиция = НачальнаяПозиция;
		НоваяКонечнаяПозиция = НачальнаяПозиция + СтрДлина(Текст);
	Иначе
		НоваяНачальнаяПозиция = НачальнаяПозиция + СтрДлина(Текст);
		НоваяКонечнаяПозиция = НоваяНачальнаяПозиция;
	КонецЕсли;
	
	УстановитьГраницуВыделения(Форма, Элемент, НоваяНачальнаяПозиция, НоваяКонечнаяПозиция, Не ВыделитьТекст);
	
	Форма.ТекущийЭлемент = Элемент;
	
КонецПроцедуры

Процедура ПолучитьГраницыВыделения(Форма, Элемент, НачальнаяПозиция, КонечнаяПозиция)
	
	Позиция = ПолучитьСохраненнуюГраницуВыделения(Форма.УникальныйИдентификатор);
	Если Позиция.НачальнаяПозиция <> 1 Или Позиция.КонечнаяПозиция <> 1 Тогда 
		НачальнаяПозиция = Позиция.НачальнаяПозиция;
		КонечнаяПозиция  = Позиция.КонечнаяПозиция;
		Возврат;
	КонецЕсли;
	
	ИсходныйТекст = Элемент.ТекстРедактирования;
	
	НачалоСтроки = 1;
	НачалоКолонки = 1;
	КонецСтроки = 1;
	КонецКолонки = 1;
	
	Элемент.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	
	СимволовДо = 0;
	
	НСтроки = 1;
	Пока НСтроки < НачалоСтроки Цикл
		Строка = СтрПолучитьСтроку(ИсходныйТекст, НСтроки);
		СимволовДо = СимволовДо + СтрДлина(Строка) + 1;
		НСтроки = НСтроки + 1;
	КонецЦикла;
	
	НачальнаяПозиция = СимволовДо + НачалоКолонки;
	
	Пока НСтроки < КонецСтроки Цикл
		Строка = СтрПолучитьСтроку(ИсходныйТекст, НСтроки);
		СимволовДо = СимволовДо + СтрДлина(Строка) + 1;
		НСтроки = НСтроки + 1;
	КонецЦикла;
	
	КонечнаяПозиция = СимволовДо + КонецКолонки;
	
КонецПроцедуры

Процедура УстановитьГраницуВыделения(Форма, Элемент, НоваяНачальнаяПозиция, НоваяКонечнаяПозиция, ОчиститьСохраненнуюПозицию = Ложь)
	
	Элемент.УстановитьГраницыВыделения(НоваяНачальнаяПозиция, НоваяКонечнаяПозиция);
	УстановитьСохраненнуюГраницуВыделения(Форма.УникальныйИдентификатор, НоваяНачальнаяПозиция, НоваяКонечнаяПозиция);
	
	Если ОчиститьСохраненнуюПозицию Тогда
		ОчиститьСохраненнуюГраницуВыделения(Форма.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьПараметрыВыделения(УникальныйИдентификатор)
	
	Если ПараметрыПриложения["РаботаСРечью_ПоложениеКурсораПоляВвода"] = Неопределено Тогда
		ПараметрыПриложения.Вставить("РаботаСРечью_ПоложениеКурсораПоляВвода", Новый Соответствие);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСохраненнуюГраницуВыделения(УникальныйИдентификатор)
	
	Результат = ПараметрыПриложения["РаботаСРечью_ПоложениеКурсораПоляВвода"][УникальныйИдентификатор];
	Если Результат = Неопределено Тогда
		Возврат Новый Структура("НачальнаяПозиция, КонечнаяПозиция", 1, 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОчиститьСохраненнуюГраницуВыделения(УникальныйИдентификатор)
	
	ПараметрыПриложения["РаботаСРечью_ПоложениеКурсораПоляВвода"][УникальныйИдентификатор] = Неопределено;
	
КонецПроцедуры

Процедура УстановитьСохраненнуюГраницуВыделения(УникальныйИдентификатор, НоваяНачальнаяПозиция, НоваяКонечнаяПозиция)
	
	Позиция = ПолучитьСохраненнуюГраницуВыделения(УникальныйИдентификатор);
	Позиция.НачальнаяПозиция = НоваяНачальнаяПозиция;
	Позиция.КонечнаяПозиция  = НоваяКонечнаяПозиция;
	ПараметрыПриложения["РаботаСРечью_ПоложениеКурсораПоляВвода"][УникальныйИдентификатор] = Позиция;
	
КонецПроцедуры

#КонецОбласти

#Область ПолеHTMLДокумента

Процедура ВставитьТекстПоКурсоруВПолеHTMLДокумента(Форма, Элемент, Знач Текст, ВыделитьТекст)
	
	ДокументHTML = Элемент.Документ;
	Если ДокументHTML = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	selection = ДокументHTML.defaultView.getSelection();
	
	Если selection.type = "None" Тогда
		Возврат;
	КонецЕсли;
	
	range = selection.getRangeAt(0);
	Если range = Неопределено Тогда
		// Фокус не на поле с письмом.
		ДокументHTML.body.focus();
		range = ДокументHTML.getSelection().getRangeAt(0);
	КонецЕсли;
	
	range.deleteContents();
	
	range_prev = ДокументHTML.createRange();
	range_prev.selectNode(range.startContainer.parentNode);
	range_prev.setEnd(range.startContainer, range.startOffset);
	ПредыдущийФрагмент = range_prev.toString();
	
	ПервыйПроход = (ПредыдущийФрагмент = Символы.НПП);
	
	Если ПоследнийСимволТребуетТРег(ПредыдущийФрагмент) Или ПервыйПроход Тогда
		Текст = ОбработкаРаспознанногоТекстаКлиентСервер.ТРегВнутр(Текст);
	КонецЕсли;
	
	Если Не ПустаяСтрока(Прав(ПредыдущийФрагмент, 1)) И Не ПервыйСимволПишетсяСлитно(Текст) Тогда
		Текст = " " + Текст;
	КонецЕсли;
	
	Если ПервыйПроход Тогда
		el = ДокументHTML.createElement("br");
		range.insertNode(el);
	КонецЕсли;
	
	firstNode = Неопределено;
	el = Неопределено;
	
	Токены = СтрРазделить(Текст, Символы.ПС);
	Для Индекс = 0 По Токены.ВГраница() - 1 Цикл
		
		Токен = Токены[Индекс];
		
		Если Не ПустаяСтрока(Токен) Тогда
			el = ДокументHTML.createTextNode(Токен);
			range.insertNode(el);
			range.setEndAfter(el);
			range.collapse();
		КонецЕсли;
		
		Если firstNode = Неопределено И el <> Неопределено Тогда
			firstNode = el;
		КонецЕсли;
		
		el = ДокументHTML.createElement("br");
		range.insertNode(el);
		range.setEndAfter(el);
		range.collapse();
		
		Если firstNode = Неопределено Тогда
			firstNode = el;
		КонецЕсли;
		
	КонецЦикла;
	
	Токен = Токены[Токены.ВГраница()];
	
	Если Не ПустаяСтрока(Токен) Тогда
		el = ДокументHTML.createTextNode(Токен);
		range.insertNode(el);
		range.setEndAfter(el);
		range.collapse();
	КонецЕсли;
	
	Если el = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если firstNode = Неопределено Тогда
		firstNode = el;
	КонецЕсли;
	
	lastNode = el;
	
	//range = ДокументHTML.createRange();
	range = range.cloneRange();
	
	Если ВыделитьТекст Тогда
		range.setStartBefore(firstNode);
		range.setEndAfter(lastNode);
	Иначе
		range.setEndAfter(lastNode);
		range.collapse();
	КонецЕсли;
	
	selection.removeAllRanges();
	selection.addRange(range);
	
КонецПроцедуры

#КонецОбласти

#Область ПолеФорматированногоДокумента

Процедура ВставитьТекстПоКурсоруВПолеФорматированногоДокумента(Форма, Элемент, ИмяРеквизита, Знач Текст, ВыделитьТекст)
	
	ФорматированныйДокумент = Форма[ИмяРеквизита];
	
	// Определим текущую позицию.
	ЗакладкаНачала = ФорматированныйДокумент.ПолучитьЗакладкуНачала();
	ЗакладкаКонца = ФорматированныйДокумент.ПолучитьЗакладкуНачала();
	Элемент.ПолучитьГраницыВыделения(ЗакладкаНачала, ЗакладкаКонца);
	
	// Определеим текст до текущий позиции.
	ПредыдущийФрагмент = ФорматированныйДокумент.ПолучитьТекст(
		ФорматированныйДокумент.ПолучитьЗакладкуНачала(),
		ЗакладкаНачала);
	
	// Скорректируем вводимый текст, на основе предыдущего текста.
	Если ПоследнийСимволТребуетТРег(ПредыдущийФрагмент) Тогда
		Текст = ОбработкаРаспознанногоТекстаКлиентСервер.ТРегВнутр(Текст);
	КонецЕсли;
	
	Если Не ПустаяСтрока(Прав(ПредыдущийФрагмент, 1)) И Не ПервыйСимволПишетсяСлитно(Текст) Тогда
		Текст = " " + Текст;
	КонецЕсли;
	
	// Вставить текст на место курсора или выделенного текста.
	ПозицияНачала = ФорматированныйДокумент.ПолучитьПозициюПоЗакладке(ЗакладкаНачала);
	ПозицияКонца = ФорматированныйДокумент.ПолучитьПозициюПоЗакладке(ЗакладкаКонца);
	Если ПозицияНачала <> ПозицияКонца Тогда
		
		// Вставим текст на место выделенного текста.
		Элемент.ВыделенныйТекст = Текст;
		
	Иначе
		
		// Вставим текст на место курсора.
		ФорматированныйДокумент.Вставить(ЗакладкаНачала, Текст, Тип("ТекстФорматированногоДокумента"));
		
	КонецЕсли;
	
	// Обновим отображаемый текст.
	Форма.ОбновитьОтображениеДанных(Элемент);
	
	// Установим выделение на новый текст, либо курсор в конце текста.
	Если ВыделитьТекст Тогда
		
		// Установим выделение на новый текст.
		НоваяПозицияНачала = ПозицияНачала;
		НоваяПозицияКонца = ПозицияНачала + СтрДлина(Текст);
		
	Иначе
		
		// Установми курсор в конце текста.
		НоваяПозицияНачала = ПозицияНачала + СтрДлина(Текст);
		НоваяПозицияКонца = НоваяПозицияНачала;
		
	КонецЕсли;
	
	НоваяЗакладкаНачала = ФорматированныйДокумент.ПолучитьЗакладкуПоПозиции(НоваяПозицияНачала);
	НоваяЗакладкаКонца = ФорматированныйДокумент.ПолучитьЗакладкуПоПозиции(НоваяПозицияКонца);
	Элемент.УстановитьГраницыВыделения(НоваяЗакладкаНачала, НоваяЗакладкаКонца);
	
	Форма.ТекущийЭлемент = Элемент;
	
КонецПроцедуры

#КонецОбласти

Функция ПервыйСимволПишетсяСлитно(Знач Текст)
	
	Текст = СокрП(Текст);
	
	Знаки = Новый Массив;
	Знаки.Добавить(".");
	Знаки.Добавить(",");
	Знаки.Добавить(":");
	Знаки.Добавить(";");
	Знаки.Добавить("!");
	Знаки.Добавить("?");
	Знаки.Добавить(")");
	Знаки.Добавить("]");
	Знаки.Добавить("}");
	
	Для каждого Знак Из Знаки Цикл
		Если СтрНачинаетсяС(Текст, Знак) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПоследнийСимволТребуетТРег(Знач Текст)
	
	Если СтрЗаканчиваетсяНа(Текст, Символы.ПС) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Текст = СокрП(Текст);
	
	Знаки = Новый Массив;
	Знаки.Добавить(".");
	Знаки.Добавить("!");
	Знаки.Добавить("?");
	
	Для каждого Знак Из Знаки Цикл
		Если СтрЗаканчиваетсяНа(Текст, Знак) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти