
#Область ПрограммныйИнтерфейс

// Изменяет форму настроек программы.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма, в которой необходимо установить доступность элементов.
//
Процедура ИзменитьФормуНастроекПрограммы(Форма) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
	
	РаботаСФормамиХолдингПереопределяемый.ИзменитьФормуНастроекПрограммы(Форма, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.ИмяФормы = "Обработка.НастройкаПрограммы.Форма.ОбщиеНастройки" Тогда
		
		Форма.Элементы.УчетнаяЗаписьДляРаботыСПриглашениями.Подсказка =
			НСтр("ru = 'Для корректной работы с приглашениями, для каждого узла КОД необходимо создать свою учётную запись почты, которая будет отправлять приглашения и принимать ответы на приглашения.'");
		Форма.Элементы.УчетнаяЗаписьДляРаботыСПриглашениями.ОтображениеПодсказки =
			ОтображениеПодсказки.ОтображатьСнизу;
		
	КонецЕсли;
	
	Если Форма.ИмяФормы = "Обработка.НастройкаПрограммы.Форма.ОсновнаяФорма" Тогда
		
		Если КОДСервер.ЭтоПодчиненныйУзел() Тогда
			
			Форма.Элементы.ГруппаАрхив.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма.ИмяФормы = "Обработка.НастройкаПрограммы.Форма.Файлы" Тогда
		
		Если КОДСервер.ЭтоПодчиненныйУзел() Тогда
			
			Форма.Элементы.МаксимальныйРазмерФайла.Доступность = Ложь;
			
			Форма.Элементы.ПутьСохраненияУдаляемыхВерсий.Доступность = Ложь;
			Форма.Элементы.ОчиститьСейчас.Доступность = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;

	Если Форма.ИмяФормы = "Обработка.НастройкаПрограммы.Форма.Документы" Тогда
		
		Если КОДСервер.ЭтоПодчиненныйУзел() Тогда
			
			Форма.Элементы.ИспользоватьГрифыДоступа.Доступность = Ложь;
			Форма.Элементы.ГрифДоступаПоУмолчанию.Доступность = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;

	Если Форма.ИмяФормы = "Справочник.ТомаХраненияФайлов.Форма.ФормаЭлемента"
		Или Форма.ИмяФормы = "Справочник.ШаблоныИменФайлов.Форма.ФормаЭлемента"
		Или Форма.ИмяФормы = "Обработка.НастройкаПрограммы.Форма.НастройкаСканирования"
		Или Форма.ИмяФормы = "Справочник.ПравилаРазмещенияФайловВТомах.Форма.НастройкаПравилРазмещенияФайловВТомах" Тогда
		
		Если КОДСервер.ЭтоПодчиненныйУзел() Тогда
			
			Форма.ТолькоПросмотр = Истина;
			
		КонецЕсли;
		
	КонецЕсли;

	Если Форма.ИмяФормы = "ОбщаяФорма.РегиональныеНастройки" Тогда
	
		Если КОДСервер.ЭтоПодчиненныйУзел() Тогда
			
			Форма.ТолькоПросмотр = Истина;
			Форма.КоманднаяПанель.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма.ИмяФормы = "Обработка.НастройкаПрограммы.Форма.ВыборИспользуемыхРазрезовДоступа" Тогда
	
		Если КОДСервер.ЭтоПодчиненныйУзел() Тогда
			
			Форма.ТолькоПросмотр = Истина;
			Форма.Элементы.ГруппаКнопки.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма.ИмяФормы = "Справочник.ШаблоныДвухфакторнойАутентификации.Форма.ФормаЭлемента" Тогда
	
		Если КОДСервер.ЭтоПодчиненныйУзел() Тогда
			
			Форма.ТолькоПросмотр = Истина;
			Форма.КоманднаяПанель.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма.ИмяФормы = "Обработка.НастройкаПрограммы.Форма.НастройкиГрифыВиды1СШтамп" Тогда
	
		Если КОДСервер.ЭтоПодчиненныйУзел() Тогда
			
			Форма.ТолькоПросмотр = Истина;
			Форма.КоманднаяПанель.Видимость = Ложь;    
			Форма.Элементы.ГрифыШтамп.Доступность = Ложь;
			Форма.Элементы.ВидыШтамп.Доступность = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИзменитьДоступностьЦентрализованныхНастроекПрограммы(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Изменяет доступность централизованных настроек программы.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма, в которой необходимо изменить доступность централизованных настроек.
//
Процедура ИзменитьДоступностьЦентрализованныхНастроекПрограммы(Форма)
	
	Если КОДСервер.ЭтоЦентральныйУзел() Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитКонстантыНабор = 
		РеквизитФормыПоОтбору(Форма, Новый Структура("ТипЗначения", Новый ОписаниеТипов("КонстантыНабор")));
	Если РеквизитКонстантыНабор = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПутиКДанным = Новый Массив;
	Для Каждого Тип Из Метаданные.ОпределяемыеТипы.ОписаниеТиповДанныхКОД.Тип.Типы() Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если Не ОбщегоНазначения.ЭтоКонстанта(ОбъектМетаданных) Тогда
			Продолжить;
		КонецЕсли;
		
		ПутиКДанным.Добавить(
			СтрШаблон("%1.%2", РеквизитКонстантыНабор.Имя, ОбъектМетаданных.Имя));
	КонецЦикла;
		
	ЭлементыФормы = ЭлементыФормыСвязанныеСДанными(Форма, ПутиКДанным);
	
	РаботаСФормамиХолдингПереопределяемый.ЭлементыФормыНастроекПрограммыЗапретРедактирования(ЭлементыФормы);
	
	Если ЭлементыФормы.Количество() Тогда
		Для Каждого ЭлементФормы Из ЭлементыФормы Цикл
			Если ТипЗнч(ЭлементФормы) = Тип("ПолеФормы")
						И ЭлементФормы.Вид <> ВидПоляФормы.ПолеНадписи
					Или ТипЗнч(ЭлементФормы) = Тип("ТаблицаФормы") Тогда
				ЭлементФормы.ТолькоПросмотр = Истина;
			Иначе
				ЭлементФормы.Доступность = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		ИнформационнаяНадписьЦентрализованныеНастройки(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет поиск реквизита формы согласно переданного отбора.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма, в которой необходимо выполнить поиск.
//	Отбор - Структура:
//		* Заголовок - Строка - Заголовок реквизита.
//		* Имя - Строка - Имя реквизита.
//		* Путь - Строка - Путь к реквизиту.
//		* СохраняемыеДанные - Булево - Признак, что это сохраняемый при записи реквизит.
//		* ТипЗначения - ОписаниеТипов - Тип реквизита.
//
// Возвращаемое значение:
//	РеквизитФормы, Неопределено - Рек
//
Функция РеквизитФормыПоОтбору(Форма, Отбор)
	
	Реквизит = Неопределено;
	
	Путь = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Отбор, "Путь", "");
	
	Попытка
		МассивРеквизитов = Форма.ПолучитьРеквизиты(Путь);
	Исключение
		Возврат Реквизит;
	КонецПопытки;
	
	Для Каждого ТекущийРеквизит Из МассивРеквизитов Цикл
		ЧислоСовпадений = 0;
		Для Каждого Элемент Из Отбор Цикл
			Если ТекущийРеквизит[Элемент.Ключ] = Элемент.Значение Тогда
				ЧислоСовпадений = ЧислоСовпадений + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если ЧислоСовпадений = Отбор.Количество() Тогда
			Реквизит = ТекущийРеквизит;
		ИначеЕсли Не ЗначениеЗаполнено(Путь) Тогда
			ОтборВложенных = ОбщегоНазначения.СкопироватьРекурсивно(Отбор);
			ОтборВложенных.Вставить("Путь", ТекущийРеквизит.Имя);
			
			Реквизит = РеквизитФормыПоОтбору(Форма, ОтборВложенных);
		КонецЕсли;
		
		Если Не Реквизит = Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Реквизит;
	
КонецФункции

// Выполняет поиск реквизита формы согласно переданного отбора.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма, в которой необходимо выполнить поиск.
//	ПутиКДанным - Массив Из Строка - Список путей к данным.
//
// Возвращаемое значение:
//	Массив Из ПолеФормы, ТаблицаФормы
//
Функция ЭлементыФормыСвязанныеСДанными(Форма, ПутиКДанным)
	
	МассивЭлементов = Новый Массив;
		
	Для Каждого Элемент Из Форма.Элементы Цикл
		Если (Не ТипЗнч(Элемент) = Тип("ПолеФормы")
					И Не ТипЗнч(Элемент) = Тип("ТаблицаФормы"))
				Или ПутиКДанным.Найти(Элемент.ПутьКДанным) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивЭлементов.Добавить(Элемент);
	КонецЦикла;
	
	Возврат МассивЭлементов;
	
КонецФункции

// Добавляет на форму информационную надпись о централизовано управляемых настройках.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма, в которой необходимо выполнить поиск.
//
Процедура ИнформационнаяНадписьЦентрализованныеНастройки(Форма)
	
	ГруппаЦентрализованныеНастройки = РаботаСФормами.ДобавитьОбычнуюГруппу(
		Форма,
		"ЦентрализованоУправляемыеНастройкиИнформация",
		Форма);
	ГруппаЦентрализованныеНастройки.Группировка =
		ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаЦентрализованныеНастройки.ЦветФона = ЦветаСтиля.ОбъектПомеченНаУдаление;
	
	РаботаСФормами.ДобавитьКартинку(
		Форма,
		"ЦентрализованоУправляемыеНастройкиКартинка",
		ГруппаЦентрализованныеНастройки,
		БиблиотекаКартинок.ИнформацияПоНедоступнымПолям);
	
	ИнформационнаяНадпись = РаботаСФормами.ДобавитьНадпись(
		Форма,
		"ЦентрализованоУправляемыеНастройкиТекстПредупреждения",
		ГруппаЦентрализованныеНастройки,
		НСтр("ru = 'Некоторые настройки программы выполняются централизованно и могут быть изменены только в центральном узле'"));
	ИнформационнаяНадпись.ЦветФона = ЦветаСтиля.ОбъектПомеченНаУдаление;
	ИнформационнаяНадпись.АвтоМаксимальнаяШирина = Ложь;
	ИнформационнаяНадпись.РастягиватьПоГоризонтали = Ложь;
	
	Местоположение = Неопределено;
	МестоположениеНадписиЦентрализованныеНастройки(Форма, Местоположение);
	
	Если Местоположение <> Неопределено Тогда
		Форма.Элементы.Переместить(
			ГруппаЦентрализованныеНастройки, Форма, Местоположение);
	КонецЕсли;
	
КонецПроцедуры

// Позволяет переопределить положение информационной надписи о централизовано-управляемых настройках.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма, в которой должна будет размещена надпись.
//	Местоположение - ГруппаФормы,
//						ДекорацияФормы,
//						КнопкаФормы,
//						ПолеФормы,
//						ТаблицаФормы - Элемент формы, перед которым будет размещена надпись.
//
Процедура МестоположениеНадписиЦентрализованныеНастройки(Форма, Местоположение)
	
	Если Форма.ИмяФормы = "Обработка.НастройкаПрограммы.Форма.ОбщиеНастройки" Тогда
		Местоположение = Форма.Элементы.ГруппаЗаголовок;
	ИначеЕсли Форма.ИмяФормы = "Обработка.НастройкаПрограммы.Форма.ПраваДоступа" Тогда
		Местоположение = Форма.Элементы.ГруппаПраваДоступа;
	ИначеЕсли Форма.ИмяФормы = "Обработка.НастройкаПрограммы.Форма.Документы" Тогда
		Местоположение = Форма.Элементы.ГруппаДелопроизводство;
	ИначеЕсли Форма.ИмяФормы = "Обработка.НастройкаПрограммы.Форма.НастройкиЭлектронныхПодписей" Тогда
		Местоположение = Форма.Элементы.ГруппаЭлектроннаяПодписьИШифрование;
	Иначе
		// Местоположение по умолчанию.
		Местоположение = Форма.Элементы.Найти("ОсновнаяКоманднаяПанель");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
