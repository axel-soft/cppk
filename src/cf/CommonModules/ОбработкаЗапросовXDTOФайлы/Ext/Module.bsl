///////////////////////////////////////////////////////////////////////////////////////////////////////
// Обработка запросов XDTO, работа с файлами
// Реализует функционал веб-сервиса DMService в части работы с файлами
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбщиеПроцедурыИФункции

// Добавляет в Документооборот файл по данным объекта XDTO. В сообщении передаются
// двоичные данные из ИС или ссылка на файл-шаблон в ДО.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMAddFileRequest с заполненным template или binaryData.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMAddFileResponse или DMError.
//
Функция ДобавитьФайлВДокумент(Сообщение) Экспорт
	
	Попытка
		
		Если Сообщение.file.Установлено("template") И Не Сообщение.file.Установлено("binaryData") Тогда
			Возврат ДобавитьФайлВДокументИзШаблона(Сообщение);
			
		ИначеЕсли Сообщение.file.Установлено("binaryData") Тогда
			Возврат ДобавитьФайлВДокументИзДвоичныхДанных(Сообщение);
			
		Иначе
			Возврат ОбработкаЗапросовXDTO.ОписаниеОшибкиXDTO(
				НСтр("ru = 'Ошибка при добавлении файла'"),
				НСтр("ru = 'Не заполнен ни шаблон, ни двоичные данные файла'"));
			
		КонецЕсли;
		
	Исключение
		
		Возврат ОбработкаЗапросовXDTO.ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при добавлении файла'"),
			ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

// Изменяет роль файлов.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMChangeFilesRoleRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMChangeFilesRoleResponse или DMError.
//
Функция ЗаменитьРольФайлов(Сообщение) Экспорт
	
	Попытка
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMChangeFilesRoleResponse");
		
		НоваяРоль = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.newRole.objectId);
		
		Для Каждого file Из Сообщение.files Цикл
			Файл = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(file.objectId);
			РаботаСФайламиВызовСервера.ЗаменитьРольФайла(Файл, НоваяРоль);
		КонецЦикла;
		
		Возврат Ответ;
		
	Исключение
		
		Возврат ОбработкаЗапросовXDTO.ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при изменении роли файла'"),
			ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

// Занимает указанный файл на редактирование и, если указано свойством columnSet, получает его данные.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMLockFileRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMLockFileResponse или DMError.
//
Функция ЗанятьФайл(Сообщение) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		ФайлСсылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.objectId);
		
		Если Сообщение.Установлено("clientIdentifier") Тогда
			ИдентификаторКлиента = Новый УникальныйИдентификатор(Сообщение.clientIdentifier);
		Иначе
			СистемнаяИнформация = Новый СистемнаяИнформация();
			ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
		КонецЕсли;
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ФайлСсылка,, ИдентификаторКлиента); // возможно исключение
		
		// Проверим, не захвачен ли файл другим пользователем.
		Если ЗначениеЗаполнено(ДанныеФайла.Редактирует)
				И ДанныеФайла.Редактирует <> Пользователи.ТекущийПользователь() Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Файл уже занят пользователем ""%1""'"),
				ДанныеФайла.Редактирует);
		КонецЕсли;
		
		// Проверим, не захвачен ли файл тем же пользователем с другого компьютера.
		Если ДанныеФайла.Свойство("ЗанятСДругогоКомпьютера") И ДанныеФайла.ЗанятСДругогоКомпьютера Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Файл ""%1.%2"" занят вами с другого компьютера (%3).
					|Выполните ""Закончить редактирование"" с компьютера %4
					|или отмените редактирование (сделанные вами изменения будут потеряны).'"),
				ДанныеФайла.ПолноеНаименованиеВерсии,
				ДанныеФайла.Расширение,
				ДанныеФайла.ИмяДругогоКомпьютера,
				ДанныеФайла.ИмяДругогоКомпьютера);
		КонецЕсли;
		
		ДатаЗаема = Сообщение.lockDate; // Дата должна быть передана: часовой пояс клиента неизвестен.
		
		ТекстСообщенияОбОшибке = "";
		Если РаботаСФайламиВызовСервера.ЗанятьФайл(
				ДанныеФайла, ТекстСообщенияОбОшибке, ДатаЗаема, ИдентификаторКлиента) Тогда
			
			Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMLockFileResponse");
			Если Сообщение.Установлено("columnSet") Тогда
				Ответ.object = ОбработкаЗапросовXDTO.ПолучитьОбъектXDTOПоСуществующимДаннымДО(
					ФайлСсылка.ПолучитьОбъект(),
					Сообщение.columnSet);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
			Возврат Ответ;
			
		Иначе
			ВызватьИсключение ТекстСообщенияОбОшибке;
		КонецЕсли;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		Возврат ОбработкаЗапросовXDTO.ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при занятии файла'"),
			ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

// Записывает файлы объекта ДО, обновляя их согласно переданному списку.
//
// Параметры:
//   ОбъектДО - СправочникСсылка - владелец файлов.
//   ФайлыXDTO - СписокXDTO - список объектов типа DMFile.
//
Процедура ЗаписатьДанныеФайлов(ОбъектДО, ФайлыXDTO) Экспорт
	
	Если ФайлыXDTO.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивПодчиненныхФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(ОбъектДО);
	
	Для Каждого ФайлXDTO Из ФайлыXDTO Цикл
		
		Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(ФайлXDTO.objectId, Ложь);
		
		Если ЗначениеЗаполнено(Ссылка) Тогда
			
			Если МассивПодчиненныхФайлов.Найти(Ссылка) = Неопределено Тогда
				// Файл не найден.
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Файл ""%1"" не входит в число файлов объекта ""%2""'"),
					ФайлXDTO.name,
					Строка(ОбъектДО));
			КонецЕсли;
			Ошибка = "";
			ИсточникДанных = ОбработкаЗапросовXDTO.ИсточникОбъектXDTO(ФайлXDTO, ФайлXDTO.objectId.type);
			Если Не ОбработкаЗапросовXDTO.ЗаписатьДанныеОбъектаДО(Ссылка.ПолучитьОбъект(), ИсточникДанных, Ошибка) Тогда
				ВызватьИсключение Ошибка;
			КонецЕсли;
			
		Иначе
			
			ФайлСсылка = Неопределено;
			
			ФайлОбновлен = Ложь;
			Для Каждого Файл Из МассивПодчиненныхФайлов Цикл
				Если Строка(Файл) <> ФайлXDTO.name Тогда
					Продолжить;
				КонецЕсли;
				
				ФайлСсылка = Файл;
				ОбновитьДвоичныеДанныеФайла(ФайлСсылка, ФайлXDTO);
				
				ФайлОбновлен = Истина;
				Прервать;
			КонецЦикла;
			
			Если Не ФайлОбновлен Тогда
				// Создадим новый файл.
				СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
				СведенияОФайле.АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ФайлXDTO.binaryData);
				СведенияОФайле.ВремяИзменения = ФайлXDTO.modificationDate;
				СведенияОФайле.ВремяИзмененияУниверсальное = ФайлXDTO.modificationDateUniversal;
				СведенияОФайле.Размер = ФайлXDTO.size;
				СведенияОФайле.ИмяБезРасширения = ФайлXDTO.name;
				СведенияОФайле.РасширениеБезТочки = ФайлXDTO.extension;
				СведенияОФайле.Комментарий = ФайлXDTO.comment;
				
				РольФайла = Неопределено;
				ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(РольФайла, ФайлXDTO, "role");
				ЗаполнитьРольВСведенияхОФайле(СведенияОФайле, РольФайла, ОбъектДО);
				
				Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ФайлXDTO, "externalObject")
						И ЗначениеЗаполнено(ФайлXDTO.externalObject.ID) Тогда
					СведенияОФайле.ИдентификаторФайла = Новый УникальныйИдентификатор(ФайлXDTO.externalObject.ID);
				КонецЕсли;
				
				Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ФайлXDTO, "text") Тогда
					СведенияОФайле.АдресВременногоХранилищаТекста = Новый ХранилищеЗначения(ФайлXDTO.text);
				КонецЕсли;
				
				ФайлСсылка = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(ОбъектДО, СведенияОФайле);
			КонецЕсли;
			
			Если ФайлСсылка <> Неопределено Тогда
				УстановитьПризнакЯвляетсяОригиналом(ФайлСсылка, ОбъектДО, ФайлXDTO);
				ОбновитьОписаниеФайла(ФайлСсылка, ФайлXDTO);
				ОбновитьПодписиФайла(ФайлСсылка, ФайлXDTO);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Помещает в базу изменения файлов по запросу DMUpdateFilesRequest и возвращает ответ.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMUpdateFilesRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMUpdateFilesResponse.
//
Функция ЗаписатьИзмененияФайлов(Сообщение) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		ИмяОбъекта = "";
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMUpdateFilesResponse");
		Ответ.dataBaseId = Сообщение.dataBaseId;
		
		Для Каждого Объект Из Сообщение.objects Цикл
			
			ИмяОбъекта = Объект.name;
			Ссылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Объект.objectId);
			Если Не ЗначениеЗаполнено(Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаписатьДанныеФайлов(Ссылка, Объект.files);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		Возврат Ответ;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ЗаголовокОшибки = НСтр("ru = 'Ошибка при обновлении файлов'");
		ТекстОшибкиМассив = Новый Массив;
		Если Не ПустаяСтрока(ИмяОбъекта) Тогда
			ТекстОшибкиМассив.Добавить(СтрШаблон(
				НСтр("ru = 'Ошибка при обновлении файлов объекта %1'"),
				ИмяОбъекта));
		КонецЕсли;
		ТекстОшибкиМассив.Добавить(НСтр("ru = 'Текст ошибки:'"));
		ТекстОшибкиМассив.Добавить(ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
		Возврат ОбработкаЗапросовXDTO.ОписаниеОшибкиXDTO(ЗаголовокОшибки, СтрСоединить(ТекстОшибкиМассив, Символы.ПС));
		
	КонецПопытки;
	
КонецФункции

// Записывает сведения сведения о редактировании файла текущим пользователем.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMUpdateFileEditingInfoRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMUpdateFileEditingInfoResponse или DMError.
//
Функция ЗаписатьСведенияОРедактированииФайла(Сообщение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		Версия = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.objectId);
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMUpdateFileEditingInfoResponse");
		
		Запись = РегистрыСведений.ФайлыВРабочемКаталогеКомпьютера.СоздатьМенеджерЗаписи();
		
		Если Сообщение.Установлено("clientIdentifier") Тогда
			ИдентификаторКлиента = Новый УникальныйИдентификатор(Сообщение.clientIdentifier);
		Иначе
			СистемнаяИнформация = Новый СистемнаяИнформация();
			ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
		КонецЕсли;
		
		ТекСеанс = ПолучитьТекущийСеансИнформационнойБазы();
		ТекущийПользователь = Пользователи.ТекущийПользователь();
		
		Запись.Версия = Версия;
		Запись.Идентификатор = СтрШаблон("%1_%2",
			Строка(ИдентификаторКлиента),
			Строка(ТекущийПользователь.УникальныйИдентификатор()));
		Запись.Пользователь = ТекущийПользователь;
		Запись.ИмяКомпьютера = ТекСеанс.ИмяКомпьютера;
		
		Если Сообщение.info.saved Тогда
			Запись.Размер = Сообщение.info.size;
			Запись.ДатаПомещенияВРабочийКаталог = Сообщение.info.saveDate;
			Запись.НаЧтение = Сообщение.info.readOnly;
			Если Сообщение.info.inOwnersFolder Тогда
				Запись.ВРабочемКаталогеВладельца = Истина;
				Запись.Путь = Сообщение.info.fullPath;
			Иначе
				Каталог = ФайловыеФункции.ПолучитьПутьКРабочемуКаталогуПользователя(ИдентификаторКлиента);
				Если Каталог = Неопределено Тогда
					Каталог = "";
				КонецЕсли;
				ПолныйПуть = Сообщение.info.fullPath;
				Если Лев(ПолныйПуть, СтрДлина(Каталог)) = Каталог Тогда
					Запись.Путь = Сред(ПолныйПуть, СтрДлина(Каталог) + 1);
				Иначе
					Запись.Путь = ПолныйПуть;
				КонецЕсли;
			КонецЕсли;
			Запись.Записать();
		Иначе
			Запись.Удалить();
		КонецЕсли;
		
		Возврат Ответ;
		
	Исключение
		
		Возврат ОбработкаЗапросовXDTO.ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при записи сведений о редактировании файла'"),
			ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

// Заполняет поля указанного файла данными его владельца.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMAutoFillRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMAutoFillResponse или DMError.
//
Функция ЗаполнитьПоляФайлаДаннымиВладельца(Сообщение) Экспорт
	
	Попытка
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьАвтозаполнениеФайлов") Тогда
			ВызватьИсключение НСтр("ru = 'В настройках 1С:Документооборота отключено автозаполнение файлов.'");
		КонецЕсли;
		
		Файл = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.file.objectId);
		Если Файл = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Указанный файл не найден в 1С:Документообороте.'");
		КонецЕсли;
		
		Владелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ВладелецФайла");
		
		РезультатЗаполнения = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьПоляФайлаДаннымиВладельца(
			Ложь,
			Файл,
			Истина,,
			Владелец);
		
		Если РезультатЗаполнения.Результат Тогда
			Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMAutoFillResponse");
			Возврат Ответ;
		Иначе
			ВызватьИсключение РезультатЗаполнения.Описание;
		КонецЕсли;
		
	Исключение
		
		Возврат ОбработкаЗапросовXDTO.ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при заполнении файла данными владельца'"),
			ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

// Заполняет список файлов из массива структур, содержащих их реквизиты.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO список файлов которого требуется заполнить.
//   ВладелецФайла - ЛюбаяСсылка - владелец файлов.
//   НаборКолонок - Массив из Строка - содержит имена реквизитов к получению.
//   ПолучатьПомеченныеНаУдаление - Булево - получать помеченные на удаление файлы.
//   ПолучатьПредпросмотр - Булево - получить предпросмотр первого файла.
//   ПолучатьДвоичныеДанные - Булево - получить двоичные данные первого файла для его отображения средствами 1С.
//
Процедура ЗаполнитьСписокФайлов(ОбъектXDTO, ВладелецФайла, НаборКолонок,
		ПолучатьПомеченныеНаУдаление = Ложь, ПолучатьПредпросмотр = Ложь, ПолучатьДвоичныеДанные = Ложь) Экспорт
	
	МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
		ВладелецФайла,
		ПолучатьПомеченныеНаУдаление);
	
	ПерваяРоль = Неопределено;
	Если ПолучатьПредпросмотр // Нужно получить предпросмотр первого файла первой основной роли
			И ПолучитьФункциональнуюОпцию("ИспользоватьРолиФайлов")
			И ТипЗнч(ВладелецФайла) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		
		ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецФайла, "ВидДокумента");
		Если ТипЗнч(ВидДокумента) = Тип("СправочникСсылка.ВидыДокументов") Тогда
			
			РолиФайлов = Делопроизводство.РолиФайловДляВидаДокументов(ВидДокумента);
			
			Для Каждого Строка Из РолиФайлов Цикл
				Если Строка.Обязательная Тогда
					ПерваяРоль = Строка.Роль;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ПерваяРоль = Неопределено И РолиФайлов.Количество() > 0 Тогда
				ПерваяРоль = РолиФайлов[0].Роль;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПерваяРоль <> Неопределено Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Файлы.Ссылка КАК Файл,
			|	ВЫБОР
			|		КОГДА РолиФайловДокументов.Роль = &ПерваяРоль
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК ПерваяРоль
			|ИЗ
			|	Справочник.Файлы КАК Файлы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РолиФайловДокументов КАК РолиФайловДокументов
			|		ПО (РолиФайловДокументов.Файл = Файлы.Ссылка)
			|ГДЕ
			|	Файлы.Ссылка В (&МассивФайлов)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПерваяРоль,
			|	Файлы.Наименование");
		Запрос.УстановитьПараметр("ПерваяРоль", ПерваяРоль);
		Запрос.УстановитьПараметр("МассивФайлов", МассивФайлов);
		
		МассивФайлов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Файл");
	КонецЕсли;
	
	Для НомерФайла = 0 По МассивФайлов.ВГраница() Цикл
		ФайлСсылка = МассивФайлов[НомерФайла];
		ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
		ПолучатьПредпросмотр = ПолучатьПредпросмотр И НомерФайла = 0;
		ПолучатьДвоичныеДанные = ПолучатьДвоичныеДанные И НРег(ФайлОбъект.ТекущаяВерсияРасширение) = "pdf";
		Колонки = НаборКолонок;
		Если ПолучатьПредпросмотр И ПолучатьДвоичныеДанные Тогда
			Колонки.Добавить("binaryData");
		КонецЕсли;
		ФайлXDTO = ОбработкаЗапросовXDTO.ПолучитьОбъектXDTOПоСуществующимДаннымДО(ФайлОбъект, Колонки);
		// Предпросмотр файла.
		Если ПолучатьПредпросмотр И Не ПолучатьДвоичныеДанные Тогда
			ФайлXDTO.htmlViewTruncated = Ложь;
			ФайлXDTO.htmlView = ОбзорФайловВызовСервера.ПолучитьHTMLПредпросмотра(
				ФайлСсылка,
				ФайлXDTO.htmlViewTruncated,,
				Истина);
		КонецЕсли;
		ОбъектXDTO.files.Добавить(ФайлXDTO);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет список файлов из таблицы файлов шаблона документа.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMDocument подлежащий заполнению.
//   ФайлыШаблона - ТаблицаЗначений - таблица файлов шаблона с колонками:
//     * Наименование - Строка
//     * ПолныйПуть - Строка
//     * ИндексКартинки - Число
//     * Расширение - Строка
//     * ШаблонОснованиеДляСоздания - СправочникСсылка.Файлы
//     * ДобавленИзШаблона - Булево
//
Процедура ЗаполнитьСписокФайловПоШаблону(ОбъектXDTO, ФайлыШаблона) Экспорт
	
	Для Каждого ФайлШаблона Из ФайлыШаблона Цикл
		
		ОбъектDMFile = ОбработкаЗапросовXDTO.СоздатьОбъект("DMFile");
		
		ОбъектDMFile.name = ФайлШаблона.Наименование;
		ОбъектDMFile.objectId = ОбработкаЗапросовXDTO.СоздатьObjectID(, "DMFile");
		ОбъектDMFile.extension = ФайлШаблона.Расширение;
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
			ОбъектDMFile,
			"template",
			ФайлШаблона.ШаблонОснованиеДляСоздания);
		ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(
			ОбъектDMFile,
			"role",
			ФайлШаблона.РольФайла);
		
		ОбъектXDTO.files.Добавить(ОбъектDMFile);
		
	КонецЦикла;
	
КонецПроцедуры

// Освобождает занятый файл.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMUnlockFileRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMUnlockFileResponse или DMError.
//
Функция ОсвободитьФайл(Сообщение) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		ФайлСсылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.objectId);
		
		Если Сообщение.Установлено("clientIdentifier") Тогда
			ИдентификаторКлиента = Новый УникальныйИдентификатор(Сообщение.clientIdentifier);
		Иначе
			СистемнаяИнформация = Новый СистемнаяИнформация();
			ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
		КонецЕсли;
		
		ТекстСообщенияОбОшибке = "";
		МожноОсвободитьФайл = Ложь;
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ФайлСсылка,, ИдентификаторКлиента); // возможно исключение
		Если ДанныеФайла.РедактируетТекущийПользователь Тогда 
			МожноОсвободитьФайл = Истина;
			
		ИначеЕсли Не ЗначениеЗаполнено(ДанныеФайла.Редактирует) Тогда
			ТекстСообщенияОбОшибке = НСтр("ru = 'Нельзя освободить файл, так как он никем не занят.'");
			
		Иначе // занят кем-то другим
			Если Пользователи.ЭтоПолноправныйПользователь() Тогда
				МожноОсвободитьФайл = Истина;
			Иначе
				ТекстСообщенияОбОшибке = СтрШаблон(
					НСтр("ru = 'Нельзя освободить файл, так как он занят пользователем ""%1"".'"),
					Строка(ДанныеФайла.Редактирует));
			КонецЕсли;
			
		КонецЕсли;
		
		Если МожноОсвободитьФайл Тогда
			
			РаботаСФайламиВызовСервера.ОсвободитьФайл(ДанныеФайла, ИдентификаторКлиента);
			Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMUnlockFileResponse");
			Если Сообщение.Установлено("columnSet") Тогда
				Ответ.object = ОбработкаЗапросовXDTO.ПолучитьОбъектXDTOПоСуществующимДаннымДО(
					ФайлСсылка.ПолучитьОбъект(),
					Сообщение.columnSet);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
			Возврат Ответ;
			
		Иначе
			ВызватьИсключение ТекстСообщенияОбОшибке;
		КонецЕсли;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		Возврат ОбработкаЗапросовXDTO.ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при освобождении файла'"),
			ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

// Получает сведения о редактировании файла текущим пользователем.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMGetFileEditingInfoRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetFileEditingInfoResponse или DMError.
//
Функция ПолучитьСведенияОРедактированииФайла(Сообщение) Экспорт
	
	Попытка
		
		// Ради экономии вызовов запрашивать можно сведения и о версии, и о файле.
		// В последнем случае возвращаются сведения о текущей версии, она же указывается в ответе.
		Если Сообщение.objectId.type = "DMFile" Тогда
			Файл = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.objectId);
			РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Файл,
				"ТекущаяВерсия, ВладелецФайла, ТекущаяВерсияРасширение");
			Версия = РеквизитыФайла.ТекущаяВерсия;
			Если Не ЗначениеЗаполнено(Версия) Тогда
				ВызватьИсключение НСтр("ru = 'Файл не найден'");
			КонецЕсли;
			
		ИначеЕсли Сообщение.objectId.type = "DMFileVersion" Тогда
			Версия = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.objectId);
			
		Иначе
			ВызватьИсключение
				НСтр("ru = 'Сведения о редактировании можно получить только для файла или для версии файла'");
			
		КонецЕсли;
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGetFileEditingInfoResponse");
		
		Если Сообщение.Установлено("clientIdentifier") Тогда
			ИдентификаторКлиента = Новый УникальныйИдентификатор(Сообщение.clientIdentifier);
		Иначе
			СистемнаяИнформация = Новый СистемнаяИнформация();
			ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
		КонецЕсли;
		
		ТекущийПользователь = Пользователи.ТекущийПользователь();
		
		Идентификатор = СтрШаблон("%1_%2",
			Строка(ИдентификаторКлиента),
			Строка(ТекущийПользователь.УникальныйИдентификатор()));
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Сведения.Путь КАК Путь,
			|	Сведения.ДатаПомещенияВРабочийКаталог КАК ДатаПомещенияВРабочийКаталог,
			|	Сведения.НаЧтение КАК НаЧтение,
			|	Сведения.ВРабочемКаталогеВладельца КАК ВРабочемКаталогеВладельца,
			|	Версии.Ссылка КАК Версия,
			|	Версии.ДатаМодификацииУниверсальная КАК ДатаМодификацииУниверсальная,
			|	Версии.Размер КАК Размер,
			|	Версии.Владелец.ВладелецФайла КАК ВладелецФайла
			|ИЗ
			|	Справочник.ВерсииФайлов КАК Версии
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФайлыВРабочемКаталогеКомпьютера КАК Сведения
			|		ПО Версии.Ссылка = Сведения.Версия
			|			И (Сведения.Идентификатор = &Идентификатор)
			|ГДЕ
			|	Версии.Ссылка = &Версия");
		Запрос.УстановитьПараметр("Версия", Версия);
		Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Выборка.Следующий() Тогда
			
			Сведения = ОбработкаЗапросовXDTO.СоздатьОбъект("DMFileEditingInfo");
			
			// Получим рекомендуемый каталог для сохранения.
			Каталог = РаботаСФайламиВызовСервера.РабочийКаталогПапки(Выборка.ВладелецФайла);
			ПерсональныеНастройки = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами();
			Если ЗначениеЗаполнено(Каталог) Тогда
				Сведения.inOwnersFolder = Истина;
			Иначе
				Каталог = ФайловыеФункции.ПолучитьПутьКРабочемуКаталогуПользователя(ИдентификаторКлиента);
				Сведения.inOwnersFolder = Ложь;
			КонецЕсли;
			Если Каталог = Неопределено Тогда
				Каталог = "";
			КонецЕсли;
			Сведения.folder = Каталог;
			Сведения.maxFolderSize = ПерсональныеНастройки.МаксимальныйРазмерЛокальногоКэшаФайлов;
			
			Если Выборка.Путь = NULL Тогда
				// Файла нет на диске.
				Сведения.saved = Ложь;
				
			Иначе
				
				ФайлСВизуализациейЭП = Неопределено;
				Если Выборка.НаЧтение
						И РеквизитыФайла <> Неопределено
						И РаботаСФайламиКлиентСервер.ЭтоРасширениеДляАвтовизуализации(РеквизитыФайла.ТекущаяВерсияРасширение)
						И ПолучитьФункциональнуюОпцию("АвтовизуализацияЭП") Тогда
					ФайлСВизуализациейЭП = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьСлужебныйФайл(
						РеквизитыФайла.ВладелецФайла,
						Файл,
						Перечисления.ОтношенияСлужебныхФайлов.ВизуализацияЭП);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ФайлСВизуализациейЭП) Тогда
					// Файл с визуализацией штампа ЭП всегда берем из базы.
					Сведения.saved = Ложь;
					
				Иначе
					// Файл есть на диске.
					Сведения.saved = Истина;
					Сведения.saveDate = Выборка.ДатаПомещенияВРабочийКаталог;
					Сведения.readOnly = Выборка.НаЧтение;
					Сведения.modificationDateUniversal = Выборка.ДатаМодификацииУниверсальная;
					Сведения.size = Выборка.Размер;
					Если Выборка.ВРабочемКаталогеВладельца Тогда
						Сведения.inOwnersFolder = Истина;
						Сведения.fullPath = Выборка.Путь;
					Иначе
						// Добавим к пути имя каталога.
						Сведения.inOwnersFolder = Ложь;
						Сведения.fullPath = Каталог + Выборка.Путь;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Ответ.info = Сведения;
			Ответ.objectId = ОбработкаЗапросовXDTO.СоздатьObjectID(
				Строка(Выборка.Версия.УникальныйИдентификатор()),
				"DMFileVersion");
			
		Иначе
			// Указанная версия не существует (например, удалена) или недоступна по RLS.
			ВызватьИсключение НСтр("ru = 'Версия не найдена'");
			
		КонецЕсли;
		
		Возврат Ответ;
		
	Исключение
		
		Возврат ОбработкаЗапросовXDTO.ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при получении сведений о редактировании файла'"),
			ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

// Получает массив структур, описывающих подпапки указанной папки первого уровня.
//
// Параметры:
//   ИдентификаторКорневойПапки - Строка - идентификатор родительской папки.
//
// Возвращаемое значение:
//   Массив из Структура:
//     * Идентификатор - Строка - идентификатор подпапки
//     * Наименование - Строка - наименование подпапки
//
Функция ПолучитьСписокПапок(ИдентификаторКорневойПапки) Экспорт
	
	СсылкаПапки = Справочники.ПапкиФайлов.ПустаяСсылка();
	
	Если Не ПустаяСтрока(ИдентификаторКорневойПапки) Тогда
		УникальныйИдентификатор = Новый УникальныйИдентификатор(ИдентификаторКорневойПапки);
		СсылкаПапки = Справочники.ПапкиФайлов.ПолучитьСсылку(УникальныйИдентификатор);
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПапкиФайлов.Ссылка КАК Ссылка,
		|	ПапкиФайлов.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ПапкиФайлов КАК ПапкиФайлов
		|ГДЕ
		|	ПапкиФайлов.Родитель = &Ссылка
		|	И ПапкиФайлов.ПометкаУдаления = &ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование");
	Запрос.УстановитьПараметр("Ссылка", СсылкаПапки);
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	
	МассивПапок = Новый Массив;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураПапки = Новый Структура("УникальныйИдентификатор, Наименование",
			Выборка.Ссылка.УникальныйИдентификатор(), Выборка.Наименование);
		МассивПапок.Добавить(СтруктураПапки);
	КонецЦикла;
	
	Возврат МассивПапок;
	
КонецФункции

// Получает список файлов в папке-владельце (внешний объект).
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMGetFileListRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetFileListResponse или DMError.
//
Функция ПолучитьСписокФайлов(Сообщение) Экспорт
	
	Попытка
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGetFileListResponse");
		
		Для Каждого ВнешнийОбъект Из Сообщение.externalObjects Цикл
			
			ТаблицаФайлов = Новый ТаблицаЗначений;
			ТаблицаФайлов.Колонки.Добавить("Имя");
			ТаблицаФайлов.Колонки.Добавить("Ссылка");
			
			МассивОбъектовДО = РегистрыСведений.СвязиОбъектовИнтегрированныхСистем.ПолучитьОбъектыДОПоВнешнемуОбъекту(
				ВнешнийОбъект.id,
				ВнешнийОбъект.type);
			
			Для Каждого Ссылка Из МассивОбъектовДО Цикл
				НоваяСтрока = ТаблицаФайлов.Добавить();
				НоваяСтрока.Ссылка = Ссылка;
				НоваяСтрока.Имя = Строка(Ссылка);
			КонецЦикла;
			
			// Сортировка по имени.
			ТаблицаФайлов.Сортировать("Имя Возр");
			
			Для Каждого Строка Из ТаблицаФайлов Цикл
				Если ТипЗнч(Строка.Ссылка) = Тип("СправочникСсылка.Файлы") Тогда
					Ответ.files.Добавить(
						ОбработкаЗапросовXDTO.ПолучитьОбъектXDTOПоСуществующимДаннымДО(
							Строка.Ссылка.ПолучитьОбъект(),
							Сообщение.columnSet));
				КонецЕсли;
			КонецЦикла;
		
		КонецЦикла;
		
		Возврат Ответ;
		
	Исключение
		
		Возврат ОбработкаЗапросовXDTO.ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при получении списка файлов'"),
			ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

// Получает список файлов владельца по запросу DMGetFileListByOwnerRequest.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMGetFileListByOwnerRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetFileListByOwnerResponse или DMError
//
Функция ПолучитьСписокФайловПоВладельцу(Сообщение) Экспорт
	
	Попытка
		
		Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMGetFileListByOwnerResponse");
		
		Если ОбработкаЗапросовXDTO.СвойствоУстановлено(Сообщение, "ignoreDeletionMark") Тогда
			ВключатьПомеченныеНаУдаление = Сообщение.ignoreDeletionMark;
		Иначе
			ВключатьПомеченныеНаУдаление = Ложь;
		КонецЕсли;
		
		Если ОбработкаЗапросовXDTO.СвойствоУстановлено(Сообщение, "htmlView") Тогда
			ПолучатьПредпросмотр = Сообщение.htmlView;
		Иначе
			ПолучатьПредпросмотр = Ложь;
		КонецЕсли;
		
		Для Каждого Владелец Из Сообщение.owners Цикл
			
			ВладелецФайла = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Владелец.objectId);
			Если Не ЗначениеЗаполнено(ВладелецФайла) Тогда
				ВызватьИсключение НСтр("ru = 'Объект не найден'");
			КонецЕсли;
			
			ЗаполнитьСписокФайлов(
				Ответ,
				ВладелецФайла,
				Сообщение.columnSet,
				ВключатьПомеченныеНаУдаление,
				ПолучатьПредпросмотр);
			
		КонецЦикла;
		
		Возврат Ответ;
		
	Исключение
		
		Возврат ОбработкаЗапросовXDTO.ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при получении списка файлов по владельцу'"),
			ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

// Создает файл из шаблона.
//
// Параметры:
//   Владелец - ОпределяемыйТип.ВладелецФайлов - владелец создаваемого файла.
//   ШаблонФайла - СправочникСсылка.Файлы - шаблон-основание для создания файла.
//   ИмяБезРасширения - Строка - наименование файла.
//   РольФайла - СправочникСсылка.РолиФайлов - роль файла.
//
// Возвращаемое значение:
//   СправочникСсылка.Файлы - созданный файл.
//   ОбъектXDTO - объект XDTO типа DMError. Если при создании файла произошла ошибка.
//
Функция СоздатьФайлИзШаблона(Владелец, ШаблонФайла, ИмяБезРасширения, РольФайла = Неопределено) Экспорт
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	
	ЗаполнитьРольВСведенияхОФайле(СведенияОФайле, РольФайла, Владелец);
	
	СведенияОФайле.ИмяБезРасширения = ИмяБезРасширения;
	СведенияОФайле.ХранитьВерсии = Истина;
	
	Приемник = РаботаСФайламиВызовСервера.СоздатьФайл(Владелец, СведенияОФайле);
	
	РегистрыСведений.ФайлыСозданныеПоШаблону.ЗанестиИнформациюОФайле(Приемник, Истина);
	
	Если Не ШаблонФайла.ТекущаяВерсия.Пустая() Тогда
		
		ВерсияИсточник = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ШаблонФайла.ТекущаяВерсия,
			"ТипХраненияФайла, Размер, Расширение, ДатаМодификацииФайла, ДатаМодификацииУниверсальная");
		
		ХранилищеФайла = Неопределено;
		Если ВерсияИсточник.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			ХранилищеФайла = РаботаСФайламиВызовСервера.ПолучитьХранилищеФайлаИзИнформационнойБазы(
				ШаблонФайла.ТекущаяВерсия);
		КонецЕсли;
		
		ХранилищеТекста = РегистрыСведений.ТекстыВерсийФайлов.ПолучитьТекстХранилище(ШаблонФайла.ТекущаяВерсия);
		
		СведенияОФайле.Размер = ВерсияИсточник.Размер;
		СведенияОФайле.РасширениеБезТочки = ВерсияИсточник.Расширение;
		СведенияОФайле.АдресВременногоХранилищаФайла = ХранилищеФайла;
		СведенияОФайле.АдресВременногоХранилищаТекста = ХранилищеТекста;
		СведенияОФайле.СсылкаНаВерсиюИсточник = ШаблонФайла.ТекущаяВерсия;
		СведенияОФайле.ВремяИзменения = ВерсияИсточник.ДатаМодификацииФайла;
		СведенияОФайле.ВремяИзмененияУниверсальное = ВерсияИсточник.ДатаМодификацииУниверсальная;
		
		Версия = РаботаСФайламиВызовСервера.СоздатьВерсию(Приемник, СведенияОФайле);
		
		РаботаСФайламиВызовСервера.ОбновитьВерсиюВФайле(Приемник, Версия, ХранилищеТекста);
		РаботаСФайламиВызовСервера.ЗаписатьОригинальноеИмяФайла(Приемник, ИмяБезРасширения);
		
		ПриемникОбъект = Приемник.ПолучитьОбъект();
		ПриемникОбъект.ШаблонОснованиеДляСоздания = ШаблонФайла;
		ПриемникОбъект.Записать();
		
		Если ЗначениеЗаполнено(РольФайла) Тогда
			РегистрыСведений.РолиФайловДокументов.ЗаписатьРольФайла(Приемник, РольФайла);
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтозаполнениеФайлов")
				И СтрНайти(".docx|.doc|.odt", "." + НРег(ПриемникОбъект.ТекущаяВерсияРасширение)) <> 0 Тогда
			
			АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьПоляФайлаДаннымиВладельца(
				Ложь,
				Приемник,
				Истина,,
				Владелец);
			
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды")
				И СтрНайти(".docx|.doc|.odt", "." + НРег(ПриемникОбъект.ТекущаяВерсияРасширение)) <> 0 Тогда
			
			ДанныеОШтрихкоде = ШтрихкодированиеСервер.ПолучитьДанныеДляВставкиШтрихкодаВОбъект(Приемник);
			
			Если ДанныеОШтрихкоде <> Неопределено И ДанныеОШтрихкоде.Свойство("ДвоичныеДанныеФайла") Тогда
				Попытка
					ШтрихкодированиеКлиентСервер.ВставитьШтрихкодВместоТэга(
						Приемник,
						"ВставитьИзображениеШтрихкода",
						Ложь,
						ДанныеОШтрихкоде.ДвоичныеДанныеИзображения,
						ДанныеОШтрихкоде.ДвоичныеДанныеФайла,
						ДанныеОШтрихкоде.Расширение,
						ДанныеОШтрихкоде.ФайлРедактируется,
						ДанныеОШтрихкоде.ИзменениеФайловMSWordТолькоНаСервере,
						ДанныеОШтрихкоде.НастройкиШтрихкода.ВысотаШК);
				Исключение
					Возврат ОбработкаЗапросовXDTO.ОписаниеОшибкиXDTO(
						НСтр("ru = 'Ошибка при вставке изображения штрихкода в файл'"),
						ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Приемник;
	
КонецФункции

#КонецОбласти

#Область Файл

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   Файл - СправочникОбъект.Файлы
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMFile.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеФайла(Файл, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт
	
	ДанныеФайла = Новый Структура;
	ДанныеФайла.Вставить("editing", ЗначениеЗаполнено(Файл.Редактирует));
	ДанныеФайла.Вставить("editingUser", Файл.Редактирует);
	ДанныеФайла.Вставить("modificationDate", Файл.ТекущаяВерсияДатаМодификацииФайла);
	ДанныеФайла.Вставить("modificatedBy", Файл.ТекущаяВерсияАвтор);
	ДанныеФайла.Вставить("signed", Файл.ПодписанЭП);
	ДанныеФайла.Вставить("size", Файл.ТекущаяВерсияРазмер);
	ДанныеФайла.Вставить("creationDate", Файл.ДатаСоздания);
	ДанныеФайла.Вставить("author", Файл.Автор);
	ДанныеФайла.Вставить("extension", Файл.ТекущаяВерсияРасширение);
	ДанныеФайла.Вставить("description", Файл.Описание);
	ДанныеФайла.Вставить("encrypted", Файл.Зашифрован);
	ДанныеФайла.Вставить("lockDate", Файл.ДатаЗаема);
	ДанныеФайла.Вставить("activeVersion", Файл.ТекущаяВерсия);
	ДанныеФайла.Вставить("deletionMark", Файл.ПометкаУдаления);
	ДанныеФайла.Вставить("template", Файл.ШаблонОснованиеДляСоздания);
	ДанныеФайла.Вставить("storeVersions", Файл.ХранитьВерсии);
	ДанныеФайла.Вставить("code", Файл.Код);
	ДанныеФайла.Вставить("project", Файл.Проект);
	
	// Набор колонок.
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда
		Для Каждого ИмяКолонки Из НаборКолонок Цикл
			Колонки.Добавить(НРег(ИмяКолонки));
		КонецЦикла;
	КонецЕсли;
	ПолучатьВсеКолонки = (Колонки.Количество() = 0);
	
	ПолучатьHTMLПредпросмотра = ПолучатьВсеКолонки Или (Колонки.Найти(НРег("htmlView")) <> Неопределено);
	ПолучатьДвоичныеДанные = ПолучатьВсеКолонки Или (Колонки.Найти(НРег("binaryData")) <> Неопределено);
	ПолучатьДанныеТекущейВерсии = ПолучатьВсеКолонки Или (Колонки.Найти(НРег("activeVersion")) <> Неопределено);
	ПолучатьРоль = ПолучатьВсеКолонки Или (Колонки.Найти(НРег("role")) <> Неопределено);
	ПолучатьВладельца = ПолучатьВсеКолонки Или (Колонки.Найти(НРег("owner")) <> Неопределено);
	ПолучатьПодписи = ПолучатьВсеКолонки Или (Колонки.Найти(НРег("signatures")) <> Неопределено);
	ПолучатьСтатусЭП = ПолучатьВсеКолонки Или (Колонки.Найти(НРег("signatureStatus")) <> Неопределено);
	ПолучатьСтатусВзаимодействия = ПолучатьВсеКолонки Или (Колонки.Найти(НРег("interactionStatus")) <> Неопределено);
	ПолучатьЗадачиПоПриложению = ПолучатьВсеКолонки Или (Колонки.Найти(НРег("tasksDescription")) <> Неопределено);
	ПолучатьДопРеквизиты = ПолучатьВсеКолонки Или (Колонки.Найти(НРег("additionalProperties")) <> Неопределено);
	ПолучатьЯвляетсяОригиналом = ПолучатьВсеКолонки Или (Колонки.Найти(НРег("scannedOriginal")) <> Неопределено);
	ПолучатьЯвляетсяОригиналомВидимость = ПолучатьВсеКолонки
		Или (Колонки.Найти(НРег("scannedOriginalEnabled")) <> Неопределено);
	ПолучатьЯвляетсяОригиналомТолькоПросмотр = ПолучатьВсеКолонки
		Или (Колонки.Найти(НРег("scannedOriginalReadOnly")) <> Неопределено);
	ПолучатьРеквизитыВерсии = ПолучатьВсеКолонки Или ПолучатьДвоичныеДанные
		Или (Колонки.Найти(НРег("modificationDateUniversal")) <> Неопределено);
	
	Если ПолучатьРеквизитыВерсии Тогда
		РеквизитыВерсии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Файл.ТекущаяВерсия,
			"ДатаМодификацииУниверсальная, ТипХраненияФайла");
		ДанныеФайла.Вставить("modificationDateUniversal", РеквизитыВерсии.ДатаМодификацииУниверсальная);
	КонецЕсли;
	
	// Заполним подписи.
	Если ПолучатьПодписи Тогда
		ОбработкаЗапросовXDTO.ПолучитьСписокПодписей(Файл.ТекущаяВерсия, ОбъектXDTO);
	КонецЕсли;
	
	// Заполним статусы.
	Если ПолучатьСтатусЭП Или ПолучатьСтатусВзаимодействия Тогда
		КешИнформации = РегистрыСведений.КешИнформацииОбОбъектах.ПолучитьПризнаки(
			Файл.Ссылка,
			"СтатусЭП, ЕстьЗадачи");
		Если ПолучатьСтатусЭП Тогда
			СтатусЭПФайла = ОбзорДокумента.СтатусЭПФайла(Файл, КешИнформации);
			ДанныеФайла.Вставить("signatureStatus", СтатусЭПФайла.СтатусЭП);
			ДанныеФайла.Вставить("signatureStatusDescription", СтатусЭПФайла.Подсказка);
		КонецЕсли;
		Если ПолучатьСтатусВзаимодействия Тогда
			Если КешИнформации.ЕстьЗадачи Тогда
				СтатусВзаимодействия = 1;
				СтатусВзаимодействияПодсказка = НСтр("ru = 'По файлу выполняются задачи'");
			Иначе
				СтатусВзаимодействия = 0;
				СтатусВзаимодействияПодсказка = НСтр("ru = 'По файлу нет выполняющихся задач'");
			КонецЕсли;
			ДанныеФайла.Вставить("interactionStatus", СтатусВзаимодействия);
			ДанныеФайла.Вставить("interactionStatusDescription", СтатусВзаимодействияПодсказка);
		КонецЕсли;
	КонецЕсли;
	
	// Получение сведений о файле.
	Если ПолучатьЯвляетсяОригиналом Тогда
		ДанныеФайла.Вставить("scannedOriginal", Делопроизводство.ФайлЯвляетсяОригиналом(Файл.Ссылка));
	КонецЕсли;
	
	Если ПолучатьЯвляетсяОригиналомВидимость Или ПолучатьЯвляетсяОригиналомТолькоПросмотр Тогда
		ЯвляетсяОригиналомВидимость = Ложь;
		ЯвляетсяОригиналомТолькоПросмотр = Ложь;
		
		Если ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов")
				И ДелопроизводствоКлиентСервер.ЭтоДокумент(Файл.ВладелецФайла) Тогда
			
			ЯвляетсяОригиналомВидимость = Истина;
			
			// Доступность переключателя "Это оригинал".
			Если ОбработкаЗапросовXDTOДокументы.ОграничиватьДоступностьПолейДокументаПоСостоянию() Тогда
				ДоступныеПоля = Новый Массив;
				НедоступныеПоля = Новый Массив;
			
				Делопроизводство.ПолучитьДоступныеИНедоступныеПоСостояниюПоля(
					Файл.ВладелецФайла.ПолучитьОбъект(),
					ДоступныеПоля,
					НедоступныеПоля);
				
				ДоступностьПоляОригинал = (ДоступныеПоля.Найти("ДобавлениеОригиналов") <> Неопределено)
					И (ДоступныеПоля.Найти("ДобавлениеФайлов") <> Неопределено);
				
				ЯвляетсяОригиналомТолькоПросмотр = Не ДоступностьПоляОригинал;
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеФайла.Вставить("scannedOriginalEnabled", ЯвляетсяОригиналомВидимость);
		ДанныеФайла.Вставить("scannedOriginalReadOnly", ЯвляетсяОригиналомТолькоПросмотр);
	КонецЕсли;
	
	// Заполнение роли файла.
	Если ПолучатьРоль И ДелопроизводствоКлиентСервер.ЭтоДокумент(Файл.ВладелецФайла) Тогда
		МассивРолей = РегистрыСведений.РолиФайловДокументов.ПолучитьРолиФайла(Файл.Ссылка);
		Если МассивРолей.Количество() > 0 Тогда
			ДанныеФайла.Вставить("role", МассивРолей[0]);
		КонецЕсли;
	КонецЕсли;
	
	// Заголовок команды задачи по приложению.
	Если ПолучатьЗадачиПоПриложению Тогда
		ДанныеФайла.Вставить(
			"tasksDescription",
			РаботаСЗадачами.ЗаголовокКомандыЗадачиПоПриложению(Файл.Ссылка));
	КонецЕсли;
	
	// Получение файла.
	Если ПолучатьДвоичныеДанные Тогда
		ДобавитьДвоичныеДанныеФайла(
			ДанныеФайла,
			Файл.ТекущаяВерсия,
			РеквизитыВерсии.ТипХраненияФайла,
			Истина,
			Колонки,
			Файл.Ссылка);
	КонецЕсли;
	
	// Заполним дополнительные реквизиты.
	Если ПолучатьДопРеквизиты Тогда
		ОбработкаЗапросовXDTO.ПолучитьНаборДополнительныхРеквизитовОбъектаДО(Файл, ОбъектXDTO);
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(Файл, ДанныеФайла, ОбъектXDTO, НаборКолонок);
	
	ОбъектXDTO.name = Файл.ПолноеНаименование;
	
	// Владелец файла.
	Если ПолучатьВладельца И ЗначениеЗаполнено(Файл.ВладелецФайла) Тогда
		ОбъектXDTO.owner = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObject");
		ОбъектXDTO.owner.name = Строка(Файл.ВладелецФайла);
		ИмяТипаВладельца = ОбработкаЗапросовXDTO.ПолучитьИмяТипаСсылки(Файл.ВладелецФайла, Ложь);
		Если ЗначениеЗаполнено(ИмяТипаВладельца) Тогда
			ОбъектXDTO.owner.objectID = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Файл.ВладелецФайла);
		Иначе
			ОбъектXDTO.owner.objectID = ОбработкаЗапросовXDTO.СоздатьObjectID("", "");
		КонецЕсли;
	КонецЕсли;
	
	// Предпросмотр файла, если он требуется.
	Если ПолучатьHTMLПредпросмотра Тогда
		ОбъектXDTO.htmlViewTruncated = Ложь;
		ОбъектXDTO.htmlView = ОбзорФайловВызовСервера.ПолучитьHTMLПредпросмотра(
			Файл.Ссылка,
			ОбъектXDTO.htmlViewTruncated,,
			Истина);
	КонецЕсли;
	
	Если ПолучатьДанныеТекущейВерсии И ЗначениеЗаполнено(Файл.ТекущаяВерсия) Тогда
		ВерсияФайла = Файл.ТекущаяВерсия.ПолучитьОбъект();
		НаборКолонокВерсии = Новый Массив;
		НаборКолонокВерсии.Добавить("number");
		НаборКолонокВерсии.Добавить("author");
		НаборКолонокВерсии.Добавить("creationDate");
		НаборКолонокВерсии.Добавить("modificationDate");
		НаборКолонокВерсии.Добавить("modificationDateUniversal");
		НаборКолонокВерсии.Добавить("size");
		ОбработкаЗапросовXDTO.ПолучитьДанныеОбъектаДО(
			ВерсияФайла,
			ОбъектXDTO.activeVersion,
			"DMFileVersion",
			НаборКолонокВерсии);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   Файл - СправочникОбъект.Файлы - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMFile. Источник данных заполнения.
//
Процедура ЗаполнитьДанныеФайла(Файл, ОбъектXDTO) Экспорт
	
	Если ЗначениеЗаполнено(Файл.Ссылка) Тогда
		ФайлСсылка = Файл.Ссылка;
	Иначе
		ФайлСсылка = Файл.ПолучитьСсылкуНового();
		Если Не ЗначениеЗаполнено(ФайлСсылка) Тогда
			ФайлСсылка = Справочники.Файлы.ПолучитьСсылку();
			Файл.УстановитьСсылкуНового(ФайлСсылка);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьДвоичныеДанныеФайла(ФайлСсылка, ОбъектXDTO);
	УстановитьПризнакЯвляетсяОригиналом(ФайлСсылка, Файл.ВладелецФайла, ОбъектXDTO);
	
	// Изменение наименования и описания.
	НаименованиеДоЗаписи = Файл.Наименование;
	ПолноеНаименованиеДоЗаписи = Файл.ПолноеНаименование;
	ОписаниеДоЗаписи = Файл.Описание;
	
	Если ПолноеНаименованиеДоЗаписи <> ОбъектXDTO.name И ЗначениеЗаполнено(ОбъектXDTO.name) Тогда
		Файл.Наименование = ОбъектXDTO.name;
		Файл.ПолноеНаименование = ОбъектXDTO.name;
		
		// Возможно, требуется изменить имя файла в томе не диске.
		Если НаименованиеДоЗаписи <> Файл.Наименование Тогда
			ТипХраненияФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Файл.ТекущаяВерсия,
				"ТипХраненияФайла");
			Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
				РаботаСФайламиВызовСервера.ПереименоватьФайлВерсииНаДиске(
					Файл.ТекущаяВерсия,
					НаименованиеДоЗаписи,
					Файл.Наименование);
				Файл.Прочитать();
				Файл.Наименование = ОбъектXDTO.name;
				Файл.ПолноеНаименование = ОбъектXDTO.name;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "description")
			И ОписаниеДоЗаписи <> ОбъектXDTO.description Тогда
		Файл.Описание = ОбъектXDTO.description;
	КонецЕсли;
	
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "activeVersion") Тогда
		// Возможно, необходима смена текущей версии.
		Если ЗначениеЗаполнено(Файл.Редактирует) Тогда
			ВызватьИсключение НСтр("ru = 'Смена активной версии разрешена только для не занятых файлов!'");
		КонецЕсли;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(
			Файл.ТекущаяВерсия,
			ОбъектXDTO,
			"activeVersion");
	КонецЕсли;
	
	Если ОбработкаЗапросовXDTO.ДополнительныеРеквизитыИзменены(ФайлСсылка, ОбъектXDTO) Тогда
		ОбработкаЗапросовXDTO.ЗаписатьДополнительныеРеквизиты(Файл, ОбъектXDTO);
	КонецЕсли;
	
КонецПроцедуры

// Ищет подходящий файл по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMFile.
//   ВладелецФайла - СправочникСсылка - владелец объекта, который требуется найти.
//
// Возвращаемое значение:
//   СправочникСсылка.Файлы - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиФайл(ОбъектXDTO, ВладелецФайла = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	ПолноеНаименование = Неопределено;
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ПолноеНаименование, ОбъектXDTO, "name");
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "owner") Тогда
		ВладелецФайла = ОбработкаЗапросовXDTO.НайтиВнешнийОбъект(ОбъектXDTO.owner);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолноеНаименование) Тогда
		Запрос = Новый Запрос;
		ТекстЗапроса = Новый Массив;
		ТекстЗапроса.Добавить(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Файлы.Ссылка
			|ИЗ
			|	Справочник.Файлы КАК Файлы
			|ГДЕ
			|	Файлы.ПолноеНаименование = &ПолноеНаименование");
		Запрос.УстановитьПараметр("ПолноеНаименование", ПолноеНаименование);
		Если ЗначениеЗаполнено(ВладелецФайла) Тогда
			ТекстЗапроса.Добавить("И Файлы.ВладелецФайла = &ВладелецФайла");
			Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
		КонецЕсли;
		Запрос.Текст = СтрСоединить(ТекстЗапроса, Символы.ПС);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет дополнительную обработку Файла после записи.
//
// Параметры:
//   ОбъектДО - СправочникОбъект.Файлы - объект Документооборота, источник данных.
//   ИсточникДанных - Структура - источник данных:
//     * ТипИсточника - Строка - принимает значения "ОбъектXDTO" или "ВходящиеДанные", в зависимости от типа источника.
//     * ОбъектXDTO - ОбъектXDTO - объект XDTO, потомок DMObject. Источник данных.
//     * ТипXDTOОбъекта - Строка - имя типа XDTO объекта, из которого требуется заполнить объект ДО.
//     * ВходящиеДанные - ОбъектXDTO - объект XDTO типа DMIncomingData.
//     * ПравилоЗагрузки - СправочникОбъект.ПравилаЗагрузкиДанныхВДО - правило загрузки.
//     * Обновление - Булево - заполнять только реквизиты с Обновлять = Истина.
//
Процедура ОбработатьФайлПослеЗаписи(ОбъектДО, ИсточникДанных) Экспорт
	
	// Смена активной версии требует записи самой версии, чтобы отработали все подписки.
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ИсточникДанных.ОбъектXDTO, "activeVersion") Тогда
		ВерсияОбъект = ОбъектДО.ТекущаяВерсия.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ОбъектДО.ТекущаяВерсия);
		ВерсияОбъект.Записать();
		РазблокироватьДанныеДляРедактирования(ОбъектДО.ТекущаяВерсия);
	КонецЕсли;
	
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ИсточникДанных.ОбъектXDTO, "role") Тогда
		ТекущаяРоль = Неопределено;
		МассивРолей = РегистрыСведений.РолиФайловДокументов.ПолучитьРолиФайла(ОбъектДО.Ссылка);
		Если МассивРолей.Количество() > 0 Тогда
			ТекущаяРоль = МассивРолей[0];
		КонецЕсли;
		НоваяРоль = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(НоваяРоль, ИсточникДанных.ОбъектXDTO, "role");
		Если НоваяРоль <> ТекущаяРоль Тогда
			РаботаСФайламиВызовСервера.ЗаменитьРольФайла(ОбъектДО.Ссылка, НоваяРоль);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВерсияФайла

// Заполняет объект XDTO по данным объекта Документооборота.
//
// Параметры:
//   ВерсияФайла - СправочникОбъект.ВерсииФайлов
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMFileVersion.
//   НаборКолонок - Массив из Строка - массив имен реквизитов к заполнению.
//                - Неопределено - требование заполнить все реквизиты.
//
Процедура ПолучитьДанныеВерсииФайла(ВерсияФайла, ОбъектXDTO, НаборКолонок = Неопределено) Экспорт
	
	ДанныеВерсииФайла = Новый Структура;
	ДанныеВерсииФайла.Вставить("signed", ВерсияФайла.ПодписанЭП);
	ДанныеВерсииФайла.Вставить("extension", ВерсияФайла.Расширение);
	ДанныеВерсииФайла.Вставить("size", ВерсияФайла.Размер);
	ДанныеВерсииФайла.Вставить("creationDate", ВерсияФайла.ДатаСоздания);
	ДанныеВерсииФайла.Вставить("modificationDate", ВерсияФайла.ДатаМодификацииФайла);
	ДанныеВерсииФайла.Вставить("modificationDateUniversal", ВерсияФайла.ДатаМодификацииУниверсальная);
	ДанныеВерсииФайла.Вставить("encrypted", ВерсияФайла.Зашифрован);
	ДанныеВерсииФайла.Вставить("owner", ВерсияФайла.Владелец);
	ДанныеВерсииФайла.Вставить("author", ВерсияФайла.Автор);
	ДанныеВерсииФайла.Вставить("number", ВерсияФайла.НомерВерсии);
	ДанныеВерсииФайла.Вставить("deletionMark", ВерсияФайла.ПометкаУдаления);
	ДанныеВерсииФайла.Вставить("comment", ВерсияФайла.Комментарий);
	
	// Набор колонок.
	Колонки = Новый Массив;
	Если НаборКолонок <> Неопределено Тогда
		Для Каждого ИмяКолонки Из НаборКолонок Цикл
			Колонки.Добавить(НРег(ИмяКолонки));
		КонецЦикла;
	КонецЕсли;
	ПолучатьВсеКолонки = (Колонки.Количество() = 0);
	
	ПолучатьДвоичныеДанные = ПолучатьВсеКолонки Или (Колонки.Найти(НРег("binaryData")) <> Неопределено);
	ПолучатьПодписи = ПолучатьВсеКолонки Или (Колонки.Найти(НРег("signatures")) <> Неопределено);
	
	// Заполним подписи.
	Если ПолучатьПодписи Тогда
		ОбработкаЗапросовXDTO.ПолучитьСписокПодписей(ВерсияФайла, ОбъектXDTO);
	КонецЕсли;
	
	// Получение файла.
	Если ПолучатьДвоичныеДанные Тогда
		ДобавитьДвоичныеДанныеФайла(ДанныеВерсииФайла, ВерсияФайла.Ссылка, ВерсияФайла.ТипХраненияФайла, Ложь, Колонки);
	КонецЕсли;
	
	ОбработкаЗапросовXDTO.ЗаполнитьОбъектXDTOИзДанныхОбъектаДО(
		ВерсияФайла,
		ДанныеВерсииФайла,
		ОбъектXDTO,
		НаборКолонок);
	
	ОбъектXDTO.name = ВерсияФайла.ПолноеНаименование;

КонецПроцедуры

// Заполняет объект Документооборота по данным объекта XDTO.
//
// Параметры:
//   ВерсияФайла - СправочникОбъект.ВерсииФайлов - заполняемый объект.
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMFileVersion. Источник данных заполнения.
//
Процедура ЗаполнитьДанныеВерсииФайла(ВерсияФайла, ОбъектXDTO) Экспорт
	
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ВерсияФайла.Автор, ОбъектXDTO, "author");
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ВерсияФайла.Комментарий, ОбъектXDTO, "comment");
	
КонецПроцедуры

// Ищет подходящую версию файла по объекту XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - объект XDTO типа DMFileVersion.
//   ВладелецВерсииФайла - СправочникСсылка - владелец объекта, который требуется найти.
//
// Возвращаемое значение:
//   СправочникСсылка.ВерсииФайлов - найденный объект Документооборота.
//   Неопределено - в случае, если объект Документооборота не был найден.
//
Функция НайтиВерсиюФайла(ОбъектXDTO, ВладелецВерсииФайла = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	ПолноеНаименование = Неопределено;
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ПолноеНаименование, ОбъектXDTO, "name");
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "owner") Тогда
		ВладелецВерсииФайла = ОбработкаЗапросовXDTO.НайтиВнешнийОбъект(ОбъектXDTO.owner);
	КонецЕсли;
	ДатаСоздания = Неопределено;
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "creationDate") Тогда
		ДатаСоздания = ОбъектXDTO.creationDate;
	КонецЕсли;
	ДатаМодификацииУниверсальная = Неопределено;
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "modificationDateUniversal") Тогда
		ДатаМодификацииУниверсальная = ОбъектXDTO.modificationDateUniversal;
	КонецЕсли;
	Автор = Неопределено;
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "author") Тогда
		Автор = ОбъектXDTO.author;
	КонецЕсли;
	Комментарий = Неопределено;
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ОбъектXDTO, "comment") Тогда
		Комментарий = ОбъектXDTO.comment;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолноеНаименование) Тогда
		Запрос = Новый Запрос;
		ТекстЗапроса = Новый Массив;
		ТекстЗапроса.Добавить(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ВерсииФайлов.Ссылка
			|ИЗ
			|	Справочник.ВерсииФайлов КАК ВерсииФайлов
			|ГДЕ
			|	ВерсииФайлов.ПолноеНаименование = &ПолноеНаименование");
		Запрос.УстановитьПараметр("ПолноеНаименование", ПолноеНаименование);
		Если ЗначениеЗаполнено(ВладелецВерсииФайла) Тогда
			ТекстЗапроса.Добавить("И ВерсииФайлов.Владелец = &ВладелецВерсииФайла");
			Запрос.УстановитьПараметр("ВладелецВерсииФайла", ВладелецВерсииФайла);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДатаСоздания) Тогда
			ТекстЗапроса.Добавить("И ВерсииФайлов.ДатаСоздания = &ДатаСоздания");
			Запрос.УстановитьПараметр("ДатаСоздания", ДатаСоздания);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДатаМодификацииУниверсальная) Тогда
			ТекстЗапроса.Добавить("И ВерсииФайлов.ДатаМодификацииУниверсальная = &ДатаМодификацииУниверсальная");
			Запрос.УстановитьПараметр("ДатаМодификацииУниверсальная", ДатаМодификацииУниверсальная);
		КонецЕсли;
		Если ЗначениеЗаполнено(Автор) Тогда
			ТекстЗапроса.Добавить("И ВерсииФайлов.Автор = &Автор");
			Запрос.УстановитьПараметр("Автор", Автор);
		КонецЕсли;
		Если ЗначениеЗаполнено(Комментарий) Тогда
			ТекстЗапроса.Добавить("И ВерсииФайлов.Комментарий = &Комментарий");
			Запрос.УстановитьПараметр("Комментарий", Комментарий);
		КонецЕсли;
		ТекстЗапроса.Добавить("УПОРЯДОЧИТЬ ПО ДатаМодификацииУниверсальная УБЫВ");
		Запрос.Текст = СтрСоединить(ТекстЗапроса, Символы.ПС);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет в документ файл по двоичным данным из объекта XDTO.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMAddFileRequest с заполненным file.binaryData.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMAddFileResponse или DMError.
//
Функция ДобавитьФайлВДокументИзДвоичныхДанных(Сообщение)
	
	Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMAddFileResponse");
	
	ВладелецСсылка = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.owner.objectId);
	ПроверитьВозможностьДобавленияФайла(ВладелецСсылка, Сообщение.file.extension, Сообщение.file.scannedOriginal);
	
	// При интерактивном добавлении печатной формы может понадобиться найти существующий файл по имени
	// без учета расширения и создать новую версию вместо безусловного создания нового файла.
	ФайлСсылка = Неопределено;
	Если Сообщение.Установлено("tryToUpdate") И Сообщение.tryToUpdate Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Ссылка
			|ИЗ
			|	Справочник.Файлы
			|ГДЕ
			|	ВладелецФайла = &ВладелецФайла
			|	И НЕ ПометкаУдаления
			|	И ПолноеНаименование = &ПолноеНаименование
			|	И ХранитьВерсии");
		Запрос.УстановитьПараметр("ВладелецФайла", ВладелецСсылка);
		Запрос.УстановитьПараметр("ПолноеНаименование", Сообщение.file.name);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ФайлСсылка = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Если ФайлСсылка = Неопределено Тогда
		
		// Создадим новый файл.
		СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
		СведенияОФайле.АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(Сообщение.file.binaryData);
		СведенияОФайле.ВремяИзменения = ?(ЗначениеЗаполнено(Сообщение.file.modificationDate),
			Сообщение.file.modificationDate,
			ТекущаяДатаСеанса());
		СведенияОФайле.ВремяИзмененияУниверсальное = ?(ЗначениеЗаполнено(Сообщение.file.modificationDateUniversal),
			Сообщение.file.modificationDateUniversal,
			ТекущаяУниверсальнаяДата());
		СведенияОФайле.Размер = Сообщение.file.size;
		СведенияОФайле.ИмяБезРасширения = Сообщение.file.name;
		СведенияОФайле.РасширениеБезТочки = Сообщение.file.extension;
		СведенияОФайле.Комментарий = Сообщение.file.comment;
		
		РольФайла = Неопределено;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(РольФайла, Сообщение.file, "role");
		ЗаполнитьРольВСведенияхОФайле(СведенияОФайле, РольФайла, ВладелецСсылка);
		
		Если ОбработкаЗапросовXDTO.СвойствоУстановлено(Сообщение.file, "externalObject")
				И ЗначениеЗаполнено(Сообщение.file.externalObject.ID) Тогда
			СведенияОФайле.ИдентификаторФайла = Новый УникальныйИдентификатор(Сообщение.file.externalObject.ID);
		КонецЕсли;
		
		Если ОбработкаЗапросовXDTO.СвойствоУстановлено(Сообщение.file, "text") Тогда
			СведенияОФайле.АдресВременногоХранилищаТекста = Новый ХранилищеЗначения(Сообщение.file.text);
		КонецЕсли;
		
		ФайлСсылка = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(
			ВладелецСсылка,
			СведенияОФайле);
		
	Иначе
		
		// Обновим существующий файл.
		ОбновитьДвоичныеДанныеФайла(ФайлСсылка, Сообщение.file);
		
	КонецЕсли;
	
	УстановитьПризнакЯвляетсяОригиналом(ФайлСсылка, ВладелецСсылка, Сообщение.file);
	ОбновитьОписаниеФайла(ФайлСсылка, Сообщение.file);
	ОбновитьПодписиФайла(ФайлСсылка, Сообщение.file);
	
	Ответ.file = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObject");
	Ответ.file.name = Строка(ФайлСсылка);
	Ответ.file.objectId = ОбработкаЗапросовXDTO.СоздатьObjectID(
		Строка(ФайлСсылка.УникальныйИдентификатор()),
		"DMFile");
	
	Возврат Ответ;
	
КонецФункции

// Добавляет в документ файл по файлу-шаблону.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMAddFileRequest с заполненным file.template.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMAddFileResponse или DMError.
//
Функция ДобавитьФайлВДокументИзШаблона(Сообщение)
	
	Ответ = ОбработкаЗапросовXDTO.СоздатьОбъект("DMAddFileResponse");
	
	Владелец = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.owner.objectId);
	ПроверитьВозможностьДобавленияФайла(Владелец, Сообщение.file.extension, Сообщение.file.scannedOriginal);
	
	ШаблонФайла = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.file.template.objectId);
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(Сообщение.file, "role") Тогда
		РольФайла = ОбработкаЗапросовXDTO.ПолучитьСсылкуПоObjectID(Сообщение.file.role.objectId);
	КонецЕсли;
	
	ФайлИзШаблона = СоздатьФайлИзШаблона(Владелец, ШаблонФайла, Сообщение.file.name, РольФайла);
	
	Если ОбработкаЗапросовXDTO.ПроверитьТип(ФайлИзШаблона, "DMError") Тогда
		Возврат ФайлИзШаблона;
	КонецЕсли;
	
	Ответ.file = ОбработкаЗапросовXDTO.СоздатьОбъект("DMObject");
	Ответ.file.name = Строка(ФайлИзШаблона);
	Ответ.file.objectId = ОбработкаЗапросовXDTO.СоздатьObjectID(
		Строка(ФайлИзШаблона.УникальныйИдентификатор()),
		"DMFile");
	
	Возврат Ответ;
	
КонецФункции

Процедура ДобавитьДвоичныеДанныеФайла(ДанныеФайла, ВерсияСсылка, ТипХраненияФайла, ЭтоТекущаяВерсия, Колонки,
		ФайлСсылка = Неопределено)
	
	ДанныеФайла.Вставить("binaryData", Неопределено);
	
	РаботаСФайламиВызовСервера.ЗаписатьОбращениеКВерсииФайла(ВерсияСсылка);
	
	Если ЭтоТекущаяВерсия Тогда
		
		ИспользоватьВизуализациюШтампаЭП = Истина;
		Если Колонки.Найти(НРег("withoutStampVisualization")) <> Неопределено Тогда
			ИспользоватьВизуализациюШтампаЭП = Ложь;
		КонецЕсли;
		
		ДанныеФайлаДляОткрытия = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
			ФайлСсылка,,,,,
			Не ИспользоватьВизуализациюШтампаЭП);
		Если ДанныеФайлаДляОткрытия.ВизуализацияЭПДобавлена Тогда
			РасширениеНовое = "";
			Если ДанныеФайлаДляОткрытия.Свойство("РасширениеОригинальноеБезВизуализации") Тогда
				РасширениеНовое = ДанныеФайлаДляОткрытия.РасширениеОригинальноеБезВизуализации;
			КонецЕсли;
			Если ДанныеФайлаДляОткрытия.Свойство("РасширениеОригинальное") Тогда
				РасширениеНовое = ДанныеФайлаДляОткрытия.РасширениеОригинальное;
			КонецЕсли;
			Если ЗначениеЗаполнено(РасширениеНовое)
					И НРег(РасширениеНовое) <> НРег(ДанныеФайлаДляОткрытия.Расширение) Тогда
				ИспользоватьВизуализациюШтампаЭП = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		НавигационнаяСсылка = ДанныеФайлаДляОткрытия.НавигационнаяСсылкаТекущейВерсии;
		Если ИспользоватьВизуализациюШтампаЭП И ЭтоАдресВременногоХранилища(НавигационнаяСсылка) Тогда
			ДанныеФайла.binaryData = ПолучитьИзВременногоХранилища(НавигационнаяСсылка);
		ИначеЕсли ИспользоватьВизуализациюШтампаЭП И ДанныеФайлаДляОткрытия.Свойство("СсылкаТекущейВерсии") Тогда
			ХранилищеФайла = РаботаСФайламиВызовСервера.ПолучитьХранилищеФайлаИзИнформационнойБазы(
				ДанныеФайлаДляОткрытия.СсылкаТекущейВерсии);
			ДанныеФайла.binaryData = ХранилищеФайла.Получить();
		Иначе
			ДанныеФайла.binaryData = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеВерсииФайла(ВерсияСсылка);
		КонецЕсли;
		
	Иначе
		
		ДанныеФайла.binaryData = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеВерсииФайла(ВерсияСсылка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРольВСведенияхОФайле(СведенияОФайле, РольФайла = Неопределено, ВладелецФайла = Неопределено,
		Файл = Неопределено)
	
	Если Не ЗначениеЗаполнено(РольФайла) И ЗначениеЗаполнено(Файл) Тогда
		// Если роль файла неизвестна, но файл уже существует - возьмем его текущую роль.
		МассивРолей = РегистрыСведений.РолиФайловДокументов.ПолучитьРолиФайла(Файл);
		Если МассивРолей.Количество() > 0 Тогда
			РольФайла = МассивРолей[0];
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РольФайла)
			И ЗначениеЗаполнено(ВладелецФайла)
			И ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(ВладелецФайла) Тогда
		// Если роль файла неизвестна - возьмем первую обязательную роль.
		ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецФайла, "ВидДокумента");
		Если ЗначениеЗаполнено(ВидДокумента) Тогда
			ТаблицаРолей = Делопроизводство.РолиФайловДляВидаДокументов(ВидДокумента);
			Для Каждого Строка Из ТаблицаРолей Цикл
				РольФайла = Строка.Роль;
				Если Строка.Обязательная Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РольФайла) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВладелецФайла) Тогда
		РаботаСФайламиВызовСервера.ПроверитьВозможностьДобавленияФайлаВРоль(ВладелецФайла, РольФайла);
	КонецЕсли;
	
	СведенияОФайле.РольФайла = РольФайла;
	
КонецПроцедуры

// Обновляет файл Документооборота двоичными или текстовыми данными из объекта XDTO.
//
// Параметры:
//   ФайлДО - СправочникСсылка.Файлы - обновляемый файл.
//   ФайлXDTO - ОбъектXDTO - объект XDTO типа DMFile. Источник данных заполнения.
//
Процедура ОбновитьДвоичныеДанныеФайла(ФайлДО, ФайлXDTO)
	
	Если Не ОбработкаЗапросовXDTO.СвойствоУстановлено(ФайлXDTO, "binaryData") Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	СведенияОФайле.АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ФайлXDTO.binaryData);
	СведенияОФайле.ВремяИзменения = ?(ЗначениеЗаполнено(ФайлXDTO.modificationDate),
		ФайлXDTO.modificationDate,
		ТекущаяДатаСеанса());
	СведенияОФайле.ВремяИзмененияУниверсальное = ?(ЗначениеЗаполнено(ФайлXDTO.modificationDateUniversal),
		ФайлXDTO.modificationDateUniversal,
		ТекущаяУниверсальнаяДата());
	СведенияОФайле.Размер = ФайлXDTO.size;
	СведенияОФайле.ИмяБезРасширения = ?(ЗначениеЗаполнено(ФайлXDTO.name), ФайлXDTO.name, Строка(ФайлДО));
	СведенияОФайле.РасширениеБезТочки = ФайлXDTO.extension;
	СведенияОФайле.Комментарий = ФайлXDTO.comment;
	
	РольФайла = Неопределено;
	ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(РольФайла, ФайлXDTO, "role");
	ЗаполнитьРольВСведенияхОФайле(
		СведенияОФайле,
		РольФайла,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлДО, "ВладелецФайла"),
		ФайлДО);
	
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ФайлXDTO, "externalObject")
			И ЗначениеЗаполнено(ФайлXDTO.externalObject.ID) Тогда
		СведенияОФайле.ИдентификаторФайла = Новый УникальныйИдентификатор(ФайлXDTO.externalObject.ID);
	КонецЕсли;
	
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ФайлXDTO, "text") Тогда
		СведенияОФайле.АдресВременногоХранилищаТекста = Новый ХранилищеЗначения(ФайлXDTO.text);
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ФайлДО);
	
	Если ДанныеФайла.РедактируетТекущийПользователь Тогда
		
		РаботаСФайламиВызовСервера.СохранитьИзмененияФайла(
			ФайлДО,
			СведенияОФайле,
			Истина,
			"",
			"",
			Ложь);
		
	Иначе
		
		// Попытаемся захватить файл, затем сохранить изменения и освободить его.
		СтрокаОшибки = "";
		Если Не РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(ДанныеФайла, СтрокаОшибки) Тогда
			ВызватьИсключение СтрокаОшибки;
		КонецЕсли;
		
		СтрокаОшибки = "";
		ДатаЗаема = ТекущаяДатаСеанса();
		Если Не РаботаСФайламиВызовСервера.ЗанятьФайл(ДанныеФайла, СтрокаОшибки, ДатаЗаема) Тогда
			ВызватьИсключение СтрокаОшибки;
		КонецЕсли;
		
		РаботаСФайламиВызовСервера.СохранитьИзмененияИОсвободитьФайл(
			ДанныеФайла,
			СведенияОФайле,
			Истина,
			"",
			"");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьОписаниеФайла(ФайлСсылка, ФайлXDTO)
	
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ФайлXDTO, "description") Тогда
		НовоеОписаниеФайла = ФайлXDTO.description;
		Если НовоеОписаниеФайла <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка, "Описание") Тогда
			ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
			ФайлОбъект.Описание = НовоеОписаниеФайла;
			ФайлОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПодписиФайла(ФайлСсылка, ФайлXDTO)
	
	НужноОбновитьПодписи = (ОбработкаЗапросовXDTO.СвойствоУстановлено(ФайлXDTO, "signatures")
			И ФайлXDTO.signatures.Количество() > 0)
		Или (ОбработкаЗапросовXDTO.СвойствоУстановлено(ФайлXDTO, "updateSignatures")
			И ФайлXDTO.updateSignatures = Истина);
	Если НужноОбновитьПодписи Тогда
		ОбработкаЗапросовXDTO.ЗанестиИнформациюОПодписяхОбъекта(ФайлXDTO.signatures, ФайлСсылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьДобавленияФайла(Владелец, Расширение, ЯвляетсяОригиналом)
	
	ДобавлениеФайлов = Делопроизводство.ПолеДокументаДоступноПоСостоянию("ДобавлениеФайлов", Владелец);
	ДобавлениеОригиналов = Делопроизводство.ПолеДокументаДоступноПоСостоянию("ДобавлениеОригиналов", Владелец);
	
	Если ДобавлениеФайлов Тогда
		// Ограничений нет.
		Возврат;
	ИначеЕсли Не ДобавлениеФайлов И ДобавлениеОригиналов Тогда
		Если ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(Расширение) Тогда
			// Скан-копию можно добавить.
			ЯвляетсяОригиналом = Истина;
			Возврат;
		Иначе
			СписокРасширенийСканКопийОригиналов =
				ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами().СписокРасширенийСканКопийОригиналов;
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'В текущем состоянии можно добавить только скан-копию оригинала документа.
					|Выбранный файл не является скан-копией. Выберите файл с расширением: %1.'"),
				СписокРасширенийСканКопийОригиналов);
		КонецЕсли;
	ИначеЕсли Не ДобавлениеФайлов И Не ДобавлениеОригиналов Тогда
		ВызватьИсключение НСтр("ru = 'Для текущего состояния документа запрещено добавление файлов.'");
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПризнакЯвляетсяОригиналом(ФайлСсылка, ВладелецФайла, ФайлXDTO)
	
	Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ФайлXDTO, "scannedOriginal")
			И ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов")
			И ДелопроизводствоКлиентСервер.ЭтоДокумент(ВладелецФайла) Тогда
		
		ЯвляетсяОригиналомДоЗаписи = Делопроизводство.ФайлЯвляетсяОригиналом(ФайлСсылка);
		
		ЯвляетсяОригиналом = Ложь;
		ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзСвойстваXDTO(ЯвляетсяОригиналом, ФайлXDTO, "scannedOriginal");
		
		Если ЯвляетсяОригиналомДоЗаписи <> ЯвляетсяОригиналом Тогда
			Делопроизводство.СохранитьСведенияОбОригиналеФайла(
				ФайлСсылка,
				ВладелецФайла,
				ЯвляетсяОригиналом);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти