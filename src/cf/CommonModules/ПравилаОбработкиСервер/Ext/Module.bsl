////////////////////////////////////////////////////////////////////////////////
// Правила обработки сервера: содержит процедуры и функции обеспечивающие
//                                     работу с обработками объектов на сервере.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Заполняет действия в форме предмета согласно настройкам.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка документа.
//  ПараметрыВидаОбъекта - см. ДействияКлиентСервер.НовыйПараметрыВидаОбъекта
//  ПредметОбъект - ОпределяемыйТип.ПредметДействияОбъект
//
Процедура ЗаполнитьДействияВФормеПредмета(Форма, ПараметрыВидаОбъекта, ПредметОбъект = Неопределено) Экспорт
	
	УправлениеСвойствамиСлужебный.ПеренестиЗначенияИзРеквизитовФормыВОбъект(Форма);
	Если ПредметОбъект = Неопределено Тогда
		ПредметОбъект = Форма.РеквизитФормыВЗначение("Объект");
	КонецЕсли;
	
	Объект = Форма.Объект;
	Предмет = Объект.Ссылка;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
	ЗаполнитьДействия(Предмет, ПредметОбъект, Форма.Действия, ПараметрыВидаОбъекта, Форма);
	
КонецПроцедуры

// Заполняет или перезаполняет действия документа согласно настройкам.
//
// Параметры:
//  Предмет - ОпределяемыйТип.ПредметДействия - ссылка на предмет.
//
Процедура ЗаполнитьДействияПредмета(Предмет) Экспорт
	
	Объект = Предмет.ПолучитьОбъект();
	
	ТипПредмета = ТипЗнч(Предмет);
	Если ТипПредмета = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		ПараметрыВидаОбъекта = ДействияСервер.ПараметрыВидаОбъекта(Объект.ВидДокумента);
	ИначеЕсли ТипПредмета = Тип("СправочникСсылка.Мероприятия") Тогда
		ПараметрыВидаОбъекта = ДействияСервер.ПараметрыВидаОбъекта(Объект.ВидМероприятия);
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Объект %1 (%2) не поддерживает обработку.'"),
			Предмет,
			ТипПредмета);
	КонецЕсли;
	
	Дерево = ДействияСервер.ДеревоОбработки(Предмет,, ПараметрыВидаОбъекта.ВидОбъекта);
	
	ЗаполнитьДействия(Предмет, Объект, Дерево, ПараметрыВидаОбъекта);
	
КонецПроцедуры

Процедура УстановитьВидимостьКомандРезультатов(Форма, ЕстьДействияСогласования, ЕстьДействияОзнакомления, 
	ИспользоватьВизыСогласования, ЕстьДействияОзнакомленияЗапущенные)
	
	Если Форма.Элементы.Найти("ДействияПечатьЛистСогласования") <> Неопределено
		И Форма.Элементы.Найти("ПечатьЛистСогласованияСИсторией") <> Неопределено Тогда
		
		Форма.Элементы.ДействияПечатьЛистСогласования.Видимость = ЕстьДействияСогласования И ИспользоватьВизыСогласования;
		Форма.Элементы.ПечатьЛистСогласованияСИсторией.Видимость = ЕстьДействияСогласования И ИспользоватьВизыСогласования;
		
	КонецЕсли;
	
	Если Форма.Элементы.Найти("ЛистОзнакомления") <> Неопределено Тогда
		Форма.Элементы.ЛистОзнакомления.Видимость = ЕстьДействияОзнакомления;
	КонецЕсли;
	Если Форма.Элементы.Найти("ХодОзнакомления") <> Неопределено Тогда
		Форма.Элементы.ХодОзнакомления.Видимость = ЕстьДействияОзнакомленияЗапущенные;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьКомандыОтправить(Форма, КоличествоДействий)
	
	Если Форма.Элементы.Найти("ГруппаСостояниеОбработки") <> Неопределено 
		И КоличествоДействий = 0 Тогда
		Форма.Элементы.ДействияОтправить.Видимость = Ложь;
		Форма.Элементы.ДекорацияОписание.Видимость = Ложь;
		Форма.Элементы.ДекорацияСостояния.Видимость = Ложь;
		Форма.Элементы.ДействияОстановить.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет действия для предмета согласно настройкам.
//
// Параметры:
//  Предмет - ОпределяемыйТип.ПредметДействия
//  Автор 
//
Процедура ЗаполнитьДействияПрограммно(Предмет, Автор) Экспорт
	
	Объект = Предмет.ПолучитьОбъект();
	ПредметОбъект = Объект;
	
	ПараметрыОбъектаОбработки = ДействияСервер.ПараметрыОбъектаОбработки(Предмет);
	ПараметрыВидаОбъекта = ДействияСервер.ПараметрыВидаОбъекта(ПараметрыОбъектаОбработки.ВидОбъекта);
	
	ВидыДействийНастройки = НастройкиВидовДействий(Предмет, Объект, ПараметрыВидаОбъекта);
	
	ВытесняемыеУчастники = ВытесняемыеУчастникиНастроекОбработки(ВидыДействийНастройки, Предмет);
	
	Если ВидыДействийНастройки.Количество() = 0 Тогда
		Возврат; // в ПОД ничего нет - не перезаполняем.
	КонецЕсли;	
	
	Для Каждого ВидДействияНастройка Из ВидыДействийНастройки Цикл
		
		Если Не ВидДействияНастройка.НастройкаВключена Тогда
			Продолжить;
		КонецЕсли;
		
		ДействиеСсылка = Неопределено;
		
		ИмяСправочника = ДействияСервер.ИмяСправочникаПоВидуИДействию(
			ВидДействияНастройка.ВидДействия, ДействиеСсылка);
		Менеджер = Справочники[ИмяСправочника];
		
		Блокировка = Новый БлокировкаДанных;
		Если ЗначениеЗаполнено(ДействиеСсылка) Тогда
			ЭлементБлокировки = Блокировка.Добавить(ИмяСправочника);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ДействиеСсылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		КонецЕсли;
			
		НачатьТранзакцию();
		
		Попытка
				
			Если ЗначениеЗаполнено(ДействиеСсылка) Тогда
				Блокировка.Заблокировать();	
				Действие = ДействиеСсылка.ПолучитьОбъект();
			Иначе
				Действие = Менеджер.СоздатьЭлемент();
			КонецЕсли;
			
			ЗначенияЗаполнения = Новый Структура;
			ЗначенияЗаполнения.Вставить("Предмет", Предмет);
			ЗначенияЗаполнения.Вставить("ПредметОбъект", ПредметОбъект);
			ЗначенияЗаполнения.Вставить("ВидДействия", ВидДействияНастройка.ВидДействия);
			ЗначенияЗаполнения.Вставить("Настройка", ВидДействияНастройка.Настройка);
			ЗначенияЗаполнения.Вставить("ВытесняемыеУчастники", ВытесняемыеУчастники);
			ЗначенияЗаполнения.Вставить("Автор", Автор);
			Действие.Заполнить(ЗначенияЗаполнения);
			
			НастройкаОбработки = Справочники.НастройкиОбработкиВидовОбъектов.ПустаяСсылка();
			СтрНайти = ВидыДействийНастройки.НайтиСтроки(
				Новый Структура("ВидДействия", ВидДействияНастройка.ВидДействия));
			Если СтрНайти.Количество() > 0 Тогда
				НастройкаОбработки = СтрНайти[0].НастройкаОбработки;
			КонецЕсли;
			Действие.ДополнительныеСвойства.Вставить("НастройкаОбработки", НастройкаОбработки);
			
			Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
				Действие.Записать();
			КонецЕсли;
		
			ЗафиксироватьТранзакцию();
		
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Измененяет "способ подписания" у настроек подписания, при изменении формы документа у вида.
// Если "форма документа" - Бумажная, то меняет способ в значение "На бумаге",
// если "форма документа" - Электронная, то меняет способ в значение "ПЭП".
// 
// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокументов - Ссылка на вид документа, в котором поменялась форма.
//  ФормаДокумента - ПеречислениеСсылка.ВариантыФормДокументов - новая "Форма документа"
//
Процедура ИзмененитьСпособПодписанияНастроек(ВидДокумента, ФормаДокумента) Экспорт
	
	СпособыПодписания = Новый Массив();
	СпособыПодписания.Добавить(
			ПредопределенноеЗначение("Перечисление.СпособыПодписанияПредметаДействия.ПустаяСсылка"));
	НовыйСпособПодписания = Неопределено;
	Если ФормаДокумента = ПредопределенноеЗначение("Перечисление.ВариантыФормДокументов.Бумажная") Тогда
		СпособыПодписания.Добавить(
			ПредопределенноеЗначение("Перечисление.СпособыПодписанияПредметаДействия.УЭП"));
		СпособыПодписания.Добавить(
			ПредопределенноеЗначение("Перечисление.СпособыПодписанияПредметаДействия.ПЭП"));
			
		НовыйСпособПодписания = ПредопределенноеЗначение("Перечисление.СпособыПодписанияПредметаДействия.НаБумаге");
		
	ИначеЕсли ФормаДокумента = ПредопределенноеЗначение("Перечисление.ВариантыФормДокументов.Электронная") Тогда
		СпособыПодписания.Добавить(
			ПредопределенноеЗначение("Перечисление.СпособыПодписанияПредметаДействия.НаБумаге"));
		НовыйСпособПодписания = ПредопределенноеЗначение("Перечисление.СпособыПодписанияПредметаДействия.ПЭП");
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПравилаОбработкиОбъектов.Настройка КАК Настройка,
		|	ПравилаОбработкиОбъектов.ВидДействия КАК ВидДействия
		|ПОМЕСТИТЬ ПравилаОбработкиВида
		|ИЗ
		|	РегистрСведений.ПравилаОбработкиОбъектов КАК ПравилаОбработкиОбъектов
		|ГДЕ
		|	ПравилаОбработкиОбъектов.ВидОбъекта = &ВидДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиДействийПодписания.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НастройкиДействийПодписания КАК НастройкиДействийПодписания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПравилаОбработкиВида КАК ПравилаОбработкиВида
		|		ПО ПравилаОбработкиВида.Настройка = НастройкиДействийПодписания.Ссылка
		|ГДЕ
		|	НастройкиДействийПодписания.СпособПодписания В (&СпособыПодписания)");
		
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	Запрос.УстановитьПараметр("СпособыПодписания", СпособыПодписания);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Порядок = ПредопределенноеЗначение("Перечисление.ПорядокВыполненияЭтапаДействия.Последовательно");
	
	НачатьТранзакцию();
	
	Попытка
		
		Пока Выборка.Следующий() Цикл
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ИзменяемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ИзменяемыйОбъект.СпособПодписания = НовыйСпособПодписания;
			
			Если НовыйСпособПодписания = ПредопределенноеЗначение(
				"Перечисление.СпособыПодписанияПредметаДействия.НаБумаге") Тогда
				Для Каждого Этап Из ИзменяемыйОбъект.Этапы Цикл
					Если Этап.ПорядокВыполненияУчастниками <> Порядок Тогда
						Этап.ПорядокВыполненияУчастниками = Порядок;
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли НовыйСпособПодписания = ПредопределенноеЗначение(
					"Перечисление.СпособыПодписанияПредметаДействия.ПЭП")
				Или НовыйСпособПодписания = ПредопределенноеЗначение(
					"Перечисление.СпособыПодписанияПредметаДействия.УЭП") Тогда
				ДействияСервер.УдалитьОбеспечивающихПодписание(ИзменяемыйОбъект.Участники);
			КонецЕсли;
			
			ИзменяемыйОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстСообщенияОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Описание = СтрШаблон(
			НСтр("ru = 'Не удалось изменить ""Способ подписания"" в настройках подписания для вида документа: ""%1"".
			|
			|Произошла ошибка при попытке автоматически изменить ""Способ подписания""
			|после изменения поля вида документа ""Форма документа"". Следует повторить попытку,
			|устранив причины, или воспользоваться обработкой ""Групповое изменение реквизитов"".
			|Ошибка:
			|%2'"),
			ВидДокумента,
			ТекстСообщенияОбОшибке);
		
		РаботаСУведомлениями.ОтправитьУведомленияОбОшибке(Описание, ВидДокумента);
		
		ВызватьИсключение Описание;
		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает соответствие с вытесняемыми сотрудниками по информации из настроек обработки предмета
// 
// Параметры:
//  ВидыДействийНастройки - ТаблицаЗначений - Виды действий настройки. 
//  	См. РегистрыСведений.ПравилаОбработкиОбъектов.НастройкиПоКлючу
//  Предмет - ОпределяемыйТип.ПредметДействия - Предмет, для которого есть настройки обработки. Можно использовать
// 
// Возвращаемое значение:
//  Соответствие - Вытесняемые участники обработки.
//		Ключ соответствия - идентификатор участника объекта.
//		Значение соответствия - структура с полями:
//			Сотрудник - СправочникСсылка.Сотрудники
//			ВытесняющийСотрудник - СправочникСсылка.Сотрудники
//			ВытесняемоеДействие - ОпределяемыйТип.Действия
//			ВытесняющееДействие - ОпределяемыйТип.Действия
//
Функция ВытесняемыеУчастникиНастроекОбработки(ВидыДействийНастройки, Предмет = Неопределено) Экспорт
	
	Результат = Новый Соответствие;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВытеснениеУчастников") Тогда
		Возврат Результат;
	КонецЕсли;
	ИспользоватьРанги = ПолучитьФункциональнуюОпцию("ИспользоватьРанги");
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВсеУчастники = Новый ТаблицаЗначений;
	ВсеУчастники.Колонки.Добавить("ВидДействия");
	ВсеУчастники.Колонки.Добавить("Идентификатор");
	ВсеУчастники.Колонки.Добавить("Сотрудник");
	ВсеУчастники.Колонки.Добавить("Участник");
	ВсеУчастники.Колонки.Добавить("Защищенный");
	ВсеУчастники.Колонки.Добавить("ФизическоеЛицо");
	ВсеУчастники.Колонки.Добавить("Ранг");
	ВсеУчастники.Колонки.Добавить("ЭтоВытесняющийУчастник");
	
	Для Каждого ВидДействияНастройка Из ВидыДействийНастройки Цикл
		
		Если Не ВидДействияНастройка.НастройкаВключена Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВидДействияНастройка.Настройка) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВидДействияНастройка.ТипДействия <> Перечисления.ТипыДействий.Согласование
			И ВидДействияНастройка.ТипДействия <> Перечисления.ТипыДействий.Подписание
			И ВидДействияНастройка.ТипДействия <> Перечисления.ТипыДействий.Утверждение Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВидДействияНастройка.ТипДействия = Перечисления.ТипыДействий.Согласование И
			Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДействияНастройка.Настройка, "ФормироватьВизы") Тогда
			Продолжить;
		КонецЕсли;
		
		УчастникиНастройки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ВидДействияНастройка.Настройка, "Участники").Выгрузить();
		
		Для Каждого СтрокаУчастникаНастройки Из УчастникиНастройки Цикл
			
			Если СтрокаУчастникаНастройки.ФункцияУчастника =
				Перечисления.ФункцииУчастниковПодписания.ОбеспечивающийПодписание Тогда
				
				Продолжить;
			КонецЕсли;
			
			Разыменованные = ДействияСервер.ВсеРазвернутыеУчастники(СтрокаУчастникаНастройки.Участник,
				Предмет);
			
			Если ТипЗнч(СтрокаУчастникаНастройки.Участник) = Тип("СправочникСсылка.ПолныеРоли") 
					И Разыменованные.Количество() > 1 Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого Сотрудник Из Разыменованные Цикл
				
				Если ТипЗнч(Сотрудник) <> Тип("СправочникСсылка.Сотрудники") Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ВсеУчастники.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУчастникаНастройки);
				НоваяСтрока.Сотрудник = Сотрудник;
				НоваяСтрока.ЭтоВытесняющийУчастник = 
					ВидДействияНастройка.ТипДействия = Перечисления.ТипыДействий.Подписание
					Или ВидДействияНастройка.ТипДействия = Перечисления.ТипыДействий.Утверждение; 
				НоваяСтрока.ВидДействия = ВидДействияНастройка.ВидДействия;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Получить ФизическоеЛицо и ранги
	МассивСотрудников = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
		ВсеУчастники.ВыгрузитьКолонку("Сотрудник"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "Выбрать
	|	СтруктураПредприятия.Ранг,
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.Владелец КАК ФизическоеЛицо
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|		ПО СтруктураПредприятия.Ссылка = Сотрудники.Подразделение
	|Где
	|	Сотрудники.Ссылка В (&Сотрудники)";
	Запрос.УстановитьПараметр("Сотрудники", МассивСотрудников);
	РангиИФизЛица = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаСотрудника Из ВсеУчастники Цикл
		СтрокаРанга = РангиИФизЛица.Найти(СтрокаСотрудника.Сотрудник);
		Если ЗначениеЗаполнено(СтрокаРанга) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаСотрудника, СтрокаРанга, "Ранг, ФизическоеЛицо");
		КонецЕсли;
	КонецЦикла;
	
	// Проверить сотрудников на вытеснение по рангу и защищенности
	ВытесняемыеСтроки = ВсеУчастники.НайтиСтроки(
		Новый Структура("ЭтоВытесняющийУчастник, Защищенный", Ложь, Ложь));
		
	Для Каждого ВытесняемаяСтрока Из ВытесняемыеСтроки Цикл
		ВытесняющиеСтроки = ВсеУчастники.НайтиСтроки(
			Новый Структура("ЭтоВытесняющийУчастник, ФизическоеЛицо",
				Истина, ВытесняемаяСтрока.ФизическоеЛицо));
		
		Если ВытесняющиеСтроки.Количество() Тогда
			Для Каждого ВытесняющаяСтрока Из ВытесняющиеСтроки Цикл
				Если ВытесняющаяСтрока.Ранг <= ВытесняемаяСтрока.Ранг 
					Или Не ИспользоватьРанги Тогда
					Результат[ВытесняемаяСтрока.Сотрудник] = 
						Новый Структура("Сотрудник, ВытесняющийСотрудник,
							|ВытесняемоеДействие, ВытесняющееДействие",
							ВытесняемаяСтрока.Сотрудник, ВытесняющаяСтрока.Сотрудник, 
							ВытесняемаяСтрока.ВидДействия, ВытесняющаяСтрока.ВидДействия);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Проверяет дерево обработки на участников, которых нужно вытеснить. Возвращает соответствие вытесняемых участников
// со строками дерева и участниками.
// 
// Параметры:
//  ЭлементыДереваОбработки - ДанныеФормыКоллекцияЭлементовДерева - Дерево обработки предмета.
//  Предмет - ОпределяемыйТип.ПредметДействия, ОпределяемыйТип.ПредметДействияОбъект.
//  ПечатьКарточкиДокумента - Булево
// 
// Возвращаемое значение:
//  Соответствие - Строки дерева обработки с вытесняемыми участниками действий
//
Функция ВытесняемыеУчастникиДереваОбработки(ЭлементыДереваОбработки, Предмет, ПечатьКарточкиДокумента = Ложь) Экспорт
	
	Результат = Новый Соответствие;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВытеснениеУчастников") Тогда
		Возврат Результат;
	КонецЕсли;
	ИспользоватьРанги = ПолучитьФункциональнуюОпцию("ИспользоватьРанги");
	
	УстановитьПривилегированныйРежим(Истина);

	ВытесняющиеСотрудники = Новый ТаблицаЗначений;
	ВытесняющиеСотрудники.Колонки.Добавить("СтрокаДействия");
	ВытесняющиеСотрудники.Колонки.Добавить("Сотрудник");
	ВытесняющиеСотрудники.Колонки.Добавить("Идентификатор");
	ВытесняющиеСотрудники.Колонки.Добавить("ФизическоеЛицо");
	ВытесняющиеСотрудники.Колонки.Добавить("Ранг");
	ВытесняющиеСотрудники.Колонки.Добавить("Защищенный");
	
	ВытесняемыеСотрудники = ВытесняющиеСотрудники.Скопировать();
	
	// Определим вытесняющих и вытесняемых сотрудников
	Для Каждого Строка Из ЭлементыДереваОбработки Цикл
		
		ВидДействия = Строка.ВидДействия;
		ТипДействия = ДействияСерверПовтИсп.ТипДействияПоВидуДействия(ВидДействия);
		
		Если Не ДействияКлиентСервер.ТипДействияУчаствуетВВытеснении(ТипДействия) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоВытесняющийВидДействия = ТипДействия = Перечисления.ТипыДействий.Подписание
			Или ТипДействия = Перечисления.ТипыДействий.Утверждение;
		
		Если ДействияКлиентСервер.ЭтоДействиеСогласования(Строка.Действие) Тогда
			Если ЗначениеЗаполнено(Строка.Настройка)
				И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Настройка, "ФормироватьВизы") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.Действие)
				И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Действие, "ФормируетВизы") Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		//Заполним таблицы разыменованными участниками
		Если Строка.ЭтоУчастник Тогда // В действии один участник
			ДобавитьРазыменованныхУчастников(Предмет,
				Строка,
				ЭтоВытесняющийВидДействия,
				ВытесняющиеСотрудники,
				ВытесняемыеСотрудники);
		ИначеЕсли Строка.ЭтоДействие Тогда
			
			Если Не ПечатьКарточкиДокумента Тогда
				ЭлементыМассив = Строка.ПолучитьЭлементы();
			Иначе
				ЭлементыМассив = Строка.Строки;
			КонецЕсли;
			
			Для Каждого Элемент Из ЭлементыМассив Цикл
				Если Элемент.ЭтоУчастник Тогда
					ДобавитьРазыменованныхУчастников(Предмет,
						Элемент,
						ЭтоВытесняющийВидДействия,
						ВытесняющиеСотрудники,
						ВытесняемыеСотрудники);
				ИначеЕсли Элемент.ЭтоЭтап Тогда // Проверим этапы действия
				
					Если Не ПечатьКарточкиДокумента Тогда
						ЭлементыЭтапы = Элемент.ПолучитьЭлементы();
					Иначе
						ЭлементыЭтапы = Элемент.Строки;
					КонецЕсли;		
				
					Для Каждого ЭлементЭтапа Из ЭлементыЭтапы Цикл
						Если ЭлементЭтапа.ЭтоУчастник Тогда
							ДобавитьРазыменованныхУчастников(Предмет,
								ЭлементЭтапа,
								ЭтоВытесняющийВидДействия,
								ВытесняющиеСотрудники,
								ВытесняемыеСотрудники);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Сразу определим ранги и пользователей по всем сотрудникам
	ВсеСотрудники = ВытесняемыеСотрудники.ВыгрузитьКолонку("Сотрудник");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеСотрудники,
		ВытесняющиеСотрудники.ВыгрузитьКолонку("Сотрудник"));
	ВсеСотрудники = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВсеСотрудники);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "Выбрать
	|	СтруктураПредприятия.Ранг,
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.Владелец КАК ФизическоеЛицо
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|		ПО СтруктураПредприятия.Ссылка = Сотрудники.Подразделение
	|Где
	|	Сотрудники.Ссылка В (&Сотрудники)";
	Запрос.УстановитьПараметр("Сотрудники", ВсеСотрудники);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	СтруктураПоиска = Новый Структура("Сотрудник");
	
	Для Каждого Строка Из РезультатЗапроса Цикл
		
		// Заполнить реквизиты "Ранг" и "ФизическоеЛицо" в исходных таблицах
		
		СтруктураПоиска.Сотрудник = Строка.Сотрудник;
		
		СтрокиСотрудника = ВытесняющиеСотрудники.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаСотрудника Из СтрокиСотрудника Цикл
			ЗаполнитьЗначенияСвойств(СтрокаСотрудника, Строка, "Ранг, ФизическоеЛицо");
		КонецЦикла;
		
		СтрокиСотрудника = ВытесняемыеСотрудники.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаСотрудника Из СтрокиСотрудника Цикл
			ЗаполнитьЗначенияСвойств(СтрокаСотрудника, Строка, "Ранг, ФизическоеЛицо");
		КонецЦикла;
		
	КонецЦикла;
	
	
	// Определим, есть ли действительно вытесняющие сотрудники
	Для Каждого Строка Из ВытесняемыеСотрудники Цикл
		
		Если Строка.СтрокаДействия.ЕстьРезультат = Истина Или Строка.Защищенный
			Или Строка.СтрокаДействия.Состояние = Перечисления.СостоянияВыполненияДействий.Завершено Тогда 
			Продолжить;
		КонецЕсли;
		
		ВытесняющиеСтроки = ВытесняющиеСотрудники.НайтиСтроки(
			Новый Структура("ФизическоеЛицо", Строка.ФизическоеЛицо));
		
		Если Не ВытесняющиеСтроки.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ВытесняющаяСтрока Из ВытесняющиеСтроки Цикл
			
			Если Не ИспользоватьРанги Или ВытесняющаяСтрока.Ранг <= Строка.Ранг Тогда
				
				Результат[Строка.Идентификатор] = 
					Новый Структура("Сотрудник, ВытесняющийСотрудник, ВытесняющееДействие",
						Строка.Сотрудник, ВытесняющаяСтрока.Сотрудник, ВытесняющаяСтрока.СтрокаДействия);
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Проверяет обработку объекта на вытесняемых участников.
// 
// Параметры:
//  ОбработкаОбъекта - СправочникСсылка.ОбработкиОбъектов
//  Предмет - ОпределяемыйТип.ПредметДействия.
//  СогласованиеОбъект - СправочникОбъект.ДействияСогласования - Действие согласования, из которого вытесняются участники.
//  	Используется при записи согласования, для учета добавленных участников еще не записанного объекта.
// 
// Возвращаемое значение:
//  Соответствие - Вытесняемые участники обработки.
//		Ключ соответствия - идентификатор участника объекта.
//		Значение соответствия - структура с полями:
//			Сотрудник - СправочникСсылка.Сотрудники
//			ИдентификаторВытесненного - УникальныйИдентификатор
//			ВытесняющийСотрудник - СправочникСсылка.Сотрудники
//			ИдентификаторВытеснившего - УникальныйИдентификатор
//			ВытесняющееДействие - ОпределяемыйТип.Действия
//
Функция ВытесняемыеУчастникиОбработки(Предмет, СогласованиеОбъект = Неопределено) Экспорт
	
	Результат = Новый Соответствие;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВытеснениеУчастников") Тогда
		Возврат Результат;
	КонецЕсли;
	ИспользоватьРанги = ПолучитьФункциональнуюОпцию("ИспользоватьРанги");
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбработкаПредмета = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(Предмет);
	
	ПереданыУчастники = СогласованиеОбъект <> Неопределено;
	
	Действия = РегистрыСведений.ДействияОбработкиОбъектов.ДействияОбработки(ОбработкаПредмета);
	Н = Действия.Количество() - 1;
	Пока Н >= 0 Цикл
		ТекущееДействие = Действия[Н];
		Если Не ДействияКлиентСервер.ЭтоДействиеСогласования(ТекущееДействие)
			И Не ДействияКлиентСервер.ЭтоДействиеУтверждения(ТекущееДействие)
			И Не ДействияКлиентСервер.ЭтоДействиеПодписания(ТекущееДействие) Тогда
			Действия.Удалить(Н);
		КонецЕсли;
		Н = Н - 1;
	КонецЦикла;
	
	Участники = Новый ТаблицаЗначений;
	Участники.Колонки.Добавить("Действие");
	Участники.Колонки.Добавить("Идентификатор");
	Участники.Колонки.Добавить("Сотрудник");
	Участники.Колонки.Добавить("Защищенный");
	Участники.Колонки.Добавить("ФизическоеЛицо");
	Участники.Колонки.Добавить("Ранг");
	Участники.Колонки.Добавить("ЭтоВытесняющийУчастник");
	Участники.Колонки.Добавить("Условие");
	
	
	ЗапросУчастников = Новый Запрос;
	ЗапросУчастников.Текст = "ВЫБРАТЬ
	|	ДействияУтвержденияУчастники.Ссылка КАК Действие,
	|	ДействияУтвержденияУчастники.Идентификатор,
	|	ДействияУтвержденияУчастники.Участник,
	|	ДействияУтвержденияУчастники.Защищенный,
	|	ДействияУтвержденияУчастники.ФункцияУчастника,
	|	ДействияУтвержденияУчастники.Условие
	|ПОМЕСТИТЬ ВсеУчастники
	|ИЗ
	|	Справочник.ДействияУтверждения.Участники КАК ДействияУтвержденияУчастники
	|ГДЕ
	|	ДействияУтвержденияУчастники.Ссылка В (&Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДействияПодписанияУчастники.Ссылка,
	|	ДействияПодписанияУчастники.Идентификатор,
	|	ДействияПодписанияУчастники.Участник,
	|	ДействияПодписанияУчастники.Защищенный,
	|	ДействияПодписанияУчастники.ФункцияУчастника,
	|	ДействияПодписанияУчастники.Условие
	|ИЗ
	|	Справочник.ДействияПодписания.Участники КАК ДействияПодписанияУчастники
	|ГДЕ
	|	ДействияПодписанияУчастники.Ссылка В (&Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДействияСогласованияУчастники.Ссылка,
	|	ДействияСогласованияУчастники.Идентификатор,
	|	ДействияСогласованияУчастники.Участник,
	|	ДействияСогласованияУчастники.Защищенный,
	|	ДействияСогласованияУчастники.ФункцияУчастника,
	|	ДействияСогласованияУчастники.Условие
	|ИЗ
	|	Справочник.ДействияСогласования.Участники КАК ДействияСогласованияУчастники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДействияСогласования КАК ДействияСогласования
	|		ПО ДействияСогласованияУчастники.Ссылка = ДействияСогласования.Ссылка
	|		И ДействияСогласования.ФормируетВизы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыДействий КАК РезультатыДействий
	|		ПО ДействияСогласованияУчастники.Ссылка = РезультатыДействий.Действие
	|		И ДействияСогласованияУчастники.Идентификатор = РезультатыДействий.ИдентификаторУчастника
	|ГДЕ
	|	НЕ &ПереданыУчастники
	|	И ДействияСогласованияУчастники.Ссылка В (&Ссылка)
	|	И РезультатыДействий.Результат ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеУчастники.Идентификатор,
	|	ВсеУчастники.Участник,
	|	ВсеУчастники.Защищенный,
	|	ВсеУчастники.Действие,
	|	ВсеУчастники.Условие
	|ИЗ
	|	ВсеУчастники КАК ВсеУчастники
	|ГДЕ
	|	ВсеУчастники.ФункцияУчастника <> ЗНАЧЕНИЕ(Перечисление.ФункцииУчастниковПодписания.ОбрабатывающийРезультат)
	|	И ВсеУчастники.ФункцияУчастника <> ЗНАЧЕНИЕ(Перечисление.ФункцииУчастниковУтверждения.ОбрабатывающийРезультат)
	|	И ВсеУчастники.ФункцияУчастника <> ЗНАЧЕНИЕ(Перечисление.ФункцииУчастниковСогласования.ОбрабатывающийРезультат)
	|	И ВсеУчастники.ФункцияУчастника <> ЗНАЧЕНИЕ(Перечисление.ФункцииУчастниковПодписания.ОбеспечивающийПодписание)";
	
	ЗапросУчастников.УстановитьПараметр("Ссылка", Действия);
	ЗапросУчастников.УстановитьПараметр("ПереданыУчастники", ПереданыУчастники);
	ВсеУчастники = ЗапросУчастников.Выполнить().Выгрузить();
	
	Если ПереданыУчастники Тогда
		Согласующие = СогласованиеОбъект.Участники.НайтиСтроки(Новый Структура("ФункцияУчастника",
				Перечисления.ФункцииУчастниковСогласования.Согласующий));
		Для Каждого Согласующий Из Согласующие Цикл
			НоваяСтрока = ВсеУчастники.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Согласующий);
			НоваяСтрока.Действие = СогласованиеОбъект.Ссылка;
		КонецЦикла;
	КонецЕсли;
	
	// Разыменовать единичные роли и подразделения, проверить условия
	Для Каждого СтрокаУчастника Из ВсеУчастники Цикл
		
		Если Не РаботаСАлгоритмамиПроверки.АлгоритмПоПредметуВыполняется(Предмет,
			СтрокаУчастника.Условие) Тогда
			Продолжить;
		КонецЕсли;
		
		Разыменованные = ДействияСервер.ВсеРазвернутыеУчастники(СтрокаУчастника.Участник, Предмет);
		Если ТипЗнч(СтрокаУчастника.Участник) = Тип("СправочникСсылка.ПолныеРоли") 
				И Разыменованные.Количество() > 1 Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Сотрудник Из Разыменованные Цикл
			
			Если ТипЗнч(Сотрудник) <> Тип("СправочникСсылка.Сотрудники")
				Или Не ЗначениеЗаполнено(Сотрудник) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Участники.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУчастника);
			НоваяСтрока.Сотрудник = Сотрудник;
			НоваяСтрока.ЭтоВытесняющийУчастник =
				ДействияКлиентСервер.ЭтоДействиеПодписания(НоваяСтрока.Действие)
					Или ДействияКлиентСервер.ЭтоДействиеУтверждения(НоваяСтрока.Действие);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Получить пользователей и ранги
	МассивСотрудников = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
		Участники.ВыгрузитьКолонку("Сотрудник"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "Выбрать
	|	СтруктураПредприятия.Ранг,
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.Владелец КАК ФизическоеЛицо
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|		ПО СтруктураПредприятия.Ссылка = Сотрудники.Подразделение
	|Где
	|	Сотрудники.Ссылка В (&Сотрудники)";
	Запрос.УстановитьПараметр("Сотрудники", МассивСотрудников);
	РангиИПользователи = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаСотрудника Из Участники Цикл
		СтрокаРанга = РангиИПользователи.Найти(СтрокаСотрудника.Сотрудник);
		Если СтрокаРанга <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаСотрудника, СтрокаРанга, "Ранг, ФизическоеЛицо");
		КонецЕсли;
	КонецЦикла;
	
	
	// Проверить сотрудников на вытеснение по рангу и защищенности
	ВытесняемыеСтроки = Участники.НайтиСтроки(
		Новый Структура("ЭтоВытесняющийУчастник, Защищенный", Ложь, Ложь));
		
	Для Каждого ВытесняемаяСтрока Из ВытесняемыеСтроки Цикл
		
		ВытесняющиеСтроки = Участники.НайтиСтроки(
			Новый Структура("ЭтоВытесняющийУчастник, ФизическоеЛицо",
				Истина, ВытесняемаяСтрока.ФизическоеЛицо));
		
		Если Не ВытесняющиеСтроки.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ВытесняющаяСтрока Из ВытесняющиеСтроки Цикл
			
			Если ВытесняющаяСтрока.Ранг <= ВытесняемаяСтрока.Ранг
				Или Не ИспользоватьРанги Тогда
			
				Результат[ВытесняемаяСтрока.Идентификатор] = 
					Новый Структура("Сотрудник,
						|ИдентификаторВытесненного,
						|ВытесняющийСотрудник,
						|ИдентификаторВытеснившего,
						|ВытесняющееДействие",
						ВытесняемаяСтрока.Сотрудник,
						ВытесняемаяСтрока.Идентификатор,
						ВытесняющаяСтрока.Сотрудник,
						ВытесняющаяСтрока.Идентификатор,
						ВытесняющаяСтрока.Действие);
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьРазыменованныхУчастников(Знач Предмет, Строка, Знач ЭтоВытесняющийВидДействия,
	ВытесняющиеСотрудники, ВытесняемыеСотрудники)

	Разыменованные = ДействияСервер.ВсеРазвернутыеУчастники(Строка.Участник, Предмет); 
	
	Если ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.ПолныеРоли") 
		И Разыменованные.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Участник Из Разыменованные Цикл
		НоваяСтрока = ?(ЭтоВытесняющийВидДействия,
			ВытесняющиеСотрудники.Добавить(),
			ВытесняемыеСотрудники.Добавить());	
		НоваяСтрока.СтрокаДействия = Строка;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Идентификатор, Защищенный");
		НоваяСтрока.Сотрудник = Участник;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру КлючНастройки для получения правил обработки из РС ПравилаОбработкиОбъектов.
//
// Параметры:
//  ОбъектПредмета - ОпределяемыйТип.ПредметДействияОбъект - объект предмета.
//  ПараметрыВидаОбъекта - см. ДействияКлиентСервер.НовыйПараметрыВидаОбъекта
//  ДатаОбработки - Дата
//
// Возвращаемое значение:
//  см. РегистрыСведений.ПравилаОбработкиОбъектов.НовыйКлючНастройки
//
Функция КлючНастройкиДляПолученияПравилОбработки(ОбъектПредмета, ПараметрыВидаОбъекта, ДатаОбработки)
	
	КлючНастройки = РегистрыСведений.ПравилаОбработкиОбъектов.НовыйКлючНастройки();
	КлючНастройки.ВидОбъекта = ПараметрыВидаОбъекта.ВидОбъекта;
	КлючНастройки.ДатаОбработки = ДатаОбработки;
	КлючНастройки.ГрифДоступа = ОбъектПредмета.ГрифДоступа;
	КлючНастройки.Важность = ОбъектПредмета.Важность;
	
	Если ПараметрыВидаОбъекта.ВестиУчетПоТематикам И ЗначениеЗаполнено(ОбъектПредмета.Тематика) Тогда
		КлючНастройки.Тематика = ОбъектПредмета.Тематика;
	КонецЕсли;
	
	КлючНастройки.Подразделение = ОбъектПредмета.Подразделение;
	КлючНастройки.Организация = ОбъектПредмета.Организация;
	
	Если ТипЗнч(ПараметрыВидаОбъекта.ВидОбъекта) = Тип("СправочникСсылка.ВидыДокументов") Тогда
		КлючНастройки.ФормаДокумента = ОбъектПредмета.ФормаДокумента;
	КонецЕсли;
	
	Возврат КлючНастройки;
	
КонецФункции

// Возвращает дату создания обработки объекта, либо текущую дату, если обработка еще не начата.
//
// Параметры:
//  Предмет - ОпределяемыйТип.ПредметДействия
//
// Возвращаемое значение:
//  Дата
//
Функция ДатаОбработкиОбъекта(Предмет)
	
	ДатаОбработки = ТекущаяДатаСеанса();
	Если ЗначениеЗаполнено(Предмет) Тогда
		
		ОбработкаОбъекта = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(Предмет);
		
		Если ЗначениеЗаполнено(ОбработкаОбъекта) Тогда
			РеквизитыОбработки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбработкаОбъекта, "ДатаСоздания, ДатаНачала");
			// Если обработка запущена, тогда используем дату создания обработки
			Если ЗначениеЗаполнено(РеквизитыОбработки.ДатаНачала) Тогда
				ДатаОбработки = РеквизитыОбработки.ДатаСоздания;
				
			// Если не запущена, то обновляем дату создания обработки, для получения текущих настроек ПОД
			ИначеЕсли РеквизитыОбработки.ДатаСоздания <> НачалоДня(ДатаОбработки) Тогда 
				Справочники.ОбработкиОбъектов.ОбновитьДатуСозданияОбработки(ОбработкаОбъекта, ДатаОбработки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДатаОбработки;
	
КонецФункции

// Возвращает настройки правил обработки для указанного предмета.
// Отбираются правила с максимальными приоритетами.
//
// Параметры:
//  Предмет - ОпределяемыйТип.ПредметДействия
//  Объект - ОпределяемыйТип.ПредметДействияОбъект
//  ПараметрыВидаОбъекта - см. ДействияКлиентСервер.НовыйПараметрыВидаОбъекта
//
// Возвращаемое значение:
//  см. РегистрыСведений.ПравилаОбработкиОбъектов.НастройкиПоКлючу
//
Функция НастройкиВидовДействий(Предмет, Объект, ПараметрыВидаОбъекта)
	
	ДатаОбработки = ДатаОбработкиОбъекта(Предмет);
	КлючНастройки = КлючНастройкиДляПолученияПравилОбработки(Объект, ПараметрыВидаОбъекта, ДатаОбработки);
	
	Возврат РегистрыСведений.ПравилаОбработкиОбъектов.НастройкиПоКлючу(КлючНастройки);
	
КонецФункции

// Заполняет и перезаполняет действия предмета.
//
// Параметры:
//  Предмет - ОпределяемыйТип.ПредметДействия
//  Объект - ОпределяемыйТип.ПредметДействияОбъект
//  Дерево - ДанныеФормыДерево, ДанныеФормыЭлементДерева, ДеревоЗначений
//  ПараметрыВидаОбъекта - см. ДействияКлиентСервер.НовыйПараметрыВидаОбъекта
//  Форма - ФормаКлиентскогоПриложения - необязательный параметр. Форма предмета.
//
Процедура ЗаполнитьДействия(Предмет, Объект, Дерево, ПараметрыВидаОбъекта, Форма = Неопределено)
	
	ВФорме = Форма <> Неопределено;
	
	Если ТипЗнч(Дерево) = Тип("ДеревоЗначений") Тогда
		ЭлементыДействия = Дерево.Строки;
	Иначе
		ЭлементыДействия = Дерево.ПолучитьЭлементы();
	КонецЕсли;
	
	Если ВФорме Тогда
		
		Если Форма.ПерезаполнениеДействий Тогда
			СохраненноеДерево = Новый ДеревоЗначений;
			СохраненноеДерево.Колонки.Добавить("ВидДействия");
			СохраненноеДерево.Колонки.Добавить("Найдено", Новый ОписаниеТипов("Булево"));
		Иначе
			СохраненноеДерево = ДанныеФормыВЗначение(Дерево, Тип("ДеревоЗначений"));
			СохраненноеДерево.Колонки.Добавить("Найдено", Новый ОписаниеТипов("Булево"));
		КонецЕсли;
		
	Иначе
		
		СохраненноеДерево = Дерево.Скопировать();
		СохраненноеДерево.Колонки.Добавить("Найдено", Новый ОписаниеТипов("Булево"));
		
	КонецЕсли;
	
	Если ВФорме Тогда
		ИспользоватьВизыСогласования = ПолучитьФункциональнуюОпцию("ИспользоватьВизыСогласования");
		ЕстьДействияСогласования = Ложь;
		ЕстьДействияОзнакомления = Ложь;
		ЕстьДействияОзнакомленияЗапущенные = Ложь;
		ДействияОзнакомления = Новый Массив;
	КонецЕсли;
	
	ВидыДействийНастройки = НастройкиВидовДействий(Предмет, Объект, ПараметрыВидаОбъекта);
	
	Если ВидыДействийНастройки.Количество() = 0 Тогда
		
		Если ВФорме Тогда
			
			Форма.КоличествоДействий = ЭлементыДействия.Количество();
			УстановитьВидимостьКомандыОтправить(Форма, Форма.КоличествоДействий);
			
			УстановитьВидимостьКомандРезультатов(Форма, Ложь, Ложь, ИспользоватьВизыСогласования, Ложь);
			
		КонецЕсли;
		
		Возврат; // в ПОД ничего нет - не перезаполняем.
		
	КонецЕсли;
	
	ЭлементыДействия.Очистить();
	ВытесняемыеУчастники = ВытесняемыеУчастникиНастроекОбработки(ВидыДействийНастройки, Предмет);
	
	Для Каждого ВидДействияНастройка Из ВидыДействийНастройки Цикл
		
		Если Не ВидДействияНастройка.НастройкаВключена Тогда
			Продолжить;
		КонецЕсли;
		
		СохраненноеДействие = Неопределено;
		ДействиеСсылка = Неопределено;
		СостояниеДействия = Неопределено;
		
		СтруктураПоиска = Новый Структура("ВидДействия", ВидДействияНастройка.ВидДействия);
		НайденныеСтроки = СохраненноеДерево.Строки.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СохраненноеДействие = НайденныеСтроки[0];
			СохраненноеДействие.Найдено = Истина;
			ДействиеСсылка = СохраненноеДействие.Действие;
			
			СостояниеДействия = НайденныеСтроки[0].Состояние;
			Если ЗначениеЗаполнено(СостояниеДействия) Тогда
				// Если уже выполнено или выполняется - не перезаполняем
				//  Но восстановим из сохраненных.
				ОбщегоНазначенияДокументооборотКлиентСервер.СкопироватьСтрокуДерева(
					СохраненноеДействие, Дерево);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ИмяСправочника = ДействияСервер.ИмяСправочникаПоВидуИДействию(
			ВидДействияНастройка.ВидДействия, ДействиеСсылка);
		Менеджер = Справочники[ИмяСправочника];
		
		Блокировка = Новый БлокировкаДанных;
		Если ЗначениеЗаполнено(ДействиеСсылка) Тогда
			ЭлементБлокировки = Блокировка.Добавить("Справочник." + ИмяСправочника);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ДействиеСсылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			Если ЗначениеЗаполнено(ДействиеСсылка) Тогда
				Действие = ДействиеСсылка.ПолучитьОбъект();
			Иначе
				Действие = Менеджер.СоздатьЭлемент();
			КонецЕсли;
			
			ЗначенияЗаполнения = Новый Структура;
			ЗначенияЗаполнения.Вставить("Предмет", Предмет);
			ЗначенияЗаполнения.Вставить("ПредметОбъект", Объект);
			ЗначенияЗаполнения.Вставить("ВидДействия", ВидДействияНастройка.ВидДействия);
			ЗначенияЗаполнения.Вставить("Настройка", ВидДействияНастройка.Настройка);
			ЗначенияЗаполнения.Вставить("ВытесняемыеУчастники", ВытесняемыеУчастники);
			Действие.Заполнить(ЗначенияЗаполнения);
			
			НастройкаОбработки = Справочники.НастройкиОбработкиВидовОбъектов.ПустаяСсылка();
			СтрНайти = ВидыДействийНастройки.НайтиСтроки(
				Новый Структура("ВидДействия", ВидДействияНастройка.ВидДействия));
			Если СтрНайти.Количество() > 0 Тогда
				НастройкаОбработки = СтрНайти[0].НастройкаОбработки;
			КонецЕсли;
			Действие.ДополнительныеСвойства.Вставить("НастройкаОбработки", НастройкаОбработки);
			
			Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
				Действие.Записать();
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
		Если ВФорме И Не Форма.ДействияПоказыватьВсе
				И ДействияСервер.НеПоказыватьПоНастройке(Действие.ВидДействия, Действие.Ссылка, Объект, СостояниеДействия) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементДействие = ЭлементыДействия.Добавить();
		ЭлементДействие.Настройка = ВидДействияНастройка.Настройка;
		
		Если ВФорме Тогда
			ДоступностьВФорме = Новый Структура("ДоступныеПоля, НедоступныеПоля");
			ЗаполнитьЗначенияСвойств(ДоступностьВФорме, Форма);
		КонецЕсли;
		
		Менеджер.ЗаполнитьДействиеВФормеПредмета(ЭлементДействие, Действие, Объект, Ложь, Не ВФорме);
		
		Если ВФорме И ТипЗнч(Действие) = Тип("СправочникОбъект.ДействияСогласования")
				И Действие.ФормируетВизы Тогда
			ЕстьДействияСогласования = Истина;
		КонецЕсли;
		
		Если ВФорме И ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
			ЕстьДействияОзнакомления = Истина;
			ДействияОзнакомления.Добавить(Действие.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	// Удалим Действия, которых больше нет в обработке.
	Для Каждого СохраненноеДействие Из СохраненноеДерево.Строки Цикл
		Если СохраненноеДействие.Найдено = Истина Или Не ЗначениеЗаполнено(СохраненноеДействие.Действие) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Действие = СохраненноеДействие.Действие.ПолучитьОбъект();
			Действие.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
	КонецЦикла;
	
	ДействияСервер.ПеренумероватьДействия(Дерево,, Не ВФорме);
	
	Если ВФорме Тогда
		Форма.КоличествоДействий = ЭлементыДействия.Количество();
		УстановитьВидимостьКомандыОтправить(Форма, Форма.КоличествоДействий);
		ЕстьДействияОзнакомленияЗапущенные =
			РегистрыСведений.УчастникиОзнакомлений.ЕстьДействияОзнакомленияЗапущенные(ДействияОзнакомления);
		УстановитьВидимостьКомандРезультатов(
			Форма,
			ЕстьДействияСогласования,
			ЕстьДействияОзнакомления,
			ИспользоватьВизыСогласования,
			ЕстьДействияОзнакомленияЗапущенные);
	КонецЕсли;
	
	ДействияСервер.ПометитьВытесняемыхУчастников(Дерево, Объект, Не ВФорме);
	
КонецПроцедуры

#КонецОбласти
