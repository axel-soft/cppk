////////////////////////////////////////////////////////////////////////////////
// Кэши на время взова, для оптимизации работы (сервер).
//
////////////////////////////////////////////////////////////////////////////////

// @strict-types


#Область ПрограммныйИнтерфейс

// Заполняет кеш областми просмотра.
//
// Параметры:
//  ЗадачаИлиДействиеЗадачи - ДокументСсылка.Задача, ДокументСсылка.ДействиеЗадачи - Задача или действие.
//
// Возвращаемое значение:
//  Структура - Кеш области просмотра:
//   *  Заполнен - Булево.
//   *  Задача - ДокументСсылка.Задача.
//   *  ЗадачаОбъект - ДокументОбъект.Задача, Неопределено - Задача.
//   *  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//   *  РеквизитыДействияЗадачи - Структура, Неопределено - Реквизиты действия задачи.
//
Функция ИнициализироватьКэшЗадачаОбластьПросмотра(ЗадачаИлиДействиеЗадачи) Экспорт
	
	КэшОбластиПросмотра = КэшиНаВремяВызоваПовтИсп.КэшЗадачаОбластьПросмотра();
	
	Если КэшОбластиПросмотра.Заполнен Или Не ЗначениеЗаполнено(ЗадачаИлиДействиеЗадачи) Тогда
		Возврат КэшОбластиПросмотра;
	КонецЕсли;
	
	КэшОбластиПросмотра.Заполнен = Истина;
	
	Если ТипЗнч(ЗадачаИлиДействиеЗадачи) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		
		РеквизитыДействияЗадачи =
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ЗадачаИлиДействиеЗадачи,
				"Ссылка, Задача, Исполнитель, Источник,
				|ВидДействия, ВидУчастника, ЕстьОсобыйСрок,
				|ОсобыйЗаголовок, ОсобоеОписание, ОсобоеОписаниеФорматированное,
				|ОсобыйСрок, РезультатДействия, РезультатДействияТекстом, ФактическийИсполнитель,
				|СостояниеУчастникаЗадачи, Флаг, ПометкаУдаления, Приложения, ВерсияДанных");
		
		КэшОбластиПросмотра.ДействиеЗадачи = ЗадачаИлиДействиеЗадачи;
		КэшОбластиПросмотра.РеквизитыДействияЗадачи = РеквизитыДействияЗадачи;
		КэшОбластиПросмотра.Задача = РеквизитыДействияЗадачи.Задача;
		
	ИначеЕсли ТипЗнч(ЗадачаИлиДействиеЗадачи) = Тип("ДокументСсылка.Задача") Тогда
		
		КэшОбластиПросмотра.Задача = ЗадачаИлиДействиеЗадачи;
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неожиданный тип задачи или действия задачи %1 (%2).'"),
			ЗадачаИлиДействиеЗадачи,
			ТипЗнч(ЗадачаИлиДействиеЗадачи));
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КэшОбластиПросмотра.Задача) Тогда
		КэшОбластиПросмотра.ЗадачаОбъект = КэшОбластиПросмотра.Задача.ПолучитьОбъект();
	КонецЕсли;
	
	Возврат КэшОбластиПросмотра;
	
КонецФункции

// Инициализирует кэш для формы элементы справочника документы предприятия.
//
// Параметры:
//  ДокументОбъект - СправочникОбъект.ДокументыПредприятия.
// 
// Возвращаемое значение:
//  Структура - Кэш для формы элементы справочника документы предприятия:
//   * Инициализирован - Булево - Кэш инициализирован.
//   * КэшДокумента - Структура - Кэш документа:
//     ** Ссылка - СправочникСсылка.ДокументыПредприятия.
//     ** ВидДокумента - СправочникСсылка.ВидыДокументов.
//     ** Шаблон - СправочникСсылка.ШаблоныДокументов.
//     ** ЕстьФайлыШаблона - Булево.
//     ** Контрагент - СправочникСсылка.Контрагенты.
//     ** ПодписалОтКонтрагента - СправочникСсылка.КонтактныеЛица.
//     ** ДатаСоздания - Дата.
//     ** ДатаРегистрации - Дата.
//     ** Стороны - ТабличнаяЧасть.
//   * КэшВидаДокумента - Структура - Кэш вида документа. См. Делопроизводство.КэшВидаДокумента.
//   * УчастникиРабочейГруппы - См. РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту.
//   * ВсеСостоянияДокумента - См. Делопроизводство.ПолучитьВсеСостоянияДокумента.
//   * КэшОбработки - Структура - Кэш обработки:
//     ** Ссылка - СправочникСсылка.ОбработкиОбъектов.
//     ** ДатаСоздания - Дата.
//     ** Состояние - ПеречислениеСсылка.СостоянияОбработкиОбъектов.
//     ** ДатаИзмененияСостояния - Дата.
//     ** ДатаНачала - Дата.
//
Функция ИнициализироватьДокументыПредприятияФормаЭлемента(ДокументОбъект) Экспорт
	
	КэшДокументыПредприятияФормаЭлемента =
		КэшиНаВремяВызоваПовтИсп.КэшДокументыПредприятияФормаЭлемента();
	
	КэшДокументыПредприятияФормаЭлемента.КэшДокумента.Ссылка = ДокументОбъект.Ссылка;
	КэшДокументыПредприятияФормаЭлемента.КэшДокумента.ВидДокумента = ДокументОбъект.ВидДокумента;
	КэшДокументыПредприятияФормаЭлемента.КэшДокумента.Шаблон = ДокументОбъект.Шаблон;
	КэшДокументыПредприятияФормаЭлемента.КэшДокумента.ЕстьФайлыШаблона =
		РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(ДокументОбъект.Шаблон, Ложь).Количество() > 0;
	КэшДокументыПредприятияФормаЭлемента.КэшДокумента.Контрагент = ДокументОбъект.Контрагент;
	КэшДокументыПредприятияФормаЭлемента.КэшДокумента.ПодписалОтКонтрагента =
		ДокументОбъект.ПодписалОтКонтрагента;
	КэшДокументыПредприятияФормаЭлемента.КэшДокумента.ДатаСоздания = ДокументОбъект.ДатаСоздания;
	КэшДокументыПредприятияФормаЭлемента.КэшДокумента.ДатаРегистрации =
		ДокументОбъект.ДатаРегистрации;
	КэшДокументыПредприятияФормаЭлемента.КэшДокумента.Стороны = ДокументОбъект.Стороны;
	
	КэшДокументыПредприятияФормаЭлемента.КэшВидаДокумента =
		Делопроизводство.КэшВидаДокумента(ДокументОбъект.ВидДокумента);
	
	КэшДокументыПредприятияФормаЭлемента.УчастникиРабочейГруппы =
		РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(ДокументОбъект.Ссылка);
	
	КэшДокументыПредприятияФормаЭлемента.ВсеСостоянияДокумента =
		Делопроизводство.ПолучитьВсеСостоянияДокумента(ДокументОбъект.Ссылка);
	
	ОбработкаОбъекта = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(ДокументОбъект.Ссылка);
	КэшДокументыПредприятияФормаЭлемента.КэшОбработки.Ссылка = ОбработкаОбъекта;
	Если ЗначениеЗаполнено(ОбработкаОбъекта) Тогда
		РеквизитыОбработки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ОбработкаОбъекта,
			"ДатаСоздания, Состояние, ДатаИзмененияСостояния, ДатаНачала");
		КэшДокументыПредприятияФормаЭлемента.КэшОбработки.ДатаСоздания =
			РеквизитыОбработки.ДатаСоздания;
		КэшДокументыПредприятияФормаЭлемента.КэшОбработки.Состояние =
			РеквизитыОбработки.Состояние;
		КэшДокументыПредприятияФормаЭлемента.КэшОбработки.ДатаИзмененияСостояния =
			РеквизитыОбработки.ДатаИзмененияСостояния;
		КэшДокументыПредприятияФормаЭлемента.КэшОбработки.ДатаНачала =
			РеквизитыОбработки.ДатаНачала;
	КонецЕсли;
	
	// Кэш отмечаем инициализированным в самом конце, чтобы не ограничивать используемые в расчётах методы.
	КэшДокументыПредприятияФормаЭлемента.Инициализирован = Истина;
	
	Возврат КэшДокументыПредприятияФормаЭлемента;
	
КонецФункции

// Переносит кэш для формы элементы справочника документы предприятия.
//
// Параметры:
//  ПереносКэшаИзЧтенияВСоздание - Структура - Переносимый кэш:
//   * Инициализирован - Булево - Кэш инициализирован.
//   * КэшДокумента - Структура - Кэш документа:
//     ** Ссылка - СправочникСсылка.ДокументыПредприятия.
//     ** ВидДокумента - СправочникСсылка.ВидыДокументов.
//     ** Шаблон - СправочникСсылка.ШаблоныДокументов.
//     ** ЕстьФайлыШаблона - Булево.
//     ** Контрагент - СправочникСсылка.Контрагенты.
//     ** ПодписалОтКонтрагента - СправочникСсылка.КонтактныеЛица.
//     ** ДатаСоздания - Дата.
//     ** ДатаРегистрации - Дата.
//     ** Стороны - ТабличнаяЧасть.
//   * КэшВидаДокумента - Структура - Кэш вида документа. См. Делопроизводство.КэшВидаДокумента.
//   * УчастникиРабочейГруппы - См. РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту.
//   * ВсеСостоянияДокумента - См. Делопроизводство.ПолучитьВсеСостоянияДокумента.
//   * КэшОбработки - Структура - Кэш обработки:
//     ** Ссылка - СправочникСсылка.ОбработкиОбъектов.
//     ** ДатаСоздания - Дата.
//     ** Состояние - ПеречислениеСсылка.СостоянияОбработкиОбъектов.
//     ** ДатаИзмененияСостояния - Дата.
//     ** ДатаНачала - Дата.
//
Процедура ПеренестиДокументыПредприятияФормаЭлемента(ПереносКэшаИзЧтенияВСоздание) Экспорт
	
	Если ПереносКэшаИзЧтенияВСоздание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КэшДокументыПредприятияФормаЭлемента =
		КэшиНаВремяВызоваПовтИсп.КэшДокументыПредприятияФормаЭлемента();
	
	КэшДокументыПредприятияФормаЭлемента.Инициализирован = Истина;
	
	КэшДокументыПредприятияФормаЭлемента.Вставить("КэшДокумента",
		ПереносКэшаИзЧтенияВСоздание.КэшДокумента);
	
	КэшДокументыПредприятияФормаЭлемента.Вставить("КэшВидаДокумента",
		ПереносКэшаИзЧтенияВСоздание.КэшВидаДокумента);
	
	КэшДокументыПредприятияФормаЭлемента.Вставить("УчастникиРабочейГруппы",
		ПереносКэшаИзЧтенияВСоздание.УчастникиРабочейГруппы);
	
	КэшДокументыПредприятияФормаЭлемента.Вставить("ВсеСостоянияДокумента",
		ПереносКэшаИзЧтенияВСоздание.ВсеСостоянияДокумента);
	
	КэшДокументыПредприятияФормаЭлемента.Вставить("КэшОбработки",
		ПереносКэшаИзЧтенияВСоздание.КэшОбработки);
	
КонецПроцедуры

#КонецОбласти