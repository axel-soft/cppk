// @strict-types

#Область ПрограммныйИнтерфейс

// Дополняет описание реквизитов правил автоматического создания объектов описанием общих реквизитов.
//
// Параметры:
//	ОписаниеРеквизитов - см. ОбменЭДОДокументооборот.ОписаниеРеквизитовПравилАвтоматическогоСозданияОбъектов
//
Процедура ОписаниеОбщихРеквизитовПравилАвтоматическогоСозданияОбъектов(ОписаниеРеквизитов) Экспорт
	
	ОписаниеРеквизитов.РеквизитыШапки.Добавить(
		ОбменЭДОДокументооборот.ОписаниеРеквизитаПравилаАвтоматическогоСозданияОбъектов(
			"ВидЭлектронногоДокумента", Нстр("ru = 'Вид электронного документа'")));
	ОписаниеРеквизитов.РеквизитыШапки.Добавить(
		ОбменЭДОДокументооборот.ОписаниеРеквизитаПравилаАвтоматическогоСозданияОбъектов(
			"ДатаЭлектронногоДокумента", Нстр("ru = 'Дата электронного документа'")));
	ОписаниеРеквизитов.РеквизитыШапки.Добавить(
		ОбменЭДОДокументооборот.ОписаниеРеквизитаПравилаАвтоматическогоСозданияОбъектов(
			"ДополнительныйФайлЭлектронногоДокумента", Нстр("ru = 'Файл электронного документа (дополнительный)'")));
	ОписаниеРеквизитов.РеквизитыШапки.Добавить(
		ОбменЭДОДокументооборот.ОписаниеРеквизитаПравилаАвтоматическогоСозданияОбъектов(
			"Контрагент", Нстр("ru = 'Контрагент'")));
	ОписаниеРеквизитов.РеквизитыШапки.Добавить(
		ОбменЭДОДокументооборот.ОписаниеРеквизитаПравилаАвтоматическогоСозданияОбъектов(
			"НомерЭлектронногоДокумента", Нстр("ru = 'Номер электронного документа'")));
	ОписаниеРеквизитов.РеквизитыШапки.Добавить(
		ОбменЭДОДокументооборот.ОписаниеРеквизитаПравилаАвтоматическогоСозданияОбъектов(
			"Организация", Нстр("ru = 'Организация'")));
	ОписаниеРеквизитов.РеквизитыШапки.Добавить(
		ОбменЭДОДокументооборот.ОписаниеРеквизитаПравилаАвтоматическогоСозданияОбъектов(
			"ОсновнойФайлЭлектронногоДокумента", Нстр("ru = 'Файл электронного документа (основной)'")));
	ОписаниеРеквизитов.РеквизитыШапки.Добавить(
		ОбменЭДОДокументооборот.ОписаниеРеквизитаПравилаАвтоматическогоСозданияОбъектов(
			"ТипЭлектронногоДокумента", Нстр("ru = 'Тип электронного документа'")));
	
КонецПроцедуры

// Дополняет описание реквизитов правил автоматического создания объектов описанием реквизитов зависящих от вида (типа, формата) электронного документа.
//
// Параметры:
//	ОписаниеРеквизитов - см. ОбменЭДОДокументооборот.ОписаниеРеквизитовПравилАвтоматическогоСозданияОбъектов
//	Вид - СправочникСсылка.ВидыДокументовЭДО - Вид электронного документа.
//	Тип - ПеречислениеСсылка.ТипыДокументовЭДО - Тип электронного документа.
//	Формат - Строка - Формат электронного документа.
//
Процедура ОписаниеРеквизитовПравилАвтоматическогоСозданияОбъектовЗависящихОтВидаТипаФормата(ОписаниеРеквизитов, Вид, Тип, Формат) Экспорт
	
	ЭтоПрикладнойТипЭлектронногоДокумента = 
		ИнтеграцияЭДО.ПрикладныеТипыЭлектронныхДокументов().Найти(Тип) <> Неопределено //@skip-check invocation-parameter-type-intersect
			Или Тип = Перечисления.ТипыДокументовЭДО.Прикладной;
	
	Если Не ЭтоПрикладнойТипЭлектронногоДокумента Тогда
		ОписаниеРеквизитов.РеквизитыШапки.Добавить(
			ОбменЭДОДокументооборот.ОписаниеРеквизитаПравилаАвтоматическогоСозданияОбъектов(
				"Валюта", Нстр("ru = 'Валюта'")));
		ОписаниеРеквизитов.РеквизитыШапки.Добавить(
			ОбменЭДОДокументооборот.ОписаниеРеквизитаПравилаАвтоматическогоСозданияОбъектов(
				"Сумма", Нстр("ru = 'Сумма'")));
		ОписаниеРеквизитов.РеквизитыШапки.Добавить(
			ОбменЭДОДокументооборот.ОписаниеРеквизитаПравилаАвтоматическогоСозданияОбъектов(
				"СуммаНДС", Нстр("ru = 'Сумма НДС'")));
		
		ОписаниеРеквизитов.ТабличныеЧасти.Добавить(ОписаниеТабличнойЧастиТовары());
	КонецЕсли;
	
КонецПроцедуры

// Создает объект документооборота по данным электронного документа.
//
// Параметры:
//	ДанныеЭлектронногоДокумента - см. ОтражениеВУчетеЭДО.НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете
//	ДанныеРазбора - см. ЭлектронныеДокументыЭДО.ДанныеДокументаДляЗагрузкиПросмотра
//	СпособОбработки - см. ОтражениеВУчетеЭДО.СпособОбработкиДокумента
//	ОбъектыУчета - Массив из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - Список ранее созданных объектов учета.
//	СтандартнаяОбработка - Булево - Признак стандартной обработки.
//
Процедура ОтразитьДанныеЭлектронногоДокумента(
		ДанныеЭлектронногоДокумента, ДанныеРазбора, СпособОбработки, ОбъектыУчета, СтандартнаяОбработка) Экспорт
	
	ПараметрыОтражения = НовыеПараметрыОтраженияЭлектронногоДокумента();
	ПараметрыОтражения.ДанныеЭлектронногоДокумента = ДанныеЭлектронногоДокумента;
	ПараметрыОтражения.ДанныеРазбора = ДанныеРазбора;
	ПараметрыОтражения.СпособОбработки = СпособОбработки;
	
	КлючНастройки = ОбменЭДОДокументооборотКлиентСервер.КлючНастройкиАвтоматическогоСозданияОбъекта();
	ЗаполнитьЗначенияСвойств(КлючНастройки, ДанныеЭлектронногоДокумента);
	ПравилоОтраженияОбъекта = ОбменЭДОДокументооборот.НастройкаАвтоматическогоСозданияОбъекта(КлючНастройки);
	
	Если Не ЗначениеЗаполнено(ПравилоОтраженияОбъекта) Тогда
		СтандартнаяОбработка = Ложь;
		ТекстСообщения = 
			НСтр("ru = 'Не удалось создать документ базы данных, т.к. не указано правило автоматического создания'");
		ПодробныйТекст = 
			СтрШаблон(
				НСтр("ru='Не удалось отразить документ %1, т.к. не указано правило автоматического создания'"),
				ДанныеЭлектронногоДокумента.ЭлектронныйДокумент
			);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Заполнение документа на основе ЭД.'"),
			ПодробныйТекст, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ВедетсяУчетТоваровУслуг = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ПравилоОтраженияОбъекта, "ВидДокумента.ВестиУчетТоваровИУслуг");
	
	НаборЗаписей = РегистрыСведений.КонтрольСопоставленияНоменклатурыЭДО.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(ДанныеЭлектронногоДокумента.ЭлектронныйДокумент);
	НаборЗаписей.Прочитать();
	
	Если ВедетсяУчетТоваровУслуг И НаборЗаписей.Количество() > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекстСообщения = 
			НСтр("ru = 'Не удалось создать документ базы данных, т.к. не удалось сопоставить номенклатуру'");
		ПодробныйТекст = 
			СтрШаблон(
				НСтр("ru='Не удалось отразить документ %1, т.к. не удалось сопоставить номенклатуру'"),
				ДанныеЭлектронногоДокумента.ЭлектронныйДокумент
			);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Заполнение документа на основе ЭД.'"),
			ПодробныйТекст, ТекстСообщения);
		Возврат;
		
	ИначеЕсли Не ВедетсяУчетТоваровУслуг Тогда
		
		НаборЗаписей.Очистить();
		УстановитьПривилегированныйРежим(Истина);
		НаборЗаписей.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	ОбъектУчета = Неопределено;
	Если ЗначениеЗаполнено(ОбъектыУчета) Тогда
		ОбъектУчета = ОбъектыУчета[0];
	КонецЕсли;
	
	ТекстСообщенияОбОшибке = "";
	
	СоздатьОбновитьОбъектУчета(ПравилоОтраженияОбъекта, ПараметрыОтражения, ОбъектУчета, ТекстСообщенияОбОшибке);
	
	Если ЗначениеЗаполнено(ТекстСообщенияОбОшибке) Тогда
		ВызватьИсключение ТекстСообщенияОбОшибке;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектУчета) Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ЗначениеЗаполнено(ОбъектыУчета) Тогда
			ОбъектыУчета[0] = ОбъектУчета;
		Иначе
			ОбъектыУчета.Добавить(ОбъектУчета);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает описание табличной части Товары документа предприятия для описания реквизитов правил автоматического создания объектов.
//
// Возвращаемое значение:
//	см. ОбменЭДОДокументооборот.ОписаниеТабличнойЧастиПравилаАвтоматическогоСозданияОбъектов.
//
Функция ОписаниеТабличнойЧастиТовары()
	
	ТабличнаяЧастьТовары = ОбменЭДОДокументооборот.ОписаниеТабличнойЧастиПравилаАвтоматическогоСозданияОбъектов(
		"Товары", Нстр("ru = 'Товары и услуги'"));
	
	ТабличнаяЧастьТовары.Реквизиты.Добавить(
		ОбменЭДОДокументооборот.ОписаниеРеквизитаПравилаАвтоматическогоСозданияОбъектов(
			"Номенклатура", Нстр("ru = 'Товар, услуга'")));
	ТабличнаяЧастьТовары.Реквизиты.Добавить(
		ОбменЭДОДокументооборот.ОписаниеРеквизитаПравилаАвтоматическогоСозданияОбъектов(
			"Количество", Нстр("ru = 'Количество'")));
	ТабличнаяЧастьТовары.Реквизиты.Добавить(
		ОбменЭДОДокументооборот.ОписаниеРеквизитаПравилаАвтоматическогоСозданияОбъектов(
			"ЕдиницаИзмерения", Нстр("ru = 'Единица'")));
	ТабличнаяЧастьТовары.Реквизиты.Добавить(
		ОбменЭДОДокументооборот.ОписаниеРеквизитаПравилаАвтоматическогоСозданияОбъектов(
			"Цена", Нстр("ru = 'Цена'")));
	ТабличнаяЧастьТовары.Реквизиты.Добавить(
		ОбменЭДОДокументооборот.ОписаниеРеквизитаПравилаАвтоматическогоСозданияОбъектов(
			"СтавкаНДС", Нстр("ru = '% НДС'")));
	ТабличнаяЧастьТовары.Реквизиты.Добавить(
		ОбменЭДОДокументооборот.ОписаниеРеквизитаПравилаАвтоматическогоСозданияОбъектов(
			"СуммаНДС", Нстр("ru = 'Сумма НДС'")));
	ТабличнаяЧастьТовары.Реквизиты.Добавить(
		ОбменЭДОДокументооборот.ОписаниеРеквизитаПравилаАвтоматическогоСозданияОбъектов(
			"Сумма", Нстр("ru = 'Сумма'")));
			
	Возврат ТабличнаяЧастьТовары;
	
КонецФункции

// Конструктор параметров отражения в учете электронного документа.
//
// Возвращаемое значение:
//	Структура:
//		* ДанныеЭлектронногоДокумента - см. ОтражениеВУчетеЭДО.НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете
//		* ДанныеРазбора - см. ЭлектронныеДокументыЭДО.ДанныеДокументаДляЗагрузкиПросмотра
//		* СпособОбработки - см. ОтражениеВУчетеЭДО.СпособОбработкиДокумента
//
Функция НовыеПараметрыОтраженияЭлектронногоДокумента()
	
	ПараметрыОтражения = Новый Структура;
	ПараметрыОтражения.Вставить(
		"ДанныеЭлектронногоДокумента", ОтражениеВУчетеЭДО.НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете());
	ПараметрыОтражения.Вставить("ДанныеРазбора", Неопределено);
	ПараметрыОтражения.Вставить("СпособОбработки", "");
	
	Возврат ПараметрыОтражения;
	
КонецФункции

// Выполняет создание (обновление) объекта учета.
//
// Параметры:
//	ПравилоОтраженияОбъекта - см. ОбменЭДОДокументооборот.НастройкаАвтоматическогоСозданияОбъекта
//	ПараметрыОтражения - см. НовыеПараметрыОтраженияЭлектронногоДокумента
//	ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО - Объект учета.
//	ТекстСообщенияОбОшибке - Строка - Текст сообщения об ошибке, возникшей во время процедуры создания (обновления) объекта.
//
Процедура СоздатьОбновитьОбъектУчета(ПравилоОтраженияОбъекта, ПараметрыОтражения, ОбъектУчета = Неопределено, ТекстСообщенияОбОшибке = "")
	
	ВходящиеДанные = ВходящиеДанныеПоДаннымЭлектронногоДокумента(ПараметрыОтражения);
	ИсточникДанных = ОбработкаЗапросовXDTO.ИсточникВходящиеДанные(ВходящиеДанные, ПравилоОтраженияОбъекта);
	
	Если ЗначениеЗаполнено(ОбъектУчета) Тогда
		ИсточникДанных.ВнешнийОбъект.ID = Строка(ОбъектУчета.УникальныйИдентификатор());
		ИсточникДанных.ВнешнийОбъект.Тип = ОбщегоНазначения.ИмяТаблицыПоСсылке(ОбъектУчета);
		ИсточникДанных.Обновление = Истина;
	КонецЕсли;
	
	ОбъектУчета = ОбработкаЗапросовXDTO.СоздатьОбъектДО(ИсточникДанных, ТекстСообщенияОбОшибке);
	
КонецПроцедуры

#Область ВходящиеДанныеПоДаннымЭлектронногоДокумента

// Формирует входящие данные на основании электронного документа.
//
// Параметры:
//	ПараметрыОтражения - см. НовыеПараметрыОтраженияЭлектронногоДокумента
//
// Возвращаемое значение:
//	см. РаботаСИнтегрированнымиСистемами.НоваяСтруктураВходящихДанных
//
Функция ВходящиеДанныеПоДаннымЭлектронногоДокумента(ПараметрыОтражения)
	
	ВходящиеДанные = РаботаСИнтегрированнымиСистемами.НоваяСтруктураВходящихДанных();
	
	Формат = ПараметрыОтражения.ДанныеЭлектронногоДокумента.Формат;
	ТипДокумента = ПараметрыОтражения.ДанныеЭлектронногоДокумента.ТипДокумента;
	ОписаниеРеквизитов = ОбменЭДОДокументооборот.ОписаниеРеквизитовПравилАвтоматическогоСозданияОбъектов(
		ПараметрыОтражения.ДанныеЭлектронногоДокумента.ВидДокумента,
		ТипДокумента,
		Формат);
	
	ПоддерживаемыеФорматы = ЭлектронныеДокументыЭДО.ПоддерживаемыеФорматы();
	Если Формат = ПоддерживаемыеФорматы.CML208 Тогда
		
		// Нужен отдельный алгоритм, т. к. не заполняется НовыйЭД.ЗначениеРеквизита
		ДобавитьЗначенияРеквизитовВоВходящиеДанныеCML208(ВходящиеДанные, ОписаниеРеквизитов, ПараметрыОтражения);
		
	Иначе
		
		ДобавитьЗначенияРеквизитовШапкиОбъектаВоВходящиеДанные(ВходящиеДанные, ОписаниеРеквизитов, ПараметрыОтражения);
		ДобавитьЗначенияТабличныхЧастейОбъектаВоВходящиеДанные(ВходящиеДанные, ОписаниеРеквизитов, ПараметрыОтражения);
		
	КонецЕсли;
	
	Возврат ВходящиеДанные;
		
КонецФункции

// Добавляет во входящие данные значения реквизитов шапки объекта.
//
// Параметры:
//	ВходящиеДанные - см. РаботаСИнтегрированнымиСистемами.НоваяСтруктураВходящихДанных
//	ОписаниеРеквизитов - см. ОбменЭДОДокументооборот.ОписаниеРеквизитовПравилАвтоматическогоСозданияОбъектов
//	ПараметрыОтражения - см. НовыеПараметрыОтраженияЭлектронногоДокумента
//
Процедура ДобавитьЗначенияРеквизитовШапкиОбъектаВоВходящиеДанные(ВходящиеДанные, ОписаниеРеквизитов, ПараметрыОтражения)
	
	ДеревоЭлектронногоДокумента = УпрощенноеДеревоЭлектронногоДокумента();
	Если ТипЗнч(ПараметрыОтражения.ДанныеРазбора) = Тип("Структура")
			И ПараметрыОтражения.ДанныеРазбора.Свойство("НовыйЭД")
			И ЗначениеЗаполнено(ПараметрыОтражения.ДанныеРазбора.НовыйЭД.ЗначениеРеквизита) Тогда
		ДеревоЭлектронногоДокумента = ПараметрыОтражения.ДанныеРазбора.НовыйЭД.ЗначениеРеквизита;
	КонецЕсли;
	
	Для Каждого ОписаниеРеквизита Из ОписаниеРеквизитов.РеквизитыШапки Цикл
		Если ОписаниеРеквизита.Имя = "Контрагент" Тогда
			ДобавитьКонтрагентаВоВходящиеДанные(
				ВходящиеДанные, ОписаниеРеквизита.Имя, ПараметрыОтражения.ДанныеЭлектронногоДокумента.Отправитель);
		ИначеЕсли ОписаниеРеквизита.Имя = "Организация" Тогда
			ДобавитьОрганизациюВоВходящиеДанные(
				ВходящиеДанные, ОписаниеРеквизита.Имя, ПараметрыОтражения.ДанныеЭлектронногоДокумента.Получатель);
		ИначеЕсли ОписаниеРеквизита.Имя = "Валюта" Тогда
			Валюта = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
				ДеревоЭлектронногоДокумента, ПутьКДаннымВалютыЭлектронногоДокумента(ПараметрыОтражения), Ложь); // Строка
			ДобавитьВалютуВоВходящиеДанные(ВходящиеДанные, ОписаниеРеквизита.Имя, Валюта);
		ИначеЕсли ОписаниеРеквизита.Имя = "НомерЭлектронногоДокумента" Тогда
			НомерЭлектронногоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
				ДеревоЭлектронногоДокумента, ПутьКДаннымНомераЭлектронногоДокумента(ПараметрыОтражения), Ложь);
			РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитВоВходящиеДанные(
				ВходящиеДанные, ОписаниеРеквизита.Имя, НомерЭлектронногоДокумента);
		ИначеЕсли ОписаниеРеквизита.Имя = "ДатаЭлектронногоДокумента" Тогда
			ДатаЭлектронногоДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
				ДеревоЭлектронногоДокумента, ПутьКДаннымДатыЭлектронногоДокумента(ПараметрыОтражения), Ложь);
			РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитВоВходящиеДанные(
				ВходящиеДанные, ОписаниеРеквизита.Имя, ДатаЭлектронногоДокумента);
		ИначеЕсли ОписаниеРеквизита.Имя = "ВидЭлектронногоДокумента" Тогда
			ДобавитьВидЭлектронногоДокументаВоВходящиеДанные(
				ВходящиеДанные, ОписаниеРеквизита.Имя, ПараметрыОтражения.ДанныеЭлектронногоДокумента.ВидДокумента);
		ИначеЕсли ОписаниеРеквизита.Имя = "ТипЭлектронногоДокумента" Тогда
			РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитВоВходящиеДанные(
				ВходящиеДанные,
				ОписаниеРеквизита.Имя,
				ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(ПараметрыОтражения.ДанныеЭлектронногоДокумента.ТипДокумента));
		ИначеЕсли ОписаниеРеквизита.Имя = "Сумма" Тогда
			СуммаДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
				ДеревоЭлектронногоДокумента, ПутьКДаннымСуммыЭлектронногоДокумента(ПараметрыОтражения), Ложь);
			РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитВоВходящиеДанные(
				ВходящиеДанные, ОписаниеРеквизита.Имя, СуммаДокумента);
		ИначеЕсли ОписаниеРеквизита.Имя = "СуммаНДС" Тогда
			СуммаНДСДокумента = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
				ДеревоЭлектронногоДокумента, ПутьКДаннымСуммыНДСЭлектронногоДокумента(ПараметрыОтражения), Ложь);
			Если ТипЗнч(СуммаНДСДокумента) = Тип("Структура") И СуммаНДСДокумента.Свойство("Сумма") Тогда
				СуммаНДСДокумента = СуммаНДСДокумента.Сумма;
			КонецЕсли;
			РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитВоВходящиеДанные(
				ВходящиеДанные, ОписаниеРеквизита.Имя, СуммаНДСДокумента);
		ИначеЕсли ОписаниеРеквизита.Имя = "ОсновнойФайлЭлектронногоДокумента" Тогда
			ДобавитьФайлВоВходящиеДанные(
				ВходящиеДанные,
				ОписаниеРеквизита.Имя,
				ПараметрыОтражения.ДанныеЭлектронногоДокумента.ДанныеОсновногоФайла);
		ИначеЕсли ОписаниеРеквизита.Имя = "ДополнительныйФайлЭлектронногоДокумента" Тогда
			ДобавитьФайлВоВходящиеДанные(
				ВходящиеДанные,
				ОписаниеРеквизита.Имя,
				ПараметрыОтражения.ДанныеЭлектронногоДокумента.ДанныеДополнительногоФайла);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет во входящие данные значения реквизитов шапки объекта.
//
// Параметры:
//	ВходящиеДанные - см. РаботаСИнтегрированнымиСистемами.НоваяСтруктураВходящихДанных
//	ОписаниеРеквизитов - см. ОбменЭДОДокументооборот.ОписаниеРеквизитовПравилАвтоматическогоСозданияОбъектов
//	ПараметрыОтражения - см. НовыеПараметрыОтраженияЭлектронногоДокумента
//
Процедура ДобавитьЗначенияРеквизитовВоВходящиеДанныеCML208(ВходящиеДанные, ОписаниеРеквизитов, ПараметрыОтражения)
	
	ДеревоРазбора = ПараметрыОтражения.ДанныеРазбора.ДеревоРазбора;
	НовыйЭД = ПараметрыОтражения.ДанныеРазбора.НовыйЭД;
	
	Для Каждого ОписаниеРеквизита Из ОписаниеРеквизитов.РеквизитыШапки Цикл
		Если ОписаниеРеквизита.Имя = "Контрагент" Тогда
			ДобавитьКонтрагентаВоВходящиеДанные(
				ВходящиеДанные, ОписаниеРеквизита.Имя, ПараметрыОтражения.ДанныеЭлектронногоДокумента.Отправитель);
		ИначеЕсли ОписаниеРеквизита.Имя = "Организация" Тогда
			ДобавитьОрганизациюВоВходящиеДанные(
				ВходящиеДанные, ОписаниеРеквизита.Имя, ПараметрыОтражения.ДанныеЭлектронногоДокумента.Получатель);
		ИначеЕсли ОписаниеРеквизита.Имя = "Валюта" Тогда
			Валюта = 
				ПолучитьЗначениеРеквизитаДерева(НовыйЭД, ОписаниеРеквизита.Имя, ДеревоРазбора); // Строка
			ДобавитьВалютуВоВходящиеДанные(ВходящиеДанные, ОписаниеРеквизита.Имя, Валюта);
		ИначеЕсли ОписаниеРеквизита.Имя = "НомерЭлектронногоДокумента" Тогда
			НомерЭлектронногоДокумента = 
				ПолучитьЗначениеРеквизитаДерева(НовыйЭД, "Номер", ДеревоРазбора);
			РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитВоВходящиеДанные(
				ВходящиеДанные, "НомерЭлектронногоДокумента", НомерЭлектронногоДокумента);
		ИначеЕсли ОписаниеРеквизита.Имя = "ДатаЭлектронногоДокумента" Тогда
			ДатаЭлектронногоДокумента = 
				ПолучитьЗначениеРеквизитаДерева(НовыйЭД, "Дата", ДеревоРазбора);
			РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитВоВходящиеДанные(
				ВходящиеДанные, "ДатаЭлектронногоДокумента", ДатаЭлектронногоДокумента);
		ИначеЕсли ОписаниеРеквизита.Имя = "ВидЭлектронногоДокумента" Тогда
			ДобавитьВидЭлектронногоДокументаВоВходящиеДанные(
				ВходящиеДанные, ОписаниеРеквизита.Имя, ПараметрыОтражения.ДанныеЭлектронногоДокумента.ВидДокумента);
		ИначеЕсли ОписаниеРеквизита.Имя = "ТипЭлектронногоДокумента" Тогда
			РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитВоВходящиеДанные(
				ВходящиеДанные,
				ОписаниеРеквизита.Имя,
				ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(ПараметрыОтражения.ДанныеЭлектронногоДокумента.ТипДокумента));
		ИначеЕсли ОписаниеРеквизита.Имя = "Сумма" Тогда
			СуммаДокумента = 
				ПолучитьЗначениеРеквизитаДерева(НовыйЭД, ОписаниеРеквизита.Имя, ДеревоРазбора);
			РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитВоВходящиеДанные(
				ВходящиеДанные, ОписаниеРеквизита.Имя, СуммаДокумента);
		ИначеЕсли ОписаниеРеквизита.Имя = "СуммаНДС" Тогда
			СуммаНДСДокумента = 
				ПолучитьЗначениеРеквизитаДерева(НовыйЭД, "СуммаНалогаИтог", ДеревоРазбора);
			РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитВоВходящиеДанные(
				ВходящиеДанные, "СуммаНДС", СуммаНДСДокумента);
		ИначеЕсли ОписаниеРеквизита.Имя = "ОсновнойФайлЭлектронногоДокумента" Тогда
			ДобавитьФайлВоВходящиеДанные(
				ВходящиеДанные,
				ОписаниеРеквизита.Имя,
				ПараметрыОтражения.ДанныеЭлектронногоДокумента.ДанныеОсновногоФайла);
		ИначеЕсли ОписаниеРеквизита.Имя = "ДополнительныйФайлЭлектронногоДокумента" Тогда
			ДобавитьФайлВоВходящиеДанные(
				ВходящиеДанные,
				ОписаниеРеквизита.Имя,
				ПараметрыОтражения.ДанныеЭлектронногоДокумента.ДанныеДополнительногоФайла);
		КонецЕсли;
	КонецЦикла;
	
	ИмяТабличнойЧасти = "Товары";
	НомерСтроки = 0;
	Для Каждого Строка Из НовыйЭД.Строки Цикл
		
		Если Не Строка.Реквизит = "СтрокаТЧ" Тогда
			Продолжить;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
		СтрокиТоварыУслуги = Строка.Строки;
		
		СтруктураСтрокиТоваров = Новый Структура;
		
		Для Каждого СтрокаТоварыУслуги Из СтрокиТоварыУслуги Цикл
			
			СтруктураСтрокиТоваров.Вставить(СтрокаТоварыУслуги.Реквизит, СтрокаТоварыУслуги.ЗначениеРеквизита);
			
		КонецЦикла;
		
		ЦенаВключаетНДС = СтруктураСтрокиТоваров.ЦенаВключаетНДС; 
		ЗначениеСтавкиНДС = СтруктураСтрокиТоваров.СтавкаНДС;
		Для Каждого СтрокаТоварыУслуги Из СтрокиТоварыУслуги Цикл
			
			Если СтрокаТоварыУслуги.Реквизит = "Количество"
				Или СтрокаТоварыУслуги.Реквизит = "СуммаНДС" Тогда
				
				РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитТаблицыВоВходящиеДанные(
					ВходящиеДанные, ИмяТабличнойЧасти, НомерСтроки - 1,
					СтрокаТоварыУслуги.Реквизит, СтрокаТоварыУслуги.ЗначениеРеквизита);
					
			ИначеЕсли СтрокаТоварыУслуги.Реквизит = "Сумма" Тогда
				
				Сумма = СтруктураСтрокиТоваров.Сумма + СтруктураСтрокиТоваров.СуммаНДС;
				РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитТаблицыВоВходящиеДанные(
					ВходящиеДанные, ИмяТабличнойЧасти, НомерСтроки - 1,
					СтрокаТоварыУслуги.Реквизит, Сумма);
				
			ИначеЕсли СтрокаТоварыУслуги.Реквизит = "Цена" Тогда
				
				Цена = СтрокаТоварыУслуги.ЗначениеРеквизита;
				Если ЗначениеЗаполнено(ЗначениеСтавкиНДС) И ЦенаВключаетНДС Тогда
					
					СтавкаНДЧислом = УчетНДС.ЗначениеСтавкиНДС(ЗначениеСтавкиНДС);
					Цена = Цена - ДелопроизводствоКлиентСервер.РассчитатьСуммуНДС(Цена, СтавкаНДЧислом);
					
				КонецЕсли;
				
				РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитТаблицыВоВходящиеДанные(
					ВходящиеДанные, ИмяТабличнойЧасти, НомерСтроки - 1,
					СтрокаТоварыУслуги.Реквизит, Цена);
					
				СтавкаНДС = ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(ЗначениеСтавкиНДС); //@skip-check invocation-parameter-type-intersect
				
				РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитТаблицыВоВходящиеДанные(
					ВходящиеДанные, ИмяТабличнойЧасти, НомерСтроки - 1,
					"СтавкаНДС", СтавкаНДС);
				
			ИначеЕсли СтрокаТоварыУслуги.Реквизит = "ЕдиницаИзмерения" Тогда
				
				СтрокаЕИ = ДеревоРазбора.Строки.Найти(СтрокаТоварыУслуги.ЗначениеРеквизита, "ИндексСтроки", Истина);
				ИмяЕдиницыИзмерения = СтрокаЕИ.ОписаниеОбъекта;
				
				ОбъектXDTO = Неопределено;
				Если ЗначениеЗаполнено(ИмяЕдиницыИзмерения) Тогда
					ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMMeasurementUnit");
					ОбъектXDTO.name = ИмяЕдиницыИзмерения; //@skip-check property-return-type
					ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.СоздатьObjectID("", ""); //@skip-check property-return-type
					ОбъектXDTO.externalObject = ОбработкаЗапросовXDTO.СоздатьОбъект("ExternalObject"); //@skip-check property-return-type
				КонецЕсли;
				
				РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитТаблицыВоВходящиеДанные(
					ВходящиеДанные, ИмяТабличнойЧасти, НомерСтроки - 1, "ЕдиницаИзмерения", ОбъектXDTO);
			
			ИначеЕсли СтрокаТоварыУслуги.Реквизит = "Сопоставление" Тогда
				
				Сопоставление = СтрокаТоварыУслуги.ЗначениеРеквизита;
				АртикулНоменклатуры = "";
				НаименованиеНоменклатуры = "";
				Если Не ЗначениеЗаполнено(Сопоставление) Тогда
					
					Для Каждого СтрокаТоварыУслугиВнутренняя Из СтрокиТоварыУслуги Цикл
						
						Если СтрокаТоварыУслугиВнутренняя.Реквизит <> "Наименование" Тогда
							
							НаименованиеНоменклатуры = СтрокаТоварыУслугиВнутренняя.ЗначениеРеквизита;
							Продолжить;
							
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе
					
					НаименованиеНоменклатуры = Сопоставление.Наименование;
					АртикулНоменклатуры = Сопоставление.Артикул;
					
				КонецЕсли;
				
				ОбъектXDTO = Неопределено;
				Если ЗначениеЗаполнено(ИмяЕдиницыИзмерения) Тогда
					ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMProduct");
					ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.СоздатьObjectID("", ""); //@skip-check property-return-type
					ОбъектXDTO.externalObject = ОбработкаЗапросовXDTO.СоздатьОбъект("ExternalObject"); //@skip-check property-return-type
					Если ЗначениеЗаполнено(НаименованиеНоменклатуры) Тогда
						ОбъектXDTO.name = НаименованиеНоменклатуры; //@skip-check property-return-type
					КонецЕсли;
					Если ЗначениеЗаполнено(АртикулНоменклатуры) Тогда
						ОбъектXDTO.article = АртикулНоменклатуры; //@skip-check property-return-type
					КонецЕсли;
				КонецЕсли;
				
				РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитТаблицыВоВходящиеДанные(
					ВходящиеДанные, ИмяТабличнойЧасти, НомерСтроки - 1, "Номенклатура", ОбъектXDTO);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует упрощенное дерево электронного документа.
//
// Возвращаемое значение:
//	ДеревоЗначений.
//
Функция УпрощенноеДеревоЭлектронногоДокумента()
	
	ДеревоЭлектронногоДокумента = Новый ДеревоЗначений;
	ДеревоЭлектронногоДокумента.Колонки.Добавить("ПолныйПуть");
	
	Возврат ДеревоЭлектронногоДокумента;
	
КонецФункции

// Наполняет входящие данные значениями табличных частей объекта.
//
// Параметры:
//	ВходящиеДанные - см. РаботаСИнтегрированнымиСистемами.НоваяСтруктураВходящихДанных
//	ОписаниеРеквизитов - см. ОбменЭДОДокументооборот.ОписаниеРеквизитовПравилАвтоматическогоСозданияОбъектов
//	ПараметрыОтражения - см. НовыеПараметрыОтраженияЭлектронногоДокумента
//
Процедура ДобавитьЗначенияТабличныхЧастейОбъектаВоВходящиеДанные(ВходящиеДанные, ОписаниеРеквизитов, ПараметрыОтражения)
	
	Для Каждого ТабличнаяЧасть Из ОписаниеРеквизитов.ТабличныеЧасти Цикл // Структура
		Если ТабличнаяЧасть.Имя = "Товары" Тогда
			ДобавитьТабличнуюЧастьТоварыВоВходящиеДанные(ВходящиеДанные, ПараметрыОтражения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет описание контрагента во входящие данные.
//
// Параметры:
//	ВходящиеДанные - см. РаботаСИнтегрированнымиСистемами.НоваяСтруктураВходящихДанных
//	ИмяРеквизита - Строка - Имя реквизита, под которым будет помещенж описание во входящие данные.
//	Контрагент - СправочникСсылка.Контрагенты - Контрагент, описание которого будет помещено во входящие данные.
//
Процедура ДобавитьКонтрагентаВоВходящиеДанные(ВходящиеДанные, ИмяРеквизита, Контрагент)
	
	ОбъектXDTO = Неопределено;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ИменаРеквизитовОбъекта = Новый Структура;
		ИменаРеквизитовОбъекта.Вставить("inn", "ИНН");
		ИменаРеквизитовОбъекта.Вставить("kpp", "КПП");
		ИменаРеквизитовОбъекта.Вставить("okpo", "КодПоОКПО");
		ИменаРеквизитовОбъекта.Вставить("fullName", "НаименованиеПолное");
		ИменаРеквизитовОбъекта.Вставить("privatePerson", "ФизЛицо");
		ИменаРеквизитовОбъекта.Вставить("legalPrivatePerson", "ЮрФизЛицо");
		
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, ИменаРеквизитовОбъекта);
		
		ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCorrespondent");
		Для Каждого Реквизит Из РеквизитыОбъекта Цикл
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЦикла;
		ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Контрагент); //@skip-check property-return-type
	КонецЕсли;
	
	РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитВоВходящиеДанные(ВходящиеДанные, ИмяРеквизита, ОбъектXDTO);
	
КонецПроцедуры

// Добавляет описание организации во входящие данные.
//
// Параметры:
//	ВходящиеДанные - см. РаботаСИнтегрированнымиСистемами.НоваяСтруктураВходящихДанных
//	ИмяРеквизита - Строка - Имя реквизита, под которым будет помещено описание во входящие данные.
//	Организация - СправочникСсылка.Организации - Организация, описание которой будет помещено во входящие данные.
//
Процедура ДобавитьОрганизациюВоВходящиеДанные(ВходящиеДанные, ИмяРеквизита, Организация)
	
	ОбъектXDTO = Неопределено;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ИменаРеквизитовОбъекта = Новый Структура;
		ИменаРеквизитовОбъекта.Вставить("inn", "ИНН");
		ИменаРеквизитовОбъекта.Вставить("kpp", "КПП");
		ИменаРеквизитовОбъекта.Вставить("okpo", "КодПоОКПО");
		ИменаРеквизитовОбъекта.Вставить("fullName", "НаименованиеПолное");
		ИменаРеквизитовОбъекта.Вставить("legalPrivatePerson", "ЮрФизЛицо");
		ИменаРеквизитовОбъекта.Вставить("VATpayer", "ПлательщикНДС");
		
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, ИменаРеквизитовОбъекта);
		
		ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMOrganization");
		Для Каждого Реквизит Из РеквизитыОбъекта Цикл
			ОбработкаЗапросовXDTO.ЗаполнитьСвойствоXDTOИзРеквизита(ОбъектXDTO, Реквизит.Ключ, Реквизит.Значение);
		КонецЦикла;
		ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(Организация); //@skip-check property-return-type
	КонецЕсли;
	
	РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитВоВходящиеДанные(ВходящиеДанные, ИмяРеквизита, ОбъектXDTO);
	
КонецПроцедуры

// Добавляет описание валюты во входящие данные.
//
// Параметры:
//	ВходящиеДанные - см. РаботаСИнтегрированнымиСистемами.НоваяСтруктураВходящихДанных
//	ИмяРеквизита - Строка - Имя реквизита, под которым будет помещено описание во входящие данные.
//	КодВалюты - Строка - Код валюты.
//
Процедура ДобавитьВалютуВоВходящиеДанные(ВходящиеДанные, ИмяРеквизита, КодВалюты)
	
	ОбъектXDTO = Неопределено;
	
	Если ЗначениеЗаполнено(КодВалюты) Тогда
		ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCurrency"); // ОбъектXDTO
		ОбъектXDTO.code = КодВалюты; //@skip-check property-return-type
		ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.СоздатьObjectID("", ""); //@skip-check property-return-type
		ОбъектXDTO.externalObject = ОбработкаЗапросовXDTO.СоздатьОбъект("ExternalObject"); //@skip-check property-return-type
	КонецЕсли;
	
	РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитВоВходящиеДанные(ВходящиеДанные, ИмяРеквизита, ОбъектXDTO);
	
КонецПроцедуры

// Добавляет описание файла во входящие данные.
//
// Параметры:
//	ВходящиеДанные - см. РаботаСИнтегрированнымиСистемами.НоваяСтруктураВходящихДанных
//	ИмяРеквизита - Строка - Имя реквизита, под которым будет помещено описание во входящие данные.
//	Файл - Структура Из КлючИЗначение - Описание файла.
//
Процедура ДобавитьФайлВоВходящиеДанные(ВходящиеДанные, ИмяРеквизита, Файл)
	
	ОбъектXDTO = Неопределено;
	
	Если ЗначениеЗаполнено(Файл) Тогда
		ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMFile");
		Если ЗначениеЗаполнено(Файл.ИмяФайла) Тогда
			ОбъектXDTO.name = Файл.ИмяФайла; //@skip-check property-return-type
		КонецЕсли;
		Если ЗначениеЗаполнено(Файл.ДвоичныеДанные) Тогда
			ОбъектXDTO.binaryData = Файл.ДвоичныеДанные; //@skip-check property-return-type
		КонецЕсли;
		ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.СоздатьObjectID("", ""); //@skip-check property-return-type
	КонецЕсли;
	
	РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитВоВходящиеДанные(
		ВходящиеДанные, ИмяРеквизита, ОбъектXDTO);
	
КонецПроцедуры

// Добавляет описание вида электронного документа во входящие данные.
//
// Параметры:
//	ВходящиеДанные - см. РаботаСИнтегрированнымиСистемами.НоваяСтруктураВходящихДанных
//	ИмяРеквизита - Строка - Имя реквизита, под которым будет помещено описание во входящие данные.
//	ВидЭлектронногоДокумента - СправочникСсылка.ВидыДокументовЭДО - Вид электронного документа.
//
Процедура ДобавитьВидЭлектронногоДокументаВоВходящиеДанные(ВходящиеДанные, ИмяРеквизита, ВидЭлектронногоДокумента)
	
	ОбъектXDTO = Неопределено;
	
	Если ЗначениеЗаполнено(ВидЭлектронногоДокумента) Тогда
		ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMElectronicDocumentKind");
		ОбъектXDTO.name = Строка(ВидЭлектронногоДокумента); //@skip-check property-return-type
		ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.ПолучитьObjectIDПоСсылке(ВидЭлектронногоДокумента); //@skip-check property-return-type
	КонецЕсли;
	
	РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитВоВходящиеДанные(
		ВходящиеДанные, ИмяРеквизита, ОбъектXDTO);
	
КонецПроцедуры

// Добавляет описание табличной части Товары во входящие данные.
//
// Параметры:
//	ВходящиеДанные - см. РаботаСИнтегрированнымиСистемами.НоваяСтруктураВходящихДанных
//	ПараметрыОтражения - см. НовыеПараметрыОтраженияЭлектронногоДокумента
//
Процедура ДобавитьТабличнуюЧастьТоварыВоВходящиеДанные(ВходящиеДанные, ПараметрыОтражения)
	
	ИмяТабличнойЧасти = "Товары";
	
	ДеревоЭлектронногоДокумента = УпрощенноеДеревоЭлектронногоДокумента();
	Если ТипЗнч(ПараметрыОтражения.ДанныеРазбора) = Тип("Структура")
			И ПараметрыОтражения.ДанныеРазбора.Свойство("НовыйЭД")
			И ЗначениеЗаполнено(ПараметрыОтражения.ДанныеРазбора.НовыйЭД.ЗначениеРеквизита) Тогда
		ДеревоЭлектронногоДокумента = ПараметрыОтражения.ДанныеРазбора.НовыйЭД.ЗначениеРеквизита;
	КонецЕсли;
	
	ПутьКДаннымТаблицыТовары = ПутьКДаннымТаблицыТоварыЭлектронногоДокумента(ПараметрыОтражения);
	ЧастиПути = СтрРазделить(ПутьКДаннымТаблицыТовары, ".");
	
	Если ЧастиПути.Количество() > 1 Тогда
		
		СведенияОТоварах = ДеревоЭлектронногоДокумента;
		Путь = "";
		Для Каждого ЧастьПути Из ЧастиПути Цикл
			
			Путь = ?(Путь = "", Путь, Путь + ".") + ЧастьПути;
			СведенияОТоварах = СведенияОТоварах.Строки.Найти(
				Путь, "ПолныйПуть");// СтрокаДереваЗначений
			
			Если СведенияОТоварах = Неопределено Тогда
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		СведенияОТоварах = ДеревоЭлектронногоДокумента.Строки.Найти(
			ПутьКДаннымТаблицыТовары, "ПолныйПуть");// СтрокаДереваЗначений
		
	КонецЕсли;
	
	Если ТипЗнч(СведенияОТоварах) <> Тип("СтрокаДереваЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Для НомерСтроки = 1 По СведенияОТоварах.Строки.Количество() Цикл
		СведенияОТоваре = СведенияОТоварах.Строки[НомерСтроки - 1];
		
		// Количество
		КоличествоТовара = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОТоваре, ПутьКДаннымКоличестваТовараЭлектронногоДокумента(ПараметрыОтражения), Ложь);
		
		РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитТаблицыВоВходящиеДанные(
			ВходящиеДанные, ИмяТабличнойЧасти, НомерСтроки - 1, "Количество", КоличествоТовара);
		
		// Цена
		ЦенаТовара = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОТоваре, ПутьКДаннымЦеныТовараЭлектронногоДокумента(ПараметрыОтражения), Ложь);
		
		РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитТаблицыВоВходящиеДанные(
			ВходящиеДанные, ИмяТабличнойЧасти, НомерСтроки - 1, "Цена", ЦенаТовара);
		
		// Сумма
		СуммаТовара = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОТоваре, ПутьКДаннымСуммыТовараЭлектронногоДокумента(ПараметрыОтражения), Ложь);
		
		РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитТаблицыВоВходящиеДанные(
			ВходящиеДанные, ИмяТабличнойЧасти, НомерСтроки - 1, "Сумма", СуммаТовара);
		
		// Сумма НДС
		СуммаНДСТовара = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОТоваре, ПутьКДаннымСуммыНДСТовараЭлектронногоДокумента(ПараметрыОтражения), Ложь);
		
		РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитТаблицыВоВходящиеДанные(
			ВходящиеДанные, ИмяТабличнойЧасти, НомерСтроки - 1, "СуммаНДС", СуммаНДСТовара);
		
		// Ставка НДС
		ЗначениеСтавкиНДС = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОТоваре, ПутьКДаннымСтавкиНДСТовараЭлектронногоДокумента(ПараметрыОтражения), Ложь);
		
		СтавкаНДС = ОбработкаЗапросовXDTO.ПолучитьЗначениеПеречисленияXDTO(ЗначениеСтавкиНДС); //@skip-check invocation-parameter-type-intersect
		
		РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитТаблицыВоВходящиеДанные(
			ВходящиеДанные, ИмяТабличнойЧасти, НомерСтроки - 1, "СтавкаНДС", СтавкаНДС);
		
		// Единица изменения
		ИмяЕдиницыИзмерения = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОТоваре,
			ПутьКДаннымЕдиницыИзмеренияТовараЭлектронногоДокумента(ПараметрыОтражения).Наименование,
			Ложь);
		
		ОбъектXDTO = Неопределено;
		Если ЗначениеЗаполнено(ИмяЕдиницыИзмерения) Тогда
			ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMMeasurementUnit");
			ОбъектXDTO.name = ИмяЕдиницыИзмерения; //@skip-check property-return-type
			ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.СоздатьObjectID("", ""); //@skip-check property-return-type
			ОбъектXDTO.externalObject = ОбработкаЗапросовXDTO.СоздатьОбъект("ExternalObject"); //@skip-check property-return-type
		КонецЕсли;
		
		РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитТаблицыВоВходящиеДанные(
			ВходящиеДанные, ИмяТабличнойЧасти, НомерСтроки - 1, "ЕдиницаИзмерения", ОбъектXDTO);
		
		// Номенклатура
		ПутиКДаннымНоменклатуры = ПутьКДаннымТовараЭлектронногоДокумента(ПараметрыОтражения);
		
		СопоставленнаяНоменклатура = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СведенияОТоваре, ПутиКДаннымНоменклатуры.ДанныеСопоставления.Номенклатура, Ложь); // СправочникСсылка.Номенклатура
			
		Если Не ЗначениеЗаполнено(СопоставленнаяНоменклатура) Тогда
			НаименованиеНоменклатуры = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
				СведенияОТоваре, ПутиКДаннымНоменклатуры.БезСопоставления.Наименование, Ложь);
			АртикулНоменклатуры = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
				СведенияОТоваре, ПутиКДаннымНоменклатуры.БезСопоставления.Артикул, Ложь);
		Иначе
			РеквизитыНоменклатуры =
				ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СопоставленнаяНоменклатура, "Наименование, Артикул");
			НаименованиеНоменклатуры = РеквизитыНоменклатуры.Наименование;
			АртикулНоменклатуры = РеквизитыНоменклатуры.Артикул;
		КонецЕсли;
		
		ОбъектXDTO = Неопределено;
		Если ЗначениеЗаполнено(ИмяЕдиницыИзмерения) Тогда
			ОбъектXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMProduct");
			ОбъектXDTO.objectId = ОбработкаЗапросовXDTO.СоздатьObjectID("", ""); //@skip-check property-return-type
			ОбъектXDTO.externalObject = ОбработкаЗапросовXDTO.СоздатьОбъект("ExternalObject"); //@skip-check property-return-type
			Если ЗначениеЗаполнено(НаименованиеНоменклатуры) Тогда
				ОбъектXDTO.name = НаименованиеНоменклатуры; //@skip-check property-return-type
			КонецЕсли;
			Если ЗначениеЗаполнено(АртикулНоменклатуры) Тогда
				ОбъектXDTO.article = АртикулНоменклатуры; //@skip-check property-return-type
			КонецЕсли;
		КонецЕсли;
		
		РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитТаблицыВоВходящиеДанные(
			ВходящиеДанные, ИмяТабличнойЧасти, НомерСтроки - 1, "Номенклатура", ОбъектXDTO);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗначенияРеквизитовЭлектронныхДокументов

// Возвращает путь к коду валюты электроного документа.
//
// Параметры:
//	ПараметрыОтражения - см. НовыеПараметрыОтраженияЭлектронногоДокумента.
//
// Возвращаемое значение:
//	Строка -
//
Функция ПутьКДаннымВалютыЭлектронногоДокумента(ПараметрыОтражения)
	
	ВерсияФормата = ПараметрыОтражения.ДанныеЭлектронногоДокумента.Формат;
	ПоддерживаемыеФорматы = ОбменЭДОДокументооборотПовтИсп.ПоддерживаемыеФорматы();
	
	Если ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД_5_02.ИнформацияПродавца Тогда
		
		ПутьКДанным = "СведенияОСчетеФактуре.Валюта.Код";
		
	Иначе
		
		ПутьКДанным = "ВалютаКод";
		
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

// Возвращает путь к номеру электроного документа.
//
// Параметры:
//	ПараметрыОтражения - см. НовыеПараметрыОтраженияЭлектронногоДокумента.
//
// Возвращаемое значение:
//	Строка -
//
Функция ПутьКДаннымНомераЭлектронногоДокумента(ПараметрыОтражения)
	
	ПутьКДанным = "";
	
	ТипыДокументов = ОбменЭДОДокументооборотПовтИсп.ТипыДокументов();
	ПоддерживаемыеФорматы = ОбменЭДОДокументооборотПовтИсп.ПоддерживаемыеФорматы();
	
	ТипЭлектронногоДокумента = ПараметрыОтражения.ДанныеЭлектронногоДокумента.ТипДокумента;
	ВерсияФормата = ПараметрыОтражения.ДанныеЭлектронногоДокумента.Формат;
	
	Если ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ПередачаТоваров.ИнформацияПродавца Тогда
		ПутьКДанным = "НомерТоварнойНакладной";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ПередачаРабот.ИнформацияПродавца Тогда
		ПутьКДанным = "НомерАкта";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД.ИнформацияПродавца Тогда
		ПутьКДанным = "НомерДокумента";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПродавца Тогда
		ПутьКДанным = "НомерДокумента";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УКД2020.ИнформацияПродавца Тогда
		ПутьКДанным = "НомерДокумента";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УКД.ИнформацияПродавца Тогда
		ПутьКДанным = "НомерДокумента";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктОРасхождениях.ИнформацияПокупателя Тогда
		ПутьКДанным = "НомерДокумента";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктСверкиВзаиморасчетов.ИнформацияОтправителя Тогда
		ПутьКДанным = "НомерДокумента";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.СчетНаОплату101 Тогда
		ПутьКДанным = "НомерДокумента";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктПриемкиСтроительныхРаботУслуг.ИнформацияПодрядчика Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ДоговорныйДокумент101 Тогда
		ПутьКДанным = "ИнформацияДокумента.НомерДоговора";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ДоговорныйДокументXML.ИнформацияОтправителя Тогда
		ПутьКДанным = "";
	ИначеЕсли ТипЭлектронногоДокумента = ТипыДокументов.СоглашениеОбИзмененииСтоимости Тогда
		ПутьКДанным = "НомерДокумента"; 
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД_5_02.ИнформацияПродавца Тогда
		ПутьКДанным = "СведенияОСчетеФактуре.НомерДокумента";
	ИначеЕсли ТипЭлектронногоДокумента = ТипыДокументов.ТоварнаяНакладная
			Или ТипЭлектронногоДокумента = ТипыДокументов.АктВыполненныхРабот
			Или ТипЭлектронногоДокумента = ТипыДокументов.АктНаПередачуПрав Тогда
		ПутьКДанным = "Номер";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

// Возвращает путь к дате электроного документа.
//
// Параметры:
//	ПараметрыОтражения - см. НовыеПараметрыОтраженияЭлектронногоДокумента.
//
// Возвращаемое значение:
//	Строка -
//
Функция ПутьКДаннымДатыЭлектронногоДокумента(ПараметрыОтражения)
	
	ПутьКДанным = "";
	
	ТипыДокументов = ОбменЭДОДокументооборотПовтИсп.ТипыДокументов();
	ПоддерживаемыеФорматы = ОбменЭДОДокументооборотПовтИсп.ПоддерживаемыеФорматы();
	
	ТипЭлектронногоДокумента = ПараметрыОтражения.ДанныеЭлектронногоДокумента.ТипДокумента;
	ВерсияФормата = ПараметрыОтражения.ДанныеЭлектронногоДокумента.Формат;
	
	Если ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ПередачаТоваров.ИнформацияПродавца Тогда
		ПутьКДанным = "ДатаТоварнойНакладной";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ПередачаРабот.ИнформацияПродавца Тогда
		ПутьКДанным = "ДатаАкта";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД.ИнформацияПродавца Тогда
		ПутьКДанным = "ДатаДокумента";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПродавца Тогда
		ПутьКДанным = "ДатаДокумента";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УКД2020.ИнформацияПродавца Тогда
		ПутьКДанным = "ДатаДокумента";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УКД.ИнформацияПродавца Тогда
		ПутьКДанным = "ДатаДокумента";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктОРасхождениях.ИнформацияПокупателя Тогда
		ПутьКДанным = "ДатаДокумента";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктСверкиВзаиморасчетов.ИнформацияОтправителя Тогда
		ПутьКДанным = "ДатаДокумента";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.СчетНаОплату101 Тогда
		ПутьКДанным = "ДатаДокумента";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктПриемкиСтроительныхРаботУслуг.ИнформацияПодрядчика Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ДоговорныйДокумент101 Тогда
		ПутьКДанным = "ИнформацияДокумента.ДатаДоговора";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ДоговорныйДокументXML.ИнформацияОтправителя Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД_5_02.ИнформацияПродавца Тогда
		ПутьКДанным = "СведенияОСчетеФактуре.ДатаДокумента";
	ИначеЕсли ТипЭлектронногоДокумента = ТипыДокументов.ТоварнаяНакладная Тогда
		ПутьКДанным = "ДатаДокумента";
	ИначеЕсли ТипЭлектронногоДокумента = ТипыДокументов.ТоварнаяНакладная
			Или ТипЭлектронногоДокумента = ТипыДокументов.АктВыполненныхРабот
			Или ТипЭлектронногоДокумента = ТипыДокументов.АктНаПередачуПрав Тогда
		ПутьКДанным = "Дата";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

// Возвращает путь к сумме электроного документа.
//
// Параметры:
//	ПараметрыОтражения - см. НовыеПараметрыОтраженияЭлектронногоДокумента.
//
// Возвращаемое значение:
//	Строка -
//
Функция ПутьКДаннымСуммыЭлектронногоДокумента(ПараметрыОтражения)
	
	ПутьКДанным = "";
	
	ТипыДокументов = ОбменЭДОДокументооборотПовтИсп.ТипыДокументов();
	ПоддерживаемыеФорматы = ОбменЭДОДокументооборотПовтИсп.ПоддерживаемыеФорматы();
	
	ТипЭлектронногоДокумента = ПараметрыОтражения.ДанныеЭлектронногоДокумента.ТипДокумента;
	ВерсияФормата = ПараметрыОтражения.ДанныеЭлектронногоДокумента.Формат;
	
	Если ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ПередачаТоваров.ИнформацияПродавца Тогда
		ПутьКДанным = "ВсегоПоНакладной.СуммаСНДС";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ПередачаРабот.ИнформацияПродавца Тогда
		ПутьКДанным = "ОписаниеУслуги.СуммаСНДСИтого";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД.ИнформацияПродавца Тогда
		ПутьКДанным = "ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПродавца Тогда
		ПутьКДанным = "ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УКД2020.ИнформацияПродавца Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УКД.ИнформацияПродавца Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктОРасхождениях.ИнформацияПокупателя Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктСверкиВзаиморасчетов.ИнформацияОтправителя Тогда
		ПутьКДанным = "ВсегоКОплате.СтоимостьСНДС";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.СчетНаОплату101 Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктПриемкиСтроительныхРаботУслуг.ИнформацияПодрядчика Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ДоговорныйДокумент101 Тогда
		ПутьКДанным = "Предмет.ДатаДоговора";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ДоговорныйДокументXML.ИнформацияОтправителя Тогда
		ПутьКДанным = ""; 
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД_5_02.ИнформацияПродавца Тогда
		ПутьКДанным = "ТаблицаСчетаФактуры.ВсегоКОплате.СтоимостьСНалогом";
	ИначеЕсли ТипЭлектронногоДокумента = ТипыДокументов.ТоварнаяНакладная
			Или ТипЭлектронногоДокумента = ТипыДокументов.АктВыполненныхРабот
			Или ТипЭлектронногоДокумента = ТипыДокументов.АктНаПередачуПрав
			Или ТипЭлектронногоДокумента = ТипыДокументов.СоглашениеОбИзмененииСтоимости Тогда
		ПутьКДанным = "";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

// Возвращает путь к сумме НДС электроного документа.
//
// Параметры:
//	ПараметрыОтражения - см. НовыеПараметрыОтраженияЭлектронногоДокумента.
//
// Возвращаемое значение:
//	Строка -
//
Функция ПутьКДаннымСуммыНДСЭлектронногоДокумента(ПараметрыОтражения)
	
	ПутьКДанным = "";
	
	ТипыДокументов = ОбменЭДОДокументооборотПовтИсп.ТипыДокументов();
	ПоддерживаемыеФорматы = ОбменЭДОДокументооборотПовтИсп.ПоддерживаемыеФорматы();
	
	ТипЭлектронногоДокумента = ПараметрыОтражения.ДанныеЭлектронногоДокумента.ТипДокумента;
	ВерсияФормата = ПараметрыОтражения.ДанныеЭлектронногоДокумента.Формат;
	
	Если ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ПередачаТоваров.ИнформацияПродавца Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ПередачаРабот.ИнформацияПродавца Тогда
		ПутьКДанным = "ТаблицаУслуг.НомерСтроки.СуммаНДС";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД.ИнформацияПродавца Тогда
		ПутьКДанным = "СведенияОТоварах.НомерСтроки.СуммаНалога";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПродавца Тогда
		ПутьКДанным = "ВсегоКОплате.ВсегоСуммаНалога";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УКД2020.ИнформацияПродавца Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УКД.ИнформацияПродавца Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктОРасхождениях.ИнформацияПокупателя Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктСверкиВзаиморасчетов.ИнформацияОтправителя Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.СчетНаОплату101 Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктПриемкиСтроительныхРаботУслуг.ИнформацияПодрядчика Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ДоговорныйДокумент101 Тогда
		ПутьКДанным = "Предмет.НомерСтрокиТаблицы.СуммаНалога";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ДоговорныйДокументXML.ИнформацияОтправителя Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД_5_02.ИнформацияПродавца Тогда
		ПутьКДанным = "ТаблицаСчетаФактуры.ВсегоКОплате.СуммаНалога";
	ИначеЕсли ТипЭлектронногоДокумента = ТипыДокументов.ТоварнаяНакладная
			Или ТипЭлектронногоДокумента = ТипыДокументов.АктВыполненныхРабот
			Или ТипЭлектронногоДокумента = ТипыДокументов.АктНаПередачуПрав
			Или ТипЭлектронногоДокумента = ТипыДокументов.СоглашениеОбИзмененииСтоимости Тогда
		ПутьКДанным = "";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

// Возвращает путь к данным таблицы Товары электроного документа.
//
// Параметры:
//	ПараметрыОтражения - см. НовыеПараметрыОтраженияЭлектронногоДокумента.
//
// Возвращаемое значение:
//	Строка -
//
Функция ПутьКДаннымТаблицыТоварыЭлектронногоДокумента(ПараметрыОтражения)
	
	ПутьКДанным = "";
	
	ТипыДокументов = ОбменЭДОДокументооборотПовтИсп.ТипыДокументов();
	ПоддерживаемыеФорматы = ОбменЭДОДокументооборотПовтИсп.ПоддерживаемыеФорматы();
	
	ТипЭлектронногоДокумента = ПараметрыОтражения.ДанныеЭлектронногоДокумента.ТипДокумента;
	ВерсияФормата = ПараметрыОтражения.ДанныеЭлектронногоДокумента.Формат;
	
	Если ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ПередачаТоваров.ИнформацияПродавца Тогда
		ПутьКДанным = "ТаблицаТоваров";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ПередачаРабот.ИнформацияПродавца Тогда
		ПутьКДанным = "ТаблицаУслуг";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД.ИнформацияПродавца Тогда
		ПутьКДанным = "СведенияОТоварах";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПродавца Тогда
		ПутьКДанным = "СведенияОТоварах";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УКД2020.ИнформацияПродавца Тогда
		ПутьКДанным = "СведенияОТоварах";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УКД.ИнформацияПродавца Тогда
		ПутьКДанным = "СведенияОТоварах";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктОРасхождениях.ИнформацияПокупателя Тогда
		ПутьКДанным = "РезультатыПриемки";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктСверкиВзаиморасчетов.ИнформацияОтправителя Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.СчетНаОплату101 Тогда
		ПутьКДанным = "ТаблицаТоваров";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктПриемкиСтроительныхРаботУслуг.ИнформацияПодрядчика Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ДоговорныйДокумент101 Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ДоговорныйДокументXML.ИнформацияОтправителя Тогда
		ПутьКДанным = ""; 
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД_5_02.ИнформацияПродавца Тогда
		ПутьКДанным = "ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях";
	ИначеЕсли ТипЭлектронногоДокумента = ТипыДокументов.ТоварнаяНакладная
			Или ТипЭлектронногоДокумента = ТипыДокументов.АктВыполненныхРабот
			Или ТипЭлектронногоДокумента = ТипыДокументов.АктНаПередачуПрав
			Или ТипЭлектронногоДокумента = ТипыДокументов.СоглашениеОбИзмененииСтоимости Тогда
		ПутьКДанным = "СведенияОТоварах";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

// Возвращает путь к данным цены товара электроного документа.
//
// Параметры:
//	ПараметрыОтражения - см. НовыеПараметрыОтраженияЭлектронногоДокумента.
//
// Возвращаемое значение:
//	Строка -
//
Функция ПутьКДаннымЦеныТовараЭлектронногоДокумента(ПараметрыОтражения)
	
	ПутьКДанным = "";
	
	ТипыДокументов = ОбменЭДОДокументооборотПовтИсп.ТипыДокументов();
	ПоддерживаемыеФорматы = ОбменЭДОДокументооборотПовтИсп.ПоддерживаемыеФорматы();
	
	ТипЭлектронногоДокумента = ПараметрыОтражения.ДанныеЭлектронногоДокумента.ТипДокумента;
	ВерсияФормата = ПараметрыОтражения.ДанныеЭлектронногоДокумента.Формат;
	
	Если ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ПередачаТоваров.ИнформацияПродавца Тогда
		ПутьКДанным = "ТаблицаТоваров.НомерСтроки.Цена";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ПередачаРабот.ИнформацияПродавца Тогда
		ПутьКДанным = "ТаблицаУслуг.НомерСтроки.Цена";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД.ИнформацияПродавца Тогда
		ПутьКДанным = "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПродавца Тогда
		ПутьКДанным = "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УКД2020.ИнформацияПродавца Тогда
		ПутьКДанным = "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УКД.ИнформацияПродавца Тогда
		ПутьКДанным = "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктОРасхождениях.ИнформацияПокупателя Тогда
		ПутьКДанным = "РезультатыПриемки";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктСверкиВзаиморасчетов.ИнформацияОтправителя Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.СчетНаОплату101 Тогда
		ПутьКДанным = "ТаблицаТоваров.НомерСтроки.ЦенаЗаЕдиницуИзмерения";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктПриемкиСтроительныхРаботУслуг.ИнформацияПодрядчика Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ДоговорныйДокумент101 Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ДоговорныйДокументXML.ИнформацияОтправителя Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ТипЭлектронногоДокумента = ТипыДокументов.СоглашениеОбИзмененииСтоимости Тогда
		ПутьКДанным = "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД_5_02.ИнформацияПродавца Тогда
		ПутьКДанным = "ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.Цена";
	ИначеЕсли ТипЭлектронногоДокумента = ТипыДокументов.ТоварнаяНакладная
			Или ТипЭлектронногоДокумента = ТипыДокументов.АктВыполненныхРабот
			Или ТипЭлектронногоДокумента = ТипыДокументов.АктНаПередачуПрав Тогда
		ПутьКДанным = "ТаблицаТоваров.НомерСтроки.ЦенаЗаЕдиницуИзмерения";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

// Возвращает путь к данным количества товара электроного документа.
//
// Параметры:
//	ПараметрыОтражения - см. НовыеПараметрыОтраженияЭлектронногоДокумента.
//
// Возвращаемое значение:
//	Строка -
//
Функция ПутьКДаннымКоличестваТовараЭлектронногоДокумента(ПараметрыОтражения)
	
	ПутьКДанным = "";
	
	ТипыДокументов = ОбменЭДОДокументооборотПовтИсп.ТипыДокументов();
	ПоддерживаемыеФорматы = ОбменЭДОДокументооборотПовтИсп.ПоддерживаемыеФорматы();
	
	ТипЭлектронногоДокумента = ПараметрыОтражения.ДанныеЭлектронногоДокумента.ТипДокумента;
	ВерсияФормата = ПараметрыОтражения.ДанныеЭлектронногоДокумента.Формат;
	
	Если ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ПередачаТоваров.ИнформацияПродавца Тогда
		ПутьКДанным = "ТаблицаТоваров.НомерСтроки.КоличествоМест";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ПередачаРабот.ИнформацияПродавца Тогда
		ПутьКДанным = "ТаблицаУслуг.НомерСтроки.Количество";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД.ИнформацияПродавца Тогда
		ПутьКДанным = "СведенияОТоварах.НомерСтроки.Количество";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПродавца Тогда
		ПутьКДанным = "СведенияОТоварах.НомерСтроки.Количество";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УКД2020.ИнформацияПродавца Тогда
		ПутьКДанным = "СведенияОТоварах.НомерСтроки.Количество";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УКД.ИнформацияПродавца Тогда
		ПутьКДанным = "СведенияОТоварах.НомерСтроки.Количество";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктОРасхождениях.ИнформацияПокупателя Тогда
		ПутьКДанным = "РезультатыПриемки.НомерСтроки.ПоФакту.Количество";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктСверкиВзаиморасчетов.ИнформацияОтправителя Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.СчетНаОплату101 Тогда
		ПутьКДанным = "ТаблицаТоваров.НомерСтроки.Количество";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктПриемкиСтроительныхРаботУслуг.ИнформацияПодрядчика Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ДоговорныйДокумент101 Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ДоговорныйДокументXML.ИнформацияОтправителя Тогда
		ПутьКДанным = "";
	ИначеЕсли ТипЭлектронногоДокумента = ТипыДокументов.СоглашениеОбИзмененииСтоимости Тогда
		ПутьКДанным = "СведенияОТоварах.НомерСтроки.Количество";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД_5_02.ИнформацияПродавца Тогда
		ПутьКДанным = "ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.Количество";
	ИначеЕсли ТипЭлектронногоДокумента = ТипыДокументов.ТоварнаяНакладная
			Или ТипЭлектронногоДокумента = ТипыДокументов.АктВыполненныхРабот
			Или ТипЭлектронногоДокумента = ТипыДокументов.АктНаПередачуПрав Тогда
		ПутьКДанным = "ТаблицаТоваров.НомерСтроки.Количество";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

// Возвращает путь к данным суммы товара электроного документа.
//
// Параметры:
//	ПараметрыОтражения - см. НовыеПараметрыОтраженияЭлектронногоДокумента.
//
// Возвращаемое значение:
//	Строка -
//
Функция ПутьКДаннымСуммыТовараЭлектронногоДокумента(ПараметрыОтражения)
	
	ПутьКДанным = "";
	
	ТипыДокументов = ОбменЭДОДокументооборотПовтИсп.ТипыДокументов();
	ПоддерживаемыеФорматы = ОбменЭДОДокументооборотПовтИсп.ПоддерживаемыеФорматы();
	
	ТипЭлектронногоДокумента = ПараметрыОтражения.ДанныеЭлектронногоДокумента.ТипДокумента;
	ВерсияФормата = ПараметрыОтражения.ДанныеЭлектронногоДокумента.Формат;
	
	Если ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ПередачаТоваров.ИнформацияПродавца Тогда
		ПутьКДанным = "ТаблицаТоваров.НомерСтроки.СуммаСНДС";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ПередачаРабот.ИнформацияПродавца Тогда
		ПутьКДанным = "ТаблицаУслуг.НомерСтроки.СуммаСНДС";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД.ИнформацияПродавца Тогда
		ПутьКДанным = "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПродавца Тогда
		ПутьКДанным = "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УКД2020.ИнформацияПродавца Тогда
		ПутьКДанным = "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УКД.ИнформацияПродавца Тогда
		ПутьКДанным = "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктОРасхождениях.ИнформацияПокупателя Тогда
		ПутьКДанным = "РезультатыПриемки.НомерСтроки.ПоФакту.СуммаСНДС";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктСверкиВзаиморасчетов.ИнформацияОтправителя Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.СчетНаОплату101 Тогда
		ПутьКДанным = "ТаблицаТоваров.НомерСтроки.СтоимостьСНДС";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктПриемкиСтроительныхРаботУслуг.ИнформацияПодрядчика Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ДоговорныйДокумент101 Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ДоговорныйДокументXML.ИнформацияОтправителя Тогда
		ПутьКДанным = "";
	ИначеЕсли ТипЭлектронногоДокумента = ТипыДокументов.СоглашениеОбИзмененииСтоимости Тогда
		ПутьКДанным = "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД_5_02.ИнформацияПродавца Тогда
		ПутьКДанным = "ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.СтоимостьСНалогом";
	ИначеЕсли ТипЭлектронногоДокумента = ТипыДокументов.ТоварнаяНакладная
			Или ТипЭлектронногоДокумента = ТипыДокументов.АктВыполненныхРабот
			Или ТипЭлектронногоДокумента = ТипыДокументов.АктНаПередачуПрав Тогда
		ПутьКДанным = "ТаблицаТоваров.НомерСтроки.СуммаСНДС";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

// Возвращает путь к данным суммы НДС товара электроного документа.
//
// Параметры:
//	ПараметрыОтражения - см. НовыеПараметрыОтраженияЭлектронногоДокумента.
//
// Возвращаемое значение:
//	Строка -
//
Функция ПутьКДаннымСуммыНДСТовараЭлектронногоДокумента(ПараметрыОтражения)
	
	ПутьКДанным = "";
	
	ТипыДокументов = ОбменЭДОДокументооборотПовтИсп.ТипыДокументов();
	ПоддерживаемыеФорматы = ОбменЭДОДокументооборотПовтИсп.ПоддерживаемыеФорматы();
	
	ТипЭлектронногоДокумента = ПараметрыОтражения.ДанныеЭлектронногоДокумента.ТипДокумента;
	ВерсияФормата = ПараметрыОтражения.ДанныеЭлектронногоДокумента.Формат;
	
	Если ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ПередачаТоваров.ИнформацияПродавца Тогда
		ПутьКДанным = "ТаблицаТоваров.НомерСтроки.СуммаНДС";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ПередачаРабот.ИнформацияПродавца Тогда
		ПутьКДанным = "ТаблицаУслуг.НомерСтроки.СуммаНДС";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД.ИнформацияПродавца Тогда
		ПутьКДанным = "СведенияОТоварах.НомерСтроки.СуммаНалога";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПродавца Тогда
		ПутьКДанным = "СведенияОТоварах.НомерСтроки.СуммаНалога";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УКД2020.ИнформацияПродавца Тогда
		ПутьКДанным = "СведенияОТоварах.НомерСтроки.СуммаНалога";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УКД.ИнформацияПродавца Тогда
		ПутьКДанным = "СведенияОТоварах.НомерСтроки.СуммаНалога";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктОРасхождениях.ИнформацияПокупателя Тогда
		ПутьКДанным = "РезультатыПриемки.НомерСтроки.ПоФакту.СуммаНДС";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктСверкиВзаиморасчетов.ИнформацияОтправителя Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.СчетНаОплату101 Тогда
		ПутьКДанным = "ТаблицаТоваров.НомерСтроки.СуммаНДС";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктПриемкиСтроительныхРаботУслуг.ИнформацияПодрядчика Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ДоговорныйДокумент101 Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ДоговорныйДокументXML.ИнформацияОтправителя Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД_5_02.ИнформацияПродавца Тогда
		ПутьКДанным = "ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.СуммаНалога.Сумма";
	ИначеЕсли ТипЭлектронногоДокумента = ТипыДокументов.СоглашениеОбИзмененииСтоимости Тогда
		ПутьКДанным = "СведенияОТоварах.НомерСтроки.СуммаНалога";
	ИначеЕсли ТипЭлектронногоДокумента = ТипыДокументов.ТоварнаяНакладная
			Или ТипЭлектронногоДокумента = ТипыДокументов.АктВыполненныхРабот
			Или ТипЭлектронногоДокумента = ТипыДокументов.АктНаПередачуПрав Тогда
		ПутьКДанным = "ТаблицаТоваров.НомерСтроки.СуммаНДС";
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

// Возвращает путь к данным ставки НДС товара электроного документа.
//
// Параметры:
//	ПараметрыОтражения - см. НовыеПараметрыОтраженияЭлектронногоДокумента.
//
// Возвращаемое значение:
//	Строка -
//
Функция ПутьКДаннымСтавкиНДСТовараЭлектронногоДокумента(ПараметрыОтражения)
	
	ПутьКДанным = "";
	
	ТипыДокументов = ОбменЭДОДокументооборотПовтИсп.ТипыДокументов();
	ПоддерживаемыеФорматы = ОбменЭДОДокументооборотПовтИсп.ПоддерживаемыеФорматы();
	
	ТипЭлектронногоДокумента = ПараметрыОтражения.ДанныеЭлектронногоДокумента.ТипДокумента;
	ВерсияФормата = ПараметрыОтражения.ДанныеЭлектронногоДокумента.Формат;
	
	Если ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ПередачаТоваров.ИнформацияПродавца Тогда
		ПутьКДанным = "ТаблицаТоваров.НомерСтроки.СтавкаНДС";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ПередачаРабот.ИнформацияПродавца Тогда
		ПутьКДанным = "ТаблицаУслуг.НомерСтроки.СтавкаНДС";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД.ИнформацияПродавца Тогда
		ПутьКДанным = "СведенияОТоварах.НомерСтроки.НалоговаяСтавка";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПродавца Тогда
		ПутьКДанным = "СведенияОТоварах.НомерСтроки.НалоговаяСтавка";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УКД2020.ИнформацияПродавца Тогда
		ПутьКДанным = "СведенияОТоварах.НомерСтроки.НалоговаяСтавка";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УКД.ИнформацияПродавца Тогда
		ПутьКДанным = "СведенияОТоварах.НомерСтроки.НалоговаяСтавка";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктОРасхождениях.ИнформацияПокупателя Тогда
		ПутьКДанным = "РезультатыПриемки.НомерСтроки.ПоФакту.СтавкаНДС";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктСверкиВзаиморасчетов.ИнформацияОтправителя Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.СчетНаОплату101 Тогда
		ПутьКДанным = "ТаблицаТоваров.НомерСтроки.СтавкаНДС";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктПриемкиСтроительныхРаботУслуг.ИнформацияПодрядчика Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ДоговорныйДокумент101 Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ДоговорныйДокументXML.ИнформацияОтправителя Тогда
		ПутьКДанным = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД_5_02.ИнформацияПродавца Тогда
		ПутьКДанным = "ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.НалоговаяСтавка";
	ИначеЕсли ТипЭлектронногоДокумента = ТипыДокументов.СоглашениеОбИзмененииСтоимости Тогда
		ПутьКДанным = "СведенияОТоварах.НомерСтроки.НалоговаяСтавка";
	ИначеЕсли ТипЭлектронногоДокумента = ТипыДокументов.ТоварнаяНакладная
			Или ТипЭлектронногоДокумента = ТипыДокументов.АктВыполненныхРабот
			Или ТипЭлектронногоДокумента = ТипыДокументов.АктНаПередачуПрав Тогда
		ПутьКДанным = "ТаблицаТоваров.НомерСтроки.СтавкаНДС"; 
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

// Возвращает путь к данным единицы измерения товара электроного документа.
//
// Параметры:
//	ПараметрыОтражения - см. НовыеПараметрыОтраженияЭлектронногоДокумента.
//
// Возвращаемое значение:
//	Структура:
//		* Наименование - Строка -
//		* Код - Строка -
//
Функция ПутьКДаннымЕдиницыИзмеренияТовараЭлектронногоДокумента(ПараметрыОтражения)
	
	ПутиКДанным = Новый Структура("Наименование, Код", "", "");
	
	ТипыДокументов = ОбменЭДОДокументооборотПовтИсп.ТипыДокументов();
	ПоддерживаемыеФорматы = ОбменЭДОДокументооборотПовтИсп.ПоддерживаемыеФорматы();
	
	ТипЭлектронногоДокумента = ПараметрыОтражения.ДанныеЭлектронногоДокумента.ТипДокумента;
	ВерсияФормата = ПараметрыОтражения.ДанныеЭлектронногоДокумента.Формат;
	
	Если ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ПередачаТоваров.ИнформацияПродавца Тогда
		ПутиКДанным.Код = "ТаблицаТоваров.НомерСтроки.БазоваяЕдиницаКод";
		ПутиКДанным.Наименование = "ТаблицаТоваров.НомерСтроки.ЕдиницаИзмеренияНаименование";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ПередачаРабот.ИнформацияПродавца Тогда
		ПутиКДанным.Код = "ТаблицаУслуг.НомерСтроки.ЕдиницаИзмеренияКод";
		ПутиКДанным.Наименование = "ТаблицаУслуг.НомерСтроки.ЕдиницаИзмеренияНаименование";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД.ИнформацияПродавца Тогда
		ПутиКДанным.Код = "СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКод";
		ПутиКДанным.Наименование = "СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияНаименование";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПродавца Тогда
		ПутиКДанным.Код = "СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКод";
		ПутиКДанным.Наименование = "СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияНаименование";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УКД2020.ИнформацияПродавца Тогда
		ПутиКДанным.Код = "СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКод";
		ПутиКДанным.Наименование = "СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияНаименование";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УКД.ИнформацияПродавца Тогда
		ПутиКДанным.Код = "СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКод";
		ПутиКДанным.Наименование = "СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияНаименование";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктОРасхождениях.ИнформацияПокупателя Тогда
		ПутиКДанным.Код = "РезультатыПриемки.НомерСтроки.ЕдиницаИзмеренияКод";
		ПутиКДанным.Наименование = "РезультатыПриемки.НомерСтроки.ЕдиницаИзмеренияНаименование";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктСверкиВзаиморасчетов.ИнформацияОтправителя Тогда
		ПутиКДанным.Код = "";
		ПутиКДанным.Наименование = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.СчетНаОплату101 Тогда
		ПутиКДанным.Код = "ТаблицаТоваров.НомерСтроки.ЕдиницаИзмеренияКод";
		ПутиКДанным.Наименование = "ТаблицаТоваров.НомерСтроки.ЕдиницаИзмеренияНаименование";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктПриемкиСтроительныхРаботУслуг.ИнформацияПодрядчика Тогда
		ПутиКДанным.Код = "";
		ПутиКДанным.Наименование = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ДоговорныйДокумент101 Тогда
		ПутиКДанным.Код = "";
		ПутиКДанным.Наименование = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ДоговорныйДокументXML.ИнформацияОтправителя Тогда
		ПутиКДанным.Код = "";
		ПутиКДанным.Наименование = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД_5_02.ИнформацияПродавца Тогда
		ПутиКДанным.Код = 
			"ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.ЕдиницаИзмеренияКод";
		ПутиКДанным.Наименование = 
			"ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.ЕдиницаИзмеренияНаименование";
	ИначеЕсли ТипЭлектронногоДокумента = ТипыДокументов.СоглашениеОбИзмененииСтоимости Тогда
		ПутиКДанным.Код = "СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКод";
		ПутиКДанным.Наименование = "СведенияОТоварах.НомерСтроки.НаименованиеЕдиницыИзмеренияПослеКорректировки";
	ИначеЕсли ТипЭлектронногоДокумента = ТипыДокументов.ТоварнаяНакладная
			Или ТипЭлектронногоДокумента = ТипыДокументов.АктВыполненныхРабот
			Или ТипЭлектронногоДокумента = ТипыДокументов.АктНаПередачуПрав Тогда
		ПутиКДанным.Код = "ТаблицаТоваров.НомерСтроки.ЕдиницаИзмеренияКод";
		ПутиКДанным.Наименование = "ТаблицаТоваров.НомерСтроки.ЕдиницаИзмеренияНаименование";
	КонецЕсли;
	
	Возврат ПутиКДанным;
	
КонецФункции

// Возвращает путь к данным товара электроного документа.
//
// Параметры:
//	ПараметрыОтражения - см. НовыеПараметрыОтраженияЭлектронногоДокумента.
//
// Возвращаемое значение:
//	Структура:
//		* ДанныеСопоставления - Структура:
//			** Номенклатура - Строка - Путь к данным номенклатуры ИБ.
//		* БезСопоставления - Структура:
//			** Наименование - Строка - Путь к данным наименования номенклатуры.
//			** Артикул - Строка - Путь к данным артикула номенклатуры.
//
Функция ПутьКДаннымТовараЭлектронногоДокумента(ПараметрыОтражения)
	
	ПутиКДанным = Новый Структура;
	ПутиКДанным.Вставить("ДанныеСопоставления", Новый Структура("Номенклатура", Неопределено));
	ПутиКДанным.Вставить("БезСопоставления", Новый Структура("Наименование, Артикул", "", ""));
	
	ТипыДокументов = ОбменЭДОДокументооборотПовтИсп.ТипыДокументов();
	ПоддерживаемыеФорматы = ОбменЭДОДокументооборотПовтИсп.ПоддерживаемыеФорматы();
	
	ТипЭлектронногоДокумента = ПараметрыОтражения.ДанныеЭлектронногоДокумента.ТипДокумента;
	ВерсияФормата = ПараметрыОтражения.ДанныеЭлектронногоДокумента.Формат;
	
	Если ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ПередачаТоваров.ИнформацияПродавца Тогда
		ПутиКДанным.ДанныеСопоставления.Номенклатура = "ТаблицаТоваров.НомерСтроки.Сопоставление.НоменклатураИБ";
		ПутиКДанным.БезСопоставления.Наименование = "ТаблицаТоваров.НомерСтроки.НаименованиеНоменклатуры";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ПередачаРабот.ИнформацияПродавца Тогда
		ПутиКДанным.ДанныеСопоставления.Номенклатура = "ТаблицаУслуг.НомерСтроки.Сопоставление.НоменклатураИБ";
		ПутиКДанным.БезСопоставления.Наименование = "ТаблицаУслуг.НомерСтроки.НаименованиеНоменклатуры";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД.ИнформацияПродавца Тогда
		ПутиКДанным.ДанныеСопоставления.Номенклатура = "СведенияОТоварах.НомерСтроки.Сопоставление.НоменклатураИБ";
		ПутиКДанным.БезСопоставления.Наименование = "СведенияОТоварах.НомерСтроки.ТоварНаименование";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД2019.ИнформацияПродавца Тогда
		ПутиКДанным.ДанныеСопоставления.Номенклатура = "СведенияОТоварах.НомерСтроки.Сопоставление.НоменклатураИБ";
		ПутиКДанным.БезСопоставления.Наименование = "СведенияОТоварах.НомерСтроки.ТоварНаименование";
		ПутиКДанным.БезСопоставления.Артикул = "СведенияОТоварах.НомерСтроки.ТоварАртикул";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УКД2020.ИнформацияПродавца Тогда
		ПутиКДанным.ДанныеСопоставления.Номенклатура = "СведенияОТоварах.НомерСтроки.НоменклатураИБ";
		ПутиКДанным.БезСопоставления.Наименование = "СведенияОТоварах.НомерСтроки.ТоварНаименование";
		ПутиКДанным.БезСопоставления.Артикул = "СведенияОТоварах.НомерСтроки.АртикулТовара";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УКД.ИнформацияПродавца Тогда
		ПутиКДанным.ДанныеСопоставления.Номенклатура = "СведенияОТоварах.НомерСтроки.Сопоставление.НоменклатураИБ";
		ПутиКДанным.БезСопоставления.Наименование = "СведенияОТоварах.НомерСтроки.ТоварНаименование";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктОРасхождениях.ИнформацияПокупателя Тогда
		ПутиКДанным.ДанныеСопоставления.Номенклатура = "РезультатыПриемки.НомерСтроки.Сопоставление.НоменклатураИБ";
		ПутиКДанным.БезСопоставления.Наименование = "РезультатыПриемки.НомерСтроки.ТоварНаименование";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктСверкиВзаиморасчетов.ИнформацияОтправителя Тогда
		ПутиКДанным.ДанныеСопоставления.Номенклатура = Неопределено;
		ПутиКДанным.БезСопоставления.Наименование = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.СчетНаОплату101 Тогда
		ПутиКДанным.ДанныеСопоставления.Номенклатура = "ТаблицаТоваров.НомерСтроки.Сопоставление.НоменклатураИБ";
		ПутиКДанным.БезСопоставления.Наименование = "ТаблицаТоваров.НомерСтроки.Наименование";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.АктПриемкиСтроительныхРаботУслуг.ИнформацияПодрядчика Тогда
		ПутиКДанным.ДанныеСопоставления.Номенклатура = Неопределено;
		ПутиКДанным.БезСопоставления.Наименование = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ДоговорныйДокумент101 Тогда
		ПутиКДанным.ДанныеСопоставления.Номенклатура = Неопределено;
		ПутиКДанным.БезСопоставления.Наименование = "";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.ДоговорныйДокументXML.ИнформацияОтправителя Тогда
		ПутиКДанным.ДанныеСопоставления.Номенклатура = Неопределено;
		ПутиКДанным.БезСопоставления.Наименование = "";
	ИначеЕсли ТипЭлектронногоДокумента = ТипыДокументов.СоглашениеОбИзмененииСтоимости Тогда
		ПутиКДанным.ДанныеСопоставления.Номенклатура = "СведенияОТоварах.НомерСтроки.Сопоставление.НоменклатураИБ";
		ПутиКДанным.БезСопоставления.Наименование = "СведенияОТоварах.НомерСтроки.ТоварНаименование";
		ПутиКДанным.БезСопоставления.Артикул = "СведенияОТоварах.НомерСтроки.АртикулТовара";
	ИначеЕсли ВерсияФормата = ПоддерживаемыеФорматы.ФНС.УПД_5_02.ИнформацияПродавца Тогда
		ПутиКДанным.БезСопоставления.Наименование = 
			"ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.Наименование";
		ПутиКДанным.БезСопоставления.Артикул = "ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.Артикул";
		ПутиКДанным.ДанныеСопоставления.Номенклатура = 
			"ТаблицаСчетаФактуры.СведенияОбОтгруженныхПозициях.НомерСтроки.Сопоставление.НоменклатураИБ";
	ИначеЕсли ТипЭлектронногоДокумента = ТипыДокументов.ТоварнаяНакладная
			Или ТипЭлектронногоДокумента = ТипыДокументов.АктВыполненныхРабот
			Или ТипЭлектронногоДокумента = ТипыДокументов.АктНаПередачуПрав Тогда
		ПутиКДанным.ДанныеСопоставления.Номенклатура = "ТаблицаТоваров.НомерСтроки.Сопоставление.НоменклатураИБ";
		ПутиКДанным.БезСопоставления.Наименование = "ТаблицаТоваров.НомерСтроки.Наименование";
		
	КонецЕсли;
	
	Возврат ПутиКДанным;
	
КонецФункции

#КонецОбласти

// Получить значение реквизита дерева
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений
//  ИмяРеквизита - Строка
//  ДеревоРазбора - ДеревоЗначений
// 
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьЗначениеРеквизитаДерева(СтрокаДерева, ИмяРеквизита, ДеревоРазбора = Неопределено)
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит", Истина);
	Иначе
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Результат = НайденнаяСтрока.ЗначениеРеквизита;
		Если ЗначениеЗаполнено(ДеревоРазбора) Тогда 
			Если ЭлектронноеВзаимодействие.ЭтоСсылочноеЗначениеДереваРазбора(ДеревоРазбора,
					Результат, НайденнаяСтрока) Тогда
				
				Результат = НайденнаяСтрока.ИД;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
