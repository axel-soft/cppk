#Область ПрограммныйИнтерфейс

#Область СрокиИсполнения

// Возвращает основной график работы.
//
// Возвращаемое значение:
//  СправочникСсылка.ГрафикиРаботы
//
Функция ПолучитьОсновнойГрафикРаботы() Экспорт
	
	Возврат ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы();
	
КонецФункции

// Возвращает график работы участника.
//
// Параметры:
//  Участник - СправочникСсылка.Сотрудники,
//			   СправочникСсылка.ПолныеРоли,
//  		   СправочникСсылка.Пользователи - Участник.
//
// Возвращаемое значение:
//  * СправочникСсылка.ГрафикиРаботы - График работы участника.
//
Функция ГрафикРаботыУчастника(Участник) Экспорт
	
	Если ТипЗнч(Участник) = Тип("СправочникСсылка.Сотрудники") 
			Или ТипЗнч(Участник) = Тип("СправочникСсылка.Пользователи") Тогда
		
		Возврат ГрафикиРаботы.ГрафикРаботыСотрудника(Участник);
	КонецЕсли;

	Возврат ПолучитьОсновнойГрафикРаботы();
	
КонецФункции

#КонецОбласти

// Формирует таблицу значений данных функциональных опций.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Данные функциональных опций:
//   * Имя - Строка - Имя функциональной опции. 
//   * Объект - Строка - Объект, входящий в функциональную опцию.
//
Функция ДанныеФункциональныхОпций() Экспорт
	
	ДанныеФункциональныхОпций = Новый ТаблицаЗначений;
	ДанныеФункциональныхОпций.Колонки.Добавить("Имя");
	ДанныеФункциональныхОпций.Колонки.Добавить("Объект");
	
	Для Каждого ФункциональнаяОпция Из Метаданные.ФункциональныеОпции Цикл
		Для Каждого ЭлементСоставаФункциональнойОпции Из ФункциональнаяОпция.Состав Цикл
			Если ЭлементСоставаФункциональнойОпции.Объект = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ДанныеФункциональныхОпций.Добавить();
			НоваяСтрока.Имя = ФункциональнаяОпция.Имя;
			НоваяСтрока.Объект = ЭлементСоставаФункциональнойОпции.Объект.ПолноеИмя();
		КонецЦикла;
	КонецЦикла;
	
	ДанныеФункциональныхОпций.Индексы.Добавить("Объект");
	
	Возврат ДанныеФункциональныхОпций;
	
КонецФункции

// Находит или создает полную роль по исходной роли, дополненной объектами адресации.
//
// Параметры:
//   ИсходнаяРоль - СправочникСсылка.РолиИсполнителей - исходная роль.
//   ОсновнойОбъектАдресации - Характеристика.ОбъектыАдресацииЗадач - основной объект адресации.
//   ДополнительныйОбъектАдресации - Характеристика.ОбъектыАдресацииЗадач - доп. объект адресации.
//
// Возвращаемое значение:
//   СправочникСсылка.ПолныеРоли - полная роль, найденная в справочнике или созданная на
//     основании исходной роли.
//
Функция НайтиСоздатьПолнуюРоль(ИсходнаяРоль, Знач ОсновнойОбъектАдресации, 
	Знач ДополнительныйОбъектАдресации = Неопределено) Экспорт
	
	Возврат Справочники.ПолныеРоли.НайтиСоздатьПолнуюРоль(
		ИсходнаяРоль,
		ОсновнойОбъектАдресации,
		ДополнительныйОбъектАдресации);
	
КонецФункции

// Проверяет наличие метода менеджера объекта.
// Для проверки используется дополнительный метод "ЕстьМетод<ИмяМетода>".
//
// Параметры:
//  ПолноеИмяОбъекта - Строка - полное имя объекта метаданных.
//  ИмяМетода - Строка - имя метода, наличие которого нужно проверить.
//
// Возвращаемое значение:
//  Булево - Истина, если есть метод, Ложь в противном случае.
//
Функция ЕстьМетодМенеджера(ПолноеИмяОбъекта, ИмяМетода) Экспорт
	
	ЕстьМетод = Ложь;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта);
	Попытка
		ЕстьМетод = Вычислить("МенеджерОбъекта.ЕстьМетод" + ИмяМетода + "()");
	Исключение
	КонецПопытки;
	
	Возврат ЕстьМетод;
	
КонецФункции

// Возвращает тип платформы сервера.
//
// Возвращаемое значение:
//   ТипПлатформы; Неопределено.
//
Функция ТипПлатформыСервера() Экспорт
	
	ТипПлатформыСервераСтрокой = ТипПлатформыСервераСтрокой();
	
	Если ТипПлатформыСервераСтрокой = "Linux_x86" Тогда
		Возврат ТипПлатформы.Linux_x86;
		
	ИначеЕсли ТипПлатформыСервераСтрокой = "Linux_x86_64" Тогда
		Возврат ТипПлатформы.Linux_x86_64;
		
	ИначеЕсли ТипПлатформыСервераСтрокой = "Windows_x86" Тогда
		Возврат ТипПлатформы.Windows_x86;
		
	ИначеЕсли ТипПлатформыСервераСтрокой = "Windows_x86_64" Тогда
		Возврат ТипПлатформы.Windows_x86_64;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает тип платформы строкой.
Функция ТипПлатформыСервераСтрокой() Экспорт
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	
	Если СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Linux_x86 Тогда
		Возврат "Linux_x86";
		
	ИначеЕсли СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		Возврат "Linux_x86_64";
		
	ИначеЕсли СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		Возврат "Windows_x86";
		
	ИначеЕсли СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Возврат "Windows_x86_64";
		
	ИначеЕсли СистемнаяИнфо.ТипПлатформы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный тип платформы ""%1""'"), Строка(СистемнаяИнфо.ТипПлатформы));
	
КонецФункции

// Источник активен.
// 
// Параметры:
//  ИсточникДанных - СправочникССылка.ИсточникиДанных
// 
// Возвращаемое значение:
// Булево
//  
Функция ИсточникАктивен(ИсточникДанных) Экспорт
	
	Активен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсточникДанных, "Активен");
	Возврат Активен;
	
КонецФункции

 // Входит в реквизит наименование язык1.
 // 
 // Параметры:
 //  ИмяОбъекта  - Строка - полное имя метаданного
 // 
 // Возвращаемое значение:
 //  Булево - Входит в реквизит наименование язык1
 Функция ВходитВРеквизитНаименованиеЯзык1(ИмяОбъекта) Экспорт
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);
	
	ЭлементСостава = Метаданные.ОбщиеРеквизиты.НаименованиеЯзык1.Состав.Найти(ОбъектМетаданных);
	
	Если ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
		
КонецФункции

// Возвращает Истина, если текущая конфигурация является конфигурацией Документооборот Холдинга.
//
// Возвращаемое значение:
//	Булево - Истина - Если текущая конфигурация является конфигурацией Документооборот Холдинга.
//
Функция ЭтоДокументооборотХолдинга() Экспорт
	
	Возврат РедакцииКонфигурацииСлужебный.ЭтоДокументооборотХолдинга();
	
КонецФункции

// Проверяет, что это основной язык.
// 
// Возвращаемое значение:
//  Булево - Это основной язык.
//
Функция ЭтоОсновнойЯзык() Экспорт
	
	Возврат МультиязычностьСервер.ЭтоОсновнойЯзык();
	
КонецФункции

#КонецОбласти