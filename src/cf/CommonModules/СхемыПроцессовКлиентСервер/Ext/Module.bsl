////////////////////////////////////////////////////////////////////////////////
// Клиентские и серверные процедуры, функции по работе со схемами процессов.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПроверкаТипаЭлемента

// Проверяет тип элемента и возвращает его принадлежность к вложенным процессам схемы.
// 
// Параметры:
//  ТипЭлемента - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
// 
// Возвращаемое значение:
//  Булево
//
Функция ЭтоВложенныйПроцессСхемы(ТипЭлемента) Экспорт
	
	ЭтоВложенныйПроцесс = Ложь;
	Если ТипЭлемента = 
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.ВложенныйПроцесс") Тогда
		
		ЭтоВложенныйПроцесс = Истина;				
	КонецЕсли;
	
	Возврат ЭтоВложенныйПроцесс;
	
КонецФункции

// Проверяет тип элемента и возвращает его принадлежность к действиям схемы.
// 
// Параметры:
//  ТипЭлемента - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
// 
// Возвращаемое значение:
//  Булево
//
Функция ЭтоДействиеСхемы(ТипЭлемента) Экспорт
	
	ЭтоДействие = Ложь;
	Если ТипЭлемента = 
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Действие") Тогда
		
		ЭтоДействие = Истина;				
	КонецЕсли;
	
	Возврат ЭтоДействие;
	
КонецФункции

// Проверяет тип элемента и возвращает его принадлежность к скриптам схемы.
// 
// Параметры:
//  ТипЭлемента - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
// 
// Возвращаемое значение:
//  Булево
//
Функция ЭтоСкриптСхемы(ТипЭлемента) Экспорт
	
	ЭтоСкрипт = Ложь;
	Если ТипЭлемента = 
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Скрипт") Тогда
		
		ЭтоСкрипт = Истина;				
	КонецЕсли;
	
	Возврат ЭтоСкрипт;
	
КонецФункции

// Проверяет тип элемента и возвращает его принадлежность к условиям схемы.
// 
// Параметры:
//  ТипЭлемента - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
// 
// Возвращаемое значение:
//  Булево
//
Функция ЭтоУсловиеСхемы(ТипЭлемента) Экспорт
	
	ЭтоУсловие = Ложь;
	Если ТипЭлемента = 
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Условие") Тогда
		
		ЭтоУсловие = Истина;				
	КонецЕсли;
	
	Возврат ЭтоУсловие;
	
КонецФункции

// Проверяет тип элемента и возвращает его принадлежность к декоративная линия схемы.
// 
// Параметры:
//  ТипЭлемента - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
// 
// Возвращаемое значение:
//  Булево
//
Функция ЭтоДекоративнаяЛинияСхемы(ТипЭлемента) Экспорт
	
	ЭтоДекоративнаяЛиния = Ложь;
	Если ТипЭлемента = 
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.ДекоративнаяЛиния") Тогда
		
		ЭтоДекоративнаяЛиния = Истина;				
	КонецЕсли;
	
	Возврат ЭтоДекоративнаяЛиния;
	
КонецФункции

// Проверяет тип элемента и возвращает его принадлежность к декорациям схемы.
// 
// Параметры:
//  ТипЭлемента - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
// 
// Возвращаемое значение:
//  Булево
//
Функция ЭтоДекорацияСхемы(ТипЭлемента) Экспорт
	
	ЭтоДекорация = Ложь;
	Если ТипЭлемента = 
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Декорация") Тогда
		
		ЭтоДекорация = Истина;				
	КонецЕсли;
	
	Возврат ЭтоДекорация;
	
КонецФункции

// Проверяет тип элемента и возвращает его принадлежность к завершению схемы.
// 
// Параметры:
//  ТипЭлемента - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
// 
// Возвращаемое значение:
//  Булево
//
Функция ЭтоЗавершениеСхемы(ТипЭлемента) Экспорт
	
	ЭтоЗавершение = Ложь;
	Если ТипЭлемента = 
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Завершение") Тогда
		
		ЭтоЗавершение = Истина;				
	КонецЕсли;
	
	Возврат ЭтоЗавершение;
	
КонецФункции

// Проверяет тип элемента и возвращает его принадлежность к разделениям схемы.
// 
// Параметры:
//  ТипЭлемента - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
// 
// Возвращаемое значение:
//  Булево
//
Функция ЭтоРазделениеСхемы(ТипЭлемента) Экспорт
	
	ЭтоРазделение = Ложь;
	Если ТипЭлемента = 
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Разделение") Тогда
		
		ЭтоРазделение = Истина;				
	КонецЕсли;
	
	Возврат ЭтоРазделение;
	
КонецФункции

// Проверяет тип элемента и возвращает его принадлежность к слияниям схемы.
// 
// Параметры:
//  ТипЭлемента - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
// 
// Возвращаемое значение:
//  Булево
//
Функция ЭтоСлияниеСхемы(ТипЭлемента) Экспорт
	
	ЭтоСлияние = Ложь;
	Если ТипЭлемента = 
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Слияние") Тогда
		
		ЭтоСлияние = Истина;				
	КонецЕсли;
	
	Возврат ЭтоСлияние;
	
КонецФункции

// Проверяет тип элемента и возвращает его принадлежность к старту схемы.
// 
// Параметры:
//  ТипЭлемента - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
// 
// Возвращаемое значение:
//  Булево
//
Функция ЭтоСтартСхемы(ТипЭлемента) Экспорт
	
	ЭтоСтарт = Ложь;
	Если ТипЭлемента = 
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Старт") Тогда
		
		ЭтоСтарт = Истина;				
	КонецЕсли;
	
	Возврат ЭтоСтарт;
	
КонецФункции

// Проверяет тип элемента и возвращает его принадлежность к блокам выполнения схемы.
// 
// Параметры:
//  ТипЭлемента - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
// 
// Возвращаемое значение:
//  Булево
//
Функция ЭтоБлокВыполненияСхемы(ТипЭлемента) Экспорт
	
	Возврат ЭтоДействиеСхемы(ТипЭлемента)
		Или ЭтоВложенныйПроцессСхемы(ТипЭлемента)
		Или ЭтоСкриптСхемы(ТипЭлемента);
	
КонецФункции

#КонецОбласти

#Область ПредставлениеЭлементовСхемы

// Возвращает пустую структуру параметров оформления элемента схемы.
// 
// Возвращаемое значение:
//  Структура
//   * ОписаниеЭлемента - Строка
//   * ГоризонтальноеПоложение - системное перечисление ГоризонтальноеПоложение
//   * ГоризонтальноеПоложение - системное перечисление ВертикальноеПоложение
//   * Рамка - Линия
//   * ЦветРамки - Цвет
//  
Функция ПараметрыОформленияЭлементаСхемы() Экспорт
	
	ПараметрыОформления = Новый Структура;
	ПараметрыОформления.Вставить("ОписаниеЭлемента", "");
	
	ПараметрыОформления.Вставить("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Центр);
	ПараметрыОформления.Вставить("ВертикальноеПоложение", ВертикальноеПоложение.Центр);
	
	ПараметрыОформления.Вставить("Рамка", ЛинияРамкиНеПройденногоЭлемента());
	
	ПараметрыОформления.Вставить("ЦветРамки", ЦветРамки());

	Возврат ПараметрыОформления;
	
КонецФункции

// Установить оформление элементу схемы
// 
// Параметры:
//  Схема - ГрафическаяСхемы
//  ИмяЭлемента - Строка - имя элемента в схеме.
//  ПараметрыОформления Структура
//    см. ПараметрыОформленияЭлементаСхемы
//  
Процедура УстановитьОформлениеЭлементуСхемы(Схема, ИмяЭлемента, ПараметрыОформления) Экспорт
	
	ЭлементСхемы = Схема.ЭлементыГрафическойСхемы.Найти(ИмяЭлемента);
	
	ЭлементСхемы.Наименование = ПараметрыОформления.ОписаниеЭлемента;
	ЭлементСхемы.ГоризонтальноеПоложение = ПараметрыОформления.ГоризонтальноеПоложение;		
	ЭлементСхемы.ВертикальноеПоложение = ПараметрыОформления.ВертикальноеПоложение;
	
	ЭлементСхемы.Рамка = ПараметрыОформления.Рамка;
	ЭлементСхемы.ЦветРамки = ПараметрыОформления.ЦветРамки;
		
КонецПроцедуры

// Возвращает цвет рамки.
// 
// Возвращаемое значение:
//  Цвет
//
Функция ЦветРамки() Экспорт
	
#Если Клиент Тогда
	Возврат Новый Цвет(160, 160, 160);
#Иначе
	 Возврат ЦветаСтиля.ЦветРамки;
#КонецЕсли
	
КонецФункции

// Возвращает линию рамки пройденного элемента.
// 
// Возвращаемое значение:
//  Линия - Линия
//
Функция ЛинияРамкиНеПройденногоЭлемента() Экспорт
	
	Возврат Новый Линия(ПредопределенноеЗначение("ТипСоединительнойЛинии.Сплошная"), 1);
		
КонецФункции

// Возвращает линию рамки текущего элемента.
// 
// Возвращаемое значение:
//  Линия - Линия
//
Функция ЛинияРамкиТекущегоЭлемента() Экспорт
	
	Возврат Новый Линия(ПредопределенноеЗначение("ТипСоединительнойЛинии.Пунктир"), 2);
		
КонецФункции

// Возвращает линию рамки пройденного элемента.
// 
// Возвращаемое значение:
//  Линия - Линия
//
Функция ЛинияРамкиПройденногоЭлемента() Экспорт
	
	Возврат Новый Линия(ПредопределенноеЗначение("ТипСоединительнойЛинии.Сплошная"), 2);
		
КонецФункции

// Возвращает цвет ПросроченныеДанныеЦвет.
// 
// Возвращаемое значение:
//  Цвет
//
Функция ПросроченныеДанныеЦвет() Экспорт
	
#Если Клиент Тогда
	Возврат Новый Цвет(178, 34, 34);
#Иначе
	Возврат ЦветаСтиля.ПросроченныеДанныеЦвет;
#КонецЕсли
	
КонецФункции

// Возвращает описание элемента схемы.
// 
// Параметры:
// 	ИмяЭлемента - Строка - имя элемента схемы.
// 	Схема - ГрафическаяСхема
// 	
// Возвращаемое значение:
// 	Строка
//
Функция ОписаниеЭлементаСхемы(ИмяЭлемента, Схема) Экспорт
	
	ЭлементСхемы = Схема.ЭлементыГрафическойСхемы.Найти(ИмяЭлемента);
	Если ЭлементСхемы = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ЭлементСхемы.Наименование;
	
КонецФункции

// Обновляет выделение соединительных линий по рамках прилигающих к ним элементов.
// 
// Параметры:
//  Схема - ГрафическаяСхема
//
Процедура ОбновитьВыделениеСоединительныхЛиний(Схема) Экспорт
	
	ТипСоединительнаяЛинияСхемы = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния");
	
	Для Каждого ЭлементСхемы Из Схема.ЭлементыГрафическойСхемы Цикл
		
		Если ТипЗнч(ЭлементСхемы) <> ТипСоединительнаяЛинияСхемы Тогда
			Продолжить;
		КонецЕсли;
		
		ЛинияПройдена = Ложь;
		
		Если ЭлементСхемы.НачалоЭлемент <> Неопределено
			И ЭлементСхемы.КонецЭлемент <> Неопределено
			И ЭлементСхемы.НачалоЭлемент.Рамка = ЛинияРамкиПройденногоЭлемента()
			И (ЭлементСхемы.КонецЭлемент.Рамка = ЛинияРамкиПройденногоЭлемента()
				Или ЭлементСхемы.КонецЭлемент.Рамка = ЛинияРамкиТекущегоЭлемента()) Тогда
			
			ЛинияПройдена = Истина;		
		КонецЕсли;
		
		Если ЛинияПройдена Тогда
			ЭлементСхемы.Линия = ЛинияРамкиПройденногоЭлемента();
		Иначе
			ЭлементСхемы.Линия = ЛинияРамкиНеПройденногоЭлемента();	
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКорректностиСхемы

// Возвращает пустую структуру результата проверки схемы.
// 
// Возвращаемое значение:
//  Структура
//   * НетОшибок - Булево - признак корректности схемы.
//   * ОписаниеОшибки - Строка - текст ошибки, если схема некорректна.
//   * ИмяЭлемента - Строка - имя элемента, связанного с ошибкой.
//
Функция СтруктуруРезультатаПроверкиСхемы() Экспорт
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("НетОшибок", Истина);
	РезультатПроверки.Вставить("ОписаниеОшибки", "");
	РезультатПроверки.Вставить("ИмяЭлемента", "");
	
	Возврат РезультатПроверки;
	
КонецФункции

#КонецОбласти

#Область РаботаСДаннымиСхемы

// Возвращает пустую структуру данных схемы процесса. 
// 
// Возвращаемое значение:
// 	Структура:
//   * Наименование - Строка - наименование схемы процесса.
//   * ВерсияДанных - Строка - версия объекта схемы процесса.
//   * ПометкаУдаления - Булево - пометка удаления схемы процесса.
//   * Схема - ГрафическаяСхема - графическая схема процесса.
//   * ИсточникДанных - СправочникССылка.ИсточникиДанных - признак того, что схема изменяется в другой системе.
//   * Настройки - Структура - настройки элементов схемы процессы.
//      ** см. СхемыПроцессовКлиентСервер.СтруктураНастроекСхемыПроцесса()
//
Функция СтруктураДанныхСхемыПроцесса() Экспорт
	
	СтруктураСхемы = Новый Структура;
	СтруктураСхемы.Вставить("Наименование", "");
	СтруктураСхемы.Вставить("ПометкаУдаления", Ложь);	
	СтруктураСхемы.Вставить("ВерсияДанных", "");
	СтруктураСхемы.Вставить("ИсточникДанных", Неопределено);
	
	#Если Не МобильныйКлиент Тогда
		СтруктураСхемы.Вставить("Схема", Новый ГрафическаяСхема());
	#КонецЕсли
		
	СтруктураСхемы.Вставить("Настройки", СтруктураНастроекСхемыПроцесса());
	
	Возврат СтруктураСхемы;
	
КонецФункции

// Возвращает пустую структуру настроек схемы процесса
//
// Возвращаемое значение:
//  Структура
//   * ТипыЭлементов - Соответствие
//     ** Ключ - Строка - имя элемента графической схемы
//     ** Значение - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
//   * СоединительныеЛинииУсловий - Соответствие
//     ** Ключ - Строка - имя соединительной линии.
//     ** Значение - Булево - значение условия при котором выполняется переход по линии.
// 
Функция СтруктураНастроекСхемыПроцесса() Экспорт
	
	СтруктураНастроек = Новый Структура();
	СтруктураНастроек.Вставить("ТипыЭлементов", Новый Соответствие());
	СтруктураНастроек.Вставить("СоединительныеЛинииУсловий", Новый Соответствие());
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает тип элемента по данным схемы.
// 
// Параметры:
//  ДанныеСхемы - Структура - см. СхемыПроцессовКлиентСервер.СтруктураДанныхСхемыПроцесса
//  ИмяЭлемента - Строка
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
//  
Функция ТипЭлементаСхемы(ДанныеСхемы, ИмяЭлемента) Экспорт
	
	Возврат ДанныеСхемы.Настройки.ТипыЭлементов[ИмяЭлемента];
	
КонецФункции

// Возвращает графическую схему, которую содержат данные схемы.
// 
// Параметры:
//  ДанныеСхемы - Структура - см. СхемыПроцессовКлиентСервер.СтруктураДанныхСхемыПроцесса
// 
// Возвращаемое значение:
//  ГрафическаяСхема
//  
Функция ГрафическаяСхемаПоДаннымСхемы(ДанныеСхемы) Экспорт
	
	Возврат ДанныеСхемы.Схема;
	
КонецФункции

// Возвращает типы всех элементов, по данным схемы.
// 
// Параметры:
//  ДанныеСхемы - Структура - см. СхемыПроцессовКлиентСервер.СтруктураДанныхСхемыПроцесса 
// 	
// Возвращаемое значение:
//  Соответствие
//   * Ключ - Строка - имя элемента
//   * Значение - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
// 	
Функция ТипыВсехЭлементовПоДаннымСхемы(ДанныеСхемы) Экспорт
	
	Возврат ДанныеСхемы.Настройки.ТипыЭлементов;
	
КонецФункции

// Возвращает имена предшествующих элементов в схеме.
// 
// Параметры:
// 	Схема - ГрафическаяСхема
// 	ТипыВсехЭлементов - Соответствие
// 	 * Ключ - Строка - Имя элемента в схеме.
// 	 * Значение - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
// 	ИмяЭлемента - Строка - Имя элемента, для которого ищутся имена предшествующих элементов.
//  ТипыПредшествующихЭлементов - Соответствие - типы искомых предшествующих элементов.
//   * Ключ - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
//   * Значение - Булево - всегда Истина.  	 
// 
// Возвращаемое значение:
// 	Массив
// 	 * Строка - имена предшествующих элементов.
//
Функция ИменаПредшествующихЭлементовВСхеме(Схема, ТипыВсехЭлементов, ИмяЭлемента,
	ТипыПредшествующихЭлементов) Экспорт
	
	ИменаПредшествующихЭлементов = Новый Массив();
	
	НайтиИменаПредшествующихЭлементов(
		Схема,
		ТипыВсехЭлементов,
		ИмяЭлемента,
		ТипыПредшествующихЭлементов,
		ИменаПредшествующихЭлементов);

	Возврат ИменаПредшествующихЭлементов;
	
КонецФункции

// Возвращает имя элемента старта схемы.
// 
// Параметры:
//  ДанныеСхемы - Структура - см. СхемыПроцессовКлиентСервер.СтруктураДанныхСхемыПроцесса 
// 
// Возвращаемое значение:
//  Строка - пустая строка, если элемента с типом Старт нет в схеме.
//  
Функция ИмяЭлементаСтартаСхемы(ДанныеСхемы) Экспорт
	
	ИмяЭлемента = "";
	
	Для Каждого КлючЗначение Из ТипыВсехЭлементовПоДаннымСхемы(ДанныеСхемы) Цикл
		Если ЭтоСтартСхемы(КлючЗначение.Значение) Тогда
			ИмяЭлемента = КлючЗначение.Ключ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИмяЭлемента;
	
КонецФункции

#КонецОбласти

#Область РаботаССхемойВФорме

// Возвращает графическую схему, размещенную в форме.
// 
// Возвращается ссылка на графическую схему в форме.
// Все изменения в схеме, будут видны в соответствующем элементе управления схемой.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка со схемой.
// 
// Возвращаемое значение:
//  ГрафическаяСхема
//  
Функция ГрафическаяСхемаВФорме(Форма) Экспорт
	
	Возврат Форма.Схема;
	
КонецФункции

// Возврщает данные схемы из формы.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка со схемой.
// 
// Возвращаемое значение:
//  Структура - см. СтруктураНастроекСхемыПроцесса()
//  
Функция ДанныеСхемыПроцессаИзФормы(Форма) Экспорт
		
	ДанныхСхемыПроцесса = СтруктураДанныхСхемыПроцесса();
	
	Если Форма.ДанныеСхемы <> Неопределено Тогда
		ДанныхСхемыПроцесса.Наименование = Форма.ДанныеСхемы.Наименование;
		ДанныхСхемыПроцесса.ВерсияДанных = Форма.ДанныеСхемы.ВерсияДанных;
		ДанныхСхемыПроцесса.Настройки = Форма.ДанныеСхемы.НастройкиСхемы;
		ДанныхСхемыПроцесса.Схема = Форма.Схема;
	КонецЕсли;
	
	Возврат ДанныхСхемыПроцесса;
	
КонецФункции

// Возвращает имя текущего элемента схемы по данным в форме. 
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - карточка со схемой.
// 	
// Возвращаемое значение:
//  Строка
// 	
Функция ИмяТекущегоЭлементаСхемыПоЕеДаннымВФорме(Форма) Экспорт
	
	Возврат Форма.ДанныеСхемы.ТекущийЭлементСхемы;
	
КонецФункции

// Возвращает ссылку на схему в форме.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка со схемой.
// 
// Возвращаемое значение:
//  
Функция СсылкаНаСхемуВФорме(Форма) Экспорт
	
	Возврат Форма.ДанныеСхемы.Ссылка;
	
КонецФункции

// Возвращает все элементы схемы в форме.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка со схемой.
//  
// Возвращаемое значение:
//  * Ключ - Строка - имя элемента графической схемы
//  * Значение - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
//
Функция ВсеЭлементыСхемы(Форма) Экспорт
	
	Возврат Форма.ДанныеСхемы.НастройкиСхемы.ТипыЭлементов;  
	
КонецФункции

// Возвращает тип элемента схемы, по данным схемы в форме.
// 
// Параметры:
// 	ИмяЭлемента - Строка - имя элемента схемы.
// 	Форма - ФормаКлиентскогоПриложения - карточка со схемой. 
// 	
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
// 	
Функция ТипЭлементаСхемыПоДаннымСхемыВФорме(ИмяЭлемента, Форма) Экспорт
	
	Возврат Форма.ДанныеСхемы.НастройкиСхемы.ТипыЭлементов[ИмяЭлемента];
	
КонецФункции

// Возвращает типы всех элементов, по данным схемы в форме.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - карточка со схемой. 
// 	
// Возвращаемое значение:
//  Соответствие
//   * Ключ - Строка - имя элемента
//   * Значение - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
// 	
Функция ТипыВсехЭлементовПоДаннымСхемыВФорме(Форма) Экспорт
	
	Возврат Форма.ДанныеСхемы.НастройкиСхемы.ТипыЭлементов;
	
КонецФункции

// Возвращает имена предшествующих элементов по схеме в форме.
// 
// Параметры:
// 	ИмяЭлемента - Строка - Имя элемента, для которого ищутся имена предшествующих элементов.
//  ТипыПредшествующихЭлементов - Соответствие - типы искомых предшествующих элементов.
//   * Ключ - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
//   * Значение - Булево - всегда Истина. 
// 	Форма - ФормаКлиентскогоПриложения - карточка со схемой. 
// 
// Возвращаемое значение:
// 	Массив
// 	 * Строка - имена предшествующих элементов.
//
Функция ИменаПредшествующихЭлементовСхемыВФорме(
	ИмяЭлемента, ТипыПредшествующихЭлементов, Форма) Экспорт
	
	Возврат ИменаПредшествующихЭлементовВСхеме(
		Форма.Схема,
		Форма.ДанныеСхемы.НастройкиСхемы.ТипыЭлементов,
		ИмяЭлемента,
		ТипыПредшествующихЭлементов);
	
КонецФункции

// Заполняет заголовок формы с данными схемы. 
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма со схемой процесса.
//
Процедура ЗаполнитьЗаголовокФормыПоДаннымСхемы(Форма) Экспорт
	
	СтрокиЗаголовка = Новый Массив();
	
	Если ЗначениеЗаполнено(Форма.ДанныеСхемы.Наименование) Тогда
		СтрокиЗаголовка.Добавить(Форма.ДанныеСхемы.Наименование);
	Иначе
		СтрокиЗаголовка.Добавить(НСтр("ru = 'Схема процесса'"));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.ДанныеСхемы.Ссылка) Тогда
		СтрокиЗаголовка.Добавить(НСтр("ru = '(создание)'"));
	КонецЕсли;
	
	Форма.Заголовок = СтрСоединить(СтрокиЗаголовка, " ");
	
КонецПроцедуры

// Заполняет навигационную ссылку формы по данным схемы.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма со схемой процесса.
//
Процедура ЗаполнитьНавигационнуюСсылкуФормыПоДаннымСхемы(Форма) Экспорт
	
	Форма.НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Форма.ДанныеСхемы.Ссылка);
	
КонецПроцедуры

// Возвращает наименование схемы по данным в форме.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма со схемой процесса. 
// 	
// Возвращаемое значение:
//  Строка
// 	
Функция НаименованиеСхемыПоДаннымВФорме(Форма) Экспорт
	
	Возврат Форма.ДанныеСхемы.Наименование;
	
КонецФункции

// Устанавливает наименование схеме в форме.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма со схемой процесса.
// 	Наименование - Строка - наименование, которое требуется установить.
//
Процедура УстановитьНаименованиеВДанныеСхемы(Форма, Наименование) Экспорт
	
	Если Форма.ДанныеСхемы.Наименование <> Наименование Тогда
		Форма.ДанныеСхемы.Наименование = Наименование;
		Форма.ДанныеСхемы.СхемаИзменена = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак того, что схема процесса настроена в форме. 
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма со схемой процесса. 
// 
// Возвращаемое значение:
//  Булево
//  
Функция СхемаПроцессаНастроена(Форма) Экспорт
	
	Возврат Форма.ДанныеСхемы.НастройкиСхемы.Количество() > 0;
	
КонецФункции

// Возвращает описание элемента схемы по умолчанию.
// 
// Параметры:
//  ИмяЭлемента - Строка - см. имя элемента в схеме.
//  Форма - ФормаКлиентскогоПриложения - см. форма со схемой процесса. 
// 
// Возвращаемое значение:
//  Строка
//  
Функция ОписаниеЭлементаПоУмолчанию(ИмяЭлемента, Форма) Экспорт
	
	ИндексИмени = ИндексИмениЭлемента(ИмяЭлемента);
	
	ТипЭлемента = Форма.ДанныеСхемы.НастройкиСхемы.ТипыЭлементов[ИмяЭлемента];
	Если ЭтоДействиеСхемы(ТипЭлемента) Тогда
		
		Возврат НаименованиеДействияПоУмолчанию(ИндексИмени);
	
	ИначеЕсли ЭтоВложенныйПроцессСхемы(ТипЭлемента) Тогда
		
		Возврат НаименованиеВложенногоПроцессаПоУмолчанию(ИндексИмени);
	
	ИначеЕсли ЭтоСкриптСхемы(ТипЭлемента) Тогда
			
		Возврат НаименованиеСкриптаПоУмолчанию(ИндексИмени);
	
	ИначеЕсли ЭтоУсловиеСхемы(ТипЭлемента) Тогда 
		
		Возврат НаименованиеУсловияПоУмолчанию(ИндексИмени);
		
	КонецЕсли;
	
	Возврат ИмяЭлемента;
		
КонецФункции

// Возвращает описание элемента схемы в форме.
// 
// Параметры:
// 	ИмяЭлемента - Строка - имя элемента схемы.
// 	Форма - ФормаКлиентскогоПриложения - карточка со схемой.
// 	
// Возвращаемое значение:
// 	Строка
//
Функция ОписаниеЭлементаСхемыВФорме(ИмяЭлемента, Форма) Экспорт
	
	Возврат ОписаниеЭлементаСхемы(ИмяЭлемента, Форма.Схема);
		
КонецФункции

// Устанавливает описание элементу схемы.
// 
// Параметры:
// 	ИмяЭлемента - Строка - имя элемента схемы.
// 	Форма - ФормаКлиентскогоПриложения - карточка со схемой.
// 	Описание - Строка - новое описание элемента.
// 	                    Если не указано, то устанавливается описание по умолчанию.
//  ПараметрыОформления - Структура
//
Процедура УстановитьОписаниеЭлементуСхемы(ИмяЭлемента, Форма, Описание = Неопределено,
	ПараметрыОформления = Неопределено) Экспорт
	
	ОписаниеДляУстановки = Описание;
	Если Не ЗначениеЗаполнено(ОписаниеДляУстановки) Тогда
		ОписаниеДляУстановки = ОписаниеЭлементаПоУмолчанию(ИмяЭлемента, Форма);
	КонецЕсли;
	
	Если ПараметрыОформления = Неопределено Тогда
		ПараметрыОформления = ПараметрыОформленияЭлементаСхемы();
		ПараметрыОформления.ОписаниеЭлемента = ОписаниеДляУстановки;
	КонецЕсли;
			
	УстановитьОформлениеЭлементуСхемы(
		Форма.Схема,
		ИмяЭлемента,
		ПараметрыОформления);
		
	Форма.ДанныеСхемы.СхемаИзменена = Истина;
		
КонецПроцедуры

// Возвращает наличие ошибок настройки схемы в форме.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - карточка со схемой.
// 	
// Возвращаемое значение:
//  Булево
//
Функция ЕстьОшибкиНастройкиСхемы(Форма) Экспорт
	
	Возврат Не Форма.ДанныеСхемы.РезультатПроверкиСхемы.НетОшибок;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ПроверкаТипаЭлемента

// Возвращает типы элементов схемы процесса, соответствующие блоку выполнения схемы.
// 
// Возвращаемое значение:
// 	Массив
// 	 * см. ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
//
Функция ТипыЭлементовСоответствующиеБлокуВыполненияСхемы() Экспорт
		
	ТипыДляЭлементаОбработка = Новый Массив();
	ТипыДляЭлементаОбработка.Добавить(
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Действие"));
	ТипыДляЭлементаОбработка.Добавить(
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.ВложенныйПроцесс"));
	ТипыДляЭлементаОбработка.Добавить(
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Скрипт"));
		
	Возврат ТипыДляЭлементаОбработка;
	
КонецФункции

// Возвращает поддерживаемые типы элементов схемы по умолчанию.
// По умолчанию поддерживаются все типы.
// 
// Возвращаемое значение:
//  Соответствие
//   * Ключ - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
//   * Значение - Булево - всегда Истина.
//
Функция ПоддерживаемыеТипыЭлементовСхемыПоУмолчанию() Экспорт
	
	ПоддерживаемыеТипы = Новый Соответствие();
	
	ПоддерживаемыеТипы.Вставить(
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.ВложенныйПроцесс"),
		Истина);
	
	ПоддерживаемыеТипы.Вставить(
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Действие"),
		Истина);
	
	ПоддерживаемыеТипы.Вставить(
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.ДекоративнаяЛиния"),
		Истина);
	
	ПоддерживаемыеТипы.Вставить(
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Декорация"),
		Истина);
	
	ПоддерживаемыеТипы.Вставить(
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Завершение"),
		Истина);
	
	ПоддерживаемыеТипы.Вставить(
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Разделение"),
		Истина);
	
	ПоддерживаемыеТипы.Вставить(
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Скрипт"),
		Истина);
	
	ПоддерживаемыеТипы.Вставить(
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Слияние"),
		Истина);
	
	ПоддерживаемыеТипы.Вставить(
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Старт"),
		Истина);
	
	ПоддерживаемыеТипы.Вставить(
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Условие"),
		Истина);
	
	Возврат ПоддерживаемыеТипы;	 
	
КонецФункции

#КонецОбласти

#Область РаботаСДаннымиСхемы

// Обновляет НастройкиСхемы по графической схеме.
// 
// Параметры:
//   НастройкиСхемы - Структура - см. СтруктураНастроекСхемыПроцесса 
//   Схема - ГрафическаяСхема
//
// Возвращаемое значение:
// 	Структура - Описание:
//   * ДобавленныеЭлементы - Массив - имена добавленных элементов.
//     ** Строка
//   * УдаленныеЭлементы - Массив - имена удаленных элементов.
//      ** Строка
//
Функция ОбновитьНастройкиПоСхеме(НастройкиСхемы, Схема) Экспорт
	
	РезультатОбновления = Новый Структура;
	РезультатОбновления.Вставить("ДобавленныеЭлементы", Новый Массив);
	РезультатОбновления.Вставить("УдаленныеЭлементы", Новый Массив);
	
	НеПоддерживаемыеЭлементы = НеПоддерживаемыеЭлементыГрафическойСхемы();
	
	ИменаЭлементовГрафическоСхемы = Новый Соответствие();
	
	ИменаПоложительныхЛинийУсловий = Новый Соответствие;
	ИменаПоложительныхЛинийУсловий["Да"] = Истина;
	ИменаПоложительныхЛинийУсловий["Yes"] = Истина;
	
	Для Каждого ЭлементГрафическойСхемы Из Схема.ЭлементыГрафическойСхемы Цикл
		
		ИмяЭлемента = ЭлементГрафическойСхемы.Имя;
		
		ИменаЭлементовГрафическоСхемы[ИмяЭлемента] = Истина; 
		
		ТипЭлементаГрафическойСхемы = ТипЗнч(ЭлементГрафическойСхемы);
		
		Если ТипЭлементаГрафическойСхемы = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") Тогда
			Если ТипЗнч(ЭлементГрафическойСхемы.НачалоЭлемент) = Тип("ЭлементГрафическойСхемыУсловие")
				И НастройкиСхемы.СоединительныеЛинииУсловий[ИмяЭлемента] = Неопределено Тогда
				
				НастройкиСхемы.СоединительныеЛинииУсловий[ИмяЭлемента] =
					(ИменаПоложительныхЛинийУсловий[ЭлементГрафическойСхемы.Наименование] = Истина);
			КонецЕсли;
			Продолжить;					
		КонецЕсли;
		
		Если НастройкиСхемы.ТипыЭлементов[ИмяЭлемента] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатОбновления.ДобавленныеЭлементы.Добавить(ИмяЭлемента); 
		
		Если НеПоддерживаемыеЭлементы[ТипЭлементаГрафическойСхемы] = Истина Тогда
			Продолжить;
		КонецЕсли;
				
		ТипЭлементаСхемы = Неопределено;
		Если ТипЭлементаГрафическойСхемы = Тип("ЭлементГрафическойСхемыОбработка") Тогда
			// Для элемента Обработка присваиваем по умолчанию тип Действие. 
			// Уточнение до других типов делаем отдельно, в том числе интерактивно. 
			ТипЭлементаСхемы = 
				ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Действие"); 
		ИначеЕсли ТипЭлементаГрафическойСхемы = Тип("ЭлементГрафическойСхемыДекоративнаяЛиния") Тогда
			ТипЭлементаСхемы = 
				ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.ДекоративнаяЛиния");
		ИначеЕсли ТипЭлементаГрафическойСхемы = Тип("ЭлементГрафическойСхемыДекорация") Тогда
			ТипЭлементаСхемы = 
				ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Декорация");
		ИначеЕсли ТипЭлементаГрафическойСхемы = Тип("ЭлементГрафическойСхемыЗавершение") Тогда
			ТипЭлементаСхемы = 
				ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Завершение");
		ИначеЕсли ТипЭлементаГрафическойСхемы = Тип("ЭлементГрафическойСхемыРазделение") Тогда
			ТипЭлементаСхемы = 
				ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Разделение");
		ИначеЕсли ТипЭлементаГрафическойСхемы = Тип("ЭлементГрафическойСхемыСлияние") Тогда
			ТипЭлементаСхемы = 
				ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Слияние");
		ИначеЕсли ТипЭлементаГрафическойСхемы = Тип("ЭлементГрафическойСхемыСтарт") Тогда
			ТипЭлементаСхемы = 
				ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Старт");	
		ИначеЕсли ТипЭлементаГрафическойСхемы = Тип("ЭлементГрафическойСхемыУсловие") Тогда
			ТипЭлементаСхемы = 
				ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Условие");
		КонецЕсли;
		
		НастройкиСхемы.ТипыЭлементов[ИмяЭлемента] = ТипЭлементаСхемы;
						
	КонецЦикла;
	
	Для Каждого ТипЭлементаСхемы Из НастройкиСхемы.ТипыЭлементов Цикл
		Если ИменаЭлементовГрафическоСхемы[ТипЭлементаСхемы.Ключ] = Истина Тогда
			Продолжить;
		КонецЕсли;
		РезультатОбновления.УдаленныеЭлементы.Добавить(ТипЭлементаСхемы.Ключ);
	КонецЦикла;
	Для Каждого УдаленныйЭлемент Из РезультатОбновления.УдаленныеЭлементы Цикл
		НастройкиСхемы.ТипыЭлементов.Удалить(УдаленныйЭлемент);
	КонецЦикла;
	
	УдаленныеСоединительныеЛинии = Новый Массив;
	Для Каждого СоединительнаяЛиния Из НастройкиСхемы.СоединительныеЛинииУсловий Цикл
		Если ИменаЭлементовГрафическоСхемы[СоединительнаяЛиния.Ключ] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		УдаленныеСоединительныеЛинии.Добавить(СоединительнаяЛиния.Ключ);
	КонецЦикла;
	Для Каждого УдаленнаяЛиния Из УдаленныеСоединительныеЛинии Цикл
		НастройкиСхемы.СоединительныеЛинииУсловий.Удалить(УдаленнаяЛиния);
	КонецЦикла;
		
	Возврат РезультатОбновления;
	
КонецФункции

#КонецОбласти

// Обновляет представление элементов графической схемы:
// - Восстанавливает фон элемента (его изменение не поддерживается).
// - Устанавливает наименование элементам по умолчанию.
// - Выделяет неподдерживаемые элементы.   
// 
// Параметры:
//   Схема - ГрафическаяСхема
//   НастройкиСхемы - Структура - см. СтруктураНастроекСхемыПроцесса
//
Процедура ОбновитьПредставлениеЭлементовСхемыПроцесса(Схема, НастройкиСхемы) Экспорт
	
#Если Не ВебКлиент И Не МобильныйКлиент Тогда
	
	НеПоддерживаемыеЭлементы = НеПоддерживаемыеЭлементыГрафическойСхемы();
	
	Для Каждого ЭлементГрафическойСхемы Из Схема.ЭлементыГрафическойСхемы Цикл
		
		ТипЭлементаГрафическойСхемы = ТипЗнч(ЭлементГрафическойСхемы);
				
		Если НеПоддерживаемыеЭлементы[ТипЭлементаГрафическойСхемы] = Истина Тогда
							
			ЭлементГрафическойСхемы.Картинка = БиблиотекаКартинок.Предупреждение32;
			ЭлементГрафическойСхемы.ПоложениеКартинки = 
				ПоложениеКартинкиЭлементаГрафическойСхемы.Центр;
			
			ЭлементГрафическойСхемы.ЦветФона = WebЦвета.Белый;
			ЭлементГрафическойСхемы.ПрозрачныйФон = Ложь;
			
			Продолжить;
		КонецЕсли;
		
		ТипЭлемента = НастройкиСхемы.ТипыЭлементов[ЭлементГрафическойСхемы.Имя];
		Если ТипЭлемента = Неопределено Тогда
			Продолжить;
		КонецЕсли; 		
		
		Если ЭтоДействиеСхемы(ТипЭлемента) Тогда
			
			Если ЭлементГрафическойСхемы.Имя = ЭлементГрафическойСхемы.Наименование Тогда
				ИндексИмениЭлемента = ИндексИмениЭлемента(ЭлементГрафическойСхемы.Имя);
				ЭлементГрафическойСхемы.Наименование = 
					НаименованиеДействияПоУмолчанию(ИндексИмениЭлемента);
			КонецЕсли;
			
			ЭлементГрафическойСхемы.ЦветФона = Новый Цвет(254, 253, 214);
			ЭлементГрафическойСхемы.ПрозрачныйФон = Ложь;
		
		ИначеЕсли ЭтоВложенныйПроцессСхемы(ТипЭлемента) Тогда
			
			ИндексИмениЭлемента = ИндексИмениЭлемента(ЭлементГрафическойСхемы.Имя);
			Если ЭлементГрафическойСхемы.Наименование =
				НаименованиеДействияПоУмолчанию(ИндексИмениЭлемента) Тогда
								
				ЭлементГрафическойСхемы.Наименование = 
					НаименованиеВложенногоПроцессаПоУмолчанию(ИндексИмениЭлемента);
			КонецЕсли;
			
			ЭлементГрафическойСхемы.ЦветФона = Новый Цвет(224, 224, 243);
			ЭлементГрафическойСхемы.ПрозрачныйФон = Ложь;
		
		ИначеЕсли ЭтоСкриптСхемы(ТипЭлемента) Тогда
					
			ИндексИмениЭлемента = ИндексИмениЭлемента(ЭлементГрафическойСхемы.Имя);
			Если ЭлементГрафическойСхемы.Наименование = 
				НаименованиеДействияПоУмолчанию(ИндексИмениЭлемента) Тогда
				
				ЭлементГрафическойСхемы.Наименование = 
					НаименованиеСкриптаПоУмолчанию(ИндексИмениЭлемента);
			КонецЕсли;
					
			ЭлементГрафическойСхемы.ЦветФона = Новый Цвет(255, 213, 214);
			ЭлементГрафическойСхемы.ПрозрачныйФон = Ложь;
		
		ИначеЕсли ЭтоУсловиеСхемы(ТипЭлемента) Тогда
			
			Если ЭлементГрафическойСхемы.Имя = ЭлементГрафическойСхемы.Наименование Тогда
				ИндексИмениЭлемента = ИндексИмениЭлемента(ЭлементГрафическойСхемы.Имя);
				ЭлементГрафическойСхемы.Наименование = 
					НаименованиеУсловияПоУмолчанию(ИндексИмениЭлемента);
			КонецЕсли;
			
			ЭлементГрафическойСхемы.ЦветФона = Новый Цвет();
			ЭлементГрафическойСхемы.ПрозрачныйФон = Ложь;
		
		ИначеЕсли ЭтоДекорацияСхемы(ТипЭлемента) Или ЭтоДекоративнаяЛинияСхемы(ТипЭлемента) Тогда 
							
			// Допустимо любое оформление.		
			
		Иначе // Старт, Завершение, Разделение, Слияние
			
			// Очищаем наименование, если оно не менялось вручную.
			Если ЭлементГрафическойСхемы.Имя = ЭлементГрафическойСхемы.Наименование Тогда
				ЭлементГрафическойСхемы.Наименование = "";
			КонецЕсли;
			
			// Устанавливаем стандартный цвет.
			ЭлементГрафическойСхемы.ЦветФона = Новый Цвет();
			ЭлементГрафическойСхемы.ПрозрачныйФон = Ложь;
						
		КонецЕсли;
		
	КонецЦикла;

#КонецЕсли

КонецПроцедуры

#Область РаботаССхемойВФорме

// Возвращает пустую структуру данных схемы процесса в форме. 
// 
// Возвращаемое значение:
//  Структура
//   * Ссылка - СправочникСсылка.СхемыПроцессов - ссылка на схему.
//   * Наименование - Строка - наименование схемы.
//   * ВерсияДанных - Строка - версия объекта схемы процесса.
//   * ТекущийЭлементСхемы - Строка - имя текущего элемента в схеме.
//   * НастройкиСхемы - Структура - см. СтруктураНастроекСхемыПроцесса.
//   * ПоддерживаемыеТипыЭлементов - Соответствие - содержит поддерживаемые типы элементов в схеме.
//     ** Ключ - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
//     ** Значение - Булево - всегда Истина.
//   * РезультатПроверкиСхемы - Структура - содержит результат проверки схемы в форме.
// 	
Функция СтруктураДанныхСхемыВФорме() Экспорт
	
	СтруктураДанныхВФорме = Новый Структура();
	
	СтруктураДанныхВФорме.Вставить("Ссылка",
		ПредопределенноеЗначение("Справочник.СхемыПроцессов.ПустаяСсылка"));
	
	СтруктураДанныхВФорме.Вставить("Наименование", "");
	
	СтруктураДанныхВФорме.Вставить("СхемаИзменена", Ложь);
	
	СтруктураДанныхВФорме.Вставить("ВерсияДанных", "");
	
	СтруктураДанныхВФорме.Вставить("ТекущийЭлементСхемы", "");
		
	СтруктураДанныхВФорме.Вставить("НастройкиСхемы", СтруктураНастроекСхемыПроцесса());
	
	СтруктураДанныхВФорме.Вставить("ПоддерживаемыеТипыЭлементов", Новый Соответствие());
	
	СтруктураДанныхВФорме.Вставить("РезультатПроверкиСхемы", СтруктуруРезультатаПроверкиСхемы());
	
	Возврат СтруктураДанныхВФорме;
	
КонецФункции

#КонецОбласти

// Возвращает не поддерживаемые элементы графической схемы.
// 
// Возвращаемое значение:
//  Соответствие
//   * Ключ - Тип - тип элемента графической схемы.
//   * Значение - Булево - всегда Истина.
//
Функция НеПоддерживаемыеЭлементыГрафическойСхемы() Экспорт
	
	НеПоддерживаемыеЭлементы = Новый Соответствие();
	НеПоддерживаемыеЭлементы[Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс")] = Истина;
	НеПоддерживаемыеЭлементы[Тип("ЭлементГрафическойСхемыВыборВарианта")] = Истина;
	НеПоддерживаемыеЭлементы[Тип("ЭлементГрафическойСхемыДействие")] = Истина;
	
	Возврат НеПоддерживаемыеЭлементы;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПредставлениеЭлементовСхемы

// Возвращает по имени элемента его индекс (цифра в конце имени).
// 
// Параметры:
//  ИмяЭлемента - Строка - имя элемента.
//  
// Возвращаемое значение:
//  Число
//
Функция ИндексИмениЭлемента(ИмяЭлемента)
	
	НомерСимвола = СтрДлина(ИмяЭлемента);
	ЧислоСимволовВИндексе = 0;		
	Пока НомерСимвола >= 1 Цикл
		КодСимвола = КодСимвола(ИмяЭлемента, НомерСимвола);
		НомерСимвола = НомерСимвола - 1;
		Если КодСимвола < 48 Или КодСимвола > 57 Тогда
			Прервать;
		КонецЕсли;
		ЧислоСимволовВИндексе = ЧислоСимволовВИндексе + 1;
	КонецЦикла;
	
	Если ЧислоСимволовВИндексе = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Число(Прав(ИмяЭлемента, ЧислоСимволовВИндексе));
		
КонецФункции

// Возвращает наименование действия схемы по умолчанию.
//
// Параметры:
//  ИндексДействия - Число - индекс действия в схеме.
//  
// Возвращаемое значение:
//  Строка
//
Функция НаименованиеДействияПоУмолчанию(ИндексДействия)
	
	ПредставлениеНаименования = НСтр("ru = 'Действие'");
	
	Если ИндексДействия > 0 Тогда
		Возврат СокрЛП(СтрШаблон("%1 %2", ПредставлениеНаименования, ИндексДействия));
	Иначе
		Возврат ПредставлениеНаименования;
	КонецЕсли;
		
КонецФункции

// Возвращает наименование действия схемы по умолчанию.
//
// Параметры:
//  ИндексВложенногоПроцесса - Число - индекс вложенного процесса в схеме.
//  
// Возвращаемое значение:
//  Строка
//
Функция НаименованиеВложенногоПроцессаПоУмолчанию(ИндексВложенногоПроцесса)
	
	ПредставлениеНаименования = НСтр("ru = 'Вложенный процесс'");
	
	Если ИндексВложенногоПроцесса > 0 Тогда
		Возврат СокрЛП(СтрШаблон("%1 %2", ПредставлениеНаименования, ИндексВложенногоПроцесса));
	Иначе
		Возврат ПредставлениеНаименования;
	КонецЕсли;
		
КонецФункции

// Возвращает наименование скрипта схемы по умолчанию.
//
// Параметры:
//  ИндексСкрипта - Число - индекс скрипта в схеме.
//  
// Возвращаемое значение:
//  Строка
//
Функция НаименованиеСкриптаПоУмолчанию(ИндексСкрипта)
	
	ПредставлениеНаименования = НСтр("ru = 'Скрипт'");
	
	Если ИндексСкрипта > 0 Тогда
		Возврат СокрЛП(СтрШаблон("%1 %2", ПредставлениеНаименования, ИндексСкрипта));
	Иначе
		Возврат ПредставлениеНаименования;
	КонецЕсли;
		
КонецФункции

// Возвращает наименование условия схемы по умолчанию.
//
// Параметры:
//  ИндексСкрипта - Число - индекс условия в схеме.
//  
// Возвращаемое значение:
//  Строка
//
Функция НаименованиеУсловияПоУмолчанию(ИндексУсловия)
	
	ПредставлениеНаименования = НСтр("ru = 'Условие'");
	
	Если ИндексУсловия > 0 Тогда
		Возврат СокрЛП(СтрШаблон("%1 %2", ПредставлениеНаименования, ИндексУсловия));
	Иначе
		Возврат ПредставлениеНаименования;
	КонецЕсли;
		
КонецФункции

#КонецОбласти

#Область РаботаСДаннымиСхемы

// Ищет имена предшествующих элементов указанных типов, помещая их в параметр
// ИменаПредшествующихЭлементов.
// 
// Параметры:
// 	Схема - ГрафическаяСхема
//  ТипыВсехЭлементов - Соответствие
// 	 * Ключ - Строка - Имя элемента в схеме.
// 	 * Значение - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
//  ИмяЭлемента - Строка - Имя элемента, для которого ищутся имена предшествующих элементов.
//  ТипыПредшествующихЭлементов - Соответствие - типы искомых предшествующих элементов.
//   * Ключ - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
//   * Значение - Булево - всегда Истина.
//  ИменаПредшествующихЭлементов - Массив
// 	 * Строка - имена предшествующих элементов.
//
Процедура НайтиИменаПредшествующихЭлементов(
	Схема, ТипыВсехЭлементов, ИмяЭлемента,
	ТипыПредшествующихЭлементов, ИменаПредшествующихЭлементов)
	
	ТекущийЭлементСхемы = Схема.ЭлементыГрафическойСхемы.Найти(ИмяЭлемента);
		
	Для Каждого ЭлементСхемы Из Схема.ЭлементыГрафическойСхемы Цикл
				
		Если ТипЗнч(ЭлементСхемы) <> Тип("ЭлементГрафическойСхемыСоединительнаяЛиния")
			Или ЭлементСхемы.НачалоЭлемент = Неопределено
			Или ЭлементСхемы.КонецЭлемент <> ТекущийЭлементСхемы Тогда
			
			Продолжить
		КонецЕсли;
		
		ТипЭлемента = ТипыВсехЭлементов[ЭлементСхемы.НачалоЭлемент.Имя];
		Если ТипыПредшествующихЭлементов[ТипЭлемента] = Истина Тогда
			ИменаПредшествующихЭлементов.Добавить(ЭлементСхемы.НачалоЭлемент.Имя);
		Иначе
			НайтиИменаПредшествующихЭлементов(
				Схема,
				ТипыВсехЭлементов,
				ЭлементСхемы.НачалоЭлемент.Имя,
				ТипыПредшествующихЭлементов,
				ИменаПредшествующихЭлементов);
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти