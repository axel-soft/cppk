///////////////////////////////////////////////////////////////////////////////////////////////
// Модуль содержит код для работы с диспетчером обработки заданий
// 

#Область СлужебныйПрограммныйИнтерфейс

#Область ВыполнениеЗаданийНаСервере

// Реализация обработчика.
// 
// Параметры:
// 	ДолгоеЗадание - Булево
Процедура ДиспетчерОбработкиОчередиЗаданийРеализация(ДолгоеЗадание) Экспорт

	Если ДолгоеЗадание Тогда
		ЧислоПотоковМаршрутизации = Константы.ЧислоПотоковВыполненияДолгихЗаданийНаСервере.Получить();
	Иначе
		ЧислоПотоковМаршрутизации = Константы.ЧислоПотоковВыполненияЗаданийНаСервере.Получить();
	КонецЕсли;		
	
	Если ДолгоеЗадание Тогда
		ПрефиксФМаршрутизацияПроцессов = "ОбработкаОчередиЗаданийДолгая_";
	Иначе	
		ПрефиксФМаршрутизацияПроцессов = "ОбработкаОчередиЗаданий_";
	КонецЕсли;
	
	// Обработка очереди.
	Для НомерПотока = 1 По ЧислоПотоковМаршрутизации Цикл
		КлючФоновогоЗадания = ПрефиксФМаршрутизацияПроцессов + Строка(НомерПотока);
		Если Не ЕстьАктивноеФоновоеЗадание(КлючФоновогоЗадания) Тогда
			ЗапуститьФоновоеЗаданиеВПотоке(КлючФоновогоЗадания, 
				"ДиспетчерОбработкиОчередиЗаданийПолныеПрава.ОбработкаЗаданияИзОчереди", 
				НомерПотока, ДолгоеЗадание);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет маршрутизацию из очереди с номером потока.
//
// Параметры:
//  Поток  - Число - номер потока.
//
Процедура ОбработкаЗаданияИзОчереди(Поток, ДолгоеЗадание) Экспорт
	
	УстановитьПараметрыСеанса();
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияОбработка(),
		УровеньЖурналаРегистрации.Информация,,,
		СтрШаблон(Нстр("ru = 'Начало. Поток %1'"), Поток));
	
	ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	ВремяРаботы = 300;
	Если ЭтоФайловаяБаза Тогда
		ВремяРаботы = 3;
	КонецЕсли;	
	
	Если ДолгоеЗадание Тогда
		ТипыНаСервере = Перечисления.ТипыЗаданий.ТипыОбрабатываемыеНаСервереДолгие();
	Иначе
		ТипыНаСервере = Перечисления.ТипыЗаданий.ТипыОбрабатываемыеНаСервереБыстрые();
	КонецЕсли;		

	КоличествоПопытокОбработки = КоличествоПопытокВыполненияЗаданий();    
	ПрерватьВсеЦиклы = Ложь;
	
	ВремяНачала = ТекущаяДата();
	Пока Истина Цикл
		
		Пока Истина Цикл
		
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ 100
				|	ОчередьЗаданийДокументооборота.Ссылка КАК Задание,
				|	ОчередьЗаданийДокументооборота.НеудачныхПопытокВыполнения КАК НеудачныхПопытокВыполнения,
				|	ОчередьЗаданийДокументооборота.МоментВремени КАК МоментВремени,
				|	ОчередьЗаданийДокументооборота.Тип КАК Тип,
				|	ОчередьЗаданийДокументооборота.ПредметЗадания КАК ПредметЗадания,
				|	ОчередьЗаданийДокументооборота.Родитель КАК Родитель
				|ИЗ
				|	Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
				|ГДЕ
				|	ОчередьЗаданийДокументооборота.УзелОбработки = &УзелОбработки
				|	И ОчередьЗаданийДокументооборота.НомерПотока = &Поток
				|	И ОчередьЗаданийДокументооборота.Тип В (&ТипыНаСервере)
				|	И ОчередьЗаданийДокументооборота.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Выполняется)
				|	И ОчередьЗаданийДокументооборота.НеудачныхПопытокВыполнения < &КоличествоПопытокОбработки
				|
				|УПОРЯДОЧИТЬ ПО
				|	ОчередьЗаданийДокументооборота.МоментВремени";
			
			Запрос.УстановитьПараметр("УзелОбработки", КОДПовтИсп.ИдентификаторТекущегоУзла());
			
			Запрос.УстановитьПараметр("Поток", Поток);
			Запрос.УстановитьПараметр("КоличествоПопытокОбработки", КоличествоПопытокОбработки);
			Запрос.УстановитьПараметр("ТипыНаСервере", ТипыНаСервере);
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				Прервать;
			КонецЕсли;	
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				ЗаданиеЗавершеноУспешно = Ложь; 
				БылаОшибка = Ложь;
				БылиБлокировки = Ложь;
				ОбработатьОдноЗадание(Выборка, КоличествоПопытокОбработки, Поток, 
					ЗаданиеЗавершеноУспешно, БылаОшибка, БылиБлокировки);
					
				Если БылиБлокировки Тогда
					ПрерватьВсеЦиклы = Истина;	
				КонецЕсли;	
				
			КонецЦикла; 
			
			Если ПрерватьВсеЦиклы Тогда
				Прервать;
			КонецЕсли;	
			
		КонецЦикла;

		Если ПрерватьВсеЦиклы Тогда
			Прервать;
		КонецЕсли;	
		
		ТекДата = ТекущаяДата();
		// Работаем 300 сек (или 3 сек), даже если сейчас нечего обрабатывать.
		Если ТекДата > ВремяНачала + ВремяРаботы Тогда 
			Прервать;
		КонецЕсли;	
		
		ОбщегоНазначенияБТС.Пауза(1);
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияОбработка(),
		УровеньЖурналаРегистрации.Информация,,,
		СтрШаблон(Нстр("ru = 'Конец. Поток %1'"), Поток));
	
КонецПроцедуры

// Обработает одно задание из очереди. Запишет с инкрементом НеудачныхПопытокВыполнения при ошибке. 
// 
// Параметры:
// 	Выборка - ВыборкаИзРезультатаЗапроса - Описание
// 	КоличествоПопытокОбработки - Число -макс число попыток обработки
//  ЗаданиеЗавершеноУспешно = Булево
//  БылаОшибка  - Булево
//  БылиБлокировки - Булево
Процедура ОбработатьОдноЗадание(Выборка, КоличествоПопытокОбработки, Поток,
	ЗаданиеЗавершеноУспешно, БылаОшибка, БылиБлокировки) Экспорт
	
	Попытка
		
		ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
		
		ОбработатьЗаданиеОчереди(
			Выборка.Задание,
			Выборка.Тип,
			Выборка.ПредметЗадания,
			Выборка.Родитель,
			Выборка.МоментВремени,
			БылиБлокировки);
		
		ТекстСобытия = НСтр("ru = 'обработка задания = '") + Строка(Выборка.Задание) + НСТр("ru = ' поток: '") + Строка(Поток);
		ЗаписьЖурналаРегистрации(
			ИмяСобытияОбработка(),
			УровеньЖурналаРегистрации.Информация,,,
			ТекстСобытия);
			
		КлючеваяОперация = "ОбработкаЗаданияИзОчереди";
		Комментарий = ПолучитьНавигационнуюСсылку(Выборка.Задание);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала, , Комментарий);
		
		ЗаданиеЗавершеноУспешно = Истина;
			
	Исключение
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		БылаОшибка = Истина;
		
		Справочники.ОчередьЗаданийДокументооборота.ЗарегистрироватьНеудачнуюПопыткуОбработки(
			Выборка.Задание, ТекстОшибки);
		
		Если Выборка.НеудачныхПопытокВыполнения + 1 = КоличествоПопытокОбработки Тогда

			Справочники.ОчередьЗаданийДокументооборота.УстановитьСтатусЗаданию(
				Выборка.Задание, Перечисления.СтатусыЗаданий.ОшибкаВыполнения);
				
			ОбщегоНазначенияДокументооборот.ЗафиксироватьПроблему(
				НСтр("ru = 'Ошибка обработки заданий'"),
				ТекстОшибки,
				НСтр("ru = 'Обработка заданий. Поток '") + Строка(Поток));
			
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры

// Обрабатывает задание очереди маршрутизации.
//
// Параметры:
//  Задание - СправочникСсылка.ОчередьЗаданийДокументооборота - Ссылка на задание.
//  Тип - ПеречислениеСсылка.ТипыЗаданий
//  ПредметЗадания - СправочникСсылка.ДействияОзнакомления,
//  				 СправочникСсылка.ДействияСогласования,
//  				 СправочникСсылка.ДействияРегистрации,
//  				 СправочникСсылка.ДействияПодписания,
//  				 СправочникСсылка.Файлы,
//  				 СправочникСсылка.ДействияУтверждения,
//  				 ДокументСсылка.Задача,
//  				 Строка,
//  				 СправочникСсылка.ДокументыПредприятия,
//  				 СправочникСсылка.ДействияИсполнения,
//  				 ДокументСсылка.ДействиеЗадачи,
//  				 СправочникСсылка.ОбработкиОбъектов,
//  				 БизнесПроцессСсылка,
//  				 ЗадачаСсылка,
//  Родитель - СправочникСсылка.ОчередьЗаданийДокументооборота - Ссылка на родительское (главное) задание.
//  МоментВремениВОчереди - Число - Момент времени задания в очереди.
//  БылиБлокировки - Булево
//
Процедура ОбработатьЗаданиеОчереди(
	Задание,
	Тип,
	ПредметЗадания,
	Родитель,
	МоментВремениВОчереди,
	БылиБлокировки) Экспорт
	
	// Если не удается заблокировать задание, то прекращаем обработку.
	// Возможно задание уже обрабатывается.
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Задание);
	Исключение
		
		Возврат;
		
	КонецПопытки;
	
	РезультатВыполнения = Неопределено;     
	ЕстьНевыполненныеЗадания = Ложь;
	
	ТипыЗаданий = Перечисления.ТипыЗаданий;
	
	РеквизитыЗадания = Новый Структура(
		"Ссылка, Тип, ПредметЗадания, Родитель", Задание, Тип, ПредметЗадания, Родитель);
	АктуальностьЗадания = ОбработкаОчередиЗаданийСервер.АктуальностьЗадания(РеквизитыЗадания);
	
	НачатьТранзакцию();
	Попытка
		
		Если Не АктуальностьЗадания.Актуально Тогда
			
			РезультатВыполнения = 
				ОбработкаОчередиЗаданийСервер.СтруктураРезультатаОбработкиЗаданияОчереди();
			
			РезультатВыполнения.ЗаданиеЗавершено = Истина;
			
			РезультатВыполнения.ЗаписьЛога = СтрШаблон(
				НСтр("ru = 'Задание завершено. %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
				АктуальностьЗадания.Пояснение);
			
		ИначеЕсли Тип = ТипыЗаданий.НачатьВыполнениеДействияПроцессом Тогда
			
			РезультатВыполнения = ОбработкаОчередиЗаданийСервер.
				ОбработатьЗаданиеНачатьВыполнениеДействияПроцессом(Задание, БылиБлокировки);
		
		ИначеЕсли Тип = ТипыЗаданий.НачатьВыполнениеДействияИсполненияПроцессами Тогда
			
			РезультатВыполнения = ОбработкаОчередиЗаданийСервер.
				ОбработатьЗаданиеНачатьВыполнениеДействияИсполненияПроцессами(Задание, БылиБлокировки);

		ИначеЕсли Тип = ТипыЗаданий.СформироватьПроцессДляРассматривающегоДействияИсполнения Тогда
			
			РезультатВыполнения = ОбработкаОчередиЗаданийСервер.
				ОбработатьЗаданиеСформироватьПроцессДляРассматривающегоДействияИсполнения(Задание, БылиБлокировки);

		ИначеЕсли Тип = ТипыЗаданий.СформироватьПроцессДляПунктаДействияИсполнения Тогда
			
			РезультатВыполнения = ОбработкаОчередиЗаданийСервер.
				ОбработатьЗаданиеСформироватьПроцессДляПунктаДействияИсполнения(Задание, БылиБлокировки);
		
		ИначеЕсли Тип = ТипыЗаданий.СформироватьПроцессДляИсполнителейДействияИсполнения Тогда
			
			РезультатВыполнения = ОбработкаОчередиЗаданийСервер.
				ОбработатьЗаданиеСформироватьПроцессДляИсполнителейДействияИсполнения(Задание, БылиБлокировки);
		
		ИначеЕсли Тип = ТипыЗаданий.НачатьВыполнениеДействияСогласованияПроцессом Тогда
			
			РезультатВыполнения = ОбработкаОчередиЗаданийСервер.
				ОбработатьЗаданиеНачатьВыполнениеДействияСогласованияПроцессом(Задание, БылиБлокировки);
		
		ИначеЕсли Тип = ТипыЗаданий.ПодготовитьПредметКСогласованиюВРежимеЗамечаний Тогда
			
			РезультатВыполнения = ОбработкаОчередиЗаданийСервер.
				ОбработатьЗаданиеПодготовитьПредметКСогласованиюВРежимеЗамечаний(Задание, БылиБлокировки);
		
		ИначеЕсли Тип = ТипыЗаданий.НачатьВыполнениеДействияПроцессамиНовыеУчастники Тогда
			
			РезультатВыполнения = ОбработкаОчередиЗаданийСервер.
				ОбработатьЗаданиеНачатьВыполнениеДействияПроцессамиНовымиУчастниками(Задание, БылиБлокировки);
				
		ИначеЕсли Тип = ТипыЗаданий.НачатьВыполнениеДействияСогласованияПроцессомНовыеУчастники Тогда
			
			РезультатВыполнения = ОбработкаОчередиЗаданийСервер.
				ОбработатьЗаданиеНачатьВыполнениеДействияСогласованияПроцессамиНовыеУчастники(Задание, БылиБлокировки);
		
		ИначеЕсли Тип = ТипыЗаданий.СтартоватьПроцесс Тогда
			
			РезультатВыполнения = 
				ОбработкаОчередиЗаданийСервер.ОбработатьЗаданиеСтартоватьПроцесс(Задание, БылиБлокировки);

		ИначеЕсли Тип = ТипыЗаданий.ДобавитьТегиHtmlПриНачалеСогласованияБыстрый Тогда
			
			РезультатВыполнения = 
				ОбработкаОчередиЗаданийСервер.
				ОбработатьЗаданиеТокенизироватьHtmlПриНачалеСогласования(Задание, БылиБлокировки);

		ИначеЕсли Тип = ТипыЗаданий.ДобавитьТегиHtmlПриНачалеСогласованияДолгий Тогда
			
			РезультатВыполнения = 
				ОбработкаОчередиЗаданийСервер.
				ОбработатьЗаданиеТокенизироватьHtmlПриНачалеСогласования(Задание, БылиБлокировки);
	
		ИначеЕсли Тип = ТипыЗаданий.ПодготовкаОзнакомленияСогласования Тогда
			
			РезультатВыполнения = ОбработкаОчередиЗаданийСервер.
				ОбработатьЗаданиеПодготовкаОзнакомленияСогласования(Задание, БылиБлокировки);

		ИначеЕсли Тип = ТипыЗаданий.ДобавитьТегиHtmlПередОзнакомлениемБыстрый Тогда
			
			РезультатВыполнения = 
				ОбработкаОчередиЗаданийСервер.
				ОбработатьЗаданиеТокенизироватьHtmlПередОзнакомлением(Задание, БылиБлокировки);

		ИначеЕсли Тип = ТипыЗаданий.ДобавитьТегиHtmlПередОзнакомлениемДолгий Тогда
			
			РезультатВыполнения = 
				ОбработкаОчередиЗаданийСервер.
				ОбработатьЗаданиеТокенизироватьHtmlПередОзнакомлением(Задание, БылиБлокировки);

		ИначеЕсли Тип = ТипыЗаданий.ВыполнениеЗадачи Тогда
			
			РезультатВыполнения = 
				ОбработкаОчередиЗаданийСервер.
				ОбработатьЗаданиеВыполнениеЗадачи(Задание, БылиБлокировки, ЕстьНевыполненныеЗадания);
				
		ИначеЕсли Тип = ТипыЗаданий.МаршрутизацияКомплексногоПроцессаПослеВыполненияВложенного Тогда
			
			РезультатВыполнения = 
				ОбработкаОчередиЗаданийСервер.
				ОбработатьЗаданиеМаршрутизацияКомплексногоПроцессаПослеВыполненияВложенного(Задание, БылиБлокировки);
		
		ИначеЕсли Тип = ТипыЗаданий.МаршрутизацияКомплексногоПроцессаПослеВыполненияЗадачи Тогда
			
			РезультатВыполнения = 
				ОбработкаОчередиЗаданийСервер.
				ОбработатьЗаданиеМаршрутизацияКомплексногоПроцессаПослеВыполненияЗадачи(Задание, БылиБлокировки);
			
		ИначеЕсли Тип = ТипыЗаданий.МаршрутизацияКомплексногоПроцессаПоСхемеПослеПродолжения Тогда
			
			РезультатВыполнения = 
				ОбработкаОчередиЗаданийСервер.
				ОбработатьЗаданиеМаршрутизацияКомплексногоПроцессаПоСхемеПослеПродолжения(Задание, БылиБлокировки);
				
		ИначеЕсли Тип = ТипыЗаданий.СформироватьПроцессДляОбработкиОбъекта Тогда
			
			РезультатВыполнения = 
				ОбработкаОчередиЗаданийСервер.
				ОбработатьЗаданиеСформироватьПроцессДляОбработкиОбъекта(Задание, БылиБлокировки);
		

		ИначеЕсли Тип = ТипыЗаданий.ЗапускОбработкиПоЗадачеЭлемента Тогда
			
			РезультатВыполнения = 
				ОбработкаОчередиЗаданийСервер.
				ОбработатьЗаданиеЗапускОбработкиПоЗадачеЭлемента(Задание, БылиБлокировки);

		ИначеЕсли Тип = ТипыЗаданий.ЗапускОбработкиПоОбработке Тогда
			
			РезультатВыполнения = 
				ОбработкаОчередиЗаданийСервер.
				ОбработатьЗаданиеЗапускОбработкиПоОбработке(Задание, БылиБлокировки);
		
		ИначеЕсли Тип = ТипыЗаданий.ОбновитьДействиеОбработки Тогда
			
			РезультатВыполнения = 
				ОбработкаОчередиЗаданийСервер.
				ОбработатьЗаданиеОбновитьДействиеОбработки(Задание, БылиБлокировки);

		ИначеЕсли Тип = ТипыЗаданий.ОбновитьОбработкуОбъекта Тогда
			
			РезультатВыполнения = 
				ОбработкаОчередиЗаданийСервер.
				ОбработатьЗаданиеОбновитьОбработкуОбъекта(Задание, БылиБлокировки);

		ИначеЕсли Тип = ТипыЗаданий.ПереносСрокаВыполненияЗадачи Тогда
			
			РезультатВыполнения = 
				ОбработкаОчередиЗаданийСервер.
				ОбработатьЗаданиеПереносСрокаВыполненияЗадачи(Задание, БылиБлокировки);
		
		ИначеЕсли Тип = ТипыЗаданий.ПеренаправлениеЗадачи Тогда
			
			РезультатВыполнения = 
				ОбработкаОчередиЗаданийСервер.
				ОбработатьЗаданиеПеренаправлениеЗадачи(Задание, БылиБлокировки, ЕстьНевыполненныеЗадания);
		
		ИначеЕсли Тип = ТипыЗаданий.ОбновитьЗадачуПоСостояниюДействия Тогда
			
			РезультатВыполнения = 
				ОбработкаОчередиЗаданийСервер.ОбработатьЗаданиеОбновитьЗадачуПоСостояниюДействия(
					Задание, БылиБлокировки);
		
		ИначеЕсли Тип = ТипыЗаданий.ОбновитьЗадачуПриПеренаправлении Тогда
			
			РезультатВыполнения = 
				ОбработкаОчередиЗаданийСервер.ОбработатьЗаданиеОбновитьЗадачуПриПеренаправлении(
					Задание, БылиБлокировки);
		
		ИначеЕсли Тип = ТипыЗаданий.СохранитьРезультатВыполненияВЗадачуПроцесса Тогда
			
			РезультатВыполнения = 
				ОбработкаОчередиЗаданийСервер.ОбработатьЗаданиеСохранитьРезультатВыполненияВЗадачуПроцесса(
					Задание, БылиБлокировки, ЕстьНевыполненныеЗадания);
			
		ИначеЕсли Тип = ТипыЗаданий.ПринятьКИсполнениюЗадачуПроцесса Тогда
			
			РезультатВыполнения = 
				ОбработкаОчередиЗаданийСервер.ОбработатьЗаданиеПринятьКИсполнениюЗадачуПроцесса(
					Задание, БылиБлокировки, ЕстьНевыполненныеЗадания);
			
		ИначеЕсли Тип = ТипыЗаданий.ОтменитьПринятиеКИсполнениюЗадачуПроцесса Тогда
			
			РезультатВыполнения = 
				ОбработкаОчередиЗаданийСервер.ОбработатьЗаданиеОтменитьПринятиеКИсполнениюЗадачуПроцесса(
					Задание, БылиБлокировки, ЕстьНевыполненныеЗадания);
					
		ИначеЕсли Тип = ТипыЗаданий.НачатьВыполнениеДействияМассовогоОзнакомления Тогда
			
			РезультатВыполнения = 
				ОбработкаОчередиЗаданийСервер.
				ОбработатьЗаданиеНачатьВыполнениеДействияМассовогоОзнакомления(Задание, БылиБлокировки);
				
		ИначеЕсли Тип = ТипыЗаданий.ОбновитьЗадачуУчастникаМассовогоОзнакомления Тогда
			
			РезультатВыполнения = 
				ОбработкаОчередиЗаданийСервер.
				ОбработатьЗаданиеОбновитьЗадачуУчастникаМассовогоОзнакомления(Задание, БылиБлокировки);
		
		ИначеЕсли Тип = ТипыЗаданий.ОбработатьИзменениеКонтейнеровДля2ФА Тогда
			
			РезультатВыполнения = ОбработкаОчередиЗаданийСервер.ОбработатьИзменениеКонтейнеровДля2ФА(Задание, БылиБлокировки);

		ИначеЕсли Тип = ТипыЗаданий.ПродолжитьВыполнениеОбработкиПослеЗавершенияОзнакомленияСОжиданием Тогда
			
			РезультатВыполнения 
			= ОбработкаОчередиЗаданийСервер.ОбработатьПродолжитьВыполнениеОбработкиПослеЗавершенияОзнакомленияСОжиданием(Задание, БылиБлокировки);

		ИначеЕсли Тип = ТипыЗаданий.ОбновитьДействиеОзнакомленияЦеликомЕслиНужно Тогда
			
			РезультатВыполнения 
			= ОбработкаОчередиЗаданийСервер.ОбработатьОбновитьДействиеОзнакомленияЦеликомЕслиНужно(Задание, БылиБлокировки);
			
		ИначеЕсли Тип = ТипыЗаданий.ОбновитьПроцессБезДействия Тогда
			
			РезультатВыполнения = ОбработкаОчередиЗаданийСервер.ОбработатьЗаданиеОбновлениеДанныхПроцесса(Задание, БылиБлокировки);
			
		ИначеЕсли Тип = ТипыЗаданий.ДобавитьУдалитьЗаполняемыйПредмет Тогда
			
			РезультатВыполнения = ОбработкаОчередиЗаданийСервер.ОбработатьЗаданиеУказатьУдалитьЗаполняемыйПредмет(
				Задание, БылиБлокировки);
		ИначеЕсли Тип = ТипыЗаданий.ПрерватьПроцесс Тогда
			
			РезультатВыполнения = ОбработкаОчередиЗаданийСервер.ОбработатьЗаданиеПрерватьПроцесс(Задание, БылиБлокировки);
		
		ИначеЕсли Тип = ТипыЗаданий.ОстановитьПроцесс Тогда
			
			РезультатВыполнения = ОбработкаОчередиЗаданийСервер.ОбработатьЗаданиеОстановитьПроцесс(Задание, БылиБлокировки);
		
		ИначеЕсли Тип = ТипыЗаданий.ПродолжитьПроцесс Тогда
			
			РезультатВыполнения = ОбработкаОчередиЗаданийСервер.ОбработатьЗаданиеПродолжитьПроцесс(Задание, БылиБлокировки);
		
		ИначеЕсли Тип = ТипыЗаданий.ОтменитьВыполнениеЗадачи Тогда
			
			РезультатВыполнения = ОбработкаОчередиЗаданийСервер.ОбработатьЗаданиеОтменитьВыполнениеЗадачи(Задание, БылиБлокировки);
		
		ИначеЕсли Тип = ТипыЗаданий.ОстановитьОбработку Или Тип = ТипыЗаданий.ПродолжитьОбработку Тогда
			
			РезультатВыполнения = ОбработкаОчередиЗаданийСервер.ОбработатьЗаданиеОстановитьПродолжитьОбработкуОбъекта(
				Задание, БылиБлокировки);
		
		ИначеЕсли Тип = ТипыЗаданий.ПерейтиКВыполнениюДействияВнеОчереди Тогда
			
			РезультатВыполнения = ОбработкаОчередиЗаданийСервер.ОбработатьЗаданиеПерейтиКВыполнениюДействияВнеОчереди(
				Задание, БылиБлокировки);
		ИначеЕсли Тип = ТипыЗаданий.ОбновитьДанныеЗадачПоЗамещению Тогда
			
			РезультатВыполнения = ОбработкаОчередиЗаданийСервер.ОбновитьДанныеЗадачПоЗамещению(Задание, БылиБлокировки);
		Иначе
			
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Задание ""%1"" не было обработано!'"), Задание);
		КонецЕсли;
		
		Если РезультатВыполнения.ЗаданиеЗавершено Тогда
			Справочники.ОчередьЗаданийДокументооборота.ВыполнитьЗадание(
				Задание, РезультатВыполнения.ЗаписьЛога);
		Иначе          
			
			// когда ЕстьНевыполненныеЗадания Истина - не пишем в лог и момент времени.
			Если Не ЕстьНевыполненныеЗадания Тогда
				Справочники.ОчередьЗаданийДокументооборота.ОбновитьМоментВремени(Задание);
				
				// пишем в протокол
				РегистрыСведений.ПротоколВыполненияЗаданий.ДобавитьВЛог(
					Задание, 
					Строка(ТекущаяУниверсальнаяДата()) + " (UTC) " + РезультатВыполнения.ЗаписьЛога
					);
			КонецЕсли;	
			
		КонецЕсли;	
		
		ЗафиксироватьТранзакцию();
		РазблокироватьДанныеДляРедактирования(Задание);
		
	Исключение
		
		ОтменитьТранзакцию();
		РазблокироватьДанныеДляРедактирования(Задание);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеЗаданийНаКлиенте

// Вернет массив структур заданий
// 
// Параметры
// РазмерПорцииЗаданийДляВыполненияНаКлиенте - Число
// Ссылка - СправочникСсылка.ОчередьЗаданийДокументооборота
// 
// Возвращаемое значение:
// Массив из Структура ("Тип, Задание, ПредметЗадания")
// 	
Функция ЗаданияДляОбработкиНаКлиенте(РазмерПорцииЗаданийДляВыполненияНаКлиенте,
	Ссылка = Неопределено) Экспорт
	
	МассивВозврата = Новый Массив;
	
	ТипыНаКлиенте = Перечисления.ТипыЗаданий.ТипыОбрабатываемыеНаКлиенте();
	
	КоличествоПопытокОбработки = ДиспетчерОбработкиОчередиЗаданийПолныеПрава.КоличествоПопытокВыполненияЗаданий();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 100
		|	ОчередьЗаданийДокументооборота.Ссылка КАК Задание,
		|	ОчередьЗаданийДокументооборота.МоментВремени КАК МоментВремени,
		|	ОчередьЗаданийДокументооборота.ПредметЗадания,
		|	ОчередьЗаданийДокументооборота.Тип,
		|	ОчередьЗаданийДокументооборота.Родитель
		|ИЗ
		|	Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
		|ГДЕ
		|	ОчередьЗаданийДокументооборота.УзелОбработки = &УзелОбработки
		|	И ОчередьЗаданийДокументооборота.Тип В (&ТипыНаКлиенте)
		|	И ОчередьЗаданийДокументооборота.Ссылка = &Ссылка
		|	И ОчередьЗаданийДокументооборота.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Выполняется)
		|	И ОчередьЗаданийДокументооборота.НеудачныхПопытокВыполнения < &КоличествоПопытокОбработки
		|УПОРЯДОЧИТЬ ПО
		|	ОчередьЗаданийДокументооборота.МоментВремени";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "100", 
		Формат(РазмерПорцииЗаданийДляВыполненияНаКлиенте, "ЧГ=0"));
	Запрос.УстановитьПараметр("КоличествоПопытокОбработки", КоличествоПопытокОбработки);
	Запрос.УстановитьПараметр("ТипыНаКлиенте", ТипыНаКлиенте);
	Запрос.УстановитьПараметр("УзелОбработки", КОДПовтИсп.ИдентификаторТекущегоУзла());
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, 
			"И ОчередьЗаданийДокументооборота.Ссылка = &Ссылка", 
			"");
		
	КонецЕсли;	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОписаниеЗадания = Новый Структура(
			"Тип, Задание, ПредметЗадания, Родитель");
		ЗаполнитьЗначенияСвойств(ОписаниеЗадания, Выборка);
		МассивВозврата.Добавить(ОписаниеЗадания);
	КонецЦикла;
		
	Константы.ПоследняяАктивностьОбработчикаЗаданийНаКлиенте.Установить(ТекущаяУниверсальнаяДата());
		
	Возврат МассивВозврата;
	
КонецФункции	

// Отразит в базе результат выполнения - например пометит задание как выполненное
// 
// Параметры:
// Задание - СправочникСсылка.ОчередьЗаданийДокументооборота
// 	РезультатВыполнения - Структура
//    *ЗаданиеЗавершено - Булево
//    *ЗаписьЛога - Строка
//  УникальныйИдентификатор -УникальныйИдентификатор формы
Процедура ОтработатьРезультатВыполнения(Задание, РезультатВыполнения, 
	УникальныйИдентификатор = Неопределено) Экспорт
	
	Если РезультатВыполнения.ЗаданиеЗавершено Тогда
		Справочники.ОчередьЗаданийДокументооборота.ВыполнитьЗадание(
			Задание, РезультатВыполнения.ЗаписьЛога, УникальныйИдентификатор);
	Иначе
		Справочники.ОчередьЗаданийДокументооборота.ОбновитьМоментВремени(Задание);
		
		// пишем в протокол
		РегистрыСведений.ПротоколВыполненияЗаданий.ДобавитьВЛог(
			Задание, 
			Строка(ТекущаяУниверсальнаяДата()) + " (UTC) " + РезультатВыполнения.ЗаписьЛога
			);
			
		Если ЗначениеЗаполнено(РезультатВыполнения.ЗаписьЛога) Тогда // есть ошибка
		
			Справочники.ОчередьЗаданийДокументооборота.ЗарегистрироватьНеудачнуюПопыткуОбработки(
				Задание, РезультатВыполнения.ЗаписьЛога);
				
			КоличествоПопытокОбработки = КоличествоПопытокВыполненияЗаданий();
			НеудачныхПопытокВыполнения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Задание, "НеудачныхПопытокВыполнения");	
		
			Если НеудачныхПопытокВыполнения >= КоличествоПопытокОбработки Тогда
	
				Справочники.ОчередьЗаданийДокументооборота.УстановитьСтатусЗаданию(
					Задание, Перечисления.СтатусыЗаданий.ОшибкаВыполнения);
					
			КонецЕсли;		
		
		КонецЕсли;	
			
	КонецЕсли;
		
	Константы.ПоследняяАктивностьОбработчикаЗаданийНаКлиенте.Установить(ТекущаяУниверсальнаяДата());
	
КонецПроцедуры

#КонецОбласти

// Возвращает количество попыток маршрутизации записи очереди.
//
// Возвращаемое значение:
//  Число
//
Функция КоличествоПопытокВыполненияЗаданий() Экспорт
	
	Возврат Константы.МаксимальноеЧислоПопытокВыполненияЗаданий.Получить();
	
КонецФункции

// Обработчик рег задания
Процедура ДиспетчерОбработкиОчередиЗаданий() Экспорт
	
	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ДиспетчерОбработкиОчередиЗаданий, Отказ);
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияДиспетчер(),
		УровеньЖурналаРегистрации.Информация,,,
		Нстр("ru = 'Начало'"));
	
	// Запустим фоновое для распределения по потокам.
	КлючФоновогоЗадания = "РаспределениеПоПотокам";
	Если Не ЕстьАктивноеФоновоеЗадание(КлючФоновогоЗадания) Тогда
		ЗапуститьФоновоеЗаданиеОтдельно(КлючФоновогоЗадания, 
			"ДиспетчерОбработкиОчередиЗаданийПолныеПрава.РаспределениеПоПотокам");
	КонецЕсли;
	
	ДиспетчерОбработкиОчередиЗаданийРеализация(Ложь);	
	ДиспетчерОбработкиОчередиЗаданийРеализация(Истина);
	
	// Запустим фоновое по продолжению ожидающих заданий.
	КлючФоновогоЗадания = "ПродолжениеОжидающихЗаданий";
	Если Не ЕстьАктивноеФоновоеЗадание(КлючФоновогоЗадания) Тогда
		ЗапуститьФоновоеЗаданиеОтдельно(КлючФоновогоЗадания, 
			"ДиспетчерОбработкиОчередиЗаданийПолныеПрава.ПродолжениеОжидающихЗаданий");
	КонецЕсли;
	
	// Запустим фоновое по сбросу ошибок неактуальных заданий.
	КлючФоновогоЗадания = "СбросОшибокНеактуальныхЗаданий";
	Если Не ЕстьАктивноеФоновоеЗадание(КлючФоновогоЗадания) Тогда
		ЗапуститьФоновоеЗаданиеОтдельно(КлючФоновогоЗадания, 
			"ДиспетчерОбработкиОчередиЗаданийПолныеПрава.СбросОшибокНеактуальныхЗаданий");
	КонецЕсли;	
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияДиспетчер(),
		УровеньЖурналаРегистрации.Информация,,,
		Нстр("ru = 'после обработки'"));
		
	ПериодКонтроляПроблемВыполненияЗаданий 
		= Константы.ПериодКонтроляПроблемВыполненияЗаданий.Получить();
	ДатаКонтроляПроблемВыполненияЗаданий 
		= Константы.ДатаКонтроляПроблемВыполненияЗаданий.Получить();
	
	// Проверим зависшие фоновые.
	Если ДатаКонтроляПроблемВыполненияЗаданий + ПериодКонтроляПроблемВыполненияЗаданий * 60
		 <= ТекущаяДата() Тогда
		 	
		// Запустим фоновое для контроля.
		КлючФоновогоЗадания = "КонтрольРаботыДиспетчера";
		Если Не ЕстьАктивноеФоновоеЗадание(КлючФоновогоЗадания) Тогда
			ЗапуститьФоновоеЗаданиеОтдельно(КлючФоновогоЗадания, 
				"ДиспетчерОбработкиОчередиЗаданийПолныеПрава.КонтрольРаботыДиспетчера");
		КонецЕсли;
		 	
	КонецЕсли;			
	
	
	ДатаСегодня = НачалоДня(ТекущаяДатаСеанса());
	ДатаСбросаПопыток = Константы.ДатаСбросаПопытокОбработкиОчередиЗаданий.Получить();
	Если ДатаСегодня <> ДатаСбросаПопыток Тогда
		
		Константы.ДатаСбросаПопытокОбработкиОчередиЗаданий.Установить(ДатаСегодня);
		
		// Запустим фоновое по сбросу ошибок неактуальных заданий.
		КлючФоновогоЗадания = "СбросОшибокВсехЗаданий";
		Если Не ЕстьАктивноеФоновоеЗадание(КлючФоновогоЗадания) Тогда
			ЗапуститьФоновоеЗаданиеОтдельно(КлючФоновогоЗадания, 
				"ДиспетчерОбработкиОчередиЗаданийПолныеПрава.СбросОшибокВсехЗаданий");
		КонецЕсли;	
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияДиспетчер(),
		УровеньЖурналаРегистрации.Информация,,,
		Нстр("ru = 'конец'"));
	
КонецПроцедуры

// Выполняет распределение по потокам. И для долгой,  и для быстрой очереди
//
//
Процедура РаспределениеПоПотокам() Экспорт
	
	УстановитьПараметрыСеанса();
	
	ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	ВремяРаботы = 300;
	Если ЭтоФайловаяБаза Тогда
		ВремяРаботы = 3;
	КонецЕсли;	
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияРаспределениеОчередиМаршрутизации(),
		УровеньЖурналаРегистрации.Информация,,,
		Нстр("ru = 'Начало'"));

	ТипыНаСервереДолгие = Перечисления.ТипыЗаданий.ТипыОбрабатываемыеНаСервереДолгие();
	ЧислоПотоковМаршрутизацииДолгие = Константы.ЧислоПотоковВыполненияДолгихЗаданийНаСервере.Получить();
	
	ТипыНаСервереБыстрые = Перечисления.ТипыЗаданий.ТипыОбрабатываемыеНаСервереБыстрые();
	ЧислоПотоковМаршрутизацииБыстрые = Константы.ЧислоПотоковВыполненияЗаданийНаСервере.Получить();
	
	ВремяНачала = ТекущаяДата();
	Пока Истина Цикл

		ТекДата = ТекущаяДата();
		// Работаем 300 сек (или 3 сек), даже если сейчас нечего обрабатывать.
		Если ТекДата > ВремяНачала + ВремяРаботы Тогда 
			Прервать;
		КонецЕсли;	
		
		// Распределим по потокам.
		РаспределитьОчередьМаршрутизацииПоПотокам(ТипыНаСервереБыстрые, ЧислоПотоковМаршрутизацииБыстрые);
		РаспределитьОчередьМаршрутизацииПоПотокам(ТипыНаСервереДолгие, ЧислоПотоковМаршрутизацииДолгие);
		
		ОбщегоНазначенияБТС.Пауза(1);

	КонецЦикла;
		
	ЗаписьЖурналаРегистрации(
		ИмяСобытияРаспределениеОчередиМаршрутизации(),
		УровеньЖурналаРегистрации.Информация,,,
		Нстр("ru = 'Конец'"));

КонецПроцедуры

// Выполняет продолжение заданий, ожидающих выполнения подчиненных.
//
Процедура ПродолжениеОжидающихЗаданий() Экспорт
	
	УстановитьПараметрыСеанса();
	
	ЭтоФайловаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	ВремяРаботы = 300;
	Если ЭтоФайловаяБаза Тогда
		ВремяРаботы = 3;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияПродолжениеОжидающихЗаданий(),
		УровеньЖурналаРегистрации.Информация,,,
		Нстр("ru = 'Начало'"));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 100
		|	ОчередьЗаданийДокументооборота.Ссылка КАК Задание
		|ИЗ
		|	Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОчередьЗаданийДокументооборота КАК ПодчиненныеЗадания
		|		ПО ОчередьЗаданийДокументооборота.Ссылка = ПодчиненныеЗадания.Родитель
		|		И ПодчиненныеЗадания.СтатусЗадания <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Завершено)
		|ГДЕ
		|	ОчередьЗаданийДокументооборота.УзелОбработки = &УзелОбработки
		|	И ОчередьЗаданийДокументооборота.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.ОжидаетЗавершенияПодчиненных)
		|	И ПодчиненныеЗадания.Ссылка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("УзелОбработки", КОДПовтИсп.ИдентификаторТекущегоУзла());
	
	ВремяНачала = ТекущаяДата();
	Пока Истина Цикл

		ТекДата = ТекущаяДата();
		// Работаем 300 сек (или 3 сек), даже если сейчас нечего обрабатывать.
		Если ТекДата > ВремяНачала + ВремяРаботы Тогда 
			Прервать;
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Попытка
				Справочники.ОчередьЗаданийДокументооборота.ВернутьВОчередьГлавноеЗадание(Выборка.Задание);
			Исключение
				РазблокироватьДанныеДляРедактирования(Выборка.Задание);
				
				ЗаписьЖурналаРегистрации(
					ИмяСобытияПродолжениеОжидающихЗаданий(),
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
		КонецЦикла;
		
		ОбщегоНазначенияБТС.Пауза(1);
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияПродолжениеОжидающихЗаданий(),
		УровеньЖурналаРегистрации.Информация,,,
		Нстр("ru = 'Конец'"));
	
КонецПроцедуры

// Сбрасывает ошибки неактуальных заданий очереди, чтобы они завершились при стандартной обработке.
//
Процедура СбросОшибокНеактуальныхЗаданий() Экспорт
	
	УстановитьПараметрыСеанса();
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияСбросОшибокНеактуальныхЗаданий(),
		УровеньЖурналаРегистрации.Информация,,,
		Нстр("ru = 'Начало'"));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 100
		|	ОчередьЗаданийДокументооборота.Ссылка КАК Задание,
		|	ОчередьЗаданийДокументооборота.Тип КАК Тип,
		|	ОчередьЗаданийДокументооборота.Родитель КАК Родитель,
		|	ОчередьЗаданийДокументооборота.ПредметЗадания КАК ПредметЗадания
		|ИЗ
		|	Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
		|ГДЕ
		|	ОчередьЗаданийДокументооборота.УзелОбработки = &УзелОбработки
		|	И ОчередьЗаданийДокументооборота.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.ОшибкаВыполнения)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОчередьЗаданийДокументооборота.МоментВремени";
	
	Запрос.УстановитьПараметр("УзелОбработки", КОДПовтИсп.ИдентификаторТекущегоУзла());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	РеквизитыЗадания = Новый Структура("Ссылка, Тип, Родитель, ПредметЗадания");
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Задание);
		Исключение
			ЗафиксироватьТранзакцию();
			Продолжить;
		КонецПопытки;
		
		Попытка
		
			ЗаполнитьЗначенияСвойств(РеквизитыЗадания, Выборка);
			РеквизитыЗадания.Ссылка = Выборка.Задание;
			
			АктуальностьЗадания = ОбработкаОчередиЗаданийСервер.АктуальностьЗадания(РеквизитыЗадания);
			
			Если Не АктуальностьЗадания.Актуально Тогда
				Справочники.ОчередьЗаданийДокументооборота.СброситьОшибкуЗадания(Выборка.Задание);
			Иначе
				Справочники.ОчередьЗаданийДокументооборота.ОбновитьМоментВремени(Выборка.Задание);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияСбросОшибокНеактуальныхЗаданий(),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияСбросОшибокНеактуальныхЗаданий(),
		УровеньЖурналаРегистрации.Информация,,,
		Нстр("ru = 'Конец'"));
	
КонецПроцедуры

// Сбрасывает ошибки всех заданий очереди, чтобы они завершились при стандартной обработке. (ночью делаем)
//
Процедура СбросОшибокВсехЗаданий() Экспорт
	
	УстановитьПараметрыСеанса();
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияСбросОшибокВсехЗаданий(),
		УровеньЖурналаРегистрации.Информация,,,
		Нстр("ru = 'Начало'"));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 100
		|	ОчередьЗаданийДокументооборота.Ссылка КАК Задание,
		|	ОчередьЗаданийДокументооборота.Тип КАК Тип,
		|	ОчередьЗаданийДокументооборота.Родитель КАК Родитель,
		|	ОчередьЗаданийДокументооборота.ПредметЗадания КАК ПредметЗадания
		|ИЗ
		|	Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
		|ГДЕ
		|	ОчередьЗаданийДокументооборота.УзелОбработки = &УзелОбработки
		|	И ОчередьЗаданийДокументооборота.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.ОшибкаВыполнения)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОчередьЗаданийДокументооборота.МоментВремени";
	
	Запрос.УстановитьПараметр("УзелОбработки", КОДПовтИсп.ИдентификаторТекущегоУзла());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	РеквизитыЗадания = Новый Структура("Ссылка, Тип, Родитель, ПредметЗадания");
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Задание);
		Исключение
			ЗафиксироватьТранзакцию();
			Продолжить;
		КонецПопытки;
		
		Попытка
		
			ЗаполнитьЗначенияСвойств(РеквизитыЗадания, Выборка);
			РеквизитыЗадания.Ссылка = Выборка.Задание;
			
			Справочники.ОчередьЗаданийДокументооборота.СброситьОшибкуЗадания(Выборка.Задание);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияСбросОшибокВсехЗаданий(),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияСбросОшибокВсехЗаданий(),
		УровеньЖурналаРегистрации.Информация,,,
		Нстр("ru = 'Конец'"));
	
КонецПроцедуры

// Выполняет контроль
//
//
Процедура КонтрольРаботыДиспетчера() Экспорт
	
	УстановитьПараметрыСеанса();
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияКонтроль(),
		УровеньЖурналаРегистрации.Информация,,,
		Нстр("ru = 'Начало'"));

	Константы.ДатаКонтроляПроблемВыполненияЗаданий.Установить(ТекущаяДата());
	
	// Делаем проверку.
	ПредельноеОжиданиеВыполненияЗадания = Константы.ПредельноеОжиданиеВыполненияЗадания.Получить();
	ПредельноеОжиданиеВыполненияДолгогоЗадания = Константы.ПредельноеОжиданиеВыполненияДолгогоЗадания.Получить();
	
	ТипыНаСервереДолгие = Перечисления.ТипыЗаданий.ТипыОбрабатываемыеНаСервереДолгие();
	ТипыНаСервереБыстрые = Перечисления.ТипыЗаданий.ТипыОбрабатываемыеНаСервереБыстрые();
	ТипыНаКлиенте = Перечисления.ТипыЗаданий.ТипыОбрабатываемыеНаКлиенте();
	
	ПроверитьЗависшиеЗадания(ПредельноеОжиданиеВыполненияЗадания, ТипыНаСервереБыстрые);
	ПроверитьЗависшиеЗадания(ПредельноеОжиданиеВыполненияДолгогоЗадания, ТипыНаСервереДолгие);
	
	// Для клиента используем ту же настройку - ПредельноеОжиданиеВыполненияДолгогоЗадания.
	ПроверитьЗависшиеЗадания(ПредельноеОжиданиеВыполненияДолгогоЗадания, ТипыНаКлиенте);
	
	ПроверитьЗаданияСОшибками();
	
	
	ПоследняяАктивностьОбработчикаЗаданийНаКлиенте = Константы.ПоследняяАктивностьОбработчикаЗаданийНаКлиенте.Получить();
	ВыполнятьЗаданияНаКлиенте = Константы.ВыполнятьЗаданияНаКлиенте.Получить();

	Если ЗначениеЗаполнено(ПоследняяАктивностьОбработчикаЗаданийНаКлиенте) Тогда
		ПоследняяАктивностьОбработчикаЗаданийНаКлиентеМестноеВремя = МестноеВремя(ПоследняяАктивностьОбработчикаЗаданийНаКлиенте);
	Иначе	
		ПоследняяАктивностьОбработчикаЗаданийНаКлиентеМестноеВремя = ПоследняяАктивностьОбработчикаЗаданийНаКлиенте;
	КонецЕсли;	
	
	Если ВыполнятьЗаданияНаКлиенте И 
		(ПоследняяАктивностьОбработчикаЗаданийНаКлиентеМестноеВремя <
		ТекущаяУниверсальнаяДата() - ПредельноеОжиданиеВыполненияДолгогоЗадания) Тогда
			
		ТекстОшибки = СтрШаблон(НСТр("ru = 'Выполнение заданий (клиент) последняя дата активности: %1'"), 
			ПоследняяАктивностьОбработчикаЗаданийНаКлиентеМестноеВремя);
			
		ОбщегоНазначенияДокументооборот.ЗафиксироватьПроблему(
			НСтр("ru = 'Выполнение заданий (клиент) не работает'"),
			ТекстОшибки,
			НСтр("ru = 'Обработка заданий'"));
			
	КонецЕсли;		
		
	ЗаписьЖурналаРегистрации(
		ИмяСобытияКонтроль(),
		УровеньЖурналаРегистрации.Информация,,,
		Нстр("ru = 'Конец'"));

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет установку версии расширений
//
//
Процедура УстановитьПараметрыСеанса()
	
	УстановитьПривилегированныйРежим(Истина);
	Справочники.ВерсииРасширений.ЗарегистрироватьИспользованиеВерсииРасширений();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПроверитьЗаданияСОшибками()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 100
		|	ОчередьЗаданийДокументооборота.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
		|ГДЕ
		|	ОчередьЗаданийДокументооборота.УзелОбработки = &УзелОбработки
		|	И ОчередьЗаданийДокументооборота.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.ОшибкаВыполнения)
		|УПОРЯДОЧИТЬ ПО
		|	ОчередьЗаданийДокументооборота.МоментВремени";
	
	Запрос.УстановитьПараметр("УзелОбработки", КОДПовтИсп.ИдентификаторТекущегоУзла());
	
	РезЗапроса = Запрос.Выполнить();
	Если Не РезЗапроса.Пустой() Тогда
		
		ТекстОшибки = НСтр("ru = 'Есть задания с ошибками в очереди заданий'") + Символы.ВК;
		Выборка = РезЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстОшибки = ТекстОшибки + Строка(Выборка.Ссылка) + Символы.ВК;
		КонецЦикла;	
		
		ОбщегоНазначенияДокументооборот.ЗафиксироватьПроблему(
			НСтр("ru = 'Есть задания с ошибками в очереди заданий'"),
			ТекстОшибки,
			НСтр("ru = 'Обработка заданий'"));
		
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ПроверитьЗависшиеЗадания(ПредельноеОжиданиеВыполненияЗадания, ТипыНаСервере)
	
	Порог = ТекущаяУниверсальнаяДатаВМиллисекундах() 
		- ПредельноеОжиданиеВыполненияЗадания * 1000; // перевели сек в милилисек

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 100
		|	ОчередьЗаданийДокументооборота.Ссылка КАК Ссылка,
		|	ОчередьЗаданийДокументооборота.ДатаСоздания КАК ДатаСоздания,
		|	ОчередьЗаданийДокументооборота.МоментВремени КАК МоментВремени
		|ИЗ
		|	Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
		|ГДЕ
		|	ОчередьЗаданийДокументооборота.УзелОбработки = &УзелОбработки
		|	И ОчередьЗаданийДокументооборота.Тип В (&ТипыНаСервере)
		|	И ОчередьЗаданийДокументооборота.МоментВремени < &Порог
		|	И ОчередьЗаданийДокументооборота.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Выполняется)
		|УПОРЯДОЧИТЬ ПО
		|	ОчередьЗаданийДокументооборота.МоментВремени";
	
	Запрос.УстановитьПараметр("УзелОбработки", КОДПовтИсп.ИдентификаторТекущегоУзла());
	Запрос.УстановитьПараметр("ТипыНаСервере", ТипыНаСервере);
	Запрос.УстановитьПараметр("Порог", Порог);
	
	РезЗапроса = Запрос.Выполнить();
	Если Не РезЗапроса.Пустой() Тогда
		
		ТекстОшибки = НСтр("ru = 'Есть зависшие записи в очереди обработки'") + Символы.ВК;
		Выборка = РезЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстОшибки = ТекстОшибки 
				+ СтрШаблон( НСтр("ru = 'Задание %1, ДатаСоздания %2, МоментВремени %3'"), 
					Выборка.Ссылка, Выборка.ДатаСоздания, Выборка.МоментВремени) 
				+ Символы.ВК;
		КонецЦикла;	
		
		ОбщегоНазначенияДокументооборот.ЗафиксироватьПроблему(
			НСтр("ru = 'Есть зависшие записи в очереди обработки'"),
			ТекстОшибки,
			НСтр("ru = 'Обработка заданий'"));
		
	КонецЕсли;	
	
КонецПроцедуры	

// Проверяет наличие активного фонового задания по его ключу.
//
// Параметры:
//  КлючЗадания - Строка - ключ задания.
//
// Возвращаемое значение:
//  Булево - Истина, если есть активное фоновое задание.
//
Функция ЕстьАктивноеФоновоеЗадание(КлючЗадания)
	
	Результат = Ложь;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ", КлючЗадания);
	НайденныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Для Каждого ФоновоеЗадание Из НайденныеФоновыеЗадания Цикл
		
		Если ФоновоеЗадание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
			
			Если ФоновоеЗадание.Состояние <> СостояниеФоновогоЗадания.Завершено Тогда
				//пишем в ЖР
				
				Описание = НСтр("ru = 'Состояние = '") + Строка(ФоновоеЗадание.Состояние);
				
				Описание = Описание + НСтр("ru = ' Начало = '") + Строка(ФоновоеЗадание.Начало);
				Описание = Описание + НСтр("ru = ' Конец = '") + Строка(ФоновоеЗадание.Конец);
				Описание = Описание + НСтр("ru = ' УникальныйИдентификатор = '") + Строка(ФоновоеЗадание.УникальныйИдентификатор);
				
				Если ФоновоеЗадание.ИнформацияОбОшибке <> Неопределено Тогда
					Описание = Описание + "   " + ПодробноеПредставлениеОшибки(ФоновоеЗадание.ИнформацияОбОшибке);
				КонецЕсли;
				
				ЗаписьЖурналаРегистрации(
					"ЕстьАктивноеФоновоеЗадание",
					УровеньЖурналаРегистрации.Информация,,,
					Описание);
				
			КонецЕсли;	
			
			Продолжить;
		КонецЕсли;
		
		Результат = Истина;
		Прервать;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Распределяет задания на маршрутизацию по потокам.
//
// Параметры:
// ТипыНаСервере - Массив из ПеречислениеСсылка.ТипыЗаданий
// ЧислоПотоков - Число - количество потоков, между которыми нужно распределить очередь.
//
Процедура РаспределитьОчередьМаршрутизацииПоПотокам(Знач ТипыНаСервере, ЧислоПотоков)
	
	Если ЧислоПотоков < 1 Тогда
		Возврат;
	КонецЕсли;  
	
	ТипПункты = Перечисления.ТипыЗаданий.СформироватьПроцессДляПунктаДействияИсполнения;
	ТипыПункты = Новый Массив;
	ТипыПункты.Добавить(ТипПункты);
	РаспределитьОчередьМаршрутизацииПоПотокам_ПоПунктам(ТипыПункты, ЧислоПотоков);// только "по пунктам"     
	
	СтрИндекс = ТипыНаСервере.Найти(ТипПункты);
	Если СтрИндекс <> Неопределено Тогда
		ТипыНаСервере.Удалить(СтрИндекс);
	КонецЕсли;	
	РаспределитьОчередьМаршрутизацииПоПотокам_ПрочиеТипы(ТипыНаСервере, ЧислоПотоков); // кроме "по пунктам"
	
КонецПроцедуры

// Распределяет задания на маршрутизацию по потокам. только СформироватьПроцессДляПунктаДействияИсполнения
//
// Параметры:
// ТипыНаСервере - Массив из ПеречислениеСсылка.ТипыЗаданий
// ЧислоПотоков - Число - количество потоков, между которыми нужно распределить очередь.
//
Процедура РаспределитьОчередьМаршрутизацииПоПотокам_ПоПунктам(ТипыНаСервере, ЧислоПотоков)
	
	Если ЧислоПотоков < 1 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 100
		|	ОчередьЗаданийДокументооборота.Ссылка КАК Ссылка,
		|	ОчередьЗаданийДокументооборота.Родитель.ПредметЗадания КАК Действие
		|ИЗ
		|	Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
		|ГДЕ
		|	ОчередьЗаданийДокументооборота.УзелОбработки = &УзелОбработки
		|	И ОчередьЗаданийДокументооборота.НомерПотока = 0
		|	И ОчередьЗаданийДокументооборота.Тип В(&ТипыНаСервере)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОчередьЗаданийДокументооборота.МоментВремени";
	
	Запрос.УстановитьПараметр("ТипыНаСервере", ТипыНаСервере);
	Запрос.УстановитьПараметр("УзелОбработки", КОДПовтИсп.ИдентификаторТекущегоУзла());
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Таблица.Сортировать("Действие");
	
	ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	ТекНомер = ГСЧ.СлучайноеЧисло(1, ЧислоПотоков);
	ТекНомер = ТекНомер % ЧислоПотоков;
	Если ТекНомер = 0 Тогда
		ТекНомер = 1;
	КонецЕсли;	 
	
	ТекущееДействие = Таблица[0].Действие;
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл

		Попытка
			ЗаблокироватьДанныеДляРедактирования(СтрокаТаблицы.Ссылка);
		Исключение
			// Если не удается заблокировать задание, то пропускаем его.
			// Оно обрабатывается другим сеансом.
			Продолжить;
		КонецПопытки;
		
		НачатьТранзакцию();
		Попытка
			
			Если Не ОбщегоНазначения.СсылкаСуществует(СтрокаТаблицы.Ссылка) Тогда
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;      
			
			// все, что с одинаковым Действие - ставим тот же номер потока
			Если СтрокаТаблицы.Действие <> ТекущееДействие Тогда
				ТекущееДействие = СтрокаТаблицы.Действие;
				ТекНомер = ТекНомер % ЧислоПотоков + 1;  // увеличим на 1
			КонецЕсли;	
			
			Справочники.ОчередьЗаданийДокументооборота.УстановитьПотокЗаданию(
				СтрокаТаблицы.Ссылка, ТекНомер);
			
			ЗафиксироватьТранзакцию();
			РазблокироватьДанныеДляРедактирования(СтрокаТаблицы.Ссылка);
			
		Исключение
			
			ОтменитьТранзакцию();
			РазблокироватьДанныеДляРедактирования(СтрокаТаблицы.Ссылка);
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияРаспределениеОчередиМаршрутизации(),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Распределяет задания на маршрутизацию по потокам. кроме СформироватьПроцессДляПунктаДействияИсполнения 
//
// Параметры:
// ТипыНаСервере - Массив из ПеречислениеСсылка.ТипыЗаданий
// ЧислоПотоков - Число - количество потоков, между которыми нужно распределить очередь.
//
Процедура РаспределитьОчередьМаршрутизацииПоПотокам_ПрочиеТипы(ТипыНаСервере, ЧислоПотоков)
	
	Если ЧислоПотоков < 1 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 100
		|	ОчередьЗаданийДокументооборота.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
		|ГДЕ
		|	ОчередьЗаданийДокументооборота.УзелОбработки = &УзелОбработки
		|	И ОчередьЗаданийДокументооборота.НомерПотока = 0
		|	И ОчередьЗаданийДокументооборота.Тип В (&ТипыНаСервере)
		|УПОРЯДОЧИТЬ ПО
		|	ОчередьЗаданийДокументооборота.МоментВремени";
	
	Запрос.УстановитьПараметр("ТипыНаСервере", ТипыНаСервере);
	Запрос.УстановитьПараметр("УзелОбработки", КОДПовтИсп.ИдентификаторТекущегоУзла());
	Выборка = Запрос.Выполнить().Выбрать();
	
	ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	ТекНомер = ГСЧ.СлучайноеЧисло(1, ЧислоПотоков);
	ТекНомер = ТекНомер % ЧислоПотоков;
	Если ТекНомер = 0 Тогда
		ТекНомер = 1;
	КонецЕсли;	
	
	Пока Выборка.Следующий() Цикл

		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			// Если не удается заблокировать задание, то пропускаем его.
			// Оно обрабатывается другим сеансом.
			Продолжить;
		КонецПопытки;
		
		НачатьТранзакцию();
		Попытка
			
			Если Не ОбщегоНазначения.СсылкаСуществует(Выборка.Ссылка) Тогда
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Справочники.ОчередьЗаданийДокументооборота.УстановитьПотокЗаданию(
				Выборка.Ссылка, ТекНомер);
			ТекНомер = ТекНомер % ЧислоПотоков + 1;  // увеличим на 1
			
			ЗафиксироватьТранзакцию();
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			
		Исключение
			
			ОтменитьТранзакцию();
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытияРаспределениеОчередиМаршрутизации(),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает имя события для жарнала регистрации.
//
// Возвращаемое значение:
//  Строка
//
Функция ИмяСобытияРаспределениеОчередиМаршрутизации()
	
	Возврат НСтр("ru = 'Диспетчер обработки очереди.Распределение очереди маршрутизации'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

// Возвращает имя события для жарнала регистрации.
//
// Возвращаемое значение:
//  Строка
//
Функция ИмяСобытияПродолжениеОжидающихЗаданий()
	
	Возврат НСтр("ru = 'Диспетчер обработки очереди.Продолжение ожидающих заданий'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Возвращает имя события для жарнала регистрации.
//
// Возвращаемое значение:
//  Строка
//
Функция ИмяСобытияСбросОшибокНеактуальныхЗаданий()
	
	Возврат НСтр("ru = 'Диспетчер обработки очереди.Сброс ошибок неактуальных заданий'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Возвращает имя события для жарнала регистрации.
//
// Возвращаемое значение:
//  Строка
//
Функция ИмяСобытияСбросОшибокВсехЗаданий()
	
	Возврат НСтр("ru = 'Диспетчер обработки очереди.Сброс ошибок всех заданий'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Возвращает для ЖР имя события Запуск фонового.
//
Функция ИмяСобытияЗапускПотока()
	
	Возврат НСтр("ru = 'Диспетчер обработки очереди.Запуск фонового'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

// Возвращает для ЖР имя события работа диспетчера
//
Функция ИмяСобытияДиспетчер()
	
	Возврат НСтр("ru = 'Диспетчер обработки очереди.Работа диспетчера'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

// Возвращает для ЖР имя события обработки
//
Функция ИмяСобытияОбработка()
	
	Возврат НСтр("ru = 'Диспетчер обработки очереди.Обработка в фоновом'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

// Возвращает для ЖР имя события обработки
//
Функция ИмяСобытияКонтроль()
	
	Возврат НСтр("ru = 'Диспетчер обработки очереди.Контроль в фоновом'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

// Запускает процедуру в фоновом задании по указанному ключу и потоку.
//
// Параметры:
//  КлючФоновогоЗадания - Строка - ключ задания.
//  ИмяПроцедуры - Строка - имя процедуры.
//  Поток - Число - номер потока для процедуры.
//  ДолгоеЗадание - Булево
//
Процедура ЗапуститьФоновоеЗаданиеВПотоке(КлючФоновогоЗадания, ИмяПроцедуры, Поток, 
	ДолгоеЗадание)
	
	Параметры = Новый Массив;
	Параметры.Добавить(Поток);
	Параметры.Добавить(ДолгоеЗадание);
	ЗапуститьФоновоеЗадание(КлючФоновогоЗадания, ИмяПроцедуры, Параметры);
	
КонецПроцедуры	

// Запускает процедуру в фоновом задании по указанному ключу и потоку.
//
// Параметры:
//  КлючФоновогоЗадания - Строка - ключ задания.
//  ИмяПроцедуры - Строка - имя процедуры.
//
Процедура ЗапуститьФоновоеЗаданиеОтдельно(КлючФоновогоЗадания, ИмяПроцедуры)
	
	Параметры = Новый Массив;
	ЗапуститьФоновоеЗадание(КлючФоновогоЗадания, ИмяПроцедуры, Параметры);
	
КонецПроцедуры	

// Запускает процедуру в фоновом задании по указанному ключу и параметрам.
//
// Параметры:
//  КлючФоновогоЗадания - Строка - ключ задания.
//  ИмяПроцедуры - Строка - имя процедуры.
//  Параметры - Массив - параметры в процедуры.
//
Процедура ЗапуститьФоновоеЗадание(КлючФоновогоЗадания, ИмяПроцедуры, Параметры = Неопределено)
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Массив;
	КонецЕсли;
	
	Попытка
	
		Описание = НСтр("ru = 'Запуск фонового: '") + КлючФоновогоЗадания;
			
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЗапускПотока(),
			УровеньЖурналаРегистрации.Информация,,,
			Описание);

		ФоновыеЗадания.Выполнить(ИмяПроцедуры, Параметры, КлючФоновогоЗадания, КлючФоновогоЗадания);
		
	Исключение
		
		Описание = СтрШаблон(НСтр("ru = 'Запуск фонового: %1. %2.
			|Для решения проблемы в консоли администратора (Сеансы) надо снять все сеансы фоновых заданий.
			|Если не поможет, надо остановить сервер 1С Предприятия, удалить на сервере все файлы сеансовых данных(каталог snccntx), снова запустить сервер 1С Предприятия.'"),
			КлючФоновогоЗадания,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЗапускПотока(),
			УровеньЖурналаРегистрации.Ошибка,,,
			Описание);
			
		ЛоггироватьФоновыеЗадания(КлючФоновогоЗадания);	
		
		ОбщегоНазначенияДокументооборот.ЗафиксироватьПроблему(
			НСтр("ru = 'ЗапуститьФоновоеЗадание не сработал'"),
			Описание,
			ИмяСобытияЗапускПотока());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЛоггироватьФоновыеЗадания(КлючФоновогоЗадания)
	
	ЗаписьЖурналаРегистрации(
		"ЛоггироватьФоновыеЗадания.Ключ",
		УровеньЖурналаРегистрации.Информация,,,
		КлючФоновогоЗадания);

	ВсеСеансы = ПолучитьСеансыИнформационнойБазы();
	Для Каждого СеансБазы Из ВсеСеансы Цикл
		
		Описание = "СеансБазы";
			
		Описание = Описание + НСтр("ru = ' IPАдресКлиента = '") + СеансБазы.IPАдресКлиента;
		Описание = Описание + НСтр("ru = ' ИмяКомпьютера = '") + СеансБазы.ИмяКомпьютера;
		Описание = Описание + НСтр("ru = ' ИмяПриложения = '") + СеансБазы.ИмяПриложения;
		Описание = Описание + НСтр("ru = ' НачалоСеанса = '") + СеансБазы.НачалоСеанса;
		Описание = Описание + НСтр("ru = ' НомерСеанса = '") + СеансБазы.НомерСеанса;
		Описание = Описание + НСтр("ru = ' НомерСоединения = '") + СеансБазы.НомерСоединения;
		Описание = Описание + НСтр("ru = ' Пользователь = '") + СеансБазы.Пользователь;
		
		ФоновоеЗадание = СеансБазы.ПолучитьФоновоеЗадание();
		Если ФоновоеЗадание <> Неопределено Тогда
			
			Описание = Описание + Символы.ПС + Символы.ПС;
			Описание = Описание + НСтр("ru = ' ФоновоеЗадание. Состояние = '") + Строка(ФоновоеЗадание.Состояние);
			
			Описание = Описание + НСтр("ru = ' Ключ = '") + Строка(ФоновоеЗадание.Ключ);
			
			Описание = Описание + НСтр("ru = ' Начало = '") + Строка(ФоновоеЗадание.Начало);
			Описание = Описание + НСтр("ru = ' Конец = '") + Строка(ФоновоеЗадание.Конец);
			Описание = Описание + НСтр("ru = ' УникальныйИдентификатор = '") + Строка(ФоновоеЗадание.УникальныйИдентификатор);
			
			Если ФоновоеЗадание.ИнформацияОбОшибке <> Неопределено Тогда
				Описание = Описание + "   " + ПодробноеПредставлениеОшибки(ФоновоеЗадание.ИнформацияОбОшибке);
			КонецЕсли;
			
		КонецЕсли;			
		
		ЗаписьЖурналаРегистрации(
			"ЛоггироватьФоновыеЗадания.СеансыИнформационнойБазы",
			УровеньЖурналаРегистрации.Информация,,,
			Описание);
		
	КонецЦикла;	 	
	
	НайденныеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания();
	
	Для Каждого ФоновоеЗадание Из НайденныеФоновыеЗадания Цикл
		
		Если ФоновоеЗадание.Состояние <> СостояниеФоновогоЗадания.Завершено Тогда
			//пишем в ЖР
			
			Описание = НСтр("ru = 'Состояние = '") + Строка(ФоновоеЗадание.Состояние);
			
			Описание = Описание + НСтр("ru = ' Ключ = '") + Строка(ФоновоеЗадание.Ключ);
			
			Описание = Описание + НСтр("ru = ' Начало = '") + Строка(ФоновоеЗадание.Начало);
			Описание = Описание + НСтр("ru = ' Конец = '") + Строка(ФоновоеЗадание.Конец);
			Описание = Описание + НСтр("ru = ' УникальныйИдентификатор = '") + Строка(ФоновоеЗадание.УникальныйИдентификатор);
			
			Если ФоновоеЗадание.ИнформацияОбОшибке <> Неопределено Тогда
				Описание = Описание + "   " + ПодробноеПредставлениеОшибки(ФоновоеЗадание.ИнформацияОбОшибке);
			КонецЕсли;
			
			ЗаписьЖурналаРегистрации(
				"ЛоггироватьФоновыеЗадания.Фоновые",
				УровеньЖурналаРегистрации.Информация,,,
				Описание);
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры	

#КонецОбласти