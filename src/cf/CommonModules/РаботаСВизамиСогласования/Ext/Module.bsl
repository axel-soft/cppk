#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////////////////////////
// Получение виз

// Возвращает структуру реквизитов визы, которые будут подписаны
//
Функция ПолучитьСтруктуруВизДляПодписания() Экспорт
	
	Возврат Новый Структура("Документ,
		|ДатаИсполнения,
		|РезультатСогласования,
		|Исполнитель");
	
КонецФункции

// Возвращает активную визу документа для переданного исполнителя
// СтруктураИсполнитель содержит Исполнитель, РольИсполнителя
Функция ПолучитьАктивнуюВизуПоИсполнителю(Документ, СтруктураИсполнитель) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВизыСогласования.Ссылка,
	|	ВизыСогласования.ПометкаУдаления,
	|	ВизыСогласования.Документ,
	|	ВизыСогласования.Исполнитель,
	|	ВизыСогласования.РольИсполнителя,
	|	ВизыСогласования.ПомещенаВИсторию,
	|	ВизыСогласования.ДатаПомещенияВИсторию,
	|	ВизыСогласования.Удалена,
	|	ВизыСогласования.РезультатСогласования,
	|	ВизыСогласования.Комментарий,
	|	ВизыСогласования.ДатаИсполнения,
	|	ВизыСогласования.Автор,
	|	ВизыСогласования.ПоместилВИсторию,
	|	ВизыСогласования.УстановилРезультат,
	|	ВизыСогласования.Источник
	|ИЗ
	|	Справочник.ВизыСогласования КАК ВизыСогласования
	|ГДЕ
	|	ВизыСогласования.Документ = &Документ
	|	И ВизыСогласования.Исполнитель = &Исполнитель
	|	И ВизыСогласования.РольИсполнителя = &РольИсполнителя
	|	И ВизыСогласования.ДатаПомещенияВИсторию = ДАТАВРЕМЯ(1, 1, 1)
	|	И НЕ ВизыСогласования.ПомещенаВИсторию
	|	И НЕ ВизыСогласования.Удалена
	|	И НЕ ВизыСогласования.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Исполнитель", СтруктураИсполнитель.Исполнитель);
	Запрос.УстановитьПараметр("РольИсполнителя", СтруктураИсполнитель.РольИсполнителя);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() ИЛИ Выборка.Ссылка.Пустая() Тогда 
		Возврат Неопределено;
	КонецЕсли;	
	
	Возврат Выборка.Ссылка;
	
КонецФункции	 

// Возвращает визы по источнику (бизнес-процессу, задаче)
Функция ПолучитьВизыПоИсточнику(Документ, Источник, ТолькоАктивные = Ложь, ИДУчастника = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВизыСогласования.Ссылка КАК Ссылка,
	|	ВизыСогласования.ПометкаУдаления КАК ПометкаУдаления,
	|	ВизыСогласования.Документ КАК Документ,
	|	ВизыСогласования.Исполнитель КАК Исполнитель,
	|	ВизыСогласования.РольИсполнителя КАК РольИсполнителя,
	|	ВизыСогласования.ПомещенаВИсторию КАК ПомещенаВИсторию,
	|	ВизыСогласования.ДатаПомещенияВИсторию КАК ДатаПомещенияВИсторию,
	|	ВизыСогласования.Удалена КАК Удалена,
	|	ВизыСогласования.РезультатСогласования КАК РезультатСогласования,
	|	ВизыСогласования.Комментарий КАК Комментарий,
	|	ВизыСогласования.ДатаИсполнения КАК ДатаИсполнения,
	|	ВизыСогласования.Автор КАК Автор,
	|	ВизыСогласования.ПоместилВИсторию КАК ПоместилВИсторию,
	|	ВизыСогласования.УстановилРезультат КАК УстановилРезультат,
	|	ВизыСогласования.Источник КАК Источник,
	|	ВизыСогласования.ИдентификаторУчастника КАК ИдентификаторУчастника
	|ИЗ
	|	Справочник.ВизыСогласования КАК ВизыСогласования
	|ГДЕ
	|	ВизыСогласования.Документ = &Документ
	|	И ВизыСогласования.Источник = &Источник";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Источник", Источник);
	
	Если ТолькоАктивные Тогда 
		Запрос.Текст = Запрос.Текст + 
		" И (НЕ ВизыСогласования.ПомещенаВИсторию)
		| И (НЕ ВизыСогласования.Удалена)
		| И (НЕ ВизыСогласования.ПометкаУдаления) ";
	КонецЕсли;
	
	Если ИДУчастника <> Неопределено Тогда 
		Запрос.Текст = Запрос.Текст + 
		" И ВизыСогласования.ИдентификаторУчастника = &ИДУчастника";
		Запрос.Параметры.Вставить("ИДУчастника", ИДУчастника);
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции	

// Возвращает визы документа
Функция ПолучитьВизыДокумента(Документ, ТолькоАктивные = Истина, ПоказыватьУдаленные = Ложь, ПолучитьДанныеЭП = Ложь) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВизыСогласования.Ссылка,
		|	ВизыСогласования.ПометкаУдаления,
		|	ВизыСогласования.Документ,
		|	ВизыСогласования.Исполнитель,
		|	ВизыСогласования.РольИсполнителя,
		|	ВизыСогласования.РезультатСогласования,
		|	ВизыСогласования.УстановилРезультат,
		|	ВизыСогласования.ДатаИсполнения,
		|	ВизыСогласования.Комментарий,
		|	ВизыСогласования.Источник,
		|	ВизыСогласования.ДатаПомещенияВИсторию,
		|	ВизыСогласования.ПомещенаВИсторию,
		|	ВизыСогласования.ПоместилВИсторию,
		|	ВизыСогласования.Автор,
		|	ВизыСогласования.Порядок,
		|	ВизыСогласования.Подписана,
		|	ВизыСогласования.Удалена,
		|	ВизыСогласования.ИдентификаторУчастника КАК ИдентификаторУчастника,
		|	ПРЕДСТАВЛЕНИЕ(ВЫРАЗИТЬ(ВизыСогласования.Исполнитель КАК Справочник.Сотрудники).Должность) КАК Должность";
	
	Если ПолучитьДанныеЭП Тогда
		Запрос.Текст = Запрос.Текст + ",
			|	ЭП.ДатаПодписи КАК ДатаПодписи,
			|	ЭП.УстановившийПодпись КАК УстановившийПодпись,
			|	ЭП.ДатаПроверкиПодписи КАК ДатаПроверкиПодписи,
			|	ЭП.ПодписьВерна КАК ПодписьВерна,
			|	ЭП.ТекстОшибкиПроверкиПодписи КАК ТекстОшибкиПроверкиПодписи,
			|	ЭП.ТекстОшибкиПроверкиСертификата КАК ТекстОшибкиПроверкиСертификата";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	Справочник.ВизыСогласования КАК ВизыСогласования
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК СправочникСотрудники
		|		ПО ВизыСогласования.Исполнитель = СправочникСотрудники.Ссылка";
	
	Если ПолучитьДанныеЭП Тогда
		Запрос.Текст = Запрос.Текст + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭП
			|		ПО ЭП.ПодписанныйОбъект = ВизыСогласования.Ссылка";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	ВизыСогласования.Документ = &Документ";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Если ТолькоАктивные Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ВизыСогласования.ПомещенаВИсторию = ЛОЖЬ
		|	И ВизыСогласования.Удалена = ЛОЖЬ";
	КонецЕсли;
	
	Если Не ПоказыватьУдаленные Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ВизыСогласования.ПометкаУдаления = ЛОЖЬ";
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

// Возвращает активные визы документа
Функция ПолучитьАктивныеВизыДокумента(Документ) Экспорт 
	
	Возврат ПолучитьВизыДокумента(Документ, Истина);
	
КонецФункции	

// Возвращает количество активных виз документа
Функция ПолучитьКоличествоАктивныхВизДокумента(Документ) Экспорт 
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат 0;
	КонецЕсли;	
	
	АктивныеВизы = ПолучитьАктивныеВизыДокумента(Документ);
	Возврат АктивныеВизы.Количество();
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////////////////////////
// Создание \ изменение виз	

Функция МаксимальныйПорядокВизы(Документ) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ВизыСогласования.Порядок), 0) КАК Порядок
	|ИЗ
	|	Справочник.ВизыСогласования КАК ВизыСогласования
	|ГДЕ
	|	ВизыСогласования.Документ = &Документ
	|	И ВизыСогласования.ПомещенаВИсторию = ЛОЖЬ
	|	И ВизыСогласования.ПометкаУдаления = ЛОЖЬ
	|	И ВизыСогласования.Удалена = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат 0;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Порядок;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////// 
// История виз

// Помещает визы в историю
Процедура ПоместитьВизыВИсторию(Визы, ПоместилВИсторию = Неопределено) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПоместилВИсторию = Неопределено Тогда 
		ПоместилВИсторию = Сотрудники.ОсновнойСотрудник();
	КонецЕсли;	
	
	ТекущаяДата = ТекущаяДата();
	
	Для Каждого Виза Из Визы Цикл
		
		ОбъектВизы = Виза.Ссылка.ПолучитьОбъект();
		ОбъектВизы.ПоместилВИсторию = ПоместилВИсторию;
		ОбъектВизы.ПомещенаВИсторию = Истина;
		ОбъектВизы.ДатаПомещенияВИсторию = ТекущаяДата;
		ОбъектВизы.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Помещает визы по выполненным задачам в историю
Процедура ПоместитьЗакрытиеВизыДокументаВИсторию(Документ) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	АктивныеВизы = ПолучитьАктивныеВизыДокумента(Документ);
	
	Визы = Новый Массив;
	Для Каждого АктивнаяВиза Из АктивныеВизы Цикл
		Если ЗначениеЗаполнено(АктивнаяВиза.РезультатСогласования)
		 Или (ТипЗнч(АктивнаяВиза.Источник) = Тип("БизнесПроцессСсылка.Согласование") 
		 И АктивнаяВиза.Источник.Завершен)
		Тогда 
			Визы.Добавить(АктивнаяВиза);
		КонецЕсли;
	КонецЦикла;	
	
	ПоместитьВизыВИсторию(Визы);
	
КонецПроцедуры	

// Выполняет печать протокола разногласий из документа.
//
// Параметры:
//   МассивОбъектов - Массив из СправочникСсылка.ДействияСогласования
//                  - Массив из СправочникСсылка.ДокументыПредприятия
//   ОбъектыПечати - Массив - коллекция объектов, по которым сформированы печатные формы.
//   История - Булево - нужно ли выводить историю.
//   БесшовнаяИнтеграция - Булево - печатная форма будет отправлена через бесшовную интеграцию на сторону ИС.
//
// Возвращаемое значение:
//   ТабличныйДокумент - табличный документ
//
Функция ПечатьПротоколРазногласийИзДокумента(МассивОбъектов, ОбъектыПечати, История = Ложь,
		БесшовнаяИнтеграция = Ложь) Экспорт
	
	Если МассивОбъектов.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Неверный параметр МассивОбъектов'");
	КонецЕсли;
	
	// Создаем табличный документ и устанавливаем имя параметров печати.
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_ПротоколРазногласий";
	
	ПервыйДокумент = Истина;
	Для Каждого Предмет Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Документ = Предмет;
		ДействиеСогласованияВРежимеЗамечаний = Неопределено;
		
		Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ДействияСогласования") Тогда
			ДействиеСогласованияВРежимеЗамечаний = Предмет;
			Документ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеСогласованияВРежимеЗамечаний, "Предмет");
		ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
			Обработка = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(Предмет);
			Если ЗначениеЗаполнено(Обработка) Тогда
				Действия = ДействияСервер.ДеревоОбработки(Предмет, "",, Обработка);
				Для Каждого Строка Из Действия.Строки Цикл
					Если ТипЗнч(Строка.Действие) = Тип("СправочникСсылка.ДействияСогласования")
							И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Действие, "СогласованиеВРежимеЗамечаний") Тогда
						ДействиеСогласованияВРежимеЗамечаний = Строка.Действие;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(
			Справочники.ДействияСогласования.ТабличныйДокументПротоколРазногласий(
				Документ,
				ДействиеСогласованияВРежимеЗамечаний,
				ОбъектыПечати,
				БесшовнаяИнтеграция));
		
		// В табличном документе зададим имя области в которую был выведен объект.
		// Нужно для возможности печати по-комплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Выполняет печать листа согласования из документа.
//
// Параметры:
//   МассивОбъектов - Массив из СправочникСсылка.ДокументыПредприятия
//   ОбъектыПечати - Массив - коллекция объектов, по которым сформированы печатные формы.
//   История - Булево - нужно ли выводить историю.
//   БесшовнаяИнтеграция - Булево - печатная форма будет отправлена через бесшовную интеграцию на сторону ИС.
//
// Возвращаемое значение:
//   ТабличныйДокумент - печатная форма листа согласования.
//
Функция ПечатьЛистаСогласованияИзДокумента(Знач МассивОбъектов, ОбъектыПечати, История = Ложь,
		БесшовнаяИнтеграция = Ложь) Экспорт
	
	// Создаем табличный документ и устанавливаем имя параметров печати.
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_ЛистСогласования";
	
	Если История = Истина Тогда
		Макет = УправлениеПечатью.МакетПечатнойФормы("БизнесПроцесс.Согласование.ПФ_MXL_ЛистСогласованияСИсторией");
	Иначе
		Макет = УправлениеПечатью.МакетПечатнойФормы("БизнесПроцесс.Согласование.ПФ_MXL_ЛистСогласования");
	КонецЕсли;
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьИсполнителиШапка = Макет.ПолучитьОбласть("ИсполнителиШапка");
	ОбластьИсполнители = Макет.ПолучитьОбласть("Исполнители");
	ОбластьИсполнителиПодпись = Макет.ПолучитьОбласть("ИсполнителиПодпись");
	Если История Тогда
		ОбластьЗаголовокИстории = Макет.ПолучитьОбласть("ЗаголовокИстории");
	КонецЕсли;
	ОбластьНеЗапускалось = Макет.ПолучитьОбласть("НеЗапускалось");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДляЛистаСогласования(История);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Действие = Неопределено;
	
	ИДУчастникаИРолиСоответствие = Новый Соответствие; // ключ ИДУчастника, значение - Роль
	
	ДействияСоответствие = Новый Соответствие;
	ВсеВизыСогласования = Новый Массив;
	// Сперва найдем все Действия.
	Для Каждого СтрокаСсылка Из Результат.Строки Цикл
		Для Каждого СтрокаИсполнитель Из СтрокаСсылка.Строки Цикл
			
			Действие = СтрокаИсполнитель.Источник;
			Ветка = СогласованиеВРежимеЗамечанийСервер.НайтиВеткуОбработки(Действие);
			Если ЗначениеЗаполнено(Ветка) Тогда
				ДействияСоответствие[Действие] = Ветка;
			Иначе
				ДействияСоответствие[Действие] = 1;
			КонецЕсли;
			
			Если ВсеВизыСогласования.Найти(СтрокаИсполнитель.ВизаСогласования) = Неопределено Тогда
				ВсеВизыСогласования.Добавить(СтрокаИсполнитель.ВизаСогласования);
			КонецЕсли;
			
			ИДУчастникаИРолиСоответствие[СтрокаИсполнитель.ИдентификаторУчастника] = СтрокаИсполнитель.РольИсполнителя;
			
		КонецЦикла;
	КонецЦикла;
	ВеткиМассив = Новый Массив;
	Для Каждого КлючИЗначение Из ДействияСоответствие Цикл
		ВеткиМассив.Добавить(КлючИЗначение.Значение);
	КонецЦикла;
	Замечания = ЗамечанияПоВеткам(ВеткиМассив);
	
	НомерИтерации = РегистрыСведений.ИтерацииДействий.НомерИтерации(Действие);
	Разногласия = ВсеРазногласия(Действие, НомерИтерации);
	ВерсииСогласованныхФайлов = РегистрыСведений.ВерсииСогласованныхФайлов.ВсеВерсииПоСпискуВиз(ВсеВизыСогласования);
	
	ОбластьРазногласияШапка = Макет.ПолучитьОбласть("РазногласияШапка");
	ОбластьРазногласия = Макет.ПолучитьОбласть("Разногласия");
	
	ОбластьЗаголовокРазногласия = Макет.ПолучитьОбласть("ЗаголовокРазногласия");
	
	ПервыйДокумент = Истина;
	Для Каждого СтрокаСсылка Из Результат.Строки Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		Предмет = СтрокаСсылка.Ссылка;
		
		Если ЗначениеЗаполнено(Предмет) Тогда
			МассивОбъектов.Удалить(МассивОбъектов.Найти(Предмет));
			
			ОбластьШапка.Параметры.Предмет = СтрШаблон("%1 ""%2""", Предмет.Метаданные().ПредставлениеОбъекта, Предмет);
					
			РеквизитыПредмета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Предмет,
				"Подготовил, Ответственный,ДатаСоздания,ДатаРегистрации");
			ДатаУчета = Делопроизводство.ДатаУчетаДокумента(РеквизитыПредмета);
			Если История Тогда
				Если ЗначениеЗаполнено(РеквизитыПредмета.Ответственный) Тогда 
					ОбластьШапка.Параметры.Ответственный =
						СтрШаблон(НСтр("ru = 'Ответственный: %1'"), 
						Сотрудники.ПредставлениеСотрудникаНаДату(РеквизитыПредмета.Ответственный, ДатаУчета));
				Иначе
					ОбластьШапка.Параметры.Ответственный =
						СтрШаблон(НСтр("ru = 'Ответственный: %1'"),
						Сотрудники.ПредставлениеСотрудникаНаДату(РеквизитыПредмета.Подготовил, ДатаУчета));
				КонецЕсли;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьШапка);
		КонецЕсли;
		
		Если История Тогда
			ТаблицаСроков = СтрокаСсылка.Строки;
			
			ДатаПомещенияВИсторию = Дата(1,1,1);
			ПериодИРезультат = ОпределитьПериодИРезультатЦиклаВизы(ТаблицаСроков, ДатаПомещенияВИсторию);
			ОбластьИсполнителиШапка.Параметры.Период = ПериодИРезультат.Период;
			ОбластьИсполнителиШапка.Параметры.РезультатСогласования = ПериодИРезультат.РезультатСогласования;
			
			ТабличныйДокумент.Вывести(ОбластьИсполнителиШапка);
			
			Для Каждого СтрокаИсполнитель Из СтрокаСсылка.Строки Цикл
				
				Если Не ДатыДоМинутСовпадают(ДатаПомещенияВИсторию, СтрокаИсполнитель.ДатаПомещенияВИсторию) Тогда
					Если Не ЗначениеЗаполнено(ДатаПомещенияВИсторию) Тогда 
						ТабличныйДокумент.Вывести(ОбластьЗаголовокИстории);
					КонецЕсли;
					
					ДатаПомещенияВИсторию = СтрокаИсполнитель.ДатаПомещенияВИсторию;
					
					ПериодИРезультат = ОпределитьПериодИРезультатЦиклаВизы(ТаблицаСроков, ДатаПомещенияВИсторию);
					ОбластьИсполнителиШапка.Параметры.Период = ПериодИРезультат.Период;
					ОбластьИсполнителиШапка.Параметры.РезультатСогласования = ПериодИРезультат.РезультатСогласования;
					
					ТабличныйДокумент.Вывести(ОбластьИсполнителиШапка);
				КонецЕсли;
				
				ОбластьИсполнителиИспользуемый = ОбластьИсполнители;
				
				Если ЗначениеЗаполнено(СтрокаИсполнитель.РезультатСогласования) Тогда
					ОбластьИсполнителиИспользуемый = ОбластьИсполнителиПодпись;
					ОбластьИсполнителиИспользуемый.Параметры.Подпись = "";
				КонецЕсли;
				
				ОбластьИсполнителиИспользуемый.Параметры.Заполнить(СтрокаИсполнитель);
				
				ОтслеживаниеВерсийПроизводилось = Ложь;
				Если ЗначениеЗаполнено(СтрокаИсполнитель.ФактическийИсполнитель) Тогда
					ПредставленияПравок = Новый Массив;
					
					Если Не СтрокаИсполнитель.ПомещенаВИсторию Тогда
						
						ДанныеОбИзмененииФайлов = ДанныеОбИзмененииФайловПоВизеСогласования(ВерсииСогласованныхФайлов, 
							СтрокаИсполнитель.ВизаСогласования);
						ВерсииИзменились = ДанныеОбИзмененииФайлов.ВерсииОтличаются; 
						ОтслеживаниеВерсийПроизводилось = ДанныеОбИзмененииФайлов.ОтслеживаниеВерсийПроизводилось;
						
						ТекстЗамечания = "";
						Если ВерсииИзменились И ОтслеживаниеВерсийПроизводилось Тогда
							
							ТекстЗамечания = ТекстЗамечанияОбИзмененииВерсии();
							
						КонецЕсли;
						
						Если ЗначениеЗаполнено(СтрокаИсполнитель.РезультатСогласования) Тогда
							ОбластьИсполнителиИспользуемый.Параметры.ЗамечаниеОбИзмененииФайлов = ТекстЗамечания;
						КонецЕсли;
						
					КонецЕсли;
					
					Ветка = ДействияСоответствие.Получить(СтрокаИсполнитель.Источник);
					
					Если ЗначениеЗаполнено(СтрокаИсполнитель.РезультатСогласования)
							И ЗначениеЗаполнено(СтрокаИсполнитель.Источник)
							И Не ЗначениеЗаполнено(СтрокаИсполнитель.ПравилоЭскалации) Тогда
						
						ПодписыватьУЭП = Ложь;
						
						Если ТипЗнч(СтрокаИсполнитель.Источник) = Тип("СправочникСсылка.ДействияСогласования") Тогда
							ПодписыватьУЭП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
								СтрокаИсполнитель.Источник, "ПодписыватьУЭП");
						ИначеЕсли ТипЗнч(СтрокаИсполнитель.Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
							БизнесПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
								СтрокаИсполнитель.Источник, "БизнесПроцесс");
							
							Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование") Тогда	
								ПодписыватьУЭП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
									БизнесПроцесс, "ПодписыватьЭП");
							КонецЕсли;
						КонецЕсли;
						
						ТекстПодписи = ТекстШтампаЛистаСогласования(СтрокаИсполнитель, ПодписыватьУЭП);
						
						ОбластьИсполнителиИспользуемый.Параметры.Подпись = ТекстПодписи;
						
						Если ПодписыватьУЭП Тогда
							
							ОбластьИсполнителиИспользуемый.Параметры.ПодписьРасшифровка = РаботаСЭП.СсылкаНаФормуЭПОбъекта(
								СтрокаИсполнитель.ВизаСогласования);
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Ветка)
							И ТипЗнч(Ветка) = Тип("СправочникСсылка.ВеткиОбработки") Тогда // Это согл. в режиме замечаний.
						
						СтруктураПоиска = Новый Структура("ВеткаОбработки, ТипЗамечания, НомерЭтапа",
							Ветка,
							Неопределено,
							СтрокаИсполнитель.НомерИтерации);
						
						СтруктураПоиска.Вставить("ИдентификаторАвтора", СтрокаИсполнитель.ИдентификаторУчастника);
						
						// Замечания.
						СтруктураПоиска.ТипЗамечания = Перечисления.ТипыЗамечаний.Замечание;
						ЗамечанияСтроки = Замечания.НайтиСтроки(СтруктураПоиска);
						
						Для Каждого Замечание Из ЗамечанияСтроки Цикл
							ПредставленияПравок.Добавить(ПредставлениеЗамечания(Замечание));
						КонецЦикла;
						
						// Комментарии.
						СтруктураПоиска.ТипЗамечания = Перечисления.ТипыЗамечаний.Комментарий;
						КомментарииСтроки = Замечания.НайтиСтроки(СтруктураПоиска);
						
						ВыделятьКомментарий =
							(СтрокаИсполнитель.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано);
						
						Для Каждого Комментарий Из КомментарииСтроки Цикл 
							ПредставленияПравок.Добавить(ПредставлениеЗамечания(Комментарий, ВыделятьКомментарий));
						КонецЦикла;
						
					ИначеЕсли ЗначениеЗаполнено(СтрокаИсполнитель.РезультатВыполнения) Тогда
						ПредставленияПравок.Добавить(СтрокаИсполнитель.РезультатВыполнения);
					КонецЕсли;
					
					Если ПредставленияПравок.Количество() Тогда
						ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ПредставленияПравок, "");
						ОбластьИсполнителиИспользуемый.Параметры.РезультатВыполнения = СтрСоединить(ПредставленияПравок, Символы.ПС);
					КонецЕсли;
					
					Если Не БесшовнаяИнтеграция И ОтслеживаниеВерсийПроизводилось Тогда
						
						ВывестиСсылкуФормаСравненияВерсий = ВерсииИзменились;
						Если Не ВерсииИзменились Тогда
							
							КоличествоВерсийФайлов = ВерсииСогласованныхФайлов.НайтиСтроки(
								Новый Структура("ВизаСогласования", СтрокаИсполнитель.ВизаСогласования)).Количество();
							
							ВывестиСсылкуФормаСравненияВерсий = КоличествоВерсийФайлов > 0;
							
						КонецЕсли;
						
						Если ВывестиСсылкуФормаСравненияВерсий Тогда
							ОбластьИсполнителиИспользуемый.Параметры.ОтличияВерсийВизСогласования = СтрШаблон(
								"v8doc:MXLDetails/ShowApprovedFileVersions/%1",
								ПолучитьНавигационнуюСсылку(СтрокаИсполнитель.ВизаСогласования));
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ФИОДолжность = СтрокаИсполнитель.ПредставлениеФактическогоИсполнителя;
				Если Не ЗначениеЗаполнено(ФИОДолжность) Тогда
					ФИОДолжность = Строка(СтрокаИсполнитель.ФактическийИсполнитель); 
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаИсполнитель.Исполнитель) Тогда
					
					Если Не ЗначениеЗаполнено(СтрокаИсполнитель.ФактическийИсполнитель) Тогда
						ОбластьИсполнителиИспользуемый.Параметры.ФИОДолжность = СтрокаИсполнитель.Исполнитель;
					Иначе
						ОбластьИсполнителиИспользуемый.Параметры.ФИОДолжность = ФИОДолжность;
					КонецЕсли;
					
				Иначе
					Если ЗначениеЗаполнено(СтрокаИсполнитель.ФактическийИсполнитель) Тогда
						ОбластьИсполнителиИспользуемый.Параметры.ФИОДолжность = СтрШаблон("%1 (%2)",
							ФИОДолжность,
							СтрокаИсполнитель.РольИсполнителя);
					Иначе
						ОбластьИсполнителиИспользуемый.Параметры.ФИОДолжность = СтрокаИсполнитель.РольИсполнителя;
					КонецЕсли;
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьИсполнителиИспользуемый);
			КонецЦикла;
			
		Иначе
			
			ТабличныйДокумент.Вывести(ОбластьИсполнителиШапка);
			
			Для Каждого СтрокаИсполнитель Из СтрокаСсылка.Строки Цикл
				
				ОбластьИсполнителиИспользуемый = ОбластьИсполнители;
				
				Если ЗначениеЗаполнено(СтрокаИсполнитель.РезультатСогласования) Тогда
					ОбластьИсполнителиИспользуемый = ОбластьИсполнителиПодпись;
					ОбластьИсполнителиИспользуемый.Параметры.Подпись = "";
				КонецЕсли;
				
				ОбластьИсполнителиИспользуемый.Параметры.Заполнить(СтрокаИсполнитель);
				
				Если ЗначениеЗаполнено(СтрокаИсполнитель.ФактическийИсполнитель) Тогда
					
					ПредставленияПравок = Новый Массив;
					ДанныеОбИзмененииФайлов = ДанныеОбИзмененииФайловПоВизеСогласования(ВерсииСогласованныхФайлов, 
						СтрокаИсполнитель.ВизаСогласования);
					
					ВерсииИзменились = ДанныеОбИзмененииФайлов.ВерсииОтличаются; 
					ОтслеживаниеВерсийПроизводилось = ДанныеОбИзмененииФайлов.ОтслеживаниеВерсийПроизводилось;
					
					ТекстЗамечания = "";
					Если ВерсииИзменились И ОтслеживаниеВерсийПроизводилось Тогда
						
						ТекстЗамечания = ТекстЗамечанияОбИзмененииВерсии(); 
						
					КонецЕсли; 
					
					Если ЗначениеЗаполнено(СтрокаИсполнитель.РезультатСогласования) Тогда
						ОбластьИсполнителиИспользуемый.Параметры.ЗамечаниеОбИзмененииФайлов = ТекстЗамечания; 
					КонецЕсли;
					
					Ветка = ДействияСоответствие.Получить(СтрокаИсполнитель.Источник);
					
					Если ЗначениеЗаполнено(СтрокаИсполнитель.РезультатСогласования)
							И ЗначениеЗаполнено(СтрокаИсполнитель.Источник)
							И Не ЗначениеЗаполнено(СтрокаИсполнитель.ПравилоЭскалации) Тогда
						
						ПодписыватьУЭП = Ложь;
						
						Если ТипЗнч(СтрокаИсполнитель.Источник) = Тип("СправочникСсылка.ДействияСогласования") Тогда
							ПодписыватьУЭП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
								СтрокаИсполнитель.Источник, "ПодписыватьУЭП");
						ИначеЕсли ТипЗнч(СтрокаИсполнитель.Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
							БизнесПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
								СтрокаИсполнитель.Источник, "БизнесПроцесс");
								
							Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование") Тогда	
								ПодписыватьУЭП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
									БизнесПроцесс, "ПодписыватьЭП");
							КонецЕсли;
						КонецЕсли;
						
						ТекстПодписи = ТекстШтампаЛистаСогласования(СтрокаИсполнитель, ПодписыватьУЭП);
						
						Если ЗначениеЗаполнено(СтрокаИсполнитель.РезультатСогласования) Тогда
							
							ОбластьИсполнителиИспользуемый.Параметры.Подпись = ТекстПодписи;
							Если ПодписыватьУЭП Тогда
								ОбластьИсполнителиИспользуемый.Параметры.ПодписьРасшифровка = РаботаСЭП.СсылкаНаФормуЭПОбъекта(
									СтрокаИсполнитель.ВизаСогласования);
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Ветка)
							И ТипЗнч(Ветка) = Тип("СправочникСсылка.ВеткиОбработки") Тогда // Это согл. в режиме замечаний.
						
						СтруктураПоиска = Новый Структура("ВеткаОбработки, ТипЗамечания, НомерЭтапа",
							Ветка,
							Неопределено,
							СтрокаИсполнитель.НомерИтерации);
						
						СтруктураПоиска.Вставить("ИдентификаторАвтора", СтрокаИсполнитель.ИдентификаторУчастника);
						
						// Замечания.
						СтруктураПоиска.ТипЗамечания = Перечисления.ТипыЗамечаний.Замечание;
						ЗамечанияСтроки = Замечания.НайтиСтроки(СтруктураПоиска);
						
						Для Каждого Замечание Из ЗамечанияСтроки Цикл 
							ПредставленияПравок.Добавить(ПредставлениеЗамечания(Замечание));
						КонецЦикла;
						
						// Комментарии.
						СтруктураПоиска.ТипЗамечания = Перечисления.ТипыЗамечаний.Комментарий;
						КомментарииСтроки = Замечания.НайтиСтроки(СтруктураПоиска);
						
						ВыделятьКомментарий =
							СтрокаИсполнитель.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано;
						
						Для Каждого Комментарий Из КомментарииСтроки Цикл
							ПредставленияПравок.Добавить(ПредставлениеЗамечания(Комментарий, ВыделятьКомментарий));
						КонецЦикла;
						
					ИначеЕсли ЗначениеЗаполнено(СтрокаИсполнитель.РезультатВыполнения) Тогда
						ПредставленияПравок.Добавить(СтрокаИсполнитель.РезультатВыполнения);
					КонецЕсли;
					
					Если ПредставленияПравок.Количество() > 0 Тогда
						ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ПредставленияПравок, "");
						ОбластьИсполнителиИспользуемый.Параметры.РезультатВыполнения = СтрСоединить(ПредставленияПравок, Символы.ПС);
					КонецЕсли;
					
					Если Не БесшовнаяИнтеграция И ОтслеживаниеВерсийПроизводилось Тогда
						
						ВывестиСсылкуФормаСравненияВерсий = ВерсииИзменились;
						Если Не ВерсииИзменились Тогда
							
							КоличествоВерсийФайлов = ВерсииСогласованныхФайлов.НайтиСтроки(
								Новый Структура("ВизаСогласования", СтрокаИсполнитель.ВизаСогласования)).Количество();
							
							ВывестиСсылкуФормаСравненияВерсий = КоличествоВерсийФайлов > 0;
							
						КонецЕсли;
							
						Если ВывестиСсылкуФормаСравненияВерсий Тогда
							ОбластьИсполнителиИспользуемый.Параметры.ОтличияВерсийВизСогласования = СтрШаблон(
								"v8doc:MXLDetails/ShowApprovedFileVersions/%1",
								ПолучитьНавигационнуюСсылку(СтрокаИсполнитель.ВизаСогласования));
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ФИОДолжность = СтрокаИсполнитель.ПредставлениеФактическогоИсполнителя;
				Если Не ЗначениеЗаполнено(ФИОДолжность) Тогда
					ФИОДолжность = Строка(СтрокаИсполнитель.ФактическийИсполнитель); 
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаИсполнитель.Исполнитель) Тогда
					
					Если Не ЗначениеЗаполнено(СтрокаИсполнитель.ФактическийИсполнитель) Тогда
						ОбластьИсполнителиИспользуемый.Параметры.ФИОДолжность = СтрокаИсполнитель.Исполнитель;
					Иначе
						ОбластьИсполнителиИспользуемый.Параметры.ФИОДолжность = ФИОДолжность;
					КонецЕсли;
					
				Иначе
					Если ЗначениеЗаполнено(СтрокаИсполнитель.ФактическийИсполнитель) Тогда
						ОбластьИсполнителиИспользуемый.Параметры.ФИОДолжность =
							СтрШаблон("%1 (%2)",
							ФИОДолжность,
							СтрокаИсполнитель.РольИсполнителя);
					Иначе
						ОбластьИсполнителиИспользуемый.Параметры.ФИОДолжность = СтрокаИсполнитель.РольИсполнителя;
					КонецЕсли;
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьИсполнителиИспользуемый);
			КонецЦикла;
			
		КонецЕсли;
		
		Если Разногласия.Количество() <> 0 Тогда
			
			ТабличныйДокумент.Вывести(ОбластьЗаголовокРазногласия);
			ТабличныйДокумент.Вывести(ОбластьРазногласияШапка);
			
			Номер = 1;
			Для Каждого СтрокаРазногласия Из Разногласия Цикл
				ОбластьРазногласия.Параметры.Заполнить(СтрокаРазногласия);
				ОбластьРазногласия.Параметры.Дата = Формат(СтрокаРазногласия.Дата, "ДФ='dd.MM.yyyy ЧЧ:мм';");
				ОбластьРазногласия.Параметры.Номер = Номер;
				
				РольИсполнителя = ИДУчастникаИРолиСоответствие[СтрокаРазногласия.ИдентификаторАвтора];
				Если ЗначениеЗаполнено(РольИсполнителя) Тогда
					ОбластьРазногласия.Параметры.Автор = СтрШаблон("%1 (%2)",
						СтрокаРазногласия.Автор,
						РольИсполнителя);
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьРазногласия);
				
				Номер = Номер + 1;
			КонецЦикла;
			
		КонецЕсли;
		
		// В табличном документе зададим имя области в которую был выведен объект.
		// Нужно для возможности печати по-комплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, СтрокаСсылка.Ссылка);
	КонецЦикла;
	
	// Выведем предметы, согласование которых не запускалось.
	Для Каждого Предмет Из МассивОбъектов Цикл
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ОбластьШапка.Параметры.Предмет = СтрШаблон("%1 ""%2""", Предмет.Метаданные().ПредставлениеОбъекта, Предмет);
		Если История Тогда
			Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
				РеквизитыПредмета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Предмет, "Подготовил, Ответственный");
				Если ЗначениеЗаполнено(РеквизитыПредмета.Ответственный) Тогда 
					ОбластьШапка.Параметры.Ответственный = СтрШаблон(НСтр("ru = 'Ответственный: %1'"),
						РеквизитыПредмета.Ответственный);
				Иначе
					ОбластьШапка.Параметры.Ответственный = СтрШаблон(НСтр("ru = 'Ответственный: %1'"),
						РеквизитыПредмета.Подготовил);
				КонецЕсли;
			ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда
				ОбластьШапка.Параметры.Ответственный = СтрШаблон(НСтр("ru = 'Ответственный: %1'"),
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "Организатор"));
			КонецЕсли;
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьШапка);
		ТабличныйДокумент.Вывести(ОбластьНеЗапускалось);
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Предмет);
	КонецЦикла;
	
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ОпределитьПериодИРезультатЦиклаВизы(ТаблицаСроков, ДатаПомещенияВИсторию)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаНачала = Дата(3000, 1, 1); 
	ДатаОкончания = Дата(1, 1, 1);
	
	Для Каждого Строка Из ТаблицаСроков Цикл 
		Если ДатаПомещенияВИсторию = Строка.ДатаПомещенияВИсторию Тогда 
			ДатаОкончания = Макс(ДатаОкончания, Строка.ДатаИсполнения);
			
			Если ЗначениеЗаполнено(Строка.Источник) Тогда 
				Если ТипЗнч(Строка.Источник) = Тип("СправочникСсылка.ДействияСогласования") Тогда
					Если ЗначениеЗаполнено(Строка.ДатаСозданияВизы) Тогда
						ДатаНачала = Мин(ДатаНачала, Строка.ДатаСозданияВизы);
					Иначе
						ДатаНачала = Мин(ДатаНачала, 
							ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Источник, "ДатаСоздания"));
					КонецЕсли; 
					
				ИначеЕсли ТипЗнч(Строка.Источник) = Тип("БизнесПроцессСсылка.Согласование") Тогда 
					ДатаНачала = Мин(ДатаНачала, 
						ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Источник, "ДатаНачала"));
				Иначе 
					ДатаНачала = Мин(ДатаНачала, 
						ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Источник, "Дата"));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано;
	Для Каждого Строка Из ТаблицаСроков Цикл 
		Если ДатаПомещенияВИсторию = Строка.ДатаПомещенияВИсторию Тогда 
			Если Не ЗначениеЗаполнено(Строка.РезультатСогласования) Тогда 
				РезультатСогласования = Перечисления.РезультатыСогласования.ПустаяСсылка();
				Прервать;
			ИначеЕсли Строка.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
				РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано;
				Прервать;
			ИначеЕсли Строка.РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда 
				РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Период = "";
	Если ДатаНачала <> Дата(3000, 1, 1) И ДатаОкончания <> Дата(1, 1, 1) Тогда 
		
		Если ДатаНачала <> Дата(1, 1, 1) Тогда 
			Период = СтрШаблон(НСтр("ru = 'Дата начала: %1 Дата окончания: %2'"),
				Формат(ДатаНачала, "ДФ='dd.MM.yyyy ЧЧ:мм'"), Формат(ДатаОкончания, "ДФ='dd.MM.yyyy ЧЧ:мм'"));
		КонецЕсли;		
			
	ИначеЕсли ДатаНачала = Дата(3000, 1, 1) Тогда 
		
		Если ДатаОкончания <> Дата(1, 1, 1) Тогда 
			Период = СтрШаблон(НСтр("ru = 'Дата окончания: %1'"), Формат(ДатаОкончания, "ДФ='dd.MM.yyyy ЧЧ:мм'")); 
		КонецЕсли;	
		
	ИначеЕсли ДатаОкончания = Дата(1 ,1, 1) Тогда 
		
		Если ДатаНачала <> Дата(1, 1, 1) Тогда 
			Период = СтрШаблон(НСтр("ru = 'Дата начала: %1'"), Формат(ДатаНачала, "ДФ='dd.MM.yyyy ЧЧ:мм'")); 
		КонецЕсли;	
		
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Период", Период);
	СтруктураВозврата.Вставить("РезультатСогласования", РезультатСогласования);
	
	Возврат СтруктураВозврата;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////// 
// Удаление виз 

// Удаляет переданную визу
Процедура УдалитьВизу(Виза) Экспорт 
	
	Виза.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Не Виза.ПометкаУдаления);
	
КонецПроцедуры	

// Удаляет переданные визы
// визы - массив виз либо таблица значений 
Процедура УдалитьВизы(Визы) Экспорт 
	
	Для Каждого Виза Из Визы Цикл
		УдалитьВизу(Виза);
	КонецЦикла;
	
КонецПроцедуры	

//////////////////////////////////////////////////////////////////////////////// 
// Прочие процедуры 

// Возвращает варианты старта бизнес-процесса в зависимости от существующих виз в документе
Функция ПроверитьПересечениеВизИИсполнителей(Документ, Исполнители) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВизыСогласования") Тогда 
		КодВозврата = "стартовать";
		Возврат КодВозврата;
	КонецЕсли;	
	
	Визы = ПолучитьАктивныеВизыДокумента(Документ);
	Если Визы.Количество() = 0 Тогда 
		КодВозврата = "стартовать";
		Возврат КодВозврата;
	КонецЕсли;	
	
	КодВозврата = "досогласовать";
	Для Каждого Строка Из Исполнители Цикл
		
		СтруктураИсполнителя = Новый Структура("Исполнитель, 
			|РольИсполнителя, 
			|ОсновнойОбъектАдресации, 
			|ДополнительныйОбъектАдресации");
		Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи")
			Или ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Сотрудники") Тогда
			
			СтруктураИсполнителя.Исполнитель = 
				Сотрудники.ЛюбойПользовательСотрудника(Строка.Исполнитель);
			
			СтруктураИсполнителя.РольИсполнителя = Справочники.ПолныеРоли.ПустаяСсылка();
		Иначе
			СтруктураИсполнителя.Исполнитель = Справочники.Пользователи.ПустаяСсылка();
			СтруктураИсполнителя.РольИсполнителя = Строка.Исполнитель;
		КонецЕсли;	
		
		Виза = ПолучитьАктивнуюВизуПоИсполнителю(Документ, СтруктураИсполнителя);
		Если Виза <> Неопределено Тогда 
			
			УстановитьПривилегированныйРежим(Истина);
			
			Если Не ЗначениеЗаполнено(Виза.Источник) Тогда 
				
				Если ЗначениеЗаполнено(Виза.РезультатСогласования) Тогда 
					КодВозврата = "пересогласовать";
					Возврат КодВозврата;
				Иначе	
					КодВозврата = "стартовать";
				КонецЕсли;
				
			Иначе
				
				БизнесПроцессЗавершен = Ложь;
				Если ТипЗнч(Виза.Источник) = Тип("БизнесПроцессСсылка.Согласование") Тогда 
					
					БизнесПроцессЗавершен = Виза.Источник.Завершен 
						ИЛИ Виза.Источник.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван
						Или Виза.Источник.РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано 
						Или Виза.Источник.РезультатСогласования = 
						Перечисления.РезультатыСогласования.СогласованоСЗамечаниями; 
						
				ИначеЕсли ТипЗнч(Виза.Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда 
					
					БизнесПроцессЗавершен = Виза.Источник.БизнесПроцесс.Завершен
						Или Виза.Источник.БизнесПроцесс.Состояние = Перечисления.СостоянияБизнесПроцессов.ПустаяСсылка()
						Или Виза.Источник.БизнесПроцесс.РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано
						Или Виза.Источник.БизнесПроцесс.РезультатСогласования = 
						Перечисления.РезультатыСогласования.СогласованоСЗамечаниями;
					
				КонецЕсли;
				
				Если БизнесПроцессЗавершен Тогда // бизнес-процесс завершен	
					КодВозврата = "пересогласовать";
					Возврат КодВозврата;
				Иначе // бизнес-процесс не завершен
					КодВозврата = "нестартовать";
					Возврат КодВозврата;
				КонецЕсли;							
				
			КонецЕсли;	
			
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Если КодВозврата = "досогласовать" Тогда 
		
		ЕстьРезультаты = Ложь;
		Для Каждого Виза из Визы Цикл
			Если ЗначениеЗаполнено(Виза.РезультатСогласования) Тогда 
				ЕстьРезультаты = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если ЕстьРезультаты = Ложь Тогда 
			КодВозврата = "стартовать";
		КонецЕсли;	
		
	КонецЕсли;	
	
	Возврат КодВозврата;
	
КонецФункции

// Возвращает Истина, если среди активных виз есть несогласованные  
Функция ЕстьВизыНеСогласованные(Документ) Экспорт 
	
	Визы = РаботаСВизамиСогласования.ПолучитьАктивныеВизыДокумента(Документ);
	
	ЕстьНеСогласованные = Ложь;
	Для Каждого Виза Из Визы Цикл
		Если Виза.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
			ЕстьНеСогласованные = Истина;
			Прервать;
		КонецЕсли;			
	КонецЦикла;
	
	Возврат	ЕстьНеСогласованные;	
	
КонецФункции

// Возвращает Истина, если среди активных виз есть находящиеся на согласовании
Функция ЕстьВизыНаСогласовании(Документ) Экспорт 
	
	Визы = РаботаСВизамиСогласования.ПолучитьАктивныеВизыДокумента(Документ);
	
	ЕстьНаСогласовании = Ложь;
	Для Каждого Виза Из Визы Цикл
		Если Виза.РезультатСогласования = Перечисления.РезультатыСогласования.ПустаяСсылка() Тогда 
			ЕстьНаСогласовании = Истина;
			Прервать;
		КонецЕсли;			
	КонецЦикла;
	
	Возврат ЕстьНаСогласовании;		
	
КонецФункции

// Формирует наименование визы
Функция ПолучитьНаименованиеВизы(Документ) Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Виза согласования документа ""%1""'"), Документ.Наименование);
	
КонецФункции

// Работа с действиями

// Создает визы для исполнителей действия
//
// Параметры:
//  Действие - СправочникСсылка.ДействиеСогласования - ссылка на действие
//  Участники - ТаблицаЗначений - список участников действия
//
Процедура СоздатьВизыПоДействию(Действие, Участники = Неопределено) Экспорт 
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВизыСогласования") Тогда 
		Возврат;
	КонецЕсли;
	
	РеквизитыДействие = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие,
		"Ссылка, Автор, ФормируетВизы, Предмет, Участники");
	Если Не РеквизитыДействие.ФормируетВизы Тогда 
		Возврат
	КонецЕсли;
	
	Документ = РеквизитыДействие.Предмет;
	Если Не ЗначениеЗаполнено(Документ) 
		Или Не ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Документ) Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяФункции = "Функция";
	Если Участники = Неопределено Тогда 
		Участники = РеквизитыДействие.Участники.Выгрузить();
		ИмяФункции = "ФункцияУчастника";
	КонецЕсли;
	
	АктивныеВизы = АктивныеВизыПоДействию(Документ, Действие);
	Для Каждого Согласующий Из Участники Цикл		
		Если Согласующий[ИмяФункции] <> Перечисления.ФункцииУчастниковСогласования.Согласующий Тогда 
			Продолжить;
		КонецЕсли;
		
		СоздатьВизуУчастника(Документ, Действие, РеквизитыДействие.Автор, Согласующий, АктивныеВизы);
	КонецЦикла;
	
КонецПроцедуры

// Обновляет визу исполнителя
//
// Параметры:
//  Действие - СправочникСсылка.ДействиеСогласования - ссылка на действие
//  ПараметрыУчастника - Структура - параметры участника действия
//
Процедура ОбновитьВизуУчастника(Действие, ПараметрыУчастника) Экспорт 
	
	РеквизитыДействие = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие,
		"Ссылка, Автор, ФормируетВизы, Предмет");
	Если Не РеквизитыДействие.ФормируетВизы Тогда 
		Возврат;
	КонецЕсли;
	
	Документ = РеквизитыДействие.Предмет;
	Если Не ЗначениеЗаполнено(Документ) 
		Или Не ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Документ) Тогда 
		Возврат;
	КонецЕсли;
	
	Участник = ПараметрыУчастника.Участник;
	ИДУчастника = ?(ПараметрыУчастника.Свойство("ИдентификаторУчастника"),
		ПараметрыУчастника.ИдентификаторУчастника, ПараметрыУчастника.Идентификатор);
	Виза = ПолучитьВизуУчастника(Документ, Действие, ИДУчастника);
	Если Виза = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектВизы = Виза.ПолучитьОбъект();
	
	// Если данные для визы не были изменены, тогда не обновляем визу.
	Если ОбъектВизы.Автор = РеквизитыДействие.Автор
		И (Не  ПараметрыУчастника.Свойство("Результат") 
			Или ОбъектВизы.РезультатСогласования = ПараметрыУчастника.Результат)
		И (ОбъектВизы.Исполнитель = Участник
			Или ОбъектВизы.РольИсполнителя = Участник) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Участник) = Тип("СправочникСсылка.ПолныеРоли") Тогда 
		РольИсполнителя = Участник;
		Исполнитель = Неопределено;
	Иначе 
		РольИсполнителя = Неопределено;
		Исполнитель = Участник;
	КонецЕсли;
	
	ОбъектВизы.Исполнитель = Исполнитель;
	ОбъектВизы.РольИсполнителя = РольИсполнителя;
	
	ОбъектВизы.НомерИтерации = РегистрыСведений.ИтерацииДействий.НомерИтерации(Действие);
	
	Если ПараметрыУчастника.Свойство("Результат")
		И ОбъектВизы.РезультатСогласования <> ПараметрыУчастника.Результат Тогда
		
		УстановилРезультат = Справочники.Сотрудники.ПустаяСсылка();
		Комментарий = "";
		
		Если ЗначениеЗаполнено(ПараметрыУчастника.Результат) Тогда
			
			ПараметрыУчастника.Свойство("ФактическийИсполнитель", УстановилРезультат);
			Если Не ЗначениеЗаполнено(УстановилРезультат) Тогда
				
				СведенияОбУчастникахДействия = 
					РегистрыСведений.СведенияОбУчастникахДействий.ПолучитьСведенияОбУчастникахДействия(Действие);
				СведениеОбУчастнике = СведенияОбУчастникахДействия.Получить(ИДУчастника);
				Если СведениеОбУчастнике = Неопределено Тогда 
					УстановилРезультат = Сотрудники.ОсновнойСотрудник();
				Иначе 
					УстановилРезультат = СведениеОбУчастнике.ФактическийИсполнитель;
				КонецЕсли;
			КонецЕсли;
			Комментарий = ПараметрыУчастника.Комментарий;
		КонецЕсли;
		
		ОбъектВизы.РезультатСогласования = ПараметрыУчастника.Результат;
		ОбъектВизы.Комментарий = Комментарий;
		ОбъектВизы.ДатаИсполнения = ПараметрыУчастника.ДатаИсполнения;
		ОбъектВизы.УстановилРезультат = УстановилРезультат;
		
	КонецЕсли;
	
	Если ПараметрыУчастника.Свойство("ПодписиЭП")
		И ТипЗнч(ПараметрыУчастника.ПодписиЭП) = Тип("Соответствие") Тогда
		
		ЗадачаУчастника = РаботаСПроцессамиПоДействиям.ЗадачаПроцессаПоУчастникуДействия(Действие, ИДУчастника);
		ДействиеЗадачи = Документы.ДействиеЗадачи.НайтиПоИсточнику(ЗадачаУчастника);
		
		ПодписиЭПДействия = ПараметрыУчастника.ПодписиЭП.Получить(ДействиеЗадачи);
		Если ТипЗнч(ПодписиЭПДействия) = Тип("Массив") Тогда
			Для Каждого СвойстваПодписи Из ПодписиЭПДействия Цикл
				
				РаботаСЭП.ЗанестиИнформациюОПодписи(ОбъектВизы.Ссылка, СвойстваПодписи);
				ОбъектВизы.Подписана = Истина;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ОбъектВизы.Автор = РеквизитыДействие.Автор;
	ОбъектВизы.Записать();
	
КонецПроцедуры

// Возвращает любую визу участника
//
// Параметры:
//  Документ - СправочникСсылка.ДокументПредприятия - ссылка на документ
//  Действие - СправочникСсылка.ДействиеСогласования - ссылка на действие
//  ИДУчастника - УникальныйИдентификатор - по которому ищем визу участника
//
// Возвращаемое значение:
//  Ссылка - СправочникСсылка.ВизыСогласования - Ссылка на визу участника
//
Функция ПолучитьВизуУчастника(Документ, Действие, ИДУчастника) Экспорт 
	
	Визы = ПолучитьВизыПоИсточнику(Документ, Действие, Истина, ИДУчастника);
	
	Если Визы.Количество() = 0 Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Визы[0].Ссылка;
	
КонецФункции

// Возвращает активные визы по действию
//
// Параметры:
//  Документ - СправочникСсылка.ДокументПредприятия - ссылка на документ
//  Действие - СправочникСсылка.ДействиеСогласования - ссылка на действие
//
Функция АктивныеВизыПоДействию(Документ, Действие) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ПолучитьВизыПоИсточнику(Документ, Действие, Истина);
	
КонецФункции

// Обновляет визы участников действия
//
// Параметры:
//  Действие - СправочникСсылка.ДействиеСогласования - ссылка на действие
//  Добавленные -Массив - Добавленные в действие участники
//  Удаленные -Массив - Удаленные из действие участники
//
Процедура ОбновитьВизыУчастниковДействия(Действие, Добавленные, Удаленные) Экспорт 
	
	Если Не ЗначениеЗаполнено(Удаленные) И Не ЗначениеЗаполнено(Добавленные) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВизыСогласования") Тогда 
		Возврат;
	КонецЕсли;
	
	РеквизитыДействие = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие,
		"ФормируетВизы, Предмет, Автор");
	Если Не РеквизитыДействие.ФормируетВизы Тогда 
		Возврат
	КонецЕсли;
	
	Документ = РеквизитыДействие.Предмет;
	Если Не ЗначениеЗаполнено(Документ) 
		Или Не ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Документ) Тогда 
		Возврат;
	КонецЕсли;
	
	// Для новых действий "Визы" еще не сформированы
	Состояние = РегистрыСведений.СостоянияДействий.СостояниеДействия(Действие);
	Если Не ЗначениеЗаполнено(Состояние) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтарыйУчастник Из Удаленные Цикл 
		ЗамененныйУчастник = Неопределено;
		Для Каждого НовыйУчастник Из Добавленные Цикл 
			Если НовыйУчастник.Идентификатор = СтарыйУчастник.Идентификатор Тогда 
				ЗамененныйУчастник = НовыйУчастник.Участник;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыУчастника = Новый Структура;
		ПараметрыУчастника.Вставить("Идентификатор", СтарыйУчастник.Идентификатор);
		Если ЗначениеЗаполнено(ЗамененныйУчастник) Тогда 
			ПараметрыУчастника.Вставить("Участник", ЗамененныйУчастник);
			ОбновитьВизуУчастника(Действие, ПараметрыУчастника);
		Иначе 
			ПараметрыУчастника.Вставить("Участник", СтарыйУчастник.Участник);
			ОтметитьУдалениеВизыУчастникаДействия(Документ, Действие, ПараметрыУчастника, Истина);
		КонецЕсли;
	КонецЦикла;
	
	МенеджерДействия = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Действие);
	ВсеУчастники = МенеджерДействия.УчастникиДействия(Действие);
	Для Каждого НовыйУчастник Из Добавленные Цикл 
		ФункцияУчастника = Неопределено;
		СтрУчастники = ВсеУчастники.НайтиСтроки(Новый Структура("Идентификатор", НовыйУчастник.Идентификатор));
		Если СтрУчастники.Количество() > 0 Тогда 
			ФункцияУчастника = СтрУчастники[0].Функция;
		КонецЕсли;
		
		Если ФункцияУчастника <> Перечисления.ФункцииУчастниковСогласования.Согласующий Тогда 
			Продолжить;
		КонецЕсли;
		
		ЗамененныйУчастник = Неопределено;
		Для Каждого СтарыйУчастник Из Удаленные Цикл 
			Если НовыйУчастник.Идентификатор = СтарыйУчастник.Идентификатор Тогда 
				ЗамененныйУчастник = СтарыйУчастник.Участник;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Замену отработали ранее.
		Если ЗначениеЗаполнено(ЗамененныйУчастник) Тогда 
			Продолжить;
		КонецЕсли;
		
		СоздатьВизуУчастника(Документ, Действие, РеквизитыДействие.Автор, НовыйУчастник);
	КонецЦикла;
	
КонецПроцедуры

// Отмечает как удаленную визу участника действия
//
Процедура ОтметитьУдалениеВизыУчастникаДействия(Документ, Действие, ПараметрыУчастника, Отметка) Экспорт 
	
	ИДУчастника = ?(ПараметрыУчастника.Свойство("ИдентификаторУчастника"),
		ПараметрыУчастника.ИдентификаторУчастника, ПараметрыУчастника.Идентификатор);
	Виза = ПолучитьВизуУчастника(Документ, Действие, ИДУчастника);
	Если Виза = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектВизы = Виза.ПолучитьОбъект();
	ОбъектВизы.Удалена = Отметка;
	ОбъектВизы.Записать();
	
КонецПроцедуры

// Выполняет обработку виз при начале новой итерации согласования
//
// Параметры:
//  Действие - СправочникСсылка.ДействиеСогласования - ссылка на действие
//  Участники - ТаблицаЗначений - список участников действия
//
Процедура ОбработатьВизыДействияПриНачалеИтерации(Действие, Участники) Экспорт 
	
	СоздатьВизыПоДействию(Действие, Участники);
	
КонецПроцедуры

// Отмечает визы удаленными.
// 
// Параметры:
//  ВизыСогласования - Массив - визы согласования
//  Отметка - Булево - Отметка удаления
//
Процедура ОтметитьВизыУдаленными(ВизыСогласования, Отметка = Истина) Экспорт 
	
	Для Каждого Виза Из ВизыСогласования Цикл
		ОбъектВизы = Виза.Ссылка.ПолучитьОбъект();
		ОбъектВизы.Удалена = Отметка;
		ОбъектВизы.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Возрвщает таблицу замечаний с разногласиями
// 
// Параметры:
//  Действие - СправочникСсылка.ДействияСогласования - Действие
//  НомерИтерации - Произвольный, Число - Номер итерации
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Все разногласия
Функция ВсеРазногласия(Действие, НомерИтерации) Экспорт

	Если Не ЗначениеЗаполнено(Действие)
		Или ТипЗнч(Действие) <> Тип("СправочникСсылка.ДействияСогласования") Тогда
		Возврат Новый ТаблицаЗначений;			
	КонецЕсли;
	
	ПомещеноВИсторию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "ПомещеноВИсторию");
	Если ПомещеноВИсторию Тогда
		Возврат Новый ТаблицаЗначений;			
	КонецЕсли;	
	
	ВеткаОбработки = СогласованиеВРежимеЗамечанийСервер.НайтиВеткуОбработки(Действие);
	Если Не ЗначениеЗаполнено(ВеткаОбработки) Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Замечания.Замечание,
	|	Замечания.Комментарий,
	|	Замечания.Автор,
	|	Замечания.Дата КАК Дата,
	|	Замечания.ПринятаяРедакция,
	|	Замечания.ИдентификаторАвтора
	|ИЗ
	|	Справочник.Замечания КАК Замечания
	|ГДЕ
	|	Замечания.ВеткаОбработки = &ВеткаОбработки
	|	И Замечания.ПометкаУдаления = ЛОЖЬ
	|	И Замечания.ТипЗамечания = &ТипЗамечания
	|	И Замечания.СтатусПринятия = &СтатусПринятия
	|	И Замечания.НомерЭтапа = &НомерЭтапа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Запрос.УстановитьПараметр("ВеткаОбработки", ВеткаОбработки);
	Запрос.УстановитьПараметр("НомерЭтапа", НомерИтерации);
	Запрос.УстановитьПараметр("ТипЗамечания", Перечисления.ТипыЗамечаний.Замечание);
	Запрос.УстановитьПараметр("СтатусПринятия", Перечисления.СтатусыПринятияЗамечаний.НеПринята);

	ТаблицаЗамечаний = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаЗамечаний;
	
КонецФункции	

// Текст запроса для листа согласования.
// 
// Параметры:
//  История - Булево - История
// 
// Возвращаемое значение:
//  ЗапросТекст - Строка - Текст запроса для печати.
//
Функция ТекстЗапросаДляЛистаСогласования(История = Ложь) Экспорт
	
	ЗапросТекст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВизыСогласования.Документ КАК Ссылка,
	|	ВизыСогласования.Ссылка КАК ВизаСогласования,
	|	ВизыСогласования.Исполнитель КАК Исполнитель,
	|	ВизыСогласования.УстановилРезультат КАК ФактическийИсполнитель,
	|	ВизыСогласования.РольИсполнителя.Владелец КАК РольИсполнителя,
	|	ВизыСогласования.РольИсполнителя.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации,
	|	ВизыСогласования.РольИсполнителя.ДополнительныйОбъектАдресации КАК ДополнительныйОбъектАдресации,
	|	ВизыСогласования.РезультатСогласования КАК РезультатСогласования,
	|	ВизыСогласования.ДатаИсполнения КАК ДатаИсполнения,
	|	ВЫРАЗИТЬ(ВизыСогласования.Исполнитель КАК Справочник.Сотрудники).Должность КАК Должность,
	|	ВизыСогласования.Комментарий КАК РезультатВыполнения,
	|	ВизыСогласования.Источник КАК Источник,
	|	ВизыСогласования.ПомещенаВИсторию КАК ПомещенаВИсторию,
	|	ВизыСогласования.ДатаПомещенияВИсторию КАК ДатаПомещенияВИсторию,
	|	ВизыСогласования.ДатаСоздания КАК ДатаСозданияВизы,
	|	ВизыСогласования.Порядок КАК Порядок,
	|	ВизыСогласования.ИдентификаторУчастника КАК ИдентификаторУчастника,
	|	ВизыСогласования.НомерИтерации КАК НомерИтерации,
	|	ЭскалированныеДействия.ПравилоЭскалации КАК ПравилоЭскалации,
	|	ВЫБОР
	|		КОГДА СведенияОбУчастникахДействий.ПредставлениеФактическогоИсполнителя <> """"
	|				И НЕ СведенияОбУчастникахДействий.ПредставлениеФактическогоИсполнителя ЕСТЬ NULL
	|				И СведенияОбУчастникахДействий.ФактическийИсполнитель = ВизыСогласования.УстановилРезультат
	|			ТОГДА СведенияОбУчастникахДействий.ПредставлениеФактическогоИсполнителя
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ВизыСогласования.УстановилРезультат)
	|	КОНЕЦ КАК ПредставлениеФактическогоИсполнителя,
	|	ВЫБОР
	|		КОГДА СведенияОбУчастникахДействий.ФактическийИсполнитель = ВизыСогласования.УстановилРезультат
	|			ТОГДА СведенияОбУчастникахДействий.ПредставлениеСотрудникаДляПЭП
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПредставлениеСотрудникаДляПЭП
	|ИЗ
	|	Справочник.ВизыСогласования КАК ВизыСогласования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбУчастникахДействий КАК СведенияОбУчастникахДействий
	|		ПО ВизыСогласования.Источник = СведенияОбУчастникахДействий.Действие
	|			И ВизыСогласования.ИдентификаторУчастника = СведенияОбУчастникахДействий.ИдентификаторУчастника
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭскалированныеДействия КАК ЭскалированныеДействия
	|		ПО ВизыСогласования.Источник = ЭскалированныеДействия.Действие
	|			И ВизыСогласования.ИдентификаторУчастника = ЭскалированныеДействия.ИдентификаторУчастника
	|ГДЕ
	|	ВизыСогласования.Документ В(&МассивОбъектов)
	|	И НЕ ВизыСогласования.ПометкаУдаления
	|	И НЕ ВизыСогласования.Удалена
	|	И НЕ(ВизыСогласования.Источник ССЫЛКА Справочник.ДействияСогласования
	|				И ВизыСогласования.Источник.ПомещеноВИсторию)";
	
	Если Не История Тогда 
		ЗапросТекст = ЗапросТекст + "
		|И Не ВизыСогласования.ПомещенаВИсторию";
	КонецЕсли;
	
	ЗапросТекст = МультиязычностьДокументооборот.ТекстЗапросаСведенийОбУчастникахСУчетомЯзыка(ЗапросТекст);
	
	ЗапросТекст = ЗапросТекст + "
		|УПОРЯДОЧИТЬ ПО
		|	ПомещенаВИсторию,
		|	ДатаПомещенияВИсторию УБЫВ
		|ИТОГИ ПО
		|	Ссылка ";
	
	Возврат ЗапросТекст;
	
КонецФункции

// Возвращает данные об изменении файлов по визе согласования и таблице версий файлов
//
// Параметры:
//  ВерсииФайлов - ТаблицаЗначений - 
//  ВизаСогласования - СправочникСсылка.ВизыСогласования - 
// 
// Возвращаемое значение:
//  См. НовыеДанныеОбИзмененииФайлов
//
Функция ДанныеОбИзмененииФайловПоВизеСогласования(ВерсииФайлов, ВизаСогласования) Экспорт
	
	ДанныеОбИзмененииФайлов = НовыеДанныеОбИзмененииФайлов();
	ДанныеОбИзмененииФайлов.ОтслеживаниеВерсийПроизводилось = Истина;
	ДанныеОбИзмененииФайлов.ВерсииОтличаются = Ложь;
	
	ВерсииСогласованныхФайловВизы = ВерсииФайлов.НайтиСтроки(
		Новый Структура("ВизаСогласования", ВизаСогласования));
		
	Для Каждого ВерсияФайла Из ВерсииСогласованныхФайловВизы Цикл
		
		Если ВерсияФайла.ЭтоСканКопия Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ВерсияФайла.ОтслеживаниеВерсийПроизводилось Тогда
			ДанныеОбИзмененииФайлов.ОтслеживаниеВерсийПроизводилось = Ложь;
			Прервать;
		КонецЕсли;
		
		Если ВерсияФайла.ВерсияФайлаОтличается Тогда
			ДанныеОбИзмененииФайлов.ВерсииОтличаются = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеОбИзмененииФайлов;
	
КонецФункции

// Новые данные об изменении файлов
// 
// Возвращаемое значение:
//  Структура - данные об изменении файлов:
// * ВерсииОтличаются - Булево
// * ОтслеживаниеВерсийПроизводилось - Булево
//
Функция НовыеДанныеОбИзмененииФайлов()
	
	ДанныеОбИзмененииФайлов = Новый Структура;
	ДанныеОбИзмененииФайлов.Вставить("ВерсииОтличаются");
	ДанныеОбИзмененииФайлов.Вставить("ОтслеживаниеВерсийПроизводилось");
	Возврат ДанныеОбИзмененииФайлов
	
КонецФункции

// Возвращает таблицу замечания по указанным веткам обработки
//
// Параметры:
//   ВеткиМассив - Массив - массив СправочникССылка.ВеткиОбработки
//
// Возвращаемое значение:
//   ТаблицаЗначений - замечания.
//
Функция ЗамечанияПоВеткам(ВеткиМассив) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Замечания.Ссылка КАК Ссылка,
		|	Замечания.ВерсияДанных КАК ВерсияДанных,
		|	Замечания.ПометкаУдаления КАК ПометкаУдаления,
		|	Замечания.Код КАК Код,
		|	Замечания.Автоматическая КАК Автоматическая,
		|	Замечания.Автор КАК Автор,
		|	Замечания.ВерсияHTML КАК ВерсияHTML,
		|	Замечания.ВеткаОбработки КАК ВеткаОбработки,
		|	Замечания.ВладелецЗамечания КАК ВладелецЗамечания,
		|	Замечания.Дата КАК Дата,
		|	Замечания.Документ КАК Документ,
		|	Замечания.Замечание КАК Замечание,
		|	Замечания.ЗамечаниеИнициатора КАК ЗамечаниеИнициатора,
		|	Замечания.ИдентификаторАвтора КАК ИдентификаторАвтора,
		|	Замечания.ИдентификаторЭтапа КАК ИдентификаторЭтапа,
		|	Замечания.ИдКонца КАК ИдКонца,
		|	Замечания.ИдНачала КАК ИдНачала,
		|	Замечания.ИмяПоля КАК ИмяПоля,
		|	Замечания.Комментарий КАК Комментарий,
		|	Замечания.НаЧтоМеняем КАК НаЧтоМеняем,
		|	Замечания.Номер КАК Номер,
		|	Замечания.НомерКартинки КАК НомерКартинки,
		|	Замечания.НомерЭтапа КАК НомерЭтапа,
		|	Замечания.Отработано КАК Отработано,
		|	Замечания.РеальныйАвтор КАК РеальныйАвтор,
		|	Замечания.СсылкиУтеряны КАК СсылкиУтеряны,
		|	Замечания.СтатусПринятия КАК СтатусПринятия,
		|	Замечания.ТипЗамечания КАК ТипЗамечания,
		|	Замечания.Цикл КАК Цикл,
		|	Замечания.ЧтоМеняем КАК ЧтоМеняем,
		|	Замечания.ЭтоЗамечаниеWord КАК ЭтоЗамечаниеWord,
		|	Замечания.ЭтоОтличиеОтШаблона КАК ЭтоОтличиеОтШаблона,
		|	Замечания.Предопределенный КАК Предопределенный,
		|	Замечания.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
		|ИЗ
		|	Справочник.Замечания КАК Замечания
		|ГДЕ
		|	Замечания.ПометкаУдаления = ЛОЖЬ
		|	И Замечания.ВеткаОбработки В(&ВеткиМассив)");
	   
	Запрос.УстановитьПараметр("ВеткиМассив", ВеткиМассив);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает строковое представление замечания для пользователя.
//
// Параметры:
//   Замечание - СтрокаТаблицыЗначений - строка, соответствующая замечанию, см. ЗамечанияПоВеткам().
//
// Возвращаемое значение:
//   Строка - представление замечания для пользователя.
//
Функция ПредставлениеЗамечания(Замечание, ВыделятьКомментарий = Ложь) Экспорт
	
	Если Замечание.ТипЗамечания = ПредопределенноеЗначение("Перечисление.ТипыЗамечаний.Замечание") Тогда
		Возврат СтрШаблон(НСтр("ru = 'Замечание: ""%1""'"), Замечание.Замечание);
	ИначеЕсли Замечание.ТипЗамечания = ПредопределенноеЗначение("Перечисление.ТипыЗамечаний.Комментарий") Тогда
		Если ВыделятьКомментарий Тогда
			Возврат СтрШаблон(НСтр("ru = 'Комментарий: ""%1""'"), Замечание.Комментарий);
		Иначе
			Возврат Замечание.Комментарий;
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Возвращает текст замечания о том, что версии файлов изменились после согласования
// 
// Возвращаемое значение:
//  Строка
//
Функция ТекстЗамечанияОбИзмененииВерсии() Экспорт
	
	Возврат НСтр("ru = 'Версия согласованного файла(-ов) отличается от текущей(-их)'");
	
КонецФункции

// Текст штампа листа согласования
//
// Параметры:
//  СтрокаИсполнитель - СтрокаДереваЗначений:
// * ВизаСогласования - СправочникСсылка.ВизыСогласования
// * ПредставлениеСотрудникаДляПЭП - Строка
// * ФактическийИсполнитель - СправочникСсылка.ФактическиеИсполнители
//  ПодписыватьУЭП - Булево
// 
// Возвращаемое значение:
//  Строка
//
Функция ТекстШтампаЛистаСогласования(СтрокаИсполнитель, ПодписыватьУЭП) Экспорт
	
	Если ПодписыватьУЭП Тогда
		
		ТекстПодписи = РаботаСЭП.ТекстПодписиУЭПДляВывода(СтрокаИсполнитель.ВизаСогласования);
		
	Иначе
		
		ПредставлениеСотрудника = СтрокаИсполнитель.ПредставлениеСотрудникаДляПЭП;
		
		// Если не успели отработать обработчики обновления, то ПредставлениеСотрудникаДляПЭП будет пустым
		Если Не ЗначениеЗаполнено(ПредставлениеСотрудника)
			И ЗначениеЗаполнено(СтрокаИсполнитель.ФактическийИсполнитель) Тогда
			
			Факт = СтрокаИсполнитель.ФактическийИсполнитель;
			ТипФакт = ТипЗнч(СтрокаИсполнитель.ФактическийИсполнитель);
			// Фактический исполнитель в листе согласования может быть не только типа "ФактическийИсполнитель"
			// Так как берется из "УстановилРезультат" ВизыСогласования
			Если ТипФакт = Тип("СправочникСсылка.ФактическиеИсполнители") Тогда
				Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Факт, "Отметил,Факт");
				ПредставлениеСотрудника = ДействияСервер.ПредставлениеСотрудникаДляПЭП(Данные);
			Иначе
				ПредставлениеСотрудника = Строка(Факт);
			КонецЕсли;
			
		КонецЕсли;
		
		ТекстПодписи = ДействияСервер.ШтампПЭП(ПредставлениеСотрудника);
		
	КонецЕсли;
	
	Возврат ТекстПодписи;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьВизуУчастника(Документ, Действие, Автор, ПараметрыУчастника, АктивныеВизы = Неопределено)
	
	Если АктивныеВизы <> Неопределено Тогда 
		ВизаДляИстории = АктивныеВизы.НайтиСтроки(
			Новый Структура("ИдентификаторУчастника", ПараметрыУчастника.Идентификатор));
		Если ВизаДляИстории.Количество() > 0 Тогда 
			ПоместитьВизыВИсторию(ВизаДляИстории, Автор);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыУчастника.Участник) = Тип("СправочникСсылка.ПолныеРоли") Тогда 
		РольИсполнителя = ПараметрыУчастника.Участник;
		Исполнитель = Неопределено;
	Иначе 
		РольИсполнителя = Неопределено;
		Исполнитель = ПараметрыУчастника.Участник;
	КонецЕсли;
	
	НовыйЭлемент = Справочники.ВизыСогласования.СоздатьЭлемент();
	НовыйЭлемент.Наименование = ПолучитьНаименованиеВизы(Документ);
	НовыйЭлемент.Документ = Документ;
	НовыйЭлемент.Автор = Автор;
	НовыйЭлемент.ДатаСоздания = ТекущаяДатаСеанса();
	НовыйЭлемент.Источник = Действие;
	НовыйЭлемент.ИдентификаторУчастника = ПараметрыУчастника.Идентификатор;
	НовыйЭлемент.РольИсполнителя = РольИсполнителя;
	НовыйЭлемент.Исполнитель = Исполнитель;
	НовыйЭлемент.Порядок = МаксимальныйПорядокВизы(Документ) + 1;
	
	НовыйЭлемент.Записать();
	
КонецПроцедуры

Функция ДатыДоМинутСовпадают(Дата1, Дата2)
	
	Если Год(Дата1) = Год(Дата2)
		И Месяц(Дата1) = Месяц(Дата2)
		И День(Дата1) = День(Дата2)
		И Час(Дата1) = Час(Дата2)
		И Минута(Дата1) = Минута(Дата2) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти
