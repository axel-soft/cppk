
////////////////////////////////////////////////////////////////////////////////
// Работа с бизнес-процессами 
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область РезультатыВыполненияПроцессовИЗадач

// Обновляет результат выполнения задачи процесса в регистре РезультатыВыполненияПроцессовИЗадач.
//
// Параметры:
//  ЗадачаПроцесса - ЗадачаОбъект.ЗадачаИсполнителя
//
Процедура ОбновитьРезультатВыполненияЗадачи(ЗадачаПроцесса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерПроцесса = 
		ОбщегоНазначения.МенеджерОбъектаПоСсылке(ЗадачаПроцесса.БизнесПроцесс);
	
	Если Не МенеджерПроцесса.ЕстьМетодРезультатВыполненияЗадачи() Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РезультатыВыполненияПроцессовИЗадач");
	ЭлементБлокировки.УстановитьЗначение("Объект", ЗадачаПроцесса.Ссылка);
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка.Заблокировать();
		
		РезультатВыполнения = МенеджерПроцесса.РезультатВыполненияЗадачи(ЗадачаПроцесса);
		
		РезультатВыполненияВРегистре =
			РегистрыСведений.РезультатыВыполненияПроцессовИЗадач.РезультатВыполненияПоОбъекту(
				ЗадачаПроцесса.Ссылка);
		Если Не ЗначениеЗаполнено(РезультатВыполненияВРегистре) Тогда
			РезультатВыполненияВРегистре = Неопределено;
		КонецЕсли;
		
		Если РезультатВыполнения <> РезультатВыполненияВРегистре Тогда
			Если ЗначениеЗаполнено(РезультатВыполнения) Тогда
				РегистрыСведений.РезультатыВыполненияПроцессовИЗадач.ЗаписатьРезультатПоОбъекту(
					ЗадачаПроцесса.Ссылка, РезультатВыполнения);
			Иначе
				РегистрыСведений.РезультатыВыполненияПроцессовИЗадач.УдалитьРезультатПоОбъекту(
					ЗадачаПроцесса.Ссылка);
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обновляет результаты выполнения задач процесса в регистре РезультатыВыполненияПроцессовИЗадач
//
// Параметры:
//  Процесс - БизнесПроцессСсылка
//
Процедура ОбновитьРезультатыВыполненияЗадачПроцесса(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерПроцесса = 
		ОбщегоНазначения.МенеджерОбъектаПоСсылке(Процесс);
	
	Если Не МенеджерПроцесса.ЕстьМетодРезультатВыполненияЗадачи() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК ЗадачаПроцесса
		|ПОМЕСТИТЬ ЗадачиПроцессов
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &Процесс
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗадачиПроцессов.ЗадачаПроцесса КАК ЗадачаПроцесса
		|ИЗ
		|	ЗадачиПроцессов КАК ЗадачиПроцессов";
	
	Запрос.УстановитьПараметр("Процесс", Процесс);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных();
	Пока Выборка.Следующий() Цикл
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РезультатыВыполненияПроцессовИЗадач");
		ЭлементБлокировки.УстановитьЗначение("Объект", Выборка.ЗадачаПроцесса);
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка.Заблокировать();
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ЗадачиПроцессов.ЗадачаПроцесса КАК ЗадачаПроцесса,
			|	ЕСТЬNULL(РезультатыВыполненияПроцессовИЗадач.Результат, НЕОПРЕДЕЛЕНО) КАК РезультатВыполнения
			|ИЗ
			|	ЗадачиПроцессов КАК ЗадачиПроцессов
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
			|		ПО ЗадачиПроцессов.ЗадачаПроцесса = РезультатыВыполненияПроцессовИЗадач.Объект";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			РезультатВыполнения = МенеджерПроцесса.РезультатВыполненияЗадачи(
				Выборка.ЗадачаПроцесса);
			
			Если РезультатВыполнения = Выборка.РезультатВыполнения Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РезультатВыполнения) Тогда
				РегистрыСведений.РезультатыВыполненияПроцессовИЗадач.ЗаписатьРезультатПоОбъекту(
					Выборка.ЗадачаПроцесса, РезультатВыполнения);
			Иначе
				РегистрыСведений.РезультатыВыполненияПроцессовИЗадач.УдалитьРезультатПоОбъекту(
					Выборка.ЗадачаПроцесса);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обновляет результат выполнения процесса в регистре РезультатыВыполненияПроцессовИЗадач.
//
// Параметры:
//  Процесс - БизнесПроцессСсылка, БизнесПроцессОбъект
//
Процедура ОбновитьРезультатВыполненияПроцесса(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Процесс)) Тогда
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Процесс, "Ссылка, Завершен");
	Иначе
		РеквизитыПроцесса = Процесс
	КонецЕсли;
	
	МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(РеквизитыПроцесса.Ссылка);
	Если Не МенеджерПроцесса.ЕстьМетодРезультатВыполненияПроцесса() Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РезультатыВыполненияПроцессовИЗадач");
	ЭлементБлокировки.УстановитьЗначение("Объект", РеквизитыПроцесса.Ссылка);
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка.Заблокировать();
		
		Если РеквизитыПроцесса.Завершен Тогда
			РезультатВыполнения = МенеджерПроцесса.РезультатВыполненияПроцесса(РеквизитыПроцесса.Ссылка);
		Иначе
			РезультатВыполнения = Неопределено;
		КонецЕсли;
		
		РезультатВыполненияВРегистре =
			РегистрыСведений.РезультатыВыполненияПроцессовИЗадач.РезультатВыполненияПоОбъекту(РеквизитыПроцесса.Ссылка);
		Если Не ЗначениеЗаполнено(РезультатВыполненияВРегистре) Тогда
			РезультатВыполненияВРегистре = Неопределено;
		КонецЕсли;
		
		Если РезультатВыполнения <> РезультатВыполненияВРегистре Тогда
			Если ЗначениеЗаполнено(РезультатВыполнения) Тогда
				РегистрыСведений.РезультатыВыполненияПроцессовИЗадач.ЗаписатьРезультатПоОбъекту(
					РеквизитыПроцесса.Ссылка, РезультатВыполнения);
			Иначе
				РегистрыСведений.РезультатыВыполненияПроцессовИЗадач.УдалитьРезультатПоОбъекту(
					РеквизитыПроцесса.Ссылка);
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

// Определяет активные точки маршрутиа бизнес-процесса.
//
// Параметры:
//  БизнесПроцесс - БизнесПроцессСсылка - Бизнес-процесс.
// 
// Возвращаемое значение:
//  Массив - из ТочкаМаршрутаБизнесПроцессаСсылка - Активные точки маршрута бизнес-процесса.
//
Функция АктивныеТочкиМаршрута(БизнесПроцесс) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗадачаИсполнителя.ТочкаМаршрута КАК ТочкаМаршрута
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|	И ЗадачаИсполнителя.ИсключенаИзПроцесса = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТочкаМаршрута");
	
КонецФункции

// Возвращает вопросы по задачам.
//
// Параметры:
//  ЗадачиИсполнителей - Массив из ЗадачаСсылка.ЗадачаИсполнителя - Задачи, для которых определяются вопросы выполнения.
//
// Возвращаемое значение:
//   ТаблицаЗначений - Вопросы по задаче.
//    * ЗадачаИсполнителя - ЗадачаСсылка.ЗадачаИсполнителя - Задача, по которой задан вопрос.
//    * Вопрос - БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач - Бизнес-процесс вопроса.
//    * ТекстВопроса - Строка - Текст вопроса.
//    * КтоЗадалВопрос - СправочникСсылка.Пользователи - Кто задал вопрос.
//    * КогдаЗаданВопрос - Дата - Когда был задан вопрос.
//    * КогдаОтветилиНаВопрос - Дата - Когда ответили на вопрос.
//
Функция ВопросыПоЗадачамИсполнителей(ЗадачиИсполнителей) Экспорт
	
	Если ЗадачиИсполнителей.Количество() = 0 Тогда
		
		ВопросыПоЗадачамИсполнителей = Новый ТаблицаЗначений;
		ВопросыПоЗадачамИсполнителей.Колонки.Добавить("ЗадачаИсполнителя");
		ВопросыПоЗадачамИсполнителей.Колонки.Добавить("Вопрос");
		ВопросыПоЗадачамИсполнителей.Колонки.Добавить("ТекстВопроса");
		ВопросыПоЗадачамИсполнителей.Колонки.Добавить("КтоЗадалВопрос");
		ВопросыПоЗадачамИсполнителей.Колонки.Добавить("КогдаЗаданВопрос");
		ВопросыПоЗадачамИсполнителей.Колонки.Добавить("КогдаОтветилиНаВопрос");
		
		Возврат ВопросыПоЗадачамИсполнителей;
		
	Конецесли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РешениеВопросовВыполненияЗадач.ПредметРассмотрения КАК ЗадачаИсполнителя,
		|	РешениеВопросовВыполненияЗадач.Ссылка КАК Вопрос,
		|	РешениеВопросовВыполненияЗадач.Описание КАК ТекстВопроса,
		|	РешениеВопросовВыполненияЗадач.Автор КАК КтоЗадалВопрос,
		|	РешениеВопросовВыполненияЗадач.ДатаНачала КАК КогдаЗаданВопрос,
		|	РешениеВопросовВыполненияЗадач.ДатаЗавершения КАК КогдаОтветилиНаВопрос
		|ИЗ
		|	БизнесПроцесс.РешениеВопросовВыполненияЗадач КАК РешениеВопросовВыполненияЗадач
		|ГДЕ
		|	РешениеВопросовВыполненияЗадач.ПредметРассмотрения В(&ЗадачиИсполнителей)
		|	И РешениеВопросовВыполненияЗадач.ВидВопроса = ЗНАЧЕНИЕ(Перечисление.ВидыВопросовВыполненияЗадач.Иное)
		|	И РешениеВопросовВыполненияЗадач.ПометкаУдаления = ЛОЖЬ");
		
	Запрос.УстановитьПараметр("ЗадачиИсполнителей", ЗадачиИсполнителей);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает все задачи исполнителей процесса, со всех точек маршрута.
//
// Параметры:
//  БизнесПроцесс - БизнесПроцессСсылка - Бизнес-процесс.
// 
// Возвращаемое значение:
//  Массив из ЗадачаСсылка.ЗадачаИсполнителя - Все задачи исполнителей процесса.
//
Функция ВсеЗадачиИсполнителейПроцесса(БизнесПроцесс) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка КАК ЗадачаИсполнителя
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЗадачаИсполнителя");
	
КонецФункции

// Возвращает все не помеченные на удаление задачи переданных процессов.
//
// Параметры:
//  Процессы - Массив из БизнесПроцессСсылка.
//
// Возвращаемое значение:
//  Массив из ЗадачаИсполнителя
//
Функция ВсеЗадачиПроцессов(Процессы) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка КАК ЗадачаПроцесса
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс В (&Процессы)
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("Процессы", Процессы);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЗадачаПроцесса");
	
КонецФункции

// Определяет задачи точки маршрута.
//
// Параметры:
//  БизнесПроцесс - БизнесПроцессСсылка - Бизнес-процесс.
//  ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка - Точка маршрута.
// 
// Возвращаемое значение:
//  Массив из ЗадачаСсылка.ЗадачаИсполнителя - Задачи точки маршрута.
//
Функция ЗадачиТочкиМаршрута(БизнесПроцесс, ТочкаМаршрута) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка КАК ЗадачаТочкиМаршрута
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.ИсключенаИзПроцесса = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЗадачаТочкиМаршрута");
	
КонецФункции

// Возвращает запросы на перенос срока задач.
//
// Параметры:
//  ЗадачиИсполнителей - Массив из ЗадачаСсылка.ЗадачаИсполнителя - Задачи, для которых определяются запросы на перенос срока.
//
// Возвращаемое значение:
//   ТаблицаЗначений - Вопросы по задаче.
//    * ЗадачаИсполнителя - ЗадачаСсылка.ЗадачаИсполнителя - Задача, по которой задан вопрос.
//    * ЗапросНаПереносСрока - БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач - Запрос на перенос срока.
//    * ОбоснованиеЗапроса - Строка - Обоснование запроса.
//    * КтоНаправилЗапрос - СправочникСсылка.Пользователи - Кто направил запрос.
//    * КогдаНаправленЗапрос - Дата - Когда был направлен запрос.
//    * КогдаОтветилиНаЗапрос - Дата - Когда ответили на запрос.
//
Функция ЗапросыНаПереносСрокаЗадач(ЗадачиИсполнителей) Экспорт
	
	Если ЗадачиИсполнителей.Количество() = 0 Тогда
		
		ВопросыПоЗадачамИсполнителей = Новый ТаблицаЗначений;
		ВопросыПоЗадачамИсполнителей.Колонки.Добавить("ЗадачаИсполнителя");
		ВопросыПоЗадачамИсполнителей.Колонки.Добавить("ЗапросНаПереносСрока");
		ВопросыПоЗадачамИсполнителей.Колонки.Добавить("ОбоснованиеЗапроса");
		ВопросыПоЗадачамИсполнителей.Колонки.Добавить("КтоНаправилЗапрос");
		ВопросыПоЗадачамИсполнителей.Колонки.Добавить("КогдаНаправленЗапрос");
		ВопросыПоЗадачамИсполнителей.Колонки.Добавить("КогдаОтветилиНаЗапрос");
		
		Возврат ВопросыПоЗадачамИсполнителей;
		
	Конецесли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РешениеВопросовВыполненияЗадач.ПредметРассмотрения КАК ЗадачаИсполнителя,
		|	РешениеВопросовВыполненияЗадач.Ссылка КАК ЗапросНаПереносСрока,
		|	РешениеВопросовВыполненияЗадач.Описание КАК ОбоснованиеЗапроса,
		|	РешениеВопросовВыполненияЗадач.Автор КАК КтоНаправилЗапрос,
		|	РешениеВопросовВыполненияЗадач.ДатаНачала КАК КогдаНаправленЗапрос,
		|	РешениеВопросовВыполненияЗадач.ДатаЗавершения КАК КогдаОтветилиНаЗапрос
		|ИЗ
		|	БизнесПроцесс.РешениеВопросовВыполненияЗадач КАК РешениеВопросовВыполненияЗадач
		|ГДЕ
		|	РешениеВопросовВыполненияЗадач.ПредметРассмотрения В(&ЗадачиИсполнителей)
		|	И РешениеВопросовВыполненияЗадач.ВидВопроса = ЗНАЧЕНИЕ(Перечисление.ВидыВопросовВыполненияЗадач.ПереносСрока)
		|	И РешениеВопросовВыполненияЗадач.ПометкаУдаления = ЛОЖЬ");
		
	Запрос.УстановитьПараметр("ЗадачиИсполнителей", ЗадачиИсполнителей);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает ожидающие выполнения задачи исполнителей процесса, со всех точек маршрута.
//
// Параметры:
//  БизнесПроцесс - БизнесПроцессСсылка - Бизнес-процесс.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Ожидающие выполнения задачи исполнителей процесса.
//   * ЗадачаИсполнителя - ЗадачаСсылка.ЗадачаИсполнителя - Задача исполнителя.
//   * ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка - Точка маршрута задачи.
//   * ТекущийИсполнитель - СправочникСсылка.ПолныеРоли, СправочникСсылка.Пользователи - Текущий исполнитель задачи.
//   * ПринятаКИсполнению - Булево - Задача принята к исполнению.
//   * Дата - Дата - Дата задачи.
//
Функция ОжидающиеВыполненияЗадачиИсполнителейПроцесса(БизнесПроцесс) Экспорт
	
	Если Не ЗначениеЗаполнено(БизнесПроцесс) Тогда
		
		ОжидающиеВыполненияЗадачиИсполнителейПроцесса = Новый ТаблицаЗначений;
		ОжидающиеВыполненияЗадачиИсполнителейПроцесса.Колонки.Вставить("ЗадачаИсполнителя");
		ОжидающиеВыполненияЗадачиИсполнителейПроцесса.Колонки.Вставить("ТочкаМаршрута");
		ОжидающиеВыполненияЗадачиИсполнителейПроцесса.Колонки.Вставить("ТекущийИсполнитель");
		ОжидающиеВыполненияЗадачиИсполнителейПроцесса.Колонки.Вставить("ПринятаКИсполнению");
		ОжидающиеВыполненияЗадачиИсполнителейПроцесса.Колонки.Вставить("Дата");
		
		Возврат ОжидающиеВыполненияЗадачиИсполнителейПроцесса;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка КАК ЗадачаИсполнителя,
		|	ЗадачаИсполнителя.ТочкаМаршрута КАК ТочкаМаршрута,
		|	ЗадачаИсполнителя.ТекущийИсполнитель КАК ТекущийИсполнитель,
		|	ЗадачаИсполнителя.ПринятаКИсполнению КАК ПринятаКИсполнению,
		|	ЗадачаИсполнителя.Дата КАК Дата
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.ИсключенаИзПроцесса = ЛОЖЬ
		|	И ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)");
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Определяет последнюю задачу точки маршрута.
//
// Параметры:
//  БизнесПроцесс - БизнесПроцессСсылка - Бизнес-процесс.
//  ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка - Точка маршрута.
// 
// Возвращаемое значение:
//  ЗадачаСсылка.ЗадачаИсполнителя - Последняя задача точки маршрута.
//
Функция ПоследняяЗадачаТочкиМаршрута(БизнесПроцесс, ТочкаМаршрута) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЗадачаИсполнителя.Ссылка КАК ПоследняяЗадача
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.ИсключенаИзПроцесса = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗадачаИсполнителя.Дата УБЫВ");
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.ПоследняяЗадача, Задачи.ЗадачаИсполнителя.ПустаяСсылка());
	
КонецФункции

// Определяет, приняты ли к исполнению точки маршрута.
//
// Параметры:
//  БизнесПроцесс - БизнесПроцессСсылка - Бизнес-процесс.
//  ТочкиМаршрута - Массив из ТочкаМаршрутаБизнесПроцессаСсылка - Точки маршрута.
// 
// Возвращаемое значение:
//  Массив из ЗадачаСсылка.ЗадачаИсполнителя - Определяет, приняты ли к исполнению точки маршрута.
//
Функция ТочкиМаршрутаНеПринятыКИсполнению(БизнесПроцесс, ТочкиМаршрута) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЗадачаИсполнителя.Ссылка КАК ЗадачаИсполнителя
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.ТочкаМаршрута В(&ТочкиМаршрута)
		|	И ЗадачаИсполнителя.ПринятаКИсполнению = ЛОЖЬ
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|	И ЗадачаИсполнителя.ИсключенаИзПроцесса = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкиМаршрута", ТочкиМаршрута);
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

// Заполняет бизнес-процесс по задаче, общая логика для всех процессов.
//
// Параметры:
//  ПроцессОбъект - БизнесПроцессОбъект            - Бизнес-процесс.
//  ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - Задача
//
Процедура ЗаполнитьБизнесПроцессПоЗадаче(ПроцессОбъект, ЗадачаСсылка) Экспорт
	
	Мультипредметность.ЗаполнитьПредметыПроцессаПоЗадаче(ПроцессОбъект, ЗадачаСсылка);
	СкопироватьЗначенияДопРеквизитов(ЗадачаСсылка, ПроцессОбъект);
	
	ПроцессОбъект.Проект = ЗадачаСсылка.Проект;
	ПроцессОбъект.ПроектнаяЗадача = ЗадачаСсылка.ПроектнаяЗадача;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПроцессОбъект, "Описание") Тогда
		
		ОписаниеЗаполненоПоШаблону = Ложь;
		Если ЗначениеЗаполнено(ПроцессОбъект.Описание)
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПроцессОбъект, "Шаблон")
			И ЗначениеЗаполнено(ПроцессОбъект.Шаблон) Тогда
			
			ОписаниеИзШаблона = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				ПроцессОбъект.Шаблон,
				"Описание");
			
			ОписаниеЗаполненоПоШаблону = (ПроцессОбъект.Описание = ОписаниеИзШаблона);
			
		КонецЕсли;
		Если ОписаниеЗаполненоПоШаблону Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗадачаСсылка.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить
			Или ЗадачаСсылка.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться
			Или ЗадачаСсылка.ТочкаМаршрута = БизнесПроцессы.Приглашение.ТочкиМаршрута.Оповестить
			Или ЗадачаСсылка.ТочкаМаршрута = БизнесПроцессы.Регистрация.ТочкиМаршрута.Ознакомиться
			Или ЗадачаСсылка.ТочкаМаршрута = БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута.ОзнакомлениеСРезультатомРассмотрения
			Или ЗадачаСсылка.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться
			Или ЗадачаСсылка.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться
			Или ЗадачаСсылка.ТочкаМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута.ОбработатьРезультат Тогда
			
			ПроцессОбъект.Описание = РаботаСЗадачами.ИсторияВыполненияПоИсточнику(ЗадачаСсылка.БизнесПроцесс);
			
		ИначеЕсли ЗадачаСсылка.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться Тогда
			
			ПроцессОбъект.Описание = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				ЗадачаСсылка.БизнесПроцесс,
				"Резолюция");
			
		Иначе
			
			ПроцессОбъект.Описание = ЗадачаСсылка.Описание;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//Выполняет копирование значений доп.реквизитов из объекта-источника в объект-приемник
//Копируются значения совпадающих доп.реквизитов.
Процедура СкопироватьЗначенияДопРеквизитов(ИсточникОбъект, ПриемникОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МетаданныеИсточника = ИсточникОбъект.Метаданные();
	
	Если ИсточникОбъект = Неопределено
		ИЛИ МетаданныеИсточника.ТабличныеЧасти.Найти("ДополнительныеРеквизиты") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ИсточникОбъект)) Тогда
		
		ЕстьТаблицаПредметы = МетаданныеИсточника.ТабличныеЧасти.Найти("Предметы") <> Неопределено;
		
		СтрокаРеквизитов = "Ссылка, ДополнительныеРеквизиты";
		
		Если ЕстьТаблицаПредметы Тогда
			СтрокаРеквизитов = СтрокаРеквизитов + ", Предметы";
		КонецЕсли;
		
		РеквизитыИсточника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ИсточникОбъект, СтрокаРеквизитов);
			
		Если ЗначениеЗаполнено(РеквизитыИсточника.ДополнительныеРеквизиты) Тогда
			РеквизитыИсточника.ДополнительныеРеквизиты = РеквизитыИсточника.ДополнительныеРеквизиты.Выгрузить();
		Иначе
			РеквизитыИсточника.ДополнительныеРеквизиты = Новый ТаблицаЗначений;
		КонецЕсли;
		
		Если ЕстьТаблицаПредметы Тогда
			Если ЗначениеЗаполнено(РеквизитыИсточника.Предметы) Тогда
				РеквизитыИсточника.Предметы = РеквизитыИсточника.Предметы.Выгрузить();
			Иначе
				РеквизитыИсточника.Предметы = Новый ТаблицаЗначений;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		РеквизитыИсточника = ИсточникОбъект;
	КонецЕсли;
	
	ТаблицаДопРеквизитов = Новый ТаблицаЗначений;
	ТаблицаДопРеквизитов.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблицаДопРеквизитов.Колонки.Добавить("Значение");
	
	Если ТипЗнч(ПриемникОбъект) = Тип("ДанныеФормыСтруктура") Тогда
		ДоступныеНаборыСвойствЗадачи = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(ПриемникОбъект.Ссылка);	
	Иначе
		ДоступныеНаборыСвойствЗадачи = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(ПриемникОбъект);
	КонецЕсли;
	
	Для Каждого Реквизит Из РеквизитыИсточника.ДополнительныеРеквизиты Цикл
		Для Каждого ДоступныйНабор Из ДоступныеНаборыСвойствЗадачи Цикл
			Для Каждого СтрокаТабЧасти ИЗ ДоступныйНабор.Набор.ДополнительныеРеквизиты Цикл
				СтруктураПоиска = Новый Структура("Свойство", СтрокаТабЧасти.Свойство);
				Если ТаблицаДопРеквизитов.НайтиСтроки(СтруктураПоиска).Количество() = 0 
					И Реквизит.Свойство = СтрокаТабЧасти.Свойство Тогда
					НоваяСтрока = ТаблицаДопРеквизитов.Добавить();
					НоваяСтрока.Свойство = СтрокаТабЧасти.Свойство;
					НоваяСтрока.Значение = Реквизит.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ДопРеквизит Из ТаблицаДопРеквизитов Цикл
		СтруктураПоиска = Новый Структура("Свойство", ДопРеквизит.Свойство);
		НайденныеСтроки = ПриемникОбъект.ДополнительныеРеквизиты.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда 
			СтрокаСвойства = НайденныеСтроки[0];
		Иначе
			СтрокаСвойства = ПриемникОбъект.ДополнительныеРеквизиты.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаСвойства, ДопРеквизит, "Свойство,Значение");
	КонецЦикла;

	//для задач дополнительно обрабатывается предмет бизнес-процесса
	Если ТипЗнч(ПриемникОбъект.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
		И  БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(РеквизитыИсточника.Ссылка)) Тогда
		// Заполним свойства по всем предметам начиная с первого
		Для каждого СтрокаПредмета из РеквизитыИсточника.Предметы Цикл
			Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
				СкопироватьЗначенияДопРеквизитов(СтрокаПредмета.Предмет, ПриемникОбъект);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//Возвращает список значений всех задач по указанному бизнес-процессу
Функция ПолучитьМассивЗадачПоБизнесПроцессу(БизнесПроцессСсылка, ВПривилегированномРежиме = Ложь) Экспорт
	
	Если ВПривилегированномРежиме Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс." + БизнесПроцессСсылка.Метаданные().Имя + ".Точки КАК ТочкиМаршрута
		|		ПО ЗадачаИсполнителя.ТочкаМаршрута = ТочкиМаршрута.Ссылка
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс";

	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцессСсылка);		
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

//Возвращает массив ссылок на бизнес-процессы, подчиненные указанной задаче
Функция ПолучитьПодчиненныеЗадачеБизнесПроцессы(ЗадачаСсылка, РеквизитПоиска, ВПривилегированномРежиме = Ложь) Экспорт
	
	Если ВПривилегированномРежиме Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
		
	Результат = Новый Массив;
	Для Каждого ТипБизнесПроцесса Из Метаданные.БизнесПроцессы Цикл
		
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(	
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БизнесПроцесс.Ссылка
			|ИЗ
			|	БизнесПроцесс.%1 КАК БизнесПроцесс
			|ГДЕ
			|	БизнесПроцесс.%2 = &ЗадачаПараметр",
			ТипБизнесПроцесса.Имя, РеквизитПоиска);
			
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ЗадачаПараметр", ЗадачаСсылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.Добавить(Выборка.Ссылка);
		КонецЦикла;
			
	КонецЦикла;	

	Возврат Результат;
	
КонецФункции

// Записывает процесс с указанным видом записи.
// Вид записи определяет, какие обработчики будут выполняться перед и при записи шаблона.
//
// Но при этом есть ряд обязательных обработчиков, которые выполняются всегда.
// В таких обработчиках нет проверки дополнительного свойства ВидЗаписи.
//
// Параметры:
//   ПроцессОбъект - БизнесПроцессСсылка
//   ВидЗаписи - Строка - может принимать значения:
//                           ПростаяЗапись - запись процесса с отключением обработчиков при/перед записью.
//                           ЗаписьСОбновлениемРезультатаВыполнения - запись процесса только с обновлением РС РезультатыВыполненияПроцессовИЗадач
//                           ЗаписьСОбновлениемОбщегоСпискаПроцессов - запись процесса только с обновлением РС ДанныеБизнесПроцессов и контроля.
//                           ЗаписьС_ОбновлениемОбщегоСпискаПроцессовИРезультатовВыполнения_ЗаполнениемУИДИсполнителей - запись процесса только с обновлением
//                                     РС РезультатыВыполненияПроцессовИЗадач и ДанныеБизнесПроцессов и заполнением УИД исполнителей в процессе Исполнение и контроля.
//                           ЗаписьСОбработкойВыполненияЗадачи - запись процесса при выполнении задачи. Используется в случае если при выполнении задачи необходимо
//                                     записать результаты по выполнения в таб. части процесса.
//                           ЗаписьСОбновлением_Предметов_ПредметовЗадач_Проекта_ОбщегоСпискаПроцессов_РабочихГруппПредметов_РабочихГруппПроцессов_ДопРеквизитовПоПредметам - 
//                                     запись поцесса с:
//                                        обновлением таб. частей ПредметыЗадач (только для процессов обработки вн/вх/исх документов и вопросов выполнения задача),
//                                        добавлением новых предметов (только для КП),
//                                        обновлением РС ДанныеБизнесПроцессов.
//                                        обновлением контроля.
//                                        обновлением предметов невыполенных задач
//                           ЗаписьСОбновлениемОбщегоСпискаИПереносомСроковВИерархииПроцессов - запись процесса с обновлением регистра ДанныеБизнесПроцессов
//                                      и с изменением сроков исполнения у зависимых процессов/шаблонов и контроля.
//
Процедура ЗаписатьПроцесс(ПроцессОбъект, ВидЗаписи) Экспорт
	
	ПроцессОбъект.ДополнительныеСвойства.Вставить("ВидЗаписи", ВидЗаписи);
	ПроцессОбъект.Записать();
	ПроцессОбъект.ДополнительныеСвойства.Удалить("ВидЗаписи");
	
КонецПроцедуры

// Определяет, нужно ли обновить контроль по виду записи.
//
// Параметры:
//  ВидЗаписи - Строка - Вид записи. См. РаботаСБизнесПроцессами.ЗаписатьПроцесс().
// 
// Возвращаемое значение:
//  Булево - Это вид записи обновления контроля.
//
Функция ЭтоВидЗаписиОбновленияКонтроля(ВидЗаписи) Экспорт
	
	Возврат ВидЗаписи = "ЗаписьСОбновлениемОбщегоСпискаПроцессов"
		Или ВидЗаписи = "ЗаписьС_ОбновлениемОбщегоСпискаПроцессовИРезультатовВыполнения_ЗаполнениемУИДИсполнителей"
		Или ВидЗаписи = "ЗаписьСОбновлением_Предметов_ПредметовЗадач_Проекта_ОбщегоСпискаПроцессов_РабочихГруппПредметов_РабочихГруппПроцессов_ДопРеквизитовПоПредметам"
		Или ВидЗаписи = "ЗаписьСОбновлениемОбщегоСпискаИПереносомСроковВИерархииПроцессов";
	
КонецФункции

// Записывает задачу с указанным видом записи.
// Вид записи определяет, какие обработчики будут выполняться перед и при записи шаблона.
//
// Но при этом есть ряд обязательных обработчиков, которые выполняются всегда.
// В таких обработчиках нет проверки дополнительного свойства ВидЗаписи.
//
// Параметры:
//   ЗадачаОбъект - ЗадачаСсылка
//   ВидЗаписи - Строка - может принимать значения:
//                            ПростаяЗапись - запись задачи с отключением обработчиков при/перед записью.
//                            ЗаписьСОбновлением_МоихДокументов_КешаИнформацииОбОбъектах_ВизСогласования_ПредметовПодчиненныхПроцессов_ДопРеквизитовПоПредметам_СобытийИзмененияПредметов -
//                                            запись задачи с обновлением только:
//                                                   регистра сведений МоиДокументы
//                                                   регистра сведений КешИнформацииОбОбъектах
//                                                   справочника ВизыСогласования
//                                                   табличных частей Предметы и ПредметыЗадач подчиненных процессов
//                                                   дополнительных реквизитов задачи заполенных из предметов
//                                                   регистрацией факта изменения предметов
//
Процедура ЗаписатьЗадачу(ЗадачаОбъект, ВидЗаписи) Экспорт
	
	ЗадачаОбъект.ДополнительныеСвойства.Вставить("ВидЗаписи", ВидЗаписи);
	ЗадачаОбъект.Записать();
	ЗадачаОбъект.ДополнительныеСвойства.Удалить("ВидЗаписи");
	
КонецПроцедуры

// Возвращает признак добаления наименования предметов
// к наименованию процесса по настройке шаблона.
//
// Параметры:
//  Возвращаемое значение:
//   Процесс - БизнесПроцессОбъект
//
// Возвращаемое значение:
//  Булево
// 
Функция ДобавлятьНаименованиеПредмета(Процесс) Экспорт
	
	ДобавлятьНаименованиеПредмета = Истина;
	
	Если ЗначениеЗаполнено(Процесс.Шаблон) Тогда
		ДобавлятьНаименованиеПредмета = ОбщегоНазначенияДокументооборот.
			ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				Процесс.Шаблон, "ДобавлятьНаименованиеПредмета");
	КонецЕсли;
	
	Возврат ДобавлятьНаименованиеПредмета;
	
КонецФункции

// Возвращает автора процесса/задачи.
// Если процесс/задача являются частью комплексного или составного процесса,
// то возвращает автор головного процесса.
//
// Параметры:
//  Объект - БизнесПроцессОбъект,
//           ЗадачаОбъект,
//           БизнесПроцессСсылка,
//           ЗадачаСсылка - задача/процесс.
//
// Возвращаемое значение:
//  СправочникСсылка.Пользователи - автор.
//
Функция АвторПроцессаЗадачи(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипОбъекта = ТипЗнч(Объект);
	
	ЭтоСсылка = ОбщегоНазначения.ЭтоСсылка(ТипОбъекта);
	
	Если ТипОбъекта = Тип("ЗадачаОбъект.ЗадачаИсполнителя")
		Или ТипОбъекта = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		Если ЭтоСсылка Тогда
			ПроцессЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Объект, "БизнесПроцесс");
				
			РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ПроцессЗадачи, "ВедущаяЗадача, Автор");
		Иначе
			РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Объект.БизнесПроцесс, "ВедущаяЗадача, Автор");
		КонецЕсли;
			
		ВедущаяЗадача = РеквизитыПроцесса.ВедущаяЗадача;
		Автор = РеквизитыПроцесса.Автор;
	Иначе
		Если ЭтоСсылка Тогда
			РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Объект, "ВедущаяЗадача, Автор");
				
			ВедущаяЗадача = РеквизитыПроцесса.ВедущаяЗадача;
			Автор = РеквизитыПроцесса.Автор;
		Иначе
			ВедущаяЗадача = Объект.ВедущаяЗадача;
			Автор = Объект.Автор;
		КонецЕсли;
	КонецЕсли;
	
	Пока ЗначениеЗаполнено(ВедущаяЗадача) Цикл
		ВедущийПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедущаяЗадача, "БизнесПроцесс");
		
		РеквизитыВедущегоПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ВедущийПроцесс, "Автор, ВедущаяЗадача");
			
		ВедущаяЗадача = РеквизитыВедущегоПроцесса.ВедущаяЗадача;
		Автор = РеквизитыВедущегоПроцесса.Автор;
	КонецЦикла;
	
	Возврат Автор;
	
КонецФункции

// Возвращает признак фонового выполнения процесса.
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоФоновоеВыполнениеПроцесса() Экспорт
	
	ФоновоеЗадание = ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание();
	
	Если ФоновоеЗадание = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ФоновоеЗадание.ИмяМетода = "ДиспетчерОбработкиОчередиЗаданийПолныеПрава.ОбработкаЗаданияИзОчереди"
		Или ФоновоеЗадание.ИмяМетода = "СтартПроцессовСервер.СтартОтложенныхПроцессов"
		Или ФоновоеЗадание.ИмяМетода = "ВыполнениеЗадачПоПочтеСервер.ВыполнитьЗадачиПоПочте"
		Или ФоновоеЗадание.ИмяМетода = "ЭскалацияЗадач.ЭскалацияЗадач";
	
КонецФункции

// Устанавливает состояние процессу перед записью из формы объекта.
//
// Параметры:
//  ПроцессОбъект - БизнесПроцессОбъект - объект в обработчике ПередЗаписьюНаСервере.
//  ПараметрыЗаписи - Структура - структура параметров записи.
//
Процедура УстановитьСостояниеПроцессуПередЗаписьюИзФормыОбъекта(
	ПроцессОбъект, ПараметрыЗаписи) Экспорт
	
	Если ПараметрыЗаписи.Свойство("ИзменениеСостоянияПроцесса")
		И ПараметрыЗаписи.ИзменениеСостоянияПроцесса
		И ПараметрыЗаписи.Свойство("НовоеСостояние") Тогда
		
		ПроцессОбъект.Состояние = ПараметрыЗаписи.НовоеСостояние;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопированииБизнесПроцесса(ОбъектКопирования) Экспорт
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ОбъектКопирования.Ссылка);
	
	Если Не МенеджерОбъекта.МожетЗапускатьсяИнтерактивно() Тогда
		ВызватьИсключение НСтр("ru = 'Бизнес процесс не может быть скопирован, поскольку данный тип процесса не может создаваться интерактивно.'");
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак актуальности выполнения процесса.
// 
// Параметры:
// 	Процесс - БизнесПроцессОбъект
// 	
// Возвращаемое значение:
//  Булево
// 	
Функция ВыполнениеПроцессаАктуально(Процесс) Экспорт
	
	Возврат Процесс.Состояние <> Перечисления.СостоянияБизнесПроцессов.Прерван
		И Не Процесс.Завершен;
	
КонецФункции

// Устарело. Использовать РаботаСБизнесПроцессами.ЭтоБизнесПроцессОбъект.
//
// Параметры:
//   Процесс - БизнесПроцессОбъект
// 
// Возвращаемое значение:
//  Булево 
// 
Функция ЭтоБизнесПроцесс(Процесс) Экспорт
	
	Возврат ЭтоБизнесПроцессОбъект(Процесс);
	
КонецФункции

// Определяет является ли переданный объект БизнесПроцессом.
//
// Параметры:
//   Процесс - БизнесПроцессОбъект
// 
// Возвращаемое значение:
//  Булево
//
Функция ЭтоБизнесПроцессОбъект(Процесс) Экспорт
	
	ТипОбъекта = ТипЗнч(Процесс);
	
	Возврат ТипОбъекта = Тип("БизнесПроцессОбъект.Исполнение")
		Или ТипОбъекта = Тип("БизнесПроцессОбъект.КомплексныйПроцесс")
		Или ТипОбъекта = Тип("БизнесПроцессОбъект.Ознакомление")
		Или ТипОбъекта = Тип("БизнесПроцессОбъект.Приглашение")
		Или ТипОбъекта = Тип("БизнесПроцессОбъект.Рассмотрение")
		Или ТипОбъекта = Тип("БизнесПроцессОбъект.Регистрация")
		Или ТипОбъекта = Тип("БизнесПроцессОбъект.РешениеВопросовВыполненияЗадач")
		Или ТипОбъекта = Тип("БизнесПроцессОбъект.Согласование")
		Или ТипОбъекта = Тип("БизнесПроцессОбъект.Утверждение")
		Или ТипОбъекта = Тип("БизнесПроцессОбъект.Подписание");
	
КонецФункции

// Определяет является ли переданный ссылкой на БизнесПроцесс.
// 
// Параметры:
//  Процесс - БизнесПроцессСсылка
// 
// Возвращаемое значение:
//  Булево
// 
Функция ЭтоБизнесПроцессСсылка(Процесс) Экспорт
	
	ТипОбъекта = ТипЗнч(Процесс);
	
	Возврат ТипОбъекта = Тип("БизнесПроцессСсылка.Исполнение")
		Или ТипОбъекта = Тип("БизнесПроцессСсылка.КомплексныйПроцесс")
		Или ТипОбъекта = Тип("БизнесПроцессСсылка.Ознакомление")
		Или ТипОбъекта = Тип("БизнесПроцессСсылка.Приглашение")
		Или ТипОбъекта = Тип("БизнесПроцессСсылка.Рассмотрение")
		Или ТипОбъекта = Тип("БизнесПроцессСсылка.Регистрация")
		Или ТипОбъекта = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач")
		Или ТипОбъекта = Тип("БизнесПроцессСсылка.Согласование")
		Или ТипОбъекта = Тип("БизнесПроцессСсылка.Утверждение")
		Или ТипОбъекта = Тип("БизнесПроцессСсылка.Подписание");
	
КонецФункции

// Удаляет и создает новые записи в РС ДочерниеБизнесПроцессы для бизнес процесса.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект - объект процесса для обновления.
//
Процедура ОбновитьСведенияОДочернемПроцессе(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегистрыСведений.ДочерниеБизнесПроцессы.Удалить(Процесс.Ссылка);
	РегистрыСведений.ДочерниеБизнесПроцессы.Добавить(Процесс.Ссылка, Процесс.ВедущаяЗадача);
	РегистрыСведений.ДочерниеБизнесПроцессы.Добавить(Процесс.Ссылка, Процесс.ГлавнаяЗадача);
	
КонецПроцедуры

// Возвращает результаты выполнения задач процессов.
//
// Параметры:
//  ЗадачиПроцессов - Массив из ЗадачаСсылка.ЗадачаИсполнителя
//
// Возвращаемое значение:
//  Соответствие:
//   * Ключ - ЗадачаСсылка.ЗадачаИсполнителя
//   * Значение - Строка
//
Функция РезультатыВыполненияЗадачПроцессов(ЗадачиПроцессов) Экспорт
	
	РезультатыВыполнения = Новый Соответствие();
	
	Если ОбработкаОчередиЗаданийСервер.ОбработатьПолучениеРезультатовВыполненияЗадачПроцессов(
		ЗадачиПроцессов, РезультатыВыполнения) Тогда
		
		Возврат РезультатыВыполнения;
	КонецЕсли;
	
	// Стандартный способ получения результатов выполнения задач.
	РезультатыВыполнения = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		ЗадачиПроцессов, "РезультатВыполнения");
	Возврат РезультатыВыполнения;
	
КонецФункции

// Возвращает данные принятия к исполнению задач процессов.
//
// Параметры:
//  ЗадачиПроцессов - Массив из ЗадачаСсылка.ЗадачаИсполнителя
//
// Возвращаемое значение:
//  Соответствие:
//   * Ключ - ЗадачаСсылка.ЗадачаИсполнителя
//   * Значение - Структура
//     ** ПринятаКИсполнению - Булеов.
//     ** ДатаПринятияКИсполнению - Дата.
//
Функция ДанныеПринятияКИсполнению(ЗадачиПроцессов) Экспорт
	
	ДанныеЗадач = Новый Соответствие();
	
	Если ОбработкаОчередиЗаданийСервер.ОбработатьПолучениеДанныеПринятияКИсполнениюЗадачПроцессов(
		ЗадачиПроцессов, ДанныеЗадач) Тогда
		
		Возврат ДанныеЗадач;
	КонецЕсли;
	
	// Стандартный способ получения результатов выполнения задач.
	ДанныеЗадач = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ЗадачиПроцессов, "ПринятаКИсполнению, ДатаПринятияКИсполнению");
	Возврат ДанныеЗадач;
	
КонецФункции

// Возвращает сведения об исполнителях задач процессов.
//
// Параметры:
//  ЗадачиПроцессов - Массив из ЗадачаСсылка.ЗадачаИсполнителя
//
// Возвращаемое значение:
//  Соответствие:
//   * Ключ - ЗадачаСсылка.ЗадачаИсполнителя
//   * Значение - Структура
//     ** Исполнитель - СправочникСсылка.Сотрудники.
//     ** РольИсполнителя - СправочникСсылка.РолиИсполнителей.  
//
Функция СведенияОбИсполнителяхЗадачПроцессов(ЗадачиПроцессов) Экспорт
	
	ДанныеЗадач = Новый Соответствие();
	
	Если ОбработкаОчередиЗаданийСервер.ОбработатьПолучениеСведенийОбИсполнителяхЗадачПроцессов(
		ЗадачиПроцессов, ДанныеЗадач) Тогда
		
		Возврат ДанныеЗадач;
	КонецЕсли;
	
	// Стандартный способ получения результатов выполнения задач.
	ДанныеЗадач = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ЗадачиПроцессов, "Исполнитель, РольИсполнителя");
	Возврат ДанныеЗадач;
	
КонецФункции

// Возвращает признак актуальности задачи процесса.
//
// Параметры:
//  ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя
//
Функция ЗадачаПроцессаАктуальна(ЗадачаПроцесса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыЗадачиПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЗадачаПроцесса, "Выполнена, СостояниеБизнесПроцесса");
	
	Возврат Не РеквизитыЗадачиПроцесса.Выполнена
		И РеквизитыЗадачиПроцесса.СостояниеБизнесПроцесса <> Перечисления.СостоянияБизнесПроцессов.Прерван;
	
КонецФункции

#Область РабочиеГруппы

// Добавляет участников процесса/шаблона процесса в переданную таблицу
//
// Параметры:
//  ТаблицаНабора - ТаблицаЗначений - см. РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников
//  Объект - БизнесПроцессОбъект.Исполнение
//           БизнесПроцессСсылка.Исполнение
//           СправочникОбъект.ШаблоныИсполнения
//           СправочникСсылка.ШаблоныИсполнения - ссылка или объект процесса исполнения или его шаблона.
//
Процедура ДобавитьУчастниковИсполненияВТаблицу(ТаблицаНабора, Объект) Экспорт
	
	ТипПроцесса = ТипЗнч(Объект);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипПроцесса) Тогда
		
		БизнесПроцессРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект,
			"Автор,
			|Контролер,
			|Проверяющий");
			
		СсылкаНаПроцесс = Объект;
			
	Иначе
		
		БизнесПроцессРеквизиты = Новый Структура;
		БизнесПроцессРеквизиты.Вставить(
			"Автор", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"Контролер", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"Проверяющий", Неопределено);
		
		ЗаполнитьЗначенияСвойств(БизнесПроцессРеквизиты, Объект);
		
		СсылкаНаПроцесс = Объект.Ссылка;
		
	КонецЕсли;
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, БизнесПроцессРеквизиты.Автор);
		
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
		ТаблицаНабора,
		БизнесПроцессРеквизиты.Контролер);
		
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
		ТаблицаНабора,
		БизнесПроцессРеквизиты.Проверяющий);
	
	РаботаСРабочимиГруппами.ДобавитьУчастниковПоТабличнойЧастиБизнесПроцесса(ТаблицаНабора, Объект, "Исполнители");
	
	// Добавление контролеров
	Если Не ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(СсылкаНаПроцесс) Тогда
		Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, СсылкаНаПроцесс);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет участников процесса/шаблона процесса в переданную таблицу
//
// Параметры:
//  ТаблицаНабора - ТаблицаЗначений - см. РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников
//  Объект - БизнесПроцессОбъект.КомплексныйПроцесс
//           БизнесПроцессСсылка.КомплексныйПроцесс
//           СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов
//           СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов - ссылка или объект комплексного процесса или его шаблона.
//
Процедура ДобавитьУчастниковКомплексногоПроцессаВТаблицу(ТаблицаНабора, Объект) Экспорт
	
	ТипПроцесса = ТипЗнч(Объект);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипПроцесса) Тогда
		
		БизнесПроцессРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект,
			"Автор,
			|Контролер");
			
		СсылкаНаПроцесс = Объект;
			
	Иначе
		
		БизнесПроцессРеквизиты = Новый Структура;
		БизнесПроцессРеквизиты.Вставить(
			"Автор", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"Контролер", Неопределено);
		
		ЗаполнитьЗначенияСвойств(БизнесПроцессРеквизиты, Объект);
		
		СсылкаНаПроцесс = Объект.Ссылка;
		
	КонецЕсли;
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, БизнесПроцессРеквизиты.Автор);
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
		ТаблицаНабора,
		БизнесПроцессРеквизиты.Контролер);
		
	// Добавление контролеров
	Если Не ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(СсылкаНаПроцесс) Тогда
		Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, СсылкаНаПроцесс);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет участников процесса/шаблона процесса в переданную таблицу
//
// Параметры:
//  ТаблицаНабора - ТаблицаЗначений - см. РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников
//  Объект - БизнесПроцессОбъект.Ознакомление
//           БизнесПроцессСсылка.Ознакомление
//           СправочникОбъект.ШаблоныОзнакомления
//           СправочникСсылка.ШаблоныОзнакомления - ссылка или объект процесса ознакомления или его шаблона.
//
Процедура ДобавитьУчастниковОзнакомленияВТаблицу(ТаблицаНабора, Объект) Экспорт
	
	ТипПроцесса = ТипЗнч(Объект);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипПроцесса) Тогда
		
		БизнесПроцессРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, "Автор");
		
		СсылкаНаПроцесс = Объект;
		
	Иначе
		
		БизнесПроцессРеквизиты = Новый Структура;
		БизнесПроцессРеквизиты.Вставить(
			"Автор", Неопределено);
		
		ЗаполнитьЗначенияСвойств(БизнесПроцессРеквизиты, Объект);
		
		СсылкаНаПроцесс = Объект.Ссылка;
		
	КонецЕсли;
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, БизнесПроцессРеквизиты.Автор);
	
	РаботаСРабочимиГруппами.ДобавитьУчастниковПоТабличнойЧастиБизнесПроцесса(ТаблицаНабора, Объект, "Исполнители");
	
	// Добавление контролеров
	Если Не ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(СсылкаНаПроцесс) Тогда
		Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, СсылкаНаПроцесс);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет участников процесса/шаблона процесса в переданную таблицу
//
// Параметры:
//  ТаблицаНабора - ТаблицаЗначений - см. РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников
//  Объект - БизнесПроцессОбъект.Поручение
//           БизнесПроцессСсылка.Поручение
//           СправочникОбъект.ШаблоныПоручения
//           СправочникСсылка.ШаблоныПоручения - ссылка или объект процесса поручения или его шаблона.
//
Процедура ДобавитьУчастниковПорученияВТаблицу(ТаблицаНабора, Объект) Экспорт
	
	ТипПроцесса = ТипЗнч(Объект);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипПроцесса) Тогда
		
		БизнесПроцессРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект,
			"Автор,
			|Исполнитель,
			|Контролер,
			|Проверяющий");
			
		СсылкаНаПроцесс = Объект;
			
	Иначе
		
		БизнесПроцессРеквизиты = Новый Структура;
		БизнесПроцессРеквизиты.Вставить(
			"Автор", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"Исполнитель", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"Контролер", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"Проверяющий", Неопределено);
		
		ЗаполнитьЗначенияСвойств(БизнесПроцессРеквизиты, Объект);
		
		СсылкаНаПроцесс = Объект.Ссылка;
		
	КонецЕсли;
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, БизнесПроцессРеквизиты.Автор);
		
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
		ТаблицаНабора,
		БизнесПроцессРеквизиты.Исполнитель);
		
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
		ТаблицаНабора,
		БизнесПроцессРеквизиты.Контролер);
		
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
		ТаблицаНабора,
		БизнесПроцессРеквизиты.Проверяющий);
		
	// Добавление контролеров
	Если Не ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(СсылкаНаПроцесс) Тогда
		Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, СсылкаНаПроцесс);
	КонецЕсли;
		
КонецПроцедуры

// Добавляет участников процесса/шаблона процесса в переданную таблицу
//
// Параметры:
//  ТаблицаНабора - ТаблицаЗначений - см. РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников
//  Объект - БизнесПроцессОбъект.Приглашение
//           БизнесПроцессСсылка.Приглашение
//           СправочникОбъект.ШаблоныПриглашения
//           СправочникСсылка.ШаблоныПриглашения - ссылка или объект процесса приглашения или его шаблона.
//
Процедура ДобавитьУчастниковПриглашенияВТаблицу(ТаблицаНабора, Объект) Экспорт
	
	ТипПроцесса = ТипЗнч(Объект);
	
	// Добавление автора
	Если ОбщегоНазначения.ЭтоСсылка(ТипПроцесса) Тогда
		
		БизнесПроцессРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект,
			"Автор");
			
		СсылкаНаПроцесс = Объект;
			
	Иначе
		
		БизнесПроцессРеквизиты = Новый Структура;
		БизнесПроцессРеквизиты.Вставить(
			"Автор", Неопределено);
		
		ЗаполнитьЗначенияСвойств(БизнесПроцессРеквизиты, Объект);
		
		СсылкаНаПроцесс = Объект.Ссылка;
		
	КонецЕсли;
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, БизнесПроцессРеквизиты.Автор);
	
	// Добавление таблицы приглашенных лиц
	РаботаСРабочимиГруппами.ДобавитьУчастниковПоТабличнойЧастиБизнесПроцесса(ТаблицаНабора, Объект, "Исполнители");
	
	// Добавление контролеров
	Если Не ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(СсылкаНаПроцесс) Тогда
		Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, СсылкаНаПроцесс);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет участников процесса/шаблона процесса в переданную таблицу
//
// Параметры:
//  ТаблицаНабора - ТаблицаЗначений - см. РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников
//  Объект - БизнесПроцессОбъект.Рассмотрение
//           БизнесПроцессСсылка.Рассмотрение
//           СправочникОбъект.ШаблоныРассмотрения
//           СправочникСсылка.ШаблоныРассмотрения - ссылка или объект процесса рассмотрения или его шаблона.
//
Процедура ДобавитьУчастниковРассмотренияВТаблицу(ТаблицаНабора, Объект) Экспорт
	
	ТипПроцесса = ТипЗнч(Объект);
	
	ЭтоСсылка = ОбщегоНазначения.ЭтоСсылка(ТипПроцесса);
	
	Если ЭтоСсылка Тогда
		СсылкаНаПроцесс = Объект;
	Иначе
		СсылкаНаПроцесс = Объект.Ссылка;
	КонецЕсли;
	
	ЭтоШаблон = ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(СсылкаНаПроцесс);
	
	Если ЭтоШаблон Тогда
		РеквизитыПроцесса = 
			"Автор,
			|Исполнитель";
	Иначе
		РеквизитыПроцесса = 
			"Автор,
			|Исполнитель,
			|КонтролерИсполнения,
			|ОбрабатывающийРезолюцию,
			|ПроверяющийИсполнения";
	КонецЕсли;
	
	Если ЭтоСсылка Тогда
		БизнесПроцессРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект, РеквизитыПроцесса);
	Иначе
		
		БизнесПроцессРеквизиты = Новый Структура(РеквизитыПроцесса);;
		
		ЗаполнитьЗначенияСвойств(БизнесПроцессРеквизиты, Объект);
		
	КонецЕсли;
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
		ТаблицаНабора, БизнесПроцессРеквизиты.Автор);
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
		ТаблицаНабора, БизнесПроцессРеквизиты.Исполнитель);
		
	Если Не ЭтоШаблон Тогда
		
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
			ТаблицаНабора, БизнесПроцессРеквизиты.КонтролерИсполнения);
			
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
			ТаблицаНабора, БизнесПроцессРеквизиты.ПроверяющийИсполнения);
		
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
			ТаблицаНабора, БизнесПроцессРеквизиты.ОбрабатывающийРезолюцию);
			
		РаботаСРабочимиГруппами.ДобавитьУчастниковПоТабличнойЧастиБизнесПроцесса(
			ТаблицаНабора, Объект, "ИсполнителиИсполнения");
			
		// Добавление контролеров
		Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, СсылкаНаПроцесс);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет участников процесса/шаблона процесса в переданную таблицу
//
// Параметры:
//  ТаблицаНабора - ТаблицаЗначений - см. РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников
//  Объект - БизнесПроцессОбъект.Регистрация
//           БизнесПроцессСсылка.Регистрация
//           СправочникОбъект.ШаблоныРегистрации
//           СправочникСсылка.ШаблоныРегистрации - ссылка или объект процесса рагистрации или его шаблона.
//
Процедура ДобавитьУчастниковРегистрацииВТаблицу(ТаблицаНабора, Объект) Экспорт
	
	ТипПроцесса = ТипЗнч(Объект);
	
	РеквизитыПроцесса = Новый Структура;
	РеквизитыПроцесса.Вставить("Автор", Справочники.Сотрудники.ПустаяСсылка());
	РеквизитыПроцесса.Вставить("Исполнитель", Справочники.Сотрудники.ПустаяСсылка());
	РеквизитыПроцесса.Вставить("ОбрабатывающийРезультат", Справочники.Сотрудники.ПустаяСсылка());
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипПроцесса) Тогда
		
		Если ТипПроцесса = Тип("СправочникСсылка.ШаблоныРегистрации") Тогда
			РеквизитыДляПолучения = "Исполнитель, ОбрабатывающийРезультат";
		Иначе
			РеквизитыДляПолучения = "Автор, Исполнитель, ОбрабатывающийРезультат";
		КонецЕсли;
		
		БизнесПроцессРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект, РеквизитыДляПолучения);
		
		ЗаполнитьЗначенияСвойств(РеквизитыПроцесса, БизнесПроцессРеквизиты);
			
		СсылкаНаПроцесс = Объект;
			
	Иначе
		
		ЗаполнитьЗначенияСвойств(РеквизитыПроцесса, Объект);
		
		СсылкаНаПроцесс = Объект.Ссылка;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыПроцесса.Автор) Тогда
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
			ТаблицаНабора, РеквизитыПроцесса.Автор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыПроцесса.Исполнитель) Тогда
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
			ТаблицаНабора, РеквизитыПроцесса.Исполнитель);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыПроцесса.ОбрабатывающийРезультат) Тогда
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
			ТаблицаНабора, РеквизитыПроцесса.ОбрабатывающийРезультат);
	КонецЕсли;
	
	// Добавление контролеров
	Если Не ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(СсылкаНаПроцесс) Тогда
		Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, СсылкаНаПроцесс);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет участников процесса/шаблона процесса в переданную таблицу
//
// Параметры:
//  ТаблицаНабора - ТаблицаЗначений - см. РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников
//  Объект - БизнесПроцессОбъект.РешениеВопросовВыполненияЗадач
//           БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач - ссылка или объект процесса решения вопросов выполнения задач.
//
Процедура ДобавитьУчастниковРешенияВопросовВТаблицу(ТаблицаНабора, Объект) Экспорт
	
	ТипПроцесса = ТипЗнч(Объект);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипПроцесса) Тогда
		
		БизнесПроцессРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект,
			"Автор,
			|ИнициаторПроцесса");
			
		СсылкаНаПроцесс = Объект;
			
	Иначе
		
		БизнесПроцессРеквизиты = Новый Структура;
		БизнесПроцессРеквизиты.Вставить(
			"Автор", Неопределено);
		БизнесПроцессРеквизиты.Вставить(
			"ИнициаторПроцесса", Неопределено);
			
		ЗаполнитьЗначенияСвойств(БизнесПроцессРеквизиты, Объект);
		
		СсылкаНаПроцесс = Объект.Ссылка;
		
	КонецЕсли;
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, БизнесПроцессРеквизиты.Автор);
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
		ТаблицаНабора,
		БизнесПроцессРеквизиты.ИнициаторПроцесса);
	
	// Добавление контролеров
	Если Не ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(СсылкаНаПроцесс) Тогда
		Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, СсылкаНаПроцесс);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет участников процесса/шаблона процесса в переданную таблицу
//
// Параметры:
//  ТаблицаНабора - ТаблицаЗначений - см. РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников
//  Объект - БизнесПроцессОбъект.Согласование
//           БизнесПроцессСсылка.Согласование
//           СправочникОбъект.ШаблоныСогласования
//           СправочникСсылка.ШаблоныСогласования - ссылка или объект процесса согласования или его шаблона.
//
Процедура ДобавитьУчастниковСогласованияВТаблицу(ТаблицаНабора, Объект) Экспорт
	
	ТипПроцесса = ТипЗнч(Объект);
	
	РеквизитыПроцесса = Новый Структура;
	РеквизитыПроцесса.Вставить("Автор", Справочники.Сотрудники.ПустаяСсылка());
	РеквизитыПроцесса.Вставить("ОбрабатывающийРезультат", Справочники.Сотрудники.ПустаяСсылка());
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипПроцесса) Тогда
		
		Если ТипПроцесса = Тип("СправочникСсылка.ШаблоныСогласования") Тогда
			РеквизитыДляПолучения = "ОбрабатывающийРезультат";
		Иначе
			РеквизитыДляПолучения = "Автор, ОбрабатывающийРезультат";
		КонецЕсли;
		
		БизнесПроцессРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, РеквизитыДляПолучения);
		
		ЗаполнитьЗначенияСвойств(РеквизитыПроцесса, БизнесПроцессРеквизиты);
		
		СсылкаНаПроцесс = Объект;
		
	Иначе
		
		ЗаполнитьЗначенияСвойств(РеквизитыПроцесса, Объект);
		
		СсылкаНаПроцесс = Объект.Ссылка;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыПроцесса.Автор) Тогда
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
			ТаблицаНабора, РеквизитыПроцесса.Автор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыПроцесса.ОбрабатывающийРезультат) Тогда
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
			ТаблицаНабора, РеквизитыПроцесса.ОбрабатывающийРезультат);
	КонецЕсли;
	
	РаботаСРабочимиГруппами.ДобавитьУчастниковПоТабличнойЧастиБизнесПроцесса(
		ТаблицаНабора, Объект, "Исполнители");
	
	// Добавление контролеров
	Если Не ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(СсылкаНаПроцесс) Тогда
		Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, СсылкаНаПроцесс);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет участников процесса/шаблона процесса в переданную таблицу
//
// Параметры:
//  ТаблицаНабора - ТаблицаЗначений - см. РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников
//  Объект - БизнесПроцессОбъект.Утверждение
//           БизнесПроцессСсылка.Утверждение
//           СправочникОбъект.ШаблоныУтверждения
//           СправочникСсылка.ШаблоныУтверждения - ссылка или объект процесса утверждения или его шаблона.
//
Процедура ДобавитьУчастниковУтвержденияВТаблицу(ТаблицаНабора, Объект) Экспорт
	
	ТипПроцесса = ТипЗнч(Объект);
	
	РеквизитыПроцесса = Новый Структура;
	РеквизитыПроцесса.Вставить("Автор", Справочники.Сотрудники.ПустаяСсылка());
	РеквизитыПроцесса.Вставить("Исполнитель", Справочники.Сотрудники.ПустаяСсылка());
	РеквизитыПроцесса.Вставить("ОбрабатывающийРезультат", Справочники.Сотрудники.ПустаяСсылка());
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипПроцесса) Тогда
		
		Если ТипПроцесса = Тип("СправочникСсылка.ШаблоныУтверждения") Тогда
			РеквизитыДляПолучения = "Исполнитель, ОбрабатывающийРезультат";
		Иначе
			РеквизитыДляПолучения = "Автор, Исполнитель, ОбрабатывающийРезультат";
		КонецЕсли;
		
		БизнесПроцессРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект, РеквизитыДляПолучения);
		
		ЗаполнитьЗначенияСвойств(РеквизитыПроцесса, БизнесПроцессРеквизиты);
			
		СсылкаНаПроцесс = Объект;
			
	Иначе
		
		ЗаполнитьЗначенияСвойств(РеквизитыПроцесса, Объект);
		
		СсылкаНаПроцесс = Объект.Ссылка;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыПроцесса.Автор) Тогда
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
			ТаблицаНабора, РеквизитыПроцесса.Автор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыПроцесса.Исполнитель) Тогда
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
			ТаблицаНабора, РеквизитыПроцесса.Исполнитель);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыПроцесса.ОбрабатывающийРезультат) Тогда
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
			ТаблицаНабора, РеквизитыПроцесса.ОбрабатывающийРезультат);
	КонецЕсли;
	
	// Добавление контролеров
	Если Не ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(СсылкаНаПроцесс) Тогда
		Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, СсылкаНаПроцесс);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет участников процесса/шаблона процесса в переданную таблицу
//
// Параметры:
//  ТаблицаНабора - ТаблицаЗначений - см. РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников
//  Объект - БизнесПроцессОбъект.Подписание
//           БизнесПроцессСсылка.Подписание
//           СправочникОбъект.ШаблоныПодписания
//           СправочникСсылка.ШаблоныПодписания - ссылка или объект процесса подписания или его шаблона.
//
Процедура ДобавитьУчастниковПодписанияВТаблицу(ТаблицаНабора, Объект) Экспорт
	
	ТипОбъекта = ТипЗнч(Объект);
	РеквизитыОбъектаСтрокой = "Автор, Ссылка, Участники";
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипОбъекта) Тогда
		
		Если Объект.Пустая() Тогда
			Возврат;
		КонецЕсли;
		
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект, РеквизитыОбъектаСтрокой);
		РеквизитыОбъекта.Участники = РеквизитыОбъекта.Участники.Выгрузить();
	Иначе
		РеквизитыОбъекта = Новый Структура(РеквизитыОбъектаСтрокой);
		ЗаполнитьЗначенияСвойств(РеквизитыОбъекта, Объект);
	КонецЕсли;
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, РеквизитыОбъекта.Автор);
	
	Для Каждого СтрокаУчастника Из РеквизитыОбъекта.Участники Цикл
		
		ТипИсполнителя = ТипЗнч(СтрокаУчастника.Участник);
		
		Если Не ЗначениеЗаполнено(СтрокаУчастника.Участник)
			Или ТипИсполнителя = Тип("Строка")
			Или ТипИсполнителя = Тип("СправочникСсылка.АвтоподстановкиДляПроцессов") Тогда
					
			Продолжить;
		КонецЕсли;
		
		УсловиеУчастника = Новый Структура("Условие", Неопределено);
		ЗаполнитьЗначенияСвойств(УсловиеУчастника, СтрокаУчастника);
		Если ЗначениеЗаполнено(УсловиеУчастника.Условие) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаУчастника.Участник) = Тип("СправочникСсылка.Сотрудники")
			Или ТипЗнч(СтрокаУчастника.Участник) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			
			РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
				ТаблицаНабора, СтрокаУчастника.Участник, Ложь);
		Иначе
			ВызватьИсключение НСтр("ru = 'Некорректный участник.'");
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавление контролеров
	Если Не ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(РеквизитыОбъекта.Ссылка) Тогда
		Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, РеквизитыОбъекта.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ФормаЗадачиПроцесса

// Обработчик ПередЗаписьюНаСервере формы задачи
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка задачи.
//  Отказ, ТекущийОбъект, ПараметрыЗаписи - стандартные параметры соответствующего обработчика.
//
Процедура ФормаЗадачиПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(Форма, ТекущийОбъект);
	
	Если ЗначениеЗаполнено(Форма.ФактическийИсполнительЗадачи)
		И ПараметрыЗаписи.Свойство("ВыполнитьЗадачу") И ПараметрыЗаписи.ВыполнитьЗадачу Тогда
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить(
			"ФактическийИсполнительЗадачи", Форма.ФактическийИсполнительЗадачи);
	КонецЕсли;
	
	Если Не Форма.ДатаИсполненияУстановленаВручную И
			(ПараметрыЗаписи.Свойство("ВыполнитьЗадачу") И ПараметрыЗаписи.ВыполнитьЗадачу)
				//Или (ПараметрыЗаписи.Свойство("ВыполнитьЗадачуФоново") И ПараметрыЗаписи.ВыполнитьЗадачуФоново) 
				Тогда
		ТекущийОбъект.ДатаИсполнения = ТекущаяДатаСеанса();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик ПриЗаписиНаСервере формы задачи
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка задачи.
//  Отказ, ТекущийОбъект, ПараметрыЗаписи - стандартные параметры соответствующего обработчика.
//  ПараметрыФоновогоВыполнения - Структура - содержит особые параметры выполнения текущей задачи.
//
Процедура ФормаЗадачиПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи,
	ПараметрыФоновогоВыполнения = Неопределено) Экспорт
	
//	Если ПараметрыЗаписи.Свойство("ВыполнитьЗадачуФоново")
//		И ПараметрыЗаписи.ВыполнитьЗадачуФоново Тогда
//		
//		Если ПараметрыФоновогоВыполнения = Неопределено Тогда
//			ПараметрыФоновогоВыполнения = Новый Структура;
//		КонецЕсли;
//		
//		Если ЗначениеЗаполнено(Форма.ФактическийИсполнительЗадачи) Тогда
//			ПараметрыФоновогоВыполнения.Вставить("ФактическийИсполнительЗадачи",
//				Форма.ФактическийИсполнительЗадачи);
//		КонецЕсли;
//		
//		РегистрыСведений.ЗадачиДляВыполнения.ДобавитьЗадачуДляФоновогоВыполнения(
//			ТекущийОбъект, ПараметрыФоновогоВыполнения);
//	КонецЕсли;
	
	Если 
	//ПараметрыЗаписи.Свойство("ВыполнитьЗадачуФоново") Или 
		ПараметрыЗаписи.Свойство("ВыполнитьЗадачу") Тогда
		
		БизнесПроцессыИЗадачиСервер.УстановитьПрочтениеПриВыполненииИзКарточкиЗадачи(Форма);
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс_ПроцессПодписание

#Область ДеревоУчастников

// Заполняет дерево участников по процессу или шаблону подписания.
// 
// Параметры:
// 	УчастникиПроцесса - ДанныеФормыКоллекцияЭлементовДерева - дерево участников в карточке.
// 	ПроцессОбъект - БизнесПроцессОбъект.Подписание,
// 					СправочникОбъект.ШаблоныПодписания - данные процесса или его шаблона в карточке.
//
Процедура ЗаполнитьДеревоУчастниковПоПроцессуПодписания(УчастникиПроцесса, ПроцессОбъект) Экспорт
	
	// Рассчитываем на то, что структура дерева участников в форме может принимать
	// один из след. вариантов:
	// 
	// Вариант 1: всего 2 строки в дереве.
	//	Подписать: <Подписывающий>
	//	Обработать результат: <Обрабатывающий результат>
	//
	// Вариант 2: группа подписывающих и обрабатывающий результат.
	// 	Подписать:
	//		<Подписывающий 1>
	//		...
	//		<Подписывающий N>
	//	Обработать результат: <Обрабатывающий результат>
	//
	// Вариант 3: подписывающие разбиваются по этапам + обрабатывающий результат.
	// 	Подписать:
	//		<Этап подписания 1>
	//			<Подписывающий 11>
	//			...
	//			<Подписывающий 1N>
	//		<Этап подписания 1>
	//			<Подписывающий 21>
	//			...
	//			<Подписывающий 2N>
	//		...
	//		<Этап подписания M>
	//			<Подписывающий M1>
	//			...
	//			<Подписывающий MN>
	//	Обработать результат: <Обрабатывающий результат>
	
	ТочкиМаршурта = БизнесПроцессы.Подписание.ТочкиМаршрута;
	
	РезультатыПодписания = Неопределено;
	Если ТипЗнч(ПроцессОбъект) = Тип("БизнесПроцессОбъект.Подписание") Тогда
		РезультатыПодписания = ПроцессОбъект.РезультатыПодписания;
	КонецЕсли;	
	
	УчастникиПроцесса.ПолучитьЭлементы().Очистить();
	
	// Добавляем корневые ветки, которые присутствуют всегда.
	
	СтрокаПодписать = УчастникиПроцесса.ПолучитьЭлементы().Добавить();
	СтрокаПодписать.ТипСтроки = 
		РаботаСБизнесПроцессамиКлиентСервер.ТипСтроки_ПодписатьСУчастником();
	СтрокаПодписать.Задание_Представление = НСтр("ru = 'Подписать'");
	
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьПорядокВыполненияВСтрокеСЗаданиемПодписать(
		СтрокаПодписать, ПроцессОбъект.СпособПодписания);
	
	СтрокаПодписать.ИдентификаторУчастника = Новый УникальныйИдентификатор();
	СтрокаПодписать.ТочкаМаршрута = ТочкиМаршурта.Подписать;
	
	СтрокаОбработатьРезультат = УчастникиПроцесса.ПолучитьЭлементы().Добавить();
	СтрокаОбработатьРезультат.ТипСтроки = РаботаСБизнесПроцессамиКлиентСервер.
		ТипСтроки_ОбработатьРезультатПодписания();
	СтрокаОбработатьРезультат.Задание_Представление = НСтр("ru = 'Обработать результат'");
	СтрокаОбработатьРезультат.ИдентификаторУчастника = Новый УникальныйИдентификатор();
	СтрокаОбработатьРезультат.ТочкаМаршрута = ТочкиМаршурта.ОбработатьРезультат;
	
	// Заполняем дерево по данным объекта.
	
	ПодчиненныеСтрокеПодписать = СтрокаПодписать.ПолучитьЭлементы();
	
	ЭтапыУчастников = Новый Соответствие();
		
	Отбор = Новый Структура("ТочкаМаршрута", ТочкиМаршурта.Подписать);
	КоличествоПодписывающих = ПроцессОбъект.Участники.НайтиСтроки(Отбор).Количество();
	Отбор.ТочкаМаршрута = ТочкиМаршурта.ОбеспечитьПодписание;
	КоличествоПодписывающих = КоличествоПодписывающих
		+ ПроцессОбъект.Участники.НайтиСтроки(Отбор).Количество();
			
	Если ПроцессОбъект.Этапы.Количество() > 0
		Или КоличествоПодписывающих > 1 Тогда
		
		СтрокаПодписать.ТипСтроки = 
			РаботаСБизнесПроцессамиКлиентСервер.ТипСтроки_Подписать();
		СтрокаПодписать.ИдентификаторУчастника = УникальныйИдентификаторПустой();
		СтрокаПодписать.ТочкаМаршрута = Неопределено;
		
		ЭтапыУчастников[СтрокаПодписать.ИдентификаторЭтапа] = ПодчиненныеСтрокеПодписать;
	
	КонецЕсли;
	
	Для Каждого СтрокаЭтапа Из ПроцессОбъект.Этапы Цикл
		СтрокаЭтапаВДереве = ПодчиненныеСтрокеПодписать.Добавить();
		СтрокаЭтапаВДереве.ТипСтроки = 
			РаботаСБизнесПроцессамиКлиентСервер.ТипСтроки_ЭтапПодписания();
		ЗаполнитьЗначенияСвойств(СтрокаЭтапаВДереве, СтрокаЭтапа);
		СтрокаЭтапаВДереве.ИдентификаторЭтапа = СтрокаЭтапа.Идентификатор;
		РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьПредставлениеСтрокиЭтапаПодписания(
			СтрокаЭтапаВДереве);
		
		ЭтапыУчастников[СтрокаЭтапаВДереве.ИдентификаторЭтапа] = 
			СтрокаЭтапаВДереве.ПолучитьЭлементы();
	КонецЦикла;
	
	Для Каждого СтрокаУчастника Из ПроцессОбъект.Участники Цикл
		
		Если СтрокаУчастника.ТочкаМаршрута = 
			БизнесПроцессы.Подписание.ТочкиМаршрута.Подписать
			
			Или СтрокаУчастника.ТочкаМаршрута = 
			БизнесПроцессы.Подписание.ТочкиМаршрута.ОбеспечитьПодписание Тогда
			
			ЭтапУчастников = ЭтапыУчастников[СтрокаУчастника.Этап];
			Если ЭтапУчастников = Неопределено Тогда
				СтрокаУчастникаВДереве = СтрокаПодписать;
			Иначе
				СтрокаУчастникаВДереве = ЭтапУчастников.Добавить();
				СтрокаУчастникаВДереве.ТипСтроки = 
					РаботаСБизнесПроцессамиКлиентСервер.ТипСтроки_УчастникЭтапаПодписания();
			КонецЕсли;
			
		ИначеЕсли СтрокаУчастника.ТочкаМаршрута = 
			БизнесПроцессы.Подписание.ТочкиМаршрута.ОбработатьРезультат Тогда
			
			СтрокаУчастникаВДереве = СтрокаОбработатьРезультат;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаУчастникаВДереве, СтрокаУчастника);
		СтрокаУчастникаВДереве.ИдентификаторЭтапа = СтрокаУчастника.Этап;
		СтрокаУчастникаВДереве.ИдентификаторУчастника = СтрокаУчастника.Идентификатор;
		
		РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьПредставлениеУчастникаПодписания(
			СтрокаУчастникаВДереве);
			
		Если РезультатыПодписания <> Неопределено Тогда
			
			РезСтрока = РезультатыПодписания.Найти(СтрокаУчастника.Идентификатор, "Идентификатор");
			Если РезСтрока <> Неопределено Тогда
				
				Если РезСтрока.РезультатПодписания = Перечисления.РезультатыПроцессаПодписания.НеПодписано Тогда
					СтрокаУчастникаВДереве.КартинкаСтроки = 2;
				ИначеЕсли РезСтрока.РезультатПодписания = Перечисления.РезультатыПроцессаПодписания.Подписано Тогда
					СтрокаУчастникаВДереве.КартинкаСтроки = 4;
				Иначе	
					СтрокаУчастникаВДереве.КартинкаСтроки = -1;
				КонецЕсли;
					
			КонецЕсли;	
			
		КонецЕсли;		
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Возвращает строку участника с точкой маршрута ОбработатьРезультат в процессе подписания.
// В случае ее отсутствия добавляет ее в таблицу Участники
// 
// Параметры:
//  Процесс - БизнесПроцессОбъект.Подписание, СправочникОбъект.ШаблоныПодписания
// 
// Возвращаемое значение:
// 	БизнесПроцессТабличнаяЧастьСтрока.Подписание.Участники
// 
Функция СтрокаУчастника_ОбработатьРезультатПодписания(Процесс) Экспорт

	СтрокаУчастника = Процесс.Участники.Найти(
		БизнесПроцессы.Подписание.ТочкиМаршрута.ОбработатьРезультат, "ТочкаМаршрута");

	Если СтрокаУчастника = Неопределено Тогда
		СтрокаУчастника = Процесс.Участники.Добавить();
		СтрокаУчастника.ТочкаМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута.ОбработатьРезультат;
		СтрокаУчастника.Идентификатор = Новый УникальныйИдентификатор;
	КонецЕсли;

	Возврат СтрокаУчастника;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс_ПредметБизнесПроцесса

Процедура ПредметБизнесПроцессаПередЗаписьюПередЗаписью(Источник, Отказ) Экспорт
	
	Если МиграцияПриложенийПереопределяемый.ЭтоЗагрузка(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить(
		"ДополнительныеРеквизиты",
		Источник.Ссылка.ДополнительныеРеквизиты);
	
КонецПроцедуры

// Обработчик записи предмета бизнес-процесса.
Процедура ПредметБизнесПроцессаПриЗаписиПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если МиграцияПриложенийПереопределяемый.ЭтоЗагрузка(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДопРеквизитыИзменились = ЗначенияДополнительныхРеквизитовИзменились(
		Источник.ДополнительныеСвойства.ДополнительныеРеквизиты, Источник.ДополнительныеРеквизиты);
	ПроектИзменился = Источник.ДополнительныеСвойства.Свойство("ИзменилсяПроект")
		И Источник.ДополнительныеСвойства.ИзменилсяПроект;
	
	Если Не (ДопРеквизитыИзменились Или ПроектИзменился) Тогда
		Возврат;
	КонецЕсли;
	
	// Если владельцем файла является документ предприятия или мероприятие,
	// то проект должен быть изменен во владельце
	Если ПроектИзменился И ДелопроизводствоКлиентСервер.ЭтоФайл(Источник) И (ДелопроизводствоКлиентСервер.ЭтоДокумент(
		Источник.ВладелецФайла) Или ДелопроизводствоКлиентСервер.ЭтоМероприятие(Источник.ВладелецФайла)) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = "";
	Для Каждого ОбъектМетаданных Из Метаданные.БизнесПроцессы Цикл
		ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса), "", "
				|ОБЪЕДИНИТЬ ВСЕ") + "
				|ВЫБРАТЬ РАЗЛИЧНЫЕ " + ?(ПустаяСтрока(ТекстЗапроса), "РАЗРЕШЕННЫЕ", "") + "
				|	Предметы.Ссылка,
				|	ТИПЗНАЧЕНИЯ(Предметы.Ссылка) = ТИП(БизнесПроцесс.КомплексныйПроцесс) КАК ЭтоКомплексныйПроцесс,
				|	ТИПЗНАЧЕНИЯ(Предметы.Ссылка) = ТИП(БизнесПроцесс.РешениеВопросовВыполненияЗадач) КАК ЭтоПроцессРешениеВопросов,
				|	Предметы.Ссылка.ВедущаяЗадача <> &ПустаяЗадача КАК ВходитВКомплексныйПроцесс,
				|	Не (Предметы.Ссылка.Завершен Или Предметы.Ссылка.ПометкаУдаления 
				|	Или Предметы.Ссылка.Состояние = &Прерван) КАК ПроцессМожноИзменять
				|ИЗ
				|	БизнесПроцесс.%Таблица%.Предметы КАК Предметы
				|ГДЕ
				|	Предметы.Предмет = &Предмет И Предметы.РольПредмета = &Основной
				|	И (&ДопРеквизитыИзменились Или НЕ (Предметы.Ссылка.Завершен Или Предметы.Ссылка.ПометкаУдаления 
				|	Или Предметы.Ссылка.Состояние = &Прерван))";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Таблица%", ОбъектМетаданных.Имя);
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Предмет", Источник.Ссылка);
	Запрос.УстановитьПараметр("Основной", Перечисления.РолиПредметов.Основной);
	Запрос.УстановитьПараметр("Прерван", Перечисления.СостоянияБизнесПроцессов.Прерван);
	Запрос.УстановитьПараметр("ДопРеквизитыИзменились", ДопРеквизитыИзменились);
	Запрос.УстановитьПараметр("ПустаяЗадача", Задачи.ЗадачаИсполнителя.ПустаяСсылка());
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ВнешняяТранзакция = ТранзакцияАктивна();
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	Попытка
		БизнесПроцессыПоПредмету = Результат.Выбрать();
		Пока БизнесПроцессыПоПредмету.Следующий() Цикл
			БизнесПроцессОбъект = БизнесПроцессыПоПредмету.Ссылка.ПолучитьОбъект();
			НаборыДопРеквизитовПересекаются = НаборыДопРеквизитовПересекаются(Источник, БизнесПроцессОбъект);
				// Если процесс входит в комплексный, то менять его реквизит не нужно, он будет изменен автоматически
				// при изменении реквизита комплексного.
			НужноПоменятьПроект = ПроектИзменился И БизнесПроцессыПоПредмету.ПроцессМожноИзменять
				И Не БизнесПроцессыПоПредмету.ВходитВКомплексныйПроцесс;
			Если НаборыДопРеквизитовПересекаются Или НужноПоменятьПроект Тогда
				ЗаблокироватьДанныеДляРедактирования(БизнесПроцессОбъект.Ссылка);
				Если НаборыДопРеквизитовПересекаются Тогда
					СкопироватьЗначенияДопРеквизитов(Источник, БизнесПроцессОбъект);
				КонецЕсли;
				Если НужноПоменятьПроект Тогда
					БизнесПроцессОбъект.Проект = Источник.Проект;
				КонецЕсли;
				БизнесПроцессОбъект.Записать();
					// Если процесс - комплексный, то проект поменяется автоматически во всех вложенных процессах
					// и их невыполненных задачах, для не комплексных процессов используем метод
					// ИзменитьРеквизитыНевыполненныхЗадач.
				Если НужноПоменятьПроект И БизнесПроцессыПоПредмету.ЭтоПроцессРешениеВопросов Тогда
					БизнесПроцессОбъект.ИзменитьРеквизитыНевыполненныхЗадач();
				ИначеЕсли НужноПоменятьПроект И Не БизнесПроцессыПоПредмету.ЭтоКомплексныйПроцесс Тогда
					СтарыеУчастникиПроцесса = БизнесПроцессыИЗадачиСервер.ТекущиеУчастникиПроцесса(БизнесПроцессОбъект);
					БизнесПроцессОбъект.ИзменитьРеквизитыНевыполненныхЗадач(
							СтарыеУчастникиПроцесса, Новый Структура);
				КонецЕсли;
			КонецЕсли;
			Если ДопРеквизитыИзменились И Не НаборыДопРеквизитовПересекаются Тогда
				ОбновитьДопРеквизитыУЗадачБизнесПроцесса(БизнесПроцессОбъект, Источник);
			КонецЕсли;
		КонецЦикла;
		Если Не ВнешняяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	Исключение
		Инфо = ИнформацияОбОшибке();
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ЗаписьЖурналаРегистрации(
			БизнесПроцессыИЗадачиСервер.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
			Источник.Метаданные(), Источник.Ссылка, ОбработкаОшибок.ПодробноеПредставлениеОшибки(Инфо));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс_ДополнительныеРеквизиты

Функция ЗначенияДополнительныхРеквизитовИзменились(ПерваяТабличнаяЧасть, ВтораяТабличнаяЧасть) Экспорт
	
	Результат = Ложь;
	
	Если ПерваяТабличнаяЧасть.Количество() <> ВтораяТабличнаяЧасть.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	Для Каждого СтрокаПервойТабличнойЧасти Из ПерваяТабличнаяЧасть Цикл
		НайденнаяСтрока = ВтораяТабличнаяЧасть.Найти(СтрокаПервойТабличнойЧасти.Свойство, "Свойство");
		Если НайденнаяСтрока = Неопределено
				Или НайденнаяСтрока <> Неопределено И НайденнаяСтрока.Значение <> СтрокаПервойТабличнойЧасти.Значение Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НаборыДопРеквизитовПересекаются(Объект1, Объект2) Экспорт
	
	ДоступныеНаборыСвойств1 = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(Объект1);
	ДоступныеНаборыСвойств2 = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(Объект2);
	
	Для Каждого ДоступныйНабор1 Из ДоступныеНаборыСвойств1 Цикл
		Для Каждого СтрокаТабЧасти1 ИЗ ДоступныйНабор1.Набор.ДополнительныеРеквизиты Цикл
			
			Для Каждого ДоступныйНабор2 Из ДоступныеНаборыСвойств2 Цикл
				Для Каждого СтрокаТабЧасти2 ИЗ ДоступныйНабор2.Набор.ДополнительныеРеквизиты Цикл
					Если СтрокаТабЧасти1.Свойство = СтрокаТабЧасти2.Свойство Тогда
						Возврат Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ОбновитьДопРеквизитыУЗадачБизнесПроцесса(ОбъектБизнесПроцесс, Предмет) Экспорт
	
	ВнешняяТранзакция = ТранзакцияАктивна();
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		МассивЗадачБизнесПроцесса = РаботаСБизнесПроцессами.ПолучитьМассивЗадачПоБизнесПроцессу(ОбъектБизнесПроцесс.Ссылка, Истина);
		УстановитьПривилегированныйРежим(Истина);
		Для Каждого Задача Из МассивЗадачБизнесПроцесса Цикл
			ЗадачаОбъект = Задача.Ссылка.ПолучитьОбъект();
			Если РаботаСБизнесПроцессами.НаборыДопРеквизитовПересекаются(ОбъектБизнесПроцесс, Задача.Ссылка) Тогда
				ЗаблокироватьДанныеДляРедактирования(Задача.Ссылка);
				СкопироватьЗначенияДопРеквизитов(ОбъектБизнесПроцесс, ЗадачаОбъект);
				ЗадачаОбъект.Записать();
			КонецЕсли;
			Если РаботаСБизнесПроцессами.НаборыДопРеквизитовПересекаются(Предмет, Задача.Ссылка) Тогда
				ЗаблокироватьДанныеДляРедактирования(Задача.Ссылка);
				СкопироватьЗначенияДопРеквизитов(Предмет, ЗадачаОбъект);
				ЗадачаОбъект.Записать();
			КонецЕсли;
			ОбновитьДопРеквизитыУБизнесПроцессовЗадачи(ЗадачаОбъект, Предмет);
		КонецЦикла;
	Исключение
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		Инфо = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(БизнесПроцессыИЗадачиСервер.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			Задача.Ссылка.Метаданные(),
			Задача.Ссылка,
			ПодробноеПредставлениеОшибки(Инфо));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьДопРеквизитыУБизнесПроцессовЗадачи(ОбъектЗадача, Предмет)
	
	ВнешняяТранзакция = ТранзакцияАктивна();
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		МассивБизнесПроцессовВедущаяЗадача = РаботаСБизнесПроцессами.ПолучитьПодчиненныеЗадачеБизнесПроцессы(ОбъектЗадача.Ссылка, "ВедущаяЗадача", Истина);
		Для Каждого БизнесПроцессСтрока Из МассивБизнесПроцессовВедущаяЗадача Цикл
			БизнесПроцессОбъект = БизнесПроцессСтрока.Ссылка.ПолучитьОбъект();
			Если РаботаСБизнесПроцессами.НаборыДопРеквизитовПересекаются(ОбъектЗадача, БизнесПроцессОбъект) Тогда
				ЗаблокироватьДанныеДляРедактирования(БизнесПроцессСтрока.Ссылка);
				СкопироватьЗначенияДопРеквизитов(ОбъектЗадача, БизнесПроцессОбъект);
				БизнесПроцессОбъект.Записать();
			КонецЕсли;
			Если РаботаСБизнесПроцессами.НаборыДопРеквизитовПересекаются(Предмет, БизнесПроцессОбъект) Тогда
				ЗаблокироватьДанныеДляРедактирования(БизнесПроцессСтрока.Ссылка);
				СкопироватьЗначенияДопРеквизитов(Предмет, БизнесПроцессОбъект);
				БизнесПроцессОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
		
		Если Метаданные.БизнесПроцессы.Исполнение.Реквизиты.Найти("ГлавнаяЗадача") <> Неопределено Тогда
			МассивБизнесПроцессовГлавнаяЗадача = РаботаСБизнесПроцессами.ПолучитьПодчиненныеЗадачеБизнесПроцессы(ОбъектЗадача.Ссылка, "ГлавнаяЗадача", Истина);
			Для Каждого БизнесПроцессСтрока Из МассивБизнесПроцессовГлавнаяЗадача Цикл
				ЗаблокироватьДанныеДляРедактирования(БизнесПроцессСтрока.Ссылка);
				БизнесПроцессОбъект = БизнесПроцессСтрока.Ссылка.ПолучитьОбъект();
				Если РаботаСБизнесПроцессами.НаборыДопРеквизитовПересекаются(ОбъектЗадача, БизнесПроцессОбъект) Тогда
					СкопироватьЗначенияДопРеквизитов(ОбъектЗадача, БизнесПроцессОбъект);
					БизнесПроцессОбъект.Записать();
				КонецЕсли;
				Если РаботаСБизнесПроцессами.НаборыДопРеквизитовПересекаются(Предмет, БизнесПроцессОбъект) Тогда
					СкопироватьЗначенияДопРеквизитов(Предмет, БизнесПроцессОбъект);
					БизнесПроцессОбъект.Записать();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Исключение
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		Инфо = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(БизнесПроцессыИЗадачиСервер.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			БизнесПроцессОбъект.Метаданные(),
			БизнесПроцессОбъект.Ссылка,
			ПодробноеПредставлениеОшибки(Инфо));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти