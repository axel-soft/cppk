
#Область СлужебныйПрограммныйИнтерфейс

//Возвращает необходимые сведения о текущем клиенте (на клиенте)
// Возвращаемое значение:
//  Структура - структура, содержащая информацию о мобильном клиенте с ключами:
//   	* ВерсияПриложенияКлиента					- Строка - Версия платформы 1С:Предприятия 8 (клиента).
//   	* ВерсияПриложенияСервера					- Строка - Версия платформы 1С:Предприятия 8 (сервера).
//   	* ВерсияОСКлиента							- Строка - Версия операционной системы (клиента).
//   	* ВерсияОССервера							- Строка - Версия операционной системы (сервера).
//   	* ИдентификаторКлиента						- УникальныйИдентификатор - Уникальный идентификатор клиента
//														(одинаковый как на Клиенте, так и на Сервере).
//		* ИдентификаторПодписчикаУведомления		- ИдентификаторПодписчикаДоставляемыхУведомлений -
//														Идентификатор подписчика уведомлений текущего моб. приложения;
//   	* ОперативнаяПамятьКлиента					- Число - Размер оперативной памяти моб. клиента;
//   	* ОперативнаяПамятьСервера					- Число - Размер оперативной памяти сервера;
//   	* ТипПлатформы								- ТипПлатформы - Тип используемой платформы;
//
Функция СведенияОКлиенте() Экспорт
	
	СведенияОМобильномКлиенте = МК_КлиентСервер.НовыйСведенияОКлиенте();
	СистемнаяИнформация = Новый СистемнаяИнформация;
	СведенияОМобильномКлиенте.ВерсияПриложенияКлиента = СистемнаяИнформация.ВерсияПриложения;
	СведенияОМобильномКлиенте.ВерсияОСКлиента = СистемнаяИнформация.ВерсияОС; 
	СведенияОМобильномКлиенте.ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;

#Если МобильныйКлиент Тогда
	СведенияОМобильномКлиенте.ИдентификаторПодписчикаУведомления =
		ДоставляемыеУведомления.ПолучитьИдентификаторПодписчикаУведомлений();
#КонецЕсли

	СведенияОМобильномКлиенте.ОперативнаяПамятьКлиента = СистемнаяИнформация.ОперативнаяПамять;
	
	Возврат СведенияОМобильномКлиенте;

КонецФункции

//формирует описание в html о том, что представление файла в виде HTML отсутствует
// Возвращаемое значение:
//  Строка - Результирующая строка в виде html об отсутствии представления
//
Функция ПредставлениеHTMLОтсутствиеHTMLПредставления() Экспорт

	ПредставлениеВизуализацияНеПоддерживается =
		НСтр("ru ='<b>Представление в виде HTML отсутствует</b>.<br><br>
		|Файл открыт в другом приложении.
		|Командой из контекстного меню - можно открыть его повторно.'");
	
	ПредставлениеHTMLВизуализацияНеПоддерживается = СтрШаблон("<html><body>%1</body></html>",
		ПредставлениеВизуализацияНеПоддерживается);
	
	МК_КлиентСервер.АдаптироватьHtmlПодЭкранМобильногоПриНеобходимости(
		ПредставлениеHTMLВизуализацияНеПоддерживается);
	
	Возврат ПредставлениеHTMLВизуализацияНеПоддерживается;
	
КонецФункции

#Область РаботаСПочтой

//Возвращает закэшированную структуру с набором фильтров для списка писем
// Параметры:
//  ПоддерживаетсяМножВвод - Булево - Поддерживается ли ввод множ. значений.
// Возвращаемое значение:
//  Структура - Структура возможных фильтров списка писем с ключами:
//		* ОтборТема - Строка - имя реквизита отбора для темы
//		* ОтборАдресат - Строка - имя реквизита отбора для адресата
//		* ОтборПрочтено - Строка - имя реквизита отбора для значений Прочтено
//		* ОтборФлаг - Строка - имя реквизита отбора для значений флагов
//
Функция ФильтрыВСпискеПисем(ПоддерживаетсяМножВвод) Экспорт
	
	ФильтрыПисем = Новый Структура;
	ФильтрТема = НовыйСведенияОФильтре();
	ФильтрТема.ИмяПоляОтбора = "Тема";
	ФильтрТема.ИмяРеквизита = "ОтборТема";
	ФильтрТема.Представление = НСтр("ru = 'Тема'");
	ФильтрыПисем.Вставить(ФильтрТема.ИмяРеквизита, ФильтрТема);
	
	ФильтрАдресат = НовыйСведенияОФильтре();
	ФильтрАдресат.ИмяПоляОтбора = "Адресаты";
	ФильтрАдресат.ИмяРеквизита = "ОтборАдресат";
	ФильтрАдресат.Представление = НСтр("ru = 'Адресат'");
	ФильтрыПисем.Вставить(ФильтрАдресат.ИмяРеквизита, ФильтрАдресат);
	
	// Фильтр Прочтено
	ФильтрПрочтено = НовыйСведенияОФильтре();
	ФильтрПрочтено.ИмяПоляОтбора = "Прочтено";
	ФильтрПрочтено.ИмяРеквизита = ?(ПоддерживаетсяМножВвод,
		"ТаблицаОтбораПрочтено",
		"ОтборПрочтеноСписком");
	ФильтрПрочтено.Представление = НСтр("ru = 'Прочтено'");
	ИмяЭлементаПрочтено = ?(ПоддерживаетсяМножВвод,
		"ОтборПрочтено",
		"ОтборПрочтеноСписком");
	ФильтрыПисем.Вставить(ИмяЭлементаПрочтено, ФильтрПрочтено);
	
	// Фильтр Флаг
	ФильтрФлаг = НовыйСведенияОФильтре();
	ФильтрФлаг.ИмяПоляОтбора = "Флаг";
	ФильтрФлаг.ИмяРеквизита = ?(ПоддерживаетсяМножВвод,
		"ТаблицаОтбораФлагов",
		"ОтборФлагСписком");
	ФильтрФлаг.Представление = НСтр("ru = 'Флаг'");
	ИмяЭлементаФлаг = ?(ПоддерживаетсяМножВвод,
		"ОтборФлаг",
		"ОтборФлагСписком");
	ФильтрыПисем.Вставить(ИмяЭлементаФлаг, ФильтрФлаг);
	
	// Фильтр ЕстьВложения
	ФильтрЕстьВложения= НовыйСведенияОФильтре();
	ФильтрЕстьВложения.ИмяПоляОтбора = "ЕстьВложения";
	ФильтрЕстьВложения.ИмяРеквизита = ?(ПоддерживаетсяМножВвод,
		"ТаблицаОтбораЕстьВложения",
		"ОтборЕстьВложенияСписком");
	ФильтрЕстьВложения.Представление = НСтр("ru = 'Вложения'");
	ИмяЭлементаЕстьВложения = ?(ПоддерживаетсяМножВвод,
		"ОтборЕстьВложения",
		"ОтборЕстьВложенияСписком");
	ФильтрыПисем.Вставить(ИмяЭлементаЕстьВложения, ФильтрЕстьВложения);
	
	
	Возврат ФильтрыПисем;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//Конструктор нового фильтра в списке
// Возвращаемое значение:
//  Структура:
//  * ИмяПоляОтбора - Строка - имя элемента отбора на форме
//  * ИмяРеквизита - Строка - имя реквизита на форме
//  * Представление - Строка - представление отбора
//
Функция НовыйСведенияОФильтре()
	
	СведенияОФильтре = Новый Структура;
	СведенияОФильтре.Вставить("ИмяПоляОтбора", "");
	СведенияОФильтре.Вставить("ИмяРеквизита", "");
	СведенияОФильтре.Вставить("Представление", "");
	
	Возврат СведенияОФильтре;
КонецФункции

#КонецОбласти

