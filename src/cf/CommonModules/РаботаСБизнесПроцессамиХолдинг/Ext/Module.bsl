// @strict-types


#Область ПрограммныйИнтерфейс

#Область ИзменениеПроцессаВУзлахКод
// Добавляет задание обновления процесса в очередь заданий.
//
// Параметры:
//	Процесс - БизнесПроцессОбъект - Процесс, для которого необходимо добавить задание.
//
// Возвращаемое значение:
//	Булево - Истина - Задание добавлено.
//
Функция ДобавитьЗаданиеОбновитьПроцессБезДействия(Процесс) Экспорт
	
	Если РаботаСБизнесПроцессамиХолдингКлиентСервер.ЭтоСтартПроцесса(Процесс.ДополнительныеСвойства) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если РаботаСБизнесПроцессамиХолдингКлиентСервер.ЭтоИзменениеПроцессаЧерезОчередьЗаданий(
		Процесс.ДополнительныеСвойства) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ПроцессМожноОбработатьВОчередиЗаданий(Процесс) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если РаботаСБизнесПроцессамиХолдингКлиентСервер.ЭтоВыполнениеЗадачиОбрабатывающегоРезультат(
		Процесс.ДополнительныеСвойства)  Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДанныеДляЗаполнения = Новый Структура;
	ДанныеДляЗаполнения.Вставить("ВерсияФормата", КОДСервер.ТекущаяВерсияФормата());
	ДанныеДляЗаполнения.Вставить("ХэшСуммаОбъекта", КОДСервер.ХешСуммаMD5СериализованногоОбъекта(Процесс.Ссылка, ,
		ДанныеДляЗаполнения.ВерсияФормата));
	ДанныеДляЗаполнения.Вставить("АвторИзменения", ПользователиДокументооборот.ОлицетворяемыйПользователь());
	ЗаполнитьДанныеПроцессаОтправка(ДанныеДляЗаполнения, Процесс);
	ОбработкаОчередиЗаданийСервер.ДобавитьЗаданиеОбновленияДанныхПроцесса(
		Процесс, ДанныеДляЗаполнения);
	
	Возврат Истина;
	
КонецФункции

// Добавляет задание прерывания процесса в очередь заданий при програмном прерывании.
//
// Параметры:
//	Процесс - БизнесПроцессСсылка - Процесс, для которого необходимо добавить задание.
//	ПричинаПрерывания - Строка -
//
// Возвращаемое значение:
//	Булево - Истина - Задание добавлено.
//
Функция ОбработатьПрограмноеПрерываниеПроцесса(Процесс, ПричинаПрерывания) Экспорт
	
	Если Не ПроцессМожноОбработатьВОчередиЗаданий(Процесс) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеДляЗаполнения = Новый Структура;
	ДанныеДляЗаполнения.Вставить("ПричинаПрерывания", ПричинаПрерывания);
	ДанныеДляЗаполнения.Вставить("ОбновитьДанныеПроцесса", Ложь);
	ДанныеДляЗаполнения.Вставить("АвторИзменения", ПользователиДокументооборот.ОлицетворяемыйПользователь());
	ОбработкаОчередиЗаданийСервер.ДобавитьЗаданиеПрерватьПроцесс(Процесс, ДанныеДляЗаполнения);
	ПротоколированиеРаботыСотрудников.ЗаписатьПрерываниеБизнесПроцесса(Процесс);
	ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru='Процесс %1 добавлен в очередь заданий для изменения'"),
		Процесс));
	Возврат Истина;
	
КонецФункции

// Добавляет задание интерактивного прерывания процесса из формы в очередь заданий.
//
// Параметры:
//	Процесс - БизнесПроцессОбъект - Процесс, для которого необходимо добавить задание.
//	ПричинаПрерывания - Строка -
//
Процедура ДобавитьЗаданиеПрерываниеПроцессаИзФормы(Процесс, ПричинаПрерывания) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура;
	ДанныеДляЗаполнения.Вставить("ПричинаПрерывания", ПричинаПрерывания);
	ДанныеДляЗаполнения.Вставить("ОбновитьДанныеПроцесса", Ложь);
	ДанныеДляЗаполнения.Вставить("АвторИзменения", ПользователиДокументооборот.ОлицетворяемыйПользователь());
	// Если у процесса были изменены реквизиты перед прерыванием, то обновляем процесс
	Если Процесс.ДополнительныеСвойства.Свойство("СтарыеУчастникиПроцесса") 
		Или ТипЗнч(Процесс) = Тип("БизнесПроцессОбъект.КомплексныйПроцесс") Тогда
		ДанныеДляЗаполнения.Вставить("ВерсияФормата", КОДСервер.ТекущаяВерсияФормата());
		ДанныеДляЗаполнения.Вставить("ХэшСуммаОбъекта", КОДСервер.ХешСуммаMD5СериализованногоОбъекта(Процесс.Ссылка, ,
			ДанныеДляЗаполнения.ВерсияФормата));	
		ЗаполнитьДанныеПроцессаОтправка(ДанныеДляЗаполнения, Процесс);
		ДанныеДляЗаполнения.Вставить("ОбновитьДанныеПроцесса", Истина);
	КонецЕсли;
	
	ОбработкаОчередиЗаданийСервер.ДобавитьЗаданиеПрерватьПроцесс(Процесс.Ссылка, ДанныеДляЗаполнения);
	
КонецПроцедуры

// Добавляет задание остановки процесса в очередь заданий.
//
// Параметры:
//	Процесс - БизнесПроцессСсылка - Процесс, для которого необходимо добавить задание.
//
// Возвращаемое значение:
//	Булево - Истина - Задание добавлено.
//
Функция ОбработатьПрограмнуюОстановкуПроцесса(Процесс) Экспорт
	
	Если Не ПроцессМожноОбработатьВОчередиЗаданий(Процесс) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеДляЗаполнения = Новый Структура;
	ДанныеДляЗаполнения.Вставить("ОбновитьДанныеПроцесса", Ложь);
	ДанныеДляЗаполнения.Вставить("АвторИзменения", ПользователиДокументооборот.ОлицетворяемыйПользователь());
	ОбработкаОчередиЗаданийСервер.ДобавитьЗаданиеОстановитьПроцесс(Процесс, ДанныеДляЗаполнения);
	ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(Процесс, НСтр("ru='Остановка процесса'"));
	ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru='Процесс %1 добавлен в очередь заданий для изменения'"),
		Процесс));
	Возврат Истина;
	
КонецФункции

// Добавляет задание интерактивной остановки процесса из формы в очередь заданий.
//
// Параметры:
//	Процесс - БизнесПроцессОбъект - Процесс, для которого необходимо добавить задание.
//	ПричинаПрерывания - Строка -
//
Процедура ДобавитьЗаданиеОстановкиПроцессаИзФормы(Процесс) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура;
	ДанныеДляЗаполнения.Вставить("ОбновитьДанныеПроцесса", Ложь);
	ДанныеДляЗаполнения.Вставить("АвторИзменения", ПользователиДокументооборот.ОлицетворяемыйПользователь());
	// Если у процесса были изменены реквизиты перед остановкой, то обновляем процесс
	Если Процесс.ДополнительныеСвойства.Свойство("СтарыеУчастникиПроцесса") 
		Или ТипЗнч(Процесс) = Тип("БизнесПроцессОбъект.КомплексныйПроцесс") Тогда
		ДанныеДляЗаполнения.Вставить("ВерсияФормата", КОДСервер.ТекущаяВерсияФормата());
		ДанныеДляЗаполнения.Вставить("ХэшСуммаОбъекта", КОДСервер.ХешСуммаMD5СериализованногоОбъекта(Процесс.Ссылка, ,
			ДанныеДляЗаполнения.ВерсияФормата));
		ЗаполнитьДанныеПроцессаОтправка(ДанныеДляЗаполнения, Процесс);
		ДанныеДляЗаполнения.Вставить("ОбновитьДанныеПроцесса", Истина);
	КонецЕсли;
	
	ОбработкаОчередиЗаданийСервер.ДобавитьЗаданиеОстановитьПроцесс(Процесс.Ссылка, ДанныеДляЗаполнения);
	
КонецПроцедуры

// Добавляет задание продолжения процесса в очередь заданий.
//
// Параметры:
//	Процесс - БизнесПроцессСсылка - Процесс, для которого необходимо добавить задание.
//
// Возвращаемое значение:
//	Булево - Истина - Задание добавлено.
//
Функция ОбработатьПрограмноеПродолжениеПроцесса(Процесс) Экспорт
	
	Если Не ПроцессМожноОбработатьВОчередиЗаданий(Процесс) Тогда
		Возврат Ложь;
	КонецЕсли;
	ДанныеДляЗаполнения = Новый Структура;
	ДанныеДляЗаполнения.Вставить("АвторИзменения", ПользователиДокументооборот.ОлицетворяемыйПользователь());
	ОбработкаОчередиЗаданийСервер.ДобавитьЗаданиеПродолжитьПроцесс(Процесс, ДанныеДляЗаполнения);
	ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(Процесс, НСтр("ru='Продолжение процесса'"));
	ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru='Процесс %1 добавлен в очередь заданий для изменения'"),
		Процесс));
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеПредметаВЗадачеВУзлахКод

// Добавляет задание указания заполняемого предмета в очередь заданий.
// 
// Параметры:
//  Процесс - БизнесПроцессСсылка - Процесс, для которого необходимо добавить задание.
//  Задача - ЗадачаСсылка - задача, для выполнения которой нужно указать предмет
//  ИмяПредмета - СправочникСсылка.ИменаПредметов - Имя изменяемого предмета.
//  Предмет - ЛюбаяСсылка - указанный предмет
//  Удаление - Булево - признак удаления предмета
// 
// Возвращаемое значение:
//  Булево - Истина - Задание добавлено.
//
Функция СозданоЗаданиеУказатьУдалитьЗаполняемыйПредмет(Процесс, Задача, ИмяПредмета, Предмет, Удаление) Экспорт

	Если Не ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга()
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьКОД")
		Или ОбщегоНазначенияДокументооборот.ОбъектЭтогоУзла(Процесс.ПолучитьОбъект()) Тогда
		Возврат Ложь;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачаИсполнителяПредметы.РольПредмета,
	|	ЗадачаИсполнителяПредметы.Предмет,
	|	ЗадачаИсполнителяПредметы.НомерСтроки
	|ИЗ
	|	Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
	|ГДЕ
	|	ЗадачаИсполнителяПредметы.Ссылка = &Ссылка
	|	И ЗадачаИсполнителяПредметы.ИмяПредмета = &ИмяПредмета";

	Запрос.УстановитьПараметр("Ссылка", Задача);
	Запрос.УстановитьПараметр("ИмяПредмета", ИмяПредмета);

	РезультатЗапроса = Запрос.Выполнить();

	Если Удаление И РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;

	НачатьТранзакцию();

	Попытка

		ОбновитьПредметВЗадачахПроцесса(Процесс, Предмет, ИмяПредмета, Удаление);

		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("ИмяПредмета", Строка(ИмяПредмета));
		ПараметрыВыполнения.Вставить("Предмет", Предмет);
		ПараметрыВыполнения.Вставить("Удаление", Удаление);
		ПараметрыВыполнения.Вставить("АвторИзменения", ПользователиДокументооборот.ОлицетворяемыйПользователь());
		ОбработкаОчередиЗаданийСервер.ДобавитьЗаданиеУказатьУдалитьЗаполняемыйПредмет(Процесс, Задача,
			ПараметрыВыполнения);

		ЗафиксироватьТранзакцию();

	Исключение

		ОтменитьТранзакцию();
		ВызватьИсключение;

	КонецПопытки;

	Возврат Истина;

КонецФункции

// Проверяет, что предмет уже добавлен или удален в процессе.
// 
// Параметры:
//  Процесс - БизнесПроцессСсылка - Процесс, в котором необходимо добавить или удалить предмет.
//  ИмяПредмета - СправочникСсылка.ИменаПредметов - Имя изменяемого предмета.
//  Удаление - Булево - признак удаления предмета
// 
// Возвращаемое значение:
//  Булево - Истина - Предмет добавлен или удален.
//
Функция ЗаполняемыйПредметОбработан(Процесс, ИмяПредмета, Удаление) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПроцесса.Предмет
	|ИЗ
	|	#ТаблицаПроцесса.Предметы КАК ТаблицаПроцесса
	|ГДЕ
	|	ТаблицаПроцесса.Ссылка = &Ссылка
	|	И ТаблицаПроцесса.ИмяПредмета = &ИмяПредмета";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаПроцесса", ОбщегоНазначения.ИмяТаблицыПоСсылке(Процесс));
	Запрос.УстановитьПараметр("Ссылка", Процесс);
	Запрос.УстановитьПараметр("ИмяПредмета", ИмяПредмета);

	РезультатЗапроса = Запрос.Выполнить();
	
	Если Удаление И РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не Удаление И РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;

	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если (Удаление И Не ЗначениеЗаполнено(Выборка.Предмет)) Или (Не Удаление И ЗначениеЗаполнено(Выборка.Предмет)) Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции

#КонецОбласти

// Проверяет, что процесс или его задачи есть в очереди заданий.
// 
// Параметры:
//  Процесс - БизнесПроцессСсылка - 
// 
// Возвращаемое значение:
//  Булево -  Процесс или его задачи есть в очереди заданий
//
Функция ПроцессИлиЕгоЗадачиЕстьВОчередиЗаданий(Процесс) Экспорт
	
	Если Не ЗначениеЗаполнено(Процесс) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не (ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга() И ПолучитьФункциональнуюОпцию(
		"ИспользоватьКОД")) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ОбработкаОчередиЗаданийСервер.ОбъектЕстьВОчереди(Процесс) Тогда
		Возврат Истина;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
	|		ПО ЗадачаИсполнителя.Ссылка = ОчередьЗаданийДокументооборота.ПредметЗадания
	|		И ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	|		И ОчередьЗаданийДокументооборота.СтатусЗадания В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Выполняется),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.ОшибкаВыполнения),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.ОжидаетЗавершенияПодчиненных))
	|		И ОчередьЗаданийДокументооборота.Тип В (ЗНАЧЕНИЕ(Перечисление.ТипыЗаданий.ВыполнениеЗадачи),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыЗаданий.ПеренаправлениеЗадачи),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыЗаданий.ДобавитьУдалитьЗаполняемыйПредмет),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыЗаданий.ПереносСрокаВыполненияЗадачи),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыЗаданий.ОтменитьВыполнениеЗадачи))";
	
	Запрос.УстановитьПараметр("БизнесПроцесс", Процесс);

	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
	
КонецФункции

// Обработать изменение в узле код, учитывает изменения процесса в не родном узле КОД
// 
// Параметры:
//  ТекущийОбъект - БизнесПроцессОбъект - 
//  ПараметрыЗаписи - Структура - 
//
Процедура ОбработатьИзменениеВУзлеКод(ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	ПараметрыЗаписи.Вставить("ЭтоИзменениеПроцессаЧерезОчередьЗаданий", Ложь);
	
	Если Не ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга() Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоСтартПроцесса = РаботаСБизнесПроцессамиХолдингКлиентСервер.ЭтоСтартПроцесса(ПараметрыЗаписи);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЭтоСтартПроцесса", ЭтоСтартПроцесса);
	
	Если РаботаСБизнесПроцессамиХолдингКлиентСервер.ЭтоПрерываниеПроцесса(ПараметрыЗаписи) Тогда
		ДобавитьЗаданиеПрерываниеПроцессаИзФормы(ТекущийОбъект, ПараметрыЗаписи.ПричинаПрерывания);
	ИначеЕсли 	РаботаСБизнесПроцессамиХолдингКлиентСервер.ЭтоОстановкаПроцесса(ПараметрыЗаписи) Тогда
		ДобавитьЗаданиеОстановкиПроцессаИзФормы(ТекущийОбъект);
	ИначеЕсли 	РаботаСБизнесПроцессамиХолдингКлиентСервер.ЭтоПродолжениеПроцесса(ПараметрыЗаписи) Тогда
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("АвторИзменения", ПользователиДокументооборот.ОлицетворяемыйПользователь());
		ОбработкаОчередиЗаданийСервер.ДобавитьЗаданиеПродолжитьПроцесс(ТекущийОбъект.Ссылка, ПараметрыЗадания);
	ИначеЕсли Не ЭтоСтартПроцесса Тогда
		Если ДобавитьЗаданиеОбновитьПроцессБезДействия(ТекущийОбъект) Тогда
			ПараметрыЗаписи.Вставить("ИзменитьПроцессЧерезОчередьЗаданий", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если РаботаСБизнесПроцессамиХолдингКлиентСервер.ЭтоИзменениеПроцессаЧерезОчередьЗаданий(ПараметрыЗаписи) Тогда
		ТекущийОбъект.ОбменДанными.Загрузка = Истина;
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ЭтоИзменениеПроцессаЧерезОчередьЗаданий", Истина);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ОтключитьОтметкиВремени", Истина);
		ПараметрыЗаписи.Вставить("ЭтоИзменениеПроцессаЧерезОчередьЗаданий", Истина);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает Истина, если необходимо добавить ссылку на объект в исключения контроля ссылочной целостности КОД
// 
// Параметры:
//  ПолноеИмяОбъекта - Строка
//  ПутьКДаннымВОбъекте - Строка
//  ПолноеИмяСсылающегосяОбъекта - Строка
//  ПутьКДаннымСсылающегосяОбъекта - Строка
//  
// Возвращаемое значение:
//  Булево
//
Функция ЭтоИсключениеИзКонтроляССылчонойЦелостностиКОД(ПолноеИмяОбъекта, ПутьКДаннымВОбъекте,
		ПолноеИмяСсылающегосяОбъекта, ПутьКДаннымСсылающегосяОбъекта) Экспорт
	
	ПроверяемыеМетаданные = ИсключенияИзКонтроляСсылочнойЦелостностиКОД();
	СоответстиеИсключений = ПроверяемыеМетаданные.Получить(ПолноеИмяОбъекта);
	Если СоответстиеИсключений = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СоответстиеИсключений.Получить(ПолноеИмяСсылающегосяОбъекта) <> Истина Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполнить данные процесса для отправки.
// 
// Параметры:
//  Процесс - БизнесПроцессОбъект - Процесс, для которого необходимо заполнить данные.  
//  ДанныеДляЗаполнения - Структура - данные заполнения
//
Процедура ЗаполнитьДанныеПроцессаОтправка(ДанныеДляЗаполнения, Процесс) Экспорт
	
	ЗаписьСообщения = КОДОтправка.ИнициализироватьЗаписьСообщения(
	ОтметкиВремени.ПредставлениеОтметки(ОтметкиВремени.Текущая()), 0, , , ДанныеДляЗаполнения.ВерсияФормата);
	ПолноеИмяОбъекта = Процесс.Метаданные().ПолноеИмя();
	
	ТипДанных = КОДПовтИсп.ТипДанныхОбмена(ПолноеИмяОбъекта);
	Если ТипДанных = Неопределено Тогда
		ВызватьИсключение 
		СтрШаблон(НСтр("ru = 'Объект %1 не является типом данных КОД'"), ПолноеИмяОбъекта);
	КонецЕсли;
	
	ОбъектXDTO = КОДОтправка.НовыйОбъектXDTO(ТипДанных.ПолноеИмя, ЗаписьСообщения);
	КОДОтправка.ЗаполнитьСсылочныйОбъект(ОбъектXDTO, Процесс, ЗаписьСообщения);
	КОДОтправка.ЗаполнитьОдноименныеСвойстваXDTOРеквизитами(ОбъектXDTO, Процесс, ЗаписьСообщения);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("object");
	ЗаписьСообщения.ФабрикаXDTO.ЗаписатьJSON(ЗаписьJSON, ОбъектXDTO, НазначениеТипаXML.Явное);
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ДанныеДляЗаполнения.Вставить("ОбъектJSON", ЗаписьJSON.Закрыть());

КонецПроцедуры

Функция ЭтоПроцессОбработки(Процесс) Экспорт
	
	Если ТипЗнч(Процесс) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		Возврат ЗначениеЗаполнено(РегистрыСведений.ПроцессыОбработокОбъектов.ОбработкаПоПроцессу(Процесс));
	КонецЕсли;
	
	ВедущаяЗадача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Процесс, "ВедущаяЗадача");
	Если Не ЗначениеЗаполнено(ВедущаяЗадача) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПроцессВедущейЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедущаяЗадача, "БизнесПроцесс");
	
	Возврат ЭтоПроцессОбработки(ПроцессВедущейЗадачи);
	
КонецФункции

// Проверяет, что процесс можно обработать в очереди заданий
// 
// Параметры:
//  Процесс - БизнесПроцессСсылка, БизнесПроцессОбъект -
// 
// Возвращаемое значение:
//  Булево -  Процесс можно обработать в очереди заданий
Функция ПроцессМожноОбработатьВОчередиЗаданий(Знач Процесс) Экспорт
	
	ПроцессСсылка = Неопределено;
	ПроцессОбъект = Неопределено;
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Процесс)) Тогда
		ПроцессСсылка = Процесс;
		ПроцессОбъект = Процесс.ПолучитьОбъект();
	Иначе
		ПроцессСсылка = Процесс.Ссылка;
		ПроцессОбъект = Процесс;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПроцессСсылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга() И ПолучитьФункциональнуюОпцию(
		"ИспользоватьКОД") И ПолучитьФункциональнуюОпцию("ИспользоватьЗадания")
		И Не ОбщегоНазначенияДокументооборот.ОбъектЭтогоУзла(ПроцессОбъект) И Не ЭтоПроцессОбработки(ПроцессСсылка);
		
КонецФункции

// Обновляет предмет в задачах процесса
// 
// Параметры:
//  Процесс - БизнесПроцессСсылка -  Процесс
// 	Предмет - СправочникСсылка.ТемыОбсуждений, СправочникСсылка.Контрагенты, СправочникСсылка.Проекты, СправочникСсылка.ПротоколыМероприятий, ДокументСсылка.ВходящееПисьмо, ДокументСсылка.ИсходящееПисьмо, СправочникСсылка.Файлы, ДокументСсылка.Бронь, СправочникСсылка.ДокументыПредприятия, СправочникСсылка.СообщенияОбсуждений, СправочникСсылка.Мероприятия, СправочникСсылка.ПроектныеЗадачи - указанный предмет
//  ИмяПредмета - СправочникСсылка.ИменаПредметов -  Имя предмета
//  Удаление - Булево -  Удаление
//
Процедура ОбновитьПредметВЗадачахПроцесса(Процесс, Предмет, ИмяПредмета, Удаление)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗадачаИсполнителя.Ссылка КАК ЗадачаСсылка,
	|	ЕСТЬNULL(ЗадачаИсполнителяПредметы.РольПредмета, НЕОПРЕДЕЛЕНО) 
	|	= ЗНАЧЕНИЕ(Перечисление.РолиПредметов.Заполняемый) КАК ЭтоЗаполняемыйПредмет,
	|	ЕСТЬNULL(ЗадачаИсполнителяПредметы.НомерСтроки - 1, НЕОПРЕДЕЛЕНО) КАК НомерСтрокиПредмета
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
	|		ПО ЗадачаИсполнителя.Ссылка = ЗадачаИсполнителяПредметы.Ссылка
	|		И ЗадачаИсполнителяПредметы.ИмяПредмета = &ИмяПредмета
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
	|	И НЕ ЗадачаИсполнителя.Выполнена";
	Запрос.УстановитьПараметр("ИмяПредмета", ИмяПредмета);
	Запрос.УстановитьПараметр("БизнесПроцесс", Процесс);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗадачаОбъект = Выборка.ЗадачаСсылка.ПолучитьОбъект();
		Если Не Удаление Тогда
			Если Выборка.НомерСтрокиПредмета <> Неопределено Тогда
				ЗадачаОбъект.Предметы[Выборка.НомерСтрокиПредмета].Предмет = Предмет;
			Иначе
				СтрокаПредмета = ЗадачаОбъект.Предметы.Добавить();
				СтрокаПредмета.Предмет = Предмет;
				СтрокаПредмета.ИмяПредмета = ИмяПредмета;
				СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Вспомогательный;
				СтрокаПредмета.ДоступноУдаление = Истина;
			КонецЕсли;
		Иначе
			Если Выборка.ЭтоЗаполняемыйПредмет Тогда
				ТекущийПредмет = ЗадачаОбъект.Предметы[Выборка.НомерСтрокиПредмета].Предмет;
				Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ТекущийПредмет)) Тогда
					ЗадачаОбъект.Предметы[Выборка.НомерСтрокиПредмета].Предмет
						= ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(
								ТекущийПредмет.Метаданные().ПолноеИмя()).ПустаяСсылка();
					Предмет = ЗадачаОбъект.Предметы[Выборка.НомерСтрокиПредмета].Предмет;
				Иначе
					ЗадачаОбъект.Предметы[Выборка.НомерСтрокиПредмета].Предмет = Неопределено;
				КонецЕсли;
			Иначе
				ЗадачаОбъект.Предметы.Удалить(Выборка.НомерСтрокиПредмета);
			КонецЕсли;
		КонецЕсли;
		ЗадачаОбъект.ОбменДанными.Загрузка = Истина;
		ЗадачаОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция ИсключенияИзКонтроляСсылочнойЦелостностиКОД()
	
	Соответствие = Новый Соответствие;
	// Шаблон согласования
	СоответствиеСогласование = Новый Соответствие;
	СоответствиеСогласование.Вставить("БизнесПроцесс.Согласование", Истина);
	СоответствиеСогласование.Вставить("БизнесПроцесс.КомплексныйПроцесс", Истина);
	Соответствие.Вставить("Справочник.ШаблоныСогласования", СоответствиеСогласование);
	// Шаблон Исполнения
	СоответствиеИсполнения = Новый Соответствие;
	СоответствиеИсполнения.Вставить("БизнесПроцесс.Исполнение", Истина);
	СоответствиеИсполнения.Вставить("БизнесПроцесс.Рассмотрение", Истина);
	СоответствиеИсполнения.Вставить("БизнесПроцесс.КомплексныйПроцесс", Истина);
	Соответствие.Вставить("Справочник.ШаблоныИсполнения", СоответствиеИсполнения);
	// Шаблон Рассмотрения
	СоответствиеРассмотрения = Новый Соответствие;
	СоответствиеРассмотрения.Вставить("БизнесПроцесс.Рассмотрение", Истина);
	СоответствиеРассмотрения.Вставить("БизнесПроцесс.КомплексныйПроцесс", Истина);
	Соответствие.Вставить("Справочник.ШаблоныРассмотрения", СоответствиеРассмотрения);
	// Шаблон Утверждения
	СоответствиеУтверждения = Новый Соответствие;
	СоответствиеУтверждения.Вставить("БизнесПроцесс.Утверждение", Истина);
	СоответствиеУтверждения.Вставить("БизнесПроцесс.КомплексныйПроцесс", Истина);
	Соответствие.Вставить("Справочник.ШаблоныУтверждения", СоответствиеУтверждения);
	// Шаблон Подписания
	СоответствиеПодписания = Новый Соответствие;
	СоответствиеПодписания.Вставить("БизнесПроцесс.Подписание", Истина);
	СоответствиеПодписания.Вставить("БизнесПроцесс.КомплексныйПроцесс", Истина);
	Соответствие.Вставить("Справочник.ШаблоныПодписания", СоответствиеПодписания);
	// Шаблон Приглашения
	СоответствиеПриглашения = Новый Соответствие;
	СоответствиеПриглашения.Вставить("БизнесПроцесс.Приглашение", Истина);
	СоответствиеПриглашения.Вставить("БизнесПроцесс.КомплексныйПроцесс", Истина);
	Соответствие.Вставить("Справочник.ШаблоныПриглашения", СоответствиеПриглашения);
	// Шаблон Регистрации
	СоответствиеРегистрации = Новый Соответствие;
	СоответствиеРегистрации.Вставить("БизнесПроцесс.Регистрация", Истина);
	СоответствиеРегистрации.Вставить("БизнесПроцесс.КомплексныйПроцесс", Истина);
	Соответствие.Вставить("Справочник.ШаблоныРегистрации", СоответствиеРегистрации);
	// Шаблон Ознакомления
	СоответствиеОзнакомления = Новый Соответствие;
	СоответствиеОзнакомления.Вставить("БизнесПроцесс.Ознакомление", Истина);
	СоответствиеОзнакомления.Вставить("БизнесПроцесс.КомплексныйПроцесс", Истина);
	Соответствие.Вставить("Справочник.ШаблоныОзнакомления", СоответствиеОзнакомления);
	// Шаблон Комплексного процесса
	СоответствиеКП = Новый Соответствие;
	СоответствиеКП.Вставить("БизнесПроцесс.КомплексныйПроцесс", Истина);
	Соответствие.Вставить("Справочник.ШаблоныКомплексныхБизнесПроцессов", СоответствиеКП);
	
	Возврат Соответствие;
	
КонецФункции

#КонецОбласти
