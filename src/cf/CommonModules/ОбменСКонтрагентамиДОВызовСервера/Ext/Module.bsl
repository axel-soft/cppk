
#Область ПрограммныйИнтерфейс

#Область СостоянияДокументовПоЭДО

// Возвращает состояние документа 1С:Документоборот в ЭДО.
//
// Параметры:
//  Документ - ОпределяемыйТип.ДокументДОДляЭДО - Документ, для которого необходимо получить сведения о состоянии.
//  Дата - Дата - Дата, на которую необходимо получить сведения.
//  Контрагент - СправочникСсылка.Контрагенты - Контрагент, для которого необходимо получить сведения.
// 
// Возвращаемое значение:
//  Структура - Содержит свежения о состоянии документа 1С:Документооборот в ЭДО.
//		см. РегистрыСведений.СостояниеДокументовПоЭДО.ПолучитьСостояниеДокумента
//
Функция ПолучитьСостояниеДокумента(Документ, Дата = Неопределено, Контрагент = Неопределено) Экспорт

	Возврат ОбменСКонтрагентамиДОСлужебный.СостояниеДокумента(Документ, Дата, Контрагент);

КонецФункции 

// Удаляет состояние документа документооборота по ЭДО
//
// Параметры:
//  СсылкаНаОбъект - ОпределяемыйТип.ДокументДОДляЭДО
//
Процедура УдалитьСостояниеДокументаЭДО(СсылкаНаОбъект) Экспорт
	
	РегистрыСведений.СостояниеДокументовПоЭДО.Удалить(СсылкаНаОбъект);
	
КонецПроцедуры

// Возвращает состояние версии документа ДО по ЭДО.
// 
// Параметры:
//  ДокументДО - ОпределяемыйТип.ДокументДОДляЭДО - Докуент 1С:Документооборот.
//  Контрагент - СправочникСсылка.Контрагенты - Контрагент по ЭДО.
//  Дата - Дата - Дата и время получения состояния
//  НаправлениеЭДО - ПеречислениеСсылка.НаправленияЭДО - Направление ЭДО для получения состояния
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СостоянияЭДОДокументооборот - состояние версии документа ДО по ЭДО.
Функция ДанныеСостоянияДокументаПоЭДО(ДокументДО, Знач Контрагент = Неопределено, Знач Дата = Неопределено,
	Знач НаправлениеЭДО = Неопределено) Экспорт

	Возврат РегистрыСведений.СостояниеДокументовПоЭДО.ДанныеСостоянияДокументаПоЭДО(
		ДокументДО, Контрагент, Дата, НаправлениеЭДО);

КонецФункции 

#КонецОбласти

#Область ДанныеОДокументеПоЭДО

// Возвращает соответствие документов ЭДО документам Документооборота
// 
// Параметры:
// 	ДокументыДО - Массив из ОпределяемыйТип.ДокументДОДляЭДО
// Возвращаемое значение:
// 	Соответствие из КлючИЗначение:
//     * Ключ - ОпределяемыйТип.ДокументДОДляЭДО - Документ ДО
//     * Значение - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - Электронный документ документа ДО.
Функция ЭлектронныеДокументыДокументовДО(Знач ДокументыДО) Экспорт
	
	ЭлектронныеДокументыПоДокументам = Новый Соответствие;
	
	Для Каждого Документ Из ДокументыДО Цикл
		ЭлектронныеДокументыПоДокументам.Вставить(Документ);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	Файлы.ВладелецФайла КАК ДокументДО
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ПО (Файлы.ТекущаяВерсия = ОбъектыУчетаДокументовЭДО.ОбъектУчета
		|		И ОбъектыУчетаДокументовЭДО.Актуальный)
		|ГДЕ
		|	Файлы.ВладелецФайла В (&Документы)
		|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Документы", ДокументыДО);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЭлектронныеДокументыПоДокументам[Выборка.ДокументДО] = Выборка.ЭлектронныйДокумент;
	КонецЦикла;
	
	Возврат ЭлектронныеДокументыПоДокументам;
	
КонецФункции

// Возвращает электронный документ, связанный с документом 1С:Документооборот
// 
// Параметры:
//  ДокументДО - ОпределяемыйТип.ДокументДОДляЭДО - Документ ДО для которого необходимо получить документ ЭДО
// 
// Возвращаемое значение:
//  ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО, Неопределено -
//              Документ ЭДО с которым связан документ ДО, неопределено, если документа ЭДО не найдено.
Функция ЭлектронныйДокументДокументаДО(Знач ДокументДО) Экспорт
	
	Возврат ОбменСКонтрагентамиДОСлужебный.ЭлектронныйДокументДокументаДО(ДокументДО);
	
КонецФункции

// Возвращает аннулируемый документ по документу аннулирования
// 
// Параметры:
//  ДокументАннулирования - ОпределяемыйТип.ДокументДОДляЭДО - Документ аннулирования
// 
// ВозвращаемоеЗначение:
//  ОпределяемыйТип.ДокументДОДляЭДО, Неопределено - В случае, если переданный документ
//                          является документом аннулирования, то возвращается аннулируемый документ.
//                          Неопределено - в противном случае.
Функция АннулируемыйДокумент(Знач ДокументАннулирования) Экспорт
	
	ДанныеАннулирования = Новый Структура;
	
	ЭтоАннулирование = ОбменСКонтрагентамиДОСлужебный.ЭтоДокументАннулированияЭДО(
		ДокументАннулирования, ДанныеАннулирования);
	
	Если Не ЭтоАннулирование Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеАннулирования.Документ;
	
КонецФункции

// Возвращает данные о запущенных процессах аннулирвоания
// 
// Параметры:
//  Документ - ОпределяемыйТип.ДокументДОДляЭДО - Документ, для которого необходимо получить данные
//                                                    по запущеннып процессам аннулированияЭДО
// 
// Возвращаемое значение:
//  Структура:
//      * ЗапущеноАннулирование - Булево - Указывает, запущено ли аннулирование по документу
//      * АннулированиеЗавершено - Булево - Указывает, завершен ли процесс аннулирования по документу
//      * ДокументАннулирован - Булево - Указывает, аннулирован ли документ
//      * ТребуетсяСоздатьДокумент - Булево - Указывает, необходимо ли создать документ аннулирования
//      * АннулируетсяОтдельнымДокументом - Булево - Указывает, запущено ли аннулирование отдельным документом
//      * Направление - Перечисление.НаправленияЭДО - Направление аннулирования
//      * СообщениеЭДОАннулирования - ДокументСсылка.СообщениеЭДО - Сообщение ЭДО аннулирования
//      * ДокументАннулирования - ОпределяемыйТип.ДокументДОДляЭДО - Документ аннулирования
Функция ЗапущенныеПроцессыАннулированияДокумента(Знач Документ) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЗапущеноАннулирование", Ложь);
	СтруктураВозврата.Вставить("АннулированиеЗавершено", Ложь);
	СтруктураВозврата.Вставить("ДокументАннулирован", Ложь);
	СтруктураВозврата.Вставить("ТребуетсяСоздатьДокумент", Ложь);
	СтруктураВозврата.Вставить("АннулируетсяОтдельнымДокументом", Ложь);
	СтруктураВозврата.Вставить("Направление", Перечисления.НаправленияЭДО.ПустаяСсылка());
	СтруктураВозврата.Вставить("СообщениеЭДОАннулирования", Документы.СообщениеЭДО.ПустаяСсылка());
	СтруктураВозврата.Вставить("ДокументАннулирования", ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ПустойДокументДО());
	
	// Аннулирование по ЭДО добавим позже
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

Функция СведенияОЭДИзФайлаДО(Файл, Версия = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Файл) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Версия) Тогда
		Версия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ТекущаяВерсия");
	КонецЕсли;
	
	ДанныеФайлаИДвоичныеДанные = РаботаСФайламиВызовСервера.ДанныеФайлаИДвоичныеДанные(Файл, Версия);
	
	Возврат СведенияОЭДИзФайла(ПоместитьВоВременноеХранилище(ДанныеФайлаИДвоичныеДанные.ДвоичныеДанные));
	
КонецФункции

// Сведения о формализованном электронном документе из файла
// 
// Параметры:
//  АдресВременногоХранилищаФайла - Строка - Адрес во временном хранилище на двоичные данные файла
// 
// Возвращаемое значение:
//  Структура, Неопределено - Неопределено, если файл не является формализованным. В ином случае:
// * ДатаДокумента - Дата - Дата документа
// * НомерДокумента - Строка - Номер документа
// * СуммаДокумента - Число - Сумма документа
// * ИмяСоздания - Строка - Имя для создания файла формата <Вид документа> №<Номер> от <Дата>
// * Валюта - СправочникСсылка.Валюты - Валюта документа
// * ТипДокументаЭДО - ПеречислениеСсылка.ТипыДокументовЭДО - Тип документа ЭДО
// * ВидДокументаЭДО - СправочникСсылка.ВидыДокументовЭДО - Вид документа ЭДО
Функция СведенияОЭДИзФайла(АдресВременногоХранилищаФайла) Экспорт
	
	Возврат ОбменСКонтрагентамиДОСлужебный.СведенияОЭДИзФайла(АдресВременногоХранилищаФайла);
	
КонецФункции

// Возвращает сертификаты криптографии, принадлежащие пользователю по массиву переданных отпечатков.
// 
// Параметры:
//  МассивОтпечатков - Массив из Строка - Массив отпечатков сертификатов.
//  Пользователь - СправочникСсылка.Пользователи - Пользователь для которого необходимо получить сертификаты.
//                                                 Если не задан - отбираются сертификаты по текущему пользователю.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - Сертификаты принадлежащие пользователю:
//    * Ключ - Строка - Отпечаток сертификата
//    * Значение - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - Ссылка на сертификат
Функция СертификатыПользователяПоОтпечаткам(Знач МассивОтпечатков, Знач Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		ПользовательДляОтбора = Пользователи.ТекущийПользователь();
	Иначе
		ПользовательДляОтбора = Пользователь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка КАК Сертификат,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Отпечаток КАК Отпечаток
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
		|ГДЕ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователь = &Пользователь
		|	И СертификатыКлючейЭлектроннойПодписиИШифрования.Отпечаток В (&Отпечатки)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи.Ссылка,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Отпечаток
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователи КАК
		|		СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК
		|			СертификатыКлючейЭлектроннойПодписиИШифрования
		|		ПО СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи.Ссылка = СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка
		|ГДЕ
		|	СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи.Пользователь = &Пользователь
		|	И СертификатыКлючейЭлектроннойПодписиИШифрования.Отпечаток В (&Отпечатки)";
	Запрос.УстановитьПараметр("Пользователь", ПользовательДляОтбора);
	Запрос.УстановитьПараметр("Отпечатки", МассивОтпечатков);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СертификатыПоОтпечаткам = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		СертификатыПоОтпечаткам.Вставить(Выборка.Отпечаток, Выборка.Сертификат);
	КонецЦикла;
	
	Возврат СертификатыПоОтпечаткам;
	
КонецФункции

Процедура ДополнитьДанныеФайлаДляОткрытияСведениямиЭДО(ДанныеФайла) Экспорт
	
	ДанныеФайла.Вставить("УчаствуетВЭДО", Ложь);
	ДанныеФайла.Вставить("ЭтоXMLФайлаЭДО", Ложь);
	ДанныеФайла.Вставить("НеОткрыватьФормуЭДО", Ложь);
	
	Если НРег(ДанныеФайла.Расширение) <> "xml" Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеФайла.Версия);
	
	ТаблицаЭДПоВерсииФайла = ИнтеграцияЭДО.ЭлектронныеДокументыОбъектовУчета(ОбъектыУчета);
	
	Если ТаблицаЭДПоВерсииФайла.Количество() > 0 Тогда
		ДанныеФайла.УчаствуетВЭДО = Истина;
	КонецЕсли;
	
	СведенияОЭД = СведенияОЭДИзФайлаДО(ДанныеФайла.Ссылка, ДанныеФайла.Версия);
	Если СведенияОЭД <> Неопределено Тогда
		ДанныеФайла.ЭтоXMLФайлаЭДО = Истина;
	КонецЕсли;
	
КонецПроцедуры

#Область ВыполнениеДействийПоЭДО

Процедура ПодготовитьДокументККорректировке(Документ, Контрагент, НаправлениеЭДО, УдалитьЭП, ИдентификаторФормы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДокументыДО.Ссылка КАК Объект,
		|	ЭлектронныеПодписи.ПорядковыйНомер КАК ПорядковыйНомер,
		|	ЭлектронныеПодписи.ИдентификаторПодписи КАК УникальныйИдентификатор,
		|	НЕОПРЕДЕЛЕНО КАК ЭлектронныйДокумент
		|ИЗ
		|	Справочник.%ИмяСправочникаДокументаДО% КАК ДокументыДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|		ПО (ДокументыДО.Ссылка = (ВЫРАЗИТЬ(ЭлектронныеПодписи.ПодписанныйОбъект КАК Справочник.%ИмяСправочникаДокументаДО%)))
		|ГДЕ
		|	ДокументыДО.Ссылка = &Документ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВерсииФайлов.Ссылка КАК Ссылка,
		|	ЭлектронныеПодписи.ПорядковыйНомер КАК ПорядковыйНомер,
		|	ЭлектронныеПодписи.ИдентификаторПодписи КАК ИдентификаторПодписи,
		|	ЕСТЬNULL(ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент, НЕОПРЕДЕЛЕНО) КАК Поле1
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО ВерсииФайлов.Владелец = Файлы.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|		ПО (ВерсииФайлов.Ссылка = (ВЫРАЗИТЬ(ЭлектронныеПодписи.ПодписанныйОбъект КАК Справочник.ВерсииФайлов)))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ПО (ВерсииФайлов.Ссылка = ОбъектыУчетаДокументовЭДО.ОбъектУчета
		|		И ОбъектыУчетаДокументовЭДО.Актуальный)
		|ГДЕ
		|	Файлы.ВладелецФайла = &Документ";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"%ИмяСправочникаДокументаДО%",
		ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ИмяСправочникаДокументовДО());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Документ", Документ);
	
	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(Документ, , ИдентификаторФормы);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
				
				Если УдалитьЭП Тогда
					РаботаСФайламиСлужебныйВызовСервера.УдалитьПодписиВерсииФайла(
						Выборка.Объект,
						Выборка.ПорядковыйНомер,
						Ложь,
						ИдентификаторФормы);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Выборка.ЭлектронныйДокумент) Тогда
					ИнтеграцияЭДО.ОчиститьАктуальностьЭлектронногоДокумента(Выборка.ЭлектронныйДокумент);
				КонецЕсли;
				
			Иначе
				
				Если УдалитьЭП Тогда
					ЭлектроннаяПодпись.УдалитьПодпись(
						Выборка.Объект,
						Выборка.УникальныйИдентификатор,
						ИдентификаторФормы);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДокументОбъект = Документ.ПолучитьОбъект();
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
		
		Для Каждого Сторона Из ДокументОбъект.Стороны Цикл
			Сторона.Подписан = Ложь;
			Сторона.Подписал = Неопределено;
			Сторона.ДатаПодписи = Неопределено;
		КонецЦикла;
		
		ДокументОбъект.Записать();
		
		ДанныеСостояния = ОбменСКонтрагентамиДОСлужебный.НовыеДанныеСостоянияДляУстановки();
		ДанныеСостояния.Состояние = Перечисления.СостоянияЭДОДокументооборот.НеСформирован;
		ДанныеСостояния.Направление = НаправлениеЭДО;
		
		ОбменСКонтрагентамиДОСлужебный.УстановитьСостояниеДокументаЭДО(Документ, Контрагент, ДанныеСостояния);
		
		ЗафиксироватьТранзакцию();
		
		РазблокироватьДанныеДляРедактирования(Документ, ИдентификаторФормы);
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтрШаблон(Нстр("ru = 'При подготовке документа ""%1"" к корректировке произошла ошибка:
										|%2'"),
									Документ,
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ЭДО.Подготовка к документа к корректировке'"),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстСообщения);
			
		ВызватьИсключение ТекстСообщения;
		
	КонецПопытки;
	
КонецПроцедуры

Функция ПоставитьДокументВОчередьФормированияЭД(
			Документ,
			КонтрагентыГотовыеКЭДО = Неопределено,
			ПроверятьПодписанДокумент = Истина,
			УстановитьСостояниеПодписан = Ложь,
			ВыводитьСообщение = Истина) Экспорт
		
	Возврат ОбменСКонтрагентамиДОСервер.ПоставитьДокументВОчередьФормированияЭД(
				Документ,
				КонтрагентыГотовыеКЭДО,
				ПроверятьПодписанДокумент,
				УстановитьСостояниеПодписан,
				ВыводитьСообщение);
		
КонецФункции

// Ставит документы в очередь на отправку документов ЭДО
// 
// Параметры:
//  МассивДокументов - Массив из ОпределяемыйТип.ДокументДОДляЭДО - Массив документов ДО,
//                     которые необходимо поставить в очередь на отправку
// 
// Возвращаемое значение:
//  Структура:
//      * Успех - Булево - Указывает, успешно ли завершилась операция
//      * ПоставленныеВОчередь - Массив из ОпределяемыйТип.ДокументДОДляЭДО - Массив документов ДО
//                               поставленных в очередь
// 
Функция ПоставитьДокументыВОчередьФормированияЭД(Знач МассивДокументов) Экспорт
	
	ПоставленныеВОчередь = Новый Массив;
	
	Для Каждого Документ Из МассивДокументов Цикл
		ПоставленВОчередь = ОбменСКонтрагентамиДОСервер.ПоставитьДокументВОчередьФормированияЭД(
				Документ,
				Неопределено);
		
		Если ПоставленВОчередь Тогда
			ПоставленныеВОчередь.Добавить(Документ);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Успех", (МассивДокументов.Количество() = ПоставленныеВОчередь.Количество()));
	СтруктураВозврата.Вставить("ПоставленныеВОчередь", ПоставленныеВОчередь);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Принудительно закрывает обмен ЭДО документов ДО
// 
// Параметры:
//  МассивДокументов - Массив из ОпределяемыйТип.ДокументДОДляЭДО - Массив документов ДО,
//                     которые необходимо закрыть принудительно
//  ПричинаЗакрытия - Строка - Описание причины закрытия документов.
// 
// Возвращаемое значение:
//  Структура:
//      * Ошибки - Массив из Строка - Описания ошибок, возникших в ходе выполнения операции
//      * ЗакрытыеДокументы - Массив из ОпределяемыйТип.ДокументДОДляЭДО - Массив документов ДО
//                            закрытых принудительно в ходе выполнения операции
//      * КоличествоОбработанныхЭД - Число - Количество ЭД, принудительно закрытых в ходе выполнения операции
// 
Функция ЗакрытьДокументыПринудительно(ДокументыДО, ПричинаЗакрытия) Экспорт
	
	СтруктураВозврата = Новый Структура;
	
	СтруктураВозврата.Вставить("Ошибки", Новый Массив);
	СтруктураВозврата.Вставить("ЗакрытыеДокументы", Новый Массив);
	СтруктураВозврата.Вставить("КоличествоОбработанныхЭД", 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Файлы.ВладелецФайла КАК Документ,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ПО (Файлы.ТекущаяВерсия = ОбъектыУчетаДокументовЭДО.ОбъектУчета
		|		И ОбъектыУчетаДокументовЭДО.Актуальный)
		|ГДЕ
		|	Файлы.ВладелецФайла В (&ДокументыДО)";
	
	Запрос.УстановитьПараметр("ДокументыДО", ДокументыДО);
	
	ЭДДокументовДО = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Документ Из ДокументыДО Цикл
		
		Успех = Истина;
		
		СтрокиЭД = ЭДДокументовДО.НайтиСтроки(Новый Структура("Документ", Документ));
		
		МассивЭД = Новый Массив;
		
		Для Каждого СтрокаЭД Из СтрокиЭД Цикл
			Если ЗначениеЗаполнено(СтрокаЭД.ЭлектронныйДокумент)
				И МассивЭД.Найти(СтрокаЭД.ЭлектронныйДокумент) = Неопределено Тогда
				
				МассивЭД.Добавить(СтрокаЭД.ЭлектронныйДокумент);
			КонецЕсли;
		КонецЦикла;
		
		НачатьТранзакцию();
		Попытка
			
			Если МассивЭД.Количество() > 0 Тогда
				
				НаборДействий = Новый Соответствие;
				ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(
					НаборДействий, Перечисления.ДействияПоЭДО.ЗакрытьПринудительно);
				
				ПараметрыВыполненияДействийЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
				ПараметрыВыполненияДействийЭДО.НаборДействий = НаборДействий;
				ПараметрыВыполненияДействийЭДО.ОбъектыДействий.ЭлектронныеДокументы = МассивЭД;
				
				// @skip-warning МетодНеОбнаружен - этот функционал уже не используется
				ЭлектронныеДокументыЭДО.ВыполнитьДействияПоЭДО(ПараметрыВыполненияДействийЭДО);
				
			КонецЕсли;
			
			СостояниеДокумента = РегистрыСведений.СостояниеДокументовПоЭДО.ПолучитьСостояниеДокумента(
				Документ);
			
			Если СостояниеДокумента.Состояние <> Перечисления.СостоянияЭДОДокументооборот.ЗакрытПринудительно Тогда
				ДанныеСостояния = ОбменСКонтрагентамиДОСлужебный.НовыеДанныеСостоянияДляУстановки();
				ДанныеСостояния.Состояние = Перечисления.СостоянияЭДОДокументооборот.ЗакрытПринудительно;
				ДанныеСостояния.Комментарий = ПричинаЗакрытия;
				
				ОбменСКонтрагентамиДОСлужебный.УстановитьСостояниеДокументаЭДО(
					Документ, СостояниеДокумента.Контрагент, ДанныеСостояния);
			КонецЕсли;
			
			РегистрыСведений.ОшибкиЭДОКИсправлению.УдалитьЗаписьОбОшибке(Документ);
			РегистрыСведений.ОчередьСозданияОбъектовЭДО.УдалитьИзОчереди(Документ);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			СтруктураВозврата.Ошибки.Добавить(
				СтрШаблон(НСтр("ru = 'Не удалось принудительно закрыть обмен по ЭДО документа %1 по причине:'"),
						Документ)
				+ Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Успех = Ложь;
			
		КонецПопытки;
		
		Если Успех Тогда
			СтруктураВозврата.КоличествоОбработанныхЭД = СтруктураВозврата.КоличествоОбработанныхЭД + 1;
			СтруктураВозврата.ЗакрытыеДокументы.Добавить(Документ);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Выполняет процедуры по учету аннулирования ЭДО в 1С:ДО
// 
// Параметры:
//   Документ - ОпределяемыйТип.ДокументДОДляЭДО - Документ ДО по которому инициировано аннулирование
//   ПараметрыАннулирования - Структура:
//       * ВидДокумента - СправочникСсылка.ВидыДокументов - Вид документа,
//                                             по которому инициировано аннулирование
//       * Направление - ПеречислениеСсылка.НаправленияЭДО - Направление аннулирования,
//                                Исходящий - аннулирование инициировано нами
//                                Входящий - аннулирование инициировано контрагентом
//       * УчитыватьНедействующиеДокументы - Булево - Поддерживает ли вид документов учет недействительных документов
//       * ВариантУказанияОтменяющегоДокумента - Перечисление.ВариантыУказанияОтменяющегоДокумента -
//                                               Вариант указания отменяющего документа в виде документа
//       * ОбязательноУказаниеОтменяющегоДокумента - Булево - Обязательно ли указание отменяющего документа
//       * АннулироватьОтдельнымДокументом - Булево - Для аннулирования необходим новый документ ДО
//       * ПараметрыДокументаАннулирования - Структура:
//           * ВидДокументаАннулирования - СправочникСсылка.ВидыДокументов - Вид документа,
//                                            которым учитывается аннулирование ЭДО
//           * ВопросДеятельности - СправочникСсылка.ВопросыДеятельности - Вопрос деятельности документа аннулирования
//           * Ответственный - СправочникСсылка.Пользователи - Ответственный документа аннулирования
//           * Папка - СправочникСсылка.ПапкиДокументов - Папка документа аннулирования
//           * ШаблонНаименования - Строка - Шаблон наименования для создаваемого документа
//           * ШаблонСодержания - Строка - Шаблон содержания для создаваемого документа
// 
Функция ОбработатьАннулирование(Документ, ПараметрыАннулирования) Экспорт
	
	// Аннулирование по ЭДО добавим позже
	Возврат Неопределено;
	
КонецФункции

#Область ИсходящиеДокументы

// Заполняет данные контекста выполнения дейсвий по ЭДО для исходящих докуентов и пакетов ЭДО.
// 
// Параметры:
//  Контекст - Структура - Контекст выполнения действий по исходящим документам ЭДО
//             см. ОбменСКонтрагентамиДОСлужебныйКлиент.НовыйКонтекстВыполненияДействийПоИсходящимДокументам()
//  Документы - Массив из ОпределяемыйТип.ДокументДОДляЭДО - Одиночные документы ЭДО по которым необходимо
//                                                               выполнить действия
//  Пакеты - Массив из УникальныйИдентификатор - УИД пакетов ЭДО по которым необходимо выполнить действия
//  Действия - Массив из Строка - Массив действий для выполнения над документами и пакетами.
//                                см. ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ДействияПоИсходящимДокументам
Процедура ЗаполнитьДанныеКонтекстаДляИсходящихДокументов(Контекст, Знач Документы,
	Знач Пакеты, Знач Действия) Экспорт
	
	ВозможныеДействия = ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ДействияПоИсходящимДокументам();
	
	ДанныеДокументов = ДанныеДокументовДляВыполненияДействийПоИсходящим(Документы);
	ДанныеПакетов = ДанныеПакетовДляВыполненияДействийПоИсходящим(Пакеты);
	
	Контекст.Документы = ДанныеДокументов;
	Контекст.Пакеты = ДанныеПакетов;
	
	ДополнитьДаннымиЗаполненияФормализованныхДокументов(Контекст);
	
	ИсключитьИзОбрабокиИсходящиеДокументы(Контекст, Действия, ДанныеДокументов);
	ИсключитьИзОбрабоктиИсходящиеПакеты(Контекст, Действия, ДанныеПакетов);
	
	Если Действия.Найти(ВозможныеДействия.Подписать) <> Неопределено Тогда
		ЗаполнитьКонтекстДляПодписания(Контекст, ДанныеДокументов, ДанныеПакетов);
	КонецЕсли;
	
	Если Действия.Найти(ВозможныеДействия.Отправить) <> Неопределено Тогда
		
		ЗаполнитьКонтекстДляФормированияЭД(Контекст, ДанныеДокументов, ДанныеПакетов);
		ЗаполнитьКонтекстДляФормированияПакетовЭДО(Контекст, ДанныеПакетов);
		ЗаполнитьКонтекстДляОтправки(Контекст, ДанныеДокументов, ДанныеПакетов);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует ЭД по подписанным документам ДО.
// 
// Параметры:
//  ПараметрыФормирования - Структура -
//                          см. ОбменСКонтрагентамиДОСлужебныйКлиентСервер.НовыеПараметрыФормированияЭДПоДокументамДО
// 
// Возвращаемое значение:
//  Структура - см. ОбменСКонтрагентамиДОСервер.СформироватьЭДПоГотовымДокументамДО
Функция СформироватьЭДПоГотовымДокументамДО(Знач ПараметрыФормирования = Неопределено) Экспорт
	
	Возврат ОбменСКонтрагентамиДОСервер.СформироватьЭДПоГотовымДокументамДО(ПараметрыФормирования);
	
КонецФункции

// Формирует пакеты БЭД для отправки по идентификаторам пакетов ЭДО документов 1С:Документооборот.
// 
// Параметры:
//  ИдентификаторыПакетов - Массив из УникальныйИдентификатор - УИДы пакетов ЭДО документов ДО.
// 
// Возвращаемое значение:
//  Структура - Сформировать пакеты ЭДО:
//   * ОбработанныеПакеты - Соответствие -
//     * Ключ - УникальныйИдентификатор - УИД пакета ДО.
//     * Значение - УникальныйИдентификатор - УИД сформированного пакета БЭД.
//   * ОшибкиФормирования - Соответствие -
//     * Ключ - УникальныйИдентификатор - УИД пакета ДО.
//     * Значение - Строка - Описание ошибки, возникшей при формировании пакета БЭД.
Функция СформироватьПакетыЭДО(Знач ИдентификаторыПакетов) Экспорт
	
	Возврат ОбменСКонтрагентамиДОСервер.СформироватьПакетыЭДО(ИдентификаторыПакетов);
	
КонецФункции

// Ставит переданным документами и пакетам к отправке состояние по ЭДО в
//  Перечисления.СостоянияЭДОДокументооборот.ПоставленВОчередьНаОтправку.
//  Указывает на то, что по документу была запущена процедура отправки оператору ЭДО.
// 
// Параметры:
//  ДанныеДляОтправки - Структура:
//    * Документы - Соответствие Из КлючИЗначение:
//      ** Ключ - ОпределяемыйТип.ДокументДОДляЭДО - Документ ДО, по которому происходит отправка.
//      ** Значение - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - Документ ЭДО,
//                                                                     связанный с отправляемым документом ДО
//    * Пакеты - Соответствие Из КлючИЗначение:
//      ** Ключ - УникальныйИдентификатор - УИД пакета ЭДО, по которому происходит отправка.
//      ** Значение - УникальныйИдентификатор - УИД пакета БЭД, связанный с отправляемым пакетом ДО
// 
// Возвращаемое значение:
//  Структура - Поставить в очередь на отправку:
//    * ПоставленныеВОчередьНаОтправку - Структура -:
//      ** Документы - Соответствие -
//        *** Ключ - ОпределяемыйТип.ДокументДОДляЭДО - Обработанный документ.
//        *** Значение - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - Документ ЭДО,
//                                                                        связанный с отправляемым документом ДО
//      ** Пакеты - Соответствие -
//        *** Ключ - УникальныйИдентификатор - УИД обработанного пакета
//        *** Значение - УникальныйИдентификатор - УИД пакета БЭД, связанный с отправляемым пакетом ДО
//    * ОшибкиУстановкиСтатуса - Структура -:
//      ** Документы - Соответствие -
//        *** Ключ - ОпределяемыйТип.ДокументДОДляЭДО - Документ, который не удалось обработать.
//        *** Значение - Строка - Описание ошибки установки статуса
//      ** Пакеты - Соответствие -
//        *** Ключ - УникальныйИдентификатор - УИД пакета, который не удалось обработать
//        *** Значение - Строка - Описание ошибки установки статуса
Функция ПоставитьВОчередьНаОтправку(Знач ДанныеДляОтправки) Экспорт
	
	РезультатУстановкиСтатусов = Новый Структура;
	
	ПоставленныеВОчередьНаОтправку = Новый Структура;
	ПоставленныеВОчередьНаОтправку.Вставить("Документы", Новый Соответствие);
	ПоставленныеВОчередьНаОтправку.Вставить("Пакеты", Новый Соответствие);
	
	РезультатУстановкиСтатусов.Вставить("ПоставленныеВОчередьНаОтправку", ПоставленныеВОчередьНаОтправку);
	
	ОшибкиУстановкиСтатуса = Новый Структура;
	ОшибкиУстановкиСтатуса.Вставить("Документы", Новый Соответствие);
	ОшибкиУстановкиСтатуса.Вставить("Пакеты", Новый Соответствие);
	
	РезультатУстановкиСтатусов.Вставить("ОшибкиУстановкиСтатуса", ОшибкиУстановкиСтатуса);
	
	ДанныеПоСтатусам = ДанныеДляУстановкиСтатусаОтправки(ДанныеДляОтправки);
	
	Для Каждого ЭлементДокумента Из ДанныеПоСтатусам.Документы Цикл
		
		Документ = ЭлементДокумента.Ключ;
		ДанныеСостояния = ЭлементДокумента.Значение;
		
		Результат = ПоставитьВОчередьОтправкиДокумент(Документ, ДанныеСостояния);
		
		Если Результат.Успех Тогда
			РезультатУстановкиСтатусов.ПоставленныеВОчередьНаОтправку.Документы.Вставить(
				Документ, ДанныеДляОтправки.Документы[Документ]);
		Иначе
			РезультатУстановкиСтатусов.ОшибкиУстановкиСтатуса.Документы.Вставить(
				Документ, Результат.ОписаниеОшибки);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементПакета Из ДанныеПоСтатусам.Пакеты Цикл
		
		ИдентификаторПакета = ЭлементПакета.Ключ;
		ДанныеПоСтатусамДокументовПакета = ЭлементПакета.Значение;
		
		Результат = ПоставитьВОчередьОтправкиПакет(ИдентификаторПакета, ДанныеПоСтатусамДокументовПакета);
		
		Если Результат.Успех Тогда
			РезультатУстановкиСтатусов.ПоставленныеВОчередьНаОтправку.Пакеты.Вставить(
				ИдентификаторПакета, ДанныеДляОтправки.Пакеты[ИдентификаторПакета]);
		Иначе
			РезультатУстановкиСтатусов.ОшибкиУстановкиСтатуса.Пакеты.Вставить(
				ИдентификаторПакета, Результат.ОписаниеОшибки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатУстановкиСтатусов;
	
КонецФункции

#КонецОбласти

#Область ВходящиеДокументы

// Заполняет данные контекста выполнения приема документов по ЭДО.
// 
// Параметры:
//  Контекст - Структура - см. ОбменСКонтрагентамиДОСлужебныйКлиент.НовыйКонтекстПриемаДокументовПоЭДО
//  Документы - Массив из ОпределяемыйТип.ДокументДОДляЭДО - Документы ДО, которые необходимо принять по ЭДО
//  Пакеты - Массив из УникальныйИдентификатор - УИДы пакетов ЭДО, которые необходимо принять
Процедура ЗаполнитьДанныеКонтекстаДляПриемаПоЭДО(Контекст, Знач Документы, Знач Пакеты) Экспорт
	
	ДанныеДокументов = ДанныеДокументовДляОбработкиВходящих(Документы);
	ДанныеПакетов = ДанныеПакетовДляОбработкиВходящих(Пакеты);
	
	Контекст.Документы = ДанныеДокументов;
	Контекст.Пакеты = ДанныеПакетов;
	
	ДокументыКСозданиюОтветногоТитула = ДокументыЭДОТребующиеФормированияОтветногоТитула(ДанныеДокументов, ДанныеПакетов);
	
	ИсключитьВходящиеДокументыИзОбработки(Контекст, ДанныеДокументов, ДанныеПакетов);
	ИсключитьВходящиеПакетыИзОбработки(Контекст, ДанныеПакетов);
	
	Если ДокументыКСозданиюОтветногоТитула.Количество() >= 2 Тогда
		ИсключитьВходящиеОбъектыПоНесформированнымОтветнымТитулам(
			Контекст, ДанныеДокументов, ДанныеПакетов, ДокументыКСозданиюОтветногоТитула);
	Иначе
		Контекст.ДокументыЭДОКСозданиюОтветногоТитула = ДокументыКСозданиюОтветногоТитула;
	КонецЕсли;
	
	ЗаполнитьДокументыДОКПодписаниюПоВходящим(Контекст, ДанныеДокументов, ДанныеПакетов);
	ЗаполнитьОбъектыЭДОКПриему(Контекст, ДанныеДокументов, ДанныеПакетов);
	
КонецПроцедуры

// Заполняет данные контекста выполнения отклонения документов по ЭДО.
// 
// Параметры:
//  Контекст - Структура - см. ОбменСКонтрагентамиДОСлужебныйКлиент.НовыйКонтекстОтклоненияДокументовПоЭДО
//  Документы - Массив из ОпределяемыйТип.ДокументДОДляЭДО - Документы ДО, которые необходимо отклонить по ЭДО
//  Пакеты - Массив из УникальныйИдентификатор - УИДы пакетов ЭДО, которые необходимо отклонить
Процедура ЗаполнитьДанныеКонтекстаДляОтклоненияПоЭДО(Контекст, Знач Документы, Знач Пакеты) Экспорт
	
	ДанныеДокументов = ДанныеДокументовДляОбработкиВходящих(Документы);
	ДанныеПакетов = ДанныеПакетовДляОбработкиВходящих(Пакеты);
	
	Контекст.Документы = ДанныеДокументов;
	Контекст.Пакеты = ДанныеПакетов;
	
	ИсключитьВходящиеДокументыИзОбработки(Контекст, ДанныеДокументов, ДанныеПакетов, Ложь);
	ИсключитьВходящиеПакетыИзОбработки(Контекст, ДанныеПакетов, Ложь);
	
	ЗаполнитьОбъектыЭДОКОтклонению(Контекст, ДанныеДокументов, ДанныеПакетов);
	
КонецПроцедуры

// Заносит подписи к документами и файлам после приема входящего ЭДО
// 
// Параметры:
//  ПодписанныеДанные - Массив из Структура:
//   * ПодписанныйОбъект - ЛюбаяСсылка - Подписанный объект
//   * СвойстваПодписи - Структура - Свойства подписи
//   * ПараметрыВыполнения - Структура - Параметры выполнения подписания
//  ИдентификаторФормы - УникальныйИдентификатор - УИД формы из которой вызывается операция
// 
// Возвращаемое значение:
//  Структура - Записать подписи документов после приема ЭДО:
//   * ПодписанныеОбъекты - Массив Из ОпределяемыйТип.ПодписанныйОбъект - Объекты, к которым были занесены подписи
//   * ОбработанныеДокументы - Массив Из ОпределяемыйТип.ДокументДОДляЭДО - Документы, которые были обработаны
Функция ЗаписатьПодписиДокументовПослеПриемаЭДО(Знач ПодписанныеДанные, Знач ИдентификаторФормы) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ПодписанныеОбъекты", Новый Массив);
	СтруктураВозврата.Вставить("ОбработанныеДокументы", Новый Массив);
	
	ОбъектыПоТипам = ПодписанныеОбъектыПоТипам(ПодписанныеДанные);
	
	НеобходимостьЗанесенияПодписей = НеобходимостьЗанесенияПодписейДокументов(ОбъектыПоТипам.Документы);
	ДокументыФайлов = ДокументыФайлов(ОбъектыПоТипам.Файлы);
	
	ПодписанныеДанныеКЗанесению = Новый Массив;
	
	Для Каждого Элемент Из ПодписанныеДанные Цикл
		
		Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Элемент.ПодписанныйОбъект) Тогда
			
			Документ = Элемент.ПодписанныйОбъект;
			
			Если НеобходимостьЗанесенияПодписей[Документ] = Истина Тогда
				
				ПодписанныеДанныеКЗанесению.Добавить(Элемент);
				СтруктураВозврата.ПодписанныеОбъекты.Добавить(Документ);
				СтруктураВозврата.ОбработанныеДокументы.Добавить(Документ);
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если ДелопроизводствоКлиентСервер.ЭтоФайл(Элемент.ПодписанныйОбъект) Тогда
			
			Файл = Элемент.ПодписанныйОбъект;
			Документ = ДокументыФайлов[Файл];
			
			Если НеобходимостьЗанесенияПодписей[Документ] = Истина Тогда
				
				ПодписанныеДанныеКЗанесению.Добавить(Элемент);
				СтруктураВозврата.ПодписанныеОбъекты.Добавить(Файл);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	РаботаСЭП.ЗанестиИнформациюОПодписях(ПодписанныеДанныеКЗанесению, ИдентификаторФормы);
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

// Формирует документы ДО на основании входящих ЭДО
// 
// Возвращаемое значение:
//	Структура -- См. ОбменСКонтрагентамиДОСервер.СоздатьДокументыДОПоВходящимЭДОАвтоматически()
Функция СоздатьДокументыДОПоВходящимЭДОАвтоматически() Экспорт
	
	Возврат ОбменСКонтрагентамиДОСервер.СоздатьДокументыДОПоВходящимЭДОАвтоматически();
	
КонецФункции

#КонецОбласти

#Область ПакетыЭДО

// Возвращает ИД пакета ЭДО к которому принадлежит документ ДО.
// 
// Параметры:
//  Документ - ОпределяемыйТип.ДокументДОДляЭДО - Документ ДО 
// 
// Возвращаемое значение:
//  УникальныйИдентификатор - Пакет документов ЭДО
Функция ПакетДокумента(Знач Документ) Экспорт
	
	Возврат ОбменСКонтрагентамиДОСлужебный.ПакетДокумента(Документ)
	
КонецФункции

// Объединяет документы ДО в исходящий пакет по ЭДО
// 
// Параметры:
//  Документы - Массив из ОпределяемыйТип.ДокументДОДляЭДО - Документы, которые необходимо объединить
//                                                               в исходящий по ЭДО пакет.
// 
// Возвращаемое значение:
//  Структура - Результат объединения:
//    * Успех - Булево - Удалось ли объединить документы в пакет
//    * ОписаниеОшибки - Строка - Описание ошибки, если создать пакет не удалось
//    * ИдентификаторПакета - УникальныйИдентификатор - УИД созданного пакета
//    * Организация - СправочникСсылка.Организации - Организация пакета
//    * Контрагент - СправочникСсылка.Контрагенты - Контрагент, которому необходимо отправить пакет
Функция ОбъединитьДокументыВИсходящийПакетЭДО(Знач Документы) Экспорт
	
	Возврат ОбменСКонтрагентамиДОСлужебный.ОбъединитьДокументыВИсходящийПакетЭДО(Документы);
	
КонецФункции

// Изменяет состав исходящего по ЭДО пакета документов.
//  Если в составе пакета остается менее 2-х документов, то пакет удаляется.
// 
// Параметры:
//  ИдентификаторПакета - УникальныйИдентификатор - УИД пакета, состав которого необходимо изменить
//  ДобавляемыеДокументы - Массив из ОпределяемыйТип.ДокументДОДляЭДО - Документы к добавлению в пакет
//  УдаляемыеДокументы - Массив из ОпределяемыйТип.ДокументДОДляЭДО - Документы к удалению из состава пакета
// 
// Возвращаемое значение:
//  Структура - Результат изменения состава пакета:
// * Успех - Булево - Удалось ли выполнить операцию
// * ОписаниеОшибки - Строка - Описание ошибки, если изменить состав пакета не удалось
// * ПакетУдален - Булево - Указывает, если в ходе изменения состава пакет был удален
Функция ИзменитьСоставИсходящегоПакетаЭДО(Знач ИдентификаторПакета, Знач ДобавляемыеДокументы,
	Знач УдаляемыеДокументы) Экспорт
	
	Возврат ОбменСКонтрагентамиДОСлужебный.ИзменитьСоставИсходящегоПакетаЭДО(ИдентификаторПакета,
		ДобавляемыеДокументы, УдаляемыеДокументы);
	
КонецФункции

#КонецОбласти

// Возвращает данные сертификатов доступных для подписания по ЭДО для документов.
// 
// Параметры:
//  Документы - Массив из ОпределяемыйТип.ДокументДОДляЭДО - Документы для которых необходимо получить
//                                                               даныне сертификатов для подписания по ЭДО.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//    * Ключ - ОпределяемыйТип.ДокументДОДляЭДО - Документ ДО
//    * Значение - Соответствие из КлючИЗначение - Данные сертификатов для подписания по ЭДО документа:
//      ** Ключ - Строка - Отпечаток сертификата
//      ** Значение см. НовыеДанныеСертификатаЭДО
//  
Функция СертификатыЭДОДляДокументов(Знач Документы) Экспорт
	
	СертификатыЭДОДокументов = Новый Соответствие;
	Для Каждого Документ Из Документы Цикл
		СертификатыЭДОДокументов.Вставить(Документ, Новый Соответствие);
	КонецЦикла;
	
	ИдентификаторыЭДОДокументов = ИдентификаторыОрганизацииЭДОДокументов(Документы);
	
	УникальныеИдентификаторыЭДО = Новый Соответствие();
	Для Каждого Элемент Из ИдентификаторыЭДОДокументов Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			УникальныеИдентификаторыЭДО.Вставить(Элемент.Значение, Истина);
		КонецЕсли;
	КонецЦикла;
	
	МассивУникальныхИдентификаторовЭДО = Новый Массив;
	Для Каждого Элемент Из УникальныеИдентификаторыЭДО Цикл
		МассивУникальныхИдентификаторовЭДО.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	СертификатыЭДОУчетныхЗаписей = СертификатыЭДОПоУчетнымЗаписям(МассивУникальныхИдентификаторовЭДО);
	
	СертификатыНаСервере = ОтпечаткиСертификатовДоступныхНаСервере();
	
	Для Каждого Элемент Из СертификатыЭДОДокументов Цикл
		
		Документ = Элемент.Ключ;
		ДанныеСертификатовПоОтпечаткам = Элемент.Значение;
		
		ИдентификаторЭДО = ИдентификаторыЭДОДокументов.Получить(Документ);
		
		Если Не ЗначениеЗаполнено(ИдентификаторЭДО) Тогда
			Продолжить;
		КонецЕсли;
		
		СертификатыИдентификатораЭДО = СертификатыЭДОУчетныхЗаписей.Получить(ИдентификаторЭДО);
		
		Если СертификатыИдентификатораЭДО = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ЭлементСертификата Из СертификатыИдентификатораЭДО Цикл
			
			Отпечаток = ЭлементСертификата.Ключ;
			ДанныеСертификатаЭДО = ЭлементСертификата.Значение;
			
			ДоступенНаСервере = (СертификатыНаСервере.Получить(Отпечаток) = Истина);
			
			ДанныеСертификата = НовыеДанныеСертификатаЭДО();
			ДанныеСертификата.Ссылка = ДанныеСертификатаЭДО.Ссылка;
			ДанныеСертификата.ДоступенПользователям = ДанныеСертификатаЭДО.ДоступенПользователям;
			ДанныеСертификата.ДействителенДо = ДанныеСертификатаЭДО.ДействителенДо;
			ДанныеСертификата.ДоступенНаСервере = ДоступенНаСервере;
			ДанныеСертификата.Доверенность = ДанныеСертификатаЭДО.Доверенность;
			
			ДанныеСертификатовПоОтпечаткам.Вставить(Отпечаток, ДанныеСертификата);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СертификатыЭДОДокументов;
	
КонецФункции

Функция РольФайловДляОтправкиПоЭДО(ВидДокумента) Экспорт
	
	Возврат ОбменСКонтрагентамиДОСлужебный.РольФайловДляОтправкиПоЭДО(ВидДокумента);
	
КонецФункции

// Заполняет документ ЭДО данными при подписании
// 
// Параметры:
//  ПодписываемыеДанные - СправочникСсылка.Файлы
//  ДанныеДляЗаполненияЭДО - см. ФорматыЭДОДокументооборотКлиентСервер.НовыеДанныеДляЗаполненияФормализованногоДокумента
//  Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  Структура:
// * ДвоичныеДанные - Неопределено, ДвоичныеДанные - Двоичные данные файла, если он изменен
// * ДанныеИзменены - Булево - Истина, если в ходе заполнения изменились данные файла
//
Функция ЗаполнитьДокументЭДОПриПодписании(Знач ПодписываемыеДанные, Знач ДанныеДляЗаполненияЭДО,
		Знач Сертификат, Знач Доверенность) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ДвоичныеДанные", Неопределено);
	Результат.Вставить("ДанныеИзменены", Ложь);
	
	ДанныеФайлаИДвоичныеДанные = РаботаСФайламиВызовСервера.ДанныеФайлаИДвоичныеДанные(ПодписываемыеДанные);
	
	ДвоичныеДанные = ДанныеФайлаИДвоичныеДанные.ДвоичныеДанные;
	Расширение = ДанныеФайлаИДвоичныеДанные.ДанныеФайла.Расширение;
	
	Результат.ДвоичныеДанные = ДвоичныеДанные;
	
	Если ВРег(Расширение) <> ВРег("xml") Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
	ОписаниеФайла.ДвоичныеДанные = ДвоичныеДанные;
	ОписаниеФайла.ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
		ДанныеФайлаИДвоичныеДанные.ДанныеФайла.ПолноеНаименованиеВерсии,
		ДанныеФайлаИДвоичныеДанные.ДанныеФайла.Расширение);
	
	Если ДанныеДляЗаполненияЭДО.ПодписантДокумента = Неопределено Тогда
		ДанныеДляЗаполненияЭДО.ПодписантДокумента =
			ФорматыЭДОДокументооборотКлиентСервер.НовыеДанныеПодписантаДокумента();
	КонецЕсли;
	
	ДанныеДляЗаполненияЭДО.ПодписантДокумента.Сертификат = Сертификат;
	ДанныеДляЗаполненияЭДО.ПодписантДокумента.Доверенность = Доверенность;
	
	РезультатЗаполнения =
		ФорматыЭДОДокументооборот.ЗаполнитьДанныеФормализованногоДокумента(ОписаниеФайла, ДанныеДляЗаполненияЭДО);
	
	Если Не РезультатЗаполнения.ДанныеИзменены Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.ДвоичныеДанные = РезультатЗаполнения.ДвоичныеДанные;
	Результат.ДанныеИзменены = РезультатЗаполнения.ДанныеИзменены;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеФайлаСУчетомПодписания(ПодписываемыеДаннные, ОтпечатокСертификата,
		Доверенности) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ДвоичныеДанные", Неопределено);
	Результат.Вставить("ДанныеИзменены", Ложь);
	
	ДанныеФайлаИДвоичныеДанные = РаботаСФайламиВызовСервера.ДанныеФайлаИДвоичныеДанные(ПодписываемыеДаннные);
	
	ДвоичныеДанные = ДанныеФайлаИДвоичныеДанные.ДвоичныеДанные;
	
	Результат.ДвоичныеДанные = ДвоичныеДанные;
	
	Расширение = ДанныеФайлаИДвоичныеДанные.ДанныеФайла.Расширение;
	
	Если ВРег(Расширение) <> ВРег("xml") Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
	ОписаниеФайла.ДвоичныеДанные = ДвоичныеДанные;
	ОписаниеФайла.ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
		ДанныеФайлаИДвоичныеДанные.ДанныеФайла.ПолноеНаименованиеВерсии,
		ДанныеФайлаИДвоичныеДанные.ДанныеФайла.Расширение);
	
	СодержаниеДокумента = ФорматыЭДО.ПрочитатьСодержаниеДокумента(ОписаниеФайла);
	Если СодержаниеДокумента = Неопределено
		Или Не ФорматыЭДО.ЗаполнениеДанныхПодписантаДоступно(СодержаниеДокумента) Тогда
		
		Возврат Результат;
		
	Иначе
		
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодписываемыеДаннные, "ВладелецФайла.Организация");
		
		Сертификат = Неопределено;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка
			|ИЗ
			|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
			|ГДЕ
			|	СертификатыКлючейЭлектроннойПодписиИШифрования.Отпечаток = &Отпечаток";
		Запрос.УстановитьПараметр("Отпечаток", ОтпечатокСертификата);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Сертификат = Выборка.Ссылка;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Сертификат) Тогда
			Возврат Результат;
		КонецЕсли;
		
		ОписаниеФайла = ФорматыЭДО.ЗаполнитьДанныеПодписантаДокумента(
			ОписаниеФайла, Организация, Сертификат, СодержаниеДокумента);
		
		Если ТипЗнч(Доверенности) = Тип("Массив") Тогда
			
			ДоверенностиДляЗанесенияВДокумент = Новый Массив;
			Для Каждого Доверенность Из Доверенности Цикл
				Если ЗначениеЗаполнено(Доверенность) Тогда
					ДоверенностиДляЗанесенияВДокумент.Добавить(Доверенность);
				КонецЕсли;
			КонецЦикла;
			
			Если ДоверенностиДляЗанесенияВДокумент.Количество() > 0
				И ФорматыЭДО.ЗаполнениеДанныхДоверенностиДоступно(СодержаниеДокумента) Тогда
				
				ОписаниеФайла = ФорматыЭДО.ЗаполнитьДанныеДоверенностейДокумента(
					ОписаниеФайла, Организация, ДоверенностиДляЗанесенияВДокумент, СодержаниеДокумента);
			КонецЕсли;
			
		КонецЕсли;
		
		Результат.ДвоичныеДанные = ОписаниеФайла.ДвоичныеДанные;
		Результат.ДанныеИзменены = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ОтражениеДокументовВДО

// Заполняет контекст отражения входящего документа ЭДО
// 
// Параметры:
//  КонтекстОтражения - Структура - см. ОбменСКонтрагентамиДОСлужебныйКлиентСервер.НовыйКонтекстОтраженияДокументовВДО()
Процедура ЗаполнитьКонтекстОтраженияДокументовВДО(КонтекстОтражения) Экспорт
	
	ОбменСКонтрагентамиДОСлужебный.ЗаполнитьКонтекстОтраженияДокументовВДО(КонтекстОтражения);
	
КонецПроцедуры

// Виды документов доступные для отражения входящих ЭДО.
// 
// Возвращаемое значение:
//  Массив Из СправочникСсылка.ВидыДокументов - Виды документов доступные для отражения входящих ЭДО
Функция ВидыДокументовДоступныеДляОтраженияВходящихЭДО() Экспорт
	
	Возврат ОбменСКонтрагентамиДОСлужебный.ВидыДокументовДоступныеДляОтраженияВходящихЭДО();
	
КонецФункции

// Данные по отражению входящего документа ЭДО.
// 
// Параметры:
//  ДокументЭДО - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - Документ ЭДО
// 
// Возвращаемое значение:
//  Структура:
// * ТребуетОтражения - Булево - Стоит ли документ в списке к созданию документов ДО
// * ОжидаетАвтоматическогоОтражения - Булево - Должен ли документ обрабатываться регламентным заданием
// * ЕстьДокументДО - Булево - Создан ли документ ДО по входящему ЭДО
Функция ДанныеПоОтражениюДокументаЭДО(Знач ДокументЭДО) Экспорт
	
	Возврат ОбменСКонтрагентамиДОСлужебный.ДанныеПоОтражениюДокументаЭДО(ДокументЭДО);
	
КонецФункции

// Снимает входящий ЭДО с автоматического отражения в документах ДО
// 
// Параметры:
//  ДокументЭДО - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - Документ ЭДО
Процедура СнятьДокументЭДОСАвтоматическогоСоздания(Знач ДокументЭДО) Экспорт
	
	РегистрыСведений.ДокументыЭДОКСозданиюВДО.СнятьДокументСАвтоматическогоСоздания(ДокументЭДО);
	
КонецПроцедуры

// Удаляет входящий ЭДО из списка к созданию документов ДО
// 
// Параметры:
//  ДокументЭДО - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - Документ ЭДО
Процедура УдалитьДокументЭДОИзСпискаКСозданиювДО(Знач ДокументЭДО) Экспорт
	
	РегистрыСведений.ДокументыЭДОКСозданиюВДО.УдалитьДокументИзСпискаКОтражению(ДокументЭДО);
	
КонецПроцедуры


// Начинает автоматическое отражение входящих документов ЭДО
// 
// Параметры:
//  ИдентификаторФормы - УникальныйИдентификатор - УИД формы из которой запущена операция
// 
// Возвращаемое значение:
//  Структура - Описание длительной операции см. ДлительныеОперации.ВыполнитьФункцию()
Функция НачатьАвтоматическоеОтражениеВходящихЭДО(Знач ИдентификаторФормы) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(ИдентификаторФормы);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Автоматическое создание документов 1С:Документооборот по входящим ЭДО.'");
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
		"ОбменСКонтрагентамиДОСервер.СоздатьДокументыДОПоВходящимЭДОАвтоматически");
	
КонецФункции

// Ставит входящий ЭДО в очередь автоматического отражения в документах ДО
// 
// Параметры:
//  ДокументЭДО - ДокументСсылка.ЭлектронныйДокументВходящийЭДО - Документ ЭДО
Функция ПоставитьДокументыЭДОКАвтоматическомуОтражению(Знач ДокументыЭДО) Экспорт
	
	СтруктураВозврата = Новый Структура;
	
	СтруктураВозврата.Вставить("Ошибки", Новый Массив);
	СтруктураВозврата.Вставить("ОбработанныеДокументы", Новый Массив);
	
	Для Каждого Документ Из ДокументыЭДО Цикл
		
		Успех = Истина;
		
		Попытка
			РегистрыСведений.ДокументыЭДОКСозданиюВДО.ДобавитьДокументКОтражениюВДО(Документ, Истина);
		Исключение
			ОписаниеОшибки = СтрШаблон(
				НСтр("ru = 'не удалось отметить документ ЭДО %1 к автоматическому созданию документа 1С:Документооборот по причине:'"),
					Документ)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			СтруктураВозврата.Ошибки.Добавить(ОписаниеОшибки);
			Успех = Ложь;
		КонецПопытки;
		
		Если Успех Тогда
			СтруктураВозврата.ОбработанныеДокументы.Добавить(Документ);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВыполнениеДействийПоЭДО

#Область ИсходящиеДокументы

Процедура ИсключитьИзОбрабокиИсходящиеДокументы(Контекст, Действия, ДанныеДокументов)
	
	ДокументыКИсключениюИзОбработки = Новый Массив;
	ОшибкиОбработкиДокументов = Контекст.ОшибкиОбработки.Документы;
	
	ВозможныеДействия = ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ДействияПоИсходящимДокументам();
	
	ЕстьДействиеПодписания = (Действия.Найти(ВозможныеДействия.Подписать) <> Неопределено);
	ЕстьДействиеОтправки = (Действия.Найти(ВозможныеДействия.Отправить) <> Неопределено);
	
	Для Каждого ЭлементДокумента Из ДанныеДокументов Цикл
		
		Документ = ЭлементДокумента.Ключ;
		ДанныеДокумента = ЭлементДокумента.Значение;
		
		Если Не ЕстьДействиеПодписания И Не ЕстьДействиеОтправки Тогда
			ОписаниеОшибки =
				НСтр("ru = 'Нет действий для выполнения.'");
			
			ОшибкиОбработкиДокументов.Вставить(Документ, ОписаниеОшибки);
			ДокументыКИсключениюИзОбработки.Добавить(Документ);
			Продолжить;
		КонецЕсли;
		
		Если ДанныеДокумента.Направление <> Перечисления.НаправленияЭДО.Исходящий Тогда
			ОписаниеОшибки =
				НСтр("ru = 'Документ исключен из обработки, он не является исходящим.'");
			
			ОшибкиОбработкиДокументов.Вставить(Документ, ОписаниеОшибки);
			ДокументыКИсключениюИзОбработки.Добавить(Документ);
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеДокумента.ИдентификаторПакета) Тогда
			ОписаниеОшибки =
				НСтр("ru = 'Документ исключен из обработки, поскольку он состоит в пакете ЭДО.
				|Выполнение операций отправки может производиться только по пакету целиком.'");
			
			ОшибкиОбработкиДокументов.Вставить(Документ, ОписаниеОшибки);
			ДокументыКИсключениюИзОбработки.Добавить(Документ);
			Продолжить;
		КонецЕсли;
		
		Если ДанныеДокумента.Состояние <> Перечисления.СостоянияЭДОДокументооборот.НеСформирован
			И ДанныеДокумента.Состояние <> Перечисления.СостоянияЭДОДокументооборот.Подписан
			И ДанныеДокумента.Состояние <> Перечисления.СостоянияЭДОДокументооборот.ОжидаетСозданияПакетаЭДО
			И ДанныеДокумента.Состояние <> Перечисления.СостоянияЭДОДокументооборот.ОжидаетсяОтправка
			И ДанныеДокумента.Состояние <> Перечисления.СостоянияЭДОДокументооборот.ПоставленВОчередьНаОтправку Тогда
			
			ОписаниеОшибки = СтрШаблон(
				НСтр("ru = 'Документ имеет состояние %1.
				|По документу с таким состоянием не могут быть выполенны процедуры отправки.'"),
				ДанныеДокумента.Состояние);
			
			ОшибкиОбработкиДокументов.Вставить(Документ, ОписаниеОшибки);
			ДокументыКИсключениюИзОбработки.Добавить(Документ);
			Продолжить;
			
		КонецЕсли;
		
		Если ДанныеДокумента.Состояние = Перечисления.СостоянияЭДОДокументооборот.НеСформирован
			И Не ЕстьДействиеПодписания Тогда
			
			ОписаниеОшибки =
				НСтр("ru = 'Документ имеет состояние ""Не начат"" и требует подписания.
				|Выполните подписание документа перед его отправкой.'");
			
			ОшибкиОбработкиДокументов.Вставить(Документ, ОписаниеОшибки);
			ДокументыКИсключениюИзОбработки.Добавить(Документ);
			Продолжить;
			
		КонецЕсли;
		
		Если (ДанныеДокумента.Состояние = Перечисления.СостоянияЭДОДокументооборот.Подписан
			Или ДанныеДокумента.Состояние = Перечисления.СостоянияЭДОДокументооборот.ОжидаетСозданияПакетаЭДО
			Или ДанныеДокумента.Состояние = Перечисления.СостоянияЭДОДокументооборот.ОжидаетсяОтправка
			Или ДанныеДокумента.Состояние = Перечисления.СостоянияЭДОДокументооборот.ПоставленВОчередьНаОтправку)
			И Не ЕстьДействиеОтправки Тогда
			
			ОписаниеОшибки = СтрШаблон(
				НСтр("ru = 'Документ имеет состояние %1 и не требует подписания.'"),
				ДанныеДокумента.Состояние);
			
			ОшибкиОбработкиДокументов.Вставить(Документ, ОписаниеОшибки);
			ДокументыКИсключениюИзОбработки.Добавить(Документ);
			Продолжить;
			
		КонецЕсли;
		
		Если (ДанныеДокумента.Состояние = Перечисления.СостоянияЭДОДокументооборот.ОжидаетСозданияПакетаЭДО
			Или ДанныеДокумента.Состояние = Перечисления.СостоянияЭДОДокументооборот.ОжидаетсяОтправка
			Или ДанныеДокумента.Состояние = Перечисления.СостоянияЭДОДокументооборот.ПоставленВОчередьНаОтправку)
			И Не ЗначениеЗаполнено(ДанныеДокумента.ЭлектронныйДокумент) Тогда
			
			ОписаниеОшибки = СтрШаблон(
				НСтр("ru = 'Документ находится в состоянии %1, но при этом не имеет созданного документа ЭДО.
				|Необходимо создать документ ЭДО перед формированием пакета или отправкой документа.'"),
				ДанныеДокумента.Состояние);
			
			ОшибкиОбработкиДокументов.Вставить(Документ, ОписаниеОшибки);
			ДокументыКИсключениюИзОбработки.Добавить(Документ);
			Продолжить;
			
		КонецЕсли;
		
		Если (ДанныеДокумента.Состояние = Перечисления.СостоянияЭДОДокументооборот.НеСформирован
			Или ДанныеДокумента.Состояние = Перечисления.СостоянияЭДОДокументооборот.Подписан)
			И ЗначениеЗаполнено(ДанныеДокумента.ЭлектронныйДокумент) Тогда
			
			ОписаниеОшибки = СтрШаблон(
				НСтр("ru = 'Документ находится в состоянии %1, но при имеется связанный документ ЭДО.
				|Необходимо разорвать связь с документом ЭДО перед отправкой.'"),
				ДанныеДокумента.Состояние);
			
			ОшибкиОбработкиДокументов.Вставить(Документ, ОписаниеОшибки);
			ДокументыКИсключениюИзОбработки.Добавить(Документ);
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Документ Из ДокументыКИсключениюИзОбработки Цикл
		ДанныеДокументов.Удалить(Документ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсключитьИзОбрабоктиИсходящиеПакеты(Контекст, Действия, ДанныеПакетов)
	
	ПакетыКИсклюениюИзОбработки = Новый Массив;
	ОшибкиОбработкиПакетов = Контекст.ОшибкиОбработки.Пакеты;
	
	ВозможныеДействия = ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ДействияПоИсходящимДокументам();
	
	ЕстьДействиеПодписания = (Действия.Найти(ВозможныеДействия.Подписать) <> Неопределено);
	ЕстьДействиеОтправки = (Действия.Найти(ВозможныеДействия.Отправить) <> Неопределено);
	
	Для Каждого ЭлементПакета Из ДанныеПакетов Цикл
		
		ИдентификаторПакета = ЭлементПакета.Ключ;
		ДанныеПакета = ЭлементПакета.Значение;
		
		Если Не ЕстьДействиеПодписания И Не ЕстьДействиеОтправки Тогда
			ОписаниеОшибки =
				НСтр("ru = 'Нет действий для выполнения.'");
			
			ОшибкиОбработкиПакетов.Вставить(ИдентификаторПакета, ОписаниеОшибки);
			ПакетыКИсклюениюИзОбработки.Добавить(ИдентификаторПакета);
			Продолжить;
		КонецЕсли;
		
		Если ДанныеПакета.Направление <> Перечисления.НаправленияЭДО.Исходящий Тогда
			ОписаниеОшибки =
				НСтр("ru = 'Пакет исключен из обработки, он не является исходящим.'");
			
			ОшибкиОбработкиПакетов.Вставить(ИдентификаторПакета, ОписаниеОшибки);
			ПакетыКИсклюениюИзОбработки.Добавить(ИдентификаторПакета);
			Продолжить;
		КонецЕсли;
		
		ЕстьНеподписанныеДокументы = Ложь;
		ЕстьДокументыСОшбками = Ложь;
		
		Для Каждого ЭлементДокумента Из ДанныеПакета.Документы Цикл
			
			Документ = ЭлементДокумента.Ключ;
			ДанныеДокумента = ЭлементДокумента.Значение;
			
			Если ДанныеДокумента.Состояние <> Перечисления.СостоянияЭДОДокументооборот.НеСформирован
				И ДанныеДокумента.Состояние <> Перечисления.СостоянияЭДОДокументооборот.Подписан
				И ДанныеДокумента.Состояние <> Перечисления.СостоянияЭДОДокументооборот.ОжидаетСозданияПакетаЭДО
				И ДанныеДокумента.Состояние <> Перечисления.СостоянияЭДОДокументооборот.ОжидаетсяОтправка
				И ДанныеДокумента.Состояние <> Перечисления.СостоянияЭДОДокументооборот.ПоставленВОчередьНаОтправку Тогда
				
				ОписаниеОшибки = СтрШаблон(
					НСтр("ru = 'Документ %1 пакета имеет состояние %2.
					|По документу с таким состоянием не могут быть выполенны процедуры отправки.'"),
					Документ,
					ДанныеДокумента.Состояние);
				
				ОшибкиОбработкиПакетов.Вставить(ИдентификаторПакета, ОписаниеОшибки);
				ПакетыКИсклюениюИзОбработки.Добавить(ИдентификаторПакета);
				ЕстьДокументыСОшбками = Истина;
				Прервать;
				
			КонецЕсли;
			
			Если ДанныеДокумента.Состояние = Перечисления.СостоянияЭДОДокументооборот.НеСформирован Тогда
				ЕстьНеподписанныеДокументы = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьДокументыСОшбками Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЕстьНеподписанныеДокументы И Не ЕстьДействиеПодписания Тогда
			ОписаниеОшибки =
				НСтр("ru = 'В пакете имеются неподписанные документы.
				|Перед отправкой необходимо выполнить действие подписания.'");
			
			ОшибкиОбработкиПакетов.Вставить(ИдентификаторПакета, ОписаниеОшибки);
			ПакетыКИсклюениюИзОбработки.Добавить(ИдентификаторПакета);
			Продолжить;
		КонецЕсли;
		
		Если Не ЕстьНеподписанныеДокументы И Не ЕстьДействиеОтправки Тогда
			ОписаниеОшибки =
				НСтр("ru = 'Все документы пакета подписаны.'");
			
			ОшибкиОбработкиПакетов.Вставить(ИдентификаторПакета, ОписаниеОшибки);
			ПакетыКИсклюениюИзОбработки.Добавить(ИдентификаторПакета);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ИдентификаторПакета Из ПакетыКИсклюениюИзОбработки Цикл
		ДанныеПакетов.Удалить(ИдентификаторПакета);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКонтекстДляПодписания(Контекст, ДанныеДокументов, ДанныеПакетов)
	
	ВозможныеЭтапы = ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ЭтапыВыполненияДействийПоИсходящимДокументам();
	
	Контекст.ЭтапыКВыполнению[ВозможныеЭтапы.Подписание] = Истина;
	
	ДанныеДокументовДляПодписания = Новый Соответствие;
	
	ДополнитьСоответствиеИсходящимиДокументамиПоСостоянию(
		ДанныеДокументовДляПодписания,
		ДанныеДокументов,
		Перечисления.СостоянияЭДОДокументооборот.НеСформирован);
	
	Для Каждого ЭлементПакета Из ДанныеПакетов Цикл
		
		ДанныеДокументовПакета = ЭлементПакета.Значение.Документы;
		
		ДополнитьСоответствиеИсходящимиДокументамиПоСостоянию(
			ДанныеДокументовДляПодписания,
			ДанныеДокументовПакета,
			Перечисления.СостоянияЭДОДокументооборот.НеСформирован);
		
	КонецЦикла;
	
	ДокументыДляПодписания = Новый Массив;
	
	Для Каждого Элемент Из ДанныеДокументовДляПодписания Цикл
		
		Документ = Элемент.Ключ;
		
		ДокументыДляПодписания.Добавить(Документ);
		
	КонецЦикла;
	
	ДанныеДляПодписания = Новый Структура;
	
	ДанныеДляПодписания.Вставить("Документы", ДокументыДляПодписания);
	
	Контекст.ДанныеДляЭтапов[ВозможныеЭтапы.Подписание] = ДанныеДляПодписания;
	
КонецПроцедуры

Процедура ЗаполнитьКонтекстДляФормированияЭД(Контекст, ДанныеДокументов, ДанныеПакетов)
	
	ВозможныеЭтапы = ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ЭтапыВыполненияДействийПоИсходящимДокументам();
	
	Контекст.ЭтапыКВыполнению[ВозможныеЭтапы.ФормированиеЭД] = Истина;
	
	ДанныеДокументовДляФормированияЭД = Новый Соответствие;
	
	ДополнитьСоответствиеИсходящимиДокументамиПоСостоянию(
		ДанныеДокументовДляФормированияЭД,
		ДанныеДокументов,
		Перечисления.СостоянияЭДОДокументооборот.Подписан);
	
	Для Каждого ЭлементПакета Из ДанныеПакетов Цикл
		
		ДанныеДокументовПакета = ЭлементПакета.Значение.Документы;
		
		ДополнитьСоответствиеИсходящимиДокументамиПоСостоянию(
			ДанныеДокументовДляФормированияЭД,
			ДанныеДокументовПакета,
			Перечисления.СостоянияЭДОДокументооборот.Подписан);
		
	КонецЦикла;
	
	ДокументыКФормированиюЭД = Новый Массив;
	
	Для Каждого ЭлементДокумента Из ДанныеДокументовДляФормированияЭД Цикл
		
		Документ = ЭлементДокумента.Ключ;
		
		ДокументыКФормированиюЭД.Добавить(Документ);
		
	КонецЦикла;
	
	ДанныеДляФормированияЭД = Новый Структура;
	ДанныеДляФормированияЭД.Вставить("Документы", ДокументыКФормированиюЭД);
	
	Контекст.ДанныеДляЭтапов[ВозможныеЭтапы.ФормированиеЭД] = ДанныеДляФормированияЭД;
	
КонецПроцедуры

Процедура ЗаполнитьКонтекстДляФормированияПакетовЭДО(Контекст, ДанныеПакетов)
	
	ВозможныеЭтапы = ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ЭтапыВыполненияДействийПоИсходящимДокументам();
	
	Контекст.ЭтапыКВыполнению[ВозможныеЭтапы.ФормированиеПакетовЭДО] = Истина;
	
	ПакетыКФормированию = Новый Массив;
	
	Для Каждого ЭлементПакета Из ДанныеПакетов Цикл
		
		ИдентификаторПакета = ЭлементПакета.Ключ;
		ДанныеПакета = ЭлементПакета.Значение;
		
		Если Не ЗначениеЗаполнено(ДанныеПакета.ИдентификаторПакетаБЭД) Тогда
			ПакетыКФормированию.Добавить(ИдентификаторПакета);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляФормированияПакетов = Новый Структура;
	ДанныеДляФормированияПакетов.Вставить("ИдентификаторыПакетов", ПакетыКФормированию);
	
	Контекст.ДанныеДляЭтапов[ВозможныеЭтапы.ФормированиеПакетовЭДО] = ДанныеДляФормированияПакетов;
	
КонецПроцедуры

Процедура ЗаполнитьКонтекстДляОтправки(Контекст, ДанныеДокументов, ДанныеПакетов)
	
	ВозможныеЭтапы = ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ЭтапыВыполненияДействийПоИсходящимДокументам();
	
	Контекст.ЭтапыКВыполнению[ВозможныеЭтапы.Отправка] = Истина;
	
	ДанныеДокументовДляОтправки = Новый Соответствие;
	
	ДополнитьСоответствиеИсходящимиДокументамиПоСостоянию(
		ДанныеДокументовДляОтправки,
		ДанныеДокументов,
		Перечисления.СостоянияЭДОДокументооборот.ОжидаетсяОтправка);
	
	ДополнитьСоответствиеИсходящимиДокументамиПоСостоянию(
		ДанныеДокументовДляОтправки,
		ДанныеДокументов,
		Перечисления.СостоянияЭДОДокументооборот.ПоставленВОчередьНаОтправку);
	
	ДокументыКОтправке = Новый Соответствие;
	
	Для Каждого Элемент Из ДанныеДокументовДляОтправки Цикл
		
		Документ = Элемент.Ключ;
		ДанныеДокумента = Элемент.Значение;
		
		ДокументыКОтправке.Вставить(Документ, ДанныеДокумента.ЭлектронныйДокумент);
		
	КонецЦикла;
	
	ПакетыДляОтправки = Новый Соответствие;
	
	Для Каждого ЭлементПакета Из ДанныеПакетов Цикл
		
		ИдентификаторПакета = ЭлементПакета.Ключ;
		ДанныеПакета = ЭлементПакета.Значение;
		
		Если ЗначениеЗаполнено(ДанныеПакета.ИдентификаторПакетаБЭД) Тогда
			ПакетыДляОтправки.Вставить(ИдентификаторПакета, ДанныеПакета.ИдентификаторПакетаБЭД);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляОтправки = Новый Структура;
	ДанныеДляОтправки.Вставить("Документы", ДокументыКОтправке);
	ДанныеДляОтправки.Вставить("Пакеты", ПакетыДляОтправки);
	
	Контекст.ДанныеДляЭтапов[ВозможныеЭтапы.Отправка] = ДанныеДляОтправки;
	
КонецПроцедуры

Функция ДанныеДокументовДляВыполненияДействийПоИсходящим(Документы)
	
	ДанныеДокументов = Новый Соответствие;
	
	Для Каждого Документ Из Документы Цикл
		ДанныеДокумента = НовыеДанныеДокументаДляВыполненияДействийПоИсходящим();
		ДанныеДокументов.Вставить(Документ, ДанныеДокумента);
		
	КонецЦикла;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДокументыДО.Ссылка КАК Документ,
		|	ДокументыДО.Организация КАК Организация
		|ПОМЕСТИТЬ ДокументыКОбработке
		|ИЗ
		|	Справочник.%ИмяСправочникаДокументаДО% КАК ДокументыДО
		|ГДЕ
		|	ДокументыДО.Ссылка В (&Документы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыКОбработке.Документ КАК Документ,
		|	ДокументыКОбработке.Организация КАК Организация
		|ИЗ
		|	ДокументыКОбработке КАК ДокументыКОбработке
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыКОбработке.Документ,
		|	СостояниеДокументовПоЭДОСрезПоследних.СостояниеВерсииДокументаПоЭДО КАК Состояние,
		|	СостояниеДокументовПоЭДОСрезПоследних.НаправлениеЭД КАК Направление
		|ИЗ
		|	ДокументыКОбработке КАК ДокументыКОбработке
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеДокументовПоЭДО.СрезПоследних(, ДокументДО В (&Документы)) КАК
		|			СостояниеДокументовПоЭДОСрезПоследних
		|		ПО ДокументыКОбработке.Документ = СостояниеДокументовПоЭДОСрезПоследних.ДокументДО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыКОбработке.Документ,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыКОбработке КАК ДокументыКОбработке
		|		ПО ДокументыКОбработке.Документ = Файлы.ВладелецФайла
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО Файлы.Ссылка = СлужебныеФайлыДокументов.Файл
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ПО (Файлы.ТекущаяВерсия = ОбъектыУчетаДокументовЭДО.ОбъектУчета
		|		И ОбъектыУчетаДокументовЭДО.Актуальный)
		|ГДЕ
		|	НЕ Файлы.ПометкаУдаления
		|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыКОбработке.Документ,
		|	СоставПакетовЭДОДокументооборот.ИдентификаторПакета
		|ИЗ
		|	ДокументыКОбработке КАК ДокументыКОбработке
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставПакетовЭДОДокументооборот КАК СоставПакетовЭДОДокументооборот
		|		ПО ДокументыКОбработке.Документ = СоставПакетовЭДОДокументооборот.Документ";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"%ИмяСправочникаДокументаДО%",
		ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ИмяСправочникаДокументовДО());
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Документы", Документы);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	КолвоРезультатов = РезультатыЗапроса.Количество();
	
	ВыборкаСведенийОДокументах = РезультатыЗапроса[КолвоРезультатов - 4].Выбрать();
	ВыборкаДанныхСостояний = РезультатыЗапроса[КолвоРезультатов - 3].Выбрать();
	ВыборкаСДокументамиЭДО = РезультатыЗапроса[КолвоРезультатов - 2].Выбрать();
	ВыборкаПакетовДокументов = РезультатыЗапроса[КолвоРезультатов - 1].Выбрать();
	
	Пока ВыборкаСведенийОДокументах.Следующий() Цикл
		
		ДанныеДокумента = ДанныеДокументов.Получить(ВыборкаСведенийОДокументах.Документ);
		
		Если ДанныеДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДокумента.Организация = ВыборкаСведенийОДокументах.Организация;
		
	КонецЦикла;
	
	Пока ВыборкаДанныхСостояний.Следующий() Цикл
		
		ДанныеДокумента = ДанныеДокументов.Получить(ВыборкаДанныхСостояний.Документ);
		
		Если ДанныеДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДокумента.Состояние = ВыборкаДанныхСостояний.Состояние;
		ДанныеДокумента.Направление = ВыборкаДанныхСостояний.Направление;
		
	КонецЦикла;
	
	Пока ВыборкаСДокументамиЭДО.Следующий() Цикл
		
		ДанныеДокумента = ДанныеДокументов.Получить(ВыборкаСДокументамиЭДО.Документ);
		
		Если ДанныеДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДокумента.ЭлектронныйДокумент = ВыборкаСДокументамиЭДО.ЭлектронныйДокумент;
		
	КонецЦикла;
	
	Пока ВыборкаПакетовДокументов.Следующий() Цикл
		
		ДанныеДокумента = ДанныеДокументов.Получить(ВыборкаПакетовДокументов.ИдентификаторПакета);
		
		Если ДанныеДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДокумента.ИдентификаторПакета = ВыборкаПакетовДокументов.ИдентификаторПакета;
		
	КонецЦикла;
	
	Возврат ДанныеДокументов;
	
КонецФункции

Функция ДанныеПакетовДляВыполненияДействийПоИсходящим(Пакеты)
	
	ДанныеПакетов = Новый Соответствие;
	
	Для Каждого ИДПакета Из Пакеты Цикл
		
		ДанныеПакета = Новый Структура;
		ДанныеПакета.Вставить("ИдентификаторПакетаБЭД", Неопределено);
		ДанныеПакета.Вставить("Направление", Перечисления.НаправленияЭДО.ПустаяСсылка());
		ДанныеПакета.Вставить("Документы", Новый Соответствие);
		
		ДанныеПакетов.Вставить(ИДПакета, ДанныеПакета);
		
	КонецЦикла;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПакетыЭДОДокументооборот.ИдентификаторПакета,
		|	ПакетыЭДОДокументооборот.ИдентификаторПакетаБЭД,
		|	ПакетыЭДОДокументооборот.Направление
		|ПОМЕСТИТЬ Пакеты
		|ИЗ
		|	РегистрСведений.ПакетыЭДОДокументооборот КАК ПакетыЭДОДокументооборот
		|ГДЕ
		|	ПакетыЭДОДокументооборот.ИдентификаторПакета В (&Пакеты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Пакеты.ИдентификаторПакета,
		|	СоставПакетовЭДОДокументооборот.Документ
		|ПОМЕСТИТЬ ДокументыПакетов
		|ИЗ
		|	Пакеты КАК Пакеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставПакетовЭДОДокументооборот КАК СоставПакетовЭДОДокументооборот
		|		ПО Пакеты.ИдентификаторПакета = СоставПакетовЭДОДокументооборот.ИдентификаторПакета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Пакеты.ИдентификаторПакета,
		|	Пакеты.ИдентификаторПакетаБЭД,
		|	Пакеты.Направление
		|ИЗ
		|	Пакеты КАК Пакеты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыПакетов.ИдентификаторПакета,
		|	ДокументыПакетов.Документ,
		|	ЕСТЬNULL(ДокументыДО.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация
		|ИЗ
		|	ДокументыПакетов КАК ДокументыПакетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.%ИмяСправочникаДокументаДО% КАК ДокументыДО
		|		ПО ДокументыПакетов.Документ = ДокументыДО.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыПакетов.ИдентификаторПакета,
		|	ДокументыПакетов.Документ,
		|	СостояниеДокументовПоЭДОСрезПоследних.СостояниеВерсииДокументаПоЭДО КАК Состояние,
		|	СостояниеДокументовПоЭДОСрезПоследних.НаправлениеЭД КАК Направление
		|ИЗ
		|	ДокументыПакетов КАК ДокументыПакетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеДокументовПоЭДО.СрезПоследних КАК СостояниеДокументовПоЭДОСрезПоследних
		|		ПО ДокументыПакетов.Документ = СостояниеДокументовПоЭДОСрезПоследних.ДокументДО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыПакетов.ИдентификаторПакета,
		|	ДокументыПакетов.Документ,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПакетов КАК ДокументыПакетов
		|		ПО ДокументыПакетов.Документ = Файлы.ВладелецФайла
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО Файлы.Ссылка = СлужебныеФайлыДокументов.Файл
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ПО (Файлы.ТекущаяВерсия = ОбъектыУчетаДокументовЭДО.ОбъектУчета
		|		И ОбъектыУчетаДокументовЭДО.Актуальный)
		|ГДЕ
		|	НЕ Файлы.ПометкаУдаления
		|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"%ИмяСправочникаДокументаДО%",
		ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ИмяСправочникаДокументовДО());
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Пакеты", Пакеты);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	КолвоРезультатов = РезультатыЗапроса.Количество();
	
	ВыборкаПакетов = РезультатыЗапроса[КолвоРезультатов - 4].Выбрать();
	ВыборкаДокументовПакетов = РезультатыЗапроса[КолвоРезультатов - 3].Выбрать();
	ВыборкаДанныхСостоянийДокументов = РезультатыЗапроса[КолвоРезультатов - 2].Выбрать();
	ВыборкаСДокументамиЭДО = РезультатыЗапроса[КолвоРезультатов - 1].Выбрать();
	
	Пока ВыборкаПакетов.Следующий() Цикл
		
		ДанныеПакета = ДанныеПакетов.Получить(ВыборкаПакетов.ИдентификаторПакета);
		
		Если ДанныеПакета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеПакета.ИдентификаторПакетаБЭД = ВыборкаПакетов.ИдентификаторПакетаБЭД;
		ДанныеПакета.Направление = ВыборкаПакетов.Направление;
		
	КонецЦикла;
	
	Пока ВыборкаДокументовПакетов.Следующий() Цикл
		
		ДанныеПакета = ДанныеПакетов.Получить(ВыборкаДокументовПакетов.ИдентификаторПакета);
		
		Если ДанныеПакета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументыПакета = ДанныеПакета.Документы;
		
		ДанныеДокумента = НовыеДанныеДокументаДляВыполненияДействийПоИсходящим();
		ДанныеДокумента.ИдентификаторПакета = ВыборкаДокументовПакетов.ИдентификаторПакета;
		ДанныеДокумента.Организация = ВыборкаДокументовПакетов.Организация;
		
		ДокументыПакета.Вставить(ВыборкаДокументовПакетов.Документ, ДанныеДокумента);
		
	КонецЦикла;
	
	Пока ВыборкаДанныхСостоянийДокументов.Следующий() Цикл
		
		ДанныеПакета = ДанныеПакетов.Получить(ВыборкаДанныхСостоянийДокументов.ИдентификаторПакета);
		
		Если ДанныеПакета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДокумента = ДанныеПакета.Документы.Получить(ВыборкаДанныхСостоянийДокументов.Документ);
		
		Если ДанныеДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДокумента.Состояние = ВыборкаДанныхСостоянийДокументов.Состояние;
		ДанныеДокумента.Направление = ВыборкаДанныхСостоянийДокументов.Направление;
		
	КонецЦикла;
	
	Пока ВыборкаСДокументамиЭДО.Следующий() Цикл
		
		ДанныеПакета = ДанныеПакетов.Получить(ВыборкаСДокументамиЭДО.ИдентификаторПакета);
		
		Если ДанныеПакета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДокумента = ДанныеПакета.Документы.Получить(ВыборкаСДокументамиЭДО.Документ);
		
		Если ДанныеДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДокумента.ЭлектронныйДокумент = ВыборкаСДокументамиЭДО.ЭлектронныйДокумент;
		
	КонецЦикла;
	
	Возврат ДанныеПакетов;
	
КонецФункции

// Новые данные документа для выполнения действий по исходящим.
// 
// Возвращаемое значение:
//  Структура - Новые данные документа для выполнения действий по исходящим:
//    * Состояние - ПеречислениеСсылка.СостоянияЭДОДокументооборот
//    * Направление - ПеречислениеСсылка.НаправленияЭДО
//    * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//    * ИдентификаторПакета - УникальныйИдентификатор
//    * Организация - СправочникСсылка.Организации
//    * ДанныеЗаполненияФормализованногоДокумента - см. ФорматыЭДОДокументооборотКлиентСервер.НовыеДанныеДляЗаполненияФормализованногоДокумента
//
Функция НовыеДанныеДокументаДляВыполненияДействийПоИсходящим()
	
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("Состояние", Перечисления.СостоянияЭДОДокументооборот.ПустаяСсылка());
	ДанныеДокумента.Вставить("Направление", Перечисления.НаправленияЭДО.ПустаяСсылка());
	ДанныеДокумента.Вставить("ЭлектронныйДокумент", Документы.ЭлектронныйДокументИсходящийЭДО.ПустаяСсылка());
	ДанныеДокумента.Вставить("ИдентификаторПакета", УникальныйИдентификаторПустой());
	ДанныеДокумента.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	
	ДанныеДокумента.Вставить("ДанныеЗаполненияФормализованногоДокумента",
		ФорматыЭДОДокументооборотКлиентСервер.НовыеДанныеДляЗаполненияФормализованногоДокумента());
	
	Возврат ДанныеДокумента;
	
КонецФункции

Процедура ДополнитьСоответствиеИсходящимиДокументамиПоСостоянию(Соответствие, ДанныеДокументов, Состояние)
	
	Для Каждого Элемент Из ДанныеДокументов Цикл
		
		Документ = Элемент.Ключ;
		ДанныеДокумента = Элемент.Значение;
		
		Если ДанныеДокумента.Состояние = Состояние Тогда
			Соответствие.Вставить(Документ, ДанныеДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДокументыПакетов(ИдентификаторыПакетов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоставПакетовЭДОДокументооборот.Документ
		|ИЗ
		|	РегистрСведений.СоставПакетовЭДОДокументооборот КАК СоставПакетовЭДОДокументооборот
		|ГДЕ
		|	СоставПакетовЭДОДокументооборот.ИдентификаторПакета В (&ИдентификаторыПакетов)";
	Запрос.УстановитьПараметр("ИдентификаторыПакетов", ИдентификаторыПакетов);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Документ")
	
КонецФункции

Функция ДанныеДляУстановкиСтатусаОтправки(ДанныеДляОтправки)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Документы", Новый Соответствие);
	СтруктураВозврата.Вставить("Пакеты", Новый Соответствие);
	
	ДокументыКОбработке = Новый Массив;
	Для Каждого Элемент Из ДанныеДляОтправки.Документы Цикл
		ДокументыКОбработке.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	ПакетыКОбработке = Новый Массив;
	Для Каждого Элемент Из ДанныеДляОтправки.Пакеты Цикл
		ПакетыКОбработке.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	ВсеДокументы = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеДокументы, ДокументыКОбработке);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеДокументы, ДокументыПакетов(ПакетыКОбработке));
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДокументыДО.Ссылка КАК Документ,
		|	СоставПакетовЭДОДокументооборот.ИдентификаторПакета КАК ИдентификаторПакета,
		|	СостояниеДокументовПоЭДОСрезПоследних.СостояниеВерсииДокументаПоЭДО КАК Состояние,
		|	СостояниеДокументовПоЭДОСрезПоследних.Контрагент,
		|	СостояниеДокументовПоЭДОСрезПоследних.НаправлениеЭД КАК Направление
		|ИЗ
		|	Справочник.%ИмяСправочникаДокументаДО% КАК ДокументыДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеДокументовПоЭДО.СрезПоследних(, ДокументДО В (&Документы)) КАК
		|			СостояниеДокументовПоЭДОСрезПоследних
		|		ПО ДокументыДО.Ссылка = СостояниеДокументовПоЭДОСрезПоследних.ДокументДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставПакетовЭДОДокументооборот КАК СоставПакетовЭДОДокументооборот
		|		ПО ДокументыДО.Ссылка = СоставПакетовЭДОДокументооборот.Документ
		|ГДЕ
		|	ДокументыДО.Ссылка В (&Документы)";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"%ИмяСправочникаДокументаДО%",
		ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ИмяСправочникаДокументовДО());
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Документы", ВсеДокументы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ИдентификаторПакета) Тогда
			
			ДокументыПакета = СтруктураВозврата.Пакеты.Получить(Выборка.ИдентификаторПакета);
			
			Если ДокументыПакета = Неопределено Тогда
				ДокументыПакета = Новый Соответствие;
				СтруктураВозврата.Пакеты.Вставить(Выборка.ИдентификаторПакета, ДокументыПакета);
			КонецЕсли;
			
			ДанныеСостояния = Новый Структура;
			ДанныеСостояния.Вставить("Состояние", Выборка.Состояние);
			ДанныеСостояния.Вставить("Контрагент", Выборка.Контрагент);
			ДанныеСостояния.Вставить("Направление", Выборка.Направление);
			
			ДокументыПакета.Вставить(Выборка.Документ, ДанныеСостояния);
			
		Иначе
			
			ДанныеСостояния = Новый Структура;
			ДанныеСостояния.Вставить("Состояние", Выборка.Состояние);
			ДанныеСостояния.Вставить("Контрагент", Выборка.Контрагент);
			ДанныеСостояния.Вставить("Направление", Выборка.Направление);
			
			СтруктураВозврата.Документы.Вставить(Выборка.Документ, ДанныеСостояния);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПоставитьВОчередьОтправкиПакет(Пакет, ДанныеОСостоянииДокументов)
	
	РезультатПостановкиВОчередь = Новый Структура;
	РезультатПостановкиВОчередь.Вставить("Успех", Ложь);
	РезультатПостановкиВОчередь.Вставить("ОписаниеОшибки", "");
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого ЭлементДокумента Из ДанныеОСостоянииДокументов Цикл
			
			Документ = ЭлементДокумента.Ключ;
			ДанныеСостояния = ЭлементДокумента.Значение;
			
			Результат = ПоставитьВОчередьОтправкиДокумент(Документ, ДанныеСостояния);
			
			Если Не Результат.Успех Тогда
				ВызватьИсключение
					НСтр("ru = 'Не удалось поставить пакет в очередь на отправку по причине:'")
					+ Символы.ПС + Результат.ОписаниеОшибки;
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		РезультатПостановкиВОчередь.ОписаниеОшибки = ОписаниеОшибки();
		Возврат РезультатПостановкиВОчередь;
	КонецПопытки;
	
	РезультатПостановкиВОчередь.Успех = Истина;
	Возврат РезультатПостановкиВОчередь;
	
КонецФункции

Функция ПоставитьВОчередьОтправкиДокумент(Документ, ДанныеСостояния)
	
	РезультатПостановкиВОчередь = Новый Структура;
	РезультатПостановкиВОчередь.Вставить("Успех", Ложь);
	РезультатПостановкиВОчередь.Вставить("ОписаниеОшибки", "");
	
	Если ДанныеСостояния.Состояние =
		Перечисления.СостоянияЭДОДокументооборот.ПоставленВОчередьНаОтправку Тогда
		
		РезультатПостановкиВОчередь.Успех = Истина;
		Возврат РезультатПостановкиВОчередь;
	КонецЕсли;
	
	Если ДанныеСостояния.Состояние <> Перечисления.СостоянияЭДОДокументооборот.ОжидаетсяОтправка Тогда
		
		РезультатПостановкиВОчередь.ОписаниеОшибки = СтрШаблон(
			НСтр("ru = 'Документ %1 не может быть поставлен в очередь на отправку, поскольку имеет неверное состояние.
				|В очередь на отправку могут быть поставлены только документы в состоянии ""Ожидается отправка""'"),
			Документ);
		Возврат РезультатПостановкиВОчередь;
		
	КонецЕсли;
	
	Попытка
		
		ДанныеСостоянияКУстановке = ОбменСКонтрагентамиДОСлужебный.НовыеДанныеСостоянияДляУстановки();
		ДанныеСостоянияКУстановке.Состояние = Перечисления.СостоянияЭДОДокументооборот.ПоставленВОчередьНаОтправку;
		ДанныеСостоянияКУстановке.Комментарий = НСтр("ru = 'Начата отправка документа ЭДО оператору.'");
		ДанныеСостоянияКУстановке.Направление = ДанныеСостояния.Направление;
		
		ОбменСКонтрагентамиДОСлужебный.УстановитьСостояниеДокументаЭДО(
			Документ, ДанныеСостояния.Контрагент, ДанныеСостоянияКУстановке);
		
	Исключение
		РезультатПостановкиВОчередь.ОписаниеОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось поставить в очередь отправки документ %1 по причине:'"), Документ)
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат РезультатПостановкиВОчередь;
	КонецПопытки;
	
	РезультатПостановкиВОчередь.Успех = Истина;
	Возврат РезультатПостановкиВОчередь;
	
КонецФункции

Процедура ДополнитьДаннымиЗаполненияФормализованныхДокументов(Контекст)
	
	ДанныеДокументов = Новый Соответствие();
	
	Для Каждого ЭлементПакета Из Контекст.Пакеты Цикл
		
		ДанныеПакета = ЭлементПакета.Значение;
		
		Для Каждого ЭлементДокумента Из ДанныеПакета.Документы Цикл
			
			Документ = ЭлементДокумента.Ключ;
			ДанныеДокумента = ЭлементДокумента.Значение;
			
			ДанныеДокументов.Вставить(Документ, ДанныеДокумента);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ЭлементДокумента Из Контекст.Документы Цикл
		
		Документ = ЭлементДокумента.Ключ;
		ДанныеДокумента = ЭлементДокумента.Значение;
		
		ДанныеДокументов.Вставить(Документ, ДанныеДокумента);
		
	КонецЦикла;
	
	ЗаполнитьИдентификаторыФайловВДанныхДокументов(ДанныеДокументов);
	
	ЗаполнитьИдентификаторыЭДОВДанныхДокументов(ДанныеДокументов);
	
	ЗаполнитьСведенияОбОператорахЭДОВДанныхДокументов(ДанныеДокументов);
	
КонецПроцедуры

Процедура ЗаполнитьИдентификаторыФайловВДанныхДокументов(ДанныеДокументов)
	
	Для Каждого Элемент Из ДанныеДокументов Цикл
		ДанныеДокумента = Элемент.Значение; // см. НовыеДанныеДокументаДляВыполненияДействийПоИсходящим
		ДанныеДокумента.ДанныеЗаполненияФормализованногоДокумента.ИдентификаторФайла = Новый УникальныйИдентификатор();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИдентификаторыЭДОВДанныхДокументов(ДанныеДокументов) Экспорт
	
	ДокументыДО = Новый Массив;
	Для Каждого Элемент Из ДанныеДокументов Цикл
		Документ = Элемент.Ключ;
		ДокументыДО.Добавить(Документ);
	КонецЦикла;
	
	ИдентификаторыЭДОДокументов = ОбменСКонтрагентамиДОСлужебный.ИдентификаторыЭДОДокументовДО(ДокументыДО);
	
	Для Каждого Элемент Из ДанныеДокументов Цикл
		
		Документ = Элемент.Ключ;
		ДанныеДокумента = Элемент.Значение; // см. НовыеДанныеДокументаДляВыполненияДействийПоИсходящим
		
		ИдентификаторыЭДОДокумента = ИдентификаторыЭДОДокументов[Документ];
		Если ИдентификаторыЭДОДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеУчастников = ФорматыЭДОДокументооборотКлиентСервер.НовыеДанныеУчастниковДокументооборота();
		ДанныеУчастников.ИдентификаторОтправителя = ИдентификаторыЭДОДокумента.ИдентификаторОтправителя;
		ДанныеУчастников.ИдентификаторПолучателя = ИдентификаторыЭДОДокумента.ИдентификаторПолучателя;
		
		ДанныеДокумента.ДанныеЗаполненияФормализованногоДокумента.УчастникиДокументооборота = ДанныеУчастников;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбОператорахЭДОВДанныхДокументов(ДанныеДокументов)
	
	СведенияОбОператорах = Новый Соответствие();
	Для Каждого Элемент Из ДанныеДокументов Цикл
		
		ДанныеДокумента = Элемент.Значение; // см. НовыеДанныеДокументаДляВыполненияДействийПоИсходящим
		ДанныеУчастников = ДанныеДокумента.ДанныеЗаполненияФормализованногоДокумента.УчастникиДокументооборота;
		
		ИдентификаторОператора =
			РаботаСАбонентамиЭДОКлиентСервер.ОператорАбонента(ДанныеУчастников.ИдентификаторОтправителя);
		СведенияОбОператорах.Вставить(ИдентификаторОператора, НовыеСведенияОбОператореЭДО());
		
	КонецЦикла;
	
	ЗаполнитьСведенияОбОператорахЭДО(СведенияОбОператорах);
	
	Для Каждого Элемент Из ДанныеДокументов Цикл
		
		ДанныеДокумента = Элемент.Значение; // см. НовыеДанныеДокументаДляВыполненияДействийПоИсходящим
		ДанныеУчастников = ДанныеДокумента.ДанныеЗаполненияФормализованногоДокумента.УчастникиДокументооборота;
		
		ИдентификаторОператора =
			РаботаСАбонентамиЭДОКлиентСервер.ОператорАбонента(ДанныеУчастников.ИдентификаторОтправителя);
		
		СведенияОбОператоре = СведенияОбОператорах[ИдентификаторОператора]; // см. НовыеСведенияОбОператореЭДО
		
		ДанныеУчастников.Оператор.Идентификатор = СведенияОбОператоре.Идентификатор;
		ДанныеУчастников.Оператор.Наименование = СведенияОбОператоре.Наименование;
		ДанныеУчастников.Оператор.ИНН = СведенияОбОператоре.ИНН;
		
	КонецЦикла;
	
КонецПроцедуры

// Новые сведения об операторе ЭДО.
// 
// Возвращаемое значение:
//  Структура:
//    * Идентификатор - Строка
//    * Наименование - Строка
//    * ИНН - Строка
Функция НовыеСведенияОбОператореЭДО()
	
	СведенияОбОператоре = Новый Структура;
	СведенияОбОператоре.Вставить("Идентификатор", "");
	СведенияОбОператоре.Вставить("Наименование", "");
	СведенияОбОператоре.Вставить("ИНН", "");
	
	Возврат СведенияОбОператоре;
	
КонецФункции

Процедура ЗаполнитьСведенияОбОператорахЭДО(СведенияОбОператорахЭДО)
	
	ИдентификаторыОператоров = Новый Массив;
	Для Каждого Элемент Из СведенияОбОператорахЭДО Цикл
		Идентификатор = Элемент.Ключ;
		ИдентификаторыОператоров.Добавить(Идентификатор);
	КонецЦикла;
	
	Запросы = Новый Массив;
	Отбор = СервисНастроекЭДО.НовыйОтборОператоровЭлектронногоДокументооборота();
	Отбор.Идентификатор = "&Идентификатор";
	ЗапросОператоров = СервисНастроекЭДО.ЗапросОператоровЭДО("ОператорыЭДО", Отбор);
	
	Запросы.Добавить(ЗапросОператоров);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|ОператорыЭДО.ИдентификаторОператора КАК Идентификатор,
		|ОператорыЭДО.Представление КАК Наименование, 
		|ОператорыЭДО.ИНН КАК ИНН
		|ИЗ
		|ОператорыЭДО КАК ОператорыЭДО";
	
	ИтоговыйЗапрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, Запросы);
	ИтоговыйЗапрос.УстановитьПараметр("Идентификатор", ИдентификаторыОператоров);
	
	РезультатЗапроса = ИтоговыйЗапрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Идентификатор = Выборка.Идентификатор;
		
		СведенияОператора = СведенияОбОператорахЭДО[Идентификатор]; // см. НовыеСведенияОбОператореЭДО
		Если СведенияОператора = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СведенияОператора.Идентификатор = Идентификатор;
		СведенияОператора.Наименование = Выборка.Наименование;
		СведенияОператора.ИНН = Выборка.ИНН;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ВходящиеДокументы

Функция ДанныеДокументовДляОбработкиВходящих(Документы)
	
	ДанныеДокументов = Новый Соответствие;
	
	Для Каждого Документ Из Документы Цикл
		
		ДанныеДокумента = Новый Структура;
		ДанныеДокумента.Вставить("ИдентификаторПакета", Неопределено);
		ДанныеДокумента.Вставить("ЭлектронныйДокумент", Неопределено);
		ДанныеДокумента.Вставить("Состояние", Перечисления.СостоянияДокументовЭДО.ПустаяСсылка());
		ДанныеДокумента.Вставить("ТребуетсяОтветнаяПодпись", Истина);
		ДанныеДокумента.Вставить("ИдентификаторКонтрагента", Истина);
		ДанныеДокумента.Вставить("ТипРегламентаЭДО", Перечисления.ТипыРегламентовЭДО.ПустаяСсылка());
		ДанныеДокумента.Вставить("ОтветныйТитулСоздан", Истина);
		
		ДанныеДокументов.Вставить(Документ, ДанныеДокумента);
		
	КонецЦикла;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДокументыДО.Ссылка КАК Документ
		|ПОМЕСТИТЬ Документы
		|ИЗ
		|	Справочник.%ИмяСправочникаДокументаДО% КАК ДокументыДО
		|ГДЕ
		|	ДокументыДО.Ссылка В (&Документы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Документы.Документ,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент
		|ПОМЕСТИТЬ ДокументыЭДО
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документы КАК Документы
		|		ПО Документы.Документ = Файлы.ВладелецФайла
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ПО (Файлы.ТекущаяВерсия = ОбъектыУчетаДокументовЭДО.ОбъектУчета
		|		И ОбъектыУчетаДокументовЭДО.Актуальный)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыЭДО.ЭлектронныйДокумент,
		|	МАКСИМУМ(СообщениеЭДО.Ссылка) КАК СообщениеОтветногоТитула
		|ПОМЕСТИТЬ ОтветныеТитулыДокументовЭДО
		|ИЗ
		|	ДокументыЭДО КАК ДокументыЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО ДокументыЭДО.ЭлектронныйДокумент = СообщениеЭДО.ЭлектронныйДокумент
		|		И СообщениеЭДО.ТипЭлементаРегламента = &ТипЭлементаОтветногоТитула
		|СГРУППИРОВАТЬ ПО
		|	ДокументыЭДО.ЭлектронныйДокумент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Документы.Документ,
		|	СоставПакетовЭДОДокументооборот.ИдентификаторПакета
		|ИЗ
		|	Документы КАК Документы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставПакетовЭДОДокументооборот КАК СоставПакетовЭДОДокументооборот
		|		ПО Документы.Документ = СоставПакетовЭДОДокументооборот.Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыЭДО.Документ,
		|	ДокументыЭДО.ЭлектронныйДокумент,
		|	ЭлектронныйДокументВходящийЭДО.ТребуетсяПодтверждение,
		|	СостоянияДокументовЭДО.Состояние,
		|	ЭлектронныйДокументВходящийЭДО.ИдентификаторКонтрагента,
		|	ЭлектронныйДокументВходящийЭДО.ТипРегламента,
		|	(НЕ ОтветныеТитулыДокументовЭДО.СообщениеОтветногоТитула ЕСТЬ NULL) КАК ОтветныйТитулСоздан
		|ИЗ
		|	ДокументыЭДО КАК ДокументыЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|		ПО ДокументыЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|		ПО ДокументыЭДО.ЭлектронныйДокумент = СостоянияДокументовЭДО.ЭлектронныйДокумент
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОтветныеТитулыДокументовЭДО КАК ОтветныеТитулыДокументовЭДО
		|		ПО ДокументыЭДО.ЭлектронныйДокумент = ОтветныеТитулыДокументовЭДО.ЭлектронныйДокумент";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"%ИмяСправочникаДокументаДО%",
		ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ИмяСправочникаДокументовДО());
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Документы", Документы);
	Запрос.УстановитьПараметр("ТипЭлементаОтветногоТитула",
		Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	КолвоРезультатов = РезультатыЗапроса.Количество();
	
	ВыборкаПакетов = РезультатыЗапроса[КолвоРезультатов - 2].Выбрать();
	ВыборкаДанныхЭДО = РезультатыЗапроса[КолвоРезультатов - 1].Выбрать();
	
	Пока ВыборкаПакетов.Следующий() Цикл
		
		ДанныеДокумента = ДанныеДокументов.Получить(ВыборкаПакетов.Документ);
		
		Если ДанныеДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДокумента.ИдентификаторПакета = ВыборкаПакетов.ИдентификаторПакета;
		
	КонецЦикла;
	
	Пока ВыборкаДанныхЭДО.Следующий() Цикл
		
		ДанныеДокумента = ДанныеДокументов.Получить(ВыборкаДанныхЭДО.Документ);
		
		Если ДанныеДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДокумента.ЭлектронныйДокумент = ВыборкаДанныхЭДО.ЭлектронныйДокумент;
		ДанныеДокумента.ТребуетсяОтветнаяПодпись = ВыборкаДанныхЭДО.ТребуетсяПодтверждение;
		ДанныеДокумента.Состояние = ВыборкаДанныхЭДО.Состояние;
		ДанныеДокумента.ИдентификаторКонтрагента = ВыборкаДанныхЭДО.ИдентификаторКонтрагента;
		ДанныеДокумента.ТипРегламентаЭДО = ВыборкаДанныхЭДО.ТипРегламента;
		ДанныеДокумента.ОтветныйТитулСоздан = ВыборкаДанныхЭДО.ОтветныйТитулСоздан;
		
	КонецЦикла;
	
	Возврат ДанныеДокументов;
	
КонецФункции

Функция ДанныеПакетовДляОбработкиВходящих(Пакеты)
	
	ДанныеПакетов = Новый Соответствие;
	
	Для Каждого ИДПакета Из Пакеты Цикл
		
		ДанныеПакета = Новый Структура;
		ДанныеПакета.Вставить("ИдентификаторПакетаБЭД", Неопределено);
		ДанныеПакета.Вставить("Документы", Новый Соответствие);
		
		ДанныеПакетов.Вставить(ИДПакета, ДанныеПакета);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПакетыЭДОДокументооборот.ИдентификаторПакета,
		|	ПакетыЭДОДокументооборот.ИдентификаторПакетаБЭД
		|ПОМЕСТИТЬ ПакетыДокументов
		|ИЗ
		|	РегистрСведений.ПакетыЭДОДокументооборот КАК ПакетыЭДОДокументооборот
		|ГДЕ
		|	ПакетыЭДОДокументооборот.ИдентификаторПакета В (&Пакеты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПакетыДокументов.ИдентификаторПакета,
		|	ПакетыДокументов.ИдентификаторПакетаБЭД,
		|	СоставПакетовДокументовЭДО.ЭлектронныйДокумент,
		|	ОбъектыУчетаДокументовЭДО.ОбъектУчета КАК ОбъекУчетаДокументаЭДО
		|ПОМЕСТИТЬ ОбъектыУчетаДокументовЭДО
		|ИЗ
		|	РегистрСведений.СоставПакетовДокументовЭДО КАК СоставПакетовДокументовЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПакетыДокументов КАК ПакетыДокументов
		|		ПО ПакетыДокументов.ИдентификаторПакетаБЭД = СоставПакетовДокументовЭДО.ИдентификаторПакета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ПО (СоставПакетовДокументовЭДО.ЭлектронныйДокумент = ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент
		|		И ОбъектыУчетаДокументовЭДО.Актуальный)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбъектыУчетаДокументовЭДО.ИдентификаторПакета,
		|	ОбъектыУчетаДокументовЭДО.ИдентификаторПакетаБЭД,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент,
		|	Файлы.ВладелецФайла КАК Документ
		|ПОМЕСТИТЬ ДокументыПакета
		|ИЗ
		|	ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО Файлы.ТекущаяВерсия = ОбъектыУчетаДокументовЭДО.ОбъекУчетаДокументаЭДО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыПакета.ЭлектронныйДокумент,
		|	МАКСИМУМ(СообщениеЭДО.Ссылка) КАК СообщениеОтветногоТитула
		|ПОМЕСТИТЬ ОтветныеТитулыДокументовЭДО
		|ИЗ
		|	ДокументыПакета КАК ДокументыПакета
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ПО ДокументыПакета.ЭлектронныйДокумент = СообщениеЭДО.ЭлектронныйДокумент
		|		И СообщениеЭДО.ТипЭлементаРегламента = &ТипЭлементаОтветногоТитула
		|СГРУППИРОВАТЬ ПО
		|	ДокументыПакета.ЭлектронныйДокумент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыПакета.ИдентификаторПакета,
		|	ДокументыПакета.ИдентификаторПакетаБЭД,
		|	ДокументыПакета.ЭлектронныйДокумент,
		|	ДокументыПакета.Документ,
		|	ЕСТЬNULL(СостоянияДокументовЭДО.Состояние, НЕОПРЕДЕЛЕНО) КАК Состояние,
		|	ЭлектронныйДокументВходящийЭДО.ТребуетсяПодтверждение,
		|	ЭлектронныйДокументВходящийЭДО.ТипРегламента,
		|	(НЕ ОтветныеТитулыДокументовЭДО.СообщениеОтветногоТитула ЕСТЬ NULL) КАК ОтветныйТитулСоздан
		|ИЗ
		|	ДокументыПакета КАК ДокументыПакета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|		ПО ДокументыПакета.ЭлектронныйДокумент = СостоянияДокументовЭДО.ЭлектронныйДокумент
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|		ПО ДокументыПакета.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОтветныеТитулыДокументовЭДО КАК ОтветныеТитулыДокументовЭДО
		|		ПО ДокументыПакета.ЭлектронныйДокумент = ОтветныеТитулыДокументовЭДО.ЭлектронныйДокумент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПакетыДокументов.ИдентификаторПакета,
		|	ПакетыДокументов.ИдентификаторПакетаБЭД
		|ИЗ
		|	ПакетыДокументов КАК ПакетыДокументов";
	Запрос.УстановитьПараметр("Пакеты", Пакеты);
	Запрос.УстановитьПараметр("ТипЭлементаОтветногоТитула",
		Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	КолвоРезультатов = РезультатыЗапроса.Количество();
	
	ВыборкаДанныхДокументов = РезультатыЗапроса[КолвоРезультатов - 2].Выбрать();
	ВыборкаДанныхПакетов = РезультатыЗапроса[КолвоРезультатов - 1].Выбрать();
	
	Пока ВыборкаДанныхПакетов.Следующий() Цикл
		
		ДанныеПакета = ДанныеПакетов.Получить(ВыборкаДанныхПакетов.ИдентификаторПакета);
		
		Если ДанныеПакета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеПакета.ИдентификаторПакетаБЭД = ВыборкаДанныхПакетов.ИдентификаторПакетаБЭД;
		
	КонецЦикла;
	
	Пока ВыборкаДанныхДокументов.Следующий() Цикл
		
		ДанныеПакета = ДанныеПакетов.Получить(ВыборкаДанныхПакетов.ИдентификаторПакета);
		
		Если ДанныеПакета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДокумента = Новый Структура;
		ДанныеДокумента.Вставить("Документ", ВыборкаДанныхДокументов.Документ);
		ДанныеДокумента.Вставить("Состояние", ВыборкаДанныхДокументов.Состояние);
		ДанныеДокумента.Вставить("ТребуетсяОтветнаяПодпись", ВыборкаДанныхДокументов.ТребуетсяПодтверждение);
		ДанныеДокумента.Вставить("ТипРегламентаЭДО", ВыборкаДанныхДокументов.ТипРегламента);
		ДанныеДокумента.Вставить("ОтветныйТитулСоздан", ВыборкаДанныхДокументов.ОтветныйТитулСоздан);
		
		ДанныеПакета.Документы.Вставить(ВыборкаДанныхДокументов.ЭлектронныйДокумент, ДанныеДокумента);
		
	КонецЦикла;
	
	Возврат ДанныеПакетов;
	
КонецФункции

Функция ДокументыЭДОТребующиеФормированияОтветногоТитула(ДанныеДокументов, ДанныеПакетов)
	
	ДокументыДляФормированияОтветногоТитула = Новый Соответствие;
	
	Для Каждого Элемент Из ДанныеДокументов Цикл
		
		Документ = Элемент.Ключ;
		ДанныеДокумента = Элемент.Значение;
		
		Если Не ТребуетсяСозданиеОтветногоТитула(ДанныеДокумента) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеДокументаКФормированию = Новый Структура;
		ДанныеДокументаКФормированию.Вставить("Документ", Документ);
		ДанныеДокументаКФормированию.Вставить("ДокументЭДО", ДанныеДокумента.ЭлектронныйДокумент);
		ДанныеДокументаКФормированию.Вставить("ИдентификаторПакета", ДанныеДокумента.ИдентификаторПакета);
		
		ДокументыДляФормированияОтветногоТитула.Вставить(
			ДанныеДокумента.ЭлектронныйДокумент, ДанныеДокументаКФормированию);
		
	КонецЦикла;
	
	Для Каждого ЭлементПакета Из ДанныеПакетов Цикл
		
		ИдентификаторПакета = ЭлементПакета.Ключ;
		ДанныеПакета = ЭлементПакета.Значение;
		
		Для Каждого ЭлементДокумента Из ДанныеПакета.Документы Цикл
			
			ЭлектронныйДокумент = ЭлементДокумента.Ключ;
			ДанныеДокумента = ЭлементДокумента.Значение;
			
			Если Не ТребуетсяСозданиеОтветногоТитула(ДанныеДокумента) Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеДокументаКФормированию = Новый Структура;
			ДанныеДокументаКФормированию.Вставить("Документ", ДанныеДокумента.Документ);
			ДанныеДокументаКФормированию.Вставить("ДокументЭДО", ЭлектронныйДокумент);
			ДанныеДокументаКФормированию.Вставить("ИдентификаторПакета", ИдентификаторПакета);
			
			ДокументыДляФормированияОтветногоТитула.Вставить(
				ЭлектронныйДокумент, ДанныеДокументаКФормированию);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДокументыДляФормированияОтветногоТитула;
	
КонецФункции

Функция ТребуетсяСозданиеОтветногоТитула(ДанныеДокумента)
	
	Возврат ДанныеДокумента.ТребуетсяОтветнаяПодпись
			И РегламентыЭДО.ЕстьИнформацияПолучателя(ДанныеДокумента.ТипРегламентаЭДО)
			И Не ДанныеДокумента.ОтветныйТитулСоздан;
	
КонецФункции

Процедура ИсключитьВходящиеДокументыИзОбработки(Контекст, ДанныеДокументов, ДанныеПакетов, ЭтоПрием = Истина)
	
	ОшибкиОбработкиДокументов = Контекст.ОшибкиОбработки.Документы;
	ДокументыКИсключениюИзОбработки = Новый Массив;
	
	Для Каждого Элемент Из ДанныеДокументов Цикл
		
		Документ = Элемент.Ключ;
		ДанныеДокумента = Элемент.Значение;
		
		ИДПакета = ДанныеДокумента.ИдентификаторПакета;
		
		Если ЗначениеЗаполнено(ИДПакета)
			И ДанныеПакетов[ИДПакета] <> Неопределено Тогда
			
			ОписаниеОшибки =
				НСтр("ru = 'Документ исключен из обработки, поскольку ожидается его обработка в составе пакета ЭДО.'");
			
			ОшибкиОбработкиДокументов.Вставить(Документ, ОписаниеОшибки);
			ДокументыКИсключениюИзОбработки.Добавить(Документ);
			Продолжить;
			
		КонецЕсли;
		
		ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
		
		Если Не ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
			
			ОписаниеОшибки =
				НСтр("ru = 'Не найден входящий документ ЭДО по документу 1С:Документооборот.'");
			ОшибкиОбработкиДокументов.Вставить(Документ, ОписаниеОшибки);
			ДокументыКИсключениюИзОбработки.Добавить(Документ);
			Продолжить;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИДПакета) Тогда
			ТребуетсяОднородностьОтвета =
				СинхронизацияЭДО.ТребуетсяОднородностьОтвета(ДанныеДокумента.ИдентификаторКонтрагента);
			
			Если ТребуетсяОднородностьОтвета Тогда
				ОписаниеОшибки =
					НСтр("ru = 'Документ находится в составе пакета, не допускающего обработку по одному документу.
					|Выполните действие по пакету целиком.'");
				
				ОшибкиОбработкиДокументов.Вставить(Документ, ОписаниеОшибки);
				ДокументыКИсключениюИзОбработки.Добавить(Документ);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ДействияДляДокумента = ЭлектронныеДокументыЭДО.ДействияПоСостояниюДокумента(
			ДанныеДокумента.Состояние, ЭлектронныйДокумент);
		
		Если ЭтоПрием Тогда
			
			МожноПринять = ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ВходящийДокументМожноПринять(
				ДействияДляДокумента, ДанныеДокумента.Состояние);
			
			Если Не МожноПринять Тогда
				
				ОписаниеОшибки =
					НСтр("ru = 'Документ ЭДО не может быть принят.
					|Проанализируйте статус документа ЭДО.
					|Наиболее вероятно, действие по ЭДО было выполнено для документа ЭДО, а не для документа 1С:Документооборот.'");
				
				ОшибкиОбработкиДокументов.Вставить(Документ, ОписаниеОшибки);
				ДокументыКИсключениюИзОбработки.Добавить(Документ);
				Продолжить;
				
			КонецЕсли;
			
		Иначе
			
			МожноОтклонить = ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ВходящийДокументМожноОтклонить(
				ДействияДляДокумента, ДанныеДокумента.Состояние);
			
			Если Не МожноОтклонить Тогда
				
				ОписаниеОшибки =
					НСтр("ru = 'Документ ЭДО не может быть отклонен.
					|Проанализируйте статус документа ЭДО.
					|Наиболее вероятно, действие по ЭДО было выполнено для документа ЭДО, а не для документа 1С:Документооборот.'");
				
				ОшибкиОбработкиДокументов.Вставить(Документ, ОписаниеОшибки);
				ДокументыКИсключениюИзОбработки.Добавить(Документ);
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Документ Из ДокументыКИсключениюИзОбработки Цикл
		ДанныеДокументов.Удалить(Документ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсключитьВходящиеПакетыИзОбработки(Контекст, ДанныеПакетов, ЭтоПрием = Истина)
	
	ОшибкиОбработкиПакетов = Контекст.ОшибкиОбработки.Пакеты;
	ПакетыКИсключениюИзОбработки = Новый Массив;
	
	Для Каждого Элемент Из ДанныеПакетов Цикл
		
		ИДПакета = Элемент.Ключ;
		ДанныеПакета = Элемент.Значение;
		ИДПакетаБЭД = ДанныеПакета.ИдентификаторПакетаБЭД;
		
		Если Не ЗначениеЗаполнено(ИДПакетаБЭД) Тогда
			
			ОписаниеОшибки =
				НСтр("ru = 'Не найден пакет входящих документов ЭДО.'");
			
			ОшибкиОбработкиПакетов.Вставить(ИДПакета, ОписаниеОшибки);
			ПакетыКИсключениюИзОбработки.Добавить(ИДПакета);
			Продолжить;
			
		КонецЕсли;
		
		ЕстьНесозданныеДокументы = Ложь;
		
		Для Каждого Элемент Из ДанныеПакета.Документы Цикл
			
			ДанныеДокумента = Элемент.Значение;
			
			Если Не ЗначениеЗаполнено(ДанныеДокумента.Документ) Тогда
				ЕстьНесозданныеДокументы = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьНесозданныеДокументы Тогда
			
			ОписаниеОшибки =
				НСтр("ru = 'Не по всем документам ЭДО созданы документы 1С:Документооборот.
				|Обработать можно только пакеты, полностью отраженные в документах 1С:Документооборот.'");
			
			ОшибкиОбработкиПакетов.Вставить(ИДПакета, ОписаниеОшибки);
			ПакетыКИсключениюИзОбработки.Добавить(ИДПакета);
			Продолжить;
			
		КонецЕсли;
		
		ДокументыПакета = ПакетыДокументовЭДО.ДокументыПакета(ИДПакетаБЭД);
		СостоянияДокументовПакета = ПакетыДокументовЭДО.СостоянияДокументовПакета(ИДПакетаБЭД);
		СостояниеПакета = ПакетыДокументовЭДО.СостояниеПакета(СостоянияДокументовПакета);
		
		Если Не ЗначениеЗаполнено(СостояниеПакета) Тогда
			
			ОписаниеОшибки =
				НСтр("ru = 'Состояние пакета неоднородно.
				|Действия по документам пакета необходимо выполнить по одному.'");
			
			ОшибкиОбработкиПакетов.Вставить(ИДПакета, ОписаниеОшибки);
			ПакетыКИсключениюИзОбработки.Добавить(ИДПакета);
			Продолжить;
			
		КонецЕсли;
		
		ДействияПоПакетуЭДО = ЭлектронныеДокументыЭДО.ДействияПоСостояниюДокумента(
			СостояниеПакета, ДокументыПакета[0]);
		
		Если ЭтоПрием Тогда
			
			Если ДействияПоПакетуЭДО[Перечисления.ДействияПоЭДО.Утвердить] = Неопределено
				И ДействияПоПакетуЭДО[Перечисления.ДействияПоЭДО.Подписать] = Неопределено Тогда
				
				ОписаниеОшибки =
					НСтр("ru = 'Пакет ЭДО не может быть принят.
					|Проанализируйте статус пакета ЭДО.
					|Наиболее вероятно, действие по ЭДО было выполнено из интерфейса ЭДО, а не 1С:Документооборот.'");
				
				ОшибкиОбработкиПакетов.Вставить(ИДПакета, ОписаниеОшибки);
				ПакетыКИсключениюИзОбработки.Добавить(ИДПакета);
				Продолжить;
				
			КонецЕсли;
			
		Иначе
			
			Если ДействияПоПакетуЭДО[Перечисления.ДействияПоЭДО.Отклонить] = Неопределено
				И ДействияПоПакетуЭДО[Перечисления.ДействияПоЭДО.ОтклонитьПодписание] = Неопределено Тогда
				
				ОписаниеОшибки =
					НСтр("ru = 'Пакет ЭДО не может быть отклонен.
					|Проанализируйте статус пакета ЭДО.
					|Наиболее вероятно, действие по ЭДО было выполнено из интерфейса ЭДО, а не 1С:Документооборот.'");
				
				ОшибкиОбработкиПакетов.Вставить(ИДПакета, ОписаниеОшибки);
				ПакетыКИсключениюИзОбработки.Добавить(ИДПакета);
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Пакет Из ПакетыКИсключениюИзОбработки Цикл
		ДанныеПакетов.Удалить(Пакет);
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсключитьВходящиеОбъектыПоНесформированнымОтветнымТитулам(Контекст, ДанныеДокументов, ДанныеПакетов,
		ДокументыДляФормированияОтветногоТитула)
	
	Если ДокументыДляФормированияОтветногоТитула.Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;
	
	ОшибкиОбработкиПакетов = Контекст.ОшибкиОбработки.Пакеты;
	ПакетыКИсключениюИзОбработки = Новый Массив;
	
	ОшибкиОбработкиДокументов = Контекст.ОшибкиОбработки.Документы;
	ДокументыКИсключениюИзОбработки = Новый Массив;
	
	Для Каждого Элемент Из ДокументыДляФормированияОтветногоТитула Цикл
		
		ДанныеДокумента = Элемент.Значение;
		
		Если ДанныеДокументов[ДанныеДокумента.Документ] <> Неопределено Тогда
			
			ОписаниеОшибки =
				НСтр("ru = 'Документ требует детализации результата приема. Обработайте такие документы отдельно.'");
			ОшибкиОбработкиДокументов.Вставить(ДанныеДокумента.Документ, ОписаниеОшибки);
			ДокументыКИсключениюИзОбработки.Добавить(ДанныеДокумента.Документ);
			
		КонецЕсли;
		
		Если ДанныеПакетов[ДанныеДокумента.ИдентификаторПакета] <> Неопределено Тогда
			
			ОписаниеОшибки =
				НСтр("ru = 'Некоторые документы пакета требуют детализации результата приема.
				|Обработайте такие документы отдельно.'");
			ОшибкиОбработкиПакетов.Вставить(ДанныеДокумента.ИдентификаторПакета, ОписаниеОшибки);
			ПакетыКИсключениюИзОбработки.Добавить(ДанныеДокумента.ИдентификаторПакета);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Документ Из ДокументыКИсключениюИзОбработки Цикл
		ДанныеДокументов.Удалить(Документ);
	КонецЦикла;
	
	Для Каждого Пакет Из ПакетыКИсключениюИзОбработки Цикл
		ДанныеПакетов.Удалить(Пакет);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДокументыДОКПодписаниюПоВходящим(Контекст, ДанныеДокументов, ДанныеПакетов)
	
	ДокументыКПодписанию = Новый Соответствие;
	
	Для Каждого Элемент Из ДанныеДокументов Цикл
		
		Документ = Элемент.Ключ;
		ДанныеДокумента = Элемент.Значение;
		
		Если Не ДанныеДокумента.ТребуетсяОтветнаяПодпись Тогда
			Продолжить;
		КонецЕсли;
		
		ДействияДляДокумента = ЭлектронныеДокументыЭДО.ДействияПоСостояниюДокумента(
			ДанныеДокумента.Состояние, ДанныеДокумента.ЭлектронныйДокумент);
		
		Если ДействияДляДокумента[Перечисления.ДействияПоЭДО.Утвердить] <> Неопределено
			Или ДействияДляДокумента[Перечисления.ДействияПоЭДО.Подписать] <> Неопределено Тогда
			
			ДокументыКПодписанию.Вставить(Документ, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Элемент Из ДанныеПакетов Цикл
		
		ДанныеПакета = Элемент.Значение;
		
		Для Каждого Элемент Из ДанныеПакета.Документы Цикл
			
			ЭлектронныйДокумент = Элемент.Ключ;
			ДанныеДокумента = Элемент.Значение;
			
			Если Не ДанныеДокумента.ТребуетсяОтветнаяПодпись Тогда
				Продолжить;
			КонецЕсли;
			
			ДействияДляДокумента = ЭлектронныеДокументыЭДО.ДействияПоСостояниюДокумента(
				ДанныеДокумента.Состояние, ЭлектронныйДокумент);
			
			Если ДействияДляДокумента[Перечисления.ДействияПоЭДО.Утвердить] <> Неопределено
				Или ДействияДляДокумента[Перечисления.ДействияПоЭДО.Подписать] <> Неопределено Тогда
				
				ДокументыКПодписанию.Вставить(ДанныеДокумента.Документ, Истина);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДокументыДляПодписания = Контекст.ДанныеДляПодписанияДО.Документы;
	
	Для Каждого Элемент Из ДокументыКПодписанию Цикл
		ДокументыДляПодписания.Добавить(Элемент.Ключ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОбъектыЭДОКПриему(Контекст, ДанныеДокументов, ДанныеПакетов)
	
	ДокументыЭДОКПриему = Контекст.ДокументыЭДОКПриему;
	Для Каждого Элемент Из ДанныеДокументов Цикл
		ДокументыЭДОКПриему.Добавить(Элемент.Значение.ЭлектронныйДокумент);
	КонецЦикла;
	
	ПакетыЭДОКПриему = Контекст.ПакетыЭДОКПриему;
	Для Каждого Элемент Из ДанныеПакетов Цикл
		ПакетыЭДОКПриему.Добавить(Элемент.Значение.ИдентификаторПакетаБЭД);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОбъектыЭДОКОтклонению(Контекст, ДанныеДокументов, ДанныеПакетов)
	
	ДокументыЭДОКОтклонению = Контекст.ДокументыЭДОКОтклонению;
	Для Каждого Элемент Из ДанныеДокументов Цикл
		ДокументыЭДОКОтклонению.Добавить(Элемент.Значение.ЭлектронныйДокумент);
	КонецЦикла;
	
	ПакетыЭДОКОтклонению = Контекст.ПакетыЭДОКОтклонению;
	Для Каждого Элемент Из ДанныеПакетов Цикл
		ПакетыЭДОКОтклонению.Добавить(Элемент.Значение.ИдентификаторПакетаБЭД);
	КонецЦикла;
	
КонецПроцедуры

#Область ЗанесениеПодписей

Функция ПодписанныеОбъектыПоТипам(ПодписанныеДанные)
	
	Объекты = Новый Структура;
	Объекты.Вставить("Документы", Новый Массив);
	Объекты.Вставить("Файлы", Новый Массив);
	
	Для Каждого Элемент Из ПодписанныеДанные Цикл
		
		Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Элемент.ПодписанныйОбъект) Тогда
			Объекты.Документы.Добавить(Элемент.ПодписанныйОбъект);
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоФайл(Элемент.ПодписанныйОбъект) Тогда
			Объекты.Файлы.Добавить(Элемент.ПодписанныйОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Объекты;
	
КонецФункции

Функция НеобходимостьЗанесенияПодписейДокументов(Документы)
	
	НеобходимостьЗанесенияПодписей = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	Файлы.ВладелецФайла КАК ДокументДО
		|ПОМЕСТИТЬ СоответствиеДокументовЭДО
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ПО (Файлы.ТекущаяВерсия = ОбъектыУчетаДокументовЭДО.ОбъектУчета
		|		И ОбъектыУчетаДокументовЭДО.Актуальный)
		|ГДЕ
		|	Файлы.ВладелецФайла В (&Документы)
		|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоответствиеДокументовЭДО.ДокументДО
		|ИЗ
		|	СоответствиеДокументовЭДО КАК СоответствиеДокументовЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовЭДО КАК СостоянияДокументовЭДО
		|		ПО СоответствиеДокументовЭДО.ЭлектронныйДокумент = СостоянияДокументовЭДО.ЭлектронныйДокумент
		|ГДЕ
		|	ЕСТЬNULL(СостоянияДокументовЭДО.Состояние, НЕОПРЕДЕЛЕНО) В (&СостоянияПодписанных)";
	
	СостоянияПодписанных = СостоянияПодписанныхВходящихДокументов();
	
	Запрос.УстановитьПараметр("СостоянияПодписанных", СостоянияПодписанных);
	Запрос.УстановитьПараметр("Документы", Документы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НеобходимостьЗанесенияПодписей.Вставить(Выборка.ДокументДО, Истина);
	КонецЦикла;
	
	Возврат НеобходимостьЗанесенияПодписей;
	
КонецФункции

Функция СостоянияПодписанныхВходящихДокументов()
	
	СостоянияПодписанных = Новый Массив;
	СостоянияПодписанных.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправке);
	СостоянияПодписанных.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка);
	СостоянияПодписанных.Добавить(Перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеОператора);
	СостоянияПодписанных.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяИзвещениеОПолучении);
	СостоянияПодписанных.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписаниеИзвещения);
	СостоянияПодписанных.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяПодготовкаКОтправкеИзвещения);
	СостоянияПодписанных.Добавить(Перечисления.СостоянияДокументовЭДО.ТребуетсяОтправкаИзвещения);
	СостоянияПодписанных.Добавить(Перечисления.СостоянияДокументовЭДО.ОбменЗавершен);
	
	Возврат СостоянияПодписанных;
	
КонецФункции

Функция ДокументыФайлов(Файлы)
	
	ДокументыФайлов = Новый Соответствие;
	
	РеквизитыФайлов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Файлы, "ВладелецФайла");
	
	Для Каждого Элемент Из РеквизитыФайлов Цикл
		Файл = Элемент.Ключ;
		Документ = Элемент.Значение.ВладелецФайла;
		
		ДокументыФайлов.Вставить(Файл, Документ);
	КонецЦикла;
	
	Возврат ДокументыФайлов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СертификатыДляЭДО

Функция ИдентификаторыОрганизацииЭДОДокументов(Документы)
	
	ИдентификаторыОрганизацийЭДОДокументов = Новый Соответствие;
	Для Каждого Документ Из Документы Цикл
		ИдентификаторыОрганизацийЭДОДокументов.Вставить(Документ, Неопределено);
	КонецЦикла;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДокументыДО.Ссылка КАК Документ,
		|	ДокументыДО.Организация,
		|	ДокументыДО.Контрагент,
		|	НастройкиОтправкиДокументовПоЭДО.ВидДокументаЭДО
		|ПОМЕСТИТЬ ВидыДокументовЭДОДляОтправки
		|ИЗ
		|	Справочник.%ИмяСправочникаДокументаДО% КАК ДокументыДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиДокументовПоЭДО КАК НастройкиОтправкиДокументовПоЭДО
		|		ПО ДокументыДО.ВидДокумента = НастройкиОтправкиДокументовПоЭДО.ВидДокумента
		|		И ДокументыДО.Организация = НастройкиОтправкиДокументовПоЭДО.Отправитель
		|		И ДокументыДО.Контрагент = НастройкиОтправкиДокументовПоЭДО.Получатель
		|ГДЕ
		|	ДокументыДО.Ссылка В (&Документы)
		|	И НастройкиОтправкиДокументовПоЭДО.Отправлять
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Файлы.ВладелецФайла КАК Документ,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент,
		|	ОбъектыУчетаДокументовЭДО.ЭлектронныйДокумент.ИдентификаторОрганизации КАК ИдентификаторОрганизации
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО Файлы.Ссылка = СлужебныеФайлыДокументов.Файл
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыУчетаДокументовЭДО КАК ОбъектыУчетаДокументовЭДО
		|		ПО (Файлы.ТекущаяВерсия = ОбъектыУчетаДокументовЭДО.ОбъектУчета
		|		И ОбъектыУчетаДокументовЭДО.Актуальный)
		|ГДЕ
		|	Файлы.ВладелецФайла В (&Документы)
		|	И НЕ Файлы.ПометкаУдаления
		|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыДокументовЭДОДляОтправки.Документ,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторОтправителя КАК ИдентификаторОрганизации
		|ИЗ
		|	ВидыДокументовЭДОДляОтправки КАК ВидыДокументовЭДОДляОтправки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК
		|			НастройкиОтправкиЭлектронныхДокументовПоВидам
		|		ПО ВидыДокументовЭДОДляОтправки.Организация = НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель
		|		И ВидыДокументовЭДОДляОтправки.Контрагент = НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель
		|		И ВидыДокументовЭДОДляОтправки.ВидДокументаЭДО = НастройкиОтправкиЭлектронныхДокументовПоВидам.ВидДокумента
		|ГДЕ
		|	ВидыДокументовЭДОДляОтправки.ВидДокументаЭДО <> ЗНАЧЕНИЕ(Справочник.ВидыДокументовЭДО.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВидыДокументовЭДОДляОтправки.Документ,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторОтправителя КАК ИдентификаторОрганизации
		|ИЗ
		|	ВидыДокументовЭДОДляОтправки КАК ВидыДокументовЭДОДляОтправки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК
		|			НастройкиОтправкиЭлектронныхДокументовПоВидам
		|		ПО ВидыДокументовЭДОДляОтправки.Организация = НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель
		|		И ВидыДокументовЭДОДляОтправки.Контрагент = НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель
		|		И НастройкиОтправкиЭлектронныхДокументовПоВидам.ВидДокумента = &ВидДокументаПрочее
		|ГДЕ
		|	ВидыДокументовЭДОДляОтправки.ВидДокументаЭДО = ЗНАЧЕНИЕ(Справочник.ВидыДокументовЭДО.ПустаяСсылка)";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"%ИмяСправочникаДокументаДО%",
		ОбменСКонтрагентамиДОСлужебныйКлиентСервер.ИмяСправочникаДокументовДО());
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Документы", Документы);
	Запрос.УстановитьПараметр("ВидДокументаПрочее",
		ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(Перечисления.ТипыДокументовЭДО.Прочее));
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	КолвоРезультатов = РезультатыЗапроса.Количество();
	
	ВыборкаИдентификаторовПоЭД = РезультатыЗапроса[КолвоРезультатов - 2].Выбрать();
	ВыборкаИдентификаторовПоНастройкамОтправки = РезультатыЗапроса[КолвоРезультатов - 1].Выбрать();
	
	Пока ВыборкаИдентификаторовПоЭД.Следующий() Цикл
		
		ИдентификаторыОрганизацийЭДОДокументов.Вставить(
			ВыборкаИдентификаторовПоЭД.Документ, ВыборкаИдентификаторовПоЭД.ИдентификаторОрганизации);
		
	КонецЦикла;
	
	Пока ВыборкаИдентификаторовПоНастройкамОтправки.Следующий() Цикл
		
		Документ = ВыборкаИдентификаторовПоНастройкамОтправки.Документ;
		
		Если ИдентификаторыОрганизацийЭДОДокументов.Получить(Документ) = Неопределено Тогда
			ИдентификаторыОрганизацийЭДОДокументов.Вставить(
				Документ, ВыборкаИдентификаторовПоНастройкамОтправки.ИдентификаторОрганизации);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИдентификаторыОрганизацийЭДОДокументов;
	
КонецФункции

Функция СертификатыЭДОПоУчетнымЗаписям(ИдентификаторыЭДО)
	
	СертификатыИдентификаторовЭДО = Новый Соответствие;
	Для Каждого ИдентификаторЭДО Из ИдентификаторыЭДО Цикл
		СертификатыИдентификаторовЭДО.Вставить(ИдентификаторЭДО, Новый Соответствие);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СертификатыУчетныхЗаписейЭДО.ИдентификаторЭДО,
		|	СертификатыУчетныхЗаписейЭДО.Сертификат,
		|	СертификатыУчетныхЗаписейЭДО.ДействителенДо,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Отпечаток КАК Отпечаток,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователь КАК Владелец,
		|	СертификатыУчетныхЗаписейЭДО.Доверенность
		|ПОМЕСТИТЬ СертификатыЭДО
		|ИЗ
		|	РегистрСведений.СертификатыУчетныхЗаписейЭДО КАК СертификатыУчетныхЗаписейЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК
		|			СертификатыКлючейЭлектроннойПодписиИШифрования
		|		ПО СертификатыУчетныхЗаписейЭДО.Сертификат = СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка
		|ГДЕ
		|	СертификатыУчетныхЗаписейЭДО.ИдентификаторЭДО В (&ИдентификаторыЭДО)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СертификатыЭДО.ИдентификаторЭДО,
		|	СертификатыЭДО.Сертификат,
		|	СертификатыЭДО.ДействителенДо,
		|	СертификатыЭДО.Отпечаток,
		|	СертификатыЭДО.Владелец,
		|	СертификатыЭДО.Доверенность
		|ИЗ
		|	СертификатыЭДО КАК СертификатыЭДО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СертификатыЭДО.ИдентификаторЭДО,
		|	СертификатыЭДО.Сертификат,
		|	СертификатыЭДО.ДействителенДо,
		|	СертификатыЭДО.Отпечаток,
		|	СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи.Пользователь,
		|	СертификатыЭДО.Доверенность
		|ИЗ
		|	СертификатыЭДО КАК СертификатыЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователи КАК
		|			СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи
		|		ПО СертификатыКлючейЭлектроннойПодписиИШифрованияПользователи.Ссылка = СертификатыЭДО.Сертификат";
	Запрос.УстановитьПараметр("ИдентификаторыЭДО", ИдентификаторыЭДО);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	КолвоРезультатов = РезультатыЗапроса.Количество();
	
	ВыборкаПоВладельцам = РезультатыЗапроса[КолвоРезультатов - 2].Выбрать();
	ВыборкаПоПользователям = РезультатыЗапроса[КолвоРезультатов - 1].Выбрать();
	
	Пока ВыборкаПоВладельцам.Следующий() Цикл
		
		ИдентификаторЭДО = ВыборкаПоВладельцам.ИдентификаторЭДО;
		
		СертификатыИдентификатора = СертификатыИдентификаторовЭДО.Получить(ИдентификаторЭДО);
		
		ДанныеСертификата = СертификатыИдентификатора.Получить(ВыборкаПоВладельцам.Отпечаток);
		
		Если ДанныеСертификата = Неопределено Тогда
			
			ДанныеСертификата = НовыеДанныеСертификатаЭДО();
			ДанныеСертификата.Ссылка = ВыборкаПоВладельцам.Сертификат;
			ДанныеСертификата.ДействителенДо = ВыборкаПоВладельцам.ДействителенДо;
			ДанныеСертификата.Доверенность = ВыборкаПоВладельцам.Доверенность;
			
			СертификатыИдентификатора.Вставить(ВыборкаПоВладельцам.Отпечаток, ДанныеСертификата);
			
		КонецЕсли;
		
		ДанныеСертификата.ДоступенПользователям.Вставить(ВыборкаПоВладельцам.Владелец, Истина);
		
	КонецЦикла;
	
	Пока ВыборкаПоПользователям.Следующий() Цикл
		
		ИдентификаторЭДО = ВыборкаПоПользователям.ИдентификаторЭДО;
		
		СертификатыИдентификатора = СертификатыИдентификаторовЭДО.Получить(ИдентификаторЭДО);
		
		ДанныеСертификата = СертификатыИдентификатора.Получить(ВыборкаПоПользователям.Отпечаток);
		
		Если ДанныеСертификата = Неопределено Тогда
			
			ДанныеСертификата = НовыеДанныеСертификатаЭДО();
			ДанныеСертификата.Ссылка = ВыборкаПоПользователям.Сертификат;
			ДанныеСертификата.ДействителенДо = ВыборкаПоПользователям.ДействителенДо;
			ДанныеСертификата.Доверенность = ВыборкаПоПользователям.Доверенность;
			
			СертификатыИдентификатора.Вставить(ВыборкаПоПользователям.Отпечаток, ДанныеСертификата);
			
		КонецЕсли;
		
		ДанныеСертификата.ДоступенПользователям.Вставить(ВыборкаПоПользователям.Пользователь, Истина);
		
	КонецЦикла;
	
	Возврат СертификатыИдентификаторовЭДО;
	
КонецФункции

Функция ОтпечаткиСертификатовДоступныхНаСервере()
	
	ОтпечаткиСертификатов = Новый Соответствие;
	
	МенеджерКриптографии = ЭлектроннаяПодпись.МенеджерКриптографии("ПолучениеСертификатов", Ложь);
	
	Если МенеджерКриптографии = Неопределено Тогда
		Возврат ОтпечаткиСертификатов;
	КонецЕсли;
	
	ХранилищеСертификатовКриптографии = МенеджерКриптографии.ПолучитьХранилищеСертификатов(
		ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	
	ВсеСертификаты = ХранилищеСертификатовКриптографии.ПолучитьВсе();
	
	Для Каждого Сертификат Из ВсеСертификаты Цикл
		
		Отпечаток = Base64Строка(Сертификат.Отпечаток);
		
		ОтпечаткиСертификатов.Вставить(Отпечаток, Истина);
		
	КонецЦикла;
	
	Возврат ОтпечаткиСертификатов;
	
КонецФункции

// Новые данные сертификата по учетной записи ЭДО
// 
// Возвращаемое значение:
//  Структура - Новые данные сертификата ЭДО:
// * Ссылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - Ссылка на сертификат шифрования
// * ДействителенДо - Дата - Дата действия сертификата
// * ДоступенПользователям - Соответствие из КлючИЗначение:
//       ** Ключ - СправочникСсылка.Пользователи - Пользователь
//       ** Значение - Булево - Доступен ли сертификат пользователю
// * ДоступенНаСервере - Булево - Доступен ли сертификат на сервере
// * Доверенность - ОпределяемыйТип.МашиночитаемаяДоверенность - МЧД, используемая для учетной записи ЭДО
//
Функция НовыеДанныеСертификатаЭДО()
	
	ДанныеСертификата = Новый Структура;
	ДанныеСертификата.Вставить("Ссылка", Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка());
	ДанныеСертификата.Вставить("ДействителенДо", Дата(1, 1, 1));
	ДанныеСертификата.Вставить("ДоступенПользователям", Новый Соответствие);
	ДанныеСертификата.Вставить("ДоступенНаСервере", Ложь);
	ДанныеСертификата.Вставить("Доверенность", Справочники.МЧД003.ПустаяСсылка());
	
	Возврат ДанныеСертификата;
	
КонецФункции

#КонецОбласти

#КонецОбласти
