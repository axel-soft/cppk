#Область ПрограммныйИнтерфейс

#Область СрокиИсполнения

// Изменять срок (точную дату или относительный срок) по предствлению
//
// Параметры:
//  Дата - Дата - срок исполнения датой (точный срок).
//  Дни - Число - относительный срок, дни.
//  Часы - Число - относительный срок, часы.
//  Минуты - Число - относительный срок, минуты.
//  ВариантУстановкиСрока - ПеречислениеСсылка.ВариантыУстановкиСрокаИсполнения - 
//                          вариант установки срока.
//  Представление - Строка - представление срока строкой.
//  ДопПараметры - Структура - структура вспомогательных параметров.
//   * ТекстСообщенияПредупреждения - Строка - возвращаемый текст сообщения/предупреждения в
//                                             случае ошибки.
//   * ВПредставленииМожетБытьДата - Булево - признак того, что в представлении может быть дата.
//   * Исполнитель - СправочникСсылка.Пользователи,
//                   СправочникСсылка.РолиИсполнителей,
//                   СправочникСсылка.Сотрудники - исполнитель срок которого изменяется.
//
// Возвращаемое значение:
//  Булево
//
Функция ИзменитьСрокИсполненияПоПредставлению(
	Дата, Дни, Часы, Минуты, ВариантУстановкиСрока, Представление, ДопПараметры) Экспорт
	
	Возврат ОбщегоНазначенияДокументооборот.ИзменитьСрокИсполненияПоПредставлению(
		Дата, Дни, Часы, Минуты, ВариантУстановкиСрока, Представление, ДопПараметры);
	
КонецФункции

#КонецОбласти

// Возвращает описание предмета в виде текстовой строки.
// 
// Параметры
//  СсылкаНаПредмет  - ЛюбаяСсылка - объект ссылочного типа.
//
// Возвращаемое значение:
//   Строка 
// 
Функция ПредметСтрокой(СсылкаНаПредмет, ИмяПредмета = Неопределено) Экспорт
	
	Результат = "";
	
	Если ТипЗнч(СсылкаНаПредмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ПредставлениеОбъекта = СсылкаНаПредмет.Метаданные().ПредставлениеОбъекта;
		Если ПустаяСтрока(ПредставлениеОбъекта) Тогда
			ПредставлениеОбъекта = СсылкаНаПредмет.Метаданные().Представление();
		КонецЕсли;
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 (%2)", СсылкаНаПредмет.Наименование, ПредставлениеОбъекта);
	ИначеЕсли СсылкаНаПредмет = Неопределено или СсылкаНаПредмет.Пустая() Тогда
		Если ИмяПредмета = Неопределено Тогда
			Результат = НСтр("ru = 'не введен'");
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (не введен)'"),Строка(ИмяПредмета));
		КонецЕсли;
	ИначеЕсли ТипЗнч(СсылкаНаПредмет) = Тип("СправочникСсылка.Мероприятия") Тогда
		// По виду мероприятия понятно, о каком объекте идёт речь.
		ПредставлениеСсылки = Строка(СсылкаНаПредмет);
		Результат = ПредставлениеСсылки;
	Иначе
		МетаданныеПредмета = СсылкаНаПредмет.Метаданные();
		Если ИмяПредмета = Неопределено Тогда
			ПредставлениеОбъекта = МетаданныеПредмета.ПредставлениеОбъекта;
			Если ПустаяСтрока(ПредставлениеОбъекта) Тогда
				ПредставлениеОбъекта = МетаданныеПредмета.Представление();
			КонецЕсли;
		Иначе
			ПредставлениеОбъекта = Строка(ИмяПредмета);
		КонецЕсли;
		
		ПредставлениеСсылки = Строка(СсылкаНаПредмет);
		
		Если МетаданныеПредмета.Имя = "Файлы" Тогда
			ОписаниеФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаПредмет, "Описание");
			Если ЗначениеЗаполнено(ОписаниеФайла) Тогда
				ПредставлениеСсылки = ПредставлениеСсылки + ", " + ОписаниеФайла;
			КонецЕсли;
		КонецЕсли;
		
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1 (%2)", ПредставлениеСсылки, ПредставлениеОбъекта);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает описание предмета в виде текстовой строки.
// 
// Параметры
//  СсылкаНаПредмет  - ЛюбаяСсылка - объект ссылочного типа.
//
// Возвращаемое значение:
//   Строка 
// 
Функция ПредметОзнакомленияСтрокой(СсылкаНаПредмет, ИмяПредмета = Неопределено) Экспорт
	
	Результат = "";
	
	Если ТипЗнч(СсылкаНаПредмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ПредставлениеОбъекта = СсылкаНаПредмет.Метаданные().ПредставлениеОбъекта;
		Если ПустаяСтрока(ПредставлениеОбъекта) Тогда
			ПредставлениеОбъекта = СсылкаНаПредмет.Метаданные().Представление();
		КонецЕсли;
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 (%2)", СсылкаНаПредмет.Наименование, ПредставлениеОбъекта);
	ИначеЕсли СсылкаНаПредмет = Неопределено или СсылкаНаПредмет.Пустая() Тогда
		Если ИмяПредмета = Неопределено Тогда
			Результат = НСтр("ru = 'не введен'");
		Иначе
			Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (не введен)'"),Строка(ИмяПредмета));
		КонецЕсли;
	ИначеЕсли ТипЗнч(СсылкаНаПредмет) = Тип("СправочникСсылка.Мероприятия") Тогда
		// По виду мероприятия понятно, о каком объекте идёт речь.
		ПредставлениеСсылки = Строка(СсылкаНаПредмет);
		Результат = ПредставлениеСсылки;
	Иначе
		МетаданныеПредмета = СсылкаНаПредмет.Метаданные();
		Если ИмяПредмета = Неопределено Тогда
			ПредставлениеОбъекта = МетаданныеПредмета.ПредставлениеОбъекта;
			Если ПустаяСтрока(ПредставлениеОбъекта) Тогда
				ПредставлениеОбъекта = МетаданныеПредмета.Представление();
			КонецЕсли;
		Иначе
			ПредставлениеОбъекта = Строка(ИмяПредмета);
		КонецЕсли;
		
		ПредставлениеСсылки = Строка(СсылкаНаПредмет);
		
		Если МетаданныеПредмета.Имя = "Файлы" Тогда
			ОписаниеФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаПредмет, "Описание");
			Если ЗначениеЗаполнено(ОписаниеФайла) Тогда
				ПредставлениеСсылки = ПредставлениеСсылки + ", " + ОписаниеФайла;
			КонецЕсли;
		КонецЕсли;

		Если МетаданныеПредмета.Имя = "ДокументыПредприятия" Тогда
			ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаПредмет, "ВидДокумента");
			ПредставлениеОбъекта = Строка(ВидДокумента);
		КонецЕсли;
		
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1 (%2)", ПредставлениеСсылки, ПредставлениеОбъекта);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);
	
КонецФункции

Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

// Возвращает значение реквизита "ЮрФизЛицо" контрагента, получает его в прив. режиме
// 
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ЮрФизЛицо - значение реквизита "ЮрФизЛицо" контрагента
Функция ЮрФизЛицоКонтрагентаВПривилегированномРежиме(Контрагент) Экспорт
	
	Возврат ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(Контрагент, "ЮрФизЛицо", Ложь);
	
КонецФункции 

Функция ЗначенияРеквизитовОбъектов(МассивСсылок, ИменаРеквизитов) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСсылок, ИменаРеквизитов);
	
КонецФункции

Функция ЗначениеРеквизитаОбъектов(МассивСсылок, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСсылок, ИмяРеквизита);
	
КонецФункции

Функция ЭтоСсылка(Тип) Экспорт
	
	Возврат ОбщегоНазначения.ЭтоСсылка(Тип);
	
КонецФункции

// Устанавливает флаг отображения описаний изменений версий по текущую версию включительно.
//
Процедура УстановитьФлагОтображенияОписанийПоТекущуюВерсию() Экспорт
	
	ВывестиОписаниеИзмененийДляАдминистратора = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ОбновлениеИБ",
		"ВывестиОписаниеИзмененийДляАдминистратора",,,
		ИмяПользователя());
	Если ВывестиОписаниеИзмененийДляАдминистратора = Истина Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекУдалить(
			"ОбновлениеИБ",
			"ВывестиОписаниеИзмененийДляАдминистратора",
			ИмяПользователя());
	КонецЕсли;
	
	Если ОбновлениеИнформационнойБазыСлужебный.ПоказатьОписаниеИзмененийСистемы() Тогда
		ОбновлениеИнформационнойБазыСлужебный.УстановитьФлагОтображенияОписанийПоТекущуюВерсию(ИмяПользователя());  
	КонецЕсли;  	

КонецПроцедуры

// Определяет параметры установки пометки удаления.
//
// Параметры:
//  ОбъектыКУдалению - Массив из ЛюбаяСсылка - Объекты к удалению. Все объекты должны быть одного типа.
// 
// Возвращаемое значение:
//  Структура - Параметры установки пометки удаления:
//   * ТекстВопроса - Строка - Текст вопроса пользователю.
//   * ПометкаУдаления - Булево - Устанавливаемая пометка удаления.
//   * ИмяСобытия - Строка - Имя события оповещения.
//
Функция ПараметрыУстановкиПометкиУдаления(Знач ОбъектыКУдалению) Экспорт
	
	КоличествоОбъектов = ОбъектыКУдалению.Количество();
	
	ПараметрыПометки = Новый Структура("ТекстВопроса, ПометкаУдаления, ИмяСобытия");
	ПараметрыПометки.ТекстВопроса = "";
	ПараметрыПометки.ПометкаУдаления = Ложь;
	ПараметрыПометки.ИмяСобытия = "";
	Если КоличествоОбъектов = 0 Тогда
		Возврат ПараметрыПометки;
	КонецЕсли;
	
	ТипОбъектов = ТипЗнч(ОбъектыКУдалению[0]);
	Для Каждого ОбъектКУдалению Из ОбъектыКУдалению Цикл
		
		Если ТипЗнч(ОбъектКУдалению) <> ТипОбъектов Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Некорректный тип элемента %1. Все объекты должны быть одного типа %2.'"),
				ТипЗнч(ОбъектКУдалению),
				ТипОбъектов);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщаяПометкаУдаления = Ложь;
	ПометкиУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ОбъектыКУдалению, "ПометкаУдаления");
	Для Каждого КлючИЗначения Из ПометкиУдаления Цикл
		
		Если КлючИЗначения.Значение = Истина Тогда
			ОбщаяПометкаУдаления = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыПометки.ПометкаУдаления = Не ОбщаяПометкаУдаления;
	
	Если КоличествоОбъектов = 1 И ПараметрыПометки.ПометкаУдаления = Истина Тогда
		
		ПараметрыПометки.ТекстВопроса = СтрШаблон(
			НСтр("ru = 'Пометить ""%1"" на удаление?'"),
			Строка(ОбъектыКУдалению[0]));
		
	ИначеЕсли КоличествоОбъектов = 1 И ПараметрыПометки.ПометкаУдаления = Ложь Тогда
		
		ПараметрыПометки.ТекстВопроса = СтрШаблон(
			НСтр("ru = 'Снять с ""%1"" пометку на удаление?'"),
			Строка(ОбъектыКУдалению[0]));
			
	ИначеЕсли КоличествоОбъектов > 1 И ПараметрыПометки.ПометкаУдаления = Истина Тогда
		
		ПараметрыПометки.ТекстВопроса = НСтр("ru = 'Пометить выделенные элементы на удаление?'");
		
	ИначеЕсли КоличествоОбъектов > 1 И ПараметрыПометки.ПометкаУдаления = Ложь Тогда
		
		ПараметрыПометки.ТекстВопроса = НСтр("ru = 'Снять с выделенных элементов пометку удаления?'");
		
	КонецЕсли;
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипОбъектов);
	Если ОбъектМетаданных <> Неопределено Тогда
		ПараметрыПометки.ИмяСобытия = "Запись_" + ОбъектМетаданных.Имя;
	КонецЕсли;
	
	Возврат ПараметрыПометки;
	
КонецФункции

// Устанавливает пометку удаления для указанных объектов.
//
// Параметры:
//  ОбъектыКУдалению - Массив из ЛюбаяСсылка - Объекты к удалению.
//  ПометкаУдаления	 - Булево - Пометка удаления, которую необходимо установить.
//
Процедура УстановитьПометкуУдаления(Знач ОбъектыКУдалению, Знач ПометкаУдаления) Экспорт
	
	Для Каждого Ссылка Из ОбъектыКУдалению Цикл
		
		ЗаблокироватьДанныеДляРедактирования(Ссылка);
		
		Объект = Ссылка.ПолучитьОбъект();
		Если Объект.ПометкаУдаления = ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		Объект.УстановитьПометкуУдаления(ПометкаУдаления);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриНачалеРаботыСистемы() Экспорт
	
	ПротоколированиеРаботыСотрудников.ЗаписатьВходВСистему();
	ОбработкаОчередиЗаданийВызовСервера.ИзменитьНастройкуИспользоватьЗаданияЕслиНужно();
	
КонецПроцедуры

// Проверка перетаскивания файлов.
// 
// Параметры:
//  ВладелецФайла - ОпределяемыйТип.ВладелецФайлов.
//  РольФайла - СправочникСсылка.РолиФайлов.
//  ИмяБезРасширения - Строка - Имя без расширения единственного файла.
//  Расширение - Строка - Расширение единственного файла.
// 
// Возвращаемое значение:
//  Структура - Проверка перетаскивания файлов:
//   * ДоступноИзменение - Булево.
//   * РегистрационныйНомер - Строка.
//   * СостояниеОбработки - Неопределено, ПеречислениеСсылка.СостоянияОбработкиОбъектов - Состояние обработки.
//   * РолиФайлов - Массив.
//   * ИспользоватьРолиФайлов - Булево.
//   * ВВидеЭтаРольТолькоОдинФайл - Булево.
//   * НетФайловВРоли - Булево.
//   * ЭтоНовыйФайл - Булево.
//   * ДоступноМенятьРолиФайловДрагДропом - Булево.
//   * СостояниеТекст - Булево.
//   * ДоступноСоздатьФайлОригинал - Булево.
//   * ДоступноСоздатьФайлОбычный - Булево.
//   * ВестиУчетСканКопийОригиналовДокументов - Булево.
//   * СохранитьСведенияОбОригиналеФайла - Булево.
//
Функция ПроверкаПеретаскиванияФайлов(Знач ВладелецФайла, Знач РольФайла, Знач ИмяБезРасширения, Знач Расширение) Экспорт
	
	ДанныеПроверки = Новый Структура;
	
	Если ТипЗнч(ВладелецФайла) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		
		// Доступно изменение.
		ПраваПользователяПоОбъекту =
			ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(ВладелецФайла);
		ДанныеПроверки.Вставить("ДоступноИзменение", ПраваПользователяПоОбъекту.Изменение);
		
		// Регистрационный номер.
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ВладелецФайла,
			"ВидДокумента, РегистрационныйНомер");
		ДанныеПроверки.Вставить("РегистрационныйНомер", РеквизитыДокумента.РегистрационныйНомер);
		
		// Состояние обработки.
		СостояниеОбработки = ДействияСервер.ТекущееСостояниеОбработки(ВладелецФайла);
		ДанныеПроверки.Вставить("СостояниеОбработки", СостояниеОбработки);
		
		// Роли файлов.
		ВидДокументаКэш = Делопроизводство.КэшВидаДокумента(РеквизитыДокумента.ВидДокумента);
		ДанныеПроверки.Вставить("РолиФайлов", ВидДокументаКэш.РолиФайлов);
		
		// Использовать роли файлов.
		ИспользоватьРолиФайлов = ПолучитьФункциональнуюОпцию("ИспользоватьРолиФайлов");
		ДанныеПроверки.Вставить("ИспользоватьРолиФайлов", ИспользоватьРолиФайлов);
		
		// В виде эта роль только один файл.
		ВВидеЭтаРольТолькоОдинФайл = Ложь;
		
		Для Каждого ОписаниеРоли Из ВидДокументаКэш.РолиФайлов Цикл
			
			Если ОписаниеРоли.Роль = РольФайла И ОписаниеРоли.ТолькоОдинФайл Тогда
				
				ВВидеЭтаРольТолькоОдинФайл = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДанныеПроверки.Вставить("ВВидеЭтаРольТолькоОдинФайл", ВВидеЭтаРольТолькоОдинФайл);
		
		// Нет файлов в роли.
		ТаблицаФайлы = Делопроизводство.ПолучитьДанныеФайловДляСписка(Неопределено, ВладелецФайла);
		НетФайловВРоли = Истина;
		
		Для Каждого СтрокаФайла Из ТаблицаФайлы Цикл
			
			Если СтрокаФайла.РольФайла = РольФайла Тогда
				
				НетФайловВРоли = Ложь;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДанныеПроверки.Вставить("НетФайловВРоли", НетФайловВРоли);
		
		// Это новый файл.
		ЭтоНовыйФайл = Истина;
		
		Если ЗначениеЗаполнено(ИмяБезРасширения) Или ЗначениеЗаполнено(Расширение) Тогда
			
			Расширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Расширение);
			
			Для Каждого СтрокаФайла Из ТаблицаФайлы Цикл
				
				Если СтрокаФайла.Наименование = ИмяБезРасширения
					И СтрокаФайла.Расширение = Расширение Тогда
					
					ЭтоНовыйФайл = Ложь;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ДанныеПроверки.Вставить("ЭтоНовыйФайл", ЭтоНовыйФайл);
		
		// Доступно менять роли файлов драг дропом.
		ОграничиватьДоступностьПолейПоСостоянию =
			ПолучитьФункциональнуюОпцию("ОграничиватьДоступностьПолейПоСостоянию")
			И Не Пользователи.ЭтоПолноправныйПользователь();
		ДокументОбъект = ВладелецФайла.ПолучитьОбъект();
		ДоступныеПоля = Новый Массив;
		НедоступныеПоля = Новый Массив;
		Делопроизводство.ПолучитьДоступныеИНедоступныеПоСостояниюПоля(
			ДокументОбъект,
			ДоступныеПоля,
			НедоступныеПоля);
		ДоступноМенятьРолиФайловДрагДропом =
			НедоступныеПоля.Найти("РедактированиеФайлов") = Неопределено
			Или Не ОграничиватьДоступностьПолейПоСостоянию;
		ДанныеПроверки.Вставить(
			"ДоступноМенятьРолиФайловДрагДропом",
			ДоступноМенятьРолиФайловДрагДропом);
		
		// Состояние текст.
		СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(ВладелецФайла);
		ДанныеПроверки.Вставить("СостояниеТекст", СостояниеТекст);
		
		// Доступно создать файл оригинал.
		ДоступноСоздатьФайлОригинал =
			ДоступныеПоля.Найти("ДобавлениеОригиналов") <> Неопределено
			Или Не ОграничиватьДоступностьПолейПоСостоянию;
		ДанныеПроверки.Вставить("ДоступноСоздатьФайлОригинал", ДоступноСоздатьФайлОригинал);
		
		// Доступно создать файл обычный.
		ДоступноСоздатьФайлОбычный =
			ДоступныеПоля.Найти("ДобавлениеФайлов") <> Неопределено
			Или Не ОграничиватьДоступностьПолейПоСостоянию;
		ДанныеПроверки.Вставить("ДоступноСоздатьФайлОбычный", ДоступноСоздатьФайлОбычный);
		
		// Вести учет скан копий оригиналов документов.
		ВестиУчетСканКопийОригиналовДокументов = 
			ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов");
		ДанныеПроверки.Вставить(
			"ВестиУчетСканКопийОригиналовДокументов",
			ВестиУчетСканКопийОригиналовДокументов);
		
		// Сохранить сведения об оригинале файла.
		ДоступноТолькоДобавлениеОригинала =
			ДоступныеПоля.Найти("ДобавлениеОригиналов") <> Неопределено
			И ДоступныеПоля.Найти("ДобавлениеФайлов") = Неопределено;
		ЭтоРасширениеСканКопии = ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(Расширение);
		
		СохранитьСведенияОбОригиналеФайла =
			ВестиУчетСканКопийОригиналовДокументов
			И (ДоступноТолькоДобавлениеОригинала
				Или ЭтоРасширениеСканКопии);
		
		ДанныеПроверки.Вставить("СохранитьСведенияОбОригиналеФайла", СохранитьСведенияОбОригиналеФайла);
		
	ИначеЕсли ТипЗнч(ВладелецФайла) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
		
		РеквизитыПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ВладелецФайла,
			"ДатаОтправки");
		ПисьмоОтправлено = ЗначениеЗаполнено(РеквизитыПисьма.ДатаОтправки);
		
		// Доступно изменение.
		ПраваПользователяПоОбъекту =
			ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(ВладелецФайла);
		ДанныеПроверки.Вставить(
			"ДоступноИзменение",
			ПраваПользователяПоОбъекту.Изменение И Не ПисьмоОтправлено);
		
		// Регистрационный номер.
		ДанныеПроверки.Вставить("РегистрационныйНомер", "");
		
		// Состояние обработки.
		ДанныеПроверки.Вставить("СостояниеОбработки", Перечисления.СостоянияОбработкиОбъектов.ПустаяСсылка());
		
		// Роли файлов.
		ДанныеПроверки.Вставить("РолиФайлов", Новый Массив);
		
		// Использовать роли файлов.
		ДанныеПроверки.Вставить("ИспользоватьРолиФайлов", Ложь);
		
		// В виде эта роль только один файл.
		ДанныеПроверки.Вставить("ВВидеЭтаРольТолькоОдинФайл", Ложь);
		
		// Нет файлов в роли.
		ДанныеПроверки.Вставить("НетФайловВРоли", Истина);
		
		// Это новый файл.
		ТаблицаФайлы = Делопроизводство.ПолучитьДанныеФайловДляСписка(Неопределено, ВладелецФайла);
		ЭтоНовыйФайл = Истина;
		
		Если ЗначениеЗаполнено(ИмяБезРасширения) Или ЗначениеЗаполнено(Расширение) Тогда
			
			Расширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Расширение);
			
			Для Каждого СтрокаФайла Из ТаблицаФайлы Цикл
				
				Если СтрокаФайла.Наименование = ИмяБезРасширения
					И СтрокаФайла.Расширение = Расширение Тогда
					
					ЭтоНовыйФайл = Ложь;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ДанныеПроверки.Вставить("ЭтоНовыйФайл", ЭтоНовыйФайл);
		
		// Доступно менять роли файлов драг дропом.
		ДанныеПроверки.Вставить("ДоступноМенятьРолиФайловДрагДропом", Истина);
		
		// Состояние текст.
		ДанныеПроверки.Вставить("СостояниеТекст", "");
		
		// Доступно создать файл оригинал.
		ДанныеПроверки.Вставить("ДоступноСоздатьФайлОригинал", Истина);
		
		// Доступно создать файл обычный.
		ДанныеПроверки.Вставить("ДоступноСоздатьФайлОбычный", Истина);
		
		// Вести учет скан копий оригиналов документов.
		ДанныеПроверки.Вставить("ВестиУчетСканКопийОригиналовДокументов", Ложь);
		
		// Сохранить сведения об оригинале файла.
		ДанныеПроверки.Вставить("СохранитьСведенияОбОригиналеФайла", Ложь);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный владелец файла %1 (%2).'"),
			ВладелецФайла,
			ТипЗнч(ВладелецФайла));
		
	КонецЕсли;
	
	Возврат ДанныеПроверки;
	
КонецФункции

// Проверка удаления файлов.
// 
// Параметры:
//  Файл - СправочникСсылка.Файлы.
// 
// Возвращаемое значение:
//  Структура - Данные проверки перетаскивания файлов:
//   * ВладелецФайла - ОпределяемыйТип.ВладелецФайлов.
//   * РазрешеноУдаление - Булево.
//   * ПометкаУдаления - Булево.
//   * НаименованиеФайла - Строка.
//   * ПодписанЭП - Булево.
//   * Файл - СправочникСсылка.Файлы.
//
Функция ПроверкаУдаленияФайла(Знач Файл) Экспорт
	
	ДанныеПроверки = Новый Структура;
	
	РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Файл,
		"ВладелецФайла, Наименование, ПометкаУдаления, ПодписанЭП");
	
	// Владелец файла.
	ДанныеПроверки.Вставить("ВладелецФайла", РеквизитыФайла.ВладелецФайла);
	
	// Пометка удаления.
	ДанныеПроверки.Вставить("ПометкаУдаления", РеквизитыФайла.ПометкаУдаления);
	
	// Наименование файла.
	ДанныеПроверки.Вставить("НаименованиеФайла", РеквизитыФайла.Наименование);
	
	// Подписан ЭП.
	ДанныеПроверки.Вставить("ПодписанЭП", РеквизитыФайла.ПодписанЭП);
	
	// Файл.
	ДанныеПроверки.Вставить("Файл", Файл);
	
	// Разрешено удаление.
	РазрешеноУдаление = Истина;
	
	Если ТипЗнч(РеквизитыФайла.ВладелецФайла) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		
		ЗапретитьУдалятьФайлы = Ложь;
		
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			РеквизитыФайла.ВладелецФайла,
			"Шаблон");
		Если ЗначениеЗаполнено(РеквизитыДокумента.Шаблон)
			И Не Пользователи.ЭтоПолноправныйПользователь() Тогда
			
			РеквизитыШаблона = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
				РеквизитыДокумента.Шаблон,
				"ЗапретитьУдалятьФайлы");
			ЗапретитьУдалятьФайлы  = РеквизитыШаблона.ЗапретитьУдалятьФайлы;
			
		КонецЕсли;
		
		СозданПоШаблонуДокумента = РегистрыСведений.ФайлыСозданныеПоШаблону.ПолучитьФайлСозданПоШаблону(Файл);
		
		РазрешеноУдаление = Не (ЗапретитьУдалятьФайлы И СозданПоШаблонуДокумента);
		
	Иначе
		
		РазрешеноУдаление =
			ОбщегоНазначенияДокументооборотКлиентСервер.ДоступноИнтерактивноеИзменениеФайлов(РеквизитыФайла.ВладелецФайла);
		
	КонецЕсли;
	
	ДанныеПроверки.Вставить("РазрешеноУдаление", РазрешеноУдаление);
	
	Возврат ДанныеПроверки;
	
КонецФункции

// Удаляет файл.
// 
// Параметры:
//  Файл - СправочникСсылка.Файлы.
// 
// Возвращаемое значение:
//  Структура - Результат удаления файлов:
//   * КоличествоЗанятыхФайлов - Число.
//
Функция УдалитьФайл(Знач Файл) Экспорт
	
	Редактирует = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "Редактирует");
	Если ЗначениеЗаполнено(Редактирует)
		И Редактирует = Пользователи.ТекущийПользователь() Тогда
		РаботаСФайламиВызовСервера.ОсвободитьФайлПоСсылке(Файл);
	КонецЕсли;
	
	ЗаблокироватьДанныеДляРедактирования(Файл);
	
	ОбъектФайл = Файл.ПолучитьОбъект();
	ОбъектФайл.УстановитьПометкуУдаления(Истина);
	
	РазблокироватьДанныеДляРедактирования(Файл);
	
	РезультатУдаления = Новый Структура;
	КоличествоЗанятыхФайлов = РаботаСФайламиВызовСервера.ПолучитьКоличествоЗанятыхФайлов(,,Истина);
	РезультатУдаления.Вставить("КоличествоЗанятыхФайлов", КоличествоЗанятыхФайлов);
	
	Возврат РезультатУдаления;
	
КонецФункции

// Проверка добавления файлов.
// 
// Параметры:
//  ВладелецФайла - ОпределяемыйТип.ВладелецФайлов.
//  РольФайла - СправочникСсылка.РолиФайлов.
// 
// Возвращаемое значение:
//  Структура - Проверка перетаскивания файлов:
//   * ДоступноИзменение - Булево.
//   * РегистрационныйНомер - Строка.
//   * СостояниеОбработки - Неопределено, ПеречислениеСсылка.СостоянияОбработкиОбъектов - Состояние обработки.
//   * РолиФайлов - Массив.
//   * ИспользоватьРолиФайлов - Произвольный.
//   * ВВидеЭтаРольТолькоОдинФайл - Булево.
//   * НетФайловВРоли - Булево.
//   * ДоступноМенятьРолиФайловДрагДропом - Булево.
//   * СостояниеТекст - Строка.
//   * ДоступноСоздатьФайлОригинал - Булево.
//   * ДоступноСоздатьФайлОбычный - Булево.
//   * ВестиУчетСканКопийОригиналовДокументов - Булево.
//   * ШаблонаДокумента - СправочникСсылка.ШаблоныДокументов.
//   * ДоступноТолькоДобавлениеОригинала - Булево.
//
Функция ПроверкаДобавленияФайлов(Знач ВладелецФайла, Знач РольФайла) Экспорт
	
	ДанныеПроверки = Новый Структура;
	
	Если ТипЗнч(ВладелецФайла) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		
		// Вести учет скан копий оригиналов документов.
		ВестиУчетСканКопийОригиналовДокументов = 
			ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов");
		ДанныеПроверки.Вставить(
			"ВестиУчетСканКопийОригиналовДокументов",
			ВестиУчетСканКопийОригиналовДокументов);
		
		// Доступно менять роли файлов драг дропом.
		ОграничиватьДоступностьПолейПоСостоянию =
			ПолучитьФункциональнуюОпцию("ОграничиватьДоступностьПолейПоСостоянию")
			И Не Пользователи.ЭтоПолноправныйПользователь();
		ДокументОбъект = ВладелецФайла.ПолучитьОбъект();
		ДоступныеПоля = Новый Массив;
		НедоступныеПоля = Новый Массив;
		Делопроизводство.ПолучитьДоступныеИНедоступныеПоСостояниюПоля(
			ДокументОбъект,
			ДоступныеПоля,
			НедоступныеПоля);
		ДоступноМенятьРолиФайловДрагДропом =
			НедоступныеПоля.Найти("РедактированиеФайлов") = Неопределено
			Или Не ОграничиватьДоступностьПолейПоСостоянию;
		ДанныеПроверки.Вставить(
			"ДоступноМенятьРолиФайловДрагДропом",
			ДоступноМенятьРолиФайловДрагДропом);
		
		// Состояние текст.
		СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(ВладелецФайла);
		ДанныеПроверки.Вставить("СостояниеТекст", СостояниеТекст);
		
		// Доступно создать файл оригинал.
		ДоступноСоздатьФайлОригинал =
			ДоступныеПоля.Найти("ДобавлениеОригиналов") <> Неопределено
			Или Не ОграничиватьДоступностьПолейПоСостоянию;
		ДанныеПроверки.Вставить("ДоступноСоздатьФайлОригинал", ДоступноСоздатьФайлОригинал);
		
		// Доступно создать файл обычный.
		ДоступноСоздатьФайлОбычный =
			ДоступныеПоля.Найти("ДобавлениеФайлов") <> Неопределено
			Или Не ОграничиватьДоступностьПолейПоСостоянию;
		ДанныеПроверки.Вставить("ДоступноСоздатьФайлОбычный", ДоступноСоздатьФайлОбычный);
		
		// Регистрационный номер.
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ВладелецФайла,
			"ВидДокумента, РегистрационныйНомер, Шаблон");
		ДанныеПроверки.Вставить("РегистрационныйНомер", РеквизитыДокумента.РегистрационныйНомер);
		
		// Состояние обработки.
		СостояниеОбработки = ДействияСервер.ТекущееСостояниеОбработки(ВладелецФайла);
		ДанныеПроверки.Вставить("СостояниеОбработки", СостояниеОбработки);
		
		// Роли файлов.
		ВидДокументаКэш = Делопроизводство.КэшВидаДокумента(РеквизитыДокумента.ВидДокумента);
		ДанныеПроверки.Вставить("РолиФайлов", ВидДокументаКэш.РолиФайлов);
		
		// Использовать роли файлов.
		ИспользоватьРолиФайлов = ПолучитьФункциональнуюОпцию("ИспользоватьРолиФайлов");
		ДанныеПроверки.Вставить("ИспользоватьРолиФайлов", ИспользоватьРолиФайлов);
		
		// В виде эта роль только один файл.
		ВВидеЭтаРольТолькоОдинФайл = Ложь;
		
		Для Каждого ОписаниеРоли Из ВидДокументаКэш.РолиФайлов Цикл
			
			Если ОписаниеРоли.Роль = РольФайла И ОписаниеРоли.ТолькоОдинФайл Тогда
				
				ВВидеЭтаРольТолькоОдинФайл = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДанныеПроверки.Вставить("ВВидеЭтаРольТолькоОдинФайл", ВВидеЭтаРольТолькоОдинФайл);
		
		// Нет файлов в роли.
		ТаблицаФайлы = Делопроизводство.ПолучитьДанныеФайловДляСписка(Неопределено, ВладелецФайла);
		НетФайловВРоли = Истина;
		
		Для Каждого СтрокаФайла Из ТаблицаФайлы Цикл
			
			Если СтрокаФайла.РольФайла = РольФайла Тогда
				
				НетФайловВРоли = Ложь;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДанныеПроверки.Вставить("НетФайловВРоли", НетФайловВРоли);
		
		// Доступно изменение.
		ПраваПользователяПоОбъекту =
			ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(ВладелецФайла);
		ДанныеПроверки.Вставить("ДоступноИзменение", ПраваПользователяПоОбъекту.Изменение);
		
		// Шаблона документа.
		ДанныеПроверки.Вставить("ШаблонаДокумента", РеквизитыДокумента.Шаблон);
		
		// Доступно только добавление оригинала.
		ДоступноТолькоДобавлениеОригинала =
			ДоступныеПоля.Найти("ДобавлениеОригиналов") <> Неопределено
			И ДоступныеПоля.Найти("ДобавлениеФайлов") = Неопределено;
		
		ДанныеПроверки.Вставить("ДоступноТолькоДобавлениеОригинала", ДоступноТолькоДобавлениеОригинала);
		
	ИначеЕсли ТипЗнч(ВладелецФайла) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
		
		РеквизитыПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ВладелецФайла,
			"ДатаОтправки");
		ПисьмоОтправлено = ЗначениеЗаполнено(РеквизитыПисьма.ДатаОтправки);
		
		// Вести учет скан копий оригиналов документов.
		ДанныеПроверки.Вставить("ВестиУчетСканКопийОригиналовДокументов", Ложь);
		
		// Доступно менять роли файлов драг дропом.
		ДанныеПроверки.Вставить("ДоступноМенятьРолиФайловДрагДропом", Истина);
		
		// Состояние текст.
		ДанныеПроверки.Вставить("СостояниеТекст", "");
		
		// Доступно создать файл оригинал.
		ДанныеПроверки.Вставить("ДоступноСоздатьФайлОригинал", Истина);
		
		// Доступно создать файл обычный.
		ДанныеПроверки.Вставить("ДоступноСоздатьФайлОбычный", Истина);
		
		// Регистрационный номер.
		ДанныеПроверки.Вставить("РегистрационныйНомер", "");
		
		// Состояние обработки.
		ДанныеПроверки.Вставить(
			"СостояниеОбработки",
			Перечисления.СостоянияОбработкиОбъектов.ПустаяСсылка());
		
		// Роли файлов.
		ДанныеПроверки.Вставить("РолиФайлов", Новый Массив);
		
		// Использовать роли файлов.
		ДанныеПроверки.Вставить("ИспользоватьРолиФайлов", Ложь);
		
		// В виде эта роль только один файл.
		ДанныеПроверки.Вставить("ВВидеЭтаРольТолькоОдинФайл", Ложь);
		
		// Нет файлов в роли.
		ДанныеПроверки.Вставить("НетФайловВРоли", Истина);
		
		// Доступно изменение.
		ПраваПользователяПоОбъекту =
			ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(ВладелецФайла);
		ДанныеПроверки.Вставить(
			"ДоступноИзменение",
			ПраваПользователяПоОбъекту.Изменение И Не ПисьмоОтправлено);
		
		// Шаблона документа.
		ДанныеПроверки.Вставить("ШаблонаДокумента", Справочники.ШаблоныДокументов.ПустаяСсылка());
		
		// Доступно только добавление оригинала.
		ДанныеПроверки.Вставить("ДоступноТолькоДобавлениеОригинала", Ложь);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный владелец файла %1 (%2).'"),
			ВладелецФайла,
			ТипЗнч(ВладелецФайла));
		
	КонецЕсли;
	
	Возврат ДанныеПроверки;
	
КонецФункции

// Это файл расширения скан-копии.
// 
// Параметры:
//  Файл - СправочникСсылка.Файлы.
// 
// Возвращаемое значение:
//  Булево - Это файл расширения скан-копии.
//  
Функция ЭтоФайлРасширенияСканКопии(Знач Файл) Экспорт
	
	Расширение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ТекущаяВерсияРасширение");
	ЭтоРасширениеСканКопии = ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(Расширение);
	
	Возврат ЭтоРасширениеСканКопии;
	
КонецФункции

// Возвращает Истина, если текущая конфигурация является конфигурацией Документооборот Холдинга.
//
// Возвращаемое значение:
//	Булево - Истина - Если текущая конфигурация является конфигурацией Документооборот Холдинга.
//
Функция ЭтоДокументооборотХолдинга() Экспорт
	
	Возврат ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга();
	
КонецФункции

// Возвращает строку в нужном склонении (склонениях) в зависимости от числа.
//
// Параметры:
//  См. метод платформы ПолучитьСклоненияСтрокиПоЧислу()
//
// Возвращаемое значение:
//  Массив из Строка, Строка - преобразованные строки.
// 
Функция СклоненияСтрокиПоЧислу(СклоняемаяСтрока, Число, СклоняемыеЕдиницыИзмерения,
			ОписаниеСтроки, ФорматнаяСтрока, ФорматнаяСтрокаЧисла) Экспорт
	
	Склонения = ПолучитьСклоненияСтрокиПоЧислу(СклоняемаяСтрока, Число, СклоняемыеЕдиницыИзмерения,
		ОписаниеСтроки, ФорматнаяСтрока, ФорматнаяСтрокаЧисла);
	
	Если Склонения.Количество() = 1 Тогда
		Возврат Склонения[0];
	Иначе
		Возврат Склонения
	КонецЕсли;
	
КонецФункции

// Проверяет, принадлежит ли объект этому узлу.
// 
// Параметры:
//  Объект - СправочникОбъект, ДокументОбъект, БизнесПроцессОбъект, ЗадачаОбъект, СправочникСсылка,
//  	ДокументСсылка, БизнесПроцессСсылка, ЗадачаСсылка - Объект, который необходимо проверить.
// 
// Возвращаемое значение:
//  Булево - Объект принадлежит этому узлу.
Функция ОбъектЭтогоУзла(Знач Объект) Экспорт
	
	// Для вызова с клиента
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Объект)) Тогда
		Объект = Объект.ПолучитьОбъект();
	КонецЕсли;
	
	Возврат ОбщегоНазначенияДокументооборот.ОбъектЭтогоУзла(Объект);

КонецФункции

// Сортирует массив имен файлов. Например  img1  img2 img10 img11 - вернет в порядке нарастания чисел (1 2 10 11), а не по алфавиту
// 
// Параметры:
//  МассивСтруктур - Массив из Структура ("ПутьФайла, ИмяБезРасширения")
//  МассивПутей  - Массив из Строка - выходной параметр
Процедура СортироватьМассивПоЧислам(МассивСтруктур, МассивПутей) Экспорт
	
	ПараметрыДаты = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
	
	ТаблицаФайлов = Новый ТаблицаЗначений;
	ТаблицаФайлов.Колонки.Добавить("ПутьФайла");
	ТаблицаФайлов.Колонки.Добавить("Номер", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтруктураФайла Из МассивСтруктур Цикл
		
		НоваяСтрока = ТаблицаФайлов.Добавить();
		НоваяСтрока.ПутьФайла = СтруктураФайла.ПутьФайла;
		
		ИмяБезРасширения = СтруктураФайла.ИмяБезРасширения;
		
		Номер = 0;
		СтрокаНомера = "";
		
		ТекПоз = СтрДлина(ИмяБезРасширения);
		Пока ТекПоз > 1 Цикл
			Символ = Сред(ИмяБезРасширения, ТекПоз, 1);
			Если Не ЭтоЧисло(Символ) Тогда
				Прервать;
			КонецЕсли;	
			СтрокаНомера = Символ + СтрокаНомера;
			ТекПоз = ТекПоз - 1;
		КонецЦикла;	
		
		Номер = ОбщегоНазначенияДокументооборотКлиентСервер.СтрокаВЧисло(СтрокаНомера);
		
		НоваяСтрока.Номер = Номер;
		
	КонецЦикла;		
	
	ТаблицаФайлов.Сортировать("Номер Возр");  
	
	МассивПутей.Очистить();
	
	Для Каждого Стр Из ТаблицаФайлов Цикл
		МассивПутей.Добавить(Стр.ПутьФайла);
	КонецЦикла;	
	
КонецПроцедуры	

// Определяет, является ли переданная строка числом
//
// Параметры:
//   СтрокаСимволов - Строка - строка символов
//
// Возвращаемое значение:
//   Булево - возвращает Истина, если строка является числом
//
Функция ЭтоЧисло(СтрокаСимволов) Экспорт
	
	СтрокаСимволов = СокрЛП(СтрокаСимволов);
	
	Если Не ЗначениеЗаполнено(СтрокаСимволов) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДлинаСтроки = СтрДлина(СтрокаСимволов);
	
	Для ТекущийСимвол = 1 По ДлинаСтроки Цикл
		
		КодСимвола = КодСимвола(СтрокаСимволов, ТекущийСимвол);
		
		Если КодСимвола < 48 Или КодСимвола > 57 Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции


// Заполняет список рабочих дней в соответствии с графиком основного сотрудника. Заполняется год
// соответствующий дате заполнения и смежные с ним года. После заполнения год включается в список
// заполненных. Если дата заполнения присутствует в списке, то заполнение рабочих не производится.
// 
// Параметры:
//  РабочиеДни - СписокЗначений из ЭлементСпискаЗначений
//  ЗаполненныеГода - СписокЗначений из ЭлементСпискаЗначений
//  ДатаЗаполнения - Дата
// 
// Возвращаемое значение:
//  Структура - Заполнить рабочие дни:
//   * РабочиеДни - СписокЗначений из ЭлементСпискаЗначений
//   * ЗаполненныеГода - СписокЗначений из ЭлементСпискаЗначений 
//   * ГрафикРаботы - СправочникСсылка.ГрафикиРаботы
// 
Функция ЗаполнитьРабочиеДни(Знач РабочиеДни, Знач ЗаполненныеГода, Знач ДатаЗаполнения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеЗаполненияРабочихДней = Новый Структура;
	ДанныеЗаполненияРабочихДней.Вставить("РабочиеДни", РабочиеДни);
	ДанныеЗаполненияРабочихДней.Вставить("ЗаполненныеГода", ЗаполненныеГода);
	ДанныеЗаполненияРабочихДней.Вставить("ГрафикРаботы", Справочники.ГрафикиРаботы.ПустаяСсылка());
	
	// Определение графика работы сотрудника. Если график не задан то рабочие дни не заполняем.
	ДанныеЗаполненияРабочихДней.ГрафикРаботы = ГрафикиРаботы.ГрафикРаботыСотрудника(Сотрудники.ОсновнойСотрудник());
	Если Не ЗначениеЗаполнено(ДанныеЗаполненияРабочихДней.ГрафикРаботы) Тогда
		Возврат ДанныеЗаполненияРабочихДней;
	КонецЕсли;
	
	// Если рабочие дни по году уже заполнены, то не требуется заполнять рабочие дни.
	ГодЗаполнения = Год(ДатаЗаполнения);
	Если ЗаполненныеГода.НайтиПоЗначению(ГодЗаполнения) <> Неопределено Тогда
		Возврат ДанныеЗаполненияРабочихДней;
	КонецЕсли;
	
	// Отбор лет, для которых требуется заполнить рабочие дни - год заполнения и смежные с ним.
	МассивЛетЗаполнения = Новый Массив;
	Если ЗаполненныеГода.НайтиПоЗначению(ГодЗаполнения) = Неопределено Тогда
		МассивЛетЗаполнения.Добавить(ГодЗаполнения);
		ЗаполненныеГода.Добавить(ГодЗаполнения);
	КонецЕсли;
	
	ПредшествующийГод = ГодЗаполнения - 1;
	Если ЗаполненныеГода.НайтиПоЗначению(ПредшествующийГод) = Неопределено Тогда
		МассивЛетЗаполнения.Добавить(ПредшествующийГод);
		ЗаполненныеГода.Добавить(ПредшествующийГод);
	КонецЕсли;
	
	СледующийГод = ГодЗаполнения + 1;
	Если ЗаполненныеГода.НайтиПоЗначению(СледующийГод) = Неопределено Тогда
		МассивЛетЗаполнения.Добавить(СледующийГод);
		ЗаполненныеГода.Добавить(СледующийГод);
	КонецЕсли;
	
	// Заполнение рабочие дней по данным календаря
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КалендарныеГрафики.ДатаГрафика,
		|	КалендарныеГрафики.ДеньВключенВГрафик
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|ГДЕ
		|	КалендарныеГрафики.Календарь = &Календарь
		|	И КалендарныеГрафики.Год В(&МассивЛетЗаполнения)";
	
	Календарь = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДанныеЗаполненияРабочихДней.ГрафикРаботы,
		"Календарь");
	Запрос.УстановитьПараметр("Календарь", Календарь);
	Запрос.УстановитьПараметр("МассивЛетЗаполнения", МассивЛетЗаполнения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РабочиеДни.Добавить(Выборка.ДатаГрафика, , Выборка.ДеньВключенВГрафик);
	КонецЦикла;
	
	Возврат ДанныеЗаполненияРабочихДней;
	
КонецФункции

#КонецОбласти