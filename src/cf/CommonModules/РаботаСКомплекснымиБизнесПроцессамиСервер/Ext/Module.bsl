
////////////////////////////////////////////////////////////////////////////////
// РаботаСКомплекснымиБизнесПроцессамиКлиентСервер: содержит процедуры работы с комплексными
//													процессами на сервере.
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

// Проверяет, является ли задача ведущей.
//
// Параметры:
//  Задача  - ЗадачаСсылка.ЗадачаИсполнителя - проверяемая задача
//
// Возвращаемое значение:
//   Булево   - принимает значение Истина, если задача ведущая.
//
Функция ЭтоВедущаяЗадача(Задача) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДочерниеБизнесПроцессы.ДочернийПроцесс
	|ИЗ
	|	РегистрСведений.ДочерниеБизнесПроцессы КАК ДочерниеБизнесПроцессы
	|ГДЕ
	|	ДочерниеБизнесПроцессы.СвязующаяЗадача = &СвязующаяЗадача";
	Запрос.УстановитьПараметр("СвязующаяЗадача", Задача);

	Запрос.УстановитьПараметр("Задача", Задача);
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции

// Возвращает корневого владельца служебного шаблона находящегося в иерархии
// комплексного процесса или шаблона комплексного процесса.
//
// Параметры:
//  Действие - СправочникОбъект.<ИмяШаблонаПроцесса>,
//             СправочникСсылка.<ИмяШаблонаПроцесса>,
//             ДанныеФормыСтруктура - служебный шаблон.
// 
// Возвращаемое значение:
//  СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов,
//  БизнесПроцессСсылка.КомплексныйПроцесс,
//  Неопределено - корневой владелец служебного шаблона.
//                 Принимает значение Неопределено, если у шаблона нет владельца.
//
Функция ВладелецВерхнегоУровня(Действие) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Действие)) Тогда
		РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Действие, "ВладелецШаблона, КомплексныйПроцесс");
	Иначе
		РеквизитыДействия = Действие;
	КонецЕсли;

	ВладелецШаблона = РеквизитыДействия.ВладелецШаблона;
	КомплексныйПроцесс = РеквизитыДействия.КомплексныйПроцесс;

	ТипКомплексныйПроцесс = Тип("БизнесПроцессСсылка.КомплексныйПроцесс");

	ПредыдущийВладелец = Неопределено;

	Пока ЗначениеЗаполнено(ВладелецШаблона) Цикл

		Если ТипЗнч(ВладелецШаблона) = ТипКомплексныйПроцесс Тогда
			Возврат ВладелецШаблона;
		КонецЕсли;

		Если ЗначениеЗаполнено(КомплексныйПроцесс) И ТипЗнч(КомплексныйПроцесс)
			= ТипКомплексныйПроцесс Тогда

			Возврат КомплексныйПроцесс;
		КонецЕсли;

		РеквизитыВладельца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ВладелецШаблона, "ВладелецШаблона, КомплексныйПроцесс");
		ПредыдущийВладелец = ВладелецШаблона;

		ВладелецШаблона = РеквизитыВладельца.ВладелецШаблона;
		КомплексныйПроцесс = РеквизитыВладельца.КомплексныйПроцесс;

	КонецЦикла;

	Возврат ПредыдущийВладелец;

КонецФункции

// Определяет, является ли шаблон действие комплексного процесса.
//
// Параметры:
//  Действие - СправочникОбъект.<ИмяШаблонаПроцесса>,
//             СправочникСсылка.<ИмяШаблонаПроцесса>,
//             ДанныеФормыСтруктура - служебный шаблон.
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоДействиеКомплексногоПроцесса(Действие) Экспорт

	ВладелецВерхнегоУровня = ВладелецВерхнегоУровня(Действие);

	КомплексныйПроцессДействия = Неопределено;
	Если ТипЗнч(ВладелецВерхнегоУровня) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		КомплексныйПроцессДействия = ВладелецВерхнегоУровня;
	КонецЕсли;

	Возврат ЗначениеЗаполнено(КомплексныйПроцессДействия);

КонецФункции

// Возвращает признак актуальности процесса для маршрутизации.
// 
// Параметры:
// 	КомплексныйПроцесс - БизнесПроцессОбъект.КомплексныйПроцесс
// 	
// Возвращаемое значение:
// 	Булево
// 	
Функция ПроцессАктуаленДляМаршрутизации(КомплексныйПроцесс) Экспорт

	Если КомплексныйПроцесс.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина

КонецФункции

// Общие действия при создании формы шаблона процесса (любого). Выполняет инициализацию 
// и настройку внешнего вида формы в зависимости от того, настраивается ли действие комплексного процесса
// или работа ведется с общими шаблонами бизнес-процессов.
// Параметры:
//	Форма - форма элемента шаблона бизнес-процесса
//	ЗаголовокФормы - строка, заголовок формы
Процедура КарточкаШаблонаБизнесПроцессаПриСозданииНаСервере(Знач Форма, ЗаголовокФормы) Экспорт

	Если ЗначениеЗаполнено(Форма.Параметры.ВладелецШаблона) Тогда
		Форма.Объект.ВладелецШаблона = Форма.Параметры.ВладелецШаблона;
		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов")
			Или ТипЗнч(Форма.Объект.Ссылка) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
			Форма.Владелец = Форма.Параметры.ВладелецШаблона;
		КонецЕсли;
	КонецЕсли;

	ВладелецШаблонаВерхнегоУровня = РаботаСКомплекснымиБизнесПроцессамиСервер.ВладелецВерхнегоУровня(
		Форма.Объект);

	ВКомплексномПроцессе = Ложь;
	ВШаблонеКомплексногоПроцесса = Ложь;
	Форма.Объект.ШаблонВКомплексномПроцессе = Ложь;
	Если ТипЗнч(ВладелецШаблонаВерхнегоУровня) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		ВКомплексномПроцессе = Истина;
		Форма.Объект.ШаблонВКомплексномПроцессе = Истина;
	КонецЕсли;
	Если ТипЗнч(ВладелецШаблонаВерхнегоУровня) = Тип(
		"СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов") Тогда
		ВШаблонеКомплексногоПроцесса = Истина;
		Форма.Объект.ШаблонВКомплексномПроцессе = Истина;
	КонецЕсли;

	Если Форма.Объект.Ссылка.Пустая() Тогда
		Если ТипЗнч(Форма.Объект.Ответственный) = Тип("СправочникСсылка.Пользователи") Тогда
			Форма.Объект.Ответственный = Пользователи.ТекущийПользователь();
		Иначе
			Форма.Объект.Ответственный = Сотрудники.ОсновнойСотрудник();
		КонецЕсли;
	КонецЕсли;

	Форма.ИспользоватьАвтоподстановки = Истина;
	
	// Инициализация карточки, если шаблон используется в комплексном процессе
	Если ВКомплексномПроцессе И Форма.Объект.Ссылка.Пустая() Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Автор") Тогда
			Если ТипЗнч(Форма.Объект.Автор) = Тип("СправочникСсылка.Пользователи") Тогда
				Форма.Объект.Автор = Пользователи.ТекущийПользователь();
			Иначе
				Форма.Объект.Автор = Сотрудники.ОсновнойСотрудник();
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "ОбрабатывающийРезультат") Тогда
			Форма.Объект.ОбрабатывающийРезультат = Сотрудники.ОсновнойСотрудник();
		КонецЕсли;
		
	КонецЕсли;

	Если ВКомплексномПроцессе Или ВШаблонеКомплексногоПроцесса Тогда

		Если ВШаблонеКомплексногоПроцесса Тогда

			Форма.Объект.Ответственный = Форма.Объект.ВладелецШаблона.Ответственный;
			Если Форма.Элементы.Найти("Исполнитель") <> Неопределено Тогда
				Форма.Элементы.Исполнитель.АвтоОтметкаНезаполненного = Ложь;
			КонецЕсли;
			Если Форма.Элементы.Найти("Проверяющий") <> Неопределено Тогда
				Форма.Элементы.Проверяющий.АвтоОтметкаНезаполненного = Ложь;
			КонецЕсли;
			Если Форма.Элементы.Найти("Контролер") <> Неопределено Тогда
				Форма.Элементы.Контролер.АвтоОтметкаНезаполненного = Ложь;
			КонецЕсли;
			Если Форма.Элементы.Найти("Важность") <> Неопределено Тогда
				Форма.Элементы.Важность.АвтоОтметкаНезаполненного = Ложь;
			КонецЕсли;

			Форма.ЭтоДействиеШаблонаКомплексногоПроцесса = Истина;

		Иначе

			Если ТипЗнч(Форма.Объект.ВладелецШаблона) = Тип(
				"БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
				Форма.Объект.Ответственный = Форма.Объект.ВладелецШаблона.Автор;
			Иначе
				Форма.Объект.Ответственный = Форма.Объект.ВладелецШаблона.Ответственный;
			КонецЕсли;
			Если Форма.Элементы.Найти("Важность") <> Неопределено Тогда
				Форма.Элементы.Важность.АвтоОтметкаНезаполненного = Ложь;
			КонецЕсли;
			Если Форма.Элементы.Найти("ДобавлятьНаименованиеПредмета") <> Неопределено Тогда
				Форма.Элементы.ДобавлятьНаименованиеПредмета.Видимость = Ложь;

				Если Форма.Объект.Ссылка.Пустая() Тогда
					Форма.Объект.ДобавлятьНаименованиеПредмета = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если Форма.Элементы.Найти("ИсполнителиИспользоватьУсловия") <> Неопределено Тогда
				Форма.Элементы.ИсполнителиИспользоватьУсловия.Видимость = Ложь;
			КонецЕсли;
			
			// Включение кнопок выбора для механизма "шаблоны текста" 
			Форма.Элементы.НаименованиеБизнесПроцесса.КнопкаВыбора = Истина;

			Если Форма.Элементы.Найти("Описание") <> Неопределено Тогда
				Форма.Элементы.Описание.КнопкаВыбора = Истина;
			КонецЕсли;

		КонецЕсли;
		Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		// Настройка использования автоподстановок
		Форма.ИспользоватьАвтоподстановки = Ложь;
		Если ВШаблонеКомплексногоПроцесса И Не ЗначениеЗаполнено(
			Форма.Объект.ВладелецШаблона.ВладелецШаблона) Тогда
			Форма.ИспользоватьАвтоподстановки = Истина;
		КонецЕсли;
		
		// Установка заголовка формы. Если шаблон используется в
		//	комплексном процессе, то заголовок устанавливается вручную.
		Форма.АвтоЗаголовок = Ложь;
		Форма.Заголовок = ЗаголовокФормы;

		Если ВКомплексномПроцессе И ЗначениеЗаполнено(ВладелецШаблонаВерхнегоУровня) Тогда

			ОбъектВладелецШаблонаВерхнегоУровня = ВладелецШаблонаВерхнегоУровня.ПолучитьОбъект();

			Если ОбъектВладелецШаблонаВерхнегоУровня.Завершен Или (Форма.Параметры.Свойство(
				"ТолькоПросмотр") И Форма.Параметры.ТолькоПросмотр = Истина)
				Или Не ШаблоныБизнесПроцессов.ДоступностьПоШаблону(
				ОбъектВладелецШаблонаВерхнегоУровня) Тогда

				Форма.ТолькоПросмотр = Истина;
			КонецЕсли;

			Если Форма.Параметры.Свойство("НаименованиеДействия") И ЗначениеЗаполнено(
				Форма.Параметры.НаименованиеДействия) Тогда

				Форма.Объект.НаименованиеБизнесПроцесса = Форма.Параметры.НаименованиеДействия;
			Иначе
				УстановитьПривилегированныйРежим(Истина);
				СтрокаПредметов = МультипредметностьКлиентСервер.ПредметыСтрокой(
					ОбъектВладелецШаблонаВерхнегоУровня.Предметы, Истина, Ложь);
				УстановитьПривилегированныйРежим(Ложь);
				Если ЗначениеЗаполнено(СтрокаПредметов) И Форма.Объект.Ссылка.Пустая() Тогда
					Форма.Объект.НаименованиеБизнесПроцесса = СокрЛП(
						Форма.Объект.НаименованиеБизнесПроцесса) + " " + СтрокаПредметов;
				КонецЕсли;
			КонецЕсли;

			Если Форма.Параметры.Свойство("ОписаниеДействия") И ЗначениеЗаполнено(
				Форма.Параметры.ОписаниеДействия) Тогда

				Форма.Объект.Описание = Форма.Параметры.ОписаниеДействия;
			КонецЕсли;

			Форма.КомплексныйПроцессСтартован = ОбъектВладелецШаблонаВерхнегоУровня.Стартован;
			Форма.КомплексныйПроцессЗавершен = ОбъектВладелецШаблонаВерхнегоУровня.Завершен;
			Форма.КомплексныйПроцессПомеченНаУдаление = ОбъектВладелецШаблонаВерхнегоУровня.ПометкаУдаления;
			Форма.СостояниеКомплексногоПроцесса = ОбъектВладелецШаблонаВерхнегоУровня.Состояние;

			Форма.ЭтоДействиеКомплексногоПроцесса = Истина;
			Форма.ЭтоДействиеКомплексногоПроцессаПоШаблону = ЗначениеЗаполнено(
				ОбъектВладелецШаблонаВерхнегоУровня.Шаблон);

		КонецЕсли;
	КонецЕсли;

	// Установка видимости разделов формы, если шаблон используется в комплексном процессе
	Форма.Элементы.СтраницаОШаблоне.Видимость = Не Форма.Объект.ШаблонВКомплексномПроцессе;

	Если Форма.Параметры.Свойство("ПредметыПроцесса") Тогда
		Форма.Предметы.ЗагрузитьЗначения(Форма.Параметры.ПредметыПроцесса);
		Если ДоступностьПоШаблону(Форма) = Истина Тогда
			Форма.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если Форма.ТолькоПросмотр Тогда
		Если Форма.Элементы.Найти("Предметы") <> Неопределено Тогда
			Форма.Элементы.Предметы.ТолькоПросмотр = Истина;
			Если Форма.Элементы.Найти("Добавить") <> Неопределено Тогда
				Форма.Элементы.Добавить.Доступность = Ложь;
				Для Каждого Элемент Из Форма.Элементы.Добавить.ПодчиненныеЭлементы Цикл
					Элемент.Доступность = Ложь;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Если Форма.Элементы.Найти("ПредметыИзменитьПредмет") <> Неопределено Тогда
			Форма.Элементы.ПредметыИзменитьПредмет.Доступность = Ложь;
		КонецЕсли;

		Если Форма.Элементы.Найти("ПредметыЗадач") <> Неопределено Тогда
			Форма.Элементы.ПредметыЗадач.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Возвращает настройки действий комплексного процесса.
//
// Параметры:
//  КомплексныйПроцесс - БизнесПроцессОбъект.КомплексныйПроцесс
//
// Возвращаемое значение:
//  Массив из шаблонов процессов (настроек действий комплексного процесса).
//
Функция НастройкиДействийКомплексногоПроцесса(КомплексныйПроцесс) Экспорт
	
	НастройкиДействияКП = Новый Массив;
	
	Если ЗначениеЗаполнено(КомплексныйПроцесс.Схема) Тогда
		
		ПараметрыСхемы = 
			Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыСхемыПоВладельцу(
				КомплексныйПроцесс.Ссылка);
		
		Если ЗначениеЗаполнено(ПараметрыСхемы) Тогда
			ДанныеПараметровСхемы = 
				Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(
					ПараметрыСхемы);
			
			НастройкиДействияКП = НастройкиДействийИВложенныхПроцессовВДанныхПараметров(
				ДанныеПараметровСхемы);
		КонецЕсли;
		
	Иначе
		НастройкиДействияКП = Новый Массив;
		Для Каждого СтрокаЭтапа Из КомплексныйПроцесс.Этапы Цикл
			Если ЗначениеЗаполнено(СтрокаЭтапа.ШаблонБизнесПроцесса) Тогда
				НастройкиДействияКП.Добавить(СтрокаЭтапа.ШаблонБизнесПроцесса);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат НастройкиДействияКП;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область СхемаПроцесса

#Область НастройкиЭлементов

#Область УсловияСхемы

// Возвращает пустое условие схемы комплексного процесса.
// 
// Возвращаемое значение:
// 	НастройкиКомпоновкиДанных
//
Функция ПустоеУсловиеСхемыКомплексногоПроцесса() Экспорт
	
	СхемаКомпоновкиДанных = ПолучитьОбщийМакет("СтруктураУсловияСхемыКомплексногоПроцесса");
	Возврат СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		
КонецФункции

// Нормализует настройки условий и вложенных процессов схемы процесса.
// Настройки схемы перезаписываются.
// 
// Параметры:
//  Процесс - БизнесПроцессОбъект.КомплексныйПроцесс,
//            СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов
//
Процедура НормализоватьНастройкиУсловийИВложенныхОбработокСхемы(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИменаПредметовПроцесса = МультипредметностьКлиентСервер.ИменаПредметовПроцесса(Процесс);
	
	ПараметрыСхемы = 
		Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыСхемыПоВладельцу(Процесс.Ссылка);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.ПараметрыСхемДляКомплексныхПроцессов");
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ПараметрыСхемы);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
	НачатьТранзакцию();
	
	Попытка
			
		Блокировка.Заблокировать();	
				
		ДанныеПараметровСхемы = 
			Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(ПараметрыСхемы);
		
		ДанныеСхемы = Справочники.СхемыПроцессов.ДанныеСхемыПроцесса(ДанныеПараметровСхемы.Схема);
		ГрафическаяСхема = СхемыПроцессовКлиентСервер.ГрафическаяСхемаПоДаннымСхемы(ДанныеСхемы);
		ТипыВсехЭлементов = СхемыПроцессовКлиентСервер.ТипыВсехЭлементовПоДаннымСхемы(ДанныеСхемы);
		
		ТипыПредшествующихЭлементов = Новый Соответствие();
		ТипыПредшествующихЭлементов[Перечисления.ТипыЭлементовСхемПроцессов.Действие] = Истина;
		ТипыПредшествующихЭлементов[Перечисления.ТипыЭлементовСхемПроцессов.ВложенныйПроцесс] = Истина;
		
		Для Каждого НастройкаЭлемента Из ДанныеПараметровСхемы.НастройкиЭлементов Цикл
			
			ИмяЭлемента = НастройкаЭлемента.Ключ;			
			ТипЭлемента = СхемыПроцессовКлиентСервер.ТипЭлементаСхемы(
				ДанныеСхемы, ИмяЭлемента);
				
			Если СхемыПроцессовКлиентСервер.ЭтоВложенныйПроцессСхемы(ТипЭлемента)
				И ТипЗнч(НастройкаЭлемента.Значение) = Тип("СправочникСсылка.ИменаПредметов") Тогда
				
				Если ИменаПредметовПроцесса.Найти(НастройкаЭлемента.Значение) = Неопределено Тогда
					ДанныеПараметровСхемы.НастройкиЭлементов[НастройкаЭлемента.Ключ] = Неопределено;
				КонецЕсли;	
				
			КонецЕсли;
				
			Если Не СхемыПроцессовКлиентСервер.ЭтоУсловиеСхемы(ТипЭлемента) Тогда
				Продолжить;
			КонецЕсли;
				
			ПредшествующиеДействия = СхемыПроцессовКлиентСервер.ИменаПредшествующихЭлементовВСхеме(
				ГрафическаяСхема,
				ТипыВсехЭлементов,
				ИмяЭлемента,
				ТипыПредшествующихЭлементов);
			
			РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.НормализоватьЭлементыОтбораНастройкиУсловия(
				НастройкаЭлемента.Значение.Отбор.Элементы,
				ПредшествующиеДействия,
				ИменаПредметовПроцесса);
						
		КонецЦикла;
		
		Справочники.ПараметрыСхемДляКомплексныхПроцессов.ЗаписатьДанныеПараметровСхемы(
			ПараметрыСхемы, ДанныеПараметровСхемы);
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Заменяет имя предмета в условии схемы.
// Настройки схемы перезаписываются.
// Рекурсивная процедура.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.КомплексныйПроцесс,
//            СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов
//  ИсходноеИмяПредмета - СправочникСсылка.ИменаПредметов - исходное имя предмета.
//  ИмяПредмета - СправочникСсылка.ИменаПредметов - новое имя предмета.
//
Процедура ЗаменитьИмяПредметаВУсловияхСхемы(Процесс, ИсходноеИмяПредмета, ИмяПредмета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыСхемы = 
		Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыСхемыПоВладельцу(Процесс.Ссылка);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.ПараметрыСхемДляКомплексныхПроцессов");
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ПараметрыСхемы);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
	НачатьТранзакцию();
	
	Попытка
			
		Блокировка.Заблокировать();	
		
		ДанныеПараметровСхемы = 
			Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(ПараметрыСхемы);
		ДанныеСхемы = Справочники.СхемыПроцессов.ДанныеСхемыПроцесса(ДанныеПараметровСхемы.Схема);
			
		Для Каждого НастройкаЭлемента Из ДанныеПараметровСхемы.НастройкиЭлементов Цикл
			
			ИмяЭлемента = НастройкаЭлемента.Ключ;			
			ТипЭлемента = СхемыПроцессовКлиентСервер.ТипЭлементаСхемы(
				ДанныеСхемы, ИмяЭлемента);
			
			Если Не СхемыПроцессовКлиентСервер.ЭтоУсловиеСхемы(ТипЭлемента) Тогда
				Продолжить;
			КонецЕсли;
				
			РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЗаменитьИмяПредметаВЭлементахОтбораНастройкиУсловия(
				НастройкаЭлемента.Значение.Отбор.Элементы,
				ИсходноеИмяПредмета, ИмяПредмета);
			
		КонецЦикла;
		
		Справочники.ПараметрыСхемДляКомплексныхПроцессов.ЗаписатьДанныеПараметровСхемы(
			ПараметрыСхемы, ДанныеПараметровСхемы);
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Возвращает результат условия схемы при комплексном процессе.
// 
// Параметры:
// 	Настройка - НастройкиКомпоновкиДанных - настройка условия.
// 	Процесс - БизнесПроцессОбъект.КомплексныйПроцесс
// 
// Возвращаемое значение:
// 	Булево
//
Функция РезультатУсловияСхемы(Настройка, Процесс) Экспорт
	
	// Поменяем значения элементов отбора настройки компоновки данных на поле для проверки.
	ПредметыПроцесса = Новый Соответствие();
	Для Каждого СтрокаПредмета Из Процесс.Предметы Цикл
		ПредметыПроцесса[СтрокаПредмета.ИмяПредмета] = СтрокаПредмета.Предмет;
	КонецЦикла;
	
	ВычислитьЗначенияЭлементовОтбора(
		Настройка.Отбор.Элементы,
		Процесс,
		ПроцессыЭлементовСхемыПоКомплексномуПроцессу(Процесс),
		ПредметыПроцесса);
	
	// Вычисляем результат условия при помощи схемы компоновки данных.
	СхемаКомпоновкиДанных = ПолучитьОбщийМакет("СтруктураУсловияСхемыКомплексногоПроцесса");
	
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	Компоновщик.Инициализировать(ИсточникНастроек);
	Компоновщик.ЗагрузитьНастройки(Настройка);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, 
		Компоновщик.ПолучитьНастройки(),,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультата);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	// Возвращаем результат.
	Возврат ТаблицаРезультата.Количество() > 0;
		
КонецФункции

#КонецОбласти

// Возвращает настройки действий и вложенных процессов, сортируя их согласно пути схемы.
// 
// Параметры:
//  ДанныеПараметров - Структура 
//  	см. Справочник.ПараметрыСхемДляКомплексныхПроцессов.СтруктураДанныхПараметровСхемы
//  
// Возвращаемые значения:
//  Массив
//   * см. ОпределяемыйТип.ШаблонДействияКомплексногоПроцесса
//
Функция НастройкиДействийИВложенныхПроцессовВДанныхПараметров(ДанныеПараметров) Экспорт
	
	ТипыДействий = Метаданные.ОпределяемыеТипы.ШаблонДействияКомплексногоПроцесса.Тип;
	
	ДействияИВложенныеПроцессы = Новый Массив;
		
	Для Каждого НастройкаЭлемента Из ДанныеПараметров.НастройкиЭлементов Цикл
			
		Если Не ЗначениеЗаполнено(НастройкаЭлемента.Значение) 
			Или Не ТипыДействий.СодержитТип(ТипЗнч(НастройкаЭлемента.Значение)) Тогда
			
			Продолжить;
		КонецЕсли;
		
		ДействияИВложенныеПроцессы.Добавить(НастройкаЭлемента.Значение);
			
	КонецЦикла;
	
	Возврат ДействияИВложенныеПроцессы; 
	
КонецФункции

// Возвращает ошибки заполнения настроек элементов схемы.
// 
// Параметры:
//  НастройкиЭлементов - Соответствие - см. РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураНастроекЭлементовСхемы()
//  ТипыЭлементов - Соответствие:
//   * Ключ - Строка - имя элемента графической схемы
//   * Значение - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
//  Схема - ГрафическаяСхема 
// 
// Возвращаемое значение:
//  Массив из Строка
//  
Функция ОшибкиЗаполненияНастроекЭлементовСхемы(НастройкиЭлементов, ТипыЭлементов, Схема) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОшибкиНастроек = Новый Массив;
	
	ШаблонТекстаОшибкиОтсутствуетНастройка =
		НСтр("ru = 'У элемента схемы ""%1"" (%2) отсутствует настройка.'");
	
	Для Каждого ИмяЭлементаИНастройка Из НастройкиЭлементов Цикл
		
		ИмяЭлемента = ИмяЭлементаИНастройка.Ключ;
		НастройкаЭлемента = ИмяЭлементаИНастройка.Значение;
		
		ТипЭлемента = ТипыЭлементов[ИмяЭлемента];
		
		ИмяЭлементаДляСообщения =
			СхемыПроцессовКлиентСервер.ОписаниеЭлементаСхемы(ИмяЭлемента, Схема);
		Если Не ЗначениеЗаполнено(ИмяЭлементаДляСообщения) Тогда
			ИмяЭлементаДляСообщения = ИмяЭлемента;
		КонецЕсли;
		
		Если СхемыПроцессовКлиентСервер.ЭтоУсловиеСхемы(ТипЭлемента) Тогда
			
			Если НастройкаЭлемента = Неопределено
				Или НастройкаЭлемента.Отбор.Элементы.Количество() = 0 Тогда
				
				ОписаниеОшибки = СтрШаблон(ШаблонТекстаОшибкиОтсутствуетНастройка,
					ИмяЭлементаДляСообщения,
					ТипЭлемента);
				ОшибкиНастроек.Добавить(ОписаниеОшибки);
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
				
		Если Не ЗначениеЗаполнено(НастройкаЭлемента) Тогда
			ОписаниеОшибки = СтрШаблон(ШаблонТекстаОшибкиОтсутствуетНастройка,
				ИмяЭлементаДляСообщения,
				ТипЭлемента);
			ОшибкиНастроек.Добавить(ОписаниеОшибки);
			
			Продолжить;
		КонецЕсли;
			
		Если СхемыПроцессовКлиентСервер.ЭтоДействиеСхемы(ТипЭлемента) Тогда
			
			Если Не ОбщегоНазначения.СсылкаСуществует(НастройкаЭлемента) Тогда
				ОписаниеОшибки = СтрШаблон(
					НСтр("ru = 'Настройка действия ""%1"" отсутствует в базе.'"),
					ИмяЭлементаДляСообщения);
				ОшибкиНастроек.Добавить(ОписаниеОшибки);
				Продолжить;
			КонецЕсли;
			
			ОбъектШаблона = НастройкаЭлемента.ПолучитьОбъект();
			МассивПолейСОшибками = ОбъектШаблона.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
			Если МассивПолейСОшибками.Количество() > 0 Тогда
				
				ОписаниеОшибки = СтрШаблон(
					НСтр("ru = 'У действия ""%1"" есть ошибки в заполнении полей:
						|%2.'"),
					ИмяЭлементаДляСообщения,
					СтрСоединить(МассивПолейСОшибками, " ,"));
				
				ОшибкиНастроек.Добавить(ОписаниеОшибки);
			
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
				
		Если СхемыПроцессовКлиентСервер.ЭтоВложенныйПроцессСхемы(ТипЭлемента) Тогда
			
			Если ТипЗнч(НастройкаЭлемента) <> Тип("СправочникСсылка.ИменаПредметов") Тогда
				
				Если Не ОбщегоНазначения.СсылкаСуществует(НастройкаЭлемента) Тогда
					ОписаниеОшибки = СтрШаблон(
						НСтр("ru = 'Настройка вложенного процесса ""%1"" отсутствует в базе.'"),
						ИмяЭлементаДляСообщения);
					ОшибкиНастроек.Добавить(ОписаниеОшибки);
					Продолжить;
				КонецЕсли;
				
				ОбъектШаблона = НастройкаЭлемента.ПолучитьОбъект();
				МассивПолейСОшибками = ОбъектШаблона.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
				Если МассивПолейСОшибками.Количество() > 0 Тогда
					ОписаниеОшибки = СтрШаблон(
						НСтр("ru = 'Есть ошибки в настройках вложенного процесса ""%1"".'"),
						ИмяЭлементаДляСообщения);
					
					ОшибкиНастроек.Добавить(ОписаниеОшибки);
				КонецЕсли;
	
			КонецЕсли;	
			
			Продолжить;
				
		КонецЕсли;
					
	КонецЦикла;
		
	Возврат ОшибкиНастроек;
	
КонецФункции

// Удаляет непривязанные настройки элементов схемы.
// 
// Параметры:
//  Процесс - БизнесПроцессОбъект.КомплексныйПроцесс,
//            СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов
//
Процедура УдалитьНепривязанныеНастройкиЭлементовСхемы(Процесс) Экспорт
	
	Если Не ЗначениеЗаполнено(Процесс.Схема) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСхемы = 
		Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыПоСхеме(Процесс.Схема);
	Если Не ЗначениеЗаполнено(ПараметрыСхемы) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПараметров = Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(
		ПараметрыСхемы);
	
	ТипыНастроек = Метаданные.ОпределяемыеТипы.ШаблонДействияКомплексногоПроцесса.Тип;
	
	НастройкиЭлементов = Новый Соответствие;
	Для Каждого НастройкаЭлемента Из ДанныеПараметров.НастройкиЭлементов Цикл
		Если Не ЗначениеЗаполнено(НастройкаЭлемента.Значение) 
			Или Не ТипыНастроек.СодержитТип(ТипЗнч(НастройкаЭлемента.Значение)) Тогда
			
			Продолжить;
		КонецЕсли;
		НастройкиЭлементов[НастройкаЭлемента.Значение] = Истина;			
	КонецЦикла;
		
	ШаблоныТекстов = Новый Массив;
	ШаблонТекстаЗапроса =
		"ВЫБРАТЬ
		|	ШаблоныПроцессов.Ссылка КАК Настройка
		|ИЗ
		|	Справочник.ШаблоныИсполнения КАК ШаблоныПроцессов
		|ГДЕ
		|	ШаблоныПроцессов.ПометкаУдаления = ЛОЖЬ
		|	И ШаблоныПроцессов.ВладелецШаблона = &Процесс";
		
	Для Каждого Тип Из ТипыНастроек.Типы() Цикл
		МетаданныеШаблона = Метаданные.НайтиПоТипу(Тип);
		ШаблоныТекстов.Добавить(
			СтрЗаменить(ШаблонТекстаЗапроса, "ШаблоныИсполнения", МетаданныеШаблона.Имя));
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ШаблоныТекстов,
		Символы.ПС + Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС);
	Запрос.УстановитьПараметр("Процесс", Процесс.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НастройкиЭлементов[Выборка.Настройка] = Истина Тогда
			Продолжить;
		КонецЕсли;
		НастройкаДляУдаления = Выборка.Настройка.ПолучитьОбъект();
		НастройкаДляУдаления.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
		
КонецПроцедуры

// Возвращает настройки действий и вложенных процессов.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма комплексного процесса или шаблона.
//  
// Возвращаемые значения:
//  Массив
//   * см. ОпределяемыйТип.ШаблонДействияКомплексногоПроцесса
//
Функция НастройкиДействийИВложенныхПроцессовВФорме(Форма) Экспорт
	
	ТипыДействий = Метаданные.ОпределяемыеТипы.ШаблонДействияКомплексногоПроцесса.Тип;
	
	Настройки = Новый Массив;
	
	Для Каждого НастройкаЭлемента Из Форма.ДанныеПараметровСхемы.НастройкиЭлементов Цикл
		
		Если Не ТипыДействий.СодержитТип(ТипЗнч(НастройкаЭлемента.Значение)) 
			Или Не ЗначениеЗаполнено(НастройкаЭлемента.Значение) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Настройки.Добавить(НастройкаЭлемента.Значение);
		
	КонецЦикла;
	
	Возврат Настройки; 
	
КонецФункции

// Завершает настройку действия / вложенного процесса схемы.
// Вспомогательная процедура. Предназначена для вызова из карточки комплексного процесса/шаблона.
//
// Возвращает ссылку на шаблон процесса (действия/вложенного процесса) и его форму, если владельцем является шаблон
// комплексного процесса, либо шаблон находится в комплексном процессе и требует дополнительной настройки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса/шаблона.
//  ИмяЭлемента - Строка - Имя элемента действия / вложенного процесса в схеме.
//  Шаблон - ОпределяемыйТип.ШаблонДействияКомплексногоПроцесса - ссылка на настройку действие/вложенного процесса.
//  Предметы - Массив - массив структур с полями:
//    ИмяПредмета, Предмет, РольПредмета, ИмяПредметаОснование, ШаблонОснование, ИсходноеИмяПредмета (может отсутствовать).
//
// Возвращаемое значение:
//  Структура:
//   * Шаблон - ОпределяемыйТип.ШаблонДействияКомплексногоПроцессая - ссылка на действие комплексного процесса.
//   * ИмяФормыДляОткрытия - Строка - путь к форме шаблона процесса.
//
Функция ЗавершитьНастройкуДействияВложенногоПроцессаСхемы(
	Форма, ИмяЭлемента, ШаблонПроцесса, Предметы) Экспорт

	ПараметрыНовогоШаблона = Новый Структура;
	ПараметрыНовогоШаблона.Вставить("Шаблон");
	ПараметрыНовогоШаблона.Вставить("ИмяФормыДляОткрытия");

	УстановитьПривилегированныйРежим(Истина);

	ВладелецШаблонаПроцесса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ШаблонПроцесса,
		"ВладелецШаблона");
	
	ИдентификаторНастройки = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.
		ИдентификаторНастройкиЭлементаСхемыВФорме(Форма, ИмяЭлемента);
	
	Если ЗначениеЗаполнено(ВладелецШаблонаПроцесса) Тогда
		// Обновление параметров действия после интерактивной настройки шаблона процесса.

		Если Форма.Объект.Важность = Перечисления.ВариантыВажностиОбъектов.Высокая
			Или Форма.Объект.Важность = Перечисления.ВариантыВажностиОбъектов.Низкая Тогда

			ОбъектШаблонаПроцесса = ШаблонПроцесса.ПолучитьОбъект();
			ОбъектШаблонаПроцесса.Важность = Форма.Объект.Важность;

			ШаблоныБизнесПроцессов.ЗаписатьШаблон(
				ОбъектШаблонаПроцесса, "ЗаписьСЗаполнениемСлужебныхРеквизитовКомплексныхПроцессов");

		КонецЕсли;
		
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.УстановитьНастройкуЭлементуСхемыВФорме(
			Форма, ИмяЭлемента, ШаблонПроцесса);			
		
		ОбновитьПредметыПоНастроенномуДействию(
			Форма, ШаблонПроцесса, Предметы, ИдентификаторНастройки);

	Иначе // Обновление параметров действия после выбора независимого шаблона для действия.

		ВернутьПараметрыШаблона = Ложь;

		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
			// Если шаблон добавляется в комплексный процесс, то в шаблон загржаются предметы
			// комплексного процесса и происходит вычисление автоподстановок.

			ИмяПроцесса = Справочники[ШаблонПроцесса.Метаданные().Имя].ИмяПроцесса(ШаблонПроцесса);
			БизнесПроцессОбъект = БизнесПроцессы[ИмяПроцесса].СоздатьБизнесПроцесс();

			БизнесПроцессОбъект.Дата = ТекущаяДатаСеанса();
			БизнесПроцессОбъект.Автор = Форма.Объект.Автор;
			Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ШаблонПроцесса,
				БизнесПроцессОбъект);

			Если МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(БизнесПроцессОбъект) Тогда
				БизнесПроцессОбъект.ЗаполнитьДействияПоШаблону(ШаблонПроцесса);
			КонецЕсли;

			Мультипредметность.ПередатьПредметыПроцессу(БизнесПроцессОбъект, Форма.Объект.Предметы);

			БизнесПроцессОбъект.ЗаполнитьПоШаблону(ШаблонПроцесса);

			ШаблонДляВставки = БизнесПроцессОбъект.СоздатьШаблонПоПроцессу();

			ОбъектШаблонаПроцесса = ШаблонДляВставки.ПолучитьОбъект();
			
			// Проверим заполнение обязательных полей шаблона.
			// Если все обязательные поля заполнены, то обновляем предметы задач в процессе,
			// иначе возвращаем параметры шаблона для открытия карточки шаблона.
			Если ОбъектШаблонаПроцесса.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта().Количество()
				= 0 Тогда

				ОбновитьПредметыПоНастроенномуДействию(
					Форма, ШаблонДляВставки, Неопределено, ИдентификаторНастройки);
			Иначе
				ВернутьПараметрыШаблона = Истина;
			КонецЕсли;

		Иначе
			ОбъектШаблонаПроцесса = ШаблонПроцесса.Скопировать();
			ВернутьПараметрыШаблона = Истина;
		КонецЕсли;

		ОбъектШаблонаПроцесса.ВладелецШаблона = Форма.Объект.Ссылка;
		ОбъектШаблонаПроцесса.ШаблонВКомплексномПроцессе = Истина;

		Если Форма.Объект.Важность = Перечисления.ВариантыВажностиОбъектов.Высокая
			Или Форма.Объект.Важность = Перечисления.ВариантыВажностиОбъектов.Низкая Тогда

			ОбъектШаблонаПроцесса.Важность = Форма.Объект.Важность;
		КонецЕсли;

		ШаблоныБизнесПроцессов.ЗаписатьШаблон(
			ОбъектШаблонаПроцесса, "ЗаписьСЗаполнениемСлужебныхРеквизитовКомплексныхПроцессов");

		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.УстановитьНастройкуЭлементуСхемыВФорме(
			Форма, ИмяЭлемента, ОбъектШаблонаПроцесса.Ссылка);

		Если ВернутьПараметрыШаблона Тогда
			ПараметрыНовогоШаблона.Шаблон = ОбъектШаблонаПроцесса.Ссылка;
			ПараметрыНовогоШаблона.ИмяФормыДляОткрытия = 
				РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ИмяФормыНастройкиЭлементаСхемы(
					Форма, ОбъектШаблонаПроцесса.Ссылка);
		КонецЕсли;

	КонецЕсли;
	
	НастройкаЭлемента = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.НастройкаЭлементаСхемыВФорме(
		Форма, ИмяЭлемента);
	
	РаботаСКомплекснымиБизнесПроцессамиСервер.ОбновитьДанныеДействияВКэше(
		НастройкаЭлемента,
		Форма.ДанныеПараметровСхемы.КэшДанныхДействий);
	
	СхемыПроцессовКлиентСервер.УстановитьОписаниеЭлементуСхемы(
		ИмяЭлемента, Форма, Строка(НастройкаЭлемента));
	
	РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЗаполнитьСрокиЭлементовСхемыВФорме(Форма);
	
	РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ОбновитьПредставлениеСхемыВФорме(Форма);

	Форма.Модифицированность = Истина;

	Возврат ПараметрыНовогоШаблона;

КонецФункции

// Обновляет важность во всех настройках схемы.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса/шаблона.
//
Процедура ОбновитьВажностьДляВсехНастроекСхемы(Форма) Экспорт
	
	НастройкиДляОбновленияВажности = НастройкиДействийИВложенныхПроцессовВФорме(Форма);
	
	ВажностьНастроек = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		НастройкиДляОбновленияВажности, "Важность");
	
	Для Каждого Настройка Из НастройкиДляОбновленияВажности Цикл
		
		Если ВажностьНастроек[Настройка] = Форма.Объект.Важность Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаблокироватьДанныеДляРедактирования(Настройка);
		НастройкаОбъект = Настройка.ПолучитьОбъект();
		НастройкаОбъект.Важность = Форма.Объект.Важность;
		НастройкаОбъект.Записать();
		РазблокироватьДанныеДляРедактирования(Настройка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КэшДанныхДействий

// Возвращает кэш данных действий процесса.
//
// Параметры:
//  ДействияПроцесса - Массив
//    * ОпределяемыйТип.ШаблонДействияКомплексногоПроцесса,
//    * ОпределяемыйТип.ДействиеКомплексногоПроцесса
//
// Возвращаемое значение:
//  Соответствие - см. РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураКэшаДанныхДействий
// 
Функция КэшДанныхДействий(ДействияПроцесса) Экспорт
	
	КэшДанныхДействий = 
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураКэшаДанныхДействий();
	
	МенеджерыДляТиповДействий = Новый Соответствие();
	// Ключ - тип действия, Значение - меннеджер
	
	ТаблицаДействий = Новый ТаблицаЗначений();
	
	ОписаниеТиповКолонки = Новый ОписаниеТипов(
		Метаданные.ОпределяемыеТипы.ШаблонДействияКомплексногоПроцесса.Тип,
		Метаданные.ОпределяемыеТипы.ДействиеКомплексногоПроцесса.Тип.Типы());	
	ТаблицаДействий.Колонки.Добавить("Действие", ОписаниеТиповКолонки);
	
	Для Каждого ДействиеПроцесса Из ДействияПроцесса Цикл
		
		Если ТипЗнч(ДействиеПроцесса) = Тип("СправочникСсылка.ИменаПредметов") Тогда
			Продолжить;
		КонецЕсли;	
		
		ТипДействия = ТипЗнч(ДействиеПроцесса);
		
		МенеджерДействия = МенеджерыДляТиповДействий[ТипДействия];
		Если МенеджерДействия = Неопределено Тогда
			МенеджерДействия = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДействиеПроцесса);
			МенеджерыДляТиповДействий[ТипДействия] = МенеджерДействия;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаДействий.Добавить();
		СтрокаТаблицы.Действие = ДействиеПроцесса;
		
	КонецЦикла;
	
	Для Каждого ТипИМенеджер Из МенеджерыДляТиповДействий Цикл
		
		МенеджерДействия = ТипИМенеджер.Значение;
		
		ВыборкаДанныхДействий = МенеджерДействия.ВыборкаДанныхДействий(ТаблицаДействий);
	
		Пока ВыборкаДанныхДействий.Следующий() Цикл
			КэшДанныхДействий[ВыборкаДанныхДействий.Ссылка] = 
				МенеджерДействия.ДанныеДействия(ВыборкаДанныхДействий);
		КонецЦикла;
			
	КонецЦикла;  
	
	Возврат КэшДанныхДействий;

КонецФункции

// Обновляет данные действия в кэше.
//
// Параметры:
//  Действие - ОпределяемыйТип.ДействиеКомплексногоПроцесса,
//             ОпределяемыйТип.ШаблонДействияКомплексногоПроцесса
//  КэшДанныхДействий - Соответствие - см. РаботаСКомплекснымиБизнесПроцессамиСервер.КэшДанныхДействий.
//
Процедура ОбновитьДанныеДействияВКэше(Действие, КэшДанныхДействий) Экспорт
	
	Если Не ЗначениеЗаполнено(Действие) Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерДействие = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Действие);
	КэшДанныхДействий[Действие] = МенеджерДействие.ДанныеДействия(Действие);
		
КонецПроцедуры

// Добавляет исполнителя действия в массив.
//
// Параметры:
//  Исполнители - Массив - массив всех исполнителей.
//  Исполнитель - СправочникСсылка.Пользователи, СправочникСсылка.ПолныеРоли, СправочникСсылка.Сотрудники
//
Процедура ДобавитьИсполнителяПроцессаВМассив(Исполнители, Исполнитель) Экспорт

	Если ЗначениеЗаполнено(Исполнитель) И Исполнители.Найти(Исполнитель) = Неопределено Тогда

		Исполнители.Добавить(Исполнитель);
	КонецЕсли;

КонецПроцедуры

// Возвращает представление исполнителей действия.
//
// Параметры:
//  Исполнители - Массив - исполнители процесса (пользователи, роли).
//
// Возвращаемое значение:
//  Строка
//
Функция ИсполнителиСтрокой(Исполнители) Экспорт

	ИсполнителиСтрокой = "";

	КоличествоВсех = Исполнители.Количество();

	КоличествоОтображаемыхИмен = КоличествоВсех;
	Если КоличествоВсех > 3 Тогда
		КоличествоОтображаемыхИмен = 3;
	КонецЕсли;

	Разделитель = "";

	Для ИндексИсполнителя = 0 По КоличествоОтображаемыхИмен - 1 Цикл

		ИмяИсполнителя = Строка(Исполнители[ИндексИсполнителя]);

		ИсполнителиСтрокой = ИсполнителиСтрокой + Разделитель + ИмяИсполнителя;

		Разделитель = Символы.ПС;

	КонецЦикла;

	Если КоличествоОтображаемыхИмен <> КоличествоВсех Тогда

		ПредставлениеЕще = СтрШаблон(
			НСтр("ru = ' и другие (всего %1)'"), КоличествоВсех);

		ИсполнителиСтрокой = ИсполнителиСтрокой + Символы.ПС + ПредставлениеЕще;

	КонецЕсли;

	Возврат ИсполнителиСтрокой;

КонецФункции

// Заполняет КэшДанныхДействий в форме процесса/шаблона со схемой.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса/шаблона.
//
Процедура ЗаполнитьКэшДанныхДействийВФорме(Форма) Экспорт
	
	ДействияПроцесса = Новый Массив;
	
	ПараметрыЭлементов =
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ВсеПараметрыЭлементовВСхеме(Форма);
		
	Для Каждого ИмяИПараметрыЭлемента Из ПараметрыЭлементов Цикл
		
		ПараметрыЭлемента = ИмяИПараметрыЭлемента.Значение;
		
		Если Не СхемыПроцессовКлиентСервер.ЭтоДействиеСхемы(ПараметрыЭлемента.Тип)
			И Не СхемыПроцессовКлиентСервер.ЭтоВложенныйПроцессСхемы(ПараметрыЭлемента.Тип) Тогда
					
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыЭлемента.Настройка) Тогда
			ДействияПроцесса.Добавить(ПараметрыЭлемента.Настройка);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыЭлемента.Процесс) Тогда
			ДействияПроцесса.Добавить(ПараметрыЭлемента.Процесс);
		КонецЕсли;
		
	КонецЦикла;
			
	Форма.ДанныеПараметровСхемы.КэшДанныхДействий = КэшДанныхДействий(ДействияПроцесса);
	
КонецПроцедуры

#КонецОбласти

#Область ТекущиеЭлементыСхемы

// Возвращает текущие элементы схемы в процессе.
// 
// Параметры:
//  Процесс - БизнесПроцессСсылка.КомплексныйПроцесс
// 
// Возвращаемое значение:
//  Соответствие - см. РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураТекущихЭлементовСхемы
//
Функция ТекущиеЭлементыСхемыВПроцессе(Процесс) Экспорт
	
	ТекущиеЭлементы =
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураТекущихЭлементовСхемы();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КомплексныйПроцессТекущиеЭлементыСхемы.ИмяЭлемента
		|ИЗ
		|	БизнесПроцесс.КомплексныйПроцесс.ТекущиеЭлементыСхемы КАК КомплексныйПроцессТекущиеЭлементыСхемы
		|ГДЕ
		|	КомплексныйПроцессТекущиеЭлементыСхемы.Ссылка = &Процесс";
	Запрос.УстановитьПараметр("Процесс", Процесс);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекущиеЭлементы[Выборка.ИмяЭлемента] = Истина;
	КонецЦикла;
	
	Возврат ТекущиеЭлементы;
	
КонецФункции

#КонецОбласти

#Область ПройденныеЭлементыСхемы

// Возвращает пройденные элементы схемы в процессе.
// 
// Параметры:
//  Процесс - БизнесПроцессСсылка.КомплексныйПроцесс
// 
// Возвращаемое значение:
//  Соответствие - см. РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураПройденныхЭлементовСхемы
//
Функция ПройденныеЭлементыСхемыВПроцессе(Процесс) Экспорт
	
	ПройденныеЭлементы =
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураПройденныхЭлементовСхемы();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КомплексныйПроцессОтметкиПрохожденияСхемы.ИмяЭлемента
		|ИЗ
		|	БизнесПроцесс.КомплексныйПроцесс.ОтметкиПрохожденияСхемы КАК КомплексныйПроцессОтметкиПрохожденияСхемы
		|ГДЕ
		|	КомплексныйПроцессОтметкиПрохожденияСхемы.Ссылка = &Процесс
		|	И КомплексныйПроцессОтметкиПрохожденияСхемы.Пройден = ИСТИНА";
	Запрос.УстановитьПараметр("Процесс", Процесс);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПройденныеЭлементы[Выборка.ИмяЭлемента] = Истина;
	КонецЦикла;
	
	Возврат ПройденныеЭлементы;
	
КонецФункции

#КонецОбласти

#Область ПроцессыЭлементовСхемы

// Возвращает последние процессы элементов схемы комплексного процесса.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.КомплексныйПроцесс,
//            БизнесПроцессСсылка.КомплексныйПроцесс,
//            ДанныеФормыСтруктура
// 
// Возвращаемое значение:
//  Соответствие
//   * Ключ - Строка - имя элемента схемы
//   * Значение - ОпределяемыйТип.ДействиеКомплексногоПроцесса - процесс.            
//
Функция ПроцессыЭлементовСхемыПоКомплексномуПроцессу(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПроцессыЭлементов = Новый Соответствие();
	
	Если ТипЗнч(Процесс) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		
		Если Не ОбщегоНазначения.СсылкаСуществует(Процесс) Тогда
			Возврат ПроцессыЭлементов;
		КонецЕсли;
		
		ЗадачиЭлементовСхемы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Процесс, "ЗадачиЭлементовСхемы").Выгрузить();		
	Иначе
		ЗадачиЭлементовСхемы = Процесс.ЗадачиЭлементовСхемы.Выгрузить();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗадачиЭлементовСхемы.ИмяЭлемента,
		|	ЗадачиЭлементовСхемы.ЗадачаПроцесса
		|ПОМЕСТИТЬ ЗадачиЭлементовСхемы
		|ИЗ
		|	&ЗадачиЭлементовСхемы КАК ЗадачиЭлементовСхемы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗадачиЭлементовСхемы.ИмяЭлемента КАК ИмяЭлемента,
		|	ДочерниеБизнесПроцессы.ДочернийПроцесс КАК Процесс
		|ИЗ
		|	ЗадачиЭлементовСхемы КАК ЗадачиЭлементовСхемы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДочерниеБизнесПроцессы КАК ДочерниеБизнесПроцессы
		|		ПО ЗадачиЭлементовСхемы.ЗадачаПроцесса = ДочерниеБизнесПроцессы.СвязующаяЗадача";
	
	Запрос.УстановитьПараметр("ЗадачиЭлементовСхемы", ЗадачиЭлементовСхемы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПроцессыЭлементов[Выборка.ИмяЭлемента] = Выборка.Процесс;
	КонецЦикла;
	
	Возврат ПроцессыЭлементов;
	
КонецФункции

#КонецОбласти

// Возвращает ссылку на схему шаблона процесса по умолчанию.
// Если схема с параметрами отсутствует в базе, то они будут созданы.
// 
// 
// Возвращаемое значение:
//  СправочникСсылка.СхемыПроцессов
//  
Функция СхемаШаблонаПроцессаПоУмолчанию() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		///////////////////////////////
		// Формирование схемы процесса.
		
		ИдентификаторСхемыПоУмолчанию = Новый УникальныйИдентификатор(
			"54e8beb3-ac4a-4a8c-b78c-02e50e75369e");
		
		СсылкаНаСхему = Справочники.СхемыПроцессов.ПолучитьСсылку(ИдентификаторСхемыПоУмолчанию);
		ДанныеСхемы = СхемыПроцессовСервер.ДанныеСхемыПоУмолчанию();	
		Если ОбщегоНазначения.СсылкаСуществует(СсылкаНаСхему) Тогда
			ЗаполнитьЗначенияСвойств(
				ДанныеСхемы,
				Справочники.СхемыПроцессов.ДанныеСхемыПроцесса(СсылкаНаСхему),,
				"Схема, Настройки");
		Иначе
			СсылкаНаСхему = ИдентификаторСхемыПоУмолчанию;
			ДанныеСхемы = СхемыПроцессовСервер.ДанныеСхемыПоУмолчанию();
			ДанныеСхемы.Наименование = НаименованиеШаблонаПроцессаПоУмолчанию();
		КонецЕсли;
		
		РезультатЗаписи = Справочники.СхемыПроцессов.ЗаписатьДанныеСхемыПроцесса(
			СсылкаНаСхему, ДанныеСхемы);
		СсылкаНаСхему = РезультатЗаписи.СхемаПроцесса; 
		
		/////////////////////////////////
		// Формирование параметров схемы.
		
		ИдентификаторПараметровСхемыПоУмолчанию = Новый УникальныйИдентификатор(
			"75170df5-c460-43a1-916f-ad72578ee096");
			
		СсылкаНаПараметры = Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПолучитьСсылку(
			ИдентификаторПараметровСхемыПоУмолчанию);
		
		Если ОбщегоНазначения.СсылкаСуществует(СсылкаНаПараметры) Тогда
			ДанныеПараметров =
				Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(
					СсылкаНаПараметры);
		Иначе
			СсылкаНаПараметры = ИдентификаторПараметровСхемыПоУмолчанию;
			ДанныеПараметров = 
				Справочники.ПараметрыСхемДляКомплексныхПроцессов.СтруктураДанныхПараметровСхемы();
			
			ДанныеПараметров.Схема = СсылкаНаСхему;
			
			ДанныеПараметров.ВладелецСхемы =
				Справочники.ШаблоныКомплексныхБизнесПроцессов.ПоУмолчанию;		
		КонецЕсли; 
		
		ДанныеПараметров.НастройкиЭлементов.Очистить();
		ДанныеПараметров.ИдентификаторыНастроек.Очистить();
				
		ПустыеЗначенияПараметров = 
			РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ПустыеЗначенияНастроекДляТиповЭлементовСхемы();
		
		ТипыВсехЭлементов = СхемыПроцессовКлиентСервер.ТипыВсехЭлементовПоДаннымСхемы(ДанныеСхемы);
				
		Для Каждого КлючЗначение Из ТипыВсехЭлементов Цикл
			ИмяЭлемента = КлючЗначение.Ключ;
			ТипЭлемента = КлючЗначение.Значение;
			
			ПустоеЗначениеПараметра = ПустыеЗначенияПараметров[ТипЭлемента];
			Если ПустоеЗначениеПараметра  = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеПараметров.НастройкиЭлементов[ИмяЭлемента] = 
				ОбщегоНазначения.СкопироватьРекурсивно(ПустоеЗначениеПараметра);
			 
			ДанныеПараметров.ИдентификаторыНастроек[ИмяЭлемента] = Новый УникальныйИдентификатор;
			
		КонецЦикла;
			
		Справочники.ПараметрыСхемДляКомплексныхПроцессов.ЗаписатьДанныеПараметровСхемы(
			СсылкаНаПараметры, ДанныеПараметров, Ложь);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат СсылкаНаСхему;
	
КонецФункции

// Возвращает хеш выражения на встроенном языке, используемого в схемах для комплексных процессов.
// 
// Параметры:
//  Выржаение - Строка
// 
// Возвращаемое значение:
//  Строка
//
Функция ХешВыржаенияНаВстроенномЯзыке(Выражение) Экспорт
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешированиеДанных.Добавить(Выражение);
	Возврат ВРег(СтрЗаменить(Строка(ХешированиеДанных.ХешСумма), " ", ""));
	
КонецФункции

// Возвращает принадлежность схемы текущему процессу.
// 
// Параметры:
//  Схема - СправочникСсылка.СхемыПроцессов
// 
// Возвращаемое значение:
// 	Булево
//
Функция СхемаПринадлежитПроцессу(Схема) Экспорт
	
	ПараметрыПоСхеме =
		Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыПоСхеме(Схема);
		
	Возврат ЗначениеЗаполнено(ПараметрыПоСхеме);
		
КонецФункции

// Копирует схему комплексного процесса из одного процесса в другой.
// Копирование схемы с ее параметрами выполняется в транзакции.
// Ссылка на копию помещается в ПроцессПриемник.
//  
// Параметры:
//  ПроцессИсточник - БизнесПроцессОбъект.КомплексныйПроцесс,
//                    СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов,
//                    Структура с полем Схема - комплексный процесс или его шаблон.
//                    
//  ПроцессПриемник - БизнесПроцессОбъект.КомплексныйПроцесс,
//                    СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов 
//
Процедура СкопироватьСхемуКомплексногоПроцесса(ПроцессИсточник, ПроцессПриемник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		ТипПриемника = ТипЗнч(ПроцессПриемник);
			
		Если ТипПриемника = Тип("СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов") Тогда
			//@skip-warning
			КомплексныйПроцесс = ПроцессПриемник.КомплексныйПроцесс;
			//@skip-warning
			СсылкаНаПроцесс = ПроцессПриемник.СсылкаНаШаблон();
		ИначеЕсли ТипПриемника = Тип("БизнесПроцессОбъект.КомплексныйПроцесс") Тогда
			КомплексныйПроцесс = ПроцессПриемник.СсылкаНаПроцесс();
			СсылкаНаПроцесс = КомплексныйПроцесс;
		Иначе
			ВызватьИсключение НСтр("ru = 'ПроцессПриемник имеет неподдерживаемый тип.'",
				ОбщегоНазначения.КодОсновногоЯзыка());
		КонецЕсли;
		
		////////////////////////////////
		// Определяем ссылки на схему и параметры схемы процесса.
		
		ПараметрыСхемы = Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыСхемыПоВладельцу(
			СсылкаНаПроцесс);
			
		СхемаСсылка = Справочники.СхемыПроцессов.ПустаяСсылка();
		Если ЗначениеЗаполнено(ПараметрыСхемы) Тогда
			ДанныеПараметровСхемы = 
				Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(ПараметрыСхемы);
			СхемаСсылка = ДанныеПараметровСхемы.Схема;
		КонецЕсли;
		
		////////////////////////////////
		// Создание копии схемы процесса.
					
		ДанныеСхемы = Справочники.СхемыПроцессов.ДанныеСхемыПроцесса(ПроцессИсточник.Схема); 
			
		Если ЗначениеЗаполнено(ПроцессПриемник.Наименование) Тогда
			ДанныеСхемы.Наименование = ПроцессПриемник.Наименование;
		Иначе
			ДанныеСхемы.Наименование = СтрШаблон(
				НСтр("ru = 'Схема процесса: %1'"),
				Строка(СсылкаНаПроцесс));
		КонецЕсли;
			
		ДанныеСхемы.ВерсияДанных = ""; 
		
		РезультатЗаписи = Справочники.СхемыПроцессов.ЗаписатьДанныеСхемыПроцесса(
			СхемаСсылка, ДанныеСхемы);
		
		СхемаСсылка = РезультатЗаписи.СхемаПроцесса;
		
		////////////////////////////////
		// Создание копии параметров схемы.
			
		ДанныеПараметровСхемы = Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(
			Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыПоСхеме(ПроцессИсточник.Схема));
		
		ДанныеПараметровСхемы.Схема = СхемаСсылка;
		
		ДанныеПараметровСхемы.ВерсияДанных = "";
		
		ДанныеПараметровСхемы.ВладелецСхемы = СсылкаНаПроцесс;		
		ДанныеПараметровСхемы.ОбъектДоступа = 
			Справочники.ПараметрыСхемДляКомплексныхПроцессов.ОбъектДоступаПараметровПоВладельцуСхемы(
				ПроцессПриемник);
		
		// Копирование настроек действий и вложенных процессов.
		
		ИменаНастроекДляИзменения = Новый Массив;
		
		Для Каждого КлючЗначение Из ДанныеПараметровСхемы.НастройкиЭлементов Цикл
			
			ИмяЭлемента = КлючЗначение.Ключ;
			ТипЭлемента = СхемыПроцессовКлиентСервер.ТипЭлементаСхемы(ДанныеСхемы, ИмяЭлемента);
			НастройкаЭлемента = КлючЗначение.Значение;
							
			Если Не СхемыПроцессовКлиентСервер.ЭтоДействиеСхемы(ТипЭлемента)
				И Не СхемыПроцессовКлиентСервер.ЭтоВложенныйПроцессСхемы(ТипЭлемента) Тогда
							
				Продолжить;				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(НастройкаЭлемента) Тогда
				Продолжить;
			КонецЕсли;
			
			ИменаНастроекДляИзменения.Добавить(ИмяЭлемента);
			
		КонецЦикла;
		
		Для Каждого ИмяЭлемента Из ИменаНастроекДляИзменения Цикл
			
			КопируемаяНастройкаСсылка = ДанныеПараметровСхемы.НастройкиЭлементов[
				ИмяЭлемента];
			
			Если ТипЗнч(КопируемаяНастройкаСсылка) = Тип("СправочникСсылка.ИменаПредметов") Тогда
				
				// тут ничего не надо делать.
				
			Иначе
					
				КопируемаяНастройка = ДанныеПараметровСхемы.НастройкиЭлементов[
					ИмяЭлемента].ПолучитьОбъект();
					
				ЗаполнитьИсходныйШаблон = Не ЗначениеЗаполнено(КопируемаяНастройка.КомплексныйПроцесс);
				
				//@skip-warning
				КопируемаяНастройка.КомплексныйПроцесс = КомплексныйПроцесс;
				
				НоваяНастройка = КопируемаяНастройка.Скопировать();
				
				Если ЗаполнитьИсходныйШаблон Тогда
					НоваяНастройка.ИсходныйШаблон = КопируемаяНастройка.Ссылка;
				КонецЕсли;
				
				НоваяНастройка.ВладелецШаблона = ДанныеПараметровСхемы.ВладелецСхемы;
				
				НоваяНастройка.ШаблонВКомплексномПроцессе = Истина;
				
				НоваяНастройка.Ответственный = Сотрудники.ОсновнойСотрудник();
				
				ШаблоныБизнесПроцессов.ЗаписатьШаблон(НоваяНастройка,
						"ЗаписьСЗаполнениемСлужебныхРеквизитовКомплексныхПроцессов");
				
				ДанныеПараметровСхемы.НастройкиЭлементов[ИмяЭлемента] = НоваяНастройка.Ссылка;
			
			КонецЕсли; 
			
		КонецЦикла;
				
		Справочники.ПараметрыСхемДляКомплексныхПроцессов.ЗаписатьДанныеПараметровСхемы(
			ПараметрыСхемы, ДанныеПараметровСхемы, Ложь);		  		
		
		/////////////////////////////////////
		// Помещаем ссылку на схему в процесс.
		
		ПроцессПриемник.Схема = СхемаСсылка;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Выполняет проверку корректности схемы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма комплексного процесса или шаблона. 
//
// Возвращаемое значение:
//  Структура
//   * ОшибкиНастроекСхемы - Массив - см. РаботаСКомплекснымиБизнесПроцессамиСервер.ОшибкиЗаполненияНастроекЭлементовСхемы.
//   * ОписаниеРезультата - Строка - описание результата.
//
Функция ПроверитьСхемуИНастройки(Форма) Экспорт
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ОшибкиНастроекСхемы", Неопределено);
	РезультатПроверки.Вставить("ОписаниеРезультата", "");
	
	// Проверим корректность самой схемы.
	СхемыПроцессовСервер.ПроверитьКорректностьСхемыВФорме(Форма);
	СхемаКорректна = Не СхемыПроцессовКлиентСервер.ЕстьОшибкиНастройкиСхемы(Форма);
	
	// Проверим корректность настроек элементов схемы.
	
	ДанныеСхемы = СхемыПроцессовКлиентСервер.ДанныеСхемыПроцессаИзФормы(Форма);
	
	НастройкиЭлементовСхемы =
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ВсеНастройкиЭлементовСхемыВФорме(Форма);
	
	РезультатПроверки.ОшибкиНастроекСхемы = 
		РаботаСКомплекснымиБизнесПроцессамиСервер.ОшибкиЗаполненияНастроекЭлементовСхемы(
			НастройкиЭлементовСхемы,
			СхемыПроцессовКлиентСервер.ТипыВсехЭлементовПоДаннымСхемы(ДанныеСхемы),
			СхемыПроцессовКлиентСервер.ГрафическаяСхемаПоДаннымСхемы(ДанныеСхемы));
	НетОшибокВНастройках = РезультатПроверки.ОшибкиНастроекСхемы.Количество() = 0;

	// Сформируем описание результата.
	Если Не СхемаКорректна Или Не НетОшибокВНастройках Тогда
		РезультатПроверки.ОписаниеРезультата = НСтр("ru = 'Схема не прошла проверку.
			|Исправьте обнаруженные ошибки (см. панель Сообщения).'");
	Иначе
		РезультатПроверки.ОписаниеРезультата = НСтр("ru = 'Схема корректна.'");
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Создает схему процессы по умолчанию в форме процесса.
// Предназначена для процесса, у которого не было ранее схемы.
// 
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма комплексного процесса/шаблона.
//
Процедура СоздатьСхемуПроцессаПоУмолчаниюВФорме(Форма) Экспорт
	
	Форма.ДанныеПараметровСхемы =
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураДанныхПараметровСхемыВФорме();
	
	СхемыПроцессовСервер.ПрочитатьСхемуВФорму(Форма.ДанныеПараметровСхемы.Схема, Форма);
	
	ЗаполнитьФормыНастроекЭлементовСхемы(Форма);
	
	ДобавленныеЭлементы = Новый Массив;
	Для Каждого ЭлементСхемы Из СхемыПроцессовКлиентСервер.ВсеЭлементыСхемы(Форма) Цикл
		ДобавленныеЭлементы.Добавить(ЭлементСхемы.Ключ);
	КонецЦикла;
	
	РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ОбновитьНастройкиЭлементовПоИзменениямСхемы(
		Форма, ДобавленныеЭлементы, Новый Массив);
		
КонецПроцедуры

// Читает схему в форму процесса с возможность отображения/редактирования схем.
// В форме должны быть соответствующие реквизиты и элементы управления.
// 
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма комплексного процесса/шаблона.
//   Процесс - БизнесПроцессОбъект.КомплексныйПроцесс,
//             СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов,
//             ДанныеФормыСтруктура - комплексный процесс/шаблон
// 
Процедура ПрочитатьСхемуВФорму(Форма, Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Процесс.Схема) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Процесс.Схема) = Тип("СправочникСсылка.УдалитьСхемыКомплексныхПроцессов") Тогда
		ТекстОшибки = НСтр("ru = 'Карточка процесса/шаблона не доступна для просмотра.
			|Формат его схемы еще не обновлен. Повторите попытку позже.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ПараметрыСхемы = Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыПоСхеме(
		Процесс.Схема);			
	Если Не ЗначениеЗаполнено(ПараметрыСхемы) Тогда
		Возврат;
	КонецЕсли;
	
	СхемыПроцессовСервер.ПрочитатьСхемуВФорму(Процесс.Схема, Форма);
	
	Форма.ДанныеПараметровСхемы =
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураДанныхПараметровСхемыВФорме();
	
	Форма.ДанныеПараметровСхемы.Ссылка = ПараметрыСхемы;
	
	ЗаполнитьЗначенияСвойств(
		Форма.ДанныеПараметровСхемы,
		Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(ПараметрыСхемы));
		
	ЗаполнитьФормыНастроекЭлементовСхемы(Форма);
		
	ЗаполнитьПроцессыЭлементовСхемы(Форма);
	ЗаполнитьКэшДанныхДействийВФорме(Форма);
	
	ЗаполнитьТекущиеЭлементыПоПроцессуВФорме(Форма, Процесс);
	ЗаполнитьПройденныеЭлементыПоПроцессуВФорме(Форма, Процесс);
	
	РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ОбновитьПредставлениеСхемыВФорме(Форма);
	
КонецПроцедуры

// Записывает схему процесса из формы.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма комплексного процесса или шаблона.
//  Процесс - БизнесПроцессОбъект.КомплексныйПроцесс,
//           СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов 
//
Процедура ЗаписатьСхемуПроцессаИзФормы(Форма, Процесс) Экспорт
	
	Если Не РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ОбновитьПредставлениеСхемыВФорме(Форма, Истина);
	
	НачатьТранзакцию();
	Попытка
		СхемыПроцессовКлиентСервер.УстановитьНаименованиеВДанныеСхемы(Форма, Процесс.Наименование);
		СхемыПроцессовСервер.ЗаписатьСхемуИзФормы(Форма);
		ЗаписатьПараметрыСхемыИзФормы(Форма, Процесс);
		ПрерватьПроцессыОтмеченныеКПрерыванию(Форма);		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
		
	РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ОбновитьПредставлениеСхемыВФорме(Форма);
		
	Процесс.Схема = Форма.ДанныеПараметровСхемы.Схема;
	
	ПоместитьТекущиеЭлементыВПроцессИзФормы(Процесс, Форма);
	ПоместитьПройденныеЭлементыВПроцессИзФормы(Процесс, Форма);
	ПоместитьПроцессыЭлементовСхемыВПроцессИзФормы(Процесс, Форма);
	
КонецПроцедуры

// Создает копию данных схемы из формы и возвращает ее в виде структуры.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма комплексного процесса или шаблона.
//  Процесс - БизнесПроцессОбъект.КомплексныйПроцесс,
//           СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов 
// 
// Возвращаемое значение:
//  Структура
//   * СхемаПроцесса - Структура - см. СхемыПроцессовСервер.СкопироватьДанныеСхемыПроцессыИзФормы
//   * ПараметрыСхемы - ХранилищеЗначения - параметры схемы в форме.
//   * СсылкаНаСхемуВПроцесса - СправочникСсылка.СхемыПроцессов
//
Функция СкопироватьДанныеСхемыПроцессыИзФормы(Форма, Процесс) Экспорт
	
	КопияДанныхСхемы = Новый Структура;
	
	КопияДанныхСхемы.Вставить(
		"СхемаПроцесса",
		СхемыПроцессовСервер.СкопироватьДанныеСхемыПроцессыИзФормы(Форма));
			
	КопияДанныхСхемы.Вставить("ПараметрыСхемы", Новый ХранилищеЗначения(Форма.ДанныеПараметровСхемы));
	
	КопияДанныхСхемы.Вставить("СсылкаНаСхемуВПроцесса", Процесс.Схема);
	
	Возврат КопияДанныхСхемы;
	
КонецФункции

// Восстановить схему процесса в форме из копиданных схемы.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма комплексного процесса или шаблона.
//  КопияДанныхСхемы - Структура - см. СкопироватьДанныеСхемыПроцессыИзФормы
//
Процедура ВосстановитьСхемуПроцессаИзКопииДанных(Форма, Процесс, КопияДанныхСхемы) Экспорт
	
	СхемыПроцессовСервер.ВосстановитьСхемуПроцессаИзКопииДанных(
		Форма, КопияДанныхСхемы.СхемаПроцесса);
	
	Форма.ДанныеПараметровСхемы = КопияДанныхСхемы.ПараметрыСхемы.Получить();
	Процесс.Схема = КопияДанныхСхемы.СсылкаНаСхемуВПроцесса;
	
КонецПроцедуры

#КонецОбласти

#Область ТаблицаЭтапов

// Удаляет шаблон действия в комплексном процессе или шаблоне комплексного процесса
// Параметры:
//	ШаблонБизнесПроцесса - ссылка на удаляемый шаблон процесса
Процедура УдалитьШаблонДействияЭтапаПроцесса(ШаблонБизнесПроцесса) Экспорт

	ВладелецШаблона = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
		ШаблонБизнесПроцесса, "ВладелецШаблона");

	Если ЗначениеЗаполнено(ВладелецШаблона) И ОбщегоНазначения.СсылкаСуществует(ВладелецШаблона)
		И Не ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(ШаблонБизнесПроцесса).Удаление Тогда

		Текст = НСтр("ru = 'Недостаточно прав для удаления действия комплексного процесса'");
		ВызватьИсключение Текст;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	Если ЗначениеЗаполнено(ВладелецШаблона) Тогда
		ШаблонОбъект = ШаблонБизнесПроцесса.ПолучитьОбъект();
		ШаблонОбъект.УстановитьПометкуУдаления(Истина);
	КонецЕсли;

КонецПроцедуры

// Обработчик события переключения варианта маршрутизации комплексного процесса.
// Переключает внешний вид списка действий комплексного процесса.
// Параметры:
//	Объект - объект (комплексный процесс или шаблон комплексного процесса)
Процедура ВариантМаршрутизацииПриИзменении(Объект, ЭтапыКУдалению) Экспорт

	ЭтоПроцесс = Ложь;
	Если ТипЗнч(Объект.Ссылка) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		ЭтоПроцесс = Истина;
	КонецЕсли;

	ПредшественникиЭтаповДоИзменения = Объект.ПредшественникиЭтапов.Выгрузить();
	ОтборПоВыполненнымУсловнымПереходам = Новый Структура;
	ОтборПоВыполненнымУсловнымПереходам.Вставить("ИдентификаторПоследователя",
		УникальныйИдентификаторПустой());
	ОтборПоВыполненнымУсловнымПереходам.Вставить("ИдентификаторПредшественника",
		УникальныйИдентификаторПустой());
	Если ЭтоПроцесс Тогда
		ОтборПоВыполненнымУсловнымПереходам.Вставить("УсловныйПереходБылВыполнен", Истина);
	КонецЕсли;

	Если Объект.ВариантМаршрутизации = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда
		// У каждого этапа предшественником устанавливается старт процесса
		Объект.ПредшественникиЭтапов.Очистить();
		Для Каждого Этап Из Объект.Этапы Цикл
			НоваяСтрока = Объект.ПредшественникиЭтапов.Добавить();
			НоваяСтрока.ИдентификаторПоследователя = Этап.ИдентификаторЭтапа;
			НоваяСтрока.ИдентификаторПредшественника = УникальныйИдентификаторПустой();

			Если ЭтоПроцесс Тогда
				ЗаполнитьЗначенияСвойств(
					ОтборПоВыполненнымУсловнымПереходам, НоваяСтрока, ,
					"УсловныйПереходБылВыполнен");
				НоваяСтрока.УсловныйПереходБылВыполнен = ПредшественникиЭтаповДоИзменения.НайтиСтроки(
					ОтборПоВыполненнымУсловнымПереходам).Количество() > 0;
			Иначе
				ЗаполнитьЗначенияСвойств(
					ОтборПоВыполненнымУсловнымПереходам, НоваяСтрока);
			КонецЕсли;

		КонецЦикла;
	ИначеЕсли Объект.ВариантМаршрутизации = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда
		// Предшественники очищаются - этапы будут выполняться в порядке очереди
		Объект.ПредшественникиЭтапов.Очистить();
		Для Счетчик = 0 По Объект.Этапы.Количество() - 1 Цикл
			НоваяСтрока = Объект.ПредшественникиЭтапов.Добавить();
			НоваяСтрока.ИдентификаторПоследователя = Объект.Этапы[Счетчик].ИдентификаторЭтапа;
			НовыйПредшественникПодобран = Ложь;
			Для Индекс = 1 По Счетчик Цикл
				ДействительныйИндекс = Счетчик - Индекс;
				ЭтапЕстьСредиУдаленных = Ложь;
				Для Каждого ЭтапКУдалению Из ЭтапыКУдалению Цикл
					Если ЭтапКУдалению.Значение.ИдентификаторЭтапа
						= Объект.Этапы[ДействительныйИндекс].ИдентификаторЭтапа Тогда
						ЭтапЕстьСредиУдаленных = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если Не ЭтапЕстьСредиУдаленных Тогда
					НоваяСтрока.ИдентификаторПредшественника = Объект.Этапы[ДействительныйИндекс].ИдентификаторЭтапа;
					НовыйПредшественникПодобран = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не НовыйПредшественникПодобран Тогда
				НоваяСтрока.ИдентификаторПредшественника = УникальныйИдентификаторПустой();
			КонецЕсли;
			НоваяСтрока.УсловиеРассмотрения = Перечисления.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения;

			Если ЭтоПроцесс Тогда
				ЗаполнитьЗначенияСвойств(
					ОтборПоВыполненнымУсловнымПереходам, НоваяСтрока, ,
					"УсловныйПереходБылВыполнен");
				НоваяСтрока.УсловныйПереходБылВыполнен = ПредшественникиЭтаповДоИзменения.НайтиСтроки(
					ОтборПоВыполненнымУсловнымПереходам).Количество() > 0;
			Иначе
				ЗаполнитьЗначенияСвойств(
					ОтборПоВыполненнымУсловнымПереходам, НоваяСтрока);
			КонецЕсли;

		КонецЦикла;

	ИначеЕсли Объект.ВариантМаршрутизации = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда
		// Не требуется корректировка порядка следования этапов.
	КонецЕсли;

КонецПроцедуры

// Обновляет порядок сортировки этапов процесса/шаблона.
//
// Параметры:
//  Объект - СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов,
//           БизнесПроцессОбъект.КомплексныйПроцесс - объект комплексного процесса или шаблона.
//
Процедура ОбновитьПорядокСортировкиЭтапов(Объект) Экспорт

	Если Объект.ВариантМаршрутизации = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно
		Или Объект.ВариантМаршрутизации = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда

		ПорядковыйНомерЭтапа = 1;

		Для Каждого СтрокаТаблицы Из Объект.Этапы Цикл
			СтрокаТаблицы.ПорядокСортировки = ПорядковыйНомерЭтапа;
			ПорядковыйНомерЭтапа = ПорядковыйНомерЭтапа + 1;
		КонецЦикла;

	Иначе

		КэшСтрокЭтапов = Новый Соответствие;

		Для Каждого СтрокаТаблицы Из Объект.Этапы Цикл
			СтрокаТаблицы.ПорядокСортировки = 0;
			КэшСтрокЭтапов.Вставить(СтрокаТаблицы.ИдентификаторЭтапа, СтрокаТаблицы);
		КонецЦикла;

		Отбор = Новый Структура;
		Отбор.Вставить("ИдентификаторПредшественника", УникальныйИдентификаторПустой());

		ПервыеЭтапы = Объект.ПредшественникиЭтапов.НайтиСтроки(Отбор);

		ПорядковыйНомерЭтапа = 0;

		Для Каждого СтрокаТаблицы Из ПервыеЭтапы Цикл

			ПорядковыйНомерЭтапа = ПорядковыйНомерЭтапа + 1;

			СтрокаПервогоЭтапа = КэшСтрокЭтапов.Получить(СтрокаТаблицы.ИдентификаторПоследователя);
			СтрокаПервогоЭтапа.ПорядокСортировки = ПорядковыйНомерЭтапа;

			ОбновитьПорядокСортировкиПоследователейЭтапа(
				Объект, СтрокаПервогоЭтапа.ИдентификаторЭтапа, ПорядковыйНомерЭтапа, КэшСтрокЭтапов);

		КонецЦикла;
		
		// Заполняем порядок сортировки для этапов, не попавших ни в один путь.
		// Это нужно, чтобы не было действий с пустым порядком.
		// Пустой порядок является условием завершения отложенного обработчика обновления
		// порядка сортировки.
		Для Каждого СтрокаТаблицы Из Объект.Этапы Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.ПорядокСортировки) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицы.ПорядокСортировки = 1;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Применяет настройки действия комплексного процесса или шаблона комплексного процесса
// Параметры:
//	Форма - форма комплексного процесса или шаблона комплексного процесса
//	ИдентификаторЭтапа - уникальный идентификатор действия, для которого устанавливаются настройки
//	ПараметрыОповещения - структура, содержащая параметры действия
//		ШаблонБП - ссылка на шаблон бизнес-процесса
//		ВладелецШаблона - ссылка на комплексный процесс или шаблон комплексного процесса
// Возвращает:
//	УникальныйИдентификатор - идентификатор действия, для которого были применены настройки
Функция ПрименитьНастройкиДействия(Форма, ПараметрыОповещения) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Если ТипЗнч(ПараметрыОповещения) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Поиск настроек действия в табличной части
	Шаблон = ПараметрыОповещения.ШаблонБП;
	ИдентификаторЭтапа = Неопределено;
	РабочийЭтап = Неопределено;
	Для Каждого Этап Из Форма.Объект.Этапы Цикл
		Если Этап.ШаблонБизнесПроцесса = Шаблон Тогда
			ИдентификаторЭтапа = Этап.ИдентификаторЭтапа;
			РабочийЭтап = Этап;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Настройки действия не найдены - создается новая запись
	Если ИдентификаторЭтапа = Неопределено Тогда
		РабочийЭтап = Форма.Объект.Этапы.Добавить();
		РабочийЭтап.ИдентификаторЭтапа = Новый УникальныйИдентификатор;
		РабочийЭтап.ПредшественникиВариантИспользования = "ВсеПредшественники";

		Если Форма.Объект.Этапы.Количество() = 1 Тогда
			// Если добавляется первое действие, то его предшественник - старт процесса
			НоваяЗаписьОПредшественнике = Форма.Объект.ПредшественникиЭтапов.Добавить();
			НоваяЗаписьОПредшественнике.ИдентификаторПоследователя = РабочийЭтап.ИдентификаторЭтапа;
			НоваяЗаписьОПредшественнике.ИдентификаторПредшественника = УникальныйИдентификаторПустой();
		ИначеЕсли Форма.Объект.Этапы.Количество() > 1 Тогда
			// Если все действия выполняются параллельно, то в предшественники записывается старт процесса
			Если Форма.Объект.ВариантМаршрутизации
				= Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда

				НоваяЗаписьОПредшественнике = Форма.Объект.ПредшественникиЭтапов.Добавить();
				НоваяЗаписьОПредшественнике.ИдентификаторПоследователя = РабочийЭтап.ИдентификаторЭтапа;
				НоваяЗаписьОПредшественнике.ИдентификаторПредшественника = УникальныйИдентификаторПустой();
				
			// Если все действия выполняются по очереди последовательно, каждый этап является предшественником
			//	следующего.
			ИначеЕсли Форма.Объект.ВариантМаршрутизации
				= Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда

				КоличествоЭтапов = Форма.Объект.Этапы.Количество();
				НоваяЗаписьОПредшественнике = Форма.Объект.ПредшественникиЭтапов.Добавить();
				НоваяЗаписьОПредшественнике.ИдентификаторПоследователя = РабочийЭтап.ИдентификаторЭтапа;
				НоваяЗаписьОПредшественнике.ИдентификаторПредшественника = Форма.Объект.Этапы[КоличествоЭтапов
					- 2].ИдентификаторЭтапа;
				НоваяЗаписьОПредшественнике.УсловиеРассмотрения = Перечисления.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения;
					
			// Если в комплексном процессе используется смешанная маршрутизация, то в предшественники
			// записывается действие, расположенной в таблице действий перед добавленным действием.
			Иначе
				КоличествоЭтапов = Форма.Объект.Этапы.Количество();
				НоваяЗаписьОПредшественнике = Форма.Объект.ПредшественникиЭтапов.Добавить();
				НоваяЗаписьОПредшественнике.ИдентификаторПредшественника = Форма.Объект.Этапы[КоличествоЭтапов
					- 2].ИдентификаторЭтапа;
				НоваяЗаписьОПредшественнике.ИдентификаторПоследователя = РабочийЭтап.ИдентификаторЭтапа;
				НоваяЗаписьОПредшественнике.УсловиеРассмотрения = Перечисления.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения;

			КонецЕсли;
		КонецЕсли;
		
		// Установка текущей строки списка действий на только что добавленную настройку
		ИндексЭтапа = Форма.Объект.Этапы.Индекс(РабочийЭтап);
		Форма.Элементы.Этапы.ТекущаяСтрока = ИндексЭтапа;
	КонецЕсли;

	Если РабочийЭтап = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Шаблон.ВладелецШаблона) Тогда
		ШаблонДляВставки = Шаблон.ПолучитьОбъект().Скопировать();
		ШаблонДляВставки.ВладелецШаблона = ПараметрыОповещения.ВладелецШаблона;
		РабочийШаблон = ШаблонДляВставки.Ссылка;
	Иначе
		РабочийШаблон = Шаблон;
	КонецЕсли;

	РабочийЭтап.ШаблонБизнесПроцесса = РабочийШаблон;

	Если РабочийШаблон.ВладелецШаблона.Важность = Перечисления.ВариантыВажностиОбъектов.Высокая
		Или РабочийШаблон.ВладелецШаблона.Важность = Перечисления.ВариантыВажностиОбъектов.Низкая Тогда
		ШаблонДляВставкиОбъект = РабочийЭтап.ШаблонБизнесПроцесса.ПолучитьОбъект();
		ШаблонДляВставкиОбъект.Важность = РабочийШаблон.ВладелецШаблона.Важность;
		ШаблонДляВставкиОбъект.Записать();
	КонецЕсли;

	Предметы = Неопределено;
	ПараметрыОповещения.Свойство("Предметы", Предметы);

	ОбновитьПредметыПоНастроенномуДействию(
		Форма, РабочийЭтап.ШаблонБизнесПроцесса, Предметы, РабочийЭтап.ИдентификаторЭтапа);

	Форма.Модифицированность = Истина;
	ЗаполнитьВычисляемыеПоляЭтапов(Форма);
	Возврат РабочийЭтап.ИдентификаторЭтапа;

КонецФункции

// Заполняет вычисляемые текстовые поля списка действий комплексного процесса на форме
// Параметры:
//	Форма - форма комплексного процесса или шаблона комплексного процесса
Процедура ЗаполнитьВычисляемыеПоляЭтапов(Форма, РассчитыватьСрок = Истина) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Для Каждого РабочийЭтап Из Форма.Объект.Этапы Цикл

		РабочийШаблон = РабочийЭтап.ШаблонБизнесПроцесса;

		Если Не ЗначениеЗаполнено(РабочийШаблон) Тогда
			Продолжить;
		КонецЕсли;

		МенеджерШаблона = ОбщегоНазначения.МенеджерОбъектаПоСсылке(РабочийШаблон);
		РеквизитыШаблона = МенеджерШаблона.РеквизитыЭтапаДляВычисляемыхПолей(РабочийШаблон);

		ИмяТипа = "";
		Попытка
			ИмяПроцесса = МенеджерШаблона.ИмяПроцесса(РабочийШаблон);
			ИмяТипа = МенеджерШаблона.СинонимПроцесса(ИмяПроцесса, РеквизитыШаблона) + ": ";

		Исключение
			//в модуле менеджера процесса не определена функция ИмяПроцесса()
		КонецПопытки;

		РабочийЭтап.ЗадачаЭтапа = ИмяТипа + РеквизитыШаблона.НаименованиеБизнесПроцесса;

		РабочийЭтап.ИсходныйШаблон = РеквизитыШаблона.ИсходныйШаблон;

		Если РеквизитыШаблона.Свойство("Описание") Тогда
			РабочийЭтап.ОписаниеДействия = РеквизитыШаблона.Описание;
			РабочийЭтап.ЕстьОписание = СтрДлина(РабочийЭтап.ОписаниеДействия) > 0;
		КонецЕсли;

		РабочийЭтап.Важность = 1;
		Если РеквизитыШаблона.Свойство("Важность") Тогда
			Если РеквизитыШаблона.Важность = Перечисления.ВариантыВажностиОбъектов.Высокая Тогда
				РабочийЭтап.Важность = 2;
			ИначеЕсли РеквизитыШаблона.Важность = Перечисления.ВариантыВажностиОбъектов.Обычная Тогда
				РабочийЭтап.Важность = 1;
			ИначеЕсли РеквизитыШаблона.Важность = Перечисления.ВариантыВажностиОбъектов.Низкая Тогда
				РабочийЭтап.Важность = 0;
			КонецЕсли;
		КонецЕсли;

		ТипОбъекта = ТипЗнч(Форма.Объект.Ссылка);

		РабочийЭтап.ИсполнителиЭтапаСтрокой = МенеджерШаблона.ПолучитьСтроковоеПредставлениеИсполнителей(
			РеквизитыШаблона);

		Если ТипОбъекта = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
			РабочийЭтап.ИсполнителиПредставление = РабочийЭтап.ИсполнителиЭтапаСтрокой;
		КонецЕсли;
		Если ТипОбъекта = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") И ЗначениеЗаполнено(
			РабочийЭтап.ЗапущенныйБизнесПроцесс) И Не РабочийЭтап.ЗадачаВыполнена Тогда

			ТипЗапущенныйБизнесПроцесс = ТипЗнч(РабочийЭтап.ЗапущенныйБизнесПроцесс);

			Если ТипЗапущенныйБизнесПроцесс <> Тип("БизнесПроцессСсылка.КомплексныйПроцесс")
				 Тогда

				МассивЗадач = РаботаСБизнесПроцессами.ПолучитьМассивЗадачПоБизнесПроцессу(
					РабочийЭтап.ЗапущенныйБизнесПроцесс, Истина);

				РабочийЭтап.ИсполнителиПредставление = "";
				Для Каждого Задача Из МассивЗадач Цикл

					РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
						Задача.Ссылка, "Исполнитель, РольИсполнителя");

					Если ЗначениеЗаполнено(РеквизитыЗадачи.Исполнитель) Тогда
						РабочийЭтап.ИсполнителиПредставление = РабочийЭтап.ИсполнителиПредставление
							+ Строка(РеквизитыЗадачи.Исполнитель) + "; ";
					ИначеЕсли ЗначениеЗаполнено(РеквизитыЗадачи.РольИсполнителя) Тогда
						РабочийЭтап.ИсполнителиПредставление = РабочийЭтап.ИсполнителиПредставление
							+ Строка(РеквизитыЗадачи.РольИсполнителя) + "; ";
					КонецЕсли;
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	ВариантМаршрутизацииПриИзменении(Форма.Объект, Форма.ЭтапыКУдалению);

КонецПроцедуры

// Выполняет удаление этапа в процессе или шаблоне процесса
// Параметры:
//	Форма - форма, на которой выполняется удаление
//	НаименованиеЗадачи - наименование задачи удаляемого этапа
//	ИдентификаторЭтапа - уникальный идентификатор удаляемого этапа
// Возвращает:
//	Истина - удаление выполнено
//	Ложь - удаление не выполнено
Функция УдалитьЭтап(Форма, НаименованиеЗадачи, ИдентификаторЭтапа) Экспорт

	СтрокиКУдалению = Форма.Объект.ПредметыЗадач.НайтиСтроки(Новый Структура("ИдентификаторЭтапа",
		ИдентификаторЭтапа));
	Для Каждого Строка Из СтрокиКУдалению Цикл
		Форма.Объект.ПредметыЗадач.Удалить(Строка);
	КонецЦикла;
	СтрокиКУдалению = Форма.ДействияПроцесса.НайтиСтроки(Новый Структура("ИдентификаторЭтапа",
		ИдентификаторЭтапа));
	Для Каждого Строка Из СтрокиКУдалению Цикл
		Форма.ДействияПроцесса.Удалить(Строка);
	КонецЦикла;

	Если Форма.Элементы.Найти("ТочкиМаршрута") <> Неопределено Тогда
		ТочкиМаршрута = Форма.ТочкиМаршрута.ПолучитьЭлементы();
		СтрокиКУдалению = Новый Массив;
		Для Каждого Строка Из ТочкиМаршрута Цикл
			Если Строка.ИдентификаторЭтапа = ИдентификаторЭтапа Тогда
				СтрокиКУдалению.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Строка Из СтрокиКУдалению Цикл
			ТочкиМаршрута.Удалить(Строка);
		КонецЦикла;
	КонецЕсли;

	Для Каждого Этап Из Форма.Объект.Этапы Цикл
		Если Этап.ИдентификаторЭтапа = ИдентификаторЭтапа Тогда
			УдалитьВсехПредшественниковЭтапа(Форма.Объект, ИдентификаторЭтапа);
			Пока ЭтапЕстьСредиПредшественников(Форма.Объект, ИдентификаторЭтапа) Цикл
				Для Каждого Предшественник Из Форма.Объект.ПредшественникиЭтапов Цикл
					Если Предшественник.ИдентификаторПредшественника = ИдентификаторЭтапа Тогда
						Форма.Объект.ПредшественникиЭтапов.Удалить(Предшественник);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			//Удаление шаблона бизнес-процесса
			РаботаСКомплекснымиБизнесПроцессамиСервер.УдалитьШаблонДействияЭтапаПроцесса(
				Этап.ШаблонБизнесПроцесса);
			Форма.Объект.Этапы.Удалить(Этап);
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

КонецФункции

#КонецОбласти

// Возвращает наименование шаблона комплексного процесса по умолчанию.
// 
// Возвращаемое значение:
//  Строка
//  
Функция НаименованиеШаблонаПроцессаПоУмолчанию() Экспорт
	
	Возврат НСтр("ru = 'По умолчанию'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Обработчик подписки на события ЗадачаКомплексногоПроцессаПриВыполнении
//
Процедура ЗадачаКомплексногоПроцессаПриВыполнении(Источник, Отказ) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Если Источник.ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не БизнесПроцессы.КомплексныйПроцесс.ЭтаСлужебнаяЗадачаПроцесса(Источник) Тогда
		Возврат;
	КонецЕсли;  
	
	Если МаршрутизацияПроцессаПриВыполненииЗадачиОтключена(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ТочкиМаршрута = БизнесПроцессы.КомплексныйПроцесс.ТочкиМаршрута;
	
	Если Источник.ТочкаМаршрута = ТочкиМаршрута.ВыполнитьДействияПроцессаПоСхеме Тогда
		
		Если Не ОбработкаОчередиЗаданийСервер.ОбработатьМаршрутизациюКомплексногоПроцессаПослеВыполненияЗадачи(
			Источник) Тогда
		
			ПродолжитьВыполнениеПроцессаПослеВыполненияСлужебнойЗадачи(Источник.Ссылка);
		КонецЕсли;
		
	ИначеЕсли Источник.ТочкаМаршрута = ТочкиМаршрута.ВложенныйПроцесс Тогда
		
		// Получим дочерние процессы.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДочерниеБизнесПроцессы.ДочернийПроцесс
		|ИЗ
		|	РегистрСведений.ДочерниеБизнесПроцессы КАК ДочерниеБизнесПроцессы
		|ГДЕ
		|	ДочерниеБизнесПроцессы.СвязующаяЗадача = &СвязующаяЗадача";
		Запрос.УстановитьПараметр("СвязующаяЗадача", Источник.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		// Если нет дочерних процессов выходим из процедуры.
		Если Не Выборка.Следующий() Тогда
			Возврат;
		КонецЕсли;
		
		Если Не ОбработкаОчередиЗаданийСервер.ОбработатьМаршрутизациюКомплексногоПроцессаПослеВыполненияВложенного(
			Выборка.ДочернийПроцесс, Источник) Тогда
	
			ПродолжитьВыполнениеКомплексногоПроцессаПослеВыполненияВложенного(
				Источник.БизнесПроцесс, Выборка.ДочернийПроцесс);
	
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Помещает в доп. параметры служебной задачи признак отключения маршрутизации процесса
// при ее выполнении. 
// 
// Параметры:
//  Задача - ЗадачаОбъект.ЗадачаИсполнителя
//
Процедура ОтключитьМаршрутизациюПроцессаПриВыполненииЗадачи(Задача) Экспорт
	
	Задача.ДополнительныеСвойства.Вставить("НеВыполнятьМаршрутизациюПроцесса", Истина);
	
КонецПроцедуры

// Возвращает признак отключения маршрутизации при выполнении задачи.
// 
// Параметры:
// 	Задача - ЗадачаОбъект.ЗадачаИсполнителя
// 	
// Возвращаемое значение:
// 	Булево
//
Функция МаршрутизацияПроцессаПриВыполненииЗадачиОтключена(Задача) Экспорт
	
	Если Задача.ДополнительныеСвойства.Свойство("НеВыполнятьМаршрутизациюПроцесса")
		И Задача.ДополнительныеСвойства.НеВыполнятьМаршрутизациюПроцесса Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Продолжает выполнение комплексного процесса после выполнения служебной задачи.
// 
// Параметры:
// 	Задача - ЗадачаСсылка.ЗадачаИсполнителя
//
Процедура ПродолжитьВыполнениеПроцессаПослеВыполненияСлужебнойЗадачи(Задача) Экспорт
	
	Процесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "БизнесПроцесс");
	ПроцессОбъект = Процесс.ПолучитьОбъект();
	
	АвторКомплексногоПроцесса = РаботаСБизнесПроцессами.АвторПроцессаЗадачи(
		ПроцессОбъект);
	
	// Проверка прав участников процесса на предметы
	МультипредметностьКОРП.ПроверитьПраваУчастниковПроцессаИОтправитьУведомления(
		ПроцессОбъект, АвторКомплексногоПроцесса);
	
	ПроцессОбъект.ПродолжитьВыполнениеПроцессаПоСхемеПослеВыполненияЗадачи(Задача);
	
КонецПроцедуры

// Продолжает выполнение комплексного процесса после выполнения вложенного процесса.
// 
// Параметры:
// 	КомплексныйПроцесс - БизнесПроцессСсылка.КомплексныйПроцесс
// 	ВложенныйПроцесс - БизнесПроцессСсылка
//
Процедура ПродолжитьВыполнениеКомплексногоПроцессаПослеВыполненияВложенного(КомплексныйПроцесс,
	ВложенныйПроцесс) Экспорт

	КомплексныйПроцессОбъект = КомплексныйПроцесс.ПолучитьОбъект();

	АвторКомплексногоПроцесса = РаботаСБизнесПроцессами.АвторПроцессаЗадачи(
		КомплексныйПроцессОбъект);
	
	// Проверка прав участников процесса на предметы
	МультипредметностьКОРП.ПроверитьПраваУчастниковПроцессаИОтправитьУведомления(
		КомплексныйПроцессОбъект, АвторКомплексногоПроцесса);
	
	НовыеПроцессы = Новый Массив;
		КомплексныйПроцессОбъект.СтартоватьНовыеДействия(
			НовыеПроцессы,
			БизнесПроцессы.КомплексныйПроцесс.ТочкиМаршрута.ВложенныйПроцесс,
			Истина,
			ВложенныйПроцесс);
	
КонецПроцедуры

// Стандартный обработчик печати
Функция ПечатьКарточки(МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	// Создаем табличный документ и устанавливаем имя параметров печати
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_КарточкаКомплексногоПроцесса";
	// Запомним номер строки с которой начали выводить текущий документ
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

	Макет = ПолучитьОбщийМакет("КарточкаКомплексногоПроцесса");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьОбщаяШапка = Макет.ПолучитьОбласть("ОбщаяШапка");
	ОбластьДанныеПроцесса = Макет.ПолучитьОбласть("ДанныеПроцесса");
	ОбластьЭтапыШапка = Макет.ПолучитьОбласть("ЭтапыШапка");
	ОбластьЭтапыСтрока = Макет.ПолучитьОбласть("ЭтапыСтрока");
	ОбластьДействияСхемыШапка = Макет.ПолучитьОбласть("ДействияСхемыШапка");
	ОбластьДействияСхемыСтрока = Макет.ПолучитьОбласть("ДействияСхемыСтрока");
	ОбластьСхемаПроцессаШапка = Макет.ПолучитьОбласть("СхемаПроцессаШапка");
	ОбъектПечати = МассивОбъектов;

	ОбластьЗаголовок.Параметры.Заголовок = ОбъектПечати.Наименование;
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);

	ОбластьОбщаяШапка.Параметры.НаименованиеЗадачи = ОбъектПечати.Наименование;
	ОбластьОбщаяШапка.Параметры.Описание = ОбъектПечати.Описание;
	ОбластьОбщаяШапка.Параметры.Контролер = ОбъектПечати.Контролер;
	ОбластьОбщаяШапка.Параметры.Важность = ОбъектПечати.Важность;
	ТабличныйДокумент.Вывести(ОбластьОбщаяШапка);

	Если ТипЗнч(ОбъектПечати) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		ОбластьДанныеПроцесса.Параметры.ДатаПроцесса = ОбъектПечати.Дата;
		ОбластьДанныеПроцесса.Параметры.Запущен = ОбъектПечати.Стартован;
		ОбластьДанныеПроцесса.Параметры.Завершен  = ОбъектПечати.Завершен;
		ОбластьДанныеПроцесса.Параметры.ДатаЗавершения = ОбъектПечати.ДатаЗавершения;
		ТабличныйДокумент.Вывести(ОбластьДанныеПроцесса);
	КонецЕсли;

	Если ЗначениеЗаполнено(ОбъектПечати.Схема) Тогда
		
		// Получение данных.
		УстановитьПривилегированныйРежим(Истина);
		
		ДанныеСхемы = Справочники.СхемыПроцессов.ДанныеСхемыПроцесса(ОбъектПечати.Схема);
			
		ДанныеПараметров =
			Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(
			Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыПоСхеме(ОбъектПечати.Схема));
		
		ПроцессыЭлементов = 
			РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураПроцессовЭлементов();
		ТекущиеЭлементы = 
			РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураТекущихЭлементовСхемы();
		ПройденныеЭлементы =
			РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураПройденныхЭлементовСхемы();
				
		Если ТипЗнч(ОбъектПечати) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
			ПроцессыЭлементов =
				РаботаСКомплекснымиБизнесПроцессамиСервер.ПроцессыЭлементовСхемыПоКомплексномуПроцессу(
					ОбъектПечати);
			
			ТекущиеЭлементы =
				РаботаСКомплекснымиБизнесПроцессамиСервер.ТекущиеЭлементыСхемыВПроцессе(
					ОбъектПечати);
				
			ПройденныеЭлементы = 
				РаботаСКомплекснымиБизнесПроцессамиСервер.ПройденныеЭлементыСхемыВПроцессе(
					ОбъектПечати);
				
		КонецЕсли;
		
		ТипыНастроек = Метаданные.ОпределяемыеТипы.ШаблонДействияКомплексногоПроцесса.Тип;
		ДействияИВложенныеПроцессы = Новый Массив;		
		Для Каждого ИмяЭлементаИНастройка Из ДанныеПараметров.НастройкиЭлементов Цикл
			ИмяЭлемента = ИмяЭлементаИНастройка.Ключ;
			НастройкаЭлемента = ИмяЭлементаИНастройка.Значение;
			
			Если Не ТипыНастроек.СодержитТип(ТипЗнч(НастройкаЭлемента))
				Или Не ЗначениеЗаполнено(НастройкаЭлемента) Тогда
				
				Продолжить;
			КонецЕсли;
					 
			ДействияИВложенныеПроцессы.Добавить(НастройкаЭлемента);
			
			ПроцессЭлемента = ПроцессыЭлементов[ИмяЭлемента];
			Если ЗначениеЗаполнено(ПроцессЭлемента) Тогда
				ДействияИВложенныеПроцессы.Добавить(ПроцессЭлемента);
			КонецЕсли;
		КонецЦикла;
		КэшДанныхДействий =
			РаботаСКомплекснымиБизнесПроцессамиСервер.КэшДанныхДействий(ДействияИВложенныеПроцессы);
		
		СрокиЭлементов =
			РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураСроковЭлементовСхемы();
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЗаполнитьСрокиЭлементовСхемы(
			СрокиЭлементов,
			ДанныеПараметров.НастройкиЭлементов,
			ПроцессыЭлементов,
			КэшДанныхДействий,
			РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураПроцессовЭлементовДляПрерывания(),
			СрокиЭлементов);
		
		ПроцессыКПрерыванию = 
			РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураПроцессовЭлементовДляПрерывания();
		
		КомплексныйПроцесс = Неопределено;
		Если ТипЗнч(ОбъектПечати) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов") Тогда

			ВладелецВерхнегоУровня = 
				РаботаСКомплекснымиБизнесПроцессамиСервер.ВладелецВерхнегоУровня(
				ОбъектПечати);

			Если ЗначениеЗаполнено(ВладелецВерхнегоУровня) И ТипЗнч(ВладелецВерхнегоУровня) = Тип(
				"БизнесПроцессСсылка.КомплексныйПроцесс") Тогда

				КомплексныйПроцесс = ВладелецВерхнегоУровня;

			КонецЕсли;
		Иначе
			КомплексныйПроцесс = ОбъектПечати;
		КонецЕсли;
		Если ЗначениеЗаполнено(КомплексныйПроцесс) Тогда

			РеквизитыКомплексногоПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				КомплексныйПроцесс, "Стартован, Шаблон");

			Если Не РеквизитыКомплексногоПроцесса.Стартован И ЗначениеЗаполнено(
				РеквизитыКомплексногоПроцесса.Шаблон) Тогда

				ПоказатьТочныеСроки = Ложь;
				ПоказатьОтносительныеСроки = Истина;
			Иначе
				ПоказатьТочныеСроки = Истина;
				ПоказатьОтносительныеСроки = Ложь;
			КонецЕсли;

		Иначе
			ПоказатьТочныеСроки = Ложь;
			ПоказатьОтносительныеСроки = Истина;
		КонецЕсли;
		
		ИспользоватьДатуИВремяВСрокахЗадач = 
			ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
		
		// Формирование графической схемы.
		
		ГрафическаяСхема = ДанныеСхемы.Схема;
		
		ПараметрыОбновления = 
			РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ПараметрыОбновленияПредставленияСхемы();
		
		ПараметрыОбновления.ИспользоватьВремяВСрокахЗадач = ИспользоватьДатуИВремяВСрокахЗадач;
			
		ПараметрыОбновления.ПоказатьТочныеСроки = ПоказатьТочныеСроки;
		ПараметрыОбновления.ПоказатьОтносительныеСроки = ПоказатьОтносительныеСроки;
		
		ПараметрыОбновления.НастройкиЭлементов = ДанныеПараметров.НастройкиЭлементов;
		ПараметрыОбновления.ПроцессыЭлементов = ПроцессыЭлементов;
		ПараметрыОбновления.КэшДанныхДействий = КэшДанныхДействий;
		
		ПараметрыОбновления.ТипыЭлементов = 
			СхемыПроцессовКлиентСервер.ТипыВсехЭлементовПоДаннымСхемы(ДанныеСхемы);
			
		ПараметрыОбновления.СрокиЭлементов = СрокиЭлементов;
		ПараметрыОбновления.ТекущиеЭлементы = ТекущиеЭлементы;
		ПараметрыОбновления.ПройденныеЭлементы = ПройденныеЭлементы;
		
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ОбновитьПредставлениеСхемыДляПросмотра(
			ГрафическаяСхема,
			ПараметрыОбновления);
		
		ГрафическаяСхема.ИспользоватьСетку = Ложь;
		
		// Формируем таблицу подпроцессов
		
		Подпроцессы = Новый ТаблицаЗначений();
		Подпроцессы.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));		
		Подпроцессы.Колонки.Добавить("Исполнители", Новый ОписаниеТипов("Строка"));
		Подпроцессы.Колонки.Добавить("Срок", Новый ОписаниеТипов("Строка"));
		Подпроцессы.Колонки.Добавить("ПорядокСортировки", Новый ОписаниеТипов("Число"));
		
		Если ПоказатьТочныеСроки Или ПоказатьОтносительныеСроки Тогда
			ИсключенныеСвойстваСрока = "";
			Если Не ПоказатьТочныеСроки Тогда
				ИсключенныеСвойстваСрока = "СрокИсполненияПроцесса";
			КонецЕсли;
			Если Не ПоказатьОтносительныеСроки Тогда
				ИсключенныеСвойстваСрока = ИсключенныеСвойстваСрока
					+ "СрокИсполненияПроцессаДни,
					|СрокИсполненияПроцессаЧасы,
					|СрокИсполненияПроцессаМинуты";
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого ИмяЭлементаИНастройка Из ДанныеПараметров.НастройкиЭлементов Цикл
		 	
		 	ИмяЭлемента = ИмяЭлементаИНастройка.Ключ;
			НастройкаЭлемента = ИмяЭлементаИНастройка.Значение;
			
			Если Не ТипыНастроек.СодержитТип(ТипЗнч(НастройкаЭлемента))
				Или Не ЗначениеЗаполнено(НастройкаЭлемента) Тогда
				
				Продолжить;
			КонецЕсли;
			
			ПроцессЭлемента = ПроцессыЭлементов[ИмяЭлемента];
					
			ЭлементСхемыТекущий = 
				РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭлементСхемыТекущий(
				ТекущиеЭлементы, ИмяЭлемента);
				
			 СостояниеПроцесса = Перечисления.СостоянияБизнесПроцессов.ПустаяСсылка();
			 Если ПроцессЭлемента <> Неопределено Тогда
			 	ДанныеПодпроцесса = КэшДанныхДействий[ПроцессЭлемента];
			 	СостояниеПроцесса = ДанныеПодпроцесса.СостояниеПроцесса;
			 КонецЕсли;
			 
			 Подпроцесс =
				РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.НастройкаИлиПроцессЭлементаСхемы(
				НастройкаЭлемента,
				ПроцессЭлемента,
				ЭлементСхемыТекущий,
				СостояниеПроцесса,
				ПроцессыКПрерыванию);
			
			ДанныеПодпроцесса = КэшДанныхДействий[Подпроцесс];
			
			СтрокаТаблицы = Подпроцессы.Добавить();
			СтрокаТаблицы.Описание = ДанныеПодпроцесса.Описание;
			СтрокаТаблицы.Исполнители = ДанныеПодпроцесса.Исполнители;
								
			СтруктураСроков = Новый Структура;
			СтруктураСроков.Вставить("СрокИсполненияПроцесса", Дата(1, 1, 1));
			СтруктураСроков.Вставить("СрокИсполненияПроцессаДни", 0);
			СтруктураСроков.Вставить("СрокИсполненияПроцессаЧасы", 0);
			СтруктураСроков.Вставить("СрокИсполненияПроцессаМинуты", 0);
			
			СрокПодпроцесса = СрокиЭлементов[ИмяЭлемента];
			
			ЗаполнитьЗначенияСвойств(СтруктураСроков, СрокПодпроцесса,, ИсключенныеСвойстваСрока);

			Если ЗначениеЗаполнено(СтруктураСроков.СрокИсполненияПроцесса)
				Или ЗначениеЗаполнено(СтруктураСроков.СрокИсполненияПроцессаДни)
				Или ЗначениеЗаполнено(СтруктураСроков.СрокИсполненияПроцессаЧасы)
				Или ЗначениеЗаполнено(СтруктураСроков.СрокИсполненияПроцессаМинуты) Тогда

				СрокиИсполненияПроцессовКлиентСервер.ЗаполнитьПредставлениеСрокаИсполненияПроцесса(
					СтрокаТаблицы.Срок,
					СтруктураСроков.СрокИсполненияПроцесса,
					СтруктураСроков.СрокИсполненияПроцессаДни,
					СтруктураСроков.СрокИсполненияПроцессаЧасы,
					СтруктураСроков.СрокИсполненияПроцессаМинуты,
					ИспользоватьДатуИВремяВСрокахЗадач);
			КонецЕсли;
					
			СтрокаТаблицы.ПорядокСортировки = 
				ДанныеПараметров.ПорядокСортировкиНастроекЭлементов[ИмяЭлемента];
					
		КонецЦикла;
		
		Подпроцессы.Сортировать("ПорядокСортировки Возр");
		
		// Вывод в табличный документ
		
		ТабличныйДокумент.Вывести(ОбластьДействияСхемыШапка);

		НомерСтроки = 1;
		
		Для Каждого Подпроцесс Из Подпроцессы Цикл
			
			ОбластьДействияСхемыСтрока.Параметры.Номер = НомерСтроки;
			
			ОбластьДействияСхемыСтрока.Параметры.ОписаниеДействия = Подпроцесс.Описание;
			ОбластьДействияСхемыСтрока.Параметры.ИсполнителиДействия = Подпроцесс.Исполнители;
			ОбластьДействияСхемыСтрока.Параметры.Срок = Подпроцесс.Срок;

			ТабличныйДокумент.Вывести(ОбластьДействияСхемыСтрока);

			НомерСтроки = НомерСтроки + 1;

		КонецЦикла;

		ТабличныйДокумент.Вывести(ОбластьСхемаПроцессаШапка);
		КартинкаГрафическойСхемы = ГрафическаяСхема.ПолучитьКартинку( , , ФорматКартинки.PNG);
		ТабличныйДокументСКартинкой = Новый ТабличныйДокумент;
		Рисунок = ТабличныйДокументСКартинкой.Рисунки.Добавить(
			ТипРисункаТабличногоДокумента.Картинка);
		Рисунок.Картинка = КартинкаГрафическойСхемы;
		Рисунок.РазмерКартинки = РазмерКартинки.АвтоРазмер;
		Рисунок.Лево = 5;
		Рисунок.Ширина = 655;
		Рисунок.Высота = 100;
		Рисунок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
		ТабличныйДокумент.Вывести(ТабличныйДокументСКартинкой);
		
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе

		ТабличныйДокумент.Вывести(ОбластьЭтапыШапка);

		Для Каждого Этап Из ОбъектПечати.Этапы Цикл

			СтрокаСрок = "";
			Попытка
				ДлительностьЭтапа = СрокиИсполненияПроцессов.ДлительностьИсполненияПроцесса(
					Этап.ШаблонБизнесПроцесса, Этап.ШаблонБизнесПроцесса.СрокОтложенногоСтарта);

				СтрокаСрок = СрокиИсполненияПроцессовКлиентСервер.ПредставлениеДлительности(
					ДлительностьЭтапа.СрокИсполненияПроцессаДни,
					ДлительностьЭтапа.СрокИсполненияПроцессаЧасы,
					ДлительностьЭтапа.СрокИсполненияПроцессаМинуты);
			Исключение
				СтрокаСрок = "";
			КонецПопытки;
			ОбластьЭтапыСтрока.Параметры.Номер = Этап.НомерСтроки;
			Если Найти(ОбластьЭтапыСтрока.Параметры.ИмяЭтапа, "-") > 0 И СтрДлина(
				ОбластьЭтапыСтрока.Параметры.ИмяЭтапа) = 36 Тогда
				ОбластьЭтапыСтрока.Параметры.ИмяЭтапа = Этап.ШаблонБизнесПроцесса.Метаданные().Синоним;
			Иначе
				ОбластьЭтапыСтрока.Параметры.ИмяЭтапа = Этап.ШаблонБизнесПроцесса.Наименование;
			КонецЕсли;
			Если Этап.ШаблонБизнесПроцесса.Метаданные().Реквизиты.Найти("Описание") <> Неопределено Тогда
				ОбластьЭтапыСтрока.Параметры.ОписаниеЭтапа = Этап.ШаблонБизнесПроцесса.Описание;
			КонецЕсли;
			ОбластьЭтапыСтрока.Параметры.Срок = СтрокаСрок;
			ОбластьЭтапыСтрока.Параметры.ИсполнителиЭтапа = Этап.ИсполнителиЭтапаСтрокой;
			ОбластьЭтапыСтрока.Параметры.ПредшественникиЭтапа = Этап.ПредшественникиЭтапаСтрокой;
			ТабличныйДокумент.Вывести(ОбластьЭтапыСтрока);
		КонецЦикла;

	КонецЕсли;
	
	// В табличном документе зададим имя области в которую был 
	// выведен объект. Нужно для возможности печати по-комплектно.
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало,
		ОбъектыПечати, ОбъектПечати);

	Возврат ТабличныйДокумент;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СхемаПроцесса

#Область НастройкиЭлементов

#Область УсловияСхемы

// Вычисляет значения элементов отбора условия схемы при комплексном процессе.
// Рекурсивная процедура.
//
// Параметры:
//  ЭлементыОтбора - КоллекцияЭлементовОтбораКомпоновкиДанных - элементы отбора условия.
// 	Процесс - БизнесПроцессОбъект.КомплексныйПроцесс
// 	ПроцессыЭлементов - Соответствие
// 	 * Ключ - Строка - имя действия или вложенного процесса в схеме.
// 	 * Значение - ОпределяемыйТип.ДействиеКомплексногоПроцесса
// 	Предметы - Соответствие
// 	 * Ключ - СправочникСсылка.ИменаПредметов
// 	 * Значение - СправочникСсылка.ТемыОбсуждений,
// 	              СправочникСсылка.Контрагенты,
// 	              СправочникСсылка.Проекты,
// 	              СправочникСсылка.ПротоколыМероприятий,
// 	              ДокументСсылка.ВходящееПисьмо,
// 	              ДокументСсылка.ИсходящееПисьмо,
// 	              СправочникСсылка.Файлы,
// 	              ДокументСсылка.Бронь,
// 	              СправочникСсылка.ДокументыПредприятия,
// 	              СправочникСсылка.СообщенияОбсуждений,
// 	              СправочникСсылка.Мероприятия,
// 	              СправочникСсылка.ПроектныеЗадачи
//
Процедура ВычислитьЗначенияЭлементовОтбора(ЭлементыОтбора, Процесс, ПроцессыЭлементов, Предметы)
	
	ТипЭлементОтбораКомпоновкиДанных = Тип("ЭлементОтбораКомпоновкиДанных");
	ТипГруппаЭлементовОтбораКомпоновкиДанных = Тип("ГруппаЭлементовОтбораКомпоновкиДанных");
	
	ПолеУсловиеПроверкаПредмета = Новый ПолеКомпоновкиДанных(
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ИмяПоляУсловияПроверкаПредмета());

	ПолеУсловиеРезультатВыполненияДействия = Новый ПолеКомпоновкиДанных(
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ИмяПоляУсловияРезультатВыполненияДействия());
	
	ПолеУсловиеСкрипт = Новый ПолеКомпоновкиДанных(
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ИмяПоляУсловияСкрипт());
		
	ПолеДляПроверки = Новый ПолеКомпоновкиДанных(
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ИмяПоляДляПроверкиУсловияСхемы());
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		ТипЭлементаОтбора = ТипЗнч(ЭлементОтбора);
		
		Если ТипЭлементаОтбора = ТипЭлементОтбораКомпоновкиДанных Тогда
			
			Результат = Ложь;
			
			Если ЭлементОтбора.ЛевоеЗначение = ПолеУсловиеПроверкаПредмета Тогда
				
				// Исходим из того, что правое значение отбора содержит структуру:
				// РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураУсловияПроверкаПредмета
				
				Если Не ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение)
					Или Не ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение.ИмяПредмета)
					Или Не ЗначениеЗаполнено(Предметы[ЭлементОтбора.ПравоеЗначение.ИмяПредмета])
					Или Не ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение.АлгоритмПроверки) Тогда
					
					ЭлементОтбора.Использование = Ложь;
					Продолжить;
				КонецЕсли;				
							
				Результат = 
					РаботаСАлгоритмамиПроверки.ПроверитьПрименимостьАлгоритмаПроверкиКОбъекту(
						Предметы[ЭлементОтбора.ПравоеЗначение.ИмяПредмета],
						ЭлементОтбора.ПравоеЗначение.АлгоритмПроверки);
								
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = ПолеУсловиеРезультатВыполненияДействия Тогда
			
				// Исходим из того, что правое значение отбора содержит структуру:
				// РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураУсловияРезультатВыполненияДействия
											
				Если Не ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение)
					Или Не ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение.ИмяДействия)
					Или Не ЗначениеЗаполнено(ПроцессыЭлементов[ЭлементОтбора.ПравоеЗначение.ИмяДействия])
					Или Не ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение.РезультатВыполнения) Тогда
					
					ЭлементОтбора.Использование = Ложь;
					Продолжить;
				КонецЕсли;
				
				ПроцессЭлемента = ПроцессыЭлементов[ЭлементОтбора.ПравоеЗначение.ИмяДействия];
				РеквизитыПроцесса = 
					ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
						ПроцессЭлемента, "Завершен, Стартован, Состояние, ПометкаУдаления");  
				
				Если РеквизитыПроцесса.Состояние <> Перечисления.СостоянияБизнесПроцессов.Активен 
					Или РеквизитыПроцесса.ПометкаУдаления
					Или Не РеквизитыПроцесса.Завершен
					Или Не РеквизитыПроцесса.Стартован Тогда
					
					ЭлементОтбора.Использование = Ложь;
					Продолжить;
				КонецЕсли;
				
				Если ЭлементОтбора.ПравоеЗначение.РезультатВыполнения = 
					РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.РезультатВыполненияДействияКомплексногоПроцессаЗавершено().Значение Тогда
					
					Результат = Истина;
				Иначе
					
					МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ПроцессЭлемента);
					
					Результат = 
						(МенеджерПроцесса.КонтекстныйРезультатВыполненияПроцесса(ПроцессЭлемента) =
						ЭлементОтбора.ПравоеЗначение.РезультатВыполнения);
				КонецЕсли;
			
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = ПолеУсловиеСкрипт Тогда
				
				// Исходим из того, что правое значение отбора содержит
				// СправочникСсылка.СкриптыСхемДляКомплексныхПроцессов
				
				Результат = Справочники.СкриптыУсловийСхемДляКомплексныхПроцессов.ПроверитьСкриптУсловия(
					ЭлементОтбора.ПравоеЗначение, Процесс);
							
			КонецЕсли;
			
			ЭлементОтбора.ЛевоеЗначение = ПолеДляПроверки;
			ЭлементОтбора.ПравоеЗначение = Результат;
			
		ИначеЕсли ТипЭлементаОтбора = ТипГруппаЭлементовОтбораКомпоновкиДанных Тогда
			ВычислитьЗначенияЭлементовОтбора(
				ЭлементОтбора.Элементы, Процесс, ПроцессыЭлементов, Предметы);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ТекущиеЭлементыСхемы

// Заполняет текущие элементы схемы в данных схемы, по процессу.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса с параметрами.
//  Процесс - БизнесПроцессОбъект.КомплексныйПроцесс
//
Процедура ЗаполнитьТекущиеЭлементыПоПроцессуВФорме(Форма, Процесс)
	
	Если ТипЗнч(Процесс.Ссылка) <> Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ДанныеПараметровСхемы.ТекущиеЭлементы.Очистить(); 
	
	Для Каждого СтрокаТаблицы Из Процесс.ТекущиеЭлементыСхемы Цикл
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ОтметитьЭлементСхемыТекущим(
			Форма.ДанныеПараметровСхемы.ТекущиеЭлементы,
			СтрокаТаблицы.ИмяЭлемента);
	КонецЦикла;
	
КонецПроцедуры

// Помещает текущие элементы в комплексный процесс из формы.
// 
// Параметры:
//  Процесс - БизнесПроцессОбъект.КомплексныйПроцесс
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса 
//
Процедура ПоместитьТекущиеЭлементыВПроцессИзФормы(Процесс, Форма)
	
	Если ТипЗнч(Процесс.Ссылка) <> Тип("БизнесПроцессСсылка.КомплексныйПроцесс")
		Или Не ЗначениеЗаполнено(Процесс.Ссылка) Тогда
		
		Возврат;
	КонецЕсли;
	
	Процесс.ТекущиеЭлементыСхемы.Очистить();
	
	Для Каждого КлючЗначение Из Форма.ДанныеПараметровСхемы.ТекущиеЭлементы Цикл
		СтрокаТаблицы = Процесс.ТекущиеЭлементыСхемы.Добавить();
		СтрокаТаблицы.ИмяЭлемента = КлючЗначение.Ключ;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПройденныеЭлементыСхемы

// Заполняет пройденные элементы схемы в данных схемы, по процессу.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса с параметрами.
//  Процесс - БизнесПроцессОбъект.КомплексныйПроцесс
//
Процедура ЗаполнитьПройденныеЭлементыПоПроцессуВФорме(Форма, Процесс)
	
	Если ТипЗнч(Процесс.Ссылка) <> Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ДанныеПараметровСхемы.ПройденныеЭлементы.Очистить(); 
	
	Для Каждого СтрокаТаблицы Из Процесс.ОтметкиПрохожденияСхемы Цикл
		Если СтрокаТаблицы.Пройден Тогда
			РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ОтметитьЭлементСхемыПройденным(
				Форма.ДанныеПараметровСхемы.ПройденныеЭлементы,
				СтрокаТаблицы.ИмяЭлемента);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Помещает текущие элементы в комплексный процесс из формы.
// 
// Параметры:
//  Процесс - БизнесПроцессОбъект.КомплексныйПроцесс
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса 
//
Процедура ПоместитьПройденныеЭлементыВПроцессИзФормы(Процесс, Форма)
	
	Если ТипЗнч(Процесс.Ссылка) <> Тип("БизнесПроцессСсылка.КомплексныйПроцесс")
		Или Не ЗначениеЗаполнено(Процесс.Ссылка) Тогда
		
		Возврат;
	КонецЕсли;
	
	Процесс.ОтметкиПрохожденияСхемы.Очистить();
	
	ВсеЭлементыСхемы = СхемыПроцессовКлиентСервер.ВсеЭлементыСхемы(Форма);
	Для Каждого ИмяЭлементаИТип Из ВсеЭлементыСхемы Цикл
		ИмяЭлемента = ИмяЭлементаИТип.Ключ;
				
		СтрокаТаблицы = Процесс.ОтметкиПрохожденияСхемы.Добавить();
		СтрокаТаблицы.ИмяЭлемента = ИмяЭлемента;
		СтрокаТаблицы.Пройден = 
			РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ОтметкаПройденДляЭлементаСхемыВФорме(
				ИмяЭлемента, Форма);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцессыЭлементовДляПрерывания

// Прерывает процессы элементов, отмеченные к прерыванию.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса. 
//
Процедура ПрерватьПроцессыОтмеченныеКПрерыванию(Форма)
	
	Если ТипЗнч(Форма.Объект.Ссылка) <> Тип("БизнесПроцессСсылка.КомплексныйПроцесс")
		Или Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
			
		Возврат;
	КонецЕсли;
	
	ПроцессыКПрерыванию = 
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ПроцессыЭлементовДляПрерывания(Форма);
		
	Для Каждого КлючЗначение Из ПроцессыКПрерыванию.Процессы Цикл
		
		ПроцессДляПрерывания = КлючЗначение.Ключ;
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПроцессДляПрерывания, "Ссылка, ВедущаяЗадача, Состояние, Завершен");
		Если РеквизитыПроцесса.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван
			Или РеквизитыПроцесса.Завершен Тогда
			
			Продолжить;
		КонецЕсли;
		
		Обработка = РегистрыСведений.ПроцессыОбработокОбъектов.ОбработкаПоПроцессу(ПроцессДляПрерывания);
		
		Если ЗначениеЗаполнено(Обработка) Тогда
			ОбработкиОбъектов.ПрерватьОбработку(Обработка, ПроцессыКПрерыванию.ПричинаПрерывания);
		Иначе
			БизнесПроцессыИЗадачиВызовСервера.ПрерватьБизнесПроцесс(
				ПроцессДляПрерывания, ПроцессыКПрерыванию.ПричинаПрерывания);
		КонецЕсли;
		
		ВедущаяЗадачаОбъект = РеквизитыПроцесса.ВедущаяЗадача.ПолучитьОбъект();
		ВедущаяЗадачаОбъект.Выполнена = Истина;
		РаботаСБизнесПроцессами.ЗаписатьЗадачу(ВедущаяЗадачаОбъект, "ПростаяЗапись");
		
		ПротоколированиеРаботыСотрудников.ЗаписатьПрерываниеБизнесПроцесса(ПроцессДляПрерывания);
		
	КонецЦикла;
	
	РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СброситьПометкиПрерыванияДляВсехПроцессовЭлементов(
		Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцессыЭлементовСхемы

// Заполняет процессы элементов в данных параметров схемы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса/шаблона.
//
Процедура ЗаполнитьПроцессыЭлементовСхемы(Форма)
	
	Если ТипЗнч(Форма.Объект.Ссылка) <> Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ДанныеПараметровСхемы.ПроцессыЭлементов =
		ПроцессыЭлементовСхемыПоКомплексномуПроцессу(Форма.Объект);
	
	Форма.ДанныеПараметровСхемы.ПроцессыЭлементовПриОткрытии = 
		ОбщегоНазначения.СкопироватьРекурсивно(Форма.ДанныеПараметровСхемы.ПроцессыЭлементов);
		
КонецПроцедуры

// Помещает список процессов элементов в комплексный процесс из формы.
// 
// Параметры:
//  Процесс - БизнесПроцессОбъект.КомплексныйПроцесс
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса 
//
Процедура ПоместитьПроцессыЭлементовСхемыВПроцессИзФормы(Процесс, Форма)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Процесс.Ссылка) <> Тип("БизнесПроцессСсылка.КомплексныйПроцесс")
		Или Не ЗначениеЗаполнено(Процесс.Ссылка) Тогда
		
		Возврат;
	КонецЕсли;
	
	// Процессы элементов в форме могут только удаляться, при удалении элементов.
	// Поэтому определяем удаленные процессы и исключаем соответствующие строки
	// из табличной части ЗадачиЭлементовСхемы.
	
	ПроцессыЭлементов = Форма.ДанныеПараметровСхемы.ПроцессыЭлементов;
	ПроцессыЭлементовПриОткрытии = Форма.ДанныеПараметровСхемы.ПроцессыЭлементовПриОткрытии;
	
	УдаленныеПроцессыЭлементов = Новый ТаблицаЗначений();
	УдаленныеПроцессыЭлементов.Колонки.Добавить("ИмяЭлемента", Новый ОписаниеТипов("Строка"));
	УдаленныеПроцессыЭлементов.Колонки.Добавить("Процесс",
		Метаданные.ОпределяемыеТипы.ДействиеКомплексногоПроцесса.Тип);
		
	Для Каждого КлючЗначение Из ПроцессыЭлементовПриОткрытии Цикл
		Если ПроцессыЭлементов[КлючЗначение.Ключ] = Неопределено Тогда
			СтрокаТаблицы = УдаленныеПроцессыЭлементов.Добавить();
			СтрокаТаблицы.ИмяЭлемента = КлючЗначение.Ключ;
			СтрокаТаблицы.Процесс = КлючЗначение.Значение;			
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаПроцессов.ИмяЭлемента КАК ИмяЭлемента,
		|	ТаблицаПроцессов.Процесс КАК Процесс
		|ПОМЕСТИТЬ ПроцессыЭлементов
		|ИЗ
		|	&УдаленныеПроцессыЭлементов КАК ТаблицаПроцессов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроцессыЭлементов.ИмяЭлемента КАК ИмяЭлемента,
		|	ДанныеБизнесПроцессов.ВедущаяЗадача КАК ЗадачаПроцесса
		|ИЗ
		|	ПроцессыЭлементов КАК ПроцессыЭлементов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ПО ПроцессыЭлементов.Процесс = ДанныеБизнесПроцессов.БизнесПроцесс";
	
	Запрос.УстановитьПараметр("УдаленныеПроцессыЭлементов", УдаленныеПроцессыЭлементов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаКУдалению = Процесс.ЗадачиЭлементовСхемы.Найти(
			Выборка.ЗадачаПроцесса, "ЗадачаПроцесса");
		
		Процесс.ЗадачиЭлементовСхемы.Удалить(СтрокаКУдалению);
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из УдаленныеПроцессыЭлементов Цикл
		Форма.ДанныеПараметровСхемы.ПроцессыЭлементовПриОткрытии.Удалить(СтрокаТаблицы.ИмяЭлемента);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФормыНастроекЭлементовСхемы

// Заполняет формы настроек и процессов в данных параметров схемы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса/шаблона.
//
Процедура ЗаполнитьФормыНастроекЭлементовСхемы(Форма)
	
	Форма.ДанныеПараметровСхемы.ФормыНастроекЭлементов.Очистить();
	
	ТипыПроцессов = Метаданные.ОпределяемыеТипы.ДействиеКомплексногоПроцесса.Тип.Типы();
	Для Каждого ТипПроцесса Из ТипыПроцессов Цикл
		Форма.ДанныеПараметровСхемы.ФормыНастроекЭлементов[ТипПроцесса] = 
			Метаданные.НайтиПоТипу(ТипПроцесса).ПолноеИмя() + ".ФормаОбъекта";		 
	КонецЦикла;

	ТипыНастроек = Метаданные.ОпределяемыеТипы.ШаблонДействияКомплексногоПроцесса.Тип.Типы();
	Для Каждого ТипНастройки Из ТипыНастроек Цикл
		Форма.ДанныеПараметровСхемы.ФормыНастроекЭлементов[ТипНастройки] = 
			Метаданные.НайтиПоТипу(ТипНастройки).ПолноеИмя() + ".ФормаОбъекта";
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

// Записывает параметры схемы их формы комплексного процесса/шаблона.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма комплексного процесса или шаблона.
//  Объект - БизнесПроцессОбъект.КомплексныйПроцесс,
//           СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов 
//
Процедура ЗаписатьПараметрыСхемыИзФормы(Форма, Объект)
	
	Если Форма.ДанныеПараметровСхемы.ПараметрыСхемыИзменены = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.ДанныеПараметровСхемы.Схема) Тогда
		Форма.ДанныеПараметровСхемы.Схема =
			СхемыПроцессовКлиентСервер.СсылкаНаСхемуВФорме(Форма);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.ДанныеПараметровСхемы.ВладелецСхемы) Тогда
		Если Не ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(Объект.Ссылка) Тогда
			Форма.ДанныеПараметровСхемы.ВладелецСхемы = Объект.СсылкаНаПроцесс();
		Иначе
			//@skip-warning
			Форма.ДанныеПараметровСхемы.ВладелецСхемы = Объект.СсылкаНаШаблон();
		КонецЕсли;
	КонецЕсли;
	
	ДанныеПараметровСхемы = 
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ДанныхПараметровСхемыИзФормы(Форма);
			
	РезультатЗаписи = 
		Справочники.ПараметрыСхемДляКомплексныхПроцессов.ЗаписатьДанныеПараметровСхемы(
			Форма.ДанныеПараметровСхемы.Ссылка, ДанныеПараметровСхемы, Ложь);
		
	Если Не ЗначениеЗаполнено(Форма.ДанныеПараметровСхемы.Ссылка) Тогда
		Форма.ДанныеПараметровСхемы.Ссылка = РезультатЗаписи.ПараметрыСхемы;
	КонецЕсли;
	Форма.ДанныеПараметровСхемы.ВерсияДанных = РезультатЗаписи.ВерсияДанных;
	
	Форма.ДанныеПараметровСхемы.ПараметрыСхемыИзменены = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ТаблицаЭтапов

// Обновляет порядок сортировки последователей этапа комплексного процесса/шаблона.
//
// Рекурсивная процедура. Предназначена для вызова из ОбновитьПорядокСортировкиЭтапов.
//
// Параметры:
//  Объект - СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов,
//           БизнесПроцессОбъект.КомплексныйПроцесс - объект комплексного процесса или шаблона.
//  ИдентификаторЭтапа - УникальныйИдентификатор - идентификатор этапа.
//  ПорядковыйНомерЭтапа - Число - порядковый номер этапа.
//  КэшСтрокЭтапов - Соответствие - кэш строк табличной части Этапы.
//
Процедура ОбновитьПорядокСортировкиПоследователейЭтапа(Объект, ИдентификаторЭтапа,
	ПорядковыйНомерЭтапа, КэшСтрокЭтапов)

	Отбор = Новый Структура;
	Отбор.Вставить("ИдентификаторПредшественника", ИдентификаторЭтапа);

	Последователи = Объект.ПредшественникиЭтапов.НайтиСтроки(Отбор);

	Для Каждого СтрокаТаблицы Из Последователи Цикл

		ЭтапПоследователь = КэшСтрокЭтапов.Получить(СтрокаТаблицы.ИдентификаторПоследователя);

		Если ЗначениеЗаполнено(ЭтапПоследователь.ПорядокСортировки) Тогда
			Продолжить;
		КонецЕсли;

		ПорядковыйНомерЭтапа = ПорядковыйНомерЭтапа + 1;

		ЭтапПоследователь.ПорядокСортировки = ПорядковыйНомерЭтапа;

		ОбновитьПорядокСортировкиПоследователейЭтапа(
			Объект, ЭтапПоследователь.ИдентификаторЭтапа, ПорядковыйНомерЭтапа, КэшСтрокЭтапов);

	КонецЦикла;

КонецПроцедуры

// Удаляет записи обо всех предшественниках этапа процесса или шаблона процесса
// Параметры:
//	Объект - объект (комплексный процесс или шаблон комплексного процесса)
//	ИдентификаторЭтапа - идентификатор этапа, для которого удаляются записи о предшественниках
Процедура УдалитьВсехПредшественниковЭтапа(Знач Объект, ИдентификаторЭтапа)

	Пока УЭтапаЕстьПредшественники(Объект, ИдентификаторЭтапа) Цикл
		Для Каждого Предшественник Из Объект.ПредшественникиЭтапов Цикл
			Если Предшественник.ИдентификаторПоследователя = ИдентификаторЭтапа Тогда
				Объект.ПредшественникиЭтапов.Удалить(Предшественник);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

// Проверяет, что у этапа есть предшественники
// Параметры:
//	Объект - объект (комплексный процесс или шаблон комплексного процесса)
//	ИдентификаторЭтапа - уникальный идентификатор этапа в объекте
// Возвращает:
//	Истина, если у этапа есть предшественники
//	Ложь, если у этапа нет предшественников
Функция УЭтапаЕстьПредшественники(Знач Объект, ИдентификаторЭтапа)

	Для Каждого Предшественник Из Объект.ПредшественникиЭтапов Цикл
		Если Предшественник.ИдентификаторПоследователя = ИдентификаторЭтапа Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;

КонецФункции

#КонецОбласти

Процедура ОбновитьПредметыПоНастроенномуДействию(Форма, Шаблон, Предметы, ИдентификаторДействия)

	ПроцессСсылка = МультипредметностьПереопределяемый.ПолучитьСсылкуНаПроцессПоШаблону(Шаблон);
	ДействияПроцесса = Мультипредметность.ПолучитьДействияПроцесса(ПроцессСсылка);
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(
		ПроцессСсылка.Метаданные().ПолноеИмя());
	//@skip-warning
	ДоступныеРоли = Менеджер.ПолучитьДоступныеРолиПредметов();
	Если ДоступныеРоли.Найти(Перечисления.РолиПредметов.Заполняемый) = Неопределено Тогда
		ДоступноЗаполнение = Ложь;
	Иначе
		ДоступноЗаполнение = Истина;
	КонецЕсли;

	Если ЗначениеЗаполнено(Предметы) Тогда
		ПредметыШаблона = Предметы;
	Иначе
		ПредметыШаблона = Мультипредметность.ПолучитьПредметыШаблона(Шаблон);
	КонецЕсли;

	ШаблоныЭтапов = Новый Массив;
	Если РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(Форма) Тогда
		ШаблоныЭтапов = 
			РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ВсеНастройкиДействийИВложенныхПроцессов(
				Форма);
	Иначе
		Для Каждого СтрокаЭтапа Из Форма.Объект.Этапы Цикл
			ШаблоныЭтапов.Добавить(СтрокаЭтапа.ШаблонБизнесПроцесса);
		КонецЦикла;
	КонецЕсли;

	Для Каждого СтрокаПредмета Из ПредметыШаблона Цикл
		Если Не ЗначениеЗаполнено(СтрокаПредмета.ИсходноеИмяПредмета)
			Или СтрокаПредмета.ИсходноеИмяПредмета = СтрокаПредмета.ИмяПредмета Тогда

			Если Форма.Объект.Предметы.НайтиСтроки(Новый Структура("ИмяПредмета",
				СтрокаПредмета.ИмяПредмета)).Количество() = 0 Тогда
				НоваяСтрока = Неопределено;
				МультипредметностьКлиентСервер.ИзменитьПредметПоРезультатуВыбора(Форма,
					Форма.Объект, СтрокаПредмета, НоваяСтрока);
				СтрокиКУдалению = Форма.Объект.ПредметыЗадач.НайтиСтроки(
					Новый Структура("ИмяПредмета", СтрокаПредмета.ИмяПредмета));
				Для Каждого Строка Из СтрокиКУдалению Цикл
					Форма.Объект.ПредметыЗадач.Удалить(Строка);
				КонецЦикла;
				МультипредметностьКлиентСервер.УстановитьОписаниеСтрокиПредметаШаблона(НоваяСтрока);
			КонецЕсли;

		ИначеЕсли ЗначениеЗаполнено(СтрокаПредмета.ИсходноеИмяПредмета)
			И СтрокаПредмета.ИсходноеИмяПредмета <> СтрокаПредмета.ИмяПредмета Тогда
			СтрокиПредметаДляИзменения = Форма.Объект.Предметы.НайтиСтроки(
				Новый Структура("ИмяПредмета", СтрокаПредмета.ИсходноеИмяПредмета));
			Если СтрокиПредметаДляИзменения.Количество() > 0 Тогда
				СтрокиДубли = Форма.Объект.Предметы.НайтиСтроки(Новый Структура("ИмяПредмета",
					СтрокаПредмета.ИмяПредмета));
				Если СтрокиДубли.Количество() > 0 Тогда
					Форма.Объект.Предметы.Удалить(СтрокиПредметаДляИзменения[0]);
					УдаляемыеСтроки = Форма.Объект.ПредметыЗадач.НайтиСтроки(
						Новый Структура("ИмяПредмета", СтрокаПредмета.ИсходноеИмяПредмета));
					Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
						Форма.Объект.ПредметыЗадач.Удалить(УдаляемаяСтрока);
					КонецЦикла;
					МультипредметностьВызовСервера.УдалитьПредметИзШаблоновПроцесса(
						Форма.Объект.Ссылка, ШаблоныЭтапов, СтрокаПредмета.ИсходноеИмяПредмета);
				Иначе
					Если ЗначениеЗаполнено(СтрокиПредметаДляИзменения[0].Предмет) Тогда
						ИсходныйПредмет = СтрокиПредметаДляИзменения[0].Предмет;
					Иначе
						ИсходныйПредмет = Неопределено;
					КонецЕсли;
					МультипредметностьКлиентСервер.ИзменитьПредметПоРезультатуВыбора(Форма,
						Форма.Объект, СтрокаПредмета, СтрокиПредметаДляИзменения[0]);
					Если ЗначениеЗаполнено(ИсходныйПредмет) Тогда
						СтрокиПредметаДляИзменения[0].Предмет = ИсходныйПредмет;
						МультипредметностьКлиентСервер.УстановитьОписаниеСтрокиПредмета(
							СтрокиПредметаДляИзменения[0], Форма.Объект.ПредметыЗадач, Истина);
					Иначе
						МультипредметностьКлиентСервер.УстановитьОписаниеСтрокиПредметаШаблона(
							СтрокиПредметаДляИзменения[0]);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ПредметыЗадачШаблона = Мультипредметность.ПолучитьПредметыЗадачШаблона(Шаблон);
	СтрокиКУдалению = Форма.Объект.ПредметыЗадач.НайтиСтроки(Новый Структура("ИдентификаторЭтапа",
		ИдентификаторДействия));
	Для Каждого Строка Из СтрокиКУдалению Цикл
		Форма.Объект.ПредметыЗадач.Удалить(Строка);
	КонецЦикла;

	Если МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(Шаблон) Тогда
		Если Форма.ДействияПроцесса.НайтиСтроки(
			Новый Структура("ИдентификаторЭтапа, ШаблонБизнесПроцесса", ИдентификаторДействия,
			Шаблон)).Количество() = 0 Тогда
			НоваяСтрока = Форма.ДействияПроцесса.Добавить();
			НоваяСтрока.ИдентификаторЭтапа = ИдентификаторДействия;
			НоваяСтрока.ШаблонБизнесПроцесса = Шаблон;
			НоваяСтрока.ТочкаМаршрута = Неопределено;
			НоваяСтрока.ДоступноЗаполнение = Ложь;
		КонецЕсли;
		// Перезаполним строки предметов задач в соответствие с данными этапа
		Для Каждого СтрокаПредмета Из ПредметыШаблона Цикл
			СтрокиПредмета = Форма.Объект.Предметы.НайтиСтроки(Новый Структура("ИмяПредмета",
				СтрокаПредмета.ИмяПредмета));
			Если СтрокиПредмета.Количество() > 0 Тогда
				НоваяСтрока = Форма.Объект.ПредметыЗадач.Добавить();
				НоваяСтрока.ИдентификаторЭтапа = ИдентификаторДействия;
				НоваяСтрока.ШаблонБизнесПроцесса = Шаблон;
				НоваяСтрока.ИмяПредмета = СтрокаПредмета.ИмяПредмета;
			КонецЕсли;
		КонецЦикла;
	Иначе

		Для Каждого ДействиеПроцесса Из ДействияПроцесса Цикл
			Если Форма.ДействияПроцесса.НайтиСтроки(
				Новый Структура("ИдентификаторЭтапа, ШаблонБизнесПроцесса, ТочкаМаршрута",
				ИдентификаторДействия, Шаблон, ДействиеПроцесса)).Количество() = 0 Тогда
				НоваяСтрока = Форма.ДействияПроцесса.Добавить();
				НоваяСтрока.ИдентификаторЭтапа = ИдентификаторДействия;
				НоваяСтрока.ШаблонБизнесПроцесса = Шаблон;
				НоваяСтрока.ТочкаМаршрута = ДействиеПроцесса;
				НоваяСтрока.ДоступноЗаполнение = ДоступноЗаполнение;
			КонецЕсли;
			
			// Перезаполним строки предметов задач в соответствие с данными этапа
			Для Каждого СтрокаПредмета Из Форма.Объект.Предметы Цикл
				СтрокиЭтапаШаблона = ПредметыЗадачШаблона.НайтиСтроки(
					Новый Структура("ИмяПредмета, ТочкаМаршрута", СтрокаПредмета.ИмяПредмета,
					ДействиеПроцесса));
				Если СтрокиЭтапаШаблона.Количество() > 0 Тогда
					НоваяСтрока = Форма.Объект.ПредметыЗадач.Добавить();
					НоваяСтрока.ИдентификаторЭтапа = ИдентификаторДействия;
					НоваяСтрока.ШаблонБизнесПроцесса = Шаблон;
					НоваяСтрока.ТочкаМаршрута = ДействиеПроцесса;
					НоваяСтрока.ИмяПредмета = СтрокаПредмета.ИмяПредмета;
					НоваяСтрока.ОбязательноеЗаполнение = СтрокиЭтапаШаблона[0].ОбязательноеЗаполнение;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// Обновим шаблоны этапов по таблице предметы задач
	ИтоговыеРолиПредметовЭтапов = Новый Массив;

	Для Каждого СтрокаПредмет Из Форма.Объект.Предметы Цикл

		СтруктураПредмета = Новый Структура("Предмет, ИмяПредмета, РольПредмета");
		ЗаполнитьЗначенияСвойств(СтруктураПредмета, СтрокаПредмет);

		РолиПредметовЭтапов = Новый Массив;

		МультипредметностьВызовСервера.ОбновитьШаблоныПодДаннымПредметовЗадач(
			Форма.Объект.Ссылка, ШаблоныЭтапов, Форма.Объект.ПредметыЗадач, СтруктураПредмета,
			РолиПредметовЭтапов);

		ИтоговыеРолиПредметовЭтапов = РолиПредметовЭтапов;

	КонецЦикла;

	Форма.РолиПредметовЭтапов.Очистить();
	Для Каждого Строка Из ИтоговыеРолиПредметовЭтапов Цикл
		НоваяСтрока = Форма.РолиПредметовЭтапов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;

КонецПроцедуры

Функция ДоступностьПоШаблону(Форма)

	УстановитьПривилегированныйРежим(Истина);

	Шаблон = Форма.Объект.ИсходныйШаблон;

	Предметы = Новый Массив;
	Для Каждого Предмет Из Форма.Предметы Цикл
		Предметы.Добавить(Предмет.Значение);
	КонецЦикла;

	Если Не ЗначениеЗаполнено(Шаблон) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если Предметы.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	ДанныеПредметов = Новый ТаблицаЗначений;

	ТипыКолонки = Новый Массив;
	ТипыКолонки.Добавить(Тип("СправочникСсылка.ВидыДокументов"));
	ТипыКолонки.Добавить(Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	ДанныеПредметов.Колонки.Добавить("КомуНазначен", Новый ОписаниеТипов(ТипыКолонки));

	ТипыКолонки.Очистить();
	ТипыКолонки.Добавить(Тип("СправочникСсылка.Организации"));
	ДанныеПредметов.Колонки.Добавить("Организация", Новый ОписаниеТипов(ТипыКолонки)); // организация объекта.

	Для Каждого Предмет Из Предметы Цикл

		Если Не ЗначениеЗаполнено(Предмет) Тогда
			Продолжить;
		КонецЕсли;

		Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Предмет) Тогда

			РеквизитыДокумента = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
				Предмет, "ВидДокумента, Организация");

			ВидыДокументов = Делопроизводство.ПолучитьВидДокументаИРодителей(
				РеквизитыДокумента.ВидДокумента);
			Для Каждого ВидДокумента Из ВидыДокументов Цикл
				СтрокаДанных = ДанныеПредметов.Добавить();
				СтрокаДанных.КомуНазначен = ВидДокумента;
				СтрокаДанных.Организация = РеквизитыДокумента.Организация;
			КонецЦикла;
		Иначе
			СтрокаДанных = ДанныеПредметов.Добавить();
			СтрокаДанных.КомуНазначен = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(
				Предмет));
			СтрокаДанных.Организация = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;

	КонецЦикла;

	Если ДанныеПредметов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеПредметов.Организация КАК Организация,
	|	ДанныеПредметов.КомуНазначен КАК КомуНазначен
	|ПОМЕСТИТЬ ДанныеПредметов
	|ИЗ
	|	&ДанныеПредметов КАК ДанныеПредметов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	Истина КАК ПоОрганизации,
	|	НастройкаШаблоновБизнесПроцессов.ЗапрещеноИзменение КАК ЗапрещеноИзменение
	|ИЗ
	|	ДанныеПредметов КАК ДанныеПредметов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
	|		ПО ДанныеПредметов.КомуНазначен = НастройкаШаблоновБизнесПроцессов.КомуНазначен
	|			И ДанныеПредметов.Организация = НастройкаШаблоновБизнесПроцессов.Организация
	|ГДЕ
	|	НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса = &Шаблон
	|	И НастройкаШаблоновБизнесПроцессов.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ложь,
	|	НастройкаШаблоновБизнесПроцессов.ЗапрещеноИзменение
	|ИЗ
	|	ДанныеПредметов КАК ДанныеПредметов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаШаблоновБизнесПроцессов КАК НастройкаШаблоновБизнесПроцессов
	|		ПО ДанныеПредметов.КомуНазначен = НастройкаШаблоновБизнесПроцессов.КомуНазначен
	|ГДЕ
	|	НастройкаШаблоновБизнесПроцессов.ШаблонБизнесПроцесса = &Шаблон
	|	И НастройкаШаблоновБизнесПроцессов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	Запрос.УстановитьПараметр("ДанныеПредметов", ДанныеПредметов);
	Запрос.УстановитьПараметр("Шаблон", Шаблон);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;

	Выборка = Результат.Выбрать();

	ЕстьШаблоныПоОгранизации = Ложь;
	ЗапрещеноИзменениеПоШаблонамОрганизации = Ложь;
	ЗапрещеноИзменениеПоОбщШаблонам = Ложь;

	Пока Выборка.Следующий() Цикл

		Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") И Выборка.ПоОрганизации Тогда

			ЕстьШаблоныПоОгранизации = Истина;
			Если Выборка.ЗапрещеноИзменение Тогда
				ЗапрещеноИзменениеПоШаблонамОрганизации = Истина;
			КонецЕсли;
		Иначе
			Если Выборка.ЗапрещеноИзменение Тогда
				ЗапрещеноИзменениеПоОбщШаблонам = Истина;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Если ЕстьШаблоныПоОгранизации Тогда
		Возврат Не ЗапрещеноИзменениеПоШаблонамОрганизации;
	Иначе
		Возврат Не ЗапрещеноИзменениеПоОбщШаблонам;
	КонецЕсли;

КонецФункции

Функция ЭтапЕстьСредиПредшественников(Знач Объект, ИдентификаторЭтапа)

	Для Каждого Предшественник Из Объект.ПредшественникиЭтапов Цикл
		Если Предшественник.ИдентификаторПредшественника = ИдентификаторЭтапа Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;

КонецФункции

#КонецОбласти