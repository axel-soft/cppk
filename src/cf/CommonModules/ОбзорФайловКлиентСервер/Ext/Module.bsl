////////////////////////////////////////////////////////////////////////////////
// Обзор файлов (клиент, сервер).
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ДинамическийСписок

// Перерисовывает на форме список кнопок переключения страниц динамического списка.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, на которой находится динамический список.
//   ТекущаяСтраница - Число - номер текущей страницы.
//   ВсегоСтраниц - Число - максимальное количество страниц.
//	 КомпактныйРежим - Булево
//
Процедура ОбновитьКнопкиДинамическогоСписка(Форма, ТекущаяСтраница, ВсегоСтраниц, КомпактныйРежим = Ложь) Экспорт
	
	Если КомпактныйРежим Тогда       
		ОбновитьКнопкиДинамическогоСпискаКомпактно(Форма, ТекущаяСтраница, ВсегоСтраниц);
		Возврат;
	КонецЕсли;	
	
	Если ТекущаяСтраница > ВсегоСтраниц Тогда
		ТекущаяСтраница = ВсегоСтраниц;
	КонецЕсли;
	
	Если ВсегоСтраниц = 1 Тогда
		Форма.Элементы.ПереключениеСтраниц.Видимость = Ложь;
		Возврат;
	Иначе
		Форма.Элементы.ПереключениеСтраниц.Видимость = Истина;
	КонецЕсли;
	
	Если (ВсегоСтраниц > 1) И (ВсегоСтраниц < 9) Тогда
		
		Для НомерКнопки = 1 По ВсегоСтраниц Цикл
			Форма.Элементы["Страница" + НомерКнопки].Видимость = Истина;
		КонецЦикла;
		Для НомерКнопки = (ВсегоСтраниц + 1) По 9 Цикл
			Форма.Элементы["Страница" + НомерКнопки].Видимость = Ложь;
		КонецЦикла;
		
	Иначе
		
		Для НомерКнопки = 1 По 9 Цикл
			Форма.Элементы["Страница" + НомерКнопки].Видимость = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
	ЕстьПревышение = (ВсегоСтраниц > 9);
	ЕстьЛеваяКнопкаВыбора = ЕстьПревышение И (ТекущаяСтраница > 5);
	ЕстьПраваяКнопкаВыбора = ЕстьПревышение И (ТекущаяСтраница < (ВсегоСтраниц - 4));
	
	Если ЕстьЛеваяКнопкаВыбора Тогда
		Форма.Элементы.Страница2.Заголовок = "...";
	Иначе
		Форма.Элементы.Страница2.Заголовок = "2";
	КонецЕсли;
	
	Если ЕстьЛеваяКнопкаВыбора И ЕстьПраваяКнопкаВыбора Тогда
		
		ТекущаяКнопка = 5;
		Форма.Элементы.Страница3.Заголовок = ТекущаяСтраница - 2;
		Форма.Элементы.Страница4.Заголовок = ТекущаяСтраница - 1;
		Форма.Элементы.Страница5.Заголовок = ТекущаяСтраница;
		Форма.Элементы.Страница6.Заголовок = ТекущаяСтраница + 1;
		Форма.Элементы.Страница7.Заголовок = ТекущаяСтраница + 2;
		
	ИначеЕсли ЕстьЛеваяКнопкаВыбора Тогда
		
		ТекущаяКнопка = 9 - (ВсегоСтраниц - ТекущаяСтраница);
		Форма.Элементы.Страница3.Заголовок = ВсегоСтраниц - 6;
		Форма.Элементы.Страница4.Заголовок = ВсегоСтраниц - 5;
		Форма.Элементы.Страница5.Заголовок = ВсегоСтраниц - 4;
		Форма.Элементы.Страница6.Заголовок = ВсегоСтраниц - 3;
		Форма.Элементы.Страница7.Заголовок = ВсегоСтраниц - 2;
		Форма.Элементы.Страница8.Заголовок = ВсегоСтраниц - 1;
		
	Иначе
		
		ТекущаяКнопка = ТекущаяСтраница;
		Форма.Элементы.Страница3.Заголовок = "3";
		Форма.Элементы.Страница4.Заголовок = "4";
		Форма.Элементы.Страница5.Заголовок = "5";
		Форма.Элементы.Страница6.Заголовок = "6";
		Форма.Элементы.Страница7.Заголовок = "7";
		Форма.Элементы.Страница8.Заголовок = "8";
		
	КонецЕсли;
	
	Если ЕстьПраваяКнопкаВыбора Тогда
		Форма.Элементы.Страница8.Заголовок = "...";
	КонецЕсли;
	
	Форма.Элементы.Страница9.Заголовок = ВсегоСтраниц;
	
	Для НомерКнопки = 1 По 9 Цикл
		Форма.Элементы["Страница" + НомерКнопки].Пометка = (НомерКнопки = ТекущаяКнопка);
	КонецЦикла;
	
	Форма.Элементы.Назад.Доступность = (ТекущаяСтраница > 1);
	Форма.Элементы.Вперед.Доступность = (ТекущаяСтраница < ВсегоСтраниц);
	
КонецПроцедуры

// Перерисовывает на форме список кнопок переключения страниц динамического списка.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, на которой находится динамический список.
//   ТекущаяСтраница - Число - номер текущей страницы. (с 1)
//   ВсегоСтраниц - Число - максимальное количество страниц.
//
Процедура ОбновитьКнопкиДинамическогоСпискаКомпактно(Форма, ТекущаяСтраница, ВсегоСтраниц) Экспорт
	
	Если ТекущаяСтраница > ВсегоСтраниц Тогда
		ТекущаяСтраница = ВсегоСтраниц;
	КонецЕсли;     
	
	МаксКнопок = 5; // вместо 9
	
	Если ВсегоСтраниц = 1 Тогда
		Форма.Элементы.ПереключениеСтраниц.Видимость = Ложь;
		Возврат;
	Иначе
		Форма.Элементы.ПереключениеСтраниц.Видимость = Истина;
	КонецЕсли;
	
	Если (ВсегоСтраниц > 1) И (ВсегоСтраниц < МаксКнопок) Тогда
		
		Для НомерКнопки = 1 По ВсегоСтраниц Цикл
			Форма.Элементы["Страница" + НомерКнопки].Видимость = Истина;
		КонецЦикла;
		Для НомерКнопки = (ВсегоСтраниц + 1) По МаксКнопок Цикл
			Форма.Элементы["Страница" + НомерКнопки].Видимость = Ложь;
		КонецЦикла;
		
	Иначе
		
		Для НомерКнопки = 1 По МаксКнопок Цикл
			Форма.Элементы["Страница" + НомерКнопки].Видимость = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
	ЕстьПревышение = (ВсегоСтраниц > МаксКнопок);
	ЕстьЛеваяКнопкаВыбора = ЕстьПревышение И (ТекущаяСтраница > 3);
	ЕстьПраваяКнопкаВыбора = ЕстьПревышение И (ТекущаяСтраница < (ВсегоСтраниц - 2));
	
	Если ЕстьЛеваяКнопкаВыбора Тогда
		Форма.Элементы.Страница2.Заголовок = "...";
	Иначе
		Форма.Элементы.Страница2.Заголовок = "2";
	КонецЕсли;
	
	Если ЕстьЛеваяКнопкаВыбора И ЕстьПраваяКнопкаВыбора Тогда
		
		// "1"  "..."  6  "..."  "50" 
		
		ТекущаяКнопка = 3;         
		Форма.Элементы.Страница1.Заголовок = 1;
		Форма.Элементы.Страница2.Заголовок = "...";
		Форма.Элементы.Страница3.Заголовок = ТекущаяСтраница;
		Форма.Элементы.Страница4.Заголовок = "...";
		Форма.Элементы.Страница5.Заголовок = ВсегоСтраниц;
		
	ИначеЕсли ЕстьЛеваяКнопкаВыбора Тогда   // есть левая, но нет правой
		
		//      < 1 ... 9 10 11 >
		
		ТекущаяКнопка = МаксКнопок - (ВсегоСтраниц - ТекущаяСтраница);

		Форма.Элементы.Страница1.Заголовок = 1;
		Форма.Элементы.Страница2.Заголовок = "...";
		Форма.Элементы.Страница3.Заголовок = ВсегоСтраниц - 2; // ТекущаяСтраница = ВсегоСтраниц - 2
		Форма.Элементы.Страница4.Заголовок = ВсегоСтраниц - 1;
		Форма.Элементы.Страница5.Заголовок = ВсегоСтраниц;     
		
	ИначеЕсли ЕстьПраваяКнопкаВыбора Тогда  // нет левой, есть правая.
		
		// "1"     2   3   "..."    8 
		
		ТекущаяКнопка = ТекущаяСтраница;

		Форма.Элементы.Страница1.Заголовок = 1;
		Форма.Элементы.Страница2.Заголовок = 2;
		Форма.Элементы.Страница3.Заголовок = 3; // ТекущаяСтраница = ВсегоСтраниц - 2
		Форма.Элементы.Страница4.Заголовок = "...";
		Форма.Элементы.Страница5.Заголовок = ВсегоСтраниц;
		
	Иначе                                  
		// тут видно все
		
		ТекущаяКнопка = ТекущаяСтраница;   

		Форма.Элементы.Страница1.Заголовок = "1";
		Форма.Элементы.Страница2.Заголовок = "2";
		Форма.Элементы.Страница3.Заголовок = "3";
		Форма.Элементы.Страница4.Заголовок = "4";
		Форма.Элементы.Страница5.Заголовок = "5";
		
	КонецЕсли;
	
	Если ЕстьПраваяКнопкаВыбора Тогда
		Форма.Элементы.Страница4.Заголовок = "...";
	КонецЕсли;
	
	Форма.Элементы.Страница5.Заголовок = ВсегоСтраниц;
	
	Для НомерКнопки = 1 По МаксКнопок Цикл
		Форма.Элементы["Страница" + НомерКнопки].Пометка = (НомерКнопки = ТекущаяКнопка);
	КонецЦикла;
	
	Форма.Элементы.Назад.Доступность = (ТекущаяСтраница > 1);
	Форма.Элементы.Вперед.Доступность = (ТекущаяСтраница < ВсегоСтраниц);
	
КонецПроцедуры

#КонецОбласти

// Выводит сообщение в HTML представление, которое будет отображаться в области предпросмотра.
//
// Параметры:
//   Сообщение - Строка - сообщение для области предпросмотра.
//
// Возвращаемое значение:
//   Строка - HTML представление сообщения.
//
Функция СообщениеВПредпросмотр(Сообщение) Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("<html>");
	Результат.Добавить(ЗаголовокСообщенияВОбластиПредпросмотра());
	Результат.Добавить("<div class=""block"">");
	Результат.Добавить(Сообщение);
	Результат.Добавить(
		"</div>
		|</body>
		|</html>");
	
	Возврат СтрСоединить(Результат, Символы.ПС);
	
КонецФункции

// Возвращает заголовок сообщения в HTML
//
// Возвращаемое значение:
//   Строка - HTML представление сообщения.
//
Функция ЗаголовокСообщенияВОбластиПредпросмотра() Экспорт
	
	Возврат
		"<head>
		|<style type=""text/css"">
		|.block
		|{
		|	width: 45%;
		|	padding: 5% 20% 25% 25%;
		|	font-family: Arial, Helvetica, sans-serif;
        |	font-size: 100%;
        |	line-height: 1.25;
		|	text-align: center;
		|	position:absolute;
		|}
		|a:link {
		|	color: #006699; text-decoration: none;}
		|a:visited {
		|	color: #006699; text-decoration: none;}
		|a:hover {
		|	color: #006699; text-decoration: underline;}
		|</style>
		|</head>";
	
КонецФункции

// Формирует поддерживаемые типы предпросмотра.
// 
// Возвращаемое значение:
//  Строка - Поддерживаемые типы предпросмотра
//
Функция ПоддерживаемыеТипыПредпросмотра() Экспорт
	 
	ПоддерживаемыеТипы = "doc docx ppt pptx xls xlsx odt odp ods txt htm html pdf jpg jpeg gif tif tiff png bmp xml mxl";
	
	ИсполняемыеТекстовыеФайлы = НРег(ФайловыеФункцииКлиентСервер.ИсполняемыеТекстовыеФайлы());
	ПоддерживаемыеТипы = ПоддерживаемыеТипы + " " + ИсполняемыеТекстовыеФайлы;
	
	РасширенияПоддерживаемыеТаймлист = ТаймлистВызовСервераПовтИсп.РасширенияФайловТаймлист();
	Если РасширенияПоддерживаемыеТаймлист.Количество() > 0 Тогда
		РасширенияПоддерживаемыеТаймлист = СтрСоединить(РасширенияПоддерживаемыеТаймлист, " ");
		ПоддерживаемыеТипы = ПоддерживаемыеТипы + " " + РасширенияПоддерживаемыеТаймлист;
	КонецЕсли;
	
	Возврат ПоддерживаемыеТипы;
	
КонецФункции

Функция ЭтоКартинка(РасширениеФайла) Экспорт

	Расширение = СтрЗаменить(РасширениеФайла, ".", "");
	Возврат Расширение = "jpg"
		Или Расширение = "jpeg"
		Или Расширение = "gif"
		Или Расширение = "tif"
		Или Расширение = "tiff"
		Или Расширение = "png"
		Или Расширение = "bmp";
		
КонецФункции	

Функция ЭтоКартинкаTif(РасширениеФайла) Экспорт

	Расширение = СтрЗаменить(РасширениеФайла, ".", "");
	Возврат Расширение = "tif"
		Или Расширение = "tiff";
		
КонецФункции	

// LibreOffice  покажет этот файл в предпросмотре
// 
// Параметры:
//  РасширениеФайла - Строка
// 
// Возвращаемое значение:
//  Булево - Это файл LibreOffice
//
Функция ЭтоФайлДляLibreOffice(РасширениеФайла) Экспорт

	Расширение = СтрЗаменить(РасширениеФайла, ".", "");
	Возврат Расширение = "doc"
		Или Расширение = "docx"
		Или Расширение = "odt";
		
КонецФункции	

Функция ЭтоКартинкаBMP(РасширениеФайла) Экспорт

	Расширение = СтрЗаменить(РасширениеФайла, ".", "");
	Возврат Расширение = "bmp";
		
КонецФункции	

Функция ЭтоФайлСДолгойОбработкой(РасширениеФайла) Экспорт
	
	#Если ВебКлиент Тогда
		Возврат Ложь;
	#КонецЕсли	 
	
	СисИнфо = Новый СистемнаяИнформация;
	Если Не СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 
		И Не СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
			
		Возврат Ложь;		
		
	КонецЕсли;		
	
	РасширениеФайла = НРег(РасширениеФайла);

	Расширение = СтрЗаменить(РасширениеФайла, ".", "");
	Возврат Расширение = "doc"
		Или Расширение = "docx"
		Или Расширение = "ppt"
		Или Расширение = "pptx"
		Или Расширение = "xls"
		Или Расширение = "xlsx"
		Или Расширение = "odt"
		Или Расширение = "odp"
		Или Расширение = "ods"
		Или Расширение = "pdf";
		
КонецФункции	

// Html и pdf и ЭДО и картинки, файлы Таймлист.
// 
// Параметры:
//  РасширениеФайла - Строка
// 
// Возвращаемое значение:
//  Булево - Это файл с подготовкой на сервере.
//
Функция ЭтоФайлСПодготовкойНаСервере(РасширениеФайла) Экспорт
	
	РасширениеФайла = НРег(РасширениеФайла);
	
	Расширение = СтрЗаменить(РасширениеФайла, ".", "");
	Возврат Расширение = "xml"
		Или Расширение = "pdf"
		Или Расширение = "txt"
		Или Расширение = "htm"
		Или Расширение = "html"
		Или Расширение = "jpg"
		Или Расширение = "jpeg"
		Или Расширение = "gif"
		Или Расширение = "tif"
		Или Расширение = "tiff"
		Или Расширение = "png"
		Или Расширение = "bmp"
		Или Расширение = "bat"
		Или Расширение = "cmd"
		Или Расширение = "vbs"
		Или Расширение = "js"
		Или Расширение = "reg"
		Или Расширение = "mxl"
		Или ТаймлистКлиентСервер.ЭтоРасширениеФайлаТаймлист(РасширениеФайла);
		
КонецФункции

Функция ЭтоФайлСПодготовкойНаКлиенте(РасширениеФайла) Экспорт
	
	РасширениеФайла = НРег(РасширениеФайла);
	
	Расширение = СтрЗаменить(РасширениеФайла, ".", "");
	Возврат Расширение = "doc"
		Или Расширение = "docx"
		Или Расширение = "ppt"
		Или Расширение = "pptx"
		Или Расширение = "xls"
		Или Расширение = "xlsx"
		Или Расширение = "odt"
		Или Расширение = "odp"
		Или Расширение = "ods";
		
КонецФункции	

Функция ЭтоTXT(РасширениеФайла) Экспорт
	
	Возврат (РасширениеФайла = "txt"
		Или РасширениеФайла = "bat"
		Или РасширениеФайла = "cmd"
		Или РасширениеФайла = "vbs"
		Или РасширениеФайла = "js"
		Или РасширениеФайла = "reg");

КонецФункции

Функция ЭтоPDF(РасширениеФайла) Экспорт

	Возврат РасширениеФайла = "pdf";

КонецФункции

Функция ЭтоHTML(РасширениеФайла) Экспорт

	Возврат РасширениеФайла = "htm"
		Или РасширениеФайла = "html";

КонецФункции

Функция ЭтоXML(РасширениеФайла) Экспорт
	
	Возврат РасширениеФайла = "xml";
	
КонецФункции

Функция ЭтоMXL(РасширениеФайла) Экспорт
	
	Возврат РасширениеФайла = "mxl";
	
КонецФункции

// Проверяет, что это расширение поддерживаемое Таймлист.
// 
// Параметры:
//  РасширениеФайла - Строка.
//  РасширенияПоддерживаемыеТаймлист - Массив из Строка.
// 
// Возвращаемое значение:
//  Булево - Это расширение поддерживаемое Таймлист.
//
Функция ЭтоРасширениеПоддерживаемоеТаймлист(РасширениеФайла, РасширенияПоддерживаемыеТаймлист) Экспорт
	
	НормализованноеРасширениеФайла = НРег(РасширениеФайла);
	НормализованноеРасширениеФайла = СтрЗаменить(НормализованноеРасширениеФайла, ".", "");
	
	ЭтоРасширениеПоддерживаемоеТаймлист =
		РасширенияПоддерживаемыеТаймлист.Найти(НормализованноеРасширениеФайла) <> Неопределено;
	
	Возврат ЭтоРасширениеПоддерживаемоеТаймлист;
	
КонецФункции

Функция HTMLСКартинками(HTMLПредставлениеФайла, ИмяФайла, ВременнаяПапка) Экспорт

	//ПапкаСФайлами = ВременнаяПапка + ИмяФайла + ".files";
	ПапкаСФайлами = ВременнаяПапка;
	
	Картинки = Картинки(ПапкаСФайлами);
	
	Для Каждого Картинка Из Картинки Цикл
	
		ДвоичныеДанные = Новый ДвоичныеДанные(Картинка.ПолноеИмя);
		ЗашифрованныеДанные = Base64Строка(ДвоичныеДанные);
		
		ПозИмени = СтрНайти(HTMLПредставлениеФайла, Картинка.Имя);
		Если ПозИмени = 0 Тогда 
			Продолжить;
		КонецЕсли;                       
		
		НадоДобавитьКавычки = Ложь;
			
		СимволСправа = Сред(HTMLПредставлениеФайла, ПозИмени + СтрДлина(Картинка.Имя), 1);
		СимволСлева = "";
		Если СимволСправа = ">" Или СимволСправа = " " Тогда
			СимволСлева = "=";
		Иначе
			СимволСлева = СимволСправа;
		КонецЕсли;		
		
		Если СимволСправа = " " Тогда
			НадоДобавитьКавычки = Истина;
		КонецЕсли;	
		
		ПозНачалаSrc = СтрНайти(HTMLПредставлениеФайла, СимволСлева, НаправлениеПоиска.СКонца, ПозИмени);
		Если ПозНачалаSrc = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		КороткийПуть = Сред(HTMLПредставлениеФайла, ПозНачалаSrc + 1, 
			ПозИмени + СтрДлина(Картинка.Имя) - ПозНачалаSrc - 1);
		
		РасширениеФайлаБезТочки = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Картинка.Расширение);
		НовыеДанныеКартинки = "data:image/" + РасширениеФайлаБезТочки + ";base64," + ЗашифрованныеДанные;
		Если НадоДобавитьКавычки Тогда
			НовыеДанныеКартинки = """" + НовыеДанныеКартинки + """";
		КонецЕсли;	
		HTMLПредставлениеФайла = СтрЗаменить(HTMLПредставлениеФайла, КороткийПуть, НовыеДанныеКартинки)
	
	КонецЦикла;
	
	Возврат HTMLПредставлениеФайла;

КонецФункции

Функция Картинки(ПапкаСФайлами) Экспорт

	Картинки = Новый Массив();
	
	МассивФайлов = НайтиФайлы(ПапкаСФайлами, ПолучитьМаскуВсеФайлы(), Истина);
	
	Для Каждого Файл Из МассивФайлов Цикл
		
		Если ЭтоКартинка(НРег(Файл.Расширение)) Тогда
	
			Картинка = Новый Структура();
			Картинка.Вставить("Имя", Файл.Имя);
			Картинка.Вставить("ИмяБезРасширения", Файл.ИмяБезРасширения);
			Картинка.Вставить("Расширение", Файл.Расширение);
			Картинка.Вставить("ПолноеИмя", Файл.ПолноеИмя);
			Картинки.Добавить(Картинка);
			
		КонецЕсли;	
			
	КонецЦикла;		
			
	Возврат Картинки;
	
КонецФункции

// HTMLПредставлениеСтрока еще не сформировано. Например в веб клиенте или в Линукс, когда в РС ничего нет.
// 
// Возвращаемое значение:
//  Строка - HTML представление
Функция HTMLПредставлениеЕщеНеСформировано() Экспорт
	
	ТекстHTML = НСтр("ru = 'Данные предпросмотра отсутствуют.<br>'");
	
	Возврат СообщениеВПредпросмотр(ТекстHTML);
	
КонецФункции

// Формирует HTML представление не поддерживаемого файла.
// 
// Параметры:
//  РасширениеФайла - Строка
//  РасширениеОригинальное - Строка
// 
// Возвращаемое значение:
//  Строка - HTML представление не поддерживаемого файла.
//
Функция HTMLПредставлениеНеПоддерживаемыйФайл(РасширениеФайла, РасширениеОригинальное = "") Экспорт
	
	Если ЭтоPDF(РасширениеФайла) Тогда     
		
		ЭтоПолноправный = Ложь;
		
		#Если ТонкийКлиент Или ВебКлиент Тогда
			ЭтоПолноправный = ПользователиКлиент.ЭтоПолноправныйПользователь();
		#ИначеЕсли Сервер Тогда
			ЭтоПолноправный = Пользователи.ЭтоПолноправныйПользователь();
		#КонецЕсли	
		
		Если Не ЗначениеЗаполнено(РасширениеОригинальное) Или ЭтоPDF(РасширениеОригинальное) Тогда
			
			Если ЭтоПолноправный Тогда 
				
				ТекстHTML = НСтр("ru = 'Предварительный просмотр данного типа файлов (pdf) не поддерживается.
					|Для просмотра pdf файлов надо на сервере установить ImageMagick и Ghostscript, и в настройках
					|программы 1С:Документооборот указать ""Использовать ImageMagick"" и ""Использовать Ghostscript"",
					|либо установить в настройке ""Способ предпросмотра PDF"" - ""1С:Предприятие"". <br>
					|<font color=""#006699""><a href = ""OpenForView"">Открыть</a></font>'");
			Иначе		
				
				ТекстHTML = НСтр("ru = 'Предварительный просмотр данного типа файлов (pdf) не поддерживается.
					|Нужно выполнить настройки программы, обратитесь к администратору. <br>
					|<font color=""#006699""><a href = ""OpenForView"">Открыть</a></font>'");
				
			КонецЕсли;
		Иначе
			
			// тут в оригинале был например doc
			
			Если ЭтоПолноправный Тогда 
				
				ТекстHTML = НСтр("ru = 'Текущий файл с расширением %1 не может быть показан, 
					|т.к. настройка ""Итоговый формат файла"" = ""PDF/A"",
					|а предварительный просмотр файлов pdf не поддерживается.
					|Для просмотра pdf файлов надо на сервере установить ImageMagick и Ghostscript, и в настройках
					|программы 1С:Документооборот указать ""Использовать ImageMagick"" и ""Использовать Ghostscript"",
					|либо установить в настройке ""Способ предпросмотра PDF"" - ""1С:Предприятие"".<br>
					|<font color=""#006699""><a href = ""OpenForView"">Открыть</a></font>'");
			
			Иначе		
				
				ТекстHTML = НСтр("ru = 'Данный файл не может быть показан в предпросмотре.
					|Нужно выполнить настройки программы, обратитесь к администратору. <br>
					|<font color=""#006699""><a href = ""OpenForView"">Открыть</a></font>'");
				
			КонецЕсли;
			
			ТекстHTML = СтрЗаменить(ТекстHTML, "%1", РасширениеОригинальное);
			
		КонецЕсли;	
		
	ИначеЕсли ТаймлистКлиентСервер.ЭтоРасширениеФайлаТаймлист(РасширениеФайла) Тогда
		
		ТекстHTML = 
			НСтр("ru = '<html dir=""ltr""><head>
				|<meta http-equiv=""content-type"" content=""text/html;charset=utf-8""></head>
				|<body>
				|<center>
				|<img src=""https://i.postimg.cc/B6xF36kp/photo-2024-02-21-15-45-12.jpg"" width=""1000"" height=""639"" align=center>
				|</center>
				|<p><center><font size=""3"" color=""black"" face=""Arial"">Получите возможность расшифровки и автопротокола совещаний после регистрации в: <font color=""#006699""><a href=https://timelist.ru/1CDO>""Таймлист в Документообороте""</a></font></p></center>
				|</body></html>'");
		
		Возврат ТекстHTML;
		
	Иначе
		
		Если ЗначениеЗаполнено(РасширениеФайла) Тогда
			ТекстHTML = НСтр("ru = 'Предварительный просмотр данного типа файлов (%1) не поддерживается<br>
				|<font color=""#006699""><a href = ""OpenForView"">Открыть</a></font>'");
			ТекстHTML = СтрЗаменить(ТекстHTML, "%1", РасширениеФайла);
		Иначе
			
			ТекстHTML = НСтр("ru = 'Предварительный просмотр данного типа файлов не поддерживается<br>
				|<font color=""#006699""><a href = ""OpenForView"">Открыть</a></font>'");
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат СообщениеВПредпросмотр(ТекстHTML);
	
КонецФункции

// Формирует HTML представление не поддерживаемого файла.
// 
// Параметры:
//  РасширениеФайла - Строка
//  РасширениеОригинальное - Строка
// 
// Возвращаемое значение:
//  Строка - HTML представление не поддерживаемого файла.
//
Функция HTMLПредставлениеНеПоддерживаемыйДокументЭДО() Экспорт
	
	ТекстHTML = НСтр("ru = 'Предварительный просмотр данного типа документов ЭДО не поддерживается<br>
		|<font color=""#006699""><a href = ""OpenEDI"">Открыть</a></font>'");
			
	
	Возврат СообщениеВПредпросмотр(ТекстHTML);
	
КонецФункции

Функция HTMLПредставлениеПревышенРазмер(ПредельныйРазмерДляПредпросмотра) Экспорт
	
	ТекстHTML = НСтр("ru = 'Размер файла превышает порог (%1 Мб)<br>
		|<font color=""#006699""><a href = ""OpenForView"">Открыть</a></font>
		|<br>
		|<br>
		|<font color=""#006699""><a href = ""CreatePreview"">Создать предпросмотр (может быть долго)</a></font>'");
	ТекстHTML = СтрЗаменить(ТекстHTML, "%1", Цел(ПредельныйРазмерДляПредпросмотра/(1024*1024)));
	
	Возврат СообщениеВПредпросмотр(ТекстHTML);
	
КонецФункции

// Формирует HTML представление файла с предложением распознать в Таймлист.
// 
// Параметры:
//  Файл - СправочникСсылка.Файлы
//  РазмерФайла - Число
//  ДоступноРаспознаваниеТаймлист - Булево
// 
// Возвращаемое значение:
//  Строка - HTML представление файла с предложением распознать в Таймлист.
//
Функция HTMLПредставлениеРаспознатьВТаймлист(Файл, РазмерФайла, ДоступноРаспознаваниеТаймлист = Ложь) Экспорт
	
	Если ДоступноРаспознаваниеТаймлист Тогда
		
		РазмерФайлаВМб = РазмерФайла / (1024 * 1024);
		
		Если РазмерФайлаВМб > 1024 Тогда
			ТекстHTML = НСтр("ru = 'Размер файла превышает пороговое значение (1 Гб)<br>
			|<font color=""#006699""><a href = ""OpenForView"">Открыть</a></font><br><br>'");
		Иначе
			ШаблонТекстаHTML = НСтр("ru = 'Данные предпросмотра отсутствуют<br>
			|<font color=""#006699""><a href = ""OpenForView"">Открыть</a></font><br><br>
			|<font color=""#006699""><a href = ""v8doc:files/Recognize/%1"">Распознать в Таймлист</a></font>'");
			
			ТекстHTML = СтрШаблон(ШаблонТекстаHTML, ПолучитьНавигационнуюСсылку(Файл));
		КонецЕсли;
		
	Иначе
		
		ТекстHTML = НСтр("ru = 'Данные предпросмотра отсутствуют<br>
			|<font color=""#006699""><a href = ""OpenForView"">Открыть</a></font><br><br>'");
		
	КонецЕсли;
	
	Возврат СообщениеВПредпросмотр(ТекстHTML);
	
КонецФункции

// Формирует HTML представление файла с информацией о том, что файл уже распознается.
// 
// Возвращаемое значение:
//  Строка - HTML представление файла с информацией о том, что файл уже распознается.
//
Функция HTMLПредставлениеВыполняетсяРаспознование() Экспорт
	
	ТекстHTML = НСтр("ru = 'Выполняется распознавание файла. Пожалуйста, подождите...<br>
		|<font color=""#006699""><a href = ""OpenForView"">Открыть</a></font>'");
	
	Возврат СообщениеВПредпросмотр(ТекстHTML);
	
КонецФункции

Функция ПараметрыПолученияПредставления() Экспорт
	
	Возврат Новый Структура("УникальныйИдентификатор, 
	|ПоддерживаемыеТипы, 
	|МаксимальноеЧислоСтраницДляПредпросмотра, 
	|ПредпросмотрОфисныхФайлов,
	|ИдентификаторКлиента,
	|ТребуетсяСоздатьВизуализациюЭП,
	|Расширение,
	|ПредпросмотрУрезан,
	|МасштабироватьPDFИКартинки,
	|РасширениеОригинальное,
	|ЭтоСлужебноеСообщение,
	|ВсегдаПолучатьHtmlДляPdf,
	|ИгнорироватьМаксРазмер, 
	|ИспользоватьLibreOffice,
	|ЧислоСтраницДляПредпросмотраПорции,    
	|МаксимальноеЧислоСтраницДляПредпросмотра,
	|ВсегоПорцийПредпросмотра,
	|НомерПорции");
	
КонецФункции	

// HTMLПредставлениеСтрока при редактировании.
// 
// Возвращаемое значение:
//  Строка - HTML представление при редактировании (для занятого на редактирование файла)
Функция HTMLПредставлениеПриРедактировании() Экспорт
	
	ТекстHTML = НСтр("ru = 'Данный файл занят вами на редактирование<br>
		|<font color=""#006699""><a href = ""OpenForEdit"">Открыть</a></font>'");
	
	Возврат СообщениеВПредпросмотр(ТекстHTML);
	
КонецФункции

// Вернет структуру параметров для HTMLПредставлениеФайла()
// 
// Возвращаемое значение:
//  Структура(Расширение, УникальныйИдентификатор, ПредпросмотрОфисныхФайлов, ОбновитьПредставление, ПредпросмотрУрезан, МасштабироватьPDFИКартинки, Размер, ИгнорироватьМаксРазмер)
Функция СтруктураПараметровHTMLПредставлениеФайла() Экспорт
	
	Параметры = Новый Структура();
	
	Параметры.Вставить("Расширение", "");
	Параметры.Вставить("УникальныйИдентификатор");
	Параметры.Вставить("ПредпросмотрОфисныхФайлов");
	Параметры.Вставить("ОбновитьПредставление", Ложь);
	Параметры.Вставить("ПредпросмотрУрезан", Ложь);
	Параметры.Вставить("МасштабироватьPDFИКартинки");
	Параметры.Вставить("Размер", 0);
	Параметры.Вставить("ИгнорироватьМаксРазмер", Ложь);
	Параметры.Вставить("ИспользоватьLibreOffice", Ложь);
	Параметры.Вставить("МаксимальноеЧислоСтраницДляПредпросмотра", 10);
	Параметры.Вставить("ЧислоСтраницДляПредпросмотраПорции", 0);
	Параметры.Вставить("ВсегоПорцийПредпросмотра", 1);
	Параметры.Вставить("НомерПорции", 0);
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти
