////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры и функции для работы механизма выполнения задач по почте
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Устанавливает настройки в значения по умолчанию.
//
Процедура УстановитьНастройкиПоУмолчанию() Экспорт
	
	ВключитьИспользованиеВыполненияЗадачПоПочтеПоУмолчанию();
	УстановитьДлинуТемыОтветногоПисьмаПоУмолчанию();
	Константы.МаксимальныйРазмерВложенийВУведомленииНовойЗадачи.Установить(10);
	Константы.СрокХраненияПротоколовВыполненияЗадачПоПочте.Установить(7);
	
КонецПроцедуры

// Включает использование выполнения задач по почте по умолчанию.
//
Процедура ВключитьИспользованиеВыполненияЗадачПоПочтеПоУмолчанию() Экспорт
	
	Константы.ИспользоватьВыполнениеЗадачПоПочте.Установить(Истина);
	
КонецПроцедуры

// Устанавливает длину темы ответного письма по умолчанию.
//
Процедура УстановитьДлинуТемыОтветногоПисьмаПоУмолчанию() Экспорт
	
	Константы.ДлинаТемыОтветногоПисьма.Установить(200);
	
КонецПроцедуры

// Проверяет возможность выполнения задачи по почте.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//
// Возвращаемое значение:
//  Булево
//
Функция ВозможноВыполнениеЗадачиПоПочте(ДействиеЗадачи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИсточникДействияЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеЗадачи, "Источник");
	
	Если ЗначениеЗаполнено(ИсточникДействияЗадачи)
		И ТипЗнч(ИсточникДействияЗадачи) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		РеквизтыЗадачиПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ИсточникДействияЗадачи, "БизнесПроцесс, ТочкаМаршрута, Ссылка");
		
		МекнеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(
			РеквизтыЗадачиПроцесса.БизнесПроцесс);
		
		Возврат МекнеджерПроцесса.ВозможноВыполнениеЗадачиПроцессаПоПочте(РеквизтыЗадачиПроцесса);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Формирует тему уведомления по задаче.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//  ПолучательУведомления - СправочникСсылка.Пользователи.
//
// Возвращаемое значение:
//  Строка - Тема уведомления по задаче для выполнения по почте.
//
Функция СформироватьТемуУведомленияПоЗадачеСВозможностьюВыполненияПоПочте(ДействиеЗадачи, ПолучательУведомления) Экспорт
	
	КодЯзыкаПолучателя = ЛокализацияКонфигурацииПовтИсп.КодЯзыкаПользователя(ПолучательУведомления);
	
	Результат = СтрШаблон(
		"%1: %2",
		НСтр("ru = 'Задача'", КодЯзыкаПолучателя),
		ДействиеЗадачи);
	
	Возврат Результат;
	
КонецФункции

// Формирует текст уведомления по задаче, текст включает всю необходимую информацию
// для возможности выполнения задачи при ответе на уведомление.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//  ПолучательУведомления - СправочникСсылка.Пользователи.
//
// Возвращаемое значение:
//  Строка - Текст уведомления по задаче для выполнения по почте.
//
Функция СформироватьТекстУведомленияПоЗадачеСВозможностьюВыполненияПоПочте(ДействиеЗадачи, ПолучательУведомления) Экспорт
	
	// Определим файлы, не попавшие в уведомления.
	МассивФайлыНеПопавшиеВУведомления = Новый Массив;
	
	ТаблицаФайлов = ТаблицаФайловДляУведомления(ДействиеЗадачи, ПолучательУведомления);
	
	Если ТаблицаФайлов <> Неопределено Тогда
		
		МаксимальныйРазмерВложений = 
			Константы.МаксимальныйРазмерВложенийВУведомленииНовойЗадачи.Получить() * 1024 * 1024;
		
		ТекущийРазмерВложений = 0;
		
		Для Каждого СтрокаФайла из ТаблицаФайлов Цикл
			
			ТекущийРазмерВложений = ТекущийРазмерВложений + СтрокаФайла.ТекущаяВерсияРазмер;
			Если ТекущийРазмерВложений <= МаксимальныйРазмерВложений Тогда
				Продолжить;
			КонецЕсли;
			
			МассивФайлыНеПопавшиеВУведомления.Добавить(СтрШаблон(" - %1", СтрокаФайла.ИмяФайла));
			
		КонецЦикла;
		
	КонецЕсли;
	
	ФайлыНеПопавшиеВУведомления = СтрСоединить(МассивФайлыНеПопавшиеВУведомления, Символы.ПС);
	
	КодЯзыкаПолучателя = ЛокализацияКонфигурацииПовтИсп.КодЯзыкаПользователя(ПолучательУведомления);
	
	Если ЗначениеЗаполнено(ФайлыНеПопавшиеВУведомления) Тогда
		ФайлыНеПопавшиеВУведомления = СтрШаблон(
			НСтр("ru = '
				|Общий размер вложений превысил допустимый максимум.
				|Список файлов, которые не попали в уведомление:
				|%1
				|'", КодЯзыкаПолучателя),
			ФайлыНеПопавшиеВУведомления);
	КонецЕсли;
	
	// Получение ссылки ответов. 
	СсылкиОтветов = ПолучитьОтветыВВидеСсылокMailto(ДействиеЗадачи, ПолучательУведомления);
	
	Если СсылкиОтветов.КоличествоОтветов > 1 Тогда
		Комментарий = НСтр("ru = 'Не отвечайте на это письмо. Для выполнения задачи нажмите на одну из ссылок.'",
				КодЯзыкаПолучателя);
	ИначеЕсли СсылкиОтветов.КоличествоОтветов = 1 Тогда
		Комментарий = НСтр("ru = 'Не отвечайте на это письмо. Для выполнения задачи нажмите на ссылку.'",
			КодЯзыкаПолучателя);
	КонецЕсли;
	
	// Получение представления задачи.
	ПредставлениеЗадачи = РаботаСУведомлениями.СформироватьПредставлениеОбъекта(
		ДействиеЗадачи,
		Справочники.ВидыБизнесСобытий.НоваяЗадача,
		ПолучательУведомления,
		"");
		
	ПерваяСтрокаПредставления = СтрПолучитьСтроку(ПредставлениеЗадачи,1);
	
	ОстальнаяЧастьПредставления = СтрЗаменить(
		ПредставлениеЗадачи,
		ПерваяСтрокаПредставления + "
			|",
		"");
	
	// Формируем результат.
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1
		|%2
		|
		|%3
		|
		|%4
		|
		|<B>%5</B>",
		ПерваяСтрокаПредставления,
		ОстальнаяЧастьПредставления,
		ФайлыНеПопавшиеВУведомления,
		Комментарий,
		СсылкиОтветов.Текст);
		
	Возврат Результат;
		
КонецФункции

// Формирует файлы уведомления по задаче.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//  ПолучательУведомления - СправочникСсылка.Пользователи.
//
// Возвращаемое значение:
//  Массив - массив структур с полями:
//   * Ссылка - ссылка на файл
//   * ИмяФайла - строка
//
Функция СформироватьФайлыУведомленияПоЗадачеСВозможностьюВыполненияПоПочте(ДействиеЗадачи, ПолучательУведомления) Экспорт
	
	Файлы = Новый Массив;
	
	ТаблицаФайлов = ТаблицаФайловДляУведомления(ДействиеЗадачи, ПолучательУведомления);
	
	Если ТаблицаФайлов = Неопределено Тогда
		Возврат Файлы;
	КонецЕсли;
	
	МаксимальныйРазмерВложений = 
		Константы.МаксимальныйРазмерВложенийВУведомленииНовойЗадачи.Получить() * 1024 * 1024;
	
	ТекущийРазмерВложений = 0;
	
	Для Каждого СтрокаФайла из ТаблицаФайлов Цикл
		
		ТекущийРазмерВложений = ТекущийРазмерВложений + СтрокаФайла.ТекущаяВерсияРазмер;
		Если ТекущийРазмерВложений > МаксимальныйРазмерВложений Тогда
			Прервать;
		КонецЕсли;
		
		СтруктураФайла = Новый Структура("Ссылка, ИмяФайла");
		СтруктураФайла.Ссылка = СтрокаФайла.Ссылка;
		СтруктураФайла.ИмяФайла = СтрокаФайла.ИмяФайла;
		
		Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(СтрокаФайла.ВладелецФайла) Тогда
			
			ТребуетсяЗаполнитьВизуализацию = Ложь;
			ДокументПодписан = ДействияСервер.ДокументПодписан(СтрокаФайла.ВладелецФайла);
			
			Если СтрокаФайла.ПодписанЭП Или ДокументПодписан Тогда
				
				СсылкаВизуализации = РаботаСФайламиВызовСервера.ПолучитьФайлВизуализации(
					СтруктураФайла.Ссылка,
					Неопределено,
					ТребуетсяЗаполнитьВизуализацию,
					ДокументПодписан);
					
				Если ЗначениеЗаполнено(СсылкаВизуализации) Тогда
					СтруктураФайла.Ссылка = СсылкаВизуализации;
					РасширениеВизуализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаВизуализации, "ТекущаяВерсияРасширение");
					СтруктураФайла.ИмяФайла = СтрокаФайла.Наименование + "." + РасширениеВизуализации;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Файлы.Добавить(СтруктураФайла);
		
	КонецЦикла;
	
	Возврат Файлы;
	
КонецФункции

// Формирует текст ссылок MailTo для ответов на задачу.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//  ПолучательУведомления - СправочникСсылка.Пользователи.
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьОтветыВВидеСсылокMailto(ДействиеЗадачи, ПолучательУведомления) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Текст", "");
	Результат.Вставить("КоличествоОтветов", 0);
	
	ВариантыОтветовДляВыполненияЗадачи = ПолучитьСписокВариантовВыполненияЗадачи(
		ДействиеЗадачи,
		ПолучательУведомления);
	
	ВозможныеВариантыВыполнения = ВариантыОтветовДляВыполненияЗадачи.СписокВариантовОтветов;
	
	Результат.КоличествоОтветов = ВозможныеВариантыВыполнения.Количество();
		
	АдресЭлектроннойПочты =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты,
			"АдресЭлектроннойПочты");
	
	КодЯзыкаПолучателя = ЛокализацияКонфигурацииПовтИсп.КодЯзыкаПользователя(ПолучательУведомления);
	
	ТекстОтвета = "";
	Если ВариантыОтветовДляВыполненияЗадачи.ИспользоватьКомментарий Тогда
		
		ТекстСлужебногоОтвета = ТекстСлужебногоОтвета(КодЯзыкаПолучателя);
		ТекстОкончанияКомментария = ТекстОкончанияКомментария();
		
		ТекстОтвета = СтрШаблон(
			"%1%2",
			ТекстСлужебногоОтвета,
			ТекстОкончанияКомментария);
		
	КонецЕсли;
	
	Разделитель = "";
	
	Для Каждого ВариантОтвета Из ВозможныеВариантыВыполнения Цикл
		
		ТемаПисьма = ТемаСообщенияДляСсылкиMailTo(
			ДействиеЗадачи,
			ВариантОтвета.Значение,
			ВариантОтвета.Представление);
		ТекстОтветаДляРезультата = ТекстОтвета;
		
		СсылкаНаОтвет = ВстроеннаяПочтаСервер.СформироватьСсылкуMailto(
			АдресЭлектроннойПочты,,,
			ТемаПисьма,
			ТекстОтветаДляРезультата,
			ПредопределенноеЗначение("Перечисление.ТипыТекстовПочтовыхСообщений.HTML"),
			ВариантОтвета.Представление + "...");
			
		Результат.Текст = Результат.Текст + Разделитель + СсылкаНаОтвет;
		
		Разделитель = " / ";
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирует уведомление и помещает его в очередь на отправку по задаче.
// Возвращает Истину, если доступно формирование уведомления и уведомление сформировано.
//
// Параметры:
//  Задача - ЗадачаСсылка.ЗадачаИсполнителя - ссылка на задачу.
//
// Возвращаемое значение:
//  Булево
//
Функция СформироватьУведомлениеПоЗадаче(Задача) Экспорт
	
	Результат = Ложь;
	
	Если ПроверитьДоступностьФормированияУведомлений(Задача) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоЗадаче(
			Справочники.ВидыБизнесСобытий.НоваяЗадача,
			Задача,
			Задача);
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет доступность исполнения процедуры СформироватьУведомлениеПоЗадаче
//
// Параметры:
//  Задача - ЗадачаСсылка.ЗадачаИсполнителя - ссылка на задачу.
//
// Возвращаемое значение:
//  Булево - Истина, если доступно формирование уведомления по задаче.
//
Функция ПроверитьДоступностьФормированияУведомлений(Задача) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Задача) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача,
		"БизнесПроцесс, ТочкаМаршрута, Ссылка, Выполнена, ТекущийИсполнитель");
		
	МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(
		РеквизитыЗадачи.БизнесПроцесс);
		
	Если Не МенеджерПроцесса.ВозможноВыполнениеЗадачиПроцессаПоПочте(РеквизитыЗадачи) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РеквизитыЗадачи.ТекущийИсполнитель) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиПользователей.Пользователь КАК ТекущийИсполнитель
		|ПОМЕСТИТЬ ИсполнителиВЗадаче
		|ИЗ
		|	РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|ГДЕ
		|	СотрудникиПользователей.Сотрудник = &ТекущийИсполнитель
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&ТекущийИсполнитель
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(&ТекущийИсполнитель) = ТИП(Справочник.Пользователи)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсполнителиРолейИДелегаты.ИсполнительДелегат КАК ИсполнительДелегат
		|ПОМЕСТИТЬ ИсполнителиРолей
		|ИЗ
		|	ИсполнителиВЗадаче КАК ИсполнителиВЗадаче
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
		|		ПО ИсполнителиВЗадаче.ТекущийИсполнитель = ИсполнителиРолейИДелегаты.РольСотрудник
		|			И (ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""Задачи"", ""ЗадачиПросмотр""))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиПользователей.Пользователь КАК Исполнитель
		|ИЗ
		|	ИсполнителиРолей КАК ИсполнителиРолей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|		ПО ИсполнителиРолей.ИсполнительДелегат = СотрудникиПользователей.Сотрудник";
	
	Запрос.УстановитьПараметр("ТекущийИсполнитель", РеквизитыЗадачи.ТекущийИсполнитель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УИсполнителяВключеноВыполнениеЗадачПоПочте = Ложь;
	
	Пока Выборка.Следующий() Цикл
		УИсполнителяВключеноВыполнениеЗадачПоПочте = 
			РегистрыСведений.НастройкиУведомлений.ПолучитьДополнительнуюНастройку(
				Выборка.Исполнитель,
				Перечисления.НастройкиУведомлений.ВыполнениеЗадачПоПочте);
			
		Если УИсполнителяВключеноВыполнениеЗадачПоПочте Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат УИсполнителяВключеноВыполнениеЗадачПоПочте;
	
КонецФункции

// Обработчик регламентного задания ВыполнениеЗадачПоПочте.
// Предназначен для обработки писем пришедших в качестве ответов на уведомление
// о новой задаче на адрес системной учетной записи.
//
Процедура ВыполнитьЗадачиПоПочте() Экспорт
	
	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ВыполнениеЗадачПоПочте, Отказ);
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияДокументооборот.ЭтоЦентральныйУзел() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		ПараметрыЗагрузкиПочтовыхСообщений = ПараметрыЗагрузкиПочтовыхСообщений();
		Если ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Сообщения = ЛегкаяПочтаСервер.ПолучитьИнтернетПочта(ПараметрыЗагрузкиПочтовыхСообщений);
		
		МассивСообщенийКУдалению = Новый Массив;
		
		Для каждого Сообщение Из Сообщения Цикл
			Если ОбработатьСообщениеОВыполненииЗадачи(Сообщение) Тогда
				МассивСообщенийКУдалению.Добавить(Сообщение.Идентификатор);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивСообщенийКУдалению.Количество() > 0 Тогда
			ЛегкаяПочтаСервер.УдалитьСообщенияИнтернетПочта(
				Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты,
				ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль.Пароль,
				МассивСообщенийКУдалению);
		КонецЕсли;
		
	Исключение
		
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			ИмяСобытияДляЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			СообщениеОбОшибке);
			
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает имя события для журнала регистрации.
//
// Возвращаемое значение:
//  Строка
//
Функция ИмяСобытияДляЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Выполнение задач по почте'");
	
КонецФункции

// Возвращает таблицу значений с файлами указанных предметов
//
// Параметры:
//  Предметы - Массив - предметы задачи.
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * ИмяФайла - Строка - имя файла.
//   * ТекущаяВерсияРазмер - Число - размер файла.
//   * Ссылка - СправочникСсылка.Файлы - ссылка на файл.
//
Функция ПолучитьФайлыПредметов(Предметы)
	
	Если Предметы.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Файлы.Наименование + ""."" + Файлы.ТекущаяВерсияРасширение КАК ИмяФайла,
		|	Файлы.ТекущаяВерсияРазмер КАК ТекущаяВерсияРазмер,
		|	Файлы.ВладелецФайла КАК ВладелецФайла,
		|	Файлы.ПодписанЭП КАК ПодписанЭП,
		|	Файлы.Ссылка КАК Ссылка,
		|	Файлы.Наименование КАК Наименование,
		|	Файлы.ТекущаяВерсияРасширение КАК Расширение
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
		|ГДЕ
		|	Файлы.ВладелецФайла В(&ВладелецФайла)
		|	И НЕ Файлы.ПометкаУдаления
		|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Файлы.Наименование + ""."" + Файлы.ТекущаяВерсияРасширение,
		|	Файлы.ТекущаяВерсияРазмер,
		|	Файлы.ВладелецФайла,
		|	Файлы.ПодписанЭП,
		|	Файлы.Ссылка,
		|	Файлы.Наименование,
		|	Файлы.ТекущаяВерсияРасширение
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.Ссылка В(&ВладелецФайла)
		|	И НЕ Файлы.ПометкаУдаления";

	Запрос.УстановитьПараметр("ВладелецФайла", Предметы);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат.Выгрузить();
	КонецЕсли;
	
КонецФункции

// Возвращает список вариантов выполнения для задачи.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//  ПолучательУведомления - СправочникСсылка.Пользователи.
//
// Возвращаемое значение:
//  Структура
//   * СписокВариантовОтветов - СписокЗначений - список значений типа
//                              ПеречисленияСсылка.ВариантыВыполненияПроцессовИЗадач,
//                              с заполненным представлением; в нем содержатся варианты
//                              ответов.
//   * ИспользоватьКомментарий - Булево - Принимает значение Истина, если для текущей задачи
//                               ввод комментария обязателен.
//
Функция ПолучитьСписокВариантовВыполненияЗадачи(ДействиеЗадачи, ПолучательУведомления = Неопределено)
	
	Если ПолучательУведомления <> Неопределено Тогда
		КодЯзыкаПолучателя =
			ЛокализацияКонфигурацииПовтИсп.КодЯзыкаПользователя(ПолучательУведомления);
	Иначе
		КодЯзыкаПолучателя = ОбщегоНазначения.КодОсновногоЯзыка();
	КонецЕсли;
	
	НормализованнаяЗадача = ДействиеЗадачи;
	Если ТипЗнч(ДействиеЗадачи) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		
		РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДействиеЗадачи,
			"ВидДействия, Задача, Источник");
		Если ЗначениеЗаполнено(РеквизитыДействия.Источник)
			И ТипЗнч(РеквизитыДействия.Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			
			НормализованнаяЗадача = РеквизитыДействия.Источник;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДействиеЗадачи) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		НормализованнаяЗадача = ДействиеЗадачи;
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный тип задачи %1 (%2).'"),
			ДействиеЗадачи,
			ТипЗнч(ДействиеЗадачи));
			
	КонецЕсли;
	
	Если ТипЗнч(НормализованнаяЗадача) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			НормализованнаяЗадача, "БизнесПроцесс, ТочкаМаршрута");
			
		МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(
			СтруктураРеквизитов.БизнесПроцесс);
		
		ВозможныеВариантыВыполнения =
			МенеджерПроцесса.ВариантыОтветовДляВыполненияЗадачиПоПочте(
				НормализованнаяЗадача,
				СтруктураРеквизитов.БизнесПроцесс,
				СтруктураРеквизитов.ТочкаМаршрута,
				КодЯзыкаПолучателя);
		
	Иначе
		
		ВозможныеВариантыВыполнения = Новый Структура;
		ВозможныеВариантыВыполнения.Вставить("СписокВариантовОтветов", Новый СписокЗначений);
		ВозможныеВариантыВыполнения.Вставить("ИспользоватьКомментарий", Истина);
		
		ВидЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДействия.Задача, "ВидЗадачи");
		ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
		КешНСИЗадач = РаботаСЗадачамиПовтИсп.КешНСИЗадач();
		
		// Как в МультиязычностьСервер.ЭтоОсновнойЯзык().
		МультиязычностьСерверЭтоОсновнойЯзык = СтрСравнить(ОбщегоНазначения.КодОсновногоЯзыка(), КодЯзыкаПолучателя) = 0;
		КонфигурацияИспользуетТолькоОдинЯзык = МультиязычностьПовтИсп.КонфигурацияИспользуетТолькоОдинЯзык(Ложь);
		
		УПолучателяЯзык1 = Не КонфигурацияИспользуетТолькоОдинЯзык И Не МультиязычностьСерверЭтоОсновнойЯзык;
		
		Если РеквизитыДействия.ВидДействия = ДанныеВидаЗадачи.ВидДействияИсполнителя Тогда
			
			Если ЗначениеЗаполнено(ДанныеВидаЗадачи.РезультатИсполнителяВыполнена) Тогда
				
				РеквизитыРезультата =
					КешНСИЗадач.РеквизитыРезультатовДействийЗадач[
						ДанныеВидаЗадачи.РезультатИсполнителяВыполнена];
				
				Если УПолучателяЯзык1 Тогда
					ЗаголовокКоманды = РеквизитыРезультата.ЗаголовокКомандыЯзык1;
				Иначе
					ЗаголовокКоманды = РеквизитыРезультата.ЗаголовокКоманды;
				КонецЕсли;
				
				ВозможныеВариантыВыполнения.СписокВариантовОтветов.Добавить(
					Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно,
					ЗаголовокКоманды);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеВидаЗадачи.РезультатИсполнителяВыполненаСЗамечаниями)
				И ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеСЗамечаниями") Тогда
				
				РеквизитыРезультата =
					КешНСИЗадач.РеквизитыРезультатовДействийЗадач[
						ДанныеВидаЗадачи.РезультатИсполнителяВыполненаСЗамечаниями];
				
				Если УПолучателяЯзык1 Тогда
					ЗаголовокКоманды = РеквизитыРезультата.ЗаголовокКомандыЯзык1;
				Иначе
					ЗаголовокКоманды = РеквизитыРезультата.ЗаголовокКоманды;
				КонецЕсли;
				
				ВозможныеВариантыВыполнения.СписокВариантовОтветов.Добавить(
					Перечисления.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями,
					ЗаголовокКоманды);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеВидаЗадачи.РезультатИсполнителяВыполненаОтрицательно) Тогда
				
				РеквизитыРезультата =
					КешНСИЗадач.РеквизитыРезультатовДействийЗадач[
						ДанныеВидаЗадачи.РезультатИсполнителяВыполненаОтрицательно];
				
				Если УПолучателяЯзык1 Тогда
					ЗаголовокКоманды = РеквизитыРезультата.ЗаголовокКомандыЯзык1;
				Иначе
					ЗаголовокКоманды = РеквизитыРезультата.ЗаголовокКоманды;
				КонецЕсли;
				
				ВозможныеВариантыВыполнения.СписокВариантовОтветов.Добавить(
					Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно,
					ЗаголовокКоманды);
				
			КонецЕсли;
			
		ИначеЕсли РеквизитыДействия.ВидДействия = ДанныеВидаЗадачи.ВидДействияПроверяющего Тогда
			
			Если ЗначениеЗаполнено(ДанныеВидаЗадачи.РезультатПроверяющегоПроверено) Тогда
				
				РеквизитыРезультата =
					КешНСИЗадач.РеквизитыРезультатовДействийЗадач[
						ДанныеВидаЗадачи.РезультатПроверяющегоПроверено];
				
				Если УПолучателяЯзык1 Тогда
					ЗаголовокКоманды = РеквизитыРезультата.ЗаголовокКомандыЯзык1;
				Иначе
					ЗаголовокКоманды = РеквизитыРезультата.ЗаголовокКоманды;
				КонецЕсли;
				
				ВозможныеВариантыВыполнения.СписокВариантовОтветов.Добавить(
					Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно,
					ЗаголовокКоманды);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеВидаЗадачи.РезультатПроверяющегоВозвращеноНаДоработку) Тогда
				
				РеквизитыРезультата =
					КешНСИЗадач.РеквизитыРезультатовДействийЗадач[
						ДанныеВидаЗадачи.РезультатПроверяющегоВозвращеноНаДоработку];
				
				Если УПолучателяЯзык1 Тогда
					ЗаголовокКоманды = РеквизитыРезультата.ЗаголовокКомандыЯзык1;
				Иначе
					ЗаголовокКоманды = РеквизитыРезультата.ЗаголовокКоманды;
				КонецЕсли;
				
				ВозможныеВариантыВыполнения.СписокВариантовОтветов.Добавить(
					Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно,
					ЗаголовокКоманды);
				
			КонецЕсли;
			
		Иначе
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестны варианты выполнения задачи %1.'"),
				РеквизитыДействия.ВидДействия);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозможныеВариантыВыполнения;
	
КонецФункции

// Возвращает текст сообщения для ссылки mailto.
//
// Параметры:
//  КодЯзыка - Строка - код языка, на котором формируется текст сообщения.
//
// Возвращаемое значение:
//  Строка
//
Функция ТекстСообщенияДляСсылкиMailTo(КодЯзыка)
	
	Возврат НСтр("ru = '1. Приложите файлы, если нужно.
		|2. Впишите ваш комментарий по выполнению задачи.
		|
		|Комментарий:'", КодЯзыка);
	
КонецФункции

// Возвращает текст окончания комментария.
//
// Возвращаемое значение:
//  Строка - Текст окончания комментария.
//
Функция ТекстОкончанияКомментария()
	
	ТекстОкончанияКомментария = "________________________________________________";
	
	Возврат ТекстОкончанияКомментария;
	
КонецФункции

// Возвращает тему сообщения для ссылки mailto по задаче и варианту выполнения.
//
// Параметры:
//  ДействиеЗадачи - ДокументСслыка.ДействиеЗадачи.
//  ВариантВыполнения - ПеречисленияСсылка.ВариантыВыполненияПроцессовИЗадач - ссылка на вариант выполнения.
//  ПредставлениеВариантаВыполнения - Строка - представление варианта выполнения.
//
// Возвращаемое значение:
//  Строка
//
Функция ТемаСообщенияДляСсылкиMailTo(ДействиеЗадачи, ВариантВыполнения, ПредставлениеВариантаВыполнения)
	
	ДлинаТемыОтветногоПисьма = ВыполнениеЗадачПоПочтеПовтИсп.ДлинаТемыОтветногоПисьма();
	
	// Фоомируем служебную информацию.
	СлужебнаяИнформация = "#" + ВыполнениеЗадачПоПочтеПовтИсп.ИдентификаторЗадачи(ДействиеЗадачи)
		+ "#" + ЧисловойИдентификаторВариантаВыполнения(ВариантВыполнения)
		+ "#V1";
	
	// Формируем тему.
	ТемаПисьма = ПредставлениеВариантаВыполнения + ": " + Строка(ДействиеЗадачи);
	ДлиннаТемы = СтрДлина(ТемаПисьма);
	
	// Если длинна темы + служебной информации больше допустимой длины темы ответного письма,
	// то укорачиваем тему.
	Если ДлиннаТемы + ДлинаСлужебнойИнформации() > ДлинаТемыОтветногоПисьма Тогда
		ТемаПисьма = Лев(ТемаПисьма, ДлинаТемыОтветногоПисьма - ДлинаСлужебнойИнформации())
	КонецЕсли;
	
	Возврат ТемаПисьма + СлужебнаяИнформация;
	
КонецФункции

// Возвращает длину служебной информации.
//
// Возвращаемое значение:
//  Число
//
Функция ДлинаСлужебнойИнформации()
	
	Возврат 42;
	
КонецФункции

// Возвращает длину старой служебной информации.
//
// Возвращаемое значение:
//  Число
//
Функция ДлинаСтаройСлужебнойИнформации()
	
	Возврат 39;
	
КонецФункции

// Возвращает параметры для загрузки почтовых сообщений.
//
// Возвращаемое значение:
//  Структура - см. ЛегкаяПочтаСервер.ПолучитьПараметрыЗагрузкиПочтовыхСообщений
//
Функция ПараметрыЗагрузкиПочтовыхСообщений()
	
	ПараметрыЗагрузкиПочтовыхСообщений = 
		ЛегкаяПочтаСервер.ПолучитьПараметрыЗагрузкиПочтовыхСообщений();
	
	ПараметрыЗагрузкиПочтовыхСообщений.Вставить(
		"НепрочитанныеСообщения", Истина);
	ПараметрыЗагрузкиПочтовыхСообщений.Вставить(
		"УникальныйИдентификатор", Новый УникальныйИдентификатор);
	
	ДоступныеПрофили = 
		ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.ДоступныеПрофили;
		
	ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль = Неопределено;
	
	СистемнаяУчетнаяЗапись = 
		Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	
	Для Каждого СтруктураПрофиля Из ДоступныеПрофили Цикл
		Если СтруктураПрофиля.Профиль = СистемнаяУчетнаяЗапись Тогда
			
			ПараметрыЗагрузкиПочтовыхСообщений.НастройкиПрофилейДляЗагрузки.Профиль = 
				СтруктураПрофиля;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПараметрыЗагрузкиПочтовыхСообщений;
	
КонецФункции

// Обрабатывает сообщение о выполнении задачи.
// При успешной обработке возвращает истину. В случае возникновения ошибки
// во время обработки возвращает ложь. 
// В тексте сообщения производит поиск ответа для выполнения задачи.
// При обнаружении ответа, выполняет задачу с указанным ответом.
// Результат обработки записывает в регистр сведений ПротоколВыполненияЗадачПоПочте.
//
// Параметры:
//  Сообщение - Структура - см. ЛегкаяПочтаКлиентСервер.СформироватьСтруктуруСообщения
//
// Возвращаемое значение:
//  Булево
//
Функция ОбработатьСообщениеОВыполненииЗадачи(Сообщение)
	
	ЗадачаСсылка = ПредопределенноеЗначение("Задача.ЗадачаИсполнителя.ПустаяСсылка");
	
	ПараметрыОтправителя = РаботаСоСтроками.РазложитьПредставлениеАдресаЭлектроннойПочты(Сообщение.Отправитель);
	
	АдресДляВыполненияЗадачПоПочте = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты,
		"АдресЭлектроннойПочты");
	Если НРег(ПараметрыОтправителя.Адрес) = НРег(АдресДляВыполненияЗадачПоПочте) Тогда
		Возврат Истина;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		// Определяем исполнителя задачи по отправителю сообщения.
		КодЯзыкаИсполнителя = ОбщегоНазначения.КодОсновногоЯзыка();
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Сотрудники.Владелец КАК ФизЛицо,
			|	СотрудникиКонтактнаяИнформация.Ссылка КАК Сотрудник
			|ПОМЕСТИТЬ НайденныеСотрудникиПоАдресу
			|ИЗ
			|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО (СотрудникиКонтактнаяИнформация.Ссылка = Сотрудники.Ссылка)
			|			И НЕ Сотрудники.ПометкаУдаления
			|			И Сотрудники.Действует
			|ГДЕ
			|	СотрудникиКонтактнаяИнформация.АдресЭП = &АдресЭП
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	Сотрудники.Владелец КАК ФизЛицо,
			|	СотрудникиПользователей.Сотрудник
			|ИЗ
			|	РегистрСведений.СпособыУведомленияПользователей КАК СпособыУведомленияПользователей
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
			|		ПО СпособыУведомленияПользователей.Пользователь = СотрудникиПользователей.Пользователь
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО (СотрудникиПользователей.Сотрудник = Сотрудники.Ссылка)
			|			И НЕ Сотрудники.ПометкаУдаления
			|			И Сотрудники.Действует
			|ГДЕ
			|	СпособыУведомленияПользователей.ДанныеСпособа = &АдресЭП
			|		И СпособыУведомленияПользователей.СпособУведомления = ЗНАЧЕНИЕ(Перечисление.СпособыУведомления.ПоПочте)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ФизЛицо
			|ИЗ
			|	НайденныеСотрудникиПоАдресу
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Сотрудник
			|ИЗ
			|	НайденныеСотрудникиПоАдресу");
		Запрос.УстановитьПараметр("АдресЭП", ПараметрыОтправителя.Адрес);
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		ФизЛицаСотрудников = 
			РезультатЗапроса[РезультатЗапроса.ВГраница()-1].Выгрузить().ВыгрузитьКолонку("ФизЛицо");
		ИсполнителиЗадачиПоЭлАдресу = 
			РезультатЗапроса[РезультатЗапроса.ВГраница()].Выгрузить().ВыгрузитьКолонку("Сотрудник");
		ПользователиСотрудников = Сотрудники.ПользователиСотрудников(ИсполнителиЗадачиПоЭлАдресу);
		
		Если ФизЛицаСотрудников.Количество() > 1
			Или ПользователиСотрудников.Количество() > 1 Тогда
			
			РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ПоАдресуОтправителяНайденоНесколькоИсполнителей,
				ЗадачаСсылка);
			
			ОтправитьУведомлениеОбОшибке(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ПоАдресуОтправителяНайденоНесколькоИсполнителей,
				ЗадачаСсылка,
				КодЯзыкаИсполнителя);
			
			ЗафиксироватьТранзакцию();
			Возврат Истина;
			
		ИначеЕсли ФизЛицаСотрудников.Количество() = 0
			Или ИсполнителиЗадачиПоЭлАдресу.Количество() = 0
			Или ПользователиСотрудников.Количество() = 0 Тогда
			
			РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ПоАдресуОтправителяНеНайденИсполнительЗадачи,
				ЗадачаСсылка);
			
			ЗафиксироватьТранзакцию();
			Возврат Истина;
			
		КонецЕсли;
		
		ПользовательПоЭлАдресу = ПользователиСотрудников[0];
		ОсновнойСотрудник = Сотрудники.ОсновнойСотрудникПользователя(ПользовательПоЭлАдресу);
		
		// Определяем задачу и вариант ее исполнения по теме и тексту сообщения.		
		ЗадачаИВариантВыполнения = ЗадачаИВариантВыполненияПоТемеСообщения(
			Сообщение.Тема, КодЯзыкаИсполнителя);
		
		Если Не ЗначениеЗаполнено(ЗадачаИВариантВыполнения.Задача)
			И Не ЗначениеЗаполнено(ЗадачаИВариантВыполнения.ВариантВыполнения) Тогда 
			
			ЗадачаИВариантВыполнения = ЗадачаИВариантВыполненияПоТекстуСообщения(
				Сообщение.Текст, КодЯзыкаИсполнителя);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЗадачаИВариантВыполнения.Задача) Тогда
		
			РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ВСообщенииНеУказанИдентификаторЗадачи,
				ЗадачаСсылка);
				
			ОтправитьУведомлениеОбОшибке(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ВСообщенииНеУказанИдентификаторЗадачи,
				ЗадачаСсылка,
				КодЯзыкаИсполнителя);
				
			ЗафиксироватьТранзакцию();
			Возврат Истина;
			
		КонецЕсли;
		
		Если Не ОбщегоНазначения.СсылкаСуществует(ЗадачаИВариантВыполнения.Задача) Тогда
			
			РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение, Перечисления.РезультатВыполненияЗадачиПоПочте.ЗадачаНеНайдена,
				ЗадачаСсылка);
				
			ОтправитьУведомлениеОбОшибке(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ЗадачаНеНайдена,
				ЗадачаСсылка,
				КодЯзыкаИсполнителя);
			
			ЗафиксироватьТранзакцию();
			Возврат Истина;
			
		КонецЕсли;
		
		Если ЗадачаИВариантВыполнения.ВариантВыполнения = Неопределено Тогда
				
			РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ВСообщенииНеУказанИдентификаторОтвета,
				ЗадачаСсылка);
			
			ОтправитьУведомлениеОбОшибке(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ВСообщенииНеУказанИдентификаторОтвета,
				ЗадачаСсылка,
				КодЯзыкаИсполнителя);
			
			ЗафиксироватьТранзакцию();
			Возврат Истина;
			
		КонецЕсли;
		
		ЗадачаСсылка = ЗадачаИВариантВыполнения.Задача;
		ВариантВыполненияЗадачи = ЗадачаИВариантВыполнения.ВариантВыполнения;
		КодЯзыкаИсполнителя = ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(ЗадачаСсылка); 
		
		// Получаем реквизиты задачи в базе.
		Если ТипЗнч(ЗадачаСсылка) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
			
			ИсточникДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаСсылка, "Источник");
			Если ТипЗнч(ИсточникДействия) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
				И ЗначениеЗаполнено(ИсточникДействия) Тогда
				ЗадачаСсылка = ИсточникДействия;
			КонецЕсли;
			
		КонецЕсли;
		
		// Проверяем соответствие результата выполнения и задачи.		
		Если Не ПроверитьСоответствиеРезультатВыполненияИЗадачи(ЗадачаСсылка, ВариантВыполненияЗадачи) Тогда
			
			РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ЗадачеНеСоответствуетЗначениеОтвета,
				ЗадачаСсылка);
			
			ОтправитьУведомлениеОбОшибке(
				Сообщение,
				Перечисления.РезультатВыполненияЗадачиПоПочте.ЗадачеНеСоответствуетЗначениеОтвета,
				ЗадачаСсылка,
				КодЯзыкаИсполнителя);
			
			ЗафиксироватьТранзакцию();
			Возврат Истина;
			
		КонецЕсли;
		
		Если ТипЗнч(ЗадачаСсылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			
			РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка,
				"ТекущийИсполнитель,
				|Выполнена,
				|СостояниеБизнесПроцесса,
				|ПометкаУдаления,
				|БизнесПроцесс,
				|ТочкаМаршрута,
				|Ссылка,
				|ИдентификаторИсполнителя,
				|Исполнитель,
				|РольИсполнителя");
			
			// Проверяем возможность выполнения задачи по почте.
			
			МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(
				РеквизитыЗадачи.БизнесПроцесс);
			
			Если Не МенеджерПроцесса.ВозможноВыполнениеЗадачиПроцессаПоПочте(РеквизитыЗадачи) Тогда
				
				ТекстПредупреждения = НСтр(
					"ru = 'Задача не может быть выполнена по почте.
					|Войдите в программу и выполните задачу из ее карточки или списка ""Задачи мне.""'",
					КодЯзыкаИсполнителя);
				
				РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
					Сообщение,
					Перечисления.РезультатВыполненияЗадачиПоПочте.ЗапретВыполнения,
					ЗадачаСсылка,
					ТекстПредупреждения);
				
				ОтправитьУведомлениеОбОшибке(
					Сообщение,
					Перечисления.РезультатВыполненияЗадачиПоПочте.ЗапретВыполнения,
					ЗадачаСсылка,
					КодЯзыкаИсполнителя,
					ТекстПредупреждения);
				
				ЗафиксироватьТранзакцию();
				
				Возврат Истина;
				
			КонецЕсли;
			
			// Проверяем возможность выполнения задачи.	
			Если РеквизитыЗадачи.Выполнена = Истина
					Или РеквизитыЗадачи.СостояниеБизнесПроцесса <> Перечисления.СостоянияБизнесПроцессов.Активен
					Или РеквизитыЗадачи.ПометкаУдаления Тогда
				
				РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
					Сообщение,
					Перечисления.РезультатВыполненияЗадачиПоПочте.ЗадачаНеАктивна,
					ЗадачаСсылка);
					
				ЗафиксироватьТранзакцию();
				Возврат Истина;
				
			КонецЕсли;	
		
			// Проверяем соответствие исполнителя задачи в базе и исполнителя определенному по отправителю сообщения.		
			ИсполнительЗадачи = РеквизитыЗадачи.ТекущийИсполнитель;
			ФактическийИсполнительЗадачи = Справочники.Сотрудники.ПустаяСсылка();
	
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ИсполнителиРолейИДелегаты.РольСотрудник КАК РольСотрудник,
				|	ИсполнителиРолейИДелегаты.ИсполнительДелегат КАК ИсполнительДелегат
				|ПОМЕСТИТЬ СотрудникиИсполнителиЗадач
				|ИЗ
				|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
				|ГДЕ
				|	ИсполнителиРолейИДелегаты.ИсполнительДелегат В(&ИсполнителиЗадачиПоЭлАдресу)
				|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""Задачи"", ""ЗадачиПросмотр"")
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	СотрудникиИсполнителиЗадач.РольСотрудник КАК РольСотрудник,
				|	СотрудникиИсполнителиЗадач.ИсполнительДелегат КАК ИсполнительДелегат
				|ПОМЕСТИТЬ ИсполнителиЗадач
				|ИЗ
				|	СотрудникиИсполнителиЗадач КАК СотрудникиИсполнителиЗадач
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	СотрудникиПользователей.Пользователь КАК РольСотрудник,
				|	СотрудникиИсполнителиЗадач.ИсполнительДелегат КАК ИсполнительДелегат
				|ИЗ
				|	СотрудникиИсполнителиЗадач КАК СотрудникиИсполнителиЗадач
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
				|		ПО СотрудникиИсполнителиЗадач.РольСотрудник = СотрудникиПользователей.Сотрудник			
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ИсполнителиЗадач.ИсполнительДелегат КАК Исполнитель,
				|	ВЫБОР
				|		КОГДА ИсполнителиЗадач.ИсполнительДелегат = &ТекущийИсполнитель
				|			ТОГДА 1
				|		КОГДА НЕ ЕСТЬNULL(ОсновныеСотрудники.Сотрудник,
				|			ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
				|			ТОГДА 2
				|		КОГДА НЕ ЕСТЬNULL(Сотрудники.Ссылка,
				|			ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
				|			ТОГДА 3
				|		ИНАЧЕ 4
				|	КОНЕЦ КАК Приоритет
				|ИЗ
				|	ИсполнителиЗадач КАК ИсполнителиЗадач
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
				|		ПО ИсполнителиЗадач.ИсполнительДелегат = Сотрудники.Ссылка
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСотрудники КАК ОсновныеСотрудники
				|		ПО Сотрудники.Владелец = ОсновныеСотрудники.Сотрудник
				|ГДЕ
				|	ИсполнителиЗадач.РольСотрудник = &ТекущийИсполнитель
				|УПОРЯДОЧИТЬ ПО
				|	Приоритет");
			Запрос.УстановитьПараметр("ТекущийИсполнитель", РеквизитыЗадачи.ТекущийИсполнитель);
			Запрос.УстановитьПараметр("ИсполнителиЗадачиПоЭлАдресу", ИсполнителиЗадачиПоЭлАдресу);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Не Выборка.Следующий() Тогда
				
				РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
					Сообщение,
					Перечисления.РезультатВыполненияЗадачиПоПочте.ДляЗадачиОпределенДругойИсполнитель,
					ЗадачаСсылка);
				
				ОтправитьУведомлениеОбОшибке(
					Сообщение,
					Перечисления.РезультатВыполненияЗадачиПоПочте.ДляЗадачиОпределенДругойИсполнитель,
					ЗадачаСсылка,
					КодЯзыкаИсполнителя);
					
				ЗафиксироватьТранзакцию();
				Возврат Истина;
				
			КонецЕсли;
			
			// Уточняем исполнителя задачи в соотвествии с настройкой ФактическийИсполнительЗадач.
			Если ТипЗнч(РеквизитыЗадачи.ТекущийИсполнитель) = Тип("СправочникСсылка.Пользователи")
					Или ТипЗнч(РеквизитыЗадачи.ТекущийИсполнитель) = Тип("СправочникСсылка.Сотрудники") Тогда
				
				ФактическийИсполнительЗадачи = Выборка.Исполнитель;
			Иначе
				ИсполнительЗадачи = Выборка.Исполнитель;			
			КонецЕсли;
			
			// Выполняем задачу.				
			КомментарийВСообщении = КомментарийПоТекстуСообщения(Сообщение.Текст, КодЯзыкаИсполнителя);
			
			Параметры = Новый Структура;
			Параметры.Вставить("ВариантВыполнения", ВариантВыполненияЗадачи);
			Параметры.Вставить("Комментарий", КомментарийВСообщении);
			Параметры.Вставить("ИсполнительЗадачиПоПочте", ИсполнительЗадачи);
			Параметры.Вставить("ПользовательИсполнитель", Сотрудники.ПользовательСотрудника(ИсполнительЗадачи));
			Параметры.Вставить("ЭтоВыполнениеЗадачиПоПочте", Истина);
			
			ФактическийИсполнительПолный = Неопределено;
			Если ЗначениеЗаполнено(ИсполнительЗадачи) Тогда
				
				ФактическийИсполнительПолный = Справочники.ФактическиеИсполнители.НайтиСоздатьФактическогоИсполнителя(
					РеквизитыЗадачи.ТекущийИсполнитель, 
					ИсполнительЗадачи, 
					ИсполнительЗадачи,
					ИсполнительЗадачи);
				
			КонецЕсли;	
					
			Если ЗначениеЗаполнено(ФактическийИсполнительЗадачи) Тогда
				Параметры.Вставить("ФактическийИсполнительЗадачи", ФактическийИсполнительЗадачи);
			КонецЕсли;
	
			Если ЗначениеЗаполнено(ФактическийИсполнительПолный) Тогда
				Параметры.Вставить("ФактическийИсполнительПолный", ФактическийИсполнительПолный);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитыЗадачи.БизнесПроцесс) 
				И ТипЗнч(РеквизитыЗадачи.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Подписание") Тогда		
					
				ПодписывающиеМассив = ИнтеграцияЗадач.ПодписывающиеПоЗадачеПодписания(РеквизитыЗадачи);
				Если ПодписывающиеМассив.Количество() = 1 Тогда
	
					Параметры.Вставить("ВыбранныйПодписывающийИлиЗамещающий", ПодписывающиеМассив[0].Подписывающий);
					
				Иначе
					Если ПодписывающиеМассив.Количество() = 0 Тогда
						ТекстПредупреждения = НСтр("ru = 'Не найдены сотрудники, подписывающие документ.'");
					ИначеЕсли ПодписывающиеМассив.Количество() > 1 Тогда
						ТекстПредупреждения = НСтр("ru = 'Необходимо указать сотрудника, у которого вы подписали документ.'");
					КонецЕсли;
					
					РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
						Сообщение,
						Перечисления.РезультатВыполненияЗадачиПоПочте.ЗапретВыполнения,
						ЗадачаСсылка,
						ТекстПредупреждения);
				
					ОтправитьУведомлениеОбОшибке(
						Сообщение,
						Перечисления.РезультатВыполненияЗадачиПоПочте.ЗапретВыполнения,
						ЗадачаСсылка,
						КодЯзыкаИсполнителя,
						ТекстПредупреждения);
					
					ЗафиксироватьТранзакцию();
					
					Возврат Истина;
									
				КонецЕсли;
			КонецЕсли;
			
			ОбработатьВложенияВСообщении(
				ЗадачаСсылка,
				Сообщение,
				ОсновнойСотрудник);
			
			РезультатПроверки = БизнесПроцессыИЗадачиСервер.ПроверитьУсловияЗапретаВыполнения(ЗадачаСсылка, Параметры);
			Если РезультатПроверки.ЗапретВыполнения Тогда
				
				РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
					Сообщение,
					Перечисления.РезультатВыполненияЗадачиПоПочте.ЗапретВыполнения,
					ЗадачаСсылка,
					РезультатПроверки.ТекстПредупреждения);
				
				ОтправитьУведомлениеОбОшибке(
					Сообщение,
					Перечисления.РезультатВыполненияЗадачиПоПочте.ЗапретВыполнения,
					ЗадачаСсылка,
					КодЯзыкаИсполнителя,
					РезультатПроверки.ТекстПредупреждения);
				
				ЗафиксироватьТранзакцию();
				
				Возврат Истина;
				
			КонецЕсли;
			
			ОлицетворяемыйПользовательПрежний = 
				ПользователиДокументооборот.ОлицетворяемыйПользователь();
			
			ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(
				ПользовательПоЭлАдресу);
			
			Попытка
				
				ВыполнениеЗадачСервер.ВыполнитьЗадачуПоПочте(ЗадачаСсылка, Параметры);
				
			Исключение
				
				ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(
					ОлицетворяемыйПользовательПрежний);
				
				ВызватьИсключение; 
		
			КонецПопытки;
			
			ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(
					ОлицетворяемыйПользовательПрежний);
			
			РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение, 
				Перечисления.РезультатВыполненияЗадачиПоПочте.Выполнена,
				ЗадачаСсылка,
				Строка(ВариантВыполненияЗадачи) + ". " + КомментарийВСообщении);
				
			ЗафиксироватьТранзакцию();
			Возврат Истина;
			
		ИначеЕсли ТипЗнч(ЗадачаСсылка) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
			
			РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ЗадачаСсылка,
				"ВидДействия, Задача, Исполнитель");
				
			ДанныеДействияЗадачи = РаботаСЗадачами.ДанныеДействияЗадачи(ЗадачаСсылка);
			Если ДанныеДействияЗадачи = Неопределено
				Или Не ДанныеДействияЗадачи.ОжидаетВыполнения Тогда
				
				РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
					Сообщение,
					Перечисления.РезультатВыполненияЗадачиПоПочте.ЗадачаНеАктивна,
					ЗадачаСсылка);
					
				ЗафиксироватьТранзакцию();
				Возврат Истина;
				
			КонецЕсли;
			
			// Проверяем соответствие исполнителя задачи в базе и исполнителя определенному по отправителю сообщения.		
			ИсполнительЗадачи = РеквизитыДействия.Исполнитель;
			ФактическийИсполнительЗадачи = Справочники.Сотрудники.ПустаяСсылка();
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ИсполнителиРолейИДелегаты.РольСотрудник КАК РольСотрудник,
				|	ИсполнителиРолейИДелегаты.ИсполнительДелегат КАК ИсполнительДелегат
				|ПОМЕСТИТЬ СотрудникиИсполнителиЗадач
				|ИЗ
				|	РегистрСведений.ИсполнителиРолейИДелегаты КАК ИсполнителиРолейИДелегаты
				|ГДЕ
				|	ИсполнителиРолейИДелегаты.ИсполнительДелегат В(&ИсполнителиЗадачиПоЭлАдресу)
				|	И ИсполнителиРолейИДелегаты.ИмяОбластиДелегирования В ("""", ""Задачи"", ""ЗадачиПросмотр"")
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	СотрудникиИсполнителиЗадач.РольСотрудник КАК РольСотрудник,
				|	СотрудникиИсполнителиЗадач.ИсполнительДелегат КАК ИсполнительДелегат
				|ПОМЕСТИТЬ ИсполнителиЗадач
				|ИЗ
				|	СотрудникиИсполнителиЗадач КАК СотрудникиИсполнителиЗадач
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	СотрудникиПользователей.Пользователь КАК РольСотрудник,
				|	СотрудникиИсполнителиЗадач.ИсполнительДелегат КАК ИсполнительДелегат
				|ИЗ
				|	СотрудникиИсполнителиЗадач КАК СотрудникиИсполнителиЗадач
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
				|		ПО СотрудникиИсполнителиЗадач.РольСотрудник = СотрудникиПользователей.Сотрудник			
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ИсполнителиЗадач.ИсполнительДелегат КАК Исполнитель,
				|	ВЫБОР
				|		КОГДА ИсполнителиЗадач.ИсполнительДелегат = &ТекущийИсполнитель
				|			ТОГДА 1
				|		КОГДА НЕ ЕСТЬNULL(ОсновныеСотрудники.Сотрудник,
				|			ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
				|			ТОГДА 2
				|		КОГДА НЕ ЕСТЬNULL(Сотрудники.Ссылка,
				|			ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
				|			ТОГДА 3
				|		ИНАЧЕ 4
				|	КОНЕЦ КАК Приоритет
				|ИЗ
				|	ИсполнителиЗадач КАК ИсполнителиЗадач
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
				|		ПО ИсполнителиЗадач.ИсполнительДелегат = Сотрудники.Ссылка
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСотрудники КАК ОсновныеСотрудники
				|		ПО Сотрудники.Владелец = ОсновныеСотрудники.Сотрудник
				|ГДЕ
				|	ИсполнителиЗадач.РольСотрудник = &ТекущийИсполнитель
				|УПОРЯДОЧИТЬ ПО
				|	Приоритет");
			Запрос.УстановитьПараметр("ТекущийИсполнитель", РеквизитыДействия.Исполнитель);
			Запрос.УстановитьПараметр("ИсполнителиЗадачиПоЭлАдресу", ИсполнителиЗадачиПоЭлАдресу);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Не Выборка.Следующий() Тогда
				
				РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
					Сообщение,
					Перечисления.РезультатВыполненияЗадачиПоПочте.ДляЗадачиОпределенДругойИсполнитель,
					ЗадачаСсылка);
				
				ОтправитьУведомлениеОбОшибке(
					Сообщение,
					Перечисления.РезультатВыполненияЗадачиПоПочте.ДляЗадачиОпределенДругойИсполнитель,
					ЗадачаСсылка,
					КодЯзыкаИсполнителя);
					
				ЗафиксироватьТранзакцию();
				Возврат Истина;
				
			КонецЕсли;
			
			// Уточняем исполнителя задачи в соотвествии с настройкой ФактическийИсполнительЗадач.
			Если ТипЗнч(РеквизитыДействия.Исполнитель) = Тип("СправочникСсылка.Пользователи")
					Или ТипЗнч(РеквизитыДействия.Исполнитель) = Тип("СправочникСсылка.Сотрудники") Тогда
				
				ФактическийИсполнительЗадачи = Выборка.Исполнитель;
			Иначе
				ИсполнительЗадачи = Выборка.Исполнитель;
			КонецЕсли;
			
			// Выполняем задачу.
			КомментарийВСообщении = КомментарийПоТекстуСообщения(Сообщение.Текст, КодЯзыкаИсполнителя);
			
			ФактическийИсполнительПолный = Неопределено;
			Если ЗначениеЗаполнено(ИсполнительЗадачи) Тогда
				
				ФактическийИсполнительПолный = Справочники.ФактическиеИсполнители.НайтиСоздатьФактическогоИсполнителя(
					РеквизитыДействия.Исполнитель, 
					ИсполнительЗадачи,
					ИсполнительЗадачи,
					ИсполнительЗадачи);
				
			КонецЕсли;
			
			ДействияКВыполнению = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗадачаСсылка);
			
			ВидЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыДействия.Задача, "ВидЗадачи");
			ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
			РезультатДействия = Справочники.РезультатыДействийЗадач.ПустаяСсылка();
			
			Если РеквизитыДействия.ВидДействия = ДанныеВидаЗадачи.ВидДействияИсполнителя
				И ВариантВыполненияЗадачи = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно Тогда
				
				РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполнена;
				
			ИначеЕсли РеквизитыДействия.ВидДействия = ДанныеВидаЗадачи.ВидДействияИсполнителя
				И ВариантВыполненияЗадачи = Перечисления.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями Тогда
				
				РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполненаСЗамечаниями;
				
			ИначеЕсли РеквизитыДействия.ВидДействия = ДанныеВидаЗадачи.ВидДействияИсполнителя
				И ВариантВыполненияЗадачи = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
				
				РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполненаОтрицательно;
				
			ИначеЕсли РеквизитыДействия.ВидДействия = ДанныеВидаЗадачи.ВидДействияПроверяющего
				И ВариантВыполненияЗадачи = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно Тогда
				
				РезультатДействия = ДанныеВидаЗадачи.РезультатПроверяющегоПроверено;
				
			ИначеЕсли РеквизитыДействия.ВидДействия = ДанныеВидаЗадачи.ВидДействияПроверяющего
				И ВариантВыполненияЗадачи = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
				
				РезультатДействия = ДанныеВидаЗадачи.РезультатПроверяющегоВозвращеноНаДоработку;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(РезультатДействия) Тогда
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Не удалось определить результат %2 для задачи вида %1.'"),
					РеквизитыДействия.ВидДействия,
					ВариантВыполненияЗадачи);
			КонецЕсли;
			
			ПараметрыВыполнения = РаботаСЗадачамиКлиентСервер.НовыйПараметрыВыполненияДействийЗадач();
			ПараметрыВыполнения.ЗакрыватьПодзадачи = Истина;
			ПараметрыВыполнения.ЗанятыеФайлыПроверены = Истина;
			ПараметрыВыполнения.ВыполнитьОтИмени = ПользовательПоЭлАдресу;
			
			ОбработатьВложенияВСообщении(
				ЗадачаСсылка,
				Сообщение,
				ОсновнойСотрудник);
			
			РаботаСЗадачами.СохранитьРезультатДействия(
				ЗадачаСсылка,
				КомментарийВСообщении,
				"",
				ОсновнойСотрудник,
				Ложь);
			

			ОлицетворяемыйПользовательПрежний = 
				ПользователиДокументооборот.ОлицетворяемыйПользователь();
			
			ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(
				ПользовательПоЭлАдресу);
			
			Попытка
				
				ДанныеВыполненияДействийЗадач = РаботаСЗадачамиВызовСервера.ВыполнитьДействиеЗадачи(
					ДействияКВыполнению,
					РезультатДействия,
					ПараметрыВыполнения);
				
			Исключение
				
				ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(
					ОлицетворяемыйПользовательПрежний);
				
				ВызватьИсключение; 
		
			КонецПопытки;
			
			ПользователиДокументооборот.УстановитьОлицетворяемогоПользователя(
					ОлицетворяемыйПользовательПрежний);
			
			Если ДанныеВыполненияДействийЗадач.ТребуетсяВвестиПричинуВозврата Тогда
				
				ПараметрыВыполнения.ДанныеВозвратаНаДоработку =
					РаботаСЗадачами.ДанныеВозвратаНаДоработкуПоУмолчанию(
						ЗадачаСсылка,
						КомментарийВСообщении);
				
				ДанныеВыполненияДействийЗадач = РаботаСЗадачамиВызовСервера.ВыполнитьДействиеЗадачи(
					ДействияКВыполнению,
					РезультатДействия,
					ПараметрыВыполнения);
				
			КонецЕсли;
			
			Если ДанныеВыполненияДействийЗадач.ТребуетсяИнтерактивноеДействие Тогда
				
				МассивТекстПредупреждения = Новый Массив;
				
				Если ДанныеВыполненияДействийЗадач.ВыбратьИсполнителяЗадачи Тогда
					МассивТекстПредупреждения.Добавить(
						НСтр("ru = 'Нужно выбрать фактического исполнителя задачи.'"));
				КонецЕсли;
				
				ТекстПредупреждения = СтрСоединить(МассивТекстПредупреждения, Символы.ПС);
				
				РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
					Сообщение,
					Перечисления.РезультатВыполненияЗадачиПоПочте.ЗапретВыполнения,
					ЗадачаСсылка,
					ТекстПредупреждения);
				
				ОтправитьУведомлениеОбОшибке(
					Сообщение,
					Перечисления.РезультатВыполненияЗадачиПоПочте.ЗапретВыполнения,
					ЗадачаСсылка,
					КодЯзыкаИсполнителя,
					ТекстПредупреждения);
				
				ЗафиксироватьТранзакцию();
				
				Возврат Истина;
				
			КонецЕсли;
			
			РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
				Сообщение, 
				Перечисления.РезультатВыполненияЗадачиПоПочте.Выполнена,
				ЗадачаСсылка,
				Строка(ВариантВыполненияЗадачи) + ". " + КомментарийВСообщении);
				
			ЗафиксироватьТранзакцию();
			Возврат Истина;
			
		КонецЕсли;
		
	Исключение
		ОтменитьТранзакцию();
		РегистрыСведений.ПротоколВыполненияЗадачПоПочте.ЗаписатьРезультатВыполненияПоСообщению(
			Сообщение, 
			Перечисления.РезультатВыполненияЗадачиПоПочте.Ошибка,
			ЗадачаСсылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Отправляем уведомление об ошибке, возникшей при обработке сообщения.
//
// Параметры:
//  Сообщение - Структура - см. ЛегкаяПочтаКлиентСервер.СформироватьСтруктуруСообщения
//  РезультатВыполненияЗадачиПоПочте - ПеречислениеСсылка.РезультатВыполненияЗадачиПоПочте - результат обработки сообщения.
//  КодЯзыка - Строка - код языки для формирования текстов уведомления.
//  Описание - Строка - дополнительное описание ошибки.
//
Процедура ОтправитьУведомлениеОбОшибке(Сообщение,
	РезультатВыполненияЗадачиПоПочте,
	Задача,
	КодЯзыка,
	Описание = "")
	
	Если ТипЗнч(РезультатВыполненияЗадачиПоПочте) <>
		Тип("ПеречислениеСсылка.РезультатВыполненияЗадачиПоПочте") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(Сообщение) <> Тип("Структура")
		ИЛИ НЕ Сообщение.Свойство("Отправитель") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(Задача) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя")
		И ТипЗнч(Задача) <> Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		Возврат;
	КонецЕсли;
	
	ТемаУведомления = НСтр("ru = 'Ошибка исполнения задачи по почте: '", КодЯзыка);
	
	Если ЗначениеЗаполнено(Задача) Тогда
		ТемаУведомления = ТемаУведомления + Строка(Задача);
	КонецЕсли;
	
	Если РезультатВыполненияЗадачиПоПочте =
		Перечисления.РезультатВыполненияЗадачиПоПочте.ЗадачаНеНайдена Тогда
		
		ТекстУведомления = 
			НСтр("ru = 'При обработке письма об исполнении задачи возникла ошибка.
			|Не найдена задача в базе данных.
			|Обратитесь к автору задачи или администратору.'", КодЯзыка);
			
	ИначеЕсли РезультатВыполненияЗадачиПоПочте =
			Перечисления.РезультатВыполненияЗадачиПоПочте.ПоАдресуОтправителяНайденоНесколькоИсполнителей
		ИЛИ РезультатВыполненияЗадачиПоПочте =
			Перечисления.РезультатВыполненияЗадачиПоПочте.ПоАдресуОтправителяНеНайденИсполнительЗадачи Тогда
		
		ТекстУведомления = 
			НСтр("ru = 'При обработке письма об исполнении задачи возникла ошибка.
			|По вашему адресу не удалось определить исполнителя задачи.
			|Обратитесь к администратору.'", КодЯзыка);
			
	ИначеЕсли РезультатВыполненияЗадачиПоПочте =
			Перечисления.РезультатВыполненияЗадачиПоПочте.ДляЗадачиОпределенДругойИсполнитель Тогда
			
		ТекстУведомления = 
			НСтр("ru = 'При обработке письма об исполнении задачи возникла ошибка.
			|Для задачи определен другой исполнитель.
			|Обратитесь к автору задачи.'", КодЯзыка);
			
	ИначеЕсли РезультатВыполненияЗадачиПоПочте =
			Перечисления.РезультатВыполненияЗадачиПоПочте.ЗапретВыполнения Тогда
			
		ТекстУведомления =
			НСтр("ru = 'Письмо об исполнении задачи не было обработано.'", КодЯзыка)
			+ Символы.ПС
			+ Описание;
			
	Иначе
		
		ТекстУведомления = 
			НСтр("ru = 'При обработке письма об исполнении задачи возникла ошибка.
			|Возможно в вашем письме (ответе) отсутствовал текст служебной информации
			|или ответное письмо было сформировано не по ссылкам в уведомлении.
			|Попробуйте исполнить задачу еще раз.'", КодЯзыка);
		
	КонецЕсли;
	
	ПоляЗаголовка = Новый Массив;
	
	Для Каждого Заголовок ИЗ Сообщение.ПоляЗаголовка Цикл
		Если Заголовок.Имя = "Message-Id" Тогда
			ЗаголовокInReplyTo = Почта.СформироватьСтруктуруПоляЗаголовка(
				"In-Reply-To",
				Заголовок.Значение,
				СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения.БезКодирования);
			ПоляЗаголовка.Добавить(ЗаголовокInReplyTo);
		КонецЕсли;
	КонецЦикла;     
	
	ТекстУведомления = ТекстУведомления + Символы.ПС + Символы.ПС
		+ СтрШаблон(НСтр("ru = 'Отправитель: %1 Дата: %2 Тема: %3'"),
		Сообщение.Отправитель,
		Сообщение.ДатаОтправки,
		Сообщение.Тема
		);
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Тема", ТемаУведомления);
	ПараметрыПисьма.Вставить("Текст", ТекстУведомления);
	ПараметрыПисьма.Вставить("Кому", Сообщение.Отправитель);
	ПараметрыПисьма.Вставить("Вложения", Новый Массив);
	ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовПочтовыхСообщений.ПростойТекст);
	ПараметрыПисьма.Вставить("ПоляЗаголовка", ПоляЗаголовка);
	
	ЛегкаяПочтаСервер.ОтправитьИнтернетПочта(ПараметрыПисьма);
	
КонецПроцедуры

// Возвращает вариант выполнения по числовому идентификатору.
//
// Параметры:
//  ИдентификаторОтвета - Число
//
// Возвращаемое значение:
//  ПеречисленияСсылка.ВариантыВыполненияПроцессовИЗадач
//
Функция ВариантВыполненияПоПоЧисловомуИдентификатору(ИдентификаторОтвета)
	
	Если ИдентификаторОтвета = "" Тогда
		ВариантВыполнения = Неопределено;
	ИначеЕсли ИдентификаторОтвета = "1" Тогда
		ВариантВыполнения =
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно;
	ИначеЕсли ИдентификаторОтвета = "2" Тогда
		ВариантВыполнения =
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно;
	ИначеЕсли ИдентификаторОтвета = "3" Тогда
		ВариантВыполнения =
			Перечисления.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями;
	Иначе
		ВариантВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ВариантВыполнения;
	
КонецФункции

// Возвращает числовой идентификатор варианта выполнения.
//
// Параметры:
//  ВариантВыполнения - ПеречисленияСсылка.ВариантыВыполненияПроцессовИЗадач
//
// Возвращаемое значение:
//  Число
//
Функция ЧисловойИдентификаторВариантаВыполнения(ВариантВыполнения)
	
	ЧисловойИдентификатор = "0";
	
	Если ВариантВыполнения =
		Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно Тогда
		
		ЧисловойИдентификатор = "1";
		
	ИначеЕсли ВариантВыполнения =
		Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
		
		ЧисловойИдентификатор = "2";
		
	ИначеЕсли ВариантВыполнения =
		Перечисления.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями Тогда
		
		ЧисловойИдентификатор = "3";
		
	КонецЕсли;
	
	Возврат ЧисловойИдентификатор;
	
КонецФункции

// Возвращает задачу и вариант выполнения по теме сообщения.
//
// Параметры:
//  ТемаСообщения - Строка - тема сообщения.
//
// Возвращаемое значение:
//  Струкутра:
//   * Задача - ЗадачаСсылка.ЗадачаИсполнителя
//   * ВариантВыполнения - ПеречисленияСсылка.ВариантыВыполненияПроцессовИЗадач
//
Функция ЗадачаИВариантВыполненияПоТемеСообщения(ТемаСообщения, КодЯзыкаИсполнителя)
	
	Результат = Новый Структура("Задача, ВариантВыполнения");
	
	Если Не ЗначениеЗаполнено(ТемаСообщения) Тогда
		Возврат Результат;
	КонецЕсли;
	
	СлужебнаяИнформацияСтрокой = Прав(ТемаСообщения, ДлинаСлужебнойИнформации());
	Если Не СтрНачинаетсяС(СлужебнаяИнформацияСтрокой, "#") Тогда
		СлужебнаяИнформацияСтрокой = Прав(ТемаСообщения, ДлинаСтаройСлужебнойИнформации());
	КонецЕсли;
	СлужебнаяИнформация = СтрРазделить(СлужебнаяИнформацияСтрокой, "#", Ложь);
	
	КоличествоСлужебнойИнформации = СлужебнаяИнформация.Количество();
	Если КоличествоСлужебнойИнформации = 2 Тогда
		
		ИдентификаторЗадачиСтрокой = СлужебнаяИнформация[0];
		НомерОтвета = СлужебнаяИнформация[1];
		
		ИдентификаторЗадачи = Неопределено;
		Попытка
			ИдентификаторЗадачи = Новый УникальныйИдентификатор(ИдентификаторЗадачиСтрокой);
		Исключение
			// Ничего не делаем.
			// Считаем, что не удалось определить ссылку на задачу по теме сообщения.
			// При необходимости этот факт будет зафиксирован отдельно в протоколе
			// выполнения задач по почте в вызывающем коде.
		КонецПопытки;
		Если ЗначениеЗаполнено(ИдентификаторЗадачи) Тогда
			Результат.Задача = Задачи.ЗадачаИсполнителя.ПолучитьСсылку(ИдентификаторЗадачи);
		КонецЕсли;
		
		Результат.ВариантВыполнения = ВариантВыполненияПоПоЧисловомуИдентификатору(НомерОтвета);
		
		Возврат Результат;
		
	ИначеЕсли КоличествоСлужебнойИнформации = 3 Тогда
		
		ИдентификаторЗадачиСтрокой = СлужебнаяИнформация[0];
		НомерОтвета = СлужебнаяИнформация[1];
		
		ИдентификаторЗадачи = Неопределено;
		Попытка
			ИдентификаторЗадачи = Новый УникальныйИдентификатор(ИдентификаторЗадачиСтрокой);
		Исключение
			// Ничего не делаем.
			// Считаем, что не удалось определить ссылку на задачу по теме сообщения.
			// При необходимости этот факт будет зафиксирован отдельно в протоколе
			// выполнения задач по почте в вызывающем коде.
		КонецПопытки;
		Если ЗначениеЗаполнено(ИдентификаторЗадачи) Тогда
			Результат.Задача = Документы.ДействиеЗадачи.ПолучитьСсылку(ИдентификаторЗадачи);
		КонецЕсли;
		
		Результат.ВариантВыполнения = ВариантВыполненияПоПоЧисловомуИдентификатору(НомерОтвета);
		
		Возврат Результат;
		
	Иначе
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

// Возвращает задачу и вариант выполнения по тексту сообщения.
//
// Параметры:
//  ТекстСообщения - текст сообщения.
//  КодЯзыкаИсполнителя - строка.
//
// Возвращаемое значение:
//  Струкутра:
//   * Задача - ЗадачаСсылка.ЗадачаИсполнителя
//   * ВариантВыполнения - ПеречисленияСсылка.ВариантыВыполненияПроцессовИЗадач
//
Функция ЗадачаИВариантВыполненияПоТекстуСообщения(ТекстСообщения, КодЯзыкаИсполнителя)
	
	Результат = Новый Структура("Задача, ВариантВыполнения");
	
	ИдентификаторыЗадачи = ПолучитьСтрокиСообщенияПоЗаголовкуПоля(
		ТекстСообщения,
		НСтр( "ru = '*Задача:'", КодЯзыкаИсполнителя),
		36);
	
	Если ИдентификаторыЗадачи.Количество() > 0 Тогда
		ИдентификаторЗадачи = Неопределено;
		Попытка
			ИдентификаторЗадачи = Новый УникальныйИдентификатор(ИдентификаторыЗадачи[0]);
		Исключение
			// Ничего не делаем.
			// Считаем, что не удалось определить ссылку на задачу по тексту сообщения.
			// При необходимости этот факт будет зафиксирован отдельно в протоколе
			// выполнения задач по почте в вызывающем коде.
		КонецПопытки;
		Если ЗначениеЗаполнено(ИдентификаторЗадачи) Тогда
			Результат.Задача = Задачи.ЗадачаИсполнителя.ПолучитьСсылку(ИдентификаторЗадачи);
		КонецЕсли;
	КонецЕсли;
	
	ИдентификаторыОтвета = ПолучитьСтрокиСообщенияПоЗаголовкуПоля(
		ТекстСообщения,
		НСтр( "ru = '*Ответ:'", КодЯзыкаИсполнителя),
		1);
	
	Если ИдентификаторыОтвета.Количество() > 0 Тогда
		Результат.ВариантВыполнения =
			ВариантВыполненияПоПоЧисловомуИдентификатору(ИдентификаторыОтвета[0]);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает строку в тексте сообщения после строки ЗаголовокПоля.
//
// Параметры:
//  ТекстСообщения - Строка - текст сообщения.
//  ЗаголовокПоля - Строка - заголовок с которого начинается строка.
//  ДлинаСтроки - Число - длинна возвращаемой строки, после заголовка.
//
// Возвращаемое значение:
//  Строка.
//
Функция ПолучитьСтрокиСообщенияПоЗаголовкуПоля(ТекстСообщения, ЗаголовокПоля, ДлинаСтроки)
	
	Результат = Новый Массив;
	
	НомерВхождения = 1;
	
	Пока НомерВхождения > 0 Цикл
		
		Позиция = СтрНайти(ТекстСообщения, ЗаголовокПоля,,, НомерВхождения);
		
		Если Позиция <> 0 Тогда
			Результат.Добавить(Сред(ТекстСообщения, Позиция + СтрДлина(ЗаголовокПоля), ДлинаСтроки));
			НомерВхождения = НомерВхождения + 1;
		Иначе
			НомерВхождения = -1; // Прекращение поиска - выход из цикла.
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Проверяет соответствие результата выполнения и задачи.
//
// Параметры:
//  ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя - ссылка на задачу.
//  РезультатВыполнения - ПеречислениеСсылка.ВариантыВыполненияПроцессовИЗадач - результат выполнения задачи.
//
// Возвращаемое значение:
//  Булево:
//   * Истина - если результат допустим для задачи.
//   * Ложь - если результат не допустим.
//
Функция ПроверитьСоответствиеРезультатВыполненияИЗадачи(ЗадачаСсылка, РезультатВыполнения)
	
	Результат = Истина;
	
	ВозможныеВариантыВыполнения = ПолучитьСписокВариантовВыполненияЗадачи(ЗадачаСсылка, Неопределено);
	
	Если ВозможныеВариантыВыполнения.СписокВариантовОтветов.НайтиПоЗначению(
			РезультатВыполнения) = Неопределено Тогда
			
		Результат = Ложь;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает комментарий по тексту сообщения.
//
// Параметры:
//  ТекстСообщения - Строка - текст сообщения.
//  КодЯзыка - Строка - код языка, на котором формируется текст сообщения.
//
// Возвращаемое значение:
//  Строка
//
Функция КомментарийПоТекстуСообщения(Знач ТекстСообщения, КодЯзыка)
	
	ТекстСлужебногоОтвета = ТекстСообщенияДляСсылкиMailTo(КодЯзыка);
	УдалитьТекстСлужебногоОтвета(ТекстСообщения, ТекстСлужебногоОтвета);
	
	// Некоторые почтовые клиенты некорректно разбирают ссылку mailto,
	// в итоге обратно приходит служебный текст кодированный.
	СпособКодирования = ВстроеннаяПочтаСервер.СпособКодированияПараметраMailto("body");
	ТекстСлужебногоОтвета = КодироватьСтроку(ТекстСлужебногоОтвета, СпособКодирования);
	УдалитьТекстСлужебногоОтвета(ТекстСообщения, ТекстСлужебногоОтвета);
	
	ТекстСлужебногоОтвета = СтрЗаменить(ТекстСлужебногоОтвета, "%0A", Символы.ПС);
	УдалитьТекстСлужебногоОтвета(ТекстСообщения, ТекстСлужебногоОтвета);
	
	ТекстСлужебногоОтвета = СтрЗаменить(ТекстСлужебногоОтвета, "%20", " ");
	УдалитьТекстСлужебногоОтвета(ТекстСообщения, ТекстСлужебногоОтвета);
	
	ТекстОкончанияКомментария = ТекстОкончанияКомментария();
	КонечнаяПозицияКомментария = СтрНайти(ТекстСообщения, ТекстОкончанияКомментария);
	
	Если КонечнаяПозицияКомментария > 0 Тогда
		КомментарийВСообщении = СокрЛП(Лев(ТекстСообщения, КонечнаяПозицияКомментария - 1));
	Иначе
		КомментарийВСообщении = СокрЛП(ТекстСообщения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КомментарийВСообщении) Тогда
		КомментарийВСообщении = КомментарийВСообщении
			+ Символы.ПС + НСтр("ru = 'Задача исполнена по почте.'", КодЯзыка);
	КонецЕсли;
	
	Возврат КомментарийВСообщении;
	
КонецФункции

// Обрабатывает вложения в сообщении.
// Если вложения в сообщении отличаются от файлов предмета задачи, 
// то прикрепляет вложения к бизнес-процессу задачи как вспомогательные 
// предметы.
//
// Параметры:
//  ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя, ДокументСсылка.ДействиеЗадачи.
//  Сообщение - Структура - см. ЛегкаяПочтаКлиентСервер.СформироватьСтруктуруСообщения
//  КтоОтметил - СправочникСсылка.Сотрудники.
//
Процедура ОбработатьВложенияВСообщении(ЗадачаСсылка, Сообщение, КтоОтметил)
	
	ВладелецФайла = Неопределено;
	Если ТипЗнч(ЗадачаСсылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ВладелецФайла = Документы.ДействиеЗадачи.НайтиПоИсточнику(ЗадачаСсылка);
	ИначеЕсли ТипЗнч(ЗадачаСсылка) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		ВладелецФайла = ЗадачаСсылка;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВладелецФайла) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Не найден владелец файла для задачи %1 (%2).'"),
			ЗадачаСсылка,
			ТипЗнч(ЗадачаСсылка));
	КонецЕсли;
	
	РаботаСЗадачами.ОчиститьПриложения(ВладелецФайла);
	
	ДобавляемыеПриложения = Новый Массив;
	
	Для Каждого Вложение Из Сообщение.Вложения Цикл
		
		ИмяФайлаИнфо = РаботаСоСтроками.РазложитьИмяФайла(Вложение.ИмяФайла);
		
		ВремяИзменения = ТекущаяДатаСеанса();
		ВремяИзмененияУниверсальное = РаботаСФайламиКлиентСервер.ПолучитьУниверсальноеВремя(
			ВремяИзменения);
		
		Комментарий = СтрШаблон(
			НСтр("ru = 'Файл получен при исполнении задачи по почте.
				|Задача: %1
				|Адрес отправителя: %2'"),
			ЗадачаСсылка,
			Сообщение.Отправитель);
			
		// Создадим карточку Файла в БД
		СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
		СведенияОФайле.АдресВременногоХранилищаФайла = Вложение.Адрес;
		СведенияОФайле.ИмяБезРасширения = ИмяФайлаИнфо.Имя;
		СведенияОФайле.РасширениеБезТочки = ИмяФайлаИнфо.Расширение;
		СведенияОФайле.Размер = Вложение.Размер;
		СведенияОФайле.ВремяИзменения = ВремяИзменения;
		СведенияОФайле.ВремяИзмененияУниверсальное = ВремяИзмененияУниверсальное;
		СведенияОФайле.Комментарий = Комментарий;
		
		ФайлСсылка = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(
			ВладелецФайла,
			СведенияОФайле);
		
		ДобавляемыеПриложения.Добавить(ФайлСсылка);
		
	КонецЦикла;
	
	РаботаСЗадачами.ДобавитьПриложения(
		ВладелецФайла,
		ДобавляемыеПриложения,
		КтоОтметил,
		Ложь);
	
КонецПроцедуры

// Возвращает таблицу файлов для уведомления.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//  ПолучательУведомления - СправочникСсылка.Пользователи.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Формирует таблицу файлов для уведомления. См. ВыполнениеЗадачПоПочтеСервер.ПолучитьФайлыПредметов.
//
Функция ТаблицаФайловДляУведомления(ДействиеЗадачи, ПолучательУведомления)
	
	РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДействиеЗадачи,
		"ВидДействия, Задача");
	
	// Получение файлов предметов задачи.
	ПриложенияЗадачи = РаботаСЗадачами.ПриложенияЗадачи(РеквизитыДействия.Задача, ДействиеЗадачи);
	
	ДоступныеПредметы = Новый Массив;
	
	Для Каждого ДанныеПриложения Из ПриложенияЗадачи Цикл
		
		Если Не ЗначениеЗаполнено(ДанныеПриложения.Приложение) Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьПраваНаПриложение = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(
			ДанныеПриложения.Приложение, ПолучательУведомления).Чтение;
		Если Не ЕстьПраваНаПриложение Тогда
			Продолжить;
		КонецЕсли;
		
		ДоступныеПредметы.Добавить(ДанныеПриложения.Приложение);
		
	КонецЦикла;
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		РеквизитыДействия.Задача,
		"Участники, ВидЗадачи");
	Участники = РеквизитыЗадачи.Участники.Выгрузить();
	Участники.Сортировать("НомерСтроки Возр");
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(РеквизитыЗадачи.ВидЗадачи);
	
	// Для проверяющего - получение файлов исполнителей.
	Если РеквизитыДействия.ВидДействия = ДанныеВидаЗадачи.ВидДействияПроверяющего Тогда
		
		Для Каждого СтрокаУчастника Из Участники Цикл
			
			Если Не РаботаСЗадачамиПовтИсп.ЭтоИсполнитель(СтрокаУчастника.ВидУчастника) Тогда
				Продолжить;
			КонецЕсли;
			
			ДоступныеПредметы.Добавить(СтрокаУчастника.ДействиеУчастника);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Для исполнителя - получение файлов проверяющего.
	Если РеквизитыДействия.ВидДействия = ДанныеВидаЗадачи.ВидДействияИсполнителя Тогда
		
		Для Каждого СтрокаУчастника Из Участники Цикл
			
			Если Не РаботаСЗадачамиПовтИсп.ЭтоПроверяющий(СтрокаУчастника.ВидУчастника) Тогда
				Продолжить;
			КонецЕсли;
			
			ДоступныеПредметы.Добавить(СтрокаУчастника.ДействиеУчастника);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаФайлов = ПолучитьФайлыПредметов(ДоступныеПредметы);
	
	Возврат ТаблицаФайлов;
	
КонецФункции

// Формирует текст служебного ответа.
// 
// Параметры:
//  КодЯзыка - Строка.
// 
// Возвращаемое значение:
//  Строка.
//
Функция ТекстСлужебногоОтвета(КодЯзыка)
	
	ТекстСообщенияДляСсылкиMailTo = ТекстСообщенияДляСсылкиMailTo(КодЯзыка);
	ТекстСлужебногоОтвета = СтрШаблон(
		"%1
		|
		|", 
		ТекстСообщенияДляСсылкиMailTo);
	
	Возврат ТекстСлужебногоОтвета;
	
КонецФункции

// Удаляет текст служебного ответа.
// 
// Параметры:
//  ТекстСообщения - Строка
//  ТекстСлужебногоОтвета - Строка
// 
Процедура УдалитьТекстСлужебногоОтвета(ТекстСообщения, ТекстСлужебногоОтвета)
	
	СлужебныйТекст = СтрРазделить(ТекстСлужебногоОтвета, Символы.ПС, Ложь);
	Для Каждого СтрокаСлужебногоТекста Из СлужебныйТекст Цикл
		ТекстСообщения = СтрЗаменить(ТекстСообщения, СтрокаСлужебногоТекста, "");
		ТекстСообщения = СокрЛП(ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти