////////////////////////////////////////////////////////////////////////////////
// Обработки документов клиента: содержит процедуры и функции обеспечивающие
//                                     работу с обработками документов на клиенте.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПрограммныйИнтерфейс_НачалоОбработки

// Инициирует начало обработки документа из карточки документа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка документа.
//  ОбработчикОповещения - ОписаниеОповещения - обработчик в форме вызова.
//  ПараметрыВидаОбъекта - Структура - Параметры вида объекта. См. ДействияКлиентСервер.НовыйПараметрыВидаОбъекта.
//
Процедура НачатьОбработкуИзКарточкиПредмета(Форма, ОбработчикОповещения, ПараметрыВидаОбъекта) Экспорт
	
	СостояниеОбработки = Форма.СостояниеОбработки;
	Если СостояниеОбработки = ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Выполняется") 
		Или СостояниеОбработки = ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Остановлена") Тогда
		
		Если ЗначениеЗаполнено(Форма.КомплексныйПроцессПоПредмету) Тогда
			
			ПрерватьПроцессПоПредмету(Форма, ОбработчикОповещения);
			
		Иначе
			
			// остановим действия и процессы
			// тут вопрос - поместить в историю или оставить
			ПрерватьОбработкуДокументаИзКарточкиПредмета(Форма, ОбработчикОповещения);
			
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Форма.КомплексныйПроцессПоПредмету) Тогда
		
		ТекстыПредупреждения = Новый Массив;
		
		ТекстыПредупреждения.Добавить(
			НСтр("ru = 'Обработка будет начата автоматически в ходе выполнения процесса:'"));
		
		ТекстыПредупреждения.Добавить(" ");
		
		ПроцессСтрокой = Новый ФорматированнаяСтрока(
			Строка(Форма.КомплексныйПроцессПоПредмету),,,,
			ПолучитьНавигационнуюСсылку(Форма.КомплексныйПроцессПоПредмету));
		ТекстыПредупреждения.Добавить(ПроцессСтрокой);
		
		ПоказатьПредупреждение(, Новый ФорматированнаяСтрока(ТекстыПредупреждения));
		
		Возврат;
		
	КонецЕсли;
	
	Если Форма.Модифицированность
		Или Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		
		Объект = Форма.Объект;
		
		ТекстОповещения = ?(
			ЗначениеЗаполнено(Объект.Ссылка),
			НСтр("ru = 'Изменение:'"),
			НСтр("ru = 'Создание:'"));
	
		Если Не Форма.Записать() Тогда
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			ТекстОповещения, 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
		
	Если Не ОбработкиОбъектовКлиентИнтеграция.ПроверитьФайлы(Форма, ПараметрыВидаОбъекта) Тогда
		Возврат;
	КонецЕсли;	
		
	ПроверкаЗаполненияДействий = ПроверитьЗаполнениеДействий(Форма);
	ОшибкиПроверкиДействий = ПроверкаЗаполненияДействий.СообщенияОбОшибках;
	Если ОшибкиПроверкиДействий.Количество() > 0 Тогда
		Для Каждого ОшибкаЗаполнения Из ОшибкиПроверкиДействий Цикл
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				ОшибкаЗаполнения,, "Действия");
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	ПараметрыОбъектаОбработки = ДействияКлиентСервер.ПараметрыОбъектаОбработки(
		Форма.Объект.Ссылка,
		Форма.Объект);
	
	МассивОшибок = ОбработкиОбъектовВызовСервера.ПроверитьУсловияЗапуска(
		ПараметрыОбъектаОбработки.ОбъектОбработки,
		ПараметрыОбъектаОбработки.ВидОбъекта);
	
	ОбработкиОбъектовВызовСервера.ПроверитьПраваУчастниковОбработки(
		ПараметрыОбъектаОбработки.ОбъектОбработки, МассивОшибок);
	
	Если МассивОшибок.Количество() <> 0 Тогда
		
		ТекстПредмета = Неопределено;
		Если ТипЗнч(ПараметрыОбъектаОбработки.ОбъектОбработки) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
			Если НагрузочноеТестированиеКлиент.ЭтоНагрузочноеТестирование() Тогда
				// Сама проверка сделалась для тестирования ее нагрузки, но ошибку не выдаем...
			Иначе
				ТекстПредмета = НСтр("ru = 'Документ не может быть запущен в обработку:'");
			КонецЕсли;
		ИначеЕсли ТипЗнч(ПараметрыОбъектаОбработки.ОбъектОбработки) = Тип("СправочникСсылка.Мероприятия") Тогда
			ТекстПредмета = НСтр("ru = 'Мероприятие не может быть запущено в обработку:'");
		Иначе
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный тип объекта обработки %1 (%2).'"),
				ПараметрыОбъектаОбработки.ОбъектОбработки,
				ТипЗнч(ПараметрыОбъектаОбработки.ОбъектОбработки));
		КонецЕсли;
		
		Если Значениезаполнено(ТекстПредмета) Тогда
			ТекстПредупреждения = СтрСоединить(МассивОшибок, Символы.ПС);
			ТекстПредупреждения = ТекстПредмета + Символы.ПС + Символы.ПС + ТекстПредупреждения;
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("Форма, ОбработчикОповещения", Форма, ОбработчикОповещения);	
	ПродолжитьПослеОповещенияОбИзменении(ДопПараметры);
	
КонецПроцедуры

// Проверяет заполнение дерева действий документа
// 
// Параметры:
// Форма - ФормаКлиентскогоПриложения - карточка документа.
// 
// Возвращаемое значение:
// Структура("СообщенияОбОшибках")
//
Функция ПроверитьЗаполнениеДействий(Форма) Экспорт

	СообщенияОбОшибках = Новый Массив;
	ПараметрыПроверок = Новый Структура(); 
	
	ПараметрыПроверок.Вставить("Объект", Форма.Объект.Ссылка);
	
	МассивДействий = Новый Массив;
	Для Каждого СтрокаДействия Из Форма.Действия.ПолучитьЭлементы() Цикл
		
		МассивДействий.Добавить(СтрокаДействия.Действие);
		
	КонецЦикла;
	
	Если МассивДействий.Количество() <> 0 Тогда
		ОбработкиОбъектовВызовСервера.ПроверкаПередЗапуском(МассивДействий, СообщенияОбОшибках, 
			ПараметрыПроверок);
	КонецЕсли;	
	
	Возврат Новый Структура(
		"СообщенияОбОшибках", 
		СообщенияОбОшибках);
	
КонецФункции

Процедура ПродолжитьПослеОтветаНаВопросОЗанятыхФайлахWord(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		// повторить операцию
		ПродолжитьПослеОповещенияОбИзменении(ДопПараметры);

	КонецЕсли;	
	
КонецПроцедуры

// Выполняет (если нужно) запуск обработки из карточки документа
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения
// 	Предмет - СправочникССылка.ДокументыПредприятия
// 	ВидИнтерактивногоСобытияАвтозапускаОбработки - ПеречислениеСсылка.ВидыИнтерактивныхДействий - как настроено
// 	УсловияЗапуска - ТаблицаЗначений
// 	ВидСобытия - ПеречислениеСсылка.ВидыИнтерактивныхДействий - текущее событие
//  БылПоказанДиалог - Булево
//  Отказ - Булево
Процедура ВыполнитьИнтерактивныйЗапускОбработки(
	Форма, Предмет, ВидИнтерактивногоСобытияАвтозапускаОбработки,
	УсловияЗапуска, 
	ВидСобытия,
	БылПоказанДиалог, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидИнтерактивногоСобытияАвтозапускаОбработки) 
		Или БылПоказанДиалог 
		Или Не ЗначениеЗаполнено(Предмет) 
		Или ВидИнтерактивногоСобытияАвтозапускаОбработки <> ВидСобытия Тогда
		Возврат;
	КонецЕсли;

	// уже есть обработка - ничего не делаем	
	Если Форма.СостояниеОбработки = ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Выполняется")
		Или Форма.СостояниеОбработки = ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Завершена") Тогда
		Возврат;
	КонецЕсли;	

	Отказ = Истина;
		
	ПараметрыОбработчикаОповещения = Новый Структура;
	ПараметрыОбработчикаОповещения.Вставить("ФормаДокумента", Форма);
	ПараметрыОбработчикаОповещения.Вставить("Предмет", Предмет);
	ПараметрыОбработчикаОповещения.Вставить("ВидСобытия", ВидСобытия);
	ПараметрыОбработчикаОповещения.Вставить("УсловияЗапуска", УсловияЗапуска);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗавершениеИнтерактивногоЗапускаОбработки",
		ЭтотОбъект,
		ПараметрыОбработчикаОповещения);
			
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ПоказатьКнопкуОтмена", 
		(ВидСобытия = ПредопределенноеЗначение("Перечисление.ВидыИнтерактивныхДействий.ЗакрытиеКарточкиТолькоЧтоСозданногоДокумента")) );
		
	БылПоказанДиалог = Истина;	
	 ОткрытьФорму(
	 	"ОбщаяФорма.ОповещениеПриИнтерактивномАвтоЗапускеОбработки",
		ПараметрыОткрытия,,,,,
	 	ОписаниеОповещения,
	 	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры					

// Продолжение интерактивного запуска. См выше
Процедура ЗавершениеИнтерактивногоЗапускаОбработки(СтрокаВарианта, Параметры) Экспорт
	
	Если СтрокаВарианта = "Запустить" Тогда

		Параметры.ФормаДокумента.БылПоказанДиалогИнтерактивногоЗапускаОбработки = Истина;
		
		Если Параметры.УсловияЗапуска.Количество() <> 0 Тогда
			МассивОшибок = ОбработкиОбъектовВызовСервера.ОшибкиПроверкиУсловийЗапуска(
				Параметры.Предмет, Параметры.УсловияЗапуска);
			
			Если МассивОшибок.Количество() <> 0 Тогда
				
				ТекстПредупреждения = СтрСоединить(МассивОшибок, Символы.ПС);
				ТекстПредупреждения = НСтр("ru = 'Документ не может быть запущен в обработку:'")
				 + Символы.ПС + Символы.ПС + ТекстПредупреждения;
				
				ПоказатьПредупреждение(, ТекстПредупреждения);
				
				Возврат;
			КонецЕсли;
				
		КонецЕсли;	
		
		Параметры.ФормаДокумента.ДействияОтправитьВыполнить();
		
		Если Параметры.ВидСобытия = ПредопределенноеЗначение("Перечисление.ВидыИнтерактивныхДействий.ЗакрытиеКарточкиТолькоЧтоСозданногоДокумента")
			И Параметры.ФормаДокумента.СостояниеОбработки = ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Выполняется") Тогда

			Если Параметры.ФормаДокумента.Открыта() Тогда
				Параметры.ФормаДокумента.Закрыть();
			КонецЕсли;
				
		Иначе
					
			Оповестить("ПереключитьНаЗакладкуОбработка", Параметры.Предмет);
					
		КонецЕсли;	
		
		Возврат;
		
	КонецЕсли;
	
	Если СтрокаВарианта = "НеЗапускать" Тогда
			
		Параметры.ФормаДокумента.БылПоказанДиалогИнтерактивногоЗапускаОбработки = Истина;
		
		Если Параметры.ВидСобытия = ПредопределенноеЗначение("Перечисление.ВидыИнтерактивныхДействий.ЗакрытиеКарточкиТолькоЧтоСозданногоДокумента")
			И Параметры.ФормаДокумента.Открыта() Тогда
			
			Параметры.ФормаДокумента.Закрыть();
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

// Инициирует остановку\продолжение обработки объекта из карточки предмета.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка предмета.
//  ОбработчикОповещения - ОписаниеОповещения - обработчик в форме вызова.
//  ПараметрыВидаОбъекта - Структура - Параметры вида объекта. См. ДействияКлиентСервер.НовыйПараметрыВидаОбъекта.
//
Процедура ОстановитьПродолжитьОбработкуИзКарточкиПредмета(Форма, ОбработчикОповещения, ПараметрыВидаОбъекта) Экспорт
	
	СостояниеОстановки = ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Выполняется");
	СостояниеОбработки = Форма.СостояниеОбработки;
	Если СостояниеОбработки = ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Выполняется") Тогда
		
		СостояниеОстановки = ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Остановлена");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.КомплексныйПроцессПоПредмету) Тогда
		ОстановитьПродолжитьПроцессПоПредмету(Форма, ОбработчикОповещения, СостояниеОстановки);
	Иначе
		
		Объект = Форма.Объект;
		Предмет = Объект.Ссылка;
		
		Если ОбработкиОбъектовВызовСервера.ЕстьНеВыполненноеЗаданиеПоОбработкеОбъектов(Предмет, Неопределено,
			 , , Истина ) Тогда
			 	ПоказатьПредупреждение(, 
			 	НСтр("ru = 'Остановка/продолжение обработки невозможно, т.к. по ней есть незавершенные задания.
					|
					|Повторите попытку позже.'"));
				Возврат;
		КонецЕсли;
		
		ИдентификаторЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени(
			"ОстановкаОбработкиОбъекта",,Ложь);
		
		ОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(
			ИдентификаторЗамера, "Документ: " + ПолучитьНавигационнуюСсылку(Предмет));
		
		Оповестить("ПрерываниеОбработкиОбъекта", Предмет);
		
		ОбработкиОбъектовВызовСервера.ОстановитьПродолжитьОбработкуОбъекта(
			Предмет, СостояниеОстановки);
		
		ДелопроизводствоКлиент.ОповеститьОбИзмененииОбъекта(Предмет);
		Оповестить("ЗадачаИзменена");
		
		Если ОбработчикОповещения  <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОбработчикОповещения, Неопределено);
		КонецЕсли;
		
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамера);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_ПрерываниеОбработки

// Прерывает обработку документа из карточки документа.
//
// Параметры:
//  Форма - УправляемаФорма - карточка документа.
//  ОбработчикОповещения - ОписаниеОповещения - оповещение, которое будет выполнено после
//                                              прерывания обработки документа.
//
Процедура ПрерватьОбработкуДокументаИзКарточкиПредмета(Форма, ОбработчикОповещения) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Форма", Форма);
	ПараметрыОповещения.Вставить("ОбработчикОповещения", ОбработчикОповещения);
	ПараметрыОповещения.Вставить("ПараметрыЗаписи", Новый Структура);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжитьПрерваниеОбработкиДокументаПослеВводаПричиныПрерывания",
		ЭтотОбъект,
		ПараметрыОповещения);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Форма.Объект.Ссылка);
	
	ОткрытьФорму("Справочник.ОбработкиОбъектов.Форма.ПрерываниеОбработкиОбъекта",
		ПараметрыФормы,
		Форма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Продолжение процедуры ПродолжитьПрерваниеОбработкиДокумента.
//
Процедура ПродолжитьПрерваниеОбработкиДокументаПослеВводаПричиныПрерывания(
	ПараметрыПрерывания, ДополнительныеПараметры) Экспорт
	
	ИдентификаторЗамера = ОценкаПроизводительностиКлиент.ЗамерВремени(
		"ПрерываниеОбработкиОбъекта",,Ложь);
	
	Если ПараметрыПрерывания = Неопределено 
		Или ПараметрыПрерывания = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ОбработчикОповещения = ДополнительныеПараметры.ОбработчикОповещения;
	
	Если ДополнительныеПараметры.Свойство("Предмет") Тогда
		Предмет = ДополнительныеПараметры.Предмет;
	Иначе	
		Форма = ДополнительныеПараметры.Форма;
		Объект = Форма.Объект;
		Предмет = Объект.Ссылка;
	КонецЕсли;	
	
	ОценкаПроизводительностиКлиент.УстановитьКомментарийЗамера(
		ИдентификаторЗамера, "Документ: " + ПолучитьНавигационнуюСсылку(Предмет));
	
	Оповестить("ПрерываниеОбработкиОбъекта", Предмет);
	
	ОбработкиОбъектовВызовСервера.ПрерватьОбработкуОбъекта(
		Предмет, ПараметрыПрерывания.ПричинаПрерывания);
	
	ДелопроизводствоКлиент.ОповеститьОбИзмененииОбъекта(Предмет);
	Оповестить("ЗадачаИзменена");
	
	// надо перечитать в карточке документа статус
	Если ОбработчикОповещения  <> Неопределено Тогда
		Результат = Новый Структура("ПрерванПроцесс", Истина);
		ВыполнитьОбработкуОповещения(ОбработчикОповещения, Результат);
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(ИдентификаторЗамера);
	
КонецПроцедуры

Процедура ОбработатьОповещениеВКарточкеЗадачиОПрерыванииОбработки(ИмяСобытия, ПараметрОповещения, КарточкаЗадачи) Экспорт
	
	Если ИмяСобытия <> "ПрерываниеОбработкиОбъекта" Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Предмет", ПараметрОповещения);
	Если КарточкаЗадачи.Объект.Предметы.НайтиСтроки(Отбор).Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если КарточкаЗадачи.Модифицированность Тогда
		КарточкаЗадачи.Записать();
	КонецЕсли;
	
	КарточкаЗадачи.Закрыть();
	
КонецПроцедуры

#КонецОбласти

// Инициирует переход к выполнению действия.
//
// Параметры:
//  Предмет - СправочникСсылка.ДокументыПредприятия, СправочникСсылка.Мероприятия -
//  Действие - ОпределяемыйТип.Действия -
//
Процедура ПерейтиКВыполнениюДействия(Предмет, Действие) Экспорт
	
	ИзмененияОбработки = ОбработкиОбъектовВызовСервера.ИзмененияОбработкиПриПереходеКВыполнениюДействию(
		Действие);
	
	Если Не ИзмененияОбработки.ПереходВозможен Тогда
		ПоказатьПредупреждение(, ИзмененияОбработки.ОписаниеИзменений);
		Возврат;
	КонецЕсли;
	
	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Продолжить'"));
	КнопкиВопроса.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
	
	ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
	ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
	ПараметрыВопроса.Заголовок = "";
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("Действие", Действие);
	ДопПараметры.Вставить("ИзмененияОбработки", ИзмененияОбработки);
	ДопПараметры.Вставить("Предмет", Предмет);
	
	ОбработчикОтветаНаВопрос = Новый ОписаниеОповещения(
		"ЗавершитьПереходКВыполнениюДействия", ЭтотОбъект, ДопПараметры);
	
	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(
		ОбработчикОтветаНаВопрос,
		ИзмененияОбработки.ОписаниеИзменений,
		КнопкиВопроса,
		ПараметрыВопроса);
	
КонецПроцедуры

// Проверяет: является ли оповещение о переходе к выполнению действия предмета.
//
// Параметры:
//  ИмяСобытия - Строка - имя события.
//  Параметр - Произвольный - параметр оповещения.
//  Предмет – СпавочникСсылка.ДокументыПредпиятия, СпавочникСсылка.Мероприятия.
//
Функция ЭтоОповещениеОПереходеКВыполнениюДействияПредмета(ИмяСобытия, Параметр, Предмет) Экспорт
	
	Если ИмяСобытия = "ВыполненПереходКВыполнениюДействия"
		И Параметр.Предмет = Предмет Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет прерывание процесса по предмету.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка предмета с обработкой.
//  ОбработчикОповещения - ОписаниеОповещения - оповещение, которое будет выполнено после
//                                              прерывания обработки.
//
Процедура ПрерватьПроцессПоПредмету(Форма, ОбработчикОповещения)
	
	Если Не Форма.ЕстьПравоИзмененияПроцессаПоПредмету Тогда
		
		ТекстыПредупреждения = Новый Массив;
		ТекстыПредупреждения.Добавить(НСтр("ru = 'Прерывание обработки недоступно, т.к. нет права изменения'"));
		ТекстыПредупреждения.Добавить(" ");
		
		ПроцессСтрокой = Новый ФорматированнаяСтрока(
			НСтр("ru = 'процесса'"),,,,
			ПолучитьНавигационнуюСсылку(Форма.КомплексныйПроцессПоПредмету));
		ТекстыПредупреждения.Добавить(ПроцессСтрокой);
		
		ТекстыПредупреждения.Добавить(НСтр("ru = ', запустившего обработку.'"));
		
		ПоказатьПредупреждение(, Новый ФорматированнаяСтрока(ТекстыПредупреждения));
		
		Возврат;
		
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Форма", Форма);
	ДопПараметры.Вставить("ОбработчикОповещения", ОбработчикОповещения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"Завершение_ПрерватьПроцессПоПредмету", ЭтотОбъект, ДопПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("БизнесПроцесс", Форма.КомплексныйПроцессПоПредмету);
	ПараметрыФормы.Вставить("ПоказатьСсылкуНаПроцесс", Истина);
	
	ОткрытьФорму("ОбщаяФорма.ПрерываниеПроцесса",
		ПараметрыФормы,
		Форма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Завершение процедуры ПрерватьПроцессПоПредмету.
//
Процедура Завершение_ПрерватьПроцессПоПредмету(ПараметрыПрерывания, ДопПараметры)Экспорт
	
	Если ТипЗнч(ПараметрыПрерывания) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДопПараметры.Форма;
	ОбработчикОповещения = ДопПараметры.ОбработчикОповещения;
	
	Объект = Форма.Объект;
	Предмет = Объект.Ссылка;
	
	БизнесПроцессыИЗадачиВызовСервера.ПрерватьБизнесПроцесс(
		Форма.КомплексныйПроцессПоПредмету, ПараметрыПрерывания.ПричинаПрерывания);
	
	ПротоколированиеРаботыСотрудников.ЗаписатьПрерываниеБизнесПроцесса(
		Форма.КомплексныйПроцессПоПредмету);
	
	Оповестить("ПрерываниеОбработкиОбъекта", Предмет);
	
	Оповестить("БизнесПроцессИзменен", Форма.КомплексныйПроцессПоПредмету);
	
	ДелопроизводствоКлиент.ОповеститьОбИзмененииОбъекта(Предмет);
	Оповестить("ЗадачаИзменена");
	
	// надо перечитать в карточке документа статус
	Если ОбработчикОповещения  <> Неопределено Тогда
		Результат = Новый Структура("ПрерванПроцесс", Истина);
		ВыполнитьОбработкуОповещения(ОбработчикОповещения, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет остановку/продолжение процесса по предмету.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка предмета с обработкой.
//  ОбработчикОповещения - ОписаниеОповещения - оповещение, которое будет выполнено после
//                                              прерывания обработки.
//  СостояниеОстановки - ПеречислениеСсылка.СостоянияОбработкиОбъектов.
//
Процедура ОстановитьПродолжитьПроцессПоПредмету(Форма, ОбработчикОповещения, СостояниеОстановки)
	
	Если Не Форма.ЕстьПравоИзмененияПроцессаПоПредмету Тогда
	
		ТекстыПредупреждения = Новый Массив;
		
		Если СостояниеОстановки = 
			ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Остановлена") Тогда
			
			ТекстыПредупреждения.Добавить(НСтр("ru = 'Остановка обработки недоступна'"));
		Иначе
			ТекстыПредупреждения.Добавить(НСтр("ru = 'Продолжение обработки недоступно'"));
		КонецЕсли;
		
		ТекстыПредупреждения.Добавить(НСтр("ru = ', т.к. нет права изменения'"));
		ТекстыПредупреждения.Добавить(" ");
		
		ПроцессСтрокой = Новый ФорматированнаяСтрока(
			НСтр("ru = 'процесса'"),,,,
			ПолучитьНавигационнуюСсылку(Форма.КомплексныйПроцессПоПредмету));
		ТекстыПредупреждения.Добавить(ПроцессСтрокой);
		
		ТекстыПредупреждения.Добавить(НСтр("ru = ', запустившего обработку.'"));
		
		ПоказатьПредупреждение(, Новый ФорматированнаяСтрока(ТекстыПредупреждения));
		
		Возврат;
		
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Форма", Форма);
	ДопПараметры.Вставить("ОбработчикОповещения", ОбработчикОповещения);
	ДопПараметры.Вставить("СостояниеОстановки", СостояниеОстановки);
	
	ТекстыВопроса = Новый Массив;
	ТекстыВопроса.Добавить(НСтр("ru = 'Будет'"));
	ТекстыВопроса.Добавить(" ");
	
	Если СостояниеОстановки = 
		ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Остановлена") Тогда
		
		ТекстыВопроса.Добавить(НСтр("ru = 'выполнена остановка'"));
	Иначе
		ТекстыВопроса.Добавить(НСтр("ru = 'выполнено продолжение'"));
	КонецЕсли;
	
	ТекстыВопроса.Добавить(НСтр("ru = ' процесса:'"));
	ТекстыВопроса.Добавить(" ");
	
	ПроцессСтрокой = Новый ФорматированнаяСтрока(
		Строка(Форма.КомплексныйПроцессПоПредмету),,,,
		ПолучитьНавигационнуюСсылку(Форма.КомплексныйПроцессПоПредмету));
	ТекстыВопроса.Добавить(ПроцессСтрокой);
	
	ТекстыВопроса.Добавить(".");
	
	ОбщегоНазначенияДокументооборотКлиент.ПоказатьВопросДаНет(
		Новый ОписаниеОповещения("Завершение_ОстановитьПродолжитьПроцессПоПредмету", ЭтотОбъект, ДопПараметры),
		Новый ФорматированнаяСтрока(ТекстыВопроса),
		НСтр("ru = 'Продолжить'"),
		НСтр("ru = 'Отмена'"));
	
КонецПроцедуры

// Завершение ОстановитьПродолжитьПроцессПоПредмету
//
Процедура Завершение_ОстановитьПродолжитьПроцессПоПредмету(КодОтвета, ДопПараметры) Экспорт
	
	Если КодОтвета <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДопПараметры.Форма;
	ОбработчикОповещения = ДопПараметры.ОбработчикОповещения;
	СостояниеОстановки = ДопПараметры.СостояниеОстановки;
	
	Объект = Форма.Объект;
	Предмет = Объект.Ссылка;
	
	Оповестить("ПрерываниеОбработкиОбъекта", Предмет);
	
	Если СостояниеОстановки = 
		ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Остановлена") Тогда
		
		БизнесПроцессыИЗадачиВызовСервера.ОстановитьБизнесПроцесс(Форма.КомплексныйПроцессПоПредмету);
	Иначе
		БизнесПроцессыИЗадачиВызовСервера.СделатьАктивнымБизнесПроцесс(Форма.КомплексныйПроцессПоПредмету);
	КонецЕсли;
	
	ДелопроизводствоКлиент.ОповеститьОбИзмененииОбъекта(Предмет);
	Оповестить("ЗадачаИзменена");
	
	Если ОбработчикОповещения  <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОбработчикОповещения, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение ПродолжитьПослеЗаписиДокумента
// 
// Параметры:
// ДопПараметры - Структура
// 	Форма
// 	ОбработчикОповещения
//
Процедура ПродолжитьПослеОповещенияОбИзменении(ДопПараметры)
	
	Форма = ДопПараметры.Форма;
	
	МассивЗахваченныхФайлов = Новый Массив;
	ОбработкиОбъектовКлиентИнтеграция.ДобавитьЗанятыеФайлыСамойКарточки(Форма, МассивЗахваченныхФайлов);
	
	Объект = Форма.Объект;
	
	СписокЗанятыеWordФайлы = ДелопроизводствоКлиент.ПолучитьЗанятыеВнешнимиПрограммамиФайлы(
		Объект.Ссылка,
		Форма.УникальныйИдентификатор, 
		МассивЗахваченныхФайлов);
		
	Если СписокЗанятыеWordФайлы.Количество() Тогда
		СтрокаФайлов = "";
		Для Каждого ИмяРасширение Из СписокЗанятыеWordФайлы Цикл
			Если Не ПустаяСтрока(СтрокаФайлов) Тогда
				СтрокаФайлов = СтрокаФайлов + Символы.ВК;
			КонецЕсли;	
			СтрокаФайлов = СтрокаФайлов + ИмяРасширение;
		КонецЦикла;
		
		Если СписокЗанятыеWordФайлы.Количество() > 1 Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Для отправки закройте файлы, занятые внешней программой:
					| 
					|%1.'"),
				СтрокаФайлов);
		Иначе	
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Для отправки закройте файл, занятый внешней программой:
					| 
					|%1.'"),
				СтрокаФайлов);
		КонецЕсли;	
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.ОК);
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПродолжитьПослеОтветаНаВопросОЗанятыхФайлахWord",
			ЭтотОбъект, ДопПараметры);
			
		ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, Кнопки);
		
		Возврат;
	КонецЕсли;
	
	ДелопроизводствоКлиент.ПоместитьИзмененияФайлов(
		Объект.Ссылка, 
		Форма.УникальныйИдентификатор, 
		МассивЗахваченныхФайлов, 
		Истина);
	
	Если Не ДопПараметры.Свойство("ПоказаноПредупреждениеОбОтсутствиях") Тогда
		
		ДанныеДляПроверкиОтсутствий =
			ОбработкиОбъектовВызовСервера.ДанныеДляПроверкиОтсутствий(Объект.Ссылка);
		
		РезультатПроверкиОтсутствий = 
			ОтсутствияКлиент.ПроверитьОтсутствия(
				ДанныеДляПроверкиОтсутствий.Участники,
				ОбщегоНазначенияКлиент.ДатаСеанса(),
				ДанныеДляПроверкиОтсутствий.Срок);
		Если РезультатПроверкиОтсутствий.ЕстьОтсутствия Тогда
			
			Обработчик = Новый ОписаниеОповещения(
				"ПродолжитьПослеПроверкиОтсутствия",
				ЭтотОбъект,
				ДопПараметры);
			
			ОтсутствияКлиент.ПредупредитьОбОтсутствиях(РезультатПроверкиОтсутствий, Обработчик);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	КлючеваяОперация = "НачатьОбработкуОбъекта";
	ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
	
	Состояние(НСтр("ru = 'Выполняется подготовка отправки в обработку. Пожалуйста, подождите...'"));
	// Требуется автозаполнение файлов
	Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Объект.Ссылка) Тогда 
		МассивФайловДляЗаполнения = Новый Массив;
		Для Каждого Строка Из Форма.Файлы.ПолучитьЭлементы() Цикл
			Если Не Строка.ЭтоРольФайла
				И Не Строка.ЭтоДокумент
				И Не Строка.ЭтоДокументЭДО
				И Не Строка.ПодписанЭП
				И Не Строка.Зашифрован Тогда 
				МассивФайловДляЗаполнения.Добавить(Строка.Ссылка);
			КонецЕсли;
			
			Для Каждого Подстрока Из Строка.ПолучитьЭлементы() Цикл
				Если Подстрока.ПодписанЭП
					Или Подстрока.Зашифрован 
					Или Подстрока.ЭтоДокументЭДО
					Или Подстрока.ЭтоРольФайла Тогда 
					Продолжить;
				КонецЕсли;
				МассивФайловДляЗаполнения.Добавить(Подстрока.Ссылка);
			КонецЦикла;
			
		КонецЦикла;
		
		ОбработкиОбъектовВызовСервера.ЗаполнитьФайлыДокументаПриЗапускеВОбработку(
			МассивФайловДляЗаполнения);
	КонецЕсли;
	
	Предмет = ДопПараметры.Форма.Объект.Ссылка;
	ОбработкиОбъектовВызовСервера.НачатьОбработку(Предмет);
	
	ДелопроизводствоКлиент.ОповеститьОбИзмененииОбъекта(Предмет);
	
	Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		ЗаголовокОповещения = НСтр("ru = 'Обработка документа'");
		ТекстОповещения = НСтр("ru = 'Документ отправлен в обработку.'");
	ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда
		ЗаголовокОповещения = НСтр("ru = 'Обработка мероприятия'");
		ТекстОповещения = НСтр("ru = 'Мероприятие отправлено в обработку.'");
	Иначе
		ЗаголовокОповещения = НСтр("ru = 'Обработка объекта'");
		ТекстОповещения = НСтр("ru = 'Объект отправлен в обработку.'");
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		ЗаголовокОповещения,,
		ТекстОповещения);
	
	Если ДопПараметры.ОбработчикОповещения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДопПараметры.ОбработчикОповещения, Новый Структура);
	КонецЕсли;
	
КонецПроцедуры

// Продолжение ПерейтиКВыполнениюДействия.
//
Процедура ЗавершитьПереходКВыполнениюДействия(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = Неопределено
		Или Ответ.Значение = КодВозвратаДиалога.Отмена Тогда
		
		Возврат;
	КонецЕсли;
	
	Действие = ДопПараметры.Действие;
	Предмет = ДопПараметры.Предмет;
	ИзмененияОбработки = ДопПараметры.ИзмененияОбработки;
	Если ИзмененияОбработки.ПереходЧерезОчередьЗаданийКОД Тогда
		ОбработкиОбъектовХолдингВызовСервера.ДобавитьЗаданиеПерейтиКВыполнениюДействияВнеОчереди(Действие);
		ПоказатьПредупреждение(, НСтр("ru = 'Переход завершен. Выполнение действия начнется в ближайшее время.'"));
		Возврат;
	КонецЕсли;
	
	ОбработкиОбъектовВызовСервера.ПерейтиКВыполнениюДействия(Действие, ИзмененияОбработки);
	
	Если ОбработкаОчередиЗаданийКлиентПовтИсп.ИспользоватьЗадания() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Переход завершен. Выполнение действия начнется в ближайшее время.'"));
	КонецЕсли;
	
	Оповестить("ВыполненПереходКВыполнениюДействия",
		Новый Структура("Предмет, Действие", Предмет, Действие));
	
КонецПроцедуры

Процедура ПродолжитьПослеПроверкиОтсутствия(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметры.Вставить("ПоказаноПредупреждениеОбОтсутствиях", Истина);
	ПродолжитьПослеОповещенияОбИзменении(ДопПараметры);
	
КонецПроцедуры

#КонецОбласти