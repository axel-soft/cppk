
#Область ПрограммныйИнтерфейс

// Возвращает структуру с основными данными переданного документа
//
// Параметры:
//   ТекущийДокумент - СправочникСсылка.ДокументыПредприятия - документ, данные которого необходимо получить
//   ДопПараметры - См. ОбзорОбъектовКлиентСервер.НовыйДопПараметрыМиникарточки
//
// Возвращаемое значение:
//   Структура - структура с основными данными документа:
//   * Обзор - Строка - Html-страница для показа в форме
//   * Файлы - См. ПолучитьданныеФайлов
//   * МассивКомбинацийРолей - Массив Из Структура -
//   * Задачи - см. ПолучитьДанныеЗадач
//   * ДоступныеПоля - Строка, Массив Из Строка -
//   * НедоступныеПоля - Строка, Массив Из Строка -
//   * НеизменяемыеПоля - Строка, Массив Из Строка -
//   * ЗапретитьРедактироватьФайлы - Булево -
//   * ЗапретитьУдалятьФайлы - Булево -
//   * ПолныеПрава - Булево -
//   * ИспользоватьСостоянияДокументов - Булево -
//   * ОграничиватьДоступностьПолейПоСостоянию - Булево -
//   * ВестиУчетСканКопийОригиналовДокументов - Булево -
//   * ИменаПолейИКомандДляНастройкиДоступности - Массив Из Структура
//   * СостояниеТекст - Строка -
//   * СостояниеОбработки - ПеречислениеСсылка.СостоянияОбработкиОбъектов, Неопределено -
//   * ЭтоОбъектИзДругойСистемы - Булево -
//   * ТекущийЧислоРолейФайлов - Число -
//   * ВидДокументаКэш - См. Делопроизводство.КэшВидаДокумента
//   				   - Неопределено -
Функция ПолучитьДанныеМиникарточки(ТекущийДокумент, ДопПараметры = Неопределено) Экспорт 
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ОбзорОбъектовКлиентСервер.НовыйДопПараметрыМиникарточки();
	КонецЕсли;
	
	
	ДанныеМиникарточки = Новый Структура();
	ДанныеМиникарточки.Вставить("Обзор", "");
	ДанныеМиникарточки.Вставить("Файлы", Новый Массив);
	ДанныеМиникарточки.Вставить("МассивКомбинацийРолей", Новый Массив);
	ДанныеМиникарточки.Вставить("Задачи", Новый Массив);
	ДанныеМиникарточки.Вставить("ДоступныеПоля", "");
	ДанныеМиникарточки.Вставить("НедоступныеПоля", "");
	ДанныеМиникарточки.Вставить("НеизменяемыеПоля", "");
	ДанныеМиникарточки.Вставить("ЗапретитьРедактироватьФайлы", Ложь);
	ДанныеМиникарточки.Вставить("ЗапретитьУдалятьФайлы", Ложь);
	ДанныеМиникарточки.Вставить("ПолныеПрава", Ложь);
	ДанныеМиникарточки.Вставить("ИспользоватьСостоянияДокументов", Ложь);
	ДанныеМиникарточки.Вставить("ОграничиватьДоступностьПолейПоСостоянию", Ложь);
	ДанныеМиникарточки.Вставить("ВестиУчетСканКопийОригиналовДокументов", Ложь);
	ДанныеМиникарточки.Вставить("ИменаПолейИКомандДляНастройкиДоступности", Новый Массив);
	ДанныеМиникарточки.Вставить("СостояниеТекст", "");
	ДанныеМиникарточки.Вставить("СостояниеОбработки", Неопределено);
	ДанныеМиникарточки.Вставить("ЭтоОбъектИзДругойСистемы", Ложь);
	ДанныеМиникарточки.Вставить("ТекущийЧислоРолейФайлов", 0);
	ДанныеМиникарточки.Вставить("ВидДокументаКэш", Неопределено);  
	ДанныеМиникарточки.Вставить("ДокументПодписан", Ложь);  
	ДанныеМиникарточки.Вставить("ДокументЭДО", Неопределено);
	ДанныеМиникарточки.Вставить("ДокументЭДО", Неопределено);
	ДанныеМиникарточки.Вставить("СостояниеЭДОСсылка", Неопределено);
	
	Если ЗначениеЗаполнено(ТекущийДокумент) Тогда 
		
		РеквизитыДокумента = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
			ТекущийДокумент, "Шаблон, ИсточникДанных");  
			
		ДанныеМиникарточки.ДокументПодписан = ДействияСервер.ДокументПодписан(ТекущийДокумент);		
		
		Шаблон = РеквизитыДокумента.Шаблон;
		ИсточникДанных = РеквизитыДокумента.ИсточникДанных;
		
		ЭтоОбъектИзДругойСистемы = МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(ИсточникДанных); 
		ДанныеМиникарточки.ЭтоОбъектИзДругойСистемы = ЭтоОбъектИзДругойСистемы;
		
		ДанныеМиникарточки.ПолныеПрава = Пользователи.ЭтоПолноправныйПользователь();
		ДанныеМиникарточки.ИспользоватьСостоянияДокументов = Константы.ИспользоватьСостоянияДокументов.Получить();
		ДанныеМиникарточки.ОграничиватьДоступностьПолейПоСостоянию = Константы.ОграничиватьДоступностьПолейПоСостоянию.Получить();
		ДанныеМиникарточки.ВестиУчетСканКопийОригиналовДокументов = Константы.ВестиУчетСканКопийОригиналовДокументов.Получить();
		ДанныеМиникарточки.СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(ТекущийДокумент);
		
		ИменаПолейИКомандДляНастройкиДоступности = Делопроизводство.ПолучитьИменаПолейИКомандДляНастройкиДоступности();
		Для Каждого Строка Из ИменаПолейИКомандДляНастройкиДоступности Цикл
			СтрокаТаблицы = ОбщегоНазначенияДокументооборот.НовыйСтруктураИзКолонокОбъекта(
				ИменаПолейИКомандДляНастройкиДоступности);
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Строка);
			ДанныеМиникарточки.ИменаПолейИКомандДляНастройкиДоступности.Добавить(СтрокаТаблицы);
		КонецЦикла;
		
		РезультатыЗапросов = РезультатыЗапросовДляМиникарточки(ТекущийДокумент, ДопПараметры.ПоказыватьУдаленныеФайлы);
		ДанныеМиникарточки.Файлы = ПолучитьДанныеФайлов(РезультатыЗапросов[0], 
			ТекущийДокумент, ДанныеМиникарточки.МассивКомбинацийРолей);
		ДанныеМиникарточки.Задачи = ПолучитьДанныеЗадач(РезультатыЗапросов[1]);
		
		ДанныеОбзора = ДанныеОбзора(РезультатыЗапросов[2]);
		ДанныеМиникарточки.Обзор = ДанныеОбзора.HtmlТекст;
		
		РолиФайлов = Делопроизводство.РолиФайловДляВидаДокументов(ДанныеОбзора.ВидДокумента);
		ДанныеМиникарточки.ТекущийЧислоРолейФайлов = РолиФайлов.Количество();
		
		МассивДоступныеПоля = Новый Массив;
		МассивНедоступныеПоля = Новый Массив;
		
		Делопроизводство.ПолучитьДоступныеИНедоступныеПоСостояниюПоля(ТекущийДокумент.ПолучитьОбъект(), 
			МассивДоступныеПоля, МассивНедоступныеПоля);
		
		ДанныеМиникарточки.ДоступныеПоля = МассивДоступныеПоля;
		ДанныеМиникарточки.НедоступныеПоля = МассивНедоступныеПоля;
		
		СозданПоШаблону = ЗначениеЗаполнено(Шаблон) И ТипЗнч(Шаблон) = Тип("СправочникСсылка.ШаблоныДокументов");
		
		ИспользоватьЗапретРедактированияИзШаблона = Ложь;
		Если СозданПоШаблону И Не ДанныеМиникарточки.ПолныеПрава Тогда
			РеквизитыШаблона = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
				Шаблон, "ЗапретитьРедактироватьФайлы, ЗапретитьУдалятьФайлы");
			ИспользоватьЗапретРедактированияИзШаблона = Истина;
		КонецЕсли;
		
		ДанныеМиникарточки.ЗапретитьРедактироватьФайлы = ?(ИспользоватьЗапретРедактированияИзШаблона,
			РеквизитыШаблона.ЗапретитьРедактироватьФайлы, Ложь) Или ЭтоОбъектИзДругойСистемы;
		ДанныеМиникарточки.ЗапретитьУдалятьФайлы = ?(ИспользоватьЗапретРедактированияИзШаблона,
			РеквизитыШаблона.ЗапретитьУдалятьФайлы, Ложь) Или ЭтоОбъектИзДругойСистемы;
		
		СостояниеОбработки = Неопределено;
		ТекущаяОбработкаОбъекта = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(ТекущийДокумент);
		Если ЗначениеЗаполнено(ТекущаяОбработкаОбъекта) Тогда 
			СостояниеОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяОбработкаОбъекта, "Состояние");
		КонецЕсли;
		ДанныеМиникарточки.СостояниеОбработки = СостояниеОбработки;
		
		Если ДанныеОбзора.ВидДокумента <> ДопПараметры.ПредыдущийВидДокумента Тогда
			ВидДокументаКэш = Делопроизводство.КэшВидаДокумента(ДанныеОбзора.ВидДокумента);
			ДанныеМиникарточки.Вставить("ВидДокументаКэш", ВидДокументаКэш);
		КонецЕсли;   
		
		МассивЭД = ОбменЭДОДокументооборот.ЭлектронныеДокументыОбъектаУчета(ТекущийДокумент);
		Если МассивЭД.Количество() <> 0 Тогда
			ДанныеМиникарточки.ДокументЭДО = МассивЭД[0];
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат ДанныеМиникарточки; //@skip-check constructor-function-return-section
	
КонецФункции

// Возвращает структуру с основными данными переданного документа
//
// Параметры:
//   ТекущийДокумент        - СправочникСсылка.ДокументыПредприятия - документ, данные которого необходимо получить
//   ВидДокумента			- СправочникСсылка.ВидыДокументов
//   ПоказыватьУдаленныеФайлы - Булево - Истина, если необходимо показывать помеченные на удаление файлы
//
// Возвращаемое значение:
//   Структура - структура с основными данными документа
//
Функция ДанныеМиникарточкиТолькоФайлы(Знач ТекущийДокумент, Знач ВидДокумента, Знач ПоказыватьУдаленныеФайлы) Экспорт 
	
	ДанныеМиникарточки = Новый Структура();
	ДанныеМиникарточки.Вставить("Файлы", Новый Массив);
	ДанныеМиникарточки.Вставить("МассивКомбинацийРолей", Новый Массив);
	ДанныеМиникарточки.Вставить("ТекущийЧислоРолейФайлов", 0);
	
	Если ЗначениеЗаполнено(ТекущийДокумент) Тогда 
		
		РезультатПоФайлам = РезультатыЗапросовДляМиникарточкиФайлы(ТекущийДокумент, ПоказыватьУдаленныеФайлы);
		
		ДанныеМиникарточки.Файлы = ДанныеФайловДляОбновленияФайлов(РезультатПоФайлам, 
			ТекущийДокумент, ДанныеМиникарточки.МассивКомбинацийРолей, ПоказыватьУдаленныеФайлы);
		
		РолиФайлов = Делопроизводство.РолиФайловДляВидаДокументов(ВидДокумента);
		ДанныеМиникарточки.Вставить("ТекущийЧислоРолейФайлов", РолиФайлов.Количество());
		
	КонецЕсли;
	
	Возврат ДанныеМиникарточки;
	
КонецФункции

Функция ПолучитьЗапросДляДокумента(ТекущийДокумент) Экспорт
	
	ЗапросТекст = "";
	
	ЗапросТекст = 
		"ВЫБРАТЬ
		|	ДокументыПредприятия.Ссылка,
		|	ДокументыПредприятия.Заголовок,
		|	ДокументыПредприятия.Содержание,
		|	ДокументыПредприятия.Сумма,
		|	ДокументыПредприятия.Валюта,
		|	ДокументыПредприятия.Контрагент,
		|	ДокументыПредприятия.СрокИсполнения,
		|	ДокументыПредприятия.НеДействует,
		|	ЕСТЬNULL(ДокументыПредприятия.ВидДокумента.УчитыватьСуммуДокумента, ЛОЖЬ) КАК УчитыватьСуммуДокумента,
		|	ЕСТЬNULL(ДокументыПредприятия.ВидДокумента.ВестиУчетТоваровИУслуг, ЛОЖЬ) КАК ВестиУчетТоваровИУслуг,
		|	ЕСТЬNULL(ДокументыПредприятия.ВидДокумента.ВестиУчетПоКонтрагентам, ЛОЖЬ) КАК ВестиУчетПоКонтрагентам,
		|	ЕСТЬNULL(ДокументыПредприятия.ВидДокумента.ВестиУчетСторон, ЛОЖЬ) КАК ВестиУчетСторон,
		|	ЕСТЬNULL(ДокументыПредприятия.ВидДокумента.УчитыватьНедействующиеДокументы, ЛОЖЬ) КАК
		|		УчитыватьНедействующиеДокументы,
		|	ЕСТЬNULL(ДокументыПредприятия.ВидДокумента.УчитыватьСрокДействия, ЛОЖЬ) КАК УчитыватьСрокДействия,
		|	ЕСТЬNULL(ДокументыПредприятия.ВидДокумента.ИспользоватьСрокИсполнения, ЛОЖЬ) КАК ИспользоватьСрокИсполнения,
		|	ЕСТЬNULL(ДокументыПредприятия.ВидДокумента.ВестиУчетПоОрганизациям, ЛОЖЬ) КАК ВестиУчетПоОрганизациям,
		|	ДокументыПредприятия.ДатаНачалаДействия,
		|	ДокументыПредприятия.ДатаОкончанияДействия,
		|	ДокументыПредприятия.ДатаСоздания КАК ДатаСоздания,
		|	ДокументыПредприятия.ДатаРегистрации КАК ДатаРегистрации,
		|	ДокументыПредприятия.ПорядокПродления,
		|	ДокументыПредприятия.Бессрочный,
		|	ДокументыПредприятия.ДополнительныеРеквизиты,
		|	ДокументыПредприятия.Товары,
		|	ДокументыПредприятия.Контрагенты,
		|	ДокументыПредприятия.Стороны,
		|	ДокументыПредприятия.СуммаНДС,
		|	ДокументыПредприятия.Организация,
		|	ЕСТЬNULL(ДанныеДокументовПредприятия.КонтрагентыДляСписков, """") КАК КонтрагентыДляСписков,
		|	ДокументыПредприятия.ВидДокумента КАК ВидДокумента,
		|	ЕСТЬNULL(ДокументыПредприятия.ВидДокумента.ЯвляетсяВходящейКорреспонденцией, Неопределено) КАК
		|		ЯвляетсяВходящейКорреспонденцией,
		|	ЕСТЬNULL(ДокументыПредприятия.ВидДокумента.ЯвляетсяИсходящейКорреспонденцией, Неопределено) КАК
		|		ЯвляетсяИсходящейКорреспонденцией,
		|	ЕСТЬNULL(ДокументыПредприятия.ВидДокумента.ЯвляетсяОбращениемОтГраждан, ЛОЖЬ) КАК
		|		ЯвляетсяОбращениемОтГраждан,
		|	ЕСТЬNULL(ДанныеДокументовПредприятия.ВидОбращения, ЗНАЧЕНИЕ(Перечисление.ВидыОбращенийГраждан.ПустаяСсылка))
		|		КАК ВидОбращения,
		|	ЕСТЬNULL(ДанныеДокументовПредприятия.Повторное, ЛОЖЬ) КАК Повторное,
		|	ЕСТЬNULL(ДанныеДокументовПредприятия.Дубликат, ЛОЖЬ) КАК Дубликат,
		|	ЕСТЬNULL(ДанныеДокументовПредприятия.АдресатыДляСписков, """") КАК АдресатыДляСписков
		|ИЗ
		|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеДокументовПредприятия КАК ДанныеДокументовПредприятия
		|		ПО ДокументыПредприятия.Ссылка = ДанныеДокументовПредприятия.Документ
		|ГДЕ
		|	ДокументыПредприятия.Ссылка = &ТекущийДокумент";
		
	Возврат ЗапросТекст;
	
КонецФункции

// Добавить В HTML основные данные обзора.
// 
// Параметры:
//  HTMLТекст - Строка -  HTMLТекст
//  Выборка - ВыборкаИзРезультатаЗапроса -  Выборка:
// * Заголовок - Строка - 
// * Исполнитель - ОпределяемыйТип.УчастникЗадач - 
// * ВидЗадачи - СправочникСсылка.ВидыЗадач - 
// * Задача - ДокументСсылка.Задача - 
// * Срок - Дата - 
// * Просрочено - Булево - 
// * ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи - 
// * Ссылка - СправочникСсылка.Файлы - 
// * Ссылка - СправочникСсылка.Файлы - 
// * Ссылка - СправочникСсылка.ДокументыПредприятия - 
// * Заголовок - Строка - 
// * Содержание - Строка - 
// * Сумма - Число - 
// * Валюта - СправочникСсылка.Валюты - 
// * Контрагент - СправочникСсылка.Контрагенты - 
// * СрокИсполнения - Дата - 
// * НеДействует - Булево - 
// * УчитыватьСуммуДокумента - Булево - 
// * ВестиУчетТоваровИУслуг - Булево - 
// * ВестиУчетПоКонтрагентам - Булево - 
// * ВестиУчетСторон - Булево - 
// * УчитыватьНедействующиеДокументы - Булево - 
// * УчитыватьСрокДействия - Булево - 
// * ИспользоватьСрокИсполнения - Булево - 
// * ВестиУчетПоОрганизациям - Булево - 
// * ДатаНачалаДействия - Дата - 
// * ДатаОкончанияДействия - Дата - 
// * ДатаСоздания - Дата - 
// * ДатаРегистрации - Дата - 
// * ПорядокПродления - ПеречислениеСсылка.ПорядокПродления - 
// * Бессрочный - Булево - 
// * ДополнительныеРеквизиты - РезультатЗапроса - 
// * Товары - РезультатЗапроса - 
// * Контрагенты - РезультатЗапроса - 
// * Стороны - РезультатЗапроса - 
// * СуммаНДС - Число - 
// * Организация - СправочникСсылка.Организации - 
// * КонтрагентыДляСписков - Строка - 
// * ВидДокумента - СправочникСсылка.ВидыДокументов - 
// * ЯвляетсяВходящейКорреспонденцией - Булево - 
// * ЯвляетсяИсходящейКорреспонденцией - Булево - 
// * ЯвляетсяОбращениемОтГраждан - Булево - 
// * ВидОбращения - ПеречислениеСсылка.ВидыОбращенийГраждан - 
// * Повторное - Булево - 
// * Дубликат - Булево - 
// * АдресатыДляСписков - Строка - 
//  КодЯзыка - Строка
// 
Процедура ДобавитьВHTMLОсновныеДанныеОбзора(HTMLТекст, Выборка, КодЯзыка) Экспорт
	
	Если ТипЗнч(Выборка.Ссылка) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда 
		
		ТипСвязи = Неопределено;
		Если Выборка.ЯвляетсяВходящейКорреспонденцией = Истина Тогда
			ТипСвязи = Справочники.ТипыСвязей.ПолученВОтветНа;
		ИначеЕсли Выборка.ЯвляетсяИсходящейКорреспонденцией = Истина Тогда
			ТипСвязи = Справочники.ТипыСвязей.ОтправленВОтветНа;
		КонецЕсли;
		
		Если ТипСвязи <> Неопределено Тогда
			ДокументыВОтветНа = СвязиОбъектов.ПолучитьСвязанныеОбъекты(Выборка.Ссылка, ТипСвязи);

			Если ДокументыВОтветНа.Количество() Тогда
				
				ПредставленияВОтветНа = Новый Массив;
				РеквизитыВОтветНа = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ДокументыВОтветНа,
					"РегистрационныйНомер, ДатаРегистрации, Заголовок");
				
				Для Каждого ДокументВОтветНа Из ДокументыВОтветНа Цикл
				
					Если ЗначениеЗаполнено(РеквизитыВОтветНа[ДокументВОтветНа].РегистрационныйНомер) Тогда
						Представление = СтрШаблон(НСтр("ru = '%1 от %2'", КодЯзыка),
							РеквизитыВОтветНа[ДокументВОтветНа].РегистрационныйНомер,
							Формат(РеквизитыВОтветНа[ДокументВОтветНа].ДатаРегистрации, "ДФ=dd.MM.yyyy;"));
					Иначе
						Представление = РеквизитыВОтветНа[ДокументВОтветНа].Заголовок;
					КонецЕсли;
					ПредставленияВОтветНа.Добавить(Представление);
					
				КонецЦикла;
				
				Если ПредставленияВОтветНа.Количество() Тогда
					HTMLТекст = HTMLТекст + "<p>";
					ДобавитьПодпись(HTMLТекст, НСтр("ru = 'В ответ на:'", КодЯзыка));
					HTMLТекст = HTMLТекст + СтрШаблон("<b><A href=v8doc:tasks/ShowInReplyTo/%1>%2</A></b> <br>",
						ПолучитьНавигационнуюСсылку(Выборка.Ссылка),
						СтрСоединить(ПредставленияВОтветНа, "; "));
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСвязиОбъектов") Тогда
			
			КраткиеСведенияОСвязях = СвязиОбъектов.КраткиеСведенияОСвязях(Выборка.Ссылка);

			Если Не ЗначениеЗаполнено(КраткиеСведенияОСвязях) Тогда	
				КраткиеСведенияОСвязях = НСтр("ru = 'Связи: не заданы'", КодЯзыка);
			КонецЕсли;	
			HTMLТекст = HTMLТекст + СтрШаблон(
				"<b><A href=v8doc:tasks/ShowLinks/%1>%2</A></b> <br>",
				ПолучитьНавигационнуюСсылку(Выборка.Ссылка),
				РаботаС_HTML.ЗаменитьСпецСимволыHTML(КраткиеСведенияОСвязях));
		КонецЕсли;
		
		ДатаСведений = Делопроизводство.ДатаУчетаДокумента(Выборка);
		
		Если ЗначениеЗаполнено(Выборка.Организация)
			И (Выборка.ВестиУчетПоОрганизациям Или Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям"))
			Тогда
			ДобавитьРеквизит(
				HTMLТекст, 
				РедакцииКонфигурацииКлиентСервер.Организация() + ":",
				Выборка.Организация,
				,
				Юрлица.ПредставлениеЮрлицаНаДату(Выборка.Организация, ДатаСведений));
		КонецЕсли;
		
		Если Выборка.ВестиУчетСторон Тогда
			Стороны = Выборка.Стороны.Выгрузить();
			
			Если Стороны.Количество() Тогда
				ДобавитьРеквизит(HTMLТекст, НСтр("ru = 'Стороны:'", КодЯзыка), "");
				Для Каждого СтрокаСторона Из Стороны Цикл
					Если ЗначениеЗаполнено(СтрокаСторона.Наименование) Тогда
						ДобавитьПодпись(HTMLТекст, СокрЛП(СтрокаСторона.Наименование) + ": ");
					КонецЕсли;
					
					ЮрлицоПредставление = Юрлица.ПредставлениеЮрлицаНаДату(СтрокаСторона.Сторона, ДатаСведений);
					ДобавитьЗначение(HTMLТекст, СтрокаСторона.Сторона, "", ЮрлицоПредставление);
					HTMLТекст = HTMLТекст + "<br>";
				КонецЦикла;	
				HTMLТекст = HTMLТекст + "<br>";
			Иначе
				ДобавитьРеквизит(HTMLТекст, НСтр("ru = 'Стороны: '", КодЯзыка), НСтр("ru = 'не указаны'", КодЯзыка));
			КонецЕсли;
		ИначеЕсли Выборка.ВестиУчетПоКонтрагентам Тогда 
			Контрагенты = Выборка.Контрагенты.Выгрузить();
			
			Если Контрагенты.Количество() > 1 Тогда 
				ДобавитьРеквизит(HTMLТекст, НСтр("ru = 'Контрагенты:'", КодЯзыка), Выборка.КонтрагентыДляСписков);
			ИначеЕсли Контрагенты.Количество() > 0 И ЗначениеЗаполнено(Выборка.Контрагент) Тогда 
				ЮрлицоПредставление = Юрлица.ПредставлениеЮрлицаНаДату(Выборка.Контрагент, ДатаСведений);
				ПодписьКонтрагента = НСтр("ru = 'Контрагент:'", КодЯзыка);
				Если Выборка.ЯвляетсяОбращениемОтГраждан Тогда
					ПодписьКонтрагента = НСтр("ru = 'Отправитель:'", КодЯзыка);
				КонецЕсли;
				ДобавитьРеквизит(HTMLТекст, ПодписьКонтрагента, Выборка.Контрагент, "", ЮрлицоПредставление);
			Иначе 
				ДобавитьРеквизит(HTMLТекст, ПодписьКонтрагента, НСтр("ru = 'не указан'", КодЯзыка));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Выборка.УчитыватьСуммуДокумента Тогда
		ДобавитьРеквизит(HTMLТекст, НСтр("ru = 'Сумма:'", КодЯзыка), 
			Формат(Выборка.Сумма, "ЧДЦ=2; ЧН=0") + " " + Строка(Выборка.Валюта));
	КонецЕсли;
	
	Если ТипЗнч(Выборка.Ссылка) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда 
		Если Выборка.УчитыватьСуммуДокумента Тогда 
			Если Делопроизводство.УчитыватьНДС(Выборка.Организация) Тогда 
				ДобавитьРеквизит(HTMLТекст, НСтр("ru = 'Сумма НДС:'", КодЯзыка), Формат(Выборка.СуммаНДС, "ЧДЦ=2; ЧН=0") + " " + 
					Выборка.Валюта);
			КонецЕсли;
			
			Если Выборка.ВестиУчетТоваровИУслуг Тогда
				Товары = Выборка.Товары.Выгрузить();
				КоличествоПозиций = Товары.Количество();
				Если КоличествоПозиций > 0 Тогда 
					ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Товары и услуги:'", КодЯзыка));
					HTMLТекст = HTMLТекст + СтрШаблон(
						"<A href=%1><B>%2</B></A><BR>",
						"v8doc:tasks/goods?ref=" + Строка(Выборка.Ссылка.УникальныйИдентификатор()),
						Формат(КоличествоПозиций, "ЧГ=") + " "
						+ ПользователиСлужебныйКлиентСервер.ПредметЦелогоЧисла(КоличествоПозиций,
							"Л = ru_RU", НСтр("ru = 'позиция,позиции,позиций,,,,,,0'", КодЯзыка)));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.УчитыватьСрокДействия Тогда
			СрокДействияСтрока = ДелопроизводствоКлиентСервер.СформироватьПредставлениеСрокаДействия(Выборка);
			Если ЗначениеЗаполнено(СрокДействияСтрока) Тогда 
				ДобавитьРеквизит(HTMLТекст, НСтр("ru = 'Срок действия:'", КодЯзыка), СрокДействияСтрока);
			Иначе 
				ДобавитьРеквизит(HTMLТекст, НСтр("ru = 'Срок действия:'", КодЯзыка), НСтр("ru = 'не указан'", КодЯзыка));
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.УчитыватьНедействующиеДокументы И Выборка.НеДействует Тогда
			ДобавитьРеквизит(HTMLТекст, НСтр("ru = 'Расторгнут:'", КодЯзыка), НСтр("ru = 'Да'", КодЯзыка));
		КонецЕсли;
		
	КонецЕсли;

	Если Выборка.ИспользоватьСрокИсполнения Тогда
		Если ДелопроизводствоКлиентСервер.ЭтоИсходящийДокумент(Выборка.Ссылка) Тогда
			ИмяПоля = НСтр("ru = 'Срок ответа:'", КодЯзыка);
		Иначе 
			ИмяПоля = НСтр("ru = 'Срок исполнения:'", КодЯзыка);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.СрокИсполнения) Тогда 	
			ДобавитьРеквизит(HTMLТекст, ИмяПоля, Формат(Выборка.СрокИсполнения, "ДЛФ=D"));
		Иначе 
			ДобавитьРеквизит(HTMLТекст, ИмяПоля, НСтр("ru = 'не указан'", КодЯзыка));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьЗапросДляЗадач()
	
	ЗапросТекст = "";
	
	ЗапросТекст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДействияЗадач.Заголовок,
		|	ДействияЗадач.Исполнитель,
		|	ДействияЗадач.ВидЗадачи,
		|	ДействияЗадач.Задача,
		|	ДействияЗадач.Срок,
		|	ДействияЗадач.Просрочено,
		|	ДействияЗадач.ДействиеЗадачи
		|ИЗ
		|	Документ.Задача.Приложения КАК ЗадачаПриложения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрЗадачПоИсполнителям КАК ДействияЗадач
		|		ПО ЗадачаПриложения.Ссылка = ДействияЗадач.Задача
		|		И ДействияЗадач.РеестрЗадач = ЗНАЧЕНИЕ(Справочник.РеестрыЗадач.ВсеЗадачи)
		|ГДЕ
		|	ЗадачаПриложения.Приложение = &ТекущийДокумент
		|	И ДействияЗадач.ОжидаетВыполнения";
	
	Возврат ЗапросТекст;
	
КонецФункции

Функция РезультатыЗапросовДляМиникарточкиФайлы(ТекущийДокумент, ПоказыватьУдаленныеФайлы)

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ 
		|	Файлы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
		|ГДЕ
		|	Файлы.ВладелецФайла = &ТекущийДокумент
		|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL
		|	И (&ПоказыватьУдаленныеФайлы
		|	ИЛИ НЕ Файлы.ПометкаУдаления)
		|УПОРЯДОЧИТЬ ПО
		|	Файлы.Наименование";
	
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
	Запрос.УстановитьПараметр("ПоказыватьУдаленныеФайлы", ПоказыватьУдаленныеФайлы);

	РезультатПоФайлам = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатПоФайлам; 
	
КонецФункции

Функция ДанныеФайловДляОбновленияФайлов(РезультатЗапроса, ТекущийДокумент, МассивКомбинацийРолей,
	ПоказыватьУдаленныеФайлы)
	
	Файлы = Новый Массив;
	
	МассивФайлов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ТаблицаФайлы = Делопроизводство.ПолучитьДанныеФайловДляСписка(МассивФайлов,
		ТекущийДокумент, ПоказыватьУдаленныеФайлы, Истина, МассивКомбинацийРолей);
		
	ИспользоватьРолиФайлов = ПолучитьФункциональнуюОпцию("ИспользоватьРолиФайлов");
	Если Не ИспользоватьРолиФайлов Тогда
		МассивКомбинацийРолей.Очистить();
	КонецЕсли;	
	
	Для Каждого Строка Из ТаблицаФайлы Цикл
		СтрокаФайлы = Новый Структура(
		"ПодписанЭП,
		|Зашифрован,
		|ИндексКартинки,
		|Наименование,
		|Описание,
		|ДатаСоздания,
		|Автор,
		|Редактирует,
		|ТекущаяВерсияРазмер,
		|ТекущаяВерсияАвтор,
		|ТекущаяВерсияДатаСоздания,
		|ХранитьВерсии,
		|СозданИзШаблона,
		|Условие,
		|РедактируетТекущийПользователь,
		|Ссылка,
		|Расширение,
		|ПометкаУдаления,
		|Оригинал,
		|СтатусПроверкиЭП,
		|СозданПоШаблонуДокумента,
		|ПолноеИмяФайлаВРабочемКаталоге,
		|ДатаМодификацииУниверсальнаяВБазе,
		|РольФайла,
		|ЭтоРольФайла,
		|РольОбязательная,
		|ФайлВизуализации,
		|ФайлВизуализацииЗанятМной,
		|ЭтоДокумент,
		|ПредпросмотрЕстьВБазе,
		|ТаймлистЗадание,
		|ТаймлистСтатус,
		|ТаймлистСледующиеШаги,
		|СтатусРаспознаванияТекста");
		
		ЗаполнитьЗначенияСвойств(СтрокаФайлы, Строка);
		Файлы.Добавить(СтрокаФайлы);
	КонецЦикла;
	
	Возврат Файлы;
	
КонецФункции

Функция РезультатыЗапросовДляМиникарточки(ТекущийДокумент, ПоказыватьУдаленныеФайлы)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
		|ГДЕ
		|	Файлы.ВладелецФайла = &ТекущийДокумент
		|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL
		|	И (&ПоказыватьУдаленныеФайлы
		|	ИЛИ НЕ Файлы.ПометкаУдаления)
		|УПОРЯДОЧИТЬ ПО
		|	Файлы.Наименование";
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(ТекущийДокумент) Тогда
		ЗапросДокумента = ПолучитьЗапросДляДокумента(ТекущийДокумент);
		Запрос.Текст = Запрос.Текст + Символы.ВК + ";" + Символы.ВК + Символы.ВК + ЗапросДокумента;
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
	Запрос.УстановитьПараметр("ПоказыватьУдаленныеФайлы", ПоказыватьУдаленныеФайлы);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());

	УстановитьПривилегированныйРежим(Истина);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Запрос.Текст = ПолучитьЗапросДляЗадач();
	РезультатПоЗадачам = Запрос.Выполнить();
	МассивРезультатов.Вставить(1, РезультатПоЗадачам);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МассивРезультатов; 
	
КонецФункции

// Получить данные обзора.
// 
// Параметры:
//  РезультатЗапроса - РезультатЗапроса -  Результат запроса
//  КодЯзыка - Строка
// 
// Возвращаемое значение:
// 	Структура:
//   * HtmlТекст - Строка - HTML-страница
//   * ВидДокумента - СправочникСсылка.ВидыДокументов, Неопределено -
Функция ДанныеОбзора(РезультатЗапроса, КодЯзыка = Неопределено) Экспорт
	
	Результат = Новый Структура("HtmlТекст, ВидДокумента", "", Неопределено);
	
	Если РезультатЗапроса.Пустой() Тогда
	
		Возврат Результат;
	
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда 
		HTMLТекст = ОбзорСпискаДокументовПереопределяемый.ПолучитьОбзорДокумента(Выборка.Ссылка);
		
		Если ЗначениеЗаполнено(HTMLТекст) Тогда 
			Результат.HtmlТекст = HTMLТекст;
			Возврат HTMLТекст;
		КонецЕсли;
	КонецЕсли; 
		
	HTMLТекст = "<html>
		|<head>
		|<style type=""text/css"">
		|	body {
		|		overflow:    auto;
		|		margin-top:  10px; 		 
		|		margin-left: 10px; 
		|		font-family: Arial, sans-serif; 
		|		font-size:   10pt;}
		| 	a:link {
		|		color: #006699; text-decoration: none;}
		|	a:visited {
		|		color: #006699; text-decoration: none;}
		|	a:hover {
		|		color: #006699; text-decoration: underline;}
		|	p {
		|		margin-top: 7px;}
		|</style>
		|<body>";
		
	ДобавитьВHTMLОсновныеДанныеОбзора(HTMLТекст, Выборка, КодЯзыка);
	
	ОбзорОбъектов.ДобавитьОбзорДополнительныхРеквизитов(HTMLТекст, Выборка.Ссылка);
	
	Если ЗначениеЗаполнено(Выборка.Содержание) Тогда
		Содержание = Выборка.Содержание;
		HTMLТекст = HTMLТекст + "<p>";
		HTMLТекст = HTMLТекст + СтрЗаменить(РаботаС_HTML.ЗаменитьСпецСимволыHTML(Содержание), Символы.ПС, "<br>");
		HTMLТекст = HTMLТекст + "</p>";
	КонецЕсли;
	
	Если Прав(HTMLТекст, 6) = "<body>" Тогда 
		Заголовок = Выборка.Заголовок;
		ДобавитьРеквизит(HTMLТекст, "", РаботаС_HTML.ЗаменитьСпецСимволыHTML(Заголовок));
	КонецЕсли;
	
	ДобавитьПоляОбращенияГражданина(HTMLТекст, Выборка, КодЯзыка);
	
	HTMLТекст = HTMLТекст + "</body></html>";
	
	ОбзорОбъектовКлиентСервер.УдалитьВредоносныйКодИзТекста(HTMLТекст);
	
	Результат.HtmlТекст = HTMLТекст;
	Результат.ВидДокумента = Выборка.ВидДокумента;
	Возврат Результат;
	
КонецФункции


Функция ПолучитьДанныеФайлов(РезультатЗапроса, ТекущийДокумент, МассивКомбинацийРолей = Неопределено)
	
	Файлы = Новый Массив;
	
	МассивФайлов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	ТаблицаФайлы = Делопроизводство.ПолучитьДанныеФайловДляСписка(МассивФайлов,
		ТекущийДокумент,,,МассивКомбинацийРолей);
		
	ИспользоватьРолиФайлов = ПолучитьФункциональнуюОпцию("ИспользоватьРолиФайлов");
	Если Не ИспользоватьРолиФайлов Тогда
		МассивКомбинацийРолей.Очистить();
	КонецЕсли;	
	
	Для Каждого Строка Из ТаблицаФайлы Цикл
		СтрокаФайлы = Новый Структура(
		"Наименование, 
		|ИндексКартинки, 
		|Описание, 
		|Оригинал, 
		|Ссылка,
		|СозданИзШаблона,
		|Редактирует,
		|Автор,
		|РедактируетТекущийПользователь,
		|Расширение,
		|ПометкаУдаления,
		|ПодписанЭП,
		|Зашифрован,
		|СозданПоШаблонуДокумента,
		|ХранитьВерсии,
		|РольФайла,
		|РолиФайлов");
		
		ЗаполнитьЗначенияСвойств(СтрокаФайлы, Строка);
		Файлы.Добавить(СтрокаФайлы);
	КонецЦикла;	
	
	Возврат Файлы;
	
КонецФункции

Функция ПолучитьДанныеЗадач(РезультатЗапроса)
	
	МассивСтрокЗадач = Новый Массив;
	МассивЗадач = Новый Массив;
	
	// Читаем все задачи. Унифицируем с вкладкой "обработка" в документе.
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаЗадача = Новый Структура(
			"Заголовок, 
			|Исполнитель,
			|ВидЗадачи,
			|Задача,
			|Срок,
			|Просрочено,
			|ДействиеЗадачи");
		
		СтрокаЗадача.Заголовок = Выборка.Заголовок;
		СтрокаЗадача.Исполнитель = Выборка.Исполнитель; 
		СтрокаЗадача.ВидЗадачи = Выборка.ВидЗадачи; 
		СтрокаЗадача.ДействиеЗадачи = Выборка.ДействиеЗадачи; 
		СтрокаЗадача.Задача = Выборка.Задача; 
		СтрокаЗадача.Просрочено = Выборка.Просрочено; 
		СтрокаЗадача.Срок = Выборка.Срок; 
		
		МассивСтрокЗадач.Добавить(СтрокаЗадача);
		
		МассивЗадач.Добавить(СтрокаЗадача.Задача);
		
	КонецЦикла;
	
	СкрытьЗаголовкиУЗадачБезПраваЧтения(МассивСтрокЗадач, МассивЗадач);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МассивСтрокЗадач;
	
КонецФункции

Процедура СкрытьЗаголовкиУЗадачБезПраваЧтения(МассивСтрокЗадач, МассивЗадач)
	
	ТекстОписаниеСкрыто = НСтр("ru = 'Описание скрыто'");
	
	ПраваСотрудниковПоОбъектам = ДокументооборотПраваДоступа.ПраваСотрудниковПоОбъектам(
			МассивЗадач,
			Истина,
			ПараметрыСеанса.СотрудникиПользователя);
			
	ПраваЧтенияПоЗадачам = Новый Соответствие;
	
	Для Каждого СтрокаПрав Из ПраваСотрудниковПоОбъектам Цикл
		
		Если ПраваЧтенияПоЗадачам[СтрокаПрав.ОбъектДоступа] = Неопределено Тогда
			ПраваЧтенияПоЗадачам[СтрокаПрав.ОбъектДоступа] = Ложь;
		КонецЕсли;
		
		ПраваЧтенияПоЗадачам[СтрокаПрав.ОбъектДоступа] =
			ПраваЧтенияПоЗадачам[СтрокаПрав.ОбъектДоступа] Или СтрокаПрав.Чтение;
		
	КонецЦикла;
	
	Для Каждого СтрокаЗадача Из МассивСтрокЗадач Цикл
		
		МожноЧитатьЗаголовок = ПраваЧтенияПоЗадачам[СтрокаЗадача.Задача] <> Неопределено 
			И ПраваЧтенияПоЗадачам[СтрокаЗадача.Задача];
		
		СтрокаЗадача.Заголовок = ?(МожноЧитатьЗаголовок,
			СтрокаЗадача.Заголовок,
			ТекстОписаниеСкрыто);
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПодпись(HTMLТекст, Подпись)
	
	Если ЗначениеЗаполнено(Подпись) Тогда 
		HTMLТекст = HTMLТекст + "<FONT color=#333333>";
		HTMLТекст = HTMLТекст + Подпись + " ";
		HTMLТекст = HTMLТекст + "</FONT>";
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЗначение(HTMLТекст, ЗначениеДанных, Цвет, ПредставлениеДанных)
	
	Значение = ЗначениеДанных;
	Представление = Строка(Значение);
	Если ЗначениеЗаполнено(ПредставлениеДанных) Тогда
		Представление = ПредставлениеДанных;
	КонецЕсли;
	
	ЭтоПеречисление = ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Значение))
		И ОбщегоНазначения.ЭтоПеречисление(Значение.Метаданные());
	Если ТипЗнч(Значение) = Тип("Строка") Или ЭтоПеречисление Тогда
		
		Если ЗначениеЗаполнено(Цвет) Тогда 
			HTMLТекст = HTMLТекст + "<FONT color=#"+Цвет+">";
			HTMLТекст = HTMLТекст + РаботаС_HTML.ЗаменитьСпецСимволыHTML(Представление);
			HTMLТекст = HTMLТекст + "</FONT>";
		Иначе
			HTMLТекст = HTMLТекст + РаботаС_HTML.ЗаменитьСпецСимволыHTML(Представление);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата")
		Или ТипЗнч(Значение) = Тип("Число")
		Или ТипЗнч(Значение) = Тип("Булево") Тогда 
		
		Если ЗначениеЗаполнено(Цвет) Тогда 
			HTMLТекст = HTMLТекст + "<FONT color=#"+Цвет+">";
			HTMLТекст = HTMLТекст + Значение;
			HTMLТекст = HTMLТекст + "</FONT>";
		Иначе	
			HTMLТекст = HTMLТекст + Значение;
		КонецЕсли;
	Иначе
		HTMLТекст = HTMLТекст + СтрШаблон(
			"<A href=v8doc:%1>%2</A>",
			ПолучитьНавигационнуюСсылку(Значение),
			РаботаС_HTML.ЗаменитьСпецСимволыHTML(Представление));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРеквизит(HTMLТекст, Подпись, Значение, Цвет = "", ПредставлениеДанных = "")
	
	ДобавитьПодпись(HTMLТекст, Подпись);
	ДобавитьЗначение(HTMLТекст, Значение, Цвет, ПредставлениеДанных); 
	HTMLТекст = HTMLТекст + "<br>";
	
КонецПроцедуры

// Добавить поля обращения гражданина.
// 
// Параметры:
//  HTMLТекст - Строка -  HTMLТекст, куда нужно добавить поля
//  Выборка - ВыборкаИзРезультатаЗапроса -  Выборка, запрос см. ПолучитьЗапросДляДокумента
//  КодЯзыка - Строка
// 
Процедура ДобавитьПоляОбращенияГражданина(HTMLТекст, Выборка, КодЯзыка)
	
	Если Не Выборка.ЯвляетсяОбращениемОтГраждан Тогда
		Возврат;
	КонецЕсли;
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетОбращенийГраждан") Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьРеквизит(HTMLТекст, НСтр("ru = 'Вид документа:'", КодЯзыка), Выборка.ВидДокумента);
	ДобавитьРеквизит(HTMLТекст, НСтр("ru = 'Вид обращения:'", КодЯзыка), Выборка.ВидОбращения);
	ДобавитьРеквизит(HTMLТекст, НСтр("ru = 'Повторное:'", КодЯзыка), Выборка.Повторное);
	ДобавитьРеквизит(HTMLТекст, НСтр("ru = 'Дубликат:'", КодЯзыка), Выборка.Дубликат);
	ДобавитьРеквизит(
		HTMLТекст, НСтр("ru = 'Адресат(ы):'", КодЯзыка),
		?(ЗначениеЗаполнено(Выборка.АдресатыДляСписков), Выборка.АдресатыДляСписков, НСтр("ru = 'Не указан'", КодЯзыка)));
	
КонецПроцедуры

#КонецОбласти