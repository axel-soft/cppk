///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс
//Получает массив автозаполнений в файле
//Параметры:
//			Файл - СправочникСсылка.Файлы - ссылка на объект файла
//			ФайлОснование - СправочникСсылка.Файлы - файл, на основании которого был создан Файл. Ссылка на шаблон файла.
//			ФактическийВладелецФайла - СправочникСсылка.ДокументыПредприятия - ссылка на владельца файла, на основании которого следует производить подстановку данных
//			ИспользоватьСкриптыСДвоичнымиДанными - Булево - если Истина, используем такие скрипты (возвращающие ДвоичныеДанные), иначе пропускаем.
//			ЗаполнятьТолькоПоляРегистрации - Булево - если Истина, то заполняем только поля РегНомер РегДата и такие же скрипты
//			
//Возвращаемое значение:
//  Массив  - массив замен в формате "какое поле заменить"-"какую строку заменить"-"на что заменить"
Функция ПолучитьМассивАвтозаполненийШаблона(Файл, ФайлОснование, ФактическийВладелецФайла,
	ИспользоватьСкриптыСДвоичнымиДанными = Ложь,
	ЗаполнятьТолькоПоляРегистрации = Ложь) Экспорт
	
	СтрокаОшибки = "";
	МассивДанныеЗамен = Новый Массив;
	Если ТипЗнч(ФактическийВладелецФайла) <> Тип("СправочникСсылка.ДокументыПредприятия") 
		И ТипЗнч(ФактическийВладелецФайла) <> Тип("СправочникСсылка.ПапкиФайлов")  Тогда
		Возврат МассивДанныеЗамен;
	КонецЕсли;
	
	Корреспонденция = Неопределено;
	Если ТипЗнч(ФактическийВладелецФайла) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда 
		Корреспонденция = РаботаСКорреспонденциейВызовСервера.КорреспонденцияДокумента(ФактическийВладелецФайла);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АвтозаполненияФайлов.ДанныеДляАвтозаполнения.(
		|		ТермДляЗамены,
		|		ЗаменяемаяСтрока,
		|		ЗначениеЗамены,
		|		ВыражениеОбработкиРезультатаЗамены,
		|		ФорматЗначенияЗамены,
		|		НомерКолонкиТабличнойЧасти,
		|		Падеж
		|	)
		|ИЗ
		|	Справочник.ПравилаАвтозаполненияФайлов КАК АвтозаполненияФайлов
		|ГДЕ
		|	АвтозаполненияФайлов.ВладелецФайла = &ВладелецФайла
		|	И АвтозаполненияФайлов.ШаблонФайла = &ШаблонФайла";
	
	Если ТипЗнч(ФактическийВладелецФайла) = Тип("СправочникСсылка.ВидыДокументов")
		Или ТипЗнч(ФактическийВладелецФайла) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
		Запрос.УстановитьПараметр("ВладелецФайла", ФактическийВладелецФайла);
	Иначе
		Запрос.УстановитьПараметр("ВладелецФайла", ФактическийВладелецФайла.ВидДокумента);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ШаблонФайла", ФайлОснование);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	ПоляРегистрации = Новый Массив;
	ПоляРегистрации.Добавить("ДатаРегистрации");
	// не  РегистрационныйНомер, а короче - т.к более 20 символов обрезаем, скажем РегистрационныйНом12 или РегистрационныйНоме4
	ПоляРегистрации.Добавить("РегистрационныйНом");
	ПоляРегистрации.Добавить("РегНомер");
	ПоляРегистрации.Добавить("РегДата");
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДанныеДляЗамены = ВыборкаДетальныеЗаписи.ДанныеДляАвтозаполнения.Выбрать();
		Пока ДанныеДляЗамены.Следующий() Цикл
			
			ИспользуемЭтуЗамену = Истина;
			
			Если ЗаполнятьТолькоПоляРегистрации Тогда
				
				НашлиПоле = Ложь;
				
				Для Каждого ПолеРегистрации Из ПоляРегистрации Цикл
					
					Если СтрНачинаетсяС(ДанныеДляЗамены.ТермДляЗамены, ПолеРегистрации) Тогда
						НашлиПоле = Истина;
					КонецЕсли;	
					
					Если СтрНачинаетсяС(ДанныеДляЗамены.ЗаменяемаяСтрока, ПолеРегистрации) Тогда
						НашлиПоле = Истина;
					КонецЕсли;	
					
				КонецЦикла;	
				
				Если Не НашлиПоле Тогда
					Продолжить;
				КонецЕсли;	
				
			КонецЕсли;	
			
			ДанныеВладельцаФайлаДляАвтозаполнения = Новый Структура(
				"ТермДляЗамены, ЗаменяемаяСтрока, ЗначениеЗамены, НомерКолонкиТабличнойЧасти");
			ДанныеВладельцаФайлаДляАвтозаполнения.ТермДляЗамены = ДанныеДляЗамены.ТермДляЗамены;
			ДанныеВладельцаФайлаДляАвтозаполнения.ЗаменяемаяСтрока = ДанныеДляЗамены.ЗаменяемаяСтрока;
			ДанныеВладельцаФайлаДляАвтозаполнения.НомерКолонкиТабличнойЧасти = 0;
			
			РезультатЗамены = ""; ТабличнаяЧасть = Ложь;
			ЗначениеЗамены = ДанныеДляЗамены.ЗначениеЗамены;
			Если СтрНачинаетсяС(ЗначениеЗамены, "{")
				И СтрЗаканчиваетсяНа(ЗначениеЗамены, "}")
				И СтрНайти(ЗначениеЗамены, "ТабличнаяЧасть") > 0 Тогда
				Попытка
					НазваниеПоля = СтрЗаменить(СтрЗаменить(ЗначениеЗамены, "}", ""), "{", "");
					
					ЗначениеРеквизита = 
						АвтозаполнениеШаблоновФайловВызовСервераПовтИспВызов.ПолучитьЗначениеРеквизитаТабличнойЧастиДляАвтозаполнения(
							Файл.Ссылка,
							НазваниеПоля,
							ФактическийВладелецФайла);
						
					ТабличнаяЧасть = Истина;
					Если ЗначениеЗаполнено(ДанныеДляЗамены.ФорматЗначенияЗамены) Или ДанныеДляЗамены.Падеж > 0 Тогда
						Если ТипЗнч(ЗначениеРеквизита) = Тип("Массив") Тогда 
							Для Каждого ЗначениеМассива Из ЗначениеРеквизита Цикл 
								
								Если ДанныеДляЗамены.Падеж > 0 И ЗначениеЗаполнено(ЗначениеМассива.Значение) Тогда
									ЗначениеМассива.Значение = СклонениеПредставленийОбъектов.ПросклонятьПредставление(
										СокрЛП(ЗначениеМассива.Значение), ДанныеДляЗамены.Падеж);
								КонецЕсли;
								
								ЗначениеМассива.Значение = СокрЛП(Формат(ЗначениеМассива.Значение, 
									ДанныеДляЗамены.ФорматЗначенияЗамены));
							КонецЦикла;
							
							РезультатЗамены = ЗначениеРеквизита;
						Иначе 
							
							Если ДанныеДляЗамены.Падеж > 0 И ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
								ЗначениеРеквизита = СклонениеПредставленийОбъектов.ПросклонятьПредставление(
									СокрЛП(ЗначениеРеквизита), ДанныеДляЗамены.Падеж);
							КонецЕсли;
							
							РезультатЗамены = СокрЛП(Формат(ЗначениеРеквизита, ДанныеДляЗамены.ФорматЗначенияЗамены));
						КонецЕсли;
					Иначе
						Если ТипЗнч(ЗначениеРеквизита) = Тип("Массив") Тогда 
							Для Каждого ЗначениеМассива Из ЗначениеРеквизита Цикл 
								ЗначениеМассива.Значение = СокрЛП(ЗначениеМассива.Значение);
							КонецЦикла;
							
							РезультатЗамены = ЗначениеРеквизита;
						Иначе 
							РезультатЗамены = СокрЛП(ЗначениеРеквизита);
						КонецЕсли;
						
						РезультатЗамены = ЗначениеРеквизита;
					КонецЕсли;
					
					ДанныеВладельцаФайлаДляАвтозаполнения.НомерКолонкиТабличнойЧасти = ДанныеДляЗамены.НомерКолонкиТабличнойЧасти;
				Исключение
					ОшибкаИнфо = ИнформацияОбОшибке();
					Если ОшибкаИнфо.Описание = "ОшибкаДоступаКРеквизиту" Тогда
						СтрокаОшибки = СтрокаОшибки + ЗначениеЗамены + Символы.ВК;
					Иначе
						ВызватьИсключение(ОшибкаИнфо.Описание);
					КонецЕсли;
				КонецПопытки;
				
			ИначеЕсли СтрНачинаетсяС(ЗначениеЗамены, "{")
				И СтрЗаканчиваетсяНа(ЗначениеЗамены, "}")
				И СтрНайти(ЗначениеЗамены, "ДопРеквизиты") = 0
				И СтрНайти(ЗначениеЗамены, "ДопСвойства") = 0
				И СтрНайти(ЗначениеЗамены, "КонтактнаяИнформация") = 0 
				И СтрНайти(ЗначениеЗамены, "Корреспонденция") = 0 
				И СтрНайти(ЗначениеЗамены, "Подписывающие") = 0 Тогда
				Попытка
					ЗначениеРеквизита = 
						АвтозаполнениеШаблоновФайловВызовСервераПовтИспВызов.ПолучитьЗначениеРеквизитаДляАвтозаполнения(
							Файл.Ссылка, 
							СтрЗаменить(СтрЗаменить(ДанныеДляЗамены.ЗначениеЗамены, "}", ""), "{", ""),
							ФактическийВладелецФайла);
							
					ЭтоДокумент = (ТипЗнч(ФактическийВладелецФайла) = Тип("СправочникСсылка.ДокументыПредприятия"));
					Если ТипЗнч(ЗначениеРеквизита) = Тип("СправочникСсылка.Сотрудники") И ЭтоДокумент Тогда
						
						ДатаУчета = Делопроизводство.ДатаУчетаДокумента(ФактическийВладелецФайла);
						
						ЗначениеРеквизита = 
							Сотрудники.ПредставлениеСотрудникаНаДату(ЗначениеРеквизита, ДатаУчета, ДанныеДляЗамены.Падеж);
						
					ИначеЕсли ДанныеДляЗамены.Падеж > 0 И ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
						
						ЗначениеРеквизита = СклонениеПредставленийОбъектов.ПросклонятьПредставление(
							СокрЛП(ЗначениеРеквизита), ДанныеДляЗамены.Падеж);
						
					КонецЕсли; 
					
					Если ЗначениеЗаполнено(ДанныеДляЗамены.ФорматЗначенияЗамены) Тогда
						РезультатЗамены = Формат(ЗначениеРеквизита, ДанныеДляЗамены.ФорматЗначенияЗамены);
					ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("Дата") И Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
						РезультатЗамены = ""; // для пустой даты, чтоб не показало "0001.01.01...".
					Иначе
						РезультатЗамены = ЗначениеРеквизита;
					КонецЕсли;
				Исключение
					ОшибкаИнфо = ИнформацияОбОшибке();
					Если ОшибкаИнфо.Описание = "ОшибкаДоступаКРеквизиту" Тогда
						СтрокаОшибки = СтрокаОшибки + ЗначениеЗамены + Символы.ВК;
					Иначе
						ВызватьИсключение(ОшибкаИнфо.Описание);
					КонецЕсли;
				КонецПопытки;
			ИначеЕсли СтрНачинаетсяС(ЗначениеЗамены, "{")
				И СтрЗаканчиваетсяНа(ЗначениеЗамены, "}")
				И (СтрНайти(ЗначениеЗамены, "ДопРеквизиты") > 0
				Или СтрНайти(ЗначениеЗамены, "ДопСвойства") > 0) Тогда
				
				ЗначениеДопРеквизита = АвтозаполнениеШаблоновФайловВызовСервераПовтИспВызов.ПолучитьЗначениеДопРеквизитаДляЗамены(
					Файл.Ссылка,
					СтрЗаменить(СтрЗаменить(ЗначениеЗамены, "}", ""), "{", ""),
					ФактическийВладелецФайла);
					
				Если ЗначениеЗаполнено(ДанныеДляЗамены.ФорматЗначенияЗамены) Тогда
					Если ТипЗнч(ЗначениеДопРеквизита) = Тип("Массив") Тогда 
						Для Каждого Элемент Из ЗначениеДопРеквизита Цикл 
							
							Если ДанныеДляЗамены.Падеж > 0 И ЗначениеЗаполнено(Элемент.Значение) Тогда
								Элемент.Значение = СклонениеПредставленийОбъектов.ПросклонятьПредставление(
									СокрЛП(Элемент.Значение), ДанныеДляЗамены.Падеж);
							КонецЕсли;
							
							Элемент.Значение = Формат(Элемент.Значение, ДанныеДляЗамены.ФорматЗначенияЗамены);
						КонецЦикла;
					Иначе 
						
						Если ДанныеДляЗамены.Падеж > 0 И ЗначениеЗаполнено(ЗначениеДопРеквизита) Тогда
							ЗначениеДопРеквизита = СклонениеПредставленийОбъектов.ПросклонятьПредставление(
								СокрЛП(ЗначениеДопРеквизита), ДанныеДляЗамены.Падеж);
						КонецЕсли;
						
						РезультатЗамены = Формат(ЗначениеДопРеквизита, ДанныеДляЗамены.ФорматЗначенияЗамены);
					КонецЕсли;
				Иначе
					РезультатЗамены = ЗначениеДопРеквизита;
				КонецЕсли;
			ИначеЕсли СтрНачинаетсяС(ЗначениеЗамены, "{")
				И СтрЗаканчиваетсяНа(ЗначениеЗамены, "}")
				И СтрНайти(ЗначениеЗамены, "КонтактнаяИнформация") > 0 Тогда
				
				ЗначениеДопРеквизита = АвтозаполнениеШаблоновФайловВызовСервераПовтИспВызов.ПолучитьЗначениеКонтактнойИнформацииДляЗамены(
					Файл.Ссылка,
					СтрЗаменить(СтрЗаменить(ЗначениеЗамены, "}", ""), "{", ""),
					ФактическийВладелецФайла);
					
				Если ДанныеДляЗамены.Падеж > 0 И ЗначениеЗаполнено(ЗначениеДопРеквизита) Тогда
					ЗначениеДопРеквизита = СклонениеПредставленийОбъектов.ПросклонятьПредставление(
						СокрЛП(ЗначениеДопРеквизита), ДанныеДляЗамены.Падеж);
				КонецЕсли;
					
				Если ЗначениеЗаполнено(ДанныеДляЗамены.ФорматЗначенияЗамены) Тогда
					РезультатЗамены = Формат(ЗначениеДопРеквизита, ДанныеДляЗамены.ФорматЗначенияЗамены);
				ИначеЕсли ТипЗнч(ЗначениеДопРеквизита) = Тип("Дата") И Не ЗначениеЗаполнено(ЗначениеДопРеквизита) Тогда
					РезультатЗамены = ""; // для пустой даты, чтоб не показало "0001.01.01...".
				Иначе
					РезультатЗамены = ЗначениеДопРеквизита;
				КонецЕсли;
				
			ИначеЕсли СтрНачинаетсяС(ЗначениеЗамены, "{")
				И СтрЗаканчиваетсяНа(ЗначениеЗамены, "}")
				И СтрНайти(ЗначениеЗамены, "Корреспонденция") > 0 Тогда
				
				РезультатЗамены = "";
				
				Попытка
					РезультатЗамены = 
						АвтозаполнениеШаблоновФайловВызовСервераПовтИспВызов.ПолучитьЗначениеРеквизитаКорреспонденцииДляЗамены(
							ДанныеДляЗамены.ЗначениеЗамены, Корреспонденция);
							
					Если ЗначениеЗаполнено(ДанныеДляЗамены.ФорматЗначенияЗамены) Тогда
						РезультатЗамены = Формат(РезультатЗамены, ДанныеДляЗамены.ФорматЗначенияЗамены);
					ИначеЕсли ТипЗнч(РезультатЗамены) = Тип("Дата") И Не ЗначениеЗаполнено(РезультатЗамены) Тогда
						РезультатЗамены = ""; // для пустой даты, чтоб не показало "0001.01.01...".
					КонецЕсли;		
					
				Исключение
					ОшибкаИнфо = ИнформацияОбОшибке();
					Если ОшибкаИнфо.Описание = "ОшибкаДоступаКРеквизиту" Тогда
						СтрокаОшибки = СтрокаОшибки + ЗначениеЗамены + Символы.ВК;
					Иначе
						ВызватьИсключение(ОшибкаИнфо.Описание);
					КонецЕсли;
				КонецПопытки;
				
			ИначеЕсли СтрНачинаетсяС(ЗначениеЗамены, "{")
				И СтрЗаканчиваетсяНа(ЗначениеЗамены, "}")
				И СтрНайти(ЗначениеЗамены, "Подписывающие") > 0 Тогда
				
				РезультатЗамены = "";
				
				// Получить всех подписантов по действиям документа
				ДанныеПодписантов = ДействияСервер.ВсеПодписывающиеПоДокументу(ФактическийВладелецФайла);
				КоличествоПодписантов = ДанныеПодписантов.ВГраница();
				Пока КоличествоПодписантов >= 0 Цикл
					Если Не ЗначениеЗаполнено(ДанныеПодписантов[КоличествоПодписантов])
						Или ТипЗнч(ДанныеПодписантов[КоличествоПодписантов]) <> Тип("СправочникСсылка.Сотрудники") Тогда
							ДанныеПодписантов.Удалить(КоличествоПодписантов);
					КонецЕсли;
					КоличествоПодписантов = КоличествоПодписантов - 1;
				КонецЦикла;
					 
				ПредставленияПодписантов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
					ДанныеПодписантов, "ПредставлениеВДокументах");
				
				Если ДанныеПодписантов.Количество() Тогда
					РезультатЗамены = 
						СокрЛП(ПредставленияПодписантов[ДанныеПодписантов[0]].ПредставлениеВДокументах);
				КонецЕсли;
				
				Для Счетчик = 1 По ДанныеПодписантов.ВГраница() Цикл
					РезультатЗамены = СтрШаблон("%1, %2", 
						РезультатЗамены,
						СокрЛП(ПредставленияПодписантов[ДанныеПодписантов[Счетчик]].ПредставлениеВДокументах));
				КонецЦикла;
				
			ИначеЕсли ЗначениеЗаполнено(ЗначениеЗамены) Тогда
				РезультатЗамены = ЗначениеЗамены;
				
			// Выполнение скрипта
			Иначе
				РезультатОбработки = "";
				Выражение = СтрЗаменить(ДанныеДляЗамены.ВыражениеОбработкиРезультатаЗамены,
					"Файл.ВладелецФайла", "ФактическийВладелецФайла");
					
				Попытка
					Выполнить (Выражение);
				Исключение
					СтрокаОшибки = СтрокаОшибки + СтрШаблон(НСтр("ru = 'Скрипт """"%1""""'"),
						ДанныеДляЗамены.ТермДляЗамены) + Символы.ВК;
				КонецПопытки;
				
				РезультатЗамены = РезультатОбработки; 
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеДляЗамены.ВыражениеОбработкиРезультатаЗамены)
				И ЗначениеЗаполнено(ЗначениеЗамены) Тогда
				Попытка
					УстановитьБезопасныйРежим(Истина);
					РезультатОбработки = "";
					Выражение = СтрЗаменить(ДанныеДляЗамены.ВыражениеОбработкиРезультатаЗамены, "Файл.ВладелецФайла", "ФактическийВладелецФайла");
					Выполнить(Выражение);
					ДанныеВладельцаФайлаДляАвтозаполнения.ЗначениеЗамены = Строка(РезультатОбработки);
					УстановитьБезопасныйРежим(Ложь);
				Исключение
					ДанныеВладельцаФайлаДляАвтозаполнения.ЗначениеЗамены = "";
				КонецПопытки;
			ИначеЕсли ТабличнаяЧасть Тогда 
				ДанныеВладельцаФайлаДляАвтозаполнения.ЗначениеЗамены = РезультатЗамены;
			Иначе
				Если ТипЗнч(РезультатЗамены) = Тип("ДвоичныеДанные") Тогда
					Если ИспользоватьСкриптыСДвоичнымиДанными Тогда
						ДанныеВладельцаФайлаДляАвтозаполнения.ЗначениеЗамены = РезультатЗамены;
					Иначе
						// не используем эту замену
						ИспользуемЭтуЗамену = Ложь;
					КонецЕсли;	
				Иначе
					ДанныеВладельцаФайлаДляАвтозаполнения.ЗначениеЗамены = Строка(РезультатЗамены);
				КонецЕсли;
			КонецЕсли;
			
			Если ИспользуемЭтуЗамену Тогда
				МассивДанныеЗамен.Добавить(ДанныеВладельцаФайлаДляАвтозаполнения);
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
		
	Если Не ПустаяСтрока(СтрокаОшибки) Тогда
		СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Следующие реквизиты или скрипты настройки заполнения файла ""%1"" заданы некорректно:
				|%2'"), ФайлОснование,  СтрокаОшибки);
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;
	
	Возврат МассивДанныеЗамен;
	
КонецФункции

//Выполняет заполнение файла с использованием настроек замены
//
//Параметры:
//			Файл - ссылка на заполняемый файл
//			МассивДанныхДляАвтоЗамен - массив настроек замен
//			ОбновитьВерсиюЗаполненнымФайлом - необходимость обновить версию файла после заполнения файла данными.
//			Если Истина, то после автозаполнения в текущую версию файла запишется измененный файл.
//			Если Ложь, то после автозаполнения текущая версия файла не изменяется, функция вернет только путь к
//				измененному (заполненному) файлу на диске.
////Возвращает:Если СохранятьВерсию = Истина, то ПустаяСтрока
//			 Если СохранятьВерсию = Ложь, то путь к измененному файлу на диске
Функция ВыполнитьАвтоЗаполнениеШаблона(Файл, МассивДанныхДляАвтоЗамен, НастройкиАвтозаполнения) Экспорт
		
	УстановитьПривилегированныйРежим(Истина);
	РасширениеФайла = НастройкиАвтозаполнения.РасширениеФайла;
	ДвоичныеДанныеФайла = НастройкиАвтозаполнения.ДвоичныеДанныеФайла;
	ЗаполнятьMSWordНаСервере = НастройкиАвтозаполнения.ВыполнятьЗаполнениеMSWordНаСервере;
	ЗаполнятьТолькоПоляРегистрации = НастройкиАвтозаполнения.ЗаполнятьТолькоПоляРегистрации;
	
	Если ДвоичныеДанныеФайла.Размер() = 0 Тогда
		Возврат Неопределено; 
	КонецЕсли;
		
	Если РасширениеФайла = "doc" И ЗаполнятьMSWordНаСервере Тогда
		ДвоичныеДанныеЗаполненногоФайла = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьФайлMSWordПоДвоичнымДанным(
			РасширениеФайла, 
			МассивДанныхДляАвтоЗамен, 
			ДвоичныеДанныеФайла);
	
	ИначеЕсли АвтозаполнениеШаблоновФайловКлиентСервер.ТекстовыйФормат(РасширениеФайла) Тогда 
		ДвоичныеДанныеЗаполненногоФайла = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьТекстовыйФайл(
			ДвоичныеДанныеФайла,
			РасширениеФайла,
			МассивДанныхДляАвтоЗамен);
	
	ИначеЕсли РасширениеФайла = "docx" Тогда
		Попытка
			ДвоичныеДанныеЗаполненногоФайла = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьФайлMSWordВXML(
				ДвоичныеДанныеФайла, 
				РасширениеФайла, 
				МассивДанныхДляАвтоЗамен,
				Ложь,
				ЗаполнятьТолькоПоляРегистрации);
		Исключение
			ДвоичныеДанныеЗаполненногоФайла = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьФайлMSWordВXML(
				ДвоичныеДанныеФайла, 
				РасширениеФайла, 
				МассивДанныхДляАвтоЗамен,
				Истина);	
		КонецПопытки;
	ИначеЕсли РасширениеФайла = "odt" Тогда
		ДвоичныеДанныеЗаполненногоФайла = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьФайлOpenOfficeWriter(
			ДвоичныеДанныеФайла, 
			РасширениеФайла, 
			МассивДанныхДляАвтоЗамен,
			ЗаполнятьТолькоПоляРегистрации);
	КонецЕсли;

	Возврат ДвоичныеДанныеЗаполненногоФайла;
	
КонецФункции

// Создает или заполняет правило автозаполнения по данным другого правила.
// 
// Параметры:
//  Файл - СправочникСсылка.Файлы - файл, для которого выполняется загрузка настройки автозаполнения.
//  ВладелецФайла - СправочникСсылка.ВидыДокументов
//  ПравилоОснование - СправочникСсылка.ПравилаАвтозаполненияФайлов - правило, по которому создается новое правило
//   или заполняется исходное.
//  ИсходноеПравило - СправочникСсылка.ПравилаАвтозаполненияФайлов - правило, настройки которого необходимо перезаписать
// 
// Возвращаемое значение:
//  Структура:
//   * Правило - СправочникСсылка.ПравилаАвтозаполненияФайлов - ссылка на измененное/созданное правило.
//   * МассивПолейДляУдаления - Массив из Строка - поля файла, присутствующие в данных автозаполнения правила-основания,
//    но отсутствующие в файле, для которого осуществляется заполнение/создание правила.
//   * НастройкиЗамены - Массив из Структура - табличная часть ДанныеДляАвтозаполнения правила основания.
//   * ПоказыватьУведомлениеОЗаписи - Булево - признак отображения уведомления о необходимости расставить поля в файле.
// 
Функция СоздатьЗаполнитьПравилоАвтозаполнения(Файл, ВладелецФайла, ПравилоОснование, ИсходноеПравило) Экспорт
	
	ДанныеПравилаОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПравилоОснование,
		"ДанныеДляАвтозаполнения, СкриптыШтамповЭП");
	
	ДанныеДляАвтозаполненияОснования = ДанныеПравилаОснования.ДанныеДляАвтозаполнения.Выгрузить();
	СкриптыШтамповЭПОснования = ДанныеПравилаОснования.СкриптыШтамповЭП.Выгрузить();
	
	МассивПолейДляУдаления = Новый Массив;
	ТекстыДляВставки = Новый Массив;
	ТекстыДляУдаления = Новый Массив;
	НайденныеТексты = Новый Массив;
	ТекстыДляПоиска = Новый Массив;
	
	Если СкриптыШтамповЭПОснования.Количество() Тогда
		Для Каждого Стр Из СкриптыШтамповЭПОснования Цикл
			Если ЗначениеЗаполнено(Стр.ЗаменяемаяСтрока) И ЗначениеЗаполнено(Стр.ТекстСкрипта) Тогда
				ТекстыДляПоиска.Добавить(Стр.ЗаменяемаяСтрока);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДвоичныеДанныеФайла = ПолучитьДвоичныеДанныеФайла(Файл);
	РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Файл, "ТекущаяВерсияРасширение, Наименование");
	ПоляФайла = АвтозаполнениеШаблоновФайловКлиентСервер.НайтиВсеПоляВФайлеMSWord(
		РеквизитыФайла.ТекущаяВерсияРасширение, ДвоичныеДанныеФайла, ТекстыДляПоиска, НайденныеТексты);
	
	Если Не ЗначениеЗаполнено(ИсходноеПравило) Тогда
		
		СтруктураЗаполнения = Справочники.ПравилаАвтозаполненияФайлов.ПолучитьСтруктуруПравилаАвтозаполнения();
		СтруктураЗаполнения.Наименование = РеквизитыФайла.Наименование;
		СтруктураЗаполнения.ШаблонФайла = Файл;
		СтруктураЗаполнения.ВладелецФайла = ВладелецФайла;
		
		Для Каждого Поле Из ПоляФайла Цикл
			Если ДанныеДляАвтозаполненияОснования.Найти(Поле, "ТермДляЗамены") = Неопределено Тогда
				МассивПолейДляУдаления.Добавить(Новый Структура("ПолеУдаления, РеквизитТабличнойЧасти", Поле, Ложь));
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Элемент Из ДанныеДляАвтозаполненияОснования Цикл
			Строка = СтруктураЗаполнения.ДанныеДляАвтозаполнения.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, Элемент);
		КонецЦикла;
		
		Для Каждого Элемент Из СкриптыШтамповЭПОснования Цикл
			Строка = СтруктураЗаполнения.СкриптыШтамповЭП.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, Элемент);
		КонецЦикла;
		
		Правило = Справочники.ПравилаАвтозаполненияФайлов.СоздатьПравилоАвтозаполнения(СтруктураЗаполнения);
		
	Иначе
		
		Правило = ИсходноеПравило.ПолучитьОбъект();
		ДанныеДляАвтозаполнения = Правило.ДанныеДляАвтозаполнения.Выгрузить();
		
		Если ОбщегоНазначенияДокументооборотКлиентСервер.ЕстьОтличияВТаблицах(
			ДанныеДляАвтозаполнения,
			ДанныеДляАвтозаполненияОснования,
			"ТермДляЗамены, ЗначениеЗамены, ВыражениеОбработкиРезультатаЗамены, ФорматЗначенияЗамены,
			|ТипЗначенияЗамены, РеквизитТабличнойЧасти, НомерКолонкиТабличнойЧасти, ОписаниеПоляЗамены") Тогда
			
			Для Каждого Строка Из ДанныеДляАвтозаполнения Цикл 
				СтруктураПоиска = Новый Структура("ТермДляЗамены", Строка.ТермДляЗамены);
				
				СтрокиДанных = ДанныеДляАвтозаполненияОснования.НайтиСтроки(СтруктураПоиска);
				Если СтрокиДанных.Количество() = 0 Тогда
					МассивПолейДляУдаления.Добавить(Новый Структура("ПолеУдаления, РеквизитТабличнойЧасти",
						Строка.ТермДляЗамены, Строка.РеквизитТабличнойЧасти));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Правило.ДанныеДляАвтозаполнения.Очистить();
		Правило.СкриптыШтамповЭП.Очистить();
		
		Для Каждого Элемент Из ДанныеДляАвтозаполненияОснования Цикл
			Строка = Правило.ДанныеДляАвтозаполнения.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, Элемент);
		КонецЦикла;
		
		Правило.ДанныеДляАвтозаполнения.Сортировать("НомерКолонкиТабличнойЧасти,
			|ТермДляЗамены, ЗначениеЗамены, ВыражениеОбработкиРезультатаЗамены");
		
		Для Каждого Элемент Из СкриптыШтамповЭПОснования Цикл
			Строка = Правило.СкриптыШтамповЭП.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, Элемент);
		КонецЦикла;
		
		Правило.Записать();
		
	КонецЕсли;
	
	Для Каждого Элемент Из СкриптыШтамповЭПОснования Цикл
		ТекстыДляВставки.Добавить(Элемент.ЗаменяемаяСтрока);
	КонецЦикла;
	
	Если ОбщегоНазначенияДокументооборотКлиентСервер.ЕстьОтличияВМассивах(ТекстыДляВставки, НайденныеТексты) Тогда
		
		Для Каждого Строка Из НайденныеТексты Цикл
			
			Если ТекстыДляВставки.Найти(Строка) = Неопределено Тогда
				ТекстыДляУдаления.Добавить(Строка);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Правило", Правило.Ссылка);
	СтруктураВозврата.Вставить("МассивПолейДляУдаления", МассивПолейДляУдаления);
	СтруктураВозврата.Вставить("ТекстыДляВставки", ТекстыДляВставки);
	СтруктураВозврата.Вставить("ТекстыДляУдаления", ТекстыДляУдаления);
	СтруктураВозврата.Вставить("НастройкиЗамены",
		ОбщегоНазначения.ТаблицаЗначенийВМассив(ДанныеДляАвтозаполненияОснования));
	СтруктураВозврата.Вставить("ПоказыватьУведомлениеОЗаписи", ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ВидыДокументов", "ПоказыватьУведомлениеОПереносеПолейВФайл", Истина));
	
	Возврат СтруктураВозврата;
	
КонецФункции

//Обновляет версию файла на основании двоичных данных
//Параметры:ДвоичныеДанные - двоичные данные файла
//			ВерсияСсылка - ссылка на версию объекта файл, которую необходимо обновить двоичными данными
Процедура ОбновитьВерсиюИзДвоичныхДанных(ДвоичныеДанные,
	Объект,
	КомментарийКНовойВерсии = "",
	УникальныйИдентификатор = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
		ВерсияСсылка = Объект;
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Файлы") Тогда 
		ВерсияСсылка = Объект.ТекущаяВерсия;
	КонецЕсли;
	
	ВременныйФайл = ПолучитьИмяВременногоФайла(ВерсияСсылка.Расширение);
	ДвоичныеДанные.Записать(ВременныйФайл);
	
	ХранЗначения = ЗагрузкаФайлов.ИзвлечьТекстВХранилищеЗначения(ВременныйФайл);
	Текст = ХранЗначения.Получить();
	ВременныйФайлТекст = ПолучитьИмяВременногоФайла("txt");
	ЗаписьТекста = Новый ЗаписьТекста(ВременныйФайлТекст);
	ЗаписьТекста.Записать(Текст);
	ЗаписьТекста.Закрыть();
	ДвоичныеДанныеТекста = Новый ДвоичныеДанные(ВременныйФайлТекст);
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	СведенияОФайле.ИмяБезРасширения = ВерсияСсылка.ПолноеНаименование;
	СведенияОФайле.Комментарий = КомментарийКНовойВерсии;
	СведенияОФайле.АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	СведенияОФайле.АдресВременногоХранилищаТекста = ПоместитьВоВременноеХранилище(ДвоичныеДанныеТекста);
	СведенияОФайле.РасширениеБезТочки = ВерсияСсылка.Расширение;
	СведенияОФайле.ВремяИзменения = ТекущаяДата();
	СведенияОФайле.ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
	СведенияОФайле.Размер = ДвоичныеДанные.Размер();
	СведенияОФайле.ХранитьВерсии = ВерсияСсылка.Владелец.ХранитьВерсии;
	
	ВерсияСсылка = РаботаСФайламиВызовСервера.ОбновитьВерсиюФайла(
		ВерсияСсылка.Владелец, СведенияОФайле, ВерсияСсылка, УникальныйИдентификатор);
	
	ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВерсияСсылка.Владелец, "ВладелецФайла");	
	РаботаСФайламиВызовСервера.УдалитьВизуализациюЭП(ВладелецФайла, ВерсияСсылка.Владелец, ВерсияСсылка);	
		
	Если ТипЗнч(ВерсияСсылка) = Тип("СправочникСсылка.ВерсииФайлов") Тогда
		РаботаСФайламиВызовСервера.ОбновитьВерсиюВФайле(ВерсияСсылка.Владелец,
			ВерсияСсылка,
			Неопределено,
			УникальныйИдентификатор,
			Истина);
	КонецЕсли;	
	
	УдалитьФайлы(ВременныйФайл);
	 
КонецПроцедуры

//Возвращает двоичные данные файла
//Параметры:Файл - ссылка на файл, двоичные данные которого необходимо получить
Функция ПолучитьДвоичныеДанныеФайла(Файл) Экспорт
	
	НеЗаполнятьШаблон = Истина;
	Возврат РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(Файл, НеЗаполнятьШаблон);
	
КонецФункции

// Устарела. Рекомендуется использовать ШаблоныДокументов.ЗаполнитьФайлыДокументаПоШаблону.
//
Процедура СкопироватьФайлыИзШаблонаДокумента(ШаблонДокумента,
	СписокФайловДокумента,
	УдалятьФайлыИзДругогоШаблона) Экспорт
	
	ШаблоныДокументов.ЗаполнитьФайлыДокументаПоШаблону(
		ШаблонДокумента,
		СписокФайловДокумента,
		УдалятьФайлыИзДругогоШаблона);
	
КонецПроцедуры

// Устарела. Рекомендуется использовать ШаблоныДокументов.ЗаполнитьРеквизитыДокументаПоШаблону.
//
Процедура СкопироватьРеквизитыДокументаИзШаблона(Документ, ШаблонДокумента) Экспорт
	
	ШаблоныДокументов.ЗаполнитьРеквизитыДокументаПоШаблону(
		ШаблонДокумента,
		Документ);
	
КонецПроцедуры

//Получает настройки, связанные с автозаполнением файлов
//Параметры:
//			ФайлСсылка - ссылка на объект типа Файл
//			Документ - ссылка на Вн, Вх или Исх документ - владелец файла
//			ПолучитьДанныеОШтрихкоде - Булево
//			ИспользоватьСкриптыСДвоичнымиДанными - Булево
//			ЗаполнятьТолькоПоляРегистрации - Булево - если Истина, то заполняем только поля РегНомер РегДата и такие же скрипты
//
//Возвращаемое значение:
//			Структура
//				ДвоичныеДанныеФайла - двоичные данные последней версии файла
//				РасширениеФайла - расширение последней версии файла
//				ВыполнятьЗаполнениеMSWordНаСервере - флаг, показывающий, где выполняется заполнение файлов формата MSWord
//				МассивЗамен - массив структур в формате "какое поле заменить"-"какую строку заменить"-"на что заменить"
//				ОснованиеСозданияФайла - ссылка на файл-шаблон, если параметр ФайлСсылка был создан из шаблона
//				ИспользоватьСкриптыСДвоичнымиДанными - Булево	
Функция ПолучитьНастройкиАвтозаполненияШаблоновФайлов(ФайлСсылка, Документ = Неопределено,
	ПолучитьДанныеОШтрихкоде = Ложь, ИспользоватьСкриптыСДвоичнымиДанными = Ложь,
	ЗаполнятьТолькоПоляРегистрации = Ложь) Экспорт
	
	ДвоичныеДанныеФайла = ПолучитьДвоичныеДанныеФайла(ФайлСсылка);
	РасширениеФайла = НРег(ФайлСсылка.ТекущаяВерсияРасширение);
	ВыполнятьЗаполнениеMSWordНаСервере = Константы.ИзменениеФайловMSWordТолькоНаСервере.Получить();
	Если ФайлНаходитсяВИерархииПапокШаблонов(ФайлСсылка) Тогда
		ОснованиеФайла = ФайлСсылка
	Иначе
		ОснованиеФайла = ФайлСсылка.ШаблонОснованиеДляСоздания;
	КонецЕсли;
		
	МассивЗамен = ПолучитьМассивАвтозаполненийШаблона(
		ФайлСсылка,
		ОснованиеФайла,
		?(Документ = Неопределено, ФайлСсылка.ВладелецФайла, Документ),
		ИспользоватьСкриптыСДвоичнымиДанными,
		ЗаполнятьТолькоПоляРегистрации);
	ОснованиеСозданияФайла = ФайлСсылка.Ссылка;
	
	ДанныеВозврата = Новый Структура;
	ДанныеВозврата.Вставить("ДвоичныеДанныеФайла", ДвоичныеДанныеФайла);
	ДанныеВозврата.Вставить("РасширениеФайла", РасширениеФайла);
	ДанныеВозврата.Вставить("ВыполнятьЗаполнениеMSWordНаСервере", ВыполнятьЗаполнениеMSWordНаСервере);
	ДанныеВозврата.Вставить("МассивЗамен", МассивЗамен);
	ДанныеВозврата.Вставить("ОснованиеСозданияФайла", ОснованиеСозданияФайла);
	ДанныеВозврата.Вставить("ЗаполнятьТолькоПоляРегистрации", ЗаполнятьТолькоПоляРегистрации);
	
	Если ПолучитьДанныеОШтрихкоде Тогда
		ДанныеОШтрихкоде = ШтрихкодированиеСервер.ПолучитьДанныеДляВставкиШтрихкодаВОбъект(Документ, Ложь);
		Если ДанныеОШтрихкоде <> Неопределено И ДанныеОШтрихкоде.Свойство("ДвоичныеДанныеИзображения") Тогда
			ДанныеВозврата.Вставить("ДанныеОШтрихкоде", ДанныеОШтрихкоде); 
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеВозврата;
	
КонецФункции

// Проверяет, что файл находится в папке "Шаблоны файлов" или во вложенной в нее папке
// Результат (Булево) - файл находится в иерархии папки "Шаблоны файлов"
//
// Параметры: 
// - Файл (СправочникСсылка.Файлы)
//
Функция ФайлНаходитсяВИерархииПапокШаблонов(Файл) Экспорт
	
	Если ТипЗнч(Файл) <> Тип("СправочникСсылка.Файлы") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВладелецФайла = Файл.ВладелецФайла;
	Если ТипЗнч(ВладелецФайла) = Тип("СправочникСсылка.ШаблоныДокументов") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

//Получает признак того, редактируется файл или нет
Функция ФайлРедактируется(ФайлСсылка) Экспорт
	
	Возврат ЗначениеЗаполнено(ФайлСсылка.Редактирует);
	
КонецФункции

//Получает значение дополнительного реквизита объекта, если оно есть
Функция ПолучитьЗначениеДопРеквизитаОбъекта(Объект, ИмяРеквизита) Экспорт
	
	Результат = Неопределено;
	
	ТаблицаСвойств = УправлениеСвойствами.ЗначенияСвойств(Объект);
	Для Каждого СтрокаТаблицы Из ТаблицаСвойств Цикл
		Если СтрокаТаблицы.Свойство.Заголовок = ИмяРеквизита Тогда
			Возврат СтрокаТаблицы.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает все таблицы файла формата MS Word 2007+
Функция ПолучитьВсеТаблицыФайлаOpenXML(ДвоичныеДанныеФайла, РасширениеФайла) Экспорт
	
	Результат = Новый Массив;
	
	СтарыйПутьКФайлу = ПолучитьИмяВременногоФайла(РасширениеФайла);
	ДвоичныеДанныеФайла.Записать(СтарыйПутьКФайлу);
	
	КопироватьФайл(СтарыйПутьКФайлу, СтрЗаменить(СтарыйПутьКФайлу, РасширениеФайла, "zip"));
	ИмяФайлаСПутемZIP = СтрЗаменить(СтарыйПутьКФайлу, РасширениеФайла, "zip");

	ВременнаяПапкаДляРазархивирования = ПолучитьИмяВременногоФайла("");
	ВременныйZIPФайл = ПолучитьИмяВременногоФайла("zip"); 

	Архив = Новый ЧтениеZipФайла();
	Архив.Открыть(ИмяФайлаСПутемZIP);
	Архив.ИзвлечьВсе(ВременнаяПапкаДляРазархивирования, РежимВосстановленияПутейФайловZIP.Восстанавливать);
	Архив.Закрыть();

	ЧтениеXML = Новый ЧтениеXML();
	
	Если РасширениеФайла = "docx" Тогда
		ЧтениеXML.ОткрытьФайл(ВременнаяПапкаДляРазархивирования + "/word/document.xml");
		
		ПостроительDOM = Новый ПостроительDOM;
		ОбъектДокумент = ПостроительDOM.Прочитать(ЧтениеXML);
		СчетчикТаблиц = 0;
		ВыражениеXPath = ОбъектДокумент.СоздатьВыражениеXPath("//w:tbl", Новый РазыменовательПространствИменDOM(ОбъектДокумент));

		РезультатXPath = ВыражениеXPath.Вычислить(ОбъектДокумент);
		УзелDOMТаблица = РезультатXPath.ПолучитьСледующий();
		Пока УзелDOMТаблица <> Неопределено Цикл
		    СчетчикТаблиц = СчетчикТаблиц + 1;
			Результат.Добавить("Таблица " + СчетчикТаблиц);
			УзелDOMТаблица = РезультатXPath.ПолучитьСледующий();
		КонецЦикла;
		ЧтениеXML.Закрыть();
	ИначеЕсли РасширениеФайла = "odt" Тогда
		ЧтениеXML.ОткрытьФайл(ВременнаяПапкаДляРазархивирования + "/content.xml");
		
		ПостроительDOM = Новый ПостроительDOM;
		ОбъектДокумент = ПостроительDOM.Прочитать(ЧтениеXML);
		СчетчикТаблиц = 0;
		ВыражениеXPath = ОбъектДокумент.СоздатьВыражениеXPath("//table:table", Новый РазыменовательПространствИменDOM(ОбъектДокумент));

		РезультатXPath = ВыражениеXPath.Вычислить(ОбъектДокумент);
		УзелDOMТаблица = РезультатXPath.ПолучитьСледующий();
		Пока УзелDOMТаблица <> Неопределено Цикл
		    СчетчикТаблиц = СчетчикТаблиц + 1;
			Результат.Добавить("Таблица " + СчетчикТаблиц);
			УзелDOMТаблица = РезультатXPath.ПолучитьСледующий();
		КонецЦикла;
		ЧтениеXML.Закрыть();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область АвтоматическоеПерезаполнениеФайла

//Перезаполняет Файл данными заполнения при необходимости
// Параметры
//  ФайлСсылка - СправочникСсылка.Файлы - перезаполняемый файл
//  ЗаполнитьВсеПоля - Булево - перекрывает  ЗаполнятьТолькоПоляРегистрации
//
Процедура ПерезаполнитьФайлПоДаннымВладельцаПриНеобходимости(ФайлСсылка, ЗаполнитьВсеПоля = Ложь) Экспорт
	
	Перем ХешСуммаЗначенийЗаполнения;
	
	Если ПараметрыСеанса.ПроисходитАвтозаполнениеФайлаПоВладельцу = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Зарегистрирован = Ложь;
	Если ТребуетсяПерезаполнениеФайла(ФайлСсылка, ХешСуммаЗначенийЗаполнения, Зарегистрирован) Тогда
		
		ПараметрыСеанса.ПроисходитАвтозаполнениеФайлаПоВладельцу = Истина;

		ЗаполнятьТолькоПоляРегистрации = Ложь;
		Если Зарегистрирован Тогда
			ЗаполнятьТолькоПоляРегистрации = Истина;
		КонецЕсли;	

		Если ЗаполнитьВсеПоля Тогда
			ЗаполнятьТолькоПоляРегистрации = Ложь;
		КонецЕсли;	
		
		Попытка
			РезультатЗаполнения = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьПоляФайлаДаннымиВладельца(Ложь,
				ФайлСсылка, Истина, , , ЗаполнятьТолькоПоляРегистрации);
		Исключение
			ПараметрыСеанса.ПроисходитАвтозаполнениеФайлаПоВладельцу = Ложь;
			ВызватьИсключение;
		КонецПопытки;
		
		ПараметрыСеанса.ПроисходитАвтозаполнениеФайлаПоВладельцу = Ложь;
		
		Если РезультатЗаполнения.Результат = Ложь Тогда
			УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
			Если РезультатЗаполнения.Свойство("РезультатЗаполнения") 
				И РезультатЗаполнения.ЕстьОшибка Тогда
				УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
			КонецЕсли;
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Не удалось заполнить файл данными владельца'"), 
				УровеньЖурнала,
				ФайлСсылка.Метаданные(), ФайлСсылка, РезультатЗаполнения.Описание);
		Иначе
			РегистрыСведений.ХешиАвтозаполненияФайлов.ОбновитьХешСумму(ФайлСсылка, ХешСуммаЗначенийЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет хешсумму значений при необходимости
// Параметры
//  ФайлСсылка - СправочникСсылка.Файлы - Файл для заполненния (приемник)
//  ХешСуммаЗначенийЗаполнения - Строка - ХешСумма значений заполнения
//  Зарегистрирован - Булево - возвращаемое значение
//
Функция ТребуетсяПерезаполнениеФайла(ФайлСсылка, ХешСуммаЗначенийЗаполнения, Зарегистрирован) Экспорт
	
	Если Не ЗначениеЗаполнено(ФайлСсылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РеквизитыПроверки = Новый Массив;
	
	РеквизитыПроверки.Добавить("ПодписанЭП");
	
	РеквизитыПроверки.Добавить("ТекущаяВерсияРасширение");
	
	РеквизитыПроверки.Добавить("ШаблонОснованиеДляСоздания");
	
	РеквизитыПроверки.Добавить("ВладелецФайла");
	
	РеквизитыПроверки.Добавить("Редактирует");
	
	РеквизитыПроверки.Добавить("Зашифрован");
	
	РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФайлСсылка, РеквизитыПроверки);
	
	Если ЗначениеЗаполнено(РеквизитыФайла.Редактирует) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не АвтозаполнениеШаблоновФайловВызовСервераПовтИсп.ЭтоРасширениеАвтозаполнения(
		РеквизитыФайла.ТекущаяВерсияРасширение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//Если файл подписан - не перезаполняем
	Если РеквизитыФайла.ПодписанЭП Тогда
		РегистрыСведений.ХешиАвтозаполненияФайлов.Удалить(ФайлСсылка);
		Возврат Ложь;
	КонецЕсли;
	
	Если РеквизитыФайла.Зашифрован Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Шаблон = РеквизитыФайла.ШаблонОснованиеДляСоздания;
	
	Если Не ЗначениеЗаполнено(Шаблон) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Владелец = РеквизитыФайла.ВладелецФайла;    
	
	МОВладельца = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Владелец);
	
	Попытка
		ПоддерживаетсяПерезаполнениеПоШаблону = МОВладельца.ПоддерживаетсяПерезаполнениеПоШаблону();
	Исключение
		ПоддерживаетсяПерезаполнениеПоШаблону = Ложь;
	КонецПопытки;
	
	Если Не ПоддерживаетсяПерезаполнениеПоШаблону Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗначенияЗамены = ПолучитьМассивАвтозаполненийШаблона(ФайлСсылка, Шаблон, Владелец);
	
	Зарегистрирован = Делопроизводство.ДокументЗарегистрирован(Владелец);
	
	ХешСуммаЗначенийЗаполнения = ХешСуммаЗначенийЗаполнения(ЗначенияЗамены);
	
	Если РегистрыСведений.ХешиАвтозаполненияФайлов.ТребуетсяОбновлениеХешСуммы(
		ФайлСсылка, ХешСуммаЗначенийЗаполнения) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает вычисленную Хеш сумму значений заполнения
// Параметры
//  ЗначенияЗаполнения - Массив - Массив значений заполнения
// Возвращаемое значение:
//  РезультатХешСумма - Строка - Хеш сумма 
Функция ХешСуммаЗначенийЗаполнения(ЗначенияЗаполнения) Экспорт
	
	РезультатХешСумма = ОбщегоНазначенияДокументооборот.КонтрольнаяСуммаСтрокой(ЗначенияЗаполнения, ХешФункция.MD5, "json");
	Возврат РезультатХешСумма;
	
КонецФункции

#КонецОбласти

//Оповещает создателя файла о возможной необходимости провести корректировку файла
// Параметры:
//  ФайлСсылка - СправочникСсылка.Файлы - перезаполненный файл
Процедура ОповеститьАвтораОбАвтоматическомПерезаполненииФайла(ФайлСсылка) Экспорт
	
	Автор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка, "Автор");
	
	ДополнительноеОписание = СтрШаблон(НСтр("ru = 'Файл %1 автоматически заполнен данными документа.
		|Проверьте корректность заполнения'"), ФайлСсылка);
	
	Если Пользователи.ТекущийПользователь() = Автор Тогда
		Возврат;
	КонецЕсли;
	
	ВидСобытияАвтозаполнениеМоихФайлов = Перечисления.СобытияУведомлений.АвтозаполнениеМоихФайлов;
	
	РегистрыСведений.ОчередьУведомлений.ДобавитьУведомлениеПоСобытию(Автор,
		ВидСобытияАвтозаполнениеМоихФайлов, ФайлСсылка, , ДополнительноеОписание, ,
		ВидСобытияАвтозаполнениеМоихФайлов);
	
КонецПроцедуры

#КонецОбласти