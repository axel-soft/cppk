// @strict-types


#Область ПрограммныйИнтерфейс

// Обработает интерактивное изменение процесса
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - 
// 	ПараметрыЗаписи - Структура
// 	
// Возвращаемое значение:
// 	Булево - Истина, если отработали
//
Функция ОбработатьИзменениеПроцессаИзКарточки(Форма, ПараметрыЗаписи) Экспорт
	
	Если Не ПроцессМожноОбработатьВОчередиЗаданий(Форма.Объект.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	ПараметрыЗаписи.Вставить("ИзменениеПроцессаЧерезОчередьЗаданий", Истина);
	РезультатЗаписи = Форма.Записать(ПараметрыЗаписи);
	
	Если РезультатЗаписи Тогда
		Форма.Закрыть();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Обработает интерактивное прерывание процесса
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - 
// 	ПараметрыЗаписи - Структура, Неопределено - 
// 	ПричинаПрерывания - Строка - 
// 	
// Возвращаемое значение:
// 	Булево - Истина, если отработали
//
Функция ОбработатьПрерываниеПроцессаИзКарточки(Форма, ПараметрыЗаписи = Неопределено, ПричинаПрерывания) Экспорт
	
	Если Не ПроцессМожноОбработатьВОчередиЗаданий(Форма.Объект.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если ПараметрыЗаписи = Неопределено Тогда
		ПараметрыЗаписи = Новый Структура;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ПрерватьПроцессЧерезОчередьЗаданий", Истина);
	ПараметрыЗаписи.Вставить("ПричинаПрерывания", ПричинаПрерывания);
	
	Попытка
		Форма.Записать(ПараметрыЗаписи);
	Исключение
		ВызватьИсключение СтрШаблон(НСтр("ru='КОД. Ошибка прерывания процесса из карточки. %1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Обработает интерактивную остановку процесса
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - 
// 	ПараметрыЗаписи - Структура, Неопределено - 
// 	
// Возвращаемое значение:
// 	Булево - Истина, если отработали
//
Функция ОбработатьОстановкуПроцессаИзКарточки(Форма, ПараметрыЗаписи = Неопределено) Экспорт
	
	Если Не ПроцессМожноОбработатьВОчередиЗаданий(Форма.Объект.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если ПараметрыЗаписи = Неопределено Тогда
		ПараметрыЗаписи = Новый Структура;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ОстановитьПроцессЧерезОчередьЗаданий", Истина);
	
	Попытка
		Форма.Записать(ПараметрыЗаписи);
	Исключение
		ВызватьИсключение СтрШаблон(НСтр("ru='КОД. Ошибка остановки процесса из карточки. %1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Обработает интерактивное продолжение процесса
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - 
// 	ПараметрыЗаписи - Структура, Неопределено -
// 	
// Возвращаемое значение:
// 	Булево - Истина, если отработали
//
Функция ОбработатьПродолжениеПроцессаИзКарточки(Форма, ПараметрыЗаписи = Неопределено) Экспорт
	
	Если Не ПроцессМожноОбработатьВОчередиЗаданий(Форма.Объект.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если ПараметрыЗаписи = Неопределено Тогда
		ПараметрыЗаписи = Новый Структура;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ПродолжитьПроцессЧерезОчередьЗаданий", Истина);
	
	Попытка
		Форма.Записать(ПараметрыЗаписи);
	Исключение
		ВызватьИсключение СтрШаблон(НСтр("ru='КОД. Ошибка продолжения процесса из карточки. %1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет, что процесс можно обработать в очереди заданий
// 
// Параметры:
//  Процесс - БизнесПроцессСсылка -
// 
// Возвращаемое значение:
//  Булево - Процесс можно обработать в очереди заданий
//
Функция ПроцессМожноОбработатьВОчередиЗаданий(Процесс)
	
	Возврат РаботаСБизнесПроцессамиХолдингВызовСервера.ПроцессМожноОбработатьВОчередиЗаданий(Процесс);
	
КонецФункции

#КонецОбласти
