#Если Не ВебКлиент И Не МобильныйКлиент Тогда

#Область ПрограммныйИнтерфейс

//Осуществляет поиск, добавление или удаление полей в шаблоне файле MSWord.
//
// Параметры:
//  ПолноеИмяШаблона - Строка - имя шаблона файла.
//  Расширение - Строка - расширение в нижнем регистре.
//  НастройкиЗамены - ТаблицаЗначений - содержит настройки замены полей.
//                  - Массив из см. "НастройкиЗамены"
//                    в АвтозаполнениеШаблоновФайловВызовСервера.СоздатьЗаполнитьПравилоАвтозаполнения - если это
//                                      копирование настройки заполнения.
//  ФайлШаблон - СправочникСсылка.Файлы - ссылка на файл шаблон.
//  ИдентификаторФормы - уникальный идентификатор формы
//  МассивПолейДляУдаления - Массив - поля, которые необходимо удалить из файла шаблона.
//  ПоказыватьУведомлениеОЗаписи - Булево - признак показа специальной формы оповещения.
//  ТекстыДляВставки - Массив строк - будут вставлены именно как текст, а не поля
//  ТекстыДляУдаления - Массив строк
//  МожноЗакрытьФорму - Булево - можно ли закрыть вызывающую форму
//
//
Процедура ПроверитьНаличиеИДобавитьПоляВФайлеMSWord(ПолноеИмяШаблона, Расширение, НастройкиЗамены, 
	ФайлШаблон, ИдентификаторФормы, МассивПолейДляУдаления, ПоказыватьУведомлениеОЗаписи,
	ТекстыДляВставки, ТекстыДляУдаления, МожноЗакрытьФорму = Истина) Экспорт
	
	Если ТипЗнч(НастройкиЗамены) <> Тип("Массив") Тогда //если это не копирование настройки заполнения
		НастройкиЗамены.Сортировать("РеквизитТабличнойЧасти, НомерКолонкиТабличнойЧасти");
	КонецЕсли;
	КоличествоКолонок = 0;
	Для Каждого Настройка Из НастройкиЗамены Цикл 
		Если Настройка.РеквизитТабличнойЧасти Тогда 
			КоличествоКолонок = КоличествоКолонок + 1;
		КонецЕсли;
	КонецЦикла;
	
	ДвоичныеДанныеФайла = АвтозаполнениеШаблоновФайловВызовСервера.ПолучитьДвоичныеДанныеФайла(ФайлШаблон);
	ИмяФайла = ФайловыеФункцииКлиентСервер.ПолучитьИмяСРасширением(ПолноеИмяШаблона, Расширение);
	
	ВременнаяПапка = ПолучитьИмяВременногоФайла("");
	СоздатьКаталог(ВременнаяПапка);
	ВременнаяПапка = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ВременнаяПапка);
	ИмяФайлаСПутем = ВременнаяПапка + ИмяФайла;
	
	ДвоичныеДанныеФайла.Записать(ИмяФайлаСПутем);
	
	Попытка
		WordApp = Новый COMОбъект("Word.Application");
		WordApp.WordBasic.DisableAutoMacros(1);
		Док = WordApp.Documents.Add(ИмяФайлаСПутем); 
	Исключение
		УдалитьФайлы(ИмяФайлаСПутем);
		ПоказатьПредупреждение(, НСтр("ru = 'Ошибка работы с приложением MS Word. 
		|Необходимо проверить правильность установки либо использовать более новую версию приложения.'"));
		Возврат;
	КонецПопытки;
	
	Док.Activate();
	Text = WordApp.Selection;
	Text.WholeStory();
	Text.MoveUp(, 1);
	
	КоличествоТаблиц = Док.Tables.Count;
	
	ЕстьДобавленныеПоля = Ложь; ЕстьУдаленныеПоля = Ложь;
	НашаТаблица = Неопределено; МассивСуществующихПолей = Новый Массив;
	Для Каждого НастройкаЗамены Из НастройкиЗамены Цикл
		Если ПустаяСтрока(НастройкаЗамены.ТермДляЗамены) Тогда
			Продолжить;
		КонецЕсли;
		
		ПолеНайдено = Ложь;
		ИмяРеквизита = СтрЗаменить(Лев(НастройкаЗамены.ТермДляЗамены, 20), " ", "_");
		Попытка
			Если НастройкаЗамены.РеквизитТабличнойЧасти Тогда 
				Если МассивСуществующихПолей.Количество() = 0 Тогда 
					Для Каждого Поле Из Док.FormFields Цикл 
						МассивСуществующихПолей.Добавить(Поле.Name);
					КонецЦикла;
				КонецЕсли;
				
				Если НашаТаблица = Неопределено Тогда 
					Для Ит = 1 По КоличествоТаблиц Цикл 
						Если Док.Tables(Ит).Rows.Count > 1 Тогда 
							
							Для Ном = 1 По Док.Tables(Ит).Columns.Count Цикл
								Попытка
									Если Док.Bookmarks(ИмяРеквизита).Range.BookmarkID = 
										Док.Tables(Ит).Cell(2, Ном).Range.Fields(1).Result.BookmarkID Тогда 
										
										НашаТаблица = Док.Tables(Ит);
										ПолеНайдено = Истина;
										Прервать;
									КонецЕсли;
								Исключение
								КонецПопытки;
							КонецЦикла;
						КонецЕсли;
						
						Если НашаТаблица <> Неопределено Тогда 
							// Нашли нужную таблицу
							Прервать;
						КонецЕсли;
					КонецЦикла;
				Иначе 
					Для Ном = 1 По НашаТаблица.Columns.Count Цикл
						Попытка
							Если Док.Bookmarks(ИмяРеквизита).Range.BookmarkID = 
								НашаТаблица.Cell(2, Ном).Range.Fields(1).Result.BookmarkID Тогда 
								ПолеНайдено = Истина;
								Прервать;
							КонецЕсли;
						Исключение
						КонецПопытки;
					КонецЦикла;
				КонецЕсли;
			Иначе 
				Для Каждого Field из Док.FormFields Цикл
					Если Field.Name = ИмяРеквизита Тогда
						ПолеНайдено = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Попытка
			Если Не ПолеНайдено Тогда 
				Если НастройкаЗамены.РеквизитТабличнойЧасти Тогда
					Если НашаТаблица = Неопределено Тогда
						MyRange = Text.Range();
						//Создаем новую таблицу
						НашаТаблица = Док.Tables.add(MyRange, 2, КоличествоКолонок, 1, 2);
						НомерТаблицы = Док.Tables.Count;
						НашаТаблица.AutoFormat(16);
						
						Если Расширение = "docx" Тогда 
							Попытка
								НашаТаблица.Title = "Товары_Документооборот";
							Исключение
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
					
					КоличествоСтрокТаблицы = НашаТаблица.Rows.Count;
					СчетчикЦикла = 1;
					Пока КоличествоСтрокТаблицы > 0 Цикл 
						
						Если НашаТаблица.Columns.Count < НастройкаЗамены.НомерКолонкиТабличнойЧасти Тогда 
							НашаТаблица.Columns.Add();
						КонецЕсли;
						
						Если СчетчикЦикла = 1 Тогда 
							НашаТаблица.Cell(СчетчикЦикла, НастройкаЗамены.НомерКолонкиТабличнойЧасти).Range.Text = 
								СокрЛП(НастройкаЗамены.ОписаниеПоляЗамены);
							НашаТаблица.Cell(СчетчикЦикла, НастройкаЗамены.НомерКолонкиТабличнойЧасти).Range.Font.Bold = 1;
						Иначе 
							MyRange = НашаТаблица.Cell(СчетчикЦикла, НастройкаЗамены.НомерКолонкиТабличнойЧасти).Range;
							MyRange.Text = "";
							ПолеТаблицы = Неопределено;
							ПолеТаблицы = Док.FormFields.Add(MyRange, 70);
							
							НовоеПоле = Неопределено;
							Если МассивСуществующихПолей.Количество() > 0 Тогда 
								Для Каждого Поле Из Док.FormFields Цикл 
									Если МассивСуществующихПолей.Найти(Поле.Name) = Неопределено Тогда 
										НовоеПоле = Поле;
										Прервать;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
							
							Если НовоеПоле <> Неопределено И ПолеТаблицы.Name <> НовоеПоле.Name Тогда 
								ПолеТаблицы = НовоеПоле;
							КонецЕсли;
							
							ИмяРеквизита = СтрЗаменить(Лев(НастройкаЗамены.ТермДляЗамены, 20), " ", "_");
							ПолеТаблицы.Name = ИмяРеквизита;
							ПолеТаблицы.Result = НастройкаЗамены.ОписаниеПоляЗамены;
							ПолеТаблицы.TextInput.Default = НастройкаЗамены.ОписаниеПоляЗамены;
							МассивСуществующихПолей.Добавить(ПолеТаблицы.Name);
						КонецЕсли;
						
						КоличествоСтрокТаблицы = КоличествоСтрокТаблицы - 1;
						СчетчикЦикла = СчетчикЦикла + 1;
					КонецЦикла;
					
				Иначе 
					MyRange = Text.Range();
					НовоеПоле = Док.FormFields.Add(MyRange, 70);
					ИмяРеквизита = СтрЗаменить(Лев(НастройкаЗамены.ТермДляЗамены, 20), " ", "_");
					НовоеПоле.Name = ИмяРеквизита;
					НовоеПоле.Result = НастройкаЗамены.ОписаниеПоляЗамены;
					НовоеПоле.TextInput.Default = НастройкаЗамены.ОписаниеПоляЗамены;
					Text.TypeText(Символы.ВК);
				КонецЕсли;
				
				ЕстьДобавленныеПоля = Истина;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из МассивПолейДляУдаления Цикл
		ИмяРеквизита = ЭлементМассива.ПолеУдаления;
		РеквизитТабличнойЧасти = ЭлементМассива.РеквизитТабличнойЧасти;
		
		Попытка
			Если РеквизитТабличнойЧасти Тогда 
				Если НашаТаблица = Неопределено Тогда 
					Для Ит = 1 По КоличествоТаблиц Цикл 
						Если Док.Tables(Ит).Rows.Count > 1 Тогда 
							
							Для Ном = 1 По Док.Tables(Ит).Columns.Count Цикл
								Попытка
									Если Док.Bookmarks(ИмяРеквизита).Range.BookmarkID = 
										Док.Tables(Ит).Cell(2, Ном).Range.Fields(1).Result.BookmarkID Тогда 
										
										НашаТаблица = Док.Tables(Ит);
										НашаТаблица.Cell(1, Ном).delete();
										НашаТаблица.Cell(2, Ном).delete();
										ЕстьУдаленныеПоля = Истина;
										Прервать;
									КонецЕсли;
								Исключение
								КонецПопытки;
							КонецЦикла;
						КонецЕсли;
						
						Если НашаТаблица <> Неопределено Тогда 
							// Нашли нужную таблицу
							Прервать;
						КонецЕсли;
					КонецЦикла;
				Иначе 
					Для Ном = 1 По НашаТаблица.Columns.Count Цикл
						Попытка
							Если Док.Bookmarks(ИмяРеквизита).Range.BookmarkID = 
								НашаТаблица.Cell(2, Ном).Range.Fields(1).Result.BookmarkID Тогда 
								НашаТаблица.Cell(1, Ном).delete();
								НашаТаблица.Cell(2, Ном).delete();
								ЕстьУдаленныеПоля = Истина;
								Прервать;
							КонецЕсли;
						Исключение
						КонецПопытки;
					КонецЦикла;
				КонецЕсли;
			Иначе 
				Для Каждого Field Из Док.FormFields Цикл
					Если Field.Name = ИмяРеквизита Тогда
						Field.delete();
						ЕстьУдаленныеПоля = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
	Для Каждого ТекстВставки Из ТекстыДляВставки Цикл

		wdStory = 6;
		wdLine = 5;
			
		myRange = Док.Content;

		Нашли = Ложь;
		
		// Истина - forward - поиск вперед
		//после ЧтоМеняем -  Истина - это MatchCase
		Нашли = myRange.Find.Execute(ТекстВставки, Истина, , , , , Истина);

		Если Нашли <> Истина Тогда // если еще нет - добавим в начало
		
		    WordApp.Selection.HomeKey(wdStory);
		    WordApp.Selection.TypeParagraph();
		    WordApp.Selection.MoveUp(wdLine, 1);
		    WordApp.Selection.TypeText(ТекстВставки);
		    
		    ЕстьДобавленныеПоля = Истина;
		
		КонецЕсли;	
		
	КонецЦикла;
	
	Для Каждого ТекстВставки Из ТекстыДляУдаления Цикл

		wdStory = 6;
		wdLine = 5;
			
		myRange = Док.Content;

		Нашли = Ложь;
		
		// Истина - forward - поиск вперед
		//после ЧтоМеняем -  Истина - это MatchCase
		Нашли = myRange.Find.Execute(ТекстВставки, Истина, , , , , Истина);

		Если Нашли = Истина Тогда // есть - удалим
		
			myRange.Select();
		    WordApp.Selection.Delete();
		    
		    ЕстьУдаленныеПоля = Истина;
		
		КонецЕсли;	
		
	КонецЦикла;
		
	
	Build = WordApp.Build;
	Если Найти(Build, "12.") = 1 Или Найти(Build, "14.") = 1
		Или Найти(Build, "15.") = 1 Тогда
		Если Расширение = "docx" Тогда
			Док.SaveAs(ИмяФайлаСПутем, 12);
		Иначе
			Док.SaveAs(ИмяФайлаСПутем, 0);
		КонецЕсли;
	Иначе
		Док.SaveAs(ИмяФайлаСПутем);
	КонецЕсли;
	
	Док.Close(); 
	WordApp.Quit();
	WordApp = Неопределено;
	
	Если ЕстьДобавленныеПоля Или ЕстьУдаленныеПоля Тогда 
		
		ТекстОшибки = "";
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ФайлШаблон);
		МожноЗанятьФайл = РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(
			ДанныеФайла,
			ТекстОшибки);
			
		Если Не МожноЗанятьФайл Тогда
			ПоказатьПредупреждение(, ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		ТекстОшибки = "";
		ДатаЗаема = ТекущаяДата();
		ФайлЗанят = РаботаСФайламиВызовСервера.ЗанятьФайл(ДанныеФайла, ТекстОшибки, 
			ДатаЗаема, ИдентификаторФормы);
		Если Не ФайлЗанят Тогда
			ПоказатьПредупреждение(, ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		Файл = Новый Файл(ИмяФайлаСПутем);
		
		Обработчик = Новый ОписаниеОповещения("СохранитьФайл", ЭтотОбъект, 
			Новый Структура("ДанныеФайла", ДанныеФайла));
		
		УниверсальноеВремяИзмененияНаДиске = Файл.ПолучитьУниверсальноеВремяИзменения();
		РазмерНаДиске = Файл.Размер();
			
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("ОбработчикРезультата", Неопределено);
		ПараметрыВыполнения.Вставить("ПараметрКоманды", ФайлШаблон);
			
		ПараметрыОбработчика = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(
			Обработчик, ФайлШаблон, ИдентификаторФормы);
			
		ПараметрыОбработчика.Вставить("ПереданныйПолныйПутьКФайлу", ИмяФайлаСПутем);
		ПараметрыОбработчика.Вставить("СоздатьНовуюВерсию", Истина);
		ПараметрыОбработчика.Вставить("ХранитьВерсии", Истина);
		Если ТипЗнч(НастройкиЗамены) = Тип("Массив") Тогда // если это копирование настройки заполнения
			ПараметрыОбработчика.Вставить("КомментарийКВерсии",
				НСтр("ru = 'Создано автоматически командой ""Заполнить по правилу""'"));
		КонецЕсли;
			
		РаботаСФайламиКлиент.ЗакончитьРедактирование(ПараметрыОбработчика);
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ФайлШаблон,, ИдентификаторФормы);
		
		СтруктураОбработчика = Новый Структура;
		СтруктураОбработчика.Вставить("Обработчик", Обработчик);
		СтруктураОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
		СтруктураОбработчика.Вставить("ИдентификаторФормы", ИдентификаторФормы);
		ОбработчикПредупреждения = Новый ОписаниеОповещения("ОткрытьФайлНаРедактирование", ЭтотОбъект, 
			СтруктураОбработчика);
			
		Если ПоказыватьУведомлениеОЗаписи Тогда 
			
			ПараметрыФормы = Новый Структура;
			Если ЕстьДобавленныеПоля Тогда 
				ПараметрыФормы.Вставить("Текст",
					НСтр("ru = '<BODY>
						|В файл добавлены новые поля.
						|Расставьте их в нужные места документа и при необходимости поменяйте оформление.
							|</BODY>'"));
			Иначе
				ПараметрыФормы.Вставить("Текст",
					НСтр("ru = '<BODY>
					|Из файла удалены некоторые поля.
					|Проверьте корректность документа.
					|</BODY>'"));
			КонецЕсли;
			
			ПараметрыФормы.Вставить("БольшеНеПоказывать", Истина);
			ПараметрыФормы.Вставить("КлючОбъекта", "ВидыДокументов");
			ПараметрыФормы.Вставить("КлючНастроек", "ПоказыватьУведомлениеОПереносеПолейВФайл");
			
			МожноЗакрытьФорму = Ложь;
			
			ОткрытьФорму("ОбщаяФорма.Подсказка", ПараметрыФормы,,,,,
				ОбработчикПредупреждения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		Иначе 
			ВыполнитьОбработкуОповещения(ОбработчикПредупреждения, КодВозвратаДиалога.ОК);
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьФайлы(ВременнаяПапка);
	
КонецПроцедуры

// Инициализирует создание/заполнение правила автозаполнения файла.
// 
// Параметры:
//  ВладелецФайла - СправочникСсылка.ВидыДокументов
//  Форма - ФормаКлиентскогоПриложения - форма вида/шаблона документа.
// 
Процедура СоздатьЗаполнитьПравилоПоОснованию(ВладелецФайла, Форма) Экспорт
	
	ТекущаяСтрока = Форма.Элементы.Файлы.ТекущиеДанные;
	
	Если ТекущаяСтрока.Расширение = "doc" Или ТекущаяСтрока.Расширение = "docx" Тогда
		
		ПараметрыОповещения = Новый Структура("ВладелецФайла, ТекущаяСтрока, ИдентификаторФормы",
			ВладелецФайла, ТекущаяСтрока, Форма.УникальныйИдентификатор);
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ПравилоАвтозаполнения) Тогда
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.ОК);
			Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			Обработчик = Новый ОписаниеОповещения("ПослеОтветаНаВопросОПерезаполненииПравила", ЭтотОбъект,
				ПараметрыОповещения);
			ТекстВопроса = НСтр("ru = 'Правило автозаполнения полей файла будет перезаписано. Продолжить?'");
			ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки);
			
		Иначе
			
			ПараметрыОткрытия = Новый Структура("ЗаголовокФормы", НСтр("ru = 'Выбор настройки заполнения файла'"));
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораПравилаАвтозаполнения",
				ЭтотОбъект, ПараметрыОповещения);
			ОткрытьФорму("Справочник.ПравилаАвтозаполненияФайлов.Форма.ФормаВыбора", ПараметрыОткрытия,,,,,
				ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Автозаполнение полей недоступно для файла с данным расширением.'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПослеОтветаНаВопросОПерезаполненииПравила(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораПравилаАвтозаполнения", ЭтотОбъект, Параметры);
		ПараметрыОткрытия = Новый Структура("Правило, ЗаголовокФормы");
		ПараметрыОткрытия.Правило = Параметры.ТекущаяСтрока.ПравилоАвтозаполнения;
		ПараметрыОткрытия.ЗаголовокФормы = НСтр("ru = 'Выбор настройки заполнения файла'");
		ОткрытьФорму("Справочник.ПравилаАвтозаполненияФайлов.Форма.ФормаВыбора", ПараметрыОткрытия,,,,,
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыбораПравилаАвтозаполнения(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ТекущаяСтрока = Параметры.ТекущаяСтрока;
		
		ПараметрыНовогоПравила = АвтозаполнениеШаблоновФайловВызовСервера.СоздатьЗаполнитьПравилоАвтозаполнения(
			ТекущаяСтрока.Ссылка, Параметры.ВладелецФайла, Результат, ТекущаяСтрока.ПравилоАвтозаполнения);
		
		Состояние(НСтр("ru = 'В шаблоне файла осуществляется поиск указанных полей. Пожалуйста, подождите...'"));
		
		ПроверитьНаличиеИДобавитьПоляВФайлеMSWord(
			ТекущаяСтрока.Наименование, ТекущаяСтрока.Расширение, ПараметрыНовогоПравила.НастройкиЗамены,
			ТекущаяСтрока.Ссылка, Параметры.ИдентификаторФормы, ПараметрыНовогоПравила.МассивПолейДляУдаления,
			ПараметрыНовогоПравила.ПоказыватьУведомлениеОЗаписи,
			ПараметрыНовогоПравила.ТекстыДляВставки, ПараметрыНовогоПравила.ТекстыДляУдаления);
		
		СтруктураОповещения = Новый Структура("ВидДокумента, Шаблон, Правило",
			Параметры.ВладелецФайла, ТекущаяСтрока.Ссылка, ПараметрыНовогоПравила.Правило);
		Оповестить("ЗаписаноПравилоАвтозаполнения", СтруктураОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОткрытьФайлНаРедактирование(Результат, Параметры) Экспорт 
	
	РаботаСФайламиКлиент.РедактироватьФайл(Параметры.Обработчик, Параметры.ДанныеФайла, Параметры.ИдентификаторФормы);
	
	Оповестить("ЗакрытьКраткаяФормаЭлемента");
	
КонецПроцедуры

Процедура СохранитьФайл(Результат, Параметры) Экспорт 
	
	Если Результат = Истина Тогда
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Событие", "ДанныеФайлаИзменены");
		ПараметрыОповещения.Вставить("Файл", Параметры.ДанныеФайла.Ссылка);
		ПараметрыОповещения.Вставить("Владелец", Параметры.ДанныеФайла.Владелец);
		ПараметрыОповещения.Вставить("ЕстьЗанятыеФайлы", Неопределено);
		ПараметрыОповещения.Вставить("ИдентификаторРодительскойФормы", Неопределено);
		
		Оповестить("Запись_Файл", 
			ПараметрыОповещения,
			Параметры.ДанныеФайла.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
