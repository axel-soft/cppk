// @strict-types


#Область СлужебныйПрограммныйИнтерфейс

#Область РегламентноеЗадание

Процедура ОбменССервисомКабинетСотрудника() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбменССервисомКабинетСотрудника);
	
	БылиОшибки = КабинетСотрудникаМенеджерОбмена.РезультатВыполненияОбмена(Ложь);
	
	Если БылиОшибки Тогда
		ВызватьИсключение НСтр("ru = 'Обмен данными с сервисом 1С:Кабинет сотрудника завершен с ошибками.'");
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработкаРезультатовВыполненияРегламентногоЗадания

// Отметить выгруженными.
// 
// Параметры:
//  Сведения - Массив Из ДокументСсылка.СведенияОВнешнемПодписании
// 
Процедура ОтметитьВыгруженными(Сведения) Экспорт
	
	Для Каждого Сведение Из Сведения Цикл
		
		// Удалим из регистра к выгрузке.
		УдалитьКВыгрузке(Сведение);
		
		// Установим признаки, что отправлен.
		РаботаСВнешнимПодписанием.ОтметитьОтправленным(Сведение);
		
	КонецЦикла;
	
КонецПроцедуры

// Отметить удалённым.
// 
// Параметры:
//  Сведения - Массив Из ДокументСсылка.СведенияОВнешнемПодписании
//
Процедура ОтметитьУдалёнными(Сведения) Экспорт
	
	Для Каждого Сведение Из Сведения Цикл
		
		// Удалим из регистра к удалению.
		УдалитьКУдалению(Сведение);
		
	КонецЦикла;
	
КонецПроцедуры

// Отметить к обработке.
// 
// Параметры:
//  РезультатыСведений - Массив Из Структура:
//   * Сведения - ДокументСсылка.СведенияОВнешнемПодписании
//   * Результат - Структура
//
Процедура ОтметитьКОбработке(РезультатыСведений) Экспорт
	
	Для Каждого РезультатСведения Из РезультатыСведений Цикл
		РаботаСВнешнимПодписанием.ПоставитьВОчередьРезультатПодписания(РезультатСведения.Сведения, РезультатСведения.Результат);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СобытияЗаписиСведенияОВнешнемПодписании

// При создании сведения о внешнем подписании.
// 
// Параметры:
//  Сведения - ДокументСсылка.СведенияОВнешнемПодписании
//
Процедура ПриСозданииСведенияОВнешнемПодписании(Сведения) Экспорт
	
	ЗарегистрироватьКВыгрузке(Сведения);
	
КонецПроцедуры

// При пометке удаления сведения о внешнем подписании.
// 
// Параметры:
//  Сведения - ДокументСсылка.СведенияОВнешнемПодписании
//
Процедура ПриПометкеУдаленияСведенияОВнешнемПодписании(Сведения) Экспорт
	
	ЗарегистрироватьКУдалению(Сведения);
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЖР

Функция ИмяСобытияПротоколЗапрос() Экспорт

	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Протокол запрос'", ОбщегоНазначения.КодОсновногоЯзыка()));

КонецФункции

Функция ИмяСобытияПротоколОтвет() Экспорт

	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Протокол ответ'", ОбщегоНазначения.КодОсновногоЯзыка()));

КонецФункции

Функция ИмяСобытияЖРАутентификации() Экспорт

	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Аутентификация'", ОбщегоНазначения.КодОсновногоЯзыка()));

КонецФункции

Функция ИмяСобытияПрочиеСобытия() Экспорт
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Прочие события'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция ИмяСобытияНачалоОбмена() Экспорт
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Начало обмена'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

Функция ИмяСобытияОкончаниеОбмена() Экспорт
	
	Возврат СтрШаблон("%1.%2", НазваниеГруппыСобытийЖР(), НСтр("ru = 'Окончание обмена'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
КонецФункции

#КонецОбласти

#Область ОпределениеФункциональностиПоВерсииСервиса

// Использовать расширение файла в заголовке.
// 
// Параметры:
//  ТекущаяВерсия - Строка - текущая версия приложения.
// 
// Возвращаемое значение:
//  Булево - Использовать расширение файла в заголовке
//
Функция ИспользоватьРасширениеФайлаВЗаголовке(ТекущаяВерсия) Экспорт

	Возврат Не ВерсияПриложенияМеньшеВерсии(ТекущаяВерсия, "5.0.2.1");

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РегистрацияДокументовКОбмену

// Зарегистрировать к выгрузке.
// 
// Параметры:
//  Сведения - ДокументСсылка.СведенияОВнешнемПодписании - Сведения
//
Процедура ЗарегистрироватьКВыгрузке(Сведения)
	
	МенеджерЗаписи = РегистрыСведений.ДокументыКВыгрузкеКабинетСотрудника.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Документ = Сведения;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Зарегистрировать к удалению.
// 
// Параметры:
//  Сведения - ДокументСсылка.СведенияОВнешнемПодписании - Сведения
//
Процедура ЗарегистрироватьКУдалению(Сведения)
	
	// Если ещё не выгружен, то нужно удалить из очереди к выгрузке.
	// Блокировка не нужна. С одной стороны, может в этот момент времени выгружаться регламентным заданием в сервис.
	// С другой стороны, это не важно, так как да, выгрузится в сервис, но потом удалится при следующей итерации обмена.
	// УдалитьКВыгрузке проверяет наличие записи в регистре, удаляет только существующую запись.
	Если Не СведенияВыгруженыВСервис(Сведения) Тогда
		УдалитьКВыгрузке(Сведения);
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ДокументыКУдалениюКабинетСотрудника.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Документ = Сведения;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура УдалитьКУдалению(Сведения)
	
	МенеджерЗаписи = РегистрыСведений.ДокументыКУдалениюКабинетСотрудника.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Документ = Сведения;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Удалить();
	КонецЕсли;
	
КонецПроцедуры

// Удалить к выгрузке.
// 
// Параметры:
//  Сведения - ДокументСсылка.СведенияОВнешнемПодписании - Сведения
//
Процедура УдалитьКВыгрузке(Сведения)
	
	МенеджерЗаписи = РегистрыСведений.ДокументыКВыгрузкеКабинетСотрудника.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Документ = Сведения;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Удалить();
	КонецЕсли;
	
КонецПроцедуры

// Сведения выгружены в сервис.
// 
// Параметры:
//  Сведения - ДокументСсылка.СведенияОВнешнемПодписании - Сведения
// 
// Возвращаемое значение:
//  Булево
//
Функция СведенияВыгруженыВСервис(Сведения)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сведения, "Отправлен");
	
КонецФункции

#КонецОбласти

#Область СобытияЖР

Функция НазваниеГруппыСобытийЖР()
	
	Возврат НСтр("ru = '1С:Кабинет сотрудника'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

#Область Прочее

// Сравнивает текущую версию сервиса с переданным значением.
//
// Параметры:
// 	ВерсияПриложения - Строка - текущая версия приложения.
// 	ЦелеваяВерсия    - Строка - сравниваемая версия приложения.
//
// 	Возвращаемое значение:
// 		Булево
//
Функция ВерсияПриложенияМеньшеВерсии(ВерсияПриложения, ЦелеваяВерсия)

	Если Не ЗначениеЗаполнено(ВерсияПриложения) Тогда
		Возврат Истина;
	Иначе
		Возврат ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияПриложения, ЦелеваяВерсия) < 0;
	КонецЕсли;

КонецФункции

#КонецОбласти

#КонецОбласти
