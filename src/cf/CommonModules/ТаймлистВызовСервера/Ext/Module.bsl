#Область ПрограммныйИнтерфейс

// Возвращает признак использования сервиса Таймлист в программе
//
// Возвращаемое значение:
//  Булево - Истина, если сервис используется в программе.
// 
Функция ТаймлистИспользуется() Экспорт
	
	Возврат Таймлист.ТаймлистИспользуется();
	
КонецФункции

// Обновляет значение константы ИспользуетсяРаспознаваниеТаймлист.
// 
Процедура ОбновитьИспользуетсяРаспознаваниеПриПомощиТаймлист() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РаспознаваниеИспользуется = Константы.ИспользоватьРаспознавание.Получить();
	
	Если Не РаспознаваниеИспользуется Тогда
		Константы.ИспользуетсяРаспознаваниеТаймлист.Установить(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Получает список расширений аудио- и видеофайлов, загружаемых в сервис Таймлист.
// 
// Возвращаемое значение:
//  Массив Из Строка - массив расширений файлов
// 
Функция РасширенияФайловТаймлист() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	РасширенияФайловТаймлист = СтрЗаменить(Константы.ТаймлистСписокРасширенийФайлов.Получить(), " ", "");
	
	МассивРасширенийФайлов = Новый Массив;
	Если ЗначениеЗаполнено(РасширенияФайловТаймлист) Тогда
		МассивРасширенийФайлов = СтрРазделить(РасширенияФайловТаймлист, ",", Ложь);
	КонецЕсли;
	
	Возврат МассивРасширенийФайлов;
	
КонецФункции

// Возвращает разрешение на добавление больших аудио- и видеофайлов в программу.
// 
// Параметры:
//  Расширение - Строка - расширение файла.
//  Размер - Строка - размер файла в мегабайтах.
// 
// Возвращаемое значение:
//  Булево - Истина, если разрешено.
// 
Функция РазрешеноДобавлятьФайлыТаймлистПревышающихМаксимальноДопустимыйОбъем(Расширение, Размер) Экспорт
	
	Разрешено = ТаймлистПовтИсп.ТаймлистИспользуется()
		И ТаймлистКлиентСервер.ЭтоРасширениеФайлаТаймлист(Расширение)
		И ТаймлистПовтИсп.ДоступноРаспознаваниеПоЗапросу()
		И Размер <= 1024;
	
	Возврат Разрешено;
	
КонецФункции

// Помещает файл Таймлист в очередь обработки.
// 
// Параметры:
//  Файл - СправочникСсылка.Файлы, СправочникСсылка.ВерсииФайлов - обрабатываемый файл.
//  Задание - ПеречислениеСсылка.ТаймлистТипыЗаданий - выполняемое задание.
//  Параметры - Структура - параметры выполнения задания.
//  
// Возвращаемое значение:
//  Булево - Истина, если передаваемый файл был расширения Таймлист.
// 
Функция НачатьОбработкуФайла(Файл, Задание, Параметры = Неопределено) Экспорт
	
	ЭтоФайлТаймлист = Ложь;
	
	Если ТипЗнч(Файл) = Тип("СправочникСсылка.Файлы") Тогда
		
		РеквизитыВерсииФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Файл,
			"ТекущаяВерсия, ТекущаяВерсияРасширение");
		
		Если ТаймлистКлиентСервер.ЭтоРасширениеФайлаТаймлист(РеквизитыВерсииФайла.ТекущаяВерсияРасширение) Тогда
			ЭтоФайлТаймлист = Истина;
			Таймлист.ПоместитьФайлВОчередьОбработки(РеквизитыВерсииФайла.ТекущаяВерсия, Задание, Параметры);
		КонецЕсли;
		
	Иначе
		
		РасширениеВерсииФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "Расширение");
		
		Если ТаймлистКлиентСервер.ЭтоРасширениеФайлаТаймлист(РасширениеВерсииФайла) Тогда
			ЭтоФайлТаймлист = Истина;
			Таймлист.ПоместитьФайлВОчередьОбработки(Файл, Задание, Параметры);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЭтоФайлТаймлист;
	
КонецФункции

// Удаляет данные работы сервиса по переданной версии файла, а также выполняет очистку в самом сервисе.
// 
// Параметры:
//  ВерсияФайла - СправочникСсылка.ВерсииФайлов - обрабатываемый файл.
//  ИдентификаторЗадания - Строка
// 
Процедура УдалитьДанныеФайла(ВерсияФайла, ИдентификаторЗадания = "") Экспорт
	
	Таймлист.УдалитьДанныеФайла(ВерсияФайла, ИдентификаторЗадания);
	
КонецПроцедуры

// Выполняет проверку подключения к сервису Таймлист по указанным логину и паролю.
//
// Параметры:
//  Логин - Строка
//  Пароль - Строка
//
// Возвращаемое значение:
//  Булево - Истина, если подключение было успешно установлено
// 
Функция СервисПоДаннымАвторизацииПодключен(Логин, Пароль) Экспорт
	
	Возврат Таймлист.СервисПоДаннымАвторизацииПодключен(Логин, Пароль);
	
КонецФункции

// Возвращает данные файла, необходимые для формирования предпросмотра.
// 
// Параметры:
//  Файл - СправочникСсылка.Файлы
// 
// Возвращаемое значение:
//  Структура:
//   * Ссылка - СправочникСсылка.Файлы
//   * Задание - ПеречислениеСсылка.ТаймлистТипыЗаданий
//   * Статус - ПеречислениеСсылка.ТаймлистСтатусы
//   * ТекущаяВерсия - СправочникСсылка.ВерсииФайлов
//   * ТекущаяВерсияРазмер - Число
//   * Расшифровка - ХранилищеЗначения
//   * Автопротокол - ХранилищеЗначения
//   * СледующиеШаги - Строка
// 
Функция ДанныеФайлаДляОткрытия(Файл) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеФайла = Новый Структура;
	ДанныеФайла.Вставить("Ссылка");
	ДанныеФайла.Вставить("ТекущаяВерсия");
	ДанныеФайла.Вставить("ТекущаяВерсияРазмер");
	ДанныеФайла.Вставить("Задание");
	ДанныеФайла.Вставить("Статус");
	ДанныеФайла.Вставить("Расшифровка");
	ДанныеФайла.Вставить("Автопротокол");
	ДанныеФайла.Вставить("СледующиеШаги");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Файлы.Ссылка,
		|	Файлы.ТекущаяВерсия,
		|	Файлы.ТекущаяВерсияРазмер,
		|	ЕСТЬNULL(ТаймлистФайлыВОбработке.Задание,
		|		ЗНАЧЕНИЕ(Перечисление.ТаймлистТипыЗаданий.ПустаяСсылка)) КАК Задание,
		|	ЕСТЬNULL(ТаймлистДанныеРаботыСервиса.Статус,
		|		ЗНАЧЕНИЕ(Перечисление.ТаймлистСтатусы.ПустаяСсылка)) КАК Статус,
		|	ЕСТЬNULL(ТаймлистДанныеРаботыСервиса.Расшифровка, Неопределено) КАК Расшифровка,
		|	ЕСТЬNULL(ТаймлистДанныеРаботыСервиса.Автопротокол, Неопределено) КАК Автопротокол,
		|	ЕСТЬNULL(ТаймлистДанныеРаботыСервиса.СледующиеШаги, """") КАК СледующиеШаги
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТаймлистДанныеРаботыСервиса КАК ТаймлистДанныеРаботыСервиса
		|		ПО (ТаймлистДанныеРаботыСервиса.ВерсияФайла = Файлы.ТекущаяВерсия)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТаймлистФайлыВОбработке КАК ТаймлистФайлыВОбработке
		|		ПО (ТаймлистФайлыВОбработке.ВерсияФайла = Файлы.ТекущаяВерсия)
		|ГДЕ
		|	Файлы.Ссылка = &Файл";
	
	Запрос.УстановитьПараметр("Файл", Файл);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеФайла, Выборка);
	КонецЕсли;
	
	Возврат ДанныеФайла;
	
КонецФункции

#КонецОбласти