////////////////////////////////////////////////////////////////////////////////
// РаботаСКомплекснымиБизнесПроцессамиКлиентСервер: содержит процедуры работы с комплексными
//													процессами на клиенте и на сервере.
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область СхемаПроцесса

#Область НастройкиЭлементов

#Область УсловияСхемы

// Возвращает имя поля условия "ПолеДляПроверки" в схемах для комплексных процессов.  
// 
// Возвращаемое значение:
// 	Строка
//
Функция ИмяПоляДляПроверкиУсловияСхемы() Экспорт
	
	Возврат "ПолеДляПроверки";
	
КонецФункции

// Возвращает имя поля условия "ПроверкаПредмета" в схемах для комплексных процессов.  
// 
// Возвращаемое значение:
// 	Строка
//
Функция ИмяПоляУсловияПроверкаПредмета() Экспорт
	
	Возврат "ПроверкаПредмета";
	
КонецФункции

// Возвращает имя поля условия "РезультатВыполненияДействия" в схемах для комплексных процессов.    
// 
// Возвращаемое значение:
// 	Строка
//
Функция ИмяПоляУсловияРезультатВыполненияДействия() Экспорт
	
	Возврат "РезультатВыполненияДействия";
	
КонецФункции

// Возвращает имя поля условия "Скрипт" в схемах для комплексных процессов.    
// 
// Возвращаемое значение:
// 	Строка
//
Функция ИмяПоляУсловияСкрипт() Экспорт
	
	Возврат "Скрипт";
	
КонецФункции

// Возвращает структуру условия "Проверка предмета".
// 
// Возвращаемое значение:
//  Структура
//   * ИмяПредмета - СправочникСсылка.ИменаПредметов
//   * АлгоритмПроверки - СправочникСсылка.АлгоритмыПроверки
//
Функция СтруктураУсловияПроверкаПредмета() Экспорт
	
	СтруктураУсловия = Новый Структура;
	
	СтруктураУсловия.Вставить("ИмяПредмета",
		ПредопределенноеЗначение("Справочник.ИменаПредметов.ПустаяСсылка"));
		
	СтруктураУсловия.Вставить("АлгоритмПроверки",
		ПредопределенноеЗначение("Справочник.АлгоритмыПроверки.ПустаяСсылка"));
		
	Возврат СтруктураУсловия;
	
КонецФункции

// Возвращает структуру условия Результат выполнения действия.
// 
// Возвращаемое значение:
//  Структура
//   * ИмяДействия - Строка - имя действия в схеме.
//   * РезультатВыполнения
//     ** ПеречислениеСсылка.РезультатыПроцессаПодписания
//     ** ПеречислениеСсылка.ОбщиеРезультатыПриглашения
//     ** ПеречислениеСсылка.РезультатыРегистрации
//     ** ПеречислениеСсылка.РезультатыСогласования
//     ** ПеречислениеСсылка.РезультатыУтверждения
//     ** Строка - см. РезультатВыполненияДействияКомплексногоПроцессаЗавершено
//
Функция СтруктураУсловияРезультатВыполненияДействия() Экспорт
	
	СтруктураУсловия = Новый Структура;
	
	СтруктураУсловия.Вставить("ИмяДействия", "");
	СтруктураУсловия.Вставить("РезультатВыполнения", Неопределено);
		
	Возврат СтруктураУсловия;
	
КонецФункции

// Возвращает результат выполнения действия комплексного процесса "Завершено".
// 
// Возвращаемое значение:
//   Структура
//     * Значение - Строка - значение результата.
//     * Представление - Строка - представление результата.
//
Функция РезультатВыполненияДействияКомплексногоПроцессаЗавершено() Экспорт
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Значение", "Завершено");
	РезультатВыполнения.Вставить("Представление", НСтр("ru = 'Завершено'"));
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Возвращает результаты выполннения для переданного действия.
// 
// Параметры:
// 	Действие - ОпределяемыйТип.ШаблонДействияКомплексногоПроцесса
// 	
// Возвращаемое значение:
// 	СписокЗначений
// 	 * Значение
// 	   ** ПеречислениеСсылка.РезультатыПроцессаПодписания
//     ** ПеречислениеСсылка.ОбщиеРезультатыПриглашения
//     ** ПеречислениеСсылка.РезультатыРегистрации
//     ** ПеречислениеСсылка.РезультатыСогласования
//     ** ПеречислениеСсылка.РезультатыУтверждения
//     ** Строка - см. РезультатВыполненияДействияКомплексногоПроцессаЗавершено
// 	 * Представление - представление результата.
// 
Функция РезультатыВыполненияДляДействияКомплексногоПроцесса(Действие) Экспорт
	
	РезультатыВыполнения = Новый СписокЗначений();
	
	ТипДействия = ТипЗнч(Действие);
	
	РезультатЗавершено = РезультатВыполненияДействияКомплексногоПроцессаЗавершено();
		
	Если ТипДействия = Тип("СправочникСсылка.ШаблоныПодписания") Тогда
		
		РезультатДействия = 
			ПредопределенноеЗначение("Перечисление.РезультатыПроцессаПодписания.Подписано");
		РезультатыВыполнения.Добавить(РезультатДействия, Строка(РезультатДействия));
		
		РезультатДействия = 
			ПредопределенноеЗначение("Перечисление.РезультатыПроцессаПодписания.НеПодписано");
		РезультатыВыполнения.Добавить(РезультатДействия, Строка(РезультатДействия));
			
	ИначеЕсли ТипДействия = Тип("СправочникСсылка.ШаблоныПриглашения") Тогда
		
		РезультатДействия = 
			ПредопределенноеЗначение(
			"Перечисление.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками");
		РезультатыВыполнения.Добавить(РезультатДействия, Строка(РезультатДействия));
		
		РезультатДействия = 
			ПредопределенноеЗначение(
			"Перечисление.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками");
		РезультатыВыполнения.Добавить(РезультатДействия, Строка(РезультатДействия));
		
		РезультатДействия = 
			ПредопределенноеЗначение(
			"Перечисление.ОбщиеРезультатыПриглашения.НеПринятоОбязательнымиУчастниками");
		РезультатыВыполнения.Добавить(РезультатДействия, Строка(РезультатДействия));
		
		РезультатДействия = 
			ПредопределенноеЗначение(
			"Перечисление.ОбщиеРезультатыПриглашения.НеПринятоВсемиУчастниками");
		РезультатыВыполнения.Добавить(РезультатДействия, Строка(РезультатДействия));
		
	ИначеЕсли ТипДействия = Тип("СправочникСсылка.ШаблоныРегистрации") Тогда
		
		РезультатДействия = 
			ПредопределенноеЗначение("Перечисление.РезультатыРегистрации.Зарегистрировано");
		РезультатыВыполнения.Добавить(РезультатДействия, Строка(РезультатДействия));
		
		РезультатДействия = 
			ПредопределенноеЗначение("Перечисление.РезультатыРегистрации.НеЗарегистрировано");
		РезультатыВыполнения.Добавить(РезультатДействия, Строка(РезультатДействия));
			
	ИначеЕсли ТипДействия = Тип("СправочникСсылка.ШаблоныСогласования") Тогда
		
		РезультатДействия = 
			ПредопределенноеЗначение("Перечисление.РезультатыСогласования.Согласовано");
		РезультатыВыполнения.Добавить(РезультатДействия, Строка(РезультатДействия));
		
		РезультатДействия = 
			ПредопределенноеЗначение("Перечисление.РезультатыСогласования.СогласованоСЗамечаниями");
		РезультатыВыполнения.Добавить(РезультатДействия, Строка(РезультатДействия));
		
		РезультатДействия = 
			ПредопределенноеЗначение("Перечисление.РезультатыСогласования.НеСогласовано");
		РезультатыВыполнения.Добавить(РезультатДействия, Строка(РезультатДействия));
		
	ИначеЕсли ТипДействия = Тип("СправочникСсылка.ШаблоныУтверждения") Тогда
		
		РезультатДействия = 
			ПредопределенноеЗначение("Перечисление.РезультатыУтверждения.Утверждено");
		РезультатыВыполнения.Добавить(РезультатДействия, Строка(РезультатДействия));
		
		РезультатДействия = 
			ПредопределенноеЗначение("Перечисление.РезультатыУтверждения.НеУтверждено");
		РезультатыВыполнения.Добавить(РезультатДействия, Строка(РезультатДействия));
			
	КонецЕсли;
	
	РезультатыВыполнения.Добавить(РезультатЗавершено.Значение, РезультатЗавершено.Представление);
	
	Возврат РезультатыВыполнения;
	
КонецФункции

// Нормализует элементы отбора настроек условий.
// 
// Рекурсивная процедура.
// 
// Параметры:
// 	ЭлементыОтбора - КоллекцияЭлементовОтбораКомпоновкиДанных - элементы отбора условия.
// 	ПредшествующиеДействия - Массив
// 	 * Строка
// 	ПредметыПроцесса - Массив 
// 	 * СправочникСсылка.ИменаПредметов  
//
Процедура НормализоватьЭлементыОтбораНастройкиУсловия(
	ЭлементыОтбора, ПредшествующиеДействия, ПредметыПроцесса) Экспорт
	
	ТипГруппаЭлементовОтбораКомпоновкиДанных = Тип("ГруппаЭлементовОтбораКомпоновкиДанных");
		
	ПолеУсловияРезультатВыполненияДействия = Новый ПолеКомпоновкиДанных(
		ИмяПоляУсловияРезультатВыполненияДействия());
	
	ПолеУсловияПроверкаПредмета = Новый ПолеКомпоновкиДанных(
		ИмяПоляУсловияПроверкаПредмета());
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		
		ТипЭлементаОтбора = ТипЗнч(ЭлементОтбора);
		
		Если ТипЭлементаОтбора = ТипГруппаЭлементовОтбораКомпоновкиДанных Тогда
			НормализоватьЭлементыОтбораНастройкиУсловия(
				ЭлементОтбора.Элементы, ПредшествующиеДействия, ПредметыПроцесса);
			Продолжить;
		КонецЕсли; 
		
		Если ЭлементОтбора.ЛевоеЗначение = ПолеУсловияРезультатВыполненияДействия Тогда
			
			Если ПредшествующиеДействия.Найти(
				ЭлементОтбора.ПравоеЗначение.ИмяДействия) = Неопределено Тогда
				
				ЭлементОтбора.ПравоеЗначение = СтруктураУсловияРезультатВыполненияДействия();
				ЭлементОтбора.Использование = Ложь;
			КонецЕсли;
		
		ИначеЕсли ЭлементОтбора.ЛевоеЗначение = ПолеУсловияПроверкаПредмета Тогда
			
			Если ПредметыПроцесса.Найти(
				ЭлементОтбора.ПравоеЗначение.ИмяПредмета) = Неопределено Тогда
				
				ЭлементОтбора.ПравоеЗначение = СтруктураУсловияПроверкаПредмета();
				ЭлементОтбора.Использование = Ложь;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

// Заменяет имя предмета в элементах отбора компоновки данных условия.
// Рекурсивная процедура.
//
// Параметры:
//  ЭлементыОтбора - КоллекцияЭлементовОтбораКомпоновкиДанных - условие процесса.
//  ИсходноеИмяПредмета - СправочникСсылка.ИменаПредметов - исходное имя предмета.
//  ИмяПредмета - СправочникСсылка.ИменаПредметов - новое имя предмета.
//
Процедура ЗаменитьИмяПредметаВЭлементахОтбораНастройкиУсловия(
	ЭлементыОтбора, ИсходноеИмяПредмета, ИмяПредмета) Экспорт
	
	
	ТипГруппаЭлементовОтбораКомпоновкиДанных = Тип("ГруппаЭлементовОтбораКомпоновкиДанных");
		
	ПолеУсловияПроверкаПредмета = Новый ПолеКомпоновкиДанных(
		ИмяПоляУсловияПроверкаПредмета());
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		
		ТипЭлементаОтбора = ТипЗнч(ЭлементОтбора);
		
		Если ТипЭлементаОтбора = ТипГруппаЭлементовОтбораКомпоновкиДанных Тогда
			ЗаменитьИмяПредметаВЭлементахОтбораНастройкиУсловия(
				ЭлементОтбора.Элементы, ИсходноеИмяПредмета, ИмяПредмета);
			Продолжить;
		КонецЕсли; 
		
		Если ЭлементОтбора.ЛевоеЗначение = ПолеУсловияПроверкаПредмета
			И ЭлементОтбора.ПравоеЗначение.ИмяПредмета = ИсходноеИмяПредмета Тогда
		
			ЭлементОтбора.ПравоеЗначение.ИмяПредмета = ИмяПредмета;
		КонецЕсли;
	
	КонецЦикла;	
	
КонецПроцедуры

// Возвращает действия с настройками, предшествующие элементу условие.
// 
// Параметры:
//  ИмяЭлемента - Строка - Имя условия в схеме.
//  Форма - ФормаКлиентскогоПриложения - карточка со схемой для комплексного процесса.
// 
// Возвращаемое значение:
//  Соответствие
//   * Ключ - Имя действия
//   * Значение - ОпределяемыйТип.ШаблонДействияКомплексногоПроцесса 
//
Функция ДействияСНастройкамиПредшествующиеУсловию(ИмяЭлемента, Форма) Экспорт
	
	ПредшествующиеДействия = Новый Соответствие;
	
	ТипыПредшествующихЭлементов = Новый Соответствие();
	
	ТипыПредшествующихЭлементов.Вставить(
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Действие"),
		Истина);
			
	ИменаПредшествующихДействийСхемы = 
		СхемыПроцессовКлиентСервер.ИменаПредшествующихЭлементовСхемыВФорме(
			ИмяЭлемента, ТипыПредшествующихЭлементов, Форма);
		
	Для Каждого ИмяПредшественника Из ИменаПредшествующихДействийСхемы Цикл
		
		НастройкаЭлемента = 
			РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.НастройкаЭлементаСхемыВФорме(
				Форма, ИмяПредшественника);
			
		Если Не ЗначениеЗаполнено(НастройкаЭлемента) Тогда
			Продолжить	
		КонецЕсли;
		
		ПредшествующиеДействия[ИмяПредшественника] = НастройкаЭлемента;
		
	КонецЦикла;
	
	Возврат ПредшествующиеДействия; 
	
КонецФункции

// Нормализует настройки условий схемы в форме.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса/шаблона
//  ИменаПредметовПроцесса - Массив - имена предметов процесса, если значение не передано,
//                                    то определяется по форме. Заполнение имеет смысл,
//                                    если на момент нормализации в форме содержится не актуальные
//                                    сведения о предметах.
//    * СправочникСсылка.ИменаПредметов
//
Процедура НормализоватьНастройкиУсловийСхемыВФорме(Форма, ИменаПредметовПроцесса = Неопределено) Экспорт

	ТипыПредшествующихЭлементов = Новый Соответствие();
	ТипыПредшествующихЭлементов.Вставить(
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Действие"),
		Истина);
	
	Если ИменаПредметовПроцесса = Неопределено Тогда
		ИменаПредметовПроцесса = МультипредметностьКлиентСервер.ИменаПредметовПроцесса(Форма.Объект);
	КонецЕсли;
	
	ОчиститьНесуществующиеИменаПредметов(Форма, ИменаПредметовПроцесса);
	
	Для Каждого ЭлементСхемы Из СхемыПроцессовКлиентСервер.ВсеЭлементыСхемы(Форма) Цикл
		
		Если Не СхемыПроцессовКлиентСервер.ЭтоУсловиеСхемы(ЭлементСхемы.Значение) Тогда
			Продолжить;
		КонецЕсли;	
		
		НастройкаУсловия = НастройкаЭлементаСхемыВФорме(Форма, ЭлементСхемы.Ключ);
		
		ПредшествующиеДействия = 
			СхемыПроцессовКлиентСервер.ИменаПредшествующихЭлементовСхемыВФорме(
				ЭлементСхемы.Ключ, ТипыПредшествующихЭлементов, Форма);
		
		//@skip-warning
		НормализоватьЭлементыОтбораНастройкиУсловия(
			НастройкаУсловия.Отбор.Элементы, ПредшествующиеДействия, ИменаПредметовПроцесса);
		
		УстановитьНастройкуЭлементуСхемыВФорме(Форма, ЭлементСхемы.Ключ, НастройкаУсловия);
				
	КонецЦикла;

КонецПроцедуры

// Заменяет имя предмета в условии схемы, размещенной в форме.
// Рекурсивная процедура.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса/шаблона
//  ИсходноеИмяПредмета - СправочникСсылка.ИменаПредметов - исходное имя предмета.
//  ИмяПредмета - СправочникСсылка.ИменаПредметов - новое имя предмета.
//
Процедура ЗаменитьИмяПредметаВУсловияхСхемыВФорме(Форма, ИсходноеИмяПредмета, ИмяПредмета) Экспорт
	
	Для Каждого ЭлементСхемы Из СхемыПроцессовКлиентСервер.ВсеЭлементыСхемы(Форма) Цикл
		
		Если Не СхемыПроцессовКлиентСервер.ЭтоУсловиеСхемы(ЭлементСхемы.Значение) Тогда
			Продолжить;
		КонецЕсли;	
		
		НастройкаУсловия = НастройкаЭлементаСхемыВФорме(Форма, ЭлементСхемы.Ключ);
		
		//@skip-warning	
		ЗаменитьИмяПредметаВЭлементахОтбораНастройкиУсловия(
			НастройкаУсловия.Отбор.Элементы, ИсходноеИмяПредмета, ИмяПредмета);
		
		УстановитьНастройкуЭлементуСхемыВФорме(Форма, ЭлементСхемы.Ключ, НастройкаУсловия);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Возвращает пустую структуру настроек элементов схемы.
// 
// Возвращаемое значение:
//  Соответствие
//   * Ключ - Строка - имя элемента в схеме.
//   * Значение - ОпределяемыйТип.ШаблонДействияКомплексногоПроцесса,
//                 НастройкиКомпоновкиДанных - для условий.
//  
Функция СтруктураНастроекЭлементовСхемы() Экспорт
	
	Возврат Новый Соответствие();
	
КонецФункции

// Возвращает пустую структуру идентификаторов элементов схемы.
// 
// Возвращаемое значение:
//  Соответствие
//   * Ключ - Строка - имя элемента в схеме.
//   * Значение - УникальныйИдентификатор - идентификатор элемента.
//  
Функция СтруктураИдентификаторовЭлементовСхемы() Экспорт
	
	Возврат Новый Соответствие();
	
КонецФункции

// Возвращает пустые значения настроек для типов элементов схемы.
// 
// Возвращаемое значение:
// 	Соответствие
//   * Ключ - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
//   * Значение - Неопределено,
//                НастройкиКомпоновкиДанных,
//                СправочникСсылка.СкриптыСхемДляКомплексныхПроцессов
//
Функция ПустыеЗначенияНастроекДляТиповЭлементовСхемы() Экспорт
	
	 ПустыеЗначенияПараметров = Новый Соответствие();
	 
	 ПустыеЗначенияПараметров[
	 	ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Действие")] = 
	 	ПредопределенноеЗначение("Справочник.ШаблоныИсполнения.ПустаяСсылка");
			
	ПустыеЗначенияПараметров[
	 	ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.ВложенныйПроцесс")] = 
	 	ПредопределенноеЗначение("Справочник.ШаблоныКомплексныхБизнесПроцессов.ПустаяСсылка");
			
	 ПустыеЗначенияПараметров[
	 	ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Скрипт")] = 
	 	ПредопределенноеЗначение("Справочник.СкриптыСхемДляКомплексныхПроцессов.ПустаяСсылка");
	 
#Если Клиент Тогда
	
	ПустыеЗначенияПараметров[
	 	ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Условие")] =
	 	РаботаСКомплекснымиБизнесПроцессамиКлиентПовтИсп.ПустоеУсловиеСхемыКомплексногоПроцесса();

#Иначе
	
	ПустыеЗначенияПараметров[
	 	ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Условие")] =
	 	РаботаСКомплекснымиБизнесПроцессамиСервер.ПустоеУсловиеСхемыКомплексногоПроцесса();
			
#КонецЕсли
	  
	 Возврат ПустыеЗначенияПараметров;
	
КонецФункции

// Возвращает ссылку на настройку или процесс элемента схема.
// Используется для получения актуальных сведений по подчиненному элементу схемы.
// 
// Если элементу соответствует актуальный процесс, то он и содержит актуальные сведения
// (перечень участников, сроки и т.д.). Иначе актуальные сведения в настройке элемента.
//
// Параметры:
//   НастройкаЭлемента - ОпределяемыйТип.ШаблонДействияКомплексногоПроцесса
//   Процесс - ОпределяемыйТип.ДействиеКомплексногоПроцесса
//   Текущий - Булево
//   СостояниеПроцесса - ПеречислениеСсылка.СостоянияБизнесПроцессов
//   ПроцессыСхемыКПрерыванию - Структура - см. СтруктураПроцессовЭлементовДляПрерывания()
//
// Возвращаемое значение:
//  ОпределяемыйТип.ДействиеКомплексногоПроцесса,
//  ОпределяемыйТип.ШаблонДействияКомплексногоПроцесса
//
Функция НастройкаИлиПроцессЭлементаСхемы(
	НастройкаЭлемента, Процесс, Текущий, СостояниеПроцесса, ПроцессыСхемыКПрерыванию) Экспорт 
	
	Если Не ЗначениеЗаполнено(НастройкаЭлемента) Тогда
		// Если нет настройки, то и процесса нет, возвращает пустое значение. 
		НастройкаИлиПроцесс = Неопределено;
		
	ИначеЕсли ЗначениеЗаполнено(Процесс) Тогда
		
		// Если процесс элемента прерван или помечен к прерыванию,
		// и у элемента есть признак текущего, то считаем, что актуальные сведения находятся
		// в настройке элемента. Иначе в процессе элемента.
		Если Текущий 
			
			И (СостояниеПроцесса = ПредопределенноеЗначение("Перечисление.СостоянияБизнесПроцессов.Прерван")
			Или ПроцессыСхемыКПрерыванию.Процессы[Процесс] <> Неопределено) Тогда
			
			НастройкаИлиПроцесс = НастройкаЭлемента;
		Иначе
			НастройкаИлиПроцесс = Процесс;
		КонецЕсли;
		
	Иначе
		НастройкаИлиПроцесс = НастройкаЭлемента;
	КонецЕсли;
	
	Возврат НастройкаИлиПроцесс;
	
КонецФункции

// Возвращает настройку элемента схемы в форме.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса/шаблона
//  ИмяЭлемента - Строка
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ШаблонДействияКомплексногоПроцесса,
//	НастройкиКомпоновкиДанных - для условий.
//
Функция НастройкаЭлементаСхемыВФорме(Форма, ИмяЭлемента) Экспорт
	
	Возврат Форма.ДанныеПараметровСхемы.НастройкиЭлементов[ИмяЭлемента];
	
КонецФункции

// Возвращает идентификатор настройки элемента схемы в форме.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса/шаблона
//  ИмяЭлемента - Строка
// 
// Возвращаемое значение:
//  УникальныйИдентификатор
//
Функция ИдентификаторНастройкиЭлементаСхемыВФорме(Форма, ИмяЭлемента) Экспорт
	
	Возврат Форма.ДанныеПараметровСхемы.ИдентификаторыНастроек[ИмяЭлемента];
	
КонецФункции

// Устанавливает настройку элементу схемы.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса/шаблона
//  ИмяЭлемента - Строка
//  Настройка - ОпределяемыйТип.ШаблонДействияКомплексногоПроцесса,
//              НастройкиКомпоновкиДанных - для условий.
//
Процедура УстановитьНастройкуЭлементуСхемыВФорме(Форма, ИмяЭлемента, Настройка) Экспорт
	
	Если Форма.ДанныеПараметровСхемы.ИдентификаторыНастроек[ИмяЭлемента] = Неопределено Тогда
		Форма.ДанныеПараметровСхемы.ИдентификаторыНастроек[ИмяЭлемента] = 
			Новый УникальныйИдентификатор();
	КонецЕсли;
	
	Форма.ДанныеПараметровСхемы.НастройкиЭлементов[ИмяЭлемента] = Настройка;
	
	Форма.ДанныеПараметровСхемы.ПараметрыСхемыИзменены = Истина;
	
КонецПроцедуры

// Удаляет настройку элемента схемы в форме.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса/шаблона
//  ИмяЭлемента - Строка
//
Процедура УдалитьНастройкуЭлементаСхемыВФорме(Форма, ИмяЭлемента) Экспорт
	
	Форма.ДанныеПараметровСхемы.ИдентификаторыНастроек.Удалить(ИмяЭлемента);
	Форма.ДанныеПараметровСхемы.НастройкиЭлементов.Удалить(ИмяЭлемента);
	
	Форма.ДанныеПараметровСхемы.ПараметрыСхемыИзменены = Истина;
	
КонецПроцедуры

// Возвращает все настройки действий и вложенных процессов.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса/шаблона
// 
// Возвращаемое значение:
//  Массив
//   * ОпределяемыйТип.ШаблонДействияКомплексногоПроцесса
//  
Функция ВсеНастройкиДействийИВложенныхПроцессов(Форма) Экспорт
	
	Результат = Новый Массив;
	
	ВсеПараметрыЭлементов = 			
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ВсеПараметрыЭлементовВСхеме(Форма);
		
	Для Каждого ИмяИПараметрыЭлемента Из ВсеПараметрыЭлементов Цикл
		
		ПараметрыЭлемента = ИмяИПараметрыЭлемента.Значение;
		
		Если Не СхемыПроцессовКлиентСервер.ЭтоВложенныйПроцессСхемы(ПараметрыЭлемента.Тип)
			И Не СхемыПроцессовКлиентСервер.ЭтоДействиеСхемы(ПараметрыЭлемента.Тип) Тогда 
			
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПараметрыЭлемента.Настройка) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(ПараметрыЭлемента.Настройка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает все настройки элементов схемы в форме.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса/шаблона
// 
// Возвращаемое значение:
//  Соответствие - см. СтруктураНастроекЭлементовСхемы()
//  
Функция ВсеНастройкиЭлементовСхемыВФорме(Форма) Экспорт
	
	Возврат Форма.ДанныеПараметровСхемы.НастройкиЭлементов;
	
КонецФункции

// Обновляет настройки элементов схемы при ее изменении в форме.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса/шаблона
//  ДобавленныеЭлементы - Массив - имена добавленных элементов.
//   * Строка
//  УдаленныеЭлементы - Масссив - имена удаленных элементов.
//   * Строка
//
Процедура ОбновитьНастройкиЭлементовПоИзменениямСхемы(
	Форма, ДобавленныеЭлементы, УдаленныеЭлементы) Экспорт
	
	// Удаляем параметры для исключенных элементов.	
	Для Каждого ИмяЭлемента Из УдаленныеЭлементы Цикл
		УдалитьНастройкуЭлементаСхемыВФорме(	Форма, ИмяЭлемента);
	КонецЦикла;
	
	// Добавляем параметры для новых элементов.
	ПустыеЗначенияПараметров = 
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.
		ПустыеЗначенияНастроекДляТиповЭлементовСхемы();
		
	Для Каждого ИмяЭлемента Из ДобавленныеЭлементы Цикл
		
		ТипЭлемента = СхемыПроцессовКлиентСервер.ТипЭлементаСхемыПоДаннымСхемыВФорме(
			ИмяЭлемента, Форма);
		
		ПустоеЗначениеПараметра = ПустыеЗначенияПараметров[ТипЭлемента];
			
		Если ПустоеЗначениеПараметра  = Неопределено
			Или НастройкаЭлементаСхемыВФорме(Форма, ИмяЭлемента) <> Неопределено Тогда
		
			Продолжить;
		КонецЕсли; 

#Если Клиент Тогда
		ПустоеЗначениеПараметраДляЭлемента = 
			ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПустоеЗначениеПараметра);
#Иначе
		ПустоеЗначениеПараметраДляЭлемента = 
			ОбщегоНазначения.СкопироватьРекурсивно(ПустоеЗначениеПараметра);
#КонецЕсли
			
		УстановитьНастройкуЭлементуСхемыВФорме(
			Форма, ИмяЭлемента, ПустоеЗначениеПараметраДляЭлемента);	
		
	КонецЦикла;
	
	Если Не Форма.ДанныеПараметровСхемы.ПараметрыСхемыИзменены
		И ДобавленныеЭлементы.Количество() = 0
		И УдаленныеЭлементы.Количество() = 0 Тогда
		
		Форма.ДанныеПараметровСхемы.ПараметрыСхемыИзменены = Истина;
	КонецЕсли; 
	
	НормализоватьНастройкиУсловийСхемыВФорме(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ФормыНастроекЭлементовСхемы

// Возвращает пустую структуру форм настроек / процессов элементов схемы. 
//  
// Возвращаемое значение:
//  Соответствие
//   * Ключ - Тип - тип настройки / процесса элемента схемы.
//   * Значение - Строка - путь к форме для данного типа.
//
Функция СтруктураФормНастроекЭлементовСхемы() Экспорт
	
	Возврат Новый Соответствие();
	
КонецФункции

// Возвращает имя формы настройки / процесса элемента схемы
//
// Параметры:
//  Форма - УправляемаяФормы - карточка комплексного процесса/шаблона.
//  Настройка - ОпределяемыйТип.ШаблонДействияКомплексногоПроцесса,
//             ОпределяемыйТип.ДействиеКомплексногоПроцесса - действие или шаблон действия схемы.
//
Функция ИмяФормыНастройкиЭлементаСхемы(Форма, Настройка) Экспорт
	
	Возврат Форма.ДанныеПараметровСхемы.ФормыНастроекЭлементов[ТипЗнч(Настройка)];
		
КонецФункции

#КонецОбласти

#Область КэшДанныхДействий

// Возвращает пустую структуру данных действия в кэше.
//
// Возвращаемое значение:
//  Структура
//   * Описание - Строка - описание действия.
//   * Исполнители - Строка - описание исполнителей.
//   * СостояниеПроцесса - ПеречислениеСсылка.СостоянияБизнесПроцессов - состояние процесса (актуально только для процессов).
//   * ПроцессЗавершен - Булево - признак завершенности процесса (актуально только для процессов).
//   * СрокИсполненияПроцесса - Дата - Срок исполнения действия датой.
//   * СрокИсполненияПроцессаДни - Дата - длительность срока исполнения, кол. целых дней.
//   * СрокИсполненияПроцессаЧасы - Дата - длительность срока исполнения, кол. целых часов.
//   * СрокИсполненияПроцессаМинуты - Дата - длительность срока исполнения, кол. целых минут.
//   * ДатаЗавершения - Дата - дата завершения процесса (актуально только для процессов).
//
Функция СтруктураДанныхДействия() Экспорт
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Описание", "");
	СтруктураДанных.Вставить("Исполнители", "");
	
	СтруктураДанных.Вставить("СостояниеПроцесса", 
		ПредопределенноеЗначение("Перечисление.СостоянияБизнесПроцессов.ПустаяСсылка"));
	
	СтруктураДанных.Вставить("ПроцессЗавершен", Ложь);
	
	СтруктураДанных.Вставить("СрокИсполненияПроцесса", Дата(1,1,1));
	СтруктураДанных.Вставить("СрокИсполненияПроцессаДни", 0);
	СтруктураДанных.Вставить("СрокИсполненияПроцессаЧасы", 0);
	СтруктураДанных.Вставить("СрокИсполненияПроцессаМинуты", 0);
	
	СтруктураДанных.Вставить("ДатаЗавершения", Дата(1,1,1));
	
	Возврат СтруктураДанных;
	
КонецФункции

// Возвращает пустую структуру кэша данных действий.
// 
// Возвращаемое значение:
//  Соответствие
//   * Ключ - ОпределяемыйТип.ШаблонДействияКомплексногоПроцесса,
//            ОпределяемыйТип.ДействиеКомплексногоПроцесса
//   * Значение - Структура - см. СтруктураДанныхДействия
//
Функция СтруктураКэшаДанныхДействий() Экспорт
	
	Возврат Новый Соответствие();
	
КонецФункции

// Возвращает данные действия в форме.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса/шаблона
//  Действие - ОпределяемыйТип.ШаблонДействияКомплексногоПроцесса,
//             ОпределяемыйТип.ДействиеКомплексногоПроцесса
// 
// Возвращаемое значение:
//  Структура - см. СтруктураДанныхДействия,
//  Неопределено
//  
Функция ДанныеДействияВФорме(Форма, Действие) Экспорт
	
	ДанныеДействия = Форма.ДанныеПараметровСхемы.КэшДанныхДействий[Действие];
	
	Если ДанныеДействия = Неопределено Тогда
		ДанныеДействия = СтруктураДанныхДействия();
	КонецЕсли;
	
	Возврат ДанныеДействия;
	
КонецФункции

// Возвращает кэш данных действий в форме.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса/шаблона
// 
// Возвращаемое значение:
//  Соответствие - см. СтруктураКэшаДанныхДействий
//  
Функция КэшДанныхДействийВФорме(Форма) Экспорт
	
	Если Форма.ДанныеПараметровСхемы <> Неопределено Тогда
		Возврат Форма.ДанныеПараметровСхемы.КэшДанныхДействий;
	Иначе
		Возврат СтруктураКэшаДанныхДействий();
	КонецЕсли;
		
КонецФункции

#КонецОбласти

#Область ПредставлениеЭлементовСхемы

// Возвращает структуру параметров обновления представления схемы. 
// 
// Возвращаемое значение:
//  Структура
// * ИспользоватьВремяВСрокахЗадач - Булево
// * ПоказатьТочныеСроки - Булево
// * ПоказатьОтносительныеСроки - Булево
// * НастройкиЭлементов - Соответствие - см. СтруктураНастроекЭлементовСхемы()
// * ПроцессыЭлементов - Соответствие - см. СтруктураПроцессовЭлементов()
// * КэшДанныхДействий - Соответствие - см. СтруктураДанныхДействия
// * ТипыЭлементов - Соответствие
//   ** Ключ - Строка - имя элемента в схеме.
//   ** Значение - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
// * ПроцессыЭлементовДляПрерывания - Структура - см. СтруктураПроцессовЭлементовДляПрерывания()
// * СрокиЭлементов - Соответствие - см. СтруктураСроковЭлементовСхемы()
// * ТекущиеЭлементы - Соответствие - см. СтруктураТекущихЭлементовСхемы
// * ПройденныеЭлементы - Соответствие - см. СтруктураПройденныхЭлементовСхемы
//
Функция ПараметрыОбновленияПредставленияСхемы() Экспорт
	
	ПараметрыОбновления = Новый Структура();
	ПараметрыОбновления.Вставить("ИспользоватьВремяВСрокахЗадач", Ложь);
	ПараметрыОбновления.Вставить("ПоказатьТочныеСроки", Ложь);
	ПараметрыОбновления.Вставить("ПоказатьОтносительныеСроки", Ложь);
	ПараметрыОбновления.Вставить("НастройкиЭлементов", СтруктураНастроекЭлементовСхемы());
	ПараметрыОбновления.Вставить("ПроцессыЭлементов", СтруктураПроцессовЭлементов());
	ПараметрыОбновления.Вставить("КэшДанныхДействий", СтруктураКэшаДанныхДействий());
	ПараметрыОбновления.Вставить("ТипыЭлементов", Новый Соответствие());
	
	ПараметрыОбновления.Вставить("ПроцессыЭлементовДляПрерывания",
		СтруктураПроцессовЭлементовДляПрерывания());
	
	ПараметрыОбновления.Вставить("СрокиЭлементов", СтруктураСроковЭлементовСхемы());
	
	ПараметрыОбновления.Вставить("ТекущиеЭлементы", СтруктураТекущихЭлементовСхемы());
	ПараметрыОбновления.Вставить("ПройденныеЭлементы", СтруктураПройденныхЭлементовСхемы());
	
	Возврат ПараметрыОбновления;
		
КонецФункции

// Обновляет представление схемы для записи.
// 
// Параметры:
//  Схема - ГрафическаяСхема - Схема
//  ПараметрыОбновления - Структура - см. ПараметрыОбновленияПредставленияСхемы
//
Процедура ОбновитьПредставлениеСхемыДляЗаписи(Схема, ПараметрыОбновления) Экспорт
	
	Для Каждого ИмяЭлементаИТип Из ПараметрыОбновления.ТипыЭлементов Цикл
		
		ТипЭлемента = ИмяЭлементаИТип.Значение;
		
		Если СхемыПроцессовКлиентСервер.ЭтоДекоративнаяЛинияСхемы(ТипЭлемента)
			Или СхемыПроцессовКлиентСервер.ЭтоДекорацияСхемы(ТипЭлемента) Тогда
			
			Продолжить;
		КонецЕсли;
		
		ИмяЭлемента = ИмяЭлементаИТип.Ключ;
			
		ОписаниеВСхеме = СхемыПроцессовКлиентСервер.ОписаниеЭлементаСхемы(ИмяЭлемента, Схема);
			
		НастройкаЭлемента = ПараметрыОбновления.НастройкиЭлементов[ИмяЭлемента];
		
		ПараметрыОформления = СхемыПроцессовКлиентСервер.ПараметрыОформленияЭлементаСхемы();
		
		Если СхемыПроцессовКлиентСервер.ЭтоБлокВыполненияСхемы(ТипЭлемента) Тогда
			Если ЗначениеЗаполнено(НастройкаЭлемента) Тогда
				ПараметрыОформления.	ОписаниеЭлемента = Строка(НастройкаЭлемента);
			Иначе
			 	ПараметрыОформления.ОписаниеЭлемента = ОписаниеВСхеме;
			КонецЕсли;
		Иначе
			ПараметрыОформления.ОписаниеЭлемента = ОписаниеВСхеме;
		КонецЕсли;
			
		СхемыПроцессовКлиентСервер.УстановитьОформлениеЭлементуСхемы(
			Схема, ИмяЭлемента, ПараметрыОформления);
			
	КонецЦикла;
	
	СхемыПроцессовКлиентСервер.ОбновитьВыделениеСоединительныхЛиний(Схема);
	
КонецПроцедуры

// Обновляет представление схемы для просмотра.
// 
// Параметры:
//  Схема - ГрафическаяСхема - Схема
//  ПараметрыОбновления - Структура - см. ПараметрыОбновленияПредставленияСхемы
//
Процедура ОбновитьПредставлениеСхемыДляПросмотра(Схема, ПараметрыОбновления) Экспорт
	
	Для Каждого ИмяЭлементаИТип Из ПараметрыОбновления.ТипыЭлементов Цикл
		
		ТипЭлемента = ИмяЭлементаИТип.Значение;
		
		Если СхемыПроцессовКлиентСервер.ЭтоДекоративнаяЛинияСхемы(ТипЭлемента)
			Или СхемыПроцессовКлиентСервер.ЭтоДекорацияСхемы(ТипЭлемента) Тогда
			
			Продолжить;
		КонецЕсли;
		
		ИмяЭлемента = ИмяЭлементаИТип.Ключ;
		
		ОписаниеВСхеме = СхемыПроцессовКлиентСервер.ОписаниеЭлементаСхемы(ИмяЭлемента, Схема);
		
		Текущий = ЭлементСхемыТекущий(ПараметрыОбновления.ТекущиеЭлементы, ИмяЭлемента);
					
		НастройкаЭлемента = ПараметрыОбновления.НастройкиЭлементов[ИмяЭлемента];
		
		ПараметрыОформления = СхемыПроцессовКлиентСервер.ПараметрыОформленияЭлементаСхемы();
			
		Если СхемыПроцессовКлиентСервер.ЭтоСтартСхемы(ТипЭлемента)
			Или СхемыПроцессовКлиентСервер.ЭтоЗавершениеСхемы(ТипЭлемента)
			Или СхемыПроцессовКлиентСервер.ЭтоУсловиеСхемы(ТипЭлемента)
			Или СхемыПроцессовКлиентСервер.ЭтоРазделениеСхемы(ТипЭлемента)
			Или СхемыПроцессовКлиентСервер.ЭтоСлияниеСхемы(ТипЭлемента) Тогда
			
			ПараметрыОформления.ОписаниеЭлемента = ОписаниеВСхеме;
			
		ИначеЕсли СхемыПроцессовКлиентСервер.ЭтоСкриптСхемы(ТипЭлемента) Тогда
			
			Если ЗначениеЗаполнено(НастройкаЭлемента) Тогда
				ПараметрыОформления.ОписаниеЭлемента = Строка(НастройкаЭлемента);
			Иначе
				ПараметрыОформления.ОписаниеЭлемента = ОписаниеВСхеме;
			КонецЕсли;
			
		ИначеЕсли СхемыПроцессовКлиентСервер.ЭтоДействиеСхемы(ТипЭлемента)
			Или СхемыПроцессовКлиентСервер.ЭтоВложенныйПроцессСхемы(ТипЭлемента) Тогда
			
			Если ЗначениеЗаполнено(НастройкаЭлемента) Тогда
				
				Если ТипЗнч(НастройкаЭлемента) = Тип("СправочникСсылка.ИменаПредметов") Тогда
					
					// Установка оформления элементу в схеме.
					ПараметрыОформления.ОписаниеЭлемента = СтрШаблон(НСтр("ru = 'Обработка ""%1""'"), НастройкаЭлемента);
					ПараметрыОформления.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
					ПараметрыОформления.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
					
				Иначе	
				
					СостояниеПроцесса = Неопределено;
					ПроцессЭлемента = ПараметрыОбновления.ПроцессыЭлементов[ИмяЭлемента];
					ДанныеДействия = ПараметрыОбновления.КэшДанныхДействий[ПроцессЭлемента];
					Если ЗначениеЗаполнено(ДанныеДействия) Тогда
						СостояниеПроцесса = ДанныеДействия.СостояниеПроцесса;
					КонецЕсли;
									
					Действие = НастройкаИлиПроцессЭлементаСхемы(
						НастройкаЭлемента,
						ПроцессЭлемента,
						Текущий,
						СостояниеПроцесса,
						ПараметрыОбновления.ПроцессыЭлементовДляПрерывания);
					
					Если ПроцессЭлемента <> Действие Тогда
						ДанныеДействия = ПараметрыОбновления.КэшДанныхДействий[Действие];
					КонецЕсли;
					
					// Формирование описания элемента.	
					ОписаниеЭлемента = Новый Массив;
					
					// Описание.
					ОписаниеЭлемента.Добавить(ДанныеДействия.Описание);
					
					// Исполнители.
					Если ЗначениеЗаполнено(ДанныеДействия.Исполнители) Тогда
						ОписаниеЭлемента.Добавить(Символы.ПС);
						ОписаниеЭлемента.Добавить(Символы.ПС);
						ОписаниеЭлемента.Добавить(ДанныеДействия.Исполнители);
					КонецЕсли;
					
					// Сроки.
					
					СрокЭлемента = ПараметрыОбновления.СрокиЭлементов[ИмяЭлемента];
										
					СрокИсполненияДействия = Дата(1,1,1);
							
					Если СрокЭлемента <> Неопределено 
						И (ПараметрыОбновления.ПоказатьТочныеСроки
						Или ПараметрыОбновления.ПоказатьОтносительныеСроки) Тогда
						
						СтруктураСроков = Новый Структура;
						СтруктураСроков.Вставить("СрокИсполненияПроцесса", Дата(1,1,1));
						СтруктураСроков.Вставить("СрокИсполненияПроцессаДни", 0);
						СтруктураСроков.Вставить("СрокИсполненияПроцессаЧасы", 0);
						СтруктураСроков.Вставить("СрокИсполненияПроцессаМинуты", 0);
						СтруктураСроков.Вставить("СрокИсполненияПроцессаПредставление", "");
						
						ИсключенныеСвойства = "";
						
						Если Не ПараметрыОбновления.ПоказатьТочныеСроки Тогда
							ИсключенныеСвойства = "СрокИсполненияПроцесса";
						КонецЕсли;
						
						Если Не ПараметрыОбновления.ПоказатьОтносительныеСроки Тогда
							ИсключенныеСвойства = ИсключенныеСвойства
								+ "СрокИсполненияПроцессаДни,
								  |СрокИсполненияПроцессаЧасы,
								  |СрокИсполненияПроцессаМинуты";
						КонецЕсли;
						
						ЗаполнитьЗначенияСвойств(СтруктураСроков, СрокЭлемента,, ИсключенныеСвойства);
						
						Если ЗначениеЗаполнено(СтруктураСроков.СрокИсполненияПроцесса)
							Или ЗначениеЗаполнено(СтруктураСроков.СрокИсполненияПроцессаДни)
							Или ЗначениеЗаполнено(СтруктураСроков.СрокИсполненияПроцессаЧасы)
							Или ЗначениеЗаполнено(СтруктураСроков.СрокИсполненияПроцессаМинуты) Тогда
						
							СрокиИсполненияПроцессовКлиентСервер.
								ЗаполнитьПредставлениеСрокаИсполненияПроцесса(
								СтруктураСроков.СрокИсполненияПроцессаПредставление,
								СтруктураСроков.СрокИсполненияПроцесса,
								СтруктураСроков.СрокИсполненияПроцессаДни,
								СтруктураСроков.СрокИсполненияПроцессаЧасы,
								СтруктураСроков.СрокИсполненияПроцессаМинуты,
								ПараметрыОбновления.ИспользоватьВремяВСрокахЗадач);
							
							ОписаниеЭлемента.Добавить(Символы.ПС);
							ОписаниеЭлемента.Добавить(Символы.ПС);
							ОписаниеЭлемента.Добавить(
								СтрШаблон(НСтр("ru = 'Срок: %1'"),
								СтруктураСроков.СрокИсполненияПроцессаПредставление));
							
						КонецЕсли;
						
						СрокИсполненияДействия = СтруктураСроков.СрокИсполненияПроцесса;
						
					КонецЕсли;
					
					// Определение цвета рамки		
					СрокИсполненияДействияИстек = Ложь;
					СрокиИсполненияПроцессовКлиентСерверКОРП.ОбновитьПризнакИстекшегоСрокаПроцесса(
						СрокИсполненияДействия,
						ДанныеДействия.ДатаЗавершения,
						СрокИсполненияДействияИстек);
					
					Если СрокИсполненияДействияИстек Тогда
						ЦветРамки = СхемыПроцессовКлиентСервер.ПросроченныеДанныеЦвет(); 
					Иначе
						ЦветРамки = СхемыПроцессовКлиентСервер.ЦветРамки();
					КонецЕсли;
								
					// Установка оформления элементу в схеме.
					ПараметрыОформления.ОписаниеЭлемента = СтрСоединить(ОписаниеЭлемента, "");
					ПараметрыОформления.ЦветРамки = ЦветРамки;
					ПараметрыОформления.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
					ПараметрыОформления.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
					
				КонецЕсли;	
				
			Иначе
				ПараметрыОформления.ОписаниеЭлемента = ОписаниеВСхеме;
			КонецЕсли;
						
		КонецЕсли;
				
		Если Текущий Тогда
			ПараметрыОформления.Рамка = СхемыПроцессовКлиентСервер.ЛинияРамкиТекущегоЭлемента();
		ИначеЕсли ЭлементСхемыПройден(ПараметрыОбновления.ПройденныеЭлементы, ИмяЭлемента) Тогда
			ПараметрыОформления.Рамка = СхемыПроцессовКлиентСервер.ЛинияРамкиПройденногоЭлемента();
		КонецЕсли;		
			
		СхемыПроцессовКлиентСервер.УстановитьОформлениеЭлементуСхемы(
			Схема, ИмяЭлемента, ПараметрыОформления);
			
	КонецЦикла;
	
	СхемыПроцессовКлиентСервер.ОбновитьВыделениеСоединительныхЛиний(Схема);
	
КонецПроцедуры

// Обновляет представление элементов в графической схеме комплексного процесса, в его форме.
// 
// Параметры:
//  Форма - УправляемаяФормы - карточка комплексного процесса/шаблона.
//  ДляЗаписи - Булево - указывает на обновление представления для последующей записи. 
//
Процедура ОбновитьПредставлениеСхемыВФорме(Форма, ДляЗаписи = Ложь) Экспорт
	
	ПараметрыОбновления = ПараметрыОбновленияПредставленияСхемы();
	ПараметрыОбновления.ИспользоватьВремяВСрокахЗадач = Форма.ИспользоватьВремяВСрокахЗадач;
	
	ПараметрыОбновления.ПоказатьТочныеСроки = 
		СрокиИсполненияПроцессовКлиентСерверКОРП.ПоказатьТочныеСрокиВКомплексномПроцессе(Форма);
	
	ПараметрыОбновления.ПоказатьОтносительныеСроки = 
		СрокиИсполненияПроцессовКлиентСерверКОРП.ПоказатьОтносительныеСрокиВКомплексномПроцессе(
		Форма);
	
	ПоляЗаполнения = "НастройкиЭлементов, ПроцессыЭлементов,
		|КэшДанныхДействий, ПроцессыЭлементовДляПрерывания";
	ЗаполнитьЗначенияСвойств(ПараметрыОбновления, Форма.ДанныеПараметровСхемы, ПоляЗаполнения);
	
	ПараметрыОбновления.ТипыЭлементов = 
		СхемыПроцессовКлиентСервер.ТипыВсехЭлементовПоДаннымСхемыВФорме(Форма);
	
	ПараметрыОбновления.СрокиЭлементов = СрокиЭлементовСхемыВФорме(Форма);
	
	ПараметрыОбновления.ТекущиеЭлементы = Форма.ДанныеПараметровСхемы.ТекущиеЭлементы;
	
	ПараметрыОбновления.ПройденныеЭлементы = Форма.ДанныеПараметровСхемы.ПройденныеЭлементы;
	
	Если ДляЗаписи Тогда
		ОбновитьПредставлениеСхемыДляЗаписи(
			СхемыПроцессовКлиентСервер.ГрафическаяСхемаВФорме(Форма),
			ПараметрыОбновления);
	Иначе
		ОбновитьПредставлениеСхемыДляПросмотра(
			СхемыПроцессовКлиентСервер.ГрафическаяСхемаВФорме(Форма),
			ПараметрыОбновления);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СрокиЭлементовСхемы

// Возвращает пустую структуру сроков элемента схемы.
// 
// Возвращаемое значение:
//  Структура
//   * СрокИсполненияПроцессаПредставление - Строка
//   * СрокИсполненияПроцесса - Дата
//   * СрокИсполненияПроцессаДни - Число
//   * СрокИсполненияПроцессаЧасы - Число
//   * СрокИсполненияПроцессаМинуты - Число
//
Функция СтруктураСроковЭлементаСхемы() Экспорт
	
	СтруктураСроков = Новый Структура;
	
	СтруктураСроков.Вставить("СрокИсполненияПроцессаПредставление", "");
	
	СтруктураСроков.Вставить("СрокИсполненияПроцесса", Дата(1,1,1));
	СтруктураСроков.Вставить("СрокИсполненияПроцессаДни", 0);
	СтруктураСроков.Вставить("СрокИсполненияПроцессаЧасы", 0);
	СтруктураСроков.Вставить("СрокИсполненияПроцессаМинуты", 0);
	
	Возврат СтруктураСроков;
	
КонецФункции

// Возвращает пустую структуру сроков элементов в схемы.
// 
// Возвращаемое значение:
//  Соответствие
//   * Ключ - Строка - имя элемента в схеме.
//   * Значение - Структура - см. СтруктураСроковЭлементаСхемы
//
Функция СтруктураСроковЭлементовСхемы() Экспорт
	
	Возврат Новый Соответствие();
	
КонецФункции

// Возвращает срок исполнения элемента.
// 
// Параметры:
//  СрокиЭлементов - Соответствие - см. СтруктураСроковЭлементовСхемы
//  ИмяЭлемента - Строка - имя элемента в схеме. 
// 
// Возвращаемое значение:
//  Структура - см. СтруктураСроковЭлементаСхемы
//  
Функция СрокИсполненияЭлемента(СрокиЭлементов, ИмяЭлемента) Экспорт
	
	СрокИсполнения = СрокиЭлементов[ИмяЭлемента];
	Если СрокИсполнения = Неопределено Тогда
		СрокИсполнения = СтруктураСроковЭлементаСхемы();
	КонецЕсли;
	
	Возврат СрокИсполнения;
	
КонецФункции

// Устанавливает срок исполнения элементу.
// 
// Параметры:
//  СрокиЭлементов - Соответствие - см. СтруктураСроковЭлементовСхемы
//   ИмяЭлемента - Строка - имя элемента в схеме. 
//  СрокИсполненияЭлемента - Структура - см. СтруктураСроковЭлементаСхемы
//  
Процедура УстановитьСрокИсполненияЭлементу(СрокиЭлементов, ИмяЭлемента, СрокИсполненияЭлемента) Экспорт
	
	СрокиЭлементов[ИмяЭлемента] = СрокИсполненияЭлемента;
	
КонецПроцедуры

// Заполняет сроки элементов схемы.  
// 
// Параметры:
//  СрокиЭлементовСхемы - Соответствие - см. СтруктураСроковЭлементовСхемы()
//  НастройкиЭлементов - Соответствие - см. СтруктураНастроекЭлементовСхемы()   
//  ПроцессыЭлементов - Соответствие - см. СтруктураПроцессовЭлементов()
//  КэшДанныхДействий - Соответствие - см. СтруктураКэшаДанныхДействий()
//  ПроцессыСхемыКПрерыванию - Структура - см. СтруктураПроцессовЭлементовДляПрерывания() 
//  ТекущиеЭлементы - Соответствие - см. СтруктураТекущихЭлементовСхемы()
//
Процедура ЗаполнитьСрокиЭлементовСхемы(СрокиЭлементовСхемы, НастройкиЭлементов, ПроцессыЭлементов,
	КэшДанныхДействий, ПроцессыСхемыКПрерыванию, ТекущиеЭлементы) Экспорт
	
	Для Каждого НастройкаЭлемента Из НастройкиЭлементов Цикл
		
		ИмяЭлемента = НастройкаЭлемента.Ключ;
		Настройка = НастройкаЭлемента.Значение;
				
		Если ТипЗнч(Настройка) = Тип("НастройкиКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Настройка) Тогда
			Продолжить;
		КонецЕсли;
		
		Если КэшДанныхДействий[Настройка] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПроцессЭлемента = ПроцессыЭлементов[ИмяЭлемента];
		ДанныеПроцесса = КэшДанныхДействий[ПроцессЭлемента];
		СостояниеПроцесса = 
			ПредопределенноеЗначение("Перечисление.СостоянияБизнесПроцессов.ПустаяСсылка");
		Если ЗначениеЗаполнено(ДанныеПроцесса) Тогда
			СостояниеПроцесса = ДанныеПроцесса.СостояниеПроцесса;
		КонецЕсли;
		
		Текущий = ЭлементСхемыТекущий(ТекущиеЭлементы, ИмяЭлемента);
		
		ОбъектСоСроками = НастройкаИлиПроцессЭлементаСхемы(
			Настройка, ПроцессЭлемента, Текущий, СостояниеПроцесса, ПроцессыСхемыКПрерыванию);
		
		ДанныеОбъектаСоСроками = КэшДанныхДействий[ОбъектСоСроками];
		Если Не ЗначениеЗаполнено(ДанныеОбъектаСоСроками) Тогда
			Продолжить;
		КонецЕсли;
		
		СрокиДействия = СтруктураСроковЭлементаСхемы();
		ЗаполнитьЗначенияСвойств(СрокиДействия, ДанныеОбъектаСоСроками);
		
		УстановитьСрокИсполненияЭлементу(СрокиЭлементовСхемы, ИмяЭлемента, СрокиДействия);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет сроки элементов схемы в карточке процесса/шаблона.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса/шаблона
//
Процедура ЗаполнитьСрокиЭлементовСхемыВФорме(Форма) Экспорт
	
	Форма.ДанныеПараметровСхемы.СрокиЭлементов.Очистить();
	
	ЗаполнитьСрокиЭлементовСхемы(
		Форма.ДанныеПараметровСхемы.СрокиЭлементов,
		Форма.ДанныеПараметровСхемы.НастройкиЭлементов,
		Форма.ДанныеПараметровСхемы.ПроцессыЭлементов,
		Форма.ДанныеПараметровСхемы.КэшДанныхДействий,
		ПроцессыЭлементовДляПрерывания(Форма),
		Форма.ДанныеПараметровСхемы.ТекущиеЭлементы);
	
КонецПроцедуры

// Возвращает сроки элементов схемы в карточке процесса/шаблона.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса/шаблона
// 
// Возвращаемое значение:
//  Соответствие - см. СтруктураСроковЭлементовСхемы
//  
Функция СрокиЭлементовСхемыВФорме(Форма) Экспорт
	
	Если Форма.ДанныеПараметровСхемы <> Неопределено Тогда
		Возврат Форма.ДанныеПараметровСхемы.СрокиЭлементов;
	Иначе
		Возврат СтруктураСроковЭлементовСхемы();
	КонецЕсли;
		
КонецФункции

#КонецОбласти

#Область ТекущиеЭлементыСхемы

// Возвращает пустую структуру текущих элементов схемы.
// 
// Возвращаемое значение:
//  Соответствие
//   * Ключ - Строка - имя элемента, являющегося текущим.
//   * Значение - Булево - всегда Истина. 
//
Функция СтруктураТекущихЭлементовСхемы() Экспорт
	
	Возврат Новый Соответствие;
	
КонецФункции

// Отметить элемент схемы текущим в переданном параметре ТекущиеЭлементы.
// 
// Параметры:
//  ТекущиеЭлементы - Соответствие - см. СтруктураТекущихЭлементовСхемы
//  ИмяЭлемента - Строка - имя элемента в схеме.
//
Процедура ОтметитьЭлементСхемыТекущим(ТекущиеЭлементы, ИмяЭлемента) Экспорт
	
	ТекущиеЭлементы[ИмяЭлемента] = Истина;
	
КонецПроцедуры

// Удалить отметку текущего с элемента схемы в ТекущиеЭлементы.  
// 
// Параметры:
//  ТекущиеЭлементы - Соответствие - см. СтруктураТекущихЭлементовСхемы
//  ИмяЭлемента - Строка - имя элемента в схеме.
//
Процедура УдалитьОтметкуТекущегоСЭлемента(ТекущиеЭлементы, ИмяЭлемента) Экспорт
	
	ТекущиеЭлементы.Удалить(ИмяЭлемента);
	
КонецПроцедуры

// Возвращает отметку текущего элемента.
// 
// Параметры:
//  ТекущиеЭлементы - Соответствие - см. СтруктураТекущихЭлементовСхемы
//  ИмяЭлемента - Строка - Имя элемента.
// 
// Возвращаемое значение:
//  Булево
//  
Функция ЭлементСхемыТекущий(ТекущиеЭлементы, ИмяЭлемента) Экспорт
		
	Если ТекущиеЭлементы[ИмяЭлемента] = Истина Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает отметку текущего элемента в форме процесса.
// 
// Параметры:
//  Форма - УправляемаяФормы - карточка комплексного процесса.
// 
// Возвращаемое значение:
//  Булево
//  
Функция ОтметкаТекущийДляЭлементаСхемыВФорме(ИмяЭлемента, Форма) Экспорт
	
	Если ТипЗнч(Форма.Объект.Ссылка) <> Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЭлементСхемыТекущий(Форма.ДанныеПараметровСхемы.ТекущиеЭлементы, ИмяЭлемента);
		
КонецФункции

// Обновляет отметки текущих элементов схемы при ее изменении в форме.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса
//  ДобавленныеЭлементы - Массив - имена добавленных элементов.
//   * Строка
//  УдаленныеЭлементы - Масссив - имена удаленных элементов.
//   * Строка
//
Процедура ОбновитьОтметкиТекущихЭлементовПоИзменениямСхемы(
	Форма, ДобавленныеЭлементы, УдаленныеЭлементы) Экспорт
	
	Если ТипЗнч(Форма.Объект.Ссылка) <> Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		Возврат;
	КонецЕсли;
	
	// Новые элементы старта отмечаем текущими.
	Для Каждого ИмяЭлемента Из ДобавленныеЭлементы Цикл
		
		ТипЭлемента = СхемыПроцессовКлиентСервер.ТипЭлементаСхемыПоДаннымСхемыВФорме(
			ИмяЭлемента, Форма);
			
		Если СхемыПроцессовКлиентСервер.ЭтоСтартСхемы(ТипЭлемента) Тогда
			ОтметитьЭлементСхемыТекущим(Форма.ДанныеПараметровСхемы.ТекущиеЭлементы, ИмяЭлемента);
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаленные элементы исключаем из текущих.
	Для Каждого ИмяЭлемента Из УдаленныеЭлементы Цикл
		УдалитьОтметкуТекущегоСЭлемента(Форма.ДанныеПараметровСхемы.ТекущиеЭлементы, ИмяЭлемента);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает текущие элементы схемы.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса/шаблона
// 
// Возвращаемое значение:
//  Соответствие - см. СтруктураТекущихЭлементовСхемы
//  
Функция ТекущиеЭлементыСхемыФорме(Форма) Экспорт
	
	Если Форма.ДанныеПараметровСхемы <> Неопределено Тогда
		Возврат Форма.ДанныеПараметровСхемы.ТекущиеЭлементы;
	Иначе
		Возврат СтруктураТекущихЭлементовСхемы();
	КонецЕсли;	
	
КонецФункции

#КонецОбласти

#Область ПройденныеЭлементыСхемы

// Возвращает структуру пройденных элементов схемы.
// 
// Возвращаемое значение:
//  Соответствие
//   * Ключ - Строка - имя элемента в схеме.
//   * Значение - Булево - всегда Истина.
//
Функция СтруктураПройденныхЭлементовСхемы() Экспорт
	
	Возврат Новый Соответствие();
	
КонецФункции

// Отметить элемент схемы пройденным в переданном параметре ПройденныеЭлементы.
// 
// Параметры:
//  ПройденныеЭлементы - Соответствие - см. СтруктураПройденныхЭлементовСхемы
//  ИмяЭлемента - Строка - имя элемента в схеме.
//
Процедура ОтметитьЭлементСхемыПройденным(ПройденныеЭлементы, ИмяЭлемента) Экспорт
	
	ПройденныеЭлементы[ИмяЭлемента] = Истина;
	
КонецПроцедуры

// Удалить отметку Пройден с элемента схемы в ТекущиеЭлементы.  
// 
// Параметры:
//  ТекущиеЭлементы - Соответствие - см. СтруктураПройденныхЭлементовСхемы
//  ИмяЭлемента - Строка - имя элемента в схеме.
//
Процедура УдалитьОтметкуПройденСЭлемента(ПройденныеЭлементы, ИмяЭлемента) Экспорт
	
	ПройденныеЭлементы.Удалить(ИмяЭлемента);
	
КонецПроцедуры

// Возвращает признак пройденного элемента схемы.
// 
// Параметры:
//  ПройденныеЭлементы - Соответствие - см. СтруктураПройденныхЭлементовСхемы()
//  ИмяЭлемента - Строка - имя элемента схемы.
// 
// Возвращаемое значение:
//  Булево
//
Функция ЭлементСхемыПройден(ПройденныеЭлементы, ИмяЭлемента) Экспорт
	
	Если ПройденныеЭлементы[ИмяЭлемента] = Истина Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает отметку Пройден для элемента схемы в форме процесса.
// 
// Параметры:
//  ИмяЭлемента - Строка - имя элемента схемы.
//  Форма - УправляемаяФормы - карточка комплексного процесса.
// 
// Возвращаемое значение:
//  Булево
//  
Функция ОтметкаПройденДляЭлементаСхемыВФорме(ИмяЭлемента, Форма) Экспорт
	
	Если ТипЗнч(Форма.Объект.Ссылка) <> Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЭлементСхемыПройден(Форма.ДанныеПараметровСхемы.ПройденныеЭлементы, ИмяЭлемента);
			
КонецФункции

// Обновляет отметки пройденных элементов схемы при ее изменении в форме.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса
//  ДобавленныеЭлементы - Массив - имена добавленных элементов.
//   * Строка
//  УдаленныеЭлементы - Масссив - имена удаленных элементов.
//   * Строка
//
Процедура ОбновитьОтметкиПройденныхЭлементовПоИзменениямСхемы(
	Форма, ДобавленныеЭлементы, УдаленныеЭлементы) Экспорт
		
	Если ТипЗнч(Форма.Объект.Ссылка) <> Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		Возврат;
	КонецЕсли;
	
	// Удаленные элементы исключаем из пройденных.
	Для Каждого ИмяЭлемента Из УдаленныеЭлементы Цикл
		УдалитьОтметкуПройденСЭлемента(Форма.ДанныеПараметровСхемы.ПройденныеЭлементы, ИмяЭлемента);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает текущие элементы схемы.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса
// 
// Возвращаемое значение:
//  Соответствие - см. СтруктураПройденныхЭлементовСхемы
//  
Функция ПройденныеЭлементыСхемыФорме(Форма) Экспорт
	
	Если Форма.ДанныеПараметровСхемы <> Неопределено Тогда
		Возврат Форма.ДанныеПараметровСхемы.ПройденныеЭлементы;
	Иначе
		Возврат СтруктураПройденныхЭлементовСхемы();
	КонецЕсли;
		
КонецФункции

#КонецОбласти

#Область ПроцессыЭлементовСхемы

// Возвращает пустую структуру процессов элементов схемы.
// 
// Возвращаемое значение:
//  Соответствие
//   * Ключ - Строка - имя элемента в схеме.
//   * Значение - ОпределяемыйТип.ДействиеКомплексногоПроцесса
//
Функция СтруктураПроцессовЭлементов() Экспорт
	
	Возврат Новый Соответствие();
	
КонецФункции

// Удалить процесса элемента из ПроцессыЭлементов.  
// 
// Параметры:
//  ПроцессыЭлементов - Соответствие - см. СтруктураПроцессовЭлементов
//  ИмяЭлемента - Строка - имя элемента в схеме.
//
Процедура ИсключитьПроцессЭлемента(ПроцессыЭлементов, ИмяЭлемента) Экспорт
	
	ПроцессыЭлементов.Удалить(ИмяЭлемента);
	
КонецПроцедуры

// Возвращает процесс элемента схемы в форме.
// 
// Параметры:
//  ИмяЭлемента Строка - имя элемента в схеме.
//  Форма - УправляемаяФормы - карточка комплексного процесса.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ДействиеКомплексногоПроцесса, Неопределено
//  
Функция ПроцессЭлементаСхемыВФорме(ИмяЭлемента, Форма) Экспорт
	
	Если ТипЗнч(Форма.Объект.Ссылка) <> Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Форма.ДанныеПараметровСхемы.ПроцессыЭлементов[ИмяЭлемента];
	
КонецФункции

// Проверяет является ли процесс по элементу схемы в форме.
// 
// Параметры:
//  Процесс - ОпределяемыйТип.ДействиеКомплексногоПроцесса
//  Форма - УправляемаяФормы - карточка комплексного процесса.
// 
// Возвращаемое значение:
//  Булево
//
Функция ЭтоПроцессЭлементаСхемы(Процесс, Форма) Экспорт
	
	Если ТипЗнч(Форма.Объект.Ссылка) <> Тип("БизнесПроцессСсылка.КомплексныйПроцесс")
		Или Не ЭтоФормаПроцессаСоСхемой(Форма) Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ИмяЭлементаИПроцесс Из Форма.ДанныеПараметровСхемы.ПроцессыЭлементов Цикл
		Если ИмяЭлементаИПроцесс.Значение = Процесс Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Обновляет список процессов элементов схемы.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса
//  ДобавленныеЭлементы - Массив - имена добавленных элементов.
//   * Строка
//  УдаленныеЭлементы - Масссив - имена удаленных элементов.
//   * Строка
//
Процедура ОбновитьСписокПроцессовЭлементовСхемы(
	Форма, ДобавленныеЭлементы, УдаленныеЭлементы) Экспорт
	
	Если ТипЗнч(Форма.Объект.Ссылка) <> Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		Возврат;
	КонецЕсли;
	
	// Удаленные элементы исключаем из списка процессов.
	Для Каждого ИмяЭлемента Из УдаленныеЭлементы Цикл
		ИсключитьПроцессЭлемента(Форма.ДанныеПараметровСхемы.ПроцессыЭлементов, ИмяЭлемента);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает процессы элементов схемы.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса/шаблона
// 
// Возвращаемое значение:
//  Соответствие - см. СтруктураПроцессовЭлементов
//  
Функция ПроцессыЭлементовФорме(Форма) Экспорт
	
	Если Форма.ДанныеПараметровСхемы <> Неопределено Тогда
		Возврат Форма.ДанныеПараметровСхемы.ПроцессыЭлементов;
	Иначе
		Возврат СтруктураПроцессовЭлементов();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПроцессыЭлементовДляПрерывания

// Возвращает пустую структуру процессов элементов для прерывания.
//
// Возвращаемое значение:
//  Структура
//   * ПричинаПрерывания - Строка
//   * Процессы -  Соответствие - процессы элементов помеченные к прерыванию.
//     ** Ключ - ОпределяемыйТип.ДействиеКомплексногоПроцесса - процесс элемента.
//     ** Значение - Булево - всегда Истина.
//
Функция СтруктураПроцессовЭлементовДляПрерывания() Экспорт
	
	ПроцессыДляПрерывания = Новый Структура;
	ПроцессыДляПрерывания.Вставить("ПричинаПрерывания", "");
	ПроцессыДляПрерывания.Вставить("Процессы", Новый Соответствие);
	
	Возврат ПроцессыДляПрерывания;
	
КонецФункции

// Отмечает процесс элемента к прерыванию.
// 
// Параметры:
//  ПроцессыДляПрерывания - Структура - см. СтруктураПроцессовЭлементовДляПрерывания
//  Процесс - ОпределяемыйТип.ДействиеКомплексногоПроцесса - процесс элемента.
//
Процедура ОтметитьПроцессЭлементаКПрерыванию(ПроцессыДляПрерывания, Процесс) Экспорт
	
	ПроцессыДляПрерывания.Процессы[Процесс] = Истина;
	
КонецПроцедуры

// Удалить отметку прерванного с процесса элемента схемы.  
// 
// Параметры:
//  ПроцессыДляПрерывания - Структура - см. СтруктураПроцессовЭлементовДляПрерывания
//  Процесс - ОпределяемыйТип.ДействиеКомплексногоПроцесса - процесс элемента.
//
Процедура УдалитьОтметкуПрерыванияСПроцессаЭлдемента(ПроцессыДляПрерывания, Процесс) Экспорт
	
	ПроцессыДляПрерывания.Процессы.Удалить(Процесс);
	
КонецПроцедуры

// Возвращает отметку текущего элемента.
// 
// Параметры:
//  ТекущиеЭлементы - Соответствие - см. СтруктураТекущихЭлементовСхемы
//  ИмяЭлемента - Строка - Имя элемента.
// 
// Возвращаемое значение:
//  Булево
//  
Функция ПроцессЭлементаОтмеченКПрерыванию(ПроцессыДляПрерывания, ИмяЭлемента) Экспорт
		
	Если ПроцессыДляПрерывания.Процессы[ИмяЭлемента] = Истина Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Устанавливает в структуру ПроцессыДляПрерывания причину прерывания.
// 
// Параметры:
//  ПроцессыДляПрерывания - Структура - см. СтруктураПроцессовЭлементовДляПрерывания
//  Причина - Строка
//
Процедура УстановитьПричинуПрерыванияПроцессовЭлементов(ПроцессыДляПрерывания, Причина) Экспорт
	
	ПроцессыДляПрерывания.ПричинаПрерывания = Причина;
	
КонецПроцедуры

// Возвращает процессы элементов схемы для прерывания.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса/шаблона
// 
// Возвращаемое значение:
//  Структура - см. СтруктураПроцессовЭлементовДляПрерывания
//  
Функция ПроцессыЭлементовДляПрерывания(Форма) Экспорт
	
	Если Форма.ДанныеПараметровСхемы <> Неопределено Тогда
		Возврат Форма.ДанныеПараметровСхемы.ПроцессыЭлементовДляПрерывания;
	Иначе
		Возврат СтруктураПроцессовЭлементовДляПрерывания();
	КонецЕсли;
		
КонецФункции

// Возвращает признак пометки процесса к прерыванию.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса/шаблона
//  Процесс - ОпределяемыйТип.ДействиеКомплексногоПроцесса
// 
// Возвращаемое значение:
//  Булево
//  
Функция ПроцессЭлементаОтмеченКПрерываниюВФорме(Форма, Процесс) Экспорт
	
	Если ТипЗнч(Форма.Объект.Ссылка) <> Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПроцессЭлементаОтмеченКПрерыванию(
		Форма.ДанныеПараметровСхемы.ПроцессыЭлементовДляПрерывания, Процесс);
	
КонецФункции

// Отмечает процессы удаленных элементов к прерыванию в карточке комплексного процесса.
// В качестве результата возвращает отмеченные процессы.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса/шаблона
//  УдаленныеЭлементы - Массив - имена удаленных элементов.
//   * Строка
// 
// Возвращаемое значение:
//  Массив
//   * ОпределяемыйТип.ДействиеКомплексногоПроцесса
//
Функция ОтметитьПроцессыУдаленныхЭлементовКПрерываниюВФорме(Форма, УдаленныеЭлементы) Экспорт
	
	Если ТипЗнч(Форма.Объект.Ссылка) <> Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ОтмеченныеПроцессы = Новый Массив;
	
	ПроцессыДляПрерывания = Форма.ДанныеПараметровСхемы.ПроцессыЭлементовДляПрерывания;
	
	Для Каждого УдаленныйЭлемент Из УдаленныеЭлементы Цикл
		
		ПроцессЭлемента = ПроцессЭлементаСхемыВФорме(УдаленныйЭлемент, Форма);
		Если Не ЗначениеЗаполнено(ПроцессЭлемента) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПроцессЭлементаОтмеченКПрерыванию(ПроцессыДляПрерывания, ПроцессЭлемента) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеПроцесса = ДанныеДействияВФорме(Форма, ПроцессЭлемента);
		Если ДанныеПроцесса.ПроцессЗавершен Тогда
			Продолжить;
		КонецЕсли;
		
		ОтметитьПроцессЭлементаКПрерыванию(ПроцессыДляПрерывания, ПроцессЭлемента);
		
		ОтмеченныеПроцессы.Добавить(ПроцессЭлемента);
		
	КонецЦикла;
	
	Возврат ОтмеченныеПроцессы;
	
КонецФункции

// Сбрасывает пометки прервания для всех процессов элементов схемы.
//  
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса/шаблона
//
Процедура СброситьПометкиПрерыванияДляВсехПроцессовЭлементов(Форма) Экспорт
	
	Если ТипЗнч(Форма.Объект.Ссылка) <> Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ДанныеПараметровСхемы.ПроцессыЭлементовДляПрерывания.ПричинаПрерывания = "";
	Форма.ДанныеПараметровСхемы.ПроцессыЭлементовДляПрерывания.Процессы.Очистить();
	
КонецПроцедуры

#КонецОбласти

// Возвращает пустую структуру данных параметров схемы для комплексного процесса. 
// 
// Возвращаемое значение:
// 	Структура:
//   * Схема - СправочникСсылка.СхемыПроцессов
//   * ВладелецСхемы - СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов,
//                     БизнесПроцессСсылка.КомплексныйПроцесс
//   * ОбъектДоступа - СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов,
//                     БизнесПроцессСсылка.КомплексныйПроцесс
//   * ВерсияДанных - Строка - версия данных параметров схемы.
//   * НастройкиЭлементов - Соответствие -
//   	см. РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураНастроекЭлементовСхемы
//   * ИдентификаторыНастроек - Соответствие
//      см. РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураИдентификаторовЭлементовСхемы
//   * ПорядокСортировкиНастроекЭлементов - Соответствие
//     ** Ключ - Строка - имя элемента с настройкой в схеме.
//     ** Значение - Число - порядок
//   * ПометкаУдаления - Булево - признак пометки удаления.
//
Функция СтруктураДанныхПараметровСхемы() Экспорт
	
	СтруктураСхемы = Новый Структура;
	СтруктураСхемы.Вставить("Схема", ПредопределенноеЗначение("Справочник.СхемыПроцессов.ПустаяСсылка")); 
	СтруктураСхемы.Вставить("ВладелецСхемы", Неопределено);
	СтруктураСхемы.Вставить("ОбъектДоступа", Неопределено);
	СтруктураСхемы.Вставить("ВерсияДанных", "");
	
	СтруктураСхемы.Вставить("НастройкиЭлементов", СтруктураНастроекЭлементовСхемы());
	
	СтруктураСхемы.Вставить("ИдентификаторыНастроек", СтруктураИдентификаторовЭлементовСхемы());
	
	СтруктураСхемы.Вставить("ПорядокСортировкиНастроекЭлементов", Новый Соответствие());
	
	СтруктураСхемы.Вставить("ИсточникДанных", Неопределено);
	
	СтруктураСхемы.Вставить("ПометкаУдаления", Ложь);
	
	Возврат СтруктураСхемы;
	
КонецФункции

// Возвращает пустую структуру данных параметров схемы для комплексного процесса в форме. 
// 
// Возвращаемое значение:
//  Структура
//   * Ссылка - СправочникСсылка.ПараметрыСхемДляКомплексныхПроцессов - ссылка на параметры.
//   * Схема - СправочникСсылка.СхемыПроцессов
//   * ВладелецСхемы - СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов,
//                     БизнесПроцессСсылка.КомплексныйПроцесс
//   * ОбъектДоступа - СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов,
//                     БизнесПроцессСсылка.КомплексныйПроцесс
//   * ВерсияДанных - Строка - версия объекта схемы процесса. 
//   * НастройкиЭлементов - Соответствие - см. СтруктураНастроекЭлементовСхемы()
//   * ИдентификаторыНастроек - Соответствие см. СтруктураИдентификаторовЭлементовСхемы()
//   * ПараметрыСхемыИзменены - Булево - признак изменения параметров схемы.
//   * ФормыНастроекЭлементов - Соответствие - см. СтруктураФормНастроекЭлементовСхемы()
//   * ПроцессыЭлементов - Соответствие - см. СтруктураПроцессовЭлементов()      
//   * КэшДанныхДействий - Соответствие - см. СтруктураКэшаДанныхДействий()
//   * ПроцессыЭлементовДляПрерывания - Структура - см. СтруктураПроцессовЭлементовДляПрерывания()
//   * ТекущиеЭлементы - Соответствие - см. СтруктураТекущихЭлементовСхемы()
//   * ПройденныеЭлементы - Соответствие - см. СтруктураПройденныхЭлементов()
//   * ПометкаУдаления - Булево - признак пометки удаления.
//
Функция СтруктураДанныхПараметровСхемыВФорме() Экспорт
	
	СтруктураДанныхВФорме = Новый Структура;
	
	СтруктураДанныхВФорме.Вставить("Ссылка",
		ПредопределенноеЗначение("Справочник.ПараметрыСхемДляКомплексныхПроцессов.ПустаяСсылка"));
		
	СтруктураДанныхВФорме.Вставить("Схема",
		ПредопределенноеЗначение("Справочник.СхемыПроцессов.ПустаяСсылка"));
	
	СтруктураДанныхВФорме.Вставить("ВладелецСхемы", Неопределено);
	
	СтруктураДанныхВФорме.Вставить("ОбъектДоступа", Неопределено);
	
	СтруктураДанныхВФорме.Вставить("ВерсияДанных", "");
	СтруктураДанныхВФорме.Вставить("НастройкиЭлементов", СтруктураНастроекЭлементовСхемы());
	СтруктураДанныхВФорме.Вставить("ИдентификаторыНастроек", СтруктураИдентификаторовЭлементовСхемы());
	
	СтруктураДанныхВФорме.Вставить("ПараметрыСхемыИзменены", Ложь);
	
	СтруктураДанныхВФорме.Вставить("ФормыНастроекЭлементов", СтруктураФормНастроекЭлементовСхемы());
	
	СтруктураДанныхВФорме.Вставить("ПроцессыЭлементов", СтруктураПроцессовЭлементов());
	СтруктураДанныхВФорме.Вставить("ПроцессыЭлементовПриОткрытии", СтруктураПроцессовЭлементов());
	
	СтруктураДанныхВФорме.Вставить("КэшДанныхДействий", СтруктураКэшаДанныхДействий());
	
	СтруктураДанныхВФорме.Вставить("СрокиЭлементов", СтруктураСроковЭлементовСхемы());	
	
	СтруктураДанныхВФорме.Вставить("ПроцессыЭлементовДляПрерывания",
		СтруктураПроцессовЭлементовДляПрерывания());
	
	СтруктураДанныхВФорме.Вставить("ТекущиеЭлементы", СтруктураТекущихЭлементовСхемы());
	
	СтруктураДанныхВФорме.Вставить("ПройденныеЭлементы", СтруктураПройденныхЭлементовСхемы());
	
	СтруктураДанныхВФорме.Вставить("ПометкаУдаления", Ложь);
	
	Возврат СтруктураДанныхВФорме;
	
КонецФункции

// Возвращает параметры настроек элементов.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса/шаблона
// 
// Возвращаемое значение:
//  Соответствие
//   * Ключ - Строка - Имя элемента в схеме.
//   * Значение - Структура с полями "Тип, Идентификатор, Настройка, Процесс"
//  
Функция ВсеПараметрыЭлементовВСхеме(Форма) Экспорт
	
	ВсеПараметрыЭлементов = Новый Соответствие();
	
	ПоляПараметровЭлемента = "Тип, Идентификатор, Настройка, Процесс";
	
	Для Каждого ЭлементСхемы Из СхемыПроцессовКлиентСервер.ВсеЭлементыСхемы(Форма) Цикл
		
		ПараметрыЭлемента = Новый Структура(ПоляПараметровЭлемента);
		
		ПараметрыЭлемента.Тип = ЭлементСхемы.Значение; 
		
		ПараметрыЭлемента.Идентификатор = 
			Форма.ДанныеПараметровСхемы.ИдентификаторыНастроек[ЭлементСхемы.Ключ];
		
		ПараметрыЭлемента.Настройка = НастройкаЭлементаСхемыВФорме(Форма, ЭлементСхемы.Ключ);
		
		ПараметрыЭлемента.Процесс = 
			Форма.ДанныеПараметровСхемы.ПроцессыЭлементов[ЭлементСхемы.Ключ];
		
		ВсеПараметрыЭлементов[ЭлементСхемы.Ключ] = ПараметрыЭлемента;
		
	КонецЦикла;
	
	Возврат ВсеПараметрыЭлементов;
	
КонецФункции

// Проверяет признак формы процесса со схемой.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения 
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоФормаПроцессаСоСхемой(Форма) Экспорт
	
	Возврат Форма.ДанныеСхемы <> Неопределено
		И Форма.ДанныеПараметровСхемы <> Неопределено;
	
КонецФункции

// Возвращает данные параметров схемы из данных формы.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса/шаблона
// 
// Возвращаемое значение:
//  Структура - см. СтруктураДанныхПараметровСхемы
//  
Функция ДанныхПараметровСхемыИзФормы(Форма) Экспорт
	
	ДанныхПараметров = СтруктураДанныхПараметровСхемы();
	
	Если Форма.ДанныеПараметровСхемы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ДанныхПараметров, Форма.ДанныеПараметровСхемы);
	КонецЕсли;
	
	Возврат ДанныхПараметров;
	
КонецФункции

// Очистить прежние предметы для обработки.
// 
// Параметры:
//  Форма Форма
//  ИменаПредметовПроцесса  - Массив
Процедура ОчиститьНесуществующиеИменаПредметов(Форма, ИменаПредметовПроцесса)
	
	Для Каждого СтрНастроек Из Форма.ДанныеПараметровСхемы.НастройкиЭлементов Цикл
		
		Если ТипЗнч(СтрНастроек.Значение) = Тип("СправочникСсылка.ИменаПредметов")
			И ИменаПредметовПроцесса.Найти(СтрНастроек.Значение) = Неопределено Тогда
			
			Форма.ДанныеПараметровСхемы.НастройкиЭлементов[СтрНастроек.Ключ] = Неопределено;
			
			СхемыПроцессовКлиентСервер.УстановитьОписаниеЭлементуСхемы(
				СтрНастроек.Ключ, Форма);
			
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры	

#КонецОбласти

#Область ТаблицаЭтапов

// Вычисляет строковое представление предшественников для всех этапов
// Параметры:
//	Объект - объект (комплексный процесс или шаблон комплексного процесса)
Процедура ВычислитьОписаниеПредшественников(Объект) Экспорт
	
	Для Каждого ЭтапОбъекта Из Объект.Этапы Цикл
		ЭтапОбъекта.ПредшественникиЭтапаСтрокой = "";	
	КонецЦикла;
	
	Для Каждого ЭтапОбъекта Из Объект.Этапы Цикл	
		ИдентификаторЭтапа = ЭтапОбъекта.ИдентификаторЭтапа;
		СтрокаРезультат = "";
		СтрокаСвязка = " " + НСтр("ru = 'и'") + " ";
		Если ЭтапОбъекта.ПредшественникиВариантИспользования = "ОдинИзПредшественников" Тогда
			СтрокаСвязка = " " + НСтр("ru = 'или'") + " ";
		КонецЕсли;
		Для Каждого Предшественник Из Объект.ПредшественникиЭтапов Цикл			
			Если Предшественник.ИдентификаторПоследователя = ИдентификаторЭтапа Тогда
				Если ЭтапУдален(Объект, Предшественник.ИдентификаторПредшественника) Тогда
					Продолжить;
				КонецЕсли;
				СтрокаПростоеУсловие = "";
				Если ЗначениеЗаполнено(Предшественник.УсловиеРассмотрения) 
					И Предшественник.ИдентификаторПредшественника <> УникальныйИдентификаторПустой() Тогда
					
					Для Каждого ЭтапПредшественник Из Объект.Этапы Цикл
						Если ЭтапПредшественник.ИдентификаторЭтапа = Предшественник.ИдентификаторПредшественника Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если ТипЗнч(ЭтапПредшественник.ШаблонБизнесПроцесса) = Тип("СправочникСсылка.ШаблоныСогласования") Тогда
						Если Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.НезависимоОтРезультатаВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'После завершения '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеНеуспешногоВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если не согласовано '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если согласовано '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоСогласованияБезЗамечаний") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если согласовано без замечаний'");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоСогласованияСЗамечаниями") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если согласовано с замечаниями'");
						КонецЕсли;
					ИначеЕсли ТипЗнч(ЭтапПредшественник.ШаблонБизнесПроцесса) = Тип("СправочникСсылка.ШаблоныПодписания") Тогда
						Если Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.НезависимоОтРезультатаВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'После завершения '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеНеуспешногоВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если не подписано '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если подписано '");
						КонецЕсли
					ИначеЕсли ТипЗнч(ЭтапПредшественник.ШаблонБизнесПроцесса) = Тип("СправочникСсылка.ШаблоныУтверждения") Тогда
						Если Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.НезависимоОтРезультатаВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'После завершения '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеНеуспешногоВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если не утверждено '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если утверждено '");
						КонецЕсли;
					ИначеЕсли ТипЗнч(ЭтапПредшественник.ШаблонБизнесПроцесса) = Тип("СправочникСсылка.ШаблоныРегистрации") Тогда
						Если Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.НезависимоОтРезультатаВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'После завершения '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеНеуспешногоВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если не зарегистрировано '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если зарегистрировано '");
						КонецЕсли;
					ИначеЕсли ТипЗнч(ЭтапПредшественник.ШаблонБизнесПроцесса) = Тип("СправочникСсылка.ШаблоныПриглашения") Тогда
						Если Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.НезависимоОтРезультатаВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'После завершения '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеНеуспешногоВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если не принято '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если принято '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоСогласованияСЗамечаниями") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если принято обязательными '");
						ИначеЕсли Предшественник.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоСогласованияБезЗамечаний") Тогда
							СтрокаПростоеУсловие = НСтр("ru = 'Если принято всеми '");
						КонецЕсли;
					Иначе
						СтрокаПростоеУсловие = НСтр("ru = 'После завершения '");
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаРезультат) Тогда
					СтрокаРезультат = СтрокаРезультат + СтрокаСвязка + НРег(СтрокаПростоеУсловие) + ПолучитьПредставлениеЭтапа(Объект, Предшественник.ИдентификаторПредшественника);
				Иначе
					СтрокаРезультат = СтрокаПростоеУсловие + ПолучитьПредставлениеЭтапа(Объект, Предшественник.ИдентификаторПредшественника);
				КонецЕсли;
				Если ЗначениеЗаполнено(Предшественник.УсловиеПерехода) Тогда
					СтрокаРезультат = СтрокаРезультат + НСтр("ru = ', если '") + Строка(Предшественник.ИмяПредметаУсловия) + "." + НРег(Строка(Предшественник.УсловиеПерехода)) + ",";
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		ЭтапОбъекта.ПредшественникиЭтапаСтрокой = СтрокаРезультат;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Выполняет настроку элементов редактирования маршрута в карточке комплексного процесса/шаблона.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса/шаблона
//
Процедура НастроитьЭлементыРедактированияМаршрута(Форма) Экспорт
	
	Если ЭтоФормаПроцессаСоСхемой(Форма) Тогда
		Форма.Элементы.ГруппаЭтапы.Видимость = Ложь;
		Форма.Элементы.ФормаОбщаяКомандаПечатьСхемыКомплексногоПроцесса.Видимость = Ложь;
		Форма.Элементы.ГруппаСхема.Видимость = Истина;
	Иначе
		Форма.Элементы.ГруппаЭтапы.Видимость = Истина;
		Форма.Элементы.ФормаОбщаяКомандаПечатьСхемыКомплексногоПроцесса.Видимость = Истина;
		Форма.Элементы.ГруппаСхема.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ТаблицаЭтапов

Функция ЭтапУдален(Знач Объект, ИдентификаторЭтапа)
	
	Если ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда
		Для Каждого ЭтапПроцесса Из Объект.Этапы Цикл
			Если ЭтапПроцесса.ИдентификаторЭтапа = ИдентификаторЭтапа И ЭтапПроцесса.Удален Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьПредставлениеЭтапа(Знач Объект, ИдентификаторЭтапа) Экспорт
	
	Если ИдентификаторЭтапа = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000") Тогда
		Возврат НСтр("ru = 'При старте процесса'");
	Иначе
		ПараметрыОтбора = Новый Структура("ИдентификаторЭтапа", ИдентификаторЭтапа);
		МассивНайденных = Объект.Этапы.НайтиСтроки(ПараметрыОтбора);
		Если МассивНайденных.Количество() > 0 Тогда
			НайденныйЭтап = МассивНайденных[0];
			Возврат Строка(Объект.Этапы.Индекс(НайденныйЭтап) + 1);
		КонецЕсли;
	КонецЕсли;
	Возврат "";
	
КонецФункции

#КонецОбласти

#КонецОбласти