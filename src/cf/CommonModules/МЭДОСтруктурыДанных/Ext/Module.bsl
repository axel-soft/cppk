// @strict-types
// Создание структур данных для дальнейшего заполнения.

#Область СлужебныйПрограммныйИнтерфейс

// Стандартная стандартная структура-конструктор с полями ответа. Для дальнейшего заполнения ее данными.
// 
// Параметры: 
//  ЛокальноеИмя - Строка, Структура - Локальное имя файла, zip-архива с сообщением МЭДО:
//  ДвоичныеДанные - Неопределено, ДвоичныеДанные - Содержимое файла
// 
// Возвращаемое значение:
//  Структура - Cтруктура с полями ответа:
// * Успех - Булево - Успех
// * СообщениеОбОшибке - Строка - Сообщение об ошибке
// * Файл - см. НовыйФайл.
Функция НовыйОтвет(ЛокальноеИмя = "", ДвоичныеДанные = Неопределено) Экспорт
	
	ДанныеОтвета = Новый Структура();
	ДанныеОтвета.Вставить("Успех",					Истина);
	ДанныеОтвета.Вставить("СообщениеОбОшибке",		"");
	ДанныеОтвета.Вставить("Файл",					НовыйФайл(ЛокальноеИмя, ДвоичныеДанные));
	
	Возврат ДанныеОтвета;
	
КонецФункции

// Стандартная структура-конструктор простого ответа без файла, для передачи на клиент.
// 
// Параметры:
//  Успех - Булево - Успех
//  СообщениеОбОшибке - Строка - Сообщение об ошибке
// 
// Возвращаемое значение:
//  Структура - Новый легкий ответ:
//   * Успех - Булево
//   * СообщениеОбОшибке - Строка 
Функция НовыйЛегкийОтвет(Успех = Истина, СообщениеОбОшибке = "") Экспорт
	
	Возврат Новый Структура("Успех, СообщениеОбОшибке", Успех, СообщениеОбОшибке);
	
КонецФункции

// Возвращает пустую структуру данных входящего документа для создания.
// 
// Возвращаемое значение:
//  Структура:
// * НастройкиОрганизации - См. РегистрыСведений.НастройкиОрганизацийМЭДО.НовыйНастройки
// * ВерсияМЭДО - ПеречислениеСсылка.ВерсииФорматаМЭДО -
// * ИдентификаторДокумента - Строка -
// * ИдентификаторСообщения - Строка -
// * ПредставлениеСообщения - Строка -
// * Организация - см. НовыйОрганизация.
// * ВидДокумента - СправочникСсылка.ВидыДокументовМЭДО -
// * ГлавныйФайл - СправочникСсылка.Файлы -
// * ГрифДоступа - ОпределяемыйТип.ГрифДоступаМЭДО, Неопределено -
// * МестоСоставления - СправочникСсылка.МестаСоставленияДокументовМЭДО -
// * Заголовок - Строка -
// * ИсходящаяДата - Дата -
// * ИсходящийНомер - Строка -
// * Отправитель - см. НовыйОтправительПолучатель
// * Содержание - Строка -
// * Подписал - см. НовыйКонтактноеЛицо.
// * КоличествоЛистов - Число -
// * КоличествоПриложений - Число -
// * Адресаты - Массив из см. НовыйСтруктураАдресата
Функция НовыйДанныеВходящегоДокументаДляСоздания() Экспорт
	
	Данные = Новый Структура();
	Данные.Вставить("НастройкиОрганизации", РегистрыСведений.НастройкиОрганизацийМЭДО.НовыйНастройки());
	Данные.Вставить("ВерсияМЭДО",				Перечисления.ВерсииФорматаМЭДО.ПустаяСсылка());
	Данные.Вставить("ИдентификаторДокумента",	"");
	Данные.Вставить("ИдентификаторСообщения",	"");
	Данные.Вставить("ПредставлениеСообщения",	"");
	Данные.Вставить("Организация",				НовыйОрганизация());
	Данные.Вставить("ВидДокумента",				Справочники.ВидыДокументовМЭДО.ПустаяСсылка());
	Данные.Вставить("ГлавныйФайл",				Справочники.Файлы.ПустаяСсылка());
	Данные.Вставить("ГрифДоступа",				Неопределено);
	Данные.Вставить("МестоСоставления",			Справочники.МестаСоставленияДокументовМЭДО.ПустаяСсылка());
	Данные.Вставить("Заголовок",				"");
	Данные.Вставить("ИсходящаяДата",			'00010101');
	Данные.Вставить("ИсходящийНомер",			"");
	Данные.Вставить("Отправитель",				НовыйОтправительПолучатель());
	Данные.Вставить("Содержание",				"");
	Данные.Вставить("Подписал",					НовыйКонтактноеЛицо());
	Данные.Вставить("КоличествоЛистов",			0);
	Данные.Вставить("КоличествоПриложений",		0);
	Данные.Вставить("Адресаты",					Новый Массив());
	
	Возврат Данные;
	
КонецФункции

// Возвращает пустую структуру данных исходящего документа для отправки по МЭДО.
// 
// Возвращаемое значение:
//  Структура:
// * НастройкиОрганизации - См. РегистрыСведений.НастройкиОрганизацийМЭДО.НовыйНастройки
// * Документ - ОпределяемыйТип.ПредметМЭДО -
// 			  - Неопределено -
// * ИдентификаторДокумента - Строка
// * Пакеты - Массив из см. НовыйПакет.
// * ТекущийПакет - см. НовыйПакет.
// * ВидДокумента - см. НовыйОграниченноеЗначение.
// * ВидДокументаСсылка - СправочникСсылка.ВидыДокументовМЭДО -
// * ГлавныйФайлСсылка - СправочникСсылка.Файлы -
// * ГлавныйФайлВерсияСсылка - СправочникСсылка.ВерсииФайлов -
// * МестоСоставления - см. НовыйОграниченноеЗначение.
// * МестоСоставленияСсылка - СправочникСсылка.МестаСоставленияДокументовМЭДО -
// * ГрифДоступа - см. НовыйОграниченноеЗначение.
// * ГрифДоступаСсылка - ОпределяемыйТип.ГрифДоступаМЭДО -
//   				   - Неопределено -
// * Заголовок - Строка -
// * Содержание - Строка -
// * СвязанныеДокументы - Массив из Структура -
// * КоличествоЛистов - Число -
// * Файл - см. НовыйФайл.
// * ДатаУчетаДокумента - Дата
// * Отправитель - Структура:
// ** Организация - см. НовыйОрганизация.
// ** Исполнитель - см. НовыйКонтактноеЛицо.
// ** РегистрационныйНомер - Строка -
// ** ДатаРегистрации - Дата -
// ** РегистрационныйШтамп - см. НовыйРегистрационныйШтамп.
// ** Подписи - Массив из см. НовыйПодпись.
// * Получатели - Массив из см. НовыйОтправительПолучатель. -
// * ПодписьКонтейнера - см. НовыйФайл.
// * Приложения - Массив из См. НовыйПодписанныйФайл
// * Отправлен - Булево -
// * ГотовКОтправке - Булево -
// * ВременныйКаталог - Строка -
// * ПодкаталогСообщения - Строка -
// * СодержимоеКонтейнера - см. НовыйФайл.
// * ВсеИменаФайлов - Массив Из Строка - Технический параметр, чтобы исключить дублирование одинаковых имен файлов.
Функция НовыйДанныеИсходящегоДокументаДляОтправки() Экспорт
	
	Данные = Новый Структура();
	
	Данные.Вставить("НастройкиОрганизации", РегистрыСведений.НастройкиОрганизацийМЭДО.НовыйНастройки());
	Данные.Вставить("Документ",					Неопределено);
	Данные.Вставить("ИдентификаторДокумента",	"");
	
	// Если у получатели имеют поддержку разных версий МЭДО, то искусственно делим отправляемое сообщение на несколько
	// сообщений, каждое с получателями своей версии:
	Данные.Вставить("Пакеты",					Новый Массив()); // из см. НовыйПакет
	Данные.Вставить("ТекущийПакет",				НовыйПакет());
	
	Данные.Вставить("ВидДокумента",				НовыйОграниченноеЗначение());
	Данные.Вставить("ВидДокументаСсылка",		Справочники.ВидыДокументовМЭДО.ПустаяСсылка());
	Данные.Вставить("ГлавныйФайлСсылка",		Справочники.Файлы.ПустаяСсылка());
	Данные.Вставить("ГлавныйФайлВерсияСсылка",	Справочники.ВерсииФайлов.ПустаяСсылка());
	Данные.Вставить("МестоСоставления",			НовыйОграниченноеЗначение());
	Данные.Вставить("МестоСоставленияСсылка",	Справочники.МестаСоставленияДокументовМЭДО.ПустаяСсылка());
	Данные.Вставить("ГрифДоступа",				НовыйОграниченноеЗначение());
	Данные.Вставить("ГрифДоступаСсылка",		Неопределено);
	Данные.Вставить("Заголовок",				"");
	Данные.Вставить("Содержание",				"");
	Данные.Вставить("СвязанныеДокументы",		Новый Массив());
	Данные.Вставить("КоличествоЛистов",			0);
	Данные.Вставить("Файл",						НовыйФайл());
	Данные.Вставить("ДатаУчетаДокумента",		'00010101');
	
	Отправитель = Новый Структура();
	Отправитель.Вставить("Организация",				НовыйОрганизация());
	Отправитель.Вставить("Исполнитель",				НовыйКонтактноеЛицо());
	Отправитель.Вставить("РегистрационныйНомер",	"");
	Отправитель.Вставить("ДатаРегистрации",			'00010101');
	Отправитель.Вставить("РегистрационныйШтамп",	НовыйРегистрационныйШтамп());
	Отправитель.Вставить("Подписи",					Новый Массив());
	Данные.Вставить("Отправитель",				Отправитель);
	
	Данные.Вставить("Получатели",				Новый Массив());
	Данные.Вставить("ПодписьКонтейнера",		НовыйФайл());
	Данные.Вставить("Приложения",				Новый Массив());
	
	Данные.Вставить("Отправлен",				Ложь);
	Данные.Вставить("ГотовКОтправке",			Ложь);
	Данные.Вставить("ВременныйКаталог",			"");
	Данные.Вставить("ПодкаталогСообщения",		"");
	Данные.Вставить("СодержимоеКонтейнера",		НовыйФайл());
	
	Данные.Вставить("ВсеИменаФайлов",			Новый Массив());
	
	Возврат Данные;
	
КонецФункции

#Область УведомленияИКвитанции

// Возвращает пустую структуру данных уведомления для отправки по МЭДО.
// 
// Возвращаемое значение:
//  Структура - данные уведомления:
// * НастройкиОрганизации - См. РегистрыСведений.НастройкиОрганизацийМЭДО.НовыйНастройки
// * ВерсияМЭДО - ПеречислениеСсылка.ВерсииФорматаМЭДО -
// * Дата - Дата
// * ИдентификаторСообщенияДокумента - Строка -
// * ИдентификаторДокумента - Строка -
// * ИдентификаторУведомления - Строка -
// * УведомлениеСсылка - ДокументСсылка.УведомлениеМЭДО -
// * Документ - ОпределяемыйТип.ПредметМЭДО, Неопределено -
// * Состояние - ПеречислениеСсылка.СостоянияДокументовМЭДО -
// * ТипУведомления - Строка -
// * ТипУведомленияСсылка - ПеречислениеСсылка.ТипыУведомленийМЭДО -
// * СведенияОДокументе - см. НовыйСведенияОДокументе.
// * Комментарий - Строка -
// * ПунктДокумента - см. НовыйПунктДокумента.
// * Организация - см. НовыйОрганизация.
// * Контрагент - см. НовыйКонтрагент.
// * ПостановкаНаКонтроль - см. НовыйПостановкаНаКонтроль.
// * Регистрация - см. НовыйРегистрация.
// * ОтказВРегистрации - см. НовыйОтказВРегистрации.
// * ПринятиеКИсполнению - см. НовыйПринятиеКИсполнению.
// * ПодготовкаДоклада - см. НовыйПодготовкаДоклада.
// * НаправлениеДоклада - см. НовыйНаправлениеДоклада.
// * ХодИсполнения - см. НовыйХодИсполнения.
// * Опубликование - см. НовыйОпубликование.
// * ВременныйКаталог - Строка -
// * ПодкаталогСообщения - Строка -
Функция НовыйДанныеИсходящегоУведомленияДляОтправки() Экспорт
	
	Данные = Новый Структура();
	Данные.Вставить("НастройкиОрганизации", РегистрыСведений.НастройкиОрганизацийМЭДО.НовыйНастройки());
	Данные.Вставить("ВерсияМЭДО", Перечисления.ВерсииФорматаМЭДО.ПустаяСсылка());
	Данные.Вставить("Дата", '00010101');
	Данные.Вставить("ИдентификаторСообщенияДокумента", "");
	Данные.Вставить("ИдентификаторДокумента", "");
	Данные.Вставить("ИдентификаторУведомления", "");
	Данные.Вставить("УведомлениеСсылка", Документы.УведомлениеМЭДО.ПустаяСсылка());
	Данные.Вставить("Документ", Неопределено);
	Данные.Вставить("Состояние", Перечисления.СостоянияДокументовМЭДО.ПустаяСсылка());
	Данные.Вставить("ТипУведомления", "");
	Данные.Вставить("ТипУведомленияСсылка", Перечисления.ТипыУведомленийМЭДО.ПустаяСсылка());
	Данные.Вставить("СведенияОДокументе", НовыйСведенияОДокументе());
	Данные.Вставить("Комментарий", "");
	Данные.Вставить("ПунктДокумента", НовыйПунктДокумента()); // есть в некоторых типах уведомлений.
											// Из приказа Минцифры 667-233: "Пункт документа в электронном виде,
											// относительно которого создано уведомление". 
	Данные.Вставить("Организация", НовыйОрганизация());
	Данные.Вставить("Контрагент", НовыйКонтрагент());
	
	// Поля, заполняющиеся в зависимости от типа уведомления:
	Данные.Вставить("ПостановкаНаКонтроль", НовыйПостановкаНаКонтроль());
	Данные.Вставить("Регистрация", НовыйРегистрация());
	Данные.Вставить("ОтказВРегистрации", НовыйОтказВРегистрации());
	Данные.Вставить("ПринятиеКИсполнению", НовыйПринятиеКИсполнению());
	Данные.Вставить("ПодготовкаДоклада", НовыйПодготовкаДоклада());
	Данные.Вставить("НаправлениеДоклада", НовыйНаправлениеДоклада());
	Данные.Вставить("ХодИсполнения", НовыйХодИсполнения());
	Данные.Вставить("Опубликование", НовыйОпубликование());
	
	Данные.Вставить("ВременныйКаталог", "");
	Данные.Вставить("ПодкаталогСообщения", "");
	
	Возврат Данные;
	
КонецФункции

// Возвращает пустую структуру данных квитанции для отправки по МЭДО.
// 
// Возвращаемое значение:
//  Структура - Новый данные исходящей квитанции для отправки:
// * НастройкиОрганизации - См. РегистрыСведений.НастройкиОрганизацийМЭДО.НовыйНастройки
// * Квитанция - ДокументСсылка.КвитанцияМЭДО -
// * ВерсияМЭДО - ПеречислениеСсылка.ВерсииФорматаМЭДО -
// * Дата - Дата -
// * Предмет - ОпределяемыйТип.ПредметКвитанцииМЭДО, Неопределено - Документ или Уведомление МЭДО.
// * ИдентификаторСообщения - Строка -
// * ИдентификаторКвитанции - Строка -
// * Контрагент - см. НовыйКонтрагент
// * Организация - см. НовыйОрганизация
// * ВременныйКаталог - Строка -
// * ПодкаталогСообщения - Строка -
Функция НовыйДанныеИсходящейКвитанцииДляОтправки() Экспорт
	
	Данные = Новый Структура();
	Данные.Вставить("НастройкиОрганизации", РегистрыСведений.НастройкиОрганизацийМЭДО.НовыйНастройки());
	Данные.Вставить("Квитанция", Документы.КвитанцияМЭДО.ПустаяСсылка());
	Данные.Вставить("ВерсияМЭДО", Перечисления.ВерсииФорматаМЭДО.ПустаяСсылка());
	Данные.Вставить("Дата", '00010101');
	Данные.Вставить("Предмет", Неопределено);
	Данные.Вставить("ИдентификаторСообщения", "");
	Данные.Вставить("ИдентификаторКвитанции", "");
	Данные.Вставить("Контрагент", НовыйКонтрагент());
	Данные.Вставить("Организация", НовыйОрганизация());
	Данные.Вставить("ВременныйКаталог", "");
	Данные.Вставить("ПодкаталогСообщения", "");
	
	Возврат Данные;
	
КонецФункции

// Конструктор общих полей для создания уведомления
// 
// Параметры:
//  Документ - ОпределяемыйТип.ПредметМЭДО - Документ
//  Организация - ОпределяемыйТип.Организация - Организация
//  Контрагент - ОпределяемыйТип.КонтрагентМЭДО - Контрагент
//  Комментарий - Строка -
//  ИдентификаторДокумента - Строка -
//  ИдентификаторСообщенияДокумента - Строка -
// 
// Возвращаемое значение:
//  Структура - Новый общие поля уведомления:
//	* Документ - ОпределяемыйТип.ПредметМЭДО, Неопределено - Обязательное поле
//	* Организация - ОпределяемыйТип.Организация, Неопределено - Обязательное поле
//	* Контрагент - ОпределяемыйТип.КонтрагентМЭДО, Неопределено - Обязательное поле
//	* Комментарий - Строка - Обязательное поле, чтобы дать понять, что уведомление создано автоматически
//	* ИдентификаторДокумента - Строка - Необязательное поле, т.к. будет взят из сообщения документа по РС состояний
//										перед записью уведомления.
//	* ИдентификаторСообщенияДокумента - Строка - Необязательное поле, принцип как ИдентификаторДокумента.
//	* ВерсияМЭДО - ПеречислениеСсылка.ВерсииФорматаМЭДО - Необязательное поле, т.к. при незаполненной версии она будет
//														  вычислена по контрагенту перед записью уведомления.
Функция НовыйОбщиеПоляУведомления(
	Документ,
	Организация,
	Контрагент,
	Комментарий,
	ИдентификаторДокумента = "",
	ИдентификаторСообщенияДокумента = "") Экспорт
	
	Поля = Новый Структура();
	Поля.Вставить("Документ", Документ);
	Поля.Вставить("Организация", Организация);
	Поля.Вставить("Контрагент", Контрагент);
	Поля.Вставить("Комментарий", Комментарий);
	Поля.Вставить("ИдентификаторДокумента", ИдентификаторДокумента);
	Поля.Вставить("ИдентификаторСообщенияДокумента", ИдентификаторСообщенияДокумента);
	Поля.Вставить("ВерсияМЭДО", Перечисления.ВерсииФорматаМЭДО.ПустаяСсылка());
	
	Возврат Поля;
	
КонецФункции

// Новый пункт документа. Для уведомлений вида "Постановка на контроль", повторяет тип documentClause из xsd-схемы.
// 
// Возвращаемое значение:
//  Структура - Новый пункт документа:
// * НомерПоПорядку - Число - Номер для упорядочивания.
// * ИдентификаторПункта - Строка - Уникальный идентификатор пункта в рамках документа в электронном виде.
// * Наименование - Строка - Наименование пункта (краткое).
// * ТекстПункта - Строка - Содержание пункта (полное).
// * СрокИсполнения - Дата -
// * Ответственный - см. НовыйОтветственнаяСтруктурнаяЕдиница.
// * Комментарий - Строка -
// * ПолноеПредставление - Строка -
Функция НовыйПунктДокумента() Экспорт
	
	Данные = Новый Структура();
	Данные.Вставить("НомерПоПорядку", 0);
	Данные.Вставить("ИдентификаторПункта", "");
	Данные.Вставить("Наименование", "");
	Данные.Вставить("ТекстПункта", "");
	Данные.Вставить("СрокИсполнения", '00010101');
	Данные.Вставить("Ответственный", НовыйОтветственнаяСтруктурнаяЕдиница());
	Данные.Вставить("Комментарий", ""); // наследуется из addressee.
	
	Данные.Вставить("ПолноеПредставление", "");
	
	Возврат Данные;
	
КонецФункции

// Новый адресат для уведомлений. Для уведомлений вида "Назначен исполнитель", повторяет тип anyone из xsd-схемы.
// 
// Возвращаемое значение:
//  Структура - Новый адресат для уведомлений:
// * Регион - см. НовыйОграниченноеЗначение.
// * Юрлицо - см. НовыйОграниченноеЗначение.
// * Персона - см. НовыйОграниченноеЗначение.
// * Подразделение - см. НовыйОграниченноеЗначение.
// * Должность - см. НовыйОграниченноеЗначение.
// * КонтактнаяИнформацияПредставление - Строка -
// * ЮрлицоСсылка - ОпределяемыйТип.КонтрагентМЭДО,Неопределено
// * КонтактноеЛицоСсылка - ОпределяемыйТип.КонтактноеЛицоМЭДО,Неопределено
// * ПолноеПредставление - Строка - Полное описание словами, из всех заполненных полей.
Функция НовыйОтветственнаяСтруктурнаяЕдиница() Экспорт
	
	Данные = Новый Структура();
	Данные.Вставить("Регион", НовыйОграниченноеЗначение());
	Данные.Вставить("Юрлицо", НовыйОграниченноеЗначение());// в том числе может быть и наша организация.
	Данные.Вставить("Персона", НовыйОграниченноеЗначение());
	Данные.Вставить("Подразделение", НовыйОграниченноеЗначение());
	Данные.Вставить("Должность", НовыйОграниченноеЗначение());
	Данные.Вставить("КонтактнаяИнформацияПредставление", "");
	
	Данные.Вставить("ЮрлицоСсылка", Неопределено);
	Данные.Вставить("КонтактноеЛицоСсылка", Неопределено);
	Данные.Вставить("ПолноеПредставление", "");
	
	Возврат Данные;
	
КонецФункции

// Новая структура сведений о документе. Повторяет тип documentReference из xsd-схемы.
// 
// Возвращаемое значение:
//  Структура - Новый сведения о документе:
// * Регион - см. НовыйОграниченноеЗначение.
// * Юрлицо - см. НовыйОграниченноеЗначение.
// * Персона - см. НовыйОграниченноеЗначение.
// * Подразделение - см. НовыйОграниченноеЗначение.
// * Должность - см. НовыйОграниченноеЗначение.
// * РегистрационныеДанные - см. НовыйРегистрация.
// * Комментарий - Строка - 
// * ЮрлицоСсылка - ОпределяемыйТип.КонтрагентМЭДО,Неопределено.
// * КонтактноеЛицоСсылка - ОпределяемыйТип.КонтактноеЛицоМЭДО,Неопределено.
// * ПолноеПредставление - Строка - Полное описание словами, из всех заполненных полей.
Функция НовыйСведенияОДокументе() Экспорт
	
	Данные = Новый Структура();
	Данные.Вставить("Регион", НовыйОграниченноеЗначение());
	Данные.Вставить("Юрлицо", НовыйОграниченноеЗначение());
	Данные.Вставить("Персона", НовыйОграниченноеЗначение());
	Данные.Вставить("Подразделение", НовыйОграниченноеЗначение());
	Данные.Вставить("Должность", НовыйОграниченноеЗначение());
	Данные.Вставить("РегистрационныеДанные", НовыйРегистрация());
	Данные.Вставить("Комментарий", "");
	
	Данные.Вставить("ЮрлицоСсылка", Неопределено);
	Данные.Вставить("КонтактноеЛицоСсылка", Неопределено);
	Данные.Вставить("ПолноеПредставление", "");
	
	Возврат Данные;
	
КонецФункции

// Конструктор "Регистрация документа". Повторяет тип documentNumber из xsd-схемы.
// 
// Параметры:
//  РегистрационныйНомер - Строка - Регистрационный номер
//  ДатаРегистрации - Дата - Дата регистрации
// 
// Возвращаемое значение:
//  Структура - Новый регистрация:
// * РегистрационныйНомер - Строка - 
// * ДатаРегистрации - Дата - 
Функция НовыйРегистрация(РегистрационныйНомер = "", ДатаРегистрации = '00010101') Экспорт
	
	Возврат Новый Структура("РегистрационныйНомер, ДатаРегистрации", РегистрационныйНомер, ДатаРегистрации);
	
КонецФункции

// Конструктор "Отказ в регистрации".
// 
// Параметры:
//  ПричинаОтказа - Строка - Причина отказа строкой
//  ПричинаОтказаСсылка - СправочникСсылка.ПричиныОтказаВРегистрацииМЭДО, Неопределено -
// 
// Возвращаемое значение:
//  Структура:
// * ПричинаОтказа - Строка - 
// * ПричинаОтказаСсылка - СправочникСсылка.ПричиныОтказаВРегистрацииМЭДО, Неопределено - 
Функция НовыйОтказВРегистрации(ПричинаОтказа = "", ПричинаОтказаСсылка = Неопределено) Экспорт
	
	Данные = Новый Структура();
	Данные.Вставить("ПричинаОтказа", ПричинаОтказа);
	Данные.Вставить("ПричинаОтказаСсылка", ПричинаОтказаСсылка);
	Возврат Данные;
	
КонецФункции

#КонецОбласти

// Конструктор структуры - пакета сообщения
// 
// Возвращаемое значение:
//  Структура:
// * ВерсияМЭДО - ПеречислениеСсылка.ВерсииФорматаМЭДО -
// * ИдентификаторСообщения - Строка -
Функция НовыйПакет() Экспорт
	
	Данные = Новый Структура();
	Данные.Вставить("ВерсияМЭДО", Перечисления.ВерсииФорматаМЭДО.ПустаяСсылка());
	Данные.Вставить("ИдентификаторСообщения", "");
	
	Возврат Данные;
	
КонецФункции

// Новый отправитель/получатель.
// 
// Возвращаемое значение:
//  Структура - Новый получатель:
// * Контрагент - см. НовыйКонтрагент.
// * КонтактноеЛицо - см. НовыйКонтактноеЛицо.
Функция НовыйОтправительПолучатель() Экспорт
	
	Возврат Новый Структура(
		"Контрагент,		КонтактноеЛицо",
		НовыйКонтрагент(),	НовыйКонтактноеЛицо() );
	
КонецФункции

// Новый контрагент.
// 
// Возвращаемое значение:
//  Структура - Новый контрагент:
//   * Идентификатор	- Строка - Идентификатор контрагента по справочнику МЭДО.
//   * Наименование		- Строка
//   * АдресМЭДО		- Строка
//   * ВерсияМЭДО		- ПеречислениеСсылка.ВерсииФорматаМЭДО
//   * КонтрагентСсылка	- ОпределяемыйТип.КонтрагентМЭДО,Неопределено - Ссылка на контрагента.
Функция НовыйКонтрагент() Экспорт
	
	Данные = Новый Структура();
	Данные.Вставить("Идентификатор", "");
	Данные.Вставить("Наименование", "");
	Данные.Вставить("АдресМЭДО", "");
	Данные.Вставить("ВерсияМЭДО", Перечисления.ВерсииФорматаМЭДО.ПустаяСсылка()); // актуально для исходящих.
	Данные.Вставить("КонтрагентСсылка",	Неопределено);
	
	Возврат Данные;
	
КонецФункции

// Новая структура сведений о контактном лице. Это контактное лицо контрагента или наш сотрудник.
// 
// Возвращаемое значение:
//  Структура - Новый контактное лицо:
// * Идентификатор - Строка -
// * ФИО - Строка -
// * Подразделение - см. НовыйОграниченноеЗначение
// * Должность - см. НовыйОграниченноеЗначение
// * Телефон - Строка -
// * МобильныйТелефон - Строка -
// * ЭлектроннаяПочта - Строка -
// * КонтактнаяИнформацияПредставление - Строка - Все виды в одной строке
// * КонтактноеЛицоСсылка - ОпределяемыйТип.КонтактноеЛицоМЭДО - Ссылка на контактное лицо.
// 						  - Неопределено -
Функция НовыйКонтактноеЛицо() Экспорт
	
	Данные = Новый Структура();
	Данные.Вставить("Идентификатор","");
	Данные.Вставить("ФИО", "");
	Данные.Вставить("Подразделение", НовыйОграниченноеЗначение());
	Данные.Вставить("Должность", НовыйОграниченноеЗначение());
	Данные.Вставить("МобильныйТелефон", "");
	Данные.Вставить("Телефон", "");
	Данные.Вставить("ЭлектроннаяПочта", "");
	Данные.Вставить("КонтактнаяИнформацияПредставление", "");
	Данные.Вставить("КонтактноеЛицоСсылка", Неопределено);
	
	Возврат Данные;
	
КонецФункции

// Новая структура сведений об организации.
// 
// Возвращаемое значение:
//  Структура - Новый организация:
//   * Идентификатор - Строка
//   * АдресМЭДО - Строка -
//   * Наименование - Строка
//   * ОрганизацияСсылка - ОпределяемыйТип.Организация, Неопределено - Ссылка на организацию.
Функция НовыйОрганизация() Экспорт
	
	Данные = Новый Структура();
	Данные.Вставить("Идентификатор", "");
	Данные.Вставить("АдресМЭДО", "");
	Данные.Вставить("Наименование", "");
	Данные.Вставить("ОрганизацияСсылка", Неопределено);
	
	Возврат Данные;
	
КонецФункции

// Новый "Ограниченное значение" - повторяет qualifiedValue из XSD схемы.
// 
// Возвращаемое значение:
//  Структура - Новый ограниченное значение:
// * Идентификатор - Строка
// * Наименование - Строка
Функция НовыйОграниченноеЗначение() Экспорт
	
	Возврат Новый Структура("Идентификатор, Наименование", "", "");
	
КонецФункции

// Конструктор для данных о файле.
// 
// Параметры:
//  ЛокальноеИмя - Строка - Имя файла (без пути)
//  ДвоичныеДанные - ДвоичныеДанные -
//  			   - Неопределено -
// 
// Возвращаемое значение:
//  Структура:
// * ЛокальноеИмя - Строка -
// * ДвоичныеДанные - ДвоичныеДанные -
//   				- Неопределено -
Функция НовыйФайл(ЛокальноеИмя = "", ДвоичныеДанные = Неопределено) Экспорт
	
	Данные = Новый Структура();
	Данные.Вставить("ЛокальноеИмя", ЛокальноеИмя);
	Данные.Вставить("ДвоичныеДанные", ДвоичныеДанные);
	
	Возврат Данные; //@skip-check constructor-function-return-section
	
КонецФункции

// Новый подпись.
// 
// Возвращаемое значение:
//  Структура - Новый подпись:
// * Подписал - см. НовыйКонтактноеЛицо.
// * Файл - см. НовыйФайл.
// * ОтметкаЭП - см. НовыйОтметкаЭП.
// * ДатаПодписания - Дата
Функция НовыйПодпись() Экспорт
	
	Данные = Новый Структура();
	Данные.Вставить("Подписал", НовыйКонтактноеЛицо());
	Данные.Вставить("Файл", НовыйФайл()); // Сам файл ЭП, т.е. например .p7s
	Данные.Вставить("ОтметкаЭП", НовыйОтметкаЭП()); // файл штампа подписи, для визуализации.
	Данные.Вставить("ДатаПодписания", '00010101');
	Возврат Данные;
	
КонецФункции

// Повторяет addressee из xsd-схемы паспорта контейнера документа
// 
// Возвращаемое значение:
//  Структура - Новый структура адресата:
//   * Организация - Строка
//   * Департамент - Строка
//   * Персона - См. НовыйКонтактноеЛицо
Функция НовыйСтруктураАдресата() Экспорт
	
	Данные = Новый Структура();
	Данные.Вставить("Организация",	""); // Реально в xsd-схеме это структура, но Организация определяется до этого
	Данные.Вставить("Департамент",	""); // Реально в xsd-схеме это структура, но синхронизации по отделам между
										 // организациями пока не поддерживается.
	Данные.Вставить("Персона", НовыйКонтактноеЛицо()); // Но реально в xsd-схеме есть не все поля.
	
	Возврат Данные;
	
КонецФункции

// Конструктор подписанного файла (Подписи могут отсутствовать)
// 
// Возвращаемое значение:
//  Структура - Новый подписанный файл:
// * Файл - См. НовыйФайл
// * Подписи - Массив Из См. НовыйПодпись
Функция НовыйПодписанныйФайл() Экспорт
	
	Данные = Новый Структура();
	Данные.Вставить("Файл", НовыйФайл());
	Данные.Вставить("Подписи", Новый Массив());
	Возврат Данные;
	
КонецФункции

// Конструктор структуры - положения изображения для размещения в документе.
// 
// Параметры:
//   Страница - Число - номер страницы
//   		  - ПеречислениеСсылка.СтраницаВставкиКартинки - номер страницы, в виде перечисления
//   		  - Неопределено -
//   Слева - Число - в мм.
//   Сверху - Число - в мм.
//   Ширина - Число - в мм.
//   Высота - Число - в мм.
// 
// Возвращаемое значение:
//  Структура - Новый положение изображения:
// * Страница - Число - номер страницы
// 			  - ПеречислениеСсылка.СтраницаВставкиКартинки - номер страницы, в виде перечисления
// 			  - Неопределено -
// * Слева - Число - в мм.
// * Сверху - Число - в мм.
// * Ширина - Число - в мм.
// * Высота - Число - в мм.
Функция НовыйПоложениеИзображения(Страница, Слева, Сверху, Ширина, Высота) Экспорт

	Данные = Новый Структура();
	Данные.Вставить("Страница", Страница);
	Данные.Вставить("Слева", Слева);
	Данные.Вставить("Сверху", Сверху);
	Данные.Вставить("Ширина", Ширина);
	Данные.Вставить("Высота", Высота);
	
	Возврат Данные;
	
КонецФункции

// Конструктор для передачи данных о картинке с "Положением". Для отметок ЭП и картинки рег. штампа.
// 
// Параметры:
//  ДвоичныеДанныеОтметки - ДвоичныеДанные
//  Положение - См. НовыйПоложениеИзображения
//  
// Возвращаемое значение:
//  Структура:
//   * ДвоичныеДанныеОтметки - ДвоичныеДанные, Неопределено - Данные картинки отметки ЭП.
//   * Положение - См. НовыйПоложениеИзображения
Функция НовыйДанныеОтметки(ДвоичныеДанныеОтметки = Неопределено, Положение = Неопределено) Экспорт
	
	Данные = Новый Структура();
	Данные.Вставить("ДвоичныеДанныеОтметки", ДвоичныеДанныеОтметки);
	Если Положение = Неопределено Тогда // Может передаваться и Неопределено:
		Данные.Вставить("Положение", НовыйПоложениеИзображения(Неопределено, 0, 0, 0, 0));
	Иначе
		Данные.Вставить("Положение", Положение);
	КонецЕсли;
	
	Возврат Данные; //@skip-check constructor-function-return-section
	
КонецФункции

#Область УниверсальныеФункции

// Обертка. Возвращает структуру из результата запроса, который ожидается, что вернет 1 строку, или не вернет ничего. 
// Если больше, то учитывается только первая строка.
// 
// Параметры:
//  РезультатЗапроса - РезультатЗапроса
// 
// Возвращаемое значение:
//  Структура - Структура из полей результата запроса, если результат пустой, то все поля = Неопределено.
Функция РезультатЗапросаВСтруктуру(РезультатЗапроса) Экспорт
	
	Данные = НовыйСтруктураИзКолонокОбъекта(РезультатЗапроса);
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Данные, Выборка);
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

// Пустая структура с полями из колонок объекта
// 
// Параметры:
//  ОбъектСКолонками - РезультатЗапроса,ТаблицаЗначений - Или любой другой объект, у которого есть 
//  													стандартное свойство "Колонки".
// 
// Возвращаемое значение:
//  Структура - Структура из колонок объекта, все поля = Неопределено.
Функция НовыйСтруктураИзКолонокОбъекта(ОбъектСКолонками) Экспорт
	
	Данные = Новый Структура();
	Для Каждого Колонка Из ОбъектСКолонками.Колонки Цикл
		Данные.Вставить(Колонка.Имя, Неопределено);
	КонецЦикла;
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Конструктор "Отметка ЭП".
// 
// Возвращаемое значение:
//  Структура - Новый регистрационный штамп:
// * Файл - см. НовыйФайл.
// * Положение - См. НовыйПоложениеИзображения.
Функция НовыйОтметкаЭП()
	
	Данные = Новый Структура();
	Данные.Вставить("Файл", НовыйФайл());
	Данные.Вставить("Положение", НовыйПоложениеИзображения(Неопределено, 0, 0, 0, 0));
	
	Возврат Данные;
	
КонецФункции

// Конструктор "Регистрационный штамп".
// 
// Возвращаемое значение:
//  Структура - Новый регистрационный штамп:
// * Файл - см. НовыйФайл.
// * Положение - см. НовыйПоложениеИзображения.
Функция НовыйРегистрационныйШтамп()
	
	Данные = Новый Структура();
	Данные.Вставить("Файл", НовыйФайл());
	Данные.Вставить("Положение", НовыйПоложениеИзображения(Неопределено, 0, 0, 0, 0));
	
	Возврат Данные;
	
КонецФункции

#Область ДляУведомлений

// Конструктор "Постановка на контроль".
// 
// Возвращаемое значение:
//  Структура:
// * ТребуетсяРегистрация - Булево -
// * ТребуетсяИсполнение - Булево -
// * ТребуетсяПубликация - Булево -
// * ПунктыДокумента - Массив из см. НовыйПунктДокумента.
Функция НовыйПостановкаНаКонтроль()
	
	Данные = Новый Структура();
	Данные.Вставить("ТребуетсяРегистрация", Ложь);
	Данные.Вставить("ТребуетсяИсполнение", Ложь);
	Данные.Вставить("ТребуетсяПубликация", Ложь);
	Данные.Вставить("ПунктыДокумента", Новый Массив()); // Внутри см. НовыйПунктДокумента.
	Возврат Данные;
	
КонецФункции

// Конструктор "Принятие к исполнению". Повторяет тип executorAssigned из xsd-схемы.
// 
// Возвращаемое значение:
//  Структура:
// * ЮрлицоСсылка - ОпределяемыйТип.КонтрагентМЭДО,Неопределено - Контрагент, если у разные единиц разные,
// 															то с самой нижней ступени иерархии: 
// 															РуководительСекретарь/РуководительПодразделения/Исполнитель
// * РуководительСекретарь - см. НовыйОтветственнаяСтруктурнаяЕдиница.
// * КомментарийРуководителяСекретаря - Строка -
// * РуководительПодразделения - см. НовыйОтветственнаяСтруктурнаяЕдиница
// * КомментарийРуководителяПодразделения - Строка -
// * Исполнитель - см. НовыйОтветственнаяСтруктурнаяЕдиница
// * КомментарийИсполнителя - Строка -
Функция НовыйПринятиеКИсполнению()
	
	Данные = Новый Структура();
	Данные.Вставить("ЮрлицоСсылка", Неопределено);
	Данные.Вставить("РуководительСекретарь", НовыйОтветственнаяСтруктурнаяЕдиница());
	Данные.Вставить("КомментарийРуководителяСекретаря", "");
	Данные.Вставить("РуководительПодразделения", НовыйОтветственнаяСтруктурнаяЕдиница());
	Данные.Вставить("КомментарийРуководителяПодразделения", "");
	Данные.Вставить("Исполнитель", НовыйОтветственнаяСтруктурнаяЕдиница());
	Данные.Вставить("КомментарийИсполнителя", "");
	
	Возврат Данные;
	
КонецФункции

// Конструктор "Подготовка доклада". Повторяет тип reportPrepared из xsd-схемы.
// 
// Возвращаемое значение:
//  Структура:
// * Ответственный - см. НовыйОтветственнаяСтруктурнаяЕдиница
// * ДатаПодписания - Дата -
// * КомментарийПодписания - Строка -
Функция НовыйПодготовкаДоклада()
	
	Данные = Новый Структура();
	Данные.Вставить("Ответственный",			НовыйОтветственнаяСтруктурнаяЕдиница());
	Данные.Вставить("ДатаПодписания",			'00010101');
	Данные.Вставить("КомментарийПодписания",	"");
	
	Возврат Данные;
	
КонецФункции

// Конструктор "Направление доклада". Повторяет тип reportSent из xsd-схемы.
// 
// Возвращаемое значение:
//  Структура:
// * СведенияОДокументе - см. НовыйСведенияОДокументе
Функция НовыйНаправлениеДоклада()
	
	Возврат Новый Структура("СведенияОДокументе", НовыйСведенияОДокументе());
	
КонецФункции

// Конструктор "Ход исполнения". Повторяет тип courseChanged из xsd-схемы.
// 
// Возвращаемое значение:
//  Структура:
// * ОписаниеХодаИсполнения - Строка
// * СведенияОДокументе - см. НовыйСведенияОДокументе
Функция НовыйХодИсполнения()
	
	Возврат Новый Структура(
		"ОписаниеХодаИсполнения, СведенияОДокументе", "", НовыйСведенияОДокументе());
	
КонецФункции

// Конструктор "Опубликование". Повторяет тип documentPublished из xsd-схемы.
// 
// Возвращаемое значение:
//  Структура:
// * РегистрационныеДанные - см. НовыйРегистрация.
// * ПечатныйОрган - Строка
Функция НовыйОпубликование()
	
	Возврат Новый Структура(
		"РегистрационныеДанные,	ПечатныйОрган",
		НовыйРегистрация(),		"");
	
КонецФункции

#КонецОбласти

#КонецОбласти
