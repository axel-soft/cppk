
////////////////////////////////////////////////////////////////////////////////
// Сроки исполнения процессов КОРП: содержит серверные процедуры и функции по работе
// со сроками процессов в редакциях КОРП/ДГУ.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Заполняет сроки исполнения этапов комплексного процесса
// в таблице Этапы.
//
// Параметры:
//  Этапы - ДанныеФормыКоллекция, ТаблицаЗначений - таблица этапов комплексного процесса.
//
Процедура ЗаполнитьСрокиИсполненияЭтаповКомплексногоПроцесса(Этапы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Этап Из Этапы Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ШаблонБизнесПроцесса", Неопределено);
		СтруктураПоиска.Вставить("ЗапущенныйБизнесПроцесс", Неопределено);
		СтруктураПоиска.Вставить("Удален", Ложь);
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Этап);
		
		Если СтруктураПоиска.Удален = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПоиска.ЗапущенныйБизнесПроцесс) Тогда
			
			ПараметрыЭтапа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				СтруктураПоиска.ЗапущенныйБизнесПроцесс,
				"СрокИсполненияПроцесса");
			
		Иначе
			
			ПараметрыЭтапа = Неопределено;
			
			Если ТипЗнч(СтруктураПоиска.ШаблонБизнесПроцесса) =
				Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов") Тогда
				
				ПараметрыСхемы = 
					Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыСхемыПоВладельцу(
						СтруктураПоиска.ШаблонБизнесПроцесса);
				
				Если ЗначениеЗаполнено(ПараметрыСхемы) Тогда
					
					ДанныеПараметровСхемы = 
						Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(
							ПараметрыСхемы);
					
					ДанныеСхемы = Справочники.СхемыПроцессов.ДанныеСхемыПроцесса(
						ДанныеПараметровСхемы.Схема);
					
					НастройкиДействийСхемы = РаботаСКомплекснымиБизнесПроцессамиСервер.
						НастройкиДействийИВложенныхПроцессовВДанныхПараметров(ДанныеПараметровСхемы);
					
					КэшДанныхДействий = 
						РаботаСКомплекснымиБизнесПроцессамиСервер.КэшДанныхДействий(НастройкиДействийСхемы);
					
					СрокиЭлементов = 
						РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураСроковЭлементовСхемы();
					
					РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЗаполнитьСрокиЭлементовСхемы(
						СрокиЭлементов,
						ДанныеПараметровСхемы.НастройкиЭлементов,
						РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураПроцессовЭлементов(),
						КэшДанныхДействий,
						РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураПроцессовЭлементовДляПрерывания(),
						РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураТекущихЭлементовСхемы());
					
					ПараметрыДляОпределенияДлительности = 
						ПараметрыДляОпределенияДлительностиКомплексногоПроцессаСоСхемой();
					
					ПараметрыДляОпределенияДлительности.Ссылка = СтруктураПоиска.ШаблонБизнесПроцесса;
					ПараметрыДляОпределенияДлительности.ДанныеСхемы = ДанныеСхемы;
					ПараметрыДляОпределенияДлительности.СрокиЭлементов = СрокиЭлементов;
					
					ПараметрыЭтапа = СрокиИсполненияПроцессов.ДлительностьИсполненияПроцесса(
						ПараметрыДляОпределенияДлительности);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПараметрыЭтапа = Неопределено Тогда
				ПараметрыЭтапа = СрокиИсполненияПроцессов.
					ДлительностьИсполненияПроцесса(СтруктураПоиска.ШаблонБизнесПроцесса);
			КонецЕсли;
			
			ПараметрыЭтапа.Вставить("СрокИсполненияПроцесса",
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					СтруктураПоиска.ШаблонБизнесПроцесса, "СрокИсполненияПроцесса"));
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Этап, ПараметрыЭтапа);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет срок исполнения задачи по параметрам.
//
// Параметры:
//  Задача - ЗадачаОбъект.ЗадачаИсполнителя
//  ВариантУстановкиСрокаИсполнения - Перечисление.ВариантыУстановкиСрокаИсполнения - 
//                                    вариант установки срока в процессе, для текущей задачи.
//  СрокИсполнения - Дата - срок исполнения в процессе.
//  СрокИсполненияДни - Число - относительный срок исполнения в процессе.
//  СрокИсполненияЧасы - Число - относительный срок исполнения в процессе.
//  СрокИсполненияМинуты - Число - относительный срок исполнения в процессе.
//
Процедура ЗаполнитьСрокИсполненияЗадачи(Задача,
	ВариантУстановкиСрокаИсполнения,
	СрокИсполнения,
	СрокИсполненияДни,
	СрокИсполненияЧасы,
	СрокИсполненияМинуты) Экспорт
	
	ИсполнительЗадачи = Неопределено;
	Если ЗначениеЗаполнено(Задача.Исполнитель) Тогда
		ИсполнительЗадачи = Задача.Исполнитель;
	ИначеЕсли ЗначениеЗаполнено(Задача.РольИсполнителя) Тогда
		ИсполнительЗадачи = Задача.РольИсполнителя;
	КонецЕсли;     
	
	ДатаОтсчета = Задача.Дата;
	
	СрокЗадачиПроцесса = ЗаполнитьСрокИсполненияУчастника(
		ИсполнительЗадачи, 
		ДатаОтсчета,
		ВариантУстановкиСрокаИсполнения,
		СрокИсполнения,
		СрокИсполненияДни,
		СрокИсполненияЧасы,
		СрокИсполненияМинуты);
	
	Если СрокЗадачиПроцесса <> Дата(1,1,1)
		И Задача.СрокИсполнения <> СрокЗадачиПроцесса Тогда
		Задача.СрокИсполнения = СрокЗадачиПроцесса;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет срок исполнения задачи по параметрам.
//
// Параметры:
//  ИсполнительЗадачи - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли
//  ДатаОтсчета - Дата
//  ВариантУстановкиСрокаИсполнения - Перечисление.ВариантыУстановкиСрокаИсполнения - 
//                                    вариант установки срока в процессе, для текущей задачи.
//  СрокИсполнения - Дата - срок исполнения в процессе.
//  СрокИсполненияДни - Число - относительный срок исполнения в процессе.
//  СрокИсполненияЧасы - Число - относительный срок исполнения в процессе.
//  СрокИсполненияМинуты - Число - относительный срок исполнения в процессе.
//
//  Возвращаемое значение
//  Дата
//
Функция ЗаполнитьСрокИсполненияУчастника(
	ИсполнительЗадачи, 
	ДатаОтсчета,
	ВариантУстановкиСрокаИсполнения,
	СрокИсполнения,
	СрокИсполненияДни,
	СрокИсполненияЧасы,
	СрокИсполненияМинуты) Экспорт
	
	СрокЗадачиПроцесса = Дата(1,1,1);
	
	Если Не ЗначениеЗаполнено(СрокИсполнения)
		И Не ЗначениеЗаполнено(СрокИсполненияДни)
		И Не ЗначениеЗаполнено(СрокИсполненияЧасы)
		И Не ЗначениеЗаполнено(СрокИсполненияМинуты)
		Или Не ЗначениеЗаполнено(ДатаОтсчета) Тогда
		
		// Оставляем пустым.
		
	ИначеЕсли ВариантУстановкиСрокаИсполнения = 
		Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок Тогда
		
		ПараметрыДляОпределенияТочногоСрока = ПараметрыДлительностиИсполненияДляОпределенияТочногоСрока();
		ПараметрыДляОпределенияТочногоСрока.Дни = СрокИсполненияДни;
		ПараметрыДляОпределенияТочногоСрока.Часы = СрокИсполненияЧасы;
		ПараметрыДляОпределенияТочногоСрока.Минуты = СрокИсполненияМинуты;
		ПараметрыДляОпределенияТочногоСрока.ДатаОтсчета = ДатаОтсчета;
		
		ПараметрыДляОпределенияТочногоСрока.ГрафикРаботы = ГрафикРаботыУчастникаПроцесса(
			Сотрудники.ЛюбойПользовательСотрудника(
			ИсполнительЗадачи));
		
		СрокЗадачиПроцесса = СрокИсполненияПоДлительности(ПараметрыДляОпределенияТочногоСрока);
		
	Иначе
		
		СрокЗадачиПроцесса = СрокИсполнения;
		
	КонецЕсли; 
	
	Возврат СрокЗадачиПроцесса;
	
КонецФункции

#Область ПрограммныйИнтерфейс_РасчетСроковПроцессов

// Возвращает график работы для участника процесса.
//
// Параметры:
//  Участник - СправочникСсылка.Пользователи,
//  		   СправочникСсылка.Сотрудники,
//             СправочникСсылка.ПолныеРоли,
//             Строка - участник процесса (пользователь/роль/автоподстановка).
//
Функция ГрафикРаботыУчастникаПроцесса(Участник) Экспорт
	
	Возврат ОбщегоНазначенияДокументооборот.ГрафикРаботыИсполнителя(Участник);
		
КонецФункции    

// Получим Соответствие -Ключ - Участник, Значение - ГрафикРаботы      
//
// Параметры:
//  УчастникиМассив - Массив
//               
//
//  Возвращаемое значение
//  Соответствие
//
Функция КешГрафиковРаботы(УчастникиМассив) Экспорт
	
	КешГрафиковРаботы = Новый Соответствие;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда 
		Возврат КешГрафиковРаботы;
	КонецЕсли;                    
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.ГрафикРаботы КАК ГрафикРаботы,
		|	0 КАК Приоритет
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&Сотрудники)
		|	И НЕ Сотрудники.ГрафикРаботы = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Сотрудники.Ссылка,
		|	ПодчиненностьПодразделений.Вышестоящее.ГрафикРаботы,
		|	ПодчиненностьПодразделений.УровеньВышестоящегоОтПодчиненного + 1
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
		|		ПО Сотрудники.Подразделение = ПодчиненностьПодразделений.Подчиненное
		|ГДЕ
		|	Сотрудники.Ссылка В(&Сотрудники)
		|	И НЕ ЕСТЬNULL(ПодчиненностьПодразделений.Вышестоящее.ГрафикРаботы, ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет
		|ИТОГИ ПО
		|	Сотрудник");
	
	Запрос.УстановитьПараметр("Сотрудники", УчастникиМассив); //Сотрудники.ОсновнойСотрудникПользователя(Сотрудник));

	РезультатЗапроса = Запрос.Выполнить();
	ДеревоВыборки = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	Для Каждого СтрокаСотрудника Из ДеревоВыборки.Строки Цикл
		
		Сотрудник = СтрокаСотрудника.Сотрудник;

		Для Каждого СтрокаГрафика Из СтрокаСотрудника.Строки Цикл			
			
			КешГрафиковРаботы[Сотрудник] = СтрокаГрафика.ГрафикРаботы;
			Прервать; // считаем что первый - самый подходящий
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат КешГрафиковРаботы;
	
КонецФункции	


// Составные процессы

// Возвращает данные действия составного процесса для расчета срока.
//
// Параметры:
//  Действие - БизнесПроцессСсылка, СправочникСсылка.<Имя шаблона процесса> - ссылка на действие
//             составного/комплексногопроцесса процесса/шаблона.
//  ИдентификаторыИзмененныхДействий - Массив - массив идентификаторов измененных действий комплексного процесса/шаблона.
//
// Параметры:
//  Структура - см. СрокиИсполненияПроцессов.ДанныеДляРасчетаСроков
//
Функция ДанныеДляРасчетаСрокаДействияСоставногоПроцесса(
	Действие, ИдентификаторыИзмененныхДействий = Неопределено) Экспорт
	
	ДанныеДляРасчета = Новый Структура;
	
	ТипДействия = ТипЗнч(Действие);
	
	Параметры = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
	Параметры.Смещение = СмещенияДатыОтсчета(Действие);
	
	Если ТипДействия = Тип("СправочникСсылка.ШаблоныИсполнения")
		Или ТипДействия = Тип("БизнесПроцессСсылка.Исполнение") Тогда
		
		СтруктураДляРасчета = СрокиИсполненияПроцессов.
			СтруктураДляРасчетаСрокаПроцессаИсполнения(Действие);
		
		ДанныеДляРасчета = СрокиИсполненияПроцессов.
			ДанныеДляРасчетаСроковПроцессаИсполнения(СтруктураДляРасчета, Параметры);
	
	ИначеЕсли ТипДействия = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов")
		Или ТипДействия = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		
		СтруктураДляРасчета = СтруктураДляРасчетаСрокаКомплексногоПроцесса(Действие);
		
		ДанныеДляРасчета = ДанныеДляРасчетаСроковКомплексногоПроцесса(
			СтруктураДляРасчета, Параметры, ИдентификаторыИзмененныхДействий);
	
	ИначеЕсли ТипДействия = Тип("СправочникСсылка.ШаблоныОзнакомления")
		Или ТипДействия = Тип("БизнесПроцессСсылка.Ознакомление") Тогда
		
		СтруктураДляРасчета = СрокиИсполненияПроцессов.
			СтруктураДляРасчетаСрокаОзнакомления(Действие);
		
		ДанныеДляРасчета = СрокиИсполненияПроцессов.
			ДанныеДляРасчетаСроковОзнакомления(СтруктураДляРасчета, Параметры);
		
	ИначеЕсли ТипДействия = Тип("СправочникСсылка.ШаблоныПриглашения")
		Или ТипДействия = Тип("БизнесПроцессСсылка.Приглашение") Тогда
		
		СтруктураДляРасчета = СтруктураДляРасчетаСрокаПриглашения(Действие);
		ДанныеДляРасчета = ДанныеДляРасчетаСроковПриглашения(СтруктураДляРасчета, Параметры);
		
	ИначеЕсли ТипДействия = Тип("СправочникСсылка.ШаблоныРассмотрения")
		Или ТипДействия = Тип("БизнесПроцессСсылка.Рассмотрение") Тогда
		
		СтруктураДляРасчета = СрокиИсполненияПроцессов.СтруктураДляРасчетаСрокаРассмотрения(Действие);
		
		ДанныеДляРасчета = СрокиИсполненияПроцессов.
			ДанныеДляРасчетаСроковРассмотрения(СтруктураДляРасчета, Параметры);
		
	ИначеЕсли ТипДействия = Тип("СправочникСсылка.ШаблоныРегистрации")
		Или ТипДействия = Тип("БизнесПроцессСсылка.Регистрация") Тогда
		
		СтруктураДляРасчета = СрокиИсполненияПроцессов.СтруктураДляРасчетаСрокаРегистрации(Действие);
		
		ДанныеДляРасчета = СрокиИсполненияПроцессов.
			ДанныеДляРасчетаСроковРегистрации(СтруктураДляРасчета, Параметры);
		
	ИначеЕсли ТипДействия = Тип("СправочникСсылка.ШаблоныСогласования")
		Или ТипДействия = Тип("БизнесПроцессСсылка.Согласование") Тогда
		
		СтруктураДляРасчета = СрокиИсполненияПроцессов.СтруктураДляРасчетаСрокаСогласования(Действие);
		
		ДанныеДляРасчета = СрокиИсполненияПроцессов.
			ДанныеДляРасчетаСроковСогласования(СтруктураДляРасчета, Параметры);
	
	ИначеЕсли ТипДействия = Тип("СправочникСсылка.ШаблоныПодписания")
		Или ТипДействия = Тип("БизнесПроцессСсылка.Подписание") Тогда
		
		СтруктураДляРасчета = СрокиИсполненияПроцессов.СтруктураДляРасчетаСрокаПодписания(Действие);
		
		ДанныеДляРасчета = СрокиИсполненияПроцессов.
			ДанныеДляРасчетаСроковПодписания(СтруктураДляРасчета, Параметры);
		
	ИначеЕсли ТипДействия = Тип("СправочникСсылка.ШаблоныУтверждения")
		Или ТипДействия = Тип("БизнесПроцессСсылка.Утверждение") Тогда
		
		СтруктураДляРасчета = СрокиИсполненияПроцессов.СтруктураДляРасчетаСрокаУтверждения(Действие);
		
		ДанныеДляРасчета = СрокиИсполненияПроцессов.
			ДанныеДляРасчетаСроковУтверждения(СтруктураДляРасчета, Параметры);
		
	КонецЕсли;
	
	Возврат ДанныеДляРасчета;
	
КонецФункции

// Комплексный процесс

// Возвращает структура для расчета срока комплексного процесса/шаблона.
//
// Параметры:
//  Процесс - БизнесПроцессСсылка.КомплексныйПроцесс,
//            СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов,
//            БизнесПроцессОбъект.КомплексныйПроцесс,
//            СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов - объект/ссылка комплексного процесса/шаблона. 
// 
// Возвращаемое значение:
//  Структура - реквизиты и табличные части процесса/шаблона.
//   * Ссылка - БизнесПроцессСсылка.КомплексныйПроцесс,
//              СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов,
//              Неопределено
//   * ИдентификаторСсылки - УникальныйИдентификатор
//   * СрокИсполненияПроцесса - Дата
//   * Этапы - Таблица
//      ** СрокИсполненияПроцесса - Дата - дополнительные колонка, срок исполнения этапа.
//   * ПредшественникиЭтапов
//   * Схема - СправочникСсылка.СхемыПроцессов
//   * ДанныеСхемы - Структура - см. СхемыПроцессовКлиентСервер.СтруктураДанныхСхемыПроцесса
//   * ДанныеПараметровСхемы - Структура - см. Справочник.ПараметрыСхемДляКомплексныхПроцессов.
//                                             СтруктураДанныхПараметровСхемы
//   * ПроцессыЭлементов - Соответствие - см. РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.
//                                         СтруктураПроцессовЭлементов
//   * ТекущиеЭлементы - Соответствие - см. РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.
//                                          СтруктураТекущихЭлементовСхемы
//   * ПройденныеЭлементы - Соответствие - см. РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.
//                                             СтруктураПройденныхЭлементовСхемы
//   * КэшДанныхДействий - Соответствие - см. РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.
//                                            СтруктураКэшаДанныхДействий
//   * ПроцессыДляПрерывания - Структура - см. РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.
//                                             СтруктураПроцессовЭлементовДляПрерывания
//   * СрокиЭлементов - Соответствие - см. РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.
//                                         СтруктураСроковЭлементовСхемы
//
Функция СтруктураДляРасчетаСрокаКомплексногоПроцесса(Объект = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыДляРасчета = Новый Структура(
		"Ссылка,
		|ИдентификаторСсылки,
		|СрокИсполненияПроцесса,
		|Этапы,
		|ПредшественникиЭтапов,
		|Схема,
		|ДанныеСхемы,
		|ДанныеПараметровСхемы,
		|ПроцессыЭлементов,
		|ТекущиеЭлементы,
		|ПройденныеЭлементы,
		|КэшДанныхДействий,
		|ПроцессыДляПрерывания,
		|СрокиЭлементов");
	
	РеквизитыДляРасчета.Ссылка = Неопределено;
	РеквизитыДляРасчета.ИдентификаторСсылки = УникальныйИдентификаторПустой();
	РеквизитыДляРасчета.СрокИсполненияПроцесса = Дата(1,1,1);
	
	РеквизитыДляРасчета.Этапы =
		ОбщегоНазначенияДокументооборот.ТаблицаЗначенийПоМетаданнымТабличнойЧасти(
		Метаданные.БизнесПроцессы.КомплексныйПроцесс.ТабличныеЧасти.Этапы);
	РеквизитыДляРасчета.Этапы.Колонки.Добавить("СрокИсполненияПроцесса", Новый ОписаниеТипов("Дата"));
						
	РеквизитыДляРасчета.ПредшественникиЭтапов =
		ОбщегоНазначенияДокументооборот.ТаблицаЗначенийПоМетаданнымТабличнойЧасти(
		Метаданные.БизнесПроцессы.КомплексныйПроцесс.ТабличныеЧасти.ПредшественникиЭтапов);
	
	РеквизитыДляРасчета.Схема = Справочники.СхемыПроцессов.ПустаяСсылка();
	
	РеквизитыДляРасчета.ДанныеСхемы = СхемыПроцессовКлиентСервер.СтруктураДанныхСхемыПроцесса();
	
	РеквизитыДляРасчета.ДанныеПараметровСхемы =
		Справочники.ПараметрыСхемДляКомплексныхПроцессов.СтруктураДанныхПараметровСхемы();
		
	РеквизитыДляРасчета.ПроцессыЭлементов = 
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураПроцессовЭлементов();
		
	РеквизитыДляРасчета.ТекущиеЭлементы = 
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураТекущихЭлементовСхемы();
		
	РеквизитыДляРасчета.ПройденныеЭлементы = 
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураПройденныхЭлементовСхемы();
		
	РеквизитыДляРасчета.КэшДанныхДействий = 
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураКэшаДанныхДействий();	
	
	РеквизитыДляРасчета.ПроцессыДляПрерывания =
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураПроцессовЭлементовДляПрерывания();
	
	РеквизитыДляРасчета.СрокиЭлементов = 
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураСроковЭлементовСхемы();
		
	Если Объект = Неопределено Тогда
		Возврат РеквизитыДляРасчета;
	КонецЕсли;
		
	ТипОбъекта = ТипЗнч(Объект);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипОбъекта) Тогда
		РеквизитыПроцессаСтрокой = 
			"Ссылка,
			|ИдентификаторСсылки,
			|СрокИсполненияПроцесса,
			|Этапы,
			|ПредшественникиЭтапов,
			|Схема";
			
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект, РеквизитыПроцессаСтрокой);
			
		РеквизитыПроцесса.Этапы = РеквизитыПроцесса.Этапы.Выгрузить();
		РеквизитыПроцесса.Этапы.Сортировать("НомерСтроки Возр");
		
		РеквизитыПроцесса.ПредшественникиЭтапов =
			РеквизитыПроцесса.ПредшественникиЭтапов.Выгрузить();
		
	Иначе
		РеквизитыПроцесса = Объект; 	
	КонецЕсли;
	
	РеквизитыДляРасчета.Ссылка = РеквизитыПроцесса.Ссылка;
	РеквизитыДляРасчета.ИдентификаторСсылки = РеквизитыПроцесса.ИдентификаторСсылки;
	РеквизитыДляРасчета.СрокИсполненияПроцесса = РеквизитыПроцесса.СрокИсполненияПроцесса;
	РеквизитыДляРасчета.Схема = РеквизитыПроцесса.Схема;
	
	Для Каждого СтрокаТаблицы Из РеквизитыПроцесса.Этапы Цикл
		ЗаполнитьЗначенияСвойств(РеквизитыДляРасчета.Этапы.Добавить(), СтрокаТаблицы);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из РеквизитыПроцесса.ПредшественникиЭтапов Цикл
		ЗаполнитьЗначенияСвойств(РеквизитыДляРасчета.ПредшественникиЭтапов.Добавить(), СтрокаТаблицы);
	КонецЦикла;
	
	ЗаполнитьСрокиИсполненияЭтаповКомплексногоПроцесса(РеквизитыДляРасчета.Этапы);
	
	Если ЗначениеЗаполнено(РеквизитыПроцесса.Схема) Тогда
		
		ОбработкаПроцесса = РегистрыСведений.ПроцессыОбработокОбъектов.ОбработкаПоПроцессу(РеквизитыДляРасчета.Ссылка);
		Если Не ЗначениеЗаполнено(ОбработкаПроцесса)
			И ТипОбъекта = Тип("БизнесПроцессОбъект.КомплексныйПроцесс") Тогда
				Объект.ДополнительныеСвойства.Свойство("ОбработкаДокумента", ОбработкаПроцесса);
		КонецЕсли;	
		
		ЭтоПроцессОбработки = ЗначениеЗаполнено(ОбработкаПроцесса);
		
		РеквизитыДляРасчета.ДанныеСхемы = 
			Справочники.СхемыПроцессов.ДанныеСхемыПроцесса(РеквизитыПроцесса.Схема);
		
		РеквизитыДляРасчета.ДанныеПараметровСхемы =
			?(ЭтоПроцессОбработки, Справочники.ПараметрыСхемДляОбработокОбъектов.ДанныеПараметровСхемы(
				Справочники.ПараметрыСхемДляОбработокОбъектов.ПараметрыПоСхеме(РеквизитыПроцесса.Схема)),
					Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(
						Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыПоСхеме(РеквизитыПроцесса.Схема)));
		
		Если Не ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(РеквизитыПроцесса.Ссылка) Тогда
			
			РеквизитыДляРасчета.ПроцессыЭлементов = 
				РаботаСКомплекснымиБизнесПроцессамиСервер.ПроцессыЭлементовСхемыПоКомплексномуПроцессу(
				РеквизитыПроцесса.Ссылка);
				
			РеквизитыДляРасчета.ТекущиеЭлементы =
				РаботаСКомплекснымиБизнесПроцессамиСервер.ТекущиеЭлементыСхемыВПроцессе(
				РеквизитыПроцесса.Ссылка);
				
			РеквизитыДляРасчета.ПройденныеЭлементы =
				РаботаСКомплекснымиБизнесПроцессамиСервер.ПройденныеЭлементыСхемыВПроцессе(
				РеквизитыПроцесса.Ссылка);
			
		КонецЕсли;
		
		ТипыНастроек = Метаданные.ОпределяемыеТипы.ШаблонДействияКомплексногоПроцесса.Тип;
		ДействияИВложенныеПроцессы = Новый Массив;		
		Для Каждого ИмяЭлементаИНастройка Из РеквизитыДляРасчета.ДанныеПараметровСхемы.НастройкиЭлементов Цикл
			ИмяЭлемента = ИмяЭлементаИНастройка.Ключ;
			НастройкаЭлемента = ИмяЭлементаИНастройка.Значение;
			
			Если Не ТипыНастроек.СодержитТип(ТипЗнч(НастройкаЭлемента))
				Или Не ЗначениеЗаполнено(НастройкаЭлемента) Тогда
				
				Продолжить;
			КонецЕсли;
					 
			ДействияИВложенныеПроцессы.Добавить(НастройкаЭлемента);
			
			ПроцессЭлемента = РеквизитыДляРасчета.ПроцессыЭлементов[ИмяЭлемента];
			Если ЗначениеЗаполнено(ПроцессЭлемента) Тогда
				ДействияИВложенныеПроцессы.Добавить(ПроцессЭлемента);
			КонецЕсли;
		КонецЦикла;
		РеквизитыДляРасчета.КэшДанныхДействий =
			РаботаСКомплекснымиБизнесПроцессамиСервер.КэшДанныхДействий(ДействияИВложенныеПроцессы);
		
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЗаполнитьСрокиЭлементовСхемы(
			РеквизитыДляРасчета.СрокиЭлементов,
			РеквизитыДляРасчета.ДанныеПараметровСхемы.НастройкиЭлементов,
			РеквизитыДляРасчета.ПроцессыЭлементов,
			РеквизитыДляРасчета.КэшДанныхДействий,
			РеквизитыДляРасчета.ПроцессыДляПрерывания,
			РеквизитыДляРасчета.ТекущиеЭлементы);
		
	КонецЕсли;
	
	Возврат РеквизитыДляРасчета;
	
КонецФункции

// Возвращает данные для расчета срока процесса КомплексныйПроцесс.
//
// Параметры:
//  Объект - Структура - см. СтруктураДляРасчетаСрокаКомплексногоПроцесса
//  Параметры - Структура - см. СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков
//  ИдентификаторыИзмененныхДействий - Массив
//
// Возвращаемое значение:
//  Структура - см. СрокиИсполненияПроцессов.ДанныеДляРасчетаСроков
//
Функция ДанныеДляРасчетаСроковКомплексногоПроцесса(Объект, Параметры,
	ИдентификаторыИзмененныхДействий = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
		
	// Данные для расчета сроков (возвращаемые данные).
	Сроки = СрокиИсполненияПроцессов.ПустаяТаблицаСроков();
	Предшественники = СрокиИсполненияПроцессов.ПустаяТаблицаПредшественников();
	ИдентификаторыСроков = Новый Соответствие;
	
	// Добавляем дату отсчета.
	СрокиИсполненияПроцессов.ДобавитьДатуОтсчетаВДанныеДляРасчета(
		Сроки, Предшественники, ИдентификаторыСроков, Параметры, Новый Массив);
	
	Если ЗначениеЗаполнено(Объект.Схема) Тогда
		
		ИдентификаторОбъекта = Строка(Объект.ИдентификаторСсылки) + "_";
		
		ТипыНастроек = Метаданные.ОпределяемыеТипы.ШаблонДействияКомплексногоПроцесса.Тип;
		
		// Добавим действия / вложенные процессы схемы в таблицу сроков.
		Для Каждого ИмяЭлементаИНастройка Из Объект.ДанныеПараметровСхемы.НастройкиЭлементов Цикл
			
			ИмяЭлемента = ИмяЭлементаИНастройка.Ключ;
			НастройкаЭлемента = ИмяЭлементаИНастройка.Значение;
			
			Если Не ТипыНастроек.СодержитТип(ТипЗнч(НастройкаЭлемента)) Тогда
				Продолжить;
			КонецЕсли;
			
			ПроцессЭлемента = Объект.ПроцессыЭлементов[ИмяЭлемента];
			
			СостояниеПроцесса = Перечисления.СостоянияБизнесПроцессов.ПустаяСсылка();
			Если ЗначениеЗаполнено(ПроцессЭлемента) Тогда
				ДанныеПроцесса = Объект.КэшДанныхДействий[ПроцессЭлемента];
				СостояниеПроцесса = ДанныеПроцесса.СостояниеПроцесса;
			КонецЕсли;
			
			ОтметкаТекущий = 
				РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭлементСхемыТекущий(
				Объект.ТекущиеЭлементы, ИмяЭлемента);
			
			ОтметкаПройден =
				РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭлементСхемыПройден(
				Объект.ПройденныеЭлементы, ИмяЭлемента);
			
			НастройкаИлиПроцесс = 
				РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.НастройкаИлиПроцессЭлементаСхемы(
				НастройкаЭлемента,
				ПроцессЭлемента,
				ОтметкаТекущий,
				СостояниеПроцесса,
				Объект.ПроцессыДляПрерывания);
			
			СрокиИсполненияЭлемента = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.
				СрокИсполненияЭлемента(Объект.СрокиЭлементов, ИмяЭлемента);
			
			СтрокаСрок = Сроки.Добавить();
			СтрокаСрок.IDСрока = ИдентификаторОбъекта + ИмяЭлемента;
			
			СтрокаСрок.ПодчиненныеСроки = ДанныеДляРасчетаСрокаДействияСоставногоПроцесса(
				НастройкаИлиПроцесс, ИдентификаторыИзмененныхДействий);
			
			СтрокаСрок.СрокИсполнения = СрокиИсполненияЭлемента.СрокИсполненияПроцесса;
			
			СтрокаСрок.Пройден = ОтметкаПройден;
			
		КонецЦикла;
		
		// Получим возможные пути КП.		
		ПутиСхемы = СхемыПроцессовСервер.ПутиСхемыПроцесса(
			СхемыПроцессовКлиентСервер.ИмяЭлементаСтартаСхемы(Объект.ДанныеСхемы),
			СхемыПроцессовСервер.ПредшественникиЭлементовПоДаннымСхемы(Объект.ДанныеСхемы));
		
		// Удалим из путей все элементы кроме действий и вложенных процессов,
		// т.к. только они влияют на рассчет сроков.
		ДопустимыеТипы = Новый Соответствие();
		ДопустимыеТипы[Перечисления.ТипыЭлементовСхемПроцессов.Действие] = Истина;
		ДопустимыеТипы[Перечисления.ТипыЭлементовСхемПроцессов.ВложенныйПроцесс] = Истина;
			
		СхемыПроцессовСервер.ВыделитьПоследовательностиЭлементовВПутях(
			ПутиСхемы, Объект.ДанныеСхемы, ДопустимыеТипы);
		
		// Заполним таблицу предшественников сроков.
		Для Каждого Путь Из ПутиСхемы Цикл
			
			// Каждый путь начинается от старта.
			// И сроком исполнения предшественника для первого действия является
			// дата отсчета.
			ПредшественникЭлемента = УникальныйИдентификаторПустой();
			
			Для Каждого ЭлементПути Из Путь Цикл
				
				СтрПредшественник = Предшественники.Добавить();
				СтрПредшественник.Последователь = ИдентификаторОбъекта + ЭлементПути;
				СтрПредшественник.Предшественник = ПредшественникЭлемента;
				
				ПредшественникЭлемента = СтрПредшественник.Последователь;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Предшественники.Свернуть("Последователь, Предшественник");
		
		// Заполним реквизит Пройден в таблице Сроки.
		Если ЗначениеЗаполнено(ИдентификаторыИзмененныхДействий) Тогда
			
			ПройденныеДействия = Новый Соответствие;
			
			Для Каждого ИдентификаторИзмененныхДействий Из ИдентификаторыИзмененныхДействий Цикл
				
				Если ТипЗнч(ИдентификаторИзмененныхДействий) <> Тип("Строка") Тогда
					Продолжить;
				КонецЕсли;
				
				ИдентификаторыОбъектаИДействия = СтрРазделить(ИдентификаторИзмененныхДействий, "_");
				ИдентификаторДействия = ИдентификаторыОбъектаИДействия[1];
				
				Для Каждого Путь Из ПутиСхемы Цикл
					Если Путь.Найти(ИдентификаторДействия) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					Для Каждого ЭлементПути Из Путь Цикл
						Если ЭлементПути = ИдентификаторДействия Тогда
							Прервать;
						КонецЕсли;
						ПройденныеДействия.Вставить(ИдентификаторИзмененныхДействий, Истина);
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Для Каждого СтрокаСрок Из Сроки Цикл
				Если ПройденныеДействия.Получить(СтрокаСрок.IDСрока) = Истина Тогда
					СтрокаСрок.Пройден = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;		
	
	Иначе
		
		// Добавим этапы в таблицу сроков
		Для Каждого СтрЭтап Из Объект.Этапы Цикл
			
			СтрокаСрок = Сроки.Добавить();
			СтрокаСрок.IDСрока = СтрЭтап.ИдентификаторЭтапа;
			
			ДействиеЭтапа = ДействиеЭтапа(СтрЭтап);
			
			СтрокаСрок.ПодчиненныеСроки = ДанныеДляРасчетаСрокаДействияСоставногоПроцесса(
				ДействиеЭтапа, ИдентификаторыИзмененныхДействий);
			
			СтрокаСрок.СрокИсполнения = СтрЭтап.СрокИсполненияПроцесса;
			
		КонецЦикла;
		
		// Заполним таблицу предшественников
		Для Каждого СтрПредшественникЭтапов Из Объект.ПредшественникиЭтапов Цикл
			
			СтрПредшественник = Предшественники.Добавить();
			СтрПредшественник.Последователь = СтрПредшественникЭтапов.ИдентификаторПоследователя;
			СтрПредшественник.Предшественник = СтрПредшественникЭтапов.ИдентификаторПредшественника;
			
		КонецЦикла;
		
		// Получим возможные пути КП и строки предшественников
		// замыкающие цикл.
		ПараметрыПутей = СрокиИсполненияПроцессовКлиентСерверКОРП.ПараметрыПутей(
			ОбщегоНазначения.ТаблицаЗначенийВМассив(Предшественники));
		
		Пути = ПараметрыПутей.Пути;
		СтрокиПредшественниковЗамыкающиеЦикл = ПараметрыПутей.СтрокиПредшественниковЗамыкающиеЦикл;
		
		// Заполним реквизит Пройден в таблице Сроки
		Если ЗначениеЗаполнено(ИдентификаторыИзмененныхДействий) Тогда
			
			ПройденныеДействия = Новый Соответствие;
			
			Для Каждого ИдентификаторИзмененногоДействия Из ИдентификаторыИзмененныхДействий Цикл
				Для Каждого Путь Из Пути Цикл
					Если Путь.Найти(ИдентификаторИзмененногоДействия) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					Для Каждого Действие Из Путь Цикл
						Если Действие = ИдентификаторИзмененногоДействия Тогда
							Прервать;
						КонецЕсли;
						ПройденныеДействия.Вставить(Действие, Истина);
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
			Для Каждого СтрокаСрок Из Сроки Цикл
				Пройден = ПройденныеДействия.Получить(СтрокаСрок.IDСрока);
				Если Пройден = Истина Тогда
					СтрокаСрок.Пройден = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Удалим строки из таблицы предшественников замыкающие циклы.
		Для Каждого Строка Из СтрокиПредшественниковЗамыкающиеЦикл Цикл
			Отбор = Новый Структура;
			Отбор.Вставить("Предшественник", Строка.Предшественник);
			Отбор.Вставить("Последователь", Строка.Последователь);
			
			НайденныеСтроки = Предшественники.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаКУдалению Из НайденныеСтроки Цикл
				Предшественники.Удалить(СтрокаКУдалению);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Результат = СрокиИсполненияПроцессов.ДанныеДляРасчетаСроков();
	Результат.Ссылка = Объект.Ссылка;
	Результат.ИсходныйСрокИсполнения = Объект.СрокИсполненияПроцесса;
	Результат.Сроки = Сроки;
	Результат.Предшественники = Предшественники;
	Результат.IDРассчитанногоСрок = УникальныйИдентификаторПустой();
	Результат.ИдентификаторыСроков = ИдентификаторыСроков;
	
	Возврат Результат;
	
КонецФункции

// Рассчитывает точные сроки в карточке комплексного процесса / шаблона.
// Помещает рассчитанные сроки в данные формы. 
//  
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма комплексного процесса / шаблона
//
Процедура РассчитатьСрокиКомплексногоПроцессаВКарточке(Форма) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Форма.ДатаОтсчетаДляРасчетаСроков) Тогда
		Возврат;
	КонецЕсли;
		
	// Сформируем структуру для расчета сроков.
	СтруктураДляРасчета = СтруктураДляРасчетаСрокаКомплексногоПроцесса();
	
	СтруктураДляРасчета.Ссылка = Форма.Объект.Ссылка;
	СтруктураДляРасчета.ИдентификаторСсылки = Форма.Объект.ИдентификаторСсылки;
	СтруктураДляРасчета.СрокИсполненияПроцесса = Форма.Объект.СрокИсполненияПроцесса;
	
	Этапы = Форма.Объект.Этапы.Выгрузить();
	ПредшественникиЭтапов = Форма.Объект.ПредшественникиЭтапов.Выгрузить();
	
	ИсключитьУдаленныеЭтапыИзТаблицКомплексногоПроцесса(Этапы, ПредшественникиЭтапов);
	
	Для Каждого СтрокаТаблицы Из Этапы Цикл
		ЗаполнитьЗначенияСвойств(СтруктураДляРасчета.Этапы.Добавить(), СтрокаТаблицы);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ПредшественникиЭтапов Цикл
		ЗаполнитьЗначенияСвойств(СтруктураДляРасчета.ПредшественникиЭтапов.Добавить(), СтрокаТаблицы);
	КонецЦикла;
	
	СтруктураДляРасчета.Схема = Форма.Объект.Схема;
	
	СтруктураДляРасчета.ДанныеСхемы = СхемыПроцессовКлиентСервер.ДанныеСхемыПроцессаИзФормы(Форма);
	
	СтруктураДляРасчета.ДанныеПараметровСхемы =
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ДанныхПараметровСхемыИзФормы(Форма);
		
	СтруктураДляРасчета.ПроцессыЭлементов =
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ПроцессыЭлементовФорме(Форма);
	
	СтруктураДляРасчета.ТекущиеЭлементы =
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ТекущиеЭлементыСхемыФорме(Форма);
		
	СтруктураДляРасчета.ПройденныеЭлементы =
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ПройденныеЭлементыСхемыФорме(Форма);
		
	СтруктураДляРасчета.КэшДанныхДействий =
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.КэшДанныхДействийВФорме(Форма);
	
	СтруктураДляРасчета.СрокиЭлементов =
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СрокиЭлементовСхемыВФорме(Форма);
		
	СтруктураДляРасчета.ПроцессыДляПрерывания =
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ПроцессыЭлементовДляПрерывания(Форма);
	
	// Сформируем параметры для расчета сроков.
	ПараметрыДляРасчета = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
	ПараметрыДляРасчета.ДатаОтсчета = Форма.ДатаОтсчетаДляРасчетаСроков;
	ПараметрыДляРасчета.Смещение =
		СрокиИсполненияПроцессовКлиентСерверКОРП.СмещенияДатыОтсчетаВКарточке(Форма);
	
	ИдентификаторыИзмененныхДействий = Неопределено;
	Если Форма.ИдентификаторыИзмененныхДействий.Количество() > 0 Тогда
		ИдентификаторыИзмененныхДействий = Форма.ИдентификаторыИзмененныхДействий.ВыгрузитьЗначения();
	КонецЕсли;
	
	// Подготовим данные для расчета сроков действий процесса.
	ДанныеДляРасчета = ДанныеДляРасчетаСроковКомплексногоПроцесса(
		СтруктураДляРасчета, ПараметрыДляРасчета, ИдентификаторыИзмененныхДействий);
		
	// Рассчитаем сроки действий процесса.
	СрокиИсполненияПроцессов.РассчитатьСрокиИсполнения(
		ДанныеДляРасчета.Сроки, ДанныеДляРасчета.Предшественники,
		ДанныеДляРасчета.IDРассчитанногоСрок);
	
	ЗаполнитьСрокиКомплексногоПроцессаВКарточке(
		Форма,
		ДанныеДляРасчета.Сроки,
		ДанныеДляРасчета.ИдентификаторыСроков);
	
КонецПроцедуры

// Производит расчет и заполнение сроков в процессе/шаблоне.
// При расчете перезаписываются сроки подчиненных действий.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.КомплексныйПроцесс,
//            СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов - шаблон/процесс.
//  Параметры - Структура - см. СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков
//
Процедура РассчитатьСрокиКомплексногоПроцесса(Объект, Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
		
	Если Не ЗначениеЗаполнено(Параметры.ДатаОтсчета) Тогда
		Возврат;
	КонецЕсли;
		
	СтруктураДляРасчета = СтруктураДляРасчетаСрокаКомплексногоПроцесса(Объект);
	
	// Подготовим данные для расчета сроков действий процесса.
	ДанныеДляРасчета = ДанныеДляРасчетаСроковКомплексногоПроцесса(СтруктураДляРасчета, Параметры);
	
	// Рассчитаем сроки действий процесса.
	СрокиИсполненияПроцессов.РассчитатьСрокиИсполнения(
		ДанныеДляРасчета.Сроки, ДанныеДляРасчета.Предшественники,
		ДанныеДляРасчета.IDРассчитанногоСрок);
	
	// Заполнить сроки в процессе
	ЗаполнитьСрокиКомплексногоПроцесса(
		Объект,
		ДанныеДляРасчета.Сроки,
		ДанныеДляРасчета.ИдентификаторыСроков);
	
КонецПроцедуры

// Заполняет сроки в объекте комплексного процесса/шаблона по таблице с рассчитанными сроками.
// При заполнении перезаписываются сроки подчиненных действий.
//
// Параметры:
//  Объект - БизнесПроцессОбъект.КомплексныйПроцесс,
//           СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов - шаблон/процесс.
//  Сроки - ТаблицаЗначений - таблица с рассчитами сроками. см. СрокиИсполненияПроцессов.ПустаяТаблицаСроков.
//  ИдентификаторыСроков - Соответствие - соответствие идентификаторов сроков и их предназначением
//                                       в процессе.
//
Процедура ЗаполнитьСрокиКомплексногоПроцесса(Объект, Сроки, ИдентификаторыСроков) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЕстьДействияСНеРассчитаннымиСроками = Ложь;
	
	СрокИсполненияВсехДействий = Дата(1,1,1);
		
	Если ЗначениеЗаполнено(Объект.Схема) Тогда
		
		Если Не РаботаСКомплекснымиБизнесПроцессамиСервер.СхемаПринадлежитПроцессу(Объект.Схема) Тогда
			Возврат;
		КонецЕсли;
				
		Для Каждого СтрокаСрок Из Сроки Цикл
			
			РольСрокаВПроцесса = ИдентификаторыСроков.Получить(СтрокаСрок.IDСрока);
			Если РольСрокаВПроцесса = "ДатаОтсчета" Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаСрок.ПодчиненныеСроки.Свойство("Сроки")
				И СтрокаСрок.ПодчиненныеСроки.Свойство("ИдентификаторыСроков")
				И СтрокаСрок.Изменен Тогда
				
				НастройкаИлиПроцесс = СтрокаСрок.ПодчиненныеСроки.Ссылка;
				
				Если ЗначениеЗаполнено(НастройкаИлиПроцесс) Тогда
					
					ЗаблокироватьДанныеДляРедактирования(НастройкаИлиПроцесс);
					
					ОбъектНастройкиИлиПроцесса = НастройкаИлиПроцесс.ПолучитьОбъект();
					
					ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(
						ОбъектНастройкиИлиПроцесса, Объект.ДополнительныеСвойства);
					
					ЗаполнитьСрокиДействияКомплексногоПроцесса(
						ОбъектНастройкиИлиПроцесса,
						СтрокаСрок.ПодчиненныеСроки.Сроки,
						СтрокаСрок.ПодчиненныеСроки.ИдентификаторыСроков);
					
					Если ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(НастройкаИлиПроцесс) Тогда
						ШаблоныБизнесПроцессов.ЗаписатьШаблон(
							ОбъектНастройкиИлиПроцесса, "ПростаяЗапись");
					Иначе
						РаботаСБизнесПроцессами.ЗаписатьПроцесс(
							ОбъектНастройкиИлиПроцесса, "ЗаписьСОбновлениемОбщегоСпискаПроцессов");
					КонецЕсли;
					
					ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(НастройкаИлиПроцесс);
					
					РазблокироватьДанныеДляРедактирования(НастройкаИлиПроцесс);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаСрок.СрокИсполнения) Тогда
				ЕстьДействияСНеРассчитаннымиСроками = Истина;
			КонецЕсли;
			
			Если Не ЕстьДействияСНеРассчитаннымиСроками Тогда
				СрокИсполненияВсехДействий = Макс(СрокИсполненияВсехДействий, СтрокаСрок.СрокИсполнения);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		// Сформируем кэш таблицы этапов.
		КэшТаблицыЭтапов = Новый Соответствие;
		Для Каждого СтрокаТаблицы Из Объект.Этапы Цикл
			КэшТаблицыЭтапов.Вставить(СтрокаТаблицы.ИдентификаторЭтапа, СтрокаТаблицы);
		КонецЦикла;
		
		Для Каждого СтрокаСрок Из Сроки Цикл
			
			РольСрокаВПроцесса = ИдентификаторыСроков.Получить(СтрокаСрок.IDСрока);
			Если РольСрокаВПроцесса = "ДатаОтсчета" Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаСрок.ПодчиненныеСроки.Свойство("Сроки")
				И СтрокаСрок.ПодчиненныеСроки.Свойство("ИдентификаторыСроков")
				И СтрокаСрок.Изменен Тогда
				
				СтрокаЭтапа = КэшТаблицыЭтапов.Получить(СтрокаСрок.IDСрока);
				
				Действие = ДействиеЭтапа(СтрокаЭтапа);
				
				ЗаблокироватьДанныеДляРедактирования(Действие);
				
				ДействиеОбъект = Действие.ПолучитьОбъект();
				
				ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(
					ДействиеОбъект, Объект.ДополнительныеСвойства);
				
				ЗаполнитьСрокиДействияКомплексногоПроцесса(
					ДействиеОбъект,
					СтрокаСрок.ПодчиненныеСроки.Сроки,
					СтрокаСрок.ПодчиненныеСроки.ИдентификаторыСроков);
				
				Если ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(Действие) Тогда
					ШаблоныБизнесПроцессов.ЗаписатьШаблон(ДействиеОбъект, "ПростаяЗапись");
				Иначе
					РаботаСБизнесПроцессами.ЗаписатьПроцесс(ДействиеОбъект, "ЗаписьСОбновлениемОбщегоСпискаПроцессов");
				КонецЕсли;
				
				ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(ДействиеОбъект.Ссылка);
				
				РазблокироватьДанныеДляРедактирования(Действие);
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаСрок.СрокИсполнения) Тогда
				ЕстьДействияСНеРассчитаннымиСроками = Истина;
			КонецЕсли;
			
			Если Не ЕстьДействияСНеРассчитаннымиСроками Тогда
				СрокИсполненияВсехДействий = Макс(СрокИсполненияВсехДействий, СтрокаСрок.СрокИсполнения);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Заполним общий срок процесса.
	Если ЕстьДействияСНеРассчитаннымиСроками Тогда
		Объект.СрокИсполненияПроцесса = Дата(1,1,1);
	Иначе
		Объект.СрокИсполненияПроцесса = СрокИсполненияВсехДействий;
	КонецЕсли;
	
КонецПроцедуры

// Рассчитывает точные сроки комплексного процесса по данным схемы в карточке процесса/шаблона.
// Рассчитанный результата сохраняет во временном хранилище.
// Используется для расчета сроков по команде в карточке процесса/шаблона.
//
// Параметры:
//  ФормаКлиентскогоПриложения - карточка процесса/шаблона со схемой.
//
// Возвращаемое значение:
//  СрокиПроцессовИзменены - Булево - признак изменения сроков процессов действий.
//  АдресХранилищаСРассчитаннымиСроками - Строка - адрес с результатом расчета во
//                                        временном хранилище.
//
Функция РассчитатьТочныеСрокиКомплексногоПроцессаПоСхеме(Форма) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СрокиПроцессовИзменены", Ложь);
	Результат.Вставить("АдресХранилищаСРассчитаннымиСроками", "");
		
	УстановитьПривилегированныйРежим(Истина);
	
	// Сформируем структуру для расчета сроков.
	СтруктураДляРасчета = СтруктураДляРасчетаСрокаКомплексногоПроцесса();
	
	СтруктураДляРасчета.Ссылка = Форма.Объект.Ссылка;
	СтруктураДляРасчета.ИдентификаторСсылки = Форма.Объект.ИдентификаторСсылки;
	СтруктураДляРасчета.СрокИсполненияПроцесса = Форма.Объект.СрокИсполненияПроцесса;
	
	Этапы = Форма.Объект.Этапы.Выгрузить();
	ПредшественникиЭтапов = Форма.Объект.ПредшественникиЭтапов.Выгрузить();
	
	ИсключитьУдаленныеЭтапыИзТаблицКомплексногоПроцесса(Этапы, ПредшественникиЭтапов);
	
	Для Каждого СтрокаТаблицы Из Этапы Цикл
		ЗаполнитьЗначенияСвойств(СтруктураДляРасчета.Этапы.Добавить(), СтрокаТаблицы);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ПредшественникиЭтапов Цикл
		ЗаполнитьЗначенияСвойств(СтруктураДляРасчета.ПредшественникиЭтапов.Добавить(), СтрокаТаблицы);
	КонецЦикла;
	
	СтруктураДляРасчета.Схема = Форма.Объект.Схема;
	
	СтруктураДляРасчета.ДанныеСхемы = СхемыПроцессовКлиентСервер.ДанныеСхемыПроцессаИзФормы(Форма);
	
	СтруктураДляРасчета.ДанныеПараметровСхемы =
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ДанныхПараметровСхемыИзФормы(Форма);
		
	СтруктураДляРасчета.ПроцессыЭлементов =
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ПроцессыЭлементовФорме(Форма);
	
	СтруктураДляРасчета.ТекущиеЭлементы =
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ТекущиеЭлементыСхемыФорме(Форма);
		
	СтруктураДляРасчета.ПройденныеЭлементы =
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ПройденныеЭлементыСхемыФорме(Форма);
		
	СтруктураДляРасчета.КэшДанныхДействий =
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.КэшДанныхДействийВФорме(Форма);
	
	СтруктураДляРасчета.СрокиЭлементов =
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СрокиЭлементовСхемыВФорме(Форма);
		
	СтруктураДляРасчета.ПроцессыДляПрерывания =
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ПроцессыЭлементовДляПрерывания(Форма);
	
	// Сформируем параметры для расчета сроков.
	ПараметрыДляРасчета = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
	ПараметрыДляРасчета.ДатаОтсчета = Форма.ДатаОтсчетаДляРасчетаСроков;
	
	// Подготовим данные для расчета сроков действий процесса.
	
	ДанныеДляРасчета = ДанныеДляРасчетаСроковКомплексногоПроцесса(
		СтруктураДляРасчета, ПараметрыДляРасчета);
	
	// Рассчитаем сроки действий процесса.
	СрокиИсполненияПроцессов.РассчитатьСрокиИсполнения(
		ДанныеДляРасчета.Сроки, ДанныеДляРасчета.Предшественники,
		ДанныеДляРасчета.IDРассчитанногоСрок);
	
	// Помещаем результат рассчета во временное хранилище.
	Результат.АдресХранилищаСРассчитаннымиСроками = 
		ПоместитьВоВременноеХранилище(ДанныеДляРасчета, Форма.УникальныйИдентификатор);
		
	// Определяем Факт изменения сроков процессов при расчете.
	Для Каждого СтрокаТаблицы Из ДанныеДляРасчета.Сроки Цикл
		
		Если Не СтрокаТаблицы.Изменен Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ПодчиненныеСроки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(
			СтрокаТаблицы.ПодчиненныеСроки.Ссылка) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Результат.СрокиПроцессовИзменены = Истина;
		
		Прервать;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Записывает рассчитанные точные сроки комплексного процесса по схеме.
// Сроки записываются в подчиненные действия.
// Вызывается перед записью карточки шаблона или процесса.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка процесса/шаблона.
//  ПроцессОбъект - СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов,
//                  БизнесПроцессОбъект.КомплексныйПроцесс - объект процесса/шаблона.
//  ПараметрыЗаписи - Структура - стандартный параметр обработчика ПередЗаписьюНаСервере.
//
Процедура ЗаписатьРассчитанныеТочныеСрокиКомплексногоПроцессаПоСхеме(
	Форма, ПроцессОбъект, ПараметрыЗаписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыЗаписи.Свойство("ЗаписьТочныхСроковПоСхеме") Тогда
		Возврат;
	КонецЕсли; 
	
	РассчитанныеДанные = ПолучитьИзВременногоХранилища(
		ПараметрыЗаписи.АдресХранилищаСРассчитаннымиСроками);
	
	ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(
		ПроцессОбъект, ПараметрыЗаписи);
	
	ЗаполнитьСрокиКомплексногоПроцесса(
		ПроцессОбъект, РассчитанныеДанные.Сроки, РассчитанныеДанные.ИдентификаторыСроков);
	Форма.Объект.СрокИсполненияПроцесса = ПроцессОбъект.СрокИсполненияПроцесса;
	
	РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьКэшДанныхДействийВФорме(Форма);
	
	Форма.ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

// Приглашение

// Возвращает структура для расчета срока процесса/шаблона Приглашение.
//
// Параметры:
//  СсылкаНаПроцесс - БизнесПроцессОбъект.Приглашение,
//                    СправочникОбъект.ШаблоныПриглашения - ссылка на процесс/шаблон. Если параметр
//                    заполнен, то возвращает структура, заполненная по данным процесса/шаблона.
//
// Возвращаемое значение:
//  Структура - реквизиты и табличные части процесса/шаблона.
//   * Ссылка
//   * КоличествоИтераций
//   * Автор
//   * ВариантУстановкиСрокаОбработкиРезультатов
//   * СрокОбработкиРезультатов
//   * СрокОбработкиРезультатовДни
//   * СрокОбработкиРезультатовЧасы
//   * СрокОбработкиРезультатовМинуты
//   * Исполнители
//   * СрокИсполненияПроцесса
//
Функция СтруктураДляРасчетаСрокаПриглашения(СсылкаНаПроцесс = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыДляРасчета = "Ссылка, КоличествоИтераций, Автор,
			|ВариантУстановкиСрокаОбработкиРезультатов, СрокОбработкиРезультатов,
			|СрокОбработкиРезультатовДни, СрокОбработкиРезультатовЧасы,
			|СрокОбработкиРезультатовМинуты, Исполнители, СрокИсполненияПроцесса";
	
	Если ЗначениеЗаполнено(СсылкаНаПроцесс) Тогда
		СтруктураДляРасчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПроцесс, РеквизитыДляРасчета);
		СтруктураДляРасчета.Исполнители = СтруктураДляРасчета.Исполнители.Выгрузить();
	Иначе
		СтруктураДляРасчета = Новый Структура(РеквизитыДляРасчета);
	КонецЕсли;
	
	Возврат СтруктураДляРасчета;
	
КонецФункции

// Возвращает данные для расчета срока процесса Приглашение.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.Приглашение,
//            СправочникОбъект.ШаблоныПриглашения - шаблон/процесс.
//            Структура - см. СтруктураДляРасчетаСрокаПриглашения
//  Параметры - Структура - см. СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков
//
// Возвращаемое значение:
//  Структура - см. СрокиИсполненияПроцессов.ДанныеДляРасчетаСроков
//
Функция ДанныеДляРасчетаСроковПриглашения(Процесс, Параметры) Экспорт
	
	ДатаОтсчета = Параметры.ДатаОтсчета;
	Смещение = Параметры.Смещение;
	РеквизитТаблицаСИзмененнымСроком = Параметры.РеквизитТаблицаСИзмененнымСроком;
	ИндексСтроки = Параметры.ИндексСтроки;
	ТекущаяИтерация = Параметры.ТекущаяИтерация;
	
	// Данные для расчета сроков (возвращаемые данные).
	Сроки = СрокиИсполненияПроцессов.ПустаяТаблицаСроков();
	Предшественники = СрокиИсполненияПроцессов.ПустаяТаблицаПредшественников();
	ИдентификаторыСроков = Новый Соответствие;
	
	// Определим изменение сроков
	ИзмененныеСрокиПроцесса = СрокиИсполненияПроцессов.ИзмененныеСрокиПроцесса(Процесс, Параметры);
	ИндексИзменнойСтроки = ИзмененныеСрокиПроцесса.ИндексИзменнойСтроки;
	СрокАвтораИзменен = ИзмененныеСрокиПроцесса.СрокАвтораИзменен;
	
	// Переменные для формирования таблиц предшественников.
	ПредшественникиТекущегоЭтапа = Новый Массив;
	ПредшественникиСледующегоЭтапа = Новый Массив;
	
	// Добавляем дату отсчета.
	СрокиИсполненияПроцессов.ДобавитьДатуОтсчетаВДанныеДляРасчета(
		Сроки, Предшественники, ИдентификаторыСроков,
		Параметры, ПредшественникиСледующегоЭтапа);
		
	// Определим количество итераций и номер текущей итерации.
	Если СрокиИсполненияПроцессов.ВПроцессеЕстьТочныеСрокиИсполнения(Процесс) Тогда
		КоличествоИтераций = 1;
		ТекущаяИтерация = 1;
	Иначе
		КоличествоИтераций = Процесс.КоличествоИтераций;
	КонецЕсли;
	
	ИдентификаторыСроковДляТекИтерации = ИдентификаторыСроков;
	ИндексИзменнойСтрокиДляТекИтерации = ИндексИзменнойСтроки;
	СрокАвтораИзмененДляТекИтерации = СрокАвтораИзменен;
	
	КоличествоИсполнителей = Процесс.Исполнители.Количество();
	
	Пока ТекущаяИтерация <= КоличествоИтераций Цикл
		
		// Добавляем таблицу исполнителей
		СрокиИсполненияПроцессов.ДобавитьСрокиТаблицыИсполнителиПроцессаВДанныеДляРасчета(
			Сроки, Предшественники,
			Процесс.Исполнители,
			ИндексИзменнойСтрокиДляТекИтерации,
			ПредшественникиСледующегоЭтапа,
			ИдентификаторыСроковДляТекИтерации);
		
		Если КоличествоИсполнителей > 0 Тогда
			// Добавляем срок проверяющего
			
			СрокиИсполненияПроцессов.ДобавитьСрокАвтораВДанныеДляРасчета(
				Сроки, Предшественники,
				Процесс,
				СрокАвтораИзмененДляТекИтерации,
				ПредшественникиСледующегоЭтапа,
				ИдентификаторыСроковДляТекИтерации,
				"СрокАвтора");
		КонецЕсли;
		
		ТекущаяИтерация = ТекущаяИтерация + 1;
		
		ИдентификаторыСроковДляТекИтерации = Неопределено;
		ИндексИзменнойСтрокиДляТекИтерации = -1;
		СрокАвтораИзмененДляТекИтерации = Истина;
	КонецЦикла;
	
	IDПоследнегоРассчитанногоСрока = 
		СрокиИсполненияПроцессов.IDПоследнегоРассчитанногоСрока(Сроки, Предшественники);
		
	Результат = СрокиИсполненияПроцессов.ДанныеДляРасчетаСроков();
	Результат.Ссылка = Процесс.Ссылка;
	Результат.ИсходныйСрокИсполнения = Процесс.СрокИсполненияПроцесса;
	Результат.Сроки = Сроки;
	Результат.Предшественники = Предшественники;
	Результат.IDРассчитанногоСрок = IDПоследнегоРассчитанногоСрока;
	Результат.ИдентификаторыСроков = ИдентификаторыСроков;
	
	Возврат Результат;
	
КонецФункции

// Производит расчет и заполнение сроков в процессе/шаблоне/структуре процесса.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.Приглашение,
//            СправочникОбъект.ШаблоныПриглашения - шаблон/процесс.
//            Структура - см. СтруктураДляРасчетаСрокаПриглашения
//  Параметры - Структура - см. СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков
//
Процедура РассчитатьСрокиПриглашения(Процесс, Параметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Параметры.ДатаОтсчета) Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовим данные для рассчета сроков участников процесса.
	ДанныеДляРассчета = ДанныеДляРасчетаСроковПриглашения(Процесс, Параметры);
	
	// Рассчитаем сроки участников процессов.
	РассчитатьСрокиИсполнения(
		ДанныеДляРассчета.Сроки, ДанныеДляРассчета.Предшественники,
		ДанныеДляРассчета.IDРассчитанногоСрок);
		
	// Заполнить сроки в процессе
	ЗаполнитьСрокиПриглашения(
		Процесс,
		ДанныеДляРассчета.Сроки,
		ДанныеДляРассчета.ИдентификаторыСроков,
		Параметры.ЗаполнятьСрокПроцессаТолькоПриПревышении);
	
КонецПроцедуры

// Заполняет сроки в процессе/шаблоне/структуре процесса по таблице с рассчитанными сроками.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект.Приглашение,
//            СправочникОбъект.ШаблоныПриглашения - шаблон/процесс.
//            Структура - см. СтруктураДляРасчетаСрокаПриглашения
//  Сроки - ТаблицаЗначений - таблица с рассчитами сроками. см. СрокиИсполненияПроцессов.ПустаяТаблицаСроков.
//  ИдентификаторыСроков - Соответствие - соответствие идентификаторов сроков и их предназначением
//                                       в процессе.
//  ЗаполнятьТолькоПриПревышении - Булево - признак указывающий, что срок исполнения процесса
//                                          заполняется только, если новый рассчитанный срок больше
//                                          предыдущего.
//
Процедура ЗаполнитьСрокиПриглашения(Процесс, Сроки, ИдентификаторыСроков,
	ЗаполнятьТолькоПриПревышении = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СрокИсполненияПроцессаВсемиУчастниками = Дата(1,1,1);
	
	ВариантыУстановкиСрокаИсполнения = СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	Для Каждого СтрокаСрок Из Сроки Цикл
		
		РольСрокаВПроцесса = ИдентификаторыСроков.Получить(СтрокаСрок.IDСрока);
		
		Если РольСрокаВПроцесса = "ДатаОтсчета" Тогда
			Продолжить;
		ИначеЕсли РольСрокаВПроцесса = "СрокАвтора" Тогда
			Если Процесс.ВариантУстановкиСрокаОбработкиРезультатов
				= Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок Тогда
			
				Процесс.СрокОбработкиРезультатовДни = СтрокаСрок.СрокИсполненияДни;
				Процесс.СрокОбработкиРезультатовЧасы = СтрокаСрок.СрокИсполненияЧасы;
				Процесс.СрокОбработкиРезультатовМинуты = СтрокаСрок.СрокИсполненияМинуты;
			Иначе
				Процесс.СрокОбработкиРезультатов = СтрокаСрок.СрокИсполнения;
			КонецЕсли;
		ИначеЕсли СтрНачинаетсяС(РольСрокаВПроцесса, "Исполнители") Тогда
			
			ИндексИсполнителя = Число(СтрЗаменить(РольСрокаВПроцесса, "Исполнители_", ""));
			
			Если Процесс.Исполнители[ИндексИсполнителя].ВариантУстановкиСрокаИсполнения
				= ВариантыУстановкиСрокаИсполнения.ТочныйСрок Тогда
				
				Процесс.Исполнители[ИндексИсполнителя].СрокИсполненияДни = СтрокаСрок.СрокИсполненияДни;
				Процесс.Исполнители[ИндексИсполнителя].СрокИсполненияЧасы = СтрокаСрок.СрокИсполненияЧасы;
				Процесс.Исполнители[ИндексИсполнителя].СрокИсполненияМинуты = СтрокаСрок.СрокИсполненияМинуты;
			Иначе
				Процесс.Исполнители[ИндексИсполнителя].СрокИсполнения = СтрокаСрок.СрокИсполнения;
			КонецЕсли;
			
		КонецЕсли;
		
		СрокИсполненияПроцессаВсемиУчастниками = 
			Макс(СрокИсполненияПроцессаВсемиУчастниками, СтрокаСрок.СрокИсполнения);
		
	КонецЦикла;
	
	Если Не СрокиИсполненияПроцессов.СрокиУчастниковПроцессаКорректны(Процесс) Тогда
		СрокИсполненияПроцессаВсемиУчастниками = Дата(1,1,1);
	КонецЕсли;
	
	Если ЗаполнятьТолькоПриПревышении Тогда
		
		Процесс.СрокИсполненияПроцесса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Процесс.Ссылка, "СрокИсполненияПроцесса");
		
		Процесс.СрокИсполненияПроцесса = 
			Макс(Процесс.СрокИсполненияПроцесса, СрокИсполненияПроцессаВсемиУчастниками);
		
	Иначе
		Процесс.СрокИсполненияПроцесса = СрокИсполненияПроцессаВсемиУчастниками;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_РасчетДлительностиПроцессов

// Возвращает параметры для определения длительности комплексного процесса.
// 
// Возвращаемое значение:
//  Структура
//   * Ссылка - СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов,
//               БизнесПроцессСсылка.КомплексныйПроцесс - ссылка на процесс/шаблон. 
//   * ДанныеСхемы - Структура - см. Справочники.СхемыПроцессов.ДанныеСхемыПроцесса
//   * СрокиЭлементов - Соответствие -
//           см. РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураСроковЭлементовСхемы
//  
Функция ПараметрыДляОпределенияДлительностиКомплексногоПроцессаСоСхемой() Экспорт
	
	ПараметрыДляОпределенияДлительности = Новый Структура;
	ПараметрыДляОпределенияДлительности.Вставить("Ссылка", Неопределено);
	
	ПараметрыДляОпределенияДлительности.Вставить("ДанныеСхемы",
		СхемыПроцессовКлиентСервер.СтруктураДанныхСхемыПроцесса());
	
	ПараметрыДляОпределенияДлительности.Вставить("СрокиЭлементов",
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураСроковЭлементовСхемы());
	
	Возврат ПараметрыДляОпределенияДлительности;
	
КонецФункции

// Проверяет тип переданных параметров, возвращает Истину, если это структура
// с составом полей как в ПараметрыДляОпределенияДлительностиКомплексногоПроцессаСоСхемой.
// 
// Параметры:
//  Объект - любой объект. 
// 
// Возвращаемое значение:
//  Булево
//  
Функция ЭтоПараметрыДляОпределенияДлительностиКомплексногоПроцессаСоСхемой(Объект) Экспорт
	
	ТипОбъект = ТипЗнч(Объект);
	
	Если ТипОбъект <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//@skip-warning
	Если Не Объект.Свойство("Ссылка")
		Или Не Объект.Свойство("ДанныеСхемы")
		Или Не Объект.Свойство("СрокиЭлементов") Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает смещение даты отсчета для расчета срока процесса/шаблона.
//
//  Процесс - СправочникСсыка,
//            БизнесПроцессСсылка, - ссылка на процесс/шаблон.
//
// Возвращаемое значение:
//  Дата - дата отложенного старта процесса, если был передан процесс.
//  Число - срок отложенного страта шаблона процесса, если был передан шаблон.
//
Функция СмещенияДатыОтсчета(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(Процесс) Тогда
		СрокОтложенногоСтарта = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Процесс, "СрокОтложенногоСтарта");
		Возврат СрокОтложенногоСтарта;
	Иначе
		НастройкаСтарта = РегистрыСведений.НастройкиОтложеногоСтартаПроцессов.ПолучитьСведенияОЗапускеПроцесса(Процесс);
		Если ЗначениеЗаполнено(НастройкаСтарта) Тогда
			Возврат НастройкаСтарта.ДатаОтложенногоСтарта;
		Иначе
			Возврат Дата(1,1,1);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Возвращает длительность исполнения процесса/шаблона в днях, часах и минутах.
//
// Используется для переопределения одноименной функции в модуле СрокиИсполненияПроцессов.
// Вместо текущей следует использовать функцию из модуля СрокиИсполненияПроцессов.
//
// Параметры:
//  Объект - СправочникСсыка,
//           БизнесПроцессСсылка,
//           СправочникОбъект,
//           БизнесПроцессОбъект,
//           ДанныеФормыСтруктура,
//           Структура - ссылка или объект на процесс/шаблон,
//                       либо структура с необходимыми полями для вычисления длительности.
//  Смещение - Число - смещение даты отсчета процесса в секундах.
//
// Возвращаемое значение:
//  Структура
//   * СрокИсполненияПроцессаДни - Число
//   * СрокИсполненияПроцессаЧасы - Число
//   * СрокИсполненияПроцессаМинуты - Число
//
Функция ДлительностьИсполненияПроцесса(Объект, Знач Смещение = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Длительность = Новый Структура;
	
	ТипОбъекта = ТипЗнч(Объект);
	ЭтоСсылкаНаОбъект = ОбщегоНазначения.ЭтоСсылка(ТипОбъекта);
	
	СсылкаНаОбъект = Объект;
	Если Не ЭтоСсылкаНаОбъект Тогда
		ТипОбъекта = ТипЗнч(Объект.Ссылка);
		СсылкаНаОбъект = Объект.Ссылка;
	КонецЕсли;
	
	Если Смещение <> Неопределено Тогда
		Смещение = Смещение;
	Иначе
		Смещение = СмещенияДатыОтсчета(СсылкаНаОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Смещение) Тогда
		Если ТипЗнч(Смещение) = Тип("Число") Тогда
			Смещение = Смещение;
		Иначе
			ТекущаяДатаСеанса = ТекущаяДатаСеанса();
			ТекущаяДатаСеанса = ТекущаяДатаСеанса - Секунда(ТекущаяДатаСеанса);
			Если ТекущаяДатаСеанса < Смещение Тогда
				Смещение = Смещение - ТекущаяДатаСеанса;
			Иначе
				Смещение = 0;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Смещение = 0;
	КонецЕсли;
	
	Если ТипОбъекта = Тип("СправочникСсылка.ШаблоныИсполнения") Тогда
		
		Длительность = СрокиИсполненияПроцессов.ДлительностьИсполненияПроцессаИсполнения(Объект);
		
	ИначеЕсли ТипОбъекта = Тип("БизнесПроцессСсылка.КомплексныйПроцесс")
		Или ТипОбъекта = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов") Тогда
		
		Длительность = ДлительностьИсполненияКомплексногоПроцесса(Объект);
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ШаблоныОзнакомления") Тогда
		
		Длительность = СрокиИсполненияПроцессов.ДлительностьИсполненияОзнакомления(Объект);
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ШаблоныПриглашения") Тогда
		
		Длительность = ДлительностьИсполненияПриглашения(Объект);
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ШаблоныРассмотрения") Тогда
		
		Длительность = СрокиИсполненияПроцессов.ДлительностьИсполненияРассмотрения(Объект);
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ШаблоныРегистрации") Тогда
		
		Длительность = СрокиИсполненияПроцессов.ДлительностьИсполненияРегистрации(Объект);
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ШаблоныСогласования") Тогда
		
		Длительность = СрокиИсполненияПроцессов.ДлительностьИсполненияСогласования(Объект);
	
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ШаблоныПодписания") Тогда
		
		Длительность = СрокиИсполненияПроцессов.ДлительностьИсполненияПодписания(Объект);
		
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ШаблоныУтверждения") Тогда
		
		Длительность = СрокиИсполненияПроцессов.ДлительностьИсполненияУтверждения(Объект);
		
	КонецЕсли;
	
	КоличествоРабочихЧасовВДне = 
		СрокиИсполненияПроцессов.КоличествоРабочихЧасовПользователя(Неопределено);
	
	СмещениеДни = Цел(Смещение / 86400);
	СмещениеЧасы = Цел((Смещение % 86400) / 3600);
	
	Длительность = Длительность
		+ СмещениеДни * КоличествоРабочихЧасовВДне * 60
		+ СмещениеЧасы * 60;
	
	Длительность = 
		СрокиИсполненияПроцессов.ДлительностьВДняхЧасахМинутах(Длительность, КоличествоРабочихЧасовВДне);
	
	Результат = Новый Структура;
	Результат.Вставить("СрокИсполненияПроцессаДни", Длительность.Дни);
	Результат.Вставить("СрокИсполненияПроцессаЧасы", Длительность.Часы);
	Результат.Вставить("СрокИсполненияПроцессаМинуты", Длительность.Минуты);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_ПереносСроков

// Проверяет изменение срока процесса в карточке шаблона процесса.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка шаблона процесса.
//
Процедура ПроверитьИзменениеСроковВКарточкеШаблонаПроцесса(Форма) Экспорт
	
	Если Не Форма.КомплексныйПроцессСтартован Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСроковПроцессаДляПроверки = 
		СрокиИсполненияПроцессов.СтруктураСроковПроцессаДляПроверкиИзменения();
	
	СтруктураСроковПроцессаДляПроверки.Ссылка = Форма.Объект.Ссылка;
	
	СтруктураСроковПроцессаДляПроверки.СрокИсполненияПроцесса = Форма.Объект.СрокИсполненияПроцесса;
	
	СрокиИсполненияПроцессов.ПроверитьИзменениеСроковПроцесса(
		Форма.Объект.Ссылка,
		СтруктураСроковПроцессаДляПроверки,
		Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_КарточкиПроцессовИШаблонов

// Возвращает ширину для полей со сроком для комплексного процесса.
//
// Параметры:
//  Форма - УправляемаяФормы - форма процесса/шаблона.
//
// Возвращаемое значение:
//  Число
//
Функция ШиринаПоляСрокИсполненияДействияКомплексногоПроцесса(Форма) Экспорт
	
	ОтобразитьДатуИВремя = СрокиИсполненияПроцессовКлиентСерверКОРП.КомандаРасчетаСрокаДоступна(Форма)
		Или ЗначениеЗаполнено(Форма.ДатаОтсчетаДляРасчетаСроков);
	
	Если ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(Форма.Объект.Ссылка) Тогда
		ОтобразитьДатуИВремя = ОтобразитьДатуИВремя
			И Не Форма.КомплексныйПроцессСтартован;
	Иначе
		ОтобразитьДатуИВремя = ОтобразитьДатуИВремя
			И Не Форма.Объект.Стартован;
	КонецЕсли;
	
	Если ОтобразитьДатуИВремя Тогда
		ШиринаПоляСрокЭтапа = 15;
		Если Форма.ИспользоватьДатуИВремяВСрокахЗадач Тогда
			ШиринаПоляСрокЭтапа = 25;
		КонецЕсли;
	Иначе
		ШиринаПоляСрокЭтапа = 10;
		Если Форма.ИспользоватьДатуИВремяВСрокахЗадач Тогда
			ШиринаПоляСрокЭтапа = 15;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ШиринаПоляСрокЭтапа;
	
КонецФункции

/////////////////////////////////
// Условное оформление

// Возвращает соответствие запущенных действий комплексного процесса
// и их дат завершения.
//
// Параметры:
//  Процесс - БизнесПроцессСсылка.КомплексныйПроцесс - ссылка на процесс.
//
// Возвращаемое значение:
//  Соответствие
//   * Ключ - БизнесПроцессСсылка - ссылка на действие комплексного процесса.
//   * Значение - Дата - дата завершения.
//
Функция ДатыЗавершенияДействийКомплексногоПроцесса(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатыЗавершенияЭтапов = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеБизнесПроцессов.БизнесПроцесс КАК Действие,
		|	ДанныеБизнесПроцессов.ДатаЗавершения
		|ИЗ
		|	РегистрСведений.ДочерниеБизнесПроцессы КАК ДочерниеБизнесПроцессы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ПО ДочерниеБизнесПроцессы.ДочернийПроцесс = ДанныеБизнесПроцессов.БизнесПроцесс
		|ГДЕ
		|	ДочерниеБизнесПроцессы.РодительскийПроцесс = &РодительскийПроцесс";
		
	Запрос.УстановитьПараметр("РодительскийПроцесс", Процесс);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДатыЗавершенияЭтапов.Вставить(Выборка.Действие, Выборка.ДатаЗавершения);
	КонецЦикла;
	
	Возврат ДатыЗавершенияЭтапов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает структуру параметров срока исполнения для определения длительности
// функцией ДлительностьПоСрокуИсполнения.
//
// Используется для переопределения одноименной функции в модуле СрокиИсполненияПроцессов.
// Вместо текущей следует использовать функцию из модуля СрокиИсполненияПроцессов.
//
// Возвращаемое значение:
//  Структура
//   * СрокИсполнения - Дата
//   * ДатаОтсчета - Дата
//   * ГрафикРаботы - СправочникСсылка.ГрафикиРаботы
//
Функция ПараметрыСрокаИсполненияДляОпределенияДлительности() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("СрокИсполнения", Дата(1,1,1));
	Параметры.Вставить("ДатаОтсчета", Дата(1,1,1));
	Параметры.Вставить("ГрафикРаботы", Справочники.ГрафикиРаботы.ПустаяСсылка());
	
	Возврат Параметры
	
КонецФункции

// Возвращает длительность (количество дней, часов, минут) по сроку исполнения.
//
// Используется для переопределения одноименной функции в модуле СрокиИсполненияПроцессов.
// Вместо текущей следует использовать функцию из модуля СрокиИсполненияПроцессов.
//
// Параметры:
//  ПараметрыСрокаИсполнения - Структура - см. функцию ПараметрыСрокаИсполненияДляОпределенияДлительности.
//
// Возвращаемое значение:
//  Структура
//   * Дни - Число - количество дней.
//   * Часы - Число - количество часов.
//   * Минуты - Число - количество минут.
//
Функция ДлительностьПоСрокуИсполнения(ПараметрыСрокаИсполнения) Экспорт
	
	ДлительностьИсполнения = Новый Структура;
	ДлительностьИсполнения.Вставить("Дни", 0);
	ДлительностьИсполнения.Вставить("Часы", 0);
	ДлительностьИсполнения.Вставить("Минуты", 0);
	
	СрокИсполнения = ПараметрыСрокаИсполнения.СрокИсполнения;
	ДатаОтсчета = ПараметрыСрокаИсполнения.ДатаОтсчета;
	ГрафикРаботы = ПараметрыСрокаИсполнения.ГрафикРаботы;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ГрафикРаботы", ГрафикРаботы);
	
	СрокиИсполненияПроцессов.СкорректироватьДатуОтсчета(ДатаОтсчета, ДопПараметры);
	
	Дни = 0;
	Часы = 0;
	Минуты = 0;
	
	Если ЗначениеЗаполнено(ГрафикРаботы) Тогда
		
		КоличествоРабочихЧасовВДне = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ГрафикРаботы, "КоличествоРабочихЧасовВДне");
			
		ДлительностьРабочегоДня = 3600 * КоличествоРабочихЧасовВДне;
		
		ДатаНачала = ДатаОтсчета;
		ДатаОкончания = СрокИсполнения;
		
		ИнтервалыРабочегоВремени = ГрафикиРаботы.СформироватьТаблицуРабочегоВремени(
			ГрафикРаботы, ДатаНачала, ДатаОкончания);
		
		ДлительностьИсполненияВСекундах = ИнтервалыРабочегоВремени.Итог("Длительность");
		
	Иначе
		ДлительностьРабочегоДня = 86400;
		ДлительностьИсполненияВСекундах = СрокИсполнения - ДатаОтсчета;
		
		// Корректировка длительности рабочего для.
		// Нужно для корректного вычисления относительного срока.
		// Точный срок равный концу дня, то последней день должен включаться полностью.
		Если СрокИсполнения = КонецДня(СрокИсполнения) Тогда
			ДлительностьИсполненияВСекундах = ДлительностьИсполненияВСекундах + 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДлительностьИсполненияВСекундах > 0 И ДлительностьРабочегоДня > 0 Тогда
		
		Дни = Цел(ДлительностьИсполненияВСекундах / ДлительностьРабочегоДня);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда
			Часы = Цел((ДлительностьИсполненияВСекундах - Дни * ДлительностьРабочегоДня) / 3600);
			Минуты = Окр((ДлительностьИсполненияВСекундах - Дни * ДлительностьРабочегоДня - Часы * 3600) / 60);
		КонецЕсли;
	КонецЕсли;
	
	ДлительностьИсполнения.Дни = Дни;
	ДлительностьИсполнения.Часы = Часы;
	ДлительностьИсполнения.Минуты = Минуты;
	
	Возврат ДлительностьИсполнения;
	
КонецФункции

// Возвращает структуру параметров длительности исполнения для определения точного срока
// функцией СрокИсполненияПоДлительности.
//
// Используется для переопределения одноименной функции в модуле СрокиИсполненияПроцессов.
// Вместо текущей следует использовать функцию из модуля СрокиИсполненияПроцессов.
//
// Возвращаемое значение:
//  Структура
//   * Дни - Число
//   * Часы - Число
//   * Минуты - Число
//   * ДатаОтсчета - Дата
//   * ГрафикРаботы - СправочникСсылка.ГрафикиРаботы
//
Функция ПараметрыДлительностиИсполненияДляОпределенияТочногоСрока() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Дни", 0);
	Параметры.Вставить("Часы", 0);
	Параметры.Вставить("Минуты", 0);
	Параметры.Вставить("ДатаОтсчета", Дата(1,1,1));
	Параметры.Вставить("ГрафикРаботы", Справочники.ГрафикиРаботы.ПустаяСсылка());
	
	Возврат Параметры
	
КонецФункции

// Возвращает срок исполнения датой по длительности (срок в секундах).
//
// Используется для переопределения одноименной функции в модуле СрокиИсполненияПроцессов.
// Вместо текущей следует использовать функцию из модуля СрокиИсполненияПроцессов.
//
// Параметры:
//  ПараметрыДлительностиИсполнения - Структура - см. функцию ПараметрыДлительностиИсполненияДляОпределенияТочногоСрока.
//
// Возвращаемое значение:
//   Дата
//
Функция СрокИсполненияПоДлительности(ПараметрыДлительностиИсполнения) Экспорт
	
	СрокИсполнения = Дата(1,1,1);
	
	Дни = ПараметрыДлительностиИсполнения.Дни;
	Часы = ПараметрыДлительностиИсполнения.Часы;
	Минуты = ПараметрыДлительностиИсполнения.Минуты;
	ДатаОтсчета = ПараметрыДлительностиИсполнения.ДатаОтсчета;
	ГрафикРаботы = ПараметрыДлительностиИсполнения.ГрафикРаботы;
	
	Если Дни = 0 И Часы = 0 И Минуты = 0 Тогда
		Возврат СрокИсполнения;
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ГрафикРаботы", ГрафикРаботы);
	
	СрокиИсполненияПроцессов.СкорректироватьДатуОтсчета(ДатаОтсчета, ДопПараметры);
	
	ИспользоватьДатуИВремяВСрокахЗадач = 
		ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	
	Если ЗначениеЗаполнено(ГрафикРаботы) Тогда
		
		РеквизитыГрафикаРаботы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ГрафикРаботы, "Календарь, КоличествоРабочихЧасовВДне");
			
		Календарь = РеквизитыГрафикаРаботы.Календарь;
		КоличествоРабочихЧасовВДне = РеквизитыГрафикаРаботы.КоличествоРабочихЧасовВДне;
		
		Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
			
			СрокВСекундах = Дни * 3600 * КоличествоРабочихЧасовВДне + Часы * 3600 + Минуты * 60;
			
			ДатаНачала = ДатаОтсчета;
			ДатаОкончания = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, ДатаОтсчета, Дни);
			ДатаОкончания = КонецДня(ДатаОкончания);
			
			Пока СрокВСекундах > 0 Цикл
				
				ИнтервалыРабочегоВремени = ГрафикиРаботы.СформироватьТаблицуРабочегоВремени(
					ГрафикРаботы, ДатаНачала, ДатаОкончания);
			
				Для Каждого Интервал Из ИнтервалыРабочегоВремени Цикл
					
					Если СрокВСекундах = 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если СрокВСекундах > Интервал.Длительность Тогда
						СрокВСекундах = СрокВСекундах - Интервал.Длительность;
					Иначе
						СрокИсполнения = Интервал.ДатаНачала + СрокВСекундах;
						СрокВСекундах = 0;
					КонецЕсли;
					
				КонецЦикла;
				
				Если СрокВСекундах = 0 Тогда
					Прервать;
				КонецЕсли;
				
				ДатаНачала = ДатаОкончания;
				ДатаОкончания = КалендарныеГрафики.ПолучитьДатуПоКалендарю(
					Календарь, ДатаОкончания, 2);
					
				ДатаОкончания = КонецДня(ДатаОкончания);
				
			КонецЦикла;
			
		Иначе
			// Срок исполнения с учетом того, что время должно равняться концу дня.
			СрокИсполнения = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, ДатаОтсчета, Дни - 1);
			СрокИсполнения = КонецДня(СрокИсполнения);
		КонецЕсли;
		
	Иначе
		
		СрокВСекундах = Дни * 86400;
		Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
			СрокВСекундах = СрокВСекундах + Часы * 3600 + Минуты * 60;
		Иначе
			// Корректировка срока на последнюю секунду дня.
			// Предполагается, что если не используется время в сроках, то оно
			// равно концу дня.
			СрокВСекундах = СрокВСекундах - 1;
		КонецЕсли;
		
		СрокИсполнения = ДатаОтсчета + СрокВСекундах;
		
	КонецЕсли;
	
	Возврат СрокИсполнения;
	
КонецФункции

// Возвращает дату от которой следует производить расчет сроков в процессе.
//
// Используется для переопределения одноименной функции в модуле СрокиИсполненияПроцессов.
// Вместо текущей следует использовать функцию из модуля СрокиИсполненияПроцессов.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект, ДанныеФормыСтруктура - процесс.
//  ТочкаМаршрутаВозвратаНаДоработку -  ТочкаМаршрутаБизнесПроцессаСсылка - точка маршрута процесса
//                                     в которой создается задача ознакомления с возможность
//                                     отправить процесс на следующий цикл.
//  ДляНовойИтерации - Булево - если передано значение Истина, то будет возвращена текущая дата.
//
// Возвращаемое значение:
//  Дата - дата отсчета для расчета сроков процесса.
//
Функция ДатаОтсчетаДляРасчетаСроковПроцесса(Процесс,
	ТочкаМаршрутаВозвратаНаДоработку = Неопределено,
	ДляНовойИтерации = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Процесс)) Тогда
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Процесс, "Ссылка, ДатаНачала, Стартован, ВедущаяЗадача");
	Иначе
		РеквизитыПроцесса = Процесс;
	КонецЕсли;
	
	ДатаОтсчета = ТекущаяДатаСеанса();
	
	Если ЗначениеЗаполнено(РеквизитыПроцесса.Ссылка)
		И РеквизитыПроцесса.Стартован
		И Не ДляНовойИтерации Тогда
		
		ДатаОтсчета = РеквизитыПроцесса.ДатаНачала;
		
		Если ЗначениеЗаполнено(РеквизитыПроцесса.ВедущаяЗадача) Тогда
			
			ВедущийПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыПроцесса.ВедущаяЗадача, "БизнесПроцесс");
			
			Если ТипЗнч(ВедущийПроцесс) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
				
				СрокЗавершенияПредущихДействий = СрокЗавершенияПредущихДействийКомплексногоПроцесса(
					РеквизитыПроцесса.Ссылка, ВедущийПроцесс);
				
				Если ЗначениеЗаполнено(СрокЗавершенияПредущихДействий) Тогда
					ДатаОтсчета = СрокЗавершенияПредущихДействий;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТочкаМаршрутаВозвратаНаДоработку) Тогда
		
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	МАКСИМУМ(ЗадачаИсполнителя.ДатаИсполнения) КАК ДатаИсполнения
				|ИЗ
				|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
				|ГДЕ
				|	ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута
				|	И ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс";
			Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрутаВозвратаНаДоработку);
			Запрос.УстановитьПараметр("БизнесПроцесс", РеквизитыПроцесса.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ДатаИсполнения)Тогда
				ДатаОтсчета = Выборка.ДатаИсполнения;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДатаОтсчета;
	
КонецФункции

// Возвращает максимальный срок завершения всех предыдущих действий
// комплексного процесса.
//
// Параметры:
//  Действие - БизнесПроцессСсылка - действие комплексного процесса,
//             для которого определяет срок завершения предшественников.
//  КомплексныйПроцесс - БизнесПроцессСсылка.КомплексныйПроцесс - комплексный процесс действия.
//
// Возвращаемое значение:
//  Дата
//
Функция СрокЗавершенияПредущихДействийКомплексногоПроцесса(Действие, КомплексныйПроцесс)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СрокЗавершенияПредущихДействий = Дата(1,1,1);
	
	РеквизитыКомплексногоПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		КомплексныйПроцесс, "Схема, Этапы, ПредшественникиЭтапов");
	
	ПредшествующиеДействия = Новый Массив;
	
	// Получим все предшествующие действия текущему.
	Если ЗначениеЗаполнено(РеквизитыКомплексногоПроцесса.Схема) Тогда
		
		ДанныеСхемы = Справочники.СхемыПроцессов.ДанныеСхемыПроцесса(
			РеквизитыКомплексногоПроцесса.Схема);
		ОбработкаПроцесса = РегистрыСведений.ПроцессыОбработокОбъектов.ОбработкаПоПроцессу(КомплексныйПроцесс);
		ДействияЭлементов = Новый Соответствие;
		Если ЗначениеЗаполнено(ОбработкаПроцесса) Тогда
			ДанныеПараметров = Справочники.ПараметрыСхемДляОбработокОбъектов.ДанныеПараметровСхемы( 
				Справочники.ПараметрыСхемДляОбработокОбъектов.ПараметрыПоСхеме(
				РеквизитыКомплексногоПроцесса.Схема));
			ДанныеВидовДействий = РаботаСПроцессамиПоОбработкамОбъектов.
				ДанныхВидовДействийОбработкиОбъекта(Неопределено, ОбработкаПроцесса);
			Для Каждого СтрДанные Из ДанныеВидовДействий Цикл
				ДействияЭлементов.Вставить(СтрДанные.ВидДействия, СтрДанные.Действие);
			КонецЦикла;
		Иначе	
			ДанныеПараметров = Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы( 
				Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыПоСхеме(
				РеквизитыКомплексногоПроцесса.Схема));
		КонецЕсли;
			
		ПроцессыЭлементов = 
			РаботаСКомплекснымиБизнесПроцессамиСервер.ПроцессыЭлементовСхемыПоКомплексномуПроцессу(
			КомплексныйПроцесс);
			
		ИмяЭлемента = "";
		Для Каждого ИмяЭлементаИПроцесс Из ПроцессыЭлементов Цикл
			Если ИмяЭлементаИПроцесс.Значение = Действие Тогда
				ИмяЭлемента = ИмяЭлементаИПроцесс.Ключ;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ИмяЭлемента) Тогда
			
			ТипыЭлементовСхемПроцессов = Перечисления.ТипыЭлементовСхемПроцессов;
			
			ТипыПредшествующихЭлементов = Новый Соответствие();
			ТипыПредшествующихЭлементов[ТипыЭлементовСхемПроцессов.Действие] = Истина;
			ТипыПредшествующихЭлементов[ТипыЭлементовСхемПроцессов.ВложенныйПроцесс] = Истина;
					
			ИменаПредшествующихЭлементов = 
				СхемыПроцессовКлиентСервер.ИменаПредшествующихЭлементовВСхеме(
				ДанныеСхемы.Схема,
				СхемыПроцессовКлиентСервер.ТипыВсехЭлементовПоДаннымСхемы(ДанныеСхемы),
				ИмяЭлемента,
				ТипыПредшествующихЭлементов);
			
			Для Каждого ПредшествующийЭлемент Из ИменаПредшествующихЭлементов Цикл
				
				НастройкаЭлемента = ДанныеПараметров.НастройкиЭлементов[ПредшествующийЭлемент];
				ПроцессЭлемента = ПроцессыЭлементов[ПредшествующийЭлемент];
				ДействиеЭлемента = ДействияЭлементов[НастройкаЭлемента];
				
				Если ЗначениеЗаполнено(ПроцессЭлемента) Тогда
					ПредшествующиеДействия.Добавить(ПроцессЭлемента);
				ИначеЕсли ЗначениеЗаполнено(ДействиеЭлемента) Тогда
					ПредшествующиеДействия.Добавить(ДействиеЭлемента);
				ИначеЕсли Не ТипЗнч(НастройкаЭлемента) = Тип("СправочникСсылка.ВидыДействий") Тогда
					ПредшествующиеДействия.Добавить(НастройкаЭлемента);
				КонецЕсли;;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
	
		Этапы = РеквизитыКомплексногоПроцесса.Этапы.Выгрузить();
		ПредшественникиЭтапов = РеквизитыКомплексногоПроцесса.ПредшественникиЭтапов.Выгрузить();
			
		СтрокаЭтапа = Этапы.Найти(Действие, "ЗапущенныйБизнесПроцесс");
		
		Если СтрокаЭтапа <> Неопределено Тогда
			
			ОтборПредшественников = Новый Структура;
			ОтборПредшественников.Вставить("ИдентификаторПоследователя", СтрокаЭтапа.ИдентификаторЭтапа);
			Предшественники = ПредшественникиЭтапов.НайтиСтроки(ОтборПредшественников);
			
			Для Каждого СтрПредшественник Из Предшественники Цикл
				СтрЭтапПредшественника = 
					Этапы.Найти(СтрПредшественник.ИдентификаторПредшественника);
					
				Если СтрЭтапПредшественника = Неопределено Тогда
					Продолжить;
				КонецЕсли;
					
				Если ЗначениеЗаполнено(СтрЭтапПредшественника.ЗапущенныйБизнесПроцесс) Тогда
					ПредшествующиеДействия.Добавить(СтрЭтапПредшественника.ЗапущенныйБизнесПроцесс);
				Иначе
					ПредшествующиеДействия.Добавить(СтрЭтапПредшественника.ШаблонБизнесПроцесса);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Получим сроки исполнения предшествующих действий.
	
	Если ПредшествующиеДействия.Количество() > 0 Тогда
	
		ШаблонТекстаЗапросаПроцессов = 
			"ВЫБРАТЬ
			|	ТаблицаДействий.Ссылка КАК Действие,
			|	ТаблицаДействий.СрокИсполненияПроцесса КАК СрокИсполнения,
			|	ТаблицаДействий.ДатаЗавершения КАК ДатаЗавершения
			|ИЗ
			|	#ТаблицаДействий КАК ТаблицаДействий
			|ГДЕ
			|	ТаблицаДействий.Ссылка В(&Действия)";
		
		ШаблонТекстаЗапросаДействий = 
			"ВЫБРАТЬ
			|	ТаблицаДействий.Ссылка КАК Действие,
			|	ТаблицаДействий.СрокДействия КАК СрокИсполнения,
			|	ЕСТЬNULL(СостоянияДействий.Дата, ТаблицаДействий.СрокДействия) КАК ДатаЗавершения
			|ИЗ
			|	#ТаблицаДействий КАК ТаблицаДействий
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДействий КАК СостоянияДействий
			|		ПО ТаблицаДействий.Ссылка = СостоянияДействий.Действие
			|		И СостоянияДействий.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено),
			|			ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Пропущено))
			|ГДЕ
			|	ТаблицаДействий.Ссылка В (&Действия)";	
		
		ШаблонТекстаЗапросаДействияОзнакомления = 
		"ВЫБРАТЬ
		|	ТаблицаДействий.Ссылка КАК Действие,
		|	ДАТАВРЕМЯ(1,1,1) КАК СрокИсполнения,
		|	ЕСТЬNULL(СостоянияДействий.Дата, ДАТАВРЕМЯ(1,1,1)) КАК ДатаЗавершения
		|ИЗ
		|	#ТаблицаДействий КАК ТаблицаДействий
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДействий КАК СостоянияДействий
		|		ПО ТаблицаДействий.Ссылка = СостоянияДействий.Действие
		|		И СостоянияДействий.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Завершено),
		|			ЗНАЧЕНИЕ(Перечисление.СостоянияВыполненияДействий.Пропущено))
		|ГДЕ
		|	ТаблицаДействий.Ссылка В (&Действия)";	
		
		
		ШаблонТекстаЗапросаНастроек = 
			"ВЫБРАТЬ
			|	ТаблицаДействий.Ссылка КАК Действие,
			|	ТаблицаДействий.СрокИсполненияПроцесса КАК СрокИсполнения,
			|	ТаблицаДействий.СрокИсполненияПроцесса КАК ДатаЗавершения
			|ИЗ
			|	#ТаблицаДействий КАК ТаблицаДействий
			|ГДЕ
			|	ТаблицаДействий.Ссылка В(&Действия)";	
			
		ДобавленныеТипыВЗапрос = Новый Соответствие;
		
		ТекстЗапроса = "";
		Разделитель = "";
		
		Для Каждого ДействиеПредшественник Из ПредшествующиеДействия Цикл
			
			ТипДействия = ТипЗнч(ДействиеПредшественник);
			
			Если ДобавленныеТипыВЗапрос.Получить(ТипДействия) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяТаблицыПоСсылке = ОбщегоНазначения.ИмяТаблицыПоСсылке(ДействиеПредшественник);
			
			ДобавленныеТипыВЗапрос.Вставить(ДействиеПредшественник, ИмяТаблицыПоСсылке);			
			
			Если ОбщегоНазначения.ЭтоБизнесПроцесс(ДействиеПредшественник.Метаданные()) Тогда
				ТекстЗапроса = ТекстЗапроса
					+ Разделитель
					+ СтрЗаменить(ШаблонТекстаЗапросаПроцессов, "#ТаблицаДействий", ИмяТаблицыПоСсылке);
			ИначеЕсли ДействияКлиентСервер.ЭтоДействиеОзнакомления(ДействиеПредшественник) Тогда
				ТекстЗапроса = ТекстЗапроса
				+ Разделитель
				+ СтрЗаменить(ШаблонТекстаЗапросаДействияОзнакомления, "#ТаблицаДействий", ИмяТаблицыПоСсылке);
			ИначеЕсли ДействияКлиентСервер.ЭтоДействие(ДействиеПредшественник) Тогда
				ТекстЗапроса = ТекстЗапроса
					+ Разделитель
					+ СтрЗаменить(ШаблонТекстаЗапросаДействий, "#ТаблицаДействий", ИмяТаблицыПоСсылке);
			Иначе	
				ТекстЗапроса = ТекстЗапроса
					+ Разделитель
					+ СтрЗаменить(ШаблонТекстаЗапросаНастроек, "#ТаблицаДействий", ИмяТаблицыПоСсылке);
			КонецЕсли;	
			
			Разделитель = "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|";
			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Действия", ПредшествующиеДействия);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СрокИсполнения = ?(ЗначениеЗаполнено(Выборка.ДатаЗавершения), Выборка.ДатаЗавершения, Выборка.СрокИсполнения);
			СрокЗавершенияПредущихДействий = Макс(СрокЗавершенияПредущихДействий, СрокИсполнения);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СрокЗавершенияПредущихДействий;
	
КонецФункции

// Корректирует дату отсчета для вычисления сроков исполнения.
//
// Используется для переопределения одноименной процедуры в модуле СрокиИсполненияПроцессов.
// Вместо текущей следует использовать процедуру из модуля СрокиИсполненияПроцессов.
//
// Параметры:
//  ДатаОтсчета - ДатаИВремя - дата отсчета.
//  ДопПарметры - Структура - дополнительные параметры для корректировки.
//   * ГрафикРаботы - СправочникСсылка.ГрафикиРаботы
//
Процедура СкорректироватьДатуОтсчета(ДатаОтсчета, ДопПарметры) Экспорт
	
	ГрафикРаботы = ДопПарметры.ГрафикРаботы;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда
		
		// Убираем секунды из даты отсчета
		СрокиИсполненияПроцессовКлиентСервер.УбратьСекундыВДате(ДатаОтсчета);
		
		// Смещение даты отсчета по графику работ.
		Если ЗначениеЗаполнено(ГрафикРаботы) Тогда
			
			ВремяДатыОтсчета = Дата(1,1,1) + Час(ДатаОтсчета) * 3600 + Минута(ДатаОтсчета) * 60;
			
			ВремяНачалаИОкончанияДатыОтсчета = 
				ГрафикиРаботы.ПолучитьНачалоИОкончаниеРабочегоДня(ДатаОтсчета, ГрафикРаботы);
				
			// Если время даты отсчета совпадает с окончанием рабочего дня, то смещаем дату отсчета
			// на начало следующего дня.
			Если ВремяДатыОтсчета = ВремяНачалаИОкончанияДатыОтсчета.ОкончаниеДня Тогда
				ДатаОтсчета = ДатаОтсчета + 1;
			КонецЕсли;
			
			// Смещаем дату отсчета к первому времени раб. дня.
			ДатаОтсчета = ГрафикиРаботы.ПолучитьПервоеРабочееВремяДня(ГрафикРаботы, ДатаОтсчета);
			
		КонецЕсли;
		
	Иначе
		
		ВремяДатыОтсчета = Дата(1,1,1) + Час(ДатаОтсчета) * 3600 + Минута(ДатаОтсчета) *60;
		
		Если ЗначениеЗаполнено(ГрафикРаботы) Тогда
			
			ВремяНачалаИОкончанияДатыОтсчета = 
				ГрафикиРаботы.ПолучитьНачалоИОкончаниеРабочегоДня(ДатаОтсчета, ГрафикРаботы);
			
			Если ВремяДатыОтсчета > ВремяНачалаИОкончанияДатыОтсчета.НачалоДня Тогда
				ДатаОтсчета = НачалоДня(ДатаОтсчета) + 86400;
			Иначе
				ДатаОтсчета = НачалоДня(ДатаОтсчета);
			КонецЕсли;
			
			// Смещение даты отсчета по графику работ.
			ДатаОтсчета = ГрафикиРаботы.ПолучитьПервоеРабочееВремяДня(ГрафикРаботы, ДатаОтсчета);
			ДатаОтсчета = НачалоДня(ДатаОтсчета);
			
		Иначе
			// Смещение даты отсчета на начало следующего дня, если
			// дата отсчета больше начала рабочего дня (9.00).
			Если ВремяДатыОтсчета > Дата(1,1,1) + 9 * 3600 Тогда
				ДатаОтсчета = НачалоДня(ДатаОтсчета) + 86400;
			Иначе
				ДатаОтсчета = НачалоДня(ДатаОтсчета);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет строки из таблицы Этапы помеченные на удаление (с полем Удален = Истина) и соотвествующие
// им строки в таблице ПредшественникиЭтапов.
//
Процедура ИсключитьУдаленныеЭтапыИзТаблицКомплексногоПроцесса(Этапы, ПредшественникиЭтапов)
	
	// Исключим из обработки все удаленные этапы
	ИндексЭтапа = Этапы.Количество() - 1;
	Пока ИндексЭтапа >= 0 Цикл
		ТекущийЭтап = Этапы[ИндексЭтапа];
		Если ТекущийЭтап.Удален Тогда
			
			Отбор = Новый Структура;
			Отбор.Вставить("ИдентификаторПоследователя", ТекущийЭтап.ИдентификаторЭтапа);
			СтркиКУдалению = ПредшественникиЭтапов.НайтиСтроки(Отбор);
			Для Каждого СтрКУдалению Из СтркиКУдалению Цикл
				ПредшественникиЭтапов.Удалить(СтрКУдалению);
			КонецЦикла;
			
			Отбор = Новый Структура;
			Отбор.Вставить("ИдентификаторПредшественника", ТекущийЭтап.ИдентификаторЭтапа);
			СтркиКУдалению = ПредшественникиЭтапов.НайтиСтроки(Отбор);
			Для Каждого СтрКУдалению Из СтркиКУдалению Цикл
				ПредшественникиЭтапов.Удалить(СтрКУдалению);
			КонецЦикла;
			
			Этапы.Удалить(ТекущийЭтап);
		КонецЕсли;
		ИндексЭтапа = ИндексЭтапа - 1;
	КонецЦикла;
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции_РасчетСроковПроцессов

// Возвращает структуру параметров для расчета сроков процесса.
//
// Используется для переопределения одноименной функции в модуле СрокиИсполненияПроцессов.
// Вместо текущей следует использовать функцию из модуля СрокиИсполненияПроцессов.
//
// Возвращаемое значение:
//  Структура
//   * ДатаОтсчета - Дата
//   * РеквизитТаблицаСИзмененнымСроком - Строка
//   * ИндексСтроки - Строка
//   * ТекущаяИтерация - Число
//   * ЗаполнятьСрокПроцессаТолькоПриПревышении - Булево
//
Функция ПараметрыДляРасчетаСроков() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ДатаОтсчета", Дата(1,1,1));
	Параметры.Вставить("РеквизитТаблицаСИзмененнымСроком", "");
	Параметры.Вставить("ИндексСтроки", 0);
	Параметры.Вставить("ТекущаяИтерация", 1);
	Параметры.Вставить("ЗаполнятьСрокПроцессаТолькоПриПревышении", Ложь);
	Параметры.Вставить("Смещение", 0);
	
	Возврат Параметры;
	
КонецФункции

// Возвращает пустую таблицу для расчета сроков процесса.
// Используется в процедуре РассчитатьСрокиИсполнения.
//
// Используется для переопределения одноименной функции в модуле СрокиИсполненияПроцессов.
// Вместо текущей следует использовать функцию из модуля СрокиИсполненияПроцессов.
//
// Возвращаемое значение:
//  ТаблицаЗначений
//   * IDСрока - строка с путым идентификатором является датой отсчета в текущей таблице.
//   * ГрафикРаботы - СправочникСсылка.ГрафикиРаботы
//   * СрокИсполнения - Дата
//   * СрокИсполненияДни - Число
//   * СрокИсполненияЧасы - Число
//   * СрокИсполненияМинуты - Число
//   * ВариантУстановкиСрокаИсполнения - ПеречислениеСсылка.ВариантыУстановкиСрокаИсполнения
//   * Пройден - Булево
//   * ПодчиненныеСроки - Структура
//      ** Сроки - см. ПустаяТаблицаСроков()
//      ** Предшественники - см. ПустаяТаблицаПредшественников()
//      ** IDРассчитанногоСрок - строка с рассчитанным сроком.
//
Функция ПустаяТаблицаСроков() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("УникальныйИдентификатор"));
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповУникальныйИдентификатор = Новый ОписаниеТипов(МассивТипов);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ГрафикиРаботы"));
	ОписаниеТиповГрафикиРаботы = Новый ОписаниеТипов(МассивТипов);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло = Новый ОписаниеТипов(МассивТипов);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.ВариантыУстановкиСрокаИсполнения"));
	ОписаниеТиповВариантыУстановкиСрокаИсполнения = Новый ОписаниеТипов(МассивТипов);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Булево"));
	ОписаниеТиповБулево = Новый ОписаниеТипов(МассивТипов);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Структура"));
	ОписаниеТиповСтруктура = Новый ОписаниеТипов(МассивТипов);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	МассивТипов.Добавить(Тип("Дата"));
	ОписаниеТиповЧислоДата = Новый ОписаниеТипов(МассивТипов);
	
	Сроки = Новый ТаблицаЗначений();
	Сроки.Колонки.Добавить("IDСрока", ОписаниеТиповУникальныйИдентификатор);
	Сроки.Колонки.Добавить("ГрафикРаботы", ОписаниеТиповГрафикиРаботы);
	Сроки.Колонки.Добавить("СрокИсполнения", ОписаниеТиповДата);
	Сроки.Колонки.Добавить("СрокИсполненияДни", ОписаниеТиповЧисло);
	Сроки.Колонки.Добавить("СрокИсполненияЧасы", ОписаниеТиповЧисло);
	Сроки.Колонки.Добавить("СрокИсполненияМинуты", ОписаниеТиповЧисло);
	
	Сроки.Колонки.Добавить("ВариантУстановкиСрокаИсполнения",
		ОписаниеТиповВариантыУстановкиСрокаИсполнения);
	
	Сроки.Колонки.Добавить("Пройден", ОписаниеТиповБулево);
	Сроки.Колонки.Добавить("Изменен", ОписаниеТиповБулево);
	Сроки.Колонки.Добавить("ПодчиненныеСроки", ОписаниеТиповСтруктура);
	
	Сроки.Колонки.Добавить("Смещение", ОписаниеТиповЧислоДата);
	
	Возврат Сроки;
	
КонецФункции

// Возвращает структуру измененных сроков процесса.
//
// Используется для переопределения одноименной функции в модуле СрокиИсполненияПроцессов.
// Вместо текущей следует использовать функцию из модуля СрокиИсполненияПроцессов.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект,
//            СправочникОбъект.Шаблон<Имя шаблона процесса>,
//            ДанныеФормыСтуктура - процесс или шаблон процесса.
//  Параметры - Структура - см. функцию ПараметрыДляРасчетаСроков
//
// Возвращаемое значение:
//  Структура - измененные сроки процесса/шаблона.
//   * СрокАвтораИзменен - Булево
//   * СрокПроверяющегоИзменен - Булево
//   * СрокИсполнителяИзменен - Булево
//   * СрокПомощникаИзменен - Булево
//   * ИндексИзменнойСтроки - Число - индекс измененной строки Исполнители.
//
Функция ИзмененныеСрокиПроцесса(Процесс, Параметры) Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("СрокАвтораИзменен", Ложь);
	Результат.Вставить("СрокПроверяющегоИзменен", Ложь);
	Результат.Вставить("СрокПомощникаИзменен", Ложь);
	Результат.Вставить("СрокИсполнителяИзменен", Ложь);
	Результат.Вставить("ИндексИзменнойСтроки", 0);
	
	РеквизитТаблицаСИзмененнымСроком = Параметры.РеквизитТаблицаСИзмененнымСроком;
	ИндексСтроки = Параметры.ИндексСтроки;
	
	МетаданныеПроцесса = Процесс.Ссылка.Метаданные();
	ЕстьТаблицаИсполнители = МетаданныеПроцесса.ТабличныеЧасти.Найти("Исполнители") <> Неопределено;
	
	Если ЕстьТаблицаИсполнители Тогда
		
		КоличествоИсполнителей = Процесс.Исполнители.Количество();
		
		Результат.ИндексИзменнойСтроки = КоличествоИсполнителей;
		
		Если РеквизитТаблицаСИзмененнымСроком = ""
			Или РеквизитТаблицаСИзмененнымСроком = "НастройкаСтарта"
			Или РеквизитТаблицаСИзмененнымСроком = "ОписаниеОтложенногоСтарта"
			Или РеквизитТаблицаСИзмененнымСроком = "ВариантИсполнения" Тогда
			
			Результат.ИндексИзменнойСтроки = 0;
			Результат.СрокАвтораИзменен = Истина;
			Результат.СрокПроверяющегоИзменен = Истина;
			Результат.СрокПомощникаИзменен = Истина;
			
		ИначеЕсли РеквизитТаблицаСИзмененнымСроком = "Автор"
			Или РеквизитТаблицаСИзмененнымСроком = "Проверяющий"
			Или РеквизитТаблицаСИзмененнымСроком = "СрокОбработкиРезультатов" Тогда
			
			Результат.СрокАвтораИзменен = Истина;
			Результат.СрокПроверяющегоИзменен = Истина;
			
		ИначеЕсли РеквизитТаблицаСИзмененнымСроком = "Исполнители" Тогда
			
			Результат.ИндексИзменнойСтроки = ИндексСтроки;
			Если Результат.ИндексИзменнойСтроки < КоличествоИсполнителей Тогда
				Результат.СрокАвтораИзменен = Истина;
				Результат.СрокПроверяющегоИзменен = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если РеквизитТаблицаСИзмененнымСроком = ""
			Или РеквизитТаблицаСИзмененнымСроком = "НастройкаСтарта"
			Или РеквизитТаблицаСИзмененнымСроком = "ОписаниеОтложенногоСтарта"
			Или РеквизитТаблицаСИзмененнымСроком = "Исполнитель"
			Или РеквизитТаблицаСИзмененнымСроком = "СрокИсполнения" Тогда
			
			Результат.СрокИсполнителяИзменен = Истина;
			Результат.СрокАвтораИзменен = Истина;
			Результат.СрокПроверяющегоИзменен = Истина;
			Результат.СрокПомощникаИзменен = Истина;
			
		ИначеЕсли РеквизитТаблицаСИзмененнымСроком = "Автор"
			Или РеквизитТаблицаСИзмененнымСроком = "Проверяющий"
			Или РеквизитТаблицаСИзмененнымСроком = "СрокОбработкиРезультатов"
			Или РеквизитТаблицаСИзмененнымСроком = "КоличествоИтераций" Тогда
			
			Результат.СрокАвтораИзменен = Истина;
			Результат.СрокПроверяющегоИзменен = Истина;
			Результат.СрокПомощникаИзменен = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Добавляет дату отсчета в данные для расчета сроков.
// Дата отсчета должна добавляться всегда первой строкой.
// Дате отсчета соответствует уникальный идентификатор пустой.
//
// Используется для переопределения одноименной процедуры в модуле СрокиИсполненияПроцессов.
// Вместо текущей следует использовать процедуру из модуля СрокиИсполненияПроцессов.
//
// Параметры:
//  Сроки - ТаблицаЗначений - см. функцию ПустаяТаблицаСроков.
//  Предшественники - ТаблицаЗначений - см. функцию ПустаяТаблицаПредшественников.
//  ИдентификаторыСроков - Соответствие - соответствие идентификаторов сроков (ключ) и их описания (значение).
//  ПараметрыДляРасчета - Структура - см. функцию ПараметрыДляРасчетаСроков.
//  ПредшественникиСледующегоЭтапа - Массив - предшественники для след. исполнителей.
//
Процедура ДобавитьДатуОтсчетаВДанныеДляРасчета(
	Сроки, Предшественники, ИдентификаторыСроков, ПараметрыДляРасчета,
	ПредшественникиСледующегоЭтапа) Экспорт
	
	IDДатыОтсчета = УникальныйИдентификаторПустой();
	ИдентификаторыСроков.Вставить(IDДатыОтсчета, "ДатаОтсчета");
	
	СтрокаСрок = Сроки.Добавить();
	СтрокаСрок.IDСрока = IDДатыОтсчета;
	СтрокаСрок.СрокИсполнения = ПараметрыДляРасчета.ДатаОтсчета;
	СтрокаСрок.Смещение = ПараметрыДляРасчета.Смещение;
	СтрокаСрок.ВариантУстановкиСрокаИсполнения = Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
	СтрокаСрок.Пройден = Истина; // считаем, что дата отсчета всегда рассчитана в таблице и ее пересчет не требуется.
	
	// Дата отсчета всегда является предшественников для следующих
	// участников.
	ПредшественникиСледующегоЭтапа.Добавить(IDДатыОтсчета);
	
КонецПроцедуры

// Добавляет сроки участника в данные для расчета сроков.
//
// Используется для переопределения одноименной процедуры в модуле СрокиИсполненияПроцессов.
// Вместо текущей следует использовать процедуру из модуля СрокиИсполненияПроцессов.
//
// Параметры:
//  Сроки - ТаблицаЗначений - см. функцию ПустаяТаблицаСроков.
//  Предшественники - ТаблицаЗначений - см. функцию ПустаяТаблицаПредшественников.
//  ПараметрыСрокаУчастника - Структура
//   * Участник - СправочникСсылка.Пользователи, СправочникСсылка.РолиИсполнителей
//   * СрокИсполнения - Дата
//   * СрокИсполненияДни - Число
//   * СрокИсполненияЧасы - Число
//   * СрокИсполненияМинуты - Число
//   * ВариантУстановкиСрока - ПеречислениеСсылка.ВариантыУстановкиСрокаИсполнения
//  СрокУчастникаИзменен - Булево - признак того, что срок исполнения изменился.
//  ПредшественникиСледующегоЭтапа - Массив - предшественники для след. исполнителей.
//  ИдентификаторыСроков - Соответствие - соответствие идентификаторов сроков (ключ) и их описания (значение).
//  ИмяИдентификатораСрока - Строка - описание (роль) срока в процессе.
//
Процедура ДобавитьСрокУчастникаПроцессаВДанныеДляРасчета(
	Сроки, Предшественники,
	ПараметрыСрокаУчастника,
	СрокУчастникаИзменен,
	ПредшественникиСледующегоЭтапа,
	ИдентификаторыСроков = Неопределено,
	ИмяИдентификатораСрока = Неопределено) Экспорт
	
	Участник = ПараметрыСрокаУчастника.Участник;
	СрокИсполнения = ПараметрыСрокаУчастника.СрокИсполнения;
	СрокИсполненияДни = ПараметрыСрокаУчастника.СрокИсполненияДни;
	СрокИсполненияЧасы = ПараметрыСрокаУчастника.СрокИсполненияЧасы;
	СрокИсполненияМинуты = ПараметрыСрокаУчастника.СрокИсполненияМинуты;
	ВариантУстановкиСрока = ПараметрыСрокаУчастника.ВариантУстановкиСрока;
	
	ПредшественникиТекущегоЭтапа = 
		ОбщегоНазначения.СкопироватьРекурсивно(ПредшественникиСледующегоЭтапа);
	ПредшественникиСледующегоЭтапа.Очистить();
	
	IDТекущегоСрокаИсполнения = Новый УникальныйИдентификатор;
	
	СтрокаСрок = Сроки.Добавить();
	СтрокаСрок.IDСрока = IDТекущегоСрокаИсполнения;
	
	ГрафикРаботы = ГрафикРаботыУчастникаПроцесса(
		Сотрудники.ЛюбойПользовательСотрудника(Участник));
	СтрокаСрок.ГрафикРаботы = ГрафикРаботы;
	
	СтрокаСрок.СрокИсполнения = СрокИсполнения;
	СтрокаСрок.СрокИсполненияДни = СрокИсполненияДни;
	СтрокаСрок.СрокИсполненияЧасы = СрокИсполненияЧасы;
	СтрокаСрок.СрокИсполненияМинуты = СрокИсполненияМинуты;
	
	// Если таблица сроков заполняется не для первой итерации,
	// то всем срокам устанавливается относительный срок,
	// т.к. по точному сроку расчет возможен только на первой или текущей итерации.
	Если ИдентификаторыСроков = Неопределено Тогда
		СтрокаСрок.ВариантУстановкиСрокаИсполнения = 
			Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
	Иначе
		СтрокаСрок.ВариантУстановкиСрокаИсполнения = ВариантУстановкиСрока;
	КонецЕсли;
	
	СтрокаСрок.Пройден = Не СрокУчастникаИзменен;
	
	Если ИдентификаторыСроков <> Неопределено Тогда
		ИдентификаторыСроков.Вставить(IDТекущегоСрокаИсполнения, ИмяИдентификатораСрока);
	КонецЕсли;
		
	Для Каждого СтрПредшественникТекущегоЭтапа Из ПредшественникиТекущегоЭтапа Цикл
		СтрПредшественник = Предшественники.Добавить();
		СтрПредшественник.Последователь = IDТекущегоСрокаИсполнения;
		СтрПредшественник.Предшественник = СтрПредшественникТекущегоЭтапа;
	КонецЦикла;
	
	ПредшественникиСледующегоЭтапа.Добавить(IDТекущегоСрокаИсполнения);
	
КонецПроцедуры

// Добавляет сроки таблицы участников в данные для расчета сроков.
//
// Используется для переопределения одноименной процедуры в модуле СрокиИсполненияПроцессов.
// Вместо текущей следует использовать процедуру из модуля СрокиИсполненияПроцессов.
//
// Параметры:
//  Сроки - ТаблицаЗначений - см. функцию ПустаяТаблицаСроков.
//  Предшественники - ТаблицаЗначений - см. функцию ПустаяТаблицаПредшественников.
//  ТаблицаУчастников - ТаблицаЗначений, ТабличнаяЧасть, ДанныеФормыКоллекция - таблица исполнителей.
//  ИндексИзменнойСтроки - Число - индекс измененной строки.
//  ПредшественникиСледующегоЭтапа - Массив - предшественники для след. исполнителей.
//  ИдентификаторыСроков - Соответствие - соответствие идентификаторов сроков (ключ) и их описания (значение).
//  ВариантИсполнения - ПеречислениеСсылка.ВариантыМаршрутизацииЗадач - вариант исполнения процесса.
//  ИмяРеквизитаПорядокИсполнения - Строка - имя реквизита порядка исполнения в таблице исполнителей.
//
Процедура ДобавитьСрокиТаблицыИсполнителиПроцессаВДанныеДляРасчета(
	Сроки, Предшественники,
	ТаблицаУчастников, Знач ИндексИзменнойСтроки,
	ПредшественникиСледующегоЭтапа,
	ИдентификаторыСроков = Неопределено,
	ВариантИсполнения = Неопределено,
	ИмяРеквизитаПорядокИсполнения = "") Экспорт
	
	КоличествоУчастников = ТаблицаУчастников.Количество();
	
	Если КоличествоУчастников = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПредшественникиТекущегоЭтапа = 
		ОбщегоНазначения.СкопироватьРекурсивно(ПредшественникиСледующегоЭтапа);
	ПредшественникиСледующегоЭтапа.Очистить();
	
	Если ВариантИсполнения <> Перечисления.ВариантыМаршрутизацииЗадач.Последовательно
		И ВариантИсполнения <> Перечисления.ВариантыМаршрутизацииЗадач.Смешанно
		И ИндексИзменнойСтроки < КоличествоУчастников Тогда
		
		ИндексИзменнойСтроки = 0;
	КонецЕсли;
	
	IDСрокаИсполненияОтвественного = Неопределено;
	
	Для ИндексСтроки = 0 По КоличествоУчастников - 1 Цикл
		
		СтрУчастник = ТаблицаУчастников[ИндексСтроки];
		
		IDТекущегоСрокаИсполнения = Новый УникальныйИдентификатор;
		
		СтрокаСрок = Сроки.Добавить();
		СтрокаСрок.IDСрока = IDТекущегоСрокаИсполнения;
		
		ГрафикРаботы = ГрафикРаботыУчастникаПроцесса(
			Сотрудники.ЛюбойПользовательСотрудника(
			СтрУчастник.Исполнитель));
		
		СтрокаСрок.ГрафикРаботы = ГрафикРаботы;
		
		СтрокаСрок.СрокИсполнения = СтрУчастник.СрокИсполнения;
		
		Если ИндексСтроки >= ИндексИзменнойСтроки Тогда
			СтрокаСрок.Пройден = Ложь;
		Иначе
			СтрокаСрок.Пройден = Истина;
		КонецЕсли;
		
		Если ИдентификаторыСроков <> Неопределено Тогда
			ИдентификаторыСроков.Вставить(
				IDТекущегоСрокаИсполнения, "Исполнители_" + Строка(ИндексСтроки));
		КонецЕсли;
		
		СтрокаСрок.СрокИсполненияДни = СтрУчастник.СрокИсполненияДни;
		СтрокаСрок.СрокИсполненияЧасы = СтрУчастник.СрокИсполненияЧасы;
		СтрокаСрок.СрокИсполненияМинуты = СтрУчастник.СрокИсполненияМинуты;
		
		// Если таблица сроков заполняется не для первой итерации,
		// то всем срокам устанавливается относительный срок,
		// т.к. по точному сроку расчет возможен только на первой или текущей итерации.
		Если ИдентификаторыСроков = Неопределено Тогда
			СтрокаСрок.ВариантУстановкиСрокаИсполнения = 
				Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
		Иначе
			СтрокаСрок.ВариантУстановкиСрокаИсполнения = СтрУчастник.ВариантУстановкиСрокаИсполнения;
		КонецЕсли;
		
		Если ИндексСтроки > 0 И ЗначениеЗаполнено(ИмяРеквизитаПорядокИсполнения) Тогда
			Если СтрУчастник[ИмяРеквизитаПорядокИсполнения] = 
				Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего Тогда
				
				ПредшественникиТекущегоЭтапа = 
					ОбщегоНазначения.СкопироватьРекурсивно(ПредшественникиСледующегоЭтапа);
				ПредшественникиСледующегоЭтапа.Очистить();
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого СтрПредшественникТекущегоЭтапа Из ПредшественникиТекущегоЭтапа Цикл
			СтрПредшественник = Предшественники.Добавить();
			СтрПредшественник.Последователь = IDТекущегоСрокаИсполнения;
			СтрПредшественник.Предшественник = СтрПредшественникТекущегоЭтапа;
		КонецЦикла;
		
		Если СрокиИсполненияПроцессовКлиентСервер.ЭтоСтрокаОтветственного(СтрУчастник) Тогда
			ПредшественникиСледующегоЭтапа = 
				ОбщегоНазначения.СкопироватьРекурсивно(ПредшественникиТекущегоЭтапа);
			IDСрокаИсполненияОтвественного = IDТекущегоСрокаИсполнения;
		Иначе
			ПредшественникиСледующегоЭтапа.Добавить(IDТекущегоСрокаИсполнения);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(IDСрокаИсполненияОтвественного) Тогда
		ПредшественникиСледующегоЭтапа.Добавить(IDСрокаИсполненияОтвественного);
	КонецЕсли;
	
КонецПроцедуры

// Рассчитывает в таблице (Сроки) зависимые сроки от рассчитанного (РассчитанныйСрок).
// Рекурсивная процедура.
//
// Используется для переопределения одноименной процедуры в модуле СрокиИсполненияПроцессов.
// Вместо текущей следует использовать процедуру из модуля СрокиИсполненияПроцессов.
//
// Параметры:
//  Сроки - ТаблицаЗначений - см. ПустаяТаблицаСроков
//  Предшественники - ТаблицаЗначений - см. ПустаяТаблицаПредшественников
//  IDРассчитанногоСрок - УникальныйИдентификатор - идентификатор рассчитанного срока, для последователей которого следует произвести расчет сроков.
//
Процедура РассчитатьСрокиИсполнения(
	Сроки, Предшественники, IDРассчитанногоСрок) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьДатуИВремяВСрокахЗадач = 
		ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	
	ВариантыУстановкиСрока = СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	// Если текущий рассчитанный срок является датой отсчета
	// то обрабатываем его смещение.
	Если IDРассчитанногоСрок = УникальныйИдентификаторПустой() Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("IDСрока", IDРассчитанногоСрок);
		НайденныеСроки = Сроки.НайтиСтроки(Отбор);
		СтрДатыОтсчета = НайденныеСроки[0];
		
		Если ЗначениеЗаполнено(СтрДатыОтсчета.Смещение) Тогда
			
			Если ТипЗнч(СтрДатыОтсчета.Смещение) = Тип("Дата") Тогда
				СтрДатыОтсчета.СрокИсполнения = Макс(СтрДатыОтсчета.СрокИсполнения, СтрДатыОтсчета.Смещение);
			Иначе
				СтрДатыОтсчета.СрокИсполнения = СтрДатыОтсчета.СрокИсполнения + СтрДатыОтсчета.Смещение;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ЗависимыеСроки = СрокиИсполненияПроцессов.ЗависимыеСроки(Сроки ,Предшественники, IDРассчитанногоСрок);
	
	Для Каждого СрокДляРасчета Из ЗависимыеСроки Цикл
		
		ДатаОтсчетаДляЗависимогоСрока = СрокиИсполненияПроцессов.ДатаОтсчетаДляЗависимогоСрока(
			Сроки, Предшественники, СрокДляРасчета.IDСрока);
		
		Если ДатаОтсчетаДляЗависимогоСрока = Неопределено
			Или ДатаОтсчетаДляЗависимогоСрока = Дата(1,1,1) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если Не СрокДляРасчета.Пройден Тогда
			
			Если ЗначениеЗаполнено(СрокДляРасчета.ПодчиненныеСроки) Тогда
				
				ПодчиненныеСроки = СрокДляРасчета.ПодчиненныеСроки.Сроки;
				
				// Обновим даты отсчета в подчиненной таблице
				Отбор = Новый Структура("IDСрока", УникальныйИдентификаторПустой());
				СтрокиСДатойОтсчета = ПодчиненныеСроки.НайтиСтроки(Отбор);
				Для Каждого СтрСДатойОтсчета Из СтрокиСДатойОтсчета Цикл
					СтрСДатойОтсчета.СрокИсполнения = ДатаОтсчетаДляЗависимогоСрока;
				КонецЦикла;
				
				ПодчиненныеПредшественники = СрокДляРасчета.ПодчиненныеСроки.Предшественники;
				IDПодчиненногоРассчитанногоСрока = СрокДляРасчета.ПодчиненныеСроки.IDРассчитанногоСрок;
				
				ПредыдущийСрокИсполнения = СрокДляРасчета.СрокИсполнения;
				
				// Рассчитаем подчиненные сроки
				РассчитатьСрокиИсполнения(
					ПодчиненныеСроки,
					ПодчиненныеПредшественники,
					IDПодчиненногоРассчитанногоСрока);
					
				// Определим и заполним текущий срок по подчиненным.
				МаксимальныйПодчиненныйСрок = Дата(1,1,1);
					
				Для Каждого СтрПодчиненныйСрок Из ПодчиненныеСроки Цикл
					
					// Пропускаем дату отсчета.
					Если СтрПодчиненныйСрок.IDСрока = УникальныйИдентификаторПустой() Тогда
						Продолжить;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(СтрПодчиненныйСрок.СрокИсполнения) Тогда
						МаксимальныйПодчиненныйСрок = Дата(1,1,1);
						Прервать;
					КонецЕсли;
					
					МаксимальныйПодчиненныйСрок = Макс(
						МаксимальныйПодчиненныйСрок, СтрПодчиненныйСрок.СрокИсполнения);
					
				КонецЦикла;
				
				СрокДляРасчета.СрокИсполнения = МаксимальныйПодчиненныйСрок;
				
				// Определим признак изменения для текущей строки сроков.
				Отбор = Новый Структура("Изменен", Истина);
				Если МаксимальныйПодчиненныйСрок <> ПредыдущийСрокИсполнения
					Или ПодчиненныеСроки.НайтиСтроки(Отбор).Количество() > 0 Тогда
					
					СрокДляРасчета.Изменен = Истина;
				КонецЕсли;
				
			Иначе
				
				СрокИсполнения = Дата(1,1,1);
				Дни = 0;
				Часы = 0;
				Минуты = 0;
				
				Если ДатаОтсчетаДляЗависимогоСрока <> Дата(1,1,1) Тогда
					Если СрокДляРасчета.ВариантУстановкиСрокаИсполнения = ВариантыУстановкиСрока.ТочныйСрок Тогда
						
						ПараметрыСрокаИсполнения = 
							СрокиИсполненияПроцессов.ПараметрыСрокаИсполненияДляОпределенияДлительности();
							
						ПараметрыСрокаИсполнения.СрокИсполнения = СрокДляРасчета.СрокИсполнения;
						ПараметрыСрокаИсполнения.ДатаОтсчета = ДатаОтсчетаДляЗависимогоСрока;
						ПараметрыСрокаИсполнения.ГрафикРаботы = СрокДляРасчета.ГрафикРаботы;
						
						Длительность = 
							СрокиИсполненияПроцессов.ДлительностьПоСрокуИсполнения(ПараметрыСрокаИсполнения);
						
						Дни = Длительность.Дни;
						Часы = Длительность.Часы;
						Минуты = Длительность.Минуты;
					Иначе
						
						ПараметрыДлительности = 
							СрокиИсполненияПроцессов.ПараметрыДлительностиИсполненияДляОпределенияТочногоСрока();
							
						ПараметрыДлительности.Дни = СрокДляРасчета.СрокИсполненияДни;
						ПараметрыДлительности.Часы = СрокДляРасчета.СрокИсполненияЧасы;
						ПараметрыДлительности.Минуты = СрокДляРасчета.СрокИсполненияМинуты;
						ПараметрыДлительности.ДатаОтсчета = ДатаОтсчетаДляЗависимогоСрока;
						ПараметрыДлительности.ГрафикРаботы = СрокДляРасчета.ГрафикРаботы;
							
						СрокИсполнения = 
							СрокиИсполненияПроцессов.СрокИсполненияПоДлительности(ПараметрыДлительности);
						
					КонецЕсли;
				КонецЕсли;
				
				Если СрокДляРасчета.ВариантУстановкиСрокаИсполнения = ВариантыУстановкиСрока.ТочныйСрок Тогда
					Если СрокДляРасчета.СрокИсполненияДни <> Дни
						Или СрокДляРасчета.СрокИсполненияЧасы <> Часы
						Или СрокДляРасчета.СрокИсполненияМинуты <> Минуты Тогда
						
						СрокДляРасчета.Изменен = Истина;
					КонецЕсли;
					
					СрокДляРасчета.СрокИсполненияДни = Дни;
					СрокДляРасчета.СрокИсполненияЧасы = Часы;
					СрокДляРасчета.СрокИсполненияМинуты = Минуты;
				Иначе
					Если СрокДляРасчета.СрокИсполнения <> СрокИсполнения Тогда
						СрокДляРасчета.Изменен = Истина;
					КонецЕсли;
					СрокДляРасчета.СрокИсполнения = СрокИсполнения;
				КонецЕсли;
				
			КонецЕсли;
			
			СрокДляРасчета.Пройден = Истина;
			
		КонецЕсли;
		
		РассчитатьСрокиИсполнения(
			Сроки, Предшественники, СрокДляРасчета.IDСрока);
		
	КонецЦикла;
	
КонецПроцедуры

// Рассчитывает сроки исполнения для нового процесса.
//
// Используется для переопределения одноименной процедуры в модуле СрокиИсполненияПроцессов.
// Вместо текущей следует использовать процедуру из модуля СрокиИсполненияПроцессов.
//
// Параметры:
//  ПроцессОбъект - БизнесПроцессОбъект
//
Процедура РассчитатьСрокИсполненияДляНовогоПроцесса(ПроцессОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметры = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
	Параметры.ДатаОтсчета = ТекущаяДатаСеанса();
	
	Если ЗначениеЗаполнено(ПроцессОбъект.Ссылка) Тогда
		Параметры.Смещение = СмещенияДатыОтсчета(ПроцессОбъект.Ссылка);
	КонецЕсли;
	
	ТипПроцесса = ТипЗнч(ПроцессОбъект.Ссылка);
	
	Если ТипПроцесса = Тип("БизнесПроцессСсылка.Исполнение") Тогда
		
		СрокиИсполненияПроцессов.РассчитатьСрокиПроцессаИсполнения(ПроцессОбъект, Параметры);
		
	ИначеЕсли ТипПроцесса = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		
		РассчитатьСрокиКомплексногоПроцесса(ПроцессОбъект, Параметры);
		
	ИначеЕсли ТипПроцесса = Тип("БизнесПроцессСсылка.Ознакомление") Тогда
		
		СрокиИсполненияПроцессов.РассчитатьСрокиОзнакомления(ПроцессОбъект, Параметры);
		
	ИначеЕсли ТипПроцесса = Тип("БизнесПроцессСсылка.Приглашение") Тогда
		
		РассчитатьСрокиПриглашения(ПроцессОбъект, Параметры);
		
	ИначеЕсли ТипПроцесса = Тип("БизнесПроцессСсылка.Рассмотрение") Тогда
		
		СрокиИсполненияПроцессов.РассчитатьСрокиРассмотрения(ПроцессОбъект, Параметры);
		
	ИначеЕсли ТипПроцесса = Тип("БизнесПроцессСсылка.Регистрация") Тогда
		
		СрокиИсполненияПроцессов.РассчитатьСрокиРегистрации(ПроцессОбъект, Параметры);
		
	ИначеЕсли ТипПроцесса = Тип("БизнесПроцессСсылка.Согласование") Тогда
		
		СрокиИсполненияПроцессов.РассчитатьСрокиСогласования(ПроцессОбъект, Параметры);
		
	ИначеЕсли ТипПроцесса = Тип("БизнесПроцессСсылка.Подписание") Тогда
		
			СрокиИсполненияПроцессов.РассчитатьСрокиПодписания(ПроцессОбъект, Параметры);
		
	ИначеЕсли ТипПроцесса = Тип("БизнесПроцессСсылка.Утверждение") Тогда
		
		СрокиИсполненияПроцессов.РассчитатьСрокиУтверждения(ПроцессОбъект, Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

// Комплексный процесс

// Возвращает действие комплексного процесса по строке этапа комплексного процесса.
// Если по переданной строки этапов имеется процесс, то на него возвращается ссылка,
// иначе возвращается сслыка на шаблон.
//
// Параметры - СтрокаТабличнойЧасти, СтрокаТаблицыЗначений - строка таблицы этапов
//
// Возвращаемое значение:
//  БизнесПроцессСсылка, СправочникСсылка.<ИмяШаблонаПроцесса> - ссылка на шаблон или процесс.
//
Функция ДействиеЭтапа(СтрЭтап)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ЗапущенныйБизнесПроцесс");
	СтруктураПоиска.Вставить("ШаблонБизнесПроцесса");
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрЭтап);
		
	Если ЗначениеЗаполнено(СтруктураПоиска.ЗапущенныйБизнесПроцесс) Тогда
		Возврат СтруктураПоиска.ЗапущенныйБизнесПроцесс;
	Иначе
		Возврат СтруктураПоиска.ШаблонБизнесПроцесса;
	КонецЕсли;
	
КонецФункции

// Заполняет рассчитанные сроки в карточке комплексного процесса/шаблона.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка комплексного процесса/шаблона
//  Сроки - ТаблицаЗначений - таблица с рассчитами сроками. см. СрокиИсполненияПроцессов.ПустаяТаблицаСроков.
//  ИдентификаторыСроков - Соответствие - соответствие идентификаторов сроков и их предназначением в процессе.
//
Процедура ЗаполнитьСрокиКомплексногоПроцессаВКарточке(Форма, Сроки, ИдентификаторыСроков)
	
	ЕстьДействияСНеРассчитаннымиСроками = Ложь;
	
	СрокИсполненияВсехДействий = Дата(1,1,1);
	
	// Заполним сроки.	
	Если ЗначениеЗаполнено(Форма.Объект.Схема) Тогда
				
		ИдентификаторОбъекта = Строка(Форма.Объект.ИдентификаторСсылки) + "_";
		
		СрокиЭлементов =
			РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СрокиЭлементовСхемыВФорме(Форма);
		
		// Заполним сроки этапов.
		Для Каждого СтрокаСрок Из Сроки Цикл
			
			РольСрокаВПроцесса = ИдентификаторыСроков.Получить(СтрокаСрок.IDСрока);
			Если РольСрокаВПроцесса = "ДатаОтсчета" Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяЭлемента = СтрЗаменить(СтрокаСрок.IDСрока, ИдентификаторОбъекта, "");
			
			СрокЭлемента = 
				РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СрокИсполненияЭлемента(
				СрокиЭлементов, ИмяЭлемента);
				
			СрокЭлемента.СрокИсполненияПроцесса = СтрокаСрок.СрокИсполнения;
			
			РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.УстановитьСрокИсполненияЭлементу(
				СрокиЭлементов, ИмяЭлемента, СрокЭлемента);
			
			Если Не ЗначениеЗаполнено(СтрокаСрок.СрокИсполнения) Тогда
				ЕстьДействияСНеРассчитаннымиСроками = Истина;
			КонецЕсли;
			
			Если Не ЕстьДействияСНеРассчитаннымиСроками Тогда
				СрокИсполненияВсехДействий =
					Макс(СрокИсполненияВсехДействий, СтрокаСрок.СрокИсполнения);
			КонецЕсли;
			
		КонецЦикла;
	
	Иначе
		
		// Сформируем кэш таблицы этапов.
		КэшТаблицыЭтапов = Новый Соответствие;
		Для Каждого СтрокаТаблицы Из Форма.Объект.Этапы Цикл
			КэшТаблицыЭтапов.Вставить(СтрокаТаблицы.ИдентификаторЭтапа, СтрокаТаблицы);
		КонецЦикла;
		
		// Заполним сроки этапов.
		Для Каждого СтрокаСрок Из Сроки Цикл
			
			РольСрокаВПроцесса = ИдентификаторыСроков.Получить(СтрокаСрок.IDСрока);
			Если РольСрокаВПроцесса = "ДатаОтсчета" Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаЭтапа = КэшТаблицыЭтапов.Получить(СтрокаСрок.IDСрока);
			СтрокаЭтапа.СрокИсполненияПроцесса = СтрокаСрок.СрокИсполнения;
			
			Если Не ЗначениеЗаполнено(СтрокаСрок.СрокИсполнения) Тогда
				ЕстьДействияСНеРассчитаннымиСроками = Истина;
			КонецЕсли;
			
			Если Не ЕстьДействияСНеРассчитаннымиСроками Тогда
				СрокИсполненияВсехДействий = Макс(СрокИсполненияВсехДействий, СтрокаСрок.СрокИсполнения);
			КонецЕсли;
			
		КонецЦикла;
				
	КонецЕсли;
	
	// Заполним общий срок процесса.
	Если ЕстьДействияСНеРассчитаннымиСроками Тогда
		Форма.Объект.СрокИсполненияПроцесса = Дата(1,1,1);
	Иначе
		Форма.Объект.СрокИсполненияПроцесса = СрокИсполненияВсехДействий;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет сроки исполнения в действии комплексного процесса по таблицам с рассчитанными сроками.
//
// Параметры:
//  ДействиеОбъект - БизнесПроцессОбъект, СправочникОбъект.<ИмяШаблонаПроцесса> - процесс/шаблон
//  Сроки - ТаблицаЗначений - таблица с рассчитанными сроками. см. СрокиИсполненияПроцессов.ПустаяТаблицаСроков().
//  ИдентификаторыСроков - Соответствие - соответствие идентификаторов сроков (ключ) и их описания (значение).
//
Процедура ЗаполнитьСрокиДействияКомплексногоПроцесса(ДействиеОбъект, Сроки, ИдентификаторыСроков)
	
	ТипДействия = ТипЗнч(ДействиеОбъект.Ссылка);
	
	Если ТипДействия = Тип("СправочникСсылка.ШаблоныИсполнения")
		Или ТипДействия = Тип("БизнесПроцессСсылка.Исполнение") Тогда
		
		СрокиИсполненияПроцессов.ЗаполнитьСрокиПроцессаИсполнения(
			ДействиеОбъект, Сроки, ИдентификаторыСроков);
		
	ИначеЕсли ТипДействия = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов")
		Или ТипДействия = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		
		ЗаполнитьСрокиКомплексногоПроцесса(ДействиеОбъект, Сроки, ИдентификаторыСроков);
		
	ИначеЕсли ТипДействия = Тип("СправочникСсылка.ШаблоныОзнакомления")
		Или ТипДействия = Тип("БизнесПроцессСсылка.Ознакомление") Тогда
		
		СрокиИсполненияПроцессов.ЗаполнитьСрокиОзнакомления(ДействиеОбъект, Сроки, ИдентификаторыСроков);
		
	ИначеЕсли ТипДействия = Тип("СправочникСсылка.ШаблоныПриглашения")
		Или ТипДействия = Тип("БизнесПроцессСсылка.Приглашение") Тогда
		
		ЗаполнитьСрокиПриглашения(ДействиеОбъект, Сроки, ИдентификаторыСроков);
		
	ИначеЕсли ТипДействия = Тип("СправочникСсылка.ШаблоныРассмотрения")
		Или ТипДействия = Тип("БизнесПроцессСсылка.Рассмотрение") Тогда
		
		СрокиИсполненияПроцессов.ЗаполнитьСрокиРассмотрения(ДействиеОбъект, Сроки, ИдентификаторыСроков);
		
	ИначеЕсли ТипДействия = Тип("СправочникСсылка.ШаблоныРегистрации")
		Или ТипДействия = Тип("БизнесПроцессСсылка.Регистрация") Тогда
		
		СрокиИсполненияПроцессов.ЗаполнитьСрокиРегистрации(ДействиеОбъект, Сроки, ИдентификаторыСроков);
		
	ИначеЕсли ТипДействия = Тип("СправочникСсылка.ШаблоныСогласования")
		Или ТипДействия = Тип("БизнесПроцессСсылка.Согласование") Тогда
		
		СрокиИсполненияПроцессов.ЗаполнитьСрокиСогласования(ДействиеОбъект, Сроки, ИдентификаторыСроков);
		
	ИначеЕсли ТипДействия = Тип("СправочникСсылка.ШаблоныПодписания")
		Или ТипДействия = Тип("БизнесПроцессСсылка.Подписание") Тогда
		
		СрокиИсполненияПроцессов.ЗаполнитьСрокиПодписания(ДействиеОбъект, Сроки, ИдентификаторыСроков);
		
	ИначеЕсли ТипДействия = Тип("СправочникСсылка.ШаблоныУтверждения")
		Или ТипДействия = Тип("БизнесПроцессСсылка.Утверждение") Тогда
		
		СрокиИсполненияПроцессов.ЗаполнитьСрокиУтверждения(ДействиеОбъект, Сроки, ИдентификаторыСроков);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_РасчетДлительностиПроцессов

// Возвращает длительность комплексного процесса/шаблона в минутах.
// Используется функцией ДлительностьИсполненияПроцесса.
//
// Параметры:
//  Объект - СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов,
//            БизнесПроцессСсылка.КомплексныйПроцесс,
//            СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов,
//            БизнесПроцессОбъект.КомплексныйПроцесс,
//            ДанныеФормыСтруктура,
//            Структура - ссылка/объект на процесс/шаблон, или структура с необходимыми полями.
//
// Возвращаемое значение:
//  Число - длительность процесса/шаблона в минутах.
//
Функция ДлительностьИсполненияКомплексногоПроцесса(Объект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЭтоПараметрыДляОпределенияДлительностиКомплексногоПроцессаСоСхемой(Объект) Тогда
		Возврат ДлительностьИсполненияКомплексногоПроцессаСоСхемой(Объект);
	Иначе
		Возврат ДлительностьИсполненияКомплексногоПроцессаСТаблицейДействий(Объект);
	КонецЕсли;
		
КонецФункции

// Возвращает длительность комплексного процесса/шаблона с таблией действий, в минутах.
// Используется функцией ДлительностьИсполненияПроцесса.
//
// Параметры:
//  Объект - СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов,
//           БизнесПроцессСсылка.КомплексныйПроцесс,
//           СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов,
//           БизнесПроцессОбъект.КомплексныйПроцесс,
//           ДанныеФормыСтруктура,
//           Структура - ссылка/объект на процесс/шаблон, или структура с необходимыми полями.
//
// Возвращаемое значение:
//  Число - длительность процесса/шаблона в минутах.
//
Функция ДлительностьИсполненияКомплексногоПроцессаСТаблицейДействий(Объект)
	
	ДлительностьПроцесса = 0;
	
	КоличествоРабочихЧасовВДне = 
		СрокиИсполненияПроцессов.КоличествоРабочихЧасовПользователя(Неопределено);
			
	Этапы = Неопределено;
	ПредшественникиЭтапов = Неопределено;
	
	ТипОбъекта = ТипЗнч(Объект);
	
	Если ТипОбъекта = Тип("ДанныеФормыСтруктура") Тогда
	
		Этапы = Объект.Этапы.Выгрузить();
		ПредшественникиЭтапов = Объект.ПредшественникиЭтапов.Выгрузить();
		ИсключитьУдаленныеЭтапыИзТаблицКомплексногоПроцесса(Этапы, ПредшественникиЭтапов);
				
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипОбъекта) Тогда
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект,"Этапы, ПредшественникиЭтапов");
		
		Этапы = РеквизитыПроцесса.Этапы.Выгрузить();
		ПредшественникиЭтапов = РеквизитыПроцесса.ПредшественникиЭтапов.Выгрузить();
		
	ИначеЕсли ТипОбъекта = Тип("Структура") Тогда
		
		Этапы = Объект.Этапы;
		ПредшественникиЭтапов = Объект.ПредшественникиЭтапов;
		
	Иначе
		Этапы = Объект.Этапы.Выгрузить();
		ПредшественникиЭтапов = Объект.ПредшественникиЭтапов.Выгрузить();
	КонецЕсли;
		
	Если Этапы.Колонки.Найти("СрокИсполненияПроцессаДни") = Неопределено Тогда
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Число"));
		ОписаниеТиповЧисло = Новый ОписаниеТипов(МассивТипов);
		Этапы.Колонки.Добавить("СрокИсполненияПроцессаДни", ОписаниеТиповЧисло);
		Этапы.Колонки.Добавить("СрокИсполненияПроцессаМинуты", ОписаниеТиповЧисло);
		Этапы.Колонки.Добавить("СрокИсполненияПроцессаЧасы", ОписаниеТиповЧисло);
		
		ЗаполнитьСрокиИсполненияЭтаповКомплексногоПроцесса(Этапы);
		
	КонецЕсли;
	
	ПредшественникиДляОпределенияПутей = Новый Массив;
	Для Каждого СтрПредшественник Из ПредшественникиЭтапов Цикл
		СтруктураСтрПредшественника = Новый Структура;
		СтруктураСтрПредшественника.Вставить(
			"Предшественник", СтрПредшественник.ИдентификаторПредшественника);
		СтруктураСтрПредшественника.Вставить(
			"Последователь", СтрПредшественник.ИдентификаторПоследователя);
		ПредшественникиДляОпределенияПутей.Добавить(СтруктураСтрПредшественника);
	КонецЦикла;
	
	ПараметрыПутей = 
	СрокиИсполненияПроцессовКлиентСерверКОРП.ПараметрыПутей(ПредшественникиДляОпределенияПутей);
	
	ПутиКомплексногоПроцесса = ПараметрыПутей.Пути;
	
	// Определим максимальную длительность исполнения комплекнсого процесса в минутах.
	
	СоотвествияИдентификаторовИСтрокЭтапов = Новый Соответствие;
	Для Каждого Путь Из ПутиКомплексногоПроцесса Цикл
		
		СрокИсполненияПути = 0;
		
		Для Каждого ЭтапПути Из Путь Цикл
			
			Если ЭтапПути = УникальныйИдентификаторПустой() Тогда
				Продолжить;
			КонецЕсли;
			
			СтрЭтап = СоотвествияИдентификаторовИСтрокЭтапов.Получить(ЭтапПути);
			Если СтрЭтап = Неопределено Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("ИдентификаторЭтапа", ЭтапПути);
				НайденныеЭтапы = Этапы.НайтиСтроки(Отбор);
				Если НайденныеЭтапы.Количество() = 0 Тогда
					Возврат 0;
				КонецЕсли;
				СтрЭтап = НайденныеЭтапы[0];
				СоотвествияИдентификаторовИСтрокЭтапов.Вставить(ЭтапПути, СтрЭтап);
			КонецЕсли;
			
			// Если попадается этап с нулевой длительностью, то
			// считаем, что длительность комплексного процесса
			// не определена.
			Если СтрЭтап.СрокИсполненияПроцессаДни = 0
				И СтрЭтап.СрокИсполненияПроцессаЧасы = 0
				И СтрЭтап.СрокИсполненияПроцессаМинуты = 0 Тогда
				
				Возврат 0;
			КонецЕсли;
			
			СрокИсполненияПути = СрокИсполненияПути
				+ СтрЭтап.СрокИсполненияПроцессаДни * КоличествоРабочихЧасовВДне * 60
				+ СтрЭтап.СрокИсполненияПроцессаЧасы * 60
				+ СтрЭтап.СрокИсполненияПроцессаМинуты;
			
		КонецЦикла;
		
		ДлительностьПроцесса = Макс(ДлительностьПроцесса, СрокИсполненияПути);
		
	КонецЦикла;
	
	Возврат ДлительностьПроцесса;
	
КонецФункции

// Возвращает длительность комплексного процесса/шаблона со схемой, в минутах.
// Используется функцией ДлительностьИсполненияПроцесса.
//
// Параметры:
//  ПараметрыОпределения - Структура - см. ПараметрыДляОпределенияДлительностиКомплексногоПроцессаСоСхемой
//
// Возвращаемое значение:
//  Число - длительность процесса/шаблона в минутах.
//
Функция ДлительностьИсполненияКомплексногоПроцессаСоСхемой(ПараметрыОпределения)
	
	ДлительностьПроцесса = 0;
	
	КоличествоРабочихЧасовВДне = 
		СрокиИсполненияПроцессов.КоличествоРабочихЧасовПользователя(Неопределено);

	ПутиСхемыПроцесса = СхемыПроцессовСервер.ПутиСхемыПроцесса(
		СхемыПроцессовКлиентСервер.ИмяЭлементаСтартаСхемы(ПараметрыОпределения.ДанныеСхемы),
		СхемыПроцессовСервер.ПредшественникиЭлементовПоДаннымСхемы(ПараметрыОпределения.ДанныеСхемы));
	
	Для Каждого ПутьСхемы Из ПутиСхемыПроцесса Цикл
		
		СрокИсполненияПути = 0;
		
		Для Каждого ЭлементПути Из ПутьСхемы Цикл
			
			СрокиДействия = ПараметрыОпределения.СрокиЭлементов[ЭлементПути];
								
			// Если сроки отсутвуют, то элемент пути не влияет на срок исполнения процесса.
			Если СрокиДействия = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Если попадается действие с нулевой длительностью, то
			// считаем, что длительность комплексного процесса
			// не определена.
			Если СрокиДействия.СрокИсполненияПроцессаДни = 0
				И СрокиДействия.СрокИсполненияПроцессаЧасы = 0
				И СрокиДействия.СрокИсполненияПроцессаМинуты = 0 Тогда
				
				Возврат 0;
			КонецЕсли;
			
			СрокИсполненияПути = СрокИсполненияПути
				+ СрокиДействия.СрокИсполненияПроцессаДни * КоличествоРабочихЧасовВДне * 60
				+ СрокиДействия.СрокИсполненияПроцессаЧасы * 60
				+ СрокиДействия.СрокИсполненияПроцессаМинуты;
			
		КонецЦикла;
		
		ДлительностьПроцесса = Макс(ДлительностьПроцесса, СрокИсполненияПути);
		
	КонецЦикла;
	
	
	Возврат ДлительностьПроцесса;
	
КонецФункции

// Возвращает длительность процесса/шаблона Приглашения в минутах.
// Используется функцией ДлительностьИсполненияПроцесса.
//
// Параметры:
//  Процесс - СправочникСсыка,
//            БизнесПроцессСсылка,
//            СправочникОбъект,
//            БизнесПроцессОбъект,
//            ДанныеФормыСтруктура - ссылка или объект на процесс/шаблон.
//
// Возвращаемое значение:
//  Число - длительность процесса/шаблона в минутах.
//
Функция ДлительностьИсполненияПриглашения(Процесс)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДлительностьПроцесса = 0;
	
	ТипПроцесса = ТипЗнч(Процесс);
	Если ОбщегоНазначения.ЭтоСсылка(ТипПроцесса) Тогда
		СтрокаРеквизитовПроцессов = 
			"Исполнители, 
			|Автор, СрокОбработкиРезультатовДни, СрокОбработкиРезультатовЧасы, СрокОбработкиРезультатовМинуты,
			|КоличествоИтераций";
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Процесс, СтрокаРеквизитовПроцессов);
		РеквизитыПроцесса.Исполнители = РеквизитыПроцесса.Исполнители.Выгрузить();
	Иначе
		РеквизитыПроцесса = Процесс;
	КонецЕсли;
	
	ДлительностьИсполненияИсполнителями = 
		СрокиИсполненияПроцессов.ДлительностьИсполненияПроцессаУчастникамиВМинутах(
			РеквизитыПроцесса.Исполнители);
	
	ДлительностьИсполненияАвтором = 
		СрокиИсполненияПроцессов.ДлительностьИсполненияУчастникаПроцессаВМинутах(
			РеквизитыПроцесса.Автор,
			РеквизитыПроцесса.СрокОбработкиРезультатовДни,
			РеквизитыПроцесса.СрокОбработкиРезультатовЧасы,
			РеквизитыПроцесса.СрокОбработкиРезультатовМинуты);
	
	КоличествоИтераций = 1;
	Если ЗначениеЗаполнено(РеквизитыПроцесса.КоличествоИтераций) Тогда
		КоличествоИтераций = РеквизитыПроцесса.КоличествоИтераций;
	КонецЕсли;
	
	Если ДлительностьИсполненияИсполнителями <> 0 И ДлительностьИсполненияАвтором <> 0 Тогда
		ДлительностьПроцесса = 
			(ДлительностьИсполненияИсполнителями + ДлительностьИсполненияАвтором) * КоличествоИтераций;
	КонецЕсли;
	
	Возврат ДлительностьПроцесса;
	
КонецФункции

// Корректирует срок исполнения (точный и относительный) ответственного, если
// он меньше общего срока остальных исполнителей.
//
// Параметры:
//  Исполнители - ТабличнаяЧасть, ДанныеФормыКоллекция - таблица исполнителей Исполнения.
//  ДатаОтсчета - Дата - дата отсчета для расчета сроков исполнителей.
//
Процедура СкорректироватьСрокИсполненияОтветственного(Исполнители, ДатаОтсчета) Экспорт
	
	Если Исполнители.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СрокиИсполненияПроцессовКлиентСервер.ЭтоСтрокаОтветственного(Исполнители[0]) Тогда
		Возврат;
	КонецЕсли;
	
	СрокИсполненияВсемиИсполнителями = Дата(1,1,1);
	Для Каждого СтрокаИсполнителя Из Исполнители Цикл
		СрокИсполненияВсемиИсполнителями = 
			Макс(СрокИсполненияВсемиИсполнителями, СтрокаИсполнителя.СрокИсполнения);
	КонецЦикла;
	
	Если Исполнители[0].СрокИсполнения >= СрокИсполненияВсемиИсполнителями Тогда
		Возврат;
	КонецЕсли;
	
	// Присвоим максимальный срок исполнения всеми участниками ответственному.
	Исполнители[0].СрокИсполнения = СрокИсполненияВсемиИсполнителями;
	
	// Рассчитаем  и присвоим новую длительность срока исполнения для ответственного.
	ПараметрыСрокаИсполнения = 
		СрокиИсполненияПроцессов.ПараметрыСрокаИсполненияДляОпределенияДлительности();
	
	ПараметрыСрокаИсполнения.СрокИсполнения = СрокИсполненияВсемиИсполнителями;
	ПараметрыСрокаИсполнения.ДатаОтсчета = ДатаОтсчета;
	
	ПараметрыСрокаИсполнения.ГрафикРаботы = ГрафикРаботыУчастникаПроцесса(
		Сотрудники.ЛюбойПользовательСотрудника(
		Исполнители[0].Исполнитель));
	
	ДлительностьСрокаОтветственногоИсполнителя = 
		СрокиИсполненияПроцессов.ДлительностьПоСрокуИсполнения(ПараметрыСрокаИсполнения);
	
	Исполнители[0].СрокИсполненияДни = ДлительностьСрокаОтветственногоИсполнителя.Дни;
	Исполнители[0].СрокИсполненияЧасы = ДлительностьСрокаОтветственногоИсполнителя.Часы;
	Исполнители[0].СрокИсполненияМинуты = ДлительностьСрокаОтветственногоИсполнителя.Минуты;
	
КонецПроцедуры

// Возвращает количество рабочих часов пользователя с учетом графика работ.
//
// Используется для переопределения одноименной функции в модуле СрокиИсполненияПроцессов.
// Вместо текущей следует использовать функцию из модуля СрокиИсполненияПроцессов.
// 
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - участник процесса.
//
// Возвращаемое значение:
//  Число - количество рабочих часов в дней для пользователя.
//
Функция КоличествоРабочихЧасовПользователя(Пользователь) Экспорт
	
	КоличествоРабочихЧасовВДне = 24;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда
		
		Если Пользователь = Неопределено Тогда
			ГрафикРаботыПользователя = ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы();
		Иначе
			ГрафикРаботыПользователя = ГрафикРаботыУчастникаПроцесса(Пользователь);
		КонецЕсли;
		
		КоличествоРабочихЧасовВДне = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ГрафикРаботыПользователя, "КоличествоРабочихЧасовВДне");
			
	КонецЕсли;
	
	Возврат КоличествоРабочихЧасовВДне;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ПереносСроков

// Возвращает структуру сроков процесса.
//
// Используется для переопределения одноименной функции в модуле СрокиИсполненияПроцессов.
// Вместо текущей следует использовать функцию из модуля СрокиИсполненияПроцессов.
//
// Врозвращаемое значение:
//  Ссылка - БизнесПроцессСсылка - ссылка на процесс
//  СрокиИсполнителей - Соответствие - соответствие в котором
//                      Ключа - ссылка на задачу или точку маршрута, Значение - срок ее исполнения.
//  СрокИсполненияПроцесса - Дата
//
Функция СтруктураСроковПроцессаДляПроверкиИзменения() Экспорт
	
	СтруктураСроков = Новый Структура;
	СтруктураСроков.Вставить("Ссылка");
	СтруктураСроков.Вставить("СрокиИсполнителей", Новый Соответствие);
	СтруктураСроков.Вставить("СрокИсполненияПроцесса", Дата(1,1,1));
	
	Возврат СтруктураСроков;
	
КонецФункции

// Проверяет изменение сроков процесса и невыполненных задач.
// В случае изменения присваивает реквизитам СрокИсполненияПроцессаИзменен и СрокиИсполненияЗадачИзменены
// формы значение Иситина.
//
// Используется для переопределения одноименной функции в модуле СрокиИсполненияПроцессов.
// Вместо текущей следует использовать функцию из модуля СрокиИсполненияПроцессов.
//
// Параметры:
//  СсылкаНаПроцесс - БизнессПроцессСсылка - ссылка на процесс.
//  Сроки - Структура - см. Функция СтруктураСроковПроцессаДляПроверкиИзменения()
//  Форма - ФормаКлиентскогоПриложения - форма процесса.
//
Процедура ПроверитьИзменениеСроковПроцесса(СсылкаНаПроцесс, НовыеСрокиПроцесса, Форма) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Форма.СрокИсполненияПроцессаИзменен = Ложь;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("СрокиИсполненияЗадачИзменены", Неопределено);
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, Форма);
	ЕстьРеквизитСрокиИсполненияЗадачИзменены =
		(СтруктураПоиска.СрокиИсполненияЗадачИзменены <> Неопределено);
		
	Если ЕстьРеквизитСрокиИсполненияЗадачИзменены Тогда
		Форма.СрокиИсполненияЗадачИзменены = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СсылкаНаПроцесс) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка изменения срока исполнения процесса
	СрокИсполненияПроцессаПоСсылке = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаПроцесс, "СрокИсполненияПроцесса");
	Если СрокИсполненияПроцессаПоСсылке <> НовыеСрокиПроцесса.СрокИсполненияПроцесса Тогда
		Форма.СрокИсполненияПроцессаИзменен = Истина;
	КонецЕсли;
	
	Если ЕстьРеквизитСрокиИсполненияЗадачИзменены
		И НовыеСрокиПроцесса.СрокиИсполнителей.Количество() > 0 Тогда
	
		// Проверка изменения сроков задач
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗадачаИсполнителя.Ссылка,
			|	ЗадачаИсполнителя.СрокИсполнения,
			|	ЗадачаИсполнителя.ТочкаМаршрута
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|ГДЕ
			|	ЗадачаИсполнителя.Выполнена = ЛОЖЬ
			|	И ЗадачаИсполнителя.ИсключенаИзПроцесса = ЛОЖЬ
			|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
			|	И ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
			|	И ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс";
		
		Запрос.УстановитьПараметр("БизнесПроцесс", СсылкаНаПроцесс);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СрокИсполнения = НовыеСрокиПроцесса.СрокиИсполнителей.Получить(Выборка.Ссылка);
			Если СрокИсполнения = Неопределено Тогда
				СрокИсполнения = НовыеСрокиПроцесса.СрокиИсполнителей.Получить(Выборка.ТочкаМаршрута);
			КонецЕсли;
				
			Если СрокИсполнения <> Неопределено И СрокИсполнения <> Выборка.СрокИсполнения Тогда
				Форма.СрокиИсполненияЗадачИзменены = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки СрокИсполненияПроцессовПередЗаписью
// Обработчик предназначен для распространения изменения срока
// по иерархии процессов.
//
// Используется для переопределения одноименной процедуры в модуле СрокиИсполненияПроцессов.
// Вместо текущей следует использовать процедуру из модуля СрокиИсполненияПроцессов.
//
Процедура СрокИсполненияПроцессовПередЗаписью(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Источник.ДополнительныеСвойства.Свойство("ВидЗаписи")
		И Источник.ДополнительныеСвойства.ВидЗаписи <> "ЗаписьСОбновлениемОбщегоСпискаИПереносомСроковВИерархииПроцессов" Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	СрокИсполненияПроцесса = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "СрокИсполненияПроцесса");
		
	Источник.ДополнительныеСвойства.Вставить("СтарыйСрокИсполненияПроцесса", СрокИсполненияПроцесса);
	
КонецПроцедуры

// Обработчик подписки СрокИсполненияПроцессовПриЗаписи
// Обработчик предназначен для распространения изменения срока
// по иерархии процессов.
//
// Используется для переопределения одноименной процедуры в модуле СрокиИсполненияПроцессов.
// Вместо текущей следует использовать процедуру из модуля СрокиИсполненияПроцессов.
//
Процедура СрокИсполненияПроцессовПриЗаписи(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Источник.ДополнительныеСвойства.Свойство("ВидЗаписи")
		И Источник.ДополнительныеСвойства.ВидЗаписи <> "ЗаписьСОбновлениемОбщегоСпискаИПереносомСроковВИерархииПроцессов" Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Не Источник.ДополнительныеСвойства.Свойство("СтарыйСрокИсполненияПроцесса")
		Или Источник.ДополнительныеСвойства.СтарыйСрокИсполненияПроцесса = Источник.СрокИсполненияПроцесса Тогда
		
		Возврат;
	КонецЕсли;
	
	ЭтоШаблон = ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(Источник.Ссылка);
	
	ВедущийПроцессЯвляетсяКомплексным = Ложь;
	
	ТекущийУзелОбмена = КОДПовтИсп.ИдентификаторТекущегоУзла();
	
	Если ЭтоШаблон Тогда
		
		Если Не ЗначениеЗаполнено(Источник.КомплексныйПроцесс) Тогда
			Возврат;
		КонецЕсли;
		
		РеквизитыКомплексногоПроцессаСтрокой = 
			"Стартован,
			|ПометкаУдаления,
			|Завершен,
			|Состояние,
			|УзелОбработки";
		
		РеквизитыКомплексногоПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Источник.КомплексныйПроцесс, РеквизитыКомплексногоПроцессаСтрокой);
		
		Если Не РеквизитыКомплексногоПроцесса.Стартован
			Или РеквизитыКомплексногоПроцесса.ПометкаУдаления
			Или РеквизитыКомплексногоПроцесса.Завершен
			Или РеквизитыКомплексногоПроцесса.УзелОбработки <> ТекущийУзелОбмена
			
			Или РеквизитыКомплексногоПроцесса.Состояние <> 
				Перечисления.СостоянияБизнесПроцессов.Активен Тогда
				
			Возврат;
		КонецЕсли;
		
		ВедущийПроцесс = Источник.ВладелецШаблона;
		
		ВедущийПроцессЯвляетсяКомплексным = Истина;
		
	Иначе
		
		Если Не ЗначениеЗаполнено(Источник.ВедущаяЗадача)
			Или Не Источник.Стартован
			Или Источник.ПометкаУдаления
			Или Источник.Завершен
			Или Источник.УзелОбработки <> ТекущийУзелОбмена
			Или Источник.Состояние <> Перечисления.СостоянияБизнесПроцессов.Активен Тогда
			
			Возврат;
		КонецЕсли;
		
		ВедущаяЗадача = Источник.ВедущаяЗадача;
		ВедущийПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедущаяЗадача, "БизнесПроцесс");
		
		Если ТипЗнч(ВедущийПроцесс) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
			ВедущийПроцессЯвляетсяКомплексным = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВедущийПроцессЯвляетсяКомплексным Тогда
		
		ИдентификаторыИзмененныхДействий = Новый Массив;
		
		НовыйВедущийПроцесс = ВедущийПроцесс;
		ВедущийПроцесс = Источник.Ссылка;
		
		Пока ЗначениеЗаполнено(НовыйВедущийПроцесс) Цикл
			
			РеквизитыВедущегоПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				НовыйВедущийПроцесс, "ИдентификаторСсылки, Схема, Этапы");
			
			Если ЗначениеЗаполнено(РеквизитыВедущегоПроцесса.Схема) Тогда
				ПараметрыСхемы = 
					Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыПоСхеме(
					РеквизитыВедущегоПроцесса.Схема);
					
				Если Не ЗначениеЗаполнено(ПараметрыСхемы) Тогда
					Возврат;
				КонецЕсли;
				
				ДанныеПараметров =
					Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(
					ПараметрыСхемы);
				
				ИмяЭлемента = "";
				ТипыНастроек = Метаданные.ОпределяемыеТипы.ШаблонДействияКомплексногоПроцесса.Тип;
				Если ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(ВедущийПроцесс) Тогда
					
					Для Каждого ИмяЭлементаИНастройка Из ДанныеПараметров.НастройкиЭлементов Цикл
						НастройкаЭлемента = ИмяЭлементаИНастройка.Значение;
						Если Не ТипыНастроек.СодержитТип(ТипЗнч(НастройкаЭлемента)) Тогда
							Продолжить;
						КонецЕсли;
						Если ИмяЭлементаИНастройка.Значение = ВедущийПроцесс Тогда
							ИмяЭлемента = ИмяЭлементаИНастройка.Ключ;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				Иначе
					
					ПроцессыЭлементов = РаботаСКомплекснымиБизнесПроцессамиСервер.
						ПроцессыЭлементовСхемыПоКомплексномуПроцессу(НовыйВедущийПроцесс);
						
					Для Каждого ИмяЭлементаИПроцесс Из ПроцессыЭлементов Цикл
						Если ИмяЭлементаИПроцесс.Значение = ВедущийПроцесс Тогда
							ИмяЭлемента = ИмяЭлементаИПроцесс.Ключ;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ИмяЭлемента) Тогда
					Возврат;
				КонецЕсли;
				
				ИдентификаторИзмененногоДействия = 
					Строка(РеквизитыВедущегоПроцесса.ИдентификаторСсылки)
					+ "_"
					+ ИмяЭлемента;
							
				Если ВедущийПроцесс = Источник.Ссылка Тогда
					ИдентификаторыИзмененныхДействий.Добавить(ИдентификаторИзмененногоДействия);
				КонецЕсли;
				
			Иначе
				
				Этапы = РеквизитыВедущегоПроцесса.Этапы.Выгрузить();
				Если ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(ВедущийПроцесс) Тогда
					ПараметрыЭтапа = Этапы.Найти(ВедущийПроцесс, "ШаблонБизнесПроцесса");
				Иначе
					ПараметрыЭтапа = Этапы.Найти(ВедущийПроцесс, "ЗапущенныйБизнесПроцесс");
				КонецЕсли;
				
				Если ПараметрыЭтапа = Неопределено Тогда
					Возврат;
				КонецЕсли;
				
				Если ВедущийПроцесс = Источник.Ссылка Тогда
					ИдентификаторыИзмененныхДействий.Добавить(ПараметрыЭтапа.ИдентификаторЭтапа);
				КонецЕсли;
				
			КонецЕсли;
	
			ВедущийПроцесс = НовыйВедущийПроцесс;
			
			Если ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(НовыйВедущийПроцесс) Тогда
				НовыйВедущийПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НовыйВедущийПроцесс, "ВладелецШаблона");
			Иначе
				ВедущаяЗадача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НовыйВедущийПроцесс, "ВедущаяЗадача");
				Если ЗначениеЗаполнено(ВедущаяЗадача) Тогда
					НовыйВедущийПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВедущаяЗадача, "БизнесПроцесс");
				Иначе
					НовыйВедущийПроцесс = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаблокироватьДанныеДляРедактирования(ВедущийПроцесс);
		ОбъектВедущегоПроцесса = ВедущийПроцесс.ПолучитьОбъект();
		
		// Учет переносов сроков
		ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(
			ОбъектВедущегоПроцесса, Источник.ДополнительныеСвойства);
		
		// Расчет сроков
		СтруктураДляРасчета = СтруктураДляРасчетаСрокаКомплексногоПроцесса(ОбъектВедущегоПроцесса);
		
		ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
		ПараметрыДляРасчетаСроков.ДатаОтсчета = ОбъектВедущегоПроцесса.ДатаНачала;
		
		ДанныеДляРасчета = ДанныеДляРасчетаСроковКомплексногоПроцесса(
			СтруктураДляРасчета, ПараметрыДляРасчетаСроков, ИдентификаторыИзмененныхДействий);
		
		ПометитьРассчитаннымСрокПроцессаВТаблицеСроков(ДанныеДляРасчета.Сроки, Источник.Ссылка);
		
		РассчитатьСрокиИсполнения(
			ДанныеДляРасчета.Сроки, ДанныеДляРасчета.Предшественники,
			ДанныеДляРасчета.IDРассчитанногоСрок);
	
		ЗаполнитьСрокиКомплексногоПроцесса(
			ОбъектВедущегоПроцесса,
			ДанныеДляРасчета.Сроки,
			ДанныеДляРасчета.ИдентификаторыСроков);
		
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(ОбъектВедущегоПроцесса, "ЗаписьСОбновлениемОбщегоСпискаПроцессов");
		ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(ОбъектВедущегоПроцесса.Ссылка);
		
		РазблокироватьДанныеДляРедактирования(ВедущийПроцесс);
		
	Иначе // если ведущим является процесс обработки документов
		
		ЗаблокироватьДанныеДляРедактирования(ВедущийПроцесс);
		ОбъектВедущегоПроцесса = ВедущийПроцесс.ПолучитьОбъект();
		
		// Учет переносов сроков
		ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(
			ОбъектВедущегоПроцесса, Источник.ДополнительныеСвойства);
			
		СтруктураДляРасчетаСрока = 
			СрокиИсполненияПроцессов.СтруктураДляРасчетаСрокаСоставногоПроцесса(ОбъектВедущегоПроцесса);
		
		ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
		ПараметрыДляРасчетаСроков.ДатаОтсчета = ОбъектВедущегоПроцесса.ДатаНачала;
		
		СрокиИсполненияПроцессов.РассчитатьСрокиСоставногоПроцесса(
			СтруктураДляРасчетаСрока, ПараметрыДляРасчетаСроков);
			
		ОбъектВедущегоПроцесса.СрокИсполненияПроцесса = СтруктураДляРасчетаСрока.СрокИсполненияПроцесса;
		
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(ОбъектВедущегоПроцесса, "ЗаписьСОбновлениемОбщегоСпискаПроцессов");
		ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(ОбъектВедущегоПроцесса.Ссылка);
		
		РазблокироватьДанныеДляРедактирования(ВедущийПроцесс);
		
	КонецЕсли;
	
КонецПроцедуры

// Помечает рассчитанным срок исполнения процесса в таблице сроков для расчета.
//
// Параметры:
//  Сроки - ТаблицаЗначений - см. ПустаяТаблицаСроков
//  Процесс - БизнесПроцессСсылка, СправочникСсылка - ссылка на процесс/действие в таблице сроков.
//
Процедура ПометитьРассчитаннымСрокПроцессаВТаблицеСроков(Сроки, Процесс)
	
	Для Каждого СтрокаСрок Из Сроки Цикл
		
		Если СтрокаСрок.ПодчиненныеСроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаСрок.ПодчиненныеСроки.Ссылка = Процесс Тогда
			СтрокаСрок.Пройден = Истина;
		КонецЕсли;
		
		ПометитьРассчитаннымСрокПроцессаВТаблицеСроков(СтрокаСрок.ПодчиненныеСроки.Сроки, Процесс);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_КарточкиПроцессовИШаблонов

// Подготавливает форму процесса/шаблона для работы со сроками.
//
// Используется для переопределения одноименной процедуры в модуле СрокиИсполненияПроцессов.
// Вместо текущей следует использовать процедуру из модуля СрокиИсполненияПроцессов.
//
// Параметры:
//  Форма - УправляемаяФормы - форма процесса/шаблона.
//
Процедура ПриСозданииНаСервере(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Форма.ИспользоватьДатуИВремяВСрокахЗадач = 
		ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
		
	ПодсказкаВводаПоляСрокИсполнения = 
		СрокиИсполненияПроцессов.ПодсказкаВводаПоляСрокИсполнения(Форма);
	
	ШиринаПоляСрок = СрокиИсполненияПроцессов.ШиринаПоляСрокИсполнения(Форма);
	
	ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
	СтрокаЗаменыДляВсплывающейПодсказки = НСтр("ru = '(по графику работ)'");
	
	Если Форма.Элементы.Найти("ИсполнителиСрокИсполненияПредставление") <> Неопределено Тогда
		Форма.Элементы.ИсполнителиСрокИсполненияПредставление.ПодсказкаВвода = 
			ПодсказкаВводаПоляСрокИсполнения;
		Форма.Элементы.ИсполнителиСрокИсполненияПредставление.Ширина = ШиринаПоляСрок;
		
		Форма.Элементы.ИсполнителиСрокИсполненияПредставление.КнопкаВыбора = 
			Форма.ВозможенВыборТочнойДатыВСроках;
		
		Если Не ИспользоватьГрафикиРаботы Тогда
			Форма.Элементы.ИсполнителиСрокИсполненияПредставление.Подсказка = СтрЗаменить(
				Форма.Элементы.ИсполнителиСрокИсполненияПредставление.Подсказка,
				СтрокаЗаменыДляВсплывающейПодсказки, "");
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("СрокИсполненияПредставление") <> Неопределено Тогда
		Форма.Элементы.СрокИсполненияПредставление.ПодсказкаВвода = 
			ПодсказкаВводаПоляСрокИсполнения;
		Форма.Элементы.СрокИсполненияПредставление.Ширина = ШиринаПоляСрок;
		
		Форма.Элементы.СрокИсполненияПредставление.КнопкаВыбора = 
			Форма.ВозможенВыборТочнойДатыВСроках;
			
		Если Не ИспользоватьГрафикиРаботы Тогда
			Форма.Элементы.СрокИсполненияПредставление.Подсказка = СтрЗаменить(
				Форма.Элементы.СрокИсполненияПредставление.Подсказка,
				СтрокаЗаменыДляВсплывающейПодсказки, "");
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("СрокОбработкиРезультатовПредставление") <> Неопределено Тогда
		Форма.Элементы.СрокОбработкиРезультатовПредставление.ПодсказкаВвода = 
			ПодсказкаВводаПоляСрокИсполнения;
		Форма.Элементы.СрокОбработкиРезультатовПредставление.Ширина = ШиринаПоляСрок;
		
		Форма.Элементы.СрокОбработкиРезультатовПредставление.КнопкаВыбора = 
			Форма.ВозможенВыборТочнойДатыВСроках;
			
		Если Не ИспользоватьГрафикиРаботы Тогда
			Форма.Элементы.СрокОбработкиРезультатовПредставление.Подсказка = СтрЗаменить(
				Форма.Элементы.СрокОбработкиРезультатовПредставление.Подсказка,
				СтрокаЗаменыДляВсплывающейПодсказки, "");
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("СрокИсполненияПроцессаПредставление") <> Неопределено Тогда
		Если Не ИспользоватьГрафикиРаботы Тогда
			Форма.Элементы.СрокИсполненияПроцессаПредставление.Подсказка = СтрЗаменить(
				Форма.Элементы.СрокИсполненияПроцессаПредставление.Подсказка,
				СтрокаЗаменыДляВсплывающейПодсказки, "");
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("КоличествоИтераций") <> Неопределено
		И Форма.Объект.Свойство("НомерИтерации")
		И Форма.Объект.НомерИтерации > 0 Тогда
		
		Форма.Элементы.КоличествоИтераций.МинимальноеЗначение = Форма.Объект.НомерИтерации;
	КонецЕсли;
	
	Форма.ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

// Определяет необходимость расчета сроков в форме процесса.
//
// Используется для переопределения одноименной функции в модуле СрокиИсполненияПроцессов.
// Вместо текущей следует использовать функцию из модуля СрокиИсполненияПроцессов.
//
// Параметры:
//  Форма - УправляемаяФормы - форма процесса.
//
// Возвращаемое значение:
//  Булево
//
Функция ТребуетсяРасчетСроков(Форма) Экспорт
	
	Возврат Форма.Объект.Стартован = Ложь
		И Форма.Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен
		И Форма.Объект.ПометкаУдаления = Ложь
		И (Форма.НастройкаСтарта = Неопределено
			Или Форма.НастройкаСтарта.Состояние = Перечисления.СостоянияПроцессовДляЗапуска.ПустаяСсылка()
			Или Форма.НастройкаСтарта.Состояние = Перечисления.СостоянияПроцессовДляЗапуска.СтартОтменен);
	
КонецФункции

// Подготавливает форму шаблона процесса для работы со сроками.
//
// Используется для переопределения одноименной процедуры в модуле СрокиИсполненияПроцессов.
// Вместо текущей следует использовать процедуру из модуля СрокиИсполненияПроцессов.
//
// Параметры:
//  Форма - УправляемаяФормы - форма шаблона процесса.
//
Процедура КарточкаШаблонаПриСозданииНаСервере(Форма) Экспорт
	
	Форма.ДатаОтсчетаДляРасчетаСроков = Дата(1,1,1);
	
	Если Форма.Параметры.Свойство("ДатаОтсчетаДляРасчетаСроков")
		И ЗначениеЗаполнено(Форма.Параметры.ДатаОтсчетаДляРасчетаСроков) Тогда
		
		Форма.ДатаОтсчетаДляРасчетаСроков = Форма.Параметры.ДатаОтсчетаДляРасчетаСроков;
	КонецЕсли;
	
	КомплексныйПроцесс = КомплексныйПроцессДействия(Форма.Объект);
	
	ВозможенВыборТочнойДатыВСроках = ЗначениеЗаполнено(Форма.ДатаОтсчетаДляРасчетаСроков)
		И ЗначениеЗаполнено(КомплексныйПроцесс)
		И (Форма.КомплексныйПроцессСтартован
			Или Не Форма.ЭтоДействиеКомплексногоПроцессаПоШаблону);
	
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить(
		"ВозможенВыборТочнойДатыВСроках", ВозможенВыборТочнойДатыВСроках);
	ЗаполнитьЗначенияСвойств(Форма, СтруктураЗаполнения);
	
	СрокиИсполненияПроцессов.ПриСозданииНаСервере(Форма);
	
КонецПроцедуры

// Определяет принадлежность действия к комплексному процессу и возвращает ссылку на
// комплексный процесс.
//
// Параметры:
//  Действие - ДанныеФормыСтруктура - шаблон объект в форме.
//
// Возвращаемое значение:
//  БизнесПроцессСсылка.КомплексныйПроцесс, Неопределено
//
Функция КомплексныйПроцессДействия(Действие)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВладелецВерхнегоУровня = 
		РаботаСКомплекснымиБизнесПроцессамиСервер.ВладелецВерхнегоУровня(Действие);
	
	Если ЗначениеЗаполнено(ВладелецВерхнегоУровня)
		И ТипЗнч(ВладелецВерхнегоУровня) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		
		Возврат ВладелецВерхнегоУровня;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти
