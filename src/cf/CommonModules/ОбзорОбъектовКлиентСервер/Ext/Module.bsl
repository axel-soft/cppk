
////////////////////////////////////////////////////////////////////////////////
// Обзор объектов клиент сервер: модуль содержит общие процедуры и функции для
//                               формирования HTML-обзора объектов системы.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Удаляет вредоносный код html из текста.
//
// Параметры:
//   Текст - Строка - текст
//
Процедура УдалитьВредоносныйКодИзТекста(Текст) Экспорт
	
	НРегТекст = НРег(Текст);
	
	МассивСтрокБезВредоносногоТекста = Новый Массив;
	
	// Удаление скриптов
	НомерСкрипта = 1;
	ПозицияНачалаОбработки = 1;
	
	Пока Истина Цикл
		
		ПозицияНачалаОткрывающегоТегаScript = СтрНайти(НРегТекст, "<script",,, НомерСкрипта);
		ПозицияНачалаЗакрывающегоТегаScript = СтрНайти(НРегТекст, "</script",,, НомерСкрипта);
		
		Если ПозицияНачалаОткрывающегоТегаScript = 0 Или ПозицияНачалаЗакрывающегоТегаScript = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ПозицияОкончанияОткрывающегоТегаScript = СтрНайти(НРегТекст, ">",, ПозицияНачалаОткрывающегоТегаScript + 1);
		ПозицияОкончанияЗакрывающегоТегаScript = СтрНайти(НРегТекст, ">",, ПозицияНачалаЗакрывающегоТегаScript + 1);
		
		Если ПозицияОкончанияОткрывающегоТегаScript = 0 Или ПозицияОкончанияЗакрывающегоТегаScript = 0 Тогда
			Прервать;
		КонецЕсли;
		
		// Добавим текст до скрипта
		ТекстДоСкрипта = Сред(Текст, ПозицияНачалаОбработки, ПозицияНачалаОткрывающегоТегаScript - ПозицияНачалаОбработки);
		МассивСтрокБезВредоносногоТекста.Добавить(ТекстДоСкрипта);
		
		ПозицияНачалаОбработки = ПозицияОкончанияЗакрывающегоТегаScript + 1;
		НомерСкрипта = НомерСкрипта + 1;
		
	КонецЦикла;
	
	Если МассивСтрокБезВредоносногоТекста.Количество() > 0 Тогда
		
		// Добавим текст после последнего скрипта
		ТекстДоСкрипта = Сред(Текст, ПозицияНачалаОбработки);
		МассивСтрокБезВредоносногоТекста.Добавить(ТекстДоСкрипта);
		
		// Сформируем итоговую строку без скрипта
		Текст = СтрСоединить(МассивСтрокБезВредоносногоТекста);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в текст html реквизит в формате "Наименование реквизита: значение реквизита".
// 
// Параметры:
//  HTMLТекст - Строка - текст html.
//  Подпись - Строка - название реквизита.
//  Значение - Произвольный - значение реквизита.
//  Цвет - строка - шестнадцатеричное представление цвета (например: E9B7FF) значения реквизита.
//
Процедура ДобавитьРеквизит(HTMLТекст, Подпись, Значение, Цвет = "") Экспорт
	
	ДобавитьПодпись(HTMLТекст, Подпись);
	ДобавитьЗначение(HTMLТекст, Значение, Цвет); 
	HTMLТекст = HTMLТекст + "<br>";
	
КонецПроцедуры

// Добавляет переданную строку в текст html.
//
// Параметры:
//   HTMLТекст - Строка - текст html
//   Подпись - Строка - добавляемая строка
//
Процедура ДобавитьПодпись(HTMLТекст, Подпись) Экспорт
	
	Если ЗначениеЗаполнено(Подпись) Тогда 
		HTMLТекст = HTMLТекст + "<FONT color=#413003>";
		HTMLТекст = HTMLТекст + Подпись + " ";
		HTMLТекст = HTMLТекст + "</FONT>";
	КонецЕсли;
	
КонецПроцедуры

// Добавляет значение любого типа в текст html.
// Если в процедуру передается ссылочный тип данных, то в текст html
// добавляется навигационная ссылка с представлением переданного значения.
//
// Параметры:
//   HTMLТекст - Строка - текст html
//   Значение - Любой тип - значение реквизита
//   Цвет - строка - шестнадцатеричное представление цвета (например: E9B7FF) значения реквизита.
//   Представление - Строка - представление значения, используется для ссылочных данных.
//
Процедура ДобавитьЗначение(HTMLТекст, ЗначениеДанных, Цвет, Представление = "") Экспорт
	
	Значение = ЗначениеДанных;
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда 
		
		Если ЗначениеЗаполнено(Цвет) Тогда 
			HTMLТекст = HTMLТекст + "<FONT color=#"+Цвет+">";
			HTMLТекст = HTMLТекст + РаботаС_HTML.ЗаменитьСпецСимволыHTML(Значение);
			HTMLТекст = HTMLТекст + "</FONT>";
		Иначе	
			HTMLТекст = HTMLТекст + РаботаС_HTML.ЗаменитьСпецСимволыHTML(Значение);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата")
		Или ТипЗнч(Значение) = Тип("Число")
		Или ТипЗнч(Значение) = Тип("Булево") Тогда 
		
		РаботаС_HTML.ЗаменитьСпецСимволыHTML(Значение);
		
		Если ЗначениеЗаполнено(Цвет) Тогда 
			HTMLТекст = HTMLТекст + "<FONT color=#"+Цвет+">";
			HTMLТекст = HTMLТекст + Значение;
			HTMLТекст = HTMLТекст + "</FONT>";
		Иначе	
			HTMLТекст = HTMLТекст + Значение;
		КонецЕсли;
			
	ИначеЕсли ЗначениеЗаполнено(Значение) Тогда
		
		ПредставлениеЗначения = Представление;
		Если Не ЗначениеЗаполнено(ПредставлениеЗначения) Тогда
			ПредставлениеЗначения = Строка(Значение);
		КонецЕсли;
			
		HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<A href=v8doc:%1>%2</A>",
			ПолучитьНавигационнуюСсылку(Значение),
			РаботаС_HTML.ЗаменитьСпецСимволыHTML(ПредставлениеЗначения));
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет картинку в текст html.
//
// Параметры:
//   HTMLТекст - Строка - текст html.
//   Картинка - Картинка
//   Ссылка - Строка - ссылки для вставки в тег <a>
//   Alt - Строка - свойство ALT тега img
//
Процедура ДобавитьКартинку(HTMLТекст, Картинка, Ссылка = "", Alt = "") Экспорт
	
	HTMLТекст = HTMLТекст + HTMLТекстКартинки(Картинка, Ссылка, Alt);
	
КонецПроцедуры

// Формирует html текст картинки.
//
// Параметры:
//   Картинка - Картинка - Картинка для вставки в тег <img>.
//   Ссылка - Строка - Ссылка для вставки в тег <a>.
//   Alt - Строка - свойство ALT тега img
// 
// Возвращаемое значение:
//  Строка - HTML текст картинки.
//
Функция HTMLТекстКартинки(Картинка, Ссылка = "", Alt = "") Экспорт

	HTMLТекстКартинки = "";
	
	Если Картинка.Вид = ВидКартинки.Пустая Тогда  
		Возврат HTMLТекстКартинки;
	КонецЕсли;	
	
	ДвоичныеДанныеКартинки = Картинка.ПолучитьДвоичныеДанные();
	Base64ДанныеКартинки = Base64Строка(ДвоичныеДанныеКартинки);
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		HTMLТекстКартинки = HTMLТекстКартинки + "<a href=" + Ссылка + ">";
	КонецЕсли;
	
	СтрокаAlt = "";
	Если ЗначениеЗаполнено(Alt) Тогда
		СтрокаAlt = СтрШаблон("title=""%1""", Alt);
	КонецЕсли;	
	
	HTMLТекстКартинки = HTMLТекстКартинки
		+ "<img "
		+ СтрокаAlt 
		+ " src='data:image/"
		+ Картинка.Формат()
		+ ";base64,"
		+ Base64ДанныеКартинки + "'>";
		
	Если ЗначениеЗаполнено(Ссылка) Тогда
		HTMLТекстКартинки = HTMLТекстКартинки + "</a>";
	КонецЕсли;
	
	Возврат HTMLТекстКартинки;
	
КонецФункции

// Добавляет значение типа Задача, но с представлением пользователя.
// В текст html добавляется навигационная ссылка с представлением пользователя.
//
// Параметры:
//   HTMLТекст - Строка - текст html
//   Задача - ЗадачаСсылка.ЗадачаИсполнителя.
//   Представление - Строка
//
Процедура ДобавитьЗадачу(HTMLТекст, Задача, Представление) Экспорт
	
	HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"<A href=v8doc:%1 tabindex=""0"">%2</A>",
		"Подзадача_" + Задача.УникальныйИдентификатор(),
		Представление);
	
КонецПроцедуры

// Возвращает общий стиль для документов html.
// 
// Возвращаемое значение:
//  Строка - Общий стиль для документов HTML.
//
Функция СтильHTML() Экспорт
	
	Возврат "<style type=""text/css"">
		|	body {
		|		overflow:    auto;
		|		margin-top:  2px;
		|		margin-left: 2px;
		|		font-family: Arial;
		|		font-size:   10pt;}
		|	table {
		|		width:       100%;
		|		font-family: Arial;
		|		font-size:   10pt;
		|		border: 0px solid;}
		|	td {vertical-align: top;}
		| 	a:link {
		|		color: #006699; text-decoration: none;}
		|	a:visited {
		|		color: #006699; text-decoration: none;}
		|	a:hover {
		|		color: #006699; text-decoration: underline;}
		|	p {
		|		margin-top: 15px;}
		|	table.frame {
		|		border-collapse: collapse;
		|		border: 1px solid #C8C8C8;}
		|	td.frame {
		|		border: 1px solid #C8C8C8;}
		|</style>";
	
КонецФункции

// Проверяется, является ли указанный объект известным объектом обзора.
// 
// Параметры:
//  ОбъектОбзора - Произвольный.
// 
// Возвращаемое значение:
//  Булево - Это известный объект обзора.
//
Функция ЭтоИзвестныйОбъектОбзора(ОбъектОбзора) Экспорт
	
	ТипОбъектаОбзора = ТипЗнч(ОбъектОбзора);
	
	ЭтоИзвестныйОбъектОбзора =
		ТипОбъектаОбзора = Тип("СправочникСсылка.ДокументыПредприятия")
		Или ТипОбъектаОбзора = Тип("ДокументСсылка.ВходящееПисьмо")
		Или ТипОбъектаОбзора = Тип("ДокументСсылка.ИсходящееПисьмо")
		Или ТипОбъектаОбзора = Тип("СправочникСсылка.Контрагенты")
		Или ТипОбъектаОбзора = Тип("СправочникСсылка.Мероприятия")
		Или ТипОбъектаОбзора = Тип("СправочникСсылка.ПротоколыМероприятий")
		Или ТипОбъектаОбзора = Тип("СправочникСсылка.ТемыОбсуждений")
		Или ТипОбъектаОбзора = Тип("СправочникСсылка.СообщенияОбсуждений")
		Или ТипОбъектаОбзора = Тип("СправочникСсылка.Сотрудники")
		Или ТипОбъектаОбзора = Тип("СправочникСсылка.Проекты")
		Или ТипОбъектаОбзора = Тип("СправочникСсылка.ПроектныеЗадачи")
		Или ТипОбъектаОбзора = Тип("СправочникСсылка.ШаблоныЗадач")
		Или ТипОбъектаОбзора = Тип("ДокументСсылка.Бронь")
		Или ТипОбъектаОбзора = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО")
		Или ТипОбъектаОбзора = Тип("ДокументСсылка.ЭлектронныйДокументИсходящийЭДО");
	
	Возврат ЭтоИзвестныйОбъектОбзора;
	
КонецФункции

// Формирует новую структуру данных обзора объекта.
// 
// Возвращаемое значение:
//  Структура - Данные обзора объекта:
//   * ЕстьТекстHTML - Булево.
//   * ТекстHTML - Строка.
//  
Функция НовыеДанныеОбзораОбъекта() Экспорт
	
	ДанныеОбзораОбъекта = Новый Структура;
	ДанныеОбзораОбъекта.Вставить("ЕстьТекстHTML", Ложь);
	ДанныеОбзораОбъекта.Вставить("ТекстHTML", ПустойHTML());
	
	Возврат ДанныеОбзораОбъекта;
	
КонецФункции

// Формирует пустой обзор HTML.
// 
// Возвращаемое значение:
//  Строка.
// 
Функция ПустойHTML() Экспорт
	
	Возврат "<html><head></head><body></body></html>";
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Конструктор доп. параметров для генерации миникарточки См. ОбзорСпискаДокументов.ПолучитьДанныеМиникарточки
// 
// Возвращаемое значение:
//  Структура -  Новый доп параметры миникарточки:
// * ПоказыватьУдаленныеФайлы - Булево - 
// * ПредыдущийВидДокумента - СправочникСсылка.ВидыДокументов -
// 							- Неопределено - 
Функция НовыйДопПараметрыМиникарточки() Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("ПоказыватьУдаленныеФайлы", Ложь);
	Параметры.Вставить("ПредыдущийВидДокумента", Неопределено);
	Возврат Параметры;
	
КонецФункции

// Формирует пустую структуру контекста обновления дерева обзора.
// 
// Возвращаемое значение:
//  Структура - Контекст обновления дерева обзора:
//   * ОбъектОбзора - Произвольный, Неопределено - Объект обзора.
//   * РеквизитДерева - ДанныеФормыДерево, Неопределено - Реквизит дерева.
//   * ЭлементДерева - ТаблицаФормы, Неопределено - Элемент дерева.
//   * ЭлементЗаголовка - ПолеФормы, Неопределено - Элемент дерева.
//   * ПоказатьПомеченныеНаУдаление - Булево.
//   * СтрокиДереваПервогоУровня - КоллекцияСтрокДереваЗначений, Неопределено - Первый уровень.
//   * СтрокиДереваПоКлючам - Соответствие из КлючИЗначение - Строки дерева по ключам:
//      ** Ключ - Произвольный - Ключ строки дерева обзора.
//      ** Значение - СтрокаТаблицыЗначений - Строка дерева обзора.
//   * ВостребованныеСтроки - Соответствие из КлючИЗначение - Востребованные строки:
//      ** Ключ - Произвольный - Ключ строки дерева обзора.
//      ** Значение - Булево - Строка востребована.
//
Функция НовыйКонтекстОбновленияДереваОбзора() Экспорт
	
	КонтекстОбновленияДереваОбзора = Новый Структура;
	КонтекстОбновленияДереваОбзора.Вставить("ОбъектОбзора", Неопределено);
	КонтекстОбновленияДереваОбзора.Вставить("РеквизитДерева", Неопределено);
	КонтекстОбновленияДереваОбзора.Вставить("ЭлементДерева", Неопределено);
	КонтекстОбновленияДереваОбзора.Вставить("ЭлементЗаголовка", Неопределено);
	КонтекстОбновленияДереваОбзора.Вставить("ПоказатьПомеченныеНаУдаление", Ложь);
	КонтекстОбновленияДереваОбзора.Вставить("СтрокиДереваПервогоУровня", Неопределено);
	КонтекстОбновленияДереваОбзора.Вставить("СтрокиДереваПоКлючам", Новый Соответствие);
	КонтекстОбновленияДереваОбзора.Вставить("ВостребованныеСтроки", Новый Соответствие);
	
	Возврат КонтекстОбновленияДереваОбзора;
	
КонецФункции

#КонецОбласти