// @strict-types


#Область ПрограммныйИнтерфейс

// Обрабатывает событие создания формы подписания данных
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ПодписаниеДанных
Процедура ФормаПодписаниеДанныхПриСозданииНаСервере(Форма) Экспорт
	
	СоздатьРеквизитыФормыПодписанияДанных(Форма);
	СоздатьКомандыФормыПодписания(Форма);
	СоздатьЭлементыФормыПодписания(Форма);
	
	НастроитьСтраницыСертификатов(Форма);
	
	ЗаполнитьОписаниеДанныхЕдинственногоСертификата(Форма);
	
	НастроитьФормуПодписанияДляМобильногоПриНеобходимости(Форма);
	
	ЗаполнитьПараметрыФормыПодписания(Форма);
	
	УстановитьПараметрыМЧДПоВыбранномуСертификатуПриПодписании(Форма);
	
	ИзменитьТиповыеЭлементыФормыПодписания(Форма);
	
КонецПроцедуры

// Обрабатывает событие создания формы шифрования данных на сервере
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ШифрованиеДанных
Процедура ФормаШифрованиеДанныхПриСозданииНаСервере(Форма) Экспорт
	
	СоздатьРеквизитыФормыШифрованияДанных(Форма);
	НазначитьОбработчикиТаблицеСертификатовШифрования(Форма);
	
	ЗаполнитьОбязательныеДляШифрованияСертификаты(Форма);
	
КонецПроцедуры

// Обрабатывает событие создании формы расшифровки данных
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.РасшифровкаДанных
Процедура ФормаРасшифровкиДанныхПриСозданииНаСервере(Форма) Экспорт
	
	СоздатьРеквизитыФормыРасшифровкиДанных(Форма);
	СоздатьКомандыФормыРасшифровки(Форма);
	СоздатьЭлементыФормыРасшифровки(Форма);
	
	НастроитьСтраницыСертификатов(Форма, Ложь, Истина);
	
	ЗаполнитьОписаниеДанныхЕдинственногоСертификата(Форма);
	
	СкрытьТиповыеЭлементыФормыРасшифровки(Форма);
	
КонецПроцедуры

// Обрабатывает событие изменения сертификата на сервере
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ОтпечаткиСертификатовНаКлиенте - Массив Из Строка
//  Шифрование - Булево - Это шифрование данных
//  Расшифровка - Булево - Это расшифровка данных
Процедура ПриИзмененииСертификатаНаСервере(Форма, ОтпечаткиСертификатовНаКлиенте,
		Шифрование = Ложь, Расшифровка = Ложь) Экспорт
	
	Если Не Шифрование И Не Расшифровка Тогда
		
		ПриИзмененииСертификатаВФормеПодписания(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ФормаСертификата

// Обрабатывает создания на сервере формы сертификата
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ФормаЭлемента
Процедура ФормаСертификатаПриСозданииНаСервере(Форма) Экспорт
	
	СоздатьРеквизитыФормыСертификата(Форма);
	СоздатьЭлементыФормыСертификата(Форма);
	
	УстановитьНачальноеЗначениеОбязательныйДляШифрования(Форма);
	УстановитьВидимостьЭлементаСертификата(Форма);
	
КонецПроцедуры

// Обрабатывает чтение на сервере формы сертификата
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ФормаЭлемента
Процедура ФормаСертификатаПриЧтенииНаСервере(Форма) Экспорт
	
	УстановитьНачальноеЗначениеОбязательныйДляШифрования(Форма);
	
КонецПроцедуры

// Обрабатывает запись на сервере формы сертификата
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ФормаЭлемента
//  ТекущийОбъект - СправочникОбъект.СертификатыКлючейЭлектроннойПодписиИШифрования
//  ПараметрыЗаписи - Структура
Процедура ФормаСертификатаПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	ЗаписатьИзменениеСертификатаВПротоколРаботы(Форма);
	
КонецПроцедуры

#КонецОбласти

// Обрабатывает событие добавления строки подписи
// 
// Параметры:
//  СвойстваПодписи - Структура:
//    * Доверенность - ОпределяемыйТип.МашиночитаемаяДоверенность
//    * ВнешнееПодписание - ДокументСсылка.СведенияОВнешнемПодписании
//  ИдентификаторПодписи - УникальныйИдентификатор
Процедура ПриДобавленииСтрокиПодписи(СвойстваПодписи, ИдентификаторПодписи) Экспорт
	
	Доверенность = Справочники.МЧД003.ПустаяСсылка();
	Если СвойстваПодписи.Свойство("Доверенность") Тогда
		Доверенность = СвойстваПодписи.Доверенность;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Доверенность) Тогда
		РаботаСЭП.ЗанестиИнформациюОДоверенностиЭП(ИдентификаторПодписи, Доверенность, СвойстваПодписи);
	КонецЕсли;
	
	ВнешнееПодписание = Документы.СведенияОВнешнемПодписании.ПустаяСсылка();
	СвойстваПодписи.Свойство("ВнешнееПодписание", ВнешнееПодписание);
	Если ЗначениеЗаполнено(ВнешнееПодписание) Тогда
		РаботаСВнешнимПодписанием.ЗанестиИнформациюОВнешнемПодписании(ИдентификаторПодписи, ВнешнееПодписание,
			СвойстваПодписи);
	КонецЕсли;
	
КонецПроцедуры

#Область ФормаСертификатовИПрограмм

// Обрабатывает создание на сервере формы сертификатов и программ ЭП
// 
// Параметры:
//  Форма - см. ОбщаяФорма.НастройкиЭлектроннойПодписиИШифрования
Процедура ФормаСертификатовИПрограммПриСозданииНаСервере(Форма) Экспорт
	
	СоздатьРеквизитыФормыСертификатовИПрограмм(Форма);
	СоздатьЭлементыФормыСертификатовИПрограмм(Форма);
	
	ИзменитьТиповыеЭлементыФормыСертификатовИПрограмм(Форма);
	
	ФормаСертификатовИПрограммПриЗаполненииПрограммИНастроек(Форма);
	
КонецПроцедуры

// Обрабатывает событие заполнения настроек и программ в форме сертификатов и программ ЭП и шифрования
// 
// Параметры:
//  Форма - см. ОбщаяФорма.НастройкиЭлектроннойПодписиИШифрования
Процедура ФормаСертификатовИПрограммПриЗаполненииПрограммИНастроек(Форма) Экспорт
	
	ЗаполнитьРеквизитыФормыПоПерсональнымНастройкам(Форма);
	ЗаполнитьСертификатШифрованияВТаблицеПрограмм(Форма);
	
КонецПроцедуры

// Обрабатывает установку условного оформления в форме сертификатов и программ ЭП
// 
// Параметры:
//  Форма - см. ОбщаяФорма.НастройкиЭлектроннойПодписиИШифрования
Процедура ФормаСертификатовИПрограммПриУстановкеУсловногоОформления(Форма) Экспорт
	
	// Оформление отображения сообщения отсутствия  установки программы.
	ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ПоясняющийОшибкуТекст.Значение;
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Программы.СертификатДляШифрованияОтсутствует");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("ПрограммыСертификатДляШифрования");
	ЭлементОформляемогоПоля.Использование = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ФормаСохраненияВместеСЭП

// Обрабатывает создание на сервере формы сохранения файла вместе с ЭП
// 
// Параметры:
//  Форма - см. ОбщаяФорма.СохранениеВместеСЭлектроннойПодписью
Процедура ФормаСохраненияВместеСЭППриСозданииНаСервере(Форма) Экспорт
	
	СоздатьРеквизитыФормыСохраненияСЭП(Форма);
	СоздатьЭлементыФормыСохраненияСЭП(Форма);
	
	ЗаполнитьДанныеДоверенностейВФормеСохраненияСЭП(Форма);
	УстановитьПараметрыПоПерсональнымНастройкамПриСохраненииСЭП(Форма);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СозданиеРеквизитов

// Конструктор описания реквизита формы
// 
// Возвращаемое значение:
//  Структура:
// * Имя - Строка - 
// * Тип - Тип, ОписаниеТипов - 
// * Путь - Неопределено, Строка -
// * ЭтоТаблица - Булево
// * КолонкиТаблицы - Массив Из Структура - см. НовоеОписаниеРеквизитаФормы
//
Функция НовоеОписаниеРеквизитаФормы()
	
	ОписаниеРеквизита = Новый Структура;
	ОписаниеРеквизита.Вставить("Имя", "");
	ОписаниеРеквизита.Вставить("Тип", Новый ОписаниеТипов(""));
	ОписаниеРеквизита.Вставить("Путь", Неопределено);
	ОписаниеРеквизита.Вставить("ЭтоТаблица", Ложь);
	ОписаниеРеквизита.Вставить("КолонкиТаблицы", Новый Массив);
	
	Возврат ОписаниеРеквизита;
	
КонецФункции

// Создает реквизиты формы по описаниям реквизитов
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ОписанияРеквизитов - Массив Из см. НовоеОписаниеРеквизитаФормы
Процедура СоздатьРеквизитыФормыПоОписанию(Форма, ОписанияРеквизитов)
	
	#Если Не ВнешнееСоединение Тогда
	
	ДобавляемыеРеквизиты = Новый Массив();
	
	Для Каждого Реквизит Из ОписанияРеквизитов Цикл
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, Реквизит.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Реквизит.ЭтоТаблица Тогда
			РаботаСФормами.ДобавляемыеРеквизитыДобавитьТаблицу(
				ДобавляемыеРеквизиты, Реквизит.Имя, Реквизит.КолонкиТаблицы);
		Иначе
			РаботаСФормами.ДобавляемыеРеквизитыДобавить(
				ДобавляемыеРеквизиты, Реквизит.Имя, Реквизит.Тип, Реквизит.Путь);
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область СобытиеОбработчикаОжидания

// Создает реквизиты формы подписания данных
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
Процедура СоздатьРеквизитыФормыОбработчикаОжидания(Форма)
	
	ОписанияРеквизитов = ОписанияРеквизитовФормыОбработчикаОжидания();
	СоздатьРеквизитыФормыПоОписанию(Форма, ОписанияРеквизитов);
	
КонецПроцедуры

// Возвращает описания добавляемых программно реквизитов формы для подписания данных
// 
// Возвращаемое значение:
//  Массив из см. НовоеОписаниеРеквизитаФормы 
Функция ОписанияРеквизитовФормыОбработчикаОжидания()
	
	ОписаниеРеквизитов = Новый Массив(); // Массив из см. НовоеОписаниеРеквизитаФормы
	
	Реквизит = НовоеОписаниеРеквизитаФормы();
	Реквизит.Имя = ЭлектроннаяПодписьДокументооборотКлиентСервер.ИмяРеквизитаСобытияОбработчикаОжидания();
	Реквизит.Тип = Тип("Строка");
	
	ОписаниеРеквизитов.Добавить(Реквизит);
	
	Возврат ОписаниеРеквизитов;
	
КонецФункции

#КонецОбласти

#Область ОтображениеСертификатов

// Создает реквизиты формы подписания данных
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
Процедура СоздатьРеквизитыФормыОтображенияСертификатов(Форма)
	
	ОписанияРеквизитов = ОписанияРеквизитовФормыОтображенияСертификатов();
	СоздатьРеквизитыФормыПоОписанию(Форма, ОписанияРеквизитов);
	
КонецПроцедуры

// Возвращает описания добавляемых программно реквизитов формы для подписания данных
// 
// Возвращаемое значение:
//  Массив из см. НовоеОписаниеРеквизитаФормы 
Функция ОписанияРеквизитовФормыОтображенияСертификатов()
	
	ОписаниеРеквизитов = Новый Массив(); // Массив из см. НовоеОписаниеРеквизитаФормы
	
	ИменаРеквизитовСертификатов =
		ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыДляОтрображенияСертификатов().ИменаРеквизитов;
	
	Реквизит = НовоеОписаниеРеквизитаФормы();
	Реквизит.Имя = ИменаРеквизитовСертификатов.ОписаниеДанныхСертификата.ИмяТаблицы;
	Реквизит.ЭтоТаблица = Истина;
	
	Колонка = НовоеОписаниеРеквизитаФормы();
	Колонка.Имя = ИменаРеквизитовСертификатов.ОписаниеДанныхСертификата.Свойство;
	Колонка.Тип = Тип("Строка");
	Реквизит.КолонкиТаблицы.Добавить(Колонка);
	
	Колонка = НовоеОписаниеРеквизитаФормы();
	Колонка.Имя = ИменаРеквизитовСертификатов.ОписаниеДанныхСертификата.Значение;
	Колонка.Тип = Тип("Строка");
	Реквизит.КолонкиТаблицы.Добавить(Колонка);
	
	ОписаниеРеквизитов.Добавить(Реквизит);
	
	Возврат ОписаниеРеквизитов;
	
КонецФункции

// Конструктор параметров создания элементов страниц сертификатов
// 
// Возвращаемое значение:
//  Структура:
// * Родитель - Неопределено, ГруппаФормы -
// * СледующийЭлемент - Неопределено, ГруппаФормы -
Функция НовыеПараметрыСозданияЭлементовСтраницСертификатов()
	
	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("Родитель", Неопределено);
	ПараметрыСоздания.Вставить("СледующийЭлемент", Неопределено);
	
	Возврат ПараметрыСоздания;
	
КонецФункции

// Создает элементы формы подписания
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ПодписаниеДанных
//  ПараметрыСоздания - см. НовыеПараметрыСозданияЭлементовСтраницСертификатов
//
Процедура СоздатьЭлементыСтраницСертификатов(Форма, ПараметрыСоздания)
	
	#Если Не ВнешнееСоединение Тогда
	
	ИменаЭлементов =
		ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыДляОтрображенияСертификатов().ИменаЭлементов;
	ИменаКоманд =
		ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыДляОтрображенияСертификатов().ИменаКоманд;	
	ИменаРеквизитов =
		ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыДляОтрображенияСертификатов().ИменаРеквизитов;
	
	Страницы = РаботаСФормами.ДобавитьСтраницы(
		Форма, ИменаЭлементов.Страницы.СтраницыСертификаты, ПараметрыСоздания.Родитель);
	
	Если ПараметрыСоздания.СледующийЭлемент <> Неопределено Тогда
		Форма.Элементы.Переместить(Страницы, ПараметрыСоздания.Родитель, ПараметрыСоздания.СледующийЭлемент);
	КонецЕсли;
	
	СтраницаСертификат = РаботаСФормами.ДобавитьСтраницу(
		Форма, ИменаЭлементов.Страницы.СтраницаСертификат, Страницы);
	СтраницаСертификат.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	СтраницаСертификат.РастягиватьПоВертикали = Ложь;
	
	ГруппаСертификатШапка = РаботаСФормами.ДобавитьОбычнуюГруппу(
		Форма, ИменаЭлементов.Группы.ГруппаСертификатШапка, СтраницаСертификат);
	ГруппаСертификатШапка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаСертификатШапка.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаСертификатШапка.РастягиватьПоГоризонтали = Истина;
	
	РаботаСФормами.ДобавитьНадпись(
		Форма, ИменаЭлементов.Элементы.СертификатЗаголовок, ГруппаСертификатШапка, НСтр("ru = 'Сертификат:'"));
	
	СертификатЗаголовокОтступ = РаботаСФормами.ДобавитьНадпись(
		Форма, ИменаЭлементов.Элементы.СертификатЗаголовокОтступ, ГруппаСертификатШапка, "");
	СертификатЗаголовокОтступ.РастягиватьПоГоризонтали = Истина;
	СертификатЗаголовокОтступ.АвтоМаксимальнаяШирина = Ложь;
	СертификатЗаголовокОтступ.МаксимальнаяШирина = 0;
	
	РаботаСФормами.ДобавитьКнопку(
		Форма, ИменаЭлементов.Кнопки.ПоказатьДанныеСертификата, ГруппаСертификатШапка,
		ИменаКоманд.ПоказатьДанныеСертификата);
	
	ГруппаОписаниеСертификата = РаботаСФормами.ДобавитьОбычнуюГруппу(
		Форма, ИменаЭлементов.Группы.ГруппаОписаниеСертификата, СтраницаСертификат);
	ГруппаОписаниеСертификата.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаОписаниеСертификата.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаОписаниеСертификата.РастягиватьПоВертикали = Ложь;
	
	ОписаниеДанныхСертификата = РаботаСФормами.ДобавитьТаблицуФормы(
		Форма, ИменаЭлементов.Элементы.ОписаниеДанныхСертификата, ГруппаОписаниеСертификата,
		ИменаРеквизитов.ОписаниеДанныхСертификата.ИмяТаблицы);
	ОписаниеДанныхСертификата.ТолькоПросмотр = Истина;
	ОписаниеДанныхСертификата.ПропускатьПриВводе = Истина;
	ОписаниеДанныхСертификата.РежимВыделенияСтроки = РежимВыделенияСтрокиТаблицы.Строка;
	ОписаниеДанныхСертификата.Шапка = Ложь;
	ОписаниеДанныхСертификата.ГоризонтальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.НеИспользовать;
	ОписаниеДанныхСертификата.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.Нет;
	ОписаниеДанныхСертификата.ПоложениеСостоянияПросмотра = ПоложениеСостоянияПросмотра.Нет;
	ОписаниеДанныхСертификата.ПоложениеУправленияПоиском = ПоложениеУправленияПоиском.Нет;
	ОписаниеДанныхСертификата.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	ОписаниеДанныхСертификата.ГоризонтальныеЛинии = Ложь;
	ОписаниеДанныхСертификата.ВертикальныеЛинии = Ложь;
	ОписаниеДанныхСертификата.Высота = 4;
	
	ОписаниеДанныхСертификатаСвойство = РаботаСФормами.ДобавитьПолеВвода(
		Форма, ИменаЭлементов.Элементы.ОписаниеДанныхСертификатаСвойство, ОписаниеДанныхСертификата, 
		СтрШаблон("%1.%2",
			ИменаРеквизитов.ОписаниеДанныхСертификата.ИмяТаблицы,
			ИменаРеквизитов.ОписаниеДанныхСертификата.Свойство));
	ОписаниеДанныхСертификатаСвойство.Ширина = 13;
	ОписаниеДанныхСертификатаСвойство.РастягиватьПоГоризонтали = Ложь;
	
	РаботаСФормами.ДобавитьПолеВвода(
		Форма, ИменаЭлементов.Элементы.ОписаниеДанныхСертификатаЗначение, ОписаниеДанныхСертификата, 
		СтрШаблон("%1.%2",
			ИменаРеквизитов.ОписаниеДанныхСертификата.ИмяТаблицы,
			ИменаРеквизитов.ОписаниеДанныхСертификата.Значение));
	
	СтраницаВыборСертификата = РаботаСФормами.ДобавитьСтраницу(
		Форма, ИменаЭлементов.Страницы.СтраницаВыборСертификата, Страницы);
	СтраницаВыборСертификата.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	ГруппаВыборСертификатаШапка = РаботаСФормами.ДобавитьОбычнуюГруппу(
		Форма, ИменаЭлементов.Группы.ГруппаВыборСертификатаШапка, СтраницаВыборСертификата);
	ГруппаВыборСертификатаШапка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаВыборСертификатаШапка.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаВыборСертификатаШапка.РастягиватьПоГоризонтали = Истина;
	
	РаботаСФормами.ДобавитьНадпись(
		Форма, ИменаЭлементов.Элементы.ВыборСертификатаЗаголовок, ГруппаВыборСертификатаШапка,
		НСтр("ru = 'Выберите сертификат:'"));
	
	ВыборСертификатаЗаголовокОтступ = РаботаСФормами.ДобавитьНадпись(
		Форма, ИменаЭлементов.Элементы.ВыборСертификатаЗаголовокОтступ, ГруппаВыборСертификатаШапка, "");
	ВыборСертификатаЗаголовокОтступ.РастягиватьПоГоризонтали = Истина;
	ВыборСертификатаЗаголовокОтступ.АвтоМаксимальнаяШирина = Ложь;
	ВыборСертификатаЗаголовокОтступ.МаксимальнаяШирина = 0;
	
	РаботаСФормами.ДобавитьКнопку(
		Форма, ИменаЭлементов.Кнопки.ПоказатьДанныеСертификатаСписок, ГруппаВыборСертификатаШапка,
		ИменаКоманд.ПоказатьДанныеСертификата);
	
	СертификатСписокВыбора = РаботаСФормами.ДобавитьТаблицуФормы(
		Форма, ИменаЭлементов.Элементы.СертификатСписокВыбора, СтраницаВыборСертификата,
		"СертификатСписокВыбора");
	СертификатСписокВыбора.ИзменятьСоставСтрок = Ложь;
	СертификатСписокВыбора.ИзменятьПорядокСтрок = Ложь;
	СертификатСписокВыбора.ТолькоПросмотр = Истина;
	СертификатСписокВыбора.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	СертификатСписокВыбора.РежимВыделения = РежимВыделенияТаблицы.Одиночный;
	СертификатСписокВыбора.РежимВыделенияСтроки = РежимВыделенияСтрокиТаблицы.Строка;
	СертификатСписокВыбора.АвтоВводНовойСтроки = Ложь;
	СертификатСписокВыбора.ВысотаВСтрокахТаблицы = 4;
	СертификатСписокВыбора.РастягиватьПоВертикали = Ложь;
	СертификатСписокВыбора.УстановитьДействие("ПередНачаломДобавления", "Подключаемый_ПередНачаломДобавленияДО");
	СертификатСписокВыбора.УстановитьДействие("ПередНачаломИзменения", "Подключаемый_ПередНачаломИзмененияДО");
	СертификатСписокВыбора.УстановитьДействие("ПередУдалением", "Подключаемый_ПередУдалениемДО");
	СертификатСписокВыбора.УстановитьДействие("ПриАктивизацииСтроки", "Подключаемый_ПриАктивизацииСтрокиДО");
	
	РаботаСФормами.ДобавитьПолеВвода(
		Форма, ИменаЭлементов.Элементы.СертификатСписокВыбораЗначение, СертификатСписокВыбора, 
		"СертификатСписокВыбора.Значение");
	
	#КонецЕсли
	
КонецПроцедуры

// Заполняет таблицу описания данных сертификата в форме подписания данных
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//    * Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//    * СертификатАдрес - Строка
//
Процедура ЗаполнитьОписаниеДанныхЕдинственногоСертификата(Форма)
	
	#Если Не ВнешнееСоединение Тогда
	
	ИменаРеквизитов =
		ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыДляОтрображенияСертификатов().ИменаРеквизитов;
	
	Если ЗначениеЗаполнено(Форма.Сертификат) Тогда
		ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(Форма.СертификатАдрес); // ДвоичныеДанные
		СертификатКриптографии = 
			ЭлектроннаяПодписьСлужебный.СертификатИзДвоичныхДанных(
				ДвоичныеДанныеСертификата);
			
		Если Не СертификатКриптографии = Неопределено Тогда
			ЭлектроннаяПодписьСлужебныйКлиентСервер.ЗаполнитьОписаниеДанныхСертификата(
				Форма[ИменаРеквизитов.ОписаниеДанныхСертификата.ИмяТаблицы], 
				ЭлектроннаяПодпись.СвойстваСертификата(СертификатКриптографии));
		КонецЕсли;
	КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры

// Настраивает отображение страниц сертификатов
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ПодписаниеДанных
//  Шифрование - Булево
//  Расшифровка - Булево
//  
Процедура НастроитьСтраницыСертификатов(Форма, Шифрование = Ложь, Расшифровка = Ложь)
	
	#Если Не ВнешнееСоединение Тогда
	
	ИменаЭлементов =
		ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыДляОтрображенияСертификатов().ИменаЭлементов;
	
	СтраницыСертификаты = Форма.Элементы[ИменаЭлементов.Страницы.СтраницыСертификаты]; // ГруппаФормы
	СтраницаВыборСертификата = Форма.Элементы[ИменаЭлементов.Страницы.СтраницаВыборСертификата]; // ГруппаФормы
	СтраницаСертификат = Форма.Элементы[ИменаЭлементов.Страницы.СтраницаСертификат]; // ГруппаФормы
	
	//@skip-check property-return-type
	СтраницыСертификаты.ТекущаяСтраница = СтраницаВыборСертификата;
	Если Форма.СертификатСписокВыбора.Количество() > 1 Или Форма.СертификатСписокВыбора.Количество() = 0 Тогда
		Форма.Сертификат = Неопределено;
	ИначеЕсли Форма.СертификатСписокВыбора.Количество() = 1 Тогда
		//@skip-check statement-type-change
		Форма.Сертификат = Форма.СертификатСписокВыбора[0].Значение;
		//@skip-check property-return-type
		СтраницыСертификаты.ТекущаяСтраница = СтраницаСертификат;
	КонецЕсли;
	
	ЭлектроннаяПодписьСлужебный.СертификатПриИзмененииНаСервере(Форма, Новый Массив(), Шифрование, Расшифровка);
	
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область ФормаПодписанияДанных

#Область СозданиеРеквизитовФормыПодписания

// Создает реквизиты формы подписания данных
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ПодписаниеДанных
Процедура СоздатьРеквизитыФормыПодписанияДанных(Форма)
	
	ОписанияРеквизитов = ОписанияРеквизитовФормыПодписаниеДанных();
	СоздатьРеквизитыФормыПоОписанию(Форма, ОписанияРеквизитов);
	
	СоздатьРеквизитыФормыОтображенияСертификатов(Форма);
	СоздатьРеквизитыФормыОбработчикаОжидания(Форма);
	
КонецПроцедуры

// Возвращает описания добавляемых программно реквизитов формы подписания данных
// 
// Возвращаемое значение:
//  Массив из см. НовоеОписаниеРеквизитаФормы 
Функция ОписанияРеквизитовФормыПодписаниеДанных()
	
	ИменаРеквизитов =
		ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыПодписанияДанных().ИменаРеквизитов;
	
	ОписаниеРеквизитов = Новый Массив(); // Массив из см. НовоеОписаниеРеквизитаФормы
	
	Реквизит = НовоеОписаниеРеквизитаФормы();
	Реквизит.Имя = ИменаРеквизитов.ВнешниеДоверенностиСертификатов;
	Реквизит.Тип = Новый ОписаниеТипов("");
	ОписаниеРеквизитов.Добавить(Реквизит);
	
	Реквизит = НовоеОписаниеРеквизитаФормы();
	Реквизит.Имя = ИменаРеквизитов.ВыводилиПредупреждениеНеУстановленыСертификатыЭП;
	Реквизит.Тип = Тип("Булево");
	ОписаниеРеквизитов.Добавить(Реквизит);
	
	Реквизит = НовоеОписаниеРеквизитаФормы();
	Реквизит.Имя = ИменаРеквизитов.ДоверенностьСертификата;
	Реквизит.Тип = Метаданные.ОпределяемыеТипы.МашиночитаемаяДоверенность.Тип;
	ОписаниеРеквизитов.Добавить(Реквизит);
	
	Реквизит = НовоеОписаниеРеквизитаФормы();
	Реквизит.Имя = ИменаРеквизитов.ДоступныеДоверенностиСертификата;
	Реквизит.Тип = Тип("СписокЗначений");
	ОписаниеРеквизитов.Добавить(Реквизит);
	
	Возврат ОписаниеРеквизитов;
	
КонецФункции

#КонецОбласти

// Создает команды на форме подписания
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ПодписаниеДанных
Процедура СоздатьКомандыФормыПодписания(Форма)
	
	#Если Не ВнешнееСоединение Тогда
	
	ИменаКоманд = ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыДляОтрображенияСертификатов().ИменаКоманд;
	
	Команда = РаботаСФормами.ДобавитьКоманду(Форма, ИменаКоманд.ПоказатьДанныеСертификата, "",
		НСтр("ru = 'Показать данные сертификата'"), БиблиотекаКартинок.СертификатКлюча);
	Команда.Отображение = ОтображениеКнопки.Картинка;
	Команда.Действие = "Подключаемый_ОбработкаКомандыДО";
	
	#КонецЕсли
	
КонецПроцедуры

// Создает элементы формы подписания
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ПодписаниеДанных
Процедура СоздатьЭлементыФормыПодписания(Форма)
	
	#Если Не ВнешнееСоединение Тогда
	
	ПараметрыСоздания = НовыеПараметрыСозданияЭлементовСтраницСертификатов();
	ПараметрыСоздания.Родитель = Форма.Элементы.ГруппаПодписаниеИКомментарий;
	ПараметрыСоздания.СледующийЭлемент = Форма.Элементы.ГруппаПодписание;
	СоздатьЭлементыСтраницСертификатов(Форма, ПараметрыСоздания);
	
	ИменаЭлементов =
		ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыПодписанияДанных().ИменаЭлементов;
	
	ГруппаМЧД = РаботаСФормами.ДобавитьОбычнуюГруппу(
		Форма, ИменаЭлементов.Группы.ГруппаМЧД, Форма.Элементы.ГруппаПоля);
	ГруппаМЧД.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаМЧД.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаМЧД.РастягиватьПоГоризонтали = Истина;
	
	Форма.Элементы.Переместить(ГруппаМЧД, Форма.Элементы.ГруппаПодписаниеИКомментарий, Форма.Элементы.ГруппаПодписание);
	
	НадписьДоверенность = РаботаСФормами.ДобавитьНадпись(
		Форма, ИменаЭлементов.Элементы.НадписьДоверенность, ГруппаМЧД,
			НСтр("ru = 'Подписание по доверенности <ИД доверенности> (от имени <Организация>)'"));
	НадписьДоверенность.УстановитьДействие("Нажатие", "Подключаемый_НажатиеДО");
	НадписьДоверенность.РастягиватьПоГоризонтали = Истина;
	НадписьДоверенность.АвтоМаксимальнаяШирина = Ложь;
	НадписьДоверенность.МаксимальнаяШирина = 0;
	//@skip-check property-return-type
	НадписьДоверенность.Гиперссылка = Истина;
	
	#КонецЕсли
	
КонецПроцедуры

// Настраивает форму подписания для МК
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ПодписаниеДанных
Процедура НастроитьФормуПодписанияДляМобильногоПриНеобходимости(Форма)
	
	#Если Не ВнешнееСоединение Тогда
	
	Если Не МК_ПовтИсп.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	Элементы.Пароль.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;;
	Элементы.ЗапомнитьПароль.Заголовок = НСтр("ru = 'Запомнить'");
	Элементы.ФормаСправка.Видимость = Ложь;
	
	Элементы.Страницы.Видимость = Ложь;
	Элементы.Комментарий.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	
	// Скроем поле документ в верхней части формы.
	Элементы.ПредставлениеДанных.Видимость = Ложь;
	
	// Скроем все что связано с сертификатом.
	Элементы.ОписаниеДанныхСертификата.Видимость = Ложь;
	Элементы.СтраницыСертификаты.Видимость = Ложь;
	
	Элементы.ГруппаПодписаниеИКомментарий.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	Элементы.ГруппаКонтейнер.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	Элементы.ГруппаКонтейнер1.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	Элементы.ГруппаПредставлениеДанных.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	Элементы.ГруппаПароль.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	Элементы.ГруппаПодписание.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	Элементы.ГруппаПодписание.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	#КонецЕсли
	
КонецПроцедуры

// Заполнить параметры формы подписания.
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ПодписаниеДанных
Процедура ЗаполнитьПараметрыФормыПодписания(Форма)
	
	#Если Не ВнешнееСоединение Тогда
	
	ИменаРеквизитов =
		ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыПодписанияДанных().ИменаРеквизитов;
	
	Параметры = Форма.Параметры;
	
	Если Параметры.Свойство("ДоверенностиСертификатов") Тогда
		
		ВнешниеДоверенности = Параметры["ДоверенностиСертификатов"]; // Соответствие
		
		Если ТипЗнч(ВнешниеДоверенности) = Тип("Соответствие") Тогда
			Форма[ИменаРеквизитов.ВнешниеДоверенностиСертификатов] =
				Новый ФиксированноеСоответствие(ВнешниеДоверенности);
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры

#Область РаботаСМЧДПриПодписании

// Устанавливает параметры МЧД по выбранному сертификату подписи при подписании
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ПодписаниеДанных
Процедура УстановитьПараметрыМЧДПоВыбранномуСертификатуПриПодписании(Форма)
	
	#Если Не ВнешнееСоединение Тогда
	
	ИменаРеквизитов =
		ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыПодписанияДанных().ИменаРеквизитов;
	ИменаЭлементов = ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыПодписанияДанных().ИменаЭлементов;
	
	ДоступныеДоверенностиСертификата = Форма[ИменаРеквизитов.ДоступныеДоверенностиСертификата]; // СписокЗначений Из ОпределяемыйТип.МашиночитаемаяДоверенность
	
	ДоступныеДоверенностиСертификата.Очистить();
	ДоверенностьСертификата = Неопределено;
	Форма[ИменаРеквизитов.ДоверенностьСертификата] = ДоверенностьСертификата;
	
	ГруппаМЧД = Форма.Элементы[ИменаЭлементов.Группы.ГруппаМЧД]; // ГруппаФормы
	НадписьДоверенность = Форма.Элементы[ИменаЭлементов.Элементы.НадписьДоверенность]; // ДекорацияФормы
	
	Если Не ЗначениеЗаполнено(Форма.Сертификат) Тогда
		ГруппаМЧД.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Доверенности = ДоступныеДоверенностиПриПодписании(Форма, Форма.Сертификат);
	
	Если Доверенности.Количество() = 0 Тогда
		ГруппаМЧД.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ДоверенностьСертификата = Доверенности[0];
	Форма[ИменаРеквизитов.ДоверенностьСертификата] = ДоверенностьСертификата;
	НадписьДоверенность.Заголовок = ПредставлениеВыбраннойДоверенности(ДоверенностьСертификата);
	
	Если Доверенности.Количество() = 1
		И Не ЗначениеЗаполнено(ДоверенностьСертификата) Тогда
		
		ГруппаМЧД.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ГруппаМЧД.Видимость = Истина;
	
	Для Каждого Доверенность Из Доверенности Цикл
		ДоступныеДоверенностиСертификата.Добавить(Доверенность, ПредставлениеВыбраннойДоверенности(Доверенность));
	КонецЦикла;
	
	#КонецЕсли
	
КонецПроцедуры

// Доступные доверенности.
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ПодписаниеДанных
//  ВыбранныйСертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
// 
// Возвращаемое значение:
//  Массив Из ОпределяемыйТип.МашиночитаемаяДоверенность
Функция ДоступныеДоверенностиПриПодписании(Форма, ВыбранныйСертификат)
	
	ИменаРеквизитов =
		ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыПодписанияДанных().ИменаРеквизитов;
	
	ВнешниеДоверенностиСертификатов = Форма[ИменаРеквизитов.ВнешниеДоверенностиСертификатов]; // ФиксированноеСоответствие
	
	ДоступныеПоВнешнемуОтбору = Новый Массив;
	Если ТипЗнч(ВнешниеДоверенностиСертификатов) = Тип("ФиксированноеСоответствие")
		И ВнешниеДоверенностиСертификатов.Получить(ВыбранныйСертификат) <> Неопределено Тогда
		
		ДоступныеПоВнешнемуОтбору = ВнешниеДоверенностиСертификатов[ВыбранныйСертификат]; // Массив Из ОпределяемыйТип.МашиночитаемаяДоверенность
	КонецЕсли;
	
	Если ТипЗнч(ДоступныеПоВнешнемуОтбору) = Тип("Массив")
		И ДоступныеПоВнешнемуОтбору.Количество() > 0 Тогда
		
		Возврат ДоступныеПоВнешнемуОтбору;
		
	Иначе
		
		Доверенности = Новый Массив(); // Массив Из ОпределяемыйТип.МашиночитаемаяДоверенность
		
		Если Не РаботаСЭП.СертификатуНужнаДоверенность(ВыбранныйСертификат) Тогда
			Доверенности.Добавить(Справочники.МЧД003.ПустаяСсылка());
			Возврат Доверенности;
		КонецЕсли;
		
		Доверенности = РаботаСЭП.ДоступныеМЧДДляПодписанияСертификатом(ВыбранныйСертификат);
		
		Доверенности.Добавить(Справочники.МЧД003.ПустаяСсылка());
		
		Возврат Доверенности;
		
	КонецЕсли;
	
КонецФункции

// Возвращает представление доверенности
// 
// Параметры:
//  Доверенность - ОпределяемыйТип.МашиночитаемаяДоверенность
// 
// Возвращаемое значение:
//  Строка
Функция ПредставлениеВыбраннойДоверенности(Доверенность)
	
	Если Не ЗначениеЗаполнено(Доверенность) Тогда
		Возврат НСтр("ru = 'Подписать без доверенности (от имени физ. лица)'");
	КонецЕсли;
	
	ПредставленияДоверенностей = РаботаСЭП.ПредставленияМЧДПриПодписании(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Доверенность));
	
	Возврат ПредставленияДоверенностей[Доверенность];
	
КонецФункции

#КонецОбласти

// Скрывает типовые элементы формы подписания, не используемые в ДО
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ПодписаниеДанных
Процедура ИзменитьТиповыеЭлементыФормыПодписания(Форма)
	
	#Если Не ВнешнееСоединение Тогда
	
	Элементы = Форма.Элементы;
	
	Элементы.Сертификат.Видимость = Ложь;
	Элементы.ГруппаДоверенность.Видимость = Ложь;
	Элементы.ГруппаТипПодписи.Видимость = Ложь;
	
	#КонецЕсли
	
КонецПроцедуры

// Вызывается при изменении сертификата на форме подписания
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ПодписаниеДанных
Процедура ПриИзмененииСертификатаВФормеПодписания(Форма)
	
	УстановитьПараметрыМЧДПоВыбранномуСертификатуПриПодписании(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ФормаШифрованияДанных


#Область СозданиеРеквизитовФормыШифрования

// Создает реквизиты формы шифрования данных
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ШифрованиеДанных
Процедура СоздатьРеквизитыФормыШифрованияДанных(Форма)
	
	ОписанияРеквизитов = ОписанияРеквизитовФормыШифрованияДанных();
	СоздатьРеквизитыФормыПоОписанию(Форма, ОписанияРеквизитов);
	
КонецПроцедуры

// Возвращает описания добавляемых программно реквизитов формы шифрования данных
// 
// Возвращаемое значение:
//  Массив из см. НовоеОписаниеРеквизитаФормы 
Функция ОписанияРеквизитовФормыШифрованияДанных()
	
	ИменаРеквизитов =
		ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыШифрованияДанных().ИменаРеквизитов;
	
	ОписаниеРеквизитов = Новый Массив(); // Массив из см. НовоеОписаниеРеквизитаФормы
	
	Реквизит = НовоеОписаниеРеквизитаФормы();
	Реквизит.Имя = ИменаРеквизитов.ОбязательныеДляШифрованияСертификаты;
	Реквизит.Тип = Новый ОписаниеТипов("");
	ОписаниеРеквизитов.Добавить(Реквизит);
	
	Реквизит = НовоеОписаниеРеквизитаФормы();
	Реквизит.Имя = ИменаРеквизитов.СертификатыШифрования.ОбязательныйДляШифрования;
	Реквизит.Тип = Тип("Булево");
	Реквизит.Путь = ИменаРеквизитов.СертификатыШифрования.ИмяТаблицы;
	ОписаниеРеквизитов.Добавить(Реквизит);
	
	Возврат ОписаниеРеквизитов;
	
КонецФункции

#КонецОбласти

// Назначает обработчики событий таблице сертификатов шифрования
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ШифрованиеДанных
Процедура НазначитьОбработчикиТаблицеСертификатовШифрования(Форма)
	
	#Если Не ВнешнееСоединение Тогда
	
	ЭлементТаблицы = Форма.Элементы.СертификатыШифрования;
	ЭлементТаблицы.УстановитьДействие("ПередНачаломИзменения", "Подключаемый_ПередНачаломИзмененияДО");
	ЭлементТаблицы.УстановитьДействие("ПередУдалением", "Подключаемый_ПередУдалениемДО");
	
	#КонецЕсли
	
КонецПроцедуры

// Заполняет обязательные для шифрования сертификаты в форме шифрования данных
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ШифрованиеДанных
Процедура ЗаполнитьОбязательныеДляШифрованияСертификаты(Форма)
	
	ИменаРеквизитов =
		ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыШифрованияДанных().ИменаРеквизитов;
	
	ИмяРеквизита = ИменаРеквизитов.ОбязательныеДляШифрованияСертификаты;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяРеквизита) Тогда
		Возврат;
	КонецЕсли;
	
	Форма[ИмяРеквизита] = Новый ФиксированноеСоответствие(ОбязательныеДляШифрованияСертификатыПоПрограммам());
	
КонецПроцедуры

// Возвращает обязательные сертификаты шифрования по программам
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - СправочникСсылка.ПрограммыЭлектроннойПодписиИШифрования
//    * Значение - Массив Из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
Функция ОбязательныеДляШифрованияСертификатыПоПрограммам()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка КАК Сертификат,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Программа
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
		|ГДЕ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.ОбязательныйДляШифрования
		|	И НЕ СертификатыКлючейЭлектроннойПодписиИШифрования.Отозван
		|	И НЕ СертификатыКлючейЭлектроннойПодписиИШифрования.ПометкаУдаления";
	
	СертификатыПоПрограммам = Новый Соответствие();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Программа = Выборка.Программа;
		Сертификат = Выборка.Сертификат;
		
		СертификатыПоПрограмме = СертификатыПоПрограммам[Программа]; // Массив Из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
		Если СертификатыПоПрограмме = Неопределено Тогда
			СертификатыПоПрограмме = Новый Массив();
			СертификатыПоПрограммам[Программа] = СертификатыПоПрограмме;
		КонецЕсли;
		
		СертификатыПоПрограмме.Добавить(Сертификат);
		
	КонецЦикла;
	
	Возврат СертификатыПоПрограммам;
	
КонецФункции

#КонецОбласти

#Область ФормаРасшифровкиДанных

#Область СозданиеРеквизитовФормыРасшифровки

// Создает реквизиты формы расшифровки данных
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.РасшифровкаДанных
Процедура СоздатьРеквизитыФормыРасшифровкиДанных(Форма)
	
	ОписанияРеквизитов = ОписанияРеквизитовФормыРасшифровкиДанных();
	СоздатьРеквизитыФормыПоОписанию(Форма, ОписанияРеквизитов);
	
	СоздатьРеквизитыФормыОтображенияСертификатов(Форма);
	СоздатьРеквизитыФормыОбработчикаОжидания(Форма);
	
КонецПроцедуры

// Возвращает описания добавляемых программно реквизитов формы расшифровки данных
// 
// Возвращаемое значение:
//  Массив из см. НовоеОписаниеРеквизитаФормы 
Функция ОписанияРеквизитовФормыРасшифровкиДанных()
	
	ИменаРеквизитов =
		ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыРасшифровкиДанных().ИменаРеквизитов;
	
	ОписаниеРеквизитов = Новый Массив(); // Массив из см. НовоеОписаниеРеквизитаФормы
	
	Реквизит = НовоеОписаниеРеквизитаФормы();
	Реквизит.Имя = ИменаРеквизитов.ВыводилиПредупреждениеНеУстановленыСертификатыЭП;
	Реквизит.Тип = Тип("Булево");
	ОписаниеРеквизитов.Добавить(Реквизит);
	
	Возврат ОписаниеРеквизитов;
	
КонецФункции

#КонецОбласти

// Создает команды на форме расшифровки
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.РасшифровкаДанных
Процедура СоздатьКомандыФормыРасшифровки(Форма)
	
	#Если Не ВнешнееСоединение Тогда
	
	ИменаКоманд = ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыДляОтрображенияСертификатов().ИменаКоманд;
	
	Команда = РаботаСФормами.ДобавитьКоманду(Форма, ИменаКоманд.ПоказатьДанныеСертификата, "",
		НСтр("ru = 'Показать данные сертификата'"), БиблиотекаКартинок.СертификатКлюча);
	Команда.Отображение = ОтображениеКнопки.Картинка;
	Команда.Действие = "Подключаемый_ОбработкаКомандыДО";
	
	#КонецЕсли
	
КонецПроцедуры

// Создает элементы формы расшифровки
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.РасшифровкаДанных
Процедура СоздатьЭлементыФормыРасшифровки(Форма)
	
	#Если Не ВнешнееСоединение Тогда
	
	ПараметрыСоздания = НовыеПараметрыСозданияЭлементовСтраницСертификатов();
	ПараметрыСоздания.Родитель = Форма;
	ПараметрыСоздания.СледующийЭлемент = Форма.Элементы.ГруппаРасшифровка;
	СоздатьЭлементыСтраницСертификатов(Форма, ПараметрыСоздания);
	
	#КонецЕсли
	
КонецПроцедуры

// Скрывает типовые элементы формы расшифровки, не используемые в ДО
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.РасшифровкаДанных
Процедура СкрытьТиповыеЭлементыФормыРасшифровки(Форма)
	
	#Если Не ВнешнееСоединение Тогда
	
	Форма.Элементы.Сертификат.Видимость = Ложь;
	
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область ФормаСертификата

// Создает реквизиты формы подписания данных
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ФормаЭлемента
Процедура СоздатьРеквизитыФормыСертификата(Форма)
	
	ОписанияРеквизитов = ОписанияРеквизитовФормыСертификата();
	СоздатьРеквизитыФормыПоОписанию(Форма, ОписанияРеквизитов);
	
КонецПроцедуры

// Возвращает описания добавляемых программно реквизитов формы подписания данных
// 
// Возвращаемое значение:
//  Массив из см. НовоеОписаниеРеквизитаФормы 
Функция ОписанияРеквизитовФормыСертификата()
	
	ИменаРеквизитов =
		ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыСертификата().ИменаРеквизитов;
	
	ОписаниеРеквизитов = Новый Массив(); // Массив из см. НовоеОписаниеРеквизитаФормы
	
	Реквизит = НовоеОписаниеРеквизитаФормы();
	Реквизит.Имя = ИменаРеквизитов.ОбязательныйДляШифрованияНачальноеЗначение;
	Реквизит.Тип = Тип("Булево");
	ОписаниеРеквизитов.Добавить(Реквизит);
	
	Возврат ОписаниеРеквизитов;
	
КонецФункции

// Создает элементы формы сертификата
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ФормаЭлемента
Процедура СоздатьЭлементыФормыСертификата(Форма)
	
	#Если Не ВнешнееСоединение Тогда
	
	ИменаЭлементов = ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыСертификата().ИменаЭлементов;
	
	РаботаСФормами.ДобавитьПолеФлажка(Форма, ИменаЭлементов.ОбязательныйДляШифрования,
		Форма.Элементы.ГоризонтальнаяГруппа1, "Объект.ОбязательныйДляШифрования")
	
	#КонецЕсли
	
КонецПроцедуры

// Устанавливает начальное значение Обязательный для шифрования на форме сертификата
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ФормаЭлемента
Процедура УстановитьНачальноеЗначениеОбязательныйДляШифрования(Форма)
	
	#Если Не ВнешнееСоединение Тогда
	
	ИменаРеквизитов = ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыСертификата().ИменаРеквизитов;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			Форма, ИменаРеквизитов.ОбязательныйДляШифрованияНачальноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Форма[ИменаРеквизитов.ОбязательныйДляШифрованияНачальноеЗначение] = Форма.Объект.ОбязательныйДляШифрования;
	
	#КонецЕсли
	
КонецПроцедуры

// Устанавливает видимость элемента Обязательный для шифрования
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ФормаЭлемента
Процедура УстановитьВидимостьЭлементаСертификата(Форма)
	
	#Если Не ВнешнееСоединение Тогда
	
	ИменаЭлементов = ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыСертификата().ИменаЭлементов;
	
	Элемент = Форма.Элементы[ИменаЭлементов.ОбязательныйДляШифрования]; // ПолеФормы
	Элемент.Видимость = Пользователи.ЭтоПолноправныйПользователь();
	
	#КонецЕсли
	
КонецПроцедуры

// Записывает изменение сертификата в протокол работы пользователей
// 
// Параметры:
//  Форма - см. Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.Форма.ФормаЭлемента
Процедура ЗаписатьИзменениеСертификатаВПротоколРаботы(Форма)
	
	#Если Не ВнешнееСоединение Тогда
	
	ИменаРеквизитов = ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыСертификата().ИменаРеквизитов;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			Форма, ИменаРеквизитов.ОбязательныйДляШифрованияНачальноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ОбязательныйДляШифрованияНачальноеЗначение =
		Форма[ИменаРеквизитов.ОбязательныйДляШифрованияНачальноеЗначение]; // Булево
	
	Если ОбязательныйДляШифрованияНачальноеЗначение <> Форма.Объект.ОбязательныйДляШифрования Тогда
		ПротоколированиеРаботыСотрудников.ЗаписатьСменуСвойстваСертификатаОбязательныйДляШифрования(
			Форма.Объект.Ссылка);
	КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область ФормаСертификатовИПрограмм

// Создает реквизиты формы сертификатов и программ ЭП и шифрования
// 
// Параметры:
//  Форма - см. ОбщаяФорма.НастройкиЭлектроннойПодписиИШифрования
Процедура СоздатьРеквизитыФормыСертификатовИПрограмм(Форма)
	
	ОписанияРеквизитов = ОписанияРеквизитовФормыСертификатовИПрограмм();
	СоздатьРеквизитыФормыПоОписанию(Форма, ОписанияРеквизитов);
	
КонецПроцедуры

// Возвращает описания добавляемых программно реквизитов формы сертификаторв и программ ЭП и шифрования
// 
// Возвращаемое значение:
//  Массив из см. НовоеОписаниеРеквизитаФормы 
Функция ОписанияРеквизитовФормыСертификатовИПрограмм()
	
	ИменаРеквизитов =
		ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыСертификатовИПрограмм().ИменаРеквизитов;
	
	ОписаниеРеквизитов = Новый Массив(); // Массив из см. НовоеОписаниеРеквизитаФормы
	
	Реквизит = НовоеОписаниеРеквизитаФормы();
	Реквизит.Имя = ИменаРеквизитов.КолонкаСертификатДляШифрования;
	Реквизит.Тип = Тип("Строка");
	Реквизит.Путь = "Программы";
	ОписаниеРеквизитов.Добавить(Реквизит);
	
	Реквизит = НовоеОписаниеРеквизитаФормы();
	Реквизит.Имя = ИменаРеквизитов.КолонкаСертификатДляШифрованияОтсутствует;
	Реквизит.Тип = Тип("Булево");
	Реквизит.Путь = "Программы";
	ОписаниеРеквизитов.Добавить(Реквизит);
	
	Реквизит = НовоеОписаниеРеквизитаФормы();
	Реквизит.Имя = ИменаРеквизитов.ДействияПриСохраненииСЭП;
	Реквизит.Тип = Тип("ПеречислениеСсылка.ДействияПриСохраненииСЭП");
	ОписаниеРеквизитов.Добавить(Реквизит);
	
	Реквизит = НовоеОписаниеРеквизитаФормы();
	Реквизит.Имя = ИменаРеквизитов.ДействияПриОтправкеПоПочтеСЭП;
	Реквизит.Тип = Тип("ПеречислениеСсылка.ДействияПриОтправкеПоПочтеЭП");
	ОписаниеРеквизитов.Добавить(Реквизит);
	
	Реквизит = НовоеОписаниеРеквизитаФормы();
	Реквизит.Имя = ИменаРеквизитов.СохранятьДоверенностиВместеСПодписью;
	Реквизит.Тип = Тип("Булево");
	ОписаниеРеквизитов.Добавить(Реквизит);
	
	Возврат ОписаниеРеквизитов;
	
КонецФункции

// Создает элементы формы сертификатов и программ
// 
// Параметры:
//  Форма - см. ОбщаяФорма.НастройкиЭлектроннойПодписиИШифрования
Процедура СоздатьЭлементыФормыСертификатовИПрограмм(Форма)
	
	#Если Не ВнешнееСоединение Тогда
	
	Элементы = Форма.Элементы;
	
	ИменаЭлементов =
		ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыСертификатовИПрограмм().ИменаЭлементов;
	ИменаРеквизитов =
		ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыСертификатовИПрограмм().ИменаРеквизитов;
	
	КолонкаСертификатПрограммы = РаботаСФормами.ДобавитьПолеВвода(
		Форма, ИменаЭлементов.КолонкаСертификатДляШифрования, Элементы.Программы, 
		СтрШаблон("Программы.%1",
			ИменаРеквизитов.КолонкаСертификатДляШифрования));
	КолонкаСертификатПрограммы.ТолькоПросмотр = Истина;
	КолонкаСертификатПрограммы.Заголовок = НСтр("ru = 'Сертификат для шифрования'");
	КолонкаСертификатПрограммы.Видимость = Форма.ЭтоПолноправныйПользователь;
	
	ДействияПриСохраненииСЭП = РаботаСФормами.ДобавитьПолеВвода(
		Форма, ИменаЭлементов.ДействияПриСохраненииДанныхСЭП, Элементы.СтраницаНастройки,
		ИменаРеквизитов.ДействияПриСохраненииСЭП);
	ДействияПриСохраненииСЭП.Заголовок = НСтр("ru = 'При сохранении данных в файл вместе с ЭП'");
	ДействияПриСохраненииСЭП.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииДО");
	
	Элементы.Переместить(ДействияПриСохраненииСЭП, Элементы.СтраницаНастройки,
		Элементы.СохранятьСертификатВместеСПодписью);
	
	ДействияПриОтправкеПоПочтеСЭП = РаботаСФормами.ДобавитьПолеВвода(
		Форма, ИменаЭлементов.ДействияПриОтправкеПоПочтеСЭП, Элементы.СтраницаНастройки,
		ИменаРеквизитов.ДействияПриОтправкеПоПочтеСЭП);
	ДействияПриОтправкеПоПочтеСЭП.Заголовок = НСтр("ru = 'При отправке по почте с ЭП'");
	ДействияПриОтправкеПоПочтеСЭП.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииДО");
	ДействияПриОтправкеПоПочтеСЭП.Видимость = Ложь;
	
	Элементы.Переместить(ДействияПриОтправкеПоПочтеСЭП, Элементы.СтраницаНастройки,
		Элементы.СохранятьСертификатВместеСПодписью);
	
	СохранятьДоверенностиВместеСПодписью = РаботаСФормами.ДобавитьПолеФлажка(
		Форма, ИменаЭлементов.СохранятьДоверенностиВместеСПодписью, Элементы.СтраницаНастройки,
		ИменаРеквизитов.СохранятьДоверенностиВместеСПодписью);
	СохранятьДоверенностиВместеСПодписью.Заголовок = НСтр("ru = 'Сохранять доверенности вместе с подписью'");
	СохранятьДоверенностиВместеСПодписью.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	СохранятьДоверенностиВместеСПодписью.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииДО");
	
	#КонецЕсли
	
КонецПроцедуры

// Скрывает, перемещает, изменяет типовые элементы формы сертификатов и программ ЭП и шифрования
// 
// Параметры:
//  Форма - см. ОбщаяФорма.НастройкиЭлектроннойПодписиИШифрования
Процедура ИзменитьТиповыеЭлементыФормыСертификатовИПрограмм(Форма)
	
	#Если Не ВнешнееСоединение Тогда
	
	Элементы = Форма.Элементы;
	
	Элементы.ДействияПриСохраненииДанныхСЭлектроннойПодписью.Видимость = Ложь;
	
	#КонецЕсли
	
КонецПроцедуры

// Заполняет реквизиты формы по персональным настройкам ЭП и шифрования
// 
// Параметры:
//  Форма - см. ОбщаяФорма.НастройкиЭлектроннойПодписиИШифрования
Процедура ЗаполнитьРеквизитыФормыПоПерсональнымНастройкам(Форма)
	
	ИменаРеквизитов =
		ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыСертификатовИПрограмм().ИменаРеквизитов;
	
	РеквизитыСозданы =
		ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИменаРеквизитов.ДействияПриСохраненииСЭП);
	Если Не РеквизитыСозданы Тогда
		Возврат;
	КонецЕсли;
	
	ПерсональныеНастройки = ЭлектроннаяПодпись.ПерсональныеНастройки();
	
	Форма[ИменаРеквизитов.ДействияПриСохраненииСЭП] = ПерсональныеНастройки.ДействияПриСохраненииСЭП;
	Форма[ИменаРеквизитов.ДействияПриОтправкеПоПочтеСЭП] = ПерсональныеНастройки.ДействияПриОтправкеПоПочтеСЭП;
	Форма[ИменаРеквизитов.СохранятьДоверенностиВместеСПодписью] = ПерсональныеНастройки.СохранятьДоверенность;
	
КонецПроцедуры

// Заполняет сертификат шифрования в списке программ в форме сертификатов и программ ЭП и шифрования
// 
// Параметры:
//  Форма - см. ОбщаяФорма.НастройкиЭлектроннойПодписиИШифрования
Процедура ЗаполнитьСертификатШифрованияВТаблицеПрограмм(Форма)
	
	#Если Не ВнешнееСоединение Тогда
	
	ИменаРеквизитов =
		ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыСертификатовИПрограмм().ИменаРеквизитов;
	
	РеквизитыСозданы =
		ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИменаРеквизитов.ДействияПриСохраненииСЭП);
	Если Не РеквизитыСозданы Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСертификатов = ТаблицаСертификатовОбязательныхДляШифрования();
	
	Для Каждого СтрокаПрограммы Из Форма.Программы Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаПрограммы.Ссылка) Тогда
			
			СтрокаПрограммы[ИменаРеквизитов.КолонкаСертификатДляШифрования] = "";
			СтрокаПрограммы[ИменаРеквизитов.КолонкаСертификатДляШифрованияОтсутствует] = Ложь;
			
		Иначе
			
			СтрокаСертификатДляШифрования = "";
			Для Каждого СтрокаСертификата Из ТаблицаСертификатов Цикл
				Если СтрокаСертификата.Программа <> СтрокаПрограммы.Ссылка Тогда
					Продолжить;
				КонецЕсли;
				Если СтрокаСертификатДляШифрования = "" Тогда
					СтрокаСертификатДляШифрования = СтрокаСертификата.Наименование;
				Иначе
					СтрокаСертификатДляШифрования = СтрокаСертификатДляШифрования + Символы.ПС + СтрокаСертификата.Наименование;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если СтрокаСертификатДляШифрования = "" Тогда
			СтрокаПрограммы[ИменаРеквизитов.КолонкаСертификатДляШифрования] =
				НСтр("ru = 'Отсутствует. Кликните, чтобы добавить.'");
			СтрокаПрограммы[ИменаРеквизитов.КолонкаСертификатДляШифрованияОтсутствует] = Истина;
		Иначе
			СтрокаПрограммы[ИменаРеквизитов.КолонкаСертификатДляШифрования] =
				СтрокаСертификатДляШифрования;
			СтрокаПрограммы[ИменаРеквизитов.КолонкаСертификатДляШифрованияОтсутствует] = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	#КонецЕсли
	
КонецПроцедуры

// Возвращает таблицу сертификатов, обязательных для шифрования
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//    * Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//    * Наименование - Строка
//    * Программа - ОпределяемыйТип.ПрограммаЭлектроннойПодписи
//
Функция ТаблицаСертификатовОбязательныхДляШифрования()
	
	ЗапросСертификатов = Новый Запрос;
	ЗапросСертификатов.Текст =
		"ВЫБРАТЬ
		|	Сертификаты.Ссылка КАК Сертификат,
		|	Сертификаты.Наименование КАК Наименование,
		|	Сертификаты.Программа КАК Программа
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|ГДЕ
		|	Сертификаты.ОбязательныйДляШифрования = ИСТИНА
		|	И Сертификаты.Отозван = ЛОЖЬ
		|	И Сертификаты.ПометкаУдаления = ЛОЖЬ";
	Возврат ЗапросСертификатов.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область ФормаСохраненияВместеСЭП

// Создает реквизиты формы сохранения файла вместе с ЭП
// 
// Параметры:
//  Форма - см. ОбщаяФорма.СохранениеВместеСЭлектроннойПодписью
Процедура СоздатьРеквизитыФормыСохраненияСЭП(Форма)
	
	ОписанияРеквизитов = ОписанияРеквизитовФормыСохраненияСЭП();
	СоздатьРеквизитыФормыПоОписанию(Форма, ОписанияРеквизитов);
	
КонецПроцедуры

// Возвращает описания добавляемых программно реквизитов формы сохранения файла вместе с ЭП
// 
// Возвращаемое значение:
//  Массив из см. НовоеОписаниеРеквизитаФормы 
Функция ОписанияРеквизитовФормыСохраненияСЭП()
	
	ИменаРеквизитов =
		ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыСохраненияВместеСЭП().ИменаРеквизитов;
	
	ОписаниеРеквизитов = Новый Массив(); // Массив из см. НовоеОписаниеРеквизитаФормы
	
	Реквизит = НовоеОписаниеРеквизитаФормы();
	Реквизит.Имя = ИменаРеквизитов.КолонкаДоверенностьСсылка;
	Реквизит.Тип = Новый ОписаниеТипов("");
	Реквизит.Путь = "ТаблицаПодписей";
	ОписаниеРеквизитов.Добавить(Реквизит);
	
	Реквизит = НовоеОписаниеРеквизитаФормы();
	Реквизит.Имя = ИменаРеквизитов.КолонкаДоверенностьПредставление;
	Реквизит.Тип = Тип("Строка");
	Реквизит.Путь = "ТаблицаПодписей";
	ОписаниеРеквизитов.Добавить(Реквизит);
	
	Реквизит = НовоеОписаниеРеквизитаФормы();
	Реквизит.Имя = ИменаРеквизитов.КолонкаАдресДанныхВыгрузкиДоверенности;
	Реквизит.Тип = Тип("Строка");
	Реквизит.Путь = "ТаблицаПодписей";
	ОписаниеРеквизитов.Добавить(Реквизит);
	
	Реквизит = НовоеОписаниеРеквизитаФормы();
	Реквизит.Имя = ИменаРеквизитов.СохранятьДоверенность;
	Реквизит.Тип = Тип("Булево");
	ОписаниеРеквизитов.Добавить(Реквизит);
	
	Реквизит = НовоеОписаниеРеквизитаФормы();
	Реквизит.Имя = ИменаРеквизитов.СохранятьДоверенностьНачальноеЗначение;
	Реквизит.Тип = Тип("Булево");
	ОписаниеРеквизитов.Добавить(Реквизит);
	
	Возврат ОписаниеРеквизитов;
	
КонецФункции

// Создает элементы формы сохранения файла вместе с ЭП
// 
// Параметры:
//  Форма - см. ОбщаяФорма.СохранениеВместеСЭлектроннойПодписью
Процедура СоздатьЭлементыФормыСохраненияСЭП(Форма)
	
	#Если Не ВнешнееСоединение Тогда
	
	Элементы = Форма.Элементы;
	
	ИменаЭлементов =
		ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыСохраненияВместеСЭП().ИменаЭлементов;
	ИменаРеквизитов =
		ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыСохраненияВместеСЭП().ИменаРеквизитов;
	
	КолонкаДоверенностьПредставление = РаботаСФормами.ДобавитьПолеВвода(
		Форма, ИменаЭлементов.КолонкаДоверенностьПредставление, Элементы.ТаблицаПодписей, 
		СтрШаблон("ТаблицаПодписей.%1",
			ИменаРеквизитов.КолонкаДоверенностьПредставление));
	КолонкаДоверенностьПредставление.ТолькоПросмотр = Истина;
	КолонкаДоверенностьПредставление.Заголовок = НСтр("ru = 'Доверенность'");
	
	Элементы.Переместить(КолонкаДоверенностьПредставление, Элементы.ТаблицаПодписей,
		Элементы.ТаблицаПодписейДатаПодписи);
	
	СохранятьДоверенность = РаботаСФормами.ДобавитьПолеФлажка(
		Форма, ИменаЭлементов.СохранятьДоверенность, Форма,
		ИменаРеквизитов.СохранятьДоверенность);
	СохранятьДоверенность.Заголовок = НСтр("ru = 'Сохранять доверенность'");
	СохранятьДоверенность.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	
	Элементы.Переместить(СохранятьДоверенность, Форма, Элементы.БольшеНеСпрашивать);
	
	#КонецЕсли
	
КонецПроцедуры

// Заполняет данные МЧД в форме сохранения с ЭП
// 
// Параметры:
//  Форма - см. ОбщаяФорма.СохранениеВместеСЭлектроннойПодписью
Процедура ЗаполнитьДанныеДоверенностейВФормеСохраненияСЭП(Форма)
	
	#Если Не ВнешнееСоединение Тогда
	
	ИменаРеквизитов = ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыСохраненияВместеСЭП().ИменаРеквизитов;
	
	КоллекцияПодписей = Новый Массив(); // Массив из см. ЭлектроннаяПодписьКлиентСервер.НовыеСвойстваПодписи
	Если ТипЗнч(Форма.Параметры.Объект) = Тип("Строка") Тогда
		ПодписиПоАдресу = ПолучитьИзВременногоХранилища(Форма.Параметры.Объект); // Массив из см. ЭлектроннаяПодписьКлиентСервер.НовыеСвойстваПодписи
		КоллекцияПодписей = ПодписиПоАдресу;
	Иначе
		//@skip-check invocation-parameter-type-intersect
		КоллекцияПодписей = ЭлектроннаяПодпись.УстановленныеПодписи(Форма.Параметры.Объект);
	КонецЕсли;
	
	ДанныеДоверенностей = ДоверенностиКоллекцииПодписей(Форма, КоллекцияПодписей);
	
	Для Каждого Строка Из Форма.ТаблицаПодписей Цикл
		
		Подпись = ПолучитьИзВременногоХранилища(Строка.АдресПодписи);
		ХешПодписи = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(Подпись);
		
		ДанныеДоверенности = ДанныеДоверенностей[ХешПодписи];
		Если Не ЗначениеЗаполнено(ДанныеДоверенности) Тогда
			Продолжить;
		КонецЕсли;
		
		Строка[ИменаРеквизитов.КолонкаАдресДанныхВыгрузкиДоверенности] =
			ДанныеДоверенности.АдресДанныхВыгрузкиДоверенности;
		Строка[ИменаРеквизитов.КолонкаДоверенностьПредставление] = ДанныеДоверенности.ДоверенностьПредставление;
		Строка[ИменаРеквизитов.КолонкаДоверенностьСсылка] = ДанныеДоверенности.ДоверенностьСсылка;
		
	КонецЦикла;
	
	#КонецЕсли
	
КонецПроцедуры

// Возвращает данные доверенностей коллекции подписей
// 
// Параметры:
//  Форма - см. ОбщаяФорма.СохранениеВместеСЭлектроннойПодписью
//  КоллекцияПодписей - Массив из см. ЭлектроннаяПодписьКлиентСервер.НовыеСвойстваПодписи
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Хеш-сумма двоичных данных подписи
//    * Значение - Структура:
//      ** ДоверенностьСсылка - ОпределяемыйТип.МашиночитаемаяДоверенность
//      ** ДоверенностьПредставление - Строка
//      ** АдресДанныхВыгрузкиДоверенности - Строка
//
Функция ДоверенностиКоллекцииПодписей(Форма, КоллекцияПодписей)
	
	ДанныеДоверенностейКоллекции = Новый Соответствие;
	
	#Если Не ВнешнееСоединение Тогда
	
	ИдентификаторыПодписей = Новый Массив; // Массив Из УникальныйИдентификатор
	Для Каждого СвойстваПодписи Из КоллекцияПодписей Цикл
		ИдентификаторыПодписей.Добавить(СвойстваПодписи.ИдентификаторПодписи);
	КонецЦикла;
	
	ДанныеДоверенностей = РаботаСЭП.ДанныеДоверенностейПодписей(ИдентификаторыПодписей);
	
	Доверенности = Новый Массив; // Массив Из ОпределяемыйТип.МашиночитаемаяДоверенность
	Для Каждого Элемент Из ДанныеДоверенностей Цикл
		ДанныеДоверенности = Элемент.Значение;
		//@skip-check invocation-parameter-type-intersect
		Доверенности.Добавить(ДанныеДоверенности.Доверенность);
	КонецЦикла;
	
	Доверенности = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Доверенности);
	
	ДанныеДляВыгрузки = РаботаСЭП.ДанныеДоверенностейДляВыгрузки(Доверенности, Форма.УникальныйИдентификатор);
	
	Для Каждого СвойстваПодписи Из КоллекцияПодписей Цикл
		
		ИдентификаторПодписи = СвойстваПодписи.ИдентификаторПодписи;
		КлючПодписи = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(СвойстваПодписи.Подпись);
		
		ДанныеДоверенностиКоллекции = Новый Структура;
		ДанныеДоверенностиКоллекции.Вставить("ДоверенностьСсылка", Неопределено);
		ДанныеДоверенностиКоллекции.Вставить("ДоверенностьПредставление", "");
		ДанныеДоверенностиКоллекции.Вставить("АдресДанныхВыгрузкиДоверенности", "");
		
		ДанныеДоверенности = ДанныеДоверенностей[ИдентификаторПодписи];
		Если ДанныеДоверенности <> Неопределено Тогда
			
			Доверенность = ДанныеДоверенности.Доверенность;
			
			ДанныеДоверенностиКоллекции.ДоверенностьСсылка = Доверенность;
			ДанныеДоверенностиКоллекции.ДоверенностьПредставление = Строка(Доверенность);
			
			ДанныеВыгрузки = ДанныеДляВыгрузки[Доверенность];
			ДанныеДоверенностиКоллекции.АдресДанныхВыгрузкиДоверенности = ПоместитьВоВременноеХранилище(
				ДанныеВыгрузки, Форма.УникальныйИдентификатор);
			
		КонецЕсли;
		
		ДанныеДоверенностейКоллекции[КлючПодписи] = ДанныеДоверенностиКоллекции;
		
	КонецЦикла;
	
	#КонецЕсли
	
	Возврат ДанныеДоверенностейКоллекции;
	
КонецФункции

// Заполняет параметры формы по персональным настройкам при сохранении с ЭП
// 
// Параметры:
//  Форма - см. ОбщаяФорма.СохранениеВместеСЭлектроннойПодписью
Процедура УстановитьПараметрыПоПерсональнымНастройкамПриСохраненииСЭП(Форма)
	
	ИменаРеквизитов = ЭлектроннаяПодписьДокументооборотКлиентСервер.ПараметрыФормыСохраненияВместеСЭП().ИменаРеквизитов;
	
	ПерсональныеНастройки = ЭлектроннаяПодпись.ПерсональныеНастройки();
	Форма[ИменаРеквизитов.СохранятьДоверенность] = ПерсональныеНастройки.СохранятьДоверенность;
	Форма[ИменаРеквизитов.СохранятьДоверенностьНачальноеЗначение] = ПерсональныеНастройки.СохранятьДоверенность;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
