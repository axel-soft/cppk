////////////////////////////////////////////////////////////////////////////////
// Работа с процессами по обработкам объектов (клиент, сервер):
// содержит процедуры и функции для работы с процессами по обработкам объектов.
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область СхемыДляОбработокОбъектов

// Возвращает пустые значения параметров для типов элементов схем.
// 
// Возвращаемое значение:
// 	Соответствие
//   * Ключ - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
//   * Значение - СправочникСсылка.ВидыДействий.ПустаяСсылка,
//                СправочникСсылка.Алгоритмы.ПустаяСсылка,
//                НастройкиКомпоновкиДанных
//
Функция ПустыеЗначенияПараметровДляТиповЭлементовСхем() Экспорт
	
	 ПустыеЗначенияПараметров = Новый Соответствие();
	 
	 ПустыеЗначенияПараметров[
	 	ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Действие")] = 
	 	ПредопределенноеЗначение("Справочник.ВидыДействий.ПустаяСсылка");
	 
	 ПустыеЗначенияПараметров[
	 	ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Скрипт")] = 
	 	ПредопределенноеЗначение("Справочник.СкриптыСхемДляОбработокОбъектов.ПустаяСсылка");
	 
#Если Клиент Тогда
	
	ПустыеЗначенияПараметров[
	 	ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Условие")] =
	 	РаботаСПроцессамиПоОбработкамОбъектовКлиентПовтИсп.ПустоеУсловиеСхемыОбработкиОбъекта();
	
#Иначе
	
	ПустыеЗначенияПараметров[
	 	ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Условие")] =
	 	РаботаСПроцессамиПоОбработкамОбъектов.ПустоеУсловиеСхемыОбработкиОбъекта();
		
#КонецЕсли
	  
	 Возврат ПустыеЗначенияПараметров;
	
КонецФункции

// Возвращает поддерживаемые типы элементов схемы.
// 
// Возвращаемое значение:
//  Соответствие
//   * Ключ - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
//   * Значение - Булево - всегда Истина.
//
Функция ПоддерживаемыеТипыЭлементовСхемы() Экспорт
	
	ПоддерживаемыеТипы = Новый Соответствие();
		
	ПоддерживаемыеТипы.Вставить(
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Действие"),
		Истина);
	
	ПоддерживаемыеТипы.Вставить(
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.ДекоративнаяЛиния"),
		Истина);
	
	ПоддерживаемыеТипы.Вставить(
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Декорация"),
		Истина);
	
	ПоддерживаемыеТипы.Вставить(
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Завершение"),
		Истина);
	
	ПоддерживаемыеТипы.Вставить(
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Разделение"),
		Истина);
	
	ПоддерживаемыеТипы.Вставить(
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Скрипт"),
		Истина);
	
	ПоддерживаемыеТипы.Вставить(
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Слияние"),
		Истина);
	
	ПоддерживаемыеТипы.Вставить(
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Старт"),
		Истина);
	
	ПоддерживаемыеТипы.Вставить(
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовСхемПроцессов.Условие"),
		Истина);
	
	Возврат ПоддерживаемыеТипы;	 
	
КонецФункции

#Область УсловияСхемы

// Возвращает имя поля условия "УсловиеПоОбъекту" для схемы обработки объекта.  
// 
// Возвращаемое значение:
// 	Строка
//
Функция ИмяПоляУсловиеПоОбъекту() Экспорт
	
	Возврат "УсловиеПоОбъекту";
	
КонецФункции

// Возвращает имя поля условия "УсловиеПоРезультатуВыполненияДействия" для схемы обработки объекта.  
// 
// Возвращаемое значение:
// 	Строка
//
Функция ИмяПоляУсловиеПоРезультатуВыполненияДействия() Экспорт
	
	Возврат "УсловиеПоРезультатуВыполненияДействия";
	
КонецФункции

// Возвращает имя поля условия "ПолеДляПроверки" для схемы обработки объекта.  
// 
// Возвращаемое значение:
// 	Строка
//
Функция ИмяПоляДляПроверкиУсловияСхемы() Экспорт
	
	Возврат "ПолеДляПроверки";
	
КонецФункции

// Возвращает структуру условия по результату выполнения действия.
// 
// Возвращаемое значение:
// 	Структура
// * ВидДействия - Строка
// * РезультатыВыполнения - ОпределяемыйТип.РезультатыВыполненияДействий
//
Функция СтруктураУсловияПоРезультатуВыполненияДействия() Экспорт
	
	СтруктураУсловия = Новый Структура;
	
	СтруктураУсловия.Вставить("ИмяДействия", "");
	СтруктураУсловия.Вставить("РезультатВыполнения", Неопределено);
	
	Возврат СтруктураУсловия;
		
КонецФункции

// Возвращает результаты выполннения для переданного типа действия.
// 
// Параметры:
// 	ТипДействия - ПеречислениеСсылка.ТипыДействий
// 	
// Возвращаемое значение:
// 	СписокЗначений
// 	 * Значение - ОпределяемыйТип.РезультатыВыполненияДействий
// 	 * Представление - представление результата.
// 
Функция РезультатыВыполненияДляТипаДействия(ТипДействия) Экспорт
	
	РезультатыВыполнения = Новый СписокЗначений();
	
	ПредставлениеРезультатаПоУмолчанию = НСтр("ru = 'Завершено'");
	
	Если ТипДействия = ПредопределенноеЗначение("Перечисление.ТипыДействий.Исполнение") Тогда
		 РезультатыВыполнения.Добавить(
		 	ПредопределенноеЗначение("Перечисление.РезультатыИсполнения.Исполнено"),
		 	ПредставлениеРезультатаПоУмолчанию);
	ИначеЕсли ТипДействия = ПредопределенноеЗначение("Перечисление.ТипыДействий.Ознакомление") Тогда
		РезультатыВыполнения.Добавить(
		 	ПредопределенноеЗначение("Перечисление.РезультатыОзнакомления.Ознакомлен"),
		 	ПредставлениеРезультатаПоУмолчанию);
	ИначеЕсли ТипДействия = ПредопределенноеЗначение("Перечисление.ТипыДействий.Подписание") Тогда
		РезультатыВыполнения.Добавить(
		 	ПредопределенноеЗначение("Перечисление.РезультатыПодписания.Подписано"),
		 	НСтр("ru = 'Подписано'"));
		РезультатыВыполнения.Добавить(
		 	ПредопределенноеЗначение("Перечисление.РезультатыПодписания.НеПодписано"),
		 	НСтр("ru = 'Не подписано'"));
	ИначеЕсли ТипДействия = ПредопределенноеЗначение("Перечисление.ТипыДействий.Регистрация") Тогда
		РезультатыВыполнения.Добавить(
		 	ПредопределенноеЗначение("Перечисление.РезультатыРегистрации.Зарегистрировано"),
		 	НСтр("ru = 'Зарегистрировано'"));
		РезультатыВыполнения.Добавить(
		 	ПредопределенноеЗначение("Перечисление.РезультатыРегистрации.НеЗарегистрировано"),
		 	НСтр("ru = 'Не зарегистрировано'"));
	ИначеЕсли ТипДействия = ПредопределенноеЗначение("Перечисление.ТипыДействий.Согласование") Тогда
		РезультатыВыполнения.Добавить(
		 	ПредопределенноеЗначение("Перечисление.РезультатыСогласования.Согласовано"),
		 	НСтр("ru = 'Согласовано'"));
		Если ДействияСерверПовтИсп.ИспользоватьСогласованиеСЗамечаниями() Тогда
			РезультатыВыполнения.Добавить(
				ПредопределенноеЗначение("Перечисление.РезультатыСогласования.СогласованоСЗамечаниями"),
				НСтр("ru = 'Согласовано с замечаниями'"));
		КонецЕсли;
		РезультатыВыполнения.Добавить(
		 	ПредопределенноеЗначение("Перечисление.РезультатыСогласования.НеСогласовано"),
		 	НСтр("ru = 'Не согласовано'"));
	ИначеЕсли ТипДействия = ПредопределенноеЗначение("Перечисление.ТипыДействий.Утверждение") Тогда
		РезультатыВыполнения.Добавить(
		 	ПредопределенноеЗначение("Перечисление.РезультатыУтверждения.Утверждено"),
		 	НСтр("ru = 'Утверждено'"));
		РезультатыВыполнения.Добавить(
		 	ПредопределенноеЗначение("Перечисление.РезультатыУтверждения.НеУтверждено"),
		 	НСтр("ru = 'Не утверждено'"));
	КонецЕсли;
	
	Возврат РезультатыВыполнения;
	
КонецФункции

// Нормализует элементы отбора настроек условий.
// 
// Рекурсивная процедура.
// 
// Параметры:
// 	ЭлементыОтбора - КоллекцияЭлементовОтбораКомпоновкиДанных - элементы отбора условия.
// 	ПредшествующиеДействия - Массив
// 	 * Строка
// 	НастройкиДействийСхемы - Соответствие
// 	 * Ключ - Строка - Имя элемента действия в схеме.
// 	 * Значение - СправочникСсылка.ВидыДействий - настройка элемента действия. 
// 	ТипыДействий
// 	 * Ключ - СправочникСсылка.ВидыДействий
// 	 * Значение - ПеречислениеСсылка.ТипыДействий 
//
Процедура НормализоватьЭлементыОтбораНастройкиУсловия(
	ЭлементыОтбора, ПредшествующиеДействия, НастройкиДействийСхемы, ТипыДействий) Экспорт
	
	ТипЭлементОтбораКомпоновкиДанных = Тип("ЭлементОтбораКомпоновкиДанных");
	ТипГруппаЭлементовОтбораКомпоновкиДанных = Тип("ГруппаЭлементовОтбораКомпоновкиДанных");
		
	ПолеУсловияПоРезультатуВыполненияДействия = Новый ПолеКомпоновкиДанных(
		ИмяПоляУсловиеПоРезультатуВыполненияДействия());
		
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		
		ТипЭлементаОтбора = ТипЗнч(ЭлементОтбора);
		
		Если ТипЭлементаОтбора = ТипЭлементОтбораКомпоновкиДанных Тогда
			
			Если ЭлементОтбора.ЛевоеЗначение <> ПолеУсловияПоРезультатуВыполненияДействия Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПредшествующиеДействия.Найти(
				ЭлементОтбора.ПравоеЗначение.ИмяДействия) = Неопределено Тогда
				
				ЭлементОтбора.ПравоеЗначение.ИмяДействия = "";
				ЭлементОтбора.ПравоеЗначение.РезультатВыполнения = Неопределено;
				ЭлементОтбора.Использование = Ложь;
				Продолжить
			КонецЕсли;			
			
			ВидДействия = НастройкиДействийСхемы[ЭлементОтбора.ПравоеЗначение.ИмяДействия];
			Если ВидДействия = Неопределено Тогда
				ЭлементОтбора.ПравоеЗначение.ИмяДействия = "";
				ЭлементОтбора.ПравоеЗначение.РезультатВыполнения = Неопределено;
				ЭлементОтбора.Использование = Ложь;
				Продолжить
			КонецЕсли;
			
			ВозможныеРезультаты = РезультатыВыполненияДляТипаДействия(ТипыДействий[ВидДействия]);
			
			Если ВозможныеРезультаты.НайтиПоЗначению(
				ЭлементОтбора.ПравоеЗначение.РезультатВыполнения) = Неопределено Тогда
				
				ЭлементОтбора.ПравоеЗначение.РезультатВыполнения = Неопределено;
				ЭлементОтбора.Использование = Ложь;
			КонецЕсли;
			
		ИначеЕсли ТипЭлементаОтбора = ТипГруппаЭлементовОтбораКомпоновкиДанных Тогда
			НормализоватьЭлементыОтбораНастройкиУсловия(
				ЭлементОтбора.Элементы, ПредшествующиеДействия, НастройкиДействийСхемы, ТипыДействий);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти