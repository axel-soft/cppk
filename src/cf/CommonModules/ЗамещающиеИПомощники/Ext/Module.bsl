////////////////////////////////////////////////////////////////////////////////
// Замещающие и помощники (сервер).
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обработчик регламентного задания.
// Актуализирует признак "Действует" в соответствии с указанными сроками.
//
Процедура ОбработкаСроковЗамещающихИПомощников() Экспорт
	
	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбработкаСроковЗамещающихИПомощников, Отказ);
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Выборка недействующих элементов с наступившим сроком и действующих с истекшим сроком.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗамещающиеИПомощники.Ссылка КАК Ссылка,
		|	ЗамещающиеИПомощники.ВерсияДанных КАК ВерсияДанных
		|ИЗ
		|	Справочник.ЗамещающиеИПомощники КАК ЗамещающиеИПомощники
		|ГДЕ
		|	НЕ ЗамещающиеИПомощники.ПометкаУдаления
		|	И (ЗамещающиеИПомощники.ДатаНачала < &ТекущаяДата
		|			И (ЗамещающиеИПомощники.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ КОНЕЦПЕРИОДА(ЗамещающиеИПомощники.ДатаОкончания, ДЕНЬ) > &ТекущаяДата)) <> ЗамещающиеИПомощники.Действует";
		
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Выборка = Запрос.Выполнить().Выбрать();
	
	Обработано = 0;
	Пока Выборка.Следующий() Цикл
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			Продолжить;
		КонецПопытки;
		ЗамещениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ЗамещениеОбъект.ВерсияДанных <> Выборка.ВерсияДанных Тогда
			РазблокироватьДанныеДляРедактирования(ЗамещениеОбъект.Ссылка);
			Продолжить;
		КонецЕсли;
		ЗамещениеОбъект.ДополнительныеСвойства.Вставить(
			"ЭтоАвтоматическаяАктуализацияВСоответствииСоСроками", Истина); 
		ЗамещениеОбъект.Записать();
		РазблокироватьДанныеДляРедактирования(ЗамещениеОбъект.Ссылка);
		Обработано = Обработано + 1;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает соответствие областей замещения и областей делегирования.
// Используется при создании делегирования на основании замещения.
//
// Возвращаемое значение:
//  Соответствие
//   * Ключ - СправочникСсылка.ОбластиЗамещения - область замещения.
//   * Значение - СправочникСсылка.УдалитьОбластиДелегированияПрав - область делегирования.
//
Функция ОбластиДелегированияПоОбластямЗамещения() Экспорт
	
	Результат = Новый Соответствие;
	
	ОблЗамещения = Справочники.ОбластиЗамещения;
	ОблДелегирования = Справочники.УдалитьОбластиДелегированияПрав;
	
	Результат[ОблЗамещения.Документы] = ОблДелегирования.Документы;
	Результат[ОблЗамещения.ДокументыПросмотрИРедактирование] = ОблДелегирования.Документы;
	Результат[ОблЗамещения.ЕжедневныеОтчеты] = ОблДелегирования.ЕжедневныеОтчеты;
	Результат[ОблЗамещения.Задачи] = ОблДелегирования.ПроцессыИЗадачи;
	Результат[ОблЗамещения.ЗадачиПросмотр] = ОблДелегирования.ПроцессыИЗадачи;
	Результат[ОблЗамещения.Календарь] = ОблДелегирования.Календарь;
	Результат[ОблЗамещения.Контроль] = ОблДелегирования.Контроль;
	Результат[ОблЗамещения.Мероприятия] = ОблДелегирования.Мероприятия;
	Результат[ОблЗамещения.Почта] = ОблДелегирования.Почта;
	Результат[ОблЗамещения.Проекты] = ОблДелегирования.Проекты;
	Результат[ОблЗамещения.Файлы] = ОблДелегирования.Файлы;
	Результат[ОблЗамещения.Форум] = ОблДелегирования.Обсуждения;
	
	Возврат Результат;
	
КонецФункции

// Возвращает соответствие областей делегирования и областей замещения.
// 
// Возвращаемое значение:
//  Соответствие
//   * Ключ - СправочникСсылка.УдалитьОбластиДелегированияПрав - область делегирования.
//   * Значение - СправочникСсылка.ОбластиЗамещения - область замещения.
//
Функция ОбластиЗамещенияПоОбластямДелегирования() Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ Ссылка
		|ИЗ Справочник.ОбластиЗамещения
		|ГДЕ Родитель <> ЗНАЧЕНИЕ(Справочник.ОбластиЗамещения.ПустаяСсылка)");
	ПодчиненныеОбласти = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
	ОбластиДелегированияПоОбластямЗамещения = ОбластиДелегированияПоОбластямЗамещения();
	Для Каждого КлючИЗначение Из ОбластиДелегированияПоОбластямЗамещения Цикл
		Если ПодчиненныеОбласти.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
			Результат[КлючИЗначение.Значение] = КлючИЗначение.Ключ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает типы приложений и типы владельцев файлов-приложений для задач,
// 	которые передаются не по своим областям замещения, а через область "Выполнение прочих задач".
//
// Возвращаемое значение:
//  Массив - массив типов.
//
Функция ТипыПредметовПрочихЗадач() Экспорт
	
	ВсеТипыПриложений = Метаданные.ОпределяемыеТипы.ПриложениеЗадач.Тип.Типы();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеТипыПриложений,
		Метаданные.Справочники.Файлы.Реквизиты.ВладелецФайла.Тип.Типы());
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТипЗначения(Состав.ОбъектМетаданных.ЗначениеПустойСсылки) КАК ТипОбъекта
		|ИЗ
		|	Справочник.ОбластиЗамещения.Состав КАК Состав");
	ТипыПриложенийДелегируемыхПоОбластям = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
	ТипыПрочихПриложений = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		ВсеТипыПриложений, ТипыПриложенийДелегируемыхПоОбластям);
	// Файлы, прикрепленные к задачам, тоже должны учитываться как "прочие".
	ТипыПрочихПриложений.Добавить(Тип("ДокументСсылка.Задача"));
	ТипыПрочихПриложений.Добавить(Тип("ДокументСсылка.ДействиеЗадачи"));
	
	Возврат ТипыПрочихПриложений;
	
КонецФункции

Функция ВидыЗадачПоТипамДействий() Экспорт
	
	Результат = Новый Соответствие;
	Результат.Вставить(Тип("СправочникСсылка.ДействияИсполнения"), Справочники.ВидыЗадач.Исполнение);
	Результат.Вставить(Тип("СправочникСсылка.ДействияОзнакомления"), Справочники.ВидыЗадач.Ознакомление);
	Результат.Вставить(Тип("СправочникСсылка.ДействияПодписания"), Справочники.ВидыЗадач.Подписание);
	Результат.Вставить(Тип("СправочникСсылка.ДействияРегистрации"), Справочники.ВидыЗадач.Регистрация);
	Результат.Вставить(Тип("СправочникСсылка.ДействияСогласования"), Справочники.ВидыЗадач.Согласование);
	Результат.Вставить(Тип("СправочникСсылка.ДействияУтверждения"), Справочники.ВидыЗадач.Утверждение);
	
	Возврат Результат;
	
КонецФункции

// Возвращает строковое представление периода замещения.
//
// Параметры:
//  ДатаНачала - Дата - дата начала замещения.
//  ДатаОкончания - Дата - дата окончания замещения.
//
// Возвращаемое значение:
//  Строка - строковое представление периода.
//
Функция ПериодЗамещенияСтрокой(ДатаНачала, ДатаОкончания) Экспорт
	
	ВключатьОписаниеГода = ЗначениеЗаполнено(ДатаОкончания)
		И НачалоГода(ДатаНачала) <> НачалоГода(ДатаОкончания);
	ОписаниеДатыНачала = ТекстовоеОписаниеДаты(ДатаНачала, ВключатьОписаниеГода);
	
	Если ДатаНачала = ДатаОкончания Тогда
		ОписаниеПериода = ОписаниеДатыНачала;
	ИначеЕсли ЗначениеЗаполнено(ДатаОкончания) Тогда
		ОписаниеДатыОкончания = ТекстовоеОписаниеДаты(ДатаОкончания, ВключатьОписаниеГода);
		ОписаниеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'с %1 по %2'"), ОписаниеДатыНачала, ОписаниеДатыОкончания);
	Иначе
		ОписаниеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'бессрочно с %1'"), ОписаниеДатыНачала, ОписаниеДатыОкончания);
	КонецЕсли;
	
	Возврат ОписаниеПериода;
	
КонецФункции

// Области замещения по идентификатору объекта метаданных.
// 
// Параметры:
//  ИдентификаторОбъектаМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных - Ссылка на идентификатор объекта метаданных
//		- ОбъектМетаданных - объект метаданных конфигурации
//		- Тип - тип, который можно использовать в функции Метаданные.НайтиПоТипу
//		- Строка - полное имя объекта метаданных, которое можно использовать в функции Метаданные.НайтиПоПолномуИмени
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.ОбластиЗамещения - Области замещения по идентификатору объекта метаданных
Функция ОбластиЗамещенияПоИдентификаторуОбъектаМетаданных(Знач ИдентификаторОбъектаМетаданных) Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Справочники.ОбластиЗамещения.ВсеОбласти);
	
	Если ИдентификаторОбъектаМетаданных = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(ИдентификаторОбъектаМетаданных) <> Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		ИдентификаторОбъектаМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
			ИдентификаторОбъектаМетаданных);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбластиЗамещенияСостав.Ссылка
	|ИЗ
	|	Справочник.ОбластиЗамещения.Состав КАК ОбластиЗамещенияСостав
	|ГДЕ
	|	ОбластиЗамещенияСостав.ОбъектМетаданных = &ОбъектМетаданных";
	Запрос.УстановитьПараметр("ОбъектМетаданных", ИдентификаторОбъектаМетаданных);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат,
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"), Истина);
	
	Возврат Результат;
	
КонецФункции

// Возвращает имена предопределенных областей делегирования,
// в состав которых входит переданный идентификатор объекта метаданных
// 
// Параметры:
//  ИдентификаторОМ - СправочникСсылка.ИдентификаторыОбъектовМетаданных - 
// 
// Возвращаемое значение:
//  Массив из Строка - массив имен предопределенных областей
Функция ИменаОбластейЗамещенияПоИдентификаторуОбъектаМетаданных(ИдентификаторОМ) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбластиЗамещения.ИмяПредопределенныхДанных
		|ИЗ
		|	Справочник.ОбластиЗамещения КАК ОбластиЗамещения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбластиЗамещения.Состав КАК ОбластиЗамещенияСостав
		|		ПО ОбластиЗамещения.Ссылка = ОбластиЗамещенияСостав.Ссылка
		|ГДЕ
		|	ОбластиЗамещенияСостав.ОбъектМетаданных = &ИдентификаторОМ");
	
	Запрос.УстановитьПараметр("ИдентификаторОМ", ИдентификаторОМ);
	ОбластиЗамещения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяПредопределенныхДанных");
	ОбластиЗамещения.Добавить("");
	
	Возврат ОбластиЗамещения;
	
КонецФункции

// Возвращает список делегатов для уведомления по подписчику на событие.
//
// Параметры:
//  Подписчик - СправочникСсылка.Пользователи - Исходный подписчик на уведомление.
//  Объект - Произвольный - Объект, делегирование по которому учитывается.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Сотрудники - Делегаты подписчика для уведомления.
//
Функция ДелегатыДляУведомления(Подписчик, Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗамещающиеИПомощники.Ссылка,
		|	ЗамещающиеИПомощники.Замещающий
		|ИЗ
		|	Справочник.ЗамещающиеИПомощники КАК ЗамещающиеИПомощники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗамещающиеИПомощники.ВопросыЗамещения КАК ЗамещающиеИПомощникиВопросыЗамещения
		|		ПО ЗамещающиеИПомощникиВопросыЗамещения.Ссылка = ЗамещающиеИПомощники.Ссылка
		|ГДЕ
		|	ЗамещающиеИПомощники.Сотрудник = &Подписчик
		|	И ЗамещающиеИПомощники.Действует
		|	И ЗамещающиеИПомощникиВопросыЗамещения.Область В (&ОбластиЗамещения)";
	
	Запрос.УстановитьПараметр("Подписчик", Подписчик);
	
	Если Объект = Неопределено Тогда
		ОбластиЗамещения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
			Справочники.ОбластиЗамещения.ВсеОбласти);
	Иначе
		ОбластиЗамещения = ОбластиЗамещенияПоИдентификаторуОбъектаМетаданных(ТипЗнч(Объект));
	КонецЕсли;
	Запрос.УстановитьПараметр("ОбластиЗамещения", ОбластиЗамещения);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Замещающий");
	
КонецФункции

// Записывает данные для доступа замещающих к действию задачи
// 
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//  КэшДанных - Структура,
//              Неопределено.
//
Процедура ЗаписатьДоступЗамещающихПоДействиюЗадачи(ДействиеЗадачи, КэшДанных = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если КэшДанных <> Неопределено
		И КэшДанных.Свойство("ДанныеДействияЗадачи")
		И КэшДанных.Свойство("ДанныеЗадачи")Тогда
		РеквизитыЗадачи = КэшДанных.ДанныеДействияЗадачи;
		РеквизитыЗадачиЗадачаИсточник = КэшДанных.ДанныеЗадачи.Источник
	Иначе
		РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДействиеЗадачи,
			"Ссылка, Исполнитель, Источник, Приложения, Задача, Задача.Источник");
		РеквизитыЗадачиЗадачаИсточник = РеквизитыЗадачи.ЗадачаИсточник;
		РеквизитыЗадачи.Удалить("ЗадачаИсточник");
	КонецЕсли;
	
	ПодходящиеЗамещения = ПодходящиеЗамещения(ДействиеЗадачи, Неопределено, КэшДанных);
	
	// Замещающие и помощники по действию.
	НаборВсеИсполнители = РегистрыСведений.ВсеИсполнителиДействийЗадач.СоздатьНаборЗаписей();
	НаборВсеИсполнители.Отбор.ДействиеЗадачи.Установить(ДействиеЗадачи);
	Если ЗначениеЗаполнено(РеквизитыЗадачи.Исполнитель) Тогда
		Стр = НаборВсеИсполнители.Добавить();
		Стр.ДействиеЗадачи = ДействиеЗадачи;
		Стр.Исполнитель = РеквизитыЗадачи.Исполнитель;
	КонецЕсли;
	
	Для Каждого СтрЗамещения Из ПодходящиеЗамещения Цикл
		Стр = НаборВсеИсполнители.Добавить();
		Стр.Основание = СтрЗамещения.Замещение;
		Стр.ДействиеЗадачи = ДействиеЗадачи;
		Стр.Исполнитель = СтрЗамещения.Замещающий;
	КонецЦикла;
	НаборВсеИсполнители.Записать();
	
	Если ПодходящиеЗамещения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// РС УчастникиПроцессов.
	Если ЗначениеЗаполнено(РеквизитыЗадачиЗадачаИсточник) 
		И ОбщегоНазначения.ЭтоБизнесПроцесс(РеквизитыЗадачиЗадачаИсточник.Метаданные()) Тогда
		Процесс = РеквизитыЗадачиЗадачаИсточник;
		
		НаборУчастникиПроцессов = РегистрыСведений.УчастникиПроцессов.СоздатьНаборЗаписей();
		НаборУчастникиПроцессов.Отбор.Процесс.Установить(Процесс);
		НаборУчастникиПроцессов.Прочитать();
		// Добавление записей по актуальным замещающим.
		ВсеВопросыЗамещения = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
			ПодходящиеЗамещения.ВыгрузитьКолонку("Замещение"), "ВопросыЗамещения");
		Для Каждого СтрЗамещения Из ПодходящиеЗамещения Цикл
			ВопросыЗамещения = ВсеВопросыЗамещения[СтрЗамещения.Замещение].Выгрузить();
			Если ВопросыЗамещения.Найти(Справочники.ОбластиЗамещения.ВсеОбласти) = Неопределено
				И ВопросыЗамещения.Найти(Справочники.ОбластиЗамещения.Задачи) = Неопределено
				И ВопросыЗамещения.Найти(Справочники.ОбластиЗамещения.ЗадачиПросмотр) = Неопределено
				И НаборУчастникиПроцессов.Выгрузить().Найти(СтрЗамещения.Замещающий) = Неопределено Тогда
				// Не переданы права на чтение всех задач, нужно добавить участника в регистр.
				СтрНабора = НаборУчастникиПроцессов.Добавить();
				СтрНабора.Процесс = Процесс;
				СтрНабора.Основание = СтрЗамещения.Замещение;
				СтрНабора.Участник = СтрЗамещения.Замещающий; 
			КонецЕсли;
		КонецЦикла;
		НаборУчастникиПроцессов.Записать();
	КонецЕсли;
	
	
	// Права замещающих и помощников на приложения.
	Если ЗначениеЗаполнено(РеквизитыЗадачиЗадачаИсточник) Тогда
		// Расширяем РГ предметов только для действий задач, не входящих в обработки предметов.
		// Для действий обработки РГ будет расширена действиями,
		// в методе РаботаСРабочимиГруппами.ОтметитьНачалоВыполненияДействия
		
		Действие = РегистрыСведений.ПроцессыДействий.ДействиеПоПроцессу(РеквизитыЗадачиЗадачаИсточник);
		Если ЗначениеЗаполнено(Действие) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗадачаПриложения.Приложение
		|ИЗ
		|	Документ.ДействиеЗадачи КАК ДействиеЗадачиДок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача.Приложения КАК ЗадачаПриложения
		|		ПО ДействиеЗадачиДок.Задача = ЗадачаПриложения.Ссылка
		|ГДЕ
		|	ДействиеЗадачиДок.Ссылка = &Действие
		|	И ТИПЗНАЧЕНИЯ(ЗадачаПриложения.Приложение) В (&ТипыПриложенийДляОбработки)");
	Запрос.УстановитьПараметр("Действие", ДействиеЗадачи);
	ТипыПриложенийДляОбработки = Метаданные.РегистрыСведений.РабочиеГруппы.Измерения.Объект.Тип.Типы();
	Запрос.УстановитьПараметр("ТипыПриложенийДляОбработки", ТипыПриложенийДляОбработки);
	ВсеПриложения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	Для Каждого СтрокаПриложения Из РеквизитыЗадачи.Приложения.Выгрузить() Цикл
		Если ТипыПриложенийДляОбработки.Найти(ТипЗнч(СтрокаПриложения.Приложение)) <>  Неопределено Тогда
			ВсеПриложения.Добавить(СтрокаПриложения.Приложение);
		КонецЕсли;
	КонецЦикла;
	Если ВсеПриложения.Количество() > 0 Тогда
		ПравоИзменения = Ложь;
		ПроцессИсточник = РаботаСЗадачами.ИсточникЗадачи(РеквизитыЗадачи.Задача);
		Если ЗначениеЗаполнено(ПроцессИсточник) Тогда
			ДействиеИсточника = РегистрыСведений.ПроцессыДействий.ДействиеПоПроцессу(ПроцессИсточник);
			Если ЗначениеЗаполнено(ДействиеИсточника) Тогда
				ПравоИзменения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					ДействиеИсточника, "ВидДействия.РазрешитьУчастникамИзменятьПредмет");
			КонецЕсли;
		КонецЕсли;
		ТаблицаУчастниковРГ = РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников();
		Для Каждого СтрЗамещения Из ПодходящиеЗамещения Цикл
			Стр = ТаблицаУчастниковРГ.Добавить();
			Стр.Участник = СтрЗамещения.Замещающий;
			Стр.Изменение = ПравоИзменения;
		КонецЦикла;
		ВсеПриложения = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВсеПриложения);
		Для Каждого Приложение Из ВсеПриложения Цикл
			ОбновлятьПрава = Не ПараметрыСеанса.ЗагрузкаОбработанныхДанныхИзДругойСистемы
				Или Приложение.ПолучитьОбъект() <> Неопределено;
			РаботаСРабочимиГруппами.ДобавитьУчастниковВРабочуюГруппуОбъекта(Приложение,
				ТаблицаУчастниковРГ, ОбновлятьПрава);
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает замещения, актуальные для текущего действия задачи.
//
// Параметры:
//   ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи - текущее действие задачи.
//                  - СтрокаТаблицыЗначений - см. ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗапросСОтборами
//   ВидЗамещения - ПеречислениеСсылка.ВидыЗамещения, Неопределено - дополнительная фильтрация по виду замещения.
//     (при необходимости).
//   КешДанных - Структура - кеш данных, который требуется для ускорения работы различных механизмов.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица актуальных замещений:
//     * Замещение - СправочникСсылка.ЗамещающиеИПомощники - замещение.
//     * Замещающий - СправочникСсылка.Сотрудники - замещающий или помощник.
//
Функция ПодходящиеЗамещения(ДействиеЗадачи, ВидЗамещения = Неопределено, КешДанных = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗамещающиеИПомощники.Ссылка КАК Замещение,
		|	ЗамещающиеИПомощники.Замещающий
		|ИЗ
		|	Справочник.ЗамещающиеИПомощники КАК ЗамещающиеИПомощники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗамещающиеИПомощники.ВопросыЗамещения КАК ВопросыЗамещенияТЧ
		|		ПО ЗамещающиеИПомощники.Ссылка = ВопросыЗамещенияТЧ.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
		|		ПО ЗамещающиеИПомощники.Сотрудник = СотрудникиВКонтейнерах.Сотрудник
		|ГДЕ
		|	ЗамещающиеИПомощники.Действует
		|	И НЕ ЗамещающиеИПомощники.ПометкаУдаления
		|	И СотрудникиВКонтейнерах.Контейнер = &Исполнитель
		|	И ВопросыЗамещенияТЧ.Область В (&ОбластиЗамещения)
		|	И ВопросыЗамещенияТЧ.ЗначениеОтбора В (&ЗначенияОтбора)
		|	И &УсловиеПоВидуЗамещения");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоВидуЗамещения",?(ЗначениеЗаполнено(ВидЗамещения), 
		"ЗамещающиеИПомощники.ВидЗамещения = &ВидЗамещения" , "Истина")); 
	
	Если ТипЗнч(ДействиеЗадачи) = Тип("СтрокаТаблицыЗначений") Тогда
		РеквизитыЗадачи = ДействиеЗадачи;
		РеквизитыЗадачиЗадачаВидЗадачи = РеквизитыЗадачи.ЗадачаВидЗадачи;
	Иначе
		
		РеквизитыЗадачи = Неопределено;
		РеквизитыЗадачиЗадачаВидЗадачи = Неопределено;
		Если КешДанных <> Неопределено И КешДанных.Свойство("ДанныеДокументовДействиеЗадачи") Тогда
			РеквизитыЗадачи = КешДанных.ДанныеДокументовДействиеЗадачи[ДействиеЗадачи];
			Если РеквизитыЗадачи <> Неопределено Тогда
				РеквизитыЗадачиЗадачаВидЗадачи = РеквизитыЗадачи.ЗадачаВидЗадачи;
			КонецЕсли;
		КонецЕсли;
		Если РеквизитыЗадачи = Неопределено Тогда
			Если КешДанных <> Неопределено
				И КешДанных.Свойство("ДанныеДействияЗадачи")
				И КешДанных.Свойство("ДанныеЗадачи") Тогда
				РеквизитыЗадачи = КешДанных.ДанныеДействияЗадачи;
				РеквизитыЗадачиЗадачаВидЗадачи = КешДанных.ДанныеЗадачи.ВидЗадачи;
			Иначе
				РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					ДействиеЗадачи, "Задача, Исполнитель, Задача.ВидЗадачи");
				РеквизитыЗадачиЗадачаВидЗадачи = РеквизитыЗадачи.ЗадачаВидЗадачи;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Области замещения и значения отбора.
	ОбластиЗамещения = Новый Массив;
	ЗначенияОтбора = Новый Массив;
	ОбластиЗамещения.Добавить(Справочники.ОбластиЗамещения.ВсеОбласти);
	ЗначенияОтбора.Добавить(Метаданные.ОпределяемыеТипы.ЗначениеОтбораОбластиЗамещения.Тип.ПривестиЗначение());
	
	ЗапросПоОбластям = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбластиЗамещенияСостав.Ссылка КАК ОбластьЗамещения,
		|	ТИПЗНАЧЕНИЯ(ЗадачаПриложения.Приложение) КАК ТипПриложенияРазвернутый,
		|	ДокументыПредприятия.ВидДокумента КАК ВидДокумента,
		|	ДокументыПредприятия.ВидДокумента.Родитель КАК ВидДокументаРодитель
		|ИЗ
		|	Документ.Задача.Приложения КАК ЗадачаПриложения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
		|		ПО ТИПЗНАЧЕНИЯ(ЗадачаПриложения.Приложение) = ТИПЗНАЧЕНИЯ(ИдентификаторыОбъектовМетаданных.ЗначениеПустойСсылки)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбластиЗамещения.Состав КАК ОбластиЗамещенияСостав
		|		ПО ИдентификаторыОбъектовМетаданных.Ссылка = ОбластиЗамещенияСостав.ОбъектМетаданных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДокументыПредприятия КАК ДокументыПредприятия
		|		ПО ЗадачаПриложения.Приложение = ДокументыПредприятия.Ссылка
		|ГДЕ
		|	ЗадачаПриложения.Ссылка = &Задача
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбластиЗамещенияСостав.Ссылка,
		|	ТИПЗНАЧЕНИЯ(Файлы.ВладелецФайла),
		|	ДокументыПредприятия.ВидДокумента,
		|	ДокументыПредприятия.ВидДокумента.Родитель
		|ИЗ
		|	Документ.Задача.Приложения КАК ЗадачаПриложения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО ЗадачаПриложения.Приложение = Файлы.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
		|		ПО ТИПЗНАЧЕНИЯ(Файлы.ВладелецФайла) = ТИПЗНАЧЕНИЯ(ИдентификаторыОбъектовМетаданных.ЗначениеПустойСсылки)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбластиЗамещения.Состав КАК ОбластиЗамещенияСостав
		|		ПО ИдентификаторыОбъектовМетаданных.Ссылка = ОбластиЗамещенияСостав.ОбъектМетаданных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДокументыПредприятия КАК ДокументыПредприятия
		|		ПО Файлы.ВладелецФайла = ДокументыПредприятия.Ссылка
		|ГДЕ
		|	ЗадачаПриложения.Ссылка = &Задача");
	ЗапросПоОбластям.УстановитьПараметр("Задача", РеквизитыЗадачи.Задача);
	
	Выборка = ЗапросПоОбластям.Выполнить().Выбрать();
	ТипыПриложенийРазвернутые = Новый Массив; // Вместо типа Файлы тип владельца.
	ЕстьПриложения = Выборка.Количество() > 0;
	Пока Выборка.Следующий() Цикл
		ТипыПриложенийРазвернутые.Добавить(Выборка.ТипПриложенияРазвернутый);
		Если ЗначениеЗаполнено(Выборка.ОбластьЗамещения) Тогда
			ОбластиЗамещения.Добавить(Выборка.ОбластьЗамещения);
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ВидДокумента) Тогда
			ЗначенияОтбора.Добавить(Выборка.ВидДокумента);
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ВидДокументаРодитель) Тогда
			ЗначенияОтбора.Добавить(Выборка.ВидДокументаРодитель);
			ПрочиеРодители = ОбщегоНазначенияДокументооборот.ВсеРодителиЭлемента(Выборка.ВидДокументаРодитель);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЗначенияОтбора, ПрочиеРодители);
		КонецЕсли;
	КонецЦикла;
	
	// Области, подчиненные "Документам".
	Если ТипыПриложенийРазвернутые.Найти(Тип("СправочникСсылка.ДокументыПредприятия")) <> Неопределено Тогда
		ВидыЗадачДокументов = Справочники.ЗамещающиеИПомощники.ВидыЗадачДокументовПоОбластямЗамещения();
		СтрокаСОбластью = ВидыЗадачДокументов.Найти(РеквизитыЗадачиЗадачаВидЗадачи);
		Если СтрокаСОбластью <> Неопределено Тогда
			ОбластиЗамещения.Добавить(СтрокаСОбластью.ОбластьЗамещения);
		КонецЕсли;
	КонецЕсли;
	
	// Области для прочих поручений.
	ЭтоПрочееПоручение = Не ЕстьПриложения;
	Если Не ЭтоПрочееПоручение Тогда
		ТипыПредметовПрочихЗадач = ТипыПредметовПрочихЗадач();
		Для Каждого ТипПриложенияРазвернутый Из ТипыПриложенийРазвернутые Цикл
			Если ТипыПредметовПрочихЗадач.Найти(ТипПриложенияРазвернутый) <> Неопределено Тогда
				ЭтоПрочееПоручение = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	Если ЭтоПрочееПоручение Тогда
		ОбластиЗамещения.Добавить(Справочники.ОбластиЗамещения.Задачи);
		ОбластиЗамещения.Добавить(Справочники.ОбластиЗамещения.ЗадачиВыполнениеПрочихПоручений);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Исполнитель", РеквизитыЗадачи.Исполнитель);
	Запрос.УстановитьПараметр("ОбластиЗамещения", ОбластиЗамещения);
	Запрос.УстановитьПараметр("ЗначенияОтбора", ЗначенияОтбора);
	Запрос.УстановитьПараметр("ВидЗамещения", ВидЗамещения);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает замещения, актуальные для действия обрбаотки и исполнителя.
// 
// Параметры:
//  Действие - ОпределяемыйТип.Действия - Действие.
// 	ВидЗамещения - Перечисление.ВидыЗамещения, Неопределено - дополнительная фильтрация по виду замещения 
// 		(при необходимости).
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица актуальных замещений.
// * Замещение - СправочникСсылка.ЗамещающиеИПомощники - замещение.
// * Замещающий - СправочникСсылка.Сотрудники - замещающий или помощник.
//
Функция ПодходящиеЗамещенияПоДействиюИИсполнителю(Действие, Исполнитель, ВидЗамещения = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗамещающиеИПомощники.Ссылка КАК Замещение,
		|	ЗамещающиеИПомощники.Замещающий
		|ИЗ
		|	Справочник.ЗамещающиеИПомощники КАК ЗамещающиеИПомощники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗамещающиеИПомощники.ВопросыЗамещения КАК ВопросыЗамещенияТЧ
		|		ПО ЗамещающиеИПомощники.Ссылка = ВопросыЗамещенияТЧ.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
		|		ПО ЗамещающиеИПомощники.Сотрудник = СотрудникиВКонтейнерах.Сотрудник
		|ГДЕ
		|	ЗамещающиеИПомощники.Действует
		|	И СотрудникиВКонтейнерах.Контейнер = &Исполнитель
		|	И ВопросыЗамещенияТЧ.Область В (&ОбластиЗамещения)
		|	И ВопросыЗамещенияТЧ.ЗначениеОтбора В (&ЗначенияОтбора)
		|	И &УсловиеПоВидуЗамещения");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоВидуЗамещения", 
		?(ЗначениеЗаполнено(ВидЗамещения), "ЗамещающиеИПомощники.ВидЗамещения = &ВидЗамещения" , "Истина")); 
	
	Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет");
	
	// Области замещения и значения отбора.
	ОбластиЗамещения = Новый Массив;
	ЗначенияОтбора = Новый Массив;
	ТипыПриложенийРазвернутые = Новый Массив; // Вместо типа Файлы тип владельца.
	
	ОбластиЗамещения.Добавить(Справочники.ОбластиЗамещения.ВсеОбласти);
	ЗначенияОтбора.Добавить(Метаданные.ОпределяемыеТипы.ЗначениеОтбораОбластиЗамещения.Тип.ПривестиЗначение());
	
	Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		ОбластиЗамещения.Добавить(Справочники.ОбластиЗамещения.Документы);
		ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "ВидДокумента");
		ВидДокументаРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, "Родитель");
		Если ЗначениеЗаполнено(ВидДокумента) Тогда
			ЗначенияОтбора.Добавить(ВидДокумента);
		КонецЕсли;
		Если ЗначениеЗаполнено(ВидДокументаРодитель) Тогда
			ЗначенияОтбора.Добавить(ВидДокументаРодитель);
			ПрочиеРодители = ОбщегоНазначенияДокументооборот.ВсеРодителиЭлемента(ВидДокументаРодитель);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЗначенияОтбора, ПрочиеРодители);
		КонецЕсли;
		ТипыПриложенийРазвернутые.Добавить(Тип("СправочникСсылка.ДокументыПредприятия"));
	ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда
		ОбластиЗамещения.Добавить(Справочники.ОбластиЗамещения.Мероприятия);
		ТипыПриложенийРазвернутые.Добавить(Тип("СправочникСсылка.Мероприятия"));
	КонецЕсли;
	
	// Области, подчиненные "Документам".
	ВидЗадачи = ВидыЗадачПоТипамДействий()[ТипЗнч(Действие)];
	Если ТипыПриложенийРазвернутые.Найти(Тип("СправочникСсылка.ДокументыПредприятия")) <> Неопределено Тогда
		ВидыЗадачДокументов = Справочники.ЗамещающиеИПомощники.ВидыЗадачДокументовПоОбластямЗамещения();
		СтрокаСОбластью = ВидыЗадачДокументов.Найти(ВидЗадачи);
		Если СтрокаСОбластью <> Неопределено Тогда
			ОбластиЗамещения.Добавить(СтрокаСОбластью.ОбластьЗамещения);
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	Запрос.УстановитьПараметр("ОбластиЗамещения", ОбластиЗамещения);
	Запрос.УстановитьПараметр("ЗначенияОтбора", ЗначенияОтбора);
	Запрос.УстановитьПараметр("ВидЗамещения", ВидЗамещения);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Дерево вопросов замещения
//
// Параметры:
//  ОтмеченныеОбласти - Соответствие из КлючИЗначение:
//   * Ключ - СправочникСсылка.ОбластиЗамещения - уникальный ключ адреса,
//   * Значение - СписокЗначений
//  ПереданыВсеОбласти - Булево - в ОтмеченныеОбласти есть элемент ВсеОбласти
// 
// Возвращаемое значение:
//  ДеревоЗначений
//
Функция ДеревоВопросовЗамещения(ОтмеченныеОбласти, ПереданыВсеОбласти) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбластиЗамещения.Ссылка КАК Область,
		|	Неопределено КАК ЗначенияОтбора,
		|	ВЫРАЗИТЬ("""" КАК Строка(250)) КАК ПредставлениеОтбора,
		|	0 КАК Пометка,
		|	ОбластиЗамещения.Родитель = ЗНАЧЕНИЕ(Справочник.ОбластиЗамещения.Документы)
		|	И ОбластиЗамещения.Ссылка <> ЗНАЧЕНИЕ(Справочник.ОбластиЗамещения.ДокументыПросмотрИРедактирование) КАК
		|		ДоступенОтбор
		|ИЗ
		|	Справочник.ОбластиЗамещения КАК ОбластиЗамещения
		|ГДЕ
		|	ОбластиЗамещения.Ссылка <> Значение(Справочник.ОбластиЗамещения.ВсеОбласти)
		|УПОРЯДОЧИТЬ ПО
		|	ОбластиЗамещения.Порядок ИЕРАРХИЯ,
		|	ОбластиЗамещения.Наименование");
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	СтрокиКОбработке = Новый Массив;
	Для Каждого Стр Из Дерево.Строки Цикл
		СтрокиКОбработке.Добавить(Стр);
	КонецЦикла;
	Пока СтрокиКОбработке.Количество() > 0 Цикл
		Стр = СтрокиКОбработке[0];
		Если ПереданыВсеОбласти Тогда
			Стр.Пометка = 1;
		ИначеЕсли Стр.Родитель <> Неопределено И Стр.Родитель.Пометка = 1 Тогда
			Стр.Пометка = 1;
		Иначе
			СписокОтбора = ОтмеченныеОбласти[Стр.Область];
			Если СписокОтбора <> Неопределено Тогда
				Если СписокОтбора.Количество() = 0 Тогда
					Стр.Пометка = 1;
				Иначе
					Стр.Пометка = 2;
					Стр.ЗначенияОтбора = СписокОтбора;
				КонецЕсли;
				// Пометка родителя, если есть отмеченные подчиненные (но не все).
				Если Стр.Родитель <> Неопределено И Стр.Родитель.Пометка = 0 Тогда
					Стр.Родитель.Пометка = 2;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Стр.ПредставлениеОтбора = ЗамещающиеИПомощникиКлиентСервер.ПредставлениеОтбора(Стр);
		Для Каждого ПодчиненнаяСтр Из Стр.Строки Цикл
			СтрокиКОбработке.Добавить(ПодчиненнаяСтр);
		КонецЦикла;
		СтрокиКОбработке.Удалить(0);
	КонецЦикла;
	
	Возврат Дерево;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ИменаОбластейЗамещенияПоЗадачам() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("Задачи");
	Результат.Добавить("ЗадачиПросмотр");
	
	Возврат Результат;
	
КонецФункции

Функция ИменаОбластейЗамещенияПоДокументам() Экспорт

	Результат = Новый Массив;
	Результат.Добавить("Документы");
	Результат.Добавить("ДокументыПросмотрИРедактирование");
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстовоеОписаниеДаты(Дата, ВключатьОписаниеГода)
	
	ФорматДаты = "d MMMM";
	Если НачалоГода(Дата) <> НачалоГода(ТекущаяДатаСеанса()) Или ВключатьОписаниеГода Тогда
		ФорматДаты = ФорматДаты + " yyyy";
	КонецЕсли;
	
	ФорматДаты = "ДФ='" + ФорматДаты + "'";
	ОписаниеДаты = НРег(Формат(Дата, ФорматДаты));
	
	Возврат ОписаниеДаты;
	
КонецФункции

#КонецОбласти