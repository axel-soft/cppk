#Область ПрограммныйИнтерфейс

// Возвращает Истина, если файл с таким расширением является картинкой
Функция ЭтоРасширениеКартинки(Расширение) Экспорт

	РасширениеКартинки = (Расширение = "bmp" Или Расширение = "tif" Или Расширение = "tiff"
		Или Расширение = "jpg" Или Расширение = "jpeg" Или Расширение = "png" Или Расширение = "gif"
		Или Расширение = "emz");

	Возврат РасширениеКартинки;

КонецФункции // РасширениеФайлаРазрешеноДляЗагрузки()

// Возвращает массив путей к файлам-картинкам
Функция ПолучитьФайлыКартинокНаДиске(ПутьКаталогаКартинок, Документ, МаскаФайлаДляOpenOffice = "") Экспорт

	ТекстСообщения = "ПолучитьФайлыКартинокНаДиске. " + ПутьКаталогаКартинок + Символы.ВК + Строка(
		Документ) + Символы.ВК;

	ВсеФайлы = "";
	ФайлыКартинки = "";

	МассивКартинок = Новый Массив;

	ИтоговаяМаска = ПолучитьМаскуВсеФайлыКлиента();
	Если ЗначениеЗаполнено(МаскаФайлаДляOpenOffice) Тогда
		ИтоговаяМаска = МаскаФайлаДляOpenOffice + "*.*";
	КонецЕсли;	
	
	МассивФайлов = НайтиФайлы(ПутьКаталогаКартинок, ИтоговаяМаска);
	Для Каждого Файл Из МассивФайлов Цикл

		ВсеФайлы = ВсеФайлы + " " + Файл.Имя;

		РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Файл.Расширение);
		РасширениеБезТочки = НРег(РасширениеБезТочки);
		Если ЭтоРасширениеКартинки(РасширениеБезТочки) Тогда
			ФайлыКартинки = ФайлыКартинки + " " + Файл.Имя;
			МассивКартинок.Добавить(Файл);
		КонецЕсли;

	КонецЦикла;

	ТекстСообщения = ТекстСообщения + Символы.ВК + " ВсеФайлы= " + ВсеФайлы;
	ТекстСообщения = ТекстСообщения + Символы.ВК + " ФайлыКартинки= " + ФайлыКартинки;

	СогласованиеВРежимеЗамечанийСервер.ЗаписьЖурналаРегистрацииСервер_Информация(ТекстСообщения);

	Возврат МассивКартинок;

КонецФункции

Процедура ЗаполнитьАвтозаполняемыеФайлы(МассивФайловПараллельногоСогласования,
	УникальныйИдентификатор)

	Для Каждого СтруктураФайла Из МассивФайловПараллельногоСогласования Цикл

		Если СтруктураФайла.РежимТолькоРеквизиты = Истина Тогда

			РезультатЗаполненияФайла = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьПоляФайлаДаннымиВладельца(
				Истина, СтруктураФайла.ШаблонОснованиеДляСоздания, Ложь, Неопределено,
				СтруктураФайла.Владелец);

			Если РезультатЗаполненияФайла.Свойство("ДвоичныеДанныеЗаполненногоФайла") Тогда
				СтруктураФайла.Вставить(
					"ДвоичныеДанныеЗаполненногоФайла",
					РезультатЗаполненияФайла.ДвоичныеДанныеЗаполненногоФайла);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры	

Функция ПараметрыИзWordВHtml() Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("УникальныйИдентификатор", Неопределено);
	Параметры.Вставить("СоздаватьФайлы", Истина);
	Параметры.Вставить("БылаОшибкаWord", Ложь);
	Параметры.Вставить("ТекстОшибки", "");
	Параметры.Вставить("ЭтоВторойЦиклИлиВыше", Ложь);
	Параметры.Вставить("ВызовИзОбработкиПараллелРан", Ложь);
	Параметры.Вставить("Задача", Неопределено);
	Параметры.Вставить("СпособСогласованияВРежимеЗамечаний", Неопределено);  
	Параметры.Вставить("ЧислоСтраницДляПредпросмотраПорции", 0);  
	
	Возврат Параметры;
	
КонецФункции	

// Преобразует doc docx файлы в HTML с помощью Word
// МассивФайловПараллельногоСогласования - массив 
//   структур (ФайлСсылка, Владелец, Наименование, Расширение, АдресВременногоХранилищаФайлаDoc, АдресВременногоХранилищаФайлаHTML, РазмерHTMLФайла) 
Процедура ОбработатьМассивФайловИзWordВHtml(МассивФайловПараллельногоСогласования,
	ПараметрыВызова) Экспорт      
	
	Если Не ОбщегоНазначенияКлиент.ЭтоWindowsКлиент() Тогда
		Возврат;
	КонецЕсли;	
	
	УникальныйИдентификатор = ПараметрыВызова.УникальныйИдентификатор;
	СоздаватьФайлы = ПараметрыВызова.СоздаватьФайлы;
	ВызовИзОбработкиПараллелРан = ПараметрыВызова.ВызовИзОбработкиПараллелРан;
	Задача = ПараметрыВызова.Задача;
	СпособСогласованияВРежимеЗамечаний = ПараметрыВызова.СпособСогласованияВРежимеЗамечаний;
	 
	ИспользоватьOpenNoRepairDialog = Истина; // только для Word

	ЗаполнитьАвтозаполняемыеФайлы(МассивФайловПараллельногоСогласования, УникальныйИдентификатор);
	
	wdStatisticPages = 2;

	ПороговоеЧислоСтраницФайлаСогласованияДляДолгойОчереди = СогласованиеВРежимеЗамечанийКлиентСерверПереопределяемый.ПороговоеЧислоСтраницФайлаСогласованияДляДолгойОчереди();
	ПредельноеЧислоСтраницФайлаСогласованияДляHtmlОбраза  = СогласованиеВРежимеЗамечанийКлиентСерверПереопределяемый.ПредельноеЧислоСтраницФайлаСогласованияДляHtmlОбраза();
	ЧислоСтраницДляПредпросмотраПорции = ПараметрыВызова.ЧислоСтраницДляПредпросмотраПорции;

	ТипОчереди = ПредопределенноеЗначение("Перечисление.ТипОчередиПодготовкиКСогласованию.Быстрая"); // на всю задачу, а не отдельный файл

	Для Каждого СтруктураФайла Из МассивФайловПараллельногоСогласования Цикл

		ЧислоСтраниц = 0;

		ПутьКаталога = КаталогВременныхФайлов();
		УникИд = Новый УникальныйИдентификатор;
		ПутьКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКаталога);
		ПутьКаталога = ПутьКаталога + Строка(УникИд);
		ПутьКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКаталога);
		СоздатьКаталог(ПутьКаталога);       
		
		ПутьКаталогаКартинок = "";      
		
		ИмяДляПоказа = СтруктураФайла.Наименование + "." + СтруктураФайла.Расширение;

		ДопустимаяДлинаИмениФайла = 50;
		ИмяБезРасширенияУрезанное = СтруктураФайла.Наименование;

		Если СтрДлина(ИмяБезРасширенияУрезанное) > ДопустимаяДлинаИмениФайла Тогда
			ИмяБезРасширенияУрезанное = Лев(ИмяБезРасширенияУрезанное, ДопустимаяДлинаИмениФайла);
			ИмяБезРасширенияУрезанное = СокрЛП(ИмяБезРасширенияУрезанное);
		КонецЕсли;

		ИмяПростое = "nfile";
		ИмяБезРасширенияУрезанное = ИмяПростое; 
		ИмяФайлаHTML = ИмяПростое + ".htm";
		ПолныйПутьФайлаHTML = ПутьКаталога + ИмяФайлаHTML;
		МаскаФайлаДляOpenOffice = ИмяПростое + "_htm_";

		ПолныйПутьФайла = ПутьКаталога + ИмяБезРасширенияУрезанное + "." + СтруктураФайла.Расширение;
		ИмяФайла = ИмяБезРасширенияУрезанное + "." + СтруктураФайла.Расширение;
		АдресФайла = СтруктураФайла.АдресВременногоХранилищаФайлаDoc;
		
		НовыйПутьКФайлу2 = "";

		ТекстПояснения = СтрШаблон(НСтр("ru = 'Выполняется получение с сервера файла ""%1"".
										|Пожалуйста, подождите...'"), ИмяДляПоказа);
		Состояние(ТекстПояснения);

		Если Не ПолучитьФайл(АдресФайла, ПолныйПутьФайла, Ложь) Тогда
			СогласованиеВРежимеЗамечанийСервер.ЗаписьЖурналаРегистрацииСервер_Информация(
				"Если Не ПолучитьФайл(");
			Продолжить;
		КонецЕсли;

		ТекстПояснения = СтрШаблон(НСтр("ru = 'Выполняется преобразование файла ""%1"" в HTML.
										|Пожалуйста, подождите...'"), ИмяДляПоказа);
		Состояние(ТекстПояснения);

		WordApp = Неопределено;  
		Excel = Неопределено;  
		Книга = Неопределено; 
		ЭтоExcel = Ложь;     
		
		Builder = Неопределено; 
		
		ОбъектServiceManager = Неопределено;
		ИнстансDesktop = Неопределено;
		ПараметрыДокумента = Неопределено;
		
		ПутьКФайлу1 = "";      
		МассивHTMLФайлов = Новый Массив;

		Попытка

			 // основной вариант

					Если СпособСогласованияВРежимеЗамечаний 
						= ПредопределенноеЗначение("Перечисление.СпособыСогласованияВРежимеЗамечаний.MicrosoftOfficeWord") Тогда

					#Если ТонкийКлиент Тогда      
						Если СтруктураФайла.Расширение = "doc" Или СтруктураФайла.Расширение = "docx" Или СтруктураФайла.Расширение = "odt" Тогда
							
							WordApp = Новый COMОбъект("Word.Application");
							WordApp.WordBasic.DisableAutoMacros(1);
							
							WordApp.Visible = 1;
							WordApp.Activate();
			
							Если ИспользоватьOpenNoRepairDialog = Ложь Тогда
			
								Документ1 = WordApp.Documents.Open(ПолныйПутьФайла);
			
							Иначе
								OpenAndRepair = Истина; // 13-й аргумент
								Документ1 = WordApp.Documents.OpenNoRepairDialog(
									ПолныйПутьФайла, , , , , , , , , , , , OpenAndRepair);
			
							КонецЕсли;

							WordApp.ActiveWindow.ActivePane.View.Type = 3; // wdPrintView = 3			
							ЧислоСтраниц = Документ1.ComputeStatistics(wdStatisticPages);
			
							
						ИначеЕсли СтруктураФайла.Расширение = "xls" Или СтруктураФайла.Расширение = "xlsx" Или СтруктураФайла.Расширение = "ods" Тогда
							
							Excel = Неопределено;
						#Если ТонкийКлиент Тогда		
							Excel = Новый COMОбъект("Excel.Application"); 
						#КонецЕсли	
						
							Excel.AutomationSecurity = 3; // msoAutomationSecurityForceDisable = 3
							ЭтоExcel = Истина;
							
							Книга = Excel.WorkBooks.Open(ПолныйПутьФайла);
							
							ЧислоСтраниц = 1; // фиктивно
							
						КонецЕсли;
#КонецЕсли
						
					ИначеЕсли СпособСогласованияВРежимеЗамечаний = ПредопределенноеЗначение("Перечисление.СпособыСогласованияВРежимеЗамечаний.OpenOfficeOrgWriter")
					 И НРег(СтруктураФайла.Расширение) <> "docx" Тогда
							
#Если ТонкийКлиент Тогда		
						ОбъектServiceManager = Новый COMОбъект("com.sun.star.ServiceManager");
					
						ИнстансDesktop = ОбъектServiceManager.createInstance("com.sun.star.frame.Desktop");
			
						// Параметры открытия: отключение исполнения макросов.
						ПараметрыДокумента = Новый COMSafeArray("VT_VARIANT", 1);
#КонецЕсли	
						
						РежимЗапуска = ПрисвоитьЗначениеСвойству(ОбъектServiceManager,
							"MacroExecutionMode",
							0); // const short NEVER_EXECUTE = 0
						ПараметрыДокумента.SetValue(0, РежимЗапуска);
					
						// Открыть документ OpenOffice.
						Документ1 = ИнстансDesktop.loadComponentFromURL(ПреобразоватьВURL(ПолныйПутьФайла), 
							"_blank", 0, ПараметрыДокумента);
					
						ЧислоСтраниц = Документ1.CurrentController.PageCount;

					ИначеЕсли СпособСогласованияВРежимеЗамечаний 
						= ПредопределенноеЗначение("Перечисление.СпособыСогласованияВРежимеЗамечаний.Р7Builder") Тогда
							
#Если ТонкийКлиент Тогда		
						Builder = Новый COMОбъект("R7.Builder");
						
						Builder.Initialize();

						Builder.OpenFile(ПолныйПутьФайла, "");
						
#КонецЕсли	
						
						ЧислоСтраниц = 1;  //Документ1.CurrentController.PageCount;
						
					КонецЕсли;	

			Если ЧислоСтраниц > ПредельноеЧислоСтраницФайлаСогласованияДляHtmlОбраза
				И СпособСогласованияВРежимеЗамечаний <> ПредопределенноеЗначение("Перечисление.СпособыСогласованияВРежимеЗамечаний.MicrosoftOfficeWord") 
				Тогда
				
				// пропускаем этот файл
				ТекстСтр = "пропускаем этот файл. " + ПолныйПутьФайла;
				СогласованиеВРежимеЗамечанийСервер.ЗаписьЖурналаРегистрацииСервер_Информация(
					ТекстСтр);

				СтруктураФайла.АдресВременногоХранилищаФайлаHTML = "";

				Если СпособСогласованияВРежимеЗамечаний 
					= ПредопределенноеЗначение("Перечисление.СпособыСогласованияВРежимеЗамечаний.MicrosoftOfficeWord") Тогда

					Документ1.Close(0);  // 0 закрыть без сохранения
					WordApp.Quit();
					WordApp = Неопределено;
					
				ИначеЕсли СпособСогласованияВРежимеЗамечаний 
				= ПредопределенноеЗначение("Перечисление.СпособыСогласованияВРежимеЗамечаний.OpenOfficeOrgWriter") Тогда	
				
					Документ1.close(-1);        //Закрыть документ без сохранения
					
				 	Документ1     = Неопределено;
				    ИнстансDesktop     = Неопределено;	
				    ОбъектServiceManager = Неопределено;

				ИначеЕсли СпособСогласованияВРежимеЗамечаний 
				= ПредопределенноеЗначение("Перечисление.СпособыСогласованияВРежимеЗамечаний.Р7Builder") Тогда	
				
					Builder.CloseFile();
					Builder = Неопределено;
				
				КонецЕсли;

				УдалитьФайлы(ПутьКаталога, ПолучитьМаскуВсеФайлы());
				УдалитьФайлы(ПутьКаталога);

				Продолжить;

			КонецЕсли;

			Если ЧислоСтраниц > ПороговоеЧислоСтраницФайлаСогласованияДляДолгойОчереди Тогда
				ТипОчереди = ПредопределенноеЗначение(
					"Перечисление.ТипОчередиПодготовкиКСогласованию.Долгая");
			КонецЕсли;
			
			
			Если СпособСогласованияВРежимеЗамечаний 
			= ПредопределенноеЗначение("Перечисление.СпособыСогласованияВРежимеЗамечаний.MicrosoftOfficeWord") Тогда
			
			
				Если Не ЭтоExcel Тогда  // тут Word
				
					Если ЧислоСтраниц > ЧислоСтраницДляПредпросмотраПорции
						И ЧислоСтраницДляПредпросмотраПорции <> 0 Тогда      
						
						// порционный режим.
						WordApp.Visible = 1;
						WordApp.Activate();
			
						Документ1.WebOptions.Encoding = 1251;//msoEncodingCyrillic
						
						СтраницДробно = ЧислоСтраниц / ЧислоСтраницДляПредпросмотраПорции;
						СтраницЦелое = Цел(СтраницДробно);
						
						ЧислоПорций = СтраницЦелое;
						Если СтраницДробно - СтраницЦелое <> 0 Тогда
							ЧислоПорций = ЧислоПорций + 1;
						КонецЕсли;	
						
						ИмяФайлаСПутемHTML = "";
						
						ВременнаяПапка = ПутьКаталога;  
						
						Для НомерПорции = 0 По ЧислоПорций -1 Цикл
							
							ИмяФайлаСПутемHTMLТекущее = ВременнаяПапка + "doc" + Строка(НомерПорции) + ".htm";  
							
							НомерСтраницыНачало = НомерПорции * ЧислоСтраницДляПредпросмотраПорции + 1;
							
							ЭтоПоследняяСтраница = Ложь;
							Если НомерПорции = ЧислоПорций -1 Тогда
								НомерСтраницыКонец  = ЧислоСтраниц + 1; 
								ЭтоПоследняяСтраница = Истина;  
							Иначе
								НомерСтраницыКонец  = (НомерПорции +1)* ЧислоСтраницДляПредпросмотраПорции + 1;
							КонецЕсли;	
							
							// wdGoToPage 1.  wdGoToAbsolute 1.   1 - номер страницы
							Range1 = Документ1.GoTo(1, 1, НомерСтраницыНачало);
							Range2 = Документ1.GoTo(1, 1, НомерСтраницыКонец);
							
							Если ЭтоПоследняяСтраница Тогда
								Range2.End = Документ1.Content.End;
							КонецЕсли;	
							
							RangeAll = Документ1.Range(Range1.Start, Range2.End);
							RangeAll.Copy();
							
							tmpDoc = WordApp.Documents.Add(,,,Ложь); // видимость = Ложь
							tmpDoc.Range().Paste();
							
							tmpDoc.SaveAs(ИмяФайлаСПутемHTMLТекущее , 10); // wdFormatFilteredHTML = 10	
							tmpDoc.Close(); 	
							
							СконвертироватьHtmlВUtf8ПлюсКартинки(ИмяФайлаСПутемHTMLТекущее, ПутьКаталога);
					
							
							МассивHTMLФайлов.Добавить(ИмяФайлаСПутемHTMLТекущее);
						
						КонецЦикла;     
						
						Документ1.Paragraphs(1).Range.Copy(); // чтобы в буфере не было много
						
						Документ1.Close(0);  // 0 закрыть без сохранения
			
						WordApp.Quit();
						WordApp = Неопределено;
						
					Иначе	
					
						WordApp.Visible = 1;
						WordApp.Activate();
			
						Документ1.WebOptions.Encoding = 1251;//msoEncodingCyrillic
						// wdFormatHTML  8
						Документ1.SaveAs(ПолныйПутьФайлаHTML, 8);
			
						Документ1.Close(0);  // 0 закрыть без сохранения
			
						WordApp.Quit();
						WordApp = Неопределено;                       
						
						СконвертироватьHtmlВUtf8ПлюсКартинки(ПолныйПутьФайлаHTML, ПутьКаталога);
					
					КонецЕсли;
					
				Иначе // Excel
					
					Excel.Visible = Истина;
					
					ВременнаяПапка = ПутьКаталога;  
					
					ОбзорФайловКлиент.HtmlКакФайлИзXls(Книга, ВременнаяПапка, ПолныйПутьФайлаHTML);
					
					Excel.Quit();
					Excel = Неопределено;
					
					СконвертироватьHtmlВUtf8ПлюсКартинки(ПолныйПутьФайлаHTML, ПутьКаталога);
					
				КонецЕсли;
				
			ИначеЕсли СпособСогласованияВРежимеЗамечаний 
			= ПредопределенноеЗначение("Перечисление.СпособыСогласованияВРежимеЗамечаний.OpenOfficeOrgWriter") Тогда

				ПараметрыСохранения = Неопределено;
				
#Если ТонкийКлиент Тогда
	
				ПараметрыСохранения = Новый COMSafeArray("VT_VARIANT", 1);
		
				FilterName = ПрисвоитьЗначениеСвойству(ОбъектServiceManager,
					"FilterName",
					"HTML (StarWriter)");
				ПараметрыСохранения.SetValue(0, FilterName);
				
				Документ1.storeToURL(ПреобразоватьВURL(ПолныйПутьФайлаHTML), ПараметрыСохранения);
				
				Документ1.close(-1);        //Закрыть документ без сохранения
				
			 	Документ1     = Неопределено;
			    ИнстансDesktop     = Неопределено;	
			    ОбъектServiceManager = Неопределено;
			    
				СконвертироватьHtmlВUtf8ПлюсКартинки(ПолныйПутьФайлаHTML, ПутьКаталога);
				
#КонецЕсли

			ИначеЕсли СпособСогласованияВРежимеЗамечаний 
			= ПредопределенноеЗначение("Перечисление.СпособыСогласованияВРежимеЗамечаний.Р7Builder") Тогда
			
					Builder.SaveFile("html", ПолныйПутьФайлаHTML);
			
					Builder.CloseFile();
					Builder = Неопределено;

			КонецЕсли;

		Исключение

			ПараметрыВызова.БылаОшибкаWord = Истина;
			ПараметрыВызова.ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + " " + ПутьКФайлу1;

			Если СпособСогласованияВРежимеЗамечаний 
			= ПредопределенноеЗначение("Перечисление.СпособыСогласованияВРежимеЗамечаний.MicrosoftOfficeWord") Тогда
			
				Если WordApp <> Неопределено Тогда
					WordApp.Quit();
				КонецЕсли;
				WordApp = Неопределено;
				
				Если Excel <> Неопределено Тогда				
					Excel.Quit();
				КонецЕсли;	
				Excel = Неопределено;           

				Если Builder <> Неопределено Тогда				
					Builder.CloseFile();
				КонецЕсли;	
				Builder = Неопределено;           
				
			КонецЕсли;

			СогласованиеВРежимеЗамечанийСервер.ЗаписьЖурналаРегистрацииСервер(ПараметрыВызова.ТекстОшибки);

			Возврат;

		КонецПопытки;

		МассивКартинок = Новый Массив;
		
		Если СпособСогласованияВРежимеЗамечаний 
			= ПредопределенноеЗначение("Перечисление.СпособыСогласованияВРежимеЗамечаний.MicrosoftOfficeWord")
			И МассивHTMLФайлов.Количество() = 0 Тогда
			
			ИмяПодКаталогаКартинок = ИмяБезРасширенияУрезанное;
			ПутьКаталогаКартинок = ПутьКаталога + ИмяПодКаталогаКартинок;
			
			ФайлКаталога = Новый Файл(ПутьКаталогаКартинок);
			Если Не ФайлКаталога.Существует() Тогда
				
				ИмяПодКаталогаКартинок = ИмяБезРасширенияУрезанное + ".files";
				ПутьКаталогаКартинок = ПутьКаталога + ИмяПодКаталогаКартинок;
				
			КонецЕсли;	
			
			МассивКартинок = ПолучитьФайлыКартинокНаДиске(ПутьКаталогаКартинок, СтруктураФайла.Владелец);
			
		ИначеЕсли СпособСогласованияВРежимеЗамечаний 
		= ПредопределенноеЗначение("Перечисление.СпособыСогласованияВРежимеЗамечаний.OpenOfficeOrgWriter") Тогда	
			
			ПутьКаталогаКартинок = ПутьКаталога;
			МассивКартинок = ПолучитьФайлыКартинокНаДиске(
				ПутьКаталогаКартинок, СтруктураФайла.Владелец, МаскаФайлаДляOpenOffice);
			
		КонецЕсли;

		ТекстПояснения = СтрШаблон(НСтр("ru = 'Выполняется передача на сервер файла ""%1"".
										|Пожалуйста, подождите...'"), ИмяФайлаHTML);
		Состояние(ТекстПояснения);

		ПомещаемыеФайлы = Новый Массив;
		
		Если МассивHTMLФайлов.Количество() = 0 Тогда
			МассивHTMLФайлов.Добавить(ПолныйПутьФайлаHTML);
		КонецЕсли;	
		
		Если МассивHTMLФайлов.Количество() <> 0 Тогда
			
			Для Каждого Путь1 Из МассивHTMLФайлов Цикл
				Описание = Новый ОписаниеПередаваемогоФайла(Путь1, "");
				ПомещаемыеФайлы.Добавить(Описание);       
			КонецЦикла;
			
		Иначе	
			Описание = Новый ОписаниеПередаваемогоФайла(ПолныйПутьФайлаHTML, "");
			ПомещаемыеФайлы.Добавить(Описание);          
		КонецЕсли;
		
		ПомещенныеФайлы = Новый Массив;
		ФайлыПомещены = ПоместитьФайлы(
			ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, //Интерактивно
			УникальныйИдентификатор);

		Если ПомещенныеФайлы.Количество() <> 0 Тогда
			
			НомерБлока = 0;          
			СтруктураФайла.МассивHTMLФайлов = Новый Массив;
			
			Для Каждого Помещенный Из ПомещенныеФайлы Цикл                 
				
				ПутьФайла1 = МассивHTMLФайлов[НомерБлока];
				
				ФайлНаДиске = Новый Файл(ПутьФайла1);
				РазмерHTMLФайла = ФайлНаДиске.Размер();
				ФайлНаДиске = Неопределено;
				
				СтруктПорции = Новый Структура("АдресВременногоХранилищаФайлаHTML, РазмерHTMLФайла, НомерБлока",
					Помещенный.Хранение, РазмерHTMLФайла, НомерБлока);
					
				СтруктураФайла.МассивHTMLФайлов.Добавить(СтруктПорции);
				
				НомерБлока = НомерБлока + 1;
				
			КонецЦикла;
			
		КонецЕсли;

		УдалитьФайлы(ПолныйПутьФайла);
		УдалитьФайлы(ПолныйПутьФайлаHTML);

		Если ЗначениеЗаполнено(НовыйПутьКФайлу2) Тогда
			УдалитьФайлы(НовыйПутьКФайлу2);
		КонецЕсли;

		СтруктураФайла.Вставить("Картинки", Новый Массив);

		Для Каждого ФайлКартинки Из МассивКартинок Цикл

			РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(
				ФайлКартинки.Расширение);

			СтруктураКартинки = Новый Структура("Имя, Расширение, АдресВременногоХранилища, ИдентификаторВложения, Размер",
				ФайлКартинки.ИмяБезРасширения, РасширениеБезТочки, "", "", ФайлКартинки.Размер());

			Если ЗначениеЗаполнено(ИмяПодКаталогаКартинок) Тогда
				ИдентификаторВложения 
					= СтрЗаменить(ИмяПодКаталогаКартинок, " ", "%20") + "/" + ФайлКартинки.Имя;
			Иначе		
				ИдентификаторВложения = ФайлКартинки.Имя;
			КонецЕсли;		
				
			СтруктураКартинки.ИдентификаторВложения = ИдентификаторВложения;

			ПомещаемыеФайлы = Новый Массив;
			Описание = Новый ОписаниеПередаваемогоФайла(ФайлКартинки.ПолноеИмя, "");
			ПомещаемыеФайлы.Добавить(Описание);

			ПомещенныеФайлы = Новый Массив;
			ФайлыПомещены = ПоместитьФайлы(
				ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, //Интерактивно

				УникальныйИдентификатор);

			Если ПомещенныеФайлы.Количество() = 1 Тогда
				СтруктураКартинки.АдресВременногоХранилища = ПомещенныеФайлы[0].Хранение;
			КонецЕсли;

			СтруктураФайла.Картинки.Добавить(СтруктураКартинки);

		КонецЦикла;
		
		Если ЗначениеЗаполнено(ПутьКаталогаКартинок) Тогда
			УдалитьФайлы(ПутьКаталогаКартинок, ПолучитьМаскуВсеФайлы());
			УдалитьФайлы(ПутьКаталогаКартинок);
		КонецЕсли;

		УдалитьФайлы(ПутьКаталога, ПолучитьМаскуВсеФайлы());
		УдалитьФайлы(ПутьКаталога);

	КонецЦикла;

	ТекстПояснения = НСтр("ru = 'Выполняется создание на сервере HTML файлов.
						  |Пожалуйста, подождите...'");
	Состояние(ТекстПояснения);
	
	// Тут вызов на сервер, создаем объекты Файл.
	Если СоздаватьФайлы Тогда
		СогласованиеВРежимеЗамечанийСервер.СоздатьHTMLФайлы(МассивФайловПараллельногоСогласования,
			ВызовИзОбработкиПараллелРан, Задача, ТипОчереди);
	Иначе
		СогласованиеВРежимеЗамечанийСервер.ОбновитьHTMLФайлы(МассивФайловПараллельногоСогласования);
	КонецЕсли;

	Состояние();

КонецПроцедуры	

Процедура СконвертироватьHtmlВUtf8(ПолныйПутьФайлаHTML, ЕстьТегиIMG = Ложь)

#Если Не ВебКлиент Тогда
	
	// перекодируем html файл (как сохранен из Word)  в UTF-8

	ЧтениеТекста = Новый ЧтениеТекста(ПолныйПутьФайлаHTML);
	ТекстHTML = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	ТекстHtmlНРег = НРег(ТекстHTML);
	
	Если СтрНайти(ТекстHtmlНРег, "charset=utf-8") <> 0 
		Или СтрНайти(ТекстHtmlНРег, "charset=""utf-8""") <> 0 Тогда
		
		ЧтениеТекста = Новый ЧтениеТекста(ПолныйПутьФайлаHTML, "UTF-8");
		ТекстHTML = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		
	КонецЕсли;	
	
	ЕстьТегиIMG = СогласованиеВРежимеЗамечанийHTMLКлиентСервер.ЕстьСсылкиНаКартинки(ТекстHTML);
	
	ТекстHTML = РаботаСоСтроками.УдалитьНедопустимыеСимволыXML(ТекстHTML);

	ИмяВременногоФайлаНового = ПолучитьИмяВременногоФайла("html");
	ТекстовыйФайл = Новый ЗаписьТекста(ИмяВременногоФайлаНового,
		СогласованиеВРежимеЗамечанийHTMLКлиентСервер.КодировкаЧтенияЗаписиHtml());
	ТекстовыйФайл.Записать(ТекстHTML);
	ТекстовыйФайл.Закрыть();

	ПереместитьФайл(ИмяВременногоФайлаНового, ПолныйПутьФайлаHTML);

#КонецЕсли

КонецПроцедуры	

Процедура СконвертироватьHtmlВUtf8ПлюсКартинки(ПолныйПутьФайлаHTML, ВременнаяПапка, ЕстьТегиIMG = Ложь)

#Если Не ВебКлиент Тогда
	
	// перекодируем html файл (как сохранен из Word)  в UTF-8

	ЧтениеТекста = Новый ЧтениеТекста(ПолныйПутьФайлаHTML);
	ТекстHTML = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	ТекстHtmlНРег = НРег(ТекстHTML);
	
	Если СтрНайти(ТекстHtmlНРег, "charset=utf-8") <> 0 
		Или СтрНайти(ТекстHtmlНРег, "charset=""utf-8""") <> 0 Тогда
		
		ЧтениеТекста = Новый ЧтениеТекста(ПолныйПутьФайлаHTML, "UTF-8");
		ТекстHTML = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		
	КонецЕсли;	
	
	ЕстьТегиIMG = СогласованиеВРежимеЗамечанийHTMLКлиентСервер.ЕстьСсылкиНаКартинки(ТекстHTML);
	
	ТекстHTML = РаботаСоСтроками.УдалитьНедопустимыеСимволыXML(ТекстHTML);
	
	ТекстHTML = ОбзорФайловКлиентСервер.HTMLСКартинками(
		ТекстHTML,
		"", 
		ВременнаяПапка);                  
	
	ИмяВременногоФайлаНового = ПолучитьИмяВременногоФайла("html");
	ТекстовыйФайл = Новый ЗаписьТекста(ИмяВременногоФайлаНового,
		СогласованиеВРежимеЗамечанийHTMLКлиентСервер.КодировкаЧтенияЗаписиHtml());
	ТекстовыйФайл.Записать(ТекстHTML);
	ТекстовыйФайл.Закрыть();

	ПереместитьФайл(ИмяВременногоФайлаНового, ПолныйПутьФайлаHTML);

#КонецЕсли

КонецПроцедуры	

// Преобразует html файлы в doc с помощью Word (предварительно вырезав лишние теги, сконвертировав нумерацию)
// МассивФайловПараллельногоСогласования - массив 
//   структур (ФайлСсылка, Владелец, Наименование, Расширение, АдресВременногоХранилищаФайлаDoc, АдресВременногоХранилищаФайлаHTML, РазмерHTMLФайла, РасширениеDocФайла) 
Процедура ОбработатьМассивФайловИзHtmlВWord(МассивФайловПараллельногоСогласования,
	УникальныйИдентификатор) Экспорт

	WordApp = Неопределено;
#Если ТонкийКлиент Тогда
		WordApp = Новый COMОбъект("Word.Application");
		WordApp.WordBasic.DisableAutoMacros(1);
#КонецЕсли

	Для Каждого СтруктураФайла Из МассивФайловПараллельногоСогласования Цикл

		ОбновитьTablesOfContents = Истина;
		КонвертироватьОдинФайлИзHtmlВWord(
			СтруктураФайла, УникальныйИдентификатор, WordApp, ОбновитьTablesOfContents);

	КонецЦикла;

	WordApp.Quit();
	WordApp = Неопределено;

	ТекстПояснения = НСтр("ru = 'Выполняется создание на сервере DOC файлов.
						  |Пожалуйста, подождите...'");
	Состояние(ТекстПояснения);
	
	// Тут вызов на сервер, создаем объекты Файл.
	СогласованиеВРежимеЗамечанийСервер.ОбновитьWordФайлы(МассивФайловПараллельногоСогласования,
		НСтр("ru = 'Версия создана при отправке на след цикл согласования.'"));

	Состояние();

КонецПроцедуры	

// Преобразует один html файл в doc с помощью Word (предварительно вырезав лишние теги, сконвертировав нумерацию)
Процедура ОбработатьОдинФайлИзHtmlВWord(СтруктураФайла, УникальныйИдентификатор) Экспорт

	WordApp = Неопределено;
#Если ТонкийКлиент Тогда
		WordApp = Новый COMОбъект("Word.Application");
		WordApp.WordBasic.DisableAutoMacros(1);
#КонецЕсли

	ОбновитьTablesOfContents = Ложь;
	КонвертироватьОдинФайлИзHtmlВWord(
		СтруктураФайла, УникальныйИдентификатор, WordApp, ОбновитьTablesOfContents);

	WordApp.Quit();
	WordApp = Неопределено;

	ТекстПояснения = НСтр("ru = 'Выполняется создание на сервере DOC файлов.
						  |Пожалуйста, подождите...'");
	Состояние(ТекстПояснения);
	
	// Тут вызов на сервер, создаем объекты Файл.
	СогласованиеВРежимеЗамечанийСервер.ОбновитьWordФайл(СтруктураФайла);

	Состояние();

КонецПроцедуры	

// Преобразует один html файл в doc с помощью Word (предварительно вырезав лишние теги, сконвертировав нумерацию)
Процедура КонвертироватьОдинФайлИзHtmlВWord(СтруктураФайла, УникальныйИдентификатор, WordApp,
	ОбновитьTablesOfContents)

	ПутьКаталога = КаталогВременныхФайлов();
	УникИд = Новый УникальныйИдентификатор;
	ПутьКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКаталога);
	ПутьКаталога = ПутьКаталога + Строка(УникИд);
	ПутьКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКаталога);
	СоздатьКаталог(ПутьКаталога);

	ДопустимаяДлинаИмениФайла = 50;
	ИмяБезРасширенияУрезанное = СтруктураФайла.Наименование;

	Если СтрДлина(ИмяБезРасширенияУрезанное) > ДопустимаяДлинаИмениФайла Тогда
		ИмяБезРасширенияУрезанное = Лев(ИмяБезРасширенияУрезанное, ДопустимаяДлинаИмениФайла);
		ИмяБезРасширенияУрезанное = СокрЛП(ИмяБезРасширенияУрезанное);
	КонецЕсли;

	ПутьКаталогаКартинок = ПутьКаталога + ИмяБезРасширенияУрезанное + ".files";
	ПутьКаталогаКартинок = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
		ПутьКаталогаКартинок);
	СоздатьКаталог(ПутьКаталогаКартинок);

	ПолныйПутьФайла = ПутьКаталога + ИмяБезРасширенияУрезанное + "." + СтруктураФайла.Расширение;
	ИмяФайла = ИмяБезРасширенияУрезанное + "." + СтруктураФайла.Расширение;
	АдресФайла = СтруктураФайла.АдресВременногоХранилищаФайлаHTML;

	РасширениеDocФайла = СтруктураФайла.РасширениеDocФайла;

	ИмяФайлаDOC = ИмяБезРасширенияУрезанное + "." + РасширениеDocФайла;
	ПолныйПутьФайлаDOC = ПутьКаталога + ИмяФайлаDOC;

	ТекстПояснения = СтрШаблон(НСтр("ru = 'Выполняется получение с сервера файла ""%1"".
									|Пожалуйста, подождите...'"), ИмяФайла);
	Состояние(ТекстПояснения);

	Если Не ПолучитьФайл(АдресФайла, ПолныйПутьФайла, Ложь) Тогда
		Возврат;
	КонецЕсли;

	Для Каждого СтруктураКартинки Из СтруктураФайла.Картинки Цикл

		ПолныйПутьКартинки = ПутьКаталогаКартинок + СтруктураКартинки.Имя + "."
			+ СтруктураКартинки.Расширение;
		АдресФайлаКартинки = СтруктураКартинки.АдресВременногоХранилища;
		Если Не ПолучитьФайл(АдресФайлаКартинки, ПолныйПутьКартинки, Ложь) Тогда
			Продолжить;
		КонецЕсли;

	КонецЦикла;

	ТекстПояснения = СтрШаблон(НСтр("ru = 'Выполняется преобразование файла ""%1"" в doc.
									|Пожалуйста, подождите...'"), ИмяФайла);
	Состояние(ТекстПояснения);

	Документ1 = WordApp.Documents.Open(ПолныйПутьФайла);

	WordApp.Visible = 1;
	WordApp.Activate();

	Если ОбновитьTablesOfContents Тогда
		Для Каждого ТаблицаСодержания Из Документ1.TablesOfContents Цикл
			ТаблицаСодержания.Update();
		КонецЦикла;
	КонецЕсли;

	// надо записать, уже без защиты Ворд
	ФорматСохранения = 0;// wdFormatDocument  0
	Если НРег(РасширениеDocФайла) = "docx" Тогда
		ФорматСохранения = 16; // wdFormatDocumentDefault 16
	ИначеЕсли НРег(РасширениеDocФайла) = "odt" Тогда
		ФорматСохранения = 23; // wdFormatOpenDocumentText 23
	КонецЕсли;
	
	Документ1.SaveAs(ПолныйПутьФайлаDOC, ФорматСохранения);
	Документ1.Close();

	ТекстПояснения = СтрШаблон(НСтр("ru = 'Выполняется передача на сервер файла ""%1"".
									|Пожалуйста, подождите...'"), ИмяФайлаDOC);
	Состояние(ТекстПояснения);

	ПомещаемыеФайлы = Новый Массив;
	Описание = Новый ОписаниеПередаваемогоФайла(ПолныйПутьФайлаDOC, "");
	ПомещаемыеФайлы.Добавить(Описание);

	ПомещенныеФайлы = Новый Массив;
	ФайлыПомещены = ПоместитьФайлы(
		ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, //Интерактивно

		УникальныйИдентификатор);

	Если ПомещенныеФайлы.Количество() = 1 Тогда
		СтруктураФайла.АдресВременногоХранилищаФайлаDOC = ПомещенныеФайлы[0].Хранение;
	КонецЕсли;

	ФайлНаДиске = Новый Файл(ПолныйПутьФайлаDOC);
	СтруктураФайла.РазмерDOCФайла = ФайлНаДиске.Размер();

	Если Не ЗначениеЗаполнено(СтруктураФайла.УниверсальноеВремяИзмененияWordФайла) Тогда
		СтруктураФайла.УниверсальноеВремяИзмененияWordФайла = ФайлНаДиске.ПолучитьУниверсальноеВремяИзменения();
	КонецЕсли;

	ФайлНаДиске = Неопределено;
	
	//УдалитьФайлы(ПолныйПутьФайла);
	//УдалитьФайлы(ПолныйПутьФайлаDOC);
	//
	//УдалитьФайлы(ПутьКаталогаКартинок, ПолучитьМаскуВсеФайлы());
	//УдалитьФайлы(ПутьКаталогаКартинок);
	//
	//УдалитьФайлы(ПутьКаталога, ПолучитьМаскуВсеФайлы());
	//УдалитьФайлы(ПутьКаталога);

КонецПроцедуры	

// Определяет схему ссылки
Функция ОпределитьСхемуСсылки(Href)

	Если СтрНачинаетсяС(Href, "openfile:") Тогда

		Возврат "openfile:";

	Иначе

		Возврат "";

	КонецЕсли;

КонецФункции

// Открывает ссылку в HTML образе.
//
Процедура ОткрытьСсылку(Href, Element, HTMLДокумент = Неопределено, ФайлHTML,
	УникальныйИдентификатор) Экспорт

	ВыбраннаяСсылка = Неопределено;

	Если Href <> Неопределено Тогда
		// Если у данных события заполнено свойство Href - будем считать что переход будет по этой ссылке.
		ВыбраннаяСсылка = Href;
	Иначе
		Попытка
			// Если у элемента события заполнено свойство Href и элемент AREA - будем считать что переход будет по этой ссылке.
			Если ВРег(Element.tagName) = "AREA" Тогда
				ВыбраннаяСсылка = Element.Href;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;

	Если ПустаяСтрока(ВыбраннаяСсылка) Тогда
		Возврат;
	КонецЕсли;

	СхемаСсылки = ОпределитьСхемуСсылки(ВыбраннаяСсылка);

	Если СхемаСсылки = "openfile:" Тогда

		СтрокаEmz = ".emz";

		ПозицияEmz = СтрНайти(ВыбраннаяСсылка, СтрокаEmz);
		Если ПозицияEmz = 0 Тогда
			Возврат;
		КонецЕсли;
		ИмяБезРасширения = Сред(ВыбраннаяСсылка, СтрДлина(СхемаСсылки) + 1, ПозицияEmz - 1
			- СтрДлина(СхемаСсылки));
		СсылкаФайлаКартинки = СогласованиеВРежимеЗамечанийСервер.ПолучитьСсылкуНаКартинку(ФайлHTML,
			ИмяБезРасширения);
		Если ЗначениеЗаполнено(СсылкаФайлаКартинки) Тогда

			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
				СсылкаФайлаКартинки, Неопределено, УникальныйИдентификатор, Неопределено);

			КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);

		КонецЕсли;

	Иначе

		НавигационнаяСсылкаПоля = Сред(ВыбраннаяСсылка, 7);
		ПерейтиПоНавигационнойСсылке(НавигационнаяСсылкаПоля);

	КонецЕсли;

КонецПроцедуры

Функция СравнитьWordИПолучитьHTML(ПутьКФайлу1, ПутьКФайлу2, ФайлСсылка, ФайлHTML, ВладелецФайла,
	Наименование, Расширение, УникальныйИдентификатор) Экспорт

	СтруктураФайла 
		= Новый Структура("ФайлСсылка, ФайлHTMLСсылка, Владелец, Наименование, Расширение, АдресВременногоХранилищаФайлаHTML, РазмерHTMLФайла");

	СтруктураФайла.ФайлСсылка = ФайлСсылка;
	СтруктураФайла.ФайлHTMLСсылка = ФайлHTML;
	СтруктураФайла.Владелец = ВладелецФайла;
	СтруктураФайла.Наименование = Наименование;
	СтруктураФайла.Расширение = Расширение;

	СтруктураФайла.Вставить("Картинки", Новый Массив);

	ДопустимаяДлинаИмениФайла = 50;
	ИмяБезРасширенияУрезанное = СтруктураФайла.Наименование;

	Если СтрДлина(ИмяБезРасширенияУрезанное) > ДопустимаяДлинаИмениФайла Тогда
		ИмяБезРасширенияУрезанное = Лев(ИмяБезРасширенияУрезанное, ДопустимаяДлинаИмениФайла);
		ИмяБезРасширенияУрезанное = СокрЛП(ИмяБезРасширенияУрезанное);
	КонецЕсли;

	ПутьКаталога = КаталогВременныхФайлов();
	УникИд = Новый УникальныйИдентификатор;
	ПутьКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКаталога);
	ПутьКаталога = ПутьКаталога + Строка(УникИд);
	ПутьКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКаталога);
	СоздатьКаталог(ПутьКаталога);

	ИмяФайлаHTML = ИмяБезРасширенияУрезанное + ".html";
	ПолныйПутьФайлаHTML = ПутьКаталога + ИмяФайлаHTML;

	WordApp = Неопределено;
#Если ТонкийКлиент Тогда
		WordApp = Новый COMОбъект("Word.Application");
		WordApp.WordBasic.DisableAutoMacros(1);
#КонецЕсли

	Документ1 = WordApp.Documents.Open(ПутьКФайлу1);
	
	// MergeTarget:=wdMergeTargetCurrent, DetectFormatChanges:=False, UseFormattingFrom:=wdFormattingFromCurrent
	Документ1.Merge(ПутьКФайлу2, 1, // 1 wdMergeTargetCurrent

		0, 0);

	WordApp.Visible = 1;
	WordApp.Activate();

	Документ1.WebOptions.Encoding = 1251;//msoEncodingCyrillic
	// wdFormatHTML  8
	Документ1.SaveAs(ПолныйПутьФайлаHTML, 8);
	Документ1.Close(0); // 0 - wdDoNotSaveChanges

	WordApp.Quit();
	WordApp = Неопределено;

	СконвертироватьHtmlВUtf8(ПолныйПутьФайлаHTML);

	ИмяПодКаталогаКартинок = ИмяБезРасширенияУрезанное;
	ПутьКаталогаКартинок = ПутьКаталога + ИмяПодКаталогаКартинок;
	
	ФайлКаталога = Новый Файл(ПутьКаталогаКартинок);
	Если Не ФайлКаталога.Существует() Тогда
		
		ИмяПодКаталогаКартинок = ИмяБезРасширенияУрезанное + ".files";
		ПутьКаталогаКартинок = ПутьКаталога + ИмяПодКаталогаКартинок;
		
	КонецЕсли;	
	
	МассивКартинок = ПолучитьФайлыКартинокНаДиске(ПутьКаталогаКартинок, СтруктураФайла.Владелец);

	ТекстПояснения = СтрШаблон(НСтр("ru = 'Выполняется передача на сервер файла ""%1"".
									|Пожалуйста, подождите...'"), ИмяФайлаHTML);
	Состояние(ТекстПояснения);

	ПомещаемыеФайлы = Новый Массив;
	Описание = Новый ОписаниеПередаваемогоФайла(ПолныйПутьФайлаHTML, "");
	ПомещаемыеФайлы.Добавить(Описание);

	ПомещенныеФайлы = Новый Массив;
	ФайлыПомещены = ПоместитьФайлы(
		ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, //Интерактивно

		УникальныйИдентификатор);

	Если ПомещенныеФайлы.Количество() = 1 Тогда
		СтруктураФайла.АдресВременногоХранилищаФайлаHTML = ПомещенныеФайлы[0].Хранение;
	КонецЕсли;

	ФайлНаДиске = Новый Файл(ПолныйПутьФайлаHTML);
	СтруктураФайла.РазмерHTMLФайла = ФайлНаДиске.Размер();
	ФайлНаДиске = Неопределено;

	УдалитьФайлы(ПолныйПутьФайлаHTML);

	СтруктураФайла.Вставить("Картинки", Новый Массив);

	Для Каждого ФайлКартинки Из МассивКартинок Цикл

		РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(
			ФайлКартинки.Расширение);

		СтруктураКартинки = Новый Структура("Имя, Расширение, АдресВременногоХранилища, ИдентификаторВложения, Размер",
			ФайлКартинки.ИмяБезРасширения, РасширениеБезТочки, "", "", ФайлКартинки.Размер());

		ИдентификаторВложения 
			= СтрЗаменить(ИмяПодКаталогаКартинок, " ", "%20") + "/" + ФайлКартинки.Имя;
		СтруктураКартинки.ИдентификаторВложения = ИдентификаторВложения;

		ПомещаемыеФайлы = Новый Массив;
		Описание = Новый ОписаниеПередаваемогоФайла(ФайлКартинки.ПолноеИмя, "");
		ПомещаемыеФайлы.Добавить(Описание);

		ПомещенныеФайлы = Новый Массив;
		ФайлыПомещены = ПоместитьФайлы(
			ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, //Интерактивно

			УникальныйИдентификатор);

		Если ПомещенныеФайлы.Количество() = 1 Тогда
			СтруктураКартинки.АдресВременногоХранилища = ПомещенныеФайлы[0].Хранение;
		КонецЕсли;

		СтруктураФайла.Картинки.Добавить(СтруктураКартинки);

	КонецЦикла;

	Состояние();

	Возврат СтруктураФайла;

КонецФункции		

// Показывает сравнение в Word
Процедура ПоказатьОтличияОтПредыдущего(Документ, СвязанныйДокумент, УникальныйИдентификатор) Экспорт

	Версия1 = Неопределено;
	Версия2 = Неопределено;
	СогласованиеВРежимеЗамечанийСервер.ПолучитьВерсии(Документ, СвязанныйДокумент, Версия1, Версия2);

	Если Не ЗначениеЗаполнено(Версия1) Или Не ЗначениеЗаполнено(Версия2) Тогда
		Возврат;
	КонецЕсли;

	СпособСравненияВерсийФайлов = "MicrosoftOfficeWord";

#Если Не ВебКлиент Тогда

	ДанныеФайла1 = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Неопределено, Версия1,
		УникальныйИдентификатор);
	ДанныеФайла2 = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Неопределено, Версия2,
		УникальныйИдентификатор);

	ТекстСостояния = СтрШаблон(
			НСтр("ru = 'Выполняется сравнение версий файла ""%1""...'"), ДанныеФайла1.Ссылка);
	Состояние(ТекстСостояния);

	ПолноеИмяФайла1 = "";
	ПолноеИмяФайла2 = "";

	ПараметрыВыполнения = Новый Структура("ДанныеФайла1, ДанныеФайла2, СпособСравненияВерсийФайлов, ПолноеИмяФайла1, ПолноеИмяФайла2, УникальныйИдентификатор",
		ДанныеФайла1, ДанныеФайла2, СпособСравненияВерсийФайлов, ПолноеИмяФайла1, ПолноеИмяФайла2,
		УникальныйИдентификатор);
	Обработчик = Новый ОписаниеОповещения("ПослеПолучитьФайлВерсииВРабочийКаталог1", ЭтотОбъект,
		ПараметрыВыполнения);
	РаботаСФайламиКлиент.ПолучитьФайлВерсииВРабочийКаталог(Обработчик,
		ПараметрыВыполнения.ДанныеФайла1, ПараметрыВыполнения.ПолноеИмяФайла1,
		УникальныйИдентификатор);

#КонецЕсли

КонецПроцедуры	

// Продолжение процедуры (см. выше).
Процедура ПослеПолучитьФайлВерсииВРабочийКаталог1(Результат, ПараметрыВыполнения) Экспорт

	Если Результат.ФайлПолучен Тогда
		ПараметрыВыполнения.ПолноеИмяФайла1 = Результат.ПолноеИмяФайла;
		Обработчик = Новый ОписаниеОповещения("ПослеПолучитьФайлВерсииВРабочийКаталог2",
			ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиКлиент.ПолучитьФайлВерсииВРабочийКаталог(Обработчик,
			ПараметрыВыполнения.ДанныеФайла2, ПараметрыВыполнения.ПолноеИмяФайла2,
			ПараметрыВыполнения.УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПослеПолучитьФайлВерсииВРабочийКаталог2(Результат, ПараметрыВыполнения) Экспорт

	Если Результат.ФайлПолучен Тогда

		ПараметрыВыполнения.ПолноеИмяФайла2 = Результат.ПолноеИмяФайла;

		ПутьКФайлу1 = "";
		ПутьКФайлу2 = "";

		Если ПараметрыВыполнения.ДанныеФайла1.НомерВерсии
			< ПараметрыВыполнения.ДанныеФайла2.НомерВерсии Тогда
			ПутьКФайлу1 = ПараметрыВыполнения.ПолноеИмяФайла1;
			ПутьКФайлу2 = ПараметрыВыполнения.ПолноеИмяФайла2;
		Иначе
			ПутьКФайлу1 = ПараметрыВыполнения.ПолноеИмяФайла2;
			ПутьКФайлу2 = ПараметрыВыполнения.ПолноеИмяФайла1;
		КонецЕсли;

		РаботаСФайламиКлиент.СравнитьФайлы(
			ПутьКФайлу1, ПутьКФайлу2, ПараметрыВыполнения.СпособСравненияВерсийФайлов);

	КонецЕсли;

	Состояние();

КонецПроцедуры

// Сравнивает текущую версию файла, с версией файла с предыдущей итерации бизнес-процесса.
//
// Параметры:
//  СсылкаНаФайл         - СправочникСсылка.Файлы           - Файл, отличия которого нужно показать.
//  Процесс              - БизнесПроцессСсылка.Согласование - Бизнес-процесс, по которому определяется предыдущая итерация.
//  НомерТекущейИтерации - Число                            - Номер текущей итерации бизнес-процесса.
//  ИдентификаторФормы   - УникальныйИдентификатор          - Идентификатор формы, для получения файлов во временное хранилище.
//
Процедура ПоказатьОтличияФайлаОтПредыдущейИтерации(СсылкаНаФайл, Процесс, НомерТекущейИтерации,
	ИдентификаторФормы) Экспорт

	Если Не ОбщегоНазначенияКлиентСервер.ЭтоWindowsКлиент()
		Или ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		ВызватьИсключение НСтр(
			"ru = 'Данная команда поддерживается только в тонком клиенте под управлением ОС Windows.'");
	КонецЕсли;

	Если НомерТекущейИтерации < 2 Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Некорректный номер текущей итерации: %1'"),
			НомерТекущейИтерации);
	КонецЕсли;

	ДанныеКоманды = СогласованиеВРежимеЗамечанийСервер.ДанныеКомандыПоказатьОтличияФайлаОтПредыдущейИтерации(
			СсылкаНаФайл, Процесс, НомерТекущейИтерации);
	Если Не ЗначениеЗаполнено(ДанныеКоманды.ПредыдущаяВерсияФайла) Тогда
		ВызватьИсключение СтрШаблон(НСтр(
			"ru = 'Не удалось определить предыдущую версию файла %1'"), СсылкаНаФайл);
	КонецЕсли;

	РаботаСФайламиКлиент.СравнитьВерсииФайлов(
		ДанныеКоманды.ПредыдущаяВерсияФайла, ДанныеКоманды.ТекущаяВерсияФайла,
		ДанныеКоманды.СпособСравненияВерсийФайлов, ИдентификаторФормы);

КонецПроцедуры
	
// Преобразует doc docx файлы в HTML с помощью Word
// МассивФайловПараллельногоСогласования - массив 
//   структур (ФайлСсылка, Владелец, Наименование, Расширение, АдресВременногоХранилищаФайлаDoc, АдресВременногоХранилищаФайлаHTML, РазмерHTMLФайла) 
Процедура ОбработатьОдинФайл_ДобавлениеКомментария(СтруктураФайла, УникальныйИдентификатор,
	БылаОшибкаWord = Ложь, ТекстОшибки = "", ВсеПравки, СпособСогласованияВРежимеЗамечаний = Неопределено,
	ТипОчереди = Неопределено,
	ЧислоСтраницДляПредпросмотраПорции) Экспорт
	
	Если Не ОбщегоНазначенияКлиент.ЭтоWindowsКлиент() Тогда
		Возврат;
	КонецЕсли;	
	
	ИспользоватьOpenNoRepairDialog = Истина;   
	
	МассивПутейФайловHTML = Новый Массив;
	СтруктураФайла.Вставить("МассивПутейФайловHTML", МассивПутейФайловHTML);

	СтруктураФайла.Вставить("ПолныйПутьФайла", "");
	СтруктураФайла.Вставить("ПолныйПутьФайлаHTML", "");
	СтруктураФайла.Вставить("ИмяФайла", "");
	СтруктураФайла.Вставить("ИмяФайлаHTML", "");
	СтруктураФайла.Вставить("ПутьКаталога", "");
	СтруктураФайла.Вставить("УниверсальноеВремяИзмененияWordФайла", ТекущаяДата());

	ТипОчереди = ПредопределенноеЗначение("Перечисление.ТипОчередиПодготовкиКСогласованию.Быстрая");

	wdStatisticPages = 2;

	ПороговоеЧислоСтраницФайлаСогласованияДляДолгойОчереди = СогласованиеВРежимеЗамечанийКлиентСерверПереопределяемый.ПороговоеЧислоСтраницФайлаСогласованияДляДолгойОчереди();
	ПредельноеЧислоСтраницФайлаСогласованияДляHtmlОбраза  = СогласованиеВРежимеЗамечанийКлиентСерверПереопределяемый.ПредельноеЧислоСтраницФайлаСогласованияДляHtmlОбраза();
	
	МассивПравок = ВсеПравки.Получить(СтруктураФайла.ФайлСсылка);
	Если МассивПравок = Неопределено Или МассивПравок.Количество() = 0 Тогда
		Возврат; // по этому файлу ничего не надо делать
	КонецЕсли;

	ПутьКаталога = КаталогВременныхФайлов();
	УникИд = Новый УникальныйИдентификатор;
	ПутьКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКаталога);
	ПутьКаталога = ПутьКаталога + Строка(УникИд);
	ПутьКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКаталога);
	СоздатьКаталог(ПутьКаталога);

	ДопустимаяДлинаИмениФайла = 50;
	ИмяБезРасширенияУрезанное = СтруктураФайла.Наименование;

	Если СтрДлина(ИмяБезРасширенияУрезанное) > ДопустимаяДлинаИмениФайла Тогда
		ИмяБезРасширенияУрезанное = Лев(ИмяБезРасширенияУрезанное, ДопустимаяДлинаИмениФайла);
		ИмяБезРасширенияУрезанное = СокрЛП(ИмяБезРасширенияУрезанное);
	КонецЕсли;
	
	ИмяДляПоказа = СтруктураФайла.Наименование + "." + СтруктураФайла.Расширение;
	
	ИмяПростое = "nfile";
	ИмяБезРасширенияУрезанное = ИмяПростое;
	ИмяФайлаHTML = ИмяПростое + ".htm";
	ПолныйПутьФайлаHTML = ПутьКаталога + ИмяФайлаHTML;
	МаскаФайлаДляOpenOffice = ИмяПростое + "_htm_";

	ПолныйПутьФайла = ПутьКаталога + ИмяБезРасширенияУрезанное + "." + СтруктураФайла.Расширение;
	ИмяФайла = ИмяБезРасширенияУрезанное + "." + СтруктураФайла.Расширение;
	АдресФайла = СтруктураФайла.АдресВременногоХранилищаФайлаDoc;

	ТекстПояснения = СтрШаблон(НСтр("ru = 'Выполняется получение с сервера файла ""%1"".
									|Пожалуйста, подождите...'"), ИмяДляПоказа);
	Состояние(ТекстПояснения);

	Если Не ПолучитьФайл(АдресФайла, ПолныйПутьФайла, Ложь) Тогда
		Возврат;
	КонецЕсли;

	ТекстПояснения = СтрШаблон(НСтр("ru = 'Выполняется преобразование файла ""%1"" (добавление комментариев).
									|Пожалуйста, подождите...'"), ИмяДляПоказа);
	Состояние(ТекстПояснения);

	WordApp = Неопределено;
	
	Excel = Неопределено;  
	ЭтоExcel = Ложь;        
	
	Builder = Неопределено; 
	Document = Неопределено;
	Документ1 = Неопределено;
	
	ПутьКФайлу1 = "";
	НовыйПутьКФайлу2 = "";

	ЧтоМеняем = "";

	Попытка

		Если СпособСогласованияВРежимеЗамечаний 
			= ПредопределенноеЗначение("Перечисление.СпособыСогласованияВРежимеЗамечаний.MicrosoftOfficeWord") 
			Или (СпособСогласованияВРежимеЗамечаний 
			= ПредопределенноеЗначение("Перечисление.СпособыСогласованияВРежимеЗамечаний.OpenOfficeOrgWriter") 
				И НРег(СтруктураФайла.Расширение) = "docx") Тогда   
			
			Если СтруктураФайла.Расширение = "doc" Или СтруктураФайла.Расширение = "docx" Или СтруктураФайла.Расширение = "odt" Тогда

				WordApp = Неопределено;
	#Если ТонкийКлиент Тогда
					WordApp = Новый COMОбъект("Word.Application");
					WordApp.WordBasic.DisableAutoMacros(1);
	#КонецЕсли

				Если ИспользоватьOpenNoRepairDialog = Ложь Тогда
					Документ1 = WordApp.Documents.Open(ПолныйПутьФайла);
				Иначе
					OpenAndRepair = Истина; // 13-й аргумент
					Документ1 = WordApp.Documents.OpenNoRepairDialog(
						ПолныйПутьФайла, , , , , , , , , , , , OpenAndRepair);
				КонецЕсли;

				WordApp.Visible = 1;
				WordApp.Activate();

				WordApp.ActiveWindow.ActivePane.View.Type = 3; // wdPrintView = 3
				ЧислоСтраниц = Документ1.ComputeStatistics(wdStatisticPages);

				Если ЧислоСтраниц > ПороговоеЧислоСтраницФайлаСогласованияДляДолгойОчереди Тогда
					ТипОчереди = ПредопределенноеЗначение(
						"Перечисление.ТипОчередиПодготовкиКСогласованию.Долгая");
				КонецЕсли;	
				
				// "Автор, ВерсияHTML, ИдНачала, Дата, Замечание, ЧтоМеняем, НаЧтоМеняем, Номер, ПорядковыйНомер"
				Для Каждого СтруктПравки Из МассивПравок Цикл

					ПорядковыйНомер = СтруктПравки.ПорядковыйНомер;
					ЧтоМеняем = СтруктПравки.ЧтоМеняем;

					ТекстЗамены = СтруктПравки.Замечание;
					Если СтруктПравки.ТипЗамечания = ПредопределенноеЗначение(
						"Перечисление.ТипыЗамечаний.Комментарий") Тогда
						ТекстЗамены = СтруктПравки.Комментарий;
					КонецЕсли;

					Если ТекстЗамены = "" Тогда
						ТекстЗамены = СтруктПравки.НаЧтоМеняем;
					КонецЕсли;	
					
					//"DocComment1.15 Фролов И.П. 27.07.2018: текст замечания"
					ТекстКомментария = СтрШаблон("DocComment_%1 %2 %3 (%4): %5", СтруктПравки.Номер,
						СтруктПравки.Автор, Формат(СтруктПравки.Дата, "ДФ=dd.MM.yyyy"),
						СтруктПравки.ТипЗамечания, ТекстЗамены);
					
					// тут вставка комментариев

					myRange = Документ1.Content;

					Нашли = Ложь;
					
					// Истина - forward - поиск вперед
					Для пер = 1 По ПорядковыйНомер Цикл
						
						//после ЧтоМеняем -  Истина - это MatchCase
						Нашли = myRange.Find.Execute(ЧтоМеняем, Истина, , , , , Истина);
					КонецЦикла;

					Если Нашли = Истина Тогда
						myRange.Collapse(); // start, раз не указано
						
						Попытка
							Документ1.Comments.Add(myRange, ТекстКомментария);
						Исключение
							// возможно "Элемент управление содержимым"
											
							ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + " " + ПутьКФайлу1
								+ " ЧтоМеняем= -" + ЧтоМеняем + "-";
							
							СогласованиеВРежимеЗамечанийСервер.ЗаписьЖурналаРегистрацииСервер(ТекстОшибки);
						КонецПопытки;					
						
					Иначе

						ТекстОшибки = СтрШаблон(
							НСтр("ru = 'Не нашли в Word.  ЧтоМеняем = %1 . ПорядковыйНомер = %2'"),
							ЧтоМеняем, ПорядковыйНомер);
						СогласованиеВРежимеЗамечанийСервер.ЗаписьЖурналаРегистрацииСервер(ТекстОшибки);

					КонецЕсли;

				КонецЦикла;
				
		#Если Не ВебКлиент Тогда
				НовыйПутьКФайлу2 = ПолучитьИмяВременногоФайла(СтруктураФайла.Расширение);
		#КонецЕсли
		
				// тут сохраним сам doc файл
				
				// надо записать, уже без защиты Ворд
				ФорматСохранения = 0;// wdFormatDocument  0
				Если НРег(СтруктураФайла.Расширение) = "docx" Тогда
					ФорматСохранения = 16; // wdFormatDocumentDefault 16
				ИначеЕсли НРег(СтруктураФайла.Расширение) = "odt" Тогда
					ФорматСохранения = 23; // wdFormatOpenDocumentText 23
				КонецЕсли;

				Документ1.SaveAs(НовыйПутьКФайлу2, ФорматСохранения);
				ПолныйПутьФайла = НовыйПутьКФайлу2;
				
				Если ЧислоСтраниц > ЧислоСтраницДляПредпросмотраПорции
					И ЧислоСтраницДляПредпросмотраПорции <> 0 Тогда      
					
						// порционно   
						
						// тут сохраним html файл(ы)
					
						ПолныйПутьФайлаHTML = "";
					
						WordApp.Visible = 1;
						WordApp.Activate();
			
						Документ1.WebOptions.Encoding = 1251;//msoEncodingCyrillic
						
						
						ЧислоСтраницДляПредпросмотраПорции = ЧислоСтраницДляПредпросмотраПорции;
						СтраницДробно = ЧислоСтраниц / ЧислоСтраницДляПредпросмотраПорции;
						СтраницЦелое = Цел(СтраницДробно);
						
						ЧислоПорций = СтраницЦелое;
						Если СтраницДробно - СтраницЦелое <> 0 Тогда
							ЧислоПорций = ЧислоПорций + 1;
						КонецЕсли;	
						
						ИмяФайлаСПутемHTML = "";
						
						ВременнаяПапка = ПутьКаталога;  
						
						Для НомерПорции = 0 По ЧислоПорций -1 Цикл
							
							ИмяФайлаСПутемHTMLТекущее = ВременнаяПапка + "doc" + Строка(НомерПорции) + ".htm";  
							
							НомерСтраницыНачало = НомерПорции * ЧислоСтраницДляПредпросмотраПорции + 1;
							
							ЭтоПоследняяСтраница = Ложь;
							Если НомерПорции = ЧислоПорций -1 Тогда
								НомерСтраницыКонец  = ЧислоСтраниц + 1;
								ЭтоПоследняяСтраница = Истина;
							Иначе
								НомерСтраницыКонец  = (НомерПорции +1)* ЧислоСтраницДляПредпросмотраПорции + 1;
							КонецЕсли;	
							
							// wdGoToPage 1.  wdGoToAbsolute 1.   1 - номер страницы
							Range1 = Документ1.GoTo(1, 1, НомерСтраницыНачало);
							Range2 = Документ1.GoTo(1, 1, НомерСтраницыКонец);
							
							Если ЭтоПоследняяСтраница Тогда
								Range2.End = Документ1.Content.End;
							КонецЕсли;	
							
							RangeAll = Документ1.Range(Range1.Start, Range2.End);
							RangeAll.Copy();
							
							tmpDoc = WordApp.Documents.Add(,,,Ложь); // видимость = Ложь
							tmpDoc.Range().Paste();
							
							tmpDoc.SaveAs(ИмяФайлаСПутемHTMLТекущее , 10); // wdFormatFilteredHTML = 10	
							tmpDoc.Close(); 	
							
							СконвертироватьHtmlВUtf8ПлюсКартинки(ИмяФайлаСПутемHTMLТекущее, ПутьКаталога);
					
							МассивПутейФайловHTML.Добавить(ИмяФайлаСПутемHTMLТекущее);
						
						КонецЦикла;
						
						Документ1.Paragraphs(1).Range.Copy(); // чтобы в буфере не было много
						
						Документ1.Close(0);  // 0 закрыть без сохранения
			
						WordApp.Quit();
						WordApp = Неопределено;
					
				Иначе	
					
					// тут сохраним html файл(ы)
					
					Документ1.WebOptions.Encoding = 1251;//msoEncodingCyrillic
					// wdFormatHTML  8
					Документ1.SaveAs(ПолныйПутьФайлаHTML, 8);
					Документ1.Close(0);  // 0 -закрыть без сохранения

					WordApp.Quit();
					WordApp = Неопределено;

					СконвертироватьHtmlВUtf8ПлюсКартинки(ПолныйПутьФайлаHTML, ПутьКаталога);
					
				КонецЕсли;
				
			ИначеЕсли СтруктураФайла.Расширение = "xls" Или СтруктураФайла.Расширение = "xlsx" Или СтруктураФайла.Расширение = "ods" Тогда
				
				// Excel
				Excel = Неопределено;
			#Если ТонкийКлиент Тогда		
				Excel = Новый COMОбъект("Excel.Application"); 
			#КонецЕсли	
			
				Excel.AutomationSecurity = 3; // msoAutomationSecurityForceDisable = 3
				ActiveWorkbook = Excel.WorkBooks.Open(ПолныйПутьФайла);      
				Excel.Visible = Истина;
				
				
				// вставим комментарии
				// "Автор, ВерсияHTML, ИдНачала, Дата, Замечание, ЧтоМеняем, НаЧтоМеняем, Номер, ПорядковыйНомер"
				Для Каждого СтруктПравки Из МассивПравок Цикл

					ПорядковыйНомер = СтруктПравки.ПорядковыйНомер;
					ЧтоМеняем = СтруктПравки.ЧтоМеняем;

					ТекстЗамены = СтруктПравки.Замечание;
					Если СтруктПравки.ТипЗамечания = ПредопределенноеЗначение(
						"Перечисление.ТипыЗамечаний.Комментарий") Тогда
						ТекстЗамены = СтруктПравки.Комментарий;
					КонецЕсли;

					Если ТекстЗамены = "" Тогда
						ТекстЗамены = СтруктПравки.НаЧтоМеняем;
					КонецЕсли;	
					
					//"DocComment1.15 Фролов И.П. 27.07.2018: текст замечания"
					ТекстКомментария = СтрШаблон("DocComment_%1 %2 %3 (%4): %5", СтруктПравки.Номер,
						СтруктПравки.Автор, Формат(СтруктПравки.Дата, "ДФ=dd.MM.yyyy"),
						СтруктПравки.ТипЗамечания, ТекстЗамены);
					
					// тут вставка комментариев      
					
					ТекНомер = 0;
					ПолныйВыход = Ложь;
					
					Для Каждого Лист Из ActiveWorkbook.Worksheets Цикл
						
						Ячейки = Лист.Cells(1, 1);
						
						Пока Истина Цикл
					
					        Ячейки = Лист.Cells.Find(ЧтоМеняем, 
					            Ячейки, //sh.Cells(1, 1), 
					            -4163, //xlValues, 
					            2, //xlPart, 
					            1, //xlByRows, 
					            1, //xlNext,
					            False, 
					            False);
									
							Если Ячейки <> Неопределено Тогда
									
								ТекНомер = ТекНомер + 1; 
								
								Если ТекНомер = ПорядковыйНомер Тогда
									
									ПолныйВыход = Истина;
									
									Попытка
																				
										// добавим комментарий					
										Коммент = Ячейки.AddComment("");         
										Коммент.Text(ТекстКомментария);  
										Коммент.Visible = Истина;
										
										Коммент.Shape.Width  = 250;
										Коммент.Shape.Height = 70;

									Исключение
														
										ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + " " + ПутьКФайлу1
											+ " ЧтоМеняем= -" + ЧтоМеняем + "-";
										
										СогласованиеВРежимеЗамечанийСервер.ЗаписьЖурналаРегистрацииСервер(ТекстОшибки);
									КонецПопытки;					
									
									Прервать;
									
								КонецЕсли;      
								
							Иначе	 
								
								Прервать; // уходим с этого листа
								
							КонецЕсли;	
						
						КонецЦикла;	
							
						
						Если ПолныйВыход Тогда
							
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;				
					

				КонецЦикла;
				
				ФорматСохранения = 51;  //Книга Open XML 	*.xlsx    
				Если НРег(СтруктураФайла.Расширение) = "xls" Тогда
					ФорматСохранения = -4143; // xlWorkbookNormal
				ИначеЕсли НРег(СтруктураФайла.Расширение) = "ods" Тогда
					ФорматСохранения = 60; // xlOpenDocumentSpreadsheet
				КонецЕсли;
				
				#Если Не ВебКлиент Тогда
						НовыйПутьКФайлу2 = ПолучитьИмяВременногоФайла(СтруктураФайла.Расширение);
				#КонецЕсли
				
				ActiveWorkbook.SaveAs(НовыйПутьКФайлу2, ФорматСохранения);
				ПолныйПутьФайла = НовыйПутьКФайлу2;

				// сохраним в html.
				ВременнаяПапка = ПутьКаталога;
				ОбзорФайловКлиент.HtmlКакФайлИзXls(ActiveWorkbook, ВременнаяПапка, ПолныйПутьФайлаHTML);
				
				СконвертироватьHtmlВUtf8ПлюсКартинки(ПолныйПутьФайлаHTML, ПутьКаталога);
				
				Excel.Quit();
				Excel = Неопределено;           
			
			КонецЕсли;
		
		ИначеЕсли СпособСогласованияВРежимеЗамечаний 
		= ПредопределенноеЗначение("Перечисление.СпособыСогласованияВРежимеЗамечаний.OpenOfficeOrgWriter") Тогда
			
			ОбъектServiceManager = Неопределено;
			ИнстансDesktop = Неопределено;
			ПараметрыДокумента = Неопределено;
			
			
#Если ТонкийКлиент Тогда		
				ОбъектServiceManager = Новый COMОбъект("com.sun.star.ServiceManager");
			
				ИнстансDesktop = ОбъектServiceManager.createInstance("com.sun.star.frame.Desktop");
	
				// Параметры открытия: отключение исполнения макросов.
				ПараметрыДокумента = Новый COMSafeArray("VT_VARIANT", 1);
#КонецЕсли	
				
				РежимЗапуска = ПрисвоитьЗначениеСвойству(ОбъектServiceManager,
					"MacroExecutionMode",
					0); // const short NEVER_EXECUTE = 0
				ПараметрыДокумента.SetValue(0, РежимЗапуска);
			
				// Открыть документ OpenOffice.
				Документ1 = ИнстансDesktop.loadComponentFromURL(ПреобразоватьВURL(ПолныйПутьФайла), 
					"_blank", 0, ПараметрыДокумента);
				
				ЧислоСтраниц = Документ1.CurrentController.PageCount;
				
				Если ЧислоСтраниц > ПороговоеЧислоСтраницФайлаСогласованияДляДолгойОчереди Тогда
					ТипОчереди = ПредопределенноеЗначение(
						"Перечисление.ТипОчередиПодготовкиКСогласованию.Долгая");
				КонецЕсли;	
								
				Для Каждого СтруктПравки Из МассивПравок Цикл
				// вставим комментарий
				
					ПорядковыйНомер = СтруктПравки.ПорядковыйНомер;
					ЧтоМеняем = СтруктПравки.ЧтоМеняем;

					ТекстЗамены = СтруктПравки.Замечание;
					Если СтруктПравки.ТипЗамечания = ПредопределенноеЗначение(
						"Перечисление.ТипыЗамечаний.Комментарий") Тогда
						ТекстЗамены = СтруктПравки.Комментарий;
					КонецЕсли;

					Если ТекстЗамены = "" Тогда
						ТекстЗамены = СтруктПравки.НаЧтоМеняем;
					КонецЕсли;	
					
					// тут вставка комментариев
					// сперва найдем куда вставить    - потом еще и цикл сделать
					
					oSearch = Документ1.createSearchDescriptor();
					oSearch.SearchString = ЧтоМеняем;
					
					oFound = Документ1.findFirst(oSearch);
					Если oFound <> Неопределено Тогда
						ПозицияНачалаОбласти = oFound; // oFound.Start
						
						Если ПорядковыйНомер >= 2  Тогда
							
							Для пер = 2 По ПорядковыйНомер Цикл
								
								oFound = Документ1.findNext(oFound.End, oSearch);
								ПозицияНачалаОбласти = oFound; // oFound.Start
								
							КонецЦикла;
							
						КонецЕсли;
						
						//"DocComment1.15 Фролов И.П. 27.07.2012: текст замечания"
						ТекстКомментария = СтрШаблон("DocComment_%1 %2 %3 (%4): %5", СтруктПравки.Номер,
							СтруктПравки.Автор, Формат(СтруктПравки.Дата, "ДФ=dd.MM.yyyy"),
							СтруктПравки.ТипЗамечания, ТекстЗамены);
					
					    oCurs = Документ1.CurrentController.getViewCursor();
					    oAnnot = Документ1.createInstance("com.sun.star.text.textfield.Annotation");
						
				        oAnnot.Content = ТекстКомментария;
	
					    oAnnot.attach(ПозицияНачалаОбласти); //  oCurs.Start Insert at cursor start
				    КонецЕсли;
					
				КонецЦикла;
				
				// тут odt - ориг формат
#Если ТонкийКлиент Тогда
					ПараметрыСохранения = Новый COMSafeArray("VT_VARIANT", 1);
			
					ФорматСохранения = "writer8";// odt
					Если НРег(СтруктураФайла.Расширение) = "doc" Тогда
						ФорматСохранения = "MS Word 97"; // doc
					КонецЕсли;
			
					FilterName = ПрисвоитьЗначениеСвойству(ОбъектServiceManager,
						"FilterName",
						ФорматСохранения
						);
					ПараметрыСохранения.SetValue(0, FilterName);
				
					НовыйПутьКФайлу2 = ПолучитьИмяВременногоФайла(СтруктураФайла.Расширение);
					
					Документ1.storeToURL(ПреобразоватьВURL(НовыйПутьКФайлу2), ПараметрыСохранения);
					ПолныйПутьФайла = НовыйПутьКФайлу2;
					
					// запишем  - тут html
					
					ПараметрыСохранения = Новый COMSafeArray("VT_VARIANT", 1);
			
					FilterName = ПрисвоитьЗначениеСвойству(ОбъектServiceManager,
						"FilterName",
						"HTML (StarWriter)");
					ПараметрыСохранения.SetValue(0, FilterName);
					
					Документ1.storeToURL(ПреобразоватьВURL(ПолныйПутьФайлаHTML), ПараметрыСохранения);
					
					Документ1.close(-1);        //Закрыть документ без сохранения
					
				 	Документ1     = Неопределено;
				    ИнстансDesktop     = Неопределено;	
				    ОбъектServiceManager = Неопределено;
				    
					СконвертироватьHtmlВUtf8ПлюсКартинки(ПолныйПутьФайлаHTML, ПутьКаталога);
					
#КонецЕсли

		ИначеЕсли СпособСогласованияВРежимеЗамечаний 
		= ПредопределенноеЗначение("Перечисление.СпособыСогласованияВРежимеЗамечаний.Р7Builder") Тогда
		
#Если ТонкийКлиент Тогда		
			Builder = Новый COMОбъект("R7.Builder");
			Builder.Initialize();
			Builder.OpenFile(ПолныйПутьФайла, "");   
			
			// хотим редактировать => значит нужен контект редактора
			ContextJS = Builder.GetContext();

			// область видимости переменных JS
			ContextScopeJS = ContextJS.CreateScope();

			// глобальная область видимости
			GlobalJS = ContextJS.GetGlobal();

			// апи редактора
			Api = GlobalJS.GetProperty("Api");     
			
			
			Document = Api.Call("GetDocument", , , , , , );
			
#КонецЕсли	                                         
		
			ЧислоСтраниц = 1; // временно
			
			Если ЧислоСтраниц > ПороговоеЧислоСтраницФайлаСогласованияДляДолгойОчереди Тогда
				ТипОчереди = ПредопределенноеЗначение(
					"Перечисление.ТипОчередиПодготовкиКСогласованию.Долгая");
			КонецЕсли;	
			
			// "Автор, ВерсияHTML, ИдНачала, Дата, Замечание, ЧтоМеняем, НаЧтоМеняем, Номер, ПорядковыйНомер"
			Для Каждого СтруктПравки Из МассивПравок Цикл

				ПорядковыйНомер = СтруктПравки.ПорядковыйНомер;
				ЧтоМеняем = СтруктПравки.ЧтоМеняем;

				ТекстЗамены = СтруктПравки.Замечание;
				Если СтруктПравки.ТипЗамечания = ПредопределенноеЗначение(
					"Перечисление.ТипыЗамечаний.Комментарий") Тогда
					ТекстЗамены = СтруктПравки.Комментарий;
				КонецЕсли;

				Если ТекстЗамены = "" Тогда
					ТекстЗамены = СтруктПравки.НаЧтоМеняем;
				КонецЕсли;	
				
				//"DocComment1.15 Фролов И.П. 27.07.2018: текст замечания"
				ТекстКомментария = СтрШаблон("DocComment_%1 %2 %3 (%4): %5", СтруктПравки.Номер,
					СтруктПравки.Автор, Формат(СтруктПравки.Дата, "ДФ=dd.MM.yyyy"),
					СтруктПравки.ТипЗамечания, ТекстЗамены);
				
				// тут вставка комментариев                   
				
				Ranges = Document.Call("Search", ЧтоМеняем, , , , , );
				RangesCount = ?(Ranges = 0, 0, Ranges.GetLength());

				Если RangesCount > 0 Тогда
				     FirstRange = Ranges.Get(0);
					 
					 Попытка
					     Comment = FirstRange.Call("AddComment", ТекстКомментария, Строка(СтруктПравки.Автор), , , , );
					     Comment = 0;
					     FirstRange = 0;
					 Исключение
						 
						ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + " " + ПутьКФайлу1
							+ " ЧтоМеняем= -" + ЧтоМеняем + "-";
						
						СогласованиеВРежимеЗамечанийСервер.ЗаписьЖурналаРегистрацииСервер(ТекстОшибки);
						 
					 КонецПопытки;
					 
				КонецЕсли;
				
			КонецЦикла;

	#Если Не ВебКлиент Тогда
			НовыйПутьКФайлу2 = ПолучитьИмяВременногоФайла(СтруктураФайла.Расширение);
	#КонецЕсли
			
			// надо записать, уже без защиты Ворд
			ФорматСохранения = СтруктураФайла.Расширение;
			
			Builder.SaveFile(ФорматСохранения, НовыйПутьКФайлу2);
			ПолныйПутьФайла = НовыйПутьКФайлу2;
			
			//Документ1.WebOptions.Encoding = 1251;//msoEncodingCyrillic
			Builder.SaveFile("html", ПолныйПутьФайлаHTML);
			
			Ranges = 0;
			Document = 0;
			Api = 0;

			GlobalJS = 0;

			ContextScopeJS = 0;
			ContextJS = 0; 
			
			Builder.CloseFile();
			Builder = Неопределено;

			//СконвертироватьHtmlВUtf8(ПолныйПутьФайлаHTML);      
			
		КонецЕсли;	

		
	Исключение

		БылаОшибкаWord = Истина;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + " " + ПутьКФайлу1
			+ " ЧтоМеняем= -" + ЧтоМеняем + "-";

		Если СпособСогласованияВРежимеЗамечаний 
		= ПредопределенноеЗначение("Перечисление.СпособыСогласованияВРежимеЗамечаний.MicrosoftOfficeWord") Тогда
				
			Если WordApp <> Неопределено Тогда
				WordApp.Quit();
			КонецЕсли;
			WordApp = Неопределено;
			
			Если Excel <> Неопределено Тогда				
				Excel.Quit();
			КонецЕсли;	
			Excel = Неопределено;           
			
			Если Builder <> Неопределено Тогда				
				Builder.CloseFile();
			КонецЕсли;	
			Builder = Неопределено;           
			
		КонецЕсли;

		Возврат;

	КонецПопытки;

	ФайлНаДиске = Новый Файл(ПолныйПутьФайла);
	СтруктураФайла.РазмерDOCФайла = ФайлНаДиске.Размер();
	СтруктураФайла.УниверсальноеВремяИзмененияWordФайла = ФайлНаДиске.ПолучитьУниверсальноеВремяИзменения();
	ФайлНаДиске = Неопределено;
	СтруктураФайла.Вставить("ПолныйПутьФайла", ПолныйПутьФайла);
	СтруктураФайла.Вставить("ПолныйПутьФайлаHTML", ПолныйПутьФайлаHTML);
	СтруктураФайла.Вставить("МассивПутейФайловHTML", МассивПутейФайловHTML);
	
	СтруктураФайла.Вставить("ИмяФайла", ИмяФайла);
	СтруктураФайла.Вставить("ИмяФайлаHTML", ИмяФайлаHTML);   
	СтруктураФайла.Вставить("ПутьКаталога", ПутьКаталога);

КонецПроцедуры	

// Преобразует doc docx файлы в HTML с помощью Word
// МассивФайловПараллельногоСогласования - массив 
//   структур (ФайлСсылка, Владелец, Наименование, Расширение, АдресВременногоХранилищаФайлаDoc, АдресВременногоХранилищаФайлаHTML, РазмерHTMLФайла) 
Процедура ОбработатьМассивФайлов_УдалениеКомментария(МассивФайловПараллельногоСогласования,
	УникальныйИдентификатор, БылаОшибкаWord = Ложь, ТекстОшибки = "") Экспорт
	
	Для Каждого СтруктураФайла Из МассивФайловПараллельногоСогласования Цикл

		ПутьКаталога = КаталогВременныхФайлов();
		УникИд = Новый УникальныйИдентификатор;
		ПутьКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКаталога);
		ПутьКаталога = ПутьКаталога + Строка(УникИд);
		ПутьКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКаталога);
		СоздатьКаталог(ПутьКаталога);

		ДопустимаяДлинаИмениФайла = 50;
		ИмяБезРасширенияУрезанное = СтруктураФайла.Наименование;

		Если СтрДлина(ИмяБезРасширенияУрезанное) > ДопустимаяДлинаИмениФайла Тогда
			ИмяБезРасширенияУрезанное = Лев(ИмяБезРасширенияУрезанное, ДопустимаяДлинаИмениФайла);
			ИмяБезРасширенияУрезанное = СокрЛП(ИмяБезРасширенияУрезанное);
		КонецЕсли;            
		
		ИмяДляПоказа = СтруктураФайла.Наименование + "." + СтруктураФайла.Расширение;

		ПолныйПутьФайла = ПутьКаталога + ИмяБезРасширенияУрезанное + "." + СтруктураФайла.Расширение;
		ИмяФайла = ИмяБезРасширенияУрезанное + "." + СтруктураФайла.Расширение;
		АдресФайла = СтруктураФайла.АдресВременногоХранилищаФайлаDoc;

		ТекстПояснения = СтрШаблон(НСтр("ru = 'Выполняется получение с сервера файла ""%1"".
										|Пожалуйста, подождите...'"), ИмяДляПоказа);
		Состояние(ТекстПояснения);

		Если Не ПолучитьФайл(АдресФайла, ПолныйПутьФайла, Ложь) Тогда
			Продолжить;
		КонецЕсли;

		ТекстПояснения = СтрШаблон(НСтр("ru = 'Выполняется преобразование файла ""%1"" (добавление комментариев).
										|Пожалуйста, подождите...'"), ИмяДляПоказа);
		Состояние(ТекстПояснения);

		ПарольЗащитыWord = "";
		Если СтруктураФайла.Свойство("ПарольЗащитыWord") Тогда
			ПарольЗащитыWord = СтруктураФайла.ПарольЗащитыWord;
		КонецЕсли;

		WordApp = Неопределено;
		ПутьКФайлу1 = "";

		Попытка

			WordApp = Неопределено;
#Если ТонкийКлиент Тогда
				WordApp = Новый COMОбъект("Word.Application");
				WordApp.WordBasic.DisableAutoMacros(1);
#КонецЕсли

			Документ1 = WordApp.Documents.Open(ПолныйПутьФайла);

			WordApp.Visible = 1;
			WordApp.Activate();

			БылаСнятаЗащита = Ложь;
			Если СтруктураФайла.ВладелецТиповой = Истина Тогда
				// снимем защиту с файла1

				wdNoProtection = -1;

				Если Документ1.ProtectionType <> wdNoProtection Тогда
					Документ1.UnProtect(ПарольЗащитыWord);
					БылаСнятаЗащита = Истина;
				КонецЕсли;

			КонецЕсли;

			Для Каждого Комм Из Документ1.Comments Цикл
				Комм.DeleteRecursively();
			КонецЦикла;

			Если СтруктураФайла.ВладелецТиповой = Истина Тогда
				// вернем защиту файла1

				Если БылаСнятаЗащита Тогда
					
					// expression.Protect(Type, NoReset, Password)
					Документ1.Protect(2, Истина, ПарольЗащитыWord);  // wdAllowOnlyFormFields (2)

				КонецЕсли;

			КонецЕсли;

			Документ1.Save();  // noPrompt, wdOriginalDocumentFormat

			Документ1.Close(0);  // 0 -закрыть без сохранения

			WordApp.Quit();
			WordApp = Неопределено;

		Исключение

			БылаОшибкаWord = Истина;
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + " " + ПутьКФайлу1;

			Если WordApp <> Неопределено Тогда
				WordApp.Quit();
			КонецЕсли;
			WordApp = Неопределено;

			Возврат;

		КонецПопытки;

		ФайлНаДиске = Новый Файл(ПолныйПутьФайла);
		СтруктураФайла.РазмерDOCФайла = ФайлНаДиске.Размер();
		ФайлНаДиске = Неопределено;

		ТекстПояснения = СтрШаблон(НСтр("ru = 'Выполняется передача на сервер файла ""%1"".
										|Пожалуйста, подождите...'"), ИмяДляПоказа);
		Состояние(ТекстПояснения);

		ПомещаемыеФайлы = Новый Массив;
		Описание = Новый ОписаниеПередаваемогоФайла(ПолныйПутьФайла, "");
		ПомещаемыеФайлы.Добавить(Описание);

		ПомещенныеФайлы = Новый Массив;
		ФайлыПомещены = ПоместитьФайлы(  // doc файл

			ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, //Интерактивно

			УникальныйИдентификатор);

		Если ПомещенныеФайлы.Количество() = 1 Тогда
			// ту же переменную АдресВременногоХранилищаФайлаDOC подменим
			СтруктураФайла.АдресВременногоХранилищаФайлаDOC = ПомещенныеФайлы[0].Хранение;
		КонецЕсли;

		УдалитьФайлы(ПолныйПутьФайла);

		УдалитьФайлы(ПутьКаталога, ПолучитьМаскуВсеФайлы());
		УдалитьФайлы(ПутьКаталога);

	КонецЦикла;

	ТекстПояснения = НСтр("ru = 'Выполняется обновление Doc файлов на сервере.
						  |Пожалуйста, подождите...'");
	Состояние(ТекстПояснения);
	
	// Тут вызов на сервер, создаем объекты Файл.
	// обновляем doc файлы
	
	
	// Тут вызов на сервер, создаем объекты Файл.
	СогласованиеВРежимеЗамечанийСервер.ОбновитьWordФайлы(МассивФайловПараллельногоСогласования,
		НСтр("ru = 'Версия создана при удалении комментариев в конце согласования.'"));
	Состояние();

КонецПроцедуры	


// Преобразует doc docx файлы в HTML с помощью Word
// МассивФайловПараллельногоСогласования - массив 
//   структур (ФайлСсылка, Владелец, Наименование, Расширение, АдресВременногоХранилищаФайлаDoc, АдресВременногоХранилищаФайлаHTML, РазмерHTMLФайла) 
Процедура ОбработатьОдинФайл_УдалениеКомментария(СтруктураФайла, УникальныйИдентификатор,
	БылаОшибкаWord = Ложь, ТекстОшибки = "", СпособСогласованияВРежимеЗамечаний = Неопределено) Экспорт
	
	Если Не ОбщегоНазначенияКлиент.ЭтоWindowsКлиент() Тогда
		Возврат;
	КонецЕсли;	
	
	ИспользоватьOpenNoRepairDialog = Истина;

	СтруктураФайла.Вставить("ПолныйПутьФайла", "");
	СтруктураФайла.Вставить("ИмяФайла", "");
	СтруктураФайла.Вставить("ПутьКаталога", "");

	СтруктураФайла.Вставить("УниверсальноеВремяИзмененияWordФайла", ТекущаяДата());

	ПутьКаталога = КаталогВременныхФайлов();
	УникИд = Новый УникальныйИдентификатор;
	ПутьКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКаталога);
	ПутьКаталога = ПутьКаталога + Строка(УникИд);
	ПутьКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКаталога);
	СоздатьКаталог(ПутьКаталога);

	ДопустимаяДлинаИмениФайла = 50;
	ИмяБезРасширенияУрезанное = СтруктураФайла.Наименование;

	Если СтрДлина(ИмяБезРасширенияУрезанное) > ДопустимаяДлинаИмениФайла Тогда
		ИмяБезРасширенияУрезанное = Лев(ИмяБезРасширенияУрезанное, ДопустимаяДлинаИмениФайла);
		ИмяБезРасширенияУрезанное = СокрЛП(ИмяБезРасширенияУрезанное);
	КонецЕсли;

	ПолныйПутьФайла = ПутьКаталога + ИмяБезРасширенияУрезанное + "." + СтруктураФайла.Расширение;
	ИмяФайла = ИмяБезРасширенияУрезанное + "." + СтруктураФайла.Расширение;
	АдресФайла = СтруктураФайла.АдресВременногоХранилищаФайлаDoc;
	
	ИмяДляПоказа = СтруктураФайла.Наименование + "." + СтруктураФайла.Расширение;

	ТекстПояснения = СтрШаблон(НСтр("ru = 'Выполняется получение с сервера файла ""%1"".
									|Пожалуйста, подождите...'"), ИмяДляПоказа);
	Состояние(ТекстПояснения);

	Если Не ПолучитьФайл(АдресФайла, ПолныйПутьФайла, Ложь) Тогда
		Возврат;
	КонецЕсли;

	ТекстПояснения = СтрШаблон(НСтр("ru = 'Выполняется преобразование файла ""%1"" (удаление комментариев).
									|Пожалуйста, подождите...'"), ИмяДляПоказа);
	Состояние(ТекстПояснения);

	Excel = Неопределено;  
	ЭтоExcel = Ложь;
	
	WordApp = Неопределено;
	ПутьКФайлу1 = "";
	НовыйПутьКФайлу2 = "";

	Попытка

		WordApp = Неопределено;
		
		Если СпособСогласованияВРежимеЗамечаний 
			= ПредопределенноеЗначение("Перечисление.СпособыСогласованияВРежимеЗамечаний.MicrosoftOfficeWord") 
			Или НРег(СтруктураФайла.Расширение) = "docx" Тогда

			Если СтруктураФайла.Расширение = "doc" Или СтруктураФайла.Расширение = "docx" Или СтруктураФайла.Расширение = "odt" Тогда
		
#Если ТонкийКлиент Тогда
				WordApp = Новый COMОбъект("Word.Application");
				WordApp.WordBasic.DisableAutoMacros(1);
#КонецЕсли

				WordApp.Visible = 1;
				WordApp.Activate();

				Если ИспользоватьOpenNoRepairDialog = Ложь Тогда
					Документ1 = WordApp.Documents.Open(ПолныйПутьФайла);
				Иначе
					OpenAndRepair = Истина; // 13-й аргумент
					Документ1 = WordApp.Documents.OpenNoRepairDialog(
						ПолныйПутьФайла, , , , , , , , , , , , OpenAndRepair);
				КонецЕсли;

				Для Каждого Комм Из Документ1.Comments Цикл
					Комм.DeleteRecursively();
				КонецЦикла;

		#Если Не ВебКлиент Тогда
				НовыйПутьКФайлу2 = ПолучитьИмяВременногоФайла(СтруктураФайла.Расширение);
		#КонецЕсли
				
				// надо записать, уже без защиты Ворд
				ФорматСохранения = 0;// wdFormatDocument  0
				Если НРег(СтруктураФайла.Расширение) = "docx" Тогда
					ФорматСохранения = 16; // wdFormatDocumentDefault 16
				ИначеЕсли НРег(СтруктураФайла.Расширение) = "odt" Тогда
					ФорматСохранения = 23; // wdFormatOpenDocumentText 23
				КонецЕсли;

				Документ1.SaveAs(НовыйПутьКФайлу2, ФорматСохранения);
				ПолныйПутьФайла = НовыйПутьКФайлу2;
				Документ1.Close(0);  // 0 -закрыть без сохранения

				WordApp.Quit();
				WordApp = Неопределено;  
				
			ИначеЕсли СтруктураФайла.Расширение = "xls" Или СтруктураФайла.Расширение = "xlsx" Или СтруктураФайла.Расширение = "ods" Тогда
				
				// Excel
				Excel = Неопределено;
			#Если ТонкийКлиент Тогда		
				Excel = Новый COMОбъект("Excel.Application"); 
			#КонецЕсли	
			
				Excel.AutomationSecurity = 3; // msoAutomationSecurityForceDisable = 3
				ActiveWorkbook = Excel.WorkBooks.Open(ПолныйПутьФайла);      
				Excel.Visible = Истина;

				Для Каждого Лист Из ActiveWorkbook.Worksheets Цикл
								
			       Для Каждого Коммент Из Лист.Comments Цикл
			            Коммент.Delete();
			       КонецЦикла;	
					
				КонецЦикла;	

				ФорматСохранения = 51;  //Книга Open XML 	*.xlsx    
				Если НРег(СтруктураФайла.Расширение) = "xls" Тогда
					ФорматСохранения = -4143; // xlWorkbookNormal
				ИначеЕсли НРег(СтруктураФайла.Расширение) = "ods" Тогда
					ФорматСохранения = 60; // xlOpenDocumentSpreadsheet
				КонецЕсли;
				
				#Если Не ВебКлиент Тогда
						НовыйПутьКФайлу2 = ПолучитьИмяВременногоФайла(СтруктураФайла.Расширение);
				#КонецЕсли
				
				ActiveWorkbook.SaveAs(НовыйПутьКФайлу2, ФорматСохранения);
				ПолныйПутьФайла = НовыйПутьКФайлу2;
				
				ActiveWorkbook.Close(0);  // 0 закрыть без сохранения

				Excel.Quit();
				Excel = Неопределено;           
				
			КонецЕсли;
			
		ИначеЕсли СпособСогласованияВРежимеЗамечаний 
			= ПредопределенноеЗначение("Перечисление.СпособыСогласованияВРежимеЗамечаний.OpenOfficeOrgWriter") Тогда			
			
			
			ОбъектServiceManager = Неопределено;
			ИнстансDesktop = Неопределено;
			ПараметрыДокумента = Неопределено;
			ПараметрыСохранения = Неопределено;
			
#Если ТонкийКлиент Тогда		
				ОбъектServiceManager = Новый COMОбъект("com.sun.star.ServiceManager");
			
				ИнстансDesktop = ОбъектServiceManager.createInstance("com.sun.star.frame.Desktop");
	
				// Параметры открытия: отключение исполнения макросов.
				ПараметрыДокумента = Новый COMSafeArray("VT_VARIANT", 1);
#КонецЕсли	
				
				РежимЗапуска = ПрисвоитьЗначениеСвойству(ОбъектServiceManager,
					"MacroExecutionMode",
					0); // const short NEVER_EXECUTE = 0
				ПараметрыДокумента.SetValue(0, РежимЗапуска);
			
				// Открыть документ OpenOffice.
				Документ1 = ИнстансDesktop.loadComponentFromURL(ПреобразоватьВURL(ПолныйПутьФайла), 
					"_blank", 0, ПараметрыДокумента);
				
				
				ПараметрыПустые = ПолучитьComSafeArray();
			    dispatcher = ОбъектServiceManager.createInstance("com.sun.star.frame.DispatchHelper");
				
				oFrame = Документ1.getCurrentController().Frame;
				dispatcher.executeDispatch(oFrame, ".uno:DeleteAllNotes", "", 0, ПараметрыПустые);
				
				
#Если Не ВебКлиент Тогда
				НовыйПутьКФайлу2 = ПолучитьИмяВременногоФайла(СтруктураФайла.Расширение);
#КонецЕсли
				
#Если ТонкийКлиент Тогда
					ПараметрыСохранения = Новый COMSafeArray("VT_VARIANT", 1);
			
					ФорматСохранения = "writer8";// odt
					Если НРег(СтруктураФайла.Расширение) = "doc" Тогда
						ФорматСохранения = "MS Word 97"; // doc
					КонецЕсли;
			
					FilterName = ПрисвоитьЗначениеСвойству(ОбъектServiceManager,
						"FilterName",
						ФорматСохранения);
					ПараметрыСохранения.SetValue(0, FilterName);
	
					Документ1.storeToURL(ПреобразоватьВURL(НовыйПутьКФайлу2), ПараметрыСохранения);
					ПолныйПутьФайла = НовыйПутьКФайлу2;
					
					Документ1.close(-1);        //Закрыть документ без сохранения
					
				 	Документ1     = Неопределено;
				    ИнстансDesktop     = Неопределено;	
				    ОбъектServiceManager = Неопределено;
	
#КонецЕсли
		
		КонецЕсли;

	Исключение

		БылаОшибкаWord = Истина;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + " " + ПутьКФайлу1;

		Если СпособСогласованияВРежимеЗамечаний 
			= ПредопределенноеЗначение("Перечисление.СпособыСогласованияВРежимеЗамечаний.MicrosoftOfficeWord") Тогда
		
			Если WordApp <> Неопределено Тогда
				WordApp.Quit();
			КонецЕсли;
			WordApp = Неопределено;
			
			Если Excel <> Неопределено Тогда
				Excel.Quit();
			КонецЕсли;	
			Excel = Неопределено;           
			
		КонецЕсли;

		Возврат;

	КонецПопытки;

	ФайлНаДиске = Новый Файл(ПолныйПутьФайла);
	СтруктураФайла.РазмерDOCФайла = ФайлНаДиске.Размер();
	СтруктураФайла.УниверсальноеВремяИзмененияWordФайла = ФайлНаДиске.ПолучитьУниверсальноеВремяИзменения();
	ФайлНаДиске = Неопределено;
	СтруктураФайла.Вставить("ПолныйПутьФайла", ПолныйПутьФайла);
	СтруктураФайла.Вставить("ИмяФайла", ИмяФайла);
	СтруктураФайла.Вставить("ПутьКаталога", ПутьКаталога);

КонецПроцедуры

Функция ОткрытьWordИПолучитьHTML(ПутьКФайлу1, ФайлСсылка, ФайлHTML, ВладелецФайла, Наименование,
	Расширение, УникальныйИдентификатор, СпособСогласованияВРежимеЗамечаний, ЧислоСтраницДляПредпросмотраПорции = 20) Экспорт

	СтруктураФайла 
		= Новый Структура(
		"ФайлСсылка, ФайлHTMLСсылка, АдресаФайловHTML, Владелец, Наименование, Расширение, АдресВременногоХранилищаФайлаHTML, РазмерHTMLФайла");
		
	Если Не ОбщегоНазначенияКлиент.ЭтоWindowsКлиент() Тогда
		Возврат СтруктураФайла;
	КонецЕсли;	     
	
	ПороговоеЧислоСтраницФайлаСогласованияДляДолгойОчереди = СогласованиеВРежимеЗамечанийКлиентСерверПереопределяемый.ПороговоеЧислоСтраницФайлаСогласованияДляДолгойОчереди();
	ПредельноеЧислоСтраницФайлаСогласованияДляHtmlОбраза  = СогласованиеВРежимеЗамечанийКлиентСерверПереопределяемый.ПредельноеЧислоСтраницФайлаСогласованияДляHtmlОбраза();
	
	МассивПутейФайловHTML = Новый Массив;
		
	СтруктураФайла.ФайлСсылка = ФайлСсылка;
	СтруктураФайла.ФайлHTMLСсылка = ФайлHTML;
	СтруктураФайла.Владелец = ВладелецФайла;
	СтруктураФайла.Наименование = Наименование;
	СтруктураФайла.Расширение = Расширение;  
	СтруктураФайла.АдресаФайловHTML = Новый Массив;

	СтруктураФайла.Вставить("Картинки", Новый Массив);

	ДопустимаяДлинаИмениФайла = 50;
	ИмяБезРасширенияУрезанное = СтруктураФайла.Наименование;

	Если СтрДлина(ИмяБезРасширенияУрезанное) > ДопустимаяДлинаИмениФайла Тогда
		ИмяБезРасширенияУрезанное = Лев(ИмяБезРасширенияУрезанное, ДопустимаяДлинаИмениФайла);
		ИмяБезРасширенияУрезанное = СокрЛП(ИмяБезРасширенияУрезанное);
	КонецЕсли;

	ПутьКаталога = КаталогВременныхФайлов();
	УникИд = Новый УникальныйИдентификатор;
	ПутьКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКаталога);
	ПутьКаталога = ПутьКаталога + Строка(УникИд);
	ПутьКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКаталога);
	СоздатьКаталог(ПутьКаталога);

	ИмяПростое = "nfile";
	ИмяБезРасширенияУрезанное = ИмяПростое;
	ИмяФайлаHTML = ИмяПростое + ".htm";
	МаскаФайлаДляOpenOffice = ИмяПростое + "_htm_";  
	
	МассивКартинок = Новый Массив;
	
	ПолныйПутьФайлаHTML = ПутьКаталога + ИмяФайлаHTML;

	Если СпособСогласованияВРежимеЗамечаний 
	= ПредопределенноеЗначение("Перечисление.СпособыСогласованияВРежимеЗамечаний.MicrosoftOfficeWord") Тогда

		Если СтруктураФайла.Расширение = "doc" Или СтруктураФайла.Расширение = "docx" Или СтруктураФайла.Расширение = "odt" Тогда
	
			WordApp = Неопределено;
	#Если ТонкийКлиент Тогда
				WordApp = Новый COMОбъект("Word.Application");
				WordApp.WordBasic.DisableAutoMacros(1);
	#КонецЕсли
		
			Документ1 = WordApp.Documents.Open(ПутьКФайлу1);
		
			WordApp.Visible = 1;
			WordApp.Activate();
			
			WordApp.ActiveWindow.ActivePane.View.Type = 3; // wdPrintView = 3  
			wdStatisticPages = 2;
			ЧислоСтраниц = Документ1.ComputeStatistics(wdStatisticPages);
			
			Документ1.WebOptions.Encoding = 1251;//msoEncodingCyrillic   
			
			Если ЧислоСтраниц > ЧислоСтраницДляПредпросмотраПорции
				И ЧислоСтраницДляПредпросмотраПорции <> 0 Тогда 
				
				// порционный режим
				
				ЧислоСтраницДляПредпросмотраПорции = ЧислоСтраницДляПредпросмотраПорции;
				СтраницДробно = ЧислоСтраниц / ЧислоСтраницДляПредпросмотраПорции;
				СтраницЦелое = Цел(СтраницДробно);
				
				ЧислоПорций = СтраницЦелое;
				Если СтраницДробно - СтраницЦелое <> 0 Тогда
					ЧислоПорций = ЧислоПорций + 1;
				КонецЕсли;	
				
				ИмяФайлаСПутемHTML = "";
				
				ВременнаяПапка = ПутьКаталога;  
				
				Для НомерПорции = 0 По ЧислоПорций -1 Цикл
					
					ИмяФайлаСПутемHTMLТекущее = ВременнаяПапка + "doc" + Строка(НомерПорции) + ".htm";  
					
					НомерСтраницыНачало = НомерПорции * ЧислоСтраницДляПредпросмотраПорции + 1;
					
					ЭтоПоследняяСтраница = Ложь;
					Если НомерПорции = ЧислоПорций -1 Тогда
						НомерСтраницыКонец  = ЧислоСтраниц + 1; 
						ЭтоПоследняяСтраница = Истина;
					Иначе
						НомерСтраницыКонец  = (НомерПорции +1)* ЧислоСтраницДляПредпросмотраПорции + 1;
					КонецЕсли;	
					
					// wdGoToPage 1.  wdGoToAbsolute 1.   1 - номер страницы
					Range1 = Документ1.GoTo(1, 1, НомерСтраницыНачало);
					Range2 = Документ1.GoTo(1, 1, НомерСтраницыКонец);

					Если ЭтоПоследняяСтраница Тогда
						Range2.End = Документ1.Content.End;
					КонецЕсли;	
					
					RangeAll = Документ1.Range(Range1.Start, Range2.End);
					RangeAll.Copy();
					
					tmpDoc = WordApp.Documents.Add(,,,Ложь); // видимость = Ложь
					tmpDoc.Range().Paste();
					
					tmpDoc.SaveAs(ИмяФайлаСПутемHTMLТекущее , 10); // wdFormatFilteredHTML = 10	
					tmpDoc.Close(); 	
					
					СконвертироватьHtmlВUtf8ПлюсКартинки(ИмяФайлаСПутемHTMLТекущее, ВременнаяПапка);
					
					МассивПутейФайловHTML.Добавить(ИмяФайлаСПутемHTMLТекущее);
				
				КонецЦикла;
				
				Документ1.Paragraphs(1).Range.Copy(); // чтобы в буфере не было много
				
				Документ1.Close(0); // 0 - wdDoNotSaveChanges
		
			Иначе // как раньше	
				// wdFormatHTML  8
				Документ1.SaveAs(ПолныйПутьФайлаHTML, 8);            
				
				Документ1.Close(0); // 0 - wdDoNotSaveChanges
				
				СконвертироватьHtmlВUtf8ПлюсКартинки(ПолныйПутьФайлаHTML, ПутьКаталога);
			КонецЕсли;
			
			WordApp.Quit();
			WordApp = Неопределено;        
			
		ИначеЕсли СтруктураФайла.Расширение = "xls" Или СтруктураФайла.Расширение = "xlsx" Или СтруктураФайла.Расширение = "ods" Тогда
			
			Excel = Неопределено;
		#Если ТонкийКлиент Тогда		
			Excel = Новый COMОбъект("Excel.Application"); 
		#КонецЕсли	
			Excel.AutomationSecurity = 3; // msoAutomationSecurityForceDisable = 3
			Книга = Excel.WorkBooks.Open(ПутьКФайлу1);

			ВременнаяПапка = ПутьКаталога;  
			
			ОбзорФайловКлиент.HtmlКакФайлИзXls(Книга, ВременнаяПапка, ПолныйПутьФайлаHTML);

			СконвертироватьHtmlВUtf8ПлюсКартинки(ПолныйПутьФайлаHTML, ПутьКаталога);
			
		КонецЕсли;
		
	ИначеЕсли СпособСогласованияВРежимеЗамечаний 
	= ПредопределенноеЗначение("Перечисление.СпособыСогласованияВРежимеЗамечаний.OpenOfficeOrgWriter") Тогда
			
		ОбъектServiceManager = Неопределено;
		ИнстансDesktop = Неопределено;
		ПараметрыДокумента = Неопределено;
	
#Если ТонкийКлиент Тогда		
		ОбъектServiceManager = Новый COMОбъект("com.sun.star.ServiceManager");
	
		ИнстансDesktop = ОбъектServiceManager.createInstance("com.sun.star.frame.Desktop");

		// Параметры открытия: отключение исполнения макросов.
		ПараметрыДокумента = Новый COMSafeArray("VT_VARIANT", 1);
#КонецЕсли	
		
		РежимЗапуска = ПрисвоитьЗначениеСвойству(ОбъектServiceManager,
			"MacroExecutionMode",
			0); // const short NEVER_EXECUTE = 0
		ПараметрыДокумента.SetValue(0, РежимЗапуска);
	
		// Открыть документ OpenOffice.
		Документ1 = ИнстансDesktop.loadComponentFromURL(ПреобразоватьВURL(ПутьКФайлу1), 
			"_blank", 0, ПараметрыДокумента);  
		
		ЧислоСтраниц = Документ1.CurrentController.PageCount;
		
		ПараметрыСохранения = Неопределено;
		
		#Если ТонкийКлиент Тогда 
			
		ПараметрыСохранения = Новый COMSafeArray("VT_VARIANT", 1);

		FilterName = ПрисвоитьЗначениеСвойству(ОбъектServiceManager,
			"FilterName",
			"HTML (StarWriter)");
		ПараметрыСохранения.SetValue(0, FilterName);
		
		Документ1.storeToURL(ПреобразоватьВURL(ПолныйПутьФайлаHTML), ПараметрыСохранения);
		
		Документ1.close(-1);        //Закрыть документ без сохранения
		
	 	Документ1     = Неопределено;
	    ИнстансDesktop     = Неопределено;	
	    ОбъектServiceManager = Неопределено;
	    
		СконвертироватьHtmlВUtf8ПлюсКартинки(ПолныйПутьФайлаHTML, ПутьКаталога);
			
#КонецЕсли

	ИначеЕсли СпособСогласованияВРежимеЗамечаний 
	= ПредопределенноеЗначение("Перечисление.СпособыСогласованияВРежимеЗамечаний.Р7Builder") Тогда

		Если СтруктураФайла.Расширение = "docx" Или СтруктураФайла.Расширение = "odt" Тогда
			
#Если ТонкийКлиент Тогда			
			// Создание COM-объекта 
			Builder = Новый COMОбъект("R7.Builder"); 
			
			Builder.Initialize();

			Builder.OpenFile(ПутьКФайлу1, "");     
			
			Builder.SaveFile("html", ПолныйПутьФайлаHTML);
			
			Builder.CloseFile();
			Builder = Неопределено;
#КонецЕсли
		
		КонецЕсли;	

	КонецЕсли;

	Если СпособСогласованияВРежимеЗамечаний 
	= ПредопределенноеЗначение("Перечисление.СпособыСогласованияВРежимеЗамечаний.MicrosoftOfficeWord")
		И МассивПутейФайловHTML.Количество() = 0 Тогда
	
	    Если СтруктураФайла.Расширение = "doc" Или СтруктураФайла.Расширение = "docx" Или СтруктураФайла.Расширение = "odt" Тогда

			ИмяПодКаталогаКартинок = ИмяБезРасширенияУрезанное;
			ПутьКаталогаКартинок = ПутьКаталога + ИмяПодКаталогаКартинок;
			
			ФайлКаталога = Новый Файл(ПутьКаталогаКартинок);
			Если Не ФайлКаталога.Существует() Тогда
				
				ИмяПодКаталогаКартинок = ИмяБезРасширенияУрезанное + ".files";
				ПутьКаталогаКартинок = ПутьКаталога + ИмяПодКаталогаКартинок;
				
			КонецЕсли;	
			
			МассивКартинок = ПолучитьФайлыКартинокНаДиске(ПутьКаталогаКартинок, СтруктураФайла.Владелец);
			
		КонецЕсли;
		
	ИначеЕсли СпособСогласованияВРежимеЗамечаний 
	= ПредопределенноеЗначение("Перечисление.СпособыСогласованияВРежимеЗамечаний.OpenOfficeOrgWriter") Тогда	
			
		ПутьКаталогаКартинок = ПутьКаталога;
		МассивКартинок = ПолучитьФайлыКартинокНаДиске(
			ПутьКаталогаКартинок, СтруктураФайла.Владелец, МаскаФайлаДляOpenOffice);
			
	КонецЕсли;

	ТекстПояснения = СтрШаблон(НСтр("ru = 'Выполняется передача на сервер файла ""%1"".
									|Пожалуйста, подождите...'"), ИмяФайлаHTML);
	Состояние(ТекстПояснения);

	ПомещаемыеФайлы = Новый Массив;
	
	Если МассивПутейФайловHTML.Количество() <> 0 Тогда    
		
		Для Каждого Путь1 Из МассивПутейФайловHTML Цикл
			Описание = Новый ОписаниеПередаваемогоФайла(Путь1, "");
			ПомещаемыеФайлы.Добавить(Описание);       
		КонецЦикла;
		
	Иначе	
		Описание = Новый ОписаниеПередаваемогоФайла(ПолныйПутьФайлаHTML, "");
		ПомещаемыеФайлы.Добавить(Описание);
	КонецЕсли;

	ПомещенныеФайлы = Новый Массив;
	ФайлыПомещены = ПоместитьФайлы(
		ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, //Интерактивно
		УникальныйИдентификатор);

	Если МассивПутейФайловHTML.Количество() <> 0 Тогда  
			
		СтруктураФайла.АдресаФайловHTML = Новый Массив;
		
		Для Каждого Помещенный Из ПомещенныеФайлы Цикл 
			СтруктураФайла.АдресаФайловHTML.Добавить(Помещенный.Хранение);
		КонецЦикла;	
		
	Иначе	
		Если ПомещенныеФайлы.Количество() = 1 Тогда
			СтруктураФайла.АдресВременногоХранилищаФайлаHTML = ПомещенныеФайлы[0].Хранение;
		КонецЕсли;
		
		ФайлНаДиске = Новый Файл(ПолныйПутьФайлаHTML);
		СтруктураФайла.Вставить("РазмерHTMLФайла", ФайлНаДиске.Размер());
		ФайлНаДиске = Неопределено;
		
		УдалитьФайлы(ПолныйПутьФайлаHTML);
		
	КонецЕсли;

	СтруктураФайла.Вставить("Картинки", Новый Массив);

	Для Каждого ФайлКартинки Из МассивКартинок Цикл

		РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(
			ФайлКартинки.Расширение);

		СтруктураКартинки = Новый Структура("Имя, Расширение, АдресВременногоХранилища, ИдентификаторВложения, Размер",
			ФайлКартинки.ИмяБезРасширения, РасширениеБезТочки, "", "", ФайлКартинки.Размер());

		Если ЗначениеЗаполнено(ИмяПодКаталогаКартинок) Тогда
			ИдентификаторВложения 
				= СтрЗаменить(ИмяПодКаталогаКартинок, " ", "%20") + "/" + ФайлКартинки.Имя;
		Иначе		
			ИдентификаторВложения = ФайлКартинки.Имя;
		КонецЕсли;		
			
		СтруктураКартинки.ИдентификаторВложения = ИдентификаторВложения;

		ПомещаемыеФайлы = Новый Массив;
		Описание = Новый ОписаниеПередаваемогоФайла(ФайлКартинки.ПолноеИмя, "");
		ПомещаемыеФайлы.Добавить(Описание);

		ПомещенныеФайлы = Новый Массив;
		ФайлыПомещены = ПоместитьФайлы(
			ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, //Интерактивно

			УникальныйИдентификатор);

		Если ПомещенныеФайлы.Количество() = 1 Тогда
			СтруктураКартинки.АдресВременногоХранилища = ПомещенныеФайлы[0].Хранение;
		КонецЕсли;

		СтруктураФайла.Картинки.Добавить(СтруктураКартинки);

	КонецЦикла;

	Состояние();

	Возврат СтруктураФайла;

КонецФункции

Процедура ПослеВопросаНетКомментариевЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = Неопределено Или РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Истина);

КонецПроцедуры

// новая механика, при выполнении задачи Ознакомиться, все файлы перевести  в "Вернуться в режим замечаний" (только новая механика паралл согл)
Функция ПолучитьЭлементПоСсылке(МассивФайлов, Ссылка)

	Для Каждого Стр Из МассивФайлов Цикл
		Если Стр.Ссылка = Ссылка Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

Процедура ОбновитьHtmlВыполнить(Обработчик, МассивФайлов, УникальныйИдентификатор) Экспорт
	
	//  по файлам пройти, получить ДанныеФайла  - еще раз проверить что занят мной
	// потом проверить не занят ли Ворд  - если да, вопрос и повтор.
	// если не занят Ворд ни один - тогда идем дальше.

	МассивСсылокФайлов = Новый Массив;
	Для Каждого Стр Из МассивФайлов Цикл
		МассивСсылокФайлов.Добавить(Стр.Ссылка);
	КонецЦикла;

	МассивДанных = РаботаСФайламиВызовСервера.ДанныеФайловДляОткрытия(МассивСсылокФайлов);
	
	// модифицирует МассивДанных - удаляя лишнее
	СогласованиеВРежимеЗамечанийСервер.УбратьДанныеБезHtmlОбразов(МассивДанных);

	МассивТекДанныхВыбранныхФайлов = Новый Массив;

	МассивДанныхФайлов = Новый Массив;
	Для Каждого Стр Из МассивДанных Цикл

		МассивДанныхФайлов.Добавить(Стр);

		СтрТекДанные = ПолучитьЭлементПоСсылке(МассивФайлов, Стр.Ссылка);
		МассивТекДанныхВыбранныхФайлов.Добавить(СтрТекДанные);

	КонецЦикла;

	Если МассивДанныхФайлов.Количество() = 0 Тогда

		ВыполнитьОбработкуОповещения(Обработчик, Истина);
		Возврат;

	КонецЕсли;
	
	// тут формируем функцию входа.
	// Нужен в параметрах массив структур, и номер текущего элемента, и в цикле все вызываем.

	ИндексФайла = 0;
	ДопПараметры = Новый Структура("Обработчик, МассивДанныхФайлов, МассивТекДанныхВыбранныхФайлов, УникальныйИдентификатор, ИндексФайла",
		Обработчик, МассивДанныхФайлов, МассивТекДанныхВыбранныхФайлов, УникальныйИдентификатор,
		ИндексФайла);

	ОбновитьHtmlВыполнить_Запуск(Истина, ДопПараметры);

КонецПроцедуры

Процедура ОбновитьHtmlВыполнить_Запуск(Результат, ДопПараметры) Экспорт

	Обработчик = ДопПараметры.Обработчик;
	МассивДанныхФайлов = ДопПараметры.МассивДанныхФайлов;
	МассивТекДанныхВыбранныхФайлов = ДопПараметры.МассивТекДанныхВыбранныхФайлов;
	УникальныйИдентификатор = ДопПараметры.УникальныйИдентификатор;
	ИндексФайла = ДопПараметры.ИндексФайла;

	Если ИндексФайла >= МассивДанныхФайлов.Количество() Тогда

		ВыполнитьОбработкуОповещения(Обработчик, Истина);
		Возврат;

	КонецЕсли;	
	
	
	// тут вызов кода. 
	// в его конце делаем  ИндексФайла = ИндексФайла + 1; и снова ВернутьсяВРежимЗамечанийВыполнить_Запуск

	ДанныеФайла = МассивДанныхФайлов[ИндексФайла];

	Ссылка = ДанныеФайла.Ссылка;

	ТекущаяВерсия = ДанныеФайла.ТекущаяВерсия;

	ДанныеФайла2 = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Неопределено, ТекущаяВерсия,
		УникальныйИдентификатор);

	ПолноеИмяФайла1 = "";
	ПолноеИмяФайла2 = "";
	
	// новый код - не делаем сравнение

	ПараметрыВыполнения = Новый Структура("ДанныеФайла, ПолноеИмяФайла, Обработчик, МассивДанныхФайлов, МассивТекДанныхВыбранныхФайлов, УникальныйИдентификатор, ИндексФайла",
		ДанныеФайла2, ПолноеИмяФайла2, ДопПараметры.Обработчик, ДопПараметры.МассивДанныхФайлов,
		ДопПараметры.МассивТекДанныхВыбранныхФайлов, ДопПараметры.УникальныйИдентификатор,
		ДопПараметры.ИндексФайла);

	Обработчик = Новый ОписаниеОповещения("ПослеПолучитьФайлВерсииВРабочийКаталог_ОбновитьHtml",
		ЭтотОбъект, ПараметрыВыполнения);
	РаботаСФайламиКлиент.ПолучитьФайлВерсииВРабочийКаталог(Обработчик, ДанныеФайла2,
		ПараметрыВыполнения.ПолноеИмяФайла, УникальныйИдентификатор);

КонецПроцедуры		

// Продолжение процедуры (см. выше).
Процедура ПослеПолучитьФайлВерсииВРабочийКаталог_ОбновитьHtml(Результат, ПараметрыВыполнения) Экспорт

	Если Не Результат.ФайлПолучен Тогда
		Возврат;
	КонецЕсли;

	Обработчик = ПараметрыВыполнения.Обработчик;
	МассивДанныхФайлов = ПараметрыВыполнения.МассивДанныхФайлов;
	МассивТекДанныхВыбранныхФайлов = ПараметрыВыполнения.МассивТекДанныхВыбранныхФайлов;
	ИндексФайла = ПараметрыВыполнения.ИндексФайла;
	СпособСогласованияВРежимеЗамечаний = ПараметрыВыполнения.СпособСогласованияВРежимеЗамечаний;
	ТекущиеДанные = МассивТекДанныхВыбранныхФайлов[ИндексФайла];

	ПутьКФайлу = Результат.ПолноеИмяФайла;

	УникальныйИдентификатор = ПараметрыВыполнения.УникальныйИдентификатор;

	СтруктураФайла = СогласованиеВРежимеЗамечанийКлиент.ОткрытьWordИПолучитьHTML(
		ПутьКФайлу, ТекущиеДанные.Ссылка, ТекущиеДанные.ФайлHTML, ТекущиеДанные.ВладелецФайла,
		ТекущиеДанные.ИмяБезРасширения, ТекущиеДанные.Расширение, УникальныйИдентификатор,
		СпособСогласованияВРежимеЗамечаний);

	ТекстПояснения = НСтр("ru = 'Выполняется создание на сервере HTML файлов.
						  |Пожалуйста, подождите...'");
	Состояние(ТекстПояснения);

	СогласованиеВРежимеЗамечанийСервер.ПослеСохраненияHTML_Новый_ВсеФайлы(СтруктураФайла,
		ТекущиеДанные);
	
	// все закончили, следующий файл

	ИндексФайла = ИндексФайла + 1;
	Если ИндексФайла >= МассивДанныхФайлов.Количество() Тогда

		ВыполнитьОбработкуОповещения(Обработчик, Истина);
		Возврат;

	КонецЕсли;

	ПараметрыВыполнения.ИндексФайла = ИндексФайла;
	ОбновитьHtmlВыполнить_Запуск(Истина, ПараметрыВыполнения);

КонецПроцедуры

Процедура ВернутьсяВРежимЗамечанийВыполнить(Обработчик, МассивФайлов, УникальныйИдентификатор, СпособСогласованияВРежимеЗамечаний) Экспорт
	
	//  по файлам пройти, получить ДанныеФайла  - еще раз проверить что занят мной
	// потом проверить не занят ли Ворд  - если да, вопрос и повтор.
	// если не занят Ворд ни один - тогда идем дальше.

	МассивСсылокФайлов = Новый Массив;
	Для Каждого Стр Из МассивФайлов Цикл
		МассивСсылокФайлов.Добавить(Стр.Ссылка);
	КонецЦикла;

	МассивДанных = РаботаСФайламиВызовСервера.ДанныеФайловДляОткрытия(МассивСсылокФайлов);
	
	// модифицирует МассивДанных - удаляя лишнее
	СогласованиеВРежимеЗамечанийСервер.УбратьДанныеБезHtmlОбразов(МассивДанных);

	МассивТекДанныхВыбранныхФайлов = Новый Массив;

	МассивДанныхФайлов = Новый Массив;
	Для Каждого Стр Из МассивДанных Цикл

		Если Стр.РедактируетТекущийПользователь Тогда

			МассивДанныхФайлов.Добавить(Стр);

			СтрТекДанные = ПолучитьЭлементПоСсылке(МассивФайлов, Стр.Ссылка);
			МассивТекДанныхВыбранныхФайлов.Добавить(СтрТекДанные);

		КонецЕсли;

	КонецЦикла;

	Если МассивДанныхФайлов.Количество() > 0 Тогда

		ОбъектСсылка = Истина; // только для проверки на заполненность

		СписокЗанятыеWordФайлы = ДелопроизводствоКлиент.ПолучитьЗанятыеВнешнимиПрограммамиФайлы(
			ОбъектСсылка, УникальныйИдентификатор, МассивДанныхФайлов);

		Если СписокЗанятыеWordФайлы.Количество() <> 0 Тогда

			СтрокаФайлов = "";
			Для Каждого ИмяРасширение Из СписокЗанятыеWordФайлы Цикл
				Если Не ПустаяСтрока(СтрокаФайлов) Тогда
					СтрокаФайлов = СтрокаФайлов + Символы.ВК;
				КонецЕсли;
				СтрокаФайлов = СтрокаФайлов + ИмяРасширение;
			КонецЦикла;

			Если СписокЗанятыеWordФайлы.Количество() > 1 Тогда
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Для выполнения задачи закройте файлы, занятые Word:
						 | 
						 |%1.'"), СтрокаФайлов);
			Иначе

				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Для выполнения задачи закройте файл, занятый внешней программой:
						 | 
						 |%1.'"), СтрокаФайлов);

			КонецЕсли;

			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.ОК);
			Кнопки.Добавить(КодВозвратаДиалога.Отмена);

			ДопПараметры = Новый Структура("Обработчик, МассивФайлов, УникальныйИдентификатор, СпособСогласованияВРежимеЗамечаний",
				Обработчик, МассивФайлов, УникальныйИдентификатор, СпособСогласованияВРежимеЗамечаний);

			Обработчик = Новый ОписаниеОповещения("ПослеВопросаФайлыЗанятыWordПередЗакрытием",
				ЭтотОбъект, ДопПараметры);
			ПоказатьВопрос(Обработчик, ТекстСообщения, Кнопки);
			Отказ = Истина;

			Возврат;

		КонецЕсли;

	Иначе

		ВыполнитьОбработкуОповещения(Обработчик, Истина);
		Возврат;

	КонецЕсли;
	
	// тут формируем функцию входа.
	// Нужен в параметрах массив структур, и номер текущего элемента, и в цикле все вызываем.

	ИндексФайла = 0;
	ДопПараметры = Новый Структура("Обработчик, МассивДанныхФайлов, МассивТекДанныхВыбранныхФайлов, УникальныйИдентификатор, ИндексФайла, СпособСогласованияВРежимеЗамечаний",
		Обработчик, МассивДанныхФайлов, МассивТекДанныхВыбранныхФайлов, УникальныйИдентификатор,
		ИндексФайла, СпособСогласованияВРежимеЗамечаний);

	ВернутьсяВРежимЗамечанийВыполнить_Запуск(Истина, ДопПараметры);

КонецПроцедуры

Процедура ВернутьсяВРежимЗамечанийВыполнить_Запуск(Результат, ДопПараметры) Экспорт

	Обработчик = ДопПараметры.Обработчик;
	МассивДанныхФайлов = ДопПараметры.МассивДанныхФайлов;
	МассивТекДанныхВыбранныхФайлов = ДопПараметры.МассивТекДанныхВыбранныхФайлов;
	УникальныйИдентификатор = ДопПараметры.УникальныйИдентификатор;
	ИндексФайла = ДопПараметры.ИндексФайла;

	Если ИндексФайла >= МассивДанныхФайлов.Количество() Тогда

		ВыполнитьОбработкуОповещения(Обработчик, Истина);
		Возврат;

	КонецЕсли;	
	
	
	// тут вызов кода. 
	// в его конце делаем  ИндексФайла = ИндексФайла + 1; и снова ВернутьсяВРежимЗамечанийВыполнить_Запуск

	ДанныеФайла = МассивДанныхФайлов[ИндексФайла];
		
	// закончить редактирование
	Обработчик = Новый ОписаниеОповещения("ВернутьсяВРежимЗамечанийПослеЗакончитьРедактирование",
		ЭтотОбъект,
		Новый Структура("ТекущаяВерсияДоЗакончитьРедактирование, Обработчик, МассивДанныхФайлов, МассивТекДанныхВыбранныхФайлов, УникальныйИдентификатор, ИндексФайла, СпособСогласованияВРежимеЗамечаний",
		ДанныеФайла.ТекущаяВерсия, ДопПараметры.Обработчик, ДопПараметры.МассивДанныхФайлов,
		ДопПараметры.МассивТекДанныхВыбранныхФайлов, ДопПараметры.УникальныйИдентификатор,
		ДопПараметры.ИндексФайла,
		ДопПараметры.СпособСогласованияВРежимеЗамечаний));

	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Обработчик,
		ДанныеФайла.Ссылка, УникальныйИдентификатор);
	ПараметрыОбновленияФайла.ХранитьВерсии = ДанныеФайла.ХранитьВерсии;
	ПараметрыОбновленияФайла.РедактируетТекущийПользователь = ДанныеФайла.РедактируетТекущийПользователь;
	ПараметрыОбновленияФайла.Редактирует = ДанныеФайла.Редактирует;
	ПараметрыОбновленияФайла.СоздатьНовуюВерсию = Истина;
	ПараметрыОбновленияФайла.КомментарийКВерсии = "";
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
КонецПроцедуры

Процедура ПослеВопросаФайлыЗанятыWordПередЗакрытием(РезультатВопроса, ДопПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		// повторить операцию
		Обработчик = ДопПараметры.Обработчик;
		МассивФайлов = ДопПараметры.МассивФайлов;
		УникальныйИдентификатор = ДопПараметры.УникальныйИдентификатор;

		ВернутьсяВРежимЗамечанийВыполнить(Обработчик, МассивФайлов, УникальныйИдентификатор, 
			ДопПараметры.СпособСогласованияВРежимеЗамечаний);

	КонецЕсли;

КонецПроцедуры

Процедура ВернутьсяВРежимЗамечанийПослеЗакончитьРедактирование(Результат, ПараметрыВыполнения) Экспорт

	МассивТекДанныхВыбранныхФайлов = ПараметрыВыполнения.МассивТекДанныхВыбранныхФайлов;
	ИндексФайла = ПараметрыВыполнения.ИндексФайла;
	ТекущиеДанные = МассивТекДанныхВыбранныхФайлов[ИндексФайла];

	Ссылка = ТекущиеДанные.Ссылка;

	УникальныйИдентификатор = ПараметрыВыполнения.УникальныйИдентификатор;

	ТекущаяВерсияДоЗакончитьРедактирование = ПараметрыВыполнения.ТекущаяВерсияДоЗакончитьРедактирование;

	СтруктураВерсий = СогласованиеВРежимеЗамечанийСервер.ПолучитьТекущуюИПредыдущуюВерсии(
		Ссылка, ТекущаяВерсияДоЗакончитьРедактирование);

	ТекущаяВерсия = СтруктураВерсий.ТекущаяВерсия;
	ПредыдущаяВерсия = СтруктураВерсий.ПредыдущаяВерсия;
	
	//ДанныеФайла1 = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Неопределено, ПредыдущаяВерсия, УникальныйИдентификатор);
	ДанныеФайла2 = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Неопределено, ТекущаяВерсия,
		УникальныйИдентификатор);

	ПолноеИмяФайла1 = "";
	ПолноеИмяФайла2 = "";
	
	// новый код - не делаем сравнение

	ПараметрыВыполнения = Новый Структура(
		"ДанныеФайла, ПолноеИмяФайла, Обработчик, МассивДанныхФайлов, МассивТекДанныхВыбранныхФайлов, УникальныйИдентификатор, ИндексФайла, СпособСогласованияВРежимеЗамечаний",
		ДанныеФайла2, ПолноеИмяФайла2, ПараметрыВыполнения.Обработчик,
		ПараметрыВыполнения.МассивДанныхФайлов, ПараметрыВыполнения.МассивТекДанныхВыбранныхФайлов,
		ПараметрыВыполнения.УникальныйИдентификатор, ПараметрыВыполнения.ИндексФайла,
		ПараметрыВыполнения.СпособСогласованияВРежимеЗамечаний);

	Обработчик = Новый ОписаниеОповещения("ПослеПолучитьФайлВерсииВРабочийКаталог_Новый",
		ЭтотОбъект, ПараметрыВыполнения);
	РаботаСФайламиКлиент.ПолучитьФайлВерсииВРабочийКаталог(Обработчик,
		ПараметрыВыполнения.ДанныеФайла, ПараметрыВыполнения.ПолноеИмяФайла,
		УникальныйИдентификатор);

	Возврат;

КонецПроцедуры

// Продолжение процедуры (см. выше).
Процедура ПослеПолучитьФайлВерсииВРабочийКаталог_Новый(Результат, ПараметрыВыполнения) Экспорт

	Если Не Результат.ФайлПолучен Тогда
		Возврат;
	КонецЕсли;

	Обработчик = ПараметрыВыполнения.Обработчик;
	МассивДанныхФайлов = ПараметрыВыполнения.МассивДанныхФайлов;
	МассивТекДанныхВыбранныхФайлов = ПараметрыВыполнения.МассивТекДанныхВыбранныхФайлов;
	ИндексФайла = ПараметрыВыполнения.ИндексФайла;
	СпособСогласованияВРежимеЗамечаний = ПараметрыВыполнения.СпособСогласованияВРежимеЗамечаний;
	ТекущиеДанные = МассивТекДанныхВыбранныхФайлов[ИндексФайла];

	ПутьКФайлу = Результат.ПолноеИмяФайла;

	УникальныйИдентификатор = ПараметрыВыполнения.УникальныйИдентификатор;

	СтруктураФайла = СогласованиеВРежимеЗамечанийКлиент.ОткрытьWordИПолучитьHTML(
		ПутьКФайлу, ТекущиеДанные.Ссылка, ТекущиеДанные.ФайлHTML, ТекущиеДанные.ВладелецФайла,
		ТекущиеДанные.ИмяБезРасширения, ТекущиеДанные.Расширение, УникальныйИдентификатор,
		СпособСогласованияВРежимеЗамечаний);

	ТекстПояснения = НСтр("ru = 'Выполняется создание на сервере HTML файлов.
						  |Пожалуйста, подождите...'");
	Состояние(ТекстПояснения);

	СогласованиеВРежимеЗамечанийСервер.ПослеСохраненияHTML_Новый_ВсеФайлы(СтруктураФайла,
		ТекущиеДанные);
	
	// все закончили, следующий файл

	ИндексФайла = ИндексФайла + 1;
	Если ИндексФайла >= МассивДанныхФайлов.Количество() Тогда

		ВыполнитьОбработкуОповещения(Обработчик, Истина);
		Возврат;

	КонецЕсли;

	ПараметрыВыполнения.ИндексФайла = ИндексФайла;
	ВернутьсяВРежимЗамечанийВыполнить_Запуск(Истина, ПараметрыВыполнения);

КонецПроцедуры

// автозаполнит файлы (если нужно) - не задавая вопрос, и обновит html образ (для файлов с Основной истина)
Процедура АвтозаполнитьФайлы_ИОбновитьHtml(МассивФайлов, УникальныйИдентификатор,
	СпособСогласованияВРежимеЗамечаний, ЧислоСтраницДляПредпросмотраПорции) Экспорт
				
	//  по файлам пройти, получить ДанныеФайла  - еще раз проверить что занят мной
	// потом проверить не занят ли Ворд  - если да, вопрос и повтор.
	// если не занят Ворд ни один - тогда идем дальше.

	МассивСсылокФайлов = Новый Массив;
	Для Каждого Стр Из МассивФайлов Цикл
		МассивСсылокФайлов.Добавить(Стр.Ссылка);
	КонецЦикла;

	ПринудительноДобавитьИндикациюОПерезаполнении = Истина;
	МассивДанных = РаботаСФайламиВызовСервера.ДанныеФайловДляОткрытия(МассивСсылокФайлов);

	МассивТекДанныхВыбранныхФайлов = Новый Массив;

	МассивДанныхФайлов = Новый Массив;

	МассивТекДанных_Новый = Новый Массив;
	
	// тут автозаполнение - и потом обновить ДанныеФайлов
	Для Каждого Стр Из МассивТекДанныхВыбранныхФайлов Цикл

		ИмяФайла = Стр.ПолноеНаименованиеВерсии;
		ТекстСост = СтрШаблон(НСтр(
			"ru = 'Выполняется автоматическое заполнение файла ""%1"". Пожалуйста, подождите...'"),
			ИмяФайла);
		Состояние(ТекстСост);

#Если Не ВебКлиент Тогда
		ДанныеВыполнения = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьПоляФайлаДаннымиВладельца(
				Истина, Стр.Ссылка, Истина, УникальныйИдентификатор);
#Иначе
			ДанныеВыполнения = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьПоляФайлаДаннымиВладельца(
				Ложь, Стр.Ссылка, Истина, УникальныйИдентификатор);
#КонецЕсли
		
		// обновим ДанныеФайла (т.к. версия обновлена)
		СтрНов = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
			Стр.Ссылка, Неопределено, УникальныйИдентификатор);
		МассивТекДанных_Новый.Добавить(СтрНов);

	КонецЦикла
	;			
	
	// модифицирует МассивДанных - удаляя лишнее - это уже после автозаполнения.
	СогласованиеВРежимеЗамечанийСервер.УбратьДанныеБезHtmlОбразов(МассивТекДанных_Новый);
	
	// тут обновление html образа	
	Для Каждого Стр Из МассивТекДанных_Новый Цикл

		ИмяФайла = Стр.ПолноеНаименованиеВерсии;

		ТекстПояснения = СтрШаблон(НСтр("ru = 'Выполняется получение с сервера файла ""%1"".
										|Пожалуйста, подождите...'"), ИмяФайла);
		Состояние(ТекстПояснения);

		АдресФайла = Стр.НавигационнаяСсылкаТекущейВерсии;
		ПутьКФайлу = "";

#Если Не ВебКлиент Тогда
		ПутьКФайлу = ПолучитьИмяВременногоФайла(Стр.Расширение);
#КонецЕсли

		Если Не ПолучитьФайл(АдресФайла, ПутьКФайлу, Ложь) Тогда
			Продолжить;
		КонецЕсли;

		Стр.Вставить("ВладелецФайла", Стр.Владелец);

		СтруктураФайла = ОткрытьWordИПолучитьHTML(
			ПутьКФайлу, Стр.Ссылка, Стр.ФайлHTML, Стр.Владелец, Стр.ПолноеНаименованиеВерсии,
			Стр.Расширение, УникальныйИдентификатор,
			СпособСогласованияВРежимеЗамечаний, ЧислоСтраницДляПредпросмотраПорции);

		ТекстПояснения = НСтр("ru = 'Выполняется создание на сервере HTML файлов.
							  |Пожалуйста, подождите...'");
		Состояние(ТекстПояснения);

		СогласованиеВРежимеЗамечанийСервер.ПослеСохраненияHTML_Новый_ВсеФайлы(СтруктураФайла, Стр);

		УдалитьФайлы(ПутьКФайлу);

	КонецЦикла
	;

КонецПроцедуры				

//  Создать html по Word файлам - интерактивно, у пользователя (не у робота)
Процедура ПодготовитьДокументКСогласованию(Документ, УникальныйИдентификатор, ЧислоСтраницДляПредпросмотраПорции) Экспорт

	СпособСогласованияВРежимеЗамечаний = Неопределено;

	МассивФайловПараллельногоСогласования 
		= СогласованиеВРежимеЗамечанийСервер.ПодготовитьМассивФайловПараллельногоСогласованияПоДокументу(
			Документ, УникальныйИдентификатор, СпособСогласованияВРежимеЗамечаний);

	Если МассивФайловПараллельногоСогласования.Количество() <> 0 Тогда

		Параметры = ПараметрыИзWordВHtml();
		Параметры.УникальныйИдентификатор = УникальныйИдентификатор;
		Параметры.ВызовИзОбработкиПараллелРан = Ложь;
		Параметры.СпособСогласованияВРежимеЗамечаний = СпособСогласованияВРежимеЗамечаний;
		Параметры.ЧислоСтраницДляПредпросмотраПорции = ЧислоСтраницДляПредпросмотраПорции;
		
		СогласованиеВРежимеЗамечанийКлиент.ОбработатьМассивФайловИзWordВHtml(
			МассивФайловПараллельногоСогласования, Параметры);

		БылаОшибкаWord = Параметры.БылаОшибкаWord;
		ТекстОшибки = Параметры.ТекстОшибки;

		Если БылаОшибкаWord Тогда

			ПоказатьПредупреждение( , ТекстОшибки);
			Возврат;

		КонецЕсли;	
			
		// вместо рег задания делаем сами
		СогласованиеВРежимеЗамечанийСервер.ОбработатьHTMLФайлыДокумента(Документ);

	КонецЕсли;

КонецПроцедуры	

//  Создать html по Word файлам - в клиенсткой обработке (роботе)
Функция ПодготовитьДокументКСогласованиюИзКлиентскойОбработки(Документ, УникальныйИдентификатор,
	ТекстОшибки) Экспорт
	
	Подготовлен = СогласованиеВРежимеЗамечанийСервер.ДокументПодготовленКСогласованиюВРежимеЗамечаний(Документ);
	Если Подготовлен Тогда
		Возврат Истина;
	КонецЕсли;	

	СпособСогласованияВРежимеЗамечаний = Неопределено;      
	ЧислоСтраницДляПредпросмотраПорции = 0;

	МассивФайловПараллельногоСогласования 
		= СогласованиеВРежимеЗамечанийСервер.ПодготовитьМассивФайловПараллельногоСогласованияПоДокументу(
			Документ, УникальныйИдентификатор, СпособСогласованияВРежимеЗамечаний, ЧислоСтраницДляПредпросмотраПорции);

	Если МассивФайловПараллельногоСогласования.Количество() <> 0 Тогда

		Параметры = ПараметрыИзWordВHtml();
		Параметры.УникальныйИдентификатор = УникальныйИдентификатор;
		Параметры.ВызовИзОбработкиПараллелРан = Ложь;
		Параметры.СпособСогласованияВРежимеЗамечаний = СпособСогласованияВРежимеЗамечаний;
		Параметры.ЧислоСтраницДляПредпросмотраПорции = ЧислоСтраницДляПредпросмотраПорции;
		
		СогласованиеВРежимеЗамечанийКлиент.ОбработатьМассивФайловИзWordВHtml(
			МассивФайловПараллельногоСогласования, Параметры);

		БылаОшибкаWord = Параметры.БылаОшибкаWord;
		ТекстОшибки = Параметры.ТекстОшибки;

		Если БылаОшибкаWord Тогда

			Возврат Ложь;

		КонецЕсли;	
			
		// токенизацию не делаем тут

	КонецЕсли;
	
	Возврат Истина;

КонецФункции	

//  добавить комментарии в Word файлы - интерактивно, у пользователя (не у робота)
Процедура ДобавитьКомментарииБезИспользованияРобота(Действие, Документ, УникальныйИдентификатор,
	НомерИтерации, НеДелатьОбработкуHtml = Ложь,
	СообщениеОбОшибке = "",
	СпособСогласованияВРежимеЗамечаний,
	ЧислоСтраницДляПредпросмотраПорции) Экспорт

	Попытка
		
		//а. перенумеруем правки.
		
		// МассивВерсийHTML - Соответствие, Ключ - версия,  значение - структура (ТекстHTMLЗначение, ПростойТекстЗначение)
		МассивВерсийHTML = СогласованиеВРежимеЗамечанийСервер.ВсеВерсииHTML(Действие,
			УникальныйИдентификатор);
		
		// тут заполнить извлеченный текст (ПростойТекстЗначение)
		Для Каждого КлючИЗначение Из МассивВерсийHTML Цикл

			СтруктВерсии = КлючИЗначение.Значение;

			ТекстHTML = СтруктВерсии.ТекстHTML;
			СтруктВерсии.ЧистыйТекст = РаботаС_HTML.ПолучитьТекстИзHTML_IE(ТекстHTML);

		КонецЦикла;
		ВсеПравки = СогласованиеВРежимеЗамечанийСервер.ПеренумероватьПравки(
			Действие, МассивВерсийHTML, НомерИтерации);
		
		//б. по очередно все Word файлы: получим в temp каталог, обработаем, закроем, (на сервере)заем + вчекиним.
		МассивФайловПараллельногоСогласования 
			= СогласованиеВРежимеЗамечанийСервер.ПодготовитьМассивФайловПоДействию_ДобавлениеКомментария(
				Действие, УникальныйИдентификатор);
				
		// далее обработка файлов		
		ОбработатьОдинФайл_ДобавлениеКомментария_БезИспользованияРобота(
			Действие, Документ, УникальныйИдентификатор, МассивФайловПараллельногоСогласования,
			ВсеПравки, НомерИтерации,
			НеДелатьОбработкуHtml, СообщениеОбОшибке, СпособСогласованияВРежимеЗамечаний, ЧислоСтраницДляПредпросмотраПорции);

	Исключение

		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СогласованиеВРежимеЗамечанийСервер.ЗаписьЖурналаРегистрацииСервер(СообщениеОбОшибке);

	КонецПопытки;

КонецПроцедуры

Процедура ОбработатьОдинФайл_ДобавлениеКомментария_БезИспользованияРобота(Действие, Документ,
	УникальныйИдентификатор, МассивФайловПараллельногоСогласования, ВсеПравки, НомерИтерации,
	НеДелатьОбработкуHtml = Ложь, СообщениеОбОшибке = "",
	СпособСогласованияВРежимеЗамечаний = Неопределено,
	ЧислоСтраницДляПредпросмотраПорции)

	ИспользоватьOpenNoRepairDialog = Истина;
		
	// закончили, перейти к след задаче
	Если МассивФайловПараллельногоСогласования.Количество() = 0 Тогда
		
		// вместо рег задания делаем сами
		Если НеДелатьОбработкуHtml = Ложь Тогда
			СогласованиеВРежимеЗамечанийСервер.ОбработатьHTMLФайлыДокумента(Документ);
		КонецЕсли;	

		Возврат;

	КонецЕсли;

	СтруктураФайла = МассивФайловПараллельногоСогласования[0];

	Попытка

		БылаОшибкаWord = Ложь;
		ТекстОшибки = "";
		ТекТипОчереди = Неопределено;
		СогласованиеВРежимеЗамечанийКлиент.ОбработатьОдинФайл_ДобавлениеКомментария(
			СтруктураФайла, УникальныйИдентификатор, БылаОшибкаWord, ТекстОшибки, ВсеПравки,
			СпособСогласованияВРежимеЗамечаний, ТекТипОчереди, ЧислоСтраницДляПредпросмотраПорции);

		Если БылаОшибкаWord Тогда

			МассивФайловПараллельногоСогласования.Очистить(); // очищаем файлы
			СообщениеОбОшибке = ТекстОшибки;

			Возврат;

		КонецЕсли;

	Исключение

		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СогласованиеВРежимеЗамечанийСервер.ЗаписьЖурналаРегистрацииСервер(СообщениеОбОшибке);

		МассивФайловПараллельногоСогласования.Очистить(); // очищаем файлы
		Возврат;

	КонецПопытки;

	ВыполнениеЗадач_ДобавлениеКомментарияWord_БезИспользованияРобота(
		Действие, Документ, МассивФайловПараллельногоСогласования, УникальныйИдентификатор,
		ВсеПравки, НомерИтерации, 
		НеДелатьОбработкуHtml, ТекстОшибки,
		СпособСогласованияВРежимеЗамечаний,
		ЧислоСтраницДляПредпросмотраПорции);

КонецПроцедуры

Процедура ВыполнениеЗадач_ДобавлениеКомментарияWord_БезИспользованияРобота(Действие, Документ,
	МассивФайловПараллельногоСогласования, УникальныйИдентификатор, ВсеПравки, НомерИтерации,
	НеДелатьОбработкуHtml = Ложь, ТекстОшибки = "",
	СпособСогласованияВРежимеЗамечаний = Неопределено,
	ЧислоСтраницДляПредпросмотраПорции)

	СтруктураФайла = МассивФайловПараллельногоСогласования[0];

	ПолныйПутьФайла = СтруктураФайла.ПолныйПутьФайла;
	ПолныйПутьФайлаHTML = СтруктураФайла.ПолныйПутьФайлаHTML;
	ИмяФайла = СтруктураФайла.ИмяФайла;
	ИмяФайлаHTML = СтруктураФайла.ИмяФайлаHTML;
	ПутьКаталога = СтруктураФайла.ПутьКаталога;
	МассивПутейФайловHTML = СтруктураФайла.МассивПутейФайловHTML;
	
	// файл не занят, можно работать

	Если ((ПолныйПутьФайла <> "") И 
		(ПолныйПутьФайлаHTML <> "" Или МассивПутейФайловHTML.Количество() <> 0)) Тогда

		Попытка

			ТекстПояснения = СтрШаблон(НСтр("ru = 'Выполняется передача на сервер файла ""%1"".
											|Пожалуйста, подождите...'"), ИмяФайла);
			Состояние(ТекстПояснения);

			ПомещаемыеФайлы = Новый Массив;       
			
			Описание = Новый ОписаниеПередаваемогоФайла(ПолныйПутьФайла, "");
			ПомещаемыеФайлы.Добавить(Описание);

			ПомещенныеФайлы = Новый Массив;
			ФайлыПомещены = ПоместитьФайлы(  // doc файл
				ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, //Интерактивно
				УникальныйИдентификатор);

			Если ПомещенныеФайлы.Количество() = 1 Тогда
				// ту же переменную АдресВременногоХранилищаФайлаDOC подменим
				СтруктураФайла.АдресВременногоХранилищаФайлаDOC = ПомещенныеФайлы[0].Хранение;
			КонецЕсли;

			ТекстПояснения = СтрШаблон(НСтр("ru = 'Выполняется передача на сервер файла ""%1"".
											|Пожалуйста, подождите...'"), ИмяФайлаHTML);
			Состояние(ТекстПояснения);

			ПомещаемыеФайлы = Новый Массив;
			
			Если МассивПутейФайловHTML.Количество() <> 0 Тогда    
				
				Для Каждого Путь1 Из МассивПутейФайловHTML Цикл
					Описание = Новый ОписаниеПередаваемогоФайла(Путь1, "");
					ПомещаемыеФайлы.Добавить(Описание);       
				КонецЦикла;
				
			Иначе	
				Описание = Новый ОписаниеПередаваемогоФайла(ПолныйПутьФайлаHTML, "");
				ПомещаемыеФайлы.Добавить(Описание);
			КонецЕсли;

			ПомещенныеФайлы = Новый Массив;
			
			ФайлыПомещены = ПоместитьФайлы(  // html файл
				ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, //Интерактивно
				УникальныйИдентификатор);     
				

			СтруктураФайла.Вставить("АдресВременногоХранилищаФайлаHTML", "");
			СтруктураФайла.Вставить("АдресаФайловHTML", Новый Массив);     
			СтруктураФайла.Вставить("РазмерHTMLФайла", 0);
			
			Если МассивПутейФайловHTML.Количество() <> 0 Тогда  
				
				Для Каждого Помещенный Из ПомещенныеФайлы Цикл 
					СтруктураФайла.АдресаФайловHTML.Добавить(Помещенный.Хранение);
				КонецЦикла;	
				
			Иначе	
				Если ПомещенныеФайлы.Количество() = 1 Тогда
					СтруктураФайла.АдресВременногоХранилищаФайлаHTML = ПомещенныеФайлы[0].Хранение;
				КонецЕсли;
				
				ФайлНаДиске = Новый Файл(ПолныйПутьФайлаHTML);
				СтруктураФайла.Вставить("РазмерHTMLФайла", ФайлНаДиске.Размер());
				ФайлНаДиске = Неопределено;
				
			КонецЕсли;

			УдалитьФайлы(ПолныйПутьФайла);
			Если ЗначениеЗаполнено(ПолныйПутьФайлаHTML) Тогда
				УдалитьФайлы(ПолныйПутьФайлаHTML);               
			КонецЕсли;

			УдалитьФайлы(ПутьКаталога, ПолучитьМаскуВсеФайлы());
			УдалитьФайлы(ПутьКаталога);

			ТекстПояснения = НСтр("ru = 'Выполняется обновление Doc файлов на сервере.
								  |Пожалуйста, подождите...'");
			Состояние(ТекстПояснения);
			
			// Тут вызов на сервер, создаем объекты Файл.
			// обновляем doc файлы

			МассивФайловЛокальный = Новый Массив;
			МассивФайловЛокальный.Добавить(СтруктураФайла);
				// Тут вызов на сервер, создаем объекты Файл.
			СогласованиеВРежимеЗамечанийСервер.ОбновитьHTMLФайлы_ПлюсWordФайл(
				МассивФайловЛокальный, НомерИтерации);

			Состояние();

		Исключение

			СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			СогласованиеВРежимеЗамечанийСервер.ЗаписьЖурналаРегистрацииСервер(СообщениеОбОшибке);

			МассивФайловПараллельногоСогласования.Очистить(); // очищаем файлы

			Возврат;

		КонецПопытки;

	КонецЕсли;
	
	// тут переходим к след файлу
	Индекс = 0;
	// удаляем из массива
	МассивФайловПараллельногоСогласования.Удалить(Индекс);
	
	// переходим к след файлу
	ОбработатьОдинФайл_ДобавлениеКомментария_БезИспользованияРобота(
		Действие, Документ, УникальныйИдентификатор, МассивФайловПараллельногоСогласования,
		ВсеПравки, НомерИтерации,
		НеДелатьОбработкуHtml, ТекстОшибки,
		СпособСогласованияВРежимеЗамечаний,
		ЧислоСтраницДляПредпросмотраПорции);

КонецПроцедуры

// Удалить комментарии в Ворд файлах , без использования робота
Процедура УдалитьКомментарииБезИспользованияРобота(Действие, Документ, 
	УникальныйИдентификатор, ТекстОшибки = "", 
	СпособСогласованияВРежимеЗамечаний = Неопределено) Экспорт

	ЕстьКомментарии = СогласованиеВРежимеЗамечанийСервер.ЕстьКомментарии(Документ);
	Если Не ЕстьКомментарии Тогда
		Возврат;
	КонецЕсли;

	Попытка
		
		// здесь та же функция ПодготовитьМассивФайловПоДействию_ДобавлениеКомментария - и для добавления, и для удаления комментария используется
		МассивФайловПараллельногоСогласования 
			= СогласованиеВРежимеЗамечанийСервер.ПодготовитьМассивФайловПоДействию_ДобавлениеКомментария(
				Действие, УникальныйИдентификатор);
				
		// далее обработка файлов		
		ОбработатьОдинФайл_УдалениеКомментария_БезИспользованияРобота(
			Действие, Документ, УникальныйИдентификатор,
			МассивФайловПараллельногоСогласования, , СпособСогласованияВРежимеЗамечаний);

	Исключение

		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СогласованиеВРежимеЗамечанийСервер.ЗаписьЖурналаРегистрацииСервер(СообщениеОбОшибке);
		ТекстОшибки = СообщениеОбОшибке;

	КонецПопытки;

КонецПроцедуры

Процедура ОбработатьОдинФайл_УдалениеКомментария_БезИспользованияРобота(Действие, Документ,
	УникальныйИдентификатор, МассивФайловПараллельногоСогласования, ТекстОшибки = "",
	СпособСогласованияВРежимеЗамечаний = Неопределено)

	ИспользоватьOpenNoRepairDialog = Истина;

	Если МассивФайловПараллельногоСогласования.Количество() = 0 Тогда

		ТекФайл = Неопределено;
		ТекущийФайл = "";
		
		Возврат;

	КонецЕсли;

	СтруктураФайла = МассивФайловПараллельногоСогласования[0];

	Попытка

		БылаОшибкаWord = Ложь;
		ТекстОшибки = "";
		СогласованиеВРежимеЗамечанийКлиент.ОбработатьОдинФайл_УдалениеКомментария(
			СтруктураФайла, УникальныйИдентификатор, БылаОшибкаWord, ТекстОшибки,
			СпособСогласованияВРежимеЗамечаний);

		Если БылаОшибкаWord Тогда
			// перенаправить на исполнителя ОбработчикОшибок, вписав в описание текст ошибки.
			// и послать уведомление ответственным.

			МассивФайловПараллельногоСогласования.Очистить(); // очищаем файлы

			Возврат;

		КонецЕсли;

	Исключение

		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СогласованиеВРежимеЗамечанийСервер.ЗаписьЖурналаРегистрацииСервер(СообщениеОбОшибке);

		МассивФайловПараллельногоСогласования.Очистить(); // очищаем файлы
		ТекстОшибки = СообщениеОбОшибке;

		Возврат;

	КонецПопытки;
	ТекущийФайл = СтруктураФайла.ПолныйПутьФайла;
	
	// тут не было  ошибок
	ВыполнениеЗадач_УдалениеКомментарияWord_БезИспользованияРобота(
			Действие, Документ, УникальныйИдентификатор,
		МассивФайловПараллельногоСогласования, ТекстОшибки,
		СпособСогласованияВРежимеЗамечаний);

КонецПроцедуры

Процедура ВыполнениеЗадач_УдалениеКомментарияWord_БезИспользованияРобота(Действие, Документ,
	УникальныйИдентификатор, МассивФайловПараллельногоСогласования,
	ТекстОшибки = "", СпособСогласованияВРежимеЗамечаний = Неопределено)

	СтруктураФайла = МассивФайловПараллельногоСогласования[0];

	ПолныйПутьФайла = СтруктураФайла.ПолныйПутьФайла;
	ИмяФайла = СтруктураФайла.ИмяФайла;
	ПутьКаталога = СтруктураФайла.ПутьКаталога;
	
	// файл не занят, можно работать

	Если ПолныйПутьФайла <> "" Тогда

		Попытка

			ТекстПояснения = СтрШаблон(НСтр("ru = 'Выполняется передача на сервер файла ""%1"".
											|Пожалуйста, подождите...'"), ИмяФайла);
			Состояние(ТекстПояснения);

			ПомещаемыеФайлы = Новый Массив;
			Описание = Новый ОписаниеПередаваемогоФайла(ПолныйПутьФайла, "");
			ПомещаемыеФайлы.Добавить(Описание);

			ПомещенныеФайлы = Новый Массив;
			ФайлыПомещены = ПоместитьФайлы(  // doc файл

				ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, //Интерактивно

				УникальныйИдентификатор);

			Если ПомещенныеФайлы.Количество() = 1 Тогда
				// ту же переменную АдресВременногоХранилищаФайлаDOC подменим
				СтруктураФайла.АдресВременногоХранилищаФайлаDOC = ПомещенныеФайлы[0].Хранение;
			КонецЕсли;

			УдалитьФайлы(ПолныйПутьФайла);

			УдалитьФайлы(ПутьКаталога, ПолучитьМаскуВсеФайлы());
			УдалитьФайлы(ПутьКаталога);
			ТекстПояснения = НСтр("ru = 'Выполняется обновление Doc файлов на сервере.
								  |Пожалуйста, подождите...'");
			Состояние(ТекстПояснения);
			
			// Тут вызов на сервер, создаем объекты Файл.
			// обновляем doc файлы
			МассивФайловЛокальный = Новый Массив;
			МассивФайловЛокальный.Добавить(СтруктураФайла);

			УдалитьЗаписиФайлыСКомментариямиWord = Истина;
			// Тут вызов на сервер, создаем объекты Файл.
			СогласованиеВРежимеЗамечанийСервер.ОбновитьWordФайлы(
				МассивФайловЛокальный, НСтр(
				"ru = 'Версия создана при удалении комментариев в конце согласования.'"),
				УдалитьЗаписиФайлыСКомментариямиWord);

			Состояние();

		Исключение

			СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			СогласованиеВРежимеЗамечанийСервер.ЗаписьЖурналаРегистрацииСервер(СообщениеОбОшибке);

			МассивФайловПараллельногоСогласования.Очистить(); // очищаем файлы
			ТекстОшибки = СообщениеОбОшибке;

			Возврат;

		КонецПопытки;

	КонецЕсли;
	
	// тут переходим к след файлу
	Индекс = 0;
	// удаляем из массива
	МассивФайловПараллельногоСогласования.Удалить(Индекс);
	
	// переходим к след файлу
	ОбработатьОдинФайл_УдалениеКомментария_БезИспользованияРобота(
		Действие, Документ, УникальныйИдентификатор,
		МассивФайловПараллельногоСогласования, ТекстОшибки,
		СпособСогласованияВРежимеЗамечаний);

КонецПроцедуры

Процедура ОткрытьФормуСогласующего(Документ, Действие, Участник, Идентификатор, НомерИтерации) Экспорт
	
	// открыть интерфейс согласующего
	ПараметрыОткрытияФормы = Новый Структура("Файл, Документ, Действие, Участник, Идентификатор, НомерИтерации, ОсновнойДокумент",
		Неопределено, Документ, Действие, Участник, Идентификатор, НомерИтерации, Документ);
	ОткрытьФорму("ОбщаяФорма.СогласованиеВРежимеЗамечанийФормаСогласующего", ПараметрыОткрытияФормы);

КонецПроцедуры

Процедура ОткрытьФормуИнициатора(Документ, Действие, Участник, Идентификатор, НомерИтерации) Экспорт
	
	// открыть интерфейс согласующего
	ПараметрыОткрытияФормы = Новый Структура("Файл, Документ, Действие, Участник, Идентификатор, НомерИтерации, ОсновнойДокумент",
		Неопределено, Документ, Действие, Участник, Идентификатор, НомерИтерации, Документ);
	ОткрытьФорму("ОбщаяФорма.СогласованиеВРежимеЗамечанийФормаИнициатора", ПараметрыОткрытияФормы);

КонецПроцедуры

Процедура ОткрытьФормуПросмотраЗамечаний(Форма, Документ) Экспорт
	
	// открыть интерфейс согласующего
	ПараметрыОткрытияФормы = Новый Структура("Документ, Действие", Документ,
		Форма.ДействиеСогласованияВРежимеЗамечаний);
	ОткрытьФорму("ОбщаяФорма.СогласованиеВРежимеЗамечанийФормаТолькоПросмотр",
		ПараметрыОткрытияФормы);

КонецПроцедуры

// Функция преобразует Windows имя файла в URL OpenOffice.
Функция ПреобразоватьВURL(ИмяФайла)
	
	Возврат "file:///" + СтрЗаменить(ИмяФайла, "\", "/");
	
КонецФункции

// Создание структуры для параметров OpenOffice.
Функция ПрисвоитьЗначениеСвойству(Объект, ИмяСвойства, ЗначениеСвойства)
	
	Свойства = Объект.Bridge_GetStruct("com.sun.star.beans.PropertyValue");
	Свойства.Name = ИмяСвойства;
	Свойства.Value = ЗначениеСвойства;
	
	Возврат Свойства;
	
КонецФункции

Функция ПолучитьComSafeArray()
	
#Если ВебКлиент Тогда
	scr = Новый COMОбъект("MSScriptControl.ScriptControl");
	scr.language = "javascript";
	scr.eval("Массив=new Array()");
	Возврат scr.eval("Массив");
#ИначеЕсли Не МобильныйКлиент Тогда
	Возврат Новый COMSafeArray("VT_DISPATCH", 1);
#КонецЕсли
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти