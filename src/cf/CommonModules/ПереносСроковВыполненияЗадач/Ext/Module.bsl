////////////////////////////////////////////////////////////////////////////////
// Перенос сроков выполнения задач
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает количество переносов срока указанной задачи, выполненных по 
// указанной заявке на перенос срока выполнения.
//
// Параметры:
//  ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя
//  ЗаявкаСсылка - БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач
//  СУчетомИтерации - Булево - если передается Истина, определяется количество переносов
//                             только по текущей итерации в заявке.
//
Функция КоличествоПереносовСрокаПоЗадачеИЗаявкеНаПеренос(
	ЗадачаСсылка, ЗаявкаСсылка, СУчетомИтерации = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		 "ВЫБРАТЬ
		 |	КОЛИЧЕСТВО(ПереносыСроковВыполненияПроцессовИЗадач.Предмет) КАК КоличествоЗаписей
		 |ИЗ
		 |	РегистрСведений.ПереносыСроковВыполненияПроцессовИЗадач КАК ПереносыСроковВыполненияПроцессовИЗадач
		 |ГДЕ
		 |	ПереносыСроковВыполненияПроцессовИЗадач.Предмет В (&Задачи)
		 |	И ПереносыСроковВыполненияПроцессовИЗадач.БизнесПроцессПереноса = &Заявка
		 |	 [УсловиеИтерация] ";
		 
	ЗадачиМассив = Новый Массив();
	ЗадачиМассив.Добавить(ЗадачаСсылка);
	Если ТипЗнч(ЗадачаСсылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ЗадачиМассив.Добавить(ЗадачаСсылка.БизнесПроцесс);
	ИначеЕсли ТипЗнч(ЗадачаСсылка) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		ЗадачиМассив.Добавить(ЗадачаСсылка.Задача);
	КонецЕсли;
	Запрос.УстановитьПараметр("Задачи", ЗадачиМассив);
	Запрос.УстановитьПараметр("Заявка", ЗаявкаСсылка);
	Если СУчетомИтерации Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"[УсловиеИтерация]",
			" И ПереносыСроковВыполненияПроцессовИЗадач.Итерация = &Итерация");
		Запрос.УстановитьПараметр("Итерация", ЗаявкаСсылка.Итерация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "[УсловиеИтерация]", "");
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоЗаписей;
	КонецЕсли;
	
	Возврат 0;	
	
КонецФункции

// Инициализирует реквизиты формы для учета переносов сроков.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма процесса.
//  Отказ - Булево
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Форма.ВестиУчетПереносаСроков = ПолучитьФункциональнуюОпцию("ВестиУчетПереносовСроковЗадач");
	
	Если Форма.Параметры.Свойство("ЗаявкаНаПереносСрока") Тогда
		Форма.ЗаявкаНаПереносСрока = Форма.Параметры.ЗаявкаНаПереносСрока;
	КонецЕсли;
	
КонецПроцедуры

// Передает Причину переноса срока в доп. параметры объекта из структуры параметров.
//
// Параметры:
//  Объект - БизнесПроцессОбъект, ЗадачаОбъект
//  ПараметрыЗаписи - Структура
//
Процедура ПередатьПричинуИЗаявкуНаПереносаСрока(Объект, Параметры) Экспорт
	
	Если Параметры.Свойство("ПричинаПереносаСрока") Тогда
		Объект.ДополнительныеСвойства.Вставить("ПричинаПереносаСрока", Параметры.ПричинаПереносаСрока);
	КонецЕсли;
	
	Если Параметры.Свойство("БизнесПроцессПереноса") Тогда
		Объект.ДополнительныеСвойства.Вставить("БизнесПроцессПереноса", Параметры.БизнесПроцессПереноса);
	КонецЕсли;
	
КонецПроцедуры

// Переносит срок исполнения задачи по заявке.
//
// Параметры:
//  НовыйСрок - Дата - новый срок задачи.
//  ПричинаПереносаСрока - Строка - причина, по которой переносится срок задачи.
//  ЗаявкаНаПереносСрока - БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач - заявка на перенос срока.
//  ПеренесСрок - СправочникСсылка.Сотрудники, СправочникСсылка.Пользователи.
//
Процедура ПеренестиСрокЗадачиПоЗаявке(НовыйСрок, ПричинаПереносаСрока, ЗаявкаНаПереносСрока, ПеренесСрок) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыЗаявки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЗаявкаНаПереносСрока, "ПредметРассмотрения, Автор");
	
	Если ТипЗнч(РеквизитыЗаявки.ПредметРассмотрения) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		ЗадачаИсполнителя = РеквизитыЗаявки.ПредметРассмотрения;
		Процесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаИсполнителя, "БизнесПроцесс");
		
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("Процесс", Процесс);
		ПараметрыВыполнения.Вставить("ЗаявкаНаПереносСрока", ЗаявкаНаПереносСрока);
		ПараметрыВыполнения.Вставить("ПричинаПереносаСрока", ПричинаПереносаСрока);
		ПараметрыВыполнения.Вставить("НовыйСрок", НовыйСрок);
		
		Если ОбработкаОчередиЗаданийСервер.ДобавитьЗаданиеПереносСрокаВыполненияЗадачи(
				ЗадачаИсполнителя, ПараметрыВыполнения) Тогда
			
			Возврат;
		КонецЕсли;
		
		МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Процесс);
		МенеджерПроцесса.ИзменитьСрокИсполненияЗадачи(ЗадачаИсполнителя, ПараметрыВыполнения);
		
	ИначеЕсли ТипЗнч(РеквизитыЗаявки.ПредметРассмотрения) = Тип("ДокументСсылка.Задача")
		Или ТипЗнч(РеквизитыЗаявки.ПредметРассмотрения) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		
		ДействиеЗадачи = Неопределено;
		
		Если ТипЗнч(РеквизитыЗаявки.ПредметРассмотрения) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
			ДействиеЗадачи = РеквизитыЗаявки.ПредметРассмотрения;
			Задача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеЗадачи, "Задача");
		ИначеЕсли ТипЗнч(РеквизитыЗаявки.ПредметРассмотрения) = Тип("ДокументСсылка.Задача") Тогда
			Задача = РеквизитыЗаявки.ПредметРассмотрения;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		НачатьТранзакцию();
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Задача);
			
			ДействиеЗадачиРеквизиты = Неопределено;
			
			Если ЗначениеЗаполнено(ДействиеЗадачи) Тогда
				ЗаблокироватьДанныеДляРедактирования(ДействиеЗадачи);
				
				ДействиеЗадачиРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					ДействиеЗадачи, "Источник, ИдентификаторВИсточнике");
			КонецЕсли;	
			
			ЭтоОзнакомление = Ложь;
			Если ТипЗнч(РеквизитыЗаявки.ПредметРассмотрения) = Тип("ДокументСсылка.ДействиеЗадачи")
				И ЗначениеЗаполнено(ДействиеЗадачиРеквизиты.Источник)
				И ЗначениеЗаполнено(ДействиеЗадачиРеквизиты.ИдентификаторВИсточнике)
				И ТипЗнч(ДействиеЗадачиРеквизиты.Источник) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
				ЭтоОзнакомление = Истина;
			КонецЕсли;	
			
			Если Не ЭтоОзнакомление Тогда
				ЗадачаОбъект = Задача.ПолучитьОбъект();
				
				СтарыйСрок = ЗадачаОбъект.Срок;
				ЗадачаОбъект.Срок = НовыйСрок;
				
				Если ЗначениеЗаполнено(ПеренесСрок) Тогда
					ЗадачаОбъект.ДополнительныеСвойства.Вставить(
						"ПеренесСрок",
						ПеренесСрок);
				КонецЕсли;
				
				ЗадачаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			
			ДействиеЗадачиРеквизиты = Неопределено;
			
			Если ЗначениеЗаполнено(ДействиеЗадачи) Тогда
				ЗаблокироватьДанныеДляРедактирования(ДействиеЗадачи);				
				
				ДействиеЗадачиРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					ДействиеЗадачи, "Источник, ИдентификаторВИсточнике");
			КонецЕсли;	
			
			РегистрыСведений.ПереносыСроковВыполненияПроцессовИЗадач.Добавить(
				РеквизитыЗаявки.ПредметРассмотрения,
				СтарыйСрок,
				НовыйСрок,
				ПричинаПереносаСрока,
				ЗаявкаНаПереносСрока);
				
			Если ТипЗнч(РеквизитыЗаявки.ПредметРассмотрения) = Тип("ДокументСсылка.ДействиеЗадачи")
				И ЗначениеЗаполнено(ДействиеЗадачиРеквизиты.Источник)
				И ЗначениеЗаполнено(ДействиеЗадачиРеквизиты.ИдентификаторВИсточнике)
				И ТипЗнч(ДействиеЗадачиРеквизиты.Источник) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
				
				РегистрыСведений.УчастникиОзнакомлений.ПеренестиСрок(
					ДействиеЗадачиРеквизиты.Источник,
					ДействиеЗадачиРеквизиты.ИдентификаторВИсточнике,
					НовыйСрок);
				
				ИнтеграцияЗадач.ОбновитьДействиеЗадачиПоДействиюОзнакомления(
					ДействиеЗадачиРеквизиты.Источник,
					ДействиеЗадачиРеквизиты.ИдентификаторВИсточнике);	
				
			КонецЕсли;
			
			Если Не ЭтоОзнакомление 
				И ТипЗнч(РеквизитыЗаявки.ПредметРассмотрения) = Тип("ДокументСсылка.Задача")
				И ЗначениеЗаполнено(ЗадачаОбъект.Источник)
				И ЗначениеЗаполнено(ЗадачаОбъект.ИдентификаторВИсточнике)
				И ТипЗнч(ЗадачаОбъект.Источник) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
					
					РегистрыСведений.УчастникиОзнакомлений.ПеренестиСрок(
						ЗадачаОбъект.Источник,
						ЗадачаОбъект.ИдентификаторВИсточнике,
						НовыйСрок);
					
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный тип предмета рассмотрения %1 (%2).'"),
			РеквизитыЗаявки.ПредметРассмотрения,
			ТипЗнч(РеквизитыЗаявки.ПредметРассмотрения));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обработчик подписки ПереносСроковИсполненияПередЗаписьюЗадач
//
Процедура ПереносСроковИсполненияПередЗаписьюЗадач(Источник, Отказ) Экспорт
	
	Если МиграцияПриложенийПереопределяемый.ЭтоЗагрузка(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(Источник.ИсточникДанных) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетПереносовСроковЗадач")
		Или Не Источник.ДополнительныеСвойства.Свойство("ПричинаПереносаСрока") Тогда
		
		Возврат;
	КонецЕсли;
	
	СрокИсполнения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "СрокИсполнения");
		
	Источник.ДополнительныеСвойства.Вставить("СтарыйСрокИсполнения", СрокИсполнения)
	
КонецПроцедуры

// Обработчик подписки ПереносСроковИсполненияПриЗаписиЗадач
//
Процедура ПереносСроковИсполненияПриЗаписиЗадач(Источник, Отказ) Экспорт
	
	Если МиграцияПриложенийПереопределяемый.ЭтоЗагрузка(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(Источник.ИсточникДанных) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетПереносовСроковЗадач")
		Или Не Источник.ДополнительныеСвойства.Свойство("ПричинаПереносаСрока")
		Или Источник.ДополнительныеСвойства.СтарыйСрокИсполнения = Источник.СрокИсполнения Тогда
		
		Возврат;
	КонецЕсли;
	
	ТекущийУзелОбмена = КОДПовтИсп.ИдентификаторТекущегоУзла();
	УзелПроцесса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.БизнесПроцесс, "УзелОбработки");
	
	Если УзелПроцесса <> ТекущийУзелОбмена Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ПереносыСроковВыполненияПроцессовИЗадач.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ДатаПереносаСрока = ТекущаяДатаСеанса();
	МенеджерЗаписи.Предмет = Источник.Ссылка;
	МенеджерЗаписи.СтарыйСрок = Источник.ДополнительныеСвойства.СтарыйСрокИсполнения;
	МенеджерЗаписи.НовыйСрок = Источник.СрокИсполнения;
	
	Если Источник.ДополнительныеСвойства.Свойство("ПричинаПереносаСрока") Тогда
		МенеджерЗаписи.КомментарийАвтора = Источник.ДополнительныеСвойства.ПричинаПереносаСрока;
	КонецЕсли;
	
	МенеджерЗаписи.Сотрудник = Сотрудники.ОсновнойСотрудник();
	
	Если Источник.ДополнительныеСвойства.Свойство("БизнесПроцессПереноса") Тогда
		МенеджерЗаписи.БизнесПроцессПереноса = Источник.ДополнительныеСвойства.БизнесПроцессПереноса;
		МенеджерЗаписи.Итерация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			МенеджерЗаписи.БизнесПроцессПереноса, "Итерация");
	КонецЕсли;
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Обработчик подписки ПереносСроковИсполненияПередЗаписьюПроцесса
//
Процедура ПереносСроковИсполненияПередЗаписьюПроцесса(Источник, Отказ) Экспорт
	
	Если МиграцияПриложенийПереопределяемый.ЭтоЗагрузка(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(Источник.ИсточникДанных) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетПереносовСроковЗадач")
		Или Не Источник.ДополнительныеСвойства.Свойство("ПричинаПереносаСрока") Тогда
		
		Возврат;
	КонецЕсли;
	
	СрокИсполненияПроцесса = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "СрокИсполненияПроцесса");
		
	Источник.ДополнительныеСвойства.Вставить("СтарыйСрокИсполненияПроцесса", СрокИсполненияПроцесса)
	
КонецПроцедуры

// Обработчик подписки ПереносСроковИсполненияПриЗаписиПроцесса
//
Процедура ПереносСроковИсполненияПриЗаписиПроцесса(Источник, Отказ) Экспорт
	
	Если МиграцияПриложенийПереопределяемый.ЭтоЗагрузка(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(Источник.ИсточникДанных) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетПереносовСроковЗадач")
		Или Не Источник.ДополнительныеСвойства.Свойство("ПричинаПереносаСрока")
		Или Источник.ДополнительныеСвойства.СтарыйСрокИсполненияПроцесса = Источник.СрокИсполненияПроцесса Тогда
		
		Возврат;
	КонецЕсли;
	
	ТекущийУзелОбмена = КОДПовтИсп.ИдентификаторТекущегоУзла();
	
	Если Источник.УзелОбработки <> ТекущийУзелОбмена Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ПереносыСроковВыполненияПроцессовИЗадач.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ДатаПереносаСрока = ТекущаяДатаСеанса();
	МенеджерЗаписи.Предмет = Источник.Ссылка;
	МенеджерЗаписи.СтарыйСрок = Источник.ДополнительныеСвойства.СтарыйСрокИсполненияПроцесса;
	МенеджерЗаписи.НовыйСрок = Источник.СрокИсполненияПроцесса;
	
	Если Источник.ДополнительныеСвойства.Свойство("ПричинаПереносаСрока") Тогда
		МенеджерЗаписи.КомментарийАвтора = Источник.ДополнительныеСвойства.ПричинаПереносаСрока;
	КонецЕсли;
	
	МенеджерЗаписи.Сотрудник = Сотрудники.ОсновнойСотрудник();
	
	Если Источник.ДополнительныеСвойства.Свойство("БизнесПроцессПереноса") Тогда
		МенеджерЗаписи.БизнесПроцессПереноса = Источник.ДополнительныеСвойства.БизнесПроцессПереноса;
		МенеджерЗаписи.Итерация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			МенеджерЗаписи.БизнесПроцессПереноса, "Итерация");
	КонецЕсли;
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

#КонецОбласти