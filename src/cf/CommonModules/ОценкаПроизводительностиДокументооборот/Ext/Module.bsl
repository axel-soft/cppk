#Область ПрограммныйИнтерфейс

// Сохраняет замеры во внешний буфер данных.
//
// Параметры:
//  ЗаписиНабора - НаборЗаписей или МенеджерЗаписи регистра ЗамерыВремени или ЗамерыВремениТехнологические.
//
Процедура ЗаписатьЗамерыВоВнешнийБуфер(Знач ЗаписиНабора) Экспорт
	
	ТипЗаписей = ТипЗнч(ЗаписиНабора);
	Технологический = 
		ТипЗаписей = Тип("РегистрСведенийНаборЗаписей.ЗамерыВремениТехнологические")
		Или ТипЗаписей = Тип("РегистрСведенийМенеджерЗаписи.ЗамерыВремениТехнологические");
	НомерСеанса = НомерСеансаИнформационнойБазы();
	НомерСоединения = НомерСоединенияИнформационнойБазы();
	ДатаЗаписи = Дата(1,1,1) + ТекущаяУниверсальнаяДатаВМиллисекундах()/1000;
	Ключ = ОценкаПроизводительностиДокументооборот.КлючХраненияЗамеров(
		Технологический, ДатаЗаписи, НомерСеанса, НомерСоединения);
		
	// Преобразование менеджера записи в набор.
	Набор = ЗаписиНабора;
	ИмяРегистраЗамеров = ?(Технологический,
		Метаданные.РегистрыСведений.ЗамерыВремениТехнологические.Имя,
		Метаданные.РегистрыСведений.ЗамерыВремени.Имя);
	ЭтоМенеджерЗаписи = ТипЗнч(ЗаписиНабора) = Тип("РегистрСведенийМенеджерЗаписи." + ИмяРегистраЗамеров);
	Если ЭтоМенеджерЗаписи Тогда
		Набор = РегистрыСведений[ИмяРегистраЗамеров].СоздатьНаборЗаписей();
		ЗаполнитьЗначенияСвойств(Набор.Добавить(), ЗаписиНабора);
	КонецЕсли;
	
	// Запись набора в буфер.
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто));
 	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, Набор, НазначениеТипаXML.Явное);
	СтрокаДляЗаписи = ЗаписьJSON.Закрыть() + ",";
	Попытка
		ВнешнийБуферДанных.Записать(Ключ, СтрокаДляЗаписи);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Выгрузка замеров времени'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			СтрШаблон(НСтр("ru = 'При выгрузке замера по ключу ""%1"" возникла ошибка:
					|%2
					|Текст выгрузки:
					|%3'"),
				Ключ, ТекстОшибки, СтрокаДляЗаписи));
	КонецПопытки;

КонецПроцедуры

// Возвращает ключ хранения замера во внешнем буфере данных.
//
// Параметры:
//  ДатаЗаписи - Дата - дата записи замера.
//  НомерСеанса - Число - номер сеанса.
//  ДляТехнологическихЗамеров - Булево - Истина, если по полученному ключу нужно хранить тех. замеры.
// 
// Возвращаемое значение:
//  Строка - ключ для работы с внешним буфером данных.
//
Функция КлючХраненияЗамеров(ДляТехнологическихЗамеров, ДатаЗаписи, НомерСеанса, НомерСоединения) Экспорт
	
	ПериодСменыФайлаВМинутах = 5;
	ДатаЗаписиСтрокой = Формат(ДатаЗаписи, "ДФ=""ггггММддЧЧ""");
	КолМинут = Минута(ДатаЗаписи);
	КолМинутСтрокойОкр = Формат(КолМинут - КолМинут % ПериодСменыФайлаВМинутах, "ЧЦ=2; ЧВН=; ЧН=00");
	ДатаЗаписиСтрокойОкр = ДатаЗаписиСтрокой + КолМинутСтрокойОкр;
	
	РазделительПути = ПолучитьРазделительПути();
	Возврат СтрШаблон("Measurements%1%2%3%4_%5_%6",
		РазделительПути, ?(ДляТехнологическихЗамеров, "Tech", "App"),
		РазделительПути, ДатаЗаписиСтрокойОкр,
		Формат(НомерСеанса, "ЧГ=0; ЧН=0"),
		Формат(НомерСоединения, "ЧГ=0; ЧН=0"));
	
КонецФункции

// Усредняет замеры времени, записанные во внешний буфер данных, и записывает их в базу.
//
Процедура ЗагрузитьЗамерыИзВнешнегоБуфера() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ЗагрузкаЗамеровВремени);
	
	Если Не ОценкаПроизводительностиДокументооборотПовтИсп.ЗаписыватьЗамерыВоВнешнийБуфер() Тогда
		Возврат;
	КонецЕсли;
	
	КлючеваяОперация = НСтр("ru = 'Загрузка замеров, общее время'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	НачалоЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	НомераАктивныхСеансов = Новый Соответствие;
	СеансыИБ = ПолучитьСеансыИнформационнойБазы();
	Для Каждого СеансИБ Из СеансыИБ Цикл
		НомераАктивныхСеансов[СеансИБ.НомерСеанса] = Истина;
	КонецЦикла;
	
	ПримерКлючаДляТекущейДаты = КлючХраненияЗамеров(Ложь, ТекущаяУниверсальнаяДата(), 0, 0);
	ТекущаяДатаОкр = ДанныеКлючаХраненияЗамеров(ПримерКлючаДляТекущейДаты).Дата;
	РазделительПути = ПолучитьРазделительПути();
	ПозицияПервогоРазделителя = СтрНайти(ПримерКлючаДляТекущейДаты, РазделительПути);
	Маска = Лев(ПримерКлючаДляТекущейДаты, ПозицияПервогоРазделителя) + "*";
	НайденныеКлючи = ВнешнийБуферДанных.НайтиКлючи(Маска);
	
	Для Каждого Ключ Из НайденныеКлючи Цикл
		
		ЭтоНезагруженныйКлюч = СтрНайти(Ключ, ИмяГруппыНезагруженныхКлючей()) > 0;
		Если ЭтоНезагруженныйКлюч Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеКлюча = ДанныеКлючаХраненияЗамеров(Ключ);
		ЭтоЗамерыАктивногоСеанса = НомераАктивныхСеансов[ДанныеКлюча.НомерСеанса] <> Неопределено;
		ЭтоКлючПрошедшегоПериода = ДанныеКлюча.Дата < ТекущаяДатаОкр;
		Если ЭтоЗамерыАктивногоСеанса И Не ЭтоКлючПрошедшегоПериода Тогда
			Продолжить;
		КонецЕсли;
		
		// Загрузка и удаление в одной транзакции.
		НачатьТранзакцию();
		Попытка
			ТекстЗамеров = ВнешнийБуферДанных.Прочитать(Ключ);
			Если ТекстЗамеров = Неопределено Тогда
				ТекстОшибки = НСтр("ru = 'Не удалось получить текст по ключу'");
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			ЭтоТехнологическиеЗамеры = СтрНайти(Ключ, ИмяГруппыДляТехнологическихЗАмеров()) > 0;
			ЗагрузитьЗамерыИзТекста(ТекстЗамеров, ЭтоТехнологическиеЗамеры);
			УдалениеВыполненоУспешно = ВнешнийБуферДанных.Удалить(Ключ);
			Если УдалениеВыполненоУспешно Тогда
				ЗафиксироватьТранзакцию();
			Иначе
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Загрузка замеров времени'"),
					УровеньЖурналаРегистрации.Предупреждение,,,
					СтрШаблон(НСтр("ru = 'Не удалось удалить ключ ""%1"" после загрузки данных'"), Ключ));
				ОтменитьТранзакцию();
			КонецЕсли;
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Загрузка замеров времени'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				СтрШаблон(НСтр("ru = 'При загрузке замеров по ключу ""%1"" возникла ошибка:
					|%2'"), Ключ, ТекстОшибки));
			ОтменитьТранзакцию();
			// Перемещение для предотвращения повторной обработки.
			Попытка
				ПозицияПоследнегоРазделителя = СтрНайти(Ключ, РазделительПути, НаправлениеПоиска.СКонца);
				НовыйКлюч = СтрШаблон(
					Лев(Ключ, ПозицияПоследнегоРазделителя) + "%1" + Сред(Ключ, ПозицияПоследнегоРазделителя),
					ИмяГруппыНезагруженныхКлючей());
				ВнешнийБуферДанных.Переместить(Ключ, НовыйКлюч);
			Исключение
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Загрузка замеров времени'"),
					УровеньЖурналаРегистрации.Ошибка,,,
					СтрШаблон(НСтр("ru = 'При перемещении информации из ""%1"" в ""%2"" возникла ошибка:
						|%3'"), Ключ, НовыйКлюч, ТекстОшибки));
			КонецПопытки;
		КонецПопытки;
		
	КонецЦикла;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, НачалоЗамера);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеКлючаХраненияЗамеров(Ключ)
	
	ДанныеКлюча = Новый Структура("Дата, НомерСеанса");
	ПозицияПоследнегоРазделителя = СтрНайти(Ключ, ПолучитьРазделительПути(), НаправлениеПоиска.СКонца);
	СтрокиДатаСеансСоединение = СтрРазделить(Сред(Ключ, ПозицияПоследнегоРазделителя + 1), "_");
	ДанныеКлюча.Дата = Дата(СтрокиДатаСеансСоединение[0]);
	ДанныеКлюча.НомерСеанса = Число(СтрокиДатаСеансСоединение[1]);
	
	Возврат ДанныеКлюча;
	
КонецФункции

Функция ИмяГруппыНезагруженныхКлючей()
	
	Возврат "Errors";
	
КонецФункции

Функция ИмяГруппыДляТехнологическихЗАмеров()
	
	Возврат "Tech";
	
КонецФункции

Процедура ЗагрузитьЗамерыИзТекста(ТекстЗамеров, ЭтоТехнологическиеЗамеры)
	
	КлючеваяОперация = НСтр("ru = 'Загрузка замеров, один файл'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	НачалоЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	// Добавление символов начала и конца массива.
	ТекстЗамеровБезЗапятой = ТекстЗамеров;
	Если Прав(ТекстЗамеров, 1) = "," Тогда
		ТекстЗамеровБезЗапятой = Лев(ТекстЗамеров, СтрДлина(ТекстЗамеров) - 1);
	КонецЕсли;
	ТекстДляЧтения = "{
		|""#type"": ""jv8:Array"",
		|""#value"": ["
		+ Символы.ПС + ТекстЗамеровБезЗапятой + Символы.ПС + "]}";
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстДляЧтения);
	Попытка
		ПрочитанныеОбъекты = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
	Исключение
		ТекстОшибки = НСтр("ru = 'Не удалось прочитать JSON'");
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	// Заполнение набора записей.
	НаборЗамеров = ?(ЭтоТехнологическиеЗамеры, 
		РегистрыСведений.ЗамерыВремениТехнологические.СоздатьНаборЗаписей(),
		РегистрыСведений.ЗамерыВремени.СоздатьНаборЗаписей());
	ТипНабораЗаписей = ТипЗнч(НаборЗамеров);
	Для Каждого ПрочитанныйНабор Из ПрочитанныеОбъекты Цикл
		Если ТипЗнч(ПрочитанныйНабор) <> ТипНабораЗаписей Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Неожиданный тип прочитанного объекта ""%1""'"),
				ТипЗнч(ПрочитанныйНабор));
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		Для Каждого Запись Из ПрочитанныйНабор Цикл
			ЗаполнитьЗначенияСвойств(НаборЗамеров.Добавить(), Запись);
		КонецЦикла;
	КонецЦикла;
	
	// Запись набора без замещения.
	НаборЗамеров.Записать(Ложь);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, НачалоЗамера);
	
КонецПроцедуры

#КонецОбласти
