///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбщиеПроцедурыИФункции

// Получает доступность функционала версии web-сервиса БИД.
//
// Параметры:
//   ИнтегрированнаяСистема - ПланОбменаСсылка.ИнтегрированныеСистемы - система, для которой
//     требуется проверить доступность функционала.
//   ВерсияСервиса - Строка - версия web-сервиса БИД, содержащая требуемый функционал.
//   Оптимистично - Булево - признак необходимости вернуть Истина, если версия сервиса пока неизвестна.
//
// Возвращаемое значение:
//   Булево
//
Функция ДоступенФункционалВерсииСервиса(ИнтегрированнаяСистема, ВерсияСервиса = "", Оптимистично = Ложь) Экспорт
	
	ТекущаяВерсия = РаботаСИнтегрированнымиСистемамиВызовСервера.ВерсияСервиса(ИнтегрированнаяСистема);
	Если ТекущаяВерсия = "0.0.0.0" Тогда // Ошибка подключения.
		Возврат Ложь;
		
	ИначеЕсли ПустаяСтрока(ТекущаяВерсия) Тогда // В процессе получения.
		Если Оптимистично Тогда
			Возврат Истина; // Пока не знаем, но, скорее всего, доступна.
		Иначе
			Возврат Ложь; // Пока не знаем, но, скорее всего, недоступна.
		КонецЕсли;
		
	ИначеЕсли ПустаяСтрока(ВерсияСервиса) Тогда // Не важно какая версия.
		Возврат Истина;
		
	КонецЕсли;
	
	ОписаниеТекущейВерсии = СтрРазделить(ТекущаяВерсия, ".");
	ОписаниеТребуемойВерсии = СтрРазделить(ВерсияСервиса, ".");
	
	ОписаниеТипа = Новый ОписаниеТипов("Число");
	ОписаниеОписаниеТекущейВерсии0 = ОписаниеТипа.ПривестиЗначение(ОписаниеТекущейВерсии[0]);
	ОписаниеТребуемойВерсии0 = ОписаниеТипа.ПривестиЗначение(ОписаниеТребуемойВерсии[0]);
	ОписаниеОписаниеТекущейВерсии1 = ОписаниеТипа.ПривестиЗначение(ОписаниеТекущейВерсии[1]);
	ОписаниеТребуемойВерсии1 = ОписаниеТипа.ПривестиЗначение(ОписаниеТребуемойВерсии[1]);
	ОписаниеОписаниеТекущейВерсии2 = ОписаниеТипа.ПривестиЗначение(ОписаниеТекущейВерсии[2]);
	ОписаниеТребуемойВерсии2 = ОписаниеТипа.ПривестиЗначение(ОписаниеТребуемойВерсии[2]);
	ОписаниеОписаниеТекущейВерсии3 = ОписаниеТипа.ПривестиЗначение(ОписаниеТекущейВерсии[3]);
	ОписаниеТребуемойВерсии3 = ОписаниеТипа.ПривестиЗначение(ОписаниеТребуемойВерсии[3]);
	
	НомерНеМеньше = Ложь;
	Если ОписаниеОписаниеТекущейВерсии0 > ОписаниеТребуемойВерсии0 Тогда
		НомерНеМеньше = Истина;
	ИначеЕсли ОписаниеОписаниеТекущейВерсии0 = ОписаниеТребуемойВерсии0 Тогда
		Если ОписаниеОписаниеТекущейВерсии1 > ОписаниеТребуемойВерсии1 Тогда
			НомерНеМеньше = Истина;
		ИначеЕсли ОписаниеОписаниеТекущейВерсии1 = ОписаниеТребуемойВерсии1 Тогда
			Если ОписаниеОписаниеТекущейВерсии2 > ОписаниеТребуемойВерсии2 Тогда
				НомерНеМеньше = Истина;
			ИначеЕсли ОписаниеОписаниеТекущейВерсии2 = ОписаниеТребуемойВерсии2 Тогда
				Если ОписаниеОписаниеТекущейВерсии3 >= ОписаниеТребуемойВерсии3 Тогда
					НомерНеМеньше = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НомерНеМеньше;
	
КонецФункции

// Возвращает имя метаданных без пробелов.
//
// Параметры:
//   ИмяМетаданных - Строка - произвольное имя метаданных.
//
// Возвращаемое значение:
//   Строка
//
Функция ИмяБезПробелов(ЗНАЧ ИмяМетаданных) Экспорт
	
	ИмяМетаданных = ТРег(ИмяМетаданных);
	ИмяМетаданных = СтрЗаменить(ИмяМетаданных, " ", "");
	
	Возврат ИмяМетаданных;
	
КонецФункции

// Возвращает локализованное имя события журнала регистрации для интеграции с ДО.
//
// Параметры:
//   СобытиеВторогоУровня - Строка - имя события, добавляемое через точку к имени события по умолчанию.
//
// Возвращаемое значение:
//   Строка - Интеграция с 1С:Документооборотом
//        или Интеграция с 1С:Документооборотом.<ИмяСобытияВторогоУровня>.
//
Функция ИмяСобытияЖурналаРегистрации(СобытиеВторогоУровня = "") Экспорт
	
	Если СобытиеВторогоУровня = "" Тогда
		Возврат НСтр("ru = 'Интеграция с БИД'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	Иначе
		Возврат СтрШаблон("%1.%2",
			НСтр("ru = 'Интеграция с БИД'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			СобытиеВторогоУровня);
	КонецЕсли;
	
КонецФункции

// Функция-конструктор, описывающая структуру печатной формы объекта ИС.
//
// Возвращаемое значение:
//   Структура:
//     * ИмяКоманды - Строка - имя команды менеджера печати.
//     * МенеджерПечати - Строка - имя объекта, в модуле менеджера которого располагается
//         процедура Печать, формирующая табличные документы для этой команды.
//     * ПредставлениеКоманды - Строка - представление команды печати для отображения на формах.
//     * ДополнительныеПараметры - Строка - (необязательный) произвольные параметры для передачи в менеджер печати.
//
Функция ПечатнаяФормаОбъектаИС() Экспорт
	
	ПечатнаяФорма = Новый Структура;
	ПечатнаяФорма.Вставить("ИмяКоманды", "");
	ПечатнаяФорма.Вставить("МенеджерПечати", "");
	ПечатнаяФорма.Вставить("ПредставлениеКоманды", "");
	ПечатнаяФорма.Вставить("ДополнительныеПараметры", "");
	
	Возврат ПечатнаяФорма;
	
КонецФункции

// Создает прокси веб-сервиса БИД. В случае ошибки при создании вызывается исключение.
//
// Параметры:
//   МестоположениеWSDL - Строка - адрес веб-сервиса БИД.
//   ИмяПользователя - Строка - имя пользователя ИС.
//   Пароль - Строка - пароль пользователя ИС.
//
// Возвращаемое значение:
//   WSПрокси - прокси веб-сервиса.
//   Неопределено - если произошла ошибка подключения.
//
Функция ПолучитьПрокси(МестоположениеWSDL, ИмяПользователя, Пароль) Экспорт
	
	ТекстОшибки = Новый Массив;
	Если ЗначениеЗаполнено(МестоположениеWSDL) Тогда
		ТекстОшибки.Добавить(СтрШаблон(НСтр("ru = 'Ошибка подключения к %1.'"), МестоположениеWSDL));
	Иначе
		ТекстОшибки.Добавить(НСтр("ru = 'Ошибка подключения.'"));
	КонецЕсли;
	ТекстОшибки.Добавить("");
	
	Если Не ЗначениеЗаполнено(МестоположениеWSDL) Тогда
		ТекстОшибки.Добавить(НСтр("ru = 'Не указано местоположение WSDL. Обратитесь к администратору системы.'"));
		ВызватьИсключение СтрСоединить(ТекстОшибки, Символы.ПС);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяПользователя) Тогда
		ТекстОшибки.Добавить(НСтр(
			"ru = 'Не указано имя пользователя веб-сервиса интегрированной системы.
			|Обратитесь к администратору системы.'"));
		ВызватьИсключение СтрСоединить(ТекстОшибки, Символы.ПС);
	КонецЕсли;
	
	ОкончаниеWSDL = Прав(МестоположениеWSDL, 1);
	Если ОкончаниеWSDL <> "/" И ОкончаниеWSDL <> "\" Тогда
		МестоположениеWSDL = МестоположениеWSDL + "/";
	КонецЕсли;
	
	Таймаут = ТаймаутСервиса();
	
	ИнтернетПрокси = Неопределено;
	РаботаСИнтегрированнымиСистемамиПереопределяемый.ПриПолученииWSПрокси(ИнтернетПрокси);
	
	ЗащищенноеСоединение = Неопределено;
	РаботаСИнтегрированнымиСистемамиПереопределяемый.ПриСозданииЗащищенногоСоединения(
		ЗащищенноеСоединение,
		МестоположениеWSDL);
	
	// При необходимости создадим защищенное соединение. Используем сертификаты из хранилища
	// Windows, если это имеет смысл для текущей платформы.
	ЭтоСоединениеSSL = СтрНачинаетсяС(МестоположениеWSDL, "https");
	Если ЗащищенноеСоединение = Неопределено И ЭтоСоединениеSSL Тогда
		Если СерверРаботаетПодWindows() Тогда
			ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(
				Новый СертификатКлиентаWindows(),
				Новый СертификатыУдостоверяющихЦентровWindows());
		Иначе
			ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(
				Неопределено,
				Новый СертификатыУдостоверяющихЦентровLinux());
		КонецЕсли;
	КонецЕсли;
	
	ТекстОшибки.Добавить(
		НСтр("ru = 'Возможно, не прошла авторизация, указан неверный адрес веб-сервиса
			|или интегрируемая система не опубликована на веб-сервере.
			|
			|Подробности в журнале регистрации. Обратитесь к администратору системы.'"));
	
	Попытка
		Определения = Новый WSОпределения(МестоположениеWSDL + "ws/dmil.1cws?wsdl",
			ИмяПользователя,
			Пароль,
			ИнтернетПрокси,
			Таймаут,
			ЗащищенноеСоединение);
	Исключение
		Определения = Неопределено;
		ТекстСообщенияОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Определения = Неопределено Тогда
		Попытка
			Определения = Новый WSОпределения(МестоположениеWSDL + "ws/DMILService?wsdl",
				ИмяПользователя,
				Пароль,
				ИнтернетПрокси,
				Таймаут,
				ЗащищенноеСоединение);
		Исключение
			Определения = Неопределено;
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке
				+ Символы.ПС
				+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЕсли;
	
	Если Определения = Неопределено Тогда
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщенияОбОшибке);
		ВызватьИсключение СтрСоединить(ТекстОшибки, Символы.ПС);
	КонецЕсли;
	
	Попытка
		Прокси = Новый WSПрокси(Определения,
			"http://www.1c.ru/dmil",
			"DMILService",
			"DMILServiceSoap",
			ИнтернетПрокси,
			Таймаут,
			ЗащищенноеСоединение);
	Исключение
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение СтрСоединить(ТекстОшибки, Символы.ПС);
	КонецПопытки;
	
	Прокси.Пользователь = ИмяПользователя;
	Прокси.Пароль = Пароль;
	
	Возврат Прокси;
	
КонецФункции

// Возвращает представление объекта интегрированной системы.
//
// Параметры:
//   ИнтегрированнаяСистема - ПланОбменаСсылка.ИнтегрированныеСистемы,
//                            Строка - система, список объектов которой требуется получить.
//   ПолноеИмяОбъекта - Строка - полное имя объекта. Например, Документ.ДемоДокумент.
//
// Возвращаемое значение:
//   Строка - представление объекта.
//
Функция ПредставлениеОбъектаИнтегрированнойСистемы(ИнтегрированнаяСистема, ПолноеИмяОбъекта) Экспорт
	
	СтруктураМетаданных = РаботаСИнтегрированнымиСистемамиПовтИсп.СтруктураМетаданныхОбъектаИнтегрированнойСистемы(
		ИнтегрированнаяСистема,
		ПолноеИмяОбъекта);
	
	Если СтруктураМетаданных = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Объект %1 отсутствует в структуре метаданных системы %2'"),
			ПолноеИмяОбъекта,
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИнтегрированнаяСистема, "Наименование"));
	Иначе
		Возврат СтруктураМетаданных.Синоним;
	КонецЕсли;
	
КонецФункции

// Возвращает представление реквизита объекта интегрированной системы.
//
// Параметры:
//   ИнтегрированнаяСистема - ПланОбменаСсылка.ИнтегрированныеСистемы,
//                            Строка - система, список объектов которой требуется получить.
//   ПолноеИмяОбъекта - Строка - полное имя объекта. Например, Документ.ДемоДокумент.
//   ИмяРеквизита - Строка - имя реквизита или табличной части, представление которого требуется получить.
//   ИмяТаблицыРеквизита - Строка - имя табличной части, к которой относится реквизит.
//
// Возвращаемое значение:
//   Строка - представление объекта.
//
Функция ПредставлениеРеквизитаОбъектаИнтегрированнойСистемы(ИнтегрированнаяСистема, ПолноеИмяОбъекта,
		Знач ИмяРеквизита, ИмяТаблицыРеквизита = "") Экспорт
	
	СтруктураМетаданных = РаботаСИнтегрированнымиСистемамиПовтИсп.СтруктураМетаданныхОбъектаИнтегрированнойСистемы(
		ИнтегрированнаяСистема,
		ПолноеИмяОбъекта);
	
	Если СтруктураМетаданных = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Объект %1 отсутствует в структуре метаданных системы %2'"),
			ПолноеИмяОбъекта,
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИнтегрированнаяСистема, "Наименование"));
	КонецЕсли;
	
	МассивИмен = СтрРазделить(ИмяРеквизита, ".");
	Если МассивИмен.Количество() > 1 Тогда
		ИмяТаблицыРеквизита = МассивИмен[0];
		ИмяРеквизита = МассивИмен[1];
	КонецЕсли;
	
	Для Каждого ЭлементСпискаМетаданных Из СтруктураМетаданных.Строки Цикл
		Если ЭлементСпискаМетаданных.Имя = "ТабличныеЧасти" Тогда
			Для Каждого ТабличнаяЧасть Из ЭлементСпискаМетаданных.Строки Цикл
				Если ИмяТаблицыРеквизита = "" И ТабличнаяЧасть.Имя = ИмяРеквизита Тогда
					Возврат ТабличнаяЧасть.Синоним;
				ИначеЕсли ИмяТаблицыРеквизита <> "" И ТабличнаяЧасть.Имя = ИмяТаблицыРеквизита Тогда
					Для Каждого Реквизит Из ТабличнаяЧасть.Строки Цикл
						Если Реквизит.Имя = ИмяРеквизита Тогда
							Возврат СтрШаблон("%1.%2", ТабличнаяЧасть.Синоним, Реквизит.Синоним);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ЭлементСпискаМетаданных.Имя = "Реквизиты" И ИмяТаблицыРеквизита = "" Тогда
			Для Каждого Реквизит Из ЭлементСпискаМетаданных.Строки Цикл
				Если Реквизит.Имя = ИмяРеквизита Тогда
					Возврат Реквизит.Синоним;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

// Проверяет возврат WEB-сервиса. В случае возврата объекта типа DMILError вызывает исключение.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам БИД.
//   Ответ - ОбъектXDTO - проверяемый результат вызова сервиса.
//
Процедура ПроверитьВозвратВебСервиса(Прокси, Ответ) Экспорт
	
	Если ПроверитьТип(Прокси, Ответ, "DMILError") Тогда
		
		ТекстОшибки = СокрЛП(Ответ.description);
		
		// Запишем в ЖР полный текст ошибки.
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(Ответ.subject),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
		
		ВызватьИсключение
			Ответ.subject + ":" + Символы.ПС + ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет тип объекта XDTO.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам БИД.
//   ОбъектXDTO - ОбъектXDTO - проверяемый объект
//   Тип - Строка - имя типа для проверки
//
// Возвращаемое значение:
//   Булево - Истина если объект является объектом указанного типа и Ложь в противном случае.
//
Функция ПроверитьТип(Прокси, ОбъектXDTO, Тип) Экспорт
	
	Если ОбъектXDTO.Тип() = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dmil", Тип) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает Истина, если сервер работает под Windows, и Ложь в противном случае.
//
// Возвращаемое значение:
//   Булево
//
Функция СерверРаботаетПодWindows() Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	
	Возврат (СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86)
		Или (СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64);
	
КонецФункции

// Создает объект DMILObjectID.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам БИД.
//   ID - Строка - идентификатор объекта XDTO
//   type - Строка - тип объекта XDTO
//
// Возвращаемое значение:
//  ОбъектXDTO
//
Функция СоздатьObjectID(Прокси, ID, type) Экспорт
	
	objectID = СоздатьОбъект(Прокси, "DMILObjectID");
	objectID.ID = ID;
	objectID.type = type;
	
	Возврат objectID;
	
КонецФункции

// Создает XDTO объект указанного типа из пространства имен "http://www.1c.ru/dmil".
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам БИД.
//   ТипОбъекта - Строка - тип объекта XDTO.
//
// Возвращаемое значение:
//   ОбъектXDTO
//
Функция СоздатьОбъект(Прокси, ТипОбъекта) Экспорт
	
	Если Прокси = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Интеграция с БИД не настроена, или сервис
			|БИД недоступен. Обратитесь к администратору.'");
	КонецЕсли;
	
	НовыйОбъект = Прокси.ФабрикаXDTO.Создать(Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dmil", ТипОбъекта));
	
	Если ОбработкаЗапросовXDTO.СвойствоСуществует(НовыйОбъект, "dataBaseID") Тогда
		НовыйОбъект.dataBaseID = РаботаСИнтегрированнымиСистемамиПовтИсп.ИдентификаторБазыДанных();
	КонецЕсли;
	
	Если ОбработкаЗапросовXDTO.СвойствоСуществует(НовыйОбъект, "versionNumber") Тогда
		НовыйОбъект.versionNumber = ОбработкаЗапросовXDTO.ВерсияСервиса();
	КонецЕсли;
	
	Если ОбработкаЗапросовXDTO.СвойствоСуществует(НовыйОбъект, "nodeID") Тогда
		НовыйОбъект.nodeID = Строка(КОДПовтИсп.ИдентификаторТекущегоУзла());
	КонецЕсли;
	
	Возврат НовыйОбъект;
	
КонецФункции

// Возвращает список печатных форм объекта интегрированной системы.
//
// Параметры:
//   ИнтегрированнаяСистема - ПланОбменаСсылка.ИнтегрированныеСистемы,
//                            Строка - система, список объектов которой требуется получить.
//   ПолноеИмяОбъекта - Строка - Полное имя объекта. Например, Документ.ДемоДокумент.
//
// Возвращаемое значение:
//   Массив из Структура - см. РаботаСИнтегрированнымиСистемами.ПечатнаяФормаОбъектаИС
//
Функция СписокПечатныхФормОбъектаИнтегрированнойСистемы(ИнтегрированнаяСистема, ПолноеИмяОбъекта) Экспорт
	
	СтруктураМетаданных = РаботаСИнтегрированнымиСистемамиПовтИсп.СтруктураМетаданныхОбъектаИнтегрированнойСистемы(
		ИнтегрированнаяСистема,
		ПолноеИмяОбъекта);
	
	Если СтруктураМетаданных = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Объект %1 отсутствует в структуре метаданных системы %2'"),
			ПолноеИмяОбъекта,
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИнтегрированнаяСистема, "Наименование"));
		
	Иначе
		
		Если РаботаСИнтегрированнымиСистемамиПовтИсп.ДоступенФункционалВерсииСервиса(
				ИнтегрированнаяСистема, "3.0.3.1") Тогда
			// В БИД версии 3.0.3.1 появилась возможность получать список печатных форм в запросе структуры
			// метаданных, если запрос выполняется для конкретного объекта ИС.
			Возврат СтруктураМетаданных.ПечатныеФормы;
			
		ИначеЕсли РаботаСИнтегрированнымиСистемамиПовтИсп.ДоступенФункционалВерсииСервиса(
				ИнтегрированнаяСистема, "3.0.2.2") Тогда
			// В БИД версий 3.0.2.2 - 3.0.2.7 список печатных форм объекта следует получать отдельным запросом.
			Возврат РаботаСИнтегрированнымиСистемамиПовтИсп.ПечатныеФормыОбъектаИнтегрированнойСистемы(
				ИнтегрированнаяСистема,
				ПолноеИмяОбъекта);
			
		Иначе
			// В ранних версиях БИД список печатных форм передавался в запросе общей структуры метаданных ИС.
			Возврат СтруктураМетаданных.ПечатныеФормы;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Возвращает список реквизитов объекта интегрированной системы.
//
// Параметры:
//   ИнтегрированнаяСистема - ПланОбменаСсылка.ИнтегрированныеСистемы,
//                            Строка - система, список объектов которой требуется получить.
//   ПолноеИмяОбъекта - Строка - Полное имя объекта. Например, Документ.ДемоДокумент.
//
// Возвращаемое значение:
//   КоллекцияСтрокДереваЗначений - структура метаданных:
//     * Имя - Строка
//     * Синоним - Строка
//     * ПечатныеФормы - Массив из Структура - см. РаботаСИнтегрированнымиСистемами.ПечатнаяФормаОбъектаИС
//     * СписокТипов - Массив из Строка
//     * Картинка - Картинка
//
Функция СписокРеквизитовОбъектаИнтегрированнойСистемы(ИнтегрированнаяСистема, ПолноеИмяОбъекта) Экспорт
	
	СтруктураМетаданных = РаботаСИнтегрированнымиСистемамиПовтИсп.СтруктураМетаданныхОбъектаИнтегрированнойСистемы(
		ИнтегрированнаяСистема,
		ПолноеИмяОбъекта);
	
	Если СтруктураМетаданных = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Объект %1 отсутствует в структуре метаданных системы %2'"),
			ПолноеИмяОбъекта,
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИнтегрированнаяСистема, "Наименование"));
	Иначе
		Возврат СтруктураМетаданных.Строки;
	КонецЕсли;
	
КонецФункции

// Возвращает структуру метаданных конфигурации, интегрированной через БИД.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам БИД.
//   ТипОбъектаИС - Строка - передается, если требуется получить структуру метаданных только одного конкретного
//     объекта интегрированной системы.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMILGetMetadataResponse.
//
Функция СтруктураМетаданныхСистемыИнтегрированнойБесшовно(Прокси, ТипОбъектаИС = Неопределено) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMILGetMetadataRequest");
	
	Если ЗначениеЗаполнено(ТипОбъектаИС) Тогда
		
		// Требуется получить структуру метаданных только одного конкретного объекта интегрированной системы.
		Если ОбработкаЗапросовXDTO.СвойствоСуществует(Запрос, "objects") Тогда
			Запрос.objects.Добавить(ТипОбъектаИС);
		КонецЕсли;
		
	Иначе
		
		// Требуется получить структуру метаданных всех объектов интегрированной системы.
		Если ОбработкаЗапросовXDTO.СвойствоСуществует(Запрос, "columnSet") Тогда
			// Веб-сервис БИД поддерживает получение реквизитов и печатных форм объектов через отдельный запрос.
			// В запросе структуры метаданных будем получать только сами объекты и их синонимы,
			// так как получение полной структуры метаданных может выполняться продолжительное время.
			Запрос.columnSet.Добавить("objectsOnly");
			Запрос.columnSet.Добавить("attributes"); // Для обратной совместимости со старыми версиями БИД.
			Запрос.columnSet.Добавить("tabularSections"); // Для обратной совместимости со старыми версиями БИД.
		КонецЕсли;
		
	КонецЕсли;
	
	Ответ = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Возврат Ответ;
	
КонецФункции

// Возвращает таймаут прокси веб-сервиса БИД, возможно, переопределенный в настройках.
//
// Возвращаемое значение:
//   Число - таймаут в секундах.
//
Функция ТаймаутСервиса() Экспорт
	
	Если ОбработкаЗапросовXDTOОбмен.ЭтоПользовательЗаданияОбмена() Тогда
		Таймаут = 60;
	Иначе
		Таймаут = 20;
	КонецЕсли;
	РаботаСИнтегрированнымиСистемамиПереопределяемый.ПриОпределенииТаймаутаСервиса(Таймаут);
	
	Возврат Таймаут;
	
КонецФункции

// Возвращает строковое представление типа.
//
// Параметры:
//   ТипРеквизитаОбъектаДО - Тип - тип реквизита.
//
// Возвращаемое значение:
//   Строка
//
Функция ТипРеквизитаОбъектаДОВСтроку(ТипРеквизитаОбъектаДО) Экспорт
	
	МассивТиповВСтроку = Новый Массив;
	Для Каждого ТипСвойства Из ТипРеквизитаОбъектаДО.Типы() Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипСвойства);
		Если ОбъектМетаданных = Неопределено Тогда
			ТипСтрокой = Строка(ТипСвойства);
		Иначе
			ТипСтрокой = ОбъектМетаданных.ПолноеИмя();
		КонецЕсли;
		МассивТиповВСтроку.Добавить(ТипСтрокой);
	КонецЦикла;
	Возврат СтрСоединить(МассивТиповВСтроку, ",");
	
КонецФункции

#КонецОбласти

#Область РаботаСВходящимиДанными

// Добавляет реквизит в структуру входящих данных.
//
// Параметры:
//   ВходящиеДанные - ОбъектXDTO - объект XDTO типа DMIncomingData.
//   ИмяРеквизита - Строка - имя реквизита.
//   ЗначениеРеквизита - ОбъектXDTO - значение реквизита.
//
// Пример:
//	ВходящиеДанные = РаботаСИнтегрированнымиСистемами.НоваяСтруктураВходящихДанных();
//
//	КонтрагентXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCorrespondent");
//	КонтрагентXDTO.name = "Клауст ЗАО";
//	КонтрагентXDTO.inn = "7773300607";
//	КонтрагентXDTO.kpp = "777701001";
//	КонтрагентXDTO.comment = "Контрагент из внешней системы";
//	КонтрагентXDTO.objectID = ОбработкаЗапросовXDTO.СоздатьObjectID("", "");
//	РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитВоВходящиеДанные(ВходящиеДанные,
//		"Контрагент",
//		КонтрагентXDTO);
//
//	ОтветственныйXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMUser");
//	ОтветственныйXDTO.name = "Иванов И.И.";
//	ОтветственныйXDTO.objectID = ОбработкаЗапросовXDTO.СоздатьObjectID("", "");
//	РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитВоВходящиеДанные(ВходящиеДанные,
//		"Ответственный",
//		ОтветственныйXDTO);
//
Процедура ДобавитьРеквизитВоВходящиеДанные(ВходящиеДанные, ИмяРеквизита, ЗначениеРеквизита = Неопределено) Экспорт
	
	Реквизит = ОбработкаЗапросовXDTO.СоздатьОбъект("DMDataAttribute");
	Реквизит.name = ИмяБезПробелов(ИмяРеквизита);
	Если ЗначениеРеквизита <> Неопределено Тогда
		Реквизит.value = ЗначениеРеквизита;
	КонецЕсли;
	
	ВходящиеДанные.attributes.Добавить(Реквизит);
	
КонецПроцедуры

// Добавляет реквизит в таблицу, которая будет помещена в структуру входящих данных.
//
// Параметры:
//   ВходящиеДанные - ОбъектXDTO - объект XDTO типа DMIncomingData.
//   ИмяТаблицы - Строка - имя таблицы. Если во входящих данных таблицы с таким именем нет - будет создана новая.
//   ИндексСтроки - Число - номер строки таблицы, куда требуется добавить реквизит. Нумерация начинается с 0.
//   ИмяРеквизита - Строка - имя реквизита.
//   ЗначениеРеквизита - ОбъектXDTO - значение реквизита.
//
// Пример:
//	ВходящиеДанные = РаботаСИнтегрированнымиСистемами.НоваяСтруктураВходящихДанных();
//
//	ИмяТаблицы = "СтатьиДДС";
//
//	ИндексСтроки = 0;
//	СтатьяДДСXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCashFlowItem");
//	СтатьяДДСXDTO.name = "Приобретение нематериальных активов";
//	СтатьяДДСXDTO.objectID = ОбработкаЗапросовXDTO.СоздатьObjectID("", "");
//	РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитТаблицыВоВходящиеДанные(ВходящиеДанные, ИмяТаблицы, ИндексСтроки,
//		"Статья",
//		СтатьяДДСXDTO);
//	РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитТаблицыВоВходящиеДанные(ВходящиеДанные, ИмяТаблицы, ИндексСтроки,
//		"Сумма",
//		300);
//
//	ИндексСтроки = 1;
//	СтатьяДДСXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCashFlowItem");
//	СтатьяДДСXDTO.name = "Уплата налогов и сборов";
//	СтатьяДДСXDTO.objectID = ОбработкаЗапросовXDTO.СоздатьObjectID("", "");
//	РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитТаблицыВоВходящиеДанные(ВходящиеДанные, ИмяТаблицы, ИндексСтроки,
//		"Статья",
//		СтатьяДДСXDTO);
//	РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитТаблицыВоВходящиеДанные(ВходящиеДанные, ИмяТаблицы, ИндексСтроки,
//		"Сумма",
//		100);
//
Процедура ДобавитьРеквизитТаблицыВоВходящиеДанные(ВходящиеДанные, ИмяТаблицы, ИндексСтроки,
		ИмяРеквизита, ЗначениеРеквизита) Экспорт
	
	Таблица = Неопределено;
	ТаблицуНужноДобавить = Ложь;
	Для Каждого ТаблицаXDTO Из ВходящиеДанные.tabularSections Цикл
		Если ТаблицаXDTO.name = ИмяБезПробелов(ИмяТаблицы) Тогда
			Таблица = ТаблицаXDTO;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Таблица = Неопределено Тогда
		Таблица = ОбработкаЗапросовXDTO.СоздатьОбъект("DMDataTabularSection");
		Таблица.name = ИмяБезПробелов(ИмяТаблицы);
		ТаблицуНужноДобавить = Истина;
	КонецЕсли;
	
	Если Таблица.rows.Количество() - 1 < ИндексСтроки Тогда
		СтрокаXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMDataTabularSectionRow");
		СтрокуНужноДобавить = Истина;
	Иначе
		СтрокаXDTO = Таблица.rows[ИндексСтроки];
		СтрокуНужноДобавить = Ложь;
	КонецЕсли;
	
	ДобавитьРеквизитВоВходящиеДанные(СтрокаXDTO, ИмяБезПробелов(ИмяРеквизита), ЗначениеРеквизита);
	
	Если СтрокуНужноДобавить Тогда
		Таблица.rows.Добавить(СтрокаXDTO);
	КонецЕсли;
	
	Если ТаблицуНужноДобавить Тогда
		ВходящиеДанные.tabularSections.Добавить(Таблица);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет объект 1С:Документооборот из входящих данных по правилу загрузки.
//
// Параметры:
//   ОбъектДО - СправочникОбъект - заполняемый объект ДО.
//   ВходящиеДанные - ОбъектXDTO - объект XDTO типа DMIncomingData. Входящие данные.
//   ПравилоЗагрузки - СправочникСсылка.ПравилаЗагрузкиДанныхВДО - правило загрузки данных.
//   Обновление - Булево - заполнять только реквизиты с Обновлять = Истина.
//
Процедура ЗаполнитьОбъектИзВходящихДанных(ОбъектДО, ВходящиеДанные, ПравилоЗагрузки, Обновление = Ложь) Экспорт
	
	ОбъектИС = ОбъектИСИзВходящихДанных(ВходящиеДанные);
	ЗначенияИзШаблона = Неопределено;
	
	ОбработкаОбъектаПередЗаполнением(ОбъектДО, ПравилоЗагрузки, ЗначенияИзШаблона);
	
	Для Каждого СтрокаПравилаЗаполнения Из ПравилоЗагрузки.ПравилаЗаполненияРеквизитовДО Цикл
		
		Если Обновление И Не СтрокаПравилаЗаполнения.Обновлять Тогда
			Продолжить;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаПравилаЗаполнения.ИмяМетодаДляЗаполнения)Тогда
			Параметры = ПараметрыМетодаДляЗаполненияОбъектаДО();
			Параметры.ПравилоЗаполненияРеквизита = СтрокаПравилаЗаполнения;
			Параметры.ОбъектДО = ОбъектДО;
			Параметры.ОбъектИС = ОбъектИС;
			Параметры.ПравилоЗагрузки = ПравилоЗагрузки;
			Параметры.ВходящиеДанные = ВходящиеДанные;
			Параметры.ЗначенияИзШаблона = ЗначенияИзШаблона;
			ОбработкаЗапросовXDTO.ВыполнитьВБезопасномРежиме(
				СтрШаблон("%1(Параметры)", СтрокаПравилаЗаполнения.ИмяМетодаДляЗаполнения),
				Параметры);
			
		ИначеЕсли СтрокаПравилаЗаполнения.ЭтоТаблица Тогда
			// Заполняем табличную часть объекта ДО.
			ЗаполнитьТаблицуПоПравилу(
				СтрокаПравилаЗаполнения,
				ОбъектДО,
				ОбъектДО[СтрокаПравилаЗаполнения.ИмяРеквизитаОбъектаДО],
				ОбъектИС,
				ПравилоЗагрузки,
				ВходящиеДанные,
				ЗначенияИзШаблона);
			
		ИначеЕсли СтрокаПравилаЗаполнения.ЭтоДополнительныйРеквизитДО Тогда
			// Заполняем дополнительный реквизит объекта ДО.
			Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(
				Новый УникальныйИдентификатор(СтрокаПравилаЗаполнения.ИмяРеквизитаОбъектаДО));
			СтрокиРеквизита = ОбъектДО.ДополнительныеРеквизиты.НайтиСтроки(
				Новый Структура("Свойство", Свойство));
			Если СтрокиРеквизита.Количество() = 0 Тогда
				СтрокаРеквизита = ОбъектДО.ДополнительныеРеквизиты.Добавить();
				СтрокаРеквизита.Свойство = Свойство;
			Иначе
				СтрокаРеквизита = СтрокиРеквизита[0];
			КонецЕсли;
			ТипРеквизитаОбъектаДОВСтроку = СтрокаПравилаЗаполнения.ТипРеквизитаОбъектаДОВСтроку;
			Если ТипРеквизитаОбъектаДОВСтроку = "Справочник.ЗначенияСвойствОбъектов"
					Или ТипРеквизитаОбъектаДОВСтроку = "Справочник.ЗначенияСвойствОбъектовИерархия" Тогда
				Владелец = СтрокаРеквизита.Свойство;
			Иначе
				Владелец = Неопределено;
			КонецЕсли;
			ЗаполнитьРеквизитПоПравилу(
				СтрокаПравилаЗаполнения,
				СтрокаРеквизита.Значение,
				ОбъектДО,
				ОбъектИС,
				ПравилоЗагрузки,
				ВходящиеДанные,
				ЗначенияИзШаблона,,,
				Владелец);
			
		ИначеЕсли СтрокаПравилаЗаполнения.Таблица = "" Тогда
			// Заполняем реквизит объекта ДО.
			ЗаполнитьРеквизитПоПравилу(
				СтрокаПравилаЗаполнения,
				ОбъектДО[СтрокаПравилаЗаполнения.ИмяРеквизитаОбъектаДО],
				ОбъектДО,
				ОбъектИС,
				ПравилоЗагрузки,
				ВходящиеДанные,
				ЗначенияИзШаблона,,,
				ВладелецРеквизита(
					ОбъектДО,
					ПравилоЗагрузки.ТипОбъектаДО,
					ОбъектДО,
					СтрокаПравилаЗаполнения.ИмяРеквизитаОбъектаДО,
					СтрокаПравилаЗаполнения.Таблица));
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработкаОбъектаПослеЗаполнения(ОбъектДО);
	
КонецПроцедуры

// Заполняет объект 1С:Документооборота из входящих данных по правилу загрузки, и записывает его.
//
// Параметры:
//   ОбъектДО - СправочникСсылка, СправочникОбъект - изменяемый объект ДО.
//   ВходящиеДанные - ОбъектXDTO - объект XDTO типа DMIncomingData. Входящие данные.
//   ПравилоЗагрузки - СправочникСсылка.ПравилаЗагрузкиДанныхВДО - правило загрузки данных.
//   Ошибка - Строка - неявно возвращаемое значения, текст сообщения об ошибке.
//
// Возвращаемое значение:
//   Булево - Истина, если объект ДО был успешно изменен, Ложь, если произошла ошибка.
//
Функция ИзменитьОбъектДОИзВходящихДанных(Знач ОбъектДО, ВходящиеДанные, ПравилоЗагрузки, Ошибка = "") Экспорт
	
	Попытка
		
		Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ОбъектДО)) Тогда
			ОбъектДО = ОбъектДО.ПолучитьОбъект();
		КонецЕсли;
		
		ПравилоЗагрузкиОбъект = ПравилоЗагрузки.ПолучитьОбъект();
		ИсточникДанных = ОбработкаЗапросовXDTO.ИсточникВходящиеДанные(ВходящиеДанные, ПравилоЗагрузкиОбъект,, Истина);
		
		Если Не ОбработкаЗапросовXDTO.ЗаписатьДанныеОбъектаДО(ОбъектДО, ИсточникДанных, Ошибка) Тогда
			Ошибка = СтрШаблон(НСтр("ru = 'Ошибка при изменении документа %1.
				|Описание ошибки:  %2'"),
				ПолучитьНавигационнуюСсылку(ОбъектДО.Ссылка),
				Ошибка);
			Возврат Ложь;
		КонецЕсли;
		
	Исключение
		Ошибка = СтрШаблон(НСтр("ru = 'Ошибка при изменении объекта %1.
			|Описание ошибки:  %2'"),
			ПолучитьНавигационнуюСсылку(ОбъектДО.Ссылка),
			ОбработкаЗапросовXDTO.ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Возвращает описание колонок правил заполнения строк таблицы.
//
// Возвращаемое значение:
//   Массив из РаботаСИнтегрированнымиСистемами.РеквизитХранилищаПравил
//
Функция МассивРеквизитовХранилищаПравил() Экспорт
	
	ТипЗначениеРеквизитаДО = Новый ОписаниеТипов("Булево, Строка, Дата, Число");
	ТипЗначениеРеквизитаДО = Новый ОписаниеТипов(ТипЗначениеРеквизитаДО, Справочники.ТипВсеСсылки().Типы());
	ТипЗначениеРеквизитаДО = Новый ОписаниеТипов(ТипЗначениеРеквизитаДО, Документы.ТипВсеСсылки().Типы());
	ТипЗначениеРеквизитаДО = Новый ОписаниеТипов(ТипЗначениеРеквизитаДО, ПланыВидовХарактеристик.ТипВсеСсылки().Типы());
	ТипЗначениеРеквизитаДО = Новый ОписаниеТипов(ТипЗначениеРеквизитаДО, ПланыОбмена.ТипВсеСсылки().Типы());
	ТипЗначениеРеквизитаДО = Новый ОписаниеТипов(ТипЗначениеРеквизитаДО, ПланыВидовРасчета.ТипВсеСсылки().Типы());
	ТипЗначениеРеквизитаДО = Новый ОписаниеТипов(ТипЗначениеРеквизитаДО, ПланыСчетов.ТипВсеСсылки().Типы());
	ТипЗначениеРеквизитаДО = Новый ОписаниеТипов(ТипЗначениеРеквизитаДО, Перечисления.ТипВсеСсылки().Типы());
	ТипЗначениеРеквизитаДО = Новый ОписаниеТипов(ТипЗначениеРеквизитаДО, БизнесПроцессы.ТипВсеСсылки().Типы());
	ТипЗначениеРеквизитаДО = Новый ОписаниеТипов(ТипЗначениеРеквизитаДО, Задачи.ТипВсеСсылки().Типы());
	
	Реквизиты = Новый Массив;
	
	Реквизиты.Добавить(
		РеквизитХранилищаПравил(
			"%1_ИмяРеквизитаОбъектаДО",
			НСтр("ru = '%1. Имя реквизита объекта Документооборота.'"),
			Новый ОписаниеТипов("Строка")));
	Реквизиты.Добавить(
		РеквизитХранилищаПравил(
			"%1_ЗначениеРеквизитаДО",
			НСтр("ru = '%1. Значение реквизита.'"),
			ТипЗначениеРеквизитаДО,
			"ПолеВвода"));
	Реквизиты.Добавить(
		РеквизитХранилищаПравил(
			"%1_Вариант",
			НСтр("ru = '%1. Вариант заполнения.'"),
			Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыПравилЗаполненияРеквизитов")));
	Реквизиты.Добавить(
		РеквизитХранилищаПравил(
			"%1_ИмяРеквизитаОбъектаИС",
			НСтр("ru = '%1. Имя реквизита объекта интегрированной системы.'"),
			Новый ОписаниеТипов("Строка")));
	Реквизиты.Добавить(
		РеквизитХранилищаПравил(
			"%1_ВычисляемоеВыражение",
			НСтр("ru = '%1. Выражение на встроенном языке.'"),
			Новый ОписаниеТипов("Строка"),
			"ПолеВвода"));
	Реквизиты.Добавить(
		РеквизитХранилищаПравил(
			"%1_МестоВыполненияВыражения",
			НСтр("ru = '%1. Место выполнения выражения на встроенном языке.'"),
			Новый ОписаниеТипов("ПеречислениеСсылка.МестаВыполненияВыраженийНаВстроенномЯзыке")));
	Реквизиты.Добавить(
		РеквизитХранилищаПравил(
			"%1_ID",
			НСтр("ru = '%1. Идентификатор выражения на встроенном языке.'"),
			Новый ОписаниеТипов("Строка")));
	
	Возврат Реквизиты;
	
КонецФункции

// Создает новую пустую структуру входящих данных.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMIncomingData.
//
Функция НоваяСтруктураВходящихДанных() Экспорт
	
	Возврат ОбработкаЗапросовXDTO.СоздатьОбъект("DMIncomingData");
	
КонецФункции

// Конструктор структуры параметров метода для заполнения объекта ДО из входящих данных.
//
// Возвращаемое значение:
//   Структура:
//     * ПравилоЗаполненияРеквизита - СправочникТабличнаяЧастьСтрока.ПравилаЗагрузкиДанныхВДО.ПравилаЗаполненияРеквизитовДО
//     * ОбъектДО - СправочникОбъект - заполняемый объект ДО.
//     * ОбъектИС - Структура - содержит данные объекта ИС.
//     * ПравилоЗагрузки - СправочникСсылка.ПравилаЗагрузкиДанныхВДО - правило загрузки данных.
//     * ВходящиеДанные - ОбъектXDTO - объект XDTO типа DMIncomingData. Входящие данные.
//     * ЗначенияИзШаблона - Структура:
//       ** Документ - СправочникОбъект
//       ** СтатьиДДС - ТаблицаЗначений
//
Функция ПараметрыМетодаДляЗаполненияОбъектаДО() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ПравилоЗаполненияРеквизита", Неопределено);
	Параметры.Вставить("ОбъектДО", Неопределено);
	Параметры.Вставить("ОбъектИС", Неопределено);
	Параметры.Вставить("ПравилоЗагрузки", Неопределено);
	Параметры.Вставить("ВходящиеДанные", Неопределено);
	Параметры.Вставить("ЗначенияИзШаблона", Неопределено);
	
	Возврат Параметры;
	
КонецФункции

// Помещает правило заполнения реквизита строки таблицы в хранилище значений.
//
// Параметры:
//   ПравилоЗаполненияРеквизитаСтроки - ДанныеФормыЭлементДерева - элемент дерева ПравилаЗаполненияРеквизитовДО
//     формы элемента справочника ПравилаЗагрузкиДанныхВДО.
//   ХранилищеПравил - ХранилищеЗначения - содержит объект типа ТаблицаЗначений.
//   ТипОбъектаДО - Строка - имя типа объекта Документооборота.
//   ВидДокумента - СправочникСсылка.ВидыДокументов - вид документа.
//
Процедура ПоместитьПравилоЗаполненияРеквизитаСтрокиВХранилище(ПравилоЗаполненияРеквизитаСтроки, ХранилищеПравил,
		ТипОбъектаДО, ВидДокумента = Неопределено) Экспорт
	
	ТекущаяТаблицаПравил = Неопределено;
	Если ТипЗнч(ХранилищеПравил) = Тип("ХранилищеЗначения") Тогда
		ТекущаяТаблицаПравил = ХранилищеПравил.Получить();
	КонецЕсли;
	
	МассивРеквизитовТаблицыОбъектаДО = Справочники.ПравилаЗагрузкиДанныхВДО.РеквизитыТаблицыОбъектаДО(
		ТипОбъектаДО,
		ПравилоЗаполненияРеквизитаСтроки.Таблица,
		ВидДокумента);
	МассивРеквизитовХранилищаПравил = МассивРеквизитовХранилищаПравил();
	
	Если ТипЗнч(ТекущаяТаблицаПравил) <> Тип("ТаблицаЗначений") Или ТекущаяТаблицаПравил.Количество() = 0 Тогда
		ТекущаяТаблицаПравил = Новый ТаблицаЗначений;
		Для Каждого Элемент Из МассивРеквизитовТаблицыОбъектаДО Цикл
			Для Каждого Реквизит Из МассивРеквизитовХранилищаПравил Цикл
				ТекущаяТаблицаПравил.Колонки.Добавить(
					СтрШаблон(Реквизит.ШаблонИмени, Элемент.Имя),
					Реквизит.ТипРеквизита);
			КонецЦикла;
		КонецЦикла;
		ТекущаяТаблицаПравил.Добавить();
	КонецЕсли;
	
	ИмяРеквизита = ПравилоЗаполненияРеквизитаСтроки.ИмяРеквизитаОбъектаДО;
	ТекущиеДанные = ТекущаяТаблицаПравил[0];
	Для Каждого Реквизит Из МассивРеквизитовХранилищаПравил Цикл
		ТекущиеДанные[СтрШаблон(Реквизит.ШаблонИмени, ИмяРеквизита)] =
			ПравилоЗаполненияРеквизитаСтроки[СтрЗаменить(Реквизит.ШаблонИмени, "%1_", "")];
	КонецЦикла;
	
	Для Каждого Элемент Из МассивРеквизитовТаблицыОбъектаДО Цикл
		Для Каждого Строка Из ТекущаяТаблицаПравил Цикл
			Строка[СтрШаблон("%1_ИмяРеквизитаОбъектаДО", Элемент.Имя)] = Элемент.Имя;
		КонецЦикла;
	КонецЦикла;
	
	ХранилищеПравил = Новый ХранилищеЗначения(ТекущаяТаблицаПравил);
	
КонецПроцедуры

// Конструктор структуры для описания колонки правил заполнения строк таблицы.
//
// Параметры:
//   ШаблонИмени - Строка - шаблон имени колонки.
//   ШаблонПредставления - Строка - шаблон представления колонки.
//   ТипРеквизита - ОписаниеТипов - тип значения колонки.
//   ВидЭлементаФормы - Строка - имя значения перечисления ВидПоляФормы.
//   КартинкаЗначений - Картинка - картинка элемента формы.
//
// Возвращаемое значение:
//   Структура:
//     * ШаблонИмени - Строка - шаблон имени колонки.
//     * ШаблонПредставления - Строка - шаблон представления колонки.
//     * ТипРеквизита - ОписаниеТипов - тип значения колонки.
//     * ВидЭлементаФормы - Строка - имя значения перечисления ВидПоляФормы.
//     * КартинкаЗначений - Картинка - картинка элемента формы.
//
Функция РеквизитХранилищаПравил(ШаблонИмени, ШаблонПредставления, ТипРеквизита, ВидЭлементаФормы = Неопределено,
		КартинкаЗначений = Неопределено) Экспорт
	
	Реквизит = Новый Структура;
	Реквизит.Вставить("ШаблонИмени", ШаблонИмени);
	Реквизит.Вставить("ШаблонПредставления", ШаблонПредставления);
	Реквизит.Вставить("ТипРеквизита", ТипРеквизита);
	Реквизит.Вставить("ВидЭлементаФормы", ВидЭлементаФормы);
	Реквизит.Вставить("КартинкаЗначений", КартинкаЗначений);
	
	Возврат Реквизит;
	
КонецФункции

// Создает новый объект 1С:Документооборот и заполняет его из входящих данных по правилу загрузки.
//
// Параметры:
//   ВходящиеДанные - ОбъектXDTO - объект XDTO типа DMIncomingData. Входящие данные.
//   ПравилоЗагрузки - СправочникСсылка.ПравилаЗагрузкиДанныхВДО - правило загрузки данных.
//   Ошибка - Строка - неявно возвращаемое значения, текст сообщения об ошибке.
//
// Возвращаемое значение:
//   СправочникСсылка - ссылка на созданный объект ДО.
//   Неопределено - возвращается, если в ходе создания объекта произошла ошибка.
//
// Пример:
//	ВходящиеДанные = РаботаСИнтегрированнымиСистемами.НоваяСтруктураВходящихДанных();
//
//	// Добавление реквизитов
//
//	КонтрагентXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCorrespondent");
//	КонтрагентXDTO.name = "Клауст ЗАО";
//	КонтрагентXDTO.inn = "7773300607";
//	КонтрагентXDTO.kpp = "777701001";
//	КонтрагентXDTO.comment = "Контрагент из внешней системы";
//	КонтрагентXDTO.objectID = ОбработкаЗапросовXDTO.СоздатьObjectID("", "");
//	РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитВоВходящиеДанные(ВходящиеДанные,
//		"Контрагент",
//		КонтрагентXDTO);
//
//	ОтветственныйXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMUser");
//	ОтветственныйXDTO.name = "Иванов И.И.";
//	ОтветственныйXDTO.objectID = ОбработкаЗапросовXDTO.СоздатьObjectID("", "");
//	РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитВоВходящиеДанные(ВходящиеДанные,
//		"Ответственный",
//		ОтветственныйXDTO);
//
//	// Добавление таблиц
//
//	ИмяТаблицы = "СтатьиДДС";
//
//	ИндексСтроки = 0;
//	СтатьяДДСXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCashFlowItem");
//	СтатьяДДСXDTO.name = "Приобретение нематериальных активов";
//	СтатьяДДСXDTO.objectID = ОбработкаЗапросовXDTO.СоздатьObjectID("", "");
//	РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитТаблицыВоВходящиеДанные(ВходящиеДанные, ИмяТаблицы, ИндексСтроки,
//		"Статья",
//		СтатьяДДСXDTO);
//	РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитТаблицыВоВходящиеДанные(ВходящиеДанные, ИмяТаблицы, ИндексСтроки,
//		"Сумма",
//		300);
//
//	ИндексСтроки = 1;
//	СтатьяДДСXDTO = ОбработкаЗапросовXDTO.СоздатьОбъект("DMCashFlowItem");
//	СтатьяДДСXDTO.name = "Уплата налогов и сборов";
//	СтатьяДДСXDTO.objectID = ОбработкаЗапросовXDTO.СоздатьObjectID("", "");
//	РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитТаблицыВоВходящиеДанные(ВходящиеДанные, ИмяТаблицы, ИндексСтроки,
//		"Статья",
//		СтатьяДДСXDTO);
//	РаботаСИнтегрированнымиСистемами.ДобавитьРеквизитТаблицыВоВходящиеДанные(ВходящиеДанные, ИмяТаблицы, ИндексСтроки,
//		"Сумма",
//		100);
//
//	// Создание нового документа ДО
//
//	Документ = РаботаСИнтегрированнымиСистемами.СоздатьОбъектДОИзВходящихДанных(
//		ВходящиеДанные,
//		ПравилоЗагрузки);
//
Функция СоздатьОбъектДОИзВходящихДанных(ВходящиеДанные, ПравилоЗагрузки, Ошибка = "") Экспорт
	
	ПравилоЗагрузкиОбъект = ПравилоЗагрузки.ПолучитьОбъект();
	ИсточникДанных = ОбработкаЗапросовXDTO.ИсточникВходящиеДанные(ВходящиеДанные, ПравилоЗагрузкиОбъект);
	
	Возврат ОбработкаЗапросовXDTO.СоздатьОбъектДО(ИсточникДанных, Ошибка);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСВходящимиДанными

Функция ВладелецРеквизита(СтруктураДанных, ТипОбъектаДО, ОбъектДО, ИмяРеквизита, ИмяТаблицы)
	
	Если ТипОбъектаДО = "Справочник.ДокументыПредприятия" Тогда
		Если ИмяРеквизита = "КонтактноеЛицо" И ИмяТаблицы = "Контрагенты" Тогда
			Возврат СтруктураДанных["Контрагент"];
			
		ИначеЕсли ИмяРеквизита = "КонтактноеЛицо" И ИмяТаблицы = "Стороны" Тогда
			ТекущаяСторона = СтруктураДанных["Сторона"];
			Если ТипЗнч(ТекущаяСторона) = Тип("СправочникСсылка.Контрагенты") Тогда
				Возврат ТекущаяСторона;
			Иначе
				Возврат Неопределено;
			КонецЕсли;;
			
		ИначеЕсли ИмяРеквизита = "КонтактноеЛицо" И ИмяТаблицы = "" Тогда
			Возврат СтруктураДанных["Контрагент"];
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъектаДО = "Справочник.Мероприятия" Тогда
		Если ИмяРеквизита = "ОрганизаторКонтактноеЛицо" И ИмяТаблицы = "" Тогда
			Возврат СтруктураДанных["Организатор"];
			
		ИначеЕсли ИмяРеквизита = "ПунктПротокола" И ИмяТаблицы = "Протокол" Тогда
			Возврат ОбъектДО.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ЗаполнитьРеквизитПоПравилу(ПравилоЗаполненияРеквизита, Реквизит, ОбъектДО, ОбъектИС,
		ПравилоЗагрузки, ВходящиеДанные, ЗначенияИзШаблона,
		НомерСтроки = Неопределено, ТекущаяСтрока = Неопределено, Владелец = Неопределено) Экспорт
	
	НовоеЗначение = ЗначениеРеквизитаИзПравила(
		ПравилоЗаполненияРеквизита,
		ОбъектДО,
		ОбъектИС,
		ПравилоЗагрузки,
		ВходящиеДанные,
		ЗначенияИзШаблона,
		НомерСтроки,
		ТекущаяСтрока);
	Возврат ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзЗначенияСвойстваXDTO(
		Реквизит,
		НовоеЗначение,
		ПравилоЗаполненияРеквизита.ТипРеквизитаОбъектаДОВСтроку,
		Владелец);
	
КонецФункции

Процедура ЗаполнитьТаблицуПоПравилу(ПравилоЗаполненияТаблицы, ОбъектДО, Таблица, ОбъектИС,
		ПравилоЗагрузки, ВходящиеДанные, ЗначенияИзШаблона) Экспорт
	
	Таблица.Очистить();
	
	Если ПравилоЗаполненияТаблицы.Вариант = ВариантШаблон() И ЗначенияИзШаблона <> Неопределено Тогда
		// Заполняем таблицу объекта ДО из шаблона.
		Таблица.Загрузить(ЗначенияИзШаблона.Документ[ПравилоЗаполненияТаблицы.ИмяРеквизитаОбъектаДО].Выгрузить());
		
	ИначеЕсли ПравилоЗаполненияТаблицы.Вариант = ВариантВыражение() Тогда
		// Заполняем таблицу объекта ДО из выражения на встроенном языке.
		МетаданныеОбъектаДО = Справочники.ПравилаЗагрузкиДанныхВДО.РеквизитыОбъектаДО(
			ПравилоЗагрузки.ТипОбъектаДО,
			ПравилоЗагрузки.ВидДокумента);
		
		Если ПравилоЗаполненияТаблицы.МестоВыполненияВыражения =
				Перечисления.МестаВыполненияВыраженийНаВстроенномЯзыке.НаСторонеИС Тогда
			// Выражение уже было выполнено на стороне ИС, его результат находится во входящих данных.
			ТаблицаXDTO = ЗначениеИзВходящихДанных(ВходящиеДанные.tabularSections, ПравилоЗаполненияТаблицы.ID);
			Для Каждого СтрокаXDTO Из ТаблицаXDTO.rows Цикл
				
				НоваяСтрока = Таблица.Добавить();
				
				Для Каждого ЗначениеXDTO Из СтрокаXDTO.attributes Цикл
					
					ТипРеквизитаОбъектаДОВСтроку = Неопределено;
					МетаданныеРеквизитаДО = МетаданныеОбъектаДО.НайтиСтроки(
						Новый Структура("Таблица, Имя",
							ПравилоЗаполненияТаблицы.ИмяРеквизитаОбъектаДО,
							ЗначениеXDTO.name));
					Если МетаданныеРеквизитаДО.Количество() = 1 Тогда
						ТипРеквизитаОбъектаДОВСтроку = ТипРеквизитаОбъектаДОВСтроку(МетаданныеРеквизитаДО[0].Тип);
					КонецЕсли;
					
					Если ОбработкаЗапросовXDTO.СвойствоУстановлено(ЗначениеXDTO, "error") Тогда
						ВызватьИсключение ЗначениеXDTO.error;
						
					ИначеЕсли ОбработкаЗапросовXDTO.СвойствоУстановлено(ЗначениеXDTO, "value") Тогда
						ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзЗначенияСвойстваXDTO(
							НоваяСтрока[ЗначениеXDTO.name],
							ЗначениеXDTO.value,
							ТипРеквизитаОбъектаДОВСтроку,
							ВладелецРеквизита(
								НоваяСтрока,
								ПравилоЗагрузки.ТипОбъектаДО,
								ОбъектДО,
								ЗначениеXDTO.name,
								ПравилоЗаполненияТаблицы.ИмяРеквизитаОбъектаДО));
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		ИначеЕсли ПравилоЗаполненияТаблицы.МестоВыполненияВыражения =
				Перечисления.МестаВыполненияВыраженийНаВстроенномЯзыке.НаСторонеДО Тогда
			// Требуется выполнить выражение на встроенном языке на стороне ДО.
			РезультатВыражения = ОбработкаЗапросовXDTO.РезультатВыраженияНаВстроенномЯзыке(
				ПравилоЗаполненияТаблицы.ВычисляемоеВыражение,
				ОбъектИС,
				ОбъектДО);
			Для Каждого СтрокаXDTO Из РезультатВыражения Цикл
				
				НоваяСтрока = Таблица.Добавить();
				Для Каждого Колонка Из РезультатВыражения.Колонки Цикл
					
					ТипРеквизитаОбъектаДОВСтроку = Неопределено;
					МетаданныеРеквизитаДО = МетаданныеОбъектаДО.НайтиСтроки(
						Новый Структура("Таблица, Имя",
							ПравилоЗаполненияТаблицы.ИмяРеквизитаОбъектаДО,
							Колонка.Имя));
					Если МетаданныеРеквизитаДО.Количество() = 1 Тогда
						ТипРеквизитаОбъектаДОВСтроку = ТипРеквизитаОбъектаДОВСтроку(МетаданныеРеквизитаДО[0].Тип);
					КонецЕсли;
					
					ОбработкаЗапросовXDTO.ЗаполнитьРеквизитИзЗначенияСвойстваXDTO(
						НоваяСтрока[Колонка.Имя],
						СтрокаXDTO[Колонка.Имя],
						ТипРеквизитаОбъектаДОВСтроку,
						ВладелецРеквизита(
							НоваяСтрока,
							ПравилоЗагрузки.ТипОбъектаДО,
							ОбъектДО,
							Колонка.Имя,
							ПравилоЗаполненияТаблицы.ИмяРеквизитаОбъектаДО));
					
				КонецЦикла;
				
			КонецЦикла;
			
		Иначе
			ВызватьИсключение НСтр("ru = 'Не задано место выполнения выражения на встроенном языке.'");
		КонецЕсли;
		
	Иначе
		
		ТаблицаИсточника = Неопределено;
		КоличествоСтрок = 0;
		Если ПравилоЗаполненияТаблицы.Вариант = ВариантРеквизит() Тогда
			// Заполняем таблицу объекта ДО из таблицы объекта ИС.
			ТаблицаИсточника = ОбъектИС[ПравилоЗаполненияТаблицы.ИмяРеквизитаОбъектаИС];
			КоличествоСтрок = ТаблицаИсточника.Количество();
			ПравилаЗаполненияСтроки = ПравилоЗагрузки.ПравилаЗаполненияРеквизитовДО.НайтиСтроки(
				Новый Структура("Таблица", ПравилоЗаполненияТаблицы.ИмяРеквизитаОбъектаДО));
		ИначеЕсли ПравилоЗаполненияТаблицы.Вариант = ВариантРеквизитТаблицы() Тогда
			// Заполняем таблицу объекта ДО по правилам для отдельных реквизитов.
			ПравилаЗаполненияСтрокТаблицы =
				РаботаСИнтегрированнымиСистемамиВызовСервера.ПравилаЗаполненияСтрокТаблицыИзХранилища(
					ПравилоЗаполненияТаблицы.ПравилаЗаполненияСтрокТаблицы,
					ПравилоЗагрузки.УзелИнтегрированнойСистемы,
					ПравилоЗагрузки.ТипОбъектаДО,
					ПравилоЗагрузки.ТипОбъектаИС,
					ПравилоЗаполненияТаблицы.ИмяРеквизитаОбъектаДО,
					ПравилоЗаполненияТаблицы.Обновлять,
					ПравилоЗагрузки.ВидДокумента,
					Ложь);
			КоличествоСтрок = ПравилаЗаполненияСтрокТаблицы.Количество();
		КонецЕсли;
		
		Для НомерСтроки = 0 По КоличествоСтрок - 1 Цикл
			НоваяСтрока = Таблица.Добавить();
			Если ПравилоЗаполненияТаблицы.Вариант = ВариантРеквизитТаблицы() Тогда
				ПравилаЗаполненияСтроки = ПравилаЗаполненияСтрокТаблицы[НомерСтроки];
			КонецЕсли;
			Для Каждого Элемент Из ПравилаЗаполненияСтроки Цикл
				Если ПравилоЗаполненияТаблицы.Вариант = ВариантРеквизит() Тогда
					ПравилоЗаполненияРеквизитаСтроки = Элемент;
				ИначеЕсли ПравилоЗаполненияТаблицы.Вариант = ВариантРеквизитТаблицы() Тогда
					ПравилоЗаполненияРеквизитаСтроки = Элемент.Значение;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ПравилоЗаполненияРеквизитаСтроки.Вариант) Тогда
					Продолжить;
				КонецЕсли;
				ЗаполнитьРеквизитПоПравилу(
					ПравилоЗаполненияРеквизитаСтроки,
					НоваяСтрока[ПравилоЗаполненияРеквизитаСтроки.ИмяРеквизитаОбъектаДО],
					ОбъектДО,
					ОбъектИС,
					ПравилоЗагрузки,
					ВходящиеДанные,
					ЗначенияИзШаблона,
					НомерСтроки,
					?(ТаблицаИсточника = Неопределено, Неопределено, ТаблицаИсточника[НомерСтроки]),
					ВладелецРеквизита(
						НоваяСтрока,
						ПравилоЗагрузки.ТипОбъектаДО,
						ОбъектДО,
						ПравилоЗаполненияРеквизитаСтроки.ИмяРеквизитаОбъектаДО,
						ПравилоЗаполненияТаблицы.ИмяРеквизитаОбъектаДО));
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеИзВходящихДанных(Список, ИдентификаторЗначения)
	
	Для Каждого Элемент Из Список Цикл
		Если Элемент.name = ИдентификаторЗначения Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция ЗначениеРеквизитаИзПравила(ПравилоЗаполненияРеквизита, ОбъектДО, ОбъектИС,
		ПравилоЗагрузки, ВходящиеДанные, ЗначенияИзШаблона,
		НомерСтроки = Неопределено, ТекущаяСтрока = Неопределено) Экспорт
	
	Если ПравилоЗаполненияРеквизита.Вариант = ВариантЗначение() Тогда
		Если Не ПустаяСтрока(ПравилоЗаполненияРеквизита.ЗначениеРеквизитаДОСтрока) Тогда
			Возврат ПравилоЗаполненияРеквизита.ЗначениеРеквизитаДОСтрока;
		Иначе
			Возврат ПравилоЗаполненияРеквизита.ЗначениеРеквизитаДО;
		КонецЕсли;
		
	ИначеЕсли ПравилоЗаполненияРеквизита.Вариант = ВариантШаблон() И ЗначенияИзШаблона <> Неопределено Тогда
		// У реквизита табличной части в правилах загрузки не может быть варианта "Из шаблона".
		// Следовательно это реквизит объекта ДО, а не реквизит табличной части.
		Возврат ЗначенияИзШаблона.Документ[ПравилоЗаполненияРеквизита.ИмяРеквизитаОбъектаДО];
		
	ИначеЕсли ПравилоЗаполненияРеквизита.Вариант = ВариантРеквизит() Тогда
		Если НомерСтроки = Неопределено Тогда
			// Заполняем реквизит объекта ДО.
			Возврат ОбъектИС[ПравилоЗаполненияРеквизита.ИмяРеквизитаОбъектаИС];
		Иначе
			// Заполняем реквизит табличной части объекта ДО.
			РазделеннаяСтрока = СтрРазделить(ПравилоЗаполненияРеквизита.ИмяРеквизитаОбъектаИС, ".", Ложь);
			Если РазделеннаяСтрока.Количество() = 1 Тогда
				Возврат ОбъектИС[РазделеннаяСтрока[0]];
			ИначеЕсли РазделеннаяСтрока.Количество() = 2 Тогда
				Возврат ОбъектИС[РазделеннаяСтрока[0]][НомерСтроки][РазделеннаяСтрока[1]];
			Иначе
				ВызватьИсключение СтрШаблон(НСтр(
					"ru = 'В правилах заполнения указано недопустимое имя реквизита-источника данных заполнения: %1'"),
					ПравилоЗаполненияРеквизита.ИмяРеквизитаОбъектаИС);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ПравилоЗаполненияРеквизита.Вариант = ВариантВыражение() Тогда
		Если ПравилоЗаполненияРеквизита.МестоВыполненияВыражения =
				Перечисления.МестаВыполненияВыраженийНаВстроенномЯзыке.НаСторонеИС Тогда
			// Выражение уже было выполнено на стороне ИС, его результат находится во входящих данных.
			ТаблицаXDTO = ЗначениеИзВходящихДанных(ВходящиеДанные.tabularSections, ПравилоЗаполненияРеквизита.ID);
			Если НомерСтроки = Неопределено Или ТаблицаXDTO = Неопределено Тогда
				// Заполняем реквизит объекта ДО.
				ЗначениеXDTO = ЗначениеИзВходящихДанных(ВходящиеДанные.attributes, ПравилоЗаполненияРеквизита.ID);
			Иначе
				// Заполняем реквизит табличной части объекта ДО.
				ЗначениеXDTO = ТаблицаXDTO.rows[НомерСтроки].attributes[0];
			КонецЕсли;
			
			Если ЗначениеXDTO = Неопределено Тогда
				ВызватьИсключение СтрШаблон(НСтр(
					"ru = 'Не найден результат выражения на встроенном языке.
						|Идентификатор выражения: %1'"),
					ПравилоЗаполненияРеквизита.ID);
				
			ИначеЕсли ОбработкаЗапросовXDTO.СвойствоУстановлено(ЗначениеXDTO, "error") Тогда
				ВызватьИсключение ЗначениеXDTO.error;
				
			ИначеЕсли ОбработкаЗапросовXDTO.СвойствоУстановлено(ЗначениеXDTO, "value") Тогда
				Возврат ЗначениеXDTO.value;
				
			КонецЕсли;
			
		ИначеЕсли ПравилоЗаполненияРеквизита.МестоВыполненияВыражения =
				Перечисления.МестаВыполненияВыраженийНаВстроенномЯзыке.НаСторонеДО Тогда
			// Требуется выполнить выражение на встроенном языке.
			Возврат ОбработкаЗапросовXDTO.РезультатВыраженияНаВстроенномЯзыке(
				ПравилоЗаполненияРеквизита.ВычисляемоеВыражение,
				ОбъектИС,
				ОбъектДО,
				ТекущаяСтрока);
			
		Иначе
			ВызватьИсключение НСтр("ru = 'Не задано место выполнения выражения на встроенном языке.'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Процедура ОбработкаОбъектаПередЗаполнением(ОбъектДО, ПравилоЗагрузки, ЗначенияИзШаблона)
	
	ТекущаяДата = ТекущаяДатаСеанса();
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ОсновнойСотрудникТекущегоПользователя = Сотрудники.ОсновнойСотрудникПользователя();
	ОбъектДО.ДополнительныеСвойства.Вставить("ТекущаяДата", ТекущаяДата);
	ОбъектДО.ДополнительныеСвойства.Вставить("ТекущийПользователь", ТекущийПользователь);
	ОбъектДО.ДополнительныеСвойства.Вставить(
		"ОсновнойСотрудникТекущегоПользователя",
		ОсновнойСотрудникТекущегоПользователя);
	
	Если ТипЗнч(ОбъектДО) = Тип("СправочникОбъект.ДокументыПредприятия") Тогда
		
		ОбъектДО.ДополнительныеСвойства.Вставить("НачальныйРегистрационныйНомер", ОбъектДО.РегистрационныйНомер);
		
		Если ЗначениеЗаполнено(ПравилоЗагрузки.Шаблон) Тогда
			// Получение данных из шаблона.
			Если ОбъектДО.Шаблон <> ПравилоЗагрузки.Шаблон Тогда
				ОбъектДО.Шаблон = ПравилоЗагрузки.Шаблон;
			КонецЕсли;
			ЗначенияИзШаблона = Новый Структура("Документ, СтатьиДДС",
				Справочники.ДокументыПредприятия.СоздатьЭлемент(),
				ОбработкаЗапросовXDTOДокументы.ТаблицаСтатьиДвиженияДенежныхСредств());
			ЗначенияИзШаблона.Документ.ВидДокумента = ПравилоЗагрузки.ВидДокумента;
			ШаблоныДокументов.ЗаполнитьРеквизитыДокументаПоШаблону(
				ПравилоЗагрузки.Шаблон,
				ЗначенияИзШаблона.Документ);
			ШаблоныДокументов.ЗаполнитьСтатьиДДСДокументаПоШаблону(
				ПравилоЗагрузки.Шаблон,
				ЗначенияИзШаблона.СтатьиДДС,
				ЗначенияИзШаблона.Документ.Сумма,
				ЗначенияИзШаблона.Документ.СуммаНДС);
		КонецЕсли;
		
		ЗаполнятьПоШаблону = Не ЗначениеЗаполнено(ОбъектДО.Ссылка) И ЗначениеЗаполнено(ОбъектДО.Шаблон);
		ОбъектДО.ДополнительныеСвойства.Вставить("ЗаполнятьПоШаблону", ЗаполнятьПоШаблону);
		
		Если ЗначениеЗаполнено(ПравилоЗагрузки.ВидДокумента)
				И ОбъектДО.ВидДокумента <> ПравилоЗагрузки.ВидДокумента Тогда
			ОбъектДО.ВидДокумента = ПравилоЗагрузки.ВидДокумента;
		КонецЕсли;
		
		КэшВидаДокумента = Делопроизводство.КэшВидаДокумента(ОбъектДО.ВидДокумента);
		ОбъектДО.ДополнительныеСвойства.Вставить("КэшВидаДокумента", КэшВидаДокумента);
		
		Если КэшВидаДокумента.ЯвляетсяВходящейКорреспонденцией
				Или КэшВидаДокумента.ЯвляетсяИсходящейКорреспонденцией Тогда
			// Получение параметров корреспонденции.
			ПараметрыКорреспонденции = ОбработкаЗапросовXDTOДокументы.ПараметрыКорреспонденцииДокумента(
				ОбъектДО,
				КэшВидаДокумента);
			ОбработкаЗапросовXDTOДокументы.ЗаполнитьПараметрыКорреспонденцииИзДокумента(
				ОбъектДО,
				ПараметрыКорреспонденции);
			ОбъектДО.ДополнительныеСвойства.Вставить("ПараметрыКорреспонденции", ПараметрыКорреспонденции);
		КонецЕсли;
		
		Связи = Новый ТаблицаЗначений;
		Связи.Колонки.Добавить("СвязанныйОбъект");
		Связи.Колонки.Добавить("ТипСвязи");
		ОбъектДО.ДополнительныеСвойства.Вставить("Связи", Связи);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаОбъектаПослеЗаполнения(ОбъектДО)
	
	Если ТипЗнч(ОбъектДО) = Тип("СправочникОбъект.ДокументыПредприятия") Тогда
		
		Если Не ЗначениеЗаполнено(ОбъектДО.Ссылка)
				И Не ЗначениеЗаполнено(ОбъектДО.ДатаСоздания)
				И ОбъектДО.ДатаСоздания <> ОбъектДО.ДополнительныеСвойства.ТекущаяДата Тогда
			ОбъектДО.ДатаСоздания = ОбъектДО.ДополнительныеСвойства.ТекущаяДата;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ОбъектДО.Ссылка)
				И Не ЗначениеЗаполнено(ОбъектДО.Создал)
				И ОбъектДО.Создал <> ОбъектДО.ДополнительныеСвойства.ОсновнойСотрудникТекущегоПользователя Тогда
			ОбъектДО.Создал = ОбъектДО.ДополнительныеСвойства.ОсновнойСотрудникТекущегоПользователя;
		КонецЕсли;
		
		СрокДействияИзменен = Ложь;
		Если ЗначениеЗаполнено(ОбъектДО.Ссылка) Тогда
			СрокДействияИзменен = ОбработкаЗапросовXDTOДокументы.СрокДействияИзменен(ОбъектДО);
		КонецЕсли;
		ОбъектДО.ДополнительныеСвойства.Вставить("СрокДействияИзменен", СрокДействияИзменен);
		
		Для Каждого Строка Из ОбъектДО.Товары Цикл
			Строка.Номер = Строка.НомерСтроки;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ОбъектДО.ВидДокумента) Тогда
			ФормаДокументаИзВида = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДО.ВидДокумента, "ФормаДокумента");
			Если ФормаДокументаИзВида = Перечисления.ВариантыФормДокументов.Электронная
					И ОбъектДО.ФормаДокумента <> Перечисления.ВариантыФормДокументов.Электронная Тогда
				ОбъектДО.ФормаДокумента = Перечисления.ВариантыФормДокументов.Электронная;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектДО) = Тип("СправочникОбъект.Мероприятия") Тогда
		
		Если Не ЗначениеЗаполнено(ОбъектДО.Ссылка)
				И Не ЗначениеЗаполнено(ОбъектДО.ДатаСоздания)
				И ОбъектДО.ДатаСоздания <> ОбъектДО.ДополнительныеСвойства.ТекущаяДата Тогда
			ОбъектДО.ДатаСоздания = ОбъектДО.ДополнительныеСвойства.ТекущаяДата;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ОбъектДО.Ссылка)
				И Не ЗначениеЗаполнено(ОбъектДО.Подготовил)
				И ОбъектДО.Подготовил <> ОбъектДО.ДополнительныеСвойства.ОсновнойСотрудникТекущегоПользователя Тогда
			ОбъектДО.Подготовил = ОбъектДО.ДополнительныеСвойства.ОсновнойСотрудникТекущегоПользователя;
		КонецЕсли;
		
		Если Не ОбъектДО.ДополнительныеСвойства.Свойство("СписокУчастников")
				И Не ЗначениеЗаполнено(ОбъектДО.Ссылка) Тогда
			СписокУчастников = ОбработкаЗапросовXDTOДокументы.ТаблицаУчастникиМероприятия();
			НоваяСтрока = СписокУчастников.Добавить();
			НоваяСтрока.Исполнитель = ОбъектДО.ДополнительныеСвойства.ОсновнойСотрудникТекущегоПользователя;
			ОбъектДО.ДополнительныеСвойства.Вставить("СписокУчастников", СписокУчастников);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОбъектИСИзВходящихДанных(ВходящиеДанные)
	
	ОбъектИС = Новый Структура;
	
	Для Каждого РеквизитXDTO Из ВходящиеДанные.attributes Цикл
		Если СтрНайти(РеквизитXDTO.name, "-") > 0 Тогда
			// Это выражение на встроенном языке
			Продолжить;
		КонецЕсли;
		ОбъектИС.Вставить(РеквизитXDTO.name, РеквизитXDTO.value);
	КонецЦикла;
	
	Для Каждого ТаблицаXDTO Из ВходящиеДанные.tabularSections Цикл
		Если СтрНайти(ТаблицаXDTO.name, "-") > 0 Тогда
			// Это выражение на встроенном языке
			Продолжить;
		КонецЕсли;
		ТабЧасть = Новый Массив;
		Для Каждого СтрокаТаблицыXDTO Из ТаблицаXDTO.rows Цикл
			СтрТаблицы = Новый Структура;
			Для Каждого РеквизитXDTO Из СтрокаТаблицыXDTO.attributes Цикл
				СтрТаблицы.Вставить(РеквизитXDTO.name, РеквизитXDTO.value);
			КонецЦикла;
			ТабЧасть.Добавить(СтрТаблицы);
		КонецЦикла;
		ОбъектИС.Вставить(ТаблицаXDTO.name, ТабЧасть);
	КонецЦикла;
	
	Возврат ОбъектИС;
	
КонецФункции

#КонецОбласти

// Возвращает значение Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке
//
Функция ВариантВыражение()
	
	Возврат Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке;
	
КонецФункции

// Возвращает значение Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение
//
Функция ВариантЗначение()
	
	Возврат Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение;
	
КонецФункции

// Возвращает значение Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта
//
Функция ВариантРеквизит()
	
	Возврат Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта;
	
КонецФункции

// Возвращает значение Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитТаблицы
//
Функция ВариантРеквизитТаблицы()
	
	Возврат Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитТаблицы;
	
КонецФункции

// Возвращает значение Перечисления.ВариантыПравилЗаполненияРеквизитов.ИзШаблона
//
Функция ВариантШаблон()
	
	Возврат Перечисления.ВариантыПравилЗаполненияРеквизитов.ИзШаблона;
	
КонецФункции

#КонецОбласти