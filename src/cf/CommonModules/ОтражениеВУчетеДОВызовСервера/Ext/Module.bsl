#Область ПрограммныйИнтерфейс

// Возвращает структуру со списком шаблонов и дополнительной информацией о возможности ручного отражения
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
// 
// Возвращаемое значение:
//  Структура -поля:
//   * УжеЕстьЭД - Булево
//   * ДокументДолженБытьОтраженВручную - Булево
//   * СписокШаблонов - СписокЗначений Из Структура
//
Функция РезультатПолученияСпискаШаблоновДляРучногоСозданияДокумента(Знач ЭлектронныйДокумент) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("УжеЕстьЭД", Ложь);
	Результат.Вставить("ДокументДолженБытьОтраженВручную", Ложь);
	Результат.Вставить("СписокШаблонов", Новый СписокЗначений);
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент, 
		"ВидДокумента,ИдентификаторКонтрагента,ИдентификаторОрганизации,Организация,Контрагент");
	
	ДокументДолженБытьОтраженВРучную = ДокументДолженБытьОтраженВРучную(РеквизитыДокумента);
	Результат.ДокументДолженБытьОтраженВРучную = ДокументДолженБытьОтраженВРучную;
	Если Не ДокументДолженБытьОтраженВРучную Тогда
		Возврат Результат;
	КонецЕсли;
	
	УжеЕстьЭД = ЕстьОбъектУчета(ЭлектронныйДокумент);
	Результат.УжеЕстьЭД = УжеЕстьЭД;
	Если УжеЕстьЭД Тогда
		Возврат Результат;
	КонецЕсли;
	
	СписокШаблонов = СписокШаблоныДляРучногоСозданияДокумента(РеквизитыДокумента);
	Результат.СписокШаблонов = СписокШаблонов;
	
	Возврат Результат;
	
КонецФункции

// Параметры для выбора документов
//
// Параметры:
//  Шаблон				 - СправочникСсылка.ШаблоныДокументов
//  ЭлектронныйДокумент	 - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  Тематика			 - СправочникСсылка.ТематикиДокументов
// 
// Возвращаемое значение:
//  Структура:
// * Отбор - Структура - поля:
// ** ВидДокумента - СправочникСсылка.ВидыДокументов
// ** Тематика - СправочникСсылка.ТематикиДокументов
// ** Организация - СправочникСсылка.Организации
// ** Контрагент - СправочникСсылка.Контрагенты
// * ЗапретитьИзменятьФильтры - Булево
//
Функция ПараметрыДляВыбораДокумента(Знач Шаблон, Знач ЭлектронныйДокумент, Знач Тематика=Неопределено) Экспорт
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент, 
		"Организация,Контрагент");
	
	ВидДокументаШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Шаблон, 
		"ВидДокумента");
	
	ОтборДокумента = Новый Структура;
	ОтборДокумента.Вставить("ВидДокумента", ВидДокументаШаблона);
	ОтборДокумента.Вставить("Организация", РеквизитыДокумента.Организация);
	ОтборДокумента.Вставить("Контрагент", РеквизитыДокумента.Контрагент);
	ОтборДокумента.Вставить("ФормаДокумента", Перечисления.ВариантыФормДокументов.Электронная);
	ОтборДокумента.Вставить("ШаблонДокумента", Шаблон);
	ПустыеСостоянияЭДО = Новый Массив;
	ПустыеСостоянияЭДО.Добавить(Неопределено);
	ПустыеСостоянияЭДО.Добавить(Перечисления.СостоянияДокументовЭДО.ПустаяСсылка());
	ОтборДокумента.Вставить("СостоянияЭДО", ПустыеСостоянияЭДО);
	Если ЗначениеЗаполнено(Тематика) Тогда
		ОтборДокумента.Вставить("Тематика", Тематика);
	КонецЕсли;
	
	ПараметрыФормыВыбораДокумента = Новый Структура;
	ПараметрыФормыВыбораДокумента.Вставить("Отбор", ОтборДокумента); 
	ПараметрыФормыВыбораДокумента.Вставить("ЗапретитьИзменятьФильтры", Истина);
	
	Возврат ПараметрыФормыВыбораДокумента;
	
КонецФункции

// Установить связь электронного документа с объектом учета
//
// Параметры:
//  ДокументЭДО	 - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  ДокументДО	 - СправочникСсылка.ДокументыПредприятия
//
Процедура УстановитьСвязьЭлектронногоДокументаСОбъектомУчета(Знач ДокументЭДО, Знач ДокументДО) Экспорт
	
	ИнтеграцияЭДО.УстановитьСвязьЭлектронногоДокументаСОбъектомУчета(ДокументЭДО, ДокументДО);
	
КонецПроцедуры 

// Разорвать связь электронного документа с объектом учета
//
// Параметры:
//  ДокументУчета	 - СправочникСсылка.ДокументыПредприятия
//
Процедура РазорватьСвязьЭлектронногоДокументаСОбъектомУчета(Знач ДокументУчета) Экспорт
	
	ЭлектронныеДокументы = ИнтеграцияЭДО.ЭлектронныеДокументыОбъектовУчета(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументУчета)).ВыгрузитьКолонку("ЭлектронныйДокумент");
		
	Для Каждого ЭлектронныйДокумент Из ЭлектронныеДокументы Цикл
		
		ИнтеграцияЭДО.РазорватьСвязьЭлектронногоДокументаСОбъектомУчета(ЭлектронныйДокумент, ДокументУчета);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает данные, полученные из сообщение ЭДО
//
// Параметры:
//  ДокументЭДО - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
// 
// Возвращаемое значение:
//  см. НовыеДанныеДокументооборотаБЭДДляОтражения
//
Функция ДанныеДокументооборотаБЭДДляОтражения(Знач ДокументЭДО) Экспорт
	
	ДанныеБЭД = НовыеДанныеДокументооборотаБЭДДляОтражения();
	
	ДанныеБЭД.ДокументЭДО = ДокументЭДО;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК ДокументЭДО,
		|	СообщениеЭДОПрисоединенныеФайлы.Ссылка КАК ФайлЭДО,
		|	ЭлектронныйДокументВходящийЭДО.ДатаДокумента КАК Дата,
		|	ЭлектронныйДокументВходящийЭДО.Дата КАК ДатаЭДО,
		|	ЭлектронныйДокументВходящийЭДО.Организация КАК Организация,
		|	ЭлектронныйДокументВходящийЭДО.Контрагент КАК Контрагент,
		|	ЭлектронныйДокументВходящийЭДО.СуммаДокумента КАК СуммаДокумента
		|
		|ИЗ
		|	Документ.СообщениеЭДО КАК СообщениеЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
		|		ПО СообщениеЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СообщениеЭДОПрисоединенныеФайлы КАК СообщениеЭДОПрисоединенныеФайлы
		|		ПО СообщениеЭДО.ОсновнойФайл = СообщениеЭДОПрисоединенныеФайлы.Ссылка
		|ГДЕ
		|	ЭлектронныйДокументВходящийЭДО.Ссылка = &ЭлектронныйДокумент
		|	И СообщениеЭДО.ТипЭлементаРегламента В (&ТипыЭлементовРегламента)";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ДокументЭДО);
	
	ТипыЭлементовРегламентаПервичныхЭД = Новый Массив;
	ТипыЭлементовРегламентаПервичныхЭД.Добавить(Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя);
	
	Запрос.УстановитьПараметр("ТипыЭлементовРегламента", ТипыЭлементовРегламентаПервичныхЭД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеБЭД, Выборка); 
	
	ДанныеБЭД.УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(Выборка.ФайлЭДО);
	
	Возврат ДанныеБЭД;
	
КонецФункции

// Возвращает данные для представления настройки ручного отражения в учете
//
// Параметры:
//  Получатель				 - СправочникСсылка.Организации
//  Отправитель				 - СправочникСсылка.Контрагенты
//  ИдентификаторПолучателя	 - Строка
//  ИдентификаторОтправителя - Строка
//  ВидЭДО					 - СправочникСсылка.ВидыДокументовЭДО
// 
// Возвращаемое значение:
//  Структура - см. ОтражениеВУчетеДО.НовыеДанныеДляПредставленияНастройкиРучногоОтраженияВУчете
//
Функция ДанныеДляПредставленияНастройкиРучногоОтраженияВУчете(Знач Получатель, Знач Отправитель, 
	Знач ИдентификаторПолучателя, Знач ИдентификаторОтправителя, Знач ВидЭДО) Экспорт
	
	Данные = ОтражениеВУчетеДО.НовыеДанныеДляПредставленияНастройкиРучногоОтраженияВУчете();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныДляСозданияДокументовПоВходящимЭДО.Шаблон КАК Шаблон,
		|	ШаблоныДляСозданияДокументовПоВходящимЭДО.Тематика КАК Тематика
		|ИЗ
		|	РегистрСведений.ШаблоныДляСозданияДокументовПоВходящимЭДО КАК ШаблоныДляСозданияДокументовПоВходящимЭДО
		|ГДЕ
		|	ШаблоныДляСозданияДокументовПоВходящимЭДО.Получатель = &Получатель
		|	И ШаблоныДляСозданияДокументовПоВходящимЭДО.Отправитель = &Отправитель
		|	И ШаблоныДляСозданияДокументовПоВходящимЭДО.ИдентификаторОтправителя = &ИдентификаторОтправителя
		|	И ШаблоныДляСозданияДокументовПоВходящимЭДО.ИдентификаторПолучателя = &ИдентификаторПолучателя
		|	И ШаблоныДляСозданияДокументовПоВходящимЭДО.ВидЭДО = &ВидЭДО";
	
	Запрос.УстановитьПараметр("ВидЭДО", ВидЭДО);
	Запрос.УстановитьПараметр("ИдентификаторОтправителя", ИдентификаторОтправителя);
	Запрос.УстановитьПараметр("ИдентификаторПолучателя", ИдентификаторПолучателя);
	Запрос.УстановитьПараметр("Отправитель", Отправитель);
	Запрос.УстановитьПараметр("Получатель", Получатель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Данные.КоличествоШаблонов = Выборка.Количество();
	Если Данные.КоличествоШаблонов > 0 Тогда
		
		Выборка.Следующий();
		Данные.ПервыйШаблон = Выборка.Шаблон;
		Данные.ПерваяТематика = Выборка.Тематика;
		
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

// Заполняет данные выбора при автоподборе в поле пар шаблон/тематика 
//
// Параметры:
//  Текст				 - Строка
//  ДанныеВыбора		 - СписокЗначений
//
Процедура ЗаполнитьДанныеВыбораПриАвтоподбореШаблонов(Знач Текст, ДанныеВыбора) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТематикиДокументов.Ссылка КАК ТематикаДокумента,
		|	ШаблоныДокументов.Ссылка КАК ШаблонДокумента
		|ИЗ
		|	Справочник.ШаблоныДокументов КАК ШаблоныДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТематикиДокументов КАК ТематикиДокументов
		|		ПО (ТематикиДокументов.ВидДокумента = ШаблоныДокументов.ВидДокумента
		|		ИЛИ ТематикиДокументов.ВидДокумента = ШаблоныДокументов.ВидДокумента.Родитель)
		|		И (НЕ ШаблоныДокументов.ПометкаУдаления)
		|		И (НЕ ШаблоныДокументов.ЭтоГруппа)
		|		И (ШаблоныДокументов.Тематика = ТематикиДокументов.Ссылка
		|		ИЛИ ШаблоныДокументов.Тематика = ЗНАЧЕНИЕ(Справочник.ТематикиДокументов.ПустаяСсылка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДокументов КАК ВидыДокументов
		|		ПО ШаблоныДокументов.ВидДокумента = ВидыДокументов.Ссылка
		|ГДЕ
		|	НЕ ШаблоныДокументов.ПометкаУдаления
		|	И (ШаблоныДокументов.Наименование ПОДОБНО &Текст
		|	ИЛИ ТематикиДокументов.Наименование ПОДОБНО &Текст)
		|	И ШаблоныДокументов.ФормаДокумента <> ЗНАЧЕНИЕ(Перечисление.ВариантыФормДокументов.Бумажная)
		|	И НЕ ВидыДокументов.ЯвляетсяОбращениемОтГраждан";
	
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	ДанныеВыбора = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		
		ШаблонДокумента = Выборка.ШаблонДокумента;
		ТематикаДокумента = Выборка.ТематикаДокумента;
		Представление = РаботаСШаблонамиДокументовКлиентСервер.ПредставлениеШаблона(ШаблонДокумента, ТематикаДокумента);
		
		Значение = Новый Структура;
		Значение.Вставить("ШаблонДокумента", ШаблонДокумента);
		Значение.Вставить("ТематикаДокумента", ТематикаДокумента);
		Значение.Вставить("ПредставлениеШаблона", Представление);
		
		ДанныеВыбора.Добавить(Значение, Значение.ПредставлениеШаблона);
		
	КонецЦикла;
	
КонецПроцедуры

#Область ПодборДляИсходящегоЭДО

// Возвращает параметры подбора документа для исходящего ЭДО
// 
// Параметры:
//  ДокументЭДО Документ ЭДО
// 
// Возвращаемое значение:
//  Структура - Параметры подбора документа ДОДля исходящего ЭДО:
// * ОбъектыУчета - Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
// * ПараметрыФормыВыбора - см. ПараметрыФормыВыбораПриПодбореДляИсходящегоЭДО
Функция ПараметрыПодбораДокументаДОДляИсходящегоЭДО(ДокументЭДО) Экспорт
	
	ТаблицаОбъектовУчета = ИнтеграцияЭДО.ОбъектыУчетаЭлектронныхДокументов(ДокументЭДО);
	
	ОбъектыУчета = Новый Массив(); // Массив Из ОпределяемыйТип.ОснованияЭлектронныхДокументовЭДО
	Для Каждого СтрокаОбъектаУчета Из ТаблицаОбъектовУчета Цикл
		ОбъектыУчета.Добавить(СтрокаОбъектаУчета.ОбъектУчета);
	КонецЦикла;
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ОбъектыУчета", ОбъектыУчета);
	ПараметрыПодбора.Вставить("ПараметрыФормыВыбора", ПараметрыФормыВыбораПриПодбореДляИсходящегоЭДО(ДокументЭДО));
	
	Возврат ПараметрыПодбора;
	
КонецФункции

#КонецОбласти

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Возвращает Истина, если к электронному документу привязан документ учета, иначе - Ложь
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
// 
// Возвращаемое значение:
//  Булево
//
Функция ЕстьОбъектУчета(ЭлектронныйДокумент)
	
	ОбъектыУчета = ИнтеграцияЭДО.ОбъектыУчетаАктуальногоЭлектронногоДокумента(ЭлектронныйДокумент);
	Возврат ОбъектыУчета.Количество() > 0;
	
КонецФункции

// Возвращает структуру данных, полученных из сообщения ЭДО
// 
// Возвращаемое значение:
//  Неопределено, Структура - поля: 
// * ДокументЭДО          - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
// * Организация          - СправочникСсылка.Организации
// * Контрагент           - СправочникСсылка.Контрагенты
// * СуммаДокумента       - Число
// * УстановленныеПодписи - см. ЭлектроннаяПодпись.УстановленныеПодписи
//
Функция НовыеДанныеДокументооборотаБЭДДляОтражения()
	
	ДанныеБЭД = Новый Структура;
	ДанныеБЭД.Вставить("ДокументЭДО", Документы.ЭлектронныйДокументВходящийЭДО.ПустаяСсылка());
	ДанныеБЭД.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	ДанныеБЭД.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	ДанныеБЭД.Вставить("СуммаДокумента", 0);
	ДанныеБЭД.Вставить("УстановленныеПодписи", Новый Массив); 
	Возврат ДанныеБЭД;
	
КонецФункции

// Возвращает Истина, если документ отражается вручную, иначе - ложь
//
// Параметры:
//  ПараметрыНастроекПолучения - Структура - поля:
//   * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//   * ИдентификаторКонтрагента - Строка
//   * ИдентификаторОрганизации - Строка
//   * Организация - СправочникСсылка.Организации
//   * Контрагент - СправочникСсылка.Контрагенты
// 
// Возвращаемое значение:
//  Булево
//
Функция ДокументДолженБытьОтраженВРучную(ПараметрыНастроекПолучения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПолученияЭлектронныхДокументов.СпособОбработки КАК СпособОбработки
		|ИЗ
		|	РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолученияЭлектронныхДокументов
		|ГДЕ
		|	НастройкиПолученияЭлектронныхДокументов.Получатель = &Получатель
		|	И НастройкиПолученияЭлектронныхДокументов.Отправитель = &Отправитель
		|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя = &ИдентификаторОтправителя
		|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя = &ИдентификаторПолучателя
		|	И НастройкиПолученияЭлектронныхДокументов.ВидДокумента = &ВидДокумента";
	
	Запрос.УстановитьПараметр("ВидДокумента", ПараметрыНастроекПолучения.ВидДокумента);
	Запрос.УстановитьПараметр("ИдентификаторОтправителя", ПараметрыНастроекПолучения.ИдентификаторКонтрагента);
	Запрос.УстановитьПараметр("ИдентификаторПолучателя", ПараметрыНастроекПолучения.ИдентификаторОрганизации);
	Запрос.УстановитьПараметр("Отправитель", ПараметрыНастроекПолучения.Контрагент);
	Запрос.УстановитьПараметр("Получатель", ПараметрыНастроекПолучения.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат ВРег(Выборка.СпособОбработки) = ВРег("Вручную");
		
	Иначе
		
		Запрос.УстановитьПараметр("ИдентификаторОтправителя", "");
		Запрос.УстановитьПараметр("ИдентификаторПолучателя", "");
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат ВРег(Выборка.СпособОбработки) = ВРег("Вручную");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет заполнены ли шаблоны ручного создания для документа
//
// Параметры:
//  ПараметрыНастроекПолучения - Структура - поля:
//   * ВидДокумента - СправочникСсылка.ВидыДокументовЭДО
//   * ИдентификаторКонтрагента - Строка
//   * ИдентификаторОрганизации - Строка
//   * Организация - СправочникСсылка.Организации
//   * Контрагент - СправочникСсылка.Контрагенты
// 
// Возвращаемое значение:
//  СписокЗначений Из Структура - поля:
//   * ШаблонДокумента - СправочникСсылка.ШаблоныДокументов
//   * ТематикаДокумента - СправочникСсылка.ТематикиДокументов
//
Функция СписокШаблоныДляРучногоСозданияДокумента(ПараметрыНастроекПолучения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШаблоныДляСозданияДокументовПоВходящимЭДО.Шаблон КАК ШаблонДокумента,
		|	ШаблоныДляСозданияДокументовПоВходящимЭДО.Тематика КАК ТематикаДокумента
		|ИЗ
		|	РегистрСведений.ШаблоныДляСозданияДокументовПоВходящимЭДО КАК ШаблоныДляСозданияДокументовПоВходящимЭДО
		|ГДЕ
		|	ШаблоныДляСозданияДокументовПоВходящимЭДО.Получатель = &Получатель
		|	И ШаблоныДляСозданияДокументовПоВходящимЭДО.Отправитель = &Отправитель
		|	И ШаблоныДляСозданияДокументовПоВходящимЭДО.ИдентификаторОтправителя = &ИдентификаторОтправителя
		|	И ШаблоныДляСозданияДокументовПоВходящимЭДО.ИдентификаторПолучателя = &ИдентификаторПолучателя
		|	И ШаблоныДляСозданияДокументовПоВходящимЭДО.ВидЭДО = &ВидЭДО";
	
	Запрос.УстановитьПараметр("ВидЭДО", ПараметрыНастроекПолучения.ВидДокумента);
	Запрос.УстановитьПараметр("ИдентификаторОтправителя", ПараметрыНастроекПолучения.ИдентификаторКонтрагента);
	Запрос.УстановитьПараметр("ИдентификаторПолучателя", ПараметрыНастроекПолучения.ИдентификаторОрганизации);
	Запрос.УстановитьПараметр("Отправитель", ПараметрыНастроекПолучения.Контрагент);
	Запрос.УстановитьПараметр("Получатель", ПараметрыНастроекПолучения.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	СписокШаблонов = Новый СписокЗначений;
	ПополнитьСписокШаблоновВыборкойЗапроса(СписокШаблонов, Выборка); 
	
	Если СписокШаблонов.Количество() = 0 Тогда
		
		// Пробуем найти настройки без идентификаторов, но с совпадающими отправителем и получателем
		// Можно указать оба идентификатора (для частной настройки), либо не указывать ни одного (для общей)
		Запрос.УстановитьПараметр("ИдентификаторПолучателя", ""); 
		Запрос.УстановитьПараметр("ИдентификаторОтправителя", "");
		Выборка = Запрос.Выполнить().Выбрать();
		ПополнитьСписокШаблоновВыборкойЗапроса(СписокШаблонов, Выборка);
		
	КонецЕсли;
	
	Возврат СписокШаблонов;
	
КонецФункции

// Процедура - Пополнить список шаблонов выборкой запроса
//
// Параметры:
//  СписокШаблонов - СписокЗначений Из Структура - поля:
//   * ШаблонДокумента - СправочникСсылка.ШаблоныДокументов
//   * ТематикаДокумента - СправочникСсылка.ТематикиДокументов
//  Выборка - ВыборкаИзРезультатаЗапроса - поля:
//   * ШаблонДокумента - СправочникСсылка.ШаблоныДокументов
//   * ТематикаДокумента - СправочникСсылка.ТематикиДокументов
//
Процедура ПополнитьСписокШаблоновВыборкойЗапроса(СписокШаблонов, Выборка)
	
	Пока Выборка.Следующий() Цикл
		
		ПараШаблонТематика = Новый Структура;
		ПараШаблонТематика.Вставить("ШаблонДокумента", Выборка.ШаблонДокумента);
		ПараШаблонТематика.Вставить("ТематикаДокумента", Выборка.ТематикаДокумента);
		
		ПредставлениеШаблона = "";
		Если ЗначениеЗаполнено(Выборка.ТематикаДокумента) Тогда
			ПредставлениеШаблона = РаботаСШаблонамиДокументовКлиентСервер.ПредставлениеШаблона(
				Выборка.ШаблонДокумента, 
				Выборка.ТематикаДокумента);
		Иначе
			ПредставлениеШаблона = РаботаСШаблонамиДокументовКлиентСервер.ПредставлениеШаблона(
				Выборка.ШаблонДокумента);
		КонецЕсли;
		СписокШаблонов.Добавить(ПараШаблонТематика, ПредставлениеШаблона); 
		
	КонецЦикла;
	
КонецПроцедуры

#Область ПодборДляИсходящегоЭДО

// Возвращает параметры формы выбора документа ДО для исходящего документа ЭДО
// 
// Параметры:
//  ДокументЭДО - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  Структура:
//    * Отбор - Структура:
//      ** ВидДокумента - Массив Из СправочникСсылка.ВидыДокументов
//      ** Организация - СправочникСсылка.Организации
//      ** Контрагент - СправочникСсылка.Контрагенты
//      ** ФормаДокумента - ПеречислениеСсылка.ВариантыФормДокументов
//      ** СостоянияЭДО - Массив Из Неопределено, ПеречислениеСсылка.СостоянияДокументовЭДО
//    * ЗапретитьИзменятьФильтры - Булево
//
Функция ПараметрыФормыВыбораПриПодбореДляИсходящегоЭДО(ДокументЭДО)
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументЭДО,
		"Организация, Контрагент, ВидДокумента");
	
	ВидДокументаЭДО = РеквизитыДокумента.ВидДокумента;
	Организация = РеквизитыДокумента.Организация;
	Контрагент = РеквизитыДокумента.Контрагент;
	
	ВидыДокументовДО = ВидыДокументовДляОтправкиПоВидуЭДО(ВидДокументаЭДО, Организация, Контрагент);
	
	ОтборДокумента = Новый Структура;
	ОтборДокумента.Вставить("ВидДокумента", ВидыДокументовДО);
	ОтборДокумента.Вставить("Организация", Организация);
	ОтборДокумента.Вставить("Контрагент", Контрагент);
	ОтборДокумента.Вставить("ФормаДокумента", Перечисления.ВариантыФормДокументов.Электронная);
	СостоянияЭДО = Новый Массив;
	СостоянияЭДО.Добавить(Неопределено);
	СостоянияЭДО.Добавить(Перечисления.СостоянияДокументовЭДО.ПустаяСсылка());
	СостоянияЭДО.Добавить(Перечисления.СостоянияДокументовЭДО.НеСформирован);
	ОтборДокумента.Вставить("СостоянияЭДО", СостоянияЭДО);
	
	ПараметрыФормыВыбораДокумента = Новый Структура;
	ПараметрыФормыВыбораДокумента.Вставить("Отбор", ОтборДокумента); 
	ПараметрыФормыВыбораДокумента.Вставить("ЗапретитьИзменятьФильтры", Истина);
	
	Возврат ПараметрыФормыВыбораДокумента;
	
КонецФункции

// Возвращает виды документов ДО, по которым возможна отправка заданным видом документа ЭДО
// 
// Параметры:
//  ВидДокументаЭДО - СправочникСсылка.ВидыДокументовЭДО
//  Организация - ОпределяемыйТип.Организация
//  Контрагент - ОпределяемыйТип.КонтрагентБЭД
// 
// Возвращаемое значение:
//  Массив Из СправочникСсылка.ВидыДокументов
Функция ВидыДокументовДляОтправкиПоВидуЭДО(ВидДокументаЭДО, Организация, Контрагент)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыДокументов.Ссылка КАК ВидДокумента,
		|	НастройкиОтправкиДокументовПоЭДО.Отправлять КАК Отправлять,
		|	Ложь КАК ЧастныеПравила
		|ИЗ
		|	РегистрСведений.НастройкиОтправкиДокументовПоЭДО КАК НастройкиОтправкиДокументовПоЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументов КАК ВидыДокументов
		|		ПО НастройкиОтправкиДокументовПоЭДО.ВидДокумента = ВидыДокументов.Ссылка
		|ГДЕ
		|	ВидыДокументов.ИспользоватьЭДО
		|	И НастройкиОтправкиДокументовПоЭДО.Отправитель = &ПустойОтправитель
		|	И НастройкиОтправкиДокументовПоЭДО.Получатель В (&ПустойПолучатель)
		|	И НастройкиОтправкиДокументовПоЭДО.ВидДокументаЭДО = &ВидДокументаЭДО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВидыДокументов.Ссылка КАК ВидДокумента,
		|	НастройкиОтправкиДокументовПоЭДО.Отправлять КАК Отправлять,
		|	Истина
		|ИЗ
		|	РегистрСведений.НастройкиОтправкиДокументовПоЭДО КАК НастройкиОтправкиДокументовПоЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументов КАК ВидыДокументов
		|		ПО НастройкиОтправкиДокументовПоЭДО.ВидДокумента = ВидыДокументов.Ссылка
		|ГДЕ
		|	ВидыДокументов.ИспользоватьЭДО
		|	И НастройкиОтправкиДокументовПоЭДО.Отправитель = &Организация
		|	И НастройкиОтправкиДокументовПоЭДО.Получатель = &Контрагент
		|	И НастройкиОтправкиДокументовПоЭДО.ВидДокументаЭДО = &ВидДокументаЭДО";
	Запрос.УстановитьПараметр("ПустойОтправитель", Справочники.Организации.ПустаяСсылка());
	
	ПустыеЗначенияПолучателя = Новый Массив();
	ПустыеЗначенияПолучателя.Добавить(Неопределено);
	ПустыеЗначенияПолучателя.Добавить(Справочники.Организации.ПустаяСсылка());
	ПустыеЗначенияПолучателя.Добавить(Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойПолучатель", ПустыеЗначенияПолучателя);
	
	Запрос.УстановитьПараметр("ВидДокументаЭДО", ВидДокументаЭДО);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВидыДокументов = Новый Массив(); // Массив Из СправочникСсылка.ВидыДокументов
	ВидыДокументовЗапрещенные = Новый Массив(); // Массив Из СправочникСсылка.ВидыДокументов
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Отправлять Тогда
			ВидыДокументов.Добавить(Выборка.ВидДокумента);
		КонецЕсли;
		
		Если Выборка.ЧастныеПравила И Не Выборка.Отправлять Тогда
			ВидыДокументовЗапрещенные.Добавить(Выборка.ВидДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
	ВидыДляОтправки = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ВидыДокументов, ВидыДокументовЗапрещенные);
	
	Возврат ВидыДляОтправки;
	
КонецФункции

#КонецОбласти

#КонецОбласти
