// @strict-types


#Область ПрограммныйИнтерфейс

#Область Визуализация

// Возвращает данные визуализации
// 
// Параметры:
//  ДокументЭДО - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//
// Возвращаемое значение:
//  Структура.
//
Функция ДанныеВизуализации(ДокументЭДО) Экспорт
	
	ДанныеВизуализации = Новый Структура(
	"Состояние, ТабличныйДокумент, ТабличныйДокументСформирован, ПрисоединенныйФайл, ПрисоединенныйФайлПредставление, ПрисоединенныйФайлРасширение");
	
	ДанныеВизуализации.Состояние = "";   

	ПараметрыВизуализацииДокумента = ИнтерфейсДокументовЭДО.НовыеПараметрыВизуализацииДокумента();
	ПараметрыВизуализацииДокумента.ВыводитьБанковскиеРеквизиты = Ложь;
	ПараметрыВизуализацииДокумента.ВыводитьДопДанные = Ложь;
	ПараметрыВизуализацииДокумента.ВыводитьКопияВерна = Ложь;
	
	ПараметрыПолученияПредставления = ЭлектронныеДокументыЭДО.НовыеПараметрыПолученияПредставленияДанныхСообщенияПоСсылке();
	ПараметрыПолученияПредставления.Сообщение = ИнтерфейсДокументовЭДОВызовСервера.СообщениеОтправителя(ДокументЭДО);
	ПараметрыПолученияПредставления.ПараметрыВизуализации = ПараметрыВизуализацииДокумента;
	
	Сообщение = ПараметрыПолученияПредставления.Сообщение;
	ТипЭлементаРегламента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "ТипЭлементаРегламента");
	
	Если ТипЭлементаРегламента = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя") Тогда
		
		ТипЭлементаРегламентаИскомый = ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ИнформацияПолучателя");
		СообщениеПолучателя = ОбменЭДОДокументооборот.ПолучитьСообщение(ДокументЭДО, ТипЭлементаРегламентаИскомый);
		Если ЗначениеЗаполнено(СообщениеПолучателя) Тогда
			ПараметрыПолученияПредставления.СообщениеОтвета = СообщениеПолучателя;
		КонецЕсли;	
	КонецЕсли;	
	
	ПредставлениеДанных = ЭлектронныеДокументыЭДО.ПредставлениеДанныхСообщенияПоСсылке(
		ПараметрыПолученияПредставления); 
		
	ДанныеВизуализации.ТабличныйДокументСформирован = ПредставлениеДанных.Успех;	
		
	Если ПредставлениеДанных.Успех Тогда
		
		ЭлектронныеДокументыЭДО.ДополнитьТабличныйДокументШтампамиПодписей(
			ПредставлениеДанных.ПредставлениеДокумента, ПараметрыПолученияПредставления.Сообщение);

		ДанныеВизуализации.ТабличныйДокумент = ПредставлениеДанных.ПредставлениеДокумента;
		
	Иначе
		
		ДанныеВизуализации.ПрисоединенныйФайл = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыПолученияПредставления.Сообщение, "ОсновнойФайл");
		
		РеквФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеВизуализации.ПрисоединенныйФайл, "Наименование, Расширение");
		ДанныеВизуализации.ПрисоединенныйФайлПредставление = РеквФайла.Наименование + "." + РеквФайла.Расширение; 
		ДанныеВизуализации.ПрисоединенныйФайлРасширение = РеквФайла.Расширение;
		
		ПоддерживаемыеТипы =
			ОбзорФайловКлиентСервер.ПоддерживаемыеТипыПредпросмотра();
		МассивРасширений = СтрРазделить(ПоддерживаемыеТипы, " ", Ложь);
		РасширениеПоддерживается = (МассивРасширений.Найти(РеквФайла.Расширение) <> Неопределено);
		
		Если РасширениеПоддерживается Тогда
			ЭтоLinuxКлиент = ОбщегоНазначения.ЭтоLinuxКлиент();  
			
			Если ЭтоLinuxКлиент Тогда
			
				РасширениеФайла = НРег(РеквФайла.Расширение);

				Расширение = СтрЗаменить(РасширениеФайла, ".", "");
				Если Расширение = "doc"
					Или Расширение = "docx"
					Или Расширение = "ppt"
					Или Расширение = "pptx"
					Или Расширение = "xls"
					Или Расширение = "xlsx"
					Или Расширение = "odt"
					Или Расширение = "odp"
					Или Расширение = "ods" Тогда
					РасширениеПоддерживается = Ложь;
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;	                 
		
		Если РасширениеПоддерживается Тогда //  т.е. сможем в предпросмотре его показать
			
			ДанныеФайла = ИнтерфейсДокументовЭДОВызовСервера.ДанныеФайла(ДанныеВизуализации.ПрисоединенныйФайл);
			ДанныеВизуализации.Вставить("ДвоичныеДанные", ДанныеФайла.ДвоичныеДанные);
			ДанныеВизуализации.ПрисоединенныйФайлРасширение = ДанныеФайла.Расширение;			
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	Возврат ДанныеВизуализации;
	
КонецФункции


#КонецОбласти

#Область АвтоматическоеСозданиеОбъектовПоДаннымЭД

// Возвращает настройку автоматического создания объекта.
//
// Возвращаемое значение:
//	см. РегистрыСведений.НастройкиАвтоматическогоСозданияОбъектов.КлючНастройки
//
Функция КлючНастройкиАвтоматическогоСозданияОбъекта() Экспорт
	
	Возврат ОбменЭДОДокументооборот.КлючНастройкиАвтоматическогоСозданияОбъекта();

КонецФункции

// Возвращает настройку автоматического создания объекта.
//
// Параметры:
//	КлючНастройки - см. ОбменЭДОДокументооборот.КлючНастройкиАвтоматическогоСозданияОбъекта.
//
// Возвращаемое значение:
//	см. ОбменЭДОДокументооборот.НастройкаАвтоматическогоСозданияОбъекта
//
Функция НастройкаАвтоматическогоСозданияОбъекта(КлючНастройки) Экспорт
	
	Возврат ОбменЭДОДокументооборот.НастройкаАвтоматическогоСозданияОбъекта(КлючНастройки);
	
КонецФункции

// Сохраняет настройку автоматического создания объекта.
//
// Параметры:
//	КлючНастройки - см. КлючНастройкиАвтоматическогоСозданияОбъекта.
//	Настройка - СправочникСсылка.ПравилаЗагрузкиДанныхВДО.
//
Процедура СохранитьНастройкуАвтоматическогоСозданияОбъекта(КлючНастройки, Настройка) Экспорт
	
	ОбменЭДОДокументооборот.СохранитьНастройкуАвтоматическогоСозданияОбъекта(КлючНастройки, Настройка);
	
КонецПроцедуры

// Удаляет настройку автоматического создания объекта.
//
// Параметры:
//	КлючНастройки - см. КлючНастройкиАвтоматическогоСозданияОбъекта.
//
Процедура УдалитьНастройкуАвтоматическогоСозданияОбъекта(КлючНастройки) Экспорт
	
	ОбменЭДОДокументооборот.УдалитьНастройкуАвтоматическогоСозданияОбъекта(КлючНастройки);
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеИсходящегоЭДО

// Обрабатывает создание исходящего ЭДО по документу ДО
// 
// Параметры:
//  СозданныйДокументЭДО - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ПредыдущийАктуальныйЭДО - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  ФайлЭДО - СправочникСсылка.Файлы
Процедура ОбработатьСозданиеИсходящегоЭДО(СозданныйДокументЭДО, ПредыдущийАктуальныйЭДО, ФайлЭДО) Экспорт
	
	РезультатПереформирования = ОбменСКонтрагентами.ПереформироватьДокументСогласноНастройкамОтправки(СозданныйДокументЭДО);
	Если Не РезультатПереформирования.ДокументОбработан Тогда
		Для Каждого Ошибка Из РезультатПереформирования.ОшибкиЗаполнения Цикл
			ОбщегоНазначения.СообщитьПользователю(Ошибка);
		КонецЦикла;		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредыдущийАктуальныйЭДО) Тогда
		ИнтеграцияЭДО.ОчиститьАктуальностьЭлектронногоДокумента(ПредыдущийАктуальныйЭДО);
		ОбменЭДОДокументооборот.УстановитьСостояниеДокументаЭДО(
			ПредыдущийАктуальныйЭДО, Перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением);
	КонецЕсли;
	
	ВерсияФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлЭДО, "ТекущаяВерсия");
	РегистрыСведений.ФайлыУчаствующиеВЭДО.ДобавитьОтправленныйФайл(ВерсияФайла, СозданныйДокументЭДО, ФайлЭДО);
	
КонецПроцедуры

#КонецОбласти

#Область ДанныеДокументовЭДО

// Возвращает данные документов ЭДО по документам ДО
// 
// Параметры:
//  ДокументыДО - Массив Из СправочникСсылка.ДокументыПредприятия
// 
// Возвращаемое значение:
//  см. ОбменЭДОДокументооборот.ДанныеЭДОПоДокументамДО
Функция ДанныеЭДОПоДокументамДО(ДокументыДО) Экспорт
	
	Возврат ОбменЭДОДокументооборот.ДанныеЭДОПоДокументамДО(ДокументыДО);
	
КонецФункции

// Возвращает данные ЭДО документа ДО
//  При наличии множетсва документов следует использовать см. ДанныеЭДОПоДокументамДО
// 
// Параметры:
//  Документ - СправочникСсылка.ДокументыПредприятия
// 
// Возвращаемое значение:
//  см. ОбменЭДОДокументооборот.ДанныеЭДОДокументаДО
Функция ДанныеЭДОДокументаДО(Документ) Экспорт
	
	Возврат ОбменЭДОДокументооборот.ДанныеЭДОДокументаДО(Документ);
	
КонецФункции

#КонецОбласти

#Область РаботаСЭП

// Возвращает данные подписи для открытия
// 
// Параметры:
//  ФайлСообщенияЭДО - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  ИдентификаторПодписи - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеДанныеПодписиСУчетомДоверенности
Функция ДанныеПодписиДляОткрытия(ФайлСообщенияЭДО, ИдентификаторПодписи) Экспорт
	
	СообщениеЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСообщенияЭДО, "ВладелецФайла");
	
	ПодписиСообщения = ЭлектронныеДокументыЭДО.УстановленныеПодписиСУчетомДоверенностей(СообщениеЭДО);
	
	НайденаПодпись = Ложь;
	ДанныеНужнойПодписи = ЭлектронныеДокументыЭДОКлиентСервер.НовыеДанныеПодписиСУчетомДоверенности();
	
	Для Каждого ДанныеПодписи Из ПодписиСообщения Цикл
		
		СвойстваПодписи = ДанныеПодписи.СвойстваПодписи; // см. ЭлектроннаяПодписьКлиентСервер.НовыеСвойстваПодписи
		
		ИдентификаторТекущейПодписи = РаботаСЭП.ИдентификаторПодписи(
			ДанныеПодписи.ПодписанныйОбъект, СвойстваПодписи.ПорядковыйНомер);
		
		Если ИдентификаторПодписи = ИдентификаторТекущейПодписи Тогда
			ДанныеНужнойПодписи = ДанныеПодписи;
			НайденаПодпись = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не НайденаПодпись Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'У файла ЭДО %1 не найдена подпись с идентификатором %2'"),
			ФайлСообщенияЭДО, ИдентификаторПодписи);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Возврат ДанныеНужнойПодписи;
	
КонецФункции

// Возвращает массив сообщений ЭДО по файлам ЭДО
// 
// Параметры:
//  ФайлыЭДО - Массив Из СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
// 
// Возвращаемое значение:
//  Массив Из ДокументСсылка.СообщениеЭДО
Функция СообщенияЭДОПоФайламЭДО(ФайлыЭДО) Экспорт
	
	Сообщения = Новый Массив(); // Массив Из ДокументСсылка.СообщениеЭДО
	
	РеквизитыФайлов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ФайлыЭДО, "ВладелецФайла");
	Для Каждого Элемент Из РеквизитыФайлов Цикл
		
		Сообщение = Элемент.Значение.ВладелецФайла;
		Если ЗначениеЗаполнено(Сообщение) Тогда
			Сообщения.Добавить(Сообщение);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Сообщения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Код процедур и функций

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиОтправкиЭДО

// Возвращает список отправителей ЭД, найденных по строке поиска.
// 
// Параметры:
//  ПараметрыПолученияДанных - Структура:
//   * СтрокаПоиска - Строка -
//  ПолучательЭД - СправочникСсылка.Организации, СправочникСсылка.Контрагенты - Получатель ЭД для отбора отправителя
//  ОтправителиОтбор - Неопределено, Массив Из СправочникСсылка.Организации - 
//  ОтправителиИсключения - Неопределено, Массив Из СправочникСсылка.Организации -
// 
// Возвращаемое значение:
//  СписокЗначений Из СправочникСсылка.Организации - список найденных организаций
//
Функция ДанныеВыбораОтправителяЭД(Знач ПараметрыПолученияДанных, Знач ПолучательЭД, Знач ОтправителиОтбор = Неопределено,
		Знач ОтправителиИсключения = Неопределено) Экспорт
	
	Возврат ОбменЭДОДокументооборот.ДанныеВыбораОтправителяЭД(ПараметрыПолученияДанных, ПолучательЭД, ОтправителиОтбор,
		ОтправителиИсключения);
	
КонецФункции

// Возвращает список получателей ЭД, найденных по строке поиска.
// 
// Параметры:
//  ПараметрыПолученияДанных - Структура:
//   * СтрокаПоиска - Строка -
//  ОтправительЭД - СправочникСсылка.Организации - Отправитель ЭД для отбора получателя
//  ПолучателиОтбор - Неопределено, Массив Из ОпределяемыйТип.УчастникЭДО - 
//  ПолучателиИсключения - Неопределено, Массив Из ОпределяемыйТип.УчастникЭДО -
//   
// Возвращаемое значение:
//  СписокЗначений Из ОпределяемыйТип.УчастникЭДО - найденные организации и контрагенты
//
Функция ДанныеВыбораПолучателяЭД(Знач ПараметрыПолученияДанных, Знач ОтправительЭД, Знач ПолучателиОтбор = Неопределено,
		Знач ПолучателиИсключения = Неопределено) Экспорт
	
	Возврат ОбменЭДОДокументооборот.ДанныеВыбораПолучателяЭД(ПараметрыПолученияДанных, ОтправительЭД, ПолучателиОтбор,
		ПолучателиИсключения);
	
КонецФункции

// Возвращает список идентификаторв учетных записей ЭДО отправителя ЭД.
// 
// Параметры:
//  Отправитель - СправочникСсылка.Организации - Отправитель ЭД
//  Получатель - СправочникСсылка.Организации, СправочникСсылка.Контрагенты - Получатель ЭД
//  ИдентификаторыПолучателяОтбор - Неопределено, Массив Из Строка -
//   
// Возвращаемое значение:
//  СписокЗначений Из Строка - Идентификаторы учетных записей ЭДО отправителя
//
Функция ИдентификаторыОтправителя(Знач Отправитель, Знач Получатель,
		Знач ИдентификаторыПолучателяОтбор = Неопределено) Экспорт
	
	Возврат ОбменЭДОДокументооборот.ИдентификаторыОтправителя(Отправитель, Получатель, ИдентификаторыПолучателяОтбор);
		 
КонецФункции

// Возвращает список идентификаторв учетных записей ЭДО получателя ЭД.
// 
// Параметры:
//  Отправитель - СправочникСсылка.Организации - Отправитель ЭД
//  Получатель - СправочникСсылка.Организации, СправочникСсылка.Контрагенты - Получатель ЭД
//  ИдентификаторыОтправителяОтбор - Неопределено, Массив Из Строка - 
// 
// Возвращаемое значение:
//  СписокЗначений Из Строка - Идентификаторы учетных записей ЭДО получателя
//
Функция ИдентификаторыПолучателя(Знач Отправитель, Знач Получатель,
		Знач ИдентификаторыОтправителяОтбор = Неопределено) Экспорт
	
	Возврат ОбменЭДОДокументооборот.ИдентификаторыПолучателя(Отправитель, Получатель, ИдентификаторыОтправителяОтбор);
	
КонецФункции

// Возвращает отправителей ЭД, отобранных, по получателю.
// 
// Параметры:
//  ПолучательЭД - СправочникСсылка.Организации, СправочникСсылка.Контрагенты - Получатель ЭД для отбора отправителей
//  ОтправителиОтбор - Неопределено, Массив Из СправочникСсылка.Организации - 
//  ОтправителиИсключения - Неопределено, Массив Из СправочникСсылка.Организации - 
// Возвращаемое значение:
//  Массив Из СправочникСсылка.Организации - Отправители ЭД
//
Функция ОтправителиЭД(Знач ПолучательЭД, Знач ОтправителиОтбор = Неопределено, Знач ОтправителиИсключения = Неопределено) Экспорт
	
	Возврат ОбменЭДОДокументооборот.ОтправителиЭД(ПолучательЭД, ОтправителиОтбор, ОтправителиИсключения);
	
КонецФункции

// Возвращает получателей ЭД, отобранных, по отправителю.
// 
// Параметры:
//  ОтправительЭД - СправочникСсылка.Организации - Отправитель ЭД для отбора поолучателей
//  ПолучателиОтбор - Неопределено, Массив Из ОпределяемыйТип.УчастникЭДО - 
//  ПолучателиИсключения - Неопределено, Массив Из ОпределяемыйТип.УчастникЭДО - 
// Возвращаемое значение:
//  Массив Из ОпределяемыйТип.УчастникЭДО - Получатели ЭД
//
Функция ПолучателиЭД(Знач ОтправительЭД, Знач ПолучателиОтбор = Неопределено, Знач ПолучателиИсключения = Неопределено) Экспорт

	Возврат ОбменЭДОДокументооборот.ПолучателиЭД(ОтправительЭД, ПолучателиОтбор, ПолучателиИсключения);
		
КонецФункции

#КонецОбласти

#КонецОбласти
