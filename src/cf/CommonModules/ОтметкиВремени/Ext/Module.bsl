
// @strict-types

#Область ПрограммныйИнтерфейс

// Возвращает текущую отметку времени.
//
// Возвращаемое значение:
//	Число - Текущая отметка времени.
//
Функция Текущая() Экспорт
	
	Возврат ТекущаяУниверсальнаяДатаВМиллисекундах();
	
КонецФункции

// Устанавливает идентификаторы записей набора независимого регистра сведений.
// 
// Параметры:
//	Объект - ОпределяемыйТип.ОтметкиВремениРегистры - Набор записей, котором необходимо установить идентификаторы записей.
//
Процедура ЗаполнитьИдентификаторыНабораЗаписей(Объект) Экспорт
	
	КлючевойНабор = РегистрыСведений[Объект.Метаданные().Имя].СоздатьНаборЗаписей(); // ОпределяемыйТип.ОтметкиВремениРегистры
	Для Каждого Поле Из КлючевойНабор.Отбор Цикл
		Поле.Использование = Истина;
	КонецЦикла;
	
	Для Каждого Запись Из Объект Цикл //@skip-check expression-not-collection
		Для Каждого Поле Из КлючевойНабор.Отбор Цикл
			Поле.Значение = Запись[Поле.Имя]; //@skip-check statement-type-change
		КонецЦикла;
		
		Запись.ИдентификаторОтметкиВремени = ИдентификаторНабораЗаписей(КлючевойНабор); //@skip-check property-return-type
	КонецЦикла;
	
КонецПроцедуры

// Отключает регистрацию отметок для указанного объекта.
// 
// Параметры:
//	Объект - РегистрСведенийНаборЗаписей - Объект, для которого нужно отключить регистрацию отметок времени.
//
Процедура ОтключитьРегистрацию(Объект) Экспорт
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
	Объект.ДополнительныеСвойства.Вставить("ПереходОтключитьМеханизмРегистрации");
		
КонецПроцедуры

// Возвращает вид ключа отметок времени для объекта метаданных.
// 
// Параметры:
//	ИдентификаторОбъекта - СправочникСсылка.ИдентификаторыОбъектовМетаданных -
//						 - СправочникСсылка.ИдентификаторыОбъектовРасширений - Объект-источник отметок времени, тип
//																			   ключа которого необходимо определить.
//
// Возвращаемое значение:
//	ПеречислениеСсылка.ВидыКлючейОтметокВремени - Вид ключа объекта.
//
Функция ВидКлючаОбъекта(ИдентификаторОбъекта) Экспорт
	
	ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ИдентификаторОбъекта);
	
	Если ОбщегоНазначения.ЭтоКонстанта(ОбъектМетаданных) Тогда
		Возврат Перечисления.ВидыКлючейОтметокВремени.КлючЗначенияКонстанты;
	ИначеЕсли ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(ОбъектМетаданных) Тогда
		Возврат Перечисления.ВидыКлючейОтметокВремени.КлючСсылочногоОбъекта;
	ИначеЕсли ОбщегоНазначения.ЭтоРегистрСведений(ОбъектМетаданных) Тогда
		//@skip-check property-return-type
		Если ОбъектМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
			Возврат Перечисления.ВидыКлючейОтметокВремени.КлючНабораПодчинениеРегистратору;
		КонецЕсли;
		
		//@skip-check property-return-type
		Измерения = ОбъектМетаданных.Измерения; // КоллекцияОбъектовМетаданных. 
		//@skip-check property-return-type
		ОтборПоПериоду = ОбъектМетаданных.ОсновнойОтборПоПериоду; // Булево
		
		Если Измерения.Количество() = 0 И ОтборПоПериоду <> Истина Тогда
			Возврат Перечисления.ВидыКлючейОтметокВремени.КлючНабораРегистрБезИзмерений;
		КонецЕсли;
		
		ЭлементСостава =
			Метаданные.ОбщиеРеквизиты.ИдентификаторОтметкиВремени.Состав.Найти(ОбъектМетаданных); // ЭлементСоставаОбщегоРеквизита
		Если ЭлементСостава <> Неопределено
				И ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать Тогда
			Возврат Перечисления.ВидыКлючейОтметокВремени.КлючНабораИдентификаторНабораЗаписей;
		КонецЕсли;
		
		//@skip-check invocation-parameter-type-intersect
		//@skip-check property-return-type
		Если Измерения.Количество() > 0 И ЭтоСсылочныйТипЗначения(Измерения[0].Тип) Тогда
			Возврат Перечисления.ВидыКлючейОтметокВремени.КлючНабораПервоеСсылочноеИзмерение;
		КонецЕсли;
	ИначеЕсли ОбщегоНазначения.ЭтоРегистрНакопления(ОбъектМетаданных)
			Или ОбщегоНазначения.ЭтоРегистрСведений(ОбъектМетаданных)
			Или ОбщегоНазначения.ЭтоРегистрБухгалтерии(ОбъектМетаданных)
			Или ОбщегоНазначения.ЭтоРегистрРасчета(ОбъектМетаданных) Тогда
			
		Возврат Перечисления.ВидыКлючейОтметокВремени.КлючНабораПодчинениеРегистратору;
	Иначе
		ВызватьИсключение СтрШаблон("%1 %2 ""%3""",
			НСтр("ru = 'Не удалось определить вид ключа'", ОбщегоНазначения.КодОсновногоЯзыка()),
			НСтр("ru = 'для'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ИдентификаторОбъекта);
	КонецЕсли;
	
КонецФункции

// Возвращает имя поля ключа объекта.
//
// Параметры:
//	ИдентификаторОбъекта - СправочникСсылка.ИдентификаторыОбъектовМетаданных - 
//						 - СправочникСсылка.ИдентификаторыОбъектовРасширений - Объект-источник отметок времени, ключевое
//																			   поле которого необходимо определить.
//
// Возвращаемое значение:
//	Строка - Ключевое поле объекта.
//
Функция ПолеКлючаОбъекта(ИдентификаторОбъекта) Экспорт
	
	ВидКлюча = ОтметкиВремениПовтИсп.ВидКлючаОбъекта(ИдентификаторОбъекта);
	
	Если ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючСсылочногоОбъекта Тогда
		Возврат "Ссылка";
	ИначеЕсли ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючНабораПодчинениеРегистратору Тогда
		Возврат "Регистратор";
	ИначеЕсли ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючНабораПервоеСсылочноеИзмерение Тогда
		Возврат ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ИдентификаторОбъекта).Измерения[0].Имя; //@skip-check property-return-type
	ИначеЕсли ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючНабораИдентификаторНабораЗаписей Тогда
		Возврат "ИдентификаторОтметкиВремени";
	ИначеЕсли ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючНабораРегистрБезИзмерений Тогда
		Возврат "*";
	ИначеЕсли ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючЗначенияКонстанты Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат "-";
	
КонецФункции

// Возвращает тип поля ключа объекта.
//
// Параметры:
//	ИдентификаторОбъекта - СправочникСсылка.ИдентификаторыОбъектовМетаданных - 
//						 - СправочникСсылка.ИдентификаторыОбъектовРасширений - Объект-источник отметок времени, тип ключевого
//																			   поля которого необходимо определить.
//
// Возвращаемое значение:
//	ОписаниеТипов - Тип ключа объекта.
//
Функция ТипКлючаОбъекта(ИдентификаторОбъекта) Экспорт
	
	ВидКлюча = ОтметкиВремениПовтИсп.ВидКлючаОбъекта(ИдентификаторОбъекта);
	ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ИдентификаторОбъекта); // ОбъектМетаданныхСправочник, ОбъектМетаданныхРегистрСведений, ОбъектМетаданныхКонстанта
	
	Если ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючСсылочногоОбъекта Тогда
		Возврат ОбъектМетаданных.СтандартныеРеквизиты.Ссылка.Тип;
	ИначеЕсли ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючНабораПодчинениеРегистратору Тогда
		Возврат ОбъектМетаданных.СтандартныеРеквизиты.Регистратор.Тип;
	ИначеЕсли ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючНабораПервоеСсылочноеИзмерение Тогда
		Возврат ОбъектМетаданных.Измерения[0].Тип;
	ИначеЕсли ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючНабораИдентификаторНабораЗаписей Тогда
		Возврат Метаданные.ОбщиеРеквизиты.ИдентификаторОтметкиВремени.Тип;
	ИначеЕсли ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючЗначенияКонстанты Тогда
		Возврат ОбъектМетаданных.Тип;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает идентификатор набора записей.
//
// Параметры:
//	Объект - ОпределяемыйТип.ОтметкиВремениРегистры - Объект, для которого необходимо получить идентификатор.
//
// Возвращаемое значение:
//	УникальныйИдентификатор - Идентификатор набора записей.
//
Функция ИдентификаторНабораЗаписей(Объект) Экспорт
	
	Хеширование = Новый ХешированиеДанных(ХешФункция.MD5);
	Хеширование.Добавить(XMLСтрока(Новый ХранилищеЗначения(Объект.Отбор, Новый СжатиеДанных(0))));
	Хеш = СтрЗаменить(Строка(Хеширование.ХешСумма), " ", "");
	Хеширование = Неопределено;
	
	Возврат Новый УникальныйИдентификатор(СтрШаблон("%1-%2-%3-%4-%5",
		Лев(Хеш, 8), Сред(Хеш, 9, 4), Сред(Хеш, 13, 4), Сред(Хеш, 17, 4), Сред(Хеш, 21)));
	
КонецФункции

// Возвращает описание ключа отметки времени.
//
// Параметры:
//	Объект - ОпределяемыйТип.ОтметкиВремениКонстанты -
//		   - ОпределяемыйТип.ОтметкиВремениСсылочныеОбъекты -
//		   - ОпределяемыйТип.ОтметкиВремениРегистры
//		   - ЛюбаяСсылка - Объект, для которого необходимо получить ключ.
//
// Возвращаемое значение:
//	Структура:
//		* ИдентификаторКлюча - УникальныйИдентификатор - Идентификатор ключа.
//		* ТипКлюча - СправочникСсылка.ИдентификаторыОбъектовМетаданных - Тип ключа отметки времени.
//				   - СправочникСсылка.ИдентификаторыОбъектовРасширений -
//				   - Неопределено -
//		* ВидКлюча - ПеречислениеСсылка.ВидыКлючейОтметокВремени - Вид ключа отметки времени.
//				   - Неопределено
//
Функция ОписаниеКлючаОтметкиВремени(Объект) Экспорт
	
	ИдентификаторОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Объект));
	ВидКлюча = ОтметкиВремениПовтИсп.ВидКлючаОбъекта(ИдентификаторОбъекта);
	
	ОписаниеКлюча = Новый Структура(
		"ИдентификаторКлюча, ТипКлюча, ВидКлюча",
		ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор(), Неопределено, ВидКлюча);
		
	Если ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючЗначенияКонстанты
			Или ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючНабораРегистрБезИзмерений Тогда
		
		Возврат ОписаниеКлюча;
	ИначеЕсли ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючСсылочногоОбъекта Тогда
		Если ОбщегоНазначения.ЗначениеСсылочногоТипа(Объект) Тогда
			ОписаниеКлюча.ИдентификаторКлюча = Объект.УникальныйИдентификатор();
			ОписаниеКлюча.ТипКлюча = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Объект));
		Иначе
			ОписаниеКлюча.ИдентификаторКлюча = Объект.Ссылка.УникальныйИдентификатор();
			ОписаниеКлюча.ТипКлюча = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Объект.Ссылка));
		КонецЕсли;
	ИначеЕсли ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючНабораПодчинениеРегистратору Тогда
		ОписаниеКлюча.ИдентификаторКлюча = Объект.Отбор.Регистратор.Значение.УникальныйИдентификатор();
		ОписаниеКлюча.ТипКлюча =
			ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Объект.Отбор.Регистратор.Значение));
	ИначеЕсли ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючНабораПервоеСсылочноеИзмерение Тогда
		ПолеКлюча = ПолеКлючаОбъекта(ИдентификаторОбъекта);
		
		Ключ = Неопределено; // ЛюбаяСсылка
		Если Объект.Отбор[ПолеКлюча].Использование Тогда
			Ключ = Объект.Отбор[ПолеКлюча].Значение;
		ИначеЕсли Объект.Количество() = 1 Тогда
			Ключ = Объект[0][ПолеКлюча]; //@skip-check statement-type-change
		ИначеЕсли Объект.Количество() > 1 Тогда
			КлючиИсточника = Объект.Выгрузить(, ПолеКлюча);
			КлючиИсточника.Свернуть(ПолеКлюча);
			
			Ключ = КлючиИсточника[0][0];
		КонецЕсли;
		
		Если Ключ = Неопределено Тогда
			ВызватьИсключение СтрШаблон("%1 ""%5"" %2 ""%3"" [%4]",
				НСтр("ru = 'Не найдено значение ключевого поля'", ОбщегоНазначения.КодОсновногоЯзыка()),
				НСтр("ru = 'для'", ОбщегоНазначения.КодОсновногоЯзыка()),
				ИдентификаторОбъекта,
				Объект.Отбор,
				ПолеКлюча);
		ИначеЕсли Не ОбщегоНазначения.ЗначениеСсылочногоТипа(Ключ) Тогда
			ВызватьИсключение СтрШаблон("%1 ""%6"" %2 ""%4"" %3 [%5]",
				НСтр("ru = 'Значение ключевого поля'",ОбщегоНазначения.КодОсновногоЯзыка()),
				НСтр("ru = 'объекта'", ОбщегоНазначения.КодОсновногоЯзыка()),
				НСтр("ru = 'не является ссылкой'", ОбщегоНазначения.КодОсновногоЯзыка()),
				ИдентификаторОбъекта,
				Объект.Отбор,
				ПолеКлюча);
		КонецЕсли;
		
		ОписаниеКлюча.ИдентификаторКлюча = Ключ.УникальныйИдентификатор();
		ОписаниеКлюча.ТипКлюча = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Ключ));
	ИначеЕсли ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючНабораИдентификаторНабораЗаписей Тогда
		ИдентификаторКлюча = Неопределено; // УникальныйИдентификатор
		Если Объект.Количество() = 0 Тогда
			ИдентификаторКлюча = ИдентификаторНабораЗаписей(Объект);
		Иначе
			Если Не ЗначениеЗаполнено(Объект[0]["ИдентификаторОтметкиВремени"]) Тогда //@skip-check wrong-string-literal-content
				ЗаполнитьИдентификаторыНабораЗаписей(Объект);
			КонецЕсли;
			
			//@skip-check wrong-string-literal-content
			ИдентификаторКлюча = Объект[0]["ИдентификаторОтметкиВремени"]; // УникальныйИдентификатор
		КонецЕсли;
		
		ОписаниеКлюча.ИдентификаторКлюча = ИдентификаторКлюча;
		ОписаниеКлюча.ТипКлюча = Неопределено;
	КонецЕсли;
	
	Возврат ОписаниеКлюча;
	
КонецФункции

// Возвращает значение ключа отметки времени по его описанию (для ссылочных объектов).
//
// Параметры:
//	ОписаниеКлюча - см. ОписаниеКлючаОтметкиВремени
//
// Возвращаемое значение:
//	ЛюбаяСсылка, Неопределено - Значение ключа.
//
Функция ЗначениеСсылкиПоОписаниюКлюча(ОписаниеКлюча) Экспорт
	
	Если Не ОписаниеКлюча.ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючСсылочногоОбъекта
			И Не ОписаниеКлюча.ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючНабораПодчинениеРегистратору
			И Не ОписаниеКлюча.ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючНабораПервоеСсылочноеИзмерение Тогда
			
		Возврат Неопределено;
	КонецЕсли;
			
	Возврат ЗначениеСсылкиПоКлючуОтметкиВремени(ОписаниеКлюча.ИдентификаторКлюча, ОписаниеКлюча.ТипКлюча);
	
КонецФункции

// Возвращает значение ключа отметки времени.
//
// Параметры:
//	ИдентификаторКлюча - УникальныйИдентификатор - Идентификатор ключа отметки времени.
//	ТипКлюча - СправочникСсылка.ИдентификаторыОбъектовМетаданных -
//			 - СправочникСсылка.ИдентификаторыОбъектовРасширений - Тип ключа отметки времени.
//
// Возвращаемое значение:
//	ЛюбаяСсылка - Значение ключа.
//
Функция ЗначениеСсылкиПоКлючуОтметкиВремени(ИдентификаторКлюча, ТипКлюча) Экспорт
	
	Возврат ОтметкиВремениПовтИсп.МенеджерОбъектаПоИдентификатору(ТипКлюча).ПолучитьСсылку(ИдентификаторКлюча);
	
КонецФункции

// Преобразует дату в отметку времени.
//
// Параметры:
//	Дата - Дата - Дата, которую необходимо преобразовать.
//	УчитыватьЧасовойПояс - Булево - Признак необходимости учета часового пояса при расчете отметки времени.
//
// Возвращаемое значение:
//	Число - Отметка времени.
//
Функция ДатаВОтметкуВремени(Дата, УчитыватьЧасовойПояс = Ложь) Экспорт
	
	Возврат (?(УчитыватьЧасовойПояс, УниверсальноеВремя(Дата, ЧасовойПоясСеанса()), Дата) - Дата(1, 1, 1)) * 1000;
	
КонецФункции

// Возвращает представление отметки времени, совместимое с определяемым типом ОтметкаВремени.
//
// Параметры:
//	Отметка - Число - Отметка времени, которую необходимо преобразовать.
//
// Возвращаемое значение:
//	Строка - Представление отметки времени.
//
Функция ПредставлениеОтметки(Отметка) Экспорт
	
	ОтметкаДатой = УниверсальнаяДатаПоОтметкеВремени(Отметка);
	Миллисекунд = Отметка % 1000;
	
	Возврат
		Формат(ОтметкаДатой, "ДФ=yyyyMMddHHmmss") + Формат(Миллисекунд, "ЧЦ=3; ЧН=000; ЧВН=; ЧГ=0");
	
КонецФункции

// Возвращает универсальную дату, соответствующую отметке времени.
//
// Параметры:
//	ОтметкаВремени - Число - Отметка времени.
//
// Возвращаемое значение:
//	Дата - Универсальные дата и время.
//
Функция УниверсальнаяДатаПоОтметкеВремени(ОтметкаВремени) Экспорт
	
	Возврат Дата(1, 1, 1) + Цел(ОтметкаВремени / 1000);
	
КонецФункции

// Возвращает дату, соответствующую отметке времени (в часовом поясе сеанса).
//
// Параметры:
//	ОтметкаВремени - Число - Отметка времени.
//
// Возвращаемое значение:
//	Дата - Дата и время в часовом поясе сеанса.
//
Функция ДатаПоОтметкеВремени(ОтметкаВремени) Экспорт
	
	УниверсальнаяДата = УниверсальнаяДатаПоОтметкеВремени(ОтметкаВремени);
	РазностьДат = ТекущаяДатаСеанса() - ТекущаяУниверсальнаяДата();
	Дата = УниверсальнаяДата + РазностьДат;
	
	Возврат Дата;
	
КонецФункции

// Возвращает в виде структуры отбор набора записей, для которого была зарегистрирована отметка времени.
//
// Параметры:
//  Хранилище - ХранилищеЗначения - Хранилище, содержащее отбор.
//
// Возвращаемое значение:
//	Структура, Неопределено - Значение отбора.
//
Функция ЗначенияКлюча(Хранилище) Экспорт
	
	Попытка
		Отбор = Хранилище.Получить(); // Отбор
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если Отбор = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Значения = Новый Структура();
	
	Для Каждого Поле Из Отбор Цикл
		Если Поле.Использование Тогда
			Значения.Вставить(Поле.Имя, Поле.Значение);
		КонецЕсли;
	КонецЦикла;
	Отбор = Неопределено;
	
	Возврат Значения;
	
КонецФункции

// Возвращает менеджер объекта метаданных по его идентификатору.
//
// Параметры:
//	Идентификатор - СправочникСсылка.ИдентификаторыОбъектовМетаданных -
//				  - СправочникСсылка.ИдентификаторыОбъектовРасширений - Идентификатор объекта метаданных.
//
// Возвращаемое значение:
//	СправочникМенеджер
//	ДокументМенеджер
//	БизнесПроцессМенеджер
//	ЗадачаМенеджер
//	ПланВидовХарактеристикМенеджер
//
Функция МенеджерОбъектаПоИдентификатору(Идентификатор) Экспорт
	
	ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(Идентификатор);
	Возврат ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
	
КонецФункции

// Проверяет, является ли ключ ключом ссылочного типа.
//
// Параметры:
//	ВидКлюча - ПеречислениеСсылка.ВидыКлючейОтметокВремени - Вид ключа отметки времени.
//
// Возвращаемое значение:
//	Булево - Истина, если это ключ ссылочного типа.
//
Функция ЭтоВидКлючаСсылочногоТипа(ВидКлюча) Экспорт
	
	Возврат ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючСсылочногоОбъекта
				Или ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючНабораПодчинениеРегистратору
				Или ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючНабораПервоеСсылочноеИзмерение;
	
КонецФункции

// Формирует данные отметки времени.
//
// Параметры:
//  Объект - ОпределяемыйТип.ОтметкиВремениРегистры, ЛюбаяСсылка - Объект, для которого необходимо получить данные.
// 
// Возвращаемое значение:
//	Структура - Данные отметки времени:
//		* Отметка  - Число - Отметка времени.
//		* Источник - ОпределяемыйТип.ИсточникиДляОтметокВремени, Неопределено - Источник отметки времени.
//
Функция ДанныеОтметкиВремени(Объект) Экспорт
	
	ДанныеОтметкиВремени = Новый Структура("Отметка, Источник", 0, Неопределено);
		
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.ИдентификаторКлюча КАК ИдентификаторКлюча,
		|	Т.ТипКлюча КАК Ключ,
		|	Т.Отметка КАК Отметка,
		|	Т.Источник КАК Источник
		|ПОМЕСТИТЬ Очередь
		|ИЗ
		|	РегистрСведений.ОтметкиВремениСсылочныхОбъектов КАК Т
		|ГДЕ
		|	Т.ИдентификаторКлюча = &ИдентификаторКлюча
		|		И Т.ТипКлюча = &ТипКлюча
		|		И &ВидКлюча = ЗНАЧЕНИЕ(Перечисление.ВидыКлючейОтметокВремени.КлючСсылочногоОбъекта)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.ИдентификаторКлюча,
		|	Т.ТипКлюча,
		|	Т.Отметка,
		|	Т.Источник
		|ИЗ
		|	РегистрСведений.ОтметкиВремениРегистровКонстант КАК Т
		|ГДЕ
		|	Т.ИдентификаторКлюча = &ИдентификаторКлюча
		|		И Т.ТипКлюча = &ТипКлюча
		|		И Т.Объект = &Объект
		|		И &ВидКлюча <> ЗНАЧЕНИЕ(Перечисление.ВидыКлючейОтметокВремени.КлючСсылочногоОбъекта)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.ИдентификаторКлюча,
		|	Т.ТипКлюча,
		|	Т.Отметка,
		|	Т.Источник
		|ИЗ
		|	РегистрСведений.ОтметкиВремениОчередь1 КАК Т
		|ГДЕ
		|	Т.ИдентификаторКлюча = &ИдентификаторКлюча
		|		И Т.ТипКлюча = &ТипКлюча
		|		И Т.Объект = &Объект
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.ИдентификаторКлюча,
		|	Т.ТипКлюча,
		|	Т.Отметка,
		|	Т.Источник
		|ИЗ
		|	РегистрСведений.ОтметкиВремениОчередь2 КАК Т
		|ГДЕ
		|	Т.ИдентификаторКлюча = &ИдентификаторКлюча
		|		И Т.ТипКлюча = &ТипКлюча
		|		И Т.Объект = &Объект
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.ИдентификаторКлюча,
		|	Т.ТипКлюча,
		|	Т.Отметка,
		|	Т.Источник
		|ИЗ
		|	РегистрСведений.ОтметкиВремениОчередь3 КАК Т
		|ГДЕ
		|	Т.ИдентификаторКлюча = &ИдентификаторКлюча
		|		И Т.ТипКлюча = &ТипКлюча
		|		И Т.Объект = &Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Отметка КАК Отметка,
		|	Т.Источник КАК Источник
		|ИЗ
		|	Очередь КАК Т
		|ГДЕ
		|	(Т.ИдентификаторКлюча, Т.Отметка) В
		|		(ВЫБРАТЬ
		|			Т.ИдентификаторКлюча КАК ИдентификаторКлюча,
		|			МАКСИМУМ(Т.Отметка) КАК Отметка
		|		ИЗ
		|			Очередь КАК Т
		|		СГРУППИРОВАТЬ ПО
		|			Т.ИдентификаторКлюча)");
		
	ОписаниеКлюча = ОписаниеКлючаОтметкиВремени(Объект);
	
	Запрос.УстановитьПараметр("ИдентификаторКлюча", ОписаниеКлюча.ИдентификаторКлюча);
	Запрос.УстановитьПараметр("ТипКлюча", ОписаниеКлюча.ТипКлюча);
	Запрос.УстановитьПараметр("ВидКлюча", ОписаниеКлюча.ВидКлюча);
	Запрос.УстановитьПараметр("Объект", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Объект)));
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаРезультата = РезультатЗапроса.Выбрать();
	Если ВыборкаРезультата.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеОтметкиВремени, ВыборкаРезультата);
	КонецЕсли;
	
	Возврат ДанныеОтметкиВремени;
	
КонецФункции

#Область ОбработкаОчереди

// Обработчик регламентного задания ОтметкиВремениОбработка.
//
Процедура ОбработкаОчереди() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОтметкиВремениОбработка);
	
	РазобратьОчередь(Истина);
	
КонецПроцедуры

// Выполняет перенос отметок времени из очереди на постоянное хранение.
//
// Параметры:
//	РежимОжидания - Булево - Признак использования режима ожидания.
//
Процедура РазобратьОчередь(РежимОжидания = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СостояниеОбработки = 2;
	ВремяПерерыва = Неопределено;
	ОкнаОчереди = Неопределено;
	ОтметкиВремениСсылочныхОбъектов = Неопределено;
	ОтметкиВремениРегистровКонстант = Неопределено;
	
	Пока СостояниеОбработки >= 1 Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			Блокировка.Добавить("Константа.ИспользоватьОтметкиВремени");
			Блокировка.Заблокировать();
			
			ДанныеОчереди = ДанныеОчереди(); // @skip-check query-in-loop
			
			Если ДанныеОчереди.Количество() Тогда
				Для Каждого Запись Из ДанныеОчереди Цикл
					Если Запись.ОбновитьГраницу = Ложь Тогда
						Продолжить;
					КонецЕсли;
					
					Если Запись.ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючСсылочногоОбъекта Тогда
						Если ОтметкиВремениСсылочныхОбъектов = Неопределено Тогда
							ОтметкиВремениСсылочныхОбъектов =
								РегистрыСведений.ОтметкиВремениСсылочныхОбъектов.СоздатьНаборЗаписей();
							ОтметкиВремениСсылочныхОбъектов.Отбор.ИдентификаторКлюча.Использование = Истина;
							ОтметкиВремениСсылочныхОбъектов.Отбор.ТипКлюча.Использование = Истина;
							ОтметкиВремениСсылочныхОбъектов.Добавить();
							ОтключитьРегистрацию(ОтметкиВремениСсылочныхОбъектов);
						КонецЕсли;
						
						ЗаполнитьЗначенияСвойств(ОтметкиВремениСсылочныхОбъектов[0], Запись);
						
						ОтметкиВремениСсылочныхОбъектов.Отбор.ИдентификаторКлюча.Значение = Запись.ИдентификаторКлюча;
						ОтметкиВремениСсылочныхОбъектов.Отбор.ТипКлюча.Значение = Запись.ТипКлюча;
						ОтметкиВремениСсылочныхОбъектов.Записать();
					Иначе
						Если ОтметкиВремениРегистровКонстант = Неопределено Тогда
							ОтметкиВремениРегистровКонстант =
								РегистрыСведений.ОтметкиВремениРегистровКонстант.СоздатьНаборЗаписей();
							ОтметкиВремениРегистровКонстант.Отбор.ИдентификаторКлюча.Использование = Истина;
							ОтметкиВремениРегистровКонстант.Отбор.ТипКлюча.Использование = Истина;
							ОтметкиВремениРегистровКонстант.Отбор.Объект.Использование = Истина;
							ОтметкиВремениРегистровКонстант.Добавить();
							ОтключитьРегистрацию(ОтметкиВремениРегистровКонстант);
						КонецЕсли;
						
						ЗаполнитьЗначенияСвойств(ОтметкиВремениРегистровКонстант[0], Запись);
						
						ОтметкиВремениРегистровКонстант.Отбор.ИдентификаторКлюча.Значение = Запись.ИдентификаторКлюча;
						ОтметкиВремениРегистровКонстант.Отбор.ТипКлюча.Значение = Запись.ТипКлюча;
						ОтметкиВремениРегистровКонстант.Отбор.Объект.Значение = Запись.Объект;
						ОтметкиВремениРегистровКонстант.Записать();
					КонецЕсли;
				КонецЦикла;
				
				СостояниеОбработки = 2;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ВызватьИсключение;
			
		КонецПопытки;
		
		Если ДанныеОчереди.Количество() < 100 Тогда
			СостояниеОбработки = СостояниеОбработки - 1;
			Если Не РежимОжидания Тогда
				СостояниеОбработки = СостояниеОбработки - 1;
			КонецЕсли;
		КонецЕсли;
		
		Пока ДанныеОчереди.Количество() Цикл
			Если ОкнаОчереди = Неопределено Тогда
				ОкнаОчереди = Новый Массив(4);
			КонецЕсли;
			
			НачатьТранзакцию();
			
			Попытка
				
				Для Н = 1 По Мин(10, ДанныеОчереди.Количество()) Цикл
					Запись = ДанныеОчереди[0];
					
					Если Не ЗначениеЗаполнено(Запись.Объект) Тогда
						ДанныеОчереди.Удалить(Запись);
						Продолжить;
					КонецЕсли;
					
					Набор = ОкнаОчереди[Запись.Окно];
					Если Набор = Неопределено Тогда
						Набор = РегистрыСведений["ОтметкиВремениОчередь" + Запись.Окно].СоздатьНаборЗаписей();
						Для Каждого Поле Из Набор.Отбор Цикл
							Поле.Использование = Истина;
						КонецЦикла;
						ОтключитьРегистрацию(Набор);
						ОкнаОчереди[Запись.Окно] = Набор;
					КонецЕсли;
					
					Отбор = Набор.Отбор;
					
					Отбор.Отметка.Значение = Запись.Отметка;
					Отбор.ИдентификаторКлюча.Значение = Запись.ИдентификаторКлюча;
					Отбор.ТипКлюча.Значение = Запись.ТипКлюча;
					Отбор.Объект.Значение = Запись.Объект;
					
					Набор.Записать();
					
					ДанныеОчереди.Удалить(Запись);
				КонецЦикла;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'ОтметкиВремени.ОбработкаОчереди'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			КонецПопытки;
			
		КонецЦикла;
		
		Если РежимОжидания Тогда
			Если ВремяПерерыва = Неопределено Тогда
				ВремяПерерыва = ТекущаяУниверсальнаяДата() + 3600;
			КонецЕсли;
			Если ТекущаяУниверсальнаяДата() >= ВремяПерерыва Тогда
				Прервать;
			КонецЕсли;
			Если СостояниеОбработки = 1 Тогда
				ОбщегоНазначенияБТС.Пауза(3);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Набор = Неопределено;
	ОтметкиВремениСсылочныхОбъектов = Неопределено;
	ОтметкиВремениРегистровКонстант = Неопределено;
	
	Если ДанныеОчереди <> Неопределено Тогда
		ДанныеОчереди.Очистить();
	КонецЕсли;
	
	Если ОкнаОчереди <> Неопределено Тогда
		ОкнаОчереди.Очистить();
	КонецЕсли;

КонецПроцедуры

// Ошибка типизации.
// 
// Параметры:
//  ИмяПоля - Строка, Неопределено - Имя поля
//  Значение - Произвольный - Значение
//  Метаданное - ОбъектМетаданных, Произвольный, Неопределено, Null - Метаданное
Процедура ОшибкаТипизации(ИмяПоля, Значение, Метаданное) Экспорт
	
	Причина = СтрШаблон("%1 ""%3"" %2 ""%4"" (%5)",
		НСтр("ru = 'Неактуальный тип значения'"),
		НСтр("ru = 'поле'"),
		ТипЗнч(Значение),
		ИмяПоля, Метаданное.ПолноеИмя());
	ВызватьИсключение Причина;
	
КонецПроцедуры

#КонецОбласти

#Область ВыборкаИзменений

// Возвращает порцию зарегистрированных изменений.
//
// Параметры:
//	Отметка - Число - Отметка, начиная с которой необходимо выбрать изменения.
//	ПараметрыВыборки - см. ПараметрыВыборкиИзменений
//
// Возвращаемое значение:
//	ТаблицаЗначений:
//		* ИдентификаторКлюча - УникальныйИдентификатор - Идентификатор ключа, зарегистрированной отметки времени.
//		* ТипКлюча - СправочникСсылка.ИдентификаторыОбъектовМетаданных -
//				   - СправочникСсылка.ИдентификаторыОбъектовРасширений - Тип ключа, зарегистрированной отметки времени.
//		* Объект - СправочникСсылка.ИдентификаторыОбъектовМетаданных -
//				 - СправочникСсылка.ИдентификаторыОбъектовРасширений - Тип объекта, для которого зарегистрирована отметка.
//		* Ключ - ЛюбаяСсылка, УникальныйИдентификатор - Ключ объекта, для которого зарегистрирована отметка времени.
//		* Отметка - Число - Отметка времени.
//		* Удаление - Булево - Признак удаления данных.
//		* Источник - ОпределяемыйТип.ИсточникиДляОтметокВремени - Источник отметки времени.
//		* ВидКлюча - ПеречислениеСсылка.ВидыКлючейОтметокВремени - Вид ключа отметки времени.
//		* УдаленныеКлючи - Структура Из КлючИЗначение - Структура, содержащая значение отбора исходного набора записей.
//
Функция ВыбратьИзменения(Отметка, ПараметрыВыборки) Экспорт
	
	Изменения = РезультатВыборкиИзменений(Отметка, ПараметрыВыборки);
	
	Изменения.Колонки.Добавить(
		"Ключ", Новый ОписаниеТипов(ОбщегоНазначения.ОписаниеТипаВсеСсылки(), "УникальныйИдентификатор"));
	Изменения.Колонки.Добавить("ПолеКлюча", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(10)));
	Изменения.Колонки.Добавить("ПолеИсточника", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(150)));
	Изменения.Колонки.Добавить("УдаленныеКлючи", Новый ОписаниеТипов("Неопределено"));
	
	// Разыменование ключей.
	Для Каждого Строка Из Изменения Цикл
		Если ОтметкиВремениПовтИсп.ЭтоВидКлючаСсылочногоТипа(Строка.ВидКлюча) Тогда
			Строка.Ключ = ЗначениеСсылкиПоКлючуОтметкиВремени(Строка.ИдентификаторКлюча, Строка.ТипКлюча); //@skip-check property-return-type
		Иначе
			Строка.Ключ = Строка.ИдентификаторКлюча; //@skip-check property-return-type
		КонецЕсли;
		
		Если Строка.ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючЗначенияКонстанты
				Или Строка.ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючНабораРегистрБезИзмерений Тогда
			Строка.ПолеКлюча = "Объект";
		Иначе
			Строка.ПолеКлюча = "Ключ";
		КонецЕсли;
		
		Строка.ПолеИсточника = ПолеКлючаОбъекта(Строка.Объект);
		Если Строка.Удаление
				И Строка.ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючНабораИдентификаторНабораЗаписей Тогда
			Строка.УдаленныеКлючи = ЗначенияКлюча(Строка.ХранилищеКлюча);
		КонецЕсли;
		
		ПараметрыВыборки.ГраницаВыборкиИзменений = Макс(ПараметрыВыборки.ГраницаВыборкиИзменений, Строка.Граница);
	КонецЦикла;
	
	Изменения.Колонки.Удалить("ХранилищеКлюча");
	
	Если ПараметрыВыборки.МенеджерВременныхТаблиц <> Неопределено Тогда
		ТекстЗапроса = Новый Массив; // Массив Из Строка
		
		ГраницаОтметокСдвинута = Отметка <> ПараметрыВыборки.ГраницаВыборкиИзменений;
		
		Для Каждого Таблица Из ПараметрыВыборки.МенеджерВременныхТаблиц.Таблицы Цикл
			Если (ГраницаОтметокСдвинута И Таблица.ПолноеИмя = "Изменённые")
					Или (Не ГраницаОтметокСдвинута И Таблица.ПолноеИмя = "РАНЕЕ_ВЫБРАННЫЕ_ИЗМЕНЕНИЯ") Тогда
					
				Продолжить;
			КонецЕсли;
			
			ТекстЗапроса.Добавить(СтрШаблон("УНИЧТОЖИТЬ %1", Таблица.ПолноеИмя));
		КонецЦикла;

		Если ГраницаОтметокСдвинута Тогда
			ТекстЗапроса.Добавить(
				"ВЫБРАТЬ
				|	Т.ИдентификаторКлюча КАК ИдентификаторКлюча,
				|	Т.ТипКлюча КАК ТипКлюча,
				|	Т.Объект КАК Объект,
				|	Т.Отметка КАК Отметка
				|ПОМЕСТИТЬ РАНЕЕ_ВЫБРАННЫЕ_ИЗМЕНЕНИЯ
				|ИЗ
				|	Изменённые КАК Т");
			
			ТекстЗапроса.Добавить("УНИЧТОЖИТЬ Изменённые");
		КонецЕсли;
		
		Запрос = Новый Запрос(СтрСоединить(ТекстЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов()));
		Запрос.МенеджерВременныхТаблиц = ПараметрыВыборки.МенеджерВременныхТаблиц;
		Запрос.Выполнить();
	КонецЕсли;
	
	Возврат Изменения;
	
КонецФункции

// Производит инициализацию параметров выборки изменений.
//
// Параметры:
//  Объект - СправочникСсылка.ИдентификаторыОбъектовРасширений -
//		   - СправочникСсылка.ИдентификаторыОбъектовМетаданных -
//		   - Массив из СправочникСсылка.ИдентификаторыОбъектовРасширений -
//		   - Массив из СправочникСсылка.ИдентификаторыОбъектовМетаданных - Идентификатор (тип) объекта, изменения
//																		   которого необходимо получить.
//		   - Неопределено - Выбирать изменения без отбора по идентификаторам (типам) объектов.
//	Источник - ОпределяемыйТип.ИсточникиДляОтметокВремени - Источник отметок времени.
//	РазмерПорции - Число - Количество выбираемых за один раз изменений.
//
// Возвращаемое значение:
//	см. ПараметрыВыборкиИзменений.
//
Функция ИнициализироватьПараметрыВыборки(Объект = Неопределено, Источник = Неопределено, РазмерПорции = 1000) Экспорт
	
	ПараметрыВыборки = ПараметрыВыборкиИзменений();
	
	Если Объект <> Неопределено Тогда 
		ПараметрыВыборки.Объект = Объект;
	КонецЕсли;
	
	Если Источник <> Неопределено Тогда 
		ПараметрыВыборки.Источник = Источник;
	КонецЕсли;
	
	Если ПараметрыВыборки.РазмерПорции < 2 Тогда
		ПараметрыВыборки.РазмерПорции = 2;
	Иначе
		ПараметрыВыборки.РазмерПорции = РазмерПорции;
	КонецЕсли;
	
	МенеджерВременныхТаблиц(ПараметрыВыборки);
	
	Возврат ПараметрыВыборки;
	
КонецФункции

// Деструктор параметров выборки изменений.
//
// Параметры:
//	ПараметрыВыборки - см. ПараметрыВыборкиИзменений.
//
Процедура ЗавершитьВыборкуИзменений(ПараметрыВыборки) Экспорт
	
	Если ПараметрыВыборки.Объект <> Неопределено Тогда 
		ПараметрыВыборки.Объект = Неопределено;
	КонецЕсли;
	
	Если ПараметрыВыборки.Источник <> Неопределено Тогда 
		ПараметрыВыборки.Источник = Неопределено;
	КонецЕсли;
	
	ЗакрытьМенеджерВременныхТаблиц(ПараметрыВыборки);
	
КонецПроцедуры

// Конструктор параметра МенеджерВременныхТаблиц.
//
// Параметры:
//	ПараметрыВыборки - см. ПараметрыВыборкиИзменений.
//
Процедура МенеджерВременныхТаблиц(ПараметрыВыборки) Экспорт
	
	ПараметрыВыборки.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	&ПустойИдентификатор КАК ИдентификаторКлюча,
		|	НЕОПРЕДЕЛЕНО КАК ТипКлюча,
		|	НЕОПРЕДЕЛЕНО КАК Объект,
		|	НЕОПРЕДЕЛЕНО КАК Отметка
		|ПОМЕСТИТЬ РАНЕЕ_ВЫБРАННЫЕ_ИЗМЕНЕНИЯ
		|ГДЕ
		|	ЛОЖЬ");
	Запрос.УстановитьПараметр(
		"ПустойИдентификатор", ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
	Запрос.МенеджерВременныхТаблиц = ПараметрыВыборки.МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

// Закрывает менеджер временных таблиц, содержащийся в параметрах выборки изменений.
//
// Параметры:
//	ПараметрыВыборки - см. ПараметрыВыборкиИзменений.
//
Процедура ЗакрытьМенеджерВременныхТаблиц(ПараметрыВыборки) Экспорт

	Если ТипЗнч(ПараметрыВыборки.МенеджерВременныхТаблиц) = Тип("МенеджерВременныхТаблиц") Тогда
		ПараметрыВыборки.МенеджерВременныхТаблиц.Закрыть();
		ПараметрыВыборки.МенеджерВременныхТаблиц = Неопределено;
	КонецЕсли;

КонецПроцедуры

// Конструктор параметров выборки изменений.
//
// Возвращаемое значение:
//	Структура:
//		* РазмерПорции - Число - Количество выбираемых за один раз изменений.
//  	* Объект - Неопределено -
//  			 - СправочникСсылка.ИдентификаторыОбъектовРасширений -
//				 - СправочникСсылка.ИдентификаторыОбъектовМетаданных -
//				 - Массив Из СправочникСсылка.ИдентификаторыОбъектовРасширений -
//				 - Массив Из СправочникСсылка.ИдентификаторыОбъектовМетаданных - Идентификатор (тип) объекта, изменения
//				   																 которого необходимо получить. 
//		* Источник - Неопределено, СправочникСсылка.ИдентификаторыОбъектовМетаданных - Источник отметок времени.
//		* МенеджерВременныхТаблиц - МенеджерВременныхТаблиц -
//								  - Неопределено - Менеджер временных таблиц.
//		* ГраницаВыборкиИзменений - Число - Граница начала выборки изменений.
//
Функция ПараметрыВыборкиИзменений() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("РазмерПорции", 1000);
	Параметры.Вставить("Объект", Неопределено);
	Параметры.Вставить("Источник", Неопределено);
	Параметры.Вставить("МенеджерВременныхТаблиц", Неопределено);
	Параметры.Вставить("ГраницаВыборкиИзменений", 0);
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область ПроверкаИзменений

// Проверить изменения, по таблице пришедших данных, есть ли те же данные у нас в СУБД, и где новее.
//
// Параметры:
//	Изменения - ЛюбаяСсылка, ТаблицаЗначений - данные для проверки изменений. 
//	Объект - ОбъектМетаданных, СправочникСсылка.ИдентификаторыОбъектовМетаданных - проверяемый объект метаданных.
//	Источник - СправочникСсылка - узел источник изменений.
//	Отметка - Число - проверяемая отметка времени. Если не указана в таблице Изменения.
//	КлючевоеПоле - Строка - имя поля ключа для использования в вызывающем коде.
//
// Возвращаемое значение:
//	ТаблицаЗначений - ТаблицаЗначений
//
Функция ПроверитьИзменения(Изменения, Объект, Источник = Неопределено, Отметка = Неопределено, КлючевоеПоле = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Блокировка = Новый БлокировкаДанных;
	
	Если ТипЗнч(Объект) = Тип("ОбъектМетаданных") Тогда
		Метаданное = Объект; // ОбъектМетаданных
		ИОМ = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданное); // СправочникСсылка.ИдентификаторыОбъектовМетаданных
	Иначе
		Метаданное = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(Объект); // ОбъектМетаданных
		ИОМ = Объект; // СправочникСсылка.ИдентификаторыОбъектовМетаданных
	КонецЕсли;
	
	ПолноеИмяМетаданных = Метаданное.ПолноеИмя();
	
	ДобавленныеКолонки = Новый Массив;
	
	ВидКлюча = ОтметкиВремениПовтИсп.ВидКлючаОбъекта(ИОМ);
	КлючевоеПоле = ОтметкиВремениПовтИсп.ПолеКлючаОбъекта(ИОМ);
	
	Если ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючСсылочногоОбъекта Тогда
		Блок = Блокировка.Добавить(ПолноеИмяМетаданных);
	ИначеЕсли ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючНабораПодчинениеРегистратору Тогда
		// Регистратор.
		Блок = Блокировка.Добавить(ПолноеИмяМетаданных + ".НаборЗаписей");
	ИначеЕсли ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючНабораПервоеСсылочноеИзмерение Тогда
		// Ведущее измерение.
		Блок = Блокировка.Добавить(ПолноеИмяМетаданных);
	ИначеЕсли ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючНабораРегистрБезИзмерений
			Или ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючЗначенияКонстанты Тогда
		
		// Константа или регистр сведений без измерений.
		Если ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючЗначенияКонстанты Тогда
			ПолеЗначения = "Значение";
		Иначе
			//@skip-check property-return-type
			//@skip-check dynamic-access-method-not-found
			//@skip-check statement-type-change
			Если Метаданное.Ресурсы.Количество() Тогда
				ПолеЗначения = Метаданное.Ресурсы[0].Имя;
			ИначеЕсли Метаданное.Реквизиты.Количество() Тогда
				ПолеЗначения = Метаданное.Реквизиты[0].Имя;
			Иначе
				ПолеЗначения = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(
					"РегистрСведений.КурсыВалют").СоздатьНаборЗаписей().ВыгрузитьКолонки().Колонки[0].Имя;
			КонецЕсли;
		КонецЕсли;
		Блокировка.Добавить(ПолноеИмяМетаданных);
		
		Запрос.Текст = СтрШаблон(
			"ВЫБРАТЬ
			|	Т.Отметка КАК Отметка,
			|	Т.Источник КАК Источник,
			|	Т.ВидКлюча КАК ВидКлюча
			|ПОМЕСТИТЬ Очередь
			|ИЗ
			|	РегистрСведений.ОтметкиВремениРегистровКонстант КАК Т
			|ГДЕ
			|	Т.ИдентификаторКлюча = &ИдентификаторКлюча
			|		И Т.ТипКлюча = &ТипКлюча
			|		И Т.Объект = &Объект
			|	
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Т.Отметка,
			|	Т.Источник,
			|	Т.ВидКлюча
			|ИЗ
			|	РегистрСведений.ОтметкиВремениОчередь1 КАК Т
			|ГДЕ
			|	Т.ИдентификаторКлюча = &ИдентификаторКлюча
			|		И Т.ТипКлюча = &ТипКлюча
			|		И Т.Объект = &Объект
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Т.Отметка,
			|	Т.Источник,
			|	Т.ВидКлюча
			|ИЗ
			|	РегистрСведений.ОтметкиВремениОчередь2 КАК Т
			|ГДЕ
			|	Т.ИдентификаторКлюча = &ИдентификаторКлюча
			|		И Т.ТипКлюча = &ТипКлюча
			|		И Т.Объект = &Объект
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Т.Отметка,
			|	Т.Источник,
			|	Т.ВидКлюча
			|ИЗ
			|	РегистрСведений.ОтметкиВремениОчередь3 КАК Т
			|ГДЕ
			|	Т.ИдентификаторКлюча = &ИдентификаторКлюча
			|		И Т.ТипКлюча = &ТипКлюча
			|		И Т.Объект = &Объект
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	0,
			|	Null,
			|	Null
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	&Ключ КАК Ключ,
			|	&ИдентификаторКлюча КАК ИдентификаторКлюча,
			|	&ТипКлюча КАК ТипКлюча,
			|	&Объект КАК Объект,
			|	МАКСИМУМ(О.ВидКлюча) КАК ВидКлюча,
			|	МАКСИМУМ(О.Отметка) КАК Отметка,
			|	МАКСИМУМ(О.Источник) КАК Источник,
			|	МАКСИМУМ(ВЫБОР
			|		КОГДА _.%2 ЕСТЬ NULL
			|			ИЛИ О.Отметка = 0
			|			ИЛИ О.Источник = &Источник
			|				И О.Отметка <= &Отметка
			|			ИЛИ О.Отметка = &Отметка
			|			ИЛИ О.Источник <> &ИОММиграция
			|				И &Источник = &ИОММиграция
			|			ТОГДА 0
			|		КОГДА О.Источник = &Источник
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ) КАК Коллизия,
			|	МАКСИМУМ(_.%2 ЕСТЬ NULL) КАК ЭтоНовый,
			|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15,0)) КАК НоваяОтметка,
			|	ЛОЖЬ КАК Удаление
			|ИЗ
			|	Очередь КАК О
			|		ЛЕВОЕ СОЕДИНЕНИЕ %1 КАК _
			|		ПО ИСТИНА
			|ГДЕ 
			|	О.Отметка В
			|		(ВЫБРАТЬ
			|			МАКСИМУМ(Т.Отметка)
			|		ИЗ
			|			Очередь КАК Т)",
			ПолноеИмяМетаданных,
			ПолеЗначения);
			
		Запрос.УстановитьПараметр("Ключ", ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
		Запрос.УстановитьПараметр("ИдентификаторКлюча", ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
		Запрос.УстановитьПараметр("ТипКлюча", Неопределено);
		
		Если Отметка <> Неопределено Тогда
			Запрос.УстановитьПараметр("Отметка", Отметка);
		ИначеЕсли ТипЗнч(Изменения) = Тип("ТаблицаЗначений") Тогда
			Запрос.УстановитьПараметр("Отметка", Изменения[0]._Отметка); //@skip-check property-return-type
		Иначе
			Запрос.УстановитьПараметр("Отметка", Текущая());
		КонецЕсли;
		
	Иначе
		
		Если Не ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючНабораИдентификаторНабораЗаписей Тогда
			КлючевоеПоле = "НомерСтроки";
		КонецЕсли;
		
		ИменаИзмерений = Новый Массив; // Массив Из Строка
		Условия = Новый Массив; // Массив Из Строка
		Набор = РегистрыСведений[Метаданное.Имя].СоздатьНаборЗаписей();
		
		Для Каждого Поле Из Набор.Отбор Цикл
			ИменаИзмерений.Добавить(Поле.Имя);
			Условия.Добавить(СтрШаблон("Т.%1 = _.%1", Поле.Имя));
		КонецЦикла;
		
		Измерения = СтрСоединить(ИменаИзмерений, ",");
		
		МассивТипов = Новый Массив; // Массив Из Тип
		МассивТипов.Добавить(Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
		МассивТипов.Добавить(Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений"));
		МассивТипов.Добавить(Тип("Неопределено"));
		
		Ключи = Набор.Выгрузить(, Измерения);
		Ключи.Колонки.Добавить("ИдентификаторКлюча", Метаданные.ОбщиеРеквизиты.ИдентификаторОтметкиВремени.Тип);
		Ключи.Колонки.Добавить("ТипКлюча", Новый ОписаниеТипов(МассивТипов));
		Ключи.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(9,0)));
		Ключи.Колонки.Добавить("_Отметка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,0)));
		Ключи.Колонки.Добавить("_Удаление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,0)));
		
		ЕстьУдаление = Ложь;
		Если ТипЗнч(Изменения) = Тип("ТаблицаЗначений") Тогда
			Для Каждого Поле Из Набор.Отбор Цикл
				Если Изменения.Колонки.Найти(Поле.Имя) = Неопределено Тогда
					//Добавляем измерение со значением по умолчанию.
					Изменения.Колонки.Добавить(Поле.Имя, Поле.ТипЗначения);
					ДобавленныеКолонки.Добавить(Поле.Имя);
				КонецЕсли;
			КонецЦикла;
			
			Если Изменения.Колонки.Найти("_Удаление") <> Неопределено Тогда
				ЕстьУдаление = Истина;
				УдаленныеНаборы = Новый Соответствие;
			КонецЕсли;
			
			Коллекция = Изменения;
		Иначе
			Коллекция = Новый Массив;
			Коллекция.Добавить(Изменения);
		КонецЕсли;
		
		Для Каждого Строка Из Коллекция Цикл
			
			ПолныйОтбор = Истина;
			Для Каждого Поле Из Набор.Отбор Цикл
				Если Строка[Поле.Имя] = Null Тогда
					Поле.Использование = Ложь;
					Поле.Значение = Поле.ТипЗначения.ПривестиЗначение();
					ПолныйОтбор = Ложь;
				Иначе
					Поле.Использование = Истина;
					Попытка
						Поле.Значение = Строка[Поле.Имя]; //@skip-check statement-type-change
					Исключение
						Если Строка[Поле.Имя] = Неопределено Тогда
							Поле.Значение = Поле.ТипЗначения.ПривестиЗначение();
						Иначе
							ОшибкаТипизации(Поле.Имя, Строка[Поле.Имя], Метаданное);
						КонецЕсли;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
			
			ОписаниеКлюча = ОписаниеКлючаОтметкиВремени(Набор);
			
			Запись = Ключи.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Строка);
			Запись.ИдентификаторКлюча = ОписаниеКлюча.ИдентификаторКлюча; //@skip-check property-return-type
			Запись.ТипКлюча = ОписаниеКлюча.ТипКлюча; //@skip-check property-return-type
			Запись.НомерСтроки = Изменения.Индекс(Строка);
			Если Отметка <> Неопределено Тогда
				Запись._Отметка = Отметка;
			КонецЕсли;
			
			Если ЕстьУдаление И Не ПолныйОтбор И Строка._Удаление = Истина Тогда
				Поля = Новый Массив; // Массив Из Строка 
				Для Каждого Поле Из Набор.Отбор Цикл
					Если Строка[Поле.Имя] <> Null Тогда
						Поля.Добавить(СтрШаблон("Т.%1 = _.%1", Поле.Имя));
					КонецЕсли;
				КонецЦикла;
				
				Поля = СтрСоединить(Поля, " И "); //@skip-check statement-type-change
				Комбинация = УдаленныеНаборы.Получить(Поля);
				Если Комбинация = Неопределено Тогда
					Комбинация = УдаленныеНаборы.Количество() + 1;
					УдаленныеНаборы.Вставить(Поля, Комбинация);
				КонецЕсли;
				Запись._Удаление = Комбинация;
			КонецЕсли;
			
		КонецЦикла;
		
		Блок = Блокировка.Добавить(ПолноеИмяМетаданных);
		Блок.ИсточникДанных = Ключи;
		Для Каждого Поле Из Набор.Отбор Цикл
			Блок.ИспользоватьИзИсточникаДанных(Поле.Имя, Поле.Имя);
		КонецЦикла;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	%2,
			|	Т.ИдентификаторКлюча КАК ИдентификаторКлюча,
			|	Т.ТипКлюча КАК ТипКлюча,
			|	Т._Отметка КАК _Отметка,
			|	Т._Удаление КАК _Удаление,
			|	Т.НомерСтроки КАК НомерСтроки
			|ПОМЕСТИТЬ Ключи
			|ИЗ
			|	&Ключи КАК Т
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(%4.ИдентификаторОтметкиВремени, Т.ИдентификаторКлюча) КАК ИдентификаторКлюча,
			|	Т.ТипКлюча КАК ТипКлюча,
			|	_.%5 ЕСТЬ NULL КАК ЭтоНовый,
			|	Т._Отметка КАК Отметка,
			|	Т.НомерСтроки
			|ПОМЕСТИТЬ КлючиТекущие
			|ИЗ
			|	Ключи КАК Т
			|		ЛЕВОЕ СОЕДИНЕНИЕ %1 КАК _
			|		ПО %3
			|%6
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Т.ИдентификаторКлюча КАК ИдентификаторКлюча, 
			|	Т.ТипКлюча КАК ТипКлюча,
			|	Т.Отметка КАК Отметка,
			|	Т.Источник КАК Источник
			|ПОМЕСТИТЬ Очередь
			|ИЗ
			|	КлючиТекущие КАК _
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениРегистровКонстант КАК Т
			|		ПО _.ИдентификаторКлюча = Т.ИдентификаторКлюча
			|			И _.ТипКлюча = Т.ТипКлюча
			|			И (Т.Объект = &Объект)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Т.ИдентификаторКлюча,
			|	Т.ТипКлюча,
			|	Т.Отметка,
			|	Т.Источник
			|ИЗ
			|	КлючиТекущие КАК _
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениОчередь1 КАК Т
			|		ПО _.ИдентификаторКлюча = Т.ИдентификаторКлюча
			|			И _.ТипКлюча = Т.ТипКлюча
			|			И (Т.Объект = &Объект)
			|	
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Т.ИдентификаторКлюча,
			|	Т.ТипКлюча,
			|	Т.Отметка,
			|	Т.Источник
			|ИЗ
			|	КлючиТекущие КАК _
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениОчередь2 КАК Т
			|		ПО _.ИдентификаторКлюча = Т.ИдентификаторКлюча
			|			И _.ТипКлюча = Т.ТипКлюча
			|			И (Т.Объект = &Объект)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Т.ИдентификаторКлюча,
			|	Т.ТипКлюча,
			|	Т.Отметка,
			|	Т.Источник
			|ИЗ
			|	КлючиТекущие КАК _
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениОчередь3 КАК Т
			|		ПО _.ИдентификаторКлюча = Т.ИдентификаторКлюча
			|			И _.ТипКлюча = Т.ТипКлюча
			|			И (Т.Объект = &Объект)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Т.ИдентификаторКлюча КАК ИдентификаторКлюча,
			|	Т.ТипКлюча КАК ТипКлюча,
			|	Т.Отметка КАК Отметка,
			|	Т.Источник КАК Источник
			|ПОМЕСТИТЬ ОчередьСрез
			|ИЗ
			|	Очередь КАК Т
			|ГДЕ
			|	(Т.ИдентификаторКлюча, Т.ТипКлюча, Т.Отметка) В 
			|			(ВЫБРАТЬ
			|				Т.ИдентификаторКлюча,
			|				Т.ТипКлюча,
			|				МАКСИМУМ(Т.Отметка) КАК Отметка
			|			ИЗ
			|				Очередь КАК Т
			|			
			|			СГРУППИРОВАТЬ ПО
			|				Т.ИдентификаторКлюча,
			|				Т.ТипКлюча)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(Т.НомерСтроки) КАК НомерСтроки,
			|	Т.ИдентификаторКлюча КАК Ключ,
			|	Т.ТипКлюча КАК ТипКлюча,
			|	&Объект КАК Объект,
			|	&ВидКлюча КАК ВидКлюча,
			|	МАКСИМУМ(О.Отметка) КАК Отметка,
			|	МАКСИМУМ(О.Источник) КАК Источник,
			|	МАКСИМУМ(ВЫБОР
			|		КОГДА Т.ЭтоНовый
			|			ИЛИ О.Отметка ЕСТЬ NULL
			|			ИЛИ О.Источник = &Источник
			|				И О.Отметка <= Т.Отметка
			|			ИЛИ О.Отметка = Т.Отметка
			|			ИЛИ О.Источник <> &ИОММиграция
			|				И &Источник = &ИОММиграция
			|			ТОГДА 0
			|		КОГДА О.Источник = &Источник
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ) КАК Коллизия,
			|	МАКСИМУМ(Т.ЭтоНовый) КАК ЭтоНовый,
			|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15,0)) КАК НоваяОтметка,
			|	ЛОЖЬ КАК Удаление
			|ИЗ
			|	КлючиТекущие КАК Т
			|		ЛЕВОЕ СОЕДИНЕНИЕ ОчередьСрез КАК О
			|		ПО Т.ИдентификаторКлюча = О.ИдентификаторКлюча
			|			И Т.ТипКлюча = О.ТипКлюча
			|
			|СГРУППИРОВАТЬ ПО
			|	Т.ИдентификаторКлюча,
			|	Т.ТипКлюча";
		Запрос.Текст = СтрШаблон(Запрос.Текст,
			ПолноеИмяМетаданных, // 1
			Измерения, // 2
			СтрСоединить(Условия, " И "), // 3
			?(ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючНабораИдентификаторНабораЗаписей, "_", "Т"), // 4
			Набор.Отбор[0].Имя, // 5
			?(ЗначениеЗаполнено(УдаленныеНаборы), "ГДЕ Т._Удаление = 0", "")); // 5
		
		Если ЗначениеЗаполнено(УдаленныеНаборы) Тогда
			Объединения = Новый Массив; // Массив Из Строка
			Объединения.Добавить(Запрос.Текст);
			
			Для Каждого Комбинация Из УдаленныеНаборы Цикл
				Если Комбинация.Ключ = "" Тогда
					//Полное удаление
					Блокировка.Добавить(ПолноеИмяМетаданных);
					
					Объединения.Добавить(СтрШаблон(
						"ВЫБРАТЬ
						|	МАКСИМУМ(Т.НомерСтроки) КАК НомерСтроки,
						|	МАКСИМУМ(Т.ИдентификаторКлюча) КАК ИдентификаторКлюча,
						|	МАКСИМУМ(Т.ТипКлюча) КАК ТипКлюча,
						|	&Объект КАК Объект,
						|	&ВидКлюча КАК ВидКлюча,
						|	МАКСИМУМ(О.Отметка) КАК Отметка,
						|	МАКСИМУМ(О.Источник) КАК Источник,
						|	МАКСИМУМ(ВЫБОР
						|		КОГДА О.Отметка ЕСТЬ NULL
						|			ИЛИ О.Источник = &Источник
						|				И О.Отметка <= Т._Отметка
						|			ИЛИ О.Отметка = Т._Отметка
						|			ИЛИ О.Источник <> &ИОММиграция
						|				И &Источник = &ИОММиграция
						|			ТОГДА 0
						|		КОГДА О.Источник = &Источник
						|			ТОГДА 1
						|		ИНАЧЕ 2
						|	КОНЕЦ) КАК Коллизия,
						|	ЛОЖЬ КАК ЭтоНовый,
						|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15,0)) КАК НоваяОтметка,
						|	ИСТИНА КАК Удаление
						|ИЗ
						|	Ключи КАК Т
						|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениРегистровКонстант КАК О
						|		ПО Т.ИдентификаторКлюча = О.ИдентификаторКлюча
						|			И Т.ТипКлюча = О.ТипКлюча
						|			И (О.Объект = &Объект)
						|ГДЕ
						|	Т._Удаление = %1
						|
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|ВЫБРАТЬ
						|	МАКСИМУМ(Т.НомерСтроки) КАК НомерСтроки,
						|	МАКСИМУМ(Т.ИдентификаторКлюча) КАК ИдентификаторКлюча,
						|	МАКСИМУМ(Т.ТипКлюча) КАК ТипКлюча,
						|	&Объект КАК Объект,
						|	&ВидКлюча КАК ВидКлюча,
						|	МАКСИМУМ(О.Отметка) КАК Отметка,
						|	МАКСИМУМ(О.Источник) КАК Источник,
						|	МАКСИМУМ(ВЫБОР
						|		КОГДА О.Отметка ЕСТЬ NULL
						|			ИЛИ О.Источник = &Источник
						|				И О.Отметка <= Т._Отметка
						|			ИЛИ О.Отметка = Т._Отметка
						|			ИЛИ О.Источник <> &ИОММиграция
						|				И &Источник = &ИОММиграция
						|			ТОГДА 0
						|		КОГДА О.Источник = &Источник
						|			ТОГДА 1
						|		ИНАЧЕ 2
						|	КОНЕЦ) КАК Коллизия,
						|	ЛОЖЬ КАК ЭтоНовый,
						|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15,0)) КАК НоваяОтметка,
						|	ЛОЖЬ КАК Удаление
						|ИЗ
						|	Ключи КАК Т
						|		ЛЕВОЕ СОЕДИНЕНИЕ ОчередьСрез КАК О
						|		ПО (ИСТИНА)
						|ГДЕ
						|	Т._Удаление = %1",
						Формат(Комбинация.Значение, "ЧГ=0")));
					
				ИначеЕсли ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючНабораИдентификаторНабораЗаписей Тогда
					
					Блок = Блокировка.Добавить(ПолноеИмяМетаданных);
					Блок.ИсточникДанных = Ключи.Скопировать(Ключи.НайтиСтроки(Новый Структура("_Удаление", Комбинация.Значение)));
					Для Каждого Поле Из Набор.Отбор Цикл
						Если Найти(Комбинация.Ключ, "." + Поле.Имя + " ") Тогда
							Блок.ИспользоватьИзИсточникаДанных(Поле.Имя, Поле.Имя);
						КонецЕсли;
					КонецЦикла;
					
					Объединения.Добавить(СтрШаблон(
						"ВЫБРАТЬ
						|	МАКСИМУМ(Т.НомерСтроки) КАК НомерСтроки,
						|	Т.ИдентификаторКлюча КАК ИдентификаторКлюча,
						|	Т.ТипКлюча КАК ТипКлюча,
						|	&ВидКлюча КАК ВидКлюча,
						|	&Объект КАК Объект,
						|	МАКСИМУМ(ЕСТЬNULL(О2.Отметка, О1.Отметка)) КАК Отметка,
						|	МАКСИМУМ(ЕСТЬNULL(О2.Источник, О1.Источник)) КАК Источник,
						|	МАКСИМУМ(ВЫБОР
						|		КОГДА О2.Отметка ЕСТЬ NULL И О1.Отметка ЕСТЬ NULL
						|			ИЛИ ЕСТЬNULL(О2.Источник, О1.Источник) = &Источник
						|				И ЕСТЬNULL(О2.Отметка, О1.Отметка) <= Т._Отметка
						|			ИЛИ ЕСТЬNULL(О2.Отметка, О1.Отметка) = Т._Отметка
						|			ИЛИ ЕСТЬNULL(О2.Источник, О1.Источник) = ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСcылка)
						|				И &Источник <> ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСcылка)
						|			ТОГДА 0
						|		КОГДА ЕСТЬNULL(О2.Источник, О1.Источник) = &Источник
						|			ТОГДА 1
						|		ИНАЧЕ 2
						|	КОНЕЦ) КАК Коллизия,
						|	МИНИМУМ(_.ИдентификаторОтметкиВремени ЕСТЬ NULL) КАК ЭтоНовый,
						|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15,0)) КАК НоваяОтметка,
						|	ЛОЖЬ КАК Удаление
						|ИЗ
						|	Ключи КАК Т
						|		ЛЕВОЕ СОЕДИНЕНИЕ %1 КАК _
						|		ПО %2
						|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениРегистровКонстант КАК О1
						|		ПО _.ИдентификаторОтметкиВремени = О1.ИдентификаторКлюча
						|			И О1.ТипКлюча = НЕОПРЕДЕЛЕНО
						|			И (О1.Объект = &Объект)
						|		ЛЕВОЕ СОЕДИНЕНИЕ ОчередьСрез КАК О2
						|		ПО _.ИдентификаторОтметкиВремени = О2.ИдентификаторКлюча
						|ГДЕ
						|	Т._Удаление = %3
						|
						|СГРУППИРОВАТЬ ПО
						|	Т.ИдентификаторКлюча,
						|	Т.ТипКлюча",
						ПолноеИмяМетаданных,
						Комбинация.Ключ,
						Формат(Комбинация.Значение, "ЧГ=0")));
				КонецЕсли;
			КонецЦикла;
			
			Запрос.Текст = СтрСоединить(Объединения, "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Ключи", Ключи);
		
	КонецЕсли;
	
	Если Запрос.Текст = "" Тогда
		
		Если ТипЗнч(Изменения) = Тип("ТаблицаЗначений") И Изменения.Количество() > 1 Тогда
			
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Т.Ключ КАК Ключ,
				|	Т.ИдентификаторКлюча КАК ИдентификаторКлюча,
				|	Т.ТипКлюча КАК ТипКлюча,
				|	Т.Отметка КАК Отметка
				|ПОМЕСТИТЬ Ключи
				|ИЗ
				|	&Ключи КАК Т
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	_.Ключ КАК Ключ,
				|	Т.ТипКлюча КАК ТипКлюча,
				|	Т.Отметка КАК Отметка,
				|	Т.Источник КАК Источник
				|ПОМЕСТИТЬ Очередь
				|ИЗ
				|	Ключи КАК _
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.%3 КАК Т
				|		ПО _.ИдентификаторКлюча = Т.ИдентификаторКлюча
				|			И _.ТипКлюча = Т.ТипКлюча
				|			И %4
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	_.Ключ КАК Ключ,
				|	Т.ТипКлюча КАК ТипКлюча,
				|	Т.Отметка,
				|	Т.Источник
				|ИЗ
				|	Ключи КАК _
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениОчередь1 КАК Т
				|		ПО _.ИдентификаторКлюча = Т.ИдентификаторКлюча
				|			И _.ТипКлюча = Т.ТипКлюча
				|			И (Т.Объект = &Объект)
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	_.Ключ КАК Ключ,
				|	Т.ТипКлюча КАК ТипКлюча,
				|	Т.Отметка,
				|	Т.Источник
				|ИЗ
				|	Ключи КАК _
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениОчередь2 КАК Т
				|		ПО _.ИдентификаторКлюча = Т.ИдентификаторКлюча
				|			И _.ТипКлюча = Т.ТипКлюча
				|			И (Т.Объект = &Объект)
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	_.Ключ КАК Ключ,
				|	Т.ТипКлюча КАК ТипКлюча,
				|	Т.Отметка,
				|	Т.Источник
				|ИЗ
				|	Ключи КАК _
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениОчередь3 КАК Т
				|		ПО _.ИдентификаторКлюча = Т.ИдентификаторКлюча
				|			И _.ТипКлюча = Т.ТипКлюча
				|			И (Т.Объект = &Объект)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Т.Ключ КАК Ключ,
				|	&Объект КАК Объект,
				|	&ВидКлюча КАК ВидКлюча,
				|	МАКСИМУМ(О.Отметка) КАК Отметка,
				|	МАКСИМУМ(О.Источник) КАК Источник,
				|	МАКСИМУМ(ВЫБОР
				|		КОГДА _.%2 ЕСТЬ NULL
				|			ИЛИ О.Отметка ЕСТЬ NULL
				|			ИЛИ О.Источник = &Источник
				|				И О.Отметка <= Т.Отметка
				|			ИЛИ О.Отметка = Т.Отметка
				|			ИЛИ О.Источник <> &ИОММиграция
				|				И &Источник = &ИОММиграция
				|			ТОГДА 0
				|		КОГДА О.Источник = &Источник
				|			ТОГДА 1
				|		ИНАЧЕ 2
				|	КОНЕЦ) КАК Коллизия,
				|	МАКСИМУМ(_.%2 ЕСТЬ NULL) КАК ЭтоНовый,
				|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15,0)) КАК НоваяОтметка,
				|	ЛОЖЬ КАК Удаление
				|ИЗ
				|	Ключи КАК Т
				|		ЛЕВОЕ СОЕДИНЕНИЕ %1 КАК _
				|		ПО Т.Ключ = _.%2
				|		ЛЕВОЕ СОЕДИНЕНИЕ Очередь КАК О
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|				Т.Ключ КАК Ключ,
				|				МАКСИМУМ(Т.Отметка) КАК Отметка
				|			ИЗ
				|				Очередь КАК Т
				|			
				|			СГРУППИРОВАТЬ ПО
				|				Т.Ключ) КАК ОчередьСрез
				|			ПО О.Ключ = ОчередьСрез.Ключ
				|				И О.Отметка = ОчередьСрез.Отметка
				|		ПО Т.Ключ = О.Ключ
				|
				|СГРУППИРОВАТЬ ПО
				|	Т.Ключ";
			
			МассивТиповКлючей = Новый Массив; // Массив Из Тип
			МассивТиповКлючей.Добавить(Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
			МассивТиповКлючей.Добавить(Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений"));
			МассивТиповКлючей.Добавить(Тип("Неопределено"));
			
			Ключи = Новый ТаблицаЗначений();
			Ключи.Колонки.Добавить("Ключ", ОтметкиВремениПовтИсп.ТипКлючаОбъекта(ИОМ));
			Ключи.Колонки.Добавить("ИдентификаторКлюча", Новый ОписаниеТипов("УникальныйИдентификатор"));
			Ключи.Колонки.Добавить("ТипКлюча", Новый ОписаниеТипов(МассивТиповКлючей));
			Ключи.Колонки.Добавить("Отметка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,0)));
			
			Для Каждого Строка Из Изменения Цикл
				Запись = Ключи.Добавить();
				Запись.Ключ = Строка[КлючевоеПоле];
				
				Если ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючЗначенияКонстанты
						Или ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючНабораРегистрБезИзмерений Тогда
					
					Запись.ИдентификаторКлюча = Неопределено;
					Запись.ТипКлюча = Неопределено;
				ИначеЕсли ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючНабораИдентификаторНабораЗаписей Тогда
					Запись.ИдентификаторКлюча = Строка[КлючевоеПоле];
					Запись.ТипКлюча = Неопределено;
				Иначе
					Запись.ИдентификаторКлюча = Строка[КлючевоеПоле].УникальныйИдентификатор();
					Запись.ТипКлюча = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Строка[КлючевоеПоле]));
				КонецЕсли;
				
				Если Запись.Ключ <> Строка[КлючевоеПоле] Тогда
					Если МиграцияДанныхИзВнешнихСистемДО21.ЭтоУдалениеОбъекта(Строка) 
							И ТипЗнч(Строка[КлючевоеПоле]) = ТипЗнч(Null) Тогда
						
						Ключи.Удалить(Запись);
						Продолжить;
					Иначе
						ОшибкаТипизации(КлючевоеПоле, Строка[КлючевоеПоле], Метаданное);
					КонецЕсли;
				КонецЕсли;
				
				Запись.Отметка = ?(Отметка = Неопределено, Строка._Отметка, Отметка);
			КонецЦикла;
			
			Запрос.УстановитьПараметр("Ключи", Ключи);
			
			Блок.ИсточникДанных = Ключи;
			Блок.ИспользоватьИзИсточникаДанных(КлючевоеПоле, "Ключ");
			
		Иначе
			
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Т.Отметка КАК Отметка,
				|	Т.Источник КАК Источник
				|ПОМЕСТИТЬ Очередь
				|ИЗ
				|	РегистрСведений.%3 КАК Т
				|ГДЕ
				|	Т.ИдентификаторКлюча = &ИдентификаторКлюча
				|		И Т.ТипКлюча = &ТипКлюча
				|		И %4
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	Т.Отметка,
				|	Т.Источник
				|ИЗ
				|	РегистрСведений.ОтметкиВремениОчередь1 КАК Т
				|ГДЕ
				|	Т.ИдентификаторКлюча = &ИдентификаторКлюча
				|		И Т.ТипКлюча = &ТипКлюча
				|		И Т.Объект = &Объект
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	Т.Отметка,
				|	Т.Источник
				|ИЗ
				|	РегистрСведений.ОтметкиВремениОчередь2 КАК Т
				|ГДЕ
				|	Т.ИдентификаторКлюча = &ИдентификаторКлюча
				|		И Т.ТипКлюча = &ТипКлюча
				|		И Т.Объект = &Объект
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	Т.Отметка,
				|	Т.Источник
				|ИЗ
				|	РегистрСведений.ОтметкиВремениОчередь3 КАК Т
				|ГДЕ
				|	Т.ИдентификаторКлюча = &ИдентификаторКлюча
				|		И Т.ТипКлюча = &ТипКлюча
				|		И Т.Объект = &Объект
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	0,
				|	Null
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	&Ключ КАК Ключ,
				|	&Объект КАК Объект,
				|	&ВидКлюча КАК ВидКлюча,
				|	МАКСИМУМ(О.Отметка) КАК Отметка,
				|	МАКСИМУМ(О.Источник) КАК Источник,
				|	МАКСИМУМ(ВЫБОР
				|		КОГДА _.%2 ЕСТЬ NULL
				|			ИЛИ О.Отметка = 0
				|			ИЛИ О.Источник = &Источник
				|				И О.Отметка <= &Отметка
				|			ИЛИ О.Отметка = &Отметка
				|			ИЛИ О.Источник <> &ИОММиграция
				|				И &Источник = &ИОММиграция
				|
				|			ТОГДА 0
				|		КОГДА О.Источник = &Источник
				|			ТОГДА 1
				|		ИНАЧЕ 2
				|	КОНЕЦ) КАК Коллизия,
				|	МАКСИМУМ(_.%2 ЕСТЬ NULL) КАК ЭтоНовый,
				|	ВЫРАЗИТЬ(0 КАК ЧИСЛО(15,0)) КАК НоваяОтметка,
				|	ЛОЖЬ КАК Удаление
				|ИЗ
				|	Очередь КАК О
				|		ЛЕВОЕ СОЕДИНЕНИЕ %1 КАК _
				|		ПО (&Ключ = _.%2)
				|ГДЕ 
				|	О.Отметка В
				|		(ВЫБРАТЬ
				|			МАКСИМУМ(Т.Отметка)
				|		ИЗ
				|			Очередь КАК Т)";
			
			Если ТипЗнч(Изменения) = Тип("ТаблицаЗначений") Тогда
				
				Если ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючЗначенияКонстанты
						Или ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючНабораРегистрБезИзмерений Тогда
					
					Запрос.УстановитьПараметр("ИдентификаторКлюча", Неопределено);
					Запрос.УстановитьПараметр("ТипКлюча", Неопределено);
				ИначеЕсли ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючНабораИдентификаторНабораЗаписей Тогда
					Запрос.УстановитьПараметр("ИдентификаторКлюча", Изменения[0][КлючевоеПоле]);
					Запрос.УстановитьПараметр("ТипКлюча", Неопределено);
				Иначе
					Запрос.УстановитьПараметр("ИдентификаторКлюча", Изменения[0][КлючевоеПоле].УникальныйИдентификатор());
					Запрос.УстановитьПараметр(
						"ТипКлюча", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Изменения[0][КлючевоеПоле])));
				КонецЕсли;
				
				Запрос.УстановитьПараметр("Ключ", Изменения[0][КлючевоеПоле]);
				Запрос.УстановитьПараметр("Отметка", ?(Отметка = Неопределено, Изменения[0]._Отметка, Отметка));
				
				Если ТипЗнч(Изменения[0][КлючевоеПоле]) <> ТипЗнч(Null) Тогда
					Блок.УстановитьЗначение(КлючевоеПоле, Изменения[0][КлючевоеПоле]);
				КонецЕсли;
				
			Иначе
				
				Если ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючЗначенияКонстанты
						Или ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючНабораРегистрБезИзмерений Тогда
					
					Запрос.УстановитьПараметр("ИдентификаторКлюча", Неопределено);
					Запрос.УстановитьПараметр("ТипКлюча", Неопределено);
				ИначеЕсли ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючНабораИдентификаторНабораЗаписей Тогда
					Запрос.УстановитьПараметр("ИдентификаторКлюча", Изменения);
					Запрос.УстановитьПараметр("ТипКлюча", Неопределено);
				Иначе
					Запрос.УстановитьПараметр("ИдентификаторКлюча", Изменения.УникальныйИдентификатор());
					Запрос.УстановитьПараметр("ТипКлюча", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Изменения)));
				КонецЕсли;
				
				Запрос.УстановитьПараметр("Ключ", Изменения);
				Запрос.УстановитьПараметр("Отметка", ?(Отметка = Неопределено, Текущая(), Отметка));
				Блок.УстановитьЗначение(КлючевоеПоле, Изменения);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Запрос.Текст = СтрШаблон(Запрос.Текст,
			ПолноеИмяМетаданных, // 1
			КлючевоеПоле, // 2
			?(ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючСсылочногоОбъекта, // 3
				"ОтметкиВремениСсылочныхОбъектов",
				"ОтметкиВремениРегистровКонстант"),
			?(ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючСсылочногоОбъекта, // 4
				"ИСТИНА",
				"Т.Объект = &Объект"));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Источник", Источник);
	Запрос.УстановитьПараметр("Объект", ИОМ);
	Запрос.УстановитьПараметр("ВидКлюча", ВидКлюча);
	
	ИОММиграция = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
		Метаданные.Подсистемы.НастройкаИАдминистрирование.Подсистемы.МиграцияДанныхИзВнешнихСистем);
	Запрос.УстановитьПараметр("ИОММиграция", ИОММиграция); 
	
	Блокировка.Заблокировать();
	
	РезультатТабл = Запрос.Выполнить().Выгрузить();
	
	Если ТипЗнч(Изменения) = Тип("ТаблицаЗначений") Тогда
		Для Каждого ИмяКолонки Из ДобавленныеКолонки Цикл
			Изменения.Колонки.Удалить(ИмяКолонки);
		КонецЦикла;
	КонецЕсли;
	
	Возврат РезультатТабл;
	
КонецФункции

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать ПолеКлючаОбъекта.
// Возвращает ключевое поле источника.
//
// Параметры:
//	Объект - ОбъектМетаданных -
//		   - СправочникСсылка.ИдентификаторыОбъектовМетаданных -
//		   - СправочникСсылка.ИдентификаторыОбъектовРасширений - Объект-источник отметок времени, ключевое
//																 поле которого необходимо определить.
//	ТипКлюча - Число - Тип ключа объекта-источника отметок времени.
//
// Возвращаемое значение:
//	Строка - Ключевое поле источника.
//
Функция КлючевоеПолеИсточника(Объект, ТипКлюча) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ОбъектМетаданных") Тогда
		Возврат ПолеКлючаОбъекта(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Объект));
	КонецЕсли;
	
	Возврат ПолеКлючаОбъекта(Объект);
	
КонецФункции

// Устарела (использование в новых механизмах недопустимо).
// Возвращает ключ для набора записей регистра сведений.
// 
// Параметры:
//	Источник - ОпределяемыйТип.ОтметкиВремениРегистры - Объект, для которого необходимо определить ключ.
//
// Возвращаемое значение:
//	ЛюбаяСсылка - Ключ набора записей.
//
Функция Ключ(Источник) Экспорт
	
	Ключ = Неопределено;
	
	ОписаниеКлюча = ОписаниеКлючаОтметкиВремени(Источник);
	Если ОтметкиВремениПовтИсп.ЭтоВидКлючаСсылочногоТипа(ОписаниеКлюча.ВидКлюча) Тогда
		Ключ = ЗначениеСсылкиПоКлючуОтметкиВремени(ОписаниеКлюча.ИдентификаторКлюча, ОписаниеКлюча.ТипКлюча);
	ИначеЕсли ОписаниеКлюча.ВидКлюча = Перечисления.ВидыКлючейОтметокВремени.КлючНабораИдентификаторНабораЗаписей Тогда
		Ключ = Справочники.ИдентификаторыОбъектовМетаданных.ПолучитьСсылку(ОписаниеКлюча.ИдентификаторКлюча);
	КонецЕсли;
	
	Возврат Ключ;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет является ли ссылочный тип значения.
// 
// Параметры:
//  ОписаниеТипа - ОписаниеТипов - Описание типа.
// 
// Возвращаемое значение:
//  Булево - Это ссылочный тип значения
//
Функция ЭтоСсылочныйТипЗначения(ОписаниеТипа)
	
	Для Каждого Тип Из ОписаниеТипа.Типы() Цикл
		Если Найти(XMLТип(Тип).ИмяТипа, ".") = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#Область ОбработкаОчереди

// Возвращает порцию данных очереди для последующей обработки.
//
// Возвращаемое значение:
//	ТаблицаЗначений:
//		* Окно - Число - Номер очереди.
//		* Отметка - Число - Отметка времени.
//		* Граница - Число - Текущая граница отметок времени.
//		* ИдентификаторКлюча - УникальныйИдентификатор - Ключ отметки времени.
//		* ТипКлюча - СправочникСсылка.ИдентификаторыОбъектовМетаданных -
//				   - СправочникСсылка.ИдентификаторыОбъектовРасширений - Тип ключа отметки времени.
//		* Объект - СправочникСсылка.ИдентификаторыОбъектовМетаданных -
//				 - СправочникСсылка.ИдентификаторыОбъектовРасширений - Тип объекта, для которого зарегистрирована отметка.
//		* Удаление - Булево - Признак удаления данных.
//		* Источник - ОпределяемыйТип.ИсточникиДляОтметокВремени - Источник отметки времени.
//		* ВидКлюча - ПеречислениеСсылка.ВидыКлючейОтметокВремени - Вид ключа отметки времени.
//		* ЗначенияКлюча - ХранилищеЗначения - Значения ключа.
//		* ОбновитьГраницу - Булево - Признак необходимости обновления границы.
//
Функция ДанныеОчереди()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(Т.Граница), -1) КАК Граница
		|ПОМЕСТИТЬ Границы
		|ИЗ
		|	(ВЫБРАТЬ
		|		Т.Граница КАК Граница
		|	ИЗ
		|		(ВЫБРАТЬ ПЕРВЫЕ 1
		|			Т.Граница КАК Граница
		|		ИЗ
		|			РегистрСведений.ОтметкиВремениСсылочныхОбъектов КАК Т
		|
		|		УПОРЯДОЧИТЬ ПО
		|			Граница УБЫВ) КАК Т
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		Т.Граница
		|	ИЗ
		|		(ВЫБРАТЬ ПЕРВЫЕ 1
		|			Т.Граница КАК Граница
		|		ИЗ
		|			РегистрСведений.ОтметкиВремениРегистровКонстант КАК Т
		|
		|		УПОРЯДОЧИТЬ ПО
		|			Т.Граница УБЫВ) КАК Т) КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 100
		|	1 КАК Окно,
		|	Т.Отметка КАК Отметка,
		|	Т.ИдентификаторКлюча КАК ИдентификаторКлюча,
		|	Т.ТипКлюча КАК ТипКлюча,
		|	Т.Объект КАК Объект,
		|	Т.Удаление КАК Удаление,
		|	Т.Источник КАК Источник,
		|	Т.ВидКлюча КАК ВидКлюча,
		|	Т.ЗначенияКлюча КАК ЗначенияКлюча
		|ПОМЕСТИТЬ Очередь
		|ИЗ
		|	РегистрСведений.ОтметкиВремениОчередь1 КАК Т
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 100
		|	2,
		|	Т.Отметка,
		|	Т.ИдентификаторКлюча,
		|	Т.ТипКлюча,
		|	Т.Объект,
		|	Т.Удаление,
		|	Т.Источник,
		|	Т.ВидКлюча,
		|	Т.ЗначенияКлюча
		|ИЗ
		|	РегистрСведений.ОтметкиВремениОчередь2 КАК Т
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 100
		|	3,
		|	Т.Отметка,
		|	Т.ИдентификаторКлюча,
		|	Т.ТипКлюча,
		|	Т.Объект,
		|	Т.Удаление,
		|	Т.Источник,
		|	Т.ВидКлюча,
		|	Т.ЗначенияКлюча
		|ИЗ
		|	РегистрСведений.ОтметкиВремениОчередь3 КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Очередь.Окно КАК Окно,
		|	Очередь.Отметка КАК Отметка,
		|	ВЫБОР
		|		КОГДА Границы.Граница >= Очередь.Отметка
		|			ТОГДА Границы.Граница + 1
		|		ИНАЧЕ Очередь.Отметка
		|	КОНЕЦ КАК Граница,
		|	Очередь.ИдентификаторКлюча КАК ИдентификаторКлюча,
		|	Очередь.ТипКлюча КАК ТипКлюча,
		|	Очередь.Объект КАК Объект,
		|	Очередь.Удаление КАК Удаление,
		|	Очередь.Источник КАК Источник,
		|	Очередь.ВидКлюча КАК ВидКлюча,
		|	Очередь.ЗначенияКлюча КАК ЗначенияКлюча,
		|	ОтметкиСсылочныхОбъектов.Отметка ЕСТЬ NULL
		|		И ОтметкиРегистровКонстант.Отметка ЕСТЬ NULL КАК ОбновитьГраницу
		|ИЗ
		|	Очередь КАК Очередь
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениСсылочныхОбъектов КАК ОтметкиСсылочныхОбъектов
		|		ПО Очередь.ИдентификаторКлюча = ОтметкиСсылочныхОбъектов.ИдентификаторКлюча
		|			И Очередь.ТипКлюча = ОтметкиСсылочныхОбъектов.ТипКлюча
		|			И Очередь.ВидКлюча = ЗНАЧЕНИЕ(Перечисление.ВидыКлючейОтметокВремени.КлючСсылочногоОбъекта)
		|			И Очередь.Отметка <= ОтметкиСсылочныхОбъектов.Отметка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтметкиВремениРегистровКонстант КАК ОтметкиРегистровКонстант
		|		ПО Очередь.ИдентификаторКлюча = ОтметкиРегистровКонстант.ИдентификаторКлюча
		|			И Очередь.ТипКлюча = ОтметкиСсылочныхОбъектов.ТипКлюча
		|			И Очередь.Объект = ОтметкиРегистровКонстант.Объект
		|			И Очередь.ВидКлюча <> ЗНАЧЕНИЕ(Перечисление.ВидыКлючейОтметокВремени.КлючСсылочногоОбъекта)
		|			И Очередь.Отметка <= ОтметкиРегистровКонстант.Отметка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Границы КАК Границы
		|		ПО (ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Отметка,
		|	Удаление УБЫВ");
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область ВыборкаИКонтрольИзменений

// Выбирает порцию изменений, согласно переданным параметрам.
//
// Параметры:
//	Отметка - Число - Отметка, начиная с которой необходимо выбрать изменения.
//	ПараметрыВыборки - см. ПараметрыВыборкиИзменений
//
// Возвращаемое значение:
//	ТаблицаЗначений:
//		* ИдентификаторКлюча - УникальныйИдентификатор - Идентификатор ключа отметки времени.
//		* ТипКлюча - СправочникСсылка.ИдентификаторыОбъектовМетаданных -
//				   - СправочникСсылка.ИдентификаторыОбъектовРасширений - Тип ключа отметки времени.
//		* Объект - СправочникСсылка.ИдентификаторыОбъектовМетаданных -
//				 - СправочникСсылка.ИдентификаторыОбъектовРасширений - Тип объекта, для которого зарегистрирована отметка.
//		* Отметка - Число - Отметка времени.
//		* Граница - Число - Граница отметок времени.
//		* Удаление - Булево - Признак удаления данных.
//		* Источник - ОпределяемыйТип.ИсточникиДляОтметокВремени - Источник отметки времени.
//		* ВидКлюча - ПеречислениеСсылка.ВидыКлючейОтметокВремени - Вид ключа отметки времени.
//		* ХранилищеКлюча - ХранилищеЗначения - Хранилище значений, содержащее отбор исходного набора записей.
//
Функция РезультатВыборкиИзменений(Отметка, ПараметрыВыборки)
	
	ТекстЗапроса = Новый Массив; // Массив Из Строка
	ТекстЗапроса.Добавить(
		"ВЫБРАТЬ
		|	&Граница КАК Нижняя, ЕСТЬNULL(МАКСИМУМ(Т.Граница), 0) КАК Верхняя
		|ПОМЕСТИТЬ Границы
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 500
		|		Т.Граница КАК Граница
		|	ИЗ	РегистрСведений.ОтметкиВремениСсылочныхОбъектов КАК Т
		|	ГДЕ
		|		Т.Граница > &Граница
		|		//ОТБОР_ОТМЕТКИ_ХРАНЕНИЕ_ССЫЛОЧНЫЕ_ОБЪЕКТЫ
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ ПЕРВЫЕ 500
		|		Т.Граница КАК Граница
		|	ИЗ	РегистрСведений.ОтметкиВремениРегистровКонстант КАК Т
		|	ГДЕ
		|		Т.Граница > &Граница
		|		//ОТБОР_ОТМЕТКИ_ХРАНЕНИЕ_РЕГИСТРЫ
		|	УПОРЯДОЧИТЬ ПО Граница
		|	) КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.ИдентификаторКлюча КАК ИдентификаторКлюча,
		|	Т.ТипКлюча КАК ТипКлюча,
		|	Т.ТипКлюча КАК Объект,
		|	Т.Отметка КАК Отметка,
		|	Т.Граница КАК Граница,
		|	Т.Удаление КАК Удаление,
		|	Т.Источник КАК Источник,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыКлючейОтметокВремени.КлючСсылочногоОбъекта) КАК ВидКлюча,
		|	NULL КАК ЗначенияКлюча
		|ПОМЕСТИТЬ ВсеИзменения
		|ИЗ
		|	РегистрСведений.ОтметкиВремениСсылочныхОбъектов КАК Т
		|	СОЕДИНЕНИЕ Границы КАК Границы
		|	ПО ИСТИНА
		|ГДЕ
		|	Т.Граница >= Границы.Нижняя И Т.Граница <= Границы.Верхняя
		|	//ОТБОР_ОТМЕТКИ_ХРАНЕНИЕ_ССЫЛОЧНЫЕ_ОБЪЕКТЫ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.ИдентификаторКлюча,
		|	Т.ТипКлюча,
		|	Т.Объект,
		|	Т.Отметка,
		|	Т.Граница,
		|	Т.Удаление,
		|	Т.Источник,
		|	Т.ВидКлюча,
		|	Т.ЗначенияКлюча
		|ИЗ
		|	РегистрСведений.ОтметкиВремениРегистровКонстант КАК Т
		|	СОЕДИНЕНИЕ Границы КАК Границы
		|	ПО ИСТИНА
		|ГДЕ
		|	Т.Граница >= Границы.Нижняя И Т.Граница <= Границы.Верхняя
		|	//ОТБОР_ОТМЕТКИ_ХРАНЕНИЕ_РЕГИСТРЫ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.ИдентификаторКлюча,
		|	Т.ТипКлюча,
		|	Т.Объект,
		|	Т.Отметка,
		|	0,
		|	Т.Удаление,
		|	Т.Источник,
		|	Т.ВидКлюча,
		|	Т.ЗначенияКлюча
		|ИЗ
		|	РегистрСведений.ОтметкиВремениОчередь1 КАК Т
		|//ОТБОР_ОТМЕТКИ_ОЧЕРЕДЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.ИдентификаторКлюча,
		|	Т.ТипКлюча,
		|	Т.Объект,
		|	Т.Отметка,
		|	0,
		|	Т.Удаление,
		|	Т.Источник,
		|	Т.ВидКлюча,
		|	Т.ЗначенияКлюча
		|ИЗ
		|	РегистрСведений.ОтметкиВремениОчередь2 КАК Т
		|//ОТБОР_ОТМЕТКИ_ОЧЕРЕДЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.ИдентификаторКлюча,
		|	Т.ТипКлюча,
		|	Т.Объект,
		|	Т.Отметка,
		|	0,
		|	Т.Удаление,
		|	Т.Источник,
		|	Т.ВидКлюча,
		|	Т.ЗначенияКлюча
		|ИЗ
		|	РегистрСведений.ОтметкиВремениОчередь3 КАК Т
		|//ОТБОР_ОТМЕТКИ_ОЧЕРЕДЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.ИдентификаторКлюча КАК ИдентификаторКлюча,
		|	Т.ТипКлюча КАК ТипКлюча,
		|	Т.Объект КАК Объект,
		|	МАКСИМУМ(Т.Отметка) КАК Отметка
		|ПОМЕСТИТЬ АктуальныеИзменения
		|ИЗ
		|	ВсеИзменения КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.ИдентификаторКлюча,
		|	Т.ТипКлюча,
		|	Т.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.ИдентификаторКлюча КАК ИдентификаторКлюча,
		|	Т.ТипКлюча КАК ТипКлюча,
		|	Т.Объект КАК Объект,
		|	Т.Отметка КАК Отметка,
		|	Т.Граница КАК Граница,
		|	Т.Источник КАК Источник,
		|	Т.Удаление КАК Удаление,
		|	Т.ВидКлюча КАК ВидКлюча
		|ПОМЕСТИТЬ Изменённые
		|ИЗ
		|	ВсеИзменения КАК Т
		|		СОЕДИНЕНИЕ АктуальныеИзменения КАК АктуальныеИзменения
		|		ПО Т.ИдентификаторКлюча = АктуальныеИзменения.ИдентификаторКлюча
		|			И Т.ТипКлюча = АктуальныеИзменения.ТипКлюча
		|			И Т.Объект = АктуальныеИзменения.Объект
		|			И Т.Отметка = АктуальныеИзменения.Отметка
		|		//ОТБОР_РАНЕЕ_ВЫБРАННЫЕ_ИЗМЕНЕНИЯ
		|//УСЛОВИЯ_ИЗМЕНЕННЫЕ
		|");
		
	Если ПараметрыВыборки.МенеджерВременныхТаблиц = Неопределено Тогда
		
		ТекстЗапроса.Добавить(
			"ВЫБРАТЬ
			|	Т.ИдентификаторКлюча КАК ИдентификаторКлюча,
			|	Т.ТипКлюча КАК ТипКлюча,
			|	Т.Объект КАК Объект,
			|	Т.Отметка КАК Отметка,
			|	Т.Граница КАК Граница,
			|	Т.Источник КАК Источник,
			|	Т.Удаление КАК Удаление,
			|	Т.ВидКлюча КАК ВидКлюча,
			|	ВсеИзменения.ЗначенияКлюча КАК ХранилищеКлюча
			|ИЗ
			|	Изменённые КАК Т
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВсеИзменения КАК ВсеИзменения
			|		ПО Т.ИдентификаторКлюча = ВсеИзменения.ИдентификаторКлюча
			|			И Т.ТипКлюча = ВсеИзменения.ТипКлюча
			|			И Т.Объект = ВсеИзменения.Объект
			|			И Т.Отметка = ВсеИзменения.Отметка
			|			И Т.ВидКлюча = ЗНАЧЕНИЕ(Перечисление.ВидыКлючейОтметокВремени.КлючНабораИдентификаторНабораЗаписей)
			|			И (Т.Удаление = ИСТИНА)
			|			И (ВсеИзменения.Удаление = ИСТИНА)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Отметка,
			|	Удаление УБЫВ");
		
	Иначе
		
		ТекстЗапроса.Добавить(
			"ВЫБРАТЬ
			|	Т.ИдентификаторКлюча КАК ИдентификаторКлюча,
			|	Т.ТипКлюча КАК ТипКлюча,
			|	Т.Объект КАК Объект,
			|	Т.Отметка КАК Отметка
			|ПОМЕСТИТЬ _РАНЕЕ_ВЫБРАННЫЕ_ИЗМЕНЕНИЯ
			|ИЗ
			|	РАНЕЕ_ВЫБРАННЫЕ_ИЗМЕНЕНИЯ КАК Т
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Т.ИдентификаторКлюча,
			|	Т.ТипКлюча,
			|	Т.Объект,
			|	Т.Отметка
			|ИЗ
			|	Изменённые КАК Т");
		
		ТекстЗапроса.Добавить(
			"УНИЧТОЖИТЬ РАНЕЕ_ВЫБРАННЫЕ_ИЗМЕНЕНИЯ");
		
		ТекстЗапроса.Добавить(
			"ВЫБРАТЬ
			|	Т.ИдентификаторКлюча КАК ИдентификаторКлюча,
			|	Т.ТипКлюча КАК ТипКлюча,
			|	Т.Объект КАК Объект,
			|	Т.Отметка КАК Отметка
			|ПОМЕСТИТЬ РАНЕЕ_ВЫБРАННЫЕ_ИЗМЕНЕНИЯ
			|ИЗ
			|	_РАНЕЕ_ВЫБРАННЫЕ_ИЗМЕНЕНИЯ КАК Т"); 
					
		ТекстЗапроса.Добавить(
			"ВЫБРАТЬ
			|	Т.ИдентификаторКлюча КАК ИдентификаторКлюча,
			|	Т.ТипКлюча КАК ТипКлюча,
			|	Т.Объект КАК Объект,
			|	Т.Отметка КАК Отметка,
			|	Т.Граница КАК Граница,
			|	Т.Источник КАК Источник,
			|	Т.Удаление КАК Удаление,
			|	Т.ВидКлюча КАК ВидКлюча,
			|	ВсеИзменения.ЗначенияКлюча КАК ХранилищеКлюча
			|ИЗ
			|	Изменённые КАК Т
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВсеИзменения КАК ВсеИзменения
			|		ПО Т.ИдентификаторКлюча = ВсеИзменения.ИдентификаторКлюча
			|			И Т.ТипКлюча = ВсеИзменения.ТипКлюча
			|			И Т.Объект = ВсеИзменения.Объект
			|			И Т.Отметка = ВсеИзменения.Отметка
			|			И Т.ВидКлюча = ЗНАЧЕНИЕ(Перечисление.ВидыКлючейОтметокВремени.КлючНабораИдентификаторНабораЗаписей)
			|			И (Т.Удаление = ИСТИНА)
			|			И (ВсеИзменения.Удаление = ИСТИНА)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Отметка,
			|	Удаление УБЫВ");
		
	КонецЕсли;
	
	Запрос =
		Новый Запрос(СтрСоединить(ТекстЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов()));
	Запрос.УстановитьПараметр("Граница", Отметка);
	
	Если ЗначениеЗаполнено(ПараметрыВыборки.Объект) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОТБОР_ОТМЕТКИ_ХРАНЕНИЕ_ССЫЛОЧНЫЕ_ОБЪЕКТЫ", "И Т.ТипКлюча В (&Объект)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОТБОР_ОТМЕТКИ_ХРАНЕНИЕ_РЕГИСТРЫ", "И Т.Объект В (&Объект)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОТБОР_ОТМЕТКИ_ОЧЕРЕДЬ", "ГДЕ Т.Объект В (&Объект)");
		
		Запрос.УстановитьПараметр("Объект", ПараметрыВыборки.Объект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыборки.РазмерПорции) И Не ПараметрыВыборки.РазмерПорции = 1000 Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"ПЕРВЫЕ 500",
			СтрШаблон("ПЕРВЫЕ %1", Формат(Цел(ПараметрыВыборки.РазмерПорции / 2), "ЧГ=0")));
			
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"ПЕРВЫЕ 1000",
			СтрШаблон("ПЕРВЫЕ %1", Формат(ПараметрыВыборки.РазмерПорции, "ЧГ=0")));
	КонецЕсли;
	
	УсловияИзменённые = Новый Массив; // Массив Из Строка
	
	Если ПараметрыВыборки.МенеджерВременныхТаблиц <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"//ОТБОР_РАНЕЕ_ВЫБРАННЫЕ_ИЗМЕНЕНИЯ",
			"ЛЕВОЕ СОЕДИНЕНИЕ РАНЕЕ_ВЫБРАННЫЕ_ИЗМЕНЕНИЯ КАК _РАНЕЕ_ВЫБРАННЫЕ_ИЗМЕНЕНИЯ
			|	ПО Т.ИдентификаторКлюча = _РАНЕЕ_ВЫБРАННЫЕ_ИЗМЕНЕНИЯ.ИдентификаторКлюча
			|		И Т.ТипКлюча = _РАНЕЕ_ВЫБРАННЫЕ_ИЗМЕНЕНИЯ.ТипКлюча
			|		И Т.Объект = _РАНЕЕ_ВЫБРАННЫЕ_ИЗМЕНЕНИЯ.Объект
			|		И Т.Отметка = _РАНЕЕ_ВЫБРАННЫЕ_ИЗМЕНЕНИЯ.Отметка");
		
		УсловияИзменённые.Добавить("_РАНЕЕ_ВЫБРАННЫЕ_ИЗМЕНЕНИЯ.ИдентификаторКлюча ЕСТЬ NULL");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыборки.Источник) Тогда
		УсловияИзменённые.Добавить("Т.Источник <> &Источник");
		Запрос.УстановитьПараметр("Источник", ПараметрыВыборки.Источник);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияИзменённые) Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"//УСЛОВИЯ_ИЗМЕНЕННЫЕ",
			СтрШаблон("ГДЕ %1", СтрСоединить(УсловияИзменённые, " И ")));
	КонецЕсли;
	
	Если ПараметрыВыборки.МенеджерВременныхТаблиц <> Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = ПараметрыВыборки.МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Изменения = Запрос.Выполнить().Выгрузить();
	
	Возврат Изменения;
	
КонецФункции

#КонецОбласти

#КонецОбласти
