////////////////////////////////////////////////////////////////////////////////
// Обработки документов вызов сервера: содержит процедуры и функции обеспечивающие
//                                     работу с обработками документов на сервере.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс_НачалоОбработки

// Начинает обработку документа.
//
// Параметры:
//  Предмет - ОпределяемыйТип.ПредметДействия.
//
Процедура НачатьОбработку(Знач Предмет) Экспорт
	
	ПраваПоДокументу = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(Предмет);
	Если Не ПраваПоДокументу.Изменение Тогда
		
		Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
			
			ТекстИсключения = 
				НСтр("ru = 'У Вас недостаточно прав для начала обработки документа.
					|Обратитесь к автору документа.'");
			
		ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда
			
			ТекстИсключения = 
				НСтр("ru = 'У Вас недостаточно прав для начала обработки мероприятия.
					|Обратитесь к ответственному за мероприятие.'");
			
		Иначе
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный объект обработки %1 (%2).'"),
				Предмет,
				ТипЗнч(Предмет));
			
		КонецЕсли;
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияДокументооборот.ЭтоПомеченныйНаУдалениеОбъект(Предмет) Тогда
		
		Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
			
			ТекстИсключения = 
				НСтр("ru = 'Невозможно начать обработку документа, так как документ помечен на удаление'");
			
		ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда
			
			ТекстИсключения = 
				НСтр("ru = 'Невозможно начать обработку мероприятия, так как мероприятие помечено на удаление'");
			
		Иначе
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный объект обработки %1 (%2).'"),
				Предмет,
				ТипЗнч(Предмет));
			
		КонецЕсли;
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	Обработка = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(Предмет);
	
	РезультатЗапроса  = ДействияСервер.ТекущиеДействияПредмета(
		Предмет,,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Обработка, "ДатаСоздания"));
	
	Если ЗначениеЗаполнено(Обработка) И Не РезультатЗапроса.Пустой() Тогда
		ОбработкиОбъектов.НачатьОбработку(Обработка, Истина);
	Иначе
		
		
		Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
			
			ТекстИсключения = 
				НСтр("ru = 'Документ не может быть запущен в обработку. Обработка не настроена.'");
			
		ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда
			
			ТекстИсключения = 
				НСтр("ru = 'Мероприятие не может быть запущено в обработку. Обработка не настроена.'");
			
		Иначе
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный объект обработки %1 (%2).'"),
				Предмет,
				ТипЗнч(Предмет));
			
		КонецЕсли;
		
		ВызватьИсключение ТекстИсключения;
			
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьОбязательныеРеквизитыПредметаПередОтправкойВОбработку(Объект, Реквизиты) Экспорт
	
	Если ТипЗнч(Реквизиты) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Записывает роль файла.
// 
// Параметры:
//  Файл - СправочникСсылка.Файлы - Ссылка на файл
//  Роль - СправочникСсылка.РолиФайлов - Роль
Процедура ЗаписатьРольФайла(Файл, Роль) Экспорт
	
	РегистрыСведений.РолиФайловДокументов.ЗаписатьРольФайла(Файл, Роль);
	
КонецПроцедуры

// Проверяет строки участников на возможность начать обработку по ним.
// 
// Параметры:
//  МассивДействий - массив действий 
//  СообщенияОбОшибках - массив строк
//  ПараметрыПроверок - Структура
//
Процедура ПроверкаПередЗапуском(Знач МассивДействий, СообщенияОбОшибках, 
	ПараметрыПроверок) Экспорт
	
	ДействияСервер.ПроверкаПередЗапуском(МассивДействий, СообщенияОбОшибках, 
		ПараметрыПроверок);
	
КонецПроцедуры	

// Обновляет файлы документа при запуске в обработку.
//
// Параметры:
//  МассивФайлов - Массив - ссылки файлы документа.
//
Процедура ЗаполнитьФайлыДокументаПриЗапускеВОбработку(МассивФайлов) Экспорт 
	
	Если МассивФайлов.Количество() = 0 Тогда 
		Возврат
	КонецЕсли;
	
	Для Каждого ФайлСсылка Из МассивФайлов Цикл 
		// Данная процедура перезаполняет файл при необходимости
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ФайлСсылка);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает изменения, которые будут сделаны при переходы к выполнению действия.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия.
//
// Возвращаемое значение:
//  Структура:
//   * ДляПрерывания - Массив из ОпределяемыйТип.Действия.
//   * ДляПропуска - Массив из ОпределяемыйТип.Действия.
//   * ДляОчисткиРезультатов - Массив из ОпределяемыйТип.Действия.
//   * ОписаниеИзменений - Строка.
//   * ПереходВозможен - Булево.
//
Функция ИзмененияОбработкиПриПереходеКВыполнениюДействию(Действие) Экспорт
	
	Возврат ОбработкиОбъектов.ИзмененияОбработкиПриПереходеКВыполнениюДействию(Действие);
	
КонецФункции

// Выполняет переход к выполнению переданного действия обработки.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия.
//  ПодтвержденныеИзмененияОбработки - Неопределено, Структура - см. ИзмененияОбработкиПриПереходеКВыполнениюДействию.
//
Процедура ПерейтиКВыполнениюДействия(Действие,
	ПодтвержденныеИзмененияОбработки = Неопределено) Экспорт
	
	ОбработкиОбъектов.ПерейтиКВыполнениюДействия(Действие,
		ПодтвержденныеИзмененияОбработки = Неопределено);
	
КонецПроцедуры

// Данные для проверки отсутствий.
// 
// Параметры:
//  Предмет - ОпределяемыйТип.ПредметДействия.
// 
// Возвращаемое значение:
//  Структура - Данные для проверки отсутствий:
//   * Участники - Массив из СправочникСсылка.Сотрудники.
//   * Срок - Дата.
//
Функция ДанныеДляПроверкиОтсутствий(Знач Предмет) Экспорт
	
	ДанныеДляПроверкиОтсутствий = Новый Структура;
	ДанныеДляПроверкиОтсутствий.Вставить("Участники", Новый Массив);
	ДанныеДляПроверкиОтсутствий.Вставить("Срок", ТекущаяДатаСеанса() + 86400 * 7);
	
	ПредметОбъект = Предмет.ПолучитьОбъект();
	
	Обработка = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(Предмет);
	
	РезультатЗапроса  = ДействияСервер.ТекущиеДействияПредмета(
		Предмет,,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Обработка, "ДатаСоздания"));
	
	Если ЗначениеЗаполнено(Обработка) И Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаДействий = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДействий.Следующий() Цикл
			
			ДействиеОбъекта = ВыборкаДействий.Действие.ПолучитьОбъект();
			Попытка
				
				ДействиеОбъекта.Разыменовать(ПредметОбъект);
				
				Для Каждого СтрокаУчастника Из ДействиеОбъекта.Участники Цикл
					Если Не ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
						Продолжить;
					КонецЕсли;
					ДанныеДляПроверкиОтсутствий.Участники.Добавить(СтрокаУчастника.Участник);
				КонецЦикла;
				
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ТекстЖурналаРегистрации = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				СобытиеЖурналаРегистрации = НСтр("ru = 'Проверка отсутствий'",
					ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(
					СобытиеЖурналаРегистрации,
					УровеньЖурналаРегистрации.Предупреждение,,,
					ТекстЖурналаРегистрации);
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеДляПроверкиОтсутствий.Участники =
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДанныеДляПроверкиОтсутствий.Участники);
	
	Возврат ДанныеДляПроверкиОтсутствий;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_ПрерываниеОстановкаОбработки

// Прерывает обработку объекта.
//
// Параметры:
//  Предмет - ОпределяемыйТип.ПредметДействия - ссылка на предмет обработки.
//  ПричинаПрерывания - Строка - причина прерывания обработки.
//
Процедура ПрерватьОбработкуОбъекта(Знач Предмет, Знач ПричинаПрерывания) Экспорт
	
	ОбработкиОбъектов.ПрерватьОбработкуОбъекта(Предмет, ПричинаПрерывания);
	
КонецПроцедуры

// Останавливает/продолжает обработку объекта.
//
// Параметры:
//  Предмет - ОпределяемыйТип.ПредметДействия - ссылка на предмет обработки.
//  СостояниеОбработки - ПеречислениеСсылка.СостоянияОбработкиОбъектов - устанавливаемое состояние обработки.
//
Процедура ОстановитьПродолжитьОбработкуОбъекта(Знач Предмет, Знач СостояниеОбработки) Экспорт
	
	ОбработкиОбъектов.ОстановитьПродолжитьОбработкуОбъекта(Предмет, СостояниеОбработки);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_ПроверкаЗапускаИзменения

// Проверяет условия запуска. Все условия должны вернуть Истина для успешного запуска.
// 
// Параметры:
// 	Предмет - ОпределяемыйТип.ПредметДействия.
// 	УсловияЗапуска - ТаблицаЗначений.
// 	 * ТекстПредупреждения - Строка.
// 	 * Условие - СправочникСсылка.АлгоритмыПроверки.
// 	
// Возвращаемое значение:
//  Массив из Строка.
// 	
Функция ОшибкиПроверкиУсловийЗапуска(Знач Предмет, УсловияЗапуска) Экспорт
	
	МассивОшибок = Новый Массив;
	
	ПредметОбъект = Предмет.ПолучитьОбъект();
	
	Для Каждого Стр Из УсловияЗапуска Цикл
		
		Если Не РаботаСАлгоритмамиПроверки.АлгоритмПоПредметуВыполняется(ПредметОбъект, Стр.Условие) Тогда
			МассивОшибок.Добавить(Стр.ТекстПредупреждения);
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат МассивОшибок;
				
КонецФункции

// Проверяет условия запуска. Возвращает массив ошибок.
// 
// Параметры:
// 	Предмет - ОпределяемыйТип.ПредметДействия.
// 	ВидОбъекта - ОпределяемыйТип.ВидОбъектаСОбработкой.
// 	
// Возвращаемое значение:
//  Массив из Строка.
// 	
Функция ПроверитьУсловияЗапуска(Знач Предмет, Знач ВидОбъекта) Экспорт
	
	МассивОшибок = Новый Массив;
	
	УсловияЗапуска = ДействияСервер.УсловияЗапускаОбработки(Предмет);
	Если УсловияЗапуска.Количество() = 0 Тогда
		Возврат МассивОшибок;
	КонецЕсли;	
	
	ПредметОбъект = Предмет.ПолучитьОбъект();
	
	Для Каждого СтрокаУсловий Из УсловияЗапуска Цикл
		
		Если Не РаботаСАлгоритмамиПроверки.АлгоритмПоПредметуВыполняется(ПредметОбъект, 
			СтрокаУсловий.Условие) Тогда
			МассивОшибок.Добавить(СтрокаУсловий.ТекстПредупреждения);
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат МассивОшибок;
				
КонецФункции
								
// Сделает проверку ролей файлов. Скорректирует что сможет. Бросит исключение при ошибке.
// 
// Параметры:
// 	Предмет - СправочникССылка.ДокументыПредприятия
Процедура ПроверитьРолиФайловПередЗапускомОбработки(Знач Предмет) Экспорт
	
	// Документы
	Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Предмет) Тогда
		
		ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "ВидДокумента");
		РолиФайлов = Делопроизводство.РолиФайловДляВидаДокументов(ВидДокумента);
		Если РолиФайлов.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;	
		
		// Получим файлы
		Файлы = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Предмет, Ложь);
		КэшРолейФайлов = Новый Соответствие(); // ключ - файл, значение - роль
		
		// Роли файлов
		ЧислоРолейОбязательная = 0;
		ЧислоРолейТолькоОдинФайл = 0;
		ЧислоФайлов = 0;
		ЧислоФайловБезРоли = 0;
		ФайлСсылка = Неопределено; // ссылка на файл без роли
		Для Каждого СтрРоль Из РолиФайлов Цикл
			
			Если СтрРоль.Обязательная Тогда
				ЧислоРолейОбязательная = ЧислоРолейОбязательная + 1;
			КонецЕсли;	
			
			Если СтрРоль.ТолькоОдинФайл Тогда
				ЧислоРолейТолькоОдинФайл = ЧислоРолейТолькоОдинФайл + 1;
			КонецЕсли;	
			
		КонецЦикла;		
		
		Для Каждого Файл Из Файлы Цикл
			
			ЧислоФайлов = ЧислоФайлов + 1;
			
			РольФайла = Неопределено;
			РолиФайлаМассив = РегистрыСведений.РолиФайловДокументов.ПолучитьРолиФайла(Файл);
			Если РолиФайлаМассив.Количество() <> 0 Тогда
				РольФайла = РолиФайлаМассив[0];
			КонецЕсли;
			КэшРолейФайлов[Файл] = РольФайла; 
				
			Если Не ЗначениеЗаполнено(РольФайла) Тогда
				ЧислоФайловБезРоли = ЧислоФайловБезРоли + 1;
				ФайлСсылка = Файл;
			КонецЕсли;
				
		КонецЦикла;
		
		// Обязательная
		Для Каждого СтрРоль Из РолиФайлов Цикл
			
			Если СтрРоль.Обязательная Тогда
				
				Если Не ЕстьФайлыСРолью(КэшРолейФайлов, СтрРоль.Роль) Тогда
					
					Если ЧислоРолейОбязательная = 1 И ЧислоФайлов = 1 И ЧислоФайловБезРоли = 1 Тогда
						
						// автоматом поставим роль файлу
						ЗаписатьРольФайла(ФайлСсылка, СтрРоль.Роль);
						
					Иначе	
						
						ТекстПредупреждения = СтрШаблон(
							НСтр("ru = 'Для запуска в обработку требуется указать хотя бы один файл с ролью ""%1"".'"), СтрРоль.Роль);
						ВызватьИсключение ТекстПредупреждения;
						
					КонецЕсли;	
					
				КонецЕсли;	
				
			КонецЕсли;	
			
		КонецЦикла;	
		
		// ТолькоОдинФайл
		Для Каждого СтрРоль Из РолиФайлов Цикл
			
			Если СтрРоль.ТолькоОдинФайл Тогда
				
				ЧислоФайловСРолью = ЧислоФайловСРолью(КэшРолейФайлов, СтрРоль.Роль);
				
				Если ЧислоФайловСРолью <> 1 Тогда
					
					Если ЧислоРолейТолькоОдинФайл = 1 И ЧислоФайлов = 1 И ЧислоФайловБезРоли = 1 Тогда
						
						// автоматом поставим роль файлу
						ОбработкиОбъектовВызовСервера.ЗаписатьРольФайла(ФайлСсылка, СтрРоль.Роль);
						
					ИначеЕсли ЧислоФайловСРолью >= 2 Тогда	
						ТекстПредупреждения = СтрШаблон(
							НСтр("ru = 'Для запуска в обработку должен быть указан только один файл с ролью ""%1"".'"), СтрРоль.Роль);
						ВызватьИсключение ТекстПредупреждения;
						
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры

// Сделает проверку действий. Бросит исключение при ошибке.
// 
// Параметры:
// 	Предмет - СправочникССылка.ДокументыПредприятия
Процедура ПроверитьЗаполнениеДействий(Знач Предмет) Экспорт
	
	СообщенияОбОшибках = Новый Массив;
	ПараметрыПроверок = Новый Структура(); 
	
	ПараметрыПроверок.Вставить("Объект", Предмет);

	МассивДействий = Новый Массив;
	
	ДатаНачала = ТекущаяДатаСеанса();
	
	ВидОбъекта = ДействияСервер.ВидОбъекта(Предмет);
	ДействияПоПредмету = ДействияСервер.ТекущиеДействияПредмета(Предмет, ВидОбъекта, ДатаНачала);
	ДействияПоПредмету = ДействияПоПредмету.Выгрузить();

	Для Каждого СтрокаДействия Из ДействияПоПредмету Цикл

		МассивДействий.Добавить(СтрокаДействия.Действие);
		
	КонецЦикла;	
	
	Если МассивДействий.Количество() <> 0 Тогда
		ОбработкиОбъектовВызовСервера.ПроверкаПередЗапуском(МассивДействий, СообщенияОбОшибках, 
			ПараметрыПроверок);
	КонецЕсли;	
	
	Если СообщенияОбОшибках.Количество() <> 0 Тогда
		ТекстПредупреждения = СтрСоединить(СообщенияОбОшибках, Символы.ПС);
		ВызватьИсключение ТекстПредупреждения;
	КонецЕсли;	
	
КонецПроцедуры

// Проверяет права участников обработки предмета на его разрезы доступа.
// Добавляет обнаруженные ошибки прав в переданный массив
// 
// Параметры:
//  Предмет - СправочникСсылка.ДокументыПредприятия, СправочникСсылка.Мероприятия
//  МассивОшибок - Массив - Массив ошибок, возникших при запуске обработки предмета.
//
Процедура ПроверитьПраваУчастниковОбработки(Знач Предмет, МассивОшибок) Экспорт
	
	Ошибки = "";
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Возврат;
	КонецЕсли;
	
	ВидОбъекта = ДействияСервер.ВидОбъекта(Предмет);
	ДействияПоПредмету = ДействияСервер.ТекущиеДействияПредмета(
		Предмет, ВидОбъекта, ТекущаяДатаСеанса()).Выгрузить();

	МассивДействий = Новый Массив;
	Для Каждого СтрокаДействия Из ДействияПоПредмету Цикл
		МассивДействий.Добавить(СтрокаДействия.Действие);
	КонецЦикла;	
	
	Если МассивДействий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РГ = РаботаСРабочимиГруппами.ПолучитьРабочуюГруппуДокумента(Предмет);
	
	Для Каждого Действие Из МассивДействий Цикл
	
		УчастникиДействия = ДействияСервер.ВсеУчастникиДействия(Действие);
		
		Для Каждого СтрокаУчастника Из УчастникиДействия Цикл
			НоваяСтрока = РГ.Добавить();
			НоваяСтрока.Участник = СтрокаУчастника.Участник;
		КонецЦикла;
		
		Если ДействияКлиентСервер.ЭтоДействиеИсполнения(Действие) Тогда
			
			Контролер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Контролер");
			Если ЗначениеЗаполнено(Контролер) Тогда
				НоваяСтрока = РГ.Добавить();
				НоваяСтрока.Участник = Контролер;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Ошибки = РаботаСРабочимиГруппами.ПроверитьПраваУчастниковРабочейГруппыНаОбъект(Предмет, РГ);
	Если ЗначениеЗаполнено(Ошибки) Тогда
		МассивОшибок.Добавить(Ошибки);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает наличие невыполненного хотя бы одного задания в рамках обработки объектов.
//
// Параметры:
//  ОбработкаОбъекта - СправочникСсылка.ОбработкиОбъектов, Неопределено -
//  ОбъектОбработки - ОпределяемыйТип.ПредметДействия, Неопределено - ссылка на предмет обработки.
//  ТипыЗаданий - Массив из ПеречислениеСсылка.ТипыЗаданий, Неопределено -
//  ТипыЗаданийИсключения - Массив из ПеречислениеСсылка.ТипыЗаданий, Неопределено -
//  БезПроцессовИЗадач - Булево - Если истина, то проверяем наличие невыполненных заданий только по обработке и действиям,
//  без бизнес-процессов и задач
//
// Возвращаемое значение:
//  Булево
//
Функция ЕстьНеВыполненноеЗаданиеПоОбработкеОбъектов(ОбъектОбработки, ОбработкаОбъекта,
	ТипыЗаданий = Неопределено, ТипыЗаданийИсключения = Неопределено, БезПроцессовИЗадач = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(ОбработкаОбъекта) Тогда
		ОбработкаОбъекта = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(ОбъектОбработки);
	КонецЕсли;	
	Если Не ЗначениеЗаполнено(ОбработкаОбъекта) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбработкаОчередиЗаданийСервер.ЕстьНеВыполненноеЗаданиеПоОбработкеОбъектов(ОбработкаОбъекта, ТипыЗаданий,
		ТипыЗаданийИсключения, БезПроцессовИЗадач);

КонецФункции		

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЕстьФайлыСРолью(КэшРолейФайлов, Роль)
	
	НашлиРоль = Ложь;
	
	Для Каждого КлючИЗначение Из КэшРолейФайлов Цикл
		
		Если КлючИЗначение.Значение = Роль Тогда
			НашлиРоль = Истина;
			Прервать;	
		КонецЕсли;	
			
	КонецЦикла;
	
	Возврат НашлиРоль;
	
КонецФункции	

Функция ЧислоФайловСРолью(КэшРолейФайлов, Роль)
	
	ЧислоФайловСРолью = 0;
	
	Для Каждого КлючИЗначение Из КэшРолейФайлов Цикл
		
		Если КлючИЗначение.Значение = Роль Тогда
			ЧислоФайловСРолью = ЧислоФайловСРолью + 1;	
		КонецЕсли;	
			
	КонецЦикла;
	
	Возврат ЧислоФайловСРолью;
	
КонецФункции	

#КонецОбласти