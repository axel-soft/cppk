#Область ПрограммныйИнтерфейс

// Вставляет печати организации вместо тэга в файле DocX
// 
//Параметры:
//			МассивТегов - Массив из Строка
//			ПечатиОрганизации - Соответствие - ключ Тег (Строка), Значение - массив дв данных картинок
//			ДвоичныеДанныеФайла - ДвоичныеДанные  -двоичные данные файла, в котором осуществляется поиск тэга и вставка штрихкода
//			Расширение - Строка
//			
// Возвращаемое значение:
// 	ДвоичныеДанные - ДвоичныеДанные файла , в который вставлена картинка организации
Функция ВставитьПечатиОрганизацииВФайлDocx(
	Знач МассивТегов,
	Знач ПечатиОрганизации, 
	Знач ДвоичныеДанныеФайла, 
	Знач Расширение) Экспорт
	
	Если ДвоичныеДанныеФайла.Размер() = 0 Тогда
		Возврат ДвоичныеДанныеФайла;
	КонецЕсли;
	
	СтарыйПутьКФайлу = ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанныеФайла.Записать(СтарыйПутьКФайлу);
	НовыйПутьКФайлу = ПолучитьИмяВременногоФайла(Расширение);
	
	КопироватьФайл(СтарыйПутьКФайлу, СтрЗаменить(СтарыйПутьКФайлу, Расширение, "zip"));
	ИмяФайлаСПутемZIP = СтрЗаменить(СтарыйПутьКФайлу, Расширение, "zip");

	ВременнаяПапкаДляРазархивирования = ПолучитьИмяВременногоФайла("");
	ВременныйZIPФайл = ПолучитьИмяВременногоФайла("zip"); 

	Архив = Новый ЧтениеZipФайла();
	Архив.Открыть(ИмяФайлаСПутемZIP);
	Архив.ИзвлечьВсе(ВременнаяПапкаДляРазархивирования, РежимВосстановленияПутейФайловZIP.Восстанавливать);
	Архив.Закрыть();
	
	МакетДляВставкиШтрихкода = ПолучитьОбщийМакет("ВставкаИзображенияВместоТегаВDocx");

	// 30  -оптимальный размер картинки внутри файла
	ВысотаШтрихкода = 30;
	ШиринаШтрихкода = 30;
	
	ВсеКартинкиШтампов = Новый Массив;
	Для Каждого КлючИЗначение Из ПечатиОрганизации Цикл
		
		МассивДвоичныеДанныеШтампов = КлючИЗначение.Значение;
		Для Каждого ДвДанные Из МассивДвоичныеДанныеШтампов Цикл
			ВсеКартинкиШтампов.Добавить(ДвДанные);
		КонецЦикла;	
		
	КонецЦикла;	
	
	ВсеИдКартинок = Новый Массив;

	Для Каждого ДвоичныеДанныеКартинки Из ВсеКартинкиШтампов Цикл

		ИДкартинки = 0;
		СчетчикСвязей = 0;
		ВизуализацияЭПВызовСервера.СохранитьИзображениеВоВнутреннейСтруктуреDocx(ВременнаяПапкаДляРазархивирования, 
			ДвоичныеДанныеКартинки, ИДкартинки, СчетчикСвязей);
			
		СтруктФайла = Новый Структура("ДвоичныеДанныеКартинки, ИДКартинки, СчетчикСвязей", 
			ДвоичныеДанныеКартинки, ИДКартинки, СчетчикСвязей); 	
		ВсеИдКартинок.Добавить(СтруктФайла);	
		
		Картинка = Новый Картинка(ДвоичныеДанныеКартинки);
		ВысотаШтрихкода = Картинка.Высота();
		ШиринаШтрихкода = Картинка.Ширина();
		Если ВысотаШтрихкода > 30 Или ШиринаШтрихкода > 30 Тогда
			
			ШиринаКВысоте = ШиринаШтрихкода / ВысотаШтрихкода;
			
			Если ВысотаШтрихкода > ШиринаШтрихкода Тогда
				ВысотаШтрихкода = 30;
				ШиринаШтрихкода = Цел(ВысотаШтрихкода * ШиринаКВысоте); 
			Иначе
				ШиринаШтрихкода = 30;
				ВысотаШтрихкода = Цел(ШиринаШтрихкода / ШиринаКВысоте); 
			КонецЕсли;		
			 
		КонецЕсли;	
			
	КонецЦикла;		
	
	ВсеСтрокиВставкиШтампа = Новый Соответствие; // ключ - тэг, значение -Строка

	
	Для Каждого КлючИЗначение Из ПечатиОрганизации Цикл
		
		Тэг  = КлючИЗначение.Ключ;
		МассивДвоичныеДанныеШтампов = КлючИЗначение.Значение;

		ТекстДляВставкиШтампаИтоговый = "";
		НомерПодписи = 0;
	
		Для Каждого ДвоичныеДанныеКартинки Из МассивДвоичныеДанныеШтампов Цикл
		
			ИДкартинки = 0;
			СчетчикСвязей = 0;
			Для Каждого СтруктФайла Из ВсеИдКартинок Цикл
				Если СтруктФайла.ДвоичныеДанныеКартинки = ДвоичныеДанныеКартинки Тогда
					ИДКартинки = СтруктФайла.ИДКартинки;
					СчетчикСвязей = СтруктФайла.СчетчикСвязей;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
			ТекстДляВставкиШтампа = МакетДляВставкиШтрихкода.ПолучитьТекст();
			
			// конвертация в EMU (English Metrick Units) - openXML его использует
			//Wikipedia: there are 914400 EMUs per inch
			ВысотаШтрихкодаЗначение = (ВысотаШтрихкода / 25.4) * 914400;
			ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, 
				"_ВысотаШтрихкода_", Формат(ВысотаШтрихкодаЗначение,"ЧДЦ=0; ЧГ=0"));

			ШиринаШтрихкодаЗначение = (ШиринаШтрихкода / 25.4) * 914400;
			ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, 
				"_ШиринаШтрихкода_", Формат(ШиринаШтрихкодаЗначение,"ЧДЦ=0; ЧГ=0"));
			
			ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, 
				"_ИДКартинкиВоВнутреннейПапке_", "rId" + Строка(СчетчикСвязей + 1));
	
			ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, 
				"_ВставитьИмяТэга_", "ИмяТэга" + Строка(НомерПодписи + 930 + 1) );
				
			ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, 
				"_PictureName_", "Picture_" + Строка(НомерПодписи + 940 + 1) );
			ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, 
				"_ВставитьИД1_", 950 + НомерПодписи );
			ТекстДляВставкиШтампа = СтрЗаменить(ТекстДляВставкиШтампа, 
				"_ВставитьИД2_", 960 + НомерПодписи );
			
			Если ТекстДляВставкиШтампаИтоговый <> "" Тогда
				ТекстДляВставкиШтампаИтоговый = ТекстДляВставкиШтампаИтоговый + " ";
			КонецЕсли;	
			ТекстДляВставкиШтампаИтоговый = ТекстДляВставкиШтампаИтоговый + ТекстДляВставкиШтампа;
			
			НомерПодписи = НомерПодписи + 1;
			
		КонецЦикла;
		
		ТекстДляВставкиШтампаИтоговый = "</w:t>" + ТекстДляВставкиШтампаИтоговый + "<w:t>";
	
		ВсеСтрокиВставкиШтампа[Тэг] = ТекстДляВставкиШтампаИтоговый; 
	
	КонецЦикла;
	
	
		
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьФайл(ВременнаяПапкаДляРазархивирования + "/word/document.xml");
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.Отступ = Ложь;
	ЗаписьXML.ОткрытьФайл(ВременнаяПапкаДляРазархивирования + "/word/document_update.xml");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	// Обязательно нужно ставить Ложь, иначе будут пропадать пробелы
	ЧтениеXML.ИгнорироватьПробелы = Ложь;
	
	Пока ЧтениеXML.Прочитать() Цикл	
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента(ЧтениеXML.Имя);
			
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				ЗаписьXML.ЗаписатьАтрибут(ЧтениеXML.Имя,ЧтениеXML.Значение);
				
			КонецЦикла;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			
			Найден = Ложь;
			НайденныйТэг = "";
			Для Каждого Тэг Из МассивТегов Цикл
				Если Найти(ЧтениеXML.Значение, Тэг) > 0 Тогда
					Найден = Истина;
					НайденныйТэг = Тэг; 
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
			Если Найден Тогда
				
				Тэг = НайденныйТэг;
				ТекстДляВставкиШтампаИтоговый = ВсеСтрокиВставкиШтампа[Тэг];
				
				НовоеЗначение = СтрЗаменить(ЧтениеXML.Значение, "&lt;&lt;"+Тэг+"&gt;&gt;" , "_");
				НовоеЗначение = СтрЗаменить(НовоеЗначение, "&lt;"+Тэг+"&gt;" , "_");
				НовоеЗначение = СтрЗаменить(НовоеЗначение, "<<"+Тэг+">>" , "_");
				НовоеЗначение = СтрЗаменить(НовоеЗначение, "<"+Тэг+">" , "_");
				НовоеЗначение = СтрЗаменить(НовоеЗначение, Тэг, "_");
				
				НовоеЗначение = СтрЗаменить(НовоеЗначение, "_", ТекстДляВставкиШтампаИтоговый);
				
				ЗаписьXML.ЗаписатьБезОбработки(НовоеЗначение);
				
			Иначе
				ЗаписьXML.ЗаписатьТекст(ЧтениеXML.Значение);
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЦикла;

	ЧтениеXML.Закрыть();
	ЗаписьXML.Закрыть();
	
	АвтозаполнениеШаблоновФайловКлиентСервер.ЗаменитьПространствоИменR(
		ВременнаяПапкаДляРазархивирования + "/word/document_update.xml");
	
	ПереместитьФайл(ВременнаяПапкаДляРазархивирования + "/word/document_update.xml", ВременнаяПапкаДляРазархивирования + "/word/document.xml");
	УдалитьФайлы(ВременнаяПапкаДляРазархивирования + "/word/document_update.xml");
	
	Архиватор = Новый ЗаписьZipФайла(ВременныйZIPФайл, "", "");
	Архиватор.Добавить(ВременнаяПапкаДляРазархивирования + "\*.*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	Архиватор.Записать();

	ПереместитьФайл(ВременныйZIPФайл, НовыйПутьКФайлу);
	УдалитьФайлы(ВременнаяПапкаДляРазархивирования);	
	УдалитьФайлы(СтарыйПутьКФайлу);
	УдалитьФайлы(ВременныйZIPФайл);
	
	ДвоичныеДанныеЗаполненногоФайла = Новый ДвоичныеДанные(НовыйПутьКФайлу);
	УдалитьФайлы(НовыйПутьКФайлу);
	Возврат ДвоичныеДанныеЗаполненногоФайла;
	
КонецФункции

#КонецОбласти