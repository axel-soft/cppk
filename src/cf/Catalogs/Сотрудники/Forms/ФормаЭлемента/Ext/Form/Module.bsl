///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Параметры.УникальныйИдентификаторФормыПодразделения) Тогда
		УникальныйИдентификаторФормыПодразделения =
			Параметры.УникальныйИдентификаторФормыПодразделения;
	КонецЕсли;

	Если ЗначениеЗаполнено(Параметры.Подразделение) Тогда
		Объект.Подразделение = Параметры.Подразделение;
	КонецЕсли;

	ПротоколированиеРаботыСотрудников.ЗаписатьОткрытие(Объект.Ссылка);
	
	ЗаполнитьРуководителя(ЭтотОбъект);
	
	ЗаполнитьСотрудникаПоПользователю(Отказ);
	
	НастроитьПросмотрЭлементовФормы();
	НастроитьПоказФотографии();
	НастроитьДоступностьОсновнойСотрудник();
	
	НастроитьРоли();
	НастроитьЗамещающихИПомощников();
	
	НастроитьРабочуюКонтактнуюИнформацию();
	НастроитьЛичнуюКонтактнуюИнформацию();
	УменьшитьШиринуПолейКонтактнойИнформации(ЭтаФорма);
		
	ПоказатьИндексНумерации();
	
	НастроитьОтображениеСамочувствияСотрудника();
	
	ЗаполнитьСледитьЗаСамочувствием();
	
	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	СклонениеПредставленийОбъектовДокументооборотКлиентСервер.ЗаполнитьПараметрыСклоненияФормы(ЭтотОбъект);
	СклонениеПредставленийОбъектов.ПриСозданииНаСервере(ЭтотОбъект, ПолноеИмя);
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
		
	НастроитьОтображениеПараметровАутентификации();
	
	НастроитьФормуДляМобильногоПриНеобходимости();
	
	НастроитьОтображениеГруппПометкаУдаленияНедействителен();
	
	КонфигурацияИспользуетТолькоОдинЯзык = МультиязычностьПовтИсп.КонфигурацияИспользуетТолькоОдинЯзык(Ложь);
	
	ЧатБот = РаботаСЧатБотомПовтИсп.ЧатБот();
	Если Пользователь = ЧатБот И ЗначениеЗаполнено(ПользовательИБИмя) Тогда
		Элементы.ПользовательИБИмя.ОтображениеПредупрежденияПриРедактировании =
			ОтображениеПредупрежденияПриРедактировании.Отображать;
		Элементы.ПользовательИБИмя.ПредупреждениеПриРедактировании =
			РаботаСЧатБотом.ТекстПредупрежденияИзменятьЧатБотаНеРекомендуется();
	КонецЕсли;
	
	Элементы.ФормаОчиститьИсториюВыбора.Видимость = Пользователи.ЭтоПолноправныйПользователь();
	
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	
	ЭтоСозданиеДокумента = Не ЗначениеЗаполнено(Объект.Ссылка);
	ПроизошлаСменаДолжностиПодразделения = Параметры.Свойство("ПроизошлаСменаДолжностиПодразделения")
		И Параметры.ПроизошлаСменаДолжностиПодразделения;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ПроизошлаСменаДолжностиПодразделения Тогда
		
		ДанныеОбработкиИзмененияСписковДоступа = ДанныеОбработкиИзмененияСписковДоступа();
		СинонимОбработки = ДанныеОбработкиИзмененияСписковДоступа.Синоним;
		НавигационнаяСсылка = ДанныеОбработкиИзмененияСписковДоступа.НавигационнаяСсылка;
		ТекстПредупреждения =
			НСтр("ru='Дополнительно настроить права доступа к объектам можно в обработке'")
			+ Символы.ПС;
		ТекстДляСсылки = СинонимОбработки;
		ТекстСообщения = 
			Новый ФорматированнаяСтрока(ТекстПредупреждения ,Новый ФорматированнаяСтрока(ТекстДляСсылки,,,,НавигационнаяСсылка));
		ПоказатьПредупреждение(, ТекстСообщения);
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, Объект);
	//Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	РазместитьEmailДляПолученияПароляНадSkypеПриНеобходимости();	

	ЗаполнитьСотрудникаПоФизлицу();	
	ЗаполнитьОсновнойСотрудникПриЧтении(ТекущийОбъект);	
	ЗаполнитьПользователяПоСотруднику(ТекущийОбъект);	
	ЗаполнитьEmailДляВосстановленияПароля();	
	ЗаполнитьУФизЛицаЕстьПользователи(ТекущийОбъект);	
	НастроитьПоказФотографии();	
	ЗаполнитьРангСотрудника();	
	ЗаполнитьСледитьЗаСамочувствием();
	
	НастроитьОтображениеГруппПометкаУдаленияНедействителен();
	
	УменьшитьШиринуПолейКонтактнойИнформации(ЭтаФорма);
	ПрочитатьПользователяИБ();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	СписокЗамещающиеИПомощники.Параметры.УстановитьЗначениеПараметра("СтрокаПоВсем", НСтр("ru = 'По всем'"));
	СписокЗамещающиеИПомощники.Параметры.УстановитьЗначениеПараметра("СтрокаВыборочно", НСтр("ru = 'Выборочно'"));
	
	НельзяИзменитьФИОФизЛицу = ФизическиеЛица.НельзяИзменитьФИОФизЛицу(Объект.Владелец);
	
	Если ТолькоПросмотр Или НельзяИзменитьФИОФизЛицу Тогда
		
		Элементы.ГруппаКнопкиФИО.Видимость = Ложь;
		Элементы.АдресКартинкиКонтекстноеМенюДобавитьИзображение.Доступность = Ложь;
		Элементы.АдресКартинкиКонтекстноеМенюОчиститьИзображение.Доступность = Ложь;
		Элементы.ДекорацияКартинкаПоУмолчаниюКонтекстноеМенюДобавитьИзображение.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененоФизическоеЛицо" Тогда
		Если Параметр = Объект.Владелец  Тогда
			ЗаполнитьСотрудникаПоФизлицу();
			Прочитать();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Запись_РолеваяАдресация" Тогда
		Элементы.Роли.Обновить();
		НастроитьРоли();
	ИначеЕсли ИмяСобытия = "Запись_ЗамещающиеИПомощники" Тогда
		Элементы.ЗамещающиеИПомощники.Обновить();
		НастроитьЗамещающихИПомощников();
	
	ИначеЕсли ИмяСобытия = "Запись_Отсутствие" И Параметр.Сотрудник = Объект.Ссылка Тогда
		
		ОбновитьОтсутствие();
		
	//При установке и снятии пометки на удаление
	ИначеЕсли ИмяСобытия = "Запись_Сотрудники" Тогда
		
		Прочитать();
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = ФизическиеЛицаКлиент.ИмяОповещенияОбИзмененииФИО()
		И Параметр = Объект.Владелец Тогда
		
		Прочитать();
		ОбновитьСклоненияВРеквизите();
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ЗащитаПерсональныхДанных
	ЗащитаПерсональныхДанныхКлиент.ОбработкаОповещенияФормы(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.ЗащитаПерсональныхДанных
	
	Если ИмяСобытия = "Запись_АктОбУничтоженииПерсональныхДанных" Тогда
		
		Прочитать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПользовательИБЗапрещеноВосстанавливатьПароль
		И ЗначениеЗаполнено(EmailДляВосстановленияПароля)
		И ВходВПрограммуРазрешен Тогда
		
		Отказ = Истина;
		
		ЗакрытьФорму = ПараметрыЗаписи.Свойство("Закрыть") И ПараметрыЗаписи.Закрыть;
		
		ПродолжитьЗаписьПослеВопросаОЗапретеВосстанавливатьПароль = Новый ОписаниеОповещения(
			"ПродолжитьЗаписьПослеВопросаОЗапретеВосстанавливатьПароль", ЭтотОбъект, ЗакрытьФорму);
		
		ТекстВопроса = НСтр("ru = 'Пользователю запрещено восстанавливать пароль,
			|но контакт ""Email для получения пароля"" заполнен. Отключить запрет?'");
		
		СписокКнопокДиалога = Новый СписокЗначений();
		СписокКнопокДиалога.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Да, отключить'")); 
		СписокКнопокДиалога.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена'"));
		
		ПоказатьВопрос(ПродолжитьЗаписьПослеВопросаОЗапретеВосстанавливатьПароль,
			ТекстВопроса, СписокКнопокДиалога);
		
		Возврат;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовый", Не ЗначениеЗаполнено(Объект.Ссылка));
	
	ИзменитьДанныеВладельца();
	
	Если ПараметрыЗаписи.ЭтоНовый Тогда
		ТекущийОбъект.Владелец = Объект.Владелец;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.ПредставлениеВДокументах) Тогда
		Попытка
			ТекущийОбъект.ПредставлениеВДокументах = Сотрудники.ПредставлениеВДокументахПоФИО(ПолноеИмя);
		Исключение
			ТекущийОбъект.ПредставлениеВДокументах = ПолноеИмя;
		КонецПопытки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.ПредставлениеВПереписке) Тогда
		ТекущийОбъект.ПредставлениеВПереписке = ПолноеИмя;
	КонецЕсли;
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
		
	СистемнаяУчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	АдресПочтыСистемнойУчетнойЗаписи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СистемнаяУчетнаяЗапись, "АдресЭлектроннойПочты");
	
	Если ЗначениеЗаполнено(АдресПочтыСистемнойУчетнойЗаписи) Тогда
		
		Для Каждого Стр Из ТекущийОбъект.КонтактнаяИнформация Цикл
			Если Стр.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
				Если НРег(Стр.АдресЭП) = НРег(АдресПочтыСистемнойУчетнойЗаписи) Тогда
					ВызватьИсключение 
						НСтр("ru = 'Запрещено указывать адрес почты сотрудника, совпадающий с адресом системной учетной записи почты.'");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если НРег(EmailДляВосстановленияПароля) = НРег(АдресПочтыСистемнойУчетнойЗаписи) Тогда
			ВызватьИсключение 
				НСтр("ru = 'Запрещено указывать адрес почты сотрудника, совпадающий с адресом системной учетной записи почты.'");
		КонецЕсли;
			
	КонецЕсли;	
	
	Если ТребуетсяЗаписьПользователяИБ(ЭтотОбъект) Тогда
		
		Если Не ПользовательИБЗапрещеноВосстанавливатьПароль И Не ЗначениеЗаполнено(EmailДляВосстановленияПароля) Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо заполнить ""Email для получения пароля"" '");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , "EmailДляВосстановленияПароля");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		ПользовательИБПоИмени = ПользователиИнформационнойБазы.НайтиПоИмени(ПользовательИБИмя);
		Если ПользовательИБПоИмени <> Неопределено
			И ПользовательИБПоИмени.УникальныйИдентификатор <> ПользовательОбъект.ИдентификаторПользователяИБ Тогда
			
			ТекстСообщения = НСтр("ru = 'Указанное имя для входа уже используется.
				|Укажите другое.'");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , "ПользовательИБИмя");
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
		ОписаниеПользователяИБ = ОписаниеПользователяИБ();
		
		Если ЗначениеЗаполнено(ПользовательОбъект.ИдентификаторПользователяИБ) Тогда
			ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор", ПользовательОбъект.ИдентификаторПользователяИБ);
		КонецЕсли;
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		ОписаниеПользователяИБ.Вставить("АдресЭлектроннойПочты", EmailДляВосстановленияПароля);
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.Пользователи");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Пользователь);
			ЭлементБлокировки.УстановитьЗначение("ИдентификаторПользователяИБ",
				ПользовательОбъект.ИдентификаторПользователяИБ);
			Блокировка.Заблокировать();
			
			ПользовательОбъектИзмененный = РеквизитФормыВЗначение("ПользовательОбъект");
	
			ПользовательОбъектИзмененный.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ",
				ОписаниеПользователяИБ);
			
			Если ПараметрыЗаписи.Свойство("ССозданиемПервогоАдминистратора") Тогда
				ПользовательОбъектИзмененный.ДополнительныеСвойства.Вставить("СозданиеАдминистратора",
					НСтр("ru = 'Первый пользователь информационной базы назначается администратором.'"));
			КонецЕсли;
			
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ПользовательОбъектИзмененный,
				EmailДляВосстановленияПароля,
				Справочники.ВидыКонтактнойИнформации.EmailПользователя,
				ТекущаяДатаСеанса(),
				Истина);
			
			ПользовательОбъектИзмененный.ФизЛицо = Объект.Владелец;
			
			СотрудникиПользователя = Сотрудники.СотрудникиПользователя(ПользовательОбъектИзмененный.Ссылка);
			Если СотрудникиПользователя.Количество() <= 1 Тогда
				ПользовательОбъектИзмененный.Недействителен = Недействителен;
				ПользовательОбъектИзмененный.ПометкаУдаления = Объект.ПометкаУдаления;
			КонецЕсли;

			РегистрыСведений.СведенияОПользователях.УстановитьСведенияОПользователе(ЭтотОбъект, ПользовательОбъектИзмененный);
			ПользовательОбъектИзмененный.Записать();
			РегистрыСведений.СведенияОПользователях.ОбновитьСведенияОПользователе(Пользователь,
				ПользовательОбъектИзмененный);
			ЗначениеВРеквизитФормы(ПользовательОбъектИзмененный, "ПользовательОбъект");
			ПеречитатьДанныеФормы = Истина;
			Пользователь = ПользовательОбъектИзмененный.Ссылка;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
		ЗаполнитьEmailДляВосстановленияПароля();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьСвязьСотрудникаСПользователемПриЗаписи(ТекущийОбъект, ПараметрыЗаписи);
	ЗаписатьОсновногоСотрудникаПриЗаписи(ТекущийОбъект, ПараметрыЗаписи);
	ЗаписатьСледитьЗаСамочувствием(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	СклонениеПредставленийОбъектов.ПриЗаписиФормыОбъектаСклонения(ЭтотОбъект,
		ПолноеИмя, Объект.Владелец, ПараметрыСклонения);
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	
	ПротоколированиеРаботыСотрудников.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовый);
	ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(Объект.Ссылка);
			
	НастроитьПросмотрЭлементовФормы();
	НастроитьРоли();
	
	НастроитьОтображениеГруппПометкаУдаленияНедействителен();
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Обсуждения") Тогда
			МодульОбсуждения = ОбщегоНазначения.ОбщийМодуль("Обсуждения");
			МодульОбсуждения.ОбновитьПользователяВСистемеВзаимодействия(Пользователь);
		КонецЕсли;
	КонецЕсли;
	
	ЗаписатьИндексНумерации();
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовый") И ПараметрыЗаписи.ЭтоНовый = Истина Тогда
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЗакрытьФормуПослеЗаписи(ПараметрыЗаписи);
	
	ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъекта(Объект.Ссылка);
	
	// Уже перечитаны во время обработки оповещения "Запись_Сотрудники"
	ПеречитатьДанныеФормы = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("ПолноеИмя");
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	
	Если ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа()
		И ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(
			ФизическоеЛицо.Ссылка).Изменение Тогда
		
		УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(
			ЭтотОбъект, РеквизитФормыВЗначение("ФизическоеЛицо"), Отказ);
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформацияв
	
	Если ЗначениеЗаполнено(EmailДляВосстановленияПароля) Тогда
		УправлениеКонтактнойИнформацией.ПроверитьКонтактнуюИнформацию(
			EmailДляВосстановленияПароля,
			УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(
				EmailДляВосстановленияПароля, Справочники.ВидыКонтактнойИнформации.EmailПользователя),
			Справочники.ВидыКонтактнойИнформации.EmailПользователя,
			Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,
			"EmailДляВосстановленияПароля",
			"EmailДляВосстановленияПароля",
			"EmailДляВосстановленияПароля");
	КонецЕсли;
	
	Если Не СотрудникиКлиентСервер.ПериодДействияЗаполненКорректно(
		Объект.ДатаНачалаДействия, Объект.ДатаОкончанияДействия) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СотрудникиКлиентСервер.ОписаниеОшибкиНекорректногоЗаполненияПериодаДействия(), , ,
			"Объект.ДатаНачалаДействия", 
			Отказ);
	КонецЕсли;
	
	СсылкаНаСотрудника = Сотрудники.СсылкаНаСотрудникаПоПараметрам(
		Объект.Владелец,
		Объект.Подразделение,
		Объект.Должность,
		Объект.ДатаНачалаДействия,
		Объект.ДатаОкончанияДействия);
	
	Если ЗначениеЗаполнено(СсылкаНаСотрудника) И СсылкаНаСотрудника <> Объект.Ссылка Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СотрудникиКлиентСервер.ОписаниеОшибкиСотрудникНеУникален(),,,
			"ПолноеИмя", Отказ);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()
	
	ПриИзмененииПараметровЭкранаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	Если Настройки["ПоказыватьНедействующихЗамещающих"] <> Неопределено Тогда
		ПоказыватьНедействующихЗамещающих = Настройки["ПоказыватьНедействующихЗамещающих"];
		Элементы.ЗамещающиеИПомощникиКонтекстноеМенюПоказыватьНедействующихЗамещающих.Пометка = ПоказыватьНедействующихЗамещающих;
		НастроитьЗамещающихИПомощников();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ПолноеИмя

&НаКлиенте
Процедура ПолноеИмяПриИзменении(Элемент)
	
	ФизическиеЛицаКлиент.ПодобратьФизическоеЛицоПоПолномуИмени(
		ПолноеИмя,
		ЭтаФорма,
		Новый ОписаниеОповещения("ОбработатьПодборФизическогоЛица", ЭтотОбъект));
	
	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	СклонениеПредставленийОбъектовКлиент.ПросклонятьПредставление(ЭтотОбъект, ПолноеИмя, ПараметрыСклонения);
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	
	ЗаполнитьСотрудникаПоФизлицу();
	
	ПользовательОбъект.Наименование = ПолноеИмя;
	
	Если Не ЗначениеЗаполнено(ПользовательИБИмя) Тогда
		ОбновитьИмяДляВхода(ЭтотОбъект);
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолноеИмяОткрытие(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ФизическоеЛицо.Ссылка) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ФизическоеЛицо.Ссылка);
	Иначе
		МультиязычностьПриОткрытии(ЭтотОбъект, Объект, Элемент, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события ПриОткрытии поля ввода формы для открытия формы ввода значения реквизита на разных языках.
//
// Параметры:
//  Форма   - ФормаКлиентскогоПриложения - форма содержащая мультиязычные реквизиты.
//  Объект  - ДанныеФормыСтруктура:
//   * Ссылка - ЛюбаяСсылка
//  Элемент - ПолеФормы - элемент формы, для которого будет открыта форма ввода на разных языках.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура МультиязычностьПриОткрытии(Форма, Объект, Элемент, СтандартнаяОбработка) 
	
	СтандартнаяОбработка = Ложь;
	
	Если КонфигурацияИспользуетТолькоОдинЯзык Тогда 
		Возврат;
	КонецЕсли;	
	
	//ИмяРеквизита = "ПолноеИмя";
	ИмяРеквизита = "Наименование";
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Объект",          Объект);
	ПараметрыФормы.Вставить("ИмяРеквизита",    ИмяРеквизита);
	ПараметрыФормы.Вставить("ТекущиеЗначение", Элемент.ТекстРедактирования);
	ПараметрыФормы.Вставить("ТолькоПросмотр",  Элемент.ТолькоПросмотр);
	
	Представления = Новый Структура();
	
	Представления.Вставить(ИмяРеквизита, ПолноеИмя);
	Представления.Вставить("НаименованиеЯзык1", ПолноеИмяЯзык1);
	
	ПараметрыФормы.Вставить("ЗначенияРеквизитов", Представления);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма",        Форма);
	ДополнительныеПараметры.Вставить("Объект",       Объект);
	ДополнительныеПараметры.Вставить("ИмяРеквизита", ИмяРеквизита);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаСтрокНаРазныхЯзыках", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.ВводНаРазныхЯзыках", ПараметрыФормы,,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаСтрокНаРазныхЯзыках(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Модифицированность Тогда
		ДополнительныеПараметры.Форма.Модифицированность = Истина;
	КонецЕсли;
	
	Для каждого Представление Из Результат.ЗначенияНаРазныхЯзыках Цикл
		
		Если Представление.КодЯзыка = ТекущийЯзык() Тогда
			ПолноеИмя = Представление.ЗначениеРеквизита;
		Иначе	
			ПолноеИмяЯзык1 = Представление.ЗначениеРеквизита;
		КонецЕсли;	
		
	КонецЦикла;
		
	Если Результат.ЗначенияНаРазныхЯзыках.Количество() = 1 Тогда
		ПолноеИмя = Результат.СтрокаНаТекущемЯзыке;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура СклоненияНажатие(Элемент)
	
	СклонениеПредставленийОбъектовКлиент.ПоказатьСклонение(ЭтотОбъект, ПолноеИмя, ПараметрыСклонения);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ИзменитьФИОНажатие(Элемент)
	
	Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Результат = Ждать ОбщегоНазначенияДокументооборотКлиент.ЗадатьВопросОСохраненииИзмененийАсинх();
		Если Результат = КодВозвратаДиалога.Да Тогда
			Записать();
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	РазблокироватьДанныеФормыДляРедактирования();
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормИзмененияФИО", ЭтотОбъект);
	ФизическиеЛицаКлиент.ОткрытьФормуИзмененияФИО(Объект.Владелец, ОписаниеОповещения, Ложь);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ИсторияФИОНажатие(Элемент)
	
	Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Результат = Ждать ОбщегоНазначенияДокументооборотКлиент.ЗадатьВопросОСохраненииИзмененийАсинх();
		Если Результат = КодВозвратаДиалога.Да Тогда
			Записать();
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	РазблокироватьДанныеФормыДляРедактирования();
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормИзмененияФИО", ЭтотОбъект);
	ФизическиеЛицаКлиент.ОткрытьИсториюФИОФизЛица(Объект.Владелец, ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область Фотография

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; 
	Если Не ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
		ДобавитьИзображениеНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКартинкаПоУмолчаниюНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
		ДобавитьИзображениеНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСтраницыАутентификации

&НаКлиенте
Процедура ПотребоватьСменуПароляПриВходеРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("ОбщаяФорма.НастройкиВходаПользователей", , ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБАутентификацияСтандартнаяПриИзменении(Элемент)

	АутентификацияПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБАутентификацияOpenIDПриИзменении(Элемент)
	
	АутентификацияПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБАутентификацияOpenIDConnectПриИзменении(Элемент)
	
	АутентификацияПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБАутентификацияТокеномДоступаПриИзменении(Элемент)

	АутентификацияПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБАутентификацияОСПриИзменении(Элемент)

	АутентификацияПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБПользовательОСПриИзменении(Элемент)
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБПользовательОСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	#Если НЕ ВебКлиент И НЕ МобильныйКлиент Тогда
		ОткрытьФорму("Справочник.Пользователи.Форма.ВыборПользователяОперационнойСистемы", , Элемент);
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБЯзыкПриИзменении(Элемент)
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
	УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБРежимЗапускаПриИзменении(Элемент)
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБРежимЗапускаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВходВПрограммуРазрешенПриИзменении(Элемент)
	
	Элементы.ГруппаИзменитьОграничение.Видимость = ВходВПрограммуРазрешен;
	Элементы.ПользовательНедействителенНадпись.Видимость = Не ВходВПрограммуРазрешен;
	
	Если ПользовательОбъект.ПометкаУдаления И ВходВПрограммуРазрешен Тогда
		ВходВПрограммуРазрешен = Ложь;
		ПоказатьПредупреждение(, НСтр("ru = 'Чтобы разрешить вход в программу, требуется снять
			|пометку на удаление с этого сотрудника.'"));
		Возврат;
	КонецЕсли;
	
	Недействителен = Не ВходВПрограммуРазрешен;
	
	Если Не ВходВПрограммуРазрешен
		И Не ПользовательИБАутентификацияOpenID
		И Не ПользовательИБАутентификацияОС
		И Не ПользовательИБАутентификацияСтандартнаяЗначениеПрямогоИзменения
		И Не ПользовательИБАутентификацияТокеномДоступа
		И Не ПользовательИБАутентификацияOpenIDConnect
		И ПользовательИБАутентификацияСтандартная Тогда
		
		ПользовательИБАутентификацияСтандартная = Ложь;
	КонецЕсли;
	
	Если ВходВПрограммуРазрешен
		И Не ПользовательИБАутентификацияOpenID
		И Не ПользовательИБАутентификацияСтандартная
		И Не ПользовательИБАутентификацияОС
		И Не ПользовательИБАутентификацияТокеномДоступа
		И Не ПользовательИБАутентификацияOpenIDConnect Тогда
	
		ПользовательИБАутентификацияСтандартная = Истина;
	КонецЕсли;
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
	УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
	
	Если Не УровеньДоступа.ИзменениеРазрешенияНаВход
		И Не ВходВПрограммуРазрешен Тогда
		
		ПоказатьПредупреждение(,
			НСтр("ru = 'После записи вход в программу сможет разрешить только администратор.'"));
	КонецЕсли;
	
	ВходВПрограммуРазрешенЗначениеПрямогоИзменения = ВходВПрограммуРазрешен;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСтраницыРоли

&НаКлиенте
Процедура РолиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)

	Если Параметры.Ключ.Пустая() Тогда
		
		Отказ = Истина;
		ОповещениеПродолжитьДобавлениеРоли = Новый ОписаниеОповещения("РолиПередНачаломДобавленияПродолжение",
			ЭтаФорма);
		
		ТекстВопроса = НСтр("ru = 'Для назначения роли необходимо записать объект.
			|Записать?'");
		
		ОбщегоНазначенияДокументооборотКлиент.ЗаписатьОбъектЕслиНовыйИВыполнитьДействие(ЭтаФорма,
			"Объект",
			ТекстВопроса,
			ОповещениеПродолжитьДобавлениеРоли);
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РолиПередНачаломДобавленияПродолжение(Результат, ДополнительныеПараметры) Экспорт

	ЗначенияЗаполнения = Новый Структура("Исполнитель", Объект.Ссылка);
	
	ОткрытьФорму("РегистрСведений.ИсполнителиРолей.ФормаЗаписи",
		Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения));

КонецПроцедуры

&НаКлиенте
Процедура РолиПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущаяСтрока = Элементы.Роли.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущаяСтрока);
	ПараметрыФормы.Вставить("ИсполнительНедоступенДляИзменения", Истина);
	
	ОткрытьФорму("РегистрСведений.ИсполнителиРолей.ФормаЗаписи", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСтраницыЗамещающиеИПомощники

&НаСервереБезКонтекста
Процедура ЗамещающиеИПомощникиПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Для Каждого КлючИЗначение Из Строки Цикл
		ДанныеСтроки = КлючИЗначение.Значение.Данные;
		Если ДанныеСтроки.Свойство("ВидЗамещенияСтрокой") Тогда
			ДанныеСтроки.ВидЗамещенияСтрокой =
				?(ДанныеСтроки.ВидЗамещения = Перечисления.ВидыЗамещения.Замещающие,
					НСтр("ru = 'Замещающий'"), НСтр("ru = 'Помощник'"));
		КонецЕсли;
		Если ДанныеСтроки.Свойство("ПериодСтрокой") Тогда
			ДанныеСтроки.ПериодСтрокой = ЗамещающиеИПомощники.ПериодЗамещенияСтрокой(
				ДанныеСтроки.ДатаНачала, ДанныеСтроки.ДатаОкончания);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ЗаполнитьРуководителя(ЭтаФорма);
	ЗаполнитьРангСотрудника();
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойСотрудникПриИзменении(Элемент)
	
	ЗаписатьОсновногоСотрудникаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьСотрудникаНажатие(Элемент)
	
	РаботаСРабочимКалендаремКлиент.ПоказатьКалендарьФизЛица(ФизическоеЛицо.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Или ЭтоСозданиеДокумента Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ЗадатьВопросОСменеПодразделенияДолжность(ВыбранноеЗначение, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Или ЭтоСозданиеДокумента Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ЗадатьВопросОСменеПодразделенияДолжность(ВыбранноеЗначение, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область Фотография

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображение(Команда)
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	ОчиститьИзображениеСервер();
	ЕстьКартинка = Ложь;
	Элементы.Фотография.Гиперссылка = Не ЕстьКартинка;
	Элементы.АдресКартинкиКонтекстноеМенюДобавитьИзображение.Доступность = Не ЕстьКартинка;
	Элементы.АдресКартинкиКонтекстноеМенюОчиститьИзображение.Доступность = ЕстьКартинка;
	Прочитать();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Записать(Новый Структура("Закрыть", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыИПолномочия(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Субъект", Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.ГруппыИПолномочия", ПараметрыФормы, ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗамещающего(Команда)
	
	ВидЗамещения = ПредопределенноеЗначение("Перечисление.ВидыЗамещения.Замещающие");
	
	Если Параметры.Ключ.Пустая() Тогда
	
		ОповещениеСоздатьПомощникаИлиЗамещающего = Новый ОписаниеОповещения(
			"СоздатьПомощникаИлиЗамещающегоПослеДиалога",
			ЭтаФорма,
			ВидЗамещения);
	
		ТекстВопроса = НСтр("ru = 'Для добавления замещающего необходимо записать объект
			|Записать?'");
		
		ОбщегоНазначенияДокументооборотКлиент.ЗаписатьОбъектЕслиНовыйИВыполнитьДействие(ЭтаФорма,
			"Объект",
			ТекстВопроса,
			ОповещениеСоздатьПомощникаИлиЗамещающего);
	
		Возврат;
	
	КонецЕсли;

	СоздатьПомощникаИлиЗамещающего(ВидЗамещения);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьПомощника(Команда)
	
	ВидЗамещения = ПредопределенноеЗначение("Перечисление.ВидыЗамещения.Помощники");
	
	Если Параметры.Ключ.Пустая() Тогда
	
		ОповещениеСоздатьПомощникаИлиЗамещающего = Новый ОписаниеОповещения(
			"СоздатьПомощникаИлиЗамещающегоПослеДиалога",
			ЭтаФорма,
			ВидЗамещения);
	
		ТекстВопроса = НСтр("ru = 'Для добавления помощника необходимо записать объект
			|Записать?'");
		
		ОбщегоНазначенияДокументооборотКлиент.ЗаписатьОбъектЕслиНовыйИВыполнитьДействие(ЭтаФорма,
			"Объект",
			ТекстВопроса,
			ОповещениеСоздатьПомощникаИлиЗамещающего);
	
		Возврат;
	
	КонецЕсли;
	
	СоздатьПомощникаИлиЗамещающего(ВидЗамещения);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьПомощникаИлиЗамещающегоПослеДиалога(Результат, ВидЗамещения) Экспорт
	
	СоздатьПомощникаИлиЗамещающего(ВидЗамещения);

КонецПроцедуры

&НаКлиенте
Процедура РазрешитьВходВПрограмму(Команда)
	
	ПараметрыАутентификацииОтсутствуют = Ложь;
	Элементы.ГруппаВходНеРазрешен.Видимость = Ложь;
	Элементы.ГруппаПараметрыАутентификации.Видимость = Истина;
	Элементы.ПользовательНедействителенНадпись.Видимость = Ложь;

	Недействителен = Ложь;
	РазрешитьВходВПрограммуНаСервере();
	ВходВПрограммуРазрешен = Истина;
	
	Если Не ЗначениеЗаполнено(ПользовательОбъект.Ссылка) Тогда
		ПользовательОбъект.Наименование = ПолноеИмя;
		ОбновитьИмяДляВхода(ЭтотОбъект);
	КонецЕсли;
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьПомощникаИлиЗамещающего(ВидЗамещения)

	ЗначенияЗаполнения = Новый Структура("ВидЗамещения, Сотрудник", ВидЗамещения, Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Справочник.ЗамещающиеИПомощники.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПисьмоНаEmailДляВосстановленияПароля(Команда)
	
	УправлениеКонтактнойИнформациейКлиент.СоздатьЭлектронноеПисьмо(
		"", EmailДляВосстановленияПароля,
		ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"),
		Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьПароль(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВернутьПарольБезУстановки", Истина);
	ДополнительныеПараметры.Вставить("СтарыйПароль", ПользовательИБСтарыйПароль);
	ДополнительныеПараметры.Вставить("ИмяДляВхода", ПользовательИБИмя);
	
	ПользователиСлужебныйКлиент.ОткрытьФормуСменыПароля(Пользователь, Новый ОписаниеОповещения(
		"СменитьПарольПослеПолученияПароля", ЭтотОбъект), ДополнительныеПараметры);

КонецПроцедуры


&НаКлиенте
Процедура ОтсутствиеОписаниеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Отсутствие);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОграничениеНаВходВПрограмму(Команда)
	
	ОткрытьФорму("Справочник.Пользователи.Форма.ОграничениеНаВходВПрограмму",, ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ИзменитьОграничениеНаВходВПрограммуЗавершение", ЭтотОбъект));
	
КонецПроцедуры

//Продолжение процедуры ИзменитьОграничениеНаВходВПрограмму.
&НаКлиенте
Процедура ИзменитьОграничениеНаВходВПрограммуЗавершение(Результат, Контекст) Экспорт
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Асинх Процедура ОчиститьИсториюВыбораПользователя(Команда)
	
	ТекстВопроса = НСтр("ru = 'История выбора пользователя будет очищена.
		|Он увидит изменения только после перезагрузки программы.
		|Продолжить?'");
	
	ОчиститьИсторию = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
	Если ОчиститьИсторию = КодВозвратаДиалога.Да Тогда
		
		Пользователь = СотрудникиВызовСервера.ЛюбойПользовательСотрудника(Объект.Ссылка);
		ИсторияВыбораВызовСервера.ОчиститьИсториюВыбораПользователя(Пользователь); 
		ПоказатьОповещениеПользователя(НСтр("ru = 'История выбора очищена'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьНедействующихЗамещающих(Команда)
	ПоказыватьНедействующихЗамещающих = Не ПоказыватьНедействующихЗамещающих;
	Элементы.ЗамещающиеИПомощникиКонтекстноеМенюПоказыватьНедействующихЗамещающих.Пометка = ПоказыватьНедействующихЗамещающих;
	НастроитьЗамещающихИПомощников();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПолноеИмя

&НаСервере
Процедура НастроитьПросмотрЭлементовФормы()
	
	Элементы.ФормаГруппыИПолномочия.Видимость =
		ПравоДоступа("Просмотр", Метаданные.ОбщиеФормы.ГруппыИПолномочия);
		
	Элементы.ПолноеИмя.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Ссылка);
	Элементы.EmailДляВосстановленияПароля.ТолькоПросмотр = ТолькоПросмотр;

КонецПроцедуры

#КонецОбласти

#Область ФизическоеЛицо

&НаКлиенте
Процедура ОбработатьПодборФизическогоЛица(НовоеФизическоеЛицо, ДопПараметры) Экспорт
	
	ОбработатьПодборФизическогоЛицаНаСервере(НовоеФизическоеЛицо);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодборФизическогоЛицаНаСервере(НовоеФизическоеЛицо)
	
	Объект.Владелец = НовоеФизическоеЛицо;
	
	ЗаполнитьСотрудникаПоФизлицу();
	ПоказатьФотоПользователя(ФизическоеЛицо.Ссылка, УникальныйИдентификатор, Фотография);
	ЗаполнитьОсновнойСотрудникПриСменеФизЛица();
	ПодобратьПользователяПоФизЛицу();
	ЗаполнитьEmailДляВосстановленияПароля();
	ПрочитатьПользователяИБ();
	
	НастроитьОтображениеПараметровАутентификации();
	
КонецПроцедуры

//Служебная процедура, читающая данные владельца в реквизиты формы
//
&НаСервере
Процедура ЗаполнитьСотрудникаПоФизлицу()

	Если Не ЗначениеЗаполнено(Объект.Владелец) Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьПравоЧтенияФизлица = 
		Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа()
		Или ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(Объект.Владелец).Чтение;
	
	Если ЕстьПравоЧтенияФизлица Тогда
		ЗначениеВРеквизитФормы(Объект.Владелец.ПолучитьОбъект(), "ФизическоеЛицо");
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ФизическоеЛицо, "ДатаРождения, Пол");
		ПолноеИмя = ФизическоеЛицо.Наименование;
		
		УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(
			ЭтотОбъект, ФизическоеЛицо, "ГруппаЛичнаяКонтактнаяИнформация");
	Иначе
		РеквизитыФизЛица =
			ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
				Объект.Владелец, "Наименование, Пол");
		
		ПолноеИмя = РеквизитыФизЛица.Наименование;
		Пол = РеквизитыФизЛица.Пол;
	КонецЕсли;
	
	УменьшитьШиринуПолейКонтактнойИнформации(ЭтаФорма);

КонецПроцедуры

//Служебная процедура, читающая/ записывающая данные владельца в реквизиты формы
//
&НаСервере
Процедура ИзменитьДанныеВладельца(АдресВременногоХранилищаФайла = Неопределено)
	
	СсылкаНаФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	Если ЗначениеЗаполнено(ФизическоеЛицо.Ссылка) Тогда
		СсылкаНаФизЛицо = ФизическоеЛицо.Ссылка;
	ИначеЕсли ЗначениеЗаполнено(Объект.Владелец) Тогда
		СсылкаНаФизЛицо = Объект.Владелец;
	КонецЕсли;
	Если ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа()
		И Не ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(СсылкаНаФизЛицо).Чтение Тогда
		
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ЭтотОбъект.ФизическоеЛицо);
	
	ФизическоеЛицоОбъект = РеквизитФормыВЗначение("ФизическоеЛицо");
	
	ЭтоНовоеФизЛицо = Не ЗначениеЗаполнено(ФизическоеЛицоОбъект.Ссылка);
	
	Если Не ЭтоНовоеФизЛицо Тогда
		ЗаблокироватьДанныеДляРедактирования(ФизическоеЛицоОбъект.Ссылка, , УникальныйИдентификатор);
	КонецЕсли;
	
	СтруктураДанных = ФизическоеЛицоОбъект.СтруктураДанныхДляЗаполнения();
	ЗаполнитьЗначенияСвойств(СтруктураДанных, ФизическоеЛицоОбъект);
	СтруктураДанных.ДатаРождения = ДатаРождения;
	СтруктураДанных.Пол = Пол;
	СтруктураДанных.ФИО = ПолноеИмя;
	
	ФизическоеЛицоОбъект.Заполнить(СтруктураДанных);
		
	Если ЗначениеЗаполнено(АдресВременногоХранилищаФайла) Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаФайла);
		ФизическоеЛицоОбъект.ФайлФотографии = Новый ХранилищеЗначения(ДвоичныеДанные);
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(СсылкаНаФизЛицо) И Не КонфигурацияИспользуетТолькоОдинЯзык Тогда
		
		Если Не ЗначениеЗаполнено(ПолноеИмяЯзык1) Тогда
			ПолноеИмяЯзык1 = ПолноеИмя;
		КонецЕсли;
		
		Если ТекущийЯзык().КодЯзыка = "ru" Тогда
			ФизическоеЛицоОбъект.Наименование = ПолноеИмя;
			ФизическоеЛицоОбъект.НаименованиеЯзык1 = ПолноеИмяЯзык1;
		Иначе	
			ФизическоеЛицоОбъект.Наименование = ПолноеИмяЯзык1;
			ФизическоеЛицоОбъект.НаименованиеЯзык1 = ПолноеИмя;
		КонецЕсли;		
	КонецЕсли;
		
	ФизическоеЛицоОбъект.Записать();
	
	Если Не ЭтоНовоеФизЛицо Тогда
		РазблокироватьДанныеДляРедактирования(ФизическоеЛицоОбъект.Ссылка, УникальныйИдентификатор);
	КонецЕсли;
	
	Объект.Владелец = ФизическоеЛицоОбъект.Ссылка;

	ЗначениеВРеквизитФормы(ФизическоеЛицоОбъект, "ФизическоеЛицо");

	ПеречитатьДанныеФормы = Истина;

КонецПроцедуры

#КонецОбласти

#Область Фотография

&НаСервере
Процедура НастроитьПоказФотографии()
	
	ОтображатьФотографииПерсональнаяНастройка =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиПрограммы",
		"ОтображатьФотографииПерсональнаяНастройка",
		Истина);
	ОтображатьФотографииОбщаяНастройка = ПолучитьФункциональнуюОпцию("ОтображатьФотографииОбщаяНастройка");
	ПолучатьФотографии = Истина;
	
	Если Не ОтображатьФотографииОбщаяНастройка 
		Или Не ОтображатьФотографииПерсональнаяНастройка
		Или ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		ПолучатьФотографии = Ложь;
		Элементы.ГруппаСтраницыФотографии.Видимость = Ложь;
	КонецЕсли;
	Если ПолучатьФотографии Тогда
		ПоказатьФотоПользователя(Объект.Ссылка, УникальныйИдентификатор, Фотография);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьФотоПользователя(Контакт, УникальныйИдентификатор, Фотография)
	
	// фото пользователя
	Если ЭтоАдресВременногоХранилища(Фотография) Тогда
		УдалитьИзВременногоХранилища(Фотография);
	КонецЕсли;	
	
	Фотография = "";
	Если ЗначениеЗаполнено(Контакт) 
		И ТипЗнч(Контакт) <> Тип("СправочникСсылка.РолиИсполнителей") Тогда
		
		ЕстьКартинка = Ложь;
		Фотография = РаботаСФотографиями.ПолучитьАдресФото(Контакт, УникальныйИдентификатор, ЕстьКартинка);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Фотография) Тогда
		Фотография = "";
		ЭтаФорма.Элементы.ГруппаСтраницыФотографии.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаКартинкаПоУмолчанию;
		ЕстьКартинка = Ложь;
	Иначе	
		ЭтаФорма.Элементы.ГруппаСтраницыФотографии.ТекущаяСтраница = ЭтаФорма.Элементы.СтраницаФотография;
		ЕстьКартинка = Истина;
	КонецЕсли;
	
	Элементы.Фотография.Гиперссылка = Не ЕстьКартинка;
	
	Элементы.АдресКартинкиКонтекстноеМенюДобавитьИзображение.Доступность =
		ЗначениеЗаполнено(Объект.Ссылка) И Не ЕстьКартинка;
		
	Элементы.ДекорацияКартинкаПоУмолчаниюКонтекстноеМенюДобавитьИзображение.Доступность = 
		ЗначениеЗаполнено(Объект.Ссылка) И Не ЕстьКартинка;
		
	Элементы.АдресКартинкиКонтекстноеМенюОчиститьИзображение.Доступность = 
		ЗначениеЗаполнено(Объект.Ссылка) И ЕстьКартинка;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	ПараметрыОписания = Новый Структура(
		"АдресВременногоХранилищаФайла", 
		"");
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьИзображениеНаКлиентеЗавершение", 
		ЭтотОбъект,
		ПараметрыОписания);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru = 'Для выбора изображения необходимо записать объект. Записать?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Записать();
	Иначе 
		Возврат;
	КонецЕсли;
	
	Если Не ЕстьКартинка И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВыборКартинкиПродолжение",
			ЭтотОбъект,
			ДополнительныеПараметры);

		ФайловыеФункцииКлиент.ВыбратьКартинкуИПоместитьВХранилище(
			ОписаниеОповещения, УникальныйИдентификатор,, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборКартинкиПродолжение(Результат, Параметры) Экспорт 

	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьИзображение(Параметры.АдресВременногоХранилищаФайла);
	
	Прочитать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзображение(АдресВременногоХранилищаФайла)

	ИзменитьДанныеВладельца(АдресВременногоХранилищаФайла);	

КонецПроцедуры	

&НаСервере
Процедура ОчиститьИзображениеСервер()
	
	ФизическоеЛицоОбъект = РеквизитФормыВЗначение("ФизическоеЛицо");
	 
	ЗаблокироватьДанныеДляРедактирования(ФизическоеЛицоОбъект.Ссылка, , УникальныйИдентификатор);
	ФизическоеЛицоОбъект.ФайлФотографии = Новый ХранилищеЗначения(Неопределено);
	ФизическоеЛицоОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(ФизическоеЛицоОбъект.Ссылка, УникальныйИдентификатор);
	
	ЗначениеВРеквизитФормы(ФизическоеЛицоОбъект, "ФизическоеЛицо");

	ПеречитатьДанныеФормы = Истина;

КонецПроцедуры	

#КонецОбласти

#Область РуководительПодразделения

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРуководителя(Форма)
	
	Форма.Руководитель = 
		ДелопроизводствоКлиентСервер.ПолучитьНепосредственногоРуководителя(
		Форма.Объект.Подразделение, Форма.Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОсновнойСотрудник

&НаСервере
Процедура ЗаполнитьОсновнойСотрудникПриЧтении(ТекущийОбъект)
	
	ОсновнойСотрудник = 
		Сотрудники.ЭтоОсновнойСотрудникФизЛица(ТекущийОбъект.Владелец, ТекущийОбъект.Ссылка);
	
	ПредыдущееЗначениеОсновнойСотрудник = ОсновнойСотрудник;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОсновнойСотрудникПриСменеФизЛица()
	
	Если Не ЗначениеЗаполнено(ФизическоеЛицо.Ссылка) Тогда
		ОсновнойСотрудник = Истина;
		ПредыдущееЗначениеОсновнойСотрудник = ОсновнойСотрудник;
		Возврат;
	КонецЕсли;
	
	ОсновнойСотрудник = Не ЗначениеЗаполнено(Сотрудники.ОсновнойСотрудникФизЛица(ФизическоеЛицо.Ссылка));
	
	ПредыдущееЗначениеОсновнойСотрудник = ОсновнойСотрудник;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьОсновногоСотрудника(ФизЛицо, Сотрудник, Основной)
	
	Если Не Основной Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.ОсновныеСотрудники.УстановитьОсновногоСотрудника(
		ФизЛицо, Сотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьОсновногоСотрудникаПриИзменении()
	
	Если ПредыдущееЗначениеОсновнойСотрудник И Не ОсновнойСотрудник Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'Для снятия отметки зайдите в карточку другого сотрудника человека и отметьте его основным.'"));
		ОсновнойСотрудник = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Попытка
			ЗаписатьОсновногоСотрудника(Объект.Владелец, Объект.Ссылка, ОсновнойСотрудник);
		Исключение
			ОсновнойСотрудник = Ложь;
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	ПредыдущееЗначениеОсновнойСотрудник = ОсновнойСотрудник;
	
	Прочитать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОсновногоСотрудникаПриЗаписи(ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не ПараметрыЗаписи.Свойство("ЭтоНовый")
		Или Не ПараметрыЗаписи.ЭтоНовый Тогда
		
		Возврат;
	КонецЕсли;
	
	Попытка
		ЗаписатьОсновногоСотрудника(ТекущийОбъект.Владелец, ТекущийОбъект.Ссылка, ОсновнойСотрудник);
	Исключение
		ОсновнойСотрудник = Ложь;
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьДоступностьОсновнойСотрудник()
	
	Элементы.ОсновнойСотрудник.ТолькоПросмотр = ТолькоПросмотр;
	
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформация

&НаСервере
Процедура НастроитьРабочуюКонтактнуюИнформацию();
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаКонтактнаяИнформация");
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	РабочаяКонтактнаяИнформацияНастроена = Истина;
	РазместитьEmailДляПолученияПароляНадSkypеПриНеобходимости();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЛичнуюКонтактнуюИнформацию()
	
	Если ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа()
		И Не ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(Объект.Владелец).Чтение Тогда
			
		Возврат;
	КонецЕсли;
	
	//СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(
		ЭтаФорма, ФизическоеЛицо, "ГруппаЛичнаяКонтактнаяИнформация", ПоложениеЗаголовкаЭлементаФормы.Лево);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаОписанияКИ(Форма, ВидКИ = Неопределено, ИмяЭлемента = Неопределено)
	
	СтрокаОписания = Неопределено;
	
	Если ЗначениеЗаполнено(ВидКИ) Тогда
		// Если заполнен, то по виду. Если нет, то по имени элемента.
		Отбор = Новый Структура("Вид", ВидКИ);
	Иначе
		Отбор = Новый Структура("ИмяРеквизита", ИмяЭлемента);
	КонецЕсли;
	
	НайденныеСтроки = УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеКонтактнойИнформацииНаФорме(
		Форма).НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаОписания = НайденныеСтроки[0];
	КонецЕсли;
	
	Возврат СтрокаОписания;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапомнитьЗначениеEmail(Форма, Знач ИмяРеквизитаEmail = Неопределено)
	
	Если Не ЗначениеЗаполнено(ИмяРеквизитаEmail) Тогда
		СтрокаОписанияEmail = СтрокаОписанияКИ(Форма,
			ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailСотрудника"));
	
		Если СтрокаОписанияEmail <> Неопределено Тогда
			ИмяРеквизитаEmail = СтрокаОписанияEmail.ИмяРеквизита;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяРеквизитаEmail) Тогда
		Форма.EmailДоИзменения = Форма[ИмяРеквизитаEmail];
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
	
	Если СтрНачинаетсяС(Элемент.Имя, "Комментарий") Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение Email для восстановления пароля.
	СтрокаОписанияРеквизита = СтрокаОписанияКИ(ЭтотОбъект,, Элемент.Имя);
	Если СтрокаОписанияРеквизита.Вид = ПредопределенноеЗначение(
			"Справочник.ВидыКонтактнойИнформации.EmailСотрудника") Тогда
		Если EmailДляВосстановленияПароля = EmailДоИзменения Тогда
			EmailДляВосстановленияПароля = ЭтотОбъект[Элемент.Имя];
		КонецЕсли;
		ЗапомнитьЗначениеEmail(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	
	УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт
	
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ИндексНумерации

&НаСервере
Процедура ПоказатьИндексНумерации()
	
	Нумерация.ПоказатьИндексНумерации(ЭтотОбъект);
		
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИндексНумерации()
	
	ИндексНумерации = СокрЛП(ИндексНумерации);
	Если ИндексНумерации <> ИндексНумерацииПриОткрытии Тогда 
		Если ЗначениеЗаполнено(ИндексНумерации) Тогда 
			РегистрыСведений.ИндексыНумерации.ЗаписатьИндексНумерации(Объект.Ссылка, ИндексНумерации);
		Иначе 
			РегистрыСведений.ИндексыНумерации.УдалитьИндексНумерации(Объект.Ссылка);
		КонецЕсли;
		
		ИндексНумерацииПриОткрытии = ИндексНумерации;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СамочувствиеСотрудников

&НаСервере
Процедура НастроитьОтображениеСамочувствияСотрудника()
	
	УчетСамочувствияСотрудников = ПолучитьФункциональнуюОпцию("УчетСамочувствияСотрудников");
	
	Если УчетСамочувствияСотрудников Тогда		
		Элементы.СледитьЗаСамочувствием.Доступность = Объект.Действует;
	Иначе 
		Элементы.СледитьЗаСамочувствием.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСледитьЗаСамочувствием()
	
	Если Объект.Ссылка.Пустая() Тогда 
		СледитьЗаСамочувствием = Истина;
	Иначе 
		СледитьЗаСамочувствием = 
			РегистрыСведений.СотрудникиДляКонтроляСамочувствия.СотрудникНаКонтроле(
				Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСледитьЗаСамочувствием(ТекущийОбъект)

	Если УчетСамочувствияСотрудников Тогда 
		Если СледитьЗаСамочувствием Тогда 
			РегистрыСведений.СотрудникиДляКонтроляСамочувствия.Добавить(ТекущийОбъект.Ссылка);
		Иначе 
			РегистрыСведений.СотрудникиДляКонтроляСамочувствия.УдалитьЗапись(ТекущийОбъект.Ссылка)
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сотрудник

&НаКлиенте
Процедура ЗакрытьФормуПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРангСотрудника()
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Ранг = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Подразделение, "Ранг");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НастроитьРоли()
	
	Роли.Отбор.Элементы.Очистить();
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Роли, "Исполнитель", Объект.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос(
		"Выбрать
		|	Количество(1) КАК КолЗаписей
		|ИЗ
		|	РегистрСведений.ИсполнителиРолей
		|ГДЕ
		|	Исполнитель = &Сотрудник");
	Запрос.УстановитьПараметр("Сотрудник", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоРолей = Выборка.КолЗаписей;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЗамещающихИПомощников()
	
	СписокЗамещающиеИПомощники.Отбор.Элементы.Очистить();
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокЗамещающиеИПомощники, "Сотрудник", Объект.Ссылка);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокЗамещающиеИПомощники, "Действует", Истина);
	ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(СписокЗамещающиеИПомощники.Отбор,
	 "Действует", , , , Не ПоказыватьНедействующихЗамещающих);
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос(СписокЗамещающиеИПомощники.ТекстЗапроса + "
		|ГДЕ Сотрудник = &Сотрудник И (Действует ИЛИ &ПоказыватьНедействующих)");
	Запрос.УстановитьПараметр("Сотрудник", Объект.Ссылка);
	Запрос.УстановитьПараметр("ПоказыватьНедействующих", ПоказыватьНедействующихЗамещающих);
	Запрос.УстановитьПараметр("СтрокаПоВсем", НСтр("ru = 'По всем'"));
	Запрос.УстановитьПараметр("СтрокаВыборочно", НСтр("ru = 'Выборочно'"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоЗамещающихИПомощников = Выборка.Количество();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСвязьСотрудникаСПользователемПриЗаписи(ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не ПараметрыЗаписи.Свойство("ЭтоНовый") И ПараметрыЗаписи.ЭтоНовый = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьСвязьСотрудникаСПользователем(ТекущийОбъект.Ссылка, Пользователь);
	
КонецПроцедуры

#КонецОбласти

#Область Пользователь

&НаСервере
Процедура ЗаполнитьEmailДляВосстановленияПароля()
	
	EmailДляВосстановленияПароля = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
		Пользователь, Справочники.ВидыКонтактнойИнформации.EmailПользователя,, ТекущаяДатаСеанса(),
		Новый Структура("ТолькоПервая", Истина));
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьПользователяПоФизЛицу()
	
	Пользователь = Справочники.Пользователи.ПустаяСсылка();
	УФизЛицаЕстьПользователи = Ложь;
	
	Если Не ЗначениеЗаполнено(ФизическоеЛицо.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ПользователиФизЛица = ПользователиФизЛица(ФизическоеЛицо.Ссылка);
	
	КоличествоПользователей = ПользователиФизЛица.Количество();
	
	Если КоличествоПользователей = 1 Тогда
		Пользователь = ПользователиФизЛица[0];
		ЗначениеВРеквизитФормы(Пользователь.ПолучитьОбъект(), "ПользовательОбъект")
	КонецЕсли;
	
	УФизЛицаЕстьПользователи = (КоличествоПользователей > 0);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПользователяПоСотруднику(ТекущийОбъект)
	
	Пользователь = Справочники.Пользователи.ПустаяСсылка();
	Если Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ПользователиСотрудника = Сотрудники.ПользователиСотрудника(ТекущийОбъект.Ссылка);
	Если ПользователиСотрудника.Количество() > 0 Тогда
		Пользователь = ПользователиСотрудника[0];
		ЗначениеВРеквизитФормы(Пользователь.ПолучитьОбъект(), "ПользовательОбъект"); 
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУФизЛицаЕстьПользователи(ТекущийОбъект)
	
	УФизЛицаЕстьПользователи = Ложь;
	Если Не ЗначениеЗаполнено(ТекущийОбъект.Владелец) Тогда
		Возврат;
	КонецЕсли;
	
	УФизЛицаЕстьПользователи =
		ПользователиФизЛица(ТекущийОбъект.Владелец).Количество() > 0;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьСвязьСотрудникаСПользователем(Сотрудник, Пользователь)
	
	Если Не ЗначениеЗаполнено(Пользователь)
		Или Не ЗначениеЗаполнено(Сотрудник) Тогда
		
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.СотрудникиПользователей.ДобавитьЗапись(
		Пользователь, Сотрудник);
	
	Справочники.ШаблоныДвухфакторнойАутентификации.ПриИзмененииСоставаКонтейнеров(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПользователиФизЛица(ФизЛицо)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ФизЛицо = &ФизЛицо";
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Продолжение процедуры СменитьПароль.
&НаКлиенте
Процедура СменитьПарольПослеПолученияПароля(Результат, Контекст) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ПользовательИБПароль       = Результат.НовыйПароль;
	ПользовательИБСтарыйПароль = Результат.СтарыйПароль;
	
	Если Результат.СтарыйПароль <> Неопределено Тогда
		ПарольПользователяСервиса = Результат.СтарыйПароль;
	КонецЕсли;
	УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
	
	УстановитьНаличиеПароля(ЭтотОбъект, ЗначениеЗаполнено(ПользовательИБПароль),
		ПользователиКлиент.АвторизованныйПользователь());
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНаличиеПароля(Форма, ПарольУстановлен, АвторизованныйПользователь)
	
	ПользователиСлужебныйКлиентСервер.УстановитьНаличиеПароля(Форма, ПарольУстановлен, АвторизованныйПользователь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНеобходимостьСинхронизацииССервисом(Форма)
	
	Форма.ТребуетсяСинхронизацияССервисом = Форма.ВходВПрограммуРазрешен;
	
КонецПроцедуры

// Начальное заполнение, проверка заполнения, доступность свойств.
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьСвойств(Форма)
	
	Элементы       = Форма.Элементы;
	Объект         = Форма.ПользовательОбъект;
	УровеньДоступа = Форма.УровеньДоступа;
	ДействияСПользователемСервиса = Форма.ДействияСПользователемСервиса;
	
	// Настройка возможности изменения.
	Элементы.ВходВПрограммуРазрешен.ТолькоПросмотр =
		Не (  Элементы.СвойстваПользователяИБ.ТолькоПросмотр = Ложь
		    И (    УровеньДоступа.ИзменениеРазрешенияНаВход
		       Или УровеньДоступа.ОтключениеРазрешенияНаВход И Форма.ПриЧтенииВходВПрограммуРазрешен));
	
	Элементы.СменитьПароль.Доступность =
		(    УровеньДоступа.НастройкиДляВхода
		 Или УровеньДоступа.ИзменениеТекущего
		   И Не Форма.ПользовательИБЗапрещеноИзменятьПароль)
		И Не Объект.Служебный;
	
	ОбновитьИмяДляВхода(Форма);
	
	// Настройка доступности связанных элементов.
	Элементы.СвойстваПользователяИБ.Доступность = Не Форма.Недействителен;
	Элементы.ГруппаАутентификацияОсновное.Доступность = Не Форма.Недействителен;
	Элементы.ГруппаИзменитьОграничение.Доступность = Не Форма.Недействителен
	                                               И Не Элементы.ПользовательИБИмя.ТолькоПросмотр;
	
	Элементы.ПараметрыАутентификации1СПредприятия.Доступность = Форма.ПользовательИБАутентификацияСтандартная;
	Элементы.ПользовательИБПользовательОС.Доступность         = Форма.ПользовательИБАутентификацияОС;
	
	Элементы.ПользовательИБЗапрещеноВосстанавливатьПароль.Доступность = Не Форма.ПользовательИБЗапрещеноИзменятьПароль;
	
	// Уточнение настроек в модели сервиса.
	Если ДействияСПользователемСервиса <> Неопределено Тогда
		
		// Доступность редактирования КИ.
		Отбор = Новый Структура("Вид", ВидКонтактнойИнформацииEmailПользователя());
		НайденныеСтроки = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
		Если НайденныеСтроки <> Неопределено Тогда
			ЗаполненEMail = ЗначениеЗаполнено(Форма[НайденныеСтроки[0].ИмяРеквизита]);
		Иначе
			ЗаполненEMail = Ложь;
		КонецЕсли;
		
		Если Объект.Ссылка.Пустая() И ЗаполненEMail Тогда
			МожноИзменятьПароль = Ложь;
		Иначе
			МожноИзменятьПароль = ДействияСПользователемСервиса.ИзменениеПароля;
		КонецЕсли;
		
		Элементы.СменитьПароль.Доступность = Элементы.СменитьПароль.Доступность И МожноИзменятьПароль;
		
		Элементы.ПользовательИБИмя1.ТолькоПросмотр = Элементы.ПользовательИБИмя1.ТолькоПросмотр
			ИЛИ НЕ ДействияСПользователемСервиса.ИзменениеИмени;
		
		Элементы.ПользовательИБИмя2.ТолькоПросмотр = Элементы.ПользовательИБИмя2.ТолькоПросмотр
			ИЛИ НЕ ДействияСПользователемСервиса.ИзменениеИмени;
		
		Элементы.Наименование.ТолькоПросмотр = Элементы.Наименование.ТолькоПросмотр 
			ИЛИ НЕ ДействияСПользователемСервиса.ИзменениеПолногоИмени;
		
		Элементы.ВходВПрограммуРазрешен.Доступность = Элементы.ВходВПрограммуРазрешен.Доступность
			И ДействияСПользователемСервиса.ИзменениеДоступа;
		
		Элементы.Недействителен.Доступность = Элементы.Недействителен.Доступность
			И ДействияСПользователемСервиса.ИзменениеДоступа;
		
		Форма.ЗапретИзмененияАдминистративногоДоступа =
			НЕ ДействияСПользователемСервиса.ИзменениеАдминистративногоДоступа;
	КонецЕсли;
	
	ПользователиСлужебныйКлиентСервер.ОбновитьОграничениеСрокаДействия(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяЗаписьПользователяИБ(Форма, УчитыватьСтандартноеИмя = Истина)
	
	Если Форма.ДействияВФорме.СвойстваПользователяИБ <> "Редактирование" 
		Или Форма.ПараметрыАутентификацииОтсутствуют Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Шаблон = Форма.НачальноеОписаниеПользователяИБ;
	
	ТекущееИмя = "";
	Если Не УчитыватьСтандартноеИмя Тогда
		КраткоеИмя = ПользователиСлужебныйКлиентСервер.ПолучитьКраткоеИмяПользователяИБ(
			Форма.ПользовательОбъект.Наименование);
		
		Если Форма.ПользовательИБИмя = КраткоеИмя Тогда
			ТекущееИмя = КраткоеИмя;
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.ПользовательИБСуществует
	 ИЛИ Форма.ВходВПрограммуРазрешен
	 ИЛИ Форма.ПользовательИБИмя                       <> ТекущееИмя
	 ИЛИ Форма.ПользовательИБАутентификацияСтандартная <> Шаблон.АутентификацияСтандартная
	 ИЛИ Форма.ПользовательИБПоказыватьВСпискеВыбора   <> Шаблон.ПоказыватьВСпискеВыбора
	 ИЛИ Форма.ПользовательИБЗапрещеноИзменятьПароль   <> Шаблон.ЗапрещеноИзменятьПароль
	 ИЛИ Форма.ПользовательИБПароль                    <> Неопределено
	 ИЛИ Форма.ПользовательИБАутентификацияОС          <> Шаблон.АутентификацияОС
	 ИЛИ Форма.ПользовательИБПользовательОС            <> ""
	 ИЛИ Форма.ПользовательИБАутентификацияOpenID      <> Шаблон.АутентификацияOpenID
	 ИЛИ Форма.ПользовательИБРежимЗапуска              <> Шаблон.РежимЗапуска
	 ИЛИ Форма.ПользовательИБЯзык                      <> Шаблон.Язык
	 ИЛИ Форма.ПользовательИБРоли.Количество()         <> 0 Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	// Поддерживается в новых версиях платформы
	Если Шаблон.Свойство("ЗапрещеноВосстанавливатьПароль")
		 И Форма.ПользовательИБЗапрещеноВосстанавливатьПароль <> Шаблон.ЗапрещеноВосстанавливатьПароль Тогда
			Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВидКонтактнойИнформацииEmailПользователя()
	
	ИмяПредопределенногоЗначения = СтрШаблон("%1.%2.%3",
		"Справочник", "ВидыКонтактнойИнформации", "EmailПользователя");
	
	Возврат ПредопределенноеЗначение(ИмяПредопределенногоЗначения);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСотрудникаПоПользователю(Отказ)

	//СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		ДоступноИзменениеПользователей = Истина;
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса") Тогда
			МодульПользователиСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ПользователиСлужебныйВМоделиСервиса");
			ДоступноИзменениеПользователей = МодульПользователиСлужебныйВМоделиСервиса.ДоступноИзменениеПользователей();
		КонецЕсли;
		
		Если НЕ ДоступноИзменениеПользователей Тогда
			Если Пользователь.Пустая() Тогда
				ВызватьИсключение
					НСтр("ru = 'В демонстрационном режиме не поддерживается
					           |создание новых пользователей.'");
			КонецЕсли;
			ТолькоПросмотр = Истина;
		КонецЕсли;
		
		Если Пользователь <> Пользователи.АвторизованныйПользователь() Тогда
			Элементы.Отступ.Видимость = Ложь;
			Элементы.НадписьНаличиеПароля.Видимость = Ложь;
			Элементы.СменитьПароль.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.ПользовательИБАутентификацияOpenID.Видимость      = Ложь;
		Элементы.ПользовательИБАутентификацияСтандартная.Видимость = Ложь;
		Элементы.ПотребоватьСменуПароляПриВходе.Видимость = Ложь;
		Элементы.ПользовательИБЗапрещеноИзменятьПароль.Видимость = Ложь;
		Элементы.ПользовательИБЗапрещеноВосстанавливатьПароль.Видимость = Ложь;
		Элементы.СвойстваАутентификацииОС.Видимость  = Ложь;
		Элементы.ПользовательИБРежимЗапуска.Видимость = Ложь;
		
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоУчебнаяПлатформа() Тогда
		Элементы.СвойстваАутентификацииОС.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// Заполнение вспомогательных данных.
	
	// Заполнение списка выбора режимов запуска.
	Для каждого РежимЗапуска Из РежимЗапускаКлиентскогоПриложения Цикл
		ПолноеИмяЗначения = ПолучитьПолноеИмяПредопределенногоЗначения(РежимЗапуска);
		ИмяЗначения = Сред(ПолноеИмяЗначения, СтрНайти(ПолноеИмяЗначения, ".") + 1);
		Элементы.ПользовательИБРежимЗапуска.СписокВыбора.Добавить(ИмяЗначения, Строка(РежимЗапуска));
	КонецЦикла;
	Элементы.ПользовательИБРежимЗапуска.СписокВыбора.СортироватьПоПредставлению();
	
	// Заполнение списка выбора языка.
	Если Метаданные.Языки.Количество() < 2 Тогда
		Элементы.ПользовательИБЯзык.Видимость = Ложь;
	Иначе
		Для каждого МетаданныеЯзыка Из Метаданные.Языки Цикл
			Элементы.ПользовательИБЯзык.СписокВыбора.Добавить(
				МетаданныеЯзыка.Имя, МетаданныеЯзыка.Синоним);
		КонецЦикла;
	КонецЕсли;
	
	УровеньДоступа = ПользователиСлужебный.УровеньДоступаКСвойствамПользователя(ПользовательОбъект);
	
	// Подготовка к интерактивным действиям с учетом сценариев открытия формы.
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		// Создание нового элемента.
		Если Параметры.ГруппаНовогоПользователя <> Справочники.РабочиеГруппы.ВсеПользователи Тогда
			ГруппаНовогоПользователя = Параметры.ГруппаНовогоПользователя;
		КонецЕсли;
		
		// Добавление элемента.
		// Чтение начальных значений свойств пользователя ИБ.
		ПрочитатьПользователяИБ();
		
		Если Не ЗначениеЗаполнено(Параметры.ИдентификаторПользователяИБ) Тогда
			
			ПользовательИБАутентификацияСтандартная = Истина;
			
			Если ОбщегоНазначения.РазделениеВключено() Тогда
				ПользовательИБПоказыватьВСпискеВыбора = Ложь;
				ПользовательИБАутентификацияOpenID = Истина;
			КонецЕсли;
		
			Если УровеньДоступа.ИзменениеРазрешенияНаВход Тогда
				ВходВПрограммуРазрешен = Истина;
				ВходВПрограммуРазрешенЗначениеПрямогоИзменения = Истина;
			КонецЕсли;
		
		КонецЕсли;
	
	Иначе
		// Открытие существующего элемента.
		ПрочитатьПользователяИБ();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	НачальноеОписаниеПользователяИБ = НачальноеОписаниеПользователяИБ();
	ТребуетсяСинхронизацияССервисом = Пользователь.Пустая();
	
	НастроитьФормуПоДаннымПользователя(ПользовательОбъект, Истина);
	
	Если ОбщегоНазначения.ЭтоАвтономноеРабочееМесто() Тогда
		Элементы.ОсновныеДанные.ТолькоПросмотр = Истина;
		Элементы.КонтактнаяИнформация.ТолькоПросмотр = Истина;
		Элементы.СтраницаДополнительныеРеквизиты.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ОбновитьВидимостьРеквизитаПоказыватьВСпискеВыбора();
	
	Если Не ПользователиСлужебныйПовтИсп.Настройки().ОбщиеНастройкиВхода Тогда
		Элементы.ГруппаИзменитьОграничение.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоАвтономноеРабочееМесто() Тогда
		Элементы.СтраницаАутентификация.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Элементы.ПотребоватьСменуПароляПриВходе.РасширеннаяПодсказка.Заголовок =
		ПользователиСлужебный.ПодсказкаПотребоватьСменуПароляПриВходе(Ложь);
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Элементы.ФормаЗаписатьИЗакрыть.Отображение = ОтображениеКнопки.Картинка;
	КонецЕсли;

	Элементы.РазрешенныеВебСерверы.Видимость = 
		ПравоДоступа("Чтение", Метаданные.Константы.ОграничиватьДоступЧерезВебСерверы) 
			И Константы.ОграничиватьДоступЧерезВебСерверы.Получить();
	
	ОбновитьОтсутствие();

	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Обсуждения") Тогда
		МодульОбсужденияСлужебный = ОбщегоНазначения.ОбщийМодуль("ОбсужденияСлужебный");
		МодульОбсужденияСлужебный.ПриСозданииНаСервереПользователя(Отказ, ЭтотОбъект, ПользовательОбъект);
	КонецЕсли;
		
	// СтандартныеПодсистемы.БазоваяФункциональность
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	Элементы.ЧасовойПоясПредставление.Видимость = ЗначениеЗаполнено(ЧасовойПоясПредставление);
		
КонецПроцедуры	

&НаСервере
Процедура ОбновитьОтсутствие()
	
	Отсутствия.ОбновитьДанныеОтсутствияФормыСотрудника(Объект.Ссылка, Отсутствие,
		ОтсутствиеОписание, Элементы.ГруппаОтсутствие);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоДаннымПользователя(ТекущийОбъект, ПриСозданииНаСервере = Ложь, ПараметрыЗаписи = Неопределено)
	
	Если НачальноеОписаниеПользователяИБ = Неопределено Тогда
		Возврат; // Вызов ПриЧтенииНаСервере до вызова ПриСозданииНаСервере.
	КонецЕсли;
	
	Если Не ПриСозданииНаСервере Тогда
		ПрочитатьПользователяИБ();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПрочитатьСведенияОПользователе();
	УстановитьПривилегированныйРежим(Ложь);
	
	УровеньДоступа = ПользователиСлужебный.УровеньДоступаКСвойствамПользователя(ТекущийОбъект);
	
	ОпределитьДействияВФорме();
	
	ОпределитьНесоответствияПользователяСПользователемИБ(ПараметрыЗаписи);
	
	Если ОбщегоНазначения.РазделениеВключено()
		И (ВходВПрограммуРазрешен Или ПриЧтенииВходВПрограммуРазрешен)
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса") Тогда
		
		МодульПользователиСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ПользователиСлужебныйВМоделиСервиса");
		ДействияСПользователемСервиса = МодульПользователиСлужебныйВМоделиСервиса.ПолучитьДействияСПользователемСервиса(
			Пользователь);
	КонецЕсли;
	
	// Настройка возможности просмотра.
	Элементы.СвойстваПользователяИБ.Видимость = ЗначениеЗаполнено(ДействияВФорме.СвойстваПользователяИБ);
	
	ВыводитьСписокРолей = ЗначениеЗаполнено(ДействияВФорме.Роли);
	
	Элементы.СвойстваАутентификации1СПредприятия.Отображение =
		?(ВыводитьСписокРолей, ОтображениеОбычнойГруппы.Нет, ОтображениеОбычнойГруппы.ОбычноеВыделение);
	
	Элементы.РекомендуетсяПроверитьНастройкиДляВхода.Видимость =
		  УровеньДоступа.ИзменениеРазрешенияНаВход
		И ТекущийОбъект.Подготовлен
		И Не ПриЧтенииВходВПрограммуРазрешен;
	
	// Настройка возможности изменения.
	Если ТекущийОбъект.Служебный Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	Элементы.ГруппаСлужебныйПользователь.Видимость = ТекущийОбъект.Служебный;
	
	ТолькоПросмотр = ТолькоПросмотр
		ИЛИ ДействияВФорме.Роли                   <> "Редактирование"
		  И ДействияВФорме.СвойстваЭлемента       <> "Редактирование"
		  И ДействияВФорме.КонтактнаяИнформация   <> "Редактирование"
		  И ДействияВФорме.СвойстваПользователяИБ <> "Редактирование";
	
	ДоступностьКнопки = Не ТолькоПросмотр И ПравоДоступа("Редактирование",
		Метаданные.Справочники.Пользователи);
	
	Если Элементы.ФормаЗаписатьИЗакрыть.Доступность <> ДоступностьКнопки Тогда
		Элементы.ФормаЗаписатьИЗакрыть.Доступность = ДоступностьКнопки;
	КонецЕсли;
	
	Если Элементы.ИзменитьОграничениеНаВходВПрограмму.Доступность <> ДоступностьКнопки Тогда
		Элементы.ИзменитьОграничениеНаВходВПрограмму.Доступность = ДоступностьКнопки;
	КонецЕсли;
	
	Если Элементы.СменитьПароль.Доступность <> ДоступностьКнопки Тогда
		Элементы.СменитьПароль.Доступность = ДоступностьКнопки;
	КонецЕсли;
	
	Элементы.ПользовательИБИмя.ТолькоПросмотр =
		Не (ДействияВФорме.СвойстваЭлемента = "Редактирование" И УровеньДоступа.УправлениеСписком);
	
	Элементы.СвойстваПользователяИБ.ТолькоПросмотр =
		Не (  ДействияВФорме.СвойстваПользователяИБ = "Редактирование"
		    И (УровеньДоступа.УправлениеСписком Или УровеньДоступа.ИзменениеТекущего));
	
	Элементы.ПользовательИБИмя.ТолькоПросмотр                      = Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИБАутентификацияСтандартная.ТолькоПросмотр = Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИБАутентификацияOpenID.ТолькоПросмотр      = Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИБАутентификацияОС.ТолькоПросмотр          = Не УровеньДоступа.НастройкиДляВхода;
	Элементы.ПользовательИБПользовательОС.ТолькоПросмотр            = Не УровеньДоступа.НастройкиДляВхода;
	
	Элементы.ПользовательИБПоказыватьВСпискеВыбора.ТолькоПросмотр        = Не УровеньДоступа.УправлениеСписком;
	Элементы.ПотребоватьСменуПароляПриВходе.ТолькоПросмотр               = Не УровеньДоступа.УправлениеСписком;
	Элементы.ПользовательИБЗапрещеноИзменятьПароль.ТолькоПросмотр        = Не УровеньДоступа.УправлениеСписком;
	Элементы.ПользовательИБЗапрещеноВосстанавливатьПароль.ТолькоПросмотр = Не УровеньДоступа.УправлениеСписком;
	Элементы.ПользовательИБРежимЗапуска.ТолькоПросмотр                   = Не УровеньДоступа.УправлениеСписком;
	
	Недействителен = ПользовательОбъект.Недействителен;
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьДействияВФорме()
	
	ДействияВФорме = Новый Структура;
	
	// "", "Просмотр", "Редактирование".
	ДействияВФорме.Вставить("Роли", "");
	
	// "", "Просмотр", "Редактирование".
	ДействияВФорме.Вставить("КонтактнаяИнформация", "Просмотр");
	
	// "", "ПросмотрВсех", "Редактирование".
	ДействияВФорме.Вставить("СвойстваПользователяИБ", "");
	
	// "", "Просмотр", "Редактирование".
	ДействияВФорме.Вставить("СвойстваЭлемента", "Просмотр");
	
	Если Не УровеньДоступа.АдминистраторСистемы
	   И УровеньДоступа.ПолныеПрава
	   И Пользователи.ЭтоПолноправныйПользователь(Пользователь, Истина) Тогда
		
		// Администратор системы доступен только на просмотр.
		ДействияВФорме.Роли                   = "Просмотр";
		ДействияВФорме.СвойстваПользователяИБ = "Просмотр";
	
	ИначеЕсли УровеньДоступа.АдминистраторСистемы
	      ИЛИ УровеньДоступа.ПолныеПрава Тогда
		
		ДействияВФорме.Роли                   = "Редактирование";
		ДействияВФорме.КонтактнаяИнформация   = "Редактирование";
		ДействияВФорме.СвойстваПользователяИБ = "Редактирование";
		ДействияВФорме.СвойстваЭлемента       = "Редактирование";
	КонецЕсли;
	
	ПользователиСлужебный.ПриОпределенииДействийВФорме(Пользователь, ДействияВФорме);
	
	// Проверка имен действий в форме.
	Если СтрНайти(", Просмотр, Редактирование,", ", " + ДействияВФорме.Роли + ",") = 0 Тогда
		ДействияВФорме.Роли = "";
		
	ИначеЕсли ДействияВФорме.Роли = "Редактирование"
	        И ПользователиСлужебный.ЗапретРедактированияРолей() Тогда
		
		ДействияВФорме.Роли = "Просмотр";
	КонецЕсли;
	
	Если СтрНайти(", Просмотр, Редактирование,", ", " + ДействияВФорме.КонтактнаяИнформация + ",") = 0 Тогда
		ДействияВФорме.КонтактнаяИнформация = "";
	КонецЕсли;
	
	Если СтрНайти(", Просмотр, ПросмотрВсех, Редактирование, РедактированиеСвоих, РедактированиеВсех,",
	           ", " + ДействияВФорме.СвойстваПользователяИБ + ",") = 0 Тогда
		
		ДействияВФорме.СвойстваПользователяИБ = "";
		
	Иначе // Поддержка обратной совместимости.
		Если СтрНайти(ДействияВФорме.СвойстваПользователяИБ, "Просмотр") Тогда
			ДействияВФорме.СвойстваПользователяИБ = "Просмотр";
			
		ИначеЕсли СтрНайти(ДействияВФорме.СвойстваПользователяИБ, "Редактирование") Тогда
			ДействияВФорме.СвойстваПользователяИБ = "Редактирование";
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНайти(", Просмотр, Редактирование,", ", " + ДействияВФорме.СвойстваЭлемента + ",") = 0 Тогда
		ДействияВФорме.СвойстваЭлемента = "";
	КонецЕсли;
	
	Если ПользовательОбъект.Служебный Тогда
		Если ДействияВФорме.Роли = "Редактирование" Тогда
			ДействияВФорме.Роли = "Просмотр";
		КонецЕсли;
		
		Если ДействияВФорме.КонтактнаяИнформация = "Редактирование" Тогда
			ДействияВФорме.КонтактнаяИнформация = "Просмотр";
		КонецЕсли;
		
		Если ДействияВФорме.СвойстваПользователяИБ = "Редактирование" Тогда
			ДействияВФорме.СвойстваПользователяИБ = "Просмотр";
		КонецЕсли;
		
		Если ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
			ДействияВФорме.СвойстваЭлемента = "Просмотр";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСведенияОПользователе()
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Возврат;
	КонецЕсли;
	
	УровеньДоступа = ПользователиСлужебный.УровеньДоступаКСвойствамПользователя(ПользовательОбъект);
	
	НаборЗаписей = РегистрыСведений.СведенияОПользователях.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
	НаборЗаписей.Прочитать();
	
	ПотребоватьСменуПароляПриВходе             = Ложь;
	СрокДействияНеОграничен                    = Ложь;
	СрокДействия                               = Неопределено;
	ПросрочкаРаботыВПрограммеДоЗапрещенияВхода = 0;
	
	Если НаборЗаписей.Количество() > 0 Тогда
		
		Если УровеньДоступа.УправлениеСписком
		 Или УровеньДоступа.ИзменениеТекущего Тогда
		
			ЗаполнитьЗначенияСвойств(ЭтаФорма, НаборЗаписей[0],
				"ПотребоватьСменуПароляПриВходе,
				|СрокДействияНеОграничен,
				|СрокДействия,
				|ПросрочкаРаботыВПрограммеДоЗапрещенияВхода");
		Иначе
			ПотребоватьСменуПароляПриВходе = НаборЗаписей[0].ПотребоватьСменуПароляПриВходе;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПользовательИБ
&НаСервере
Функция НачальноеОписаниеПользователяИБ()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НачальноеОписаниеПользователяИБ <> Неопределено Тогда
		НачальноеОписаниеПользователяИБ.Роли = Новый Массив;
		Возврат НачальноеОписаниеПользователяИБ;
	КонецЕсли;
	
	ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
	
	ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;
	ОписаниеПользователяИБ.АутентификацияСтандартная = Истина;
	ОписаниеПользователяИБ.Роли = Новый Массив;
	
	Возврат ОписаниеПользователяИБ;
	
КонецФункции

&НаСервере
Процедура ПрочитатьПользователяИБ(ПриКопированииЭлемента = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПрочитанныеСвойства      = Неопределено;
	ОписаниеПользователяИБ   = НачальноеОписаниеПользователяИБ();
	ПользовательИБСуществует = Ложь;
	ПользовательИБОсновной   = Ложь;
	ВходВПрограммуРазрешен   = Ложь;
	ВходВПрограммуРазрешенЗначениеПрямогоИзменения = Ложь;

	ПрочитанныеСвойства = Пользователи.СвойстваПользователяИБ(ПользовательОбъект.ИдентификаторПользователяИБ);
	Если ПрочитанныеСвойства <> Неопределено Тогда
	
		ПользовательИБСуществует = Истина;
		ПользовательИБОсновной = Истина;
	
	ИначеЕсли Параметры.Свойство("ИдентификаторПользователяИБ")
	        И ЗначениеЗаполнено(Параметры.ИдентификаторПользователяИБ) Тогда
		
		ПользовательОбъект.ИдентификаторПользователяИБ = Параметры.ИдентификаторПользователяИБ;
		Если ПользовательОбъект.ИдентификаторПользователяИБ <> Параметры.ИдентификаторПользователяИБ Тогда
			ПользовательОбъект.ИдентификаторПользователяИБ = Параметры.ИдентификаторПользователяИБ;
			Модифицированность = Истина;
		КонецЕсли;
		ПрочитанныеСвойства = Пользователи.СвойстваПользователяИБ(ПользовательОбъект.ИдентификаторПользователяИБ);
		Если ПрочитанныеСвойства <> Неопределено Тогда
			
			ПользовательИБСуществует = Истина;
			Если ПользовательОбъект.Наименование <> ПрочитанныеСвойства.ПолноеИмя Тогда
				ПользовательОбъект.Наименование = ПрочитанныеСвойства.ПолноеИмя;
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПользовательИБСуществует Тогда
		
		ПользовательПомеченНаУдаление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ПометкаУдаления");
		Если Пользователи.ВходВПрограммуРазрешен(ПрочитанныеСвойства) И Не ПользовательПомеченНаУдаление Тогда
			ВходВПрограммуРазрешен = Истина;
			ВходВПрограммуРазрешенЗначениеПрямогоИзменения = Истина;
		Иначе
			ВходВПрограммуРазрешен = Не ПользовательОбъект.Недействителен;
			ВходВПрограммуРазрешенЗначениеПрямогоИзменения = Ложь;
		КонецЕсли;
		
		Элементы.ГруппаИзменитьОграничение.Видимость = ВходВПрограммуРазрешен;
		Элементы.ПользовательНедействителенНадпись.Видимость = Не ВходВПрограммуРазрешен;
			
		ЗаполнитьЗначенияСвойств(
			ОписаниеПользователяИБ,
			ПрочитанныеСвойства,
			"Имя,
			|ПолноеИмя,
			|АутентификацияOpenID,
			|АутентификацияOpenIDConnect,
			|АутентификацияСтандартная,
			|ПоказыватьВСпискеВыбора,
			|ЗапрещеноИзменятьПароль,
			|АутентификацияОС,
			|ПользовательОС,
			|ОсновнойИнтерфейс,
			|АутентификацияТокеномДоступа,
			|РежимЗапуска" 
			+ ?(Не Элементы.ПользовательИБЯзык.Видимость, "", ",Язык")
			+ ?(ПользователиСлужебный.ЗапретРедактированияРолей(), "", ",Роли")
			+ ",ЗапрещеноВосстанавливатьПароль,АдресЭлектроннойПочты");
	КонецЕсли;
	
	Если ПрочитанныеСвойства = Неопределено Тогда
		УстановитьНаличиеПароля(ЭтотОбъект, Ложь,
			Пользователи.АвторизованныйПользователь());
	Иначе
		УстановитьНаличиеПароля(ЭтотОбъект, ПрочитанныеСвойства.ПарольУстановлен,
			Пользователи.АвторизованныйПользователь());
	КонецЕсли;

	Пользователи.СкопироватьСвойстваПользователяИБ(
		ЭтотОбъект,
		ОписаниеПользователяИБ,
		,
		"УникальныйИдентификатор,
		|Роли" + ?(ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей"), ",
		|ПоказыватьВСпискеВыбора", ""),
		"ПользовательИБ");
	
	Если ПользовательИБОсновной И Не ВходВПрограммуРазрешен Тогда
		ХранимыеСвойства = ПользователиСлужебный.ХранимыеСвойстваПользователяИБ(Пользователь);
		ПользовательИБАутентификацияСтандартная    = ХранимыеСвойства.АутентификацияСтандартная;
		ПользовательИБАутентификацияOpenID         = ХранимыеСвойства.АутентификацияOpenID;
		ПользовательИБАутентификацияТокеномДоступа = ХранимыеСвойства.АутентификацияТокеномДоступа;
		ПользовательИБАутентификацияОС             = ХранимыеСвойства.АутентификацияОС;
		ПользовательИБАутентификацияOpenIDConnect  = ХранимыеСвойства.АутентификацияOpenIDConnect;
	КонецЕсли;
	
	Если ПользовательИБСуществует Тогда
		ПользовательИБАутентификацияСтандартнаяЗначениеПрямогоИзменения
			= ПользовательИБАутентификацияСтандартная;
	КонецЕсли;
	
	ПриЧтенииВходВПрограммуРазрешен = ВходВПрограммуРазрешен;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьРеквизитаПоказыватьВСпискеВыбора()
	
	Элементы.ПользовательИБПоказыватьВСпискеВыбора.Видимость =
		  Не ОбщегоНазначения.РазделениеВключено()
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей")
	
КонецПроцедуры

&НаКлиенте
Процедура АутентификацияПриИзменении()
	
	Если НЕ ПользовательИБАутентификацияСтандартная
		И НЕ ПользовательИБАутентификацияOpenID
		И НЕ ПользовательИБАутентификацияОС
		И НЕ ПользовательИБАутентификацияТокеномДоступа
		И НЕ ПользовательИБАутентификацияOpenIDConnect Тогда
		
		ПользовательИБЗапрещеноВосстанавливатьПароль = Не ЗначениеЗаполнено(EmailДляВосстановленияПароля);
		
	ИначеЕсли Не ВходВПрограммуРазрешен Тогда
		
		ВходВПрограммуРазрешен = ВходВПрограммуРазрешенЗначениеПрямогоИзменения;
		Если ЗначениеЗаполнено(EmailДляВосстановленияПароля) Тогда
			ПользовательИБЗапрещеноВосстанавливатьПароль = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьСвойств(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПотребоватьСменуПароляПриВходеПриИзменении(Элемент)
	
	Если ПотребоватьСменуПароляПриВходе Тогда
		ПользовательИБЗапрещеноИзменятьПароль = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБЗапрещеноИзменятьПарольПриИзменении(Элемент)
	
	Если ПользовательИБЗапрещеноИзменятьПароль Тогда
		ПотребоватьСменуПароляПриВходе = Ложь;
		ПользовательИБЗапрещеноВосстанавливатьПароль = Не ЗначениеЗаполнено(EmailДляВосстановленияПароля);
	КонецЕсли;
	
	УстановитьДоступностьСвойств(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПользовательИБПоказыватьВСпискеВыбораПриИзменении(Элемент)

	УстановитьДоступностьСвойств(ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИмяДляВхода(Форма)
	
	Если Не Форма.ПользовательИБСуществует И Не ЗначениеЗаполнено(Форма.ПользовательИБИмя) Тогда
		Форма.ПользовательИБИмя = ПользователиСлужебныйКлиентСервер.ПолучитьКраткоеИмяПользователяИБ(
			Форма.ПользовательОбъект.Наименование);
	КонецЕсли;

	ОтобразитьОтметкуНезаполненоИмяВхода(Форма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьОтметкуНезаполненоИмяВхода(Форма)
	
	Элементы = Форма.Элементы;
	
	ОтметкаНезаполненного = ТребуетсяЗаписьПользователяИБ(Форма, Ложь)
		И Не ЗначениеЗаполнено(Форма.ПользовательИБИмя);
	
	Элементы.ПользовательИБИмя.ОтметкаНезаполненного = ОтметкаНезаполненного;	

КонецПроцедуры

&НаСервере
Процедура ОпределитьНесоответствияПользователяСПользователемИБ(ПараметрыЗаписи = Неопределено)
	
	// Проверка соответствия свойства ПолноеИмя пользователяИБ и
	// реквизита Наименование пользователя.
	
	ПоказатьНесоответствие = Истина;
	ПоказатьКомандыУстраненияРазличий = Ложь;
	
	Если НЕ ПользовательИБСуществует Тогда
		ПоказатьНесоответствие = Ложь;
		
	ИначеЕсли Не ЗначениеЗаполнено(Пользователь) Тогда
		ПользовательОбъект.Наименование = ПользовательИБПолноеИмя;
		ПоказатьНесоответствие = Ложь;
		
	ИначеЕсли УровеньДоступа.УправлениеСписком Тогда
		
		УточнениеСвойств = Новый Массив;
		
		Если ПользовательИБПолноеИмя <> ПользовательОбъект.Наименование Тогда
			ПоказатьКомандыУстраненияРазличий =
				    ПоказатьКомандыУстраненияРазличий
				Или ДействияВФорме.СвойстваЭлемента = "Редактирование";
			
			УточнениеСвойств.Вставить(0, СтрШаблон(НСтр("ru = 'Полное имя ""%1""'"),
				ПользовательИБПолноеИмя));
		КонецЕсли;
		
		Если УточнениеСвойств.Количество() > 0 Тогда
			СтрокаУточненияСвойств = "";
			ТекущаяСтрока = "";
			Для каждого УточнениеСвойства Из УточнениеСвойств Цикл
				Если СтрДлина(ТекущаяСтрока + УточнениеСвойства) > 90 Тогда
					СтрокаУточненияСвойств = СтрокаУточненияСвойств + СокрП(ТекущаяСтрока) + ", " + Символы.ПС;
					ТекущаяСтрока = "";
				КонецЕсли;
				ТекущаяСтрока = ТекущаяСтрока + ?(ЗначениеЗаполнено(ТекущаяСтрока), ", ", "") + УточнениеСвойства;
			КонецЦикла;
			Если ЗначениеЗаполнено(ТекущаяСтрока) Тогда
				СтрокаУточненияСвойств = СтрокаУточненияСвойств + ТекущаяСтрока;
			КонецЕсли;
			Если ПоказатьКомандыУстраненияРазличий Тогда
				Рекомендация = Символы.ПС
					+ НСтр("ru = 'Нажмите ""Записать"", чтобы устранить различия и не выводить это предупреждение.'");
			
			ИначеЕсли Не Пользователи.ЭтоПолноправныйПользователь() Тогда
				Рекомендация = Символы.ПС
					+ НСтр("ru = 'Обратитесь к администратору, чтобы устранить различия.'");
			Иначе
				Рекомендация = "";
			КонецЕсли;
			Элементы.СвойстваПояснениеНесоответствия.Заголовок = СтрШаблон(
				НСтр("ru = 'Следующие свойства пользователя информационной базы отличаются от указанных в этой форме:
				           |%1.'"),
				СтрокаУточненияСвойств) + Рекомендация;
		Иначе
			ПоказатьНесоответствие = Ложь;
		КонецЕсли;
	Иначе
		ПоказатьНесоответствие = Ложь;
	КонецЕсли;
	
	Элементы.СвойстваОбработкаНесоответствия.Видимость   = ПоказатьНесоответствие;
	Элементы.СвойстваКомандыУстраненияРазличий.Видимость = ПоказатьКомандыУстраненияРазличий;
	Элементы.СвойстваПояснениеНесоответствия.ВертикальноеПоложение = ?(ЗначениеЗаполнено(Рекомендация),
		ВертикальноеПоложениеЭлемента.Верх, ВертикальноеПоложениеЭлемента.Центр);
	
	// Определение сопоставление несуществующего пользователя ИБ с пользователем в справочнике.
	ЕстьНовоеСопоставлениеСНесуществующимПользователемИБ
		= НЕ ПользовательИБСуществует
		И ЗначениеЗаполнено(ПользовательОбъект.ИдентификаторПользователяИБ);
	
	Если ПараметрыЗаписи <> Неопределено
	   И ЕстьСопоставлениеСНесуществующимПользователемИБ
	   И НЕ ЕстьНовоеСопоставлениеСНесуществующимПользователемИБ Тогда
		
		ПараметрыЗаписи.Вставить("ОчищеноСопоставлениеСНесуществующимПользователемИБ", Пользователь);
	КонецЕсли;
	ЕстьСопоставлениеСНесуществующимПользователемИБ = ЕстьНовоеСопоставлениеСНесуществующимПользователемИБ;
	
	Если УровеньДоступа.УправлениеСписком Тогда
		Элементы.СопоставлениеОбработкаНесоответствия.Видимость = ЕстьСопоставлениеСНесуществующимПользователемИБ;
	Иначе
		// Сопоставление не может быть изменено.
		Элементы.СопоставлениеОбработкаНесоответствия.Видимость = Ложь;
	КонецЕсли;
	
	Если ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
		Рекомендация = Символы.ПС
			+ НСтр("ru = 'Нажмите ""Записать"", чтобы устранить проблему и не выводить это предупреждение.'");
		
	ИначеЕсли Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		Рекомендация = Символы.ПС
			+ НСтр("ru = 'Обратитесь к администратору, чтобы устранить различия.'");
	Иначе
		Рекомендация = "";
	КонецЕсли;
	
	Элементы.СопоставлениеПояснениеНесоответствия.Заголовок =
		НСтр("ru = 'Пользователь информационной базы не найден.'") + Рекомендация;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзПользователяИБ(Команда)
	
	ЗаполнитьПоляПоПользователюИБНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоляПоПользователюИБНаСервере()
	
	Если УровеньДоступа.УправлениеСписком
	   И ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
		
		Объект.Наименование = ПользовательИБПолноеИмя;
		ЗаполнитьEmailДляВосстановленияПароля();
	КонецЕсли;
	
	ОпределитьНесоответствияПользователяСПользователемИБ();
	
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
	УстановитьНеобходимостьСинхронизацииССервисом(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗаписьПослеВопросаОЗапретеВосстанавливатьПароль(Результат, ЗакрытьФорму) Экспорт	
	
	Если Результат <> КодВозвратаДиалога.Да
		Или Результат = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ПользовательИБЗапрещеноВосстанавливатьПароль = Ложь;
	Модифицированность = Ложь;
			
	Если ЗакрытьФорму Тогда
		Записать(Новый Структура("Закрыть", Истина));
	Иначе
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОписаниеПользователяИБ(ДляПроверкиПервогоАдминистратора = Ложь)
	
	Если УровеньДоступа.УправлениеСписком
	   И ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
		
		ПользовательИБПолноеИмя = ПользовательОбъект.Наименование;
	КонецЕсли;
	
	Если УровеньДоступа.АдминистраторСистемы
		Или УровеньДоступа.ПолныеПрава Тогда
		
		Результат = Пользователи.НовоеОписаниеПользователяИБ();
		Пользователи.СкопироватьСвойстваПользователяИБ(
			Результат,
			ЭтотОбъект,
			,
			"УникальныйИдентификатор,
			|Роли",
			"ПользовательИБ");
		
		Результат.Вставить("ВходВПрограммуРазрешен", ВходВПрограммуРазрешен);

	Иначе
		Результат = Новый Структура;
		
		Если УровеньДоступа.ИзменениеТекущего Тогда
			Результат.Вставить("Пароль", ПользовательИБПароль);
			Результат.Вставить("Язык",   ПользовательИБЯзык);
			Результат.Вставить("АдресЭлектроннойПочты", ПользовательИБАдресЭлектроннойПочты);
		КонецЕсли;
		
		Если УровеньДоступа.УправлениеСписком Тогда
			Результат.Вставить("ВходВПрограммуРазрешен",         ВходВПрограммуРазрешен);
			Результат.Вставить("ПоказыватьВСпискеВыбора",        ПользовательИБПоказыватьВСпискеВыбора
				И Не ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей"));
			Результат.Вставить("ЗапрещеноИзменятьПароль",        ПользовательИБЗапрещеноИзменятьПароль);
			
			Результат.Вставить("Язык",                           ПользовательИБЯзык);
			Результат.Вставить("РежимЗапуска",                   ПользовательИБРежимЗапуска);
			Результат.Вставить("ЗапрещеноВосстанавливатьПароль", ПользовательИБЗапрещеноВосстанавливатьПароль);
			Результат.Вставить("АдресЭлектроннойПочты",			 ПользовательИБАдресЭлектроннойПочты);
			
			Если ДействияВФорме.СвойстваЭлемента = "Редактирование" Тогда
				Результат.Вставить("ПолноеИмя", ПользовательИБПолноеИмя);
			КонецЕсли;
		КонецЕсли;
		
		Если УровеньДоступа.НастройкиДляВхода Тогда
			Результат.Вставить("АутентификацияСтандартная",    ПользовательИБАутентификацияСтандартная);
			Результат.Вставить("Имя",                          ПользовательИБИмя);
			Результат.Вставить("Пароль",                       ПользовательИБПароль);
			Результат.Вставить("АутентификацияOpenID",         ПользовательИБАутентификацияOpenID);
			Результат.Вставить("АутентификацияТокеномДоступа", ПользовательИБАутентификацияТокеномДоступа);
			Результат.Вставить("ПользовательИБАутентификацияOpenIDConnect", ПользовательИБАутентификацияOpenIDConnect);
			Результат.Вставить("АутентификацияОС",             ПользовательИБАутентификацияОС);
			Результат.Вставить("ПользовательОС",               ПользовательИБПользовательОС);
		КонецЕсли;
	КонецЕсли;
	
	Если Не УровеньДоступа.НастройкиДляВхода Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Не ПользователиСлужебный.ЗапретРедактированияРолей() Тогда
		ТекущиеРоли = ПользовательИБРоли.Выгрузить(, "Роль").ВыгрузитьКолонку("Роль");
		Результат.Вставить("Роли", ТекущиеРоли);
	КонецЕсли;
	
	Если ДляПроверкиПервогоАдминистратора Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Добавление ролей требуемых при создании первого администратора.
	Если ПользователиСлужебный.ТребуетсяСоздатьПервогоАдминистратора(Результат) Тогда
		
		Если Результат.Свойство("Роли") И Результат.Роли <> Неопределено Тогда
			РолиАдминистратора = Результат.Роли;
		Иначе
			РолиАдминистратора = Новый Массив;
		КонецЕсли;
		
		Если РолиАдминистратора.Найти("ПолныеПрава") = Неопределено Тогда
			РолиАдминистратора.Добавить("ПолныеПрава");
		КонецЕсли;
		
		Если РолиАдминистратора.Найти("АдминистраторСистемы") = Неопределено Тогда
			РолиАдминистратора.Добавить("АдминистраторСистемы");
		КонецЕсли;
		Результат.Вставить("Роли", РолиАдминистратора);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// При выборе подразделения или должности
//
// Параметры:
//  ПараметрыИзмененияДолжностиПодразделения - См. НовыеПараметрыИзмененияДолжностиИПодразделения
//
&НаКлиенте
Процедура ИзменитьДолжностьПодразделение(ПараметрыИзмененияДолжностиПодразделения = Неопределено)
	
	ОткрытьФормуИзмененияДолжностиПодразделения(ПараметрыИзмененияДолжностиПодразделения);
	
КонецПроцедуры

// Открыть форму изменения должности и/или подразделения
//
// Параметры:
//  ПараметрыИзмененияДолжностиПодразделения - См. НовыеПараметрыИзмененияДолжностиИПодразделения
//
&НаКлиенте
Асинх Процедура ОткрытьФормуИзмененияДолжностиПодразделения(ПараметрыИзмененияДолжностиПодразделения = Неопределено)
	
	Если Модифицированность Тогда
		
		Результат = Ждать ОбщегоНазначенияДокументооборотКлиент.ЗадатьВопросОСохраненииИзмененийАсинх();
		Если Результат = КодВозвратаДиалога.Да Тогда
			Записать();
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Сотрудник", Объект.Ссылка);
	ПараметрыФормы.Вставить("ОсновнойСотрудник", ОсновнойСотрудник);
	Если ЗначениеЗаполнено(ПараметрыИзмененияДолжностиПодразделения) Тогда
		
		Для Каждого ПараметрЗначение Из ПараметрыИзмененияДолжностиПодразделения Цикл
			
			ПараметрыФормы.Вставить(ПараметрЗначение.Ключ, ПараметрЗначение.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбработкаЗакрытия = Новый ОписаниеОповещения("ОбработатьСменуДолжностиПодразделения", ЭтотОбъект);
	
	РазблокироватьДанныеФормыДляРедактирования();
	ОткрытьФорму("Справочник.Сотрудники.Форма.СменаДолжностиПодразделения", ПараметрыФормы,,,,, ОбработкаЗакрытия,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСменуДолжностиПодразделения(НовыйСотрудник, ДопПараметры) Экспорт
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	
	Если Не ЗначениеЗаполнено(НовыйСотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКарточкиСотрудника = Новый Структура;
	ПараметрыКарточкиСотрудника.Вставить("Ключ", НовыйСотрудник);
	ПараметрыКарточкиСотрудника.Вставить("ПроизошлаСменаДолжностиПодразделения", Истина);
	ОткрытьФорму("Справочник.Сотрудники.Форма.ФормаЭлемента", ПараметрыКарточкиСотрудника);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_МобильныйКлиент

&НаСервере
Процедура НастроитьФормуДляМобильногоПриНеобходимости()
	
	Если Не МК_ПовтИсп.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	СворачиваниеЭлементовПоВажности = СворачиваниеЭлементовФормыПоВажности.НеИспользовать;
	Элементы.ФормаЗаписатьИЗакрыть.Отображение = ОтображениеКнопки.Картинка;
	Элементы.ФормаЗаписатьИЗакрыть.Картинка = БиблиотекаКартинок.ЗаписатьИЗакрыть;
	ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	
	Элементы.ФормаСклоненияМК.Видимость = Истина;
	Элементы.Склонения.Видимость = Ложь;
	
	// Страница "Сотрудник".
	ВыровнятьЭлементДляМобильного(Элементы.ОсновнойСотрудник);
	ВыровнятьЭлементДляМобильного(Элементы.СледитьЗаСамочувствием);
	ВыровнятьЭлементДляМобильного(Элементы.ПредставлениеВДокументах);
	ВыровнятьЭлементДляМобильного(Элементы.ПредставлениеВПереписке);
	ВыровнятьЭлементДляМобильного(Элементы.ГрафикРаботы);
	ВыровнятьЭлементДляМобильного(Элементы.ФизЛицоПол);
	Элементы.ФизЛицоПол.РастягиватьПоГоризонтали = Истина;
	
	Элементы.СтраницаСотрудник.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	
	// Страница "Аутентификация".
	ВыровнятьЭлементДляМобильного(Элементы.ПользовательИБИмя);
	ВыровнятьЭлементДляМобильного(Элементы.РазрешенныеВебСерверы);
	ВыровнятьЭлементДляМобильного(Элементы.ВходВПрограммуРазрешен);
	ВыровнятьЭлементДляМобильного(Элементы.ПользовательИБАутентификацияСтандартная);
	ВыровнятьЭлементДляМобильного(Элементы.ПотребоватьСменуПароляПриВходе);
	ВыровнятьЭлементДляМобильного(Элементы.ПользовательИБЗапрещеноИзменятьПароль);
	ВыровнятьЭлементДляМобильного(Элементы.ПользовательИБЗапрещеноВосстанавливатьПароль);
	ВыровнятьЭлементДляМобильного(Элементы.ПользовательИБПоказыватьВСпискеВыбора);
	ВыровнятьЭлементДляМобильного(Элементы.ПользовательИБАутентификацияOpenID);
	ВыровнятьЭлементДляМобильного(Элементы.ПользовательИБАутентификацияОС);
	ВыровнятьЭлементДляМобильного(Элементы.ПользовательИБПользовательОС);
	ВыровнятьЭлементДляМобильного(Элементы.ПользовательИБЯзык);
	ВыровнятьЭлементДляМобильного(Элементы.ПользовательИБРежимЗапуска);
	
	Элементы.ГруппаАктуальностьПользователя.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Элементы.Переместить(Элементы.ИзменитьОграничениеНаВходВПрограмму, Элементы.ГруппаАктуальностьПользователя);
	
	Элементы.ПотребоватьСменуПароляПриВходе.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	Элементы.ГруппаПароль.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	Элементы.Отступ.Видимость = Ложь;
	Элементы.СтраницаАутентификация.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	
	Элементы.ПисьмоНаEmailДляВосстановленияПароля.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	
	ПриИзмененииПараметровЭкранаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПараметровЭкранаНаСервере()
	
	ЭтоМобильныйСБольшимЭкраном = МК_ВызовСервера.ЭтоМобильныйСБольшимЭкраном();
	ЭтоМобильныйВПортретномРежиме = МК_ВызовСервера.ЭтоМобильныйВПортретномРежиме();
	
	Если ЭтоМобильныйСБольшимЭкраном И ЭтоМобильныйВПортретномРежиме Тогда
		НастроитьФормуВПортретномРежимеДляМобильного();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуВПортретномРежимеДляМобильного()
	
	// Страница "Сотрудник".
	Элементы.ПолноеИмя.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	Элементы.Руководитель.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	Элементы.Должность.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	Элементы.Подразделение.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	
	Элементы.ГруппаПериодДействияМК.Видимость = Истина;
	Элементы.Переместить(Элементы.ДатаНачалаДействия, Элементы.ГруппаПериодДействияСодержимоеМК);
	Элементы.Переместить(Элементы.ДекорацияДействуетПо, Элементы.ГруппаПериодДействияСодержимоеМК);
	Элементы.Переместить(Элементы.ДатаОкончанияДействия, Элементы.ГруппаПериодДействияСодержимоеМК);
	
	Элементы.ДекорацияДействуетПо.Видимость = Ложь;
	Элементы.ДатаНачалаДействия.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	Элементы.ДатаНачалаДействия.Заголовок = НСтр("ru = 'с'");
	Элементы.ДатаОкончанияДействия.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	Элементы.ДатаОкончанияДействия.Заголовок = НСтр("ru = 'по'");
	
КонецПроцедуры

&НаСервере
Процедура ВыровнятьЭлементДляМобильного(Элемент)
	
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	Элемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура НастроитьОтображениеГруппПометкаУдаленияНедействителен()
	
	ЭтоНовый = Не ЗначениеЗаполнено(Объект.Ссылка);
	Группа = Элементы.ГруппаПометкаУдаления;
	
	Если ЭтоНовый Тогда
		Группа.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ПометкаУдаления = Объект.ПометкаУдаления;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	ДействуетПоДатам = (Не ЗначениеЗаполнено(Объект.ДатаОкончанияДействия) 
		Или ТекущаяДатаСеанса < КонецДня(Объект.ДатаОкончанияДействия)) 
		И ТекущаяДатаСеанса > Объект.ДатаНачалаДействия; 
		
	Если Не ПометкаУдаления И ДействуетПоДатам Тогда
		Группа.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекстПредупреждения = "";
	
	Если ПометкаУдаления И Не ДействуетПоДатам Тогда
		ТекстПредупреждения = НСтр("ru='Сотрудник недействителен, помечен на удаление.'");
	ИначеЕсли Не ПометкаУдаления Тогда
		ТекстПредупреждения = НСтр("ru='Сотрудник недействителен.'");
	ИначеЕсли ДействуетПоДатам Тогда
		ТекстПредупреждения = НСтр("ru='Сотрудник помечен на удаление.'");
	КонецЕсли;
	
	Группа.Видимость = Истина;
	Элементы.ПометкаУдаленияНадпись.Заголовок = ТекстПредупреждения;
	
КонецПроцедуры

&НаСервере
Процедура РазместитьEmailДляПолученияПароляНадSkypеПриНеобходимости() 

	Если Не РабочаяКонтактнаяИнформацияНастроена Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОписанияSkype = СтрокаОписанияКИ(ЭтотОбъект,
		Справочники.ВидыКонтактнойИнформации.SkypeСотрудника);
	
	Если СтрокаОписанияSkype <> Неопределено Тогда
		Элементы.Переместить(
			Элементы.ГруппаEmailДляВосстановленияПароля,
			Элементы.ГруппаКонтактнаяИнформация,
			Элементы[СтрокаОписанияSkype.ИмяРеквизита].Родитель);
	КонецЕсли;
	
	ЗапомнитьЗначениеEmail(ЭтотОбъект);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УменьшитьШиринуПолейКонтактнойИнформации(Форма)
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	ГруппыКИ = Новый Массив;
	ГруппыКИ.Добавить(Элементы.ГруппаКонтактнаяИнформация);
	ГруппыКИ.Добавить(Элементы.ГруппаЛичнаяКонтактнаяИнформация);
	
	Для Каждого ЭлементыКИ Из ГруппыКИ Цикл 
	
		Для Каждого Элемент Из ЭлементыКИ.ПодчиненныеЭлементы Цикл
			
			Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
				ПоляКИ = Элемент.ПодчиненныеЭлементы;
				
				Для Каждого ПолеКИ Из ПоляКИ Цикл
					Если ТипЗнч(ПолеКИ) = Тип("ПолеФормы") Тогда
						ПолеКИ.Ширина = 35;
					КонецЕсли;
				КонецЦикла;
			
			Иначе
				Элемент.Ширина = 35;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

//Настраивает отображение параметров аутентификации
//
&НаСервере
Процедура НастроитьОтображениеПараметровАутентификации()

	ПараметрыАутентификацииОтсутствуют = Не ЗначениеЗаполнено(Пользователь);
	Элементы.ГруппаВходНеРазрешен.Видимость = ПараметрыАутентификацииОтсутствуют;
	Элементы.ГруппаПараметрыАутентификации.Видимость = Не ПараметрыАутентификацииОтсутствуют;

КонецПроцедуры

&НаСервере
Процедура РазрешитьВходВПрограммуНаСервере()
	
	ПодобратьПользователяПоФизЛицу();
	ЗаполнитьEmailДляВосстановленияПароля();
	ПрочитатьПользователяИБ();

КонецПроцедуры

// Новые параметры изменения должности и подразделения
// 
// Возвращаемое значение:
//  Структура:
// * Подразделение - СправочникСсылка.СтруктураПредприятия
// * Должность - СправочникСсылка.Должности
//
&НаКлиенте
Функция НовыеПараметрыИзмененияДолжностиИПодразделения()
	
	НовыеПараметры = Новый Структура; 
	НовыеПараметры.Вставить("Подразделение", 
		ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"));
	НовыеПараметры.Вставить("Должность", 
		ПредопределенноеЗначение("Справочник.Должности.ПустаяСсылка"));
	Возврат НовыеПараметры;
	
КонецФункции

// Задать вопрос о смене подразделения или должности
//
// Параметры:
//  ВыбранноеЗначение - СправочникСсылка.Должности, СправочникСсылка.СтруктураПредприятия
//  ЭтоСменаДолжности - Булево - Если Истина, то смена должности, иначе - подразделения
//
&НаКлиенте
Асинх Процедура ЗадатьВопросОСменеПодразделенияДолжность(ВыбранноеЗначение, ЭтоСменаДолжности)
	
	Если ЭтоСменаДолжности И ВыбранноеЗначение = Объект.Должность Тогда
		// Если был ввод текста в поле, то возвращает как было
		Объект.Должность = ВыбранноеЗначение;
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоСменаДолжности И ВыбранноеЗначение = Объект.Подразделение Тогда
		// Если был ввод текста в поле, то возвращает как было
		Объект.Подразделение = ВыбранноеЗначение;
		Возврат;
	КонецЕсли;
	
	Если ЭтоСменаДолжности Тогда
		
		ТекстПредупреждения = НСтр("ru='Менять должность напрямую следует только при исправлении ошибок.
		|
		|В случае перевода в новую должность следует использовать мастер перевода на новую должность.
		|Воспользоваться мастером?'");
		
	Иначе
		
		ТекстПредупреждения = НСтр("ru='Менять подразделение напрямую следует только при исправлении ошибок.
		|
		|В случае перевода в новое подразделение следует использовать мастер перевода в новое подразделение.
		|Воспользоваться мастером?'");
		
	КонецЕсли;
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Перевод сотрудника'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Исправление ошибки'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
	
	ДопПараметрыОповещения = Новый Структура;
	ДопПараметрыОповещения.Вставить("ЭтоСменаДолжности", ЭтоСменаДолжности); 
	ДопПараметрыОповещения.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветНаВопросПроМастер", ЭтотОбъект, ДопПараметрыОповещения);
	
	// В платформенном вопросе текст и кнопки совсем плохо выглядели. Решил использовать БСПшную форму
	ДополнительныеПараметрыФормы = Новый Структура;
	ДополнительныеПараметрыФормы.Вставить("Заголовок", НСтр("ru='Мастер перевода'"));
	ДополнительныеПараметрыФормы.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", Ложь);
	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(ОписаниеОповещения, ТекстПредупреждения,
		СписокКнопок, ДополнительныеПараметрыФормы);
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ОбработатьЗакрытиеФормИзмененияФИО(Результат, Параметры) Экспорт
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	
КонецПроцедуры

// Данные обработки изменения списков доступа
// 
// Возвращаемое значение:
//  Структура:
// * Синоним - Строка
// * НавигационнаяСсылка - Строка
//
&НаСервере
Функция ДанныеОбработкиИзмененияСписковДоступа()
	
	Результат = Новый Структура;
	Результат.Вставить("НавигационнаяСсылка", 
		ПолучитьНавигационнуюСсылку(Метаданные.Обработки.ИзменениеСписковДоступаОбъектов));
	Результат.Вставить("Синоним", Метаданные.Обработки.ИзменениеСписковДоступаОбъектов.Синоним);
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьОтветНаВопросПроМастер(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Результат = Результат.Значение;
	ЭтоСменаДолжности = ДопПараметры.ЭтоСменаДолжности;
	ВыбранноеЗначение = ДопПараметры.ВыбранноеЗначение;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		
		Если ЭтоСменаДолжности Тогда
			Объект.Должность = ВыбранноеЗначение;
			Модифицированность = Истина;
		Иначе
			Объект.Подразделение = ВыбранноеЗначение;
			Модифицированность = Истина;
			ПодразделениеПриИзменении(Элементы.Подразделение);
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыИзмененияДолжностиПодразделения = НовыеПараметрыИзмененияДолжностиИПодразделения();
	Если ЭтоСменаДолжности Тогда
		ПараметрыИзмененияДолжностиПодразделения.Должность = ВыбранноеЗначение;
	Иначе
		ПараметрыИзмененияДолжностиПодразделения.Подразделение = ВыбранноеЗначение; 
	КонецЕсли;
	ИзменитьДолжностьПодразделение(ПараметрыИзмененияДолжностиПодразделения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСклоненияВРеквизите()
	
	ЭтотОбъект.Склонения = Новый ФиксированнаяСтруктура(АктуальныеСклонения());
	
КонецПроцедуры 

// Актуальные склонения
// 
// Возвращаемое значение:
//  См. ФизическиеЛица.СклоненияАктуальногоФИОФизЛица
//
&НаСервере
Функция АктуальныеСклонения()
	
	Возврат ФизическиеЛица.СклоненияАктуальногоФИОФизЛица(Объект.Владелец);
	
КонецФункции

#КонецОбласти