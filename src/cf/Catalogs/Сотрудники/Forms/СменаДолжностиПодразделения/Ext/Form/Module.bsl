
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Сотрудник = Параметры.Сотрудник;
	Пользователь = Сотрудники.ПользовательСотрудника(Сотрудник);
	ОсновнойСотрудник = Параметры.ОсновнойСотрудник;
	Дата = ТекущаяДатаСеанса();
	
	РеквизитыСотрудника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сотрудник, "ДатаНачалаДействия,
		|Подразделение,Должность,Владелец,Подразделение.Руководитель"); 
	
	ТекущееПодразделение = РеквизитыСотрудника.Подразделение;
	ЭтоРуководитель = (РеквизитыСотрудника.ПодразделениеРуководитель = Сотрудник);
	
	Если ЗначениеЗаполнено(Параметры.Должность) Тогда
		
		Должность = Параметры.Должность;
		
	Иначе
		
		Должность = РеквизитыСотрудника.Должность;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Подразделение) Тогда
		
		Подразделение = Параметры.Подразделение;
		Если Подразделение <> ТекущееПодразделение Тогда
			
			ИзменилПодразделение = Истина;
			
		КонецЕсли;
		
	Иначе
		
		Подразделение = РеквизитыСотрудника.Подразделение;
		
	КонецЕсли;
	
	ДатаНачалаДействияСотрудника = РеквизитыСотрудника.ДатаНачалаДействия;
	ФизЛицо = РеквизитыСотрудника.Владелец;
	ФИОСотрудника = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "Наименование");
	Заголовок = СтрШаблон(НСтр("ru='Перевод сотрудника %1'"), ФИОСотрудника);
	
	ОтмеченныеОбласти = Новый Соответствие;
	ОтмеченныеОбласти.Вставить(Справочники.ОбластиЗамещения.ВсеОбласти, Новый СписокЗначений);
	Дерево = ЗамещающиеИПомощники.ДеревоВопросовЗамещения(ОтмеченныеОбласти, Истина);
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоВопросовЗамещения"); 
	
	ЕстьПомощники = ЕстьПомощники(Сотрудник);
	Элементы.Помощники.Видимость = ЕстьПомощники;
	ПеренестиПомощников = ЕстьПомощники;
	ОставитьПомощникамДоступКСтарымЗадачам = ЕстьПомощники;
	
	ЗагрузитьРолиИсполнителяСотрудника();
	КолвоРолей = РолиДляПередачи.Количество();
	ЕстьРоли = КолвоРолей > 0;
	Элементы.РолиСтраница.Видимость = ЕстьРоли;
	Если ЕстьРоли Тогда
		
		Элементы.РолиСтраница.Заголовок = СтрШаблон(НСтр("ru='Роли (%1)'"), КолвоРолей);
		
	КонецЕсли;
	
	Если Не ЕстьРоли И Не ЕстьПомощники Тогда
		
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.ПередачаДелЗаголовок.Видимость = Истина;
		
	Иначе
		
		Элементы.ПередачаДелЗаголовок.Видимость = Ложь;
		
	КонецЕсли; 
	
	Если ИзменилПодразделение И ЭтоРуководитель Тогда
		
		СтанетРуководителемПодразделения = Истина;
		
	КонецЕсли; 
	
	УстановитьУсловноеОформление();
	УстановитьДоступностьОпций();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗакрытьФорму Тогда
		 
		Отказ = Истина;
		ТекстВопроса = 
			НСтр("ru='При закрытии смена подразделения/должности не произойдет. Вы уверены, что хотите закрыть форму?'");
		ОбработкаОповещения = Новый ОписаниеОповещения("ОбработьОтветПриЗакрытии", ЭтотОбъект);
		ПоказатьВопрос(ОбработкаОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СотрудникКоторомуПередаютДелаПриИзменении(Элемент)
	
	УстановитьДоступностьОпций();
	
	Если Не УстановилЗамещающего Тогда
		
		ВсеФункции = Истина;
		УстановилЗамещающего = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеФункцииПриИзменении(Элемент)
	
	УстановитьДоступностьОпций();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ИзменилПодразделение = (Подразделение <> ТекущееПодразделение);
	УстановитьДоступностьОпций();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиПомощниковПриИзменении(Элемент)
	
	Если Не ПеренестиПомощников Тогда
		ОставитьПомощникамДоступКСтарымЗадачам = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьОпций();
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйРуководительПодразделенияНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Отбор = Новый Структура;
	Отбор.Вставить("Подразделение", ТекущееПодразделение);
	Отбор.Вставить("Исключение", Сотрудник);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ОбработкаЗакрытия = Новый ОписаниеОповещения("ОбработкаВыбораНовогоРуководителя", ЭтотОбъект);
	ОткрытьФорму("Справочник.Сотрудники.Форма.ФормаВыбора", ПараметрыФормы, 
		ЭтотОбъект,,,, ОбработкаЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйРуководительПодразделенияОбработкаВыбора(Элемент, ВыбранноеЗначение, 
	ДополнительныеДанные, СтандартнаяОбработка)
	
	ПодразделениеСотрудника = СотрудникиВызовСервера.ПодразделениеСотрудника(ВыбранноеЗначение);
	Если ПодразделениеСотрудника <> ТекущееПодразделение Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru='Сотрудник не может быть руководителем не своего подразделения!
				|Подразделение выбранного сотрудника: %1
				|Подразделение руководителя: %2'"), ПодразделениеСотрудника, ТекущееПодразделение);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(ЭтотОбъект, 
		"НовыйРуководительПодразделения", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоВопросовЗамещения

&НаКлиенте
Процедура ДеревоВопросовЗамещенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ДеревоВопросовЗамещенияПредставлениеОтбора Тогда
		
		ЗамещающиеИПомощникиКлиент.ДеревоВопросовЗамещенияВыбор(Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВопросовЗамещенияПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоВопросовЗамещения.ТекущиеДанные;
	ЗамещающиеИПомощникиКлиент.ДеревоВопросовЗамещенияПометкаПриИзменении(ДеревоВопросовЗамещения, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВопросовЗамещенияПриАктивизацииСтроки(Элемент)
	
	ДоступенОтбор = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ДоступенОтбор = ТекущиеДанные.ДоступенОтбор;
	КонецЕсли;
	
	Элементы.ДеревоВопросовЗамещенияКонтекстноеМенюСкопироватьОтборы.Видимость = ДоступенОтбор;	
	Элементы.ДеревоВопросовЗамещенияКонтекстноеМенюВставитьОтборы.Видимость = ДоступенОтбор;
	Элементы.ДеревоВопросовЗамещенияКонтекстноеМенюВставитьОтборы.Доступность = 
		ЗначениеЗаполнено(АдресСкопированныхОтборов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	Если ДатаНачалаДействияСотрудника >= Дата Тогда
		
		Текст = НСтр("ru='Дата ""Действует с"" должна быть больше даты начала действия сотрудника'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(Текст,, "Дата");
		Возврат;
		
	КонецЕсли;
	
	Если ЭтоРуководитель И ИзменилПодразделение И Не ЗначениеЗаполнено(НовыйРуководительПодразделения) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru='Пожалуйста, выберите нового руководителя подразделения!'"),, "НовыйРуководительПодразделения");
		Возврат;
		
	КонецЕсли;
	
	Результат = ЗаписатьНаСервере();
	Если Не Результат.Успех Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.Ошибка);
		Возврат;
		
	КонецЕсли;
	Оповестить("Запись_Сотрудники");
	ЗакрытьФорму = Истина;
	Закрыть(Результат.НовыйСотрудник);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеФункции(Команда)
	
	ЗамещающиеИПомощникиКлиент.ВыбратьВсеФункцииВДеревеЗамещений(ДеревоВопросовЗамещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьВсеФункции(Команда)
	
	ЗамещающиеИПомощникиКлиент.СброситьВсеФункцииВДеревеЗамещений(ДеревоВопросовЗамещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьОтборы(Команда)
	
	ТекущиеДанные = Элементы.ДеревоВопросовЗамещения.ТекущиеДанные;
	АдресСкопированныхОтборов = ЗамещающиеИПомощникиКлиент.СкопироватьОтборы(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьОтборы(Команда)
	
	ТекущиеДанные = Элементы.ДеревоВопросовЗамещения.ТекущиеДанные;
	ЗамещающиеИПомощникиКлиент.ВставитьОтборы(ТекущиеДанные, АдресСкопированныхОтборов);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Представление = "ПустойИсполнительВПередачеРоли";
	
	ЭлементШрифтаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	ЭлементШрифтаОформления.Значение = 
		СтрШаблон(НСтр("ru='По умолчанию: %1'"), ФизЛицо);
	ЭлементШрифтаОформления.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ЦветТекстаПодсказкиВвода.Значение;
	ЭлементЦветаОформления.Использование = Истина; 
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("РолиДляПередачи.НовыйИсполнитель");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Справочники.Сотрудники.ПустаяСсылка();
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("РолиДляПередачиНовыйИсполнитель");
	ЭлементОформляемогоПоля.Использование = Истина;
	
КонецПроцедуры

// Записывает смену сотрудника
// 
// Возвращаемое значение:
//  См. НовыйРезультатСменыДолжностиПодразделения
//
&НаСервере
Функция ЗаписатьНаСервере()
	
	Результат = НовыйРезультатСменыДолжностиПодразделения();
	Результат.Успех = Истина; 
	
	ТребуетсяЗамещение = ЗначениеЗаполнено(СотрудникКоторомуПередаютДела);
	ПолноеЗамещение = Истина;
	ДеревоЗамещений = Неопределено;
	
	Если ТребуетсяЗамещение И Не ВсеФункции Тогда
		
		Для Каждого Строка Из ДеревоВопросовЗамещения.ПолучитьЭлементы() Цикл
			
			Если Строка.Пометка <> 1 Тогда
				
				ПолноеЗамещение = Ложь;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ПолноеЗамещение Тогда
			
			ДеревоЗамещений = РеквизитФормыВЗначение("ДеревоВопросовЗамещения", Тип("ДеревоЗначений"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка 
		
		ТребуетсяПерезаписатьВыбранноеПодразделение = СтанетРуководителемПодразделения
			Или (ЭтоРуководитель И Не ЗначениеЗаполнено(НовыйРуководительПодразделения));
		ТребуетсяПерезаписатьТекущееПодразделение = ЗначениеЗаполнено(НовыйРуководительПодразделения);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.РегистрыСведений.ИсполнителиРолей.ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Исполнитель", Сотрудник);
		
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.Справочники.Сотрудники.ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Сотрудник);
		
		Помощники = Неопределено;
		Если ПеренестиПомощников Тогда
			
			Помощники = ПомощникиСотрудника(Сотрудник);
			Если Не ОставитьПомощникамДоступКСтарымЗадачам Тогда
				
				Для Каждого Помощник Из Помощники Цикл
					ЭлементБлокировки = Блокировка.Добавить(Метаданные.Справочники.ЗамещающиеИПомощники.ПолноеИмя());
					ЭлементБлокировки.УстановитьЗначение("Ссылка", Помощник);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТребуетсяПерезаписатьВыбранноеПодразделение Тогда
			
			ЭлементБлокировки = Блокировка.Добавить(Метаданные.Справочники.СтруктураПредприятия.ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Подразделение);
			
		КонецЕсли;
		
		Если ТребуетсяПерезаписатьТекущееПодразделение Тогда
			
			ЭлементБлокировки = Блокировка.Добавить(Метаданные.Справочники.СтруктураПредприятия.ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ТекущееПодразделение);
			
		КонецЕсли;
		
		Блокировка.Заблокировать();
		
		ОбъектСотрудника = Сотрудник.ПолучитьОбъект();
		ОбъектСотрудника.ДатаОкончанияДействия = НачалоДня(Дата) - 1;
		ОбъектСотрудника.Записать();
		
		НовыйСотрудникОбъект = ОбъектСотрудника.Скопировать();
		НовыйСотрудникОбъект.ДатаНачалаДействия = Дата;
		НовыйСотрудникОбъект.ДатаОкончанияДействия = '00010101'; 
		НовыйСотрудникОбъект.Должность = Должность;
		НовыйСотрудникОбъект.Подразделение = Подразделение;
		НовыйСотрудникОбъект.Записать();
		
		СсылкаНаНовогоСотрудника = НовыйСотрудникОбъект.Ссылка;
		
		Результат.НовыйСотрудник = СсылкаНаНовогоСотрудника;
		
		Если ТребуетсяЗамещение Тогда
			
			НовоеЗамещение = Справочники.ЗамещающиеИПомощники.СоздатьЭлемент();
			НовоеЗамещение.ВидЗамещения = Перечисления.ВидыЗамещения.Замещающие;
			НовоеЗамещение.ДатаНачала = Дата;
			НовоеЗамещение.Создал = Сотрудники.ОсновнойСотрудник();
			НовоеЗамещение.Сотрудник = Сотрудник;
			НовоеЗамещение.Замещающий = СотрудникКоторомуПередаютДела;
			
			ЗамещающиеИПомощникиКлиентСервер.ЗаполнитьВопросыЗамещенияПоДаннымДерева(НовоеЗамещение, 
				ДеревоЗамещений, ПолноеЗамещение);
			
			НовоеЗамещение.Записать();
			
		КонецЕсли; 
		
		Если ТребуетсяПерезаписатьВыбранноеПодразделение Тогда
			
			ПодразделениеОбъект = Подразделение.ПолучитьОбъект();
			ПодразделениеОбъект.Руководитель = СсылкаНаНовогоСотрудника;
			ПодразделениеОбъект.Записать();
			
		КонецЕсли;
		
		Если ТребуетсяПерезаписатьТекущееПодразделение Тогда
			
			ТекущееПодразделениеОбъект = ТекущееПодразделение.ПолучитьОбъект();
			ТекущееПодразделениеОбъект.Руководитель = НовыйРуководительПодразделения;
			ТекущееПодразделениеОбъект.Записать();
			
		КонецЕсли;
		
		Если ПеренестиПомощников Тогда
			
			Для Каждого Помощник Из Помощники Цикл
				
				Если ОставитьПомощникамДоступКСтарымЗадачам Тогда
					ОбъектПомощник = Помощник.ПолучитьОбъект().Скопировать();
					ОбъектПомощник.ДатаНачала = Дата;
				Иначе
					ОбъектПомощник = Помощник.ПолучитьОбъект();
				КонецЕсли;
				
				ОбъектПомощник.Сотрудник = СсылкаНаНовогоСотрудника;
				ОбъектПомощник.Записать();
				
			КонецЦикла;
			
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ИсполнителиРолей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Исполнитель.Установить(Сотрудник);
		НаборЗаписей.Записать();
		
		Для Каждого СтрокаРоль Из РолиДляПередачи Цикл
			
			Роль = СтрокаРоль.Роль;
			НовыйИсполнитель = СтрокаРоль.НовыйИсполнитель;
			Если Не ЗначениеЗаполнено(НовыйИсполнитель) Тогда
				НовыйИсполнитель = СсылкаНаНовогоСотрудника;
			КонецЕсли;
			
			МенеджерЗаписи = РегистрыСведений.ИсполнителиРолей.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.РольИсполнителя = Роль;
			МенеджерЗаписи.Исполнитель = НовыйИсполнитель;
			МенеджерЗаписи.Записать();
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Пользователь) Тогда
			
			РегистрыСведений.СотрудникиПользователей.ДобавитьЗапись(Пользователь, СсылкаНаНовогоСотрудника);
			
		КонецЕсли;
		
		Если ОсновнойСотрудник И Дата <= ТекущаяДатаСеанса() Тогда
			
			РегистрыСведений.ОсновныеСотрудники.УстановитьОсновногоСотрудника(ФизЛицо, СсылкаНаНовогоСотрудника);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		Результат.Успех = Ложь;
		Результат.Ошибка = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Новый результат смены должности и/или подразделения
// 
// Возвращаемое значение:
//  Структура:
//   * Успех - Булево
//   * Ошибка - Строка
//   * НовыйСотрудник - СправочникСсылка.Сотрудники
//
&НаСервере
Функция НовыйРезультатСменыДолжностиПодразделения()
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("Ошибка", "");
	Результат.Вставить("НовыйСотрудник", Справочники.Сотрудники.ПустаяСсылка());
	
	Возврат Результат;
	
КонецФункции

// Устанавливает доступность опций передачи дел
//
&НаСервере
Процедура УстановитьДоступностьОпций()
	
	Элементы.ВсеФункции.Доступность = ЗначениеЗаполнено(СотрудникКоторомуПередаютДела);
	Элементы.ДеревоВопросовЗамещения.Доступность = 
		ЗначениеЗаполнено(СотрудникКоторомуПередаютДела) И Не ВсеФункции;
	Элементы.ПередачаРуководства.Видимость = ЭтоРуководитель;
	Элементы.СтанетРуководителемПодразделения.Доступность = 
		ИзменилПодразделение Или Не ЭтоРуководитель;
	Если Не Элементы.СтанетРуководителемПодразделения.Доступность Тогда
		СтанетРуководителемПодразделения = Ложь;
	КонецЕсли;
	Элементы.ОставитьПомощникамДоступКСтарымЗадачам.Доступность = ПеренестиПомощников;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораНовогоРуководителя(Результат, ДопПараметр) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		НовыйРуководительПодразделения = Результат;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает Истина, если у сотрудника есть помощники
//
// Параметры:
//  Сотрудник - СправочникСсылка.Сотрудники
// 
// Возвращаемое значение:
//  Булево
//
&НаСервереБезКонтекста
Функция ЕстьПомощники(Сотрудник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗамещающиеИПомощники.Сотрудник КАК Сотрудник
		|ИЗ
		|	Справочник.ЗамещающиеИПомощники КАК ЗамещающиеИПомощники
		|ГДЕ
		|	ЗамещающиеИПомощники.Сотрудник = &Сотрудник
		|	И ЗамещающиеИПомощники.ВидЗамещения = ЗНАЧЕНИЕ(Перечисление.ВидыЗамещения.Помощники)";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи.Следующий();
	
КонецФункции

// Возвращает все замещения с видом "Помощники" сотрудника
//
// Параметры:
//  Сотрудник - СправочникСсылка.Сотрудники
// 
// Возвращаемое значение:
//  Массив Из СправочникСсылка.ЗАмещающиеИПомощники
//
&НаСервереБезКонтекста
Функция ПомощникиСотрудника(Сотрудник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗамещающиеИПомощники.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЗамещающиеИПомощники КАК ЗамещающиеИПомощники
		|ГДЕ
		|	ЗамещающиеИПомощники.Сотрудник = &Сотрудник
		|	И ЗамещающиеИПомощники.ВидЗамещения = ЗНАЧЕНИЕ(Перечисление.ВидыЗамещения.Помощники)";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Заполняет ТЧ РолиДляПередачи ролями сотрудника
//
&НаСервере
Процедура ЗагрузитьРолиИсполнителяСотрудника()
	
	РолиСотрудника = РегистрыСведений.ИсполнителиРолей.РолиИсполнителя(Сотрудник);
	Для Каждого Роль Из РолиСотрудника Цикл
		
		НоваяСтрока = РолиДляПередачи.Добавить();
		НоваяСтрока.Роль = Роль;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработьОтветПриЗакрытии(Ответ, ДопПараметр) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗакрытьФорму = Истина;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти