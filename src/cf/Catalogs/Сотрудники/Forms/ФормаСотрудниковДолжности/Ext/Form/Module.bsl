#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.Отбор,
		"Должность",
		Параметры.Должность);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.Отбор,
		"Действует",
		Истина);
	
	НастроитьОформлениеСписка();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ПоказыватьНедействительныхСотрудников Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
			Список.Отбор,
			"Действует");
	Иначе	
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Список.Отбор,
			"Действует",
			Истина);
	КонецЕсли;
	
	Элементы.ФормаПоказыватьНедействительныхСотрудников.Пометка = ПоказыватьНедействительныхСотрудников;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Список

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)

	КэшДанныхСтрок = Новый Соответствие();
	СотрудникиВСтроках = Новый Массив;
	ФизЛицаВСтроках = Новый Массив;
	
	Для Каждого ДанныеСтроки Из Строки Цикл
		КэшДанныхСтрок[ДанныеСтроки.Значение.Данные.Ссылка] = ДанныеСтроки.Значение.Данные; 
		СотрудникиВСтроках.Добавить(ДанныеСтроки.Значение.Данные.Ссылка);
		Если Не ЗначениеЗаполнено(ДанныеСтроки.Значение.Данные.ВладелецСтрокой) Тогда
			ФизЛицаВСтроках.Добавить(ДанныеСтроки.Значение.Данные.Владелец);
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение ВладелецСтрокой
	
	НаименованияФизЛиц = 
		ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектовВПривилегированномРежиме(
			ФизЛицаВСтроках, "Наименование");
	Для Каждого Сотрудник Из СотрудникиВСтроках Цикл
		ДанныеСтроки = КэшДанныхСтрок[Сотрудник];
		Если Не ЗначениеЗаполнено(ДанныеСтроки.ВладелецСтрокой) Тогда
			ДанныеСтроки.ВладелецСтрокой = НаименованияФизЛиц[ДанныеСтроки.Владелец];
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение периода действия.
	Для Каждого Сотрудник Из СотрудникиВСтроках Цикл
		
		ДанныеСтроки = КэшДанныхСтрок[Сотрудник]; 
			
		ДатаНачалаДействия = Формат(ДанныеСтроки.ДатаНачалаДействия, "ДФ=dd.MM.yyyy");
		ДатаОкончанияДействия = Формат(ДанныеСтроки.ДатаОкончанияДействия, "ДФ=dd.MM.yyyy");
		
		Если ЗначениеЗаполнено(ДанныеСтроки.ДатаНачалаДействия)
			И ЗначениеЗаполнено(ДанныеСтроки.ДатаОкончанияДействия) Тогда
			
			ДанныеСтроки.ПериодДействия = СтрШаблон("%1 - %2",
				ДатаНачалаДействия, ДатаОкончанияДействия);
			
		ИначеЕсли ЗначениеЗаполнено(ДанныеСтроки.ДатаНачалаДействия) Тогда
			ДанныеСтроки.ПериодДействия = СтрШаблон("с %1", ДатаНачалаДействия);
		ИначеЕсли ЗначениеЗаполнено(ДанныеСтроки.ДатаОкончанияДействия) Тогда
			ДанныеСтроки.ПериодДействия = СтрШаблон("по %1", ДатаОкончанияДействия);
		КонецЕсли;
					
	КонецЦикла;
	
	// Заполнение Телефон, Email
	
	ВидыКонтактнойИнформации = Новый Массив;
	ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.EmailСотрудника);
	ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонСотрудника);
	
	КонтактнаяИнформацияСотрудников = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		СотрудникиВСтроках, Неопределено, ВидыКонтактнойИнформации);
	
	КонтактнаяИнформацияСотрудников.Индексы.Добавить("Объект");
	
	Для Каждого Сотрудник Из СотрудникиВСтроках Цикл
		
		КонтактнаяИнформацияСотрудника = КонтактнаяИнформацияСотрудников.НайтиСтроки(
			Новый Структура("Объект", Сотрудник));
		
		EmailСотрудника = Новый Массив;
		ТелефонСотрудника = Новый Массив;
		
		Для Каждого СтрокаКонтактнойИнформации Из КонтактнаяИнформацияСотрудника Цикл
			
			Если СтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.EmailСотрудника Тогда
				EmailСотрудника.Добавить(СтрокаКонтактнойИнформации.Представление);
			ИначеЕсли СтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонСотрудника Тогда
				ТелефонСотрудника.Добавить(СтрокаКонтактнойИнформации.Представление);
			КонецЕсли;
			
		КонецЦикла;
			
		ДанныеСтроки = КэшДанныхСтрок[Сотрудник];
		
		Если ЗначениеЗаполнено(EmailСотрудника) Тогда
			ДанныеСтроки.Email = СтрСоединить(EmailСотрудника, ", ");
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ТелефонСотрудника) Тогда
			ДанныеСтроки.Телефон = СтрСоединить(ТелефонСотрудника, ", ");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказыватьНедействительныхСотрудников(Команда)
	
	ПоказыватьНедействительныхСотрудников = Не ПоказыватьНедействительныхСотрудников;
	
	Элементы.ФормаПоказыватьНедействительныхСотрудников.Пометка = ПоказыватьНедействительныхСотрудников;
	
	Если ПоказыватьНедействительныхСотрудников Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(
			Список.Отбор,
			"Действует");
	Иначе	
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Список.Отбор,
			"Действует",
			Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастроитьОформлениеСписка()
	
	// Цвет недействительных.
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ТекстЗапрещеннойЯчейкиЦвет.Значение;
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.Действует");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("Список");
	ЭлементОформляемогоПоля.Использование = Истина;
	
	// Шрифт удаленных.
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементШрифтаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
	ЭлементШрифтаОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,,,, Истина);
	ЭлементШрифтаОформления.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.ПометкаУдаления");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("Список");
	ЭлементОформляемогоПоля.Использование = Истина;
	
КонецПроцедуры
#КонецОбласти