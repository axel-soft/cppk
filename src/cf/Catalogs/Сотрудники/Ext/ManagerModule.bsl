
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Представление сотрудника с учетом языка
//
// Параметры:
//  Данные - Структура:
// * Наименование - Строка
// * ПредставлениеДолжностиПодразделения - Строка
// * Должность - СправочникСсылка.Должности - Необязательно
// * Подразделение - СправочникСсылка.СтруктураПредприятия - Необязательно
//  СуффиксЯзыка - Строка - Например "Язык1", если пустой, то возвращает представление без учета языка
// 
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеСотрудникаСУчетомЯзыка(Данные, СуффиксЯзыка) Экспорт
	
	ИмяРеквизитаСПредставлением = "ПредставлениеДолжностиПодразделения" + СуффиксЯзыка;
	ИмяРеквизитаСФИО = "Наименование" + СуффиксЯзыка;
	
	Должность = Неопределено;
	Если Данные.Свойство("Должность") Тогда
		Должность = Данные.Должность;
	КонецЕсли;
	
	Подразделение = Неопределено;
	Если Данные.Свойство("Подразделение") Тогда
		Подразделение = Данные.Подразделение;
	КонецЕсли;
	
	Возврат СотрудникиВызовСервера.ПредставлениеСотрудника(Данные[ИмяРеквизитаСФИО], 
		Данные[ИмяРеквизитаСПредставлением], Должность, Подразделение);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Обновление

Процедура ЗаполнитьНаименованиеУСотрудников_3_0_8_7() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка,
		|	Сотрудники.Владелец
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Наименование = """"";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		СотрудникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СотрудникОбъект.Наименование = Строка(Выборка.Владелец);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СотрудникОбъект);
		РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Заполнение реквизита "ПредставлениеДолжностиПодразделения" РС ОбъектыПоискаВАдреснойКниге
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число.
//      ** ВсегоОбъектов - Число.
//
Процедура ЗаполнитьПредставленияДолжностиПодразделенияПриОбновлении(Параметры) Экспорт
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(Сотрудники.Ссылка) КАК ВсегоОбъектов
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.ПредставлениеДолжностиПодразделения = """"
			|	И НЕ(Сотрудники.Должность = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
			|				И Сотрудники.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.ВсегоОбъектов;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	Сотрудники.Ссылка КАК Ссылка,
		|	Сотрудники.Должность.Наименование КАК ДолжностьНаименование,
		|	Сотрудники.Должность.НаименованиеЯзык1 КАК ДолжностьНаименованиеЯзык1,
		|	Сотрудники.Должность.НаименованиеЯзык2 КАК ДолжностьНаименованиеЯзык2,
		|	Сотрудники.Подразделение.Наименование КАК ПодразделениеНаименование,
		|	Сотрудники.Подразделение.НаименованиеЯзык1 КАК ПодразделениеНаименованиеЯзык1,
		|	Сотрудники.Подразделение.НаименованиеЯзык2 КАК ПодразделениеНаименованиеЯзык2
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ПредставлениеДолжностиПодразделения = """"
		|	И НЕ(Сотрудники.Должность = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
		|				И Сотрудники.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Должность = Выборка.ДолжностьНаименование; // Строка
			Подразделение = Выборка.ПодразделениеНаименование; // Строка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.Сотрудники");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			ОбъектОбновления = Выборка.Ссылка.ПолучитьОбъект(); // СправочникОбъект.Сотрудники 
			Представление = "";
			Если ЗначениеЗаполнено(Подразделение) И ЗначениеЗаполнено(Должность) Тогда 
				Представление = СтрШаблон(" (%1, %2)", Подразделение, Должность);
			ИначеЕсли ЗначениеЗаполнено(Подразделение) Тогда
				Представление = СтрШаблон(" (%1)", Подразделение);
			ИначеЕсли ЗначениеЗаполнено(Должность) Тогда 
				Представление = СтрШаблон(" (%1)", Должность);
			КонецЕсли;
			
			Если Представление = "" Тогда
				Представление = "<>";
			КонецЕсли;
			
			ОбъектОбновления.ПредставлениеДолжностиПодразделения = Представление;
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныйЯзык1") Тогда
				Должность = Выборка.ДолжностьНаименованиеЯзык1; // Строка
				Подразделение = Выборка.ПодразделениеНаименованиеЯзык1; // Строка
				
				Если ЗначениеЗаполнено(Подразделение) И ЗначениеЗаполнено(Должность) Тогда 
					Представление = СтрШаблон(" (%1, %2)", Подразделение, Должность);
				ИначеЕсли ЗначениеЗаполнено(Подразделение) Тогда
					Представление = СтрШаблон(" (%1)", Подразделение);
				ИначеЕсли ЗначениеЗаполнено(Должность) Тогда 
					Представление = СтрШаблон(" (%1)", Должность);
				КонецЕсли;
				ОбъектОбновления.ПредставлениеДолжностиПодразделенияЯзык1 = Представление;
			КонецЕсли;
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныйЯзык2") Тогда
				Должность = Выборка.ДолжностьНаименованиеЯзык2; // Строка
				Подразделение = Выборка.ПодразделениеНаименованиеЯзык2; // Строка
				
				Если ЗначениеЗаполнено(Подразделение) И ЗначениеЗаполнено(Должность) Тогда 
					Представление = СтрШаблон(" (%1, %2)", Подразделение, Должность);
				ИначеЕсли ЗначениеЗаполнено(Подразделение) Тогда
					Представление = СтрШаблон(" (%1)", Подразделение);
				ИначеЕсли ЗначениеЗаполнено(Должность) Тогда 
					Представление = СтрШаблон(" (%1)", Должность);
				КонецЕсли;
				ОбъектОбновления.ПредставлениеДолжностиПодразделенияЯзык2 = Представление;
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектОбновления);
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Выборка.Ссылка.Метаданные(),
				Выборка.Ссылка,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ПерейтиНаВерсию_3_0_16_15 не удалось добавить представление должности %1 сотрудникам'"),
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = ОбработаноОбъектов = 0;
	
КонецПроцедуры 

#КонецОбласти

#Область КонтейнерыСотрудников

// Обновляет записи в РС СотрудникиВКонтейнерах по переданному сотруднику.
// 
// Параметры:
//	Сотрудник - СправочникОбъект.Сотрудники - Сотрудник, для которого нужно выполнить обновление. 
//
Процедура ОбновитьКонтейнерыСотрудников(Сотрудник) Экспорт
	
	КонтейнерыСотрудника = Новый Массив;
	
	Если Не Сотрудник.ПометкаУдаления Тогда
		Для Каждого ТипКонтейнера Из Метаданные.ОпределяемыеТипы.КонтейнерыСотрудников.Тип.Типы() Цикл
			МенеджерКонтейнера =
				ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Метаданные.НайтиПоТипу(ТипКонтейнера).ПолноеИмя());
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				КонтейнерыСотрудника, МенеджерКонтейнера.КонтейнерыСотрудника(Сотрудник.Ссылка));
		КонецЦикла;
	КонецЕсли;

	РегистрыСведений.СотрудникиВКонтейнерах.ЗаписатьКонтейнерыСотрудника(
		Сотрудник.Ссылка, КонтейнерыСотрудника);
	
КонецПроцедуры

// Возвращает состав сотрудников, входящих в указанный контейнер.
//
// Параметры:
//   Контейнер - СправочникСсылка.Сотрудники - контейнер сотрудников.
//
// Возвращаемое значение:
//   Массив - массив значений СправочникСсылка.Сотрудники - состав контейнера.
//
Функция СоставКонтейнераСотрудников(Контейнер) Экспорт
	
	Если Не ЗначениеЗаполнено(Контейнер) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Результат = Новый Массив;
	ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контейнер, "ПометкаУдаления");
	Если ПометкаУдаления <> Истина Тогда
		Результат.Добавить(Контейнер);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает контейнеры типа Сотрудники, которым принадлежит указанный сотрудник.
//
// Параметры:
//   Сотрудник - СправочникСсылка.Сотрудники - проверяемый сотрудник.
//
// Возвращаемое значение:
//   Массив - массив значений СправочникСсылка.Сотрудники -
//   	контейнеры, которым принадлежит сотрудник.
//
Функция КонтейнерыСотрудника(Сотрудник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ПометкаУдаления") = Истина Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Результат = Новый Массив;
	Результат.Добавить(Сотрудник);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КонтактнаяИнформация

// Обновляет виды контактной информации сотрдуников.
//
Процедура ОбновитьВидыКонтактнойИнформации() Экспорт
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации();
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонСотрудника;
	ПараметрыВида.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.ВидРедактирования = "ПолеВводаИДиалог";
	ПараметрыВида.ОбязательноеЗаполнение = Ложь;
	ПараметрыВида.Порядок = 1;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации();
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.EmailСотрудника;
	ПараметрыВида.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.ВидРедактирования = "ПолеВводаИДиалог";
	ПараметрыВида.ОбязательноеЗаполнение = Ложь;
	ПараметрыВида.Порядок = 2;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации();
	ПараметрыВида.Вид = Справочники.ВидыКонтактнойИнформации.SkypeСотрудника;
	ПараметрыВида.Тип = Перечисления.ТипыКонтактнойИнформации.Skype;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.ВидРедактирования = "ПолеВводаИДиалог";
	ПараметрыВида.ОбязательноеЗаполнение = Ложь;
	ПараметрыВида.Порядок = 3;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

// Обновляет использование контактной информации сотрдуников.
//
Процедура ОбновитьИспользованиеКонтактнойИнформации() Экспорт
	
	ОбновляемыйОбъект = Справочники.ВидыКонтактнойИнформации.СправочникСотрудники.ПолучитьОбъект();
	ОбновляемыйОбъект.Используется = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбновляемыйОбъект);
	
	ОбновляемыйОбъект = Справочники.ВидыКонтактнойИнформации.ТелефонСотрудника.ПолучитьОбъект();
	ОбновляемыйОбъект.Используется = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбновляемыйОбъект);
	
	ОбновляемыйОбъект = Справочники.ВидыКонтактнойИнформации.EmailСотрудника.ПолучитьОбъект();
	ОбновляемыйОбъект.Используется = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбновляемыйОбъект);
	
	ОбновляемыйОбъект = Справочники.ВидыКонтактнойИнформации.SkypeСотрудника.ПолучитьОбъект();
	ОбновляемыйОбъект.Используется = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбновляемыйОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Фото

// Вернет Истина, у этого объекта метаданных есть функция ПолучитьАдресФото
Функция ЕстьФункцияПолученияФото() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Прочитать фото и вернуть адрес (навигационную ссылку)
// Параметры:
//  Ссылка - ссылка на справочник, для которого надо показать фото
//  УникальныйИдентификатор - уникальный идентификатор формы, откуда идет вызов
//  ЕстьКартинка - возвращаемое значение - Булево - Истина, если в объекте есть картинка
//
// Возвращаемое значение:
//   Строка - навигационная ссылка - или "", если нет картинки
Функция ПолучитьАдресФото(Ссылка, УникальныйИдентификатор, ЕстьКартинка) Экспорт
	
	АдресКартинки = "";
	
	КонтейнерФотографии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Владелец");
	
	Если Не ЗначениеЗаполнено(КонтейнерФотографии) Тогда
		Возврат АдресКартинки;
	КонецЕсли;
	
	Если ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() 
		И Не ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(КонтейнерФотографии).Чтение Тогда
		Возврат АдресКартинки;
	КонецЕсли;
	
	АдресКартинки = РаботаСФотографиями.ПолучитьНавигационнуюСсылкуРеквизита(
		КонтейнерФотографии, УникальныйИдентификатор, ЕстьКартинка);
	
	Возврат АдресКартинки;
	
КонецФункции

// Возвращает двоичные данные фото сотрудника
//
Функция ПолучитьДвоичныеДанныеФото(Сотрудник) Экспорт
	
	КонтейнерФотографии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "Владелец");
	
	Если Не ЗначениеЗаполнено(КонтейнерФотографии) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа()
		И Не ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(КонтейнерФотографии).Чтение Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДвоичныеДанные = РаботаСФотографиями.ПолучитьДвоичныеДанныеРеквизита(
		КонтейнерФотографии, "ФайлФотографии");
	Если Не ЗначениеЗаполнено(ДвоичныеДанные) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДвоичныеДанные;
	
КонецФункции

#КонецОбласти

// Возвращает отслеживаемые реквизиты для дополнительного свойства ПредыдущиеЗначенияРеквизитов.
// Используется в процедуре ОбщегоНазначенияДокументооборот.УстановитьДополнительноеСвойствоПредыдущиеЗначенияРеквизитов
//
// Возвращаемое значение:
//  Строка - Отслеживаемые реквизиты.
//
Функция ОтслеживаемыеРеквизиты() Экспорт
	
	ОтслеживаемыеРеквизиты =
		"Владелец,
		|Наименование,
		|ПометкаУдаления,
		|Действует,
		|Подразделение,
		|Должность,
		|ПредставлениеВПереписке,
		|ПредставлениеВДокументах,
		|КонтактнаяИнформация";
	
	Возврат ОтслеживаемыеРеквизиты;
	
КонецФункции

#Область ОбновлениеДанныхКэширующихОбъектов

// Конструктор параметров обновления данных кэширующих объектов.
//
// Возвращаемое значение:
//	Структура:
//		* ОбновитьКонтейнерыСотрудников - Булево - Признак обновления данных контейнеров сотрудника.
//		* ПараметрыОбновленияАдреснойКниги - Структура Из КлючИЗначение - Параметры обновления адресной книги см. ПараметрыОбновленияАдреснойКниги.
//
Функция ПараметрыОбновленияДанныхКэширующихОбъектов() Экспорт
	
	ПараметрыОбновления = Новый Структура;	
	ПараметрыОбновления.Вставить("ОбновитьКонтейнерыСотрудников", Ложь);
	ПараметрыОбновления.Вставить("ПараметрыОбновленияАдреснойКниги", ПараметрыОбновленияАдреснойКниги());
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Устанавливает значения параметров обновления данных кэширующих объектов по данным объекта.
//
// Параметры:
//	Объект - СправочникОбъект.Сотрудники - Объект, для которго необходимо определить параметры обновления.
//
// Возвращаемое значение:
//	Структура: см. ПараметрыОбновленияДанныхКэширующихОбъектов.
//
Функция ЗначенияПараметровОбновленияДанныхКэширующихОбъектов(Объект) Экспорт
	
	ПараметрыОбновления = ПараметрыОбновленияДанныхКэширующихОбъектов();
	
	ПредыдущиеЗначенияРеквизитов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Объект.ДополнительныеСвойства, "ПредыдущиеЗначенияРеквизитов");
	
	СсылкаНаОбъект = Объект.Ссылка;
	
	Если Объект.ЭтоНовый() Тогда
		Если Объект.ПолучитьСсылкуНового().Пустая() Тогда // Установим ссылку нового, если ее нет
			СсылкаНаОбъект = ПолучитьСсылку(Новый УникальныйИдентификатор);
			Объект.УстановитьСсылкуНового(СсылкаНаОбъект);
		Иначе // Если ссылку нового уже установили ранее, возьмем ее
			СсылкаНаОбъект = Объект.ПолучитьСсылкуНового();
		КонецЕсли;
	КонецЕсли;
	
	Если ПредыдущиеЗначенияРеквизитов = Неопределено Тогда
		ПредыдущиеЗначенияРеквизитов =
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъект, ОтслеживаемыеРеквизиты());	
	КонецЕсли;
	
	Если Объект.ЭтоНовый()
			Или ПредыдущиеЗначенияРеквизитов.ПометкаУдаления <> Объект.ПометкаУдаления
			Или ПредыдущиеЗначенияРеквизитов.Подразделение <> Объект.Подразделение Тогда
		
		ПараметрыОбновления.ОбновитьКонтейнерыСотрудников = Истина;
	КонецЕсли;
		
	ПараметрыОбновления.ПараметрыОбновленияАдреснойКниги = ЗначенияПараметровОбновленияАдреснойКнигиПоОбъекту(Объект); 
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновляет данные зависимых объектов согласно установленным параметрам.
//
// Параметры:
//	Объект - СправочникОбъект.Сотрудники - Объект, по данным которого необходимо обновить адресной книги.
//	ПараметрыОбновления - Структура Из КлючИЗначение - см. ПараметрыОбновленияДанныхКэширующихОбъектов.
//
Процедура ОбновитьДанныеКэширующихОбъектов(Объект, ПараметрыОбновления) Экспорт
	
	Если ПараметрыОбновления.ОбновитьКонтейнерыСотрудников Тогда
		ОбновитьКонтейнерыСотрудников(Объект);
	КонецЕсли;
		
	ОбновитьАдреснуюКнигу(Объект, ПараметрыОбновления.ПараметрыОбновленияАдреснойКниги);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеАдреснойКниги

// Конструктор параметров обновления адресной книги.
//
// Возвращаемое значение:
//	Структура:
//		* ОбновитьДанныеОтображенияОбъекта - Булево - Признак обновления данных отображения.
//		* ОбновитьСловаПоискаПоОбъекту - Булево - Признак обновления слов поиска по объекту.
//		* ОбновитьДоступностьВПоискеПоОбъекту - Булево - Признак обновления доступности в результатах поиска.
//		* ОбновитьГруппуВсеСотрудники - Булево - Признак обновления сведений о группе "Все пользователи".
//		* ДолжностиДляОбновленияСловПоиска - Массив Из СправочникСсылка.Должности - Список должностей, для которых необходимо обновить слова поиска.
//		* ПодразделенияДляОбновленияСотрудников - Массив Из СправочникСсылка.СтруктураПредприятия - Список подразделений, в которых необходимо обновить сведения о сотрудниках.
//
Функция ПараметрыОбновленияАдреснойКниги() Экспорт
	
	ПараметрыОбновленияАдреснойКниги = Новый Структура;
	ПараметрыОбновленияАдреснойКниги.Вставить("ОбновитьДанныеОтображенияОбъекта", Ложь);
	ПараметрыОбновленияАдреснойКниги.Вставить("ОбновитьСловаПоискаПоОбъекту", Ложь);
	ПараметрыОбновленияАдреснойКниги.Вставить("ОбновитьДоступностьВПоискеПоОбъекту", Ложь);
	ПараметрыОбновленияАдреснойКниги.Вставить("ОбновитьГруппуВсеСотрудники", Ложь);
	ПараметрыОбновленияАдреснойКниги.Вставить("ДолжностиДляОбновленияСловПоиска", Новый Массив);
	ПараметрыОбновленияАдреснойКниги.Вставить("ПодразделенияДляОбновленияСотрудников", Новый Массив);
	
	Возврат ПараметрыОбновленияАдреснойКниги;
	
КонецФункции

// Устанавливает значения параметров обновления адресной книги по данным объекта.
//
// Параметры:
//	Объект - СправочникОбъект.Сотрудники - Объект, для которго необходимо определить параметры обновления.
//
// Возвращаемое значение:
//	Структура: см. ПараметрыОбновленияАдреснойКниги.
//
Функция ЗначенияПараметровОбновленияАдреснойКнигиПоОбъекту(Объект) Экспорт
	
	ПараметрыОбновленияАдреснойКниги = ПараметрыОбновленияАдреснойКниги();
		
	Если Не РаботаСАдреснойКнигой.ТребуетсяОбновлениеАдреснойКниги(Объект) Тогда
		Возврат ПараметрыОбновленияАдреснойКниги; 
	КонецЕсли;

	Если Объект.ЭтоНовый() Тогда
		ПараметрыОбновленияАдреснойКниги.ОбновитьГруппуВсеСотрудники = Истина;
		ПараметрыОбновленияАдреснойКниги.ОбновитьСловаПоискаПоОбъекту = Истина;
		
		Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
			ПараметрыОбновленияАдреснойКниги.ПодразделенияДляОбновленияСотрудников.Добавить(
				Объект.Подразделение);
			ПараметрыОбновленияАдреснойКниги.ДолжностиДляОбновленияСловПоиска.Добавить(
				Объект.Должность);
		КонецЕсли;
	Иначе
		ПредыдущиеЗначенияРеквизитов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			Объект.ДополнительныеСвойства, "ПредыдущиеЗначенияРеквизитов");
		
		Если ПредыдущиеЗначенияРеквизитов = Неопределено Тогда
			ПредыдущиеЗначенияРеквизитов =
				ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, ОтслеживаемыеРеквизиты());
			ПредыдущиеЗначенияРеквизитов.КонтактнаяИнформация =
				ПредыдущиеЗначенияРеквизитов.КонтактнаяИнформация.Выгрузить();
		КонецЕсли;
		
		Если ПредыдущиеЗначенияРеквизитов.ПометкаУдаления <> Объект.ПометкаУдаления
				Или ПредыдущиеЗначенияРеквизитов.Действует <> Объект.Действует Тогда
			
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОтображенияОбъекта = Истина;
			ПараметрыОбновленияАдреснойКниги.ОбновитьДоступностьВПоискеПоОбъекту = Истина;
		КонецЕсли;
		
		Если ПредыдущиеЗначенияРеквизитов.Владелец <> Объект.Владелец
				Или ПредыдущиеЗначенияРеквизитов.ПредставлениеВДокументах <> Объект.ПредставлениеВДокументах
				Или ПредыдущиеЗначенияРеквизитов.ПредставлениеВПереписке <> Объект.ПредставлениеВПереписке Тогда
			
			ПараметрыОбновленияАдреснойКниги.ОбновитьСловаПоискаПоОбъекту = Истина;
		КонецЕсли;
		
		Если ПредыдущиеЗначенияРеквизитов.Владелец <> Объект.Владелец
				Или ПредыдущиеЗначенияРеквизитов.ПредставлениеВПереписке <> Объект.ПредставлениеВПереписке Тогда
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОтображенияОбъекта = Истина;
		КонецЕсли;
		
		Если ПредыдущиеЗначенияРеквизитов.Подразделение <> Объект.Подразделение Тогда
			Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
				ПараметрыОбновленияАдреснойКниги.ПодразделенияДляОбновленияСотрудников.Добавить(
					Объект.Подразделение);
			КонецЕсли;
			Если ЗначениеЗаполнено(ПредыдущиеЗначенияРеквизитов.Подразделение) Тогда
				ПараметрыОбновленияАдреснойКниги.ПодразделенияДляОбновленияСотрудников.Добавить(
					ПредыдущиеЗначенияРеквизитов.Подразделение);
			КонецЕсли;
		КонецЕсли;
		
		Если ПредыдущиеЗначенияРеквизитов.Должность <> Объект.Должность Тогда
			Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
				ПараметрыОбновленияАдреснойКниги.ДолжностиДляОбновленияСловПоиска.Добавить(
					Объект.Должность);
			КонецЕсли;
			Если ЗначениеЗаполнено(ПредыдущиеЗначенияРеквизитов.Подразделение) Тогда
				ПараметрыОбновленияАдреснойКниги.ДолжностиДляОбновленияСловПоиска.Добавить(
					ПредыдущиеЗначенияРеквизитов.Должность);
			КонецЕсли;			
		КонецЕсли;	
		
		Если Не ПараметрыОбновленияАдреснойКниги.ОбновитьСловаПоискаПоОбъекту Тогда			
			СтараяКонтактнаяИнформация = 
				ПредыдущиеЗначенияРеквизитов.КонтактнаяИнформация.ВыгрузитьКолонку("Представление");
			НоваяКонтактнаяИнформация =
				Объект.КонтактнаяИнформация.Выгрузить().ВыгрузитьКолонку("Представление");
			
			Для Каждого Элемент ИЗ НоваяКонтактнаяИнформация Цикл
				Если СтараяКонтактнаяИнформация.Найти(Элемент) = Неопределено Тогда
					ПараметрыОбновленияАдреснойКниги.ОбновитьСловаПоискаПоОбъекту = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ПараметрыОбновленияАдреснойКниги.ОбновитьСловаПоискаПоОбъекту Тогда
				Для Каждого Элемент ИЗ СтараяКонтактнаяИнформация Цикл
					Если НоваяКонтактнаяИнформация.Найти(Элемент) = Неопределено Тогда
						ПараметрыОбновленияАдреснойКниги.ОбновитьСловаПоискаПоОбъекту = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыОбновленияАдреснойКниги;

КонецФункции

// Обновляет адресную книгу, согласно установленным параметрам.
//
// Параметры:
//	Объект - СправочникОбъект.АвтоподстановкиДляПроцессов - Объект, по данным которого необходимо обновить адресной книги.
//	ПараметрыОбновления - Структура Из КлючИЗначение - см. ПараметрыОбновленияАдреснойКниги.
//
Процедура ОбновитьАдреснуюКнигу(Объект, ПараметрыОбновления) Экспорт
	
	ЭтоОбновлениеСотрудника = (ТипЗнч(Объект) = Тип("СправочникОбъект.Сотрудники"));
	
	Если ПараметрыОбновления.ОбновитьГруппуВсеСотрудники Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Сотрудники.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники");
		СоставГруппыВсеСотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
		
		Справочники.АдреснаяКнига.РасширитьСписокСотрудниковРолями(СоставГруппыВсеСотрудники, Ложь);
		Справочники.АдреснаяКнига.ОбновитьСписокПодчиненныхОбъектов(
			Справочники.РабочиеГруппы.ВсеПользователи,
			Неопределено,
			СоставГруппыВсеСотрудники,
			Справочники.АдреснаяКнига.ПоРабочимГруппам,
			Неопределено,
			Истина);
		
	КонецЕсли;
		
	Если ПараметрыОбновления.ОбновитьДанныеОтображенияОбъекта Тогда
		Справочники.АдреснаяКнига.ОбновитьДанныеОтображенияПодчиненногоОбъекта(Объект.Ссылка);
	КонецЕсли;
	
	Если ПараметрыОбновления.ОбновитьСловаПоискаПоОбъекту Тогда
		РегистрыСведений.ОбъектыПоискаВАдреснойКниге.ОбновитьСловаПоискаПоСотруднику(Объект);
	КонецЕсли;
	
	Если ПараметрыОбновления.ОбновитьДоступностьВПоискеПоОбъекту Тогда
		РегистрыСведений.ОбъектыПоискаВАдреснойКниге.ОбновитьДоступностьВПоиске(Объект);
	КонецЕсли;
	
	Если ПараметрыОбновления.ДолжностиДляОбновленияСловПоиска.Количество() > 0 Тогда
		РеквизитыДолжностей = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			ПараметрыОбновления.ДолжностиДляОбновленияСловПоиска, "Ссылка, Наименование, ПометкаУдаления");
	
		Для Каждого Элемент Из РеквизитыДолжностей Цикл
			
			Если ЭтоОбновлениеСотрудника Тогда
				
				РегистрыСведений.ОбъектыПоискаВАдреснойКниге.ОбновитьСловаПоискаПоДолжностиСотрудника(Объект, Элемент.Значение);
				
			Иначе
				
				РегистрыСведений.ОбъектыПоискаВАдреснойКниге.ОбновитьСловаПоискаПоДолжности(Элемент.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПараметрыОбновления.ПодразделенияДляОбновленияСотрудников.Количество() > 0 Тогда
		Для Каждого Подразделение Из ПараметрыОбновления.ПодразделенияДляОбновленияСотрудников Цикл
			СотрудникиПодразделения = Сотрудники.СотрудникиПодразделения(Подразделение, Ложь, Ложь);
			Справочники.АдреснаяКнига.РасширитьСписокСотрудниковРолями(СотрудникиПодразделения);
			
			РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Подразделение, "Ссылка, Наименование, Родитель, ПометкаУдаления");
			
			Справочники.АдреснаяКнига.ОбновитьСписокПодчиненныхОбъектов(
				Подразделение,
				РеквизитыПодразделения.Родитель,
				СотрудникиПодразделения,
				Справочники.АдреснаяКнига.ПоСтруктуреПредприятия,
				Неопределено,
				Истина);
				
			Если ЭтоОбновлениеСотрудника Тогда
				РегистрыСведений.ОбъектыПоискаВАдреснойКниге.ОбновитьСловаПоискаПоПодразделениюСотрудника(Объект, 
					РеквизитыПодразделения);
			Иначе
				РегистрыСведений.ОбъектыПоискаВАдреснойКниге.ОбновитьСловаПоискаПоПодразделению(РеквизитыПодразделения);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеКэширующихДанных

// Обрабатывает обновление кэширующих данных.
// 
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса - Выборка из очереди обновления кэширующих данных:
//   * ОтметкаВремени - ОпределяемыйТип.ОтметкаВремени.
//   * ЗависимыйОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//   * ВлияющийОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//   * КлючВлияющихДанных - ЛюбаяСсылка.
//   * Автор - СправочникСсылка.Пользователи.
//   * ЗагрузкаОбработанныхДанныхИзДругойСистемы - Булево.
//   * ИзмененияВлияющихДанных - ХранилищеЗначения.
//   * Попыток - Число.
//   * ДатаКОбработке - Дата.
// 
Процедура ОбновитьКэширующиеДанные(Выборка) Экспорт
	
	ОбновитьПредставленияСотрудниковПриИзмененииНаименованияПодразделенияДолжности(Выборка.КлючВлияющихДанных);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Наименование");
	Поля.Добавить("Должность");
	Поля.Добавить("Подразделение");
	Поля.Добавить("ПредставлениеДолжностиПодразделения");
	Поля.Добавить("ПредставлениеДолжностиПодразделенияЯзык1");
	Поля.Добавить("ПредставлениеДолжностиПодразделенияЯзык2");
	
	МультиязычностьКлиентСервер.ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка);
	
КонецПроцедуры

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Представление = ПредставлениеСотрудникаСУчетомЯзыка(Данные, МультиязычностьСервер.СуффиксТекущегоЯзыка());
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Текст = Параметры.СтрокаПоиска;
	СловаПоиска = ОбщегоНазначенияДокументооборот.СловаПоиска(Текст);
	ДанныеВыбора = Новый СписокЗначений;
	
	ОтборПоПодразделению = Ложь;
	Подразделение = Неопределено;
	Если Параметры.Отбор.Свойство("Подразделение") Тогда
		ОтборПоПодразделению = Истина;
		Подразделение = Параметры.Отбор.Подразделение;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наименование", Текст + "%");
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 20
		|	Сотрудники.Владелец КАК ФизЛицо,
		|	Сотрудники.Наименование КАК Наименование,
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.Подразделение КАК Подразделение,
		|	Сотрудники.Должность КАК Должность
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	&УсловиеПоСсылке
		|	И Сотрудники.Наименование ПОДОБНО &Наименование
		|	И Сотрудники.ПометкаУдаления = ЛОЖЬ
		|	И Сотрудники.Действует = ИСТИНА
		|	И &УсловиеПоПодразделению";
	
	ОбъектМетаданных = Метаданные.Справочники.Сотрудники;
	Если Не МультиязычностьПовтИсп.КонфигурацияИспользуетТолькоОдинЯзык(ОбъектМетаданных.ТабличныеЧасти.Найти("Представления") = Неопределено) Тогда
		
		Если МультиязычностьСервер.ИспользуетсяПервыйДополнительныйЯзык() Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
				"Сотрудники.Наименование ПОДОБНО &Наименование",
				"(Сотрудники.Наименование ПОДОБНО &Наименование ИЛИ Сотрудники.НаименованиеЯзык1 ПОДОБНО &Наименование)");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтборПоПодразделению Тогда
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса, "&УсловиеПоПодразделению", "Сотрудники.Подразделение = &Подразделение");
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Иначе
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса, "&УсловиеПоПодразделению", "ИСТИНА");
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("Ссылка") И ЗначениеЗаполнено(Параметры.Отбор.Ссылка) Тогда
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса, "&УсловиеПоСсылке", "Сотрудники.Ссылка В(&Ссылка)");
		Запрос.УстановитьПараметр("Ссылка", Параметры.Отбор.Ссылка);
	Иначе
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса, "&УсловиеПоСсылке", "ИСТИНА");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПредставлениеФорматированнаяСтрока = ОбщегоНазначенияДокументооборот.ФорматированныйРезультатПоиска(
			Выборка.Наименование,
			СловаПоиска);
		
		Если ЗначениеЗаполнено(Выборка.Подразделение) Или ЗначениеЗаполнено(Выборка.Должность) Тогда 
			
			ДобавкаТекст = Сотрудники.ПредставлениеПодразделенияИДолжностиСотрудника(
				Выборка.Подразделение, Выборка.Должность);
			
			ПредставлениеФорматированнаяСтрока = Новый ФорматированнаяСтрока(
				ПредставлениеФорматированнаяСтрока, 
				Новый ФорматированнаяСтрока(ДобавкаТекст, 
					, WebЦвета.Серый));
				
			ДанныеВыбора.Добавить(Выборка.Сотрудник, ПредставлениеФорматированнаяСтрока);
			
		Иначе	
			
			ДанныеВыбора.Добавить(Выборка.Сотрудник, ПредставлениеФорматированнаяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если (ВидФормы = "ФормаВыбора" 
		И Не Параметры.Свойство("ПростаяФормаВыбора"))
		Или (ВидФормы = "ФормаСписка"
			И Параметры.Свойство("РежимВыбора")
			И Параметры.РежимВыбора) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ВыбраннаяФорма = "Справочник.АдреснаяКнига.ФормаСписка";
		
		Параметры.Вставить("РежимРаботыФормы", 1);
		Параметры.Вставить("УпрощенныйИнтерфейс", Истина);
		Параметры.Вставить("ОтображатьСотрудников", Истина);
		Параметры.Вставить("ПодменятьПользователейСотрудниками", Истина);
		Если Параметры.Свойство("ЭтоАвтор") И Параметры.ЭтоАвтор Тогда
			Параметры.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор автора'"));
		Иначе
			Параметры.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор сотрудника'"));
		КонецЕсли;
		
		Если Параметры.Свойство("ВыборГруппПользователей")
			И Параметры.ВыборГруппПользователей = Истина Тогда
			Параметры.Вставить("ВыбиратьКонтейнерыПользователей", Истина);
		КонецЕсли;
		
		Если Параметры.Свойство("ТекущаяСтрока") Тогда
			Параметры.Вставить("ВыбранныеАдресаты", Параметры.ТекущаяСтрока);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обновляет представления сотрудников при изменении наименования подразделения или должности
//
// Параметры:
//  Ключ - СправочникСсылка.СтруктураПодразделения, СправочникСсылка.Должности
//
Процедура ОбновитьПредставленияСотрудниковПриИзмененииНаименованияПодразделенияДолжности(Ключ)
	
	Запрос = Новый Запрос;
	Если ТипЗнч(Ключ) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Подразделение = &Ключ";
		
	ИначеЕсли ТипЗнч(Ключ) = Тип("СправочникСсылка.Должности") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Должность = &Ключ";
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ключ", Ключ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.Сотрудники");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			Блокировка.Заблокировать();
			
			СотрудникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СотрудникОбъект.ДополнительныеСвойства.Вставить("ОбновлениеПриИзмененииНаименованияДолжностиПодразделения", Истина);
			СотрудникОбъект.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ВызватьИсключение; 
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
