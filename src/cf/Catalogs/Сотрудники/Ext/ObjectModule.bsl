#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает пустую структуру данных для заполнения.
//
// Возвращаемое значение:
//  Структура
//   * ФизЛицо - СправочникСссылка.ФизическиеЛица - физ. лицо.
//   * ДатаНачалаДействия - Дата
//   * ДатаОкончанияДействия - Дата
//   * Должность - СправочникСсылка.Должности
//   * Помещение - СправочникСсылка.ТерриторииИПомещения
//   * Подразделение - СправочникСсылка.СтруктураПредприятия
//
Функция СтруктураДанныхДляЗаполнения() Экспорт
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ФизЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
	СтруктураДанных.Вставить("ДатаНачалаДействия", Дата(1,1,1));
	СтруктураДанных.Вставить("ДатаОкончанияДействия", Дата(1,1,1));
	СтруктураДанных.Вставить("Должность", Справочники.Должности.ПустаяСсылка());
	СтруктураДанных.Вставить("Помещение", Справочники.ТерриторииИПомещения.ПустаяСсылка());
	СтруктураДанных.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	СтруктураДанных.Вставить("ГрафикРаботы", Справочники.ГрафикиРаботы.ПустаяСсылка());
	СтруктураДанных.Вставить("ПредставлениеВДокументах", "");
	СтруктураДанных.Вставить("ПредставлениеВПереписке ", "");
	
	Возврат СтруктураДанных;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеКэширующихДанных

// Обрабатывает изменение влияющих данных, формирует очередь обновления кэширующих данных.
//
Процедура ОбработатьИзменениеВлияющихДанных() Экспорт
	
	ВлияющийОбъектМетаданных = "Справочник.Сотрудники";
	КлючВлияющихДанных = Ссылка;
	
	ЗависимыйОбъектМетаданных = "Справочник.ГруппировкиЗадач";
	ВлияющиеРеквизиты = "Наименование, Должность, Подразделение";
	ОбновлениеКэширующихДанных.ОбработатьИзменениеВлияющихДанных(
		ЭтотОбъект,
		ЗависимыйОбъектМетаданных,
		ВлияющийОбъектМетаданных,
		КлючВлияющихДанных,
		ВлияющиеРеквизиты);
	
	ЗависимыйОбъектМетаданных = "РегистрСведений.ИсполнителиРолей";
	ВлияющиеРеквизиты = "ПометкаУдаления";
	ОбновлениеКэширующихДанных.ОбработатьИзменениеВлияющихДанных(
		ЭтотОбъект,
		ЗависимыйОбъектМетаданных,
		ВлияющийОбъектМетаданных,
		КлючВлияющихДанных,
		ВлияющиеРеквизиты);
	
	ЗависимыйОбъектМетаданных = "Документ.ДействиеЗадачи";
	ВлияющиеРеквизиты = "ПометкаУдаления, Подразделение";
	ОбновлениеКэширующихДанных.ОбработатьИзменениеВлияющихДанных(
		ЭтотОбъект,
		ЗависимыйОбъектМетаданных,
		ВлияющийОбъектМетаданных,
		КлючВлияющихДанных,
		ВлияющиеРеквизиты,
		"Исполнитель");
	
	ЗависимыйОбъектМетаданных = "Документ.ДействиеЗадачи";
	ВлияющиеРеквизиты = "ПометкаУдаления, Подразделение";
	ОбновлениеКэширующихДанных.ОбработатьИзменениеВлияющихДанных(
		ЭтотОбъект,
		ЗависимыйОбъектМетаданных,
		ВлияющийОбъектМетаданных,
		КлючВлияющихДанных,
		ВлияющиеРеквизиты,
		"ОсобыйАвтор");
	
	ЗависимыйОбъектМетаданных = "Документ.Задача";
	ВлияющиеРеквизиты = "ПометкаУдаления";
	ОбновлениеКэширующихДанных.ОбработатьИзменениеВлияющихДанных(
		ЭтотОбъект,
		ЗависимыйОбъектМетаданных,
		ВлияющийОбъектМетаданных,
		КлючВлияющихДанных,
		ВлияющиеРеквизиты);
	
	ЗависимыйОбъектМетаданных = "Справочник.СтруктураПредприятия";
	ВлияющиеРеквизиты = "ПометкаУдаления";
	ОбновлениеКэширующихДанных.ОбработатьИзменениеВлияющихДанных(
		ЭтотОбъект,
		ЗависимыйОбъектМетаданных,
		ВлияющийОбъектМетаданных,
		КлючВлияющихДанных,
		ВлияющиеРеквизиты);
	
	ЗависимыйОбъектМетаданных = "Справочник.Проекты";
	ВлияющиеРеквизиты = "ПометкаУдаления";
	ОбновлениеКэширующихДанных.ОбработатьИзменениеВлияющихДанных(
		ЭтотОбъект,
		ЗависимыйОбъектМетаданных,
		ВлияющийОбъектМетаданных,
		КлючВлияющихДанных,
		ВлияющиеРеквизиты);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Заполняет наименование сотрудника по представлению владельца.
//
Процедура ЗаполнитьНаименование() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовоеНаименование = Строка(Владелец);
	
	Если НовоеНаименование <> Наименование Тогда
		Наименование = НовоеНаименование;
	КонецЕсли;
	
	Если Не МультиязычностьПовтИсп.КонфигурацияИспользуетТолькоОдинЯзык(Ложь) Тогда
		
		НаименованиеЯзык1 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец, "НаименованиеЯзык1");
		Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец, "Наименование");
		
	КонецЕсли;	
		
КонецПроцедуры

// Заполняет представления сотрудника.
//
// Параметры:
//  ОбновлениеПриИзмененииНаименованияДолжностиПодразделения - Булево
//
Процедура ЗаполнитьПредставления(ОбновлениеПриИзмененииНаименованияДолжностиПодразделения=Ложь) Экспорт
	
	ОбщегоНазначенияДокументооборот.УстановитьДополнительноеСвойствоПредыдущиеЗначенияРеквизитов(ЭтотОбъект);
	
	Если Не ОбновлениеПриИзмененииНаименованияДолжностиПодразделения Тогда
		ПредыдущиеЗначенияРеквизитов = ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов;
		
		Если Не ЗначениеЗаполнено(ПредставлениеВДокументах) Тогда
			НовоеПредставлениеВДокументах = СокрЛП(Наименование);
		ИначеЕсли Не ДополнительныеСвойства.ЭтоНовый
			И ПредыдущиеЗначенияРеквизитов.Наименование <> Наименование
			И Сотрудники.ПредставлениеВДокументахПоФИО(ПредыдущиеЗначенияРеквизитов.Наименование) = 
				ПредыдущиеЗначенияРеквизитов.ПредставлениеВДокументах Тогда
			
			НовоеПредставлениеВДокументах = Сотрудники.ПредставлениеВДокументахПоФИО(Наименование);
		Иначе
			НовоеПредставлениеВДокументах = СокрЛП(ПредставлениеВДокументах);
		КонецЕсли;
		Если ПредставлениеВДокументах <> НовоеПредставлениеВДокументах Тогда
			ПредставлениеВДокументах = НовоеПредставлениеВДокументах;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПредставлениеВПереписке) Тогда
			НовоеПредставлениеВПереписке = СокрЛП(Наименование);
		ИначеЕсли Не ДополнительныеСвойства.ЭтоНовый
			И ПредыдущиеЗначенияРеквизитов.Наименование <> Наименование
			И СокрЛП(ПредыдущиеЗначенияРеквизитов.Наименование) = 
				ПредыдущиеЗначенияРеквизитов.ПредставлениеВПереписке Тогда
			
			НовоеПредставлениеВПереписке = СокрЛП(Наименование);
		Иначе
			НовоеПредставлениеВПереписке = СокрЛП(ПредставлениеВПереписке);
		КонецЕсли;
		Если ПредставлениеВПереписке <> НовоеПредставлениеВПереписке Тогда
			ПредставлениеВПереписке = НовоеПредставлениеВПереписке;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбновлениеПриИзмененииНаименованияДолжностиПодразделения
		Или Не ЗначениеЗаполнено(ПредставлениеДолжностиПодразделения)
		Или ПредыдущиеЗначенияРеквизитов.Должность <> Должность
		Или ПредыдущиеЗначенияРеквизитов.Подразделение <> Подразделение Тогда
		
		Если ОбщегоНазначения.СсылкаСуществует(Должность)
			И ОбщегоНазначения.СсылкаСуществует(Подразделение) Тогда
			
			ИспользуетсяЯзык1 = МультиязычностьСервер.ИспользуетсяПервыйДополнительныйЯзык();
			ИспользуетсяЯзык2 = МультиязычностьСервер.ИспользуетсяВторойДополнительныйЯзык();
			
			ПредставлениеДолжностиПодразделения =
				Сотрудники.ПредставлениеПодразделенияИДолжностиСотрудникаСУчетомЯзыка(Подразделение, Должность, "");
			
			Если ИспользуетсяЯзык1 Тогда
				
				ПредставлениеДолжностиПодразделенияЯзык1 =
					Сотрудники.ПредставлениеПодразделенияИДолжностиСотрудникаСУчетомЯзыка(Подразделение, Должность, "Язык1");
				
			КонецЕсли;
			
			Если ИспользуетсяЯзык2 Тогда
				
				ПредставлениеДолжностиПодразделенияЯзык2 =
					Сотрудники.ПредставлениеПодразделенияИДолжностиСотрудникаСУчетомЯзыка(Подразделение, Должность, "Язык2");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		// Заполняем согласно СтруктураДанныхДляЗаполнения.
		
		Если ДанныеЗаполнения.Свойство("ФизЛицо")
			И Владелец <> ДанныеЗаполнения.ФизЛицо Тогда
			
			Владелец = ДанныеЗаполнения.ФизЛицо;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ДатаНачалаДействия")
			И ДатаНачалаДействия <> ДанныеЗаполнения.ДатаНачалаДействия Тогда
			
			ДатаНачалаДействия = ДанныеЗаполнения.ДатаНачалаДействия;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ДатаОкончанияДействия")
			И ДатаОкончанияДействия <> ДанныеЗаполнения.ДатаОкончанияДействия Тогда
			
			ДатаОкончанияДействия = ДанныеЗаполнения.ДатаОкончанияДействия;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Должность")
			И Должность <> ДанныеЗаполнения.Должность Тогда
			
			Должность = ДанныеЗаполнения.Должность;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Подразделение")
			И Подразделение <> ДанныеЗаполнения.Подразделение Тогда
			
			Подразделение = ДанныеЗаполнения.Подразделение;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ГрафикРаботы")
			И ГрафикРаботы <> ДанныеЗаполнения.ГрафикРаботы Тогда
			
			ГрафикРаботы = ДанныеЗаполнения.ГрафикРаботы;
		КонецЕсли;

		Если ДанныеЗаполнения.Свойство("Помещение")
			И Помещение <> ДанныеЗаполнения.Помещение Тогда
			
			Помещение = ДанныеЗаполнения.Помещение;
		КонецЕсли;

		Если ДанныеЗаполнения.Свойство("ПредставлениеВДокументах")
			И ПредставлениеВДокументах <> ДанныеЗаполнения.ПредставлениеВДокументах Тогда
			
			ПредставлениеВДокументах = ДанныеЗаполнения.ПредставлениеВДокументах;
		КонецЕсли;

		Если ДанныеЗаполнения.Свойство("ПредставлениеВПереписке")
			И ПредставлениеВПереписке <> ДанныеЗаполнения.ПредставлениеВПереписке Тогда
			
			ПредставлениеВПереписке = ДанныеЗаполнения.ПредставлениеВПереписке;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеПриИзмененииНаименованияДолжностиПодразделения =
		ДополнительныеСвойства.Свойство("ОбновлениеПриИзмененииНаименованияДолжностиПодразделения")
		И ДополнительныеСвойства.ОбновлениеПриИзмененииНаименованияДолжностиПодразделения;
	
	ПроверитьКорректностьЗаполненияПередЗаписью();
	
	// Запоминаем предыдущие значения реквизитов для проверки на изменении в обработчиках ПриЗаписи.
	ОбщегоНазначенияДокументооборот.УстановитьДополнительноеСвойствоПредыдущиеЗначенияРеквизитов(ЭтотОбъект);
	
	Если Не ОбновлениеПриИзмененииНаименованияДолжностиПодразделения Тогда
		ЗаполнитьНаименование();
	КонецЕсли;
	
	ЗаполнитьПредставления(ОбновлениеПриИзмененииНаименованияДолжностиПодразделения);
	
	ДополнительныеСвойства.Вставить("ДействуетПрежнее", Действует);
	
	// Проверка изменения контактной информации.
	Если Не ЭтоНовый() Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СотрудникиКонтактнаяИнформация.Представление КАК Представление
		|ИЗ
		|	Справочник.Сотрудники.КонтактнаяИнформация КАК СотрудникиКонтактнаяИнформация
		|ГДЕ
		|	СотрудникиКонтактнаяИнформация.Ссылка = &Ссылка
		|	И СотрудникиКонтактнаяИнформация.Вид <> ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)");
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = КонтактнаяИнформация.Количество() Тогда
			Пока Выборка.Следующий() Цикл
				Если КонтактнаяИнформация.Найти(Выборка.Представление) = Неопределено Тогда
					ДополнительныеСвойства.Вставить("КонтактнаяИнформацияИзменена", Истина);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ДополнительныеСвойства.Вставить("КонтактнаяИнформацияИзменена", Истина);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПризнакДействует();
	
	ДополнительныеСвойства.Вставить(
		"ПараметрыОбновленияДанныхКэширующихОбъектов",
		Справочники.Сотрудники.ЗначенияПараметровОбновленияДанныхКэширующихОбъектов(ЭтотОбъект));
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеПриИзмененииНаименованияДолжностиПодразделения =
		ДополнительныеСвойства.Свойство("ОбновлениеПриИзмененииНаименованияДолжностиПодразделения")
		И ДополнительныеСвойства.ОбновлениеПриИзмененииНаименованияДолжностиПодразделения;
	
	Справочники.Сотрудники.ОбновитьДанныеКэширующихОбъектов(
		ЭтотОбъект, ДополнительныеСвойства.ПараметрыОбновленияДанныхКэширующихОбъектов);
	
	РегистрыСведений.ИсполнителиРолейИДелегаты.ОбновитьЗаписиПоСотруднику(Ссылка);
	
	Если Не ОбновлениеПриИзмененииНаименованияДолжностиПодразделения Тогда
		
		УстановитьСнятьПометкуУдаленияПользователя();
		Если ДополнительныеСвойства.ДействуетПрежнее <> Действует Тогда
			Сотрудники.ПодобратьИУстановитьОсновногоСотрудника(Владелец);
		КонецЕсли;
		
		Справочники.ФактическиеИсполнители.УстановитьСнятьПометкуУдаленияФактическогоИсполнителя(ЭтотОбъект);
		
		// При переименовании может измениться кэш "ДанныеДокументовПредприятия":
		ПредыдущиеЗначенияРеквизитов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ДополнительныеСвойства, "ПредыдущиеЗначенияРеквизитов");
			
		Если ПредыдущиеЗначенияРеквизитов <> Неопределено И ПредыдущиеЗначенияРеквизитов.ПометкаУдаления <> ПометкаУдаления Тогда
			ПротоколированиеРаботыСотрудников.ЗаписатьПометкуУдаления(Ссылка, ПометкаУдаления);
		КонецЕсли;
		
		Если ПредыдущиеЗначенияРеквизитов <> Неопределено Тогда
			ИзменилосьНаименование = (ЗначениеЗаполнено(ПредыдущиеЗначенияРеквизитов.Наименование)
				И ПредыдущиеЗначенияРеквизитов.Наименование <> Наименование);
			ИзменилосьПодразделение = (ЗначениеЗаполнено(ПредыдущиеЗначенияРеквизитов.Подразделение)
				И ПредыдущиеЗначенияРеквизитов.Подразделение <> Подразделение);
			ИзмениласьДолжность = (ЗначениеЗаполнено(ПредыдущиеЗначенияРеквизитов.Должность)
				И ПредыдущиеЗначенияРеквизитов.Должность <> Должность);
			Если ИзменилосьНаименование Или ИзменилосьПодразделение Или ИзмениласьДолжность Тогда
				Делопроизводство.ЗаписатьДанныеДокументовПредприятия_ПереименованиеАдресата(Ссылка);
			КонецЕсли;
		КонецЕсли;
		
		Если ДополнительныеСвойства.Свойство("КонтактнаяИнформацияИзменена") Тогда
			Справочники.ШаблоныДвухфакторнойАутентификации.ПриИзмененииСоставаКонтейнеров(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка));
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработатьИзменениеВлияющихДанных();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет реквизит объекта Действует по периоду действия
// (ДатаНачалаДействия, ДатаОкончанияДействия) сотрдуника.
//
Процедура ЗаполнитьПризнакДействует()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	СотрудникДействует = Истина;
	
	Если ПометкаУдаления Тогда
		СотрудникДействует = Ложь;
	ИначеЕсли ТекущаяДатаСеанса < ДатаНачалаДействия Тогда
		СотрудникДействует = Ложь;
	ИначеЕсли ЗначениеЗаполнено(ДатаОкончанияДействия) И ТекущаяДатаСеанса > КонецДня(ДатаОкончанияДействия) Тогда
		СотрудникДействует = Ложь;
	КонецЕсли;
	
	Если Действует <> СотрудникДействует Тогда
		Действует = СотрудникДействует;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет корректно заполнения объекта перед записью.
// В случае ошибок вызывает исключение.
//
Процедура ПроверитьКорректностьЗаполненияПередЗаписью()
	
	Если Не СотрудникиКлиентСервер.ПериодДействияЗаполненКорректно(
		ДатаНачалаДействия, ДатаОкончанияДействия) Тогда
		
		ВызватьИсключение СотрудникиКлиентСервер.ОписаниеОшибкиНекорректногоЗаполненияПериодаДействия();
	КонецЕсли;
		
	СсылкаНаСотрудника = Сотрудники.СсылкаНаСотрудникаПоПараметрам(
		Владелец, Подразделение, Должность, ДатаНачалаДействия, ДатаОкончанияДействия);
	Если ЗначениеЗаполнено(СсылкаНаСотрудника) И СсылкаНаСотрудника <> Ссылка Тогда
		ВызватьИсключение СотрудникиКлиентСервер.ОписаниеОшибкиСотрудникНеУникален();
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСнятьПометкуУдаленияПользователя()

	СотрудникиФизЛица = Сотрудники.ВсеСотрудникиФизЛица(Владелец);
	Если СотрудникиФизЛица.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПользователиСотрудника = Сотрудники.ПользователиСотрудника(Ссылка);
	Если ПользователиСотрудника.Количество() = 0 Или ПользователиСотрудника.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательДляПометки = ПользователиСотрудника[0];
	КоличествоСотрудниковПользователяНеСчитаяЭтого = 
		Сотрудники.СотрудникиПользователя(ПользовательДляПометки).Количество() - ?(Действует, 1, 0);
	
	Если КоличествоСотрудниковПользователяНеСчитаяЭтого > 0 Тогда
		Возврат;
	КонецЕсли;;
	
	ПометкаУдаленияПользователя =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПользовательДляПометки, "ПометкаУдаления");
	
	Если ПометкаУдаления = ПометкаУдаленияПользователя Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.Пользователи");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ПользовательДляПометки);
		Блокировка.Заблокировать();
		ПользовательДляПометки.ПолучитьОбъект().УстановитьПометкуУдаления(ПометкаУдаления);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли