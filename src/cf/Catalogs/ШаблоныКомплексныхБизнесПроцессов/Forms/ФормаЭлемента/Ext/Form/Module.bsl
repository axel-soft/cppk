#Область ОписаниеПеременных

#Область ДоступностьШаблоновПроцессов

&НаКлиенте
Перем НеПоказыватьВопросОНедоступномШаблоне;

#КонецОбласти

&НаКлиенте
Перем ЗакрытьФормуПослеВопросаОСохранении;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		РаботаСКомплекснымиБизнесПроцессамиСервер.ПрочитатьСхемуВФорму(ЭтотОбъект, Объект);
		НастроитьДоступностьРедактированияСхемы(ЭтотОбъект);
	КонецЕсли;	
	
	РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.НастроитьЭлементыРедактированияМаршрута(ЭтотОбъект);

	// Протоколирование работы пользователей
	ПротоколированиеРаботыСотрудников.ЗаписатьОткрытие(Объект.Ссылка);
	
	УстановитьДоступностьЭлементовПоПравуДоступа();
	
	ИдентификаторЭтапа = Параметры.ИдентификаторЭтапа;
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ВладелецШаблона = Параметры.ВладелецШаблона;
	КонецЕсли;
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ШаблонПриСозданииНаСервере(ЭтотОбъект);
	
	// Инициализация формы механизмом комплексных процессов 
	Если Объект.Ссылка.Пустая() Тогда
		ЗаголовокФормы = НСтр("ru = 'Комплексный процесс (Создание)'");
		
		Если Не РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект)
			И Не ЗначениеЗаполнено(Объект.ВариантМаршрутизации) Тогда
			Объект.ВариантМаршрутизации = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда 
			Объект.Ответственный = СотрудникиВызовСервера.ОсновнойСотрудникПользователя(
				Пользователи.ТекущийПользователь());
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Автор) Тогда 
			Объект.Автор = Справочники.Сотрудники.ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Комплексный процесс ""%1""'"), 
			Объект.НаименованиеБизнесПроцесса);
	КонецЕсли;
	РаботаСКомплекснымиБизнесПроцессамиСервер.КарточкаШаблонаБизнесПроцессаПриСозданииНаСервере(
		ЭтотОбъект, 
		ЗаголовокФормы);

	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Важность) Тогда
			Объект.Важность = Перечисления.ВариантыВажностиОбъектов.Обычная;
		КонецЕсли;
	КонецЕсли;
	
	Копирование = ЗначениеЗаполнено(Параметры.ЗначениеКопирования);
	
	// Инициализация видимости в сроке выполнения
	ИспользоватьВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	
	// Учет переносов сроков выполнения
	ПереносСроковВыполненияЗадач.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	// Отложенный старт.
	СтартПроцессовСервер.КарточкаШаблонаПриСозданииНаСервере(ЭтотОбъект);
	
	// Сроки выполнения
	УстановитьУсловноеОформлениеИстекшихСроков();
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	
	Параметры.Свойство("ДатаОтсчетаДляРасчетаСроков", ДатаОтсчетаДляРасчетаСроков);
	
	Элементы.СрокИсполненияДействияПредставление.Ширина =
		СрокиИсполненияПроцессовКОРП.ШиринаПоляСрокИсполненияДействияКомплексногоПроцесса(ЭтотОбъект);
		
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда
				СтрокаЗаменыДляВсплывающейПодсказки = НСтр("ru = '(по графику работ)'");
		
		Элементы.СрокИсполненияДействияПредставление.Подсказка = СтрЗаменить(
			Элементы.СрокИсполненияДействияПредставление.Подсказка,
			СтрокаЗаменыДляВсплывающейПодсказки, "");
			
		Элементы.СрокИсполненияПроцессаПредставление.Подсказка = СтрЗаменить(
			Элементы.СрокИсполненияПроцессаПредставление.Подсказка,
			СтрокаЗаменыДляВсплывающейПодсказки, "");
		
	КонецЕсли;
	
	ОбновитьСрокиИсполненияНаСервере();
	
	ВестиУчетПлановыхТрудозатратВБизнесПроцессах = ПолучитьФункциональнуюОпцию("ВестиУчетПлановыхТрудозатратВБизнесПроцессах");
	Элементы.ОписаниеТрудозатрат.Видимость = ВестиУчетПлановыхТрудозатратВБизнесПроцессах;
		
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(ЭтотОбъект);
	КонецЕсли;
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	
	Мультипредметность.ШаблонПриСозданииНаСервере(ЭтотОбъект, Объект);
	
	// Заполнение трудозатрат
	ЕдиницаТрудозатрат = Константы.ОсновнаяЕдиницаТрудозатрат.Получить();
	ЗаполнитьОписаниеТрудозатрат(ЭтотОбъект);
	
	// Заголовки команд
	РаботаСБизнесПроцессамиВызовСервера.УстановитьЗаголовкиКомандШаблонаБизнесПроцесса(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.СтандартныеКомандыФормы;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Настроим доступность редактирование схемы.
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НастроитьДоступностьРедактированияСхемы(ЭтотОбъект);
	КонецЕсли;
	
	// Настроим отображение группы доступности шаблона.
	ШаблоныБизнесПроцессов.НастроитьОбластьДоступностиШаблонов(ЭтотОбъект);
	
	НастроитьФормуДляШаблонаПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПодключитьОбработчикОжидания("ВыбратьВариантРедактированияМаршрута", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Модифицированность И ЗакрытьФормуПослеВопросаОСохранении <> Истина Тогда
		
		Отказ = Истина;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПродолжитьЗаписьНеСохраненныхИзменений", ЭтотОбъект);
		
		ТекстВопрос = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопрос,
			РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Да);
		
		Возврат;
		
	КонецЕсли;
	
	ПоказатьВопросОНедоступномШаблоне(Отказ);
	
КонецПроцедуры

// Продолжение процедуры ПередЗакрытием.
//
&НаКлиенте
Процедура ПродолжитьЗаписьНеСохраненныхИзменений(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ТекстОповещения = НСтр("ru = 'Изменение'")
		Иначе
			ТекстОповещения = НСтр("ru = 'Создание'")
		КонецЕсли;
		
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			ТекстОповещения,
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
	ЗакрытьФормуПослеВопросаОСохранении = Истина;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СозданиеДействия" Тогда
		
		Если ЭтотОбъект = Источник
			Или Параметр.ВладелецШаблона <> Объект.Ссылка Тогда
			
			Возврат;
		КонецЕсли;
		
		Если РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект) Тогда
			ДатаОтсчетаДляДействия = Дата(1,1,1);
			Параметр.Свойство("ДатаОтсчетаДляРасчетаСроков", ДатаОтсчетаДляДействия);
			ЗавершитьНастройкуДействияВложенногоПроцессаСхемы(
				Параметр.ШаблонБП, Параметр.Предметы, ДатаОтсчетаДляДействия);
		Иначе
			ПрименитьНастройкиДействия(Параметр);
			РаботаСКомплекснымиБизнесПроцессамиКлиент.ВычислитьОписаниеПредшественников(Объект);
			Модифицированность = Истина;
		КонецЕсли;
		
		МультипредметностьКлиент.ПредметыШаблонаПриАктивизацииСтроки(ЭтотОбъект, Объект);
		СтрокиТочек = ТочкиМаршрута.ПолучитьЭлементы();
		Для Каждого Строка Из СтрокиТочек Цикл
			Элементы.ТочкиМаршрута.Развернуть(Строка.ПолучитьИдентификатор(), Ложь);
		КонецЦикла;
		
		ОтключитьДоступностьШаблона();
		
	ИначеЕсли ИмяСобытия = "ВыборШаблонаДействия" Тогда
		
		Если Объект.Ссылка <> Параметр.ВладелецШаблона Тогда
			Возврат;
		КонецЕсли;
		
		Если РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект) Тогда
			ДатаОтсчетаДляДействия = Дата(1,1,1);
			Параметр.Свойство("ДатаОтсчетаДляРасчетаСроков", ДатаОтсчетаДляДействия);
			
			ЗавершитьНастройкуДействияВложенногоПроцессаСхемы(
				Параметр.ШаблонБП, Параметр.Предметы, ДатаОтсчетаДляДействия);
		Иначе
			ПараметрыВозврата = СкопироватьШаблонВНастройкиПроцессаИПолучитьИмяФормы(
				Параметр.ШаблонБП, Параметр.ВладелецШаблона);
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("Ключ", ПараметрыВозврата.Шаблон);
			ПараметрыФормы.Вставить("ВладелецШаблона", Параметр.ВладелецШаблона);
			ПараметрыФормы.Вставить("ИдентификаторЭтапа", Параметр.ИдентификаторЭтапа);
			ПараметрыФормы.Вставить("Предметы", Параметр.Предметы);
			Если Параметр.Свойство("ДатаОтсчетаДляРасчетаСроков") Тогда
				ПараметрыФормы.Вставить("ДатаОтсчетаДляРасчетаСроков",
					Параметр.ДатаОтсчетаДляРасчетаСроков);
			КонецЕсли;
			ОткрытьФорму(ПараметрыВозврата.ИмяФормыДляОткрытия, ПараметрыФормы, ЭтотОбъект);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "НастройкаПорядкаВыполнения" Тогда
		Если Объект.Ссылка <> Параметр.ВладелецЭтапа Тогда
			Возврат;
		КонецЕсли;
		ДанныеЭтапа = Элементы.Этапы.ТекущиеДанные;
		ДанныеЭтапа.ПредшественникиВариантИспользования = Параметр.ПредшественникиВариантИспользования;
		РаботаСКомплекснымиБизнесПроцессамиКлиент.УстановитьПредшественниковЭтапа(Объект, ДанныеЭтапа.ИдентификаторЭтапа, Параметр.Предшественники);
		РаботаСКомплекснымиБизнесПроцессамиКлиент.ВычислитьОписаниеПредшественников(Объект);
		
		РеквизитСИзмененнымСроком = "Этапы";
		ИдентификаторыИзмененныхДействий.Добавить(Параметр.ИдентификаторЭтапа);
		
		ОчиститьДатуОтсчетаДляРасчетаСроков(ЭтотОбъект);
		ОбновитьСрокиИсполненияОтложенно();
		
		Модифицированность = Истина;
	ИначеЕсли ИмяСобытия = "ОбновитьТрудозатратыУчастниковПроцесса" И Источник = ЭтотОбъект Тогда
		ЗаполнитьОписаниеТрудозатрат(ЭтотОбъект);
	КонецЕсли;
	
	// Сроки выполнения
	СрокиИсполненияПроцессовКлиент.ОбработкаОповещенияПослеПереносаСрока(
		ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	РаботаСКомплекснымиБизнесПроцессамиСервер.ПрочитатьСхемуВФорму(ЭтотОбъект, ТекущийОбъект);
	НастроитьДоступностьРедактированияСхемы(ЭтотОбъект);	
	
	Если Не РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект) Тогда
		РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(ЭтотОбъект);
	КонецЕсли;
		
	// Рабочие группы
	РаботаСРабочимиГруппами.ПриЧтенииНаСервере(ЭтотОбъект);
	
	// Формирование исходной рабочей группы.
	Участники = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	ИсходнаяРабочаяГруппа.Очистить();
	Для каждого Эл Из Участники Цикл
		
		Строка = ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник; 
		Строка.Изменение = Эл.Изменение;
		
	КонецЦикла;
			
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПрочитатьДоступностьШаблона();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Отложенный старт.
	СтартПроцессовКлиент.КарточкаШаблонаПередЗаписью(ЭтотОбъект);
		
	РаботаСКомплекснымиБизнесПроцессамиКлиент.ФормаНастройкиДействияПередЗаписью(ЭтотОбъект, Отказ);

	Если РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект) Тогда
		СхемыПроцессовКлиент.ПоказатьРезультатПроверкиСхемыВФорме(ЭтотОбъект);
	Иначе
		
		Если ЭтапыКУдалению.Количество() > 0 Тогда
			УдалитьЭтапы();
			ЭтапыКУдалению.Очистить();
		КонецЕсли;
		
		РаботаСКомплекснымиБизнесПроцессамиКлиент.ВычислитьОписаниеПредшественников(Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Запишем схему и выполним проверку процесса.
	// Если проверка не проходит, тогда отменяем запись схемы и восстановливаем ее состояние в форме.
	
	КопияДанныхСхемы =
		РаботаСКомплекснымиБизнесПроцессамиСервер.СкопироватьДанныеСхемыПроцессыИзФормы(
		ЭтотОбъект, ТекущийОбъект);
		
	НачатьТранзакцию();
		
	РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаписатьСхемуПроцессаИзФормы(
		ЭтотОбъект, ТекущийОбъект);
	
	ПроверятьЗаполнение = Истина;
	Если ПараметрыЗаписи.Свойство("НеПроверятьЗаполнение") Тогда
		ПроверятьЗаполнение = Не ПараметрыЗаписи.НеПроверятьЗаполнение;
	КонецЕсли;
	
	Если Отказ Или (ПроверятьЗаполнение И Не ПроверитьЗаполнение()) Тогда
		ОтменитьТранзакцию();
		РаботаСКомплекснымиБизнесПроцессамиСервер.ВосстановитьСхемуПроцессаИзКопииДанных(
			ЭтотОбъект, ТекущийОбъект, КопияДанныхСхемы);
		Отказ = Истина; // На случае если, до условия отказ имел значение Ложь.
		Возврат;
	Иначе
		ЗафиксироватьТранзакцию();		
	КонецЕсли;
	
	СрокиИсполненияПроцессовКОРП.ЗаписатьРассчитанныеТочныеСрокиКомплексногоПроцессаПоСхеме(
		ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
		
	Если Не РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект) Тогда
		ПараметрыЗаписи.Вставить("СрокиЭтапов",
			СрокиИсполненияПроцессов.СрокиДействийПроцесса(Объект.Этапы, "ИдентификаторЭтапа"));
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	// Рабочая группа
	РабочаяГруппаТаблицаКоличество = РабочаяГруппаТаблица.Количество();
	Для Инд = 1 По РабочаяГруппаТаблицаКоличество Цикл
		Строка = РабочаяГруппаТаблица[РабочаяГруппаТаблицаКоличество - Инд];
		Если Не ЗначениеЗаполнено(Строка.Участник) Тогда 
			РабочаяГруппаТаблица.Удалить(Строка);
		КонецЕсли;	
	КонецЦикла;
	
	НоваяРабочаяГруппа = РабочаяГруппаТаблица.Выгрузить();
	РабочаяГруппаДобавить = Новый Массив;
	РабочаяГруппаУдалить = Новый Массив;
	
	// Формирование списка удаленных участников рабочей группы
	Для каждого Эл Из ИсходнаяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для каждого Эл2 Из НоваяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.Изменение = Эл2.Изменение Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не Найден Тогда
			РабочаяГруппаУдалить.Добавить(
				Новый Структура("Участник, Изменение", 
					Эл.Участник,
					Эл.Изменение));
		КонецЕсли;
		
	КонецЦикла;	
	
	// Формирование списка добавленных участников рабочей группы
	Для каждого Эл Из НоваяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для каждого Эл2 Из ИсходнаяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.Изменение = Эл2.Изменение Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не Найден Тогда
			РабочаяГруппаДобавить.Добавить(
				Новый Структура("Участник, Изменение", 
					Эл.Участник,
					Эл.Изменение));
		КонецЕсли;
		
	КонецЦикла;	
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаУдалить", РабочаяГруппаУдалить);	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаДобавить", РабочаяГруппаДобавить);
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьДоступностьШаблона(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПротоколированиеРаботыСотрудников.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(Объект.Ссылка);
	
	Если Не РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект) Тогда
		СрокиЭтапов = ПараметрыЗаписи.СрокиЭтапов;
		РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(ЭтотОбъект);
		СрокиИсполненияПроцессов.ЗаполнитьСрокиВТаблицеДействий(СрокиЭтапов, Объект.Этапы, "ИдентификаторЭтапа");
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Истина);
	Если Объект.ШаблонВКомплексномПроцессе Тогда
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Комплексный процесс ""%1""'"), 
			Объект.НаименованиеБизнесПроцесса);
	КонецЕсли;
		
	// Рабочая группа
	РаботаСРабочимиГруппами.ОбъектПослеЗаписиНаСервере(ЭтотОбъект, ПараметрыЗаписи);
	
	// Формирование исходной рабочей группы.
	Участники = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	ИсходнаяРабочаяГруппа.Очистить();
	Для каждого Эл Из Участники Цикл
		
		Строка = ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник; 
		Строка.Изменение = Эл.Изменение;
		
	КонецЦикла;
	
	МультипредметностьКлиентСервер.ЗаполнитьТаблицуПредметовФормы(Объект);
	МультипредметностьКлиентСервер.ЗаполнитьОписаниеПредметовШаблона(Объект);
	
	ОбновитьПризнакиИстекшихСроков();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если Объект.ШаблонВКомплексномПроцессе Тогда
		РаботаСКомплекснымиБизнесПроцессамиКлиент.ОповеститьПослеЗаписиНастройкиДействия(ЭтотОбъект);
	КонецЕсли;
	
	Оповестить("Запись_ШаблонПроцесса", Объект.Ссылка);
	
	ШаблоныБизнесПроцессовКлиент.ПоказатьОповещениеПослеЗаписиШаблона(ЭтотОбъект);
	
	СрокиИсполненияПроцессовКлиентКОРП.ПоказатьСообщениеОЗавершенииРасчетаСроков(ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область Наименование

&НаКлиенте
Процедура НаименованиеБизнесПроцессаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

    Если ЭтотОбъект.Объект.ШаблонВКомплексномПроцессе Тогда  
        РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтотОбъект, "НаименованиеБизнесПроцесса",
		    ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессКомплексныйНаименование"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеБизнесПроцессаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) и ЭтотОбъект.Объект.ШаблонВКомплексномПроцессе Тогда 
		ДанныеВыбора = РаботаСШаблонамиТекстовСервер.СформироватьДанныеВыбораШаблона(
			ПараметрыПолученияДанных, 
			ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессКомплексныйНаименование"));
			
		Если ДанныеВыбора.Количество() <> 0 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеБизнесПроцессаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")  Тогда 
		Объект.НаименованиеБизнесПроцесса = ВыбранноеЗначение.Шаблон;
		Модифицированность = Истина;	
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область Контролер

&НаКлиенте
Процедура КонтролерПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.УчастникПриИзменении(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникНачалоВыбора(
		Элемент, Объект.Контролер, СтандартнаяОбработка, ЭтотОбъект, "Контролер");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОчистка(Элемент, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникОчистка(СтандартнаяОбработка,
		ЭтотОбъект, "Контролер");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОткрытие(Элемент, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникОткрытие(СтандартнаяОбработка,
		ЭтотОбъект, "Контролер");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникОбработкаВыбора(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(Объект, "Контролер", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.
		УчастникОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка,
			ЭтотОбъект, "Контролер");
	
КонецПроцедуры

#КонецОбласти

#Область СхемаПроцесса

&НаКлиенте
Процедура СхемаПриИзменении(Элемент)
	
	СхемыПроцессовКлиент.ОбновитьДанныеСхемыВФорме(
		ЭтотОбъект, 
		Новый ОписаниеОповещения("ОбработатьОбновлениеДанныхСхемы", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СхемаВыбор(Элемент)
	
	Если Элементы.Схема.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	СхемыПроцессовКлиент.ОбновитьТекущийЭлементВДанныхСхемыПриФорме(ЭтотОбъект);
	
	ИмяЭлементаСхемы =
		СхемыПроцессовКлиентСервер.ИмяТекущегоЭлементаСхемыПоЕеДаннымВФорме(ЭтотОбъект);
			
	ТипЭлементаСхемы = СхемыПроцессовКлиент.ТипЭлементаСхемыПоДаннымСхемыВФорме(
		ИмяЭлементаСхемы, ЭтотОбъект);
	
	РаботаСКомплекснымиБизнесПроцессамиКлиент.НастроитьПараметрыЭлементаСхемы(
		ЭтотОбъект, ИмяЭлементаСхемы, ТипЭлементаСхемы,
		Новый ОписаниеОповещения("ЗавершитьВыборЭлементаСхемы", ЭтотОбъект));
		
КонецПроцедуры

// Продолжение СхемаВыбор.
//
&НаКлиенте
Процедура ЗавершитьВыборЭлементаСхемы(Результат, ДополнительныеПараметры) Экспорт
	
	ОтключитьДоступностьШаблона();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ГруппаНастройкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаРеквизитыПроцесса
		И РеквизитСИзмененнымСроком = "Схема" Тогда
		
		ОбновитьСрокиИсполненияОтложенно();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНедоступенДляЗапускаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	ОшибкиПроверкиДоступности = ПроверитьДоступностьШаблона();
	
	Если Не ТолькоПросмотр Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	ЭтоШаблонПроцесса = Не ЗначениеЗаполнено(Объект.ВладелецШаблона);
	
	Если Не ДоступенРучнойЗапускПоШаблону И Не ДоступенАвтоматическийЗапускПоШаблону Тогда
		
		ВывестиОшибкиПроверкиДоступности(ОшибкиПроверкиДоступности);
		
		Если ЭтоШаблонПроцесса Тогда
			ТекстПредупреждения = НСтр("ru = 'Шаблон не прошел проверку.
				|Исправьте обнаруженные ошибки (см. панель Сообщения).'");
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Действие не прошло проверку.
				|Исправьте обнаруженные ошибки (см. панель Сообщения).'");
		КонецЕсли;
		
	ИначеЕсли ДоступенРучнойЗапускПоШаблону И Не ДоступенАвтоматическийЗапускПоШаблону Тогда
		
		Если ЭтоШаблонПроцесса Тогда
			ТекстПредупреждения = НСтр("ru = 'Шаблон прошел проверку и доступен для запуска процессов вручную.
				|Для автоматического запуска процессов заполните обязательные поля.'");
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Действие прошло проверку.
				|Но не заполнены поля для автоматического запуска.'");
		КонецЕсли;
		
	Иначе
		
		Если ЭтоШаблонПроцесса Тогда
			ТекстПредупреждения = НСтр("ru = 'Шаблон прошел проверку и доступен для запуска процессов.'");
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Действие настроено корректно.'");
		КонецЕсли;
		
	КонецЕсли;
	
	ПоказатьПредупреждение(, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРучнойЗапускОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	ВывестиОшибкиПроверкиДоступности(НезаполненныеПоляНеобходимыеДляСтарта());
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СотрудникиКлиент.ВыбратьСотрудникаИзАдреснойКниги(Элемент, Объект.Ответственный);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(Объект, "Ответственный", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(Объект, "Автор", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВажностьПриИзменении(Элемент)
	
	Если Объект.Важность = ПредопределенноеЗначение("Перечисление.ВариантыВажностиОбъектов.Высокая")
		ИЛИ Объект.Важность = ПредопределенноеЗначение("Перечисление.ВариантыВажностиОбъектов.Низкая") Тогда
		УстановитьВажностьВсехЭтапов(Объект.Важность);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВариантМаршрутизацииПриИзменении(Элемент)
	
	ВариантМаршрутизацииПриИзмененииСервер();
	РаботаСКомплекснымиБизнесПроцессамиКлиент.ВычислитьОписаниеПредшественников(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОтложенногоСтартаНажатие(Элемент, СтандартнаяОбработка)
	
	СтартПроцессовКлиент.ОписаниеОтложенногоСтартаНажатие(ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеТрудозатратНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Настройки = Новый Структура;
	Настройки.Вставить("ЕдиницаИзмеренияТрудозатрат", ЕдиницаТрудозатрат);
	Настройки.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	Настройки.Вставить("Участники", Новый Массив);
	
	ТрудозатратыКонтролера = РаботаСБизнесПроцессамиКлиент.
		СтруктураСтрокиТрудозатратУчастникаПроцесса(
			НСтр("ru = 'Контролер'"),
			"ТрудозатратыПланКонтролера",
			Объект.ТрудозатратыПланКонтролера,
			Объект.Контролер);
	Настройки.Участники.Добавить(ТрудозатратыКонтролера);
	
	РаботаСБизнесПроцессамиКлиент.НастроитьТрудозатратУчастниковПроцесса(ЭтотОбъект, Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    Если ЭтотОбъект.Объект.ШаблонВКомплексномПроцессе Тогда  
        РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтотОбъект, "Описание",
		    ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессКомплексныйОписание"));
        КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура СрокИсполненияПроцессаПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДатаОтсчетаДляРасчетаСроков = ТекущаяДата();
	ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРабочаяГруппа

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСАдреснойКнигойКлиент.ВыбратьУчастникаРабочейГруппы(ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСРабочимиГруппамиКлиент.ДокументРабочаяГруппаУчастникАвтоПодбор(
		Элемент,
		Текст,
		ДанныеВыбора,
		Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СотрудникиКлиент.ОбработкаВыбораКонтейнера(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриНачалеРедактирования(Элемент, НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриОкончанииРедактирования(
		ЭтотОбъект,
		Элемент,
		ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалением(Элемент, Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РабочаяГруппаТаблицаПередУдалениемПродолжение",
		ЭтотОбъект);
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаТаблицаПередУдалением(ЭтотОбъект, Отказ, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	ТаблицаРГ = Элементы.РабочаяГруппаТаблица;
	Для Каждого Индекс Из ТаблицаРГ.ВыделенныеСтроки Цикл
		РабочаяГруппаТаблица.Удалить(ТаблицаРГ.ДанныеСтроки(Индекс));
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭтапы

&НаКлиенте
Процедура ЭтапыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Поле.Имя <> "ЭтапыПредшественникиЭтапаСтрокой" Тогда
		ИзменитьДействие(Неопределено);
	Иначе
		РаботаСКомплекснымиБизнесПроцессамиКлиент.ОткрытьФормуНастройкиПредшественниковЭтапа(Объект, Элемент.ТекущиеДанные, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИзменитьДействие(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Не РаботаСКомплекснымиБизнесПроцессамиКлиент.
		ЗаписатьНовыйПроцессПередНастройкойПодчиненногоЭлемента(ЭтотОбъект) Тогда
		
		Возврат;
	КонецЕсли;
	
	ДатаОтсчета = Дата(1,1,1);
	Если ЗначениеЗаполнено(ДатаОтсчетаДляРасчетаСроков) Тогда
		ДатаОтсчета = СрокиИсполненияПроцессовКлиентСерверКОРП.
			ДатаОтсчетаНовогоДействияКомплексногоПроцессаВФорме(ЭтотОбъект);
	КонецЕсли;
	
	РаботаСКомплекснымиБизнесПроцессамиКлиент.ОткрытьФормуВыбораДействияЭтапа(
		Неопределено, 
		ЭтотОбъект, 
		Объект.Ссылка, 
		Объект.Предметы,
		ДатаОтсчета);

КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПередУдалением(Элемент, Отказ)
	
 	Отказ = Истина;
	
	ДанныеЭтапа = Элементы.Этапы.ТекущиеДанные;
	Если ДанныеЭтапа = Неопределено Тогда	
		Возврат;
	КонецЕсли;
	
	НаЭтапЕстьСсылки = Ложь;
	Для Каждого Строка Из Объект.ПредшественникиЭтапов Цикл
		Если Строка.ИдентификаторПредшественника = ДанныеЭтапа.ИдентификаторЭтапа Тогда
			НаЭтапЕстьСсылки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НаЭтапЕстьСсылки Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Внимание! От данного действия зависит порядок выполнения других действий.
						|Удалить действие ""%1""?'"),
			ДанныеЭтапа.ЗадачаЭтапа);
	Иначе	
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Удалить действие ""%1""?'"),
			ДанныеЭтапа.ЗадачаЭтапа);
	КонецЕсли;
	Режим = Новый СписокЗначений;
	Режим.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить'"));
	Режим.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не удалять'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЭтапыПередУдалениемПродолжение", ЭтотОбъект, ДанныеЭтапа);
	
	ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса, Режим, 0, КодВозвратаДиалога.Нет);
		
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПередУдалениемПродолжение(Ответ, ДанныеЭтапа) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураУдаляемогоЭтапа = Новый Структура();
	СтруктураУдаляемогоЭтапа.Вставить("ЗадачаЭтапа", ДанныеЭтапа.ЗадачаЭтапа);
	СтруктураУдаляемогоЭтапа.Вставить("ИдентификаторЭтапа", ДанныеЭтапа.ИдентификаторЭтапа);
	Элементы.Этапы.ТекущиеДанные.Удален = Истина;
	ЭтапыКУдалению.Добавить(СтруктураУдаляемогоЭтапа);
	РаботаСКомплекснымиБизнесПроцессамиКлиент.ВычислитьОписаниеПредшественников(Объект);
	Для Счетчик = 1 по Объект.Этапы.Количество() - 1 Цикл
		Этап = Объект.Этапы[Счетчик]; 
		Если Не ПустаяСтрока(Этап.ПредшественникиЭтапаСтрокой) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Объект.ПредшественникиЭтапов.Добавить();
		НоваяСтрока.ИдентификаторПоследователя = Объект.Этапы[Счетчик].ИдентификаторЭтапа;
		
		НовыйПредшественникПодобран = Ложь;
		Для Индекс = 1 по Счетчик Цикл
			ДействительныйИндекс = Счетчик - Индекс;
			Если Не Объект.Этапы[ДействительныйИндекс].Удален Тогда
				НоваяСтрока.ИдентификаторПредшественника = Объект.Этапы[ДействительныйИндекс].ИдентификаторЭтапа;	
				НовыйПредшественникПодобран = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ НовыйПредшественникПодобран Тогда
			НоваяСтрока.ИдентификаторПредшественника = УникальныйИдентификаторПустой();	
		КонецЕсли;
		
		НоваяСтрока.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения");
		
		РеквизитСИзмененнымСроком = "Этапы";
		ИдентификаторыИзмененныхДействий.Добавить(Объект.Этапы[Счетчик].ИдентификаторЭтапа);
	КонецЦикла;
	РаботаСКомплекснымиБизнесПроцессамиКлиент.ВычислитьОписаниеПредшественников(Объект);
	
	ОчиститьДатуОтсчетаДляРасчетаСроков(ЭтотОбъект);
	ОбновитьСрокиИсполненияОтложенно();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПриИзменении(Элемент)
	
	РаботаСКомплекснымиБизнесПроцессамиКлиент.ВычислитьОписаниеПредшественников(Объект);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПриАктивизацииСтроки(Элемент)
	
	ДанныеЭтапа = Элемент.ТекущиеДанные;
	Если ДанныеЭтапа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущийЭтап = ДанныеЭтапа.ИдентификаторЭтапа;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПослеУдаления(Элемент)
	
	ПослеУдаленияДействия();	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредметы

&НаКлиенте
Процедура ПредметыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	МультипредметностьКлиент.ПредметыШаблонаИзменитьПредмет(ЭтотОбъект, Объект, ВыбраннаяСтрока, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	МультипредметностьКлиент.ПредметыШаблонаПередНачаломДобавления(ЭтотОбъект, Объект, Отказ, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередУдалением(Элемент, Отказ)
	
	МультипредметностьКлиент.ПредметыПередУдалением(ЭтотОбъект, Объект, Отказ, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПослеУдаления(Элемент)
	
	МультипредметностьКлиентСервер.УстановитьДоступностьКнопокУправленияПредметами(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ПредметыПриАктивизацииСтрокиОтложенно", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПриАктивизацииСтрокиОтложенно()
	
	МультипредметностьКлиент.ПредметыШаблонаПриАктивизацииСтроки(ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ВыбраннаяСтрока = Элементы.Предметы.ТекущаяСтрока;
	Если ВыбраннаяСтрока <> Неопределено Тогда
		МультипредметностьКлиент.ПредметыШаблонаИзменитьПредмет(ЭтотОбъект, Объект, ВыбраннаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыТочкиМаршрута

&НаКлиенте
Процедура ТочкиМаршрутаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	ИмяКолонки = Элемент.ТекущийЭлемент.Имя;
	
	ТекущаяСтрокаДерева = Элемент.ТекущиеДанные;
	Если ТекущаяСтрокаДерева.Видимость = 2 Тогда 
		ТекущаяСтрокаДерева.Видимость = 0;
	КонецЕсли;
	
	Если Не МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(ТекущаяСтрокаДерева.ШаблонБизнесПроцесса) Тогда
		ВложенныеЭлементы = ТекущаяСтрокаДерева.ПолучитьЭлементы();
	
		Если ИмяКолонки = "ТочкиМаршрутаВидимость" И ТекущаяСтрокаДерева.Видимость = Ложь Тогда
			ТекущаяСтрокаДерева.ОбязательноеЗаполнение = Ложь;
		ИначеЕсли ТекущаяСтрокаДерева.ОбязательноеЗаполнение = Истина Тогда
			ТекущаяСтрокаДерева.Видимость = Истина;
		КонецЕсли;
		
		ЗаполняемыйУстановлен = Ложь;
		СуммаВидимость = 0;
		Для Каждого ВложенныйЭлемент Из ВложенныеЭлементы Цикл
			Если ИмяКолонки = "ТочкиМаршрутаВидимость" Тогда
				ВложенныйЭлемент.Видимость = ТекущаяСтрокаДерева.Видимость;
				Если ВложенныйЭлемент.Видимость = Ложь Тогда
					ВложенныйЭлемент.ОбязательноеЗаполнение = Ложь;
				КонецЕсли;
			ИначеЕсли ИмяКолонки = "ТочкиМаршрутаОбязательноеЗаполнение" Тогда
				Если ТекущаяСтрокаДерева.ОбязательноеЗаполнение = Истина Тогда
					Если НЕ ЗаполняемыйУстановлен Тогда
						ВложенныйЭлемент.ОбязательноеЗаполнение = Истина;
						ВложенныйЭлемент.Видимость = Истина;
						ЗаполняемыйУстановлен = Истина;
					Иначе
						ВложенныйЭлемент.ОбязательноеЗаполнение = Ложь;
					КонецЕсли;
				Иначе
					ВложенныйЭлемент.ОбязательноеЗаполнение = Ложь;
				КонецЕсли;
			КонецЕсли;
			СуммаВидимость = СуммаВидимость + ВложенныйЭлемент.Видимость;
		КонецЦикла;
		
		Если СуммаВидимость = ВложенныеЭлементы.Количество() И ВложенныеЭлементы.Количество() > 0 Тогда
			ТекущаяСтрокаДерева.Видимость = Истина;
		ИначеЕсли СуммаВидимость < ВложенныеЭлементы.Количество() И СуммаВидимость > 0 Тогда
			ТекущаяСтрокаДерева.Видимость = 2;
		КонецЕсли;
			
		СтрокаРодитель = ТекущаяСтрокаДерева.ПолучитьРодителя();
		Если ТипЗнч(СтрокаРодитель) = Тип("ДанныеФормыЭлементДерева") Тогда
			СтрокиРодителя = СтрокаРодитель.ПолучитьЭлементы();
			СуммаВидимость = 0;
			СуммаЗаполнение = 0;
			Для Каждого СтрокаРодителя Из СтрокиРодителя Цикл
				СуммаВидимость = СуммаВидимость + СтрокаРодителя.Видимость;
				Если ТекущаяСтрокаДерева.ОбязательноеЗаполнение = Истина И СтрокаРодителя <> ТекущаяСтрокаДерева Тогда
					СтрокаРодителя.ОбязательноеЗаполнение = Ложь;
				КонецЕсли;
				СуммаЗаполнение = СуммаЗаполнение + Число(СтрокаРодителя.ОбязательноеЗаполнение);
			КонецЦикла;
			Если СуммаВидимость = СтрокиРодителя.Количество() Тогда
				СтрокаРодитель.Видимость = Истина;
			ИначеЕсли СуммаВидимость = 0 Тогда
				СтрокаРодитель.Видимость = Ложь;
			Иначе
				СтрокаРодитель.Видимость = 2;
			КонецЕсли;
			Если СуммаЗаполнение = 0 Тогда
				СтрокаРодитель.ОбязательноеЗаполнение = Ложь;
			Иначе
				СтрокаРодитель.ОбязательноеЗаполнение = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеТекущегоПредмета = Элементы.Предметы.ТекущиеДанные;
	Если ДанныеТекущегоПредмета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПредмета = Новый Структура("Предмет, ИмяПредмета, РольПредмета");
	ЗаполнитьЗначенияСвойств(СтруктураПредмета, ДанныеТекущегоПредмета);
	
    МультипредметностьКлиент.УстановитьПредметыЗадачПоТочкамМаршрута(ЭтотОбъект, Объект, СтруктураПредмета);
	
КонецПроцедуры

&НаКлиенте
Процедура ТочкиМаршрутаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Поле.Имя = "ТочкиМаршрутаШаблонБизнесПроцесса" Тогда
		
		ОткрытьФормуДействия = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтотОбъект.ТолькоПросмотр);
		
		Если РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект) Тогда
			
			ТекущиеДанные = Элементы.ТочкиМаршрута.ТекущиеДанные;
			
			Если ЗначениеЗаполнено(ТекущиеДанные.ШаблонБизнесПроцесса) Тогда 
				ПараметрыФормы.Вставить("ИдентификаторЭтапа", ТекущиеДанные.ИдентификаторЭтапа);
				ПараметрыФормы.Вставить("КомплексныйПроцесс", ЗначениеЗаполнено(Объект.КомплексныйПроцесс));
				ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.ШаблонБизнесПроцесса);
				
				ИмяФормыДляОткрытия = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.
					ИмяФормыНастройкиЭлементаСхемы(
					ЭтотОбъект, ТекущиеДанные.ШаблонБизнесПроцесса);
				ОткрытьФормуДействия = Истина;
			КонецЕсли;
		Иначе
			СтрокиЭтапа = Объект.Этапы.НайтиСтроки(Новый Структура(
				"ШаблонБизнесПроцесса", Элементы.ТочкиМаршрута.ТекущиеДанные.ШаблонБизнесПроцесса));
			Если СтрокиЭтапа.Количество() > 0 Тогда
				
				СтрокаЭтапа = СтрокиЭтапа[0];
				ПараметрыФормы.Вставить("ИдентификаторЭтапа", СтрокаЭтапа.ИдентификаторЭтапа);
				ПараметрыФормы.Вставить("КомплексныйПроцесс", НЕ ЗначениеЗаполнено(СтрокаЭтапа.ИсходныйШаблон));
				ПараметрыФормы.Вставить("Ключ", СтрокаЭтапа.ШаблонБизнесПроцесса);
				
				ИмяФормыДляОткрытия = ПолучитьИмяФормыДляОткрытияДействия(СтрокаЭтапа.ШаблонБизнесПроцесса);
				ОткрытьФормуДействия = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ОткрытьФормуДействия Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму(ИмяФормыДляОткрытия, ПараметрыФормы);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СхемаПроцесса

&НаКлиенте
Процедура ПроверитьСхемуИНастройки(Команда)
	
	ОчиститьСообщения();
	
	РезультатПроверки = ПроверитьСхемуИНастройкиНаСервере();
	
	СхемыПроцессовКлиент.ПоказатьРезультатПроверкиСхемыВФорме(ЭтотОбъект);
	
	Для Каждого ОписаниеОшибкиНастройки Из РезультатПроверки.ОшибкиНастроекСхемы Цикл
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ОписаниеОшибкиНастройки,,,
			"Схема");
	КонецЦикла;
	
	ПоказатьПредупреждение(, РезультатПроверки.ОписаниеРезультата);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьТочныеСрокиПоСхеме(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ВладелецШаблона)
		Или ЭтоДействиеШаблонаКомплексногоПроцесса
		Или Не КомплексныйПроцессСтартован Тогда
		
		// Рассчитываем сроки в карточке, если это шаблон (действие шаблона),
		// или действие нестартованного процесса.
		
		Если СрокиИсполненияПроцессовКлиентСерверКОРП.КомандаРасчетаСрокаДоступна(ЭтотОбъект) Тогда
			ДатаОтсчетаДляРасчетаСроков = ТекущаяДата();
		КонецЕсли;
		
		ОбновитьСрокиИсполненияНаСервере();
		
		ПоказатьПредупреждение(, НСтр("ru = 'Расчет сроков завершен.'"));
		
	ИначеЕсли КомплексныйПроцессСтартован
		И СостояниеКомплексногоПроцесса = 
			ПредопределенноеЗначение("Перечисление.СостоянияБизнесПроцессов.Остановлен") Тогда
		
		// Иначе рассчитываем сроки и фиксируем в текущем и подчиненных действиях.
		
		РезультатРассчета = РассчитатьТочныеСрокиПоСхемеНаСервере();
		
		СрокиИсполненияПроцессовКлиентКОРП.ЗаписатьРассчитанныеТочныеСрокиПоСхеме(
			"", РезультатРассчета.АдресХранилищаСРассчитаннымиСроками, ЭтотОбъект);
		
	Иначе
		// Других сценариев расчета и обновления сроков не предусмотрено.
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ЗаписатьИЗакрыть(Команда, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДействие(Команда)
	
	Если Элементы.Этапы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСКомплекснымиБизнесПроцессамиКлиент.
		ЗаписатьНовыйПроцессПередНастройкойПодчиненногоЭлемента(ЭтотОбъект) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если КомплексныйПроцессСтартован И Модифицированность Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИдентификаторЭтапа", Элементы.Этапы.ТекущиеДанные.ИдентификаторЭтапа);
	ПараметрыФормы.Вставить("КомплексныйПроцесс", НЕ ЗначениеЗаполнено(Элементы.Этапы.ТекущиеДанные.ИсходныйШаблон));
	ПараметрыФормы.Вставить("Ключ", Элементы.Этапы.ТекущиеДанные.ШаблонБизнесПроцесса);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтотОбъект.ТолькоПросмотр);
	Если Предметы.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("ПредметыПроцесса", Предметы.ВыгрузитьЗначения());
	КонецЕсли;
	ИмяФормыДляОткрытия = ПолучитьИмяФормыДляОткрытияДействия(Элементы.Этапы.ТекущиеДанные.ШаблонБизнесПроцесса);
	
	Если ЗначениеЗаполнено(ДатаОтсчетаДляРасчетаСроков) Тогда
		ДатаОтсчета = СрокиИсполненияПроцессовКлиентСерверКОРП.
			ДатаОтсчетаДействияКомплексногоПроцессаВФорме(ЭтотОбъект);
		ПараметрыФормы.Вставить("ДатаОтсчетаДляРасчетаСроков", ДатаОтсчета);
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыДляОткрытия, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУчастниковРабочейГруппы(Команда)
	
	РаботаСАдреснойКнигойКлиент.ПодобратьУчастниковРабочейГруппы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыДобавитьВспомогательный(Команда)
	
	МультипредметностьКлиент.ПредметыДобавитьВспомогательный(ЭтотОбъект, Объект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыДобавитьЗаполняемый(Команда)
	
	МультипредметностьКлиент.ПредметыДобавитьЗаполняемый(ЭтотОбъект, Объект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыДобавитьОсновной(Команда)
	
	МультипредметностьКлиент.ПредметыДобавитьОсновной(ЭтотОбъект, Объект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыИзменитьПредмет(Команда)
	
	ВыбраннаяСтрока = Элементы.Предметы.ТекущаяСтрока;
	Если ВыбраннаяСтрока <> Неопределено Тогда
		МультипредметностьКлиент.ПредметыШаблонаИзменитьПредмет(ЭтотОбъект, Объект, ВыбраннаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоУмолчанию(Команда)
	
	ТекстВопроса = 
		НСтр("ru = 'Шаблон процесса будет заполнен настройками по умолчанию.
		|Текущие настройки будут удалены.
		|
		|Продолжить?'"); 
		
	ОбщегоНазначенияДокументооборотКлиент.ПоказатьВопросДаНет(
		Новый ОписаниеОповещения("ПродолжитьЗаполнитьПоУмолчанию", ЭтотОбъект),
		ТекстВопроса,
		НСтр("ru = 'Продолжить'"), НСтр("ru = 'Отмена'"));
		
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗаполнитьПоУмолчанию(Ответ, ДопПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоУмолчаниюНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СхемаПроцесса

&НаСервере
Процедура СоздатьСхемуПроцессаПоУмолчанию()
	
	РаботаСКомплекснымиБизнесПроцессамиСервер.СоздатьСхемуПроцессаПоУмолчаниюВФорме(ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьФокусТекущегоЭлементаСхемыПроцесса() Экспорт
	
	СхемыПроцессовКлиент.ВосстановитьТекущийЭлементПоДаннымСхемы(ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОбновлениеДанныхСхемы(РезультатОбработки, ДопПараметры) Экспорт
	
	ПодключитьОбработчикОжидания("ВосстановитьФокусТекущегоЭлементаСхемыПроцесса", 0.1, Истина);
	
	Если РассчитыватьОтносительныйСрок(ЭтотОбъект) Тогда
		ОчиститьДатуОтсчетаДляРасчетаСроков(ЭтотОбъект);
		Если Не ЗначениеЗаполнено(ДатаОтсчетаДляРасчетаСроков) Тогда
			РеквизитСИзмененнымСроком = "Схема";
		КонецЕсли;
	КонецЕсли;
	
	РаботаСКомплекснымиБизнесПроцессамиКлиент.ОбработатьОбновлениеДанныхСхемы(
		ЭтотОбъект, РезультатОбработки.ДобавленныеЭлементы, РезультатОбработки.УдаленныеЭлементы);
	
	НормализоватьДеревоТочекМаршрутаПоСхеме();
	
	ОтключитьДоступностьШаблона();
	
КонецПроцедуры

// Завершает настройку элемента действия/вложенного процесса в схеме.
//
// Параметры:
//  Шаблон - ОпределяемыйТип.ШаблонДействияКомплексногоПроцесса - ссылка на действие/вложенный процесс в комплексный.
//  Предметы - Массив - массив структур с полями:
//    ИмяПредмета, Предмет, РольПредмета, ИмяПредметаОснование, ШаблонОснование, ИсходноеИмяПредмета (может отсутствовать).
//  ДатаОтсчетаДляДействия - Дата, Неопределено
//
&НаКлиенте
Процедура ЗавершитьНастройкуДействияВложенногоПроцессаСхемы(Шаблон, Предметы, ДатаОтсчетаДляДействия)
	
	ИмяЭлемента = СхемыПроцессовКлиентСервер.ИмяТекущегоЭлементаСхемыПоЕеДаннымВФорме(ЭтотОбъект);
	Если Не ЗначениеЗаполнено(ИмяЭлемента) Тогда
		Возврат;
	КонецЕсли;
	
	Если РассчитыватьОтносительныйСрок(ЭтотОбъект) Тогда
		ОчиститьДатуОтсчетаДляРасчетаСроков(ЭтотОбъект);
		Если Не ЗначениеЗаполнено(ДатаОтсчетаДляРасчетаСроков) Тогда
			РеквизитСИзмененнымСроком = "Схема";
		КонецЕсли;
	КонецЕсли;
	
	ПарметрыНовогоШаблона = ЗавершитьНастройкуДействияВложенногоПроцессаСхемыНаСервере(
		ИмяЭлемента, Шаблон, Предметы);
	
	Если ЗначениеЗаполнено(ПарметрыНовогоШаблона.Шаблон)
		И ЗначениеЗаполнено(ПарметрыНовогоШаблона.ИмяФормыДляОткрытия) Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Ключ", ПарметрыНовогоШаблона.Шаблон);
		ПараметрыФормы.Вставить("ВладелецШаблона", Объект.Ссылка);
		ПараметрыФормы.Вставить("Предметы", Предметы);
		
		Если ЗначениеЗаполнено(ДатаОтсчетаДляДействия) Тогда
			ПараметрыФормы.Вставить("ДатаОтсчетаДляРасчетаСроков", ДатаОтсчетаДляДействия);
		КонецЕсли;
		
		ОткрытьФорму(ПарметрыНовогоШаблона.ИмяФормыДляОткрытия, ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ВосстановитьФокусТекущегоЭлементаСхемыПроцесса", 0.1, Истина);
	
КонецПроцедуры

// Завершает настройку элемента действия в схеме процесса на сервере.
// Обертка для функции РаботаСКомплекснымиБизнесПроцессамиСервер.ЗавершитьНастройкуЭлементаСхемыДействия.
//
// Параметры:
//  ИмяДействия - Строка - Имя элемента действия в схеме процесса.
//  Шаблон - ОпределяемыйТип.ШаблонДействияКомплексногоПроцессая - ссылка на действие комплексного процесса.
//  Предметы - Массив - массив структур с полями:
//    ИмяПредмета, Предмет, РольПредмета, ИмяПредметаОснование, ШаблонОснование, ИсходноеИмяПредмета (может отсутствовать).
//
// Возвращаемое значение:
//  см. РаботаСКомплекснымиБизнесПроцессамиСервер.ЗавершитьНастройкуЭлементаСхемыДействия
//
&НаСервере
Функция ЗавершитьНастройкуДействияВложенногоПроцессаСхемыНаСервере(ИмяДействия, Шаблон, Предметы)
	
	РезультатНастройки = РаботаСКомплекснымиБизнесПроцессамиСервер.
		ЗавершитьНастройкуДействияВложенногоПроцессаСхемы(ЭтотОбъект, ИмяДействия, Шаблон, Предметы);
	
	РолиПредметовЭтапов.Загрузить(
		Мультипредметность.РолиПредметовДействийПоКарточкеКомплексногоПроцесса(ЭтотОбъект));
	
	Мультипредметность.ЗаполнитьДеревоТочекПоДействиямПроцесса(ДействияПроцесса, ТочкиМаршрута);
	
	Возврат РезультатНастройки;
	
КонецФункции

// Выполняет проверку корректности схемы.
//
// Возвращаемое значение:
//  Структура - см РаботаСКомплекснымиБизнесПроцессамиСервер.ПроверитьСхемуИНастройки
//
&НаСервере
Функция ПроверитьСхемуИНастройкиНаСервере() Экспорт
	
	Возврат РаботаСКомплекснымиБизнесПроцессамиСервер.ПроверитьСхемуИНастройки(ЭтотОбъект);
		
КонецФункции

// Настраивает доступность редактирования схемы в карточке процесса.
//
&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьДоступностьРедактированияСхемы(Форма)
	
	Если Не РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	СхемаДоступнаДляРедактирования = Не Форма.ТолькоПросмотр;
	
	Если СхемаДоступнаДляРедактирования Тогда
		
		Если Форма.КомплексныйПроцессЗавершен
			Или Форма.КомплексныйПроцессПомеченНаУдаление
			
			Или Форма.СостояниеКомплексногоПроцесса = 
				ПредопределенноеЗначение("Перечисление.СостоянияБизнесПроцессов.Прерван")
			
			Или (Форма.КомплексныйПроцессСтартован
				И Форма.СостояниеКомплексногоПроцесса = 
					ПредопределенноеЗначение("Перечисление.СостоянияБизнесПроцессов.Активен")) Тогда
			
			
			СхемаДоступнаДляРедактирования = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.Элементы.ПроверитьСхемуИНастройки.Доступность = СхемаДоступнаДляРедактирования;
	Форма.Элементы.ПроверитьСхемуИНастройки.Видимость = Форма.ЭтоДействиеКомплексногоПроцесса;
	Форма.Элементы.РассчитатьТочныеСрокиПоСхеме.Доступность = СхемаДоступнаДляРедактирования;
	
	#Если ВебКлиент Тогда
			// В веб-клиенте схема не доступна для редактирования.
		Форма.Элементы.Схема.ТолькоПросмотр = Истина;
	#Иначе
		Форма.Элементы.Схема.ТолькоПросмотр = Не СхемаДоступнаДляРедактирования;
		Форма.Схема.ИспользоватьСетку = СхемаДоступнаДляРедактирования;
	#КонецЕсли
	
КонецПроцедуры

// Нормализует дерево точек маршрута в форме шаблона комплексного процесса.
//
&НаКлиенте
Процедура НормализоватьДеревоТочекМаршрутаПоСхеме()
	
	ВсеПараметрыЭлементов =
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ВсеПараметрыЭлементовВСхеме(ЭтотОбъект);
	
	ИдентификаторыНастроек = Новый Соответствие();
	Для Каждого ПараметрыЭлемента Из ВсеПараметрыЭлементов Цикл
		ИдентификаторыНастроек[ПараметрыЭлемента.Значение.Идентификатор] = Истина;
	КонецЦикла;
	
	ЭлементыДерева = ТочкиМаршрута.ПолучитьЭлементы();
	Индекс = ЭлементыДерева.Количество() - 1;
	
	Пока Индекс >= 0 Цикл
		ЭлементДерева = ЭлементыДерева[Индекс];
		Если ЗначениеЗаполнено(ЭлементДерева.ШаблонБизнесПроцесса)
			И ИдентификаторыНастроек[ЭлементДерева.ИдентификаторЭтапа] = Неопределено Тогда
			
			ЭлементыДерева.Удалить(ЭлементДерева);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ТаблицаЭтапов

&НаСервере
Процедура ВариантМаршрутизацииПриИзмененииСервер()
	
	РаботаСКомплекснымиБизнесПроцессамиСервер.ВариантМаршрутизацииПриИзменении(Объект, ЭтапыКУдалению);
	РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(ЭтотОбъект);
	
	ОчиститьДатуОтсчетаДляРасчетаСроков(ЭтотОбъект);
	ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьНастройкиДействия(Параметр)
	
	Результат = РаботаСКомплекснымиБизнесПроцессамиСервер.ПрименитьНастройкиДействия(ЭтотОбъект, Параметр);
	РеквизитСИзмененнымСроком = "Этапы";
	ИдентификаторыИзмененныхДействий.Добавить(Результат);
	
	ОчиститьДатуОтсчетаДляРасчетаСроков(ЭтотОбъект);
	ОбновитьСрокиИсполненияНаСервере();
	
	РолиПредметовЭтапов.Загрузить(
		Мультипредметность.РолиПредметовДействийПоКарточкеКомплексногоПроцесса(ЭтотОбъект));
	
	Мультипредметность.ЗаполнитьДеревоТочекПоДействиямПроцесса(ДействияПроцесса, ТочкиМаршрута);
	
КонецПроцедуры

&НаСервере
Функция СкопироватьШаблонВНастройкиПроцессаИПолучитьИмяФормы(ШаблонБП, ВладелецШаблона) 

	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ВладелецШаблона) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		//Развернем автоподстановки из шаблона в реальных исполнителей
		ИмяПроцесса = Справочники[ШаблонБП.Метаданные().Имя].ИмяПроцесса(ШаблонБП);
		БизнесПроцессОбъект = БизнесПроцессы[ИмяПроцесса].СоздатьБизнесПроцесс();
		Мультипредметность.ПередатьПредметыПроцессу(БизнесПроцессОбъект, Объект.Предметы);
		БизнесПроцессОбъект.Автор = Объект.Автор;
		БизнесПроцессОбъект.Дата = ТекущаяДатаСеанса();
		БизнесПроцессОбъект.ЗаполнитьПоШаблону(ШаблонБП);
		
		ШаблонДляВставки = БизнесПроцессОбъект.СоздатьШаблонПоПроцессу();
		
		ШаблонДляВставкиОбъект = ШаблонДляВставки.ПолучитьОбъект();
		
	Иначе
		
		ШаблонДляВставкиОбъект = ШаблонБП.Скопировать();
		
	КонецЕсли;
	
	ШаблонДляВставкиОбъект.ВладелецШаблона = ВладелецШаблона;
	ШаблонДляВставкиОбъект.ШаблонВКомплексномПроцессе = Истина;
	
	Если ВладелецШаблона.Важность = Перечисления.ВариантыВажностиОбъектов.Высокая
		ИЛИ ВладелецШаблона.Важность = Перечисления.ВариантыВажностиОбъектов.Низкая Тогда
		ШаблонДляВставкиОбъект.Важность = ВладелецШаблона.Важность;
	КонецЕсли;

	ШаблонДляВставкиОбъект.Записать();
	ИмяФормыДляОткрытия = ШаблонДляВставкиОбъект.Метаданные().ПолноеИмя() + ".ФормаОбъекта";
	
	ДанныеВозврата = Новый Структура;
	Данныевозврата.Вставить("ИмяФормыДляОткрытия", ИмяФормыДляОткрытия);
	ДанныеВозврата.Вставить("Шаблон", ШаблонДляВставкиОбъект.Ссылка);
	
	Возврат ДанныеВозврата;
	
КонецФункции

&НаСервере
Процедура УдалитьЭтапы()
	
	Для Каждого ЭтапКУдалению Из ЭтапыКУдалению Цикл 
		РаботаСКомплекснымиБизнесПроцессамиСервер.УдалитьЭтап(
			ЭтотОбъект,
			ЭтапКУдалению.Значение.ЗадачаЭтапа,
			ЭтапКУдалению.Значение.ИдентификаторЭтапа);
	КонецЦикла;
		
	ЭтапыУдалениеСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЭтапыУдалениеСервер()
	
	РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеУдаленияДействия()
	
	РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ПодсистемаСвойств

//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
 
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область СрокиИсполненияПроцессов

// Заполняет представление сроков в карточке процесса
//
&НаСервере
Процедура ОбновитьСрокиИсполненияНаСервере() Экспорт
	
	РассчитатьОтносительныйСрок = РассчитыватьОтносительныйСрок(ЭтотОбъект);
	РассчитьтатьТочныйСрок = Ложь;
	
	Если ЗначениеЗаполнено(ДатаОтсчетаДляРасчетаСроков)
		И (Не КомплексныйПроцессСтартован
			Или ЗначениеЗаполнено(РеквизитСИзмененнымСроком)) Тогда
		
		РассчитьтатьТочныйСрок = Истина;
	КонецЕсли;
		
	Если РассчитатьОтносительныйСрок Тогда
		
		Смещение = СрокиИсполненияПроцессовКлиентСерверКОРП.СмещенияДатыОтсчетаВКарточке(ЭтотОбъект);
			
		Если РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(
			ЭтотОбъект) Тогда
			
			РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЗаполнитьСрокиЭлементовСхемыВФорме(
				ЭтотОбъект);
			
			ПараметрыДляОпределенияДлительности = СрокиИсполненияПроцессовКОРП.
				ПараметрыДляОпределенияДлительностиКомплексногоПроцессаСоСхемой();
			
			ПараметрыДляОпределенияДлительности.Ссылка = Объект.Ссылка;
			
			ПараметрыДляОпределенияДлительности.ДанныеСхемы =
				СхемыПроцессовКлиентСервер.ДанныеСхемыПроцессаИзФормы(ЭтотОбъект);
			
			ПараметрыДляОпределенияДлительности.СрокиЭлементов =
				РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СрокиЭлементовСхемыВФорме(ЭтотОбъект);
			
			ДлительностьИсполнения = СрокиИсполненияПроцессов.ДлительностьИсполненияПроцесса(
				ПараметрыДляОпределенияДлительности, Смещение);
		Иначе
			СрокиИсполненияПроцессовКОРП.ЗаполнитьСрокиИсполненияЭтаповКомплексногоПроцесса(Объект.Этапы);
			ДлительностьИсполнения = СрокиИсполненияПроцессов.ДлительностьИсполненияПроцесса(Объект, Смещение);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДлительностьИсполнения);
		
	КонецЕсли;
	
	Если РассчитьтатьТочныйСрок Тогда
		СрокиИсполненияПроцессовКОРП.РассчитатьСрокиКомплексногоПроцессаВКарточке(ЭтотОбъект);
	КонецЕсли;
	
	Если Не РассчитатьОтносительныйСрок И Не РассчитьтатьТочныйСрок Тогда
		Если РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект) Тогда
			РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЗаполнитьСрокиЭлементовСхемыВФорме(ЭтотОбъект);
		Иначе
			СрокиИсполненияПроцессовКОРП.ЗаполнитьСрокиИсполненияЭтаповКомплексногоПроцесса(Объект.Этапы);
		КонецЕсли;
	КонецЕсли;
	
	РеквизитСИзмененнымСроком = "";
	ИдентификаторыИзмененныхДействий.Очистить();
	
	СрокиИсполненияПроцессовКлиентСерверКОРП.
		ЗаполнитьПредставлениеСроковИсполненияВФормеКомплексногоПроцесса(ЭтотОбъект);
	ОбновитьПризнакиИстекшихСроков();
	
КонецПроцедуры

// Рассчитывает точные сроки комплексного процесса по данным схемы в карточке процесса/шаблона.
// Рассчитанный результата сохраняет во временном хранилище.
//
&НаСервере
Функция РассчитатьТочныеСрокиПоСхемеНаСервере()
	
	Возврат СрокиИсполненияПроцессовКОРП.РассчитатьТочныеСрокиКомплексногоПроцессаПоСхеме(ЭтотОбъект);
	
КонецФункции

// см. ОбновитьСрокиИсполненияНаСервере
&НаКлиенте
Процедура ОбновитьСрокиИсполнения()
	
	ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

// см. ОбновитьСрокиИсполнения
&НаКлиенте
Процедура ОбновитьСрокиИсполненияОтложенно(ИмяРеквизитаСИзмененнымСроком = "") Экспорт
	
	Если ИмяРеквизитаСИзмененнымСроком = "ОписаниеОтложенногоСтарта" Тогда
		РеквизитСИзмененнымСроком = ИмяРеквизитаСИзмененнымСроком;
		ИдентификаторыИзмененныхДействий.Добавить(УникальныйИдентификаторПустой());
		ОчиститьДатуОтсчетаДляРасчетаСроков(ЭтотОбъект);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновитьСрокиИсполнения", 0.2, Истина);
	
КонецПроцедуры

// Обновляет форму процесса после переноса сроков действий
//
&НаКлиенте
Процедура ОбновитьФормуПослеПереносаСроковИсполнения() Экспорт
	
	ОбновитьФормуПослеПереносаСроковИсполненияНаСервере();
	
	// Обновляем свойство ТолькоПросмотр 2 раза (вначале на противоположное, потом обратно),
	// т.к. иногда платформа не обновляет его.
	Элементы.Схема.ТолькоПросмотр = Не Элементы.Схема.ТолькоПросмотр;
	Элементы.Схема.ТолькоПросмотр = Не Элементы.Схема.ТолькоПросмотр;
	
КонецПроцедуры

// Обновляет форму процесса после переноса сроков действий на сервере.
//
&НаСервере
Процедура ОбновитьФормуПослеПереносаСроковИсполненияНаСервере() Экспорт
	
	Прочитать();
	Если Не РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект) Тогда
		РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(ЭтотОбъект);
	КонецЕсли;
	ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

// Очищает дату расчета сроков.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка текущего шаблона.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьДатуОтсчетаДляРасчетаСроков(Форма)
	
	Если Не ЗначениеЗаполнено(Форма.Объект.ВладелецШаблона) Тогда
		Форма.ДатаОтсчетаДляРасчетаСроков = Дата(1,1,1);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает необходимость расчета относительного срока.
//
// Параметры:
//  ФормаКлиентскогоПриложения - текущая форма.
//
&НаКлиентеНаСервереБезКонтекста
Функция РассчитыватьОтносительныйСрок(Форма)
	
	Если Не ЗначениеЗаполнено(Форма.Объект.ВладелецШаблона)
		Или Форма.ЭтоДействиеШаблонаКомплексногоПроцесса
		
		Или (Форма.ЭтоДействиеКомплексногоПроцессаПоШаблону
			И Не Форма.КомплексныйПроцессСтартован) Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Устанавливает условное оформление истекших сроков.
//
&НаСервере
Процедура УстановитьУсловноеОформлениеИстекшихСроков()
	
	СрокиИсполненияПроцессов.УстановитьУсловноеОформлениеИстекшегоСрока(
		ЭтотОбъект,
		НСтр("ru = 'Срок исполнения действия истек (Этапы)'"),
		"Объект.Этапы.СрокИсполненияПроцессаИстек",
		"СрокИсполненияДействияПредставление");
	
	СрокиИсполненияПроцессов.УстановитьУсловноеОформлениеИстекшегоСрока(
		ЭтотОбъект,
		НСтр("ru = 'Срок исполнения процесса истек'"),
		"СрокИсполненияПроцессаИстек",
		"СрокИсполненияПроцессаПредставление");
	
КонецПроцедуры

// Обновляет признаки истекших сроков в карточке.
//
&НаСервере
Процедура ОбновитьПризнакиИстекшихСроков()
	
	Если РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаОтсчетаДляРасчетаСроков) Тогда
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		Для Каждого Этап Из Объект.Этапы Цикл
			Этап.СрокИсполненияПроцессаИстек = Ложь;
			Если ЗначениеЗаполнено(Этап.СрокИсполненияПроцесса)
				И Этап.СрокИсполненияПроцесса < ТекущаяДатаСеанса Тогда
				
				Этап.СрокИсполненияПроцессаИстек = Истина;
			КонецЕсли;
		КонецЦикла;
		СрокиИсполненияПроцессов.ОбновитьПризнакИстекшегоСрокаПроцесса(
			Объект.СрокИсполненияПроцесса, ТекущаяДатаСеанса, СрокИсполненияПроцессаИстек);
	Иначе
		Для Каждого Этап Из Объект.Этапы Цикл
			Этап.СрокИсполненияПроцессаИстек = Ложь;
		КонецЦикла;
		СрокИсполненияПроцессаИстек = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДоступностьШаблоновПроцессов

// Помещает доступность шаблона процесса в карточку.
//
&НаСервере
Процедура ПрочитатьДоступностьШаблона()
	
	ШаблоныБизнесПроцессов.ПрочитатьДоступностьШаблона(ЭтотОбъект);
	
КонецПроцедуры

// Записывает доступность шаблона процесса из карточки.
//
// Параметры:
//  ШаблонОбъект - СправочникОбъект.<ИмяШаблонаПроцесса> - объект шаблона процесса.
//
&НаСервере
Процедура ЗаписатьДоступностьШаблона(ШаблонОбъект)
	
	Если Не ЗначениеЗаполнено(ШаблонОбъект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоДействиеКомплексногоПроцесса Тогда
		Возврат;
	КонецЕсли;
	
	Если ДоступенРучнойЗапускПоШаблону Тогда
		// Если доступен ручной запуск, то обновляем автоматический перед
		// записью, т.к. он мог быть изменен обновлением доступности подчиненных шаблонов.
		// Доступность ручного запуска всегда определяется в карточке шаблона.
		ДоступенАвтоматическийЗапускПоШаблону = 
			ШаблоныБизнесПроцессов.ДоступностьАвтоматическогоЗапускаШаблонаКомплексногоПроцесса(
				ШаблонОбъект.Ссылка);
	Иначе
		// Если для шаблона недоступен ручной запуск, недоступен и автоматический.
		ДоступенАвтоматическийЗапускПоШаблону = Ложь;
	КонецЕсли;
	
	ШаблоныБизнесПроцессов.ЗаписатьДоступностьШаблона(
		ШаблонОбъект.Ссылка,
		ДоступенАвтоматическийЗапускПоШаблону,
		ДоступенРучнойЗапускПоШаблону);
		
	ШаблоныБизнесПроцессовКлиентСервер.ОбновитьОтображениеДоступностиШаблона(ЭтотОбъект);
	
КонецПроцедуры

// Проверяет доступность шаблона и помещает результат в реквизиты
// ДоступенРучнойЗапускПоШаблону, ДоступенАвтоматическийЗапускПоШаблону.
//
// Параметры:
//  ЗаписатьДоступность - Булево - определяет необходимость записи доступности в базу
//                                 после проверки.
//
// Возвращаемое значение:
//  Массив - массив строк с описанием ошибок заполнения настроек.
//
&НаСервере
Функция ПроверитьДоступностьШаблона(ЗаписатьДоступность = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОшибкиПроверкиДоступности = Новый Массив;
	
	Если РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект) Тогда
		
		ДоступенРучнойЗапускПоШаблону = Истина;
		ДоступенАвтоматическийЗапускПоШаблону = Истина;
		
		// Проверим корректность самой схемы.
		СхемыПроцессовСервер.ПроверитьКорректностьСхемыВФорме(ЭтотОбъект);
		
		// Проверим корректность настроек элементов схемы.
		ДанныеСхемыВФорме = СхемыПроцессовКлиентСервер.ДанныеСхемыПроцессаИзФормы(ЭтотОбъект);
		ВсеНастройкиЭлементов =
			РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ВсеНастройкиЭлементовСхемыВФорме(
			ЭтотОбъект);
		
		ОшибкиПроверкиДоступности = 
			РаботаСКомплекснымиБизнесПроцессамиСервер.ОшибкиЗаполненияНастроекЭлементовСхемы(
			ВсеНастройкиЭлементов,
			СхемыПроцессовКлиентСервер.ТипыВсехЭлементовПоДаннымСхемы(ДанныеСхемыВФорме),
			СхемыПроцессовКлиентСервер.ГрафическаяСхемаПоДаннымСхемы(ДанныеСхемыВФорме));		
	
		// Для ручного запуска достаточно отсутствия ошибок в схеме.
		ДоступенРучнойЗапускПоШаблону =
			Не СхемыПроцессовКлиентСервер.ЕстьОшибкиНастройкиСхемы(ЭтотОбъект);
		
		// Для автоматического запуска должна быть корректна схема и ее настройки.
		ДоступенАвтоматическийЗапускПоШаблону = ДоступенРучнойЗапускПоШаблону
			И (ОшибкиПроверкиДоступности.Количество() = 0);
		
	Иначе
		
		ДоступенРучнойЗапускПоШаблону = Истина;
		
		ШаблонОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов"));
		
		ОшибкиПроверкиДоступности = ШаблонОбъект.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
		
		ДоступенАвтоматическийЗапускПоШаблону = (ОшибкиПроверкиДоступности.Количество() = 0);
		
	КонецЕсли;
	
	ШаблоныБизнесПроцессовКлиентСервер.ОбновитьОтображениеДоступностиШаблона(ЭтотОбъект);
	
	Если ЗаписатьДоступность И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ШаблоныБизнесПроцессов.ЗаписатьДоступностьШаблона(
			Объект.Ссылка,
			ДоступенАвтоматическийЗапускПоШаблону,
			ДоступенРучнойЗапускПоШаблону);
	КонецЕсли;
	
	Возврат ОшибкиПроверкиДоступности;
	
КонецФункции

// Выводить ошибки проверки доступности с привязкой к соотвествующим полям.
//
// Параметры:
//  ОшибкиПроверкиДоступности - Массив - см. ПроверитьДоступностьШаблона
//
&НаКлиенте
Процедура ВывестиОшибкиПроверкиДоступности(ОшибкиПроверкиДоступности)
		
	Если РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект) Тогда
		СхемыПроцессовКлиент.ПоказатьРезультатПроверкиСхемыВФорме(ЭтотОбъект);
	КонецЕсли;
	
	Если ОшибкиПроверкиДоступности.Найти("Этапы") <> Неопределено Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'В шаблоне отсутствуют действия.'"),,,
			"Объект.Этапы");
			
		Возврат;
			
	КонецЕсли;
	
 	Если РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект) Тогда
		ПутьКДанным = "Схема";
	Иначе 
		ПутьКДанным = "Объект.Этапы";
	КонецЕсли;
	
	Для Каждого ОписаниеОшибкиНастройки Из ОшибкиПроверкиДоступности Цикл
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ОписаниеОшибкиНастройки,,,
			ПутьКДанным);
	КонецЦикла;		
	
КонецПроцедуры

// Возвращает незаполненные поля необходимы для старта.
//
// Возвращаемое значение:
//  Массив - массив строк с ошибками заполнения.
//
&НаСервере
Функция НезаполненныеПоляНеобходимыеДляСтарта()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект) Тогда
		
		ДанныеСхемыВФорме = СхемыПроцессовКлиентСервер.ДанныеСхемыПроцессаИзФормы(ЭтотОбъект);
		
		ВсеНастройкиЭлементов =
			РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ВсеНастройкиЭлементовСхемыВФорме(
			ЭтотОбъект);
		
		ОшибкиНастроек = 
			РаботаСКомплекснымиБизнесПроцессамиСервер.ОшибкиЗаполненияНастроекЭлементовСхемы(
			ВсеНастройкиЭлементов,
			СхемыПроцессовКлиентСервер.ТипыВсехЭлементовПоДаннымСхемы(ДанныеСхемыВФорме),
			СхемыПроцессовКлиентСервер.ГрафическаяСхемаПоДаннымСхемы(ДанныеСхемыВФорме));
	
	Иначе
		
		ШаблонОбъект = ДанныеФормыВЗначение(
			Объект, Тип("СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов"));
	
		ОшибкиНастроек = ШаблонОбъект.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
		
	КонецЕсли;
	
	Возврат ОшибкиНастроек;
	
КонецФункции

// Сбрасывает доступность в карточке шаблона процесса.
//
&НаКлиенте
Процедура ОтключитьДоступностьШаблона()
	
	ШаблоныБизнесПроцессовКлиент.ОтключитьДоступностьШаблона(ЭтотОбъект);
	
	НеПоказыватьВопросОНедоступномШаблоне = Ложь;
	
КонецПроцедуры

// Инициализирует вопрос о недоступном шаблоне.
// Предназначена для вызова из обработчика ПередЗакрытием.
//
// Параметры:
//  Отказ - Булево - стандартный параметр обработчика ПередЗакрытием.
//
&НаКлиенте
Процедура ПоказатьВопросОНедоступномШаблоне(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КомплексныйПроцесс) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если ДоступенРучнойЗапускПоШаблону Тогда
		Возврат;
	КонецЕсли;
	
	Если НеПоказыватьВопросОНедоступномШаблоне = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ШаблоныБизнесПроцессовКлиентСервер.ОбновитьОтображениеГруппыДоступности(ЭтотОбъект);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжитьВопросОНедоступномШаблоне", ЭтотОбъект);
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("ПроверитьИЗакрыть", НСтр("ru = 'Проверить и закрыть'"));
	Кнопки.Добавить("ЗакрытьБезПроверки", НСтр("ru = 'Закрыть без проверки'"));
	Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
	КнопкаПоУмолчанию = "ПроверитьИЗакрыть";
	
	ЭтоШаблонПроцесса = Не ЗначениеЗаполнено(Объект.ВладелецШаблона);
	
	Если ЭтоШаблонПроцесса Тогда
		ТекстВопроса = НСтр("ru = 'Шаблон недоступен для запуска процессов, так как не пройдена проверка.'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Действие содержит непроверенные настройки.
			|Проверьте действие для корректной работы процессов по этому шаблону.'");
	КонецЕсли;
	
	ПоказатьВопрос(
		ОписаниеОповещения,
		ТекстВопроса,
		Кнопки,,
		КнопкаПоУмолчанию);
	
КонецПроцедуры

// Продолжение процедуры ПоказатьВопросОНедоступномШаблоне.
//
&НаКлиенте
Процедура ПродолжитьВопросОНедоступномШаблоне(Ответ, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Ответ) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ = "ПроверитьИЗакрыть" Тогда
		
		ОшибкиПроверкиДоступности = ПроверитьДоступностьШаблона(Истина);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗавершитьВопросОНедоступномШаблоне", ЭтотОбъект);
		
		Кнопки = Новый СписокЗначений;
		
		ЭтоШаблонПроцесса = Не ЗначениеЗаполнено(Объект.ВладелецШаблона);
		
		Если ДоступенРучнойЗапускПоШаблону Тогда
			
			ОповеститьОбИзменении(Объект.Ссылка);
			
			Кнопки.Добавить("Закрыть", НСтр("ru = 'ОК'"));
			КнопкаПоУмолчанию = "Закрыть";
			
			Если ДоступенАвтоматическийЗапускПоШаблону Тогда
				
				Если ЭтоШаблонПроцесса Тогда
					ТекстВопроса = НСтр("ru = 'Шаблон прошел проверку и доступен для запуска процессов.'");
				Иначе
					ТекстВопроса = НСтр("ru = 'Действие настроено корректно.'");
				КонецЕсли;
			Иначе
				
				Если ЭтоШаблонПроцесса Тогда
					ТекстВопроса = НСтр("ru = 'Шаблон прошел проверку и доступен для запуска процессов вручную.
						|Для автоматического запуска процессов заполните обязательные поля.'");
				Иначе
					ТекстВопроса = НСтр("ru = 'Действие прошло проверку.
						|Но не заполнены поля для автоматического запуска.'");
				КонецЕсли;
				
				Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
				
			КонецЕсли;
			
		Иначе
			
			ВывестиОшибкиПроверкиДоступности(ОшибкиПроверкиДоступности);
			
			Кнопки.Добавить("Закрыть", НСтр("ru = 'Закрыть'"));
			Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
			КнопкаПоУмолчанию = КодВозвратаДиалога.Отмена;
			
			Если ЭтоШаблонПроцесса Тогда
				ТекстВопроса = НСтр("ru = 'Шаблон не прошел проверку.
					|Исправьте обнаруженные ошибки (см. панель Сообщения).'");
			Иначе
				ТекстВопроса = НСтр("ru = 'Действие не прошло проверку.
					|Исправьте обнаруженные ошибки (см. панель Сообщения).'");
			КонецЕсли;
			
		КонецЕсли;
		
		ПоказатьВопрос(
			ОписаниеОповещения,
			ТекстВопроса,
			Кнопки,,
			КнопкаПоУмолчанию);
		
	ИначеЕсли Ответ = "ЗакрытьБезПроверки" Тогда
		НеПоказыватьВопросОНедоступномШаблоне = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры ПродолжитьВопросОНедоступномШаблоне.
//
&НаКлиенте
Процедура ЗавершитьВопросОНедоступномШаблоне(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = "Закрыть" Тогда
		НеПоказыватьВопросОНедоступномШаблоне = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Выводит диалог выбора варианта редактирования маршрута комплексного процесса/шаблона.
//
&НаКлиенте
Процедура ВыбратьВариантРедактированияМаршрута()
	
	РаботаСКомплекснымиБизнесПроцессамиКлиент.ВыбратьВариантРедактированияМаршрута(
		ЭтотОбъект,
		Новый ОписаниеОповещения("ЗавершитьВыборВариантРедактированияМаршрута", ЭтотОбъект));
		
КонецПроцедуры

// Продолжение ВыбратьВариантРедактированияМаршрута.
//
&НаКлиенте
Процедура ЗавершитьВыборВариантРедактированияМаршрута(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Закрыть();
	ИначеЕсли Результат <> "Схема" Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьСхемуПроцессаПоУмолчанию();
	
	РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.
		НастроитьЭлементыРедактированияМаршрута(ЭтотОбъект);
	
	НастроитьДоступностьРедактированияСхемы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьОписаниеТрудозатрат(Форма)
	
	ПараметрыОписания = Новый Структура;
	ПараметрыОписания.Вставить("Контролер", Истина);
	
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьОписаниеТрудозатрат(Форма, ПараметрыОписания);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВажностьВсехЭтапов(ВажностьЭтапов)
	
	Если РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект) Тогда
		РаботаСКомплекснымиБизнесПроцессамиСервер.ОбновитьВажностьДляВсехНастроекСхемы(ЭтотОбъект);
	Иначе
		Для Каждого Этап Из Объект.Этапы Цикл
			ШаблонОбъект = Этап.ШаблонБизнесПроцесса.ПолучитьОбъект();
			ШаблонОбъект.Важность = ВажностьЭтапов;
			ШаблонОбъект.Записать();
		КонецЦикла;
		РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяФормыДляОткрытияДействия(Ссылка)
	
	Возврат Ссылка.Метаданные().ПолноеИмя() + ".ФормаОбъекта";
	
КонецФункции

// Устанавливает доступность элементов формы при ее открытии в зависимости от
// прав доступа к шаблону.
//
&НаСервере
Процедура УстановитьДоступностьЭлементовПоПравуДоступа()
	
	Если НЕ Объект.Ссылка.Пустая()
		И НЕ ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(Объект.Ссылка).Изменение Тогда
		
		ТолькоПросмотр = Истина;
		
		Элементы.РабочаяГруппаТаблица.ТолькоПросмотр = Истина;
		Элементы.ТочкиМаршрута.ТолькоПросмотр = Истина;
		
		Элементы.ФормаЗакрытьФорму.Видимость = Истина;
		Элементы.ФормаЗакрытьФорму.КнопкаПоУмолчанию = Истина;
		Элементы.ФормаЗаписатьИЗакрыть.Видимость = Ложь;
		
		Элементы.ЭтапыИзменитьДействие.Доступность = Ложь;
		Элементы.ЭтапыКонтекстноеМенюИзменитьДействие.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Настраивает форму для отображения шаблона по умолчанию.
//
&НаСервере
Процедура НастроитьФормуДляШаблонаПоУмолчанию()
	
	Элементы.ФормаЗаполнитьПоУмолчанию.Видимость = Ложь;
	
	Если Объект.Ссылка <> Справочники.ШаблоныКомплексныхБизнесПроцессов.ПоУмолчанию Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.НаименованиеШаблона.Видимость = Ложь;
	Элементы.Родитель.Видимость = Ложь;
	Элементы.Комментарий.Видимость = Ложь;
	Элементы.ГруппаКоманды.Видимость = Ложь;
	Элементы.Важность.Видимость = Ложь;
	Элементы.ДобавлятьНаименованиеПредмета.Видимость = Ложь;
	Элементы.ГруппаНастройкаПредметов.Видимость = Ложь;
	Элементы.ОписаниеТрудозатрат.Видимость = Ложь;
	Элементы.ОписаниеОтложенногоСтарта.Видимость = Ложь;
	
	Элементы.ФормаЗаполнитьПоУмолчанию.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоУмолчаниюНаСервере()
	
	РазблокироватьДанныеДляРедактирования();
	
	НачатьТранзакцию();
	
	Попытка
		
		РабочаяГруппаШаблона =
			РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
		РабочаяГруппаУдалить = Новый Массив;
		Для Каждого СтрокаТаблицы Из РабочаяГруппаШаблона Цикл
			РабочаяГруппаУдалить.Добавить(
				Новый Структура("Участник, Изменение",
				СтрокаТаблицы.Участник,
				СтрокаТаблицы.Изменение));
		КонецЦикла;
		
		ШаблонОбъект = ДанныеФормыВЗначение(
			Объект, Тип("СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов"));
		
		ШаблонОбъект.ЗаполнитьШаблонПоУмолчанию();
		ШаблонОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаУдалить", РабочаяГруппаУдалить);
		ШаблонОбъект.Записать();
		
		ШаблоныБизнесПроцессов.ЗаписатьДоступностьШаблона(Объект.Ссылка, Ложь, Истина);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Прочитать();
	
	ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

#КонецОбласти