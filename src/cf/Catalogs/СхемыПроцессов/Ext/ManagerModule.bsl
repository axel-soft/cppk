#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДанныеСхемыПоОписанию

// Возвращает структуру описания элемента Старт.
// 
// Параметры:
//  Структура:
//   * Тип - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов - всегда Старт
//   * Имя - Строка - имя элемента в схеме.
//   * Наименование - Строка - наименование элемента в схеме.
//   * Лево, Верх, Ширина, Высота - Число - координаты размещения элемента в схеме.
//   * ИмяПоследователя - Строка - имя элемента, с которым соединяется текущий с помощью
//                                 соединительной линии.
//
Функция ОписаниеЭлементаСтарт() Экспорт
	
	ОписаниеЭлемента = Новый Структура;
	ОписаниеЭлемента.Вставить("Тип", Перечисления.ТипыЭлементовСхемПроцессов.Старт);
	
	ОписаниеЭлемента.Вставить("Имя", "Старт");
	ОписаниеЭлемента.Вставить("Наименование", "");
	
	ОписаниеЭлемента.Вставить("Лево", 20);
	ОписаниеЭлемента.Вставить("Верх", 20);
	ОписаниеЭлемента.Вставить("Ширина", 40);
	ОписаниеЭлемента.Вставить("Высота", 40);
	
	ОписаниеЭлемента.Вставить("ИмяПоследователя", "");
	
	Возврат ОписаниеЭлемента;
	
КонецФункции

// Возвращает структуру описания элемента Завершение.
// 
// Параметры:
//  Структура:
//   * Тип - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов - всегда Завершение
//   * Имя - Строка - имя элемента в схеме.
//   * Наименование - Строка - наименование элемента в схеме.
//   * Лево, Верх, Ширина, Высота - Число - координаты размещения элемента в схеме.
//
Функция ОписаниеЭлементаЗавершение() Экспорт
	
	ОписаниеЭлемента = Новый Структура;
	ОписаниеЭлемента.Вставить("Тип", Перечисления.ТипыЭлементовСхемПроцессов.Завершение);
	
	ОписаниеЭлемента.Вставить("Имя", "Завершение");
	ОписаниеЭлемента.Вставить("Наименование", "");
	
	ОписаниеЭлемента.Вставить("Лево", 20);
	ОписаниеЭлемента.Вставить("Верх", 20);
	ОписаниеЭлемента.Вставить("Ширина", 40);
	ОписаниеЭлемента.Вставить("Высота", 40);
	
	Возврат ОписаниеЭлемента;
	
КонецФункции

// Возвращает структуру описания элемента Действие.
// 
// Параметры:
//  Структура:
//   * Тип - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов - всегда Действие
//   * Имя - Строка - имя элемента в схеме.
//   * Наименование - Строка - наименование элемента в схеме.
//   * Лево, Верх, Ширина, Высота - Число - координаты размещения элемента в схеме.
//   * ИмяПоследователя - Строка - имя элемента, с которым соединяется текущий с помощью
//                                 соединительной линии.
//
Функция ОписаниеЭлементаДействие() Экспорт
	
	ОписаниеЭлемента = Новый Структура;
	ОписаниеЭлемента.Вставить("Тип", Перечисления.ТипыЭлементовСхемПроцессов.Действие);
	
	ОписаниеЭлемента.Вставить("Имя", "Обработка1");
	ОписаниеЭлемента.Вставить("Наименование", НСтр("ru = 'Действие'"));
	
	ОписаниеЭлемента.Вставить("Лево", 20);
	ОписаниеЭлемента.Вставить("Верх", 20);
	ОписаниеЭлемента.Вставить("Ширина", 120);
	ОписаниеЭлемента.Вставить("Высота", 60);
	
	ОписаниеЭлемента.Вставить("ИмяПоследователя", "");
	
	Возврат ОписаниеЭлемента;
	
КонецФункции

// Возвращает структуру описания элемента ВложенныйПроцесс.
// 
// Параметры:
//  Структура:
//   * Тип - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов - всегда ВложенныйПроцесс
//   * Имя - Строка - имя элемента в схеме.
//   * Наименование - Строка - наименование элемента в схеме.
//   * Лево, Верх, Ширина, Высота - Число - координаты размещения элемента в схеме.
//   * ИмяПоследователя - Строка - имя элемента, с которым соединяется текущий с помощью
//                                 соединительной линии.
//
Функция ОписаниеЭлементаВложенныйПроцесс() Экспорт
	
	ОписаниеЭлемента = Новый Структура;
	ОписаниеЭлемента.Вставить("Тип", Перечисления.ТипыЭлементовСхемПроцессов.ВложенныйПроцесс);
	
	ОписаниеЭлемента.Вставить("Имя", "Обработка1");
	ОписаниеЭлемента.Вставить("Наименование", НСтр("ru = 'Вложенный процесс'"));
	
	ОписаниеЭлемента.Вставить("Лево", 20);
	ОписаниеЭлемента.Вставить("Верх", 20);
	ОписаниеЭлемента.Вставить("Ширина", 120);
	ОписаниеЭлемента.Вставить("Высота", 60);
	
	ОписаниеЭлемента.Вставить("ИмяПоследователя", "");
	
	Возврат ОписаниеЭлемента;
	
КонецФункции

// Возвращает структуру описания элемента Скрипт.
// 
// Параметры:
//  Структура:
//   * Тип - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов - всегда Скрипт
//   * Имя - Строка - имя элемента в схеме.
//   * Наименование - Строка - наименование элемента в схеме.
//   * Лево, Верх, Ширина, Высота - Число - координаты размещения элемента в схеме.
//   * ИмяПоследователя - Строка - имя элемента, с которым соединяется текущий с помощью
//                                 соединительной линии.
//
Функция ОписаниеЭлементаСкрипт() Экспорт
	
	ОписаниеЭлемента = Новый Структура;
	ОписаниеЭлемента.Вставить("Тип", Перечисления.ТипыЭлементовСхемПроцессов.Скрипт);
	
	ОписаниеЭлемента.Вставить("Имя", "Обработка1");
	ОписаниеЭлемента.Вставить("Наименование", НСтр("ru = 'Скрипт'"));
	
	ОписаниеЭлемента.Вставить("Лево", 20);
	ОписаниеЭлемента.Вставить("Верх", 20);
	ОписаниеЭлемента.Вставить("Ширина", 120);
	ОписаниеЭлемента.Вставить("Высота", 60);
	
	ОписаниеЭлемента.Вставить("ИмяПоследователя", "");
	
	Возврат ОписаниеЭлемента;
	
КонецФункции

// Возвращает структуру описания элемента Условие.
// 
// Параметры:
//  Структура:
//   * Тип - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов - всегда Условие
//   * Имя - Строка - имя элемента в схеме.
//   * Наименование - Строка - наименование элемента в схеме.
//   * Лево, Верх, Ширина, Высота - Число - координаты размещения элемента в схеме.
//   * СторонаВеткиНет, СторонаВеткиДа - Число - номера сторон условия из которых выходят линии "да", "нет".
//                                               1 - середина левой стороны, 2 - верх, 3 - право, 4 - лево.
//   * ИмяПоследователяДа - Строка - имя элемента, с которым соединяется текущий линией Да.
//   * ИмяПоследователяНет - Строка - имя элемента, с которым соединяется текущий линией Нет.
//
Функция ОписаниеЭлементаУсловие() Экспорт
	
	ОписаниеЭлемента = Новый Структура;
	ОписаниеЭлемента.Вставить("Тип", Перечисления.ТипыЭлементовСхемПроцессов.Условие);
	
	ОписаниеЭлемента.Вставить("Имя", "Условие1");
	ОписаниеЭлемента.Вставить("Наименование", НСтр("ru = 'Условие'"));
	
	ОписаниеЭлемента.Вставить("Лево", 20);
	ОписаниеЭлемента.Вставить("Верх", 20);
	ОписаниеЭлемента.Вставить("Ширина", 120);
	ОписаниеЭлемента.Вставить("Высота", 40);
	
	ОписаниеЭлемента.Вставить("СторонаВеткиНет", 1);
	ОписаниеЭлемента.Вставить("СторонаВеткиДа", 3);
	
	ОписаниеЭлемента.Вставить("ИмяПоследователяДа", "");
	ОписаниеЭлемента.Вставить("ИмяПоследователяНет", "");
	
	Возврат ОписаниеЭлемента;
	
КонецФункции

// Возвращает структуру описания элемента Слияние.
// 
// Параметры:
//  Структура:
//   * Тип - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов - всегда Слияние
//   * Имя - Строка - имя элемента в схеме.
//   * Наименование - Строка - наименование элемента в схеме.
//   * Лево, Верх, Ширина, Высота - Число - координаты размещения элемента в схеме.
//   * ИмяПоследователя - Строка - имя элемента, с которым соединяется текущий с помощью
//                                 соединительной линии.
//
Функция ОписаниеЭлементаСлияние() Экспорт
	
	ОписаниеЭлемента = Новый Структура;
	ОписаниеЭлемента.Вставить("Тип", Перечисления.ТипыЭлементовСхемПроцессов.Слияние);
	
	ОписаниеЭлемента.Вставить("Имя", "Слияние1");
	ОписаниеЭлемента.Вставить("Наименование", "");
	
	ОписаниеЭлемента.Вставить("Лево", 20);
	ОписаниеЭлемента.Вставить("Верх", 20);
	ОписаниеЭлемента.Вставить("Ширина", 40);
	ОписаниеЭлемента.Вставить("Высота", 20);
	
	ОписаниеЭлемента.Вставить("ИмяПоследователя", "");
	
	Возврат ОписаниеЭлемента;
	
КонецФункции

// Возвращает структуру описания элемента Разделение.
// 
// Параметры:
//  Структура:
//   * Тип - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов - всегда Разделение
//   * Имя - Строка - имя элемента в схеме.
//   * Наименование - Строка - наименование элемента в схеме.
//   * Лево, Верх, Ширина, Высота - Число - координаты размещения элемента в схеме.
//   * ИменаПоследователей - Массив
//     ** Строка - имя элемента, с которым соединяется текущий с помощью
//                 соединительной линии.
//
Функция ОписаниеЭлементаРазделение() Экспорт
	
	ОписаниеЭлемента = Новый Структура;
	ОписаниеЭлемента.Вставить("Тип", Перечисления.ТипыЭлементовСхемПроцессов.Разделение);
	
	ОписаниеЭлемента.Вставить("Имя", "Разделение1");
	ОписаниеЭлемента.Вставить("Наименование", "");
	
	ОписаниеЭлемента.Вставить("Лево", 20);
	ОписаниеЭлемента.Вставить("Верх", 20);
	ОписаниеЭлемента.Вставить("Ширина", 40);
	ОписаниеЭлемента.Вставить("Высота", 20);
	
	ОписаниеЭлемента.Вставить("ИменаПоследователей", Новый Массив);
	
	Возврат ОписаниеЭлемента;
	
КонецФункции

// Возвращает структуру описания элемента Декорация.
// 
// Параметры:
//  Структура:
//   * Тип - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов - всегда Декорация
//   * Имя - Строка - имя элемента в схеме.
//   * Наименование - Строка - наименование элемента в схеме.
//   * ГоризонтальноеПоложениеТекста - ГоризонтальноеПоложение - горизонтальное положение текста наименования.
//   * ВертикальноеПоложениеТекста - ВертикальноеПоложение - вертикальное положение текста наименования.
//   * ЦветФона - Цвет - цвет фона декорации
//   * ЦветРамки - Цвет - цвет рамки декорации
//   * ЦветТекста - Цвет - цвет текста декорации
//   * Шрифт - Шрифт - шрифт текста декорации
//   * Картинка - Картинка - картинка декорации
//   * ПоложениеКартинки - ПоложениеКартинкиЭлементаГрафическойСхемы - положение картинки декорации
//   * РазмерКартинки - РазмерКартинки - размер картинки декорации
//   * ПрозрачныйФон - Булево - прозрачность фона декорации
//   * Фигура - ФигурыГрафическойСхемы - фигура декорации
//   * Лево, Верх, Ширина, Высота - Число - координаты размещения элемента в схеме.
//
Функция ОписаниеЭлементаДекорация() Экспорт
	
	ОписаниеЭлемента = Новый Структура;
	ОписаниеЭлемента.Вставить("Тип", Перечисления.ТипыЭлементовСхемПроцессов.Декорация);
	
	ОписаниеЭлемента.Вставить("Имя", "Декорация1");
	ОписаниеЭлемента.Вставить("Наименование", НСтр("ru = 'Декорация'"));
	
	ОписаниеЭлемента.Вставить("ГоризонтальноеПоложениеТекста", ГоризонтальноеПоложение.Центр);
	ОписаниеЭлемента.Вставить("ВертикальноеПоложениеТекста", ВертикальноеПоложение.Центр);
	
	ОписаниеЭлемента.Вставить("Подсказка", "");
	
	ОписаниеЭлемента.Вставить("ЦветФона", Новый Цвет());
	ОписаниеЭлемента.Вставить("ЦветРамки", ЦветаСтиля.ЦветРамки);
	ОписаниеЭлемента.Вставить("ЦветТекста", Новый Цвет());
	ОписаниеЭлемента.Вставить("Шрифт", Новый Шрифт());
	
	ОписаниеЭлемента.Вставить("Картинка", Новый Картинка());
	ОписаниеЭлемента.Вставить("ПоложениеКартинки", ПоложениеКартинкиЭлементаГрафическойСхемы.Лево);
	ОписаниеЭлемента.Вставить("РазмерКартинки", РазмерКартинки.АвтоРазмер);
	
	ОписаниеЭлемента.Вставить("ПрозрачныйФон", Ложь);
	
	ОписаниеЭлемента.Вставить("Фигура", ФигурыГрафическойСхемы.Блок);
	
	ОписаниеЭлемента.Вставить("Лево", 20);
	ОписаниеЭлемента.Вставить("Верх", 20);
	ОписаниеЭлемента.Вставить("Ширина", 120);
	ОписаниеЭлемента.Вставить("Высота", 60);
		
	Возврат ОписаниеЭлемента;
	
КонецФункции

// Возвращает структуру описания элемента ДекоративнаяЛиния.
// 
// Параметры:
//  Структура:
//   * Тип - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов - всегда ДекоративнаяЛиния
//   * Имя - Строка - имя элемента в схеме.
//   * Наименование - Строка - наименование элемента в схеме.
//   * ПоложениеТекста - ПоложениеТекстаСоединительнойЛинии - положения текста вдоль линии. 
//   * ЦветЛинии - Цвет - цвет линии
//   * ЦветТекста - Цвет - цвет текста вдоль линии
//   * Шрифт - Шрифт - шрифт текста вдоль линии
//   * Линия - Линия (Новый Линия(ТипСоединительнойЛинии.Сплошная, 1)) - тип линии 
//   * СтрелкаНачала - СтильСтрелки - стиль стрелки начала линии
//   * СтрелкаКонца - СтильСтрелки - стиль стрелки конца линии
//   * Точки - ТаблицаЗначений - таблица точек, через которую проходит линия.
//     ** x - Число
//     ** y - Число
//   * ИмяПредшественника - Строка - имя элемента схемы, к которому привязано начало линии.
//   * СторонаПредшественника - Число - номер стороны элемента предшественника, к которой
//                                      привязано начало линии.
//   * ИмяПоследователя - Строка - имя элемента схемы, к которому привязан конец линии.
//   * СторонаПоследователя - Число - номер стороны элемента последователя, к которой
//                                    привязан конец линии.                                      
//
Функция ОписаниеЭлементаДекоративнаяЛиния() Экспорт
	
	ОписаниеЭлемента = Новый Структура;
	ОписаниеЭлемента.Вставить("Тип", Перечисления.ТипыЭлементовСхемПроцессов.ДекоративнаяЛиния);
	
	ОписаниеЭлемента.Вставить("Имя", "ДекоративнаяЛиния1");
	ОписаниеЭлемента.Вставить("Наименование", НСтр("ru = 'Декоративная линия'"));
	
	ОписаниеЭлемента.Вставить("ПоложениеТекста", ПоложениеТекстаСоединительнойЛинии.ПервыйСегмент);
	
	ОписаниеЭлемента.Вставить("Подсказка", "");
		
	ОписаниеЭлемента.Вставить("ЦветЛинии", ЦветаСтиля.ЦветРамки);
	ОписаниеЭлемента.Вставить("ЦветТекста", ЦветаСтиля.ЦветТекстаФормы);
	
	ОписаниеЭлемента.Вставить("Шрифт", Новый Шрифт());
	
	ОписаниеЭлемента.Вставить("Линия", Новый Линия(ТипСоединительнойЛинии.Сплошная, 1));
	
	ОписаниеЭлемента.Вставить("СтрелкаНачала", СтильСтрелки.Нет);
	ОписаниеЭлемента.Вставить("СтрелкаКонца", СтильСтрелки.Заполненная);
	
	Точки = Новый ТаблицаЗначений();
	Точки.Колонки.Добавить("x", Новый ОписаниеТипов("Число"));
	Точки.Колонки.Добавить("y", Новый ОписаниеТипов("Число"));
	ОписаниеЭлемента.Вставить("Точки", Точки);
	
	ОписаниеЭлемента.Вставить("ИмяПредшественника", "");
	ОписаниеЭлемента.Вставить("СторонаПредшественника", -1);
	
	ОписаниеЭлемента.Вставить("ИмяПоследователя", "");
	ОписаниеЭлемента.Вставить("СторонаПоследователя", -1);
	
	Возврат ОписаниеЭлемента;
	
КонецФункции

// Возвращает данные схемы процесса по описанию ее элементов.
// 
// Параметры:
//  ЭлементыСхемы - элементы схемы.
//   * Структура - описание элемента
//   	см. ОписаниеЭлементаСтарт, ОписаниеЭлементаЗавершение, ОписаниеЭлементаДействие
// 
// Возвращаемое значение:
//  Структура - см. СтруктураДанныхСхемыПроцесса
//  
Функция ДанныеСхемыПоОписаниюЭлементов(ЭлементыСхемы) Экспорт
	
	ДанныеСхемы = СтруктураДанныхСхемыПроцесса();
	
	ПостроительСхемы = ПостроительГрафическойСхемы();
	
	ПрисвоитьИдентификаторыЭлементамВПостроителе(ПостроительСхемы, ЭлементыСхемы);
	РассчитатьКоординатыВерхнейТочкиСоединенияДляЭлементов(ПостроительСхемы, ЭлементыСхемы);
	
	Для Каждого ЭлементСхемы Из ЭлементыСхемы Цикл
		
		Если СхемыПроцессовКлиентСервер.ЭтоСтартСхемы(ЭлементСхемы.Тип) Тогда
			
			ДобавитьВПостроительСхемыЭлементСтарт(ПостроительСхемы, ЭлементСхемы);
			
		ИначеЕсли СхемыПроцессовКлиентСервер.ЭтоЗавершениеСхемы(ЭлементСхемы.Тип) Тогда
			
			ДобавитьВПостроительСхемыЭлементЗавершение(ПостроительСхемы, ЭлементСхемы);
			
		ИначеЕсли СхемыПроцессовКлиентСервер.ЭтоДействиеСхемы(ЭлементСхемы.Тип) Тогда
			
			ДобавитьВПостроительСхемыЭлементДействие(ПостроительСхемы, ЭлементСхемы);
			
		ИначеЕсли СхемыПроцессовКлиентСервер.ЭтоВложенныйПроцессСхемы(ЭлементСхемы.Тип) Тогда
			
			ДобавитьВПостроительСхемыЭлементВложенныйПроцесс(ПостроительСхемы, ЭлементСхемы);
			
		ИначеЕсли СхемыПроцессовКлиентСервер.ЭтоСкриптСхемы(ЭлементСхемы.Тип) Тогда
			
			ДобавитьВПостроительСхемыЭлементСкрипт(ПостроительСхемы, ЭлементСхемы);
			
		ИначеЕсли СхемыПроцессовКлиентСервер.ЭтоУсловиеСхемы(ЭлементСхемы.Тип) Тогда
			
			ДобавитьВПостроительСхемыЭлементУсловие(ПостроительСхемы, ЭлементСхемы);
			
		ИначеЕсли СхемыПроцессовКлиентСервер.ЭтоРазделениеСхемы(ЭлементСхемы.Тип) Тогда
			
			ДобавитьВПостроительСхемыЭлементРазделение(ПостроительСхемы, ЭлементСхемы);
			
		ИначеЕсли СхемыПроцессовКлиентСервер.ЭтоСлияниеСхемы(ЭлементСхемы.Тип) Тогда
			
			ДобавитьВПостроительСхемыЭлементСлияние(ПостроительСхемы, ЭлементСхемы);
			
		ИначеЕсли СхемыПроцессовКлиентСервер.ЭтоДекорацияСхемы(ЭлементСхемы.Тип) Тогда
			
			ДобавитьВПостроительСхемыЭлементДекорация(ПостроительСхемы, ЭлементСхемы);
		
		ИначеЕсли СхемыПроцессовКлиентСервер.ЭтоДекоративнаяЛинияСхемы(ЭлементСхемы.Тип) Тогда
			
			ДобавитьВПостроительСхемыЭлементДекоративнаяЛиния(ПостроительСхемы, ЭлементСхемы);
			
		КонецЕсли;
		
		ДанныеСхемы.Настройки.ТипыЭлементов[ЭлементСхемы.Имя] = ЭлементСхемы.Тип;
		
	КонецЦикла;
	
	ДанныеСхемы.Схема = ГрафическаяСхемаИзПостроителя(ПостроительСхемы); 
	
	СхемыПроцессовКлиентСервер.ОбновитьНастройкиПоСхеме(ДанныеСхемы.Настройки, ДанныеСхемы.Схема);
		
	Возврат ДанныеСхемы;
	
КонецФункции

#КонецОбласти
	
// Возвращает пустую структуру данных схемы процесса. 
// 
// Возвращаемое значение:
// 	Структура - см. СхемыПроцессовКлиентСервер.СтруктураДанныхСхемыПроцесса()
//
Функция СтруктураДанныхСхемыПроцесса() Экспорт
	
	Возврат СхемыПроцессовКлиентСервер.СтруктураДанныхСхемыПроцесса();
		
КонецФункции

// Возвращает данные схемы процесса.
// 
// Параметры:
// 	СхемаПроцесса - СправочникСсылка.СхемыПроцессов
// 	
// Возвращаемое значение:
// 	Структура - см. СтруктураДанныхСхемыПроцесса 
//
Функция ДанныеСхемыПроцесса(СхемаПроцесса) Экспорт
	
	ДанныеСхемы = СтруктураДанныхСхемыПроцесса();
	
	СхемаПроцессаОбъект = СхемаПроцесса.ПолучитьОбъект();
	
	ДанныеСхемы.Наименование = СхемаПроцессаОбъект.Наименование;	
	
	ДанныеСхемы.ПометкаУдаления = СхемаПроцессаОбъект.ПометкаУдаления;
	
	ДанныеСхемы.ВерсияДанных = СхемаПроцессаОбъект.ВерсияДанных;
	
	ДанныеСхемы.ИсточникДанных = СхемаПроцессаОбъект.ИсточникДанных;
	
	// Графическую схему из реквизит СхемаПроцессаОбъект.Схема
	ИмяФайлаСхемы = ПолучитьИмяВременногоФайла("grs");
	СхемаПроцессаОбъект.Схема.Получить().Записать(ИмяФайлаСхемы);
	ДанныеСхемы.Схема.Прочитать(ИмяФайлаСхемы);
	УдалитьФайлы(ИмяФайлаСхемы);
	
	// Читаем настройки графической схемы из реквизита СхемаПроцессаОбъект.Настройки
	ИмяФайлаНастроек = ПолучитьИмяВременногоФайла("json");
	СхемаПроцессаОбъект.Настройки.Получить().Записать(ИмяФайлаНастроек);
	Чтение = Новый ЧтениеJSON;
	Чтение.ОткрытьФайл(ИмяФайлаНастроек);
		
	НастройкаИзJSON = ПрочитатьJSON(
		Чтение,
		Ложь,,,
		"ВосстановлениеЧтенияНастройкиСхемы",
		Справочники.СхемыПроцессов);
	
	Чтение.Закрыть();
	УдалитьФайлы(ИмяФайлаНастроек);
	
	Для Каждого Настройка Из ДанныеСхемы.Настройки Цикл
		
		Если ТипЗнч(Настройка.Значение) = Тип("Соответствие") Тогда
			Для Каждого КлючЗначенияJSON Из НастройкаИзJSON[Настройка.Ключ] Цикл
				Настройка.Значение[КлючЗначенияJSON.Ключ] = КлючЗначенияJSON.Значение;								
			КонецЦикла;	
		КонецЕсли;
			
	КонецЦикла;	
		
	Возврат ДанныеСхемы;
	
КонецФункции

// Записывает данные схемы процесса.
// 
// Если передается пустая ссылка, то создается новый элемент справочника.
// Если передается идентификатор, то обновляется соответствующий элемент справочника или создается
// новый по этому идентификатору.
// Если передается ссылка на элемент, то он и обновляется.  
// 
// Параметры:
// 	СхемаПроцесса - СправочникСсылка.СхемыПроцессов, УникальныйИдентификатор
// 	ДанныхСхемыПроцесса - Структура - см. СтруктураДанныхСхемыПроцесса
// 	Загрузка - Булево - режим загрузки данных.
// 
// Возвращаемое значение:
// 	Структура
// 	 * СхемаПроцесса - СправочникСсылка.СхемыПроцессов - ссылка на записанную схему процесса
// 	                   с переданными параметрами.
// 	 * ВерсияДанных - Строка - версия данных записанной схемы процесса в базу.
//
Функция ЗаписатьДанныеСхемыПроцесса(СхемаПроцесса, ДанныхСхемыПроцесса, Загрузка = Ложь) Экспорт
	
	РезультатЗаписи = Новый Структура;
	РезультатЗаписи.Вставить("СхемаПроцесса", ПустаяСсылка());
	РезультатЗаписи.Вставить("ВерсияДанных", "");
			
	ТипСсылкиНаСхему = ТипЗнч(СхемаПроцесса);
	
	НовыйОбъектСхемы = Ложь;	
	Если ТипСсылкиНаСхему = Тип("СправочникСсылка.СхемыПроцессов")
		И ЗначениеЗаполнено(СхемаПроцесса) Тогда
		
		ЗаблокироватьДанныеДляРедактирования(СхемаПроцесса);
		СхемаПроцессаОбъект = СхемаПроцесса.ПолучитьОбъект();
		
	ИначеЕсли ТипСсылкиНаСхему = Тип("УникальныйИдентификатор") Тогда
		
		СсылкаПоИдентификатору = ПолучитьСсылку(СхемаПроцесса);
		Если ОбщегоНазначения.СсылкаСуществует(СсылкаПоИдентификатору) Тогда
			ЗаблокироватьДанныеДляРедактирования(СсылкаПоИдентификатору);
			СхемаПроцессаОбъект = СсылкаПоИдентификатору.ПолучитьОбъект();
		Иначе
			СхемаПроцессаОбъект = СоздатьЭлемент();
			СхемаПроцессаОбъект.УстановитьСсылкуНового(СсылкаПоИдентификатору);
			НовыйОбъектСхемы = Истина;
		КонецЕсли;
		
	Иначе
		СхемаПроцессаОбъект = СоздатьЭлемент();
		НовыйОбъектСхемы = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СхемаПроцессаОбъект.ВерсияДанных)
		И ЗначениеЗаполнено(ДанныхСхемыПроцесса.ВерсияДанных)
		И СхемаПроцессаОбъект.ВерсияДанных <> ДанныхСхемыПроцесса.ВерсияДанных Тогда
		
		ВызватьИсключение НСтр("ru = 'Не удалось сохранить изменения.
			|Возможно, схема процесса была изменена другим сотрудником.'");
	КонецЕсли;
	
	СхемаПроцессаОбъект.Наименование = ДанныхСхемыПроцесса.Наименование;
	
	СхемаПроцессаОбъект.ПометкаУдаления = ДанныхСхемыПроцесса.ПометкаУдаления;
	
	СхемаПроцессаОбъект.ИсточникДанных = ДанныхСхемыПроцесса.ИсточникДанных;
	
	// Помещение файла графической схемы в реквизит СхемаПроцессаОбъект.Схема.  
	ИмяФайлаСхемы = ПолучитьИмяВременногоФайла("grs");
	ДанныхСхемыПроцесса.Схема.Записать(ИмяФайлаСхемы);
	СхемаПроцессаОбъект.Схема = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяФайлаСхемы));
	УдалитьФайлы(ИмяФайлаСхемы);
	
	// Помещение файла с настройками схемы в реквизит СхемаПроцессаОбъект.Настройки 	
	ИмяФайлаНастроек = ПолучитьИмяВременногоФайла("json");
		
	Запись = Новый ЗаписьJSON;
	Запись.ОткрытьФайл(ИмяФайлаНастроек);
	ЗаписатьJSON(
		Запись,
		ДанныхСхемыПроцесса.Настройки,
		Новый НастройкиСериализацииJSON,
		"ПреобразованиеЗаписиНастройкиСхемы",
		Справочники.СхемыПроцессов);
	Запись.Закрыть();
	
	СхемаПроцессаОбъект.Настройки = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяФайлаНастроек));
	УдалитьФайлы(ИмяФайлаНастроек);
	
	СхемаПроцессаОбъект.ОбменДанными.Загрузка = Загрузка;
	
	// Пишем схему процесса в базу.	
	СхемаПроцессаОбъект.Записать();
	
	Если Не НовыйОбъектСхемы Тогда
		РазблокироватьДанныеДляРедактирования(СхемаПроцессаОбъект.Ссылка);
	КонецЕсли;
	
	РезультатЗаписи.СхемаПроцесса = СхемаПроцессаОбъект.Ссылка;
	РезультатЗаписи.ВерсияДанных = СхемаПроцессаОбъект.ВерсияДанных;
	Возврат РезультатЗаписи; 
		
КонецФункции

// Удаляет схему процесса из базы.
// 
// Параметры:
// 	СхемаПроцесса - СправочникСсылка.СхемыПроцессов 
//
Процедура УдалитьСхемуПроцесса(СхемаПроцесса) Экспорт
	
	ЗаблокироватьДанныеДляРедактирования(СхемаПроцесса);
	
	СхемаПроцессаОбъект = СхемаПроцесса.ПолучитьОбъект();
	СхемаПроцессаОбъект.Удалить();
	
	РазблокироватьДанныеДляРедактирования(СхемаПроцесса);
	
КонецПроцедуры

// Возвращает двоичные данные схемы.
// 
// Параметры:
//  СхемаПроцесса - СправочникСсылка.СхемыПроцессов
// 
// Возвращаемое значение:
//  Структура
//   * Схема - ДвоичныеДанные - grs-файл упаковенный в двоичные данные.
//   * Настройки - ДвоичныеДанные - json-файл с настройками элементов схъемы,
//                 упаковенный в двоичные данные
//
Функция ДвоичныеДанныеСхемы(СхемаПроцесса) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СхемаПроцесса, "Схема, Настройки");
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДанныеСхемыПоОписанию

// Возвращает структуру построителя графической схемы процесса.
// 
// Возвращаемое значение:
// 	Структура
// 	 * СхемаXDTO - ОбъектXDTO - графическая схема сереализованная в XDTO.
//   * ИдентификаторыЭлементов - Соответствие - внутренние идентификаторы элементов схемы.
//     ** Ключ - Строка - Имя элемента в схеме
//     ** Значение - Число - идентификатор.
//   * ПоследнийИдентификатор - Число - Последний идентификатор элемента схемы.
//   * НомерПоследнейЛинии - Число - Порядковый номер последней линии в схеме.
//   * КоординатыВерхнихТочекСоединения - Соответствие
//     ** Ключ - Строка - имя элемента, Значение - Структура с полями "x" и "y" - координата.
//   
Функция ПостроительГрафическойСхемы()
	
	Построитель = Новый Структура;
	Построитель.Вставить("СхемаXDTO", СериализаторXDTO.ЗаписатьXDTO(Новый ГрафическаяСхема));
	Построитель.Вставить("ИдентификаторыЭлементов", Новый Соответствие);
	Построитель.Вставить("ПоследнийИдентификатор", 0);
	Построитель.Вставить("НомерПоследнейЛинии", 0);
	Построитель.Вставить("ИменаЭлементов", Новый Соответствие());
	
	Построитель.Вставить("КоординатыВерхнихТочекСоединения", Новый Соответствие());
	
	Возврат Построитель;
	
КонецФункции

// Присваивает внутренние идентификаторы элементам схемы в построителе. 
// 
// Параметры:
// 	ПостроительСхемы - Структура - см. ПостроительГрафическойСхемы
// 	ОписаниеЭлементов - Массив - элементы схемы.
//   * Структура - описание элемента
//   	см. ОписаниеЭлементаСтарт, ОписаниеЭлементаЗавершение, ОписаниеЭлементаДействие
//
Процедура ПрисвоитьИдентификаторыЭлементамВПостроителе(ПостроительСхемы, ОписаниеЭлементов)
	
	Для Каждого ОписаниеЭлемента Из ОписаниеЭлементов Цикл
		ИдентификаторЭлементаВПостроителеСхемы(ПостроительСхемы, ОписаниеЭлемента.Имя);
	КонецЦикла;
	
КонецПроцедуры

// Рассчитывает для элементов схемы координаты верхних точек соединения.
// 
// Параметры:
// 	ПостроительСхемы - Структура - см. ПостроительГрафическойСхемы
// 	ОписаниеЭлементов - Массив - элементы схемы.
//   * Структура - описание элемента
//   	см. ОписаниеЭлементаСтарт, ОписаниеЭлементаЗавершение, ОписаниеЭлементаДействие
//
Процедура РассчитатьКоординатыВерхнейТочкиСоединенияДляЭлементов(ПостроительСхемы, ОписаниеЭлементов)
	
	ПоляСтруктурыСтрокой = "x,y";
		
	Для Каждого ОписаниеЭлемента Из ОписаниеЭлементов Цикл
				
		Если СхемыПроцессовКлиентСервер.ЭтоДекоративнаяЛинияСхемы(ОписаниеЭлемента.Тип)
			Или СхемыПроцессовКлиентСервер.ЭтоДекорацияСхемы(ОписаниеЭлемента.Тип) Тогда
				
			Продолжить;
		КонецЕсли;
		
		Координаты = Новый Структура(ПоляСтруктурыСтрокой);
		Координаты.x = ОписаниеЭлемента.Лево + ОписаниеЭлемента.Ширина / 2; 
		Координаты.y = ОписаниеЭлемента.Верх;
		
		ПостроительСхемы.КоординатыВерхнихТочекСоединения[ОписаниеЭлемента.Имя] = Координаты;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает ранее рассчитанные координаты верхней точки соединения для элемента
// из данных построителя.
// 
// Параметры:
// 	ПостроительСхемы - Структура - см. ПостроительГрафическойСхемы
// 	ИмяЭлемента - Строка - имя элемента в схеме.
// 	
// Возвращаемое значение:
// 	Структура с полями x и y.
//
Функция КоординатыВерхнейТочкиСоединенияСЭлементом(ПостроительСхемы, ИмяЭлемента)
	
	Возврат ПостроительСхемы.КоординатыВерхнихТочекСоединения[ИмяЭлемента];
	
КонецФункции

// Возвращает идентификатор элемента схемы по данным построителя.
// 
// Если идентификатора для элемента нет, то создает новый, привязывая к имени элемента,
// и возвращает его.
// 
// Параметры:
// 	ПостроительСхемы - Структура - см. ПостроительГрафическойСхемы
// 	ИмяЭлемента - Строка - имя элемента в схеме.
// 	
// Возвращаемое значение:
// 	Число
//
Функция ИдентификаторЭлементаВПостроителеСхемы(ПостроительСхемы, ИмяЭлемента)
	
	ИдентификаторЭлемента = ПостроительСхемы.ИдентификаторыЭлементов[ИмяЭлемента];
	Если ИдентификаторЭлемента = Неопределено Тогда
		ИдентификаторЭлемента = ПостроительСхемы.ПоследнийИдентификатор + 1;
		ПостроительСхемы.ИдентификаторыЭлементов[ИмяЭлемента] = ИдентификаторЭлемента;
		ПостроительСхемы.ПоследнийИдентификатор = ИдентификаторЭлемента;
	КонецЕсли;
	
	Возврат ИдентификаторЭлемента;
	
КонецФункции

// Возвращает имя новой соединительной линии по данным построителя.
// 
// Параметры:
// 	ПостроительСхемы - Структура - см. ПостроительГрафическойСхемы
// 	
// Возвращаемое значение:
// 	Строка
//
Функция ИмяНовойСоединительнойЛинииВПостроителеСхемы(ПостроительСхемы)
	
	ПостроительСхемы.НомерПоследнейЛинии = ПостроительСхемы.НомерПоследнейЛинии + 1;
	Возврат СтрШаблон("Линия%1", ПостроительСхемы.НомерПоследнейЛинии);

КонецФункции

// Добавляет в построитель схемы элемент старта по описанию.
// 
// Параметры:
// 	ПостроительСхемы - Структура - см. ПостроительГрафическойСхемы
// 	ОписаниеЭлемента - Структура - см. ОписаниеЭлементаСтарт
//
Процедура ДобавитьВПостроительСхемыЭлементСтарт(ПостроительСхемы, ОписаниеЭлемента)
	
	ПроверитьОписаниеЭлементаПередДобавлениемВСхему(ПостроительСхемы, ОписаниеЭлемента);
	
	ПостроительСхемы.ИменаЭлементов[ОписаниеЭлемента.Имя] = Истина;
	
	СхемаСШаблоном = СериализаторXDTO.ЗаписатьXDTO(ПолучитьМакет("ШаблонЭлементаСтарт"));
	
	ЭлементыШаблоны = Новый Массив;
	Для Каждого ЭлементШаблон Из СхемаСШаблоном.item Цикл
		ЭлементыШаблоны.Добавить(ЭлементШаблон);
	КонецЦикла;
	СхемаСШаблоном = Неопределено;
	
	Pi = 3.1415926535897932;
	Tan60 = Tan(60*Pi/180);
	Отступ = Цел((ОписаниеЭлемента.Ширина/2)/Tan60);
	Если Отступ >= ОписаниеЭлемента.Высота Тогда
		Отступ = ОписаниеЭлемента.Высота - 1;
	КонецЕсли;
	
	Для Каждого ЭлементШаблон Из ЭлементыШаблоны Цикл
				
		Если ЭлементШаблон.itemType = 2 Тогда
			
			ЭлементШаблон.itemCode = ОписаниеЭлемента.Имя;
			
			ЭлементШаблон.itemId = ИдентификаторЭлементаВПостроителеСхемы(
				ПостроительСхемы, ОписаниеЭлемента.Имя);
						
			Для Каждого ЭлементЗаголовка Из ЭлементШаблон.itemTitle.item Цикл
				ЭлементЗаголовка.content = ОписаниеЭлемента.Наименование;
			КонецЦикла;
			
			ЭлементШаблон.rectLeft = ОписаниеЭлемента.Лево;
			ЭлементШаблон.rectRight = ОписаниеЭлемента.Лево + ОписаниеЭлемента.Ширина;
			ЭлементШаблон.rectTop = ОписаниеЭлемента.Верх;
			ЭлементШаблон.rectBottom = ОписаниеЭлемента.Верх + ОписаниеЭлемента.Высота;
			
			ЭлементШаблон.Point[0].x = ЭлементШаблон.rectLeft;
			ЭлементШаблон.Point[0].y = ЭлементШаблон.rectTop;
			
			ЭлементШаблон.Point[1].x = ЭлементШаблон.rectRight - 1;
			ЭлементШаблон.Point[1].y = ЭлементШаблон.rectTop;
			
			ЭлементШаблон.Point[2].x = ЭлементШаблон.rectRight - 1;
			ЭлементШаблон.Point[2].y = ЭлементШаблон.rectBottom - Отступ;
			
			ЭлементШаблон.Point[3].x = ЭлементШаблон.rectLeft + Цел(ОписаниеЭлемента.Ширина/2);
			ЭлементШаблон.Point[3].y = ЭлементШаблон.rectBottom - 1;
			
			ЭлементШаблон.Point[4].x = ЭлементШаблон.rectLeft;
			ЭлементШаблон.Point[4].y = ЭлементШаблон.rectBottom - Отступ;
			
		ИначеЕсли ЭлементШаблон.itemType = 1 Тогда
			
			ЭлементШаблон.itemCode = ИмяНовойСоединительнойЛинииВПостроителеСхемы(ПостроительСхемы); 
					
			ЭлементШаблон.itemId = ИдентификаторЭлементаВПостроителеСхемы(
				ПостроительСхемы, ЭлементШаблон.itemCode);
				
			ЭлементШаблон.connectFromItemId = ИдентификаторЭлементаВПостроителеСхемы(
				ПостроительСхемы, ОписаниеЭлемента.Имя);
			
			ЭлементШаблон.portIndexFrom = 4;
			
			ЭлементШаблон.Point[0].x = ОписаниеЭлемента.Лево + Цел(ОписаниеЭлемента.Ширина/2);
			ЭлементШаблон.Point[0].y = ОписаниеЭлемента.Верх + ОписаниеЭлемента.Высота;
					
			Если Не ЗначениеЗаполнено(ОписаниеЭлемента.ИмяПоследователя) Тогда
				ЭлементШаблон.connectToItemId = -1;
				ЭлементШаблон.portIndexTo = -1;
				
				ДлинаЛинии = 30;
				ЭлементШаблон.Point[1].x = ЭлементШаблон.Point[0].x;
				ЭлементШаблон.Point[1].y = ЭлементШаблон.Point[0].y + ДлинаЛинии;
				
			Иначе
				ЭлементШаблон.connectToItemId = ИдентификаторЭлементаВПостроителеСхемы(
					ПостроительСхемы, ОписаниеЭлемента.ИмяПоследователя);
					
				ЭлементШаблон.portIndexTo = 2;	
				
				Координаты = КоординатыВерхнейТочкиСоединенияСЭлементом(
					ПостроительСхемы, ОписаниеЭлемента.ИмяПоследователя);
				
				Смещение = ЭлементШаблон.Point[0].y - Координаты.y;
				Смещение = Макс(Смещение, -1 * Смещение);
				
				ОтступОтЭлемента = 20;
				
				Если Смещение <= ОтступОтЭлемента Тогда
					ЭлементШаблон.Point[1].x = Координаты.x;
					ЭлементШаблон.Point[1].y = Координаты.y;
				Иначе
					ЭлементШаблон.Point[1].x = ЭлементШаблон.Point[0].x;
					ЭлементШаблон.Point[1].y = ЭлементШаблон.Point[0].y + ОтступОтЭлемента;
					
					ЭлементШаблон.Point.Добавить(ТочкаXDTO(Координаты.x, Координаты.y));
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЭлементШаблон.itemTabOrder = ЭлементШаблон.itemId;
		
		ПостроительСхемы.СхемаXDTO.item.Добавить(ЭлементШаблон);
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в построитель схемы элемент завершения по описанию.
// 
// Параметры:
// 	ПостроительСхемы - Структура - см. ПостроительГрафическойСхемы
// 	ОписаниеЭлемента - Структура - см. ОписаниеЭлементаЗавершение
//
Процедура ДобавитьВПостроительСхемыЭлементЗавершение(ПостроительСхемы, ОписаниеЭлемента)
	
	ПроверитьОписаниеЭлементаПередДобавлениемВСхему(ПостроительСхемы, ОписаниеЭлемента);
	
	ПостроительСхемы.ИменаЭлементов[ОписаниеЭлемента.Имя] = Истина;
	
	СхемаСШаблоном = СериализаторXDTO.ЗаписатьXDTO(ПолучитьМакет("ШаблонЭлементаЗавершение"));
	ЭлементШаблон = СхемаСШаблоном.item[0];
	СхемаСШаблоном = Неопределено;
	
	Pi = 3.1415926535897932;
	Tan60 = Tan(60*Pi/180);
	Отступ = Цел((ОписаниеЭлемента.Ширина/2)/Tan60);
	Если Отступ >= ОписаниеЭлемента.Высота Тогда
		Отступ = ОписаниеЭлемента.Высота - 1;
	КонецЕсли;
	
	Если ЭлементШаблон.itemType = 3 Тогда
		
		ЭлементШаблон.itemCode = ОписаниеЭлемента.Имя;
		
		ЭлементШаблон.itemId = ИдентификаторЭлементаВПостроителеСхемы(
			ПостроительСхемы, ОписаниеЭлемента.Имя);
					
		Для Каждого ЭлементЗаголовка Из ЭлементШаблон.itemTitle.item Цикл
			ЭлементЗаголовка.content = ОписаниеЭлемента.Наименование;
		КонецЦикла;
		
		ЭлементШаблон.rectLeft = ОписаниеЭлемента.Лево;
		ЭлементШаблон.rectRight = ОписаниеЭлемента.Лево + ОписаниеЭлемента.Ширина;
		ЭлементШаблон.rectTop = ОписаниеЭлемента.Верх;
		ЭлементШаблон.rectBottom = ОписаниеЭлемента.Верх + ОписаниеЭлемента.Высота;
		
		ЭлементШаблон.Point[0].x = ЭлементШаблон.rectLeft + ОписаниеЭлемента.Ширина / 2;
		ЭлементШаблон.Point[0].y = ЭлементШаблон.rectTop;
		
		ЭлементШаблон.Point[1].x = ЭлементШаблон.rectRight - 1;
		ЭлементШаблон.Point[1].y = ЭлементШаблон.rectTop + Отступ;
		
		ЭлементШаблон.Point[2].x = ЭлементШаблон.rectRight - 1;
		ЭлементШаблон.Point[2].y = ЭлементШаблон.rectBottom - 1;
					
		ЭлементШаблон.Point[3].x = ЭлементШаблон.rectLeft;
		ЭлементШаблон.Point[3].y = ЭлементШаблон.rectBottom - 1;
		
		ЭлементШаблон.Point[4].x = ЭлементШаблон.rectLeft;
		ЭлементШаблон.Point[4].y = ЭлементШаблон.rectTop + Отступ;
		
	КонецЕсли;
	
	ЭлементШаблон.itemTabOrder = ЭлементШаблон.itemId;
	
	ПостроительСхемы.СхемаXDTO.item.Добавить(ЭлементШаблон);	
	
КонецПроцедуры

// Добавляет в построитель схемы элемент действие по описанию.
// 
// Параметры:
// 	ПостроительСхемы - Структура - см. ПостроительГрафическойСхемы
// 	ОписаниеЭлемента - Структура - см. ОписаниеЭлементаДействие
//
Процедура ДобавитьВПостроительСхемыЭлементДействие(ПостроительСхемы, ОписаниеЭлемента)
	
	ПроверитьОписаниеЭлементаПередДобавлениемВСхему(ПостроительСхемы, ОписаниеЭлемента);
	
	ПостроительСхемы.ИменаЭлементов[ОписаниеЭлемента.Имя] = Истина;
	
	СхемаСШаблоном = СериализаторXDTO.ЗаписатьXDTO(ПолучитьМакет("ШаблонЭлементаДействие"));
	
	ЭлементыШаблоны = Новый Массив;
	Для Каждого ЭлементШаблон Из СхемаСШаблоном.item Цикл
		ЭлементыШаблоны.Добавить(ЭлементШаблон);
	КонецЦикла;
	СхемаСШаблоном = Неопределено;
		
	Для Каждого ЭлементШаблон Из ЭлементыШаблоны Цикл
				
		Если ЭлементШаблон.itemType = 9 Тогда
			
			ЭлементШаблон.itemCode = ОписаниеЭлемента.Имя;
			
			ЭлементШаблон.itemId = ИдентификаторЭлементаВПостроителеСхемы(
				ПостроительСхемы, ОписаниеЭлемента.Имя);
						
			Для Каждого ЭлементЗаголовка Из ЭлементШаблон.itemTitle.item Цикл
				ЭлементЗаголовка.content = ОписаниеЭлемента.Наименование;
			КонецЦикла;
			
			ЭлементШаблон.rectLeft = ОписаниеЭлемента.Лево;
			ЭлементШаблон.rectRight = ОписаниеЭлемента.Лево + ОписаниеЭлемента.Ширина;
			ЭлементШаблон.rectTop = ОписаниеЭлемента.Верх;
			ЭлементШаблон.rectBottom = ОписаниеЭлемента.Верх + ОписаниеЭлемента.Высота;
			
			ЭлементШаблон.Point[0].x = ЭлементШаблон.rectLeft;
			ЭлементШаблон.Point[0].y = ЭлементШаблон.rectTop;
			
			ЭлементШаблон.Point[1].x = ЭлементШаблон.rectRight - 1;
			ЭлементШаблон.Point[1].y = ЭлементШаблон.rectTop;
			
			ЭлементШаблон.Point[2].x = ЭлементШаблон.rectRight - 1;
			ЭлементШаблон.Point[2].y = ЭлементШаблон.rectBottom - 1;
						
			ЭлементШаблон.Point[3].x = ЭлементШаблон.rectLeft;
			ЭлементШаблон.Point[3].y = ЭлементШаблон.rectBottom - 1;
			
		ИначеЕсли ЭлементШаблон.itemType = 1 Тогда
			
			ЭлементШаблон.itemCode = ИмяНовойСоединительнойЛинииВПостроителеСхемы(ПостроительСхемы); 
					
			ЭлементШаблон.itemId = ИдентификаторЭлементаВПостроителеСхемы(
				ПостроительСхемы, ЭлементШаблон.itemCode);
				
			ЭлементШаблон.connectFromItemId = ИдентификаторЭлементаВПостроителеСхемы(
				ПостроительСхемы, ОписаниеЭлемента.Имя);
			
			ЭлементШаблон.portIndexFrom = 4;
			
			ЭлементШаблон.Point[0].x = ОписаниеЭлемента.Лево + Цел(ОписаниеЭлемента.Ширина/2);
			ЭлементШаблон.Point[0].y = ОписаниеЭлемента.Верх + ОписаниеЭлемента.Высота;
					
			Если Не ЗначениеЗаполнено(ОписаниеЭлемента.ИмяПоследователя) Тогда
				ЭлементШаблон.connectToItemId = -1;
				ЭлементШаблон.portIndexTo = -1;
				
				ДлинаЛинии = 30;
				ЭлементШаблон.Point[1].x = ЭлементШаблон.Point[0].x;
				ЭлементШаблон.Point[1].y = ЭлементШаблон.Point[0].y + ДлинаЛинии;
				
			Иначе
				ЭлементШаблон.connectToItemId = ИдентификаторЭлементаВПостроителеСхемы(
					ПостроительСхемы, ОписаниеЭлемента.ИмяПоследователя);
					
				ЭлементШаблон.portIndexTo = 2;	
				
				Координаты = КоординатыВерхнейТочкиСоединенияСЭлементом(
					ПостроительСхемы, ОписаниеЭлемента.ИмяПоследователя);
				
				Смещение = ЭлементШаблон.Point[0].y - Координаты.y;
				Смещение = Макс(Смещение, -1 * Смещение);
				
				ОтступОтЭлемента = 20;
				
				Если Смещение <= ОтступОтЭлемента Тогда
					ЭлементШаблон.Point[1].x = Координаты.x;
					ЭлементШаблон.Point[1].y = Координаты.y;
				Иначе
					ЭлементШаблон.Point[1].x = ЭлементШаблон.Point[0].x;
					ЭлементШаблон.Point[1].y = ЭлементШаблон.Point[0].y + ОтступОтЭлемента;
					
					ЭлементШаблон.Point.Добавить(ТочкаXDTO(Координаты.x, Координаты.y));
				КонецЕсли;
				
			КонецЕсли;			
								
		КонецЕсли;
		
		ЭлементШаблон.itemTabOrder = ЭлементШаблон.itemId;
		
		ПостроительСхемы.СхемаXDTO.item.Добавить(ЭлементШаблон);
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в построитель схемы элемент "вложенный процесс" по описанию.
// 
// Параметры:
// 	ПостроительСхемы - Структура - см. ПостроительГрафическойСхемы
// 	ОписаниеЭлемента - Структура - см. ОписаниеЭлементаВложенныйПроцесс
//
Процедура ДобавитьВПостроительСхемыЭлементВложенныйПроцесс(ПостроительСхемы, ОписаниеЭлемента)
	
	ПроверитьОписаниеЭлементаПередДобавлениемВСхему(ПостроительСхемы, ОписаниеЭлемента);
	
	ПостроительСхемы.ИменаЭлементов[ОписаниеЭлемента.Имя] = Истина;
	
	СхемаСШаблоном = СериализаторXDTO.ЗаписатьXDTO(ПолучитьМакет("ШаблонЭлементаВложенныйПроцесс"));
	
	ЭлементыШаблоны = Новый Массив;
	Для Каждого ЭлементШаблон Из СхемаСШаблоном.item Цикл
		ЭлементыШаблоны.Добавить(ЭлементШаблон);
	КонецЦикла;
	СхемаСШаблоном = Неопределено;
		
	Для Каждого ЭлементШаблон Из ЭлементыШаблоны Цикл
				
		Если ЭлементШаблон.itemType = 9 Тогда
			
			ЭлементШаблон.itemCode = ОписаниеЭлемента.Имя;
			
			ЭлементШаблон.itemId = ИдентификаторЭлементаВПостроителеСхемы(
				ПостроительСхемы, ОписаниеЭлемента.Имя);
						
			Для Каждого ЭлементЗаголовка Из ЭлементШаблон.itemTitle.item Цикл
				ЭлементЗаголовка.content = ОписаниеЭлемента.Наименование;
			КонецЦикла;
			
			ЭлементШаблон.rectLeft = ОписаниеЭлемента.Лево;
			ЭлементШаблон.rectRight = ОписаниеЭлемента.Лево + ОписаниеЭлемента.Ширина;
			ЭлементШаблон.rectTop = ОписаниеЭлемента.Верх;
			ЭлементШаблон.rectBottom = ОписаниеЭлемента.Верх + ОписаниеЭлемента.Высота;
			
			ЭлементШаблон.Point[0].x = ЭлементШаблон.rectLeft;
			ЭлементШаблон.Point[0].y = ЭлементШаблон.rectTop;
			
			ЭлементШаблон.Point[1].x = ЭлементШаблон.rectRight - 1;
			ЭлементШаблон.Point[1].y = ЭлементШаблон.rectTop;
			
			ЭлементШаблон.Point[2].x = ЭлементШаблон.rectRight - 1;
			ЭлементШаблон.Point[2].y = ЭлементШаблон.rectBottom - 1;
						
			ЭлементШаблон.Point[3].x = ЭлементШаблон.rectLeft;
			ЭлементШаблон.Point[3].y = ЭлементШаблон.rectBottom - 1;
			
		ИначеЕсли ЭлементШаблон.itemType = 1 Тогда
			
			ЭлементШаблон.itemCode = ИмяНовойСоединительнойЛинииВПостроителеСхемы(ПостроительСхемы); 
					
			ЭлементШаблон.itemId = ИдентификаторЭлементаВПостроителеСхемы(
				ПостроительСхемы, ЭлементШаблон.itemCode);
				
			ЭлементШаблон.connectFromItemId = ИдентификаторЭлементаВПостроителеСхемы(
				ПостроительСхемы, ОписаниеЭлемента.Имя);
			
			ЭлементШаблон.portIndexFrom = 4;
			
			ЭлементШаблон.Point[0].x = ОписаниеЭлемента.Лево + Цел(ОписаниеЭлемента.Ширина/2);
			ЭлементШаблон.Point[0].y = ОписаниеЭлемента.Верх + ОписаниеЭлемента.Высота;
					
			Если Не ЗначениеЗаполнено(ОписаниеЭлемента.ИмяПоследователя) Тогда
				ЭлементШаблон.connectToItemId = -1;
				ЭлементШаблон.portIndexTo = -1;
				
				ДлинаЛинии = 30;
				ЭлементШаблон.Point[1].x = ЭлементШаблон.Point[0].x;
				ЭлементШаблон.Point[1].y = ЭлементШаблон.Point[0].y + ДлинаЛинии;
				
			Иначе
				ЭлементШаблон.connectToItemId = ИдентификаторЭлементаВПостроителеСхемы(
					ПостроительСхемы, ОписаниеЭлемента.ИмяПоследователя);
					
				ЭлементШаблон.portIndexTo = 2;	
				
				Координаты = КоординатыВерхнейТочкиСоединенияСЭлементом(
					ПостроительСхемы, ОписаниеЭлемента.ИмяПоследователя);
				
				Смещение = ЭлементШаблон.Point[0].y - Координаты.y;
				Смещение = Макс(Смещение, -1 * Смещение);
				
				ОтступОтЭлемента = 20;
				
				Если Смещение <= ОтступОтЭлемента Тогда
					ЭлементШаблон.Point[1].x = Координаты.x;
					ЭлементШаблон.Point[1].y = Координаты.y;
				Иначе
					ЭлементШаблон.Point[1].x = ЭлементШаблон.Point[0].x;
					ЭлементШаблон.Point[1].y = ЭлементШаблон.Point[0].y + ОтступОтЭлемента;
					
					ЭлементШаблон.Point.Добавить(ТочкаXDTO(Координаты.x, Координаты.y));
				КонецЕсли;
				
			КонецЕсли;			
								
		КонецЕсли;
		
		ЭлементШаблон.itemTabOrder = ЭлементШаблон.itemId;
		
		ПостроительСхемы.СхемаXDTO.item.Добавить(ЭлементШаблон);
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в построитель схемы элемент скрипт по описанию.
// 
// Параметры:
// 	ПостроительСхемы - Структура - см. ПостроительГрафическойСхемы
// 	ОписаниеЭлемента - Структура - см. ОписаниеЭлементаСкрипт
//
Процедура ДобавитьВПостроительСхемыЭлементСкрипт(ПостроительСхемы, ОписаниеЭлемента)
	
	ПроверитьОписаниеЭлементаПередДобавлениемВСхему(ПостроительСхемы, ОписаниеЭлемента);
	
	ПостроительСхемы.ИменаЭлементов[ОписаниеЭлемента.Имя] = Истина;
	
	СхемаСШаблоном = СериализаторXDTO.ЗаписатьXDTO(ПолучитьМакет("ШаблонЭлементаСкрипт"));
	
	ЭлементыШаблоны = Новый Массив;
	Для Каждого ЭлементШаблон Из СхемаСШаблоном.item Цикл
		ЭлементыШаблоны.Добавить(ЭлементШаблон);
	КонецЦикла;
	СхемаСШаблоном = Неопределено;
		
	Для Каждого ЭлементШаблон Из ЭлементыШаблоны Цикл
				
		Если ЭлементШаблон.itemType = 9 Тогда
			
			ЭлементШаблон.itemCode = ОписаниеЭлемента.Имя;
			
			ЭлементШаблон.itemId = ИдентификаторЭлементаВПостроителеСхемы(
				ПостроительСхемы, ОписаниеЭлемента.Имя);
						
			Для Каждого ЭлементЗаголовка Из ЭлементШаблон.itemTitle.item Цикл
				ЭлементЗаголовка.content = ОписаниеЭлемента.Наименование;
			КонецЦикла;
			
			ЭлементШаблон.rectLeft = ОписаниеЭлемента.Лево;
			ЭлементШаблон.rectRight = ОписаниеЭлемента.Лево + ОписаниеЭлемента.Ширина;
			ЭлементШаблон.rectTop = ОписаниеЭлемента.Верх;
			ЭлементШаблон.rectBottom = ОписаниеЭлемента.Верх + ОписаниеЭлемента.Высота;
			
			ЭлементШаблон.Point[0].x = ЭлементШаблон.rectLeft;
			ЭлементШаблон.Point[0].y = ЭлементШаблон.rectTop;
			
			ЭлементШаблон.Point[1].x = ЭлементШаблон.rectRight - 1;
			ЭлементШаблон.Point[1].y = ЭлементШаблон.rectTop;
			
			ЭлементШаблон.Point[2].x = ЭлементШаблон.rectRight - 1;
			ЭлементШаблон.Point[2].y = ЭлементШаблон.rectBottom - 1;
						
			ЭлементШаблон.Point[3].x = ЭлементШаблон.rectLeft;
			ЭлементШаблон.Point[3].y = ЭлементШаблон.rectBottom - 1;
			
		ИначеЕсли ЭлементШаблон.itemType = 1 Тогда
			
			ЭлементШаблон.itemCode = ИмяНовойСоединительнойЛинииВПостроителеСхемы(ПостроительСхемы); 
					
			ЭлементШаблон.itemId = ИдентификаторЭлементаВПостроителеСхемы(
				ПостроительСхемы, ЭлементШаблон.itemCode);
				
			ЭлементШаблон.connectFromItemId = ИдентификаторЭлементаВПостроителеСхемы(
				ПостроительСхемы, ОписаниеЭлемента.Имя);
			
			ЭлементШаблон.portIndexFrom = 4;
			
			ЭлементШаблон.Point[0].x = ОписаниеЭлемента.Лево + Цел(ОписаниеЭлемента.Ширина/2);
			ЭлементШаблон.Point[0].y = ОписаниеЭлемента.Верх + ОписаниеЭлемента.Высота;
					
			Если Не ЗначениеЗаполнено(ОписаниеЭлемента.ИмяПоследователя) Тогда
				ЭлементШаблон.connectToItemId = -1;
				ЭлементШаблон.portIndexTo = -1;
				
				ДлинаЛинии = 30;
				ЭлементШаблон.Point[1].x = ЭлементШаблон.Point[0].x;
				ЭлементШаблон.Point[1].y = ЭлементШаблон.Point[0].y + ДлинаЛинии;
				
			Иначе
				ЭлементШаблон.connectToItemId = ИдентификаторЭлементаВПостроителеСхемы(
					ПостроительСхемы, ОписаниеЭлемента.ИмяПоследователя);
					
				ЭлементШаблон.portIndexTo = 2;	
				
				Координаты = КоординатыВерхнейТочкиСоединенияСЭлементом(
					ПостроительСхемы, ОписаниеЭлемента.ИмяПоследователя);
				
				Смещение = ЭлементШаблон.Point[0].y - Координаты.y;
				Смещение = Макс(Смещение, -1 * Смещение);
				
				ОтступОтЭлемента = 20;
				
				Если Смещение <= ОтступОтЭлемента Тогда
					ЭлементШаблон.Point[1].x = Координаты.x;
					ЭлементШаблон.Point[1].y = Координаты.y;
				Иначе
					ЭлементШаблон.Point[1].x = ЭлементШаблон.Point[0].x;
					ЭлементШаблон.Point[1].y = ЭлементШаблон.Point[0].y + ОтступОтЭлемента;
					
					ЭлементШаблон.Point.Добавить(ТочкаXDTO(Координаты.x, Координаты.y));
				КонецЕсли;
				
			КонецЕсли;			
								
		КонецЕсли;
		
		ЭлементШаблон.itemTabOrder = ЭлементШаблон.itemId;
		
		ПостроительСхемы.СхемаXDTO.item.Добавить(ЭлементШаблон);
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в построитель схемы элемент условие по описанию.
// 
// Параметры:
// 	ПостроительСхемы - Структура - см. ПостроительГрафическойСхемы
// 	ОписаниеЭлемента - Структура - см. ОписаниеЭлементаУсловие
//
Процедура ДобавитьВПостроительСхемыЭлементУсловие(ПостроительСхемы, ОписаниеЭлемента)
	
	ПроверитьОписаниеЭлементаПередДобавлениемВСхему(ПостроительСхемы, ОписаниеЭлемента);
	
	ПостроительСхемы.ИменаЭлементов[ОписаниеЭлемента.Имя] = Истина;
	
	СхемаСШаблоном = СериализаторXDTO.ЗаписатьXDTO(ПолучитьМакет("ШаблонЭлементаУсловие"));
	
	ЭлементыШаблоны = Новый Массив;
	Для Каждого ЭлементШаблон Из СхемаСШаблоном.item Цикл
		ЭлементыШаблоны.Добавить(ЭлементШаблон);
	КонецЦикла;
	СхемаСШаблоном = Неопределено;
	
	Pi = 3.1415926535897932;
	Tan60 = Tan(60*Pi/180);
	Отступ = Цел((ОписаниеЭлемента.Высота/2)/Tan60);
	Если Отступ >= ОписаниеЭлемента.Ширина/2 Тогда
		Отступ = ОписаниеЭлемента.Ширина/2 - 1;
	КонецЕсли;
	
	Для Каждого ЭлементШаблон Из ЭлементыШаблоны Цикл
				
		Если ЭлементШаблон.itemType = 4 Тогда
			
			ЭлементШаблон.itemCode = ОписаниеЭлемента.Имя;
			
			ЭлементШаблон.itemId = ИдентификаторЭлементаВПостроителеСхемы(
				ПостроительСхемы, ОписаниеЭлемента.Имя);
						
			Для Каждого ЭлементЗаголовка Из ЭлементШаблон.itemTitle.item Цикл
				ЭлементЗаголовка.content = ОписаниеЭлемента.Наименование;
			КонецЦикла;
			
			ЭлементШаблон.rectLeft = ОписаниеЭлемента.Лево;
			ЭлементШаблон.rectRight = ОписаниеЭлемента.Лево + ОписаниеЭлемента.Ширина;
			ЭлементШаблон.rectTop = ОписаниеЭлемента.Верх;
			ЭлементШаблон.rectBottom = ОписаниеЭлемента.Верх + ОписаниеЭлемента.Высота;
			
			ЭлементШаблон.Point[0].x = ЭлементШаблон.rectLeft;
			ЭлементШаблон.Point[0].y = ЭлементШаблон.rectTop + ОписаниеЭлемента.Высота/2;
			
			ЭлементШаблон.Point[1].x = ЭлементШаблон.rectLeft + Отступ;
			ЭлементШаблон.Point[1].y = ЭлементШаблон.rectTop;
			
			ЭлементШаблон.Point[2].x = ЭлементШаблон.rectRight - Отступ;
			ЭлементШаблон.Point[2].y = ЭлементШаблон.rectTop;
						
			ЭлементШаблон.Point[3].x = ЭлементШаблон.rectRight;
			ЭлементШаблон.Point[3].y = ЭлементШаблон.rectTop + ОписаниеЭлемента.Высота/2;
			
			ЭлементШаблон.Point[4].x = ЭлементШаблон.rectRight - Отступ;
			ЭлементШаблон.Point[4].y = ЭлементШаблон.rectBottom - 1;
			
			ЭлементШаблон.Point[5].x = ЭлементШаблон.rectLeft + Отступ;
			ЭлементШаблон.Point[5].y = ЭлементШаблон.rectBottom - 1;
			
		ИначеЕсли ЭлементШаблон.itemType = 1 Тогда
			
			ЭлементШаблон.itemCode = ИмяНовойСоединительнойЛинииВПостроителеСхемы(ПостроительСхемы); 
					
			ЭлементШаблон.itemId = ИдентификаторЭлементаВПостроителеСхемы(
				ПостроительСхемы, ЭлементШаблон.itemCode);
				
			ЭлементШаблон.connectFromItemId = ИдентификаторЭлементаВПостроителеСхемы(
				ПостроительСхемы, ОписаниеЭлемента.Имя);
			
			ДлинаЛинии = 30;
			
			Если ЭлементШаблон.connectFromPortIndex = 0 Тогда // линия Нет.
				ЭлементШаблон.portIndexFrom = ОписаниеЭлемента.СторонаВеткиНет;
				ИмяПоследователя = ОписаниеЭлемента.ИмяПоследователяНет;
			ИначеЕсли ЭлементШаблон.connectFromPortIndex = 1 Тогда // линия Да.
				ЭлементШаблон.portIndexFrom = ОписаниеЭлемента.СторонаВеткиДа;
				ИмяПоследователя = ОписаниеЭлемента.ИмяПоследователяДа;
			КонецЕсли;
			
			Если ЭлементШаблон.portIndexFrom = 1 Тогда
				ЭлементШаблон.Point[0].x = ОписаниеЭлемента.Лево;
			ИначеЕсли ЭлементШаблон.portIndexFrom = 2 Или ЭлементШаблон.portIndexFrom = 4 Тогда
				ЭлементШаблон.Point[0].x = ОписаниеЭлемента.Лево + Цел(ОписаниеЭлемента.Ширина/2);
			ИначеЕсли ЭлементШаблон.portIndexFrom = 3 Тогда
				ЭлементШаблон.Point[0].x = ОписаниеЭлемента.Лево + ОписаниеЭлемента.Ширина;
			КонецЕсли;
			
			Если ЭлементШаблон.portIndexFrom = 1 Или ЭлементШаблон.portIndexFrom = 3 Тогда
				ЭлементШаблон.Point[0].y = ОписаниеЭлемента.Верх + Цел(ОписаниеЭлемента.Высота/2);
			ИначеЕсли ЭлементШаблон.portIndexFrom = 2 Тогда
				ЭлементШаблон.Point[0].y = ОписаниеЭлемента.Верх;
			ИначеЕсли ЭлементШаблон.portIndexFrom = 4 Тогда
				ЭлементШаблон.Point[0].y = ОписаниеЭлемента.Верх + ОписаниеЭлемента.Высота;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ИмяПоследователя) Тогда
				
				ЭлементШаблон.connectToItemId = -1;
				ЭлементШаблон.portIndexTo = -1;
				
				Если ЭлементШаблон.portIndexFrom = 1 Тогда
					ЭлементШаблон.Point[1].y = ЭлементШаблон.Point[0].y;
					КоординатаX = ЭлементШаблон.Point[0].x - ДлинаЛинии;
					Если КоординатаX > 0 Тогда
						ЭлементШаблон.Point[1].x = КоординатаX;
					КонецЕсли;
				ИначеЕсли ЭлементШаблон.portIndexFrom = 2 Тогда
					ЭлементШаблон.Point[1].x = ЭлементШаблон.Point[0].x;
					КоординатаY = ЭлементШаблон.Point[0].y - ДлинаЛинии;
					Если КоординатаY > 0 Тогда
						ЭлементШаблон.Point[1].y = КоординатаY;
					КонецЕсли;
				ИначеЕсли ЭлементШаблон.portIndexFrom = 3 Тогда
					ЭлементШаблон.Point[1].y = ЭлементШаблон.Point[0].y;
					ЭлементШаблон.Point[1].x = ЭлементШаблон.Point[0].x + ДлинаЛинии;
				ИначеЕсли ЭлементШаблон.portIndexFrom = 4 Тогда
					ЭлементШаблон.Point[1].y = ЭлементШаблон.Point[0].y + ДлинаЛинии;
					ЭлементШаблон.Point[1].x = ЭлементШаблон.Point[0].x;
				КонецЕсли;
				
			Иначе
				
				ЭлементШаблон.connectToItemId = ИдентификаторЭлементаВПостроителеСхемы(
					ПостроительСхемы, ИмяПоследователя);
					
				ЭлементШаблон.portIndexTo = 2;
				
				Координаты = КоординатыВерхнейТочкиСоединенияСЭлементом(
					ПостроительСхемы, ИмяПоследователя);
				
				ЭлементШаблон.Point[1].x = Координаты.x;
				ЭлементШаблон.Point[1].y = Координаты.y;
				
			КонецЕсли;
				
		КонецЕсли;
		
		ЭлементШаблон.itemTabOrder = ЭлементШаблон.itemId;
		
		ПостроительСхемы.СхемаXDTO.item.Добавить(ЭлементШаблон);
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в построитель схемы элемент разделение по описанию.
// 
// Параметры:
// 	ПостроительСхемы - Структура - см. ПостроительГрафическойСхемы
// 	ОписаниеЭлемента - Структура - см. ОписаниеЭлементаРазделение
//
Процедура ДобавитьВПостроительСхемыЭлементРазделение(ПостроительСхемы, ОписаниеЭлемента)
	
	ПроверитьОписаниеЭлементаПередДобавлениемВСхему(ПостроительСхемы, ОписаниеЭлемента);
	
	ПостроительСхемы.ИменаЭлементов[ОписаниеЭлемента.Имя] = Истина;
	
	СхемаСШаблоном = СериализаторXDTO.ЗаписатьXDTO(ПолучитьМакет("ШаблонЭлементаРазделение"));
	
	КоличествоПутейМакс = 0;
	
	ЭлементыШаблоны = Новый Массив;
	Для Каждого ЭлементШаблон Из СхемаСШаблоном.item Цикл
		ЭлементыШаблоны.Добавить(ЭлементШаблон);
		
		Если ЭлементШаблон.itemType = 1 Тогда
			КоличествоПутейМакс = КоличествоПутейМакс + 1; 
		КонецЕсли;
	КонецЦикла;
	СхемаСШаблоном = Неопределено;
	
	ИменаПоследователей = Новый Массив();
	Если ОписаниеЭлемента.ИменаПоследователей.Количество() = 0 Тогда
		ИменаПоследователей.Добавить("");
	Иначе
		ИменаПоследователей = ОписаниеЭлемента.ИменаПоследователей;
	КонецЕсли;
	КоличествоПоследователей = ИменаПоследователей.Количество();
	
	Если КоличествоПоследователей > КоличествоПутейМакс Тогда
		
		ШаблонТекста = 
			НСтр("ru = 'При программном формировании разделения превышено максимальное число путей.
			|Максимальное число путей: %1'");
			
		ВызватьИсключение СтрШаблон(ШаблонТекста, КоличествоПутейМакс);
	КонецЕсли;
	
	ИндексИмени = 0;
		
	Для Каждого ЭлементШаблон Из ЭлементыШаблоны Цикл
				
		Если ЭлементШаблон.itemType = 7 Тогда
			
			ЭлементШаблон.itemCode = ОписаниеЭлемента.Имя;
			
			ЭлементШаблон.itemId = ИдентификаторЭлементаВПостроителеСхемы(
				ПостроительСхемы, ОписаниеЭлемента.Имя);
						
			Для Каждого ЭлементЗаголовка Из ЭлементШаблон.itemTitle.item Цикл
				ЭлементЗаголовка.content = ОписаниеЭлемента.Наименование;
			КонецЦикла;
			
			ЭлементШаблон.rectLeft = ОписаниеЭлемента.Лево;
			ЭлементШаблон.rectRight = ОписаниеЭлемента.Лево + ОписаниеЭлемента.Ширина;
			ЭлементШаблон.rectTop = ОписаниеЭлемента.Верх;
			ЭлементШаблон.rectBottom = ОписаниеЭлемента.Верх + ОписаниеЭлемента.Высота;
			
			ЭлементШаблон.Point[0].x = ЭлементШаблон.rectLeft;
			ЭлементШаблон.Point[0].y = ЭлементШаблон.rectTop;
			
			ЭлементШаблон.Point[1].x = ЭлементШаблон.rectRight - 1;
			ЭлементШаблон.Point[1].y = ЭлементШаблон.rectTop;
			
			ЭлементШаблон.Point[2].x = ЭлементШаблон.rectLeft + ОписаниеЭлемента.Ширина / 2;
			ЭлементШаблон.Point[2].y = ЭлементШаблон.rectBottom;
			
		ИначеЕсли ЭлементШаблон.itemType = 1 Тогда
			
			Если ИндексИмени = КоличествоПоследователей Тогда
				Прервать;
			КонецЕсли;
			
			ЭлементШаблон.itemCode = ИмяНовойСоединительнойЛинииВПостроителеСхемы(ПостроительСхемы); 
					
			ЭлементШаблон.itemId = ИдентификаторЭлементаВПостроителеСхемы(
				ПостроительСхемы, ЭлементШаблон.itemCode);
				
			ЭлементШаблон.connectFromItemId = ИдентификаторЭлементаВПостроителеСхемы(
				ПостроительСхемы, ОписаниеЭлемента.Имя);
			
			ЭлементШаблон.portIndexFrom = 4;
			
			ЭлементШаблон.Point[0].x = ОписаниеЭлемента.Лево + Цел(ОписаниеЭлемента.Ширина/2);
			ЭлементШаблон.Point[0].y = ОписаниеЭлемента.Верх + ОписаниеЭлемента.Высота;
			
			ИмяПоследователя = ИменаПоследователей[ИндексИмени];
			ИндексИмени = ИндексИмени + 1;
			
			Если Не ЗначениеЗаполнено(ИмяПоследователя) Тогда
				ЭлементШаблон.connectToItemId = -1;
				ЭлементШаблон.portIndexTo = -1;
				
				ДлинаЛинии = 30;
				ЭлементШаблон.Point[1].x = ЭлементШаблон.Point[0].x;
				ЭлементШаблон.Point[1].y = ЭлементШаблон.Point[0].y + ДлинаЛинии;
				
			Иначе
				ЭлементШаблон.connectToItemId = ИдентификаторЭлементаВПостроителеСхемы(
					ПостроительСхемы, ИмяПоследователя);
					
				ЭлементШаблон.portIndexTo = 2;	
				
				Координаты = КоординатыВерхнейТочкиСоединенияСЭлементом(
					ПостроительСхемы, ИмяПоследователя);
				
				Смещение = ЭлементШаблон.Point[0].y - Координаты.y;
				Смещение = Макс(Смещение, -1 * Смещение);
				
				ОтступОтЭлемента = 20;
				
				Если Смещение <= ОтступОтЭлемента Тогда
					ЭлементШаблон.Point[1].x = Координаты.x;
					ЭлементШаблон.Point[1].y = Координаты.y;
				Иначе
					ЭлементШаблон.Point[1].x = ЭлементШаблон.Point[0].x;
					ЭлементШаблон.Point[1].y = ЭлементШаблон.Point[0].y + ОтступОтЭлемента;
					
					ЭлементШаблон.Point.Добавить(ТочкаXDTO(Координаты.x, Координаты.y));
				КонецЕсли;
				
			КонецЕсли;
					
		КонецЕсли;
		
		ЭлементШаблон.itemTabOrder = ЭлементШаблон.itemId;
		
		ПостроительСхемы.СхемаXDTO.item.Добавить(ЭлементШаблон);
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в построитель схемы элемент слияние по описанию.
// 
// Параметры:
// 	ПостроительСхемы - Структура - см. ПостроительГрафическойСхемы
// 	ОписаниеЭлемента - Структура - см. ОписаниеЭлементаСлияние
//
Процедура ДобавитьВПостроительСхемыЭлементСлияние(ПостроительСхемы, ОписаниеЭлемента)
	
	ПроверитьОписаниеЭлементаПередДобавлениемВСхему(ПостроительСхемы, ОписаниеЭлемента);
	
	ПостроительСхемы.ИменаЭлементов[ОписаниеЭлемента.Имя] = Истина;
	
	СхемаСШаблоном = СериализаторXDTO.ЗаписатьXDTO(ПолучитьМакет("ШаблонЭлементаСлияние"));
	
	ЭлементыШаблоны = Новый Массив;
	Для Каждого ЭлементШаблон Из СхемаСШаблоном.item Цикл
		ЭлементыШаблоны.Добавить(ЭлементШаблон);
	КонецЦикла;
	СхемаСШаблоном = Неопределено;
		
	Для Каждого ЭлементШаблон Из ЭлементыШаблоны Цикл
				
		Если ЭлементШаблон.itemType = 8 Тогда
			
			ЭлементШаблон.itemCode = ОписаниеЭлемента.Имя;
			
			ЭлементШаблон.itemId = ИдентификаторЭлементаВПостроителеСхемы(
				ПостроительСхемы, ОписаниеЭлемента.Имя);
						
			Для Каждого ЭлементЗаголовка Из ЭлементШаблон.itemTitle.item Цикл
				ЭлементЗаголовка.content = ОписаниеЭлемента.Наименование;
			КонецЦикла;
			
			ЭлементШаблон.rectLeft = ОписаниеЭлемента.Лево;
			ЭлементШаблон.rectRight = ОписаниеЭлемента.Лево + ОписаниеЭлемента.Ширина;
			ЭлементШаблон.rectTop = ОписаниеЭлемента.Верх;
			ЭлементШаблон.rectBottom = ОписаниеЭлемента.Верх + ОписаниеЭлемента.Высота;
			
			ЭлементШаблон.Point[0].x = ЭлементШаблон.rectLeft;
			ЭлементШаблон.Point[0].y = ЭлементШаблон.rectBottom;
			
			ЭлементШаблон.Point[1].x = ЭлементШаблон.rectRight - 1;
			ЭлементШаблон.Point[1].y = ЭлементШаблон.rectBottom;
			
			ЭлементШаблон.Point[2].x = ЭлементШаблон.rectLeft + ОписаниеЭлемента.Ширина / 2;
			ЭлементШаблон.Point[2].y = ЭлементШаблон.rectTop;
			
		ИначеЕсли ЭлементШаблон.itemType = 1 Тогда
			
			ЭлементШаблон.itemCode = ИмяНовойСоединительнойЛинииВПостроителеСхемы(ПостроительСхемы); 
					
			ЭлементШаблон.itemId = ИдентификаторЭлементаВПостроителеСхемы(
				ПостроительСхемы, ЭлементШаблон.itemCode);
				
			ЭлементШаблон.connectFromItemId = ИдентификаторЭлементаВПостроителеСхемы(
				ПостроительСхемы, ОписаниеЭлемента.Имя);
			
			ЭлементШаблон.portIndexFrom = 4;
			
			ЭлементШаблон.Point[0].x = ОписаниеЭлемента.Лево + Цел(ОписаниеЭлемента.Ширина/2);
			ЭлементШаблон.Point[0].y = ОписаниеЭлемента.Верх + ОписаниеЭлемента.Высота;
					
			Если Не ЗначениеЗаполнено(ОписаниеЭлемента.ИмяПоследователя) Тогда
				ЭлементШаблон.connectToItemId = -1;
				ЭлементШаблон.portIndexTo = -1;
				
				ДлинаЛинии = 30;
				ЭлементШаблон.Point[1].x = ЭлементШаблон.Point[0].x;
				ЭлементШаблон.Point[1].y = ЭлементШаблон.Point[0].y + ДлинаЛинии;
				
			Иначе
				ЭлементШаблон.connectToItemId = ИдентификаторЭлементаВПостроителеСхемы(
					ПостроительСхемы, ОписаниеЭлемента.ИмяПоследователя);
					
				ЭлементШаблон.portIndexTo = 2;	
				
				Координаты = КоординатыВерхнейТочкиСоединенияСЭлементом(
					ПостроительСхемы, ОписаниеЭлемента.ИмяПоследователя);
				
				Смещение = ЭлементШаблон.Point[0].y - Координаты.y;
				Смещение = Макс(Смещение, -1 * Смещение);
				
				ОтступОтЭлемента = 20;
				
				Если Смещение <= ОтступОтЭлемента Тогда
					ЭлементШаблон.Point[1].x = Координаты.x;
					ЭлементШаблон.Point[1].y = Координаты.y;
				Иначе
					ЭлементШаблон.Point[1].x = ЭлементШаблон.Point[0].x;
					ЭлементШаблон.Point[1].y = ЭлементШаблон.Point[0].y + ОтступОтЭлемента;
					
					ЭлементШаблон.Point.Добавить(ТочкаXDTO(Координаты.x, Координаты.y));
				КонецЕсли;
				
			КонецЕсли;			
								
		КонецЕсли;
		
		ЭлементШаблон.itemTabOrder = ЭлементШаблон.itemId;
		
		ПостроительСхемы.СхемаXDTO.item.Добавить(ЭлементШаблон);
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в построитель схемы элемент декорация по описанию.
// 
// Параметры:
// 	ПостроительСхемы - Структура - см. ПостроительГрафическойСхемы
// 	ОписаниеЭлемента - Структура - см. ОписаниеЭлементаДекорация
//
Процедура ДобавитьВПостроительСхемыЭлементДекорация(ПостроительСхемы, ОписаниеЭлемента)
	
	ПроверитьОписаниеЭлементаПередДобавлениемВСхему(ПостроительСхемы, ОписаниеЭлемента);
	
	ПостроительСхемы.ИменаЭлементов[ОписаниеЭлемента.Имя] = Истина;
	
	СхемаСШаблоном = СериализаторXDTO.ЗаписатьXDTO(ПолучитьМакет("ШаблонЭлементаДекорация"));
	ЭлементШаблон = СхемаСШаблоном.item[0];
	СхемаСШаблоном = Неопределено;
	
	ЭлементШаблон.itemCode = ОписаниеЭлемента.Имя;
	
	ЭлементШаблон.itemId = ИдентификаторЭлементаВПостроителеСхемы(
		ПостроительСхемы, ОписаниеЭлемента.Имя);
	
	Для Каждого ЭлементЗаголовка Из ЭлементШаблон.itemTitle.item Цикл
		ЭлементЗаголовка.content = ОписаниеЭлемента.Наименование;
	КонецЦикла;
	
	Для Каждого ЭлементЗаголовка Из ЭлементШаблон.tipText.item Цикл
		ЭлементЗаголовка.content = ОписаниеЭлемента.Подсказка;
	КонецЦикла;
	
	ЭлементШаблон.alignHor = ОписаниеЭлемента.ГоризонтальноеПоложениеТекста;
	ЭлементШаблон.alignVer = ОписаниеЭлемента.ВертикальноеПоложениеТекста;
	
	ЭлементШаблон.backColor = ОписаниеЭлемента.ЦветФона;
	ЭлементШаблон.lineColor = ОписаниеЭлемента.ЦветРамки;
	ЭлементШаблон.textColor = ОписаниеЭлемента.ЦветТекста;
	ЭлементШаблон.textfont = СериализаторXDTO.ЗаписатьXDTO(ОписаниеЭлемента.Шрифт);
	
	ЭлементШаблон.picture =  СериализаторXDTO.ЗаписатьXDTO(ОписаниеЭлемента.Картинка);
	ЭлементШаблон.picturePlacement = ОписаниеЭлемента.ПоложениеКартинки;
	
	// ОписаниеЭлемента.РазмерКартинки
	Если ОписаниеЭлемента.РазмерКартинки = РазмерКартинки.РеальныйРазмер Тогда
		ЭлементШаблон.pictureStyle = 0;
	ИначеЕсли ОписаниеЭлемента.РазмерКартинки = РазмерКартинки.Растянуть Тогда
		ЭлементШаблон.pictureStyle = 1;
	ИначеЕсли ОписаниеЭлемента.РазмерКартинки = РазмерКартинки.Пропорционально Тогда
		ЭлементШаблон.pictureStyle = 2;
	ИначеЕсли ОписаниеЭлемента.РазмерКартинки = РазмерКартинки.Черепица Тогда
		ЭлементШаблон.pictureStyle = 3;
	ИначеЕсли ОписаниеЭлемента.РазмерКартинки = РазмерКартинки.АвтоРазмер Тогда
		ЭлементШаблон.pictureStyle = 4; 
	КонецЕсли;
	 		
	ЭлементШаблон.transparent = ОписаниеЭлемента.ПрозрачныйФон;		

	ЭлементШаблон.shape = ОписаниеЭлемента.Фигура;
			
	ЭлементШаблон.rectLeft = ОписаниеЭлемента.Лево;
	ЭлементШаблон.rectRight = ОписаниеЭлемента.Лево + ОписаниеЭлемента.Ширина;
	ЭлементШаблон.rectTop = ОписаниеЭлемента.Верх;
	ЭлементШаблон.rectBottom = ОписаниеЭлемента.Верх + ОписаниеЭлемента.Высота;
	
	ЭлементШаблон.itemTabOrder = ЭлементШаблон.itemId;
	
	ПостроительСхемы.СхемаXDTO.item.Добавить(ЭлементШаблон);
	
КонецПроцедуры

// Добавляет в построитель схемы элемент декоративная линия по описанию.
// 
// Параметры:
// 	ПостроительСхемы - Структура - см. ПостроительГрафическойСхемы
// 	ОписаниеЭлемента - Структура - см. ОписаниеЭлементаДекоративнаяЛиния
//
Процедура ДобавитьВПостроительСхемыЭлементДекоративнаяЛиния(ПостроительСхемы, ОписаниеЭлемента)
	
	ПроверитьОписаниеЭлементаПередДобавлениемВСхему(ПостроительСхемы, ОписаниеЭлемента);
	
	ПостроительСхемы.ИменаЭлементов[ОписаниеЭлемента.Имя] = Истина;
	
	СхемаСШаблоном = СериализаторXDTO.ЗаписатьXDTO(ПолучитьМакет("ШаблонЭлементаДекоративнаяЛиния"));
	ЭлементШаблон = СхемаСШаблоном.item[0];
	СхемаСШаблоном = Неопределено;
	
	ЭлементШаблон.itemCode = ОписаниеЭлемента.Имя;
	
	ЭлементШаблон.itemId = ИдентификаторЭлементаВПостроителеСхемы(
			ПостроительСхемы, ОписаниеЭлемента.Имя);
	
	Для Каждого ЭлементЗаголовка Из ЭлементШаблон.itemTitle.item Цикл
		ЭлементЗаголовка.content = ОписаниеЭлемента.Наименование;
	КонецЦикла;
	
	Для Каждого ЭлементЗаголовка Из ЭлементШаблон.tipText.item Цикл
		ЭлементЗаголовка.content = ОписаниеЭлемента.Подсказка;
	КонецЦикла;
	
	ЭлементШаблон.point.Очистить();
	Для Каждого ТочкаЛинии Из ОписаниеЭлемента.Точки Цикл
		ЭлементШаблон.point.Добавить(ТочкаXDTO(ТочкаЛинии.x, ТочкаЛинии.y));			
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОписаниеЭлемента.ИмяПредшественника) Тогда
		ЭлементШаблон.connectFromItemId = ИдентификаторЭлементаВПостроителеСхемы(
			ПостроительСхемы, ОписаниеЭлемента.ИмяПредшественника);
		ЭлементШаблон.portIndexFrom = ОписаниеЭлемента.СторонаПредшественника;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеЭлемента.ИмяПоследователя) Тогда
		ЭлементШаблон.connectToItemId = ИдентификаторЭлементаВПостроителеСхемы(
			ПостроительСхемы, ОписаниеЭлемента.ИмяПоследователя);
		ЭлементШаблон.portIndexTo = ОписаниеЭлемента.СторонаПоследователя;
	КонецЕсли;
	
	ЭлементШаблон.textPos = ОписаниеЭлемента.ПоложениеТекста;
	
	ЭлементШаблон.textColor = ОписаниеЭлемента.ЦветТекста;
	ЭлементШаблон.lineColor = ОписаниеЭлемента.ЦветЛинии;
	
	ЭлементШаблон.textfont = СериализаторXDTO.ЗаписатьXDTO(ОписаниеЭлемента.Шрифт);
	
	ЭлементШаблон.Border = СериализаторXDTO.ЗаписатьXDTO(ОписаниеЭлемента.Линия);
	
	ЭлементШаблон.beginArrowStyle = ОписаниеЭлемента.СтрелкаНачала;
	ЭлементШаблон.endArrowStyle = ОписаниеЭлемента.СтрелкаКонца;
	
	ЭлементШаблон.itemTabOrder = ЭлементШаблон.itemId;
	ПостроительСхемы.СхемаXDTO.item.Добавить(ЭлементШаблон);
	
КонецПроцедуры

// Проверяет описание элемента пероед добавлением в схему.
// 
// Параметры:
//  ПостроительСхемы - Структура - см. ПостроительГрафическойСхемы
//  ОписаниеЭлемента - Структура - см. ОписаниеЭлементаСтарт, и т.д.
//
Процедура ПроверитьОписаниеЭлементаПередДобавлениемВСхему(ПостроительСхемы, ОписаниеЭлемента)
	
	Если Не ЗначениеЗаполнено(ОписаниеЭлемента.Имя) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнено имя в описании элемента.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Если ПостроительСхемы.ИменаЭлементов[ОписаниеЭлемента.Имя] = Истина Тогда
		ШаблонТекста = НСтр("ru = 'Элемент с именем %1 уже присутствует в схеме.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		ВызватьИсключение СтрШаблон(ШаблонТекста, ОписаниеЭлемента.Имя);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает точку элемента схемы в виде xdto объекта.
// 
// Параметры:
//  x, y - Число - координаты точки
// 
// Возвращаемое значение:
//  ЗначениеXDTO
//
Функция ТочкаXDTO(x, y)
	
	ТочкаЭлемента = СериализаторXDTO.Фабрика.Создать(
		СериализаторXDTO.Фабрика.Тип("http://v8.1c.ru/8.2/data/graphscheme","Point"));
	
	ТочкаЭлемента.x = x;
	ТочкаЭлемента.y = y;	
	
	Возврат ТочкаЭлемента;
	
КонецФункции

// Возвращает по данным построителя графическую схему процесса.
// 
// Параметры:
// 	ПостроительСхемы - Структура - см. ПостроительГрафическойСхемы
// 	
// Возвращаемое значение:
// 	ГрафическаяСхема
//
Функция ГрафическаяСхемаИзПостроителя(ПостроительСхемы)
	
	Возврат СериализаторXDTO.ПрочитатьXDTO(ПостроительСхемы.СхемаXDTO);
	
КонецФункции

#КонецОбласти
	
// Функция преобразования записи json для настройки схемы.
// Используется в методе ЗаписатьJSON.
//
Функция ПреобразованиеЗаписиНастройкиСхемы(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
   
   Если ТипЗнч(Значение) = Тип("ПеречислениеСсылка.ТипыЭлементовСхемПроцессов") Тогда
       Возврат СтрШаблон("ТипЭлементаСхемы.%1", ОбщегоНазначения.ИмяЗначенияПеречисления(Значение));
   КонецЕсли;
   
   Отказ = Истина;
   
КонецФункции

// Функция восстановления чтения json настройки схемы.
// Используется в методе ПрочитатьJSON.
//
Функция ВосстановлениеЧтенияНастройкиСхемы(Свойство, Значение, ДополнительныеПараметры) Экспорт
    
    Если ТипЗнч(Значение) = Тип("Строка")
    	И СтрНачинаетсяС(Значение, "ТипЭлементаСхемы.") Тогда
    	
    	ТипЭлементаСтрокой = СтрЗаменить(Значение, "ТипЭлементаСхемы.", "");
    	
    	Возврат Перечисления.ТипыЭлементовСхемПроцессов[ТипЭлементаСтрокой];
    	   	   
    КонецЕсли;
    
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
#Если ТолстыйКлиентУправляемоеПриложение Тогда
	// Не предусмотрено особого поведения для толстого клиента управляемого приложения.
#Иначе
	Если РаботаСПроцессамиПоОбработкамОбъектовСобытия.ОбработатьПолучениеФормыСхемыПроцессов(
		ВидФормы, Параметры, ВыбраннаяФорма, СтандартнаяОбработка) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если РаботаСКомплекснымиБизнесПроцессамиСобытия.ОбработатьПолучениеФормыСхемыПроцессов(
		ВидФормы, Параметры, ВыбраннаяФорма, СтандартнаяОбработка) Тогда
		
		Возврат;
	КонецЕсли;
#КонецЕсли
		
	Если ВидФормы = "ФормаОбъекта" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ВыбраннаяФорма = Метаданные.Справочники.СхемыПроцессов.Формы.КарточкаСхемы;
		
		Если Параметры.Свойство("Ключ") Тогда
			Параметры.Вставить("СхемаПроцесса", Параметры.Ключ);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти