
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Находит имена следующий действий после указанного элемента.
// Рекурсивная процедура.
//
// Параметры:
//  ИменаПоследующихДействий - Массив - в этот параметр помещается результат.
//  Элемент - Строка - имя элемента, после которого ищутся действия.
//  Схема - СправочникОбъект.УдалитьСхемыКомплексныхПроцессов - объект схемы.
//
Процедура НайтиИменаПоследующихДействий(ИменаПоследующихДействий, Элемент, Схема) Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяПредшественника", Элемент);
	ПоследователиЭлемента = Схема.ПредшественникиЭлементовСхемы.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаТаблицы Из ПоследователиЭлемента Цикл
		ТипПоследователя = Схема.ЭлементыСхемы.Найти(СтрокаТаблицы.Имя, "Имя").Тип;
		
		Если ТипПоследователя = Перечисления.УдалитьТипыЭлементовСхемыКомплексногоПроцесса.Действие
			Или ТипПоследователя = Перечисления.УдалитьТипыЭлементовСхемыКомплексногоПроцесса.ВложенныйПроцесс Тогда
			
			ИменаПоследующихДействий.Добавить(СтрокаТаблицы.Имя);
		Иначе
			НайтиИменаПоследующихДействий(ИменаПоследующихДействий, СтрокаТаблицы.Имя, Схема);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает ссылку на схему процесса по схеме комплексного процесса.
// 
// Параметры:
//  СхемаКП - СправочникСсылка.УдалитьСхемыКомплексныхПроцессов
// 
// Возвращаемое значение:
//  СправочникСсылка.СхемыПроцессов
//  
Функция СсылкаНаСхемуПроцессаПоСхемеКомплексногоПроцесса(СхемаКП) Экспорт
	
	Возврат Справочники.СхемыПроцессов.ПолучитьСсылку(СхемаКП.УникальныйИдентификатор());
	
КонецФункции

// Возвращает графическую схему для спр. СхемаПроцесса по графической схеме для
// спр. УдалитьСхемыКомплексныхПроцессов (СхемыКомплексныхПроцессов).
// 
// Параметры:
//  СхемаКП - ГрафическаяСхема
// 
// Возвращаемое значение:
//  ГрафическаяСхема
//
Функция ГрафическаяСхемаПроцессаПоСхемеКомплексногоПроцесса(СхемаКП) Экспорт
	
	СхемаXDTO = СериализаторXDTO.ЗаписатьXDTO(СхемаКП);
	
	ТипВложенногоПроцесса = 10;
	ТипДействия = 5;
	
	ИндексЭлемента = СхемаXDTO.item.Количество() - 1;
	
	Пока ИндексЭлемента >= 0 Цикл
		
		ЭлементXDTO = СхемаXDTO.item[ИндексЭлемента];
			
		Если ЭлементXDTO.itemType = ТипВложенногоПроцесса Тогда
			СхемаXDTO.item.Добавить(ВложенныйПроцессXDTOДляСхемыПроцесса(ЭлементXDTO));
			СхемаXDTO.item.Удалить(ИндексЭлемента);
		ИначеЕсли ЭлементXDTO.itemType = ТипДействия Тогда
			СхемаXDTO.item.Добавить(ДействиеXDTOДляСхемыПроцесса(ЭлементXDTO));
			СхемаXDTO.item.Удалить(ИндексЭлемента);
		КонецЕсли;
		
		ИндексЭлемента = ИндексЭлемента - 1;
		
	КонецЦикла;
			
	Возврат СериализаторXDTO.ПрочитатьXDTO(СхемаXDTO);
	
КонецФункции

// Возвращает типы элементов схемы процесса по схеме комплексного процесса.
// 
// Параметры:
//  СхемаКП - ГрафическаяСхема 
// 
// Возвращаемое значение:
//   Соответствие из КлючИЗначение:
//    * Ключ - Строка - имя элемента графической схемы
//    * Значение - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов 
//  
Функция ТипыЭлементовСхемыПроцессаПоСхемеКомплексногоПроцесса(СхемаКП) Экспорт
	
	ТипыЭлементов = Новый Соответствие();
	
	Для Каждого ЭлементСхемы Из СхемаКП.ЭлементыГрафическойСхемы Цикл
		
		ТипЭлемента = ТипЗнч(ЭлементСхемы);
		Если ТипЭлемента = Тип("ЭлементГрафическойСхемыСоединительнаяЛиния") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЭлемента = Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс") Тогда
			
			ТипыЭлементов[ЭлементСхемы.Имя] = Перечисления.ТипыЭлементовСхемПроцессов.ВложенныйПроцесс;
						
		ИначеЕсли  ТипЭлемента = Тип("ЭлементГрафическойСхемыДействие") Тогда
			
			ТипыЭлементов[ЭлементСхемы.Имя] = Перечисления.ТипыЭлементовСхемПроцессов.Действие;
						
		ИначеЕсли  ТипЭлемента = Тип("ЭлементГрафическойСхемыДекоративнаяЛиния") Тогда
			
			ТипыЭлементов[ЭлементСхемы.Имя] = Перечисления.ТипыЭлементовСхемПроцессов.ДекоративнаяЛиния;
						 			 			
		ИначеЕсли  ТипЭлемента = Тип("ЭлементГрафическойСхемыДекорация") Тогда
			
			ТипыЭлементов[ЭлементСхемы.Имя] = Перечисления.ТипыЭлементовСхемПроцессов.Декорация;
			
		ИначеЕсли  ТипЭлемента = Тип("ЭлементГрафическойСхемыЗавершение") Тогда
			
			ТипыЭлементов[ЭлементСхемы.Имя] = Перечисления.ТипыЭлементовСхемПроцессов.Завершение;
				
		ИначеЕсли  ТипЭлемента = Тип("ЭлементГрафическойСхемыОбработка") Тогда
			
			ТипыЭлементов[ЭлементСхемы.Имя] = Перечисления.ТипыЭлементовСхемПроцессов.Скрипт;
			
		ИначеЕсли  ТипЭлемента = Тип("ЭлементГрафическойСхемыРазделение") Тогда
			
			ТипыЭлементов[ЭлементСхемы.Имя] = Перечисления.ТипыЭлементовСхемПроцессов.Разделение;
								
		ИначеЕсли  ТипЭлемента = Тип("ЭлементГрафическойСхемыСлияние") Тогда
			
			ТипыЭлементов[ЭлементСхемы.Имя] = Перечисления.ТипыЭлементовСхемПроцессов.Слияние;
			
		ИначеЕсли  ТипЭлемента = Тип("ЭлементГрафическойСхемыСтарт") Тогда
			
			ТипыЭлементов[ЭлементСхемы.Имя] = Перечисления.ТипыЭлементовСхемПроцессов.Старт;
			
		ИначеЕсли  ТипЭлемента = Тип("ЭлементГрафическойСхемыУсловие") Тогда
			
			ТипыЭлементов[ЭлементСхемы.Имя] = Перечисления.ТипыЭлементовСхемПроцессов.Условие;
			
		Иначе
			
			ВызватьИсключение 
				НСтр("ru = 'Графическая схема содержит недопустимые элементы для справочника Схемы процессов.'",
				ОбщегоНазначения.КодОсновногоЯзыка());
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТипыЭлементов;
	
КонецФункции

// Переносит настройки схем шаблонов комплексных процессов в новую структуру данных
// (справочники СхемыПроцессов и ПараметрыСхемДляКомплексныхПроцессов).
// 
// Настройки действий комплексных процессов тут не обрабатываются.
//
Процедура ПеренестиНастройкиСхемШаблоновКомплексныхПроцессовВНовуюСтруктуруДанных() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ШаблоныКомплексныхБизнесПроцессов.Ссылка КАК ШаблонПроцесса,
		|	УдалитьСхемыКомплексныхПроцессов.Ссылка КАК Схема
		|ИЗ
		|	Справочник.ШаблоныКомплексныхБизнесПроцессов КАК ШаблоныКомплексныхБизнесПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УдалитьСхемыКомплексныхПроцессов КАК УдалитьСхемыКомплексныхПроцессов
		|		ПО ШаблоныКомплексныхБизнесПроцессов.Схема = УдалитьСхемыКомплексныхПроцессов.Ссылка
		|ГДЕ
		|	ШаблоныКомплексныхБизнесПроцессов.КомплексныйПроцесс = ЗНАЧЕНИЕ(БизнесПроцесс.КомплексныйПроцесс.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
			
		Попытка
			
			СхемаКП = Выборка.Схема.ПолучитьОбъект();
			
			СформироватьСхемуПроцессаПоСхемеКомплексногоПроцесса(СхемаКП);
			СформироватьПараметрыСхемыПоСхемеКомплексногоПроцесса(СхемаКП);
												
			ШаблонПроцесса = Выборка.ШаблонПроцесса.ПолучитьОбъект();
			ШаблонПроцесса.Схема = СсылкаНаСхемуПроцессаПоСхемеКомплексногоПроцесса(Выборка.Схема);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ШаблонПроцесса);
								
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
			
	КонецЦикла;
			
КонецПроцедуры

// Переносит настройки схем активных комплексных процессов в новую структуру данных
// (справочники СхемыПроцессов и ПараметрыСхемДляКомплексныхПроцессов).
//
Процедура ПеренестиНастройкиСхемАктивныхКомплексныхПроцессовВНовуюСтруктуруДанных() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УдалитьСхемыКомплексныхПроцессов.Ссылка КАК Схема
		|ПОМЕСТИТЬ СхемыАктивныхКП
		|ИЗ
		|	БизнесПроцесс.КомплексныйПроцесс КАК КомплексныеПроцессы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УдалитьСхемыКомплексныхПроцессов КАК УдалитьСхемыКомплексныхПроцессов
		|		ПО КомплексныеПроцессы.Ссылка = УдалитьСхемыКомплексныхПроцессов.КомплексныйПроцесс
		|ГДЕ
		|	КомплексныеПроцессы.Стартован = ИСТИНА
		|	И КомплексныеПроцессы.Завершен = ЛОЖЬ
		|	И КомплексныеПроцессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И КомплексныеПроцессы.ПометкаУдаления = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КомплексныйПроцесс.Ссылка КАК Процесс,
		|	КомплексныйПроцесс.Схема КАК Схема
		|ИЗ
		|	БизнесПроцесс.КомплексныйПроцесс КАК КомплексныйПроцесс
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СхемыАктивныхКП КАК СхемыАктивныхКП
		|		ПО КомплексныйПроцесс.Схема = СхемыАктивныхКП.Схема
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ШаблоныКомплексныхБизнесПроцессов.Ссылка,
		|	ШаблоныКомплексныхБизнесПроцессов.Схема
		|ИЗ
		|	Справочник.ШаблоныКомплексныхБизнесПроцессов КАК ШаблоныКомплексныхБизнесПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СхемыАктивныхКП КАК СхемыАктивныхКП
		|		ПО ШаблоныКомплексныхБизнесПроцессов.Схема = СхемыАктивныхКП.Схема";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
			
		Попытка
			
			СхемаКП = Выборка.Схема.ПолучитьОбъект();
			
			СформироватьСхемуПроцессаПоСхемеКомплексногоПроцесса(СхемаКП);
			СформироватьПараметрыСхемыПоСхемеКомплексногоПроцесса(СхемаКП);
			
			ПроцессОбъект = Выборка.Процесс.ПолучитьОбъект();
			ПроцессОбъект.Схема = СсылкаНаСхемуПроцессаПоСхемеКомплексногоПроцесса(Выборка.Схема);
			
			ТипОбъекта = ТипЗнч(Выборка.Процесс);
			Если ТипОбъекта = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
				ОбновитьКомплексныйПроцессПоСхеме(ПроцессОбъект, СхемаКП);
			КонецЕсли;
					
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПроцессОбъект);
										
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
			
	КонецЦикла;
			
КонецПроцедуры

// Переносит настройки схем неактивных комплексных процессов в новую структуру данных
// (справочники СхемыПроцессов и ПараметрыСхемДляКомплексныхПроцессов).
//
Процедура ПеренестиНастройкиСхемНеактивныхКомплексныхПроцессовВНовуюСтруктуруДанных(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Рассчитываем на то, что все активные процессы и шаблоны процессов уже обновлены.
	// Поэтому тут обновляем то что осталось (схемы неактивных процессов). 
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Шаблоны.Ссылка) КАК Количество
			|ИЗ
			|	Справочник.ШаблоныКомплексныхБизнесПроцессов КАК Шаблоны
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УдалитьСхемыКомплексныхПроцессов КАК УдалитьСхемыКомплексныхПроцессов
			|		ПО Шаблоны.Схема = УдалитьСхемыКомплексныхПроцессов.Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Процессы.Ссылка)
			|ИЗ
			|	БизнесПроцесс.КомплексныйПроцесс КАК Процессы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УдалитьСхемыКомплексныхПроцессов КАК УдалитьСхемыКомплексныхПроцессов
			|		ПО Процессы.Схема = УдалитьСхемыКомплексныхПроцессов.Ссылка";
				
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = 
				Параметры.ПрогрессВыполнения.ВсегоОбъектов + Выборка.Количество;
		КонецЦикла;
	
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	Шаблоны.Ссылка КАК Процесс,
		|	УдалитьСхемыКомплексныхПроцессов.Ссылка КАК Схема
		|ИЗ
		|	Справочник.ШаблоныКомплексныхБизнесПроцессов КАК Шаблоны
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УдалитьСхемыКомплексныхПроцессов КАК УдалитьСхемыКомплексныхПроцессов
		|		ПО Шаблоны.Схема = УдалитьСхемыКомплексныхПроцессов.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1000
		|	Процессы.Ссылка,
		|	УдалитьСхемыКомплексныхПроцессов.Ссылка
		|ИЗ
		|	БизнесПроцесс.КомплексныйПроцесс КАК Процессы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УдалитьСхемыКомплексныхПроцессов КАК УдалитьСхемыКомплексныхПроцессов
		|		ПО Процессы.Схема = УдалитьСхемыКомплексныхПроцессов.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
			
		Попытка
			
			СхемаКП = Выборка.Схема.ПолучитьОбъект();
			
			СформироватьСхемуПроцессаПоСхемеКомплексногоПроцесса(СхемаКП);
			СформироватьПараметрыСхемыПоСхемеКомплексногоПроцесса(СхемаКП);
			
			ПроцессОбъект = Выборка.Процесс.ПолучитьОбъект();
			ПроцессОбъект.Схема = СсылкаНаСхемуПроцессаПоСхемеКомплексногоПроцесса(Выборка.Схема);
			
			ТипОбъекта = ТипЗнч(Выборка.Процесс);
			Если ТипОбъекта = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
				ОбновитьКомплексныйПроцессПоСхеме(ПроцессОбъект, СхемаКП);
			КонецЕсли;
					
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПроцессОбъект);
										
			ЗафиксироватьТранзакцию();
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
		Исключение
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать схему процесса: %1 по причине:
					|%2'"),
				Выборка.Схема,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
			
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ПеренестиНастройкиСхемНеактивныхКомплексныхПроцессовВНовуюСтруктуруДанных не удалось обработать некоторые схемы процессов (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
	
КонецПроцедуры

// Меняет точку маршрута в активных служебных задачах комплексных процессов.
//
Процедура ЗаменитьТочкуМаршрутаВАктивныхСлужебныхЗадачахКомплексныхПроцессов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина); 
	
	ТочкаВыполнитьДействияПроцессаПоСхеме = 
		БизнесПроцессы.КомплексныйПроцесс.ТочкиМаршрута.ВыполнитьДействияПроцессаПоСхеме;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.КомплексныйПроцесс КАК КомплексныйПроцесс
		|		ПО ЗадачаИсполнителя.БизнесПроцесс = КомплексныйПроцесс.Ссылка
		|ГДЕ
		|	ЗадачаИсполнителя.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.КомплексныйПроцесс.ТочкаМаршрута.ВложенныйПроцесс)
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И КомплексныйПроцесс.Схема ССЫЛКА Справочник.СхемыПроцессов";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗадачаОбъект.ТочкаМаршрута = ТочкаВыполнитьДействияПроцессаПоСхеме;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЗадачаОбъект);
	КонецЦикла;
	
КонецПроцедуры

// Меняет точку маршрута в активных служебных задачах комплексных процессов.
//
Процедура ЗаменитьТочкуМаршрутаВНеактивныхСлужебныхЗадачахКомплексныхПроцессов(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Рассчитываем на то, что все задачи активных процессов уже обновлены.
	// Поэтому тут обновляем то что осталось.	
	
	Запрос = Новый Запрос;
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗадачаИсполнителя.Ссылка) КАК Количество
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.КомплексныйПроцесс КАК КомплексныйПроцесс
			|		ПО ЗадачаИсполнителя.БизнесПроцесс = КомплексныйПроцесс.Ссылка
			|ГДЕ
			|	ЗадачаИсполнителя.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.КомплексныйПроцесс.ТочкаМаршрута.ВложенныйПроцесс)
			|	И КомплексныйПроцесс.Схема ССЫЛКА Справочник.СхемыПроцессов";
				
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов =
			Параметры.ПрогрессВыполнения.ВсегоОбъектов + Выборка.Количество;
	
	КонецЕсли; 
	
	ТочкаВыполнитьДействияПроцессаПоСхеме = 
		БизнесПроцессы.КомплексныйПроцесс.ТочкиМаршрута.ВыполнитьДействияПроцессаПоСхеме;
		
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ЗадачаИсполнителя.Ссылка КАК Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.КомплексныйПроцесс КАК КомплексныйПроцесс
		|		ПО ЗадачаИсполнителя.БизнесПроцесс = КомплексныйПроцесс.Ссылка
		|ГДЕ
		|	ЗадачаИсполнителя.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.КомплексныйПроцесс.ТочкаМаршрута.ВложенныйПроцесс)
		|	И КомплексныйПроцесс.Схема ССЫЛКА Справочник.СхемыПроцессов";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка		
			
			ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗадачаОбъект.ТочкаМаршрута = ТочкаВыполнитьДействияПроцессаПоСхеме;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЗадачаОбъект);
			
			ЗафиксироватьТранзакцию();
			
			ОбработаноОбъектов = ОбработаноОбъектов + 1;
			
		Исключение
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось обработать служебную задачу процесса: %1 по причине:
					|%2'"),
				Выборка.Ссылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстСообщения);
			
		КонецПопытки;
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедуре ЗаменитьТочкуМаршрутаВНеактивныхСлужебныхЗадачахКомплексныхПроцессов не удалось обработать некоторые служебные задачи (пропущены): %1'"),
			ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = Выборка.Количество() = 0;
	
КонецПроцедуры

// Возвращает результаты действия в условии схемы для новой структуры данных.
// 
// Параметры:
//  РезультатВыполненияВСхемеКП - ПеречислениеСсылка.РезультатыВыполненияДействийКомплексныхПроцессов
//                                результат в предыдущей структуре схем.
//  ИмяДействия - Строка - имя действия в схеме комплексного процесса. 
//  ПараметрыДействий - ТабличнаяЧасть, ТаблицаЗначений - таблица с параметрами действий,
//                      соответствующая СправочникОбъект.УдалитьСхемыКомплексныхПроцессов.ПараметрыДействий
// 
// Возвращаемое значение:
//  Массив
//   * ПеречислениеСсылка.РезультатыПроцессаПодписания
//   * ПеречислениеСсылка.ОбщиеРезультатыПриглашения
//   * ПеречислениеСсылка.РезультатыРегистрации
//   * ПеречислениеСсылка.РезультатыСогласования
//   * ПеречислениеСсылка.РезультатыУтверждения
//   * Строка - см. РезультатВыполненияДействияКомплексногоПроцессаЗавершено
//
Функция РезультатыДействияВУсловииСхемыДляНовойСтруктурыДанных(
	РезультатВыполненияВСхемеКП, ИмяДействия, ПараметрыДействий) Экспорт
	
	РезультатыДействия = Новый Массив;
	
	ПараметрыДействия = ПараметрыДействий.Найти(ИмяДействия, "Имя");
	Если ПараметрыДействия = Неопределено Тогда
		Возврат РезультатыДействия; 
	КонецЕсли;
	
	РезультатЗавершено = 
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.
		РезультатВыполненияДействияКомплексногоПроцессаЗавершено();
	
	ТипНастройки = ТипЗнч(ПараметрыДействия.ШаблонПроцесса);
	
	РезультатыВыполнения = Перечисления.РезультатыВыполненияДействийКомплексныхПроцессов; 
	
	Если ТипНастройки = Тип("СправочникСсылка.ШаблоныИсполнения")
		Или ТипНастройки = Тип("СправочникСсылка.ШаблоныОзнакомления")
		Или ТипНастройки = Тип("СправочникСсылка.ШаблоныРассмотрения")
		Или РезультатВыполненияВСхемеКП = РезультатыВыполнения.ЗавершеноСЛюбымРезультатом Тогда
				
		РезультатыДействия.Добавить(РезультатЗавершено.Значение);
	КонецЕсли;
	
	Если ТипНастройки = Тип("СправочникСсылка.ШаблоныПодписания") Тогда
		Если РезультатВыполненияВСхемеКП = РезультатыВыполнения.Положительно Тогда
			РезультатыДействия.Добавить(Перечисления.РезультатыПроцессаПодписания.Подписано);
		ИначеЕсли РезультатВыполненияВСхемеКП = РезультатыВыполнения.Отрицательно Тогда
			РезультатыДействия.Добавить(Перечисления.РезультатыПроцессаПодписания.НеПодписано);
		КонецЕсли;
	ИначеЕсли ТипНастройки = Тип("СправочникСсылка.ШаблоныПриглашения") Тогда
		Если РезультатВыполненияВСхемеКП = РезультатыВыполнения.Положительно Тогда
			РезультатыДействия.Добавить(
				Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками);
			РезультатыДействия.Добавить(
				Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками);
		ИначеЕсли РезультатВыполненияВСхемеКП = РезультатыВыполнения.Отрицательно Тогда
			РезультатыДействия.Добавить(
				Перечисления.ОбщиеРезультатыПриглашения.НеПринятоВсемиУчастниками);
			РезультатыДействия.Добавить(
				Перечисления.ОбщиеРезультатыПриглашения.НеПринятоОбязательнымиУчастниками);
		КонецЕсли;		
	ИначеЕсли ТипНастройки = Тип("СправочникСсылка.ШаблоныРегистрации") Тогда
		Если РезультатВыполненияВСхемеКП = РезультатыВыполнения.Положительно Тогда
			РезультатыДействия.Добавить(Перечисления.РезультатыРегистрации.Зарегистрировано);
		ИначеЕсли РезультатВыполненияВСхемеКП = РезультатыВыполнения.Отрицательно Тогда
			РезультатыДействия.Добавить(Перечисления.РезультатыРегистрации.НеЗарегистрировано);
		КонецЕсли;
	ИначеЕсли ТипНастройки = Тип("СправочникСсылка.ШаблоныСогласования") Тогда
		Если РезультатВыполненияВСхемеКП = РезультатыВыполнения.ПоложительноБезЗамечаний Тогда
			РезультатыДействия.Добавить(Перечисления.РезультатыСогласования.Согласовано);
		ИначеЕсли РезультатВыполненияВСхемеКП = РезультатыВыполнения.ПоложительноСЗамечаниями Тогда
			РезультатыДействия.Добавить(Перечисления.РезультатыСогласования.СогласованоСЗамечаниями);	
		ИначеЕсли РезультатВыполненияВСхемеКП = РезультатыВыполнения.Положительно Тогда
			РезультатыДействия.Добавить(Перечисления.РезультатыСогласования.Согласовано);
			РезультатыДействия.Добавить(Перечисления.РезультатыСогласования.СогласованоСЗамечаниями);
		ИначеЕсли РезультатВыполненияВСхемеКП = РезультатыВыполнения.Отрицательно Тогда
			РезультатыДействия.Добавить(Перечисления.РезультатыСогласования.НеСогласовано);
		КонецЕсли;
	ИначеЕсли ТипНастройки = Тип("СправочникСсылка.ШаблоныУтверждения") Тогда
		Если РезультатВыполненияВСхемеКП = РезультатыВыполнения.Положительно Тогда
			РезультатыДействия.Добавить(Перечисления.РезультатыУтверждения.Утверждено);
		ИначеЕсли РезультатВыполненияВСхемеКП = РезультатыВыполнения.Отрицательно Тогда
			РезультатыДействия.Добавить(Перечисления.РезультатыУтверждения.НеУтверждено);
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатыДействия;
	
КонецФункции

// Проверяет является ли элемент с именем вложенным процессом.
// 
// Параметры:
//  ИмяЭлемента Строка - имя элемента в схеме КП.
//  ЭлементыСхемы - ТабличнаяЧасть, ТаблицаЗначений - таблица с элементами схемы,
//                  соответствующая СправочникОбъект.УдалитьСхемыКомплексныхПроцессов.ЭлементыСхемы
// 
// Возвращаемое значение:
//  Булево
//
Функция ЭтоВложенныйПроцессВСхемеКП(ИмяЭлемента, ЭлементыСхемы) Экспорт
	
	СтрокаЭлемента = ЭлементыСхемы.Найти(ИмяЭлемента, "Имя");
	Если СтрокаЭлемента <> Неопределено
		
		И СтрокаЭлемента.Тип = 
		Перечисления.УдалитьТипыЭлементовСхемыКомплексногоПроцесса.ВложенныйПроцесс Тогда
		
		Возврат Истина;
	КонецЕсли; 

	Возврат Ложь;
	
КонецФункции

// Возвращает ссылку на скрипт условия проверки завершенности вложенного процесса
// с именем в схеме процесса. 
// 
// Параметры:
//  ИмяЭлемента - Строка - имя вложенного процесса в схеме.
//  Группа 
// 
// Возвращаемое значение:
//  СправочникСсылка.СкриптыУсловийСхемДляКомплексныхПроцессов
//
Функция СкриптПроверкиЗавершенностиВложенногоПроцесса(ИмяЭлемента, Группа = Неопределено) Экспорт
	
	ВыражениеСкрипта =
		"ИмяЭлемента = ""%1"";
		|
		|ПроцесыЭлементов =
		|	РаботаСКомплекснымиБизнесПроцессамиСервер.ПроцессыЭлементовСхемыПоКомплексномуПроцессу(
		|	Параметры.ПроцессОбъект.Ссылка);
		|
		|ПроцессЭлемента = ПроцесыЭлементов[ИмяЭлемента];
		|
		|Результат = ЗначениеЗаполнено(ПроцессЭлемента)
		|	И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроцессЭлемента, ""Завершен"");";
		
	ВыражениеСкрипта = СтрШаблон(ВыражениеСкрипта, ИмяЭлемента);
	
	ХешВыржаения =
		РаботаСКомплекснымиБизнесПроцессамиСервер.ХешВыржаенияНаВстроенномЯзыке(ВыражениеСкрипта);
	
	СкриптСхемы = Справочники.СкриптыУсловийСхемДляКомплексныхПроцессов.
		СкриптСхемыПоХешуВыражения(ХешВыржаения);
	
	Если ЗначениеЗаполнено(СкриптСхемы) Тогда
		Возврат СкриптСхемы;
	КонецЕсли;
	
	СкриптыСхемОбъект = Справочники.СкриптыУсловийСхемДляКомплексныхПроцессов.СоздатьЭлемент();
	
	СкриптыСхемОбъект.Наименование = СтрШаблон(
		НСтр("ru = 'Вложенный процесс ""%1"" завершен.'"),
		ИмяЭлемента);	
		
	СкриптыСхемОбъект.Выражение = ВыражениеСкрипта;
	СкриптыСхемОбъект.ХешВыражения = ХешВыржаения;
	СкриптыСхемОбъект.ДатаСоздания = ТекущаяДата();
	СкриптыСхемОбъект.ДатаИзменения = СкриптыСхемОбъект.ДатаСоздания;
	
	СкриптыСхемОбъект.Родитель = Группа;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СкриптыСхемОбъект);
	
	Возврат СкриптыСхемОбъект.Ссылка;	
	
КонецФункции

// Формирует схему процесса по схеме комплексного процесса.
// 
// Параметры:
//  СхемаКП - СправочникОбъект.УдалитьСхемыКомплексныхПроцессов
//  
Процедура СформироватьСхемуПроцессаПоСхемеКомплексногоПроцесса(СхемаКП)
	
	Схема = СхемаКП.Схема.Получить();
	
	ДанныеСхемыПроцесса = СхемыПроцессовКлиентСервер.СтруктураДанныхСхемыПроцесса();
	
	ДанныеСхемыПроцесса.Наименование = Строка(СхемаКП.ВладелецСхемы);
	
	ДанныеСхемыПроцесса.Схема = ГрафическаяСхемаПроцессаПоСхемеКомплексногоПроцесса(Схема);
	
	ДанныеСхемыПроцесса.Настройки.ТипыЭлементов =
		ТипыЭлементовСхемыПроцессаПоСхемеКомплексногоПроцесса(Схема);
	
	СхемыПроцессовКлиентСервер.ОбновитьНастройкиПоСхеме(
		ДанныеСхемыПроцесса.Настройки, ДанныеСхемыПроцесса.Схема);
	
	Справочники.СхемыПроцессов.ЗаписатьДанныеСхемыПроцесса(
		СхемаКП.Ссылка.УникальныйИдентификатор(),
		ДанныеСхемыПроцесса,
		Истина);
	
КонецПроцедуры

// Формирует параметры схемы по схеме комплексного процесса.
// 
// Параметры:
//  СхемаКП - СправочникОбъект.УдалитьСхемыКомплексныхПроцессов 
//
Процедура СформироватьПараметрыСхемыПоСхемеКомплексногоПроцесса(СхемаКП)
	
	СхемаПроцесса = СсылкаНаСхемуПроцессаПоСхемеКомплексногоПроцесса(СхемаКП.Ссылка); 
	
	Схема = СхемаКП.Схема.Получить();
	
	ПараметрыСхемы = 
		Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыПоСхеме(СхемаПроцесса);
	Если ЗначениеЗаполнено(ПараметрыСхемы) Тогда
		
		ДаныеПараметров =
			Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(
			ПараметрыСхемы);
		
	Иначе
		ДаныеПараметров =
			Справочники.ПараметрыСхемДляКомплексныхПроцессов.СтруктураДанныхПараметровСхемы();
			
		ДаныеПараметров.Схема = СхемаПроцесса;
		
		ДаныеПараметров.ВладелецСхемы = СхемаКП.ВладелецСхемы;
		
		ДаныеПараметров.ОбъектДоступа = ДаныеПараметров.ВладелецСхемы; 
		Если ЗначениеЗаполнено(СхемаКП.КомплексныйПроцесс) Тогда		
			ДаныеПараметров.ОбъектДоступа = СхемаКП.КомплексныйПроцесс;
		КонецЕсли;
			
	КонецЕсли;
	
	ДаныеПараметров.НастройкиЭлементов.Очистить();
	ДаныеПараметров.ИдентификаторыНастроек.Очистить();
	ДаныеПараметров.ПорядокСортировкиНастроекЭлементов.Очистить();
	
	Для Каждого СтрокаТаблицы Из СхемаКП.ПараметрыДействий Цикл
				
		ДаныеПараметров.НастройкиЭлементов[СтрокаТаблицы.Имя] = СтрокаТаблицы.ШаблонПроцесса;
		
		ДаныеПараметров.ИдентификаторыНастроек[СтрокаТаблицы.Имя] = СтрокаТаблицы.Идентификатор;
		
		ДаныеПараметров.ПорядокСортировкиНастроекЭлементов[СтрокаТаблицы.Имя] =
			СтрокаТаблицы.ПорядокСортировки;
			
	КонецЦикла;  
	
	Для Каждого СтрокаТаблицы Из СхемаКП.ПараметрыОбработок Цикл
		
		ЭлементОбработки = Схема.ЭлементыГрафическойСхемы.Найти(СтрокаТаблицы.Имя);
		НаименованиеСкрипта = ЭлементОбработки.Наименование;
			
		ДаныеПараметров.НастройкиЭлементов[СтрокаТаблицы.Имя] =
			СкриптСхемДляКомплексныхПроцессовВНовойСтруктуреДанных(
			СхемаКП.Ссылка,
			СтрокаТаблицы.ИдентификаторСкрипта,
			НаименованиеСкрипта);
			
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из СхемаКП.ПараметрыУсловий Цикл
		
		URLСхемы = ПоместитьВоВременноеХранилище(
			ПолучитьОбщийМакет("СтруктураУсловияСхемыКомплексногоПроцесса"));
		Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных();
		Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы));	
		
		Компоновщик.ЗагрузитьНастройки(
			РаботаСКомплекснымиБизнесПроцессамиСервер.ПустоеУсловиеСхемыКомплексногоПроцесса());
		
		ПрежнееУсловие = СтрокаТаблицы.НастройкиУсловия.Получить();
		
		СкопироватьЭлементыОтбораУсловияСхемыВНовуюСтруктуру(
			Компоновщик.Настройки.Отбор.Элементы,
			ПрежнееУсловие.Отбор.Элементы,
			СхемаКП);
				
		ДаныеПараметров.НастройкиЭлементов[СтрокаТаблицы.Имя] = Компоновщик.ПолучитьНастройки();	
						
	КонецЦикла;
	
	Справочники.ПараметрыСхемДляКомплексныхПроцессов.ЗаписатьДанныеПараметровСхемы(
		ПараметрыСхемы, ДаныеПараметров, Ложь, Истина);
	
КонецПроцедуры

// Обновляет комплексный процесс по схеме.
// 
// Параметры:
//  Процесс - БизнесПроцессОбъект.КомплексныйПроцесс
//  СхемаКП - СправочникОбъект.УдалитьСхемыКомплексныхПроцессов 
//
Процедура ОбновитьКомплексныйПроцессПоСхеме(Процесс, СхемаКП)
	
	Процесс.ЗадачиЭлементовСхемы.Очистить();
	Процесс.ОтметкиПрохожденияСхемы.Очистить();
	Процесс.ТекущиеЭлементыСхемы.Очистить();
	
	Для Каждого СтрокаТаблицы Из СхемаКП.ЭлементыСхемы Цикл
		
		СтрокаОтметкиПрохождения = Процесс.ОтметкиПрохожденияСхемы.Добавить();
		СтрокаОтметкиПрохождения.ИмяЭлемента = СтрокаТаблицы.Имя;
		СтрокаОтметкиПрохождения.Пройден = СтрокаТаблицы.Пройден;
		
		Если СтрокаТаблицы.Текущий Тогда
			СтрокаТекущегоЭлемента = Процесс.ТекущиеЭлементыСхемы.Добавить();
			СтрокаТекущегоЭлемента.ИмяЭлемента = СтрокаТаблицы.Имя;
		КонецЕсли;
		
	КонецЦикла;

	Для Каждого СтрокаТаблицы Из СхемаКП.ПараметрыДействий Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Процесс) Тогда
			Продолжить;
		КонецЕсли;
			
		СтрокаСЗадачейЭлемента = Процесс.ЗадачиЭлементовСхемы.Добавить();
		СтрокаСЗадачейЭлемента.ИмяЭлемента = СтрокаТаблицы.Имя;
		СтрокаСЗадачейЭлемента.ЗадачаПроцесса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			СтрокаТаблицы.Процесс, "ВедущаяЗадача");
			
	КонецЦикла;

КонецПроцедуры



// Возвращает ссылку на скрипт схем для комплексных процессов в новой структуре данных.
// 
// Параметры:
//  Схема - СправочникСсылка.УдалитьСхемыКомплексныхПроцессов
//  ИдентификаторСкрипта - УникальныйИдентификатор - Идентификатор скрипта в прежней структуре.
//  НаименованиеСкрипта - Строка - наименование скрипта в прежней структуре.
// 
// Возвращаемое значение:
//  СправочникСсылка.СкриптыСхемДляКомплексныхПроцессов
//  
Функция СкриптСхемДляКомплексныхПроцессовВНовойСтруктуреДанных(
	Схема, ИдентификаторСкрипта, НаименованиеСкрипта)
	
	ВыражениеСкрипта = РегистрыСведений.УдалитьСкриптыСхемКомплексныхПроцессов.СкриптСхемы(
		Схема, ИдентификаторСкрипта);
	
	// Обновляем пути к контексту в скрипте.
	// При этом не учитываем логику скриптов, сложные скрипты могут не работать в новой структуре
	// данных схем для комплексных процессов.
	
	ВыражениеСкрипта = СтрЗаменить(ВыражениеСкрипта, "Процесс.", "Параметры.ПроцессОбъект.");
	
	ХешВыржаения =
		РаботаСКомплекснымиБизнесПроцессамиСервер.ХешВыржаенияНаВстроенномЯзыке(ВыражениеСкрипта);
	
	СкриптСхемы = Справочники.СкриптыСхемДляКомплексныхПроцессов.
		СкриптСхемыПоХешуВыражения(ХешВыржаения);
	
	Если ЗначениеЗаполнено(СкриптСхемы) Тогда
		Возврат СкриптСхемы;
	КонецЕсли;
	
	СкриптыСхемОбъект = Справочники.СкриптыСхемДляКомплексныхПроцессов.СоздатьЭлемент();
	СкриптыСхемОбъект.Наименование = НаименованиеСкрипта;
	СкриптыСхемОбъект.Выражение = ВыражениеСкрипта;
	СкриптыСхемОбъект.ХешВыражения = ХешВыржаения;
	СкриптыСхемОбъект.ДатаСоздания = ТекущаяДата();
	СкриптыСхемОбъект.ДатаИзменения = СкриптыСхемОбъект.ДатаСоздания;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СкриптыСхемОбъект);
	
	Возврат СкриптыСхемОбъект.Ссылка;	
	
КонецФункции

// Копирует элемента отбора условия схемы в новую структуру.
// 
// Параметры:
//  НовыеЭлементы - КоллекцияЭлементовОтбораКомпоновкиДанных - элементы нового отбора
//  ПредыдущиеЭлементы - КоллекцияЭлементовОтбораКомпоновкиДанных - элементы предыдущего отбора
//  СхемаКП - СправочникОбъект.УдалитьСхемыКомплексныхПроцессов - Схема КП
//
Процедура СкопироватьЭлементыОтбораУсловияСхемыВНовуюСтруктуру(
	НовыеЭлементы, ПредыдущиеЭлементы, СхемаКП)
	
	ТипГруппаЭлементовОтбораКомпоновкиДанных = Тип("ГруппаЭлементовОтбораКомпоновкиДанных");
	
	ПолеУсловиеПоПредметам =
		Новый ПолеКомпоновкиДанных("УсловиеПоПредметам");
		
	ПолеПроверкаПредмета = Новый ПолеКомпоновкиДанных(
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ИмяПоляУсловияПроверкаПредмета());
	
	ПолеУсловиеПоРезультатамВыполненияДействий = 
		Новый ПолеКомпоновкиДанных("УсловиеПоРезультатамВыполненияДействий");
	
	ПолеРезультатВыполненияДействия = Новый ПолеКомпоновкиДанных(
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ИмяПоляУсловияРезультатВыполненияДействия());
		
	ПолеВыражениеНаВстроенномЯзыке =
		Новый ПолеКомпоновкиДанных("ВыражениеНаВстроенномЯзыке");
	
	ПолеСкрипт = Новый ПолеКомпоновкиДанных(
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ИмяПоляУсловияСкрипт());		
		
	Для Каждого ПредыдущийЭлемент Из ПредыдущиеЭлементы Цикл
		
		ТипЭлемента = ТипЗнч(ПредыдущийЭлемент);
		
		Если ТипЭлемента = ТипГруппаЭлементовОтбораКомпоновкиДанных Тогда
			НовыйЭлемент = НовыеЭлементы.Добавить(ТипЭлемента);
			НовыйЭлемент.Использование = ПредыдущийЭлемент.Использование;
			НовыйЭлемент.ТипГруппы = ПредыдущийЭлемент.ТипГруппы;
			СкопироватьЭлементыОтбораУсловияСхемыВНовуюСтруктуру(
				НовыйЭлемент.Элементы, ПредыдущийЭлемент.Элементы, СхемаКП);
			Продолжить;
		КонецЕсли;
		
		Если ПредыдущийЭлемент.ЛевоеЗначение = ПолеУсловиеПоРезультатамВыполненияДействий Тогда
			
			ИмяЭлемента = ПредыдущийЭлемент.ПравоеЗначение.Действие;
			РезультатВыполненияПредыдущий = ПредыдущийЭлемент.ПравоеЗначение.РезультатВыполнения;
					
			Если ЭтоВложенныйПроцессВСхемеКП(ИмяЭлемента, СхемаКП.ЭлементыСхемы) Тогда
				
				НовыйЭлемент = НовыеЭлементы.Добавить(ТипЭлемента);
				НовыйЭлемент.Использование = ПредыдущийЭлемент.Использование;
				
				НовыйЭлемент.ЛевоеЗначение = ПолеСкрипт;
				
				НовыйЭлемент.ПравоеЗначение =
					СкриптПроверкиЗавершенностиВложенногоПроцесса(ИмяЭлемента);
				
				Продолжить;								
			КонецЕсли;
			
			РезультатВыполненияНовые = РезультатыДействияВУсловииСхемыДляНовойСтруктурыДанных(
				РезультатВыполненияПредыдущий, ИмяЭлемента, СхемаКП.ПараметрыДействий);
			
			СтрокаСОтборами = НовыеЭлементы;
			Если РезультатВыполненияНовые.Количество() > 1 Тогда
				НовыйЭлемент = НовыеЭлементы.Добавить(ТипГруппаЭлементовОтбораКомпоновкиДанных);
				НовыйЭлемент.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
				НовыйЭлемент.Использование = ПредыдущийЭлемент.Использование;
				СтрокаСОтборами = НовыйЭлемент.Элементы;
			КонецЕсли;
			
			Для Каждого РезультатВыполнения Из РезультатВыполненияНовые Цикл
				НовыйЭлемент = СтрокаСОтборами.Добавить(ТипЭлемента);
				НовыйЭлемент.Использование = ПредыдущийЭлемент.Использование;
				НовыйЭлемент.ЛевоеЗначение = ПолеРезультатВыполненияДействия;
				
				НовыйЭлемент.ПравоеЗначение = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.
					СтруктураУсловияРезультатВыполненияДействия();
				
				НовыйЭлемент.ПравоеЗначение.ИмяДействия = ИмяЭлемента;
				НовыйЭлемент.ПравоеЗначение.РезультатВыполнения = РезультатВыполнения;
				
			КонецЦикла;
		
			Продолжить; 
		КонецЕсли;
		
		НовыйЭлемент = НовыеЭлементы.Добавить(ТипЭлемента);
		НовыйЭлемент.Использование = ПредыдущийЭлемент.Использование;
					
		Если ПредыдущийЭлемент.ЛевоеЗначение = ПолеУсловиеПоПредметам Тогда
		
			НовыйЭлемент.ЛевоеЗначение = ПолеПроверкаПредмета;
			
			НовыйЭлемент.ПравоеЗначение = 
				РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.
				СтруктураУсловияПроверкаПредмета();
				
			НовыйЭлемент.ПравоеЗначение.ИмяПредмета = ПредыдущийЭлемент.ПравоеЗначение.ИмяПредмета;
			НовыйЭлемент.ПравоеЗначение.АлгоритмПроверки = ПредыдущийЭлемент.ПравоеЗначение.Условие;
				
		ИначеЕсли ПредыдущийЭлемент.ЛевоеЗначение = ПолеВыражениеНаВстроенномЯзыке Тогда
			
			НовыйЭлемент.ЛевоеЗначение = ПолеСкрипт;

			НовыйЭлемент.ПравоеЗначение =
				СкриптУсловияСхемДляКомплексныхПроцессовВНовойСтруктуреДанных(
				СхемаКП.Ссылка,
				ПредыдущийЭлемент.ПравоеЗначение.Выражение,
				ПредыдущийЭлемент.ПравоеЗначение.Наименование);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает ссылку на скрипт условия схем для комплексных процессов в новой структуре данных.
// 
// Параметры:
//  Схема - СправочникСсылка.УдалитьСхемыКомплексныхПроцессов
//  ИдентификаторСкрипта - УникальныйИдентификатор - Идентификатор скрипта в прежней структуре.
//  НаименованиеСкрипта - Строка - наименование скрипта в прежней структуре.
// 
// Возвращаемое значение:
//  СправочникСсылка.СкриптыСхемДляКомплексныхПроцессов
//
Функция СкриптУсловияСхемДляКомплексныхПроцессовВНовойСтруктуреДанных(
	Схема, ИдентификаторСкрипта, НаименованиеСкрипта)
	
	ВыражениеСкрипта = РегистрыСведений.УдалитьСкриптыСхемКомплексныхПроцессов.СкриптСхемы(
		Схема, ИдентификаторСкрипта);
	
	// Обновляем пути к контексту в скрипте.
	// При этом не учитываем логику скриптов, сложные скрипты могут не работать в новой структуре
	// данных схем для комплексных процессов.
	
	ВыражениеСкрипта = СтрЗаменить(ВыражениеСкрипта, "Процесс.", "Параметры.ПроцессОбъект.");
	ВыражениеСкрипта = СтрЗаменить(ВыражениеСкрипта, "Результат", "Параметры.Результат");
	
	ХешВыржаения =
		РаботаСКомплекснымиБизнесПроцессамиСервер.ХешВыржаенияНаВстроенномЯзыке(ВыражениеСкрипта);
	
	СкриптСхемы = Справочники.СкриптыУсловийСхемДляКомплексныхПроцессов.
		СкриптСхемыПоХешуВыражения(ХешВыржаения);
	
	Если ЗначениеЗаполнено(СкриптСхемы) Тогда
		Возврат СкриптСхемы;
	КонецЕсли;
	
	СкриптыСхемОбъект = Справочники.СкриптыУсловийСхемДляКомплексныхПроцессов.СоздатьЭлемент();
	
	СкриптыСхемОбъект.Наименование = НаименованиеСкрипта;
	СкриптыСхемОбъект.Выражение = ВыражениеСкрипта;
	СкриптыСхемОбъект.ХешВыражения = ХешВыржаения;
	СкриптыСхемОбъект.ДатаСоздания = ТекущаяДатаСеанса();
	СкриптыСхемОбъект.ДатаИзменения = СкриптыСхемОбъект.ДатаСоздания;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(СкриптыСхемОбъект);
	
	Возврат СкриптыСхемОбъект.Ссылка;	
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает действие для схемы процесса в виде XDTO объекта, по 
// XDTO действия схемы комплексного процесса.
// 
// Параметры:
//  ДействиеXDTOДляКП - ОбъектXDTO - XDTO действия схемы комплексного процесса
// 
// Возвращаемое значение:
//  ОбъектXDTO
//
Функция ДействиеXDTOДляСхемыПроцесса(ДействиеXDTOДляКП)
	
	СхемаСШаблоном = СериализаторXDTO.ЗаписатьXDTO(
		Справочники.СхемыПроцессов.ПолучитьМакет("ШаблонЭлементаДействие"));
	
	ДействиеXDTO = Неопределено;
	Для Каждого ЭлементШаблон Из СхемаСШаблоном.item Цикл
		Если ЭлементШаблон.itemType = 9 Тогда
			ДействиеXDTO = ЭлементШаблон;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПереносимыеРеквизиты =
		"itemId,
		|itemCode,
		|itemTabOrder,
		|rectLeft,
		|rectRight,
		|rectTop,
		|rectBottom,
		|zOrder,
		|groupNum,
		|pointUUID,
		|currentLanguage";
	
	ЗаполнитьЗначенияСвойств(ДействиеXDTO, ДействиеXDTOДляКП, ПереносимыеРеквизиты);
	
	ДействиеXDTO.itemTitle.item[0].lang = ДействиеXDTOДляКП.itemTitle.item[0].lang;
	ДействиеXDTO.itemTitle.item[0].content = ДействиеXDTOДляКП.itemTitle.item[0].content;
	
	ДействиеXDTO.point[0].x = ДействиеXDTOДляКП.point[0].x;
	ДействиеXDTO.point[0].y = ДействиеXDTOДляКП.point[0].y;
	ДействиеXDTO.point[1].x = ДействиеXDTOДляКП.point[1].x;
	ДействиеXDTO.point[1].y = ДействиеXDTOДляКП.point[1].y;
	ДействиеXDTO.point[2].x = ДействиеXDTOДляКП.point[2].x;
	ДействиеXDTO.point[2].y = ДействиеXDTOДляКП.point[2].y;
	ДействиеXDTO.point[3].x = ДействиеXDTOДляКП.point[3].x;
	ДействиеXDTO.point[3].y = ДействиеXDTOДляКП.point[3].y;
	
	Возврат ДействиеXDTO;
	
КонецФункции

// Возвращает вложенный процесс для схемы процесса в виде XDTO объекта, по 
// XDTO вложенного процесса по схеме комплексного процесса.
// 
// Параметры:
//  ДействиеXDTOДляКП - ОбъектXDTO - XDTO вложенного процесса схемы комплексного процесса
// 
// Возвращаемое значение:
//  ОбъектXDTO
//
Функция ВложенныйПроцессXDTOДляСхемыПроцесса(ВложенныйПроцессXDTOДляКП)
	
	СхемаСШаблоном = СериализаторXDTO.ЗаписатьXDTO(
		Справочники.СхемыПроцессов.ПолучитьМакет("ШаблонЭлементаВложенныйПроцесс"));
	
	ВложенныйПроцессXDTO = Неопределено;
	Для Каждого ЭлементШаблон Из СхемаСШаблоном.item Цикл
		Если ЭлементШаблон.itemType = 9 Тогда
			ВложенныйПроцессXDTO = ЭлементШаблон;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПереносимыеРеквизиты =
		"itemId,
		|itemCode,
		|itemTabOrder,
		|rectLeft,
		|rectRight,
		|rectTop,
		|rectBottom,
		|zOrder,
		|groupNum,
		|pointUUID,
		|currentLanguage";
	
	ЗаполнитьЗначенияСвойств(ВложенныйПроцессXDTO, ВложенныйПроцессXDTOДляКП, ПереносимыеРеквизиты);
	
	ВложенныйПроцессXDTO.itemTitle.item[0].lang = ВложенныйПроцессXDTOДляКП.itemTitle.item[0].lang;
	
	ВложенныйПроцессXDTO.itemTitle.item[0].content = 
		ВложенныйПроцессXDTOДляКП.itemTitle.item[0].content;
	
	ВложенныйПроцессXDTO.point[0].x = ВложенныйПроцессXDTOДляКП.point[0].x;
	ВложенныйПроцессXDTO.point[0].y = ВложенныйПроцессXDTOДляКП.point[0].y;
	ВложенныйПроцессXDTO.point[1].x = ВложенныйПроцессXDTOДляКП.point[1].x;
	ВложенныйПроцессXDTO.point[1].y = ВложенныйПроцессXDTOДляКП.point[1].y;
	ВложенныйПроцессXDTO.point[2].x = ВложенныйПроцессXDTOДляКП.point[2].x;
	ВложенныйПроцессXDTO.point[2].y = ВложенныйПроцессXDTOДляКП.point[2].y;
	ВложенныйПроцессXDTO.point[3].x = ВложенныйПроцессXDTOДляКП.point[3].x;
	ВложенныйПроцессXDTO.point[3].y = ВложенныйПроцессXDTOДляКП.point[3].y;
	
	Возврат ВложенныйПроцессXDTO;
	
КонецФункции

#КонецОбласти

#КонецЕсли