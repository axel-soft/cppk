#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет уведомление.
//
// Параметры:
//  ТемаУведомления     - Строка                                      - Текст уведомления, которая будет показана в списке уведомлений.
//  ТекстУведомления    - Строка                                      - Текст уведомления, который будет показан в карточке уведомлений.
//  ТекстОповещения     - Строка                                      - Текст уведомления, который будет показан в заголовке всплывающего оповещения.
//  ПояснениеОповещения - Строка                                      - Текст уведомления, который будет показан в пояснении всплывающего оповещения.
//  ВидУведомления      - ПеречислениеСсылка.ВидыУведомленийПрограммы - Вид уведомления.
//  Пользователь        - СправочникСсылка.Пользователи               - Получатель уведомления.
//  ПредметУведомления  - ОпределяемыйТип.ОбъектУведомления           - Предмет уведомления.
//  Расшифровывать      - Булево                                      - Расшировывать (открывать форму уведомления) при выборе уведомления в списке уведомлений.
//
Процедура Добавить(ТемаУведомления, ТекстУведомления, 
	ТекстОповещения, ПояснениеОповещения, ВидУведомления, 
	Пользователь, ПредметУведомления, Расшифровывать = Ложь) Экспорт
	
	НовоеУведомление = СоздатьЭлемент();
	
	НовоеУведомление.КраткоеОписание = ТемаУведомления;
	НовоеУведомление.Описание = ТекстУведомления;
	НовоеУведомление.ТекстОповещения = ТекстОповещения;
	НовоеУведомление.ПояснениеОповещения = ПояснениеОповещения;
	НовоеУведомление.ВидУведомления = ВидУведомления;
	НовоеУведомление.Пользователь = Пользователь;
	НовоеУведомление.Объект = ПредметУведомления;
	НовоеУведомление.Расшифровывать = Расшифровывать;
	
	НовоеУведомление.Дата = ТекущаяДатаСеанса();
	
	НовоеУведомление.Записать();
	
КонецПроцедуры

// Получает данные уведомлений для текущего пользователя
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Данные уведомлений.
//
Функция ДанныеУведомлений() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УведомленияОкном.Уведомление КАК Уведомление,
		|	ВЫБОР
		|		КОГДА УведомленияОкном.Расшифровывать
		|			ТОГДА УведомленияОкном.Уведомление
		|		ИНАЧЕ УведомленияОкном.Объект
		|	КОНЕЦ КАК Предмет,
		|	УведомленияОкном.КраткоеОписание КАК КраткоеОписание,
		|	УведомленияОкном.ВидУведомления КАК ВидУведомления,
		|	УведомленияПрограммы.ТекстОповещения КАК ТекстОповещения,
		|	УведомленияПрограммы.ПояснениеОповещения КАК ПояснениеОповещения,
		|	УведомленияПрограммы.Описание КАК Описание
		|ИЗ
		|	РегистрСведений.УведомленияОкном КАК УведомленияОкном
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УведомленияПрограммы КАК УведомленияПрограммы
		|		ПО УведомленияОкном.Уведомление = УведомленияПрограммы.Ссылка
		|ГДЕ
		|	УведомленияОкном.Просмотрено = ЛОЖЬ
		|	И УведомленияОкном.ОтборПользователь = &Пользователь");
	
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	ДанныеУведомлений = Запрос.Выполнить().Выгрузить();
	Для Каждого ДанныеУведомления Из ДанныеУведомлений Цикл
		
		Если Не ЗначениеЗаполнено(ДанныеУведомления.ТекстОповещения) Тогда
			ДанныеУведомления.ТекстОповещения =
				?(ДанныеУведомления.ВидУведомления = Перечисления.ВидыУведомленийПрограммы.Ошибка,
					НСтр("ru = 'Уведомление об ошибке'"),
					НСтр("ru = 'Уведомление'"));
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеУведомления.ПояснениеОповещения) Тогда
			ДанныеУведомления.ПояснениеОповещения = ДанныеУведомления.КраткоеОписание;
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеУведомлений.Колонки.Удалить("КраткоеОписание");
	ДанныеУведомлений.Колонки.Удалить("Описание");
	
	Возврат ДанныеУведомлений;
	
КонецФункции

// Отмечает просмотр уведомления.
//
// Параметры:
//  УведомлениеПрограммы - СправочникСсылка.УведомленияПрограммы - Уведомление программы.
//
Процедура ОтметитьПросмотр(УведомлениеПрограммы) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.УведомленияПрограммы");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", УведомлениеПрограммы);
		Блокировка.Заблокировать();
		
		УведомлениеПрограммыОбъект = УведомлениеПрограммы.ПолучитьОбъект();
		Если Не УведомлениеПрограммыОбъект.Просмотрено Тогда
			УведомлениеПрограммыОбъект.Просмотрено = Истина;
			УведомлениеПрограммыОбъект.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Отмечает просмотр всех уведомлений.
//
Процедура ОтметитьПросмотрВсех() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УведомленияОкном.Уведомление КАК Уведомление
		|ИЗ
		|	РегистрСведений.УведомленияОкном КАК УведомленияОкном
		|ГДЕ
		|	УведомленияОкном.Просмотрено = ЛОЖЬ
		|	И УведомленияОкном.ОтборПользователь = &Пользователь");
	
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОтметитьПросмотр(Выборка.Уведомление);
	КонецЦикла;
	
КонецПроцедуры

// Удаляет порцию устаревших данных.
// 
// Возвращаемое значение:
//  Булево - Истина, если были найдены устаревшие данные, в противном случае Ложь.
// 
Функция УдалитьПорциюУстаревшихДанных() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// в днях
	СрокХраненияУведомленийПрограммы =
		Константы.СрокХраненияУведомленийПрограммы.Получить();
	
	Если СрокХраненияУведомленийПрограммы <= 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ГраницаОчисткиЗаписей = НачалоДня(ТекущаяДатаСеанса())
		- СрокХраненияУведомленийПрограммы * 24 * 3600;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 10000
		|	УведомленияПрограммы.Ссылка
		|ИЗ
		|	Справочник.УведомленияПрограммы КАК УведомленияПрограммы
		|ГДЕ
		|	УведомленияПрограммы.Дата < &Дата");
	
	Запрос.УстановитьПараметр("Дата", ГраницаОчисткиЗаписей);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ОбработаноЗаписей = Выборка.Количество();
	ОбработаноУспешно = 0;
	ОбработаноСОшибками = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СпрОбъект.Удалить();
			ОбработаноУспешно = ОбработаноУспешно + 1;
		
		Исключение
			
			ОбработаноСОшибками = ОбработаноСОшибками + 1;
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Справочник.УведомленияПрограммы удаление'", 
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
	ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Процедура завершена.
				|Обработано записей: %1
				|Из них:
				|	Успешно - %2
				|	С ошибками - %3'"),
			ОбработаноЗаписей, ОбработаноУспешно, ОбработаноСОшибками);
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru='Удаление устаревших данных'"), 
		УровеньЖурналаРегистрации.Информация,
		Метаданные.Справочники.УведомленияПрограммы,, 
		ТекстСообщения);
	
	Возврат Выборка.Количество() > 0;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("ВидУведомления");
	Поля.Добавить("Дата");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаПредставления = НСтр("ru = '%1 от %2'");
	
	СтрокаПредставления = СтрЗаменить(СтрокаПредставления, "%1", Данные.ВидУведомления);
	
	Представление = СтрЗаменить(СтрокаПредставления, "%2", Данные.Дата);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли