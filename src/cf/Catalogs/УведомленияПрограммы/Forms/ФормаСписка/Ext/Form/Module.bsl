#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Элементы.Список.РежимВыбора = Параметры.РежимВыбора;
	
	ПоПользователю = Пользователи.ТекущийПользователь();
	Если Параметры.РежимРаботы = "ПоказУведомлений" Или Не ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ() Тогда
		Элементы.ПоПользователю.Видимость = Ложь;
		Элементы.Пользователь.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.РежимРаботы = "ПоказУведомлений" Тогда
		НужноОтметитьПросмотр = Истина;
		Элементы.ФормаПросмотреть.Видимость = Ложь;
		Элементы.ФормаУстановитьПометкуУдаления.Видимость = Ложь;
		Элементы.ФормаОбновить.Видимость = Ложь;
		Элементы.ФормаСтрокаПоиска.Видимость = Ложь;
		Элементы.ФормаУправлениеПоиском.Видимость = Ложь;
		Элементы.ГруппаКоманднаяПанельНастройки.Видимость = Ложь;
		Элементы.ФормаВывестиСписок.Видимость = Ложь;
		Элементы.ФормаСправка.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ФормаЗакрыть.Видимость = (Параметры.РежимРаботы = "ПоказУведомлений");
	ОтображатьПросмотренные = (Параметры.РежимРаботы <> "ПоказУведомлений");
	
	ОтобразитьУведомленияПоПользователю();
	ОтобразитьУдаленныеУведомления();
	ОтобразитьПросмотренныеУведомления();
	
	МК_НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	Если НужноОтметитьПросмотр Тогда
		ОтметитьПросмотрВсех();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Параметры.РежимРаботы = "ПоказУведомлений" И ИмяСобытия = "ЗакрытьПоказУведомлений" И Открыта() Тогда
		НужноОтметитьПросмотр = Ложь;
		Закрыть();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_УведомленияПрограммы" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОтобразитьУдаленныеУведомления();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПоПользователюПриИзменении(Элемент)
	
	ОтобразитьУведомленияПоПользователю();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Если ТекущиеДанные.ВидУведомления = 2 Тогда
		СсылкаДляПерехода = ТекущиеДанные.Ссылка;
	ИначеЕсли ТекущиеДанные.Расшифровывать Тогда
		СсылкаДляПерехода = ТекущиеДанные.Ссылка;
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Объект) Тогда
		СсылкаДляПерехода = ТекущиеДанные.Объект;
	Иначе
		СсылкаДляПерехода = ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	ПоказатьЗначение(, СсылкаДляПерехода);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбработкаЗапросаОбновления()
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ОбработатьУдаление();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказыватьУдаленные(Команда)
	
	ОтображатьУдаленныеУведомления = Не ОтображатьУдаленныеУведомления;
	ОтобразитьУдаленныеУведомления();
	
КонецПроцедуры

&НаКлиенте
Процедура Просмотреть(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуУдаления(Команда)
	
	ОбработатьУдаление();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУдаление()
	
	ОбъектыКУдалению = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.Список.ВыделенныеСтроки Цикл
		Если ТипЗнч(ВыделеннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(ВыделеннаяСтрока);
		Если ДанныеСтроки <> Неопределено Тогда
			ОбъектыКУдалению.Добавить(ДанныеСтроки.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияДокументооборотКлиент.УстановитьПометкуУдаления(ОбъектыКУдалению);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОтобразитьУдаленныеУведомления()
	
	Если ОтображатьУдаленныеУведомления Тогда
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	УведомленияОкномПереопределяемый.Ссылка,
			|	УведомленияОкномПереопределяемый.ПометкаУдаления,
			|	УведомленияОкномПереопределяемый.КраткоеОписание,
			|	УведомленияОкномПереопределяемый.Объект,
			|	УведомленияОкномПереопределяемый.Пользователь,
			|	ВЫБОР
			|		КОГДА УведомленияОкномПереопределяемый.ВидУведомления = ЗНАЧЕНИЕ(Перечисление.ВидыУведомленийПрограммы.Ошибка)
			|			ТОГДА 2
			|		КОГДА
			|			УведомленияОкномПереопределяемый.ВидУведомления = ЗНАЧЕНИЕ(Перечисление.ВидыУведомленийПрограммы.Предупреждение)
			|			ТОГДА 1
			|		КОГДА УведомленияОкномПереопределяемый.ВидУведомления = ЗНАЧЕНИЕ(Перечисление.ВидыУведомленийПрограммы.Информация)
			|			ТОГДА 0
			|		ИНАЧЕ -1
			|	КОНЕЦ КАК ВидУведомления,
			|	УведомленияОкномПереопределяемый.Дата,
			|	УведомленияОкномПереопределяемый.Просмотрено,
			|	УведомленияОкномПереопределяемый.Расшифровывать
			|ИЗ
			|	Справочник.УведомленияПрограммы КАК УведомленияОкномПереопределяемый
			|{ГДЕ
			|	(УведомленияОкномПереопределяемый.Пользователь = &Пользователь),
			|	(УведомленияОкномПереопределяемый.Просмотрено = &ОтображатьПросмотренные)}";
		ОсновнаяТаблица = "Справочник.УведомленияПрограммы";
	Иначе
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	УведомленияОкномПереопределяемый.Уведомление КАК Ссылка,
			|	ЛОЖЬ КАК ПометкаУдаления,
			|	УведомленияОкномПереопределяемый.КраткоеОписание,
			|	УведомленияОкномПереопределяемый.Объект,
			|	УведомленияОкномПереопределяемый.Пользователь,
			|	ВЫБОР
			|		КОГДА УведомленияОкномПереопределяемый.ВидУведомления = ЗНАЧЕНИЕ(Перечисление.ВидыУведомленийПрограммы.Ошибка)
			|			ТОГДА 2
			|		КОГДА
			|			УведомленияОкномПереопределяемый.ВидУведомления = ЗНАЧЕНИЕ(Перечисление.ВидыУведомленийПрограммы.Предупреждение)
			|			ТОГДА 1
			|		КОГДА УведомленияОкномПереопределяемый.ВидУведомления = ЗНАЧЕНИЕ(Перечисление.ВидыУведомленийПрограммы.Информация)
			|			ТОГДА 0
			|		ИНАЧЕ -1
			|	КОНЕЦ КАК ВидУведомления,
			|	УведомленияОкномПереопределяемый.Дата,
			|	УведомленияОкномПереопределяемый.Просмотрено,
			|	УведомленияОкномПереопределяемый.Расшифровывать
			|ИЗ
			|	РегистрСведений.УведомленияОкном КАК УведомленияОкномПереопределяемый
			|{ГДЕ
			|	(УведомленияОкномПереопределяемый.ОтборПользователь = &Пользователь),
			|	(УведомленияОкномПереопределяемый.Просмотрено = &ОтображатьПросмотренные)}";
		ОсновнаяТаблица = "РегистрСведений.УведомленияОкном";
	КонецЕсли;
	
	Если Список.ОсновнаяТаблица <> ОсновнаяТаблица Или Список.ТекстЗапроса <> ТекстЗапроса Тогда
		СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
		СвойстваСписка.ОсновнаяТаблица = ОсновнаяТаблица;
		СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
		СвойстваСписка.ТекстЗапроса = ТекстЗапроса;
		ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Список, СвойстваСписка);
	КонецЕсли;
	
	Элементы.ФормаПоказыватьУдаленные.Пометка = ОтображатьУдаленныеУведомления;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьУведомленияПоПользователю()
	
	Если ЗначениеЗаполнено(ПоПользователю) Тогда
		Список.Параметры.УстановитьЗначениеПараметра("Пользователь", ПоПользователю);
	ИначеЕсли Не ЗначениеЗаполнено(ПоПользователю) И Не ОтображатьУдаленныеУведомления Тогда
		Список.Параметры.УстановитьЗначениеПараметра("Пользователь", ПоПользователю);
	Иначе
		ПараметрПользователь = 
			Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Пользователь"));
		ПараметрПользователь.Использование = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтметитьПросмотрВсех()
	
	Справочники.УведомленияПрограммы.ОтметитьПросмотрВсех();
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьПросмотренныеУведомления()
	
	Если ОтображатьПросмотренные Тогда
		ПараметрОтображатьПросмотренные = 
			Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ОтображатьПросмотренные"));
		ПараметрОтображатьПросмотренные.Использование = Ложь;
	Иначе
		Список.Параметры.УстановитьЗначениеПараметра("ОтображатьПросмотренные", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Список.УсловноеОформление.Элементы.Очистить();
	
	// Непросмотренные элементы.
	Если Параметры.РежимРаботы <> "ПоказУведомлений" Тогда
		
		Элемент = Список.УсловноеОформление.Элементы.Добавить();
		
		Поля = Элемент.Поля.Элементы;
		Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("Описание");
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Просмотрено");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		Элемент.Оформление.УстановитьЗначениеПараметра(
			"Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина));
		
	КонецЕсли;
	
	// Помеченные на удаление элементы.
	Элемент = Список.УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , , , , Истина));
	
КонецПроцедуры

&НаСервере
Процедура МК_НастроитьЭлементыФормы()
	
	Если Не ПараметрыСеанса.ЭтоМобильныйКлиент Тогда
		Возврат;
	КонецЕсли;
	
	МК.ПреобразоватьКнопкуВАкцентную(ЭтотОбъект,
		МК_ПовтИсп.ЭлементыСтиля(),
		Элементы.ФормаЗакрыть);

	// Скроем команды.
	Элементы.ФормаПросмотреть.Видимость = Ложь;
	Элементы.СписокКонтекстноеМенюПросмотреть.Видимость = Ложь;
	Элементы.ФормаУстановитьПометкуУдаления.Видимость = Ложь;
	Элементы.ФормаОбновить.Видимость = Ложь;
	Элементы.Список.Шапка = Ложь;
	
	// Настроим положение поиска.
	Элементы.Список.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.Авто;
	Элементы.Переместить(Элементы.ФормаСтрокаПоиска, Элементы.Список.КоманднаяПанель);
	Элементы.Переместить(Элементы.ФормаУправлениеПоиском, Элементы.Список.КоманднаяПанель);
	
	// Настроим колнки списка.
	Элементы.Описание.Высота = 2;
	Элементы.ГруппаДатаИПользователь.Группировка = ГруппировкаКолонок.Вертикальная;
	
КонецПроцедуры

#КонецОбласти