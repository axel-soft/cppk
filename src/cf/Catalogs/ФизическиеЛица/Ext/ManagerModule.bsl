#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Выполняет поиск подобных физических лиц по полному имени.
// В результат включаются подобные физ. лица по фамилии, по фалимии и имени, по ФИО.
//
// Параметры:
//  ПолноеИмя - Строка
//
// Возвращаемое значение:
//  Массив
//   * СправочникСсылка.ФизическиеЛица
//
Функция ФизическиеЛицаПоПолномуИмени(ПолноеИмя) Экспорт
	
	ФИОФизлица = ФизическиеЛицаКлиентСервер.ЧастиИмени(ПолноеИмя);
	Фамилия = ФИОФизлица.Фамилия;
	Имя = ФИОФизлица.Имя;
	Отчество = ФИОФизлица.Отчество;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Наименование ПОДОБНО &Фамилия
		|			ИЛИ ФизическиеЛица.Наименование ПОДОБНО &ФамилияИмя
		|			ИЛИ ФизическиеЛица.Наименование ПОДОБНО &ФамилияИмяОтчество";
		
		
	ОбъектМетаданных = Метаданные.Справочники.ФизическиеЛица;
	Если Не МультиязычностьПовтИсп.КонфигурацияИспользуетТолькоОдинЯзык(ОбъектМетаданных.ТабличныеЧасти.Найти("Представления") = Неопределено) Тогда
		
		Если МультиязычностьСервер.ИспользуетсяПервыйДополнительныйЯзык() Тогда
			Запрос.Текст = Запрос.Текст +
				" ИЛИ ФизическиеЛица.НаименованиеЯзык1 ПОДОБНО &Фамилия
		|			ИЛИ ФизическиеЛица.НаименованиеЯзык1 ПОДОБНО &ФамилияИмя
		|			ИЛИ ФизическиеЛица.НаименованиеЯзык1 ПОДОБНО &ФамилияИмяОтчество";
		КонецЕсли;
		
	КонецЕсли;
		
	
	Запрос.УстановитьПараметр("Фамилия", Фамилия);
	Запрос.УстановитьПараметр("ФамилияИмя",Фамилия + ?(ПустаяСтрока(Имя), "", " " + Имя));
	Запрос.УстановитьПараметр("ФамилияИмяОтчество", Фамилия + ?(ПустаяСтрока(Имя), "", " " + Имя) + ?(ПустаяСтрока(Отчество), "", " " + Отчество));
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Представление физ лица с учетом языка
//
// Параметры:
//  Данные - Структура:
// * Наименование - Строка
// * НаименованиеЯзык1 - Строка
// * НаименованиеЯзык2 - Строка
//  СуффиксЯзыка - Например "Язык1", если пустой, то возвращает представление без учета языка
// 
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеФизЛицаСУчетомЯзыка(Данные, СуффиксЯзыка = "") Экспорт
	
	ИмяРеквизитаФИО = "Наименование" + СуффиксЯзыка;
	Возврат Данные[ИмяРеквизитаФИО];
	
КонецФункции

#Область ОбновлениеАдреснойКниги

// Конструктор параметров обновления адресной книги.
//
// Возвращаемое значение:
//	Структура:
//		* ОбновитьДанныеОтображенияОбъекта - Булево - Признак обновления данных отображения.
//
Функция ПараметрыОбновленияАдреснойКниги() Экспорт
	
	ПараметрыОбновленияАдреснойКниги = Новый Структура;
	ПараметрыОбновленияАдреснойКниги.Вставить("ОбновитьДанныеОтображенияОбъекта", Ложь);
	
	Возврат ПараметрыОбновленияАдреснойКниги;
	
КонецФункции

// Устанавливает значения параметров обновления адресной книги по данным объекта.
//
// Параметры:
//	Объект - СправочникОбъект.ФизическиеЛица - Объект, для которго необходимо определить параметры обновления.
//
// Возвращаемое значение:
//	Структура: см. ПараметрыОбновленияАдреснойКниги.
//
Функция ЗначенияПараметровОбновленияАдреснойКнигиПоОбъекту(Объект) Экспорт
	
	ПараметрыОбновленияАдреснойКниги = ПараметрыОбновленияАдреснойКниги();
		
	Если Не РаботаСАдреснойКнигой.ТребуетсяОбновлениеАдреснойКниги(Объект) Тогда
		Возврат ПараметрыОбновленияАдреснойКниги; 
	КонецЕсли;

	Если Не Объект.ЭтоНовый() Тогда
		ПредыдущееНаименование =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "Наименование");
		
		Если ПредыдущееНаименование <> Объект.Наименование Тогда
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОтображенияОбъекта = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыОбновленияАдреснойКниги;

КонецФункции

// Обновляет адресную книгу, согласно установленным параметрам.
//
// Параметры:
//	Объект - СправочникОбъект.ФизическиеЛица - Объект, по данным которого необходимо обновить адресной книги.
//	ПараметрыОбновления - Структура Из КлючИЗначение - см. ПараметрыОбновленияАдреснойКниги.
//
Процедура ОбновитьАдреснуюКнигу(Объект, ПараметрыОбновления) Экспорт
	
	Если ПараметрыОбновления.ОбновитьДанныеОтображенияОбъекта Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Сотрудники.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.Владелец = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Справочники.АдреснаяКнига.ОбновитьДанныеОтображенияПодчиненногоОбъекта(Выборка.Ссылка);
			РегистрыСведений.ОбъектыПоискаВАдреснойКниге.ОбновитьСловаПоискаПоСотруднику(Выборка.Ссылка.ПолучитьОбъект());
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает строку, содержащую перечисление полей доступа через запятую
// Это перечисление используется в дальнейшем для передачи в метод 
// ОбщегоНазначения.ЗначенияРеквизитовОбъекта()
Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат "Ссылка, ЭтоГруппа, ГруппаДоступа";
	
КонецФункции

// Заполняет переданный дескриптор доступа
Процедура ЗаполнитьОсновнойДескриптор(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	Если ЗначениеЗаполнено(ОбъектДоступа.ГруппаДоступа) Тогда
		Строка = ДескрипторДоступа.ФизическиеЛица.Добавить();
		Строка.ГруппаДоступа = ОбъектДоступа.ГруппаДоступа;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак того, что менеджер содержит метод ЗапросДляРасчетаПрав()
// 
Функция ЕстьМетодЗапросДляРасчетаПрав() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает запрос для расчета прав доступа по дескрипторам объекта
// 
// Параметры:
//  
//  Дескрипторы - Массив - массив дескрипторов, чьи права нужно рассчитать
//  ИдОбъекта - Ссылка - идентификатор объекта метаданных, назначенный переданным дескрипторам
//  МенеджерОбъектаДоступа - СправочникМенеджер, ДокументМенеджер - менеджер объекта доступа
// 
// Возвращаемое значение - Запрос - запрос, который выберет права доступа для переданного массива дескрипторов
// 
Функция ЗапросДляРасчетаПрав(Дескрипторы, ИдОбъекта, МенеджерОбъектаДоступа) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СотрудникиВКонтейнерах.Сотрудник КАК Сотрудник,
		|	ИСТИНА КАК Чтение,
		|	МАКСИМУМ(ПраваРолей.Добавление) КАК Добавление,
		|	МАКСИМУМ(ПраваРолей.Изменение) КАК Изменение,
		|	МАКСИМУМ(ПраваРолей.Изменение) КАК Удаление,
		|	МАКСИМУМ(ПраваРолей.ЧтениеБезОграничения) КАК ЧтениеБезОграничения,
		|	МАКСИМУМ(ПраваРолей.ДобавлениеБезОграничения) КАК ДобавлениеБезОграничения,
		|	МАКСИМУМ(ПраваРолей.ИзменениеБезОграничения) КАК ИзменениеБезОграничения
		|ПОМЕСТИТЬ ПраваПоРолям
		|ИЗ
		|	РегистрСведений.ПолномочияСотрудников КАК ПолномочияСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|		ПО ПолномочияСотрудников.Полномочия = ПрофилиГруппДоступаРоли.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваРолей КАК ПраваРолей
		|		ПО ПрофилиГруппДоступаРоли.Роль = ПраваРолей.Роль
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
		|		ПО ПолномочияСотрудников.Владелец = СотрудникиВКонтейнерах.Контейнер
		|ГДЕ
		|	ПраваРолей.ОбъектМетаданных = &Идентификатор
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиВКонтейнерах.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Дескриптор КАК Дескриптор,
		|	ВложенныйЗапрос.Сотрудник КАК Сотрудник,
		|	МАКСИМУМ(ВложенныйЗапрос.Чтение) КАК Чтение,
		|	МАКСИМУМ(ВложенныйЗапрос.Добавление) КАК Добавление,
		|	МАКСИМУМ(ВложенныйЗапрос.Изменение) КАК Изменение,
		|	МАКСИМУМ(ВложенныйЗапрос.Удаление) КАК Удаление,
		|	МАКСИМУМ(ВложенныйЗапрос.УправлениеПравами) КАК УправлениеПравами
		|ПОМЕСТИТЬ НовыеПрава
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДескрипторыДоступаОбъектовФизическиеЛица.Ссылка КАК Дескриптор,
		|		СотрудникиВКонтейнерах.Сотрудник КАК Сотрудник,
		|		ПраваПоРолям.Чтение КАК Чтение,
		|		ПраваПоРолям.Добавление КАК Добавление,
		|		ПраваПоРолям.Изменение КАК Изменение,
		|		ПраваПоРолям.Удаление КАК Удаление,
		|		ЛОЖЬ КАК УправлениеПравами
		|	ИЗ
		|		Справочник.ДескрипторыДоступаОбъектов.ФизическиеЛица КАК ДескрипторыДоступаОбъектовФизическиеЛица
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступаФизическихЛиц.Доступ КАК ГруппыДоступаФизическихЛицДоступ
		|			ПО ДескрипторыДоступаОбъектовФизическиеЛица.ГруппаДоступа = ГруппыДоступаФизическихЛицДоступ.Ссылка
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
		|			ПО ГруппыДоступаФизическихЛицДоступ.Участник = СотрудникиВКонтейнерах.Контейнер
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПраваПоРолям КАК ПраваПоРолям
		|			ПО СотрудникиВКонтейнерах.Сотрудник = ПраваПоРолям.Сотрудник
		|	ГДЕ
		|		ДескрипторыДоступаОбъектовФизическиеЛица.Ссылка В (&Дескрипторы)
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ДескрипторыДоступаОбъектовФизическиеЛица.Ссылка,
		|		ПраваПоРолям.Сотрудник,
		|		ПраваПоРолям.Чтение,
		|		ПраваПоРолям.Добавление,
		|		ПраваПоРолям.Изменение,
		|		ПраваПоРолям.Удаление,
		|		ЛОЖЬ
		|	ИЗ
		|		Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДескрипторыДоступаОбъектов.ФизическиеЛица КАК ДескрипторыДоступаОбъектовФизическиеЛица
		|			ПО ДескрипторыДоступаОбъектов.Ссылка = ДескрипторыДоступаОбъектовФизическиеЛица.Ссылка
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПраваПоРолям КАК ПраваПоРолям
		|			ПО ИСТИНА
		|	ГДЕ
		|		ДескрипторыДоступаОбъектов.Ссылка В (&Дескрипторы)
		|		И ДескрипторыДоступаОбъектовФизическиеЛица.Ссылка ЕСТЬ NULL
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ДескрипторыДоступаОбъектов.Ссылка,
		|		ПраваПоРолям.Сотрудник,
		|		ПраваПоРолям.ЧтениеБезОграничения,
		|		ПраваПоРолям.ИзменениеБезОграничения,
		|		ПраваПоРолям.ИзменениеБезОграничения,
		|		ПраваПоРолям.ИзменениеБезОграничения,
		|		ЛОЖЬ
		|	ИЗ
		|		Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПраваПоРолям КАК ПраваПоРолям
		|			ПО ИСТИНА
		|	ГДЕ
		|		ДескрипторыДоступаОбъектов.Ссылка В (&Дескрипторы)
		|		И ПраваПоРолям.ЧтениеБезОграничения) КАК ВложенныйЗапрос
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Дескриптор,
		|	ВложенныйЗапрос.Сотрудник");
	
	ДокументооборотПраваДоступа.ДополнитьТекстЗапросаПоПравам(Запрос.Текст);
	
	Возврат Запрос;
	
КонецФункции

// Заполняет протокол расчета прав дескрипторов
// 
// Параметры:
//  
//  ПротоколРасчетаПрав - Массив - протокол для заполнения
//  ЗапросПоПравам - Запрос - запрос, который использовался для расчета прав дескрипторов
//  Дескрипторы - Массив - массив дескрипторов, чьи права были рассчитаны
//  
Процедура ЗаполнитьПротоколРасчетаПрав(ПротоколРасчетаПрав, ЗапросПоПравам) Экспорт
	
	Справочники.ДескрипторыДоступаОбъектов.ЗаполнитьПротоколРасчетаПравСтандартно(
		ПротоколРасчетаПрав, ЗапросПоПравам);
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗащитаПерсональныхДанных") Тогда
		МодульЗащитаПерсональныхДанных = ОбщегоНазначения.ОбщийМодуль("ЗащитаПерсональныхДанных");
		МодульЗащитаПерсональныхДанных.ДобавитьКомандуПечатиСогласияНаОбработкуПерсональныхДанных(КомандыПечати);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

// Вернет Истина, у этого объекта метаданных есть функция ПолучитьАдресФото
Функция ЕстьФункцияПолученияФото() Экспорт
	
	Возврат Истина;
	
КонецФункции	

// Прочитать фото и вернуть адрес (навигационную ссылку)
// Параметры:
//  Ссылка - ссылка на справочник, для которого надо показать фото
//  УникальныйИдентификатор - уникальный идентификатор формы, откуда идет вызов
//  ЕстьКартинка - возвращаемое значение - Булево - Истина, если в объекте есть картинка
//
// Возвращаемое значение:
//   Строка - навигационная ссылка - или "", если нет картинки
Функция ПолучитьАдресФото(Ссылка, УникальныйИдентификатор, ЕстьКартинка) Экспорт
	
	Возврат РаботаСФотографиями.ПолучитьНавигационнуюСсылкуРеквизита(Ссылка, УникальныйИдентификатор, ЕстьКартинка);
	
КонецФункции

// Возвращает двоичные данные фото личного физ.лица
//
Функция ПолучитьДвоичныеДанныеФото(ФизЛицо) Экспорт
	
	ДвоичныеДанные = РаботаСФотографиями.ПолучитьДвоичныеДанныеРеквизита(ФизЛицо, "ФайлФотографии");
	Если Не ЗначениеЗаполнено(ДвоичныеДанные) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДвоичныеДанные;
	
КонецФункции

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
КонецПроцедуры

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
    МультиязычностьКлиентСервер.ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка);
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
    МультиязычностьКлиентСервер.ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка);
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
    МультиязычностьСервер.ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка, Метаданные.Справочники.ФизическиеЛица);
КонецПроцедуры

#КонецОбласти


#КонецЕсли
