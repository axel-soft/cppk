#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ПротоколированиеРаботыСотрудников.ЗаписатьОткрытие(Объект.Ссылка);

	УстановитьДоступностьЭлементовПоПравуДоступа();

	Если Объект.Ссылка.Пустая() Тогда
		ЗаголовокФормы = НСтр("ru = 'Подписание (Создание)'");

		Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
			Объект.Ответственный = Сотрудники.ОсновнойСотрудник();
		КонецЕсли;
		
		РаботаСБизнесПроцессами.ЗаполнитьДеревоУчастниковПоПроцессуПодписания(
			УчастникиПроцесса, Объект);
		
	Иначе
		ЗаголовокФормы = СтрШаблон(
			НСтр("ru = 'Подписание ""%1""'"), Объект.НаименованиеБизнесПроцесса);
	КонецЕсли;
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ШаблонПриСозданииНаСервере(ЭтаФорма);
	
	// Инициализация формы механизмом комплексных процессов 
	РаботаСКомплекснымиБизнесПроцессамиСервер.КарточкаШаблонаБизнесПроцессаПриСозданииНаСервере(
		ЭтаФорма, ЗаголовокФормы);
		
	// Инициализация учета времени в сроках задач
	ВестиУчетПлановыхТрудозатратВБизнесПроцессах = ПолучитьФункциональнуюОпцию(
		"ВестиУчетПлановыхТрудозатратВБизнесПроцессах");
	
	// Учет переносов сроков выполнения
	ПереносСроковВыполненияЗадач.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// Отложенный старт.
	СтартПроцессовСервер.КарточкаШаблонаПриСозданииНаСервере(ЭтаФорма);
	
	// Сроки выполнения
	УстановитьУсловноеОформлениеИстекшихСроков();
	СрокиИсполненияПроцессов.КарточкаШаблонаПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// Остальная инициализация формы	
	
	НастроитьОтображениеУсловийДляУчастников(ЭтаФорма);

	Мультипредметность.ШаблонПриСозданииНаСервере(ЭтаФорма, Объект);
		
	// Заполнение трудозатрат
	ЕдиницаТрудозатрат = Константы.ОсновнаяЕдиницаТрудозатрат.Получить();
	ЗаполнитьТрудозатратыНаФорме(ЭтаФорма);
	ЗаполнитьОписаниеТрудозатрат(ЭтаФорма);
	
	// Заголовки команд
	РаботаСБизнесПроцессамиВызовСервера.УстановитьЗаголовкиКомандШаблонаБизнесПроцесса(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.СтандартныеКомандыФормы;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Настроим отображение группы доступности шаблона.
	ШаблоныБизнесПроцессов.НастроитьОбластьДоступностиШаблонов(ЭтаФорма);

	НастроитьФормуДляШаблонаПоУмолчанию();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РаботаСБизнесПроцессамиКлиент.РазвернутьДеревоУчастниковПодписания(
		УчастникиПроцесса, Элементы.УчастникиПроцесса);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ОбновитьТрудозатратыУчастниковПроцесса" И Источник = ЭтаФорма Тогда
		
		ОбновитьТрудозатратыУчастниковПроцессаСервер();	
		ЗаполнитьОписаниеТрудозатрат(ЭтаФорма);
		
	КонецЕсли;
	
	// Сроки выполнения
	СрокиИсполненияПроцессовКлиент.ОбработкаОповещенияПослеПереносаСрока(
		ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	РаботаСБизнесПроцессами.ЗаполнитьДеревоУчастниковПоПроцессуПодписания(
		УчастникиПроцесса, ТекущийОбъект);
		
	// Рабочие группы
	РаботаСРабочимиГруппами.ПриЧтенииНаСервере(ЭтаФорма);
	
	// Формирование исходной рабочей группы.
	Участники = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	ИсходнаяРабочаяГруппа.Очистить();
	Для Каждого Эл Из Участники Цикл

		Строка = ИсходнаяРабочаяГруппа.Добавить();
		//@skip-warning
		Строка.Участник = Эл.Участник;
		Строка.Изменение = Эл.Изменение;

	КонецЦикла;

	МультипредметностьКлиентСервер.ЗаполнитьТаблицуПредметовФормы(Объект);
	ЗаполнитьОписаниеУсловийДляУчастников();
			
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	ПрочитатьДоступностьШаблона();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьПроцессПодписанияПоДеревуУчастников(
		Объект, УчастникиПроцесса);
	
	// Сроки исполнения процессов
	СрокиИсполненияПроцессовКлиент.ПодтвердитьПереносСрокаПроцесса(ЭтаФорма, Отказ, ПараметрыЗаписи);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Отложенный старт.
	СтартПроцессовКлиент.КарточкаШаблонаПередЗаписью(ЭтаФорма);

	РаботаСКомплекснымиБизнесПроцессамиКлиент.ФормаНастройкиДействияПередЗаписью(ЭтаФорма, Отказ);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// Рабочая группа
	РабочаяГруппаТаблицаКоличество = РабочаяГруппаТаблица.Количество();
	Для Инд = 1 По РабочаяГруппаТаблицаКоличество Цикл
		Строка = РабочаяГруппаТаблица[РабочаяГруппаТаблицаКоличество - Инд];
		Если Не ЗначениеЗаполнено(Строка.Участник) Тогда
			РабочаяГруппаТаблица.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;

	НоваяРабочаяГруппа = РабочаяГруппаТаблица.Выгрузить();
	РабочаяГруппаДобавить = Новый Массив;
	РабочаяГруппаУдалить = Новый Массив;
	
	// Формирование списка удаленных участников рабочей группы
	Для Каждого Эл Из ИсходнаяРабочаяГруппа Цикл

		Найден = Ложь;

		Для Каждого Эл2 Из НоваяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник И Эл.Изменение = Эл2.Изменение Тогда

				Найден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Если Не Найден Тогда
			РабочаяГруппаУдалить.Добавить(
				Новый Структура("Участник, Изменение", Эл.Участник, Эл.Изменение));
		КонецЕсли;

	КонецЦикла;	
	
	// Формирование списка добавленных участников рабочей группы
	Для Каждого Эл Из НоваяРабочаяГруппа Цикл

		Найден = Ложь;

		Для Каждого Эл2 Из ИсходнаяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник И Эл.Изменение = Эл2.Изменение Тогда

				Найден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Если Не Найден Тогда
			РабочаяГруппаДобавить.Добавить(
				Новый Структура("Участник, Изменение", Эл.Участник, Эл.Изменение));
		КонецЕсли;

	КонецЦикла;

	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаУдалить", РабочаяГруппаУдалить);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаДобавить", РабочаяГруппаДобавить);
	
	// Учет переноса сроков
	ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(ТекущийОбъект,
		ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	ЗаписатьДоступностьШаблона(ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	Если Объект.ШаблонВКомплексномПроцессе Тогда
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Подписание ""%1""'"), Объект.НаименованиеБизнесПроцесса);
	КонецЕсли;
	ПротоколированиеРаботыСотрудников.ЗаписатьСоздание(Объект.Ссылка,
		ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(Объект.Ссылка);
	
	// Рабочая группа
	РаботаСРабочимиГруппами.ОбъектПослеЗаписиНаСервере(ЭтаФорма, ПараметрыЗаписи);
	
	// Формирование исходной рабочей группы.
	Участники = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	ИсходнаяРабочаяГруппа.Очистить();
	Для Каждого Эл Из Участники Цикл

		Строка = ИсходнаяРабочаяГруппа.Добавить();
		//@skip-warning
		Строка.Участник = Эл.Участник;
		Строка.Изменение = Эл.Изменение;

	КонецЦикла;

	МультипредметностьКлиентСервер.ЗаполнитьТаблицуПредметовФормы(Объект);
	МультипредметностьКлиентСервер.ЗаполнитьОписаниеПредметовШаблона(Объект);
	
	ОбновитьПризнакиИстекшихСроков();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Сроки выполнения
	СрокиИсполненияПроцессовКлиент.ОповеститьОПереносеСроков(ЭтаФорма);
	
	Если Объект.ШаблонВКомплексномПроцессе Тогда
		РаботаСКомплекснымиБизнесПроцессамиКлиент.ОповеститьПослеЗаписиНастройкиДействия(ЭтаФорма);
	КонецЕсли;

	ШаблоныБизнесПроцессовКлиент.ПоказатьОповещениеПослеЗаписиШаблона(ЭтаФорма);

	Оповестить("Запись_ШаблонПроцесса", Объект.Ссылка);
	
	СрокиИсполненияПроцессовКлиентСервер.ЗаполнитьПредставлениеСроковИсполненияВФорме(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияНедоступенДляЗапускаОбработкаНавигационнойСсылки(Элемент,
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ПроверитьДоступностьШаблона();

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРучнойЗапускОбработкаНавигационнойСсылки(Элемент,
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ОчиститьСообщения();
	ПоказатьНезаполненныеПоляНеобходимыеДляСтарта();

КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	СотрудникиКлиент.ВыбратьСотрудникаИзАдреснойКниги(Элемент, Объект.Ответственный);

КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(Объект, "Ответственный", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоИтерацийПриИзменении(Элемент)

	РаботаСБизнесПроцессамиКлиент.КоличествоИтерацийПриИзменении(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СпособПодписанияПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ОбработатьСменуСпособаПодписания(
		Объект.СпособПодписания, УчастникиПроцесса, Элементы.УчастникиПроцесса, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОтложенногоСтартаНажатие(Элемент, СтандартнаяОбработка)

	СтартПроцессовКлиент.ОписаниеОтложенногоСтартаНажатие(ЭтаФорма, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ОписаниеТрудозатратНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьПроцессПодписанияПоДеревуУчастников(
		Объект, УчастникиПроцесса);
		
	ЗаполнитьТрудозатратыНаФорме(ЭтаФорма);	
	
	Настройки = Новый Структура;
	Настройки.Вставить("ЕдиницаИзмеренияТрудозатрат", ЕдиницаТрудозатрат);
	Настройки.Вставить("ВариантМаршрутизацииЗадач", 
		ПредопределенноеЗначение("Перечисление.ВариантыМаршрутизацииЗадач.Последовательно"));
	Настройки.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	Настройки.Вставить("Участники", Новый Массив);
	Настройки.Вставить("ИмяТаблицыИсполнители", "УчастникиТрудозатрат");
	Настройки.Вставить("ИмяРеквизитаОбъекта", "");

	Для Каждого СтрИсполнитель ИЗ УчастникиТрудозатрат Цикл
		
		НазваниеКолонки = НСтр("ru = 'Подписывающий'");
		Если СтрИсполнитель.ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Подписание.ТочкаМаршрута.ОбеспечитьПодписание") Тогда
			НазваниеКолонки = НСтр("ru = 'Обеспечивающий подписание'");
		КонецЕсли;	
	
		ТрудозатратыИсполнителя = РаботаСБизнесПроцессамиКлиент.
			СтруктураСтрокиТрудозатратУчастникаПроцесса(
				НазваниеКолонки,
				"ТрудозатратыПлан",
				СтрИсполнитель.ТрудозатратыПлан,
				СтрИсполнитель.Участник,
				0, // СтрИсполнитель.Шаг
				СтрИсполнитель.НомерСтроки);
		Настройки.Участники.Добавить(ТрудозатратыИсполнителя);
	
	КонецЦикла;
	
	ТрудозатратыОбрабатывающегоРезультатСтрока = РаботаСБизнесПроцессамиКлиент.
		СтруктураСтрокиТрудозатратУчастникаПроцесса(
			НСтр("ru = 'Обрабатывающий результат'"),
			"ТрудозатратыПланОбрабатывающегоРезультат",
			ТрудозатратыПланОбрабатывающегоРезультат,
			ОбрабатывающийРезультат);
	Настройки.Участники.Добавить(ТрудозатратыОбрабатывающегоРезультатСтрока);
	
	РаботаСБизнесПроцессамиКлиент.НастроитьТрудозатратУчастниковПроцесса(ЭтаФорма, Настройки);

КонецПроцедуры

// Шаблоны текста для наименования и описания
&НаКлиенте
Процедура НаименованиеБизнесПроцессаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Если Объект.ШаблонВКомплексномПроцессе Тогда
		РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(
        	ЭтаФорма, "НаименованиеБизнесПроцесса", ПредопределенноеЗначение(
		    "Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессПодписаниеНаименование"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Если Объект.ШаблонВКомплексномПроцессе Тогда
		РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(
        	ЭтаФорма, "Описание", ПредопределенноеЗначение(
		    "Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессПодписаниеОписание"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеБизнесПроцессаАвтоПодбор(Элемент, Текст, ДанныеВыбора,
	ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)

	Если ЗначениеЗаполнено(Текст) И Объект.ШаблонВКомплексномПроцессе Тогда

		ДанныеВыбора = РаботаСШаблонамиТекстовСервер.СформироватьДанныеВыбораШаблона(
			ПараметрыПолученияДанных, ПредопределенноеЗначение(
			"Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессПодписаниеНаименование"));

		Если ДанныеВыбора.Количество() <> 0 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеБизнесПроцессаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Объект.НаименованиеБизнесПроцесса = ВыбранноеЗначение.Шаблон;
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры
// Шаблоны текста для наименования и описания

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_РабочаяГруппаТаблица

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	РаботаСАдреснойКнигойКлиент.ВыбратьУчастникаРабочейГруппы(ЭтаФорма, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание,
	СтандартнаяОбработка)

	РаботаСРабочимиГруппамиКлиент.ДокументРабочаяГруппаУчастникАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникОбработкаВыбора(Элемент, ВыбранноеЗначение,
	СтандартнаяОбработка)

	СотрудникиКлиент.ОбработкаВыбораКонтейнера(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриНачалеРедактирования(Элемент, НоваяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриОкончанииРедактирования(
		ЭтаФорма, Элемент, ОтменаРедактирования);

КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалением(Элемент, Отказ)

	ОписаниеОповещения = Новый ОписаниеОповещения("РабочаяГруппаТаблицаПередУдалениемПродолжение",
		ЭтотОбъект);
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаТаблицаПередУдалением(ЭтаФорма, Отказ,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалениемПродолжение(Результат, Параметры) Экспорт

	ТаблицаРГ = Элементы.РабочаяГруппаТаблица;
	Для Каждого Индекс Из ТаблицаРГ.ВыделенныеСтроки Цикл
		РабочаяГруппаТаблица.Удалить(ТаблицаРГ.ДанныеСтроки(Индекс));
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_УчастникиПроцесса

// События таблицы УчастникиПроцесса

&НаКлиенте
Процедура УчастникиПроцессаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ТипСтроки_УчастникЭтапаПодписания = 
		РаботаСБизнесПроцессамиКлиентСервер.ТипСтроки_УчастникЭтапаПодписания();
	
	ТипСтроки_ПодписатьСУчастником = 
		РаботаСБизнесПроцессамиКлиентСервер.ТипСтроки_ПодписатьСУчастником();
	
	Если ТекущиеДанные.ТипСтроки = ТипСтроки_УчастникЭтапаПодписания
		Или ТекущиеДанные.ТипСтроки = ТипСтроки_ПодписатьСУчастником Тогда
		
		МультипредметностьКлиент.УстановкаАлгоритмаПроверки(
			МультипредметностьКлиентСервер.ПолучитьМассивИменПредметовОбъекта(Объект),
			Элементы.УчастникиПроцесса, Поле, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПроцессаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа,
	Параметр)

	Отказ = Истина;
	РаботаСБизнесПроцессамиКлиент.ОбработатьДобавлениеВДеревоУчастниковПодписания(
		УчастникиПроцесса, Элементы.УчастникиПроцесса, Объект.СпособПодписания,
		ИспользоватьДатуИВремяВСрокахЗадач, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура УчастникиПроцессаПередНачаломИзменения(Элемент, Отказ)
	
	ДополнениеТипа = Новый ОписаниеТипов(
		"СправочникСсылка.ПолныеРоли, СправочникСсылка.АвтоподстановкиДляПроцессов");
	
	ИменаПредметов = МультипредметностьКлиентСервер.ПолучитьМассивИменПредметовОбъекта(Объект);
	
	РаботаСБизнесПроцессамиКлиент.ОбработатьНачалоРедактированияВДеревеУчастниковПодписания(
		Элементы.УчастникиПроцесса, Объект.СпособПодписания, ДополнениеТипа,
		Отказ, ЭтаФорма, ИменаПредметов);

КонецПроцедуры

&НаКлиенте
Процедура УчастникиПроцессаПередУдалением(Элемент, Отказ)

	Отказ = Истина;
	РаботаСБизнесПроцессамиКлиент.ОбработатьУдалениеВДеревеУчастниковПодписания(
		УчастникиПроцесса, Элементы.УчастникиПроцесса, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура УчастникиПроцессаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Истина;
	РаботаСБизнесПроцессамиКлиент.ОбработатьПодборУчастниковПодписанияВДерево(
		УчастникиПроцесса, Элементы.УчастникиПроцесса, ВыбранноеЗначение,
		ИспользоватьДатуИВремяВСрокахЗадач, ЭтаФорма);
	
КонецПроцедуры

// События поля ЭтапУчастник_Представление

&НаКлиенте
Процедура ЭтапУчастник_ПредставлениеПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ОбновитьСрокиИсполненияОтложенно("УчастникиПроцесса");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапУчастник_ПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСБизнесПроцессамиКлиент.ОбработатьОчисткуУчастникаПодписанияВДереве(
		Элементы.УчастникиПроцесса);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапУчастник_ПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСБизнесПроцессамиКлиент.ОбработатьОткрытиеУчастникаПодписанияИзДереве(
		Элементы.УчастникиПроцесса);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапУчастник_ПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ОбработатьВыборУчастникаПодписанияВДереве(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	ОбновитьСрокиИсполненияОтложенно("УчастникиПроцесса");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапУчастник_ПредставлениеАвтоПодбор(Элемент, Текст, ДанныеВыбора,
	ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДополнениеТипа = Новый ОписаниеТипов(
		"СправочникСсылка.ПолныеРоли, СправочникСсылка.АвтоподстановкиДляПроцессов");	
	РаботаСБизнесПроцессамиКлиент.ОбработатьАвтоподборУчастникаПодписанияВДереве(
		Текст, СтандартнаяОбработка, ДанныеВыбора, ДополнениеТипа);

КонецПроцедуры

&НаКлиенте
Процедура ЭтапУчастник_ПредставлениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора,
	ПараметрыПолученияДанных, СтандартнаяОбработка)

	ДополнениеТипа = Новый ОписаниеТипов(
		"СправочникСсылка.ПолныеРоли, СправочникСсылка.АвтоподстановкиДляПроцессов");	
	РаботаСБизнесПроцессамиКлиент.ОбработатьАвтоподборУчастникаПодписанияВДереве(
		Текст, СтандартнаяОбработка, ДанныеВыбора, ДополнениеТипа);

КонецПроцедуры

&НаКлиенте
Процедура ЭтапУчастник_ПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнениеТипа = Новый ОписаниеТипов(
		"СправочникСсылка.ПолныеРоли, СправочникСсылка.АвтоподстановкиДляПроцессов");
	
	ИменаПредметов = МультипредметностьКлиентСервер.ПолучитьМассивИменПредметовОбъекта(Объект);
	
	РаботаСБизнесПроцессамиКлиент.ОбработатьНачалоВыбораУчастникаПодписанияВДереве(
		Элементы.УчастникиПроцесса,
		Объект.СпособПодписания,
		ИменаПредметов,
		ДополнениеТипа);
	
КонецПроцедуры

// События поля СрокИсполненияПредставление

&НаКлиенте
Процедура СрокИсполненияПредставлениеПриИзменении(Элемент)
	
	СрокиИсполненияПроцессовКлиент.ИзменитьСрокПоПредставлениюВДеревеУчастников(
		ЭтаФорма, Элементы.УчастникиПроцесса);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИсполненияПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СрокиИсполненияПроцессовКлиент.ИзменитьСрокВДеревеУчастников(
		ЭтаФорма, Элементы.УчастникиПроцесса, Направление);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИсполненияПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СрокиИсполненияПроцессовКлиент.ВыбратьСрокИсполненияДляСтрокиДереваУчастников(
		ЭтаФорма, Элементы.УчастникиПроцесса, УчастникиПроцесса);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредметы

&НаКлиенте
Процедура ПредметыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	МультипредметностьКлиент.ПредметыШаблонаИзменитьПредмет(ЭтаФорма, Объект, ВыбраннаяСтрока,
		СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПредметыПриАктивизацииСтроки(Элемент)

	ПодключитьОбработчикОжидания("ПредметыПриАктивизацииСтрокиОтложенно", 0.2, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПредметыПриАктивизацииСтрокиОтложенно()

	МультипредметностьКлиент.ПредметыШаблонаПриАктивизацииСтроки(ЭтаФорма, Объект);

КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	МультипредметностьКлиент.ПредметыШаблонаПередНачаломДобавления(ЭтаФорма, Объект, Отказ,
		Копирование);

КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;

	ВыбраннаяСтрока = Элементы.Предметы.ТекущаяСтрока;
	Если ВыбраннаяСтрока <> Неопределено Тогда
		МультипредметностьКлиент.ПредметыШаблонаИзменитьПредмет(ЭтаФорма, Объект, ВыбраннаяСтрока);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередУдалением(Элемент, Отказ)

	МультипредметностьКлиент.ПредметыПередУдалением(ЭтаФорма, Объект, Отказ, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПредметыПослеУдаления(Элемент)

	МультипредметностьКлиентСервер.УстановитьДоступностьКнопокУправленияПредметами(ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ТочкиМаршрута

&НаКлиенте
Процедура ТочкиМаршрутаПриИзменении(Элемент)

	МультипредметностьКлиент.ТочкиМаршрутаПриИзменении(ЭтаФорма, Объект, Элемент);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУсловияЗапретаВыполнения

&НаКлиенте
Процедура УсловияЗапретаВыполненияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ШаблоныБизнесПроцессовКлиент.УсловияЗапретаВыполненияВыбор(ЭтаФорма, Поле, СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)

	РаботаСБизнесПроцессамиКлиент.ЗаписатьИЗакрыть(Команда, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПредметыДобавитьВспомогательный(Команда)

	МультипредметностьКлиент.ПредметыДобавитьВспомогательный(ЭтаФорма, Объект, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ПредметыДобавитьЗаполняемый(Команда)

	МультипредметностьКлиент.ПредметыДобавитьЗаполняемый(ЭтаФорма, Объект, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ПредметыДобавитьОсновной(Команда)

	МультипредметностьКлиент.ПредметыДобавитьОсновной(ЭтаФорма, Объект, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ПредметыИзменитьПредмет(Команда)

	ВыбраннаяСтрока = Элементы.Предметы.ТекущаяСтрока;
	Если ВыбраннаяСтрока <> Неопределено Тогда
		МультипредметностьКлиент.ПредметыШаблонаИзменитьПредмет(ЭтаФорма, Объект, ВыбраннаяСтрока);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПредметыИзменитьРоль(Команда)

	ВыбраннаяСтрока = Элементы.Предметы.ТекущаяСтрока;
	Если ВыбраннаяСтрока <> Неопределено Тогда
		МультипредметностьКлиент.ИзменитьРольПредмета(ЭтаФорма, Объект, ВыбраннаяСтрока, Ложь);
		МультипредметностьКлиент.ПредметыШаблонаПриАктивизацииСтроки(ЭтаФорма, Объект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУчастниковРабочейГруппы(Команда)

	РаботаСАдреснойКнигойКлиент.ПодобратьУчастниковРабочейГруппы(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)

	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ЗаполнитьПоУмолчанию(Команда)

	ЗаполнитьОбъектПоУмолчанию();
	РаботаСРабочимиГруппамиКлиент.ОчиститьРабочуюГруппу(ЭтаФорма);
	
	РаботаСБизнесПроцессамиКлиент.РазвернутьДеревоУчастниковПодписания(
		УчастникиПроцесса, Элементы.УчастникиПроцесса);

	ОбновитьСрокиИсполненияНаСервере();

	ОтключитьДоступностьШаблона();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_УчастникиПроцесса

&НаКлиенте
Процедура ДобавитьЭтапПодписания(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ДобавитьСтрокуЭтапаПодписания(
		УчастникиПроцесса, Элементы.УчастникиПроцесса, Объект.СпособПодписания);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУчастникаПодписания(Команда)

	РаботаСБизнесПроцессамиКлиент.ДобавитьСтрокуУчастникаПодписанияДляТекущегоРодителя(
		УчастникиПроцесса, Элементы.УчастникиПроцесса, Объект.СпособПодписания,
		ИспользоватьДатуИВремяВСрокахЗадач, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)
	
	ДополнениеТипа = Новый ОписаниеТипов(
		"СправочникСсылка.ПолныеРоли, СправочникСсылка.АвтоподстановкиДляПроцессов");
	
	ИменаПредметов = МультипредметностьКлиентСервер.ПолучитьМассивИменПредметовОбъекта(Объект);
	
	РаботаСБизнесПроцессамиКлиент.ПодборатьУчастниковПодписанияВДерево(
		УчастникиПроцесса, Элементы.УчастникиПроцесса, ДополнениеТипа, ИменаПредметов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьУчастникаВверх(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ОбработатьПеремещениеСтрокиВДеревеУчастниковПодписания(
		Элементы.УчастникиПроцесса, -1, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьУчастникаВниз(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ОбработатьПеремещениеСтрокиВДеревеУчастниковПодписания(
		Элементы.УчастникиПроцесса, 1, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУсловия(Команда)
	
	Объект.ИспользоватьУсловия = Не Объект.ИспользоватьУсловия;	
	НастроитьОтображениеУсловийДляУчастников(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьТрудозатратыУчастниковПроцессаСервер()
	
	// еще из ТрудозатратыПланОбрабатывающегоРезультат перенести в тч
	
	Для Каждого СтрИсполнитель ИЗ Объект.Участники Цикл
	
		Если СтрИсполнитель.ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Подписание.ТочкаМаршрута.ОбработатьРезультат") Тогда
			
			СтрИсполнитель.ТрудозатратыПлан = ТрудозатратыПланОбрабатывающегоРезультат;
			
		Иначе
			
			ПараметрыОтбора = Новый Структура("Участник", СтрИсполнитель.Участник);		
			СтрНайденные  = УчастникиТрудозатрат.НайтиСтроки(ПараметрыОтбора);
			
			Если СтрНайденные.Количество() <> 0 Тогда
				СтрИсполнитель.ТрудозатратыПлан = СтрНайденные[0].ТрудозатратыПлан;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
	
	РаботаСБизнесПроцессами.ЗаполнитьДеревоУчастниковПоПроцессуПодписания(
		УчастникиПроцесса, Объект);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьТрудозатратыНаФорме(Форма)
	
	Форма.УчастникиТрудозатрат.Очистить();
	
	Для Каждого СтрИсполнитель ИЗ Форма.Объект.Участники Цикл
	
		Если СтрИсполнитель.ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Подписание.ТочкаМаршрута.ОбработатьРезультат") Тогда
			
			Форма.ОбрабатывающийРезультат = СтрИсполнитель.Участник;
			Форма.ТрудозатратыПланОбрабатывающегоРезультат = СтрИсполнитель.ТрудозатратыПлан;
			
		Иначе		
			
			НовСтр = Форма.УчастникиТрудозатрат.Добавить();
			НовСтр.Участник  = СтрИсполнитель.Участник;
			НовСтр.ТрудозатратыПлан  = СтрИсполнитель.ТрудозатратыПлан;
			НовСтр.НомерСтроки  = СтрИсполнитель.НомерСтроки;
			НовСтр.ТочкаМаршрута  = СтрИсполнитель.ТочкаМаршрута;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьОписаниеТрудозатрат(Форма)

	ПараметрыОписания = Новый Структура;
	
	ПараметрыОписания.Вставить("Исполнители", Истина);
	ПараметрыОписания.Вставить("ПредставлениеИсполнителей", "Подписывающие");
	
	ПараметрыОписания.Вставить("ИмяРеквизитаОбъекта", "");
	ПараметрыОписания.Вставить("ИмяТаблицыИсполнители", "УчастникиТрудозатрат");
	ПараметрыОписания.Вставить("ИмяРеквизитаТрудозатратыПланИсполнителя", "ТрудозатратыПлан");
	
	ПараметрыОписания.Вставить("ОбрабатывающийРезультат", Истина);
	
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьОписаниеТрудозатрат(Форма, ПараметрыОписания);

КонецПроцедуры

// Устанавливает доступность элементов формы при ее открытии в зависимости от
// прав доступа к шаблону.
//
&НаСервере
Процедура УстановитьДоступностьЭлементовПоПравуДоступа()

	Если Не Объект.Ссылка.Пустая() И Не ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(
		Объект.Ссылка).Изменение Тогда

		ТолькоПросмотр = Истина;

		Элементы.РабочаяГруппаТаблица.ТолькоПросмотр = Истина;
		Элементы.ТочкиМаршрута.ТолькоПросмотр = Истина;

		Элементы.ФормаЗакрытьФорму.Видимость = Истина;
		Элементы.ФормаЗакрытьФорму.КнопкаПоУмолчанию = Истина;
		Элементы.ФормаЗаписатьИЗакрыть.Видимость = Ложь;
		
		Элементы.УчастникиПроцесса.ТолькоПросмотр = Истина;
		Элементы.Подобрать.Доступность = Ложь;
		Элементы.ДобавитьУчастникаПодписания.Доступность = Ложь;
		Элементы.ДобавитьЭтапПодписания.Доступность = Ложь;
		Элементы.ПереместитьВверх.Доступность = Ложь;
		Элементы.ПереместитьВниз.Доступность = Ложь;
		Элементы.ИспользоватьУсловия.Доступность = Ложь;

	КонецЕсли;

КонецПроцедуры

// Настраивает форму для отображения шаблона по умолчанию.
//
&НаСервере
Процедура НастроитьФормуДляШаблонаПоУмолчанию()

	Элементы.ФормаЗаполнитьПоУмолчанию.Видимость = Ложь;

	Если Объект.Ссылка <> Справочники.ШаблоныПодписания.ПоУмолчанию Тогда
		Возврат;
	КонецЕсли;

	Элементы.Наименование.Видимость = Ложь;
	Элементы.Родитель.Видимость = Ложь;
	Элементы.Комментарий.Видимость = Ложь;
	Элементы.ГруппаКоманды.Видимость = Ложь;
	Элементы.Важность.Видимость = Ложь;
	Элементы.ДобавлятьНаименованиеПредмета.Видимость = Ложь;
	Элементы.ИспользоватьУсловия.Видимость = Ложь;
	Элементы.ОписаниеУсловия.Видимость = Ложь;
	Элементы.ОписаниеТрудозатрат.Видимость = Ложь;
	Элементы.ОписаниеОтложенногоСтарта.Видимость = Ложь;
	Элементы.СпособПодписания.Видимость = Ложь;
	Элементы.ГруппаПараметрыПредметов.Видимость = Ложь;
	Элементы.СтраницаУсловияЗапретаВыполнения.Видимость = Ложь;

	Элементы.ФормаЗаполнитьПоУмолчанию.Видимость = Истина;

КонецПроцедуры

// Заполняет объект шаблона, значениями по умолчанию.
//
&НаСервере
Процедура ЗаполнитьОбъектПоУмолчанию() Экспорт

	ШаблонОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.ШаблоныПодписания"));
	ШаблонОбъект.ЗаполнитьШаблонПоУмолчанию();
	ЗначениеВДанныеФормы(ШаблонОбъект, Объект);
	
	РаботаСБизнесПроцессами.ЗаполнитьДеревоУчастниковПоПроцессуПодписания(
		УчастникиПроцесса, ШаблонОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_УчастникиПроцесса

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьОтображениеУсловийДляУчастников(Форма)
	
	Форма.Элементы.ИспользоватьУсловия.Пометка = Форма.Объект.ИспользоватьУсловия;
	Форма.Элементы.ОписаниеУсловия.Видимость = Форма.Объект.ИспользоватьУсловия;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеУсловийДляУчастников()
	
	СтрокиДляОбработки = Новый Массив;
	
	Для Каждого СтрокаДерева Из УчастникиПроцесса.ПолучитьЭлементы() Цикл
		СтрокиДляОбработки.Добавить(СтрокаДерева);
	КонецЦикла;
	
	ТипСтроки_УчастникЭтапаПодписания = 
		РаботаСБизнесПроцессамиКлиентСервер.ТипСтроки_УчастникЭтапаПодписания();
	
	ТипСтроки_ПодписатьСУчастником = 
		РаботаСБизнесПроцессамиКлиентСервер.ТипСтроки_ПодписатьСУчастником();
	
	Пока СтрокиДляОбработки.Количество() > 0 Цикл
		
		СтрокаДляОбработки = СтрокиДляОбработки[0];
		
		Если СтрокаДляОбработки.ТипСтроки = ТипСтроки_УчастникЭтапаПодписания
			Или СтрокаДляОбработки.ТипСтроки = ТипСтроки_ПодписатьСУчастником Тогда
			
			СтрокаДляОбработки.ОписаниеУсловия =
				МультипредметностьКлиентСервер.ПолучитьТекстОписанияУсловия(
				СтрокаДляОбработки.ИмяПредметаУсловия, СтрокаДляОбработки.Условие);
		Иначе
			Для Каждого ПодчиненнаяСтрока Из СтрокаДляОбработки.ПолучитьЭлементы() Цикл
				СтрокиДляОбработки.Добавить(ПодчиненнаяСтрока);
			КонецЦикла;
		КонецЕсли;
		
		СтрокиДляОбработки.Удалить(0);  
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ПодсистемаСвойств

//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
	НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_СрокиИсполненияПроцессов

// Заполняет представление сроков в карточке процесса
//
&НаСервере
Процедура ОбновитьСрокиИсполненияНаСервере() Экспорт
	
	РассчитатьОтносительныйСрок = Ложь;
	РассчитьтатьТочныйСрок = Ложь;
	
	Смещение = СрокиИсполненияПроцессовКлиентСерверКОРП.СмещенияДатыОтсчетаВКарточке(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.ВладелецШаблона)
		Или ЭтоДействиеШаблонаКомплексногоПроцесса
		Или (ЭтоДействиеКомплексногоПроцессаПоШаблону И Не КомплексныйПроцессСтартован) Тогда
		
		РассчитатьОтносительныйСрок = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаОтсчетаДляРасчетаСроков)
		И (Не КомплексныйПроцессСтартован
			Или ЗначениеЗаполнено(РеквизитТаблицаСИзмененнымСроком)) Тогда
		
		РассчитьтатьТочныйСрок = Истина;
	КонецЕсли;
	
	Если РассчитатьОтносительныйСрок Тогда
		
		СтруктураДляВычисленияДлительности = 
			СрокиИсполненияПроцессов.СтруктураДляВычисленияДлительностиПодписанияПоДаннымВКарточке(
			Объект, УчастникиПроцесса);
		
		ДлительностьПроцесса = СрокиИсполненияПроцессов.ДлительностьИсполненияПроцесса(
			СтруктураДляВычисленияДлительности, Смещение);
			
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ДлительностьПроцесса);
	КонецЕсли;
	
	Если РассчитьтатьТочныйСрок Тогда
		
		ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
		ПараметрыДляРасчетаСроков.ДатаОтсчета = ДатаОтсчетаДляРасчетаСроков;
		ПараметрыДляРасчетаСроков.РеквизитТаблицаСИзмененнымСроком = РеквизитТаблицаСИзмененнымСроком;
		ПараметрыДляРасчетаСроков.ИндексСтроки = ИндексСтрокиСИзмененнымСроком;
		ПараметрыДляРасчетаСроков.Смещение = Смещение;
					
		СтруктураДляРасчета = 
			СрокиИсполненияПроцессов.СтруктураДляРасчетаСрокаПодписанияПоДаннымПроцессаВКарточке(
			Объект, УчастникиПроцесса);				
				
		СрокиИсполненияПроцессов.РассчитатьСрокиПодписания(
			СтруктураДляРасчета, ПараметрыДляРасчетаСроков);
			
		СрокиИсполненияПроцессов.ЗаполнитьСрокиПодписанияВКарточкеПроцессаПоСтруктуреРасчета(
			Объект, УчастникиПроцесса, СтруктураДляРасчета);
		
		СрокиИсполненияПроцессовКОРП.ПроверитьИзменениеСроковВКарточкеШаблонаПроцесса(ЭтаФорма);
	КонецЕсли;
	
	РеквизитТаблицаСИзмененнымСроком = "";
	ИндексСтрокиСИзмененнымСроком = 0;
	
	ОбновитьПризнакиИстекшихСроков();
	СрокиИсполненияПроцессовКлиентСервер.ЗаполнитьПредставлениеСроковИсполненияВФорме(ЭтаФорма);

КонецПроцедуры

// см. ОбновитьСрокиИсполненияНаСервере
&НаКлиенте
Процедура ОбновитьСрокиИсполнения()
	
	ОбновитьСрокиИсполненияНаСервере();

КонецПроцедуры

// см. ОбновитьСрокиИсполнения
&НаКлиенте
Процедура ОбновитьСрокиИсполненияОтложенно(РеквизитТаблица = "", ИндексСтроки = 0) Экспорт
	
	РеквизитТаблицаСИзмененнымСроком = РеквизитТаблица;
	ИндексСтрокиСИзмененнымСроком = ИндексСтроки;

	ПодключитьОбработчикОжидания("ОбновитьСрокиИсполнения", 0.2, Истина);

КонецПроцедуры

// Заполняет представление сроков исполнения в карточке процесса.
//
&НаКлиенте
Процедура ЗаполнитьПредставлениеСроковИсполнения() Экспорт
	
	СрокиИсполненияПроцессовКлиентСервер.ЗаполнитьПредставлениеСроковИсполненияВФорме(ЭтаФорма);

КонецПроцедуры

// Обновляет форму процесса после переноса сроков действий
//
&НаСервере
Процедура ОбновитьФормуПослеПереносаСроковИсполнения() Экспорт

	Прочитать();
	ОбновитьСрокиИсполненияНаСервере();

КонецПроцедуры

// Устанавливает условное оформление истекших сроков.
//
&НаСервере
Процедура УстановитьУсловноеОформлениеИстекшихСроков()

	СрокиИсполненияПроцессов.УстановитьУсловноеОформлениеИстекшегоСрока(
		ЭтаФорма,
		НСтр("ru = 'Срок исполнения истек (Участники)'"),
		"УчастникиПроцесса.СрокИсполненияИстек",
		"СрокИсполненияПредставление");
	
	СрокиИсполненияПроцессов.УстановитьУсловноеОформлениеИстекшегоСрока(
		ЭтаФорма,
		НСтр("ru = 'Срок исполнения процесса истек'"),
		"СрокИсполненияПроцессаИстек",
		"СрокИсполненияПроцессаПредставление");

КонецПроцедуры

// Обновляет признаки истекших сроков в карточке.
//
&НаСервере
Процедура ОбновитьПризнакиИстекшихСроков()

	Если ЗначениеЗаполнено(ДатаОтсчетаДляРасчетаСроков) Тогда
		
		СрокиИсполненияПроцессов.ОбновитьПризнакИстекшихСроковВДеревеУчастников(
			УчастникиПроцесса, ТекущаяДатаСеанса());
		
		СрокиИсполненияПроцессов.ОбновитьПризнакИстекшегоСрокаПроцесса(
			Объект.СрокИсполненияПроцесса, ТекущаяДатаСеанса(), СрокИсполненияПроцессаИстек);
	Иначе
		
		СтрокиДляОбработки = Новый Массив;
		Для Каждого СтрокаУчастника Из УчастникиПроцесса.ПолучитьЭлементы() Цикл
			СтрокиДляОбработки.Добавить(СтрокаУчастника);		
		КонецЦикла;
		Пока СтрокиДляОбработки.Количество() > 0 Цикл
			СтрокаДляОбработки = СтрокиДляОбработки[0];
			СтрокаДляОбработки.СрокИсполненияИстек = Ложь;
			Для Каждого ПодчиненнаяСтрока Из СтрокаДляОбработки.ПолучитьЭлементы() Цикл
				СтрокиДляОбработки.Добавить(ПодчиненнаяСтрока);
			КонецЦикла;
			СтрокиДляОбработки.Удалить(0);
		КонецЦикла;
		
		СрокИсполненияПроцессаИстек = Ложь;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ДоступностьШаблоновПроцессов

// Помещает доступность шаблона процесса в карточку.
//
&НаСервере
Процедура ПрочитатьДоступностьШаблона()

	ШаблоныБизнесПроцессов.ПрочитатьДоступностьШаблона(ЭтаФорма);

КонецПроцедуры

// Записывает доступность шаблона процесса из карточки.
//
// Параметры:
//  ШаблонОбъект - СправочникОбъект.<ИмяШаблонаПроцесса> - объект шаблона процесса.
//
&НаСервере
Процедура ЗаписатьДоступностьШаблона(ШаблонОбъект)

	ШаблоныБизнесПроцессов.ЗаписатьДоступностьШаблонаИзФормы(ШаблонОбъект, ЭтаФорма);

КонецПроцедуры

// Проверяет доступность шаблона и помещает результат в реквизиты
// ДоступенРучнойЗапускПоШаблону, ДоступенАвтоматическийЗапускПоШаблону.
//
&НаСервере
Процедура ПроверитьДоступностьШаблона()

	ШаблоныБизнесПроцессов.ПроверитьДоступностьШаблона(ЭтаФорма);

КонецПроцедуры

// Выводить сообщения пользователю с привязкой к незаполненным полям
// необходимым для старта процессов по шаблону.
//
&НаСервере
Процедура ПоказатьНезаполненныеПоляНеобходимыеДляСтарта()

	ШаблоныБизнесПроцессов.ПоказатьНезаполненныеПоляНеобходимыеДляСтарта(ЭтаФорма);

КонецПроцедуры

// Сбрасывает доступность в карточке шаблона процесса.
//
&НаКлиенте
Процедура ОтключитьДоступностьШаблона()

	ШаблоныБизнесПроцессовКлиент.ОтключитьДоступностьШаблона(ЭтаФорма);

КонецПроцедуры

#КонецОбласти