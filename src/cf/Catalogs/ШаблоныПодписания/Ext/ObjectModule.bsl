#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Проверяет что заполнены поля шаблона
Функция ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта() Экспорт
	
	МассивПолей = Новый Массив;

	ТочкиМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута;

	Если Участники.Найти(ТочкиМаршрута.Подписать) = Неопределено
		И Участники.Найти(ТочкиМаршрута.ОбеспечитьПодписание) = Неопределено Тогда

		МассивПолей.Добавить("Участники");
	КонецЕсли;

	Возврат МассивПолей;
	
КонецФункции

//Формирует текстовое представление бизнес-процесса, создаваемого по шаблону
Функция СформироватьСводкуПоШаблону() Экспорт
	
	Результат = ШаблоныБизнесПроцессов.ПолучитьОбщуюЧастьОписанияШаблона(Ссылка);
	
	Если ЗначениеЗаполнено(НаименованиеБизнесПроцесса) Тогда
		Результат = Результат + НСтр("ru = 'Заголовок'") + ": " + НаименованиеБизнесПроцесса + Символы.ПС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Описание) Тогда
		Результат = Результат + НСтр("ru = 'Описание'") + ": " + Описание + Символы.ПС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Важность) Тогда
		Результат = Результат + НСтр("ru = 'Важность'") + ": " + Строка(Важность) + Символы.ПС;
	КонецЕсли;
	
	// Участники
	
	ТочкиМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута;
	
	Если Участники.Найти(ТочкиМаршрута.Подписать, "ТочкаМаршрута") <> Неопределено
		Или Участники.Найти(ТочкиМаршрута.ОбеспечитьПодписание, "ТочкаМаршрута") <> Неопределено Тогда
		
		Результат = Результат + НСтр("ru = 'Подписывающие'") + ": ";
		
		Для Каждого СтрокаУчастника Из Участники Цикл
			
			Если СтрокаУчастника.ТочкаМаршрута <> ТочкиМаршрута.Подписать
				И СтрокаУчастника.ТочкаМаршрута <> ТочкиМаршрута.ОбеспечитьПодписание Тогда
				
				Продолжить
			КонецЕсли;
			
			Результат = Результат + СтрокаУчастника.Участник + ";" + Символы.ПС;
		КонецЦикла;
		
	КонецЕсли;
	
	ДлительностьПроцесса = СрокиИсполненияПроцессов.ДлительностьИсполненияПроцесса(ЭтотОбъект);
	ДлительностьПроцессаСтрокой = СрокиИсполненияПроцессовКлиентСервер.ПредставлениеДлительности(
		ДлительностьПроцесса.СрокИсполненияПроцессаДни,
		ДлительностьПроцесса.СрокИсполненияПроцессаЧасы,
		ДлительностьПроцесса.СрокИсполненияПроцессаМинуты);
		
	Если ЗначениеЗаполнено(ДлительностьПроцессаСтрокой) Тогда
		Результат = Результат + Нстр("ru = 'Срок'") + ": "
			+ ДлительностьПроцессаСтрокой;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет предопределенный шаблон по умолчанию.
// Предназначена для вызова из предопределенного объекта.
// Если объект не предопределенный, то вызов процедуры приведет к исключению.
//
Процедура ЗаполнитьШаблонПоУмолчанию() Экспорт
	
	Если Ссылка <> Справочники.ШаблоныПодписания.ПоУмолчанию Тогда
		ВызватьИсключение НСтр("ru = 'Процедура ЗаполнитьШаблонПоУмолчанию предназначена для вызова из предопределенного шаблона.'");
	КонецЕсли;
	
	Автор = Справочники.Сотрудники.ПустаяСсылка();
	Важность = Перечисления.ВариантыВажностиОбъектов.Обычная;
	ВладелецШаблона = Неопределено;
	ДобавлятьНаименованиеПредмета = Истина;
	ИспользоватьУсловия = Ложь;
	ИсходныйШаблон = Справочники.ШаблоныПодписания.ПустаяСсылка();
	КоличествоИтераций = 1;
	Комментарий = "";
	КомплексныйПроцесс = БизнесПроцессы.КомплексныйПроцесс.ПустаяСсылка();
	НаименованиеБизнесПроцесса = "";
	Наименование = НСтр("ru = 'По умолчанию'");
	Описание = "";
	
	Ответственный = Сотрудники.ОсновнойСотрудник();
	Если Не Сотрудники.ЭтоПолноправныйСотрудник(Ответственный) Тогда
		Ответственный = Справочники.Сотрудники.ПустаяСсылка();
	КонецЕсли;
		
	СпособПодписания = Перечисления.СпособыПодписанияПредметаПроцесса.ПЭП;
	
	СрокИсполненияПроцесса = Дата(1,1,1);
	
	СрокОтложенногоСтарта = 0;
	
	ШаблонВКомплексномПроцессе = Ложь;
	
	Этапы.Очистить();
	Участники.Очистить();
	
	СтрокаУчастника_ОбработатьРезультат = 
		РаботаСБизнесПроцессами.СтрокаУчастника_ОбработатьРезультатПодписания(ЭтотОбъект);
	СтрокаУчастника_ОбработатьРезультат.ВариантУстановкиСрокаИсполнения = 
		Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
	СтрокаУчастника_ОбработатьРезультат.Участник = 
		Справочники.АвтоподстановкиДляПроцессов.АвторПроцесса;
	
	Предметы.Очистить();
	ПредметыЗадач.Очистить();
	УсловияЗапретаВыполнения.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_ПоддержкаМеханизмаОтсутствий

// Получает исполнителей
Функция ПолучитьИсполнителей() Экспорт
	
	МассивИсполнителей = Новый Массив;
	
	ТочкиМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута;
	
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если СтрокаУчастника.ТочкаМаршрута <> ТочкиМаршрута.Подписать
			И СтрокаУчастника.ТочкаМаршрута <> ТочкиМаршрута.ОбеспечитьПодписание Тогда
			
			Продолжить
		КонецЕсли;
	
		ДанныеИсполнителя = ОтсутствияКлиентСервер.ПолучитьДанныеИсполнителя(
			СтрокаУчастника.Участник);
		МассивИсполнителей.Добавить(ДанныеИсполнителя);
		
	КонецЦикла;
	
	Возврат МассивИсполнителей;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоГруппа Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда 
		ШаблоныБизнесПроцессов.НачальноеЗаполнениеШаблона(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЭтоГруппа Тогда 
		Возврат;
	КонецЕсли;
	
	Если Ссылка <> Справочники.ШаблоныПодписания.ПоУмолчанию Тогда
		ПроверяемыеРеквизиты.Добавить("НаименованиеБизнесПроцесса");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ШаблоныБизнесПроцессов.ШаблонПередЗаписью(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ШаблоныБизнесПроцессов.ПриКопированииШаблонаБизнесПроцесса(ОбъектКопирования);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли