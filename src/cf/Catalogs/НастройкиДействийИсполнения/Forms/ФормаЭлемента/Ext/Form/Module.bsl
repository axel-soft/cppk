
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НастройкиДействий.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	ОбновитьДеревоУчастниковПоОбъекту();
	
	ПредупреждатьПриПереходеНаИсполнениеПоПунктам = 
		ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиБольшеНеПоказывать", "ПоказыватьПредупреждениеПриПереходеНаИсполнениеПоПунктам", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьПредставлениеСроков();
	РазныеСроки = ДействияКлиент.ЗначениеРазныеСрокиРекурсивно(Участники.ПолучитьЭлементы());
	Элементы.УчастникиРазныеСроки.Пометка = РазныеСроки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Объект.Ссылка.Пустая());
	ОбновитьОбъектПоДеревуУчастников(Отказ);
	ДействияКлиент.ОтложенноеНачалоВыполненияПередЗаписью(ЭтотОбъект);
	
	Если ПараметрыЗаписи.Свойство("НеПроверятьУчастников") И ПараметрыЗаписи.НеПроверятьУчастников Тогда
		Возврат;
	КонецЕсли;
	ПроверитьУчастников(Отказ);

	Если Не ЗначениеЗаполнено(Объект.МоментРазыменованияУчастников) Тогда
		Объект.МоментРазыменованияУчастников = ПредопределенноеЗначение("Перечисление.МоментыРазыменованияУчастниковДействий.ПриСозданииДействия");
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	НастройкиДействий.ПриЗаписиНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	НастройкиДействий.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_НастройкиДействий", Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КлючОбщейНастройкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ОбщаяНастройка);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.НастройкиДействияАвторНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.НастройкиДействияАвторОбработкаВыбора(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(Объект, "Автор", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.НастройкиДействияАвторАвтоПодбор(
		ЭтотОбъект, Текст, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта);
		
КонецПроцедуры

&НаКлиенте
Процедура АвторОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.НастройкиДействияАвторОкончаниеВводаТекста(
		ЭтотОбъект, Текст, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.НастройкиДействияКонтролерНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.НастройкиДействияКонтролерОбработкаВыбора(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(Объект, "Контролер", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.НастройкиДействияКонтролерАвтоПодбор(
		ЭтотОбъект, Текст, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта);
		
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.НастройкиДействияКонтролерОкончаниеВводаТекста(
		ЭтотОбъект, Текст, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОтложенногоНачалаВыполненияНажатие(Элемент, СтандартнаяОбработка)
	
	ДействияКлиент.ОписаниеОтложенногоНачалаВыполненияНажатие(ЭтаФорма, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУчастники

&НаКлиенте
Процедура УчастникиПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Элементы.Участники.ТекущиеДанные.ПредставлениеСтроки) Тогда
		НастройкиДействийКлиент.ПредставлениеСтрокиОчистка(ЭтотОбъект, Элемент, Ложь);
	КонецЕсли;
	
	ОбновитьПредставленияВДеревеУчастников(Участники, Объект.ПоПунктам);
	РазвернутьДеревоУчастников();
	ДействияКлиент.УстановитьДоступностьКомандыЗащищенный(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ЕстьОсобоеНаименованиеОписание Тогда
		
		ТекущиеДанные = Участники.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ЭтоЭтап
			Или Элементы.ЕстьОсобоеНаименованиеОписание.ТолькоПросмотр
			Или ТекущиеДанные.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат") Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Наименование", ТекущиеДанные.НаименованиеЗадачи);
		ПараметрыФормы.Вставить("Описание", ТекущиеДанные.Описание);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗавершитьНастройкуОсобогоНаименованияИОписанияИсполнителя", ЭтотОбъект, ТекущиеДанные);
			
		ОткрытьФорму("ОбщаяФорма.РедактированиеОсобогоНаименованияИОписанияЗадачи",
			ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
	
	ИначеЕсли Поле = Элементы.УчастникиЗащищенный Тогда
		
		ДействияКлиент.Защищенный(ЭтотОбъект);

	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры УчастникиВыбор
//
&НаКлиенте
Процедура ЗавершитьНастройкуОсобогоНаименованияИОписанияИсполнителя(
	НаименованиеИОписание, СтрокаУчастника) Экспорт
	
	Если НаименованиеИОписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаУчастника.НаименованиеЗадачи = НаименованиеИОписание.Наименование;
	СтрокаУчастника.Описание = НаименованиеИОписание.Описание;
	
	СтрокаУчастника.ЕстьОсобоеНаименованиеОписание =
		ЗначениеЗаполнено(СтрокаУчастника.НаименованиеЗадачи)
		Или ЗначениеЗаполнено(СтрокаУчастника.Описание);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьЭлементовФормы();
	ДействияКлиент.УчастникиПриАктивизацииСтроки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	НастройкиДействийКлиент.УчастникиПередНачаломДобавления(
		ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа, Параметр);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередУдалением(Элемент, Отказ)
	
	НастройкиДействийКлиент.УчастникиПередУдалением(ЭтотОбъект, Элемент, Отказ);
	ДействияКлиент.УбратьОтветственногоУчастника(ЭтотОбъект);
	ОбновитьПредставленияВДеревеУчастников(Участники, Объект.ПоПунктам);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено
		Или ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	// Определение строки этапа.
	СтрокаЭтапа = Участники.НайтиПоИдентификатору(Элементы.Участники.ТекущаяСтрока);
	Если Не СтрокаЭтапа.ЭтоЭтап Тогда
		СтрокаЭтапа = СтрокаЭтапа.ПолучитьРодителя();
	КонецЕсли;
	
	Если Не СтрокаЭтапа.ЭтоЭтап Тогда
		ВызватьИсключение НСтр("ru = 'Не определена строка этапа'");
	КонецЕсли;
	
	Если СтрокаЭтапа.Функция <> ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.Исполнитель")
		И СтрокаЭтапа.Функция <> ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.Рассматривающий") Тогда
		Возврат;
	КонецЕсли;
	
	УдаленыНекоторыеУчастники = Ложь;
	ДобавленыНовыеУчастники = Ложь;
	
	// Массив выбранных участников с обратной сортировкой.
	ВыбранныеУчастники = Новый Массив;
	ИндексСтроки = ВыбранноеЗначение.Количество() - 1;
	Пока ИндексСтроки >= 0 Цикл
		ВыбранныеУчастники.Добавить(ВыбранноеЗначение[ИндексСтроки]);
		ИндексСтроки = ИндексСтроки - 1;
	КонецЦикла;
	
	// Определение порядка выполнения, сроков и т.д. для новых строк.
	ВариантыУстановкиСрока = СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	ЗначенияКолонокДляНовыхСтрок = Новый Структура;
	ЗначенияКолонокДляНовыхСтрок.Вставить("ВариантУстановкиСрока",
		ВариантыУстановкиСрока.ОтносительныйСрок);
	ЗначенияКолонокДляНовыхСтрок.Вставить("Срок", Дата(1,1,1));
	ЗначенияКолонокДляНовыхСтрок.Вставить("СрокДни", 0);
	ЗначенияКолонокДляНовыхСтрок.Вставить("СрокЧасы", 0);
	ЗначенияКолонокДляНовыхСтрок.Вставить("СрокМинуты", 0);
	ЗначенияКолонокДляНовыхСтрок.Вставить("Функция", СтрокаЭтапа.Функция);
	
	// Удаление неактуальных участников.
	СтрокиУчастников = СтрокаЭтапа.ПолучитьЭлементы();
	ИндексСтроки = СтрокиУчастников.Количество() - 1;
	Пока ИндексСтроки >= 0 Цикл
		
		СтрокаУчастника = СтрокиУчастников[ИндексСтроки];
		
		Если ИндексСтроки = СтрокиУчастников.Количество() - 1 Тогда
			ЗаполнитьЗначенияСвойств(ЗначенияКолонокДляНовыхСтрок, СтрокаУчастника);
		КонецЕсли;
		
		// Пропускаем существующих участников этапа.
		ВыбранныйУчастник = ВыбранныеУчастники.Найти(СтрокаУчастника.Участник);
		Если ВыбранныйУчастник <> Неопределено Тогда
			ВыбранныеУчастники.Удалить(ВыбранныйУчастник);
			ИндексСтроки = ИндексСтроки - 1;
			Продолжить;
		КонецЕсли;
		
		СтрокиУчастников.Удалить(СтрокаУчастника);
		УдаленыНекоторыеУчастники = Истина;
		
		ИндексСтроки = ИндексСтроки - 1;
		
	КонецЦикла;
	
	// Добавление новых участников.
	ИндексСтроки = ВыбранныеУчастники.Количество() - 1;
	Пока ИндексСтроки >= 0 Цикл
		
		ВыбранныйУчастник = ВыбранныеУчастники[ИндексСтроки];
		
		СтрокаУчастника = СтрокиУчастников.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаУчастника, ЗначенияКолонокДляНовыхСтрок);
		СтрокаУчастника.Участник = ВыбранныйУчастник;
		СтрокаУчастника.УсловиеПредставление = СтрокаУчастника.Условие;
		
		ВыбранныеУчастники.Удалить(ИндексСтроки);
		ДобавленыНовыеУчастники = Истина;
		ИндексСтроки = ИндексСтроки - 1;
		
	КонецЦикла;
	
	ДействияКлиент.УбратьОтветственногоУчастника(ЭтотОбъект);
	Если ДобавленыНовыеУчастники Тогда
		ОбновитьПредставленияВДеревеУчастников(Участники, Объект.ПоПунктам);
		РазвернутьДеревоУчастников();
		ЗаполнитьПредставлениеСроков();
	КонецЕсли;
	
	Если УдаленыНекоторыеУчастники Или ДобавленыНовыеУчастники Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Работа с УчастникиПредставлениеСтроки

&НаКлиенте
Процедура ПредставлениеСтрокиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЭтоОбрабатывающийРезультат = Ложь;
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат") Тогда
			ЭтоОбрабатывающийРезультат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ЗаголовокФормы = НСтр("ru = 'Выбор исполнителя'");
	НастройкиДействийКлиент.ПредставлениеСтрокиНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка, ЗаголовокФормы,
		Истина, Не ЭтоОбрабатывающийРезультат, ТипОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиОткрытие(Элемент, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.ПредставлениеСтрокиОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиОчистка(Элемент, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.ПредставлениеСтрокиОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЭтап Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	НастройкиДействийКлиент.ПредставлениеСтрокиОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	// Если значение требует уточнения, будет вызвана форма для ввода уточняющих данных.
	// Обработка выбора не должна выполняться в этом случае.
	ТипыДляУточнения = Новый Массив;
	ТипыДляУточнения.Добавить(Тип("Структура"));
	ТипыДляУточнения.Добавить(Тип("СправочникСсылка.РолиИсполнителей"));
	ТипыДляУточнения.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	ТипыДляУточнения.Добавить(Тип("СправочникСсылка.Проекты"));
	Если ТипыДляУточнения.Найти(ТипЗнч(ВыбранноеЗначение)) <> Неопределено Тогда
		СотрудникиКлиент.ОбработкаВыбораКонтейнера(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
		// Повторная проверка (значение могло быть изменено).
		Если ТипыДляУточнения.Найти(ТипЗнч(ВыбранноеЗначение)) <> Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ТекущиеДанные.Участник = ВыбранноеЗначение;
	Иначе
		ТекущиеДанные.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка")
	КонецЕсли;
	
	РазвернутьДеревоУчастников();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.ПредставлениеСтрокиАвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора,
		ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, Неопределено, ТипОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.ПредставлениеСтрокиОкончаниеВводаТекста(ЭтотОбъект, Элемент, Текст, 
		ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, Неопределено, ТипОбъекта);
	
КонецПроцедуры

// Работа с УчастникиУсловие
&НаКлиенте
Процедура УсловиеПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.УсловиеПредставлениеОткрытие(
		ЭтотОбъект, Элемент, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура УсловиеПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.УсловиеПредставлениеОбработкаВыбора(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УсловиеПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.УсловиеПредставлениеНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта);
			
КонецПроцедуры
	
&НаКлиенте
Процедура УсловиеПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.УсловиеПредставлениеОчистка(
		ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УсловиеПредставлениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.УсловиеПредставлениеАвтоПодбор(
		Текст, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура УсловиеПредставлениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.УсловиеПредставлениеОкончаниеВводаТекста(
		Текст, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта);
		
КонецПроцедуры

// Работа с УчастникиСрокПредставление

&НаКлиенте
Процедура СрокПредставлениеПриИзменении(Элемент)
	
	ДействияКлиент.СрокПредставлениеПриИзменении(ЭтотОбъект, Элемент, Не РазныеСроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ДействияКлиент.СрокПредставлениеРегулирование(
		ЭтотОбъект, Элемент, Направление, СтандартнаяОбработка, Не РазныеСроки);
	ЗаполнитьПредставлениеСроков();
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыУстановкиСрока = 
		СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	ТекущиеДанные.Срок = ВыбранноеЗначение;
	ТекущиеДанные.СрокДни = 0;
	ТекущиеДанные.СрокЧасы = 0;
	ТекущиеДанные.СрокМинуты = 0;
	ТекущиеДанные.ВариантУстановкиСрока = ВариантыУстановкиСрока.ТочныйСрок;
	
КонецПроцедуры

// Работа с УчастникиНаименованиеЗадачи

&НаКлиенте
Процедура НаименованиеЗадачиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ЕстьОсобоеНаименованиеОписание = ЗначениеЗаполнено(ТекущиеДанные.НаименованиеЗадачи)
		Или ЗначениеЗаполнено(ТекущиеДанные.Описание);
	
КонецПроцедуры

// Работа с УчастникиОписание

&НаКлиенте
Процедура ОписаниеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ЕстьОсобоеНаименованиеОписание = ЗначениеЗаполнено(ТекущиеДанные.НаименованиеЗадачи)
		Или ЗначениеЗаполнено(ТекущиеДанные.Описание);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандФормыУчастники

&НаКлиенте
Процедура Подобрать(Команда)
	
	СтрокаЭтапа = Участники.НайтиПоИдентификатору(Элементы.Участники.ТекущаяСтрока);
	Если Не СтрокаЭтапа.ЭтоЭтап Тогда
		СтрокаЭтапа = СтрокаЭтапа.ПолучитьРодителя();
	КонецЕсли;
	
	Если Не СтрокаЭтапа.ЭтоЭтап Тогда
		ВызватьИсключение НСтр("ru = 'Не определена строка этапа.'");
	КонецЕсли;
	
	Если СтрокаЭтапа.Функция <> ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.Исполнитель")
		И СтрокаЭтапа.Функция <> ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.Рассматривающий") Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныеАдресаты = Новый Массив;
	УчастникиЭтапов = СтрокаЭтапа.ПолучитьЭлементы();
	Для Каждого СтрокаУчастника Из УчастникиЭтапов Цикл
		Если ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
			ВыбранныеАдресаты.Добавить(СтрокаУчастника.Участник);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 2);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ОтображатьРоли", Истина);
	Если ТипОбъекта = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.ДокументыПредприятия") Тогда
		ПараметрыФормы.Вставить("ОтображатьАвтоподстановкиПоДокументам", Истина);
	ИначеЕсли ТипОбъекта = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.Мероприятия") Тогда
		ПараметрыФормы.Вставить("ОтображатьАвтоподстановкиПоМероприятиям", Истина);
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный тип объекта %1.'"),
			ТипОбъекта);
	КонецЕсли;
	ПараметрыФормы.Вставить("ОтображатьВидыПодразделений", Ложь);
	ПараметрыФормы.Вставить("ВыбиратьВидыПодразделений", Ложь);
	ПараметрыФормы.Вставить("ОтображатьПодразделения", Ложь);
	ПараметрыФормы.Вставить("ВыбиратьПодразделения", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Подбор исполнителей'"));
	ПараметрыФормы.Вставить("ЗаголовокСпискаВыбранных", НСтр("ru = 'Выбранные сотрудники и роли:'"));
	ПараметрыФормы.Вставить("ЗаголовокСпискаАдреснойКниги", НСтр("ru = 'Все сотрудники и роли:'"));
	ПараметрыФормы.Вставить("ВыбранныеАдресаты", ВыбранныеАдресаты);
	ПараметрыФормы.Вставить("ИменаПредметов", СписокПредметов);
	ПараметрыФормы.Вставить("КонтролироватьДублиАдресатов", Истина);
	ПараметрыФормы.Вставить("УточнятьСоставПодразделений", Истина);
	ПараметрыФормы.Вставить("ПодменятьПользователейСотрудниками", Истина);
	ПараметрыФормы.Вставить("КонтролироватьСотрудниковБезПользователя", Истина);
	
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыФормы, Элементы.Участники);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЭтап Тогда
		
		ПоказатьПредупреждение(,
			НСтр("ru = 'Нельзя менять порядок этапов.'"));
		Возврат;
		
	Иначе
		
		УчастникиЭтапа = ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
		
		ИндексТекущейСтроки = УчастникиЭтапа.Индекс(ТекущиеДанные);
		
		Если ИндексТекущейСтроки = 0 Тогда
			Возврат;
		КонецЕсли;
		
		УчастникиЭтапа.Сдвинуть(ИндексТекущейСтроки, -1);
		
	КонецЕсли;
	
	ОбновитьПредставленияВДеревеУчастников(Участники, Объект.ПоПунктам);
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЭтап Тогда
		
		ПоказатьПредупреждение(,
			НСтр("ru = 'Нельзя менять порядок этапов.'"));
		Возврат;
		
	Иначе
		
		УчастникиЭтапа = ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
		
		ИндексТекущейСтроки = УчастникиЭтапа.Индекс(ТекущиеДанные);
		
		Если ИндексТекущейСтроки = УчастникиЭтапа.Количество() - 1 Тогда
			Возврат;
		КонецЕсли;
		
		УчастникиЭтапа.Сдвинуть(ИндексТекущейСтроки, 1);
		
	КонецЕсли;
	
	ОбновитьПредставленияВДеревеУчастников(Участники, Объект.ПоПунктам);
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура Защищенный(Команда)
	ДействияКлиент.Защищенный(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтветственного(Команда)
	
	ДействияКлиент.УстановитьОтветственногоИсполнителя(ЭтотОбъект) 
		
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРазныеСроки(Команда)
	
	РазныеСроки = Не РазныеСроки;
	Элементы.УчастникиРазныеСроки.Пометка = РазныеСроки;
	ДействияКлиент.УстановитьОдинаковыйСрокРекурсивно(Участники.ПолучитьЭлементы(), ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Готово(Команда)
	
	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУчастниковПоУмолчанию(Команда)
	
	ЗаполнитьУчастниковПоУмолчаниюНаСервере();
	
	ЗаполнитьПредставлениеСроков();
	
	РазвернутьДеревоУчастников();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнениеПоПунктам(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИсполнениеПоПунктамПродолжение",
		ЭтотОбъект,
		Неопределено);
	
	Результат = Новый Структура;
	Результат.Вставить("Значение", КодВозвратаДиалога.Да);
	
	Если Не Объект.ПоПунктам Тогда
		
		ВсеСтрокиДерева = ОбщегоНазначенияДокументооборотКлиентСервер.ВсеСтрокиДерева(Участники);
		ЕстьУчастник = Ложь;
		Для каждого СтрокаДерева Из ВсеСтрокиДерева Цикл
			Если ЗначениеЗаполнено(СтрокаДерева.Участник) Тогда
				ЕстьУчастник = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Участники.ПолучитьЭлементы().Количество() = 0 Или Не ЕстьУчастник Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
		Иначе
			НастройкиДействийКлиент.ПредупредитьПриПереходеНаИсполнениеПоПунктам(ОписаниеОповещения,
				ПредупреждатьПриПереходеНаИсполнениеПоПунктам);
		КонецЕсли;
		
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Включает/Выключает исполнение по пунктам.
//
Процедура ИсполнениеПоПунктамПродолжение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат.Свойство("БольшеНеЗадаватьЭтотВопрос") Тогда
		ПредупреждатьПриПереходеНаИсполнениеПоПунктам = Не Результат.БольшеНеЗадаватьЭтотВопрос;
	КонецЕсли;
	
	Если Результат.Значение <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПоПунктам = Не Объект.ПоПунктам;
	Объект.Участники.Очистить();
	
	ЭлементыУчастники = Участники.ПолучитьЭлементы();
	ЭлементыУчастники.Очистить();
	
	Если Объект.ПоПунктам Тогда
		Объект.ПодписыватьРезолюцииЭП = Ложь;
	КонецЕсли;
	ОбновитьДеревоУчастниковПоОбъекту();
	
	Элементы.ИсполнениеПоПунктам.Пометка = Объект.ПоПунктам;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗадержку(Команда)
	
	ДействияКлиент.ОчиститьЗадержку(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере 
Процедура УстановитьВидимостьДоступностьПолейПоПунктам()
	
	Элементы.ПодписыватьРезолюцииЭП.Видимость = Не Объект.ПоПунктам;
	Элементы.ЕстьОсобоеНаименованиеОписание.Видимость = Не Объект.ПоПунктам;
	
	Элементы.Участники.ИзменятьСоставСтрок = Не Объект.ПоПунктам;
	Элементы.Участники.ИзменятьПорядокСтрок = Не Объект.ПоПунктам;
	
	Элементы.Защищенный.Видимость = Не Объект.ПоПунктам;
	Элементы.УчастникиЗащищенный.Видимость = Не Объект.ПоПунктам;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУчастниковПоУмолчаниюНаСервере()
	
	ДействиеОбъект = РеквизитФормыВЗначение("Объект");
	ДействиеОбъект.ЗаполнитьУчастниковПоУмолчанию();
	ЗначениеВРеквизитФормы(ДействиеОбъект, "Объект");
	
	Элементы.ИсполнениеПоПунктам.Пометка = Объект.ПоПунктам;
	
	ОбновитьДеревоУчастниковПоОбъекту();
	
КонецПроцедуры

// Заполняет представление сроков в карточке действия.
//
&НаКлиенте
Процедура ЗаполнитьПредставлениеСроков() Экспорт
	
	ЭтапыУчастников = Участники.ПолучитьЭлементы();
	
	Для Каждого ЭтапУчастников Из ЭтапыУчастников Цикл
		
		Если ЭтапУчастников.СрокОбщий Или ЗначениеЗаполнено(ЭтапУчастников.Срок)
			Или ЗначениеЗаполнено(ЭтапУчастников.СрокДни) 
			Или ЗначениеЗаполнено(ЭтапУчастников.СрокЧасы)
			Или ЗначениеЗаполнено(ЭтапУчастников.СрокМинуты) Тогда
			ЭтапУчастников.СрокПредставление = 
				СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
					ЭтапУчастников.Срок,
					ЭтапУчастников.СрокДни,
					ЭтапУчастников.СрокЧасы,
					ЭтапУчастников.СрокМинуты,
					ИспользоватьДатуИВремяВСрокахЗадач,
					ЭтапУчастников.ВариантУстановкиСрока);
		Иначе
			ЭтапУчастников.СрокПредставление = "";
		КонецЕсли;
		
		УчастникиЭтапа = ЭтапУчастников.ПолучитьЭлементы();
		
		Для Каждого УчастникЭтапа Из УчастникиЭтапа Цикл
			
			УчастникЭтапа.СрокПредставление = 
				СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
					УчастникЭтапа.Срок,
					УчастникЭтапа.СрокДни,
					УчастникЭтапа.СрокЧасы,
					УчастникЭтапа.СрокМинуты,
					ИспользоватьДатуИВремяВСрокахЗадач,
					УчастникЭтапа.ВариантУстановкиСрока);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Признак недоступности строки, переопределяемый для данного вида действия участника.
// Вызывается для строк с участниками, т.е. "нижнего" уровня дерева.
// 
// Параметры:
//  СтрокаДерева - ДанныеФормыЭлементДерева - Строка дерева "Участники".
//  СтрокаРодитель - Неопределено, ДанныеФормыЭлементДерева - Строка родитель строки дерева.
// 
// Возвращаемое значение:
//  Булево - Признак, что строка должна быть недоступна.
&НаКлиенте
Функция СтрокаУчастникаНедоступна(СтрокаДерева, СтрокаРодитель) Экспорт
	
	Возврат Объект.ПоПунктам;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы() Экспорт
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если ТекущийРодитель = Неопределено Тогда
		ЭлементыРодителя = Участники.ПолучитьЭлементы();
	Иначе
		ЭлементыРодителя = ТекущийРодитель.ПолучитьЭлементы();
	КонецЕсли;
	Индекс = ЭлементыРодителя.Индекс(ТекущиеДанные);
	ЭтоПервыйЭлемент = 
		Индекс = 0;
	ЭтоПоследнийЭлемент = 
		Индекс = ЭлементыРодителя.Количество() - 1;
	КоличествоЭлементовРодителя = ЭлементыРодителя.Количество();
	Элементы.УстановитьОтветственный.Пометка = Ложь;
	
	ДоступноИзменение = Не СтрокаУчастникаНедоступна(ТекущиеДанные, ТекущийРодитель);
	
	Если ТекущиеДанные.Функция = ПредопределенноеЗначение(
		"Перечисление.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат") Тогда
		
		Элементы.ПредставлениеСтроки.ТолькоПросмотр = ТекущиеДанные.ЭтоЭтап;
		Элементы.СрокПредставление.ТолькоПросмотр = ТекущиеДанные.ЭтоЭтап;
		Элементы.ЕстьОсобоеНаименованиеОписание.ТолькоПросмотр = Истина;
		Элементы.НаименованиеЗадачи.ТолькоПросмотр = Истина;
		Элементы.Описание.ТолькоПросмотр = Истина;
		
		Элементы.Подобрать.Доступность = Ложь;
		Элементы.Добавить.Доступность = Ложь;
		Элементы.ПереместитьВверх.Доступность = Ложь;
		Элементы.ПереместитьВниз.Доступность = Ложь;
		Элементы.Удалить.Доступность = Не ТекущиеДанные.ЭтоЭтап;
		Элементы.УстановитьОтветственный.Доступность = Ложь;
		
	ИначеЕсли ТекущиеДанные.ЭтоЭтап Тогда
		
		Элементы.ПредставлениеСтроки.ТолькоПросмотр = Истина;
		Элементы.СрокПредставление.ТолькоПросмотр = Истина;
		Элементы.ЕстьОсобоеНаименованиеОписание.ТолькоПросмотр = Истина;
		Элементы.НаименованиеЗадачи.ТолькоПросмотр = Истина;
		Элементы.Описание.ТолькоПросмотр = Истина;
		
		Элементы.Подобрать.Доступность = ДоступноИзменение;
		Элементы.Добавить.Доступность = ДоступноИзменение;
		Элементы.ПереместитьВверх.Доступность = Ложь;
		Элементы.ПереместитьВниз.Доступность = Ложь;
		Элементы.Удалить.Доступность = Ложь;
		Элементы.УстановитьОтветственный.Доступность = Ложь;
		
	Иначе // Исполнитель
		
		Элементы.ПредставлениеСтроки.ТолькоПросмотр = Не ДоступноИзменение;
		Элементы.СрокПредставление.ТолькоПросмотр = Не ДоступноИзменение;
		Элементы.ЕстьОсобоеНаименованиеОписание.ТолькоПросмотр = Не ДоступноИзменение;
		Элементы.НаименованиеЗадачи.ТолькоПросмотр = Не ДоступноИзменение;
		Элементы.Описание.ТолькоПросмотр = Не ДоступноИзменение;
		
		Элементы.Подобрать.Доступность = ДоступноИзменение;
		Элементы.Добавить.Доступность = ДоступноИзменение;
		Элементы.ПереместитьВверх.Доступность = Не ЭтоПервыйЭлемент;
		Элементы.ПереместитьВниз.Доступность = Не ЭтоПоследнийЭлемент;
		Элементы.Удалить.Доступность = ДоступноИзменение;
		
		Элементы.УстановитьОтветственный.Доступность = 
			ТекущиеДанные.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.Исполнитель")
			И КоличествоЭлементовРодителя > 1;
		Элементы.УстановитьОтветственный.Пометка = ТекущиеДанные.Ответственный;
	КонецЕсли;
	
	Элементы.КонтекстДобавить.Доступность = Элементы.Добавить.Доступность;
	Элементы.КонтекстУдалить.Доступность = Элементы.Удалить.Доступность;
	Элементы.КонтекстУстановитьОтветственного.Доступность = Элементы.УстановитьОтветственный.Доступность;
	Элементы.КонтекстУстановитьОтветственного.Пометка = Элементы.УстановитьОтветственный.Пометка;
	
	ДействияКлиент.УстановитьТолькоПросмотрИУдалениеУчастникаПоЗащищенности(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Участники

// Заполняет дерево участников по объекту.
//
&НаСервере
Процедура ОбновитьДеревоУчастниковПоОбъекту()
	
	ДействиеОбъект = РеквизитФормыВЗначение("Объект");
	
	ЭтапыУчастников = Участники.ПолучитьЭлементы();
	ЭтапыУчастников.Очистить();
	
	Если Объект.ПоПунктам Тогда
		// Исполнение.
		ЭтапУчастников = ЭтапыУчастников.Добавить();
		ЭтапУчастников.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.Исполнитель");
		Если ТипОбъекта = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.ДокументыПредприятия") Тогда
			ЭтапУчастников.НаименованиеЭтапа = НСтр("ru = 'Пункты (вводятся в документе)'");
		ИначеЕсли ТипОбъекта = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.Мероприятия") Тогда
			ЭтапУчастников.НаименованиеЭтапа = НСтр("ru = 'Пункты (вводятся в мероприятии)'");
		КонецЕсли;
		ЭтапУчастников.ЭтоЭтап = Истина;
	
		УчастникиЭтапа = ЭтапУчастников.ПолучитьЭлементы();
		УчастникЭтапа = Неопределено;
		Для Каждого Участник Из ДействиеОбъект.Участники() Цикл
			УчастникЭтапа = УчастникиЭтапа.Добавить();
			ЗаполнитьЗначенияСвойств(УчастникЭтапа, Участник);
			УчастникЭтапа.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.Исполнитель");
			УчастникЭтапа.УсловиеПредставление = УчастникЭтапа.Условие;				
		КонецЦикла;
	Иначе
		// Рассмотрение.
		ЭтапУчастников = ЭтапыУчастников.Добавить();
		ЭтапУчастников.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.Рассматривающий");
		ЭтапУчастников.НаименованиеЭтапа = НСтр("ru = 'Рассмотрение'");
		ЭтапУчастников.ЭтоЭтап = Истина;	
		
		УчастникиЭтапа = ЭтапУчастников.ПолучитьЭлементы();
		УчастникЭтапа = Неопределено;
		Для Каждого Рассматривающий Из ДействиеОбъект.Рассматривающие() Цикл
			
			УчастникЭтапа = УчастникиЭтапа.Добавить();
			ЗаполнитьЗначенияСвойств(УчастникЭтапа, Рассматривающий);
			УчастникЭтапа.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.Рассматривающий");
			УчастникЭтапа.УсловиеПредставление = УчастникЭтапа.Условие;
			УчастникЭтапа.ЕстьОсобоеНаименованиеОписание =
				ЗначениеЗаполнено(УчастникЭтапа.НаименованиеЗадачи)
				Или ЗначениеЗаполнено(УчастникЭтапа.Описание);
		КонецЦикла;
		
		// Если участника нет, то добавляем пустую строку
		Если УчастникЭтапа = Неопределено Тогда 
			УчастникЭтапа = УчастникиЭтапа.Добавить();
			УчастникЭтапа.Участник = Справочники.Сотрудники.ПустаяСсылка();
			УчастникЭтапа.Функция = ЭтапУчастников.Функция;
		КонецЕсли;
		
		// Исполнение.
		ЭтапУчастников = ЭтапыУчастников.Добавить();
		ЭтапУчастников.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.Исполнитель");
		ЭтапУчастников.НаименованиеЭтапа = НСтр("ru = 'Исполнение'");
		ЭтапУчастников.ЭтоЭтап = Истина;
		
		УчастникиЭтапа = ЭтапУчастников.ПолучитьЭлементы();
		УчастникЭтапа = Неопределено;
		Для Каждого Участник Из ДействиеОбъект.Участники() Цикл
			
			УчастникЭтапа = УчастникиЭтапа.Добавить();
			ЗаполнитьЗначенияСвойств(УчастникЭтапа, Участник);
			УчастникЭтапа.УсловиеПредставление = УчастникЭтапа.Условие;
			УчастникЭтапа.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.Исполнитель");
			
			УчастникЭтапа.ЕстьОсобоеНаименованиеОписание =
				ЗначениеЗаполнено(УчастникЭтапа.НаименованиеЗадачи)
				Или ЗначениеЗаполнено(УчастникЭтапа.Описание);
				
		КонецЦикла;
		// Если участника нет, то добавляем пустую строку
		Если УчастникЭтапа = Неопределено Тогда 
			УчастникЭтапа = УчастникиЭтапа.Добавить();
			УчастникЭтапа.Участник = Справочники.Сотрудники.ПустаяСсылка();
			УчастникЭтапа.Функция = ЭтапУчастников.Функция;
		КонецЕсли;
		
		// Участники обрабатывающие результат.
		ЭтапУчастников = ЭтапыУчастников.Добавить();
		ЭтапУчастников.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат");
		ЭтапУчастников.НаименованиеЭтапа = НСтр("ru = 'Обрабатывающий результат'");
		ЭтапУчастников.ЭтоЭтап = Истина;
		
		УчастникиЭтапа = ЭтапУчастников.ПолучитьЭлементы();
		УчастникЭтапа = Неопределено; 
		УчастникОбрабатывающийРезультат = ДействиеОбъект.УчастникОбрабатывающийРезультат();
		Если ЗначениеЗаполнено(УчастникОбрабатывающийРезультат) Тогда 
			Для Каждого Участник Из УчастникОбрабатывающийРезультат Цикл
				УчастникЭтапа = УчастникиЭтапа.Добавить();
				ЗаполнитьЗначенияСвойств(УчастникЭтапа, Участник);
				УчастникЭтапа.Участник = Участник.Участник;
				УчастникЭтапа.УсловиеПредставление = УчастникЭтапа.Условие;
				УчастникЭтапа.Функция = ПредопределенноеЗначение(
					"Перечисление.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат");
			КонецЦикла;
		Иначе 
			УчастникЭтапа = УчастникиЭтапа.Добавить();
			УчастникЭтапа.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
			УчастникЭтапа.Функция = ЭтапУчастников.Функция;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьПредставленияВДеревеУчастников(Участники, Объект.ПоПунктам);
	УстановитьВидимостьДоступностьПолейПоПунктам();
	Элементы.ИсполнениеПоПунктам.Пометка = Объект.ПоПунктам;
	Команды.ПереключитьРазныеСроки.Подсказка = ДействияСервер.ПодсказкаКнопкиРазныеСроки(Объект.ПоПунктам, Ложь);
	
КонецПроцедуры

// Заполняет объект по дереву участников.
//
&НаКлиенте
Процедура ОбновитьОбъектПоДеревуУчастников(Отказ)
	
	СсылкаНеуказанногоПользователя = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	Если Не ЗначениеЗаполнено(Объект.ВозможностьИзменятьУчастников) Тогда
		Объект.ВозможностьИзменятьУчастников = ПредопределенноеЗначение(
			"Перечисление.ВариантыДоступностиИзмененияДействий.Авто");
	КонецЕсли;
	
	Объект.Участники.Очистить();
	
	ЭлементыЭтапы = Участники.ПолучитьЭлементы();
	
	Для Каждого ЭлементЭтап Из ЭлементыЭтапы Цикл
		
		ЭлементыУчастники = ЭлементЭтап.ПолучитьЭлементы();
		
		Для Каждого ЭлементУчастник Из ЭлементыУчастники Цикл
			
			Если Не ЗначениеЗаполнено(ЭлементУчастник.Участник) 
				Или ЭлементУчастник.Участник = СсылкаНеуказанногоПользователя Тогда
				Продолжить;
			КонецЕсли;
			
			Отбор = Новый Структура("Участник, ФункцияУчастника, НаименованиеЗадачи, Описание",
				ЭлементУчастник.Участник, ЭлементЭтап.Функция,
				ЭлементУчастник.НаименованиеЗадачи, ЭлементУчастник.Описание);
			Если ЭлементУчастник.Защищенный Тогда
				// Все дубли должны быть отмечены как защищенные. Найдем неотмеченных.
				Отбор.Вставить("Защищенный", Ложь);
			КонецЕсли;
			
			НайденныеСотрудники = Объект.Участники.НайтиСтроки(Отбор);
			Если НайденныеСотрудники.Количество() > 0 Тогда
				Отказ = Истина;
				ПоказатьПредупреждение(, СтрШаблон(
					НСтр("ru = 'В этапе ""%1"" повторяется участник: %2. 
					|Удалите дубли, укажите особое описание или установите участнику признак ""Защищенный""'"),
						ЭлементЭтап.НаименованиеЭтапа ,ЭлементУчастник.Участник));
				Возврат;
			КонецЕсли;
			
			Участник = Объект.Участники.Добавить();
			ЗаполнитьЗначенияСвойств(Участник, ЭлементУчастник);
			Участник.Участник = ЭлементУчастник.Участник;
			Участник.ФункцияУчастника = ЭлементЭтап.Функция;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Разворачивает дерево участников.
//
&НаКлиенте
Процедура РазвернутьДеревоУчастников()
	
	Для Каждого Этап Из Участники.ПолучитьЭлементы() Цикл
		Элементы.Участники.Развернуть(Этап.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

// Обновляет представления строк в дереве участников.
//
// Параметры:
//  Участники - ДанныеФормыДерево - дерево с участниками.
//  ПоПунктам - Булево - Признак исполнения по пунктам.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставленияВДеревеУчастников(Участники, ПоПунктам)
	
	ЭтапыУчастников = Участники.ПолучитьЭлементы();
	
	НомерШагаЭтапа = 1;
	
	Для ИндексЭтапа = 0 По ЭтапыУчастников.Количество() - 1 Цикл
		
		СтрокаЭтапа = ЭтапыУчастников.Получить(ИндексЭтапа);
		
		Если ИндексЭтапа <> 0 Тогда
			НомерШагаЭтапа = НомерШагаЭтапа + 1;
		КонецЕсли;
		
		СтрокиНаименования = Новый Массив;
		Если Не ПоПунктам Тогда
			СтрокиНаименования.Добавить(НомерШагаЭтапа);
			СтрокиНаименования.Добавить(". ");
		КонецЕсли;
		СтрокаЭтапа.ПрефиксСтроки = СтрСоединить(СтрокиНаименования);
		
		СтрокиНаименования.Добавить(СтрокаЭтапа.НаименованиеЭтапа);
		СтрокаЭтапа.ПредставлениеСтроки = СтрСоединить(СтрокиНаименования);
		
		УчастникиЭтапа = СтрокаЭтапа.ПолучитьЭлементы();
		
		Для ИндексУчастника = 0 По УчастникиЭтапа.Количество() - 1 Цикл
			СтрокаУчастника = УчастникиЭтапа[ИндексУчастника];
			
			СтрокаУчастника.ПрефиксСтроки = "";
			СтрокаУчастника.ПредставлениеСтроки = ДействияКлиентСервер.ПредставлениеУчастника(СтрокаУчастника.Участник);
			
			Если Не ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
				СтрокаУчастника.ПредставлениеСтроки = ДействияКлиентСервер.ПредставлениеУчастника(
					ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка"));
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьУчастников(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверкиДействительностиУчастников = 
		РаботаСУчастникамиКлиент.ПроверитьДействительностьУчастников(ЭтотОбъект);
	Если Не РезультатПроверкиДействительностиУчастников.ВсеДействительны Тогда
		
		Отказ = Истина;
		
		Обработчик = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиДействительностиУчастниковПродолжение",
			ЭтотОбъект);
		
		РаботаСУчастникамиКлиент.ОбработатьРезультатПроверкиДействительностиУчастников(
			РезультатПроверкиДействительностиУчастников,
			Обработчик);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработать результат проверки действительности участников продолжение.
// 
// Параметры:
//  Результат - Структура - результат проверки и выбор пользователя:
//   * РезультатПроверки - см. РаботаСУчастникамиВызовСервера.ПроверитьДействительностьУчастников
//   * ВариантОбработки - Число, КодВозвратаДиалога - 0 - заменить, 1 - оставить как есть,
//                                                    КодВозвратаДиалога.Отмена - отмена.
//  ДополнительныеПараметры - Произвольный
//
&НаКлиенте
Процедура ОбработатьРезультатПроверкиДействительностиУчастниковПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ВариантОбработки = Результат.ВариантОбработки;
	
	// Выбрана отмена.
	Если ВариантОбработки = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	// Хочет продолжить как есть.
	Если ВариантОбработки = 1 Тогда
		ЗаписатьЗакрытьБезПроверкиУчастников();
		Возврат;
	КонецЕсли;
	
	// Согласился заменить участников.
	Если ВариантОбработки = 0 Тогда
		ОбработчикЗамены = Новый ОписаниеОповещения("УчастникиЗамена", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.ФормаЗаменыУчастников", Результат.РезультатПроверки, ЭтотОбъект,,,,
			ОбработчикЗамены);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЗакрытьБезПроверкиУчастников(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не Записать(Новый Структура("НеПроверятьУчастников", Истина)) Тогда
		Возврат;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиЗамена(Замены, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Замены = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаменитьУчастниковНаСервере(Замены);
	РазвернутьДеревоУчастников();
	
КонецПроцедуры

// Заменить участников на сервере.
// 
// Параметры:
//  Замены - Массив Из Структура:
//   * ВидУчастника - СправочникСсылка.ВидыУчастниковЗадач
//   * Участник - СправочникСсылка.Сотрудники
//   * УчастникЗаменитьНа - СправочникСсылка.Сотрудники
&НаСервере
Процедура ЗаменитьУчастниковНаСервере(Замены)
	
	БылиЗамены = Ложь;
	
	Для Каждого Замена Из Замены Цикл
		
		КлючиСтруктурыОтбора = "ФункцияУчастника, Участник";
		СтруктураОтбора = Новый Структура(КлючиСтруктурыОтбора);
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Замена, КлючиСтруктурыОтбора);
		НайденныеСтрокиУчастников = Объект.Участники.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаУчастника Из НайденныеСтрокиУчастников Цикл
			СтрокаУчастника.Участник = Замена.УчастникЗаменитьНа;
			БылиЗамены = Истина;
		КонецЦикла; 
		
	КонецЦикла;
	
	Если БылиЗамены Тогда
		
		Модифицированность = Истина;
		ОбновитьДеревоУчастниковПоОбъекту();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МоментРазыменованияУчастниковОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти
