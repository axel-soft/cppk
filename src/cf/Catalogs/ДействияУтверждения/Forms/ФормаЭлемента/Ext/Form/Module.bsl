
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РежимДиалога = Параметры.РежимДиалога;
	
	ДействияСобытия.ЗаполнитьДанныеДействия(ЭтотОбъект, ИзменениеДействияРазрешено());
	
	ОбновитьДеревоУчастниковПоОбъекту();
	ДействияСервер.УстановитьДоступностьИзмененияУчастников(ЭтотОбъект, Разрешения);
	ДействияСервер.ЗаполнитьСостоянияИРезультатыВФормеДействия(ЭтотОбъект);
	ДействияСервер.УстановитьВидимостьУсловийУчастников(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьПредставлениеСроков();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда 
		ПараметрыЗаписи.Вставить("ТребуетсяОбновление", Истина);
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Объект.Ссылка.Пустая());
	ОбновитьОбъектПоДеревуУчастников(Отказ);
	ДействияКлиент.ОтложенноеНачалоВыполненияПередЗаписью(ЭтотОбъект);
	
	Если ПараметрыЗаписи.Свойство("НеПроверятьУчастников") И ПараметрыЗаписи.НеПроверятьУчастников Тогда
		Возврат;
	КонецЕсли;
	ПроверитьУчастников(Отказ);

	Если Не ЗначениеЗаполнено(Объект.МоментРазыменованияУчастников) Тогда
		Объект.МоментРазыменованияУчастников = ПредопределенноеЗначение("Перечисление.МоментыРазыменованияУчастниковДействий.ПриСозданииДействия");
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(НастройкаОбработки) Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("НастройкаОбработки", НастройкаОбработки);
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ДействияСобытия.ДействияПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ДействияКлиент.ДействияПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъекта(Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АвторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТипОбъекта = ОбщегоНазначенияДокументооборотКлиентСервер.ТипОбъекта(Объект.Предмет);
	НастройкиДействийКлиент.НастройкиДействияАвторНачалоВыбора(
		ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.НастройкиДействияАвторОбработкаВыбора(
		ЭтаФорма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(Объект, "Автор", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТипОбъекта = ОбщегоНазначенияДокументооборотКлиентСервер.ТипОбъекта(Объект.Предмет);
	НастройкиДействийКлиент.НастройкиДействияАвторАвтоПодбор(
		ЭтаФорма, Текст, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта);
		
КонецПроцедуры

&НаКлиенте
Процедура АвторОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТипОбъекта = ОбщегоНазначенияДокументооборотКлиентСервер.ТипОбъекта(Объект.Предмет);
	НастройкиДействийКлиент.НастройкиДействияАвторОкончаниеВводаТекста(
		ЭтаФорма, Текст, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОтложенногоНачалаВыполненияНажатие(Элемент, СтандартнаяОбработка)
	
	ДействияКлиент.ОписаниеОтложенногоНачалаВыполненияНажатие(ЭтаФорма, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУчастники

&НаКлиенте
Процедура УчастникиПриИзменении(Элемент)
	
	ОбновитьПредставленияВДеревеУчастников(Участники);
	РазвернутьДеревоУчастников();
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Участники.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Поле = Элементы.ЕстьОсобоеНаименованиеОписание Тогда
		
		Если ТекущиеДанные = Неопределено
			Или ТекущиеДанные.ЭтоЭтап
			Или ТекущиеДанные.Функция <> ПредопределенноеЗначение("Перечисление.ФункцииУчастниковУтверждения.Утверждающий") Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Описание", ТекущиеДанные.Описание);
		ПараметрыФормы.Вставить("ТолькоОписание", Истина);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр
			Или Разрешения[0].Разрешение =
			ПредопределенноеЗначение("Перечисление.ВариантыДоступностиИзмененияДействий.Запрещено"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗавершитьНастройкуОсобогоОписанияУтверждающего", ЭтотОбъект, ТекущиеДанные);
			
		ОткрытьФорму("ОбщаяФорма.РедактированиеОсобогоНаименованияИОписанияЗадачи",
			ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
		
		Возврат;
	КонецЕсли;
		
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.УчастникиУсловиеПредставление
		И ТекущиеДанные <> Неопределено 
		И ЗначениеЗаполнено(ТекущиеДанные.Условие) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Условие);
		
	ИначеЕсли Поле = Элементы.УчастникиЗащищенный Тогда
			
		ДействияКлиент.Защищенный(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередУдалением(Элемент, Отказ)
	
	ДействияКлиент.УчастникиСЭтапамиПередУдалением(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЭтап Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ДействияКлиент.УчастникиПередНачаломИзменения(ЭтотОбъект, Отказ);

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьНастройкуОсобогоОписанияУтверждающего(Результат, СтрокаУчастника) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаУчастника.Описание = Результат.Описание;
	СтрокаУчастника.ЕстьОсобоеНаименованиеОписание =
		ЗначениеЗаполнено(СтрокаУчастника.Описание);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьЭлементовФормы();	
	ДействияКлиент.УчастникиПриАктивизацииСтроки(ЭтотОбъект);
	
КонецПроцедуры

// Работа с УчастникиПредставлениеСтроки

&НаКлиенте
Процедура ПредставлениеСтрокиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЭтап Тогда
		ТекущиеДанные.НаименованиеЭтапа = ТекущиеДанные.ПредставлениеСтроки;
	Иначе
		ТекущиеДанные.Участник = ТекущиеДанные.ПредставлениеСтроки;
		ТекущиеДанные.ИзНастройки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаголовокФормы = НСтр("ru = 'Выбор утверждающего'");
	ДействияКлиент.ПредставлениеСтрокиНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка, ЗаголовокФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиОткрытие(Элемент, СтандартнаяОбработка)
	
	ДействияКлиент.ПредставлениеСтрокиОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиОчистка(Элемент, СтандартнаяОбработка)
	
	ДействияКлиент.ПредставлениеСтрокиОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЭтап Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ДействияКлиент.ПредставлениеСтрокиОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	// Если значение требует уточнения, будет вызвана форма для ввода уточняющих данных.
	// Обработка выбора не должна выполняться в этом случае.
	ТипыДляУточнения = Новый Массив;
	ТипыДляУточнения.Добавить(Тип("Структура"));
	ТипыДляУточнения.Добавить(Тип("СправочникСсылка.РолиИсполнителей"));
	ТипыДляУточнения.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	ТипыДляУточнения.Добавить(Тип("СправочникСсылка.Проекты"));
	Если ТипыДляУточнения.Найти(ТипЗнч(ВыбранноеЗначение)) <> Неопределено Тогда
		СотрудникиКлиент.ОбработкаВыбораКонтейнера(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
		// Повторная проверка (значение могло быть изменено).
		Если ТипыДляУточнения.Найти(ТипЗнч(ВыбранноеЗначение)) <> Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекущиеДанные.Участник = ВыбранноеЗначение;
	РазвернутьДеревоУчастников();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДействияКлиент.ПредставлениеСтрокиАвтоПодбор(ЭтотОбъект,Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДействияКлиент.ПредставлениеСтрокиОкончаниеВводаТекста(ЭтотОбъект, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

// Работа с УчастникиСрокПредставление

&НаКлиенте
Процедура СрокПредставлениеПриИзменении(Элемент)
	
	ДействияКлиент.СрокПредставлениеПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДействияКлиент.СрокПредставлениеНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ДействияКлиент.СрокПредставлениеРегулирование(ЭтотОбъект, Элемент, Направление, СтандартнаяОбработка);
	ЗаполнитьПредставлениеСроков();
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДействияКлиент.СрокПредставлениеОбработкаВыбора(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	ЗаполнитьПредставлениеСроков();
	
КонецПроцедуры

// Работа с УчастникиОписание
&НаКлиенте
Процедура ОписаниеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ЕстьОсобоеНаименованиеОписание =
		ЗначениеЗаполнено(ТекущиеДанные.Описание);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Готово(Команда)
	
	ДействияКлиент.ГотовоИзКарточкиДействия(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьДиалог(Команда)
	
	Закрыть(КодВозвратаДиалога.ОК);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть(КодВозвратаДиалога.Отмена);
	
КонецПроцедуры

&НаКлиенте
Процедура Защищенный(Команда)
	
	ДействияКлиент.Защищенный(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗадержку(Команда)
	
	ДействияКлиент.ОчиститьЗадержку(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеВыполненоВнеПрограммы(Команда)

	ДействияКлиент.ВводРезультатаВыполненияВнеПрограммыИзФормыДействия(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ИзменениеДействияРазрешено()
	
	ПредметДействия = Неопределено;
	Если ЗначениеЗаполнено(Объект.Предмет) Тогда
		ПредметДействия = Объект.Предмет
	ИначеЕсли Параметры.Свойство("Предмет") Тогда
		ПредметДействия = Параметры.Предмет;
	КонецЕсли;
	
	Возврат ДействияСервер.ИзменениеДействияРазрешено(Объект.Ссылка, ПредметДействия);
	
КонецФункции

// Заполняет представление сроков в карточке процесса.
//
&НаКлиенте
Процедура ЗаполнитьПредставлениеСроков() Экспорт
	
	ЭтапыУчастников = Участники.ПолучитьЭлементы();
	Для Каждого ЭтапУчастников Из ЭтапыУчастников Цикл
		
		УчастникиЭтапа = ЭтапУчастников.ПолучитьЭлементы();
		
		Для Каждого УчастникЭтапа Из УчастникиЭтапа Цикл
			
			УчастникЭтапа.СрокПредставление = 
				СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
					УчастникЭтапа.Срок,
					УчастникЭтапа.СрокДни,
					УчастникЭтапа.СрокЧасы,
					УчастникЭтапа.СрокМинуты,
					ИспользоватьДатуИВремяВСрокахЗадач,
					УчастникЭтапа.ВариантУстановкиСрока);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоУчастниковПоОбъекту()
	
	ДействиеОбъект = РеквизитФормыВЗначение("Объект");
	ЭтапыУчастников = Участники.ПолучитьЭлементы();
	ЭтапыУчастников.Очистить();
	
	// Утверждение
	ЭтапУтверждение = ЭтапыУчастников.Добавить();
	ЭтапУтверждение.ТочкаМаршрута = ТочкаУтвердить();
	ЭтапУтверждение.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковУтверждения.Утверждающий");
	ЭтапУтверждение.НаименованиеЭтапа = НСтр("ru = 'Утвердить'");
	ЭтапУтверждение.ЭтоЭтап = Истина;
	
	УчастникиЭтапа = ЭтапУтверждение.ПолучитьЭлементы();
	ДобавилиУчастника = Ложь;
	Для Каждого Регистратор Из ДействиеОбъект.Участники() Цикл
		УчастникЭтапа = УчастникиЭтапа.Добавить();
		ЗаполнитьЗначенияСвойств(УчастникЭтапа, Регистратор);
		УчастникЭтапа.Участник = Регистратор.Участник;
		УчастникЭтапа.Функция = Регистратор.ФункцияУчастника;
		УчастникЭтапа.СрокПредставление = СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
			УчастникЭтапа.Срок,
			УчастникЭтапа.СрокДни,
			УчастникЭтапа.СрокЧасы,
			УчастникЭтапа.СрокМинуты,
			ИспользоватьДатуИВремяВСрокахЗадач,
			УчастникЭтапа.ВариантУстановкиСрока);
		УчастникЭтапа.ЕстьОсобоеНаименованиеОписание =
			ЗначениеЗаполнено(УчастникЭтапа.Описание);
		УчастникЭтапа.УсловиеПредставление = Строка(Регистратор.Условие);
		
		Если УчастникЭтапа.Идентификатор = УникальныйИдентификаторПустой() Тогда 
			УчастникЭтапа.Идентификатор = Новый УникальныйИдентификатор;
		КонецЕсли;
		ДобавилиУчастника = Истина;
	КонецЦикла;
	
	Если Не ДобавилиУчастника Тогда 
		УчастникЭтапа = УчастникиЭтапа.Добавить();
		УчастникЭтапа.Идентификатор = Новый УникальныйИдентификатор;
		УчастникЭтапа.Функция = ЭтапУтверждение.Функция;
	КонецЕсли;
	
	// Ознакомление
	ЭтапОзнакомление = ЭтапыУчастников.Добавить();
	ЭтапОзнакомление.ТочкаМаршрута = ТочкаОзнакомиться();
	ЭтапОзнакомление.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковУтверждения.ОбрабатывающийРезультат");
	ЭтапОзнакомление.НаименованиеЭтапа = НСтр("ru = 'Ознакомиться с результатом утверждения'");
	ЭтапОзнакомление.ЭтоЭтап = Истина;
	
	УчастникиЭтапа = ЭтапОзнакомление.ПолучитьЭлементы();
	ДобавилиУчастника = Ложь;
	Для Каждого ОбрабатывающийРезультат Из ДействиеОбъект.УчастникОбрабатывающийРезультат() Цикл
		УчастникЭтапа = УчастникиЭтапа.Добавить();
		ЗаполнитьЗначенияСвойств(УчастникЭтапа, ОбрабатывающийРезультат);
		УчастникЭтапа.Участник = ОбрабатывающийРезультат.Участник;
		УчастникЭтапа.Функция = ОбрабатывающийРезультат.ФункцияУчастника;
		УчастникЭтапа.СрокПредставление = СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
			УчастникЭтапа.Срок,
			УчастникЭтапа.СрокДни,
			УчастникЭтапа.СрокЧасы,
			УчастникЭтапа.СрокМинуты,
			ИспользоватьДатуИВремяВСрокахЗадач,
			УчастникЭтапа.ВариантУстановкиСрока);
		Если УчастникЭтапа.Идентификатор = УникальныйИдентификаторПустой() Тогда 
			УчастникЭтапа.Идентификатор = Новый УникальныйИдентификатор;
		КонецЕсли;
		ДобавилиУчастника = Истина;
		УчастникЭтапа.УсловиеПредставление = Строка(ОбрабатывающийРезультат.Условие);
	КонецЦикла;
	
	Если Не ДобавилиУчастника Тогда 
		УчастникЭтапа = УчастникиЭтапа.Добавить();
		УчастникЭтапа.Участник = Объект.Автор;
		УчастникЭтапа.Идентификатор = Новый УникальныйИдентификатор;
		УчастникЭтапа.Функция = ЭтапОзнакомление.Функция;
	КонецЕсли;
	
	ОбновитьПредставленияВДеревеУчастников(Участники);
	
	ДействияСервер.УстановитьЗащищенностьУчастниковВНастройке(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОбъектПоДеревуУчастников(Отказ)
	
	СсылкаНеуказанногоПользователя = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	Объект.Участники.Очистить();
	ЭлементыЭтапы = Участники.ПолучитьЭлементы();
	ЕстьИсполняющиеУчастники = Ложь; ЕстьОбрабатывающийРезультат = Ложь;
	Для Каждого ЭлементЭтап Из ЭлементыЭтапы Цикл
		ЭлементыУчастники = ЭлементЭтап.ПолучитьЭлементы();
		
		Для Каждого ЭлементУчастник Из ЭлементыУчастники Цикл
			
			Если Не ЗначениеЗаполнено(ЭлементУчастник.Участник) 
				Или ЭлементУчастник.Участник = СсылкаНеуказанногоПользователя Тогда
				Продолжить;
			КонецЕсли;
			
			Участник = Объект.Участники.Добавить();
			ЗаполнитьЗначенияСвойств(Участник, ЭлементУчастник);
			Участник.Участник = ЭлементУчастник.Участник;
			Участник.ФункцияУчастника = ЭлементЭтап.Функция;
			Если Не ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(Участник.ФункцияУчастника) Тогда 
				ЕстьИсполняющиеУчастники = Истина;
			Иначе 
				ЕстьОбрабатывающийРезультат = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// Если заполнен только "Обрабатывающий результат", то не сохраняем его
	Если Не ЕстьИсполняющиеУчастники Тогда 
		Объект.Участники.Очистить();
	ИначеЕсли Не ЕстьОбрабатывающийРезультат Тогда 
		Отказ = Истина;
		ПоказатьПредупреждение(,
			НСтр("ru = 'Отсутствует участник ""ознакомления с результатом утверждения""'"));
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоУчастников()
	
	Для Каждого Этап Из Участники.ПолучитьЭлементы() Цикл
		Элементы.Участники.Развернуть(Этап.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставленияВДеревеУчастников(Участники)
	
	Для Каждого СтрокаЭтапа Из Участники.ПолучитьЭлементы() Цикл
		СтрокаЭтапа.ПредставлениеСтроки = СтрокаЭтапа.НаименованиеЭтапа;
		Для Каждого СтрокаУчастника Из СтрокаЭтапа.ПолучитьЭлементы() Цикл
			СтрокаУчастника.ПредставлениеСтроки = Строка(СтрокаУчастника.Участник) + "                              ";
			Если Не ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
				СтрокаУчастника.ПредставлениеСтроки = Строка(ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка"))
				+ "                              ";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТочкаУтвердить()
	
	Возврат ПредопределенноеЗначение("БизнесПроцесс.Утверждение.ТочкаМаршрута.Утвердить");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТочкаОзнакомиться()
	
	Возврат ПредопределенноеЗначение("БизнесПроцесс.Утверждение.ТочкаМаршрута.Ознакомиться");
	
КонецФункции

// Признак недоступности строки, переопределяемый для данного вида действия участника.
// Вызывается для строк с участниками, т.е. "нижнего" уровня дерева.
// 
// Параметры:
//  СтрокаДерева - ДанныеФормыЭлементДерева - Строка дерева "Участники".
//  СтрокаРодитель - Неопределено, ДанныеФормыЭлементДерева - Строка родитель строки дерева.
// 
// Возвращаемое значение:
//  Булево - Признак, что строка должна быть недоступна.
&НаКлиенте
Функция СтрокаУчастникаНедоступна(СтрокаДерева, СтрокаРодитель) Экспорт
	
	Возврат СтрокаДерева.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.Завершено")
		И СтрокаДерева.Функция <> ПредопределенноеЗначение(
			"Перечисление.ФункцииУчастниковУтверждения.ОбрабатывающийРезультат");
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы() Экспорт
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЭтап Тогда
		
		Элементы.ПредставлениеСтроки.ТолькоПросмотр = Истина;
		Элементы.СрокПредставление.ТолькоПросмотр = Истина;
		
		Элементы.ЕстьОсобоеНаименованиеОписание.ТолькоПросмотр = Истина;
		Элементы.Описание.ТолькоПросмотр = Истина;
		
	ИначеЕсли ТекущиеДанные.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковУтверждения.ОбрабатывающийРезультат") Тогда
		
		Элементы.ПредставлениеСтроки.ТолькоПросмотр = Ложь;
		Элементы.СрокПредставление.ТолькоПросмотр = Ложь;
		
		Элементы.ЕстьОсобоеНаименованиеОписание.ТолькоПросмотр = Истина;
		Элементы.Описание.ТолькоПросмотр = Ложь;
		
	Иначе
		ТолькоПросмотрСтроки = СтрокаУчастникаНедоступна(ТекущиеДанные, Неопределено);
		Элементы.ПредставлениеСтроки.ТолькоПросмотр = ТолькоПросмотрСтроки;
		Элементы.СрокПредставление.ТолькоПросмотр = ТолькоПросмотрСтроки;
		
		Элементы.ПредставлениеСтроки.КнопкаВыбора = Истина;
		
		Элементы.ЕстьОсобоеНаименованиеОписание.ТолькоПросмотр = ТолькоПросмотрСтроки;
		Элементы.Описание.ТолькоПросмотр = ТолькоПросмотрСтроки;
	КонецЕсли;
	
	ДействияКлиент.УстановитьТолькоПросмотрИУдалениеУчастникаПоЗащищенности(ЭтотОбъект);

КонецПроцедуры

#Область СлужебныеПроцедурыИФункции_Участники

&НаКлиенте
Процедура ПроверитьУчастников(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверкиДействительностиУчастников = 
		РаботаСУчастникамиКлиент.ПроверитьДействительностьУчастников(ЭтотОбъект);
	Если Не РезультатПроверкиДействительностиУчастников.ВсеДействительны Тогда
		
		Отказ = Истина;
		
		Обработчик = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиДействительностиУчастниковПродолжение",
			ЭтотОбъект);
		
		РаботаСУчастникамиКлиент.ОбработатьРезультатПроверкиДействительностиУчастников(
			РезультатПроверкиДействительностиУчастников,
			Обработчик);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработать результат проверки действительности участников продолжение.
// 
// Параметры:
//  Результат - Структура - результат проверки и выбор пользователя:
//   * РезультатПроверки - см. РаботаСУчастникамиВызовСервера.ПроверитьДействительностьУчастников
//   * ВариантОбработки - Число, КодВозвратаДиалога - 0 - заменить, 1 - оставить как есть,
//                                                    КодВозвратаДиалога.Отмена - отмена.
//  ДополнительныеПараметры - Произвольный
//
&НаКлиенте
Процедура ОбработатьРезультатПроверкиДействительностиУчастниковПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ВариантОбработки = Результат.ВариантОбработки;
	
	// Выбрана отмена.
	Если ВариантОбработки = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	// Хочет продолжить как есть.
	Если ВариантОбработки = 1 Тогда
		ЗаписатьЗакрытьБезПроверкиУчастников();
		Возврат;
	КонецЕсли;
	
	// Согласился заменить участников.
	Если ВариантОбработки = 0 Тогда
		ОбработчикЗамены = Новый ОписаниеОповещения("УчастникиЗамена", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.ФормаЗаменыУчастников", Результат.РезультатПроверки, ЭтотОбъект,,,,
			ОбработчикЗамены);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЗакрытьБезПроверкиУчастников(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не Записать(Новый Структура("НеПроверятьУчастников", Истина)) Тогда
		Возврат;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиЗамена(Замены, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Замены = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаменитьУчастниковНаСервере(Замены);
	РазвернутьДеревоУчастников();
	
КонецПроцедуры

// Заменить участников на сервере.
// 
// Параметры:
//  Замены - Массив Из Структура:
//   * ВидУчастника - СправочникСсылка.ВидыУчастниковЗадач
//   * Участник - СправочникСсылка.Сотрудники
//   * УчастникЗаменитьНа - СправочникСсылка.Сотрудники
&НаСервере
Процедура ЗаменитьУчастниковНаСервере(Замены)
	
	БылиЗамены = Ложь;
	
	Для Каждого Замена Из Замены Цикл
		
		КлючиСтруктурыОтбора = "ФункцияУчастника, Участник";
		СтруктураОтбора = Новый Структура(КлючиСтруктурыОтбора);
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Замена, КлючиСтруктурыОтбора);
		НайденныеСтрокиУчастников = Объект.Участники.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаУчастника Из НайденныеСтрокиУчастников Цикл
			СтрокаУчастника.Участник = Замена.УчастникЗаменитьНа;
			БылиЗамены = Истина;
		КонецЦикла; 
		
	КонецЦикла;
	
	Если БылиЗамены Тогда
		
		Модифицированность = Истина;
		ОбновитьДеревоУчастниковПоОбъекту();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МоментРазыменованияУчастниковОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#КонецОбласти