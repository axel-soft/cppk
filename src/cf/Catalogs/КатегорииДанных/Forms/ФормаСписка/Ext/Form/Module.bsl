
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЧтениеДокументовПредприятия = ПравоДоступа("Чтение", Метаданные.Справочники.ДокументыПредприятия);
	ЧтениеМероприятий = ПравоДоступа("Чтение", Метаданные.Справочники.Мероприятия);
	ЧтениеПроектов = ПравоДоступа("Чтение", Метаданные.Справочники.Проекты);
	ЧтениеПроектныхЗадач = ПравоДоступа("Чтение", Метаданные.Справочники.ПроектныеЗадачи);
	
	Если НЕ ЧтениеДокументовПредприятия Тогда
		Элементы.СписокДокументыПредприятия.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ЧтениеМероприятий Тогда
		Элементы.СписокМероприятия.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ЧтениеПроектов Тогда
		Элементы.СписокПроекты.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ЧтениеПроектныхЗадач Тогда
		Элементы.СписокПроектныеЗадачи.Видимость = Ложь;
	КонецЕсли;
	
	// Контроль
	ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	СписокФайлы.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата);
	РаботаСКатегориямиДанныхКлиентСервер.ОтключитьКатегорииКакПараметры(СписокФайлы, 10);
	
	ВестиУчетСканКопийОригиналовДокументов = 
		ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов");
	
	Если ЧтениеДокументовПредприятия Тогда 
		СписокДокументыПредприятия.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата);
		СписокДокументыПредприятия.Параметры.УстановитьЗначениеПараметра("ВестиУчетСканКопийОригиналовДокументов", 
			ВестиУчетСканКопийОригиналовДокументов);
		РаботаСКатегориямиДанныхКлиентСервер.ОтключитьКатегорииКакПараметры(СписокДокументыПредприятия, 10);
		СписокДокументыПредприятия.Параметры.УстановитьЗначениеПараметра(
			"Пользователь", Пользователи.ТекущийПользователь());
			
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруДел") Тогда 
			Элементы.ИндексСостоянияДела.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЧтениеМероприятий Тогда
		СписокМероприятия.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата);
		РаботаСКатегориямиДанныхКлиентСервер.ОтключитьКатегорииКакПараметры(СписокМероприятия, 10);
	КонецЕсли;
	
	Если ЧтениеПроектов Тогда 
		СписокПроекты.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата);
		РаботаСКатегориямиДанныхКлиентСервер.ОтключитьКатегорииКакПараметры(СписокПроекты, 10);
	КонецЕсли;
	
	Если ЧтениеПроектныхЗадач Тогда 
		СписокПроектныеЗадачи.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата);
		РаботаСКатегориямиДанныхКлиентСервер.ОтключитьКатегорииКакПараметры(СписокПроектныеЗадачи, 10);
	КонецЕсли;
	
	ПостроитьДеревоКатегорий();
	
	Если Параметры.Свойство("СписокВыбранныхКатегорий") 
		И Параметры.СписокВыбранныхКатегорий <> Неопределено
		И Параметры.СписокВыбранныхКатегорий.Количество() > 0 Тогда
		Для Каждого выбраннаяКатегория Из Параметры.СписокВыбранныхКатегорий Цикл
			ВыбранныеКатегории.Добавить(ВыбраннаяКатегория, РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(ВыбраннаяКатегория), Истина);
		КонецЦикла;
		ПолучитьКоличествоКатегорийДляПоиска();
		СтрокаЗаголовка = НСтр("ru = 'Категории, по которым выполняется отбор'");
		Если КоличествоКатегорийДляПоиска > 0 Тогда
			СтрокаЗаголовка = СтрокаЗаголовка + " (" + КоличествоКатегорийДляПоиска + ")";
		КонецЕсли;
		Элементы.ВыбранныеКатегории.Заголовок = СтрокаЗаголовка;
	Иначе
		ВыбранныеКатегорииПриОткрытии = ХранилищеНастроекДанныхФорм.Загрузить("ФормаСпискаКатегорий", "ВыбранныеКатегории");
	КонецЕсли;
	
	СписокРаскрытыхКатегорий = ХранилищеНастроекДанныхФорм.Загрузить("ФормаСпискаКатегорий", "РаскрытыеКатегории");	
	ТекущаяКатегория = ХранилищеНастроекДанныхФорм.Загрузить("ФормаСпискаКатегорий", "ТекущаяКатегория"); 
	
	ОтборДанных = ХранилищеНастроекДанныхФорм.Загрузить("ФормаСпискаКатегорий", "ОтборДанных");	
	СУчетомПодкатегорий = ХранилищеНастроекДанныхФорм.Загрузить("ФормаСпискаКатегорий", "СУчетомПодкатегорий");
	ПоказыватьСписокОтмеченных = ХранилищеНастроекДанныхФорм.Загрузить("ФормаСпискаКатегорий", "ПоказыватьСписокОтмеченных");
	
	Если Не ЗначениеЗаполнено(ОтборДанных) Тогда
		ОтборДанных = "ПоВсем";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СУчетомПодкатегорий) Тогда
		СУчетомПодкатегорий = Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ПоказыватьСписокОтмеченных) Тогда
		ПоказыватьСписокОтмеченных = Ложь;
	КонецЕсли;
	Если ОтборДанных = "ПоВсем" Тогда
		Элементы.ДеревоКатегорийПоказыватьСУчетомОднойИзОтмеченных.Пометка = Ложь;
		Элементы.ДеревоКатегорийПоказыватьСУчетомВсехОтмеченных.Пометка = Истина;
	Иначе
		Элементы.ДеревоКатегорийПоказыватьСУчетомОднойИзОтмеченных.Пометка = Истина;
		Элементы.ДеревоКатегорийПоказыватьСУчетомВсехОтмеченных.Пометка = Ложь;
	КонецЕсли;
	
	Элементы.ДеревоКатегорийПоказыватьСУчетомИерархии.Пометка = СУчетомПодкатегорий;
	Элементы.ДеревоКатегорийПоказыватьВыбранныеКатегории.Пометка = ПоказыватьСписокОтмеченных;
	Элементы.ВыбранныеКатегории.Видимость = ПоказыватьСписокОтмеченных;
	
	СписокФайлы.Параметры.УстановитьЗначениеПараметра("ПользовательИЕгоСотрудники", 
		СотрудникиВызовСервера.ПользовательИЕгоСотрудники(Пользователи.ТекущийПользователь()));	

	РаботаСФайламиВызовСервера.ЗаполнитьУсловноеОформлениеСпискаФайлов(СписокФайлы);
	
	ПоказыватьКолонкуРазмер = РаботаСФайламиВызовСервера.ПолучитьПоказыватьКолонкуРазмер();
	Если ПоказыватьКолонкуРазмер = Ложь Тогда
		Элементы.СписокФайлы.ПодчиненныеЭлементы.ТекущаяВерсияРазмер.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() И
		Не ЭлектроннаяПодпись.ИспользоватьШифрование() Тогда
		
		Элементы.СписокФайлы.ПодчиненныеЭлементы.ПодписанЭП.Видимость = Ложь;
	КонецЕсли;

	ПоказыватьКолонкуРазмер = РаботаСФайламиВызовСервера.ПолучитьПоказыватьКолонкуРазмер();
	Если ПоказыватьКолонкуРазмер = Ложь Тогда
		Элементы.ТекущаяВерсияРазмер.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
		Если ЧтениеДокументовПредприятия Тогда
			Элементы.СписокДокументыПредприятияПодписан.Видимость = Ложь;
		КонецЕсли;
		Элементы.ПодписанЭП.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи") Тогда 
		Если ЧтениеДокументовПредприятия Тогда
			Элементы.СписокДокументыПредприятияЗадачи.Видимость = Ложь;
		КонецЕсли;
		Элементы.Задачи.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда 
		Элементы.СписокДокументыПредприятияСостояниеКонтроля.Видимость = Ложь;
		Элементы.СписокМероприятияСостояниеКонтроля.Видимость = Ложь;
		Элементы.СписокФайлыСостояниеКонтроля.Видимость = Ложь;
		Элементы.СписокПроектыСостояниеКонтроля.Видимость = Ложь;
		Элементы.СписокПроектныеЗадачиСостояниеКонтроля.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		НастроитьЭлементыФормыДляМобильногоУстройства();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ВыбранныеКатегории.Количество() > 0 Тогда
	РаботаСКатегориямиДанныхКлиент.УстановитьПризнакВыбораЭлементовДерева(Элементы.ДеревоКатегорий, ДеревоКатегорий, ВыбранныеКатегории);
	Иначе	
		РаботаСКатегориямиДанныхКлиент.УстановитьПризнакВыбораЭлементовДерева(Элементы.ДеревоКатегорий, ДеревоКатегорий, ВыбранныеКатегорииПриОткрытии, ВыбранныеКатегории);
		РаботаСКатегориямиДанныхКлиент.УстановитьРазвернутостьЭлементовДерева(Элементы.ДеревоКатегорий, ДеревоКатегорий, СписокРаскрытыхКатегорий);
	КонецЕсли;
	
	РаботаСКатегориямиДанныхКлиентСервер.УстановитьТекущуюКатегориюВДеревеПоСсылке(Элементы.ДеревоКатегорий, ДеревоКатегорий, ТекущаяКатегория);
	ПрименитьВыборКатегорий();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	СписокРаскрытыхКатегорий.Очистить();
	РаботаСКатегориямиДанныхКлиент.ПолучитьМассивРаскрытыхКатегорий(Элементы.ДеревоКатегорий, ДеревоКатегорий.ПолучитьЭлементы(), СписокРаскрытыхКатегорий);
	ПриЗакрытииНаСервере(СписокРаскрытыхКатегорий);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере(СписокРаскрытыхКатегорий = Неопределено)
	
	ХранилищеНастроекДанныхФорм.Сохранить("ФормаСпискаКатегорий", "РаскрытыеКатегории", СписокРаскрытыхКатегорий);
	ХранилищеНастроекДанныхФорм.Сохранить("ФормаСпискаКатегорий", "ВыбранныеКатегории", ВыбранныеКатегории);
	ХранилищеНастроекДанныхФорм.Сохранить("ФормаСпискаКатегорий", "ТекущаяКатегория", ТекущаяКатегория);
	ХранилищеНастроекДанныхФорм.Сохранить("ФормаСпискаКатегорий", "ОтборДанных", ОтборДанных);
	ХранилищеНастроекДанныхФорм.Сохранить("ФормаСпискаКатегорий", "СУчетомПодкатегорий", СУчетомПодкатегорий);
	ХранилищеНастроекДанныхФорм.Сохранить("ФормаСпискаКатегорий", "ПоказыватьСписокОтмеченных", ПоказыватьСписокОтмеченных);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "РедактироваласьКатегория" Тогда
		ОбновитьДеревоКатегорий(Неопределено);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда
		УстановитьДоступностьФайловыхКоманд();
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьКонтроля" Тогда
		Если ЗначениеЗаполнено(Параметр.Предмет)
			И (ТипЗнч(Параметр.Предмет) = Тип("СправочникСсылка.ДокументыПредприятия")
			Или ТипЗнч(Параметр.Предмет) = Тип("СправочникСсылка.Файлы")
			Или ТипЗнч(Параметр.Предмет) = Тип("СправочникСсылка.Мероприятия")
			Или ТипЗнч(Параметр.Предмет) = Тип("СправочникСсылка.Проекты")
			Или ТипЗнч(Параметр.Предмет) = Тип("СправочникСсылка.ПроектныеЗадачи")) Тогда 
			ОповеститьОбИзменении(Параметр.Предмет);
		КонецЕсли;	
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВыборСтраницыМКОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = "ДокументыПредприятия" Тогда
		Элементы.СтраницыСпискиОбъектов.ТекущаяСтраница = Элементы.СтраницаДокументыПредприятия;
		
	ИначеЕсли ВыбранноеЗначение = "Мероприятия" Тогда
		Элементы.СтраницыСпискиОбъектов.ТекущаяСтраница = Элементы.СтраницаМероприятия;
	
	ИначеЕсли ВыбранноеЗначение = "Файлы" Тогда
		Элементы.СтраницыСпискиОбъектов.ТекущаяСтраница = Элементы.СтраницаФайлы;
		
	ИначеЕсли ВыбранноеЗначение = "Проекты" Тогда
		Элементы.СтраницыСпискиОбъектов.ТекущаяСтраница = Элементы.СтраницаПроекты;
		
	ИначеЕсли ВыбранноеЗначение = "ПроектныеЗадачи" Тогда
		Элементы.СтраницыСпискиОбъектов.ТекущаяСтраница = Элементы.СтраницаПроектныеЗадачи;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоКатегорий

&НаКлиенте
Процедура ДеревоКатегорийПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ДеревоКатегорий.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяКатегория = Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ДеревоКатегорий.ТекущиеДанные <> Неопределено Тогда
		ТекущаяКатегория = Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка;
	КонецЕсли;
	КоличествоВыбранныхКатегорий = ВыбранныеКатегории.Количество();
	Если КоличествоВыбранныхКатегорий = 0 И ЗначениеЗаполнено(ТекущаяКатегория) Тогда
		ВыбранныеКатегории.Добавить(
			ТекущаяКатегория,
			Элементы.ДеревоКатегорий.ТекущиеДанные.ПолноеНаименование,
			Ложь);
		ПодключитьОбработчикОжидания("ПрименитьВыборКатегорий", 0.2, Истина);
		Возврат;
	КонецЕсли;
	
	Если КоличествоВыбранныхКатегорий = 1
		И ВыбранныеКатегории[0].Пометка = Ложь
		И ВыбранныеКатегории[0].Значение <> Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка Тогда
		ВыбранныеКатегории[0].Значение = Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка;
		ВыбранныеКатегории[0].Представление = 
			РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(ВыбранныеКатегории[0].Значение);
		ПодключитьОбработчикОжидания("ПрименитьВыборКатегорий", 0.2, Истина);	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийВыбранаПриИзменении(Элемент)
	
	Если Элементы.ДеревоКатегорий.ТекущиеДанные.Выбрана
		И Не ПроверитьПредельноеКоличествоОтмеченныхКатегорий() Тогда
		Элементы.ДеревоКатегорий.ТекущиеДанные.Выбрана = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ВыбранныеКатегории.Количество() = 1
		И ВыбранныеКатегории[0].Значение = ТекущаяКатегория Тогда
		
		ВыбранныеКатегории[0].Пометка = Элементы.ДеревоКатегорий.ТекущиеДанные.Выбрана;
		Возврат;
		
	КонецЕсли;
	ПодключитьОбработчикОжидания("ПрименитьВыборКатегорий", 0.2, Истина);
	
КонецПроцедуры	

&НаКлиенте
Процедура ДеревоКатегорийОбработкаЗапросаОбновления()
	Элементы.ДеревоКатегорий.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ЗначениеЗаполнения = Новый Структура;
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения, ЗначениеКопирования");
	Если НЕ Копирование Тогда
		ЗначениеЗаполнения.Вставить("Родитель", ТекущаяКатегория);				
	Иначе
		ПараметрыФормы.ЗначениеКопирования = ТекущаяКатегория;
	КонецЕсли;
	ПараметрыФормы.ЗначенияЗаполнения = ЗначениеЗаполнения;
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы, Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	ОбновитьДеревоКатегорий(Неопределено);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Строка) 
		ИЛИ ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Число") Тогда
		Источник = ДеревоКатегорий.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
		Если Строка = Неопределено Тогда
			Приемник = Неопределено;
		Иначе
			Приемник = ДеревоКатегорий.НайтиПоИдентификатору(Строка);
		КонецЕсли;
		
		Если Приемник = Неопределено
			ИЛИ Приемник.Ссылка = ПредопределенноеЗначение("Справочник.КатегорииДанных.ВсеКатегории")
			ИЛИ Источник.Персональная = Приемник.Персональная Тогда
			
			Если Приемник = Неопределено Тогда
				ПереназначитьРодителя(Источник.Ссылка, Неопределено);
			Иначе
				ПереназначитьРодителя(Источник.Ссылка, Приемник.Ссылка);
			КонецЕсли;
			
			ОбновитьДеревоКатегорий(Неопределено);	
		ИначеЕсли Приемник <> Неопределено Тогда
			Если Источник.Персональная Тогда 
				Текст = НСтр("ru = 'Запрещено переносить персональную категорию в общие.'");
			Иначе
				Текст = НСтр("ru = 'Запрещено переносить общую категорию в персональные.'");
			КонецЕсли;
			ПоказатьПредупреждение(, Текст);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
		И ЗначениеЗаполнено(Строка) Тогда
		
		ЭлементДерева = ДеревоКатегорий.НайтиПоИдентификатору(Строка);
		Если НЕ ЭлементДерева.Ссылка.Пустая()
			И НЕ ЭлементДерева.Ссылка = ПредопределенноеЗначение("Справочник.КатегорииДанных.ВсеКатегории") Тогда		
						
			Категория = ЭлементДерева.Ссылка;
			Режим = РежимДиалогаВопрос.ДаНет;
			Если ПараметрыПеретаскивания.Значение.Количество() > 1 Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Добавить объекты в категорию ""%1""?'"),
					Категория);
			Иначе
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Добавить объект в категорию ""%1""?'"),
					Категория);
			КонецЕсли;
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("ПараметрыПеретаскивания", ПараметрыПеретаскивания);
			ПараметрыОповещения.Вставить("Категория", Категория);
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ДеревоКатегорийПеретаскиваниеПродолжение",
				ЭтотОбъект,
				ПараметрыОповещения);

			ПоказатьВопрос(ОписаниеОповещения, Текст, Режим, 0, КодВозвратаДиалога.Нет);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПеретаскиваниеПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СтрокаСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Нстр("ru = 'Выполняется установка категории ""%1"" у объектов. Пожалуйста, подождите...'"),
			Параметры.Категория);
	    Состояние(СтрокаСостояния);
		РаботаСКатегориямиДанных.ПрисвоитьКатегориюМассивуОбъектов(Параметры.ПараметрыПеретаскивания.Значение, Параметры.Категория);
		Состояние();
		
		ОбновитьДеревоКатегорий(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ПометитьНаУдаление(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элементы.ДеревоКатегорий.ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка) Тогда
		
		ПараметрыФормы = Новый Структура("Ключ", Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка); 
		ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокФайлы

&НаКлиенте
Процедура СписокФайлыПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;	
	
	
	СтандартнаяОбработка = Ложь;
	
	КакОткрывать = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ДействиеПоДвойномуЩелчкуМыши;
	
	Если КакОткрывать = "ОткрыватьКарточку" Тогда
		ПоказатьЗначение(, ВыбраннаяСтрока);
		Возврат;
	КонецЕсли;
	
	ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяКаталога = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	Если ИмяКаталога = Неопределено ИЛИ ПустаяСтрока(ИмяКаталога) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ВыбраннаяСтрока, Неопределено, УникальныйИдентификатор);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФайлыОбработкаЗапросаОбновления()
	Элементы.СписокФайлы.Обновить();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокВыбор

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	РезультатОткрытьКарточку = "ОткрытьКарточку";
	
	Если Результат = РезультатРедактировать Тогда
		Обработчик = Новый ОписаниеОповещения("СписокВыборПослеРедактированияФайла", ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	ИначеЕсли Результат = РезультатОткрытьКарточку Тогда
		ПоказатьЗначение(, ПараметрыВыполнения.ДанныеФайла.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеРедактированияФайла(Результат, ПараметрыВыполнения) Экспорт
	
	ОповеститьОбИзменении(ПараметрыВыполнения.ДанныеФайла.Ссылка);
	
	УстановитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокМероприятия

&НаСервереБезКонтекста
Процедура СписокМероприятияПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)

	Для Каждого КлючИЗначение Из Строки Цикл
		
		ДанныеСтроки = КлючИЗначение.Значение.Данные;
		
		// Период строкой
		Если ДанныеСтроки.Свойство("ПериодСтрокой") Тогда
			ДанныеСтроки.ПериодСтрокой = УправлениеМероприятиями.МестныйПериодСтрокой(
				ДанныеСтроки.ДатаНачала,
				ДанныеСтроки.ДатаОкончания);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокМероприятияОбработкаЗапросаОбновления()
	Элементы.СписокМероприятия.Обновить();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокДокументыПредприятия

&НаКлиенте
Процедура СписокДокументыПредприятияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСоСпискамиДокументовКлиент.ОбработкаВыбора(
		ЭтотОбъект, Элементы.СписокДокументыПредприятия, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументыПредприятияОбработкаЗапросаОбновления()
	Элементы.СписокДокументыПредприятия.Обновить();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПроекты

&НаКлиенте
Процедура СписокПроектыОбработкаЗапросаОбновления()
	Элементы.СписокПроекты.Обновить();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПроектныеЗадачи

&НаКлиенте
Процедура СписокПроектныеЗадачиОбработкаЗапросаОбновления()
	Элементы.СписокПроектныеЗадачи.Обновить();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПометитьКакПрочтенные(Команда)
	
	РаботаСоСпискамиДокументовКлиент.ПометитьКакПрочтенные(Элементы.СписокДокументыПредприятия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСУчетомВсехОтмеченных(Команда)
	
	ОтборДанных = "ПоВсем";
	Элементы.ДеревоКатегорийПоказыватьСУчетомОднойИзОтмеченных.Пометка = Ложь;
	Элементы.ДеревоКатегорийПоказыватьСУчетомВсехОтмеченных.Пометка = Истина;
	
	ПодключитьОбработчикОжидания("ПрименитьВыборКатегорий", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСУчетомОднойИзОтмеченных(Команда)
	
	ОтборДанных = "ПоОднойИз";
	Элементы.ДеревоКатегорийПоказыватьСУчетомОднойИзОтмеченных.Пометка = Истина;
	Элементы.ДеревоКатегорийПоказыватьСУчетомВсехОтмеченных.Пометка = Ложь;
	
	ПодключитьОбработчикОжидания("ПрименитьВыборКатегорий", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСУчетомИерархии(Команда)
	
	СУчетомПодкатегорий = НЕ СУчетомПодкатегорий;
	Элементы.ДеревоКатегорийПоказыватьСУчетомИерархии.Пометка = СУчетомПодкатегорий;
	
	ПодключитьОбработчикОжидания("ПрименитьВыборКатегорий", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьОтмеченныеКатегории(Команда)
	
	ПоказыватьСписокОтмеченных = НЕ ПоказыватьСписокОтмеченных;
	Элементы.ДеревоКатегорийПоказыватьВыбранныеКатегории.Пометка = ПоказыватьСписокОтмеченных;
	Элементы.ВыбранныеКатегории.Видимость = ПоказыватьСписокОтмеченных;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоКатегорий(Команда)
	
	СписокРаскрытыхКатегорий.Очистить();
	РаботаСКатегориямиДанныхКлиент.ПолучитьМассивРаскрытыхКатегорий(Элементы.ДеревоКатегорий, ДеревоКатегорий.ПолучитьЭлементы(), СписокРаскрытыхКатегорий);
	
	Если Элементы.ДеревоКатегорий.ТекущиеДанные <> Неопределено Тогда
		ТекущаяКатегорияДляОбновления = Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка;	
	КонецЕсли;
	
	ПостроитьДеревоКатегорий();
	
	РаботаСКатегориямиДанныхКлиент.УстановитьПризнакВыбораЭлементовДерева(Элементы.ДеревоКатегорий, ДеревоКатегорий, ВыбранныеКатегории);
	РаботаСКатегориямиДанныхКлиент.УстановитьРазвернутостьЭлементовДерева(Элементы.ДеревоКатегорий, ДеревоКатегорий, СписокРаскрытыхКатегорий);
	РаботаСКатегориямиДанныхКлиентСервер.УстановитьТекущуюКатегориюВДеревеПоСсылке(Элементы.ДеревоКатегорий, ДеревоКатегорий, ТекущаяКатегорияДляОбновления);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдаление(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДеревоКатегорийПередУдалениемПродолжение",
		ЭтотОбъект);

	РаботаСКатегориямиДанныхКлиент.ПометитьКатегориюНаУдаление(
		Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка,
		Элементы.ДеревоКатегорий.ТекущиеДанные.ПометкаУдаления,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПередУдалениемПродолжение(Результат, Параметры) Экспорт 

	ОбновитьДеревоКатегорий(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеОтметки(Команда)
	
	Если ВыбранныеКатегории.Количество() > 0 Тогда
		СнятьВсеОтметкиСервер();
		ПодключитьОбработчикОжидания("ПрименитьВыборКатегорий", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКатегорию(Команда)
	
	ТекущаяКатегория = Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка;
	Если Элементы.ДеревоКатегорий.ТекущийЭлемент.Вид <> ВидПоляФормы.ПолеФлажка И ЗначениеЗаполнено(ТекущаяКатегория) Тогда		
		ПараметрыФормы = Новый Структура("Ключ", ТекущаяКатегория);
		ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы, Элементы.ДеревоКатегорий);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////
//процедуры и функции для работы со списком файлов//
////////////////////////////////////////////////////

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект);
	РаботаСФайламиКлиент.РедактироватьСОповещением(Обработчик, Элементы.СписокФайлы.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект);
	
	ТекущиеДанные = Элементы.СписокФайлы.ТекущиеДанные;	
		
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Обработчик, 
		Элементы.СписокФайлы.ТекущаяСтрока, ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОбновленияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;
	ПараметрыОбновленияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	ПараметрыОбновленияФайла.Редактирует = ТекущиеДанные.Редактирует;
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура Занять(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;

	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект);
	РаботаСФайламиКлиент.ЗанятьСОповещением(Обработчик, Элементы.СписокФайлы.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогФайла(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Элементы.СписокФайлы.ТекущаяСтрока, Неопределено, УникальныйИдентификатор);
	КомандыРаботыСФайламиКлиент.ОткрытьКаталогФайла(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект);
	
	ТекущиеДанные = Элементы.СписокФайлы.ТекущиеДанные;
		
	ПараметрыОсвобожденияФайла = РаботаСФайламиКлиент.ПараметрыОсвобожденияФайла(Обработчик, 
		Элементы.СписокФайлы.ТекущаяСтрока);
	ПараметрыОсвобожденияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;	
	ПараметрыОсвобожденияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;	
	ПараметрыОсвобожденияФайла.Редактирует = ТекущиеДанные.Редактирует;	
	РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(ПараметрыОсвобожденияФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элементы.СписокФайлы.ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из Элементы.СписокФайлы.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.СписокФайлы.ДанныеСтроки(ВыбраннаяСтрока);	
			СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			РаботаСФайламиКлиент.СохранитьФайлыКак(СписокФайловДляВыгрузки, УникальныйИдентификатор);
		КонецЕсли;
	ИначеЕсли Элементы.СписокФайлы.ВыделенныеСтроки.Количество() = 1 Тогда
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(Элементы.СписокФайлы.ТекущаяСтрока, Неопределено, УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект);
	
	РаботаСФайламиКлиент.СохранитьИзмененияФайлаСОповещением(
		Обработчик,
		Элементы.СписокФайлы.ТекущаяСтрока, 
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаИРабочийКаталог(Элементы.СписокФайлы.ТекущаяСтрока);
	
	РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
		Неопределено,
		ДанныеФайла,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Распознать(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьСписокФайлов", ЭтотОбъект);
	
	Если Элементы.СписокФайлы.ВыделенныеСтроки.Количество() > 1 Тогда
		КомандыРаботыСФайламиКлиент.РаспознатьФайлСОповещением(Обработчик, Элементы.СписокФайлы.ВыделенныеСтроки);
	Иначе
		КомандыРаботыСФайламиКлиент.РаспознатьФайлСОповещением(Обработчик, Элементы.СписокФайлы.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда)
	
	МассивФайлов = Новый Массив;
	Для Каждого ФайлСсылка Из Элементы.СписокФайлы.ВыделенныеСтроки Цикл
		Если Не ФайловыеКомандыДоступны(ФайлСсылка) Тогда 
			Продолжить;
		КонецЕсли;
		МассивФайлов.Добавить(ФайлСсылка);
	КонецЦикла;
	
	РаботаСФайламиСлужебныйКлиент.ПодписатьФайл(МассивФайлов, УникальныйИдентификатор,
		Новый ОписаниеОповещения("ПодписатьЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭПИзФайла(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйКлиент.ДобавитьПодписьИзФайла(
		Элементы.СписокФайлы.ТекущаяСтрока,
		УникальныйИдентификатор,
		Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВместеСЭП(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйКлиент.СохранитьФайлВместеСПодписью(Элементы.СписокФайлы.ТекущаяСтрока, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Зашифровать(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектСсылка = Элементы.СписокФайлы.ТекущаяСтрока;
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(ОбъектСсылка);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", ОбъектСсылка);
	Обработчик = Новый ОписаниеОповещения("ЗашифроватьПослеШифрованияНаКлиенте", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиСлужебныйКлиент.Зашифровать(Обработчик, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектСсылка = Элементы.СписокФайлы.ТекущаяСтрока;
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(ОбъектСсылка);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", ОбъектСсылка);
	Обработчик = Новый ОписаниеОповещения("РасшифроватьПослеРасшифровкиНаКлиенте", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиСлужебныйКлиент.Расшифровать(Обработчик, ДанныеФайла.Ссылка, УникальныйИдентификатор, ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДокумент(Команда)
	
	Если Элементы.СтраницыСпискиОбъектов.ТекущаяСтраница = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСписка = СтрЗаменить(Элементы.СтраницыСпискиОбъектов.ТекущаяСтраница.Имя, "Страница", "");
	ТекущийСписок = Элементы["Список" + ИмяСписка];
	
	Если ТекущийСписок.ТекущаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран документ.'"));
		Возврат;
	КонецЕсли;
	
	МассивДанныхДляЗанесенияВРегистр = Новый Массив;
	МассивАдресов = Новый Массив;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Объект", ТекущийСписок.ТекущиеДанные.Ссылка);
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПодписатьДокументЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	
	ПараметрыПодписания = РаботаСЭПКлиент.НовыеПараметрыПодписания();
	ПараметрыПодписания.ИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыПодписания.ОбработчикЗавершения = ОбработчикЗавершения;
	
	РаботаСЭПКлиент.Подписать(ТекущийСписок.ТекущиеДанные.Ссылка, ПараметрыПодписания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДокументЗавершение(Результат, Параметры) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСЭПКлиент.ПослеПодписанияОбъекта(Результат, Параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура Контроль(Команда)
	
	Если Элементы.СтраницыСпискиОбъектов.ТекущаяСтраница = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСписка = СтрЗаменить(Элементы.СтраницыСпискиОбъектов.ТекущаяСтраница.Имя, "Страница", "");
	ТекущийСписок = Элементы["Список" + ИмяСписка];
	
	Если ТекущийСписок.ТекущаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран объект.'"));
		Возврат;
	КонецЕсли;

	ТекущийДанные = ТекущийСписок.ТекущиеДанные;
	Если ТекущийДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	КонтрольКлиент.ОбработкаКомандыКонтроль(ТекущийДанные.Ссылка, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПостроитьДеревоКатегорий()
	
	Дерево = РеквизитФормыВЗначение("ДеревоКатегорий");
	Дерево = РаботаСКатегориямиДанных.ПостроитьДеревоКатегорий(Дерево,, Истина,,, Ложь);	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоКатегорий");
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьПредельноеКоличествоОтмеченныхКатегорий()
	
	КоличествоОтмеченныхКатегорий = 0;
	Для Каждого ВыбраннаяКатегория Из ВыбранныеКатегории Цикл
		Если ВыбраннаяКатегория.Пометка Тогда
			КоличествоОтмеченныхКатегорий = КоличествоОтмеченныхКатегорий + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоОтмеченныхКатегорий = 10 Тогда
		ТекстПредупреждения = НСтр("ru = 'Одновременно может быть отмечено не более 10 категорий.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПолучитьВыбранныеКатегории()
	
	ПолучитьВыбранныеКатегорииВыполнить(ДеревоКатегорий.ПолучитьЭлементы(), ВыбранныеКатегории);
	
	ЕстьОтмеченныеКатегории = Ложь;
	Для Каждого Элемент Из ВыбранныеКатегории Цикл
		Если Элемент.Пометка = Истина Тогда
			ЕстьОтмеченныеКатегории = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОтмеченныеКатегории Тогда
		Для Каждого Элемент Из ВыбранныеКатегории Цикл
			Если Элемент.Пометка = Ложь Тогда
				ВыбранныеКатегории.Удалить(Элемент);
				Прервать;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	ПолучитьКоличествоКатегорийДляПоиска();
	СтрокаЗаголовка = НСтр("ru = 'Категории, по которым выполняется отбор'");
	Если КоличествоКатегорийДляПоиска > 0 Тогда
		СтрокаЗаголовка = СтрокаЗаголовка + " (" + КоличествоКатегорийДляПоиска + ")";
		
		Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
			Элементы.ГруппаДерево.Заголовок = НСтр("ru = 'Отбор по категориям ('") + КоличествоКатегорийДляПоиска + ")";
		КонецЕсли;
		
	КонецЕсли;
	Элементы.ВыбранныеКатегории.Заголовок = СтрокаЗаголовка;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеКатегорииОбработкаЗапросаОбновления()
	Элементы.ВыбранныеКатегории.Обновить();
КонецПроцедуры

&НаСервере
Процедура ПолучитьВыбранныеКатегорииВыполнить(ЭлементыОдногоУровня, ВыбранныеКатегории)
	
	Для Каждого ЭлементУровня Из ЭлементыОдногоУровня Цикл
		Если ЭлементУровня.Выбрана Тогда
			ВыбранныеКатегории.Добавить(ЭлементУровня.Ссылка, ЭлементУровня.ПолноеНаименование, Истина);
		ИначеЕсли ЭлементУровня.Ссылка = ТекущаяКатегория Тогда
			ВыбранныеКатегории.Добавить(ЭлементУровня.Ссылка, ЭлементУровня.ПолноеНаименование, Ложь);			
		КонецЕсли;
		ПолучитьВыбранныеКатегорииВыполнить(ЭлементУровня.ПолучитьЭлементы(), ВыбранныеКатегории);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьКоличествоКатегорийДляПоиска()
	
	КоличествоВыбранныхКатегорий = ВыбранныеКатегории.Количество();
	КоличествоОтмеченныхКатегорий = 0;
	Для Каждого Элемент Из ВыбранныеКатегории Цикл
		Если Элемент.Пометка Тогда
			КоличествоОтмеченныхКатегорий = КоличествоОтмеченныхКатегорий + 1;
		КонецЕсли;
	КонецЦикла;
		
	Элементы.ДеревоКатегорийПоказыватьСУчетомВсехОтмеченных.Доступность = КоличествоОтмеченныхКатегорий > 1;
	Элементы.ДеревоКатегорийПоказыватьСУчетомОднойИзОтмеченных.Доступность = КоличествоОтмеченныхКатегорий > 1;
	
	КоличествоКатегорийДляПоиска = КоличествоВыбранныхКатегорий;
	Если КоличествоВыбранныхКатегорий > 1 Тогда
		КоличествоКатегорийДляПоиска = КоличествоОтмеченныхКатегорий;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьОтборПоКатегориямИПоказатьКоличествоОбъектов()
	
	ВыбранныеКатегории.Очистить();
	ПолучитьВыбранныеКатегории();
	
	ПолучитьКоличествоКатегорийДляПоиска();
	
	РаботаСКатегориямиДанныхКлиентСервер.ОтключитьКатегорииКакПараметры(СписокФайлы, 10);
	
	Если ЧтениеДокументовПредприятия Тогда
		РаботаСКатегориямиДанныхКлиентСервер.ОтключитьКатегорииКакПараметры(СписокДокументыПредприятия, 10);
	КонецЕсли;
	
	Если ЧтениеМероприятий Тогда
		РаботаСКатегориямиДанныхКлиентСервер.ОтключитьКатегорииКакПараметры(СписокМероприятия, 10);
	КонецЕсли;
	
	Если ЧтениеПроектов Тогда
		РаботаСКатегориямиДанныхКлиентСервер.ОтключитьКатегорииКакПараметры(СписокПроекты, 10);
	КонецЕсли;
	
	Если ЧтениеПроектныхЗадач Тогда
		РаботаСКатегориямиДанныхКлиентСервер.ОтключитьКатегорииКакПараметры(СписокПроектныеЗадачи, 10);
	КонецЕсли;
	
	Если ВыбранныеКатегории.Количество() > 0 Тогда
		
		СписокФайлы.ТекстЗапроса = СтрЗаменить(СписокФайлы.ТекстЗапроса, "ГДЕ 1=2", "");
		СписокДокументыПредприятия.ТекстЗапроса = СтрЗаменить(СписокДокументыПредприятия.ТекстЗапроса, "ГДЕ 1=2", "");
		СписокМероприятия.ТекстЗапроса = СтрЗаменить(СписокМероприятия.ТекстЗапроса, "ГДЕ 1=2", "");
		СписокПроекты.ТекстЗапроса = СтрЗаменить(СписокПроекты.ТекстЗапроса, "ГДЕ 1=2", "");
		СписокПроектныеЗадачи.ТекстЗапроса = СтрЗаменить(СписокПроектныеЗадачи.ТекстЗапроса, "ГДЕ 1=2", "");
		
		РаботаСКатегориямиДанных.СписокКатегорийВЗапросСписка(СписокФайлы, 10, 
			ВыбранныеКатегории, ОтборДанных, СУчетомПодкатегорий);
		
		Если ЧтениеДокументовПредприятия Тогда
			РаботаСКатегориямиДанных.СписокКатегорийВЗапросСписка(СписокДокументыПредприятия, 10, 
				ВыбранныеКатегории, ОтборДанных, СУчетомПодкатегорий);
		КонецЕсли;
		
		Если ЧтениеМероприятий Тогда
			РаботаСКатегориямиДанных.СписокКатегорийВЗапросСписка(СписокМероприятия, 10, 
				ВыбранныеКатегории, ОтборДанных, СУчетомПодкатегорий);
		КонецЕсли;
		
		Если ЧтениеПроектов Тогда
			РаботаСКатегориямиДанных.СписокКатегорийВЗапросСписка(СписокПроекты, 10, 
				ВыбранныеКатегории, ОтборДанных, СУчетомПодкатегорий);
		КонецЕсли;
		
		Если ЧтениеПроектныхЗадач Тогда
			РаботаСКатегориямиДанных.СписокКатегорийВЗапросСписка(СписокПроектныеЗадачи, 10, 
				ВыбранныеКатегории, ОтборДанных, СУчетомПодкатегорий);
		КонецЕсли;
		
	Иначе
		//Не выбрано ни одной категории - ничего не показывается в списках
		СписокФайлы.ТекстЗапроса = СтрЗаменить(СписокФайлы.ТекстЗапроса, "ГДЕ 1=2", "");
		СписокДокументыПредприятия.ТекстЗапроса = СтрЗаменить(СписокДокументыПредприятия.ТекстЗапроса, "ГДЕ 1=2", "");
		СписокМероприятия.ТекстЗапроса = СтрЗаменить(СписокМероприятия.ТекстЗапроса, "ГДЕ 1=2", "");
		СписокПроекты.ТекстЗапроса = СтрЗаменить(СписокПроекты.ТекстЗапроса, "ГДЕ 1=2", "");
		СписокПроектныеЗадачи.ТекстЗапроса = СтрЗаменить(СписокПроектныеЗадачи.ТекстЗапроса, "ГДЕ 1=2", "");
		
		СписокФайлы.ТекстЗапроса = СтрЗаменить(СписокФайлы.ТекстЗапроса, "{ГДЕ", "ГДЕ 1=2 {ГДЕ");
		СписокДокументыПредприятия.ТекстЗапроса = СтрЗаменить(СписокДокументыПредприятия.ТекстЗапроса, "{ГДЕ", "ГДЕ 1=2 {ГДЕ");
		СписокМероприятия.ТекстЗапроса = СтрЗаменить(СписокМероприятия.ТекстЗапроса, "{ГДЕ", "ГДЕ 1=2 {ГДЕ");
		СписокПроекты.ТекстЗапроса = СтрЗаменить(СписокПроекты.ТекстЗапроса, "{ГДЕ", "ГДЕ 1=2 {ГДЕ");
		СписокПроектныеЗадачи.ТекстЗапроса = СтрЗаменить(СписокПроектныеЗадачи.ТекстЗапроса, "{ГДЕ", "ГДЕ 1=2 {ГДЕ");
	КонецЕсли;
	
	МассивКоличеств = Новый Массив();
	МассивовТиповОбъектов = Новый Массив;
	
	Для Каждого Страница Из Элементы.СтраницыСпискиОбъектов.ПодчиненныеЭлементы Цикл
		Если Элементы[СтрЗаменить(Страница.Имя, "Страница", "Список")].Видимость Тогда
			ИмяТипа = СтрЗаменить(Страница.Имя, "Страница", "");
			МетаданныеСправочник = Метаданные.Справочники.Найти(ИмяТипа);
			МетаданныеБизнесПроцесс = Метаданные.БизнесПроцессы.Найти(ИмяТипа);
			Если МетаданныеСправочник <> Неопределено Тогда
				МассивовТиповОбъектов.Добавить(МетаданныеСправочник);
			ИначеЕсли МетаданныеБизнесПроцесс <> Неопределено Тогда
				МассивовТиповОбъектов.Добавить(МетаданныеБизнесПроцесс);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТипОбъекта Из МассивовТиповОбъектов Цикл
		ЗаполнитьМассивКоличеств(ТипОбъекта, МассивКоличеств);
	КонецЦикла;
	
	УстановитьКоличестваОбъектов(МассивКоличеств);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМассивКоличеств(ТипОбъекта, МассивКоличеств)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Тип", ТипОбъекта);
	Если ВыбранныеКатегории.Количество() = 0 Тогда
		СтруктураВозврата.Вставить("Количество", 0);
		МассивКоличеств.Добавить(СтруктураВозврата);
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОбъектЗапроса.Ссылка КАК СсылкаНаОбъект
		|ИЗ " + ТипОбъекта.ПолноеИмя() + " КАК ОбъектЗапроса 
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КатегорииОбъектов КАК СведенияОКатегорияхДанных
		|		ПО ОбъектЗапроса.Ссылка = СведенияОКатегорияхДанных.ОбъектДанных 
		|	<ВнутреннееСоединениеДляФайлов>";
		
	СтрокаСоединения = "";	
	Если ТипОбъекта = "Файлы" Тогда
		СтрокаСоединения = 
			"ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПапкиФайлов КАК ПапкиФайлов
			|	ПО ОбъектЗапроса.ВладелецФайла = ПапкиФайлов.Ссылка ";		
	КонецЕсли;
		
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"<ВнутреннееСоединениеДляФайлов>",
		СтрокаСоединения);

	ЗапросКоличества = Новый Запрос();
	ЗапросКоличества.Текст = ТекстЗапроса;
	УстановитьПараметрыВЗапросНаКоличество(ЗапросКоличества);
	
	Выборка = ЗапросКоличества.Выполнить().Выбрать();
	СтруктураВозврата.Вставить("Количество", Выборка.Количество());
	МассивКоличеств.Добавить(СтруктураВозврата);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКоличестваОбъектов(МассивКоличествОбъектов)
	
	Для Каждого Элемент Из МассивКоличествОбъектов Цикл
		Элементы["Страница" + Элемент.Тип.Имя].Заголовок = Элемент.Тип.Синоним;
		Если Элемент.Количество > 0 Тогда
			Элементы["Страница" + Элемент.Тип.Имя].Заголовок =
				Элементы["Страница" + Элемент.Тип.Имя].Заголовок + " (" + Элемент.Количество + ")";
		КонецЕсли;
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВЗапросНаКоличество(Запрос)
	
	НомерПараметра = 1;
	КатегорияИЛИ = Новый Массив();
	КатегорияИИЛИ = Новый Массив();
	КоличествоВыбранныхКатегорий = ВыбранныеКатегории.Количество(); 
	Для Каждого ВыбраннаяКатегория Из ВыбранныеКатегории Цикл
		Если КоличествоВыбранныхКатегорий > 1 И ВыбраннаяКатегория.Пометка 
			ИЛИ КоличествоВыбранныхКатегорий = 1 Тогда
			Если СУчетомПодкатегорий Тогда
				Если ОтборДанных = "ПоВсем" Тогда 
					ИмяПараметра = "КатегорияИИ" + Строка(НомерПараметра);
					ФильтрДляДобавления = "ОбъектЗапроса.Ссылка В
											|(ВЫБРАТЬ
											|	Регистр.ОбъектДанных
											|ИЗ
											|	РегистрСведений.КатегорииОбъектов КАК Регистр
											|ГДЕ
											|Регистр.КатегорияДанных В ИЕРАРХИИ (&" + ИмяПараметра + ")) ";
					Если НомерПараметра > 1 Тогда
						ФильтрДляДобавления = "И " + ФильтрДляДобавления;
					Иначе
						ФильтрДляДобавления = "ГДЕ " + ФильтрДляДобавления;
					КонецЕсли;
					Запрос.Текст = Запрос.Текст + ФильтрДляДобавления;
					Запрос.УстановитьПараметр(ИмяПараметра, ВыбраннаяКатегория.Значение);	
				Иначе
					КатегорияИИЛИ.Добавить(ВыбраннаяКатегория.Значение);
					Если НомерПараметра = 1 Тогда
						Запрос.Текст = Запрос.Текст + " ГДЕ СведенияОКатегорияхДанных.КатегорияДанных В ИЕРАРХИИ (&КатегорияИИЛИ)";
					КонецЕсли;
					Запрос.УстановитьПараметр("КатегорияИИЛИ", КатегорияИИЛИ);
				КонецЕсли;
			Иначе
				Если ОтборДанных = "ПоВсем" Тогда
					ИмяПараметра = "КатегорияИ" + Строка(НомерПараметра);
					ФильтрДляДобавления ="&" + ИмяПараметра + " В
											|(ВЫБРАТЬ
											|	Регистр.КатегорияДанных
											| ИЗ
											|	РегистрСведений.КатегорииОбъектов КАК Регистр
											| ГДЕ
											|	ОбъектЗапроса.Ссылка = Регистр.ОбъектДанных) ";
					Если НомерПараметра > 1 Тогда
						ФильтрДляДобавления = "И " + ФильтрДляДобавления;
					Иначе
						ФильтрДляДобавления = "ГДЕ " + ФильтрДляДобавления;
					КонецЕсли;
					
					Запрос.Текст = Запрос.Текст + ФильтрДляДобавления;
					Запрос.УстановитьПараметр(ИмяПараметра, ВыбраннаяКатегория.Значение);
				Иначе
					КатегорияИЛИ.Добавить(ВыбраннаяКатегория.Значение);
					Если НомерПараметра = 1 Тогда
						Запрос.Текст = Запрос.Текст + " ГДЕ СведенияОКатегорияхДанных.КатегорияДанных В (&КатегорияИЛИ)";
					КонецЕсли;
					Запрос.УстановитьПараметр("КатегорияИЛИ", КатегорияИЛИ);
				КонецЕсли;
			КонецЕсли;
			НомерПараметра = НомерПараметра + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьВыборКатегорий()
	
	КоличествоВыбранныхКатегорий = ВыбранныеКатегории.Количество();
	Если КоличествоВыбранныхКатегорий > 0 Тогда
		СтрокаСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пожалуйста, подождите!%1Идет поиск данных по категориям...'"),
			Символы.ПС);
		Состояние(СтрокаСостояния);	
	
		ПрименитьОтборПоКатегориямИПоказатьКоличествоОбъектов();
		Если ВыбранныеКатегории.Количество() > 0 Тогда
			Состояние();
		КонецЕсли;
		
		//установка в качестве текущей первой закладки, на которой есть результаты
		Для Каждого Страница Из Элементы.СтраницыСпискиОбъектов.ПодчиненныеЭлементы Цикл
			Если СтрНайти(Страница.Заголовок, "(") > 0 И СтрНайти(Страница.Заголовок, "(Удалить)") = 0 Тогда
				Элементы.СтраницыСпискиОбъектов.ТекущаяСтраница = Страница;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
#Если МобильныйКлиент Тогда
	ВыборСтраницыМК = Элементы.СтраницыСпискиОбъектов.ТекущаяСтраница.Имя;
#КонецЕсли
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ПереназначитьРодителя(Источник, Приемник)
	
	ИсточникОбъект = Источник.ПолучитьОбъект();
	ИсточникОбъект.Родитель = ?(Приемник = Неопределено, Справочники.КатегорииДанных.ВсеКатегории, Приемник);
	ИсточникОбъект.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////
//процедуры и функции для работы со списком файлов//
////////////////////////////////////////////////////

&НаКлиенте
Процедура ОткрытьФайлВыполнить()
	
	Если Не ФайловыеКомандыДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Элементы.СписокФайлы.ТекущаяСтрока, Неопределено, УникальныйИдентификатор);
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокФайлов(Результат, ПараметрыВыполнения) Экспорт
	
	Элементы.СписокФайлы.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗашифроватьПослеШифрованияНаКлиенте(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяРабочегоКаталога = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	ЕстьЗашифрованныеИлиЗанятыеФайлы = Неопределено;
	
	ЗашифроватьСервер(
		Результат.МассивДанныхДляЗанесенияВБазу,
		Результат.МассивОтпечатков,
		МассивФайловВРабочемКаталогеДляУдаления,
		ИмяРабочегоКаталога,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	РаботаСФайламиКлиент.ИнформироватьОШифровании(
		МассивФайловВРабочемКаталогеДляУдаления,
		ПараметрыВыполнения.ДанныеФайла.Владелец,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	УстановитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

&НаСервере
Процедура ЗашифроватьСервер(МассивДанныхДляЗанесенияВБазу, МассивОтпечатков, 
	МассивФайловВРабочемКаталогеДляУдаления,
	ИмяРабочегоКаталога, ОбъектСсылка, ЕстьЗашифрованныеИлиЗанятыеФайлы)
	
	Зашифровать = Истина;
	РаботаСФайламиВызовСервера.ЗанестиИнформациюОШифровании(
		ОбъектСсылка,
		Зашифровать,
		МассивДанныхДляЗанесенияВБазу,
		Неопределено,  // УникальныйИдентификатор
		ИмяРабочегоКаталога,
		МассивФайловВРабочемКаталогеДляУдаления,
		МассивОтпечатков);
	
	СсылкаВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "ВладелецФайла");
	ЕстьЗашифрованныеИлиЗанятыеФайлы = РаботаСФайламиВызовСервера.ЕстьЗашифрованныеИлиЗанятыеФайлы(СсылкаВладелецФайла);

КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПослеРасшифровкиНаКлиенте(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяРабочегоКаталога = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	
	ЕстьЗашифрованныеИлиЗанятыеФайлы = Неопределено;
	
	РасшифроватьСервер(
		Результат.МассивДанныхДляЗанесенияВБазу,
		ИмяРабочегоКаталога,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	РаботаСФайламиКлиент.ИнформироватьОРасшифровке(
		ПараметрыВыполнения.ДанныеФайла.Владелец,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	УстановитьДоступностьФайловыхКоманд();
	
КонецПроцедуры

&НаСервере
Процедура РасшифроватьСервер(МассивДанныхДляЗанесенияВБазу, 
	ИмяРабочегоКаталога, ОбъектСсылка, ЕстьЗашифрованныеИлиЗанятыеФайлы)
	
	Зашифровать = Ложь;
	МассивОтпечатков = Новый Массив;
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	
	РаботаСФайламиВызовСервера.ЗанестиИнформациюОШифровании(
		ОбъектСсылка,
		Зашифровать,
		МассивДанныхДляЗанесенияВБазу,
		Неопределено,  // УникальныйИдентификатор
		ИмяРабочегоКаталога,
		МассивФайловВРабочемКаталогеДляУдаления,
		МассивОтпечатков);
	
КонецПроцедуры

&НаКлиенте
Функция ФайловыеКомандыДоступны(ФайлСсылка = Неопределено)
	// Доступны файловые команды - есть хотя бы одна строка в списке и выделена не группировка.
	
	Если ФайлСсылка = Неопределено Тогда 
		ФайлСсылка = Элементы.СписокФайлы.ТекущаяСтрока;
	КонецЕсли;
	
	Если ФайлСсылка = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ФайлСсылка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьФайловыхКоманд(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт	
	
	Если Элементы.СписокФайлы.ТекущиеДанные <> Неопределено Тогда
		Если ТипЗнч(Элементы.СписокФайлы.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			
			УстановитьДоступностьКоманд(Элементы.СписокФайлы.ТекущиеДанные.РедактируетТекущийПользователь,
				Элементы.СписокФайлы.ТекущиеДанные.Редактирует,
				Элементы.СписокФайлы.ТекущиеДанные.ПодписанЭП,
				Элементы.СписокФайлы.ТекущиеДанные.Зашифрован);
				
			Возврат;
					
		КонецЕсли;	
	КонецЕсли;	
	
	СделатьКомандыНедоступными();
	
КонецПроцедуры

&НаКлиенте
Процедура СделатьКомандыНедоступными()
	
	Элементы.СписокФайлыЗакончитьРедактирование.Доступность = Ложь;
	Элементы.СписокФайлыКонтекстноеМенюЗакончитьРедактирование.Доступность = Ложь;
	
	Элементы.СписокФайлыСохранитьИзменения.Доступность = Ложь;
	Элементы.СписокФайлыКонтекстноеМенюСохранитьИзменения.Доступность = Ложь;
	
	Элементы.СписокФайлыОсвободить.Доступность = Ложь;
	Элементы.СписокФайлыКонтекстноеМенюОсвободить.Доступность = Ложь;
	
	Элементы.СписокФайлыЗанять.Доступность = Ложь;
	Элементы.СписокФайлыКонтекстноеМенюЗанять.Доступность = Ложь;
	
	Элементы.СписокФайлыРедактировать.Доступность = Ложь;
	Элементы.СписокФайлыКонтекстноеМенюРедактировать.Доступность = Ложь;
	
	Элементы.СписокФайлыПодписать.Доступность = Ложь;
	Элементы.СписокФайлыПодписатьКонтекст.Доступность = Ложь;
	
	Элементы.СписокФайлыДобавитьЭПИзФайла.Доступность = Ложь;
	Элементы.СписокФайлыДобавитьЭПИзФайлаКонтекст.Доступность = Ложь;
	
	Элементы.СписокФайлыСохранитьВместеСЭП.Доступность = Ложь;
	Элементы.СписокФайлыСохранитьВместеСЭПКонтекст.Доступность = Ложь;
	
	Элементы.СписокФайлыЗашифровать.Доступность = Ложь;
	Элементы.СписокФайлыЗашифроватьКонтекст.Доступность = Ложь;
	
	Элементы.СписокФайлыРасшифровать.Доступность = Ложь;
	Элементы.СписокФайлыРасшифроватьКонтекст.Доступность = Ложь;
	
	Элементы.СписокФайлыРаспознать.Доступность = Ложь;
	Элементы.СписокФайлыКонтекстноеМенюРаспознать.Доступность = Ложь;
	
	Элементы.СписокФайлыОбновитьИзФайлаНаДиске.Доступность = Ложь;
	Элементы.СписокФайлыКонтекстноеМенюОбновитьИзФайлаНаДиске.Доступность = Ложь;
	
	Элементы.СписокФайлыСохранитьКак.Доступность = Ложь;
	Элементы.СписокФайлыКонтекстноеМенюСохранитьКак.Доступность = Ложь;
	
	Элементы.СписокФайлыОткрытьКаталогФайла.Доступность = Ложь;
	Элементы.СписокФайлыКонтекстноеМенюОткрытьКаталогФайла.Доступность = Ложь;
	
	Элементы.СписокФайлыОткрытьФайл.Доступность = Ложь;
	Элементы.СписокФайлыКонтекстноеМенюОткрытьФайл.Доступность = Ложь;
	
	Элементы.СписокФайлыСправочникФайлыВставитьШтрихкодВФайл.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманд(РедактируетТекущийПользователь, Редактирует, ПодписанЭП, Зашифрован)
	
	Элементы.СписокФайлыЗакончитьРедактирование.Доступность = РедактируетТекущийПользователь;
	Элементы.СписокФайлыКонтекстноеМеню.ПодчиненныеЭлементы.СписокФайлыКонтекстноеМенюЗакончитьРедактирование.Доступность = РедактируетТекущийПользователь;
	
	Элементы.СписокФайлыСохранитьИзменения.Доступность = РедактируетТекущийПользователь;
	Элементы.СписокФайлыКонтекстноеМеню.ПодчиненныеЭлементы.СписокФайлыКонтекстноеМенюСохранитьИзменения.Доступность = РедактируетТекущийПользователь;
	
	Элементы.СписокФайлыОсвободить.Доступность = ЗначениеЗаполнено(Редактирует);
	Элементы.СписокФайлыКонтекстноеМеню.ПодчиненныеЭлементы.СписокФайлыКонтекстноеМенюОсвободить.Доступность = ЗначениеЗаполнено(Редактирует);
	
	Элементы.СписокФайлыЗанять.Доступность = Не ЗначениеЗаполнено(Редактирует) И НЕ ПодписанЭП;
	Элементы.СписокФайлыКонтекстноеМеню.ПодчиненныеЭлементы.СписокФайлыКонтекстноеМенюЗанять.Доступность = Не ЗначениеЗаполнено(Редактирует) И НЕ ПодписанЭП;
	
	Элементы.СписокФайлыРедактировать.Доступность = НЕ ПодписанЭП;
	Элементы.СписокФайлыКонтекстноеМеню.ПодчиненныеЭлементы.СписокФайлыКонтекстноеМенюРедактировать.Доступность = НЕ ПодписанЭП;
	
	Элементы.СписокФайлыОбновитьИзФайлаНаДиске.Доступность = НЕ ПодписанЭП;
	Элементы.СписокФайлыКонтекстноеМенюОбновитьИзФайлаНаДиске.Доступность = НЕ ПодписанЭП;
	
	Элементы.СписокФайлыПодписать.Доступность = Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован;
	Элементы.СписокФайлыПодписатьКонтекст.Доступность = Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован;
	
	Элементы.СписокФайлыДобавитьЭПИзФайла.Доступность = Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован;
	Элементы.СписокФайлыДобавитьЭПИзФайлаКонтекст.Доступность = Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован;
	
	Элементы.СписокФайлыСохранитьВместеСЭП.Доступность = ПодписанЭП;
	Элементы.СписокФайлыСохранитьВместеСЭПКонтекст.Доступность = ПодписанЭП;
	
	Элементы.СписокФайлыЗашифровать.Доступность = Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован;
	Элементы.СписокФайлыЗашифроватьКонтекст.Доступность = Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован;
	
	Элементы.СписокФайлыРасшифровать.Доступность = Зашифрован;
	Элементы.СписокФайлыРасшифроватьКонтекст.Доступность = Зашифрован;
	
	Элементы.СписокФайлыОбновитьИзФайлаНаДиске.Доступность = Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован И НЕ ПодписанЭП;
	Элементы.СписокФайлыКонтекстноеМенюОбновитьИзФайлаНаДиске.Доступность = Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован И НЕ ПодписанЭП;
	
	Расширение = Элементы.СписокФайлы.ТекущиеДанные.Расширение;
	ИспользоватьImageMagickДляРаспознаванияPDF = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ИспользоватьImageMagickДляРаспознаванияPDF;
	
	ПрограммаРаспознавания = РаботаСФайламиКлиентПовтИсп.ПрограммаРаспознавания();
	РасширениеПоддерживается = РаботаСФайламиКлиентСервер.ЭтотФайлМожноРаспознать(
		Расширение, ИспользоватьImageMagickДляРаспознаванияPDF, ПрограммаРаспознавания);
	ДоступноРаспознаваниеПоЗапросу = РаботаСФайламиКлиентПовтИсп.ДоступноРаспознаваниеПоЗапросу();
	
	Элементы.СписокФайлыРаспознать.Доступность = 
		РасширениеПоддерживается И ДоступноРаспознаваниеПоЗапросу И Не ЗначениеЗаполнено(Редактирует);
	
	Элементы.СписокФайлыКонтекстноеМеню.ПодчиненныеЭлементы.СписокФайлыКонтекстноеМенюРаспознать.Доступность = 
		РасширениеПоддерживается И ДоступноРаспознаваниеПоЗапросу И Не ЗначениеЗаполнено(Редактирует);
	
	Элементы.СписокФайлыСохранитьКак.Доступность = Истина;
	Элементы.СписокФайлыКонтекстноеМенюСохранитьКак.Доступность = Истина;
	
	Элементы.СписокФайлыОткрытьКаталогФайла.Доступность = Истина;
	Элементы.СписокФайлыКонтекстноеМенюОткрытьКаталогФайла.Доступность = Истина;
	
	Элементы.СписокФайлыОткрытьФайл.Доступность = Истина;
	Элементы.СписокФайлыКонтекстноеМенюОткрытьФайл.Доступность = Истина;
	
	Элементы.СписокФайлыСправочникФайлыВставитьШтрихкодВФайл.Доступность = Истина;

КонецПроцедуры

&НаСервере
Процедура СнятьВсеОтметкиСервер()
	
	СнятьВсеОтметкиВыполнить(ДеревоКатегорий.ПолучитьЭлементы());
	
КонецПроцедуры

&НаСервере
Процедура СнятьВсеОтметкиВыполнить(ЭлементыОдногоУровня)
	
	ВыбранныеКатегории.Очистить();
	Для Каждого ЭлементУровня Из ЭлементыОдногоУровня Цикл
		ЭлементУровня.Выбрана = Ложь;
		СнятьВсеОтметкиВыполнить(ЭлементУровня.ПолучитьЭлементы());
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормыДляМобильногоУстройства()
	
	Элементы.ГруппаДерево.Поведение = ПоведениеОбычнойГруппы.Всплывающая;
	Элементы.ГруппаДерево.ОтображатьЗаголовок = Истина;
	
	Элементы.ДеревоКатегорийОбновитьДеревоКатегорий.Видимость = Ложь;
	Элементы.ДеревоКатегорийИзменить.Видимость = Ложь;
	
	Элементы.Переместить(Элементы.ДеревоКатегорийНастройкаПросмотра, ЭтаФорма.КоманднаяПанель,ЭтаФорма.КоманднаяПанель);
	
	Элементы.ВыбранныеКатегории.Видимость = Ложь;
	Элементы.ВыборСтраницыМК.Видимость = Истина;
	
	Элементы.СтраницыСпискиОбъектов.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	// Кнопки из командной панели в контекстное меню.
	Элементы.Переместить(Элементы.СписокДокументыПредприятияКонтроль, Элементы.СписокДокументыПредприятия.КонтекстноеМеню,
		Элементы.СписокДокументыПредприятия.КонтекстноеМеню);
	Элементы.Переместить(Элементы.СписокДокументыПредприятияПодписатьДокумент, Элементы.СписокДокументыПредприятия.КонтекстноеМеню,
		Элементы.СписокДокументыПредприятия.КонтекстноеМеню);
		
	Элементы.Переместить(Элементы.СписокМероприятияКонтроль,Элементы.СписокМероприятия.КонтекстноеМеню,
		Элементы.СписокМероприятия.КонтекстноеМеню);
		
	Элементы.Переместить(Элементы.СписокФайлыКонтроль,Элементы.СписокФайлы.КонтекстноеМеню,
		Элементы.СписокФайлы.КонтекстноеМеню);
		
	Элементы.Переместить(Элементы.СписокПроектыКонтроль,Элементы.СписокПроекты.КонтекстноеМеню,
		Элементы.СписокПроекты.КонтекстноеМеню);
		
	Элементы.Переместить(Элементы.СписокПроектныеЗадачиКонтроль,Элементы.СписокПроектныеЗадачи.КонтекстноеМеню,
		Элементы.СписокПроектныеЗадачи.КонтекстноеМеню);
	
	// Положение строки поиска на страницах.
	Элементы.СписокДокументыПредприятия.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.Верх;
	Элементы.СписокМероприятия.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.Верх;
	Элементы.СписокФайлы.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.Верх;
	Элементы.СписокФайлы.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.Верх;
	Элементы.СписокПроектныеЗадачи.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.Верх;
	
КонецПроцедуры

#КонецОбласти