#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Параметры.ГруппаДоступаКонтрагентов) Тогда
		ГруппаДоступаКонтрагентов = Параметры.ГруппаДоступаКонтрагентов;
	КонецЕсли;
	
	УстановитьОтборПоГруппеДоступа();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаДоступаКонтрагентовПриИзменении(Элемент)
	
	УстановитьОтборПоГруппеДоступа();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасхождения

&НаКлиенте
Процедура РасхожденияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент = Элементы.РасхожденияГруппаДоступа Тогда
		ПоказатьЗначение(, ВыбраннаяСтрока.ГруппаДоступа);
	Иначе
		ПоказатьЗначение(, ВыбраннаяСтрока.Объект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УдалитьАвтоматически(Команда)
	
	ОбработаноУспешно = 0;
	ОбработаноСОшибкой = 0;
	
	ВсегоОбъектов = ОбъектыКОбработке(Истина);
	ШаблонТекстаСостояния =
		НСтр("ru = 'Найдено объектов: %1
					|Обработано: %2
					|Не удалось обработать: %3%4'");
	Состояние(СтрШаблон(ШаблонТекстаСостояния, ВсегоОбъектов, ОбработаноУспешно, ОбработаноСОшибкой,
		?(ОбработаноСОшибкой = 0, "", ", " + НСтр("ru = 'подробности см. в журнале регистрации'"))));
	
	НомерИтерации = 1;
	ЛимитКоличестваИтераций = 100000;
	РезультатИтерации = ВыполнитьИтерацию();
	Пока РезультатИтерации.ЕстьОбъектыКОбработке
		И НомерИтерации < ЛимитКоличестваИтераций
		И ОбработаноУспешно + ОбработаноСОшибкой <= ВсегоОбъектов Цикл
		ОбработаноУспешно = ОбработаноУспешно + РезультатИтерации.ОбработаноУспешно;
		ОбработаноСОшибкой = ОбработаноСОшибкой + РезультатИтерации.ОбработаноСОшибкой;
		Состояние(СтрШаблон(ШаблонТекстаСостояния, ВсегоОбъектов, ОбработаноУспешно, ОбработаноСОшибкой,
			?(ОбработаноСОшибкой = 0, "", ", " + НСтр("ru = 'подробности см. в журнале регистрации'"))));
		РезультатИтерации = ВыполнитьИтерацию();
		НомерИтерации = НомерИтерации + 1;
		ОбработкаПрерыванияПользователя();
	КонецЦикла;
	
	Элементы.Расхождения.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьОтборПоГруппеДоступа()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Расхождения, "ГруппаДоступа", ГруппаДоступаКонтрагентов,,,
		ЗначениеЗаполнено(ГруппаДоступаКонтрагентов),
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	Элементы.Расхождения.Обновить();
		
КонецПроцедуры

&НаСервере
Функция ВыполнитьИтерацию()
	
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Начало итерации удаления запрещенных участников доступа'"));
				
	ОбработаноУспешно = 0;
	ОбработаноСОшибкой = 0;
	
	ВыбранныеОбъекты = ОбъектыКОбработке();
	Для Каждого ВыбранныйОбъект Из ВыбранныеОбъекты Цикл
		НачатьТранзакцию();
		Попытка
			ОбработатьОбъект(ВыбранныйОбъект);
			ОбработаноУспешно = ОбработаноУспешно + 1;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ОбработаноСОшибкой = ОбработаноСОшибкой + 1;
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
				ВыбранныйОбъект.Метаданные(), ВыбранныйОбъект,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Завершение итерации удаления запрещенных участников доступа'"));
				
	Возврат Новый Структура("ЕстьОбъектыКОбработке, ОбработаноУспешно, ОбработаноСОшибкой",
		ВыбранныеОбъекты.Количество() > 0, ОбработаноУспешно, ОбработаноСОшибкой);
	
КонецФункции

&НаСервере
Функция ОбъектыКОбработке(ТолькоКоличество = Ложь)
	
	Возврат Справочники.ГруппыДоступаКонтрагентов.ОбъектыСЗапрещеннымиУчастникамиДоступа(
		ТолькоКоличество, ГруппаДоступаКонтрагентов);
	
КонецФункции

&НаСервере
Процедура ОбработатьОбъект(ВыбранныйОбъект)
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РабочиеГруппы");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Объект", ВыбранныйОбъект);
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РабочиеГруппы.Участник КАК Участник
			|ИЗ
			|	Справочник.ДокументыПредприятия.Контрагенты КАК КонтрагентыДокумента
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК КонтрагентыСпр
			|		ПО КонтрагентыДокумента.Контрагент = КонтрагентыСпр.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РабочиеГруппы КАК РабочиеГруппы
			|		ПО КонтрагентыДокумента.Ссылка = РабочиеГруппы.Объект
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиУчастников
			|		ПО (РабочиеГруппы.Участник = СотрудникиУчастников.Контейнер)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваПоДескрипторамДоступаОбъектов КАК ПраваПоДескрипторам
			|			ПО ДескрипторыДляОбъектов.Дескриптор = ПраваПоДескрипторам.Дескриптор
			|		ПО (ДескрипторыДляОбъектов.Объект = КонтрагентыСпр.ГруппаДоступа)
			|			И (ПраваПоДескрипторам.Сотрудник = СотрудникиУчастников.Сотрудник)
			|ГДЕ
			|	КонтрагентыДокумента.Ссылка = &ВыбранныйОбъект
			|	И ДескрипторыДляОбъектов.Объект ЕСТЬ NULL
			|	И НЕ СотрудникиУчастников.Сотрудник.ПометкаУдаления");
		Запрос.УстановитьПараметр("ВыбранныйОбъект", ВыбранныйОбъект);
		Запрос.УстановитьПараметр("ГруппаДоступа", ГруппаДоступаКонтрагентов);
		
		ТаблицаУчастников = РаботаСРабочимиГруппами.ПолучитьРабочуюГруппуДокумента(ВыбранныйОбъект);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НайденнаяСтрока = ТаблицаУчастников.Найти(Выборка.Участник, "Участник");
			Если НайденнаяСтрока <> Неопределено Тогда
				ТаблицаУчастников.Удалить(НайденнаяСтрока);
			КонецЕсли;
		КонецЦикла;
		РаботаСРабочимиГруппами.ПерезаписатьРабочуюГруппуОбъекта(
			ВыбранныйОбъект, ТаблицаУчастников, Истина);
	
		ЗафиксироватьТранзакцию();
	
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Удаление запрещенных участников доступа'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти
