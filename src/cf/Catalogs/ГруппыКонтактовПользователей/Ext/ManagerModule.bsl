#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Права доступа

// Возвращает строку, содержащую перечисление полей доступа через запятую
// Это перечисление используется в дальнейшем для передачи в метод 
// ОбщегоНазначения.ЗначенияРеквизитовОбъекта()
Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат 
		"Ссылка,
		|Автор,
		|Пользователи";
	
КонецФункции

// Проверяет наличие метода.
// 
Функция ЕстьМетодЗаполнитьДескрипторыОбъекта() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Заполняет переданную таблицу дескрипторов объекта.
// 
Процедура ЗаполнитьДескрипторыОбъекта(ОбъектДоступа, ТаблицаДескрипторов, ПротоколРасчетаПрав = Неопределено) Экспорт
	
	ДокументооборотПраваДоступа.ДобавитьИндивидуальныйДескриптор(
		ОбъектДоступа, ТаблицаДескрипторов, ОбъектДоступа.Автор, Истина);
	
	ТаблицаПользователей = ОбъектДоступа.Пользователи.Выгрузить();
	Для Каждого СтрПользователя Из ТаблицаПользователей Цикл
		ДокументооборотПраваДоступа.ДобавитьИндивидуальныйДескриптор(
			ОбъектДоступа, ТаблицаДескрипторов, СтрПользователя.ПользовательИлиГруппа, Ложь);
	КонецЦикла;
	
	Если ПротоколРасчетаПрав <> Неопределено Тогда
		
		ЗаписьПротокола = Новый Структура("Элемент, Описание",
			ОбъектДоступа.Автор, НСтр("ru = 'Автор'"));
		ПротоколРасчетаПрав.Добавить(ЗаписьПротокола);
		
		Если ТаблицаПользователей.Количество() > 0 Тогда
			ЗаписьПротокола = Новый Структура("Элемент, Описание",
				ОбъектДоступа.Ссылка, НСтр("ru = 'Пользователи на закладке ""Доступ""'"));
			ПротоколРасчетаПрав.Добавить(ЗаписьПротокола);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Права доступа - конец

// Записать контакт
Функция ЗаписатьКонтакт(Контакт, Адрес, ГруппаИзбранного = Неопределено, Сотрудник = Неопределено) Экспорт
	
	ГруппаДляДобавления = Неопределено;
	
	Если ГруппаИзбранного = Неопределено Тогда
		ГруппаДляДобавления = ПолучитьКорневуюГруппу(Сотрудник);
	Иначе
		ГруппаДляДобавления = ГруппаИзбранного;
	КонецЕсли;
	
	ЗаблокироватьДанныеДляРедактирования(ГруппаДляДобавления);
	ВыполненаБлокировка = Истина;
	ГруппаДляДобавленияОбъект = ГруппаДляДобавления.ПолучитьОбъект();
	
	Если ГруппаДляДобавленияОбъект.ОбщийСписокРассылки = Истина
		И ТипЗнч(Контакт) = Тип("СправочникСсылка.ЛичныеАдресаты") Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Запрещено использовать личных адресатов(""%1"") в общих группах контактов.'"), Контакт);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		ТекущийСотрудник = Сотрудник;
	Иначе
		ТекущийСотрудник = Сотрудники.ОсновнойСотрудник();
	КонецЕсли;
	ТекущийСотрудникИмеетПраваДоступа = Ложь;
	Если НЕ ГруппаДляДобавленияОбъект.ОбщийСписокРассылки Тогда
		ТекущийСотрудникИмеетПраваДоступа = Сотрудники.ЭтоСотрудникиОдногоФизЛица(
			ГруппаДляДобавленияОбъект.Автор, ТекущийСотрудник);
	Иначе
		ТекущийСотрудникИмеетПраваДоступа = 
			ДокументооборотПраваДоступа.ПраваСотрудникаПоОбъекту(ГруппаДляДобавления, Сотрудники.ОсновнойСотрудник()).Изменение;
	КонецЕсли;
	Если Не ТекущийСотрудникИмеетПраваДоступа Тогда
		ТекстОшибки = НСтр("ru = 'У сотрудника недостаточно прав на исполнение операции над базой данных.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Контакт", Контакт);
	НайденныеСтроки = ГруппаДляДобавленияОбъект.Контакты.НайтиСтроки(ПараметрыОтбора);
	Для Каждого Строка Из НайденныеСтроки Цикл
		Если Строка.КонтактнаяИнформация = Адрес Тогда
			РазблокироватьДанныеДляРедактирования(ГруппаДляДобавления);
			Возврат Ложь;
		КонецЕсли;	
	КонецЦикла;
	
	НоваяСтрока = ГруппаДляДобавленияОбъект.Контакты.Добавить();
	НоваяСтрока.Контакт = Контакт;
	НоваяСтрока.КонтактнаяИнформация = Адрес;
	
	НоваяСтрока.Представление = Строка(Контакт);
	
	НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
	
	ГруппаДляДобавленияОбъект.Контакты.Сортировать("Контакт Возр");
	
	Попытка
		ГруппаДляДобавленияОбъект.Записать();	
	Исключение
		РазблокироватьДанныеДляРедактирования(ГруппаДляДобавления);
		ВызватьИсключение;
	КонецПопытки;	
	
	РазблокироватьДанныеДляРедактирования(ГруппаДляДобавления);
	Возврат Истина;
              
КонецФункции // ЗаписатьКонтакт()

// Удалить контакт
Процедура УдалитьКонтакт(Контакт, Адрес, ГруппаИзбранного) Экспорт
	
	ЗаблокироватьДанныеДляРедактирования(ГруппаИзбранного);
	ВыполненаБлокировка = Истина;
	ГруппаИзбранногоОбъект = ГруппаИзбранного.ПолучитьОбъект();
	
	НайденнаяСтрока = ГруппаИзбранногоОбъект.Контакты.Найти(Контакт, "Контакт");
	Если НайденнаяСтрока <> Неопределено Тогда
		ГруппаИзбранногоОбъект.Контакты.Удалить(НайденнаяСтрока);
	КонецЕсли;	
	
	Попытка
		ГруппаИзбранногоОбъект.Записать();	
	Исключение
		РазблокироватьДанныеДляРедактирования(ГруппаИзбранного);	
		ВызватьИсключение;
	КонецПопытки;	
	
	РазблокироватьДанныеДляРедактирования(ГруппаИзбранного);
              
КонецПроцедуры // УдалитьКонтакт()

// Получить корневую группу (с пустым Родителем)
Функция ПолучитьКорневуюГруппу(Автор = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Автор = Неопределено Тогда
		Автор = Сотрудники.ОсновнойСотрудник();
	КонецЕсли;	
	
	// Найдем корневой элемент - если он есть
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ГруппыКонтактовПользователей.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ГруппыКонтактовПользователей КАК ГруппыКонтактовПользователей
		|ГДЕ
		|	ГруппыКонтактовПользователей.Автор = &Автор
		|	И ГруппыКонтактовПользователей.Родитель = &Родитель
		|	И ГруппыКонтактовПользователей.ПометкаУдаления = ЛОЖЬ";
		
	Запрос.УстановитьПараметр("Автор", Автор);	
	Запрос.УстановитьПараметр("Родитель", Справочники.ГруппыКонтактовПользователей.ПустаяСсылка());
	
	ТаблицаРезультатов = Запрос.Выполнить().Выгрузить();
	
	КорневаяГруппа = Неопределено;
	КорневаяГруппаОбъект = Неопределено;
	
	Если ТаблицаРезультатов.Количество() = 0 Тогда
		КорневаяГруппаОбъект = Справочники.ГруппыКонтактовПользователей.СоздатьЭлемент();
		КорневаяГруппаОбъект.Автор = Автор;
		КорневаяГруппаОбъект.Наименование = НСтр("ru='Без группы'");
		КорневаяГруппаОбъект.Записать();	
		Возврат КорневаяГруппаОбъект.Ссылка;
	Иначе
		КорневаяГруппа = ТаблицаРезультатов[0].Ссылка;
		Возврат КорневаяГруппа;
	КонецЕсли;	
	
КонецФункции // ПолучитьКорневуюГруппу()

#Область ОбновлениеАдреснойКниги

// Конструктор параметров обновления адресной книги.
//
// Возвращаемое значение:
//	Структура:
//		* ОбновитьДанныеОбъекта - Булево - Признак обновления данных группы.
//		* ОбновитьДанныеКонтактовГруппы - Булево - Признак обновления данных контактов группы.
//
Функция ПараметрыОбновленияАдреснойКниги() Экспорт
	
	ПараметрыОбновленияАдреснойКниги = Новый Структура;
	ПараметрыОбновленияАдреснойКниги.Вставить("ОбновитьДанныеОбъекта", Ложь);
	ПараметрыОбновленияАдреснойКниги.Вставить("ОбновитьДанныеКонтактовГруппы", Ложь);
	
	Возврат ПараметрыОбновленияАдреснойКниги;
	
КонецФункции

// Устанавливает значения параметров обновления адресной книги по данным объекта.
//
// Параметры:
//	Объект - СправочникОбъект.ГруппыКонтактовПользователей - Объект, для которго необходимо определить параметры обновления.
//
// Возвращаемое значение:
//	Структура: см. ПараметрыОбновленияАдреснойКниги.
//
Функция ЗначенияПараметровОбновленияАдреснойКнигиПоОбъекту(Объект) Экспорт
	
	ПараметрыОбновленияАдреснойКниги = ПараметрыОбновленияАдреснойКниги();
	
	Если Не РаботаСАдреснойКнигой.ТребуетсяОбновлениеАдреснойКниги(Объект) Тогда
		Возврат ПараметрыОбновленияАдреснойКниги; 
	КонецЕсли;

	Если Объект.ЭтоНовый() Тогда
		Если ЗначениеЗаполнено(Объект.Родитель) Тогда
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОбъекта = Истина;
		КонецЕсли;
		ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеКонтактовГруппы = Истина;
	Иначе
		ПредыдущиеЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.Ссылка, "Родитель, Контакты, ПометкаУдаления, ОбщийСписокРассылки, Наименование");
						
		КонтактыИзменены = Ложь;
		
		ПредыдущиеКонтакты = ПредыдущиеЗначенияРеквизитов.Контакты.Выгрузить();
		НовыеКонтакты = Объект.Контакты.Выгрузить();
		
		Для Каждого СтрКонтакт Из НовыеКонтакты Цикл
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Контакт", СтрКонтакт.Контакт);
			Если Не ЗначениеЗаполнено(СтрКонтакт.Контакт) Тогда
				СтруктураПоиска.Вставить("КонтактнаяИнформация", СтрКонтакт.КонтактнаяИнформация);
			КонецЕсли;
			
			Если ПредыдущиеКонтакты.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
				КонтактыИзменены = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Если Не КонтактыИзменены Тогда
			Для Каждого СтрКонтакт Из ПредыдущиеКонтакты Цикл
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Контакт", СтрКонтакт.Контакт);
				Если Не ЗначениеЗаполнено(СтрКонтакт.Контакт) Тогда
					СтруктураПоиска.Вставить("КонтактнаяИнформация", СтрКонтакт.КонтактнаяИнформация);
				КонецЕсли;
				
				Если НовыеКонтакты.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
					КонтактыИзменены = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	
		Если КонтактыИзменены
				Или ПредыдущиеЗначенияРеквизитов.ОбщийСписокРассылки <> Объект.ОбщийСписокРассылки
				Или ПредыдущиеЗначенияРеквизитов.ПометкаУдаления <> Объект.ПометкаУдаления Тогда
				
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеКонтактовГруппы = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Родитель)
				И (КонтактыИзменены
					Или (ПредыдущиеЗначенияРеквизитов.Родитель <> Объект.Родитель
							Или ПредыдущиеЗначенияРеквизитов.ПометкаУдаления <> Объект.ПометкаУдаления
							Или ПредыдущиеЗначенияРеквизитов.ОбщийСписокРассылки <> Объект.ОбщийСписокРассылки)
					Или ПредыдущиеЗначенияРеквизитов.Наименование <> Объект.Наименование) Тогда
			
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОбъекта = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыОбновленияАдреснойКниги;
	
КонецФункции

// Обновляет адресную книгу, согласно установленным параметрам.
//
// Параметры:
//	Объект - СправочникОбъект.ГруппыКонтактовПользователей - Объект, по данным которого необходимо обновить адресной книги.
//	ПараметрыОбновления - Структура Из КлючИЗначение - см. ПараметрыОбновленияАдреснойКниги.
//
Процедура ОбновитьАдреснуюКнигу(Объект, ПараметрыОбновления) Экспорт
	
	ОбъектДоступа = Объект.Автор;
	Если Объект.ОбщийСписокРассылки Тогда
		ОбъектДоступа = Объект.Ссылка;
	КонецЕсли;
	
	Если ПараметрыОбновления.ОбновитьДанныеОбъекта Тогда
		Справочники.АдреснаяКнига.ОбновитьДанныеОбъекта(
			Объект.Ссылка, Объект.Родитель, Справочники.АдреснаяКнига.Избранное, ОбъектДоступа);
	КонецЕсли;
	
	Если ПараметрыОбновления.ОбновитьДанныеКонтактовГруппы Тогда		
		НовыеКонтакты = Новый Массив;
		Для Каждого СтрКонтакт Из Объект.Контакты Цикл
			Если ЗначениеЗаполнено(СтрКонтакт.Контакт) Тогда
				НовыеКонтакты.Добавить(СтрКонтакт.Контакт);
			Иначе
				НовыеКонтакты.Добавить(СтрКонтакт.КонтактнаяИнформация);
			КонецЕсли;
		КонецЦикла;
		
		Справочники.АдреснаяКнига.ОбновитьСписокПодчиненныхОбъектов(
			Объект.Ссылка, Объект.Родитель, НовыеКонтакты, Справочники.АдреснаяКнига.Избранное, ОбъектДоступа);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли