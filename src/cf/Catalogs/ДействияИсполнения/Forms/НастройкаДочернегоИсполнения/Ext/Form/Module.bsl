
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Действие = Параметры.Действие;
	
	РеквизитыДействия =
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие, "Автор, Предмет");
	
	Если Параметры.Свойство("Автор") Тогда
		Автор = Параметры.Автор;
	Иначе
		Автор = РеквизитыДействия.Автор;
	КонецЕсли;
	
	Если Параметры.Свойство("Предмет") Тогда
		Предмет = Параметры.Предмет;
	Иначе
		Предмет = РеквизитыДействия.Предмет;
	КонецЕсли;
	
	Если Параметры.Свойство("СостояниеПункта") Тогда
		СостояниеПункта = Параметры.СостояниеПункта;
	КонецЕсли;
	
	ЭтоНаправлениеНаИсполнение = Параметры.ЭтоНаправлениеНаИсполнение;
	
	Если Параметры.Свойство("ВышестоящийУчастник") Тогда
		ВышестоящийУчастникИлиПункт = Параметры.ВышестоящийУчастник;
		
	ИначеЕсли Параметры.Свойство("ИдентификаторПункта") Тогда
		ВышестоящийУчастникИлиПункт = Параметры.ИдентификаторПункта;
	КонецЕсли;
	
	РежимВводаПункта = Параметры.ЭтоВводПункта;
	
	МожноТолькоДобавлятьУчастников = Параметры.МожноТолькоДобавлятьУчастников;
	
	РежимДиалога = Параметры.РежимДиалога;
	
	Заполнить_ИзменениеРазрешено();
	ЗагрузитьНастройкиИсполненияВФорму();  
	ПрочитатьРазрешения();
	
	Если ИдентификаторКонтролера = УникальныйИдентификаторПустой() Тогда
		ИдентификаторКонтролера = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Если ИдентификаторПроверяющего = УникальныйИдентификаторПустой() Тогда
		ИдентификаторПроверяющего = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Если ИсполнителиИсполнения.Количество() > 1 Тогда 
		Элементы.НазначитьОтветственным.Доступность = Истина;
	Иначе
		Элементы.НазначитьОтветственным.Доступность = Ложь;
	КонецЕсли;

	// Сроки исполнения
	ИспользоватьДатуИВремяВСрокахЗадач = 
		ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	
	// Установка доступности/видимости
	УстановитьДоступность();
	НастроитьВидимостьЭлементовУправленияПриСозданииФормы();
	Команды.ПереключитьРазныеСроки.Подсказка = ДействияСервер.ПодсказкаКнопкиРазныеСроки(Ложь, Ложь);
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// Конец РаспознаваниеРечи
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьПредставлениеСроков();
	РассчитатьЗначениеРазныеСроки();
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ИзменитьСостояниеФормы();
	// Конец РаспознаваниеРечи
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// РаспознаваниеРечи
	РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи

	Если Модифицированность И Не ЗавершениеРаботы Тогда
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		СпроситьПередЗакрытием();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОписаниеПорученияКнопкаВыбораНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОписаниеИсполненияПослеВыбораШаблонаТекста", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("ОбластьПрименения, Заголовок, ЗаголовокФормыСоздания");
	ПараметрыФормы.ОбластьПрименения =
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.Резолюции");
	ПараметрыФормы.Заголовок = НСтр("ru = 'Выбор шаблона текста'");
	ПараметрыФормы.ЗаголовокФормыСоздания = НСтр("ru = 'Шаблон текста'");
	ОткрытьФорму("Справочник.ШаблоныТекстов.ФормаВыбора", ПараметрыФормы, , , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных = Новый Структура;
	ПараметрыПолученияДанных.Вставить("КонтролироватьСотрудниковБезПользователя", Истина);
	ПараметрыПолученияДанных.Вставить(
		"ФункцияУчастника", ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат"));
	
	ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли");
	
	РаботаСАдреснойКнигойКлиент.ВыбратьУчастника(
		ЭтотОбъект, Элемент, СтандартнаяОбработка, ПроверяющийИсполнения,
		ДополнениеТипа, НСтр("ru = 'Выбор исполнителя'"), ПараметрыПолученияДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийИсполненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСАдреснойКнигойКлиент.ОбработатьВыборУчастника(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	СотрудникиКлиент.ОбработкаВыбораКонтейнера(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ТипЗнч(ПараметрыПолученияДанных) = Тип("Структура") Тогда
		ПараметрыПолученияДанных.Вставить(
			"ФункцияУчастника",
			ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат"));
	КонецЕсли;
	
	ПодобратьИсполнителя(
		Элемент, Текст, ДанныеВыбора, ПроверяющийИсполнения, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ТипЗнч(ПараметрыПолученияДанных) = Тип("Структура") Тогда
		ПараметрыПолученияДанных.Вставить(
			"ФункцияУчастника",
			ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат"));
	КонецЕсли;
	
	ПодобратьИсполнителя(
		Элемент, Текст, ДанныеВыбора, ПроверяющийИсполнения, ПараметрыПолученияДанных, 0, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПриИзменении(Элемент)

	Если Срок = СрокПриОткрытии Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекстСообщенияПредупреждения", "");
	ПараметрыФормы.Вставить("ВПредставленииМожетБытьДата", Истина);
	ПараметрыФормы.Вставить("Исполнитель", Неопределено);
	
	СрокПредставление = Формат(Срок, "ДФ='dd.MM.yy HH:mm';");
	Срок = Неопределено;
	
	ОбщегоНазначенияДокументооборотВызовСервера.ИзменитьСрокИсполненияПоПредставлению(
		Срок,
		СрокДни,
		СрокЧасы,
		СрокМинуты,
		ВариантУстановкиСрока,
		СрокПредставление,
		ПараметрыФормы);
	
	Если ЗначениеЗаполнено(ПараметрыФормы.ТекстСообщенияПредупреждения) Тогда
		ПоказатьПредупреждение(, ПараметрыФормы.ТекстСообщенияПредупреждения);
	КонецЕсли;
	
	Для Каждого СтрИсполнители Из ИсполнителиИсполнения Цикл
		
		Если СтрИсполнители.СрокИсполнения = СрокПриОткрытии  Тогда
			СтрИсполнители.СрокИсполнения = Срок;
			СтрИсполнители.ВариантУстановкиСрокаИсполнения = ПредопределенноеЗначение(
				"Перечисление.ВариантыУстановкиСрокаИсполнения.ТочныйСрок");
			СтрИсполнители.СрокИсполненияПредставление = 
			ОбщегоНазначенияДокументооборотКлиентСервер.ПредставлениеСрокаИсполнения(
				СтрИсполнители.СрокИсполнения,
				СтрИсполнители.СрокИсполненияДни,
				СтрИсполнители.СрокИсполненияЧасы,
				СтрИсполнители.СрокИсполненияМинуты,
				ИспользоватьДатуИВремяВСрокахЗадач,
				СтрИсполнители.ВариантУстановкиСрокаИсполнения);
		КонецЕсли;
	КонецЦикла;	
	
	СрокПриОткрытии = Срок;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СрокИсполнения", Срок);
	ПараметрыФормы.Вставить("ДатаОтсчета", ОбщегоНазначенияКлиент.ДатаСеанса());
	
	ОткрытьФорму("ОбщаяФорма.ВыборСрокаИсполнения",
		ПараметрыФормы, 
		Элементы.Срок,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокОбработкиРезультатовПредставлениеПриИзменении(Элемент)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекстСообщенияПредупреждения", "");
	ПараметрыФормы.Вставить("ВПредставленииМожетБытьДата", Истина);
	ПараметрыФормы.Вставить("Исполнитель", ПроверяющийИсполнения);
	
	РезультатЗаполнения = ОбщегоНазначенияДокументооборотВызовСервера.ИзменитьСрокИсполненияПоПредставлению(
		СрокОбработкиРезультатовИсполнения,
		СрокОбработкиРезультатовДниИсполнения,
		СрокОбработкиРезультатовЧасыИсполнения,
		СрокОбработкиРезультатовМинутыИсполнения,
		ВариантУстановкиСрокаОбработкиРезультатовИсполнения,
		СрокОбработкиРезультатовИсполненияПредставление,
		ПараметрыФормы);
	
	Если РезультатЗаполнения Тогда
		ЗаполнитьПредставлениеСроков();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокОбработкиРезультатовПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДатаОтсчета = ОбщегоНазначенияКлиент.ДатаСеанса(); 
	Для Каждого СтрокаСрок Из ИсполнителиИсполнения Цикл
		ДатаОтсчета = Макс(ДатаОтсчета, СтрокаСрок.СрокИсполнения);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Исполнитель", ПроверяющийИсполнения);
	ПараметрыФормы.Вставить("СрокИсполнения", СрокОбработкиРезультатовИсполнения);
	ПараметрыФормы.Вставить("ДатаОтсчета", ДатаОтсчета);
	
	ОткрытьФорму("ОбщаяФорма.ВыборСрокаИсполнения",
		ПараметрыФормы, 
		Элементы.СрокОбработкиРезультатовИсполненияПредставление,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокОбработкиРезультатовИсполненияПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СрокОбработкиРезультатовИсполнения = ВыбранноеЗначение;
	СрокОбработкиРезультатовДниИсполнения = 0;
	СрокОбработкиРезультатовЧасыИсполнения = 0;
	СрокОбработкиРезультатовМинутыИсполнения = 0;
	ВариантУстановкиСрокаОбработкиРезультатовИсполнения = ПредопределенноеЗначение(
		"Перечисление.ВариантыУстановкиСрокаИсполнения.ТочныйСрок");
	
	Модифицированность = Истина;
	
	ЗаполнитьПредставлениеСроков();
	
КонецПроцедуры

&НаКлиенте
Процедура СрокОбработкиРезультатовПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ИзменитьОтносительныйСрок(
		СрокОбработкиРезультатовДниИсполнения,
		СрокОбработкиРезультатовЧасыИсполнения,
		СрокОбработкиРезультатовМинутыИсполнения,
		Направление);
	
	ВариантУстановкиСрокаОбработкиРезультатовИсполнения = ПредопределенноеЗначение(
		"Перечисление.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок");
	СрокОбработкиРезультатовИсполнения = Дата(1,1,1);
	
	Модифицированность = Истина;
	
	ЗаполнитьПредставлениеСроков();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ПодменятьПользователейСотрудниками", Истина);
	ПараметрыФормы.Вставить("ОтображатьРоли", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор участника'"));
	
	Если ЗначениеЗаполнено(КонтролерИсполнения) Тогда
		ПараметрыФормы.Вставить("ВыбранныеАдресаты", КонтролерИсполнения);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.АдреснаяКнига.Форма.ФормаСписка",
		ПараметрыФормы, 
		Элемент,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерИсполненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СотрудникиКлиент.ОбработкаВыбораКонтейнера(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПолныеРоли");
		ДанныеВыбора = СотрудникиВызовСервера.СформироватьДанныеВыбора(Текст, ДополнениеТипа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПолныеРоли");
		ДанныеВыбора = СотрудникиВызовСервера.СформироватьДанныеВыбора(Текст, ДополнениеТипа);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсполнителиИсполнения

&НаКлиенте
Процедура ИсполнителиИсполненияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТолькоПросмотрСтроки = СтрокаУчастникаНедоступна(ТекущиеДанные);
	Элементы.ИсполнителиСрокИсполненияПредставление.ТолькоПросмотр = ТолькоПросмотрСтроки;
	Элементы.КнопкаРазныеСроки.Доступность = Не ТолькоПросмотрСтроки;
	Элементы.ИсполнителиИсполненияОписаниеОсобое.ТолькоПросмотр = ТолькоПросмотрСтроки;
	
	СостояниеЗавершено = ТекущиеДанные.Состояние = ПредопределенноеЗначение(
		"Перечисление.СостоянияВыполненияДействий.Завершено");
	
	Элементы.ИсполнителиИсполненияКонтекстноеМенюДобавить.Доступность
		= Не ТекущиеДанные.Недоступно Или МожноТолькоДобавлятьУчастников;
	Элементы.ИсполнителиИсполненияКонтекстноеМенюУдалить.Доступность
		= Не СостояниеЗавершено И Не ТекущиеДанные.Недоступно;
	
	Элементы.ИсполнителиИсполненияИсполнитель.ТолькоПросмотр = ТекущиеДанные.Недоступно;
	Элементы.ИсполнителиИсполненияИсполнитель.РедактированиеТекста
		= Не СостояниеЗавершено И Не ТекущиеДанные.Недоступно;
	Элементы.ИсполнителиИсполненияИсполнитель.КнопкаВыпадающегоСписка
		= Не СостояниеЗавершено И Не ТекущиеДанные.Недоступно;
	Элементы.ИсполнителиИсполненияИсполнитель.КнопкаВыпадающегоСписка
		= Не СостояниеЗавершено И Не ТекущиеДанные.Недоступно;
	Элементы.ПереместитьВверх.Доступность = Не СостояниеЗавершено;
	Элементы.ПереместитьВниз.Доступность = Не СостояниеЗавершено;
	Элементы.НазначитьОтветственным.Доступность = Не СостояниеЗавершено И ИсполнителиИсполнения.Количество() > 1;
	
	Если Не ИзменениеРазрешено Тогда
		Элементы.ПереместитьВверх.Доступность = Ложь;
		Элементы.ПереместитьВниз.Доступность = Ложь;
		Элементы.ИсполнителиИсполнения.ИзменятьПорядокСтрок = МожноТолькоДобавлятьУчастников;
	КонецЕсли;
	
	ОбновитьДоступностьКомандПеремещенияИНазначитьОтветственным();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполненияПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
		И (ТекущиеДанные.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.Завершено")
		Или ТекущиеДанные.Недоступно) Тогда
		Отказ = Истина; // завершенные задачи, а также в режиме настройки действия "Разрешено добавлять" нельзя удалять
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполненияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные.Исполнитель = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
		
		Если ИсполнителиИсполнения[0].Ответственный Тогда
			ИндексПервойСтроки = 1;
		Иначе
			ИндексПервойСтроки = 0;
		КонецЕсли;
		
		СтрПервогоИсполнителя = ИсполнителиИсполнения[ИндексПервойСтроки];
		
		Если СтрПервогоИсполнителя.ВариантУстановкиСрокаИсполнения =
			ПредопределенноеЗначение("Перечисление.ВариантыУстановкиСрокаИсполнения.ТочныйСрок") Тогда
			
			ТекущиеДанные.СрокИсполнения = СтрПервогоИсполнителя.СрокИсполнения;
		Иначе
			ТекущиеДанные.СрокИсполненияДни = СтрПервогоИсполнителя.СрокИсполненияДни;
			ТекущиеДанные.СрокИсполненияЧасы = СтрПервогоИсполнителя.СрокИсполненияЧасы;
			ТекущиеДанные.СрокИсполненияМинуты = СтрПервогоИсполнителя.СрокИсполненияМинуты;
		КонецЕсли;
		
		ТекущиеДанные.ВариантУстановкиСрокаИсполнения = СтрПервогоИсполнителя.ВариантУстановкиСрокаИсполнения;
		
		ТекущиеДанные.СрокИсполненияПредставление = 
			ОбщегоНазначенияДокументооборотКлиентСервер.ПредставлениеСрокаИсполнения(
				ТекущиеДанные.СрокИсполнения,
				ТекущиеДанные.СрокИсполненияДни,
				ТекущиеДанные.СрокИсполненияЧасы,
				ТекущиеДанные.СрокИсполненияМинуты,
				ИспользоватьДатуИВремяВСрокахЗадач,
				ТекущиеДанные.ВариантУстановкиСрокаИсполнения);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Срок)
		И Не ЗначениеЗаполнено(ТекущиеДанные.СрокИсполнения)
		И Не ЗначениеЗаполнено(ТекущиеДанные.СрокИсполненияДни)
		И Не ЗначениеЗаполнено(ТекущиеДанные.СрокИсполненияЧасы)
		И Не ЗначениеЗаполнено(ТекущиеДанные.СрокИсполненияМинуты)  Тогда
			
		ТекущиеДанные.СрокИсполнения = Срок;
		ТекущиеДанные.ВариантУстановкиСрокаИсполнения = ПредопределенноеЗначение(
			"Перечисление.ВариантыУстановкиСрокаИсполнения.ТочныйСрок");
	
		ТекущиеДанные.СрокИсполненияПредставление = 
			ОбщегоНазначенияДокументооборотКлиентСервер.ПредставлениеСрокаИсполнения(
				ТекущиеДанные.СрокИсполнения,
				ТекущиеДанные.СрокИсполненияДни,
				ТекущиеДанные.СрокИсполненияЧасы,
				ТекущиеДанные.СрокИсполненияМинуты,
				ИспользоватьДатуИВремяВСрокахЗадач,
				ТекущиеДанные.ВариантУстановкиСрокаИсполнения);
	КонецЕсли;
	
	ОбновитьДоступностьКомандПеремещения();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	КоличествоСтрок = ИсполнителиИсполнения.Количество();
	
	// Удаление пропавших строк из таблицы Исполнители.
	РеквизитыСрока =
		"ВариантУстановкиСрокаИсполнения, СрокИсполнения,
		|СрокИсполненияДни, СрокИсполненияЧасы, СрокИсполненияМинуты";
	ДанныеСрокаПоследнейСтроки = Новый Структура(РеквизитыСрока);
	Для Инд = 1 По КоличествоСтрок Цикл
		
		Строка = ИсполнителиИсполнения[КоличествоСтрок - Инд];
		
		Если Строка.Недоступно Тогда
			Продолжить;
		КонецЕсли;
		
		УдалитьИсполнителя = Истина;
		Для Каждого ВыбранныйИсполнитель Из ВыбранноеЗначение Цикл
			Если Строка.Исполнитель = ВыбранныйИсполнитель Тогда
				УдалитьИсполнителя = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если УдалитьИсполнителя Тогда
			ЗаполнитьЗначенияСвойств(ДанныеСрокаПоследнейСтроки, Строка, РеквизитыСрока);
			ИсполнителиИсполнения.Удалить(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИсполнителиИсполнения.Количество() <> 0 Тогда
		ДанныеСрокаПоследнейСтроки = Неопределено;
	КонецЕсли;
	
	// Обработка выбранных контактов
	Для Каждого ВыбранныйАдресат1 Из ВыбранноеЗначение Цикл
		
		//Находим количество дублей для выбранного адресата.
		КоличествоВхождений = 0;
		Для Каждого ВыбранныйАдресат2 Из ВыбранноеЗначение Цикл
			Если ВыбранныйАдресат1 = ВыбранныйАдресат2 Тогда
				
				КоличествоВхождений = КоличествоВхождений + 1;
			КонецЕсли;
		КонецЦикла;
		
		// Ищем выбранный контакт в таблице Исполнители
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Исполнитель", ВыбранныйАдресат1);
		НайденныеСтроки = ИсполнителиИсполнения.НайтиСтроки(СтруктураДляПоиска);
		КоличествоНайденныхСтрок = НайденныеСтроки.Количество();
		
		// Если выбранный контакт встречается в списке выбранных больше, чем
		// в таблице Исполнители, тогда добавляем недостающих конец списка.
		Если КоличествоВхождений > КоличествоНайденныхСтрок Тогда
			
			Пока КоличествоВхождений <> КоличествоНайденныхСтрок Цикл
				
				НоваяСтрокаИсполнитель = ИсполнителиИсполнения.Добавить();
				НоваяСтрокаИсполнитель.Исполнитель = ВыбранныйАдресат1;
				
				// Если удаляется последняя строка - то её срок переносится ко вновь добавленным строкам.
				Если ДанныеСрокаПоследнейСтроки <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(НоваяСтрокаИсполнитель, ДанныеСрокаПоследнейСтроки, РеквизитыСрока);
				КонецЕсли;
				
				Если ИсполнителиИсполнения[0].Ответственный Тогда
					ИндексПервойСтроки = 1;
				Иначе
					ИндексПервойСтроки = 0;
				КонецЕсли;
				
				СтрПервогоИсполнителя = ИсполнителиИсполнения[ИндексПервойСтроки];
				
				Если СтрПервогоИсполнителя.ВариантУстановкиСрокаИсполнения =
					ПредопределенноеЗначение("Перечисление.ВариантыУстановкиСрокаИсполнения.ТочныйСрок") Тогда
					
					НоваяСтрокаИсполнитель.СрокИсполнения = СтрПервогоИсполнителя.СрокИсполнения;
				Иначе
					НоваяСтрокаИсполнитель.СрокИсполненияДни = СтрПервогоИсполнителя.СрокИсполненияДни;
					НоваяСтрокаИсполнитель.СрокИсполненияЧасы = СтрПервогоИсполнителя.СрокИсполненияЧасы;
					НоваяСтрокаИсполнитель.СрокИсполненияМинуты = СтрПервогоИсполнителя.СрокИсполненияМинуты;
				КонецЕсли;
				
				НоваяСтрокаИсполнитель.ВариантУстановкиСрокаИсполнения = 
					СтрПервогоИсполнителя.ВариантУстановкиСрокаИсполнения;
				
				// Заполним сроком пункта, если он задан
				Если ЗначениеЗаполнено(Срок)
					И Не ЗначениеЗаполнено(НоваяСтрокаИсполнитель.СрокИсполнения)
					И Не ЗначениеЗаполнено(НоваяСтрокаИсполнитель.СрокИсполненияДни)
					И Не ЗначениеЗаполнено(НоваяСтрокаИсполнитель.СрокИсполненияЧасы)
					И Не ЗначениеЗаполнено(НоваяСтрокаИсполнитель.СрокИсполненияМинуты) Тогда
						
					НоваяСтрокаИсполнитель.СрокИсполнения = Срок;
					НоваяСтрокаИсполнитель.ВариантУстановкиСрокаИсполнения = ПредопределенноеЗначение(
						"Перечисление.ВариантыУстановкиСрокаИсполнения.ТочныйСрок");
				КонецЕсли;
				
				НоваяСтрокаИсполнитель.СрокИсполненияПредставление = 
					ОбщегоНазначенияДокументооборотКлиентСервер.ПредставлениеСрокаИсполнения(
						НоваяСтрокаИсполнитель.СрокИсполнения,
						НоваяСтрокаИсполнитель.СрокИсполненияДни,
						НоваяСтрокаИсполнитель.СрокИсполненияЧасы,
						НоваяСтрокаИсполнитель.СрокИсполненияМинуты,
						ИспользоватьДатуИВремяВСрокахЗадач,
						НоваяСтрокаИсполнитель.ВариантУстановкиСрокаИсполнения);
				
				КоличествоНайденныхСтрок = КоличествоНайденныхСтрок + 1;
			КонецЦикла;
			
		// Если выбранный контакт встречается в списке выбранных меньше, чем
		// в таблице Исполнители, тогда удаляем лишние строки с конца списка.
		ИначеЕсли КоличествоВхождений < КоличествоНайденныхСтрок Тогда
			Пока КоличествоВхождений <> КоличествоНайденныхСтрок Цикл
				ИсполнителиИсполнения.Удалить(НайденныеСтроки[КоличествоНайденныхСтрок - 1]);
				КоличествоНайденныхСтрок = КоличествоНайденныхСтрок - 1;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьДоступностьКомандПеремещенияИНазначитьОтветственным();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполненияПослеУдаления(Элемент)
	
	Если ИсполнителиИсполнения.Количество() = 1 И ИсполнителиИсполнения[0].Ответственный Тогда
		НазначитьИсполнителяОтветственным();
	Иначе
		ОбновитьДоступностьКомандПеремещенияИНазначитьОтветственным();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполненияОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Поле Исполнитель

&НаКлиенте
Процедура ИсполнительИсполненияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительИсполненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено 
			И ТекущиеДанные.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.Завершено") Тогда
			
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли");
	
	ПараметрыПолученияДанных = Новый Структура;
	ПараметрыПолученияДанных.Вставить("КонтролироватьСотрудниковБезПользователя", Истина);
	
	РаботаСАдреснойКнигойКлиент.ВыбратьУчастника(
		ЭтотОбъект, Элемент, СтандартнаяОбработка, ТекущиеДанные.Исполнитель,
		ДополнениеТипа, НСтр("ru = 'Выбор исполнителя'"), ПараметрыПолученияДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительИсполненияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено 
			И ТекущиеДанные.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.Завершено") Тогда
		
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Исполнитель = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительИсполненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСАдреснойКнигойКлиент.ОбработатьВыборУчастника(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	СотрудникиКлиент.ОбработкаВыбораКонтейнера(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительИсполненияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено 
			И ТекущиеДанные.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.Завершено") Тогда
		
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ПодобратьИсполнителя(
		Элемент, Текст, ДанныеВыбора, ТекущиеДанные.Исполнитель, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительИсполненияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено 
			И ТекущиеДанные.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.Завершено") Тогда
		
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ПодобратьИсполнителя(
		Элемент, Текст, ДанныеВыбора, ТекущиеДанные.Исполнитель, ПараметрыПолученияДанных, 0, СтандартнаяОбработка);
	
КонецПроцедуры

// Поле ИсполнителиСрокИсполненияПредставление

&НаКлиенте
Процедура ИсполнителиСрокИсполненияПредставлениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекстСообщенияПредупреждения", "");
	ПараметрыФормы.Вставить("ВПредставленииМожетБытьДата", Истина);
	ПараметрыФормы.Вставить("Исполнитель", ТекущиеДанные.Исполнитель);
	
	РезультатЗаполнения = ОбщегоНазначенияДокументооборотВызовСервера.ИзменитьСрокИсполненияПоПредставлению(
		ТекущиеДанные.СрокИсполнения,
		ТекущиеДанные.СрокИсполненияДни,
		ТекущиеДанные.СрокИсполненияЧасы,
		ТекущиеДанные.СрокИсполненияМинуты,
		ТекущиеДанные.ВариантУстановкиСрокаИсполнения,
		ТекущиеДанные.СрокИсполненияПредставление,
		ПараметрыФормы);
	
	Если РезультатЗаполнения Тогда
		Если Не РазныеСроки Тогда
			ЗаполнитьСрокиИсполненияВТаблицеИсполнителейПоТекущейСтроке(ТекущиеДанные);
		КонецЕсли;
		ЗаполнитьПредставлениеСроков();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыФормы.ТекстСообщенияПредупреждения) Тогда
		ПоказатьПредупреждение(, ПараметрыФормы.ТекстСообщенияПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСрокИсполненияПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено 
		И ТекущиеДанные.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.Завершено") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Исполнитель", ТекущиеДанные.Исполнитель);
	ПараметрыФормы.Вставить("СрокИсполнения", ТекущиеДанные.СрокИсполнения);
	ПараметрыФормы.Вставить("ДатаОтсчета", ОбщегоНазначенияКлиент.ДатаСеанса());
	
	ОткрытьФорму("ОбщаяФорма.ВыборСрокаИсполнения",
		ПараметрыФормы, 
		Элементы.ИсполнителиСрокИсполненияПредставление,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСрокИсполненияПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыУстановкиСрока = 
		ОбщегоНазначенияДокументооборотКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	ТекущиеДанные.СрокИсполнения = ВыбранноеЗначение;
	ТекущиеДанные.СрокИсполненияДни = 0;
	ТекущиеДанные.СрокИсполненияЧасы = 0;
	ТекущиеДанные.СрокИсполненияМинуты = 0;
	ТекущиеДанные.ВариантУстановкиСрокаИсполнения = ВариантыУстановкиСрока.ТочныйСрок;
	
	Если Не РазныеСроки Тогда
		ЗаполнитьСрокиИсполненияВТаблицеИсполнителейПоТекущейСтроке(ТекущиеДанные);
	КонецЕсли;
	ЗаполнитьПредставлениеСроков();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСрокИсполненияПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыУстановкиСрока =
		ОбщегоНазначенияДокументооборотКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ИзменитьОтносительныйСрок(
		ТекущиеДанные.СрокИсполненияДни,
		ТекущиеДанные.СрокИсполненияЧасы,
		ТекущиеДанные.СрокИсполненияМинуты,
		Направление);
	
	ТекущиеДанные.ВариантУстановкиСрокаИсполнения = ВариантыУстановкиСрока.ОтносительныйСрок;
	ТекущиеДанные.СрокИсполнения = Дата(1,1,1);
	Модифицированность = Истина;
	
	Если Не РазныеСроки Тогда
		ЗаполнитьСрокиИсполненияВТаблицеИсполнителейПоТекущейСтроке(ТекущиеДанные);
	КонецЕсли;
	ЗаполнитьПредставлениеСроков();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполненияОписаниеОсобоеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Описание", ТекущиеДанные.ОписаниеОсобое);
	ПараметрыФормы.Вставить("ТолькоОписание", Истина);
	ПараметрыФормы.Вставить("ТолькоПросмотр", СтрокаУчастникаНедоступна(ТекущиеДанные));
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьНастройкуОсобогоОписания", ЭтотОбъект, ТекущиеДанные);
	ОткрытьФорму("ОбщаяФорма.РедактированиеОсобогоНаименованияИОписанияЗадачи",
		ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область РаспознаваниеРечи

&НаКлиенте
Процедура РаспознаваниеРечи(Команда)
	
	Если ЭтотОбъект["РаспознаваниеРечи_ВыполняетсяРаспознавание"] Тогда
		РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	Иначе
		РаспознаваниеРечи_НачатьРаспознавание();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыРаспознавания(Команда)
	
	ТекущиеПараметры = ЭтотОбъект["РаспознаваниеРечи_ПараметрыРаспознавания"];
	ПараметрыРаспознаванияРечиКлиент.ПоказатьВыборПараметровРаспознаванияРечи(ЭтотОбъект, ТекущиеПараметры, 
		Новый ОписаниеОповещения("ПриВыбореПараметровРаспознаванияРечи", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Пожаловаться(Команда)
	
	РаботаСРечьюЖурналированиеКлиент.СформироватьПисьмо(УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПодобратьИсполнителейИсполнения(Команда)
	
	ЗаголовокФормы = НСтр("ru = 'Подбор исполнителей'");
	
	ВыбранныеАдресаты = Новый Массив;
	Для Каждого СтрИсполнитель Из ИсполнителиИсполнения Цикл
		Если Не ЗначениеЗаполнено(СтрИсполнитель.Исполнитель) Тогда
			Продолжить;
		КонецЕсли;
		ВыбранныеАдресаты.Добавить(СтрИсполнитель.Исполнитель);
	КонецЦикла;
	
	ПараметрыПолученияДанных = Новый Структура;
	ПараметрыПолученияДанных.Вставить("ВыборМножества", Истина);
	ПараметрыПолученияДанных.Вставить(
		"ФункцияУчастника", ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.Исполнитель"));
	ПараметрыПолученияДанных.Вставить("КонтролироватьСотрудниковБезПользователя", Истина);
	
	РаботаСАдреснойКнигойКлиент.ВыбратьУчастника(
		ЭтотОбъект, Элементы.ИсполнителиИсполнения, Ложь, ВыбранныеАдресаты, , ЗаголовокФормы, ПараметрыПолученияДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ПереместитьИсполнителя(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ПереместитьИсполнителя(1);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьОтветственным(Команда)
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.Завершено") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Сотрудник завершил свою задачу. 
									  |Изменить признак ""Ответственный"" нельзя.'"));
		Возврат; 
	КонецЕсли;
	
	НазначитьИсполнителяОтветственным();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРазныеСроки(Команда)
	
	РазныеСроки = Не РазныеСроки;
	Элементы.КнопкаРазныеСроки.Пометка = РазныеСроки;
	Если Не РазныеСроки Тогда
		
		// Обратно поставить всем строкам один и тот же срок исполнения:
		Для Каждого СтрокаИсполнителя Из ИсполнителиИсполнения Цикл
			Если СтрокаИсполнителя.Ответственный Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьСрокиИсполненияВТаблицеИсполнителейПоТекущейСтроке(СтрокаИсполнителя);
			Модифицированность = Истина;
			Прервать;
		КонецЦикла;
		Если Модифицированность Тогда
			ЗаполнитьПредставлениеСроков();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ЗаписатьИЗакрытьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьДиалог(Команда)
	
	Закрыть(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСебяПроверяющим(Команда)
	
	ПроверяющийИсполнения = СотрудникиКлиент.ОсновнойСотрудник();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиИсполненияОзнакомления

&НаСервере
Процедура ЗагрузитьНастройкиИсполненияВФорму()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Действие) И Не РежимВводаПункта Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыУчастника = ПараметрыУчастника(Действие, ВышестоящийУчастникИлиПункт);
	Автор = ПараметрыУчастника.Участник;
	
	Если РежимВводаПункта Тогда
		
		ОписаниеИсполнения = Параметры.Описание;
		Срок = Параметры.Срок;
		СрокПриОткрытии = Срок;
		КонтролерИсполнения = Параметры.Контролер;
		АвторИсполнения = Параметры.АвторИсполнения;
		НомерПункта = Параметры.Номер;
		Для Каждого Стр Из Параметры.ИсполнителиИсполнения Цикл
			
			Если стр.Функция = Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат Тогда
				ПроверяющийИсполнения = Стр.Исполнитель;
				СрокОбработкиРезультатовИсполнения = Стр.СрокИсполнения;
				СрокОбработкиРезультатовДниИсполнения = Стр.СрокИсполненияДни;
				СрокОбработкиРезультатовЧасыИсполнения = Стр.СрокИсполненияЧасы;
				СрокОбработкиРезультатовМинутыИсполнения = Стр.СрокИсполненияМинуты;
				ВариантУстановкиСрокаОбработкиРезультатовИсполнения = Стр.ВариантУстановкиСрокаИсполнения;
				ИдентификаторПроверяющего = Стр.ИдентификаторИсполнителя;
				Продолжить;
			КонецЕсли;
		
			НоваяСтрока = ИсполнителиИсполнения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
			НоваяСтрока.Недоступно = Не ИзменениеРазрешено Или МожноТолькоДобавлятьУчастников;
			
		КонецЦикла;
		
	Иначе
		
		Если ЗначениеЗаполнено(Параметры.НаименованиеИсполнения) Тогда
			НаименованиеИсполнения = Параметры.НаименованиеИсполнения;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.Описание) Тогда
			ОписаниеИсполнения = Параметры.Описание;
		КонецЕсли;
		
		Если ЭтоНаправлениеНаИсполнение Тогда
			// Заполним Срок, Контролера и Обрабатывающего из настроек Вышестоящего участника.
			Срок = ПараметрыУчастника.Срок;
			КонтролерИсполнения = ПараметрыУчастника.Контролер;
			ПроверяющийИсполнения = ПараметрыУчастника.Проверяющий;
			СрокОбработкиРезультатовИсполнения = ПараметрыУчастника.СрокПроверяющего;
			СрокОбработкиРезультатовДниИсполнения = ПараметрыУчастника.СрокДниПроверяющего;
			СрокОбработкиРезультатовЧасыИсполнения = ПараметрыУчастника.СрокЧасыПроверяющего;
			СрокОбработкиРезультатовМинутыИсполнения = ПараметрыУчастника.СрокМинутыПроверяющего;
			ВариантУстановкиСрокаОбработкиРезультатовИсполнения = ПараметрыУчастника.ВариантУстановкиСрокаПроверяющего;
		Иначе
			КонтролерИсполнения = КонтрольПовтИсп.КонтролерПодчиненногоИсполнения(
				Действие, Строка(ВышестоящийУчастникИлиПункт));
		КонецЕсли;
		
		ПодчиненноеИсполнение = Справочники.ДействияИсполнения.ПодчиненноеИсполнение(
			Действие,
			ВышестоящийУчастникИлиПункт);
		
		Если ПодчиненноеИсполнение.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПервогоИсполнителяВДействии = Неопределено;
		СтрокаПроверяющегоВДействии = Неопределено;
		
		Для Каждого СтрокаУчастника Из ПодчиненноеИсполнение Цикл
			
			Если СтрокаУчастника.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Исполнитель Тогда
				
				СтрокаИсполнителя = ИсполнителиИсполнения.Добавить();
				
				СтрокаИсполнителя.ИдентификаторИсполнителя = СтрокаУчастника.Идентификатор;
				СтрокаИсполнителя.Исполнитель = СтрокаУчастника.Участник;
				
				СтрокаИсполнителя.ОписаниеОсобое = СтрокаУчастника.ОписаниеОсобое;
				СтрокаИсполнителя.ВариантУстановкиСрокаИсполнения = СтрокаУчастника.ВариантУстановкиСрока;
				СтрокаИсполнителя.СрокИсполнения = СтрокаУчастника.Срок;
				СтрокаИсполнителя.СрокИсполненияДни = СтрокаУчастника.СрокДни;
				СтрокаИсполнителя.СрокИсполненияЧасы = СтрокаУчастника.СрокЧасы;
				СтрокаИсполнителя.СрокИсполненияМинуты = СтрокаУчастника.СрокМинуты;
				СтрокаИсполнителя.Ответственный = СтрокаУчастника.Ответственный;
				
				Если СтрокаПервогоИсполнителяВДействии = Неопределено Тогда
					СтрокаПервогоИсполнителяВДействии = СтрокаУчастника;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаПроверяющегоВДействии = Неопределено
				И СтрокаУчастника.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат Тогда
				
				СтрокаПроверяющегоВДействии = СтрокаУчастника;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокаПроверяющегоВДействии <> Неопределено Тогда
			ПроверяющийИсполнения = СтрокаПроверяющегоВДействии.Участник;
			
			ИдентификаторПроверяющего = СтрокаПроверяющегоВДействии.Идентификатор;
			
			ВариантУстановкиСрокаОбработкиРезультатовИсполнения = СтрокаУчастника.ВариантУстановкиСрока;
			
			СрокОбработкиРезультатовИсполнения = СтрокаПроверяющегоВДействии.Срок;
			СрокОбработкиРезультатовДниИсполнения = СтрокаПроверяющегоВДействии.СрокДни;
			СрокОбработкиРезультатовЧасыИсполнения = СтрокаПроверяющегоВДействии.СрокЧасы;
			СрокОбработкиРезультатовМинутыИсполнения = СтрокаПроверяющегоВДействии.СрокМинуты;
		КонецЕсли;
		
		Если СтрокаПервогоИсполнителяВДействии <> Неопределено Тогда
			НаименованиеИсполнения = СтрокаПервогоИсполнителяВДействии.НаименованиеЗадачи;
			ОписаниеИсполнения = СтрокаПервогоИсполнителяВДействии.Описание;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не РежимДиалога Тогда
	
		ВсеСостоянияИРезультаты = ДействияСервер.ВсеСостоянияИРезультаты(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Действие));
			
		Для Каждого Стр Из ИсполнителиИсполнения Цикл
			
			СтруктураОтбора = Новый Структура("Действие, ИдентификаторУчастника",
				Действие);
			
			СтруктураОтбора.ИдентификаторУчастника = Стр.ИдентификаторИсполнителя;
			
			НайденныеСтроки = ВсеСостоянияИРезультаты.НайтиСтроки(СтруктураОтбора);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденнаяСтрока = НайденныеСтроки[0];
				Стр.Результат = НайденнаяСтрока.Результат;
				Стр.Состояние = НайденнаяСтрока.Состояние;
				Стр.НомерКартинки = ДействияКлиентСервер.НомерКартинкиРезультата(Стр.Результат, 
					Стр.Состояние, Ложь);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПроверяющийИсполнения) Тогда
		ПроверяющийИсполнения  = Справочники.Сотрудники.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРазрешения()
	
	//УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Действие) Тогда
		Возврат;
	КонецЕсли;                         
	
	ИзменениеДействияРазрешено = ИзменениеДействияРазрешено();
	
	Если ИзменениеДействияРазрешено Тогда
		
		РазрешенияТаблицей = РеквизитФормыВЗначение("Разрешения");
		
		НастройкиДоступностиДействий.ЗаполнитьРазрешенияПоДействию(
			Действие, РазрешенияТаблицей);
		
		ЗначениеВРеквизитФормы(РазрешенияТаблицей, "Разрешения");
		
		МожноТолькоДобавлятьУчастников =
			РазрешенияТаблицей[0].Разрешение = Перечисления.ВариантыДоступностиИзмененияДействий.РазрешеноДобавлять;
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Функция ИзменениеДействияРазрешено()
	
	ПредметДействия = Неопределено;
	Если ЗначениеЗаполнено(Предмет) Тогда
		ПредметДействия = Предмет;
	КонецЕсли;
	
	Возврат ДействияСервер.ИзменениеДействияРазрешено(Действие, ПредметДействия);
	
КонецФункции

&НаСервере
Процедура Заполнить_ИзменениеРазрешено()
	
	Если Параметры.ИзменениеРазрешено <> Неопределено Тогда
		ИзменениеРазрешено = Параметры.ИзменениеРазрешено;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Действие) Тогда
		ИзменениеРазрешено = Истина;
	ИначеЕсли Параметры.ЭтоВводПункта Тогда
		ИзменениеРазрешено =
			ДействияСервер.ИзменениеДействияРазрешено(Действие, Предмет)
			И Не МожноТолькоДобавлятьУчастников;
	Иначе
		ИзменениеРазрешено =
			Справочники.ДействияИсполнения.ИзменениеПодчиненногоИсполненияРазрешено(
				Действие, ВышестоящийУчастникИлиПункт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьНастройкиИсполненияОзнакомленияДляЗаписи()
	
	Для Каждого СтрокаТаблицы Из ИсполнителиИсполнения Цикл
		Если СтрокаТаблицы.ИдентификаторИсполнителя = УникальныйИдентификаторПустой() Тогда
			СтрокаТаблицы.ИдентификаторИсполнителя = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(
		ИсполнителиИсполнения, "Исполнитель");
	
КонецПроцедуры

#КонецОбласти

#Область РаспознаваниеРечи

&НаСервере
Процедура РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РаспознаваниеРечи_РаспознаваниеДоступно", Новый ОписаниеТипов("Булево")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РаспознаваниеРечи_ВыполняетсяРаспознавание", Новый ОписаниеТипов("Булево")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РаспознаваниеРечи_РаспознаваниеФразыЗавершено", Новый ОписаниеТипов("Булево")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РаспознаваниеРечи_ВремяНачалаРаспознавания", Новый ОписаниеТипов("Число")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РаспознаваниеРечи_ПараметрыРаспознавания", Новый ОписаниеТипов)); // Произвольный
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РаспознаваниеРечи_ПерезапускРаспознавания", Новый ОписаниеТипов("Булево")));
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	//
	
	ТекущиеПараметры = ПараметрыРаспознаванияРечи.ТекущиеПараметры(ЭтотОбъект);
	
	ЭтотОбъект["РаспознаваниеРечи_ПараметрыРаспознавания"] = ТекущиеПараметры;
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеДоступно"] =
		ПараметрыРаспознаванияРечи.РаспознаваниеДоступно(ТекущиеПараметры)
		И ЭтоНаправлениеНаИсполнение;
	
	Элементы.ГруппаРаспознаваниеРечи.Видимость = ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеДоступно"];
	
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = Истина;
	
	//
	
	Константы.ОбщаяГрамматикаРаботыСРечью.УстановитьГрамматикуСеанса();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи_НачатьРаспознавание()
	
	ТекущиеПараметры = ЭтотОбъект["РаспознаваниеРечи_ПараметрыРаспознавания"];
	ПараметрыМодели = ПараметрыРаспознаванияРечиКлиент.ПараметрыМодели(ТекущиеПараметры);
	ВариантИспользования = ПараметрыРаспознаванияРечиКлиент.ВариантИспользования(ТекущиеПараметры);
	ПараметрыРаспознавания = ПараметрыРаспознаванияРечиКлиент.ПараметрыПотоковогоРаспознаванияРечи(ТекущиеПараметры,
		Новый ОписаниеОповещения("ПриОстановкеАудиозаписи", ЭтотОбъект));
	
	Элемент = Элементы.ОписаниеИсполнение;
		
	Контекст = Новый Структура;
	Контекст.Вставить("Форма", ЭтотОбъект);
	Контекст.Вставить("Элемент", Элемент);
	Контекст.Вставить("ИмяРеквизита", "ОписаниеИсполнения");
	
	Попытка
		РаботаСРечьюБМОКлиент.НачатьПотоковоеРаспознавание(
			УникальныйИдентификатор,
			Новый ОписаниеОповещения(
				"ПриПолученииРезультатаРаспознавания", ЭтотОбъект, Контекст,
				"ПриОбработкеОшибкиРаспознавания", ЭтотОбъект),
			ПараметрыМодели,
			ВариантИспользования,
			ПараметрыРаспознавания
		);
		
		ЭтотОбъект["РаспознаваниеРечи_ВыполняетсяРаспознавание"] = Истина;
		ЭтотОбъект["РаспознаваниеРечи_ВремяНачалаРаспознавания"] = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
	Исключение
		ПриОбработкеОшибкиРаспознавания(ИнформацияОбОшибке(), Истина, Контекст);
	КонецПопытки;
	
	РаспознаваниеРечи_ИзменитьСостояниеФормы();
	ТекущийЭлемент = Элементы.ОписаниеИсполнение;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи_ИзменитьСостояниеФормы()
	
	Если ЭтотОбъект["РаспознаваниеРечи_ВыполняетсяРаспознавание"] Тогда
			
		Элементы.РаспознаваниеРечи.Картинка = БиблиотекаКартинок.КрасныйМикрофон;
		
		Если ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] Тогда
			Элементы.РаспознаваниеРечи.ЦветФона = Новый Цвет(255, 204, 0);
		Иначе
			Элементы.РаспознаваниеРечи.ЦветФона = Новый Цвет(225, 154, 0);
		КонецЕсли;
		
	Иначе
		
		Элементы.РаспознаваниеРечи.Картинка = БиблиотекаКартинок.ЧерныйМикрофон;
		Элементы.РаспознаваниеРечи.ЦветФона = Новый Цвет;
		
	КонецЕсли;
	
	Элементы.ГруппаРаспознаваниеРечи.Видимость = ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеДоступно"]
		И РаботаСРечьюБМОКлиент.ПоддерживаетсяПотоковоеРаспознавание();
	
	Элементы.ОписаниеИсполнение.Доступность = ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"];
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРезультатаРаспознавания(РезультатРаспознавания, ПродолжитьРаспознавание, Контекст) Экспорт 
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
		Контекст.Форма,
		Контекст.Элемент,
		Контекст.ИмяРеквизита,
		РезультатРаспознавания
	);
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	РаботаСРечьюЖурналированиеКлиент.ДобавитьРезультатРаспознавания(
		УникальныйИдентификатор,
		РезультатРаспознавания,
		ВремяНачала,
		ВремяКонца
	);
	
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = РезультатРаспознавания.РаспознаваниеФразыЗавершено;
	РаспознаваниеРечи_ИзменитьСостояниеФормы();
	ТекущийЭлемент = Элементы.ОписаниеИсполнение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОбработкеОшибкиРаспознавания(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	РаботаСРечьюЖурналированиеКлиент.ДобавитьИсключение(УникальныйИдентификатор, ИнформацияОбОшибке);
	
	ПоказатьИнформациюОбОшибке(ИнформацияОбОшибке);
	
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = Истина;
	РаспознаваниеРечи_ИзменитьСостояниеФормы();
	ТекущийЭлемент = Элементы.ОписаниеИсполнение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОстановкеАудиозаписи(РезультатАудиозаписи, Контекст) Экспорт 
	
	ЭтотОбъект["РаспознаваниеРечи_ВыполняетсяРаспознавание"] = Ложь;
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = Истина;
	РаспознаваниеРечи_ИзменитьСостояниеФормы();
	ТекущийЭлемент = Элементы.ОписаниеИсполнение;
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ТекущиеПараметры = ЭтотОбъект["РаспознаваниеРечи_ПараметрыРаспознавания"];
	ПараметрыМодели = ПараметрыРаспознаванияРечиКлиент.ПараметрыМодели(ТекущиеПараметры);
	ВариантИспользования = ПараметрыРаспознаванияРечиКлиент.ВариантИспользования(ТекущиеПараметры);
	
	РаботаСРечьюЖурналированиеКлиент.ДобавитьАудио(
		УникальныйИдентификатор,
		РезультатАудиозаписи,
		ПараметрыМодели,
		ВариантИспользования,
		ЭтотОбъект["РаспознаваниеРечи_ВремяНачалаРаспознавания"],
		ВремяКонца
	);
	
	Если ЭтотОбъект["РаспознаваниеРечи_ПерезапускРаспознавания"] Тогда
		РаспознаваниеРечи_НачатьРаспознавание();
		ЭтотОбъект["РаспознаваниеРечи_ПерезапускРаспознавания"] = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореПараметровРаспознаванияРечи(Результат, Контекст) Экспорт
	
	ЭтотОбъект["РаспознаваниеРечи_ПараметрыРаспознавания"] = Результат;
	РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	ЭтотОбъект["РаспознаваниеРечи_ПерезапускРаспознавания"] = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияРезультата(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Свойство("Текст") Тогда
		ПоляВводаКлиент.ВставитьТекстПоКурсору(
			ЭтотОбъект, Элементы.ОписаниеИсполнение, "ОписаниеИсполнение", Результат.Текст);	
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОписаниеИсполненияПослеВыбораШаблонаТекста(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеИсполнения = ШаблоныТекстовВызовСервера.ТекстШаблона(Результат);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность()
	
	Если ИсполнителиИсполнения.Количество() > 1 Тогда 
		Элементы.НазначитьОтветственным.Доступность = Истина;
	Иначе
		Элементы.НазначитьОтветственным.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.ПродолжитьДиалог.Видимость = Ложь;
	Элементы.ФормаЗакрыть.Видимость = Ложь;
	
	Если Не ИзменениеРазрешено Тогда
		
		Элементы.НомерПункта.ТолькоПросмотр = Истина;
		Элементы.ОписаниеПорученияКнопкаВыбора.Доступность = Ложь;
		Элементы.Срок.ТолькоПросмотр = Истина;
		Элементы.НаименованиеИсполнения.ТолькоПросмотр = Истина;
		Элементы.ОписаниеИсполнение.ТолькоПросмотр = Истина;
		Элементы.ПроверяющийИсполнения.ТолькоПросмотр
			= ЗначениеЗаполнено(ПроверяющийИсполнения) И МожноТолькоДобавлятьУчастников
			Или СостояниеПункта = Перечисления.СостоянияВыполненияДействий.Завершено;
		Элементы.СрокОбработкиРезультатовИсполненияПредставление.ТолькоПросмотр
			= ЗначениеЗаполнено(ПроверяющийИсполнения) И МожноТолькоДобавлятьУчастников
			Или СостояниеПункта = Перечисления.СостоянияВыполненияДействий.Завершено;
		
		Элементы.ПодобратьИсполнение.Доступность = МожноТолькоДобавлятьУчастников;
		Элементы.ПереместитьВверх.Доступность = Ложь;
		Элементы.ПереместитьВниз.Доступность = Ложь;
		
		Элементы.АвторИсполнения.ТолькоПросмотр = Истина;
		Элементы.КонтролерИсполнения.ТолькоПросмотр = Истина;

		Элементы.ИсполнителиИсполненияИсполнитель.ТолькоПросмотр = Истина;
		Элементы.ИсполнителиИсполненияИсполнитель.РедактированиеТекста = Ложь;
		Элементы.ИсполнителиСрокИсполненияПредставление.ТолькоПросмотр = Истина;     
		
		Если Не МожноТолькоДобавлятьУчастников Тогда
			Элементы.ИсполнителиИсполнения.ТолькоПросмотр = Истина;
		КонецЕсли;	
		
		Если МожноТолькоДобавлятьУчастников Тогда
			Элементы.ФормаЗаписать.Видимость = Истина;
		Иначе
			Элементы.ФормаЗаписать.Видимость = Ложь;
			Если РежимДиалога Тогда
				Элементы.ПродолжитьДиалог.Видимость = Истина;
				Элементы.ПродолжитьДиалог.КнопкаПоУмолчанию = Истина;
			Иначе
				Элементы.ФормаЗакрыть.Видимость = Истина;
				Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = Истина;
			КонецЕсли;
		КонецЕсли;      
		
	Иначе	
		
		Если Не ЭтоНаправлениеНаИсполнение И Разрешения.Количество() <> 0 Тогда
			
			РазрешениеОбщее = Разрешения[0].Разрешение;
			
			Если РазрешениеОбщее = Перечисления.ВариантыДоступностиИзмененияДействий.Запрещено
				Или РазрешениеОбщее = Перечисления.ВариантыДоступностиИзмененияДействий.РазрешеноДобавлять Тогда
				
				Элементы.ИсполнителиИсполненияИсполнитель.ТолькоПросмотр = Истина;
				Элементы.ИсполнителиИсполненияИсполнитель.РедактированиеТекста = Ложь;
				Элементы.ИсполнителиСрокИсполненияПредставление.ТолькоПросмотр = Истина;        
				
				Элементы.ПроверяющийИсполнения.ТолькоПросмотр = Истина;
				Элементы.СрокОбработкиРезультатовИсполненияПредставление.ТолькоПросмотр = Истина;
				Элементы.АвторИсполнения.ТолькоПросмотр = Истина;
				Элементы.КонтролерИсполнения.ТолькоПросмотр = Истина;				
				
				Если Не МожноТолькоДобавлятьУчастников Тогда
					Элементы.ИсполнителиИсполнения.ТолькоПросмотр = Истина;
					Элементы.ПодобратьИсполнение.Доступность = Ложь;
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьЭлементовУправленияПриСозданииФормы()
	
	Элементы.АвторИсполнения.Видимость = Ложь;
	Элементы.КонтролерИсполнения.Видимость = Ложь;
	Элементы.Срок.Видимость = Ложь;
	Элементы.НомерПункта.Видимость = Ложь;
	
	Если РежимВводаПункта Тогда
		Элементы.НаименованиеИсполнения.Видимость = Ложь;
		Элементы.Срок.Видимость = Истина;
		ПодсказкаВвода = НСтр("ru = 'Содержание пункта'");
		Элементы.ОписаниеИсполнение.ПодсказкаВвода = ПодсказкаВвода;
		Элементы.ОписаниеИсполнение.Подсказка = ПодсказкаВвода;
		Элементы.ОписаниеИсполнение.АвтоОтметкаНезаполненного = Истина;
		Элементы.ОписаниеИсполнение.КнопкаВыбора = Ложь;
		Элементы.АвторИсполнения.Видимость = Истина;
		Элементы.КонтролерИсполнения.Видимость = Истина;
		Заголовок = НСтр("ru = 'Пункт'");
		Элементы.НомерПункта.Видимость = Истина;
		Элементы.ИсполнителиИсполненияОписаниеОсобое.Видимость = Ложь;
		
		Если ЗначениеЗаполнено(НомерПункта) Тогда
			ТекущийЭлемент = Элементы.ОписаниеИсполнение;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВышестоящийУчастникИлиПункт) Тогда
		Элементы.КонтролерИсполнения.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ИсполнителиИсполненияНомерКартинки.Видимость = Ложь;
	Для Каждого СтрокаИсполнителя Из ИсполнителиИсполнения Цикл
		Если СтрокаИсполнителя.НомерКартинки > 0 Тогда
			Элементы.ИсполнителиИсполненияНомерКартинки.Видимость = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьФорму()

	Отказ = Ложь;
	
	ПодготовитьНастройкиИсполненияОзнакомленияДляЗаписи();
	ОчиститьСообщения();
	Если Не РежимВводаПункта И ПустаяСтрока(НаименованиеИсполнения) Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Поле ""Заголовок"" не заполнено'"),, 
			"НаименованиеИсполнения",,Отказ);
	КонецЕсли;	
	
	Если РежимВводаПункта Тогда
		Если ПустаяСтрока(НомерПункта) Тогда 
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Поле ""№ пункта"" не заполнено'"),, 
				"НомерПункта",, Отказ);
		КонецЕсли;
		Если ПустаяСтрока(ОписаниеИсполнения) Тогда 
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Поле ""Содержание пункта"" не заполнено'"),, 
				"ОписаниеИсполнение",, Отказ);
		КонецЕсли;
		
		// Проверка наличия одного ответственного исполнения в списке.
		Если ИсполнителиИсполнения.Количество() = 1 И ИсполнителиИсполнения[0].Ответственный Тогда	
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Единственный исполнитель не может быть ответственным.'"),,
				"ИсполнителиИсполнения[0].Исполнитель",, 
				Отказ);	
		КонецЕсли;
	КонецЕсли;
	
	Если ИсполнителиИсполнения.Количество() = 0 Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не введено ни одной строки в список ""Исполнители""'"),, 
			"ИсполнителиИсполнения",, Отказ);
	КонецЕсли;	
	
	Для Каждого Строка Из ИсполнителиИсполнения Цикл
		Если Не ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Не заполнена колонка ""Исполнитель"" в строке %1 списка ""Исполнители""'"),
				ИсполнителиИсполнения.Индекс(Строка) + 1);
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				ТекстОшибки,,"ИсполнителиИсполнения["+ИсполнителиИсполнения.Индекс(Строка)+"].Исполнитель",,Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНаправлениеНаИсполнение Тогда
		
		ВсеУчастники = Новый Массив;
		Для Каждого СтрокаУчастника Из ИсполнителиИсполнения Цикл
			Если Не ЗначениеЗаполнено(СтрокаУчастника.Исполнитель) Тогда
				Продолжить;
			КонецЕсли;
			ВсеУчастники.Добавить(СтрокаУчастника.Исполнитель);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ПроверяющийИсполнения) Тогда
			ВсеУчастники.Добавить(ПроверяющийИсполнения);
		КонецЕсли;
		
		ПроверитьС = ОбщегоНазначенияКлиент.ДатаСеанса();
		ПроверитьПо = Макс(ПроверитьС, Срок, СрокОбработкиРезультатовИсполнения);
		РезультатПроверкиОтсутствий = 
			ОтсутствияКлиент.ПроверитьОтсутствия(ВсеУчастники, ПроверитьС, ПроверитьПо);
		
		Если РезультатПроверкиОтсутствий.ЕстьОтсутствия Тогда
			
			Обработчик = Новый ОписаниеОповещения(
				"ЗаписатьИЗакрытьФормуПослеПредупрежденияОбОтсутствиях",
				ЭтотОбъект);
			
			ОтсутствияКлиент.ПредупредитьОбОтсутствиях(РезультатПроверкиОтсутствий, Обработчик);
			
			Возврат;
		
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписатьИЗакрытьФормуПослеПроверкиОтсутствия();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеВДействие()
	
	ПодчиненноеИсполнение =
		Справочники.ДействияИсполнения.СтруктураПодчиненногоИсполнения();
	НомерСтроки = 1;
	Если ИсполнителиИсполнения.Количество() > 0 Тогда
		
		Для Каждого СтрокаИсполнителя Из ИсполнителиИсполнения Цикл
			СтрокаУчастника = ПодчиненноеИсполнение.Добавить();
			СтрокаУчастника.Участник = СтрокаИсполнителя.Исполнитель;
			СтрокаУчастника.Идентификатор = СтрокаИсполнителя.ИдентификаторИсполнителя;
			СтрокаУчастника.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Исполнитель;
			СтрокаУчастника.ВариантУстановкиСрока = СтрокаИсполнителя.ВариантУстановкиСрокаИсполнения;
			СтрокаУчастника.Срок = СтрокаИсполнителя.СрокИсполнения;
			СтрокаУчастника.СрокДни = СтрокаИсполнителя.СрокИсполненияДни;
			СтрокаУчастника.СрокЧасы = СтрокаИсполнителя.СрокИсполненияЧасы;
			СтрокаУчастника.СрокМинуты = СтрокаИсполнителя.СрокИсполненияМинуты;
			СтрокаУчастника.НаименованиеЗадачи = НаименованиеИсполнения;
			СтрокаУчастника.Описание = ОписаниеИсполнения;
			СтрокаУчастника.ОписаниеОсобое = СтрокаИсполнителя.ОписаниеОсобое;
			СтрокаУчастника.Ответственный = СтрокаИсполнителя.Ответственный;
			СтрокаУчастника.НомерСтроки = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ПроверяющийИсполнения) Тогда
			СтрокаУчастника = ПодчиненноеИсполнение.Добавить();
			СтрокаУчастника.Участник = ПроверяющийИсполнения;
			СтрокаУчастника.Идентификатор = ИдентификаторПроверяющего;
			СтрокаУчастника.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат;
			СтрокаУчастника.ВариантУстановкиСрока = ВариантУстановкиСрокаОбработкиРезультатовИсполнения;
			СтрокаУчастника.Срок = СрокОбработкиРезультатовИсполнения;
			СтрокаУчастника.СрокДни = СрокОбработкиРезультатовДниИсполнения;
			СтрокаУчастника.СрокЧасы = СрокОбработкиРезультатовЧасыИсполнения;
			СтрокаУчастника.СрокМинуты = СрокОбработкиРезультатовМинутыИсполнения;
			СтрокаУчастника.НомерСтроки = НомерСтроки;
		КонецЕсли;
		
	КонецЕсли;
	
	Справочники.ДействияИсполнения.ОбновитьПодчиненноеИсполнение(
		Действие, ВышестоящийУчастникИлиПункт, ПодчиненноеИсполнение, КонтролерИсполнения);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеПунктаВДействие()
	
	ИсполнителиДействия = Новый Массив;	
	
	Для Каждого УчастникИсполнения Из ИсполнителиИсполнения Цикл
		ПараметрыУчастника = Справочники.ДействияИсполнения.ПараметраУчастникаПунктаИсполнения();
		ПараметрыУчастника.Участник = УчастникИсполнения.Исполнитель;
		ПараметрыУчастника.Идентификатор = УчастникИсполнения.ИдентификаторИсполнителя; 
		ПараметрыУчастника.Ответственный = УчастникИсполнения.Ответственный; 
		ПараметрыУчастника.Срок = УчастникИсполнения.СрокИсполнения; 
		ПараметрыУчастника.СрокДни = УчастникИсполнения.СрокИсполненияДни;
		ПараметрыУчастника.СрокМинуты = УчастникИсполнения.СрокИсполненияМинуты;
		ПараметрыУчастника.СрокЧасы = УчастникИсполнения.СрокИсполненияЧасы;
		ПараметрыУчастника.ВариантУстановкиСрока = УчастникИсполнения.ВариантУстановкиСрокаИсполнения;
		ЗаполнитьВариантУстановкиСрокаИсполнения(ПараметрыУчастника); 
		ПараметрыУчастника.Функция = Перечисления.ФункцииУчастниковИсполнения.Исполнитель;
		
		ИсполнителиДействия.Добавить(ПараметрыУчастника);
	КонецЦикла;
			
	Если ЗначениеЗаполнено(ПроверяющийИсполнения) Тогда		
		ПараметрыУчастника = Справочники.ДействияИсполнения.ПараметраУчастникаПунктаИсполнения();
		ПараметрыУчастника.Участник = ПроверяющийИсполнения;
		ПараметрыУчастника.Идентификатор = ИдентификаторПроверяющего; 
		ПараметрыУчастника.Ответственный = Ложь; 
		ПараметрыУчастника.Срок = СрокОбработкиРезультатовИсполнения; 
		ПараметрыУчастника.СрокДни = СрокОбработкиРезультатовДниИсполнения;
		ПараметрыУчастника.СрокМинуты = СрокОбработкиРезультатовМинутыИсполнения;
		ПараметрыУчастника.СрокЧасы = СрокОбработкиРезультатовЧасыИсполнения;
		ПараметрыУчастника.ВариантУстановкиСрока = ВариантУстановкиСрокаОбработкиРезультатовИсполнения;
		ЗаполнитьВариантУстановкиСрокаИсполнения(ПараметрыУчастника); 
		ПараметрыУчастника.Функция = Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат;  
		
		ИсполнителиДействия.Добавить(ПараметрыУчастника);
	КонецЕсли;

	ДанныеВДействие = Новый Структура;
	ДанныеВДействие.Вставить("ИдентификаторПункта", ВышестоящийУчастникИлиПункт);
	ДанныеВДействие.Вставить("ИсполнителиИсполнения", ИсполнителиДействия);
	ДанныеВДействие.Вставить("ОписаниеИсполнения", ОписаниеИсполнения);
	ДанныеВДействие.Вставить("Номер", НомерПункта);
	ДанныеВДействие.Вставить("АвторИсполнения", АвторИсполнения);
	ДанныеВДействие.Вставить("Контролер", КонтролерИсполнения);
	ДанныеВДействие.Вставить("Срок", Срок);
	
	Возврат ДанныеВДействие;
	
КонецФункции

&НаКлиенте
Асинх Процедура СпроситьПередЗакрытием()
	
	Ответ = Ждать ВопросАсинх(
		НСтр("ru = 'Данные были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Модифицированность = Ложь;
		ЗаписатьИЗакрытьФорму();
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#Область Сроки

&НаКлиенте
Процедура ЗаполнитьПредставлениеСроков()
	
	Для Каждого УчастникЭтапа Из ИсполнителиИсполнения Цикл
		
		УчастникЭтапа.СрокИсполненияПредставление = 
			ОбщегоНазначенияДокументооборотКлиентСервер.ПредставлениеСрокаИсполнения(
				УчастникЭтапа.СрокИсполнения,
				УчастникЭтапа.СрокИсполненияДни,
				УчастникЭтапа.СрокИсполненияЧасы,
				УчастникЭтапа.СрокИсполненияМинуты,
				ИспользоватьДатуИВремяВСрокахЗадач,
				УчастникЭтапа.ВариантУстановкиСрокаИсполнения);
		
	КонецЦикла;
	
	СрокОбработкиРезультатовИсполненияПредставление =
		ОбщегоНазначенияДокументооборотКлиентСервер.ПредставлениеСрокаИсполнения(
			СрокОбработкиРезультатовИсполнения,
			СрокОбработкиРезультатовДниИсполнения,
			СрокОбработкиРезультатовЧасыИсполнения,
			СрокОбработкиРезультатовМинутыИсполнения,
			ИспользоватьДатуИВремяВСрокахЗадач,
			ВариантУстановкиСрокаОбработкиРезультатовИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЗначениеРазныеСроки()
	
	ПредыдущийСрок = Неопределено;
	Для Каждого СтрокаУчастника Из ИсполнителиИсполнения Цикл
		Если Не СтрокаУчастника.Ответственный
			И ПредыдущийСрок <> Неопределено
			И ПредыдущийСрок <> СтрокаУчастника.СрокИсполненияПредставление Тогда
			РазныеСроки = Истина;
			Элементы.КнопкаРазныеСроки.Пометка = Истина;
			Возврат;
		КонецЕсли;
		Если Не СтрокаУчастника.Ответственный Тогда
			ПредыдущийСрок = СтрокаУчастника.СрокИсполненияПредставление;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСрокиИсполненияВТаблицеИсполнителейПоТекущейСтроке(СтрокаИсполнителя)
	
	КоличествоИсполнителей = ИсполнителиИсполнения.Количество();
	
	Если КоличествоИсполнителей = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаИсполнителя.Ответственный Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыУстановкиСрокаИсполнения = 
		ОбщегоНазначенияДокументооборотКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	ВариантУстановкиСрокаИсполнения = СтрокаИсполнителя.ВариантУстановкиСрокаИсполнения;
	
	Если ВариантУстановкиСрокаИсполнения = ВариантыУстановкиСрокаИсполнения.ТочныйСрок Тогда
		СрокИсполнения = СтрокаИсполнителя.СрокИсполнения;
		СрокИсполненияДни = 0;
		СрокИсполненияЧасы = 0;
		СрокИсполненияМинуты = 0;
	Иначе
		СрокИсполнения = Дата(1,1,1);
		СрокИсполненияДни = СтрокаИсполнителя.СрокИсполненияДни;
		СрокИсполненияЧасы = СтрокаИсполнителя.СрокИсполненияЧасы;
		СрокИсполненияМинуты = СтрокаИсполнителя.СрокИсполненияМинуты;
	КонецЕсли;
	
	Если РазныеСроки Тогда
		СтрокаИсполнителя.СрокИсполнения = СрокИсполнения;
		СтрокаИсполнителя.СрокИсполненияДни = СрокИсполненияДни;
		СтрокаИсполнителя.СрокИсполненияЧасы = СрокИсполненияЧасы;
		СтрокаИсполнителя.СрокИсполненияМинуты = СрокИсполненияМинуты;
		СтрокаИсполнителя.ВариантУстановкиСрокаИсполнения = ВариантУстановкиСрокаИсполнения;
	Иначе
		ИндексПервойСтроки = 0;
		Если ИсполнителиИсполнения[0].Ответственный Тогда
			ИндексПервойСтроки = 1;
		КонецЕсли;
		
		Для ИндексТекущейСтроки = ИндексПервойСтроки По КоличествоИсполнителей - 1 Цикл
			ТекущаяСтрока = ИсполнителиИсполнения[ИндексТекущейСтроки];
			
			Если СтрокаУчастникаНедоступна(ТекущаяСтрока) Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущаяСтрока.СрокИсполнения = СрокИсполнения;
			ТекущаяСтрока.СрокИсполненияДни = СрокИсполненияДни;
			ТекущаяСтрока.СрокИсполненияЧасы = СрокИсполненияЧасы;
			ТекущаяСтрока.СрокИсполненияМинуты = СрокИсполненияМинуты;
			ТекущаяСтрока.ВариантУстановкиСрокаИсполнения = ВариантУстановкиСрокаИсполнения;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет вариант установки срока исполнения, если он не заполнен
// 
// Параметры:
//  ПараметраУчастника - см. ДействияКлиентСервер.ПараметраУчастникаПунктаИсполнения
//
&НаСервере
Процедура ЗаполнитьВариантУстановкиСрокаИсполнения(ПараметраУчастника)

	Если ЗначениеЗаполнено(ПараметраУчастника.ВариантУстановкиСрока) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметраУчастника.Срок) 
		И Не ЗначениеЗаполнено(ПараметраУчастника.СрокДни)
		И Не ЗначениеЗаполнено(ПараметраУчастника.СрокЧасы)
		И Не ЗначениеЗаполнено(ПараметраУчастника.СрокМинуты) Тогда
		
		ПараметраУчастника.ВариантУстановкиСрока = ПредопределенноеЗначение(
			"Перечисление.ВариантыУстановкиСрокаИсполнения.ТочныйСрок");
	
	ИначеЕсли Не ЗначениеЗаполнено(ПараметраУчастника.Срок) 
		И (ЗначениеЗаполнено(ПараметраУчастника.СрокДни)
		Или ЗначениеЗаполнено(ПараметраУчастника.СрокЧасы)
		Или ЗначениеЗаполнено(ПараметраУчастника.СрокМинуты)) Тогда
		
		ПараметраУчастника.ВариантУстановкиСрока = ПредопределенноеЗначение(
			"Перечисление.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок");
					
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти

// Признак недоступности строки, переопределяемый для данного вида действия участника.
// Вызывается для строк с участниками, т.е. "нижнего" уровня дерева.
// 
// Параметры:
//  СтрокаТаблицы - ДанныеФормыЭлементКоллекции -
// 
// Возвращаемое значение:
//  Булево - Признак, что строка должна быть недоступна.
&НаКлиенте
Функция СтрокаУчастникаНедоступна(СтрокаТаблицы)
	
	ЭтоПервыйЭлемент = (ИсполнителиИсполнения.Индекс(СтрокаТаблицы) = 0);
	Возврат ТолькоПросмотр Или СтрокаТаблицы.Недоступно Или МожноТолькоДобавлятьУчастников И Не ЭтоПервыйЭлемент;
	
КонецФункции

// Продолжение процедуры См. ИсполнителиИсполненияОписаниеОсобоеНачалоВыбора.
// 
// Параметры:
//  СтруктураОписания - Структура - возвращается из формы редактирования описания:
//   * ОписаниеОсобое - Строка -.
//  СтрокаУчастника - ДанныеФормыЭлементКоллекции - Строка участника, имеющее в частности, поля:
//   * ОписаниеОсобое - Строка -
&НаКлиенте
Процедура ЗавершитьНастройкуОсобогоОписания(СтруктураОписания, СтрокаУчастника) Экспорт
	
	Если СтруктураОписания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаУчастника.ОписаниеОсобое = СтруктураОписания.Описание;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьИсполнителяОтветственным()
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Ответственный = Не ТекущиеДанные.Ответственный;
	
	ИдентификаторТекущейСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	Для Каждого СтрокаИсполнителя Из ИсполнителиИсполнения Цикл
		Если СтрокаИсполнителя.ПолучитьИдентификатор() = ИдентификаторТекущейСтроки Тогда
			Продолжить;
		КонецЕсли;
		СтрокаИсполнителя.Ответственный = Ложь;
	КонецЦикла;
	
	Если ТекущиеДанные.Ответственный Тогда
		ИндексСтроки = ИсполнителиИсполнения.Индекс(ТекущиеДанные);
		Если ИндексСтроки Тогда
			ИсполнителиИсполнения.Сдвинуть(ИндексСтроки, - ИндексСтроки);
		КонецЕсли;
	КонецЕсли;

	Элементы.НазначитьОтветственным.Пометка = ТекущиеДанные.Ответственный;
	Модифицированность = Истина;
	
	ОбновитьДоступностьКомандПеремещенияИНазначитьОтветственным();
	
	ОчиститьСообщения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьИсполнителя(Смещение)
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Текст = НСтр("ru = 'Перемещение невозможно. Ответственным может быть назначен только первый исполнитель в списке.'");
	
	НомерСтроки = ИсполнителиИсполнения.Индекс(ТекущиеДанные) + 1;
	
	Если Смещение > 0 Тогда
		Если НомерСтроки = ИсполнителиИсполнения.Количество() Тогда
			Возврат;
		КонецЕсли;
		Если НомерСтроки = 1
			И ТекущиеДанные.Ответственный Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(Текст);
			Возврат;
		КонецЕсли;
	Иначе
		Если НомерСтроки = 1 Тогда
			Возврат;
		КонецЕсли;
		Если НомерСтроки = 2
			И ИсполнителиИсполнения[0].Ответственный Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(Текст);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИсполнителиИсполнения.Сдвинуть(НомерСтроки - 1, Смещение);
	
	Модифицированность = Истина;
	
	ЗаполнитьСрокиИсполненияВТаблицеИсполнителейПоТекущейСтроке(ТекущиеДанные);
	
	ЗаполнитьПредставлениеСроков();
	
	ОбновитьДоступностьКомандПеремещенияИНазначитьОтветственным();
		
	ИндексИзмененнойСтроки = ИсполнителиИсполнения.Индекс(ТекущиеДанные);
	Если Смещение > 0 Тогда
		ИндексИзмененнойСтроки = ИндексИзмененнойСтроки - 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьКомандПеремещенияИНазначитьОтветственным()
	
	Элементы.ПереместитьВверх.Доступность = Ложь;
	Элементы.ПереместитьВниз.Доступность = Ложь;
	Элементы.НазначитьОтветственным.Доступность = Ложь;
	
	Если Не Элементы.ИсполнителиИсполнения.ИзменятьПорядокСтрок Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.НазначитьОтветственным.Пометка = Ложь;
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КоличествоИсполнителей = ИсполнителиИсполнения.Количество();
	
	Если КоличествоИсполнителей = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ИсполнителиИсполнения[0].Ответственный Тогда
		ВерхняяГраница = 2;
		МинимальноеЧислоИсполнителейДляИзмененияПорядка = 3;
	Иначе
		ВерхняяГраница = 1;
		МинимальноеЧислоИсполнителейДляИзмененияПорядка = 2;
	КонецЕсли;
	
	НижняяГраница = КоличествоИсполнителей;
	
	// Номер строки получаем по индекс, т.к. ИсполнителиИсполнения может
	// не иметь поля НомерСтроки.
	ТекущийИндексИсполнителя = ИсполнителиИсполнения.Индекс(ТекущиеДанные);
	НомерСтроки = ТекущийИндексИсполнителя + 1;
	СледующийДоступен
		= (НомерСтроки + 1) <= НижняяГраница И Не ИсполнителиИсполнения[ТекущийИндексИсполнителя + 1].Недоступно;
	ПредыдущийДоступен
		= (НомерСтроки - 1) >= ВерхняяГраница И Не ИсполнителиИсполнения[ТекущийИндексИсполнителя - 1].Недоступно;
	
	Если КоличествоИсполнителей >= МинимальноеЧислоИсполнителейДляИзмененияПорядка Тогда
		
		Если НомерСтроки < ВерхняяГраница Тогда
			// ничего не делаем
		ИначеЕсли НомерСтроки = ВерхняяГраница Тогда
			Элементы.ПереместитьВниз.Доступность = СледующийДоступен;
		ИначеЕсли НомерСтроки = НижняяГраница Тогда
			Элементы.ПереместитьВверх.Доступность = ПредыдущийДоступен;
		Иначе
			Элементы.ПереместитьВверх.Доступность = ПредыдущийДоступен;
			Элементы.ПереместитьВниз.Доступность = СледующийДоступен;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.НазначитьОтветственным.Пометка = ТекущиеДанные.Ответственный;
	ОтборДоступностьОтветственного = Новый Структура("Ответственный, Недоступно", Истина, Истина);
	Элементы.НазначитьОтветственным.Доступность
		= КоличествоИсполнителей > 1
			И Не ИсполнителиИсполнения.НайтиСтроки(ОтборДоступностьОтветственного).Количество()
			И Не ТекущиеДанные.Недоступно;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьКомандПеремещения()
	
	Элементы.ПереместитьВверх.Доступность = Ложь;
	Элементы.ПереместитьВниз.Доступность = Ложь;
	
	Если Не Элементы.ИсполнителиИсполнения.ИзменятьПорядокСтрок Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоИсполнителей = ИсполнителиИсполнения.Количество();
	
	Если КоличествоИсполнителей = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ИсполнителиИсполнения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущийИндексИсполнителя = ИсполнителиИсполнения.Индекс(ТекущиеДанные);
	НомерСтроки = ТекущийИндексИсполнителя + 1;
	
	Если НомерСтроки >= 2 Тогда
		Элементы.ПереместитьВверх.Доступность
			= Не ИсполнителиИсполнения[ТекущийИндексИсполнителя - 1].Недоступно;
	КонецЕсли;
	
	Если НомерСтроки = 1 И КоличествоИсполнителей > 1
		Или НомерСтроки > 1 И НомерСтроки < КоличествоИсполнителей Тогда
		
		Элементы.ПереместитьВниз.Доступность
			= Не ИсполнителиИсполнения[ТекущийИндексИсполнителя + 1].Недоступно;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИсполнителя(
		Элемент, Текст, ДанныеВыбора, ТекущийИсполнитель, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ТипЗнч(ПараметрыПолученияДанных) = Тип("Структура") Тогда
		ПараметрыПолученияДанных.Вставить("КонтролироватьСотрудниковБезПользователя", Истина);
	КонецЕсли;
	
	ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли");
	
	РаботаСАдреснойКнигойКлиент.ПодобратьУчастника(
		ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
		Ожидание, СтандартнаяОбработка, ТекущийИсполнитель, ДополнениеТипа);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыУчастника(Действие, Идентификатор)
	
	ПараметрыУчастника = Новый Структура;
	ПараметрыУчастника.Вставить("Участник", Справочники.Сотрудники.ПустаяСсылка());
	ПараметрыУчастника.Вставить("Функция", Неопределено);
	ПараметрыУчастника.Вставить("Срок", Неопределено);
	ПараметрыУчастника.Вставить("Контролер", Справочники.Сотрудники.ПустаяСсылка());
	ПараметрыУчастника.Вставить("Проверяющий", Справочники.Сотрудники.ПустаяСсылка());
	ПараметрыУчастника.Вставить("СрокПроверяющего", Неопределено);
	ПараметрыУчастника.Вставить("СрокДниПроверяющего", Неопределено);
	ПараметрыУчастника.Вставить("СрокМинутыПроверяющего", Неопределено);
	ПараметрыУчастника.Вставить("СрокЧасыПроверяющего", Неопределено);
	ПараметрыУчастника.Вставить("ВариантУстановкиСрокаПроверяющего", Неопределено);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Участники.Участник КАК Участник,
		|	Участники.ФункцияУчастника КАК Функция,
		|	СведенияОбУчастникахДействий.СрокРассчитанный КАК Срок,
		|	Участники.Ссылка.Контролер КАК Контролер,
		|	Участники.Идентификатор,
		|	NULL КАК СрокДни,
		|	NULL КАК СрокМинуты,
		|	NULL КАК СрокЧасы,
		|	NULL КАК ВариантУстановкиСрока
		|ИЗ
		|	Справочник.ДействияИсполнения.Участники КАК Участники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбУчастникахДействий КАК СведенияОбУчастникахДействий
		|		ПО (СведенияОбУчастникахДействий.Действие = &Действие)
		|		И (СведенияОбУчастникахДействий.ИдентификаторУчастника = &Идентификатор)
		|ГДЕ
		|	Участники.Ссылка = &Действие
		|	И Участники.Идентификатор = &Идентификатор
		|
		|Объединить все
		|
		|ВЫБРАТЬ
		|	Участники.Участник КАК Участник,
		|	Участники.ФункцияУчастника КАК Функция,
		|	Участники.Срок КАК Срок,
		|	Участники.Ссылка.Контролер КАК Контролер,
		|	Участники.Идентификатор,
		|	Участники.СрокДни,
		|	Участники.СрокМинуты,
		|	Участники.СрокЧасы,
		|	Участники.ВариантУстановкиСрока
		|ИЗ
		|	Справочник.ДействияИсполнения.Участники КАК Участники
		|ГДЕ
		|	Участники.Ссылка = &Действие
		|	И Участники.ФункцияУчастника = Значение(Перечисление.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат)
		|	И Участники.ВышестоящийУчастник = &ПустойИдентификатор");
	
	Запрос.УстановитьПараметр("Действие", Действие);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("ПустойИдентификатор", ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Идентификатор = Идентификатор Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыУчастника, Выборка);
		ИначеЕсли Выборка.Функция = Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат Тогда
			ПараметрыУчастника.Проверяющий = Выборка.Участник;
			ПараметрыУчастника.СрокПроверяющего = Выборка.Срок;
			ПараметрыУчастника.СрокДниПроверяющего = Выборка.СрокДни;
			ПараметрыУчастника.СрокМинутыПроверяющего = Выборка.СрокМинуты;
			ПараметрыУчастника.СрокЧасыПроверяющего = Выборка.СрокЧасы;
			ПараметрыУчастника.ВариантУстановкиСрокаПроверяющего = Выборка.ВариантУстановкиСрока;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПараметрыУчастника;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьИЗакрытьФормуПослеПредупрежденияОбОтсутствиях(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьИЗакрытьФормуПослеПроверкиОтсутствия();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьФормуПослеПроверкиОтсутствия()
	
	Модифицированность = Ложь;
	Если РежимВводаПункта Тогда
		Закрыть(ПодготовитьДанныеПунктаВДействие());	
	Иначе
		ЗаписатьДанныеВДействие();
		Закрыть(Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
