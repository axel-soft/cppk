
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДействияСобытия.ЗаполнитьДанныеДействия(ЭтотОбъект, ИзменениеДействияРазрешено());
	РежимДиалога = Параметры.РежимДиалога;
	
	БазовоеНаименованиеЭтапа = НСтр("ru = '<Не введен>'");
	ЗаполнитьДанные();
	
	ДействияКлиентСервер.ЗапомнитьУчастниковПриОткрытииКарточки(ЭтотОбъект);
	
	ТаймлистИспользуется = ТаймлистПовтИсп.ТаймлистИспользуется();
	
	// Завершенное действие можно направить новым участникам.
	ДействияСервер.УстановитьВидимостьНаправленияНовымУчастникам(ЭтотОбъект);
	
	Элементы.УчастникиВзятьИзФайла.Видимость = Объект.ПоПунктам;
	СпособСогласованияВРежимеЗамечаний = СогласованиеВРежимеЗамечанийСерверПовтИсп.СпособСогласованияВРежимеЗамечаний();
	ДатаОтсчетаДляРасчетаСроков = ТекущаяДатаСеанса();
	
	ЭтоМобильныйКлиент = ПараметрыСеанса.ЭтоМобильныйКлиент;
	Если ЭтоМобильныйКлиент Тогда
		МК_НастроитьЭлементыФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьПредставлениеСроков();
	РазныеСроки = ДействияКлиент.ЗначениеРазныеСрокиРекурсивно(Участники.ПолучитьЭлементы());
	Элементы.УчастникиРазныеСроки.Пометка = РазныеСроки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОчиститьСообщения();
	Если Объект.ПоПунктам Тогда
		ЭлементыЭтапы = Участники.ПолучитьЭлементы();
		Для Каждого ЭлементЭтап Из ЭлементыЭтапы Цикл
			// Не даем сохранить этап, в котором не введено описание
			Если ЭлементЭтап.НаименованиеЭтапа = БазовоеНаименованиеЭтапа Тогда 
					
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Укажите содержание пункта ""%1""'"), ЭлементЭтап.Номер);
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					ТекстОшибки,,"Участники["+ЭлементыЭтапы.Индекс(ЭлементЭтап)+"].ПредставлениеСтроки",,Отказ);

				Возврат; 
			КонецЕсли;
			
			// Не даем сохранить этап, в котором отсутствуют участники
			Если ПунктБезУчастников(ЭлементЭтап) Тогда
				
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Заполните участников пункта ""%1""'"), ЭлементЭтап.Номер);
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					ТекстОшибки,,"Участники["+ЭлементыЭтапы.Индекс(ЭлементЭтап)+"].ПредставлениеСтроки",,Отказ);
				
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда 
		ПараметрыЗаписи.Вставить("ТребуетсяОбновление", Истина);
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Объект.Ссылка.Пустая());
	ОбновитьОбъектПоДеревуУчастников(Отказ);
	
	Если ИсполнениеДействияСНовымиУчастниками
		И Не ДействияКлиентСервер.УчастникиДействияИзмененыВКарточке(ЭтотОбъект) Тогда
		
		ПоказатьПредупреждение(,
			НСтр("ru = 'Новые участники не добавлены. 
				|Для запуска нового исполнения добавьте участников.'"));
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	ДействияКлиент.ОтложенноеНачалоВыполненияПередЗаписью(ЭтотОбъект);
	
	Если ПараметрыЗаписи.Свойство("НеПроверятьУчастников") И ПараметрыЗаписи.НеПроверятьУчастников Тогда
		Возврат;
	КонецЕсли;
	ПроверитьУчастников(Отказ);
	
	Если Не ЗначениеЗаполнено(Объект.МоментРазыменованияУчастников) Тогда
		Объект.МоментРазыменованияУчастников = ПредопределенноеЗначение("Перечисление.МоментыРазыменованияУчастниковДействий.ПриСозданииДействия");
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ИсполнениеДействияСНовымиУчастниками Тогда
		ДействияСервер.УстановитьПризнакЗаписиИсполненияДействияСНовымиУчастниками(ТекущийОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкаОбработки) Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("НастройкаОбработки", НастройкаОбработки);
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ДействияСобытия.ДействияПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ДействияКлиент.ДействияПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
	ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъекта(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ИсполнениеДействияСНовымиУчастниками =
		ДействияСервер.ДействиеИсполняетсяСНовымиУчастниками(ТекущийОбъект);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АвторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТипОбъекта = ОбщегоНазначенияДокументооборотКлиентСервер.ТипОбъекта(Объект.Предмет);
	НастройкиДействийКлиент.НастройкиДействияАвторНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.НастройкиДействияАвторОбработкаВыбора(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(Объект, "Автор", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТипОбъекта = ОбщегоНазначенияДокументооборотКлиентСервер.ТипОбъекта(Объект.Предмет);
	НастройкиДействийКлиент.НастройкиДействияАвторАвтоПодбор(
		ЭтотОбъект, Текст, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта);
		
КонецПроцедуры

&НаКлиенте
Процедура АвторОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТипОбъекта = ОбщегоНазначенияДокументооборотКлиентСервер.ТипОбъекта(Объект.Предмет);
	НастройкиДействийКлиент.НастройкиДействияАвторОкончаниеВводаТекста(
		ЭтотОбъект, Текст, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТипОбъекта = ОбщегоНазначенияДокументооборотКлиентСервер.ТипОбъекта(Объект.Предмет);
	НастройкиДействийКлиент.НастройкиДействияКонтролерНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.НастройкиДействияКонтролерОбработкаВыбора(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(Объект, "Контролер", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТипОбъекта = ОбщегоНазначенияДокументооборотКлиентСервер.ТипОбъекта(Объект.Предмет);
	НастройкиДействийКлиент.НастройкиДействияКонтролерАвтоПодбор(
		ЭтотОбъект, Текст, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта);
		
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТипОбъекта = ОбщегоНазначенияДокументооборотКлиентСервер.ТипОбъекта(Объект.Предмет);
	НастройкиДействийКлиент.НастройкиДействияКонтролерОкончаниеВводаТекста(
		ЭтотОбъект, Текст, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОтложенногоНачалаВыполненияНажатие(Элемент, СтандартнаяОбработка)
	
	ДействияКлиент.ОписаниеОтложенногоНачалаВыполненияНажатие(ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУчастники

&НаКлиенте
Процедура УчастникиПриИзменении(Элемент)
	
	ОбновитьПредставленияВДеревеУчастников(Участники, Объект.ПоПунктам);
	РазвернутьДеревоУчастников();
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Участники.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ЕстьОсобоеНаименованиеОписание Тогда
		
		Если ТекущиеДанные.ЭтоЭтап
			Или ТекущиеДанные.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат") Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Наименование", ТекущиеДанные.НаименованиеЗадачи);
		ПараметрыФормы.Вставить("Описание", ТекущиеДанные.Описание);
		ПараметрыФормы.Вставить("ОписаниеОсобое", ТекущиеДанные.ОписаниеОсобое);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр
			Или Разрешения[0].Разрешение =
			ПредопределенноеЗначение("Перечисление.ВариантыДоступностиИзмененияДействий.Запрещено")
			Или МожноТолькоДобавлятьУчастников И ТекущиеДанные.Недоступно
			Или ТекущиеДанные.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.Завершено"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗавершитьНастройкуОсобогоНаименованияИОписанияИсполнителя", ЭтотОбъект, ТекущиеДанные);
			
		ОткрытьФорму("ОбщаяФорма.РедактированиеОсобогоНаименованияИОписанияЗадачи",
			ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
		
		Возврат;
	КонецЕсли;
	
	Если ТолькоПросмотр
		И Не ТекущиеДанные.ЭтоПункт
		И Поле <> Элементы.ПроектРезолюции
		И Не ТекущиеДанные.ЭтоДочернийУчастник Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоДочернийУчастник Тогда
	
		СтандартнаяОбработка = Ложь;
	
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОбработатьПослеИзмененияПараметровИсполнения",
			ЭтотОбъект);
	
		ДействияКлиент.ИзменитьПодчиненноеИсполнение(
			Объект.Ссылка,
			ТекущиеДанные.ВышестоящийУчастник,,
			ОписаниеОповещения);
			
	ИначеЕсли ТекущиеДанные.ЭтоПункт Тогда
	
		СтандартнаяОбработка = Ложь;
		РежимСозданияПункта = (ТекущиеДанные.НаименованиеЭтапа = БазовоеНаименованиеЭтапа);
		ОткрытьПункт(ТекущиеДанные, Не РежимСозданияПункта);
		
	ИначеЕсли Поле = Элементы.УчастникиУсловиеПредставление
		И ТекущиеДанные <> Неопределено 
		И ЗначениеЗаполнено(ТекущиеДанные.Условие) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Условие);
		
	ИначеЕсли Поле = Элементы.ПроектРезолюции
		И ТекущиеДанные <> Неопределено 
		И Не ТекущиеДанные.ЭтоЭтап 
		И ТекущиеДанные.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.Рассматривающий") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Резолюция) Тогда
			ПоказатьЗначение(, ТекущиеДанные.Резолюция);
			Возврат;
			
		// Если резолюции нет, но действие уже активно, то ничего не делаем.
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Состояние) Тогда
			Возврат;
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения(
			"ПроектРезолюцииЗавершениеВвода", 
			ЭтотОбъект, 
			Новый Структура("ФормаВладелец, ТекущиеДанные", ЭтотОбъект, ТекущиеДанные));
		
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Комментарий", ТекущиеДанные.ПроектРезолюции);
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Проект резолюции'"));
		ПараметрыФормы.Вставить("ИспользоватьШаблоны", Истина);
		ПараметрыФормы.Вставить("ОбластьПримененияШаблона", 
			ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроектыРезолюций"));
		ОткрытьФорму("ОбщаяФорма.ВводКомментария", ПараметрыФормы,,,,,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Поле = Элементы.УчастникиЗащищенный Тогда
		
		ДействияКлиент.Защищенный(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик описания оповещения процедуры УчастникиВыбор
//
// Параметры:
//  РезультатИзмененияПараметров - Булево, Неопределено -
//  КонтекстВыполнения - Структура
//
&НаКлиенте
Процедура ОбработатьПослеИзмененияПараметровИсполнения(
	РезультатИзмененияПараметров, КонтекстВыполнения) Экспорт
	
	Если РезультатИзмененияПараметров = Истина Тогда
		
		Прочитать();
		ЗаполнитьДанные();
		ЗаполнитьПредставлениеСроков();
		
		// раскрыть все дерево
		РазвернутьДеревоУчастников();
		
		// Оповестить форму документа
		Оповестить("ОбновитьДействияВПредмете", 
			Новый Структура("Предмет, Действие", Объект.Предмет, Объект.Ссылка));
	КонецЕсли;	

КонецПроцедуры	

&НаКлиенте
Процедура ПроектРезолюцииЗавершениеВвода(ВведенныйТекст, ДополнительныеПараметры) Экспорт
	
	Если ВведенныйТекст = Неопределено
		Или ВведенныйТекст = КодВозвратаДиалога.Отмена 
		Или ТипЗнч(ВведенныйТекст) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	ТекущиеДанные.ПроектРезолюции = ВведенныйТекст;
	ТекущиеДанные.ПредставлениеРезолюции = ВведенныйТекст;
	Модифицированность = Истина;
	
КонецПроцедуры

// Продолжение процедуры УчастникиВыбор
//
&НаКлиенте
Процедура ЗавершитьНастройкуОсобогоНаименованияИОписанияИсполнителя(
	НаименованиеИОписание, СтрокаУчастника) Экспорт
	
	Если НаименованиеИОписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаУчастника.НаименованиеЗадачи = НаименованиеИОписание.Наименование;
	СтрокаУчастника.Описание = НаименованиеИОписание.Описание;
	СтрокаУчастника.ОписаниеОсобое = НаименованиеИОписание.ОписаниеОсобое;
	СтрокаУчастника.ЕстьОсобоеНаименованиеОписание = ЕстьОсобоеНаименованиеОписание(СтрокаУчастника);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьЭлементовФормы();
	ДействияКлиент.УчастникиПриАктивизацииСтроки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		
		Если Объект.ПоПунктам Тогда
			ДобавитьПункт(Неопределено);	
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ЭтоЭтап Тогда
		ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		// мы могли быть на втором уровне от этапа (дочерние исполнители)
		Если Не ТекущиеДанные.ЭтоЭтап Тогда
			ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();   
			Если ТекущиеДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущиеДанные.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат") Тогда
		ПоказатьПредупреждение(, 
			НСтр("ru = 'Добавление в этап обработки результата невозможно.'"));
		Возврат;
	КонецЕсли;

	// Запрещено настройками доступность действия
	Если ТекущиеДанные.Недоступно И Не МожноТолькоДобавлятьУчастников Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыУстановкиСрока = СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	СтрокиЭтапа = ТекущиеДанные.ПолучитьЭлементы();
	
	СтрокаУчастника = СтрокиЭтапа.Добавить();
	СтрокаУчастника.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	СтрокаУчастника.ПредставлениеСтроки = ДействияКлиентСервер.ПредставлениеУчастника(СтрокаУчастника.Участник);
	ИндексПредыдущегоЭлемента = СтрокиЭтапа.Количество() - 2;
	Пока ИндексПредыдущегоЭлемента >= 0 Цикл
		Если СтрокиЭтапа[ИндексПредыдущегоЭлемента].Функция = ПредопределенноеЗначение(
			"Перечисление.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат") Тогда
			ИндексПредыдущегоЭлемента = ИндексПредыдущегоЭлемента - 1;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ИндексПредыдущегоЭлемента >= 0 Тогда
		
		СтрокаУчастника.ВариантУстановкиСрока = 
			СтрокиЭтапа[ИндексПредыдущегоЭлемента].ВариантУстановкиСрока;
		СтрокаУчастника.ИдентификаторПункта = СтрокиЭтапа[ИндексПредыдущегоЭлемента].ИдентификаторПункта;
		Если СтрокаУчастника.ВариантУстановкиСрока = ВариантыУстановкиСрока.ТочныйСрок Тогда
			СтрокаУчастника.Срок = СтрокиЭтапа[ИндексПредыдущегоЭлемента].Срок;
		Иначе
			СтрокаУчастника.СрокДни = СтрокиЭтапа[ИндексПредыдущегоЭлемента].СрокДни;
			СтрокаУчастника.СрокЧасы = СтрокиЭтапа[ИндексПредыдущегоЭлемента].СрокЧасы;
			СтрокаУчастника.СрокМинуты = СтрокиЭтапа[ИндексПредыдущегоЭлемента].СрокМинуты;
		КонецЕсли;
		
		Если СтрокиЭтапа[ИндексПредыдущегоЭлемента].Функция = ПредопределенноеЗначение(
			"Перечисление.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат") Тогда
			СтрокаУчастника.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.Исполнитель");
		Иначе
			
			СтрокаУчастника.Функция = 
				СтрокиЭтапа[ИндексПредыдущегоЭлемента].Функция;
		КонецЕсли;
		
		ИндексТекСтроки = СтрокиЭтапа.Индекс(СтрокаУчастника);
		Если ИндексТекСтроки <> ИндексПредыдущегоЭлемента + 1 Тогда
			СтрокиЭтапа.Сдвинуть(ИндексТекСтроки, - 1);
		КонецЕсли;
	Иначе
		
		СтрокаУчастника.ВариантУстановкиСрока = ВариантыУстановкиСрока.ОтносительныйСрок;
		СтрокаУчастника.Функция = ТекущиеДанные.Функция;
	КонецЕсли;
	
	Элементы.Участники.ТекущаяСтрока = СтрокаУчастника.ПолучитьИдентификатор();
	
	ЗаполнитьПредставлениеСроков();
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ВыделенныеСтроки = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(
		Элементы.Участники.ВыделенныеСтроки);
	
	// Если выделена только одна строка, то выводим сообщение о невозможности
	// ее удаления. Иначе молча удаляем все возможные строки дерева.
	Если ВыделенныеСтроки.Количество() = 1 Тогда
		
		СтрокаДерева = Участники.НайтиПоИдентификатору(ВыделенныеСтроки[0]);
		
		ТекстПредупреждения = "";
		
		Если СтрокаДерева.ЭтоЭтап И Не Объект.ПоПунктам Тогда
			ТекстПредупреждения = ДействияКлиентПовтИсп.ТекстПредупрежденияПриУдаленииЭтапа();
		КонецЕсли;
		
		Если СтрокаДерева.Защищенный И Не МожноИзменятьЗащищенныхУчастников Тогда
			ТекстПредупреждения = ДействияКлиентПовтИсп.ТекстПредупрежденияПриУдаленииЗащищенных();
		ИначеЕсли СтрокаДерева.Недоступно И Не ЗначениеЗаполнено(ТекстПредупреждения) Тогда
			ТекстПредупреждения = ДействияКлиентПовтИсп.ТекстПредупрежденияПриУдаленииНедоступного();
		КонецЕсли;
		
		Если СтрокаДерева.Состояние =
			ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.Завершено") Тогда
			
			ТекстПредупреждения = ДействияКлиентПовтИсп.ТекстПредупрежденияПриУдаленииЗавершившего();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Вначале исключаем этапы и участников, которых невозможно удалить.
	КоличествоВыделенныхСтрок = ВыделенныеСтроки.Количество();
	ИндексСтроки = КоличествоВыделенныхСтрок - 1;
	
	Пока ИндексСтроки >= 0 Цикл
		
		ИндексТекущейСтроки = ИндексСтроки;
		ИндексСтроки = ИндексСтроки - 1;
		
		СтрокаДерева = Участники.НайтиПоИдентификатору(ВыделенныеСтроки[ИндексТекущейСтроки]);
		
		Если (СтрокаДерева.ЭтоЭтап И Не Объект.ПоПунктам) 
			Или СтрокаДерева.Защищенный И Не МожноИзменятьЗащищенныхУчастников Тогда
			
			ВыделенныеСтроки.Удалить(ИндексТекущейСтроки);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаляем всех выделенных участников.
	КоличествоВыделенныхСтрок = ВыделенныеСтроки.Количество();
	ИндексСтроки = КоличествоВыделенныхСтрок - 1;
	
	Пока ИндексСтроки >= 0 Цикл
		
		ИндексТекущейСтроки = ИндексСтроки;
		ИндексСтроки = ИндексСтроки - 1;
		
		СтрокаУчастника = Участники.НайтиПоИдентификатору(ВыделенныеСтроки[ИндексТекущейСтроки]);
		Если СтрокаУчастника = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаЭтапа = СтрокаУчастника.ПолучитьРодителя();
		Если СтрокаЭтапа = Неопределено И Объект.ПоПунктам Тогда
			ЭлементыУчастников = Участники.ПолучитьЭлементы();
			ЭлементыУчастников.Удалить(СтрокаУчастника);
		Иначе
			ЭлементыУчастников = СтрокаЭтапа.ПолучитьЭлементы();
			
			Если СтрокаЭтапа.Функция = 
				ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат") Тогда 
				Если Элементы.Участники.ТекущийЭлемент.Имя = "ПредставлениеСтроки" Тогда
					ЭлементыУчастников[0].Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
				Иначе
					ЭлементыУчастников[0][Элементы.Участники.ТекущийЭлемент.Имя] = Неопределено;
				КонецЕсли;
			Иначе 
				ЭлементыУчастников.Удалить(СтрокаУчастника);
			КонецЕсли;
		КонецЕсли;
		ВыделенныеСтроки.Удалить(ИндексТекущейСтроки);
	
		Модифицированность = Истина;
	КонецЦикла;
	
	ДействияКлиент.УбратьОтветственногоУчастника(ЭтотОбъект);
	ОбновитьПредставленияВДеревеУчастников(Участники, Объект.ПоПунктам);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено
		Или ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	// Определение строки этапа.
	СтрокаЭтапа = Участники.НайтиПоИдентификатору(Элементы.Участники.ТекущаяСтрока);
	Если Не СтрокаЭтапа.ЭтоЭтап Тогда
		СтрокаЭтапа = СтрокаЭтапа.ПолучитьРодителя();
	КонецЕсли;
	
	Если Не СтрокаЭтапа.ЭтоЭтап Тогда
		ВызватьИсключение НСтр("ru = 'Не определена строка этапа'");
	КонецЕсли;
	
	Если СтрокаЭтапа.Функция <> ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.Исполнитель")
		И СтрокаЭтапа.Функция <> ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.Рассматривающий") Тогда
		Возврат;
	КонецЕсли;
	
	УдаленыНекоторыеУчастники = Ложь;
	ДобавленыНовыеУчастники = Ложь;
	
	// Массив выбранных участников с обратной сортировкой.
	ВыбранныеУчастники = Новый Массив;
	ИндексСтроки = ВыбранноеЗначение.Количество() - 1;
	Пока ИндексСтроки >= 0 Цикл
		ВыбранныеУчастники.Добавить(ВыбранноеЗначение[ИндексСтроки]);
		ИндексСтроки = ИндексСтроки - 1;
	КонецЦикла;
	
	// Определение порядка выполнения, сроков и т.д. для новых строк.
	ВариантыУстановкиСрока = СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	ЗначенияКолонокДляНовыхСтрок = Новый Структура;
	ЗначенияКолонокДляНовыхСтрок.Вставить("ВариантУстановкиСрока",
		ВариантыУстановкиСрока.ОтносительныйСрок);
	ЗначенияКолонокДляНовыхСтрок.Вставить("Срок", Дата(1,1,1));
	ЗначенияКолонокДляНовыхСтрок.Вставить("СрокДни", 0);
	ЗначенияКолонокДляНовыхСтрок.Вставить("СрокЧасы", 0);
	ЗначенияКолонокДляНовыхСтрок.Вставить("СрокМинуты", 0);
	ЗначенияКолонокДляНовыхСтрок.Вставить("Функция", СтрокаЭтапа.Функция);
	ЗначенияКолонокДляНовыхСтрок.Вставить("Состояние", СтрокаЭтапа.Состояние);
	
	// Удаление неактуальных участников.
	СтрокиУчастников = СтрокаЭтапа.ПолучитьЭлементы();
	ИндексСтроки = СтрокиУчастников.Количество() - 1;
	Пока ИндексСтроки >= 0 Цикл
		
		СтрокаУчастника = СтрокиУчастников[ИндексСтроки];
		
		Если ИндексСтроки = СтрокиУчастников.Количество() - 1 Тогда
			ЗаполнитьЗначенияСвойств(ЗначенияКолонокДляНовыхСтрок, СтрокаУчастника);
		КонецЕсли;
		
		// Пропускаем существующих участников этапа.
		ВыбранныйУчастник = ВыбранныеУчастники.Найти(СтрокаУчастника.Участник);
		Если ВыбранныйУчастник <> Неопределено Тогда
			ВыбранныеУчастники.Удалить(ВыбранныйУчастник);
			ИндексСтроки = ИндексСтроки - 1;
			Продолжить;
		КонецЕсли;
		
		// Завершивших свои задачи менять нельзя
		Если СтрокаУчастника.Состояние = ПредопределенноеЗначение(
			"Перечисление.СостоянияВыполненияДействий.Завершено") Тогда
			ИндексСтроки = ИндексСтроки - 1;
			Продолжить;
		КонецЕсли;
		
		// Защищенных участников удалять нельзя
		Если СтрокаУчастника.Защищенный Тогда
			ИндексСтроки = ИндексСтроки - 1;
			Продолжить;
		КонецЕсли;
		
		Если СтрокаУчастника.Недоступно И МожноТолькоДобавлятьУчастников Тогда
			ИндексСтроки = ИндексСтроки - 1;
			Продолжить;
		КонецЕсли;
		
		СтрокиУчастников.Удалить(СтрокаУчастника);
		УдаленыНекоторыеУчастники = Истина;
		
		ИндексСтроки = ИндексСтроки - 1;
		
	КонецЦикла;
	
	// Добавление новых участников.
	ИндексСтроки = ВыбранныеУчастники.Количество() - 1;
	Пока ИндексСтроки >= 0 Цикл
		
		ВыбранныйУчастник = ВыбранныеУчастники[ИндексСтроки];
		
		СтрокаУчастника = СтрокиУчастников.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаУчастника, ЗначенияКолонокДляНовыхСтрок);
		СтрокаУчастника.Участник = ВыбранныйУчастник;
		
		СтрокаУчастника.Идентификатор = Новый УникальныйИдентификатор;
		ВыбранныеУчастники.Удалить(ИндексСтроки);
		ДобавленыНовыеУчастники = Истина;
		ИндексСтроки = ИндексСтроки - 1;
		
	КонецЦикла;
	
	ДействияКлиент.УбратьОтветственногоУчастника(ЭтотОбъект);
	Если ДобавленыНовыеУчастники Тогда
		ОбновитьПредставленияВДеревеУчастников(Участники, Объект.ПоПунктам);
		РазвернутьДеревоУчастников();
		ЗаполнитьПредставлениеСроков();
	КонецЕсли;
	
	Если УдаленыНекоторыеУчастники Или ДобавленыНовыеУчастники Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Работа с УчастникиПредставлениеСтроки

&НаКлиенте
Процедура ПредставлениеСтрокиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Участник = ТекущиеДанные.ПредставлениеСтроки;
	ТекущиеДанные.ИзНастройки = Ложь;
	
	ДействияКлиент.УчастникиПриАктивизацииСтроки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаголовокФормы = НСтр("ru = 'Выбор исполнителя'");
	ДействияКлиент.ПредставлениеСтрокиНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка, ЗаголовокФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиОткрытие(Элемент, СтандартнаяОбработка)
	
	ДействияКлиент.ПредставлениеСтрокиОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиОчистка(Элемент, СтандартнаяОбработка)
	
	ДействияКлиент.ПредставлениеСтрокиОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЭтап Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ДействияКлиент.ПредставлениеСтрокиОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	// Если значение требует уточнения, будет вызвана форма для ввода уточняющих данных.
	// Обработка выбора не должна выполняться в этом случае.
	ТипыДляУточнения = Новый Массив;
	ТипыДляУточнения.Добавить(Тип("Структура"));
	ТипыДляУточнения.Добавить(Тип("СправочникСсылка.РолиИсполнителей"));
	ТипыДляУточнения.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	ТипыДляУточнения.Добавить(Тип("СправочникСсылка.Проекты"));
	Если ТипыДляУточнения.Найти(ТипЗнч(ВыбранноеЗначение)) <> Неопределено Тогда
		СотрудникиКлиент.ОбработкаВыбораКонтейнера(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
		// Повторная проверка (значение могло быть изменено).
		Если ТипыДляУточнения.Найти(ТипЗнч(ВыбранноеЗначение)) <> Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ТекущиеДанные.Участник = ВыбранноеЗначение;
	Иначе
		ТекущиеДанные.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка")
	КонецЕсли;
	
	РазвернутьДеревоУчастников();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДействияКлиент.ПредставлениеСтрокиАвтоПодбор(
		ЭтотОбъект,Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДействияКлиент.ПредставлениеСтрокиОкончаниеВводаТекста(
		ЭтотОбъект, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередНачаломИзменения(Элемент, Отказ)
	
	ДействияКлиент.УчастникиПередНачаломИзменения(ЭтотОбъект, Отказ);
	
КонецПроцедуры

// Работа с УчастникиСрокПредставление

&НаКлиенте
Процедура СрокПредставлениеПриИзменении(Элемент)
	
	ДействияКлиент.СрокПредставлениеПриИзменении(ЭтотОбъект, Элемент, Не РазныеСроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДействияКлиент.СрокПредставлениеНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ДействияКлиент.СрокПредставлениеРегулирование(
		ЭтотОбъект, Элемент, Направление, СтандартнаяОбработка, Не РазныеСроки);
	ЗаполнитьПредставлениеСроков();
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДействияКлиент.СрокПредставлениеОбработкаВыбора(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка, Не РазныеСроки);
	ЗаполнитьПредставлениеСроков();
	
КонецПроцедуры

// Работа с УчастникиНаименованиеЗадачи

&НаКлиенте
Процедура НаименованиеЗадачиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ЕстьОсобоеНаименованиеОписание = ЕстьОсобоеНаименованиеОписание(ТекущиеДанные);
	
КонецПроцедуры

// Работа с УчастникиОписание

&НаКлиенте
Процедура ОписаниеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ЕстьОсобоеНаименованиеОписание = ЕстьОсобоеНаименованиеОписание(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандФормыУчастники

&НаКлиенте
Процедура Готово(Команда)
	
	ДействияКлиент.ГотовоИзКарточкиДействия(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьДиалог(Команда)
	
	Закрыть(КодВозвратаДиалога.ОК);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть(КодВозвратаДиалога.Отмена);
	
КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		И Объект.ПоПунктам Тогда
		ДобавитьПункт(Неопределено);
		ТекущиеДанные = Элементы.Участники.ТекущиеДанные;	
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаЭтапа = Участники.НайтиПоИдентификатору(Элементы.Участники.ТекущаяСтрока);
	Если Не СтрокаЭтапа.ЭтоЭтап Тогда
		СтрокаЭтапа = СтрокаЭтапа.ПолучитьРодителя();
	КонецЕсли;
	
	Если Не СтрокаЭтапа.ЭтоЭтап Тогда
		ВызватьИсключение НСтр("ru = 'Не определена строка этапа.'");
	КонецЕсли;
	
	Если СтрокаЭтапа.Функция <> ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.Исполнитель")
		И СтрокаЭтапа.Функция <> ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.Рассматривающий") Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныеАдресаты = Новый Массив;
	УчастникиЭтапов = СтрокаЭтапа.ПолучитьЭлементы();
	Для Каждого СтрокаУчастника Из УчастникиЭтапов Цикл
		Если ЗначениеЗаполнено(СтрокаУчастника.Участник)
			И СтрокаУчастника.Функция <> ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат") Тогда
			СтруктураАдресата = Новый Структура("Участник, Недоступно",
				СтрокаУчастника.Участник, СтрокаУчастника.Недоступно Или СтрокаУчастника.Защищенный);
			ВыбранныеАдресаты.Добавить(СтруктураАдресата);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПолученияДанных = Новый Структура;
	ПараметрыПолученияДанных.Вставить("ВыборМножества", Истина);
	ПараметрыПолученияДанных.Вставить("ФункцияУчастника", СтрокаЭтапа.Функция);
	ПараметрыПолученияДанных.Вставить("КонтролироватьСотрудниковБезПользователя", Истина);
	
	РаботаСАдреснойКнигойКлиент.ВыбратьУчастника(ЭтотОбъект, Элементы.Участники, Ложь,
		ВыбранныеАдресаты,,	НСтр("ru = 'Подбор исполнителей'"), ПараметрыПолученияДанных);
		
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЭтап Тогда
		
		Если Не Объект.ПоПунктам Тогда
			ПоказатьПредупреждение(,
				НСтр("ru = 'Нельзя менять порядок этапов.'"));
			Возврат;
		КонецЕсли;
		
		УчастникиЭтапа = Участники.ПолучитьЭлементы();
		
		ИндексТекущейСтроки = УчастникиЭтапа.Индекс(ТекущиеДанные);
		
		Если ИндексТекущейСтроки = 0 Тогда
			Возврат;
		КонецЕсли;
		
		УчастникиЭтапа.Сдвинуть(ИндексТекущейСтроки, -1);
		
	Иначе
		
		УчастникиЭтапа = ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
		
		ИндексТекущейСтроки = УчастникиЭтапа.Индекс(ТекущиеДанные);
		
		Если ИндексТекущейСтроки = 0 Тогда
			Возврат;
		КонецЕсли;
		
		УчастникиЭтапа.Сдвинуть(ИндексТекущейСтроки, -1);
		
	КонецЕсли;
	
	ОбновитьПредставленияВДеревеУчастников(Участники, Объект.ПоПунктам);
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЭтап Тогда
		
		Если Не Объект.ПоПунктам Тогда
			ПоказатьПредупреждение(,
				НСтр("ru = 'Нельзя менять порядок этапов.'"));
			Возврат;
		КонецЕсли;
		
		УчастникиЭтапа = Участники.ПолучитьЭлементы();
		
		ИндексТекущейСтроки = УчастникиЭтапа.Индекс(ТекущиеДанные);
		
		Если ИндексТекущейСтроки = УчастникиЭтапа.Количество() - 1 Тогда
			Возврат;
		КонецЕсли;
		
		УчастникиЭтапа.Сдвинуть(ИндексТекущейСтроки, 1);
		
	Иначе
		
		УчастникиЭтапа = ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
		
		ИндексТекущейСтроки = УчастникиЭтапа.Индекс(ТекущиеДанные);
		
		Если ИндексТекущейСтроки = УчастникиЭтапа.Количество() - 1 Тогда
			Возврат;
		КонецЕсли;
		
		УчастникиЭтапа.Сдвинуть(ИндексТекущейСтроки, 1);
		
	КонецЕсли;
	
	ОбновитьПредставленияВДеревеУчастников(Участники, Объект.ПоПунктам);
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура Защищенный(Команда)
	ДействияКлиент.Защищенный(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтветственного(Команда)
	
	ДействияКлиент.УстановитьОтветственногоИсполнителя(ЭтотОбъект) 
		
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗадержку(Команда)
	
	ДействияКлиент.ОчиститьЗадержку(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРазныеСроки(Команда)
	
	РазныеСроки = Не РазныеСроки;
	Элементы.УчастникиРазныеСроки.Пометка = РазныеСроки;
	ДействияКлиент.УстановитьОдинаковыйСрокРекурсивно(Участники.ПолучитьЭлементы(), ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура НаправитьНовымУчастникам(Команда)
	
	ИсполнениеДействияСНовымиУчастниками = Истина;
	
	ТолькоПросмотр = Ложь;
	Элементы.ЗаписатьИЗакрыть.Видимость = Истина;
	Элементы.ЗаписатьИЗакрыть.КнопкаПоУмолчанию = Истина;
	УстановитьДоступностьИзмененияУчастников();
	УстановитьДоступностьЭлементовФормы();
	
	// Сразу добавим новую строку
	Для Каждого Этап Из Участники.ПолучитьЭлементы() Цикл
		
		Если Этап.Недоступно
			Или (Этап.Функция <> ПредопределенноеЗначение(
				"Перечисление.ФункцииУчастниковИсполнения.Исполнитель")
			
				И Этап.Функция <> ПредопределенноеЗначение(
					"Перечисление.ФункцииУчастниковИсполнения.Рассматривающий")) Тогда
			
			Продолжить;
		КонецЕсли; 	
				
		СтрокаУчастника = Этап.ПолучитьЭлементы().Добавить();
		СтрокаУчастника.ПредставлениеСтроки = 
		Строка(ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка")) 
				+ "                              ";
		СтрокаУчастника.Функция = Этап.Функция;
			
		Элементы.Участники.ТекущаяСтрока = СтрокаУчастника.ПолучитьИдентификатор();
		
		Прервать;
	КонецЦикла;
	
	Элементы.НаправитьНовымУчастникам.Видимость = Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура ИсполнениеПоПунктам(Команда)
	
	Объект.ПоПунктам = Не Объект.ПоПунктам;
	
	Элементы.УчастникиВзятьИзФайла.Видимость = Объект.ПоПунктам;
	
	ЭлементыУчастники = Участники.ПолучитьЭлементы();
	СтруктураОтбора = Новый Структура("ЭтоЭтап, ЭтоПункт", Ложь, Ложь);
	МассивУчастников = ОбщегоНазначенияДокументооборотКлиентСервер.НайтиСтрокиДерева(Участники, СтруктураОтбора);
	ЭлементыУчастники.Очистить();
	
	Если Объект.ПоПунктам Тогда
		
		ДобавитьПункт(Неопределено);
		УчастникиЭтапа = ЭлементыУчастники[0].ПолучитьЭлементы();
		Для Каждого ЭлементМассива Из МассивУчастников Цикл
			Если ЗначениеЗаполнено(ЭлементМассива.Участник) Тогда
				СтрокаУчастник = УчастникиЭтапа.Добавить();
				ЭлементМассива.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.Исполнитель");
				ЗаполнитьЗначенияСвойств(СтрокаУчастник, ЭлементМассива,, "Защищенный");
			КонецЕсли;
		КонецЦикла;
		Объект.ПодписыватьРезолюцииЭП = Ложь;
		
	Иначе
		
		Если МассивУчастников.Количество() = 0 Тогда
			ОбновитьДеревоУчастниковПоОбъекту();
		Иначе
			ОбновитьДеревоУчастниковПоОбъекту(Ложь);
			ОтборИсполнение = Новый Структура("Функция", ПредопределенноеЗначение(
				"Перечисление.ФункцииУчастниковИсполнения.Исполнитель"));
			ЭтапИсполнение = ОбщегоНазначенияДокументооборотКлиентСервер.НайтиСтрокуДерева(Участники, ОтборИсполнение);
			УчастникиЭтапа = ЭтапИсполнение.ПолучитьЭлементы();
			
			МаксимальныйСрокИсполнения = Дата(1, 1, 1);
			МаксимальныйЭлементМассива = Неопределено;
			ВариантыУстановкиСрокаИсполнения = СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
			Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
				СрокиИсполненияПроцессовКлиентСервер.УбратьСекундыВДате(ДатаОтсчетаДляРасчетаСроков);
			Иначе
				ВремяДатыОтсчета = Дата(1,1,1)
					+ Час(ДатаОтсчетаДляРасчетаСроков) * 3600 
					+ Минута(ДатаОтсчетаДляРасчетаСроков) *60;
				
				Если ВремяДатыОтсчета > Дата(1,1,1) + 9 * 3600 Тогда
					ДатаОтсчетаДляРасчетаСроков = НачалоДня(ДатаОтсчетаДляРасчетаСроков) + 86400;
				Иначе
					ДатаОтсчетаДляРасчетаСроков = НачалоДня(ДатаОтсчетаДляРасчетаСроков);
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого ЭлементМассива Из МассивУчастников Цикл
				
				Если ЭлементМассива.ВариантУстановкиСрока = ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок Тогда
					
					СрокВСекундах = ЭлементМассива.СрокДни * 86400;
					Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
						СрокВСекундах = СрокВСекундах + ЭлементМассива.СрокЧасы * 3600 + ЭлементМассива.СрокМинуты * 60;
					Иначе
						СрокВСекундах = СрокВСекундах - 1;
					КонецЕсли;
		
					СрокИсполнения = ДатаОтсчетаДляРасчетаСроков + СрокВСекундах;
				Иначе
					
					СрокИсполнения = ЭлементМассива.Срок;
				КонецЕсли;
				
				Если СрокИсполнения = Макс(МаксимальныйСрокИсполнения, СрокИсполнения) Тогда
					МаксимальныйСрокИсполнения = СрокИсполнения;
					МаксимальныйЭлементМассива = ЭлементМассива;
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого ЭлементМассива Из МассивУчастников Цикл
				СтрокаУчастник = УчастникиЭтапа.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаУчастник, ЭлементМассива);
				Если МаксимальныйЭлементМассива <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(СтрокаУчастник, МаксимальныйЭлементМассива,
						"ВариантУстановкиСрока, Срок, СрокДни, СрокЧасы, СрокМинуты");
				КонецЕсли;
			КонецЦикла;
			
			ЗаполнитьПредставлениеСроков();
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимостьДоступностьПолейПоПунктам();
	Элементы.ИсполнениеПоПунктам.Пометка = Объект.ПоПунктам;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПункт(Команда)
	
	ЭлементыУчастники = Участники.ПолучитьЭлементы();
	
	СтрокаПункта = ЭлементыУчастники.Добавить();
	ДобавитьНовыйПункт(СтрокаПункта, ЭлементыУчастники, БазовоеНаименованиеЭтапа);
	Элементы.Участники.ТекущаяСтрока = СтрокаПункта.ПолучитьИдентификатор();
	
	Если Команда <> Неопределено Тогда
		ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
		ОткрытьПункт(ТекущиеДанные, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьИзФайла(Команда)
	
	Если Элементы.УчастникиВзятьИзФайла.Пометка Тогда
		Элементы.УчастникиВзятьИзФайла.Пометка = Ложь;
		Элементы.ГруппаТекст.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.УчастникиВзятьИзФайла.Пометка = Истина;
	
	МассивФайлов = Новый Массив;
	ИзвлеченныйТекст = "";
	ДанныеФайла = Неопределено;
	РаботаСФайламиВызовСервера.ПолучитьСписокФайловИТекст(
		Объект.Предмет, УникальныйИдентификатор, МассивФайлов, ИзвлеченныйТекст, ДанныеФайла);
		
	Если МассивФайлов.Количество() = 0 Тогда
		Если ТипЗнч(ОБъект.Предмет) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
			ТекстПредупреждения =
				НСтр("ru = 'В документе нет файлов doc, docx, odt и форматов Таймлист.'");
		ИначеЕсли ТипЗНч(Объект.Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда
			ТекстПредупреждения =
				НСтр("ru = 'В мероприятии нет файлов doc, docx, odt и форматов Таймлист.'");
		Иначе
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный тип предмета действия обработки %1 (%2).'"),
				ОБъект.Предмет,
				ТипЗнч(ОБъект.Предмет));
		КонецЕсли;
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Элементы.УчастникиВзятьИзФайла.Пометка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если МассивФайлов.Количество() > 1 Тогда
		
		ОписаниеОповещенияОВыборе = Новый ОписаниеОповещения(
			"ВзятьИзФайла_Продолжение",
			ЭтотОбъект);
		
		ПараметрыОткрытия = Новый Структура("Файлы", МассивФайлов);
		ОткрытьФорму("ОбщаяФорма.ВыборФайлаДляИзвлеченияТекста", ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещенияОВыборе,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		Возврат;
		
	КонецЕсли;
	
	ВыбранныйФайл = МассивФайлов[0];
	Элементы.ДекорацияТекст.Заголовок = Строка(ВыбранныйФайл);
	
	#Если ТонкийКлиент Тогда
		
		Если ОбщегоНазначенияКлиент.ЭтоWindowsКлиент() И ДанныеФайла <> Неопределено Тогда
			
			ИзвлеченныйТекст = ДействияКлиент.ПолучитьТекст(ДанныеФайла, СпособСогласованияВРежимеЗамечаний);
			
		КонецЕсли;
		
	#КонецЕсли	
	
	Если Не ЗначениеЗаполнено(ИзвлеченныйТекст) Тогда
		ИзвлеченныйТекст = РаботаСФайламиВызовСервера.ПолучитьТекстФайла(ВыбранныйФайл);
	КонецЕсли;

	// Если ровно 1 файл и не надо выбирать файл.
	ПоказатьТекстДляПунктов(ИзвлеченныйТекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьИзФайла_Продолжение(ВыбранноеЗначение, Параметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Элементы.УчастникиВзятьИзФайла.Пометка = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ДекорацияТекст.Заголовок = Строка(ВыбранноеЗначение.Файл);
	
	ИзвлеченныйТекст = "";
	
	Если ТаймлистИспользуется И ТаймлистКлиентСервер.ЭтоРасширениеФайлаТаймлист(ВыбранноеЗначение.Расширение) Тогда
		
		ДанныеФайла = ТаймлистВызовСервера.ДанныеФайлаДляОткрытия(ВыбранноеЗначение.Файл);
		ПунктыПротокола = СтрРазделить(ДанныеФайла.СледующиеШаги, ";");
		ПунктыДляОтображения = Новый Массив;
		НомерПункта = 1;
		Для Каждого Пункт Из ПунктыПротокола  Цикл
			ПунктыДляОтображения.Добавить(СтрШаблон("%1. %2;", НомерПункта, Пункт));
			НомерПункта = НомерПункта + 1;
		КонецЦикла;
		
		ИзвлеченныйТекст = СтрСоединить(ПунктыДляОтображения, Символы.ПС);
		
	Иначе
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ВыбранноеЗначение.Файл, , УникальныйИдентификатор);
		
		#Если ТонкийКлиент Тогда
			
			Если ОбщегоНазначенияКлиент.ЭтоWindowsКлиент() Тогда
				
				ИзвлеченныйТекст = ДействияКлиент.ПолучитьТекст(ДанныеФайла, СпособСогласованияВРежимеЗамечаний);
				
			КонецЕсли;
			
		#КонецЕсли
		
		Если Не ЗначениеЗаполнено(ИзвлеченныйТекст) Тогда
			ИзвлеченныйТекст = РаботаСФайламиВызовСервера.ПолучитьТекстФайла(ВыбранноеЗначение.Файл);
		КонецЕсли;
	
	КонецЕсли;
	
	ПоказатьТекстДляПунктов(ИзвлеченныйТекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьПункт(Команда)
	
	ВыделенныйТекст = Элементы.ТекстДляПунктов.ВыделенныйТекст;
	Если Не ЗначениеЗаполнено(ВыделенныйТекст) Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите текст пункта.'"));
		Возврат;
		
	КонецЕсли;	
	
	ЭлементыУчастники = Участники.ПолучитьЭлементы();
	
	СтрокаПункта = ЭлементыУчастники.Добавить();
	ДобавитьНовыйПункт(СтрокаПункта, ЭлементыУчастники, БазовоеНаименованиеЭтапа);
	Элементы.Участники.ТекущаяСтрока = СтрокаПункта.ПолучитьИдентификатор();
	
	ДатаПункта = Неопределено;
	Номер = "";
	ДействияКлиент.ВыделитьЭлементыПункта(ВыделенныйТекст, ДатаПункта, Номер);
	
	Элементы.ТекстДляПунктов.УстановитьГраницыВыделения(1, 1);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ТолькоОткрытие", Ложь);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработатьПослеИзмененияПункта",
		ЭтотОбъект,
		ПараметрыОповещения);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Действие", Объект.Ссылка);
	ПараметрыФормы.Вставить("Предмет", Объект.Предмет);
	ПараметрыФормы.Вставить("Описание", ВыделенныйТекст);
	ПараметрыФормы.Вставить("Номер", Номер);
	ПараметрыФормы.Вставить("АвторИсполнения", ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка"));
	ПараметрыФормы.Вставить("Контролер", ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка"));
	ПараметрыФормы.Вставить("Срок", ДатаПункта);
	
	ИсполнителиИсполнения = Новый Массив;
	ПараметрыФормы.Вставить("ИсполнителиИсполнения", ИсполнителиИсполнения);
	
	ПараметрыФормы.Вставить("ЭтоВводПункта", Истина);
	ПараметрыФормы.Вставить("ИдентификаторПункта", СтрокаПункта.ИдентификаторПункта);
	
	ОткрытьФорму("Справочник.ДействияИсполнения.Форма.НастройкаДочернегоИсполнения",
		ПараметрыФормы,,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеВыполненоВнеПрограммы(Команда)
	
	ДействияКлиент.ВводРезультатаВыполненияВнеПрограммыИзФормыДействия(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере 
Процедура УстановитьВидимостьДоступностьПолейПоПунктам()
	
	Элементы.ПроектРезолюции.Видимость = Не Объект.ПоПунктам;
	Элементы.ПодписыватьРезолюцииЭП.Видимость = Не Объект.ПоПунктам;
	Элементы.УчастникиДобавитьПункт.Видимость = Объект.ПоПунктам;
	Элементы.КонтекстДобавитьПункт.Видимость = Объект.ПоПунктам;
	Элементы.ЕстьОсобоеНаименованиеОписание.Видимость = Не Объект.ПоПунктам;
	
	Если Объект.ПоПунктам Тогда
		Элементы.ПредставлениеСтроки.Заголовок = НСтр("ru = 'Пункты, участники'");
	Иначе
		Элементы.ПредставлениеСтроки.Заголовок = НСтр("ru = 'Участники'");
	КонецЕсли;
	
	Элементы.Защищенный.Видимость = Не Объект.ПоПунктам;
	Элементы.УчастникиЗащищенный.Видимость = Не Объект.ПоПунктам;
	
	// Если задано из настройки, то поменять нельзя.
	// Видим кнопку только если в настройке задано по пунктам
	Элементы.ИсполнениеПоПунктам.Доступность = Не РежимДиалога;
	Если ЗначениеЗаполнено(Объект.НастройкаДействия) Тогда
		Элементы.ИсполнениеПоПунктам.Доступность = Ложь;
		Элементы.ИсполнениеПоПунктам.Видимость = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект.НастройкаДействия, "ПоПунктам");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИзменениеДействияРазрешено()
	
	ПредметДействия = Неопределено;
	Если ЗначениеЗаполнено(Объект.Предмет) Тогда
		ПредметДействия = Объект.Предмет
	ИначеЕсли Параметры.Свойство("Предмет") Тогда
		ПредметДействия = Параметры.Предмет;
	КонецЕсли;
	
	Возврат ДействияСервер.ИзменениеДействияРазрешено(Объект.Ссылка, ПредметДействия);
	
КонецФункции

// Заполняет представление сроков в карточке действия.
//
&НаКлиенте
Процедура ЗаполнитьПредставлениеСроков() Экспорт
	
	ЭтапыУчастников = Участники.ПолучитьЭлементы();
	
	Для Каждого ЭтапУчастников Из ЭтапыУчастников Цикл
		
		Если ЭтапУчастников.СрокОбщий Или ЗначениеЗаполнено(ЭтапУчастников.Срок)
			Или ЗначениеЗаполнено(ЭтапУчастников.СрокДни) 
			Или ЗначениеЗаполнено(ЭтапУчастников.СрокЧасы)
			Или ЗначениеЗаполнено(ЭтапУчастников.СрокМинуты) Тогда
			ЭтапУчастников.СрокПредставление = 
				СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
					ЭтапУчастников.Срок,
					ЭтапУчастников.СрокДни,
					ЭтапУчастников.СрокЧасы,
					ЭтапУчастников.СрокМинуты,
					ИспользоватьДатуИВремяВСрокахЗадач,
					ЭтапУчастников.ВариантУстановкиСрока);
		Иначе
			ЭтапУчастников.СрокПредставление = "";
		КонецЕсли;
		
		УчастникиЭтапа = ЭтапУчастников.ПолучитьЭлементы();
		
		Для Каждого УчастникЭтапа Из УчастникиЭтапа Цикл
			
			УчастникЭтапа.СрокПредставление = 
				СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
					УчастникЭтапа.Срок,
					УчастникЭтапа.СрокДни,
					УчастникЭтапа.СрокЧасы,
					УчастникЭтапа.СрокМинуты,
					ИспользоватьДатуИВремяВСрокахЗадач,
					УчастникЭтапа.ВариантУстановкиСрока);


			УчастникиДочерние = УчастникЭтапа.ПолучитьЭлементы();
			
			Для Каждого УчастникДочерний Из УчастникиДочерние Цикл
				
				УчастникДочерний.СрокПредставление = 
					СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
						УчастникДочерний.Срок,
						УчастникДочерний.СрокДни,
						УчастникДочерний.СрокЧасы,
						УчастникДочерний.СрокМинуты,
						ИспользоватьДатуИВремяВСрокахЗадач,
						УчастникДочерний.ВариантУстановкиСрока);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Признак недоступности строки, переопределяемый для данного вида действия участника.
// Вызывается для строк с участниками, т.е. "нижнего" уровня дерева.
// 
// Параметры:
//  СтрокаДерева - ДанныеФормыЭлементДерева - Строка дерева "Участники".
//  СтрокаРодитель - Неопределено, ДанныеФормыЭлементДерева - Строка родитель строки дерева.
// 
// Возвращаемое значение:
//  Булево - Признак, что строка должна быть недоступна.
&НаКлиенте
Функция СтрокаУчастникаНедоступна(СтрокаДерева, СтрокаРодитель) Экспорт
	
	Возврат СтрокаДерева.Недоступно
		Или СтрокаДерева.ЭтоДочернийУчастник
		Или СтрокаДерева.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.Завершено");
	
КонецФункции

// Обновляет доступность элементов формы.
&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы() Экспорт
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если ТекущийРодитель = Неопределено Тогда
		ЭлементыРодителя = Участники.ПолучитьЭлементы();
	Иначе
		ЭлементыРодителя = ТекущийРодитель.ПолучитьЭлементы();
	КонецЕсли;
	Индекс = ЭлементыРодителя.Индекс(ТекущиеДанные);
	ЭтоПервыйЭлемент = 
		Индекс = 0;
	ЭтоПоследнийЭлемент = 
		Индекс = ЭлементыРодителя.Количество() - 1;
	
	ПредыдущийДоступен = Ложь;
	Если Не ЭтоПервыйЭлемент Тогда
		ПредыдущийЭлемент = ЭлементыРодителя.Получить(Индекс - 1);
		ПредыдущийДоступен = Не ПредыдущийЭлемент.Недоступно;
	КонецЕсли;
	
	СледующийДоступен = Ложь;
	Если Не ЭтоПоследнийЭлемент Тогда
		СледующийЭлемент = ЭлементыРодителя.Получить(Индекс + 1);
		СледующийДоступен = Не СледующийЭлемент.Недоступно
			И СледующийЭлемент.Функция <> ПредопределенноеЗначение(
				"Перечисление.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат");
	КонецЕсли;
	
	КоличествоЭлементовРодителя = ЭлементыРодителя.Количество();
	ОтветственныйУстановленНедоступен = Ложь;
	Для каждого Элемент Из ЭлементыРодителя Цикл
		Если Элемент.Ответственный И Элемент.Недоступно Тогда
			ОтветственныйУстановленНедоступен = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Элементы.УстановитьОтветственный.Пометка = Ложь;
		
	Если ТекущиеДанные.Функция = ПредопределенноеЗначение(
		"Перечисление.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат") Тогда
		ТолькоПросмотрСтроки = ТекущиеДанные.ЭтоЭтап Или ТекущиеДанные.Недоступно;
		Элементы.ПредставлениеСтроки.ТолькоПросмотр = ТолькоПросмотрСтроки;
		Элементы.СрокПредставление.ТолькоПросмотр = ТолькоПросмотрСтроки;
		Элементы.ЕстьОсобоеНаименованиеОписание.ТолькоПросмотр = ТолькоПросмотрСтроки;
		Элементы.НаименованиеЗадачи.ТолькоПросмотр = ТолькоПросмотрСтроки;
		Элементы.Описание.ТолькоПросмотр = ТолькоПросмотрСтроки;
		Элементы.ОписаниеОсобое.ТолькоПросмотр = ТолькоПросмотрСтроки;
		
		Элементы.Подобрать.Доступность = Ложь;
		Элементы.Добавить.Доступность = Ложь;
		Элементы.ПереместитьВверх.Доступность = Ложь;
		Элементы.ПереместитьВниз.Доступность = Ложь;
		Элементы.Удалить.Доступность = Не ТолькоПросмотрСтроки;
		Элементы.ПроектРезолюции.ТолькоПросмотр = Истина;
		Элементы.УстановитьОтветственный.Доступность = Ложь;
		
	ИначеЕсли ТекущиеДанные.ЭтоЭтап Тогда
		
		Элементы.ПредставлениеСтроки.ТолькоПросмотр = Истина;
		Элементы.СрокПредставление.ТолькоПросмотр = Истина;
		Элементы.ЕстьОсобоеНаименованиеОписание.ТолькоПросмотр = Истина;
		Элементы.НаименованиеЗадачи.ТолькоПросмотр = Истина;
		Элементы.Описание.ТолькоПросмотр = Истина;
		Элементы.ОписаниеОсобое.ТолькоПросмотр = Истина;
		
		Элементы.Подобрать.Доступность = Не ТекущиеДанные.Недоступно Или МожноТолькоДобавлятьУчастников;
		Элементы.Добавить.Доступность = Не ТекущиеДанные.Недоступно Или МожноТолькоДобавлятьУчастников;
		Элементы.ПереместитьВверх.Доступность = Объект.ПоПунктам И Не ТекущиеДанные.Недоступно И ПредыдущийДоступен;
		Элементы.ПереместитьВниз.Доступность = Объект.ПоПунктам И Не ТекущиеДанные.Недоступно И СледующийДоступен;
		Элементы.Удалить.Доступность = Не ТекущиеДанные.Недоступно;
		Элементы.ПроектРезолюции.ТолькоПросмотр = Истина;
		Элементы.УстановитьОтветственный.Доступность = Ложь;
		
	Иначе // Исполнитель
		
		Если ТекущийРодитель <> Неопределено Тогда
			ЗапретДобавленияСтроки = ТекущийРодитель.Недоступно И Не МожноТолькоДобавлятьУчастников
				Или ТекущиеДанные.ЭтоДочернийУчастник;
		Иначе
			ЗапретДобавленияСтроки = ТекущиеДанные.Недоступно И Не МожноТолькоДобавлятьУчастников
				Или ТекущиеДанные.ЭтоДочернийУчастник;
		КонецЕсли;
		
		ТолькоПросмотрСтроки = СтрокаУчастникаНедоступна(ТекущиеДанные, Неопределено);
		Элементы.ПредставлениеСтроки.ТолькоПросмотр = ТолькоПросмотрСтроки;
		Элементы.СрокПредставление.ТолькоПросмотр = ТолькоПросмотрСтроки
			Или МожноТолькоДобавлятьУчастников И Не ЭтоПервыйЭлемент;
		Элементы.ЕстьОсобоеНаименованиеОписание.ТолькоПросмотр = ТолькоПросмотрСтроки;
		Элементы.НаименованиеЗадачи.ТолькоПросмотр = ТолькоПросмотрСтроки;
		Элементы.Описание.ТолькоПросмотр = ТолькоПросмотрСтроки;
		Элементы.ОписаниеОсобое.ТолькоПросмотр = ТолькоПросмотрСтроки;
		
		Элементы.Подобрать.Доступность = Не ЗапретДобавленияСтроки;
		Элементы.Добавить.Доступность = Не ЗапретДобавленияСтроки;
		
		Элементы.ПереместитьВверх.Доступность = Не ЭтоПервыйЭлемент
			И Не ТолькоПросмотрСтроки
			И ПредыдущийДоступен;
			
		Элементы.ПереместитьВниз.Доступность = Не ЭтоПоследнийЭлемент
			И Не ТолькоПросмотрСтроки
			И СледующийДоступен;
		
		Элементы.Удалить.Доступность = Не ТолькоПросмотрСтроки;
		
		Элементы.ПредставлениеСтроки.КнопкаВыбора = Истина;
		
		Элементы.ПроектРезолюции.ТолькоПросмотр = Истина;
		
		Элементы.УстановитьОтветственный.Доступность = Не ТолькоПросмотрСтроки И Не ОтветственныйУстановленНедоступен
			И ТекущиеДанные.Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.Завершено")
			И ТекущиеДанные.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.Исполнитель")
			И КоличествоЭлементовРодителя > 1;
		Элементы.УстановитьОтветственный.Пометка = ТекущиеДанные.Ответственный;
	КонецЕсли;
	
	Элементы.КонтекстДобавить.Доступность = Элементы.Добавить.Доступность;
	Элементы.КонтекстДобавитьПункт.Доступность = Элементы.УчастникиДобавитьПункт.Доступность;
	Элементы.КонтекстУдалить.Доступность = Элементы.Удалить.Доступность;
	Элементы.КонтекстУстановитьОтветственного.Доступность = Элементы.УстановитьОтветственный.Доступность;
	Элементы.КонтекстУстановитьОтветственного.Пометка = Элементы.УстановитьОтветственный.Пометка;
	
	ДействияКлиент.УстановитьТолькоПросмотрИУдалениеУчастникаПоЗащищенности(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанные()
	
	ОбновитьДеревоУчастниковПоОбъекту();
	ДействияСервер.УстановитьВидимостьУсловийУчастников(ЭтотОбъект);
	ДействияСервер.ЗаполнитьСостоянияИРезультатыВФормеДействия(ЭтотОбъект);
	УстановитьДоступностьИзмененияУчастников();
	Элементы.ИсполнениеПоПунктам.Пометка = Объект.ПоПунктам;
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции_Участники

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьОсобоеНаименованиеОписание(СтрокаДерева)
	
	Возврат ЗначениеЗаполнено(СтрокаДерева.НаименованиеЗадачи)
		Или ЗначениеЗаполнено(СтрокаДерева.Описание)
		Или ЗначениеЗаполнено(СтрокаДерева.ОписаниеОсобое);
	
КонецФункции

// Заполняет дерево участников по объекту.
//
&НаСервере
Процедура ОбновитьДеревоУчастниковПоОбъекту(ЗаполнятьУчастниковЭтапа = Истина)
	
	ДействиеОбъект = РеквизитФормыВЗначение("Объект");
	
	// Перенесем Срок исполнения из предмета, если не задано в настройках
	СрокИсполненияПредмета = Справочники.ДействияИсполнения.СрокИсполненияПредмета(Объект.Предмет);
	
	ЭтапыУчастников = Участники.ПолучитьЭлементы();
	ЭтапыУчастников.Очистить();

	Если Объект.ПоПунктам Тогда
		// Добавляем все пункты в таблицу участников.
		Для Каждого СтрокаЭтапа Из Объект.Пункты Цикл
			
			ЭтапУчастников = ЭтапыУчастников.Добавить();
			ЗаполнитьЗначенияСвойств(ЭтапУчастников, СтрокаЭтапа);
			ЭтапУчастников.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.Исполнитель");
			ЭтапУчастников.НаименованиеЭтапа = СтрокаЭтапа.Описание;
			ЭтапУчастников.ЭтоЭтап = Истина;
			ЭтапУчастников.ЭтоПункт = Истина;
			ЭтапУчастников.ИдентификаторПункта = ЭтапУчастников.Идентификатор;
			ЭтапУчастников.ПредставлениеСтроки = ЭтапУчастников.Номер + ". " + ЭтапУчастников.НаименованиеЭтапа;
		КонецЦикла;
		ВсеИсполнители = ДействиеОбъект.Участники;
		
		Если Объект.Пункты.Количество() = 0 Тогда
			ЭтапУчастников = ЭтапыУчастников.Добавить();
			ДобавитьНовыйПункт(ЭтапУчастников, ЭтапыУчастников, БазовоеНаименованиеЭтапа);
		КонецЕсли;
		
		Для Каждого СтрокаЭтапа Из ЭтапыУчастников Цикл
			УчастникиЭтапа = СтрокаЭтапа.ПолучитьЭлементы();
		
			УчастникЭтапа = Неопределено;
			Для Каждого Участник Из ВсеИсполнители Цикл
				Если (ЗначениеЗаполнено(Участник.ИдентификаторПункта) 
						И Участник.ИдентификаторПункта <> СтрокаЭтапа.Идентификатор)
					Или (Не ЗначениеЗаполнено(Участник.ИдентификаторПункта) 
						И Участник.ФункцияУчастника <> СтрокаЭтапа.Функция) Тогда
					Продолжить;
				КонецЕсли;
				
				УчастникЭтапа = УчастникиЭтапа.Добавить();
				ЗаполнитьЗначенияСвойств(УчастникЭтапа, Участник);
				УчастникЭтапа.УсловиеПредставление = Строка(Участник.Условие);
				Если ЗначениеЗаполнено(Участник.ФункцияУчастника) Тогда
					УчастникЭтапа.Функция = Участник.ФункцияУчастника;
				Иначе
					УчастникЭтапа.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.Исполнитель");
				КонецЕсли;
				
				ЭтапУчастников.ИдентификаторПункта = СтрокаЭтапа.Идентификатор;
				УчастникЭтапа.ЕстьОсобоеНаименованиеОписание = ЕстьОсобоеНаименованиеОписание(УчастникЭтапа);
				
			КонецЦикла;
		КонецЦикла;
	
	Иначе
		
		// Рассмотрение.
		ЭтапУчастников = ЭтапыУчастников.Добавить();
		ЭтапУчастников.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.Рассматривающий");
		ЭтапУчастников.НаименованиеЭтапа = НСтр("ru = 'Рассмотрение'");
		ЭтапУчастников.ЭтоЭтап = Истина;
		
		УчастникиЭтапа = ЭтапУчастников.ПолучитьЭлементы();
		УчастникЭтапа = Неопределено;
		
		Если ЗаполнятьУчастниковЭтапа Тогда
			
			РезолюцииДействия = РаботаСРезолюциями.ПолучитьРезолюции(Объект.Предмет,,, Объект.Ссылка); 
			 
			Для Каждого Рассматривающий Из ДействиеОбъект.Рассматривающие() Цикл
				
				УчастникЭтапа = УчастникиЭтапа.Добавить();
				ЗаполнитьЗначенияСвойств(УчастникЭтапа, Рассматривающий);
				УчастникЭтапа.УсловиеПредставление = Строка(Рассматривающий.Условие);
				УчастникЭтапа.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.Рассматривающий");
				УчастникЭтапа.ЕстьОсобоеНаименованиеОписание = ЕстьОсобоеНаименованиеОписание(УчастникЭтапа);
				УчастникЭтапа.ПредставлениеРезолюции = УчастникЭтапа.ПроектРезолюции;
				РезолюцияСотрудника = РезолюцииДействия.НайтиСтроки(
					Новый Структура("ИдентификаторУчастника", УчастникЭтапа.Идентификатор));
				Если РезолюцияСотрудника.Количество() > 0 Тогда
					УчастникЭтапа.Резолюция = РезолюцияСотрудника[0].Ссылка;
					УчастникЭтапа.ПредставлениеРезолюции = РезолюцияСотрудника[0].ТекстРезолюции;
					Элементы.ПроектРезолюции.ГиперссылкаЯчейки = Истина;
				КонецЕсли;
						
				ПодчиненныеУчастники = УчастникЭтапа.ПолучитьЭлементы();
				Для Каждого УчастникПодчиненный Из ДействиеОбъект.ДочерниеУчастники(Рассматривающий.Идентификатор) Цикл
					
					ЭлементУчастникДочерний = ПодчиненныеУчастники.Добавить();
					ЭлементУчастникДочерний.ЭтоДочернийУчастник = Истина;
					ЗаполнитьЗначенияСвойств(ЭлементУчастникДочерний, УчастникПодчиненный);
					ЭлементУчастникДочерний.Участник = УчастникПодчиненный.Участник;
					ЭлементУчастникДочерний.Функция = УчастникПодчиненный.ФункцияУчастника;
					ЭлементУчастникДочерний.ЕстьОсобоеНаименованиеОписание = ЕстьОсобоеНаименованиеОписание(
						ЭлементУчастникДочерний);
					
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		// Если участника нет, то добавляем пустую строку
		Если УчастникЭтапа = Неопределено Тогда 
			УчастникЭтапа = УчастникиЭтапа.Добавить();
			УчастникЭтапа.Участник = Справочники.Сотрудники.ПустаяСсылка();
			УчастникЭтапа.Функция = ЭтапУчастников.Функция;
			УчастникЭтапа.Идентификатор = Новый УникальныйИдентификатор;
			
			Если ЗначениеЗаполнено(СрокИсполненияПредмета) Тогда
				УчастникЭтапа.Срок = СрокИсполненияПредмета;
				УчастникЭтапа.ВариантУстановкиСрока = Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
			КонецЕсли;
		КонецЕсли;
		
		// Исполнение.
		ЭтапУчастников = ЭтапыУчастников.Добавить();
		ЭтапУчастников.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.Исполнитель");
		ЭтапУчастников.НаименованиеЭтапа = НСтр("ru = 'Исполнение'");
		ЭтапУчастников.ЭтоЭтап = Истина;
		
		Если ЗаполнятьУчастниковЭтапа Тогда
			
			УчастникиЭтапа = ЭтапУчастников.ПолучитьЭлементы();
			УчастникЭтапа = Неопределено;
			
			Для Каждого Участник Из ДействиеОбъект.Участники() Цикл
				
				УчастникЭтапа = УчастникиЭтапа.Добавить();
				ЗаполнитьЗначенияСвойств(УчастникЭтапа, Участник);
				УчастникЭтапа.УсловиеПредставление = Строка(Участник.Условие);
				УчастникЭтапа.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.Исполнитель");
				УчастникЭтапа.ЕстьОсобоеНаименованиеОписание = ЕстьОсобоеНаименованиеОписание(УчастникЭтапа);
				
			КонецЦикла;
			
			// Если участника нет, то добавляем пустую строку
			Если УчастникЭтапа = Неопределено Тогда 
				УчастникЭтапа = УчастникиЭтапа.Добавить();
				УчастникЭтапа.Участник = Справочники.Сотрудники.ПустаяСсылка();
				УчастникЭтапа.Функция = ЭтапУчастников.Функция;
				УчастникЭтапа.Идентификатор = Новый УникальныйИдентификатор;
				
				Если ЗначениеЗаполнено(СрокИсполненияПредмета) Тогда
					УчастникЭтапа.Срок = СрокИсполненияПредмета;
					УчастникЭтапа.ВариантУстановкиСрока = Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Участники обрабатывающие результат.
		ЭтапУчастников = ЭтапыУчастников.Добавить();
		ЭтапУчастников.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат");
		ЭтапУчастников.НаименованиеЭтапа = НСтр("ru = 'Обрабатывающий результат'");
		ЭтапУчастников.ЭтоЭтап = Истина;
		
		УчастникиЭтапа = ЭтапУчастников.ПолучитьЭлементы();
		УчастникЭтапа = Неопределено;
		УчастникОбрабатывающийРезультат = ДействиеОбъект.УчастникОбрабатывающийРезультат();
		Если ЗначениеЗаполнено(УчастникОбрабатывающийРезультат) И ЗаполнятьУчастниковЭтапа Тогда 
			Для Каждого Участник Из УчастникОбрабатывающийРезультат Цикл
				УчастникЭтапа = УчастникиЭтапа.Добавить();
				ЗаполнитьЗначенияСвойств(УчастникЭтапа, Участник);
				УчастникЭтапа.УсловиеПредставление = Строка(Участник.Условие);
				УчастникЭтапа.Функция = ПредопределенноеЗначение(
					"Перечисление.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат");
			КонецЦикла;
		Иначе
			УчастникЭтапа = УчастникиЭтапа.Добавить();
			УчастникЭтапа.Функция = ЭтапУчастников.Функция;
			УчастникЭтапа.Идентификатор = Новый УникальныйИдентификатор;
			Если ЗначениеЗаполнено(СрокИсполненияПредмета) Тогда
				УчастникЭтапа.Срок = СрокИсполненияПредмета;
				УчастникЭтапа.ВариантУстановкиСрока = Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ОбновитьПредставленияВДеревеУчастников(Участники, Объект.ПоПунктам);
	УстановитьВидимостьДоступностьПолейПоПунктам();
	Команды.ПереключитьРазныеСроки.Подсказка = ДействияСервер.ПодсказкаКнопкиРазныеСроки(Объект.ПоПунктам, Ложь);
	ДействияСервер.УстановитьЗащищенностьУчастниковВНастройке(ЭтотОбъект);
	
КонецПроцедуры


// Заполняет объект по дереву участников.
//
&НаКлиенте
Процедура ОбновитьОбъектПоДеревуУчастников(Отказ)
	
	СсылкаНеуказанногоПользователя = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	Объект.Участники.Очистить();
	Объект.Пункты.Очистить();
	
	ЭлементыЭтапы = Участники.ПолучитьЭлементы();
	ЕстьИсполняющиеУчастники = Ложь; 
	Для Каждого ЭлементЭтап Из ЭлементыЭтапы Цикл
		ИдентификаторПункта = УникальныйИдентификаторПустой();
		Если Объект.ПоПунктам Тогда
			// Для стандартного этапа меняем идентификатор, если заданы другие
			Если ЭлементЭтап.Идентификатор = УникальныйИдентификаторПустой() Тогда 
				ЭлементЭтап.Идентификатор = Новый УникальныйИдентификатор(); 
			КонецЕсли;
			
			Этап = Объект.Пункты.Добавить();
			ЗаполнитьЗначенияСвойств(Этап, ЭлементЭтап);
			Этап.Описание = ЭлементЭтап.НаименованиеЭтапа;
			ИдентификаторПункта = ЭлементЭтап.Идентификатор;
		КонецЕсли;
		
		ЭлементыУчастники = ЭлементЭтап.ПолучитьЭлементы();
		
		Для Каждого ЭлементУчастник Из ЭлементыУчастники Цикл
			
			Если Не ЗначениеЗаполнено(ЭлементУчастник.Участник) 
				Или ЭлементУчастник.Участник = СсылкаНеуказанногоПользователя Тогда
				Продолжить;
			КонецЕсли;
			
			Если Объект.ПоПунктам Тогда
				Отбор = Новый Структура("Участник, ФункцияУчастника, ИдентификаторПункта", 
					ЭлементУчастник.Участник, ЭлементУчастник.Функция, ИдентификаторПункта);
				Если ЭлементУчастник.Защищенный Тогда
					// Все дубли должны быть отмечены как защищенные. Найдем неотмеченных.
					Отбор.Вставить("Защищенный", Ложь);
				КонецЕсли;
				
				НайденныеСотрудники = Объект.Участники.НайтиСтроки(Отбор);
				
				Если НайденныеСотрудники.Количество() > 0 Тогда
					Отказ = Истина;
					ПоказатьПредупреждение(, СтрШаблон(
						НСтр("ru = 'В пункте ""%1"" повторяется участник: %2. 
						|Удалите дубли или установите участнику признак ""Защищенный""'"),
							ЭлементЭтап.НаименованиеЭтапа ,ЭлементУчастник.Участник));
					Возврат;
				КонецЕсли;
			Иначе
				
				Отбор = Новый Структура("Участник, ФункцияУчастника, ВышестоящийУчастник, НаименованиеЗадачи, Описание", 
					ЭлементУчастник.Участник, ЭлементЭтап.Функция, ЭлементУчастник.ВышестоящийУчастник,
					ЭлементУчастник.НаименованиеЗадачи, ЭлементУчастник.Описание);
				Если ЭлементУчастник.Защищенный Тогда
					// Все дубли должны быть отмечены как защищенные. Найдем неотмеченных.
					Отбор.Вставить("Защищенный", Ложь);
				КонецЕсли;
				
				НайденныеСотрудники = Объект.Участники.НайтиСтроки(Отбор);
				
				Если НайденныеСотрудники.Количество() > 0 Тогда
					Отказ = Истина;
					ПоказатьПредупреждение(, СтрШаблон(
						НСтр("ru = 'В этапе ""%1"" повторяется участник: %2. 
						|Удалите дубли, укажите особое описание или установите участнику признак ""Защищенный""'"),
							ЭлементЭтап.НаименованиеЭтапа ,ЭлементУчастник.Участник));
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			Участник = Объект.Участники.Добавить();
			ЗаполнитьЗначенияСвойств(Участник, ЭлементУчастник);
			Участник.Участник = ЭлементУчастник.Участник;
			Если ЗначениеЗаполнено(ЭлементУчастник.Функция) Тогда
				Участник.ФункцияУчастника = ЭлементУчастник.Функция;
			Иначе
				Участник.ФункцияУчастника = ЭлементЭтап.Функция;
			КонецЕсли;
			
			Участник.ИдентификаторПункта = ИдентификаторПункта;
			
			Если Не ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(Участник.ФункцияУчастника) Тогда 
				ЕстьИсполняющиеУчастники = Истина;
			КонецЕсли;
			
			
			ЭлементыУчастникиДочерние = ЭлементУчастник.ПолучитьЭлементы();
			
			Для Каждого ЭлементУчастникДочерний Из ЭлементыУчастникиДочерние Цикл
				
				Если Не ЗначениеЗаполнено(ЭлементУчастникДочерний.Участник) 
					Или ЭлементУчастникДочерний.Участник = СсылкаНеуказанногоПользователя Тогда
					Продолжить;
				КонецЕсли;

				Отбор = Новый Структура("Участник, ФункцияУчастника, ВышестоящийУчастник, НаименованиеЗадачи, Описание", 
					ЭлементУчастникДочерний.Участник, ЭлементЭтап.Функция, ЭлементУчастникДочерний.ВышестоящийУчастник,
					ЭлементУчастникДочерний.НаименованиеЗадачи, ЭлементУчастникДочерний.Описание);
				Если ЭлементУчастникДочерний.Защищенный Тогда
				// Все дубли должны быть отмечены как защищенные. Найдем неотмеченных.
					Отбор.Вставить("Защищенный", Ложь);
				КонецЕсли;

				НайденныеСотрудники = Объект.Участники.НайтиСтроки(Отбор);
				Если НайденныеСотрудники.Количество() > 0 Тогда
					Отказ = Истина;
					ПоказатьПредупреждение(, СтрШаблон(
						НСтр("ru = 'В этапе ""%1"" повторяется участник: %2. 
						|Удалите дубли, укажите особое описание или установите участнику признак ""Защищенный""'"),
							ЭлементЭтап.НаименованиеЭтапа ,ЭлементУчастникДочерний.Участник));
					Возврат;
				КонецЕсли;
				
				Участник = Объект.Участники.Добавить();
				ЗаполнитьЗначенияСвойств(Участник, ЭлементУчастникДочерний);
				Участник.Участник = ЭлементУчастникДочерний.Участник;
				Участник.ФункцияУчастника = ЭлементУчастникДочерний.Функция;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Если заполнен только "Обрабатывающий результат", то не сохраняем его
	Если Не ЕстьИсполняющиеУчастники Тогда 
		Объект.Участники.Очистить();
	КонецЕсли;
	
КонецПроцедуры

// Разворачивает дерево участников.
//
&НаКлиенте
Процедура РазвернутьДеревоУчастников()
	
	Для Каждого Этап Из Участники.ПолучитьЭлементы() Цикл
		Элементы.Участники.Развернуть(Этап.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

// Обновляет представления строк в дереве участников.
//
// Параметры:
//  Участники - ДанныеФормыДерево - дерево с участниками.
//  ПоПунктам - Булево - Режим исполнения по пунктам
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставленияВДеревеУчастников(Участники, ПоПунктам)
	
	ЭтапыУчастников = Участники.ПолучитьЭлементы();
	
	НомерШагаЭтапа = 1;
	
	Для ИндексЭтапа = 0 По ЭтапыУчастников.Количество() - 1 Цикл
		
		СтрокаЭтапа = ЭтапыУчастников.Получить(ИндексЭтапа);
		
		Если ИндексЭтапа <> 0 Тогда
			НомерШагаЭтапа = НомерШагаЭтапа + 1;
		КонецЕсли;
		
		СтрокиНаименования = Новый Массив;
		Если ПоПунктам Тогда
			СтрокиНаименования.Добавить(СтрокаЭтапа.Номер);
		Иначе
			СтрокиНаименования.Добавить(НомерШагаЭтапа);
		КонецЕсли;
		
		СтрокиНаименования.Добавить(". ");
		СтрокаЭтапа.ПрефиксСтроки = СтрСоединить(СтрокиНаименования);
		
		СтрокиНаименования.Добавить(СтрокаЭтапа.НаименованиеЭтапа);
		СтрокаЭтапа.ПредставлениеСтроки = СтрСоединить(СтрокиНаименования);
		
		УчастникиЭтапа = СтрокаЭтапа.ПолучитьЭлементы();
		
		Для ИндексУчастника = 0 По УчастникиЭтапа.Количество() - 1 Цикл
			СтрокаУчастника = УчастникиЭтапа[ИндексУчастника];
			
			СтрокаУчастника.ПрефиксСтроки = "";
			Если ПоПунктам 
				И СтрокаУчастника.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат") Тогда
				СтрокаУчастника.ПрефиксСтроки = НСтр("ru = '(Провер.)'") + " ";
			КонецЕсли;
			СтрокаУчастника.ПредставлениеСтроки = СтрокаУчастника.ПрефиксСтроки 
				+ ДействияКлиентСервер.ПредставлениеУчастника(СтрокаУчастника.Участник);
			
			Если Не ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
				СтрокаУчастника.ПредставлениеСтроки = СтрокаУчастника.ПрефиксСтроки 
					+ ДействияКлиентСервер.ПредставлениеУчастника(ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка"));
			КонецЕсли;
			
			УчастникиДочерние = СтрокаУчастника.ПолучитьЭлементы();
			Для ИндексУчастникаДочернего = 0 По УчастникиДочерние.Количество() - 1 Цикл
				СтрокаУчастникаДочернего = УчастникиДочерние[ИндексУчастникаДочернего];
				
				СтрокаУчастникаДочернего.ПрефиксСтроки = "";
				Если СтрокаУчастникаДочернего.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат") Тогда
					СтрокаУчастникаДочернего.ПрефиксСтроки = НСтр("ru = '(Провер.)'") + " ";
				КонецЕсли;
				СтрокаУчастникаДочернего.ПредставлениеСтроки = СтрокаУчастникаДочернего.ПрефиксСтроки 
					+ ДействияКлиентСервер.ПредставлениеУчастника(СтрокаУчастникаДочернего.Участник);
				
				Если Не ЗначениеЗаполнено(СтрокаУчастникаДочернего.Участник) Тогда
					СтрокаУчастникаДочернего.ПредставлениеСтроки = ДействияКлиентСервер.ПредставлениеУчастника(
						ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка"));
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьИзмененияУчастников()
	
	Если ТолькоПросмотр = Истина Тогда
		Возврат;
	КонецЕсли;
	
	РазрешениеОбщее = Разрешения[0].Разрешение;
	
	Если РазрешениеОбщее = Перечисления.ВариантыДоступностиИзмененияДействий.Запрещено
		Или РазрешениеОбщее = Перечисления.ВариантыДоступностиИзмененияДействий.РазрешеноДобавлять Тогда
		
		Элементы.Автор.Доступность = Ложь;
		Элементы.ПодписыватьРезолюцииЭП.Доступность = Ложь;
		Элементы.Контролер.Доступность = Ложь;
		Элементы.ГруппаОписаниеОтложенногоВыполнения.Доступность = Ложь;
		
	КонецЕсли;
	
	Если РазрешениеОбщее = Перечисления.ВариантыДоступностиИзмененияДействий.РазрешеноДобавлять Тогда
		МожноТолькоДобавлятьУчастников = Истина;
	КонецЕсли;
	
	ИзменениеДействияРазрешено = ИзменениеДействияРазрешено();
	ЭтапыУчастников = Участники.ПолучитьЭлементы();
	Для Каждого ЭтапУчастников Из ЭтапыУчастников Цикл
		ЭтапУчастников.Недоступно = 
			РазрешениеОбщее = Перечисления.ВариантыДоступностиИзмененияДействий.Запрещено
			Или МожноТолькоДобавлятьУчастников
			// Завершенные этапы запрещаем редактировать
			Или (ЭтапУчастников.Функция <> Перечисления.ФункцииУчастниковИсполнения.Рассматривающий
				И ЭтапУчастников.Состояние = Перечисления.СостоянияВыполненияДействий.Завершено
				И Не ИсполнениеДействияСНовымиУчастниками)
			Или (ЭтапУчастников.Функция = Перечисления.ФункцииУчастниковИсполнения.Рассматривающий
				И Не ИзменениеДействияРазрешено
				И Не ИсполнениеДействияСНовымиУчастниками);
		
		УчастникиЭтапа = ЭтапУчастников.ПолучитьЭлементы();
		Для Каждого УчастникЭтапа Из УчастникиЭтапа Цикл
			Если Не ЗначениеЗаполнено(УчастникЭтапа.Участник) И МожноТолькоДобавлятьУчастников Тогда
				УчастникЭтапа.Недоступно = Ложь;
			Иначе
				УчастникЭтапа.Недоступно = ЭтапУчастников.Недоступно
					Или УчастникЭтапа.Состояние = Перечисления.СостоянияВыполненияДействий.Завершено;
			КонецЕсли;
		КонецЦикла;
		
		// Переключить режим после запуска нельзя	
		Если ЭтапУчастников.Состояние <> Перечисления.СостоянияВыполненияДействий.ПустаяСсылка() Тогда
			Элементы.ИсполнениеПоПунктам.Доступность = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьНовыйПункт(ЭтапУчастников, ЭтапыУчастников, БазовоеНаименованиеЭтапа)
	
	ЭтапУчастников.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковИсполнения.Исполнитель");
	ЭтапУчастников.НаименованиеЭтапа = БазовоеНаименованиеЭтапа;
	ЭтапУчастников.Номер = Строка(ЭтапыУчастников.Количество());
	ЭтапУчастников.ЭтоЭтап = Истина;
	ЭтапУчастников.ЭтоПункт = Истина;
	ЭтапУчастников.Идентификатор = Новый УникальныйИдентификатор;
	ЭтапУчастников.ИдентификаторПункта = ЭтапУчастников.Идентификатор;
	ЭтапУчастников.ПредставлениеСтроки = ЭтапУчастников.Номер + ". " + ЭтапУчастников.НаименованиеЭтапа;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПункт(ТекущиеДанные, ТолькоОткрытие = Истина)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИсполнителиИсполнения = Новый Массив;	
	
	Для Каждого УчастникЭтапа Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		ПараметрыУчастника = Новый Структура;
		ПараметрыУчастника.Вставить("Исполнитель", УчастникЭтапа.Участник);
		ПараметрыУчастника.Вставить("ИдентификаторИсполнителя", УчастникЭтапа.Идентификатор); 
		ПараметрыУчастника.Вставить("Ответственный", УчастникЭтапа.Ответственный); 
		ПараметрыУчастника.Вставить("СрокИсполнения", УчастникЭтапа.Срок); 
		ПараметрыУчастника.Вставить("СрокИсполненияДни", УчастникЭтапа.СрокДни);
		ПараметрыУчастника.Вставить("СрокИсполненияМинуты", УчастникЭтапа.СрокМинуты);
		ПараметрыУчастника.Вставить("СрокИсполненияЧасы", УчастникЭтапа.СрокЧасы);
		ПараметрыУчастника.Вставить("ВариантУстановкиСрокаИсполнения", УчастникЭтапа.ВариантУстановкиСрока);
		ПараметрыУчастника.Вставить("Функция", УчастникЭтапа.Функция); 
		
		ИсполнителиИсполнения.Добавить(ПараметрыУчастника);
	КонецЦикла;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ТолькоОткрытие", ТолькоОткрытие);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработатьПослеИзмененияПункта",
		ЭтотОбъект,
		ПараметрыОповещения);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Действие", Объект.Ссылка);
	ПараметрыФормы.Вставить("Предмет", Объект.Предмет);
	ПараметрыФормы.Вставить("Автор", Объект.Автор);
	ПараметрыФормы.Вставить("ИдентификаторПункта", ТекущиеДанные.ИдентификаторПункта);
	ПараметрыФормы.Вставить("ИсполнителиИсполнения", ИсполнителиИсполнения);
	
	Если ТекущиеДанные.НаименованиеЭтапа <> БазовоеНаименованиеЭтапа Тогда
		ПараметрыФормы.Вставить("Описание", ТекущиеДанные.НаименованиеЭтапа);
	Иначе
		ПараметрыФормы.Вставить("Описание", "");
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Номер", ТекущиеДанные.Номер);
	Если ЗначениеЗаполнено(ТекущиеДанные.Автор) Тогда
		ПараметрыФормы.Вставить("АвторИсполнения", ТекущиеДанные.Автор);
	Иначе
		ПараметрыФормы.Вставить("АвторИсполнения", ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка"));
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущиеДанные.Контролер) Тогда
		ПараметрыФормы.Вставить("Контролер", ТекущиеДанные.Контролер);
	Иначе
		ПараметрыФормы.Вставить("Контролер", ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка"));
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Срок", ТекущиеДанные.Срок);
	
	СостояниеПункта = ТекущиеДанные.Состояние;
	
	ИзменениеРазрешено =
		Не ТолькоПросмотр
		И Не МожноТолькоДобавлятьУчастников
		И СостояниеПункта <> ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.Завершено")
		Или Не ТолькоОткрытие;
	ПараметрыФормы.Вставить("ИзменениеРазрешено", ИзменениеРазрешено);
	ПараметрыФормы.Вставить("МожноТолькоДобавлятьУчастников", МожноТолькоДобавлятьУчастников);
	ПараметрыФормы.Вставить("ЭтоВводПункта", Истина);
	ПараметрыФормы.Вставить("СостояниеПункта", СостояниеПункта);
	
	ОткрытьФорму("Справочник.ДействияИсполнения.Форма.НастройкаДочернегоИсполнения",
		ПараметрыФормы,,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Обработчик описания оповещения процедуры УчастникиВыбор
//
// Параметры:
//  РезультатИзменения - Структура, Неопределено -
//  КонтекстВыполнения - Структура
//
&НаКлиенте
Процедура ОбработатьПослеИзмененияПункта(
	РезультатИзменения, КонтекстВыполнения) Экспорт
	
	Если РезультатИзменения = Неопределено
		Или РезультатИзменения = КодВозвратаДиалога.Отмена Тогда
			Если Не КонтекстВыполнения.ТолькоОткрытие Тогда
				Участники.ПолучитьЭлементы().Удалить(Участники.НайтиПоИдентификатору(Элементы.Участники.ТекущаяСтрока));
			КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Для Каждого Пункт Из Участники.ПолучитьЭлементы() Цикл
		
		Если Пункт.ИдентификаторПункта <> РезультатИзменения.ИдентификаторПункта Тогда
			Продолжить;
		КонецЕсли;
		
		Пункт.Автор = РезультатИзменения.АвторИсполнения;
		Пункт.Контролер = РезультатИзменения.Контролер;
		Пункт.Номер = РезультатИзменения.Номер;
		Пункт.НаименованиеЭтапа = РезультатИзменения.ОписаниеИсполнения;
		Пункт.Срок = РезультатИзменения.Срок;
		Пункт.ПредставлениеСтроки = Пункт.Номер + ". " + Пункт.НаименованиеЭтапа;
		УчастникиЭтапа = Пункт.ПолучитьЭлементы();
		УчастникиЭтапа.Очистить();
		Для Каждого Участник Из РезультатИзменения.ИсполнителиИсполнения Цикл
			УчастникЭтапа = УчастникиЭтапа.Добавить();
			ЗаполнитьЗначенияСвойств(УчастникЭтапа, Участник);
			УчастникЭтапа.ИдентификаторПункта = Пункт.Идентификатор;
		КонецЦикла;
	КонецЦикла;
	
	ОбновитьПредставленияВДеревеУчастников(Участники, Объект.ПоПунктам);
	ЗаполнитьПредставлениеСроков();
	РазныеСроки = ДействияКлиент.ЗначениеРазныеСрокиРекурсивно(Участники.ПолучитьЭлементы());
	Элементы.УчастникиРазныеСроки.Пометка = РазныеСроки;
	// раскрыть все дерево
	РазвернутьДеревоУчастников();
	Модифицированность = Истина;
	
КонецПроцедуры	

&НаКлиенте
Функция ПунктБезУчастников(Пункт)
	
	ЭлементыПункты = Пункт.ПолучитьЭлементы();
	
	Если ЭлементыПункты.Количество() = 0 Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого ПунктУчастник Из ЭлементыПункты Цикл
		Если Не ЗначениеЗаполнено(ПунктУчастник.Участник) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьТекстДляПунктов(ИзвлеченныйТекст)
	
	ТекстДляПунктов = СокрЛП(ИзвлеченныйТекст);
	Элементы.ГруппаТекст.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьУчастников(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверкиДействительностиУчастников = 
		РаботаСУчастникамиКлиент.ПроверитьДействительностьУчастников(ЭтотОбъект);
	Если Не РезультатПроверкиДействительностиУчастников.ВсеДействительны Тогда
		
		Отказ = Истина;
		
		Обработчик = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиДействительностиУчастниковПродолжение",
			ЭтотОбъект);
		
		РаботаСУчастникамиКлиент.ОбработатьРезультатПроверкиДействительностиУчастников(
			РезультатПроверкиДействительностиУчастников,
			Обработчик);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработать результат проверки действительности участников продолжение.
// 
// Параметры:
//  Результат - Структура - результат проверки и выбор пользователя:
//   * РезультатПроверки - см. РаботаСУчастникамиВызовСервера.ПроверитьДействительностьУчастников
//   * ВариантОбработки - Число, КодВозвратаДиалога - 0 - заменить, 1 - оставить как есть,
//                                                    КодВозвратаДиалога.Отмена - отмена.
//  ДополнительныеПараметры - Произвольный
//
&НаКлиенте
Процедура ОбработатьРезультатПроверкиДействительностиУчастниковПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ВариантОбработки = Результат.ВариантОбработки;
	
	// Выбрана отмена.
	Если ВариантОбработки = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	// Хочет продолжить как есть.
	Если ВариантОбработки = 1 Тогда
		ЗаписатьЗакрытьБезПроверкиУчастников();
		Возврат;
	КонецЕсли;
	
	// Согласился заменить участников.
	Если ВариантОбработки = 0 Тогда
		ОбработчикЗамены = Новый ОписаниеОповещения("УчастникиЗамена", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.ФормаЗаменыУчастников", Результат.РезультатПроверки, ЭтотОбъект,,,,
			ОбработчикЗамены);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЗакрытьБезПроверкиУчастников(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не Записать(Новый Структура("НеПроверятьУчастников", Истина)) Тогда
		Возврат;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиЗамена(Замены, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Замены = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаменитьУчастниковНаСервере(Замены);
	РазвернутьДеревоУчастников();
	
КонецПроцедуры

// Заменить участников на сервере.
// 
// Параметры:
//  Замены - Массив Из Структура:
//   * ВидУчастника - СправочникСсылка.ВидыУчастниковЗадач
//   * Участник - СправочникСсылка.Сотрудники
//   * УчастникЗаменитьНа - СправочникСсылка.Сотрудники
&НаСервере
Процедура ЗаменитьУчастниковНаСервере(Замены)
	
	БылиЗамены = Ложь;
	
	Для Каждого Замена Из Замены Цикл
		
		КлючиСтруктурыОтбора = "ФункцияУчастника, Участник";
		СтруктураОтбора = Новый Структура(КлючиСтруктурыОтбора);
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Замена, КлючиСтруктурыОтбора);
		НайденныеСтрокиУчастников = Объект.Участники.НайтиСтроки(СтруктураОтбора);
		
		ОтбиратьПоНаименованиюЭтапа = ЗначениеЗаполнено(Замена.НаименованиеЭтапа);
		
		Для Каждого СтрокаУчастника Из НайденныеСтрокиУчастников Цикл
			
			Если ОтбиратьПоНаименованиюЭтапа И СтрокаУчастника.ИдентификаторПункта <> УникальныйИдентификаторПустой() Тогда
				
				СтрокиЭтапа = Объект.Пункты.НайтиСтроки(Новый Структура("Идентификатор", СтрокаУчастника.ИдентификаторПункта));
				Если Замена.НаименованиеЭтапа <> СтрокиЭтапа[0].Описание Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаУчастника.Участник = Замена.УчастникЗаменитьНа;
			БылиЗамены = Истина;
		КонецЦикла;
		
	КонецЦикла;
	
	Если БылиЗамены Тогда
		
		Модифицированность = Истина;
		ОбновитьДеревоУчастниковПоОбъекту();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_МобильныйКлиент

&НаСервере
Процедура МК_НастроитьЭлементыФормы()
	
	СворачиваниеЭлементовПоВажности = СворачиваниеЭлементовФормыПоВажности.НеИспользовать;
	ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	
	Элементы.Добавить.Видимость = Ложь;
	Элементы.КонтекстДобавить.Видимость = Ложь;
	
	Элементы.Участники.Шапка = Ложь;
	Элементы.Участники.ИспользованиеТекущейСтроки = ИспользованиеТекущейСтрокиТаблицы.ОтображениеВыделенияИВыбор;
	
	Элементы.Переместить(Элементы.ПереместитьВверх, Элементы.Участники.КонтекстноеМеню);
	Элементы.Переместить(Элементы.ПереместитьВниз, Элементы.Участники.КонтекстноеМеню);
	Элементы.Переместить(Элементы.УстановитьОтветственный, Элементы.Участники.КонтекстноеМеню);
	Элементы.Переместить(Элементы.УчастникиРазныеСроки, Элементы.Участники.КонтекстноеМеню);
	Элементы.Переместить(Элементы.Защищенный, Элементы.Участники.КонтекстноеМеню);
	Элементы.Переместить(Элементы.УчастникиДобавитьПункт, Элементы.Участники.КонтекстноеМеню);
	Элементы.Переместить(Элементы.Подобрать, Элементы.Участники.КонтекстноеМеню);
	Элементы.Переместить(Элементы.ФормаСправочникКонтрольКонтроль, Элементы.Участники.КонтекстноеМеню);
	
КонецПроцедуры

&НаКлиенте
Процедура МоментРазыменованияУчастниковОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры
	
#КонецОбласти

#КонецОбласти