#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("Ссылка");
	Поля.Добавить("ВидДействия");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Представление = ДействияСервер.ПредставлениеДействия(Данные.Ссылка, Данные.ВидДействия);
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ДействияСервер.ОбработкаПолученияФормы(
		ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
		
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Заполняет дерево на закладке Обработка
// 
// Параметры
// ЭлементДействие - элемент дерева 
// Действие - ссылка на действие 
// ПредметОбъект - ОпределяемыйТип.ПредметДействияОбъект.
//
Процедура ЗаполнитьДействиеВФормеПредмета(ЭлементДействие, Действие, ПредметОбъект, 
	НужнаИсторияОбработки, ПечатьКарточкиДокумента = Ложь) Экспорт 
	
	Если ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияИсполнения") Тогда 
		ЗначенияЗаполнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие,
			ИменаРеквизитовДляЗаполнения());
		
		ДействиеСсылка = Действие;
		УчастникиДействия = ЗначенияЗаполнения.Участники.Выгрузить();
		ПунктыДействия = ЗначенияЗаполнения.Пункты.Выгрузить();
		ПунктыДействия.Сортировать("НомерСтроки Возр");
		УчастникиДействия.Сортировать("НомерСтроки Возр");
		
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникОбъект.ДействияИсполнения") Тогда 
		ЗначенияЗаполнения = Новый Структура(ИменаРеквизитовДляЗаполнения());
		ЗаполнитьЗначенияСвойств(ЗначенияЗаполнения, Действие);
		УчастникиДействия = Действие.Участники;
		ДействиеСсылка = Действие.Ссылка;
		ПунктыДействия = Действие.Пункты;
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестный тип'");
	КонецЕсли;
	
	Если ТипЗнч(ПредметОбъект) = Тип("СправочникОбъект.Мероприятия")      
		И ПунктыДействия.Количество() = 0
		И УчастникиДействия.Количество() = 1 
		И ТипЗнч(УчастникиДействия[0].Участник) = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов") Тогда
		
		МожноВернутьСтруктура = Истина;
		РазвернутыеУчастники = ДействияСервер.РазвернутыеУчастники(
			УчастникиДействия[0].Участник, ПредметОбъект, , // для проверки
			Истина, // можно вернуть пустой массив
			,
			МожноВернутьСтруктура);                         
			
		Если РазвернутыеУчастники.Количество() <> 0 И ТипЗнч(РазвернутыеУчастники[0]) = Тип("Структура") Тогда
			УчастникиДействия.Удалить(0);
		КонецЕсли;	
			
		УникальныеИдПунктов = Новый Соответствие;	
		Для Каждого СтрокаРезультата Из РазвернутыеУчастники Цикл     
			
			Если ТипЗнч(СтрокаРезультата) = Тип("Структура") Тогда
			
				Если УникальныеИдПунктов.Получить(СтрокаРезультата.ИдентификаторПункта) = Неопределено Тогда
					
					УникальныеИдПунктов.Вставить(СтрокаРезультата.ИдентификаторПункта, 1); 
					НовыйПункт = ПунктыДействия.Добавить();
					ЗаполнитьЗначенияСвойств(НовыйПункт, СтрокаРезультата.ДанныеПункта);
					
				КонецЕсли;	      
				
				НовыйУчастник = УчастникиДействия.Добавить();
				ЗаполнитьЗначенияСвойств(НовыйУчастник, СтрокаРезультата);
				НовыйУчастник.Участник = СтрокаРезультата.Исполнитель;
				НовыйУчастник.Идентификатор = Новый УникальныйИдентификатор;   
				
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЕсли;	
	
	ЗначенияЗаполнения.Вставить("Действие", ДействиеСсылка);
	ЗначенияЗаполнения.Вставить("ВариантУстановкиСрока", 
		Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок);
	ЗначенияЗаполнения.Вставить("СрокДействия", ЗначенияЗаполнения.СрокДействия);
	
	ЭтапыДействия = ДействияСервер.НоваяТаблицаЭтапы();
	
	Если ЗначенияЗаполнения.ПоПунктам Тогда
		// добавим "этапы"
		Для Каждого Пункт Из ПунктыДействия Цикл
			СтрЭтапИсполнение = ЭтапыДействия.Добавить();
			ЗаполнитьЗначенияСвойств(СтрЭтапИсполнение, Пункт);
			СтрЭтапИсполнение.Наименование = Пункт.Номер + ". " + Пункт.Описание;
			СтрЭтапИсполнение.Функция = Перечисления.ФункцииУчастниковИсполнения.Исполнитель;
			СтрЭтапИсполнение.ВариантУстановкиСрока	= Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;	
			
		КонецЦикла;		
		
		Участники = ДействияСервер.НоваяТаблицаУчастники();
		
		Для Каждого Участник Из УчастникиДействия Цикл 
			
	 		// Обрабатывающих показываем только при "Выполнении"
			Если ДействияСервер.ЭтоОбрабатывающийРезультатИЗадачаВыполнена(
				ДействиеСсылка,	Участник.ФункцияУчастника, 
				Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат,	
				Участник.Участник, Участник.Идентификатор) Тогда
				Продолжить;
			КонецЕсли;	 
			
			ДобавляемыйУчастник = Участники.Добавить();
			ЗаполнитьЗначенияСвойств(ДобавляемыйУчастник, Участник);
			ДобавляемыйУчастник.Участник = Участник.Участник;
			ДобавляемыйУчастник.Функция = Участник.ФункцияУчастника;
			ДобавляемыйУчастник.ИдентификаторЭтапа = Участник.ИдентификаторПункта;	
		КонецЦикла;
	Иначе
		
		// добавим "этапы"
		ИдЭтапаРассмотреть = Новый УникальныйИдентификатор;
		СтрЭтапРассмотреть = ЭтапыДействия.Добавить();
		СтрЭтапРассмотреть.Идентификатор = ИдЭтапаРассмотреть;
		СтрЭтапРассмотреть.Наименование = НСтр("ru = 'Рассмотрение'");
		СтрЭтапРассмотреть.Функция = Перечисления.ФункцииУчастниковИсполнения.Рассматривающий;
		
		ИдЭтапаИсполнение = Новый УникальныйИдентификатор;
		СтрЭтапИсполнение = ЭтапыДействия.Добавить();
		СтрЭтапИсполнение.Идентификатор = ИдЭтапаИсполнение;
		СтрЭтапИсполнение.Наименование = НСтр("ru = 'Исполнение'");
		СтрЭтапИсполнение.Функция = Перечисления.ФункцииУчастниковИсполнения.Исполнитель;
		
		ИдЭтапаОбработать = Новый УникальныйИдентификатор;
		СтрЭтапОбработать = ЭтапыДействия.Добавить();
		СтрЭтапОбработать.Идентификатор = ИдЭтапаОбработать;
		СтрЭтапОбработать.Наименование = НСтр("ru = 'Проверить'");
		СтрЭтапОбработать.Функция = Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат;
		
		
		Участники = ДействияСервер.НоваяТаблицаУчастники();
		
		Для Каждого Участник Из УчастникиДействия Цикл 
			
	 		// Обрабатывающих показываем только при "Выполнении"
			Если ДействияСервер.ЭтоОбрабатывающийРезультатИЗадачаВыполнена(
				ДействиеСсылка,	Участник.ФункцияУчастника, 
				Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат,	
				Участник.Участник, Участник.Идентификатор) Тогда
				Продолжить;
			КонецЕсли;	 
			
			ДобавляемыйУчастник = Участники.Добавить();
			ЗаполнитьЗначенияСвойств(ДобавляемыйУчастник, Участник);
			ДобавляемыйУчастник.Участник = Участник.Участник;
			ДобавляемыйУчастник.Функция = Участник.ФункцияУчастника;
			
			Если Участник.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат Тогда 
				ДобавляемыйУчастник.ИдентификаторЭтапа = ИдЭтапаОбработать;
				
			// Подчиненные исполнители по резолюции будут попадать в этап Рассмотрения
			ИначеЕсли Участник.ВышестоящийУчастник <> УникальныйИдентификаторПустой() Тогда 
				ДобавляемыйУчастник.ИдентификаторЭтапа = ИдЭтапаРассмотреть;
			ИначеЕсли Участник.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Исполнитель Тогда 
				ДобавляемыйУчастник.ИдентификаторЭтапа = ИдЭтапаИсполнение;
			ИначеЕсли Участник.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Рассматривающий Тогда 
				ДобавляемыйУчастник.ИдентификаторЭтапа = ИдЭтапаРассмотреть;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	ЗначенияЗаполнения.Вставить("Участники", Участники);
	
	ДействияСервер.ЗаполнитьДействиеВФормеПредмета(ЭлементДействие, ДействиеСсылка, 
		ЗначенияЗаполнения, ПредметОбъект,,ЭтапыДействия, НужнаИсторияОбработки, ПечатьКарточкиДокумента);
	
КонецПроцедуры

// Проверяет строки участников на возможность начать обработку по ним.
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияИсполнения - Ссылка на действие.
// 	ПредметОбъект - ОпределяемыйТип.ПредметДействияОбъект. 
// 	СообщенияОбОшибках - Массив - массив сообщений об ошибках.
// 	ПараметрыПроверок - Структура - вспомогательные параметры проверки перед запуском.
//
Процедура ПроверкаПередЗапуском(Действие, ПредметОбъект, СообщенияОбОшибках, ПараметрыПроверок) Экспорт
	
КонецПроцедуры

// Возвращает всех участников действия, кроме обрабатывающего результат
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияИсполнения - ссылка на действие
// 	
// Возвращаемое значение:
// 	ТаблицаЗначений - таблица участников действия, кроме обрабатывающего результат.
// 
Функция УчастникиДействия(Действие) Экспорт
	
	Участники = ДействияСервер.НоваяТаблицаУчастники();
	
	УчастникиДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие,
		"Участники");
	УчастникиДействия = УчастникиДействия.Выгрузить();
	УчастникиДействия.Сортировать("НомерСтроки Возр");
	Для Каждого Участник Из УчастникиДействия Цикл 
		
		Если ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(
			Участник.ФункцияУчастника)
			Или Не ЗначениеЗаполнено(Участник.Участник) Тогда
			Продолжить;
		КонецЕсли;
			
		ДобавляемыйУчастник = Участники.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавляемыйУчастник, Участник);
		ДобавляемыйУчастник.Функция = Участник.ФункцияУчастника;
		
	КонецЦикла;
	
	Возврат Участники;
	
КонецФункции

// Возвращает всех участников действия, включая обрабатывающего результат
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияИсполнения - ссылка на действие
// 	
// Возвращаемое значение:
// 	ТаблицаЗначений - таблица участников действия, кроме обрабатывающего результат.
// 
Функция ВсеУчастникиДействия(Действие) Экспорт
	
	Участники = ДействияСервер.НоваяТаблицаУчастники();
	
	УчастникиДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие,
		"Участники");
	УчастникиДействия = УчастникиДействия.Выгрузить();
	
	Для Каждого Участник Из УчастникиДействия Цикл 
		
		Если Не ЗначениеЗаполнено(Участник.Участник) Тогда
			Продолжить;
		КонецЕсли;
			
		ДобавляемыйУчастник = Участники.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавляемыйУчастник, Участник);
		ДобавляемыйУчастник.Функция = Участник.ФункцияУчастника;
		
	КонецЦикла;
	
	Возврат Участники;
	
КонецФункции

// Готовит действие к выполнению
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияИсполнения - ссылка на действие
//
Процедура ПодготовитьДействиеКВыполнению(Действие) Экспорт
	
	// для всех участников
	
	УчастникиДействия = УчастникиДействия(Действие);
	Для Каждого Участник Из УчастникиДействия Цикл
		РегистрыСведений.ИтерацииДействий.ИнкрементироватьНомерИтерации(Действие, Участник.Идентификатор);
	КонецЦикла;	
	
КонецПроцедуры

// Отмечает в действии принятие к выполнению
//
//Параметры:
//  Действие - СправочникСсылка.ДействияИсполнения - ссылка на действие
//  ПараметрыИзменения -Структура
//
Процедура ОтметитьПринятиеКИсполнению(Действие, ПараметрыИзменения) Экспорт
	
КонецПроцедуры	

// Возвращает ИдентификаторПункта по ИД участника.
// 
// Параметры:
//  Действие - СправочникСсылка.ДействияСогласования - Действие
//  ИдентификаторУчастника - УникальныйИдентификатор - Идентификатор участника
//  ВозвращатьЗначение - Булево - если Истина, то будет возвращать не пустой ИД.
// 
// Возвращаемое значение:
//  ИдентификаторЭтапа - УникальныйИдентификатор - идентификатор этапа
Функция ИдентификаторПунктаУчастника(Действие, ИдентификаторУчастника, ВозвращатьЗначение = Истина) Экспорт
	
	УчастникиДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Участники").Выгрузить();
	ИдентификаторПункта = Неопределено;
	
	Строка = УчастникиДействия.Найти(ИдентификаторУчастника, "Идентификатор");
	Если Строка <> Неопределено Тогда
		ИдентификаторПункта = Строка.ИдентификаторПункта;
	КонецЕсли;	
	
	Возврат ИдентификаторПункта;
	
КонецФункции

// Возвращает пустую таблицу подчиненного исполнения.
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * Идентификатор - УникальныйИдентификатор
//   * Участник - СправочникСсылка.Сотрудники -
//              - СправочникСсылка.АвтоподстановкиДляОбъектов -
//              - СправочникСсылка.РабочиеГруппы -
//              - СправочникСсылка.ПроектыКонтейнеры -
//              - СправочникСсылка.ПолныеРоли -
//              - СправочникСсылка.Пользователи -
//              - СправочникСсылка.ПодразделенияКонтейнеры -
//   * ФункцияУчастника - ПеречислениеСсылка.ФункцииУчастниковИсполнения
//   * НаименованиеЗадачи - Строка
//   * Описание - Строка
//   * ОписаниеОсобое - Строка - Для случая, когда особый текст поручения каждому участнику ("Направить на исполнение").
//   * ВариантУстановкиСрока - ПеречислениеСсылка.ВариантыУстановкиСрокаИсполнения
//   * Срок - Дата
//   * СрокДни - Число
//   * СрокМинуты - Число
//   * СрокЧасы - Число
//   * НомерСтроки - Число -
//
Функция СтруктураПодчиненногоИсполнения() Экспорт
	
	ПодчиненноеИсполнение = Новый ТаблицаЗначений;
	
	КолонкиТаблицы = Новый Соответствие;
	КолонкиТаблицы["Идентификатор"] = Истина;
	КолонкиТаблицы["Участник"] = Истина;
	КолонкиТаблицы["ФункцияУчастника"] = Истина;
	КолонкиТаблицы["НаименованиеЗадачи"] = Истина;
	КолонкиТаблицы["Описание"] = Истина;
	КолонкиТаблицы["ОписаниеОсобое"] = Истина;
	КолонкиТаблицы["ВариантУстановкиСрока"] = Истина;
	КолонкиТаблицы["Срок"] = Истина;
	КолонкиТаблицы["СрокДни"] = Истина;
	КолонкиТаблицы["СрокЧасы"] = Истина;
	КолонкиТаблицы["СрокМинуты"] = Истина;
	КолонкиТаблицы["Ответственный"] = Истина;
	
	Для Каждого Колонка Из Метаданные.Справочники.ДействияИсполнения.ТабличныеЧасти.Участники.Реквизиты Цикл
		Если КолонкиТаблицы[Колонка.Имя] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПодчиненноеИсполнение.Колонки.Добавить(
			Колонка.Имя,
			Колонка.Тип);
	КонецЦикла;
	
	ПодчиненноеИсполнение.Колонки.Добавить("НомерСтроки");
	
	Возврат ПодчиненноеИсполнение;
	
КонецФункции

// Возвращает подчиненное исполнение.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияИсполнения,
//             СправочникОбъект.ДействияИсполнения
//  ИдентификаторВышестоящего - УникальныйИдентификатор - идентификатор вышестоящего исполнителя.
//
// Возвращаемое значение:
//  см. СтруктураПодчиненногоИсполнения
//
Функция ПодчиненноеИсполнение(Действие, ИдентификаторВышестоящего) Экспорт
	
	ПодчиненноеИсполнение = СтруктураПодчиненногоИсполнения();
	
	ФункцииУчастников = Новый Массив;
	ФункцииУчастников.Добавить(Перечисления.ФункцииУчастниковИсполнения.Исполнитель);
	ФункцииУчастников.Добавить(Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат);
	
	Если ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияИсполнения") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Участники.Идентификатор КАК Идентификатор,
			|	Участники.Участник КАК Участник,
			|	Участники.ФункцияУчастника КАК ФункцияУчастника,
			|	Участники.НаименованиеЗадачи КАК НаименованиеЗадачи,
			|	Участники.Описание КАК Описание,
			|	Участники.ОписаниеОсобое КАК ОписаниеОсобое,
			|	Участники.ВариантУстановкиСрока КАК ВариантУстановкиСрока,
			|	Участники.Срок КАК Срок,
			|	Участники.СрокДни КАК СрокДни,
			|	Участники.СрокМинуты КАК СрокМинуты,
			|	Участники.СрокЧасы КАК СрокЧасы,
			|	Участники.Ответственный
			|ИЗ
			|	Справочник.ДействияИсполнения.Участники КАК Участники
			|ГДЕ
			|	Участники.Ссылка = &Действие
			|	И Участники.ВышестоящийУчастник = &ИдентификаторВышестоящего
			|	И Участники.ФункцияУчастника В (&ФункцииУчастников)";
		
		Запрос.УстановитьПараметр("Действие", Действие);
		Запрос.УстановитьПараметр("ИдентификаторВышестоящего", ИдентификаторВышестоящего);
		Запрос.УстановитьПараметр("ФункцииУчастников", ФункцииУчастников);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ПодчиненноеИсполнение.Добавить(), Выборка);
		КонецЦикла;
		
	Иначе
		
		Отбор = Новый Структура("ВышестоящийУчастник", ИдентификаторВышестоящего);
		Для Каждого СтрокаУчастника Из Действие.Участники.НайтиСтроки(Отбор) Цикл
			Если ФункцииУчастников.Найти(СтрокаУчастника.ФункцияУчастника) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ПодчиненноеИсполнение.Добавить(), СтрокаУчастника);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПодчиненноеИсполнение;
	
КонецФункции

// Возвращает разрешение на изменение подчиненного исполнения.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияИсполнения
//  ИдентификаторВышестоящего - УникальныйИдентификатор
//
// Возвращаемое значение:
//  Булево
//
Функция ИзменениеПодчиненногоИсполненияРазрешено(Действие, ИдентификаторВышестоящего) Экспорт
	
	РеквизитыДействия = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
		Действие, "Предмет, Участники");
	РеквизитыДействия.Участники = РеквизитыДействия.Участники.Выгрузить();
	
	ПредметДействия = РеквизитыДействия.Предмет;
	
	ИсполнениеДействияСНовымиУчастниками =
		ДействияСервер.ДействиеИсполняетсяСНовымиУчастниками(Действие);
		
	Состояние = РегистрыСведений.СостоянияДействий.СостояниеДействия(Действие);
	
	СостояниеДействияДопускаетИзменение = 
		(Состояние <> Перечисления.СостоянияВыполненияДействий.Завершено
			И Состояние <> Перечисления.СостоянияВыполненияДействий.Пропущено
			И Состояние <> Перечисления.СостоянияВыполненияДействий.Остановлено)
		Или ИсполнениеДействияСНовымиУчастниками;
	
	Если Не СостояниеДействияДопускаетИзменение Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПравдаДоступа =
		ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(ПредметДействия);
	
	Если ПравдаДоступа.Изменение Тогда
		Возврат Истина;
	КонецЕсли;
	
	ФункцииУчастников = Перечисления.ФункцииУчастниковИсполнения;
	
	УчастникиИмеющиеПраво = Новый Соответствие();
	УчастникиИмеющиеПравоМассив = Новый Массив();
	
	Для Каждого СтрокаУчастника Из РеквизитыДействия.Участники Цикл
		
		Если СтрокаУчастника.Идентификатор = ИдентификаторВышестоящего Тогда
			УчастникиИмеющиеПраво[СтрокаУчастника.Участник] = Истина;
			УчастникиИмеющиеПравоМассив.Добавить(СтрокаУчастника.Участник);
		ИначеЕсли СтрокаУчастника.ВышестоящийУчастник = ИдентификаторВышестоящего
			И СтрокаУчастника.ФункцияУчастника = ФункцииУчастников.ОбрабатывающийРезолюцию
				Или СтрокаУчастника.ФункцияУчастника = ФункцииУчастников.ОбрабатывающийРезультат Тогда
			
			УчастникиИмеющиеПраво[СтрокаУчастника.Участник] = Истина;
			УчастникиИмеющиеПравоМассив.Добавить(СтрокаУчастника.Участник);
		КонецЕсли;
		
	КонецЦикла;
	
	УчастникиИмеющиеПравоМассив = 
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(УчастникиИмеющиеПравоМассив);
	
	Для Каждого УчастникИмеющийПраво Из УчастникиИмеющиеПравоМассив Цикл
		ПодходящиеЗамещения = ЗамещающиеИПомощники.ПодходящиеЗамещенияПоДействиюИИсполнителю(
			Действие, УчастникИмеющийПраво);
		
		Для Каждого СтрокаТаблицы Из ПодходящиеЗамещения Цикл
			УчастникиИмеющиеПраво[СтрокаТаблицы.Замещающий] = Истина;
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоставСубъектовПравДоступа.Сотрудник
		|ИЗ
		|	РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектовПравДоступа
		|ГДЕ
		|	СоставСубъектовПравДоступа.Субъект В (&Сотрудники)
		|	И СоставСубъектовПравДоступа.ОбъектОснование ССЫЛКА Справочник.СтруктураПредприятия
		|	И СоставСубъектовПравДоступа.СотрудникОснование = НЕОПРЕДЕЛЕНО";
	Запрос.УстановитьПараметр("Сотрудники", УчастникиИмеющиеПравоМассив);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		УчастникиИмеющиеПраво[Выборка.Сотрудник] = Истина;
	КонецЦикла;
	
	ТекущийСотрудникИмеетПраво = Ложь;
	Для Каждого СотрудникПользователя Из Сотрудники.ВсеСотрудникиТекущегоПользователя(Истина) Цикл
		Если УчастникиИмеющиеПраво[СотрудникПользователя] = Истина Тогда
			ТекущийСотрудникИмеетПраво = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ТекущийСотрудникИмеетПраво Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Обновляет подчиненное исполнение.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияИсполнения
//  ИдентификаторВышестоящего - УникальныйИдентификатор
//  ПодчиненноеИсполнение - см. СтруктураПодчиненногоИсполнения
//  Контролер - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли - контролер исполнения
//
Процедура ОбновитьПодчиненноеИсполнение(
	Действие, ИдентификаторВышестоящего, ПодчиненноеИсполнение, Контролер) Экспорт
	
	Если Не ИзменениеПодчиненногоИсполненияРазрешено(Действие, ИдентификаторВышестоящего) Тогда
		ВызватьИсключение НСтр("ru = 'Подчиненное исполнение недоступно для изменения.'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВнешняяТранзакция = ТранзакцияАктивна();
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Действие);
			
		ДействиеОбъект = Действие.ПолучитьОбъект();
	
		КэшСтрокПрежнихУчастников = Новый Соответствие;
		
		ФункцииУчастников = Перечисления.ФункцииУчастниковИсполнения;
		
		ПрежниеУчастники = Новый Массив;
		Для Каждого СтрокаУчастника Из ДействиеОбъект.Участники Цикл
			
			Если СтрокаУчастника.ВышестоящийУчастник <> ИдентификаторВышестоящего
				Или (СтрокаУчастника.ФункцияУчастника <> ФункцииУчастников.Исполнитель
					И СтрокаУчастника.ФункцияУчастника <> ФункцииУчастников.ОбрабатывающийРезультат) Тогда
			
				Продолжить;
			КонецЕсли;
			
			ПрежниеУчастники.Добавить(СтрокаУчастника);
		КонецЦикла;
			
		МинСтрока = 10000;
		Для Каждого СтрокаУчастника Из ПрежниеУчастники Цикл
			КэшСтрокПрежнихУчастников[СтрокаУчастника.Идентификатор] = СтрокаУчастника;
			МинСтрока = Мин(МинСтрока, СтрокаУчастника.НомерСтроки)
		КонецЦикла;
		
		КэшСтрокПодчиненноеИсполнение = Новый Соответствие;
		Для Каждого СтрокаУчастника Из ПодчиненноеИсполнение Цикл
			КэшСтрокПодчиненноеИсполнение[СтрокаУчастника.Идентификатор] = СтрокаУчастника;
		КонецЦикла;
		ТребуетсяПерезаполнить = Ложь;
		// Проверяем исключенных участников.
		Индекс = ПрежниеУчастники.Количество() - 1;
		Пока Индекс >= 0 Цикл
			СтрокаУчастника = ПрежниеУчастники[Индекс];
			Если КэшСтрокПодчиненноеИсполнение[СтрокаУчастника.Идентификатор] = Неопределено Тогда
				ТребуетсяПерезаполнить = Истина;
				Прервать;
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
		
		// Проверяем новых участников.
		Если Не ТребуетсяПерезаполнить Тогда
			Для Каждого СтрокаУчастника Из ПодчиненноеИсполнение Цикл
				Если КэшСтрокПрежнихУчастников[СтрокаУчастника.Идентификатор] <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ТребуетсяПерезаполнить = Истина;
				Прервать;
			КонецЦикла;
		КонецЕсли;
		
		// Проверяем изменившиеся данные у прежних участников.
		Если Не ТребуетсяПерезаполнить Тогда
			СравниваемыеКолонки = Новый Массив;
			Для Каждого КолонкаТаблицы Из ПодчиненноеИсполнение.Колонки Цикл
				СравниваемыеКолонки.Добавить(КолонкаТаблицы.Имя);
			КонецЦикла;
			
			Для Каждого СтрокаПрежнегоУчастника Из ПрежниеУчастники Цикл
				
				СтрокаУчастника = КэшСтрокПодчиненноеИсполнение[СтрокаПрежнегоУчастника.Идентификатор];
				ЕстьРазличия = Ложь;
				Для Каждого ИмяКолонки Из СравниваемыеКолонки Цикл
					Если ИмяКолонки = "НомерСтроки"
						И МинСтрока > 0 Тогда
						Если СтрокаПрежнегоУчастника[ИмяКолонки] - МинСтрока + 1 <> СтрокаУчастника[ИмяКолонки] Тогда
							ЕстьРазличия = Истина;
							Прервать;
						КонецЕсли;
					ИначеЕсли СтрокаПрежнегоУчастника[ИмяКолонки] <> СтрокаУчастника[ИмяКолонки] Тогда
						ЕстьРазличия = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Не ЕстьРазличия Тогда
					Продолжить;
				КонецЕсли;
				
				ТребуетсяПерезаполнить = Истина;
				Прервать;
				
			КонецЦикла;
		КонецЕсли;
		
		Если Не ТребуетсяПерезаполнить Тогда //если изменился контролер, то обновляем контроль подчиненного исполнения
			СтарыйКонтролер = КонтрольПовтИсп.КонтролерПодчиненногоИсполнения(
				Действие, Строка(ИдентификаторВышестоящего));
			Если Контролер <> СтарыйКонтролер  Тогда
				ТребуетсяПерезаполнить = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Если есть изменения, то обновляем действие.
		Если ТребуетсяПерезаполнить Тогда
			Индекс = ПрежниеУчастники.Количество() - 1;
			Пока Индекс >= 0 Цикл
				СтрокаУчастника = ПрежниеУчастники[Индекс];
				ДействиеОбъект.Участники.Удалить(СтрокаУчастника);
				ПрежниеУчастники.Удалить(Индекс);
				Индекс = Индекс - 1;
			КонецЦикла;
			
			Для Каждого СтрокаУчастника Из ПодчиненноеИсполнение Цикл
				СтрокаНовогоУчастника = ДействиеОбъект.Участники.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНовогоУчастника, СтрокаУчастника);
				СтрокаНовогоУчастника.ВышестоящийУчастник = ИдентификаторВышестоящего;
			КонецЦикла;
			
			ДействиеОбъект.Записать();
			// Если есть изменения, также меняем резолюцию и контроль.
			ОбновитьРезолюциюПоДействию(Действие, ИдентификаторВышестоящего);
			Контроль.ОбновитьКонтрольПодчиненногоИсполнения(
				Действие, ИдентификаторВышестоящего, Контролер);
		КонецЕсли;
		
		РазблокироватьДанныеДляРедактирования(Действие);
		
		Если Не ВнешняяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	Исключение
		Инфо = ИнформацияОбОшибке();
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение(СтрШаблон(НСтр("ru = '%1'"), ОбработкаОшибок.ПодробноеПредставлениеОшибки(Инфо)));
	КонецПопытки;
	
КонецПроцедуры

// Обновляет резолюцию по измененному действию
// 
// Параметры:
//  Действие - СправочникСсылка.ДействияИсполнения
//  ИдентификаторВышестоящего - УникальныйИдентификатор
// 
Процедура ОбновитьРезолюциюПоДействию(Действие, ИдентификаторВышестоящего) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРезолюцииВДокументах") Тогда
		Возврат;
	КонецЕсли;	
	
	Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет");
	Если Не ЗначениеЗаполнено(Предмет) Тогда
		Возврат;
	КонецЕсли;	
	
	Резолюции = РаботаСРезолюциями.ПолучитьРезолюции(Предмет, , , Действие, ИдентификаторВышестоящего);
	Если Резолюции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Резолюция = Резолюции[0].Ссылка;
	ЗаблокироватьДанныеДляРедактирования(Резолюция);	
	РезолюцияОбъект = Резолюция.ПолучитьОбъект();
	РезолюцияОбъект.ТекстРезолюции = ТекстРезолюцииПоПодчиненномуИсполнению(Действие, ИдентификаторВышестоящего);
	РезолюцияОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(Резолюция);
	
КонецПроцедуры

// Возвращает текст резолюции по подчиненному исполнению.
// 
// Параметры:
//  Действие - СправочникСсылка.ДействияИсполнения
//  ИдентификаторВышестоящего - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  Строка
//
Функция ТекстРезолюцииПоПодчиненномуИсполнению(Действие, ИдентификаторВышестоящего) Экспорт
	
	ПодчиненноеИсполнение = ПодчиненноеИсполнение(Действие, ИдентификаторВышестоящего);
	
	ТекстРезолюции = "";
	
	НаименованиеИсполнения = "";
	ОписаниеИсполнения = "";
	Исполнители = "";
	Проверяющий = ""; СрокПроверки = "";
	Если ПодчиненноеИсполнение.Количество() > 0 Тогда
		
		НаименованиеИсполнения = ПодчиненноеИсполнение[0].НаименованиеЗадачи;
		ОписаниеИсполнения = ПодчиненноеИсполнение[0].Описание;
		ИспользоватьДатуИВремяВСрокахЗадач = Ложь; // Тут показываем без времени.
		Для Каждого СтрокаПодчиненного Из ПодчиненноеИсполнение Цикл
			
			Если СтрокаПодчиненного.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Исполнитель Тогда
				Исполнители = Исполнители + Строка(СтрокаПодчиненного.Участник);
				Если ЗначениеЗаполнено(СтрокаПодчиненного.Срок)
					Или ЗначениеЗаполнено(СтрокаПодчиненного.СрокДни)
					Или ЗначениеЗаполнено(СтрокаПодчиненного.СрокЧасы)
					Или ЗначениеЗаполнено(СтрокаПодчиненного.СрокМинуты)  Тогда 
					Исполнители = Исполнители + " " + 
						ОбщегоНазначенияДокументооборотКлиентСервер.ПредставлениеСрокаИсполнения(
							СтрокаПодчиненного.Срок,
							СтрокаПодчиненного.СрокДни,
							СтрокаПодчиненного.СрокЧасы,
							СтрокаПодчиненного.СрокМинуты,
							ИспользоватьДатуИВремяВСрокахЗадач,
							СтрокаПодчиненного.ВариантУстановкиСрока);
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаПодчиненного.ОписаниеОсобое) Тогда
					Исполнители = Исполнители + Символы.ПС + СтрокаПодчиненного.ОписаниеОсобое;
				КонецЕсли;
				Исполнители = Исполнители + Символы.ПС;
			Иначе
				Проверяющий = Строка(СтрокаПодчиненного.Участник);
				Если ЗначениеЗаполнено(СтрокаПодчиненного.Срок) 
					Или ЗначениеЗаполнено(СтрокаПодчиненного.СрокДни)
					Или ЗначениеЗаполнено(СтрокаПодчиненного.СрокЧасы)
					Или ЗначениеЗаполнено(СтрокаПодчиненного.СрокМинуты) Тогда 
					СрокПроверки = ОбщегоНазначенияДокументооборотКлиентСервер.ПредставлениеСрокаИсполнения(
						СтрокаПодчиненного.Срок,
						СтрокаПодчиненного.СрокДни,
						СтрокаПодчиненного.СрокЧасы,
						СтрокаПодчиненного.СрокМинуты,
						ИспользоватьДатуИВремяВСрокахЗадач,
						СтрокаПодчиненного.ВариантУстановкиСрока);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НаименованиеИсполнения) Тогда 
		ТекстРезолюции = ТекстРезолюции + НаименованиеИсполнения + Символы.ПС;
	КонецЕсли;
	Если ЗначениеЗаполнено(ОписаниеИсполнения) Тогда 
		ТекстРезолюции = ТекстРезолюции + ОписаниеИсполнения + Символы.ПС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Исполнители) Тогда 
		ТекстРезолюции = ТекстРезолюции
			+ НСтр("ru = 'Исполнители'") + ": " + Символы.ПС
			+ Исполнители;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Проверяющий) Тогда 
		ТекстРезолюции = ТекстРезолюции + НСтр("ru = 'Проверить'") + ": " + Строка(Проверяющий);
		Если ЗначениеЗаполнено(СрокПроверки) Тогда 
			ТекстРезолюции = ТекстРезолюции + " " + СрокПроверки;
		КонецЕсли;
		ТекстРезолюции = ТекстРезолюции + Символы.ПС;
	КонецЕсли;
	
	Возврат ТекстРезолюции;
	
КонецФункции

// Возвращает структуру пункта исполнения.
// 
// Возвращаемое значение:
//  см. ДействияКлиентСервер.СтруктураПунктаИсполнения.
//
Функция СтруктураПунктаИсполнения() Экспорт
	
	Возврат ДействияКлиентСервер.СтруктураПунктаИсполнения();
	
КонецФункции

// Возвращает структуру параметров для участника пункта исполнения.
// 
// Возвращаемое значение:
//  Структура
//   * Участник - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли.
//   * Идентификатор - УникальныйИдентификатор.
//   * Ответственный - Булево.
//   * Срок - Дата.
//   * СрокДни - Число.
//   * СрокМинуты - Число.
//   * СрокЧасы - Число.
//   * ВариантУстановкиСрока - ПеречислениеСсылка.ВариантыУстановкиСрокаИсполнения.
//   * Функция - ПеречислениеСсылка.ФункцииУчастниковИсполнения.
//
Функция ПараметраУчастникаПунктаИсполнения() Экспорт
	
	Возврат ДействияКлиентСервер.ПараметраУчастникаПунктаИсполнения();
	
КонецФункции

// Возвращает данные пункта исполнения.
// 
// Параметры:
//  Действие - СправочникСсылка.ДействияИсполнения.
//  ИдентификаторПункта - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  Структура - см. СтруктураПунктаИсполнения()
//
Функция ПунктИсполнения(Действие, ИдентификаторПункта) Экспорт
	
	РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие, "Пункты, Участники");
	РеквизитыДействия.Пункты = РеквизитыДействия.Пункты.Выгрузить();
	РеквизитыДействия.Пункты.Сортировать("НомерСтроки");
	
	РеквизитыДействия.Участники = РеквизитыДействия.Участники.Выгрузить();
	РеквизитыДействия.Участники.Сортировать("НомерСтроки");
	
	ПунктИсполнения = СтруктураПунктаИсполнения();
	
	ПунктЕстьВДействии = Ложь;
	
	Для Каждого СтрокаПункта Из РеквизитыДействия.Пункты Цикл
		
		Если СтрокаПункта.Идентификатор <> ИдентификаторПункта Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПунктИсполнения, СтрокаПункта, "Номер, Описание, Срок, Контролер, Автор");
		
		ПунктЕстьВДействии = Истина;
		
	КонецЦикла;
	
	Если Не ПунктЕстьВДействии Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Пункт с идентификатором %1 отсутствует в действии.'"),
			ИдентификаторПункта);
	КонецЕсли;
	
	Для Каждого СтрокаУчастника Из РеквизитыДействия.Участники Цикл
		
		Если СтрокаУчастника.ИдентификаторПункта <> ИдентификаторПункта Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметраУчастникаПункта = ПараметраУчастникаПунктаИсполнения();
		
		ЗаполнитьЗначенияСвойств(ПараметраУчастникаПункта, СтрокаУчастника,
			"Участник, Идентификатор, Ответственный, Срок, СрокДни, СрокЧасы, СрокМинуты, ВариантУстановкиСрока");
		
		ПараметраУчастникаПункта.Функция = СтрокаУчастника.ФункцияУчастника;
		
		ПунктИсполнения.УчастникиПункта.Добавить(ПараметраУчастникаПункта);
		
	КонецЦикла;
	
	Возврат ПунктИсполнения;
	
КонецФункции

// Обновляет пункт исполнения.
// 
// Параметры:
//  Действие - СправочникСсылка.ДействияИсполнения
//  ИдентификаторПункта - УникальныйИдентификатор
//  ПунктИсполнения - Структура - см. СтруктураПунктаИсполнения()
//
Процедура ОбновитьПунктИсполнения(Действие, ИдентификаторПункта, ПунктИсполнения) Экспорт
	
	ЗаблокироватьДанныеДляРедактирования(Действие);
		
	ДействиеОбъект = Действие.ПолучитьОбъект();
	
	КэшСтрокПрежнихУчастников = Новый Соответствие;
	
	ПрежниеУчастники = Новый Массив;
	Для Каждого СтрокаУчастника Из ДействиеОбъект.Участники Цикл
		
		Если СтрокаУчастника.ИдентификаторПункта <> ИдентификаторПункта Тогда
			Продолжить;
		КонецЕсли;
		
		ПрежниеУчастники.Добавить(СтрокаУчастника);
	КонецЦикла;
	
	МинСтрока = 10000;
	Для Каждого СтрокаУчастника Из ПрежниеУчастники Цикл
		КэшСтрокПрежнихУчастников[СтрокаУчастника.Идентификатор] = СтрокаУчастника;
		МинСтрока = Мин(МинСтрока, СтрокаУчастника.НомерСтроки);
	КонецЦикла;
	
	КешСтрокУчастниковПункта = Новый Соответствие;
	Для Каждого СтрокаУчастника Из ПунктИсполнения.УчастникиПункта Цикл
		КешСтрокУчастниковПункта[СтрокаУчастника.Идентификатор] = СтрокаУчастника;
	КонецЦикла;
	
	ПерезаполнитьУчастников = Ложь;
	
	// Проверяем исключенных участников.
	Индекс = ПрежниеУчастники.Количество() - 1;
	Пока Индекс >= 0 Цикл
		СтрокаУчастника = ПрежниеУчастники[Индекс];
		Если КешСтрокУчастниковПункта[СтрокаУчастника.Идентификатор] = Неопределено Тогда
			ПерезаполнитьУчастников = Истина;
			Прервать;
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	// Проверяем новых участников.
	Если Не ПерезаполнитьУчастников Тогда
		Для Каждого СтрокаУчастника Из ПунктИсполнения.УчастникиПункта Цикл
			Если КэшСтрокПрежнихУчастников[СтрокаУчастника.Идентификатор] <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПерезаполнитьУчастников = Истина;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	// Проверяем изменившиеся данные у прежних участников.
	Если Не ПерезаполнитьУчастников Тогда
		
		СравниваемыеПоля = СтрРазделить(
			"Участник,Идентификатор,Ответственный,Срок,СрокДни,СрокЧасы,СрокМинуты,ВариантУстановкиСрока,Функция",
			",");
		
		Для Индекс = 0 По ПунктИсполнения.УчастникиПункта.Количество() - 1 Цикл
			
			СтрокаУчастника = ПунктИсполнения.УчастникиПункта[Индекс];
			НомерСтроки = Индекс + 1;
			
			СтрокаПрежнегоУчастника = КэшСтрокПрежнихУчастников[СтрокаУчастника.Идентификатор];
			
			Если МинСтрока > 0
				И СтрокаПрежнегоУчастника.НомерСтроки - МинСтрока + 1 <> НомерСтроки Тогда
				
				ПерезаполнитьУчастников = Истина;
				Прервать;
			КонецЕсли;
			
			Для Каждого ИмяПоля Из СравниваемыеПоля Цикл
				Если ИмяПоля = "Функция" Тогда
					Если СтрокаПрежнегоУчастника.ФункцияУчастника <> СтрокаУчастника.Функция Тогда
						ПерезаполнитьУчастников = Истина;
						Прервать;
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				Если СтрокаПрежнегоУчастника[ИмяПоля] <> СтрокаУчастника[ИмяПоля] Тогда
					ПерезаполнитьУчастников = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Если есть изменения, то обновляем участников в действии.
	Если ПерезаполнитьУчастников Тогда
		
		Индекс = ПрежниеУчастники.Количество() - 1;
		Пока Индекс >= 0 Цикл
			СтрокаУчастника = ПрежниеУчастники[Индекс];
			ДействиеОбъект.Участники.Удалить(СтрокаУчастника);
			ПрежниеУчастники.Удалить(Индекс);
			Индекс = Индекс - 1;
		КонецЦикла;
		
		Для Каждого СтрокаУчастника Из ПунктИсполнения.УчастникиПункта Цикл
			СтрокаНовогоУчастника = ДействиеОбъект.Участники.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНовогоУчастника, СтрокаУчастника,
				"Участник, Идентификатор, Ответственный, Срок, СрокДни, СрокЧасы, СрокМинуты,
				|ВариантУстановкиСрока");
			СтрокаНовогоУчастника.ИдентификаторПункта = ИдентификаторПункта;
			СтрокаНовогоУчастника.ФункцияУчастника = СтрокаУчастника.Функция;
		КонецЦикла;
		
	КонецЕсли;
	
	// Обновляем при необходимости данные пункта.
	Для Каждого СтрокаПункта Из ДействиеОбъект.Пункты Цикл
		
		Если СтрокаПункта.Идентификатор <> ИдентификаторПункта Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаПункта.Автор <> ПунктИсполнения.Автор Тогда
			СтрокаПункта.Автор = ПунктИсполнения.Автор;
		КонецЕсли;
		
		Если СтрокаПункта.Контролер <> ПунктИсполнения.Контролер Тогда
			СтрокаПункта.Контролер = ПунктИсполнения.Контролер;
		КонецЕсли;
		
		Если СтрокаПункта.Описание <> ПунктИсполнения.Описание Тогда
			СтрокаПункта.Описание = ПунктИсполнения.Описание;
		КонецЕсли;
		
		Если СтрокаПункта.Срок <> ПунктИсполнения.Срок Тогда
			СтрокаПункта.Срок = ПунктИсполнения.Срок;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДействиеОбъект.Модифицированность() Тогда
		ДействиеОбъект.Записать();
	КонецЕсли;
	
	РазблокироватьДанныеДляРедактирования(Действие);
	
КонецПроцедуры

// Добавляет/обновляет обрабатывающего резолюцию для рассматривающего в действие
//
// Параметры:
//  Действие - СправочникСсылка.ДействияИсполнения - ссылка на действие.
//  Рассматривающий - УникальныйИдентификатор - идентификатор строки рассматривающего.
//  ОбрабатывающийРезолюцию - СправочникСсылка.ПолныеРоли, СправочникСсылка.Сотрудники
//
Процедура ОбновитьОбрабатывающегоРезолюциюРассматривающего(Действие, Рассматривающий, ОбрабатывающийРезолюцию) Экспорт
	
	ЗаблокироватьДанныеДляРедактирования(Действие);
	
	ДействиеОбъект = Действие.ПолучитьОбъект();
	
	Отбор = Новый Структура;
	Отбор.Вставить("ВышестоящийУчастник", Рассматривающий);
	Отбор.Вставить("ФункцияУчастника", Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезолюцию);
	
	СтрокиПомощника = ДействиеОбъект.Участники.НайтиСтроки(Отбор);
	Если СтрокиПомощника.Количество() = 0 Тогда
		СтрокаПомощника = ДействиеОбъект.Участники.Добавить();
		СтрокаПомощника.ВышестоящийУчастник = Рассматривающий;
		СтрокаПомощника.Идентификатор = Новый УникальныйИдентификатор;
		СтрокаПомощника.Участник = ОбрабатывающийРезолюцию;
		СтрокаПомощника.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезолюцию;
	Иначе
		Если СтрокиПомощника[0].Участник <> ОбрабатывающийРезолюцию Тогда
			СтрокиПомощника[0].Участник = ОбрабатывающийРезолюцию;
		КонецЕсли;
	КонецЕсли;
	
	Если ДействиеОбъект.Модифицированность() Тогда
		ДействиеОбъект.Записать();
	КонецЕсли;
	
	РазблокироватьДанныеДляРедактирования(Действие);
	
КонецПроцедуры

// Проверяет необходимость выполнения действия.
//
// Если не соблюдены условия для обязательного действия, то
// генерируется исключение.
//
// Параметры:
//  Действие - ОпределяемыйТип.ДействияОбъект - объект действия.
//  ПропуститьДействие - Булево - неявно возвращаемый параметр, принимает значение Истина,
//                            если необходимо пропустить исполнение действия.
//
Процедура ПроверитьНеобходимостьВыполненияДействия(Действие, ПропуститьДействие) Экспорт
	
	ПропуститьДействие = Ложь;
	
	Участники = УчастникиДействия(Действие);
	
	// Проверяем наличие участников и если их нет,
	// то отказываемся от создания процесса по действию.
	Если Участники.Количество() = 0 Тогда
		ПропуститьДействие = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает представление действия строкой.
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияИсполнения
// 	
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеДействияСтрокой(Действие) Экспорт
	
	СтрокиПредставления = Новый	Массив;
		
	РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Действие, "ВидДействия, Участники");
	
	РеквизитыДействия.Участники = РеквизитыДействия.Участники.Выгрузить();
	
	СтрокиПредставления.Добавить(Строка(РеквизитыДействия.ВидДействия));
	СтрокиПредставления.Добавить(Символы.ПС);
	
	ФункцииУчастников = Перечисления.ФункцииУчастниковИсполнения;
		
	Для Каждого СтрокаТаблицы Из РеквизитыДействия.Участники Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ВышестоящийУчастник) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.ФункцияУчастника <> ФункцииУчастников.АвтоопределениеФункцииУчастника 
			И СтрокаТаблицы.ФункцияУчастника <> ФункцииУчастников.Исполнитель
			И СтрокаТаблицы.ФункцияУчастника <> ФункцииУчастников.Рассматривающий Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиПредставления.Добавить(Символы.ПС);
		СтрокиПредставления.Добавить(Строка(СтрокаТаблицы.Участник));
		
	КонецЦикла;
	
	Возврат СтрСоединить(СтрокиПредставления);
	
КонецФункции

// Возвращает участника, которого необходимо ознакомить с результатом завершения действия.
//
// Параметры:
//	Действие - СправочникСсылка.ДействияИсполнения - Действие, в котором нужно найти участника, которого необходимо
//													 ознакомить с результатом.
//
// Возвращаемое значение:
//	* СправочникСсылка.Сотрудники,
//	  СправочникСсылка.ПолныеРоли, 
//	  СправочникСсылка.АвтоподстановкиДляОбъектов - участник, которого необходимо ознакомить с результатом.
//
Функция ОзнакамливаемыйСРезультатом(Действие) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ОзнакамливаемыйСРезультатом = Неопределено;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Участник КАК Участник
		|ИЗ
		|	Справочник.ДействияИсполнения.Участники
		|ГДЕ
		|	Ссылка = &Действие
		|	И ФункцияУчастника = ЗНАЧЕНИЕ(Перечисление.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат)");
	Запрос.УстановитьПараметр("Действие", Действие);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОзнакамливаемыйСРезультатом = Выборка.Участник;
	КонецЕсли;

	Возврат ОзнакамливаемыйСРезультатом;
		
КонецФункции

// Возвращает описание результата завершения действия.
//
// Параметры:
//	Действие - СправочникСсылка.ДействияИсполнения - Действие, для которого необходимо получить описание
//													 результата завершения.
//	КодЯзыка - Строка - Код языка пользователя
//
// Возвращаемое значение:
//	Строка - Описание результата завершения действия.
//
Функция ОписаниеРезультатаЗавершенияДействия(Действие, КодЯзыка) Экспорт

	ОписаниеРезультата = "";
	
	РезультатДействия = РегистрыСведений.РезультатыДействий.РезультатДействия(Действие);	
	Если РезультатДействия = Перечисления.РезультатыИсполнения.Исполнено Тогда
		ОписаниеРезультата = НСтр("ru = 'Результат исполнения: Исполнено'", КодЯзыка);
	ИначеЕсли РезультатДействия = Перечисления.РезультатыИсполнения.Отказ Тогда
		ОписаниеРезультата = НСтр("ru = 'Результат исполнения: Не исполнено'", КодЯзыка);
	КонецЕсли;	
					
	Возврат ОписаниеРезультата;
	
КонецФункции

// Возвращает Срок исполнения документа, если он задан.
// Корректирует его на конец рабочего или календарного дня.
// 
// Параметры:
//  Предмет Предмет - ОпределяемыйТип.ПредметДействия - Ссылка на предмет
//  РеквизитыПредмета - Структура, Неопределено - данные предмета
//  	СрокИсполнения - Дата - Срок исполнения предмета
//  	ВидДокументаИспользоватьСрокИсполнения - Булево - флаг, использования срока исполнения в предмете.
// 
// Возвращаемое значение:
//  СрокИсполненияПредмета - Дата - Срок исполнения предмета
//
Функция СрокИсполненияПредмета(Предмет, РеквизитыПредмета = Неопределено) Экспорт
	
	СрокИсполненияПредмета = Дата(1, 1, 1);
	// Перенесем Срок исполнения из предмета, если не задано в настройках
	Если ЗначениеЗаполнено(Предмет) 
		И ДелопроизводствоКлиентСервер.ЭтоДокумент(Предмет) Тогда
		Если РеквизитыПредмета = Неопределено Тогда
			РеквизитыПредмета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Предмет, 
				"СрокИсполнения, ВидДокумента.ИспользоватьСрокИсполнения");
		КонецЕсли;
		
		Если РеквизитыПредмета.ВидДокументаИспользоватьСрокИсполнения = Истина 
			И ЗначениеЗаполнено(РеквизитыПредмета.СрокИсполнения) Тогда
				
			Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда
				СрокИсполненияПредмета = РаботаСЗадачами.ОкончаниеРабочегоДня(
					РеквизитыПредмета.СрокИсполнения);
				
			Иначе
				СрокИсполненияПредмета = КонецДня(РеквизитыПредмета.СрокИсполнения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СрокИсполненияПредмета;
	
КонецФункции

// Данные пункта действия по идентификатору.
// 
// Параметры:
//  Действие - СправочникСсылка.ДействияИсполнения - Действие
//  ИдентификаторПункта - УникальныйИдентификатор - Идентификатор пункта
//  Пункты - Неопределено, ТаблицаЗначений - Пункты действия. Если не заданы, то получаем их по ссылке.
// 
// Возвращаемое значение:
//  Структура - Данные пункта действия:
// * Контролер - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли
// * Описание - Строка
// * Номер - Строка
// * Срок - Дата
// * Действие - СправочникСсылка.ДействияИсполнения
// * ИдентификаторПункта - УникальныйИдентификатор
// 
Функция ДанныеПунктаДействия(Действие, ИдентификаторПункта, Пункты = Неопределено) Экспорт

	ДанныеПункта = Новый Структура("Контролер, Описание, Номер, Срок");
	ДанныеПункта.Вставить("Действие", Действие);
	ДанныеПункта.Вставить("ИдентификаторПункта", ИдентификаторПункта);
	
	Если Пункты = Неопределено Тогда
		Пункты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Пункты").Выгрузить();
	КонецЕсли;
	
	Для Каждого СтрЭтап Из Пункты Цикл
		Если СтрЭтап.Идентификатор <> ИдентификаторПункта 
			Или Не ЗначениеЗаполнено(СтрЭтап.Контролер) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеПункта, СтрЭтап);
		Прервать;
	КонецЦикла;
	
	Возврат ДанныеПункта;
		
КонецФункции

// Обновляет сроки исполнения у всех участников, активных не завершенных действий исполнения по предмету.
// Обновляет срок только тех участников, у которых срок совпадает со старым сроком предмета.
// 
// Параметры:
//  Предмет - ОпределяемыйТип.ПредметДействия - Ссылка на предмет.
//  СтарыйСрокИсполнения - Дата - срок предмета, до изменения.
//
Процедура ОбновитьСрокиПоПредмету(Предмет, Знач СтарыйСрокИсполнения) Экспорт

	АктивныеДействия = ДействияСервер.ТекущиеДействияПредмета(
		Предмет, , ТекущаяДатаСеанса()).Выгрузить();
	МассивДействий = АктивныеДействия.ВыгрузитьКолонку("Действие");
	
	СрокИсполнения = Справочники.ДействияИсполнения.СрокИсполненияПредмета(Предмет);
	Для Каждого ДействиеСсылка Из МассивДействий Цикл
		Если Не ДействияКлиентСервер.ЭтоДействиеИсполнения(ДействиеСсылка) Тогда
			Продолжить;
		КонецЕсли;
		
		// Если действие уже в работе, то ничего не делаем
		Если ЗначениеЗаполнено(РегистрыСведений.СостоянияДействий.СостояниеДействия(ДействиеСсылка)) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ТребуетсяЗапись = Ложь;
			ДействиеОбъект = ДействиеСсылка.ПолучитьОбъект();
			Для Каждого СтрУчастник Из ДействиеОбъект.Участники Цикл
				Если СтрУчастник.ВариантУстановкиСрока = Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок 
					И СтрУчастник.Срок = СтарыйСрокИсполнения Тогда
					СтрУчастник.Срок = СрокИсполнения;
					ТребуетсяЗапись = Истина;
					
				ИначеЕсли Не ЗначениеЗаполнено(СтрУчастник.Срок) 
					И Не ЗначениеЗаполнено(СтрУчастник.СрокДни)
					И Не ЗначениеЗаполнено(СтрУчастник.СрокЧасы)
					И Не ЗначениеЗаполнено(СтрУчастник.СрокМинуты) Тогда
					СтрУчастник.Срок = СрокИсполнения;
					СтрУчастник.ВариантУстановкиСрока = Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
					ТребуетсяЗапись = Истина;
				КонецЕсли;
			КонецЦикла;	
			
			Если ТребуетсяЗапись Тогда
				ДействиеОбъект.Записать();
			КонецЕсли;
			
		Исключение
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Не удалось поменять сроки действия ""%1"", по причине: %2'"),
				ДействиеСсылка,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ВыполнениеДействий

// Отмечает начало выполнения действия Исполнения.
//
Процедура ОтметитьНачалоВыполнения(Действие, Параметры, ПроверятьНаличиеУчастника = Истина) Экспорт
	
	НачальноеСостояние = РегистрыСведений.СостоянияДействий.СостояниеДействия(Действие);
	
	УчастникиДействия = ВсеУчастникиДействия(Действие);
	СтрУчастника = УчастникиДействия.Найти(Параметры.ИдентификаторУчастника, "Идентификатор");
	Если СтрУчастника <> Неопределено Тогда
		Параметры.ИдентификаторПункта = СтрУчастника.ИдентификаторПункта;
		Если ЗначениеЗаполнено(СтрУчастника.ИдентификаторПункта) Тогда
			Пункт = ПунктИсполнения(Действие, СтрУчастника.ИдентификаторПункта);
			Если ЗначениеЗаполнено(Пункт) Тогда
				Параметры.Вставить("ОписаниеПункта", Пункт.Описание);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	ДействияСервер.ОтметитьНачалоВыполнения(Действие, Параметры);
	
	// Поставим на контроль, если заполнен контролер
	Если Не ЗначениеЗаполнено(НачальноеСостояние) Тогда
		Контроль.СоздатьКарточкуКонтроляПоДействию(Действие);
		
		ДанныеДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие, "ПоПунктам, Пункты");
		Если ДанныеДействия.ПоПунктам Тогда
			Выборка = ДанныеДействия.Пункты.Выбрать();
			Пока Выборка.Следующий() Цикл 
				Если Не ЗначениеЗаполнено(Выборка.Контролер) Тогда
					Продолжить;
				КонецЕсли;
				Контроль.СоздатьКарточкуКонтроляПоПунктуИсполнения(Действие, Выборка.Идентификатор);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Отмечает действие Исполнение выполненным исполнителем.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияИсполнения
//  Параметры - Структура -
//  Исполнитель - СправочникСсылка.СтруктураПредприятия,
//                Строка,
//                СправочникСсылка.ПолныеРоли,
//                СправочникСсылка.Пользователи
//  Поручение - СправочникСсылка.Поручения
//
Процедура ОтметитьВыполнение(Действие, Параметры, ПроверятьНаличиеУчастника = Истина) Экспорт
	
	Если ЗначениеЗаполнено(Параметры.Результат) 
		И Параметры.Функция = Перечисления.ФункцииУчастниковИсполнения.Рассматривающий Тогда
		
		Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет"); 
		Если Метаданные.Справочники.Резолюции.Реквизиты.Документ.Тип.СодержитТип(ТипЗнч(Предмет)) Тогда
			
			НоваяРезолюция = Справочники.Резолюции.СоздатьЭлемент();
			НоваяРезолюция.Наименование = РаботаСРезолюциямиКлиентСервер.ПолучитьНаименованиеРезолюции(Предмет);
			
			НоваяРезолюция.АвторРезолюции = 
				Сотрудники.ОсновнойСотрудникПользователя(
				Параметры.Участник);
			
			НоваяРезолюция.ВнесРезолюцию = НоваяРезолюция.АвторРезолюции;
			
			Если Параметры.Свойство("ФактическийИсполнительПолный") Тогда
				НоваяРезолюция.ФактическийАвтор = Параметры.ФактическийИсполнительПолный;
			КонецЕсли;
			
			НоваяРезолюция.ДатаРезолюции = Параметры.ДатаИсполнения;
			НоваяРезолюция.Документ = Предмет;
			НоваяРезолюция.Источник = Действие;
			Если Параметры.Свойство("Комментарий") И ЗначениеЗаполнено(Параметры.Комментарий) Тогда 
				НоваяРезолюция.ТекстРезолюции = Параметры.Комментарий;
			КонецЕсли;
			
			ИДУчастника = ?(Параметры.Свойство("ИдентификаторУчастника"),
				Параметры.ИдентификаторУчастника, Параметры.Идентификатор);
			
			НоваяРезолюция.ИдентификаторУчастника = ИДУчастника;
			
			ЗаписатьРезолюцию = Истина;
			Если Параметры.Свойство("ПодписиЭП")
				И ТипЗнч(Параметры.ПодписиЭП) = Тип("Соответствие") Тогда
				
				ЗадачаУчастника = РаботаСПроцессамиПоДействиям.ЗадачаПроцессаПоУчастникуДействия(Действие, ИДУчастника);
				ДействиеЗадачи = Документы.ДействиеЗадачи.НайтиПоИсточнику(ЗадачаУчастника);
				
				ПодписиЭПДействия = Параметры.ПодписиЭП.Получить(ДействиеЗадачи);
				ЗанестиПодписиРезолюций(ПодписиЭПДействия, НоваяРезолюция, ЗаписатьРезолюцию);
			КонецЕсли;
						
			Если ЗаписатьРезолюцию Тогда
				НоваяРезолюция.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;       
	
	УчастникиДействия = ВсеУчастникиДействия(Действие);
	СтрУчастника = УчастникиДействия.Найти(Параметры.ИдентификаторУчастника, "Идентификатор");
	Если СтрУчастника <> Неопределено Тогда
		Параметры.ИдентификаторПункта = СтрУчастника.ИдентификаторПункта;
		Если ЗначениеЗаполнено(СтрУчастника.ИдентификаторПункта) Тогда
			Пункт = ПунктИсполнения(Действие, СтрУчастника.ИдентификаторПункта);
			Если ЗначениеЗаполнено(Пункт) Тогда
				Параметры.Вставить("ОписаниеПункта", Пункт.Описание);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	ДействияСервер.ОтметитьВыполнение(Действие, Параметры);
	ОбновитьРезультатВыполнения(Действие);
	
КонецПроцедуры

// Обновляет результат выполнения действия по результатам исполнителей.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияИсполнения
//
Процедура ОбновитьРезультатВыполнения(Действие) Экспорт
	
	Если РаботаСПроцессамиПоДействиямСобытия.ОбработатьОбновлениеРезультатаВыполненияДействия(
		Действие) Тогда
		
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Состояние = РегистрыСведений.СостоянияДействий.СостояниеДействия(Действие);
	Если Состояние <> Перечисления.СостоянияВыполненияДействий.Выполняется Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеИРезультатПолучены = Ложь;
	
	Результат = Неопределено;
			
	// Если нет исполнителей и действие выполняется, то установим ему состояние пропущенного.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Участники.Участник
		|ИЗ
		|	Справочник.ДействияИсполнения.Участники КАК Участники
		|ГДЕ
		|	Участники.Ссылка = &Действие
		|	И Участники.ФункцияУчастника В (&ФункцииИсполнителей)";
	
	Запрос.УстановитьПараметр("Действие", Действие);
	
	ФункцииИсполнителей = Новый Массив;
	ФункцииИсполнителей.Добавить(Перечисления.ФункцииУчастниковИсполнения.Исполнитель);
	ФункцииИсполнителей.Добавить(Перечисления.ФункцииУчастниковИсполнения.Рассматривающий);
	Запрос.УстановитьПараметр("ФункцииИсполнителей", ФункцииИсполнителей);
	
	РезультатЗапроса = Запрос.Выполнить();
			
	Если РезультатЗапроса.Пустой() Тогда
		Состояние = Перечисления.СостоянияВыполненияДействий.Пропущено;
		
		ТекущаяОбработка = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
		
		Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
		Событие.Обработка = ТекущаяОбработка;
		Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.ПропускДействия;
		Событие.Действие = Действие;
		РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
		
		СостояниеИРезультатПолучены = Истина;
	КонецЕсли;
	
	Если Не СостояниеИРезультатПолучены Тогда
		
		// Если не все выполнили свои задачи (состояния отличны от завершенных), то действие выполняется.
		// Иначе завершено.
		
		Состояние = Перечисления.СостоянияВыполненияДействий.Выполняется;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СостоянияДействий.ИдентификаторУчастника КАК ИдентификаторУчастника,
			|	СостоянияДействий.Участник КАК Участник,
			|	СостоянияДействий.Функция КАК Функция,
			|	СостоянияДействий.Состояние КАК Состояние
			|ИЗ
			|	РегистрСведений.СостоянияДействий КАК СостоянияДействий
			|ГДЕ
			|	СостоянияДействий.Действие = &Действие
			|	И СостоянияДействий.ИдентификаторУчастника <> &ПустойИдентификатор
			|	И НЕ СостоянияДействий.Состояние В (&КонечныеСостояния)";
		
		Запрос.УстановитьПараметр("Действие", Действие);
		Запрос.УстановитьПараметр("ПустойИдентификатор", УникальныйИдентификаторПустой());
		
		КонечныеСостояния = Новый Массив;
		КонечныеСостояния.Добавить(Перечисления.СостоянияВыполненияДействий.Завершено);
		Запрос.УстановитьПараметр("КонечныеСостояния", КонечныеСостояния);
		
		Если Запрос.Выполнить().Пустой() Тогда
			Состояние = Перечисления.СостоянияВыполненияДействий.Завершено;
			Результат = Перечисления.РезультатыИсполнения.Исполнено;
		КонецЕсли;
		
		СостояниеИРезультатПолучены = Истина;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		РегистрыСведений.РезультатыДействий.УстановитьРезультат(Действие, Результат);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Состояние) Тогда
		РегистрыСведений.СостоянияДействий.УстановитьСостояние(Действие, Состояние);
	КонецЕсли;
	
	ОбработкиОбъектовСобытия.ПриЗавершенииДействия(Действие, Состояние);
	
КонецПроцедуры

// Особенная логика, например удаление виз и пр.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияИсполнения
//	Участники  - таблица значений
//
Процедура ПриСбросеРезультатовВыполнения(Действие, Участники) Экспорт
	
	Для Каждого Стр Из Участники Цикл
		
		РегистрыСведений.ИтерацииДействий.ИнкрементироватьНомерИтерации(Действие,
			Стр.Идентификатор);
			
	КонецЦикла;

КонецПроцедуры

// Обработчик события прерывания выполнения выполнения действий, для
// определения особой логики.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияИсполнения
//
Процедура ПриПрерыванииВыполненияДействия(Действие) Экспорт
	
	// Особой логики не предусмотрено.
	
КонецПроцедуры

// Обработчик события удаления результатов выполнения действий, для
// определения особой логики.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияИсполнения
//
Процедура ПриУдаленииРезультатовВыполнения(Действие) Экспорт
	
	// Особой логики не предусмотрено.
	
КонецПроцедуры

#КонецОбласти

#Область ИсторияДействий

// Помещает действие в историю, обрабатывая связанные с ним данные.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияИсполнения - ссылка на действие.
//
Процедура ПоместитьДействиеВИсторию(Действие, ПричинаПрерывания = "") Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		// при прерывании обработки не проверяем блокировку.
		
		ДействиеОбъект = Действие.ПолучитьОбъект();
		ДействиеОбъект.ПомещеноВИсторию = Истина;
		
		ДействияСервер.УстановитьБлокировкиПоПредмету(ДействиеОбъект.Предмет);
		ДействияСервер.УстановитьПризнакЗаписиДействияПриПомещенииВИсторию(ДействиеОбъект);
		ДействиеОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

// Возвращает структуру доступных обработчиков событий
//
// Возвращаемое значение:
//  см. ДействияСервер.ДоступныеОбработчикиМенеджера
Функция ДоступныеОбработчикиМенеджера() Экспорт
	
	ДоступныеОбработчики = ДействияСервер.ДоступныеОбработчикиМенеджера(); 
	ДоступныеОбработчики.ОбработкаПрерывания = Ложь;
	ДоступныеОбработчики.ОбработкаСнятияПаузы = Ложь;
	ДоступныеОбработчики.ОбработкаПостановкиНаПаузу = Ложь;
	ДоступныеОбработчики.ОбработкаИзмененияУчастника = Ложь;
	Возврат ДоступныеОбработчики;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИменаРеквизитовДляЗаполнения()
	
	Возврат "Ссылка, ВидДействия, ВариантИсполнения, Участники, СрокДействия, МоментРазыменованияУчастников, 
	|ПоПунктам, Пункты";
	
КонецФункции

Процедура ЗанестиПодписиРезолюций(ПодписиЭП, РезолюцияОбъект, ЗаписатьРезолюцию)
	
	Если ПодписиЭП = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодписиЭПДокумента = ПодписиЭП.Получить(РезолюцияОбъект.Документ);
	
	Если ПодписиЭПДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДанныеПодписи Из ПодписиЭПДокумента Цикл
		РезолюцияОбъект.Подписана = Истина;
		РезолюцияОбъект.Записать();
		РаботаСЭП.ЗанестиИнформациюОПодписи(РезолюцияОбъект.Ссылка, ДанныеПодписи);
		ЗаписатьРезолюцию = Ложь;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли