#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Выполняет процедуры записи объекта.
//
Процедура ЗаписатьОбъект() Экспорт
	
	Если ДополнительныеСвойства.Свойство("ЭтоНовый") И ДополнительныеСвойства.ЭтоНовый Тогда
		Для Каждого Стр Из Участники Цикл
			РегистрыСведений.ИтерацииДействий.ДобавитьЗапись(Ссылка, 0, Стр.Идентификатор);
		КонецЦикла;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ПоПунктам", ПоПунктам);
	ДействияСервер.ДействияПриЗаписи(ЭтотОбъект, ДополнительныеСвойства);
	
	РаботаСПроцессамиПоОбработкамОбъектовСобытия.ПриЗаписиДействия(ЭтотОбъект);
	РаботаСПроцессамиПоДействиямСобытия.ПриЗаписиДействия(ЭтотОбъект);
	
	Если ДополнительныеСвойства.Свойство("ПредыдущаяПометкаУдаления")
			И ДополнительныеСвойства.ПредыдущаяПометкаУдаления <> ПометкаУдаления Тогда
		
		Для Каждого Рассматривающий Из Рассматривающие() Цикл
			РаботаСРезолюциями.УстановитьПометкуУдаленияРезолюцийПоДокументу(
				Предмет, ПометкаУдаления, Рассматривающий.Идентификатор);
		КонецЦикла;
	КонецЕсли;
	
	Контроль.ПриЗаписиДействияСКонтролером(ЭтотОбъект);
	
	Добавленные =
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "Добавленные", Новый Массив);
	
	Для Каждого Стр Из Добавленные Цикл
		РегистрыСведений.ИтерацииДействий.ДобавитьЗапись(Ссылка, 0, Стр.Идентификатор);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает участников с функций "Рассматривающий".
// 
// Возвращаемое значение:
//  Массив Из СтрокаТабличнойЧасти - Рассматривающие.
//
Функция Рассматривающие() Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ФункцияУчастника", Перечисления.ФункцииУчастниковИсполнения.Рассматривающий);
	Возврат Участники.НайтиСтроки(ПараметрыОтбора);
	
КонецФункции

// Возвращает участников с функций "Участник".
// 
// Возвращаемое значение:
//  Массив Из СтрокаТабличнойЧасти - Участники.
//
Функция Участники() Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ФункцияУчастника", 
		Перечисления.ФункцииУчастниковИсполнения.Исполнитель);
	ПараметрыОтбора.Вставить("ВышестоящийУчастник", 
		ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
		
	Возврат Участники.НайтиСтроки(ПараметрыОтбора);
	
КонецФункции

// Возвращает участников с функций "Участник".
//
// Параметры:
//	ИдентификаторРодителя - УникальныйИдентификатор - Идентификатор вышестоящего участника.
// 
// Возвращаемое значение:
//  Массив Из СтрокаТабличнойЧасти - Участники.
//
Функция ДочерниеУчастники(ИдентификаторРодителя) Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВышестоящийУчастник", ИдентификаторРодителя);
	Возврат Участники.НайтиСтроки(ПараметрыОтбора);
	
КонецФункции

// Возвращает участников с функций "Обрабатывающий результат".
// 
// Возвращаемое значение:
//  Массив Из СтрокаТабличнойЧасти - Участники.
//
Функция УчастникОбрабатывающийРезультат() Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ФункцияУчастника", Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат);
	ПараметрыОтбора.Вставить("ВышестоящийУчастник", ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор());
	Возврат Участники.НайтиСтроки(ПараметрыОтбора);
	
КонецФункции

// Заполняет действие по настройке действия.
// 
// Параметры:
// 	Настройка - СправочникСсылка.НастройкиДействийИсполнения - ссылка на настройку.
// 	ПредметОбъект - ОпределяемыйТип.ПредметДействияОбъект.
//
Процедура ЗаполнитьПоНастройке(Настройка, ПредметОбъект = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Настройка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Настройка) <> Тип("СправочникСсылка.НастройкиДействийИсполнения") Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Настройка типа ""%1"" не подходит для заполнения действия исполнения.
				|Следует актуализировать правила обработки документов.'"),
			ТипЗнч(Настройка));
	КонецЕсли;
	НастройкаДействия = Настройка;
	ПоПунктамНачальное = ПоПунктам;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Настройка,
		"Автор, Важность, ВариантИсполнения, ВидДействия, Участники, МоментРазыменованияУчастников,
		|ПодписыватьРезолюцииЭП, Контролер, ПоПунктам, ОтложенноеНачалоВыполнения");
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты,, "Участники, Автор, Важность");
	
	Если ЗначениеЗаполнено(Реквизиты.Автор) Тогда 
		Автор = Реквизиты.Автор;
	КонецЕсли;
	Если ЗначениеЗаполнено(Реквизиты.Важность) 
		И Реквизиты.Важность <> Перечисления.ВариантыВажностиОбъектов.Обычная Тогда 
		Важность = Реквизиты.Важность;
	КонецЕсли;
	
	Если ПредметОбъект = Неопределено
		И ЗначениеЗаполнено(Предмет) Тогда
		ПредметОбъект = Предмет.ПолучитьОбъект();
	КонецЕсли;
	
	// При переключении исполнения по пунктам, введенные руками пункты и исполнители должны быть удалены
	Если ПоПунктамНачальное <> ПоПунктам Тогда
		Участники.Очистить();
		Пункты.Очистить();
		Выгруженные = Участники.Выгрузить();
	Иначе
		Выгруженные = Участники.Выгрузить();
		Участники.Очистить();
	КонецЕсли;
	
	Источники.Очистить();
	
	// тут добавим только "Обрабатывающий результат"
	Для Каждого Выгруженный Из Выгруженные Цикл
		
		Если Выгруженный.ИзНастройки Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выгруженный.ФункцияУчастника <> Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат Тогда
			Продолжить;
		КонецЕсли;
		
		Участник = Участники.Добавить();
		ЗаполнитьЗначенияСвойств(Участник, Выгруженный);
	КонецЦикла;
	
	РазыменоватьПриСозданииДействия = ДействияСервер.РазыменоватьПриСозданииДействия(МоментРазыменованияУчастников);
	ТаблицаУчастники = Реквизиты.Участники.Выгрузить();
	ТаблицаУчастники.Сортировать("НомерСтроки");
	Для Каждого ВыборкаУчастники Из ТаблицаУчастники Цикл
		
		ЕстьТакойУчастник = Ложь;
		Если ВыборкаУчастники.ФункцияУчастника <> Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат Тогда
			// Дубли ищем только внутри функции
			ЕстьУчастники = Участники.НайтиСтроки(Новый Структура("Участник, ФункцияУчастника, НаименованиеЗадачи, Описание",
				ВыборкаУчастники.Участник, ВыборкаУчастники.ФункцияУчастника,
				ВыборкаУчастники.НаименованиеЗадачи, ВыборкаУчастники.Описание));
			ЕстьТакойУчастник = Не ВыборкаУчастники.Защищенный 
				И (ЕстьУчастники.Количество() > 0);
		КонецЕсли;	
			
		Если Не ЕстьТакойУчастник Тогда
			
			// Проверим функцию ОбрабатывающийРезультат.
			// Если уже есть ОбрабатывающийРезультат - нового не добавляем
			Если ВыборкаУчастники.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат 
				И УчастникОбрабатывающийРезультат().Количество() <> 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			// Проверка условий.
			Если РазыменоватьПриСозданииДействия 
				И Не РаботаСАлгоритмамиПроверки.АлгоритмПоПредметуВыполняется(ПредметОбъект, ВыборкаУчастники.Условие) Тогда
				Продолжить;
			КонецЕсли;
			
			Участник = Участники.Добавить();
			ЗаполнитьЗначенияСвойств(Участник, ВыборкаУчастники);
			Участник.ИзНастройки = Истина;
			Участник.Идентификатор = Новый УникальныйИдентификатор;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Выгруженный Из Выгруженные Цикл
		
		Если Выгруженный.ИзНастройки Тогда
			Продолжить;
		КонецЕсли;
		
		// "Обрабатывающий результат" добавили ранее, тут не добавляем
		Если Выгруженный.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат Тогда
			Продолжить;
		КонецЕсли;
		
		Участник = Участники.Добавить();
		ЗаполнитьЗначенияСвойств(Участник, Выгруженный);
	КонецЦикла;
	
	Если РазыменоватьПриСозданииДействия Тогда 
		Разыменовать(ПредметОбъект,, Выгруженные);
	КонецЕсли;
	
КонецПроцедуры

// Разыменовывает автоподстановки и контейнеры в составе участников.
//
// Параметры:
// 	ПредметОбъект - ОпределяемыйТип.ПредметДействияОбъект.
// 	ЭтоЗапуск - Булево - признак того, что разыменование происходит в рамках запуска в обрабтку.
// 	ВыгруженныеПоНастройке - ТаблицаЗначений - участники из настройки действия.
//
Процедура Разыменовать(ПредметОбъект = Неопределено, ЭтоЗапуск = Ложь, ВыгруженныеПоНастройке = Неопределено) Экспорт
	
	Если ПредметОбъект = Неопределено
		И ЗначениеЗаполнено(Предмет) Тогда
		ПредметОбъект = Предмет.ПолучитьОбъект();
	КонецЕсли;
	
	МенеджерНастройкиДействия = ОбщегоНазначения.МенеджерОбъектаПоСсылке(НастройкаДействия);
	УчастникиНастройки = МенеджерНастройкиДействия.ВсеУчастники(НастройкаДействия);
	
	Выгруженные = Участники.Выгрузить();
	Участники.Очистить();
	
	РазыменоватьПриЗапускеДокументаВОбработку = ДействияСервер.РазыменоватьПриЗапускеДокументаВОбработку(
		МоментРазыменованияУчастников);
	РазыменоватьПередВыполнениемДействия = ДействияСервер.РазыменоватьПередВыполнениемДействия(
		МоментРазыменованияУчастников);
	
	Контейнеры = Новый Массив;
	Для Каждого Выгруженный Из Выгруженные Цикл
		
		Если ТипЗнч(Выгруженный.Участник) = Тип("СправочникСсылка.СтруктураПредприятия")
			Или ТипЗнч(Выгруженный.Участник) = Тип("СправочникСсылка.РабочиеГруппы")
			Или ТипЗнч(Выгруженный.Участник) = Тип("СправочникСсылка.ПроектыКонтейнеры")
			Или ТипЗнч(Выгруженный.Участник) = Тип("СправочникСсылка.ПодразделенияКонтейнеры")
			Тогда
			Контейнеры.Добавить(Выгруженный.Участник);
		КонецЕсли;	
		
	КонецЦикла;
	
	СоответствиеСотрудниковВКонтейнерах = Новый Соответствие;
	Если Контейнеры.Количество() <> 0 Тогда
		СоответствиеСотрудниковВКонтейнерах = ДействияСервер.ДействующиеСотрудникиВКонтейнерах(Контейнеры);
	КонецЕсли;	
	
	Для Каждого Выгруженный Из Выгруженные Цикл
		
		// Проверка условий.
		Если (РазыменоватьПередВыполнениемДействия Или РазыменоватьПриЗапускеДокументаВОбработку)
			И Не РаботаСАлгоритмамиПроверки.АлгоритмПоПредметуВыполняется(
				ПредметОбъект, Выгруженный.Условие) Тогда
			Продолжить;
		КонецЕсли;
		
		ТребуетсяОпределитьФункциюУчастника = 
			(Выгруженный.ФункцияУчастника 
			= Перечисления.ФункцииУчастниковИсполнения.АвтоопределениеФункцииУчастника);
		
		Если ТипЗнч(Выгруженный.Участник) = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов") Тогда
			
			ДанныеРазыменования = ДействияСервер.РазыменоватьАвтоподстановку(
				Выгруженный.Участник, 
				ПредметОбъект,
				Выгруженный.ФункцияУчастника, 
				Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат,
				Истина);
				
			Для Каждого РазыменованныйУчастник Из ДанныеРазыменования Цикл
				
				// Если при исполнении не по пунктам используется АП с функцией участника,
				// то они фильтруются тут, до запрошенной функции.
				Если Не ПоПунктам
					И ТипЗнч(РазыменованныйУчастник) = Тип("Структура")
					И РазыменованныйУчастник.Свойство("ФункцияУчастника")
					И Выгруженный.ФункцияУчастника <> РазыменованныйУчастник.ФункцияУчастника Тогда
					Продолжить;
				КонецЕсли;
				
				Участник = Участники.Добавить();
				ЗаполнитьЗначенияСвойств(Участник, Выгруженный);
				Участник.Идентификатор = Новый УникальныйИдентификатор;
				
				Если ТипЗнч(РазыменованныйУчастник) = Тип("Структура") Тогда
					
					ЗаполнитьЗначенияСвойств(Участник, РазыменованныйУчастник);
					Если РазыменованныйУчастник.Свойство("РольИсполнителя") Тогда
						Участник.Участник = РазыменованныйУчастник.РольИсполнителя;
					Иначе
						Участник.Участник = РазыменованныйУчастник.Исполнитель;
					КонецЕсли;
					
					Если ПоПунктам И РазыменованныйУчастник.Свойство("ДанныеПункта") Тогда
						
						// При исполнении по пунктам описание пункта придёт из пункта.
						Участник.Описание = ""; 
						
						ДанныеПункта = РазыменованныйУчастник.ДанныеПункта;
						
						Пункт = Пункты.Найти(ДанныеПункта.Идентификатор, "Идентификатор");
						Если Пункт = Неопределено Тогда
							
							Пункт = Пункты.Добавить();
							Пункт.Идентификатор = ДанныеПункта.Идентификатор;
							
						КонецЕсли;
						
						Пункт.Автор = ДанныеПункта.Автор;
						Пункт.Контролер = Сотрудники.ОсновнойСотрудникПользователя(ДанныеПункта.Контролер);
						Пункт.Номер = ДанныеПункта.Номер;
						Пункт.Описание = ДанныеПункта.Описание;
						Пункт.Срок = ДанныеПункта.Срок;
						
					Иначе
						
						Участник.ИдентификаторПункта = УникальныйИдентификаторПустой();
						
					КонецЕсли;
					
				Иначе
					
					Участник.Участник = РазыменованныйУчастник;
						
				КонецЕсли;
				
				ДействияСервер.ДобавитьИсточник(
					ЭтотОбъект,
					"Участники.Участник",
					Участник.Идентификатор,
					Выгруженный.Участник);
				
			КонецЦикла;	
			
		ИначеЕсли ТипЗнч(Выгруженный.Участник) = Тип("СправочникСсылка.СтруктураПредприятия")
			Или ТипЗнч(Выгруженный.Участник) = Тип("СправочникСсылка.РабочиеГруппы")
			Или ТипЗнч(Выгруженный.Участник) = Тип("СправочникСсылка.ПроектыКонтейнеры")
			Или ТипЗнч(Выгруженный.Участник) = Тип("СправочникСсылка.ПодразделенияКонтейнеры") Тогда
			
			СтрокиСотрудники = СоответствиеСотрудниковВКонтейнерах[Выгруженный.Участник];
			
			Если СтрокиСотрудники <> Неопределено Тогда
				Для Каждого Сотрудник Из СтрокиСотрудники Цикл
					
					Если Выгруженный.ФункцияУчастника 
						= Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат 
						И УчастникОбрабатывающийРезультат().Количество() <> 0 Тогда
						Продолжить;
					КонецЕсли;	
					
					Участник = Участники.Добавить();
					ЗаполнитьЗначенияСвойств(Участник, Выгруженный);
					Участник.Участник = Сотрудник;
					Участник.Идентификатор = Новый УникальныйИдентификатор;
					
					ДействияСервер.ДобавитьИсточник(
						ЭтотОбъект, "Участники.Участник", Участник.Идентификатор, Выгруженный.Участник);
						
				КонецЦикла;
			КонецЕсли;
				
		Иначе
			
			ЕстьТакойУчастник = Ложь;
			Если Выгруженный.ФункцияУчастника 
				<> Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат Тогда
					
				Если ПоПунктам Тогда
					ЕстьУчастники = Участники.НайтиСтроки(Новый Структура("Участник, ИдентификаторПункта",
						Выгруженный.Участник, Выгруженный.ИдентификаторПункта));
					ЕстьТакойУчастник = Не Выгруженный.Защищенный 
						И (ЕстьУчастники.Количество() > 0);
				КонецЕсли;
				
			КонецЕсли;	
				
			Если Не ЕстьТакойУчастник Тогда
				
				Если Выгруженный.ФункцияУчастника 
					= Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат 
					И УчастникОбрабатывающийРезультат().Количество() <> 0 
					И Не ПоПунктам Тогда
					Продолжить;
				КонецЕсли;	
				
				Участник = Участники.Добавить();
				ЗаполнитьЗначенияСвойств(Участник, Выгруженный);
				Если ТребуетсяОпределитьФункциюУчастника Тогда
					Участник.ФункцияУчастника = Неопределено;
				КонецЕсли;
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;
	
	ДействияСервер.РазыменоватьАвтора(ЭтотОбъект, ПредметОбъект);
	
	// Разыменовать контролера
	Если ТипЗнч(Контролер) = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов") Тогда
		ЗначениеАвтоподстановки = ШаблоныДокументов.ПолучитьЗначениеАвтоподстановки(
			Контролер, ПредметОбъект);
		Если ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.Сотрудники") 
			Или ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			ДействияСервер.ДобавитьИсточник(
				ЭтотОбъект, "Контролер", Неопределено, Контролер,
				ЗначениеАвтоподстановки);
			Контролер = ЗначениеАвтоподстановки;
			
		ИначеЕсли ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.Пользователи") Тогда
			ЗначениеАвтоподстановки = Сотрудники.ОсновнойСотрудникПользователя(
				ЗначениеАвтоподстановки);
			ДействияСервер.ДобавитьИсточник(
				ЭтотОбъект, "Контролер", Неопределено, Контролер,
				ЗначениеАвтоподстановки);
			Контролер = ЗначениеАвтоподстановки;
			
		ИначеЕсли ТипЗнч(ЗначениеАвтоподстановки) = Тип("СправочникСсылка.ФактическиеИсполнители") Тогда
			ЗначениеАвтоподстановки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеАвтоподстановки, "Факт"); 
			ДействияСервер.ДобавитьИсточник(
				ЭтотОбъект, "Контролер", Неопределено, Контролер,
				ЗначениеАвтоподстановки);
			Контролер = ЗначениеАвтоподстановки;
			
		ИначеЕсли Не ЗначениеЗаполнено(ЗначениеАвтоподстановки) Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось разыменовать автоподстановку ""%1"" Контролера действия ""%2"" до конкретного сотрудника.
				|Проверьте автоподстановку Контролера действия, либо укажите конкретного сотрудника в качестве Контролера.'"),
				Контролер, ВидДействия);
			
		КонецЕсли;
	КонецЕсли;
	
	// Удаление дублей участников.
	ДанныеУчастниковДляУдаленияДублей = Новый Массив;
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(СтрокаУчастника.ФункцияУчастника) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеУчастникаДляУдаленияДублей = ДействияСервер.ДанныеУчастникаДляУдаленияДублей();
		ДанныеУчастникаДляУдаленияДублей.Участник = СтрокаУчастника.Участник;
		ДанныеУчастникаДляУдаленияДублей.СтрокаУчастника = СтрокаУчастника;
		Если ПоПунктам Тогда
			ДанныеУчастникаДляУдаленияДублей.ИдентификаторГруппы = СтрокаУчастника.ИдентификаторПункта;
		Иначе
			ДанныеУчастникаДляУдаленияДублей.ИдентификаторГруппы = СтрокаУчастника.ФункцияУчастника;
		КонецЕсли;
		
		ДанныеУчастниковДляУдаленияДублей.Добавить(ДанныеУчастникаДляУдаленияДублей);
		
	КонецЦикла;
	
	ДействияСервер.УдалитьДублиУчастников(ДанныеУчастниковДляУдаленияДублей, Участники);
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ДействияСервер.ЗаписатьВХодОбработкиОтличия(ЭтотОбъект, Выгруженные, Участники, 
			НСтр("ru = 'Разыменовать'"));
	КонецЕсли;	
	
КонецПроцедуры

// Заменяет участника действия
//
// Параметры:
//	Идентификатор - УникальныйИдентификатор - идентификатор участника
//	НовыйУчастник - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли - новый участник процесса
//	Причина - Строка - описание причины замены
//	Автор - Неопределено, СправочникСсылка.Сотрудники - сотрудник, перенаправивший задачу
//
Процедура ЗаменитьУчастника(Идентификатор, НовыйУчастник, Причина = "", Автор = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		ВызватьИсключение НСтр("ru = 'Замена участника возможна только после записи действия.'");
	КонецЕсли;
	
	ПрежнийУчастник = Неопределено;
	
	СтрокаУчастника = Участники.Найти(Идентификатор, "Идентификатор");
	Если СтрокаУчастника <> Неопределено И СтрокаУчастника.Участник <> НовыйУчастник Тогда
		ПрежнийУчастник = СтрокаУчастника.Участник;
		СтрокаУчастника.Участник = НовыйУчастник;
		
		// Отметим защищенными участников, если новый участник уже есть действии.
		СтрокиУчастника = Участники.НайтиСтроки(
			Новый Структура("Участник", НовыйУчастник));
		Если СтрокиУчастника.Количество() > 1 Тогда
			// Уберем "обрабатывающих" результат
			МассивДублей = Новый Массив;
			Для Каждого СтрУчастник Из СтрокиУчастника Цикл
				Если СтрУчастник.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Исполнитель 
					Или СтрУчастник.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.Рассматривающий Тогда
					МассивДублей.Добавить(СтрУчастник);
				КонецЕсли;
			КонецЦикла;
			
			Если МассивДублей.Количество() > 1 Тогда
				Для Каждого СтрУчастник Из МассивДублей Цикл
					Если Не СтрУчастник.Защищенный Тогда
						СтрУчастник.Защищенный = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяОбработка = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Ссылка);
	
	Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
	Событие.Обработка = ТекущаяОбработка;
	Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.ИзменениеУчастников;
	Событие.Действие = Ссылка;
	Событие.Описание = СтрШаблон(НСтр("ru = 'Участник %1 заменен на %2. Причина: %3'"), ПрежнийУчастник, НовыйУчастник, Причина);
	Событие.ИдентификаторУчастника = Идентификатор;
	Событие.Участник = ПрежнийУчастник;
	Событие.Функция = СтрокаУчастника.ФункцияУчастника;
	Событие.Сотрудник = Автор;
	РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
	
КонецПроцедуры

// Устанавливает срок исполнения участнику.
//
// Параметры:
//  Идентификатор - УникальныйИдентификатор - Идентификатора участника в действии.
//  ВариантУстановкиСрока - ПеречислениеСсылка.ВариантыУстановкиСрокаИсполнения
//  Срок - Дата - срок участника точной датой.
//  СрокДни, СрокЧасы, СрокМинуты - Число - относительный срок участника.
//
Процедура УстановитьСрокИсполненияУчастнику(Идентификатор, ВариантУстановкиСрока,
	Срок, СрокДни, СрокЧасы, СрокМинуты) Экспорт
	
	СтрокаУчастника = Участники.Найти(Идентификатор, "Идентификатор");
	
	Если СтрокаУчастника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаУчастника.ВариантУстановкиСрока = ВариантУстановкиСрока;
	СтрокаУчастника.Срок = Срок;
	СтрокаУчастника.СрокДни = СрокДни;
	СтрокаУчастника.СрокЧасы = СрокЧасы;
	СтрокаУчастника.СрокМинуты = СрокМинуты;
	
КонецПроцедуры

// Помечает/снимает пометку на удаление резолюций по документу.
//
// Параметры:
//	Документ - СправочникСсылка.ДокументыПредприятия - Документ, резолюции которого необходимо пометить на удаление.
//	ИдентификаторУчастника - УникальныйИдентификатор - Идентификатор участника.
//	Пометка - Булево - Значение, которое нужно установить.
//
Процедура ПометитьРезолюцииНаУдаление(Документ, ИдентификаторУчастника, Пометка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Резолюции = РаботаСРезолюциями.ПолучитьРезолюции(Документ, Ложь,,, ИдентификаторУчастника);
	Для Ит = 0 По Резолюции.Количество() - 1 Цикл
		РезолюцияДокумента = Резолюции.Получить(Ит);
		РаботаСРезолюциями.УстановитьПометкуНаУдаление(РезолюцияДокумента, Пометка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Ссылка.Пустая() Тогда
		СтарыеРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Ссылка, "Контролер, Пункты");
		
		ДополнительныеСвойства.Вставить("СтарыйКонтролер", 
			СтарыеРеквизиты.Контролер);
		ДополнительныеСвойства.Вставить("СтароеСостояниеДействия", 
			РегистрыСведений.СостоянияДействий.СостояниеДействия(Ссылка));
		СтарыеПункты = СтарыеРеквизиты.Пункты.Выгрузить();
		СтарыеПункты.Сортировать("НомерСтроки");
		ДополнительныеСвойства.Вставить("СтарыеПункты", 
			СтарыеПункты);
	КонецЕсли;
	
	ДействияСервер.ДействияПередЗаписью(ЭтотОбъект);
	
	РаботаСПроцессамиПоОбработкамОбъектовСобытия.ПередЗаписьюДействия(ЭтотОбъект);
	РаботаСПроцессамиПоДействиямСобытия.ПередЗаписьюДействия(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда		
		Возврат;
	КонецЕсли;
	
	ДействияСервер.ЗаписатьДействие(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ДействияСобытия.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	Контролер = Справочники.Сотрудники.ПустаяСсылка();
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") 
		И ДанныеЗаполнения.Свойство("Настройка") Тогда
		ПредметОбъект = Неопределено;
		ДанныеЗаполнения.Свойство("ПредметОбъект", ПредметОбъект);
		ЗаполнитьПоНастройке(ДанныеЗаполнения.Настройка, ПредметОбъект);
	КонецЕсли;
	
	// Перенесем Срок исполнения из предмета, если не задано в настройках
	СрокИсполненияПредмета = Справочники.ДействияИсполнения.СрокИсполненияПредмета(Предмет);
	Если ЗначениеЗаполнено(СрокИсполненияПредмета) Тогда
		Для Каждого СтрУчастник Из Участники Цикл
			Если Не ЗначениеЗаполнено(СтрУчастник.Срок) 
				И Не ЗначениеЗаполнено(СтрУчастник.СрокДни)
				И Не ЗначениеЗаполнено(СтрУчастник.СрокЧасы)
				И Не ЗначениеЗаполнено(СтрУчастник.СрокМинуты) Тогда
				СтрУчастник.Срок = СрокИсполненияПредмета;
				СтрУчастник.ВариантУстановкиСрока = Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли