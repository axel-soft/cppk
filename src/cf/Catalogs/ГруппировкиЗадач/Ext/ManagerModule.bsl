#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает группировку по автору.
//
// Параметры:
//  ОсновнаяГруппировка - СправочникСсылка.ГруппировкиЗадач.
//  Автор - ПеречислениеСсылка.ОтборыПоУчастникамЗадач, СправочникСсылка.Сотрудники.
// 
// Возвращаемое значение:
//  СправочникСсылка.ГруппировкиЗадач - Группировка по автору.
//
Функция ГруппировкаПоАвтору(ОсновнаяГруппировка, Автор) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ГруппировкаПоАвтору = НайтиПоРеквизиту(
		Метаданные.Справочники.ГруппировкиЗадач.Реквизиты.Автор.Имя,
		Автор,
		ОсновнаяГруппировка);
	Если ЗначениеЗаполнено(ГруппировкаПоАвтору) Тогда
		Возврат ГруппировкаПоАвтору;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ГруппировкиЗадач");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ОсновнаяГруппировка);
		Блокировка.Заблокировать();
		
		ГруппировкаПоАвтору = НайтиПоРеквизиту(
			Метаданные.Справочники.ГруппировкиЗадач.Реквизиты.Автор.Имя,
			Автор,
			ОсновнаяГруппировка);
		Если Не ЗначениеЗаполнено(ГруппировкаПоАвтору) Тогда
			
			ОсновнаяГруппировкаОбъект = ОсновнаяГруппировка.ПолучитьОбъект();
			ГруппировкаПоАвторуОбъект = ОсновнаяГруппировкаОбъект.Скопировать();
			ГруппировкаПоАвторуОбъект.Автор = Автор;
			ГруппировкаПоАвторуОбъект.Родитель = ОсновнаяГруппировка;
			ГруппировкаПоАвторуОбъект.Записать();
			
			ГруппировкаПоАвтору = ГруппировкаПоАвторуОбъект.Ссылка;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ГруппировкаПоАвтору;
	
КонецФункции

// Возвращает группировку по виду действия.
//
// Параметры:
//  ОсновнаяГруппировка - СправочникСсылка.ГруппировкиЗадач.
//  ВидДействия - СправочникСсылка.ВидыДействийЗадач.
// 
// Возвращаемое значение:
//  СправочникСсылка.ГруппировкиЗадач - Группировка по виду действия.
//
Функция ГруппировкаПоВидуДействия(ОсновнаяГруппировка, ВидДействия) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ГруппировкаПоВидуДействия = НайтиПоРеквизиту(
		Метаданные.Справочники.ГруппировкиЗадач.Реквизиты.ВидДействия.Имя,
		ВидДействия,
		ОсновнаяГруппировка);
	Если ЗначениеЗаполнено(ГруппировкаПоВидуДействия) Тогда
		Возврат ГруппировкаПоВидуДействия;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ГруппировкиЗадач");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ОсновнаяГруппировка);
		Блокировка.Заблокировать();
		
		ГруппировкаПоВидуДействия = НайтиПоРеквизиту(
			Метаданные.Справочники.ГруппировкиЗадач.Реквизиты.ВидДействия.Имя,
			ВидДействия,
			ОсновнаяГруппировка);
		Если Не ЗначениеЗаполнено(ГруппировкаПоВидуДействия) Тогда
			
			ОсновнаяГруппировкаОбъект = ОсновнаяГруппировка.ПолучитьОбъект();
			ГруппировкаПоВидуДействияОбъект = ОсновнаяГруппировкаОбъект.Скопировать();
			ГруппировкаПоВидуДействияОбъект.ВидДействия = ВидДействия;
			ГруппировкаПоВидуДействияОбъект.Родитель = ОсновнаяГруппировка;
			ГруппировкаПоВидуДействияОбъект.Записать();
			
			ГруппировкаПоВидуДействия = ГруппировкаПоВидуДействияОбъект.Ссылка;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ГруппировкаПоВидуДействия;
	
КонецФункции

// Возвращает группировку по виду задачи.
//
// Параметры:
//  ОсновнаяГруппировка - СправочникСсылка.ГруппировкиЗадач.
//  ВидЗадачи - ВидЗадачи.
// 
// Возвращаемое значение:
//  СправочникСсылка.ГруппировкиЗадач - Группировка по виду задачи.
//
Функция ГруппировкаПоВидуЗадачи(ОсновнаяГруппировка, ВидЗадачи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ГруппировкаПоВидуЗадачи = НайтиПоРеквизиту(
		Метаданные.Справочники.ГруппировкиЗадач.Реквизиты.ВидЗадачи.Имя,
		ВидЗадачи,
		ОсновнаяГруппировка);
	Если ЗначениеЗаполнено(ГруппировкаПоВидуЗадачи) Тогда
		Возврат ГруппировкаПоВидуЗадачи;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ГруппировкиЗадач");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ОсновнаяГруппировка);
		Блокировка.Заблокировать();
		
		ГруппировкаПоВидуЗадачи = НайтиПоРеквизиту(
			Метаданные.Справочники.ГруппировкиЗадач.Реквизиты.ВидЗадачи.Имя,
			ВидЗадачи,
			ОсновнаяГруппировка);
		Если Не ЗначениеЗаполнено(ГруппировкаПоВидуЗадачи) Тогда
			
			ОсновнаяГруппировкаОбъект = ОсновнаяГруппировка.ПолучитьОбъект();
			ГруппировкаПоВидуДействияОбъект = ОсновнаяГруппировкаОбъект.Скопировать();
			ГруппировкаПоВидуДействияОбъект.ВидЗадачи = ВидЗадачи;
			ГруппировкаПоВидуДействияОбъект.Родитель = ОсновнаяГруппировка;
			ГруппировкаПоВидуДействияОбъект.Записать();
			
			ГруппировкаПоВидуЗадачи = ГруппировкаПоВидуДействияОбъект.Ссылка;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ГруппировкаПоВидуЗадачи;
	
КонецФункции

// Возвращает группировку по виду приложения.
//
// Параметры:
//  ОсновнаяГруппировка - СправочникСсылка.ГруппировкиЗадач.
//  ВидПриложения - ОпределяемыйТип.ВидПриложенияЗадач.
// 
// Возвращаемое значение:
//  СправочникСсылка.ГруппировкиЗадач - Группировка по виду приложения.
//
Функция ГруппировкаПоВидуПриложения(ОсновнаяГруппировка, ВидПриложения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ГруппировкаПоВидуПриложения = НайтиПоРеквизиту(
		Метаданные.Справочники.ГруппировкиЗадач.Реквизиты.ВидПриложения.Имя,
		ВидПриложения,
		ОсновнаяГруппировка);
	Если ЗначениеЗаполнено(ГруппировкаПоВидуПриложения) Тогда
		Возврат ГруппировкаПоВидуПриложения;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ГруппировкиЗадач");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ОсновнаяГруппировка);
		Блокировка.Заблокировать();
		
		ГруппировкаПоВидуПриложения = НайтиПоРеквизиту(
			Метаданные.Справочники.ГруппировкиЗадач.Реквизиты.ВидПриложения.Имя,
			ВидПриложения,
			ОсновнаяГруппировка);
		Если Не ЗначениеЗаполнено(ГруппировкаПоВидуПриложения) Тогда
			
			ОсновнаяГруппировкаОбъект = ОсновнаяГруппировка.ПолучитьОбъект();
			ГруппировкаПоВидуПриложенияОбъект = ОсновнаяГруппировкаОбъект.Скопировать();
			ГруппировкаПоВидуПриложенияОбъект.ВидПриложения = ВидПриложения;
			ГруппировкаПоВидуПриложенияОбъект.Родитель = ОсновнаяГруппировка;
			ГруппировкаПоВидуПриложенияОбъект.Записать();
			
			ГруппировкаПоВидуПриложения = ГруппировкаПоВидуПриложенияОбъект.Ссылка;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ГруппировкаПоВидуПриложения;
	
КонецФункции

// Возвращает группировки по исполнителям.
//
// Параметры:
//  ОсновнаяГруппировка - СправочникСсылка.ГруппировкиЗадач.
//  Исполнители - Массив из ПеречислениеСсылка.ОтборыПоУчастникамЗадач, СправочникСсылка.СтруктураПредприятия, СправочникСсылка.Сотрудники.
//  ИсполнительРазыменован - Булево.
// 
// Возвращаемое значение:
//  Соответствие - Группировки по исполнителям.
//   * Ключ - ПеречислениеСсылка.ОтборыПоУчастникамЗадач, СправочникСсылка.СтруктураПредприятия, СправочникСсылка.Сотрудники - Исполнитель.
//   * Значение - Структура - Группировка по исполнителю.
//    ** Группировка - СправочникСсылка.ГруппировкиЗадач.
//    ** Представление - Строка.
//
Функция ГруппировкиПоИсполнителям(ОсновнаяГруппировка, Исполнители, ИсполнительРазыменован) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ГруппировкиПоИсполнителям = Новый Соответствие;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ГруппировкиЗадач.Ссылка КАК Группировка,
		|	ГруппировкиЗадач.Исполнитель КАК Исполнитель,
		|	ГруппировкиЗадач.Представление КАК Представление
		|ИЗ
		|	Справочник.ГруппировкиЗадач КАК ГруппировкиЗадач
		|ГДЕ
		|	ГруппировкиЗадач.Родитель = &Родитель
		|	И ГруппировкиЗадач.Исполнитель В (&Исполнители)
		|	И ГруппировкиЗадач.ИсполнительРазыменован = &ИсполнительРазыменован");
	
	Запрос.УстановитьПараметр("Родитель", ОсновнаяГруппировка);
	Запрос.УстановитьПараметр("Исполнители", Исполнители);
	Запрос.УстановитьПараметр("ИсполнительРазыменован", ИсполнительРазыменован);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ГруппировкиПоИсполнителям[Выборка.Исполнитель] =
			Новый Структура("Группировка, Представление", Выборка.Группировка, Выборка.Представление);
		
	КонецЦикла;
	
	Для Каждого Исполнитель Из Исполнители Цикл
		
		Если ГруппировкиПоИсполнителям[Исполнитель] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		//@skip-check query-in-loop
		Группировка = ГруппировкаПоИсполнителю(ОсновнаяГруппировка, Исполнитель, ИсполнительРазыменован);
		
		ГруппировкиПоИсполнителям[Исполнитель] =
			Новый Структура("Группировка, Представление", Группировка, Строка(Группировка));
		
	КонецЦикла;
	
	Возврат ГруппировкиПоИсполнителям;
	
КонецФункции

// Возвращает группировку по исполнителю.
//
// Параметры:
//  ОсновнаяГруппировка - СправочникСсылка.ГруппировкиЗадач.
//  Исполнитель - ПеречислениеСсылка.ОтборыПоУчастникамЗадач, СправочникСсылка.СтруктураПредприятия, СправочникСсылка.Сотрудники.
//  ИсполнительРазыменован - Булево.
// 
// Возвращаемое значение:
//  СправочникСсылка.ГруппировкиЗадач - Группировка по исполнителю.
//
Функция ГруппировкаПоИсполнителю(ОсновнаяГруппировка, Исполнитель, ИсполнительРазыменован) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ГруппировкиЗадач.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ГруппировкиЗадач КАК ГруппировкиЗадач
		|ГДЕ
		|	ГруппировкиЗадач.Родитель = &Родитель
		|	И ГруппировкиЗадач.Исполнитель = &Исполнитель
		|	И ГруппировкиЗадач.ИсполнительРазыменован = &ИсполнительРазыменован");
	
	Запрос.УстановитьПараметр("Родитель", ОсновнаяГруппировка);
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	Запрос.УстановитьПараметр("ИсполнительРазыменован", ИсполнительРазыменован);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ГруппировкаПоИсполнителю = ?(Выборка.Следующий(),
		Выборка.Ссылка,
		Неопределено);
	Если ЗначениеЗаполнено(ГруппировкаПоИсполнителю) Тогда
		Возврат ГруппировкаПоИсполнителю;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ГруппировкиЗадач");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ОсновнаяГруппировка);
		Блокировка.Заблокировать();
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ГруппировкаПоИсполнителю = ?(Выборка.Следующий(),
			Выборка.Ссылка,
			Неопределено);
		Если Не ЗначениеЗаполнено(ГруппировкаПоИсполнителю) Тогда
			
			ОсновнаяГруппировкаОбъект = ОсновнаяГруппировка.ПолучитьОбъект();
			ГруппировкаПоИсполнителюОбъект = ОсновнаяГруппировкаОбъект.Скопировать();
			
			Если МультиязычностьСервер.ИспользуетсяПервыйДополнительныйЯзык() Тогда
				ГруппировкаПоИсполнителюОбъект.НаименованиеЯзык1 = "";
			КонецЕсли;
			
			ГруппировкаПоИсполнителюОбъект.Исполнитель = Исполнитель;
			ГруппировкаПоИсполнителюОбъект.ИсполнительРазыменован = ИсполнительРазыменован;
			ГруппировкаПоИсполнителюОбъект.ТипОтбора = Перечисления.ТипыОтбораГруппировокЗадач.ДействияЗадач;
			ГруппировкаПоИсполнителюОбъект.Родитель = ОсновнаяГруппировка;
			ГруппировкаПоИсполнителюОбъект.Записать();
			
			ГруппировкаПоИсполнителю = ГруппировкаПоИсполнителюОбъект.Ссылка;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ГруппировкаПоИсполнителю;
	
КонецФункции

// Возвращает группировку по проекту.
//
// Параметры:
//  ОсновнаяГруппировка - СправочникСсылка.ГруппировкиЗадач.
//  Проект - СправочникСсылка.Проекты.
// 
// Возвращаемое значение:
//  СправочникСсылка.ГруппировкиЗадач - Группировка по проекту.
//
Функция ГруппировкаПоПроекту(ОсновнаяГруппировка, Проект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	БезПроекта = Не ЗначениеЗаполнено(Проект);
	
	Если БезПроекта Тогда
		ГруппировкаПоПроекту = НайтиПоРеквизиту(
			Метаданные.Справочники.ГруппировкиЗадач.Реквизиты.БезПроекта.Имя,
			Истина,
			ОсновнаяГруппировка);
	Иначе
		ГруппировкаПоПроекту = НайтиПоРеквизиту(
			Метаданные.Справочники.ГруппировкиЗадач.Реквизиты.Проект.Имя,
			Проект,
			ОсновнаяГруппировка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГруппировкаПоПроекту) Тогда
		Возврат ГруппировкаПоПроекту;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		БезПроекта = Не ЗначениеЗаполнено(Проект);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ГруппировкиЗадач");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ОсновнаяГруппировка);
		Блокировка.Заблокировать();
		
		Если БезПроекта Тогда
			ГруппировкаПоПроекту = НайтиПоРеквизиту(
				Метаданные.Справочники.ГруппировкиЗадач.Реквизиты.БезПроекта.Имя,
				Истина,
				ОсновнаяГруппировка);
		Иначе
			ГруппировкаПоПроекту = НайтиПоРеквизиту(
				Метаданные.Справочники.ГруппировкиЗадач.Реквизиты.Проект.Имя,
				Проект,
				ОсновнаяГруппировка);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ГруппировкаПоПроекту) Тогда
			
			ОсновнаяГруппировкаОбъект = ОсновнаяГруппировка.ПолучитьОбъект();
			ГруппировкаПоПроектуОбъект = ОсновнаяГруппировкаОбъект.Скопировать();
			ГруппировкаПоПроектуОбъект.БезПроекта = БезПроекта;
			ГруппировкаПоПроектуОбъект.Проект = Проект;
			ГруппировкаПоПроектуОбъект.Родитель = ОсновнаяГруппировка;
			ГруппировкаПоПроектуОбъект.Записать();
			
			ГруппировкаПоПроекту = ГруппировкаПоПроектуОбъект.Ссылка;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ГруппировкаПоПроекту;
	
КонецФункции

// Возвращает группировку по типу приложения.
//
// Параметры:
//  ОсновнаяГруппировка - СправочникСсылка.ГруппировкиЗадач.
//  ТипПриложения - ПеречислениеСсылка.ТипыПриложенийЗадач.
// 
// Возвращаемое значение:
//  СправочникСсылка.ГруппировкиЗадач - Группировка по типу приложения.
//
Функция ГруппировкаПоТипуПриложения(ОсновнаяГруппировка, ТипПриложения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ГруппировкаПоТипуПриложения = НайтиПоРеквизиту(
		Метаданные.Справочники.ГруппировкиЗадач.Реквизиты.ТипПриложения.Имя,
		ТипПриложения,
		ОсновнаяГруппировка);
	Если ЗначениеЗаполнено(ГруппировкаПоТипуПриложения) Тогда
		Возврат ГруппировкаПоТипуПриложения;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ГруппировкиЗадач");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ОсновнаяГруппировка);
		Блокировка.Заблокировать();
		
		ГруппировкаПоТипуПриложения = НайтиПоРеквизиту(
			Метаданные.Справочники.ГруппировкиЗадач.Реквизиты.ТипПриложения.Имя,
			ТипПриложения,
			ОсновнаяГруппировка);
		Если Не ЗначениеЗаполнено(ГруппировкаПоТипуПриложения) Тогда
			
			ОсновнаяГруппировкаОбъект = ОсновнаяГруппировка.ПолучитьОбъект();
			ГруппировкаПоТипуПриложенияОбъект = ОсновнаяГруппировкаОбъект.Скопировать();
			ГруппировкаПоТипуПриложенияОбъект.ТипПриложения = ТипПриложения;
			ГруппировкаПоТипуПриложенияОбъект.Родитель = ОсновнаяГруппировка;
			ГруппировкаПоТипуПриложенияОбъект.Записать();
			
			ГруппировкаПоТипуПриложения = ГруппировкаПоТипуПриложенияОбъект.Ссылка;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ГруппировкаПоТипуПриложения;
	
КонецФункции

// Возвращает группировку по флагу.
//
// Параметры:
//  ОсновнаяГруппировка - СправочникСсылка.ГруппировкиЗадач.
//  Флаг - ПеречислениеСсылка.ФлагиОбъектов.
// 
// Возвращаемое значение:
//  СправочникСсылка.ГруппировкиЗадач - Группировка по флагу.
//
Функция ГруппировкаПоФлагу(ОсновнаяГруппировка, Флаг) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	БезФлага = Не ЗначениеЗаполнено(Флаг);
	
	Если БезФлага Тогда
		ГруппировкаПоФлагу = НайтиПоРеквизиту(
			Метаданные.Справочники.ГруппировкиЗадач.Реквизиты.БезФлага.Имя,
			Истина,
			ОсновнаяГруппировка);
	Иначе
		ГруппировкаПоФлагу = НайтиПоРеквизиту(
			Метаданные.Справочники.ГруппировкиЗадач.Реквизиты.Флаг.Имя,
			Флаг,
			ОсновнаяГруппировка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГруппировкаПоФлагу) Тогда
		Возврат ГруппировкаПоФлагу;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		БезФлага = Не ЗначениеЗаполнено(Флаг);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ГруппировкиЗадач");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ОсновнаяГруппировка);
		Блокировка.Заблокировать();
		
		Если БезФлага Тогда
			ГруппировкаПоФлагу = НайтиПоРеквизиту(
				Метаданные.Справочники.ГруппировкиЗадач.Реквизиты.БезФлага.Имя,
				Истина,
				ОсновнаяГруппировка);
		Иначе
			ГруппировкаПоФлагу = НайтиПоРеквизиту(
				Метаданные.Справочники.ГруппировкиЗадач.Реквизиты.Флаг.Имя,
				Флаг,
				ОсновнаяГруппировка);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ГруппировкаПоФлагу) Тогда
			
			ОсновнаяГруппировкаОбъект = ОсновнаяГруппировка.ПолучитьОбъект();
			ГруппировкаПоФлагуОбъект = ОсновнаяГруппировкаОбъект.Скопировать();
			ГруппировкаПоФлагуОбъект.БезФлага = БезФлага;
			ГруппировкаПоФлагуОбъект.Флаг = Флаг;
			ГруппировкаПоФлагуОбъект.Родитель = ОсновнаяГруппировка;
			ГруппировкаПоФлагуОбъект.Записать();
			
			ГруппировкаПоФлагу = ГруппировкаПоФлагуОбъект.Ссылка;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ГруппировкаПоФлагу;
	
КонецФункции

// Заполняет поставляемые данные.
// 
Процедура ЗаполнитьПоставляемыеДанные() Экспорт
	
	ГруппировкаЗадачОбъект = ВсеЗадачиПоАвторам.ПолучитьОбъект();
	ГруппировкаЗадачОбъект.Наименование = НСтр("ru = 'Все задачи (по авторам)'");
	ГруппировкаЗадачОбъект.Автор = Неопределено;
	ГруппировкаЗадачОбъект.Исполнитель = Неопределено;
	ГруппировкаЗадачОбъект.ОтображатьИтоги = Ложь;
	ГруппировкаЗадачОбъект.Состояние = Перечисления.ОтборыПоСтатусуЗадач.Все;
	ГруппировкаЗадачОбъект.ТипОтбора = Перечисления.ТипыОтбораГруппировокЗадач.Задачи;
	ОбновлениеИнформационнойБазыХолдинг.ЗаписатьДанные(ГруппировкаЗадачОбъект);
	
	ГруппировкаЗадачОбъект = ВсеЗадачиПоИсполнителям.ПолучитьОбъект();
	ГруппировкаЗадачОбъект.Наименование = НСтр("ru = 'Все задачи (по исполнителям)'");
	ГруппировкаЗадачОбъект.Автор = Неопределено;
	ГруппировкаЗадачОбъект.Исполнитель = Неопределено;
	ГруппировкаЗадачОбъект.ОтображатьИтоги = Ложь;
	ГруппировкаЗадачОбъект.Состояние = Перечисления.ОтборыПоСтатусуЗадач.Все;
	ГруппировкаЗадачОбъект.ТипОтбора = Перечисления.ТипыОтбораГруппировокЗадач.ДействияЗадач;
	ОбновлениеИнформационнойБазыХолдинг.ЗаписатьДанные(ГруппировкаЗадачОбъект);
	
	ГруппировкаЗадачОбъект = ЗадачиМне.ПолучитьОбъект();
	ГруппировкаЗадачОбъект.Наименование = НСтр("ru = 'Задачи мне'");
	ГруппировкаЗадачОбъект.Автор = Неопределено;
	ГруппировкаЗадачОбъект.Исполнитель = Перечисления.ОтборыПоУчастникамЗадач.ТекущийПользователь;
	ГруппировкаЗадачОбъект.ОтображатьИтоги = Истина;
	ГруппировкаЗадачОбъект.Состояние = Перечисления.ОтборыПоСтатусуЗадач.НеВыполненные;
	ГруппировкаЗадачОбъект.ТипОтбора = Перечисления.ТипыОтбораГруппировокЗадач.ДействияЗадач;
	ОбновлениеИнформационнойБазыХолдинг.ЗаписатьДанные(ГруппировкаЗадачОбъект);
	
	ГруппировкаЗадачОбъект = ЗадачиМнеНеНачатые.ПолучитьОбъект();
	ГруппировкаЗадачОбъект.Наименование = НСтр("ru = 'Задачи мне (не начатые)'");
	ГруппировкаЗадачОбъект.Автор = Неопределено;
	ГруппировкаЗадачОбъект.Исполнитель = Перечисления.ОтборыПоУчастникамЗадач.ТекущийПользователь;
	ГруппировкаЗадачОбъект.Состояние = Перечисления.ОтборыПоСтатусуЗадач.НеНачатые;
	ГруппировкаЗадачОбъект.ТипОтбора = Перечисления.ТипыОтбораГруппировокЗадач.ДействияЗадач;
	ОбновлениеИнформационнойБазыХолдинг.ЗаписатьДанные(ГруппировкаЗадачОбъект);
	
	ГруппировкаЗадачОбъект = ЗадачиМнеПросроченные.ПолучитьОбъект();
	ГруппировкаЗадачОбъект.Наименование = НСтр("ru = 'Задачи мне (просроченные)'");
	ГруппировкаЗадачОбъект.Автор = Неопределено;
	ГруппировкаЗадачОбъект.Исполнитель = Перечисления.ОтборыПоУчастникамЗадач.ТекущийПользователь;
	ГруппировкаЗадачОбъект.ОтображатьИтоги = Истина;
	ГруппировкаЗадачОбъект.Состояние = Перечисления.ОтборыПоСтатусуЗадач.Просроченные;
	ГруппировкаЗадачОбъект.ТипОтбора = Перечисления.ТипыОтбораГруппировокЗадач.ДействияЗадач;
	ОбновлениеИнформационнойБазыХолдинг.ЗаписатьДанные(ГруппировкаЗадачОбъект);
	
	ГруппировкаЗадачОбъект = ЗадачиОтМеня.ПолучитьОбъект();
	ГруппировкаЗадачОбъект.Наименование = НСтр("ru = 'Задачи от меня'");
	ГруппировкаЗадачОбъект.Автор = Перечисления.ОтборыПоУчастникамЗадач.ТекущийПользователь;
	ГруппировкаЗадачОбъект.Исполнитель = Неопределено;
	ГруппировкаЗадачОбъект.ОтображатьИтоги = Истина;
	ГруппировкаЗадачОбъект.Состояние = Перечисления.ОтборыПоСтатусуЗадач.НеВыполненные;
	ГруппировкаЗадачОбъект.ТипОтбора = Перечисления.ТипыОтбораГруппировокЗадач.Задачи;
	ОбновлениеИнформационнойБазыХолдинг.ЗаписатьДанные(ГруппировкаЗадачОбъект);
	
	ГруппировкаЗадачОбъект = ЗадачиОтМеняПоИсполнителям.ПолучитьОбъект();
	ГруппировкаЗадачОбъект.Наименование = НСтр("ru = 'Задачи от меня (по исполнителям)'");
	ГруппировкаЗадачОбъект.Автор = Перечисления.ОтборыПоУчастникамЗадач.ТекущийПользователь;
	ГруппировкаЗадачОбъект.Исполнитель = Неопределено;
	ГруппировкаЗадачОбъект.ОтображатьИтоги = Истина;
	ГруппировкаЗадачОбъект.Состояние = Перечисления.ОтборыПоСтатусуЗадач.НеВыполненные;
	ГруппировкаЗадачОбъект.ТипОтбора = Перечисления.ТипыОтбораГруппировокЗадач.ДействияЗадач;
	ОбновлениеИнформационнойБазыХолдинг.ЗаписатьДанные(ГруппировкаЗадачОбъект);
	
	ГруппировкаЗадачОбъект = ЗадачиПодчиненных.ПолучитьОбъект();
	ГруппировкаЗадачОбъект.Наименование = НСтр("ru = 'Задачи подчиненных'");
	ГруппировкаЗадачОбъект.Автор = Неопределено;
	ГруппировкаЗадачОбъект.Исполнитель = Перечисления.ОтборыПоУчастникамЗадач.Подчиненные;
	ГруппировкаЗадачОбъект.ОтображатьИтоги = Истина;
	ГруппировкаЗадачОбъект.Состояние = Перечисления.ОтборыПоСтатусуЗадач.НеВыполненные;
	ГруппировкаЗадачОбъект.ТипОтбора = Перечисления.ТипыОтбораГруппировокЗадач.ДействияЗадач;
	ОбновлениеИнформационнойБазыХолдинг.ЗаписатьДанные(ГруппировкаЗадачОбъект);
	
	ГруппировкаЗадачОбъект = ЗадачиПоПроектамПоАвторам.ПолучитьОбъект();
	ГруппировкаЗадачОбъект.Наименование = НСтр("ru = 'Задачи по проектам (по авторам)'");
	ГруппировкаЗадачОбъект.Автор = Неопределено;
	ГруппировкаЗадачОбъект.Исполнитель = Неопределено;
	ГруппировкаЗадачОбъект.ОтображатьИтоги = Истина;
	ГруппировкаЗадачОбъект.Проект = Перечисления.ОтборыПоПроектамЗадач.АктивныеПроекты;
	ГруппировкаЗадачОбъект.Состояние = Перечисления.ОтборыПоСтатусуЗадач.НеВыполненные;
	ГруппировкаЗадачОбъект.ТипОтбора = Перечисления.ТипыОтбораГруппировокЗадач.Задачи;
	ОбновлениеИнформационнойБазыХолдинг.ЗаписатьДанные(ГруппировкаЗадачОбъект);
	
	ГруппировкаЗадачОбъект = ЗадачиПоПроектамПоИсполнителям.ПолучитьОбъект();
	ГруппировкаЗадачОбъект.Наименование = НСтр("ru = 'Задачи по проектам (по исполнителям)'");
	ГруппировкаЗадачОбъект.Автор = Неопределено;
	ГруппировкаЗадачОбъект.Исполнитель = Неопределено;
	ГруппировкаЗадачОбъект.ОтображатьИтоги = Истина;
	ГруппировкаЗадачОбъект.Проект = Перечисления.ОтборыПоПроектамЗадач.АктивныеПроекты;
	ГруппировкаЗадачОбъект.Состояние = Перечисления.ОтборыПоСтатусуЗадач.НеВыполненные;
	ГруппировкаЗадачОбъект.ТипОтбора = Перечисления.ТипыОтбораГруппировокЗадач.ДействияЗадач;
	ОбновлениеИнформационнойБазыХолдинг.ЗаписатьДанные(ГруппировкаЗадачОбъект);
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеКэширующихДанных

// Обрабатывает обновление кэширующих данных.
// 
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса - Выборка из очереди обновления кэширующих данных:
//   * ОтметкаВремени - ОпределяемыйТип.ОтметкаВремени.
//   * ЗависимыйОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//   * ВлияющийОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//   * КлючВлияющихДанных - ЛюбаяСсылка.
//   * Автор - СправочникСсылка.Пользователи.
//   * ЗагрузкаОбработанныхДанныхИзДругойСистемы - Булево.
//   * ИзмененияВлияющихДанных - ХранилищеЗначения.
//   * Попыток - Число.
//   * ДатаКОбработке - Дата.
// 
Процедура ОбновитьКэширующиеДанные(Выборка) Экспорт
	
	ОбновитьГруппировкиПоОбъекту(Выборка.КлючВлияющихДанных);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
    МультиязычностьКлиентСервер.ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка);
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
    МультиязычностьКлиентСервер.ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка);
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СтрокаПоиска", ?(Параметры.СтрокаПоиска = Неопределено, "", Параметры.СтрокаПоиска) + "%");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГруппировкиЗадач.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ГруппировкиЗадач КАК ГруппировкиЗадач
	|ГДЕ
	|	НЕ ГруппировкиЗадач.ПометкаУдаления
	|	И ГруппировкиЗадач.Наименование ПОДОБНО &СтрокаПоиска
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГруппировкиЗадач.Наименование";
	
	ОбъектМетаданных = Метаданные.Справочники.ГруппировкиЗадач;
	Если Не МультиязычностьПовтИсп.КонфигурацияИспользуетТолькоОдинЯзык(ОбъектМетаданных.ТабличныеЧасти.Найти("Представления") = Неопределено) Тогда
		
		Если МультиязычностьСервер.ИспользуетсяПервыйДополнительныйЯзык() Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"ГруппировкиЗадач.Наименование ПОДОБНО &СтрокаПоиска",
				"(ГруппировкиЗадач.Наименование ПОДОБНО &СтрокаПоиска ИЛИ ГруппировкиЗадач.НаименованиеЯзык1 ПОДОБНО &СтрокаПоиска)");
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеВыбора = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обновляет группировки по объекту группировки.
// 
// Параметры:
//  ОбъектГруппировки - СправочникСсылка.
//
Процедура ОбновитьГруппировкиПоОбъекту(ОбъектГруппировки)
	
	ГруппировкиКОбновлению = ГруппировкиПоОбъектуГруппировку(ОбъектГруппировки);
	
	Для Каждого ГруппировкаКОбновлению Из ГруппировкиКОбновлению Цикл
		
		ГруппировкаЗадачОбъект = ГруппировкаКОбновлению.ПолучитьОбъект();
		НаименованиеОбновлено = ГруппировкаЗадачОбъект.ОбновитьНаименование();
		
		Если Не НаименованиеОбновлено Тогда
			Продолжить;
		КонецЕсли;
		
		ГруппировкаЗадачОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет группировки по объекту группировки.
// 
// Параметры:
//  ОбъектГруппировки - СправочникСсылка.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.ГруппировкиЗадач - Группировки по объекту группировки.
//  
Функция ГруппировкиПоОбъектуГруппировку(ОбъектГруппировки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипОбъектаГруппировки = ТипЗнч(ОбъектГруппировки);
	Запрос = Новый Запрос;
	ГруппировкиПоОбъектуГруппировку = Новый Массив;
	
	Если ТипОбъектаГруппировки = Тип("СправочникСсылка.ВидыДействийЗадач") Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ГруппировкиЗадач.Ссылка
			|ИЗ
			|	Справочник.ГруппировкиЗадач КАК ГруппировкиЗадач
			|ГДЕ
			|	ГруппировкиЗадач.ВидДействия = &ОбъектГруппировки";
		
		Запрос.УстановитьПараметр("ОбъектГруппировки", ОбъектГруппировки);
		
	ИначеЕсли ТипОбъектаГруппировки = Тип("СправочникСсылка.ВидыДокументов")
		Или ТипОбъектаГруппировки = Тип("СправочникСсылка.ВидыМероприятий")
		Или ТипОбъектаГруппировки = Тип("СправочникСсылка.ВидыПроектов") Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ГруппировкиЗадач.Ссылка
			|ИЗ
			|	Справочник.ГруппировкиЗадач КАК ГруппировкиЗадач
			|ГДЕ
			|	ГруппировкиЗадач.ВидПриложения = &ОбъектГруппировки";
		
		Запрос.УстановитьПараметр("ОбъектГруппировки", ОбъектГруппировки);
		
	ИначеЕсли ТипОбъектаГруппировки = Тип("СправочникСсылка.ВидыЗадач") Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ГруппировкиЗадач.Ссылка
			|ИЗ
			|	Справочник.ГруппировкиЗадач КАК ГруппировкиЗадач
			|ГДЕ
			|	ГруппировкиЗадач.ВидЗадачи = &ОбъектГруппировки";
		
		Запрос.УстановитьПараметр("ОбъектГруппировки", ОбъектГруппировки);
		
	ИначеЕсли ТипОбъектаГруппировки = Тип("СправочникСсылка.Контрагенты")
		Или ТипОбъектаГруппировки = Тип("СправочникСсылка.Организации") Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ГруппировкиЗадач.Ссылка
			|ИЗ
			|	Справочник.ГруппировкиЗадач КАК ГруппировкиЗадач
			|ГДЕ
			|	ГруппировкиЗадач.Автор В (&РолиГруппировки)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ГруппировкиЗадач.Ссылка
			|ИЗ
			|	Справочник.ГруппировкиЗадач КАК ГруппировкиЗадач
			|ГДЕ
			|	ГруппировкиЗадач.Исполнитель В (&РолиГруппировки)";
		
		РолиГруппировки = Справочники.ПолныеРоли.НайтиПоОбъектуАдресации(ОбъектГруппировки);
		Запрос.УстановитьПараметр("РолиГруппировки", РолиГруппировки);
		
	ИначеЕсли ТипОбъектаГруппировки = Тип("СправочникСсылка.Проекты") Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ГруппировкиЗадач.Ссылка
			|ИЗ
			|	Справочник.ГруппировкиЗадач КАК ГруппировкиЗадач
			|ГДЕ
			|	ГруппировкиЗадач.Автор В (&РолиГруппировки)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ГруппировкиЗадач.Ссылка
			|ИЗ
			|	Справочник.ГруппировкиЗадач КАК ГруппировкиЗадач
			|ГДЕ
			|	ГруппировкиЗадач.Исполнитель В (&РолиГруппировки)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ГруппировкиЗадач.Ссылка
			|ИЗ
			|	Справочник.ГруппировкиЗадач КАК ГруппировкиЗадач
			|ГДЕ
			|	ГруппировкиЗадач.Проект В (&ОбъектГруппировки)";
		
		РолиГруппировки = Справочники.ПолныеРоли.НайтиПоОбъектуАдресации(ОбъектГруппировки);
		Запрос.УстановитьПараметр("РолиГруппировки", РолиГруппировки);
		Запрос.УстановитьПараметр("ОбъектГруппировки", ОбъектГруппировки);
		
	ИначеЕсли ТипОбъектаГруппировки = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ГруппировкиЗадач.Ссылка
			|ИЗ
			|	Справочник.ГруппировкиЗадач КАК ГруппировкиЗадач
			|ГДЕ
			|	ГруппировкиЗадач.Автор В (&РолиГруппировки)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ГруппировкиЗадач.Ссылка
			|ИЗ
			|	Справочник.ГруппировкиЗадач КАК ГруппировкиЗадач
			|ГДЕ
			|	ГруппировкиЗадач.Исполнитель В (&РолиГруппировки)";
		
		РолиГруппировки = Справочники.ПолныеРоли.НайтиПоРолиИсполнителя(ОбъектГруппировки);
		Запрос.УстановитьПараметр("РолиГруппировки", РолиГруппировки);
		
	ИначеЕсли ТипОбъектаГруппировки = Тип("СправочникСсылка.Сотрудники") Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ГруппировкиЗадач.Ссылка
			|ИЗ
			|	Справочник.ГруппировкиЗадач КАК ГруппировкиЗадач
			|ГДЕ
			|	ГруппировкиЗадач.Автор = &ОбъектГруппировки
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ГруппировкиЗадач.Ссылка
			|ИЗ
			|	Справочник.ГруппировкиЗадач КАК ГруппировкиЗадач
			|ГДЕ
			|	ГруппировкиЗадач.Исполнитель = &ОбъектГруппировки";
		
		Запрос.УстановитьПараметр("ОбъектГруппировки", ОбъектГруппировки);
		
	ИначеЕсли ТипОбъектаГруппировки = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ГруппировкиЗадач.Ссылка
			|ИЗ
			|	Справочник.ГруппировкиЗадач КАК ГруппировкиЗадач
			|ГДЕ
			|	ГруппировкиЗадач.Автор В (&РолиГруппировки)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ГруппировкиЗадач.Ссылка
			|ИЗ
			|	Справочник.ГруппировкиЗадач КАК ГруппировкиЗадач
			|ГДЕ
			|	ГруппировкиЗадач.Исполнитель В (&РолиГруппировки)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ГруппировкиЗадач.Ссылка
			|ИЗ
			|	Справочник.ГруппировкиЗадач КАК ГруппировкиЗадач
			|ГДЕ
			|	ГруппировкиЗадач.Исполнитель В (&ОбъектГруппировки)";
		
		РолиГруппировки = Справочники.ПолныеРоли.НайтиПоОбъектуАдресации(ОбъектГруппировки);
		Запрос.УстановитьПараметр("РолиГруппировки", РолиГруппировки);
		Запрос.УстановитьПараметр("ОбъектГруппировки", ОбъектГруппировки);
		
	Иначе
		
		Возврат ГруппировкиПоОбъектуГруппировку;
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ГруппировкиПоОбъектуГруппировку.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Возврат ГруппировкиПоОбъектуГруппировку;
	
КонецФункции

#КонецОбласти

#КонецЕсли