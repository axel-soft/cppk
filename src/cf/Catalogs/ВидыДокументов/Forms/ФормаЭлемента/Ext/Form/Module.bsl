
&НаКлиенте
Перем КешНастроекРолейФайлов;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПриСозданииНаСервереРедакцииКонфигурации();
	
	// Протоколирование работы пользователей
	ПротоколированиеРаботыСотрудников.ЗаписатьОткрытие(Объект.Ссылка);
	
	ЕстьПравоНаСозданиеШаблона = ПравоДоступа("Добавление", Метаданные.Справочники.ШаблоныДокументов);
	ИспользоватьМестаХранения = ПолучитьФункциональнуюОпцию("ИспользоватьМестаХранения");
	СписокРасширенийШаблонов = "doc, docx, dot, dotx, odt, txt, html, htm";
	Если Не Объект.Ссылка.Пустая() Тогда 
		
		ЗаполнитьСписокШаблоновВида();
		ЗаполнитьПредставлениеНастройкиШтампаЭП();

		ПраваОписание = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(Объект.Ссылка);
		Элементы.НастройкаГенерацииШтамповЭП.Доступность = ПраваОписание.Изменение;
		
	Иначе
		
		Элементы.НастройкаГенерацииШтамповЭП.Доступность = Ложь;
		ЗаполнитьПредставлениеНастройкиШтампаЭП();
		
	КонецЕсли;             
	
	ИспользоватьЭДОВДокументообороте = ПолучитьФункциональнуюОпцию("ИспользоватьЭДОВДокументообороте");
	
	ИспользоватьРолиФайлов = ПолучитьФункциональнуюОпцию("ИспользоватьРолиФайлов");
	Элементы.СтраницаРолиФайлов.Видимость = ИспользоватьРолиФайлов;
	
	ИспользоватьУчетПоОрганизациям = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям");
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда //Копирование
		ТаблНастройкиНумерации = Нумерация.ПрочитатьНастройкиНумерацииВидаДокумента(Параметры.ЗначениеКопирования);
		ЗначениеВРеквизитФормы(ТаблНастройкиНумерации, "НастройкиНумерации");
	ИначеЕсли Объект.Ссылка.Пустая() Тогда 
		НоваяСтрока = НастройкиНумерации.Добавить();
		НоваяСтрока.СпособНумерации = Перечисления.СпособыНумерации.Автоматически;
		НоваяСтрока.Нумератор = Справочники.Нумераторы.ДокументыПредприятия;
		НоваяСтрока.Нумеровать = Нумерация.СформироватьПолеНумеровать(НоваяСтрока.СпособНумерации, НоваяСтрока.Нумератор);
		НоваяСтрока.Назначение = Нумерация.НазначениеНумератора(НоваяСтрока.Нумератор);
		Объект.ВестиУчетПоОрганизациям = ИспользоватьУчетПоОрганизациям;
	Иначе	
		ТаблНастройкиНумерации = Нумерация.ПрочитатьНастройкиНумерацииВидаДокумента(Объект.Ссылка);
		ЗначениеВРеквизитФормы(ТаблНастройкиНумерации, "НастройкиНумерации");
	КонецЕсли;
	
	Нумерация.ПоказатьИндексНумерации(ЭтотОбъект);
	
	Элементы.НастройкиНумерацииОрганизация.Видимость = ИспользоватьУчетПоОрганизациям;
	
	ВестиУчетПоОрганизациямНачальноеЗначение = Объект.ВестиУчетПоОрганизациям;
	ОбязательноеУказаниеОтветственногоНачальноеЗначение = Объект.ОбязательноеУказаниеОтветственного;
	ФормаДокументаНачальноеЗначение = Объект.ФормаДокумента;
	УстановитьДоступностьОпций(ЭтотОбъект);
	
	Делопроизводство.СписокДокументовУсловноеОформлениеПомеченныхНаУдаление(ВсеТовары);
	
	// Работа со подписями
	КонтрагентПустаяСсылка = Справочники.Контрагенты.ПустаяСсылка();
	КонтактноеЛицоПустаяСсылка = Справочники.КонтактныеЛица.ПустаяСсылка();	
	РаботаСШаблонамиДокументовСервер.УстановитьТипыМестаИОтветственногоЗаХранение(ЭтотОбъект);
	
	// Работа с тематиками
	Элементы.СтраницаТематики.Видимость = Объект.ВестиУчетПоТематикам;
	Тематики.Параметры.УстановитьЗначениеПараметра("ВидДокумента", Объект.Ссылка);
	ПараметрыОтбора = Новый Соответствие;
	Параметрыотбора.Вставить("ПоказыватьУдаленныеТематики", ПоказыватьУдаленныеТематики);
	Параметрыотбора.Вставить("ПоказыватьНеДействующиеТематики", ПоказыватьНеДействующиеТематики);
	УстановитьОтборСпискаТематик(Тематики, Параметрыотбора);
	КоличествоТематик = КоличествоТематикДляВида(Объект.Ссылка,
		ПоказыватьУдаленныеТематики, ПоказыватьНеДействующиеТематики);
	Делопроизводство.СписокДокументовУсловноеОформлениеПомеченныхНаУдаление(Тематики);
	
	Если Параметры.Свойство("ОткрытьЗакладкуТематики") Тогда
		Элементы.ОсновныеСтраницы.ТекущаяСтраница = Элементы.СтраницаТематики;
	КонецЕсли;
	
	Если Параметры.Свойство("ОткрытьЗакладкуШаблоны") Тогда
		Элементы.ОсновныеСтраницы.ТекущаяСтраница = Элементы.СтраницаСозданиеДокументов;
	КонецЕсли;
	
	Если Параметры.Свойство("АктивироватьИндекс") Тогда
		Элементы.ОсновныеСтраницы.ТекущаяСтраница = Элементы.СтраницаНастройки;
		ТекущийЭлемент = Элементы.ИндексНумерации;
	КонецЕсли;
	
	Если Параметры.Свойство("АктивироватьОбработку") 
		Или Параметры.Свойство("ДляНастройкиВидовДействий") Тогда
		Элементы.ОсновныеСтраницы.ТекущаяСтраница = Элементы.ОбработкаДокумента;
		ТекущийЭлемент = Элементы.ВидыДействий;
	КонецЕсли;
	
	ДействияСервер.ВидОбъектаПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	// Работа со сроками исполнения
	ИспользоватьГрафики = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
	Если ИспользоватьГрафики Тогда
		
		Элементы.НадписьКалендарныхДней.Видимость = Ложь;
		Элементы.ЕдиницыИзмерения.Видимость = Ложь;
		
		Представления = КалендарныеГрафикиДокументооборот.СклонениеДней(ШаблонДокумента.ДлительностьИсполнения);
		Элементы.ШаблонСрокИсполненияУказанВРабочихДнях.СписокВыбора[0].Представление = Представления.Календарные;
		Элементы.ШаблонСрокИсполненияУказанВРабочихДнях.СписокВыбора[1].Представление = Представления.Рабочие;
		Представления = КалендарныеГрафикиДокументооборот.СклонениеДней(Объект.СрокИсполнения);
		Элементы.СрокИсполненияУказанВРабочихДнях.СписокВыбора[0].Представление = Представления.Календарные;
		Элементы.СрокИсполненияУказанВРабочихДнях.СписокВыбора[1].Представление = Представления.Рабочие;
		
	КонецЕсли;
	
	КоличествоНастроекПравилОбработки = НастройкиДействий.КоличествоНастроекПравилОбработки(Объект.Ссылка);
	Если КоличествоНастроекПравилОбработки > 0 Тогда 
		ПравилаОбработки = СтрШаблон(НСтр("ru = 'Правила обработки (%1)'"),
			КоличествоНастроекПравилОбработки);
	Иначе 
		ПравилаОбработки = НСтр("ru = 'Правила обработки (не заданы)'");
	КонецЕсли;
	
	Элементы.ПравилаОбработки.Ширина = СтрДлина(ПравилаОбработки) * 7 / 10;
	
	ПравилаЗапуска = НСтр("ru = 'Не задан'");
	
	ОбновитьРолиФайлов(Объект);
	РолиКоличествоНачальное = РолиКоличество;
	
	ОбновитьРеестр();
	
	ИспользоватьОграничениеПравДоступа =
		ПолучитьФункциональнуюОпцию("ДокументооборотИспользоватьОграничениеПравДоступа"); 
	Элементы.ГруппаРазрешенияНаСоздание.Видимость = ИспользоватьОграничениеПравДоступа; 
	Элементы.РазрешитьРучноеИзменениеСписковДоступа.Видимость = ИспользоватьОграничениеПравДоступа;
	ЗаполнитьРазрешенияНаСоздание();
	
	Если Не ПолучитьФункциональнуюОпцию("АвтовизуализацияЭП") Тогда
		Элементы.ГруппаШтампы.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЭДОВДокументообороте") Тогда
		Элементы.РолиФайловФайлЭлектронногоДокумента.Видимость = Ложь;
		Элементы.СтраницаНастройкиЭДО.Видимость = Ложь;
	Иначе
		ИспользоватьОбменЭД = Истина;
	КонецЕсли;
	
	ЕстьПравоНастройкиЭДО = ОбменЭДОДокументооборот.ЕстьПравоНастройкиОтправкиЭДО();
	Элементы.СтраницаНастройкиЭДО.ТолькоПросмотр = Не ЕстьПравоНастройкиЭДО;
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбменЭДОДокументооборотКлиентСервер.УстановитьВидимостьПодсказкиФорматаЭДО(ЭтотОбъект, ФорматДокумента,
			"ФорматДокумента", ИспользоватьЭДОВДокументообороте);
	КонецЕсли;
	
	ЭтоМобильныйКлиент = МК_ПовтИсп.ЭтоМобильныйКлиент();
	НастроитьФормуДляМобильногоПриНеобходимости();
	
	МультиязычностьСервер.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СформироватьЗаголовокЗакладкиНумерация();
	РаботаСКорреспонденциейКлиент.УстановитьЗаголовкиЭлементовФормы(ЭтотОбъект, 
		Объект.ЯвляетсяВходящейКорреспонденцией,
		Объект.ЯвляетсяИсходящейКорреспонденцией);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписанШаблонДокумента" И Параметр.ВидДокумента = Объект.Ссылка Тогда 
		ЗаполнитьСписокШаблоновВида();
		
		Если МногоШаблонов Тогда 
			СтрокаИдентификатор = Неопределено;
			Для Каждого Строка Из ШаблоныВида Цикл
				Если Строка.Шаблон = Параметр.Шаблон Тогда 
					СтрокаИдентификатор = Строка.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокаИдентификатор = Неопределено Тогда 
				Возврат;
			КонецЕсли;
			
			Элементы.ШаблоныВида.ТекущаяСтрока = СтрокаИдентификатор;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписаноПравилоАвтозаполнения" И Параметр.ВидДокумента = Объект.Ссылка
		И ЗначениеЗаполнено(Параметр.Правило) Тогда 
		ТребуетсяЗаписатьШаблон = Ложь;
		Для Каждого Строка Из Файлы Цикл
			Если Строка.Ссылка = Параметр.Шаблон Тогда 
				Строка.ПравилоАвтозаполнения = Параметр.Правило;
				Строка.ПравилоАвтозаполненияСтр = НСтр("ru = 'Открыть'");
				ТребуетсяЗаписатьШаблон = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ТребуетсяЗаписатьШаблон Тогда 
			Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ИмпортФайловЗавершен" Тогда
		
		ЗаполнитьСписокФайлов();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Владелец")
			 И Параметр.Свойство("Файл") И ЗначениеЗаполнено(Параметр.Владелец)  Тогда
			ВладелецФайла = Параметр.Владелец;
			ФайлСсылка = Параметр.Файл; 
		Иначе	
			ВладелецФайла = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Источник, "ВладелецФайла");
			ФайлСсылка = Источник; 
		КонецЕсли;	
		
		Если ВладелецФайла = ШаблонДокумента.Ссылка Тогда
			ОбновитьСтрокуФайла(ФайлСсылка);
			
			ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
			УстановитьДоступностьКоманд(ТекущиеДанные);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ФайлИзменен" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			Если Параметр.Владелец = ШаблонДокумента.Ссылка Тогда 
				ОбновитьСтрокуФайла(Параметр.Файл);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" Тогда
		
		Если Параметр <> Неопределено
			И Параметр.Свойство("Владелец")
			И Параметр.Владелец = ШаблонДокумента.Ссылка Тогда
			
			ЗаполнитьСписокФайлов();
			Модифицированность = Истина;
			
			Если Параметр.Свойство("Файл") Тогда
				УстановитьТекущуюСтрокуФайла(Параметр.Файл);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ИмяСобытия = "ТематикаДокумента_Создание" Или ИмяСобытия = "ТематикаДокумента_Изменилась")
		И Параметр.ВидДокумента = Объект.Ссылка Тогда
		ОбновитьТематикиНаСервере();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_НастройкиДействий" Или ИмяСобытия = "Запись_ПравилаОбработки" Тогда
		КоличествоНастроекПравилОбработки = НастройкиДействийВызовСервера.КоличествоНастроекПравилОбработки(
			Объект.Ссылка);
		Если КоличествоНастроекПравилОбработки > 0 Тогда 
			ПравилаОбработки = СтрШаблон(НСтр("ru = 'Правила обработки (%1)'"),
				КоличествоНастроекПравилОбработки);
		Иначе 
			ПравилаОбработки = НСтр("ru = 'Правила обработки (не заданы)'");
		КонецЕсли;
		Элементы.ПравилаОбработки.Ширина = СтрДлина(ПравилаОбработки) * 7 / 10;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененыНастройкиШтампаЭП" 
		И Параметр = Объект.Ссылка Тогда
			
		ЗаполнитьПредставлениеНастройкиШтампаЭП();
			
	КонецЕсли;
		
	Если ИмяСобытия = "ИзмененаСхемаОбработки" Тогда 
		Для Каждого СтрРодитель Из ВидыДействий.ПолучитьЭлементы() Цикл
			Если Параметр.Схема = СтрРодитель.СхемаОбработки Тогда
				Если Не Параметр.АвтоформируемаяСхема Тогда
					СтрРодитель.Схема = НСтр("ru = 'Измененная'");
				Иначе
					СтрРодитель.Схема = НСтр("ru = 'Стандартная'");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
			
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененВидДействия" Тогда 
		ОбновитьВидыДействийПоВидуДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не МногоШаблонов 
		И ((ПараметрыЗаписи.Свойство("ЗаписатьШаблон") И ПараметрыЗаписи.ЗаписатьШаблон)
		Или (ШаблонДокумента.Ссылка.Пустая() И ЕстьЗаполненныеРеквизитыШаблона())
		Или (Не ШаблонДокумента.Ссылка.Пустая() 
			И (ШаблонИзменен() Или ПараметрыЗаписи.Свойство("ИзменилосьНаименование")))
		Или ТребуетсяЗаписатьШаблон) Тогда 
		
		ШаблонДокумента.ЗаполнениеНаименованияПоШаблону = Ложь;
		Если ЗначениеЗаполнено(ШаблонДокумента.Заголовок) Тогда 
			ОписаниеОшибки = "";
			МассивРеквизитов = Новый Массив;
			
			ДелопроизводствоКлиентСервер.ПолучитьПоляШаблонаНаименования(
				ШаблонДокумента.Заголовок, МассивРеквизитов, ОписаниеОшибки);
			
			Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда 
				ОбщегоНазначения.СообщитьПользователю(
					ОписаниеОшибки,,
					"ШаблонДокумента.Заголовок",,
					Отказ);
				Возврат;
			КонецЕсли;
			
			Если МассивРеквизитов.Количество() > 0 Тогда 
				Делопроизводство.ПоляШаблонаНаименованияНайдены(
					МассивРеквизитов, ТекущийОбъект.Ссылка, ОписаниеОшибки);
				
				Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда 
					ОбщегоНазначения.СообщитьПользователю(
					ОписаниеОшибки,,
					"ШаблонДокумента.Заголовок",,
					Отказ);
					Возврат;
				КонецЕсли;
				
				ШаблонДокумента.ЗаполнениеНаименованияПоШаблону = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Рабочая группа
		РабочаяГруппаТаблицаКоличество = РабочаяГруппаТаблица.Количество();
		Для Инд = 1 По РабочаяГруппаТаблицаКоличество Цикл
			Строка = РабочаяГруппаТаблица[РабочаяГруппаТаблицаКоличество - Инд];
			Если Не ЗначениеЗаполнено(Строка.Участник) Тогда 
				РабочаяГруппаТаблица.Удалить(Строка);
			КонецЕсли;	
		КонецЦикла;
		
		НоваяРабочаяГруппа = РабочаяГруппаТаблица.Выгрузить();
		РабочаяГруппаДобавить = Новый Массив;
		РабочаяГруппаУдалить = Новый Массив;
		
		// Формирование списка удаленных участников рабочей группы
		Для каждого Эл Из ИсходнаяРабочаяГруппа Цикл
			
			Найден = Ложь;
			
			Для каждого Эл2 Из НоваяРабочаяГруппа Цикл
				Если Эл.Участник = Эл2.Участник 
					И Эл.Изменение = Эл2.Изменение Тогда
					
					Найден = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
			Если Не Найден Тогда
				РабочаяГруппаУдалить.Добавить(
					Новый Структура("Участник, Изменение",
					Эл.Участник,
					Эл.Изменение));
			КонецЕсли;
			
		КонецЦикла;	
		
		// Формирование списка добавленных участников рабочей группы
		Для каждого Эл Из НоваяРабочаяГруппа Цикл
			
			Найден = Ложь;
			
			Для каждого Эл2 Из ИсходнаяРабочаяГруппа Цикл
				Если Эл.Участник = Эл2.Участник 
					И Эл.Изменение = Эл2.Изменение Тогда
					
					Найден = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
			Если Не Найден Тогда
				РабочаяГруппаДобавить.Добавить(
					Новый Структура("Участник, Изменение", 
					Эл.Участник,
					Эл.Изменение));
			КонецЕсли;
			
		КонецЦикла;
		
		ШаблонДокумента.ДополнительныеРеквизиты.Очистить();
		Для Каждого ДопРеквизит Из ДополнительныеРеквизиты Цикл 
			Если ЗначениеЗаполнено(ДопРеквизит.Значение) Тогда 
				НовСтрока = ШаблонДокумента.ДополнительныеРеквизиты.Добавить();
				НовСтрока.Свойство = ДопРеквизит.Свойство;
				НовСтрока.Значение = ДопРеквизит.Значение;
			КонецЕсли;
		КонецЦикла;
		
		ШаблонДокумента.ВидДокумента = ТекущийОбъект.Ссылка;
		ШаблонДокумента.Наименование = ТекущийОбъект.Наименование;
		ШаблонДокумента.Автор = Сотрудники.ОсновнойСотрудник();
		ШаблонДокумента.КомментарийКШаблону = ТекущийОбъект.Комментарий;
		
		ЕстьАвтозаполнение = Ложь;
		ШаблонДокумента.ПравилаАвтозаполнения.Очистить();
		Для Каждого Строка Из Файлы Цикл
			НоваяСтрока = ШаблонДокумента.ПравилаАвтозаполнения.Добавить();
			НоваяСтрока.ШаблонФайла = Строка.Ссылка;
			НоваяСтрока.ПравилоАвтозаполнения = Строка.ПравилоАвтозаполнения;
			НоваяСтрока.Условие = Строка.Условие;
			
			Если ЗначениеЗаполнено(Строка.ПравилоАвтозаполнения) Тогда
				ЕстьАвтозаполнение = Истина;
			КонецЕсли;
		КонецЦикла;
		
		ШаблонДокумента.Автозаполнение = ЕстьАвтозаполнение;
		
		ШаблонОбъект = РеквизитФормыВЗначение("ШаблонДокумента");
		ШаблонОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаУдалить", РабочаяГруппаУдалить);
		ШаблонОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаДобавить", РабочаяГруппаДобавить);
		// Обработка рабочей группы
		РаботаСРабочимиГруппами.ОбъектПередЗаписьюНаСервере(ЭтотОбъект, ШаблонОбъект, ПараметрыЗаписи);
		Если Не ШаблонОбъект.ПроверитьЗаполнение() Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		ШаблонОбъект.Записать();
		
		ИсходнаяРабочаяГруппа.Загрузить(НоваяРабочаяГруппа);
		
		ЗаполнитьСписокШаблоновВида(ТекущийОбъект.Ссылка);
		
		// Категории данных
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных") Тогда
			Для Каждого Категория Из ШаблонДокумента.Категории Цикл
				Категория.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(Категория.Значение);
			КонецЦикла;
		Иначе
			Элементы.СтраницаКатегории.Видимость = Ложь;
		КонецЕсли;
		
		// Рабочая группа
		РаботаСРабочимиГруппами.ОбъектПослеЗаписиНаСервере(ЭтотОбъект, ПараметрыЗаписи);
		ОбновитьВидимостьРеквизитов(ЭтотОбъект);
		КоличествоУчастниковРабочейГруппы = РабочаяГруппаТаблица.Количество();
		
		
		// Создание файлов при сохранении нового документа
		Если ФайлыДобавленные.Количество() > 0 Тогда
			
			Индекс = ФайлыДобавленные.Количество() - 1;
			Пока Индекс >= 0 Цикл
				ФайлТаблицы = ФайлыДобавленные[Индекс]; 
				Если Не ЭтоАдресВременногоХранилища(ФайлТаблицы.ПолныйПуть) Тогда
					Индекс = Индекс - 1;
					Продолжить;
				КонецЕсли;
				
				ДанныеФайла = ПолучитьИзВременногоХранилища(ФайлТаблицы.ПолныйПуть);
				ВладелецФайла = ШаблонДокумента.Ссылка;
				Источник = ДанныеФайла.Ссылка;
				
				ХранитьВерсииНовыйФайл = Источник.ХранитьВерсии;
				
				Если ТипЗнч(ШаблонДокумента.Ссылка) <> ТипЗнч(ДанныеФайла.Владелец) Или ФайлТаблицы.ДобавленИзШаблона Тогда 
					ХранитьВерсииНовыйФайл = Истина;
				КонецЕсли;	
				
				СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
				СведенияОФайле.Комментарий = Источник.Описание;
				СведенияОФайле.ИмяБезРасширения = Источник.ПолноеНаименование;
				СведенияОФайле.ХранитьВерсии = ХранитьВерсииНовыйФайл;
				
				НачатьТранзакцию();
				Попытка
					Приемник = РаботаСФайламиВызовСервера.СоздатьФайл(ВладелецФайла, СведенияОФайле);
				
					ХранилищеФайла = Неопределено;
					Если Источник.ТекущаяВерсия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
						ХранилищеФайла = РаботаСФайламиВызовСервера.ПолучитьХранилищеФайлаИзИнформационнойБазы(
							Источник.ТекущаяВерсия);
						КонецЕсли;
						
					ТекстХранилище = РегистрыСведений.ТекстыВерсийФайлов.ПолучитьТекстХранилище(Источник.ТекущаяВерсия);
					
					СведенияОФайле.Размер = Источник.ТекущаяВерсия.Размер;
					СведенияОФайле.РасширениеБезТочки = Источник.ТекущаяВерсия.Расширение;
					СведенияОФайле.АдресВременногоХранилищаФайла = ХранилищеФайла;
					СведенияОФайле.АдресВременногоХранилищаТекста = ТекстХранилище;
					СведенияОФайле.СсылкаНаВерсиюИсточник = Источник.ТекущаяВерсия;
					СведенияОФайле.ВремяИзменения = Источник.ТекущаяВерсия.ДатаМодификацииФайла;
					СведенияОФайле.ВремяИзмененияУниверсальное = Источник.ТекущаяВерсия.ДатаМодификацииУниверсальная;
					
					Версия = РаботаСФайламиВызовСервера.СоздатьВерсию(Приемник, СведенияОФайле);
					
					РаботаСФайламиВызовСервера.ОбновитьВерсиюВФайле(Приемник, Версия, 
						ТекстХранилище);
					
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					ВызватьИсключение;
				КонецПопытки;
				
				ФайлыДобавленные.Удалить(Индекс);
				Индекс = Индекс - 1;
				
			КонецЦикла;
		
		КонецЕсли;
		
		// Файлы
		Элементы.Файлы.Видимость = Истина;
		Элементы.ФайлыДобавленные.Видимость = Ложь;
		
		ТребуетсяЗаписатьШаблон = Ложь;
		
	ИначеЕсли ПараметрыЗаписи.Свойство("ПредыдущаяФормаДокумента") 
		И ПараметрыЗаписи.ПредыдущаяФормаДокумента <> ТекущийОбъект.ФормаДокумента
		И ТекущийОбъект.ФормаДокумента <> Перечисления.ВариантыФормДокументов.БумажнаяИлиЭлектронная Тогда 
		Делопроизводство.ОбновитьФормуДокументаУШаблонов(ТекущийОбъект.Ссылка, ТекущийОбъект.ФормаДокумента);
	КонецЕсли;
	
	Нумерация.ЗаписатьНастройкиНумерацииВидаДокумента(ТекущийОбъект.Ссылка, НастройкиНумерации);
	
	Если ТекущийОбъект.ЯвляетсяЗаявкойНаОплату
		И НЕ ЯвляетсяЗаявкойНаОплатуНачальноеЗначение Тогда
		ЗаявкиНаОплатуСервер.НастроитьПредопределенныеТипыСвязей(ТекущийОбъект.Ссылка);
	КонецЕсли;
	
	ЗаписатьРазрешенияНаСоздание(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Для Каждого Строка Из НастройкиНумерации Цикл
		Если Не ЗначениеЗаполнено(Строка.Нумеровать) Тогда 
			НомерСтроки = НастройкиНумерации.Индекс(Строка);
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Не заполнено поле ""Нумеровать""'"),,
				"НастройкиНумерации["+Формат(НомерСтроки, "ЧН=; ЧГ=")+"].Нумеровать",, Отказ);
		КонецЕсли;
	КонецЦикла;	
		
	//Проверка табличной части Настройки нумерации на задвоения
	КоличествоНастроек = НастройкиНумерации.Количество();	
	Если КоличествоНастроек > 1 Тогда	
		Для Инд1 = 0 По КоличествоНастроек - 2 Цикл 			
			Для Инд2 = Инд1 + 1 По КоличествоНастроек - 1 Цикл 			
				Если НастройкиНумерации[Инд1].Организация = НастройкиНумерации[Инд2].Организация 
					И НастройкиНумерации[Инд1].Контрагент = НастройкиНумерации[Инд2].Контрагент 
					И НастройкиНумерации[Инд1].Подразделение = НастройкиНумерации[Инд2].Подразделение
					И НастройкиНумерации[Инд1].Проект = НастройкиНумерации[Инд2].Проект
					И НастройкиНумерации[Инд1].ВопросДеятельности = НастройкиНумерации[Инд2].ВопросДеятельности
					И НастройкиНумерации[Инд1].Назначение = НастройкиНумерации[Инд2].Назначение
					И НастройкиНумерации[Инд1].Тематика = НастройкиНумерации[Инд2].Тематика Тогда 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru = 'Для указанных полей ""Действует для"" уже задана настройка нумерации'"),,
						"НастройкиНумерации["+ Формат(Инд2, "ЧН=0; ЧГ=0") +"].Нумеровать",, Отказ);
				КонецЕсли;				
	        КонецЦикла;			
		КонецЦикла;	
	КонецЕсли;
		
	Если Объект.ВестиУчетПоТематикам 
		И КоличествоТематикДляВида(Объект.Ссылка, Ложь, Ложь) = 0 
		И Не ЗаписьДляДобавленияТематики Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не задано ни одной действующей тематики'"),,
			"Тематики",, Отказ);
	КонецЕсли;
	
	ДействияСервер.ВидОбъектаОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
	Если РолиКоличество <> 0 И КоличествоШаблонов Тогда
		
		Для Каждого Стр Из Файлы Цикл
			
			Если Не ЗначениеЗаполнено(Стр.РольФайла) Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Не у всех файлов указана роль.'"),
					,
					"Файлы",,
					Отказ);
				Возврат;
				
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЕсли;	
	
	ОбработкаПроверкиЗаполненияНастроекЭДО(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПередЗакрытием(
		Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированность) Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьИЗакрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ОбщегоНазначенияДокументооборот.ПоказатьНадписьПометкиУдаления(ЭтотОбъект, ТекущийОбъект.ПометкаУдаления);
	
	ЗаполнитьСписокШаблоновВида(ТекущийОбъект.Ссылка);
	
	ЯвляетсяЗаявкойНаОплатуНачальноеЗначение = ТекущийОбъект.ЯвляетсяЗаявкойНаОплату;
	
	ЯвляетсяВходящейКорреспонденциейНачальноеЗначение = ТекущийОбъект.ЯвляетсяВходящейКорреспонденцией;
	ЯвляетсяИсходящейКорреспонденциейНачальноеЗначение = ТекущийОбъект.ЯвляетсяИсходящейКорреспонденцией;
	ЯвляетсяКомплектомДокументовНачальноеЗначение = ТекущийОбъект.ЯвляетсяКомплектомДокументов;
	
	
	ОбновитьРолиФайлов(ТекущийОбъект);
	
	ОбновитьРеестр();
	
	ЗаполнитьНастройкиЭДО(ТекущийОбъект);
	
	Элементы.ШаблоныИменФайлов.Видимость 
		= РаботаСФайламиВызовСервера.ЕстьШаблоныИмениПоВиду(Объект.Ссылка) 
		И Пользователи.ЭтоПолноправныйПользователь();
	
	ОпределитьУчастиеВидаДокументаВОтраженииЭДО();
	МультиязычностьСервер.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не МногоШаблонов Тогда 
		ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(ШаблонДокумента.РабочаяГруппаДокумента, "Участник");
		ОбщегоНазначенияДокументооборотКлиент.УдалитьДублиСтрокТаблицы(ШаблонДокумента.РабочаяГруппаДокумента, "Участник");	
		ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(РабочаяГруппаТаблица, "Участник");
		ОбщегоНазначенияДокументооборотКлиент.УдалитьДублиСтрокТаблицы(РабочаяГруппаТаблица, "Участник");
		ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(ШаблонДокумента.Товары, "Номенклатура");
	КонецЕсли;
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(Объект.РолиФайлов, "Роль");
	
	ОчиститьСообщения();
	
	Если НужноВключитьУчетПоНоменклатуреДел() И Не ПараметрыЗаписи.Свойство("ВключенУчетПоНоменклатуреДел")
		И Не ПоказанВопросПроВключениеНоменклатуры Тогда 
		
		ПоказанВопросПроВключениеНоменклатуры = Истина;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПередЗаписьюПродолжениеПослеВопросаОВключенииУчетаПоНоменклатуреДел",
			ЭтотОбъект,
			ПараметрыЗаписи);
		ТекстВопроса = НСтр("ru = 'Указанный нумератор использует индекс номенклатуры дел.
							|Включить учет по номенклатуре дел?'");
			
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		Отказ = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.ЯвляетсяЗаявкойНаОплату Тогда
		ШаблонДокумента.Стороны.Очистить();
		СторонаПлательщик = ШаблонДокумента.Стороны.Добавить();
		СторонаПлательщик.Сторона = ШаблонДокумента.Организация;
		СторонаПлательщик.Наименование = ПредопределенноеЗначение("Справочник.НаименованияСторон.Плательщик");
		СторонаПолучатель = ШаблонДокумента.Стороны.Добавить();
		СторонаПолучатель.Сторона = Получатель;
		СторонаПолучатель.Наименование = ПредопределенноеЗначение("Справочник.НаименованияСторон.Получатель");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если Не ОбязательноеУказаниеОтветственногоНачальноеЗначение 
			И Объект.ОбязательноеУказаниеОтветственного
			И Не ПоказанВопросПроОбязательноеУказаниеОтветственного Тогда 
			
			ТекстСообщенияОбОшибке = "";
			
			ЧислоДокументов1 = ПолучитьЧислоДокументовСоЗначениемРеквизита(Объект.Ссылка,
				"Ответственный",
				ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"),,
				ТекстСообщенияОбОшибке);
			Если ТекстСообщенияОбОшибке <> "" Тогда
				Отказ = Истина;
				ПоказатьПредупреждение(, ТекстСообщенияОбОшибке);
				Возврат;
			КонецЕсли;
			
			ЧислоДокументов2 = ПолучитьЧислоДокументовСоЗначениемРеквизита(Объект.Ссылка,
				"Ответственный",
				ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка"),,
				ТекстСообщенияОбОшибке);
			Если ТекстСообщенияОбОшибке <> "" Тогда
				Отказ = Истина;
				ПоказатьПредупреждение(, ТекстСообщенияОбОшибке);
				Возврат;
			КонецЕсли;
			
			ЧислоДокументов3 = ПолучитьЧислоДокументовСоЗначениемРеквизита(Объект.Ссылка,
				"Ответственный",
				Неопределено,,
				ТекстСообщенияОбОшибке);
			Если ТекстСообщенияОбОшибке <> "" Тогда
				Отказ = Истина;
				ПоказатьПредупреждение(, ТекстСообщенияОбОшибке);
				Возврат;
			КонецЕсли;
			
			ЧислоДокументов = ЧислоДокументов1 + ЧислоДокументов2 + ЧислоДокументов3;
			
			Если ЧислоДокументов <> 0 Тогда
				Отказ = Истина;
				ПоказатьДиалогОбязательноеУказаниеОтветственного(ПараметрыЗаписи, ЧислоДокументов);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
	
		Если Не ВестиУчетПоОрганизациямНачальноеЗначение 
			И Объект.ВестиУчетПоОрганизациям
			И Не ПоказанВопросНазначитьОрганизацию Тогда 
			
			ТекстСообщенияОбОшибке = "";
			ЧислоДокументов = ПолучитьЧислоДокументовСоЗначениемРеквизита(Объект.Ссылка,
				"Организация",
				ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"),,
				ТекстСообщенияОбОшибке);
			
			Если ТекстСообщенияОбОшибке <> "" Тогда
				Отказ = Истина;
				ПоказатьПредупреждение(, ТекстСообщенияОбОшибке);
				Возврат;
			КонецЕсли;
			
			Если ЧислоДокументов <> 0 Тогда
				Отказ = Истина;
				ПоказатьДиалогНазначениеОрганизации(ПараметрыЗаписи, ЧислоДокументов);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
	
		Если ВестиУчетПоОрганизациямНачальноеЗначение 
			И Не Объект.ВестиУчетПоОрганизациям
			И Не ПоказанВопросОчиститьОрганизацию Тогда 
			
			ТекстСообщенияОбОшибке = "";
			ЧислоДокументов = ПолучитьЧислоДокументовСоЗначениемРеквизита(Объект.Ссылка,
				"Организация",
				ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"),
				"<>",
				ТекстСообщенияОбОшибке);
				
			Если ТекстСообщенияОбОшибке <> "" Тогда
				Отказ = Истина;
				ПоказатьПредупреждение(, ТекстСообщенияОбОшибке);
				Возврат;
			КонецЕсли;
			
			Если ЧислоДокументов <> 0 Тогда
				
				Если ЧислоДокументов >= 100 Тогда
					Отказ = Истина;
					ПоказатьДиалогОчисткаОрганизации(ПараметрыЗаписи, ЧислоДокументов);
					Возврат;
				Иначе
					ПараметрыЗаписи.Вставить("Организация", ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ФормаДокументаНачальноеЗначение <> Объект.ФормаДокумента
			И Объект.ФормаДокумента <> ПредопределенноеЗначение("Перечисление.ВариантыФормДокументов.БумажнаяИлиЭлектронная")
			И Не ПараметрыЗаписи.Свойство("ПоказанВопросСменыФормы") Тогда
			
			ТекстСообщенияОбОшибке = "";
			ЧислоПравил = ПравилаОбработкиВызовСервера.ЧислоНеКорректныхНастроекПодписания(
				Объект.Ссылка,
				Объект.ФормаДокумента,
				ТекстСообщенияОбОшибке);
				
			Если ТекстСообщенияОбОшибке <> "" Тогда
				Отказ = Истина;
				ПоказатьПредупреждение(, ТекстСообщенияОбОшибке);
				Возврат;
			КонецЕсли;
			
			Если ЧислоПравил <> 0 Тогда
				Отказ = Истина;
				ПоказатьДиалогСменаФормата(ПараметрыЗаписи, ЧислоПравил);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		
		Если (ЯвляетсяВходящейКорреспонденциейНачальноеЗначение <> Объект.ЯвляетсяВходящейКорреспонденцией
			Или ЯвляетсяИсходящейКорреспонденциейНачальноеЗначение <> Объект.ЯвляетсяИсходящейКорреспонденцией
			Или ЯвляетсяКомплектомДокументовНачальноеЗначение <> Объект.ЯвляетсяКомплектомДокументов)
			И Не ПараметрыЗаписи.Свойство("ПоказанВопросСменыКорреспонденции") Тогда
			
			ТекстСообщенияОбОшибке = "";
			ЧислоДокументов = ЧислоДокументовЭтогоВида(Объект.Ссылка);
				
			Если ЧислоДокументов <> 0 Тогда
				Отказ = Истина;
				ПоказатьДиалогСменыКорреспонденции(ПараметрыЗаписи, ЧислоДокументов);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	// Для новых видов, всегда делаем простой шаблон.
	// Таким образом, после создания вида документа, можно будет сразу создавать документ по шаблону.
	Иначе 
		ТребуетсяЗаписатьШаблон = Истина;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ЭтоНовый", Объект.Ссылка.Пустая());
	
	ПроверитьЗаполнениеНастроекЭДОПередЗаписью(ПараметрыЗаписи, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
		
	Если ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
		ПараметрыЗаписи.Вставить("ПредыдущаяФормаДокумента", 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект.Ссылка, "ФормаДокумента"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийОбъект.Ссылка)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект.Ссылка, "Наименование") <> Объект.Наименование Тогда 
		ПараметрыЗаписи.Вставить("ИзменилосьНаименование", Истина);
	КонецЕсли;
	
	ПередатьНастройкиЭДОДляЗаписи(ТекущийОбъект);
	
	ДействияСервер.ВидОбъектаПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	МультиязычностьСервер.ПередЗаписьюНаСервере(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогОбязательноеУказаниеОтветственного(ПараметрыЗаписи, ЧислоДокументов)
	
	НужноПоказатьДиалогОбязательноеУказаниеОтветственного = Ложь;
	ПоказанВопросПроОбязательноеУказаниеОтветственного = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПередЗаписьюПродолжениеПослеВопросаОбязательноеУказаниеОтветственного",
		ЭтотОбъект,
		ПараметрыЗаписи);
		
	ТекстВопроса = СтрШаблон(
		НСтр("ru = 'Включено обязательное указание ответственного за документ. 
			|У некоторых документов вида ""%1"" ответственный не указан (%2 шт).
			|Заполнить ответственного из реквизита ""Подготовил""?'"),
		Объект.Ссылка, 
		ЧислоДокументов);
		
	Кнопки = Новый СписокЗначений;	
	Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Заполнить'"));
	Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не заполнять'"));
	Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
	
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,,КодВозвратаДиалога.Да);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВопросаОбязательноеУказаниеОтветственного(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да И Результат <> КодВозвратаДиалога.Нет Тогда 
		ПоказанВопросПроОбязательноеУказаниеОтветственного = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ЗаполнитьОтветственногоАвтоматически = Истина;
	КонецЕсли;
	
	Если Записать(ПараметрыЗаписи) Тогда
		
		Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
			ЗакрытьПослеЗаписи();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогНазначениеОрганизации(ПараметрыЗаписи, ЧислоДокументов)
	
	ПоказанВопросНазначитьОрганизацию = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПередЗаписьюПродолжениеПослеВопросаПроНазначениеОрганизации",
		ЭтотОбъект,
		ПараметрыЗаписи);
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЧислоДокументовБезОрганизации", ЧислоДокументов);
	
	ОткрытьФорму("Справочник.ВидыДокументов.Форма.НазначениеОрганизации",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВопросаПроНазначениеОрганизации(Результат, ПараметрыЗаписи) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("СправочникСсылка.Организации")
		И Результат <> КодВозвратаДиалога.Нет Тогда 
		ПоказанВопросНазначитьОрганизацию = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.Организации") Тогда 
		ПараметрыЗаписи.Вставить("Организация", Результат);
	КонецЕсли;
	
	Если Записать(ПараметрыЗаписи) Тогда
		
		Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
			ЗакрытьПослеЗаписи();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогОчисткаОрганизации(ПараметрыЗаписи, ЧислоДокументов)
	
	ПоказанВопросОчиститьОрганизацию = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПередЗаписьюПродолжениеПослеВопросаПроОчисткуОрганизации",
		ЭтотОбъект,
		ПараметрыЗаписи);
		
	Если ЧислоДокументов % 10 = 1
		И ЧислоДокументов <> 11 Тогда
		ЧислоДокументовСтрокой = СтрШаблон(НСтр("ru = '%1 документа'"), ЧислоДокументов);
	Иначе
		ЧислоДокументовСтрокой = СтрШаблон(НСтр("ru = '%1 документов'"), ЧислоДокументов);
	КонецЕсли;
	
	ТекстВопроса = СтрШаблон(
		РедакцииКонфигурацииКлиентСервер.ВопросПоказатьДиалогОчисткаОрганизации(),
		ЧислоДокументовСтрокой);
		
	ПоказатьВопрос(ОписаниеОповещения,
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВопросаПроОчисткуОрганизации(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		ПоказанВопросОчиститьОрганизацию = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ПараметрыЗаписи.Вставить("Организация", ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	КонецЕсли;
	
	Если Записать(ПараметрыЗаписи) Тогда
		
		Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
			ЗакрытьПослеЗаписи();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогСменаФормата(ПараметрыЗаписи, ЧислоПравил)
	
	ПоказанВопросОчиститьОрганизацию = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПередЗаписьюПродолжениеПослеВопросаПроСменуФормы",
		ЭтотОбъект,
		ПараметрыЗаписи);
		
	ЧислоПравилСтрокой = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		НСтр("ru = ';%1 настройки;;%1 настроек;%1 настроек;%1 настройки'"),
		ЧислоПравил);
	
	ТекстВопроса = СтрШаблон(НСтр(
		"ru = 'Изменилась форма документа. У %1 подписания 
		|для этого вида требуется изменить ""Способ подписания"".
		|
		|Продолжить?'"),
		ЧислоПравилСтрокой);
		
	ПоказатьВопрос(ОписаниеОповещения,
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВопросаПроСменуФормы(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаписи.Вставить("ПоказанВопросСменыФормы", Истина); 
		ПараметрыЗаписи.Вставить("ФормаДокумента", Объект.ФормаДокумента);
	КонецЕсли;
	
	Если Записать(ПараметрыЗаписи) Тогда
		
		Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
			ЗакрытьПослеЗаписи();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВопросаОВключенииУчетаПоНоменклатуреДел(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.ВестиУчетПоНоменклатуреДел = Истина;
	ПараметрыЗаписи.Вставить("ВключенУчетПоНоменклатуреДел", Истина);
	Если Записать(ПараметрыЗаписи) Тогда
		ПослеЗаписиКлиент(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПослеЗаписиКлиент(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("НетНастройкиНумерации", Нумерация.НетНастройкиНумерации(ТекущийОбъект.Ссылка));
	
	// Протоколирование работы пользователей
	ПротоколированиеРаботыСотрудников.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(Объект.Ссылка);
	
	ИндексНумерации = СокрЛП(ИндексНумерации);
	Если ИндексНумерации <> ИндексНумерацииПриОткрытии Тогда 
		Если ЗначениеЗаполнено(ИндексНумерации) Тогда 
			РегистрыСведений.ИндексыНумерации.ЗаписатьИндексНумерации(Объект.Ссылка, ИндексНумерации);
		Иначе 
			РегистрыСведений.ИндексыНумерации.УдалитьИндексНумерации(Объект.Ссылка);
		КонецЕсли;
		
		ИндексНумерацииПриОткрытии = ИндексНумерации;
	КонецЕсли;
	
	Если ЗаполнитьОтветственногоАвтоматически Тогда
		ЗаполнитьОтветственногоАвтоматически = Ложь;
		ВыполнитьЗаполнениеОтветственного(ТекущийОбъект.Ссылка);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("Организация") Тогда
		ВыполнитьИзменениеОрганизации(ТекущийОбъект.Ссылка, ПараметрыЗаписи.Организация);
		ПараметрыЗаписи.Удалить("Организация");
	КонецЕсли;
	
	ПоказанВопросПроОбязательноеУказаниеОтветственного = Ложь;
	ПоказанВопросНазначитьОрганизацию = Ложь;
	ПоказанВопросОчиститьОрганизацию = Ложь;
	
	ВестиУчетПоОрганизациямНачальноеЗначение = Объект.ВестиУчетПоОрганизациям;
	ОбязательноеУказаниеОтветственногоНачальноеЗначение = Объект.ОбязательноеУказаниеОтветственного;
	ЯвляетсяЗаявкойНаОплатуНачальноеЗначение = Объект.ЯвляетсяЗаявкойНаОплату;
	ФормаДокументаНачальноеЗначение = Объект.ФормаДокумента;
	
	ЯвляетсяВходящейКорреспонденциейНачальноеЗначение = Объект.ЯвляетсяВходящейКорреспонденцией;
	ЯвляетсяИсходящейКорреспонденциейНачальноеЗначение = Объект.ЯвляетсяИсходящейКорреспонденцией;
	ЯвляетсяКомплектомДокументовНачальноеЗначение = Объект.ЯвляетсяКомплектомДокументов;
	
	ОбновитьРолиФайлов(ТекущийОбъект);
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовый") И ПараметрыЗаписи.ЭтоНовый Тогда 
		Тематики.Параметры.УстановитьЗначениеПараметра("ВидДокумента", Объект.Ссылка);
	КонецЕсли;
	
	НовыйРеестр = ЗаписатьНастройкиРеестра();
	ПараметрыЗаписи.Вставить("НовыйРеестр", НовыйРеестр);
	
	Элементы.НастройкаГенерацииШтамповЭП.Доступность = Истина;
	ЗаполнитьПредставлениеНастройкиШтампаЭП();
	
	Если ПараметрыЗаписи.Свойство("ФормаДокумента") Тогда
		ПравилаОбработкиСервер.ИзмененитьСпособПодписанияНастроек(
			ТекущийОбъект.Ссылка, ПараметрыЗаписи.ФормаДокумента);
		ПараметрыЗаписи.Удалить("ФормаДокумента");
	КонецЕсли;

	Если ПараметрыЗаписи.Свойство("СменаКорреспонденции") Тогда
		
		// запишем в очередь.   
		РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
			Метаданные.Справочники.ВидыДокументов.ПолноеИмя(),
			Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка(),
			ТекущийОбъект.Ссылка);
		
		ПараметрыЗаписи.Удалить("СменаКорреспонденции");
	КонецЕсли;
	
	ДействияСервер.ВидОбъектаПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	Если РолиКоличествоНачальное <> 0 И РолиКоличество = 0 Тогда
		// очистим роли файлов во всех шаблонах.
		ОчиститьРолиФайловВоВсехШаблонах();
		
		Если КоличествоШаблонов = 1 Тогда
			// очистим роли файлов на форме
			Для Каждого Стр Из Файлы Цикл
				Стр.РольФайла = ""; // это просто очистка представления
			КонецЦикла;	
		КонецЕсли;	
		
	КонецЕсли;	
	
	ЗаполнитьНастройкиЭДО(ТекущийОбъект);
	
	МультиязычностьСервер.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьОтборСпискаТематик(Тематики, Настройки);
	Элементы.ПоказыватьУдаленныеТематики.Пометка = ПоказыватьУдаленныеТематики;
	Элементы.ПоказыватьНеДействующиеТематики.Пометка = ПоказыватьНеДействующиеТематики;
	КоличествоТематик = КоличествоТематикДляВида(Объект.Ссылка,
		ПоказыватьУдаленныеТематики, ПоказыватьНеДействующиеТематики);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура Подключаемый_Открытие(Элемент, СтандартнаяОбработка)
    МультиязычностьКлиент.ПриОткрытии(ЭтотОбъект, Объект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВРеестрыПриИзменении(Элемент)
	
	Элементы.НастроитьРеестр.Доступность = ВключитьВРеестры;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпцияПриИзменении(Элемент)
	
	УстановитьДоступностьОпций(ЭтотОбъект);
	
	Если Элемент = Элементы.ВестиУчетПоТематикам Тогда
		ЗаполнитьРазрешенияНаСоздание();
	КонецЕсли;
	
	Если Элемент = Элементы.Комментарий Тогда
		ТребуетсяЗаписатьШаблон = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетПоКонтрагентамПриИзменении(Элемент)
	
	Если Объект.ВестиУчетПоКонтрагентам Тогда
		Объект.ВестиУчетСторон = Ложь;
		Объект.ВариантПодписания = ПредопределенноеЗначение("Перечисление.ВариантыПодписания.НеПодписывается");
		ОбновитьРеквизитыСторон();
	КонецЕсли;
	
	УстановитьДоступностьОпций(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетСторонПриИзменении(Элемент)
	
	Если Объект.ВестиУчетСторон Тогда
		Объект.ВестиУчетПоКонтрагентам = Ложь;
		Объект.ВариантПодписания = ПредопределенноеЗначение("Перечисление.ВариантыПодписания.МыИКонтрагенты");
		ТребуетсяЗаписатьШаблон = Истина;
		ОбновитьРеквизитыСторон();
	Иначе
		Объект.ВариантПодписания = ПредопределенноеЗначение("Перечисление.ВариантыПодписания.НеПодписывается");
	КонецЕсли;
	
	УстановитьДоступностьОпций(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантПодписанияПриИзменении(Элемент)
	
	ТребуетсяЗаписатьШаблон = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетТоваровИУслугПриИзменении(Элемент)
	
	Если Объект.ВестиУчетТоваровИУслуг И Не Объект.УчитыватьСуммуДокумента Тогда 
		Объект.УчитыватьСуммуДокумента = Истина;
	КонецЕсли;
	
	УстановитьДоступностьОпций(ЭтотОбъект)
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПоСтатьямДДСПриИзменении(Элемент)
	
	Если Объект.ВестиУчетПоСтатьямДДС И Не Объект.УчитыватьСуммуДокумента Тогда
		Объект.УчитыватьСуммуДокумента = Истина;
	КонецЕсли;
	
	УстановитьДоступностьОпций(ЭтотОбъект)
	
КонецПроцедуры

&НаКлиенте
Процедура ЯвляетсяДоговоромПриИзменении(Элемент)
	
	Если Объект.ЯвляетсяДоговором Тогда
		Объект.ВестиУчетПоКонтрагентам = Ложь;
		Объект.УчитыватьСрокДействия = Истина;
		Объект.УчитыватьСуммуДокумента = Истина;
		Объект.УчитыватьНедействующиеДокументы = Истина;
		Объект.ЯвляетсяКомплектомДокументов = Ложь;
		Объект.ОбязательноеУказаниеОтветственного = Истина;
		Объект.ВестиУчетПоОрганизациям = ИспользоватьУчетПоОрганизациям;
		Объект.ВестиУчетСторон = Истина;
		Объект.ВариантПодписания = ПредопределенноеЗначение("Перечисление.ВариантыПодписания.МыИКонтрагенты");
		ОбновитьРеквизитыСторон();
	КонецЕсли;
	
	УстановитьДоступностьОпций(ЭтотОбъект)
	
КонецПроцедуры

&НаКлиенте
Процедура ЯвляетсяЗаявкойНаОплатуПриИзменении(Элемент)
	
	Объект.НаименованияСторон.Очистить();
	
	Если Объект.ЯвляетсяЗаявкойНаОплату Тогда
		Объект.ВестиУчетПоКонтрагентам = Ложь;
		Объект.ВестиУчетПоСтатьямДДС = Истина;
		Объект.ВестиУчетПоОрганизациям = ИспользоватьУчетПоОрганизациям;
		Объект.ВестиУчетСторон = Истина;
		Объект.ИспользоватьСрокИсполнения = Истина;
		Объект.УчитыватьНедействующиеДокументы = Ложь;
		Объект.УчитыватьСрокДействия = Ложь;
		Объект.УчитыватьСуммуДокумента = Истина;
		Объект.ЯвляетсяДоговором = Ложь;
		Объект.ЯвляетсяКомплектомДокументов = Ложь;
		Объект.ЯвляетсяВходящейКорреспонденцией = Ложь;
		Объект.ЯвляетсяИсходящейКорреспонденцией = Ложь;
		Объект.ЯвляетсяОбращениемОтГраждан = Ложь;
		
		Объект.ВариантПодписания = ПредопределенноеЗначение("Перечисление.ВариантыПодписания.НеПодписывается");
		НаименованиеСтороны1 = Объект.НаименованияСторон.Добавить();
		НаименованиеСтороны1.НаименованиеСтороны = ПредопределенноеЗначение("Справочник.НаименованияСторон.Плательщик");
		НаименованиеСтороны1.ДопустимыОрганизации = Истина;
		НаименованиеСтороны1.ДопустимыКонтрагенты = Ложь;
		НаименованиеСтороны1.ДопустимыСотрудники = Ложь;
		НаименованиеСтороны2 = Объект.НаименованияСторон.Добавить();
		НаименованиеСтороны2.ДопустимыОрганизации = Ложь;
		НаименованиеСтороны2.ДопустимыКонтрагенты = Истина;
		НаименованиеСтороны2.ДопустимыСотрудники = Истина;
		НаименованиеСтороны2.НаименованиеСтороны = ПредопределенноеЗначение("Справочник.НаименованияСторон.Получатель");
	КонецЕсли;
	
	УстановитьДоступностьОпций(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЯвляетсяВходящейКорреспонденциейПриИзменении(Элемент)
	
	Если Объект.ЯвляетсяВходящейКорреспонденцией Тогда 
		
		Объект.ВестиУчетПоКонтрагентам = Истина;
		Объект.ВестиУчетПоОрганизациям = Истина;
		Объект.ВестиУчетСторон = Ложь;
		Объект.ВестиУчетПоАдресатам = Ложь;
		
		Объект.ЯвляетсяДоговором = Ложь;
		Объект.ЯвляетсяКомплектомДокументов = Ложь;
		Объект.ЯвляетсяИсходящейКорреспонденцией = Ложь;
		Объект.ЯвляетсяЗаявкойНаОплату = Ложь;
		
		НесколькоКонтрагентов = Ложь;
		Если ШаблонДокумента.Контрагенты.Количество() > 0 Тогда
			Строка = ШаблонДокумента.Контрагенты[0];		
			ШаблонДокумента.Контрагент = Строка.Контрагент;
			ШаблонДокумента.КонтактноеЛицо = Строка.КонтактноеЛицо;
			ШаблонДокумента.Контрагенты.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Объект.ЯвляетсяВходящейКорреспонденцией Тогда 
		Объект.ЯвляетсяОбращениемОтГраждан = Ложь;
	КонецЕсли;
	
	ВестиУчетСторонПриИзменении(Неопределено);
	
	РаботаСКорреспонденциейКлиент.УстановитьЗаголовкиЭлементовФормы(ЭтотОбъект, 
		Объект.ЯвляетсяВходящейКорреспонденцией,
		Объект.ЯвляетсяИсходящейКорреспонденцией,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЯвляетсяИсходящейКорреспонденциейПриИзменении(Элемент)
	
	Если Объект.ЯвляетсяИсходящейКорреспонденцией
		И Не Объект.ВестиУчетПоКонтрагентам Тогда 
		Объект.ВестиУчетПоКонтрагентам = Истина;
		Объект.ВестиУчетСторон = Ложь;
		Объект.ВестиУчетПоАдресатам = Ложь;
	КонецЕсли;
	
	Если Объект.ЯвляетсяИсходящейКорреспонденцией Тогда
		Объект.ЯвляетсяДоговором = Ложь;
		Объект.ЯвляетсяКомплектомДокументов = Ложь;
		Объект.ЯвляетсяВходящейКорреспонденцией = Ложь;
		Объект.ЯвляетсяОбращениемОтГраждан = Ложь;
		Объект.ЯвляетсяЗаявкойНаОплату = Ложь;
		Объект.ВестиУчетПоОрганизациям = Истина;
	КонецЕсли;
	
	Если Не Объект.ЯвляетсяИсходящейКорреспонденцией Тогда 
		Объект.УчитыватьВходящийНомерИДатуПолучателя = Ложь;
	КонецЕсли;
	
	ВестиУчетСторонПриИзменении(Неопределено);
	
	РаботаСКорреспонденциейКлиент.УстановитьЗаголовкиЭлементовФормы(ЭтотОбъект, 
		Объект.ЯвляетсяВходящейКорреспонденцией,
		Объект.ЯвляетсяИсходящейКорреспонденцией,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЯвляетсяОбращениемОтГражданПриИзменении(Элемент)
	
	Если ВидДокументаУчаствуетВОтраженииДокументовЭДО Тогда
		
		ТекстСообщения = 
			НСтр("ru='Нельзя сделать этот вид документа обращением, так как он используется при отражении документов ЭДО'");
		ПредупреждениеАсинх(ТекстСообщения);
		
		Объект.ЯвляетсяОбращениемОтГраждан = Ложь;
		Возврат;
		
	КонецЕсли;
	
	Если Объект.ЯвляетсяОбращениемОтГраждан Тогда
		Объект.ЯвляетсяВходящейКорреспонденцией = Истина;
		Объект.ЯвляетсяИсходящейКорреспонденцией = Ложь;
		Объект.ВестиУчетПоОрганизациям = Истина;
		Объект.ИспользоватьСрокИсполнения = Истина;
		
		Если Не Объект.ВестиУчетПоКонтрагентам
			И Не Объект.ВестиУчетСторон Тогда 
			Объект.ВестиУчетПоКонтрагентам = Истина;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьОпций(ЭтотОбъект)
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПоНоменклатуреДелПриИзменении(Элемент)
	
	Если Объект.ВестиУчетПоНоменклатуреДел Тогда
		Объект.ВестиУчетПоОрганизациям = ИспользоватьУчетПоОрганизациям;
	КонецЕсли;
	
	УстановитьДоступностьОпций(ЭтотОбъект)
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуПодбораКатегорийПродолжение",
		ЭтотОбъект,
		Новый Структура);

	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаКатегорий(
		ШаблонДокумента.Категории, ОписаниеОповещения); 
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораКатегорийПродолжение(СписокКатегорийДанных, Параметры)Экспорт 
	
	Модифицированность = Параметры.Модифицированность Или Модифицированность;
		
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СотрудникиКлиент.ВыбратьСотрудникаИзАдреснойКниги(Элемент, ШаблонДокумента.Ответственный);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыЗначениеРеквизитаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСШаблонамиДокументовКлиент.ПоказатьФормуВыбораЗначения(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СотрудникиКлиент.ВыбратьСотрудникаИзАдреснойКниги(Элемент, ШаблонДокумента.Адресат);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СкопироватьКонтрагентаИзРеквизитовВСписок(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	СкопироватьКонтрагентаИзРеквизитовВСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОтправкиПриИзменении(Элемент)
	
	СкопироватьКонтрагентаИзРеквизитовВСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыКонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Контрагенты.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
		СтандартнаяОбработка = Ложь;
		
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""Контрагент""'"),,
			"Объект.Контрагенты["+ Формат(ТекущиеДанные.НомерСтроки-1, "ЧН=0; ЧГ=0") +"].Контрагент",,);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьКонтрагентов(Форма)
	
	Форма.Элементы.ГруппаКонтрагент.Видимость = 
		Форма.Объект.ВестиУчетПоКонтрагентам
		И Не Форма.НесколькоКонтрагентов
		И Не Форма.Объект.ВестиУчетСторон;
		
	Форма.Элементы.Контрагенты.Видимость =
		Форма.Объект.ВестиУчетПоКонтрагентам
		И Форма.НесколькоКонтрагентов
		И Не Форма.Объект.ВестиУчетСторон;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьКонтрагентаИзРеквизитовВСписок(УстановитьОсновноеКонтактноеЛицо = Ложь)
	
	ШаблонДокумента.Контрагенты.Очистить();
	
	Строка = ШаблонДокумента.Контрагенты.Добавить();
	Строка.Контрагент = ШаблонДокумента.Контрагент;
	Если Не ЗначениеЗаполнено(ШаблонДокумента.КонтактноеЛицо) И УстановитьОсновноеКонтактноеЛицо Тогда
		ШаблонДокумента.КонтактноеЛицо = РаботаСКонтрагентамиВызовСервера.ОсновноеКонтактноеЛицоКонтрагента(
			Строка.Контрагент);
	КонецЕсли;
	Строка.КонтактноеЛицо = ШаблонДокумента.КонтактноеЛицо;
	Если Объект.ЯвляетсяИсходящейКорреспонденцией Тогда
		Строка.Способ = ШаблонДокумента.Способ;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Выбор получателя

&НаКлиенте
Процедура ПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ВыбиратьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ВыбиратьСотрудников", Истина);
	ПараметрыФормы.Вставить("ПодменятьПользователейСотрудниками", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор получателя'"));
	Если ЗначениеЗаполнено(Получатель) Тогда
		ПараметрыФормы.Вставить("ВыбранныеАдресаты", Получатель);
	КонецЕсли;
	ОткрытьФорму("Справочник.АдреснаяКнига.Форма.ФормаСписка",
		ПараметрыФормы,
		Элемент,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПолучательОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Получатель = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
КонецПроцедуры

&НаКлиенте
Процедура ПолучательАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ЗаявкиНаОплатуВызовСервера.ДанныеВыбораПолучателя(Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ЗаявкиНаОплатуВызовСервера.ДанныеВыбораПолучателя(Текст);
	Иначе
		Получатель = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФормаДокументаПриИзменении(Элемент)
	
	Если Объект.ФормаДокумента = ПредопределенноеЗначение("Перечисление.ВариантыФормДокументов.Бумажная")  
		И (КоличествоШаблонов = 1 Или Объект.Ссылка.Пустая()) Тогда
		ШаблонДокумента.ФормаДокумента = Объект.ФормаДокумента;
		
	ИначеЕсли Объект.ФормаДокумента = ПредопределенноеЗначение("Перечисление.ВариантыФормДокументов.Электронная") Тогда 
		Объект.ОбязателенФайлОригинала = Ложь;
		Объект.УчитыватьМестоХранения = ПредопределенноеЗначение(
			"Перечисление.ВариантыИспользованияПолейХранения.НеУчитывать");
		Объект.УчитыватьОтветственногоЗаХранение = ПредопределенноеЗначение(
			"Перечисление.ВариантыИспользованияПолейХранения.НеУчитывать");
		
		Если КоличествоШаблонов = 1 Или Объект.Ссылка.Пустая() Тогда
			ШаблонДокумента.ФормаДокумента = Объект.ФормаДокумента;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ИспользоватьЭДО И (Не ЗначениеЗаполнено(Объект.ФормаДокумента)
		Или Объект.ФормаДокумента = ПредопределенноеЗначение("Перечисление.ВариантыФормДокументов.Бумажная")) Тогда
			Объект.ИспользоватьЭДО = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьОпций(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаДокументаОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ВариантыФормДокументов.Бумажная")
		И ВидДокументаУчаствуетВОтраженииДокументовЭДО  Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекстСообщения = 
			НСтр("ru='Нельзя изменить форму на бумажную, так как этот вид
			|документа используется при отражении документов ЭДО'");
		
		ПредупреждениеАсинх(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонФормаДокументаПриИзменении(Элемент)
	
	ОбновитьВидимостьРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонФормаДокументаОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ВариантыФормДокументов.Бумажная")
		И ВидДокументаУчаствуетВОтраженииДокументовЭДО  Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекстСообщения = 
			НСтр("ru='Нельзя изменить форму на бумажную, так как этот шаблон используется при отражении документов ЭДО'");
		
		ПредупреждениеАсинх(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьМестоХраненияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.УчитыватьМестоХранения) Тогда 
		Объект.УчитыватьМестоХранения = ПредопределенноеЗначение(
			"Перечисление.ВариантыИспользованияПолейХранения.НеУчитывать");
	КонецЕсли;
	
	УстановитьДоступностьОпций(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьМестоХраненияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьОтветственногоЗаХранениеПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.УчитыватьОтветственногоЗаХранение) Тогда 
		Объект.УчитыватьОтветственногоЗаХранение = ПредопределенноеЗначение(
			"Перечисление.ВариантыИспользованияПолейХранения.НеУчитывать");
	КонецЕсли;
	
	УстановитьДоступностьОпций(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьОтветственногоЗаХранениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с местом хранения

&НаКлиенте
Процедура МестоХраненияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораМестаХранения(Текст);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МестоХраненияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораМестаХранения(Текст);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйЗаХранениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСАдреснойКнигойКлиент.ВыбратьОтветсвенногоЗаХранение(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйЗаХранениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ШаблонДокумента.ОтветственныйЗаХранение = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Работа с номенклатурой дел

&НаКлиенте
Процедура НоменклатураДелНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Контрагенты = Новый Массив;
	Если Объект.ВестиУчетСторон Тогда 
		Для Каждого Строка Из ШаблонДокумента.Стороны Цикл
			Если ЗначениеЗаполнено(Строка.Сторона)
				И ТипЗнч(Строка.Сторона) = Тип("СправочникСсылка.Контрагенты") Тогда 
				Контрагенты.Добавить(Строка.Сторона);
			КонецЕсли;
		КонецЦикла;
	Иначе 
		Для Каждого Строка Из ШаблонДокумента.Контрагенты Цикл
			Контрагенты.Добавить(Строка.Контрагент);
		КонецЦикла;
	КонецЕсли;
	
	ДелопроизводствоКлиент.НоменклатураДелНачалоВыбора(
		ЭтотОбъект, Элемент, СтандартнаяОбработка, Контрагенты, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДелАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
		
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораНоменклатурыДел(Текст, ШаблонДокумента.Организация,,
			ШаблонДокумента.ФормаДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДелОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораНоменклатурыДел(Текст, ШаблонДокумента.Организация,,
			ШаблонДокумента.ФормаДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаШаблона = Элемент.ТекстРедактирования;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидДокумента", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ШаблонНаименования", СтрокаШаблона);
	ПараметрыОткрытия.Вставить("Шаблон", ШаблонДокумента.Ссылка);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаголовокНачалоВыбораПродолжить", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ШаблонНаименованияДокумента", ПараметрыОткрытия,,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокНачалоВыбораПродолжить(Результат, Параметры) Экспорт 
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ШаблонДокумента.Заголовок = Результат;
	
КонецПроцедуры

&НаКлиенте
Процедура ТематикаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораТематики(
			Текст, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТематикаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораТематики(
			Текст, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДлительностьИсполненияПриИзменении(Элемент)
	
	ИмяЭлементаДляОбновленияПредставлений = "ШаблонСрокИсполненияУказанВРабочихДнях";
	КоличествоДнейДляСклонения = ШаблонДокумента.ДлительностьИсполнения;
	ПодключитьОбработчикОжидания("ОбновитьСклоненияДней", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НормативныйСрокИсполненияПриИзменении(Элемент)
	
	ИмяЭлементаДляОбновленияПредставлений = "СрокИсполненияУказанВРабочихДнях";
	КоличествоДнейДляСклонения = Объект.СрокИсполнения;
	ПодключитьОбработчикОжидания("ОбновитьСклоненияДней", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаОбработкиНажатие(Элемент, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.ПравилаОбработкиНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОбращенияПриИзменении(Элемент)
	
	Если ШаблонДокумента.ВидОбращения = ПредопределенноеЗначение("Перечисление.ВидыОбращенийГраждан.Анонимное") Тогда 
		ШаблонДокумента.Контрагент = Неопределено;
		ШаблонДокумента.КонтактноеЛицо = Неопределено;
		ШаблонДокумента.Контрагенты.Очистить();
		Элементы.Контрагент.Доступность = Ложь;
		Элементы.КонтактноеЛицо.Доступность = Ложь;
	Иначе	
		Элементы.Контрагент.Доступность = Истина;
		Элементы.КонтактноеЛицо.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВажностьПриИзменении(Элемент)
	
	ОбновитьПредставлениеВажности(ШаблонДокумента.Важность, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВажностьОчистка(Элемент, СтандартнаяОбработка)
	
	ОбновитьПредставлениеВажности(ШаблонДокумента.Важность, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВажностьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	ДанныеВыбора.Добавить(
		ПредопределенноеЗначение("Перечисление.ВариантыВажностиОбъектов.Высокая"),
		Строка(ПредопределенноеЗначение("Перечисление.ВариантыВажностиОбъектов.Высокая")),
		,
		БиблиотекаКартинок.ВажностьВысокая);
	ДанныеВыбора.Добавить(
		ПредопределенноеЗначение("Перечисление.ВариантыВажностиОбъектов.Обычная"),
		Строка(ПредопределенноеЗначение("Перечисление.ВариантыВажностиОбъектов.Обычная")),
		,
		БиблиотекаКартинок.ВажностьНеЗадана);
	ДанныеВыбора.Добавить(
		ПредопределенноеЗначение("Перечисление.ВариантыВажностиОбъектов.Низкая"),
		Строка(ПредопределенноеЗначение("Перечисление.ВариантыВажностиОбъектов.Низкая")),
		,
		БиблиотекаКартинок.ВажностьНизкая);
		
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаЭДОПриИзменении(Элемент)
	
	ВидДокументаЭДОПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЭДОПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьНастройкиЭДО(Объект.Ссылка);
	КонецЕсли;
		
	УстановитьДоступностьОпции(ЭтотОбъект, "ГруппаОтправлятьПоЭДОКак" , Объект.ИспользоватьЭДО);
	УстановитьДоступностьОпции(ЭтотОбъект, "ГруппаНастройкиПоОтправителюПолучателю" , Объект.ИспользоватьЭДО);
	
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяИзвещениеОПолученииПриИзменении(Элемент)
	
	ЗаполнитьПустыеПоляТаблицыНастроекЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяОтветнаяПодписьПриИзменении(Элемент)
	
	ЗаполнитьПустыеПоляТаблицыНастроекЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматДокументаПриИзменении(Элемент)
	
	ФорматДокументаПриИзмененииНаСервере();
	ОбменЭДОДокументооборотКлиентСервер.УстановитьВидимостьПодсказкиФорматаЭДО(ЭтотОбъект, ФорматДокумента,
		"ФорматДокумента", ИспользоватьЭДОВДокументообороте);
		
КонецПроцедуры

&НаКлиенте
Процедура ФорматДокументаРасширеннаяПодсказкаНажатие(Элемент)
	
	ФорматЭДРасширеннаяПодсказкаНажатие(ФорматДокумента);

КонецПроцедуры

&НаКлиенте
Процедура ФорматДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	Если Элемент.СписокВыбора.Количество() = 1 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаНастроекЭДО

&НаКлиенте
Процедура ТаблицаНастроекЭДОВерсияФорматаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаНастроекЭДО.ТекущиеДанные;
	ФорматыВида = СписокФорматовВидаЭД(ТекущиеДанные.ВидДокументаЭДО);
	Элемент.СписокВыбора.Очистить();
	Для Каждого ФорматВида Из ФорматыВида Цикл
		ЗаполнитьЗначенияСвойств(Элемент.СписокВыбора.Добавить(), ФорматВида);
	КонецЦикла;
	
	Если Элемент.СписокВыбора.Количество() > 1 Тогда
		Элемент.СписокВыбора.Добавить("", ПредставлениеПустойНастройки());
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекЭДОВерсияФорматаОчистка(Элемент, СтандартнаяОбработка)
	
	Если Элемент.СписокВыбора.Количество() = 1 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекЭДОВерсияФорматаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаНастроекЭДО.ТекущиеДанные;
	ТекущиеДанные.ФорматПредставление = ПредставлениеПустойНастройки();
	ЭлементСписка = Элемент.СписокВыбора.НайтиПоЗначению(ТекущиеДанные.Формат);
	Если ЭлементСписка <> Неопределено Тогда
		ТекущиеДанные.ФорматПредставление = ЭлементСписка.Представление;
	КонецЕсли;	
	ТекущиеДанные.ТребуетсяОтветнаяПодпись = Ложь;
	ТекущиеДанные.ТребуетсяИзвещениеОПолучении = Ложь;
	ТекущиеДанные.РедактироватьИзвещение = Ложь;
	ТекущиеДанные.РедактироватьОтветнуюПодпись = Ложь;
	
	РегламентВидаЭД = НастройкаРегламентаВидаЭД(ТекущиеДанные.ВидДокументаЭДО, ТекущиеДанные.Формат);
	Если РегламентВидаЭД <> Неопределено Тогда
		ТекущиеДанные.ТребуетсяОтветнаяПодпись = РегламентВидаЭД.ТребуетсяОтветнаяПодпись;
		ТекущиеДанные.ТребуетсяИзвещениеОПолучении = РегламентВидаЭД.ТребуетсяИзвещениеОПолучении;
		ТекущиеДанные.РедактироватьИзвещение = РегламентВидаЭД.РедактироватьИзвещение;
		ТекущиеДанные.РедактироватьОтветнуюПодпись = РегламентВидаЭД.РедактироватьОтветнуюПодпись;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекЭДОВидДокументаЭДОПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаНастроекЭДО.ТекущиеДанные;
	ТекущиеДанные.Формат = "";
	ТекущиеДанные.ФорматПредставление = "";
	ТекущиеДанные.ТребуетсяОтветнаяПодпись = Ложь;
	ТекущиеДанные.ТребуетсяИзвещениеОПолучении = Ложь;
	ТекущиеДанные.РедактироватьИзвещение = ЗначениеЗаполнено(ТекущиеДанные.ВидДокументаЭДО);
	ТекущиеДанные.РедактироватьОтветнуюПодпись = ЗначениеЗаполнено(ТекущиеДанные.ВидДокументаЭДО);
	ТекущиеДанные.ЭтоФормализованныйДокумент = Ложь;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ВидДокументаЭДО) Тогда
		ТекущиеДанные.ФорматПредставление = ФорматДокументаПредставление;
		ТекущиеДанные.ТребуетсяОтветнаяПодпись = ТребуетсяОтветнаяПодпись;
		ТекущиеДанные.ТребуетсяИзвещениеОПолучении = ТребуетсяИзвещениеОПолучении;	
		Возврат;
	КонецЕсли;
	
	ФорматыВидаЭД = СписокФорматовВидаЭД(ТекущиеДанные.ВидДокументаЭДО);
	Если ФорматыВидаЭД.Количество() = 1 Тогда
		ТекущиеДанные.Формат = ФорматыВидаЭД.Получить(0).Значение;
		ТекущиеДанные.ФорматПредставление = ФорматыВидаЭД.Получить(0).Представление;
		ТекущиеДанные.ЭтоФормализованныйДокумент = Истина;
		ЗаполнитьНастройкиРегламентаТекущихДанныхТаблицы(ТекущиеДанные);
	ИначеЕсли ФорматыВидаЭД.Количество() > 1 Тогда
		ТекущиеДанные.ЭтоФормализованныйДокумент = Истина;
		ТекущиеДанные.ФорматПредставление = ПредставлениеПустойНастройки();
		ТекущиеДанные.РедактироватьИзвещение = Ложь;
		ТекущиеДанные.РедактироватьОтветнуюПодпись = Ложь;
		ЗаполнитьНастройкиРегламентаТекущихДанныхТаблицы(ТекущиеДанные);
	Иначе
		ЗаполнитьНастройкиРегламентаТекущихДанныхТаблицы(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекЭДОВидДокументаЭДООбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, ВыборДобавлением, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаНастроекЭДО.ТекущиеДанные;	
	ОписаниеВидаДокумента = ОписаниеВидаДокументаЭДО(ВыбранноеЗначение);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ОписаниеВидаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекЭДОИдентификаторОтправителяНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением,
		СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаНастроекЭДО.ТекущиеДанные;
	ИдентификаторыПолучателяОтбор = ?(ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторПолучателя),
		ТекущиеДанные.ИдентификаторПолучателя, Неопределено);
	Идентификаторы = ОбменЭДОДокументооборотВызовСервера.ИдентификаторыОтправителя(ТекущиеДанные.Отправитель,
		ТекущиеДанные.Получатель, ИдентификаторыПолучателяОтбор);
	Элемент.СписокВыбора.Очистить();
	Для Каждого Идентификатор Из Идентификаторы Цикл
		ЗаполнитьЗначенияСвойств(Элемент.СписокВыбора.Добавить(), Идентификатор);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекЭДОИдентификаторОтправителяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаНастроекЭДО.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторОтправителя) Тогда
		ТекущиеДанные.ИдентификаторОтправителяПредставление = ПредставлениеПустойНастройки();
		Идентификаторы = ОбменЭДОДокументооборотВызовСервера.ИдентификаторыОтправителя(ТекущиеДанные.Отправитель,
			ТекущиеДанные.Получатель);
		Если Идентификаторы.Количество() = 1 Тогда
			ТекущиеДанные.ИдентификаторОтправителяПредставление = Идентификаторы[0].Значение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекЭДОИдентификаторПолучателяНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением,
		СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаНастроекЭДО.ТекущиеДанные;
	ИдентификаторыОтправителяОтбор = ?(ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторОтправителя),
		ТекущиеДанные.ИдентификаторОтправителя, Неопределено);
	Идентификаторы = ОбменЭДОДокументооборотВызовСервера.ИдентификаторыПолучателя(ТекущиеДанные.Отправитель,
		ТекущиеДанные.Получатель, ИдентификаторыОтправителяОтбор);
	Элемент.СписокВыбора.Очистить();
	Для Каждого Идентификатор Из Идентификаторы Цикл
		ЗаполнитьЗначенияСвойств(Элемент.СписокВыбора.Добавить(), Идентификатор);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекЭДОИдентификаторПолучателяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаНастроекЭДО.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторПолучателя) Тогда
		ТекущиеДанные.ИдентификаторПолучателяПредставление = ПредставлениеПустойНастройки();
		Идентификаторы = ОбменЭДОДокументооборотВызовСервера.ИдентификаторыПолучателя(ТекущиеДанные.Отправитель,
			ТекущиеДанные.Получатель);
		Если Идентификаторы.Количество() = 1 Тогда
			ТекущиеДанные.ИдентификаторПолучателяПредставление = Идентификаторы[0].Значение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекЭДООтправительНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ТаблицаНастроекЭДО.ТекущиеДанные;
	ОтправителиЭД = ОбменЭДОДокументооборотВызовСервера.ОтправителиЭД(ТекущиеДанные.Получатель);
	Если ОтправителиЭД.Количество() <= 10 Тогда
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.ЗагрузитьЗначения(ОтправителиЭД);
	Иначе
		Отбор = Новый Структура("Ссылка", ОтправителиЭД);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ОткрытьФорму("Справочник.Организации.ФормаВыбора", ПараметрыФормы, Элемент);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекЭДООтправительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание,
		СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.ТаблицаНастроекЭДО.ТекущиеДанные;
		ДанныеВыбора = ОбменЭДОДокументооборотВызовСервера.ДанныеВыбораОтправителяЭД(ПараметрыПолученияДанных,
			ТекущиеДанные.Получатель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекЭДООтправительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
		СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.ТаблицаНастроекЭДО.ТекущиеДанные;
		ДанныеВыбора = ОбменЭДОДокументооборотВызовСервера.ДанныеВыбораОтправителяЭД(ПараметрыПолученияДанных,
			ТекущиеДанные.Получатель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекЭДООтправительПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаНастроекЭДО.ТекущиеДанные;
	ТекущиеДанные.ИдентификаторОтправителя = "";
	ТекущиеДанные.ИдентификаторОтправителяПредставление = ПредставлениеПустойНастройки();
	Идентификаторы = ОбменЭДОДокументооборотВызовСервера.ИдентификаторыОтправителя(ТекущиеДанные.Отправитель,
		ТекущиеДанные.Получатель);
	Если Идентификаторы.Количество() = 1 Тогда
		ТекущиеДанные.ИдентификаторОтправителяПредставление = Идентификаторы[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекЭДОПолучательНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ТаблицаНастроекЭДО.ТекущиеДанные;
	ПолучателиЭД = ОбменЭДОДокументооборотВызовСервера.ПолучателиЭД(ТекущиеДанные.Отправитель);
	СписокОтбора = Новый СписокЗначений();
	СписокОтбора.ЗагрузитьЗначения(ПолучателиЭД);
	Если ПолучателиЭД.Количество() <= 10 Тогда
		ДанныеВыбора = СписокОтбора;
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
		ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
		ПараметрыФормы.Вставить("ОтображатьКонтрагентов", Истина);
		ПараметрыФормы.Вставить("ВыбиратьКонтрагентов", Истина);
		ПараметрыФормы.Вставить("ОтображатьОрганизации", Истина);
		
		ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор получателя ЭДО'"));
		ПараметрыФормы.Вставить("СписокОтбора", СписокОтбора);

		ОткрытьФорму("Справочник.АдреснаяКнига.Форма.ФормаСписка", ПараметрыФормы, Элемент, , , , ,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекЭДОПолучательАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание,
		СтандартнаяОбработка)		
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.ТаблицаНастроекЭДО.ТекущиеДанные;
		ДанныеВыбора = ОбменЭДОДокументооборотВызовСервера.ДанныеВыбораПолучателяЭД(ПараметрыПолученияДанных,
			ТекущиеДанные.Отправитель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекЭДОПолучательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
		СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.ТаблицаНастроекЭДО.ТекущиеДанные;
		ДанныеВыбора = ОбменЭДОДокументооборотВызовСервера.ДанныеВыбораПолучателяЭД(ПараметрыПолученияДанных,
			ТекущиеДанные.Отправитель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекЭДОПолучательОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, ВыборДобавлением,
		СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаНастроекЭДО.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Организации") Тогда
		ТекущиеДанные.КартинкаПолучателя = 2;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда
		ТекущиеДанные.КартинкаПолучателя = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекЭДОПолучательПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаНастроекЭДО.ТекущиеДанные;
	ТекущиеДанные.ИдентификаторПолучателя = "";
	ТекущиеДанные.ИдентификаторПолучателяПредставление = ПредставлениеПустойНастройки();
	Идентификаторы = ОбменЭДОДокументооборотВызовСервера.ИдентификаторыПолучателя(ТекущиеДанные.Отправитель,
		ТекущиеДанные.Получатель);
	Если Идентификаторы.Количество() = 1 Тогда
		ТекущиеДанные.ИдентификаторПолучателяПредставление = Идентификаторы[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекЭДОПослеУдаления(Элемент)
	
	ЗаполнитьНомераНастроекЭДО();
	КоличествоНастроекЭДО = ТаблицаНастроекЭДО.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекЭДОПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекЭДОПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если НоваяСтрока Тогда
		ТекущиеДанные.НомерСтроки = ТаблицаНастроекЭДО.Индекс(ТекущиеДанные) + 1;
		ТекущиеДанные.Получатель = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		ТекущиеДанные.Отправлять = Истина;
		ТекущиеДанные.КартинкаОтправителя = 2;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекЭДОПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если НоваяСтрока И Не ОтменаРедактирования Тогда				
		Если Не ЗначениеЗаполнено(ТекущиеДанные.ВидДокументаЭДО) Тогда
			ТекущиеДанные.ФорматПредставление = ФорматДокументаПредставление;
			ТекущиеДанные.ТребуетсяОтветнаяПодпись = ТребуетсяОтветнаяПодпись;
			ТекущиеДанные.ТребуетсяИзвещениеОПолучении = ТребуетсяОтветнаяПодпись;
		КонецЕсли;
		КоличествоНастроекЭДО = ТаблицаНастроекЭДО.Количество();	
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиНумерации

&НаКлиенте
Процедура НастройкиНумерацииПослеУдаления(Элемент)
	
	СформироватьЗаголовокЗакладкиНумерация();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиНумерацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда
		
		ТекущийНумератор = Элементы.НастройкиНумерации.ТекущиеДанные.Нумератор;
		
		Если ЗначениеЗаполнено(ТекущийНумератор) Тогда
			Элементы.НастройкиНумерации.ТекущиеДанные.Назначение = Нумерация.НазначениеНумератора(
				ТекущийНумератор);
		Иначе
			Элементы.НастройкиНумерации.ТекущиеДанные.Назначение = ПредопределенноеЗначение(
				"Перечисление.НазначенияНумераторов.РегистрационныйНомер");
		КонецЕсли;
			
		СформироватьЗаголовокЗакладкиНумерация();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиНумерацииНумероватьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НастройкиНумерации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Список = Новый СписокЗначений;
	Список.Добавить(ПредопределенноеЗначение("Перечисление.СпособыНумерации.Автоматически"),
		НСтр("ru = 'Автоматически'"));
	Список.Добавить(ПредопределенноеЗначение("Перечисление.СпособыНумерации.Вручную"),
		НСтр("ru = 'Вручную'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"НастройкиНумерацииНумероватьНачалоВыбораПослеВыбораТипаНумерации",
		ЭтотОбъект);
	ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура НастройкиНумерацииНумероватьНачалоВыбораПослеВыбораТипаНумерации(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.НастройкиНумерации.ТекущиеДанные;
	ТекущиеДанные.СпособНумерации = ВыбранныйЭлемент.Значение;
	
	Если ТекущиеДанные.СпособНумерации = ПредопределенноеЗначение("Перечисление.СпособыНумерации.Автоматически") Тогда 
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"НастройкиНумерацииНумероватьНачалоВыбораПродолжение",
			ЭтотОбъект);
			
		
		ПараметрыФормы = Новый Структура("ТекущаяСтрока", ТекущиеДанные.Нумератор);
		
		Если Не Объект.ИспользоватьВременныеНомера Тогда
			Отбор = Новый Структура("Назначение",
				ПредопределенноеЗначение("Перечисление.НазначенияНумераторов.РегистрационныйНомер"));
			ПараметрыФормы.Вставить("Отбор", Отбор);
		КонецЕсли;
		
		ОткрытьФорму(
			"Справочник.Нумераторы.ФормаВыбора", 
			ПараметрыФормы, 
			ЭтотОбъект,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
		
	Иначе	
		ТекущиеДанные.Нумератор = Неопределено;
	КонецЕсли;	
	
	ТекущиеДанные.Нумеровать = Нумерация.СформироватьПолеНумеровать(ТекущиеДанные.СпособНумерации, ТекущиеДанные.Нумератор);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиНумерацииНумероватьНачалоВыбораПродолжение(ВыбранноеЗначение, Параметры) Экспорт
	
	ТекущиеДанные = Элементы.НастройкиНумерации.ТекущиеДанные;
	Модифицированность = ТекущиеДанные.Нумератор <> ВыбранноеЗначение;
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
		ТекущиеДанные.Нумератор = ВыбранноеЗначение;
	Иначе	
		ТекущиеДанные.СпособНумерации = Неопределено;
	КонецЕсли;	
	ТекущиеДанные.Нумеровать = Нумерация.СформироватьПолеНумеровать(ТекущиеДанные.СпособНумерации, ТекущиеДанные.Нумератор);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиНумерацииНумероватьОткрытие(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.НастройкиНумерации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Нумератор) Тогда 
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(,ТекущиеДанные.Нумератор);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиНумерацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если ЭтоМобильныйКлиент Тогда
		Элементы.НастройкиНумерацииГруппаИзмерений.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НастройкиНумерацииПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	Если ЭтоМобильныйКлиент Тогда
		Элементы.НастройкиНумерацииГруппаИзмерений.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРабочаяГруппаДокумента

&НаКлиенте
Процедура РабочаяГруппаДокументаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриНачалеРедактирования(
		Элемент, // РабочаяГруппаЭлемент
		НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаДокументаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСРабочимиГруппамиКлиент.ШаблонРабочаяГруппаПриОкончанииРедактирования(
		ЭтотОбъект,
		ШаблонДокумента.РабочаяГруппаДокумента,
		Элементы.РабочаяГруппаДокумента,
		ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаДокументаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСРабочимиГруппамиКлиент.ШаблонРабочаяГруппаУчастникАвтоПодбор(
		Элемент,
		Текст,
		ДанныеВыбора,
		Ожидание,
		СтандартнаяОбработка,
		ПредопределенноеЗначение("Перечисление.ТипыОбъектов.ДокументыПредприятия"));
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаДокументаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если ЭтоМобильныйКлиент Тогда
		Элементы.РабочаяГруппаДокументаИзменение.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаДокументаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	Если ЭтоМобильныйКлиент Тогда
		Элементы.РабочаяГруппаДокументаИзменение.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаДокументаУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСАдреснойКнигойКлиент.ВыбратьУчастникаРабочейГруппыДляШаблоновДокументов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаДокументаУчастникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СотрудникиКлиент.ОбработкаВыбораКонтейнера(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРабочаяГруппаТаблица

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСАдреснойКнигойКлиент.ВыбратьУчастникаРабочейГруппы(ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СотрудникиКлиент.ОбработкаВыбораКонтейнера(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСРабочимиГруппамиКлиент.ДокументРабочаяГруппаУчастникАвтоПодбор(
		Элемент,
		Текст,
		ДанныеВыбора,
		Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалением(Элемент, Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РабочаяГруппаТаблицаПередУдалениемПродолжение",
		ЭтотОбъект);
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаТаблицаПередУдалением(ЭтотОбъект, Отказ, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	ТаблицаРГ = Элементы.РабочаяГруппаТаблица;
	Для Каждого Индекс Из ТаблицаРГ.ВыделенныеСтроки Цикл
		РабочаяГруппаТаблица.Удалить(ТаблицаРГ.ДанныеСтроки(Индекс));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриНачалеРедактирования(Элемент, НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриОкончанииРедактирования(
		ЭтотОбъект,
		Элемент,
		ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если ЭтоМобильныйКлиент Тогда
		Элементы.РабочаяГруппаТаблицаИзменение.Видимость = Истина;
	КонецЕсли;			

КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ЭтоМобильныйКлиент Тогда
		Элементы.РабочаяГруппаТаблицаИзменение.Видимость = Ложь;
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыШаблоныВида

&НаКлиенте
Процедура ШаблоныВидаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;

	ТекущиеДанные = Элементы.ШаблоныВида.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидДокумента", Объект.Ссылка);
	ПараметрыФормы.Вставить("УникальныйИдентификаторФормыВладельца", ЭтотОбъект.УникальныйИдентификатор);
	
	Если Копирование Тогда 
		ПараметрыФормы.Вставить("ЗначениеКопирования", ТекущиеДанные.Шаблон);
		ОткрытьФорму("Справочник.ШаблоныДокументов.ФормаОбъекта", ПараметрыФормы, Элементы.ШаблоныВида);
	Иначе 
		ОчиститьСообщения();
		ОткрытьФорму("Справочник.ШаблоныДокументов.ФормаОбъекта", ПараметрыФормы,
			Элементы.ШаблоныВида);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныВидаПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ШаблоныВида.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Шаблон) Тогда 
		ПоказатьЗначение(, ТекущиеДанные.Шаблон);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныВидаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ШаблоныВида.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ШаблоныВидаПередУдалениемПродолжение",
		ЭтотОбъект,
		Новый Структура("Шаблон", ТекущиеДанные.Шаблон));
	ПоказатьВопрос(ОписаниеОповещения, 
		СтрШаблон(НСтр("ru = 'Пометить ""%1"" на удаление?'"), ТекущиеДанные.Шаблон), 
		РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныВидаПередУдалениемПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		УдалитьШаблонДокумента(Параметры.Шаблон);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьШаблонДокумента(Шаблон)
	
	Делопроизводство.ПометитьШаблонНаУдаление(Шаблон, Истина);
	ЗаполнитьСписокШаблоновВида();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыТематики

&НаКлиенте
Процедура ТематикиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Если Объект.Ссылка.Пустая() Тогда
		
		ЗаписьДляДобавленияТематики = Истина;
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		ЗаписьДляДобавленияТематики = Ложь;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	Если Копирование Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ТекущаяСтрока = Элемент.ТекущаяСтрока;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначениеКопирования", ТекущаяСтрока);
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВидДокумента", Объект.Ссылка);
	КонецЕсли;
	
	Открытьформу("Справочник.ТематикиДокументов.ФормаОбъекта", ПараметрыФормы, Элементы.Тематики);
	
КонецПроцедуры

&НаКлиенте
Процедура ТематикиПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.Тематики.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.Ссылка);
	ПараметрыФормы.Вставить("ВидДокумента", Объект.Ссылка);
	
	Открытьформу("Справочник.ТематикиДокументов.ФормаОбъекта", ПараметрыФормы, Элементы.Тематики);
	
КонецПроцедуры

&НаКлиенте
Процедура ТематикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент <> Элементы.ТематикиРазрешенияНаСозданиеДокументов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	РазрешенияНаСозданиеТематика = ТекущиеДанные.Ссылка;
	РазрешенияНаСозданиеТематикаПриИзменении(Элементы.РазрешенияНаСозданиеТематика);
	Элементы.ОсновныеСтраницы.ТекущаяСтраница = Элементы.СтраницаСозданиеДокументов;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТематикиПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Для Каждого КлючИЗначение Из Строки Цикл
		ДанныеСтроки = КлючИЗначение.Значение.Данные;
		Если ДанныеСтроки.СозданиеДокументовДоступноВсем Тогда
			ДанныеСтроки.РазрешенияНаСозданиеДокументов = НСтр("ru = 'Доступно всем'");
		Иначе
			ДанныеСтроки.РазрешенияНаСозданиеДокументов = СтрШаблон(
				НСтр("ru = 'Доступ ограничен (%1)'"), 
				СтрокаСЧислом(НСтр("ru = ';%1 участник;;%1 участника;%1 участников;%1 участников'"),
					ДанныеСтроки.КолРазрешенийНаСозданиеДокументов, ВидЧисловогоЗначения.Количественное));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлы

&НаКлиенте
Процедура ФайлыПриИзменении(Элемент)
	
	КоличествоФайлов = 0;
	КоличествоФайлов = Файлы.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТекущийЗанятыйФайл(ФайлыСтрока, МассивЗахваченныхФайлов) Экспорт
	
	Если ФайлыСтрока.РедактируетТекущийПользователь Тогда
		
		ДанныеФайла = Новый Структура("Ссылка, ПолноеИмяФайлаВРабочемКаталоге,
			|РедактируетТекущийПользователь, ДатаМодификацииУниверсальнаяВБазе, Размер, Расширение,
			|ВладелецФайла");
		ЗаполнитьЗначенияСвойств(ДанныеФайла, ФайлыСтрока);
		ДанныеФайла.ВладелецФайла = ШаблонДокумента.Ссылка;
		
		МассивЗахваченныхФайлов.Добавить(ДанныеФайла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Строка = Файлы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Строка = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ПравилоАвтозаполнения 
		И АвтозаполнениеШаблоновФайловВызовСервераПовтИсп.ЭтоРасширениеАвтозаполнения(Строка.Расширение) Тогда
		#Если НЕ ВебКлиент Тогда
			
			ВыполнитьАвтоЗаполнение(Строка);
			
		#Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Настройка заполнения файлов в веб-клиенте не поддерживается.
				|Используйте тонкий клиент.'"));
		#КонецЕсли
		
	ИначеЕсли Поле = Элементы.Условие Тогда
		
		ВыборУсловия(Строка);
		
	ИначеЕсли Поле = Элементы.ФайлыРольФайла Тогда 
		
		Если ЭтаФорма.ТолькоПросмотр Тогда 
			Возврат;
		КонецЕсли;
		
		Обработчик = Новый ОписаниеОповещения("ПослеВыбораРоли", ЭтотОбъект);
		
		ПараметрыОткрытия = Новый Структура("ВидДокумента", Объект.Ссылка);
		
		Если Модифицированность Тогда                          
			МассивРоли = Новый Массив;    
			Для Каждого Стр Из Объект.РолиФайлов Цикл
				МассивРоли.Добавить(Стр.Роль);
			КонецЦикла;
			ПараметрыОткрытия.Вставить("МассивРоли", МассивРоли);
		КонецЕсли;	
		
		ОткрытьФорму("Справочник.РолиФайлов.ФормаВыбора",ПараметрыОткрытия,,,,,
			Обработчик, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		ВыборФайла(Строка.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораРоли(РезультатВопроса, ПараметрыВыполнения) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВопроса)
		И ТипЗнч(РезультатВопроса) = Тип("СправочникСсылка.РолиФайлов") Тогда
		
		Если Элементы.Файлы.ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Файл = Элементы.Файлы.ТекущиеДанные.Ссылка;
		Элементы.Файлы.ТекущиеДанные.РольФайла = РезультатВопроса;
		УстановитьРольФайла(Файл, РезультатВопроса);
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура УстановитьРольФайла(Файл, Роль)
	
	Роли = Новый Массив;
	Роли.Добавить(Роль);
	РегистрыСведений.РолиФайловДокументов.ЗаменитьРолиФайла(Файл, Роли);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПослеВопросаФайлыЗанятыWord(РезультатВопроса, ПараметрыВыполнения) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Если ПараметрыВыполнения.Свойство("ЗаполнениеПоПравилу") Тогда
			ВыполнитьЗаполнениеПравилаПоОснованию(ПараметрыВыполнения.Строка);
		Иначе
			ВыполнитьАвтоЗаполнение(ПараметрыВыполнения.Строка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАвтоЗаполнение(Строка)
	
	МассивЗахваченныхФайлов = Новый Массив;
	ДобавитьТекущийЗанятыйФайл(Строка, МассивЗахваченныхФайлов);
	
	СписокЗанятыеWordФайлы = ДелопроизводствоКлиент.ПолучитьЗанятыеВнешнимиПрограммамиФайлы(
		ШаблонДокумента.Ссылка,
		УникальныйИдентификатор, 
		МассивЗахваченныхФайлов);
	
	Если СписокЗанятыеWordФайлы.Количество() <> 0 Тогда
		
		СтрокаФайлов = "";
		Для Каждого ИмяРасширение Из СписокЗанятыеWordФайлы Цикл
			Если Не ПустаяСтрока(СтрокаФайлов) Тогда
				СтрокаФайлов = СтрокаФайлов + Символы.ВК;
			КонецЕсли;	
			СтрокаФайлов = СтрокаФайлов + ИмяРасширение;
		КонецЦикла;	
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Для настройки заполнения закройте файл:  
                  | 
                  |%1.'"),
			СтрокаФайлов);
			
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.ОК);
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			
		ПараметрыОбработки = Новый Структура("Строка", Строка);	
		Обработчик = Новый ОписаниеОповещения("ПослеВопросаФайлыЗанятыWord", ЭтотОбъект, ПараметрыОбработки);
		ПоказатьВопрос(Обработчик, ТекстСообщения, Кнопки);
		Возврат;
		
	КонецЕсли;
	
	ПродолжитьАвтоЗаполнение(Строка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьАвтоЗаполнение(Строка)
	
	МассивЗахваченныхФайлов = Новый Массив;
	ДобавитьТекущийЗанятыйФайл(Строка, МассивЗахваченныхФайлов);
	
	ДелопроизводствоКлиент.ПоместитьИзмененияФайлов(ШаблонДокумента.Ссылка, УникальныйИдентификатор, 
		МассивЗахваченныхФайлов, Истина);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Строка", Строка);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборПравилаАвтозаполненияПродолжение", 
		ЭтотОбъект, ДополнительныеПараметры);
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ВладелецФайла", ШаблонДокумента.ВидДокумента);
	ЗначенияЗаполнения.Вставить("ШаблонФайла", Строка.Ссылка);
	ЗначенияЗаполнения.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ЗначенияЗаполнения.Вставить("Наименование", Строка.Ссылка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Строка.ПравилоАвтозаполнения);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ПараметрыФормы.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	
	ПараметрыФормы.Вставить("ШаблонФайла", Строка.Ссылка);
	ПараметрыФормы.Вставить("Организация", ШаблонДокумента.Организация);
	ПараметрыФормы.Вставить("ВестиУчетТоваровИУслуг", Объект.ВестиУчетТоваровИУслуг);
	
	Если Не ЗначениеЗаполнено(Строка.ПравилоАвтозаполнения) Тогда 
		ПараметрыФормы.Вставить("РежимСозданияДоговора", Истина);
	КонецЕсли;
	
	Если АвтозаполнениеШаблоновФайловКлиентСервер.ЭтоMSWord(Строка.Расширение) Тогда 
		ОткрытьФорму("Справочник.ПравилаАвтозаполненияФайлов.Форма.КраткаяФормаЭлемента",
			ПараметрыФормы, ЭтотОбъект,,,,
			ОписаниеОповещения);
	Иначе 
		ОткрытьФорму("Справочник.ПравилаАвтозаполненияФайлов.ФормаОбъекта",
			ПараметрыФормы, ЭтотОбъект,,,,
			ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПравилаАвтозаполненияПродолжение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Не ЗначениеЗаполнено(Результат) Тогда 
		Возврат;
	КонецЕсли;
	
	Строка = ДополнительныеПараметры.Строка;
	
	Строка.ПравилоАвтозаполнения = Результат;
	Строка.ПравилоАвтозаполненияСтр = НСтр("ru = 'Открыть'");
	ТребуетсяЗаписатьШаблон = Истина;
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ПараметрыДобавления = Новый Структура;
	ФайлыПередНачаломДобавленияКлиент(Элемент, Отказ, Копирование, Родитель, Группа, ПараметрыДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавленияКлиент(Элемент, Отказ, Копирование, Родитель, Группа, ПараметрыДобавления)
	
	Если Объект.Ссылка.Пустая()Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
			
	ИначеЕсли ШаблонДокумента.Ссылка.Пустая() Тогда 
		ПараметрыЗаписи = Новый Структура("ЗаписатьШаблон", Истина);
		Если Не Записать(ПараметрыЗаписи) Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВладелецФайла = ШаблонДокумента.Ссылка;
	
	Если Не Копирование Тогда
		Попытка
			РежимСоздания = 2;
			НеОткрыватьФормуВыбораРежимаСозданияФайла = Истина;
			РаботаСФайламиКлиент.ДобавитьФайл(Неопределено, ВладелецФайла, 
				ЭтотОбъект, РежимСоздания, Истина,,,,, НеОткрыватьФормуВыбораРежимаСозданияФайла);
		Исключение
			ПоказатьПредупреждение(, ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаСозданияНовогоФайла(
				ИнформацияОбОшибке()));
		КонецПопытки;
	Иначе
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;	
		ФайлОснование = ТекущиеДанные.Ссылка;
		
		РаботаСФайламиКлиент.СкопироватьФайл(ВладелецФайла, ФайлОснование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Отказ = Истина;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "Условие" Тогда
		ВыборУсловия(ТекущиеДанные);
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ФайлыПередУдалениемПродолжение",
		ЭтотОбъект,
		Новый Структура);
	ДелопроизводствоКлиент.ПометитьФайлыДокументаНаУдаление(ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		МассивФайлов = Параметры.МассивФайлов;
		ПометитьФайлыНаУдаление(МассивФайлов, Не Параметры.ПометкаУдаления);
		Оповестить("ФайлыДокументаПомеченыНаУдаление", Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
	МассивФайловДляПеретаскивания = Новый Массив;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);
			МассивФайловДляПеретаскивания.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		МассивФайловДляПеретаскивания.Добавить(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	ПараметрыПеретаскивания.Значение = МассивФайловДляПеретаскивания;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтаФорма.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущийЭлемент = Элементы.Файлы;
	Если ТекущийЭлемент.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
			
	ИначеЕсли ШаблонДокумента.Ссылка.Пустая() Тогда 
		ТребуетсяЗаписатьШаблон = Истина;
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВладелецФайлаСписка = ШаблонДокумента.Ссылка;
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;	
	РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(ПараметрыПеретаскивания, ВладелецФайлаСписка, ЭтотОбъект, НеОткрыватьКарточкуПослеСозданияИзФайла);
	
	ЗаполнитьСписокФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайла(Файл)
	
	ПараметрыВыполнения = Новый Структура("Файл", Файл);
	
	Обработчик = Новый ОписаниеОповещения("ВыборФайлаПослеУстановкиРасширения", 
		ЭтотОбъект, ПараметрыВыполнения);
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ВыборФайлаПослеУстановкиРасширения(РасширениеУстановлено, ПараметрыВыполнения) Экспорт
	
	Файл = ПараметрыВыполнения.Файл;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Файл, 
		Неопределено, 
		ЭтотОбъект.УникальныйИдентификатор, 
		Неопределено, 
		ПредыдущийАдресФайла);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, 
		Не ЭтаФорма.ТолькоПросмотр);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	РезультатОткрытьКарточку = "ОткрытьКарточку";
	
	Если Результат = РезультатРедактировать Тогда
		Обработчик = Новый ОписаниеОповещения("СписокВыборПослеРедактированияФайла", ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	ИначеЕсли Результат = РезультатОткрытьКарточку Тогда
		ПоказатьЗначение(, ПараметрыВыполнения.ДанныеФайла.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеРедактированияФайла(Результат, ПараметрыВыполнения) Экспорт
	
	ОбновитьСтрокуФайла(ПараметрыВыполнения.ДанныеФайла.Ссылка);
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияСортироватьПоИмени(Команда)

	Если ЭтаФорма.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиВызовСервера.СортироватьФайлыПоИмениДляШаблонаВидаДокумента(ШаблонДокумента.Ссылка);
	
	ЗаполнитьСписокФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПереместитьВверх(Команда)
	
	Если ЭтаФорма.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Файлы.НайтиПоИдентификатору(Элементы.Файлы.ТекущаяСтрока);
	Если ТекДанные <> Неопределено Тогда
		
		ТекИндекс = Файлы.Индекс(ТекДанные);
		
		Если ТекИндекс = 0 Тогда
			Возврат;
		КонецЕсли;	
		
		Файлы.Сдвинуть(ТекИндекс, -1);
		
		ЗаписатьПорядокВложений();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПереместитьВниз(Команда)
	
	Если ЭтаФорма.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Файлы.НайтиПоИдентификатору(Элементы.Файлы.ТекущаяСтрока);
	Если ТекДанные <> Неопределено Тогда
		
		ТекИндекс = Файлы.Индекс(ТекДанные);
		
		Если ТекИндекс = Файлы.Количество() - 1 Тогда
			Возврат;
		КонецЕсли;	
		
		Файлы.Сдвинуть(ТекИндекс, 1);
		
		ЗаписатьПорядокВложений();
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлыДобавленные

&НаКлиенте
Процедура ФайлыДобавленныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ФайлыДобавленные.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(ТекущиеДанные.ПолныйПуть) Тогда 
		ТекущийФайлВСпискеДобавленныхДляОткрытия = ПолучитьИзВременногоХранилища(ТекущиеДанные.ПолныйПуть).Ссылка;
		Записать();
	Иначе
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(ТекущиеДанные.ПолныйПуть);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ФайлыДобавленные.ТекущиеДанные;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПослеУдаления(Элемент)
	
	КоличествоФайловТаблицы = ФайлыДобавленные.Количество();
	КоличествоФайлов = КоличествоФайловТаблицы;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
		
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры
&НаКлиенте
Процедура ФайлыДобавленныеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтаФорма.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элементы.ФайлыДобавленные.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл")
		И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Истина Тогда
		
		Файл = ПараметрыПеретаскивания.Значение;
		НоваяСтрока = ФайлыДобавленные.Добавить();
		НоваяСтрока.Наименование = Файл.ИмяБезРасширения;
		НоваяСтрока.ПолныйПуть = Файл.ПолноеИмя;
		НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(Файл.Расширение);
		КоличествоФайлов = КоличествоФайлов + 1;
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл")
		И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Ложь Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите только файлы, но не каталоги.'"));
		Возврат;
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() > 0 
			И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				Если ФайлПринятый.ЭтоФайл() Тогда // только файлы, но не каталоги
					НоваяСтрока = ФайлыДобавленные.Добавить();
					НоваяСтрока.Наименование = ФайлПринятый.ИмяБезРасширения;
					НоваяСтрока.ПолныйПуть = ФайлПринятый.ПолноеИмя;
					НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(
						ФайлПринятый.Расширение);
					КоличествоФайлов = КоличествоФайлов + 1;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ФайлыДобавленные.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтороны

&НаКлиенте
Процедура СтороныСторонаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьИндексКартинкиСтороны(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
		ТекущиеДанные.Сторона = КонтрагентПустаяСсылка;
		ТекущиеДанные.КонтактноеЛицо = КонтактноеЛицоПустаяСсылка;
		ТекущиеДанные.Подписант = КонтактноеЛицоПустаяСсылка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныСторонаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ВыбиратьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ОтображатьОрганизации", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор стороны'"));
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Сторона) Тогда
		ПараметрыФормы.Вставить("ВыбранныеАдресаты", ТекущиеДанные.Сторона);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.АдреснаяКнига.Форма.ФормаСписка",
		ПараметрыФормы,
		Элементы.СтороныСторона,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныСторонаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Организации") Тогда
		
		ТекущиеДанные.Сторона = ВыбранноеЗначение;
		ТекущиеДанные.КонтактноеЛицо = ПользователиПустаяСсылка;
		Если ТекущиеДанные.НомерСтроки = 1 Тогда
			ШаблонДокумента.Организация = ВыбранноеЗначение;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		ТекущиеДанные.Сторона = ВыбранноеЗначение;
		ТекущиеДанные.КонтактноеЛицо = РаботаСКонтрагентамиВызовСервера.ОсновноеКонтактноеЛицоКонтрагента(
			ТекущиеДанные.Сторона);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Сторона)
			Или (ЗначениеЗаполнено(ТекущиеДанные.Сторона)
				И ТипЗнч(ТекущиеДанные.Сторона) = Тип("СправочникСсылка.Контрагенты")) Тогда
			ТекущиеДанные.Сторона = РаботаСОрганизациями.ОрганизацияПоУмолчанию();
		КонецЕсли;
		
		ТекущиеДанные.КонтактноеЛицо = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		Контрагент = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "Владелец");
		ТекущиеДанные.Сторона = Контрагент;
		ТекущиеДанные.КонтактноеЛицо = ВыбранноеЗначение;
		
	КонецЕсли;
	
	УстановитьИндексКартинкиСтороны(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныСторонаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
		ПараметрыПолученияДанных.Вставить("НомерСтрокиСтороны", ТекущиеДанные.НомерСтроки);
		ДанныеВыбора = РаботаСПодписямиДокументовВызовСервера.СформироватьДанныеВыбораСтороны(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныСторонаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
		ПараметрыПолученияДанных.Вставить("НомерСтрокиСтороны", ТекущиеДанные.НомерСтроки);
		ДанныеВыбора = РаботаСПодписямиДокументовВызовСервера.СформироватьДанныеВыбораСтороны(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныКонтактноеЛицоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьИндексКартинкиСтороны(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныКонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСПодписямиДокументовКлиент.СтороныКонтактноеЛицоНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка, Элементы.СтороныКонтактноеЛицо);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныКонтактноеЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Сотрудники") Тогда

		Если Не ЗначениеЗаполнено(ТекущиеДанные.Сторона)
			Или (ЗначениеЗаполнено(ТекущиеДанные.Сторона)
				И ТипЗнч(ТекущиеДанные.Сторона) = Тип("СправочникСсылка.Контрагенты")) Тогда
			ТекущиеДанные.Сторона = РаботаСОрганизациями.ОрганизацияПоУмолчанию();
		КонецЕсли;
		
		ТекущиеДанные.КонтактноеЛицо = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		Контрагент = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "Владелец");
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Сторона)
			ИЛИ Контрагент <> ТекущиеДанные.Сторона Тогда
				ТекущиеДанные.Сторона = Контрагент;
		КонецЕсли;
		ТекущиеДанные.КонтактноеЛицо = ВыбранноеЗначение;
		
	КонецЕсли;
	
	УстановитьИндексКартинкиСтороны(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныКонтактноеЛицоАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
		ПараметрыПолученияДанных.Вставить("Сторона", ТекущиеДанные.Сторона);
		ДанныеВыбора = РаботаСПодписямиДокументовВызовСервера.СформироватьДанныеВыбораКонтактногоЛицаСтороны(
			ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныКонтактноеЛицоОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
		ПараметрыПолученияДанных.Вставить("Сторона", ТекущиеДанные.Сторона);
		ДанныеВыбора = РаботаСПодписямиДокументовВызовСервера.СформироватьДанныеВыбораКонтактногоЛицаСтороны(
			ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПодписантНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСПодписямиДокументовКлиент.СтороныПодписалНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка, Элементы.СтороныПодписант, "Подписант");
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПодписантОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Сторона)
			Или (ЗначениеЗаполнено(ТекущиеДанные.Сторона)
				И ТипЗнч(ТекущиеДанные.Сторона) = Тип("СправочникСсылка.Контрагенты")) Тогда
			ТекущиеДанные.Сторона = РаботаСОрганизациями.ОрганизацияПоУмолчанию();
		КонецЕсли;
		ТекущиеДанные.Подписант = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		Контрагент = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "Владелец");
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Сторона)
			ИЛИ Контрагент <> ТекущиеДанные.Сторона Тогда
				ТекущиеДанные.Сторона = Контрагент;
		КонецЕсли;
		ТекущиеДанные.Подписант = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		ТекущиеДанные.Подписант = ВыбранноеЗначение;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	УстановитьИндексКартинкиСтороны(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПодписантАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
		ПараметрыПолученияДанных.Вставить("Сторона", ТекущиеДанные.Сторона);
		ДанныеВыбора = РаботаСПодписямиДокументовВызовСервера.СформироватьДанныеВыбораПодписал(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПодписантОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
		ПараметрыПолученияДанных.Вставить("Сторона", ТекущиеДанные.Сторона);
		ДанныеВыбора = РаботаСПодписямиДокументовВызовСервера.СформироватьДанныеВыбораПодписал(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ЭтоМобильныйКлиент Тогда
		Элементы.СтороныГруппаНаименованиеПодписал.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтороныПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	Если ЭтоМобильныйКлиент Тогда
		Элементы.СтороныГруппаНаименованиеПодписал.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПринятыеЭлементы = Новый Массив;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") 
		И ПараметрыПеретаскивания.Значение.Количество() > 0 
		И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		Для Каждого Строка Из ПараметрыПеретаскивания.Значение Цикл
			ПринятыеЭлементы.Добавить(Строка);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		ПринятыеЭлементы.Добавить(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
	
	Если ПринятыеЭлементы.Количество() > 0 Тогда
		Для Каждого ВыделеннаяСтрока Из ПринятыеЭлементы Цикл
			ТекущиеДанные = Элементы.ВсеТовары.ДанныеСтроки(ВыделеннаяСтрока);
			Если ТекущиеДанные.ЭтоГруппа Тогда 
				Обработчик = Новый ОписаниеОповещения("ПеренестиНоменклатуруПродолжение", ЭтотОбъект, 
					Новый Структура("Группа", ТекущиеДанные.Ссылка));
				ПоказатьВопрос(Обработчик, 
					НСтр("ru = 'Выбран групповой элемент.
	                     |Добавить все содержимое группы?'"), РежимДиалогаВопрос.ДаНет, 60);
				Возврат;
				
			Иначе 
				НайденныеСтроки = ШаблонДокумента.Товары.НайтиСтроки(Новый Структура("Номенклатура", ТекущиеДанные.Ссылка));
				Если НайденныеСтроки.Количество() = 0 Тогда 
					НайденнаяСтрока = ШаблонДокумента.Товары.Добавить();
					НайденнаяСтрока.Номенклатура = ТекущиеДанные.Ссылка;
					НайденнаяСтрока.ЕдиницаИзмерения = ТекущиеДанные.ЕдиницаИзмерения;
					НайденнаяСтрока.Количество = 1;
				Иначе 
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
						НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + 1;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонДокументаТоварыНоменклатураПриИзменении(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда 
		РеквизитыКарточки = ОбщегоНазначенияДокументооборотВызовСервера.ЗначенияРеквизитовОбъекта(
			ТекущиеДанные.Номенклатура, "ЕдиницаИзмерения");
		ТекущиеДанные.ЕдиницаИзмерения = РеквизитыКарточки.ЕдиницаИзмерения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьНоменклатуру(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если ЭтоМобильныйКлиент Тогда
		Элементы.ТоварыЕдиницаИзмерения.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	Если ЭтоМобильныйКлиент Тогда
		Элементы.ТоварыЕдиницаИзмерения.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВидыДействий

&НаКлиенте
Процедура ВидыДействийПриИзменении(Элемент)
	
	ДействияКлиентСервер.ОбновитьНумерациюОбработки(ВидыДействий, КоличествоДействий);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДействийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
	Если Поле = Элементы.ВидыДействийПравилаЗапуска Тогда
		
		СтандартнаяОбработка = Ложь;
		ПравилаЗапускаНажатие();
		Возврат;
		
	ИначеЕсли Поле = Элементы.ВидыДействийУсловияЗапуска Тогда
		СтандартнаяОбработка = Ложь;
		УсловияЗапускаНажатие();
		Возврат;
		
	КонецЕсли;		
	
	ДействияКлиент.ВидыДействийВыбор(
		ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ВидыДействийПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ВидыДействий.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Элементы.ВидыДействийКонтекстноеМенюПоказатьВсе.Доступность = ПравоРедактированияОбработки;
		Возврат;
	КонецЕсли;
	
	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если ТекущийРодитель = Неопределено Тогда
		ТекущийРодитель = ТекущиеДанные;
	КонецЕсли;
	
	ВозможностьИзменения = ПравоРедактированияОбработки;
	Если ТекущиеДанные.ЭтоНастройкиГруппы Или ТекущийРодитель.ЕстьОбработка Тогда
		ВозможностьИзменения = Ложь;
	КонецЕсли;
	
	Элементы.ДобавитьВидДействия.Доступность = ВозможностьИзменения;
	Элементы.УдалитьВидДействия.Доступность = ВозможностьИзменения;
	
	Если Не ВозможностьИзменения Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ПереместитьДействиеВниз.Доступность = Не ТекущиеДанные.ЭтоРодитель;
	Элементы.ПереместитьДействиеВверх.Доступность = Не ТекущиеДанные.ЭтоРодитель;
	
	Если РежимПодборДействий
		И ДействуетС <> ТекущиеДанные.ДействуетС
		Или ДействуетПо <> ТекущиеДанные.ДействуетПо Тогда 
		ДействуетС = ТекущиеДанные.ДействуетС;
		ДействуетПо = ТекущиеДанные.ДействуетПо;
		
		ПодключитьОбработчикОжидания("ОбработкаОжиданияИзмененияНастройкиВидаДействий", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДействийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Модифицированность И Не Записать() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ПоказатьВсеНастройки Тогда
		ПоказатьВсеНастройкиПриИзменении();
	КонецЕсли;
	
	ДействияКлиент.ВидыДействийПередНачаломДобавления(
		ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа, Параметр);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДействийПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДействийПередУдалением(Элемент, Отказ)
	
	ДействияКлиент.ВидыДействийПередУдалением(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВсеВидыДействий

&НаКлиенте
Процедура ВсеВидыДействийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВсеВидыДействий.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
		И Не ТолькоПросмотр Тогда
		СтандартнаяОбработка = Ложь;
		ВидыДействийМассив = Новый Массив;
		ВидыДействийМассив.Добавить(ТекущиеДанные.Ссылка);
		ДействияКлиент.ДобавитьВидДействияВСписок(ЭтотОбъект, ВидыДействийМассив);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеВидыДействийНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если ТолькоПросмотр Тогда
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		Возврат;
	КонецЕсли;
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеВидыДействийПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Для Каждого ЗначениеПеретаскивания Из ПараметрыПеретаскивания.Значение Цикл
		Если ТипЗнч(ЗначениеПеретаскивания) <> Тип("СправочникСсылка.ВидыДействий") Тогда
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРазрешенияНаСоздание

&НаКлиенте
Процедура РазрешенияНаСозданиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент <> Элементы.РазрешенияНаСозданиеТематикиПредставление Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Если Не Объект.ВестиУчетПоТематикам Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазрешенияНаСоздание.ТекущиеДанные;
	ОбработкаОповещения = Новый ОписаниеОповещения(
		"ОбработкаВыбораТематикДляРазрешенийНаСоздание", ЭтотОбъект);
	ПараметрыФормы = Новый Структура(
		"ВидДокумента, ВыбранныеТематики", Объект.Ссылка, ТекущиеДанные.Тематики);
	ОткрытьФорму("Справочник.ТематикиДокументов.Форма.ВыборИзСпискаСПометками",
		ПараметрыФормы, Элемент,,,, ОбработкаОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияНаСозданиеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		ТекущиеДанные = Элементы.РазрешенияНаСоздание.ТекущиеДанные;
		ТекущиеДанные.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
		ТекущиеДанные.ВидимостьПриОтборе = Истина;
		ТекущиеДанные.ТематикиПредставление = ПредставлениеТематикВРазрешениях(ТекущиеДанные.Тематики);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияНаСозданиеТематикаПриИзменении(Элемент)
	
	ОтборАктивен = ЗначениеЗаполнено(РазрешенияНаСозданиеТематика);
	Если ОтборАктивен Тогда
		Для Каждого Стр Из РазрешенияНаСоздание Цикл
			Стр.ВидимостьПриОтборе = Стр.Тематики.Количество() = 0
				Или Стр.Тематики.НайтиПоЗначению(РазрешенияНаСозданиеТематика) <> Неопределено;
		КонецЦикла;
		Элементы.РазрешенияНаСоздание.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидимостьПриОтборе", Истина);
	Иначе
		Элементы.РазрешенияНаСоздание.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
		Элементы.РазрешенияНаСозданиеТематика, РазрешенияНаСозданиеТематика);
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияНаСозданиеУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка= Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ОтображатьРоли", Истина);
	ПараметрыФормы.Вставить("ПодменятьПользователейСотрудниками", Истина);
	ПараметрыФормы.Вставить("ВыбиратьКонтейнерыПользователей", Истина);
	
	Если Элементы.РазрешенияНаСоздание.ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы.Вставить("ВыбранныеАдресаты",
			Элементы.РазрешенияНаСоздание.ТекущиеДанные.Участник);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор участника'"));
	ПараметрыФормы.Вставить("ЗаголовокСпискаАдреснойКниги", НСтр("ru = 'Все сотрудники'"));
	
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(
		ПараметрыФормы, Элементы.РазрешенияНаСозданиеУчастник, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияНаСозданиеУчастникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СотрудникиКлиент.ОбработкаВыбораКонтейнера(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияНаСозданиеУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СотрудникиВызовСервера.СформироватьДанныеВыборасКонтейнерами(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияНаСозданиеУчастникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СотрудникиВызовСервера.СформироватьДанныеВыборасКонтейнерами(Текст);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтрагенты

&НаКлиенте
Процедура КонтрагентыКонтрагентПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Контрагенты.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.КонтактноеЛицо) Тогда
		ТекущиеДанные.КонтактноеЛицо = РаботаСКонтрагентамиВызовСервера.ОсновноеКонтактноеЛицоКонтрагента(
			ТекущиеДанные.Контрагент)
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьНаборСвойств(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьНаборСвойствПродолжение",
		ЭтотОбъект);

	Если Объект.Ссылка.Пустая() Тогда
		
		ТекстВопроса = НСтр("ru = 'Для перехода к набору свойств элемент необходимо записать.'") + Символы.ПС + НСтр("ru = 'Записать?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.ОК);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНаборСвойствПродолжение(Результат, Параметры) Экспорт 

	Если Результат = КодВозвратаДиалога.Нет Тогда 
		Возврат;	
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда 
					
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "НаборыДополнительныхРеквизитов");
	
	ОткрытьФорму("Справочник.НаборыДополнительныхРеквизитовИСведений.ФормаСписка", ПараметрыФормы);
	
	ПараметрыПерехода = Новый Структура;
	ПараметрыПерехода.Вставить("Набор", Объект.НаборСвойств);
	ПараметрыПерехода.Вставить("Свойство", Неопределено);
	ПараметрыПерехода.Вставить("ЭтоДополнительноеСведение", Ложь);
	ПараметрыПерехода.Вставить("ВидСвойств", ПредопределенноеЗначение("Перечисление.ВидыСвойств.ДополнительныеРеквизиты"));
	
	Оповестить("Переход_НаборыДополнительныхРеквизитовИСведений", ПараметрыПерехода);

КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ЗаписатьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подписаться(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектПодписки", Объект.Ссылка);
		ОткрытьФорму("ОбщаяФорма.ПодпискаНаУведомленияПоОбъекту", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОдинКонтрагент(Команда)
	
	КоличествоКонтрагентов = ШаблонДокумента.Контрагенты.Количество(); 
	Для Инд = 1 По КоличествоКонтрагентов Цикл 
		Строка = ШаблонДокумента.Контрагенты[КоличествоКонтрагентов - Инд]; 
		Если Не ЗначениеЗаполнено(Строка.Контрагент) Тогда 
			ШаблонДокумента.Контрагенты.Удалить(Строка); 
		КонецЕсли; 
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОдинКонтрагентПродолжение",
		ЭтотОбъект);

	Если ШаблонДокумента.Контрагенты.Количество() > 1 Тогда 
		ТекстВопроса = НСтр("ru = 'Все контрагенты, кроме первого, будут удалены. 
			|Продолжить?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Отмена);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОдинКонтрагентПродолжение(Результат, Параметры)Экспорт 

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		
		Пока ШаблонДокумента.Контрагенты.Количество() > 1 Цикл
			ШаблонДокумента.Контрагенты.Удалить(1);
		КонецЦикла;
		Модифицированность = Истина;
		
	КонецЕсли;

	Если ШаблонДокумента.Контрагенты.Количество() > 0 Тогда
		Строка = ШаблонДокумента.Контрагенты[0];		
		ШаблонДокумента.Контрагент = Строка.Контрагент;
		ШаблонДокумента.КонтактноеЛицо = Строка.КонтактноеЛицо;
		Если Объект.ЯвляетсяИсходящейКорреспонденцией Тогда
			ШаблонДокумента.Способ = Строка.Способ;
		КонецЕсли;
	Иначе	
		ШаблонДокумента.Контрагент = Неопределено;
		ШаблонДокумента.КонтактноеЛицо = Неопределено;
		Если Объект.ЯвляетсяИсходящейКорреспонденцией Тогда
			ШаблонДокумента.Способ = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	НесколькоКонтрагентов = Ложь;
	УстановитьВидимостьКонтрагентов(ЭтотОбъект);
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОсновная;

КонецПроцедуры

&НаКлиенте
Процедура МногоКонтрагентов(Команда)
	
	НесколькоКонтрагентов = Истина;
	УстановитьВидимостьКонтрагентов(ЭтотОбъект);

	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКонтрагенты;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУчастниковРабочейГруппыДокумента(Команда)
	
	РаботаСАдреснойКнигойКлиент.ПодобратьУчастниковРабочейГруппыДляШаблоновДокументов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУчастниковРабочейГруппы(Команда)
	
	РаботаСАдреснойКнигойКлиент.ПодобратьУчастниковРабочейГруппы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовыйШаблон(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидДокумента", Объект.Ссылка);
	ПараметрыФормы.Вставить("УникальныйИдентификаторФормыВладельца", ЭтотОбъект.УникальныйИдентификатор);
	
	ОткрытьФорму("Справочник.ШаблоныДокументов.ФормаОбъекта", ПараметрыФормы,
		Элементы.ШаблоныВида);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьШаблон(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	Если МногоШаблонов Тогда 
		ТекущиеДанные = Элементы.ШаблоныВида.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ШаблонДляКопирования = ТекущиеДанные.Шаблон;
		
	ИначеЕсли Не ШаблонДокумента.Ссылка.Пустая() Тогда 
		ШаблонДляКопирования = ШаблонДокумента.Ссылка;
		
	Иначе 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидДокумента", Объект.Ссылка);
	ПараметрыФормы.Вставить("УникальныйИдентификаторФормыВладельца", ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыФормы.Вставить("ЗначениеКопирования", ШаблонДляКопирования);
	
	ОткрытьФорму("Справочник.ШаблоныДокументов.ФормаОбъекта", ПараметрыФормы,
		Элементы.ШаблоныВида);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьКатегории(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуПодбораКатегорийПродолжение",
		ЭтотОбъект,
		Новый Структура);

	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаКатегорий(
		ШаблонДокумента.Категории, ОписаниеОповещения); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьНоменклатуру(Команда)
	
	ПоказыватьНоменклатуру = Не ПоказыватьНоменклатуру;
	Элементы.ПодобратьНоменклатуру.Пометка = ПоказыватьНоменклатуру;
	Элементы.ВсяНоменклатура.Видимость = ПоказыватьНоменклатуру;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатуру(Команда)
	
	ВыделенныеСтроки = Элементы.ВсеТовары.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ТекущиеДанные = Элементы.ВсеТовары.ДанныеСтроки(ВыделеннаяСтрока);
		Если ТекущиеДанные.ЭтоГруппа Тогда 
			Обработчик = Новый ОписаниеОповещения("ПеренестиНоменклатуруПродолжение", ЭтотОбъект, 
				Новый Структура("Группа", ТекущиеДанные.Ссылка));
			ПоказатьВопрос(Обработчик, 
				НСтр("ru = 'Выбран групповой элемент.
                     |Добавить все содержимое группы?'"), РежимДиалогаВопрос.ДаНет, 60);
			Возврат;
			
		Иначе 
			НайденныеСтроки = ШаблонДокумента.Товары.НайтиСтроки(Новый Структура("Номенклатура", ТекущиеДанные.Ссылка));
			Если НайденныеСтроки.Количество() = 0 Тогда 
				НайденнаяСтрока = ШаблонДокумента.Товары.Добавить();
				НайденнаяСтрока.Номенклатура = ТекущиеДанные.Ссылка;
				НайденнаяСтрока.ЕдиницаИзмерения = ТекущиеДанные.ЕдиницаИзмерения;
				НайденнаяСтрока.Количество = 1;
			Иначе 
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
					НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами

&НаКлиенте
Процедура ПросмотретьИзСписка(Команда)
	
	Если Элементы.ФайлыДобавленные.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
		ФайлСсылка = ПолучитьИзВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
		ОткрытьФайл(ФайлСсылка);
	Иначе		
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(
			Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(Команда)
	
	ПараметрыДобавления = Новый Структура;
	
	ФайлыПередНачаломДобавленияКлиент(Элементы.Файлы, Истина, Ложь, Неопределено, Неопределено, ПараметрыДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если Объект.Ссылка.Пустая()
		И Элементы.ФайлыДобавленные.ТекущаяСтрока <> Неопределено Тогда
		Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
			ТекущийФайлВСпискеДобавленныхДляРедактирования =
				ПолучитьИзВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
			Записать();
		Иначе
			РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(
				Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
		КонецЕсли;
	Иначе
		
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		КомандыРаботыСФайламиКлиент.Редактировать(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Неопределено, 
		ТекущиеДанные.Ссылка, ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыОбновленияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;
	ПараметрыОбновленияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	ПараметрыОбновленияФайла.Редактирует = ТекущиеДанные.Редактирует;
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура Занять(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	РаботаСФайламиКлиент.ЗанятьСОповещением(Неопределено, ТекущиеДанные.Ссылка);
	ОбновитьСтрокуФайла(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОсвобожденияФайла = РаботаСФайламиКлиент.ПараметрыОсвобожденияФайла(Неопределено, 
		ТекущиеДанные.Ссылка);
	ПараметрыОсвобожденияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;	
	ПараметрыОсвобожденияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;	
	ПараметрыОсвобожденияФайла.Редактирует = ТекущиеДанные.Редактирует;	
	РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(ПараметрыОсвобожденияФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.СохранитьИзмененияФайлаСОповещением(
		Неопределено,
		ТекущиеДанные.Ссылка,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаИРабочийКаталог(ТекущиеДанные.Ссылка);
	
	РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
		Неопределено,
		ДанныеФайла,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);
			СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			РаботаСФайламиКлиент.СохранитьФайлыКак(СписокФайловДляВыгрузки, УникальныйИдентификатор);
		КонецЕсли;
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(
			ТекущиеДанные.Ссылка, Неопределено, ЭтотОбъект.УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Напечатать(Команда)
	
	#Если ВебКлиент Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте печать файлов не поддерживается.'"));
		Возврат;
	#КонецЕсли
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Если СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86 
	   И СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Печать файлов возможна только в Windows.'"));
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		МассивФайлов = Новый Массив;
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);	
			МассивФайлов.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
		Если МассивФайлов.Количество() > 0 Тогда
			
			ДанныеФайлов = РаботаСФайламиВызовСервера.ДанныеФайловДляОткрытия(
				МассивФайлов, 
				ЭтотОбъект.УникальныйИдентификатор);
				
			КомандыРаботыСФайламиКлиент.НапечататьФайлы(ДанныеФайлов);
			
		КонецЕсли;
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;	
	
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
			ТекущиеДанные.Ссылка, 
			Неопределено, 
			ЭтотОбъект.УникальныйИдентификатор, 
			Неопределено, 
			ПредыдущийАдресФайла);
		
		КомандыРаботыСФайламиКлиент.НапечататьФайл(ДанныеФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПравило(Команда)
	
	#Если ВебКлиент Тогда
		Сообщение = НСтр("ru = 'В web-клиенте нельзя осуществлять проверку правил.'");
		ПоказатьПредупреждение(,Сообщение);
		Возврат;
	#КонецЕсли
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекущиеДанные.ПравилоАвтозаполнения) Тогда 
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроверитьПравилоПродолжениеПослеВыбораДокумента",
		ЭтотОбъект,
		Новый Структура("ШаблонФайла, Расширение", 
			ТекущиеДанные.Ссылка,
			ТекущиеДанные.Расширение));
	
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("ВидДокумента", Объект.Ссылка));
	ОткрытьФорму(
		"Справочник.ДокументыПредприятия.ФормаВыбора", 
		ПараметрыФормы, 
		ЭтотОбъект,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПравилоПродолжениеПослеВыбораДокумента(Результат, Параметры) Экспорт
	
	#Если Не ВебКлиент Тогда
		
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Возврат;
		КонецЕсли;
		
		Состояние(НСтр("ru = 'Выполняется заполнение шаблона файла. Пожалуйста, подождите...'"));
		РезультатЗаполненияФайла = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьПоляФайлаДаннымиВладельца(
			Истина,
			Параметры.ШаблонФайла,
			Ложь,
			УникальныйИдентификатор,
			Результат);
		Если РезультатЗаполненияФайла.Свойство("ДвоичныеДанныеЗаполненногоФайла")
			И РезультатЗаполненияФайла.ДвоичныеДанныеЗаполненногоФайла <> Неопределено Тогда
			
			Если РезультатЗаполненияФайла.ДвоичныеДанныеЗаполненногоФайла = "Linux" Тогда
				ОписаниеОшибки = НСтр("ru = 'Автозаполнение файлов Microsoft Word 2003 возможно только в Windows. 
	                                   |Обратитесь к администратору.'");
				ПоказатьПредупреждение(,ОписаниеОшибки);
				Состояние();
				Возврат;
			КонецЕсли;
			
			ПутьКФайлу = ПолучитьИмяВременногоФайла(Параметры.Расширение);
			РезультатЗаполненияФайла.ДвоичныеДанныеЗаполненногоФайла.Записать(ПутьКФайлу);
			ДелопроизводствоКлиент.ОткрытьФайлПриложением(ПутьКФайлу);
		КонецЕсли;
		Состояние();
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПравило(Команда)
	
	#Если ВебКлиент Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Настройка заполнения файлов в веб-клиенте не поддерживается.
			|Используйте тонкий клиент.'"));
		Возврат;
	#КонецЕсли
	
	ВыполнитьЗаполнениеПравилаПоОснованию(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьУсловие(Команда)
	
	Элементы.Файлы.ТекущиеДанные.Условие = ПредопределенноеЗначение("Справочник.АлгоритмыПроверки.ПустаяСсылка");
	Элементы.Файлы.ТекущиеДанные.УсловиеСтр = НСтр("ru = 'Не установлено'");
	
	Элементы["КонтекстноеМенюФайлыОчиститьУсловие"].Доступность = Ложь;
	
	ТребуетсяЗаписатьШаблон = Истина;
	Записать();
	
КонецПроцедуры

// Работа с тематиками

&НаКлиенте
Процедура ПоказыватьУдаленныеТематики(Команда)
	
	ПоказыватьУдаленныеТематики = Не ПоказыватьУдаленныеТематики;
	ПараметрыОтбора = Новый Соответствие;
	Параметрыотбора.Вставить("ПоказыватьУдаленныеТематики", ПоказыватьУдаленныеТематики);
	
	УстановитьОтборСпискаТематик(Тематики, Параметрыотбора);
	КоличествоТематик = КоличествоТематикДляВида(Объект.Ссылка,
		ПоказыватьУдаленныеТематики, ПоказыватьНеДействующиеТематики);
	Элементы.ПоказыватьУдаленныеТематики.Пометка = ПоказыватьУдаленныеТематики;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьНеДействующиеТематики(Команда)
	
	ПоказыватьНеДействующиеТематики = Не ПоказыватьНеДействующиеТематики;
	ПараметрыОтбора = Новый Соответствие;
	Параметрыотбора.Вставить("ПоказыватьНеДействующиеТематики", ПоказыватьНеДействующиеТематики);
	
	УстановитьОтборСпискаТематик(Тематики, Параметрыотбора);
	КоличествоТематик = КоличествоТематикДляВида(Объект.Ссылка,
		ПоказыватьУдаленныеТематики, ПоказыватьНеДействующиеТематики);
	
	Элементы.ПоказыватьНеДействующиеТематики.Пометка = ПоказыватьНеДействующиеТематики;
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеТематику(Команда)
	
	ПометкаУдаления = Ложь; НаименованиеТематики = "";
	МассивТематик = Новый Массив;
	
	Для Каждого ВыбраннаяСтрока Из Элементы.Тематики.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.Тематики.ДанныеСтроки(ВыбраннаяСтрока);
		МассивТематик.Добавить(ДанныеСтроки.Ссылка);
		НаименованиеТематики = ДанныеСтроки.Наименование;
		
		Если Не ПометкаУдаления Тогда 
			ПометкаУдаления = ДанныеСтроки.ПометкаУдаления;
		КонецЕсли;
	КонецЦикла;
	
	Количество = МассивТематик.Количество();
	
	Если Количество = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Количество > 1 Тогда 
		Если Не ПометкаУдаления Тогда 
			ТекстВопроса = НСтр("ru = 'Пометить выделенные тематики на удаление?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Снять с выделенных тематик пометку на удаление?'");
		КонецЕсли;
	Иначе 
		Если Не ПометкаУдаления Тогда 
			ТекстВопроса = СтрШаблон(НСтр("ru = 'Пометить ""%1"" на удаление?'"),
				НаименованиеТематики);
		Иначе
			ТекстВопроса = СтрШаблон(НСтр("ru = 'Снять с ""%1"" пометку на удаление?'"),
				НаименованиеТематики);
		КонецЕсли;
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("МассивТематик", МассивТематик);
	ДопПараметры.Вставить("ПометкаУдаления", ПометкаУдаления);
	Оповещение = Новый ОписаниеОповещения("ПометитьНаУдалениеТематикуПродолжение",
		ЭтотОбъект,
		ДопПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеТематикуПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		МассивТематик = Параметры.МассивТематик;
		ПометитьТематикиНаУдаление(МассивТематик, Не Параметры.ПометкаУдаления);
		
		Если Не ПоказыватьУдаленныеТематики Тогда 
			КоличествоТематик = КоличествоТематикДляВида(Объект.Ссылка,
				ПоказыватьУдаленныеТематики, ПоказыватьНеДействующиеТематики);
		КонецЕсли;
		
		Оповестить("ТематикиПомеченыНаУдаление", Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с обработкой

&НаКлиенте
Процедура ПодобратьДействие(Команда)
	
	СтрокиПериодДействий = ВидыДействий.ПолучитьЭлементы();
	
	Если СтрокиПериодДействий.Количество() = 0 Тогда 
		СтрокаПериодДействий = СтрокиПериодДействий.Добавить();
		СтрокаПериодДействий.ДействуетС = ОбщегоНазначенияКлиент.ДатаСеанса();
		СтрокаПериодДействий.ЭтоРодитель = Истина;
		СтрокаПериодДействий.Представление = СтрШаблон(НСтр("ru = 'Действует с: %1'"),
			Формат(СтрокаПериодДействий.ДействуетС, "ДЛФ=D"));
		СтрокаПериодДействий.Схема = НСтр("ru = 'Стандартная'");
	Иначе
		ТекущиеДанныеДерева = Элементы.ВидыДействий.ТекущиеДанные;
		Если ТекущиеДанныеДерева = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ТекущиеДанныеДерева.ЭтоРодитель Тогда 
			СтрокаПериодДействий = ТекущиеДанныеДерева;
		Иначе 
			ТекущиеДанныеРодитель = ТекущиеДанныеДерева.ПолучитьРодителя();
			Если ТекущиеДанныеРодитель = Неопределено Тогда
				Возврат;
			Иначе 
				СтрокаПериодДействий = ТекущиеДанныеРодитель;
			КонецЕсли;
		КонецЕсли;
		
		// Если настройка есть, то редактировать нельзя.
		ТекстНаличияОбработки = ДействияКлиент.ИсключениеЕслиПоНастройкеЕстьОбработка(ТекущиеДанныеДерева);
		Если ЗначениеЗаполнено(ТекстНаличияОбработки) Тогда
			ПоказатьПредупреждение(, ТекстНаличияОбработки); 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РежимПодборДействий = Не РежимПодборДействий;
	
	Если Не ЭтоМобильныйКлиент Тогда
		Элементы.ГруппаВидыДействийПеренос.Видимость = РежимПодборДействий;
	КонецЕсли;	
	
	Элементы.ГруппаВсеВидыДействий.Видимость = РежимПодборДействий;
	Элементы.ПодобратьДействие.Пометка = РежимПодборДействий;
	ДействияКлиент.УстановитьПараметрыСпискаВсеВидыДействий(ЭтотОбъект, СтрокаПериодДействий);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВидДействия(Команда)
	
	ТекущиеДанные = Элементы.ВсеВидыДействий.ТекущиеДанные;
	ВыбраныТолькоГрупповыеЭлементы = Истина;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ВидыДействийМассив = Новый Массив;
		
		Для Каждого ВыбраннаяСтрока Из Элементы.ВсеВидыДействий.ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Элементы.ВсеВидыДействий.ДанныеСтроки(ВыбраннаяСтрока);
			
			Если ДанныеСтроки.ЭтоГруппа Тогда
			
				Продолжить;
			
			КонецЕсли;
			
			ВыбраныТолькоГрупповыеЭлементы = Ложь;
			ВидыДействийМассив.Добавить(ДанныеСтроки.Ссылка);
			
		КонецЦикла;	
		
		Если ВыбраныТолькоГрупповыеЭлементы Тогда
		
			ТекстОшибки = НСтр("ru = 'Групповые элементы недоступны для выбора'");
			ПоказатьПредупреждение(, ТекстОшибки);
			
		Иначе
			
			ДействияКлиент.ДобавитьВидДействияВСписок(ЭтотОбъект, ВидыДействийМассив);
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВидДействия(Команда)
	
	ТекущиеДанные = Элементы.ВидыДействий.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ДействияКлиент.УдалитьВидДействияИзСписка(ЭтотОбъект, ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсе(Команда)
	
	ПоказатьВсеНастройкиПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ДействияКлиент.ПереместитьВидДействия(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ДействияКлиент.ПереместитьВидДействия(ЭтотОбъект, Команда, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРежимЗапуска(Команда)
	
	ТекущиеДанные = Элементы.ВидыДействий.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо выбрать настройку обработки.'"));
		Возврат;
	КонецЕсли;
		
	Если ТекущиеДанные.ЭтоРодитель Тогда 
		СтрокаРодитель = ТекущиеДанные;
	Иначе 
		ТекущиеДанныеРодитель = ТекущиеДанные.ПолучитьРодителя();
		Если ТекущиеДанныеРодитель = Неопределено Тогда
			Возврат;
		Иначе 
			СтрокаРодитель = ТекущиеДанныеРодитель;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаРодитель.СсылкаНаНастройку) Тогда
		Возврат;
	КонецЕсли;	
	
	УдалитьРежимЗапускаНаСервереИОбновить(СтрокаРодитель.СсылкаНаНастройку,
		СтрокаРодитель.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаСервере
Процедура УдалитьРежимЗапускаНаСервереИОбновить(СсылкаНаНастройку, ИдентификаторСтроки)
	
	НачатьТранзакцию();
	Попытка
	
		НастройкаОбъект = СсылкаНаНастройку.ПолучитьОбъект();
	
		ВидБизнесСобытияДляПроверки = НастройкаОбъект.ВидБизнесСобытия;
		
		НастройкаОбъект.ВидБизнесСобытия = Неопределено;
		НастройкаОбъект.ВидИнтерактивногоСобытия = Неопределено;
		
		НастройкаОбъект.Записать();	
	
		Если ЗначениеЗаполнено(ВидБизнесСобытияДляПроверки) Тогда
			ДействияСервер.ОбновитьПодпискуНаБизнесСобытия(ВидБизнесСобытияДляПроверки);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
			
	КонецПопытки;		
	
	ОбновитьПравилоИУсловияЗапуска(ИдентификаторСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗапускаНажатие()
	
	ТекущиеДанные = Элементы.ВидыДействий.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо выбрать настройку обработки.'"));
		Возврат;
	КонецЕсли;
		
	Если Объект.Ссылка.Пустая() Тогда 
		
		ОбработчикЗавершенияОткрытия = Новый ОписаниеОповещения(
			"ЗавершитьОткрытиеПравилаЗапускаДляВидаОбъекта",
			ЭтотОбъект);
		
		ТекстВопроса = 
			ОбщегоНазначенияДокументооборотКлиентСервер.ТекстВопросаНезаписанныхДанных(
			НСтр("ru = 'Режим автозапуска'"));
		ПоказатьВопрос(ОбработчикЗавершенияОткрытия, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;	
	
	ПравилаЗапускаНажатиеОсновное();
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗапускаНажатиеОсновное()
	
	ТекущиеДанные = Элементы.ВидыДействий.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо выбрать настройку обработки.'"));
		Возврат;
	КонецЕсли;
		
	Если ТекущиеДанные.ЭтоРодитель Тогда 
		СтрокаРодитель = ТекущиеДанные;
	Иначе 
		ТекущиеДанныеРодитель = ТекущиеДанные.ПолучитьРодителя();
		Если ТекущиеДанныеРодитель = Неопределено Тогда
			Возврат;
		Иначе 
			СтрокаРодитель = ТекущиеДанныеРодитель;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаРодитель.СсылкаНаНастройку) Тогда
		Возврат;
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПравилаЗапускаНажатиеПослеЗакрытия",
		ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура("СсылкаНаНастройку, ТолькоПросмотр",
		СтрокаРодитель.СсылкаНаНастройку,
		ТолькоПросмотр Или Не ПравоРедактированияОбработки);
	
	ОткрытьФорму(
		"Справочник.НастройкиОбработкиВидовОбъектов.Форма.ПравилоЗапуска", 
		ПараметрыОткрытия, 
		ЭтотОбъект,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Продолжение ПравилаЗапускаНажатие
//
&НаКлиенте
Процедура ЗавершитьОткрытиеПравилаЗапускаДляВидаОбъекта(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.ОК Тогда
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ПравилаЗапускаНажатиеОсновное();
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗапускаНажатиеПослеЗакрытия(ВыбранноеЗначение, Параметры) Экспорт

	// обновим ПравилаЗапуска	
	ТекущиеДанные = Элементы.ВидыДействий.ТекущиеДанные;
	Если ТекущиеДанные.ЭтоРодитель Тогда 
		СтрокаРодитель = ТекущиеДанные;
	Иначе 
		ТекущиеДанныеРодитель = ТекущиеДанные.ПолучитьРодителя();
		Если ТекущиеДанныеРодитель = Неопределено Тогда
			Возврат;
		Иначе 
			СтрокаРодитель = ТекущиеДанныеРодитель;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьПравилоИУсловияЗапуска(СтрокаРодитель.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияЗапускаНажатие()
	
	ТекущиеДанные = Элементы.ВидыДействий.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо выбрать настройку обработки.'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		ОбработчикЗавершенияОткрытия = Новый ОписаниеОповещения(
			"ЗавершитьОткрытиеУсловияЗапускаДляВидаОбъекта",
			ЭтотОбъект);
		
		ТекстВопроса = 
			ОбщегоНазначенияДокументооборотКлиентСервер.ТекстВопросаНезаписанныхДанных(
			НСтр("ru = 'Условия запуска'"));
		ПоказатьВопрос(ОбработчикЗавершенияОткрытия, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;	
	
	УсловияЗапускаНажатиеОсновное();
	
КонецПроцедуры

// Продолжение УсловияЗапускаНажатие
//
&НаКлиенте
Процедура ЗавершитьОткрытиеУсловияЗапускаДляВидаОбъекта(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.ОК Тогда
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	УсловияЗапускаНажатиеОсновное();
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияЗапускаНажатиеОсновное()
	
	ТекущиеДанные = Элементы.ВидыДействий.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо выбрать настройку обработки.'"));
		Возврат;
	КонецЕсли;
		
	Если ТекущиеДанные.ЭтоРодитель Тогда 
		СтрокаРодитель = ТекущиеДанные;
	Иначе 
		ТекущиеДанныеРодитель = ТекущиеДанные.ПолучитьРодителя();
		Если ТекущиеДанныеРодитель = Неопределено Тогда
			Возврат;
		Иначе 
			СтрокаРодитель = ТекущиеДанныеРодитель;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаРодитель.СсылкаНаНастройку) Тогда
		Возврат;
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УсловияЗапускаНажатиеПослеЗакрытия",
		ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура("СсылкаНаНастройку, ТолькоПросмотр",
		СтрокаРодитель.СсылкаНаНастройку,
		ТолькоПросмотр Или Не ПравоРедактированияОбработки);
	
	ОткрытьФорму(
		"Справочник.НастройкиОбработкиВидовОбъектов.Форма.УсловияЗапуска", 
		ПараметрыОткрытия, 
		ЭтотОбъект,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияЗапускаНажатиеПослеЗакрытия(ВыбранноеЗначение, Параметры) Экспорт

	// обновим ПравилаЗапуска	
	ТекущиеДанные = Элементы.ВидыДействий.ТекущиеДанные;
	Если ТекущиеДанные.ЭтоРодитель Тогда 
		СтрокаРодитель = ТекущиеДанные;
	Иначе 
		ТекущиеДанныеРодитель = ТекущиеДанные.ПолучитьРодителя();
		Если ТекущиеДанныеРодитель = Неопределено Тогда
			Возврат;
		Иначе 
			СтрокаРодитель = ТекущиеДанныеРодитель;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьПравилоИУсловияЗапуска(СтрокаРодитель.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьНастройкиОбработкиВФайл(Команда)
	
	ТекущиеДанные = Элементы.ВидыДействий.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыгрузки = КопированиеНастроекОбработкиКлиент.НовыеПараметрыВыгрузкиНастроекОбработки();
	ПараметрыВыгрузки.НастройкиОбработки = ТекущиеДанные.СсылкаНаНастройку;
	
	КопированиеНастроекОбработкиКлиент.ВыгрузитьНастройкиОбработкиВФайл(ПараметрыВыгрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиОбработкиИзФайла(Команда)
	
	Если Модифицированность Тогда
		
		ОбработчикОтвета = Новый ОписаниеОповещения(
			"ОбработатьОтветНаВопросОЗаписиПередЗагрузкойНастроекОбработки", ЭтотОбъект);
		
		ТекстВопроса = НСтр("ru = 'Перед загрузкой настроек необходимо сохранить изменения в виде документа. Продолжить?'");
		Заголовок = НСтр("ru = 'Запись вида документа'");
		
		ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , , Заголовок);
		Возврат;
		
	КонецЕсли;
	
	ЗагрузитьНастройкиОбработки();
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныИменФайлов(Команда)
	
	ПараметрыОткрытия = Новый Структура("Вид", Объект.Ссылка);
	ОткрытьФорму("Справочник.ШаблоныИменФайлов.Форма.ФормаСпискаДляВида", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРеестр(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Реестр) И ВключитьВРеестры Тогда
		НовыйРеестр = ЗаписатьНастройкиРеестра();
		Если ЗначениеЗаполнено(НовыйРеестр) Тогда
			ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъекта(НовыйРеестр);
		КонецЕсли;
	КонецЕсли;
	
	РаботаСРеестрамиКлиент.НастроитьРеестр(Реестр);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСправкуПоФорматуЭДО(Команда)
	
	ФорматЭДРасширеннаяПодсказкаНажатие(Элементы.ТаблицаНастроекЭДО.ТекущиеДанные.Формат);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ЗаписатьНастройкиРеестра()
	
	НовыйРеестр = РаботаСРеестрами.ОбновитьРеестрПоИсточнику(Объект.Ссылка, ВключитьВРеестры);
	ОбновитьРеестр();
	
	Возврат НовыйРеестр;
	
КонецФункции

&НаСервере
Процедура ОбновитьРеестр()
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРеестры") Тогда
		Реестр = Справочники.Реестры.НайтиПоИсточнику(Объект.Ссылка); 
	Иначе
		Реестр = Справочники.Реестры.ПустаяСсылка();
	КонецЕсли;
	
	ВключитьВРеестры = ЗначениеЗаполнено(Реестр);
	Элементы.НастроитьРеестр.Доступность = ВключитьВРеестры;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеНастройкиПриИзменении()
	
	ПоказатьВсеНастройки = Не ПоказатьВсеНастройки;
	Элементы.ДекорацияИнфОбработкаГруппы.Видимость = Ложь;
	Элементы.ВидыДействийКонтекстноеМенюПоказатьВсе.Пометка = ПоказатьВсеНастройки;
	ОбновитьВидыДействийПоВидуДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидыДействийПоВидуДокумента();
	
	Если Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	ДействияСервер.ЗаполнитьВидыДействийПоВидуОбъекта(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОпций(Форма)
	
	Объект = Форма.Объект;
	НеУчитыватьХранение = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияПолейХранения.НеУчитывать");
	УстановитьДоступностьОпции(Форма, "ЯвляетсяДоговором",
		Не Объект.ЯвляетсяКомплектомДокументов
		И Не Объект.ЯвляетсяЗаявкойНаОплату
		И Не Объект.ЯвляетсяИсходящейКорреспонденцией
		И Не Объект.ЯвляетсяВходящейКорреспонденцией);
	
	Если Объект.ЯвляетсяКомплектомДокументов Тогда
		Объект.УчитыватьСуммуДокумента = Ложь;
	КонецЕсли;
	
	Если Не Объект.УчитыватьСуммуДокумента
		И (Объект.ВестиУчетТоваровИУслуг
		Или Объект.ВестиУчетПоСтатьямДДС) Тогда
		Объект.ВестиУчетТоваровИУслуг = Ложь;
		Объект.ВестиУчетПоСтатьямДДС = Ложь;
	КонецЕсли;
	
	ДоступенКомплект =
		Не Объект.ЯвляетсяДоговором
		И Не Объект.ВестиУчетПоНоменклатуреДел
		И Не Объект.УчитыватьСрокДействия
		И Не Объект.УчитыватьНедействующиеДокументы
		И Не Объект.УчитыватьСуммуДокумента
		И Не Объект.ВестиУчетПоСтатьямДДС
		И Не Объект.ВестиУчетТоваровИУслуг
		И Не Объект.ИспользоватьСрокИсполнения
		И Не Объект.ОбязателенФайлОригинала
		И Не Объект.ЯвляетсяЗаявкойНаОплату
		И Не Объект.ЯвляетсяИсходящейКорреспонденцией
		И Не Объект.ЯвляетсяВходящейКорреспонденцией
		И Не Объект.КонтролироватьНаличиеОригинала;
	Если Форма.ИспользоватьМестаХранения Тогда 
		ДоступенКомплект = ДоступенКомплект И Объект.УчитыватьМестоХранения = НеУчитыватьХранение
			И Объект.УчитыватьОтветственногоЗаХранение = НеУчитыватьХранение;
	КонецЕсли;
	
	УстановитьДоступностьОпции(Форма, "ЯвляетсяКомплектомДокументов", ДоступенКомплект);
	
	УстановитьДоступностьОпции(Форма, "УчетПоКонтрагентам",
		Не Объект.ЯвляетсяДоговором
		И Не Объект.ЯвляетсяЗаявкойНаОплату
		И Не Объект.ЯвляетсяВходящейКорреспонденцией
		И Не Объект.ЯвляетсяИсходящейКорреспонденцией);
	УстановитьДоступностьОпции(Форма, "УчетПоОрганизациям",
		Не Объект.ЯвляетсяДоговором
		И Не Объект.ВестиУчетПоНоменклатуреДел
		И Не Объект.ЯвляетсяЗаявкойНаОплату
		И Не Объект.ЯвляетсяВходящейКорреспонденцией
		И Не Объект.ЯвляетсяИсходящейКорреспонденцией);
		
	УстановитьДоступностьОпции(Форма, "УчитыватьСрокДействия",
		Не Объект.ЯвляетсяДоговором И Не Объект.ЯвляетсяКомплектомДокументов);
	УстановитьДоступностьОпции(Форма, "УчитыватьСуммуДокумента",
		Не Объект.ЯвляетсяДоговором
		И Не Объект.ЯвляетсяКомплектомДокументов
		И Не Объект.ЯвляетсяЗаявкойНаОплату);
	УстановитьДоступностьОпции(Форма, "УчитыватьНедействующиеДокументы",
		Не Объект.ЯвляетсяДоговором И Не Объект.ЯвляетсяКомплектомДокументов);
	УстановитьДоступностьОпции(Форма, "ВестиУчетПоНоменклатуреДел",
		Не Объект.ЯвляетсяКомплектомДокументов);
	УстановитьДоступностьОпции(Форма, "ИспользоватьСрокИсполнения",
		Не Объект.ЯвляетсяКомплектомДокументов
		И Не Объект.ЯвляетсяЗаявкойНаОплату
		И Не Объект.ЯвляетсяОбращениемОтГраждан);
	
	ДоступностьГруппыКонтроляБумажныхДокументов = Не Объект.ЯвляетсяКомплектомДокументов
		И НЕ Объект.ФормаДокумента = ПредопределенноеЗначение("Перечисление.ВариантыФормДокументов.Электронная");
	УстановитьДоступностьОпции(Форма, "ОбязателенФайлОригинала",
		ДоступностьГруппыКонтроляБумажныхДокументов);
	УстановитьДоступностьОпции(Форма, "КонтролироватьНаличиеОригинала", Не Объект.ЯвляетсяКомплектомДокументов 
																		И Не Объект.ЯвляетсяИсходящейКорреспонденцией);
	
	ДоступностьГруппыХраненияДокументов = НЕ (Форма.ИспользоватьМестаХранения 
		И Объект.ФормаДокумента = ПредопределенноеЗначение("Перечисление.ВариантыФормДокументов.Электронная"));
	УстановитьДоступностьОпции(Форма, "УчитыватьМестоХранения", 
		ДоступностьГруппыХраненияДокументов);
	УстановитьДоступностьОпции(Форма, "УчитыватьОтветственногоЗаХранение", 
		ДоступностьГруппыХраненияДокументов);
		
	Форма.Элементы.ШаблонФормаДокумента.СписокВыбора.Очистить();
	Если Объект.ФормаДокумента = ПредопределенноеЗначение(
		"Перечисление.ВариантыФормДокументов.БумажнаяИлиЭлектронная") Тогда 
		Форма.Элементы.ШаблонФормаДокумента.СписокВыбора.Добавить(ПредопределенноеЗначение(
			"Перечисление.ВариантыФормДокументов.Бумажная"));
		Форма.Элементы.ШаблонФормаДокумента.СписокВыбора.Добавить(ПредопределенноеЗначение(
			"Перечисление.ВариантыФормДокументов.Электронная"));
	Иначе 
		Форма.Элементы.ШаблонФормаДокумента.СписокВыбора.Добавить(Объект.ФормаДокумента);
	КонецЕсли;
	
	УстановитьДоступностьОпции(Форма, "ВариантПодписания",
		Объект.ВестиУчетСторон
		И Не Объект.ЯвляетсяДоговором
		И Не Объект.ЯвляетсяЗаявкойНаОплату);
		
	УстановитьДоступностьОпции(Форма, "ВестиУчетСторон",
		Не Объект.ЯвляетсяДоговором
		И Не Объект.ЯвляетсяЗаявкойНаОплату
		И Не Объект.ЯвляетсяВходящейКорреспонденцией
		И Не Объект.ЯвляетсяИсходящейКорреспонденцией);
	
	УстановитьДоступностьОпции(Форма, "ВестиУчетПоСтатьямДДС",
		Не Объект.ЯвляетсяЗаявкойНаОплату И Не Объект.ЯвляетсяКомплектомДокументов);
	
	УстановитьДоступностьОпции(Форма, "ВестиУчетТоваровИУслуг", Не Объект.ЯвляетсяКомплектомДокументов);
	
	УстановитьДоступностьОпции(Форма, "ЯвляетсяОбращениемОтГраждан",
		Не Объект.ЯвляетсяДоговором
		И Не Объект.ЯвляетсяКомплектомДокументов
		И Не Объект.ЯвляетсяИсходящейКорреспонденцией
		И Объект.ЯвляетсяВходящейКорреспонденцией);
		
	УстановитьДоступностьОпции(Форма, "ЯвляетсяВходящейКорреспонденцией",
		Не Объект.ЯвляетсяИсходящейКорреспонденцией 
		И Не Объект.ЯвляетсяДоговором
		И Не Объект.ЯвляетсяЗаявкойНаОплату
		И Не Объект.ЯвляетсяКомплектомДокументов
		И Не Объект.ВестиУчетПоАдресатам);
	УстановитьДоступностьОпции(Форма, "УчитыватьВходящийНомерИДатуПолучателя",
		Объект.ЯвляетсяИсходящейКорреспонденцией);
	УстановитьДоступностьОпции(Форма, "ЯвляетсяИсходящейКорреспонденцией",
		Не Объект.ЯвляетсяВходящейКорреспонденцией 
		И Не Объект.ЯвляетсяДоговором
		И Не Объект.ЯвляетсяЗаявкойНаОплату
		И Не Объект.ЯвляетсяКомплектомДокументов
		И Не Объект.ВестиУчетПоАдресатам);
	УстановитьДоступностьОпции(Форма, "ВестиУчетПоАдресатам",
		Не Объект.ЯвляетсяВходящейКорреспонденцией И Не Объект.ЯвляетсяИсходящейКорреспонденцией);
		
	УстановитьДоступностьОпции(Форма, "ЯвляетсяЗаявкойНаОплату",
		Не Объект.ЯвляетсяВходящейКорреспонденцией
		И Не Объект.ЯвляетсяИсходящейКорреспонденцией
		И Не Объект.ЯвляетсяКомплектомДокументов
		И Не Объект.ЯвляетсяДоговором);
	
	УстановитьДоступностьОпции(Форма, "ИспользоватьЭДО" , ЗначениеЗаполнено(Объект.ФормаДокумента)
		И Объект.ФормаДокумента <> ПредопределенноеЗначение("Перечисление.ВариантыФормДокументов.Бумажная"));
	
	УстановитьДоступностьОпции(Форма, "ГруппаОтправлятьПоЭДОКак" , Объект.ИспользоватьЭДО);
	УстановитьДоступностьОпции(Форма, "ГруппаНастройкиПоОтправителюПолучателю" , Объект.ИспользоватьЭДО);
	
	ОбновитьВидимостьРеквизитов(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОпции(Форма, ИмяОпции, Значение)
	
	Если Форма.Элементы[ИмяОпции].Доступность <> Значение Тогда
		Форма.Элементы[ИмяОпции].Доступность = Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НужноВключитьУчетПоНоменклатуреДел()
	
	ЕстьИндексНомДел = Ложь;
	Для Каждого Строка Из НастройкиНумерации Цикл
		Если ЗначениеЗаполнено(Строка.Нумератор) И Найти(Строка.Нумератор.ФорматНомера, "ИндексНомДел") > 0 Тогда 
			ЕстьИндексНомДел = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат ЕстьИндексНомДел
		И Не Объект.ЯвляетсяКомплектомДокументов
		И Не Объект.ВестиУчетПоНоменклатуреДел;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьИЗакрыть()
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Закрыть", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиКлиент(ПараметрыЗаписи)
	
	Если Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждение")
		И ПараметрыЗаписи.Свойство("НетНастройкиНумерации") И ПараметрыЗаписи.НетНастройкиНумерации = Истина Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПослеЗаписиКлиентПродолжение",
			ЭтотОбъект,
			ПараметрыЗаписи);
		
		ПоказатьПредупреждение(
			ОписаниеОповещения,
			НСтр("ru = 'Документы с данным видом нельзя будет зарегистрировать, так как отсутствует подходящая настройка нумерации.'"));
		Возврат;
	КонецЕсли;	
	
	Если ПараметрыЗаписи.Свойство("НовыйРеестр") Тогда
		ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъекта(ПараметрыЗаписи.НовыйРеестр);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
		ЗакрытьПослеЗаписи();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиКлиентПродолжение(ПараметрыЗаписи) Экспорт
	
	ПараметрыЗаписи.Вставить("ПоказаноПредупреждение", Истина);
	ПослеЗаписиКлиент(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаголовокЗакладкиНумерация()
	
	КоличествоНастроекНумерации = НастройкиНумерации.Количество();
	
КонецПроцедуры		

&НаСервереБезКонтекста
Функция ПолучитьЧислоДокументовСоЗначениемРеквизита(ВидДокумента, ИмяРеквизита, ЗначениеРеквизита,
	ОперацияСравнения = "=", ТекстОшибкиПравДоступа = "")
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(СтрШаблон(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(ДокументыПредприятия.Ссылка), 0) КАК ЧислоДокументов
		|ИЗ
		|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
		|ГДЕ
		|	ДокументыПредприятия.ВидДокумента = &ВидДокумента
		|	И ДокументыПредприятия.%1 %2 &ЗначениеРеквизита",
		ИмяРеквизита,
		ОперацияСравнения));
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	Запрос.УстановитьПараметр("ЗначениеРеквизита", ЗначениеРеквизита);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЧислоДокументов = Выборка.ЧислоДокументов;
	
	Если ЧислоДокументов = 0 Тогда
		Возврат ЧислоДокументов;
	КонецЕсли;
	
	Если ЧислоДокументов % 10 = 1
		И ЧислоДокументов <> 11 Тогда
		ЧислоДокументовСтрокой = СтрШаблон(НСтр("ru = '%1 документа'"), ЧислоДокументов);
	Иначе
		ЧислоДокументовСтрокой = СтрШаблон(НСтр("ru = '%1 документов'"), ЧислоДокументов);
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.Справочники.ДокументыПредприятия) Тогда
		ТекстОшибкиПравДоступа = СтрШаблон(НСтр(
			"ru = 'Недостаточно прав доступа для изменения %1 этого вида.
			|Обратитесь к администратору.'"),
			ЧислоДокументовСтрокой);
		Возврат ЧислоДокументов;
	КонецЕсли;
	
	// Сразу проверим права доступа, если документов немного.
	Если ЧислоДокументов < 500 Тогда
		ЧислоДокументовБезПрав = 0;
		Запрос.Текст = СтрШаблон(
			"ВЫБРАТЬ
			|	ДокументыПредприятия.Ссылка
			|ИЗ
			|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
			|ГДЕ
			|	ДокументыПредприятия.ВидДокумента = &ВидДокумента
			|	И ДокументыПредприятия.%1 %2 &ЗначениеРеквизита",
			ИмяРеквизита,
			ОперацияСравнения);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Не ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(Выборка.Ссылка).Изменение Тогда
				ЧислоДокументовБезПрав = ЧислоДокументовБезПрав + 1;
			КонецЕсли;
		КонецЦикла;
		Если ЧислоДокументовБезПрав <> 0 Тогда
			Если ЧислоДокументовБезПрав % 10 = 1
				И ЧислоДокументовБезПрав <> 11 Тогда
				ЧислоДокументовБезПрав = СтрШаблон(НСтр("ru = '%1 документа, требующего изменения'"),
					ЧислоДокументовБезПрав);
			Иначе
				ЧислоДокументовБезПрав = СтрШаблон(НСтр("ru = '%1 документов, требующих изменения'"),
					ЧислоДокументовБезПрав);
			КонецЕсли;
			ТекстОшибкиПравДоступа = СтрШаблон(НСтр(
				"ru = 'Недостаточно прав доступа для изменения %1 этого вида из %2.
				|Обратитесь к администратору.'"),
				ЧислоДокументовСтрокой,
				ЧислоДокументовБезПрав);
			Возврат ЧислоДокументов;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЧислоДокументов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЧислоДокументовЭтогоВида(ВидДокумента)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(ДокументыПредприятия.Ссылка), 0) КАК ЧислоДокументов
		|ИЗ
		|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
		|ГДЕ
		|	ДокументыПредприятия.ВидДокумента = &ВидДокумента");
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЧислоДокументов = Выборка.ЧислоДокументов;
	
	Возврат ЧислоДокументов;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ВыполнитьЗаполнениеОтветственного(ВидДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументыПредприятия.Ссылка КАК Ссылка,
		|	ДокументыПредприятия.Подготовил КАК Подготовил
		|ИЗ
		|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
		|ГДЕ
		|	ДокументыПредприятия.ВидДокумента = &ВидДокумента
		|	И (ДокументыПредприятия.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|			ИЛИ ДокументыПредприятия.Ответственный = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|			ИЛИ ДокументыПредприятия.Ответственный = НЕОПРЕДЕЛЕНО)
		|	И ДокументыПредприятия.Подготовил <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|	И ДокументыПредприятия.Подготовил <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)";
		
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Ответственный = Выборка.Подготовил;
			ДокументОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Заполнение Ответственного в документах.Ошибка'", 
				ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, , , ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура ВыполнитьИзменениеОрганизации(ВидДокумента, Организация)
	
	Если Организация = Справочники.Организации.ПустаяСсылка() Тогда
		ТекстУсловия = "ИзменяемыеДанные.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	Иначе
		ТекстУсловия = "ИзменяемыеДанные.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИзменяемыеДанные.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ШаблоныДокументов КАК ИзменяемыеДанные
		|ГДЕ
		|	ИзменяемыеДанные.ВидДокумента = &ВидДокумента
		|	И " + ТекстУсловия + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИзменяемыеДанные.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДокументыПредприятия КАК ИзменяемыеДанные
		|ГДЕ
		|	ИзменяемыеДанные.ВидДокумента = &ВидДокумента
		|	И " + ТекстУсловия + "
		|");
		
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	Попытка
		
		Пока Выборка.Следующий() Цикл
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ИзменяемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ИзменяемыйОбъект.Организация = Организация;
			ИзменяемыйОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстСообщенияОбОшибке = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Описание = СтрШаблон(
			РедакцииКонфигурацииКлиентСервер.ВыполнитьИзменениеОрганизацииОшибка(),
			ВидДокумента,
			ТекстСообщенияОбОшибке);
		
		РаботаСУведомлениями.ОтправитьУведомленияОбОшибке(Описание, ВидДокумента);
		
		ВызватьИсключение Описание;
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПослеЗаписи()

	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Изменение:'"),
		ПолучитьНавигационнуюСсылку(Объект.Ссылка),
		Строка(Объект.Ссылка),
		БиблиотекаКартинок.Информация32);
		
	Если Открыта() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ШаблонИзменен()
	
	Если ШаблонДокумента.Адресат <> ШаблонДокументаПриОткрытии.Адресат
		Или ШаблонДокумента.ВопросДеятельности <> ШаблонДокументаПриОткрытии.ВопросДеятельности
		Или ШаблонДокумента.ГрифДоступа <> ШаблонДокументаПриОткрытии.ГрифДоступа
		Или ШаблонДокумента.ДлительностьИсполнения <>
			ШаблонДокументаПриОткрытии.ДлительностьИсполнения
		Или ШаблонДокумента.КомментарийКДокументу <>
			ШаблонДокументаПриОткрытии.КомментарийКДокументу
		Или ШаблонДокумента.КомментарийКШаблону <> ШаблонДокументаПриОткрытии.КомментарийКШаблону
		Или ШаблонДокумента.КонтактноеЛицо <> ШаблонДокументаПриОткрытии.КонтактноеЛицо
		Или ШаблонДокумента.Контрагент <> ШаблонДокументаПриОткрытии.Контрагент
		Или ШаблонДокумента.Подписант <> ШаблонДокументаПриОткрытии.Подписант
		Или ШаблонДокумента.НоменклатураДел <> ШаблонДокументаПриОткрытии.НоменклатураДел
		Или ШаблонДокумента.Организация <> ШаблонДокументаПриОткрытии.Организация
		Или ШаблонДокумента.Ответственный <> ШаблонДокументаПриОткрытии.Ответственный
		Или ШаблонДокумента.Папка <> ШаблонДокументаПриОткрытии.Папка
		Или ШаблонДокумента.Подразделение <> ШаблонДокументаПриОткрытии.Подразделение
		Или ШаблонДокумента.Проект <> ШаблонДокументаПриОткрытии.Проект
		Или ШаблонДокумента.Содержание <> ШаблонДокументаПриОткрытии.Содержание
		Или ШаблонДокумента.Заголовок <> ШаблонДокументаПриОткрытии.Заголовок
		Или ШаблонДокумента.ЗапретитьИзменятьРеквизитыИзШаблона <>
			ШаблонДокументаПриОткрытии.ЗапретитьИзменятьРеквизитыИзШаблона
		Или ШаблонДокумента.ЗапретитьРедактироватьФайлы <>
			ШаблонДокументаПриОткрытии.ЗапретитьРедактироватьФайлы
		Или ШаблонДокумента.ЗапретитьУдалятьФайлы <>
			ШаблонДокументаПриОткрытии.ЗапретитьУдалятьФайлы
		Или ШаблонДокумента.СтатьяДвиженияДенежныхСредств <>
			ШаблонДокументаПриОткрытии.СтатьяДвиженияДенежныхСредств
		Или ШаблонДокумента.ФормаДокумента <> ШаблонДокументаПриОткрытии.ФормаДокумента
		Или ШаблонДокумента.МестоХранения <> ШаблонДокументаПриОткрытии.МестоХранения
		Или ШаблонДокумента.ОтветственныйЗаХранение <> ШаблонДокументаПриОткрытии.ОтветственныйЗаХранение
		Или ШаблонДокумента.ЗапретитьАвтоматическоеРасширениеДоступа <>
			ШаблонДокументаПриОткрытии.ЗапретитьАвтоматическоеРасширениеДоступа
		Или ОбщегоНазначенияДокументооборотКлиентСервер.ЕстьОтличияВТаблицах(
			ШаблонДокументаПриОткрытии.РабочаяГруппаДокумента, 
			ШаблонДокумента.РабочаяГруппаДокумента,
			"Участник, Изменение")
		Или ОбщегоНазначенияДокументооборотКлиентСервер.ЕстьОтличияВТаблицах(
			ШаблонДокументаПриОткрытии.Товары, 
			ШаблонДокумента.Товары,
			"НомерСтроки, Номенклатура, ЕдиницаИзмерения, Количество")
		Или ОбщегоНазначенияДокументооборотКлиентСервер.ЕстьОтличияВТаблицах(
			ИсходнаяРабочаяГруппа, 
			РабочаяГруппаТаблица,
			"Участник, Изменение")
		Или ОбщегоНазначенияДокументооборотКлиентСервер.ЕстьОтличияВТаблицах(
			ШаблонДокументаПриОткрытии.Контрагенты, 
			ШаблонДокумента.Контрагенты,
			"Контрагент, КонтактноеЛицо, Способ")
		Или ОбщегоНазначенияДокументооборотКлиентСервер.ЕстьОтличияВТаблицах(
			ШаблонДокументаПриОткрытии.Стороны, 
			ШаблонДокумента.Стороны,
			"Сторона, КонтактноеЛицо, Наименование, Подписант")
		Или ОбщегоНазначенияДокументооборотКлиентСервер.ЕстьОтличияВТаблицах(
			ШаблонДокументаПриОткрытии.Категории, 
			ШаблонДокумента.Категории,
			"Значение")
		Или ОбщегоНазначенияДокументооборотКлиентСервер.ЕстьОтличияВТаблицах(
			ДополнительныеРеквизитыПриОткрытии, 
			ДополнительныеРеквизиты,
			"Свойство, Значение") 
		Или ШаблонДокумента.Тематика <> ШаблонДокументаПриОткрытии.Тематика
		Или ШаблонДокумента.СрокИсполненияУказанВРабочихДнях <>
			ШаблонДокументаПриОткрытии.СрокИсполненияУказанВРабочихДнях
		Или ШаблонДокумента.Способ <> ШаблонДокументаПриОткрытии.Способ
		Или ШаблонДокумента.АдресатВходящейКорреспонденции <>
			ШаблонДокументаПриОткрытии.АдресатВходящейКорреспонденции
		Или ШаблонДокумента.ВидОбращения <> ШаблонДокументаПриОткрытии.ВидОбращения 
		Или ШаблонДокумента.Важность <> ШаблонДокументаПриОткрытии.Важность Тогда 
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЕстьЗаполненныеРеквизитыШаблона()
	
	Если ЗначениеЗаполнено(ШаблонДокумента.Адресат)
		Или ЗначениеЗаполнено(ШаблонДокумента.ВопросДеятельности)
		Или ЗначениеЗаполнено(ШаблонДокумента.ГрифДоступа)
		Или ЗначениеЗаполнено(ШаблонДокумента.Заголовок)
		Или ЗначениеЗаполнено(ШаблонДокумента.ДлительностьИсполнения)
		Или ЗначениеЗаполнено(ШаблонДокумента.Подписант)
		Или ШаблонДокумента.Товары.Количество() > 0
		Или ШаблонДокумента.Категории.Количество() > 0
		Или ШаблонДокумента.Стороны.Количество() > 0
		Или ШаблонДокумента.Контрагенты.Количество() > 0
		Или ЗначениеЗаполнено(ШаблонДокумента.КонтактноеЛицо)
		Или ЗначениеЗаполнено(ШаблонДокумента.Контрагент)
		Или ЗначениеЗаполнено(ШаблонДокумента.КомментарийКДокументу)
		Или ЗначениеЗаполнено(ШаблонДокумента.КомментарийКШаблону)
		Или ЗначениеЗаполнено(ШаблонДокумента.НоменклатураДел)
		Или ЗначениеЗаполнено(ШаблонДокумента.Организация)
		Или ЗначениеЗаполнено(ШаблонДокумента.Ответственный)
		Или ЗначениеЗаполнено(ШаблонДокумента.Папка)
		Или ЗначениеЗаполнено(ШаблонДокумента.Подразделение)
		Или ЗначениеЗаполнено(ШаблонДокумента.Проект)
		Или ЗначениеЗаполнено(ШаблонДокумента.Содержание)
		Или ЗначениеЗаполнено(ШаблонДокумента.СтатьяДвиженияДенежныхСредств)
		Или ШаблонДокумента.ЗапретитьИзменятьРеквизитыИзШаблона
		Или ШаблонДокумента.ЗапретитьРедактироватьФайлы
		Или ШаблонДокумента.ЗапретитьУдалятьФайлы
		Или ЗначениеЗаполнено(ШаблонДокумента.ФормаДокумента)
		Или ЗначениеЗаполнено(ШаблонДокумента.МестоХранения)
		Или ЗначениеЗаполнено(ШаблонДокумента.ОтветственныйЗаХранение)
		Или ШаблонДокумента.РабочаяГруппаДокумента.Количество() > 0
		Или ЗначениеЗаполнено(ШаблонДокумента.Тематика) 
		Или ЗначениеЗаполнено(ШаблонДокумента.Способ)
		Или ЗначениеЗаполнено(ШаблонДокумента.АдресатВходящейКорреспонденции)
		Или ЗначениеЗаполнено(ШаблонДокумента.ВидОбращения) 
		Или ЗначениеЗаполнено(ШаблонДокумента.Важность) Тогда 
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокШаблоновВида(ВидДокумента = Неопределено)
	
	Элементы.ШаблонДокумента.Заголовок = НСтр("ru = 'Шаблон документа'");
	МногоШаблонов = Ложь;
	
	Если Не ПравоДоступа("Добавление", Метаданные.Справочники.ДокументыПредприятия) Тогда
		Элементы.ШаблонДокумента.Видимость = Ложь;
		Элементы.ОсновныеСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Возврат;
	КонецЕсли;
	
	Если ВидДокумента = Неопределено Тогда 
		ВидДокумента = Объект.Ссылка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		 "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		 |	ШаблоныДокументов.Ссылка
		 |ИЗ
		 |	Справочник.ШаблоныДокументов КАК ШаблоныДокументов
		 |ГДЕ
		 |	ШаблоныДокументов.ВидДокумента = &ВидДокумента
		 |	И НЕ ШаблоныДокументов.ПометкаУдаления";
		 
	Запрос.Параметры.Вставить("ВидДокумента", ВидДокумента);
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоШаблонов = Выборка.Количество();
	
	Элементы.ФормаСкопироватьШаблон.Доступность = Истина;
	
	Если КоличествоШаблонов = 0 Тогда 
		УстановитьПривилегированныйРежим(Истина);
		НовыйШаблон = Справочники.ШаблоныДокументов.СоздатьЭлемент();
		НовыйШаблон.Ответственный = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
		
		ЗначениеВРеквизитФормы(НовыйШаблон, "ШаблонДокумента");
		ЗначениеВРеквизитФормы(НовыйШаблон, "ШаблонДокументаПриОткрытии");
		Элементы.ГруппаОдинШаблон.Видимость = Истина;
		Элементы.ГруппаМногоШаблонов.Видимость = Ложь;
		УстановитьПривилегированныйРежим(Ложь);
		Элементы.ФормаСкопироватьШаблон.Доступность = Ложь;
		
	ИначеЕсли КоличествоШаблонов = 1 Тогда 
		Выборка.Следующий();
		ЗначениеВРеквизитФормы(Выборка.Ссылка.ПолучитьОбъект(), "ШаблонДокумента");
		ЗначениеВРеквизитФормы(Выборка.Ссылка.ПолучитьОбъект(), "ШаблонДокументаПриОткрытии");
		Элементы.ГруппаОдинШаблон.Видимость = Истина;
		Элементы.ГруппаМногоШаблонов.Видимость = Ложь;
		
	Иначе 
		ШаблоныВида.Очистить();
		Пока Выборка.Следующий() Цикл 
			НоваяСтрока = ШаблоныВида.Добавить();
			НоваяСтрока.Шаблон = Выборка.Ссылка;
		КонецЦикла;
		
		Элементы.ГруппаМногоШаблонов.Видимость = Истина;
		Элементы.ГруппаОдинШаблон.Видимость = Ложь;
		
		УстановитьПривилегированныйРежим(Истина);
		НовыйШаблон = Справочники.ШаблоныДокументов.СоздатьЭлемент();
		ЗначениеВРеквизитФормы(НовыйШаблон, "ШаблонДокумента");
		ЗначениеВРеквизитФормы(НовыйШаблон, "ШаблонДокументаПриОткрытии");
		УстановитьПривилегированныйРежим(Ложь);
		
		Элементы.ШаблонДокумента.Заголовок = НСтр("ru = 'Шаблоны документа'");
		МногоШаблонов = Истина;
		
		Элементы.ШаблоныВида.ИзменятьСоставСтрок = ЕстьПравоНаСозданиеШаблона;
	КонецЕсли;
	
	Если Не МногоШаблонов Тогда 
		// Рабочие группы
		РаботаСРабочимиГруппами.ПриСозданииНаСервере(ЭтотОбъект);
		РаботаСРабочимиГруппами.ПриЧтенииНаСервере(ЭтотОбъект);
		РаботаСРабочимиГруппами.ШаблонПриСозданииНаСервере(ЭтотОбъект);
		
		// Формирование исходной рабочей группы
		ИсходнаяРабочаяГруппа.Очистить();
		Для каждого Эл Из РабочаяГруппаТаблица Цикл
			Строка = ИсходнаяРабочаяГруппа.Добавить();
			Строка.Участник = Эл.Участник; 
			Строка.Изменение = Эл.Изменение;
		КонецЦикла;
		
		// Категории данных
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных") Тогда
			Для Каждого Категория Из ШаблонДокумента.Категории Цикл
				Категория.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(Категория.Значение);
			КонецЦикла;
		Иначе
			Элементы.СтраницаКатегории.Видимость = Ложь;
		КонецЕсли;
		
		// Доп. реквизиты
		СписокДопРеквизитов = РаботаСШаблонамиДокументовСервер.ПолучитьНаборДопРеквизитовДокумента(
			"ДокументыПредприятия", ВидДокумента, ШаблонДокумента);
		РаботаСШаблонамиДокументовСервер.ПоместитьДопРеквизитыНаФорму(ДополнительныеРеквизиты, СписокДопРеквизитов);
		РаботаСШаблонамиДокументовСервер.ПоместитьДопРеквизитыНаФорму(
			ДополнительныеРеквизитыПриОткрытии, СписокДопРеквизитов);
		КоличествоСвойств = СписокДопРеквизитов.Количество();
		
		Если КоличествоСвойств > 0 Тогда
			Элементы.ДопРеквизиты.Видимость = Истина;
		Иначе 
			Элементы.ДопРеквизиты.Видимость = Ложь;
		КонецЕсли;
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
			НазваниеОрганизации = Справочники.Организации.ПредставлениеОрганизацииНаДату(
				Справочники.Организации.ОрганизацияПоУмолчанию(), Неопределено);
			Элементы.ДекорацияОрганизация.Видимость = Истина;
			Элементы.ДекорацияОрганизация.Заголовок = НазваниеОрганизации;
		Иначе	
			Элементы.ДекорацияОрганизация.Видимость = Ложь;
		КонецЕсли;	
		
		НесколькоКонтрагентов = (ШаблонДокумента.Контрагенты.Количество() > 1);
		
		ОбновитьВидимостьРеквизитов(ЭтотОбъект);
		
		Для Каждого Строка Из ШаблонДокумента.РабочаяГруппаДокумента Цикл
			Если ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
				Строка.Иконка = 1;
				Строка.ЭтоРоль = Истина;
			ИначеЕсли ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.РабочиеГруппы") Тогда
				Строка.Иконка = 2;
			ИначеЕсли ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
				Строка.Иконка = 2;
			ИначеЕсли ТипЗнч(Строка.Участник) = Тип("СправочникСсылка.Пользователи") Тогда
				Строка.Иконка = 3;
			ИначеЕсли ТипЗнч(Строка.Участник) = Тип("Строка") Тогда
				Строка.Иконка = 4;
			КонецЕсли;	
		КонецЦикла;
		
		Если КоличествоУчастниковРабочейГруппы > 0 Тогда 
			ЗаголовокРабочейГруппы = СтрШаблон(НСтр("ru = 'Доступен (%1)'"), 
				КоличествоУчастниковРабочейГруппы);
			Элементы.ГруппаРабочаяГруппа.Поведение = ПоведениеОбычнойГруппы.Обычное;
		Иначе 
			ЗаголовокРабочейГруппы = РаботаСРабочимиГруппами.Текст_ДоступенВсем();
			Элементы.ГруппаРабочаяГруппа.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
		КонецЕсли;
		
		Если ЭтоМобильныйКлиент Тогда
			Элементы.ДекорацияЗаголовокРабочейГруппыМК.Заголовок = ЗаголовокРабочейГруппы;
		КонецЕсли;
		
		Если Не ШаблонДокумента.Ссылка.Пустая()
			И Не ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(ШаблонДокумента.Ссылка).Изменение Тогда
			
			Элементы.ШаблонДокумента.ТолькоПросмотр = Истина;
			Элементы.ПодобратьУчастниковРабочейГруппы.Доступность = Ложь;
			Элементы.СоздатьФайл.Доступность = Ложь;
			Элементы.КонтекстноеМенюФайлыСоздать.Доступность = Ложь;
			Элементы.ПодобратьУчастниковРабочейГруппыДокумента.Доступность = Ложь;
			Элементы.ПодобратьНоменклатуру.Доступность = Ложь;
			
		КонецЕсли;
		
		ЗаполнитьСписокФайлов();
		
		УстановитьУсловноеОформление();
		Для Каждого СтрокаСтороны Из ШаблонДокумента.Стороны Цикл
			УстановитьИндексКартинкиСтороны(СтрокаСтороны);
		КонецЦикла;
		
		ОбновитьПредставлениеВажности(ШаблонДокумента.Важность, ЭтотОбъект);
		ДоступенКонтрагент = ШаблонДокумента.ВидОбращения <> ПредопределенноеЗначение("Перечисление.ВидыОбращенийГраждан.Анонимное"); 
		Элементы.Контрагент.Доступность = ДоступенКонтрагент;
		Элементы.КонтактноеЛицо.Доступность = ДоступенКонтрагент;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьРеквизитов(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	ШаблонДокумента = Форма.ШаблонДокумента;
	
	Элементы.ГруппаДлительностьИсполнения.Видимость = Объект.ИспользоватьСрокИсполнения;
	Элементы.ГруппаНормативныйСрок.Видимость = Объект.ИспользоватьСрокИсполнения;
	
	Если Не Объект.ЯвляетсяВходящейКорреспонденцией 
		И Не Объект.ЯвляетсяИсходящейКорреспонденцией Тогда
		
		Если Объект.ЯвляетсяЗаявкойНаОплату Тогда
			Элементы.Организация.Видимость = Объект.ВестиУчетПоОрганизациям;
			Элементы.ГруппаОрганизация.ОтображатьЗаголовок = Ложь;
			Элементы.Организация.Заголовок = НСтр("ru = 'Плательщик'");
		Иначе
			Элементы.Организация.Видимость = Объект.ВестиУчетПоОрганизациям И Не Объект.ВестиУчетСторон;
			Если Объект.ВестиУчетПоОрганизациям И Не Объект.ВестиУчетСторон Тогда
				Элементы.ГруппаОрганизация.Заголовок = РедакцииКонфигурацииКлиентСервер.ИмяОрганизацииБезУчетаСторон();
			Иначе
				Элементы.ГруппаОрганизация.Заголовок = РедакцииКонфигурацииКлиентСервер.ИмяОрганизацииУчетСторон();
			КонецЕсли;
			Элементы.ГруппаОрганизация.ОтображатьЗаголовок = Истина;
			Элементы.Организация.Заголовок = РедакцииКонфигурацииКлиентСервер.Организация();
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГруппаХранение.ОтображатьЗаголовок = Истина;
	Элементы.ГруппаХранение.Видимость = Истина;
	Элементы.НоменклатураДел.Видимость = Объект.ВестиУчетПоНоменклатуреДел;
	
	Если Объект.ЯвляетсяЗаявкойНаОплату Тогда
		Элементы.ГруппаСтороны.Видимость = Ложь;
		Элементы.ГруппаПолучатель.Видимость = Истина;
	Иначе
		Если Объект.ВестиУчетСторон Тогда
			Элементы.ГруппаСтороны.Видимость = Истина;
		Иначе
			Элементы.ГруппаСтороны.Видимость = Ложь;
		КонецЕсли;
		Элементы.ГруппаПолучатель.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ВестиУчетТоваровИУслуг Тогда
		Элементы.СтраницаТовары.Видимость = Истина;
	Иначе
		Элементы.СтраницаТовары.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ВестиУчетПоАдресатам Тогда
		Элементы.Адресат.Видимость = Истина;
	Иначе
		Элементы.Адресат.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ВестиУчетПоСтатьямДДС Тогда
		Элементы.СтатьяДвиженияДенежныхСредств.Видимость = Истина;
	Иначе
		Элементы.СтатьяДвиженияДенежныхСредств.Видимость = Ложь;
		Если ЗначениеЗаполнено(ШаблонДокумента.СтатьяДвиженияДенежныхСредств) Тогда
			ШаблонДокумента.СтатьяДвиженияДенежныхСредств = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьКонтрагентов(Форма);
	
	ВариантНеУчитывать = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияПолейХранения.НеУчитывать");
	ПоказыватьПоляХранения = Истина;
	Если ШаблонДокумента.ФормаДокумента = ПредопределенноеЗначение("Перечисление.ВариантыФормДокументов.Электронная") Тогда 
		ПоказыватьПоляХранения = Ложь;
	КонецЕсли;
	
	Если Объект.УчитыватьМестоХранения <> ВариантНеУчитывать Тогда
		Элементы.МестоХранения.Видимость = ПоказыватьПоляХранения;
	Иначе
		Элементы.МестоХранения.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.УчитыватьОтветственногоЗаХранение <> ВариантНеУчитывать Тогда
		Элементы.ОтветственныйЗаХранение.Видимость = ПоказыватьПоляХранения;
	Иначе
		Элементы.ОтветственныйЗаХранение.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.Тематика.Видимость = Объект.ВестиУчетПоТематикам;
	Элементы.СтраницаТематики.Видимость = Объект.ВестиУчетПоТематикам;
	Элементы.РазрешенияНаСозданиеТематика.Видимость = Объект.ВестиУчетПоТематикам;
	Элементы.ГруппаВариантПодписания.Видимость = Объект.ВестиУчетСторон;
	
	// Реквизиты корреспонденции
	Элементы.ВидОбращения.Видимость = Объект.ЯвляетсяОбращениемОтГраждан;
	Элементы.СпособПолучения.Видимость = Объект.ЯвляетсяВходящейКорреспонденцией;
	Элементы.АдресатВходящейКорреспонденции.Видимость = Объект.ЯвляетсяВходящейКорреспонденцией;
	Элементы.СпособОтправки.Видимость = Объект.ЯвляетсяИсходящейКорреспонденцией;
	Элементы.МногоКонтрагентов.Видимость = Не Объект.ЯвляетсяВходящейКорреспонденцией;
	Элементы.Важность.Видимость = Объект.ИспользоватьВажность;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСклоненияДней()

	Представления = КалендарныеГрафикиДокументооборот.СклонениеДней(КоличествоДнейДляСклонения);
	Элементы[ИмяЭлементаДляОбновленияПредставлений].СписокВыбора[0].Представление = Представления.Календарные;
	Элементы[ИмяЭлементаДляОбновленияПредставлений].СписокВыбора[1].Представление = Представления.Рабочие;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами

&НаКлиенте
Процедура ОбновитьСтрокуФайла(Файл)
	
	ДелопроизводствоКлиент.ОбновитьСтрокуФайла_ВхИсх(Файлы, Файл,, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокФайлов()
	
	МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
		ШаблонДокумента.Ссылка, 
		ПоказыватьУдаленныеФайлы);
		
	ТаблицаФайлы = Делопроизводство.ПолучитьДанныеФайловДляСписка(МассивФайлов,,, Истина);
	ТаблицаФайлы.Колонки.Добавить("ПравилоАвтозаполнения");
	ТаблицаФайлы.Колонки.Добавить("ПравилоАвтозаполненияСтр");
	ТаблицаФайлы.Колонки.Добавить("УсловиеСтр");
	
	Для Каждого Строка Из ШаблонДокумента.ПравилаАвтозаполнения Цикл
		НайденнаяСтрока = ТаблицаФайлы.Найти(Строка.ШаблонФайла, "Ссылка");
		Если НайденнаяСтрока <> Неопределено Тогда 
			НайденнаяСтрока.ПравилоАвтозаполнения = Строка.ПравилоАвтозаполнения;
			НайденнаяСтрока.Условие = Строка.Условие;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаФайлы Цикл 
		Если АвтозаполнениеШаблоновФайловВызовСервераПовтИсп.ЭтоРасширениеАвтозаполнения(Строка.Расширение) Тогда
			Если ЗначениеЗаполнено(Строка.ПравилоАвтозаполнения) Тогда 
				Строка.ПравилоАвтозаполненияСтр = НСтр("ru = 'Открыть'");
			Иначе
				Строка.ПравилоАвтозаполненияСтр = НСтр("ru = 'Не настроено'");
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.Условие) Тогда
			Строка.УсловиеСтр = Строка(Строка.Условие);
		Иначе
			Строка.УсловиеСтр = НСтр("ru = 'Не установлено'");
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаФайлы, "Файлы");
	КоличествоФайлов = Файлы.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Файл)
	
	Если Не ЗначениеЗаполнено(Файл) Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
		Файл, 
		Неопределено, 
		ЭтотОбъект.УникальныйИдентификатор, 
		Неопределено, 
		ПредыдущийАдресФайла);
		
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлВыполнить()
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ОткрытьФайл(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПометитьФайлыНаУдаление(МассивФайлов, ПометкаУдаления)
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь(); 
	Для Каждого Файл Из МассивФайлов Цикл 
		
		Если Файл.Редактирует = ТекущийПользователь Тогда
			РаботаСФайламиВызовСервера.ОсвободитьФайлПоСсылке(Файл, ЭтотОбъект.УникальныйИдентификатор);
		КонецЕсли;	
		
		ЗаблокироватьДанныеДляРедактирования(Файл);
		ОбъектФайл = Файл.ПолучитьОбъект();
		ОбъектФайл.УстановитьПометкуУдаления(ПометкаУдаления);
		РазблокироватьДанныеДляРедактирования(Файл);
		
	КонецЦикла;
	
	АвтозаполнениеШаблоновФайловКлиентСервер.ПометитьПравилаАвтозаполненияНаУдаление(МассивФайлов, ПометкаУдаления);
	
	ЗаполнитьСписокФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтрокуФайла(Файл)
	
	СтрокаИдентификатор = Неопределено;
	Для Каждого Строка Из Файлы Цикл
		Если Строка.Ссылка = Файл Тогда 
			СтрокаИдентификатор = Строка.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Если СтрокаИдентификатор = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Элементы.Файлы.ТекущаяСтрока = СтрокаИдентификатор;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборУсловия(Строка)
	
	Если Не ЗначениеЗаполнено(Строка.Условие) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТипОбъекта",
			ПредопределенноеЗначение("Перечисление.ТипыОбъектов.ДокументыПредприятия"));
		
		ПараметрыОповещения = Новый Структура("ТекущаяСтрока", Строка);
		ОповещениеПослеВыбораУсловия = Новый ОписаниеОповещения("ПослеВыбораУсловия", ЭтотОбъект, ПараметрыОповещения);
		
		ОткрытьФорму("Справочник.АлгоритмыПроверки.ФормаВыбора",
			ПараметрыФормы,
			Элементы.Условие,,,,
			ОповещениеПослеВыбораУсловия);
			
	Иначе
		
		ПоказатьЗначение(, Строка.Условие);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораУсловия(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Параметры.ТекущаяСтрока.Условие = Результат;
		Параметры.ТекущаяСтрока.УсловиеСтр = Строка(Результат);
		
		Элементы["КонтекстноеМенюФайлыОчиститьУсловие"].Доступность = Истина;
		
		ТребуетсяЗаписатьШаблон = Истина;
		Записать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеПравилаПоОснованию(Строка)
	
	Если Строка.Расширение = "doc" Или Строка.Расширение = "docx" Тогда
		
		МассивЗахваченныхФайлов = Новый Массив;
		ДобавитьТекущийЗанятыйФайл(Строка, МассивЗахваченныхФайлов);
		
		СписокЗанятыеWordФайлы = ДелопроизводствоКлиент.ПолучитьЗанятыеВнешнимиПрограммамиФайлы(
			ШаблонДокумента.Ссылка,
			УникальныйИдентификатор,
			МассивЗахваченныхФайлов);
			
		Если СписокЗанятыеWordФайлы.Количество() <> 0 Тогда
			
			СтрокаФайлов = "";
			СтрокаФайлов = СтрСоединить(СписокЗанятыеWordФайлы, Символы.ВК);
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Для настройки заполнения закройте файлы:
					| 
					|%1.'"),
				СтрокаФайлов);
				
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.ОК);
			Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			
			ПараметрыОбработки = Новый Структура("Строка, ЗаполнениеПоПравилу", Строка);
			Обработчик = Новый ОписаниеОповещения("ПослеВопросаФайлыЗанятыWord", ЭтотОбъект, ПараметрыОбработки);
			ПоказатьВопрос(Обработчик, ТекстСообщения, Кнопки);
			
			Возврат;
			
		КонецЕсли;
		
		АвтозаполнениеШаблоновФайловКлиент.СоздатьЗаполнитьПравилоПоОснованию(Объект.Ссылка, ЭтотОбъект);
		
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Копирование настроек автозаполнения доступно только для файлов с расширениями doc, docx.'"));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Управление доступностью полей

&НаКлиенте
Процедура УстановитьДоступностьКоманды(Команда, Доступность)
	
	Команда.Доступность = Доступность;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманд(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Или ТолькоПросмотр
		Или ТипЗнч(Элементы["Файлы"].ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		
		УстановитьДоступностьКоманды(Элементы["ОткрытьФайл"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОткрытьФайл"], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Напечатать"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыНапечатать"], Ложь);
				
		УстановитьДоступностьКоманды(Элементы["Редактировать"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыРедактировать"], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ЗакончитьРедактирование"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗакончитьРедактирование"], Ложь);

		УстановитьДоступностьКоманды(Элементы["Изменить"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыИзменить"], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Занять"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗанять"], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["СохранитьИзменения"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьИзменения"], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Удалить"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыУдалить"], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["СохранитьКак"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьКак"], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Освободить"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОсвободить"], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ОбновитьИзФайлаНаДиске"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске"], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ПроверитьПравило"], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ЗаполнитьПравило"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗаполнитьПравило"], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОчиститьУсловие"], Ложь);
		
	Иначе
		
		РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
		Редактирует = ТекущиеДанные.Редактирует;
		
		УстановитьДоступностьКоманды(Элементы["ОткрытьФайл"], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОткрытьФайл"], Истина);
		
		УстановитьДоступностьКоманды(Элементы["Напечатать"], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыНапечатать"], Истина);
		
		УстановитьДоступностьКоманды(Элементы["Редактировать"], НЕ ТекущиеДанные.ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыРедактировать"], НЕ ТекущиеДанные.ПодписанЭП);
		
		УстановитьДоступностьКоманды(Элементы["ЗакончитьРедактирование"], РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗакончитьРедактирование"], РедактируетТекущийПользователь);

		УстановитьДоступностьКоманды(Элементы["Изменить"], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыИзменить"], Истина);
		
		УстановитьДоступностьКоманды(Элементы["Занять"], Не ЗначениеЗаполнено(Редактирует));
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗанять"], Не ЗначениеЗаполнено(Редактирует));

		УстановитьДоступностьКоманды(Элементы["СохранитьИзменения"], РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьИзменения"], РедактируетТекущийПользователь);

		УстановитьДоступностьКоманды(Элементы["Удалить"], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыУдалить"], Истина);
		
		УстановитьДоступностьКоманды(Элементы["СохранитьКак"], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьКак"], Истина);

		УстановитьДоступностьКоманды(Элементы["Освободить"],  ЗначениеЗаполнено(Редактирует));
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОсвободить"],  ЗначениеЗаполнено(Редактирует));

		УстановитьДоступностьКоманды(Элементы["ОбновитьИзФайлаНаДиске"], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске"], Истина);
		
		УстановитьДоступностьКоманды(Элементы["ПроверитьПравило"], ЗначениеЗаполнено(ТекущиеДанные.ПравилоАвтозаполнения));
		
		УстановитьДоступностьКоманды(Элементы["ЗаполнитьПравило"], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗаполнитьПравило"], Истина);
		
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОчиститьУсловие"],
			ЗначениеЗаполнено(ТекущиеДанные.Условие));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНоменклатуруПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ПеренестиНоменклатуруИзГруппы(Параметры.Группа);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиНоменклатуруИзГруппы(ГруппаНоменклатуры)
	
	Делопроизводство.ПеренестиНоменклатуруИзГруппы(ЭтотОбъект, ГруппаНоменклатуры);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с подписями

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьИндексКартинкиСтороны(СтрокаТаблицы)
	
	Если ТипЗнч(СтрокаТаблицы.Сторона) = Тип("СправочникСсылка.Контрагенты") Тогда
		СтрокаТаблицы.ИндексКартинкиСтороны = 1;
	ИначеЕсли ТипЗнч(СтрокаТаблицы.Сторона) = Тип("СправочникСсылка.Организации") Тогда
		СтрокаТаблицы.ИндексКартинкиСтороны = 2;
	Иначе
		СтрокаТаблицы.ИндексКартинкиСтороны = 0;
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ДобавитьСторону(Сторона, КонтактноеЛицо = Неопределено)
	
	Если Не ЗначениеЗаполнено(Сторона) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбораСторона = Новый Структура("Сторона", Сторона);
	Если ШаблонДокумента.Стороны.НайтиСтроки(ПараметрыОтбораСторона).Количество() = 0 Тогда
		НоваяСтрока = ШаблонДокумента.Стороны.Добавить();
		НоваяСтрока.Сторона = Сторона;
		НоваяСтрока.ИндексКартинкиСтороны = 2;
		
		Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			НоваяСтрока.КонтактноеЛицо = КонтактноеЛицо;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыСторон()

	ШаблонДокумента.Стороны.Очистить();
	
	Если Объект.ВестиУчетСторон Тогда
		ШаблонДокумента.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		ДобавитьСторону(ШаблонДокумента.Организация);
	КонецЕсли;
	
	УстановитьУсловноеОформление();
		
КонецПроцедуры 

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	РаботаСПодписямиДокументов.УстановитьУсловноеОформлениеСторон(
		УсловноеОформление, ШаблонДокумента.Организация, Истина);
	РаботаСТематикамиДокументов.УстановитьУсловноеОформлениеТематик(Тематики);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервереРедакцииКонфигурации()
	
	Элементы.НастройкиНумерацииОрганизация.Заголовок = РедакцииКонфигурацииКлиентСервер.Организация();
	
	Элементы.ГруппаОрганизация.Заголовок = РедакцииКонфигурацииКлиентСервер.ИмяОрганизации();
	Элементы.ГруппаОрганизация.Подсказка = РедакцииКонфигурацииКлиентСервер.Организация();
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с тематиками

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСпискаТематик(Список, ПараметрыОтбора)
	
	ПоказыватьУдаленныеТематики = ПараметрыОтбора.Получить("ПоказыватьУдаленныеТематики");
	Если ПоказыватьУдаленныеТематики <> Неопределено Тогда 
		Если ПоказыватьУдаленныеТематики Тогда
			ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "ПометкаУдаления");
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПометкаУдаления", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	ПоказыватьНеДействующиеТематики = ПараметрыОтбора.Получить("ПоказыватьНеДействующиеТематики");
	Если ПоказыватьНеДействующиеТематики <> Неопределено Тогда 
		Если ПоказыватьНеДействующиеТематики Тогда
			Параметр = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПоказыватьДействующие"));
			Параметр.Использование = Ложь;
			Параметр = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ТекущаяДата"));
			Параметр.Использование = Ложь;
		Иначе
			Список.Параметры.УстановитьЗначениеПараметра("ПоказыватьДействующие", Истина);
			#Если Сервер Тогда
				Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
			#Иначе
				Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()));
			#КонецЕсли
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КоличествоТематикДляВида(ВидДокумента, ПоказыватьУдаленные, ПоказыватьНеДействующие)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ТематикиДокументов.Ссылка) КАК КоличествоТематик
		|ИЗ
		|	Справочник.ТематикиДокументов КАК ТематикиДокументов
		|ГДЕ
		|	ТематикиДокументов.ВидДокумента = &ВидДокумента";
	
	Запрос.Параметры.Вставить("ВидДокумента", ВидДокумента);
	Если Не ПоказыватьУдаленные Тогда 
		Запрос.Текст = Запрос.Текст + "
		|	И Не ТематикиДокументов.ПометкаУдаления";
	КонецЕсли;
	
	Если Не ПоказыватьНеДействующие Тогда 
		Запрос.Текст = Запрос.Текст + "
		|	И (НЕ ТематикиДокументов.НеДействует
		|		ИЛИ ТематикиДокументов.НеДействуетДата > &ТекущаяДата)";
		Запрос.Параметры.Вставить("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КоличествоТематик;
	
КонецФункции

&НаСервере
Процедура ПометитьТематикиНаУдаление(МассивТематик, ЗначениеПометкиУдаления)
	
	Для Каждого ТекТематика Из МассивТематик Цикл 
		
		ЗаблокироватьДанныеДляРедактирования(ТекТематика);
		ОбъектТематика = ТекТематика.ПолучитьОбъект();
		ОбъектТематика.УстановитьПометкуУдаления(ЗначениеПометкиУдаления);
		
		РазблокироватьДанныеДляРедактирования(ТекТематика);
		
	КонецЦикла;
	
	Элементы.Тематики.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТематикиНаСервере()
	
	Элементы.Тематики.Обновить();
	КоличествоТематик = КоличествоТематикДляВида(Объект.Ссылка,
		ПоказыватьУдаленныеТематики, ПоказыватьНеДействующиеТематики);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с обработкой

&НаКлиенте
Процедура ОбработкаОжиданияИзмененияНастройкиВидаДействий()
	
	ТекущиеДанные = Элементы.ВидыДействий.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
		
	Если ТекущиеДанные.ЭтоРодитель Тогда 
		СтрокаРодитель = ТекущиеДанные;
	Иначе 
		ТекущиеДанныеРодитель = ТекущиеДанные.ПолучитьРодителя();
		Если ТекущиеДанныеРодитель = Неопределено Тогда
			Возврат;
		Иначе 
			СтрокаРодитель = ТекущиеДанныеРодитель;
		КонецЕсли;
	КонецЕсли;
	
	ДействияКлиент.УстановитьПараметрыСпискаВсеВидыДействий(ЭтотОбъект, СтрокаРодитель);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРолиФайлов(ТекущийОбъект)
	
	РолиФайловОтВида = Истина;
	РолиКоличество = ТекущийОбъект.РолиФайлов.Количество();
	Если ЗначениеЗаполнено(Объект.Родитель) Тогда
		
		РолиФайлов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Родитель, "РолиФайлов");
		РолиФайлов = РолиФайлов.Выгрузить();
		РолиФайлов.Сортировать("НомерСтроки");
		Если РолиФайлов.Количество() <> 0 Тогда
			РолиФайловОтВида = Ложь;
			РолиКоличество = РолиФайлов.Количество();
			ЗначениеВРеквизитФормы(РолиФайлов, "РолиФайловГруппы");
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если РолиФайловОтВида Тогда
		Элементы.ГруппаРолиВидаИлиГруппы.ТекущаяСтраница = Элементы.ГруппаРолиВида;
	Иначе
		Элементы.ГруппаРолиВидаИлиГруппы.ТекущаяСтраница = Элементы.ГруппаРолиГруппы;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	ОбновитьРолиФайловСервер();
КонецПроцедуры

&НаСервере
Процедура ОбновитьРолиФайловСервер()
	ОбновитьРолиФайлов(Объект);
КонецПроцедуры

&НаКлиенте
Процедура РолиФайловРольПриИзменении(Элемент)
	
	// проверим дубли
	ТекущиеДанные = Элементы.РолиФайлов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Роль = ТекущиеДанные.Роль;
		ТекСтрока = Элементы.РолиФайлов.ТекущаяСтрока;
		
		Если ЗначениеЗаполнено(Роль) Тогда
			
			Для Каждого Стр Из Объект.РолиФайлов Цикл
				
				Если Стр.ПолучитьИдентификатор() <> ТекСтрока И Стр.Роль = Роль Тогда
					Сообщить(НСтр("ru = 'Эта роль уже выбрана ранее.'"));
					ТекущиеДанные.Роль = Неопределено;
					Прервать;
				КонецЕсли;	
				
			КонецЦикла;	
			
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РолиФайловПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РолиФайловПередНачаломДобавленияПродолжение",
		ЭтотОбъект);
	
	ОткрытьФорму("Справочник.РолиФайлов.ФормаВыбора",,,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РолиФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если ЭтоМобильныйКлиент Тогда
		Элементы.РолиФайловОбязательная.Видимость = Истина;
		Элементы.РолиФайловТолькоОдинФайл.Видимость = Истина;
		Элементы.РолиФайловФайлЭлектронногоДокумента.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РолиФайловПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	Если ЭтоМобильныйКлиент Тогда
		Элементы.РолиФайловОбязательная.Видимость = Ложь;
		Элементы.РолиФайловТолькоОдинФайл.Видимость = Ложь;
		Элементы.РолиФайловФайлЭлектронногоДокумента.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РолиФайловПередНачаломДобавленияПродолжение(Результат, ПараметрыЗаписи) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("СправочникСсылка.РолиФайлов") Тогда
		Возврат;
	КонецЕсли;
	
	Роль = Результат;
	
	Для Каждого Стр Из Объект.РолиФайлов Цикл
		
		Если Стр.Роль = Роль Тогда
			Сообщить(НСтр("ru = 'Эта роль уже выбрана ранее.'"));
			Возврат;
		КонецЕсли;	
		
	КонецЦикла;	
	
	НовСтр = Объект.РолиФайлов.Добавить();
	НовСтр.Роль = Результат;
	
	РолиКоличество = Объект.РолиФайлов.Количество();
	Модифицированность = Истина;
	
КонецПроцедуры	

&НаКлиенте
Процедура РолиФайловПриИзменении(Элемент)
	
	РолиКоличество = Объект.РолиФайлов.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура РолиФайловФайлЭлектронногоДокументаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РолиФайлов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ФайлЭлектронногоДокумента Тогда
		
		СохранитьВКешНастройкиРолиФайла(ТекущиеДанные.Роль,
			ТекущиеДанные.Обязательная, ТекущиеДанные.ТолькоОдинФайл);
		
		Для Каждого СтрРоли Из Объект.РолиФайлов Цикл
			Если СтрРоли.Роль <> ТекущиеДанные.Роль И СтрРоли.ФайлЭлектронногоДокумента Тогда
				
				СтрРоли.ФайлЭлектронногоДокумента = Ложь;
				
				СохраненныеНастройки = ПолучитьНастройкиРолиФайлаИзКеша(СтрРоли.Роль);
				
				Если СохраненныеНастройки <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(СтрРоли, СохраненныеНастройки);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		ТекущиеДанные.ТолькоОдинФайл = Истина;
		ТекущиеДанные.Обязательная = Истина;
		
	Иначе
		
		СохраненныеНастройки = ПолучитьНастройкиРолиФайлаИзКеша(ТекущиеДанные.Роль);
		
		Если СохраненныеНастройки <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, СохраненныеНастройки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаГенерацииШтамповЭП(Команда)
	
	ПараметрыОткрытия = Новый Структура("ВидДокумента", Объект.Ссылка);
	ОткрытьФорму("Справочник.НастройкиГенерацииШтамповЭП.Форма.ФормаВидаДокумента", ПараметрыОткрытия);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеНастройкиШтампаЭП()
	
	НастройкаШтампа = Неопределено;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НастройкаШтампа = РегистрыСведений.НастройкиГенерацииШтамповЭППоВидамДокументов.ПолучитьНастройку(
			Объект.Ссылка);
	КонецЕсли;
		
	Если НастройкаШтампа = Неопределено Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		РасположениеШтампаЭП = Константы.РасположениеШтампаЭПВPdf.Получить(); 	
		СтраницаВставкиШтампаЭП = Константы.СтраницаВставкиШтампаЭП.Получить();
		
		Элементы.НастройкаГенерацииШтамповЭП.Заголовок = СтрШаблон(НСтр("ru = 'По умолчанию: %1, %2'"),
			РасположениеШтампаЭП, СтраницаВставкиШтампаЭП);
			
		УстановитьПривилегированныйРежим(Ложь);	
		
	Иначе
			
		РеквНастройки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаШтампа,
			"РасположениеШтампаЭП, СтраницаВставкиШтампаЭП");
		РасположениеШтампаЭП = РеквНастройки.РасположениеШтампаЭП;
		СтраницаВставкиШтампаЭП = РеквНастройки.СтраницаВставкиШтампаЭП;
		
		Элементы.НастройкаГенерацииШтамповЭП.Заголовок = СтрШаблон(НСтр("ru = '%1, %2'"),
			РасположениеШтампаЭП, СтраницаВставкиШтампаЭП);
			
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРазрешенияНаСоздание()
	
	РазрешенияНаСоздание.Очистить();
	
	// Для новых объектов - разрешение всем на все тематики.
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Стр = РазрешенияНаСоздание.Добавить();
		Стр.Участник = Справочники.РабочиеГруппы.ВсеПользователи;
		Стр.ТематикиПредставление = ПредставлениеТематикВРазрешениях(Стр.Тематики);
		Возврат;
	КонецЕсли;
	
	// Для существующих берутся данные из регистра.	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РазрешенияНаСозданиеДокументов.Участник КАК Участник,
		|	РазрешенияНаСозданиеДокументов.Тематика КАК Тематика
		|ИЗ
		|	РегистрСведений.РазрешенияНаСозданиеДокументов КАК РазрешенияНаСозданиеДокументов
		|ГДЕ
		|	РазрешенияНаСозданиеДокументов.ВидДокумента = &ВидДокумента
		|	И НЕ РазрешенияНаСозданиеДокументов.Участник.ПометкаУдаления
		|	И НЕ ЕСТЬNULL(РазрешенияНаСозданиеДокументов.Тематика.ПометкаУдаления, Ложь)
		|УПОРЯДОЧИТЬ ПО
		|	Участник
		|АВТОУПОРЯДОЧИВАНИЕ
		|ИТОГИ
		|ПО
		|	Участник");
	Запрос.УстановитьПараметр("ВидДокумента", Объект.Ссылка);
	ВыборкаУчастник = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаУчастник.Следующий() Цикл
		Стр = РазрешенияНаСоздание.Добавить();
		Стр.Участник = ВыборкаУчастник.Участник;
		Выборка = ВыборкаУчастник.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Тематика) Тогда
				Стр.Тематики.Добавить(Выборка.Тематика);
			Иначе
				Стр.Тематики.Очистить();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Стр.ТематикиПредставление = ПредставлениеТематикВРазрешениях(Стр.Тематики);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРазрешенияНаСоздание(ТекущийОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборРазрешений = РегистрыСведений.РазрешенияНаСозданиеДокументов.СоздатьНаборЗаписей();
	НаборРазрешений.Отбор.ВидДокумента.Установить(ТекущийОбъект.Ссылка);
	Для Каждого Стр Из РазрешенияНаСоздание Цикл
		Если Стр.Тематики.Количество() = 0 Тогда
			СтрНабора = НаборРазрешений.Добавить();
			СтрНабора.ВидДокумента = ТекущийОбъект.Ссылка;
			СтрНабора.Участник = Стр.Участник;
		Иначе
			Для Каждого Эл Из Стр.Тематики Цикл
				СтрНабора = НаборРазрешений.Добавить();
				СтрНабора.ВидДокумента = ТекущийОбъект.Ссылка;
				СтрНабора.Участник = Стр.Участник;
				СтрНабора.Тематика = Эл.Значение;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	НаборРазрешений.Записать();
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеТематикВРазрешениях(СписокТематик)
	
	Если СписокТематик.Количество() = 0 Тогда
		Если Объект.ВестиУчетПоТематикам Тогда
			Возврат НСтр("ru = 'Все тематики'");
		Иначе
			Возврат "";
		КонецЕсли;
	Иначе
		МассивПредставлений = Новый Массив;
		Для Каждого Эл Из СписокТематик Цикл
			МассивПредставлений.Добавить(
				?(ЗначениеЗаполнено(Эл.Представление), Эл.Представление, Строка(Эл.Значение)));
		КонецЦикла;
		Возврат СтрСоединить(МассивПредставлений, "; ");
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораТематикДляРазрешенийНаСоздание(
			ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьНеотмеченные = Ложь;
	ТекущиеДанные = Элементы.РазрешенияНаСоздание.ТекущиеДанные;
	ТекущиеДанные.Тематики.Очистить();
	Для Каждого Эл Из ВыбранноеЗначение Цикл
		Если Эл.Пометка Тогда
			ТекущиеДанные.Тематики.Добавить(Эл.Значение);
		Иначе
			ЕстьНеотмеченные = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьНеотмеченные Тогда
		ТекущиеДанные.Тематики.Очистить();
	КонецЕсли;
	
	ТекущиеДанные.ТематикиПредставление = ПредставлениеТематикВРазрешениях(ТекущиеДанные.Тематики);
	
	Если ЗначениеЗаполнено(РазрешенияНаСозданиеТематика) Тогда
		ТекущиеДанные.ВидимостьПриОтборе = ТекущиеДанные.Тематики.Количество() = 0
			Или ТекущиеДанные.Тематики.НайтиПоЗначению(РазрешенияНаСозданиеТематика) <> Неопределено;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьРолиФайловВоВсехШаблонах()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		 "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		 |	ШаблоныДокументов.Ссылка
		 |ИЗ
		 |	Справочник.ШаблоныДокументов КАК ШаблоныДокументов
		 |ГДЕ
		 |	ШаблоныДокументов.ВидДокумента = &ВидДокумента
		 |	И НЕ ШаблоныДокументов.ПометкаУдаления";
		 
	Запрос.Параметры.Вставить("ВидДокумента", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
			Выборка.Ссылка, 
			ПоказыватьУдаленныеФайлы);
		Для Каждого Файл Из МассивФайлов Цикл
			Роли = Новый Массив; // пустой массив - очистим роли
			РегистрыСведений.РолиФайловДокументов.ЗаменитьРолиФайла(Файл, Роли);
		КонецЦикла;		
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПравилоИУсловияЗапуска(ИдентификаторСтроки)

	СтрокаРодитель = ВидыДействий.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если СтрокаРодитель = Неопределено Тогда
		Возврат;
	КонецЕсли;	

	ПравилаЗапуска = НСтр("ru = 'Не задан'"); // реквизит формы	

	Если Не ЗначениеЗаполнено(СтрокаРодитель.СсылкаНаНастройку) Тогда
		Возврат;
	КонецЕсли;	

	// обновим ПравилаЗапуска	
	РеквНастройки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаРодитель.СсылкаНаНастройку, 
		"ВидБизнесСобытия, ВидИнтерактивногоСобытия, УсловияЗапуска");
		
	Если ЗначениеЗаполнено(РеквНастройки.ВидБизнесСобытия) 
		Или ЗначениеЗаполнено(РеквНастройки.ВидИнтерактивногоСобытия) Тогда	
			
		ПравилаЗапуска = НСтр("ru = 'Задан'");
		
	КонецЕсли;		 	
	
	СтрокаРодитель.ПравилаЗапуска = ПравилаЗапуска;
	
	СтрокаРодитель.УсловияЗапуска = НСтр("ru = 'Не заданы'");
	УсловияЗапуска = РеквНастройки.УсловияЗапуска.Выгрузить();
	Если УсловияЗапуска.Количество() <> 0 Тогда
		
		СтрокаРодитель.УсловияЗапуска = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru = ';%1 условие;;%1 условия;%1 условий;%1 условий'"),
				УсловияЗапуска.Количество());
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеВажности(Важность, Форма)
	
	Если Важность = ПредопределенноеЗначение("Перечисление.ВариантыВажностиОбъектов.Высокая") Тогда
		Форма.Элементы.Важность.КартинкаКнопкиВыбора = БиблиотекаКартинок.ВажностьВысокая;
	ИначеЕсли Важность = ПредопределенноеЗначение("Перечисление.ВариантыВажностиОбъектов.Обычная") Тогда
		Форма.Элементы.Важность.КартинкаКнопкиВыбора = БиблиотекаКартинок.ВажностьНеЗадана;
	ИначеЕсли Важность = ПредопределенноеЗначение("Перечисление.ВариантыВажностиОбъектов.Низкая") Тогда
		Форма.Элементы.Важность.КартинкаКнопкиВыбора = БиблиотекаКартинок.ВажностьНизкая;
	Иначе
		Форма.Элементы.Важность.КартинкаКнопкиВыбора = БиблиотекаКартинок.ВажностьНеЗадана;
	КонецЕсли;	 
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПорядокВложений()
	
	ПорядковыйНомерВложения = 0;
	Для Каждого Строка Из Файлы Цикл
		
		РаботаСФайламиВызовСервера.ЗаписатьПорядокФайла(Строка.Ссылка, ПорядковыйНомерВложения);
		ПорядковыйНомерВложения = ПорядковыйНомерВложения + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВКешНастройкиРолиФайла(РольФайла, Обязательная, ТолькоОдинФайл)
	
	Если ТипЗнч(КешНастроекРолейФайлов) <> Тип("Соответствие") Тогда
		КешНастроекРолейФайлов = Новый Соответствие();
	КонецЕсли;
	
	НастройкиРолиФайла = Новый Структура;
	НастройкиРолиФайла.Вставить("Обязательная", Обязательная);
	НастройкиРолиФайла.Вставить("ТолькоОдинФайл", ТолькоОдинФайл);
	
	КешНастроекРолейФайлов.Вставить(РольФайла, НастройкиРолиФайла);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНастройкиРолиФайлаИзКеша(РольФайла)
	
	Если ТипЗнч(КешНастроекРолейФайлов) <> Тип("Соответствие") Тогда
		КешНастроекРолейФайлов = Новый Соответствие();
	КонецЕсли;
	
	ЗапомненныеНастройки = КешНастроекРолейФайлов.Получить(РольФайла);
	
	Если ТипЗнч(ЗапомненныеНастройки) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЗапомненныеНастройки;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьДиалогСменыКорреспонденции(ПараметрыЗаписи, ЧислоДокументов)
	
	ПоказанВопросОчиститьОрганизацию = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПередЗаписьюПродолжениеПослеВопросаПроСменуКорреспонденции",
		ЭтотОбъект,
		ПараметрыЗаписи);
		
	ТекстИзменения = "";	
	
	Если (ЯвляетсяВходящейКорреспонденциейНачальноеЗначение <> Объект.ЯвляетсяВходящейКорреспонденцией
			Или ЯвляетсяИсходящейКорреспонденциейНачальноеЗначение <> Объект.ЯвляетсяИсходящейКорреспонденцией)
			И Не ЯвляетсяКомплектомДокументовНачальноеЗначение <> Объект.ЯвляетсяКомплектомДокументов Тогда
				
		ТекстИзменения = НСтр("ru = 'Изменен вид корреспонденции.'");

	ИначеЕсли Не (ЯвляетсяВходящейКорреспонденциейНачальноеЗначение <> Объект.ЯвляетсяВходящейКорреспонденцией
			Или ЯвляетсяИсходящейКорреспонденциейНачальноеЗначение <> Объект.ЯвляетсяИсходящейКорреспонденцией)
			И ЯвляетсяКомплектомДокументовНачальноеЗначение <> Объект.ЯвляетсяКомплектомДокументов Тогда
				
		ТекстИзменения = НСтр("ru = 'Изменена настройка ""Является комплектом документов"".'");

	ИначеЕсли (ЯвляетсяВходящейКорреспонденциейНачальноеЗначение <> Объект.ЯвляетсяВходящейКорреспонденцией
			Или ЯвляетсяИсходящейКорреспонденциейНачальноеЗначение <> Объект.ЯвляетсяИсходящейКорреспонденцией)
			И ЯвляетсяКомплектомДокументовНачальноеЗначение <> Объект.ЯвляетсяКомплектомДокументов Тогда
				
		ТекстИзменения = НСтр("ru = 'Изменен вид корреспонденции и настройка ""Является комплектом документов"".'");
			
	КонецЕсли;
				
	СтрокаДокументов = СтрокаСЧислом(
		НСтр("ru = '; %1 документ;; %1 документов; %1 документов; %1 документа'"),
		ЧислоДокументов,
		ВидЧисловогоЗначения.Количественное);
				
	ТекстВопроса = СтрШаблон(НСтр(
		"ru = '%1 
		| %2 этого вида требуют обновления.
		|
		|Обновить данные?'"),
		ТекстИзменения, СтрокаДокументов);
		
	ПоказатьВопрос(ОписаниеОповещения,
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВопросаПроСменуКорреспонденции(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат; // прервали запись
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаписи.Вставить("ПоказанВопросСменыКорреспонденции", Истина); 
		ПараметрыЗаписи.Вставить("СменаКорреспонденции", Истина);
	КонецЕсли;
	
	Если Записать(ПараметрыЗаписи) Тогда
		
		Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
			ЗакрытьПослеЗаписи();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


#Область НастройкиЭДО

&НаСервере
Процедура ВидДокументаЭДОПриИзмененииНаСервере()
	
	НастроитьВыборОбщегоФорматаЭД();
	ЗаполнитьОбщиеНастройкиРегламентаЭД();
	ЗаполнитьПустыеПоляТаблицыНастроекЭДО();
	
КонецПроцедуры

// Заполняет настройки ЭДО для вида документа ДО.
// 
// Параметры:
//  ТекущийОбъект - СправочникОбъект.ВидыДокументов, ДанныеФормыСтруктура - 
//
&НаСервере
Процедура ЗаполнитьНастройкиЭДО(ТекущийОбъект)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаНастроекЭДО.Очистить();
	ТаблицаНастроекЭДОНачальныеЗначения.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиОтправкиДокументовПоЭДО.Отправитель,
	|	НастройкиОтправкиДокументовПоЭДО.Получатель,
	|	НастройкиОтправкиДокументовПоЭДО.ВидДокументаЭДО,
	|	НастройкиОтправкиДокументовПоЭДО.ВидДокументаЭДО КАК ВидДокументаЭДОНачальноеЗначение,
	|	НастройкиОтправкиДокументовПоЭДО.ТребуетсяИзвещениеОПолучении,
	|	НастройкиОтправкиДокументовПоЭДО.ТребуетсяОтветнаяПодпись,
	|	НастройкиОтправкиДокументовПоЭДО.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещениеОПолученииНачальноеЗначение,
	|	НастройкиОтправкиДокументовПоЭДО.ТребуетсяОтветнаяПодпись КАК ТребуетсяОтветнаяПодписьНачальноеЗначение,
	|	НастройкиОтправкиДокументовПоЭДО.ИдентификаторОтправителя,
	|	НастройкиОтправкиДокументовПоЭДО.ИдентификаторПолучателя,
	|	НастройкиОтправкиДокументовПоЭДО.ИдентификаторОтправителя КАК ИдентификаторОтправителяПредставление,
	|	НастройкиОтправкиДокументовПоЭДО.ИдентификаторПолучателя КАК ИдентификаторПолучателяПредставление,
	|	НастройкиОтправкиДокументовПоЭДО.Отправлять,
	|	МАКСИМУМ(2) КАК КартинкаОтправителя,
	|	ВЫБОР
	|		КОГДА НастройкиОтправкиДокументовПоЭДО.Получатель ССЫЛКА Справочник.Организации
	|			ТОГДА 2
	|		КОГДА НастройкиОтправкиДокументовПоЭДО.Получатель ССЫЛКА Справочник.Контрагенты
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КартинкаПолучателя,
	|	НастройкиОтправкиДокументовПоЭДО.Формат,
	|	НастройкиОтправкиДокументовПоЭДО.Формат КАК ФорматНачальноеЗначение,
	|	ВидыДокументовЭДО.ТипДокумента,
	|	ВидыДокументовЭДО.ПрикладнойТипДокумента,
	|	МИНИМУМ(ВЫБОР
	|		КОГДА СвязьВидовИФорматовДокументовЭДО.Формат ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ) КАК ЭтоФормализованныйДокумент
	|ИЗ
	|	РегистрСведений.НастройкиОтправкиДокументовПоЭДО КАК НастройкиОтправкиДокументовПоЭДО
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
	|		ПО НастройкиОтправкиДокументовПоЭДО.ВидДокументаЭДО = ВидыДокументовЭДО.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязьВидовИФорматовДокументовЭДО КАК СвязьВидовИФорматовДокументовЭДО
	|		ПО НастройкиОтправкиДокументовПоЭДО.ВидДокументаЭДО = СвязьВидовИФорматовДокументовЭДО.ВидДокумента
	|ГДЕ
	|	НастройкиОтправкиДокументовПоЭДО.ВидДокумента = &ВидДокумента
	|СГРУППИРОВАТЬ ПО
	|	НастройкиОтправкиДокументовПоЭДО.Отправитель,
	|	НастройкиОтправкиДокументовПоЭДО.Получатель,
	|	НастройкиОтправкиДокументовПоЭДО.ВидДокументаЭДО,
	|	НастройкиОтправкиДокументовПоЭДО.ТребуетсяИзвещениеОПолучении,
	|	НастройкиОтправкиДокументовПоЭДО.ТребуетсяОтветнаяПодпись,
	|	НастройкиОтправкиДокументовПоЭДО.ИдентификаторОтправителя,
	|	НастройкиОтправкиДокументовПоЭДО.ИдентификаторПолучателя,
	|	НастройкиОтправкиДокументовПоЭДО.Отправлять,
	|	ВЫБОР
	|		КОГДА НастройкиОтправкиДокументовПоЭДО.Получатель ССЫЛКА Справочник.Организации
	|			ТОГДА 2
	|		КОГДА НастройкиОтправкиДокументовПоЭДО.Получатель ССЫЛКА Справочник.Контрагенты
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	НастройкиОтправкиДокументовПоЭДО.Формат,
	|	ВидыДокументовЭДО.ТипДокумента,
	|	ВидыДокументовЭДО.ПрикладнойТипДокумента";

	Запрос.УстановитьПараметр("ВидДокумента", ТекущийОбъект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	
	НомерСтроки = 1;
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Отправитель) И ЗначениеЗаполнено(Выборка.Получатель) Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаНастроекЭДОНачальныеЗначения.Добавить(), Выборка);
			СтрокаНастройки = ТаблицаНастроекЭДО.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНастройки, Выборка);
			СтрокаНастройки.НомерСтроки = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
			ФорматДокумента = Выборка.Формат;
		КонецЕсли;
	КонецЦикла;
	
	ОбменЭДОДокументооборот.УстановитьПараметрыВыбораВидаДокументаЭДО(ЭтотОбъект);
	ОтборФорматов = ЭлектронныеДокументыЭДО.НовыйОтборФорматовЭлектронныхДокументов();
	ОтборФорматов.Действует = Истина;
	ФорматыЭД.Загрузить(ЭлектронныеДокументыЭДО.ФорматыЭлектронныхДокументов(ОтборФорматов));
	КоличествоНастроекЭДО = ТаблицаНастроекЭДО.Количество();
	НастроитьВыборОбщегоФорматаЭД();
	ЗаполнитьОбщиеНастройкиРегламентаЭД(Ложь);
	ЗаполнитьПустыеПоляТаблицыНастроекЭДО(Истина);
	УстановитьУсловноеОформлениеНастроекЭДО();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Заполняет пустые поля таблицы настроек ЭДО значениями по умолчанию.
// 
// Параметры:
//  ВсеПоля - Булево - Истина, если нужно заполнить все поля
//
&НаСервере
Процедура ЗаполнитьПустыеПоляТаблицыНастроекЭДО(ВсеПоля = Ложь)
	
	Если ТаблицаНастроекЭДО.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВсеПоля Тогда
		ПредставленияФорматов = ПредставленияФорматов();
		ИдентификаторыПоУмолчаниюЭДО = УчетныеЗаписиПоУмолчаниюЭДО();
	КонецЕсли;
	
	Для Каждого СтрокаНастройки Из ТаблицаНастроекЭДО Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаНастройки.ВидДокументаЭДО) Тогда
			СтрокаНастройки.ТребуетсяИзвещениеОПолучении = ТребуетсяИзвещениеОПолучении;
			СтрокаНастройки.ТребуетсяОтветнаяПодпись = ТребуетсяОтветнаяПодпись;
			СтрокаНастройки.ФорматПредставление = ФорматДокументаПредставление;
		КонецЕсли;
		
		Если Не ВсеПоля Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаНастройки.ИдентификаторОтправителя) Тогда
			СтрокаНастройки.ИдентификаторОтправителяПредставление = ?(
				ЗначениеЗаполнено(ИдентификаторыПоУмолчаниюЭДО[СтрокаНастройки.Отправитель]),
				ИдентификаторыПоУмолчаниюЭДО[СтрокаНастройки.Отправитель],
				ПредставлениеПустойНастройки());
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаНастройки.ИдентификаторПолучателя) Тогда
			СтрокаНастройки.ИдентификаторПолучателяПредставление = ?(
				ЗначениеЗаполнено(ИдентификаторыПоУмолчаниюЭДО[СтрокаНастройки.Получатель]),
				ИдентификаторыПоУмолчаниюЭДО[СтрокаНастройки.Получатель],
				ПредставлениеПустойНастройки());
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаНастройки.ФорматПредставление) Тогда
			СтрокаНастройки.ФорматПредставление = ПредставленияФорматов[СтрокаНастройки.Формат];
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаНастройки.ФорматПредставление)
			И СтрокаНастройки.ЭтоФормализованныйДокумент Тогда
			СтрокаНастройки.ФорматПредставление = ПредставлениеПустойНастройки();
		КонецЕсли;
				
		НастройкаРегламента = НастройкаРегламентаВидаЭД(СтрокаНастройки.ВидДокументаЭДО, СтрокаНастройки.Формат,
			 СтрокаНастройки);
		Если НастройкаРегламента <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаНастройки, НастройкаРегламента, "РедактироватьИзвещение, РедактироватьОтветнуюПодпись");
		ИначеЕсли Не СтрокаНастройки.ЭтоФормализованныйДокумент И ЗначениеЗаполнено(СтрокаНастройки.ВидДокументаЭДО) Тогда
			СтрокаНастройки.РедактироватьИзвещение = Истина;
			СтрокаНастройки.РедактироватьОтветнуюПодпись = Истина;
		КонецЕсли;
			 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНомераНастроекЭДО()
	
	НомерСтроки = 1;
	Для Каждого СтрокаНастройки Из ТаблицаНастроекЭДО Цикл
		СтрокаНастройки.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла
		
КонецПроцедуры

// Заполняет общие настройки регламента ЭД.
// 
// Параметры:
//  Заполнять - Булево - Истина, если нужно заполнить все настройки
//
&НаСервере
Процедура ЗаполнитьОбщиеНастройкиРегламентаЭД(Заполнять = Истина)
	
	Если Заполнять Тогда
		ТребуетсяИзвещениеОПолучении = Ложь;
		ТребуетсяОтветнаяПодпись = Ложь;
	КонецЕсли;
	
	ЭтоФормализованныйДокумент = Элементы.ФорматДокумента.СписокВыбора.Количество() > 0;
	Элементы.ТребуетсяОтветнаяПодпись.Доступность = ЗначениеЗаполнено(ВидДокументаЭДО) И Не ЭтоФормализованныйДокумент;
	Элементы.ТребуетсяИзвещениеОПолучении.Доступность = ЗначениеЗаполнено(ВидДокументаЭДО) И Не ЭтоФормализованныйДокумент;
	
	Если Не ЗначениеЗаполнено(ВидДокументаЭДО) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеВидаДокумента = ЭлектронныеДокументыЭДО.ОписаниеВидаДокумента(ВидДокументаЭДО);
	НастройкиРегламента = ЭлектронныеДокументыЭДО.НастройкиРегламента(ОписаниеВидаДокумента, ФорматДокумента);

	Если НастройкиРегламента <> Неопределено Тогда
		Элементы.ТребуетсяОтветнаяПодпись.Доступность = НастройкиРегламента.РедактироватьОтветнуюПодпись;
		Элементы.ТребуетсяИзвещениеОПолучении.Доступность = НастройкиРегламента.РедактироватьИзвещение;
		Если Заполнять Тогда
			ТребуетсяОтветнаяПодпись = НастройкиРегламента.ТребуетсяОтветнаяПодпись;
			ТребуетсяИзвещениеОПолучении = НастройкиРегламента.ТребуетсяИзвещениеОПолучении;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Задать вопрос о незаполнных видах документов ЭДО.
// 
// Параметры:
//  ПараметрыЗаписи - Структура - Параметры записи:
// * ЭтоНовый - Булево - 
//
&НаКлиенте
Процедура ЗадатьВопросОНезаполнныхВидахДокументовЭДО(ПараметрыЗаписи)
	
	ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
	ПараметрыВопроса.Заголовок = НСтр("ru = 'Заполнение настроек отправки ЭДО'");
	ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;

	ТекстВопроса = НСтр("ru = 'Есть настройки с установленным флагом ""Активна"", но с незаполненным Видом документа ЭДО.
		|Они не будут записаны. Продолжить?'");

	СписокВариантовОтветов = Новый СписокЗначений;
	СписокВариантовОтветов.Добавить(КодВозвратаДиалога.Да);
	СписокВариантовОтветов.Добавить(КодВозвратаДиалога.Нет);

	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтветаНаВопросОНезаполненныхВидахДокументовЭДО", ЭтотОбъект,
		ПараметрыЗаписи);

	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(ОписаниеОповещения, ТекстВопроса, СписокВариантовОтветов,
		ПараметрыВопроса);
	
КонецПроцедуры	

&НаСервере
Процедура НастроитьВыборОбщегоФорматаЭД()
	
	Элементы.ФорматДокумента.Доступность = Ложь;
	Элементы.ФорматДокумента.СписокВыбора.Очистить();
	Если Не ЗначениеЗаполнено(ВидДокументаЭДО) Тогда
		ФорматДокумента = "";
		ФорматДокументаПредставление = "";
		ОбменЭДОДокументооборотКлиентСервер.УстановитьВидимостьПодсказкиФорматаЭДО(ЭтотОбъект, ФорматДокумента,
		"ФорматДокумента", ИспользоватьЭДОВДокументообороте);
		Возврат;
	КонецЕсли;
	
	СтрокиФорматов = ФорматыЭД.НайтиСтроки(Новый Структура("ВидДокумента", ВидДокументаЭДО));
	
	Если СтрокиФорматов.Количество() = 0 Тогда
		ФорматДокумента = "";
		ФорматДокументаПредставление = "";
		ОбменЭДОДокументооборотКлиентСервер.УстановитьВидимостьПодсказкиФорматаЭДО(ЭтотОбъект, ФорматДокумента,
		"ФорматДокумента", ИспользоватьЭДОВДокументообороте);
		Возврат;
	КонецЕсли;
	
	Если СтрокиФорматов.Количество() > 1 Тогда
		Элементы.ФорматДокумента.СписокВыбора.Добавить("", ПредставлениеПустойНастройки());
	КонецЕсли;
	Элементы.ФорматДокумента.Доступность = Истина;
	НайденФормат = Ложь;
	
	Для Каждого СтрокаТаблицы Из СтрокиФорматов Цикл
		Элементы.ФорматДокумента.СписокВыбора.Добавить(СтрокаТаблицы.ИдентификаторФормата,
			СтрокаТаблицы.ПредставлениеФормата);
		
		Если СтрокаТаблицы.ИдентификаторФормата = ФорматДокумента Тогда
			НайденФормат = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не НайденФормат Тогда
		ФорматДокумента = "";
	КонецЕсли;
	
	Если СтрокиФорматов.Количество() = 1 Тогда
		ФорматДокумента = СтрокиФорматов[0].ИдентификаторФормата;
		ФорматДокументаПредставление = СтрокиФорматов[0].ПредставлениеФормата;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФорматДокументаПредставление) Тогда
		ЭлементСписка = Элементы.ФорматДокумента.СписокВыбора.НайтиПоЗначению(ФорматДокумента);
		Если ЭлементСписка <> Неопределено Тогда
			ФорматДокументаПредставление = ЭлементСписка.Представление;
		Иначе
			ФорматДокументаПредставление = ПредставлениеПустойНастройки();
		КонецЕсли;
	КонецЕсли;
	
	ОбменЭДОДокументооборотКлиентСервер.УстановитьВидимостьПодсказкиФорматаЭДО(ЭтотОбъект, ФорматДокумента,
		"ФорматДокумента", ИспользоватьЭДОВДокументообороте);
		
КонецПроцедуры

// Настройка регламента вида ЭД.
// 
// Параметры:
//  ВидЭД - СправочникСсылка.ВидыДокументовЭДО - Вид документа ЭДО
//  ФорматЭД - Строка - Формат ЭД
//  ОписаниеВидаДокумента - Неопределено, ДанныеФормыЭлементКоллекции - реквизиты вида документа ЭДО, см. ЭлектронныеДокументыЭДО.ОписаниеВидаДокумента
// 
// Возвращаемое значение:
//  Неопределено, - Настройка регламента вида ЭД:
// * ТребуетсяИзвещениеОПолучении - Булево - 
// * ТребуетсяОтветнаяПодпись - Булево - 
// * РедактироватьПодпись - Булево - 
// * РедактироватьИзвещение - Булево - 
// * РедактироватьОтветнуюПодпись - Булево - 
//
&НаСервере
Функция НастройкаРегламентаВидаЭД(ВидЭД, ФорматЭД, ОписаниеВидаДокумента = Неопределено)
	
	Если Не ЗначениеЗаполнено(ВидЭД) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ОписаниеВидаДокумента = Неопределено Тогда
		ОписаниеВидаДокумента = ЭлектронныеДокументыЭДО.ОписаниеВидаДокумента(ВидЭД);
	КонецЕсли;
	НастройкиРегламента = ЭлектронныеДокументыЭДО.НастройкиРегламента(ОписаниеВидаДокумента, ФорматЭД);
	
	Возврат НастройкиРегламента;
	
КонецФункции

// Описание вида документа ЭДО.
// 
// Параметры:
//  ВидЭД - СправочникСсылка.ВидыДокументовЭДО - Вид ЭД
// 
// Возвращаемое значение:
//  Структура - реквизиты документа ЭДО, см. ЭлектронныеДокументыЭДО.ОписаниеВидаДокумента
//
&НаСервереБезКонтекста
Функция ОписаниеВидаДокументаЭДО(ВидЭД)
	
	Возврат ЭлектронныеДокументыЭДО.ОписаниеВидаДокумента(ВидЭД);
	
КонецФункции	

// Обработка проверки заполнения настроек ЭДО.
// 
// Параметры:
//  Отказ - Булево - Отказ
//
&НаСервере
Процедура ОбработкаПроверкиЗаполненияНастроекЭДО(Отказ)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД") Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьЗаполненениеНастроекЭДО(Отказ);
	ПроверитьДублированиеНастроекЭДО(Отказ);
	
КонецПроцедуры

// После ответа на вопрос о незаполненных видах документов ЭДО.
// 
// Параметры:
//  Результат - КодВозвратаДиалога, Неопределено - 
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры
//
&НаКлиенте
Процедура ПослеОтветаНаВопросОНезаполненныхВидахДокументовЭДО(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры.Вставить("ВопросОНезаполненныхВидахДокументаЭДОЗадан", Истина);
	КонецЕсли;
	
	Если Результат.Значение = КодВозвратаДиалога.Да Тогда
		Записать(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Передать настройки ЭДО для записи.
// 
// Параметры:
//  ТекущийОбъект - СправочникОбъект.ВидыДокументов - 
//
&НаСервере
Процедура ПередатьНастройкиЭДОДляЗаписи(ТекущийОбъект)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДляРегистра = ТаблицаНастроекЭДО.Выгрузить(, "Отправитель, Получатель, ВидДокументаЭДО,
		| ИдентификаторОтправителя, ИдентификаторПолучателя, Отправлять, ТребуетсяОтветнаяПодпись,
		| ТребуетсяИзвещениеОПолучении, Формат");
	
	Отбор = Новый Структура("Отправлять", Истина);
	Отбор.Вставить("Отправлять", Истина);
	Отбор.Вставить("ВидДокументаЭДО", Справочники.ВидыДокументовЭДО.ПустаяСсылка());			
	
	СтрокиКУдалению	= ТаблицаДляРегистра.НайтиСтроки(Отбор);
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДляРегистра.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Для Каждого СтрТЗ Из ТаблицаДляРегистра Цикл
		Если НЕ ЗначениеЗаполнено(СтрТЗ.ВидДокументаЭДО) Тогда
			СтрТЗ.ТребуетсяИзвещениеОПолучении = Ложь;
			СтрТЗ.ТребуетсяОтветнаяПодпись = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьОбщиеИзменения = ВидДокументаЭДО <> ВидДокументаЭДОНачальноеЗначение
		Или ФорматДокумента <> ФорматНачальноеЗначение
		Или ТребуетсяИзвещениеОПолучении <> ТребуетсяИзвещениеОПолученииНачальноеЗначение
		Или ТребуетсяОтветнаяПодпись <> ТребуетсяОтветнаяПодписьНачальноеЗначение;
	
	ЕстьЧастныеИзменения = Ложь;	
	Если Не ЕстьОбщиеИзменения Тогда
		ЕстьЧастныеИзменения = Не ОбщегоНазначенияДокументооборот.ДанныеСовпадают(ТаблицаДляРегистра,
			ТаблицаНастроекЭДОНачальныеЗначения.Выгрузить());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидДокументаЭДО) Тогда
		НоваяНастройка = ТаблицаДляРегистра.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяНастройка, ЭтотОбъект);
		НоваяНастройка.Отправлять = Истина;
		НоваяНастройка.Формат = ФорматДокумента;
	КонецЕсли;
	
	Если ЕстьОбщиеИзменения Или ЕстьЧастныеИзменения Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("НастройкиОтправкиЭДО", ТаблицаДляРегистра);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет корректность заполненения настроек ЭДО.
// 
// Параметры:
//  Отказ - Булево - принимает значение Истина, если найдены не заполненные поля
//
&НаСервере
Процедура ПроверитьЗаполненениеНастроекЭДО(Отказ)
	
	Для Каждого СтрокаНастроек Из ТаблицаНастроекЭДО Цикл
		
		НомерСтроки = СтрокаНастроек.НомерСтроки - 1;
		
		Если (Не СтрокаНастроек.Отправлять Или ЗначениеЗаполнено(СтрокаНастроек.ВидДокументаЭДО))
			И Не ЗначениеЗаполнено(СтрокаНастроек.Отправитель) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Не заполнено поле ""Отправитель"" в строке %1'"), СтрокаНастроек.НомерСтроки),,
					"ТаблицаНастроекЭДО[" + Формат(НомерСтроки, "ЧН=; ЧГ=") + "].Отправитель",, Отказ);
		КонецЕсли;

		Если (Не СтрокаНастроек.Отправлять Или ЗначениеЗаполнено(СтрокаНастроек.ВидДокументаЭДО))
			И Не ЗначениеЗаполнено(СтрокаНастроек.Получатель) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Не заполнено поле ""Получатель"" в строке %1'"), СтрокаНастроек.НомерСтроки),,
					"ТаблицаНастроекЭДО[" + Формат(НомерСтроки, "ЧН=; ЧГ=") + "].Получатель",, Отказ);
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

// Проверяет наличие дублей настроек ЭДО.
// 
// Параметры:
//  Отказ - Булево - принимает значение Истина, если найдены дубли настроек
//
&НаСервере
Процедура ПроверитьДублированиеНастроекЭДО(Отказ)
	
	ТЗ_Настройки = ТаблицаНастроекЭДО.Выгрузить();
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоискаДублейНастроекЭДО();
	Запрос.УстановитьПараметр("ТЗ_Настройки", ТЗ_Настройки);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр(
			"ru = 'По отправителю %1 и получателю %2 есть дубль настройки в строке %3'"), Выборка.Отправитель,
				Выборка.Получатель, Выборка.НомерСтроки), , "ТаблицаНастроекЭДО[" + Формат(Выборка.НомерСтроки - 1,
					"ЧН=; ЧГ=") + "].НомерСтроки",, Отказ);
	КонецЦикла;	
	
КонецПроцедуры	

// Проверить заполнение настроек ЭДОПеред записью.
// 
// Параметры:
//  ПараметрыЗаписи - Структура - Параметры записи:
// * ЭтоНовый - Булево - 
//  Отказ - Булево - Отказ
//
&НаКлиенте
Процедура ПроверитьЗаполнениеНастроекЭДОПередЗаписью(ПараметрыЗаписи, Отказ)
	
	Если Не ИспользоватьОбменЭД Или ПараметрыЗаписи.Свойство("ВопросОНезаполненныхВидахДокументаЭДОЗадан") Тогда
		Возврат;
	КонецЕсли;

	Отбор = Новый Структура;
	Отбор.Вставить("Отправлять", Истина);
	Отбор.Вставить("ВидДокументаЭДО", ПредопределенноеЗначение("Справочник.ВидыДокументовЭДО.ПустаяСсылка"));
	ЕстьНезаполненныеВидыДокументовЭДО = ТаблицаНастроекЭДО.НайтиСтроки(Отбор).Количество() > 0;
	Если ЕстьНезаполненныеВидыДокументовЭДО Тогда
		Отказ = Истина;
		ЗадатьВопросОНезаполнныхВидахДокументовЭДО(ПараметрыЗаписи);
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Функция ПредставленияФорматов()
	
	Соответствие = Новый Соответствие();
	ТаблицаФорматов = ФорматыЭД.Выгрузить();
	ТаблицаФорматов.Свернуть("ИдентификаторФормата, ПредставлениеФормата");
	Для Каждого СтрФормат Из ТаблицаФорматов Цикл
		Соответствие.Вставить(СтрФормат.ИдентификаторФормата, СтрФормат.ПредставлениеФормата);
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПустойНастройки()
	
	Возврат НСтр("ru = 'Заполняется при отправке'");
	
КонецФункции

// Список форматов вида документа ЭДО.
// 
// Параметры:
//  ВидЭД - СправочникСсылка.ВидыДокументовЭДО - Вид ЭД
// 
// Возвращаемое значение:
//  СписокЗначений из Строка - Список форматов вида ЭД
//
&НаСервере
Функция СписокФорматовВидаЭД(ВидЭД)
	
	СписокФорматов = Новый СписокЗначений;
	СтрокиФорматов = ФорматыЭД.НайтиСтроки(Новый Структура("ВидДокумента", ВидЭД));
	Для Каждого СтрокаТаблицы Из СтрокиФорматов Цикл
		СписокФорматов.Добавить(СтрокаТаблицы.ИдентификаторФормата, СтрокаТаблицы.ПредставлениеФормата);
	КонецЦикла;
	
	Возврат СписокФорматов;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаПоискаДублейНастроекЭДО()
	
	Возврат "ВЫБРАТЬ
	|	ТЗ_Настройки.Отправитель,
	|	ТЗ_Настройки.Получатель,
	|	ТЗ_Настройки.ВидДокументаЭДО,
	|	ТЗ_Настройки.Отправлять,
	|	ТЗ_Настройки.НомерСтроки
	|ПОМЕСТИТЬ ВТ_Настройки
	|ИЗ
	|	&ТЗ_Настройки КАК ТЗ_Настройки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Настройки.Отправитель КАК Отправитель,
	|	ВТ_Настройки.Получатель КАК Получатель,
	|	ВТ_Настройки.НомерСтроки
	|ПОМЕСТИТЬ ВТ_ОтборНастроек
	|ИЗ
	|	ВТ_Настройки КАК ВТ_Настройки
	|ГДЕ
	|	ВТ_Настройки.Отправитель <> Значение(Справочник.Организации.ПустаяСсылка)
	|	И НЕ ВТ_Настройки.Получатель В (Значение(Справочник.Организации.ПустаяСсылка),
	|		Значение(Справочник.Контрагенты.ПустаяСсылка), Неопределено)
	|	И ВТ_Настройки.Отправлять
	|	И ВТ_Настройки.ВидДокументаЭДО <> ЗНАЧЕНИЕ(Справочник.ВидыДокументовЭДО.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Настройки.Отправитель,
	|	ВТ_Настройки.Получатель,
	|	ВТ_Настройки.НомерСтроки
	|ИЗ
	|	ВТ_Настройки КАК ВТ_Настройки
	|ГДЕ
	|	ВТ_Настройки.Отправитель <> Значение(Справочник.Организации.ПустаяСсылка)
	|	И НЕ ВТ_Настройки.Получатель В (Значение(Справочник.Организации.ПустаяСсылка),
	|		Значение(Справочник.Контрагенты.ПустаяСсылка), Неопределено)
	|	И НЕ ВТ_Настройки.Отправлять
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ОтборНастроек.Отправитель,
	|	ВТ_ОтборНастроек.Получатель
	|ПОМЕСТИТЬ ВТ_Дубли
	|ИЗ
	|	ВТ_ОтборНастроек КАК ВТ_ОтборНастроек
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОтборНастроек.Отправитель,
	|	ВТ_ОтборНастроек.Получатель
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ОтборНастроек.НомерСтроки) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ОтборНастроек.Отправитель,
	|	ВТ_ОтборНастроек.Получатель,
	|	ВТ_ОтборНастроек.НомерСтроки
	|ИЗ
	|	ВТ_Дубли КАК ВТ_Дубли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОтборНастроек КАК ВТ_ОтборНастроек
	|		ПО ВТ_ОтборНастроек.Отправитель = ВТ_Дубли.Отправитель
	|		И ВТ_ОтборНастроек.Получатель = ВТ_Дубли.Получатель";
		
КонецФункции	

// Возвращает участников ЭДО, у которых только одна учетная запись ЭДО.
// 
// Возвращаемое значение:
//  Соответствие - Участники ЭДО и их учетные записи:
//  * Ключ - ОпределяемыйТип.УчастникЭДО -
//  * Значение - Строка -
//
&НаСервере
Функция УчетныеЗаписиПоУмолчаниюЭДО()
	
	УчетныеЗаписи = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Приглашения.Организация КАК Отправитель
		|ПОМЕСТИТЬ ВТ_Приглашения_Отправители
		|ИЗ
		|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК Приглашения
		|ГДЕ
		|	Приглашения.Организация В (&Отправители)
		|СГРУППИРОВАТЬ ПО
		|	Приглашения.Организация
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(Различные Приглашения.ИдентификаторОрганизации) = 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Приглашения.Контрагент КАК Получатель
		|ПОМЕСТИТЬ ВТ_Приглашения_Получатели
		|ИЗ
		|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК Приглашения
		|ГДЕ
		|	Приглашения.Контрагент В (&Получатели)
		|	И НЕ Приглашения.Контрагент В (&Отправители)
		|СГРУППИРОВАТЬ ПО
		|	Приглашения.Контрагент
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(Различные Приглашения.ИдентификаторКонтрагента) = 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Приглашения_Отправители.Отправитель КАК УчастникЭДО,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации КАК Идентификатор
		|ИЗ
		|	ВТ_Приглашения_Отправители КАК ВТ_Приглашения_Отправители
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК
		|			ПриглашенияКОбменуЭлектроннымиДокументами
		|		ПО ВТ_Приглашения_Отправители.Отправитель = ПриглашенияКОбменуЭлектроннымиДокументами.Организация
		|
		|Объединить ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Приглашения_Получатели.Получатель,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента
		|ИЗ
		|	ВТ_Приглашения_Получатели КАК ВТ_Приглашения_Получатели
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК
		|			ПриглашенияКОбменуЭлектроннымиДокументами
		|		ПО ВТ_Приглашения_Получатели.Получатель = ПриглашенияКОбменуЭлектроннымиДокументами.Контрагент"; 
	
	ТЗ_Настройки = ТаблицаНастроекЭДО.Выгрузить();
	Запрос.УстановитьПараметр("Отправители", ТЗ_Настройки.ВыгрузитьКолонку("Отправитель"));
	Запрос.УстановитьПараметр("Получатели", ТЗ_Настройки.ВыгрузитьКолонку("Получатель"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		УчетныеЗаписи.Вставить(Выборка.УчастникЭДО, Выборка.Идентификатор);
	КонецЦикла;
	
	Возврат УчетныеЗаписи;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеНастроекЭДО()
	
	// Вид документа
	ОформлениеВидаЭД = УсловноеОформление.Элементы.Добавить();
	ОформлениеВидаЭД.Использование = Истина;
	
	Поля = ОформлениеВидаЭД.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДОВидДокументаЭДО");
	
	ОтборЭлемента = ОформлениеВидаЭД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));	
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДО.ВидДокументаЭДО");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ОтборЭлемента = ОформлениеВидаЭД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидДокументаЭДО");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОформлениеВидаЭД.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ВидДокументаЭДО"));
	
	ОформлениеВидаЭД = УсловноеОформление.Элементы.Добавить();
	ОформлениеВидаЭД.Использование = Истина;
	
	Поля = ОформлениеВидаЭД.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДОВидДокументаЭДО");
	
	ОтборЭлемента = ОформлениеВидаЭД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДО.ВидДокументаЭДО");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ОтборЭлемента = ОформлениеВидаЭД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидДокументаЭДО");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОформлениеВидаЭД.Оформление.УстановитьЗначениеПараметра("Текст", ПредставлениеПустойНастройки());
	
	ОформлениеВидаЭД = УсловноеОформление.Элементы.Добавить();
	ОформлениеВидаЭД.Использование = Истина;
	
	Поля = ОформлениеВидаЭД.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДОВидДокументаЭДО");
	
	ОтборЭлемента = ОформлениеВидаЭД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДО.ВидДокументаЭДО");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ОтборЭлемента = ОформлениеВидаЭД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДО.Отправлять");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОформлениеВидаЭД.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Регламент, формат
	ОформлениеФорматаРегламентаЭД = УсловноеОформление.Элементы.Добавить();
	ОформлениеФорматаРегламентаЭД.Использование = Истина;
	
	Поля = ОформлениеФорматаРегламентаЭД.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДОВидДокументаЭДО");
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДОТребуетсяОтветнаяПодпись");
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДОТребуетсяИзвещениеОПолучении");
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДОВерсияФормата");

	ОтборЭлемента = ОформлениеФорматаРегламентаЭД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДО.ВидДокументаЭДО");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОформлениеФорматаРегламентаЭД.Оформление.УстановитьЗначениеПараметра("ЦветТекста",
		ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	
	// Идентификатор отправителя
	ОформлениеИдентификатораОтправителя = УсловноеОформление.Элементы.Добавить();
	ОформлениеИдентификатораОтправителя.Использование = Истина;
	
	Поля = ОформлениеИдентификатораОтправителя.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДОИдентификаторОтправителя");

	ОтборЭлемента = ОформлениеИдентификатораОтправителя.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДО.ИдентификаторОтправителя");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОформлениеИдентификатораОтправителя.Оформление.УстановитьЗначениеПараметра("ЦветТекста",
		ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	ОформлениеИдентификатораОтправителя.Оформление.УстановитьЗначениеПараметра("Текст",
		Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДО.ИдентификаторОтправителяПредставление"));
	
	// Идентификатор получателя	
	ОформлениеИдентификатораПолучателя = УсловноеОформление.Элементы.Добавить();
	ОформлениеИдентификатораПолучателя.Использование = Истина;
	
	Поля = ОформлениеИдентификатораПолучателя.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДОИдентификаторПолучателя");
	
	ОтборЭлемента = ОформлениеИдентификатораПолучателя.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДО.ИдентификаторПолучателя");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОформлениеИдентификатораПолучателя.Оформление.УстановитьЗначениеПараметра("ЦветТекста",
		ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	ОформлениеИдентификатораПолучателя.Оформление.УстановитьЗначениеПараметра("Текст",
		Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДО.ИдентификаторПолучателяПредставление"));	
		
	// Требуется извещение
	ОформлениеТребуетсяИзвещение = УсловноеОформление.Элементы.Добавить();
	ОформлениеТребуетсяИзвещение.Использование = Истина;
	
	Поля = ОформлениеТребуетсяИзвещение.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДОТребуетсяИзвещениеОПолучении");
	
	ОтборЭлемента = ОформлениеТребуетсяИзвещение.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДО.РедактироватьИзвещение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОформлениеТребуетсяИзвещение.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);	
	
	// Требуется ответная подпись
	ОформлениеТребуетсяОтветнаяПодпись = УсловноеОформление.Элементы.Добавить();
	ОформлениеТребуетсяОтветнаяПодпись.Использование = Истина;
	
	Поля = ОформлениеТребуетсяОтветнаяПодпись.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДОТребуетсяОтветнаяПодпись");
	
	ОтборЭлемента = ОформлениеТребуетсяОтветнаяПодпись.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДО.РедактироватьОтветнуюПодпись");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОформлениеТребуетсяОтветнаяПодпись.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);	
	
	// Формат ЭДО
	ОформлениеФормат = УсловноеОформление.Элементы.Добавить();
	ОформлениеФормат.Использование = Истина;
	
	Поля = ОформлениеФормат.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДОВерсияФормата");
	
	ГруппаОтбораИли = ОформлениеФормат.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДО.ВидДокументаЭДО");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДО.ЭтоФормализованныйДокумент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОформлениеФормат.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ОформлениеФормат = УсловноеОформление.Элементы.Добавить();
	ОформлениеФормат.Использование = Истина;
	
	Поля = ОформлениеФормат.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДОВерсияФормата");

	ОформлениеФормат.Оформление.УстановитьЗначениеПараметра("Текст",
		Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДО.ФорматПредставление"));
	
	// Отправитель
	ОформлениеОтправитель = УсловноеОформление.Элементы.Добавить();
	ОформлениеОтправитель.Использование = Истина;
	
	Поля = ОформлениеОтправитель.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДООтправитель");
	
	ГруппаОтбораИли = ОформлениеОтправитель.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДО.ВидДокументаЭДО");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДО.Отправлять");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ОформлениеОтправитель.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДО.Отправитель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОформлениеОтправитель.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Получатель
	ОформлениеПолучатель = УсловноеОформление.Элементы.Добавить();
	ОформлениеПолучатель.Использование = Истина;
	
	Поля = ОформлениеПолучатель.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДОПолучатель");
	
	ГруппаОтбораИли = ОформлениеПолучатель.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДО.ВидДокументаЭДО");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДО.Отправлять");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ОформлениеПолучатель.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНастроекЭДО.Получатель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОформлениеПолучатель.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ФорматДокументаПриИзмененииНаСервере()
	
	ЭлементСписка = Элементы.ФорматДокумента.СписокВыбора.НайтиПоЗначению(ФорматДокумента);
	Если ЭлементСписка <> Неопределено Тогда
		ФорматДокументаПредставление = ЭлементСписка.Представление;
	КонецЕсли;
	ЗаполнитьОбщиеНастройкиРегламентаЭД();
	ЗаполнитьПустыеПоляТаблицыНастроекЭДО();
	
КонецПроцедуры

// Открывает ссылку в браузере на описание формата ЭДО
// 
// Параметры:
//  ФорматЭД - Строка - Формат ЭД
//
&НаКлиенте
Процедура ФорматЭДРасширеннаяПодсказкаНажатие(ФорматЭД)
	
	Строки = ФорматыЭД.НайтиСтроки(Новый Структура("ИдентификаторФормата", ФорматЭД));
	Если Строки.Количество() > 0 Тогда
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(Строки[0].СсылкаНаПриказОВведении);
	КонецЕсли;

КонецПроцедуры

// Устанавливает значение реквизита ВидДокументаУчаствуетВОтраженииДокументовЭДО
//
&НаСервере
Процедура ОпределитьУчастиеВидаДокументаВОтраженииЭДО()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ШаблоныДляСозданияДокументовПоВходящимЭДО.Шаблон КАК Шаблон
		|ИЗ
		|	РегистрСведений.ШаблоныДляСозданияДокументовПоВходящимЭДО КАК ШаблоныДляСозданияДокументовПоВходящимЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныДокументов КАК ШаблоныДокументов
		|		ПО ШаблоныДляСозданияДокументовПоВходящимЭДО.Шаблон = ШаблоныДокументов.Ссылка
		|ГДЕ
		|	ШаблоныДокументов.ВидДокумента = &ВидДокумента";
	
	Запрос.УстановитьПараметр("ВидДокумента", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВидДокументаУчаствуетВОтраженииДокументовЭДО = ВыборкаДетальныеЗаписи.Следующий();
	
КонецПроцедуры

// Заполнить настройки регламента текущих данных таблицы "НастройкиЭДО".
// 
// Параметры:
//  ТекущиеДанные - ДанныеФормыЭлементКоллекции
//
&НаКлиенте
Процедура ЗаполнитьНастройкиРегламентаТекущихДанныхТаблицы(ТекущиеДанные)
	
	РегламентВидаЭД = НастройкаРегламентаВидаЭД(ТекущиеДанные.ВидДокументаЭДО, ТекущиеДанные.Формат);
	Если РегламентВидаЭД <> Неопределено Тогда
		ТекущиеДанные.ТребуетсяОтветнаяПодпись = РегламентВидаЭД.ТребуетсяОтветнаяПодпись;
		ТекущиеДанные.ТребуетсяИзвещениеОПолучении = РегламентВидаЭД.ТребуетсяИзвещениеОПолучении;
		ТекущиеДанные.РедактироватьИзвещение = РегламентВидаЭД.РедактироватьИзвещение;
		ТекущиеДанные.РедактироватьОтветнуюПодпись = РегламентВидаЭД.РедактироватьОтветнуюПодпись;
	КонецЕсли;

КонецПроцедуры	

#КонецОбласти

#Область КопированиеНастроекОбработки

// Обрабатывает ответ на вопрос о записи вида документа перед загрузкой настроек обработки
// 
// Параметры:
//  Ответ - КодВозвратаДиалога
//  ДополнительныеПараметры - Структура, Неопределено -
&НаКлиенте
Процедура ОбработатьОтветНаВопросОЗаписиПередЗагрузкойНастроекОбработки(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Не Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьНастройкиОбработки();
	
КонецПроцедуры

// Начинает процедуру загрузки настроек обработки
&НаКлиенте
Процедура ЗагрузитьНастройкиОбработки()
	
	ОбработчикЗагрузки = Новый ОписаниеОповещения("ОбработатьЗагрузкуНастроекОбработки", ЭтотОбъект);
	
	ДействияКлиент.ЗагрузитьНастройкиОбработкиВидаОбъектаИзФайла(Объект.Ссылка, ОбработчикЗагрузки);
	
КонецПроцедуры

// Обрабатывает загрузку настроек обработки
// 
// Параметры:
//  Результат - Произвольный
//  ДополнительныеПараметры - Структура, Неопределено -
&НаКлиенте
Процедура ОбработатьЗагрузкуНастроекОбработки(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьВидыДействийПоВидуДокумента();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_МобильныйКлиент

&НаСервере
Процедура НастроитьФормуДляМобильногоПриНеобходимости()
	
	Если Не ЭтоМобильныйКлиент Тогда
		Возврат;
	КонецЕсли;
	
	ЦветФонаГрупп = ЦветаСтиля.МК_ЦветФонаГруппы;
	
	СворачиваниеЭлементовПоВажности = СворачиваниеЭлементовФормыПоВажности.НеИспользовать;
	ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	
	Элементы.ФормаКомандаЗаписатьИЗакрыть.Отображение = ОтображениеКнопки.Картинка;
	Элементы.ФормаКомандаЗаписатьИЗакрыть.Картинка = БиблиотекаКартинок.ЗаписатьИЗакрыть;
	Элементы.ОсновныеСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	
	// Страница "Настройки".
	Элементы.ГруппаОсновные.РастягиватьПоГоризонтали = Истина;
	Элементы.Право.РастягиватьПоГоризонтали = Истина;
	Элементы.ГруппаОсновные.РастягиватьПоГоризонтали = Истина;
	
	ВыровнятьЭлементДляМобильного(Элементы.Наименование);
	ВыровнятьЭлементДляМобильного(Элементы.Родитель);
	ВыровнятьЭлементДляМобильного(Элементы.ИндексНумерации);
	
	Элементы.Наименование.РастягиватьПоГоризонтали = Истина;
	Элементы.Родитель.РастягиватьПоГоризонтали = Истина;
	Элементы.ИндексНумерации.РастягиватьПоГоризонтали = Истина;
	
	Элементы.Наименование.ПодсказкаВвода = "";
	Элементы.Родитель.ПодсказкаВвода = "";
	Элементы.ИндексНумерации.ПодсказкаВвода = "";
	 
	ВыровнятьЭлементыГруппыДляМобильного(Элементы.ГруппаОсновныеНастройки);
	ВыровнятьЭлементыГруппыДляМобильного(Элементы.ГруппаДополнительныеНастройки);
	ВыровнятьЭлементыГруппыДляМобильного(Элементы.Право);
	
	Элементы.ДекорацияОтступ.Видимость = Ложь;
	ВыровнятьЭлементДляМобильного(Элементы.ВариантПодписания);
	
	Элементы.НормативныйСрокГруппа.ОтображатьЗаголовок = Ложь;
	Элементы.НадписьКалендарныхДней.Видимость = Ложь;
	Элементы.ДекорацияНормативныйСрокИсполненияМК.Видимость = Истина;
	Элементы.НормативныйСрокИсполнения.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
	Элементы.СрокИсполненияУказанВРабочихДнях.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
	Элементы.СрокИсполненияУказанВРабочихДнях.РастягиватьПоГоризонтали = Истина;
	
	ВыровнятьЭлементДляМобильного(Элементы.ВключитьВРеестры);
	Элементы.Комментарий.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	Элементы.Комментарий.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
	Элементы.Комментарий.ПодсказкаВвода = "";
	
	// Страница "Нумерация".
	Элементы.НастройкиНумерации.Шапка = Ложь;
	Элементы.НастройкиНумерацииГруппаИзмерений.Видимость = Ложь;
	Элементы.СтраницаНумерация.ЦветФона = ЦветФонаГрупп;
	
	// Страница "Создание документов".
	// Разрешение на создание.
	Элементы.РазрешенияНаСозданиеРазделитель2.Видимость = Ложь;
	ВыровнятьЭлементДляМобильного(Элементы.РазрешенияНаСозданиеТематика);
	Элементы.ДобавитьРазрешение.Отображение = ОтображениеКнопки.Текст;
	Элементы.Переместить(Элементы.УдалитьРазрешение, Элементы.РазрешенияНаСоздание.КонтекстноеМеню);
	Элементы.РазрешенияНаСозданиеКоманды.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	// Шаблон документа.
	НастроитьГруппуШаблонДляМобильного();
	
	// Страница "Тематики".
	Элементы.Тематики.Шапка = Ложь;
	Элементы.ТематикиГруппаКолонокМК.Видимость = Истина;
	Элементы.Переместить(Элементы.ТематикиСсылка, Элементы.ТематикиГруппаКолонокМК);
	Элементы.Переместить(Элементы.ТематикиРазрешенияНаСозданиеДокументов, Элементы.ТематикиГруппаКолонокМК);
	Элементы.ТематикиКомментарий.Видимость = Ложь;
	
	// Страница "Обработка документов".
	Элементы.ВидыДействий.Шапка = Ложь;
	Элементы.ВидыДействийПроверкаВыполнения.Видимость = Ложь;
	Элементы.ВидыДействийПравилаЭскалации.Видимость = Ложь;
	Элементы.ВидыДействийПравилаЗапуска.Видимость = Ложь;
	Элементы.ВидыДействийСхема.Видимость = Ложь;
	Элементы.ВидыДействийУсловияЗапуска.Видимость = Ложь;
	
	Элементы.Переместить(Элементы.ПереместитьДействиеВверх, Элементы.ВидыДействий.КонтекстноеМеню);
	Элементы.Переместить(Элементы.ПереместитьДействиеВниз, Элементы.ВидыДействий.КонтекстноеМеню);
	
	Элементы.ГруппаЗаголовокВыбранныеВидыДействий.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Элементы.Переместить(Элементы.ГруппаКомандыВыбранныеВидыДействий, Элементы.ГруппаЗаголовокВыбранныеВидыДействий);
	Элементы.ПравилаОбработки.РастягиватьПоГоризонтали = Истина;
	Элементы.ПравилаЗапуска.РастягиватьПоГоризонтали = Истина;
	
	// Страница "Роли файлов".
	Элементы.РолиФайлов.Шапка = Ложь;
	Элементы.РолиФайловОбязательная.Видимость = Ложь;
	Элементы.РолиФайловТолькоОдинФайл.Видимость = Ложь;
	Элементы.РолиФайловФайлЭлектронногоДокумента.Видимость = Ложь;
	Элементы.СтраницаРолиФайлов.ЦветФона = ЦветФонаГрупп;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьГруппуШаблонДляМобильного()
	
	// Страница "Шаблон".
	ВыровнятьЭлементыГруппыДляМобильного(Элементы.Группа4);
	
	Элементы.Переместить(Элементы.РабочаяГруппаТаблица, Элементы.ГруппаРабочаяГруппаМК);
	
	Элементы.ДекорацияЗаголовокРабочейГруппыМК.Видимость = Истина;
	Элементы.ДекорацияЗаголовокРабочейГруппыМК.Заголовок = ЗаголовокРабочейГруппы;
	
	Элементы.РабочаяГруппаТаблица.Шапка = Ложь;
	Элементы.РабочаяГруппаТаблицаИконка.Видимость = Ложь;
	Элементы.РабочаяГруппаТаблицаИзменение.Видимость = Ложь;
	Элементы.РабочаяГруппаТаблицаПустаяКолонка.Видимость = Ложь;
	
	// Страница "Реквизиты документа".
	ВыровнятьЭлементДляМобильного(Элементы.Тематика);
	ВыровнятьЭлементДляМобильного(Элементы.Заголовок);
	ВыровнятьЭлементДляМобильного(Элементы.Содержание);
	
	ВыровнятьЭлементыГруппыДляМобильного(Элементы.ГруппаОрганизация);
	ВыровнятьЭлементыГруппыДляМобильного(Элементы.ГруппаКонтрагент);
	ВыровнятьЭлементыГруппыДляМобильного(Элементы.ГруппаПолучатель);
	
	ВыровнятьЭлементыГруппыДляМобильного(Элементы.ГруппаОбщиеРеквизиты);
	ВыровнятьЭлементыГруппыДляМобильного(Элементы.ГруппаХранение);
	
	Элементы.КомментарийКДокументу.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	Элементы.КомментарийКДокументу.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
	Элементы.КомментарийКДокументу.ПодсказкаВвода = "";
	
	Элементы.ГруппаСтороны.ОтображатьЗаголовок = Истина;
	Элементы.ГруппаДекорацияИПанель.Видимость = Ложь;
	Элементы.Переместить(Элементы.Добавить, Элементы.Стороны.КоманднаяПанель);
	
	Элементы.Стороны.Шапка = Ложь;
	Элементы.СтороныИндексКартинкиСтороны.Видимость = Ложь;
	Элементы.СтороныГруппаНаименованиеПодписал.Видимость = Ложь;
	
	Элементы.СтороныКонтактноеЛицо.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;
	Элементы.СтороныКонтактноеЛицо.ЦветТекста = WebЦвета.ТемноСерый;
	
	// Страница "Контрагенты".
	Элементы.Контрагенты.Шапка = Ложь;
	Элементы.КонтрагентыГруппаКолонокМК.Видимость = Истина;
	Элементы.Переместить(Элементы.КонтрагентыКонтрагент, Элементы.КонтрагентыГруппаКолонокМК);
	Элементы.Переместить(Элементы.КонтрагентыКонтактноеЛицо, Элементы.КонтрагентыГруппаКолонокМК);
	
	Элементы.КонтрагентыСпособ.ФиксацияВТаблице = ФиксацияВТаблице.Право;
	Элементы.КонтрагентыСпособ.Ширина = 8;
	Элементы.КонтрагентыОдинКонтрагент.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;

	Элементы.КонтрагентыКонтактноеЛицо.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;
	Элементы.КонтрагентыКонтактноеЛицо.ЦветТекста = WebЦвета.ТемноСерый;
	
	// Страница "Файлы".
	Элементы.Файлы.Шапка = Ложь;
	Элементы.ФайлыОписание.Видимость = Ложь;
	Элементы.ПравилоАвтозаполнения.Видимость = Ложь;
	Элементы.ФайлыДополнительно.Видимость = Ложь;
	
	Элементы.ОткрытьФайл.Видимость = Ложь;
	Элементы.Редактировать.Видимость = Ложь;
	Элементы.ЗакончитьРедактирование.Видимость = Ложь;
	Элементы.Освободить.Видимость = Ложь;
	Элементы.ОбновитьИзФайлаНаДиске.Видимость = Ложь;
	Элементы.ФайлыГруппаСортировка.Видимость = Ложь;
	Элементы.ФормаДополнительно.Видимость = Ложь;
	Элементы.Переместить(Элементы.ПроверитьПравило, Элементы.Файлы.КонтекстноеМеню);
	
	// Страница "Товары и услуги".
	Элементы.Товары.Шапка = Ложь;
	Элементы.ТоварыНомерСтроки.Видимость = Ложь;
	Элементы.ТоварыЕдиницаИзмерения.Видимость = Ложь;
	Элементы.ДобавитьНоменклатуру.Видимость = Ложь;
	Элементы.ВсеТоварыАртикул.Видимость = Ложь;
	Элементы.ВсеТоварыСсылка.Видимость = Ложь;
	
	// Страница "Категории".
	Элементы.КатегорииПодобратьКатегории.Отображение = ОтображениеКнопки.Текст;
	
	// Страница "Доступ".
	ВыровнятьЭлементДляМобильного(Элементы.ШаблонДокументаЗапретитьАвтоматическоеРасширениеДоступа);
	Элементы.ШаблонДокументаЗапретитьАвтоматическоеРасширениеДоступа.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	Элементы.РабочаяГруппаДокумента.Шапка = Ложь;
	Элементы.РабочаяГруппаДокументаИконка.Видимость = Ложь;
	Элементы.РабочаяГруппаДокументаИзменение.Видимость = Ложь;
	Элементы.РабочаяГруппаДокументаПустаяКолонка.Видимость = Ложь;
	
	// Страница "Настройка обработки".
	Элементы.ДекорацияВсеВидыДействий.Видимость = Ложь;
	Элементы.ГруппаКомпактнаяВыбранныеВидыДействий.Видимость = Ложь;
	Элементы.ГруппаВидыДействийПеренос.Видимость = Ложь;
	
	Элементы.ОбработкаДокумента.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Элементы.ДобавитьДействие.Заголовок = НСтр("ru = 'Добавить'");
	Элементы.ПодобратьДействие.Заголовок = НСтр("ru = 'Подобрать'");
	
	Элементы.ДобавитьВидДействия.Отображение = ОтображениеКнопки.Текст;
	Элементы.ДобавитьВидДействия.Заголовок = НСтр("ru = 'Добавить'");
	
	// Страница "Роли файлов".
	Элементы.СтраницаРолиФайлов.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	Элементы.ГруппаРолиВида.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	Элементы.ГруппаРолиГруппы.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	
КонецПроцедуры

&НаСервере
Процедура ВыровнятьЭлементДляМобильного(Элемент)
	
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	Элемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗаголовокРабочейГруппыМКНажатие(Элемент)
	
	Элементы.ГруппаРабочаяГруппаМК.Видимость = Не Элементы.ГруппаРабочаяГруппаМК.Видимость;
	
КонецПроцедуры

&НаСервере
Процедура ВыровнятьЭлементыГруппыДляМобильного(Группа)
	
	Для каждого Элемент Из Группа.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) <> Тип("ГруппаФормы") 
			И ТипЗнч(Элемент) <> Тип("КнопкаФормы") 
			И ТипЗнч(Элемент) <> Тип("ДекорацияФормы") Тогда
			ВыровнятьЭлементДляМобильного(Элемент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
