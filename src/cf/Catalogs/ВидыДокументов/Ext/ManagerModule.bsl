#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Находит виды документов, входящие в группу.
// 
// Параметры:
// 	ГруппаВидовДокументов - СправочникСсылка.ВидыДокументов.
// 	
// Возвращаемое значение:
// 	Массив из СправочникСсылка.ВидыДокументов.
//
Функция НайтиПоГруппе(ГруппаВидовДокументов) Экспорт
	
	НайденныеВидыДокументов = Новый Массив;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидыДокументов.Ссылка КАК ВидДокумента
		|ИЗ
		|	Справочник.ВидыДокументов КАК ВидыДокументов
		|ГДЕ
		|	ВидыДокументов.Ссылка В ИЕРАРХИИ (&ГруппаВидовДокументов)
		|	И ВидыДокументов.ЭтоГруппа = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("ГруппаВидовДокументов", ГруппаВидовДокументов);
	
	НайденныеВидыДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидДокумента");
	
	Возврат НайденныеВидыДокументов;
	
КонецФункции

// Возвращает структуру полей ВидаДокументовПредприятия
//
// Возвращаемое значение:
//   Структура
//
Функция ПолучитьСтруктуруВидаДокументовПредприятия() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Наименование");
	Параметры.Вставить("ВестиУчетПоКонтрагентам");
	Параметры.Вставить("ВестиУчетПоОрганизациям");
	Параметры.Вставить("ВестиУчетПоНоменклатуреДел");
	Параметры.Вставить("ИспользоватьСрокИсполнения");
	Параметры.Вставить("ОбязателенФайлОригинала");
	Параметры.Вставить("УчитыватьНедействующиеДокументы");
	Параметры.Вставить("УчитыватьСрокДействия");
	Параметры.Вставить("УчитыватьСуммуДокумента");
	Параметры.Вставить("ЯвляетсяДоговором");
	Параметры.Вставить("ЯвляетсяКомплектомДокументов");
	Параметры.Вставить("ВестиУчетПоАдресатам");
	Параметры.Вставить("Родитель");
	
	Возврат Параметры;
	
КонецФункции

// Создает и записывает в БД вид документа предприятия
//
// Параметры:
//   СтруктураВидаВнутреннегоДокумента - Структура - структура полей видов документов предприятия.
//
Функция СоздатьВидДокумента(СтруктураВидаВнутреннегоДокумента) Экспорт
	
	НовыйВидДокумента = СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НовыйВидДокумента, СтруктураВидаВнутреннегоДокумента);
	НовыйВидДокумента.Записать();
	
	Возврат НовыйВидДокумента.Ссылка;
	
КонецФункции

// Возвращает структуру полей группы видов документов предприятия
//
// Возвращаемое значение:
//   Структура
//
Функция ПолучитьСтруктуруГруппыВидовДокументовПредприятия() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Наименование");
	Параметры.Вставить("Комментарий");
	Параметры.Вставить("Родитель");
	
	Возврат Параметры;
	
КонецФункции

// Создает и записывает в БД группу видов внутренних документа
//
// Параметры:
//   СтруктураВидаВнутреннегоДокумента - Структура - структура полей видов документов предприятия.
//
Функция СоздатьГруппуВидовДокументовПредприятия(СтруктураГруппыВидовДокументовПредприятия) Экспорт
	
	НоваяГруппа = СоздатьГруппу();
	ЗаполнитьЗначенияСвойств(НоваяГруппа, СтруктураГруппыВидовДокументовПредприятия);
	НоваяГруппа.Записать();
	
	Возврат НоваяГруппа.Ссылка;
	
КонецФункции

// Возвращает отслеживаемые реквизиты для дополнительного свойства ПредыдущиеЗначенияРеквизитов.
//
// Возвращаемое значение:
//  Строка - Отслеживаемые реквизиты.
//
Функция ОтслеживаемыеРеквизиты() Экспорт
	
	ОтслеживаемыеРеквизиты = "Наименование,ВестиУчетТоваровИУслуг";
	
	Возврат ОтслеживаемыеРеквизиты;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеКэширующихДанных

// Обрабатывает обновление кэширующих данных.
// 
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса - Выборка из очереди обновления кэширующих данных:
//   * ОтметкаВремени - ОпределяемыйТип.ОтметкаВремени.
//   * ЗависимыйОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//   * ВлияющийОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//   * КлючВлияющихДанных - ЛюбаяСсылка.
//   * Автор - СправочникСсылка.Пользователи.
//   * ЗагрузкаОбработанныхДанныхИзДругойСистемы - Булево.
//   * ИзмененияВлияющихДанных - ХранилищеЗначения.
//   * Попыток - Число.
//   * ДатаКОбработке - Дата.
// 
Процедура ОбновитьКэширующиеДанные(Выборка) Экспорт
	
	НомерЦикла = 0;
	БольшеНетДанных = Ложь;
	Пока Не БольшеНетДанных Цикл
		
		ВидДокумента = Выборка.КлючВлияющихДанных; // СправочникСсылка.ВидыДокументов
		
		ЗапросДанныеДокументов = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1000
			|	ДанныеДокументовПредприятия.Документ КАК Документ,
			|	ДанныеДокументовПредприятия.ДатаСортировки КАК ДатаСортировки,
			|	ДанныеДокументовПредприятия.ПометкаУдаления КАК ПометкаУдаления,
			|	ВидыДокументов.ЯвляетсяВходящейКорреспонденцией,
			|	ВидыДокументов.ЯвляетсяИсходящейКорреспонденцией,
			|	ВидыДокументов.ЯвляетсяКомплектомДокументов
			|ИЗ
			|	РегистрСведений.ДанныеДокументовПредприятия КАК ДанныеДокументовПредприятия
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументов КАК ВидыДокументов
			|		ПО ДанныеДокументовПредприятия.ВидДокумента = ВидыДокументов.Ссылка
			|ГДЕ
			|	(ДанныеДокументовПредприятия.ВидДокумента = &ВидДокумента
			|	И ДанныеДокументовПредприятия.ЯвляетсяКомплектомДокументов <> ВидыДокументов.ЯвляетсяКомплектомДокументов
			|	ИЛИ ДанныеДокументовПредприятия.ВидКорреспонденции <> ЗНАЧЕНИЕ(Перечисление.ВидыКорреспонденции.Входящая)
			|	И ВидыДокументов.ЯвляетсяВходящейКорреспонденцией
			|	ИЛИ ДанныеДокументовПредприятия.ВидКорреспонденции <> ЗНАЧЕНИЕ(Перечисление.ВидыКорреспонденции.Исходящая)
			|	И ВидыДокументов.ЯвляетсяИсходящейКорреспонденцией)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДатаСортировки УБЫВ");
		
		ЗапросДанныеДокументов.УстановитьПараметр("ВидДокумента", ВидДокумента);
		//@skip-check query-in-loop
		Результат = ЗапросДанныеДокументов.Выполнить();
		БольшеНетДанных = Результат.Пустой();
		ВыборкаДокументы = Результат.Выбрать();
		Пока ВыборкаДокументы.Следующий() Цикл
			
			Попытка
			
				// Запишем новый набор записей.
				НаборЗаписей = РегистрыСведений.ДанныеДокументовПредприятия.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Документ.Установить(ВыборкаДокументы.Документ);
				НаборЗаписей.Отбор.ДатаСортировки.Установить(ВыборкаДокументы.ДатаСортировки);
				НаборЗаписей.Отбор.ПометкаУдаления.Установить(ВыборкаДокументы.ПометкаУдаления);
				
				НаборЗаписей.Прочитать();
		
				Если НаборЗаписей.Количество() > 0 Тогда
					ЗаписьРегистра = НаборЗаписей[0];
				Иначе
					Продолжить;
				КонецЕсли;
				
				ВидКорреспонденции = Перечисления.ВидыКорреспонденции.ПустаяСсылка();
				ВидДокумента = ЗаписьРегистра.ВидДокумента;
				
				Если ВыборкаДокументы.ЯвляетсяВходящейКорреспонденцией = Истина Тогда
					
					ВидКорреспонденции = Перечисления.ВидыКорреспонденции.Входящая;
					
				ИначеЕсли ВыборкаДокументы.ЯвляетсяИсходящейКорреспонденцией Тогда
					
					ВидКорреспонденции = Перечисления.ВидыКорреспонденции.Исходящая;
					
				КонецЕсли;	
				
				ЗаписьРегистра.ВидКорреспонденции = ВидКорреспонденции;
				ЗаписьРегистра.ЯвляетсяКомплектомДокументов = ВыборкаДокументы.ЯвляетсяКомплектомДокументов;     
				
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей); 
			
			Исключение
				СтекОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Не удалось заполнить ВидКорреспонденции ЯвляетсяКомплектомДокументов для документа %1 по причине:
						|%2'"),
					ВыборкаДокументы.Документ,
					СтекОшибки); 
				ЗаписьЖурналаРегистрации(
					ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,
					ВыборкаДокументы.Документ.Метаданные(),
					ВыборкаДокументы.Документ,
					ТекстСообщения);
			КонецПопытки;
			
		КонецЦикла;	
		
		НомерЦикла = НомерЦикла + 1;
		Если НомерЦикла > 10000 Тогда
			ВызватьИсключение НСтр("ru = 'Обнаружено зацикливание'");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ОбщегоНазначенияДокументооборот.ОбработкаПолученияДанныхВыбора(
		ДанныеВыбора,
		Параметры,
		СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Отбор.Вставить("ПометкаУдаления", Ложь);
	МультиязычностьСервер.ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка, Метаданные.Справочники.ВидыДокументов);
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции_УправлениеДоступом

// УправлениеДоступом

Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат "Ссылка, ЭтоГруппа";
	
КонецФункции

// Заполняет переданный дескриптор доступа 
Процедура ЗаполнитьОсновнойДескриптор(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	ДескрипторДоступа.ВидОбъекта = ОбъектДоступа.Ссылка;
	
КонецПроцедуры

// Возвращает признак того, что менеджер содержит метод ЗапросДляРасчетаПрав()
// 
Функция ЕстьМетодЗапросДляРасчетаПрав() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает запрос для расчета прав доступа по дескрипторам объекта
// 
// Параметры:
//  
//  Дескрипторы - Массив - массив дескрипторов, чьи права нужно рассчитать
//  ИдОбъекта - Ссылка - идентификатор объекта метаданных, назначенный переданным дескрипторам
//  МенеджерОбъектаДоступа - СправочникМенеджер, ДокументМенеджер - менеджер объекта доступа
// 
// Возвращаемое значение - Запрос - запрос, который выберет права доступа для переданного массива дескрипторов
// 
Функция ЗапросДляРасчетаПрав(Дескрипторы, ИдОбъекта, МенеджерОбъектаДоступа) Экспорт
	
	Запрос = Справочники.ДескрипторыДоступаОбъектов.ЗапросДляСтандартногоРасчетаПрав(
		Дескрипторы, ИдОбъекта, МенеджерОбъектаДоступа, Ложь, Истина);
	Запрос.Текст = ДокументооборотПраваДоступаПовтИсп.ТекстЗапросаДляРасчетаПравРазрезаДоступа();
	
	Возврат Запрос;
	
КонецФункции

// Заполняет протокол расчета прав дескрипторов
// 
// Параметры:
//  
//  ПротоколРасчетаПрав - Массив - протокол для заполнения
//  ЗапросПоПравам - Запрос - запрос, который использовался для расчета прав дескрипторов
//  Дескрипторы - Массив - массив дескрипторов, чьи права были рассчитаны
//  
Процедура ЗаполнитьПротоколРасчетаПрав(ПротоколРасчетаПрав, ЗапросПоПравам) Экспорт
	
	Справочники.ДескрипторыДоступаОбъектов.ЗаполнитьПротоколРасчетаПравСтандартно(
		ПротоколРасчетаПрав, ЗапросПоПравам);
	
КонецПроцедуры

// Конец УправлениеДоступом

#КонецОбласти

#Область ОбработчикиСобытий  

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
    МультиязычностьКлиентСервер.ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка);
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
    МультиязычностьКлиентСервер.ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#КонецЕсли
