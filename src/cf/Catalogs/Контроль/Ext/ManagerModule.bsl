#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает отслеживаемые реквизиты для дополнительного свойства ПредыдущиеЗначенияРеквизитов.
//
// Возвращаемое значение:
//  Строка - Отслеживаемые реквизиты.
//
Функция ОтслеживаемыеРеквизиты() Экспорт
	
	ОтслеживаемыеРеквизиты = "Контролер";
	
	Возврат ОтслеживаемыеРеквизиты;
	
КонецФункции

// Ищет контроль по предмету и контролеру.
//
// Параметры:
//  Предмет - ЛюбаяСсылка - Предмет контроля.
//  Контролер - СправочникСсылка.ПолныеРоли, СправочникСсылка.Пользователи - Контролер.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Контроль - Найденный контроль.
//
Функция НайтиПоПредметуИКонтролеру(Предмет, Контролер) Экспорт
	
	Если Не ЗначениеЗаполнено(Предмет) Или Не ЗначениеЗаполнено(Контролер) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контроль.Ссылка КАК Контроль
		|ИЗ
		|	Справочник.Контроль КАК Контроль
		|ГДЕ
		|	Контроль.Предмет = &Предмет
		|	И Контроль.Контролер = &Контролер
		|	И Контроль.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	Запрос.УстановитьПараметр("Контролер", Контролер);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контроль");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

КонецПроцедуры

// Формирует параметры контроля для кэша.
//
// Параметры:
//  Предмет - СправочникСсылка.Контрагенты,
//            СправочникСсылка.Проекты, БизнесПроцессСсылка,
//            ЗадачаСсылка,
//            СправочникСсылка.Файлы,
//            ДокументСсылка.Задача,
//            СправочникСсылка.ДокументыПредприятия,
//            ДокументСсылка.ДействиеЗадачи,
//            СправочникСсылка.Мероприятия,
//            СправочникСсылка.ПроектныеЗадачи,
//            СправочникСсылка.ВеткиПереписки.
//  КэшДанных - Структура,
//              Неопределено.
// 
// Возвращаемое значение:
//  Структура - Параметры контроля для кэша.
//   * СостояниеКонтроля - ПеречисленниеСсылка.СостоянияКонтроля.
//   * СрокИсполнения - Дата.
//   * СрокИсполненияОбщий - Дата.
//
Функция ПараметрыКонтроляДляКэша(Предмет, КэшДанных = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Предметы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Предмет);
	
	Если ТипЗнч(Предмет) = Тип("ДокументСсылка.Задача") Тогда
		
		Если КэшДанных <> Неопределено И КэшДанных.Свойство("ДанныеЗадачи") Тогда
			ИсточникЗадачи = КэшДанных.ДанныеЗадачи.Источник;
		Иначе
			ИсточникЗадачи = РаботаСЗадачами.ИсточникЗадачи(Предмет);
		КонецЕсли;
		Если ЗначениеЗаполнено(ИсточникЗадачи) Тогда
			Предметы.Добавить(ИсточникЗадачи);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Предмет) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		
		Если КэшДанных <> Неопределено И КэшДанных.Свойство("ДанныеДействияЗадачи") Тогда
			ИсточникДействияЗадачи = КэшДанных.ДанныеДействияЗадачи.Источник;
		Иначе
			ИсточникДействияЗадачи = РаботаСЗадачами.ИсточникДействияЗадачи(Предмет);
		КонецЕсли;
		Если ЗначениеЗаполнено(ИсточникДействияЗадачи) Тогда
			Предметы.Добавить(ИсточникДействияЗадачи);
		КонецЕсли;
		
	ИначеЕсли РаботаСЗадачами.ЭтоИсточникЗадач(Предмет) Тогда
		
		ЗадачаПоИсточнику = Документы.Задача.НайтиПоИсточнику(Предмет);
		Если ЗначениеЗаполнено(ЗадачаПоИсточнику) Тогда
			Предметы.Добавить(ЗадачаПоИсточнику);
		КонецЕсли;
		
	ИначеЕсли РаботаСЗадачами.ЭтоИсточникДействийЗадач(Предмет) Тогда
		
		ДействиеЗадачиПоИсточнику = Документы.ДействиеЗадачи.НайтиПоИсточнику(Предмет);
		Если ЗначениеЗаполнено(ДействиеЗадачиПоИсточнику) Тогда
			Предметы.Добавить(ДействиеЗадачиПоИсточнику);
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапросаПоПроцессам = "";
	Для Каждого БизнесПроцесс Из Метаданные.БизнесПроцессы Цикл
		Если Не БизнесПроцесс.ТабличныеЧасти.Предметы.Реквизиты.Предмет.Тип.СодержитТип(ТипЗнч(Предмет)) Тогда 
			Продолжить;
		КонецЕсли;
		
		ТекстЗапросаПоПроцессам = ТекстЗапросаПоПроцессам +
			"ВЫБРАТЬ
			|	Ссылка
			|		" + ?(ТекстЗапросаПоПроцессам = "", " ПОМЕСТИТЬ ПодчиненныеПроцессы " , "") + "
			|ИЗ
			|	БизнесПроцесс." + БизнесПроцесс.Имя + ".Предметы
			|ГДЕ 
			|	Предмет В (&Предметы) И РольПредмета = ЗНАЧЕНИЕ(Перечисление.РолиПредметов.Основной)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
	КонецЦикла;	
	
	Если ТекстЗапросаПоПроцессам = "" Тогда 
		
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Контроль.Ссылка КАК Ссылка,
			|	Контроль.СнятСКонтроля КАК СнятСКонтроля,
			|	Контроль.ПоставленНаКонтроль КАК ПоставленНаКонтроль,
			|	Контроль.СрокИсполнения КАК СрокИсполнения
			|ИЗ
			|	Справочник.Контроль КАК Контроль
			|ГДЕ
			|	Контроль.Предмет В (&Предметы)
			|	И НЕ Контроль.ПометкаУдаления";
		
	Иначе
		
		ТекстЗапросаПоПроцессам = Лев(ТекстЗапросаПоПроцессам, СтрДлина(ТекстЗапросаПоПроцессам)-16);
		ТекстЗапросаПоПроцессам = ТекстЗапросаПоПроцессам + ";";
		
		ТекстЗапроса = ТекстЗапросаПоПроцессам + 
			"ВЫБРАТЬ
			|	Контроль.Ссылка КАК Ссылка,
			|	Контроль.СнятСКонтроля КАК СнятСКонтроля,
			|	Контроль.ПоставленНаКонтроль КАК ПоставленНаКонтроль,
			|	Контроль.СрокИсполнения КАК СрокИсполнения
			|ИЗ
			|	Справочник.Контроль КАК Контроль
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПодчиненныеПроцессы КАК ПодчиненныеПроцессы
			|		ПО Контроль.Предмет = ПодчиненныеПроцессы.Ссылка
			|ГДЕ
			|	НЕ Контроль.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Контроль.Ссылка,
			|	Контроль.СнятСКонтроля,
			|	Контроль.ПоставленНаКонтроль,
			|	Контроль.СрокИсполнения
			|ИЗ
			|	Справочник.Контроль КАК Контроль
			|ГДЕ
			|	Контроль.Предмет В (&Предметы)
			|	И НЕ Контроль.ПометкаУдаления";
			
	КонецЕсли;
	
	ТекстЗапросаПоДействиям = ДействияСервер.ТекстЗапросаДействияПредмета(Предмет, Истина);
	Если ЗначениеЗаполнено(ТекстЗапросаПоДействиям) Тогда
		ТекстЗапроса = ТекстЗапросаПоДействиям + ТекстЗапроса;
		ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Контроль.Ссылка,
			|	Контроль.СнятСКонтроля,
			|	Контроль.ПоставленНаКонтроль,
			|	Контроль.СрокИсполнения
			|ИЗ
			|	Справочник.Контроль КАК Контроль
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеДействия КАК ВсеДействия
			|		ПО Контроль.Предмет = ВсеДействия.Ссылка
			|ГДЕ
			|	НЕ Контроль.ПометкаУдаления";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Предметы", Предметы);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда 
		
		СрокИсполненияКеш = '00010101';
		СрокИсполненияОбщийКеш = '00010101';
		СостояниеКонтроля = Перечисления.СостоянияКонтроля.ПустаяСсылка();
		
	ИначеЕсли Результат.Количество() = 1 Тогда 
		
		СрокИсполненияКеш = Результат[0].СрокИсполнения;
		СрокИсполненияОбщийКеш = Результат[0].СрокИсполнения;
		Если Результат[0].СнятСКонтроля Тогда 
			СостояниеКонтроля = Перечисления.СостоянияКонтроля.СнятСКонтроля;
		Иначе
			СостояниеКонтроля = Перечисления.СостоянияКонтроля.НаКонтроле;
		КонецЕсли;	
		
	Иначе
		
		Если Результат.Найти(Истина, "СнятСКонтроля") <> Неопределено
		   И Результат.Найти(Ложь, "СнятСКонтроля") <> Неопределено Тогда 
			СостояниеКонтроля = Перечисления.СостоянияКонтроля.СмешанноНесколько;
		ИначеЕсли Результат.Найти(Истина, "СнятСКонтроля") <> Неопределено Тогда 
			СостояниеКонтроля = Перечисления.СостоянияКонтроля.СнятСКонтроляНесколько;
		Иначе	
			СостояниеКонтроля = Перечисления.СостоянияКонтроля.НаКонтролеНесколько;
		КонецЕсли;	
		
		СрокИсполненияКеш = '39990101';
		СрокИсполненияОбщийКеш = '00010101';
		ЕстьПустойСрок = Ложь;
		Для Каждого Строка Из Результат Цикл 
			Если Строка.СнятСКонтроля Тогда 
				Продолжить;
			КонецЕсли;	
			Если ЗначениеЗаполнено(Строка.СрокИсполнения) И Строка.СрокИсполнения < СрокИсполненияКеш Тогда 
				СрокИсполненияКеш = Строка.СрокИсполнения;
			КонецЕсли;
			Если Строка.СрокИсполнения > СрокИсполненияОбщийКеш Тогда 
				СрокИсполненияОбщийКеш = Строка.СрокИсполнения;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Строка.СрокИсполнения) Тогда 
				ЕстьПустойСрок = Истина;
			КонецЕсли;	
		КонецЦикла;	
		Если СрокИсполненияКеш = '39990101' Тогда 
			СрокИсполненияКеш = '00010101';
		КонецЕсли;	
		Если ЕстьПустойСрок Тогда 
			СрокИсполненияОбщийКеш = '00010101';
		КонецЕсли;	
		
	КонецЕсли;	
	
	Возврат Новый Структура("СостояниеКонтроля,СрокИсполнения,СрокИсполненияОбщий", СостояниеКонтроля, СрокИсполненияКеш, СрокИсполненияОбщийКеш);
	
КонецФункции

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

КонецПроцедуры

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
КонецПроцедуры

// Обновляет состояние контроля в кэше документов.
//
// Параметры:
//  Предмет - СправочникСсылка.ВнутренниеДокументы
// СрокИсполнения - Дата - срок исполнения контроля
//
Процедура УстановитьСостояниеКонтроляВКеше(Предмет, СрокИсполнения) Экспорт
	
	Если Не ЗначениеЗаполнено(Предмет) Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИнтеграцияЗадач.ОбновитьСостояниеКонтроля(Предмет);
	
КонецПроцедуры

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеКэширующихДанных

// Обрабатывает обновление кэширующих данных.
// 
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса - Выборка из очереди обновления кэширующих данных:
//   * ОтметкаВремени - ОпределяемыйТип.ОтметкаВремени.
//   * ЗависимыйОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//   * ВлияющийОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//   * КлючВлияющихДанных - ЛюбаяСсылка.
//   * Автор - СправочникСсылка.Пользователи.
//   * ЗагрузкаОбработанныхДанныхИзДругойСистемы - Булево.
//   * ИзмененияВлияющихДанных - ХранилищеЗначения.
//   * Попыток - Число.
//   * ДатаКОбработке - Дата.
// 
Процедура ОбновитьКэширующиеДанные(Выборка) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ЗапросКонтроля = Новый Запрос(
			"ВЫБРАТЬ
			|	КонтрольИсполнители.Ссылка КАК Контроль
			|ИЗ
			|	Справочник.Контроль.Исполнители КАК КонтрольИсполнители
			|ГДЕ
			|	КонтрольИсполнители.Источник = &Источник");
		
		ЗапросКонтроля.УстановитьПараметр("Источник", Выборка.КлючВлияющихДанных);
		
		ВыборкаКонтроля = ЗапросКонтроля.Выполнить().Выбрать();
		Пока ВыборкаКонтроля.Следующий() Цикл
			
			КонтрольОбъект = ВыборкаКонтроля.Контроль.ПолучитьОбъект();
			
			Для Каждого СтрокаИсполнителя Из КонтрольОбъект.Исполнители Цикл
				
				Если СтрокаИсполнителя.Источник <> Выборка.КлючВлияющихДанных Тогда
					Продолжить;
				КонецЕсли;
				
				РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					СтрокаИсполнителя.Источник,
					"ДатаВыполнения, СостояниеУчастникаЗадачи");
				
				Если СтрокаИсполнителя.ДатаИсполнения <> РеквизитыДействия.ДатаВыполнения Тогда
					СтрокаИсполнителя.ДатаИсполнения = РеквизитыДействия.ДатаВыполнения;
				КонецЕсли;
				
				ВидСостояния = РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(
					РеквизитыДействия.СостояниеУчастникаЗадачи);
				ЭтоВыполненноеДействие = Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоВыполненноеДействие(
					ВидСостояния);
				Если СтрокаИсполнителя.Исполнено <> ЭтоВыполненноеДействие Тогда
					СтрокаИсполнителя.Исполнено = ЭтоВыполненноеДействие;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не КонтрольОбъект.Модифицированность() Тогда
				Продолжить;
			КонецЕсли;
			
			КонтрольОбъект.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли
