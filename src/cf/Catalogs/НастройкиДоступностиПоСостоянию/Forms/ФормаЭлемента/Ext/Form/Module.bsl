#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДляВсехВидовДокументов = Перечисления.ВариантыНастройкиДоступностиДляВидовДокументов.ДляВсехВидовДокументов;
	
	Поставляемый = Ложь;
	Если Не Объект.Ссылка.Пустая() Тогда 
		ОписаниеНастроекДоступности = Делопроизводство.ОписанияНачальногоЗаполненияНастроекДоступностиПоСостояниям();
		Для Каждого ОписаниеНастройки Из ОписаниеНастроекДоступности Цикл
			Если ОписаниеНастройки.Идентификатор = Строка(Объект.Ссылка.УникальныйИдентификатор()) Тогда 
				Поставляемый = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	Элементы.УстановитьСтандартныеНастройки.Видимость = Поставляемый;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не ЗначениеЗаполнено(Объект.ТипДокумента) Тогда 
			Объект.ТипДокумента = Перечисления.ТипыОбъектов.ДокументыПредприятия;
		КонецЕсли;	
		Если Не ЗначениеЗаполнено(Объект.ВариантНастройкиДляВидовДокументов) Тогда 
			Объект.ВариантНастройкиДляВидовДокументов = ДляВсехВидовДокументов;
		КонецЕсли;
		Если Объект.ИспользоватьДля.Количество() = 0 Тогда 
			НоваяСтрока = Объект.ИспользоватьДля.Добавить();
			НоваяСтрока.Участник = Справочники.РабочиеГруппы.ВсеПользователи;
		КонецЕсли;
	КонецЕсли;	
	НачальныйТипДокумента = Объект.ТипДокумента;
	
	Если Объект.ТипДокумента = Перечисления.ТипыОбъектов.ДокументыПредприятия Тогда 
		Элементы.НастройкиДоступностиПредставлениеПоляКоманды.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
	КонецЕсли;

	ЗаполнитьВидыДокументов(Объект.Ссылка);
	
	ЗаполнитьНастройкиДоступности();
	
	КоличествоВидов = ВидыДокументов.Количество();
	
	Если Объект.ВариантНастройкиДляВидовДокументов = ДляВсехВидовДокументов Тогда 
		Элементы.ВидыДокументов.Доступность = Ложь;
	КонецЕсли;
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПередЗакрытием(
		Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированность) Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
		Если НачальныйТипДокумента <> Объект.ТипДокумента И Объект.Предопределенный Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(	
				НСтр("ru = 'Нельзя изменить тип документа для предопределенной настройки доступности по состоянию.'"),,
				"Объект.ТипДокумента",,
				Отказ);
			Возврат;
		КонецЕсли;
		
		Если (НачальныйТипДокумента <> Объект.ТипДокумента) 
			И ВидыДокументов.Количество() > 0 
			И Не ПараметрыЗаписи.Свойство("ПоказанВопросОбИзмененияТипаДокумента") Тогда 
			
			ТекстВопроса = НСтр("ru = 'При изменении типа документа будут очищены назначенные виды документов.
				|Продолжить?'");
			ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеПоказаВопросаОбИзмененияТипаДокумента",
					ЭтотОбъект,
					ПараметрыЗаписи);
	
			ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;	
	
	КоличествоСтрок = Объект.ИспользоватьДля.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Строка = Объект.ИспользоватьДля[КоличествоСтрок - Инд];
		Если Не ЗначениеЗаполнено(Строка.Участник) Тогда 
			Объект.ИспользоватьДля.Удалить(Строка);
		КонецЕсли;	
	КонецЦикла;	
	
	КоличествоСтрок = ВидыДокументов.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Строка = ВидыДокументов[КоличествоСтрок - Инд];
		Если Не ЗначениеЗаполнено(Строка.ВидДокумента) Тогда 
			ВидыДокументов.Удалить(Строка);
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеПоказаВопросаОбИзмененияТипаДокумента(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда 
		Возврат;
	КонецЕсли;	
	
	ВидыДокументов.Очистить();

	ПараметрыЗаписи.Вставить("ПоказанВопросОбИзмененияТипаДокумента", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СохранитьНастройкиДоступности(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьВидыДокументов(ТекущийОбъект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	НачальныйТипДокумента = Объект.ТипДокумента;
	
	Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Изменение:'"),
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.ВариантНастройкиДляВидовДокументов = Перечисления.ВариантыНастройкиДоступностиДляВидовДокументов.ДляВыбранныхВидовДокументов Тогда 
		ПроверяемыеРеквизиты.Добавить("ВидыДокументов");
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВариантыНастройкиДоступностиДляВидовДокументовПриИзменении(Элемент)
	
	Если Объект.ВариантНастройкиДляВидовДокументов = ДляВсехВидовДокументов Тогда 
		
		Элементы.ВидыДокументов.Доступность = Ложь;
		ВидыДокументов.Очистить();
		КоличествоВидов = 0;
		
	Иначе
		Элементы.ВидыДокументов.Доступность = Истина;
	КонецЕсли;
	
	ОбновитьВидыДействий = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидДокументаПриИзменении(Элемент)
	
	УстановитьОтборВидыДействий();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидДействияПриИзменении(Элемент)
	
	УстановитьОтборВидыДействий();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.ГруппаДоступностьПолей И ОбновитьВидыДействий Тогда
		НастроитьДоступныеСостояния();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИспользоватьДля

&НаКлиенте
Процедура ИспользоватьДляОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Объект.ИспользоватьДля.Очистить();
		Для Каждого ВыбранныйАдресат Из ВыбранноеЗначение Цикл
			ИспользоватьДля = Объект.ИспользоватьДля.Добавить();
			ИспользоватьДля.Участник = ВыбранныйАдресат.Контакт;
		КонецЦикла;
	Иначе
		Элементы.ИспользоватьДля.ТекущиеДанные.Участник = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДляУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1); // выбор
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ОтображатьРоли", Истина);
	ПараметрыФормы.Вставить("ОтображатьАвтоподстановкиПоДокументам", Истина);
	ПараметрыФормы.Вставить("ВыбиратьКонтейнерыПользователей", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы",
		НСтр("ru = 'Выбор сотрудников для настроек доступности'"));
	
	ПараметрыФормы.Вставить("ВыбранныеАдресаты", Элементы.ИспользоватьДля.ТекущиеДанные.Участник);
		
	ОткрытьФорму("Справочник.АдреснаяКнига.ФормаСписка",
		ПараметрыФормы,
		Элементы.ИспользоватьДля,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДляУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СформироватьДанныеВыбораСервер(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДляУчастникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СотрудникиКлиент.ОбработкаВыбораКонтейнера(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка); 
		
	СотрудникиКлиент.СотрудникОбработкаВыбора(
		Элементы.ИспользоватьДля.ТекущиеДанные, "Участник", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВидыДокументов

&НаКлиенте
Процедура ВидыДокументовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	КоличествоВидов = ВидыДокументов.Количество();
	ОбновитьВидыДействий = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДокументовПослеУдаления(Элемент)
	
	КоличествоВидов = ВидыДокументов.Количество();
	ОбновитьВидыДействий = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДокументовВидДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяФормыВыбора = "Справочник.ВидыДокументов.ФормаВыбора";
	ПараметрыФормы = Новый Структура;
	ТекущиеДанные = Элементы.ВидыДокументов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные.ВидДокумента);
	КонецЕсли;
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
	
	Если ЗначениеЗаполнено(ИмяФормыВыбора) Тогда 
		ОткрытьФорму(ИмяФормыВыбора, ПараметрыФормы, Элемент);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиДоступности

&НаКлиенте
Процедура НастройкиДоступностиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = НастройкиДоступности.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.НастройкиДоступностиПредставлениеПоляКоманды Тогда 
		Возврат;
	КонецЕсли;	
	
	ИмяКолонки = СтрЗаменить(Поле.Имя, "НастройкиДоступности", "");
	
	Если ИмяКолонки = "ПустаяКолонка" Тогда
		Возврат;
	КонецЕсли;
	
	ДоступностьПоля = ТекущиеДанные[ИмяКолонки];
	
	ДоступностьПоля = ДоступностьПоля + 1;
	Если ДоступностьПоля > 2 Тогда 
		ДоступностьПоля = 0;
	КонецЕсли;	
	
	ТекущиеДанные[ИмяКолонки] = ДоступностьПоля;
	ТекущиеДанные[ИмяКолонки + "Строкой"] = ДоступностьСтрокой(ДоступностьПоля);
	
	Если ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		ТекущиеДанные.ПолучитьРодителя()[ИмяКолонки] = 0;
		ТекущиеДанные.ПолучитьРодителя()[ИмяКолонки + "Строкой"] = ДоступностьСтрокой(0);	
	КонецЕсли;
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		Для Каждого Строка Из ТекущиеДанные.ПолучитьЭлементы() Цикл
			Строка[ИмяКолонки] = ТекущиеДанные[ИмяКолонки];
			Строка[ИмяКолонки + "Строкой"] = ТекущиеДанные[ИмяКолонки + "Строкой"];
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиДоступностиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиДоступностиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьСтандартныеНастройки(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УстановитьСтандартныеНастройкиПродолжение",
		ЭтотОбъект);
	
	Если Объект.НастройкиДоступности.Количество() > 0 Тогда 
		
		ТекстВопроса = НСтр("ru = 'Настройки доступности будут заполнены стандартными значениями.
			|Продолжить?'");

		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ЗаписатьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДляПодобрать(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 2); // подбор
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ОтображатьРоли", Истина);
	ПараметрыФормы.Вставить("ОтображатьАвтоподстановкиПоДокументам", Истина);
	ПараметрыФормы.Вставить("ВыбиратьКонтейнерыПользователей", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы",
		НСтр("ru = 'Выбор сотрудников для настроек доступности'"));
	
	ВыбранныеАдресаты = Новый Массив;
	
	Для Каждого ИспользоватьДля Из Объект.ИспользоватьДля Цикл
		ВыбранныйАдресат = Новый Структура;
		ВыбранныйАдресат.Вставить("Контакт",
			ИспользоватьДля.Участник);
		ВыбранныеАдресаты.Добавить(ВыбранныйАдресат);
	КонецЦикла;
	
	ПараметрыФормы.Вставить("ВыбранныеАдресаты", ВыбранныеАдресаты);
		
	ОткрытьФорму("Справочник.АдреснаяКнига.ФормаСписка",
		ПараметрыФормы,
		Элементы.ИспользоватьДля,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВСтроке0(Команда)
	
	УстановитьВСтрокеНастройки(0);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВСтроке1(Команда)
	
	УстановитьВСтрокеНастройки(1);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВСтроке2(Команда)
	
	УстановитьВСтрокеНастройки(2);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВСтолбце0(Команда)
	
	УстановитьВСтолбцеНастройки(0);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВСтолбце1(Команда)
	
	УстановитьВСтолбцеНастройки(1);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВСтолбце2(Команда)
	
	УстановитьВСтолбцеНастройки(2);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьСтандартныеНастройкиПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ЗаполнитьНастройкиПоУмолчанию();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиДоступности()
	
	НастроитьДоступныеСостояния();
	
	НастройкиДоступностиДерево = РеквизитФормыВЗначение("НастройкиДоступности");
	НастройкиДоступностиДерево.Строки.Очистить();
	
	СостоянияПоУмолчанию = Новый Структура;
	Для Каждого Колонка Из НастройкиДоступностиДерево.Колонки Цикл
		Если СтрЗаканчиваетсяНа(Колонка.Имя, "Строкой") Тогда 
			СостоянияПоУмолчанию.Вставить(Колонка.Имя, ДоступностьСтрокой(0));
		КонецЕсли;
	КонецЦикла;
	
	Отборы = Новый Структура("ИмяПоляКоманды");
	Для Каждого Строка Из Делопроизводство.ПолучитьИменаПолейИКомандДляНастройкиДоступности() Цикл
		НоваяСтрока = НастройкиДоступностиДерево.Строки.Добавить();
		НоваяСтрока.ИмяПоляКоманды = Строка.ИмяПоляКоманды;
		НоваяСтрока.ПредставлениеПоляКоманды = Строка.ПредставлениеПоляКоманды;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СостоянияПоУмолчанию);
		
		Отборы.ИмяПоляКоманды = Строка.ИмяПоляКоманды;
		Для Каждого СтрокаНастройкиДоступности Из Объект.НастройкиДоступности.НайтиСтроки(Отборы) Цикл
			
			ПутьСостояния = ПутьСостоянияДокументов(СтрокаНастройкиДоступности.ВидДействия,
				СтрокаНастройкиДоступности.Состояние);
			Если ПутьСостояния <> Неопределено Тогда
				НоваяСтрока[ПутьСостояния] = СтрокаНастройкиДоступности.Доступность;
				НоваяСтрока[ПутьСостояния + "Строкой"] = ДоступностьСтрокой(СтрокаНастройкиДоступности.Доступность);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Строка.ИмяПоляКоманды = "ДопРеквизиты" Тогда
			// Разузлование по значениям доп.реквизитов.
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Наборы.Свойство КАК Свойство,
			|	Наборы.Наименование КАК Наименование
			|ИЗ
			|	(ВЫБРАТЬ
			|		Наборы.Свойство КАК Свойство,
			|		Наборы.Свойство.Наименование КАК Наименование
			|	ИЗ
			|		Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК Наборы
			|	ГДЕ
			|		Наборы.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ДокументыПредприятия)
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|	ВЫБРАТЬ
			|		Наборы.Свойство,
			|		Наборы.Свойство.Наименование
			|	ИЗ
			|		Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК Наборы
			|	ГДЕ
			|		Наборы.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ДокументыПредприятия)) КАК
			|		Наборы
			|УПОРЯДОЧИТЬ ПО
			|	Наименование");
			УстановитьПривилегированныйРежим(Истина);
			Выборка = Запрос.Выполнить().Выбрать();
			УстановитьПривилегированныйРежим(Ложь);
			
			Пока Выборка.Следующий() Цикл
				Подстрока = НоваяСтрока.Строки.Добавить();
				Подстрока.ИмяПоляКоманды = "Ad." + XMLСтрока(Выборка.Свойство);
				Подстрока.ПредставлениеПоляКоманды = Выборка.Наименование;
				ЗаполнитьЗначенияСвойств(Подстрока, НоваяСтрока, , "ИмяПоляКоманды,ПредставлениеПоляКоманды");
				
				Отборы.ИмяПоляКоманды = Подстрока.ИмяПоляКоманды;
				Для Каждого ДопСтрока Из Объект.НастройкиДоступности.НайтиСтроки(Отборы) Цикл
					
					ПутьСостояния = ПутьСостоянияДокументов(ДопСтрока.ВидДействия, ДопСтрока.Состояние);
					Если ПутьСостояния <> Неопределено Тогда
						Подстрока[ПутьСостояния] = ДопСтрока.Доступность;
						Подстрока[ПутьСостояния + "Строкой"] = ДоступностьСтрокой(ДопСтрока.Доступность);
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;			
					
		КонецЕсли;
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(НастройкиДоступностиДерево, "НастройкиДоступности");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьДоступныеСостояния()
	
	// Заполнение видов действий.
	СтарыеВидыДействий = Новый Массив;
	Для Каждого СтрокаВидДействия Из ВидыДействий Цикл
		Если Не ЗначениеЗаполнено(СтрокаВидДействия.ВидДействия) Тогда
			Продолжить;
		КонецЕсли;
		СтарыеВидыДействий.Добавить(СтрокаВидДействия.ВидДействия);
	КонецЦикла;
	
	Если Объект.ВариантНастройкиДляВидовДокументов = ДляВсехВидовДокументов Тогда
		НовыеВидыДействий = ДействияСервер.ВсеВидыДействий();
	Иначе
		ВыбранныеВидыДокументов = ВидыДокументов.Выгрузить().ВыгрузитьКолонку("ВидДокумента");
		НовыеВидыДействий = ДействияСервер.ДействующиеВидыДействийПоВидамОбъектов(ВыбранныеВидыДокументов);
	КонецЕсли;
	
	ВидыДействийКДобавлению = ОбщегоНазначенияКлиентСервер.РазностьМассивов(НовыеВидыДействий, СтарыеВидыДействий);
	ВидыДействиеКУдалению = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СтарыеВидыДействий, НовыеВидыДействий);
	СостоянияДокументовВидовДействий = ДействияСервер.СостоянияДокументовВидовДействий(ВидыДействийКДобавлению);
	
	// Заполнение видов действий.
	НомерВидаДействия = ?(ВидыДействий.Количество() = 0,
		1,
		ВидыДействий[ВидыДействий.Количество() - 1].НомерВидаДействия + 1);
	Для Каждого ВидДействия Из ВидыДействийКДобавлению Цикл
		
		СтрокаВидДействия = ВидыДействий.Добавить();
		СтрокаВидДействия.ВидДействия = ВидДействия;
		СтрокаВидДействия.НомерВидаДействия = НомерВидаДействия;
		СтрокаВидДействия.ПутьВидаДействия = "ВидДействия" + Формат(НомерВидаДействия, "ЧГ=0");
		
		// Заполнение состояний видов действий.
		НомерСостоянияДокументов = 1;
		СостоянияДокументов = СостоянияДокументовВидовДействий[СтрокаВидДействия.ВидДействия];
		Для Каждого СостояниеДокумента Из СостоянияДокументов Цикл
			СтрокаСостояниеДокументов = СтрокаВидДействия.СостоянияДокументов.Добавить();
			СтрокаСостояниеДокументов.СостояниеДокумента = СостояниеДокумента;
			СтрокаСостояниеДокументов.ПутьСостоянияДокумента =
				СтрокаВидДействия.ПутьВидаДействия
				+ "СостояниеДокумента"
				+ Формат(НомерСостоянияДокументов, "ЧГ=0");
			НомерСостоянияДокументов = НомерСостоянияДокументов + 1;
		КонецЦикла;
		
		НомерВидаДействия = НомерВидаДействия + 1;
		
	КонецЦикла;
	
	// Без вида действия - состояние "Проект".
	Если ВидДействияИСостояниеДокументов("БезВидаДействияСостояниеДокументовПроект") = Неопределено Тогда
		
		ВидыДействийКДобавлению.Вставить(0, Справочники.ВидыДействий.ПустаяСсылка());
		
		// Без вида действия.
		СтрокаВидДействия = ВидыДействий.Вставить(0);
		СтрокаВидДействия.ВидДействия = Справочники.ВидыДействий.ПустаяСсылка();
		СтрокаВидДействия.ПутьВидаДействия = "БезВидаДействия";
		
		// Состояние документа - Проект.
		СтрокаСостояниеДокументов = СтрокаВидДействия.СостоянияДокументов.Добавить();
		СтрокаСостояниеДокументов.СостояниеДокумента = Перечисления.СостоянияДокументов.Проект;
		СтрокаСостояниеДокументов.ПутьСостоянияДокумента =
			СтрокаВидДействия.ПутьВидаДействия + "СостояниеДокументовПроект";
		
	КонецЕсли;
	
	// Удаление элементов формы.
	Для Каждого ВидДействия Из ВидыДействиеКУдалению Цикл
		
		ПараметрыОтбора = Новый Структура("ВидДействия", ВидДействия);
		НайденныеСтроки = ВидыДействий.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаВидДействия = НайденныеСтроки[0];
		
		Если Не ЗначениеЗаполнено(СтрокаВидДействия.ВидДействия) Тогда
			Продолжить;
		КонецЕсли;
		
		// Элемент "Вид действия".
		ИмяЭлементаВидДействия = Элементы.НастройкиДоступности.Имя + "Группа" + СтрокаВидДействия.ПутьВидаДействия;
		Элементы.Удалить(Элементы[ИмяЭлементаВидДействия]);
		
	КонецЦикла;
	
	// Изменение реквизитов формы.
	ДобавляемыеРеквизиты = Новый Массив;
	УдаляемыеРеквизиты = Новый Массив;
	ИмяРеквизитаТаблицыНастройкиДоступности = "НастройкиДоступности";
	Для Каждого ВидДействия Из ВидыДействийКДобавлению Цикл
		
		ПараметрыОтбора = Новый Структура("ВидДействия", ВидДействия);
		НайденныеСтроки = ВидыДействий.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаВидДействия = НайденныеСтроки[0];
		
		Для Каждого СтрокаСостояниеДокументов Из СтрокаВидДействия.СостоянияДокументов Цикл
			
			ПутьСостоянияДокумента = СтрокаСостояниеДокументов.ПутьСостоянияДокумента;
			
			// Реквизит "Доступность".
			ИмяРеквизитаДоступность = ПутьСостоянияДокумента;
			РаботаСФормами.ДобавляемыеРеквизитыДобавить(
				ДобавляемыеРеквизиты,
				ИмяРеквизитаДоступность,
				Тип("Число"),
				ИмяРеквизитаТаблицыНастройкиДоступности);
			
			// Реквизит "Доступность строкой".
			ИмяРеквизитаДоступностьСтрокой = ПутьСостоянияДокумента + "Строкой";
			РаботаСФормами.ДобавляемыеРеквизитыДобавить(
				ДобавляемыеРеквизиты,
				ИмяРеквизитаДоступностьСтрокой,
				Тип("Строка"),
				ИмяРеквизитаТаблицыНастройкиДоступности);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ВидДействия Из ВидыДействиеКУдалению Цикл
		
		ПараметрыОтбора = Новый Структура("ВидДействия", ВидДействия);
		НайденныеСтроки = ВидыДействий.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаВидДействия = НайденныеСтроки[0];
		
		Для Каждого СтрокаСостояниеДокументов Из СтрокаВидДействия.СостоянияДокументов Цикл
			
			ПутьСостоянияДокумента = СтрокаСостояниеДокументов.ПутьСостоянияДокумента;
			
			// Реквизит "Доступность".
			ИмяРеквизитаДоступность = ПутьСостоянияДокумента;
			УдаляемыеРеквизиты.Добавить(ИмяРеквизитаТаблицыНастройкиДоступности + "." + ИмяРеквизитаДоступность);
			
			// Реквизит "Доступность строкой".
			ИмяРеквизитаДоступностьСтрокой = ПутьСостоянияДокумента + "Строкой";
			УдаляемыеРеквизиты.Добавить(ИмяРеквизитаТаблицыНастройкиДоступности + "." + ИмяРеквизитаДоступностьСтрокой);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	// Формирование элементов формы.
	Для Каждого ВидДействия Из ВидыДействийКДобавлению Цикл
		
		ПараметрыОтбора = Новый Структура("ВидДействия", ВидДействия);
		НайденныеСтроки = ВидыДействий.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаВидДействия = НайденныеСтроки[0];
		
		// Элемент "Вид действия".
		Если ЗначениеЗаполнено(СтрокаВидДействия.ВидДействия) Тогда
			ИмяЭлементаВидДействия = Элементы.НастройкиДоступности.Имя + "Группа" + СтрокаВидДействия.ПутьВидаДействия;
			ЭлементГруппаВидаДействия = СоздатьГруппуКолонок(
				Элементы,
				ИмяЭлементаВидДействия,
				Элементы.НастройкиДоступности,
				Элементы.НастройкиДоступностиПустаяКолонка);
			ЭлементГруппаВидаДействия.Заголовок = СтрокаВидДействия.ВидДействия;
			РодительЭлементаСостояние = ЭлементГруппаВидаДействия;
			ВставитьПередЭлементСостояние = Неопределено;
		Иначе
			РодительЭлементаСостояние = Элементы.НастройкиДоступности;
			ВставитьПередЭлементСостояние = Элементы.НастройкиДоступностиПустаяКолонка;
		КонецЕсли;
		
		Для Каждого СтрокаСостояниеДокументов Из СтрокаВидДействия.СостоянияДокументов Цикл
			
			ПутьСостоянияДокумента = СтрокаСостояниеДокументов.ПутьСостоянияДокумента;
			
			// Элемент "Состояние".
			ИмяЭлементаСостояние = Элементы.НастройкиДоступности.Имя + ПутьСостоянияДокумента;
			ПутьКДаннымЭлементСостояние = "НастройкиДоступности." + ПутьСостоянияДокумента + "Строкой";
			ЭлементСостояние = СоздатьПолеВвода(
				Элементы,
				ИмяЭлементаСостояние,
				РодительЭлементаСостояние,
				ПутьКДаннымЭлементСостояние,
				ВставитьПередЭлементСостояние);
			ЭлементСостояние.Заголовок = СтрокаСостояниеДокументов.СостояниеДокумента;
			ЭлементСостояние.Ширина = СтрДлина(ЭлементСостояние.Заголовок) + 1;
			ЭлементСостояние.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
			ЭлементСостояние.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
			ЭлементСостояние.РастягиватьПоГоризонтали = Ложь;
			ЭлементСостояние.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
			ЭлементСостояние.Шрифт = Новый Шрифт(, 12, Истина); //@skip-check new-font
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Удаление старых видов действий.
	Для Каждого ВидДействия Из ВидыДействиеКУдалению Цикл
		
		ПараметрыОтбора = Новый Структура("ВидДействия", ВидДействия);
		НайденныеСтроки = ВидыДействий.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаВидДействия = НайденныеСтроки[0];
		
		ВидыДействий.Удалить(СтрокаВидДействия);
		
	КонецЦикла;
	
	// Формирование условного оформления.
	УстановитьУсловноеОформление();
	
	// Формирование представления данных.
	ЗаполнитьДоступностьСтрокой();
	
	// Настройка отбора "Вид документа".
	НастроитьОтборВидДокумента();
	
	// Настройка отбора "Вид действия".
	НастроитьОтборВидДействия();
	
	// Установка отбора "Виды действий".
	УстановитьОтборВидыДействий();
	
	ОбновитьВидыДействий = Ложь;

КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиДоступности(ТекущийОбъект)
	
	ТекущийОбъект.НастройкиДоступности.Очистить();
	
	НастройкиДоступностиДерево = РеквизитФормыВЗначение("НастройкиДоступности");
	
	Для Каждого Строка Из НастройкиДоступностиДерево.Строки Цикл

		Для Каждого Колонка Из НастройкиДоступностиДерево.Колонки Цикл
			
			Если Строка[Колонка.Имя] = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ВидДействияИСостояниеДокумента = ВидДействияИСостояниеДокументов(Колонка.Имя);
			Если ВидДействияИСостояниеДокумента = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТекущийОбъект.НастройкиДоступности.Добавить();
			НоваяСтрока.ИмяПоляКоманды = Строка.ИмяПоляКоманды;
			НоваяСтрока.Доступность = Строка[Колонка.Имя];
			НоваяСтрока.ВидДействия = ВидДействияИСостояниеДокумента.ВидДействия;
			НоваяСтрока.Состояние = ВидДействияИСостояниеДокумента.СостояниеДокумента;
			
		КонецЦикла;

		Для Каждого Подстрока Из Строка.Строки Цикл
			
			Для Каждого Колонка Из НастройкиДоступностиДерево.Колонки Цикл
				
				Если Подстрока[Колонка.Имя] = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ВидДействияИСостояниеДокумента = ВидДействияИСостояниеДокументов(Колонка.Имя);
				Если ВидДействияИСостояниеДокумента = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ТекущийОбъект.НастройкиДоступности.Добавить();
				НоваяСтрока.ИмяПоляКоманды = Подстрока.ИмяПоляКоманды;
				НоваяСтрока.Доступность = Подстрока[Колонка.Имя];
				НоваяСтрока.ВидДействия = ВидДействияИСостояниеДокумента.ВидДействия;
				НоваяСтрока.Состояние = ВидДействияИСостояниеДокумента.СостояниеДокумента;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьНастройкиПоУмолчанию()
	
	Объект.НастройкиДоступности.Очистить();
	
	ТаблНастройкиДоступности = Неопределено;
	
	ОписаниеНастроекДоступности = Делопроизводство.ОписанияНачальногоЗаполненияНастроекДоступностиПоСостояниям();
	Для Каждого ОписаниеНастройки Из ОписаниеНастроекДоступности Цикл
		Если ОписаниеНастройки.Идентификатор = Строка(Объект.Ссылка.УникальныйИдентификатор()) Тогда 
			
			ТаблНастройкиДоступности = Делопроизводство.ПолучитьНастройкиДоступностиПоУмолчанию(
				Объект.ТипДокумента, ОписаниеНастройки.Роль);
			
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Если ТаблНастройкиДоступности = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
		
	Объект.НастройкиДоступности.Загрузить(ТаблНастройкиДоступности);
	
	ЗаполнитьНастройкиДоступности();
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьВидыДокументов(Ссылка)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда 
		Возврат;
	КонецЕсли;	
	
	НаборЗаписей = РегистрыСведений.НастройкиДоступностиДляВидовДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НастройкаДоступностиПоСостоянию.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	ВидыДокументов.Очистить();
	Для Каждого Строка Из НаборЗаписей Цикл
		НоваяСтрока = ВидыДокументов.Добавить();
		НоваяСтрока.ВидДокумента = Строка.ВидДокумента;
	КонецЦикла;	
	
КонецПроцедуры	
	
&НаСервере
Процедура ЗаписатьВидыДокументов(Ссылка)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда 
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.НастройкиДоступностиДляВидовДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НастройкаДоступностиПоСостоянию.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	ТаблВидыДокументов = РеквизитФормыВЗначение("ВидыДокументов");
	Для Каждого Строка Из ТаблВидыДокументов Цикл
		НоваяСтрока = НаборЗаписей.Добавить();
		НоваяСтрока.ВидДокумента = Строка.ВидДокумента;
		НоваяСтрока.НастройкаДоступностиПоСостоянию = Ссылка;
	КонецЦикла;	
	
	НаборЗаписей.Записать();
	
КонецПроцедуры		

&НаСервере
Функция СформироватьДанныеВыбораСервер(Текст)
	
	ДополнениеТипа = Новый ОписаниеТипов(
		"СправочникСсылка.АвтоподстановкиДляОбъектов, СправочникСсылка.ПолныеРоли,
		|СправочникСсылка.СтруктураПредприятия, СправочникСсылка.РабочиеГруппы,
		|СправочникСсылка.Проекты");
	Возврат СотрудникиВызовСервера.СформироватьДанныеВыбора(
		Текст,
		ДополнениеТипа,
		ПредопределенноеЗначение("Перечисление.ТипыОбъектов.ДокументыПредприятия"));
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДоступностьСтрокой(Доступность)
	
	Если Доступность = 0 Тогда
		Возврат НСтр("ru = '●'");
	ИначеЕсли Доступность = 1 Тогда
		Возврат НСтр("ru = '✔'");
	ИначеЕсли Доступность = 2 Тогда
		Возврат НСтр("ru = '✘'");
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформлениеФормы = УсловноеОформление;
	УсловноеОформлениеФормы.Элементы.Очистить();
	ЦветКрасный = Метаданные.ЭлементыСтиля.ЗапрещенноеПравоДоступа.Значение;
	ЦветЗеленый = Метаданные.ЭлементыСтиля.РазрешенноеПравоДоступаЦвет.Значение;
	ЦветСерый = Метаданные.ЭлементыСтиля.НеназначенноеПравоДоступаЦвет.Значение;
	ШрифтОбычный = Новый Шрифт(, , );
	
	Для Каждого ПутьСостоянияДокумента Из ПутиСостоянийДокументов() Цикл
		
		ЭлементУсловногоОформления = УсловноеОформлениеФормы.Элементы.Добавить();
		ЭлементУсловногоОформления.Использование = Истина;
		
		ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиДоступности." + ПутьСостоянияДокумента);
		ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораДанных.ПравоеЗначение = 1;
		ЭлементОтбораДанных.Использование = Истина;
		
		ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
		ЭлементЦветаОформления.Значение = ЦветЗеленый; 
		ЭлементЦветаОформления.Использование = Истина;
		
		Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("НастройкиДоступности" + ПутьСостоянияДокумента);
		
		ЭлементУсловногоОформления = УсловноеОформлениеФормы.Элементы.Добавить();
		ЭлементУсловногоОформления.Использование = Истина;
		
		ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиДоступности." + ПутьСостоянияДокумента);
		ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораДанных.ПравоеЗначение = 2;
		ЭлементОтбораДанных.Использование = Истина;
		
		ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
		ЭлементЦветаОформления.Значение = ЦветКрасный; 
		ЭлементЦветаОформления.Использование = Истина;
		
		Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("НастройкиДоступности" + ПутьСостоянияДокумента);
		
		
		ЭлементУсловногоОформления = УсловноеОформлениеФормы.Элементы.Добавить();
		ЭлементУсловногоОформления.Использование = Истина;
		
		ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиДоступности." + ПутьСостоянияДокумента);
		ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораДанных.ПравоеЗначение = 0;
		ЭлементОтбораДанных.Использование = Истина;
		
		ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
		ЭлементЦветаОформления.Значение = ЦветСерый; 
		ЭлементЦветаОформления.Использование = Истина;
		
		ЭлементШрифтОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Font");
		ЭлементШрифтОформления.Значение = ШрифтОбычный; 
		ЭлементШрифтОформления.Использование = Истина;
		
		Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("НастройкиДоступности" + ПутьСостоянияДокумента);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть()
	
	ПараметрыЗаписи = Новый Структура();
	ПараметрыЗаписи.Вставить("Закрыть", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьИЗакрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ВидДействияИСостояниеДокументов(ПутьСостоянияДокумента)
	
	ВидДействияИСостояниеДокументов = Неопределено;
	Для Каждого СтрокаВидДействия Из ВидыДействий Цикл
		
		НайденныеСтроки = СтрокаВидДействия.СостоянияДокументов.НайтиСтроки(
			Новый Структура("ПутьСостоянияДокумента", ПутьСостоянияДокумента));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
		
			ВидДействияИСостояниеДокументов = Новый Структура;
			ВидДействияИСостояниеДокументов.Вставить("ВидДействия", СтрокаВидДействия.ВидДействия);
			ВидДействияИСостояниеДокументов.Вставить("СостояниеДокумента", НайденныеСтроки[0].СостояниеДокумента);
			
			Прервать;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВидДействияИСостояниеДокументов;
	
КонецФункции

&НаСервере
Функция СоздатьПолеВвода(Элементы, Имя, Родитель, ПутьКДанным, ВставитьПередЭлементом = Неопределено)
	
	СозданныйЭлемент = Элементы.Вставить(Имя, Тип("ПолеФормы"), Родитель, ВставитьПередЭлементом);
	СозданныйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	СозданныйЭлемент.ПутьКДанным = ПутьКДанным;
	
	Возврат СозданныйЭлемент;
	
КонецФункции

&НаСервере
Функция СоздатьГруппуКолонок(Элементы, Имя, Родитель, ВставитьПередЭлементом = Неопределено)
	
	СозданныйЭлемент = Элементы.Вставить(Имя, Тип("ГруппаФормы"), Родитель, ВставитьПередЭлементом);
	СозданныйЭлемент.Вид = ВидГруппыФормы.ГруппаКолонок;
	СозданныйЭлемент.Группировка = ГруппировкаКолонок.Горизонтальная;
	СозданныйЭлемент.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
	СозданныйЭлемент.ОтображатьВШапке = Истина;
	
	Возврат СозданныйЭлемент;
	
КонецФункции

&НаСервере
Функция ПутиСостоянийДокументов()
	
	ПутиСостоянийДокументов = Новый Массив;
	Для Каждого СтрокаВидДействия Из ВидыДействий Цикл
		Для Каждого СтрокаСостояниеДокументов Из СтрокаВидДействия.СостоянияДокументов Цикл
			ПутиСостоянийДокументов.Добавить(СтрокаСостояниеДокументов.ПутьСостоянияДокумента);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ПутиСостоянийДокументов;
	
КонецФункции

&НаСервере
Функция ПутьСостоянияДокументов(Знач ВидДействия, СостояниеДокумента)
	
	ПутьСостоянияДокумента = Неопределено;
	
	Если Не ЗначениеЗаполнено(ВидДействия) Тогда
		// Найдем первый подходящий под состояние путь состояния и положим настройки туда
		Для Каждого СтрокаВида Из ВидыДействий Цикл
			Для Каждого СтрокаСостояния Из СтрокаВида.СостоянияДокументов Цикл
				
				Если СтрокаСостояния.СостояниеДокумента = СостояниеДокумента Тогда
					Возврат СтрокаСостояния.ПутьСостоянияДокумента;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ВидДействия", ВидДействия);
	НайденныеСтрокиВидовДействий = ВидыДействий.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтрокиВидовДействий.Количество() = 0 Тогда
		Возврат ПутьСостоянияДокумента;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("СостояниеДокумента", СостояниеДокумента);
	НайденныеСтрокиСостоянийДокументов = 
		НайденныеСтрокиВидовДействий[0].СостоянияДокументов.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтрокиСостоянийДокументов.Количество() = 0 Тогда
		Возврат ПутьСостоянияДокумента;
	КонецЕсли;
	
	ПутьСостоянияДокумента = НайденныеСтрокиСостоянийДокументов[0].ПутьСостоянияДокумента;
	
	Возврат ПутьСостоянияДокумента;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДоступностьСтрокой()
	
	Для Каждого СтрокаНастройкиДоступности Из НастройкиДоступности.ПолучитьЭлементы() Цикл
		Для Каждого ПутьСостоянияДокумента Из ПутиСостоянийДокументов() Цикл
			СтрокаНастройкиДоступности[ПутьСостоянияДокумента + "Строкой"] =
				ДоступностьСтрокой(СтрокаНастройкиДоступности[ПутьСостоянияДокумента]);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтборВидДокумента()
	
	ОтборВидДокумента = ?(Параметры.Свойство("ВидДокумента") И ЗначениеЗаполнено(Параметры.ВидДокумента),
		Параметры.ВидДокумента, Справочники.ВидыДокументов.ПустаяСсылка());
		
	Если Объект.ВариантНастройкиДляВидовДокументов = Перечисления.ВариантыНастройкиДоступностиДляВидовДокументов.ДляВсехВидовДокументов Тогда
		Элементы.ОтборВидДокумента.РежимВыбораИзСписка = Ложь;
		Элементы.ОтборВидДокумента.СписокВыбора.Очистить();
	ИначеЕсли Объект.ВариантНастройкиДляВидовДокументов = Перечисления.ВариантыНастройкиДоступностиДляВидовДокументов.ДляВыбранныхВидовДокументов Тогда
		Элементы.ОтборВидДокумента.РежимВыбораИзСписка = Истина;
		Элементы.ОтборВидДокумента.СписокВыбора.ЗагрузитьЗначения(ВидыДокументов.Выгрузить().ВыгрузитьКолонку("ВидДокумента"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтборВидДействия()
	
	ОтборВидДействия = ?(Параметры.Свойство("ВидДействия") И ЗначениеЗаполнено(Параметры.ВидДействия),
		Параметры.ВидДействия,
		Справочники.ВидыДействий.ПустаяСсылка());
	НастроитьОтборВидДействияСписокВыбора();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтборВидДействияСписокВыбора(ДоступныеВидыДействий = Неопределено)
	
	// Определение видов действий отбора.
	Если ДоступныеВидыДействий = Неопределено Тогда
		ВидыДействийОтбора = ДоступныеВидыДействий();
	Иначе
		ВидыДействийОтбора = ДоступныеВидыДействий;
	КонецЕсли;
	
	// Если отбор вида действия выходит за пределы допустимых видов действий - сбрасываем его.
	Если ЗначениеЗаполнено(ОтборВидДокумента)
		И ЗначениеЗаполнено(ОтборВидДействия)
		И ВидыДействийОтбора.Найти(ОтборВидДействия) = Неопределено Тогда
		ОтборВидДействия = Неопределено;
	КонецЕсли;
	
	// Настройка значений отбора вида действия.
	Элементы.ОтборВидДействия.СписокВыбора.Очистить();
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыДействий.Ссылка КАК Ссылка,
		|	ВидыДействий.Представление КАК Представление,
		|	ВидыДействий.Неактуальный КАК Неактуальный
		|ИЗ
		|	Справочник.ВидыДействий КАК ВидыДействий
		|ГДЕ
		|	ВидыДействий.Ссылка В (&ВидыДействийОтбора)
		|	И НЕ ВидыДействий.ЭтоГруппа");
	Запрос.УстановитьПараметр("ВидыДействийОтбора", ВидыДействийОтбора);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПредставлениеЭлементаОтбора = Выборка.Представление;
		Если Выборка.Неактуальный Тогда
			ПредставлениеЭлементаОтбора = ПредставлениеЭлементаОтбора + 
				НСтр("ru = ' (неактуальный)'");
		КонецЕсли;
		Элементы.ОтборВидДействия.СписокВыбора.Добавить(Выборка.Ссылка, ПредставлениеЭлементаОтбора);
	КонецЦикла;

	Элементы.ОтборВидДействия.СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаСервере
Функция ДоступныеВидыДействий()
	
	ДоступныеВидыДействий = ВидыДействий.Выгрузить().ВыгрузитьКолонку("ВидДействия");
	Если ЗначениеЗаполнено(ОтборВидДокумента) Тогда
		ВидыДействийПоВидуДокумента = ДействияСервер.ДействующиеВидыДействийПоВидамОбъектов(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОтборВидДокумента));
		ДоступныеВидыДействий = ОбщегоНазначенияДокументооборотКлиентСервер.ПересечениеМассивов(
			ДоступныеВидыДействий,
			ВидыДействийПоВидуДокумента);
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ДоступныеВидыДействий,
		Справочники.ВидыДействий.ПустаяСсылка());
	
	Возврат ДоступныеВидыДействий;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборВидыДействий()
	
	ДоступныеВидыДействий = ДоступныеВидыДействий();
	НастроитьОтборВидДействияСписокВыбора(ДоступныеВидыДействий);
	Если ЗначениеЗаполнено(ОтборВидДействия) Тогда
		ОтборВидыДействий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОтборВидДействия);
	ИначеЕсли ЗначениеЗаполнено(ОтборВидДокумента) Тогда
		ОтборВидыДействий = ДоступныеВидыДействий;
		ОтборВидыДействий.Добавить(Справочники.ВидыДействий.ПустаяСсылка());
	Иначе
		ОтборВидыДействий = Неопределено;
	КонецЕсли;
	
	// Обновление видимости колонок состояний действий.
	ВидныВсеВидыДействий = (ОтборВидыДействий = Неопределено);
	Для Каждого СтрокаВидДействия Из ВидыДействий Цикл
		ВидДействияВиден = ВидныВсеВидыДействий
			Или ОтборВидыДействий.Найти(СтрокаВидДействия.ВидДействия) <> Неопределено;
		Для Каждого СтрокаСостояниеДокументов Из СтрокаВидДействия.СостоянияДокументов Цикл
			ИмяЭлемента = "НастройкиДоступности" + СтрокаСостояниеДокументов.ПутьСостоянияДокумента;
			Элементы[ИмяЭлемента].Видимость = ВидДействияВиден;
		КонецЦикла;
	КонецЦикла;
	
	// Настройка отображения отборов.
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.ОтборВидДокумента, ОтборВидДокумента);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.ОтборВидДействия, ОтборВидДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиСтрокуВДеревеПоИмениПоляКоманды(КоллекцияОдногоУровня, ИскомаяСтрока, Индекс) Экспорт
	
	Если ТипЗнч(Индекс) = Тип("Число") И Индекс > -1 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаКоллекции Из КоллекцияОдногоУровня Цикл
		Если СтрНайти(СтрокаКоллекции.ИмяПоляКоманды, ИскомаяСтрока) > 0 Тогда
			Индекс = СтрокаКоллекции.ПолучитьИдентификатор();
		Иначе
			НайтиСтрокуВДеревеПоИмениПоляКоманды(СтрокаКоллекции.ПолучитьЭлементы(), ИскомаяСтрока, Индекс);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВСтолбцеНастройки(ДоступностьПоля)
	
	ТекущиеДанные = Элементы.НастройкиДоступности.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Поле = Элементы.НастройкиДоступности.ТекущийЭлемент;
	Если Поле = Элементы.НастройкиДоступностиПредставлениеПоляКоманды Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяКолонки = СтрЗаменить(Поле.Имя, "НастройкиДоступности", "");
	Если ИмяКолонки = "ПустаяКолонка" Тогда
		Возврат;
	КонецЕсли;
	
	ДоступностьПоляСтрокой = ДоступностьСтрокой(ДоступностьПоля);
	
	Для Каждого СтрНастройки Из НастройкиДоступности.ПолучитьЭлементы() Цикл
		СтрНастройки[ИмяКолонки] = ДоступностьПоля;
		СтрНастройки[ИмяКолонки + "Строкой"] = ДоступностьПоляСтрокой;
		
		Если СтрНастройки.ПолучитьРодителя() <> Неопределено Тогда
			СтрНастройки.ПолучитьРодителя()[ИмяКолонки] = 0;
			СтрНастройки.ПолучитьРодителя()[ИмяКолонки + "Строкой"] = ДоступностьПоляСтрокой;
		КонецЕсли;
		Если СтрНастройки.ПолучитьЭлементы().Количество() Тогда
			Для Каждого Строка Из СтрНастройки.ПолучитьЭлементы() Цикл
				Строка[ИмяКолонки] = СтрНастройки[ИмяКолонки];
				Строка[ИмяКолонки + "Строкой"] = СтрНастройки[ИмяКолонки + "Строкой"];
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВСтрокеНастройки(ДоступностьПоля)
	
	ТекущиеДанные = Элементы.НастройкиДоступности.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДоступностьПоляСтрокой = ДоступностьСтрокой(ДоступностьПоля);
	ТекущееИмяПоляКоманды = ТекущиеДанные.ИмяПоляКоманды;
	МассивИменКоманд = Новый Массив;
	Для Каждого ТекСтрока Из Элементы.НастройкиДоступности.ВыделенныеСтроки Цикл 
		МассивИменКоманд.Добавить(НастройкиДоступности.НайтиПоИдентификатору(ТекСтрока).ИмяПоляКоманды);
	КонецЦикла;
	УстановитьСтрокуНаСервере(МассивИменКоманд, ДоступностьПоля, ДоступностьПоляСтрокой);
	
	Индекс = -1;
	НайтиСтрокуВДеревеПоИмениПоляКоманды(
		НастройкиДоступности.ПолучитьЭлементы(), ТекущееИмяПоляКоманды, Индекс);
	Если Индекс > -1 Тогда
		Элементы.НастройкиДоступности.ТекущаяСтрока = Индекс;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтрокуНаСервере(Знач МассивИменКоманд, Знач ДоступностьПоля, Знач ДоступностьПоляСтрокой)
	
	НастройкиДоступностиДерево = РеквизитФормыВЗначение("НастройкиДоступности");
	
	Для Каждого ИмяПоляКоманды Из МассивИменКоманд Цикл
		ТекущиеСтрокиДерева = НастройкиДоступностиДерево.Строки.НайтиСтроки(
			Новый Структура("ИмяПоляКоманды", ИмяПоляКоманды), Истина);
		Если ТекущиеСтрокиДерева.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПоиска = "Строкой";
		Для Каждого ТекущаяСтрокаДерева Из ТекущиеСтрокиДерева Цикл
			Для Каждого Колонка Из НастройкиДоступностиДерево.Колонки Цикл
				Если СтрНайти(Колонка.Имя, "СостояниеДокумент") = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				// Скрытые видимостью строки пропускаем
				ИмяЭлемента = "НастройкиДоступности" 
					+ ?(Прав(Колонка.Имя, 7) = СтрокаПоиска, Лев(Колонка.Имя, СтрДлина(Колонка.Имя) - 7), Колонка.Имя);
				Если Элементы[ИмяЭлемента].Видимость = Ложь Тогда
					Продолжить;
				КонецЕсли;
				
				Если Прав(Колонка.Имя, 7) = СтрокаПоиска Тогда
					ТекущаяСтрокаДерева[Колонка.Имя] = ДоступностьПоляСтрокой;
				Иначе
					ТекущаяСтрокаДерева[Колонка.Имя] = ДоступностьПоля;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(НастройкиДоступностиДерево, "НастройкиДоступности");
	
КонецПроцедуры

#КонецОбласти
