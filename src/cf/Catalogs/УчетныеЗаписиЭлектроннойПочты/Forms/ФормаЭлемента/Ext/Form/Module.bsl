///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыПередЗаписью;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ПараметрыОтбора = Новый Структура;
		
		Если Параметры.Свойство("Сотрудник") И ЗначениеЗаполнено(Параметры.Сотрудник) Тогда 
			Ответственный = Параметры.Сотрудник;
		Иначе 
			Ответственный = 
				Сотрудники.ОсновнойСотрудникПользователя(
				ПользователиКлиентСервер.ТекущийПользователь());
		КонецЕсли;
		
		ПараметрыОтбора.Вставить("Сотрудник", Ответственный); 
		НайденныеСтроки = Объект.ОтветственныеЗаОбработкуПисем.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Строка = Объект.ОтветственныеЗаОбработкуПисем.Добавить();
			Строка.Сотрудник = Ответственный;
		КонецЕсли;
		
		Объект.ИмяПользователя = Строка(Ответственный);
		
		ЗаполнитьНастройки();
		
	КонецЕсли;
	
	ВидимостьНастроекПочтовогоКлиента =
		Не Объект.Ссылка.Пустая()
		И Объект.ВариантИспользования = Перечисления.ВариантыИспользованияПочты.Встроенная;
	
	Элементы.СтраницаПапки.Доступность = ВидимостьНастроекПочтовогоКлиента;
	
	ПредставлениеАдреса = ПолучитьПредставлениеАдреса(Объект);
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПротоколРаботыСотрудников) Тогда
		Элементы.ФормаПротоколРаботы.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ИспользоватьДляОтправки = Истина;
		Объект.ИспользоватьДляПолучения = Истина;
	Иначе
		
		Если Не ЗначениеЗаполнено(Объект.ПользовательSMTP) Тогда
			Объект.ПользовательSMTP = Объект.Пользователь;
		КонецЕсли;		
		
	КонецЕсли;
	
	Элементы.СерверВходящейПочты.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Сервер %1'"), Объект.ПротоколВходящейПочты);
	
	УдалятьПисьмаССервера = Объект.ПериодХраненияСообщенийНаСервере > 0;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Пароли = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Объект.Ссылка, "Пароль, ПарольSMTP");
		ТокенДоступа = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Объект.Ссылка, "access_token");
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Не ЗначениеЗаполнено(Объект.ПротоколВходящейПочты) Тогда
			Объект.ПротоколВходящейПочты = "POP";
			
			Если Не ЗначениеЗаполнено(Пароли.ПарольSMTP) Тогда
				Пароли.ПарольSMTP = Пароли.Пароль;
				УстановитьПривилегированныйРежим(Истина);
				ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Объект.Ссылка, Пароли.ПарольSMTP, "ПарольSMTP");
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли;		
			
		КонецЕсли;	
		
		Пароль = ?(ЗначениеЗаполнено(Пароли.Пароль), ЭтотОбъект.УникальныйИдентификатор, "");
		ПарольSMTP = ?(ЗначениеЗаполнено(Пароли.ПарольSMTP), ЭтотОбъект.УникальныйИдентификатор, "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТокенДоступа) Тогда
		Элементы.ПолучитьТокен.Заголовок = НСтр("ru = 'Получить токен снова'");
	КонецЕсли;	
	
	ПротоколированиеРаботыСотрудников.ЗаписатьОткрытие(Объект.Ссылка);
	
	ОбновитьСвойстваЭлементовФормы();
	
	ПрочитатьКонстантыOAuth();
	
	Если Не РольДоступна("ПолныеПрава") Тогда
		Элементы.УзелОбмена.ТолькоПросмотр = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ПарольИзменен Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ТекущийОбъект.Ссылка, Пароль);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если ПарольSMTPИзменен Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(ТекущийОбъект.Ссылка, ПарольSMTP, "ПарольSMTP");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Пароль", ПроверкаПароля);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("УзелОбработки", ВыбранныйУзел);   
	
	Если ТекущийОбъект.ПротоколВходящейПочты = "IMAP" Тогда
		Если УдалятьПисьмаССервера Тогда
			Если ТекущийОбъект.ПериодХраненияСообщенийНаСервере > 7 Тогда
				ТекущийОбъект.ПериодХраненияСообщенийНаСервере = 7; // т.к. при получении берем за 7 дней  ПараметрыОтбора.Вставить("ПослеДатыОтправления", ТекущаяДата() - 7 * 86400);
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПротоколированиеРаботыСотрудников.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(Объект.Ссылка);
	
	// Создание папок почты при необходимости
	Если Объект.ВариантИспользования = Перечисления.ВариантыИспользованияПочты.Встроенная Тогда
		Если Не ЗначениеЗаполнено(ПапкаВходящие) 
			И Не ЗначениеЗаполнено(ПапкаИсходящие) 
			И Не ЗначениеЗаполнено(ПапкаОтправленные) 
			И Не ЗначениеЗаполнено(ПапкаЧерновики) 
			И Не ЗначениеЗаполнено(ПапкаКорзина) Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			
			// Создание корневой папки для учетной записи
			КорневаяПапка = Справочники.ПапкиПисем.СоздатьЭлемент();
			КорневаяПапка.ВидПапки = Перечисления.ВидыПапокПисем.Общая;
			КорневаяПапка.ВариантОтображенияКоличестваПисем =
				Справочники.ПапкиПисем.ПолучитьВариантОтображенияКоличестваПисемВПапкеПоУмолчанию(
					Перечисления.ВидыПапокПисем.Общая);
			КорневаяПапка.Наименование = Объект.Наименование;
			КорневаяПапка.Записать();
			
			СформироватьПраваДоступаКПапке(КорневаяПапка.Ссылка);
			
			// Создание предопределенных папок
			СоздатьПредопределеннуюПодпапку(КорневаяПапка.Ссылка, Перечисления.ВидыПапокПисем.Входящие);
			СоздатьПредопределеннуюПодпапку(КорневаяПапка.Ссылка, Перечисления.ВидыПапокПисем.Исходящие);
			СоздатьПредопределеннуюПодпапку(КорневаяПапка.Ссылка, Перечисления.ВидыПапокПисем.Отправленные);
			СоздатьПредопределеннуюПодпапку(КорневаяПапка.Ссылка, Перечисления.ВидыПапокПисем.Черновики);
			СоздатьПредопределеннуюПодпапку(КорневаяПапка.Ссылка, Перечисления.ВидыПапокПисем.Корзина);
			
			УстановитьПривилегированныйРежим(Ложь);
			
			// Перечитать информацию о папках
			ПолучитьПредопределенныеПапки(Объект.Ссылка);
			
		Иначе	
			
			// просто сохраним папки
			СохранитьПредопределеннуюПодпапку(ПапкаВходящие, Перечисления.ВидыПапокПисем.Входящие);
			СохранитьПредопределеннуюПодпапку(ПапкаИсходящие, Перечисления.ВидыПапокПисем.Исходящие);
			СохранитьПредопределеннуюПодпапку(ПапкаОтправленные, Перечисления.ВидыПапокПисем.Отправленные);
			СохранитьПредопределеннуюПодпапку(ПапкаЧерновики, Перечисления.ВидыПапокПисем.Черновики);
			СохранитьПредопределеннуюПодпапку(ПапкаКорзина, Перечисления.ВидыПапокПисем.Корзина);
			
		КонецЕсли;	
	КонецЕсли;	
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПолучитьПредопределенныеПапки(ТекущийОбъект);
	
	ОбновитьСвойстваЭлементовФормы();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьНастройки();
	
	УзелОбработки = КОДПовтИсп.УзелПредставлениеПоИдентификатору(Строка(ТекущийОбъект.УзелОбработки));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("УчетнаяЗаписьЭлектроннойПочтыСохранена", Объект.Ссылка);
	
	Если ПараметрыЗаписи.Свойство("ЗаписатьИЗакрыть") Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(Объект.ОтветственныеЗаОбработкуПисем, "Сотрудник");
	
	Если Не УдалятьПисьмаССервера Тогда
		Объект.ПериодХраненияСообщенийНаСервере = 0;
	КонецЕсли;
	
	// Проверка списка Ответственных на дубли
	Для каждого	Эл Из Объект.ОтветственныеЗаОбработкуПисем Цикл
		
		Для Индекс = Эл.НомерСтроки ПО Объект.ОтветственныеЗаОбработкуПисем.Количество() - 1 Цикл
			
			Если Эл.Сотрудник = Объект.ОтветственныеЗаОбработкуПисем[Индекс].Сотрудник Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Ответственный указан дважды.'"),
					,
					"Объект.ОтветственныеЗаОбработкуПисем[" + Индекс + "].Сотрудник",
					,
					Отказ);

				Отказ = Истина;
				
			КонецЕсли;	
					
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтветственныеЗаОбработкуПисемПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ОтветственныеЗаОбработкуПисем.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда
			ТекущиеДанные.Сотрудник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныеЗаОбработкуПисемПользовательПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОтветственныеЗаОбработкуПисем.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.ДобавлятьПриглашенияВКалендарь = Истина;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ОтветственныеЗаОбработкуПисемПользовательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ОтветственныеЗаОбработкуПисем.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор ответственного'"));
	
	ПараметрыФормы.Вставить("ВыбранныеАдресаты",
		Элементы.ОтветственныеЗаОбработкуПисем.ТекущиеДанные.Сотрудник);
	
	ОткрытьФорму("Справочник.АдреснаяКнига.ФормаСписка",
		ПараметрыФормы,
		Элементы.ОтветственныеЗаОбработкуПисемПользователь,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныеЗаОбработкуПисемПользовательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СотрудникиКлиент.ОбработкаВыбораКонтейнера(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УзелОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("Справочник.УзлыКОД.ФормаВыбора");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗавершенииВыбораУзла", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура;
	
	ОткрытьФорму("Справочник.УзлыКОД.ФормаВыбора", 
		ПараметрыОткрытия, , , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииВыбораУзла(Результат, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйУзел <> Результат
		И (ЗначениеЗаполнено(ВыбранныйУзел) Или ЗначениеЗаполнено(Результат)) Тогда
		ВыбранныйУзел = Результат;
		УзелОбработки = Строка(Результат);
		Модифицированность = Истина;         
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УзелОбменаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныеЗаОбработкуПисемПриИзменении(Элемент)
	ОбновитьУзел();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПрочитатьКонстантыOAuth()
	
	УстановитьПривилегированныйРежим(Истина);
	
	OAuth_redirection_uri = Константы.OAuth_redirection_uri.Получить();
	OAuthАвторизацияКлиент = Константы.OAuthАвторизацияКлиент.Получить();
	OAuthАвторизацияКлиентСекретныйКод = Константы.OAuthАвторизацияКлиентСекретныйКод.Получить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Функция СоздатьПредопределеннуюПодпапку(КорневаяПапка, ВидПапки)
	
	// Создание папки
	Папка = Справочники.ПапкиПисем.СоздатьЭлемент();
	Папка.Родитель = КорневаяПапка;
	Папка.ВидПапки = ВидПапки;
	Папка.ВариантОтображенияКоличестваПисем =
		Справочники.ПапкиПисем.ПолучитьВариантОтображенияКоличестваПисемВПапкеПоУмолчанию(ВидПапки);
	Папка.Наименование = Строка(ВидПапки);
	Папка.Записать();
	
	// Сохранение сведений о принадлежности созданной папке к учетной записи
	РегистрыСведений.ПапкиУчетныхЗаписей.УстановитьПапку(
		Объект.Ссылка,
		ВидПапки,
		Папка.Ссылка);
	
	Возврат Папка.Ссылка;
	
КонецФункции

&НаСервере
Процедура СохранитьПредопределеннуюПодпапку(Папка, ВидПапки)
	
	// Сохранение сведений о принадлежности созданной папке к учетной записи
	РегистрыСведений.ПапкиУчетныхЗаписей.УстановитьПапку(
		Объект.Ссылка,
		ВидПапки,
		Папка);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПраваДоступаКПапке(ПапкаСсылка)
	
	УстановитьПривилегированныйРежим(Истина);	
	
	ОписаниеПрав = РегистрыСведений.НастройкиПравОбъектов.Прочитать(ПапкаСсылка).Настройки;
	ОписаниеПрав.Очистить();
	
	// Добавление всех ответственных с полными правами
	Для каждого Эл Из Объект.ОтветственныеЗаОбработкуПисем Цикл
		
		Строка = ОписаниеПрав.Добавить();
		
		Строка.ВладелецНастройки = ПапкаСсылка;
		Строка.ЧтениеПапокИПисем = Истина;
		Строка.ДобавлениеПапокИПисем = Истина; 
		Строка.ИзменениеПапокИПисем = Истина;
		Строка.ИзменениеПапок = Истина;
		Строка.ПометкаУдаленияПапокИПисем = Истина;
		Строка.УправлениеПравами = Истина;
		Строка.НаследованиеРазрешено = Истина;
		Строка.НастройкаРодителя = Ложь;
		Строка.Пользователь = Эл.Сотрудник; 
		
	КонецЦикла;	
	
	РегистрыСведений.НастройкиПравОбъектов.Записать(ПапкаСсылка, ОписаниеПрав, Истина);	
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПредопределенныеПапки(ТекущийОбъект)
	
	ПапкаВходящие = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(
		ТекущийОбъект.Ссылка,
		Перечисления.ВидыПапокПисем.Входящие);
	
	ПапкаИсходящие = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(
		ТекущийОбъект.Ссылка,
		Перечисления.ВидыПапокПисем.Исходящие);
	
	ПапкаОтправленные = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(
		ТекущийОбъект.Ссылка,
		Перечисления.ВидыПапокПисем.Отправленные);
	
	ПапкаЧерновики = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(
		ТекущийОбъект.Ссылка,
		Перечисления.ВидыПапокПисем.Черновики);
	
	ПапкаКорзина = РегистрыСведений.ПапкиУчетныхЗаписей.ПолучитьПапку(
		ТекущийОбъект.Ссылка,
		Перечисления.ВидыПапокПисем.Корзина);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСвойстваЭлементовФормы()
	
	Если Объект.ВариантИспользования = Перечисления.ВариантыИспользованияПочты.Встроенная Тогда
		Элементы.СтраницаПапки.Доступность = Истина;
	Иначе
		Элементы.СтраницаПапки.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЭлектроннойПочтыПриИзменении(Элемент)
	
	Объект.АдресЭлектроннойПочты = СокрЛП(Объект.АдресЭлектроннойПочты);
	
	АдресИнфо = РаботаСоСтроками.РазложитьПредставлениеАдресаЭлектроннойПочты(Объект.АдресЭлектроннойПочты);
	НастройкиПочтовогоСервера = ПолучитьПредопределенныеНастройкиПочтовогоСервера(Объект.АдресЭлектроннойПочты);
	
	Если ЗначениеЗаполнено(НастройкиПочтовогоСервера) Тогда
		Если Не ЗначениеЗаполнено(Объект.СерверВходящейПочты)
			И НастройкиПочтовогоСервера.Свойство("СерверВходящейПочты")
			И ЗначениеЗаполнено(НастройкиПочтовогоСервера.СерверВходящейПочты) Тогда
			Объект.СерверВходящейПочты = НастройкиПочтовогоСервера.СерверВходящейПочты;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.СерверИсходящейПочты)
			И НастройкиПочтовогоСервера.Свойство("СерверИсходящейПочты")
			И ЗначениеЗаполнено(НастройкиПочтовогоСервера.СерверИсходящейПочты) Тогда
			Объект.СерверИсходящейПочты= НастройкиПочтовогоСервера.СерверИсходящейПочты;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.Пользователь)
			И НастройкиПочтовогоСервера.Свойство("Пользователь")
			И ЗначениеЗаполнено(НастройкиПочтовогоСервера.Пользователь) Тогда
			Объект.Пользователь = НастройкиПочтовогоСервера.Пользователь;
		КонецЕсли;
	Иначе
		Объект.Пользователь = АдресИнфо.Пользователь;
	КонецЕсли;
	
	Объект.Наименование = Объект.АдресЭлектроннойПочты;
	
	ОбновитьПредставлениеАдреса();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПредопределенныеНастройкиПочтовогоСервера(Адрес)
	
	АдресИнфо = РаботаСоСтроками.РазложитьПредставлениеАдресаЭлектроннойПочты(Адрес);
	
	Результат = Новый Структура;
	Если ВРег(АдресИнфо.Домен) = ВРег("mail.ru") Тогда
		Результат.Вставить("СерверВходящейПочты", "pop.mail.ru");
		Результат.Вставить("СерверИсходящейПочты", "smtp.mail.ru");
		Результат.Вставить("Пользователь", Адрес);
		Результат.Вставить("СпособPOP3Аутентификации", ПредопределенноеЗначение("Перечисление.СпособыPOP3Аутентификации.Обычная"));
		Результат.Вставить("SMTPАутентификация", ПредопределенноеЗначение("Перечисление.ВариантыSMTPАутентификации.АналогичноPOP3"));
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ИмяПользователяПриИзменении(Элемент)
	
	ОбновитьПредставлениеАдреса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеАдреса()
	
	ПредставлениеАдреса = ПолучитьПредставлениеАдреса(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеАдреса(Объект)
		
	ПредставлениеАдреса = РаботаСоСтроками.ПолучитьПредставлениеАдресаЭлектроннойПочты(Объект.ИмяПользователя, Объект.АдресЭлектроннойПочты);
		
	Возврат ПредставлениеАдреса;
	
КонецФункции

&НаКлиенте
Процедура ВариантИспользованияПриИзменении(Элемент)
	
	ОбновитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколРаботы(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектДанных", Объект.Ссылка);
		ОткрытьФорму("РегистрСведений.ПротоколРаботыСотрудников.Форма.ПротоколРаботы", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколПриИзменении(Элемент)
	
	Если Объект.ПротоколВходящейПочты = "IMAP" Тогда
		Если СтрНачинаетсяС(Объект.СерверВходящейПочты, "pop.") Тогда
			Объект.СерверВходящейПочты = "imap." + Сред(Объект.СерверВходящейПочты, 5);
		КонецЕсли
	Иначе
		Если ПустаяСтрока(Объект.ПротоколВходящейПочты) Тогда
			Объект.ПротоколВходящейПочты = "POP";
		КонецЕсли;
		Если СтрНачинаетсяС(Объект.СерверВходящейПочты, "imap.") Тогда
			Объект.СерверВходящейПочты = "pop." + Сред(Объект.СерверВходящейПочты, 6);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СерверВходящейПочты.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Сервер %1'"), Объект.ПротоколВходящейПочты);
	
	УстановитьПортВходящейПочты();
	УстановитьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура СерверВходящейПочтыПриИзменении(Элемент)
	Объект.СерверВходящейПочты = СокрЛП(НРег(Объект.СерверВходящейПочты));
КонецПроцедуры

&НаКлиенте
Процедура СерверИсходящейПочтыПриИзменении(Элемент)
	Объект.СерверИсходящейПочты = СокрЛП(НРег(Объект.СерверИсходящейПочты));
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗащищенноеСоединениеДляИсходящейПочтыПриИзменении(Элемент)
	УстановитьПортИсходящейПочты();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗащищенноеСоединениеДляВходящейПочтыПриИзменении(Элемент)
	УстановитьПортВходящейПочты();
КонецПроцедуры

&НаКлиенте
Процедура ОставлятьКопииПисемНаСервереПриИзменении(Элемент)
	УстановитьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура УдалятьПисьмаССервераПриИзменении(Элемент)
	УстановитьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПарольДляПолученияПисемПриИзменении(Элемент)
	ПарольИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПарольДляОтправкиПисемПриИзменении(Элемент)
	ПарольSMTPИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПортВходящейПочты()
	Если Объект.ПротоколВходящейПочты = "IMAP" Тогда
		Если Объект.ИспользоватьЗащищенноеСоединениеДляВходящейПочты Тогда
			Объект.ПортСервераВходящейПочты = 993;
		Иначе
			Объект.ПортСервераВходящейПочты = 143;
		КонецЕсли;
	Иначе
		Если Объект.ИспользоватьЗащищенноеСоединениеДляВходящейПочты Тогда
			Объект.ПортСервераВходящейПочты = 995;
		Иначе
			Объект.ПортСервераВходящейПочты = 110;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПортИсходящейПочты()
	Если Объект.ИспользоватьЗащищенноеСоединениеДляИсходящейПочты Тогда
		Объект.ПортСервераИсходящейПочты = 465;
	Иначе
		Объект.ПортСервераИсходящейПочты = 25;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемПодтверждениеПолучено(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Записать(Новый Структура("ЗаписатьИЗакрыть"));
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()
	
	ИспользуетсяПротоколPOP = Объект.ПротоколВходящейПочты = "POP";
	Элементы.POPПередSMTP.Видимость = ИспользуетсяПротоколPOP;
	
	Элементы.НастройкаПериодаХраненияПисем.Доступность = Объект.ОставлятьКопииСообщенийНаСервере;
	Элементы.ПериодХраненияСообщенийНаСервере.Доступность = УдалятьПисьмаССервера;
	
	ИспользуетсяПротоколIMAP = Объект.ПротоколВходящейПочты = "IMAP";
	Элементы.СохранятьКопиюВОтправленные.Видимость = ИспользуетсяПротоколIMAP;
	
	Элементы.ПарольДляОтправкиПисем.Видимость = Не Объект.ИспользоватьOauth;
	Элементы.ПарольДляПолученияПисем.Видимость = Не Объект.ИспользоватьOauth;
	
	Элементы.ГруппаТокен.Видимость = Объект.ИспользоватьOauth;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеПриИзменении(Элемент)
	Элементы.ФормаПроверитьНастройки.Доступность = Объект.ИспользоватьДляОтправки Или Объект.ИспользоватьДляПолучения;
КонецПроцедуры

&НаКлиенте
Процедура ПарольДляПолученияПисемИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	Элементы.ПарольДляПолученияПисем.КнопкаВыбора = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПарольДляПолученияПисемНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСПочтовымиСообщениямиКлиент.ПолеПароляНачалоВыбора(Элемент, Пароль, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникНастройки(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗавершенииНастройки", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Ключ", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("Перенастройка", Истина);
	ОткрытьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.Форма.ПомощникНастройкиУчетнойЗаписи", 
		ПараметрыОткрытия, , , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуНастроек()
	Если Модифицированность Тогда
		Записать(Новый Структура("ПроверитьНастройки"));
	Иначе
		РаботаСПочтовымиСообщениямиКлиент.ПроверитьНастройкиУчетнойЗаписи(Объект.Ссылка, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииНастройки(Результат, ДополнительныеПараметры) Экспорт
	
	Прочитать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройки()
	
	Перем Пароли;
	
	ДоступноПолучениеПисем = РаботаСПочтовымиСообщениямиСлужебный.НастройкиПодсистемы().ДоступноПолучениеПисем;
	//Элементы.ОставлятьПисьмаНаСервере.Видимость = Объект.ПротоколВходящейПочты = "POP" И ДоступноПолучениеПисем;
	
	Элементы.СерверВходящейПочты.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = 'Сервер %1'"), Объект.ПротоколВходящейПочты);
	
	УдалятьПисьмаССервера = Объект.ПериодХраненияСообщенийНаСервере > 0;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		УстановитьПривилегированныйРежим(Истина);
		Пароли = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Объект.Ссылка, "Пароль, ПарольSMTP");
		УстановитьПривилегированныйРежим(Ложь);
		Пароль = ?(ЗначениеЗаполнено(Пароли.Пароль), ЭтотОбъект.УникальныйИдентификатор, "");
		ПарольSMTP = ?(ЗначениеЗаполнено(Пароли.ПарольSMTP), ЭтотОбъект.УникальныйИдентификатор, "");
		
		Если Не Справочники.УчетныеЗаписиЭлектроннойПочты.ИзменениеРазрешено(Объект.Ссылка) Тогда
			ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ФормаЗаписатьИЗакрыть.Доступность = Не ТолькоПросмотр;
	
	ТребуетсяАвторизацияПриОтправкеПисем = ЗначениеЗаполнено(Объект.ПользовательSMTP) Или Объект.ТребуетсяВходНаСерверПередОтправкой;
	Элементы.АвторизацияПриОтправкеПисем.Доступность = ТребуетсяАвторизацияПриОтправкеПисем;
	
	ШифрованиеПриОтправкеПочты = ?(Объект.ИспользоватьЗащищенноеСоединениеДляИсходящейПочты, "SSL", "Авто");
	ШифрованиеПриПолученииПочты = ?(Объект.ИспользоватьЗащищенноеСоединениеДляВходящейПочты, "SSL", "Авто");
	
	СпособАвторизацииПриОтправкеПочты = ?(Объект.ТребуетсяВходНаСерверПередОтправкой, "POP", "SMTP");
	Элементы.ФормаПроверитьНастройки.Доступность = Объект.ИспользоватьДляОтправки Или Объект.ИспользоватьДляПолучения;
	Элементы.ФормаОткрытьПомощникНастройки.Доступность = Не Объект.Ссылка.Пустая() И Не ТолькоПросмотр;
	
	Элементы.ПарольДляПолученияПисем.КнопкаВыбора = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНастройки(Команда)
	ВыполнитьПроверкуНастроек();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьOauthПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТокен(Команда)
	
	Элементы.ГруппаПравоHtml.Видимость = Истина;
	ПодключитьОбработчикОжидания("ВыполнитьПолучениеТокена", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПолучениеТокена()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(OAuthАвторизацияКлиент) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Заполните параметры OAuth в настройках программы в разделе ""Почта"" '"));
		Возврат;
	КонецЕсли;	
	
	АдресПолный = "";
	
	Если РаботаСПочтовымиСообщениямиКлиентПереопределяемый.СформироватьАдресДляАвторизацииOAuth(
		АдресПолный, 
		Объект.СерверВходящейПочты,
		OAuthАвторизацияКлиент, OAuth_redirection_uri) Тогда
		
		ТекстHTML = АдресПолный;
		Возврат;
		
	КонецЕсли;	
	
	Успех = РаботаСПочтовымиСообщениямиКлиент.СформироватьАдресДляАвторизацииOAuth(
		АдресПолный, 
		Объект.СерверВходящейПочты,
		OAuthАвторизацияКлиент, OAuth_redirection_uri);
		
	Если Не Успех Тогда
		Возврат;
	КонецЕсли;	
	
	ТекстHTML = АдресПолный;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстHTMLДокументСформирован(Элемент)
	
	Если СтрНачинаетсяС(Элементы.ТекстHTML.Документ.URL, OAuth_redirection_uri) Тогда
		
		ОбрабатываемаяСтрока = Элементы.ТекстHTML.Документ.URL; 
		
	ИначеЕсли Элементы.ТекстHTML.Документ.URL = "about:blank"
		И СтрНайти(Элементы.ТекстHTML.Документ.body.innerText, OAuth_redirection_uri) <> 0 Тогда
		
		ОбрабатываемаяСтрока = Элементы.ТекстHTML.Документ.body.innerText;
		
	Иначе
		
		ОбрабатываемаяСтрока = "";
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбрабатываемаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	// выделим code
	// https://1c.ru/?code=996e4607a88073388aa615dc87e6951791e64b0b37363830&state=state123
	
	ПозицияCode = СтрНайти(ОбрабатываемаяСтрока, "code=");
	ПозицияКонца = СтрНайти(ОбрабатываемаяСтрока, "&", НаправлениеПоиска.СНачала, ПозицияCode + 1);
	
	ПозицияКонцаCode = ПозицияCode + СтрДлина("code=");
	СтрокаCode = Сред(ОбрабатываемаяСтрока, 
		ПозицияКонцаCode, ПозицияКонца - ПозицияКонцаCode);
		
	// тут можно очистить html
	ТекстHTML = "";
	
	ВыполнитьHTTPСоединение(СтрокаCode);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Токен доступа получен.'"));
	ПодключитьОбработчикОжидания("ЗакрытьПолеHtml", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПолеHtml()
	
	Элементы.ГруппаПравоHtml.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьHTTPСоединение(СтрокаCode)
	
	РаботаСПочтовымиСообщениями.ВыполнитьHTTPСоединение(СтрокаCode, ЭтаФорма,
		Объект.СерверВходящейПочты, Объект.СерверИсходящейПочты);
	
	ЗаписатьПараметрыТокена(refresh_token, ДействуетДо);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПараметрыТокена(refresh_token, ДействуетДо)
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Объект.Ссылка, 
		ТокенДоступа, "access_token");
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Объект.Ссылка, 
		refresh_token, "refresh_token");
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Объект.Ссылка, 
		ДействуетДо, "ДействуетДо");
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьУзел()
	
	Если Объект.ОтветственныеЗаОбработкуПисем.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	СотрудникиИУзлы = КОДПовтИсп.СотрудникиИУзлы(КОДСервер.ВариантыОтбораУзлов().ВсеУзлы);
	УникальныеУзлы = Новый Соответствие();
	
	УзелДляСотрНепустой = Неопределено;
	
	Для Каждого Стр Из Объект.ОтветственныеЗаОбработкуПисем Цикл
		
		УзлыСотрудника = СотрудникиИУзлы.Получить(Стр.Сотрудник);
		Если УзлыСотрудника = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого УзелДляСотр Из УзлыСотрудника Цикл
			УникальныеУзлы[УзелДляСотр] = 1;
			УзелДляСотрНепустой = УзелДляСотр;
		КонецЦикла;
		
	КонецЦикла;
	
	Если УникальныеУзлы.Количество() = 1 Тогда
		ВыбранныйУзел = УзелДляСотрНепустой;
		УзелОбработки = Строка(ВыбранныйУзел);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти
