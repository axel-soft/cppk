#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает текущую или создает новую обработку объекта.
//
// Параметры:
//  Предмет - ОпределяемыйТип.ПредметДействия.
//  СсылкаНового - СправочникСсылка.ОбработкиОбъектов - ссылка нового для создания
//  ИсточникДанных - СправочникССылка.ИсточникиДанных
//
// Возвращаемое значение:
//  СправочникСсылка.ОбработкиОбъектов
//
Функция НоваяИлиСуществующаяОбработкаОбъекта(
		Предмет, СсылкаНового = Неопределено, ИсточникДанных = Ложь) Экспорт 
	
	ОбработкаОбъекта = ОбработкаОбъекта(Предмет);
	Если Не ЗначениеЗаполнено(ОбработкаОбъекта) Тогда
		ОбработкаОбъекта = НоваяОбработкаОбъекта(Предмет, СсылкаНового, ИсточникДанных);
	КонецЕсли;
	
	Возврат ОбработкаОбъекта;
	
КонецФункции

// Создает и возвращает новую обработку объекта.
//
// Параметры:
//  Предмет - ОпределяемыйТип.ПредметДействия.
// СсылкаНового - СправочникСсылка.ОбработкиОбъектов - ссылка нового для создания
// ИсточникДанных - СправочникССылка.ИсточникиДанных 
//
// Возвращаемое значение:
//  СправочникСсылка.ОбработкиОбъектов
//
Функция НоваяОбработкаОбъекта(
	Предмет, СсылкаНового = Неопределено, ИсточникДанных = Неопределено) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	ОбработкаОбъект = СоздатьЭлемент();
	ОбработкаОбъект.Владелец = Предмет;
	ОбработкаОбъект.ДатаСоздания = ТекущаяДатаСеанса();
	ОбработкаОбъект.ИсточникДанных = ИсточникДанных;
	
	Если ЗначениеЗаполнено(СсылкаНового) Тогда
		ОбработкаОбъект.УстановитьСсылкуНового(СсылкаНового);
	КонецЕсли;	
	
	ОбработкаОбъект.Записать();
	
	Возврат ОбработкаОбъект.Ссылка;
	
КонецФункции

// Возвращает текущую, не помещенную в историю обработку объекта.
//
// Параметры:
//  Предмет - ОпределяемыйТип.ПредметДействия.
//
// Возвращаемое значение:
//  СправочникСсылка.ОбработкиОбъектов
//
Функция ОбработкаОбъекта(Предмет) Экспорт
	
	Если Не ЗначениеЗаполнено(Предмет) Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;
	
	Предметы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Предмет);
	ТекущиеОбработки = ТекущиеОбработки(Предметы);
	ТекущаяОбработка = ТекущиеОбработки.Получить(Предмет);
	
	Возврат ТекущаяОбработка;
	
КонецФункции

// Возвращает текущие, не помещенные в историю обработки объектов.
//
// Параметры:
//  Предметы - Массив из ОпределяемыйТип.ПредметДействия.
//
// Возвращаемое значение:
//  Соответствие - Обработки объектов.
//   * Ключ - ОпределяемыйТип.ПредметДействия.
//   * Значение - СправочникСсылка.ОбработкиОбъектов.
//  
Функция ТекущиеОбработки(Предметы) Экспорт
	
	ТекущиеОбработки = Новый Соответствие;
	Если Предметы.Количество() = 0 Тогда
		Возврат ТекущиеОбработки;
	КонецЕсли;
	
	Для Каждого Предмет Из Предметы Цикл
		ТекущиеОбработки.Вставить(Предмет, ПустаяСсылка());
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбработкиОбъектов.Ссылка КАК ТекущаяОбработка,
		|	ОбработкиОбъектов.Владелец КАК Предмет
		|ИЗ
		|	Справочник.ОбработкиОбъектов КАК ОбработкиОбъектов
		|ГДЕ
		|	ОбработкиОбъектов.Владелец В (&Предметы)
		|	И ОбработкиОбъектов.ПомещенаВИсторию = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("Предметы", Предметы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекущиеОбработки.Вставить(Выборка.Предмет, Выборка.ТекущаяОбработка);
	КонецЦикла;
	
	Возврат ТекущиеОбработки;
	
КонецФункции

// Вернет Истина, если по предмету есть активные обработки.
//
// Параметры:
//  Предмет - ОпределяемыйТип.ПредметДействия.
//
// Возвращаемое значение:
//  Булево - Истина, если по предмету есть активные обработки.
//
Функция ЕстьАктивныеОбработки(Предмет) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Справочник.ОбработкиОбъектов КАК ОбработкиОбъектов
		|ГДЕ
		|	ОбработкиОбъектов.Владелец = &Предмет
		|	И НЕ ОбработкиОбъектов.ПометкаУдаления
		|	И (ОбработкиОбъектов.Состояние = Значение(Перечисление.СостоянияОбработкиОбъектов.Выполняется)
		|		ИЛИ ОбработкиОбъектов.Состояние = Значение(Перечисление.СостоянияОбработкиОбъектов.Остановлена)
		|		ИЛИ ОбработкиОбъектов.Состояние = Значение(Перечисление.СостоянияОбработкиОбъектов.Завершена))");
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Вернет Истина, если по предмету есть прерванные обработки.
//
// Параметры:
//  Предмет - ОпределяемыйТип.ПредметДействия.
//
// Возвращаемое значение:
//  Булево - Истина, если по предмету есть прерванные обработки.
//
Функция ЕстьПрерванныеОбработки(Предмет) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Справочник.ОбработкиОбъектов КАК ОбработкиОбъектов
		|ГДЕ
		|	ОбработкиОбъектов.Владелец = &Предмет
		|	И НЕ ОбработкиОбъектов.ПометкаУдаления
		|	И ОбработкиОбъектов.Состояние = Значение(Перечисление.СостоянияОбработкиОбъектов.Прервана)");
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает отслеживаемые реквизиты для дополнительного свойства ПредыдущиеЗначенияРеквизитов.
//
// Возвращаемое значение:
//  Строка - Отслеживаемые реквизиты.
//
Функция ОтслеживаемыеРеквизиты() Экспорт
	
	ОтслеживаемыеРеквизиты = "Состояние, ПомещенаВИсторию";
	
	Возврат ОтслеживаемыеРеквизиты;
	
КонецФункции

// Обновляет дату создания обработки, в случае если она не запущена.
// 
// Параметры:
//  ТекущаяОбработка - СправочникСсылка.ОбработкиОбъектов  - Ссылка на текущую обработка
//  НоваяДата - Дата - Новая дата, на которую актуализируем обработку
//
Процедура ОбновитьДатуСозданияОбработки(ТекущаяОбработка, НоваяДата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОбработкаОбъект = ТекущаяОбработка.ПолучитьОбъект();
	Если Не ЗначениеЗаполнено(ОбработкаОбъект.ДатаНачала) 
		И ОбработкаОбъект.ДатаСоздания <> НачалоДня(НоваяДата) Тогда
		ОбработкаОбъект.ДатаСоздания = НоваяДата;
		ОбработкаОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если ВидФормы = "ФормаОбъекта"
		И Параметры.Свойство("Ключ")
		И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		
		РеквизитыОбработки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Параметры.Ключ,
			"Владелец, ПомещенаВИсторию");
		
		СтандартнаяОбработка = Ложь;
		Если ТипЗнч(РеквизитыОбработки.Владелец) = Тип("СправочникСсылка.ДокументыПредприятия")
			И Не РеквизитыОбработки.ПомещенаВИсторию Тогда
			
			ВыбраннаяФорма = Метаданные.Справочники.ДокументыПредприятия.Формы.ФормаЭлемента;
			
			Параметры.Ключ = РеквизитыОбработки.Владелец;
			Параметры.Вставить("ОткрытьЗакладкуОбработка", Истина);
			
		ИначеЕсли ТипЗнч(РеквизитыОбработки.Владелец) = Тип("СправочникСсылка.Мероприятия")
			И Не РеквизитыОбработки.ПомещенаВИсторию Тогда
			
			ВыбраннаяФорма = Метаданные.Справочники.Мероприятия.Формы.ФормаЭлемента;
			
			Параметры.Ключ = РеквизитыОбработки.Владелец;
			Параметры.Вставить("ОткрытьЗакладкуОбработка", Истина);
			
		Иначе
			
			ВыбраннаяФорма = Метаданные.Справочники.ОбработкиОбъектов.Формы.ФормаИстории;
			
			Параметры.Вставить("Предмет", РеквизитыОбработки.Владелец);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Владелец");
	Поля.Добавить("ДатаНачала");
	Поля.Добавить("ДатаСоздания");
		
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Данные.ДатаНачала) Тогда
		ДатаОбработки = Формат(Данные.ДатаНачала, "ДФ='dd.MM.yyyy HH:mm'");
	Иначе
		ДатаОбработки = Формат(Данные.ДатаСоздания, "ДФ='dd.MM.yyyy'");
	КонецЕсли;
		
	Представление = СтрШаблон(НСтр("ru = 'Обработка ""%1"" от %2'"),
		Данные.Владелец, ДатаОбработки);
			
КонецПроцедуры

#КонецОбласти

#КонецЕсли 