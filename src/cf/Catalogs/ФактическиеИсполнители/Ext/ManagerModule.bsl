#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Находит или создает фактического исполнителя.
//
// Параметры:
//   Адресат - СправочникСсылка.ПолныеРоли, СправочникСсылка.Сотрудники - плановый адресат.
//   План - СправочникСсылка.Сотрудники - плановый исполнитель.
//   Факт - СправочникСсылка.Сотрудники - фактический исполнитель.
//   Отметил - СправочникСсылка.Сотрудники - сотрудник, который отметил результат.
//   ВключитьБизнесЛогику - Булево - записывать данные в обычном или в режиме записи
//
// Возвращаемое значение:
//   СправочникСсылка.ФактическиеИсполнители - исполнитель, найденный в справочнике или созданный на
//     основании параметров.
//
Функция НайтиСоздатьФактическогоИсполнителя(Адресат, 
	Знач План = Неопределено,
	Знач Факт = Неопределено,
	Знач Отметил = Неопределено,
	Знач ВключитьБизнесЛогику = Истина) Экспорт
	
	Если Не ЗначениеЗаполнено(План) Тогда
		План = Адресат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Факт) Тогда
		Факт = Адресат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Отметил) Тогда
		Отметил = Адресат; 
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка
		|ИЗ
		|	Справочник.ФактическиеИсполнители КАК ФактическиеИсполнители
		|ГДЕ
		|	Адресат = &Адресат
		|   И План = &План
		|	И Факт = &Факт
		|	И Отметил = &Отметил");
		
	Запрос.УстановитьПараметр("Адресат", Адресат);
	Запрос.УстановитьПараметр("План", План);
	Запрос.УстановитьПараметр("Факт", Факт);
	Запрос.УстановитьПараметр("Отметил", Отметил);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат СоздатьФактическогоИсполнителя(Адресат, План, Факт, Отметил, ВключитьБизнесЛогику);
	
КонецФункции

// Представление фактического исполнителя.
// 
// Параметры:
//  Данные - Структура.
//   * Факт - СправочникСсылка.Сотрудники.
//   * План - СправочникСсылка.Сотрудники.
//   * Отметил - СправочникСсылка.Сотрудники.
//   * Адресат - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли.
//  Расширенное - Булево
//  СуффиксЯзыка - Строка
//
// Возвращаемое значение:
//  Строка - Представление фактического исполнителя.
// 
Функция ПредставлениеФактическогоИсполнителя(Данные, Расширенное, СуффиксЯзыка="") Экспорт
	
	Представление = "";
	
	Если Расширенное Тогда
		Представление = СокрЛП(Данные.Адресат);
	Иначе
		Представление = РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(Данные.Адресат, Ложь, СуффиксЯзыка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.Факт) Тогда
		
		Если Расширенное Тогда
			ПредставлениеФакт = СокрЛП(Данные.Факт);
		Иначе
			ПредставлениеФакт = РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(Данные.Факт, Ложь, СуффиксЯзыка);
		КонецЕсли;
		
		Если Данные.План <> Данные.Факт Тогда
			
			РеквизитыПлана = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Данные.План, "Владелец");
			
			ПлановыйСклонение = СклонениеПредставленийОбъектов.ПросклонятьПредставление(
				Строка(РеквизитыПлана.Владелец),
				4,
				РеквизитыПлана.Владелец);
			
			Латиница = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
			Кириллица = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЫЪЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщыъьэюя"; // АПК:1036 проверка орфографии не требуется.
			ДопустимыеСимволы = Латиница + Кириллица + " ";
			ПредставлениеДопускаетСокращение = РаботаСЗадачами.СтрокаСодержитТолькоДопустимыеСимволы(
				ПлановыйСклонение,
				ДопустимыеСимволы);
			
			Если Не Расширенное И ПредставлениеДопускаетСокращение Тогда
				ПредставлениеПлан = ФизическиеЛица.ФамилияИнициалыФизЛица(ПлановыйСклонение);
			Иначе
				ПредставлениеПлан = ПлановыйСклонение;
			КонецЕсли;
			
			Представление = СтрШаблон(НСтр("ru = '%1 за %2'"), 
				ПредставлениеФакт, 
				ПредставлениеПлан);
			
		Иначе
			
			Представление = ПредставлениеФакт;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Данные.Отметил)
			И Данные.Отметил <> Данные.Факт Тогда
			
			Если Расширенное Тогда
				ПредставлениеОтметил = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					Данные.Отметил,
					"ПредставлениеВПереписке");
			Иначе
				ПредставлениеОтметил = РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(Данные.Отметил, Ложь, СуффиксЯзыка);
			КонецЕсли;
			
			МассивСтроки = Новый Массив;
			МассивСтроки.Добавить(Представление);
			МассивСтроки.Добавить(СтрШаблон(НСтр("ru = '(Отметил(а): %1)'"), ПредставлениеОтметил));
			Представление = СтрСоединить(МассивСтроки, " ");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Все фактические исполнители адресата.
// 
// Параметры:
//  Адресат - СправочникСсылка.ПолныеРоли, СправочникСсылка.Сотрудники - адресат поиска
//  ОтборПометкаУдаления - Булево, Неопределено - отбор по пометке удаления, если Неопределено, то отбора нет
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса  - выборка фактических исполнителей
//
Функция ВсеФактическиеИсполнителиАдресата(Адресат, ОтборПометкаУдаления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФактическиеИсполнители.Ссылка
	|ИЗ
	|	Справочник.ФактическиеИсполнители КАК ФактическиеИсполнители
	|ГДЕ
	|	ФактическиеИсполнители.Адресат = &Адресат
	|	И ФактическиеИсполнители.ПометкаУдаления = &ПометкаУдаления";
	Если ТипЗнч(Адресат) = Тип("СправочникСсылка.Сотрудники") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ФактическиеИсполнители.Ссылка
		|ПОМЕСТИТЬ ВТ_Исполнители
		|ИЗ
		|	Справочник.ФактическиеИсполнители КАК ФактическиеИсполнители
		|ГДЕ
		|	ФактическиеИсполнители.Адресат = &Адресат
		|	И ФактическиеИсполнители.ПометкаУдаления = &ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ФактическиеИсполнители.Ссылка
		|ИЗ
		|	Справочник.ФактическиеИсполнители КАК ФактическиеИсполнители
		|ГДЕ
		|	ФактическиеИсполнители.Отметил = &Адресат
		|	И ФактическиеИсполнители.ПометкаУдаления = &ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ФактическиеИсполнители.Ссылка
		|ИЗ
		|	Справочник.ФактическиеИсполнители КАК ФактическиеИсполнители
		|ГДЕ
		|	ФактическиеИсполнители.План = &Адресат
		|	И ФактическиеИсполнители.ПометкаУдаления = &ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ФактическиеИсполнители.Ссылка
		|ИЗ
		|	Справочник.ФактическиеИсполнители КАК ФактическиеИсполнители
		|ГДЕ
		|	ФактическиеИсполнители.Факт = &Адресат
		|	И ФактическиеИсполнители.ПометкаУдаления = &ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Исполнители.Ссылка
		|ИЗ
		|	ВТ_Исполнители КАК ВТ_Исполнители";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Адресат", Адресат);
	Запрос.УстановитьПараметр("ПометкаУдаления", ОтборПометкаУдаления);
	Если ОтборПометкаУдаления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ФактическиеИсполнители.ПометкаУдаления = &ПометкаУдаления", "");
	Иначе
		Запрос.УстановитьПараметр("ПометкаУдаления", ОтборПометкаУдаления);	
	КонецЕсли;	

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Возврат ВыборкаДетальныеЗаписи;
	
КонецФункции

// Установить снять пометку удаления фактического исполнителя.
// 
// Параметры:
//  Источник - СправочникОбъект.ПолныеРоли, СправочникОбъект.Сотрудники - адресаты исполнителей
//
Процедура УстановитьСнятьПометкуУдаленияФактическогоИсполнителя(Источник) Экспорт

	Если Источник.ДополнительныеСвойства.Свойство("ЭтоНовый") И Источник.ДополнительныеСвойства.ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	// Ищем исполнителей, у которых отличается значение пометки удаления
	ВсеИсполнители = ВсеФактическиеИсполнителиАдресата(Источник.Ссылка, Не Источник.ПометкаУдаления);
	Если ВсеИсполнители = Неопределено Тогда
 		Возврат;
	КонецЕсли;

	ВнешняяТранзакция = ТранзакцияАктивна();
	Если Не ВнешняяТранзакция Тогда
		НачатьТранзакцию();
	КонецЕсли;
	Попытка
		Пока ВсеИсполнители.Следующий() Цикл
			ЗаблокироватьДанныеДляРедактирования(ВсеИсполнители.Ссылка);
			ВсеИсполнители.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Источник.ПометкаУдаления);
		КонецЦикла;
		Если Не ВнешняяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	Исключение
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Факт");
	Поля.Добавить("План");
	Поля.Добавить("Отметил");
	Поля.Добавить("Адресат");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Представление = ПредставлениеФактическогоИсполнителя(Данные, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоздатьФактическогоИсполнителя(Адресат, План, Факт, Отметил, ВключитьБизнесЛогику = Истина) 
	
	ФактИсполнитель = СоздатьЭлемент();
	ФактИсполнитель.Адресат = Адресат;
	ФактИсполнитель.План = План;
	ФактИсполнитель.Факт = Факт;
	ФактИсполнитель.Отметил = Отметил;
	
	Если ВключитьБизнесЛогику Тогда
		ФактИсполнитель.Записать();
	Иначе
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ФактИсполнитель);
	КонецЕсли;
	
	Возврат ФактИсполнитель.Ссылка;
	
КонецФункции

#КонецОбласти

#КонецЕсли