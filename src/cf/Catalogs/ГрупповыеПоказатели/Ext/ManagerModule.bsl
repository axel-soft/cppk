#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает выражение для вычисления свойства показателя.
Функция ВыражениеСвойства(ГрупповойПоказатель, Свойство) Экспорт
	
	ДанныеГрупповогоПоказателя = ДанныеГрупповогоПоказателя(ГрупповойПоказатель);
	Если ДанныеГрупповогоПоказателя.Свойства.Найти(Свойство) = Неопределено Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестное свойство %1 группового показателя %2.'"),
			Свойство,
			ГрупповойПоказатель);
	КонецЕсли;
	
	ВыражениеСвойства = 
		СтрШаблон(
			"ЗначениеГрупповогоПоказателя = РаботаСВиджетамиПовтИсп.ЗначениеГрупповогоПоказателя(""%1"");
			|Если Не ЗначениеГрупповогоПоказателя.Рассчитан Тогда
			|	РассчитанноеЗначениеГрупповогоПоказателя = РаботаСВиджетами.ВычислитьЗначениеВыражения(""%2"", Параметры.ИдентификаторКлиента);
			|	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ЗначениеГрупповогоПоказателя, РассчитанноеЗначениеГрупповогоПоказателя, Ложь);
			|	ЗначениеГрупповогоПоказателя.Рассчитан = Истина;
			|КонецЕсли;
			|Параметры.Результат = ЗначениеГрупповогоПоказателя[""%3""];",
			ДанныеГрупповогоПоказателя.УникальныйИдентификатор,
			ДанныеГрупповогоПоказателя.Выражение,
			Свойство);
	
	Возврат ВыражениеСвойства;
	
КонецФункции

// Формирует данные всех групповых показателей.
// 
// Возвращаемое значение:
// 	Соответствие из КлючИЗначение - Данные групповых показателей:
// 	 * Ключ - СправочникСсылка.ГрупповыеПоказатели.
// 	 * Значение - Структура - Данные показателя. См. Справочники.ГрупповыеПоказатели.ДанныеГрупповогоПоказателя.
//
Функция ДанныеВсехГрупповыхПоказателей() Экспорт
	
	ДанныеВсехГрупповыхПоказателей = Новый Соответствие;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ГрупповыеПоказатели.ВерсияДанных,
		|	ГрупповыеПоказатели.Выражение,
		|	ГрупповыеПоказатели.ИмяПредопределенныхДанных,
		|	ГрупповыеПоказатели.Наименование,
		|	ГрупповыеПоказатели.НаименованиеЯзык1,
		|	ГрупповыеПоказатели.ПометкаУдаления,
		|	ГрупповыеПоказатели.Предопределенный,
		|	ГрупповыеПоказатели.Представление,
		|	ГрупповыеПоказатели.Свойства.(
		|		ИмяСвойства,
		|		НомерСтроки,
		|		Ссылка),
		|	ГрупповыеПоказатели.События.(
		|		ИмяСобытия,
		|		НомерСтроки,
		|		Ссылка),
		|	ГрупповыеПоказатели.Ссылка
		|ИЗ
		|	Справочник.ГрупповыеПоказатели КАК ГрупповыеПоказатели
		|ГДЕ
		|	ГрупповыеПоказатели.ПометкаУдаления = ЛОЖЬ");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеГрупповогоПоказателя = СформироватьДанныеГрупповогоПоказателя(Выборка);
		
		ИнициализироватьГрупповойПоказатель(ДанныеГрупповогоПоказателя);
		
		ДанныеВсехГрупповыхПоказателей[Выборка.Ссылка] = ДанныеГрупповогоПоказателя;
		
	КонецЦикла;
	
	Возврат ДанныеВсехГрупповыхПоказателей;
	
КонецФункции

// Данные показателя виджета.
Функция ДанныеГрупповогоПоказателя(ГрупповойПоказатель) Экспорт
	
	ДанныеВсехГрупповыхПоказателей = РаботаСРабочимСтоломПовтИсп.ДанныеВсехГрупповыхПоказателей();
	ДанныеГрупповогоПоказателя = ДанныеВсехГрупповыхПоказателей[ГрупповойПоказатель];
	
	Возврат ДанныеГрупповогоПоказателя;
	
КонецФункции

// Заполняет поставляемые данные.
// 
Процедура ЗаполнитьПоставляемыеДанные() Экспорт
	
	// Итоги "Ежедневные отчеты"
	БлокНавигацииОбъект = ИтогиЕжедневныеОтчеты.ПолучитьОбъект();
	БлокНавигацииОбъект.Наименование = НСтр("ru = 'Итоги ""Ежедневные отчеты""'");
	БлокНавигацииОбъект.Выражение = "Параметры.Результат = УчетВремени.ИтогиЕжедневныеОтчеты();";
	БлокНавигацииОбъект.Свойства.Очистить();
	СтрокаСвойства = БлокНавигацииОбъект.Свойства.Добавить();
	СтрокаСвойства.ИмяСвойства = "Учтено";
	СтрокаСвойства = БлокНавигацииОбъект.Свойства.Добавить();
	СтрокаСвойства.ИмяСвойства = "Осталось";
	СтрокаСвойства = БлокНавигацииОбъект.Свойства.Добавить();
	СтрокаСвойства.ИмяСвойства = "НетОтчета";
	
	БлокНавигацииОбъект.События.Очистить();
	СтрокаСобытия = БлокНавигацииОбъект.События.Добавить();
	СтрокаСобытия.ИмяСобытия = "ИзмененЕжедневныйОтчет";
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(БлокНавигацииОбъект);
	
	// Итоги "Задачи мне"
	БлокНавигацииОбъект = ИтогиЗадачиМне.ПолучитьОбъект();
	БлокНавигацииОбъект.Наименование = НСтр("ru = 'Итоги ""Задачи мне""'");
	БлокНавигацииОбъект.Выражение = "Параметры.Результат = РаботаСЗадачами.ЗадачиМнеИтоги(Пользователи.ТекущийПользователь());";
	БлокНавигацииОбъект.Свойства.Очистить();
	СтрокаСвойства = БлокНавигацииОбъект.Свойства.Добавить();
	СтрокаСвойства.ИмяСвойства = "ОжидающихВыполнения";
	СтрокаСвойства = БлокНавигацииОбъект.Свойства.Добавить();
	СтрокаСвойства.ИмяСвойства = "Новых";
	СтрокаСвойства = БлокНавигацииОбъект.Свойства.Добавить();
	СтрокаСвойства.ИмяСвойства = "Просроченных";
	
	БлокНавигацииОбъект.События.Очистить();
	СтрокаСобытия = БлокНавигацииОбъект.События.Добавить();
	СтрокаСобытия.ИмяСобытия = "ЗадачаИзменена";
	СтрокаСобытия = БлокНавигацииОбъект.События.Добавить();
	СтрокаСобытия.ИмяСобытия = "БизнесПроцессСтартован";
	СтрокаСобытия = БлокНавигацииОбъект.События.Добавить();
	СтрокаСобытия.ИмяСобытия = "Запись_Поручения";
	СтрокаСобытия = БлокНавигацииОбъект.События.Добавить();
	СтрокаСобытия.ИмяСобытия = "ИзмененСоставИсполнителей";
	СтрокаСобытия = БлокНавигацииОбъект.События.Добавить();
	СтрокаСобытия.ИмяСобытия = "Запись_Задача";
	СтрокаСобытия = БлокНавигацииОбъект.События.Добавить();
	СтрокаСобытия.ИмяСобытия = "Запись_ДействиеЗадачи";
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(БлокНавигацииОбъект);
	
	// Итоги "Задачи мне" (по видам)
	БлокНавигацииОбъект = ИтогиЗадачиМнеПоВидам.ПолучитьОбъект();
	БлокНавигацииОбъект.Наименование = НСтр("ru = 'Итоги ""Задачи мне"" (по видам)'");
	БлокНавигацииОбъект.Выражение = "Параметры.Результат = РаботаСЗадачами.ЗадачиМнеИтогиПоВидам(Пользователи.ТекущийПользователь());";
	БлокНавигацииОбъект.Свойства.Очистить();
	СтрокаСвойства = БлокНавигацииОбъект.Свойства.Добавить();
	СтрокаСвойства.ИмяСвойства = "НаРассмотрение";
	СтрокаСвойства = БлокНавигацииОбъект.Свойства.Добавить();
	СтрокаСвойства.ИмяСвойства = "НаСогласование";
	СтрокаСвойства = БлокНавигацииОбъект.Свойства.Добавить();
	СтрокаСвойства.ИмяСвойства = "НаУтверждение";
	СтрокаСвойства = БлокНавигацииОбъект.Свойства.Добавить();
	СтрокаСвойства.ИмяСвойства = "НаИсполнение";
	СтрокаСвойства = БлокНавигацииОбъект.Свойства.Добавить();
	СтрокаСвойства.ИмяСвойства = "НаОзнакомление";
	СтрокаСвойства = БлокНавигацииОбъект.Свойства.Добавить();
	СтрокаСвойства.ИмяСвойства = "НаРегистрацию";
	СтрокаСвойства = БлокНавигацииОбъект.Свойства.Добавить();
	СтрокаСвойства.ИмяСвойства = "Другие";
	
	БлокНавигацииОбъект.События.Очистить();
	СтрокаСобытия = БлокНавигацииОбъект.События.Добавить();
	СтрокаСобытия.ИмяСобытия = "ЗадачаИзменена";
	СтрокаСобытия = БлокНавигацииОбъект.События.Добавить();
	СтрокаСобытия.ИмяСобытия = "БизнесПроцессСтартован";
	СтрокаСобытия = БлокНавигацииОбъект.События.Добавить();
	СтрокаСобытия.ИмяСобытия = "Запись_Поручения";
	СтрокаСобытия = БлокНавигацииОбъект.События.Добавить();
	СтрокаСобытия.ИмяСобытия = "ИзмененСоставИсполнителей";
	СтрокаСобытия = БлокНавигацииОбъект.События.Добавить();
	СтрокаСобытия.ИмяСобытия = "Запись_Задача";
	СтрокаСобытия = БлокНавигацииОбъект.События.Добавить();
	СтрокаСобытия.ИмяСобытия = "Запись_ДействиеЗадачи";
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(БлокНавигацииОбъект);
	
	// Итоги "Задачи мне" (расширенные)
	БлокНавигацииОбъект = ИтогиЗадачиМнеРасширенные.ПолучитьОбъект();
	БлокНавигацииОбъект.Наименование = НСтр("ru = 'Итоги ""Задачи мне"" (расширенные)'");
	БлокНавигацииОбъект.Выражение = "Параметры.Результат = РаботаСЗадачами.ЗадачиМнеИтогиРасширенные(Пользователи.ТекущийПользователь());";
	БлокНавигацииОбъект.Свойства.Очистить();
	СтрокаСвойства = БлокНавигацииОбъект.Свойства.Добавить();
	СтрокаСвойства.ИмяСвойства = "ОжидающихВыполнения";
	СтрокаСвойства = БлокНавигацииОбъект.Свойства.Добавить();
	СтрокаСвойства.ИмяСвойства = "НовыхБезОзнакомления";
	СтрокаСвойства = БлокНавигацииОбъект.Свойства.Добавить();
	СтрокаСвойства.ИмяСвойства = "ИстекаетБезОзнакомления";
	СтрокаСвойства = БлокНавигацииОбъект.Свойства.Добавить();
	СтрокаСвойства.ИмяСвойства = "ПросроченоБезОзнакомления";
	СтрокаСвойства = БлокНавигацииОбъект.Свойства.Добавить();
	СтрокаСвойства.ИмяСвойства = "ВСрокБезОзнакомления";
	СтрокаСвойства = БлокНавигацииОбъект.Свойства.Добавить();
	СтрокаСвойства.ИмяСвойства = "НаОзнакомлениеСРезультатом";
	СтрокаСвойства = БлокНавигацииОбъект.Свойства.Добавить();
	СтрокаСвойства.ИмяСвойства = "ПоступилиОбновления";
	
	БлокНавигацииОбъект.События.Очистить();
	СтрокаСобытия = БлокНавигацииОбъект.События.Добавить();
	СтрокаСобытия.ИмяСобытия = "ЗадачаИзменена";
	СтрокаСобытия = БлокНавигацииОбъект.События.Добавить();
	СтрокаСобытия.ИмяСобытия = "БизнесПроцессСтартован";
	СтрокаСобытия = БлокНавигацииОбъект.События.Добавить();
	СтрокаСобытия.ИмяСобытия = "Запись_Поручения";
	СтрокаСобытия = БлокНавигацииОбъект.События.Добавить();
	СтрокаСобытия.ИмяСобытия = "ИзмененСоставИсполнителей";
	СтрокаСобытия = БлокНавигацииОбъект.События.Добавить();
	СтрокаСобытия.ИмяСобытия = "Запись_Задача";
	СтрокаСобытия = БлокНавигацииОбъект.События.Добавить();
	СтрокаСобытия.ИмяСобытия = "Запись_ДействиеЗадачи";
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(БлокНавигацииОбъект);
	
	// Итоги "Задачи подчиненных"
	БлокНавигацииОбъект = ИтогиЗадачиПодчиненных.ПолучитьОбъект();
	БлокНавигацииОбъект.Наименование = НСтр("ru = 'Итоги ""Задачи подчиненных""'");
	БлокНавигацииОбъект.Выражение = "Параметры.Результат = РаботаСЗадачами.ЗадачиОтделаИтоги(Пользователи.ТекущийПользователь());";
	БлокНавигацииОбъект.Свойства.Очистить();
	СтрокаСвойства = БлокНавигацииОбъект.Свойства.Добавить();
	СтрокаСвойства.ИмяСвойства = "ОжидающихВыполнения";
	СтрокаСвойства = БлокНавигацииОбъект.Свойства.Добавить();
	СтрокаСвойства.ИмяСвойства = "Новых";
	СтрокаСвойства = БлокНавигацииОбъект.Свойства.Добавить();
	СтрокаСвойства.ИмяСвойства = "Просроченных";
	
	БлокНавигацииОбъект.События.Очистить();
	СтрокаСобытия = БлокНавигацииОбъект.События.Добавить();
	СтрокаСобытия.ИмяСобытия = "ЗадачаИзменена";
	СтрокаСобытия = БлокНавигацииОбъект.События.Добавить();
	СтрокаСобытия.ИмяСобытия = "БизнесПроцессСтартован";
	СтрокаСобытия = БлокНавигацииОбъект.События.Добавить();
	СтрокаСобытия.ИмяСобытия = "Запись_Поручения";
	СтрокаСобытия = БлокНавигацииОбъект.События.Добавить();
	СтрокаСобытия.ИмяСобытия = "ИзмененСоставИсполнителей";
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(БлокНавигацииОбъект);
	
	// Итоги "Задачи от меня"
	БлокНавигацииОбъект = ИтогиЗадачиОтМеня.ПолучитьОбъект();
	БлокНавигацииОбъект.Наименование = НСтр("ru = 'Итоги ""Задачи от меня""'");
	БлокНавигацииОбъект.Выражение = "Параметры.Результат = РаботаСЗадачами.ЗадачиОтМеняИтоги(Пользователи.ТекущийПользователь());";
	БлокНавигацииОбъект.Свойства.Очистить();
	СтрокаСвойства = БлокНавигацииОбъект.Свойства.Добавить();
	СтрокаСвойства.ИмяСвойства = "ОжидающихВыполнения";
	СтрокаСвойства = БлокНавигацииОбъект.Свойства.Добавить();
	СтрокаСвойства.ИмяСвойства = "Новых";
	СтрокаСвойства = БлокНавигацииОбъект.Свойства.Добавить();
	СтрокаСвойства.ИмяСвойства = "Просроченных";
	СтрокаСвойства = БлокНавигацииОбъект.Свойства.Добавить();
	СтрокаСвойства.ИмяСвойства = "Черновиков";
	
	БлокНавигацииОбъект.События.Очистить();
	СтрокаСобытия = БлокНавигацииОбъект.События.Добавить();
	СтрокаСобытия.ИмяСобытия = "ЗадачаИзменена";
	СтрокаСобытия = БлокНавигацииОбъект.События.Добавить();
	СтрокаСобытия.ИмяСобытия = "БизнесПроцессСтартован";
	СтрокаСобытия = БлокНавигацииОбъект.События.Добавить();
	СтрокаСобытия.ИмяСобытия = "Запись_Поручения";
	СтрокаСобытия = БлокНавигацииОбъект.События.Добавить();
	СтрокаСобытия.ИмяСобытия = "ИзмененСоставИсполнителей";
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(БлокНавигацииОбъект);
	
	// Итоги "Мои документы"
	БлокНавигацииОбъект = ИтогиМоиДокументы.ПолучитьОбъект();
	БлокНавигацииОбъект.Наименование = НСтр("ru = 'Итоги ""Мои документы""'");
	БлокНавигацииОбъект.Выражение = "Параметры.Результат = Делопроизводство.МоиДокументыИтоги();";
	БлокНавигацииОбъект.Свойства.Очистить();
	СтрокаСвойства = БлокНавигацииОбъект.Свойства.Добавить();
	СтрокаСвойства.ИмяСвойства = "БезОтвета";
	СтрокаСвойства = БлокНавигацииОбъект.Свойства.Добавить();
	СтрокаСвойства.ИмяСвойства = "Истекают";
	СтрокаСвойства = БлокНавигацииОбъект.Свойства.Добавить();
	СтрокаСвойства.ИмяСвойства = "Всего";
	СтрокаСвойства = БлокНавигацииОбъект.Свойства.Добавить();
	СтрокаСвойства.ИмяСвойства = "Просрочено";
	
	БлокНавигацииОбъект.События.Очистить();
	СтрокаСобытия = БлокНавигацииОбъект.События.Добавить();
	СтрокаСобытия.ИмяСобытия = "ДокументСоздан";
	СтрокаСобытия = БлокНавигацииОбъект.События.Добавить();
	СтрокаСобытия.ИмяСобытия = "ДокументИзмененДляСписков";
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(БлокНавигацииОбъект);
	
КонецПроцедуры

// Формирует структуру показателя.
Функция СтруктураДанныеГрупповогоПоказателя() Экспорт
	
	ДанныеГрупповогоПоказателя = Новый Структура;
	ДанныеГрупповогоПоказателя.Вставить("Имя", "");
	ДанныеГрупповогоПоказателя.Вставить("Выражение", "");
	ДанныеГрупповогоПоказателя.Вставить("Свойства", Новый Массив);
	ДанныеГрупповогоПоказателя.Вставить("События", Новый Массив);
	
	ДанныеГрупповогоПоказателя.Вставить("УникальныйИдентификатор", "");
	
	Возврат ДанныеГрупповогоПоказателя;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФормы

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
    МультиязычностьКлиентСервер.ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка);
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
    МультиязычностьКлиентСервер.ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка);
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СтрокаПоиска", ?(Параметры.СтрокаПоиска = Неопределено, "", Параметры.СтрокаПоиска) + "%");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГрупповыеПоказатели.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ГрупповыеПоказатели КАК ГрупповыеПоказатели
	|ГДЕ
	|	НЕ ГрупповыеПоказатели.ПометкаУдаления
	|	И ГрупповыеПоказатели.Наименование ПОДОБНО &СтрокаПоиска
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГрупповыеПоказатели.Наименование";
	
	ОбъектМетаданных = Метаданные.Справочники.ГрупповыеПоказатели;
	Если Не МультиязычностьПовтИсп.КонфигурацияИспользуетТолькоОдинЯзык(ОбъектМетаданных.ТабличныеЧасти.Найти("Представления") = Неопределено) Тогда
		
		Если МультиязычностьСервер.ИспользуетсяПервыйДополнительныйЯзык() Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"ГрупповыеПоказатели.Наименование ПОДОБНО &СтрокаПоиска",
				"(ГрупповыеПоказатели.Наименование ПОДОБНО &СтрокаПоиска ИЛИ ГрупповыеПоказатели.НаименованиеЯзык1 ПОДОБНО &СтрокаПоиска)");
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеВыбора = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает данные поставляемой показатель.
Функция СформироватьДанныеГрупповогоПоказателя(Выборка)
	
	ДанныеГрупповогоПоказателя = СтруктураДанныеГрупповогоПоказателя();
	ДанныеГрупповогоПоказателя.Имя = 
		?(ЗначениеЗаполнено(Выборка.ИмяПредопределенныхДанных),
			Выборка.ИмяПредопределенныхДанных,
			СтрЗаменить(Строка(Выборка.Ссылка.УникальныйИдентификатор()), "-", ""));;
	ДанныеГрупповогоПоказателя.Выражение = Выборка.Выражение;
	
	Для Каждого ИмяСвойства Из Выборка.Свойства.Выгрузить().ВыгрузитьКолонку("ИмяСвойства") Цикл
		ДанныеГрупповогоПоказателя.Свойства.Добавить(ИмяСвойства);
	КонецЦикла;
	
	Для Каждого ИмяСобытия Из Выборка.События.Выгрузить().ВыгрузитьКолонку("ИмяСобытия") Цикл
		ДанныеГрупповогоПоказателя.События.Добавить(ИмяСобытия);
	КонецЦикла;
	
	Возврат ДанныеГрупповогоПоказателя
	
КонецФункции

// Инициализирует данные показателя.
Процедура ИнициализироватьГрупповойПоказатель(ДанныеГрупповогоПоказателя)
	
	ДанныеГрупповогоПоказателя.УникальныйИдентификатор = ДанныеГрупповогоПоказателя.Имя;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли