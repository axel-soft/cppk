#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат "Ссылка";
	
КонецФункции

// Заполняет переданный дескриптор доступа
Процедура ЗаполнитьОсновнойДескриптор(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	ДокументооборотПраваДоступа.ЗаполнитьНастройкиДескриптора(ДескрипторДоступа, ОбъектДоступа);
	
КонецПроцедуры	

// Возвращает признак того, что менеджер содержит метод ЗапросДляРасчетаПрав()
// 
Функция ЕстьМетодЗапросДляРасчетаПрав() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает запрос для расчета прав доступа по дескрипторам объекта
// 
// Параметры:
//  
//  Дескрипторы - Массив - массив дескрипторов, чьи права нужно рассчитать
//  ИдОбъекта - Ссылка - идентификатор объекта метаданных, назначенный переданным дескрипторам
//  МенеджерОбъектаДоступа - СправочникМенеджер, ДокументМенеджер - менеджер объекта доступа
// 
// Возвращаемое значение - Запрос - запрос, который выберет права доступа для переданного массива дескрипторов
// 
Функция ЗапросДляРасчетаПрав(Дескрипторы, ИдОбъекта, МенеджерОбъектаДоступа) Экспорт
	
	Запрос = Справочники.ДескрипторыДоступаОбъектов.ЗапросДляСтандартногоРасчетаПрав(
		Дескрипторы, ИдОбъекта, МенеджерОбъектаДоступа, Истина, Ложь);
	Запрос.Текст = ДокументооборотПраваДоступаПовтИсп.ТекстЗапросаДляРасчетаПравПапок();
	
	Возврат Запрос;
	
КонецФункции

// Заполняет протокол расчета прав дескрипторов
// 
// Параметры:
//  
//  ПротоколРасчетаПрав - Массив - протокол для заполнения
//  ЗапросПоПравам - Запрос - запрос, который использовался для расчета прав дескрипторов
//  Дескрипторы - Массив - массив дескрипторов, чьи права были рассчитаны
//  
Процедура ЗаполнитьПротоколРасчетаПрав(ПротоколРасчетаПрав, ЗапросПоПравам) Экспорт
	
	Справочники.ДескрипторыДоступаОбъектов.ЗаполнитьПротоколРасчетаПравСтандартно(
		ПротоколРасчетаПрав, ЗапросПоПравам);
	
КонецПроцедуры

// Проверяет наличие метода.
// 
Функция ЕстьМетодПолучитьПравилаОбработкиНастроекПравПапки() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает таблицу значений с правилами обработки настроек прав папки,
// которые следует применять для расчета прав объекта
// 
Функция ПолучитьПравилаОбработкиНастроекПравПапки() Экспорт
	
	ТаблицаПравил = ДокументооборотПраваДоступа.ТаблицаПравилОбработкиНастроекПапки();
	
	Стр = ТаблицаПравил.Добавить();
	Стр.Настройка = "ЧтениеПапокИПроектов";
	Стр.Чтение = Истина;
	
	Стр = ТаблицаПравил.Добавить();
	Стр.Настройка = "ИзменениеПапокПроектов";
	Стр.Добавление = Истина;
	Стр.Изменение = Истина;
	Стр.Удаление = Истина;
	
	Стр = ТаблицаПравил.Добавить();
	Стр.Настройка = "УправлениеПравами";
	Стр.УправлениеПравами = Истина;
	
	Возврат ТаблицаПравил;
	
КонецФункции

#Область ОбновлениеАдреснойКниги

// Конструктор параметров обновления адресной книги.
//
// Возвращаемое значение:
//	Структура:
//		* ОбновитьДанныеОбъекта - Булево - Признак обновления данных по объекту.
//		* ПроектыДляОбновления - Массив Из СправочникОбъект.Проекты - Список проектов для обновления.
//
Функция ПараметрыОбновленияАдреснойКниги() Экспорт
	
	ПараметрыОбновленияАдреснойКниги = Новый Структура;
	ПараметрыОбновленияАдреснойКниги.Вставить("ОбновитьДанныеОбъекта", Ложь);
	ПараметрыОбновленияАдреснойКниги.Вставить("ПроектыДляОбновления", Новый Массив);
	
	Возврат ПараметрыОбновленияАдреснойКниги;
	
КонецФункции

// Устанавливает значения параметров обновления адресной книги по данным объекта.
//
// Параметры:
//	Объект - СправочникОбъект.ПапкиПроектов - Объект, для которго необходимо определить параметры обновления.
//
// Возвращаемое значение:
//	Структура: см. ПараметрыОбновленияАдреснойКниги.
//
Функция ЗначенияПараметровОбновленияАдреснойКнигиПоОбъекту(Объект) Экспорт
	
	ПараметрыОбновленияАдреснойКниги = ПараметрыОбновленияАдреснойКниги();
		
	Если Не РаботаСАдреснойКнигой.ТребуетсяОбновлениеАдреснойКниги(Объект) Тогда
		Возврат ПараметрыОбновленияАдреснойКниги; 
	КонецЕсли;

	Если Объект.ЭтоНовый() Тогда
		ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОбъекта = Истина;
	Иначе
		ПредыдущиеЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.Ссылка, "Наименование, ПометкаУдаления, Родитель");

		Если ПредыдущиеЗначенияРеквизитов.Родитель <> Объект.Родитель
				Или ПредыдущиеЗначенияРеквизитов.ПометкаУдаления <> Объект.ПометкаУдаления
				Или ПредыдущиеЗначенияРеквизитов.Наименование <> Объект.Наименование Тогда
			
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОбъекта = Истина;
		КонецЕсли;
				
		Если ПредыдущиеЗначенияРеквизитов.ПометкаУдаления <> Объект.ПометкаУдаления Тогда 
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Проекты.Ссылка,
				|	Проекты.ПометкаУдаления
				|ИЗ
				|	Справочник.Проекты КАК Проекты
				|ГДЕ
				|	Проекты.Папка = &Ссылка");
			Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Если Объект.ПометкаУдаления <> Выборка.ПометкаУдаления Тогда 
					Проект = Выборка.Ссылка.ПолучитьОбъект();
					Проект.Заблокировать();
					
					РаботаСАдреснойКнигой.ОтключитьОбновлениеАдреснойКниги(Проект);
					Проект.УстановитьПометкуУдаления(Объект.ПометкаУдаления);
					
					ПараметрыОбновленияАдреснойКниги.ПроектыДляОбновления.Добавить(Проект);
				КонецЕсли;
			КонецЦикла;			
		КонецЕсли;		
	КонецЕсли;
	
	Возврат ПараметрыОбновленияАдреснойКниги;

КонецФункции

// Обновляет адресную книгу, согласно установленным параметрам.
//
// Параметры:
//	Объект - СправочникОбъект.ПапкиПроектов - Объект, по данным которого необходимо обновить адресной книги.
//	ПараметрыОбновления - Структура Из КлючИЗначение - см. ПараметрыОбновленияАдреснойКниги.
//
Процедура ОбновитьАдреснуюКнигу(Объект, ПараметрыОбновления) Экспорт
	
	Если ПараметрыОбновления.ОбновитьДанныеОбъекта Тогда
		Справочники.АдреснаяКнига.ОбновитьДанныеОбъекта(
			Объект.Ссылка, Объект.Родитель, Справочники.АдреснаяКнига.ПоПроектам, Объект.Ссылка);
	КонецЕсли;
	
	Для Каждого Проект Из ПараметрыОбновления.ПроектыДляОбновления Цикл		
		Справочники.АдреснаяКнига.ОбновитьДанныеОбъекта(
			Проект.Ссылка, Проект.Папка, Справочники.АдреснаяКнига.ПоПроектам, Проект.Ссылка);
			
		РегистрыСведений.ОбъектыПоискаВАдреснойКниге.ОбновитьДоступностьВПоиске(Проект);
		
		УчастникиПроектаБезКонтрагентов = Новый Массив;
		
		ВсеУчастникиПроекта = Проект.ПроектнаяКоманда.ВыгрузитьКолонку("Исполнитель");
		Для Каждого УчастникПроекта Из ВсеУчастникиПроекта Цикл
			Если ТипЗнч(УчастникПроекта) <> Тип("СправочникСсылка.Пользователи")
					И ТипЗнч(УчастникПроекта) <> Тип("СправочникСсылка.Сотрудники")
					И ТипЗнч(УчастникПроекта) <> Тип("СправочникСсылка.ПолныеРоли") Тогда
				
				Продолжить;
			КонецЕсли;
			
			УчастникиПроектаБезКонтрагентов.Добавить(УчастникПроекта);
		КонецЦикла;
						
		Справочники.АдреснаяКнига.ОбновитьСписокПодчиненныхОбъектов(
			Проект.Ссылка,
			Проект.Папка,
			УчастникиПроектаБезКонтрагентов,
			Справочники.АдреснаяКнига.ПоПроектам,
			Проект.Ссылка);		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
