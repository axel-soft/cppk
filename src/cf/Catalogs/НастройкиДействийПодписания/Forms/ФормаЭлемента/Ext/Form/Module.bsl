
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НастройкиДействий.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	ИдентификаторОбрабатывающегоРезультат = ДействияСервер.ПредопределенныйИдентификаторУчастника(
		"ЭтапОбрабатывающийРезультатПодписание");
	ИдентификаторЭтапаПодписать= ДействияСервер.ПредопределенныйИдентификаторУчастника(
		"ЭтапПодписать");
	ОбновитьДеревоУчастниковПоОбъекту();
	
	УстановитьСпособыПодписанияИзВидаОбъекта();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьПредставлениеСроков();
	РазныеСроки = ДействияКлиент.ЗначениеРазныеСрокиРекурсивно(Участники.ПолучитьЭлементы());
	Элементы.УчастникиРазныеСроки.Пометка = РазныеСроки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПроверитьУникальностьЭтапов(Отказ);
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Объект.Ссылка.Пустая());
	ОбновитьОбъектПоДеревуУчастников(Отказ);
	ДействияКлиент.ОтложенноеНачалоВыполненияПередЗаписью(ЭтотОбъект);
	
	Если ПараметрыЗаписи.Свойство("НеПроверятьУчастников") И ПараметрыЗаписи.НеПроверятьУчастников Тогда
		Возврат;
	КонецЕсли;
	ПроверитьУчастников(Отказ);

	Если Не ЗначениеЗаполнено(Объект.МоментРазыменованияУчастников) Тогда
		Объект.МоментРазыменованияУчастников = ПредопределенноеЗначение("Перечисление.МоментыРазыменованияУчастниковДействий.ПриСозданииДействия");
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	НастройкиДействий.ПриЗаписиНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	НастройкиДействий.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_НастройкиДействий", Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КлючОбщейНастройкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ОбщаяНастройка);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.НастройкиДействияАвторНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.НастройкиДействияАвторОбработкаВыбора(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(Объект, "Автор", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.НастройкиДействияАвторАвтоПодбор(
		ЭтотОбъект, Текст, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта);
		
КонецПроцедуры

&НаКлиенте
Процедура АвторОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.НастройкиДействияАвторОкончаниеВводаТекста(
		ЭтотОбъект, Текст, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПодписанияПриИзменении(Элемент)
	
	ДействияКлиент.СпособПодписанияПриИзменении(ЭтотОбъект);
	УстановитьДоступностьЭлементовФормы();
		
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОтложенногоНачалаВыполненияНажатие(Элемент, СтандартнаяОбработка)
	
	ДействияКлиент.ОписаниеОтложенногоНачалаВыполненияНажатие(ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУчастники

&НаКлиенте
Процедура УчастникиПриИзменении(Элемент)
	
	ОбновитьИдентификаторыЭтаповУчастников();
	ОбновитьПредставленияВДеревеУчастников(Участники);
	РазвернутьДеревоУчастников();
	ДействияКлиент.УстановитьДоступностьКомандыЗащищенный(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ЕстьОсобоеНаименованиеОписание Тогда
		
		ТекущиеДанные = Участники.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ЭтоЭтап
			Или Элементы.ЕстьОсобоеНаименованиеОписание.ТолькоПросмотр = Истина
			Или ТекущиеДанные.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.ОбрабатывающийРезультат") Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Описание", ТекущиеДанные.Описание);
		ПараметрыФормы.Вставить("ТолькоОписание", Истина);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗавершитьНастройкуОсобогоНаименованияИОписанияПодписывающего", ЭтотОбъект, ТекущиеДанные);
			
		ОткрытьФорму("ОбщаяФорма.РедактированиеОсобогоНаименованияИОписанияЗадачи",
			ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
			
	ИначеЕсли Поле = Элементы.УчастникиЗащищенный Тогда
		
		ДействияКлиент.Защищенный(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры УчастникиВыбор
//
&НаКлиенте
Процедура ЗавершитьНастройкуОсобогоНаименованияИОписанияПодписывающего(
	НаименованиеИОписание, СтрокаУчастника) Экспорт
	
	Если НаименованиеИОписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаУчастника.Описание = НаименованиеИОписание.Описание;
	
	СтрокаУчастника.ЕстьОсобоеНаименованиеОписание = ЗначениеЗаполнено(СтрокаУчастника.Описание);
	
	Модифицированность = Истина;
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДочерниеЭлементы = ТекущиеДанные.ПолучитьЭлементы();
	Если ДочерниеЭлементы.Количество() = 1 Тогда // скопируем вниз
		СкопироватьДанныеКОбеспечивающемуПодписание(ДочерниеЭлементы[0], ТекущиеДанные);
	КонецЕсли;	 	
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьЭлементовФормы();
	ДействияКлиент.УчастникиПриАктивизацииСтроки(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ЭтоЭтап Тогда
		ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(ТекущиеДанные.Функция) Тогда
		ПоказатьПредупреждение(, 
			НСтр("ru = 'Добавление в этап обработки результата невозможно.'"));
		Возврат;
	КонецЕсли;
	
	ВариантыУстановкиСрока = СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	СтрокиЭтапа = ТекущиеДанные.ПолучитьЭлементы();
	
	СтрокаУчастника = СтрокиЭтапа.Добавить();
	СтрокаУчастника.Идентификатор = ТекущиеДанные.Идентификатор;
	СтрокаУчастника.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.Подписывающий");
	СтрокаУчастника.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	СтрокаУчастника.ПредставлениеСтроки = ДействияКлиентСервер.ПредставлениеУчастника(СтрокаУчастника.Участник);
	СтрокаУчастника.Функция = ТекущиеДанные.Функция;

	ИндексПредыдущегоЭлемента = СтрокиЭтапа.Количество() - 2;
	Если ИндексПредыдущегоЭлемента >= 0 Тогда

		СтрокаУчастника.ВариантУстановкиСрока = СтрокиЭтапа[ИндексПредыдущегоЭлемента].ВариантУстановкиСрока;

		Если СтрокаУчастника.ВариантУстановкиСрока = ВариантыУстановкиСрока.ТочныйСрок Тогда
			Если СтрокиЭтапа.Порядок = ПредопределенноеЗначение("Перечисление.ПорядокВыполненияЭтапаДействия.Параллельно") Тогда
				СтрокаУчастника.Срок = СтрокиЭтапа[ИндексПредыдущегоЭлемента].Срок;
			КонецЕсли;
		Иначе
			СтрокаУчастника.СрокДни = СтрокиЭтапа[ИндексПредыдущегоЭлемента].СрокДни;
			СтрокаУчастника.СрокЧасы = СтрокиЭтапа[ИндексПредыдущегоЭлемента].СрокЧасы;
			СтрокаУчастника.СрокМинуты = СтрокиЭтапа[ИндексПредыдущегоЭлемента].СрокМинуты;
		КонецЕсли;
		
	Иначе

		СтрокаУчастника.ВариантУстановкиСрока = ВариантыУстановкиСрока.ОтносительныйСрок;
		
	КонецЕсли;
	
	Если ТекущиеДанные.СрокОбщий Тогда
		ЗаполнитьЗначенияСвойств(СтрокаУчастника, ТекущиеДанные);
	КонецЕсли;
	
	Элементы.Участники.ТекущаяСтрока = СтрокаУчастника.ПолучитьИдентификатор();
	
	ЗаполнитьПредставлениеСроков();
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ВыделенныеСтроки = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(
		Элементы.Участники.ВыделенныеСтроки);
	
	ВсеЭтапы = Участники.ПолучитьЭлементы();
	
	// Если выделена только одна строка, то выводим сообщение о невозможности
	// ее удаления. Иначе молча удаляем все возможные строки дерева.
	Если ВыделенныеСтроки.Количество() = 1 Тогда
		
		СтрокаДерева = Участники.НайтиПоИдентификатору(ВыделенныеСтроки[0]);
				
		ТекстПредупреждения = "";
		
		Если СтрокаДерева.ЭтоЭтап Тогда
		
			СчЭтаповДанногоВида = 0;
			Для Каждого Этап Из ВсеЭтапы Цикл
				Если Этап.Функция = СтрокаДерева.Функция Тогда
			    	СчЭтаповДанногоВида = СчЭтаповДанногоВида + 1;
				КонецЕсли;
			КонецЦикла;
			
			Если СчЭтаповДанногоВида < 2 Тогда 
				Если ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(СтрокаДерева.Функция) Тогда
					ТекстПредупреждения = НСтр("ru = 'Удаление этапа обработки результата невозможно.'");
				Иначе
					ТекстПредупреждения = НСтр("ru = 'Удаление единственного этапа подписания невозможно.'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		
	Иначе	
	
		// Вначале исключаем этапы и участников, которых невозможно удалить.
		КоличествоВыделенныхСтрок = ВыделенныеСтроки.Количество();
		ИндексСтроки = КоличествоВыделенныхСтрок - 1;
		
		Пока ИндексСтроки >= 0 Цикл
			
			ИндексТекущейСтроки = ИндексСтроки;
			ИндексСтроки = ИндексСтроки - 1;
			
			СтрокаДерева = Участники.НайтиПоИдентификатору(ВыделенныеСтроки[ИндексТекущейСтроки]);
			
			// Все этапы.
			Если СтрокаДерева.ЭтоЭтап Тогда
				ВыделенныеСтроки.Удалить(ИндексТекущейСтроки);
				Продолжить;
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
	// Удаляем всех выделенных участников.
	КоличествоВыделенныхСтрок = ВыделенныеСтроки.Количество();
	ИндексСтроки = КоличествоВыделенныхСтрок - 1;
	
	Пока ИндексСтроки >= 0 Цикл
		
		ИндексТекущейСтроки = ИндексСтроки;
		ИндексСтроки = ИндексСтроки - 1;
		
		СтрокаУчастника = Участники.НайтиПоИдентификатору(ВыделенныеСтроки[ИндексТекущейСтроки]);
		
		// Пропускаем этапы.
		Если СтрокаУчастника.ЭтоЭтап Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаЭтапа = СтрокаУчастника.ПолучитьРодителя();
		ЭлементыУчастников = СтрокаЭтапа.ПолучитьЭлементы();
		Если ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(СтрокаЭтапа.Функция) Тогда 
			Если Элементы.Участники.ТекущийЭлемент.Имя = "ПредставлениеСтроки" Тогда
				ЭлементыУчастников[0].Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
			Иначе
				ЭлементыУчастников[0][Элементы.Участники.ТекущийЭлемент.Имя] = Неопределено;
			КонецЕсли;
		Иначе 
			ЭлементыУчастников.Удалить(СтрокаУчастника);
		КонецЕсли;
		ВыделенныеСтроки.Удалить(ИндексТекущейСтроки);
		Модифицированность = Истина;
		
	КонецЦикла;
	
	// Удаляем возможные этапы.
	КоличествоВыделенныхСтрок = ВыделенныеСтроки.Количество();
	ИндексСтроки = КоличествоВыделенныхСтрок - 1;
	ЭтапыКУдалению = Новый Массив;
	
	Пока ИндексСтроки >= 0 Цикл
		
		ИндексТекущейСтроки = ИндексСтроки;
		ИндексСтроки = ИндексСтроки - 1;
		
		СтрокаЭтап = Участники.НайтиПоИдентификатору(ВыделенныеСтроки[ИндексТекущейСтроки]);
		
		ЭтапыКУдалению.Добавить(СтрокаЭтап);
	КонецЦикла;
	
	Если ЭтапыКУдалению.Количество() <> ВсеЭтапы.Количество() - 1 Тогда
		
		Для Каждого ЭтапКУдалению Из ЭтапыКУдалению Цикл
			ВсеЭтапы.Удалить(ЭтапКУдалению);
		КонецЦикла;
		
	КонецЕсли;
	
	ЭлементыЭтапы = Участники.ПолучитьЭлементы();
	ЕстьЭтапы = Ложь;
	Для Каждого ЭлементЭтап Из ЭлементыЭтапы Цикл
		Если ЭлементЭтап.Идентификатор = ИдентификаторЭтапаПодписать 
			Или ЭлементЭтап.Идентификатор = ИдентификаторОбрабатывающегоРезультат Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьЭтапы = Истина;
		Прервать;
	КонецЦикла;
	
	ОбновитьПредставленияВДеревеУчастников(Участники);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Или ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	// Определение строки этапа.
	СтрокаЭтапа = Участники.НайтиПоИдентификатору(Элементы.Участники.ТекущаяСтрока);
	Если Не СтрокаЭтапа.ЭтоЭтап Тогда
		СтрокаЭтапа = СтрокаЭтапа.ПолучитьРодителя();
	КонецЕсли;
	
	Если Не СтрокаЭтапа.ЭтоЭтап Тогда
		ВызватьИсключение НСтр("ru = 'Не определена строка этапа'");
	КонецЕсли;
	
	Если СтрокаЭтапа.Функция <> ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.Подписывающий") Тогда
		Возврат;
	КонецЕсли;
	
	УдаленыНекоторыеУчастники = Ложь;
	ДобавленыНовыеУчастники = Ложь;
	
	// Массив выбранных участников с обратной сортировкой.
	ВыбранныеУчастники = Новый Массив;
	ИндексСтроки = ВыбранноеЗначение.Количество() - 1;
	Пока ИндексСтроки >= 0 Цикл
		ВыбранныеУчастники.Добавить(ВыбранноеЗначение[ИндексСтроки]);
		ИндексСтроки = ИндексСтроки - 1;
	КонецЦикла;
	
	// Определение порядка выполнения, сроков и т.д. для новых строк.
	ВариантыУстановкиСрока = СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	ЗначенияКолонокДляНовыхСтрок = Новый Структура;
	ЗначенияКолонокДляНовыхСтрок.Вставить("ВариантУстановкиСрока", ВариантыУстановкиСрока.ОтносительныйСрок);
	ЗначенияКолонокДляНовыхСтрок.Вставить("Срок", Дата(1, 1, 1));
	ЗначенияКолонокДляНовыхСтрок.Вставить("СрокДни", 0);
	ЗначенияКолонокДляНовыхСтрок.Вставить("СрокЧасы", 0);
	ЗначенияКолонокДляНовыхСтрок.Вставить("СрокМинуты", 0);
	ЗначенияКолонокДляНовыхСтрок.Вставить("Идентификатор", СтрокаЭтапа.Идентификатор);
	ЗначенияКолонокДляНовыхСтрок.Вставить("Функция", СтрокаЭтапа.Функция);
	
	// Удаление неактуальных участников.
	СтрокиУчастников = СтрокаЭтапа.ПолучитьЭлементы();
	ИндексСтроки = СтрокиУчастников.Количество() - 1;
	Пока ИндексСтроки >= 0 Цикл
		
		СтрокаУчастника = СтрокиУчастников[ИндексСтроки];
		
		Если ИндексСтроки = СтрокиУчастников.Количество() - 1 Тогда
			ЗаполнитьЗначенияСвойств(ЗначенияКолонокДляНовыхСтрок, СтрокаУчастника);
		КонецЕсли;
		
		// Пропускаем существующих участников этапа.
		ВыбранныйУчастник = ВыбранныеУчастники.Найти(СтрокаУчастника.Участник);
		Если ВыбранныйУчастник <> Неопределено Тогда
			ВыбранныеУчастники.Удалить(ВыбранныйУчастник);
			ИндексСтроки = ИндексСтроки - 1;
			Продолжить;
		КонецЕсли;
		
		СтрокиУчастников.Удалить(СтрокаУчастника);
		УдаленыНекоторыеУчастники = Истина;
		
		ИндексСтроки = ИндексСтроки - 1;
		
	КонецЦикла;
	
	// Добавление новых участников.
	ИндексСтроки = ВыбранныеУчастники.Количество() - 1;
	Пока ИндексСтроки >= 0 Цикл
		
		ВыбранныйУчастник = ВыбранныеУчастники[ИндексСтроки];
		
		СтрокаУчастника = СтрокиУчастников.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаУчастника, ЗначенияКолонокДляНовыхСтрок);
		СтрокаУчастника.Участник = ВыбранныйУчастник;
		СтрокаУчастника.УсловиеПредставление = СтрокаУчастника.Условие;
		ВыбранныеУчастники.Удалить(ИндексСтроки);
		ДобавленыНовыеУчастники = Истина;
		ИндексСтроки = ИндексСтроки - 1;
		
	КонецЦикла;
	
	Если ДобавленыНовыеУчастники Тогда
		ОбновитьПредставленияВДеревеУчастников(Участники);
		РазвернутьДеревоУчастников();
		ЗаполнитьПредставлениеСроков();
	КонецЕсли;
	
	Если УдаленыНекоторыеУчастники Или ДобавленыНовыеУчастники Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ИндексСтроки = ПараметрыПеретаскивания.Значение.Количество() - 1;
	
	ПеремещениеЗадачиОбработкиРезультата = Ложь;
	
	// Анализируем перемещаемые строки и удаляем те, перемещение
	// которых невозможно.
	Пока ИндексСтроки >= 0 Цикл
		
		ИдентификаторСтроки = ПараметрыПеретаскивания.Значение[ИндексСтроки];
		
		СтрокаДерева = Участники.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		УдалитьСтроку = Ложь;
		Если СтрокаДерева.ЭтоЭтап Тогда
			УдалитьСтроку = Истина;
		ИначеЕсли ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(СтрокаДерева.Функция) Тогда
			
			ПеремещениеЗадачиОбработкиРезультата = Истина;
			УдалитьСтроку = Истина;
		КонецЕсли;
		
		Если УдалитьСтроку Тогда
			ПараметрыПеретаскивания.Значение.Удалить(ИндексСтроки);
		КонецЕсли;
		
		ИндексСтроки = ИндексСтроки - 1;
		
	КонецЦикла;
	
	// Если строк для перемещения не осталось, то отменяем перемещение.
	Если ПараметрыПеретаскивания.Значение.Количество() = 0 Тогда
		Выполнение = Ложь;
	КонецЕсли;
	
	// Предупреждаем о строках которые невозможно перенести.
	Если ПеремещениеЗадачиОбработкиРезультата Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'Перемещение из этапа обработки результата невозможно!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Не ЗначениеЗаполнено(Строка) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ЭтапПолучатель = Участники.НайтиПоИдентификатору(Строка);
	Если ЭтапПолучатель = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Не ЭтапПолучатель.ЭтоЭтап Тогда
		ЭтапПолучатель = ЭтапПолучатель.ПолучитьРодителя();
		Если ЭтапПолучатель = Неопределено Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтапПолучатель.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.ОбрабатывающийРезультат") Тогда
		
		ПоказатьПредупреждение(,
			НСтр("ru = 'Перемещение в этап обработки результата невозможно!'"));
		
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Строка = ЭтапПолучатель.ПолучитьИдентификатор();
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив") Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ИндексСтроки = ПараметрыПеретаскивания.Значение.Количество() - 1;
	Пока ИндексСтроки >= 0 Цикл
		
		ИндексТекущейСтроки = ИндексСтроки;
		ИндексСтроки = ИндексСтроки - 1;
		
		ИдентификаторСтроки = ПараметрыПеретаскивания.Значение[ИндексТекущейСтроки];
		ПеремещаяемаяСтрока = Участники.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		// Исключаем строки, перемещаемые в рамках одного этапа.
		Если ПеремещаяемаяСтрока.ПолучитьРодителя() = ЭтапПолучатель Тогда
			ПараметрыПеретаскивания.Значение.Удалить(ИндексТекущейСтроки);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыПеретаскивания.Значение.Количество() = 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Работа с УчастникиПредставлениеСтроки

&НаКлиенте
Процедура ПредставлениеСтрокиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.ПредставлениеСтроки) = Тип("Строка")
		И ЗначениеЗаполнено(ТекущиеДанные.ПрефиксСтроки)
		И СтрНачинаетсяС(ТекущиеДанные.ПредставлениеСтроки, ТекущиеДанные.ПрефиксСтроки) Тогда
		
		ТекущиеДанные.ПредставлениеСтроки = Прав(ТекущиеДанные.ПредставлениеСтроки,
			СтрДлина(ТекущиеДанные.ПредставлениеСтроки) - СтрДлина(ТекущиеДанные.ПрефиксСтроки));
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЭтап Тогда
		Если СтрДлина(ТекущиеДанные.ПредставлениеСтроки) > 100 Тогда
			ТекущиеДанные.ПредставлениеСтроки = Лев(ТекущиеДанные.ПредставлениеСтроки, 100);
		КонецЕсли;
		
		ТекущиеДанные.НаименованиеЭтапа = ТекущиеДанные.ПредставлениеСтроки;
	Иначе
		ТекущиеДанные.Участник = ТекущиеДанные.ПредставлениеСтроки;
		Если Не ЗначениеЗаполнено(ТекущиеДанные.ПредставлениеСтроки) Тогда
			ТекущиеДанные.Защищенный = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ДействияКлиент.ПредставлениеСтрокиПриИзмененииПредложитьЗащититьДубли(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЭтоОбрабатывающийРезультат = Ложь;
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ТекущиеДанные.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.ОбрабатывающийРезультат")
			Или ТекущиеДанные.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.ОбеспечивающийПодписание") Тогда
			ЭтоОбрабатывающийРезультат = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаголовокФормы = НСтр("ru = 'Выбор подписывающего'");
	НастройкиДействийКлиент.ПредставлениеСтрокиНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка,
		ЗаголовокФормы, Истина, Не ЭтоОбрабатывающийРезультат, ТипОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиОткрытие(Элемент, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.ПредставлениеСтрокиОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиОчистка(Элемент, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.ПредставлениеСтрокиОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиДействийКлиент.ПредставлениеСтрокиОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	// Если значение требует уточнения, будет вызвана форма для ввода уточняющих данных.
	// Обработка выбора не должна выполняться в этом случае.
	ТипыДляУточнения = Новый Массив;
	ТипыДляУточнения.Добавить(Тип("Структура"));
	ТипыДляУточнения.Добавить(Тип("СправочникСсылка.РолиИсполнителей"));
	ТипыДляУточнения.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	ТипыДляУточнения.Добавить(Тип("СправочникСсылка.Проекты"));
	Если ТипыДляУточнения.Найти(ТипЗнч(ВыбранноеЗначение)) <> Неопределено Тогда
		СотрудникиКлиент.ОбработкаВыбораКонтейнера(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
		// Повторная проверка (значение могло быть изменено).
		Если ТипыДляУточнения.Найти(ТипЗнч(ВыбранноеЗначение)) <> Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЭтап Тогда
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные.НаименованиеЭтапа = ВыбранноеЗначение;
		ТекущиеДанные.ПредставлениеСтроки = ТекущиеДанные.ПрефиксСтроки + ТекущиеДанные.НаименованиеЭтапа;
		
		Если ТекущиеДанные.Идентификатор = ИдентификаторЭтапаПодписать 
			И ТекущиеДанные.НаименованиеЭтапа <> НСтр("ru = 'Подписать'") Тогда
			ТекущиеДанные.Идентификатор = Новый УникальныйИдентификатор();
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Участник = ВыбранноеЗначение;
	
	РазвернутьДеревоУчастников();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.ПредставлениеСтрокиАвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора,
		ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, Неопределено, ТипОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.ПредставлениеСтрокиОкончаниеВводаТекста(ЭтотОбъект, Элемент, Текст, 
		ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, Неопределено, ТипОбъекта);
		
КонецПроцедуры

// Работа с УчастникиУсловие
&НаКлиенте
Процедура УсловиеПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.УсловиеПредставлениеОткрытие(
		ЭтотОбъект, Элемент, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура УсловиеПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.УсловиеПредставлениеОбработкаВыбора(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УсловиеПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.УсловиеПредставлениеНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта);
			
КонецПроцедуры
	
&НаКлиенте
Процедура УсловиеПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.УсловиеПредставлениеОчистка(
		ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УсловиеПредставлениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.УсловиеПредставлениеАвтоПодбор(
		Текст, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура УсловиеПредставлениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.УсловиеПредставлениеОкончаниеВводаТекста(
		Текст, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта);
		
КонецПроцедуры

// Работа с УчастникиСрокПредставление

&НаКлиенте
Процедура СрокПредставлениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоДочернийУчастник Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекстСообщенияПредупреждения", "");
	ПараметрыФормы.Вставить("ВПредставленииМожетБытьДата", Истина);
	ПараметрыФормы.Вставить("Форма", ЭтотОбъект);
	ПараметрыФормы.Вставить("Исполнитель", ТекущиеДанные.Участник);
	
	РезультатЗаполнения = СрокиИсполненияПроцессовКлиент.ИзменитьСрокИсполненияПоПредставлению(
		ТекущиеДанные.Срок,
		ТекущиеДанные.СрокДни,
		ТекущиеДанные.СрокЧасы,
		ТекущиеДанные.СрокМинуты,
		ТекущиеДанные.ВариантУстановкиСрока,
		ТекущиеДанные.СрокПредставление,
		ПараметрыФормы);
		
	ДочерниеЭлементы = ТекущиеДанные.ПолучитьЭлементы();
	Если ДочерниеЭлементы.Количество() = 1 Тогда // скопируем вниз
		СкопироватьДанныеКОбеспечивающемуПодписание(ДочерниеЭлементы[0], ТекущиеДанные);
	КонецЕсли;
		
	Если РезультатЗаполнения Тогда
		Если Не РазныеСроки Тогда
			ДействияКлиент.ЗаполнитьСрокиСоисполнителейПоТекущейСтроке(Участники, ТекущиеДанные);
		КонецЕсли;
		ЗаполнитьПредставлениеСроков();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыФормы.ТекстСообщенияПредупреждения) Тогда
		ПоказатьПредупреждение(, ПараметрыФормы.ТекстСообщенияПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоДочернийУчастник Тогда
		Возврат;
	КонецЕсли;
		
	ДействияКлиент.СрокПредставлениеРегулирование(
		ЭтотОбъект, Элемент, Направление, СтандартнаяОбработка, Не РазныеСроки);
	
	ДочерниеЭлементы = ТекущиеДанные.ПолучитьЭлементы();
	Если ДочерниеЭлементы.Количество() = 1 Тогда // скопируем вниз
		СкопироватьДанныеКОбеспечивающемуПодписание(ДочерниеЭлементы[0], ТекущиеДанные);
	КонецЕсли;
	
	ЗаполнитьПредставлениеСроков();
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыУстановкиСрока = 
		СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	ТекущиеДанные.Срок = ВыбранноеЗначение;
	ТекущиеДанные.СрокДни = 0;
	ТекущиеДанные.СрокЧасы = 0;
	ТекущиеДанные.СрокМинуты = 0;
	ТекущиеДанные.ВариантУстановкиСрока = ВариантыУстановкиСрока.ТочныйСрок;
	
	ЗаполнитьПредставлениеСроков();
	
КонецПроцедуры

// Работа с УчастникиОписание

&НаКлиенте
Процедура ОписаниеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ЕстьОсобоеНаименованиеОписание = ЗначениеЗаполнено(ТекущиеДанные.Описание);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокПриИзменении(Элемент)
	
	ДействияКлиент.ПорядокПриИзменении(ЭтотОбъект, Элемент);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандФормыУчастники

&НаКлиенте
Процедура Подобрать(Команда)
	
	СтрокаЭтапа = Участники.НайтиПоИдентификатору(Элементы.Участники.ТекущаяСтрока);
	Если Не СтрокаЭтапа.ЭтоЭтап Тогда
		СтрокаЭтапа = СтрокаЭтапа.ПолучитьРодителя();
	КонецЕсли;
	
	Если Не СтрокаЭтапа.ЭтоЭтап Тогда
		ВызватьИсключение НСтр("ru = 'Не определена строка этапа.'");
	КонецЕсли;
	
	Если СтрокаЭтапа.Функция <> ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.Подписывающий") Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныеАдресаты = Новый Массив;
	УчастникиЭтапов = СтрокаЭтапа.ПолучитьЭлементы();
	Для Каждого СтрокаУчастника Из УчастникиЭтапов Цикл
		Если ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
			ВыбранныеАдресаты.Добавить(СтрокаУчастника.Участник);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 2);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ОтображатьРоли", Истина);
	Если ТипОбъекта = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.ДокументыПредприятия") Тогда
		ПараметрыФормы.Вставить("ОтображатьАвтоподстановкиПоДокументам", Истина);
	ИначеЕсли ТипОбъекта = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.Мероприятия") Тогда
		ПараметрыФормы.Вставить("ОтображатьАвтоподстановкиПоМероприятиям", Истина);
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный тип объекта %1.'"),
			ТипОбъекта);
	КонецЕсли;
	ПараметрыФормы.Вставить("ОтображатьВидыПодразделений", Ложь);
	ПараметрыФормы.Вставить("ВыбиратьВидыПодразделений", Ложь);
	ПараметрыФормы.Вставить("ОтображатьПодразделения", Ложь);
	ПараметрыФормы.Вставить("ВыбиратьПодразделения", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Подбор подписывающих'"));
	ПараметрыФормы.Вставить("ЗаголовокСпискаВыбранных", НСтр("ru = 'Выбранные сотрудники и роли:'"));
	ПараметрыФормы.Вставить("ЗаголовокСпискаАдреснойКниги", НСтр("ru = 'Все сотрудники и роли:'"));
	ПараметрыФормы.Вставить("ВыбранныеАдресаты", ВыбранныеАдресаты);
	ПараметрыФормы.Вставить("ИменаПредметов", СписокПредметов);
	ПараметрыФормы.Вставить("КонтролироватьДублиАдресатов", Истина);
	ПараметрыФормы.Вставить("ПодменятьПользователейСотрудниками", Истина);
	ПараметрыФормы.Вставить("КонтролироватьСотрудниковБезПользователя", Истина);
	
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыФормы, Элементы.Участники);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.ОбрабатывающийРезультат") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЭтап Тогда
		
		Этапы = Участники.ПолучитьЭлементы();
		ИндексТекущейСтроки = Этапы.Индекс(ТекущиеДанные);
		Если ИндексТекущейСтроки = 0 Тогда
			Возврат;
		КонецЕсли;
		Этапы.Сдвинуть(ИндексТекущейСтроки, -1);
		
	Иначе
		
		УчастникиЭтапа = ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
		
		ИндексТекущейСтроки = УчастникиЭтапа.Индекс(ТекущиеДанные);
		
		Если ИндексТекущейСтроки = 0 Тогда
			Возврат;
		КонецЕсли;
		
		УчастникиЭтапа.Сдвинуть(ИндексТекущейСтроки, -1);
		
	КонецЕсли;
	
	ОбновитьПредставленияВДеревеУчастников(Участники);
	УчастникиПриАктивизацииСтроки(Элементы.Участники);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.ОбрабатывающийРезультат") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЭтап Тогда
		
		Этапы = Участники.ПолучитьЭлементы();
		ИндексТекущейСтроки = Этапы.Индекс(ТекущиеДанные);
		Если ИндексТекущейСтроки = Этапы.Количество() - 1 ИЛИ
			Этапы[ИндексТекущейСтроки+1].Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.ОбрабатывающийРезультат") Тогда
			Возврат;
		КонецЕсли;
		Этапы.Сдвинуть(ИндексТекущейСтроки, 1);
		
	Иначе
		
		УчастникиЭтапа = ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
		
		ИндексТекущейСтроки = УчастникиЭтапа.Индекс(ТекущиеДанные);
		
		Если ИндексТекущейСтроки = УчастникиЭтапа.Количество() - 1 Тогда
			Возврат;
		КонецЕсли;
		
		УчастникиЭтапа.Сдвинуть(ИндексТекущейСтроки, 1);
		
	КонецЕсли;
	
	ОбновитьПредставленияВДеревеУчастников(Участники);
	УчастникиПриАктивизацииСтроки(Элементы.Участники);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭтап(Команда)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоДочернийУчастник Тогда
		РодительЭлемента = ТекущиеДанные.ПолучитьРодителя();
		Если РодительЭлемента <> Неопределено Тогда
			ТекущиеДанные = РодительЭлемента;
		КонецЕсли;
	КонецЕсли;
	
	РодительЭлемента = ТекущиеДанные.ПолучитьРодителя();
	Если РодительЭлемента <> Неопределено Тогда
		ТекущиеДанные = РодительЭлемента;
	КонецЕсли;
	
	СтрокиЭтапов = Участники.ПолучитьЭлементы();
	
	ИндексНовогоЭлемента = СтрокиЭтапов.Индекс(ТекущиеДанные);
	Если ТекущиеДанные.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.Подписывающий") Тогда
		ТекущиеДанные.ВозможностьИзменятьУчастников = Объект.ВозможностьИзменятьУчастников;
		ИндексНовогоЭлемента = ИндексНовогоЭлемента + 1;
	КонецЕсли;
	
	СтрокаЭтап = СтрокиЭтапов.Вставить(ИндексНовогоЭлемента);
	СтрокаЭтап.НаименованиеЭтапа = НСтр("ru = 'Новый этап'");
	СтрокаЭтап.ЭтоЭтап = Истина;
	СтрокаЭтап.Порядок = ТекущиеДанные.Порядок;
	СтрокаЭтап.Идентификатор = Новый УникальныйИдентификатор();
	СтрокаЭтап.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.Подписывающий");
	СтрокаЭтап.ВозможностьИзменятьУчастников = Объект.ВозможностьИзменятьУчастников;
	
	Элементы.Участники.ТекущаяСтрока = СтрокаЭтап.ПолучитьИдентификатор();
	Элементы.УчастникиМенятьУчастников.Видимость = Истина;
	ЕстьЭтапы = Истина;
	
	ОбновитьПредставленияВДеревеУчастников(Участники);
	
КонецПроцедуры

&НаКлиенте
Процедура Защищенный(Команда)
	
	ДействияКлиент.Защищенный(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРазныеСроки(Команда)
	
	РазныеСроки = Не РазныеСроки;
	Элементы.УчастникиРазныеСроки.Пометка = РазныеСроки;
	ДействияКлиент.УстановитьОдинаковыйСрокРекурсивно(Участники.ПолучитьЭлементы(), ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Готово(Команда)
	
	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУчастниковПоУмолчанию(Команда)
	
	ЗаполнитьУчастниковПоУмолчаниюНаСервере();
	
	ЗаполнитьПредставлениеСроков();
	
	РазвернутьДеревоУчастников();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗадержку(Команда)
	
	ДействияКлиент.ОчиститьЗадержку(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьУчастниковПоУмолчаниюНаСервере()
	
	ДействиеОбъект = РеквизитФормыВЗначение("Объект");
	ДействиеОбъект.ЗаполнитьУчастниковПоУмолчанию();
	ЗначениеВРеквизитФормы(ДействиеОбъект, "Объект");
	
	ОбновитьДеревоУчастниковПоОбъекту();
	
КонецПроцедуры

// Заполняет представление сроков в карточке действия.
//
&НаКлиенте
Процедура ЗаполнитьПредставлениеСроков() Экспорт
	
	ЭтапыУчастников = Участники.ПолучитьЭлементы();
	
	Для Каждого ЭтапУчастников Из ЭтапыУчастников Цикл
		
		Если ЭтапУчастников.СрокОбщий Тогда
			ЭтапУчастников.СрокПредставление = 
				СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
					ЭтапУчастников.Срок,
					ЭтапУчастников.СрокДни,
					ЭтапУчастников.СрокЧасы,
					ЭтапУчастников.СрокМинуты,
					ИспользоватьДатуИВремяВСрокахЗадач,
					ЭтапУчастников.ВариантУстановкиСрока);
		Иначе
			ЭтапУчастников.СрокПредставление = "";
		КонецЕсли;
		
		УчастникиЭтапа = ЭтапУчастников.ПолучитьЭлементы();
		
		Для Каждого УчастникЭтапа Из УчастникиЭтапа Цикл
			
			УчастникЭтапа.СрокПредставление = 
				СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
					УчастникЭтапа.Срок,
					УчастникЭтапа.СрокДни,
					УчастникЭтапа.СрокЧасы,
					УчастникЭтапа.СрокМинуты,
					ИспользоватьДатуИВремяВСрокахЗадач,
					УчастникЭтапа.ВариантУстановкиСрока);

			УчастникиЭтапаВторойУровень = УчастникЭтапа.ПолучитьЭлементы();
			
			Для Каждого УчастникЭтапа2 Из УчастникиЭтапаВторойУровень Цикл
				
				УчастникЭтапа2.СрокПредставление = 
					СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
						УчастникЭтапа2.Срок,
						УчастникЭтапа2.СрокДни,
						УчастникЭтапа2.СрокЧасы,
						УчастникЭтапа2.СрокМинуты,
						ИспользоватьДатуИВремяВСрокахЗадач,
						УчастникЭтапа2.ВариантУстановкиСрока);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьУникальностьЭтапов(Отказ)
	
	Этапы = Новый Соответствие;
	Для Каждого Элемент1 Из Участники.ПолучитьЭлементы() Цикл
		Если ЗначениеЗаполнено(Элемент1.НаименованиеЭтапа)
			И Этапы.Получить(ВРег(Элемент1.НаименованиеЭтапа)) <> Неопределено Тогда
			Отказ = Истина;
			ПоказатьПредупреждение(, СтрШаблон(
				НСтр("ru = 'Повторяется этап ""%1""'"),
					Элемент1.НаименованиеЭтапа));
			Возврат;
		КонецЕсли;
		Этапы.Вставить(ВРег(Элемент1.НаименованиеЭтапа), Истина);
	КонецЦикла;
	
КонецПроцедуры

// Признак недоступности строки, переопределяемый для данного вида действия участника.
// Вызывается для строк с участниками, т.е. "нижнего" уровня дерева.
// 
// Параметры:
//  СтрокаДерева - ДанныеФормыЭлементДерева - Строка дерева "Участники".
//  СтрокаРодитель - Неопределено, ДанныеФормыЭлементДерева - Строка родитель строки дерева.
// 
// Возвращаемое значение:
//  Булево - Признак, что строка должна быть недоступна.
&НаКлиенте
Функция СтрокаУчастникаНедоступна(СтрокаДерева, СтрокаРодитель) Экспорт
	
	Возврат СтрокаДерева.ЭтоДочернийУчастник И СтрокаДерева.Функция <> ПредопределенноеЗначение(
		"Перечисление.ФункцииУчастниковПодписания.ОбрабатывающийРезультат");
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы() Экспорт
		
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если ТекущийРодитель = Неопределено Тогда
		ЭлементыРодителя = Участники.ПолучитьЭлементы();
	Иначе
		ЭлементыРодителя = ТекущийРодитель.ПолучитьЭлементы();
	КонецЕсли;
	Индекс = ЭлементыРодителя.Индекс(ТекущиеДанные);
	ЭтоПервыйЭлемент = 
		Индекс = 0;
	ЭтоПоследнийЭлемент = 
		Индекс = ЭлементыРодителя.Количество() - 1;
		
	Если ТекущиеДанные.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.ОбрабатывающийРезультат") Тогда
		
		Элементы.ПредставлениеСтроки.ТолькоПросмотр = ТекущиеДанные.ЭтоЭтап;
		Элементы.ПредставлениеСтроки.КнопкаВыбора = Истина;
		Элементы.СрокПредставление.ТолькоПросмотр = Ложь;
		Элементы.СрокПредставление.Доступность = Истина;
		Элементы.ЕстьОсобоеНаименованиеОписание.ТолькоПросмотр = Истина;
		Элементы.Описание.ТолькоПросмотр = Истина;
		
		Элементы.Подобрать.Доступность = Ложь;
		Элементы.Добавить.Доступность = Ложь;
		Элементы.ПереместитьВверх.Доступность = Ложь;
		Элементы.ПереместитьВниз.Доступность = Ложь;
		Элементы.Удалить.Доступность = Не ТекущиеДанные.ЭтоЭтап;
		Элементы.УчастникиМенятьУчастников.Доступность = Ложь;
		Элементы.Порядок.ТолькоПросмотр = Истина;
		
	ИначеЕсли ТекущиеДанные.ЭтоЭтап Тогда
		
		Элементы.ПредставлениеСтроки.ТолькоПросмотр = Ложь;
		Элементы.ПредставлениеСтроки.КнопкаВыбора = Ложь;
		Элементы.СрокПредставление.ТолькоПросмотр = Истина;
		Элементы.ЕстьОсобоеНаименованиеОписание.ТолькоПросмотр = Истина;
		Элементы.Описание.ТолькоПросмотр = Истина;
		
		Элементы.Подобрать.Доступность = НЕ ТекущиеДанные.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.ОбрабатывающийРезультат");
		Элементы.Добавить.Доступность = НЕ ТекущиеДанные.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.ОбрабатывающийРезультат");
		Элементы.ПереместитьВверх.Доступность = Не ЭтоПервыйЭлемент;
		Элементы.ПереместитьВниз.Доступность = Не ЭтоПоследнийЭлемент;
		Элементы.Удалить.Доступность = Истина;
		Элементы.УчастникиМенятьУчастников.Доступность = Истина;
		Элементы.Порядок.ТолькоПросмотр = 
			Объект.СпособПодписания = ПредопределенноеЗначение("Перечисление.СпособыПодписанияПредметаДействия.НаБумаге"); 
		Элементы.УчастникиДобавитьОбеспечивающегоПодписание.Доступность = Ложь;
		
	ИначеЕсли ТекущиеДанные.ЭтоДочернийУчастник Тогда // обеспечивающий подписание	

		Элементы.СрокПредставление.Доступность = Ложь;
		
		Элементы.ЕстьОсобоеНаименованиеОписание.ТолькоПросмотр = Истина;
		Элементы.Описание.ТолькоПросмотр = Истина;
		
		Элементы.Подобрать.Доступность = Ложь;
		Элементы.Добавить.Доступность = Ложь;
		Элементы.ПереместитьВверх.Доступность = Ложь;
		Элементы.ПереместитьВниз.Доступность = Ложь;
		Элементы.Порядок.ТолькоПросмотр = Истина;
		
		Элементы.УчастникиДобавитьОбеспечивающегоПодписание.Доступность = Ложь;
		
	Иначе // Участник
		
		Элементы.ПредставлениеСтроки.ТолькоПросмотр = Ложь;
		Элементы.ПредставлениеСтроки.КнопкаВыбора = Истина;
		Элементы.СрокПредставление.ТолькоПросмотр = Ложь;
		Элементы.СрокПредставление.Доступность = Истина;
		Элементы.ЕстьОсобоеНаименованиеОписание.ТолькоПросмотр = Ложь;
		Элементы.Описание.ТолькоПросмотр = Ложь;
		
		Элементы.Подобрать.Доступность = Истина;
		Элементы.Добавить.Доступность = Истина;
		Элементы.ПереместитьВверх.Доступность = Не ЭтоПервыйЭлемент;
		Элементы.ПереместитьВниз.Доступность = Не ЭтоПоследнийЭлемент;
		Элементы.Удалить.Доступность = Истина;
		Элементы.УчастникиМенятьУчастников.Доступность = Ложь;
		Элементы.Порядок.ТолькоПросмотр = Истина;
		
		ДобавлениеОбеспечивающегоДоступно = Истина;
		Если ЭтоНастройкаМероприятия Тогда
			ДобавлениеОбеспечивающегоДоступно = Объект.СпособПодписания = ПредопределенноеЗначение(
				"Перечисление.СпособыПодписанияПредметаДействия.НаБумаге");
		КонецЕсли;
		Элементы.УчастникиДобавитьОбеспечивающегоПодписание.Доступность = ДобавлениеОбеспечивающегоДоступно;
		
	КонецЕсли;
	
	Элементы.КонтекстДобавить.Доступность = Элементы.Добавить.Доступность;
	Элементы.КонтекстУдалить.Доступность = Элементы.Удалить.Доступность;
	
	ДействияКлиент.УстановитьТолькоПросмотрИУдалениеУчастникаПоЗащищенности(ЭтотОбъект);
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции_Участники

// Заполняет дерево участников по объекту.
//
&НаСервере
Процедура ОбновитьДеревоУчастниковПоОбъекту()
	
	ЭтапыУчастников = Участники.ПолучитьЭлементы();
	ЭтапыУчастников.Очистить();
			
	Если Объект.Этапы.Количество() Тогда
		// Добавляем все этапы в таблицу участников.
		Для Каждого СтрокаЭтапа Из Объект.Этапы Цикл
			
			ЭтапУчастников = ЭтапыУчастников.Добавить();
			ЗаполнитьЗначенияСвойств(ЭтапУчастников, СтрокаЭтапа);
			ЭтапУчастников.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.Подписывающий");
			ЭтапУчастников.ЭтоЭтап = Истина;
			ЭтапУчастников.Порядок = СтрокаЭтапа.ПорядокВыполненияУчастниками;
		КонецЦикла;
	Иначе
		ЭтапУчастников = ЭтапыУчастников.Добавить();
		ЭтапУчастников.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.Подписывающий");
		ЭтапУчастников.НаименованиеЭтапа = НСтр("ru = 'Подписать'");
		ЭтапУчастников.ЭтоЭтап = Истина;
		ЭтапУчастников.Идентификатор = ИдентификаторЭтапаПодписать;	
		ЭтапУчастников.ВозможностьИзменятьУчастников = Объект.ВозможностьИзменятьУчастников;
		
		Если Объект.СпособПодписания = Перечисления.СпособыПодписанияПредметаДействия.НаБумаге Тогда
			ЭтапУчастников.Порядок = Перечисления.ПорядокВыполненияЭтапаДействия.Последовательно;
			
		ИначеЕсли ЗначениеЗаполнено(Объект.ПорядокВыполненияУчастниками) Тогда
			ЭтапУчастников.Порядок = Объект.ПорядокВыполненияУчастниками;
		Иначе
			ЭтапУчастников.Порядок = Перечисления.ПорядокВыполненияЭтапаДействия.Параллельно;
		КонецЕсли;	
	КонецЕсли;
	
	// Добавляем ОбрабатывающийРезультат
	ЭтапУчастников = ЭтапыУчастников.Добавить();
	ЭтапУчастников.Функция = ПредопределенноеЗначение(
		"Перечисление.ФункцииУчастниковПодписания.ОбрабатывающийРезультат");
	ЭтапУчастников.Порядок = Перечисления.ПорядокВыполненияЭтапаДействия.Последовательно;
	ЭтапУчастников.НаименованиеЭтапа = НСтр("ru = 'Ознакомиться с результатом подписания'");
	ЭтапУчастников.ЭтоЭтап = Истина;
	ЭтапУчастников.Идентификатор = ИдентификаторОбрабатывающегоРезультат;
	
	УчастникиЗаданы = Объект.Участники.Количество(); 
	Для Каждого СтрокаЭтапа Из ЭтапыУчастников Цикл
		УчастникиЭтапа = СтрокаЭтапа.ПолучитьЭлементы();
		
		// По каждому этапу добавляем всех его участников.
		Если СтрокаЭтапа.Идентификатор <> ИдентификаторОбрабатывающегоРезультат Тогда
			
			Если УчастникиЗаданы <> 0 Тогда
			
				Для Каждого Участник Из Объект.Участники Цикл
					
					Если (ЗначениеЗаполнено(Участник.ИдентификаторЭтапа) 
							И Участник.ИдентификаторЭтапа <> СтрокаЭтапа.Идентификатор)
						Или (Не ЗначениеЗаполнено(Участник.ИдентификаторЭтапа) 
							И Участник.ФункцияУчастника <> СтрокаЭтапа.Функция) Тогда
						Продолжить;
					КонецЕсли;
	
					// На первом уровне выводим только тех, кто никому не подчинен.						
					Если ЗначениеЗаполнено(Участник.ВышестоящийУчастник) Тогда
						Продолжить;
					КонецЕсли;
						
					УчастникЭтапа = УчастникиЭтапа.Добавить();
					ЗаполнитьЗначенияСвойств(УчастникЭтапа, Участник);
					УчастникЭтапа.УсловиеПредставление = УчастникЭтапа.Условие;
					УчастникЭтапа.Функция = Участник.ФункцияУчастника;
					УчастникЭтапа.Идентификатор = СтрокаЭтапа.Идентификатор;
					УчастникЭтапа.ЕстьОсобоеНаименованиеОписание = ЗначениеЗаполнено(УчастникЭтапа.Описание);
						
					// Второй уровень.	
					ПодчиненныеУчастники = УчастникЭтапа.ПолучитьЭлементы();
					Для Каждого УчастникПодчиненный Из Объект.Участники Цикл
						
						Если УчастникПодчиненный.ВышестоящийУчастник = Участник.Идентификатор Тогда
						
							ЭлементУчастникДочерний = ПодчиненныеУчастники.Добавить();
							ЗаполнитьЗначенияСвойств(ЭлементУчастникДочерний, УчастникПодчиненный);
							ЭлементУчастникДочерний.Участник = УчастникПодчиненный.Участник;
							ЭлементУчастникДочерний.Функция = УчастникПодчиненный.ФункцияУчастника;
							ЭлементУчастникДочерний.ЭтоДочернийУчастник = Истина;
							ЭлементУчастникДочерний.УсловиеПредставление = УчастникПодчиненный.Условие;
							
							ЭлементУчастникДочерний.ЕстьОсобоеНаименованиеОписание = 
								ЗначениеЗаполнено(ЭлементУчастникДочерний.Описание);
								
						КонецЕсли;	
						
					КонецЦикла;
						
				КонецЦикла;
			
			Иначе
				
				УчастникЭтапа = УчастникиЭтапа.Добавить();
				УчастникЭтапа.Идентификатор = СтрокаЭтапа.Идентификатор;
				УчастникЭтапа.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
				УчастникЭтапа.Функция = СтрокаЭтапа.Функция;
				
				УчастникЭтапа.ЕстьОсобоеНаименованиеОписание = ЗначениеЗаполнено(УчастникЭтапа.Описание);
			КонецЕсли;
			
		Иначе // ознакомление
			ДействиеОбъект = РеквизитФормыВЗначение("Объект");
			УчастникОбрабатывающийРезультат = ДействиеОбъект.УчастникОбрабатывающийРезультат();
			Если ЗначениеЗаполнено(УчастникОбрабатывающийРезультат) Тогда 
				Для Каждого Участник Из УчастникОбрабатывающийРезультат Цикл
					УчастникЭтапа = УчастникиЭтапа.Добавить();
					ЗаполнитьЗначенияСвойств(УчастникЭтапа, Участник);
					УчастникЭтапа.Функция = СтрокаЭтапа.Функция;
					УчастникЭтапа.Идентификатор = СтрокаЭтапа.Идентификатор;
					УчастникЭтапа.УсловиеПредставление = УчастникЭтапа.Условие;
				КонецЦикла;
			Иначе 
				УчастникЭтапа = УчастникиЭтапа.Добавить();
				УчастникЭтапа.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
				УчастникЭтапа.Функция = СтрокаЭтапа.Функция;
				УчастникЭтапа.Идентификатор = СтрокаЭтапа.Идентификатор;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ЭлементыЭтапы = Участники.ПолучитьЭлементы();
	ЕстьЭтапы = Ложь;
	Для Каждого ЭлементЭтап Из ЭлементыЭтапы Цикл
		Если ЭлементЭтап.Идентификатор = ИдентификаторЭтапаПодписать 
			Или ЭлементЭтап.Идентификатор = ИдентификаторОбрабатывающегоРезультат Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьЭтапы = Истина;
		Прервать;
	КонецЦикла;
	
	//Показываем колонку "Менять участников", только если есть реальные этапы
	Элементы.УчастникиМенятьУчастников.Видимость = ЕстьЭтапы;
	ОбновитьПредставленияВДеревеУчастников(Участники);
	Команды.ПереключитьРазныеСроки.Подсказка = ДействияСервер.ПодсказкаКнопкиРазныеСроки(Ложь, ЕстьЭтапы);
	
КонецПроцедуры

// Заполняет объект по дереву участников.
//
&НаКлиенте
Процедура ОбновитьОбъектПоДеревуУчастников(Отказ)
	
	СсылкаНеуказанногоПользователя = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	Если Не ЗначениеЗаполнено(Объект.ВозможностьИзменятьУчастников) Тогда
		Объект.ВозможностьИзменятьУчастников = ПредопределенноеЗначение(
			"Перечисление.ВариантыДоступностиИзмененияДействий.Авто");
	КонецЕсли;
	
	Объект.Участники.Очистить();
	Объект.Этапы.Очистить();
	
	ЭлементыЭтапы = Участники.ПолучитьЭлементы();
	
	// Этапы пишем, только есть введенные руками. Если используется стандартный, то этапы не пишем
	ЕстьЭтапы = Ложь;
	Для Каждого ЭлементЭтап Из ЭлементыЭтапы Цикл
		Если ЭлементЭтап.Идентификатор = ИдентификаторЭтапаПодписать Тогда
			Объект.ПорядокВыполненияУчастниками = ЭлементЭтап.Порядок;
		КонецЕсли;
		
		Если ЭлементЭтап.Идентификатор = ИдентификаторЭтапаПодписать 
			Или ЭлементЭтап.Идентификатор = ИдентификаторОбрабатывающегоРезультат Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьЭтапы = Истина;
		Прервать;
	КонецЦикла;
		
	Для Каждого ЭлементЭтап Из ЭлементыЭтапы Цикл
		
		ИдентификаторЭтапа = Неопределено;
		
		Если ЕстьЭтапы 
			И ЭлементЭтап.Идентификатор <> ИдентификаторОбрабатывающегоРезультат Тогда
			// Для стандартного этапа меняем идентификатор, если заданы другие этапы
			Если ЭлементЭтап.Идентификатор = ИдентификаторЭтапаПодписать Тогда 
				ЭлементЭтап.Идентификатор = Новый УникальныйИдентификатор(); 
			КонецЕсли;
			
			Этап = Объект.Этапы.Добавить();
			ЗаполнитьЗначенияСвойств(Этап, ЭлементЭтап);
			Этап.ПорядокВыполненияУчастниками = ЭлементЭтап.Порядок;
			ИдентификаторЭтапа = ЭлементЭтап.Идентификатор;
			
			Если Не ЗначениеЗаполнено(Этап.ВозможностьИзменятьУчастников) Тогда
				Этап.ВозможностьИзменятьУчастников = Объект.ВозможностьИзменятьУчастников;
			КонецЕсли;
		КонецЕсли;
		
		ЭлементыУчастники = ЭлементЭтап.ПолучитьЭлементы();
		
		Для Каждого ЭлементУчастник Из ЭлементыУчастники Цикл
			
			Если Не ЗначениеЗаполнено(ЭлементУчастник.Участник) 
				Или ЭлементУчастник.Участник = СсылкаНеуказанногоПользователя Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементУчастник.Функция = ПредопределенноеЗначение(
				"Перечисление.ФункцииУчастниковПодписания.Подписывающий") Тогда
					
				Отбор = Новый Структура("Участник, Описание", 
					ЭлементУчастник.Участник, ЭлементУчастник.Описание);
				Если ЭлементУчастник.Защищенный Тогда
					// Все дубли должны быть отмечены как защищенные. Найдем неотмеченных.
					Отбор.Вставить("Защищенный", Ложь);
				КонецЕсли;
				НайденныеСотрудники = Объект.Участники.НайтиСтроки(Отбор);
				Если НайденныеСотрудники.Количество() > 0 Тогда
					Отказ = Истина;
					ПоказатьПредупреждение(, СтрШаблон(
						НСтр("ru = 'В этапах подписания повторяется подписывающий: %1. 
						|Удалите дубли, укажите особое описание или установите подписывающему признак ""Защищенный""'"),
							ЭлементУчастник.Участник));
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			Участник = Объект.Участники.Добавить();
			ЗаполнитьЗначенияСвойств(Участник, ЭлементУчастник);
			Участник.ФункцияУчастника = ЭлементУчастник.Функция;
			Если ЗначениеЗаполнено(ИдентификаторЭтапа) Тогда
				Участник.ИдентификаторЭтапа = ИдентификаторЭтапа;
			КонецЕсли;
			Участник.Идентификатор = Новый УникальныйИдентификатор();
			
			// второй уровень
			ЭлементыУчастникиДочерние = ЭлементУчастник.ПолучитьЭлементы();
			
			Для Каждого ЭлементУчастникДочерний Из ЭлементыУчастникиДочерние Цикл
				
				Если Не ЗначениеЗаполнено(ЭлементУчастникДочерний.Участник) 
					Или ЭлементУчастникДочерний.Участник = СсылкаНеуказанногоПользователя Тогда
					Продолжить;
				КонецЕсли;

				Отбор = Новый Структура("Участник, ФункцияУчастника", 
					ЭлементУчастникДочерний.Участник, ЭлементЭтап.Функция);
				Если ЭлементУчастникДочерний.Защищенный Тогда
				// Все дубли должны быть отмечены как защищенные. Найдем неотмеченных.
					Отбор.Вставить("Защищенный", Ложь);
				КонецЕсли;

				НайденныеСотрудники = Объект.Участники.НайтиСтроки(Отбор);
				Если НайденныеСотрудники.Количество() > 0 Тогда
					Отказ = Истина;
					ПоказатьПредупреждение(, СтрШаблон(
						НСтр("ru = 'В этапе ""%1"" повторяется участник: %2. Удалите дубли или установите участнику признак ""Защищенный""'"),
							ЭлементЭтап.НаименованиеЭтапа ,ЭлементУчастникДочерний.Участник));
					Возврат;
				КонецЕсли;
				
				УчастникДочерний = Объект.Участники.Добавить();
				ЗаполнитьЗначенияСвойств(УчастникДочерний, ЭлементУчастникДочерний);
				УчастникДочерний.Участник = ЭлементУчастникДочерний.Участник;
				УчастникДочерний.ФункцияУчастника = ЭлементУчастникДочерний.Функция;
				
				УчастникДочерний.Идентификатор = Новый УникальныйИдентификатор();
				УчастникДочерний.ВышестоящийУчастник = Участник.Идентификатор; // берем от родителя (в ТЧ)
				
				УчастникДочерний.ИдентификаторЭтапа = Участник.ИдентификаторЭтапа; // берем от родителя (в ТЧ)
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Разворачивает дерево участников.
//
&НаКлиенте
Процедура РазвернутьДеревоУчастников()
	
	Для Каждого Этап Из Участники.ПолучитьЭлементы() Цикл
		Элементы.Участники.Развернуть(Этап.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

// Обновляет идентификаторы этапов в дереве Участники.
//
&НаКлиенте
Процедура ОбновитьИдентификаторыЭтаповУчастников()
	
	ЭтапыУчастников = Участники.ПолучитьЭлементы();
	
	Для Каждого ЭтапУчастников Из ЭтапыУчастников Цикл
		
		УчастникиЭтапа = ЭтапУчастников.ПолучитьЭлементы();
		
		Для Каждого УчастникЭтапа Из УчастникиЭтапа Цикл
			
			Если УчастникЭтапа.Идентификатор <> ЭтапУчастников.Идентификатор Тогда
				УчастникЭтапа.Идентификатор = ЭтапУчастников.Идентификатор;
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляет представления строк в дереве участников.
//
// Параметры:
//  Участники - ДанныеФормыДерево - дерево с участниками.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставленияВДеревеУчастников(Участники)
	
	ЭтапыУчастников = Участники.ПолучитьЭлементы();

	Для ИндексЭтапа = 0 По ЭтапыУчастников.Количество() - 1 Цикл
		
		СтрокаЭтапа = ЭтапыУчастников.Получить(ИндексЭтапа);

		СтрокаЭтапа.ПрефиксСтроки = "";
		СтрокаЭтапа.ПредставлениеСтроки = СтрокаЭтапа.НаименованиеЭтапа;
		
		УчастникиЭтапа = СтрокаЭтапа.ПолучитьЭлементы();

		Для ИндексУчастника = 0 По УчастникиЭтапа.Количество() - 1 Цикл
			СтрокаУчастника = УчастникиЭтапа[ИндексУчастника];

			СтрокаУчастника.ПрефиксСтроки = "";
			СтрокаУчастника.ПредставлениеСтроки = ДействияКлиентСервер.ПредставлениеУчастника(СтрокаУчастника.Участник);
			
			Если Не ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
				СтрокаУчастника.ПредставлениеСтроки = ДействияКлиентСервер.ПредставлениеУчастника(
					ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка"));
			КонецЕсли;	
			
			УчастникиЭтапа2 = СтрокаУчастника.ПолучитьЭлементы();
	
			Для ИндексУчастника2 = 0 По УчастникиЭтапа2.Количество() - 1 Цикл
				СтрокаУчастника = УчастникиЭтапа2[ИндексУчастника2];
	
				СтрокаУчастника.ПрефиксСтроки = "";
				СтрокаУчастника.ПредставлениеСтроки = ДействияКлиентСервер.ПредставлениеУчастника(
					СтрокаУчастника.Участник);
				
				Если Не ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
					СтрокаУчастника.ПредставлениеСтроки = ДействияКлиентСервер.ПредставлениеУчастника(
						ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка"));
				КонецЕсли;	
				
			КонецЦикла;
			
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОбеспечивающегоПодписание(Команда)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЭтап Тогда
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.ЭтоДочернийУчастник Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеРодителя = ТекущиеДанные.ПолучитьРодителя();
	Если ТекущиеДанныеРодителя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанныеРодителя.Функция = ПредопределенноеЗначение(
		"Перечисление.ФункцииУчастниковПодписания.ОбрабатывающийРезультат") Тогда
		ПоказатьПредупреждение(, 
			НСтр("ru = 'Добавление в этап обработки результата невозможно.'"));
		Возврат;
	КонецЕсли;
	
	СтрокиПодписывающего = ТекущиеДанные.ПолучитьЭлементы();
	Если СтрокиПодписывающего.Количество() <> 0 Тогда
		ПоказатьПредупреждение(, 
			НСтр("ru = 'У подписывающего может быть только один обеспечивающий подписание.'"));
		Возврат;
	КонецЕсли;	

	Модифицированность = Истина;
	
	СтрокаУчастника = СтрокиПодписывающего.Добавить();
	СтрокаУчастника.Идентификатор = ТекущиеДанные.Идентификатор;
	СтрокаУчастника.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.ОбеспечивающийПодписание");
	СтрокаУчастника.ЭтоДочернийУчастник	= Истина;
	СтрокаУчастника.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	СтрокаУчастника.ПредставлениеСтроки = ДействияКлиентСервер.ПредставлениеУчастника(СтрокаУчастника.Участник);

	СкопироватьДанныеКОбеспечивающемуПодписание(СтрокаУчастника, ТекущиеДанные);
	
	Если ТекущиеДанные.СрокОбщий Тогда
		ЗаполнитьЗначенияСвойств(СтрокаУчастника, ТекущиеДанные);
	КонецЕсли;
	
	Элементы.Участники.ТекущаяСтрока = СтрокаУчастника.ПолучитьИдентификатор();
	
	ЗаполнитьПредставлениеСроков();
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьДанныеКОбеспечивающемуПодписание(Куда, Откуда)
	
	Куда.ВариантУстановкиСрока = Откуда.ВариантУстановкиСрока;
	
	Куда.Описание = Откуда.Описание;
	Куда.ЕстьОсобоеНаименованиеОписание = Откуда.ЕстьОсобоеНаименованиеОписание;

	ВариантыУстановкиСрока = СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();

	Если Куда.ВариантУстановкиСрока = ВариантыУстановкиСрока.ТочныйСрок Тогда
		Куда.Срок 	= Откуда.Срок;
	Иначе
		Куда.СрокДни 	= Откуда.СрокДни;
		Куда.СрокЧасы 	= Откуда.СрокЧасы;
		Куда.СрокМинуты 	= Откуда.СрокМинуты;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСпособыПодписанияИзВидаОбъекта()
	
	ВидОбъекта = Неопределено;
	Если Не Объект.Ссылка.Пустая() Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПравилаОбработкиОбъектов.ПравилоОбработки,
			|	ПравилаОбработкиОбъектов.ВидОбъекта
			|ИЗ
			|	РегистрСведений.ПравилаОбработкиОбъектов КАК ПравилаОбработкиОбъектов
			|ГДЕ
			|	ПравилаОбработкиОбъектов.Настройка = &Настройка";
		Запрос.Параметры.Вставить("Настройка", Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ВидОбъекта = Выборка.ВидОбъекта;
		КонецЦикла;
			
	ИначеЕсли Параметры.Свойство("КлючДляРегистрацииНастроек") 
		И ЗначениеЗаполнено(Параметры.КлючДляРегистрацииНастроек) Тогда
		
		ВидОбъекта = Справочники.ПравилаОбработки.ВидОбъектаКорневогоПравила(
			Параметры.КлючДляРегистрацииНастроек.ПравилоОбработки);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидОбъекта) 
		И ТипЗнч(ВидОбъекта) = Тип("СправочникСсылка.ВидыДокументов") Тогда
		ФормаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидОбъекта, "ФормаДокумента");
		Элементы.УчастникиДобавитьОбеспечивающегоПодписание.Заголовок = 
			НСтр("ru = 'Добавить обеспечивающего подписание (для бумажных документов)'");
		
		Если ФормаДокумента = Перечисления.ВариантыФормДокументов.Бумажная Тогда
			Элементы.СпособПодписания.СписокВыбора.Добавить(
				Перечисления.СпособыПодписанияПредметаДействия.НаБумаге);
						
		ИначеЕсли ФормаДокумента = Перечисления.ВариантыФормДокументов.Электронная Тогда
			Элементы.СпособПодписания.СписокВыбора.Добавить(
				Перечисления.СпособыПодписанияПредметаДействия.ПЭП);
				
			Если ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи") Тогда
				Элементы.СпособПодписания.СписокВыбора.Добавить(
					Перечисления.СпособыПодписанияПредметаДействия.УЭП);
			КонецЕсли;
			
			Элементы.УчастникиДобавитьОбеспечивающегоПодписание.Видимость = Ложь;
		Иначе
			Элементы.СпособПодписания.СписокВыбора.Добавить(
			Перечисления.СпособыПодписанияПредметаДействия.НаБумаге);
			Элементы.СпособПодписания.СписокВыбора.Добавить(
				Перечисления.СпособыПодписанияПредметаДействия.ПЭП);
				
			Если ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи") Тогда
				Элементы.СпособПодписания.СписокВыбора.Добавить(
					Перечисления.СпособыПодписанияПредметаДействия.УЭП);
			КонецЕсли;
			Элементы.СпособПодписания.Подсказка = 
				НСтр("ru = 'На способ подписания также влияет форма создаваемого документа. 
					 |Для бумажного документа способ подписания будет автоматически установлен в значение ""На бумаге"".'");
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ВидОбъекта) 
		И ТипЗнч(ВидОбъекта) = Тип("СправочникСсылка.ВидыМероприятий") Тогда
		Элементы.СпособПодписания.СписокВыбора.Добавить(
			Перечисления.СпособыПодписанияПредметаДействия.НаБумаге);
		Элементы.СпособПодписания.СписокВыбора.Добавить(
			Перечисления.СпособыПодписанияПредметаДействия.ПЭП);
		ЭтоНастройкаМероприятия = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьУчастников(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверкиДействительностиУчастников = 
		РаботаСУчастникамиКлиент.ПроверитьДействительностьУчастников(ЭтотОбъект);
	Если Не РезультатПроверкиДействительностиУчастников.ВсеДействительны Тогда
		
		Отказ = Истина;
		
		Обработчик = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиДействительностиУчастниковПродолжение",
			ЭтотОбъект);
		
		РаботаСУчастникамиКлиент.ОбработатьРезультатПроверкиДействительностиУчастников(
			РезультатПроверкиДействительностиУчастников,
			Обработчик);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработать результат проверки действительности участников продолжение.
// 
// Параметры:
//  Результат - Структура - результат проверки и выбор пользователя:
//   * РезультатПроверки - см. РаботаСУчастникамиВызовСервера.ПроверитьДействительностьУчастников
//   * ВариантОбработки - Число, КодВозвратаДиалога - 0 - заменить, 1 - оставить как есть,
//                                                    КодВозвратаДиалога.Отмена - отмена.
//  ДополнительныеПараметры - Произвольный
//
&НаКлиенте
Процедура ОбработатьРезультатПроверкиДействительностиУчастниковПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ВариантОбработки = Результат.ВариантОбработки;
	
	// Выбрана отмена.
	Если ВариантОбработки = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	// Хочет продолжить как есть.
	Если ВариантОбработки = 1 Тогда
		ЗаписатьЗакрытьБезПроверкиУчастников();
		Возврат;
	КонецЕсли;
	
	// Согласился заменить участников.
	Если ВариантОбработки = 0 Тогда
		ОбработчикЗамены = Новый ОписаниеОповещения("УчастникиЗамена", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.ФормаЗаменыУчастников", Результат.РезультатПроверки, ЭтотОбъект,,,,
			ОбработчикЗамены);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЗакрытьБезПроверкиУчастников(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не Записать(Новый Структура("НеПроверятьУчастников", Истина)) Тогда
		Возврат;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиЗамена(Замены, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Замены = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаменитьУчастниковНаСервере(Замены);
	РазвернутьДеревоУчастников();
	
КонецПроцедуры

// Заменить участников на сервере.
// 
// Параметры:
//  Замены - Массив Из Структура:
//   * ВидУчастника - СправочникСсылка.ВидыУчастниковЗадач
//   * Участник - СправочникСсылка.Сотрудники
//   * УчастникЗаменитьНа - СправочникСсылка.Сотрудники
&НаСервере
Процедура ЗаменитьУчастниковНаСервере(Замены)
	
	БылиЗамены = Ложь;
	
	Для Каждого Замена Из Замены Цикл
		
		КлючиСтруктурыОтбора = "ФункцияУчастника, Участник";
		СтруктураОтбора = Новый Структура(КлючиСтруктурыОтбора);
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Замена, КлючиСтруктурыОтбора);
		НайденныеСтрокиУчастников = Объект.Участники.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаУчастника Из НайденныеСтрокиУчастников Цикл
			СтрокаУчастника.Участник = Замена.УчастникЗаменитьНа;
			БылиЗамены = Истина;
		КонецЦикла; 
		
	КонецЦикла;
	
	Если БылиЗамены Тогда
		
		Модифицированность = Истина;
		ОбновитьДеревоУчастниковПоОбъекту();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МоментРазыменованияУчастниковОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#КонецОбласти
