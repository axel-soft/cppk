#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("Ссылка");
	Поля.Добавить("ВидДействия");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Представление = ДействияСервер.ПредставлениеДействия(Данные.Ссылка, Данные.ВидДействия);
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ДействияСервер.ОбработкаПолученияФормы(
		ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
		
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Заполняет дерево на закладке Обработка
// 
// Параметры
// ЭлементДействие - элемент дерева 
// Действие - ссылка на действие 
// ПредметОбъект - ОпределяемыйТип.ПредметДействияОбъект.
//
Процедура ЗаполнитьДействиеВФормеПредмета(ЭлементДействие, Действие, ПредметОбъект, 
	НужнаИсторияОбработки, ПечатьКарточкиДокумента = Ложь) Экспорт     
	
	ДействиеСсылка = Неопределено;
	
	Если ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда 
		ЗначенияЗаполнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие,
			ИменаРеквизитовДляЗаполнения());
		
		ДействиеСсылка = ЗначенияЗаполнения.Ссылка;
		УчастникиДействия = ЗначенияЗаполнения.Участники.Выгрузить();
		УчастникиДействия.Сортировать("НомерСтроки Возр");
		
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникОбъект.ДействияОзнакомления") Тогда 
		ЗначенияЗаполнения = Новый Структура(ИменаРеквизитовДляЗаполнения());
		ЗаполнитьЗначенияСвойств(ЗначенияЗаполнения, Действие);
		УчастникиДействия = Действие.Участники;
		ДействиеСсылка = Действие.Ссылка;
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестный тип'");
	КонецЕсли;
	
	ЗначенияЗаполнения.Вставить("Действие", ДействиеСсылка);
	ЗначенияЗаполнения.Вставить("ВариантУстановкиСрока", Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок);
	ЗначенияЗаполнения.Вставить("СрокДействия", Дата(1, 1, 1));
	
	Участники = ДействияСервер.НоваяТаблицаУчастники();  
	
	ЕстьЗаписиРС = Ложь;
	РезультатыОзнакомлений = РезультатыОзнакомлений(ДействиеСсылка, ЕстьЗаписиРС);
	
	УчастникиИДатыДействия = Новый ТаблицаЗначений;

	МаксимальноеЧислоУчастниковДляПоказа = МаксимальноеЧислоУчастниковДляПоказа();    
	
	ЗначенияЗаполнения.Вставить("МассовыйРежим", Истина); // всегда для Ознакомления
	ЗначенияЗаполнения.Вставить("МаксимальноеЧислоУчастниковДляПоказа", МаксимальноеЧислоУчастниковДляПоказа);     
	
	СостояниеДействия = РегистрыСведений.СостоянияДействий.СостояниеДействия(ДействиеСсылка);
	
	УжеЗаполнилиУчастников = Ложь;
	
	Если ЕстьЗаписиРС Тогда
		УчастникиИДатыДействия = РегистрыСведений.УчастникиОзнакомлений.УчастникиИДатыДействия(ДействиеСсылка);
		
		ПолноеКоличество = УчастникиИДатыДействия.Количество();
		
		Если УчастникиИДатыДействия.Количество() <= МаксимальноеЧислоУчастниковДляПоказа Тогда
			
			// заполним сразу по этим данным
			УжеЗаполнилиУчастников = Истина;
			
			Для Каждого Участник Из УчастникиИДатыДействия Цикл  
				
				ДобавляемыйУчастник = Участники.Добавить();      
				ЗаполнитьЗначенияСвойств(ДобавляемыйУчастник, Участник);
				ДобавляемыйУчастник.Функция = Перечисления.ФункцииУчастниковОзнакомления.Ознакомляемый;
				
				ДобавляемыйУчастник.СрокОзнакомления = Участник.Срок;
				ДобавляемыйУчастник.Идентификатор = Участник.ИдентификаторУчастника;
				ДобавляемыйУчастник.ПредставлениеФактическогоУчастникаОзнакомления = Участник.ПредставлениеФактическогоИсполнителя;
				
				Если ТипЗнч(ДобавляемыйУчастник.Участник) = Тип("СправочникСсылка.ПолныеРоли") Тогда
					
					РазвернутыеУчастники = ДействияСервер.РазвернутыеУчастники(
						ДобавляемыйУчастник.Участник, , , // для проверки
						Истина);
					Если РазвернутыеУчастники.Количество() = 1 Тогда
						ДобавляемыйУчастник.Участник = РазвернутыеУчастники[0];	
					КонецЕсли;	
					
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(Участник.ФактическийИсполнитель) Тогда
					ДобавляемыйУчастник.ФактическийУчастникОзнакомления = Участник.ФактическийИсполнитель;
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(Участник.ДатаЗавершения) Тогда
					ДобавляемыйУчастник.ДатаОзнакомления = Участник.ДатаЗавершения;
				Иначе	
					ДобавляемыйУчастник.ДатаОзнакомления = Участник.ДатаНачала;
				КонецЕсли;	
				
				Если Участник.Состояние = Перечисления.СостоянияОзнакомления.Ознакомился Тогда
					
					ДобавляемыйУчастник.СостояниеОзнакомления = Перечисления.СостоянияВыполненияДействий.Завершено;
					
				ИначеЕсли Участник.Состояние = Перечисления.СостоянияОзнакомления.НаПаузе Тогда
					
					ДобавляемыйУчастник.СостояниеОзнакомления = Перечисления.СостоянияВыполненияДействий.Остановлено;
					
				Иначе
					
					ДобавляемыйУчастник.СостояниеОзнакомления = Перечисления.СостоянияВыполненияДействий.Выполняется;
					
				КонецЕсли;	
				
			КонецЦикла;	
			
		КонецЕсли;	

	Иначе
		
		ПолноеКоличество = УчастникиДействия.Количество();
		
		// подсчитаем колво, и решим надо ли всех показать.   
		
		Если УчастникиДействия.Количество() <> 0 И ЗначениеЗаполнено(ДействиеСсылка) Тогда
		
			ДействиеОбъект = ДействиеСсылка.ПолучитьОбъект(); 
			
			УчастникиРазыменовка = ДействиеОбъект.Участники.Выгрузить(); // копии, чтобы не менять оригинал
			Источники = ДействиеОбъект.Источники.Выгрузить();
			Выгруженные = ДействиеОбъект.Участники.Выгрузить();
			
			РазыменоватьАвтора = Ложь;
			ДействиеОбъект.РазыменоватьРеализация(ПредметОбъект, УчастникиРазыменовка, Источники, Выгруженные, РазыменоватьАвтора);
			
			Если УчастникиРазыменовка.Количество() <= МаксимальноеЧислоУчастниковДляПоказа Тогда
				
				ЗначенияЗаполнения.МассовыйРежим = Ложь; // по старому делаем превью разыменования
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	
	Если Не УжеЗаполнилиУчастников Тогда 
		
		СтрокаУчастника_ИДругие = Неопределено;
		БолееНеДобавляем = Ложь;
		
		Для Каждого Участник Из УчастникиДействия Цикл   
			
			Если Не БолееНеДобавляем Тогда
				
				Если УчастникиИДатыДействия.Количество() <> 0 Тогда
					СтрокаИнфо = УчастникиИДатыДействия.Найти(Участник.Идентификатор, "ИдентификаторУчастникаДействия");
					Если СтрокаИнфо = Неопределено И 
						(ТипЗнч(Участник.Участник) = Тип("СправочникСсылка.ПолныеРоли")
						Или ТипЗнч(Участник.Участник) = Тип("СправочникСсылка.Сотрудники")
						Или ТипЗнч(Участник.Участник) = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов")) Тогда      
						Продолжить; // удален как дубль или АП вернула пусто
					КонецЕсли;	
				КонецЕсли;	
				
				ДобавляемыйУчастник = Участники.Добавить();
				ЗаполнитьЗначенияСвойств(ДобавляемыйУчастник, Участник);
				ДобавляемыйУчастник.Участник = Участник.Участник;
				ДобавляемыйУчастник.Функция = Перечисления.ФункцииУчастниковОзнакомления.Ознакомляемый;
				
				Если ТипЗнч(ДобавляемыйУчастник.Участник) = Тип("СправочникСсылка.ПолныеРоли") Тогда
					РазвернутыеУчастники = ДействияСервер.РазвернутыеУчастники(
						ДобавляемыйУчастник.Участник, , , // для проверки
						Истина // можно вернуть пустой массив
						);
					Если РазвернутыеУчастники.Количество() = 1 Тогда
						ДобавляемыйУчастник.Участник = РазвернутыеУчастники[0];
					КонецЕсли;	
				КонецЕсли;	
				
				СтруктураОзнакомления = РезультатыОзнакомлений.Получить(ДобавляемыйУчастник.Идентификатор);
				Если СтруктураОзнакомления <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ДобавляемыйУчастник, СтруктураОзнакомления);
					
					Если СтруктураОзнакомления.СколькоОзнакомлено < СтруктураОзнакомления.СколькоВсегоНадоОзнакомить Тогда
						ДобавляемыйУчастник.СостояниеОзнакомления = Перечисления.СостоянияВыполненияДействий.Выполняется;
					Иначе
						ДобавляемыйУчастник.СостояниеОзнакомления = Перечисления.СостоянияВыполненияДействий.Завершено;
					КонецЕсли;	 
					
					Если ТипЗнч(ДобавляемыйУчастник.Участник) <> Тип("СправочникСсылка.ПолныеРоли")
						И ТипЗнч(ДобавляемыйУчастник.Участник) <> Тип("СправочникСсылка.Сотрудники") Тогда
						
						СтрокаРегистра = УчастникиИДатыДействия.Найти(ДобавляемыйУчастник.Идентификатор, "ИдентификаторУчастникаДействия");
						Если СтрокаРегистра <> Неопределено Тогда       
							
							ДобавляемыйУчастник.ДатаОзнакомления = СтрокаРегистра.ДатаНачала;
							ДобавляемыйУчастник.СрокОзнакомления = СтрокаРегистра.Срок;
							
						КонецЕсли;
					
					КонецЕсли;
					
				КонецЕсли;
				
				Если УчастникиИДатыДействия.Количество() <> 0 Тогда
					СтрокаИнфо = УчастникиИДатыДействия.Найти(ДобавляемыйУчастник.Идентификатор, "ИдентификаторУчастника");
					Если СтрокаИнфо <> Неопределено Тогда      
						
						ДобавляемыйУчастник.РезультатОзнакомленияТекстом = СтрокаИнфо.РезультатОзнакомленияТекстом;
						
						ДобавляемыйУчастник.СрокРассчитанный = СтрокаИнфо.Срок;
						ДобавляемыйУчастник.Срок = СтрокаИнфо.Срок;
						
						Если ЗначениеЗаполнено(СтрокаИнфо.ДатаЗавершения) Тогда
							ДобавляемыйУчастник.ДатаОзнакомления = СтрокаИнфо.ДатаЗавершения;
						Иначе	
							ДобавляемыйУчастник.ДатаОзнакомления = СтрокаИнфо.ДатаНачала;
						КонецЕсли;	
						
						Если СтрокаИнфо.Состояние = Перечисления.СостоянияОзнакомления.Ознакомился Тогда
							
							ДобавляемыйУчастник.СостояниеОзнакомления = Перечисления.СостоянияВыполненияДействий.Завершено;
							
						ИначеЕсли СтрокаИнфо.Состояние = Перечисления.СостоянияОзнакомления.НаПаузе Тогда
							
							ДобавляемыйУчастник.СостояниеОзнакомления = Перечисления.СостоянияВыполненияДействий.Остановлено;
							
						Иначе
							
							ДобавляемыйУчастник.СостояниеОзнакомления = Перечисления.СостоянияВыполненияДействий.Выполняется;
							
						КонецЕсли;	
						
					КонецЕсли;	                   
				КонецЕсли;    
				
				Если СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Остановлено Тогда // пауза
					ДобавляемыйУчастник.СостояниеОзнакомления = СостояниеДействия;
				КонецЕсли;    	
				
			ИначеЕсли ЗначениеЗаполнено(СтрокаУчастника_ИДругие) Тогда	
				
				СтруктураОзнакомления = РезультатыОзнакомлений.Получить(Участник.Идентификатор);
				Если СтруктураОзнакомления <> Неопределено Тогда
					
					СтрокаУчастника_ИДругие.СколькоОзнакомлено = СтрокаУчастника_ИДругие.СколькоОзнакомлено + СтруктураОзнакомления.СколькоОзнакомлено;
					СтрокаУчастника_ИДругие.СколькоВсегоНадоОзнакомить = СтрокаУчастника_ИДругие.СколькоВсегоНадоОзнакомить + СтруктураОзнакомления.СколькоВсегоНадоОзнакомить;
					
				КонецЕсли;	                   
				
			КонецЕсли;
			
			Если Участники.Количество() >= МаксимальноеЧислоУчастниковДляПоказа 
				И Не БолееНеДобавляем Тогда
				
				ДобавляемыйУчастник = Участники.Добавить();    
				ДобавляемыйУчастник.Идентификатор = Новый УникальныйИдентификатор; 
				ДобавляемыйУчастник.Функция = Перечисления.ФункцииУчастниковОзнакомления.Ознакомляемый;
				
				Если ПолноеКоличество = 0 Тогда
					ПолноеКоличество = УчастникиДействия.Количество();
				КонецЕсли;	
				
				Если ЕстьЗаписиРС Тогда
					
					ДобавляемыйУчастник.ДопОписаниеОзнакомиться = СтрШаблон(
						НСтр("ru = ' и др., всего %1, см ""Ход ознакомления"". '"), ПолноеКоличество);
						
					ДобавляемыйУчастник.СостояниеОзнакомления = Перечисления.СостоянияВыполненияДействий.Выполняется;	
					
					Если СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено Тогда
						ДобавляемыйУчастник.СостояниеОзнакомления = Перечисления.СостоянияВыполненияДействий.Завершено;	
					КонецЕсли;	
					
				Иначе
						
					ДобавляемыйУчастник.ДопОписаниеОзнакомиться = 
						НСтр("ru = ' и др.'");
						
				КонецЕсли;	   
					
				БолееНеДобавляем = Истина;	
				СтрокаУчастника_ИДругие = ДобавляемыйУчастник;    
				
				Если СтруктураОзнакомления <> Неопределено Тогда
					
					СтрокаУчастника_ИДругие.СколькоОзнакомлено = 0;
					СтрокаУчастника_ИДругие.СколькоВсегоНадоОзнакомить = 0;
					
				Иначе	

					СтрокаУчастника_ИДругие.СколькоОзнакомлено = 0;
					СтрокаУчастника_ИДругие.СколькоВсегоНадоОзнакомить = 0;
					
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЦикла;
		
		Если СтрокаУчастника_ИДругие <> Неопределено Тогда
			
			Если СтрокаУчастника_ИДругие.СколькоОзнакомлено < СтрокаУчастника_ИДругие.СколькоВсегоНадоОзнакомить Тогда
				СтрокаУчастника_ИДругие.СостояниеОзнакомления = Перечисления.СостоянияВыполненияДействий.Выполняется;
			ИначеЕсли СтрокаУчастника_ИДругие.СколькоВсегоНадоОзнакомить <> 0 Тогда
				СтрокаУчастника_ИДругие.СостояниеОзнакомления = Перечисления.СостоянияВыполненияДействий.Завершено;
			КонецЕсли;	 
			
		КонецЕсли;	
		
	КонецЕсли;                            
	
	Если СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено Тогда
		ЭлементДействие.Состояние = Перечисления.СостоянияВыполненияДействий.Завершено;
		ЭлементДействие.Результат = Перечисления.РезультатыОзнакомления.Ознакомлен;
	КонецЕсли;	

	ЗначенияЗаполнения.Вставить("Участники", Участники);
	
	ДействияСервер.ЗаполнитьДействиеВФормеПредмета(ЭлементДействие, ДействиеСсылка, 
		ЗначенияЗаполнения, ПредметОбъект, , , НужнаИсторияОбработки, ПечатьКарточкиДокумента);
	
КонецПроцедуры

// Проверяет строки участников на возможность начать обработку по ним.
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияОзнакомления - Ссылка на действие.
// 	ПредметОбъект - ОпределяемыйТип.ПредметДействияОбъект. 
// 	СообщенияОбОшибках - Массив - массив сообщений об ошибках.
// 	ПараметрыПроверок - Структура - вспомогательные параметры проверки перед запуском.
//
Процедура ПроверкаПередЗапуском(Действие, ПредметОбъект, СообщенияОбОшибках, ПараметрыПроверок) Экспорт
	
КонецПроцедуры

// Возвращает всех участников действия
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияОзнакомления - ссылка на действие
// 	
// Возвращаемое значение:
// 	ТаблицаЗначений - таблица участников действия.
// 
Функция УчастникиДействия(Действие) Экспорт
	
	Участники = ДействияСервер.НоваяТаблицаУчастники();
	
	УчастникиДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие,
		"Участники");
	УчастникиДействия = УчастникиДействия.Выгрузить();
	УчастникиДействия.Сортировать("НомерСтроки Возр");
	
	Для Каждого Участник Из УчастникиДействия Цикл 
		Если Не ЗначениеЗаполнено(Участник.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавляемыйУчастник = Участники.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавляемыйУчастник, Участник);
		ДобавляемыйУчастник.Функция = Перечисления.ФункцииУчастниковОзнакомления.Ознакомляемый;
		
	КонецЦикла;
	
	Возврат Участники;
	
КонецФункции

// Возвращает всех участников действия
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияОзнакомления - ссылка на действие
// 	
// Возвращаемое значение:
// 	ТаблицаЗначений - таблица участников действия.
// 
Функция ВсеУчастникиДействия(Действие) Экспорт
	
	Участники = ДействияСервер.НоваяТаблицаУчастники();
	
	УчастникиДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие,
		"Участники");
	УчастникиДействия = УчастникиДействия.Выгрузить();
	
	Для Каждого Участник Из УчастникиДействия Цикл 
		Если Не ЗначениеЗаполнено(Участник.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавляемыйУчастник = Участники.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавляемыйУчастник, Участник);
		ДобавляемыйУчастник.Функция = Перечисления.ФункцииУчастниковОзнакомления.Ознакомляемый;
		
	КонецЦикла;
	
	Возврат Участники;
	
КонецФункции

// Готовит действие к выполнению
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияОзнакомления - ссылка на действие
//
Процедура ПодготовитьДействиеКВыполнению(Действие) Экспорт
	
КонецПроцедуры	

// Готовит действие к выполнению
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияОзнакомления - ссылка на действие
//  МассивИсключений - Массив из УникальныйИдентификатор  (ТЧ Участники - Идентификатор)
//
// Возвращаемое значение:
// 	Число - сколько заполнили в РС
// 
Функция ЗаполнитьРегистрУчастниковОзнакомленияИВернутьКоличество(Действие, МассивИсключений = Неопределено) Экспорт      
	
	ОжидатьЗавершения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "ОжидатьЗавершения");
	СколькоСоздано = 0;

	Если Истина Тогда   //всегда
		
		ВсеИдентификаторыУчастников = Новый Массив;

		ДействиеОбъект = Действие.ПолучитьОбъект(); 
		
		Участники = ДействиеОбъект.Участники.Выгрузить(); // копии, чтобы не менять оригинал
		Источники = ДействиеОбъект.Источники.Выгрузить();
		Выгруженные = ДействиеОбъект.Участники.Выгрузить();
		ВыгруженныеКопия = Выгруженные.Скопировать();
		ПредметОбъект = ДействиеОбъект.Предмет.ПолучитьОбъект();   
		
		Если МассивИсключений <> Неопределено Тогда
			
			Для Каждого ИдентификаторИсключения Из МассивИсключений Цикл
				
				СтрокаТЧ = Выгруженные.Найти(ИдентификаторИсключения, "Идентификатор");
				Если СтрокаТЧ <> Неопределено Тогда
					
					Выгруженные.Удалить(СтрокаТЧ);
					
				КонецЕсли;	
				
			КонецЦикла;	
				
		КонецЕсли;		
		
		ДействиеОбъект.РазыменоватьРеализация(ПредметОбъект, Участники, Источники, Выгруженные);
		
		Если МассивИсключений <> Неопределено Тогда
			
			// удалим дубли.
			ТекущиеУчастники = РегистрыСведений.УчастникиОзнакомлений.УчастникиДействия(Действие);
			
			МаксНомер = Участники.Количество() - 1;
			Для пер = 0 По МаксНомер Цикл   
				
				СтрокаУчастника = Участники[МаксНомер - пер];
				НайденнаяСтрока = ТекущиеУчастники.Найти(СтрокаУчастника.Участник, "Участник");
				Если НайденнаяСтрока <> Неопределено Тогда
					Участники.Удалить(СтрокаУчастника);
				КонецЕсли;	
				
			КонецЦикла;	
			
			Если Участники.Количество() = 0 Тогда // при добавлении в карточке действия
				Возврат СколькоСоздано;
			КонецЕсли;	
			
		КонецЕсли;	 
		
		КешГрафиковРаботы = Новый Соответствие;
		ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");

		Если ИспользоватьГрафикиРаботы Тогда
			
			УчастникиМассив = Новый Массив;
			
			Для Каждого Стр Из Участники Цикл
				
				Участник = Стр.Участник;
				
				Если ТипЗнч(Участник) = Тип("СправочникСсылка.Сотрудники") 
						Или ТипЗнч(Участник) = Тип("СправочникСсылка.Пользователи") Тогда
					УчастникиМассив.Добавить(Участник);
				Иначе
					КешГрафиковРаботы[Участник] = ОбщегоНазначенияДокументооборотПовтИсп.ПолучитьОсновнойГрафикРаботы();
				КонецЕсли;

			КонецЦикла;	
			
			// получим Соответствие -Ключ - Участник, Значение - ГрафикРаботы
			КешГрафиковРаботы = СрокиИсполненияПроцессовКОРП.КешГрафиковРаботы(УчастникиМассив);
			
		КонецЕсли;
		
		Если МассивИсключений = Неопределено Тогда
			Если ЕстьЗадачиСЭтимОзнакомлением(Действие) Тогда
				Возврат 0;
			КонецЕсли;	
		КонецЕсли;	
		
		НачатьТранзакцию();
		Попытка       
			
			//запишем в РС.
			НаборЗаписей = РегистрыСведений.УчастникиОзнакомлений.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Действие.Установить(Действие);     
			
			Если МассивИсключений = Неопределено Тогда
				НаборЗаписей.Записать(Истина); // стираем все.
			КонецЕсли;	
			
			РазмерПорции = 1000;
			ДатаОтсчета = ТекущаяДатаСеанса();  
			
			КешСроков = Новый Соответствие; // ключ - ИдентификаторУчастникаДействия + график, значение - срок.
			
			ИспользоватьЗаданияФО = ПолучитьФункциональнуюОпцию("ИспользоватьЗадания");
			
			Если Участники.Количество() <> 0 Тогда
				// Создадим ссылку для привязки задач.
				ИнтеграцияЗадач.ОбновитьЗадачуПоИсточнику(Действие);
			КонецЕсли;
			
			Для Каждого Стр Из Участники Цикл
				
				Запись = НаборЗаписей.Добавить();  
				СколькоСоздано = СколькоСоздано + 1;
				
				Запись.Действие = Действие;
				Запись.ДатаНачала = ДатаОтсчета;          
				
				Запись.ИдентификаторУчастника = Стр.Идентификатор;      
				ВсеИдентификаторыУчастников.Добавить(Стр.Идентификатор);
				
				ИсточникСтрока = Источники.Найти(Стр.Идентификатор, "Идентификатор");
				Если ИсточникСтрока <> Неопределено Тогда 
					
					Запись.ИдентификаторУчастникаДействия = ИсточникСтрока.ИдентификаторИсходный;
					
				КонецЕсли;
				
				Запись.Состояние = Перечисления.СостоянияОзнакомления.НаОзнакомлении;
				
				ИсполнительЗадачи = Стр.Участник;
				
				Если Не ИспользоватьГрафикиРаботы Тогда
					
					ГрафикРаботы = Справочники.ГрафикиРаботы.ПустаяСсылка();
					
				Иначе	
					
					ГрафикРаботы = КешГрафиковРаботы[ИсполнительЗадачи];
					Если ГрафикРаботы = Неопределено Тогда
						ГрафикРаботы = СрокиИсполненияПроцессовКОРП.ГрафикРаботыУчастникаПроцесса(
							ИсполнительЗадачи); 
					КонецЕсли;
						
				КонецЕсли;	
					
				КлючПоиска = Строка(Запись.ИдентификаторУчастникаДействия);
				Если ЗначениеЗаполнено(ГрафикРаботы) Тогда
					КлючПоиска = КлючПоиска + "_" + Строка(ГрафикРаботы.УникальныйИдентификатор());
				КонецЕсли; 
				
				КлючПоиска = КлючПоиска + "_" + Строка(Стр.Срок);
				КлючПоиска = КлючПоиска + "_" + Строка(Стр.СрокДни);
				КлючПоиска = КлючПоиска + "_" + Строка(Стр.СрокЧасы);
				КлючПоиска = КлючПоиска + "_" + Строка(Стр.СрокМинуты);
				
				СрокВКеше = КешСроков.Получить(КлючПоиска);	
				
				Если СрокВКеше <>  Неопределено Тогда
					
					Запись.Срок = СрокВКеше;	
					
				Иначе	
					
					Запись.Срок = СрокиИсполненияПроцессовКОРП.ЗаполнитьСрокИсполненияУчастника(
						ИсполнительЗадачи, 
						ДатаОтсчета,
						Стр.ВариантУстановкиСрока,
						Стр.Срок,
						Стр.СрокДни,
						Стр.СрокЧасы,
						Стр.СрокМинуты); 
						
					КешСроков[КлючПоиска] = Запись.Срок;	
						
				КонецЕсли;	
				
				Запись.Участник = Стр.Участник;
				Запись.Исполнитель = Стр.Участник;   
				
				Запись.Описание = Стр.Описание;

				Если Не ИспользоватьЗаданияФО Тогда // файловый вариант
					ИнтеграцияЗадач.ОбновитьДействиеЗадачиПоДействиюОзнакомления(
						Действие,
						Запись.ИдентификаторУчастника);
					
					ПараметрыИзменения = ДействияСервер.СтруктураПараметровИзмененияДанныхДействия(); 
					
					ПараметрыИзменения.Функция = Перечисления.ФункцииУчастниковОзнакомления.Ознакомляемый;
					ПараметрыИзменения.ИдентификаторУчастника = Запись.ИдентификаторУчастника;
					
					ПараметрыИзменения.Участник = Запись.Участник;
							
					ПараметрыИзменения.СрокРассчитанный = Запись.Срок;	
					ПараметрыИзменения.ДатаНачала = Запись.ДатаНачала;
					
					ДействияСервер.НачатьВыполнениеДействияУчастником(Действие, ПараметрыИзменения);
					
				Иначе	
					// создадим задание      
					ОбработкаОчередиЗаданийСервер.ДобавитьЗаданиеОбновитьЗадачуУчастникаМассовогоОзнакомления(
						Действие, Запись.ИдентификаторУчастника);
				КонецЕсли;
					
				
				Если НаборЗаписей.Количество() >= РазмерПорции Тогда
					НаборЗаписей.Записать(Ложь); // без замещения
					НаборЗаписей.Очистить();
				КонецЕсли;	
				
			КонецЦикла;
			
			Если НаборЗаписей.Количество() <> 0 Тогда
				НаборЗаписей.Записать(Ложь); // без замещения
			КонецЕсли;
			
			Если Участники.Количество() <> 0 Тогда
				// Заполним задачу актуальными данными регистра.  
				НеПисатьВИсторию = Истина;
				ИнтеграцияЗадач.ОбновитьЗадачуПоИсточнику(Действие, НеПисатьВИсторию);
			КонецЕсли;
			
			Изменение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ДействиеОбъект.ВидДействия, "РазрешитьУчастникамИзменятьПредмет");
			УчастникиДляРГ = ДействиеОбъект.РазыменованныеУчастникиДляРГ(
				Действие, ПредметОбъект, ДействиеОбъект.Участники.Выгрузить(), Изменение);
			РаботаСРабочимиГруппами.ДобавитьУчастниковВРабочуюГруппуОбъекта(
				ДействиеОбъект.Предмет, УчастникиДляРГ, Истина, Ложь);
			
			ЗафиксироватьТранзакцию();
			
		Исключение           
			
			ПредставлениеОшибки = СтрШаблон(
				НСтр("ru = 'ЗаполнитьРегистрУчастниковОзнакомленияИВернутьКоличество:
							|%1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ОтменитьТранзакцию();
			ВызватьИсключение ПредставлениеОшибки;
			
		КонецПопытки;	
		
		Если Не ИспользоватьЗаданияФО Тогда // файловый вариант
			
			Для Каждого ИдУчастника Из ВсеИдентификаторыУчастников Цикл
				
				ИнтеграцияЗадач.ОбновитьДействиеЗадачиПоДействиюОзнакомления(
					Действие,
					ИдУчастника);
				
			КонецЦикла;	
			
		КонецЕсли;	
			
	КонецЕсли;   
	
	Возврат СколькоСоздано;
	
КонецФункции

Функция ЕстьЗадачиСЭтимОзнакомлением(Действие)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Задача.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.Задача КАК Задача
	               |ГДЕ
	               |	Задача.Источник = &Источник
	               |	И (Задача.СостояниеЗадачи = &СостояниеЗадачи1
	               |			ИЛИ Задача.СостояниеЗадачи = &СостояниеЗадачи2)";
	
	Запрос.УстановитьПараметр("Источник", Действие);
	Запрос.УстановитьПараметр("СостояниеЗадачи1", Справочники.СостоянияЗадач.Новая);
	Запрос.УстановитьПараметр("СостояниеЗадачи2", Справочники.СостоянияЗадач.НаОзнакомлении);
	
	Результат = Запрос.Выполнить();
	Возврат Не Результат.Пустой();
	
КонецФункции

// Отмечает в действии принятие к выполнению
//
//Параметры:
//  Действие - СправочникСсылка.ДействияОзнакомления - ссылка на действие
//  ПараметрыИзменения -Структура
//
Процедура ОтметитьПринятиеКИсполнению(Действие, ПараметрыИзменения) Экспорт
	
КонецПроцедуры	

// Проверяет необходимость выполнения действия.
//
// Если не соблюдены условия для обязательного действия, то
// генерируется исключение.
//
// Параметры:
//  Действие - ОпределяемыйТип.ДействияОбъект - объект действия.
//  ПропуститьДействие - Булево - неявно возвращаемый параметр, принимает значение Истина,
//                            если необходимо пропустить исполнение действия.
//
Процедура ПроверитьНеобходимостьВыполненияДействия(Действие, ПропуститьДействие) Экспорт
	
	ПропуститьДействие = Ложь;
	
	Участники = УчастникиДействия(Действие);
	
	// Проверяем наличие участников и если их нет,
	// то отказываемся от создания процесса по действию.
	Если Участники.Количество() = 0 Тогда
		ПропуститьДействие = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает представление действия строкой.
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияОзнакомления
// 	
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеДействияСтрокой(Действие) Экспорт
	
	СтрокиПредставления = Новый	Массив;
		
	РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Действие, "ВидДействия, Участники");
	
	РеквизитыДействия.Участники = РеквизитыДействия.Участники.Выгрузить();
	
	СтрокиПредставления.Добавить(Строка(РеквизитыДействия.ВидДействия));
	СтрокиПредставления.Добавить(Символы.ПС);
		
	Для Каждого СтрокаТаблицы Из РеквизитыДействия.Участники Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиПредставления.Добавить(Символы.ПС);
		СтрокиПредставления.Добавить(Строка(СтрокаТаблицы.Участник));
		
	КонецЦикла;
	
	Возврат СтрСоединить(СтрокиПредставления);
	
КонецФункции

// Возвращает участника, которого необходимо ознакомить с результатом завершения действия.
//
// Параметры:
//	Действие - СправочникСсылка.ДействияОзнакомления - Действие, в котором нужно найти участника, которого необходимо
//													   ознакомить с результатом.
//
// Возвращаемое значение:
//	* СправочникСсылка.Сотрудники,
//	  СправочникСсылка.ПолныеРоли, 
//	  СправочникСсылка.АвтоподстановкиДляОбъектов - участник, которого необходимо ознакомить с результатом.
//
Функция ОзнакамливаемыйСРезультатом(Действие) Экспорт

	Возврат ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(Действие, "Автор");
		
КонецФункции

// Возвращает описание результата завершения действия.
//
// Параметры:
//	Действие - СправочникСсылка.ДействияОзнакомления - Действие, для которого необходимо получить описание
//													   результата завершения.
//	КодЯзыка - Строка - Код языка пользователя
//
// Возвращаемое значение:
//	Строка - Описание результата завершения действия.
//
Функция ОписаниеРезультатаЗавершенияДействия(Действие, КодЯзыка) Экспорт

	ОписаниеРезультата = "";
	
	РезультатДействия = РегистрыСведений.РезультатыДействий.РезультатДействия(Действие);	
	Если РезультатДействия = Перечисления.РезультатыОзнакомления.Ознакомлен Тогда
		ОписаниеРезультата = НСтр("ru = 'Результат ознакомления: Ознакомлен'", КодЯзыка);
	ИначеЕсли РезультатДействия = Перечисления.РезультатыОзнакомления.Отказ Тогда
		ОписаниеРезультата = НСтр("ru = 'Результат ознакомления: Не ознакомлен'", КодЯзыка);
	КонецЕсли;	
					
	Возврат ОписаниеРезультата;
	
КонецФункции

// Создадим лист ознакомления.
//
// Параметры:
//   МассивОбъектов - Массив из СправочникСсылка.ДокументыПредприятия
//   ОбъектыПечати - Массив - коллекция объектов, по которым сформированы печатные формы.
//   БесшовнаяИнтеграция - Булево - печатная форма будет отправлена через бесшовную интеграцию на сторону ИС.
//
// Возвращаемое значение:
//   ТабличныйДокумент - печатная форма листа ознакомления.
//
Функция ТабличныйДокументЛистОзнакомления(МассивОбъектов, ОбъектыПечати, БесшовнаяИнтеграция = Ложь) Экспорт
	
	// Создаем табличный документ.
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.ДействияОзнакомления.ПФ_MXL_ЛистОзнакомления");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда
		ФорматнаяСтрока = "ДФ='dd.MM.yyyy ЧЧ:мм'";
	Иначе
		ФорматнаяСтрока = "ДФ='dd.MM.yyyy'";
	КонецЕсли;
	
	ПервыйДокумент = Истина;
	Для Каждого Предмет Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьИсполнителиШапка = Макет.ПолучитьОбласть("ИсполнителиШапка");
		ОбластьНеЗапускалось = Макет.ПолучитьОбласть("НеЗапускалось");
		
		Если ЗначениеЗаполнено(Предмет) Тогда
			ОбластьШапка.Параметры.Предмет = СтрШаблон("%1 ""%2""", Предмет.Метаданные().ПредставлениеОбъекта, Предмет);
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		ТаблицаОзнакомления = ТаблицаОзнакомления(Предмет);
		
		Если ТаблицаОзнакомления.Количество() = 0 Тогда
			
			ТабличныйДокумент.Вывести(ОбластьНеЗапускалось);
			
		Иначе
			
			ТабличныйДокумент.Вывести(ОбластьИсполнителиШапка);
			
			Для Каждого СтрокаУчастник Из ТаблицаОзнакомления Цикл
				
				Если СтрокаУчастник.Ознакомился Тогда
					
					ОбластьИсполнители = Макет.ПолучитьОбласть("ИсполнителиПодпись");
					ОбластьИсполнители.Параметры.Результат = Перечисления.РезультатыОзнакомления.Ознакомлен;
					ОбластьИсполнители.Параметры.ДатаИсполнения = Формат(СтрокаУчастник.Дата, ФорматнаяСтрока);
					ОбластьИсполнители.Параметры.РезультатВыполнения = СтрокаУчастник.РезультатВыполнения;
					ОбластьИсполнители.Параметры.Подпись = СтрокаУчастник.ТекстПодписи;
					
					Если Не БесшовнаяИнтеграция И ЗначениеЗаполнено(СтрокаУчастник.ДанныеОзнакомленияПодПодпись) Тогда
						
						ДанныеОзнакомления = СтрокаУчастник.ДанныеОзнакомленияПодПодпись;
						Если Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОзнакомления, "ВерсииФайлов").Пустой()
							Или Не СтрокаУчастник.ВерсииИдентичны Тогда
							
							ОбластьИсполнители.Параметры.ОтличияВерсийФайлов = СтрШаблон(
								"v8doc:MXLDetails/ShowFamiliarizationFileVersions/%1",
								ПолучитьНавигационнуюСсылку(ДанныеОзнакомления));
								
						КонецЕсли;
						
						Если СтрокаУчастник.Подписана Тогда
							ОбластьИсполнители.Параметры.ПодписьРасшифровка = РаботаСЭП.СсылкаНаФормуЭПОбъекта(
								ДанныеОзнакомления);
						КонецЕсли;
						
					КонецЕсли;
					
					Если Не СтрокаУчастник.ВерсииИдентичны Тогда
						ОбластьИсполнители.Параметры.ЗамечаниеОбИзмененииФайлов = 
							НСтр("ru = 'Версия файла(-ов), с которым происходило ознакомление, отличается от текущей(-их)'");
					КонецЕсли;
					
				Иначе
					
					ОбластьИсполнители = Макет.ПолучитьОбласть("Исполнители");
					
				КонецЕсли;
				
				ОбластьИсполнители.Параметры.ФИОДолжность = СтрокаУчастник.УчастникСтрока;
				
				ТабличныйДокумент.Вывести(ОбластьИсполнители);
				
			КонецЦикла;
			
		КонецЕсли;
		
		// В табличном документе зададим имя области в которую был выведен объект.
		// Нужно для возможности печати по-комплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Предмет);
		
	КонецЦикла;
	
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Заносит информацию о результате выполнения вне программы
//
// Параметры:
//  Действие - СправочникСсылка.ДействияОзнакомления
//  МассивУчастников - Массив из Структура (Участник, Дата, ИдентификаторУчастника)
//
Процедура УстановитьРезультатВыполненияВнеПрограммы(Действие, МассивУчастников) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.УчастникиОзнакомлений.СоздатьНаборЗаписей();    
	
	НаборЗаписей.Отбор.Действие.Установить(Действие);   
	
	РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие, "Предмет,Участники");
	
	ТЧУчастники = РеквизитыДействия.Участники;
	ТЧУчастники = ТЧУчастники.Выгрузить();     
	
	ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
	ДатаОтсчета = ТекущаяДатаСеанса();
	
	УчастникиМассив = Новый Массив;         
	Для Каждого Стр Из МассивУчастников Цикл
		УчастникиМассив.Добавить(Стр.Участник);
	КонецЦикла;	
	
	// получим Соответствие -Ключ - Участник, Значение - ГрафикРаботы
	КешГрафиковРаботы = СрокиИсполненияПроцессовКОРП.КешГрафиковРаботы(УчастникиМассив);
	
	Для Каждого Стр Из МассивУчастников Цикл
		
		Запись = НаборЗаписей.Добавить();
		
		Запись.Действие = Действие;
		Запись.ДатаНачала = Стр.Дата;
		Запись.ДатаЗавершения = Стр.Дата;
		
		Запись.ИдентификаторУчастника = Новый УникальныйИдентификатор;
		
		Запись.ИдентификаторУчастникаДействия = Стр.ИдентификаторУчастника;
		
		Запись.Состояние = Перечисления.СостоянияОзнакомления.Ознакомился;
		
		Запись.Участник = Стр.Участник;
		Запись.Исполнитель = Стр.Участник; 
		
		ИсполнительЗадачи = Стр.Участник;
		
		СтрТабЧасти = ТЧУчастники.Найти(Стр.ИдентификаторУчастника, "Идентификатор");
		Если СтрТабЧасти <> Неопределено Тогда
			
			Запись.Описание = СтрТабЧасти.Описание; 
		
		КонецЕсли;	
		
		Запись.РезультатОзнакомленияТекстом = ДействияКлиентСервер.КомментарийОВыполненииВнеПрограммы();    
		Если ЗначениеЗаполнено(Стр.Комментарий) Тогда
			Запись.РезультатОзнакомленияТекстом = Запись.РезультатОзнакомленияТекстом 
			+ Символы.ВК + НСтр("ru = 'Комментарий: '") + Стр.Комментарий;
		КонецЕсли;	
		
		Запись.ФактическийИсполнитель =
			Справочники.ФактическиеИсполнители.НайтиСоздатьФактическогоИсполнителя(
				Запись.Участник,
				Запись.Исполнитель,
				Справочники.Сотрудники.ПустаяСсылка(),
				Сотрудники.ОсновнойСотрудник());
				
		Если Не ИспользоватьГрафикиРаботы Тогда
			
			ГрафикРаботы = Справочники.ГрафикиРаботы.ПустаяСсылка();
			
		Иначе	
			
			ГрафикРаботы = КешГрафиковРаботы[ИсполнительЗадачи];
			Если ГрафикРаботы = Неопределено Тогда
				ГрафикРаботы = СрокиИсполненияПроцессовКОРП.ГрафикРаботыУчастникаПроцесса(
					ИсполнительЗадачи); 
			КонецЕсли;
				
		КонецЕсли;	

		Запись.Срок = СрокиИсполненияПроцессовКОРП.ЗаполнитьСрокИсполненияУчастника(
			ИсполнительЗадачи, 
			ДатаОтсчета,
			Стр.ВариантУстановкиСрока,
			Стр.Срок,
			Стр.СрокДни,
			Стр.СрокЧасы,
			Стр.СрокМинуты); 

		Документ = РеквизитыДействия.Предмет;
		ОбъектДанныеОзнакомления = Справочники.ДанныеОзнакомленияПодПодпись.СоздатьЭлемент();
		ОбъектДанныеОзнакомления.Документ = Документ;
		ОбъектДанныеОзнакомления.ДатаОзнакомления = Стр.Дата;
		ОбъектДанныеОзнакомления.Подписана = Ложь;
		ОбъектДанныеОзнакомления.ФактическийИсполнитель = Запись.ФактическийИсполнитель;
		ОбъектДанныеОзнакомления.Исполнитель = Запись.Участник;
		
		ВерсииФайловТЧ = ОбъектДанныеОзнакомления.ВерсииФайлов;
		Для Каждого СтрокаВерсияФайла Из Справочники.ДанныеОзнакомленияПодПодпись.ВерсииФайловПоДокументуИИхХэшСуммы(Документ) Цикл
			
			СтрокаВерсииФайлов = ВерсииФайловТЧ.Добавить();
			СтрокаВерсииФайлов.ВерсияФайла = СтрокаВерсияФайла.ВерсияФайла;
			СтрокаВерсииФайлов.ХэшСуммаВерсииФайла = СтрокаВерсияФайла.ХэшСуммаВерсииФайла;
			
		КонецЦикла;
		
		ОбъектДанныеОзнакомления.Записать(); 
		
		Запись.ДанныеОзнакомленияПодПодпись = ОбъектДанныеОзнакомления.Ссылка;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Возвращает максимальное число для показа на закладке Обработка.
//
// Возвращаемое значение:
//   Число
//
Функция МаксимальноеЧислоУчастниковДляПоказа() Экспорт
	
	Возврат 50;
	
КонецФункции

// Возвращает максимальное число для показа ЛистОзнакомления.
//
// Возвращаемое значение:
//   Число
//
Функция МаксимальноеЧислоУчастниковДляЛистаОзнакомления() Экспорт
	
	Возврат 100;
	
КонецФункции	

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ВыполнениеДействий

Процедура ОтметитьНачалоВыполнения(Действие, Параметры) Экспорт
	
	ДействияСервер.ОтметитьНачалоВыполнения(Действие, Параметры);
	
КонецПроцедуры

// Отмечает действие Ознакомление выполненным Ознакомляемый.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияОзнакомления
//  Параметры - см. ДействияСервер.НовыеПараметровИзмененияДанныхДействияОзнакомления
//
Процедура ОтметитьВыполнение(Действие, Параметры) Экспорт
	
	ОбновлятьСостоянияДействий = Ложь;
	
	ПроцессыДействия = РегистрыСведений.ПроцессыДействий.ПроцессыДействия(Действие, Истина);
	Если ПроцессыДействия.Количество() <> 0 Тогда
		
		РегистрыСведений.УчастникиОзнакомлений.Ознакомиться(Действие, 
			Параметры.ИдентификаторУчастника, Параметры.ФактическийИсполнительПолный, Параметры.Комментарий);
		ОбновлятьСостоянияДействий = Истина; // т.е. надо обновлять	
		
	КонецЕсли;	
	
	РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие, "Предмет,ПодписыватьУЭП");
	Предмет = РеквизитыДействия.Предмет;
	Подписывать = РеквизитыДействия.ПодписыватьУЭП Или Параметры.РезультатВнешнегоПодписания;
	
	Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		
		Параметры.Вставить("ОбновлятьСостоянияДействий", ОбновлятьСостоянияДействий);
		
		ДействияСервер.ОтметитьВыполнение(Действие, Параметры);
		ОбновитьРезультатВыполнения(Действие); 
		
	КонецЕсли;

	Если Не Параметры.Свойство("ВерсииФайлов") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОзнакомления = НовыеДанныеОзнакомления(Предмет, Подписывать, Параметры); 
	ОбновитьИнформациюОбУчастникахОзнакомлений(ДанныеОзнакомления, Действие, Параметры.ИдентификаторУчастника);
	ДобавитьИнформациюОПодписи(ДанныеОзнакомления, Предмет, Подписывать, Параметры);
	
КонецПроцедуры

// Обновляет результат выполнения действия по результатам ознакамливаемых.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияОзнакомления
//
Процедура ОбновитьРезультатВыполнения(Действие) Экспорт
	
КонецПроцедуры

// Особенная логика, например удаление виз и пр.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияИсполнения
//	Участники  - таблица значений
//
Процедура ПриСбросеРезультатовВыполнения(Действие, Участники) Экспорт
	

КонецПроцедуры

// Обработчик события прерывания выполнения выполнения действий, для
// определения особой логики.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияОзнакомления
//
Процедура ПриПрерыванииВыполненияДействия(Действие) Экспорт
	
	// Особой логики не предусмотрено.
	
КонецПроцедуры

// Обработчик события удаления результатов выполнения действий, для
// определения особой логики.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияОзнакомления
//
Процедура ПриУдаленииРезультатовВыполнения(Действие) Экспорт  
	
	ОжидатьЗавершения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "ОжидатьЗавершения");
	
	Если ОжидатьЗавершения Тогда
		РегистрыСведений.УчастникиОзнакомлений.УстановитьВсемСостояние(Действие, Перечисления.СостоянияОзнакомления.Отменено);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ИсторияДействий

// Помещает действие в историю, обрабатывая связанные с ним данные.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияОзнакомления - ссылка на действие.
//
Процедура ПоместитьДействиеВИсторию(Действие, ПричинаПрерывания = "") Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		// при прерывании обработки не проверяем блокировку.
		
		ДействиеОбъект = Действие.ПолучитьОбъект();
		ДействиеОбъект.ПомещеноВИсторию = Истина;
		
		ДействияСервер.УстановитьБлокировкиПоПредмету(ДействиеОбъект.Предмет);
		ДействияСервер.УстановитьПризнакЗаписиДействияПриПомещенииВИсторию(ДействиеОбъект);
		ДействиеОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

// Возвращает структуру доступных обработчиков событий
//
// Возвращаемое значение:
//  см. ДействияСервер.ДоступныеОбработчикиМенеджера
Функция ДоступныеОбработчикиМенеджера() Экспорт
	
	ДоступныеОбработчики = ДействияСервер.ДоступныеОбработчикиМенеджера(); 
	ДоступныеОбработчики.ОбработкаПрерывания = Ложь;
	ДоступныеОбработчики.ОбработкаСнятияПаузы = Ложь;
	ДоступныеОбработчики.ОбработкаПостановкиНаПаузу = Ложь;
	ДоступныеОбработчики.ОбработкаИзмененияУчастника = Ложь;
	Возврат ДоступныеОбработчики;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИменаРеквизитовДляЗаполнения()
	
	Возврат "Ссылка, ВидДействия, Участники, МоментРазыменованияУчастников, ОжидатьЗавершения";
	
КонецФункции

// Возвращает данные по каждой записи РС УчастникиОзнакомлений
//         
//
// Параметры:
//  Действие - СправочникСсылка.ДействияОзнакомления
//  ЕстьЗаписиРС - Булево
//
// Возвращаемое значение:
// 	Соответствие
// 
Функция РезультатыОзнакомлений(Действие, ЕстьЗаписиРС) Экспорт 
	
	Результат = Новый Соответствие;
	
	ЕстьЗаписиРС = Ложь;
	
	Если Не ЗначениеЗаполнено(Действие) Тогда
		Возврат Результат;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);     
	
	Участники = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Действие,
		"Участники");
	Участники = Участники.Выгрузить();
	Участники.Сортировать("НомерСтроки Возр");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчастникиОзнакомлений.ИдентификаторУчастникаДействия КАК ИдентификаторУчастникаДействия,
		|	СУММА(1) КАК СколькоВсего
		|ИЗ
		|	РегистрСведений.УчастникиОзнакомлений КАК УчастникиОзнакомлений
		|ГДЕ
		|	УчастникиОзнакомлений.Действие = &Действие
		|
		|СГРУППИРОВАТЬ ПО
		|	УчастникиОзнакомлений.ИдентификаторУчастникаДействия";
	
	Запрос.УстановитьПараметр("Действие", Действие);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл    
		
		ЕстьЗаписиРС = Истина;
		
		СколькоВсего = Выборка.СколькоВсего;
		ИдентификаторУчастникаДействия = Выборка.ИдентификаторУчастникаДействия;
		
		СтруктураРезультата = Результат.Получить(ИдентификаторУчастникаДействия);
		Если СтруктураРезультата = Неопределено Тогда  
			
			СтрУчастники = Участники.Найти(ИдентификаторУчастникаДействия, "Идентификатор");
			
			Если СтрУчастники <> Неопределено 
				Тогда
			
				СтруктураРезультата = Новый Структура("СколькоОзнакомлено, СколькоВсегоНадоОзнакомить, ДатаЗавершенияИтоговая", 0, 0, Неопределено);
				СтруктураРезультата.СколькоВсегоНадоОзнакомить = СколькоВсего;
				
				Результат.Вставить(ИдентификаторУчастникаДействия, СтруктураРезультата);
				
			КонецЕсли;
			
		Иначе
			
			СтруктураРезультата.СколькоВсегоНадоОзнакомить = СколькоВсего;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчастникиОзнакомлений.ИдентификаторУчастникаДействия КАК ИдентификаторУчастникаДействия,
		|	СУММА(1) КАК СколькоОзнакомлено,
		|	МАКСИМУМ(УчастникиОзнакомлений.ДатаЗавершения) КАК ДатаЗавершенияИтоговая
		|ИЗ
		|	РегистрСведений.УчастникиОзнакомлений КАК УчастникиОзнакомлений
		|ГДЕ
		|	УчастникиОзнакомлений.Действие = &Действие
		|	И УчастникиОзнакомлений.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОзнакомления.Ознакомился)
		|
		|СГРУППИРОВАТЬ ПО
		|	УчастникиОзнакомлений.ИдентификаторУчастникаДействия";
	
	Запрос.УстановитьПараметр("Действие", Действие);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СколькоОзнакомлено = Выборка.СколькоОзнакомлено;
		ИдентификаторУчастникаДействия = Выборка.ИдентификаторУчастникаДействия;
		
		СтруктураРезультата = Результат.Получить(ИдентификаторУчастникаДействия);
		Если СтруктураРезультата <> Неопределено Тогда
			
			СтруктураРезультата.СколькоОзнакомлено = СколькоОзнакомлено;
			СтруктураРезультата.ДатаЗавершенияИтоговая = Выборка.ДатаЗавершенияИтоговая;  
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Заносит информацию о подписях объектов ДанныеОзнакомленияПодПодпись в РС Электронные подписи
//
// Параметры:
//  ДанныеОзнакомления - СправочникСсылка.ДанныеОзнакомленияПодПодпись
//  Документ - СправочникСсылка.ДокументыПредприятия
//  ПодписыватьУЭП - Булево
//  Параметры - см. ДействияСервер.НовыеПараметровИзмененияДанныхДействияОзнакомления
//
Процедура ДобавитьИнформациюОПодписи(ДанныеОзнакомления, Документ, ПодписыватьУЭП, Параметры)
	
	Если ПодписыватьУЭП Тогда
		
		ПодписиЭП = Параметры.ПодписиЭП[Документ];
		Для Каждого ПодписьЭП Из ПодписиЭП Цикл
			
			РаботаСЭП.ЗанестиИнформациюОПодписи(ДанныеОзнакомления, ПодписьЭП);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Создает новый объект и возвращает ссылку на него
//
// Параметры:
//  Документ - СправочникСсылка.ДокументыПредприятия
//  Подписан - Булево
//  Параметры - см. ДействияСервер.НовыеПараметровИзмененияДанныхДействияОзнакомления
//  
//  Возвращаемое значение:
//  	СправочникСсылка.ДанныеОзнакомленияПодПодпись
//
Функция НовыеДанныеОзнакомления(Документ, Подписан, Параметры)
	
	ВерсииФайлов = Параметры.ВерсииФайлов;
		
	ОбъектДанныеОзнакомления = Справочники.ДанныеОзнакомленияПодПодпись.СоздатьЭлемент();
	ОбъектДанныеОзнакомления.Документ = Документ;
	ОбъектДанныеОзнакомления.ДатаОзнакомления = Параметры.ДатаИсполнения;
	ОбъектДанныеОзнакомления.Подписана = Подписан;
	ОбъектДанныеОзнакомления.ФактическийИсполнитель = Параметры.ФактическийИсполнитель;
	ОбъектДанныеОзнакомления.Исполнитель = Параметры.Участник;
		
	ВерсииФайловТЧ = ОбъектДанныеОзнакомления.ВерсииФайлов;
	Для Каждого ВерсияФайла Из ВерсииФайлов Цикл
		СтрокаВерсииФайлов = ВерсииФайловТЧ.Добавить();
		СтрокаВерсииФайлов.ВерсияФайла = ВерсияФайла;
		СтрокаВерсииФайлов.ХэшСуммаВерсииФайла = Справочники.ВерсииФайлов.ХэшСуммаВерсииФайлаCRC32(ВерсияФайла);
	КонецЦикла;
		
	ОбъектДанныеОзнакомления.Записать();
	
	Возврат ОбъектДанныеОзнакомления.Ссылка;	
			
КонецФункции

// Заносит информацию о подписях объектов ДанныеОзнакомленияПодПодпись в РС Электронные подписи
//
// Параметры:
//  ДанныеОзнакомления - СправочникСсылка.ДанныеОзнакомленияПодПодпись
//  Действие - СправочникСсылка.ДействияОзнакомления
//  ИдентификаторУчастника - УникальныйИдентификатор
//
Процедура ОбновитьИнформациюОбУчастникахОзнакомлений(ДанныеОзнакомления, Действие, ИдентификаторУчастника)
	
	МенеджерЗаписи = РегистрыСведений.УчастникиОзнакомлений.СоздатьМенеджерЗаписи(); 
	МенеджерЗаписи.Действие = Действие;
	МенеджерЗаписи.ИдентификаторУчастника = ИдентификаторУчастника;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.ДанныеОзнакомленияПодПодпись = ДанныеОзнакомления;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Формирует таблицу ознакомления.
//
// Параметры:
//   Предмет - ОпределяемыйТип.ПредметДействия - ссылка на предмет.
//
// Возвращаемое значение:
//   ТаблицаЗначений:
//     * Ознакомился - Булево
//     * РезультатВыполнения - Строка
//     * ТекстПодписи - Строка
//     * ДанныеОзнакомленияПодПодпись - СправочникСсылка.ДанныеОзнакомленияПодПодпись
//     * Подписана - Булево
//     * ФактическийИсполнитель - СправочникСсылка.ФактическиеИсполнители
//     * Участник - СправочникСсылка.Сотрудники
//     * УчастникСтрока - Строка
//
Функция ТаблицаОзнакомления(Предмет)
	
	Запрос = Новый Запрос;
	
	ТаблицаВерсийФайловПредмета = 
		Справочники.ДанныеОзнакомленияПодПодпись.ВерсииФайловПоДокументуИИхХэшСуммы(Предмет, Истина);
	
	КоличествоФайловДокумента = ТаблицаВерсийФайловПредмета.Количество();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаВерсийФайловДокумента.ВерсияФайла КАК ВерсияФайла,
	|	ТаблицаВерсийФайловДокумента.ХэшСуммаВерсииФайла КАК ХэшСуммаВерсииФайла,
	|	ТаблицаВерсийФайловДокумента.Файл КАК Файл
	|ПОМЕСТИТЬ ТаблицаВерсийФайловДокумента
	|ИЗ
	|	&ТаблицаВерсийФайловДокумента КАК ТаблицаВерсийФайловДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДействияОзнакомления.Ссылка КАК Действие
	|ПОМЕСТИТЬ ВсеДействияОзнакомления
	|ИЗ
	|	Справочник.ДействияОзнакомления КАК ДействияОзнакомления
	|ГДЕ
	|	ДействияОзнакомления.Предмет = &Предмет
	|	И НЕ ДействияОзнакомления.ПометкаУдаления
	|	И НЕ ДействияОзнакомления.ПомещеноВИсторию
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчастникиОзнакомлений.Действие КАК Действие,
	|	УчастникиОзнакомлений.ИдентификаторУчастника КАК ИдентификаторУчастника,
	|	УчастникиОзнакомлений.ДатаЗавершения КАК Дата,
	|	УчастникиОзнакомлений.ДатаНачала КАК ДатаНачала,
	|	УчастникиОзнакомлений.ИдентификаторУчастникаДействия КАК ИдентификаторУчастникаДействия,
	|	УчастникиОзнакомлений.РезультатОзнакомленияТекстом КАК РезультатВыполнения,
	|	УчастникиОзнакомлений.Состояние КАК Состояние,
	|	УчастникиОзнакомлений.Срок КАК Срок,
	|	УчастникиОзнакомлений.Участник КАК Участник,
	|	УчастникиОзнакомлений.ФактическийИсполнитель КАК ФактическийИсполнитель,
	|	УчастникиОзнакомлений.ДанныеОзнакомленияПодПодпись КАК ДанныеОзнакомленияПодПодпись,
	|	ДанныеОзнакомления.Подписана КАК Подписана,
	|	ВЫБОР
	|		КОГДА УчастникиОзнакомлений.ПредставлениеФактическогоИсполнителя <> """"
	|			ТОГДА УчастникиОзнакомлений.ПредставлениеФактическогоИсполнителя
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(УчастникиОзнакомлений.ФактическийИсполнитель)
	|	КОНЕЦ КАК ПредставлениеФактическогоИсполнителя,
	|	УчастникиОзнакомлений.ПредставлениеСотрудникаДляПЭП КАК ПредставлениеСотрудникаДляПЭП
	|ПОМЕСТИТЬ ВсеУчастникиОзнакомлений
	|ИЗ
	|	РегистрСведений.УчастникиОзнакомлений КАК УчастникиОзнакомлений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеДействияОзнакомления КАК ВсеДействияОзнакомления
	|		ПО УчастникиОзнакомлений.Действие = ВсеДействияОзнакомления.Действие
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДанныеОзнакомленияПодПодпись КАК ДанныеОзнакомления
	|		ПО УчастникиОзнакомлений.ДанныеОзнакомленияПодПодпись = ДанныеОзнакомления.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеУчастникиОзнакомлений.Действие КАК Действие,
	|	ВсеУчастникиОзнакомлений.ИдентификаторУчастника КАК ИдентификаторУчастника,
	|	ВсеУчастникиОзнакомлений.Дата КАК Дата,
	|	ВсеУчастникиОзнакомлений.ДатаНачала КАК ДатаНачала,
	|	ВсеУчастникиОзнакомлений.ИдентификаторУчастникаДействия КАК ИдентификаторУчастникаДействия,
	|	ВсеУчастникиОзнакомлений.РезультатВыполнения КАК РезультатВыполнения,
	|	ВсеУчастникиОзнакомлений.Состояние КАК Состояние,
	|	ВсеУчастникиОзнакомлений.Срок КАК Срок,
	|	ВсеУчастникиОзнакомлений.Участник КАК Участник,
	|	ВсеУчастникиОзнакомлений.ФактическийИсполнитель КАК ФактическийИсполнитель,
	|	ВсеУчастникиОзнакомлений.ДанныеОзнакомленияПодПодпись КАК ДанныеОзнакомленияПодПодпись,
	|	ВсеУчастникиОзнакомлений.Подписана КАК Подписана,
	|	ДанныеОзнакомленияПодПодписьВерсииФайлов.ВерсияФайла КАК ВерсияФайла,
	|	ДанныеОзнакомленияПодПодписьВерсииФайлов.ХэшСуммаВерсииФайла КАК ХэшСуммаВерсииФайла,
	|	ВерсииФайлов.Владелец КАК Файл,
	|	Файлы.ПометкаУдаления КАК ПометкаУдаленияФайла,
	|	ВсеУчастникиОзнакомлений.ПредставлениеФактическогоИсполнителя КАК ПредставлениеФактическогоИсполнителя,
	|	ВсеУчастникиОзнакомлений.ПредставлениеСотрудникаДляПЭП КАК ПредставлениеСотрудникаДляПЭП
	|ПОМЕСТИТЬ ВсеВерсииФайловУчастниковОзнакомлений
	|ИЗ
	|	ВсеУчастникиОзнакомлений КАК ВсеУчастникиОзнакомлений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДанныеОзнакомленияПодПодпись.ВерсииФайлов КАК ДанныеОзнакомленияПодПодписьВерсииФайлов
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
	|			ПО ДанныеОзнакомленияПодПодписьВерсииФайлов.ВерсияФайла = ВерсииФайлов.Ссылка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	|			ПО (ВерсииФайлов.Владелец = Файлы.Ссылка)
	|		ПО ВсеУчастникиОзнакомлений.ДанныеОзнакомленияПодПодпись = ДанныеОзнакомленияПодПодписьВерсииФайлов.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеВерсииФайловУчастниковОзнакомлений.Действие КАК Действие,
	|	ВсеВерсииФайловУчастниковОзнакомлений.ИдентификаторУчастника КАК ИдентификаторУчастника,
	|	ВсеВерсииФайловУчастниковОзнакомлений.Дата КАК Дата,
	|	ВсеВерсииФайловУчастниковОзнакомлений.ДатаНачала КАК ДатаНачала,
	|	ВсеВерсииФайловУчастниковОзнакомлений.ИдентификаторУчастникаДействия КАК ИдентификаторУчастникаДействия,
	|	ВсеВерсииФайловУчастниковОзнакомлений.РезультатВыполнения КАК РезультатВыполнения,
	|	ВсеВерсииФайловУчастниковОзнакомлений.Состояние КАК Состояние,
	|	ВсеВерсииФайловУчастниковОзнакомлений.Срок КАК Срок,
	|	ВсеВерсииФайловУчастниковОзнакомлений.Участник КАК Участник,
	|	ВсеВерсииФайловУчастниковОзнакомлений.ФактическийИсполнитель КАК ФактическийИсполнитель,
	|	ВсеВерсииФайловУчастниковОзнакомлений.ДанныеОзнакомленияПодПодпись КАК ДанныеОзнакомленияПодПодпись,
	|	ВсеВерсииФайловУчастниковОзнакомлений.Подписана КАК Подписана,
	|	ВсеВерсииФайловУчастниковОзнакомлений.ВерсияФайла КАК ВерсияФайла,
	|	ВсеВерсииФайловУчастниковОзнакомлений.ХэшСуммаВерсииФайла КАК ХэшСуммаВерсииФайла,
	|	ВсеВерсииФайловУчастниковОзнакомлений.Файл КАК Файл,
	|	ТаблицаВерсийФайловДокумента.ВерсияФайла КАК ВерсияФайлаДокумента,
	|	ТаблицаВерсийФайловДокумента.ХэшСуммаВерсииФайла КАК ХэшСуммаВерсииФайлаДокумента,
	|	ТаблицаВерсийФайловДокумента.Файл КАК ФайлДокумента,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СведенияОФайлахДокументооборот.ЯвляетсяОригиналом, ЛОЖЬ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ТаблицаВерсийФайловДокумента.ХэшСуммаВерсииФайла = ВсеВерсииФайловУчастниковОзнакомлений.ХэшСуммаВерсииФайла
	|				И НЕ ВсеВерсииФайловУчастниковОзнакомлений.ПометкаУдаленияФайла
	|	КОНЕЦ КАК ВерсииИдентичны,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СведенияОФайлахДокументооборот.ЯвляетсяОригиналом, ЛОЖЬ)
	|			ТОГДА 0
	|		КОГДА ТаблицаВерсийФайловДокумента.Файл ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПодсчетФайлов,
	|	ВсеВерсииФайловУчастниковОзнакомлений.ПредставлениеФактическогоИсполнителя КАК ПредставлениеФактическогоИсполнителя,
	|	ВсеВерсииФайловУчастниковОзнакомлений.ПредставлениеСотрудникаДляПЭП КАК ПредставлениеСотрудникаДляПЭП
	|ПОМЕСТИТЬ ВсеДанные
	|ИЗ
	|	ВсеВерсииФайловУчастниковОзнакомлений КАК ВсеВерсииФайловУчастниковОзнакомлений
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаВерсийФайловДокумента КАК ТаблицаВерсийФайловДокумента
	|		ПО ВсеВерсииФайловУчастниковОзнакомлений.Файл = ТаблицаВерсийФайловДокумента.Файл
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФайлахДокументооборот КАК СведенияОФайлахДокументооборот
	|		ПО ВсеВерсииФайловУчастниковОзнакомлений.Файл = СведенияОФайлахДокументооборот.Файл
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеДанные.Действие КАК Действие,
	|	ВсеДанные.ИдентификаторУчастника КАК ИдентификаторУчастника,
	|	ВсеДанные.Дата КАК Дата,
	|	ВсеДанные.ДатаНачала КАК ДатаНачала,
	|	ВсеДанные.ИдентификаторУчастникаДействия КАК ИдентификаторУчастникаДействия,
	|	ВсеДанные.Состояние КАК Состояние,
	|	ВсеДанные.Срок КАК Срок,
	|	ВсеДанные.Участник КАК Участник,
	|	ВсеДанные.ФактическийИсполнитель КАК ФактическийИсполнитель,
	|	ВсеДанные.ДанныеОзнакомленияПодПодпись КАК ДанныеОзнакомленияПодПодпись,
	|	ВсеДанные.Подписана КАК Подписана,
	|	ЕСТЬNULL(МИНИМУМ(ВсеДанные.ВерсииИдентичны), ИСТИНА) КАК ВерсииИдентичны,
	|	ВЫРАЗИТЬ(ВсеДанные.РезультатВыполнения КАК СТРОКА(1000)) КАК РезультатВыполнения,
	|	СУММА(ВсеДанные.ПодсчетФайлов) КАК КоличествоФайлов,
	|	ВсеДанные.ПредставлениеФактическогоИсполнителя КАК ПредставлениеФактическогоИсполнителя,
	|	ВсеДанные.ПредставлениеСотрудникаДляПЭП КАК ПредставлениеСотрудникаДляПЭП
	|ИЗ
	|	ВсеДанные КАК ВсеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеДанные.Подписана,
	|	ВсеДанные.ДатаНачала,
	|	ВсеДанные.Дата,
	|	ВсеДанные.Срок,
	|	ВсеДанные.ФактическийИсполнитель,
	|	ВсеДанные.ИдентификаторУчастника,
	|	ВсеДанные.ИдентификаторУчастникаДействия,
	|	ВсеДанные.ДанныеОзнакомленияПодПодпись,
	|	ВсеДанные.Состояние,
	|	ВсеДанные.Участник,
	|	ВЫРАЗИТЬ(ВсеДанные.РезультатВыполнения КАК СТРОКА(1000)),
	|	ВсеДанные.Действие,
	|	ВсеДанные.ПредставлениеФактическогоИсполнителя,
	|	ВсеДанные.ПредставлениеСотрудникаДляПЭП";
	
	Запрос.УстановитьПараметр("ТаблицаВерсийФайловДокумента", ТаблицаВерсийФайловПредмета);
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаОзнакомления = Запрос.Выполнить().Выгрузить();
	ТаблицаОзнакомления.Колонки.Добавить("УчастникСтрока", Новый ОписаниеТипов("Строка"));
	ТаблицаОзнакомления.Колонки.Добавить("Ознакомился", Новый ОписаниеТипов("Булево"));
	ТаблицаОзнакомления.Колонки.Добавить("ТекстПодписи", Новый ОписаниеТипов("Строка"));
	
	Для Каждого СтрокаУчастник Из ТаблицаОзнакомления Цикл
		
		Если ЗначениеЗаполнено(СтрокаУчастник.ФактическийИсполнитель) Тогда
			СтрокаУчастник.УчастникСтрока = СтрокаУчастник.ПредставлениеФактическогоИсполнителя;
		Иначе
			СтрокаУчастник.УчастникСтрока = СокрЛП(СтрокаУчастник.Участник)
		КонецЕсли;
		
		СтрокаУчастник.Ознакомился = (СтрокаУчастник.Состояние = Перечисления.СостоянияОзнакомления.Ознакомился);
		
		Если СтрокаУчастник.Ознакомился Тогда
			
			Если ЗначениеЗаполнено(СтрокаУчастник.ВерсииИдентичны)
					И СтрокаУчастник.КоличествоФайлов <> КоличествоФайловДокумента Тогда
				СтрокаУчастник.ВерсииИдентичны = Ложь;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаУчастник.Подписана)
				И СтрокаУчастник.Подписана Тогда
				
				СтрокаУчастник.ТекстПодписи = РаботаСЭП.ТекстПодписиУЭПДляВывода(СтрокаУчастник.ДанныеОзнакомленияПодПодпись);
				
			Иначе
				
				ПредставлениеСотрудника = СтрокаУчастник.ПредставлениеСотрудникаДляПЭП;
				Если Не ЗначениеЗаполнено(ПредставлениеСотрудника) Тогда
					Факт = СтрокаУчастник.ФактическийИсполнитель;
					Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Факт, "Отметил,Факт");
					ПредставлениеСотрудника = ДействияСервер.ПредставлениеСотрудникаДляПЭП(Данные);
				КонецЕсли;
				СтрокаУчастник.ТекстПодписи = ДействияСервер.ШтампПЭП(ПредставлениеСотрудника);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаОзнакомления.Сортировать("УчастникСтрока");
	
	Возврат ТаблицаОзнакомления;
	
КонецФункции

#КонецОбласти

#КонецЕсли