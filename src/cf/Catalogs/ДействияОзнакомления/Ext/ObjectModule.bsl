#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Выполняет процедуры записи объекта.
//
Процедура ЗаписатьОбъект() Экспорт
	
	ДействияСервер.ДействияПриЗаписи(
		ЭтотОбъект, ДополнительныеСвойства, Перечисления.ФункцииУчастниковОзнакомления.Ознакомляемый);
	
	РаботаСПроцессамиПоОбработкамОбъектовСобытия.ПриЗаписиДействия(ЭтотОбъект);
	РаботаСПроцессамиПоДействиямСобытия.ПриЗаписиДействия(ЭтотОбъект);
	
	Если ПометкаУдаления Или ПомещеноВИсторию Тогда
		РегистрыСведений.НастройкиОтложенногоНачалаВыполненияДействий.Удалить(Ссылка);
	КонецЕсли;	
	
КонецПроцедуры

// Заполняет действие по настройке действия.
//
// Параметры:
// 	Настройка - СправочникСсылка.НастройкиДействийИсполнения - ссылка на настройку.
// 	ПредметОбъект - ОпределяемыйТип.ПредметДействияОбъект.
//
Процедура ЗаполнитьПоНастройке(Настройка, ПредметОбъект = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Настройка) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Настройка,
		"Автор, Важность, МоментРазыменованияУчастников, Участники, ОтложенноеНачалоВыполнения, ОжидатьЗавершения, 
		|ПодписыватьУЭП");
	Реквизиты.ПодписыватьУЭП = ПолучитьФункциональнуюОпцию("ИспользоватьОзнакомлениеСУЭП") И Реквизиты.ПодписыватьУЭП;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты,, "Участники, Автор, Важность");    
	
	МоментРазыменованияУчастников = Перечисления.МоментыРазыменованияУчастниковДействий.ПередВыполнениемДействия;
	
	Если ЗначениеЗаполнено(Реквизиты.Автор) Тогда 
		Автор = Реквизиты.Автор;
	КонецЕсли;
	Если ЗначениеЗаполнено(Реквизиты.Важность) 
		И Реквизиты.Важность <> Перечисления.ВариантыВажностиОбъектов.Обычная Тогда 
		Важность = Реквизиты.Важность;
	КонецЕсли;
	НастройкаДействия = Настройка;
	
	Если ПредметОбъект = Неопределено
		И ЗначениеЗаполнено(Предмет) Тогда
		ПредметОбъект = Предмет.ПолучитьОбъект();
	КонецЕсли;
	
	Выгруженные = Участники.Выгрузить();
	
	РазыменоватьПриСозданииДействия = Ложь;
	
	Участники.Очистить();
	Источники.Очистить();
	ВыборкаУчастники = Реквизиты.Участники.Выбрать();
	Пока ВыборкаУчастники.Следующий() Цикл
		
		Если Не ВыборкаУчастники.Защищенный Тогда
				
			// Дубли ищем только внутри функции
			ЕстьУчастники = Участники.НайтиСтроки(Новый Структура("Участник, Описание",
				ВыборкаУчастники.Участник, ВыборкаУчастники.Описание));
			Если ЕстьУчастники.Количество() > 0 Тогда	
				Продолжить;
			КонецЕсли;
				
		КонецЕсли;
		// Проверка условий.
		Если РазыменоватьПриСозданииДействия 
			И Не РаботаСАлгоритмамиПроверки.АлгоритмПоПредметуВыполняется(
			ПредметОбъект, ВыборкаУчастники.Условие) Тогда
			Продолжить;
		КонецЕсли;
		
		Участник = Участники.Добавить();
		ЗаполнитьЗначенияСвойств(Участник, ВыборкаУчастники);
		Участник.Участник = ВыборкаУчастники.Участник;
		Участник.ИзНастройки = Истина;
		Участник.Идентификатор = Новый УникальныйИдентификатор;
		
	КонецЦикла;
	
	Для Каждого Выгруженный Из Выгруженные Цикл
		
		Если Выгруженный.ИзНастройки Тогда
			Продолжить;
		КонецЕсли;	
		
		Если 
			//Выгруженный.Обязательный Или 
			Участники.Найти(Выгруженный.Участник, "Участник") <> Неопределено Тогда
			
			// Перенесем идентификаторы по совпадающему Исполнителю
			СтрокаИсполнителя = Участники.Найти(Выгруженный.Участник, "Участник");
			Если СтрокаИсполнителя <> Неопределено Тогда 
				СтрокаИсполнителя.Идентификатор = Выгруженный.Идентификатор;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		Участник = Участники.Добавить();
		ЗаполнитьЗначенияСвойств(Участник, Выгруженный);
	КонецЦикла;
	
КонецПроцедуры

// Разыменовывает автоподстановки и контейнеры в составе участников.
// 
// Параметры:
// 	ПредметОбъект - ОпределяемыйТип.ПредметДействияОбъект.
// 	ЭтоЗапуск - Булево - признак того, что разыменование происходит в рамках запуска в обработку.
// 
Процедура Разыменовать(ПредметОбъект = Неопределено, ЭтоЗапуск = Ложь) Экспорт
	
	// Для ознакомления разыменование не происходит. Только автора разыменуем   
	
	ДействияСервер.РазыменоватьАвтора(ЭтотОбъект, ПредметОбъект);

КонецПроцедуры

Процедура РазыменоватьРеализация(ПредметОбъект, Участники, Источники, Выгруженные, РазыменоватьАвтора = Истина) Экспорт    
	
	Источники.Колонки.Добавить("ИдентификаторИсходный");
	
	Выгруженные.Колонки.Добавить("Источник");
	Выгруженные.ЗагрузитьКолонку(Выгруженные.ВыгрузитьКолонку("Участник"), "Источник");
	
	Выгруженные.Колонки.Добавить("ИсточникОригинальный");
	Если Источники.Количество() <> 0 Тогда
		Для Каждого Участник Из Выгруженные Цикл
			
			СтруктураПоиска = Новый Структура("Идентификатор", Участник.Идентификатор);
			НайденныеСтроки = Источники.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 1 Тогда
				Участник.ИсточникОригинальный = НайденныеСтроки[0].Источник;
			КонецЕсли;	
					
		КонецЦикла;			
	КонецЕсли;	
	
	Участники.Очистить();
	Источники.Очистить();
	ПроверятьУсловия = ДействияСервер.РазыменоватьПриЗапускеДокументаВОбработку(
		МоментРазыменованияУчастников)
		Или ДействияСервер.РазыменоватьПередВыполнениемДействия(МоментРазыменованияУчастников);
	// Разыменование автоподстановок до контейнеров.
	КоличествоЭлементов = Выгруженные.Количество();
	Для Сч = 1 По КоличествоЭлементов Цикл
		
		ИсходнаяСтрока = Выгруженные[КоличествоЭлементов - Сч];
		Если ТипЗнч(ИсходнаяСтрока.Участник) <> Тип("СправочникСсылка.АвтоподстановкиДляОбъектов") Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверка условий.
		Если ПроверятьУсловия
			И Не РаботаСАлгоритмамиПроверки.АлгоритмПоПредметуВыполняется(
			ПредметОбъект, ИсходнаяСтрока.Условие) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеРазыменования = ДействияСервер.РазыменоватьАвтоподстановку(
			ИсходнаяСтрока.Участник, 
			ПредметОбъект,
			Неопределено, 
			Перечисления.ФункцииУчастниковОзнакомления.ПустаяСсылка(),
			Ложь);
			
		Для Каждого РазыменованныйУчастник Из ДанныеРазыменования Цикл
			
			Участник = Участники.Добавить();
			ЗаполнитьЗначенияСвойств(Участник, ИсходнаяСтрока);
			Участник.Участник = РазыменованныйУчастник;
			Участник.Идентификатор = Новый УникальныйИдентификатор;
			
			ДобавитьИсточник(
				Источники, "Участники.Участник", Участник.Идентификатор,   
				Участник.Участник,
				ИсходнаяСтрока.Идентификатор); // ИдентификаторИсходный
			
		КонецЦикла;	
		
		Выгруженные.Удалить(ИсходнаяСтрока);
		
	КонецЦикла;
	
	Контейнеры = Новый Массив;
	Для Каждого Выгруженный Из Выгруженные Цикл
		
		Если ТипЗнч(Выгруженный.Участник) = Тип("СправочникСсылка.СтруктураПредприятия")
			Или ТипЗнч(Выгруженный.Участник) = Тип("СправочникСсылка.РабочиеГруппы")
			Или ТипЗнч(Выгруженный.Участник) = Тип("СправочникСсылка.ПроектыКонтейнеры")
			Или ТипЗнч(Выгруженный.Участник) = Тип("СправочникСсылка.ПодразделенияКонтейнеры") Тогда
			// Проверка условий.
			Если ПроверятьУсловия
				И Не РаботаСАлгоритмамиПроверки.АлгоритмПоПредметуВыполняется(
				ПредметОбъект, Выгруженный.Условие) Тогда
				Продолжить;
			КонецЕсли;
			
			Контейнеры.Добавить(Выгруженный.Участник);
		КонецЕсли;	
		
	КонецЦикла;
	
	СоответствиеСотрудниковВКонтейнерах = Новый Соответствие;
	Если Контейнеры.Количество() <> 0 Тогда
		СоответствиеСотрудниковВКонтейнерах = ДействияСервер.ДействующиеСотрудникиВКонтейнерах(Контейнеры);
	КонецЕсли;	
	
	// Разыменование контейнеров до пользователей, с учетом исключений.
	Для Каждого ИсходнаяСтрока Из Выгруженные Цикл
		
		СотрудникиВКонтейнере = Новый Массив;
		
		// Роли в ознакомлении тоже разыменовываются до пользователей.
		Если ТипЗнч(ИсходнаяСтрока.Участник) = Тип("СправочникСсылка.Пользователи")
			Или ТипЗнч(ИсходнаяСтрока.Участник) = Тип("СправочникСсылка.Сотрудники")
			Или ТипЗнч(ИсходнаяСтрока.Участник) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			// Проверка условий.
			Если ПроверятьУсловия
				И Не РаботаСАлгоритмамиПроверки.АлгоритмПоПредметуВыполняется(
					ПредметОбъект, ИсходнаяСтрока.Условие) Тогда
				Продолжить;
			КонецЕсли;
			
			Участник = Участники.Добавить();
			ЗаполнитьЗначенияСвойств(Участник, ИсходнаяСтрока);
			Участник.Участник = ИсходнаяСтрока.Участник;
			Участник.Идентификатор = ИсходнаяСтрока.Идентификатор; // тут не надо новый GUID
			
			ДобавитьИсточник(
				Источники, "Участники.Участник", Участник.Идентификатор,   
				Участник.Участник,
				ИсходнаяСтрока.Идентификатор); // ИдентификаторИсходный
			
		ИначеЕсли ТипЗнч(ИсходнаяСтрока.Участник) = Тип("СправочникСсылка.СтруктураПредприятия")
			Или ТипЗнч(ИсходнаяСтрока.Участник) = Тип("СправочникСсылка.РабочиеГруппы")
			Или ТипЗнч(ИсходнаяСтрока.Участник) = Тип("СправочникСсылка.ПроектыКонтейнеры")
			Или ТипЗнч(ИсходнаяСтрока.Участник) = Тип("СправочникСсылка.ПодразделенияКонтейнеры") Тогда
			// Проверка условий.
			Если ПроверятьУсловия
				И Не РаботаСАлгоритмамиПроверки.АлгоритмПоПредметуВыполняется(
					ПредметОбъект, ИсходнаяСтрока.Условие) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокиСотрудники = СоответствиеСотрудниковВКонтейнерах[ИсходнаяСтрока.Участник];
			
			СотрудникиВКонтейнере = Новый Массив;
			
			Если СтрокиСотрудники <> Неопределено Тогда
				Для Каждого Сотрудник Из СтрокиСотрудники Цикл    
					
					Участник = Участники.Добавить();
					ЗаполнитьЗначенияСвойств(Участник, ИсходнаяСтрока);
					Участник.Участник = Сотрудник;
					Участник.Идентификатор = Новый УникальныйИдентификатор;
					
					ДобавитьИсточник(
						Источники, "Участники.Участник", Участник.Идентификатор,   
						Сотрудник,
						ИсходнаяСтрока.Идентификатор); // ИдентификаторИсходный
					
				КонецЦикла;	
			КонецЕсли;
			
			Если СтрокиСотрудники.Количество() = 0 
				И ТипЗнч(ИсходнаяСтрока.Участник) = Тип("СправочникСсылка.ПолныеРоли") Тогда
				
				Участник = Участники.Добавить();
				ЗаполнитьЗначенияСвойств(Участник, ИсходнаяСтрока);
				Участник.Участник = ИсходнаяСтрока.Участник;
				Участник.Идентификатор = ИсходнаяСтрока.Идентификатор; // тут не надо новый GUID
				
				ДобавитьИсточник(
					Источники, "Участники.Участник", Участник.Идентификатор,   
					Участник.Участник,
					ИсходнаяСтрока.Идентификатор); // ИдентификаторИсходный
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если РазыменоватьАвтора Тогда
		ДействияСервер.РазыменоватьАвтора(ЭтотОбъект, ПредметОбъект);
	КонецЕсли;
	
	// Удаление дублей участников.
	ДанныеУчастниковДляУдаленияДублей = Новый Массив;
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеУчастникаДляУдаленияДублей = ДействияСервер.ДанныеУчастникаДляУдаленияДублей();
		ДанныеУчастникаДляУдаленияДублей.Участник = СтрокаУчастника.Участник;
		ДанныеУчастникаДляУдаленияДублей.СтрокаУчастника = СтрокаУчастника;
		
		ДанныеУчастниковДляУдаленияДублей.Добавить(ДанныеУчастникаДляУдаленияДублей);
		
	КонецЦикла;
	ДействияСервер.УдалитьДублиУчастников(ДанныеУчастниковДляУдаленияДублей, Участники);
	
КонецПроцедуры

Процедура ДобавитьИсточник(Источники, ПутьКДанным, Идентификатор, Источник,
	ИдентификаторИсходный) Экспорт

	НовыйИсточник = Источники.Добавить();
	НовыйИсточник.ПутьКДанным = ПутьКДанным;
	НовыйИсточник.Идентификатор = Идентификатор;
	НовыйИсточник.Источник = Источник;
	НовыйИсточник.ИдентификаторИсходный = ИдентификаторИсходный;

КонецПроцедуры

// Вернет разыменованные участники для РГ
// 
// Параметры:                   
//  Действие - ОпределяемыйТип.ПредметДействия
// 	ПредметОбъект - ОпределяемыйТип.ПредметДействияОбъект.
//  УчастникиДействия  - ТаблицаЗначений
//  Изменение - Булево
// 
Функция РазыменованныеУчастникиДляРГ(Действие, ПредметОбъект, УчастникиДействия, Изменение) Экспорт
	
	РГ = РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников();
	
	ПроверятьУсловия = ДействияСервер.РазыменоватьПриЗапускеДокументаВОбработку(
		МоментРазыменованияУчастников)
		Или ДействияСервер.РазыменоватьПередВыполнениемДействия(МоментРазыменованияУчастников);
		
	// Разыменование автоподстановок 
	КоличествоЭлементов = УчастникиДействия.Количество();
	Для Сч = 1 По КоличествоЭлементов Цикл
		
		ИсходнаяСтрока = УчастникиДействия[КоличествоЭлементов - Сч];
		
		// Проверка условий.
		Если ПроверятьУсловия
			И Не РаботаСАлгоритмамиПроверки.АлгоритмПоПредметуВыполняется(
			ПредметОбъект, ИсходнаяСтрока.Условие) Тогда  
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ИсходнаяСтрока.Участник) <> Тип("СправочникСсылка.АвтоподстановкиДляОбъектов") Тогда
			Участник = РГ.Добавить();
			Участник.Участник = ИсходнаяСтрока.Участник;
			Участник.Изменение = Изменение;
			Участник.Источник = Действие;
			Продолжить;
		КонецЕсли;
		
		ДанныеРазыменования = ДействияСервер.РазыменоватьАвтоподстановку(
			ИсходнаяСтрока.Участник, 
			ПредметОбъект,
			Неопределено, 
			Перечисления.ФункцииУчастниковОзнакомления.ПустаяСсылка(), 
			Ложь);
			
		Для Каждого РазыменованныйУчастник Из ДанныеРазыменования Цикл
			
			Участник = РГ.Добавить();
			Участник.Участник = РазыменованныйУчастник;
			Участник.Изменение = Изменение;
			Участник.Источник = Действие;
			Участник.Автоподстановка = ИсходнаяСтрока.Участник;
			
		КонецЦикла;	
		
	КонецЦикла;
	
	Возврат РГ;
	
КонецФункции

// Заменяет участника действия
//
// Параметры:
//	Идентификатор - УникальныйИдентификатор - идентификатор участника
//	НовыйУчастник - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли - новый участник процесса
//	Причина - Строка - описание причины замены
//	Автор - Неопределено, СправочникСсылка.Сотрудники - сотрудник, перенаправивший задачу
//
Процедура ЗаменитьУчастника(Идентификатор, НовыйУчастник, Причина = "", Автор = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		ВызватьИсключение НСтр("ru = 'Замена участника возможна только после записи действия.'");
	КонецЕсли;
	
	ПрежнийУчастник = Неопределено;
	
	СтрокаУчастника = Участники.Найти(Идентификатор, "Идентификатор");
	Если СтрокаУчастника <> Неопределено И СтрокаУчастника.Участник <> НовыйУчастник Тогда
		ПрежнийУчастник = СтрокаУчастника.Участник;
		СтрокаУчастника.Участник = НовыйУчастник;
		
		// Отметим защищенными участников, если новый участник уже есть действии.
		СтрокиУчастника = Участники.НайтиСтроки(
			Новый Структура("Участник", НовыйУчастник));
		Если СтрокиУчастника.Количество() > 1 Тогда
			Для Каждого СтрУчастник Из СтрокиУчастника Цикл
				Если Не СтрУчастник.Защищенный Тогда
					СтрУчастник.Защищенный = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяОбработка = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Ссылка);
	
	Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
	Событие.Обработка = ТекущаяОбработка;
	Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.ИзменениеУчастников;
	Событие.Действие = Ссылка;
	Событие.Описание = СтрШаблон(НСтр("ru = 'Участник %1 заменен на %2. Причина: %3'"), ПрежнийУчастник, НовыйУчастник, Причина);
	Событие.ИдентификаторУчастника = Идентификатор;
	Событие.Участник = ПрежнийУчастник;
	Событие.Функция = Перечисления.ФункцииУчастниковОзнакомления.Ознакомляемый;
	Событие.Сотрудник = Автор;
	РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
	
КонецПроцедуры

// Устанавливает срок исполнения участнику.
//
// Параметры:
//  Идентификатор - УникальныйИдентификатор - Идентификатора участника в действии.
//  ВариантУстановкиСрока - ПеречислениеСсылка.ВариантыУстановкиСрокаИсполнения
//  Срок - Дата - срок участника точной датой.
//  СрокДни, СрокЧасы, СрокМинуты - Число - относительный срок участника.
//
Процедура УстановитьСрокИсполненияУчастнику(Идентификатор, ВариантУстановкиСрока,
	Срок, СрокДни, СрокЧасы, СрокМинуты) Экспорт
	
	СтрокаУчастника = Участники.Найти(Идентификатор, "Идентификатор");
	
	Если СтрокаУчастника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаУчастника.ВариантУстановкиСрока = ВариантУстановкиСрока;
	СтрокаУчастника.Срок = Срок;
	СтрокаУчастника.СрокДни = СрокДни;
	СтрокаУчастника.СрокЧасы = СрокЧасы;
	СтрокаУчастника.СрокМинуты = СрокМинуты;
	
КонецПроцедуры

// Возвращает участников с функций "Обрабатывающий результат".
// 
// Возвращаемое значение:
//  Массив - Участники.
//
Функция УчастникОбрабатывающийРезультат() Экспорт
	
	Возврат Новый Массив;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ДействияСобытия.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") 
		И ДанныеЗаполнения.Свойство("Настройка") Тогда
		ПредметОбъект = Неопределено;
		ДанныеЗаполнения.Свойство("ПредметОбъект", ПредметОбъект);
		ЗаполнитьПоНастройке(ДанныеЗаполнения.Настройка, ПредметОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДействияСервер.ДействияПередЗаписью(ЭтотОбъект);
	
	РаботаСПроцессамиПоОбработкамОбъектовСобытия.ПередЗаписьюДействия(ЭтотОбъект);
	РаботаСПроцессамиПоДействиямСобытия.ПередЗаписьюДействия(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда		
		Возврат;
	КонецЕсли;
	
	ДействияСервер.ЗаписатьДействие(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли