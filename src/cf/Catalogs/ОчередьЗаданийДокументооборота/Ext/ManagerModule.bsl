#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Удаляет порцию устаревших данных.
// 
// Возвращаемое значение - Булево - Истина, если были найдены устаревшие данные, в противном случае Ложь.
// 
Функция УдалитьПорциюУстаревшихДанных() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЕстьДанныеКУдалению = Ложь;
	
	ХранитьЗавершенныеЗадания = Константы.ХранитьЗавершенныеЗадания.Получить();
	СрокХраненияЗавершенныхЗаданий = Константы.СрокХраненияЗавершенныхЗаданий.Получить();
	
	Если ХранитьЗавершенныеЗадания = Ложь Тогда
		СрокХраненияЗавершенныхЗаданий = 0;
	КонецЕсли;	
	
	Порог = ТекущаяУниверсальнаяДата() 
		- СрокХраненияЗавершенныхЗаданий * 86400; // перевели сутки в сек
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 10000
		|	ОчередьЗаданийДокументооборота.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
		|ГДЕ
		|	ОчередьЗаданийДокументооборота.УзелОбработки = &УзелОбработки
		|	И ОчередьЗаданийДокументооборота.Родитель = ЗНАЧЕНИЕ(Справочник.ОчередьЗаданийДокументооборота.ПустаяСсылка)
		|	И ОчередьЗаданийДокументооборота.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Завершено)
		|	И ОчередьЗаданийДокументооборота.ДатаЗавершения < &Порог
		|УПОРЯДОЧИТЬ ПО
		|	ОчередьЗаданийДокументооборота.МоментВремени";
	
	Запрос.УстановитьПараметр("УзелОбработки", КОДПовтИсп.ИдентификаторТекущегоУзла());
	
	Запрос.УстановитьПараметр("Порог", Порог);
	Выборка = Запрос.Выполнить().Выбрать();
	СколькоОбработано = 0;
	СколькоВыбрано = 0;
	Пока Выборка.Следующий() Цикл

		Попытка
			
			СколькоВыбрано = СколькоВыбрано + 1;
			
			МастерЗадание = Выборка.Ссылка;
			СписокДо = СписокДочерниеЗадания(МастерЗадание);
			
			ЗаданиеСсылка = Выборка.Ссылка;
			ЗаданиеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			ЧтоУдаляем =  ЗаданиеОбъект.Наименование;
					
			ЗаданиеОбъект.Удалить();
			
			РегистрыСведений.ПротоколВыполненияЗаданий.УдалитьЛог(ЗаданиеСсылка);
			
			СписокПосле = СписокДочерниеЗадания(МастерЗадание);
			
			Описание = СтрШаблон("ЧтоУдаляем=%1    
				|СписокДо=%2   
				|СписокПосле=%3", 
				ЧтоУдаляем, СписокДо, СписокПосле);

			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ОчередьЗаданийДокументооборота удаление выполненных'", 
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Информация,,,
				Описание
				);
			
			СколькоОбработано = СколькоОбработано + 1;
		
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ОчередьЗаданийДокументооборота удаление выполненных'", 
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;	
	
	Если СколькоВыбрано < 10000 Тогда // в запросе должно быть то же число
		ЕстьДанныеКУдалению = Ложь;
	КонецЕсли;
		 
	Возврат ЕстьДанныеКУдалению;
	
КонецФункции

Функция СписокДочерниеЗадания(ГлавноеЗадание)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОчередьМаршрутизации.Ссылка КАК Задание,
		|	ОчередьМаршрутизации.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ОчередьЗаданийДокументооборота КАК ОчередьМаршрутизации
		|ГДЕ
		|	ОчередьМаршрутизации.Родитель В ИЕРАРХИИ (&ГлавноеЗадание)";
		
	Запрос.УстановитьПараметр("ГлавноеЗадание", ГлавноеЗадание);
	
	СтрокаОписания = "";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаОписания = СтрокаОписания + Символы.ВК + Выборка.Наименование;
		
	КонецЦикла;	
	
	Возврат СтрокаОписания;

КонецФункции

// Создает задание на маршрутизацию.
//
// Параметры:
//  Тип - ПеречислениеССылка.ТипыЗаданий
//  Наименование - Строка - наименование задания.
//  ПредметЗадания - СправочникСсылка.ОбработкиОбъектов,
//                   ОпределяемыйТип.Действия,
//                   БизнесПроцессСсылка,
//                   ЗадачаСсылка.ЗадачаИсполнителя,
//                   Строка - предмет задания.
//  УзелОбработки - УникальныйИдентификатор - узел КОД в котором должно выполниться задание.
//  ГлавноеЗадание - СправочникСсылка.ОчередьЗаданийДокументооборота - ссылка на главное задание.
//  ПараметрыВыполнения - ХранилищеЗначения
//
Процедура СоздатьЗадание(
	Тип,
	Наименование,
	ПредметЗадания,
	УзелОбработки,
	ГлавноеЗадание = Неопределено,
	ПараметрыВыполнения = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		Если ЗначениеЗаполнено(ГлавноеЗадание) Тогда
			ПоставитьВОжиданиеГлавноеЗадание(ГлавноеЗадание);
		КонецЕсли;
		
		Задание = СоздатьЭлемент();
		Задание.ДатаСоздания = ТекущаяУниверсальнаяДата();
		Задание.Наименование = Наименование;
		Задание.Тип = Тип;
		Задание.ПредметЗадания = ПредметЗадания;
		Задание.Родитель = ГлавноеЗадание;
		Задание.СтатусЗадания = Перечисления.СтатусыЗаданий.Выполняется;
		Задание.МоментВремени = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Задание.ПараметрыВыполнения = ПараметрыВыполнения;
		Задание.УзелОбработки = УзелОбработки;
		
		Задание.Записать();
		
		// пишем в протокол
		РегистрыСведений.ПротоколВыполненияЗаданий.ДобавитьВЛог(
			Задание.Ссылка, 
			Строка(ТекущаяУниверсальнаяДата()) + " (UTC) " + НСтр("ru = 'Создание'")
			);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Создает задание на маршрутизацию без транзакции в теле процедуры, но вызов процедуры должен выполняться в транзакции.
//
// Параметры:
//  Тип - ПеречислениеССылка.ТипыЗаданий
//  Наименование - Строка - наименование задания.
//  ПредметЗадания - СправочникСсылка.ОбработкиОбъектов,
//                   ОпределяемыйТип.Действия,
//                   БизнесПроцессСсылка,
//                   ЗадачаСсылка.ЗадачаИсполнителя,
//                   Строка - предмет задания.
//  УзелОбработки - УникальныйИдентификатор - узел КОД в котором должно выполниться задание.
//  ГлавноеЗадание - СправочникСсылка.ОчередьЗаданийДокументооборота - ссылка на главное задание.
//  ПараметрыВыполнения - ХранилищеЗначения
//
Процедура СоздатьЗаданиеВоВнешнейТранзакции(
	Тип,
	Наименование,
	ПредметЗадания,
	УзелОбработки,
	ГлавноеЗадание = Неопределено,
	ПараметрыВыполнения = Неопределено) Экспорт
	
	Если Не ТранзакцияАктивна() Тогда
		ВызватьИсключение (НСтр("ru ='Вызов процедуры должен выполняться в транзакции.'"));
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Если ЗначениеЗаполнено(ГлавноеЗадание) Тогда
		ПоставитьВОжиданиеГлавноеЗадание(ГлавноеЗадание);
	КонецЕсли;

	Задание = СоздатьЭлемент();
	Задание.ДатаСоздания = ТекущаяУниверсальнаяДата();
	Задание.Наименование = Наименование;
	Задание.Тип = Тип;
	Задание.ПредметЗадания = ПредметЗадания;
	Задание.Родитель = ГлавноеЗадание;
	Задание.СтатусЗадания = Перечисления.СтатусыЗаданий.Выполняется;
	Задание.МоментВремени = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Задание.ПараметрыВыполнения = ПараметрыВыполнения;
	Задание.УзелОбработки = УзелОбработки;

	Задание.Записать();
		
	// пишем в протокол
	РегистрыСведений.ПротоколВыполненияЗаданий.ДобавитьВЛог(
			Задание.Ссылка, СтрШаблон(НСтр("ru = '%1 (UTC) Создание'"), ТекущаяУниверсальнаяДата()));
	
КонецПроцедуры

// Устанавливает поток заданию маршрутизации.
//
// Параметры:
//  Задание - СправочникСсылка.ОчередьМаршрутизации - ссылка на задание.
//  Поток - Число - номер потока.
//
Процедура УстановитьПотокЗаданию(Задание, Поток) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаданиеОбъект = Задание.ПолучитьОбъект();
	ЗаданиеОбъект.НомерПотока = Поток;
	ЗаданиеОбъект.Записать();
	
	Описание = СтрШаблон(НСтр("ru ='Задание=%1. Поток=%2'"), Задание, Поток);
	ЗаписьЖурналаРегистрации(
		ИмяСобытияУстановкаПотока(),
		УровеньЖурналаРегистрации.Информация,,,
		Описание);
	
КонецПроцедуры

// Возвращает для ЖР имя события Запуск фонового.
//
Функция ИмяСобытияУстановкаПотока()
	
	Возврат НСтр("ru = 'Диспетчер обработки очереди.Установка номера потока'", 
		ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Регистрирует неудачную попытку обработки задания, при этом:
// - увеличивает КоличествоПопытокОбработки на единицу.
// - устанавливает текст ошибки
// - сбрасывает момент времени.
// 
// Параметры:
//  Задание - СправочникСсылка.ОчередьМаршрутизации - ссылка на задание.
//  ТекстОшибки - Строка - текст ошибки.
//
Процедура ЗарегистрироватьНеудачнуюПопыткуОбработки(Задание, ТекстОшибки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаданиеОбъект = Задание.ПолучитьОбъект();
	ЗаданиеОбъект.НеудачныхПопытокВыполнения = ЗаданиеОбъект.НеудачныхПопытокВыполнения + 1;
	ЗаданиеОбъект.МоментВремени = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ЗаданиеОбъект.Записать();
	
	// пишем в протокол
	РегистрыСведений.ПротоколВыполненияЗаданий.ДобавитьВЛог(
		Задание, 
		Строка(ТекущаяУниверсальнаяДата()) + " (UTC) " + ТекстОшибки
		);
	
КонецПроцедуры

// Устанавливает статус заданию маршрутизации.
//
// Параметры:
//  Задание - СправочникСсылка.ОчередьМаршрутизации - ссылка на задание.
//  СтатусЗадания
//
Процедура УстановитьСтатусЗаданию(Задание, СтатусЗадания) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаданиеОбъект = Задание.ПолучитьОбъект();
	ЗаданиеОбъект.СтатусЗадания = СтатусЗадания;
	ЗаданиеОбъект.Записать();
	
КонецПроцедуры

// Устанавливает статус заданию маршрутизации.
//
// Параметры:
//  Задание - СправочникСсылка.ОчередьМаршрутизации - ссылка на задание.
//
Процедура ОбновитьМоментВремени(Задание) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаданиеОбъект = Задание.ПолучитьОбъект();
	ЗаданиеОбъект.МоментВремени = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ЗаданиеОбъект.Записать();
	
КонецПроцедуры

// Выполняет задание.
//
// Параметры:
//  Задание - СправочникСсылка.ОчередьЗаданийДокументооборота - ссылка на задание.
//  ЗаписьЛога - Строка - 
//  УникальныйИдентификатор -УникальныйИдентификатор формы
//
Процедура ВыполнитьЗадание(Задание, Знач ЗаписьЛога = "", УникальныйИдентификатор = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	ЗаданиеЗаблокировано = Ложь;
	
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(Задание, , УникальныйИдентификатор);
		ЗаданиеЗаблокировано = Истина;
		
		ЗаданиеОбъект = Задание.ПолучитьОбъект();
		ГлавноеЗадание = ЗаданиеОбъект.Родитель;
		ЕстьГлавноеЗадание = ЗначениеЗаполнено(ГлавноеЗадание);
		
		// Блокируем главное задание, чтобы организовать последовательное удаление
		// подчиненных заданий, т.к. последнее удаляемое подчиненное задание должно вернуть
		// в очередь главное задание. Если этого не делать, то 2 параллельных сеанса диспетчера,
		// удаляющие задания, до завершения транзакции смогут прочитать сведения о друг друге,
		// главное задание зависнет в очереди в состоянии ОжидаетОбработкуПодчиненныхЗаданий.
		Если ЕстьГлавноеЗадание Тогда
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.ОчередьЗаданийДокументооборота");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ГлавноеЗадание);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			БлокировкаДанных.Заблокировать();
		КонецЕсли;
		
		Если ЕстьДочерниеЗаданияНевыполненные(Задание) Тогда
			ВызватьИсключение НСтр("ru = 'Есть невыполненные дочерние задания'");
		КонецЕсли;	

		ЗаданиеОбъект.СтатусЗадания = Перечисления.СтатусыЗаданий.Завершено;
		ЗаданиеОбъект.ДатаЗавершения = ТекущаяУниверсальнаяДата();		
		ЗаданиеОбъект.Записать();
		
		Если Не ЗначениеЗаполнено(ЗаписьЛога) Тогда
			ЗаписьЛога = НСтр("ru = 'Выполнение'", ОбщегоНазначения.КодОсновногоЯзыка());
		КонецЕсли;
		
		// пишем в протокол
		РегистрыСведений.ПротоколВыполненияЗаданий.ДобавитьВЛог(
			Задание.Ссылка, 
			Строка(ТекущаяУниверсальнаяДата()) + " (UTC) " + ЗаписьЛога);

		РазблокироватьДанныеДляРедактирования(Задание, УникальныйИдентификатор);
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		Если ЗаданиеЗаблокировано Тогда
			РазблокироватьДанныеДляРедактирования(Задание);
		КонецЕсли;
			
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Сбрасывает ошибку задания.
// 
// Параметры:
//  Задание - СправочникСсылка.ОчередьМаршрутизации - ссылка на задание.
//
Процедура СброситьОшибкуЗадания(Задание) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаданиеОбъект = Задание.ПолучитьОбъект();
	ЗаданиеОбъект.СтатусЗадания = Перечисления.СтатусыЗаданий.Выполняется;
	ЗаданиеОбъект.НеудачныхПопытокВыполнения = 0;
	ЗаданиеОбъект.Записать();
	
КонецПроцедуры

// Возвращает есть ли подзадания - неважно, выполненные или нет
//
// Параметры:
//  ГлавноеЗадание - СправочникСсылка.ОчередьМаршрутизации - ссылка на главное задание.
//  
//  Возвращаемое значение - Булево
//
Функция ЕстьДочерниеЗадания(ГлавноеЗадание) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОчередьМаршрутизации.Ссылка КАК Задание
		|ИЗ
		|	Справочник.ОчередьЗаданийДокументооборота КАК ОчередьМаршрутизации
		|ГДЕ
		|	ОчередьМаршрутизации.Родитель = &ГлавноеЗадание";
		
	Запрос.УстановитьПараметр("ГлавноеЗадание", ГлавноеЗадание);

	// есть дочерние задания 		
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

// Возвращает есть ли подзадания - именно невыполненные
//
// Параметры:
//  ГлавноеЗадание - СправочникСсылка.ОчередьМаршрутизации - ссылка на главное задание.
//  
//  Возвращаемое значение - Булево
//
Функция ЕстьДочерниеЗаданияНевыполненные(ГлавноеЗадание) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОчередьМаршрутизации.Ссылка КАК Задание
		|ИЗ
		|	Справочник.ОчередьЗаданийДокументооборота КАК ОчередьМаршрутизации
		|ГДЕ
		|	ОчередьМаршрутизации.Родитель = &ГлавноеЗадание
		|	И ОчередьМаршрутизации.СтатусЗадания <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Завершено)";
		
	Запрос.УстановитьПараметр("ГлавноеЗадание", ГлавноеЗадание);

	// есть дочерние задания 		
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции	

// Возвращает дочерние задания
// 
// Параметры:
// 	Задание - СправочникСсылка.ОчередьЗаданийДокументооборота - ссылка на задание.
// 	
// Возвращаемое значение:
//  Массив
//    * Структура
//       ** Ссылка - СправочникСсылка.ОчередьЗаданийДокументооборота
//       ** Тип - ПеречислениеСсылка.ТипыЗаданий
// 	
Функция ДочерниеЗадания(Задание) Экспорт
	
	Результат = Новый Массив; 
	
	ПоляСтруктурыЗадания = "Ссылка, Тип, СтатусЗадания";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
		|ГДЕ
		|	ОчередьЗаданийДокументооборота.Родитель = &ГлавноеЗадание";
	Запрос.УстановитьПараметр("ГлавноеЗадание", Задание);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураЗадания = Новый Структура(ПоляСтруктурыЗадания);
		ЗаполнитьЗначенияСвойств(СтруктураЗадания, Выборка);
		Результат.Добавить(СтруктураЗадания);
	КонецЦикла;
	
	Возврат Результат;
			
КонецФункции

// Возвращает наличие невыполненных заданий в очереди.
//
// Возвращаемое значение:
//  Булево
//
Функция ЕстьНевыполненныеЗадания() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОчередьЗаданийДокументооборота.Ссылка
		|ИЗ
		|	Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
		|ГДЕ
		|	ОчередьЗаданийДокументооборота.СтатусЗадания В (&СтатусыАктивныхЗаданий)";
	
	СтатусыАктивныхЗаданий = Новый Массив;
	СтатусыАктивныхЗаданий.Добавить(Перечисления.СтатусыЗаданий.Выполняется);
	СтатусыАктивныхЗаданий.Добавить(Перечисления.СтатусыЗаданий.ОжидаетЗавершенияПодчиненных);
	СтатусыАктивныхЗаданий.Добавить(Перечисления.СтатусыЗаданий.ОшибкаВыполнения);
	Запрос.УстановитьПараметр("СтатусыАктивныхЗаданий", СтатусыАктивныхЗаданий);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
		
	Возврат Ложь;
	
КонецФункции

// Возвращает наличие невыполненного задания по предмету.
// 
// Параметры:
// 	ТипЗадания - ПеречислениеСсылка.ТипыЗаданий
// 	Предмет - СправочникСсылка.ОбработкиОбъектов,
// 	          СправочникСсылка.ДействияОзнакомления,
// 	          СправочникСсылка.ДействияПодписания,
// 	          СправочникСсылка.ДействияРегистрации,
// 	          СправочникСсылка.ДействияСогласования,
// 	          СправочникСсылка.ДействияУтверждения,
// 	          ДокументСсылка.Задача,
// 	          ДокументСсылка.ДействиеЗадачи,
// 	          ЗадачаСсылка,
// 	          БизнесПроцессСсылка,
// 	          Строка,
// 	          СправочникСсылка.ДействияИсполнения,
// 	          СправочникСсылка.ДокументыПредприятия
//
// Возвращаемое значение:
//  Булево
// 	
Функция ЕстьНеВыполненноеЗаданиеПоПредмету(ТипЗадания, Предмет) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОчередьЗаданийДокументооборота.Ссылка
		|ИЗ
		|	Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
		|ГДЕ
		|	ОчередьЗаданийДокументооборота.Тип = &Тип
		|	И ОчередьЗаданийДокументооборота.ПредметЗадания = &ПредметЗадания
		|	И ОчередьЗаданийДокументооборота.СтатусЗадания В (&СтатусыАктивныхЗаданий)";
	
	Запрос.УстановитьПараметр("Тип", ТипЗадания);
	Запрос.УстановитьПараметр("ПредметЗадания", Предмет);
	
	СтатусыАктивныхЗаданий = Новый Массив;
	СтатусыАктивныхЗаданий.Добавить(Перечисления.СтатусыЗаданий.Выполняется);
	СтатусыАктивныхЗаданий.Добавить(Перечисления.СтатусыЗаданий.ОжидаетЗавершенияПодчиненных);
	СтатусыАктивныхЗаданий.Добавить(Перечисления.СтатусыЗаданий.ОшибкаВыполнения);
	Запрос.УстановитьПараметр("СтатусыАктивныхЗаданий", СтатусыАктивныхЗаданий);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
		
	Возврат Ложь;
	
КонецФункции

// Возвращает наличие невыполненных заданий по предметам.
// 
// Параметры:
// 	Предметы - Массив из СправочникСсылка.ОбработкиОбъектов,
// 	          СправочникСсылка.ДействияОзнакомления,
// 	          СправочникСсылка.ДействияПодписания,
// 	          СправочникСсылка.ДействияРегистрации,
// 	          СправочникСсылка.ДействияСогласования,
// 	          СправочникСсылка.ДействияУтверждения,
// 	          ДокументСсылка.Задача,
// 	          ДокументСсылка.ДействиеЗадачи,
// 	          ЗадачаСсылка,
// 	          БизнесПроцессСсылка,
// 	          Строка,
// 	          СправочникСсылка.ДействияИсполнения,
// 	          СправочникСсылка.ДокументыПредприятия
// 	ТипыЗаданий - Массив из ПеречислениеСсылка.ТипыЗаданий, Неопределено -
// 	ТипыЗаданийИсключения - Массив из ПеречислениеСсылка.ТипыЗаданий, Неопределено -
//
// Возвращаемое значение:
//  Булево
// 	
Функция ЕстьНеВыполненноеЗаданияПоПредметам(Предметы, ТипыЗаданий = Неопределено,
		ТипыЗаданийИсключения = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОчередьЗаданийДокументооборота.Ссылка
		|ИЗ
		|	Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
		|ГДЕ
		|	ОчередьЗаданийДокументооборота.ПредметЗадания В (&ПредметыЗадания)
		|	И ОчередьЗаданийДокументооборота.СтатусЗадания В (&СтатусыАктивныхЗаданий)";
	
	Запрос.УстановитьПараметр("ПредметыЗадания", Предметы);
	
	СтатусыАктивныхЗаданий = Новый Массив;
	СтатусыАктивныхЗаданий.Добавить(Перечисления.СтатусыЗаданий.Выполняется);
	СтатусыАктивныхЗаданий.Добавить(Перечисления.СтатусыЗаданий.ОжидаетЗавершенияПодчиненных);
	СтатусыАктивныхЗаданий.Добавить(Перечисления.СтатусыЗаданий.ОшибкаВыполнения);
	Запрос.УстановитьПараметр("СтатусыАктивныхЗаданий", СтатусыАктивныхЗаданий);
	
	Если ТипыЗаданий <> Неопределено Тогда
		Запрос.Текст = СтрШаблон("%1 И ОчередьЗаданийДокументооборота.Тип В (&ТипыЗаданий)", Запрос.Текст);
		Запрос.УстановитьПараметр("ТипыЗаданий", ТипыЗаданий);
	КонецЕсли;
	
	Если ТипыЗаданийИсключения <> Неопределено Тогда
		Запрос.Текст = СтрШаблон("%1 И НЕ ОчередьЗаданийДокументооборота.Тип В (&ТипыЗаданийИсключения)", Запрос.Текст);
		Запрос.УстановитьПараметр("ТипыЗаданийИсключения", ТипыЗаданийИсключения);
	КонецЕсли;
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
		
	Возврат Ложь;
	
КонецФункции

// Возвращает невыполненные задания по предмету.
// 
// Параметры:
//  ПредметЗадания - СправочникСсылка.ДействияОзнакомления,
//                   СправочникСсылка.ДействияСогласования,
//                   СправочникСсылка.ДействияРегистрации,
//                   СправочникСсылка.ДействияПодписания,
//                   СправочникСсылка.Файлы,
//                   СправочникСсылка.ДействияУтверждения,
//                   ДокументСсылка.Задача,
//                   Строка,
//                   СправочникСсылка.ДокументыПредприятия,
//                   СправочникСсылка.ДействияИсполнения,
//                   ДокументСсылка.ДействиеЗадачи,
//                   СправочникСсылка.ОбработкиОбъектов,
//                   БизнесПроцессСсылка,
//                   ЗадачаСсылка
// 
// Возвращаемое значение:
//  Массив
//   * СправочникСсылка.ОчередьЗаданийДокументооборота
//
Функция НеВыполненныеЗаданияПоПредмету(ПредметЗадания) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОчередьЗаданийДокументооборота.Ссылка
		|ИЗ
		|	Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
		|ГДЕ
		|	ОчередьЗаданийДокументооборота.ПредметЗадания = &ПредметЗадания
		|	И ОчередьЗаданийДокументооборота.СтатусЗадания <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Завершено)";
	
	Запрос.УстановитьПараметр("ПредметЗадания", ПредметЗадания);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает задания с ошибками по предмету.
// 
// Параметры:
//  ПредметЗадания - СправочникСсылка.ДействияОзнакомления,
//                   СправочникСсылка.ДействияСогласования,
//                   СправочникСсылка.ДействияРегистрации,
//                   СправочникСсылка.ДействияПодписания,
//                   СправочникСсылка.Файлы,
//                   СправочникСсылка.ДействияУтверждения,
//                   ДокументСсылка.Задача,
//                   Строка,
//                   СправочникСсылка.ДокументыПредприятия,
//                   СправочникСсылка.ДействияИсполнения,
//                   ДокументСсылка.ДействиеЗадачи,
//                   СправочникСсылка.ОбработкиОбъектов,
//                   БизнесПроцессСсылка,
//                   ЗадачаСсылка
// 
// Возвращаемое значение:
//  Массив
//   * СправочникСсылка.ОчередьЗаданийДокументооборота
//
Функция ОшибочныеЗаданияПоПредмету(ПредметЗадания) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОчередьЗаданийДокументооборота.Ссылка
		|ИЗ
		|	Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
		|ГДЕ
		|	ОчередьЗаданийДокументооборота.ПредметЗадания = &ПредметЗадания
		|	И ОчередьЗаданийДокументооборота.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.ОшибкаВыполнения)";
	
	Запрос.УстановитьПараметр("ПредметЗадания", ПредметЗадания);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Удаляет одно задание из очереди.
//                   
// Параметры:
//   Задание  -СправочникССылка.ОчередьЗаданийДокументооборота
Процедура УдалитьОдноЗадание(Задание) Экспорт      
	
	НачатьТранзакцию();
	
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(Задание);
		
		РегистрыСведений.ПротоколВыполненияЗаданий.УдалитьЛог(Задание);
		
		ЗаданиеОбъект = Задание.ПолучитьОбъект();
		ЗаданиеОбъект.Удалить();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'ОчередьЗаданийДокументооборота удаление выполненных'", 
				ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение;	
		
	КонецПопытки;
	
КонецПроцедуры	

// Удаляет все задания из очереди.
// При этом не выполняет контроль консистентности данных прикладных механизмов.
// Процедуру не рекомендуется использовать в шатном режиме работы механизма очереди заданий.
//
Процедура УдалитьВсеЗадания() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОчередьЗаданийДокументооборота.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
		|ГДЕ
		|	ОчередьЗаданийДокументооборота.Родитель = ЗНАЧЕНИЕ(Справочник.ОчередьЗаданийДокументооборота.ПустаяСсылка)
		|УПОРЯДОЧИТЬ ПО
		|	ОчередьЗаданийДокументооборота.МоментВремени";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			
			РегистрыСведений.ПротоколВыполненияЗаданий.УдалитьЛог(Выборка.Ссылка);
			
			ЗаданиеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗаданиеОбъект.Удалить();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'ОчередьЗаданийДокументооборота удаление выполненных'", 
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает в очередь главное задание.
//
// Параметры:
//  ГлавноеЗадание - СправочникСсылка.ОчередьЗаданийДокументооборота - ссылка на главное задание.
//
Процедура ВернутьВОчередьГлавноеЗадание(ГлавноеЗадание) Экспорт
	
	ЗаблокироватьДанныеДляРедактирования(ГлавноеЗадание);
	
	ГлавноеЗаданиеОбъект = ГлавноеЗадание.ПолучитьОбъект();
	ГлавноеЗаданиеОбъект.СтатусЗадания = 
		Перечисления.СтатусыЗаданий.Выполняется;
	ГлавноеЗаданиеОбъект.МоментВремени = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ГлавноеЗаданиеОбъект.Записать();
	
	РазблокироватьДанныеДляРедактирования(ГлавноеЗадание);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Ставит в ожидание главное задание.
//
// Параметры:
//  ГлавноеЗадание - СправочникСсылка.ОчередьЗаданийДокументооборота - ссылка на главное задание.
//
Процедура ПоставитьВОжиданиеГлавноеЗадание(ГлавноеЗадание)
	
	ГлавноеЗаданиеОбъект = ГлавноеЗадание.ПолучитьОбъект();
	ГлавноеЗаданиеОбъект.СтатусЗадания = 
		Перечисления.СтатусыЗаданий.ОжидаетЗавершенияПодчиненных;
	ГлавноеЗаданиеОбъект.МоментВремени = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ГлавноеЗаданиеОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли