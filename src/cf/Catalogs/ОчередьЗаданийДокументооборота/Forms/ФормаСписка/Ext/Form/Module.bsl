
&НаКлиенте
Перем ПредыдущийРежимСписка;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтаФорма.Заголовок = ЗаголовокФормы();
	ОтборПоОшибкамСервер();
	
	ТекущийУзелОбмена = КОДПовтИсп.ИдентификаторТекущегоУзла();
	
	ИспользоватьКОД = ПолучитьФункциональнуюОпцию("ИспользоватьКОД");
	Элементы.УзелОбменаСтрокой.Видимость = ИспользоватьКОД;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОтборПоОшибкамСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредставленияУзловОбмена = Новый Соответствие();
	
	ПредельноеОжиданиеВыполненияЗадания = Константы.ПредельноеОжиданиеВыполненияЗадания.Получить();
	ПредельноеОжиданиеВыполненияДолгогоЗадания = Константы.ПредельноеОжиданиеВыполненияДолгогоЗадания.Получить();
	
	ТекДата = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Для Каждого КлючИЗначение Из Строки Цикл
		
		ДанныеСтроки = КлючИЗначение.Значение.Данные;
		
		ДанныеСтроки.ЕстьПросрочка = Ложь;
		
		Если ДанныеСтроки.СтатусЗадания = Перечисления.СтатусыЗаданий.Завершено Тогда
			ДанныеСтроки.Ждет = 0;
		Иначе	
			ДанныеСтроки.Ждет = Цел((ТекДата - ДанныеСтроки.МоментВремени) / 1000);
		КонецЕсли;	
		
		ОписаниеТипа = Перечисления.ТипыЗаданий.ОписаниеТипаЗадания(ДанныеСтроки.Тип);
		
		ДанныеСтроки.ДолгоеЗадание = ОписаниеТипа.ДолгоеЗадание;
		ДанныеСтроки.Сеанс = ОписаниеТипа.Сеанс; 

		Если ДанныеСтроки.Сеанс = "Клиент" 
			И ДанныеСтроки.Ждет > ПредельноеОжиданиеВыполненияДолгогоЗадания Тогда  
			ДанныеСтроки.ЕстьПросрочка = Истина;
		ИначеЕсли ДанныеСтроки.Сеанс = "Сервер" 
			И ДанныеСтроки.Ждет > ПредельноеОжиданиеВыполненияЗадания Тогда  
			ДанныеСтроки.ЕстьПросрочка = Истина;
		ИначеЕсли ДанныеСтроки.Сеанс = "Сервер" И ДанныеСтроки.ДолгоеЗадание 
			И ДанныеСтроки.Ждет > ПредельноеОжиданиеВыполненияДолгогоЗадания Тогда  
			ДанныеСтроки.ЕстьПросрочка = Истина;
		КонецЕсли;	
		
		УзелОбменаСтрокой = ПредставленияУзловОбмена[ДанныеСтроки.УзелОбработки];
		Если Не ЗначениеЗаполнено(УзелОбменаСтрокой) Тогда
			УзелКОД = КОДПовтИсп.УзелКОДПоИдентификатору(Строка(ДанныеСтроки.УзелОбработки));
			Если ОбщегоНазначения.СсылкаСуществует(УзелКОД) Тогда
				ПредставленияУзловОбмена[ДанныеСтроки.УзелОбработки] = Строка(УзелКОД);
			Иначе
				ПредставленияУзловОбмена[ДанныеСтроки.УзелОбработки] = Строка(ДанныеСтроки.УзелОбработки);
			КонецЕсли;
			УзелОбменаСтрокой = ПредставленияУзловОбмена[ДанныеСтроки.УзелОбработки];
		КонецЕсли;
		ДанныеСтроки.УзелОбменаСтрокой = УзелОбменаСтрокой;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработчикСписокПриАктивизацииСтроки", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикСписокПриАктивизацииСтроки()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ИсторияВыполнения = "";
		Возврат;
	КонецЕсли;	
	
	ЕстьПросрочка = Ложь;
	
	МассивВыделенных = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.Список.ВыделенныеСтроки Цикл
		
		МассивВыделенных.Добавить(ВыделеннаяСтрока);
		
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(ВыделеннаяСтрока);
		Если ДанныеСтроки <> Неопределено И ДанныеСтроки.ЕстьПросрочка Тогда
			ЕстьПросрочка = Истина;
		КонецЕсли;	
		
	КонецЦикла;	
	
	ИсторияВыполнения = ПрочитатьИсторию(МассивВыделенных);
	
	Элементы.СброситьОшибкиПраво.Доступность = (ТекущиеДанные.НеудачныхПопытокВыполнения >= 3);
	Элементы.СброситьОшибки.Доступность = (ТекущиеДанные.НеудачныхПопытокВыполнения >= 3);
	Элементы.ОбработатьПринудительноПраво.Доступность = ЕстьПросрочка;
	Элементы.ОбработатьПринудительно.Доступность = ЕстьПросрочка;

КонецПроцедуры	

&НаКлиенте
Процедура СброситьОшибки(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() = 1 Тогда
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(Элементы.Список.ВыделенныеСтроки[0]);
		Если ДанныеСтроки.УзелОбработки <> ТекущийУзелОбмена Тогда
			ТекстПредупреждения = СтрШаблон(
				НСтр("ru = 'Ошибки по заданию могут быть сброшены только в узле ""%1"".'"),
				ДанныеСтроки.УзелОбменаСтрокой);
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаданияДляОбработки = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.Список.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(Элементы.Список.ВыделенныеСтроки[0]);
		Если ДанныеСтроки.УзелОбработки = ТекущийУзелОбмена Тогда
			ЗаданияДляОбработки.Добавить(ВыделеннаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаданияДляОбработки.Количество() = 0
		И Элементы.Список.ВыделенныеСтроки.Количество() > 0 Тогда
		
		ТекстПредупреждения = СтрШаблон(
			НСтр("ru = 'Ошибки по выделенным заданиям могут быть сброшены только в соответствующих узлах выполнения.'"),
			ДанныеСтроки.УзелОбменаСтрокой);
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		Возврат;
		
	КонецЕсли;
	
	Обработано = 0;
	СброситьОшибкиСервер(ЗаданияДляОбработки, Обработано);
	
	ОбновитьРеализация();
	
	ПоказатьОповещениеПользователя(
		СтрШаблон(НСтр("ru = 'Сброшен признак наличия ошибок у %1 заданий'"), Обработано)
		);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПринудительно(Команда)  
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	

	ДляОбработкиВДругихУзлах = 0;
	ВсегоУспешно = 0;
	ВсегоОшибок = 0;
	СколькоВыделено = Элементы.Список.ВыделенныеСтроки.Количество();
	
	Если СколькоВыделено = 0 Тогда
		Возврат;
	КонецЕсли;	

	#Если ВебКлиент Тогда
		
		Если СколькоВыделено = 1 И Элементы.Список.ТекущиеДанные.Сеанс = "Клиент"Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Для задания с ""Сеанс"" = ""Клиент"" 
			|эту операцию можно выполнить только в тонком клиенте в Windows'"));
			Возврат;
		КонецЕсли;	
		
	#КонецЕсли
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Список.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(ВыделеннаяСтрока);
		
		Если ДанныеСтроки.УзелОбработки <> ТекущийУзелОбмена Тогда
			ДляОбработкиВДругихУзлах = ДляОбработкиВДругихУзлах + 1;
			Продолжить;
		КонецЕсли;
		
		ТекЗадание = ДанныеСтроки.Ссылка;
		Если ДанныеСтроки.Сеанс = "Сервер" Тогда
			
			ЗаданиеЗавершеноУспешно = Ложь;
			БылаОшибка = Ложь;
			
			ПараметрыЗаданияДляОбработки = ПараметрыЗаданияДляОбработки();
			ЗаполнитьЗначенияСвойств(ПараметрыЗаданияДляОбработки, ДанныеСтроки);
			ПараметрыЗаданияДляОбработки.Задание = ТекЗадание;
			
			ОбработатьПринудительноСервер(
				ПараметрыЗаданияДляОбработки,
				ЗаданиеЗавершеноУспешно,
				БылаОшибка,
				УникальныйИдентификатор);
				
			Если ЗаданиеЗавершеноУспешно Тогда
				ВсегоУспешно = ВсегоУспешно + 1;
			КонецЕсли;
				
			Если БылаОшибка Тогда	
				ВсегоОшибок = ВсегоОшибок + 1;
			КонецЕсли;	
				
		ИначеЕсли ДанныеСтроки.Сеанс = "Клиент" Тогда
			
			ЗаданияДляОбработки 
			= ДиспетчерОбработкиОчередиЗаданийВызовСервера.ЗаданияДляОбработкиНаКлиенте(
				1, ТекЗадание);
			
			Для Каждого ОписаниеЗадания Из ЗаданияДляОбработки Цикл
				
				ЗаданиеЗавершено = Ложь;
				
				ОписаниеЗадания.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
				ДиспетчерОбработкиОчередиЗаданийКлиент.ОбработатьОдноЗадание(
					ОписаниеЗадания, ЗаданиеЗавершено);
				
				Если ЗаданиеЗавершено Тогда
					ВсегоУспешно = ВсегоУспешно + 1;
				Иначе	
					ВсегоОшибок = ВсегоОшибок + 1;
				КонецЕсли;	
				
			КонецЦикла;
			
		КонецЕсли;		
			
	КонецЦикла;	
	
	ОбновитьРеализация();
	
	ТекстСообщения = "";
	Если ДляОбработкиВДругихУзлах = СколькоВыделено Тогда
		
		Если ДляОбработкиВДругихУзлах = 1 Тогда
			ДанныеСтроки = Элементы.Список.ДанныеСтроки(Элементы.Список.ВыделенныеСтроки[0]);
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Задание может быть обработано только в узле ""%1"".'"),
				ДанныеСтроки.УзелОбменаСтрокой);
		Иначе
			ТекстСообщения = 
				НСтр("ru = 'Выделенные задания могут быть обработаны только в соответствующих узлах выполнения.'");
		КонецЕсли;
		
	ИначеЕсли СколькоВыделено = 1 Тогда
		
		Если ВсегоУспешно > 0 Тогда 
			ТекстСообщения = Нстр("ru = 'Задание выполнено'");
		ИначеЕсли ВсегоОшибок <> 0 Тогда
			ТекстСообщения = Нстр("ru = 'Задание не выполнено. 
			|Текст ошибки можно посмотреть в истории выполнения (справа).'");
		КонецЕсли;
			 
	Иначе	
		
		ВсегоОтработано = ВсегоУспешно + ВсегоОшибок;
		Если ВсегоОтработано <> 0 Тогда
			
			Если ВсегоОшибок = 0 Тогда
				ТекстСообщения = СтрШаблон(Нстр("ru = 'Задания выполнены (%1 шт)'"), ВсегоУспешно);
			Иначе
				ТекстСообщения = СтрШаблон(Нстр("ru = 'Задания выполнены успешно: %1 шт, с ошибками: %2 шт.
				|Текст ошибок можно посмотреть в истории выполнения (справа).'"), 
					ВсегоУспешно, ВсегоОшибок);
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьРеализация();
		
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоОшибкам(Команда)
	
	Если Не ЕстьОтборПоОшибкам Тогда
		ПредыдущийРежимСписка = Элементы.Список.Отображение;
	КонецЕсли;	
	
	ЕстьОтборПоОшибкам = Не ЕстьОтборПоОшибкам; 
	
	ЕстьОтборНевыполненные = Ложь;
	
	Если ЕстьОтборПоОшибкам Тогда
		Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	ИначеЕсли ПредыдущийРежимСписка <> Неопределено Тогда	
		Элементы.Список.Отображение = ПредыдущийРежимСписка;
	КонецЕсли;	
	
	ОтборПоОшибкамСервер();

КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПрочитатьИсторию(МассивВыделенных)
	
	ПротоколВесь = "";
	ВсегоВыделено = МассивВыделенных.Количество();
	
	МассивСтроки = Новый Массив;
	
	Для Каждого ЗаданиеСсылка Из МассивВыделенных Цикл
		
		Протокол = РегистрыСведений.ПротоколВыполненияЗаданий.ПрочитатьЛог(ЗаданиеСсылка);
		НавСсылка = ПолучитьНавигационнуюСсылку(ЗаданиеСсылка);
		
		Если МассивСтроки.Количество() <> 0 Тогда
			МассивСтроки.Добавить(Символы.ВК + Символы.ВК);
		КонецЕсли;
		
		Если ВсегоВыделено > 1 Тогда
			МассивСтроки.Добавить(НавСсылка + Символы.ВК + Строка(ЗаданиеСсылка) + Символы.ВК + Протокол);
		Иначе
			МассивСтроки.Добавить(Протокол);
		КонецЕсли;
			
	КонецЦикла;	
	
	ПротоколВесь = СтрСоединить(МассивСтроки);
	
	Возврат ПротоколВесь;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СброситьОшибкиСервер(МассивВыделенных, Обработано)
	
	Для Каждого ЗаданиеСсылка Из МассивВыделенных Цикл
		
		Попытка
			
			ЗаданиеОбъект = ЗаданиеСсылка.ПолучитьОбъект();
			
			Если ЗаданиеОбъект.СтатусЗадания = Перечисления.СтатусыЗаданий.ОшибкаВыполнения Тогда
				
				ЗаданиеОбъект.СтатусЗадания = Перечисления.СтатусыЗаданий.Выполняется;
				ЗаданиеОбъект.НеудачныхПопытокВыполнения = 0;
				
				ЗаданиеОбъект.Записать();
				Обработано = Обработано + 1;
			
			КонецЕсли;
			
		Исключение
			
			ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			УровеньВажностиСобытия = УровеньЖурналаРегистрации.Ошибка;

			КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Очередь заданий.СброситьОшибки.'", КодОсновногоЯзыка),
				УровеньВажностиСобытия, , , ТекстСообщения);
			
		КонецПопытки;	
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыЗаданияДляОбработки()
	
	Возврат Новый Структура(
		"Задание,
		|Тип,
		|ПредметЗадания,
		|Родитель,
		|МоментВремени,
		|НеудачныхПопытокВыполнения");
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбработатьПринудительноСервер(
	ПараметрыЗадания, ЗаданиеЗавершеноУспешно, БылаОшибка, УникальныйИдентификатор)
	
	УстановитьПривилегированныйРежим(Истина);
	
	КоличествоПопытокОбработки 
		= ДиспетчерОбработкиОчередиЗаданийПолныеПрава.КоличествоПопытокВыполненияЗаданий();
	
	СтатусЗадания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗадания.Задание, "СтатусЗадания");	
	БылиБлокировки = Ложь;
	
	Если СтатусЗадания = Перечисления.СтатусыЗаданий.Выполняется Тогда
		ДиспетчерОбработкиОчередиЗаданийПолныеПрава.ОбработатьОдноЗадание(
			ПараметрыЗадания, КоличествоПопытокОбработки, 0, ЗаданиеЗавершеноУспешно, БылаОшибка, БылиБлокировки);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеализация()
	
	Заголовок = ЗаголовокФормы();
	Элементы.Список.Обновить();
	ОбработчикСписокПриАктивизацииСтроки();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаголовокФормы()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Всего = 0;
	Завершенные = 0;
	Ошибок = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(ОчередьЗаданийДокументооборота.Ссылка), 0) КАК Всего
		|ИЗ
		|	Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(ОчередьЗаданийДокументооборота.Ссылка), 0) КАК Завершенные
		|ИЗ
		|	Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
		|ГДЕ
		|	ОчередьЗаданийДокументооборота.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Завершено)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(КОЛИЧЕСТВО(ОчередьЗаданийДокументооборота.Ссылка), 0) КАК Ошибок
		|ИЗ
		|	Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
		|ГДЕ
		|	ОчередьЗаданийДокументооборота.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.ОшибкаВыполнения)";
		
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет(); // Массив из РезультатЗапроса
	
	Выборка = МассивРезультатовЗапроса[0].Выбрать();
	Выборка.Следующий();
	Всего = Выборка.Всего;
	
	Выборка = МассивРезультатовЗапроса[1].Выбрать();
	Выборка.Следующий();
	Завершенные = Выборка.Завершенные;

	Выборка = МассивРезультатовЗапроса[2].Выбрать();
	Выборка.Следующий();
	Ошибок = Выборка.Ошибок;
	
	// заголовок сформируем
	ТекстЗаголовка = СтрШаблон(
		НСтр("ru = 'Очередь заданий (Всего - %1 / Завершенные - %2 / Ошибок - %3)'"),
		Всего, Завершенные, Ошибок);
	
	Возврат ТекстЗаголовка
	
КонецФункции

&НаСервере
Процедура ОтборПоОшибкамСервер()

	Элементы.ФормаОтборПоОшибкам.Пометка = ЕстьОтборПоОшибкам;
	
	Если ЕстьОтборПоОшибкам Тогда
		Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	КонецЕсли;	
	
	Если ЕстьОтборПоОшибкам Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список, "НеудачныхПопытокВыполнения", 0, ВидСравненияКомпоновкиДанных.Больше);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список, "СтатусЗадания", Перечисления.СтатусыЗаданий.Завершено, 
			ВидСравненияКомпоновкиДанных.НеРавно);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
			Список, "НеудачныхПопытокВыполнения");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
			Список, "СтатусЗадания");
		
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура ОтборНевыполненныеНаСервере()
	
	Элементы.СписокОтборНевыполненные.Пометка = ЕстьОтборНевыполненные;
	
	Если ЕстьОтборНевыполненные Тогда
		Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	КонецЕсли;	
	
	Если ЕстьОтборНевыполненные Тогда
		
		// Статус <> Завершено
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список, "СтатусЗадания", Перечисления.СтатусыЗаданий.Завершено, 
			ВидСравненияКомпоновкиДанных.НеРавно);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
			Список, "СтатусЗадания");
		
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНевыполненные(Команда)           
	
	Если Не ЕстьОтборНевыполненные Тогда
		ПредыдущийРежимСписка = Элементы.Список.Отображение;
	КонецЕсли;	
	
	ЕстьОтборНевыполненные = Не ЕстьОтборНевыполненные;
	
	Если ЕстьОтборНевыполненные Тогда
		Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	ИначеЕсли ПредыдущийРежимСписка <> Неопределено Тогда	
		Элементы.Список.Отображение = ПредыдущийРежимСписка;
	КонецЕсли;	
	
	ОтборНевыполненныеНаСервере();
КонецПроцедуры

#КонецОбласти