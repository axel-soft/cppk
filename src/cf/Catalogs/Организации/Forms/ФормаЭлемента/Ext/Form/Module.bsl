
#Область ОписаниеПеременных

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ОтключитьАвтоЗаполнениеРеквизитов;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ПриСозданииНаСервереРедакцииКонфигурации();
	
	ПротоколированиеРаботыСотрудников.ЗаписатьОткрытие(Объект.Ссылка);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, 
		"ГруппаКонтактнаяИнформация", ПоложениеЗаголовкаЭлементаФормы.Лево);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Нумерация.ПоказатьИндексНумерации(ЭтотОбъект);
	БанковскиеСчета.Параметры.УстановитьЗначениеПараметра("Владелец", Объект.Ссылка);
	
	Если Не ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(Объект.Ссылка).Изменение Тогда 
		Элементы.БанковскиеСчетаСделатьОсновнымСчетом.Видимость = Ложь;
		Элементы.БанковскиеСчета.ТолькоПросмотр = Истина;
		Элементы.ИндексНумерации.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если Справочники.БанковскиеСчета.ИмеетБанковскийСчет(Объект.Ссылка) Тогда 
		Элементы.БанковскийСчетЗадан.Видимость = Истина;
		Элементы.БанковскийСчетНеЗадан.Видимость = Ложь;
	Иначе 
		Элементы.БанковскийСчетЗадан.Видимость = Ложь;
		Элементы.БанковскийСчетНеЗадан.Видимость = Истина;
	КонецЕсли;
	
	НастройкиФормы = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(ИмяФормы + "/ТекущиеДанные", "");
	Если НастройкиФормы = Неопределено Или НастройкиФормы.Получить("ПоказыватьУдаленные") = Неопределено Тогда
		Элементы.ПоказыватьУдаленные.Пометка = ПоказыватьУдаленные;
		УстановитьОтбор();
	КонецЕсли;
	
	ОбновитьИнформациюОЗапрещенныхУчастниках();
	
	Юрлица.УстановитьПодсказкиПроИсторию(ЭтотОбъект);
	
	МультиязычностьСервер.ПриСозданииНаСервере(ЭтотОбъект, Объект);
	
	
	Элементы.ЮрФизЛицо.РежимВыбораИзСписка = Истина;
	Элементы.ЮрФизЛицо.СписокВыбора.Добавить(Перечисления.ЮрФизЛицо.ЮрЛицо);
	Если Не РедакцииКонфигурации.ЭтоДокументооборотГосударственногоУчреждения() Тогда
		// Гос. учреждение не может являться ИП.
		Элементы.ЮрФизЛицо.СписокВыбора.Добавить(Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель);
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСправочника();
	ПараметрыПриСозданииНаСервере.Форма                 = ЭтотОбъект;
	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Элементы.КомандыЭДО;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСправочника(ПараметрыПриСозданииНаСервере);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ЭтоНовыйЭлемент = Параметры.Ключ.Пустая();
	Элементы.ГруппаЗаполнениеПоДаннымЕдиныхГосРеестров.Видимость = ЭтоНовыйЭлемент;
	Элементы.ЗаполнитьПоИНН.Видимость = НЕ ЭтоНовыйЭлемент;
	Элементы.ЗаполнитьПоИНН_ИП.Видимость = Не ЭтоНовыйЭлемент;
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	Если Параметры.Ключ.Пустая() Тогда
		ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
			ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимость();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПриОткрытии = ОбменСКонтрагентамиКлиент.ПараметрыПриОткрытии();
	ПараметрыПриОткрытии.Форма                            = ЭтотОбъект;
	ПараметрыПриОткрытии.МестоРазмещенияКоманд            = Элементы.КомандыЭДО;
	ПараметрыПриОткрытии.ЕстьОбработчикОбновитьКомандыЭДО = Истина;
	
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ПараметрыПриОткрытии);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ЗаписатьОсновнойБанковскийСчет"
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Владелец = Объект.Ссылка Тогда 
		Объект.ОсновнойБанковскийСчет = Параметр.ОсновнойБанковскийСчет;
		Элементы.БанковскийСчетЗадан.Видимость = Истина;
		Элементы.БанковскийСчетНеЗадан.Видимость = Ложь;
		Записать();
	КонецЕсли;
	
	Если ИмяСобытия = "СозданБанковскийСчет"
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Владелец = Объект.Ссылка Тогда 
		КоличествоБанковскихСчетов = ПолучитьКоличествоСчетов(Объект.Ссылка, ПоказыватьУдаленные);
	КонецЕсли;
	
	
	Если ИмяСобытия = "ОтредактированаИсторияКПП" Тогда
		
		ЮрлицаКлиент.ОбновитьИсториюКППВФорме(ЭтотОбъект, Параметр.ИсторияКПП);
		
	ИначеЕсли ИмяСобытия = "ОтредактированаИсторияНаименований" Тогда
		
		ЮрлицаКлиент.ОбновитьИсториюНаименованийВФорме(ЭтотОбъект, Параметр.ИсторияНаименований);
		
	Иначе
		
		// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
		ПараметрыОповещенияЭДО = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаСправочника();
		ПараметрыОповещенияЭДО.Форма                            = ЭтотОбъект;
		ПараметрыОповещенияЭДО.МестоРазмещенияКоманд            = Элементы.КомандыЭДО;
		ПараметрыОповещенияЭДО.ЕстьОбработчикОбновитьКомандыЭДО = Истина;

		ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаСправочника(ИмяСобытия, Параметр, Источник, ПараметрыОповещенияЭДО);
		// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ФайлФотографии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект.Ссылка, "Логотип");
	ДвоичныеДанные = ФайлФотографии.Получить();
	ЕстьКартинка = ЗначениеЗаполнено(ДвоичныеДанные);
	Фотография = ПолучитьНавигационнуюСсылку(Объект.Ссылка, "Логотип");
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Юрлица.ПрочитатьИсториюВФорме(ЭтотОбъект);
	
	МультиязычностьСервер.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
		ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);
	
	ЗаполнитьОтветственныеЛица();
	
	ОбщегоНазначенияДокументооборот.ПоказатьНадписьПометкиУдаления(ЭтотОбъект, ТекущийОбъект.ПометкаУдаления);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Если есть дубли, покажем их:
	Если ЗначениеЗаполнено(Объект.Наименование) Тогда
		
		Если Не ПараметрыЗаписи.Свойство("ЗаписьДублирующейОрганизации") Тогда
			
			НайденныеДубли = НайденныеДублиОрганизации_Сервер();
			Если НайденныеДубли.Количество() > 0 Тогда
				ПараметрыФормы = Новый Структура();
				ПараметрыФормы.Вставить("НайденныеОбъекты", НайденныеДубли);
				ПараметрыФормы.Вставить("ИмяОбъектаМетаданных", "Организации");
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюЕстьДубли_Продолжение",
					ЭтотОбъект,
					ПараметрыЗаписи);
				ОткрытьФорму(
					"Справочник.Контрагенты.Форма.СписокДублейЮрлиц", 
					ПараметрыФормы, 
					ЭтотОбъект,,,,
					ОписаниеОповещения,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", ТекущийОбъект.ЭтоНовый());
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	МультиязычностьСервер.ПередЗаписьюНаСервере(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Юрлица.ЗаписатьИсториюВФорме(ЭтотОбъект, ТекущийОбъект.Ссылка, Отказ);
	ЗаписатьОтветственныеЛица(ТекущийОбъект.Ссылка); // Объект.Ссылка - нельзя - для записи нового на данном этапе еще пустая.
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	ИндексНумерации = СокрЛП(ИндексНумерации);
	Если ИндексНумерации <> ИндексНумерацииПриОткрытии Тогда 
		Если ЗначениеЗаполнено(ИндексНумерации) Тогда 
			РегистрыСведений.ИндексыНумерации.ЗаписатьИндексНумерации(Объект.Ссылка, ИндексНумерации);
		Иначе 
			РегистрыСведений.ИндексыНумерации.УдалитьИндексНумерации(Объект.Ссылка);
		КонецЕсли;
		
		ИндексНумерацииПриОткрытии = ИндексНумерации;
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина Тогда
		БанковскиеСчета.Параметры.УстановитьЗначениеПараметра("Владелец", Объект.Ссылка);
	КонецЕсли;
	
	КоличествоБанковскихСчетов = ПолучитьКоличествоСчетов(Объект.Ссылка, ПоказыватьУдаленные);
	
	ПротоколированиеРаботыСотрудников.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(Объект.Ссылка);
	
	ОбновитьИнформациюОЗапрещенныхУчастниках();
	
	МультиязычностьСервер.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьИнтерфейс(); // Могло измениться количество организаций.
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура Подключаемый_Открытие(Элемент, СтандартнаяОбработка)
    МультиязычностьКлиент.ПриОткрытии(ЭтотОбъект, Объект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если ФормироватьНаименованиеПолноеАвтоматически 
		Или Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда 
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;
	
	ЮрлицаКлиент.УстановитьАктуальноеЗначениеИсторииНаименований(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
		ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);
	
	ЮрлицаКлиент.УстановитьАктуальноеЗначениеИсторииНаименований(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Список = Новый СписокЗначений();
	Если ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		Список.Добавить(Объект.НаименованиеПолное);
	КонецЕсли;
	Для Каждого НаименованиеАвтозаполнения Из НаименованияАвтозаполнения Цикл
		ТекущееНаименование = НаименованиеАвтозаполнения.Значение;
		Если ЗначениеЗаполнено(ТекущееНаименование)
			И Список.НайтиПоЗначению(ТекущееНаименование) = Неопределено Тогда
			Список.Добавить(ТекущееНаименование);
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(Объект.Наименование)
		И Список.НайтиПоЗначению(Объект.Наименование) = Неопределено Тогда
		Список.Добавить(Объект.Наименование);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("НаименованиеПолноеНачалоВыбораЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(Оповещение, Список, Элементы.НаименованиеПолное);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИсторияНаименованийНажатие(Элемент)
	
	ЮрлицаКлиент.ОткрытьФормуИсторииНаименований(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрФизЛицоПриИзменении(Элемент)
	
	Если Объект.ЮрФизЛицо <> ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо") Тогда
		Объект.КПП = "";
	КонецЕсли;
	
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)
	
	ЮрлицаКлиент.УстановитьАктуальноеЗначениеИсторииКПП(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИсторияКППНажатие(Элемент)
	
	ЮрлицаКлиент.ОткрытьФормуИсторииКПП(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойБанковскийСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьПредупреждение(, РедакцииКонфигурацииКлиентСервер.ОсновнойБанковскийСчетОшибка());
		СтандартнаяОбработка = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПрефиксПриИзменении(Элемент)
	
	Если СтрНайти(Объект.Префикс, "-") > 0 Тогда
		ПоказатьПредупреждение(Неопределено, 
			РедакцииКонфигурацииКлиентСервер.ОшибкаПрефиксОрганизации());
		Объект.Префикс = СтрЗаменить(Объект.Префикс, "-", "");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредупреждениеОЗапрещенныхНажатие(Элемент)
	
	ПараметрыФормыЗапрещенных = Новый Структура("Организация", Объект.Ссылка);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработкаЗакрытияФормыЗапрещенных", ЭтотОбъект);
	ОткрытьФорму("Справочник.Организации.Форма.ЗапрещенныеУчастникиДоступа",
		ПараметрыФормыЗапрещенных, ЭтотОбъект,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура ПолеПоискаИНННаименованиеПриИзменении(Элемент)
	
	ЗаполнитьПоДаннымЕдиныхГосРеестровНаКлиенте(ПолеПоискаИНННаименование);
	
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	
	УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат) Экспорт
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБанковскиеСчета

&НаКлиенте
Процедура БанковскиеСчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ОписаниеОповещенияОтветаНаВопрос = Новый ОписаниеОповещения(
		"СоздатьБанковскийСчетПродолжение",
		ЭтотОбъект,
		Новый Структура("Копирование", Копирование));
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьВопрос(ОписаниеОповещенияОтветаНаВопрос, 
			НСтр("ru = 'Данные еще не записаны.
                  |Создание ""Банковского счета"" возможно только после записи данных. 
                  |Данные будут записаны.'"),
			РежимДиалогаВопрос.ОКОтмена);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОтветаНаВопрос, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьБанковскийСчетПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.ОК И Не Записать() Тогда 
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
	КонецЕсли;
	
	Если Параметры.Копирование Тогда 
		СтруктураПараметров = Новый Структура("ЗначениеКопирования", Элементы.БанковскиеСчета.ТекущаяСтрока);
	Иначе 
		СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", Новый Структура("Владелец", Объект.Ссылка));
	КонецЕсли;
	
	ОткрытьФорму("Справочник.БанковскиеСчета.ФормаОбъекта", СтруктураПараметров, ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтветственныеЛица

&НаКлиенте
Процедура ОтветственныеЛицаПриИзменении(Элемент)
	
	ОтветственныеЛица_Модифицированность = Истина;
	КоличествоОтветственныхЛиц = ОтветственныеЛица.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныеЛицаСотрудникОбработкаВыбора(
	Элемент, ВыбранноеЗначение, ДополнительныеДанные, ВыборДобавлением, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.ОтветственныеЛица.ТекущиеДанные;
	СотрудникиКлиент.СотрудникОбработкаВыбора(СтрокаТаблицы, "Сотрудник", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныеЛицаПриАктивизацииСтроки(Элемент)
	
	ДанныеСтроки = Элементы.ОтветственныеЛица.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеСтроки.Период) Тогда
		ДанныеСтроки.Период = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
		
		ОтветственныеЛица_Модифицированность = Истина;
		КоличествоОтветственныхЛиц = ОтветственныеЛица.Количество();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоступ

&НаКлиенте
Процедура ДоступПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЕстьИзменения = Ложь;
	
	Для Каждого Значение Из ВыбранноеЗначение Цикл
		Если Объект.Доступ.НайтиСтроки(Новый Структура("Участник", Значение)).Количество() = 0 Тогда
			Строка = Объект.Доступ.Добавить();
			Строка.Участник = Значение;
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка= Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ОтображатьРоли", Истина);
	ПараметрыФормы.Вставить("ПодменятьПользователейСотрудниками", Истина);
	ПараметрыФормы.Вставить("ВыбиратьКонтейнерыПользователей", Истина);
	
	Если Элементы.Доступ.ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы.Вставить("ВыбранныеАдресаты",
			Элементы.Доступ.ТекущиеДанные.Участник);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор сотрудника, подразделения, группы, роли'"));
	ПараметрыФормы.Вставить("ЗаголовокСпискаАдреснойКниги", НСтр("ru = 'Все сотрудники'"));
	
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыФормы, Элементы.ДоступУчастник, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступУчастникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СотрудникиКлиент.ОбработкаВыбораКонтейнера(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СотрудникиВызовСервера.СформироватьДанныеВыборасКонтейнерами(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступУчастникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СотрудникиВызовСервера.СформироватьДанныеВыборасКонтейнерами(Текст);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СделатьОсновнымСчетом(Команда)
	
	ОсновнойБанковскийСчет = Элементы.БанковскиеСчета.ТекущаяСтрока;
	
	Если ОсновнойБанковскийСчет = Неопределено 
		Или ОсновнойБанковскийСчет = Объект.ОсновнойБанковскийСчет Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.ОсновнойБанковскийСчет = Элементы.БанковскиеСчета.ТекущаяСтрока;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленные(Команда)
	
	ПоказыватьУдаленные = Не ПоказыватьУдаленные;
	Элементы.ПоказыватьУдаленные.Пометка = ПоказыватьУдаленные;
	УстановитьОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьБанковскийСчет(Команда)
	
	ОписаниеОповещенияОтветаНаВопрос = Новый ОписаниеОповещения(
		"СоздатьБанковскийСчетПродолжение",
		ЭтотОбъект,
		Новый Структура("Копирование", Ложь));
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьВопрос(ОписаниеОповещенияОтветаНаВопрос, 
			НСтр("ru = 'Данные еще не записаны.
                  |Создание ""Банковского счета"" возможно только после записи данных. 
                  |Данные будут записаны.'"),
			РежимДиалогаВопрос.ОКОтмена);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОтветаНаВопрос, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ОчиститьИзображение(Команда)
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	ОчиститьИзображениеСервер();
	ЕстьКартинка = Ложь;
	Элементы.Фотография.Гиперссылка = Не ЕстьКартинка;
	Элементы.АдресКартинкиКонтекстноеМенюДобавитьИзображение.Доступность = Не ЕстьКартинка;
	Элементы.АдресКартинкиКонтекстноеМенюОчиститьИзображение.Доступность = ЕстьКартинка;
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

// СтандартныеПодсистемы.РаботаСКонтрагентами
#Область РаботаСКонтрагентамиБИП_Команды

&НаКлиенте
Процедура ЗаполнитьПоДаннымЕдиныхГосРеестров(Команда)
	
	Если Не ЗначениеЗаполнено(ПолеПоискаИНННаименование) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru='Поле ""ИНН или наименование"" не заполнено.'"),
			,
			"ПолеПоискаИНННаименование");
		ТекущийЭлемент = Элементы.ПолеПоискаИНННаименование;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоДаннымЕдиныхГосРеестровНаКлиенте(ПолеПоискаИНННаименование);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоИНН(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ИНН) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Поле ""ИНН"" не заполнено'"));
		
		Если Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель") Тогда 
			ТекущийЭлемент = Элементы.ИНН2;
		Иначе 
			ТекущийЭлемент = Элементы.ИНН;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Объект.ЮрФизЛицо <> ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель")
		И Объект.ЮрФизЛицо <> ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо") Тогда 
		ПоказатьПредупреждение(,
			НСтр("ru = 'Заполнение по ИНН возможно только для юридических лиц и индивидуальных предпринимателей'"));
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоДаннымЕдиныхГосРеестровНаКлиенте(Объект.ИНН, Истина);
	
КонецПроцедуры

#КонецОбласти
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьОтбор()
	
	Если Не ПоказыватьУдаленные Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			БанковскиеСчета, "ПометкаУдаления", Ложь,
			ВидСравненияКомпоновкиДанных.Равно, , Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(БанковскиеСчета, "ПометкаУдаления");
	КонецЕсли;
	
	КоличествоБанковскихСчетов = ПолучитьКоличествоСчетов(Объект.Ссылка, ПоказыватьУдаленные);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоличествоСчетов(Организация, ПоказыватьУдаленные)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ БанковскиеСчета.Ссылка) КАК КоличествоСчетов
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Владелец = &Организация";
		
	Если Не ПоказыватьУдаленные Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И НЕ БанковскиеСчета.ПометкаУдаления";
	КонецЕсли;
	
	КоличествоБанковскихСчетов = 0;
	Запрос.Параметры.Вставить("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		КоличествоБанковскихСчетов = Выборка.КоличествоСчетов;
	КонецЦикла;
	
	Возврат КоличествоБанковскихСчетов;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимость()
	
	Если Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель") Тогда
		Элементы.ГруппаЮрФизЛицо.ТекущаяСтраница = Элементы.ГруппаКакИП;
	Иначе
		Элементы.ГруппаЮрФизЛицо.ТекущаяСтраница = Элементы.ГруппаКакЮрЛицо;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ СВОЙСТВ

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервереРедакцииКонфигурации()	
	
	Элементы.ЗаголовокВида.Заголовок = РедакцииКонфигурацииКлиентСервер.ВидОрганизации();
	Если РедакцииКонфигурации.ЭтоДокументооборотГосударственногоУчреждения() Тогда
		Элементы.ЮрФизЛицо.ТолькоПросмотр = Истина; // Гос.учреждение не может быть физлицом.
	КонецЕсли;
	Элементы.ПолеПоискаИНННаименование.ПодсказкаВвода = СтрШаблон(
		НСтр("ru = 'Введите ИНН или наименование %1'"), РедакцииКонфигурацииКлиентСервер.ОрганизацииРодительный());
	Команды.ЗаполнитьПоИНН.Подсказка = СтрШаблон(
		НСтр("ru = 'Автоматически заполнить реквизиты %1
		|по ИНН на основании данных ЕГРЮЛ / ЕГРИП'"), РедакцииКонфигурацииКлиентСервер.ОрганизацииРодительный());
	
КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	ПараметрыОписания = Новый Структура(
		"АдресВременногоХранилищаФайла", 
		"");
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьИзображениеНаКлиентеПродолжение",
		ЭтотОбъект,
		ПараметрыОписания);
		
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеПродолжение(Результат, ДополнительныеПараметры)Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Записать();
	Иначе
		Возврат;
	КонецЕсли;

	Если Не ЕстьКартинка И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВыборКартинкиПродолжение",
			ЭтотОбъект,
			ДополнительныеПараметры);

		ФайловыеФункцииКлиент.ВыбратьКартинкуИПоместитьВХранилище(
			ОписаниеОповещения, УникальныйИдентификатор);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыборКартинкиПродолжение(Результат, Параметры) Экспорт 

	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьИзображение(Параметры.АдресВременногоХранилищаФайла);

	ЕстьКартинка = Истина;
	Элементы.Фотография.Гиперссылка = Не ЕстьКартинка;
	Элементы.АдресКартинкиКонтекстноеМенюДобавитьИзображение.Доступность = Не ЕстьКартинка;
	Элементы.АдресКартинкиКонтекстноеМенюОчиститьИзображение.Доступность = ЕстьКартинка;
	Прочитать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзображение(АдресВременногоХранилищаФайла)
	
	ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка, , УникальныйИдентификатор);
	ОрганизацияОбъект = Объект.Ссылка.ПолучитьОбъект();
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаФайла);
	ОрганизацияОбъект.Логотип = Новый ХранилищеЗначения(ДвоичныеДанные);
	ОрганизацияОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(Объект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры	

&НаСервере
Процедура ОчиститьИзображениеСервер()
	
	ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка, , УникальныйИдентификатор);
	ПользовательОбъект = Объект.Ссылка.ПолучитьОбъект();
	ПользовательОбъект.Логотип = Новый ХранилищеЗначения(Неопределено);
	ПользовательОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(Объект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьИнформациюОЗапрещенныхУчастниках()
	
	КолОбъектов = 0;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		МетаданныеДляАнализа = ДокументооборотПраваДоступа.МетаданныеОбъектовДляПоискаЗапрещенныхУчастников();
		Для Каждого ЭлементМетаданных Из МетаданныеДляАнализа Цикл
			КолОбъектов = КолОбъектов + Справочники.Организации.ОбъектыСЗапрещеннымиУчастникамиДоступа(
				ЭлементМетаданных, Истина, Объект.Ссылка);
		КонецЦикла;
	КонецЕсли;
	Элементы.ГруппаПредупреждениеОЗапрещенных.Видимость = КолОбъектов > 0;
	Элементы.ПредупреждениеОЗапрещенных.Заголовок = СтрШаблон(
		НСтр("ru = '%1 с запрещенными участниками доступа'"), 
		СтрокаСЧислом(НСтр("ru = ';Обнаружен %1 объект;;
				|Обнаружено %1 объекта;Обнаружено %1 объектов;
				|Обнаружено %1 объектов'"),
			КолОбъектов, ВидЧисловогоЗначения.Количественное));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияФормыЗапрещенных(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьИнформациюОЗапрещенныхУчастниках();
	
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСКонтрагентами
#Область РаботаСКонтрагентамиБИП_СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаполнитьПоДаннымЕдиныхГосРеестровНаКлиенте(СтрокаПоиска, Знач ЗаполнениеПоИНН = Неопределено)

	Если ПустаяСтрока(СтрокаПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтключитьАвтоЗаполнениеРеквизитов <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтключитьАвтоЗаполнениеРеквизитов = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ВключитьАвтоЗаполнениеРеквизитов", 0.1, Истина);
	
	СтрокаПоиска = СокрЛП(СтрокаПоиска);
	ПроверятьИНН = ЗаполнениеПоИНН <> Истина;
	
	Если ЗаполнениеПоИНН = Неопределено Тогда
		ЗаполнениеПоИНН = ЮрлицаКлиентСервер.ЭтоИНН(СтрокаПоиска);
	КонецЕсли;
	
	Если (ПроверятьИНН И ЗначениеЗаполнено(Объект.ИНН))
		Или ЗначениеЗаполнено(Объект.КПП)
		Или ЗначениеЗаполнено(Объект.Наименование) 
		Или ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		
		ДопПараметры = Новый Структура("ЗаполнениеПоИНН, СтрокаПоиска", ЗаполнениеПоИНН, СтрокаПоиска);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗаполнитьПоДаннымЕдиныхГосРеестровЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ЮрлицаКлиент.ТекстВопроса_Перезаполнить(), РежимДиалогаВопрос.ДаНет);
	Иначе
		Если ЗаполнениеПоИНН Тогда
			ЗаполнитьРеквизитыПоИНННаКлиенте(СтрокаПоиска);
		Иначе 
			ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(СтрокаПоиска);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДаннымЕдиныхГосРеестровЗавершение(Ответ, ДопПараметры) Экспорт

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ДопПараметры.ЗаполнениеПоИНН Тогда
		ЗаполнитьРеквизитыПоИНННаКлиенте(ДопПараметры.СтрокаПоиска);
	Иначе 
		ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(ДопПараметры.СтрокаПоиска);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИНННаКлиенте(СтрокаИНН)
	
	ОписаниеОшибки = "";
	ЗаполнитьРеквизитыПоИНННаСервере(СтрокаИНН, ОписаниеОшибки);
	
	Если Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ПоказатьОповещениеПользователя(
			ЮрлицаКлиент.ТекстОповещение_ЗаполненоПоИНН(), , , БиблиотекаКартинок.Информация32);
	Иначе
		РаботаСКонтрагентамиКлиент.ОбработатьОшибку(ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(СтрокаНаименование)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СтрокаПоиска", СтрокаНаименование);
	ДопПараметры = Новый Структура();
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнитьРеквизитыПоНаименованиюЗавершение", ЭтотОбъект, ДопПараметры);
	ОткрытьФорму(
		"ОбщаяФорма.ЗаполнениеРеквизитовКонтрагента", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоНаименованиюЗавершение(Результат, ДопПараметры) Экспорт

	Если НЕ ЮрлицаКлиентСервер.ЭтоИНН(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРеквизитыПоИНННаКлиенте(Результат);
	ТекущийЭлемент = Элементы.Наименование;

КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ВключитьАвтоЗаполнениеРеквизитов()

	ОтключитьАвтоЗаполнениеРеквизитов = Неопределено;	

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьРеквизитыПоИНННаСервере(СтрокаИНН, ОписаниеОшибки = "")

	ЭтоЮридическоеЛицо = (Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо);
	РеквизитыКонтрагента = Неопределено;
	Если ЭтоЮридическоеЛицо Тогда
		СведенияОЮрлице = РаботаСКонтрагентами.СведенияОЮридическомЛицеПоИНН(СтрокаИНН);
		РеквизитыКонтрагента = СведенияОЮрлице.ЕГРЮЛ;
	Иначе
		РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(СтрокаИНН);
	КонецЕсли;
	
	Если РеквизитыКонтрагента = Неопределено Тогда
		Если ЗначениеЗаполнено(СведенияОЮрлице.ОписаниеОшибки) Тогда
			ОписаниеОшибки = СведенияОЮрлице.ОписаниеОшибки;
		Иначе
			ОписаниеОшибки = НСтр("ru='Ошибка получения данных из гос.реестра. Возможно, указан ошибочный ИНН.'");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыКонтрагента.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыКонтрагента);
	Объект.ОГРН = РеквизитыКонтрагента.РегистрационныйНомер;
	
	Юрлица.ЗаполнитьИсториюВФормеИзЕГРЮЛ(ЭтотОбъект, РеквизитыКонтрагента);
	
	НаименованияАвтозаполнения.Очистить();
	НаименованияАвтозаполнения.Добавить(РеквизитыКонтрагента.НаименованиеПолное);
	НаименованияАвтозаполнения.Добавить(РеквизитыКонтрагента.НаименованиеСокращенное);
	
	Если ЭтоЮридическоеЛицо Тогда
		ЗаполнитьЭлементКонтактнойИнформации(
			Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, РеквизитыКонтрагента.ЮридическийАдрес);
		// Заполнение телефона
		ЗаполнитьЭлементКонтактнойИнформации(
			Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, РеквизитыКонтрагента.Телефон);
		
		Если РеквизитыКонтрагента.ДанныеРуководителей.Руководители.Количество() <> 0 Тогда
			
			ДанныеМенялись = Ложь;
			// Сотрудников создавать может только администратор, поэтому только поищем среди существующих:
			Для Каждого СтрокаРуководитель Из РеквизитыКонтрагента.ДанныеРуководителей.Руководители Цикл
				
				// Как правило один руководитель, максимум 2-3
				//@skip-check query-in-loop
				СуществующийСотрудник = НайтиСотрудника(СтрокаРуководитель.Представление, СтрокаРуководитель.ИНН);
				Если Не ЗначениеЗаполнено(СуществующийСотрудник) Тогда
					// Не нашли, попробуем поискать без отчества:
					//@skip-check query-in-loop
					СуществующийСотрудник = НайтиСотрудника(
						СтрШаблон("%1 %2", СтрокаРуководитель.Фамилия, СтрокаРуководитель.Имя), "");
					
					Если Не ЗначениеЗаполнено(СуществующийСотрудник) Тогда
						Продолжить; // не существующих сотрудников не создаем.
					КонецЕсли;
				КонецЕсли;
				
				// Ищем среди существующих ответственных лиц:
				НайденныеСуществующие = ОтветственныеЛица.НайтиСтроки(
					Новый Структура("Сотрудник, Период", СуществующийСотрудник, СтрокаРуководитель.ДатаЗаписи));
				Если НайденныеСуществующие.Количество() = 0 Тогда
					НовоеОтветственноеЛицо = ОтветственныеЛица.Добавить();
					НовоеОтветственноеЛицо.Сотрудник = СуществующийСотрудник;
					// Строка "директор" не локализуется т.к. в ФНС хранятся данные на русском:
					Если СтрНайти(НРег(СтрокаРуководитель.Должность), "директор") > 0 Тогда
						НовоеОтветственноеЛицо.ОтветственноеЛицо
							= Перечисления.ОтветственныеЛицаОрганизаций.РуководительОрганизации;
					КонецЕсли;
					НовоеОтветственноеЛицо.Период = СтрокаРуководитель.ДатаЗаписи;
					ДанныеМенялись = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ДанныеМенялись Тогда
				ОтветственныеЛица.Сортировать("Период, ОтветственноеЛицо");
				КоличествоОтветственныхЛиц = ОтветственныеЛица.Количество();
				ОтветственныеЛица_Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементКонтактнойИнформации(ВидКонтактнойИнформации, СтруктураДанных)
	
	Если СтруктураДанных = Неопределено 
		ИЛИ НЕ ЗначениеЗаполнено(СтруктураДанных.Представление) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор  = Новый Структура("Вид", ВидКонтактнойИнформации);
	Строки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДанныеСтроки.Представление = СтруктураДанных.Представление;
	ДанныеСтроки.Значение = СтруктураДанных.КонтактнаяИнформация;
	ЭтотОбъект[ДанныеСтроки.ИмяРеквизита] = СтруктураДанных.Представление;
	
КонецПроцедуры

&НаСервере
Функция НайтиСотрудника(ФИО, ИННФизлица)
	
	БазовыйТекст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Сотрудники.Ссылка КАК Сотрудник
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ОсновныеСотрудники КАК Основные // Только основные, чтобы не было дублей.
		|		ПО Основные.Сотрудник = Сотрудники.Ссылка
		|ГДЕ
		|	НЕ Сотрудники.ПометкаУдаления
		|	И &Условие
		|
		|// Подстраховка, в первую очередь ищем действующих, но недействующих тоже можно, если нет действующих:
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудники.Действует УБЫВ";
	
	// Если есть ИНН, то в первую очередь по ИНН - самое надежное:
	Если ЗначениеЗаполнено(ИННФизлица) Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = СтрЗаменить(БазовыйТекст, "&Условие", "Основные.ФизическоеЛицо.ИНН = &ИНН");
		Запрос.УстановитьПараметр("ИНН", ИННФизлица);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Сотрудник;
		КонецЕсли;
	КонецЕсли;
	
	// Менее приоритетно - по ФИО, если будут однофамильцы, пользователь должен будет вручную поправить.
	Если ЗначениеЗаполнено(ФИО) Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = СтрЗаменить(БазовыйТекст, "&Условие", "Основные.ФизическоеЛицо.Наименование ПОДОБНО &ФИО");
		Запрос.УстановитьПараметр("ФИО", "%" + ФИО + "%");
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Сотрудник;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Справочники.Сотрудники.ПустаяСсылка();
	
КонецФункции

#КонецОбласти
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.НаименованиеПолное = Результат.Значение;
		Модифицированность = Истина;
		ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
			ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайденныеДублиОрганизации_Сервер()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда // проверим уникальность только по измененным
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка,
			"Наименование, НаименованиеПолное, ИНН, ОГРН");
	Иначе
		Реквизиты = Новый Структура();
		Реквизиты.Вставить("Наименование");
		Реквизиты.Вставить("НаименованиеПолное");
		Реквизиты.Вставить("ИНН");
		Реквизиты.Вставить("ОГРН");
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Код", Неопределено); // не сравниваем, но получаем
	
	Для Каждого Реквизит Из Реквизиты Цикл
		Если ЗначениеЗаполнено(Объект[Реквизит.Ключ])
			И Объект[Реквизит.Ключ] <> Реквизит.Значение Тогда
			СтруктураПоиска.Вставить(Реквизит.Ключ, "=");
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураПоиска.Количество() > 1 Тогда
		Возврат РаботаСДублямиЗначений.НайтиДубли(Объект, СтруктураПоиска);
	КонецЕсли;
	Возврат Новый Массив();
	
КонецФункции

&НаКлиенте
Процедура ПередЗаписьюЕстьДубли_Продолжение(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = Истина Тогда
		// Чтобы второй раз не открывать форму про дубли:
		ПараметрыЗаписи.Вставить("ЗаписьДублирующейОрганизации", Истина);
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтветственныеЛица()
	
	Если Объект.Ссылка.Пустая() Тогда
		ОтветственныеЛица.Очистить();
		ОтветственныеЛица_Модифицированность = Ложь;
		КоличествоОтветственныхЛиц = 0;
		Возврат;
	КонецЕсли;
	
	Таблица = РегистрыСведений.ОтветственныеЛицаОрганизаций.ТаблицаПоОрганизации(Объект.Ссылка);
	ОтветственныеЛица.Очистить();
	Для Каждого ОтветственныйВРегистре Из Таблица Цикл
		ОтветственныйВФорме = ОтветственныеЛица.Добавить();
		ЗаполнитьЗначенияСвойств(ОтветственныйВФорме, ОтветственныйВРегистре);
	КонецЦикла;
	ОтветственныеЛица_Модифицированность = Ложь;
	КоличествоОтветственныхЛиц = ОтветственныеЛица.Количество();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОтветственныеЛица(ОрганизацияСсылка)
	
	Если Не ОтветственныеЛица_Модифицированность Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ОрганизацияСсылка) Тогда
		Возврат; // Перестраховка, ссылка уже должна быть при записи.
	КонецЕсли;
	
	Набор = РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьНаборЗаписей();
	Набор.Отбор.Организация.Установить(ОрганизацияСсылка);
	Для Каждого Ответственный Из ОтветственныеЛица Цикл
		Запись = Набор.Добавить();
		Запись.Организация = ОрганизацияСсылка;
		ЗаполнитьЗначенияСвойств(Запись, Ответственный);
	КонецЦикла;
	Набор.Записать();
	
	ОтветственныеЛица_Модифицированность = Ложь;
	
КонецПроцедуры

#КонецОбласти
