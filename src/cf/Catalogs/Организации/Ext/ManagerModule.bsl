#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет ответственное лицо организации
// 
// Параметры:
//  ОтветственноеЛицо - Строка - Вид ответственного лица, см. в коде
//  Организация - СправочникСсылка.Организации -
//  Период - Дата -
// 
// Возвращаемое значение:
//  СправочникСсылка.Сотрудники, СправочникСсылка.Пользователи -
Функция ОтветственноеЛицо(ОтветственноеЛицо, Организация, Период) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	// "РАЗРЕШЕННЫЕ" - т.к. может быть вызвать из "Алгоритмов" (БезопасныйРежим)
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА НЕ (СотрудникиПользователей.Сотрудник ЕСТЬ NULL)
	|			ТОГДА СотрудникиПользователей.Сотрудник
	|		ИНАЧЕ ОтветственныеЛицаОрганизацийСрезПоследних.Сотрудник
	|	КОНЕЦ КАК Сотрудник
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&Период, Организация = &Организация
	|	И ОтветственноеЛицо = &ОтветственноеЛицо) КАК ОтветственныеЛицаОрганизацийСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
	|		ПО ОтветственныеЛицаОрганизацийСрезПоследних.Сотрудник = СотрудникиПользователей.Пользователь";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", Период);
	
	Если ОтветственноеЛицо = "Руководитель" Тогда
		Запрос.УстановитьПараметр("ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.РуководительОрганизации);
	ИначеЕсли ОтветственноеЛицо = "РуководительАрхива" Тогда
		Запрос.УстановитьПараметр("ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.РуководительАрхива);
	ИначеЕсли ОтветственноеЛицо = "РуководительСлужбыДОУ" Тогда	
		Запрос.УстановитьПараметр("ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.РуководительСлужбыДОУ);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Сотрудник;
	КонецЕсли;
	
	Возврат Справочники.Сотрудники.ПустаяСсылка();
	
КонецФункции

// Возвращает таблицу ответственных лиц по организациям.
// 
// Параметры:
//  ОтветственноеЛицо - ПеречислениеСсылка.ОтветственныеЛицаОрганизаций - Тип ответственного лица
//  Организации - Массив Из СправочникСсылка.Организации - Организации для отбора отв. лиц.
//  			- СписокЗначений Из СправочникСсылка.Организации - Аналогично, через список значений.
//  Период - Дата, Неопределено - Период отв. лица. Если не передан, используется текущая дата.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Ответственные лица по организациям:
//	* Сотрудник - СправочникСсылка.Сотрудники
//	* Организация - СправочникСсылка.Организации
Функция ОтветственныеСотрудникиПоОрганизациям(ОтветственноеЛицо, Организации, Период = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	// "РАЗРЕШЕННЫЕ" - т.к. может быть вызвать из "Алгоритмов" (БезопасныйРежим)
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Организация,
		|	ВЫБОР
		|		КОГДА НЕ (СотрудникиПользователей.Сотрудник ЕСТЬ NULL)
		|			ТОГДА СотрудникиПользователей.Сотрудник
		|		ИНАЧЕ ОтветственныеЛицаОрганизацийСрезПоследних.Сотрудник
		|	КОНЕЦ КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&Период, Организация В (&Организации)
		|	И ОтветственноеЛицо = &ОтветственноеЛицо) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|		ПО ОтветственныеЛицаОрганизацийСрезПоследних.Сотрудник = СотрудникиПользователей.Пользователь";
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ОтветственноеЛицо", ОтветственноеЛицо);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает структуру полей Организации
//
// Возвращаемое значение:
//   Структура
//     Наименование
//     ИНН
//     КодПоОКПО
//     Комментарий
//     КПП
//     ОсновнойБанковскийСчет
//     ПолноеНаименование
//     Префикс
//     ЮрФизЛицо
//
Функция ПолучитьСтруктуруОрганизации() Экспорт
	
	СтруктураОрганизации = Новый Структура;
	СтруктураОрганизации.Вставить("Наименование");
	СтруктураОрганизации.Вставить("ИНН");
	СтруктураОрганизации.Вставить("КодПоОКПО");
	СтруктураОрганизации.Вставить("Комментарий");
	СтруктураОрганизации.Вставить("КПП");
	СтруктураОрганизации.Вставить("ОсновнойБанковскийСчет");
	СтруктураОрганизации.Вставить("ПолноеНаименование");
	СтруктураОрганизации.Вставить("Префикс");
	СтруктураОрганизации.Вставить("ЮрФизЛицо");
	
	Возврат СтруктураОрганизации;
	
КонецФункции

// Создает и записывает в БД организацию
//
// Параметры:
//   СтруктураОрганизации - Структура - структура полей организации.
//
// Возвращаемое значение:
//   СправочникСсылка.Организации
//
Функция СоздатьОрганизацию(СтруктураОрганизации) Экспорт
	
	НоваяОрганизация = СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НоваяОрганизация, СтруктураОрганизации);
	НоваяОрганизация.Записать();
	
	Возврат НоваяОрганизация.Ссылка;
	
КонецФункции

#Область ОбновлениеАдреснойКниги

// Конструктор параметров обновления адресной книги.
//
// Возвращаемое значение:
//	Структура:
//		* ОбновитьДанныеОбъекта - Булево - Признак обновления данных по объекту.
//		* ОбновитьДанныеОтображенияОбъекта - Булево - Признак обновления данных отображения.
//		* ОбновитьСловаПоискаПоОбъекту - Булево - Признак обновления слов поиска по объекту.
//		* ОбновитьДоступностьВПоискеПоОбъекту - Булево - Признак обновления доступности в результатах поиска.
//
Функция ПараметрыОбновленияАдреснойКниги() Экспорт
	
	ПараметрыОбновленияАдреснойКниги = Новый Структура;
	ПараметрыОбновленияАдреснойКниги.Вставить("ОбновитьДанныеОбъекта", Ложь);
	ПараметрыОбновленияАдреснойКниги.Вставить("ОбновитьДанныеОтображенияОбъекта", Ложь);
	ПараметрыОбновленияАдреснойКниги.Вставить("ОбновитьСловаПоискаПоОбъекту", Ложь);
	ПараметрыОбновленияАдреснойКниги.Вставить("ОбновитьДоступностьВПоискеПоОбъекту", Ложь);
	
	Возврат ПараметрыОбновленияАдреснойКниги;
	
КонецФункции

// Устанавливает значения параметров обновления адресной книги по данным объекта.
//
// Параметры:
//	Объект - СправочникОбъект.АвтоподстановкиДляПроцессов - Объект, для которго необходимо определить параметры обновления.
//
// Возвращаемое значение:
//	Структура: см. ПараметрыОбновленияАдреснойКниги.
//
Функция ЗначенияПараметровОбновленияАдреснойКнигиПоОбъекту(Объект) Экспорт
	
	ПараметрыОбновленияАдреснойКниги = ПараметрыОбновленияАдреснойКниги();
		
	Если Не РаботаСАдреснойКнигой.ТребуетсяОбновлениеАдреснойКниги(Объект) Тогда
		Возврат ПараметрыОбновленияАдреснойКниги; 
	КонецЕсли;

	Если Объект.ЭтоНовый() Тогда
		ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОбъекта = Истина;
		ПараметрыОбновленияАдреснойКниги.ОбновитьСловаПоискаПоОбъекту = Истина;
	Иначе
		ПредыдущиеЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.Ссылка, "Наименование, ПометкаУдаления");
			
		Если ПредыдущиеЗначенияРеквизитов.ПометкаУдаления <> Объект.ПометкаУдаления Тогда
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОбъекта = Истина;
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОтображенияОбъекта = Истина;
			ПараметрыОбновленияАдреснойКниги.ОбновитьДоступностьВПоискеПоОбъекту = Истина;
		КонецЕсли;
		
		Если ПредыдущиеЗначенияРеквизитов.Наименование <> Объект.Наименование Тогда
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОбъекта = Истина;
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОтображенияОбъекта = Истина;
			ПараметрыОбновленияАдреснойКниги.ОбновитьСловаПоискаПоОбъекту = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыОбновленияАдреснойКниги;

КонецФункции

// Обновляет адресную книгу, согласно установленным параметрам.
//
// Параметры:
//	Объект - СправочникОбъект.АвтоподстановкиДляПроцессов - Объект, по данным которого необходимо обновить адресной книги.
//	ПараметрыОбновления - Структура Из КлючИЗначение - см. ПараметрыОбновленияАдреснойКниги.
//
Процедура ОбновитьАдреснуюКнигу(Объект, ПараметрыОбновления) Экспорт
	
	Если ПараметрыОбновления.ОбновитьДанныеОбъекта Тогда
		Справочники.АдреснаяКнига.ОбновитьДанныеОбъекта(
			Объект.Ссылка, Объект.Родитель, Справочники.АдреснаяКнига.Организации, Объект.Ссылка);
	КонецЕсли;

	Если ПараметрыОбновления.ОбновитьДанныеОтображенияОбъекта Тогда
		Справочники.АдреснаяКнига.ОбновитьДанныеОтображенияПодчиненногоОбъекта(Объект.Ссылка);
	КонецЕсли;
	
	Если ПараметрыОбновления.ОбновитьСловаПоискаПоОбъекту Тогда
		РегистрыСведений.ОбъектыПоискаВАдреснойКниге.ОбновитьСловаПоискаПоОрганизации(Объект);
	КонецЕсли;
	
	Если ПараметрыОбновления.ОбновитьДоступностьВПоискеПоОбъекту Тогда
		РегистрыСведений.ОбъектыПоискаВАдреснойКниге.ОбновитьДоступностьВПоиске(Объект);
	КонецЕсли;	
		
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Групповое изменение объектов.

// Возвращает список реквизитов, которые не нужно редактировать
// с помощью обработки группового изменения объектов
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("Префикс");
	Результат.Добавить("КонтактнаяИнформация.*");
	
	Возврат Результат
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Использование нескольких организаций.

// Возвращает организацию по умолчанию.
// Если в ИБ есть только одна организация, которая не помечена на удаление и не является предопределенной,
// то будет возвращена ссылка на нее, иначе будет возвращена пустая ссылка.
//
// Возвращаемое значение:
//     СправочникСсылка.Организации - ссылка на организацию.
//
Функция ОрганизацияПоУмолчанию() Экспорт
	
	Организация = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "Организация");
	Если ЗначениеЗаполнено(Организация) Тогда 
		Возврат Организация;
	КонецЕсли;
	
	Организация = ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И НЕ Организации.Предопределенный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.Количество() = 1 Тогда
		Организация = Выборка.Организация;
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции

// Возвращает признак использования нескольких организаций.
// 
// Возвращаемое значение:
//  Булево -
Функция ИспользуетсяНесколькоОрганизаций() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	
КонецФункции

// Возвращает количество элементов справочника Организации.
// Не учитывает предопределенные и помеченные на удаление элементы.
//
// Возвращаемое значение:
//     Число - количество организаций.
//
Функция КоличествоОрганизаций() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Количество = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.Предопределенный
	|	И НЕ Организации.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка.Количество;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Количество;
	
КонецФункции

// Вернет ДвоичныеДанные картинки печати организации
// 
// Параметры:
// 	Документ - СправочникСсылка.ДокументыПредприятия -
// 	
// Возвращаемое значение:
// Массив из ДвоичныеДанные - массив картинок
Функция КартинкиПечатейОрганизации(Документ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	МассивКартинок = Новый Массив();
	МассивОрганизаций = Новый Массив();
	
	ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ВидДокумента");
	РеквВида = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидДокумента, 
		"ВестиУчетПоОрганизациям, ВестиУчетСторон");
		
	Если РеквВида.ВестиУчетПоОрганизациям = Ложь И РеквВида.ВестиУчетСторон = Ложь Тогда
		Возврат МассивКартинок;
	КонецЕсли;

	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Организация");
	Если ЗначениеЗаполнено(Организация) Тогда
		МассивОрганизаций.Добавить(Организация);
	КонецЕсли;
		
	Если РеквВида.ВестиУчетСторон Тогда
		 
		Стороны = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Стороны");
		Стороны = Стороны.Выгрузить();
		Для Каждого Стр Из Стороны Цикл
			
			Если ТипЗнч(Стр.Сторона) = Тип("СправочникСсылка.Организации")
				И МассивОрганизаций.Найти(Стр.Сторона) = Неопределено Тогда
				МассивОрганизаций.Добавить(Стр.Сторона);
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;
	
	РеквизитыОрганизаций = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивОрганизаций, "Логотип");
	
	Для Каждого Организация Из МассивОрганизаций  Цикл
		
		ФайлФотографии = РеквизитыОрганизаций[Организация];
		
		ДвоичныеДанные = ФайлФотографии.Получить();
		Если ЗначениеЗаполнено(ДвоичныеДанные) Тогда
			МассивКартинок.Добавить(ДвоичныеДанные);
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат МассивКартинок;
	
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

КонецПроцедуры

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	// Метод должен существовать для системы версионирования БСП.
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры

// см Юрлица.ПредставлениеЮрлицаНаДату(...)
Функция ПредставлениеОрганизацииНаДату(Организация, ДатаСведений) Экспорт
	
	Возврат Юрлица.ПредставлениеЮрлицаНаДату(Организация, ДатаСведений);
	
КонецФункции

// см. Юрлица.СведенияОЮрлицеНаДату(...)
Функция СведенияОбОрганизацииНаДату(Организация, ДатаСведений) Экспорт
	
	Возврат Юрлица.СведенияОЮрлицеНаДату(Организация, ДатаСведений);
	
КонецФункции

// Возвращает порцию объектов с запрещенными участниками доступа, либо количество таких участников.
//
// Параметры:
//  ТолькоКоличество - Булево - если Истина, то возвращается количество объектов.
//  ГруппаОтбор - СправочникСсылка.ГруппыДоступаКонтрагентов, Неопределено - группа для отбора.
//
// Возвращаемое значение:
//  Массив, Число - порция объектов с запрещенными участниками доступа, либо количество таких участников.
//
Функция ОбъектыСЗапрещеннымиУчастникамиДоступа(
			МетаданныеОбъектов, ТолькоКоличество = Ложь, ОрганизацияОтбор = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	РабочиеГруппы.Участник КАК Участник,
		|	СотрудникиВКонтейнерах.Сотрудник КАК Сотрудник,
		|	ОбъектыДоступа.Ссылка КАК Ссылка,
		|	ОбъектыДоступа.Организация КАК Организация
		|ПОМЕСТИТЬ СотрудникиРГ
		|ИЗ
		|	Справочник.ДокументыПредприятия КАК ОбъектыДоступа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РабочиеГруппы КАК РабочиеГруппы
		|		ПО (ОбъектыДоступа.Ссылка = РабочиеГруппы.Объект)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
		|		ПО (РабочиеГруппы.Участник = СотрудникиВКонтейнерах.Контейнер)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО (СотрудникиВКонтейнерах.Сотрудник = Сотрудники.Ссылка)
		|		И (НЕ Сотрудники.ПометкаУдаления)
		|ГДЕ
		|	ОбъектыДоступа.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Ссылка,
		|	ДескрипторыДляОбъектов.Дескриптор КАК Дескриптор
		|ПОМЕСТИТЬ ОрганизацииИДескрипторы
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СотрудникиРГ КАК СотрудникиРГ
		|		ПО (СотрудникиРГ.Организация = Организации.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
		|		ПО Организации.Ссылка = ДескрипторыДляОбъектов.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	ОрганизацииИДескрипторы.Ссылка КАК Организация,
		|	ПраваПоДескрипторамДоступаОбъектов.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ИмеющиеПрава
		|ИЗ
		|	ОрганизацииИДескрипторы КАК ОрганизацииИДескрипторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваПоДескрипторамДоступаОбъектов КАК ПраваПоДескрипторамДоступаОбъектов
		|		ПО ОрганизацииИДескрипторы.Дескриптор = ПраваПоДескрипторамДоступаОбъектов.Дескриптор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000 РАЗРЕШЕННЫЕ
		|	СотрудникиРГ.Ссылка КАК Объект
		|ИЗ
		|	СотрудникиРГ КАК СотрудникиРГ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИмеющиеПрава КАК ИмеющиеПрава
		|		ПО СотрудникиРГ.Сотрудник = ИмеющиеПрава.Сотрудник
		|		И СотрудникиРГ.Организация = ИмеющиеПрава.Организация
		|ГДЕ
		|	ИмеющиеПрава.Сотрудник ЕСТЬ NULL
		|	И СотрудникиРГ.Организация = &Организация");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДокументыПредприятия", МетаданныеОбъектов.Имя);
		
	Если ТолькоКоличество Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РАЗЛИЧНЫЕ ПЕРВЫЕ 1000", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"СотрудникиРГ.Ссылка КАК Объект",
			"КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СотрудникиРГ.Ссылка) КАК КолОбъектов");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОрганизацияОтбор) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"ОбъектыДоступа.Организация = &Организация",
			"ОбъектыДоступа.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", ОрганизацияОтбор);
	
	Если ТолькоКоличество Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Возврат Выборка.КолОбъектов;
	Иначе
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	КонецЕсли;
	
КонецФункции

// Возвращает отслеживаемые реквизиты для дополнительного свойства ПредыдущиеЗначенияРеквизитов.
//
// Возвращаемое значение:
//  Строка - Отслеживаемые реквизиты.
//
Функция ОтслеживаемыеРеквизиты() Экспорт
	
	ОтслеживаемыеРеквизиты = "Наименование";
	
	Возврат ОтслеживаемыеРеквизиты;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Вызывается при переходе на версию БСП 2.2.1.12.
//
Процедура ЗаполнитьКонстантуИспользоватьНесколькоОрганизаций() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") =
			ПолучитьФункциональнуюОпцию("ИспользоватьОднуОрганизацию") Тогда
		// Опции должны иметь противоположные значения.
		// Если это не так, то значит в ИБ раньше не было этих опций - инициализируем их значения.
		Константы.ИспользоватьНесколькоОрганизаций.Установить(КоличествоОрганизаций() > 1);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 2.1.3.16.
//
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформацииОрганизаций() Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Возврат;
	КонецЕсли;
	
	МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ЮрАдресОрганизации";
	ПараметрыВида.Подсказка = РедакцииКонфигурацииКлиентСервер.ЮрАдресОрганизации();
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 1;
	ПараметрыВида.НастройкиПроверки.АдресТолькоРоссийский = Истина;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ФактАдресОрганизации";
	ПараметрыВида.Подсказка = РедакцииКонфигурацииКлиентСервер.ФактАдресОрганизации();
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 2;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Телефон");
	ПараметрыВида.Вид = "ТелефонОрганизации";
	ПараметрыВида.Подсказка = РедакцииКонфигурацииКлиентСервер.ТелефонОрганизации();
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 3;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Факс");
	ПараметрыВида.Вид = "ФаксОрганизации";
	ПараметрыВида.Подсказка = РедакцииКонфигурацииКлиентСервер.ФаксОрганизации();
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 4;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("АдресЭлектроннойПочты");
	ПараметрыВида.Вид = "EmailОрганизации";
	ПараметрыВида.Подсказка = РедакцииКонфигурацииКлиентСервер.EmailОрганизации();
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РазрешитьВводНесколькихЗначений = Истина;
	ПараметрыВида.Порядок = 5;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Адрес");
	ПараметрыВида.Вид = "ПочтовыйАдресОрганизации";
	ПараметрыВида.Подсказка = РедакцииКонфигурацииКлиентСервер.ПочтовыйАдресОрганизации();
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 6;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = МодульУправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации("Другое");
	ПараметрыВида.Вид = "ДругаяИнформацияОрганизации";
	ПараметрыВида.Подсказка = НСтр("ru='Любая другая контактная информация'");
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.Порядок = 7;
	МодульУправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
КонецПроцедуры

// Заполняет переданный дескриптор доступа 
Процедура ЗаполнитьОсновнойДескриптор(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	ДескрипторДоступа.Организация = ОбъектДоступа.Ссылка;
	
КонецПроцедуры

// Возвращает строку, содержащую перечисление полей доступа через запятую
// Это перечисление используется в дальнейшем для передачи в метод 
// ОбщегоНазначения.ПолучитьЗначенияРеквизитов()
Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат "Ссылка, Доступ";
	
КонецФункции

// Возвращает признак того, что менеджер содержит метод ЗапросДляРасчетаПрав()
// 
Функция ЕстьМетодЗапросДляРасчетаПрав() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает запрос для расчета прав доступа по дескрипторам объекта
// 
// Параметры:
//  
//  Дескрипторы - Массив - массив дескрипторов, чьи права нужно рассчитать
//  ИдОбъекта - Ссылка - идентификатор объекта метаданных, назначенный переданным дескрипторам
//  МенеджерОбъектаДоступа - СправочникМенеджер, ДокументМенеджер - менеджер объекта доступа
// 
// Возвращаемое значение - Запрос - запрос, который выберет права доступа для переданного массива дескрипторов
// 
Функция ЗапросДляРасчетаПрав(Дескрипторы, ИдОбъекта, МенеджерОбъектаДоступа) Экспорт
	
	Запрос = Справочники.ДескрипторыДоступаОбъектов.ЗапросДляСтандартногоРасчетаПрав(
		Дескрипторы, ИдОбъекта, МенеджерОбъектаДоступа, Ложь, Истина);
	Запрос.Текст = ДокументооборотПраваДоступаПовтИсп.ТекстЗапросаДляРасчетаПравРазрезаДоступа();
	
	Возврат Запрос;
	
КонецФункции

// Заполняет протокол расчета прав дескрипторов
// 
// Параметры:
//  
//  ПротоколРасчетаПрав - Массив - протокол для заполнения
//  ЗапросПоПравам - Запрос - запрос, который использовался для расчета прав дескрипторов
//  Дескрипторы - Массив - массив дескрипторов, чьи права были рассчитаны
//  
Процедура ЗаполнитьПротоколРасчетаПрав(ПротоколРасчетаПрав, ЗапросПоПравам) Экспорт
	
	Справочники.ДескрипторыДоступаОбъектов.ЗаполнитьПротоколРасчетаПравСтандартно(
		ПротоколРасчетаПрав, ЗапросПоПравам);
	
КонецПроцедуры

// Проверяет наличие метода.
// 
Функция ЕстьМетодЗаполнитьДескрипторыОбъекта() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Заполняет переданную таблицу дескрипторов объекта.
// 
Процедура ЗаполнитьДескрипторыОбъекта(ОбъектДоступа, ТаблицаДескрипторов, ПротоколРасчетаПрав = Неопределено) Экспорт
	
	// Если по каким-то предметам даны права по разрезу ГДК, на нее должны быть права.
	ДокументооборотПраваДоступа.ЗаполнитьДескрипторОбъектаОсновной(ОбъектДоступа, ТаблицаДескрипторов);
	
	ТаблицаДоступа = ОбъектДоступа.Доступ.Выгрузить();
	Для Каждого СтрДоступа Из ТаблицаДоступа Цикл
		ДокументооборотПраваДоступа.ДобавитьИндивидуальныйДескриптор(
			ОбъектДоступа, ТаблицаДескрипторов, СтрДоступа.Участник, Истина);
	КонецЦикла;
	
	Если ПротоколРасчетаПрав <> Неопределено Тогда
		ЗаписьПротокола = Новый Структура("Элемент, Описание",
			ОбъектДоступа.Ссылка, НСтр("ru = 'Сотрудники на закладке ""Доступ""'"));
		ПротоколРасчетаПрав.Добавить(ЗаписьПротокола);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Параметры.Свойство("СтрокаПоиска") 
		И НЕ ПустаяСтрока(Параметры.СтрокаПоиска) Тогда
	
		СтандартнаяОбработка = Ложь;
		
		Текст = Параметры.СтрокаПоиска;
		СловаПоиска = ОбщегоНазначенияДокументооборот.СловаПоиска(Текст);
		ДанныеВыбора = Новый СписокЗначений();
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 50
			|	Организации.Ссылка,
			|	""Наименование"" КАК ПолеСовпадения,
			|	Организации.Наименование КАК ЗначениеПоля,
			|	Организации.Представление КАК Организация
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ПометкаУдаления = ЛОЖЬ
			|	И Организации.Наименование ПОДОБНО &Текст
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 50
			|	Организации.Ссылка,
			|	""ИНН"",
			|	Организации.ИНН,
			|	Организации.Представление
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ПометкаУдаления = ЛОЖЬ
			|	И Организации.ИНН ПОДОБНО &Текст
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 50
			|	Организации.Ссылка,
			|	""ОГРН"",
			|	Организации.ОГРН,
			|	Организации.Представление
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ПометкаУдаления = ЛОЖЬ
			|	И Организации.ОГРН ПОДОБНО &Текст");
		
		Запрос.УстановитьПараметр("Текст", "%" + Текст + "%");
		
		ОбъектМетаданных = Метаданные.Справочники.Организации;
		Если Не МультиязычностьПовтИсп.КонфигурацияИспользуетТолькоОдинЯзык(
			ОбъектМетаданных.ТабличныеЧасти.Найти("Представления") = Неопределено) Тогда
			
			Если МультиязычностьСервер.ИспользуетсяПервыйДополнительныйЯзык() Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст,
					"Организации.Наименование ПОДОБНО &Текст",
					"(Организации.Наименование ПОДОБНО &Текст ИЛИ Организации.НаименованиеЯзык1 ПОДОБНО &Текст)");
			КонецЕсли;
			
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ПолеСовпадения = "Наименование" Тогда 
				ПредставлениеФорматированнаяСтрока = ОбщегоНазначенияДокументооборот.ФорматированныйРезультатПоиска(
					Выборка.Организация,
					СловаПоиска);
				
				ДобавкаТекста = СтрШаблон(НСтр("ru = ' (%1)'"), "Организация");
				ПредставлениеФорматированнаяСтрока = Новый ФорматированнаяСтрока(
					ПредставлениеФорматированнаяСтрока,
					Новый ФорматированнаяСтрока(ДобавкаТекста,
						, WebЦвета.Серый));
				
			ИначеЕсли Выборка.ПолеСовпадения = "ИНН" ИЛИ Выборка.ПолеСовпадения = "ОГРН" Тогда 
				ПредставлениеФорматированнаяСтрока = ОбщегоНазначенияДокументооборот.ФорматированныйРезультатПоиска(
					Выборка.ЗначениеПоля,
					СловаПоиска);
				
				ДобавкаТекста = СтрШаблон(НСтр("ru = ' (%1)'"), Выборка.Организация);
				ПредставлениеФорматированнаяСтрока = Новый ФорматированнаяСтрока(
					ПредставлениеФорматированнаяСтрока,
					Новый ФорматированнаяСтрока(ДобавкаТекста,
						, WebЦвета.Серый));
					
			КонецЕсли;
			
			ДанныеВыбора.Добавить(Выборка.Ссылка, ПредставлениеФорматированнаяСтрока);
			
		КонецЦикла;
	
	Иначе
		Параметры.Отбор.Вставить("ПометкаУдаления", Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
    МультиязычностьКлиентСервер.ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка);
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
    МультиязычностьКлиентСервер.ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти


#КонецЕсли

