#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ДействуетС.Доступность = Не Объект.НеДействует;
	Элементы.ДействуетПо.Доступность = Не Объект.НеДействует;
	
	ОпределитьТипыЭлемента();
	ЗаполнитьДействияНаСервере();
	
	Если ЗначениеЗаполнено(Объект.ДатаСоздания) Тогда
		Элементы.ДекорацияДатаСодания.Заголовок = СтрШаблон(НСтр("ru = 'Создано: %1, %2'"), 
			Формат(Объект.ДатаСоздания, "ДЛФ=D"), Строка(Объект.Создал));
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если Объект.ПометкаУдаления Тогда 
		КлючНазначенияИспользования = "ПравилоУдалено";
	КонецЕсли;
	ПометкаУдаленияОписание = НСтр("ru = 'Правило помечено на удаление'");
	ОбщегоНазначенияДокументооборот.ПоказатьНадписьПометкиУдаления(
		ЭтотОбъект, ТекущийОбъект.ПометкаУдаления);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РазвернутьДеревоДействий();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_НастройкиДействий" Тогда
		ЗаполнитьДействияСохранивПозицию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовый", Не ЗначениеЗаполнено(Объект.Ссылка));
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.ЭтоНовый Тогда 
		ЗаполнитьДействияНаСервере();
		УстановитьЗаголовокФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.ЭтоНовый Тогда 
		РазвернутьДеревоДействий();
	КонецЕсли;
	
	Оповестить("Запись_ПравилаОбработки",
		Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НеДействуетПриИзменении(Элемент)
	
	Элементы.ДействуетС.Доступность = Не Объект.НеДействует;
	Элементы.ДействуетПо.Доступность = Не Объект.НеДействует;
	
	Если Объект.НеДействует И Не ЗначениеЗаполнено(Объект.ДействуетПо) Тогда 
		Объект.ДействуетПо = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТекущаяСтрока", Объект.Родитель);
	ПараметрыОткрытия.Вставить("ВидОбъекта", ОсновнойВидОбъекта);
	
	ОткрытьФорму("Справочник.ПравилаОбработки.ФормаВыбора", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РодительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Объект.Родитель = ВыбранноеЗначение;
	ОпределитьТипыЭлемента();
	
КонецПроцедуры

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	
	ОпределитьТипыЭлемента();

КонецПроцедуры

&НаКлиенте
Процедура РодительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Истина;
	ДанныеВыбора = Делопроизводство.ДанныеВыбораВидаДокумента(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура РодительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Истина;
	ДанныеВыбора = Делопроизводство.ДанныеВыбораВидаДокумента(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементГруппировкиПриИзменении(Элемент)
	
	Если ТипЗнч(Объект.ЭлементГруппировки) = Тип("СправочникСсылка.ВидыДокументов")
		Или ТипЗнч(Объект.ЭлементГруппировки) = Тип("СправочникСсылка.ВидыМероприятий") Тогда
		ОсновнойВидОбъекта = Объект.ЭлементГруппировки;
	КонецЕсли;
	
	ЗаполнитьДействияСохранивПозицию();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементГруппировкиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если СтрДлина(Текст) < 2 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = ДанныеВыбораЭлементГруппировки(Текст, СписокВыбораТипа, ОсновнойВидОбъекта);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементГруппировкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ЭлементГруппировкиНачалоВыбораЗавершениеВыбораТипа", ЭтотОбъект);
	Если СписокВыбораТипа.Количество() = 1 Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, СписокВыбораТипа[0]);
	Иначе
		ПоказатьВыборИзМеню(ОписаниеОповещения, СписокВыбораТипа, Элементы.ЭлементГруппировки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементГруппировкиОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, ВыборДобавлением, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЭлементГруппировкиЗавершение", ЭтотОбъект);
		ПолноеИмя = СтандартныеПодсистемыВызовСервера.ПолноеИмяОбъектаМетаданных(ТипЗнч(ВыбранноеЗначение));
		
		ПараметрыОткрытия = Новый Структура("Подразделение, ВключатьПодчиненные",
			ВыбранноеЗначение,
			?(ВыбранноеЗначение = Объект.ЭлементГруппировки,
				Объект.ВключатьПодчиненныеПодразделения,
				Ложь));
		ОткрытьФорму(ПолноеИмя + ".Форма.ФормаВыбораДляПОД",
			ПараметрыОткрытия,,,,, ОписаниеОповещения, РежимОткрытияОкна);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементГруппировкиНачалоВыбораЗавершениеВыбораТипа(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ВыбранныйТип = ТипЗнч(Результат.Значение);
		ПолноеИмя = СтандартныеПодсистемыВызовСервера.ПолноеИмяОбъектаМетаданных(ВыбранныйТип);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЭлементГруппировкиЗавершение", ЭтотОбъект);
		
		Если ВыбранныйТип = Тип("СправочникСсылка.ТематикиДокументов") Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ВидДокумента", ОсновнойВидОбъекта);
			ОткрытьФорму(ПолноеИмя + ".ФормаВыбора",
				ПараметрыФормы, , , , , ОписаниеОповещения, РежимОткрытияОкна);
			
		ИначеЕсли ВыбранныйТип = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			
			Если ЗначениеЗаполнено(Объект.ЭлементГруппировки) Тогда
				
				ПараметрыОткрытия = Новый Структура("Подразделение, ВключатьПодчиненные",
					Объект.ЭлементГруппировки, Объект.ВключатьПодчиненныеПодразделения);
				ОткрытьФорму(ПолноеИмя + ".Форма.ФормаВыбораДляПОД",
					ПараметрыОткрытия,,,,, ОписаниеОповещения, РежимОткрытияОкна);
					
			Иначе
				
				ДополнительныеПараметры = Новый Структура("Оповещение", ОписаниеОповещения);
				ОповещениеПослеВыбораПодразделения = Новый ОписаниеОповещения("ВыборПодразделенияЗавершение",
					ЭтотОбъект, ДополнительныеПараметры);
				ОткрытьФорму(ПолноеИмя + ".ФормаВыбора",,,,,, ОповещениеПослеВыбораПодразделения);
				
			КонецЕсли;
			
		ИначеЕсли ВыбранныйТип = Тип("ПеречислениеСсылка.ВариантыФормДокументов") Тогда
			
			СписокВыбора = СписокВыбораФормДокументов(ОсновнойВидОбъекта);
			ПоказатьВыборИзСписка(ОписаниеОповещения, СписокВыбора, Элементы.ЭлементГруппировки);
			
		ИначеЕсли ВыбранныйТип = Тип("ПеречислениеСсылка.ВариантыВажностиОбъектов") Тогда
			
			СписокВыбора = Новый СписокЗначений;
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыВажностиОбъектов.Высокая"),,,
				БиблиотекаКартинок.ВажностьВысокая);
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыВажностиОбъектов.Обычная"),,,
				БиблиотекаКартинок.ВажностьНеЗадана);
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыВажностиОбъектов.Низкая"),,,
				БиблиотекаКартинок.ВажностьНизкая);
			
			ПоказатьВыборИзСписка(ОписаниеОповещения, СписокВыбора, Элементы.ЭлементГруппировки);
			
		Иначе
			
			ОткрытьФорму(ПолноеИмя + ".ФормаВыбора", , , , , , ОписаниеОповещения, РежимОткрытияОкна);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПодразделенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("Подразделение", Результат);
	ОткрытьФорму("Справочник.СтруктураПредприятия.Форма.ФормаВыбораДляПОД",
		ПараметрыОткрытия,,,,, ДополнительныеПараметры.Оповещение, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлементГруппировкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("ЭлементСпискаЗначений") Тогда
		Результат = Результат.Значение;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("Подразделение")
		И Результат.Свойство("ВключатьПодчиненные") Тогда
		
		Объект.ЭлементГруппировки = Результат.Подразделение;
		Объект.ВключатьПодчиненныеПодразделения = Результат.ВключатьПодчиненные;
		
		Модифицированность = Истина;
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.ЭлементГруппировки = Результат;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействуетСПриИзменении(Элемент)
	
	ЗаполнитьДействияСохранивПозицию();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействуетПоПриИзменении(Элемент)
	
	ЗаполнитьДействияСохранивПозицию();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыДействия

&НаКлиенте
Процедура ДействияПриАктивизацииСтроки(Элемент)
	
	НастройкиДействийКлиент.ДействияПриАктивизацииСтроки(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	НастройкиДействийКлиент.ДействияПередНачаломДобавления(
		ЭтаФорма, Элемент, Отказ, Копирование, Родитель, Группа, Параметр);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПередУдалением(Элемент, Отказ)
	
	НастройкиДействийКлиент.ДействияПередУдалением(ЭтаФорма, КлючНастроек(ЭтаФорма), Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПередНачаломИзменения(Элемент, Отказ)
	
	НастройкиДействийКлиент.ДействияПередНачаломИзменения(
		ЭтаФорма, КлючНастроек(ЭтаФорма), Элемент, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьНастройку(Команда)
	
	НастройкиДействийКлиент.ОткрытьНастройкуДействия(ЭтаФорма,
		КлючНастроек(ЭтаФорма));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаполнитьДействияСохранивПозицию() Экспорт 
	
	ТекущаяСтрока = Новый Структура;
	ТекущаяСтрока.Вставить("ВидДействия", Неопределено);
	ТекущаяСтрока.Вставить("Этап", Неопределено);
	ТекущаяСтрока.Вставить("Участник", Неопределено);
	
	Если Элементы.Действия.ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Элементы.Действия.ТекущиеДанные);
	КонецЕсли;
	
	ЗаполнитьДействияНаСервере();
	
	Элементы1 = Действия.ПолучитьЭлементы();
	Для Каждого Элемент1 Из Элементы1 Цикл
		Элементы.Действия.Развернуть(Элемент1.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
	Элементы.СтраницыДействия.ТекущаяСтраница = ?(Элементы1.Количество() <> 0,
		Элементы.СтраницаДействияЕсть,
		Элементы.СтраницаДействийНет);
	
	Для Каждого Элемент1 Из Элементы1 Цикл
		Если Элемент1.ВидДействия = ТекущаяСтрока.ВидДействия Тогда
			Элементы.Действия.ТекущаяСтрока = Элемент1.ПолучитьИдентификатор();
			Элементы2 = Элемент1.ПолучитьЭлементы();
			
			Для Каждого Элемент2 Из Элементы2 Цикл
				Если Элемент2.Этап = ТекущаяСтрока.Этап
					И Элемент2.Участник = ТекущаяСтрока.Участник Тогда
					Элементы.Действия.ТекущаяСтрока = Элемент2.ПолучитьИдентификатор();
					Элементы3 = Элемент2.ПолучитьЭлементы();
					Для Каждого Элемент3 Из Элементы3 Цикл
						Если Элемент3.Участник = ТекущаяСтрока.Участник Тогда
							Элементы.Действия.ТекущаяСтрока = Элемент3.ПолучитьИдентификатор();
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДействияНаСервере()
	
	НастройкиДействий.ЗаполнитьДействияДляПравилаОбработки(Действия, КлючНастроек(ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоДействий()
	
	Элементы1 = Действия.ПолучитьЭлементы();
	Для Каждого Элемент1 Из Элементы1 Цикл
		Элементы.Действия.Развернуть(Элемент1.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
	Элементы.СтраницыДействия.ТекущаяСтраница = ?(Элементы1.Количество() <> 0,
		Элементы.СтраницаДействияЕсть,
		Элементы.СтраницаДействийНет);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючНастроек(Форма)
	
	Объект = Форма.Объект;
	Ключ = Новый Структура;
	Если Объект.Ссылка.Пустая() Тогда
		Возврат Ключ;
	КонецЕсли;
	
	Ключ.Вставить("ПравилоОбработки", Объект.Ссылка);
	Ключ.Вставить("Родитель", Объект.Родитель);
	Ключ.Вставить("ЭлементГруппировки", Объект.ЭлементГруппировки);
	Ключ.Вставить("НеДействует", Объект.НеДействует);
	Ключ.Вставить("ДействуетС", Объект.ДействуетС);
	Ключ.Вставить("ДействуетПо", Объект.ДействуетПо);
	
	Возврат Ключ;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеВыбораЭлементГруппировки(Текст, СписокВыбораТипа, ВидОбъекта)
	
	ДанныеВыбора = Новый СписокЗначений();
	Если СписокВыбораТипа.Количество() = 0 Тогда
		Возврат ДанныеВыбора;
	КонецЕсли;
	
	Если СписокВыбораТипа.НайтиПоЗначению(Перечисления.ВариантыВажностиОбъектов.ПустаяСсылка()) <> Неопределено Тогда
		ДобавитьПеречислениеВСписокАвтоПодбора(Перечисления.ВариантыВажностиОбъектов.Высокая, Текст, ДанныеВыбора);
		ДобавитьПеречислениеВСписокАвтоПодбора(Перечисления.ВариантыВажностиОбъектов.Обычная, Текст, ДанныеВыбора);
		ДобавитьПеречислениеВСписокАвтоПодбора(Перечисления.ВариантыВажностиОбъектов.Низкая, Текст, ДанныеВыбора);
	КонецЕсли;
	
	Если СписокВыбораТипа.НайтиПоЗначению(Перечисления.ВариантыФормДокументов.ПустаяСсылка()) <> Неопределено Тогда
		
		СписокВыбораФормДокументов = СписокВыбораФормДокументов(ВидОбъекта);
		
		Для Каждого ФормаДокумента Из СписокВыбораФормДокументов Цикл
			ДобавитьПеречислениеВСписокАвтоПодбора(ФормаДокумента.Значение, Текст, ДанныеВыбора);
		КонецЦикла;
		
	КонецЕсли;
	
	ВидыДокументовТекст = "
		|ВЫБРАТЬ 
		|	СправочникВыбора.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыДокументов КАК СправочникВыбора
		|ГДЕ
		|	НЕ СправочникВыбора.ПометкаУдаления
		|	И СправочникВыбора.Наименование ПОДОБНО &Текст";
	
	ВидыМероприятийТекст = "
		|ВЫБРАТЬ 
		|	СправочникВыбора.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыМероприятий КАК СправочникВыбора
		|ГДЕ
		|	НЕ СправочникВыбора.ПометкаУдаления
		|	И СправочникВыбора.Наименование ПОДОБНО &Текст";
	
	ГрифыДоступаТекст = "
		|ВЫБРАТЬ 
		|	СправочникВыбора.Ссылка
		|ИЗ
		|	Справочник.ГрифыДоступа КАК СправочникВыбора
		|ГДЕ
		|	НЕ СправочникВыбора.ПометкаУдаления
		|	И СправочникВыбора.Наименование ПОДОБНО &Текст";
	
	ТематикиТекст = "
		|ВЫБРАТЬ
		|	СправочникВыбора.Ссылка
		|ИЗ
		|	Справочник.ТематикиДокументов КАК СправочникВыбора
		|ГДЕ
		|	СправочникВыбора.ВидДокумента = &ВидДокумента
		|	И СправочникВыбора.Наименование ПОДОБНО &Текст
		|	И НЕ СправочникВыбора.ПометкаУдаления
		|	И НЕ СправочникВыбора.НеДействует";
	
	ПодразделенияТекст = "
		|ВЫБРАТЬ
		|	СправочникВыбора.Ссылка
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СправочникВыбора
		|ГДЕ
		|	НЕ СправочникВыбора.ПометкаУдаления
		|	И СправочникВыбора.Наименование ПОДОБНО &Текст";
	
	ОрганизацииТекст = "
		|ВЫБРАТЬ
		|	СправочникВыбора.Ссылка
		|ИЗ
		|	Справочник.Организации КАК СправочникВыбора
		|ГДЕ
		|	НЕ СправочникВыбора.ПометкаУдаления
		|	И СправочникВыбора.Наименование ПОДОБНО &Текст";
	
	СписокВыбораСодержитСправочник = Ложь;
	
	Запрос = Новый Запрос;
	Если СписокВыбораТипа.НайтиПоЗначению(Справочники.ВидыДокументов.ПустаяСсылка()) <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + ВидыДокументовТекст + "
		|ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;
		СписокВыбораСодержитСправочник = Истина;
	КонецЕсли;
	
	Если СписокВыбораТипа.НайтиПоЗначению(Справочники.ВидыМероприятий.ПустаяСсылка()) <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + ВидыМероприятийТекст + "
		|ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;
		СписокВыбораСодержитСправочник = Истина;
	КонецЕсли;
	
	Если СписокВыбораТипа.НайтиПоЗначению(Справочники.ГрифыДоступа.ПустаяСсылка()) <> Неопределено
		И ТипЗнч(ВидОбъекта) = Тип("СправочникСсылка.ВидыДокументов") Тогда
		Запрос.Текст = Запрос.Текст + ГрифыДоступаТекст + "
		|ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;
		СписокВыбораСодержитСправочник = Истина;
	КонецЕсли;
	
	Если СписокВыбораТипа.НайтиПоЗначению(Справочники.ТематикиДокументов.ПустаяСсылка()) <> Неопределено
		И ТипЗнч(ВидОбъекта) = Тип("СправочникСсылка.ВидыДокументов") Тогда
		Запрос.Текст = Запрос.Текст + ТематикиТекст + "
		|ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;
		Запрос.Параметры.Вставить("ВидДокумента", ВидОбъекта);
		СписокВыбораСодержитСправочник = Истина;
	КонецЕсли;
	
	Если СписокВыбораТипа.НайтиПоЗначению(Справочники.СтруктураПредприятия.ПустаяСсылка()) <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + ПодразделенияТекст + "
		|ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;
		СписокВыбораСодержитСправочник = Истина;
	КонецЕсли;
	
	Если СписокВыбораТипа.НайтиПоЗначению(Справочники.Организации.ПустаяСсылка()) <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + ОрганизацииТекст + "
		|ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;
		СписокВыбораСодержитСправочник = Истина;
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ" + Прав(Запрос.Текст, СтрДлина(Запрос.Текст) - 9);
	Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст) - 15);
	
	Если СписокВыбораСодержитСправочник = Истина Тогда
		
		Запрос.Параметры.Вставить("Текст", Текст + "%");
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДанныеВыбора.Добавить(Выборка.Ссылка,
				СокрЛП(Выборка.Ссылка) + " (" + СокрЛП(ТипЗнч(Выборка.Ссылка)) + ")");
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеВыбора;
	
КонецФункции

&НаСервере
Процедура ОпределитьТипыЭлемента()
	
	СписокВыбораТипа.Очистить();
	Если ЗначениеЗаполнено(Объект.Родитель) Тогда
		ВсеРодителиИЭлемент = Новый Массив();
		ВсеРодителиИЭлемент.Добавить(Объект.Родитель);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеРодителиИЭлемент,
			ОбщегоНазначенияДокументооборот.ВсеРодителиЭлемента(Объект.Родитель), Истина);
		КорневойРодитель = ВсеРодителиИЭлемент[ВсеРодителиИЭлемент.Количество() - 1];
		ОсновнойВидОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			КорневойРодитель, "ЭлементГруппировки");
		
		ТипыЭлементовРодителей = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
			ВсеРодителиИЭлемент, "ЭлементГруппировки");
		ОрганизацииНайдены = Ложь; ТематикиНайдены = Ложь; ФормыДокументовНайдены = Ложь; ГрифыНайдены = Ложь;
		ВариантыВажностиНайдены = Ложь; ПодразделенияНайдены = Ложь;
		
		ЭтоНастройкаДляВидаДокумента = ТипЗнч(ОсновнойВидОбъекта) = Тип("СправочникСсылка.ВидыДокументов");
		
		Для Каждого ТипЭлемента Из ТипыЭлементовРодителей Цикл
			Если ТипЗнч(ТипЭлемента.Значение) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
				ПодразделенияНайдены = Истина;
			ИначеЕсли ТипЗнч(ТипЭлемента.Значение) = Тип("СправочникСсылка.Организации") Тогда
				ОрганизацииНайдены = Истина;
			ИначеЕсли ТипЗнч(ТипЭлемента.Значение) = Тип("СправочникСсылка.ТематикиДокументов") Тогда
				ТематикиНайдены = Истина;
			ИначеЕсли ТипЗнч(ТипЭлемента.Значение) = Тип("СправочникСсылка.ГрифыДоступа") Тогда
				ГрифыНайдены = Истина;
			ИначеЕсли ТипЗнч(ТипЭлемента.Значение) = Тип("ПеречислениеСсылка.ВариантыВажностиОбъектов") Тогда
				ВариантыВажностиНайдены = Истина;
			ИначеЕсли ТипЗнч(ТипЭлемента.Значение) = Тип("ПеречислениеСсылка.ВариантыФормДокументов") Тогда
				ФормыДокументовНайдены = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ОрганизацииНайдены 
			И ПолучитьФункциональнуюОпцию("ВестиУчетПоОрганизациям") Тогда
			СписокВыбораТипа.Добавить(Справочники.Организации.ПустаяСсылка(),
				РедакцииКонфигурацииКлиентСервер.Организации());
		КонецЕсли;
		
		Если Не ТематикиНайдены
			И ЭтоНастройкаДляВидаДокумента
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновнойВидОбъекта, "ВестиУчетПоТематикам") = Истина Тогда
			СписокВыбораТипа.Добавить(Справочники.ТематикиДокументов.ПустаяСсылка(),
				НСтр("ru = 'Тематики документов'"));
			КонецЕсли;
		
		Если Не ФормыДокументовНайдены И ЭтоНастройкаДляВидаДокумента Тогда
			СписокВыбораТипа.Добавить(Перечисления.ВариантыФормДокументов.ПустаяСсылка(),
				НСтр("ru = 'Формы документов'"));
		КонецЕсли;
		
		Если Не ГрифыНайдены И ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа") Тогда
			СписокВыбораТипа.Добавить(Справочники.ГрифыДоступа.ПустаяСсылка(),
				НСтр("ru = 'Грифы доступа'"));
		КонецЕсли;
		
		Если Не ВариантыВажностиНайдены
			И (ЭтоНастройкаДляВидаДокумента = Ложь
				Или ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновнойВидОбъекта, "ИспользоватьВажность") = Истина) Тогда
			СписокВыбораТипа.Добавить(Перечисления.ВариантыВажностиОбъектов.ПустаяСсылка(),
				НСтр("ru = 'Важность'"));
			КонецЕсли;
		
		Если Не ПодразделенияНайдены Тогда
			СписокВыбораТипа.Добавить(Справочники.СтруктураПредприятия.ПустаяСсылка(),
				НСтр("ru = 'Подразделения'"));
		КонецЕсли;
		
	Иначе
		ОсновнойВидОбъекта = Объект.ЭлементГруппировки;
		СписокВыбораТипа.Добавить(
			Справочники.ВидыДокументов.ПустаяСсылка(),
			НСтр("ru = 'Виды документов'"));
		СписокВыбораТипа.Добавить(
			Справочники.ВидыМероприятий.ПустаяСсылка(),
			НСтр("ru = 'Виды мероприятий'"));
	КонецЕсли;
	
	СписокВыбораТипа.СортироватьПоПредставлению();
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Если Не Объект.Ссылка.Пустая() 
		И ЗначениеЗаполнено(ОсновнойВидОбъекта) 
		И ОсновнойВидОбъекта <> Объект.ЭлементГруппировки Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = Объект.Наименование + " " + "(" + Строка(ОсновнойВидОбъекта) + ")"
			+ " " + НСтр("ru = '(Правило обработки)'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьПеречислениеВСписокАвтоПодбора(Значение, Текст, ДанныеВыбора)
	
	Если НРег(Текст) = Лев(НРег(СокрЛП(Значение)), СтрДлина(Текст)) Тогда
		ДанныеВыбора.Добавить(Значение,
			СокрЛП(Значение) + " (" + СокрЛП(ТипЗнч(Значение)) + ")");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокВыбораФормДокументов(ВидОбъекта)
	
	СписокФормДокументов = Новый СписокЗначений;
	
	ФормаВидаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидОбъекта, "ФормаДокумента");
	
	Если ФормаВидаДокумента = Перечисления.ВариантыФормДокументов.БумажнаяИлиЭлектронная Тогда
		СписокФормДокументов.Добавить(Перечисления.ВариантыФормДокументов.Бумажная);
		СписокФормДокументов.Добавить(Перечисления.ВариантыФормДокументов.Электронная);
	ИначеЕсли ФормаВидаДокумента = Перечисления.ВариантыФормДокументов.Бумажная Тогда
		СписокФормДокументов.Добавить(Перечисления.ВариантыФормДокументов.Бумажная);
	Иначе
		СписокФормДокументов.Добавить(Перечисления.ВариантыФормДокументов.Электронная);
	КонецЕсли;
	
	Возврат СписокФормДокументов;
	
КонецФункции

#КонецОбласти
