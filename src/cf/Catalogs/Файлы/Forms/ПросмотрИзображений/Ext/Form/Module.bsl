
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Файл = Параметры.Файл;
	ДанныеФайла = Параметры.ДанныеФайла;
	ИмяОткрываемогоФайла = Параметры.ИмяОткрываемогоФайла; 
	
	Если ДанныеФайла.ТекущаяВерсия <> ДанныеФайла.Версия Тогда
		АдресВременногоФайла = РаботаСФайламиВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(
			ДанныеФайла.Версия, УникальныйИдентификатор);
	КонецЕсли;

		
	АвтоНавигационнаяСсылка = Ложь;
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Файл);
	
	ЗаполнитьЗаголовокФормы();
	
	ЗаполнитьПараметрыРаспознавания();
	
	ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ВладелецФайла");
	Попытка
		ИсточникДанных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецФайла, "ИсточникДанных");
	Исключение
	КонецПопытки;		
	ИзменяетсяВДругойСистеме = МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(ИсточникДанных);	
	
	Если Не ИзменяетсяВДругойСистеме И 
		ФайлРаспознается(ДанныеФайла, ВозможноНачалоАвтораспознаванияНовогоФайла) Тогда
		ПроверитьРезультатРаспознаванияНаСервере(
			Файл, ДанныеФайла, ВозможноНачалоАвтораспознаванияНовогоФайла, Ложь);
	КонецЕсли;
	
	ПодготовитьФайлКПросмотру();
	
	НастроитьОтображениеКомандыРаспознать();
	
	НастроитьОтображениеКомандРаботыСПроцессамиИЗадачами();
	
	// команды Далее Назад
	ПерсональныеНастройкиРаботыСФайлами = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами();
	ИзображенияРасширение = ПерсональныеНастройкиРаботыСФайлами.ИзображенияРасширение; 
	ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ВладелецФайла");
	ФайлыПисьма = ВстроеннаяПочтаСервер.ПолучитьФайлыПисьма(
		ВладелецФайла, // Письмо
		Истина, // ФормироватьРазмерПредставление
		Ложь, // ВключатьПомеченныеНаУдаление
		Ложь,    // ТолькоСИдентификаторами
		Истина // ТолькоБезИдентификаторов  - чтобы картинки в HTML не показывать
		);
	
	Для Каждого ФайлСтрока Из ФайлыПисьма Цикл   
		
		Если Не ФайлСтрока.РедактируетТекущийПользователь 
			И ФайловыеФункцииСлужебныйКлиентСервер.РасширениеФайлаВСписке(
				ИзображенияРасширение, ФайлСтрока.ТекущаяВерсияРасширение) Тогда
		
			ЭлементСписка = СписокВсехКартинок.Добавить(ФайлСтрока.Ссылка);	
			Если ФайлСтрока.Ссылка = Файл Тогда
				ТекущийНомерФайла = СписокВсехКартинок.Индекс(ЭлементСписка);
			КонецЕсли;	
		
		КонецЕсли;
		
	КонецЦикла; 
	ДоступностьКомандПерехода();
	
	// Мобильный Клиент
	МК_НастроитьЭлементыФормы();
	// Конец Мобильный клиент
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	НастроитьВидимостьОбластиРаспознанногоТекста();
	
	НастроитьОтображениеРаспознанногоТекста();
	
	ВключитьОтложеннуюПроверкуРезультатаРаспознавания();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РаспознатьФайл(Команда)
	
	ОбработчикВыбораПараметров = Новый ОписаниеОповещения(
		"ПродолжитьРаспознаваниеФайлаПослеУточненияНастроек", ЭтотОбъект);
	
	РаботаСФайламиКлиент.ВыбратьНастройкиРаспознаванияФайлаПоЗапросу(
		ОбработчикВыбораПараметров, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьРаспознаваниеФайлаПослеУточненияНастроек(НастройкиРаспознавания, ДопПараметры) Экспорт
	
	Если ТипЗнч(НастройкиРаспознавания) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЯзыкРаспознавания = НастройкиРаспознавания.ЯзыкРаспознавания;
	СтратегияРаспознавания = НастройкиРаспознавания.СтратегияРаспознавания;
	
	РаспознатьФайлНаСервере();
	
	Элементы.ГруппаПросмотр.ТекущаяСтраница = Элементы.ГруппаИзображениеИТекст;
	
	НастроитьОтображениеРаспознанногоТекста();
	
	ВключитьОтложеннуюПроверкуРезультатаРаспознавания();
	
КонецПроцедуры

&НаКлиенте
Процедура Печатать(Команда)
	
	#Если ВебКлиент Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте печать файлов не поддерживается.'"));
		Возврат;
	#КонецЕсли
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Если СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86
		И СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Печать файлов возможна только в Windows.'"));
		Возврат;
	КонецЕсли;
	
	ДанныеФайлаДляОткрытия = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
		Файл,
		Неопределено,
		УникальныйИдентификатор);
	
	КомандыРаботыСФайламиКлиент.НапечататьФайл(ДанныеФайлаДляОткрытия, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Задачи(Команда)
	
	ОткрытьФорму("ОбщаяФорма.ПроцессыИЗадачи", 
		Новый Структура("Предмет, НезависимоеОкно", Файл, Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточку(Команда)
	
	ПоказатьЗначение(,Файл);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	ДанныеФайлаДляСохранения = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(
		Файл,
		Неопределено,
		УникальныйИдентификатор);
	
	КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайлаДляСохранения, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнийРедактор(Команда)
	
	РаботаСФайламиКлиент.ВыполнитьЗапускПриложения(ИмяОткрываемогоФайла);
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Повернуть90Влево(Команда)
	ПовернутьКартинкуКлиент(-90);
КонецПроцедуры

&НаКлиенте
Процедура Повернуть90Вправо(Команда)
	ПовернутьКартинкуКлиент(90);
КонецПроцедуры

&НаКлиенте
Процедура Повернуть180(Команда)
	ПовернутьКартинкуКлиент(180);
КонецПроцедуры

&НаКлиенте
Процедура ПовернутьКартинкуКлиент(Угол)              
	
	Состояние(НСтр("ru = 'Поворот картинки...'")); 
	ПовернутьКартинку(Угол);              
	Состояние();
	
КонецПроцедуры

&НаСервере
Процедура ПовернутьКартинку(Угол)    
	
	ИтоговыйУголПоворота = ИтоговыйУголПоворота + Угол;
	
	ДвоичныеДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеВерсииФайла(ДанныеФайла.Версия);
	
	ПовернутьКартинкуСервер(ИтоговыйУголПоворота, ДвоичныеДанныеФайла);
	
	АдресВременногоФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура ПовернутьКартинкуСервер(Угол, ДвоичныеДанные)
	
	Картинка = Новый Картинка(ДвоичныеДанные);
	
	ОбрабатываемаяКартинка = Новый ОбрабатываемаяКартинка(Картинка);
	ОбрабатываемаяКартинка.Повернуть(Угол);
	
	НоваяКартинка = ОбрабатываемаяКартинка.ПолучитьКартинку();
	ДвоичныеДанные = НоваяКартинка.ПолучитьДвоичныеДанные();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьЗаголовокФормы()
	
	ЗаголовокСтрока = ФайловыеФункцииКлиентСервер.ПолучитьИмяСРасширением(
		ДанныеФайла.ПолноеНаименованиеВерсии,
		ДанныеФайла.Расширение);
	Заголовок = ЗаголовокСтрока;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыРаспознавания()
	
	ИспользоватьРаспознавание = РаботаСФайламиВызовСервера.ПолучитьИспользоватьРаспознавание();
	
	СтратегияРаспознавания = Перечисления.СтратегииРаспознаванияТекста.ПоместитьТолькоВТекстовыйОбраз;
	
	ИспользоватьImageMagickДляРаспознаванияPDF = 
		РаботаСФайламиВызовСервера.ПолучитьИспользоватьImageMagickДляРаспознаванияPDF();
	
	ПрограммаРаспознавания = РаботаСФайламиВызовСервера.ПрограммаРаспознавания();
	
	ЯзыкРаспознавания = РаботаСФайламиВызовСервера.ЯзыкРаспознаванияПрограммыПоУмолчанию(ПрограммаРаспознавания);
	
	ФайлМожноРаспознать = РаботаСФайламиКлиентСервер.ЭтотФайлМожноРаспознать(
		ДанныеФайла.Расширение,
		ИспользоватьImageMagickДляРаспознаванияPDF,
		ПрограммаРаспознавания);
	
	ДоступноРаспознаваниеПоЗапросу = РаботаСФайламиВызовСервера.ДоступноРаспознаваниеПоЗапросу();
	
	ВозможноНачалоАвтораспознаванияНовогоФайла =
		РаботаСФайламиВызовСервера.ВозможноНачалоАвтораспознаванияНовогоФайла(ДанныеФайла);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФайлКПросмотру()
	
	// Адрес файла получает один раз, т.к. он не меняется, в отличии от текста.
	Если Не ЗначениеЗаполнено(АдресВременногоФайла) Тогда
		ДвоичныеДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(Файл);
		АдресВременногоФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;
	
	ТекстФайла = РегистрыСведений.ТекстыФайлов.ПолучитьТекстФайла(Файл);
	Если Не ЗначениеЗаполнено(ТекстФайла) Тогда
		ТекущаяВерсияФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ТекущаяВерсия");
		ТекстФайла = РегистрыСведений.ТекстыВерсийФайлов.ПолучитьТекстХранилище(ТекущаяВерсияФайла).Получить();
	КонецЕсли;
	
	ТекстФайлаHTML = РаботаС_HTML.ПолучитьHTMLИзТекста_ДляПросмотраТекста(ТекстФайла);
	РаботаС_HTML.ДобавитьТегиКСсылкам(ТекстФайлаHTML);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидимостьОбластиРаспознанногоТекста()
	
	Если ИспользоватьРаспознавание
		И (ФайлРаспознается(ДанныеФайла, ВозможноНачалоАвтораспознаванияНовогоФайла)
			Или ЗначениеЗаполнено(ТекстФайла)) Тогда
		
		Элементы.ГруппаПросмотр.ТекущаяСтраница = Элементы.ГруппаИзображениеИТекст;
	Иначе
		Элементы.ГруппаПросмотр.ТекущаяСтраница = Элементы.ГруппаИзображение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтображениеРаспознанногоТекста()
	
	Если ФайлРаспознается(ДанныеФайла, ВозможноНачалоАвтораспознаванияНовогоФайла) Тогда
		Элементы.ГруппаТекстФайла.ТекущаяСтраница = Элементы.ГруппаТекстРаспознается;
	ИначеЕсли ДанныеФайла.СтатусРаспознаванияТекста = "Распознано" Тогда
		Элементы.ГруппаТекстФайла.ТекущаяСтраница = Элементы.ГруппаТекст;
	ИначеЕсли ДанныеФайла.СтатусРаспознаванияТекста = "НеРаспознано" Тогда
		Элементы.ГруппаТекстФайла.ТекущаяСтраница = Элементы.ГруппаОшибкаПриРаспознавании;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеКомандыРаспознать()
	
	Элементы.РаспознатьФайл.Видимость = 
		ИспользоватьРаспознавание И ДоступноРаспознаваниеПоЗапросу И ФайлМожноРаспознать;
	Элементы.РаспознатьФайлПодменю.Видимость = Элементы.РаспознатьФайл.Видимость
	
КонецПроцедуры

&НаСервере
Процедура РаспознатьФайлНаСервере()
	
	НачатьРаспознаваниеФайла();
	
	Если Не ФайлРаспознается(ДанныеФайла, ВозможноНачалоАвтораспознаванияНовогоФайла) Тогда
		ПодготовитьФайлКПросмотру();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачатьРаспознаваниеФайла()
	
	Если ФайлРаспознается(ДанныеФайла, ВозможноНачалоАвтораспознаванияНовогоФайла) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРаспознавания = Новый Структура;
	ПараметрыРаспознавания.Вставить("ЯзыкРаспознавания", ЯзыкРаспознавания);
	ПараметрыРаспознавания.Вставить("СтратегияРаспознавания", СтратегияРаспознавания);
	
	ОписаниеОшибки = "";
	РезультатРаспознавания = РаботаСФайламиВызовСервера.РаспознатьФайл(
		Файл, ПараметрыРаспознавания, ОписаниеОшибки, "", УникальныйИдентификатор);
	Если РезультатРаспознавания = "Ошибка" Тогда
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(Файл);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОтложеннуюПроверкуРезультатаРаспознавания()
	
	Если Не ИспользоватьРаспознавание Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ФайлМожноРаспознать Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ФайлРаспознается(ДанныеФайла, ВозможноНачалоАвтораспознаванияНовогоФайла) Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПроверитьРезультатРаспознавания", 2);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРезультатРаспознавания()
	
	Если ИзменяетсяВДругойСистеме Тогда
		Возврат;
	КонецЕсли;	
	
	ПроверитьРезультатРаспознаванияНаСервере(
		Файл, ДанныеФайла, ВозможноНачалоАвтораспознаванияНовогоФайла);
	
	Если ФайлРаспознается(ДанныеФайла, ВозможноНачалоАвтораспознаванияНовогоФайла) Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьФайлКПросмотру();
	
	НастроитьОтображениеРаспознанногоТекста();
	
	ОтключитьОбработчикОжидания("ПроверитьРезультатРаспознавания");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьРезультатРаспознаванияНаСервере(
	Файл, ДанныеФайла, ВозможноНачалоАвтораспознаванияНовогоФайла, ПроверитьОтложено = Неопределено)
	
	// Обновляем данные файла.
	// Если файл еще распознается, то ускоряем его распознавание вызовом
	// процедуры РаботаСФайламиВызовСервера.РаспознатьВерсию.
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(Файл);
	
	Если Не ФайлРаспознается(ДанныеФайла, ВозможноНачалоАвтораспознаванияНовогоФайла) Тогда
		Возврат;
	КонецЕсли;
	
	ПрограммаРаспознавания = РаботаСФайламиВызовСервера.ПрограммаРаспознавания();
	
	Если ДанныеФайла.СтатусРаспознаванияТекста = "Распознается"
		
		И ПрограммаРаспознавания = Перечисления.ПрограммыРаспознавания.СервисРаспознавания
		
		И РегистрыСведений.ФайлыНаРаспознавании.ИдентификаторЗаданияРаспознавания(
		ДанныеФайла.ТекущаяВерсия) = "" Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоLinuxКлиент()
		И ПрограммаРаспознавания = Перечисления.ПрограммыРаспознавания.CuneiForm Тогда
		
		Возврат;
	КонецЕсли;
	
	// Если у пользователя нет права изменения, то вызовет ошибку. Не распознаем.
	ПраваНаФайл = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(Файл);
	
	Если Не ПраваНаФайл.Изменение Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьОтложено = Неопределено Тогда
		ПроверитьОтложено = Не ОбщегоНазначения.ИнформационнаяБазаФайловая();
	КонецЕсли;
	
	Если Не ПроверитьОтложено Тогда
		
		РаботаСФайламиВызовСервера.РаспознатьВерсию(ДанныеФайла.ТекущаяВерсия, "", "");
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(Файл);
		
	Иначе
	
		КлючЗадания = "РаспознаваниеВерсии_" + Строка(ДанныеФайла.ТекущаяВерсия.УникальныйИдентификатор());
		
		Отбор = Новый Структура;
		Отбор.Вставить("Ключ", КлючЗадания);
		Отбор.Вставить("ИмяМетода", "РаботаСФайламиВызовСервера.РаспознатьВерсию");
		Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
		
		ЗаданияРаспознаванияВерсии = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		
		Если ЗаданияРаспознаванияВерсии.Количество() = 0 Тогда
			
			ПараметрыЗадания = Новый Массив;
			ПараметрыЗадания.Добавить(ДанныеФайла.ТекущаяВерсия);
			ПараметрыЗадания.Добавить("");
			ПараметрыЗадания.Добавить("");
			ПараметрыЗадания.Добавить(Неопределено);
			ПараметрыЗадания.Добавить(Истина);
			
			Попытка
				ФоновыеЗадания.Выполнить(
					"РаботаСФайламиВызовСервера.РаспознатьВерсию",
					ПараметрыЗадания,
					КлючЗадания,
					НСтр("ru = 'Распознавание версии файла'"));
			Исключение
				// В другом сеансе могла тоже выполняться работа с файлом.
				// И от туда могло быть запущено фоновое задание распознавания версии
				// между поиском и запуском фонового задания в текущем сеансе.
				// Ошибку никак не обрабатываем и в ЖР ничего не пишем, т.к. это штатная ситуация,
				// не требующая реакции пользователя или администратора.
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ФайлРаспознается(ДанныеФайла, ВозможноНачалоАвтораспознаванияНовогоФайла)
	
	Возврат ДанныеФайла.СтатусРаспознаванияТекста = "Распознается"
		Или (ВозможноНачалоАвтораспознаванияНовогоФайла
			И ДанныеФайла.СтатусРаспознаванияТекста = "НужноРаспознать");
	
КонецФункции

&НаСервере
Процедура НастроитьОтображениеКомандРаботыСПроцессамиИЗадачами()
	
	ДоступнаОтправкаФайла = 
		РаботаСФайламиВызовСервера.ДоступнаОтправкаФайлаИзВстроенногоРедактораФайла(ДанныеФайла);
	
	Элементы.ОтправитьОбъекты.Видимость = ДоступнаОтправкаФайла;
	Элементы.Задачи.Видимость = ДоступнаОтправкаФайла;
	
КонецПроцедуры

&НаКлиенте
Процедура Следующая(Команда)
	
	Если ТекущийНомерФайла <= СписокВсехКартинок.Количество()-2 Тогда
		
		ТекущийНомерФайла = ТекущийНомерФайла + 1;
		Если ТекущийНомерФайла < СписокВсехКартинок.Количество() Тогда  
			
			ПоказатьКартинкуКлиент();
			
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Предыдущая(Команда)
	
	Если ТекущийНомерФайла > 0 Тогда
		
		ТекущийНомерФайла = ТекущийНомерФайла - 1;
		Если ТекущийНомерФайла < СписокВсехКартинок.Количество() Тогда  
			
			ПоказатьКартинкуКлиент();
			
		КонецЕсли;	
		
	КонецЕсли;	 
	
	// еще дизеблить команды.
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКартинкуКлиент()
	
	ПоказатьКартинку();
	
	НастроитьВидимостьОбластиРаспознанногоТекста();
	НастроитьОтображениеРаспознанногоТекста();
	ВключитьОтложеннуюПроверкуРезультатаРаспознавания();
	
КонецПроцедуры	

&НаСервере
Процедура ПоказатьКартинку()

	Файл = СписокВсехКартинок[ТекущийНомерФайла].Значение;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Файл);
	
	ИмяОткрываемогоФайла = ДанныеФайла.ПолноеНаименованиеВерсии;
	
	АвтоНавигационнаяСсылка = Ложь;
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Файл);
	
	ЗаполнитьЗаголовокФормы();
	
	АдресВременногоФайла = "";
	ПодготовитьФайлКПросмотру();
	
	ПоказыватьРаспознанныйТекст = Ложь;
	
	ДоступностьКомандПерехода();
	
	ЗаполнитьПараметрыРаспознавания();
	НастроитьОтображениеКомандыРаспознать();

КонецПроцедуры	

&НаСервере
Процедура ДоступностьКомандПерехода()

	Элементы.Предыдущая.Доступность = (ТекущийНомерФайла > 0 И ТекущийНомерФайла < СписокВсехКартинок.Количество());
	Элементы.Предыдущая1.Доступность = (ТекущийНомерФайла > 0 И ТекущийНомерФайла < СписокВсехКартинок.Количество());
	
	Элементы.Следующая.Доступность = (ТекущийНомерФайла <= СписокВсехКартинок.Количество() - 2 И ТекущийНомерФайла < СписокВсехКартинок.Количество());
	Элементы.Следующая1.Доступность = (ТекущийНомерФайла <= СписокВсехКартинок.Количество() - 2 И ТекущийНомерФайла < СписокВсехКартинок.Количество());
	
КонецПроцедуры

&НаСервере
Процедура МК_НастроитьЭлементыФормы()

	Если Не ПараметрыСеанса.ЭтоМобильныйКлиент Тогда
		Возврат;
	КонецЕсли;

	СворачиваниеЭлементовПоВажности = СворачиваниеЭлементовФормыПоВажности.НеИспользовать;
	Элементы.Переместить(Элементы.ГруппаПросмотр, Элементы.МК_Содержимое);
	Элементы.Переместить(Элементы.ГруппаПраво, Элементы.МК_Содержимое);
	Если МК_КлиентСервер.ЭтоПортретныйРежим() Тогда
		Элементы.МК_Содержимое.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Элементы.ГруппаПраво.Группировка =
			ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		Элементы.ГруппаКомандыПоворота.Группировка =
			ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	Иначе
		Элементы.МК_Содержимое.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
				Элементы.ГруппаПраво.Группировка =
			ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Элементы.ГруппаКомандыПоворота.Группировка =
			ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти