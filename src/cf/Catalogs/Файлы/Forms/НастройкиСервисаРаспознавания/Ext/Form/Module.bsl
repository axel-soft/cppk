
#Область ОписаниеПеременных

&НаКлиенте
Перем АвтораспознаваниеДоИзмененияРежима;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПрочитатьПараметрыРаспознаванияВФорму();
	ОбновитьПараметрыАвторизации();
	ОбновитьОтображениеИнформацииОбАвторизации();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормы_РежимыРаспознавания

&НаКлиенте
Процедура РежимыРаспознаванияРежимПриИзменении(Элемент)
	
	ВключеноАвтораспознавание = ВключеноАвтораспознавание();
	Если ВключеноАвтораспознавание И Не АвтораспознаваниеДоИзмененияРежима
		И Не ЗначениеЗаполнено(НачалоАвтоматическогоРаспознаванияФайлов) Тогда
		
		НачалоАвтоматическогоРаспознаванияФайлов = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимыРаспознаванияРежимОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимыРаспознаванияРежимНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	АвтораспознаваниеДоИзмененияРежима = ВключеноАвтораспознавание();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Команда)
	
	ОбрабочтикПодключенияПоддержки = Новый ОписаниеОповещения(
		"ПослеПодключенияИнтернетПоддержки",
		ЭтотОбъект);
	
	ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
		ОбрабочтикПодключенияПоддержки, ЭтаФорма);
	
КонецПроцедуры

// Продолжение ПодключитьИнтернетПоддержку.
//
&НаКлиенте
Процедура ПослеПодключенияИнтернетПоддержки(РезультатПодключения, ДополнительныеПараметры) Экспорт
	
	Если РезультатПодключения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьАвторизацию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьСервисРаспознавания(Команда)
	
	Если ТестовыйПериодДоступен Тогда
		ИдентификаторСервиса = РаспознаваниеКлиентСервер.ИдентификаторСервиса();
		Обработчик = Новый ОписаниеОповещения("ПослеПодключенияТестовогоПериода", ЭтотОбъект);
		ПодключениеСервисовСопровожденияКлиент.ПодключитьТестовыйПериод(ИдентификаторСервиса, ЭтотОбъект, Обработчик);
	Иначе
		ВыполнитьАвторизацию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияТестовогоПериода(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = ПредопределенноеЗначение("Перечисление.СостоянияПодключенияСервисов.НеПодключен") Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьАвторизацию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьСервисРаспознавания(Команда)
	
	УдалитьДанныеАвторизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПополнитьБаланс(Команда)
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(РаспознаваниеКлиентСервер.АдресЛичногоКабинета());
	
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	
	ОбработчикОтвета = Новый ОписаниеОповещения("ОК_ПослеВопросаОПродолжении", ЭтотОбъект);
	
	Если ВключеноАвтораспознавание() Тогда
		ТекстВопроса = НСтр("ru = 'Внимание! Часть файлов распознается автоматически.
			|К ним будут применены единые правила тарификации, даже если язык файла отличается от указанного.
			|
			|Продолжить?'");
		ОбщегоНазначенияДокументооборотКлиент.ПоказатьВопросДаНет(
			ОбработчикОтвета,
			ТекстВопроса,
			НСтр("ru = 'Продолжить'"),
			НСтр("ru = 'Отмена'"));
		
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОбработчикОтвета, КодВозвратаДиалога.Да);
	
КонецПроцедуры

// Продолжение ОК
//
&НаКлиенте
Процедура ОК_ПослеВопросаОПродолжении(КодОтвета, ДолнительныеПараметры) Экспорт
	
	Если КодОтвета <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьПараметрыРаспознавания();
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПараметрыРаспознавания

// Читает параметры распознавания в форму.
//
&НаСервере
Процедура ПрочитатьПараметрыРаспознаванияВФорму()
	
	ПараметрыРаспознавания = РаботаСФайламиВызовСервера.ПараметрыРаспознаванияВСервисе();
	АдресПараметровРапознавания = ПоместитьВоВременноеХранилище(ПараметрыРаспознавания, УникальныйИдентификатор);
	
	РежимыРаспознавания.Очистить();
	ВладельцыФайлов = Новый Массив;
	ИОМНеподходящихТипов = ИОМНеподходящихТиповВладельцев();
	Для Каждого РежимДляВладельца Из ПараметрыРаспознавания.РежимыРаспознавания Цикл
		
		Если ИОМНеподходящихТипов.Найти(РежимДляВладельца.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = РежимыРаспознавания.Добавить();
		СтрокаТаблицы.Владелец = РежимДляВладельца.Ключ;
		СтрокаТаблицы.Режим = РежимДляВладельца.Значение;
		ВладельцыФайлов.Добавить(СтрокаТаблицы.Владелец);
		
	КонецЦикла;
	
	ПредставленияВладельцев = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВладельцыФайлов, "Синоним");
	Для Каждого СтрокаТаблицы Из РежимыРаспознавания Цикл
		СтрокаТаблицы.Представление = ПредставленияВладельцев[СтрокаТаблицы.Владелец];
	КонецЦикла;
	РежимыРаспознавания.Сортировать("Представление");
	
	ЯзыкРаспознавания = ПараметрыРаспознавания.ЯзыкРаспознавания;
	СотрудникДляЗаданияРаспознавания = ПараметрыРаспознавания.СотрудникДляЗаданияРаспознавания;
	
	СрокХраненияПротоколаРаботыССервисомРаспознавания =
		ПараметрыРаспознавания.СрокХраненияПротоколаРаботыССервисомРаспознавания;
	
	НачалоАвтоматическогоРаспознаванияФайлов =
		ПараметрыРаспознавания.НачалоАвтоматическогоРаспознаванияФайлов;
	
	ПорогБалансаСтраницСервисаРаспознавания =
		ПараметрыРаспознавания.ПорогБалансаСтраницСервисаРаспознавания;
	
	ПорогСрокаДействияТарифаСервисаРаспознавания =
		ПараметрыРаспознавания.ПорогСрокаДействияТарифаСервисаРаспознавания;
	
КонецПроцедуры

// Пишет параметры распознавания, установленные в форме.
//
&НаСервере
Процедура ЗаписатьПараметрыРаспознавания()
	
	ПараметрыРаспознавания = ПолучитьИзВременногоХранилища(АдресПараметровРапознавания);
	
	ПараметрыРаспознавания.РежимыРаспознавания.Очистить();
	
	Для Каждого СтрокаТаблицы Из РежимыРаспознавания Цикл
		ПараметрыРаспознавания.РежимыРаспознавания[СтрокаТаблицы.Владелец] = СтрокаТаблицы.Режим;
	КонецЦикла;
	
	Для Каждого Элемент Из ИОМНеподходящихТипов Цикл
		Если ПараметрыРаспознавания.РежимыРаспознавания[Элемент] = Неопределено Тогда
			ПараметрыРаспознавания.РежимыРаспознавания[Элемент] = Перечисления.ВариантыРежимовРаспознаванияФайлов.ПоЗапросу;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыРаспознавания.ЯзыкРаспознавания = ЯзыкРаспознавания;
	ПараметрыРаспознавания.СотрудникДляЗаданияРаспознавания = СотрудникДляЗаданияРаспознавания;
	
	ПараметрыРаспознавания.СрокХраненияПротоколаРаботыССервисомРаспознавания =
		СрокХраненияПротоколаРаботыССервисомРаспознавания;
	
	ПараметрыРаспознавания.НачалоАвтоматическогоРаспознаванияФайлов =
		НачалоАвтоматическогоРаспознаванияФайлов;
	
	ПараметрыРаспознавания.ПорогБалансаСтраницСервисаРаспознавания =
		ПорогБалансаСтраницСервисаРаспознавания;
	
	ПараметрыРаспознавания.ПорогСрокаДействияТарифаСервисаРаспознавания =
		ПорогСрокаДействияТарифаСервисаРаспознавания;
	
	РаботаСФайламиВызовСервера.УстановитьПараметрыРаспознаванияВСервисе(ПараметрыРаспознавания);
	
КонецПроцедуры

#КонецОбласти

#Область АвторизацияВСервисе

&НаСервере
Процедура ОбновитьПараметрыАвторизации()
	
	БазаПодключенаКИТС = 
		ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	
	БазаАвторизированаВСервисе = Распознавание.БазаАвторизированаВСервисеРаспознавания();
	
	ТестовыйПериодДоступен = Распознавание.ПодключениеТестовогоПериодаДоступно();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеИнформацииОбАвторизации()
	
	Если БазаАвторизированаВСервисе Тогда
		Элементы.ДекорацияСервисРаспознаванияПодключен.Заголовок = ОписаниеСостоянияСервисПодключен();
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСервисРаспознаванияПодключен;
	ИначеЕсли Не БазаПодключенаКИТС Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНеПодключенаИнтернетПоддержка;
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНеПодключенСервисРаспознавания;
		Если ТестовыйПериодДоступен Тогда
			Элементы.ПодключитьСервисРаспознавания.Заголовок = НСтр("ru = 'Подключить тестовый период'");
		Иначе
			Элементы.ПодключитьСервисРаспознавания.Заголовок = НСтр("ru = 'Подключить'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьАвторизацию()
	
	ОписаниеОшибки = "";
	Попытка
		Распознавание.ВыполнитьАвторизациюЧерезИТС();
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	ОбновитьПараметрыАвторизации();
	ОбновитьОтображениеИнформацииОбАвторизации();
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДанныеАвторизации()
	
	Распознавание.УдалитьДанныеАвторизации();
	ОбновитьПараметрыАвторизации();
	ОбновитьОтображениеИнформацииОбАвторизации();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеСостоянияСервисПодключен()
	
	Результат = Распознавание.ЛимитСтраницРаспознавания();
	Если ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
		ЗаписьЖурналаРегистрации(
			Распознавание.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			Результат.ОписаниеОшибки);
		КонецЕсли;
		
	ОписаниеПодключенногоСервиса = СтрШаблон(
		НСтр("ru = 'Сервис распознавания документов подключен. Осталось страниц: %1 %2'"),
		Результат.ЛимитСтраниц,
		?(ЗначениеЗаполнено(Результат.ДатаОкончания),
			СтрШаблон(НСтр("ru = 'до %1'"), Формат(Результат.ДатаОкончания, "ДФ=dd.MM.yyyy")),
			""));
	
	Возврат ОписаниеПодключенногоСервиса;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Функция ВключеноАвтораспознавание()
	
	Отбор = Новый Структура("Режим",
		ПредопределенноеЗначение("Перечисление.ВариантыРежимовРаспознаванияФайлов.Автоматический"));
	
	СтрокиСАвтораспознаванием = РежимыРаспознавания.НайтиСтроки(Отбор);
	
	Возврат СтрокиСАвтораспознаванием.Количество() <> 0;
	
КонецФункции

&НаСервере
Функция ИОМНеподходящихТиповВладельцев()
	
	НеподходящиеТипы = РегистрыСведений.РежимыРаспознаванияФайлов.НеподходящиеТипыДляАвтораспознавания();
	ИОМНеподходящиеТипы = ОбщегоНазначения.ИдентификаторыОбъектовМетаданных(
		НеподходящиеТипы);
		
	Результат = Новый Массив;
	Для Каждого ИдентификаторОМ Из ИОМНеподходящиеТипы Цикл
		Результат.Добавить(ИдентификаторОМ.Значение);
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(Результат);
	
КонецФункции

#КонецОбласти
