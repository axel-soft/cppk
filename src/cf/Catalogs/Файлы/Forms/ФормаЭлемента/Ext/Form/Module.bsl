
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПараметрыФайлОснование = Параметры.ФайлОснование;
	
	Если Параметры.Свойство("ОткрытьЗакладкуЭП") Тогда
		
		ОткрытьЗакладкуЭП = Параметры.ОткрытьЗакладкуЭП;
		
		Если ОткрытьЗакладкуЭП Тогда
			Элементы.ГруппаДополнительныеДанныеСтраницы.ТекущаяСтраница
			 = Элементы.ГруппаЭП;
		КонецЕсли;
		
	КонецЕсли;
	
	ПолеPDFРаботаетВВебКлиенте = РаботаСPDFПовтИсп.ПолеPDFРаботаетВВебКлиенте();
	ТаймлистИспользуется = ТаймлистПовтИсп.ТаймлистИспользуется();
	ДоступноРаспознаваниеТаймлист = ТаймлистПовтИсп.ДоступноРаспознаваниеПоЗапросу();
	МаксимальноеЧислоСтраницДляПредпросмотра = ОбзорФайловСервер.МаксимальноеЧислоСтраницДляПредпросмотра();
	
	Если Параметры.Свойство("ОткрытьЗакладкуЗадачи") Тогда
		ОткрытьЗакладкуЗадачи = Параметры.ОткрытьЗакладкуЗадачи;
	КонецЕсли;
	
	Если Параметры.Свойство("РольФайла") Тогда
		РольФайла = Параметры.РольФайла;
	КонецЕсли;
	
	Если Параметры.Свойство("УстановитьТолькоПросмотр") И Параметры.УстановитьТолькоПросмотр = Истина Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
		РазрешеноРедактирование = Ложь;
	КонецЕсли;
	
	Если НЕ Параметры.ФайлОснование.Пустая() И Объект.ТекущаяВерсия.Пустая() Тогда
		
		Элементы.ИконкаФайлаБольшая.Видимость = Ложь;
		Элементы.ИконкаФайлаБольшаяНаОсновании.Видимость = Истина;
		ИндексКартинкиНаОсновании = Параметры.ФайлОснование.ИндексКартинки;
		
		ЗаполнитьПараметрыКарточки(Параметры.ФайлОснование);
		
		Если Параметры.ФайлОснование.ТекущаяВерсия.ТипХраненияФайла 
			= Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			
			НетФайлаШаблона = Ложь;
			ПолныйПуть = "";
			
			Если НЕ Параметры.ФайлОснование.ТекущаяВерсия.Том.Пустая() Тогда
				
				ПолныйПуть = ФайловыеФункции.ПолныйПутьТома(Параметры.ФайлОснование.ТекущаяВерсия.Том)
					+ Параметры.ФайлОснование.ТекущаяВерсия.ПутьКФайлу; 
				Файл = Новый Файл(ПолныйПуть);
				НетФайлаШаблона = Не Файл.Существует();
				
			Иначе
				НетФайлаШаблона = Истина;
			КонецЕсли;
			
			Если НетФайлаШаблона Тогда
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru ='Отсутствует файл (""%1"") у шаблона.'"),
					ПолныйПуть);
				
				ВызватьИсключение ТекстОшибки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПротоколированиеРаботыСотрудников.ЗаписатьОткрытие(Объект.Ссылка);
	
	Если ЗначениеЗаполнено(Объект.Ссылка)  Тогда

		ПользовательИЕгоСотрудники = СотрудникиВызовСервера.ПользовательИЕгоСотрудники(Пользователи.ТекущийПользователь());
		АвторЭтоТекущийПользователь = (ПользовательИЕгоСотрудники.Найти(Объект.Автор) <> Неопределено);
			
		Если Не АвторЭтоТекущийПользователь Тогда
			Элементы.ФормаУдалить.Доступность = Ложь;
		КонецЕсли;
			
	КонецЕсли;	
	
	Если ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ() Тогда
		Элементы.ДатаСоздания.ТолькоПросмотр = Ложь;
		Элементы.Владелец.ТолькоПросмотр = Ложь;
	Иначе	
		Элементы.Владелец.ТолькоПросмотр = Истина;
		Элементы.Владелец.КнопкаВыбора = Ложь;
	КонецЕсли;
	
	КолонкиМассив = Новый Массив;
	Для Каждого ОписаниеКолонки Из РеквизитФормыВЗначение("ЭлектронныеПодписи").Колонки Цикл
		КолонкиМассив.Добавить(ОписаниеКолонки.Имя);
	КонецЦикла;
	ОписаниеКолонокТаблицыПодписей = Новый ФиксированныйМассив(КолонкиМассив);
	
	ИспользоватьКатегорииДанных = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	ИспользоватьАвтоматическуюКатегоризациюДанных 
		= ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюКатегоризациюДанных");
	ИспользоватьПроверкуКатегорий = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	ИспользоватьАвтозаполнениеФайлов = ПолучитьФункциональнуюОпцию("ИспользоватьАвтозаполнениеФайлов");
	ВставлятьШКвMSWordнаСервере = Константы.ИзменениеФайловMSWordТолькоНаСервере.Получить();
	ИспользоватьШК = ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды");
	
	ВестиУчетПоПроектам = ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам");
	
	Если Параметры.Свойство("РежимСоздания") Тогда 
		РежимСоздания = Параметры.РежимСоздания;
	КонецЕсли;
	
	Если Параметры.Ключ = Неопределено Или Параметры.Ключ.Пустая() Тогда
		
		НовыйФайл = Истина;
		
		Если Параметры.ЗначениеКопирования.Пустая() Тогда
			Объект.ВладелецФайла = Параметры.ВладелецФайла;
		Иначе
			Объект.ТекущаяВерсия = Справочники.ВерсииФайлов.ПустаяСсылка();
			Параметры.ФайлОснование = Параметры.ЗначениеКопирования;
		КонецЕсли;
		
	КонецЕсли;
	
	ДокОснование = Параметры.ФайлОснование;
	Если Не ДокОснование.Пустая() Тогда
		
		ИмяОригинальногоФайла = Строка(ДокОснование);
		Объект.ПолноеНаименование = ИмяОригинальногоФайла;
			
		Объект.Наименование = Объект.ПолноеНаименование;
		Объект.ХранитьВерсии = ДокОснование.ХранитьВерсии;
		
		// копирование категорий
		Если ИспользоватьКатегорииДанных Тогда
			КатегорииИсточника = РаботаСКатегориямиДанных.ПолучитьКатегорииОбъекта(ДокОснование);
			Для Каждого Категория Из КатегорииИсточника Цикл
				НоваяСтрока = СписокКатегорийДанных.Добавить();
				НоваяСтрока.Значение = Категория.Ссылка;
				НоваяСтрока.ПолноеНаименование 
					= РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(Категория.Ссылка);
			КонецЦикла;
		КонецЕсли;
		
		// копирование проекта
		Если ВестиУчетПоПроектам Тогда 
			Объект.Проект = ДокОснование.Проект;
		КонецЕсли;	
	КонецЕсли;
	
	ДанныеФайлаКорректны = Ложь;
	Если Не Объект.Ссылка.Пустая() Тогда
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(Объект.Ссылка);
		ДанныеФайлаКорректны = Истина;
		
		Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(ДанныеФайла.Владелец) Тогда
			КлючЗаписи = Делопроизводство.ПолучитьКлючЗаписиРегистраДанныеДокументов(
				ДанныеФайла.Владелец);
		КонецЕсли;	
		
		Если ДанныеФайла.СтатусРаспознаванияТекста = "Распознано" Тогда
			Распознан = Истина;
		КонецЕсли;
		
		Если ДанныеФайла.СтатусИзвлеченияТекста = "Извлечен" Тогда
			ИзвлеченТекст = Истина;
		КонецЕсли;
		
		Если ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
			Элементы.ЗаполнитьДаннымиВладельца.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ТипВладельца = ТипЗнч(Объект.ВладелецФайла);
	Элементы.Владелец.Заголовок = ТипВладельца;
	
	НовыйФайлЗаписан = Ложь;
	
	// Обработчик подсистемы "Свойства"
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаСвойства");
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
	Основание = ПараметрыФайлОснование;
	//Копирование дополнительных реквизитов основания 
	Если ЗначениеЗаполнено(Основание) 
		И ТипЗнч(Основание) = Тип("СправочникСсылка.Файлы")
		И ЭтаФорма.Свойства_ИспользоватьСвойства Тогда
		
		Для Каждого Реквизит Из Основание.ДополнительныеРеквизиты Цикл
			СтруктураПоиска = Новый Структура("Свойство", Реквизит.Свойство);
			МассивСтрок = ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураПоиска);
			Если МассивСтрок.Количество() > 0 Тогда
				НоваяСтрока = МассивСтрок[0];
				ЭтаФорма[НоваяСтрока.ИмяРеквизитаЗначение] = Реквизит.Значение;
			КонецЕсли;
		КонецЦикла;
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
	Если Параметры.Свойство("КарточкаОткрытаПослеСозданияФайла") Тогда
		Если Параметры.КарточкаОткрытаПослеСозданияФайла Тогда
			Попытка
				ЗаблокироватьДанныеФормыДляРедактирования();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
		ОбновитьПолныйПуть();
		Элементы.СубъектыПерсональныхДанных.ТолькоПросмотр = Ложь;
		Элементы.ФормаПоказатьВСписке.Видимость = Истина;
	Иначе 
		Элементы.ФормаПоказатьВСписке.Видимость = Ложь;
	КонецЕсли;
	ОбновитьПредставлениеВладельца();
	
	Если Не Параметры.ФайлОснование.Пустая() Тогда
		ФайлОснованиеПодписан = Параметры.ФайлОснование.ПодписанЭП;
	КонецЕсли;
	
	Если ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
		ЗаполнитьСписокПодписей();
	КонецЕсли;
	
	Если ЭлектроннаяПодпись.ИспользоватьШифрование() Тогда
		ЗаполнитьСписокШифрования();
	КонецЕсли;
	
	Если НЕ Параметры.ФайлОснование.Пустая() И Объект.ТекущаяВерсия.Пустая() Тогда
		Объект.ШаблонОснованиеДляСоздания = Параметры.ФайлОснование;
	КонецЕсли;
	
	// Чтение категорий данных
	Если ИспользоватьКатегорииДанных Тогда
		ПредопределенныеВсеКатегории = Справочники.КатегорииДанных.ВсеКатегории;
		СписокКатегорийДанныхЗначение = РеквизитФормыВЗначение("СписокКатегорийДанных");
		Элементы.ДекорацияПояснение.Видимость = Ложь;
		Если ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
			РаботаСКатегориямиДанных.ЗагрузитьДанныеОКатегориях(Элементы, Объект, СписокКатегорийДанныхЗначение, ИспользоватьАвтоматическуюКатегоризациюДанных, Параметры); 
		ИначеЕсли ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
			
			Элементы.СписокКатегорийДанныхКонтекстноеМенюОткрытьФормуПодбораКатегорий.Доступность = Ложь;
			
			РаботаСКатегориямиДанных.ЗагрузитьДанныеОКатегориях(Элементы, Объект.ВладелецФайла, СписокКатегорийДанныхЗначение, ИспользоватьАвтоматическуюКатегоризациюДанных, Параметры); 
			Элементы.СписокКатегорийДанныхОткрытьФормуПодбораКатегорий.Видимость = Ложь;
			Элементы.СписокКатегорийДанныхВывестиСписок.Видимость = Ложь;
			Элементы.СписокКатегорийДанныхОткрытьСписокОбъектовСВыбраннымиКатегориями.Видимость = Ложь;
			Элементы.СписокКатегорийДанных.ИзменятьСоставСтрок = Ложь;
			Элементы.ДекорацияПояснение.Видимость = Истина;
			Элементы.ДекорацияПояснение.Заголовок = СтрШаблон(
				НСтр("ru = 'Данный файл прикреплен к документу ""%1"".
				|В списке приведены категории документа.'"),
				Объект.ВладелецФайла.Заголовок);
			Элементы.ГруппаСтатусы.Видимость = Ложь;
		Иначе
			Элементы.Категории.Видимость = Ложь;
		КонецЕсли;
		ЗначениеВРеквизитФормы(СписокКатегорийДанныхЗначение, "СписокКатегорийДанных");
		Если РольДоступна(Метаданные.Роли.ПроверкаКатегорий) Тогда
			Если ИспользоватьАвтоматическуюКатегоризациюДанных Тогда
				АвтоматическаяКатегоризацияВыполнена = РаботаСКатегориямиДанных.ПолучитьФлагВыполненияАвтоматическойКатегоризации(Объект.Ссылка);
				Если АвтоматическаяКатегоризацияВыполнена Тогда
					Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияВыполнена;
				Иначе
					Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияНеВыполнена;
				КонецЕсли;
			Иначе
				Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
			КонецЕсли;
			Если ИспользоватьПроверкуКатегорий Тогда
				КатегорииПроверены = РаботаСКатегориямиДанных.ПолучитьФлагПроверкиКатегорийОбъекта(Объект.Ссылка);
				Если КатегорииПроверены Тогда
					Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииПроверены;
				Иначе
					Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииНеПроверены;
				КонецЕсли;
			Иначе
				Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
			Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
		КонецЕсли;		
	Иначе
		Элементы.Категории.Видимость = Ложь;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") 
		И ЗначениеЗаполнено(Объект.ВладелецФайла)
		И Объект.ВладелецФайла.Метаданные().Реквизиты.Найти("Проект") <> Неопределено Тогда 
		Если Объект.Ссылка.Пустая() Тогда 
			Объект.Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВладелецФайла, "Проект");
		КонецЕсли; 
		Элементы.Проект.ТолькоПросмотр = Истина;
	КонецЕсли;	
	
	СписокРасширенийТекстовыхФайлов = ФайловыеФункции.ПолучитьСписокРасширенийТекстовыхФайлов();
	Если ФайловыеФункцииКлиентСервер.РасширениеФайлаВСписке(СписокРасширенийТекстовыхФайлов, Объект.ТекущаяВерсияРасширение) Тогда
		
		Если ЗначениеЗаполнено(Объект.ТекущаяВерсия) Тогда
			
			КодировкаЗначение = РаботаСФайламиВызовСервера.ПолучитьКодировкуВерсииФайла(Объект.ТекущаяВерсия);
			
			СписокКодировок = РаботаСоСтроками.ПолучитьСписокКодировок();
			ЭлементСписка = СписокКодировок.НайтиПоЗначению(КодировкаЗначение);
			Если ЭлементСписка = Неопределено Тогда
				Кодировка = КодировкаЗначение;
			Иначе
				Кодировка = ЭлементСписка.Представление;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Кодировка) Тогда
			Кодировка = НСтр("ru='По умолчанию'");
		КонецЕсли;
		
	Иначе
		Элементы.Кодировка.Видимость = Ложь;
	КонецЕсли;
	
	ДоступностьРедактированияПоСостояниюБП = Истина;
	ЭтоБизнесПроцесс = Ложь;
	Если ЗначениеЗаполнено(Объект.ВладелецФайла) Тогда
		ЭтоБизнесПроцесс = ОбщегоНазначения.ЭтоБизнесПроцесс(Объект.ВладелецФайла.Метаданные());
	КонецЕсли;
	Если ЭтоБизнесПроцесс Тогда
		СостояниеБП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВладелецФайла, "Состояние");
		Если СостояниеБП <> Неопределено
			И СостояниеБП = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
			ДоступностьРедактированияПоСостояниюБП = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов")
	   И ДелопроизводствоКлиентСервер.ЭтоДокумент(Объект.ВладелецФайла) Тогда 
		Элементы.ЯвляетсяОригиналом.Видимость = Истина;
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ЯвляетсяОригиналом = Делопроизводство.ФайлЯвляетсяОригиналом(Объект.Ссылка);
		КонецЕсли;
		НачальныйЯвляетсяОригиналом = ЯвляетсяОригиналом;
		
		// доступность переключателя Это оригинал
		Если Константы.ОграничиватьДоступностьПолейПоСостоянию.Получить()
			И Не РольДоступна("ПолныеПрава") Тогда 
			ДоступныеПоля = Новый Массив; 
			НедоступныеПоля = Новый Массив; 
		
			Делопроизводство.ПолучитьДоступныеИНедоступныеПоСостояниюПоля(
				Объект.ВладелецФайла.ПолучитьОбъект(),
				ДоступныеПоля, НедоступныеПоля);
			
			ДоступностьПоляОригинал = (ДоступныеПоля.Найти("ДобавлениеОригиналов") <> Неопределено) 
				И (ДоступныеПоля.Найти("ДобавлениеФайлов") <> Неопределено);
				
			Элементы.ЯвляетсяОригиналом.ТолькоПросмотр = Не ДоступностьПоляОригинал;
		КонецЕсли;
	Иначе
		Элементы.ЯвляетсяОригиналом.Видимость = Ложь;
	КонецЕсли;
	
	// Параметры оповещения
	Параметры.Свойство("ПараметрыОповещения", ПараметрыОповещения);
	
	// Учет трудозатрат
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияИспользоватьУчетВремени,
		Объект.Ссылка,
		ВидыРабот,
		СпособУказанияВремени,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж,
		ЭтаФорма.Элементы.УказатьТрудозатраты);
			
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		РазрешеноРедактирование = Истина;
	КонецЕсли;	
	
	КешИнформации = РегистрыСведений.КешИнформацииОбОбъектах.СоздатьМенеджерЗаписи();
	КешИнформации.Объект = Объект.Ссылка;
	КешИнформации.Прочитать();
	
	// Картинка Взаимодействие
	Элементы.КартинкаВзаимодействие.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи");
	Если КешИнформации.ЕстьЗадачи Тогда 
		СтатусВзаимодействия = 1;
		Элементы.КартинкаВзаимодействие.Подсказка = НСтр("ru = 'По файлу выполняются задачи'");
	Иначе	
		СтатусВзаимодействия = 0;
		Элементы.КартинкаВзаимодействие.Подсказка = НСтр("ru = 'По файлу нет выполняющихся задач'");
	КонецЕсли;
	
	Элементы.КартинкаЭП.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи");
	ОбзорДокумента.ВывестиКартинкуЭП(ЭтаФорма);
	
	// Картинка Категории
	Элементы.КартинкаКатегории.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	Если СписокКатегорийДанных.Количество() > 0 Тогда 
		СтатусКатегории = 1;
		Элементы.КартинкаКатегории.Подсказка = НСтр("ru = 'Есть категории'");
	Иначе
		СтатусКатегории = 0;
		Элементы.КартинкаКатегории.Подсказка = НСтр("ru = 'Нет категорий'");
	КонецЕсли;	
	
	// Картинка контроль
	ОбзорДокумента.ВывестиКартинкуКонтроля(ЭтаФорма);
	
	// Картинка форум
	ОбзорДокумента.ВывестиКартинкуФорума(ЭтаФорма);
	
	АвтовизуализацияЭП = ПолучитьФункциональнуюОпцию("АвтовизуализацияЭП");
	Элементы.ФормаСоздатьШтампПодписи.Видимость 
		= АвтовизуализацияЭП И Объект.ПодписанЭП И ЗначениеЗаполнено(Объект.Ссылка)
			И ДелопроизводствоКлиентСервер.ЭтоДокумент(Объект.ВладелецФайла);
			
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ШаблонИмени = РаботаСФайламиВызовСервера.ШаблонИмениПоВладельцу(Объект.ВладелецФайла, Объект.Ссылка);
		Если ЗначениеЗаполнено(ШаблонИмени) Тогда
			
			ОригинальноеИмя = РегистрыСведений.СведенияОФайлахДокументооборот.ПолучитьПризнак(
				ДанныеФайла.Ссылка, "ОригинальноеИмя");
			НельзяМенятьИмяФайла = ЗначениеЗаполнено(ОригинальноеИмя);
			ИмяФайлаПриОткрытии = Объект.ПолноеНаименование;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Объект.Ссылка.Пустая()
		И (ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Объект.ВладелецФайла)
		Или ДелопроизводствоКлиентСервер.ЭтоМероприятие(Объект.ВладелецФайла)
		Или ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Объект.ВладелецФайла)) Тогда
		
		ИспользоватьПредпросмотрФайловОбщая = ПолучитьФункциональнуюОпцию("ИспользоватьПредпросмотрФайлов");
		ИспользоватьПредпросмотрФайловЛичная =
			ХранилищеОбщихНастроек.Загрузить(
				"НастройкиРаботыСДокументами",
				"ИспользоватьПредпросмотрФайлов");
		Если ИспользоватьПредпросмотрФайловЛичная = Неопределено Тогда
			ИспользоватьПредпросмотрФайловЛичная = Истина;
		КонецЕсли;
		ИспользоватьПредпросмотрФайлов =
			ИспользоватьПредпросмотрФайловОбщая
			И ИспользоватьПредпросмотрФайловЛичная;
		
		ИдентификаторКлиента = "";
		Если Параметры.Свойство("ИдентификаторКлиента") Тогда
			 
			ИдентификаторКлиента = Параметры.ИдентификаторКлиента;
			
			ПредпросмотрОфисныхФайлов =
				ХранилищеОбщихНастроек.Загрузить(
				"НастройкиРаботыСДокументами/ПредпросмотрОфисныхФайлов",
				ИдентификаторКлиента);
			
			Если Не ЗначениеЗаполнено(ПредпросмотрОфисныхФайлов) Тогда
				ПредпросмотрОфисныхФайлов = Перечисления.ПредпросмотрОфисныхФайлов.OpenOfficeMSOffice;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГруппаКолонкаПревью.Видимость = ИспользоватьПредпросмотрФайлов;
	
	ОбновитьЗадачиПоПриложению();
	
	Если ЗначениеЗаполнено(Объект.Ссылка)  Тогда
		ПредпросмотрЕстьВБазе = ОбзорФайловВызовСервера.ПредпросмотрЕстьВБазе(
			Объект.Ссылка, Объект.ТекущаяВерсия);
	КонецЕсли;	
	
	ПоказыватьПредпросмотр = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиОткрытияФайлов", "ПоказыватьПредпросмотр");
		
	Элементы.ФормаПоказыватьПредпросмотр.Пометка = ПоказыватьПредпросмотр;
	Элементы.ФормаПоказыватьПредпросмотр.Видимость = ИспользоватьПредпросмотрФайлов;
	
	Если Не Объект.Ссылка.Пустая() 
		И ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(ДанныеФайла.Владелец) Тогда
		
		// команда видна только если есть файл визуализации
		
		ФайлВизуализация = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьСлужебныйФайл(
			ДанныеФайла.Владелец, Объект.Ссылка, Перечисления.ОтношенияСлужебныхФайлов.ВизуализацияЭП);
			
		Элементы.ФормаПоказатьОригинальныйФайл.Видимость = ЗначениеЗаполнено(ФайлВизуализация);
		
		Элементы.ЗаполнитьДаннымиВладельца.Видимость = Истина;
		
	Иначе
		
		Элементы.ФормаПоказатьОригинальныйФайл.Видимость = Ложь;
		
		Элементы.ЗаполнитьДаннымиВладельца.Видимость = Ложь;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) И Не ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ() Тогда
		ПравоНаИзменение = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(Объект.Ссылка).Изменение;
		
		Если Не ПравоНаИзменение Тогда
			РазрешеноРедактирование = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ПоказыватьPdfСредствами1С = РаботаСФайламиСлужебныйПовтИсп.ПоказыватьPdfСредствами1С();
	
	Если ТипЗнч(Объект.ВладелецФайла) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда 
		ТолькоПросмотр = Истина; 
		РазрешеноРедактирование = Ложь;
	КонецЕсли;
	
	ЭтоВебКлиент = ОбщегоНазначения.ЭтоВебКлиент();
	ЭтоТонкийКлиент = ОбщегоНазначенияДокументооборот.ЭтоТонкийКлиент();
	
	// Pdf
	Если ЭтоТонкийКлиент Или (ЭтоВебКлиент И ПолеPDFРаботаетВВебКлиенте) Тогда
		Если ПоказыватьPdfСредствами1С Тогда
			ВывестиPDFДокументНаСервере();
		КонецЕсли;
	КонецЕсли;
	//Конец Pdf
	
	СоздатьКнопкиПорционногоПредпросмотра();
	
	ВсегоПорцийПредпросмотра = 1;
	НомерПорции = 1;
	ОбновитьКнопкиДинамическогоСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда
		Возврат;
	КонецЕсли;
	
	Если Найти(ДанныеСобытия.Href, "OpenForEdit") Тогда
		
		ТекущийФайл = Объект.Ссылка;
		
		Если Не РедактируетТекущийПользователь 
			Или ДанныеСобытия.Anchor = Неопределено Тогда
		
			Возврат;
		
		КонецЕсли;
		
		КомандыРаботыСФайламиКлиент.Редактировать(ТекущийФайл);
		ОповеститьОбИзменении(КлючЗаписи);
		
	ИначеЕсли Найти(ДанныеСобытия.Href, "OpenForView") Тогда
		
		ТекущийФайл = Объект.Ссылка;
		
		Если ДанныеСобытия.Anchor = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		РаботаСФайламиКлиент.ОткрытьФайлДокумента(ТекущийФайл, ЭтаФорма);
		
		Возврат;
		
	ИначеЕсли Найти(ДанныеСобытия.Href, "CreatePreview") Тогда
		
		ТекущийФайл = Объект.Ссылка;
		
		ДокументPDF = Неопределено;
		
		ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();
		ПараметрыHTMLПредставление.Расширение = Объект.ТекущаяВерсияРасширение;
		ПараметрыHTMLПредставление.Размер = Объект.ТекущаяВерсияРазмер / 1024;
		ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
		ПараметрыHTMLПредставление.ПредпросмотрОфисныхФайлов = ПредпросмотрОфисныхФайлов; 
		ПараметрыHTMLПредставление.ИгнорироватьМаксРазмер = Истина;
		
		ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
			ТекущийФайл,
			ПараметрыHTMLПредставление,
			ДокументPDF);
		
		ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ПредставлениеHTML, ТаймлистАвтопротоколHTML,
			РаспознанныйТекстHTML);
		
		Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьЭлементовФормы();
	
	НаименованиеДоЗаписи = Объект.Наименование;
	
	Если Не Параметры.ФайлОснование.Пустая() И ФайлОснованиеПодписан Тогда
		
		ПодключитьОбработчикОжидания("ПриОткрытииКлиент", 0.2, Истина);
		
	КонецЕсли;
	
	УстановитьДоступностьКомандСпискаЭП();
	УстановитьДоступностьКомандСпискаШифрования();
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиентПодMacOS() Тогда
		Элементы.ФормаЭПИШифрование.Видимость = Ложь;
		Элементы.ЭлектронныеПодписи.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		Элементы.СертификатыШифрования.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	КонецЕсли;
	
	Оповестить("ОбновитьСписокПоследних");
	
	Если ОткрытьЗакладкуЗадачи Тогда
		ПодключитьОбработчикОжидания("ПриОткрытииКлиентОткрытьЗадачи", 0.2, Истина);
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая()
		И ТипЗнч(ВладелецФормы) = Тип("ФормаКлиентскогоПриложения")
		И ВладелецФормы.ИмяФормы = "Справочник.Проекты.Форма.ФайлыПоПроекту" Тогда
		Объект.Проект = ВладелецФормы.Параметры.Проект;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИспользоватьПредпросмотрФайлов И ПоказыватьПредпросмотр Тогда
		
		Если ОбзорФайловКлиент.ЭтоФайлСДолгойОбработкой(Объект.ТекущаяВерсияРасширение)
			И Не ПредпросмотрЕстьВБазе Тогда
			ПредставлениеHTML = ОбзорФайловКлиент.HTMLПредставлениеСДолгойОбработкой();
			Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("ОбновитьПревьюФайла", 0.2, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ЗаполнитьПараметрыКарточки(ТекущийОбъект);
	
	ЗапретитьРедактироватьФайлы = Ложь;
	РазрешеноРедактирование = Истина;
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(ТекущийОбъект.ВладелецФайла)
		И ЗначениеЗаполнено(ТекущийОбъект.ШаблонОснованиеДляСоздания)
		И Не РольДоступна("ПолныеПрава") Тогда 
		
		СозданПоШаблонуДокумента 
			= РегистрыСведений.ФайлыСозданныеПоШаблону.ПолучитьФайлСозданПоШаблону(ТекущийОбъект.Ссылка);
			
		Если СозданПоШаблонуДокумента Тогда
			
			ЗапретитьРедактироватьФайлы = Делопроизводство.ПолучитьСвойствоШаблонаЗапретитьРедактироватьФайлы(
				ТекущийОбъект.ВладелецФайла);
				
			Если ЗапретитьРедактироватьФайлы Тогда
				
				РазрешеноРедактирование = Ложь;
				ТолькоПросмотр = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если Не Делопроизводство.ПолеДокументаДоступноПоСостоянию("РедактированиеФайлов", ТекущийОбъект.ВладелецФайла) Тогда
		
		РазрешеноРедактирование = Ложь;
		ЗапретитьРедактироватьФайлы = Истина;
		
	КонецЕсли;
	
	ХранитьВерсииНачальноеЗначение = ТекущийОбъект.ХранитьВерсии;
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(ТекущийОбъект.ВладелецФайла) Тогда
		
		МассивРоли = РегистрыСведений.РолиФайловДокументов.ПолучитьРолиФайла(ТекущийОбъект.Ссылка);
		РолиФайла = Делопроизводство.СтрокаИдРолей(МассивРоли);
		
		Элементы.СтрокаРолей.Видимость = (МассивРоли.Количество() <> 0);
		
	КонецЕсли;
	
	ПользовательИЕгоСотрудники = СотрудникиВызовСервера.ПользовательИЕгоСотрудники(Пользователи.ТекущийПользователь());
	РедактируетТекущийПользователь = (ПользовательИЕгоСотрудники.Найти(Объект.Редактирует) <> Неопределено);
	
	ОбщегоНазначенияДокументооборот.ПоказатьНадписьПометкиУдаления(
		ЭтотОбъект, ТекущийОбъект.ПометкаУдаления);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПередЗакрытием(
		Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированность) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не БылЗаданВопросФайлЗанятДляРедактирования И Не БылЗаданВопросОткрытьДляРедактирования Тогда
		
		Если ФайлРедактировался И ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ТекущийПользователь = Объект.Редактирует Тогда 
			
			Обработчик = Новый ОписаниеОповещения("ПослеВопросаФайлЗанятДляРедактирования", ЭтотОбъект);
			ПоказатьВопрос(Обработчик, НСтр("ru = 'Файл занят вами для редактирования. Закрыть карточку?'"), РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
			Отказ = Истина;
			БылЗаданВопросФайлЗанятДляРедактирования = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	Если Не БылЗаданВопросОткрытьДляРедактирования Тогда
		
		Если РежимСоздания = "ИзШаблона" И НЕ Объект.ПодписанЭП И НовыйФайл
			И НовыйФайлЗаписан И (Не ФайлРедактировался) Тогда
			
			СтрокаВопроса = СтрШаблон(
			  НСтр("ru = 'Открыть файл ""%1"" для редактирования?'"),
			  СокрЛП(Объект.ПолноеНаименование) );
		  
			Обработчик = Новый ОписаниеОповещения("ПослеВопросаОткрытьДляРедактирования", ЭтотОбъект);			  
		  	ПоказатьВопрос(Обработчик, СтрокаВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);
		   
		  	Отказ = Истина;
		  	БылЗаданВопросОткрытьДляРедактирования = Истина;
		  	Возврат;
				
		КонецЕсли;
		  
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не Отказ Тогда
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ФайлыВыполнениеКомандыЗаписать");
	КонецЕсли;
	
	Объект.Наименование = Объект.ПолноеНаименование;
	
	ПараметрыЗаписи.Вставить("ЭтоНовый", Объект.Ссылка.Пустая());
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(Объект.СубъектыПерсональныхДанных, "ФизическоеЛицо");
	
	Если НельзяМенятьИмяФайла
		И Объект.ПолноеНаименование <> ИмяФайлаПриОткрытии Тогда
		
		Отказ = Истина;
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПослеОтветаНаВопросНельзяМенятьИмяФайла",
			ЭтотОбъект);
		
		ТекстВопроса = НСтр("ru = 'Имя этого файла формируется автоматически по шаблону. 
		|Ручное изменение имени отключит эту автоматику. 
		|Изменить имя файла?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов")
	   И ДелопроизводствоКлиентСервер.ЭтоДокумент(Объект.ВладелецФайла) Тогда 
		Делопроизводство.СохранитьСведенияОбОригиналеФайла(ТекущийОбъект.Ссылка, 
			ТекущийОбъект.ВладелецФайла, 
			ЯвляетсяОригиналом);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ПараметрыФайлОснование) И ЗначениеЗаполнено(РольФайла) Тогда
		РегистрыСведений.РолиФайловДокументов.ЗаписатьРольФайла(ТекущийОбъект.Ссылка, РольФайла);
	КонецЕсли;		
		
	Если ОчиститьАвтоИмяФайла Тогда
		// очистим поле
		РегистрыСведений.СведенияОФайлахДокументооборот.УстановитьПризнак(
			Объект.Ссылка, "ОригинальноеИмя", "");
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПротоколированиеРаботыСотрудников.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(Объект.Ссылка);
	
	Если НаименованиеДоЗаписи <> ТекущийОбъект.Наименование Тогда
		Если ТекущийОбъект.ТекущаяВерсия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			
			РаботаСФайламиВызовСервера.ПереименоватьФайлВерсииНаДиске(ТекущийОбъект.ТекущаяВерсия, 
				НаименованиеДоЗаписи, ТекущийОбъект.Наименование, УникальныйИдентификатор);
				
		КонецЕсли;
	КонецЕсли;
		
	Если НовыйФайл Тогда 
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(Объект.Ссылка);
		ДанныеФайлаКорректны = Истина;
	КонецЕсли;

	Если НЕ Параметры.ФайлОснование.Пустая() И Объект.ТекущаяВерсия.Пустая() Тогда
		СоздатьКопиюВерсии(Объект.Ссылка, Параметры.ФайлОснование, КопироватьПодписиЭП, Истина);
		Если ЗначениеЗаполнено(АдресДвоичныхДанныхЗаполненногоФайлаВоВременномХранилище) Тогда
			АвтозаполнениеШаблоновФайловВызовСервера.ОбновитьВерсиюИзДвоичныхДанных(ПолучитьИзВременногоХранилища(АдресДвоичныхДанныхЗаполненногоФайлаВоВременномХранилище), 
					ТекущийОбъект.Ссылка, 
					"Автозаполнение полей файла",
					УникальныйИдентификатор);
			АвтозаполнениеВыполнялось = Истина;
			Прочитать();
		КонецЕсли;
		Модифированность = Истина;
	КонецЕсли;
	
	//Считываем настройки автозаполнения для дальнейшего использования
	ИспользоватьАвтозаполнениеФайлов = ПолучитьФункциональнуюОпцию("ИспользоватьАвтозаполнениеФайлов");
	Если ИспользоватьАвтозаполнениеФайлов И НовыйФайл Тогда
		НастройкиАвтозаполнения = АвтозаполнениеШаблоновФайловВызовСервера.ПолучитьНастройкиАвтозаполненияШаблоновФайлов(Объект.Ссылка, Объект.ВладелецФайла, Истина);
	КонецЕсли;
	
	Если ИспользоватьКатегорииДанных 
		И ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
		РаботаСКатегориямиДанных.ЗаписатьСписокКатегорийУОбъекта(СписокКатегорийДанных, Объект.Ссылка);
		Если ИспользоватьАвтоматическуюКатегоризациюДанных Тогда
			АвтоматическаяКатегоризацияВыполнена = РаботаСКатегориямиДанных.ПолучитьФлагВыполненияАвтоматическойКатегоризации(Объект.Ссылка);
			Если АвтоматическаяКатегоризацияВыполнена Тогда
				Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияВыполнена;
			Иначе
				Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияНеВыполнена;
			КонецЕсли;
		Иначе
			Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
		КонецЕсли;
		Если ИспользоватьПроверкуКатегорий Тогда
			КатегорииПроверены = РаботаСКатегориямиДанных.ПолучитьФлагПроверкиКатегорийОбъекта(Объект.Ссылка);
			Если КатегорииПроверены Тогда
				Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииПроверены;
			Иначе
				Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииНеПроверены;
			КонецЕсли;
		Иначе
			Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьШК Тогда
		
		ДанныеОШтрихкодеФайлаСервер = ШтрихкодированиеСервер.ПолучитьДанныеДляВставкиШтрихкодаВОбъект(Объект.Ссылка);
		Если ДанныеОШтрихкодеФайлаСервер <> Неопределено
			И ДанныеОШтрихкодеФайлаСервер.Свойство("ДвоичныеДанныеФайла")
			И ИспользоватьШК Тогда
			Попытка
				ВставкаШКВыполнялась = ШтрихкодированиеКлиентСервер.ВставитьШтрихкодВместоТэга(Объект.Ссылка,
					"ВставитьИзображениеШтрихкода", 
					Ложь, 
					ДанныеОШтрихкодеФайлаСервер.ДвоичныеДанныеИзображения, 
					ДанныеОШтрихкодеФайлаСервер.ДвоичныеДанныеФайла,
					ДанныеОШтрихкодеФайлаСервер.Расширение,
					ДанныеОШтрихкодеФайлаСервер.ФайлРедактируется,
					Ложь,
					ДанныеОШтрихкодеФайлаСервер.НастройкиШтрихкода.ВысотаШК,
					УникальныйИдентификатор);
				Прочитать();	
			Исключение
				Инфо = ИнформацияОбОшибке();
				Если Инфо.Описание = "ТэгНеНайден" Тогда
					ВставкаШКВыполнялась = Истина;
				КонецЕсли;
			КонецПопытки;	
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина Тогда
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина
		И ЗначениеЗаполнено(ПараметрыФайлОснование) Тогда
		РаботаСШаблонамиДокументовСервер.ЗаписатьИспользованиеШаблона(ПараметрыФайлОснование);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ПараметрыФайлОснование) Тогда
		Элементы.ИконкаФайлаБольшая.Видимость = Истина;
		Элементы.ИконкаФайлаБольшаяНаОсновании.Видимость = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	#Если Не Вебклиент И Не МобильныйКлиент Тогда
		Если НовыйФайл
			И ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.ДокументыПредприятия")
			И НастройкиАвтозаполнения <> Неопределено
			И НастройкиАвтозаполнения.МассивЗамен <> Неопределено 
			И НастройкиАвтозаполнения.МассивЗамен.Количество() > 0
			И НЕ АвтозаполнениеВыполнялось Тогда
			
			ДанныеВозврата = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьПоляФайлаДаннымиВладельца(
				Истина,
				Объект.Ссылка,
				Истина,
				УникальныйИдентификатор,
				Объект.ВладелецФайла);
				
			Если ДанныеВозврата.Свойство("ДвоичныеДанныеЗаполненногоФайла") Тогда
				ДанныеОШтрихкодеФайла = Неопределено;
				ДвоичныеДанныеЗаполненногоФайла = ДанныеВозврата.ДвоичныеДанныеЗаполненногоФайла;
				Если НастройкиАвтозаполнения.Свойство("ДанныеОШтрихкоде", ДанныеОШтрихкодеФайла) И ИспользоватьШК Тогда
					ДвоичныеДанныеЗаполненногоФайлаСоШтрихкодом = ШтрихкодированиеКлиентСервер.ВставитьШтрихкодВместоТэга(
						Объект.Ссылка, 
						"ВставитьИзображениеШтрихкода",
						Истина,
						НастройкиАвтозаполнения.ДанныеОШтрихкоде.ДвоичныеДанныеИзображения,
						ДвоичныеДанныеЗаполненногоФайла,
						НастройкиАвтозаполнения.РасширениеФайла,
						Ложь,
						Ложь,
						НастройкиАвтозаполнения.ДанныеОШтрихкоде.НастройкиШтрихкода.ВысотаШК,
						УникальныйИдентификатор,
						Истина);
				КонецЕсли;
			КонецЕсли;
			Прочитать();
			Состояние();
		КонецЕсли;
	#КонецЕсли
	
	Если ПараметрыЗаписи.ЭтоНовый Тогда
		Если ЗначениеЗаполнено(ПараметрыОповещения) И ПараметрыОповещения.ТипСобытия = "Создание" Тогда
			ПараметрОповещения = Новый Структура;
			ПараметрОповещения.Вставить("Ссылка", Объект.Ссылка);
			ПараметрОповещения.Вставить("ПараметрСобытия", ПараметрыОповещения.ПараметрСобытия);
			Оповестить(ПараметрыОповещения.ИмяСобытия, ПараметрОповещения);
		КонецЕсли;
	КонецЕсли;
	
	Если НовыйФайл И Не НовыйФайлЗаписан Тогда 
		
		НовыйФайлЗаписан = Истина;
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Владелец", Объект.ВладелецФайла);
		ПараметрыОповещения.Вставить("Файл", Объект.Ссылка);
		ПараметрыОповещения.Вставить("ИдентификаторРодительскойФормы", Неопределено);
		ПараметрыОповещения.Вставить("Событие", "СозданФайл");
		Если ТипЗнч(ЭтаФорма.ВладелецФормы) = Тип("ФормаКлиентскогоПриложения") Тогда 
			ПараметрыОповещения.ИдентификаторРодительскойФормы = ЭтаФорма.ВладелецФормы.УникальныйИдентификатор;
		КонецЕсли;
		
		Оповестить("Запись_Файл", ПараметрыОповещения, Объект.Ссылка);
	Иначе
		Если НаименованиеДоЗаписи <> Объект.Наименование Тогда
			// в кеше обновить файл
			РаботаСФайламиКлиент.ОбновитьИнформациюВРабочемКаталоге(Объект.ТекущаяВерсия, Объект.Наименование);
			НаименованиеДоЗаписи = Объект.Наименование;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Файл", Объект.Ссылка);
	ПараметрыОповещения.Вставить("Владелец", Объект.ВладелецФайла);
	
	Если НачальныйЯвляетсяОригиналом <> ЯвляетсяОригиналом Тогда 
		ПараметрыОповещения.Вставить("ИзменилсяПризнакОригинала", Истина);
		НачальныйЯвляетсяОригиналом = ЯвляетсяОригиналом;
	КонецЕсли;	
	
	Оповестить("ФайлИзменен", ПараметрыОповещения);
	
	Если ЗначениеЗаполнено(ПараметрыФайлОснование) Тогда
		ПараметрыПриложения["СтандартныеПодсистемы.ЕстьИспользованныеШаблоныФайлов"] = Истина;
	КонецЕсли;	
	
	УстановитьДоступностьЭлементовФормы();
	УстановитьДоступностьКомандСпискаЭП();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

	Если Объект.ХранитьВерсии <> ХранитьВерсииНачальноеЗначение И Не Объект.ХранитьВерсии
		И ДелопроизводствоКлиентСервер.ЭтоДокумент(Объект.ВладелецФайла) Тогда
		
		ТекстСообщения = НСтр("ru = 'Запрещено снимать флаг ""Хранить версии"" для файлов документа.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.ХранитьВерсии",,Отказ);
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыПодписей

&НаКлиенте
Процедура ТаблицаПодписейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСЭПКлиент.ОткрытьПодпись(Элементы.ЭлектронныеПодписи.ТекущиеДанные, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодписейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодписейПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	РаботаСЭПКлиент.ОткрытьПодпись(Элементы.ЭлектронныеПодписи.ТекущиеДанные, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодписейПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	УдалитьПодписиЗапуск();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы 

&НаКлиенте
Процедура ПоказыватьПредпросмотр(Команда)
	
	ПоказыватьПредпросмотр = Не ПоказыватьПредпросмотр;
	
	Элементы.ФормаПоказыватьПредпросмотр.Пометка = ПоказыватьПредпросмотр;
	
	Если ПоказыватьПредпросмотр Тогда
		ПодключитьОбработчикОжидания("ОбновитьПревьюФайла", 0.2, Истина);
	Иначе
		ПредставлениеHTML = "<html><body></body></html>";
		ТаймлистАвтопротоколHTML = "<html><body></body></html>";
		РаспознанныйТекстHTML = "<html><body></body></html>";
		Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
		УстановитьВидимостьСтраницПредпросмотра();
	КонецЕсли;
	
	СохранитьНастройкуПредпросмотра(ПоказыватьПредпросмотр);
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОчиститьСообщения();
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;           
	
	РазблокироватьДанныеФормыДляРедактирования();
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", Неопределено);
	ПараметрыВыполнения.Вставить("ОбъектСсылка", Объект.Ссылка);
	ПараметрыВыполнения.Вставить("ПоказыватьОповещения", Истина);
	Обработчик = Новый ОписаниеОповещения("РедактироватьСОповещениемЗавершение", 
		ЭтотОбъект, ПараметрыВыполнения);
	РаботаСФайламиКлиент.РедактироватьФайлПоСсылке(Обработчик, Объект.Ссылка, 
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Редактирует) Тогда
		
		СтрокаСообщения = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Нельзя закончить редактирование файла '"),
			Новый ФорматированнаяСтрока(Строка(Объект.Ссылка), Новый Шрифт(,,Истина)),
			НСтр("ru=', т.к. он не занят для редактирования.'") );	
			
		ПоказатьПредупреждение(,СтрокаСообщения);	
		
		Возврат;
		
	КонецЕсли;	
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;	
	
	ПолучитьДанныеФайла();
	
	Обработчик = Новый ОписаниеОповещения("ПрочитатьИУстановитьДоступностьЭлементовФормы", ЭтотОбъект);
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Обработчик, ДанныеФайла.Ссылка, УникальныйИдентификатор);
	ПараметрыОбновленияФайла.ХранитьВерсии = ДанныеФайла.ХранитьВерсии;
	ПараметрыОбновленияФайла.РедактируетТекущийПользователь = ДанныеФайла.РедактируетТекущийПользователь;
	ПараметрыОбновленияФайла.Редактирует = ДанныеФайла.Редактирует;
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура Занять(Команда)
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;	
	
	Обработчик = Новый ОписаниеОповещения("ПрочитатьИУстановитьДоступностьЭлементовФормы", ЭтотОбъект);
	
	РаботаСФайламиКлиент.ЗанятьСОповещением(Обработчик, Объект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРедактирование(Команда)
	
	ОтменитьРедактированиеВыполнить();
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	СохранитьИзмененияВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогФайла(Команда)
	
	ОткрытьКаталогФайлаВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(Объект.Ссылка, Неопределено, УникальныйИдентификатор);
	КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	ОбновитьИзФайлаНаДискеВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура Распознать(Команда)
	
	РаспознатьВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПодписатьПослеОтветаНаВопросСохранения",
			ЭтотОбъект);
		
		ТекстВопроса = ТекстВопросаНезаписанныхДанных(НСтр("ru = 'Подписать'"));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
		
	Иначе
		
		Если Модифицированность Тогда
			Если Не Записать() Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПодписатьПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭПИзФайла(Команда)
	
	РаботаСФайламиСлужебныйКлиент.ДобавитьПодписьИзФайла(
		Объект.Ссылка,
		УникальныйИдентификатор,
		Новый ОписаниеОповещения("ДобавитьЭПИзФайлаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВместеСЭП(Команда)
	
	РаботаСФайламиСлужебныйКлиент.СохранитьФайлВместеСПодписью(Объект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Зашифровать(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗашифроватьПослеОтветаНаВопросЗаписать",
			ЭтотОбъект);
			
		ТекстВопроса = ТекстВопросаНезаписанныхДанных(НСтр("ru = 'Зашифровать'"));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
		
	КонецЕсли;
	
	ЗашифроватьПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(Объект.Ссылка);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", Объект.Ссылка);
	Обработчик = Новый ОписаниеОповещения("РасшифроватьПослеРасшифровкиНаКлиенте", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиСлужебныйКлиент.Расшифровать(Обработчик, ДанныеФайла.Ссылка, УникальныйИдентификатор, ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодпись(Команда)
	
	РаботаСЭПКлиент.ОткрытьПодпись(Элементы.ЭлектронныеПодписи.ТекущиеДанные, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЭП(Команда)
	
	Если Элементы.ЭлектронныеПодписи.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПроверитьЭПЗавершение", ЭтотОбъект);
	
	ПараметрыПроверки = РаботаСЭПКлиент.НовыеПараметрыПроверкиПодписей();
	ПараметрыПроверки.ИмяТаблицыЭП = "ЭлектронныеПодписи";
	ПараметрыПроверки.ВыделенныеСтроки = Элементы.ЭлектронныеПодписи.ВыделенныеСтроки;
	ПараметрыПроверки.ПерезаполнитьВыделенныеСтроки = Истина;
	
	РаботаСЭПКлиент.ПроверитьПодписи(ЭтотОбъект, ПараметрыПроверки, ОбработчикЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВсе(Команда)
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПроверитьЭПЗавершение", ЭтотОбъект);
	
	ПараметрыПроверки = РаботаСЭПКлиент.НовыеПараметрыПроверкиПодписей();
	ПараметрыПроверки.ИмяТаблицыЭП = "ЭлектронныеПодписи";
	ПараметрыПроверки.ВыделенныеСтроки = Неопределено;
	ПараметрыПроверки.ПерезаполнитьВыделенныеСтроки = Истина;
	
	РаботаСЭПКлиент.ПроверитьПодписи(ЭтотОбъект, ПараметрыПроверки, ОбработчикЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПодпись(Команда)
	
	УдалитьПодписиЗапуск();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТекстовыйОбраз(Команда)
	
	Если Объект.Зашифрован Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя открыть текстовый образ зашифрованного файла.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбъектСсылка", Объект.Ссылка);
	ПараметрыФормы.Вставить("ИзКарточкиФайла", Истина);
	ПараметрыФормы.Вставить("ИзвлеченТекст", ИзвлеченТекст);
	ПараметрыФормы.Вставить("Распознан", Распознан);
	
	ОткрытьФорму("Справочник.Файлы.Форма.ФормаТекстовогоОбраза", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСертификатШифрования(Команда)
	
	ОткрытьСертификатШифрованияВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокПодписей(Команда)
	
	ЗаполнитьСписокПодписей();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораКатегорий(Команда)
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуПодбораКатегорийПродолжение",
		ЭтотОбъект,
		Новый Структура);

	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаКатегорий(
		СписокКатегорийДанных, ОписаниеОповещения); 
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьШКВФайл(Команда)
	
	ДанныеОШтрихкодеФайла = ШтрихкодированиеСервер.ПолучитьДанныеДляВставкиШтрихкодаВОбъект(Объект.Ссылка, Ложь);
	ШтрихкодированиеКлиент.СохранитьИзображениеШК(ДанныеОШтрихкодеФайла.ДвоичныеДанныеИзображения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДаннымиВладельца(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	Иначе
		Если Модифицированность Тогда
			Если Не Записать() Тогда 
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеВыполнения = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьПоляФайлаДаннымиВладельца(Истина,
		Объект.Ссылка, 
		Истина, 
		УникальныйИдентификатор);
	Если ДанныеВыполнения.Результат Тогда
		Прочитать();
		Текст = НСтр("ru = 'Поля в файле обновлены данными владельца.'");
	Иначе
		ВызватьИсключение(ДанныеВыполнения.Описание);
	КонецЕсли;
	ПоказатьПредупреждение(, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура Подписаться(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектПодписки", Объект.Ссылка);
		ОткрытьФорму("ОбщаяФорма.ПодпискаНаУведомленияПоОбъекту", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокОбъектовСВыбраннымиКатегориями(Команда)
	
	Если СписокКатегорийДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	МассивКатегорий = Новый Массив();
	УникальныйИдентификаторСпискаКатегорий = "";
	Для Каждого ВыбраннаяКатегория Из СписокКатегорийДанных Цикл
		МассивКатегорий.Добавить(ВыбраннаяКатегория.Значение);
		УникальныйИдентификаторСпискаКатегорий = УникальныйИдентификаторСпискаКатегорий + "," + ВыбраннаяКатегория.ПолноеНаименование;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокВыбранныхКатегорий", МассивКатегорий);
	
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаСписка", ПараметрыФормы, Элементы.СписокКатегорийДанных, УникальныйИдентификаторСпискаКатегорий);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	
	ПараметрыОповещения = Неопределено;
	НуженДиалог = УчетВремениКлиент.НуженДиалогДляХронометража(ВключенХронометраж, 
		ДатаНачалаХронометража, ВидыРабот);
	
	Если НуженДиалог = Ложь Тогда
		
		ПереключитьХронометражСервер(ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
	
	Иначе
		ДлительностьРаботы = УчетВремениКлиент.ПолучитьДлительностьРаботы(ДатаНачалаХронометража);
		
		ОписаниеРаботы = СтрШаблон(
			НСтр("ru = 'Работа с файлом ""%1""'"),
			Объект.Наименование);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДатаОтчета", ТекущаяДата());
		ПараметрыФормы.Вставить("ВидыРабот", ВидыРабот);
		ПараметрыФормы.Вставить("ОписаниеРаботы", ОписаниеРаботы);
		ПараметрыФормы.Вставить("ДлительностьРаботы", ДлительностьРаботы);
		ПараметрыФормы.Вставить("НачалоРаботы", ДатаНачалаХронометража);
		ПараметрыФормы.Вставить("Объект", Объект.Ссылка);
		ПараметрыФормы.Вставить("СпособУказанияВремени", СпособУказанияВремени);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПереключитьХронометражПродолжение",
			ЭтотОбъект);
		
		ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаДобавленияРаботы", ПараметрыФормы,,,,,
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	
	ДатаОтчета = ТекущаяДата();
	
	УчетВремениКлиент.ДобавитьВОтчетКлиент(
		ДатаОтчета,
		ВключенХронометраж, 
		ДатаНачалаХронометража, 
		ДатаКонцаХронометража, 
		ВидыРабот, 
		Объект.Ссылка,
		СпособУказанияВремени,
		ЭтаФорма.Элементы.ПереключитьХронометраж,
		Ложь,
		ЭтаФорма); // Выполнена
		
КонецПроцедуры

// Отрабатывает нажатие на кнопке "..."
&НаКлиенте
Процедура КомандаЕще(Команда)
	
	СписокЗначений = Новый СписокЗначений;
	
	РедактируетДругой = ЗначениеЗаполнено(Объект.Редактирует) И Не РедактируетТекущийПользователь;
	
	СписокЗначений.Добавить("ОткрытьКаталогФайла",
		НСтр("ru = 'Открыть каталог файла'"),,
		БиблиотекаКартинок.Папка);
	
	Если РазрешеноРедактирование Тогда
		
		Если Не РедактируетДругой Тогда
			СписокЗначений.Добавить("ОбновитьИзФайлаНаДиске",
				НСтр("ru = 'Обновить из файла на диске'"),,
				БиблиотекаКартинок.ОбновитьФайлИзФайлаНаДиске);
		КонецЕсли;
		
		СписокЗначений.Добавить("ОтменитьРедактирование",
			НСтр("ru = 'Отменить редактирование'"),,
			БиблиотекаКартинок.ОсвободитьФайл);
		
		Если Не РедактируетДругой Тогда
			СписокЗначений.Добавить("СохранитьИзменения",
				НСтр("ru = 'Сохранить изменения'"),,
				БиблиотекаКартинок.ОпубликоватьФайл);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.ФормаРаспознать.Доступность = Истина Тогда
		СписокЗначений.Добавить("Распознать",
			НСтр("ru = 'Распознать'"),,
			БиблиотекаКартинок.РаспознаваниеДокументов);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"КомандаЕщеВыбораЗначенияПродолжение",
		ЭтотОбъект);
	
	ПоказатьВыборИзМеню(ОписаниеОповещения, СписокЗначений);
	
КонецПроцедуры

// Отрабатывает команду ПоказатьВСписке
&НаКлиенте
Процедура ПоказатьВСписке(Команда)
	
	Если ЗначениеЗаполнено(Объект.ВладелецФайла) Тогда
		
		Если ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
			
			ПараметрыФормы = Новый Структура("Папка, Файл", Объект.ВладелецФайла, Объект.Ссылка);
			ОткрытьФорму("Справочник.Файлы.Форма.ХранилищеФайлов", ПараметрыФормы, , Объект.ВладелецФайла);
			
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьШтампПодписи(Команда)
	
	СоздатьШтампПодписиСервер();
	
	ПоказатьПредупреждение(, НСтр("ru = 'Штамп подписи создан'"));
	
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	
	РаботаСФайламиСлужебныйКлиент.УдалитьДанные(
		Новый ОписаниеОповещения("ПослеУдаленияДанных", ЭтотОбъект),
		Объект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредпросмотр(Команда)
	
	ТекущийФайл = Объект.Ссылка;
	
	Если ИспользоватьПредпросмотрФайлов И ПоказыватьПредпросмотр И Не РедактируетТекущийПользователь Тогда
		
		ДокументPDF = Неопределено;
		
		ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();
		ПараметрыHTMLПредставление.Расширение = Объект.ТекущаяВерсияРасширение;
		ПараметрыHTMLПредставление.Размер = Объект.ТекущаяВерсияРазмер / 1024;
		ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
		ПараметрыHTMLПредставление.ПредпросмотрОфисныхФайлов = ПредпросмотрОфисныхФайлов; 
		ПараметрыHTMLПредставление.ОбновитьПредставление = Истина;
		
		ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
			ТекущийФайл,
			ПараметрыHTMLПредставление,
			ДокументPDF);
		
		ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ПредставлениеHTML, ТаймлистАвтопротоколHTML,
			РаспознанныйТекстHTML);
		
		Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
		
		Если ДокументPDF = Неопределено Тогда
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
		Иначе
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
			ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
			Элементы.ДокументPdfПоле.НомерТекущейСтраницы = 1;
		КонецЕсли;
		
		УстановитьВидимостьСтраницПредпросмотра();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОригинальныйФайл(Команда)
	
	ПредыдущийАдресФайла = Неопределено;
	НеПолучатьВизуализациюЭП =  Истина;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
		Объект.Ссылка, 
		Неопределено, 
		УникальныйИдентификатор, 
		Неопределено, 
		ПредыдущийАдресФайла,
		НеПолучатьВизуализациюЭП);
	
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МасштабПлюс(Команда)
	
	Элементы["ДокументPdfПоле"].Масштаб = Элементы["ДокументPdfПоле"].Масштаб + 10;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МасштабМинус(Команда)
	
	Если Элементы["ДокументPdfПоле"].Масштаб <= 10 Тогда
		Возврат;
	КонецЕсли;
	
	Элементы["ДокументPdfПоле"].Масштаб = Элементы["ДокументPdfПоле"].Масштаб - 10;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоворотЛево(Команда)
	
	Элементы["ДокументPdfПоле"].Ориентация = Элементы["ДокументPdfПоле"].Ориентация - 90;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоворотПраво(Команда)
	
	Элементы["ДокументPdfПоле"].Ориентация = Элементы["ДокументPdfПоле"].Ориентация + 90;

КонецПроцедуры

&НаКлиенте
Процедура Страница1(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте
Процедура Страница2(Команда)      
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте
Процедура Страница3(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте
Процедура Страница4(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте         
Процедура Страница5(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	      

&НаКлиенте
Процедура Страница6(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	  

&НаКлиенте
Процедура Страница7(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	 

&НаКлиенте
Процедура Страница8(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	   

&НаКлиенте
Процедура Страница9(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте
Процедура Назад(Команда)
	
	НомерПорции = НомерПорции - 1;
	ЧастьВыбор(НомерПорции);
	
КонецПроцедуры

&НаКлиенте
Процедура Вперед(Команда)
	
	НомерПорции = НомерПорции + 1;
	ЧастьВыбор(НомерПорции);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаВыбор(Команда)
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("СтраницаВыборЗавершение", ЭтотОбъект);
	ОбзорФайловКлиент.ВыбратьСтраницуДинамическогоСписка(
		ЭтотОбъект,
		Команда,
		НомерПорции,
		ВсегоПорцийПредпросмотра,
		ОповещениеОЗавершении);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура СохранитьНастройкуПредпросмотра(ПоказыватьПредпросмотр)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"НастройкиОткрытияФайлов", "ПоказыватьПредпросмотр", 
		ПоказыватьПредпросмотр);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПревьюФайла()
	
	ПоказатьОбзорТекущегоФайла();
	УстановитьВидимостьСтраницПредпросмотра();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОбзорТекущегоФайла()
	
	Если Не ИспользоватьПредпросмотрФайлов Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийФайл = Объект.Ссылка;
	
	Если РедактируетТекущийПользователь Тогда
		
		ПредставлениеHTML = ОбзорФайловКлиентСервер.HTMLПредставлениеПриРедактировании();
		Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
		Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
		
	Иначе
		
		Если ЗначениеЗаполнено(ТекущийФайл) Тогда
			
			ДокументPDF = Неопределено;
			
			ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();
			ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
			ПараметрыHTMLПредставление.Расширение = Объект.ТекущаяВерсияРасширение;
			ПараметрыHTMLПредставление.Размер = Объект.ТекущаяВерсияРазмер / 1024;
			ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
			ПараметрыHTMLПредставление.ПредпросмотрОфисныхФайлов = ПредпросмотрОфисныхФайлов;
			
			ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
				ТекущийФайл,
				ПараметрыHTMLПредставление,
				ДокументPDF);
				
			ВсегоПорцийПредпросмотра = ПараметрыHTMLПредставление.ВсегоПорцийПредпросмотра;
			ОбновитьКнопкиДинамическогоСпискаКлиент();
				
			ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ПредставлениеHTML, ТаймлистАвтопротоколHTML,
				РаспознанныйТекстHTML);
			
			Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
			
			Если ДокументPDF = Неопределено Тогда
				Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
			Иначе
				Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
				ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
				Элементы.ДокументPdfПоле.НомерТекущейСтраницы = 1;
			КонецЕсли;
			
		Иначе
			
			ПредставлениеHTML = "<html><body></body></html>";
			ТаймлистАвтопротоколHTML = "<html><body></body></html>";
			РаспознанныйТекстHTML = "<html><body></body></html>";
			Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииКлиентОткрытьЗадачи()
	
	ОткрытьФорму("ОбщаяФорма.ПроцессыИЗадачи",
		Новый Структура("Предмет", Объект.Ссылка),
		ЭтаФорма,
		ЭтаФорма.КлючУникальности,
		ЭтаФорма.Окно,
		"e1cib/command/ОбщаяКоманда.ПроцессыИЗадачи");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииКлиент()
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПриОткрытииКлиентПродолжениеПослеВопроса",
		ЭтотОбъект);
		
	Текст = СтрШаблон(
		НСтр("ru = 'Файл ""%1"" ПодписанЭП. 
		| Копирование сведений об ЭП в новый файл сделает его недоступным для изменения. 
		| Скопировать в новый файл сведения об ЭП?'"),
		Строка(ПараметрыФайлОснование));
	
	ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииКлиентПродолжениеПослеВопроса(Ответ, Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		КопироватьПодписиЭП = Истина;
	КонецЕсли;	
	
КонецПроцедуры

// Заполняет параметры первой закладки
//
// Параметры:
// ТекущийОбъект - текущий объект
//
&НаСервере
Процедура ЗаполнитьПараметрыКарточки(ТекущийОбъект)

	СозданСтатус = СтрШаблон(
		НСтр("ru = '%1 (%2)'"),
		Формат(ТекущийОбъект.ДатаСоздания, "ДФ='dd.MM.yyyy HH:mm'"),
		Строка(ТекущийОбъект.Автор));
	ИзмененСтатус = СтрШаблон(
		НСтр("ru = '%1 (%2)'"),
		Формат(ТекущийОбъект.ТекущаяВерсияДатаСоздания, "ДФ='dd.MM.yyyy HH:mm'"),
		Строка(ТекущийОбъект.ТекущаяВерсияАвтор));
	
	ИмяИРасширение = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ТекущийОбъект.ПолноеНаименование, 
		ТекущийОбъект.ТекущаяВерсияРасширение);
	
	РазмерСтрока = СтрШаблон(
		НСтр("ru = 'Размер: %1'"), 
			РаботаСоСтроками.ПолучитьРазмерСтрокой(ТекущийОбъект.ТекущаяВерсияРазмер));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаФайлЗанятДляРедактирования(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Нет Тогда 
		Закрыть();
	Иначе
		БылЗаданВопросФайлЗанятДляРедактирования = Ложь;
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПослеВопросаОткрытьДляРедактирования(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда 
		Закрыть();
	Иначе	
		Обработчик = Новый ОписаниеОповещения("ЗакрытьФорму", ЭтотОбъект);
		РаботаСФайламиКлиент.РедактироватьСОповещением(Обработчик, Объект.Ссылка, УникальныйИдентификатор);
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗакрытьФорму(Ответ, ПараметрыВыполнения) Экспорт
	
	Закрыть();
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСОбытия = "ФайлОткрыт" И Параметр = Объект.Ссылка Тогда
		НовыйФайл = Ложь;
	КонецЕсли;

	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ФайлРедактировался" 
		И Источник = Объект.Ссылка Тогда
		ФайлРедактировался = Истина;
	КонецЕсли;

	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда
		
		ФайлВОповещении = Источник;
		
		Если ФайлВОповещении = Объект.Ссылка Тогда
			Если ДанныеФайла <> Неопределено
				И Параметр.Свойство("ТаймлистСтатус") И Параметр.Свойство("ТаймлистЗадание") Тогда
				ДанныеФайлаКорректны = Ложь;
				ДанныеФайла.ТаймлистСтатус = Параметр.ТаймлистСтатус;
				ДанныеФайла.ТаймлистЗадание = Параметр.ТаймлистЗадание;
			КонецЕсли;
			
			Прочитать();
			УстановитьДоступностьЭлементовФормы();
			
		Если ИспользоватьПредпросмотрФайлов Тогда
			
			Если РедактируетТекущийПользователь Тогда
				
				ПредставлениеHTML = ОбзорФайловКлиентСервер.HTMLПредставлениеПриРедактировании();
				Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
				Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
				
			Иначе
				
				ТекущийФайл = Объект.Ссылка;
				
				ДокументPDF = Неопределено;
				
				ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();
				ПараметрыHTMLПредставление.Расширение = Объект.ТекущаяВерсияРасширение;
				ПараметрыHTMLПредставление.Размер = Объект.ТекущаяВерсияРазмер / 1024;
				ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
				ПараметрыHTMLПредставление.ПредпросмотрОфисныхФайлов = ПредпросмотрОфисныхФайлов;
				
				ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
					ТекущийФайл,
					ПараметрыHTMLПредставление,
					ДокументPDF);
				
				ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ПредставлениеHTML, ТаймлистАвтопротоколHTML,
					РаспознанныйТекстHTML);
				
				Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
				
				Если ДокументPDF = Неопределено Тогда
					Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
				Иначе
					Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
					ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
					Элементы.ДокументPdfПоле.НомерТекущейСтраницы = 1;
				КонецЕсли;
				
			КонецЕсли; 
			
	 	КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ОбъектЗашифрован" И Параметр = Объект.Ссылка Тогда
		
		Если ДанныеФайла <> Неопределено Тогда
			ДанныеФайлаКорректны = Ложь;
		КонецЕсли;
		
		Прочитать();
	КонецЕсли;
	
	Если ИмяСобытия = "АктивнаяВерсияИзменена" И Параметр = Объект.Ссылка Тогда
		Прочитать();
	КонецЕсли;
	
	Если ИмяСобытия = "РедактироваласьКатегория" Тогда
		ОбновитьДанныеОКатегориях(Параметр);
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновленаИнформацияОСертификатахШифрования" И Параметр = Объект.Ссылка Тогда
		ЗаполнитьСписокШифрования();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ИзменениеЭП" Тогда
		ЗаполнитьСписокПодписей();	
	КонецЕсли;
	
	ОбработатьСобытиеЗаписиЗадачи(ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросНельзяМенятьИмяФайла(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда 
		НельзяМенятьИмяФайла = Ложь;
		ОчиститьАвтоИмяФайла = Истина;
		Записать();
		Возврат;
	КонецЕсли;
	
	Объект.ПолноеНаименование = ИмяФайлаПриОткрытии; // вернем старое значение
	Объект.Наименование 	  = ИмяФайлаПриОткрытии; // вернем старое значение

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция предназначена для копирования последней версии
// из Файла-источника в Файл-приемник
// Параметры:
//	Приемник - ссылка на "Файл" куда копируется прилинкованный Файл
//	Источник - ссылка на "Файл" откуда копируется прилинкованный Файл
&НаСервере
Функция СоздатьКопиюВерсии(Приемник, Источник, КопироватьПодписиЭП, ЗаполнятьШаблон = Ложь)	

	Если Источник.ТекущаяВерсия.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ХранилищеФайла = Неопределено;
	Если Источник.ТекущаяВерсия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда 
		ХранилищеФайла = РаботаСФайламиВызовСервера.ПолучитьХранилищеФайлаИзИнформационнойБазы(Источник.ТекущаяВерсия);
	КонецЕсли;	
	
	ТекстХранилище = РегистрыСведений.ТекстыВерсийФайлов.ПолучитьТекстХранилище(Источник.ТекущаяВерсия);
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	СведенияОФайле.ИмяБезРасширения = Объект.Наименование;
	СведенияОФайле.Размер = Источник.ТекущаяВерсия.Размер;
	СведенияОФайле.РасширениеБезТочки = Источник.ТекущаяВерсия.Расширение;
	СведенияОФайле.АдресВременногоХранилищаФайла = ХранилищеФайла;
	СведенияОФайле.АдресВременногоХранилищаТекста = ТекстХранилище;
	СведенияОФайле.СсылкаНаВерсиюИсточник = Источник.ТекущаяВерсия;
	СведенияОФайле.ВремяИзменения = Источник.ТекущаяВерсия.ДатаМодификацииФайла;
	СведенияОФайле.ВремяИзмененияУниверсальное = Источник.ТекущаяВерсия.ДатаМодификацииУниверсальная;
	Версия = РаботаСФайламиВызовСервера.СоздатьВерсию(Приемник, СведенияОФайле);
	
	// Обновим форму Файла (ведь запись может произойти и не при закрытии формы)
	Объект.ТекущаяВерсия = Версия.Ссылка;
	
	// Обновим запись в информационной базе
	РаботаСФайламиВызовСервера.ОбновитьВерсиюВФайле(Приемник, 
		Версия, 
		ТекстХранилище, 
		УникальныйИдентификатор);
		
	Кодировка = РаботаСФайламиВызовСервера.ПолучитьКодировкуВерсииФайла(Источник.ТекущаяВерсия);
		
	Если Кодировка <> Неопределено Тогда
		РаботаСФайламиВызовСервера.ЗаписатьКодировкуВерсииФайла(Приемник.ТекущаяВерсия, Кодировка);
	КонецЕсли;	
	
	ИОМВладелеца = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Приемник.ВладелецФайла));
	ПараметрыРаспознавания = РаботаСФайламиВызовСервера.ПодготовитьПараметрыРаспознавания(ИОМВладелеца);
	Если ПараметрыРаспознавания <> Неопределено И ПараметрыРаспознавания.Свойство("РаспознатьПослеДобавления") И ПараметрыРаспознавания.РаспознатьПослеДобавления Тогда
		РаспознатьНемедленно = Ложь;
		ОписаниеОшибки = "";
		РаспознанныйТекст = "";
		РаботаСФайламиВызовСервера.РаспознатьФайл(Объект.Ссылка, 
			ПараметрыРаспознавания, 
			ОписаниеОшибки, 
			РаспознанныйТекст, 
			УникальныйИдентификатор,  
			РаспознатьНемедленно);
	КонецЕсли;
		
	Прочитать();		

	Если КопироватьПодписиЭП Тогда
		
		ФайлОбъект = Объект.Ссылка.ПолучитьОбъект();
		ФайлОбъект.ПодписанЭП = Истина;
		ФайлОбъект.Записать();
		
		ВерсияОбъект = Объект.ТекущаяВерсия.ПолучитьОбъект();
		
		РаботаСЭП.СкопироватьВсеПодписи(Источник.ТекущаяВерсия, Объект.ТекущаяВерсия);
		
		ВерсияОбъект.ПодписанЭП = Истина;
		ВерсияОбъект.Записать();
		
		ПрочитатьИЗаполнитьПодписи();
		
	КонецЕсли;

	Если Источник.Зашифрован Тогда
		
		ФайлОбъект = Объект.Ссылка.ПолучитьОбъект();
		ФайлОбъект.Зашифрован = Истина;
		
		// чтобы прошла запись ранее подписанного объекта
		ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
		ФайлОбъект.Записать();
		
		ВерсияОбъект = Объект.ТекущаяВерсия.ПолучитьОбъект();
		ВерсияОбъект.Зашифрован = Истина;
		// чтобы прошла запись ранее подписанного объекта
		ВерсияОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
		ВерсияОбъект.Записать();
		
		РегистрыСведений.СертификатыШифрования.СкопироватьСертификатыШифрования(
			Источник.Ссылка, ФайлОбъект.Ссылка);
		
		ПрочитатьИЗаполнитьШифрование();
		
	КонецЕсли;	
	
	Если ИспользоватьАвтозаполнениеФайлов 
		И ЗаполнятьШаблон 
		И (ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.ДокументыПредприятия")
		ИЛИ ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.ПапкиФайлов")) Тогда
		РезультатЗаполнения = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьПоляФайлаДаннымиВладельца(
			Ложь, Объект.Ссылка, Истина, УникальныйИдентификатор);
		Если РезультатЗаполнения.Результат Тогда
			АвтозаполнениеВыполнялось = Истина;
		КонецЕсли;
		Прочитать();
	КонецЕсли;

КонецФункции // СоздатьКопиюВерсии()

// Устанавливает доступность команд и элементов формы
&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы()
	
	ДоступныДействияСФайлом = Не Объект.ТекущаяВерсия.Пустая() И Не Объект.Ссылка.Пустая();
	
	РедактируетДругой = ЗначениеЗаполнено(Объект.Редактирует) И Не РедактируетТекущийПользователь;
	
	Элементы.ХранитьВерсии.Доступность = ДоступныДействияСФайлом И Не Объект.ПометкаУдаления;
	Элементы.ОтменитьРедактирование.Доступность = ЗначениеЗаполнено(Объект.Редактирует);
	Элементы.ОткрытьКаталогФайла.Доступность = ДоступныДействияСФайлом;
	Элементы.СохранитьКак.Доступность = ДоступныДействияСФайлом;
	
	Элементы.Редактировать.Доступность = НЕ Объект.ПодписанЭП И Не РедактируетДругой И ДоступностьРедактированияПоСостояниюБП И РазрешеноРедактирование;
	Элементы.ФормаРедактировать.Доступность = НЕ Объект.ПодписанЭП И Не РедактируетДругой И ДоступностьРедактированияПоСостояниюБП И РазрешеноРедактирование;
	
	Элементы.ЗакончитьРедактирование.Доступность = ДоступныДействияСФайлом И РазрешеноРедактирование И РедактируетТекущийПользователь;
	Элементы.ФормаЗакончитьРедактирование.Доступность = ДоступныДействияСФайлом И РазрешеноРедактирование И РедактируетТекущийПользователь;
	
	//Элементы.ПолноеНаименование.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Редактирует);
	Элементы.Занять.Доступность = Не ЗначениеЗаполнено(Объект.Редактирует) И (ДоступныДействияСФайлом) И НЕ Объект.ПодписанЭП И РазрешеноРедактирование;
	Элементы.СохранитьИзменения.Доступность = ЗначениеЗаполнено(Объект.Редактирует) И РазрешеноРедактирование;
	
	Элементы.ОбновитьИзФайлаНаДиске.Доступность = ДоступныДействияСФайлом И НЕ Объект.ПодписанЭП И РазрешеноРедактирование;
	
	Элементы.ФормаПодписать.Доступность = (ДоступныДействияСФайлом И Не ЗначениеЗаполнено(Объект.Редактирует) И НЕ Объект.Зашифрован) ИЛИ НЕ ДоступныДействияСФайлом;
	Элементы.ФормаЗашифровать.Доступность = (ДоступныДействияСФайлом И Не ЗначениеЗаполнено(Объект.Редактирует) И НЕ Объект.Зашифрован) ИЛИ НЕ ДоступныДействияСФайлом;
	
	Элементы.ФормаДобавитьЭПИзФайла.Доступность = ДоступныДействияСФайлом И Не ЗначениеЗаполнено(Объект.Редактирует) И НЕ Объект.Зашифрован;
	Элементы.ФормаСохранитьВместеСЭП.Доступность = ДоступныДействияСФайлом И Объект.ПодписанЭП;
	Элементы.ФормаРасшифровать.Доступность = ДоступныДействияСФайлом И Объект.Зашифрован;
	
	Элементы.ФормаПросмотретьТекстовыйОбраз.Доступность = ДоступныДействияСФайлом;
	
	Расширение = Объект.ТекущаяВерсияРасширение;
	ИспользоватьImageMagickДляРаспознаванияPDF = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ИспользоватьImageMagickДляРаспознаванияPDF;
	ПрограммаРаспознавания = РаботаСФайламиКлиентПовтИсп.ПрограммаРаспознавания();
	РасширениеПоддерживается = РаботаСФайламиКлиентСервер.ЭтотФайлМожноРаспознать(
		Расширение, ИспользоватьImageMagickДляРаспознаванияPDF, ПрограммаРаспознавания, ТаймлистИспользуется);
	ДоступноРаспознаваниеПоЗапросу = РаботаСФайламиКлиентПовтИсп.ДоступноРаспознаваниеПоЗапросу();
	ЭтоРасширениеТаймлист = ТаймлистКлиентСервер.ЭтоРасширениеФайлаТаймлист(Расширение);
	
	Если ДоступныДействияСФайлом Тогда
		Элементы.ФормаРаспознать.Доступность =
			Не ЗначениеЗаполнено(Объект.Редактирует)
			И ДоступныДействияСФайлом
			И РасширениеПоддерживается
			И (Не ЭтоРасширениеТаймлист
					И ДоступноРаспознаваниеПоЗапросу
					И ДанныеФайла.СтатусРаспознаванияТекста <> "Распознано"
					И ДанныеФайла.СтатусРаспознаванияТекста <> "Распознается"
				Или ЭтоРасширениеТаймлист
					И ДоступноРаспознаваниеТаймлист
					И Не ЗначениеЗаполнено(ДанныеФайла.ТаймлистСтатус)
					И Не ЗначениеЗаполнено(ДанныеФайла.ТаймлистЗадание));
	Иначе
		Элементы.ФормаРаспознать.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьСтраницПредпросмотра()
	
	Если ТаймлистКлиентСервер.ЭтоРасширениеФайлаТаймлист(Объект.ТекущаяВерсияРасширение) И ПоказыватьПредпросмотр Тогда
		
		Если ДанныеФайла.ТаймлистСтатус
			= ПредопределенноеЗначение("Перечисление.ТаймлистСтатусы.ПолученАвтопротокол") Тогда
			Элементы.ГруппаТаймлистАвтопротокол.Видимость = Истина;
			Элементы.ГруппаПредпросмотрСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
			Элементы.ГруппаHtml.Заголовок = НСтр("ru = 'Расшифровка'");
		Иначе
			Элементы.ГруппаТаймлистАвтопротокол.Видимость = Ложь;
			Элементы.ГруппаПредпросмотрСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
			Элементы.ГруппаHtml.Заголовок = "";
		КонецЕсли;
		
		Элементы.ГруппаHtml.Видимость = Истина;
		Элементы.ГруппаРаспознанныйТекст.Видимость = Ложь;
		Элементы.ГруппаPdf.Видимость = Ложь;
		
	ИначеЕсли ДанныеФайла.СтатусРаспознаванияТекста = "Распознано" И ПоказыватьПредпросмотр Тогда
		
		Элементы.ГруппаПредпросмотрСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		
		Если Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf Тогда
			Элементы.ГруппаHtml.Видимость = Ложь;
			Элементы.ГруппаPdf.Видимость = Истина;
			Элементы.ГруппаPdf.Заголовок = НСтр("ru = 'Предпросмотр'");
		Иначе
			Элементы.ГруппаPdf.Видимость = Ложь;
			Элементы.ГруппаHtml.Видимость = Истина;
			Элементы.ГруппаHtml.Заголовок = НСтр("ru = 'Предпросмотр'");
		КонецЕсли;
		
		Элементы.ГруппаТаймлистАвтопротокол.Видимость = Ложь;
		Элементы.ГруппаРаспознанныйТекст.Видимость = Истина;
		
	Иначе
		
		Элементы.ГруппаПредпросмотрСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.ГруппаHtml.Видимость = Истина;
		Элементы.ГруппаPdf.Видимость = Истина;
		Элементы.ГруппаТаймлистАвтопротокол.Видимость = Ложь;
		Элементы.ГруппаРаспознанныйТекст.Видимость = Ложь;
		Элементы.ГруппаHtml.Заголовок = "";
		Элементы.ГруппаPdf.Заголовок = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолноеНаименованиеПриИзменении(Элемент)
	
	Объект.ПолноеНаименование = СокрЛП(Объект.ПолноеНаименование);
	Попытка
		ФайловыеФункцииКлиент.КорректноеИмяФайла(Объект.ПолноеНаименование, Истина);
	Исключение
		Информация = ИнформацияОбОшибке();
		ПоказатьПредупреждение(, Информация.Описание);
	КонецПопытки;
	
	Объект.Наименование = СокрЛП(Объект.ПолноеНаименование);
	
	ИмяИРасширение = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(Объект.ПолноеНаименование, 
		Объект.ТекущаяВерсияРасширение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьВыполнить()
	
	Записать();
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьВыполнить()
	
	РаботаСФайламиКлиент.СкопироватьФайл(Объект.ВладелецФайла, Объект.Ссылка);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокШифрования()
	
	СертификатыШифрования.Очистить();
	
	Если Объект.Зашифрован Тогда
		МассивСертификатовШифрования = РаботаСФайламиВызовСервера.ПолучитьМассивСертификатовШифрования(Объект.Ссылка);	
		Для Каждого СтруктураСертификата Из МассивСертификатовШифрования Цикл
			НоваяСтрока = СертификатыШифрования.Добавить();
			НоваяСтрока.Представление = СтруктураСертификата.Представление;
			НоваяСтрока.Отпечаток = СтруктураСертификата.Отпечаток;
			Если СтруктураСертификата.Сертификат <> Неопределено Тогда
				НоваяСтрока.АдресСертификата = ПоместитьВоВременноеХранилище(СтруктураСертификата.Сертификат, УникальныйИдентификатор);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = 'Зашифрован для'");
	Если СертификатыШифрования.Количество() <> 0 Тогда
		ТекстЗаголовка = ТекстЗаголовка + " (" + Строка(СертификатыШифрования.Количество()) + ")";
	КонецЕсли;	
	Элементы.ГруппаШифрование.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПодписей()
	
	ЭлектронныеПодписи.Очистить();
		
	Если Объект.ПодписанЭП Тогда
		РаботаСЭП.ЗаполнитьСписокПодписейФайла(Объект.ТекущаяВерсия, ЭлектронныеПодписи, , , Истина);
	КонецЕсли;
	
	Если ЭлектронныеПодписи.Количество() = 0 Тогда
		ТекстЗаголовка = НСтр("ru = 'ЭП'");
	Иначе
		ТекстЗаголовка = СтрШаблон(
			НСтр("ru = 'ЭП (%1)'"),
			Формат(ЭлектронныеПодписи.Количество(), "ЧГ="));
	КонецЕсли;
	Элементы.ГруппаЭП.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеВладельца()
	
	ТипВладельца = ТипЗнч(Объект.ВладелецФайла);
	ТипВладельцаСтрока = Строка(ТипВладельца);
	ПолныйПутьОписание = Строка(Объект.ВладелецФайла);
	
	Если ТипВладельца = Тип("СправочникСсылка.ПапкиФайлов") Тогда
		ТипВладельцаСтрока = НСтр("ru='Папка'");
		ПолныйПутьОписание = ПолныйПуть;
	ИначеЕсли ТипВладельца = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
		ТипВладельцаСтрока = НСтр("ru='Вх письмо'");
	ИначеЕсли ТипВладельца = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
		ТипВладельцаСтрока = НСтр("ru='Исх письмо'");		
	ИначеЕсли ТипВладельца = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		ТипВладельцаСтрока = НСтр("ru='Документ'");
	КонецЕсли;	
	
	Элементы.ПолныйПутьОписание.Заголовок = ТипВладельцаСтрока;
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьПолныйПуть()
	
	ПапкаРодитель = Объект.ВладелецФайла;
	
	Если ТипЗнч(ПапкаРодитель) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
		
		Если ЗначениеЗаполнено(ПапкаРодитель) Тогда
		
			ПолныйПуть = "";
			
			Пока ЗначениеЗаполнено(ПапкаРодитель) Цикл
				
				Если Не ПустаяСтрока(ПолныйПуть) Тогда
					ПолныйПуть = "\" + ПолныйПуть;
				КонецЕсли;	
				
				ПолныйПуть = Строка(ПапкаРодитель) + ПолныйПуть;
				
				ПапкаРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПапкаРодитель, "Родитель");
				Если Не ЗначениеЗаполнено(ПапкаРодитель) Тогда
					Прервать;
				КонецЕсли;	
				
			КонецЦикла;

			Элементы.Владелец.Подсказка = ПолныйПуть;
			
		КонецЕсли;	
			
	КонецЕсли;	
	
КонецПроцедуры	

// Выполняет открытие файла на просмотр
&НаКлиенте
Процедура ОткрытьФайлВыполнить()
	
	Если Объект.Ссылка.Пустая() Тогда
		ОчиститьСообщения();
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Объект.Ссылка, Неопределено, 
		УникальныйИдентификатор);
	
	Если ДанныеФайла.Зашифрован И (ДанныеФайла.МассивСертификатовШифрования.Количество() = 0) Тогда
		Если Модифицированность Тогда
			Если Не Записать() Тогда 
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	

	Если ДанныеФайла.Свойство("ВладелецСменилПрочтенность") Тогда
		ОповеститьОбИзменении(КлючЗаписи);
	КонецЕсли;	

	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
// Продолжение процедуры (см. выше).
Процедура РедактироватьСОповещениемЗавершение(ФайлОтредактирован, ПараметрыВыполнения) Экспорт

	Прочитать();
	УстановитьДоступностьЭлементовФормы();
	
	Если ПараметрыВыполнения.ДанныеФайла.Свойство("ВладелецСменилПрочтенность") Тогда
		ОповеститьОбИзменении(КлючЗаписи);
	КонецЕсли;
	
	Если ИспользоватьПредпросмотрФайлов Тогда
		
		Если РедактируетТекущийПользователь Тогда
	
			ПредставлениеHTML = ОбзорФайловКлиентСервер.HTMLПредставлениеПриРедактировании();
			Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
			
		Иначе
			
			ТекущийФайл = Объект.Ссылка;
			
			ДокументPDF = Неопределено;
			
			ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();
			ПараметрыHTMLПредставление.Расширение = Объект.ТекущаяВерсияРасширение;
			ПараметрыHTMLПредставление.Размер = Объект.ТекущаяВерсияРазмер / 1024;
			ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
			ПараметрыHTMLПредставление.ПредпросмотрОфисныхФайлов = ПредпросмотрОфисныхФайлов;
			
			ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
				ТекущийФайл, 
				ПараметрыHTMLПредставление,
				ДокументPDF);
			
			ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ПредставлениеHTML, ТаймлистАвтопротоколHTML,
				РаспознанныйТекстHTML);
			
			Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
			
			Если ДокументPDF = Неопределено Тогда
				Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
			Иначе
				Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
				ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
				Элементы.ДокументPdfПоле.НомерТекущейСтраницы = 1;
			КонецЕсли;
			
		КонецЕсли;
		
 	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьИУстановитьДоступностьЭлементовФормы(Результат, ПараметрыВыполнения) Экспорт
	
	Прочитать();
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеФайла(Принудительно=Ложь)
	
	Если ДанныеФайла = Неопределено ИЛИ НЕ ДанныеФайлаКорректны ИЛИ Принудительно Тогда
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(Объект.Ссылка);
		ДанныеФайлаКорректны = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРедактированиеВыполнить() Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.Редактирует) Тогда
		
		СтрокаСообщения = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Нельзя освободить файл '"),
			Новый ФорматированнаяСтрока(Строка(Объект.Ссылка), Новый Шрифт(,,Истина)),
			НСтр("ru=', т.к. он не занят для редактирования.'") );	
			
		ПоказатьПредупреждение(,СтрокаСообщения);	
		
		Возврат;
		
	КонецЕсли;	
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;	
	
	ПолучитьДанныеФайла();
	
	Обработчик = Новый ОписаниеОповещения("ПрочитатьИУстановитьДоступностьЭлементовФормы", ЭтотОбъект);
	
	ПараметрыОсвобожденияФайла = РаботаСФайламиКлиент.ПараметрыОсвобожденияФайла(Обработчик, ДанныеФайла.Ссылка);
	ПараметрыОсвобожденияФайла.ХранитьВерсии = ДанныеФайла.ХранитьВерсии;	
	ПараметрыОсвобожденияФайла.РедактируетТекущийПользователь = ДанныеФайла.РедактируетТекущийПользователь;	
	ПараметрыОсвобожденияФайла.Редактирует = ДанныеФайла.Редактирует;	
	ПараметрыОсвобожденияФайла.УникальныйИдентификатор = УникальныйИдентификатор;	
	РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(ПараметрыОсвобожденияФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзмененияВыполнить() Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.Редактирует) Тогда
		
		СтрокаСообщения = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Нельзя сохранить изменения файла '"),
			Новый ФорматированнаяСтрока(Строка(Объект.Ссылка), Новый Шрифт(,,Истина)),
			НСтр("ru=', т.к. он не занят для редактирования.'") );	
			
		ПоказатьПредупреждение(,СтрокаСообщения);	
		
		Возврат;
		
	КонецЕсли;	
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;	
	
	Обработчик = Новый ОписаниеОповещения("ПрочитатьИУстановитьДоступностьЭлементовФормы", ЭтотОбъект);
	РаботаСФайламиКлиент.СохранитьИзмененияФайлаСОповещением(Обработчик, Объект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогФайлаВыполнить() Экспорт
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Объект.Ссылка, Неопределено, УникальныйИдентификатор);
	КомандыРаботыСФайламиКлиент.ОткрытьКаталогФайла(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДискеВыполнить() Экспорт
	
	Если Объект.Ссылка.Пустая() Тогда
		ОчиститьСообщения();
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;	
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(Объект.Ссылка);
	
	Обработчик = Новый ОписаниеОповещения("ПрочитатьИУстановитьДоступностьЭлементовФормы", ЭтотОбъект);
	
	РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
		Обработчик,
		ДанныеФайла,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознатьВыполнить()
	
	Если ТаймлистКлиентСервер.ЭтоРасширениеФайлаТаймлист(Объект.ТекущаяВерсияРасширение) Тогда
		
		ДополнительныеПараметрыОповещения = Новый Структура("ВыделенныеФайлы",
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка));
		Оповещение = Новый ОписаниеОповещения("ПослеУказанияКоличестваСпикеров", ЭтотОбъект,
			ДополнительныеПараметрыОповещения);
		
		ТаймлистКлиент.НачатьРасшифровку(ЭтотОбъект, Объект.Ссылка, Оповещение);
		
		Возврат;
		
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ПослеОтправкиНаРаспознаваниеТекста", ЭтотОбъект);
	КомандыРаботыСФайламиКлиент.РаспознатьФайлСОповещением(Обработчик, Объект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУказанияКоличестваСпикеров(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КомандыРаботыСФайламиКлиент.РаспознатьФайлСОповещением(, ДополнительныеПараметры.ВыделенныеФайлы[0],, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиНаРаспознаваниеТекста(Результат, ПараметрыВыполнения) Экспорт
	
	Прочитать();
	ПолучитьДанныеФайла(Истина);
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры	

&НаСервере
Процедура СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок()
	
	СписокКатегорийДанных.Сортировать("ПолноеНаименование");
	Элементы.Категории.Заголовок = РаботаСКатегориямиДанныхКлиентСервер.ПолучитьЗаголовокВкладкиКатегории(СписокКатегорийДанных);	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОКатегориях(Параметр)
	
	Для Каждого ВыбраннаяКатегория Из СписоккатегорийДанных Цикл
		ВыбраннаяКатегория.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(ВыбраннаяКатегория.Значение);
	КонецЦикла;
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ПрочитатьИЗаполнитьПодписи()
	
	Прочитать();
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(Объект.Ссылка);
	ДанныеФайлаКорректны = Истина;
	ЗаполнитьСписокПодписей();
	
КонецПроцедуры	

&НаСервере
Процедура ПрочитатьИЗаполнитьШифрование()
	Прочитать();
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(Объект.Ссылка);
	ДанныеФайлаКорректны = Истина;
	ЗаполнитьСписокШифрования();
КонецПроцедуры	

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	Если ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
		ОбновитьПолныйПуть();
		Элементы.СубъектыПерсональныхДанных.ТолькоПросмотр = Ложь;
		Элементы.Категории.Видимость = Истина;
		Элементы.ЗаполнитьДаннымиВладельца.Видимость = Ложь;
	Иначе	
		Элементы.СубъектыПерсональныхДанных.ТолькоПросмотр = Истина;
		Элементы.Категории.Видимость = Ложь;
		СписокКатегорийДанных.Очистить();
		Элементы.ЗаполнитьДаннымиВладельца.Видимость = Истина;
	КонецЕсли;	
	
	ТипВладельца = ТипЗнч(Объект.ВладелецФайла);
	Элементы.Владелец.Заголовок = ТипВладельца;
	
	ОбновитьПредставлениеВладельца();
	
КонецПроцедуры

&НаКлиенте
Функция ТекстВопросаНезаписанныхДанных(НазваниеКоманды)
	
	Возврат СтрШаблон(
		НСтр("ru = 'Данные еще не записаны.
             |Выполнение действия ""%1"" возможно только после записи данных.
             |Данные будут записаны.'"),
		НазваниеКоманды);
	
КонецФункции

&НаКлиенте
Процедура ПодписатьПослеОтветаНаВопросСохранения(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.ОК Тогда 
		Возврат;
	КонецЕсли;
    	
	Если Не Записать() Тогда 
		Возврат;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Создание:'"), 
		ПолучитьНавигационнуюСсылку(Объект.Ссылка),
		Строка(Объект.Ссылка),
		БиблиотекаКартинок.Информация32);
		
	ПодписатьПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьПродолжение()
	
	МассивФайлов = Новый Массив;
	МассивФайлов.Добавить(Объект.Ссылка);
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(Объект.Ссылка);
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ВладелецФайла", ДанныеФайла.Владелец);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодписатьЗавершение", ЭтотОбъект, ПараметрыВыполнения);
	
	РаботаСФайламиСлужебныйКлиент.ПодписатьФайл(МассивФайлов, УникальныйИдентификатор, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("ПрисоединенныйФайлПодписан", ПараметрыВыполнения.ВладелецФайла);
	
	ПодписатьЗавершениеВызовСервера();
	
	УстановитьДоступностьЭлементовФормы();
	УстановитьДоступностьКомандСпискаЭП();
	
КонецПроцедуры

&НаСервере
Процедура ПодписатьЗавершениеВызовСервера()
	
	ПрочитатьИЗаполнитьПодписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭПИзФайлаЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Истина Тогда
		УстановитьДоступностьЭлементовФормы();
		ПрочитатьИЗаполнитьПодписи();
		УстановитьДоступностьКомандСпискаЭП();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗашифроватьПослеОтветаНаВопросЗаписать(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.ОК Тогда 
		Возврат;
	КонецЕсли;
    	
	Если Не Записать() Тогда 
		Возврат;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Создание:'"), 
		ПолучитьНавигационнуюСсылку(Объект.Ссылка),
		Строка(Объект.Ссылка),
		БиблиотекаКартинок.Информация32);
		
	ЗашифроватьПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗашифроватьПродолжение() Экспорт
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(Объект.Ссылка);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", Объект.Ссылка);
	Обработчик = Новый ОписаниеОповещения("ЗашифроватьПослеШифрованияНаКлиенте", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиСлужебныйКлиент.Зашифровать(Обработчик, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗашифроватьПослеШифрованияНаКлиенте(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяРабочегоКаталога = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	ЕстьЗашифрованныеИлиЗанятыеФайлы = Неопределено;
	
	ЗашифроватьСервер(
		Результат.МассивДанныхДляЗанесенияВБазу,
		Результат.МассивОтпечатков,
		МассивФайловВРабочемКаталогеДляУдаления,
		ИмяРабочегоКаталога,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	РаботаСФайламиКлиент.ИнформироватьОШифровании(
		МассивФайловВРабочемКаталогеДляУдаления,
		ПараметрыВыполнения.ДанныеФайла.Владелец,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	УстановитьДоступностьЭлементовФормы();
	УстановитьДоступностьКомандСпискаШифрования();
	
КонецПроцедуры

&НаСервере
Процедура ЗашифроватьСервер(МассивДанныхДляЗанесенияВБазу, МассивОтпечатков, 
	МассивФайловВРабочемКаталогеДляУдаления,
	ИмяРабочегоКаталога, ОбъектСсылка, ЕстьЗашифрованныеИлиЗанятыеФайлы)
	
	Зашифровать = Истина;
	РаботаСФайламиВызовСервера.ЗанестиИнформациюОШифровании(
		ОбъектСсылка,
		Зашифровать,
		МассивДанныхДляЗанесенияВБазу,
		Неопределено,  // УникальныйИдентификатор
		ИмяРабочегоКаталога,
		МассивФайловВРабочемКаталогеДляУдаления,
		МассивОтпечатков);
	
	Прочитать();
	ЗаполнитьСписокШифрования();
	
	ЕстьЗашифрованныеИлиЗанятыеФайлы = РаботаСФайламиВызовСервера.ЕстьЗашифрованныеИлиЗанятыеФайлы(Объект.ВладелецФайла);	
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПослеРасшифровкиНаКлиенте(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяРабочегоКаталога = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	
	ЕстьЗашифрованныеИлиЗанятыеФайлы = Неопределено;
	
	РасшифроватьСервер(
		Результат.МассивДанныхДляЗанесенияВБазу,
		ИмяРабочегоКаталога,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	РаботаСФайламиКлиент.ИнформироватьОРасшифровке(
		ПараметрыВыполнения.ДанныеФайла.Владелец,
		Объект.Ссылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	УстановитьДоступностьЭлементовФормы();
	УстановитьДоступностьКомандСпискаШифрования();
	
КонецПроцедуры

&НаСервере
Процедура РасшифроватьСервер(МассивДанныхДляЗанесенияВБазу, 
	ИмяРабочегоКаталога, ОбъектСсылка, ЕстьЗашифрованныеИлиЗанятыеФайлы)
	
	Зашифровать = Ложь;
	МассивОтпечатков = Новый Массив;
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	
	РаботаСФайламиВызовСервера.ЗанестиИнформациюОШифровании(
		ОбъектСсылка,
		Зашифровать,
		МассивДанныхДляЗанесенияВБазу,
		Неопределено,  // УникальныйИдентификатор
		ИмяРабочегоКаталога,
		МассивФайловВРабочемКаталогеДляУдаления,
		МассивОтпечатков);
		
	Прочитать();
	ЗаполнитьСписокШифрования();
	
	ЕстьЗашифрованныеИлиЗанятыеФайлы = РаботаСФайламиВызовСервера.ЕстьЗашифрованныеИлиЗанятыеФайлы(Объект.ВладелецФайла);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЭПЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура")
		Или Не Результат.Свойство("Успех")
		Или Результат.Успех <> Истина Тогда
		
		Возврат;
	КонецЕсли;
	
	РаботаСЭПКлиент.ОтобразитьРезультатПроверкиПодписей(Результат);
	
КонецПроцедуры // ПроверитьЭПЗавершение()

&НаКлиенте
Процедура СохранитьПодпись(Команда)
	
	Если Элементы.ЭлектронныеПодписи.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ЭлектронныеПодписи.ТекущиеДанные.Объект <> Неопределено И (НЕ Элементы.ЭлектронныеПодписи.ТекущиеДанные.Объект.Пустая()) Тогда
		ФайловыеФункцииКлиент.СохранитьПодпись(Элементы.ЭлектронныеПодписи.ТекущиеДанные.АдресПодписи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПодписиИОбновитьСписок(РеквизитПодписанИзменен)
	
	ИдентификаторыПодписей = Новый Массив;
	
	Для Каждого Элемент Из Элементы.ЭлектронныеПодписи.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ЭлектронныеПодписи.НайтиПоИдентификатору(Элемент);
		
		Если ДанныеСтроки.Объект <> Неопределено И (НЕ ДанныеСтроки.Объект.Пустая()) Тогда
			ИдентификаторыПодписей.Добавить(ДанныеСтроки.УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЦикла;
	
	НомераПодписей = Новый Массив(); // Массив Из Число
	КлючиРегистраПоИдентификаторам =
		РаботаСЭП.КлючиРегистраПодписейПоИдентификаторамПодписей(ИдентификаторыПодписей);
	Для Каждого Элемент Из КлючиРегистраПоИдентификаторам Цикл
		
		КлючРегистра = Элемент.Значение; // см. РаботаСЭП.НовыйКлючРегистраЭлектронныхПодписей
		Если КлючРегистра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НомераПодписей.Добавить(КлючРегистра.ПорядковыйНомер);
		
	КонецЦикла;
	
	РаботаСФайламиСлужебныйВызовСервера.УдалитьПодписиВерсииФайла(
		Объект.ТекущаяВерсия,
		НомераПодписей, 
		РеквизитПодписанИзменен,
		УникальныйИдентификатор);
	
	ЗаполнитьСписокПодписей();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПодписиЗапуск()
	
	Если Элементы.ЭлектронныеПодписи.ВыделенныеСтроки.Количество() > 1 Тогда
		ТекстВопроса = НСтр("ru = 'Удалить выделенные подписи?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Удалить выделенную подпись?'");
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("УдалитьЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗавершение(Ответ, ПараметрыВыполнения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитПодписанИзменен = Ложь;
	УдалитьПодписиИОбновитьСписок(РеквизитПодписанИзменен);
	
	Если РеквизитПодписанИзменен Тогда
		ОповеститьОбИзменении(Объект.Ссылка);
		Прочитать();
	КонецЕсли;
	
	Оповестить("ПрисоединенныйФайлПодписан", Объект.ВладелецФайла);
	
	УстановитьДоступностьКомандСпискаЭП();
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандСпискаЭП()
	
	ЕстьПодписи = (ЭлектронныеПодписи.Количество() <> 0);
	
	Элементы.ТаблицаПодписейПроверить.Доступность = ЕстьПодписи;
	Элементы.ТаблицаПодписейПроверитьВсе.Доступность = ЕстьПодписи;
	Элементы.ТаблицаПодписейОткрыть.Доступность = ЕстьПодписи;
	Элементы.ТаблицаПодписейУдалить.Доступность = ЕстьПодписи;
	Элементы.ТаблицаПодписейСохранить.Доступность = ЕстьПодписи;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандСпискаШифрования()
	
	Элементы.СертификатыШифрованияОткрытьСертификатШифрования.Доступность = Объект.Зашифрован;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыШифрованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьСертификатШифрованияВыполнить();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСертификатШифрованияВыполнить()
	
	ТекущиеДанные = Элементы.СертификатыШифрования.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	
	Если ПустаяСтрока(ТекущиеДанные.АдресСертификата) Тогда
		МодульЭлектроннаяПодписьКлиент.ОткрытьСертификат(ТекущиеДанные.Отпечаток);
	Иначе
		МодульЭлектроннаяПодписьКлиент.ОткрытьСертификат(ТекущиеДанные.АдресСертификата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораКатегорийПродолжение(СписокКатегорийДанных, Параметры)Экспорт 
	
	Модифицированность = Параметры.Модифицированность Или Модифицированность;
	Элементы.Категории.Заголовок = 
		РаботаСКатегориямиДанныхКлиентСервер.ПолучитьЗаголовокВкладкиКатегории(СписокКатегорийДанных);
		
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПослеУдаления(Элемент)
	
	СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок();
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ОткрытьФормуПодбораКатегорий(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКатегорииИзСпискаВыбранных()
	
	Если Элементы.СписокКатегорийДанных.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаления = РаботаСКатегориямиДанных.ФильтроватьСписокКатегорийДляУдаления(Объект.Ссылка, СписокКатегорийДанных, Элементы.СписокКатегорийДанных.ВыделенныеСтроки);
	Для Каждого СтрокаДляУдаления Из МассивСтрокДляУдаления Цикл
		СписокКатегорийДанных.Удалить(СписокКатегорийДанных.НайтиПоИдентификатору(СтрокаДляУдаления));
	КонецЦикла;
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		Модифицированность = Истина;
		СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Ключ", Элемент.ТекущиеДанные.Значение);
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ПараметрыФормы = Новый Структура("Ключ", Элемент.ТекущиеДанные.Значение);
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	УдалитьКатегорииИзСпискаВыбранных();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// УЧЕТ ВРЕМЕНИ

&НаСервере
Процедура ПереключитьХронометражСервер(ПараметрыОповещения)
	
	УчетВремени.ПереключитьХронометражСервер(
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		Объект.Ссылка,
		ВидыРабот,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения) Экспорт
	
	УчетВремени.ДобавитьВОтчетИОбновитьФорму(
		ПараметрыОтчета, 
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьХронометражСервер() Экспорт
	
	УчетВремени.ОтключитьХронометражСервер(
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	Объект.Ссылка,
	ЭтаФорма.Команды.ПереключитьХронометраж,
	ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометражПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		ДобавитьВОтчетИОбновитьФорму(Результат, ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
	Иначе
		ОтключитьХронометражСервер();
	КонецЕсли;  

КонецПроцедуры

&НаКлиенте
Процедура ЯвляетсяОригиналомПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ШаблонОснованиеДляСоздания) Тогда 
		ЯвляетсяОригиналом = Не ЯвляетсяОригиналом;
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя отметить как оригинал файл, созданный из шаблона.'"));
		Возврат;
	КонецЕсли;	
	
	Если ЯвляетсяОригиналом Тогда 
		
		Если Не ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(Объект.ТекущаяВерсияРасширение) Тогда 
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ЯвляетсяОригиналомПриИзмененииПродолжение",
				ЭтотОбъект);
			
			ТекстВопроса = НСтр("ru = 'Выбранный файл, возможно, не является скан-копией. 
			|Вы действительно хотите отметить его как оригинал?'");
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет, 
				НСтр("ru = 'Отметка оригинала'"));
				
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЯвляетсяОригиналомПриИзмененииПродолжение(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		ЯвляетсяОригиналом = Не ЯвляетсяОригиналом;
	КонецЕсли;
	
КонецПроцедуры

// Отрабатывает нажатие на элементе КартинкаЭП
&НаКлиенте
Процедура КартинкаЭПНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.ПодписанЭП Тогда
		Элементы.ГруппаДополнительныеДанныеСтраницы.ТекущаяСтраница = Элементы.ГруппаЭП;
	ИначеЕсли Объект.Зашифрован Тогда
		Элементы.ГруппаДополнительныеДанныеСтраницы.ТекущаяСтраница = Элементы.ГруппаШифрование;
	КонецЕсли;	
	
КонецПроцедуры

// Обработчик команды с подменю в карточке файла - продолжение
&НаКлиенте
Процедура КомандаЕщеВыбораЗначенияПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Или ТипЗнч(Результат) <> Тип("ЭлементСпискаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = "ОткрытьКаталогФайла" Тогда
		ОткрытьКаталогФайлаВыполнить();
		Возврат;
	ИначеЕсли Результат.Значение = "ОбновитьИзФайлаНаДиске" Тогда
		ОбновитьИзФайлаНаДискеВыполнить();
		Возврат;
	ИначеЕсли Результат.Значение = "ОтменитьРедактирование" Тогда
		ОтменитьРедактированиеВыполнить();
		Возврат;
	ИначеЕсли Результат.Значение = "СохранитьИзменения" Тогда
		СохранитьИзмененияВыполнить();
		Возврат;
	ИначеЕсли Результат.Значение = "Распознать" Тогда
		РаспознатьВыполнить();
	КонецЕсли;
	
КонецПроцедуры

// Отрабатывает нажатие на элементе Категории
&НаКлиенте
Процедура КартинкаКатегорииНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.ГруппаДополнительныеДанныеСтраницы.ТекущаяСтраница = Элементы.Категории;
	
КонецПроцедуры

// Отрабатывает нажатие на элементе Контроль
&НаКлиенте
Процедура КартинкаКонтрольНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КонтрольКлиент.ОбработкаКомандыКонтроль(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаФорумНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Для перехода по ссылке документ необходимо записать.'"));
		Возврат;
	КонецЕсли;	
	
	ОткрытьФорму("Справочник.ТемыОбсуждений.Форма.ФормаПросмотраТемы", 
		Новый Структура("Документ", Объект.Ссылка), ЭтаФорма, ЭтаФорма.КлючУникальности, ЭтаФорма.Окно);
	
КонецПроцедуры

// Отрабатывает нажатие на элементе КартинкаВзаимодействие
&НаКлиенте
Процедура КартинкаВзаимодействиеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Для перехода по ссылке файл необходимо записать.'"));
		Возврат;
	КонецЕсли;	
	
	ОткрытьФорму("ОбщаяФорма.ПроцессыИЗадачи",
		Новый Структура("Предмет", Объект.Ссылка), ЭтаФорма, ЭтаФорма.КлючУникальности, ЭтаФорма.Окно);
	
КонецПроцедуры

// Отрабатывает нажатие на элементе ПолныйПутьОписание
&НаКлиенте
Процедура ПолныйПутьОписаниеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ВладелецФайла) Тогда
		
		Если ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
			
			ПараметрыФормы = Новый Структура("Папка", Объект.ВладелецФайла);
			ОткрытьФорму("Справочник.Файлы.Форма.ХранилищеФайлов", ПараметрыФормы, , Объект.ВладелецФайла);
			
		Иначе
			
			ПоказатьЗначение(, Объект.ВладелецФайла);
			
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

// Отрабатывает нажатие на элементе ИконкаФайлаБольшая
&НаКлиенте
Процедура ИконкаФайлаБольшаяНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФайлВыполнить();
	
КонецПроцедуры

// Отрабатывает событие Открытие для элемента Владелец
&НаКлиенте
Процедура ВладелецОткрытие(Элемент, СтандартнаяОбработка)
	
	Если ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура("Папка", Объект.ВладелецФайла);
		ОткрытьФорму("Справочник.Файлы.Форма.ХранилищеФайлов", ПараметрыФормы, , Объект.ВладелецФайла);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура СоздатьШтампПодписиСервер()
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ЭлектронныеПодписи.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПодписанныйОбъект.Установить(Объект.ТекущаяВерсия);
	НаборЗаписей.Прочитать();
	
	РаботаСЭП.ПриЗаписиЭлектронныхПодписей(НаборЗаписей);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияДанных(Результат, ДополнительныеПараметры) Экспорт
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСобытиеЗаписиЗадачи(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия <> "Запись_Задача" Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьЗадачиПоПриложению();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗадачиПоПриложению()
	
	ЗаголовокКомандыЗадачиПоПриложению = РаботаСЗадачами.ЗаголовокКомандыЗадачиПоПриложению(Объект.Ссылка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЗадачиПоПриложению",
		"Заголовок",
		ЗаголовокКомандыЗадачиПоПриложению);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЗадачиПоПриложению",
		"Видимость",
		ЗначениеЗаполнено(ЗаголовокКомандыЗадачиПоПриложению));
	
КонецПроцедуры

&НаСервере
Процедура ВывестиPDFДокументНаСервере()
	
	СведенияОДокументеPDF = РаботаСPDFПовтИсп.НовыеСведенияОPDFДокументеНаФорме();
	СведенияОДокументеPDF.ИмяРодителяЭлемента = "ГруппаPdf";
	СведенияОДокументеPDF.ИмяРодителяКоманды = "ГруппаКомандPdf";
	
	РаботаСPDF.ВывестиPDFДокументНаФорму(ЭтотОбъект, СведенияОДокументеPDF);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКнопкиПорционногоПредпросмотра()
	
	ИмяРодителяКоманды = "ГруппаСтраницыКнопкиПеремотки";
	ОбзорФайловСервер.СоздатьКнопкиПорционногоПредпросмотра(ЭтотОбъект, ИмяРодителяКоманды);
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьКнопкиДинамическогоСписка()
	
	ОбзорФайловКлиентСервер.ОбновитьКнопкиДинамическогоСписка(
		ЭтотОбъект,
		НомерПорции,
		ВсегоПорцийПредпросмотра);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКнопкиДинамическогоСпискаКлиент()
	
	ОбзорФайловКлиентСервер.ОбновитьКнопкиДинамическогоСписка(
		ЭтотОбъект,
		НомерПорции,
		ВсегоПорцийПредпросмотра);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаВыборЗавершение(НоваяСтраница, ДополнительныеПараметры) Экспорт
	
	ЧастьВыбор(НоваяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастьВыбор(НоваяСтраница)
	
	Если НоваяСтраница = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НомерПорции = НоваяСтраница;
	
	ТекущийФайл = Объект.Ссылка;
	
	ДокументPDF = Неопределено;
	
	ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();      
	ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
	ПараметрыHTMLПредставление.Расширение = Объект.ТекущаяВерсияРасширение;
	ПараметрыHTMLПредставление.Размер = Объект.ТекущаяВерсияРазмер / 1024;
	ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
	ПараметрыHTMLПредставление.ПредпросмотрОфисныхФайлов = ПредпросмотрОфисныхФайлов;
	
	ПараметрыHTMLПредставление.НомерПорции = НомерПорции - 1; // номера для пользователя - с 1, в СУБД - с 0
	
	ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
		ТекущийФайл,
		ПараметрыHTMLПредставление,
		ДокументPDF);
	
	ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ПредставлениеHTML);
	
	Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
	МасштабироватьPDFИКартинки = ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки;
	
	ВсегоПорцийПредпросмотра = ПараметрыHTMLПредставление.ВсегоПорцийПредпросмотра;
	
	Если ДокументPDF = Неопределено Тогда
		Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
	Иначе
		Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
		ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
		Элементы.ДокументPdfПоле.НомерТекущейСтраницы = 1;
	КонецЕсли;     
	
	ОбновитьКнопкиДинамическогоСпискаКлиент();
	
КонецПроцедуры

#КонецОбласти