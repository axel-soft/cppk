#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Параметры.Свойство("ЗначениеКопирования", ЗначениеКопирования);
		Параметры.Свойство("ПредставлениеИС", ПредставлениеИС);
		Параметры.Свойство("ИнтегрированнаяСистема", ИнтегрированнаяСистема);
		Параметры.Свойство("ИмяМакета", ИмяМакета);
		Параметры.Свойство("ИзМакета", Объект.ИзМакета);
		Если Параметры.Свойство("ТипОбъектаИС") Тогда
			Объект.ТипОбъектаИС = Параметры.ТипОбъектаИС;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИмяМакета) Тогда
			Объект.УзелИнтегрированнойСистемы = ИмяМакета;
		Иначе
			Объект.УзелИнтегрированнойСистемы = ИнтегрированнаяСистема;
		КонецЕсли;
	Иначе
		Если Объект.ИзМакета Тогда
			ИмяМакета = Объект.УзелИнтегрированнойСистемы;
		Иначе
			ИнтегрированнаяСистема = Объект.УзелИнтегрированнойСистемы;
			ПредставлениеИС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Объект.УзелИнтегрированнойСистемы,
				"Наименование");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ТипОбъектаДО) Тогда
		ОбъектДокументооборота = СписокВыбораОбъектовДО().НайтиПоЗначению(Объект.ТипОбъектаДО);
		Если ОбъектДокументооборота <> Неопределено Тогда
			ПредставлениеОбъектаДО = ОбъектДокументооборота.Представление;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредставлениеИС) Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = СтрШаблон(НСтр("ru = 'Правило загрузки данных в 1С:Документооборот из %1'"), ПредставлениеИС);
		
		Элементы.ТипОбъектаИС.Заголовок = СтрШаблон(НСтр("ru = 'Объект %1'"), ПредставлениеИС);
		Элементы.ДекорацияНетДоступаКИС.Заголовок = СтрШаблон(
			НСтр("ru = 'Нет доступа к %1.'"),
			ПредставлениеИС);
	КонецЕсли;
	
	Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаИСДоступна;
	
	СтарыйШаблон = Объект.Шаблон;
	
	ГрифДоступаПоУмолчанию = Константы.ГрифДоступаПоУмолчанию.Получить();
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	Для НомерСтроки = 0 По Объект.ПравилаЗаполненияРеквизитовДО.Количество() - 1 Цикл
		Если ТекущийОбъект.ПравилаЗаполненияРеквизитовДО[НомерСтроки].Вариант = ВариантРеквизитТаблицы() Тогда
			Объект.ПравилаЗаполненияРеквизитовДО[НомерСтроки].ПравилаЗаполненияСтрокТаблицыДанныеФормы =
				ТекущийОбъект.ПравилаЗаполненияРеквизитовДО[НомерСтроки].ПравилаЗаполненияСтрокТаблицы;
		КонецЕсли;
	КонецЦикла;
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбработатьФормуСогласноВерсииСервиса();
	УстановитьДоступность();
	ОбновитьЗаголовокПечатныхФорм();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Для НомерСтроки = 0 По Объект.ПравилаЗаполненияРеквизитовДО.Количество() - 1 Цикл
		ТекущийОбъект.ПравилаЗаполненияРеквизитовДО[НомерСтроки].ПравилаЗаполненияСтрокТаблицы =
			Объект.ПравилаЗаполненияРеквизитовДО[НомерСтроки].ПравилаЗаполненияСтрокТаблицыДанныеФормы;
	КонецЦикла;
	
	ТекущийОбъект.ПрисоединяемыеПечатныеФормы.Очистить();
	Для Каждого Строка Из ПрисоединяемыеПечатныеФормы Цикл
		Если Строка.Использовать Тогда
			НоваяСтрока = ТекущийОбъект.ПрисоединяемыеПечатныеФормы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;
	КонецЦикла;
	
	ТекущийОбъект.ПредставлениеОбъектаИС = ПредставлениеОбъектаИС;
	
	МассивПредставлениеОбъектаДО = Новый Массив;
	МассивПредставлениеОбъектаДО.Добавить(ПредставлениеОбъектаДО);
	
	Если ЗначениеЗаполнено(ТекущийОбъект.ВидДокумента) Тогда
		МассивПредставлениеОбъектаДО.Добавить(Строка(ТекущийОбъект.ВидДокумента));
	КонецЕсли;
	
	ТекущийОбъект.ПредставлениеОбъектаДО = СтрСоединить(МассивПредставлениеОбъектаДО, ", ");
	
	Справочники.ПравилаЗагрузкиДанныхВДО.ПроверитьПравило(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Проверка заполнения реквизитов табличной части.
	Для Каждого Строка Из ПравилаЗаполненияРеквизитовДО.ПолучитьЭлементы() Цикл
		
		Если Строка.ОбязательноеЗаполнение И Не ПравилоЗаполнено(Строка, ПравилаЗаполненияРеквизитовДО) Тогда
			СообщитьОбОшибке(Строка);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если Строка.ЭтоТаблица
				И Не Отказ
				И ПравилоЗаполнено(Строка, ПравилаЗаполненияРеквизитовДО)
				И (Строка.Вариант = ВариантРеквизит() Или Строка.Вариант = ВариантРеквизитТаблицы()) Тогда
			Для Каждого ПодчиненнаяСтрока Из Строка.ПолучитьЭлементы() Цикл
				Если ПодчиненнаяСтрока.ОбязательноеЗаполнение
						И Не ПравилоЗаполнено(ПодчиненнаяСтрока, ПравилаЗаполненияРеквизитовДО) Тогда
					СообщитьОбОшибке(ПодчиненнаяСтрока);
					Отказ = Истина;
					Возврат;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка заполнения печатных форм.
	Если ИспользоватьРолиФайлов Тогда
		Для Каждого Строка Из ПрисоединяемыеПечатныеФормы Цикл
			Если Строка.Использовать И Не ЗначениеЗаполнено(Строка.РольФайла) Тогда
				СообщитьОбОшибкеУстановкиРоли(Строка);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(ИнтегрированнаяСистема) Тогда
		ПараметрыСеанса.УзелИнтегрированнойСистемы = ИнтегрированнаяСистема;
		Прокси = РаботаСИнтегрированнымиСистемамиПовтИсп.ПолучитьПрокси(ИнтегрированнаяСистема);
		
		Запрос = РаботаСИнтегрированнымиСистемами.СоздатьОбъект(Прокси, "DMILRelatedIntegrationRulesExistenceRequest");
		Запрос.relatedDataLoadingRule = Строка(Объект.Ссылка.УникальныйИдентификатор());
		Ответ = Прокси.execute(Запрос);
		РаботаСИнтегрированнымиСистемами.ПроверитьВозвратВебСервиса(Прокси, Ответ);
		
		ПараметрыЗаписи.Вставить("СуществуетСвязанноеПравилоИнтеграции", Ответ.exist);
	КонецЕсли;
	
	ПеренестиПравилаВОбъект(Объект, ПравилаЗаполненияРеквизитовДО);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("СуществуетСвязанноеПравилоИнтеграции")
			И Не ПараметрыЗаписи.СуществуетСвязанноеПравилоИнтеграции Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ВопросСоздатьПравилоИнтеграцииЗавершение", ЭтотОбъект);
		
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Создать в %1 связанное правило интеграции?'"), ПредставлениеИС);
		ОбщегоНазначенияДокументооборотКлиент.ПоказатьВопросДаНет(Оповещение, ТекстВопроса,,, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ЗначениеЗаполнено(ПредставлениеОбъектаИС) Тогда
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, Элементы.ТипОбъектаИС.Заголовок);
		Сообщение.Поле = "ПредставлениеОбъектаИС";
		Сообщение.Сообщить();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПредставлениеОбъектаДО) Тогда
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, Элементы.ТипОбъектаДО.Заголовок);
		Сообщение.Поле = "ПредставлениеОбъектаДО";
		Сообщение.Сообщить();
	КонецЕсли;
	
	Для Каждого Строка Из ПравилаЗаполненияРеквизитовДО.ПолучитьЭлементы() Цикл
		
		Если Строка.ИмяРеквизитаОбъектаДО = "ВидДокумента"
				И Строка.Вариант <> ВариантШаблон()
				И ЗначениеЗаполнено(Строка.ЗначениеРеквизитаДО)
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ЗначениеРеквизитаДО,
					"ЗапретитьСозданиеДокументовНеПоШаблону") Тогда
			
			Отказ = Истина;
			
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = СтрШаблон(
				НСтр("ru = 'В настройках вида документа ""%1"" установлен запрет на создание документов не по шаблону,
							|но шаблон документа не выбран.'"),
				Строка.ЗначениеРеквизитаДО);
			Сообщение.Поле = "Объект.Шаблон";
			Сообщение.Сообщить();
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписанШаблонДокумента" И Параметр.Шаблон = Объект.Шаблон Тогда
		ПриИзмененииШаблона();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ДополнительныеРеквизитыИСведения"
			Или ИмяСобытия = "Запись_НаборыДополнительныхРеквизитовИСведений" Тогда
		ОбновитьПовторноИспользуемыеЗначения();
		ЗаполнитьСтруктуруРеквизитовОбъектаДОПоПравилу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ОбщегоНазначенияДокументооборотКлиент.ВставитьВОписаниеОповещенияОЗакрытииСсылкуНаОбъект(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатие(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("ДекорацияНастройкиАвторизацииНажатиеЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИнтегрированнаяСистема", ИнтегрированнаяСистема);
	ПараметрыФормы.Вставить("ПредставлениеИС", ПредставлениеИС);
	
	ОткрытьФорму("Обработка.ПанельАдминистрированияБесшовнойИнтеграции.Форма.АвторизацияВИнтегрированнойСистеме",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатиеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		ОбработатьФормуСогласноВерсииСервиса();
		ОбновитьЗаголовокПечатныхФорм();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаДОАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	СписокВыбора = СписокВыбораОбъектовДО();
	
	Для Каждого ЭлементВыбора Из СписокВыбора Цикл
		Если СтрНайти(ВРег(ЭлементВыбора.Представление), ВРег(Текст)) > 0 Тогда
			ДанныеВыбора.Добавить(ЭлементВыбора.Значение, ЭлементВыбора.Представление);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаДОНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачальныйТипОбъектаДО = Объект.ТипОбъектаДО;
	
	Оповещение = Новый ОписаниеОповещения("ТипОбъектаДОНачалоВыбораЗавершение",
		ЭтотОбъект, НачальныйТипОбъектаДО);
	
	ПоказатьВыборИзСписка(Оповещение, СписокВыбораОбъектовДО(), Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаДОНачалоВыбораЗавершение(ВыбранноеЗначение, НачальныйТипОбъектаДО) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ТипОбъектаДО = ВыбранноеЗначение.Значение;
	ПредставлениеОбъектаДО = ВыбранноеЗначение.Представление;
	
	Если НачальныйТипОбъектаДО <> Объект.ТипОбъектаДО Тогда
		Если Объект.ТипОбъектаДО = "Справочник.ДокументыПредприятия" Тогда
			ЗаполнитьСтруктуруРеквизитовОбъектаДОПоПравилу();
		Иначе
			Объект.Шаблон = ПредопределенноеЗначение("Справочник.ШаблоныДокументов.ПустаяСсылка");
			ПриИзмененииШаблона();
		КонецЕсли;
		Модифицированность = Истина;
		ЗаполнитьПоУмолчаниюНаСервере();
	КонецЕсли;
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаДООбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НачальныйТипОбъектаДО = Объект.ТипОбъектаДО;
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ВыбранныйЭлемент = СписокВыбораОбъектовДО().НайтиПоЗначению(ВыбранноеЗначение);
		Объект.ТипОбъектаДО = ВыбранныйЭлемент.Значение;
		ПредставлениеОбъектаДО = ВыбранныйЭлемент.Представление;
		Если НачальныйТипОбъектаДО <> Объект.ТипОбъектаДО Тогда
			Если Объект.ТипОбъектаДО = "Справочник.ДокументыПредприятия" Тогда
				ЗаполнитьСтруктуруРеквизитовОбъектаДОПоПравилу();
			Иначе
				Объект.Шаблон = ПредопределенноеЗначение("Справочник.ШаблоныДокументов.ПустаяСсылка");
				ПриИзмененииШаблона();
			КонецЕсли;
			Модифицированность = Истина;
			ЗаполнитьПоУмолчаниюНаСервере();
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаДООкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СписокВыбора = СписокВыбораОбъектовДО();
	НачальныйТипОбъектаДО = Объект.ТипОбъектаДО;
	
	ДанныеВыбора = Новый СписокЗначений;
	Для Каждого ЭлементВыбора Из СписокВыбора Цикл
		Если СтрНайти(ВРег(ЭлементВыбора.Представление), ВРег(Текст)) > 0 Тогда
			ДанныеВыбора.Добавить(ЭлементВыбора.Значение, ЭлементВыбора.Представление);
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеВыбора.Количество() = 1 Тогда
		
		ВыбранноеЗначение = ДанныеВыбора[0];
		
		Объект.ТипОбъектаДО = ВыбранноеЗначение.Значение;
		ПредставлениеОбъектаДО = ВыбранноеЗначение.Представление;
		
		Если НачальныйТипОбъектаДО <> Объект.ТипОбъектаДО Тогда 
			Если Объект.ТипОбъектаДО = "Справочник.ДокументыПредприятия" Тогда
				ЗаполнитьСтруктуруРеквизитовОбъектаДОПоПравилу();
			Иначе
				Объект.Шаблон = ПредопределенноеЗначение("Справочник.ШаблоныДокументов.ПустаяСсылка");
				ПриИзмененииШаблона();
			КонецЕсли;
			Модифицированность = Истина;
			ЗаполнитьПоУмолчаниюНаСервере();
		КонецЕсли;
		
	Иначе
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаДООчистка(Элемент, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	
	Объект.ТипОбъектаДО = "";
	
	Объект.Шаблон = ПредопределенноеЗначение("Справочник.ШаблоныДокументов.ПустаяСсылка");
	ПриИзмененииШаблона();
	
	ЗаполнитьПоУмолчаниюНаСервере();
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаИСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	
	Для Каждого ЭлементВыбора Из СписокМетаданныхИС Цикл
		Если СтрНайти(ВРег(ЭлементВыбора.Представление), ВРег(Текст)) > 0 Тогда
			ДанныеВыбора.Добавить(ЭлементВыбора.Значение, ЭлементВыбора.Представление);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаИСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ТипОбъектаИСНачалоВыбораЗавершение", ЭтотОбъект);
	ПараметрФормы = Новый Структура;
	ПараметрФормы.Вставить("ТекущаяСтрока", Объект.ТипОбъектаИС);
	ПараметрФормы.Вставить("ИнтегрированнаяСистема", ИнтегрированнаяСистема);
	ПараметрФормы.Вставить("ИмяМакета", ИмяМакета);
	
	ОткрытьФорму("Справочник.ПравилаЗагрузкиДанныхВДО.Форма.ВыборОбъектаМетаданных",
		ПараметрФормы, ЭтотОбъект ,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаИСНачалоВыбораЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Объект.ТипОбъектаИС = Результат.Имя;
		ПредставлениеОбъектаИС = Результат.Синоним;
		Модифицированность = Истина;
		ПриИзмененииОбъектаИС();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаИСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ВыбранныйЭлемент = СписокМетаданныхИС.НайтиПоЗначению(ВыбранноеЗначение);
		ПредставлениеОбъектаИС =
			Сред(ВыбранныйЭлемент.Представление, СтрНайти(ВыбранныйЭлемент.Представление, ":") + 2);
		Объект.ТипОбъектаИС = ВыбранныйЭлемент.Значение;
		Модифицированность = Истина;
		ПриИзмененииОбъектаИС();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаИСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДанныеВыбора = Новый СписокЗначений;
	Для Каждого ЭлементВыбора Из СписокМетаданныхИС Цикл
		Если СтрНайти(ВРег(ЭлементВыбора.Представление), ВРег(Текст)) > 0 Тогда
			ДанныеВыбора.Добавить(ЭлементВыбора.Значение, ЭлементВыбора.Представление);
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеВыбора.Количество() = 1 Тогда
		ПредставлениеОбъектаИС = Сред(ДанныеВыбора[0].Представление, СтрНайти(ДанныеВыбора[0].Представление, ":") + 2);
		Объект.ТипОбъектаИС = ДанныеВыбора[0].Значение;
		Модифицированность = Истина;
		ПриИзмененииОбъектаИС();
	Иначе
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбъектаИСОчистка(Элемент, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	
	Объект.ТипОбъектаИС = "";
	ПриИзмененииОбъектаИС();
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонПриИзменении(Элемент)
	
	ПриИзмененииШаблона();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипФайловСохраненияПечатныхФормОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипФайловСохраненияПечатныхФормПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.ТипФайловСохраненияПечатныхФорм) Тогда
		Объект.ТипФайловСохраненияПечатныхФорм =
			РаботаСИнтегрированнымиСистемамиВызовСервера.ТипФайлаСохраняемойПечатнойФормыПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрисоединяемыеПечатныеФормы

&НаКлиенте
Процедура ПрисоединяемыеПечатныеФормыИспользоватьПриИзменении(Элемент)
	
	ОбновитьЗаголовокПечатныхФорм();
	ПеренестиПечатныеФормыВОбъект();
	
	ТекущиеДанные = Элементы.ПрисоединяемыеПечатныеФормы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.Обновлять = ТекущиеДанные.Использовать;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединяемыеПечатныеФормыРольФайлаПриИзменении(Элемент)
	
	ПеренестиПечатныеФормыВОбъект();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединяемыеПечатныеФормыОбновлятьПриИзменении(Элемент)
	
	ПеренестиПечатныеФормыВОбъект();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединяемыеПечатныеФормыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединяемыеПечатныеФормыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПравилаЗаполненияРеквизитовДО

&НаКлиенте
Процедура ПравилаЗаполненияРеквизитовДОПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗаполненияРеквизитовДОПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ПравилаЗаполненияРеквизитовДО.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		Если Родитель.Вариант = ВариантВыражение() Тогда
			ПоказатьПредупреждение(,
				НСтр("ru = 'Таблица заполняется целиком из выражения на встроенном языке.
					|Настройка заполнения отдельных реквизитов таблицы недоступна.'"));
			Возврат;
		КонецЕсли;
		Если Родитель.Вариант = ВариантРеквизитТаблицы()
				И ТипЗнч(Родитель.ПравилаЗаполненияСтрокТаблицы) = Тип("ХранилищеЗначения")
				И РаботаСИнтегрированнымиСистемамиВызовСервера.КоличествоСтрокЗаполненияТаблицы(
					Родитель.ПравилаЗаполненияСтрокТаблицы) > 1 Тогда
			ПоказатьПредупреждение(,
				НСтр("ru = 'Заполнение нескольких строк настраивается для таблицы в целом.
					|Настройка заполнения отдельных реквизитов таблицы недоступна.'"));
			Возврат;
		КонецЕсли;
		Если Родитель.Вариант = ВариантШаблон() Тогда
			ПоказатьПредупреждение(,
				НСтр("ru = 'Таблица заполняется целиком из шаблона.
					|Настройка заполнения отдельных реквизитов таблицы недоступна.'"));
			Возврат;
		КонецЕсли;
		Если Родитель.Вариант = ВариантПустой() Тогда
			ПоказатьПредупреждение(,
				НСтр("ru = 'Вначале нужно выбрать вариант заполнения таблицы.'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ID");
	ПараметрыФормы.Вставить("ИмяРеквизитаОбъектаДО");
	ПараметрыФормы.Вставить("ПредставлениеРеквизитаОбъектаДО");
	ПараметрыФормы.Вставить("Подсказка");
	ПараметрыФормы.Вставить("ТипРеквизитаОбъектаДО");
	ПараметрыФормы.Вставить("Вариант");
	ПараметрыФормы.Вставить("ВычисляемоеВыражение");
	ПараметрыФормы.Вставить("ПравилаЗаполненияСтрокТаблицы");
	ПараметрыФормы.Вставить("МестоВыполненияВыражения");
	ПараметрыФормы.Вставить("ЗначениеРеквизитаДО");
	ПараметрыФормы.Вставить("ДополнительныйРеквизитДО");
	ПараметрыФормы.Вставить("ИмяРеквизитаОбъектаИС");
	ПараметрыФормы.Вставить("ПредставлениеРеквизитаОбъектаИС");
	ПараметрыФормы.Вставить("Обновлять");
	ПараметрыФормы.Вставить("ВозможноЗаполнениеИзШаблона");
	ПараметрыФормы.Вставить("ШаблонЗначение");
	ПараметрыФормы.Вставить("ШаблонЗапрещаетИзменение", ШаблонЗапрещаетИзменение);
	
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ТекущиеДанные);
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	ПараметрыФормы.Вставить("Зависимый", (Родитель <> Неопределено));
	ПараметрыФормы.Вставить("ОбновлятьРодитель", ?(Родитель <> Неопределено, Родитель.Обновлять, Неопределено));
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Таблица) Тогда
		Если Родитель.Вариант = ВариантРеквизит() Тогда
			ПараметрыФормы.Вставить("Таблица", Родитель.ИмяРеквизитаОбъектаИС);
		Иначе
			ПараметрыФормы.Вставить("Таблица", "");
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ИнтегрированнаяСистема", ИнтегрированнаяСистема);
	ПараметрыФормы.Вставить("ПредставлениеИС", ПредставлениеИС);
	ПараметрыФормы.Вставить("ИмяМакета", ИмяМакета);
	ПараметрыФормы.Вставить("ПредставлениеОбъектаИС", ПредставлениеОбъектаИС);
	ПараметрыФормы.Вставить("ПолноеИмяОбъектаДО", Объект.ТипОбъектаДО);
	ПараметрыФормы.Вставить("ПолноеИмяОбъектаИС", Объект.ТипОбъектаИС);
	ПараметрыФормы.Вставить("ВидДокумента", Объект.ВидДокумента);
	
	ПараметрыОтбораЗначения = Новый Структура();
	Для Каждого Элемент Из ТекущиеДанные.СвязиПараметровВыбора Цикл
		Отбор = "Владелец";
		МассивИмяОтбора = СтрРазделить(Элемент.Значение.Имя, ".");
		Если МассивИмяОтбора.Количество() = 2 И МассивИмяОтбора[0] = "Отбор" Тогда
			Отбор = МассивИмяОтбора[1];
		КонецЕсли;
		
		Таблица = "";
		ИмяРеквизита = "";
		МассивПуть = СтрРазделить(Элемент.Значение.ПутьКДанным, ".");
		Если МассивПуть.Количество() = 1 Тогда
			ИмяРеквизита = МассивПуть[0];
		ИначеЕсли МассивПуть.Количество() = 2 Тогда
			Таблица = МассивПуть[0];
			ИмяРеквизита = МассивПуть[1];
		КонецЕсли;
		
		НайденныеСтроки = ПравилаЗаполненияРеквизитовДОНайтиСтроки(ИмяРеквизита, Таблица);
		
		Если НайденныеСтроки.Количество() = 1 И ЗначениеЗаполнено(НайденныеСтроки[0].ЗначениеРеквизитаДО) Тогда
			ПараметрыОтбораЗначения.Вставить(Отбор, НайденныеСтроки[0].ЗначениеРеквизитаДО);
		КонецЕсли;
	КонецЦикла;
	ПараметрыФормы.Вставить("ПараметрыОтбораЗначения", ПараметрыОтбораЗначения);
	
	ПараметрыФормы.Вставить("ЭтоПолноправныйПользователь", ЭтоПолноправныйПользователь);
	
	Если ТекущиеДанные.ЭтоТаблица Тогда
		ОткрываемаяФорма = "Справочник.ПравилаЗагрузкиДанныхВДО.Форма.ФормаПравилаДляТаблицы"
	Иначе
		ОткрываемаяФорма = "Справочник.ПравилаЗагрузкиДанныхВДО.Форма.ФормаПравила"
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПравилаЗаполненияРеквизитовДОПередНачаломИзмененияЗавершение",
		ЭтотОбъект, ТекущиеДанные);
	
	ОткрытьФорму(
		ОткрываемаяФорма,
		ПараметрыФормы,
		ЭтотОбъект,,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗаполненияРеквизитовДОПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ПравилаЗаполненияРеквизитовДО.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ШаблонЗапрещаетИзменение И ТекущиеДанные.Вариант = ВариантШаблон() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Выбранный шаблон запрещает изменение реквизитов.'"));
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ИмяРеквизитаОбъектаДО = "ВидДокумента" И ТекущиеДанные.Вариант = ВариантШаблон() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Вид документа указан в шаблоне и не может быть изменен.'"));
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"ПравилаЗаполненияРеквизитовДОПередУдалениемЗавершение", ЭтотОбъект, ТекущиеДанные);
	
	ТекстВопроса = НСтр("ru = 'Очистить правило заполнения?'");
	ОбщегоНазначенияДокументооборотКлиент.ПоказатьВопросДаНет(Оповещение, ТекстВопроса,,, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗаполненияРеквизитовДОПередУдалениемЗавершение(Результат, ТекущиеДанные) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьПравилоЗаполнения(ТекущиеДанные);
	ПриИзмененииПравилаЗаполненияРеквизита(ТекущиеДанные);
	ПеренестиПравилаВОбъект(Объект, ПравилаЗаполненияРеквизитовДО);
	
	Если ТекущиеДанные.ИмяРеквизитаОбъектаДО = "ВидДокумента" Тогда
		Объект.ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументов.ПустаяСсылка");
		ЗаполнитьСтруктуруРеквизитовОбъектаДОПоПравилу();
		ЗаполнитьПоУмолчаниюНаСервере(Ложь);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоУмолчанию(Команда)
	
	НужноЗадатьВопрос = Ложь;
	
	Для Каждого Строка Из ПравилаЗаполненияРеквизитовДО.ПолучитьЭлементы() Цикл
		Если ЗначениеЗаполнено(Строка.ВычисляемоеВыражение)
				Или ЗначениеЗаполнено(Строка.ПравилаЗаполненияСтрокТаблицы)
				Или ЗначениеЗаполнено(Строка.ЗначениеРеквизитаДО)
				Или ЗначениеЗаполнено(Строка.ИмяРеквизитаОбъектаИС) Тогда
			НужноЗадатьВопрос = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НужноЗадатьВопрос Тогда
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоУмолчаниюЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Правила будут заполнены по умолчанию. Заполнить?'");
		ОбщегоНазначенияДокументооборотКлиент.ПоказатьВопросДаНет(
			Оповещение,
			ТекстВопроса,,,
			КодВозвратаДиалога.Нет);
	Иначе
		ЗаполнитьПоУмолчаниюНаСервере(,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоУмолчаниюЗавершение(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоУмолчаниюНаСервере(,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Скопировать(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПредставлениеИС", ПредставлениеИС);
	ПараметрыФормы.Вставить("ИнтегрированнаяСистема", ИнтегрированнаяСистема);
	ПараметрыФормы.Вставить("ИмяМакета", ИмяМакета);
	ПараметрыФормы.Вставить("ИзМакета", ЗначениеЗаполнено(ИмяМакета));
	ПараметрыФормы.Вставить("ЗначениеКопирования", Объект.Ссылка);
	
	ОткрытьФорму("Справочник.ПравилаЗагрузкиДанныхВДО.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Клиент

&НаКлиенте
Процедура ВопросСоздатьПравилоИнтеграцииЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СоздатьСвязанноеПравилоИнтеграцииВИС(
			ИнтегрированнаяСистема,
			Объект.Ссылка,
			Объект.ВидДокумента,
			Объект.ТипОбъектаДО,
			Объект.ТипОбъектаИС,
			Объект.ПредставлениеОбъектаДО,
			Объект.Комментарий);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокПечатныхФорм()
	
	Количество = 0;
	Для Каждого СтрокаФормы Из ПрисоединяемыеПечатныеФормы Цикл
		Количество = Количество + ?(СтрокаФормы.Использовать, 1, 0);
	КонецЦикла;
	
	ЗаголовокЗакладки = НСтр("ru = 'Добавление печатных форм'");
	Если Количество > 0 Тогда
		ЗаголовокЗакладки = СтрШаблон("%1 (%2)", ЗаголовокЗакладки, Количество);
	КонецЕсли;
	Элементы.ГруппаПрисоединяемыеПечатныеФормы.Заголовок = ЗаголовокЗакладки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПравилоЗаполнения(Правило, ДоступноРедактирование = Неопределено)
	
	ЗаполнитьЗначенияСвойств(Правило, СтруктураДляОчисткиПравила(Правило.Вариант));
	
	Если ДоступноРедактирование = Неопределено Тогда
		Родитель = Неопределено;
		Если ТипЗнч(Правило) = Тип("ДанныеФормыЭлементДерева") Тогда
			Родитель = Правило.ПолучитьРодителя();
		ИначеЕсли ТипЗнч(Правило) = Тип("СтрокаДереваЗначений") Тогда
			Родитель = Правило.Родитель;
		КонецЕсли;
		Правило.ДоступноРедактирование = (Родитель = Неопределено)
			Или ДоступноРедактированиеПодчиненных(Родитель.Вариант, Родитель.ПравилаЗаполненияСтрокТаблицы);
	Иначе
		Правило.ДоступноРедактирование = ДоступноРедактирование;
	КонецЕсли;
	
	Если Правило.ЭтоТаблица Тогда
		ПодчиненныеПравила = Неопределено;
		Если ТипЗнч(Правило) = Тип("ДанныеФормыЭлементДерева") Тогда
			ПодчиненныеПравила = Правило.ПолучитьЭлементы();
		ИначеЕсли ТипЗнч(Правило) = Тип("СтрокаДереваЗначений") Тогда
			ПодчиненныеПравила = Правило.Строки;
		КонецЕсли;
		
		Если ПодчиненныеПравила <> Неопределено Тогда
			Для Каждого ПодчиненноеПравило Из ПодчиненныеПравила Цикл
				ОчиститьПравилоЗаполнения(ПодчиненноеПравило);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилаЗаполненияРеквизитовДОПередНачаломИзмененияЗавершение(Результат, ТекущиеДанные) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат);
	Модифицированность = Истина;
	
	Если ТекущиеДанные.ЭтоТаблица Тогда
		
		// Обновим подчиненные строки таблицы.
		ДоступноРедактированиеПодчиненных = ДоступноРедактированиеПодчиненных(
			ТекущиеДанные.Вариант,
			ТекущиеДанные.ПравилаЗаполненияСтрокТаблицы);
		Если ДоступноРедактированиеПодчиненных Тогда
			ПравилаЗаполненияСтрок =
				РаботаСИнтегрированнымиСистемамиВызовСервера.ПравилаЗаполненияСтрокТаблицыИзХранилища(
					Результат.ПравилаЗаполненияСтрокТаблицы,
					?(ЗначениеЗаполнено(ИнтегрированнаяСистема), ИнтегрированнаяСистема, ИмяМакета),
					Объект.ТипОбъектаДО,
					Объект.ТипОбъектаИС,
					ТекущиеДанные.ИмяРеквизитаОбъектаДО,
					ТекущиеДанные.Обновлять,
					Объект.ВидДокумента);
		КонецЕсли;
		
		Для Каждого ПодчиненноеПравило Из ТекущиеДанные.ПолучитьЭлементы() Цикл
			ПодчиненноеПравило.Обновлять = ТекущиеДанные.Обновлять;
			ПодчиненноеПравило.ДоступноРедактирование = ДоступноРедактированиеПодчиненных;
			
			Если ДоступноРедактированиеПодчиненных Тогда
				
				Если ТекущиеДанные.Вариант = ВариантРеквизит() Тогда
					// Таблица объекта ДО заполняется из таблицы объекта ИС.
					Если ПодчиненноеПравило.Вариант = ВариантРеквизит()
							И СтрНайти(ПодчиненноеПравило.ИмяРеквизитаОбъектаИС, ".") > 0
							И Не СтрНачинаетсяС(ПодчиненноеПравило.ИмяРеквизитаОбъектаИС,
								ТекущиеДанные.ИмяРеквизитаОбъектаИС) Тогда
						// Реквизит заполняется из реквизита другой таблицы.
						ОчиститьПравилоЗаполнения(ПодчиненноеПравило, ДоступноРедактированиеПодчиненных);
						
					ИначеЕсли ПодчиненноеПравило.Вариант = ВариантПустой()
							Или ПодчиненноеПравило.Вариант = ВариантШаблон()
							Или (ПодчиненноеПравило.Вариант = ВариантВыражение()
								И Не ЗначениеЗаполнено(ПодчиненноеПравило.ВычисляемоеВыражение)) Тогда
						ОчиститьПравилоЗаполнения(ПодчиненноеПравило, ДоступноРедактированиеПодчиненных);
						
					КонецЕсли;
					
				ИначеЕсли ТекущиеДанные.Вариант = ВариантРеквизитТаблицы() Тогда
					// Таблица объекта ДО заполняется по правилам для отдельных реквизитов.
					Если ПравилаЗаполненияСтрок.Количество() = 0 Тогда
						// Настройка заполнения не задана.
						ОчиститьПравилоЗаполнения(ПодчиненноеПравило, ДоступноРедактированиеПодчиненных);
					ИначеЕсли ПравилаЗаполненияСтрок.Количество() = 1 Тогда
						// Задана настройка заполнения первой строки. Перенесем настройки в форму.
						ЗаполнитьЗначенияСвойств(
							ПодчиненноеПравило,
							ПравилаЗаполненияСтрок[0][ПодчиненноеПравило.ИмяРеквизитаОбъектаДО]);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				ОчиститьПравилоЗаполнения(ПодчиненноеПравило, Ложь);
				ПодчиненноеПравило.Вариант = ТекущиеДанные.Вариант;
				Если ПодчиненноеПравило.Вариант = ВариантРеквизитТаблицы() Тогда
					ПодчиненноеПравило.Пояснение = НСтр("ru = 'Заполнение реквизита настроено в правиле заполнения таблицы'");
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Элементы.ПравилаЗаполненияРеквизитовДО.Развернуть(ТекущиеДанные.ПолучитьИдентификатор());
		
	КонецЕсли;
	
	ПриИзмененииПравилаЗаполненияРеквизита(ТекущиеДанные);
	ПеренестиПравилаВОбъект(Объект, ПравилаЗаполненияРеквизитовДО);
	
	Если ТекущиеДанные.ИмяРеквизитаОбъектаДО = "ВидДокумента"
			И ТекущиеДанные.Вариант = ВариантЗначение()
			И Объект.ВидДокумента <> ТекущиеДанные.ЗначениеРеквизитаДО Тогда
		Объект.ВидДокумента = ТекущиеДанные.ЗначениеРеквизитаДО;
		ЗаполнитьСтруктуруРеквизитовОбъектаДОПоПравилу();
		ЗаполнитьПоУмолчаниюНаСервере(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОбъектаИС()
	
	Если ЗначениеЗаполнено(Объект.ТипОбъектаИС) И ЗначениеЗаполнено(ПредставлениеОбъектаИС) Тогда
		Оповещение = Новый ОписаниеОповещения("ПриИзмененииОбъектаИСЗавершение", ЭтотОбъект);
		
		ТекстВопроса = СтрШаблон(
			НСтр("ru = 'Установить заполнение реквизитов из объекта ""%1""?'"),
			ПредставлениеОбъектаИС);
		ОбщегоНазначенияДокументооборотКлиент.ПоказатьВопросДаНет(Оповещение, ТекстВопроса,,, КодВозвратаДиалога.Да);
		
		ЗаполнитьСписокПечатныхФорм();
		ОбновитьЗаголовокПечатныхФорм();
	Иначе
		ЗаполнитьПоУмолчаниюНаСервере(Ложь, Ложь, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОбъектаИСЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоУмолчаниюНаСервере(Ложь, Истина, Истина);
	Иначе
		ЗаполнитьПоУмолчаниюНаСервере(Ложь, Ложь, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПравилаЗаполненияРеквизита(ТекущиеДанные)
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Таблица) Тогда
		Родитель = ТекущиеДанные.ПолучитьРодителя();
		Если Родитель <> Неопределено И Родитель.Вариант = ВариантРеквизитТаблицы() Тогда
			ПоместитьПравилоЗаполненияРеквизитаСтрокиВХранилище(
				ТекущиеДанные.ПолучитьИдентификатор(),
				Родитель.ПравилаЗаполненияСтрокТаблицы);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииШаблона()
	
	ОбновитьДанныеИзШаблона();
	ЗаполнитьСтруктуруРеквизитовОбъектаДОПоПравилу();
	
	Модифицированность = Истина;
	
	ЗаполнитьПоУмолчаниюНаСервере(Ложь);
	
	Если Объект.Шаблон <> СтарыйШаблон И ЗначениеЗаполнено(Объект.Шаблон) И Не ШаблонЗапрещаетИзменение Тогда
		Оповещение = Новый ОписаниеОповещения(
			"ПриИзмененииШаблонаЗавершение", ЭтотОбъект, Объект.Шаблон);
		
		ТекстВопроса = НСтр("ru = 'Установить заполнение реквизитов из шаблона?'");
		ОбщегоНазначенияДокументооборотКлиент.ПоказатьВопросДаНет(Оповещение, ТекстВопроса,,, КодВозвратаДиалога.Да);
	КонецЕсли;
	
	СтарыйШаблон = Объект.Шаблон;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииШаблонаЗавершение(Результат, Шаблон) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УстановитьЗаполнениеРеквизитовИзШаблона(Шаблон);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибке(Строка)
	
	Элементы.ПравилаЗаполненияРеквизитовДО.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПравилаЗаполненияРеквизитов;
	
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = СтрШаблон(
		НСтр("ru = 'Не установлено правило для обязательного %1 ""%2""'"),
		?(Строка.ЭтоТаблица, НСтр("ru = 'списка'"), НСтр("ru = 'реквизита'")),
		Строка.ПредставлениеРеквизитаОбъектаДО);
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкеУстановкиРоли(Строка)
	
	Элементы.ПрисоединяемыеПечатныеФормы.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПрисоединяемыеПечатныеФормы;
	
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = СтрШаблон(
		НСтр("ru = 'Не указана роль файла для печатной формы ""%1""'"),
		Строка.ПредставлениеКоманды);
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступность()
	
	Элементы.ТипОбъектаИС.Доступность = ЗначениеЗаполнено(Объект.ТипОбъектаДО);
	Элементы.ТипФайловСохраненияПечатныхФорм.Доступность = ЗначениеЗаполнено(Объект.ТипОбъектаДО);
	Элементы.ПрисоединяемыеПечатныеФормы.Доступность = ЗначениеЗаполнено(Объект.ТипОбъектаДО);
	Элементы.Шаблон.Доступность = (Объект.ТипОбъектаДО = "Справочник.ДокументыПредприятия");
	
КонецПроцедуры

#КонецОбласти

#Область КлиентСервер

// Возвращает значение ПеречислениеСсылка.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке
//
&НаКлиентеНаСервереБезКонтекста
Функция ВариантВыражение()
	
	Возврат ПредопределенноеЗначение("Перечисление.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке");
	
КонецФункции

// Возвращает значение ПеречислениеСсылка.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение
//
&НаКлиентеНаСервереБезКонтекста
Функция ВариантЗначение()
	
	Возврат ПредопределенноеЗначение("Перечисление.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение");
	
КонецФункции

// Возвращает значение ПеречислениеСсылка.ВариантыПравилЗаполненияРеквизитов.ПустаяСсылка
//
&НаКлиентеНаСервереБезКонтекста
Функция ВариантПустой()
	
	Возврат ПредопределенноеЗначение("Перечисление.ВариантыПравилЗаполненияРеквизитов.ПустаяСсылка");
	
КонецФункции

// Возвращает значение ПеречислениеСсылка.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта
//
&НаКлиентеНаСервереБезКонтекста
Функция ВариантРеквизит()
	
	Возврат ПредопределенноеЗначение("Перечисление.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта");
	
КонецФункции

// Возвращает значение ПеречислениеСсылка.ВариантыПравилЗаполненияРеквизитов.РеквизитТаблицы
//
&НаКлиентеНаСервереБезКонтекста
Функция ВариантРеквизитТаблицы()
	
	Возврат ПредопределенноеЗначение("Перечисление.ВариантыПравилЗаполненияРеквизитов.РеквизитТаблицы");
	
КонецФункции

// Возвращает значение ПеречислениеСсылка.ВариантыПравилЗаполненияРеквизитов.ИзШаблона
//
&НаКлиентеНаСервереБезКонтекста
Функция ВариантШаблон()
	
	Возврат ПредопределенноеЗначение("Перечисление.ВариантыПравилЗаполненияРеквизитов.ИзШаблона");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПеренестиПравилаВОбъект(Объект, ПравилаЗаполненияРеквизитовДО, Модифицированность = Неопределено)
	
	Если Модифицированность <> Неопределено Тогда
		ПравилаДо = Объект.ПравилаЗаполненияРеквизитовДО.Выгрузить();
	КонецЕсли;
	
	Объект.ПравилаЗаполненияРеквизитовДО.Очистить();
	ЭлементыДерева = ПравилаЗаполненияРеквизитовДО.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		Если ПравилоЗаполнено(ЭлементДерева) Тогда
			
			НоваяСтрока = Объект.ПравилаЗаполненияРеквизитовДО.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементДерева);
			Если ТипЗнч(ЭлементДерева.ЗначениеРеквизитаДО) = Тип("Строка") Тогда
				НоваяСтрока.ЗначениеРеквизитаДОСтрока = ЭлементДерева.ЗначениеРеквизитаДО;
			КонецЕсли;
			НоваяСтрока.ПравилаЗаполненияСтрокТаблицыДанныеФормы = ЭлементДерева.ПравилаЗаполненияСтрокТаблицы;
			
			Если ЭлементДерева.ЭтоТаблица Тогда
				Для Каждого ПодчиненноеПравило Из ЭлементДерева.ПолучитьЭлементы() Цикл
					Если ПравилоЗаполнено(ПодчиненноеПравило) И ЭлементДерева.Вариант <> ВариантРеквизитТаблицы() Тогда
						НоваяСтрока = Объект.ПравилаЗаполненияРеквизитовДО.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ПодчиненноеПравило);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.ПравилаЗаполненияРеквизитовДО.Сортировать("Порядок");
	
	Если Модифицированность <> Неопределено Тогда
		ПравилаПосле = Объект.ПравилаЗаполненияРеквизитовДО.Выгрузить();
	КонецЕсли;
	
#Если Сервер Тогда
	Если Модифицированность <> Неопределено Тогда
		Модифицированность = Модифицированность
			Или Не ОбщегоНазначения.КоллекцииИдентичны(
				ПравилаДо,
				ПравилаПосле,,
				"Порядок, ИсходныйНомерСтроки, ПравилаЗаполненияСтрокТаблицыДанныеФормы",
				Истина)
			Или Не ПравилаЗаполненияСтрокТаблицыИдентичны(ПравилаДо, ПравилаПосле);
	КонецЕсли;
#КонецЕсли
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПравилаЗаполненияСтрокТаблицыИдентичны(ПравилаДо, ПравилаПосле)
	
	КолВоСтрокДо = ПравилаДо.Количество();
	КолВоСтрокПосле = ПравилаПосле.Количество();
	
	Если КолВоСтрокДо <> КолВоСтрокПосле Тогда
		Возврат Ложь;
	КонецЕсли;
	
#Если Сервер Тогда
	Для НомерСтроки = 0 По КолВоСтрокДо - 1 Цикл
		Если ПравилаДо[НомерСтроки].Вариант <> ПравилаПосле[НомерСтроки].Вариант Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ПравилаДо[НомерСтроки].Вариант <> ВариантРеквизитТаблицы() Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ПравилаДо[НомерСтроки].ПравилаЗаполненияСтрокТаблицыДанныеФормы) <> Тип("ХранилищеЗначения") Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ТипЗнч(ПравилаПосле[НомерСтроки].ПравилаЗаполненияСтрокТаблицыДанныеФормы) <> Тип("ХранилищеЗначения") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ПравилаЗаполненияСтрокТаблицыДо = ПравилаДо[НомерСтроки].ПравилаЗаполненияСтрокТаблицыДанныеФормы.Получить();
		ПравилаЗаполненияСтрокТаблицыПосле = ПравилаПосле[НомерСтроки].ПравилаЗаполненияСтрокТаблицыДанныеФормы.Получить();
		Если ТипЗнч(ПравилаЗаполненияСтрокТаблицыДо) <> Тип("ТаблицаЗначений") Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ТипЗнч(ПравилаЗаполненияСтрокТаблицыПосле) <> Тип("ТаблицаЗначений") Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ПравилаИдентичны = ОбщегоНазначения.КоллекцииИдентичны(
			ПравилаЗаполненияСтрокТаблицыДо,
			ПравилаЗаполненияСтрокТаблицыПосле);
		Если Не ПравилаИдентичны Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
#КонецЕсли
	
	Возврат Истина;
	
КонецФункции

// Возвращает Истина, если правило выгрузки заполнено. Для таблиц проверяются и подчиненные правила
//
&НаКлиентеНаСервереБезКонтекста
Функция ПравилоЗаполнено(Правило, Правила = Неопределено)
	
	Если Правило.ЭтоТаблица Тогда
		// Таблица.
		Если Правило.Вариант = ВариантРеквизит() И ЗначениеЗаполнено(Правило.ИмяРеквизитаОбъектаИС) Тогда
			Возврат Истина;
			
		ИначеЕсли Правило.Вариант = ВариантРеквизитТаблицы() И ЗначениеЗаполнено(Правило.ПравилаЗаполненияСтрокТаблицы) Тогда
			Возврат Истина;
			
		ИначеЕсли Правило.Вариант = ВариантВыражение() И ЗначениеЗаполнено(Правило.ВычисляемоеВыражение) Тогда
			Возврат Истина;
			
		ИначеЕсли Правило.Вариант = ВариантШаблон() Тогда
			Возврат Истина;
			
		Иначе
			Возврат Ложь;
			
		КонецЕсли;
		
	ИначеЕсли Правило.Таблица <> "" Тогда
		// Реквизит таблицы.
		Если Правило.Вариант = ВариантРеквизит() И ЗначениеЗаполнено(Правило.ИмяРеквизитаОбъектаИС) Тогда
			Возврат Истина;
			
		ИначеЕсли Правило.Вариант = ВариантЗначение() И ЗначениеЗаполнено(Правило.ЗначениеРеквизитаДО) Тогда
			Возврат Истина;
			
		ИначеЕсли Правило.Вариант = ВариантВыражение() И ЗначениеЗаполнено(Правило.ВычисляемоеВыражение) Тогда
			Возврат Истина;
			
		ИначеЕсли Правило.Вариант = ВариантШаблон() Тогда
			Возврат Истина;
			
		ИначеЕсли Правило.Вариант = ВариантРеквизитТаблицы() Тогда
			Возврат Не Правило.ДоступноРедактирование;
			
		Иначе
			Возврат Ложь;
			
		КонецЕсли;
		
	Иначе
		// Обычный реквизит.
		Возврат ЗначениеЗаполнено(Правило.Вариант)
			И (ЗначениеЗаполнено(Правило.ИмяРеквизитаОбъектаИС)
				Или ЗначениеЗаполнено(Правило.ЗначениеРеквизитаДО)
				Или ЗначениеЗаполнено(Правило.ВычисляемоеВыражение)
				Или Правило.Вариант = ВариантШаблон());
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СписокВыбораОбъектовДО()
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("Справочник.ДокументыПредприятия", НСтр("ru = 'Документ'"));
	СписокВыбора.Добавить("Справочник.Контрагенты", НСтр("ru = 'Контрагент'"));
	СписокВыбора.Добавить("Справочник.Мероприятия", НСтр("ru = 'Мероприятие'"));
	
	Возврат СписокВыбора;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураДляОчисткиПравила(Вариант)
	
	СтруктураДляОчисткиПравила = Новый Структура;
	
	Если Вариант = ВариантВыражение() Тогда
		СтруктураДляОчисткиПравила.Вставить("ID", "");
	КонецЕсли;
	
	СтруктураДляОчисткиПравила.Вставить("Вариант", ВариантПустой());
	СтруктураДляОчисткиПравила.Вставить("ВычисляемоеВыражение", "");
	СтруктураДляОчисткиПравила.Вставить("ПравилаЗаполненияСтрокТаблицы", Неопределено);
	СтруктураДляОчисткиПравила.Вставить("ЗначениеРеквизитаДО", Неопределено);
	СтруктураДляОчисткиПравила.Вставить("ИмяРеквизитаОбъектаИС", "");
	СтруктураДляОчисткиПравила.Вставить("Картинка", 0);
	СтруктураДляОчисткиПравила.Вставить("МестоВыполненияВыражения",
		ПредопределенноеЗначение("Перечисление.МестаВыполненияВыраженийНаВстроенномЯзыке.ПустаяСсылка"));
	СтруктураДляОчисткиПравила.Вставить("Обновлять", Ложь);
	СтруктураДляОчисткиПравила.Вставить("Пояснение", "");
	СтруктураДляОчисткиПравила.Вставить("ПредставлениеРеквизитаОбъектаИС", "");
	
	Возврат СтруктураДляОчисткиПравила;
	
КонецФункции

#КонецОбласти

#Область Сервер

&НаСервере
Процедура ДополнитьПравилаЗаполнения(ПравилаЗаполнения, РеквизитыОбъектаИС, ИмяРеквизитаОбъектаДО, ИмяРеквизитаИС)
	
	Если ПравилаЗаполнения.Получить(ИмяРеквизитаОбъектаДО) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого РеквизитИС Из РеквизитыОбъектаИС Цикл
		Если РеквизитИС.Имя = ИмяРеквизитаИС Тогда
			ПравилаЗаполнения.Вставить(ИмяРеквизитаОбъектаДО,
				Новый Структура("Имя, Представление",
					РеквизитИС.Имя,
					РеквизитИС.Синоним));
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДоступноРедактированиеПодчиненных(РодительВариант, РодительПравилаЗаполненияСтрокТаблицы)
	
	ЗаполнениеИзНесколькихСтрок = (РодительВариант = ВариантРеквизитТаблицы()
		И РаботаСИнтегрированнымиСистемамиВызовСервера.КоличествоСтрокЗаполненияТаблицы(
			РодительПравилаЗаполненияСтрокТаблицы) > 1);
	
	Возврат (Не ЗаполнениеИзНесколькихСтрок
			И РодительВариант <> ВариантВыражение()
			И РодительВариант <> ВариантШаблон()
			И РодительВариант <> ВариантПустой());
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоУмолчаниюНаСервере(ЗаполнятьИзШаблона = Истина, ЗаполнятьИзОбъектаИС = Ложь,
		ПриИзмененииОбъектаИС = Ложь)
	
	РеквизитыОбъектаИС = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.ТипОбъектаИС) Тогда
		Если ЗначениеЗаполнено(ИнтегрированнаяСистема) Тогда
			СтруктураМетаданных = РаботаСИнтегрированнымиСистемами.СписокРеквизитовОбъектаИнтегрированнойСистемы(
				ИнтегрированнаяСистема, Объект.ТипОбъектаИС);
		Иначе
			СтруктураМетаданных = РаботаСИнтегрированнымиСистемами.СписокРеквизитовОбъектаИнтегрированнойСистемы(
				ИмяМакета, Объект.ТипОбъектаИС);
		КонецЕсли;
		
		Для Каждого ЭлементСпискаМетаданных Из СтруктураМетаданных Цикл
			Если ЭлементСпискаМетаданных.Имя = "Реквизиты" Тогда
				РеквизитыОбъектаИС = ЭлементСпискаМетаданных.Строки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПравилаЗаполнения = Новый Соответствие;
	
	// Приоритетные соответствия
	Если РеквизитыОбъектаИС.Количество() > 0 Тогда
		Если Объект.ТипОбъектаДО = "Справочник.ДокументыПредприятия" Тогда
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, РеквизитыОбъектаИС, "Заголовок", "Представление");
			
		ИначеЕсли Объект.ТипОбъектаДО = "Справочник.Контрагенты" Тогда
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, РеквизитыОбъектаИС, "Наименование", "Представление");
			
		ИначеЕсли Объект.ТипОбъектаДО = "Справочник.Мероприятия" Тогда
			ДополнитьПравилаЗаполнения(ПравилаЗаполнения, РеквизитыОбъектаИС, "Наименование", "Представление");
			
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыДерева = ПравилаЗаполненияРеквизитовДО.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если (ЭлементДерева.ИмяРеквизитаОбъектаДО = "ВидДокумента")
				Или (ПриИзмененииОбъектаИС И ЭлементДерева.Вариант = ВариантШаблон()) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПриИзмененииОбъектаИС И ЭлементДерева.Вариант <> ВариантЗначение() Тогда
			ОчиститьПравилоЗаполненияНаСервере(ЭлементДерева);
		КонецЕсли;
		
		Если ЭлементДерева.ЭтоДополнительныйРеквизитДО Или ЭлементДерева.ЭтоТаблица Тогда
			Продолжить;
		КонецЕсли;
		
		// Заполнение по совпадению имени или синонима
		Для Каждого РеквизитИС Из РеквизитыОбъектаИС Цикл
			Если ((ЭлементДерева.ИмяРеквизитаОбъектаДО = РеквизитИС.Имя)
						Или (ЭлементДерева.ПредставлениеРеквизитаОбъектаДО = РеквизитИС.Синоним))
					И ПравилаЗаполнения.Получить(ЭлементДерева.ИмяРеквизитаОбъектаДО) = Неопределено Тогда
				ПравилаЗаполнения.Вставить(ЭлементДерева.ИмяРеквизитаОбъектаДО,
					Новый Структура("Имя, Представление",
						РеквизитИС.Имя,
						РеквизитИС.Синоним));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ЗаполнятьИзШаблона Тогда
		УстановитьЗаполнениеРеквизитовИзШаблона(Объект.Шаблон);
	КонецЕсли;
	
	Если ЗаполнятьИзОбъектаИС Тогда
		
		// Вторичные соответствия
		Если РеквизитыОбъектаИС.Количество() > 0 Тогда
			Если Объект.ТипОбъектаДО = "Справочник.ДокументыПредприятия" Тогда
				
				ДополнитьПравилаЗаполнения(
					ПравилаЗаполнения,
					РеквизитыОбъектаИС,
					"Заголовок",
					"Наименование");
				ДополнитьПравилаЗаполнения(
					ПравилаЗаполнения,
					РеквизитыОбъектаИС,
					"Сумма",
					"СуммаДокумента");
				ДополнитьПравилаЗаполнения(
					ПравилаЗаполнения,
					РеквизитыОбъектаИС,
					"Валюта",
					"ВалютаВзаиморасчетов");
				ДополнитьПравилаЗаполнения(
					ПравилаЗаполнения,
					РеквизитыОбъектаИС,
					"Валюта",
					"ВалютаРасчетов");
				ДополнитьПравилаЗаполнения(
					ПравилаЗаполнения,
					РеквизитыОбъектаИС,
					"Валюта",
					"ВалютаДокумента");
				ДополнитьПравилаЗаполнения(
					ПравилаЗаполнения,
					РеквизитыОбъектаИС,
					"Плательщик",
					"Организация");
				ДополнитьПравилаЗаполнения(
					ПравилаЗаполнения,
					РеквизитыОбъектаИС,
					"Получатель",
					"Контрагент");
				ДополнитьПравилаЗаполнения(
					ПравилаЗаполнения,
					РеквизитыОбъектаИС,
					"Подразделение",
					"ПодразделениеОрганизации");
				ДополнитьПравилаЗаполнения(
					ПравилаЗаполнения,
					РеквизитыОбъектаИС,
					"Подготовил",
					"Автор");
				
			ИначеЕсли Объект.ТипОбъектаДО = "Справочник.Контрагенты" Тогда
				
				ДополнитьПравилаЗаполнения(
					ПравилаЗаполнения,
					РеквизитыОбъектаИС,
					"НаименованиеПолное",
					"ПолноеНаименование");
				ДополнитьПравилаЗаполнения(
					ПравилаЗаполнения,
					РеквизитыОбъектаИС,
					"ФизЛицо",
					"ФизическоеЛицо");
				ДополнитьПравилаЗаполнения(
					ПравилаЗаполнения,
					РеквизитыОбъектаИС,
					"ЮрФизЛицо",
					"ЮридическоеФизическоеЛицо");
				
			ИначеЕсли Объект.ТипОбъектаДО = "Справочник.Мероприятия" Тогда
				
				ДополнитьПравилаЗаполнения(
					ПравилаЗаполнения,
					РеквизитыОбъектаИС,
					"Подразделение",
					"ПодразделениеОрганизации");
				ДополнитьПравилаЗаполнения(
					ПравилаЗаполнения,
					РеквизитыОбъектаИС,
					"Подготовил",
					"Автор");
				
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
			Если ЭлементДерева.ИмяРеквизитаОбъектаДО = "ВидДокумента"
					Или ЭлементДерева.Вариант = ВариантШаблон()
					Или (ЭлементДерева.Вариант = ВариантЗначение()
						И ЗначениеЗаполнено(ЭлементДерева.ЗначениеРеквизитаДО))
					Или (ЭлементДерева.Вариант = ВариантВыражение()
						И ЗначениеЗаполнено(ЭлементДерева.ВычисляемоеВыражение)) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеЗаполнения = ПравилаЗаполнения.Получить(ЭлементДерева.ИмяРеквизитаОбъектаДО);
			Если ЗначениеЗаполнено(ЗначениеЗаполнения) Тогда
				ЭлементДерева.Вариант = ВариантРеквизит();
				ЭлементДерева.ИмяРеквизитаОбъектаИС = ЗначениеЗаполнения.Имя;
				ЭлементДерева.ПредставлениеРеквизитаОбъектаИС = ЗначениеЗаполнения.Представление;
				ЭлементДерева.Картинка = 1;
				ЭлементДерева.Обновлять = Истина;
			КонецЕсли;
			
			Если ЭлементДерева.ИмяРеквизитаОбъектаДО = "ГрифДоступа" И ЗначениеЗаполнено(ГрифДоступаПоУмолчанию) Тогда
				ОчиститьПравилоЗаполненияНаСервере(ЭлементДерева);
				ЭлементДерева.Вариант = ВариантЗначение();
				ЭлементДерева.ЗначениеРеквизитаДО = ГрифДоступаПоУмолчанию;
				ЭлементДерева.Картинка = 2;
				ЭлементДерева.Обновлять = Ложь;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ПеренестиПравилаВОбъект(Объект, ПравилаЗаполненияРеквизитовДО);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораОбъектовИС()
	
	ОбъектыИС = РаботаСИнтегрированнымиСистемамиПовтИсп.СтруктураМетаданныхИнтегрированнойСистемы(
		Объект.УзелИнтегрированнойСистемы,
		Истина);
	
	Для Каждого ТипМетаданных Из ОбъектыИС.Строки Цикл
		Для Каждого ОбъектМетаданных Из ТипМетаданных.Строки Цикл
			СписокМетаданныхИС.Добавить(ОбъектМетаданных.Имя, ПредставлениеОбъектаМетаданных(ОбъектМетаданных, ТипМетаданных));
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПечатныхФорм()
	
	ОбновитьРолиФайлов();
	
	Если Не ЗначениеЗаполнено(Объект.ТипФайловСохраненияПечатныхФорм) Тогда
		Объект.ТипФайловСохраненияПечатныхФорм =
			РаботаСИнтегрированнымиСистемамиВызовСервера.ТипФайлаСохраняемойПечатнойФормыПоУмолчанию();
	КонецЕсли;
	
	Элементы.ПрисоединяемыеПечатныеФормы.Доступность = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ТипОбъектаИС) И ЗначениеЗаполнено(ИнтегрированнаяСистема) Тогда
		
		Элементы.ПрисоединяемыеПечатныеФормы.Доступность = Истина;
		
		ПрисоединяемыеПечатныеФормы.Очистить();
		
		ТаблицаПечатныхФорм = РаботаСИнтегрированнымиСистемами.СписокПечатныхФормОбъектаИнтегрированнойСистемы(
			ИнтегрированнаяСистема,
			Объект.ТипОбъектаИС);
		
		Для Каждого СтруктураПечатнойФормы Из ТаблицаПечатныхФорм Цикл
			НоваяСтрока = ПрисоединяемыеПечатныеФормы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПечатнойФормы);
			
			СохраненныеДанные = Неопределено;
			СтрокиПечатнойФормы = Объект.ПрисоединяемыеПечатныеФормы.НайтиСтроки(
				Новый Структура("ИмяКоманды, МенеджерПечати, ДополнительныеПараметры",
					НоваяСтрока.ИмяКоманды,
					НоваяСтрока.МенеджерПечати,
					НоваяСтрока.ДополнительныеПараметры));
			Если СтрокиПечатнойФормы.Количество() > 0 Тогда
				СохраненныеДанные = СтрокиПечатнойФормы[0];
			Иначе
				СтрокиПечатнойФормы = Объект.ПрисоединяемыеПечатныеФормы.НайтиСтроки(
					Новый Структура("ИмяКоманды, МенеджерПечати, ДополнительныеПараметры",
						НоваяСтрока.ИмяКоманды,
						НоваяСтрока.МенеджерПечати,
						""));
				Если СтрокиПечатнойФормы.Количество() > 0 Тогда
					СохраненныеДанные = СтрокиПечатнойФормы[0];
				КонецЕсли;
			КонецЕсли;
			
			Если СохраненныеДанные <> Неопределено Тогда
				НоваяСтрока.Использовать = Истина;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СохраненныеДанные, "Обновлять, РольФайла");
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Элементы.ГруппаПрисоединяемыеПечатныеФормы.Видимость = (ПрисоединяемыеПечатныеФормы.Количество() > 0);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруРеквизитовОбъектаДОПоПравилу()
	
	ОбновитьРолиФайлов();
	
	ЭлементыДерева = ПравилаЗаполненияРеквизитовДО.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	Если ЗначениеЗаполнено(Объект.Шаблон) Тогда
		ШаблонОбъект = Объект.Шаблон.ПолучитьОбъект();
		РеквизитыШаблона = Метаданные.Справочники.ШаблоныДокументов.Реквизиты;
		ТабличныеЧастиШаблона = Метаданные.Справочники.ШаблоныДокументов.ТабличныеЧасти;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда
		ОбъектПравилаЗаполненияРеквизитовДО = ЗначениеКопирования.ПравилаЗаполненияРеквизитовДО;
		ЗначениеКопирования = Неопределено;
	Иначе
		ОбъектПравилаЗаполненияРеквизитовДО = РеквизитФормыВЗначение("Объект").ПравилаЗаполненияРеквизитовДО;
	КонецЕсли;
	
	ДоступноРедактирование = Новый Соответствие;
	ПравилаЗаполненияСтрокТаблицыИзХранилища = Новый Соответствие;
	
	Реквизиты = Справочники.ПравилаЗагрузкиДанныхВДО.РеквизитыОбъектаДО(Объект.ТипОбъектаДО, Объект.ВидДокумента);
	Для Каждого Строка Из Реквизиты Цикл
		
		Если Строка.ЭтоТаблица Тогда
			НоваяСтрока = ЭлементыДерева.Добавить();
			НоваяСтрока.ЭтоТаблица = Истина;
			УровеньДерева = НоваяСтрока.ПолучитьЭлементы();
		Иначе
			Если Строка.Таблица = "" Тогда
				УровеньДерева = ЭлементыДерева;
			КонецЕсли;
			НоваяСтрока = УровеньДерева.Добавить();
			НоваяСтрока.Таблица = Строка.Таблица;
		КонецЕсли;
		
		НоваяСтрока.ИмяРеквизитаОбъектаДО = Строка.Имя;
		НоваяСтрока.ПредставлениеРеквизитаОбъектаДО = Строка.Представление;
		Если ЗначениеЗаполнено(Строка.Подсказка) И Строка.Подсказка <> Строка.Представление Тогда
			НоваяСтрока.Подсказка = Строка.Подсказка;
		КонецЕсли;
		НоваяСтрока.ТипРеквизитаОбъектаДО = Строка.Тип;
		НоваяСтрока.ЭтоДополнительныйРеквизитДО = Строка.ЭтоДополнительныйРеквизит;
		НоваяСтрока.ДополнительныйРеквизитДО = Строка.ДополнительныйРеквизит;
		НоваяСтрока.ОбязательноеЗаполнение = Строка.ОбязательноеЗаполнение;
		НоваяСтрока.СвязиПараметровВыбора.ЗагрузитьЗначения(Строка.СвязиПараметровВыбора);
		НоваяСтрока.Порядок = Строка.Порядок;
		НоваяСтрока.ИмяМетодаДляЗаполнения = Строка.ИмяМетодаДляЗаполнения;
		НоваяСтрока.ИмяПоляПроверкиДоступностиПоСостоянию = Строка.ИмяПоляПроверкиДоступностиПоСостоянию;
		НоваяСтрока.ИмяМетодаПроверкиДоступностиПоСостоянию = Строка.ИмяМетодаПроверкиДоступностиПоСостоянию;
		НоваяСтрока.ТипРеквизитаОбъектаДОВСтроку = РаботаСИнтегрированнымиСистемами.ТипРеквизитаОбъектаДОВСтроку(
			Строка.Тип);
		
		// Найдем подходящую строку в табличной части.
		ПараметрыОтбора = Новый Структура("ЭтоДополнительныйРеквизитДО", Строка.ЭтоДополнительныйРеквизит);
		Если Строка.ЭтоДополнительныйРеквизит Тогда
			ПараметрыОтбора.Вставить("ДополнительныйРеквизитДО", Строка.ДополнительныйРеквизит);
		Иначе
			ПараметрыОтбора.Вставить("ЭтоТаблица", Строка.ЭтоТаблица);
			ПараметрыОтбора.Вставить("Таблица", Строка.Таблица);
			ПараметрыОтбора.Вставить("ИмяРеквизитаОбъектаДО", Строка.Имя);
		КонецЕсли;
		НайденныеСтроки = ОбъектПравилаЗаполненияРеквизитовДО.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ИсключаяСвойства = Новый Массив;
			ИсключаяСвойства.Добавить("ИмяМетодаДляЗаполнения");
			ИсключаяСвойства.Добавить("ИмяПоляПроверкиДоступностиПоСостоянию");
			ИсключаяСвойства.Добавить("ИмяМетодаПроверкиДоступностиПоСостоянию");
			ИсключаяСвойства.Добавить("ТипРеквизитаОбъектаДОВСтроку");
			Если НайденныеСтроки[0].Вариант <> ВариантРеквизитТаблицы() Тогда
				ИсключаяСвойства.Добавить("ПравилаЗаполненияСтрокТаблицы");
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(
				НоваяСтрока,
				НайденныеСтроки[0],,
				СтрСоединить(ИсключаяСвойства, ","));
			Если Не ПустаяСтрока(НайденныеСтроки[0].ЗначениеРеквизитаДОСтрока) Тогда
				НоваяСтрока.ЗначениеРеквизитаДО = НайденныеСтроки[0].ЗначениеРеквизитаДОСтрока;
			КонецЕсли;
		КонецЕсли;
		
		Родитель = НоваяСтрока.ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
			РодительID = "БезРодителя";
		Иначе
			РодительID = Родитель.ID;
			Если ПравилаЗаполненияСтрокТаблицыИзХранилища[РодительID] = Неопределено Тогда
				ПравилаЗаполненияСтрокТаблицыИзХранилища[РодительID] =
					РаботаСИнтегрированнымиСистемамиВызовСервера.ПравилаЗаполненияСтрокТаблицыИзХранилища(
						Родитель.ПравилаЗаполненияСтрокТаблицы,
						?(ЗначениеЗаполнено(ИнтегрированнаяСистема), ИнтегрированнаяСистема, ИмяМакета),
						Объект.ТипОбъектаДО,
						Объект.ТипОбъектаИС,
						Родитель.ИмяРеквизитаОбъектаДО,
						Родитель.Обновлять,
						Объект.ВидДокумента);
			КонецЕсли;
		КонецЕсли;
		
		Если ДоступноРедактирование[РодительID] = Неопределено Тогда
			ДоступноРедактирование[РодительID] = (Родитель = Неопределено)
				Или ДоступноРедактированиеПодчиненных(Родитель.Вариант, Родитель.ПравилаЗаполненияСтрокТаблицы);
		КонецЕсли;
		
		НоваяСтрока.ДоступноРедактирование = ДоступноРедактирование[РодительID];
		Если Не ДоступноРедактирование[РодительID] Тогда
			ОчиститьПравилоЗаполненияНаСервере(НоваяСтрока, Ложь);
			НоваяСтрока.Вариант = Родитель.Вариант;
			Если НоваяСтрока.Вариант = ВариантРеквизитТаблицы() Тогда
				НоваяСтрока.Пояснение = НСтр("ru = 'Заполнение реквизита настроено в правиле заполнения таблицы'");
			КонецЕсли;
		КонецЕсли;
		
		Если НоваяСтрока.ДоступноРедактирование
				И РодительID <> "БезРодителя"
				И ПравилаЗаполненияСтрокТаблицыИзХранилища[РодительID].Количество() = 1 Тогда
			ЗаполнитьЗначенияСвойств(
				НоваяСтрока,
				ПравилаЗаполненияСтрокТаблицыИзХранилища[РодительID][0][НоваяСтрока.ИмяРеквизитаОбъектаДО]);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Шаблон)
				И ((Строка.ЭтоТаблица И ТабличныеЧастиШаблона.Найти(Строка.Имя) <> Неопределено)
					Или (Строка.Таблица = "" И РеквизитыШаблона.Найти(Строка.Имя) <> Неопределено)
					Или (Строка.Имя = "Получатель" И Строка.Таблица = "")
					Или (Строка.Имя = "Комментарий" И Строка.Таблица = "")
					Или (Строка.Имя = "СтатьиДДС" И Строка.Таблица = "")) Тогда
			
			НоваяСтрока.ВозможноЗаполнениеИзШаблона = Истина;
			
			Если ШаблонЗапрещаетИзменение Или (Строка.Имя = "ВидДокумента" И Строка.Таблица = "") Тогда
				ОчиститьПравилоЗаполненияНаСервере(НоваяСтрока, ДоступноРедактирование[РодительID]);
				НоваяСтрока.Вариант = ВариантШаблон();
			КонецЕсли;
			
			Если РеквизитыШаблона.Найти(Строка.Имя) <> Неопределено И ЗначениеЗаполнено(ШаблонОбъект[Строка.Имя]) Тогда
				НоваяСтрока.ШаблонЗначение = СокрЛП(ШаблонОбъект[Строка.Имя]);
			КонецЕсли;
			
			Если Строка.Имя = "Получатель" И Строка.Таблица = "" Тогда
				СтрокиПолучатель = ШаблонОбъект.Стороны.НайтиСтроки(
					Новый Структура("Наименование", Справочники.НаименованияСторон.Получатель));
				Если СтрокиПолучатель.Количество() = 1 И ЗначениеЗаполнено(СтрокиПолучатель[0].Сторона) Тогда
					НоваяСтрока.ШаблонЗначение = СокрЛП(СтрокиПолучатель[0].Сторона);
				КонецЕсли;
			КонецЕсли;
			
			Если Строка.Имя = "Комментарий" И Строка.Таблица = "" Тогда
				НоваяСтрока.ШаблонЗначение = СокрЛП(ШаблонОбъект.КомментарийКДокументу);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не НоваяСтрока.ВозможноЗаполнениеИзШаблона И НоваяСтрока.Вариант = ВариантШаблон()
				И НоваяСтрока.Таблица = "" Тогда
			ОчиститьПравилоЗаполненияНаСервере(НоваяСтрока, ДоступноРедактирование[РодительID]);
		КонецЕсли;
		
		Если НоваяСтрока.Вариант = ВариантРеквизит() Тогда
			НоваяСтрока.Картинка = 1;
			НоваяСтрока.ПредставлениеРеквизитаОбъектаИС =
				РаботаСИнтегрированнымиСистемами.ПредставлениеРеквизитаОбъектаИнтегрированнойСистемы(
					?(ЗначениеЗаполнено(ИнтегрированнаяСистема), ИнтегрированнаяСистема, ИмяМакета),
					Объект.ТипОбъектаИС,
					НоваяСтрока.ИмяРеквизитаОбъектаИС);
			
		ИначеЕсли НоваяСтрока.Вариант = ВариантРеквизитТаблицы() И НоваяСтрока.ЭтоТаблица Тогда
			НоваяСтрока.Картинка = 1;
			НоваяСтрока.Пояснение = НСтр("ru = 'Заполняется по правилам для отдельных реквизитов таблицы'");
			
		ИначеЕсли НоваяСтрока.Вариант = ВариантЗначение() Тогда
			НоваяСтрока.Картинка = 2;
			
		ИначеЕсли НоваяСтрока.Вариант = ВариантВыражение() И ЗначениеЗаполнено(НоваяСтрока.ВычисляемоеВыражение) Тогда
			НоваяСтрока.Картинка = 3;
			
		ИначеЕсли НоваяСтрока.Вариант = ВариантШаблон() И НоваяСтрока.Таблица = "" Тогда
			НоваяСтрока.Картинка = 5;
			Если ЗначениеЗаполнено(НоваяСтрока.ШаблонЗначение) Тогда
				НоваяСтрока.Пояснение = СтрШаблон(НСтр("ru = '%1 (Заполняется из шаблона)'"),
					НоваяСтрока.ШаблонЗначение);
			Иначе
				НоваяСтрока.Пояснение = НСтр("ru = 'Заполняется из шаблона'");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПеренестиПравилаВОбъект(Объект, ПравилаЗаполненияРеквизитовДО, Модифицированность);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеИзШаблона()
	
	ШаблонЗапрещаетИзменение = Ложь;
	Объект.ВидДокумента = Справочники.ВидыДокументов.ПустаяСсылка();
	
	Для Каждого Строка Из Объект.ПравилаЗаполненияРеквизитовДО Цикл
		Если Строка.ИмяРеквизитаОбъектаДО = "ВидДокумента" И Строка.Вариант = ВариантЗначение() Тогда
			Объект.ВидДокумента = Строка.ЗначениеРеквизитаДО;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.Шаблон) Тогда
		РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.Шаблон,
			"ВидДокумента, ЗапретитьИзменятьРеквизитыИзШаблона");
		Объект.ВидДокумента = РеквизитыШаблона.ВидДокумента;
		ШаблонЗапрещаетИзменение = РеквизитыШаблона.ЗапретитьИзменятьРеквизитыИзШаблона;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтарыйШаблон) И Не ЗначениеЗаполнено(Объект.Шаблон) Тогда
		ВидДокументаИзСтарогоШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтарыйШаблон, "ВидДокумента");
		Если ЗначениеЗаполнено(ВидДокументаИзСтарогоШаблона) Тогда
			Для Каждого Строка Из Объект.ПравилаЗаполненияРеквизитовДО Цикл
				Если Строка.ИмяРеквизитаОбъектаДО = "ВидДокумента" И Строка.Вариант = ВариантШаблон() Тогда
					Строка.Вариант = ВариантЗначение();
					Строка.ЗначениеРеквизитаДО = ВидДокументаИзСтарогоШаблона;
					Объект.ВидДокумента = ВидДокументаИзСтарогоШаблона;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРолиФайлов()
	
	СписокВыбораРолей = Элементы.ПрисоединяемыеПечатныеФормыРольФайла.СписокВыбора;
	СписокВыбораРолей.Очистить();
	
	Если Объект.ТипОбъектаДО = "Справочник.ДокументыПредприятия"
			И ЗначениеЗаполнено(Объект.ВидДокумента)
			И ПолучитьФункциональнуюОпцию("ИспользоватьРолиФайлов") Тогда
		РолиФайлов = Делопроизводство.РолиФайловДляВидаДокументов(Объект.ВидДокумента);
		Для Каждого Строка Из РолиФайлов Цикл
			СписокВыбораРолей.Добавить(Строка.Роль);
		КонецЦикла;
	КонецЕсли;
	
	ИспользоватьРолиФайлов = (СписокВыбораРолей.Количество() > 0);
	Элементы.ПрисоединяемыеПечатныеФормыРольФайла.Видимость = ИспользоватьРолиФайлов;
	
	БылиИзменения = Ложь;
	Для Каждого Строка Из ПрисоединяемыеПечатныеФормы Цикл
		Если ЗначениеЗаполнено(Строка.РольФайла)
				И СписокВыбораРолей.НайтиПоЗначению(Строка.РольФайла) = Неопределено Тогда
			Строка.РольФайла = Справочники.РолиФайлов.ПустаяСсылка();
			БылиИзменения = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если БылиИзменения Тогда
		ПеренестиПечатныеФормыВОбъект();
	КонецЕсли;
	
КонецПроцедуры

// Изменяет форму согласно доступности сервиса ДО и номеру его версии.
//
&НаСервере
Процедура ОбработатьФормуСогласноВерсииСервиса()
	
	Если Объект.ИзМакета Тогда
		ВерсияСервиса = "";
	Иначе
		ТекстСообщенияОбОшибке = "";
		ВерсияСервиса = РаботаСИнтегрированнымиСистемамиВызовСервера.ВерсияСервиса(
			ИнтегрированнаяСистема,
			ТекстСообщенияОбОшибке);
		Если Не ПустаяСтрока(ТекстСообщенияОбОшибке) Тогда
			Сообщить(ТекстСообщенияОбОшибке);
		КонецЕсли;
	КонецЕсли;
	
	Если ВерсияСервиса = "0.0.0.0" Тогда
		Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаИСНедоступна;
		
	Иначе
		Элементы.ГруппаСтраницыПодключения.ТекущаяСтраница = Элементы.СтраницаИСДоступна;
		
		ОбновитьДанныеИзШаблона();
		ЗаполнитьСтруктуруРеквизитовОбъектаДОПоПравилу();
		ЗаполнитьСписокВыбораОбъектовИС();
		ЗаполнитьСписокПечатныхФорм();
		
		Если ЗначениеЗаполнено(Объект.ТипОбъектаИС) Тогда
			ПредставлениеОбъектаИС = РаботаСИнтегрированнымиСистемами.ПредставлениеОбъектаИнтегрированнойСистемы(
				Объект.УзелИнтегрированнойСистемы,
				Объект.ТипОбъектаИС);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПравилоЗаполненияНаСервере(Правило, ДоступноРедактирование = Неопределено)
	
	ЗаполнитьЗначенияСвойств(Правило, СтруктураДляОчисткиПравила(Правило.Вариант));
	
	Если ДоступноРедактирование = Неопределено Тогда
		Родитель = Неопределено;
		Если ТипЗнч(Правило) = Тип("ДанныеФормыЭлементДерева") Тогда
			Родитель = Правило.ПолучитьРодителя();
		ИначеЕсли ТипЗнч(Правило) = Тип("СтрокаДереваЗначений") Тогда
			Родитель = Правило.Родитель;
		КонецЕсли;
		Правило.ДоступноРедактирование = (Родитель = Неопределено)
			Или ДоступноРедактированиеПодчиненных(Родитель.Вариант, Родитель.ПравилаЗаполненияСтрокТаблицы);
	Иначе
		Правило.ДоступноРедактирование = ДоступноРедактирование;
	КонецЕсли;
	
	Если Правило.ЭтоТаблица Тогда
		ПодчиненныеПравила = Неопределено;
		Если ТипЗнч(Правило) = Тип("ДанныеФормыЭлементДерева") Тогда
			ПодчиненныеПравила = Правило.ПолучитьЭлементы();
		ИначеЕсли ТипЗнч(Правило) = Тип("СтрокаДереваЗначений") Тогда
			ПодчиненныеПравила = Правило.Строки;
		КонецЕсли;
		
		Если ПодчиненныеПравила <> Неопределено Тогда
			Для Каждого ПодчиненноеПравило Из ПодчиненныеПравила Цикл
				ОчиститьПравилоЗаполненияНаСервере(ПодчиненноеПравило);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиПечатныеФормыВОбъект()
	
	ПечатныеФормыДо = Объект.ПрисоединяемыеПечатныеФормы.Выгрузить();
	
	Объект.ПрисоединяемыеПечатныеФормы.Очистить();
	Для Каждого Строка Из ПрисоединяемыеПечатныеФормы Цикл
		Если Строка.Использовать Тогда
			НоваяСтрока = Объект.ПрисоединяемыеПечатныеФормы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;
	КонецЦикла;
	
	ПечатныеФормыПосле = Объект.ПрисоединяемыеПечатныеФормы.Выгрузить();
	
	Модифицированность = Модифицированность
		Или Не ОбщегоНазначения.КоллекцииИдентичны(ПечатныеФормыДо, ПечатныеФормыПосле,, "ИсходныйНомерСтроки");
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьПравилоЗаполненияРеквизитаСтрокиВХранилище(ИдентификаторСтроки, ПравилаЗаполненияСтрокТаблицы)
	
	СтрокаДереваФормы = ПравилаЗаполненияРеквизитовДО.НайтиПоИдентификатору(ИдентификаторСтроки);
	РаботаСИнтегрированнымиСистемами.ПоместитьПравилоЗаполненияРеквизитаСтрокиВХранилище(
		СтрокаДереваФормы,
		ПравилаЗаполненияСтрокТаблицы,
		Объект.ТипОбъектаДО,
		Объект.ВидДокумента);
	
КонецПроцедуры

&НаСервере
Функция ПравилаЗаполненияРеквизитовДОНайтиСтроки(ИмяРеквизита, Таблица)
	
	НайденныеСтроки = Новый Массив;
	Для Каждого Строка Из Объект.ПравилаЗаполненияРеквизитовДО Цикл
		Если Строка.ИмяРеквизитаОбъектаДО = ИмяРеквизита И Строка.Таблица = Таблица Тогда
			НайденныеСтроки.Добавить(Строка);
		ИначеЕсли Строка.Вариант = ВариантРеквизитТаблицы()
				И Строка.ИмяРеквизитаОбъектаДО = Таблица
				И ТипЗнч(Строка.ПравилаЗаполненияСтрокТаблицыДанныеФормы) = Тип("ХранилищеЗначения") Тогда
			ПодчиненныеСтроки = Строка.ПравилаЗаполненияСтрокТаблицыДанныеФормы.Получить();
			Если ТипЗнч(ПодчиненныеСтроки) = Тип("ТаблицаЗначений") И ПодчиненныеСтроки.Количество() = 1 Тогда
				ПодчиненнаяСтрока = Новый Структура(
					"ЗначениеРеквизитаДО",
					ПодчиненныеСтроки[0][ИмяРеквизита+"_ЗначениеРеквизитаДО"]);
				НайденныеСтроки.Добавить(ПодчиненнаяСтрока);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныеСтроки;
	
КонецФункции

&НаСервере
Функция ПредставлениеОбъектаМетаданных(ОбъектМетаданных, ТипМетаданных)
	
	Если ПустаяСтрока(ОбъектМетаданных.Синоним) Тогда
		Возврат ОбъектМетаданных.Имя
	Иначе
		ПредставлениеТипа = НСтр("ru = 'Документ'");
		Если ТипМетаданных.Имя = "Справочник" Тогда
			ПредставлениеТипа = НСтр("ru = 'Справочник'");
		ИначеЕсли ТипМетаданных.Имя = "ПланВидовХарактеристик" Тогда
			ПредставлениеТипа = НСтр("ru = 'План видов характеристик'");
		ИначеЕсли ТипМетаданных.Имя = "БизнесПроцесс" Тогда
			ПредставлениеТипа = НСтр("ru = 'Бизнес-процесс'");
		ИначеЕсли ТипМетаданных.Имя = "Задача" Тогда
			ПредставлениеТипа = НСтр("ru = 'Задача'");
		КонецЕсли;
		Возврат СтроковыеФункции.ФорматированнаяСтрока(
			"<span style=""color: ЦветНеАктивнойСтроки"">%1:</span> %2",
			ПредставлениеТипа,
			ОбъектМетаданных.Синоним);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СоздатьСвязанноеПравилоИнтеграцииВИС(ИнтегрированнаяСистема, ПравилоСсылка, ВидДокумента,
		ТипОбъектаДО, ТипОбъектаИС, ПредставлениеОбъектаДО, Комментарий)
	
	ПараметрыСеанса.УзелИнтегрированнойСистемы = ИнтегрированнаяСистема;
	Прокси = РаботаСИнтегрированнымиСистемамиПовтИсп.ПолучитьПрокси(ИнтегрированнаяСистема);
	
	Запрос = РаботаСИнтегрированнымиСистемами.СоздатьОбъект(Прокси, "DMILCreateRelatedIntegrationRuleExistenceRequest");
	Запрос.relatedDataLoadingRule = Строка(ПравилоСсылка.УникальныйИдентификатор());
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		Запрос.documentTypeDM = Строка(ВидДокумента);
		Запрос.documentTypeDMID = Строка(ВидДокумента.УникальныйИдентификатор());
	КонецЕсли;
	
	Запрос.objectTypeDM = ОбработкаЗапросовXDTO.ПолучитьТипXDTOПоТипуДО(ТипОбъектаДО);
	Запрос.objectTypeIS = ТипОбъектаИС;
	
	МассивПредставлениеОбъектаДО = Новый Массив;
	МассивПредставлениеОбъектаДО.Добавить(ПредставлениеОбъектаДО);
	
	Если СокрЛП(Комментарий) <> "" Тогда
		МассивПредставлениеОбъектаДО.Добавить(СокрЛП(Комментарий));
	КонецЕсли;
	
	// Соберем наименование.
	Запрос.objectNameDM = СтрСоединить(МассивПредставлениеОбъектаДО, ", ");
	
	Ответ = Прокси.execute(Запрос);
	РаботаСИнтегрированнымиСистемами.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаполнениеРеквизитовИзШаблона(Шаблон)
	
	Если Не ЗначениеЗаполнено(Шаблон) Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонОбъект = Шаблон.ПолучитьОбъект();
	РеквизитыШаблона = Метаданные.Справочники.ШаблоныДокументов.Реквизиты;
	ТабличныеЧастиШаблона = Метаданные.Справочники.ШаблоныДокументов.ТабличныеЧасти;
	
	ЭлементыДерева = ПравилаЗаполненияРеквизитовДО.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		Если ЭлементДерева.ИмяРеквизитаОбъектаДО = "ВидДокумента" И ЭлементДерева.Таблица = "" Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполняетсяИзШаблона = Ложь;
		ШаблонЗначение = Неопределено;
		
		Если ЭлементДерева.ЭтоТаблица
				И ТабличныеЧастиШаблона.Найти(ЭлементДерева.ИмяРеквизитаОбъектаДО) <> Неопределено
				И ШаблонОбъект[ЭлементДерева.ИмяРеквизитаОбъектаДО].Количество() > 0 Тогда
			ЗаполняетсяИзШаблона = Истина;
			
		ИначеЕсли ЭлементДерева.Таблица = ""
				И РеквизитыШаблона.Найти(ЭлементДерева.ИмяРеквизитаОбъектаДО) <> Неопределено
				И ЗначениеЗаполнено(ШаблонОбъект[ЭлементДерева.ИмяРеквизитаОбъектаДО]) Тогда
			ЗаполняетсяИзШаблона = Истина;
			ШаблонЗначение = ШаблонОбъект[ЭлементДерева.ИмяРеквизитаОбъектаДО];
			
		ИначеЕсли ЭлементДерева.ИмяРеквизитаОбъектаДО = "Получатель" И ЭлементДерева.Таблица = "" Тогда
			Для Каждого СторонаСтрока Из ШаблонОбъект.Стороны Цикл
				Если СторонаСтрока.Наименование = Справочники.НаименованияСторон.Получатель
						И ЗначениеЗаполнено(СторонаСтрока.Сторона) Тогда
					ЗаполняетсяИзШаблона = Истина;
					ШаблонЗначение = СторонаСтрока.Сторона;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ЭлементДерева.ИмяРеквизитаОбъектаДО = "СтатьиДДС" И ЭлементДерева.Таблица = ""
				И ЗначениеЗаполнено(ШаблонОбъект.СтатьяДвиженияДенежныхСредств) Тогда
			ЗаполняетсяИзШаблона = Истина;
			
		КонецЕсли;
		
		Если ЗаполняетсяИзШаблона Тогда
			Если ПравилоЗаполнено(ЭлементДерева) Тогда
				ОчиститьПравилоЗаполненияНаСервере(ЭлементДерева);
			КонецЕсли;
			
			ЭлементДерева.Вариант = ВариантШаблон();
			ЭлементДерева.Картинка = 5;
			ЭлементДерева.ШаблонЗначение = ШаблонЗначение;
			Если ЗначениеЗаполнено(ЭлементДерева.ШаблонЗначение) Тогда
				ЭлементДерева.Пояснение = СтрШаблон(НСтр("ru = '%1 (Заполняется из шаблона)'"),
					ЭлементДерева.ШаблонЗначение);
			Иначе
				ЭлементДерева.Пояснение = НСтр("ru = 'Заполняется из шаблона'");
			КонецЕсли;
			
			Если ЭлементДерева.ЭтоТаблица Тогда
				ПодчиненныеПравила = ЭлементДерева.ПолучитьЭлементы();
				Для Каждого ПодчиненноеПравило Из ПодчиненныеПравила Цикл
					ПодчиненноеПравило.Вариант = ВариантШаблон();
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти