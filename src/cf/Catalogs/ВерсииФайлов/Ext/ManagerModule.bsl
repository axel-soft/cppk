#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Удаляет порцию устаревших данных.
// 
// Возвращаемое значение
//  Булево - Истина, если были найдены устаревшие данные, в противном случае Ложь.
// 
Функция УдалитьПорциюУстаревшихДанных() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЕстьДанныеКУдалению = Ложь;
	
	Если Не ПолучитьФункциональнуюОпцию("УдалятьНеактивныеВерсии") Тогда 
		Возврат ЕстьДанныеКУдалению;
	КонецЕсли;

	Если МиграцияДанныхИзВнешнихСистемСервер.ИдетЗагрузкаИзДО21() Тогда
		Возврат ЕстьДанныеКУдалению;
	КонецЕсли;	

	Если ПолучитьФункциональнуюОпцию("ИспользоватьКОД")
		И НЕ КОДСервер.ЭтоЦентральныйУзел() Тогда
		Возврат ЕстьДанныеКУдалению;
	КонецЕсли;
	
	// срок хранения в днях
	СрокХраненияНеактивныхВерсий = РаботаСФайламиВызовСервера.ПолучитьСрокХраненияНеактивныхВерсий(); 
	
	ПутьСохраненияУдаляемыхВерсий = РаботаСФайламиВызовСервера.ПолучитьПутьСохраненияУдаляемыхВерсий();
	Если Не ЗначениеЗаполнено(ПутьСохраненияУдаляемыхВерсий) Тогда
		
		ЗаписьЖурналаРегистрации(НСтр("ru='Очистка неактивных версий файлов'"), 
		УровеньЖурналаРегистрации.Ошибка, 
		, , НСтр("ru = 'Не указан путь сохранения очищаемых версий'"));
		
		Возврат ЕстьДанныеКУдалению;
		
	КонецЕсли;	
	
	ДатаОтсчетаУстаревания = ТекущаяДатаСеанса() - СрокХраненияНеактивныхВерсий * 86400; //  86400 - секунд в сутках
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 5000
		|	ВерсииФайлов.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(ОбращенияКВерсиямФайлов.ДатаПоследнегоОбращения, ВерсииФайлов.ДатаСоздания) КАК ДатаПоследнегоОбращения,
		|	ВерсииФайлов.Владелец КАК ВладелецВерсии
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбращенияКВерсиямФайлов КАК ОбращенияКВерсиямФайлов
		|		ПО (ОбращенияКВерсиямФайлов.Версия = ВерсииФайлов.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВерсииСогласованныхФайлов КАК ВерсииСогласованныхФайлов
		|		ПО (ВерсииСогласованныхФайлов.ВерсияФайла = ВерсииФайлов.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Замечания КАК Замечания
		|		ПО (Замечания.ВерсияHTML = ВерсииФайлов.Ссылка)
		|ГДЕ
		|	ЕСТЬNULL(ОбращенияКВерсиямФайлов.ДатаПоследнегоОбращения, ВерсииФайлов.ДатаСоздания) < &ДатаОтсчетаУстаревания
		|	И ВерсииФайлов.Ссылка <> ВерсииФайлов.Владелец.ТекущаяВерсия
		|	И ВерсииФайлов.Владелец.НеУдалятьСтарыеВерсии = ЛОЖЬ
		|	И ВерсииФайлов.ФайлУдален = ЛОЖЬ
		|	И ВерсииСогласованныхФайлов.ВерсияФайла ЕСТЬ NULL
		|	И Замечания.Ссылка ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВерсииФайлов.Владелец.Ссылка";
				   
	Запрос.УстановитьПараметр("ДатаОтсчетаУстаревания", ДатаОтсчетаУстаревания);
	РезультатЗапроса = Запрос.Выполнить();
	ЕстьДанныеКУдалению = Не РезультатЗапроса.Пустой();
	
	Если Не ЕстьДанныеКУдалению Тогда
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Удаление устаревших данных'"), 
			УровеньЖурналаРегистрации.Информация,
			Метаданные.Справочники.ВерсииФайлов,, 
			СтрШаблон(
				НСтр("ru = 'Процедура завершена успешно, обработано %1 записей'"), 0));
		
		Возврат ЕстьДанныеКУдалению;
		
	КонецЕсли;
	
	ИмяКаталогаСохранения = РаботаСФайламиВызовСервера.ПолучитьИмяКаталогаСохранения();
	
	ВладелецВерсии = Неопределено;
	ЧислоФайлов = 0;
	ЧислоВерсий = 0;
	РазмерВерсий = 0;
	
	МассивРезультатов = Новый Массив;
	
	Попытка
		
		СоздатьКаталог(ИмяКаталогаСохранения);
		
		ВерсияСсылка = Неопределено;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ВерсияСсылка = Выборка.Ссылка;
			РаботаСФайламиВызовСервера.ВыполнитьУдалениеНеактивнойВерсииФайла(
				ВерсияСсылка, Выборка, ИмяКаталогаСохранения, 
				МассивРезультатов, ВладелецВерсии, ЧислоФайлов, ЧислоВерсий, РазмерВерсий);
			
		КонецЦикла;
		
	Исключение
		
		// Записать ошибку в журнал регистрации
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru='Ошибка очистки неактивных версий файлов'"), 
		УровеньЖурналаРегистрации.Ошибка, 
		, , СообщениеОбОшибке);
		
	КонецПопытки;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru='Удаление устаревших данных'"), 
		УровеньЖурналаРегистрации.Информация,
		Метаданные.Справочники.ВерсииФайлов,, 
		СтрШаблон(
			НСтр("ru = 'Процедура завершена успешно, обработано %1 записей'"), Выборка.Количество()));
	
	Если МассивРезультатов.Количество() = 0 Тогда
		Возврат ЕстьДанныеКУдалению;
	КонецЕсли;
	
	Описание = СтрШаблон(
		НСтр("ru = 'Всего очищено: %1 версий из %2 файлов. Объем: %3 Мб. 
			|Версии сохранены в каталог ""%4"".
			|Список очищенных версий в приложенном файле ""Отчет.html"".'"),
		ЧислоВерсий,
		ЧислоФайлов,
		ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВерсий / (1024 * 1024)),
		ИмяКаталогаСохранения);
	
	// Записать текст в журнал регистрации
	ЗаписьЖурналаРегистрации(НСтр("ru='Выполнена очистка устаревших версий файлов'"), 
		УровеньЖурналаРегистрации.Информация, 
		, , Описание);
		
	ИмяФайлаЗаписиОтчета = ЗаписатьОтчетОбУдаленииВерсий(МассивРезультатов);
	
	ТипОповещения = РаботаСФайламиВызовСервера.ПолучитьТипОповещенияОтветственногоЗаУдалениеНеактивныхВерсий();
	Ответственный = РаботаСФайламиВызовСервера.ПолучитьОтветственногоЗаУдалениеНеактивныхВерсий();
	
	АдресФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайлаЗаписиОтчета));
	
	// Оповещение по электронной почте
	Если ТипОповещения = Перечисления.ТипыОповещения.ЭлектроннаяПочта Тогда
		
		Уведомление = Новый Структура("Заголовок, Содержание", 
		НСтр("ru='Отчет об автоматической очистке устаревших версий файлов'"), Описание);
		ОтправитьУведомление(Уведомление, Ответственный, АдресФайла);
		
	Иначе // Оповещение с помощью задачи - бизнес-процесс Ознакомление
		
		ПапкаДляХраненияОтчетовОбУдалении = 
			РаботаСФайламиВызовСервера.ПолучитьПапкуДляХраненияОтчетовОбУдалении();
		
		Файл = Новый Файл(ИмяФайлаЗаписиОтчета);
		
		СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией", Файл);
		СведенияОФайле.ИмяБезРасширения = НСтр("ru = 'Отчет'");
		СведенияОФайле.АдресВременногоХранилищаФайла = АдресФайла;
		
		ФайлССылка = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(
			ПапкаДляХраненияОтчетовОбУдалении, СведенияОФайле);
		
		БизнесПроцесс = БизнесПроцессы.Ознакомление.СоздатьБизнесПроцесс();
		БизнесПроцесс.Автор = Ответственный;
		Строка = БизнесПроцесс.Исполнители.Добавить();
		Строка.Исполнитель = Ответственный;
		БизнесПроцесс.Наименование 
			= НСтр("ru='Ознакомиться с результатами автоматической очистки устаревших версий файлов'");
		БизнесПроцесс.Описание = Описание;
		БизнесПроцесс.Дата = ТекущаяДата();
		
		Мультипредметность.ПередатьПредметыПроцессу(БизнесПроцесс, ФайлССылка);
		
		БизнесПроцесс.Записать();
		СтартПроцессовСервер.СтартоватьПроцесс(БизнесПроцесс);
		
	КонецЕсли;
	
	Возврат ЕстьДанныеКУдалению;
	
КонецФункции

Функция ЗаписатьОтчетОбУдаленииВерсий(МассивРезультатов)
	
	ТабДок = Новый ТабличныйДокумент;
	ТабМакет = Обработки.ОчисткаУстаревшихВерсийФайлов.ПолучитьМакет("МакетОтчета");
	ОбластьСтрока = ТабМакет.ПолучитьОбласть("Строка");
		
	ВладелецВерсии = Неопределено;
	Для Каждого ОписаниеВерсии Из МассивРезультатов Цикл
		
		Если ВладелецВерсии <> ОписаниеВерсии.ВладелецВерсии Тогда
			
			ВладелецВерсии = ОписаниеВерсии.ВладелецВерсии;
			
			ОбластьЗаголовок = ТабМакет.ПолучитьОбласть("Заголовок");
			ОбластьЗаголовок.Параметры.Описание = ОписаниеВерсии.ПредставлениеВладельца;
			ТабДок.Вывести(ОбластьЗаголовок);
			
			ОбластьШапка = ТабМакет.ПолучитьОбласть("Шапка");
			ТабДок.Вывести(ОбластьШапка);
			
			
		КонецЕсли;	
		
		ОбластьСтрока.Параметры.Автор = ОписаниеВерсии.Автор;
		ОбластьСтрока.Параметры.НомерВерсии = ОписаниеВерсии.НомерВерсии;
		ОбластьСтрока.Параметры.Комментарий = ОписаниеВерсии.Комментарий;
		ОбластьСтрока.Параметры.ДатаСоздания = ОписаниеВерсии.ДатаСоздания;
		ОбластьСтрока.Параметры.Размер = ОписаниеВерсии.Размер;
		
		ТабДок.Вывести(ОбластьСтрока);
		
	КонецЦикла;

	Отчет = Новый ТабличныйДокумент;
	Отчет.Вывести(ТабДок);
	
	ИмяФайлаЗаписиОтчета = ПолучитьИмяВременногоФайла("html");
	Отчет.Записать(ИмяФайлаЗаписиОтчета, ТипФайлаТабличногоДокумента.HTML);
	
	Возврат ИмяФайлаЗаписиОтчета;
	
КонецФункции

Функция ОтправитьУведомление(Уведомление, Получатель, АдресФайла)
	
	Вложение = Новый Структура;
	Вложение.Вставить("Адрес", АдресФайла);
	Вложение.Вставить("ИмяФайла", НСтр("ru = 'Отчет.html'"));
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Кому", 
		РаботаСФайламиВызовСервера.ПолучитьАдресДляОтправкиУведомленияСотруднику(Получатель));
	ПараметрыПисьма.Вставить("Тема", Уведомление.Заголовок);
	ПараметрыПисьма.Вставить("Текст", Уведомление.Содержание);
	ПараметрыПисьма.Вставить("Вложения", Новый Массив);
	ПараметрыПисьма.Вложения.Добавить(Вложение);
	
	Попытка
		Результат = ЛегкаяПочтаСервер.ОтправитьИнтернетПочта(ПараметрыПисьма);
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Возвращает реквизиты объекта, которые разрешается редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив - список имен реквизитов объекта.
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	РедактируемыеРеквизиты = Новый Массив;
	РедактируемыеРеквизиты.Добавить("Комментарий");
	
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

// Версия файла, созданная последней перед указанной датой.
//
// Параметры:
//  СсылкаНаФайл - СправочникСсылка.Файл - Ссылка на файл.
//  ДатаВерсии - Дата - Дата, перед которой нужной получить созданную версию.
// 
// Возвращаемое значение:
//  СправочникСсылка.ВерсииФайлов - Версия файла, созданная перед указанной датой.
//
Функция ВерсияФайлаСозданнаяПоследней(СсылкаНаФайл, ДатаВерсии) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаВерсии) Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВерсииФайлов.Ссылка КАК ВерсияФайла
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|ГДЕ
		|	ВерсииФайлов.Владелец = &СсылкаНаФайл
		|	И ВерсииФайлов.ПометкаУдаления = ЛОЖЬ
		|	И ВерсииФайлов.ДатаСоздания <= &ДатаВерсии
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСоздания УБЫВ");
	
	Запрос.УстановитьПараметр("СсылкаНаФайл", СсылкаНаФайл);
	Запрос.УстановитьПараметр("ДатаВерсии", ДатаВерсии);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВерсияФайлаСозданнаяПоследнейНаДату = Выборка.ВерсияФайла;
	Иначе
		ВерсияФайлаСозданнаяПоследнейНаДату = ПустаяСсылка();
	КонецЕсли;
	
	Возврат ВерсияФайлаСозданнаяПоследнейНаДату;
	
КонецФункции

// Хэш сумма по алгоритму CRC32 версии файла
//
// Параметры:
//  ВерсияФайла - СправочникСсылка.ВерсииФайлов - Ссылка на версию файла
//
// Возвращаемое значение:
//  Число - Хэш-сумма
//
Функция ХэшСуммаВерсииФайлаCRC32(ВерсияФайла) Экспорт
	
	ХешДанных = Новый ХешированиеДанных(ХешФункция.CRC32);
	ДвоичныеДанные = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеВерсииФайла(ВерсияФайла);
	ХешДанных.Добавить(ДвоичныеДанные);
	Возврат ХешДанных.ХешСумма;
	
КонецФункции

// Возвращает текст комментария, показывающего текущую версию файла на формах сравнения версий
// 
// Возвращаемое значение:
//  Строка
//
Функция ТекстНадписиТекущаяВерсия() Экспорт
	
	Возврат НСтр("ru = 'Текущая версия'");
	
КонецФункции

// Возвращает текст комментария, показывающего удаленную версию файла на формах сравнения версий
// 
// Возвращаемое значение:
//  Строка
//
Функция ТекстНадписиВерсияУдалена() Экспорт
	
	Возврат НСтр("ru = 'Версия удалена'");
	
КонецФункции

#КонецОбласти

#КонецЕсли