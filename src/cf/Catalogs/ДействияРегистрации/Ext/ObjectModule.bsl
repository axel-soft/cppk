#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Выполняет процедуры записи объекта.
//
// Параметры:
//	Отказ - Булево - Признак отказа от записи.
//
Процедура ЗаписатьОбъект() Экспорт
	
	Если ДополнительныеСвойства.Свойство("ЭтоНовый") И ДополнительныеСвойства.ЭтоНовый Тогда
		РегистрыСведений.ИтерацииДействий.ДобавитьЗапись(Ссылка, 0);
	КонецЕсли;	
	
	ДействияСервер.ДействияПриЗаписи(ЭтотОбъект, ДополнительныеСвойства);
	
	РаботаСПроцессамиПоОбработкамОбъектовСобытия.ПриЗаписиДействия(ЭтотОбъект);
	РаботаСПроцессамиПоДействиямСобытия.ПриЗаписиДействия(ЭтотОбъект);
	
КонецПроцедуры

// Заполняет действие по настройке действия.
//
// Параметры:
// 	Настройка - СправочникСсылка.НастройкиДействийИсполнения - ссылка на настройку.
// 	ПредметОбъект - ОпределяемыйТип.ПредметДействияОбъект.
//
Процедура ЗаполнитьПоНастройке(Настройка, ПредметОбъект = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Настройка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Настройка) <> Тип("СправочникСсылка.НастройкиДействийРегистрации") Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Настройка типа ""%1"" не подходит для заполнения действия регистрации.
				|Следует актуализировать правила обработки документов.'"),
			ТипЗнч(Настройка));
	КонецЕсли;
	
	НастройкаДействия = Настройка;
	
	Выгруженные = Участники.Выгрузить();
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Настройка,
		"Автор, МоментРазыменованияУчастников, ВидДействия, Участники, Важность, ОтложенноеНачалоВыполнения");
		
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты,, "Участники, Автор, Важность");
	
	Если ЗначениеЗаполнено(Реквизиты.Автор) Тогда 
		Автор = Реквизиты.Автор;
	КонецЕсли;
	Если ЗначениеЗаполнено(Реквизиты.Важность) 
		И Реквизиты.Важность <> Перечисления.ВариантыВажностиОбъектов.Обычная Тогда 
		Важность = Реквизиты.Важность;
	КонецЕсли;
	
	Если ПредметОбъект = Неопределено
		И ЗначениеЗаполнено(Предмет) Тогда
		ПредметОбъект = Предмет.ПолучитьОбъект();
	КонецЕсли;
	
	Участники.Очистить();
	Источники.Очистить();
	РазыменоватьПриСозданииДействия = ДействияСервер.РазыменоватьПриСозданииДействия(МоментРазыменованияУчастников);
	ТаблицаУчастники = Реквизиты.Участники.Выгрузить();
	ТаблицаУчастники.Сортировать("НомерСтроки"); УчастникЗаполнен = Ложь;
	Для Каждого ВыборкаУчастники Из ТаблицаУчастники Цикл
		
		ПараметрыОтбора = Новый Структура("Участник, ФункцияУчастника",	
			ВыборкаУчастники.Участник, ВыборкаУчастники.ФункцияУчастника);
		НайденныеСтроки = Участники.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			// Берем только одного утверждающего, который подошел по условиям.
			Если РазыменоватьПриСозданииДействия И УчастникЗаполнен 
				И ВыборкаУчастники.ФункцияУчастника = Перечисления.ФункцииУчастниковРегистрации.Регистратор Тогда
				Продолжить;
			КонецЕсли;
			
			// Проверка условий.
			Если РазыменоватьПриСозданииДействия 
				И Не РаботаСАлгоритмамиПроверки.АлгоритмПоПредметуВыполняется(
				ПредметОбъект, ВыборкаУчастники.Условие) Тогда
				Продолжить;
			КонецЕсли;
		
			Участник = Участники.Добавить();
			ЗаполнитьЗначенияСвойств(Участник, ВыборкаУчастники);
			Участник.ИзНастройки = Истина;
			Участник.Идентификатор = Новый УникальныйИдентификатор;
			
			Если ВыборкаУчастники.ФункцияУчастника = Перечисления.ФункцииУчастниковРегистрации.Регистратор Тогда
				УчастникЗаполнен = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если в настройках участник не задан, то оставляем того, кого ввели руками.
	Если Не УчастникЗаполнен Тогда
		Для Каждого Выгруженный Из Выгруженные Цикл
			Если Выгруженный.ИзНастройки Тогда
				Продолжить;
			КонецЕсли;	
			
			Участник = Участники.Добавить();
			ЗаполнитьЗначенияСвойств(Участник, Выгруженный);
		КонецЦикла;
	КонецЕсли;
	
	// Обрабатывающего результат добавим, даже если он не задан в настройке
	Если УчастникОбрабатывающийРезультат().Количество() = 0 Тогда 
		Участник = Участники.Добавить();
		Участник.ФункцияУчастника = Перечисления.ФункцииУчастниковРегистрации.ОбрабатывающийРезультат;
		Участник.Участник = Автор;
		Участник.ИзНастройки = Истина;
		Участник.Идентификатор = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Если МоментРазыменованияУчастников = 
		Перечисления.МоментыРазыменованияУчастниковДействий.ПриСозданииДействия Тогда
		Разыменовать(ПредметОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Разыменовывает автоподстановки и контейнеры в составе участников.
//
// Параметры:
// 	ПредметОбъект - ОпределяемыйТип.ПредметДействияОбъект.
// 	ЭтоЗапуск - Булево - признак того, что разыменование происходит в рамках запуска в обработку.
//
Процедура Разыменовать(ПредметОбъект = Неопределено, ЭтоЗапуск = Ложь) Экспорт
	
	Если ПредметОбъект = Неопределено
		И ЗначениеЗаполнено(Предмет) Тогда
		ПредметОбъект = Предмет.ПолучитьОбъект();
	КонецЕсли;
	
	ПроверятьУсловия = ДействияСервер.РазыменоватьПриЗапускеДокументаВОбработку(
		МоментРазыменованияУчастников)
		Или ДействияСервер.РазыменоватьПередВыполнениемДействия(МоментРазыменованияУчастников);
	Для Каждого СтрУчастник Из Участники Цикл
		
		// Проверка условий.
		Если ПроверятьУсловия
			И Не РаботаСАлгоритмамиПроверки.АлгоритмПоПредметуВыполняется(
				ПредметОбъект, СтрУчастник.Условие) Тогда
			СтрУчастник.Участник = Неопределено;
			Участники.Удалить(СтрУчастник);
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(СтрУчастник.Участник) = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов") Тогда
			
			ДанныеРазыменования = ДействияСервер.РазыменоватьАвтоподстановку(
				СтрУчастник.Участник, 
				ПредметОбъект,
				СтрУчастник.ФункцияУчастника, 
				Перечисления.ФункцииУчастниковРегистрации.ОбрабатывающийРезультат,
				Ложь);
				
			СтрУчастник.Участник = Неопределено;
				
			Для Каждого РазыменованныйУчастник Из ДанныеРазыменования Цикл
					
				СтрУчастник.Участник = РазыменованныйУчастник;
				
				ДействияСервер.ДобавитьИсточник(
					ЭтотОбъект, "Участник", Неопределено, СтрУчастник.Участник, РазыменованныйУчастник);
				
			КонецЦикла;	
			
		ИначеЕсли ТипЗнч(СтрУчастник.Участник) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			
			ВызватьИсключение 
				НСтр("ru = 'Недопустимый тип для автоподстановки. СправочникСсылка.СтруктураПредприятия'");
			
		КонецЕсли;
	КонецЦикла;
	
	ДействияСервер.РазыменоватьАвтора(ЭтотОбъект, ПредметОбъект);
	
	// При запуске в работу, оставляем только одного реального Регистратора.
	Если ЭтоЗапуск Тогда
		УчастникЗадан = Ложь;
		Для Каждого СтрУчастник Из Участники Цикл
			Если ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(СтрУчастник.ФункцияУчастника) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрУчастник.Участник) Тогда 
				Участники.Удалить(СтрУчастник);
				Продолжить;
			КонецЕсли;
			
			Если УчастникЗадан Тогда
				Участники.Удалить(СтрУчастник);
			КонецЕсли;
				
			УчастникЗадан = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заменяет участника действия
//
// Параметры:
//	Идентификатор - УникальныйИдентификатор - идентификатор участника
//	НовыйУчастник - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли - новый участник процесса
//	Причина - Строка - описание причины замены
//	Автор - Неопределено, СправочникСсылка.Сотрудники - сотрудник, перенаправивший задачу
//
Процедура ЗаменитьУчастника(Идентификатор, НовыйУчастник, Причина = "", Автор = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		ВызватьИсключение НСтр("ru = 'Замена участника возможна только после записи действия.'");
	КонецЕсли;
	
	ПрежнийУчастник = Неопределено;
	
	СтрокаУчастника = Участники.Найти(Идентификатор, "Идентификатор");
	Если СтрокаУчастника <> Неопределено И СтрокаУчастника.Участник <> НовыйУчастник Тогда
		ПрежнийУчастник = СтрокаУчастника.Участник;
		СтрокаУчастника.Участник = НовыйУчастник;
	КонецЕсли;
	
	ТекущаяОбработка = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Ссылка);
	
	Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
	Событие.Обработка = ТекущаяОбработка;
	Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.ИзменениеУчастников;
	Событие.Действие = Ссылка;
	Событие.Описание = СтрШаблон(НСтр("ru = 'Участник %1 заменен на %2. Причина: %3'"), ПрежнийУчастник, НовыйУчастник, Причина);
	Событие.ИдентификаторУчастника = Идентификатор;
	Событие.Участник = ПрежнийУчастник;
	Событие.Функция = СтрокаУчастника.ФункцияУчастника;
	Событие.Сотрудник = Автор;
	РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
	
КонецПроцедуры

// Устанавливает срок исполнения участнику.
//
// Параметры:
//  Идентификатор - УникальныйИдентификатор - Идентификатора участника в действии.
//  ВариантУстановкиСрока - ПеречислениеСсылка.ВариантыУстановкиСрокаИсполнения
//  Срок - Дата - срок участника точной датой.
//  СрокДни, СрокЧасы, СрокМинуты - Число - относительный срок участника.
//
Процедура УстановитьСрокИсполненияУчастнику(Идентификатор, ВариантУстановкиСрока,
	Срок, СрокДни, СрокЧасы, СрокМинуты) Экспорт
	
	СтрокаУчастника = Участники.Найти(Идентификатор, "Идентификатор");
	
	Если СтрокаУчастника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаУчастника.ВариантУстановкиСрока = ВариантУстановкиСрока;
	СтрокаУчастника.Срок = Срок;
	СтрокаУчастника.СрокДни = СрокДни;
	СтрокаУчастника.СрокЧасы = СрокЧасы;
	СтрокаУчастника.СрокМинуты = СрокМинуты;
	
КонецПроцедуры

// Возвращает участников с функций "Участник".
// 
// Возвращаемое значение:
//  Массив Из СтрокаТабличнойЧасти - Участники.
//
Функция Участники() Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ФункцияУчастника", Перечисления.ФункцииУчастниковРегистрации.Регистратор);
	Возврат Участники.НайтиСтроки(ПараметрыОтбора);
	
КонецФункции

// Возвращает участников с функций "Обрабатывающий результат".
// 
// Возвращаемое значение:
//  Массив Из СтрокаТабличнойЧасти- Участники.
//
Функция УчастникОбрабатывающийРезультат() Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ФункцияУчастника", 
		Перечисления.ФункцииУчастниковРегистрации.ОбрабатывающийРезультат);
	Возврат Участники.НайтиСтроки(ПараметрыОтбора);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ДействияСобытия.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") 
			И ДанныеЗаполнения.Свойство("Настройка") Тогда
		
		ПредметОбъект = Неопределено;
		ДанныеЗаполнения.Свойство("ПредметОбъект", ПредметОбъект);
		ЗаполнитьПоНастройке(ДанныеЗаполнения.Настройка, ПредметОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДействияСервер.ДействияПередЗаписью(ЭтотОбъект);
	
	РаботаСПроцессамиПоОбработкамОбъектовСобытия.ПередЗаписьюДействия(ЭтотОбъект);
	РаботаСПроцессамиПоДействиямСобытия.ПередЗаписьюДействия(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда		
		Возврат;
	КонецЕсли;
	
	ДействияСервер.ЗаписатьДействие(ЭтотОбъект, Отказ);
		
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли