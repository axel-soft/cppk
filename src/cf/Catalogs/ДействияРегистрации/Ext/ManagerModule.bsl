#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("Ссылка");
	Поля.Добавить("ВидДействия");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Представление = ДействияСервер.ПредставлениеДействия(Данные.Ссылка, Данные.ВидДействия);
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ДействияСервер.ОбработкаПолученияФормы(
		ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
		
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Заполняет дерево на закладке Обработка
// 
// Параметры
// ЭлементДействие - элемент дерева 
// Действие - ссылка на действие 
// ПредметОбъект - ОпределяемыйТип.ПредметДействияОбъект.
//
Процедура ЗаполнитьДействиеВФормеПредмета(ЭлементДействие, Действие, ПредметОбъект, 
	НужнаИсторияОбработки, ПечатьКарточкиДокумента = Ложь) Экспорт 
	
	Если ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияРегистрации") Тогда 
		ЗначенияЗаполнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие,
			ИменаРеквизитовДляЗаполнения());
		ДействиеСсылка = Действие;
		УчастникиДействия = ЗначенияЗаполнения.Участники.Выгрузить();
		УчастникиДействия.Сортировать("НомерСтроки Возр");
		
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникОбъект.ДействияРегистрации") Тогда 
		ЗначенияЗаполнения = Новый Структура(ИменаРеквизитовДляЗаполнения());
		ЗаполнитьЗначенияСвойств(ЗначенияЗаполнения, Действие);
		ДействиеСсылка = Действие.Ссылка;
		УчастникиДействия = Действие.Участники;
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестный тип'");
	КонецЕсли;
	
	ЗначенияЗаполнения.Вставить("Действие", ДействиеСсылка);
	ЗначенияЗаполнения.Вставить("ВариантУстановкиСрока", 
		Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок);
	ЗначенияЗаполнения.Вставить("СрокДействия", ЗначенияЗаполнения.СрокДействия);
	
	Участники = ДействияСервер.НоваяТаблицаУчастники();
	ЭтапыДействия = ДействияСервер.НоваяТаблицаЭтапы();
	ИдентификаторОбрабатывающегоРезультат = ДействияСервер.ПредопределенныйИдентификаторУчастника(
		"ЭтапОбрабатывающийРезультатРегистрации");
		
	ЕстьЗадачаОзнакомиться = Ложь;
	Для Каждого Участник Из УчастникиДействия Цикл 
		
		Если Не ЗначениеЗаполнено(Участник.Участник) Тогда 
			Продолжить;
		КонецЕсли;
		
		// Обрабатывающих показываем только при "Выполнении"
		Если ДействияСервер.ЭтоОбрабатывающийРезультатИЗадачаВыполнена(
			ДействиеСсылка,	Участник.ФункцияУчастника, 
			Перечисления.ФункцииУчастниковРегистрации.ОбрабатывающийРезультат,	
			Участник.Участник, Участник.Идентификатор) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Участник.ФункцияУчастника = Перечисления.ФункцииУчастниковРегистрации.ОбрабатывающийРезультат Тогда
			ЕстьЗадачаОзнакомиться = Истина;
		КонецЕсли;	
			 
	КонецЦикла;

	ИдЭтапаРегистрации = Неопределено;
	Если ЭтапыДействия.Количество() = 0 И ЕстьЗадачаОзнакомиться Тогда
		// добавим псевдо "этап"  Зарегистрировать
		ИдЭтапаРегистрации = Новый УникальныйИдентификатор;
		НовСтр = ЭтапыДействия.Добавить();
		НовСтр.Функция = ПредопределенноеЗначение(
			"Перечисление.ФункцииУчастниковРегистрации.Регистратор");
		НовСтр.Наименование = НСтр("ru = 'Зарегистрировать'");
		НовСтр.Идентификатор = ИдЭтапаРегистрации;
	КонецЕсли;
		
	Для Каждого Участник Из УчастникиДействия Цикл 

		// Обрабатывающих показываем только при "Выполнении"
		Если ДействияСервер.ЭтоОбрабатывающийРезультатИЗадачаВыполнена(
			ДействиеСсылка,	Участник.ФункцияУчастника, 
			Перечисления.ФункцииУчастниковРегистрации.ОбрабатывающийРезультат,	
			Участник.Участник, Участник.Идентификатор) Тогда
			Продолжить;
		КонецЕсли;	 
		
		ДобавляемыйУчастник = Участники.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавляемыйУчастник, Участник);
		ДобавляемыйУчастник.Функция = Участник.ФункцияУчастника;
		
		Если ДобавляемыйУчастник.Функция = Перечисления.ФункцииУчастниковРегистрации.Регистратор 
			И ЕстьЗадачаОзнакомиться Тогда
				
			ДобавляемыйУчастник.ИдентификаторЭтапа = ИдЭтапаРегистрации;
			
		КонецЕсли;	
		
		Если Участник.ФункцияУчастника = Перечисления.ФункцииУчастниковРегистрации.ОбрабатывающийРезультат Тогда
			 
			ДобавляемыйУчастник.ИдентификаторЭтапа = ИдентификаторОбрабатывающегоРезультат;
			
			НовСтр = ЭтапыДействия.Добавить();
			НовСтр.Функция = ПредопределенноеЗначение(
				"Перечисление.ФункцииУчастниковСогласования.ОбрабатывающийРезультат");
			НовСтр.Наименование = НСтр("ru = 'Ознакомиться с результатом регистрации'");
			НовСтр.Идентификатор = ИдентификаторОбрабатывающегоРезультат;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	ЗначенияЗаполнения.Вставить("Участники", Участники);
	
	ДействияСервер.ЗаполнитьДействиеВФормеПредмета(ЭлементДействие, ДействиеСсылка, 
		ЗначенияЗаполнения, ПредметОбъект,,ЭтапыДействия, НужнаИсторияОбработки, ПечатьКарточкиДокумента);
	
КонецПроцедуры

// Проверяет строки участников на возможность начать обработку по ним.
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияРегистрации - Ссылка на действие.
// 	ПредметОбъект - ОпределяемыйТип.ПредметДействияОбъект. 
// 	СообщенияОбОшибках - Массив - массив сообщений об ошибках.
// 	ПараметрыПроверок - Структура - вспомогательные параметры проверки перед запуском.
//
Процедура ПроверкаПередЗапуском(Действие, ПредметОбъект, СообщенияОбОшибках, ПараметрыПроверок) Экспорт
	
КонецПроцедуры

// Возвращает всех участников действия, кроме обрабатывающего результат
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияРегистрации - ссылка на действие
// 	
// Возвращаемое значение:
// 	ТаблицаЗначений - таблица участников действия, кроме обрабатывающего результат.
// 
Функция УчастникиДействия(Действие) Экспорт
	
	Участники = ДействияСервер.НоваяТаблицаУчастники();
	
	УчастникиДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие,
		"Участники");
	УчастникиДействия = УчастникиДействия.Выгрузить();	
	
	Для Каждого Участник Из УчастникиДействия Цикл 
		
		Если ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(
			Участник.ФункцияУчастника)
			Или Не ЗначениеЗаполнено(Участник.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавляемыйУчастник = Участники.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавляемыйУчастник, Участник);
		ДобавляемыйУчастник.Функция = Участник.ФункцияУчастника;
		
	КонецЦикла;
	
	Возврат Участники;
	
КонецФункции	

// Возвращает всех участников действия, включая обрабатывающего результат
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияРегистрации - ссылка на действие
// 	
// Возвращаемое значение:
// 	ТаблицаЗначений - таблица участников действия, кроме обрабатывающего результат.
// 
Функция ВсеУчастникиДействия(Действие) Экспорт
	
	Участники = ДействияСервер.НоваяТаблицаУчастники();
	
	УчастникиДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие,
		"Участники");
	УчастникиДействия = УчастникиДействия.Выгрузить();	
	
	Для Каждого Участник Из УчастникиДействия Цикл 
		
		Если Не ЗначениеЗаполнено(Участник.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавляемыйУчастник = Участники.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавляемыйУчастник, Участник);
		ДобавляемыйУчастник.Функция = Участник.ФункцияУчастника;
		
	КонецЦикла;
	
	Возврат Участники;
	
КонецФункции	

// Готовит действие к выполнению
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияРегистрации - ссылка на действие
//
Процедура ПодготовитьДействиеКВыполнению(Действие) Экспорт
	
	РегистрыСведений.ИтерацииДействий.ИнкрементироватьНомерИтерации(Действие);
	
КонецПроцедуры	

// Отмечает в действии принятие к выполнению
//
// Параметры:
// 	Действие - СправочникСсылка.ДействияРегистрации - ссылка на действие
//  ПараметрыИзменения -Структура
//
Процедура ОтметитьПринятиеКИсполнению(Действие, ПараметрыИзменения) Экспорт
	
КонецПроцедуры	

// Проверяет необходимость выполнения действия.
//
// Если не соблюдены условия для обязательного действия, то
// генерируется исключение.
//
// Параметры:
//  Действие - ОпределяемыйТип.ДействияОбъект - объект действия.
//  ПропуститьДействие - Булево - неявно возвращаемый параметр, принимает значение Истина,
//                            если необходимо пропустить исполнение действия.
//
Процедура ПроверитьНеобходимостьВыполненияДействия(Действие, ПропуститьДействие) Экспорт
	
	ПропуститьДействие = Ложь;
	
	Участники = УчастникиДействия(Действие);
	
	// Проверяем наличие участников и если их нет,
	// то отказываемся от создания процесса по действию.
	Если Участники.Количество() = 0 Тогда
		ПропуститьДействие = Истина;
	Иначе	
		Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет");
		Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Предмет) Тогда
			РегистрационныйНомер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "РегистрационныйНомер");
			Если ЗначениеЗаполнено(РегистрационныйНомер) Тогда
				ПропуститьДействие = Истина; // уже зарегистрировали документ вручную.
			КонецЕсли;					
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

// Возвращает представление действия строкой.
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияРегистрации
// 	
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеДействияСтрокой(Действие) Экспорт
	
	СтрокиПредставления = Новый	Массив;
		
	РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Действие, "ВидДействия, Участники");
	
	РеквизитыДействия.Участники = РеквизитыДействия.Участники.Выгрузить();
	
	СтрокиПредставления.Добавить(Строка(РеквизитыДействия.ВидДействия));
	СтрокиПредставления.Добавить(Символы.ПС);
	
	ФункцииУчастников = Перечисления.ФункцииУчастниковРегистрации;
	
	Для Каждого СтрокаТаблицы Из РеквизитыДействия.Участники Цикл
	
		Если СтрокаТаблицы.ФункцияУчастника <> ФункцииУчастников.Регистратор Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиПредставления.Добавить(Символы.ПС);
		СтрокиПредставления.Добавить(Строка(СтрокаТаблицы.Участник));
		
	КонецЦикла;
	
	Возврат СтрСоединить(СтрокиПредставления);
	
КонецФункции

// Возвращает участника, которого необходимо ознакомить с результатом завершения действия.
//
// Параметры:
//	Действие - СправочникСсылка.ДействияРегистрации - Действие, в котором нужно найти участника, которого необходимо
//													  ознакомить с результатом.
//
// Возвращаемое значение:
//	* СправочникСсылка.Сотрудники,
//	  СправочникСсылка.ПолныеРоли, 
//	  СправочникСсылка.АвтоподстановкиДляОбъектов - участник, которого необходимо ознакомить с результатом.
//
Функция ОзнакамливаемыйСРезультатом(Действие) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ОзнакамливаемыйСРезультатом = Неопределено;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Участник КАК Участник
		|ИЗ
		|	Справочник.ДействияРегистрации.Участники
		|ГДЕ
		|	Ссылка = &Действие
		|	И ФункцияУчастника = ЗНАЧЕНИЕ(Перечисление.ФункцииУчастниковРегистрации.ОбрабатывающийРезультат)");
	Запрос.УстановитьПараметр("Действие", Действие);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОзнакамливаемыйСРезультатом = Выборка.Участник;
	КонецЕсли;

	Возврат ОзнакамливаемыйСРезультатом;
		
КонецФункции

// Возвращает описание результата завершения действия.
//
// Параметры:
//	Действие - СправочникСсылка.ДействияРегистрации - Действие, для которого необходимо получить описание
//													  результата завершения.
//	КодЯзыка - Строка - Код языка пользователя
//
// Возвращаемое значение:
//	Строка - Описание результата завершения действия.
//
Функция ОписаниеРезультатаЗавершенияДействия(Действие, КодЯзыка) Экспорт

	ОписаниеРезультата = "";
	
	РезультатДействия = РегистрыСведений.РезультатыДействий.РезультатДействия(Действие);	
	Если РезультатДействия = Перечисления.РезультатыРегистрации.Зарегистрировано Тогда
		ОписаниеРезультата = НСтр("ru = 'Результат регистрации: Зарегистрировано'", КодЯзыка);
	ИначеЕсли РезультатДействия = Перечисления.РезультатыРегистрации.НеЗарегистрировано Тогда
		ОписаниеРезультата = НСтр("ru = 'Результат регистрации: Не зарегистрировано'", КодЯзыка);
	КонецЕсли;	
					
	Возврат ОписаниеРезультата;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ВыполнениеДействий

Процедура ОтметитьНачалоВыполнения(Действие, Параметры) Экспорт
	
	ДействияСервер.ОтметитьНачалоВыполнения(Действие, Параметры);
	
КонецПроцедуры

// Отмечает действие Регистрация выполненным регистратором.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияРегистрации
//  Параметры - Структура
//
Процедура ОтметитьВыполнение(Действие, Параметры) Экспорт
	
	ДействияСервер.ОтметитьВыполнение(Действие, Параметры);
	ОбновитьРезультатВыполнения(Действие);
	
КонецПроцедуры

// Обновляет результат выполнения действия по результату регистрирующего.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияРегистрации
//
Процедура ОбновитьРезультатВыполнения(Действие) Экспорт
	
	Если РаботаСПроцессамиПоДействиямСобытия.ОбработатьОбновлениеРезультатаВыполненияДействия(
		Действие) Тогда
		
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Состояние = РегистрыСведений.СостоянияДействий.СостояниеДействия(Действие);
	Если Состояние <> Перечисления.СостоянияВыполненияДействий.Выполняется Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеИРезультатПолучены = Ложь;
	
	Результат = Неопределено;
			
	// Если нет регистратора и действие выполняется, то установим ему состояние пропущенного.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Участники.Участник 
		|ИЗ
		|	Справочник.ДействияРегистрации.Участники КАК Участники
		|ГДЕ
		|	Участники.Ссылка = &Действие
		|	И Участники.ФункцияУчастника = &Функция";
	
	Запрос.УстановитьПараметр("Действие", Действие);
	Запрос.УстановитьПараметр("Функция", Перечисления.ФункцииУчастниковРегистрации.Регистратор);
	
	РезультатЗапроса = Запрос.Выполнить();
			
	Если РезультатЗапроса.Пустой() Тогда
		Состояние = Перечисления.СостоянияВыполненияДействий.Пропущено;
		
		ТекущаяОбработка = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
		
		Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
		Событие.Обработка = ТекущаяОбработка;
		Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.ПропускДействия;
		Событие.Действие = Действие;
		РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
		
		СостояниеИРезультатПолучены = Истина;
	КонецЕсли;
	
	Если Не СостояниеИРезультатПолучены Тогда
		
		// Если не все выполнили свои задачи (состояния отличны от завершенных), то действие выполняется.
		// Иначе завершено, результат действия подсчитывается по результату регистратора.
		
		Состояние = Перечисления.СостоянияВыполненияДействий.Выполняется;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СостоянияДействий.ИдентификаторУчастника КАК ИдентификаторУчастника,
			|	СостоянияДействий.Участник КАК Участник,
			|	СостоянияДействий.Функция КАК Функция,
			|	СостоянияДействий.Состояние КАК Состояние
			|ИЗ
			|	РегистрСведений.СостоянияДействий КАК СостоянияДействий
			|ГДЕ
			|	СостоянияДействий.Действие = &Действие
			|	И СостоянияДействий.ИдентификаторУчастника <> &ПустойИдентификатор
			|	И НЕ СостоянияДействий.Состояние В (&КонечныеСостояния)";
		
		Запрос.УстановитьПараметр("Действие", Действие);
		Запрос.УстановитьПараметр("ПустойИдентификатор", УникальныйИдентификаторПустой());
		
		КонечныеСостояния = Новый Массив;
		КонечныеСостояния.Добавить(Перечисления.СостоянияВыполненияДействий.Завершено);
		Запрос.УстановитьПараметр("КонечныеСостояния", КонечныеСостояния);
		
		Если Запрос.Выполнить().Пустой() Тогда
			
			Состояние = Перечисления.СостоянияВыполненияДействий.Завершено;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	РезультатыДействий.Действие КАК Действие,
				|	РезультатыДействий.ИдентификаторУчастника КАК ИдентификаторУчастника,
				|	РезультатыДействий.Функция КАК Функция,
				|	РезультатыДействий.Результат КАК Результат
				|ИЗ
				|	РегистрСведений.РезультатыДействий КАК РезультатыДействий
				|ГДЕ
				|	РезультатыДействий.Действие = &Действие
				|	И РезультатыДействий.Функция = &Функция
				|	И РезультатыДействий.ИдентификаторУчастника <> &ПустойИдентификатор";
			Запрос.УстановитьПараметр("Действие", Действие);
			Запрос.УстановитьПараметр("ПустойИдентификатор", УникальныйИдентификаторПустой());
			Запрос.УстановитьПараметр("Функция", Перечисления.ФункцииУчастниковРегистрации.Регистратор);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			
			Результат = Выборка.Результат;
			
		КонецЕсли;
		
		СостояниеИРезультатПолучены = Истина;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		РегистрыСведений.РезультатыДействий.УстановитьРезультат(Действие, Результат);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Состояние) Тогда
		РегистрыСведений.СостоянияДействий.УстановитьСостояние(Действие, Состояние);
	КонецЕсли;
	
	ОбработкиОбъектовСобытия.ПриЗавершенииДействия(Действие, Состояние);
	
КонецПроцедуры

// Особенная логика, например удаление виз и пр.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияИсполнения
//	Участники  - таблица значений
//
Процедура ПриСбросеРезультатовВыполнения(Действие, Участники) Экспорт
	
	СостояниеДействия = РегистрыСведений.СостоянияДействий.СостояниеДействия(Действие);
	Если СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Выполняется Тогда
		РегистрыСведений.ИтерацииДействий.ИнкрементироватьНомерИтерации(Действие);
	КонецЕсли;

КонецПроцедуры

// Обработчик события прерывания выполнения выполнения действий, для
// определения особой логики.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияРегистрации
//
Процедура ПриПрерыванииВыполненияДействия(Действие) Экспорт
	
	// Особой логики не предусмотрено.
	
КонецПроцедуры

// Обработчик события удаления результатов выполнения действий, для
// определения особой логики.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияРегистрации
//
Процедура ПриУдаленииРезультатовВыполнения(Действие) Экспорт
	
	// Особой логики не предусмотрено.
	
КонецПроцедуры

#КонецОбласти

#Область ИсторияДействий

// Помещает действие в историю, обрабатывая связанные с ним данные.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияРегистрации - ссылка на действие.
//
Процедура ПоместитьДействиеВИсторию(Действие, ПричинаПрерывания = "") Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		// при прерывании обработки не проверяем блокировку.
		
		ДействиеОбъект = Действие.ПолучитьОбъект();
		ДействиеОбъект.ПомещеноВИсторию = Истина;
		
		ДействияСервер.УстановитьБлокировкиПоПредмету(ДействиеОбъект.Предмет);
		ДействияСервер.УстановитьПризнакЗаписиДействияПриПомещенииВИсторию(ДействиеОбъект);
		ДействиеОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

// Возвращает структуру доступных обработчиков событий
//
// Возвращаемое значение:
//  см. ДействияСервер.ДоступныеОбработчикиМенеджера
Функция ДоступныеОбработчикиМенеджера() Экспорт
	
	ДоступныеОбработчики = ДействияСервер.ДоступныеОбработчикиМенеджера(); 
	ДоступныеОбработчики.ОбработкаПрерывания = Ложь;
	ДоступныеОбработчики.ОбработкаСнятияПаузы = Ложь;
	ДоступныеОбработчики.ОбработкаПостановкиНаПаузу = Ложь;
	ДоступныеОбработчики.ОбработкаИзмененияУчастника = Ложь;
	Возврат ДоступныеОбработчики;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИменаРеквизитовДляЗаполнения()
	
	Возврат "Ссылка, ВидДействия, Участники, СрокДействия, МоментРазыменованияУчастников";
	
КонецФункции

#КонецОбласти

#КонецЕсли
