#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Выполняет поиск единицы измерения в справочнике "КлассификаторЕдиницИзмерения"
// если элемент в справочнике не найден, осуществляется попытка добавления элемента из ОКЕИ,
// если в ОКЕИ элемент не найден, то он создается с переданным кодом и наименованием
// Если Наименование не задано то добавление элемента в справочник произведено не будет!
//
// Параметры:
//	КодПоОКЕИ - Строка - код единицы измерения по ОКЕИ (Обязательный)
//	Наименование - Строка - Наименование единицы измерения (Необязательный), оно же "условное обозначение".
//	НаименованиеПолное - Строка - Полное наименование единицы измерения (Необязательный).
//
// Возвращаемое значение:
// Неопределено - если поиск и попытка добавления элемента не дали результатов
// СправочникСсылка.КлассификаторЕдиницИзмерения - если поиск или добавление успешны
// 
Функция ЕдиницаИзмеренияПоКоду(КодПоОКЕИ, Наименование = "", НаименованиеПолное = "") Экспорт

	// Если кодПоОКЕИ не заполнен то возврат
	Если НЕ ЗначениеЗаполнено(КодПоОКЕИ) Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		// Сначала попытаемся найти единицу среди уже существующих в справочнике
		ЕдиницаИзмерения = НайтиПоКоду(КодПоОКЕИ);
		
		Если ЕдиницаИзмерения <> ПустаяСсылка() Тогда 
			
			// Если нашли возвращаем ссылку
			Возврат ЕдиницаИзмерения;
			
		Иначе
			
			// Если единицы нет в справочнике, поищем ее в классификаторе
			// Классификатор хранится в макете "КлассификаторЕдиницИзмерения"
			Классификатор = ПолучитьМакет("КлассификаторЕдиницИзмерения");
			
			// Поищем КодПоОКЕИ в таблице классификатора
			НайденнаяОбласть = Классификатор.НайтиТекст(
				КодПоОКЕИ,, Классификатор.Области.КодЧисловой, , Истина, , Истина);
			ЗначенияЗаполнения = Новый Структура("Код, Наименование, НаименованиеПолное", "", "", "");
			
			// Если единица найдена, заполняем нашу структуру из классификатора
			Если НайденнаяОбласть <> Неопределено Тогда
				ЗначенияЗаполнения.Код = ЗначениеВМакете(
					Классификатор, НайденнаяОбласть.Верх, Классификатор.Области.КодЧисловой.Лево);
				ЗначенияЗаполнения.Наименование = ЗначениеВМакете(
					Классификатор, НайденнаяОбласть.Верх,  Классификатор.Области.НаименованиеКраткое.Лево);
				// У международных единиц в другой колонке:
				Если Не ЗначениеЗаполнено(ЗначенияЗаполнения.Наименование) Тогда
					ЗначенияЗаполнения.Наименование = ЗначениеВМакете(
						Классификатор,
						НайденнаяОбласть.Верх,
						Классификатор.Области.УсловноеОбозначениеМеждународное.Лево);
					Если Не ЗначениеЗаполнено(ЗначенияЗаполнения.Наименование) Тогда
						ЗначенияЗаполнения.Наименование = ЗначениеВМакете(
							Классификатор,
							НайденнаяОбласть.Верх,
							Классификатор.Области.КодовоеОбозначениеМеждународное.Лево);
					КонецЕсли;
				КонецЕсли;
				
				ЗначенияЗаполнения.НаименованиеПолное = ЗначениеВМакете(
					Классификатор, НайденнаяОбласть.Верх, Классификатор.Области.НаименованиеПолное.Лево);
			
			// Если в классификаторе нет подходящей единицы, но у нас есть данные для заполнения справочника
			// то добавляем новую единицу по этим данным
			ИначеЕсли ЗначениеЗаполнено(Наименование) Тогда
				
				ЗначенияЗаполнения.Код = КодПоОКЕИ;
				ЗначенияЗаполнения.Наименование = Наименование;
				ЗначенияЗаполнения.НаименованиеПолное = ?(
					ЗначениеЗаполнено(НаименованиеПолное), НаименованиеПолное, Наименование);
				
			Иначе
				// Если единицы нет в классификаторе и ничего кроме кода о ней не известно:
				Возврат Неопределено;
			КонецЕсли;
			
			// Создаем единицу измерения в справочнике
			НоваяЕдиницаИзмерения = СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(НоваяЕдиницаИзмерения, ЗначенияЗаполнения);
			НоваяЕдиницаИзмерения.Записать();
			
			ЕдиницаИзмерения = НоваяЕдиницаИзмерения.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЕдиницаИзмерения;
	
КонецФункции

// Правила пересчета единиц измерения.
// 
// Параметры:
//  ТолькоИспользуемыеЕдиницы - Булево -
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Правила пересчета единиц измерения:
// * ЕдиницаИзмерения - СправочникСсылка.КлассификаторЕдиницИзмерения - 
// * КодЕдиницыИзмерения - Строка -
// * БазоваяЕдиница - СправочникСсылка.КлассификаторЕдиницИзмерения - 
// * КодБазовойЕдиницы - Строка -
// * Коэффициент - Число - 
Функция ПравилаПересчетаЕдиницИзмерения(ТолькоИспользуемыеЕдиницы = Ложь) Экспорт

	ТипКодаЕдиницыИзмерения = ОбщегоНазначения.ОписаниеТипаСтрока(4);
	ПравилаПересчета = Новый ТаблицаЗначений;
	ПравилаПересчета.Колонки.Добавить(
		"ЕдиницаИзмерения",
		Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения")); // Может быть не заполнена, если единицы нет в справочнике
	ПравилаПересчета.Колонки.Добавить("КодЕдиницыИзмерения", ТипКодаЕдиницыИзмерения);
	ПравилаПересчета.Колонки.Добавить(
		"БазоваяЕдиница",
		Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения")); // Может быть не заполнена, если единицы нет в справочнике
	ПравилаПересчета.Колонки.Добавить("КодБазовойЕдиницы", ТипКодаЕдиницыИзмерения);
	ПравилаПересчета.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число"));

	ЗагруженныйКлассификатор = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Классификатор.Код КАК Код,
	|	Классификатор.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторЕдиницИзмерения КАК Классификатор";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗагруженныйКлассификатор.Вставить(Выборка.Код, Выборка.Ссылка);
	КонецЦикла;
	
	МакетПравил = ПолучитьМакет("ПравилаПересчета");
	ПоставляемыеПравилаПересчета = ОбщегоНазначения.ПрочитатьXMLВТаблицу(МакетПравил.ПолучитьТекст());
	Для Каждого ПоставляемоеПравило Из ПоставляемыеПравилаПересчета.Данные Цикл
		
		ЕдиницаИзмерения = ЗагруженныйКлассификатор[ПоставляемоеПравило.КодЕдиницыИзмерения];
		
		Если ТолькоИспользуемыеЕдиницы И ЕдиницаИзмерения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ПравилаПересчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПоставляемоеПравило);// В поле Коэффициент - неявное преобразование строки к числу
		
		НоваяСтрока.ЕдиницаИзмерения = ЗагруженныйКлассификатор[НоваяСтрока.КодЕдиницыИзмерения];
		НоваяСтрока.БазоваяЕдиница   = ЗагруженныйКлассификатор[НоваяСтрока.КодБазовойЕдиницы];
		
	КонецЦикла;
	
	Возврат ПравилаПересчета;
	
КонецФункции

// Единица измерения по умолчанию.
// 
// Возвращаемое значение:
//  СправочникСсылка.КлассификаторЕдиницИзмерения -
Функция ЕдиницаИзмеренияПоУмолчанию() Экспорт
	
	ЕдиницаПоУмолчанию = НайтиПоКоду("796"); // "штука"
	Если ЕдиницаПоУмолчанию = ПустаяСсылка() Тогда
		ЕдиницаПоУмолчанию = НайтиПоНаименованию("шт", Истина);
	КонецЕсли;
	
	Возврат ЕдиницаПоУмолчанию;
	
КонецФункции

#Область ОбработчикиОбновления

// Первоначальное заполнение кодов.
// Корректирует код у старых элементов, у которых раньше его не было. Сопоставление сначала по условному обозначению,
// потом, если не найдено, по полному наименованию.
Процедура ЗаполнитьИзМакетаКлассификатора() Экспорт
	
	Если ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга()
		И Не ОбщегоНазначенияДокументооборот.ЭтоЦентральныйУзел() Тогда
		Возврат;
	КонецЕсли;
	
	Макет = ПолучитьМакет("КлассификаторЕдиницИзмерения");
	КолонкаКод = Макет.Области.КодЧисловой.Лево;
	КолонкаНаименованиеКраткое = Макет.Области.НаименованиеКраткое.Лево;
	КолонкаНаименованиеПолное = Макет.Области.НаименованиеПолное.Лево;
	
	// Редкий сценарий, перестраховка, для очень экзотических единиц измерения:
	КолонкаМеждународное = Макет.Области.УсловноеОбозначениеМеждународное.Лево;
	КолонкаКодовоеМеждународное = Макет.Области.КодовоеОбозначениеМеждународное.Лево;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.Ссылка Как ЕдиницаСсылка,
		|	Т.Наименование,
		|	Т.НаименованиеПолное,
		|	Т.Код
		|ИЗ
		|	Справочник.КлассификаторЕдиницИзмерения КАК Т
		|ГДЕ
		|	НЕ Т.ПометкаУдаления");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Для НомерСтроки = 1 По Макет.ВысотаТаблицы Цикл
		
		КодВМакете = ЗначениеВМакете(Макет, НомерСтроки, КолонкаКод);
		Если Не ЗначениеЗаполнено(КодВМакете) Тогда
			Продолжить;
		КонецЕсли;
		Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодВМакете) Тогда
			Продолжить;
		КонецЕсли;
		
		НаименованиеКраткоеВМакете = ЗначениеВМакете(Макет, НомерСтроки, КолонкаНаименованиеКраткое);
		// У международных единиц в другой колонке:
		Если Не ЗначениеЗаполнено(НаименованиеКраткоеВМакете) Тогда
			НаименованиеКраткоеВМакете = ЗначениеВМакете(Макет, НомерСтроки, КолонкаМеждународное);
			Если Не ЗначениеЗаполнено(НаименованиеКраткоеВМакете) Тогда
				НаименованиеКраткоеВМакете = ЗначениеВМакете(Макет, НомерСтроки, КолонкаКодовоеМеждународное);
			КонецЕсли;
		КонецЕсли;
		НаименованиеПолноеВМакете = ЗначениеВМакете(Макет, НомерСтроки, КолонкаНаименованиеПолное);
		
		Если Не ЗначениеЗаполнено(НаименованиеКраткоеВМакете) Или Не ЗначениеЗаполнено(НаименованиеПолноеВМакете) Тогда
			Продолжить; // не нашли
		КонецЕсли;
		
		Ищем = Новый Структура();
		Если ЗначениеЗаполнено(Выборка.Код) Тогда
			// Сопоставление по коду. Код у элемента уже корректен, но уточним ему наименование и полное наименование по
			// классификатору:
			Ищем.Вставить("Код", КодВМакете);
		Иначе
			// Сопоставление по связке Наименование + Полное наименование:
			Ищем.Вставить("Наименование", НаименованиеКраткоеВМакете);
			Ищем.Вставить("НаименованиеПолное", НаименованиеПолноеВМакете);
		КонецЕсли;
		
		Пока Выборка.НайтиСледующий(Ищем) Цикл
			ЕдиницаОбъект = Выборка.ЕдиницаСсылка.ПолучитьОбъект();
			ОбщегоНазначенияДокументооборотКлиентСервер.ПрисвоитьОтличающееся(ЕдиницаОбъект.Код, КодВМакете);
			ОбщегоНазначенияДокументооборотКлиентСервер.ПрисвоитьОтличающееся(
				ЕдиницаОбъект.Наименование, НаименованиеКраткоеВМакете);
			ОбщегоНазначенияДокументооборотКлиентСервер.ПрисвоитьОтличающееся(
				ЕдиницаОбъект.НаименованиеПолное, НаименованиеПолноеВМакете);
			
			Если ЕдиницаОбъект.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ЕдиницаОбъект);
			КонецЕсли;
		КонецЦикла;
		
		Выборка.Сбросить();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Значение из макета. Учитывается только первая строка (есть единицы с несколькими названиями и обозначениями).
// 
// Параметры:
//  Макет - ТабличныйДокумент -
//  НомерСтроки - Число - Номер строки макета, счет от 1
//  НомерКолонки - Число - Номер колонки макета, счет от 1
// 
// Возвращаемое значение:
//  Строка - Значение в макете
Функция ЗначениеВМакете(Макет, НомерСтроки, НомерКолонки)
	
	Возврат СтрПолучитьСтроку(Макет.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки).Текст, 1);
	
КонецФункции

#КонецОбласти

#КонецЕсли
