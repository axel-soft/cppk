
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("Автообновление", 600, Ложь); // раз в 10 минут
КонецПроцедуры

&НаКлиенте
Процедура Автообновление()
	
	ОбновитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФайлы(ТекУзелКОД, ТаблЗнач)
	
	ЭтотУзел = Справочники.УзлыКОД.ЭтотУзел;
	
	ВидТранспорта = Перечисления.ВидыТранспортаКОД.ОбщийКаталог;
	ОбщийКаталог = "";
	
	Запись = РегистрыСведений.НастройкиТранспортаКОД.СоздатьМенеджерЗаписи();
	Запись.Узел = ТекУзелКОД;
	Запись.Прочитать();
	
	Если Запись.Выбран() Тогда
		ВидТранспорта = Запись.ВидТранспорта;
		Настройки = Запись.Настройки.Получить();
		Если ТипЗнч(Настройки) = Тип("Структура") Тогда
			Настройки.Свойство("ОбщийКаталог", ОбщийКаталог);
		КонецЕсли;
	КонецЕсли;
	
	РазмерФайлов = 0;
	КоличествоФайлов = 0;
	
	РазмерФайловПриемка = 0;
	РазмерФайловОтправка = 0;
	
	Если ЗначениеЗаполнено(ОбщийКаталог) Тогда
		
		Каталог = Новый Файл(ОбщийКаталог);
		Если Каталог.Существует() Тогда
	
			// от другого узла к нашему  - на приемку
			МаскаФайлов = СтрШаблон("%1to%2at*.json",
				ТекУзелКОД.Код,
				ЭтотУзел.Код);
			МассивФайлов = НайтиФайлы(ОбщийКаталог, МаскаФайлов, Ложь);
			Если МассивФайлов.Количество() = 0 Тогда
				ФайлыИКаталоги = НайтиФайлы(ОбщийКаталог, "*.*", Ложь);
				Для Каждого ФайлИлиКаталог Из ФайлыИКаталоги Цикл
					Если ФайлИлиКаталог.ЭтоКаталог()
						И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ФайлИлиКаталог.Имя) Тогда
						МассивФайловКаталога = НайтиФайлы(ФайлИлиКаталог.ПолноеИмя, МаскаФайлов, Ложь);
						ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивФайлов, МассивФайловКаталога);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			КоличествоФайлов = МассивФайлов.Количество();
			
			Для Каждого Файл Из МассивФайлов Цикл
				
				Попытка
					ФлРазмер = Файл.Размер();
					РазмерФайлов = РазмерФайлов + ФлРазмер;
					РазмерФайловПриемка = РазмерФайловПриемка + ФлРазмер;
				Исключение	 // файл могли уже переместить
				КонецПопытки;
				
			КонецЦикла;	
			
			
			// от нашего узла к другому - отправка
			МаскаФайлов = СтрШаблон("%1to%2at*.json",
				ЭтотУзел.Код,
				ТекУзелКОД.Код);
			МассивФайлов = НайтиФайлы(ОбщийКаталог, МаскаФайлов, Ложь);
			Если МассивФайлов.Количество() = 0 Тогда
				ФайлыИКаталоги = НайтиФайлы(ОбщийКаталог, "*.*", Ложь);
				Для Каждого ФайлИлиКаталог Из ФайлыИКаталоги Цикл
					Если ФайлИлиКаталог.ЭтоКаталог()
						И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ФайлИлиКаталог.Имя) Тогда
						МассивФайловКаталога = НайтиФайлы(ФайлИлиКаталог.ПолноеИмя, МаскаФайлов, Ложь);
						ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивФайлов, МассивФайловКаталога);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			КоличествоФайлов = КоличествоФайлов + МассивФайлов.Количество();
			
			Для Каждого Файл Из МассивФайлов Цикл
				
				Попытка
					ФлРазмер = Файл.Размер();
					РазмерФайлов = РазмерФайлов + ФлРазмер;
					РазмерФайловОтправка = РазмерФайловОтправка + ФлРазмер;
				Исключение	 // файл могли уже переместить
				КонецПопытки;
				
			КонецЦикла;	
			
		КонецЕсли;
		
	КонецЕсли;	
	
	НовСтр = ТаблЗнач.Добавить();
	НовСтр.Размер = РазмерФайлов;
	
	НовСтр.РазмерСтрока = ПолучитьРазмерСтрокой(РазмерФайлов);
	НовСтр.Количество = КоличествоФайлов;
	
	НовСтр.РазмерОтправка = РазмерФайловОтправка;
	НовСтр.РазмерСтрокаОтправка = ПолучитьРазмерСтрокой(РазмерФайловОтправка);
	НовСтр.РазмерПриемка = РазмерФайловПриемка;
	НовСтр.РазмерСтрокаПриемка = ПолучитьРазмерСтрокой(РазмерФайловПриемка);
	
	НовСтр.Узел = ТекУзелКОД;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРазмерСтрокой(Размер)
	
	Если Размер = 0 Тогда
		Возврат "";
	КонецЕсли;	
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1 Мб'"),
		Формат(Окр(Размер / 1024 / 1024, 1, 1), "ЧГ=0"));
	
КонецФункции

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере()
	
	ЭтотУзел = Справочники.УзлыКОД.ЭтотУзел;
	
	ТаблЗнач = РеквизитФормыВЗначение("ТаблицаФайлы");
	ТаблЗнач.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УзлыКОД.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.УзлыКОД КАК УзлыКОД
		|ГДЕ
		|	УзлыКОД.ПометкаУдаления = ЛОЖЬ
		|	И УзлыКОД.НеОтправлятьДанные = ЛОЖЬ
		|	И УзлыКОД.НеПолучатьДанные = ЛОЖЬ
		|	И УзлыКОД.Ссылка <> &ТекСсылка";
	
	Запрос.УстановитьПараметр("ТекСсылка", ЭтотУзел);
	
	МассивУзловКОД = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Для Каждого УзелПлана Из МассивУзловКОД Цикл
		ЗаполнитьФайлы(УзелПлана, ТаблЗнач);
	КонецЦикла;	
	
	РазмерФайлов = 0;
	ИтогКоличество = 0;
	Для Каждого Стр Из ТаблЗнач Цикл
		
		РазмерФайлов = РазмерФайлов + Стр.Размер;
		ИтогКоличество = ИтогКоличество + Стр.Количество;
		
	КонецЦикла;	
	ИтогРазмер = ПолучитьРазмерСтрокой(РазмерФайлов);
	
	ТаблЗнач.Сортировать("Узел");
	ЗначениеВРеквизитФормы(ТаблЗнач, "ТаблицаФайлы");
	
	ДатаОбновления = ТекущаяДатаСеанса();
	
	ПолученоБайт = РегистрыСведений.ИсторияКОД.РазмерСообщенийЗаСегодня(Перечисления.НаправленияПотоковКОД.Получение);
	ОтправленоБайт = РегистрыСведений.ИсторияКОД.РазмерСообщенийЗаСегодня(Перечисления.НаправленияПотоковКОД.Отправка);
	ИнфоРазмерЗаДень = СтрШаблон(НСтр("ru = 'Сегодня получено %1, отправлено %2.'"),
		РаботаСоСтроками.ПолучитьРазмерСтрокой(ПолученоБайт),
		РаботаСоСтроками.ПолучитьРазмерСтрокой(ОтправленоБайт));
	
КонецПроцедуры

