
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтотУзел = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.УзлыКОД.ЭтотУзел");
	
	ЗаданияОбменаВключены = КОДСервер.РегламентныеЗаданияОбменаИспользуются();
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ЭтотУзел", ЭтотУзел, Истина);
	ИнтервалЗамеров = 2 * 60;
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "УниверсальнаяДатаНачалаЗамеровВМиллисекундах", 
		ТекущаяУниверсальнаяДатаВМиллисекундах() - ИнтервалЗамеров * 1000, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "СекундСНачалаЗамеров", 
		ИнтервалЗамеров, Истина);
	
	ОбновитьДекорациюОбменВыполняется();
	
	Если КОДСервер.ЭтоПодчиненныйУзел() Тогда
		Элементы.СписокКонтекстноеМенюФайлыВКаталогеОбменаПоУзлам.Видимость = Ложь;
		Элементы.СписокКонтекстноеМенюТрафикПоУзлам.Видимость = Ложь;
	КонецЕсли;
	
	РежимВосстановления = Константы.РежимВосстановленияСообщениямиКОД.Получить();
	Если РежимВосстановления = Перечисления.РежимыВосстановленияСообщениямиКОД.РанееСформированными Тогда
		Элементы.ГруппаРежимВосстановления.Видимость = Истина;
		Элементы.ДекорацияРежимВосстановления.Заголовок =
			НСтр("ru = 'Этот узел находится в режиме восстановления ранее сформированными сообщениями.'");
	ИначеЕсли РежимВосстановления = Перечисления.РежимыВосстановленияСообщениямиКОД.Восстановительными Тогда
		Элементы.ГруппаРежимВосстановления.Видимость = Истина;
		Элементы.ДекорацияРежимВосстановления.Заголовок =
			НСтр("ru = 'Этот узел находится в режиме восстановления восстановительными сообщениями от других узлов.'");
	Иначе
		Элементы.ГруппаРежимВосстановления.Видимость = Ложь;
		Элементы.ДекорацияРежимВосстановления.Заголовок = "";
	КонецЕсли;
	
	Элементы.ФормаОтправитьДанныеПринудительно.Видимость = Пользователи.ЭтоПолноправныйПользователь(); 
	
	УстановитьУсловноеОформление();
	
	ОбновитьОписаниеСхемыДанных();
	ОбновитьТрафикСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.Список.ТекущаяСтрока = ЭтотУзел;
	УстановитьЗаголовокКомандыВключенияОтключенияРегламентныхЗаданий();
	ПодключитьОбработчикОжидания("Автообновление", 60);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КОД_ИзмененаСхемаДанных" Тогда
		ОбновитьОписаниеСхемыДанных();
	ИначеЕсли ИмяСобытия = "КОД_ИзменениеСтатусаОстановлен" Тогда
		Элементы.Список.Обновить();
		ОбновитьСвойстваЭлементовФормы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИнформацияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения();
	СтатистикаТипов.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Статистика зарегистрированных данных по типам'"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ДатаПоследнейОтправки
		Или Поле = Элементы.ДатаПоследнегоПолучения Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Элементы.Список.ТекущиеДанные.ЕстьОшибкиПолучения = Истина Тогда
			ПараметрыФормы = Новый Структура("Узел, Направление",
				Элементы.Список.ТекущиеДанные.Ссылка,
				ПредопределенноеЗначение("Перечисление.НаправленияПотоковКОД.Получение"));
			ОткрытьФорму("РегистрСведений.ТекущиеОшибкиКОД.ФормаСписка",
				ПараметрыФормы,
				ЭтотОбъект,
				Элементы.Список.ТекущиеДанные.Ссылка);
		ИначеЕсли Элементы.Список.ТекущиеДанные.ЕстьОшибкиОтправки = Истина Тогда
			ПараметрыФормы = Новый Структура("Направление",
				ПредопределенноеЗначение("Перечисление.НаправленияПотоковКОД.Отправка"));
			ОткрытьФорму("РегистрСведений.ТекущиеОшибкиКОД.ФормаСписка",
				ПараметрыФормы,
				ЭтотОбъект,
				Элементы.Список.ТекущиеДанные.Ссылка);
		ИначеЕсли Поле = Элементы.ДатаПоследнегоПолучения Тогда
			ПараметрыФормы = Новый Структура("Узел",
				Элементы.Список.ТекущиеДанные.Ссылка);
			ОткрытьФорму("РегистрСведений.ИсторияКОД.ФормаСписка",
				ПараметрыФормы,
				ЭтотОбъект,
				Элементы.Список.ТекущиеДанные.Ссылка);
		Иначе
			ПараметрыФормы = Новый Структура;
			ОткрытьФорму("РегистрСведений.ИсторияКОД.ФормаСписка",
				ПараметрыФормы,
				ЭтотОбъект,
				Элементы.Список.ТекущиеДанные.Ссылка);
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущийУзел = Элементы.Список.ТекущиеДанные.Ссылка;
	
	ОбновитьСвойстваЭлементовФормы();
	
	ПодключитьОбработчикОжидания("ОбновитьМиникарточкуПриАктивизацииСтроки", 0.5, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВключитьОтключитьРегламентныеЗаданияОбмена(Команда)
	
	ЗаданияОбменаВключены = УстановитьИспользованиеРегламентныхЗаданий();
	
	Если ЗаданияОбменаВключены Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Регламентные задания обмена включены.'"));
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Регламентные задания обмена отключены.'"));
	КонецЕсли;
	
	УстановитьЗаголовокКомандыВключенияОтключенияРегламентныхЗаданий()
	
КонецПроцедуры

&НаКлиенте
Процедура ВсяИстория(Команда)
	
	ОткрытьФорму("РегистрСведений.ИсторияКОД.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьДанныеПринудительно(Команда)
	ОткрытьФорму("Обработка.ПринудительнаяОтправкаДанныхКОД.Форма");
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкиИзФайла(Команда)
	
	ПередВыборомФайлаНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлНастроекУзла(Команда)
	
	Если Не ЗначениеЗаполнено(ТекущийУзел) Тогда
		Возврат;
	КонецЕсли;

	Если ДоступнаНастройкаПериферийногоУзла(ТекущийУзел) Тогда	
		КОДКлиент.СоздатьФайлНастроекУзла(ЭтотОбъект, ТекущийУзел);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсе(Команда)
	
	ОбновитьДополнительныеСведения();
	Автообновление();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыВКаталогеОбмена(Команда)
	
	Если Не ЗначениеЗаполнено(ТекущийУзел) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("ТекущийУзел", ТекущийУзел);
	ОткрытьФорму("Справочник.УзлыКОД.Форма.ФайлыВКаталогеОбмена", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыВКаталогеОбменаПоУзлам(Команда)
	
	ОткрытьФорму("Справочник.УзлыКОД.Форма.ФайлыВКаталогеОбменаПоУзлам");
	
КонецПроцедуры

&НаКлиенте
Процедура ТрафикПоУзлам(Команда)
	
	ОткрытьФорму("Справочник.УзлыКОД.Форма.ТрафикПоУзлам");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ДатаПоследнейОтправки");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ЕстьОшибкиОтправки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ОшибочныеДанные);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ДатаПоследнегоПолучения");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ЕстьОшибкиПолучения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ОшибочныеДанные);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("СкоростьОтправки");
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("СкоростьПолучения");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ЭтотУзел");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ЧДЦ=0; ЧГ=3,0");
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("Наименование");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ЭтотУзел");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, , Истина));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("Наименование");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, , , , , Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура Автообновление()
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Список, "ДатаНачалаЗамеров", ОбщегоНазначенияКлиент.ДатаСеанса() - 20 * 60, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Список, "СекундСНачалаЗамеров", 20 * 60, Истина);
	
	ОповеститьОбИзменении(Тип("СправочникСсылка.УзлыКОД"));
	ОбновитьТрафик();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоступнаНастройкаПериферийногоУзла(Узел)
	
	Возврат КОДСервер.ЭтоЦентральныйУзел() И Узел <> КОДСервер.ЦентральныйУзел();
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДополнительныеСведения() Экспорт
	
	ОповеститьОбИзменении(Тип("СправочникСсылка.УзлыКОД"));
	ОбновитьДекорациюОбменВыполняется();
	ОбновитьМиникарточку(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокКомандыВключенияОтключенияРегламентныхЗаданий()
	
	Если ЗаданияОбменаВключены Тогда
		Элементы.ВключитьОтключитьРегламентныеЗаданияОбмена.Заголовок =
			НСтр("ru = 'Отключить регламентные задания обмена'");
	Иначе
		Элементы.ВключитьОтключитьРегламентныеЗаданияОбмена.Заголовок =
			НСтр("ru = 'Включить регламентные задания обмена'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДекорациюОбменВыполняется()
	
	ПолученоБайт = РегистрыСведений.ИсторияКОД.РазмерСообщенийЗаСегодня(Перечисления.НаправленияПотоковКОД.Получение);
	ОтправленоБайт = РегистрыСведений.ИсторияКОД.РазмерСообщенийЗаСегодня(Перечисления.НаправленияПотоковКОД.Отправка);
	ИнфоРазмерЗаДень = СтрШаблон(НСтр("ru = 'Сегодня получено %1, отправлено %2.'"),
		РаботаСоСтроками.ПолучитьРазмерСтрокой(ПолученоБайт),
		РаботаСоСтроками.ПолучитьРазмерСтрокой(ОтправленоБайт));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМиникарточкуПриАктивизацииСтроки()
	ОбновитьМиникарточку(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМиникарточку(Безусловно)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
		Элементы.Информация.Заголовок = "";
		Возврат;
	КонецЕсли;
	
	Если Элементы.Список.ТекущиеДанные.Ссылка = ТекущийУзел И Не Безусловно Тогда
		Возврат;
	КонецЕсли;
	
	СтатистикаТипов.Очистить();
	
	Элементы.Информация.Заголовок = Новый ФорматированнаяСтрока(
		СтрШаблон(НСтр("ru = 'Получение информации об узле %1...'"), ТекущийУзел));
		
	Задание = НовоеФоновоеЗаданиеСведенияДляМиникарточкиУзла(ТекущийУзел, УникальныйИдентификатор);
	
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
	
	Обработчик = Новый ОписаниеОповещения("ПослеЗавершенияФоновогоЗадания", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Задание, Обработчик, НастройкиОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НовоеФоновоеЗаданиеСведенияДляМиникарточкиУзла(ТекущийУзел, УникальныйИдентификатор)
	
	// Определение параметров запуска.
	ИмяМетода = "КОДСлужебный.СведенияДляМиникарточкиУзла";
	
	УзелАргумент = ТекущийУзел;
	
	Если КОДСервер.ЭтоПодчиненныйУзел() Тогда
		РодительУзла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелАргумент, "Родитель");
		Если ЗначениеЗаполнено(РодительУзла) Тогда
			УзелАргумент = РодительУзла; // тут узел-корень ставим
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("Узел", УзелАргумент);
	
	НаименованиеМетода = "СведенияДляМиникарточкиУзла";
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НаименованиеМетода;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыМетода, НастройкиЗапуска);
	
КонецФункции

&НаКлиенте
Процедура ПослеЗавершенияФоновогоЗадания(Задание, ДополнительныеПараметры) Экспорт
	
	Если Задание = Неопределено Тогда
		Возврат; // Отменено.
	КонецЕсли;
	
	Если Задание.Статус = "Выполнено" Тогда
		Элементы.Информация.Заголовок = ИнформацияМиникарточки(Задание.АдресРезультата, ТекущийУзел, СтатистикаТипов);
	Иначе // ошибка
		Кратко = НСтр("ru = 'Возникла ошибка:'");
		ТекстОшибки = Кратко + Символы.ПС + Задание.КраткоеПредставлениеОшибки;
		Элементы.Информация.Заголовок = Новый ФорматированнаяСтрока(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнформацияМиникарточки(АдресРезультата, ТекущийУзел, СтатистикаТипов)
	
	Данные = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если Данные = Неопределено Тогда
		Возврат Новый ФорматированнаяСтрока("");
	КонецЕсли;
	
	УзелАргумент = ТекущийУзел;
	
	Если КОДСервер.ЭтоПодчиненныйУзел() Тогда
		РодительУзла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелАргумент, "Родитель");
		Если ЗначениеЗаполнено(РодительУзла) Тогда
			УзелАргумент = РодительУзла; // тут узел-корень ставим
		КонецЕсли;
	КонецЕсли;
	
	Если УзелАргумент = Данные.Узел Тогда
		Если Данные.Свойство("СтатистикаТипов") Тогда
			Для Каждого ЭлементСписка Из Данные.СтатистикаТипов Цикл
				Если ЭлементСписка.Значение <> 0 Тогда
					СтатистикаТипов.Добавить(ЭлементСписка.Ключ, 
						СтрШаблон("%1 %2", ЭлементСписка.Значение, ЭлементСписка.Ключ));
				КонецЕсли;
			КонецЦикла;
			СтатистикаТипов.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(Данные.Описание);
			Если СтатистикаТипов.Количество() <> 0 Тогда
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = ' Подробнее'"),,,, "Подробнее"));
			КонецЕсли;
			Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
		Иначе
			Заголовок = Новый ФорматированнаяСтрока(Данные.Описание);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции

&НаСервереБезКонтекста
Функция УстановитьИспользованиеРегламентныхЗаданий()
	
	Использование = Неопределено;
	КОДСервер.УстановитьИспользованиеРегламентныхЗаданийОбмена(Использование, Истина);
	
	Возврат Использование;
	
КонецФункции

&НаСервере
Процедура ОбновитьОписаниеСхемыДанных()
	
	Дата = Константы.ДатаЗагрузкиСхемыДанныхКОД.Получить();
	Схема = Константы.ХранилищеСхемыДанныхКОД.Получить().Получить();
	Если Схема = Неопределено Тогда
		ОписаниеСхемыДанных = НСтр("ru = 'Из конфигурации'");
	ИначеЕсли ЗначениеЗаполнено(Дата) Тогда
		ОписаниеСхемыДанных = СтрШаблон(НСтр("ru = 'Загружена из файла %1'"),
			Формат(Дата, "ДЛФ=DT"));
	Иначе
		ОписаниеСхемыДанных = НСтр("ru = 'Загружена из файла %1'");
	КонецЕсли;
	
	Элементы.ОчиститьСхемуДанныхКОД.Доступность =
		Не Схема = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТрафик()
	
	Для Каждого Точка Из Трафик.Точки Цикл
		Если Точка.Значение >= НачалоМинуты(ОбщегоНазначенияКлиент.ДатаСеанса()) Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьТрафикСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТрафикСервер()
	
	Интервал = 60;
	Точек = 20;
	ЗначениеПоследнейТочки = НачалоМинуты(ТекущаяДатаСеанса());
	ЗначениеПервойТочки = ЗначениеПоследнейТочки - Интервал * Точек;
	ЗначениеМаксимальнойТочки = ЗначениеПервойТочки;
	
	Счетчик = 0;
	Пока Счетчик <= Трафик.Точки.Количество() - 1 Цикл
		Точка = Трафик.Точки[Счетчик];
		ЗначениеМаксимальнойТочки = Макс(Точка.Значение, ЗначениеМаксимальнойТочки);
		Если Точка.Значение < ЗначениеПервойТочки Тогда
			Трафик.Точки.Удалить(Счетчик);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеМаксимальнойТочки = ЗначениеПоследнейТочки Тогда
		Возврат;
	КонецЕсли;
	
	ИнтервалыТочек = Новый ТаблицаЗначений;
	ИнтервалыТочек.Колонки.Добавить("Значение", Новый ОписаниеТипов("Дата"));
	ИнтервалыТочек.Колонки.Добавить("Начало", Новый ОписаниеТипов("Число"));
	ИнтервалыТочек.Колонки.Добавить("Конец", Новый ОписаниеТипов("Число"));
	
	СмещениеЧасовогоПояса = ТекущаяДатаСеанса() - ТекущаяУниверсальнаяДата();
	
	ЗначениеТочки = ЗначениеМаксимальнойТочки + Интервал;
	Пока ЗначениеТочки <= ЗначениеПоследнейТочки Цикл
		ИнтервалТочки = ИнтервалыТочек.Добавить();
		ИнтервалТочки.Значение = ЗначениеТочки;
		ИнтервалТочки.Начало = (ЗначениеТочки - СмещениеЧасовогоПояса - Интервал - Дата(1, 1, 1)) * 1000;
		ИнтервалТочки.Конец = (ЗначениеТочки - СмещениеЧасовогоПояса - Дата(1, 1, 1)) * 1000;
		ЗначениеТочки = ЗначениеТочки + Интервал;
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ИнтервалыТочек.Значение КАК Значение,
		|	ИнтервалыТочек.Начало КАК Начало,
		|	ИнтервалыТочек.Конец КАК Конец
		|ПОМЕСТИТЬ ИнтервалыТочек
		|ИЗ
		|	&ИнтервалыТочек КАК ИнтервалыТочек
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИнтервалыТочек.Значение КАК Значение,
		|	СУММА(ЕСТЬNULL(ВЫБОР
		|				КОГДА ИсторияКОД.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияПотоковКОД.Отправка)
		|					ТОГДА ИсторияКОД.Размер
		|				ИНАЧЕ 0
		|			КОНЕЦ, 0)) КАК Отправка,
		|	СУММА(ЕСТЬNULL(ВЫБОР
		|				КОГДА ИсторияКОД.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияПотоковКОД.Получение)
		|					ТОГДА ИсторияКОД.Размер
		|				ИНАЧЕ 0
		|			КОНЕЦ, 0)) КАК Получение
		|ИЗ
		|	ИнтервалыТочек КАК ИнтервалыТочек
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияКОД КАК ИсторияКОД
		|		ПО (ИсторияКОД.УниверсальнаяДатаВМиллисекундах > ИнтервалыТочек.Начало)
		|			И (ИсторияКОД.УниверсальнаяДатаВМиллисекундах <= ИнтервалыТочек.Конец)
		|			И (НЕ ИсторияКОД.ЕстьОшибки)
		|
		|СГРУППИРОВАТЬ ПО
		|	ИнтервалыТочек.Значение
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИнтервалыТочек.Значение");
	Запрос.УстановитьПараметр("ИнтервалыТочек", ИнтервалыТочек);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СерияОтправка = Трафик.Серии[0];
	СерияПолучение = Трафик.Серии[1];
	Пока Выборка.Следующий() Цикл
		Точка = Трафик.УстановитьТочку(Выборка.Значение);
		Точка.Текст = Формат(Выборка.Значение, "ДФ=HH:mm");
		Трафик.УстановитьЗначение(Точка, СерияОтправка, Выборка.Отправка);
		Трафик.УстановитьЗначение(Точка, СерияПолучение, Выборка.Получение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСвойстваЭлементовФормы()
	
	ТекущаяСтрока = Элементы.Список.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДоступнаНастройкаПериферийногоУзла = ДоступнаНастройкаПериферийногоУзла(ТекущийУзел);
	
	Элементы.СоздатьФайлНастроекУзла.Доступность = ДоступнаНастройкаПериферийногоУзла;
	Элементы.НачатьПереносИсторическихДанныхВУзелКОД.Доступность =
		ДоступнаНастройкаПериферийногоУзла И Не ТекущаяСтрока.МиграцияИсторическихДанныхВыполняется;
	Элементы.КомандаНачатьПереносИсторическихДанныхВУзелКОД.Доступность =
		ДоступнаНастройкаПериферийногоУзла И Не ТекущаяСтрока.МиграцияИсторическихДанныхВыполняется;
	
	ОбновитьСведенияОбОстановке();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСведенияОбОстановке()
	
	ТекущаяСтрока = Элементы.Список.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НеОтправлятьДанные =
		ТекущаяСтрока.СостояниеОтправка = 3 Или ТекущаяСтрока.СостояниеОтправка = 2;
	НеПолучатьДанные = ТекущаяСтрока.СостояниеПолучение = 3;
	
	Если НеОтправлятьДанные Тогда
		Элементы.КомандаОстановитьОперативнуюОтправку.Заголовок =
			Нстр("ru = 'Возобновить отправку оперативных данных'");
		Элементы.КомандаОстановитьОперативнуюОтправку.Картинка = БиблиотекаКартинок.ЗнакВыполнить;
	Иначе
		Элементы.КомандаОстановитьОперативнуюОтправку.Заголовок =
			Нстр("ru = 'Остановить отправку оперативных данных'");
		Элементы.КомандаОстановитьОперативнуюОтправку.Картинка = БиблиотекаКартинок.ЗнакПауза;
	КонецЕсли;
	
	Если НеПолучатьДанные Тогда
		Элементы.КомандаОстановитьОперативнуюПриемку.Заголовок =
			Нстр("ru = 'Возобновить получение оперативных данных'");
		Элементы.КомандаОстановитьОперативнуюПриемку.Картинка = БиблиотекаКартинок.ЗнакВыполнить;
	Иначе
		Элементы.КомандаОстановитьОперативнуюПриемку.Заголовок =
			Нстр("ru = 'Остановить получение оперативных данных'");
		Элементы.КомандаОстановитьОперативнуюПриемку.Картинка = БиблиотекаКартинок.ЗнакПауза;
	КонецЕсли;
	
	Элементы.КомандаОстановитьОперативнуюОтправку.Доступность = ТекущийУзел <> ЭтотУзел;
	Элементы.КомандаОстановитьОперативнуюПриемку.Доступность = ТекущийУзел <> ЭтотУзел;
	
КонецПроцедуры

#Область ИнициализацияУзлаОбменаДанными

&НаКлиенте
Асинх Процедура ПередВыборомФайлаНастроек() Экспорт
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(
		КодВозвратаДиалога.Да, Нстр("ru = 'Загрузить настройки'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()));
	Кнопки.Добавить(
		КодВозвратаДиалога.Отмена, Нстр("ru = 'Отмена'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()));
		
	Ответ = Ждать ВопросАсинх(
		Нстр("ru = 'При загрузке настроек текущая конфигурация узлов обмена данными будет удалена.
					|Удалить текущую конфигурацию узлов обмена данными и загрузить настройки из файла?'",
			ОбщегоНазначенияКлиент.КодОсновногоЯзыка()),
		Кнопки,,
		КодВозвратаДиалога.Отмена,
		Нстр("ru = 'Внимание'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()));
		
	Если Ответ = КодВозвратаДиалога.Да Тогда
		КОДКлиент.ВыбратьФайлНастроек(
			Новый ОписаниеОповещения("ПослеВыбораФайлаНастроек", ЭтотОбъект));	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайлаНастроек(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗагрузки = КОДКлиент.ПараметрыЗагрузкиФайлаНастроекУзла();
	ПараметрыЗагрузки.ИмяФайла = Результат;
	ПараметрыЗагрузки.Форма = ЭтотОбъект;
	ПараметрыЗагрузки.ВключитьРегламентныеЗаданияОбмена = Ложь;
	ПараметрыЗагрузки.ОбработчикЗавершения =
		Новый ОписаниеОповещения("ОтметитьОкончаниеНастройкиУзла", ЭтотОбъект);
	
	КОДКлиент.ЗагрузитьНастройкиУзлаИзФайла(ПараметрыЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьОкончаниеНастройкиУзла(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		ТекстОшибки =
			Нстр("ru = 'Во время применения настроек произошла ошибка:
						|Неизвестная ошибка.'",
				ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
		
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ОбновитьОкружение();
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ЭтотУзел", ЭтотУзел, Истина);
		ОповеститьОбИзменении(Тип("СправочникСсылка.УзлыКОД"));
	Иначе
		ТекстОшибки = СтрШаблон(
			Нстр("ru = 'Во время применения настроек произошла ошибка:
						|%1'", ОбщегоНазначенияКлиент.КодОсновногоЯзыка()),
			Результат.ПодробноеПредставлениеОшибки);
		
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьОкружение()
	
	КОДСобытия.УстановкаПараметровСеанса();
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
