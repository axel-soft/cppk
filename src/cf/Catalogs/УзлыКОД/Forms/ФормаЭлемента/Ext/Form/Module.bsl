
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ВидТранспорта = Перечисления.ВидыТранспортаКОД.ОбщийКаталог;
		Объект.Версия = КОДСервер.ТекущаяВерсияФормата();
		ИдентификаторСтрокой = Новый УникальныйИдентификатор();
	Иначе
		ПрочитатьНастройкиТранспорта();
	КонецЕсли;
	
	ЭтотУзел = ПредопределенноеЗначение("Справочник.УзлыКОД.ЭтотУзел");
	РодительЭтогоУзла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотУзел, "Родитель");
	
	Элементы.СтраницыВидовТранспорта.ТекущаяСтраница =
		?(ВидТранспорта = ПредопределенноеЗначение("Перечисление.ВидыТранспортаКОД.FTPСервер"),
			Элементы.СтраницаFTPСервер,
			Элементы.СтраницаОбщийКаталог);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ГраницаПереносаИсторическихДанныхКОД.Узел КАК Узел
		|ИЗ
		|	РегистрСведений.ГраницаПереносаИсторическихДанныхКОД КАК ГраницаПереносаИсторическихДанныхКОД
		|ГДЕ
		|	ГраницаПереносаИсторическихДанныхКОД.Узел = &Узел
		|	И ГраницаПереносаИсторическихДанныхКОД.Граница <> 0");
	Запрос.УстановитьПараметр("Узел", Объект.Ссылка);
	МиграцияИсторическихДанныхВыполняется = Не Запрос.Выполнить().Пустой();
	
	Если Объект.Ссылка = ЭтотУзел Тогда
		ПрефиксИБ = Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить();
		Если ЗначениеЗаполнено(ПрефиксИБ) И Объект.Код <> ПрефиксИБ Тогда
			Объект.Код = ПрефиксИБ;
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'В качестве кода узла установлен префикс информационной базы.'"));
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементовФормы(ЭтотОбъект);
	
	ОбновитьСведенияОбОстановке();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ИдентификаторСтрокой = Строка(Объект.Ссылка.УникальныйИдентификатор());
	Иначе
		Если ЗначениеЗаполнено(ЭтотУзел) Тогда
			Элементы.ИдентификаторСтрокой.ТолькоПросмотр = Ложь;
		Иначе
			ИдентификаторСтрокой = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПрочитатьНастройкиТранспорта();
	ПрочитатьНастройкиАвторизацииВСервисе(ТекущийОбъект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ВидТранспорта = ПредопределенноеЗначение("Перечисление.ВидыТранспортаКОД.FTPСервер") Тогда
		Если Не СтрНачинаетсяС(Ресурс, "ftp://") Тогда
			Отказ = Истина;
			ПоказатьПредупреждение(, НСтр("ru = 'FTP-ресурс должен начинаться с ftp://'"));
		ИначеЕсли СтрНайти(Ресурс, "/", НаправлениеПоиска.СНачала, 7) = 0 Тогда
			Отказ = Истина;
			ПоказатьПредупреждение(, НСтр("ru = 'FTP-ресурс должен содержать путь на сервере'"));
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Код) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указан код узла'"),
			Объект.Ссылка,
			,
			"Объект.Код",
			Отказ);
	КонецЕсли;
	
	Если Объект.Ссылка <> ЭтотУзел И Не ЗначениеЗаполнено(ОбщийКаталог) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указан путь к каталогу обмена'"),
			,
			"ОбщийКаталог",
			,
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ЭтоНовый() Тогда
		Если Не ЗначениеЗаполнено(ИдентификаторСтрокой) Тогда
			ВызватьИсключение НСтр("ru = 'Не указан идентификатор.'")
		КонецЕсли;
		
		Попытка
			НовыйУникальныйИдентификатор = Новый УникальныйИдентификатор(ИдентификаторСтрокой)
		Исключение
			ВызватьИсключение СтрШаблон(
				НСтр("ru = '%1 - не является уникальным идентификатором.'"),
				ИдентификаторСтрокой);
		КонецПопытки;
		
		ТекущийОбъект.УстановитьСсылкуНового(Справочники.УзлыКОД.ПолучитьСсылку(НовыйУникальныйИдентификатор));
		ПараметрыЗаписи.Вставить("ЭтоНовый", Истина);
	Иначе
		ПараметрыЗаписи.Вставить("ЭтоНовый", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьНастройкиТранспорта();
	ЗаписатьНастройкиАвторизацииВСервисе(ТекущийОбъект.Ссылка);
	
	Если Объект.Ссылка = ЭтотУзел Тогда
		КОДСлужебный.ПереименоватьПоставляемогоАдминистратора();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КОД_ИзменениеСтатусаОстановлен" И Параметр = Объект.Ссылка Тогда
		ОбновитьСведенияОбОстановке();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	
	УстановитьВидимостьДоступностьЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидТранспортаПриИзменении(Элемент)
	
	Элементы.СтраницыВидовТранспорта.ТекущаяСтраница =
		?(ВидТранспорта = ПредопределенноеЗначение("Перечисление.ВидыТранспортаКОД.FTPСервер"),
			Элементы.СтраницаFTPСервер,
			Элементы.СтраницаОбщийКаталог);
			
	Если ВидТранспорта = ПредопределенноеЗначение("Перечисление.ВидыТранспортаКОД.FTPСервер") И Порт = 0 Тогда
		Порт = 21;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщийКаталогОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложениеАсинх(ОбщийКаталог);
	
КонецПроцедуры

&НаКлиенте
Процедура КодПриИзменении(Элемент)
	
	Объект.ПрефиксШтрихкода = ОбщегоНазначенияДокументооборотКлиентСервер.СтрокаВЧисло(Объект.Код);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПрочитатьНастройкиТранспорта()
	
	НастройкиТранспортаУзла =
		РегистрыСведений.НастройкиТранспортаКОД.ПрочитатьНастройкиТранспортаУзла(Объект.Ссылка);
		
	ВидТранспорта =
		?(Не ЗначениеЗаполнено(НастройкиТранспортаУзла.ВидТранспорта),
			Перечисления.ВидыТранспортаКОД.ОбщийКаталог,
			НастройкиТранспортаУзла.ВидТранспорта);
	
	ЗаполнитьЗначенияСвойств(
		ЭтотОбъект,
		НастройкиТранспортаУзла.Настройки,
		"ОбщийКаталог, Ресурс, Порт, ПассивныйРежим, Пользователь, Пароль");
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиТранспорта()
	
	НастройкиТранспортаУзла =
		РегистрыСведений.НастройкиТранспортаКОД.ОписаниеСтруктурыНастроек();
		
	НастройкиТранспортаУзла.ВидТранспорта = ВидТранспорта;
	ЗаполнитьЗначенияСвойств(
		НастройкиТранспортаУзла.Настройки,
		ЭтотОбъект,
		"ОбщийКаталог, Ресурс, Порт, ПассивныйРежим, Пользователь, Пароль");
		
	РегистрыСведений.НастройкиТранспортаКОД.ЗаписатьНастройкиТранспортаУзла(
		Объект.Ссылка, НастройкиТранспортаУзла);

КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиАвторизацииВСервисе(Ссылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиАвторизации = Справочники.УзлыКОД.НастройкиАвторизацииВСервисе(Ссылка);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиАвторизации);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиАвторизацииВСервисе(Ссылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
		Ссылка, ИмяПользователяСервиса, "ИмяПользователяСервиса");
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
		Ссылка, ПарольПользователяСервиса, "ПарольПользователяСервиса");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДоступностьЭлементовФормы(Форма)
	
	Объект = Форма.Объект;
	ЭлементыФормы = Форма.Элементы;
	
	Если Объект.Родитель = Форма.ЭтотУзел Тогда
		ЭлементыФормы.НастройкиТранспорта.Видимость = Истина;
		ЭлементыФормы.НастройкиПодразделений.Видимость = Истина;
		ЭлементыФормы.ФормаПереносИсторическихДанных.Доступность =
			Не Форма.МиграцияИсторическихДанныхВыполняется;
		
		Форма.КлючСохраненияПоложенияОкна = "СоВсемиНастройками";
	ИначеЕсли Объект.Ссылка = Форма.РодительЭтогоУзла Тогда
		ЭлементыФормы.НастройкиТранспорта.Видимость = Истина;
		ЭлементыФормы.НастройкиПодразделений.Видимость = Ложь;
		ЭлементыФормы.ФормаПереносИсторическихДанных.Видимость = Ложь;
		ЭлементыФормы.ФормаНеОтправлятьНеПолучатьДанные.Видимость = Ложь;
		
		Форма.КлючСохраненияПоложенияОкна = "СНастройкамиТранспорта";
	ИначеЕсли Объект.Ссылка = Форма.ЭтотУзел Тогда
		ЭлементыФормы.НастройкиТранспорта.Видимость = Ложь;
		ЭлементыФормы.НастройкиПодразделений.Видимость =
			ЗначениеЗаполнено(Объект.Родитель);
		ЭлементыФормы.ФормаНеОтправлятьНеПолучатьДанные.Видимость =
			ЗначениеЗаполнено(Объект.Родитель);
		ЭлементыФормы.КомандаОстановитьОперативнуюОтправку.Доступность = Ложь;
		ЭлементыФормы.КомандаОстановитьОперативнуюПриемку.Доступность = Ложь;
		ЭлементыФормы.ФормаПереносИсторическихДанных.Видимость = Ложь;
		
		Форма.КлючСохраненияПоложенияОкна = "СНастройкамиПодразделений";
	Иначе
		ЭлементыФормы.НастройкиТранспорта.Видимость = Ложь;
		ЭлементыФормы.НастройкиПодразделений.Видимость = Ложь;
		ЭлементыФормы.ФормаНеОтправлятьНеПолучатьДанные.Видимость = Ложь;
		ЭлементыФормы.ФормаПереносИсторическихДанных.Видимость = Ложь;
		
		Форма.КлючСохраненияПоложенияОкна = "БезНастроек";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСведенияОбОстановке()
	
	НеОтправлятьДанные = РегистрыСведений.СостоянияУзловКОД.ОбменСУзломОстановлен(
		Объект.Ссылка, Перечисления.НаправленияПотоковКОД.Отправка);
	НеПолучатьДанные = РегистрыСведений.СостоянияУзловКОД.ОбменСУзломОстановлен(
		Объект.Ссылка, Перечисления.НаправленияПотоковКОД.Получение);
	
	Если НеОтправлятьДанные Тогда
		Элементы.КомандаОстановитьОперативнуюОтправку.Заголовок =
			Нстр("ru = 'Возобновить отправку оперативных данных'");
		Элементы.КомандаОстановитьОперативнуюОтправку.Картинка = БиблиотекаКартинок.ЗнакВыполнить;
	Иначе
		Элементы.КомандаОстановитьОперативнуюОтправку.Заголовок =
			Нстр("ru = 'Остановить отправку оперативных данных'");
		Элементы.КомандаОстановитьОперативнуюОтправку.Картинка = БиблиотекаКартинок.ЗнакПауза;
	КонецЕсли;
	
	Если НеПолучатьДанные Тогда
		Элементы.КомандаОстановитьОперативнуюПриемку.Заголовок =
			Нстр("ru = 'Возобновить получение оперативных данных'");
		Элементы.КомандаОстановитьОперативнуюПриемку.Картинка = БиблиотекаКартинок.ЗнакВыполнить;
	Иначе
		Элементы.КомандаОстановитьОперативнуюПриемку.Заголовок =
			Нстр("ru = 'Остановить получение оперативных данных'");
		Элементы.КомандаОстановитьОперативнуюПриемку.Картинка = БиблиотекаКартинок.ЗнакПауза;
	КонецЕсли;
	
	Если НеОтправлятьДанные И НеПолучатьДанные Тогда
		Элементы.ОтметкаОстановлен.Заголовок =
			Нстр("ru = 'Остановлена приемка и отправка оперативных данных'");
	ИначеЕсли НеОтправлятьДанные Тогда
		Элементы.ОтметкаОстановлен.Заголовок =
			Нстр("ru = 'Остановлена отправка оперативных данных'");
	ИначеЕсли НеПолучатьДанные Тогда
		Элементы.ОтметкаОстановлен.Заголовок =
			Нстр("ru = 'Остановлено получение оперативных данных'");
	КонецЕсли;
	
	Элементы.ГруппаОбменОстановлен.Видимость = НеОтправлятьДанные Или НеПолучатьДанные;
	
КонецПроцедуры

#КонецОбласти
