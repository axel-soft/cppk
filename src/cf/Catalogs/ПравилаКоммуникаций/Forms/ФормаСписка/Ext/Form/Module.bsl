
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьСписокПолейОтбора();
	ДеревоОтбораЗаполнить();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "ПометкаУдаления", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ПравилаКоммуникаций_Назначение" Тогда
		ДеревоОтбораПерезаполнить(Параметр);
		ДеревоОтбораОбновлено = Истина;
	ИначеЕсли ИмяСобытия = "Запись_ПравилаКоммуникаций" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленные(Команда)
	
	Элементы.СписокПоказыватьУдаленные.Пометка = Не Элементы.СписокПоказыватьУдаленные.Пометка;
	Если Элементы.СписокПоказыватьУдаленные.Пометка Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "ПометкаУдаления", Неопределено,,, Ложь);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "ПометкаУдаления", Ложь,,, Истина);
	КонецЕсли;
	
	ДеревоОтбораПерезаполнить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыДеревоОтбора

&НаКлиенте
Процедура ДеревоОтбораПриАктивизацииСтроки(Элемент)
	
	УстановитьОтбор = Ложь;
	
	Если Не ЗначениеЗаполнено(ДеревоОтбораТекущиеЗначения) Тогда
		УстановитьОтбор = Истина;
	Иначе
		ДеревоОтбораНовыеЗначения = ДеревоОтбораТекущиеЗначения();
		Для Каждого ИмяПоля Из ПоляОтбора Цикл
			ПредыдущееЗначение =
				ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДеревоОтбораТекущиеЗначения, ИмяПоля, Null);
			НовоеЗначение =
				ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДеревоОтбораНовыеЗначения, ИмяПоля, Null);
			
			Если ПредыдущееЗначение = НовоеЗначение Тогда
				Продолжить;
			КонецЕсли;
			
			УстановитьОтбор = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если УстановитьОтбор Тогда
		ПодключитьОбработчикОжидания("ДеревоОтбораПослеАктивизацииСтроки", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ДеревоОтбораТекущиеЗначения = Новый ФиксированнаяСтруктура(ДеревоОтбораТекущиеЗначения());
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не Копирование Тогда
		Отказ = Истина;
		
		Открытьформу(
			"Справочник.ПравилаКоммуникаций.ФормаОбъекта",
			Новый Структура("ЗначенияЗаполнения",
			ДеревоОтбораТекущиеЗначения()), ,
			Новый УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	Если Не ДеревоОтбораОбновлено Тогда
		ДеревоОтбораПерезаполнить();
	КонецЕсли;
	
	ДеревоОтбораОбновлено = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДеревоОтбораОбновить(Команда)
	
	ДеревоОтбораПерезаполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПравил(Команда)
	
	ОткрытьФорму("Справочник.ПравилаКоммуникаций.Форма.ПроверкаПравил");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСписокПолейОтбора()
	
	ПоляОтбора = Новый ФиксированныйМассив(СтрРазделить("Предмет,Вид,Позиция", ","));
	
	ПредставленияПолейОтбора = Новый Массив;
	Для Каждого ИмяПоля Из ПоляОтбора Цикл
		ПредставленияПолейОтбора.Добавить(СтрШаблон("ПРЕДСТАВЛЕНИЕССЫЛКИ(%1) КАК %1Представление", ИмяПоля));
	КонецЦикла;
	ПоляПредставления = Новый ФиксированныйМассив(ПредставленияПолейОтбора);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтбораПослеАктивизацииСтроки()
	
	ДеревоОтбораУстановитьОтбор(Элементы.ДеревоОтбора.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Функция ДеревоОтбораТекущиеЗначения()
	
	ТекущиеЗначения = Новый Структура("Предмет");
	
СтрокаДерева = Элементы.ДеревоОтбора.ТекущиеДанные;
	Пока СтрокаДерева <> Неопределено И СтрокаДерева.Поле <> "" Цикл
		ТекущиеЗначения.Вставить(СтрокаДерева.Поле, СтрокаДерева.Значение);
		СтрокаДерева = СтрокаДерева.ПолучитьРодителя();
	КонецЦикла;
	
	Возврат ТекущиеЗначения;
	
КонецФункции

&НаКлиенте
Процедура ДеревоОтбораПерезаполнить(ТекущееПравило = Неопределено)
	
	Путь = ДеревоОтбораЗаполнить(ТекущееПравило);
	
	Если Путь.Количество() = 1 Тогда
		Для Каждого СтрокаДерева Из ДеревоОтбора.ПолучитьЭлементы() Цикл
			Элементы.ДеревоОтбора.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
		КонецЦикла;
		
		Элементы.ДеревоОтбора.ТекущаяСтрока = Путь[0];
	Иначе
		Для Каждого ТекущаяТочка Из Путь Цикл
			Элементы.ДеревоОтбора.Развернуть(ТекущаяТочка);
		КонецЦикла;
		Элементы.ДеревоОтбора.ТекущаяСтрока = ТекущаяТочка;
	КонецЕсли;
	
	ТекущийЭлемент = Элементы.Список;
	
КонецПроцедуры

&НаСервере
Функция ДеревоОтбораЗаполнить(ТекущееПравило = Неопределено)
	
	ПоляПредставленияВсе = Новый Соответствие;
	ПоляПредставленияВсе.Вставить("Позиция", НСтр("ru = 'Все позиции'"));
	ПоляПредставленияВсе.Вставить("Предмет", НСтр("ru = 'Все предметы'"));
	ПоляПредставленияВсе.Вставить("Вид", НСтр("ru = 'Все виды'"));
	ПоляПредставленияВсе.Вставить("Этап", НСтр("ru = 'Все этапы'"));
	
	Запрос = Новый Запрос(СтрШаблон(
		"ВЫБРАТЬ
		|	%1,
		|	%2
		|ИЗ
		|	Справочник.ПравилаКоммуникаций.Назначение КАК Т
		|ГДЕ
		|	&ПоказыватьУдаленные ИЛИ Ссылка.ПометкаУдаления = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	%1
		|
		|УПОРЯДОЧИТЬ ПО
		|	%1
		|
		|ИТОГИ ПО
		|	%1
		|;
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	%1
		|ИЗ
		|	Справочник.ПравилаКоммуникаций.Назначение КАК Т
		|ГДЕ
		|	Ссылка = &ТекущееПравило
		|
		|УПОРЯДОЧИТЬ ПО
		|	Релевантность УБЫВ",
		СтрСоединить(ПоляОтбора, ", "),
		СтрСоединить(ПоляПредставления, ", ")));
	Запрос.УстановитьПараметр("ПоказыватьУдаленные", Элементы.СписокПоказыватьУдаленные.Пометка);
	Запрос.УстановитьПараметр("ТекущееПравило", ТекущееПравило);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоОтбора");
	ДеревоЗначений.Строки.Очистить();
	
	Запись = ДеревоЗначений.Строки.Добавить();
	Запись.Значение = Справочники.ПравилаКоммуникаций.ПустаяСсылка();
	Запись.Представление = СтрШаблон("<%1>", НСтр("ru = 'Все правила'"));
	
	ДеревоОтбораЗаполнитьСтроки(
		РезультатЗапроса[0], ДеревоЗначений, 0, ПоляОтбора.Количество(), ПоляПредставленияВсе);
		
	ЗначениеВРеквизитФормы(ДеревоЗначений, "ДеревоОтбора");
	
	Путь = Новый Массив;
	Строки = ДеревоОтбора.ПолучитьЭлементы();
	
	СтруктураОтбора = Новый Структура("Предмет, Вид");
	Если ТипЗнч(ДеревоОтбораТекущиеЗначения) = Тип("Структура")
			Или ТипЗнч(ДеревоОтбораТекущиеЗначения) = Тип("ФиксированнаяСтруктура") Тогда
		
		Если ДеревоОтбораТекущиеЗначения.Количество() = 3 Тогда
			СтруктураОтбора.Вставить("Позиция");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, ДеревоОтбораТекущиеЗначения);
	КонецЕсли;
	
	ВыборкаНазначение = РезультатЗапроса[1].Выбрать();
	Если ВыборкаНазначение.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, ВыборкаНазначение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураОтбора) Тогда
		Для Каждого ИмяПоля Из ПоляОтбора Цикл
			Если Не СтруктураОтбора.Свойство(ИмяПоля) Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущаяСтрока = Неопределено;
			Для Каждого Строка Из Строки Цикл
				Если Строка.Значение = СтруктураОтбора[ИмяПоля] Тогда
					ТекущаяСтрока = Строка.ПолучитьИдентификатор();
					Строки = Строка.ПолучитьЭлементы();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ТекущаяСтрока = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			Путь.Добавить(ТекущаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	Если Не Путь.Количество() Тогда
		Путь.Добавить(Строки[0].ПолучитьИдентификатор()); //Все правила.
	КонецЕсли;

	Возврат Новый ФиксированныйМассив(Путь);
		
КонецФункции

&НаСервере
Процедура ДеревоОтбораЗаполнитьСтроки(Группировка, Родитель, Уровень, ВсегоПолей, ПоляПредставленияВсе)
	
	Если Уровень >= ВсегоПолей Тогда
		Возврат;
	КонецЕсли;
		
	Выборка = Группировка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		Запись = Родитель.Строки.Добавить();
		Запись.Значение = Выборка[Уровень];
		Запись.Поле = ПоляОтбора[Уровень];
		
		Если ЗначениеЗаполнено(Запись.Значение) Тогда
			Запись.Представление = Выборка[Уровень + ВсегоПолей];
		Иначе
			Запись.Представление = СтрШаблон("<%1>", ПоляПредставленияВсе.Получить(Запись.Поле));
			Если Запись.Представление = "<>" Тогда
				Запись.Представление = СтрШаблон("<%1>", НСтр("ru = 'Все'"));
			КонецЕсли;
		КонецЕсли;
		
		ДеревоОтбораЗаполнитьСтроки(Выборка, Запись, Уровень + 1, ВсегоПолей, ПоляПредставленияВсе);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоОтбораУстановитьОтбор(ТекущаяСтрока)
	
	ТекущиеЗначения = Новый Структура;
	ТекущиеДанные = ДеревоОтбора.НайтиПоИдентификатору(ТекущаяСтрока);
	Пока ТекущиеДанные <> Неопределено И ТекущиеДанные.Поле <> "" Цикл
		ТекущиеЗначения.Вставить(ТекущиеДанные.Поле, ТекущиеДанные.Значение);
		ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	КонецЦикла;
	
	Группа = Неопределено;
	Для Каждого Поле Из Список.Отбор.Элементы Цикл
		Если Поле.Представление = "ДеревоОтбора" Тогда
			Группа = Поле;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Группа = Неопределено И Не ЗначениеЗаполнено(ТекущиеЗначения) Тогда
		Возврат;
	ИначеЕсли Группа = Неопределено Тогда
		Группа = Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		Группа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		Группа.Представление = "ДеревоОтбора"
	Иначе
		Группа.Элементы.Очистить();
	КонецЕсли;
	
	Для Каждого ИмяПоля Из ПоляОтбора Цикл
		Если ТекущиеЗначения.Свойство(ИмяПоля) Тогда
			Поле = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Поле.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Назначение." + ИмяПоля);
			Поле.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			Поле.ПравоеЗначение = ТекущиеЗначения[ИмяПоля];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

