#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Проверяет переданные элементы на соответствие правилам по контексту.
//
// Параметры:
//	Элементы - СправочникСсылка, Массив Из СправочникСсылка- Проверяемые элементы.
//	Контекст - Структура - Критерии отбора подходящего правила.
//						   см. ПравилаКоммуникацийКлиентСервер.КонтекстВыбора и Справочники.ПравилаКоммуникаций.ДополнитьКонтекст.
//	ДополнятьРезультатНеподдерживаемыми - Булево - Определяет, следует ли включать в результат проверки элементы,
//												   типы которых не поддерживаются правилами коммуникаций (не могут
//												   быть проверены). Список поддерживаемых правилами коммуникаций
//												   типов см. в ОписаниеТиповПроверяемыхОбъектов().
// 
// Возвращаемое значение:
//	Массив Из СправочникСсылка - Массив элементов прошедших проверку (разрешенных).
//
Функция ПроверитьЭлементы(Элементы, Контекст, ДополнятьРезультатНеподдерживаемыми = Ложь) Экспорт
	
	Если Не Контекст.Свойство("Правило") И ЕстьПравила(Контекст) = Ложь Тогда
		Возврат Элементы;
	КонецЕсли;
	
	ТипыПроверяемыхОбъектов = ОписаниеТиповПроверяемыхОбъектов();
	
	ТекущиеДанные = Новый ТаблицаЗначений;
	ТекущиеДанные.Колонки.Добавить("Ссылка", ТипыПроверяемыхОбъектов);
	
	ЭлементыНеПоддерживаемыхТипов = Новый Массив;

	ЭлементыДляПроверки =
		?(ТипЗнч(Элементы) = Тип("Массив"), Элементы, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элементы));
				
	Для Каждого Элемент Из ЭлементыДляПроверки Цикл
		Если ЗначениеЗаполнено(Элемент) И ТипыПроверяемыхОбъектов.СодержитТип(ТипЗнч(Элемент)) Тогда
			Запись = ТекущиеДанные.Добавить();
			Запись.Ссылка = Элемент;
		Иначе
			ЭлементыНеПоддерживаемыхТипов.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Если ТекущиеДанные.Количество() = 0 Тогда
		Возврат ?(ДополнятьРезультатНеподдерживаемыми, ЭлементыНеПоддерживаемыхТипов, Новый Массив);
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТекущиеДанные.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТекущиеДанные
		|ИЗ
		|	&ТекущиеДанные КАК ТекущиеДанные
		|;
		|");
	Запрос.Текст = Запрос.Текст + ТекстЗапросаПроверки(Запрос, Контекст, Ложь);
	
	Запрос.УстановитьПараметр("ТекущиеДанные", ТекущиеДанные);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатПроверки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	Если ДополнятьРезультатНеподдерживаемыми Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РезультатПроверки, ЭлементыНеПоддерживаемыхТипов, Истина);
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Предоставляет текст запроса проверки элементов.
//
// Параметры:
//  Запрос - Запрос - Исходный запрос.
//  Контекст - Структура - Критерии отбора подходящего правила.
//		* см. ПравилаКоммуникацийКлиентСервер.КонтекстВыбора и Справочники.ПравилаКоммуникаций.ДополнитьКонтекст.
//  ВыводитьРезультатВКолонке - Булево - Если Истина - результат проверки добавляется в исходную таблицу в виде колонок
//										 ЗапретПоПравиламКоммуникаций (Булево) и ПравилоКоммуникаций (СправочникСсылка.ПравилаКоммуникаций);
//										 Если Ложь - результат содержит только доступные элементы (помещается в таблицу ПК_ДоступныеЭлементы).
//  ИмяТаблицыИсходныхДанных - Строка - Имя временной таблицы исходного запроса, содержащей проверяемые элементы.
//  ИмяПоляИсходногоОбъекта - Строка - Имя колонки исходной таблицы, содержащей ссылки на проверяемые элементы.
//  ИмяТаблицыРезультата - Строка - Имя временной таблицы для помещения результата.
// 
// Возвращаемое значение:
//	Строка - Текст запроса проверки.
//
Функция ТекстЗапросаПроверки(
			Запрос,
			Контекст,
			ВыводитьРезультатВКолонке = Истина,
			ИмяТаблицыИсходныхДанных = "ТекущиеДанные",
			ИмяПоляИсходногоОбъекта = "Ссылка",
			ИмяТаблицыРезультата = Неопределено) Экспорт
	
	Если Контекст.Свойство("Правило") Тогда
		Если ТипЗнч(Контекст.Правило) = Тип("СправочникСсылка.ПравилаКоммуникаций") Тогда
			Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ДанныеВыбора.Ссылка КАК Ссылка,
				|	ДанныеВыбора.Ссылка КАК СотрудникСсылка
				|ПОМЕСТИТЬ ТекущиеДанныеСотрудники
				|ИЗ
				|	ТекущиеДанные КАК ДанныеВыбора
				|ГДЕ
				|	ТИПЗНАЧЕНИЯ(ДанныеВыбора.Ссылка) = ТИП(Справочник.Сотрудники)
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ДанныеВыбора.Ссылка,
				|	ЕСТЬNULL(СотрудникиВКонтейнерах.Сотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
				|ИЗ
				|	ТекущиеДанные КАК ДанныеВыбора
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПолныеРоли КАК ПолныеРоли
				|		ПО ДанныеВыбора.Ссылка = ПолныеРоли.Владелец
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
				|		ПО (ПолныеРоли.Ссылка = СотрудникиВКонтейнерах.Контейнер)
				|ГДЕ
				|	ТИПЗНАЧЕНИЯ(ДанныеВыбора.Ссылка) = ТИП(Справочник.РолиИсполнителей)
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ДанныеВыбора.Ссылка,
				|	ЕСТЬNULL(СотрудникиВКонтейнерах.Сотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
				|ИЗ
				|	ТекущиеДанные КАК ДанныеВыбора
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
				|		ПО ДанныеВыбора.Ссылка = СотрудникиВКонтейнерах.Контейнер
				|ГДЕ
				|	ТИПЗНАЧЕНИЯ(ДанныеВыбора.Ссылка) = ТИП(Справочник.РабочиеГруппы)
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ДанныеВыбора.Ссылка,
				|	ЕСТЬNULL(СведенияОСотрудниках.Ссылка, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
				|ИЗ
				|	ТекущиеДанные КАК ДанныеВыбора
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК СведенияОСотрудниках
				|		ПО ДанныеВыбора.Ссылка = СведенияОСотрудниках.Подразделение
				|ГДЕ
				|	ТИПЗНАЧЕНИЯ(ДанныеВыбора.Ссылка) = ТИП(Справочник.СтруктураПредприятия)
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	СотрудникСсылка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ТИПЗНАЧЕНИЯ(ДанныеВыбора.Ссылка) КАК ТипЗначения,
				|	ДанныеВыбора.Ссылка КАК Ссылка,
				|	ДанныеВыбора.СотрудникСсылка КАК СотрудникСсылка,
				|	СведенияОСотрудниках.Подразделение КАК Подразделение,
				|	СведенияОПодразделениях.Ранг КАК Ранг,
				|	СведенияОПодразделениях.ВидПодразделения КАК ВидПодразделения
				|ПОМЕСТИТЬ ТекущиеДанныеПодразделенияСотрудников
				|ИЗ
				|	ТекущиеДанныеСотрудники КАК ДанныеВыбора
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК СведенияОСотрудниках
				|		ПО ДанныеВыбора.СотрудникСсылка = СведенияОСотрудниках.Ссылка
				|			И (НЕ СведенияОСотрудниках.ПометкаУдаления)
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СведенияОПодразделениях
				|		ПО (СведенияОСотрудниках.Подразделение = СведенияОПодразделениях.Ссылка)
				|			И (НЕ СведенияОПодразделениях.ПометкаУдаления)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Сотрудники.Ссылка КАК Сотрудник,
				|	ПодчиненностьПодразделений.Подчиненное КАК Подразделение,
				|	Сотрудники.Ссылка КАК Руководитель,
				|	Подразделения.Ранг КАК Ранг,
				|	Подразделения.ВидПодразделения КАК ВидПодразделения,
				|	Сотрудники.Ссылка = Подразделения.Руководитель КАК НепосредственныйРуководитель
				|ПОМЕСТИТЬ ПодразделенияИнициатора
				|ИЗ
				|	Справочник.Сотрудники КАК Сотрудники
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
				|		ПО Сотрудники.Ссылка = ПодчиненностьПодразделений.РуководительВышестоящего
				|			И (ПодчиненностьПодразделений.Вышестоящее = ПодчиненностьПодразделений.Подчиненное)
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК Подразделения
				|		ПО (ПодчиненностьПодразделений.Подчиненное = Подразделения.Ссылка)
				|			И (НЕ Подразделения.ПометкаУдаления)
				|ГДЕ
				|	Сотрудники.Ссылка = &ПК_Инициатор
				|
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ
				|	Сотрудники.Ссылка,
				|	Сотрудники.Подразделение,
				|	ЕСТЬNULL(ПодчиненностьПодразделений.РуководительПодчиненного, Подразделения.Руководитель),
				|	Подразделения.Ранг,
				|	Подразделения.ВидПодразделения,
				|	Сотрудники.Ссылка = Подразделения.Руководитель
				|ИЗ
				|	Справочник.Сотрудники КАК Сотрудники
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК Подразделения
				|		ПО Сотрудники.Подразделение = Подразделения.Ссылка
				|			И (НЕ Подразделения.ПометкаУдаления)
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
				|		ПО Сотрудники.Подразделение = ПодчиненностьПодразделений.Вышестоящее
				|			И Сотрудники.Подразделение = ПодчиненностьПодразделений.Подчиненное
				|ГДЕ
				|	Сотрудники.Ссылка = &ПК_Инициатор
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ТИПЗНАЧЕНИЯ(Ограничения.ДоступныйТип) КАК ДоступныйТип,
				|	Сотрудники.Ссылка КАК Инициатор,
				|	ЕСТЬNULL(ПодразделенияИнициатора.Подразделение, Сотрудники.Подразделение) КАК ИнициаторПодразделение,
				|	Ограничения.ИнициаторРуководитель = ИСТИНА
				|		И Сотрудники.Ссылка = ПодразделенияИнициатора.Руководитель КАК ИнициаторРуководитель,
				|	ПодразделенияИнициатора.НепосредственныйРуководитель КАК ИнициаторНепосредственныйРуководитель,
				|	Ограничения.УчастникРуководитель КАК УчастникРуководитель,
				|	Ограничения.УчастникСотрудник КАК УчастникСотрудник,
				|	Ограничения.УчастникРоль КАК УчастникРоль,
				|	Ограничения.УчастникРольЗначение КАК УчастникРольЗначение,
				|	Ограничения.УчастникКонтейнер КАК УчастникКонтейнер,
				|	Ограничения.УчастникРангС КАК УчастникРангС,
				|	Ограничения.УчастникРангПО КАК УчастникРангПО,
				|	Ограничения.УчастникРабочаяГруппа КАК УчастникРабочаяГруппа,
				|	Ограничения.УчастникПодразделение КАК УчастникПодразделение,
				|	Ограничения.УчастникИерархияВверх КАК УчастникИерархияВверх,
				|	Ограничения.УчастникИерархияВниз КАК УчастникИерархияВниз,
				|	Ограничения.УчастникИерархияВышестоящее КАК УчастникИерархияВышестоящее,
				|	Ограничения.УчастникИерархияВышестоящие КАК УчастникИерархияВышестоящие,
				|	Ограничения.УчастникИерархияПодчиненное КАК УчастникИерархияПодчиненное,
				|	Ограничения.УчастникИерархияПодчиненные КАК УчастникИерархияПодчиненные,
				|	Ограничения.УчастникИерархияТекущее КАК УчастникИерархияТекущее,
				|	Ограничения.УчастникИерархияСоседи КАК УчастникИерархияСоседи,
				|	Ограничения.Ссылка КАК Правило
				|ПОМЕСТИТЬ ПК_Ограничения
				|ИЗ
				|	Справочник.ПравилаКоммуникаций.Ограничения КАК Ограничения
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
				|		ПО (Сотрудники.Ссылка = &ПК_Инициатор)
				|		ЛЕВОЕ СОЕДИНЕНИЕ ПодразделенияИнициатора КАК ПодразделенияИнициатора
				|		ПО (Сотрудники.Ссылка = ПодразделенияИнициатора.Сотрудник)
				|ГДЕ
				|	Ограничения.Ссылка = &ПК_Правило
				|	И (Ограничения.ИнициаторСотрудник = ИСТИНА
				|				И Сотрудники.Ссылка <> ПодразделенияИнициатора.Руководитель
				|			ИЛИ Ограничения.ИнициаторРуководитель = ИСТИНА
				|				И Сотрудники.Ссылка = ПодразделенияИнициатора.Руководитель
				|			ИЛИ Ограничения.ИнициаторРоль = ИСТИНА
				|				И Ограничения.ИнициаторРольЗначение В
				|					(ВЫБРАТЬ
				|						Т.РольИсполнителя.Владелец КАК Ссылка
				|					ИЗ
				|						РегистрСведений.ИсполнителиРолей КАК Т
				|					ГДЕ
				|						Т.Исполнитель = Сотрудники.Ссылка))
				|	И ЕСТЬNULL(ПодразделенияИнициатора.Ранг, 0) МЕЖДУ Ограничения.ИнициаторРангС И Ограничения.ИнициаторРангПО
				|	И (Ограничения.ИнициаторКонтейнер = НЕОПРЕДЕЛЕНО
				|			ИЛИ Ограничения.ИнициаторКонтейнер = ПодразделенияИнициатора.Подразделение
				|			ИЛИ Ограничения.ИнициаторКонтейнер = ПодразделенияИнициатора.ВидПодразделения
				|			ИЛИ ВЫРАЗИТЬ(Ограничения.ИнициаторКонтейнер КАК Справочник.РабочиеГруппы) В
				|				(ВЫБРАТЬ
				|					ВЫРАЗИТЬ(Т.Контейнер КАК Справочник.РабочиеГруппы) КАК Ссылка
				|				ИЗ
				|					РегистрСведений.СотрудникиВКонтейнерах КАК Т
				|				ГДЕ
				|					Т.Сотрудник = Сотрудники.Ссылка))
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Ограничения.ДоступныйТип КАК ДоступныйТип,
				|	ДанныеВыбора.Ссылка КАК Ссылка,
				|	ДанныеВыбора.СотрудникСсылка КАК СсылкаСотрудник,
				|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫРАЗИТЬ(СотрудникиВКонтейнерахРоли.Контейнер КАК Справочник.ПолныеРоли).Владелец КАК Справочник.РолиИсполнителей), ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)) КАК СсылкаРоль,
				|	ЕСТЬNULL(ВозглавляемыеПодразделения.Подчиненное, ДанныеВыбора.Подразделение) КАК Подразделение,
				|	ЕСТЬNULL(ВозглавляемыеПодразделенияСведения.Ранг, ЕСТЬNULL(ДанныеВыбора.Ранг, 0)) КАК Ранг,
				|	ВЫБОР
				|		КОГДА ВозглавляемыеПодразделения.Подчиненное ЕСТЬ NULL
				|			ТОГДА ЕСТЬNULL(РуководителиПодразделений.РуководительПодчиненного, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
				|		ИНАЧЕ ДанныеВыбора.СотрудникСсылка
				|	КОНЕЦ КАК Руководитель,
				|	ЕСТЬNULL(ВозглавляемыеПодразделенияСведения.ВидПодразделения, ЕСТЬNULL(ДанныеВыбора.ВидПодразделения, ЗНАЧЕНИЕ(Справочник.ВидыПодразделений.ПустаяСсылка))) КАК ВидПодразделения,
				|	Ограничения.Инициатор КАК Инициатор,
				|	Ограничения.ИнициаторПодразделение КАК ИнициаторПодразделение,
				|	Ограничения.ИнициаторРуководитель КАК ИнициаторРуководитель,
				|	Ограничения.ИнициаторНепосредственныйРуководитель КАК ИнициаторНепосредственныйРуководитель,
				|	Ограничения.УчастникРуководитель КАК УчастникРуководитель,
				|	Ограничения.УчастникСотрудник КАК УчастникСотрудник,
				|	Ограничения.УчастникРоль КАК УчастникРоль,
				|	Ограничения.УчастникРольЗначение КАК УчастникРольЗначение,
				|	Ограничения.УчастникКонтейнер КАК УчастникКонтейнер,
				|	Ограничения.УчастникРангС КАК УчастникРангС,
				|	Ограничения.УчастникРангПО КАК УчастникРангПО,
				|	Ограничения.УчастникРабочаяГруппа КАК УчастникРабочаяГруппа,
				|	Ограничения.УчастникПодразделение КАК УчастникПодразделение,
				|	Ограничения.УчастникИерархияВниз КАК ИерархияВниз,
				|	Ограничения.УчастникИерархияВверх КАК ИерархияВверх,
				|	Ограничения.УчастникИерархияВышестоящее КАК ИерархияВышестоящее,
				|	Ограничения.УчастникИерархияВышестоящие КАК ИерархияВышестоящие,
				|	Ограничения.УчастникИерархияПодчиненное КАК ИерархияПодчиненное,
				|	Ограничения.УчастникИерархияПодчиненные КАК ИерархияПодчиненные,
				|	Ограничения.УчастникИерархияТекущее КАК ИерархияТекущее,
				|	Ограничения.УчастникИерархияСоседи КАК ИерархияСоседи
				|ПОМЕСТИТЬ ПК_Элементы
				|ИЗ
				|	ТекущиеДанныеПодразделенияСотрудников КАК ДанныеВыбора
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПК_Ограничения КАК Ограничения
				|		ПО ДанныеВыбора.ТипЗначения = Ограничения.ДоступныйТип
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК ВозглавляемыеПодразделения
				|		ПО ДанныеВыбора.СотрудникСсылка = ВозглавляемыеПодразделения.РуководительВышестоящего
				|			И (ВозглавляемыеПодразделения.Вышестоящее = ВозглавляемыеПодразделения.Подчиненное)
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК ВозглавляемыеПодразделенияСведения
				|		ПО (ВозглавляемыеПодразделения.Подчиненное = ВозглавляемыеПодразделенияСведения.Ссылка)
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК РуководителиПодразделений
				|		ПО ДанныеВыбора.Подразделение = РуководителиПодразделений.Подчиненное
				|			И (РуководителиПодразделений.Подчиненное = РуководителиПодразделений.Вышестоящее)
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерахРоли
				|		ПО ДанныеВыбора.СотрудникСсылка = СотрудникиВКонтейнерахРоли.Сотрудник
				|			И (ТИПЗНАЧЕНИЯ(СотрудникиВКонтейнерахРоли.Контейнер) = ТИП(Справочник.ПолныеРоли))
				|ГДЕ
				|	НЕ ЕСТЬNULL(ВозглавляемыеПодразделенияСведения.ПометкаУдаления, ЛОЖЬ)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	Элементы.Ссылка КАК Ссылка
				|ПОМЕСТИТЬ ПК_ДоступныеЭлементы
				|ИЗ
				|	ПК_Элементы КАК Элементы
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК Подчиненность
				|		ПО (Элементы.ИерархияВверх = ИСТИНА)
				|			И Элементы.ИнициаторПодразделение = Подчиненность.Подчиненное
				|			И Элементы.Подразделение = Подчиненность.Вышестоящее
				|ГДЕ
				|	Элементы.ИерархияВверх = ИСТИНА
				|	И (Элементы.ИерархияСоседи = ИСТИНА
				|			ИЛИ Подчиненность.Вышестоящее ЕСТЬ НЕ NULL )
				|	И (Элементы.ИерархияСоседи = ИСТИНА
				|			ИЛИ Элементы.ИерархияТекущее = ИСТИНА
				|				И Элементы.Подразделение = Элементы.ИнициаторПодразделение
				|			ИЛИ Элементы.ИерархияВышестоящие = ИСТИНА
				|				И Элементы.Подразделение <> Элементы.ИнициаторПодразделение
				|				И Элементы.ИнициаторРуководитель = ЛОЖЬ
				|			ИЛИ Элементы.ИерархияВышестоящие = ИСТИНА
				|				И Элементы.ИнициаторРуководитель = ИСТИНА
				|				И Подчиненность.РуководительВышестоящего <> Подчиненность.РуководительПодчиненного
				|			ИЛИ Элементы.ИерархияВышестоящее = ИСТИНА
				|				И Элементы.ИнициаторРуководитель = ЛОЖЬ
				|				И Подчиненность.УровеньВышестоящегоОтПодчиненного = 1
				|			ИЛИ Элементы.ИерархияВышестоящее = ИСТИНА
				|				И Элементы.ИнициаторРуководитель = ИСТИНА
				|				И Элементы.ИнициаторНепосредственныйРуководитель = ИСТИНА
				|				И Подчиненность.УровеньВышестоящегоОтПодчиненного = 1)
				|	И (Элементы.УчастникСотрудник = ИСТИНА
				|				И Элементы.СсылкаСотрудник <> Элементы.Руководитель
				|			ИЛИ Элементы.УчастникРуководитель = ИСТИНА
				|				И Элементы.СсылкаСотрудник = Элементы.Руководитель
				|			ИЛИ Элементы.УчастникРоль = ИСТИНА
				|				И Элементы.УчастникРольЗначение = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)
				|				И Элементы.СсылкаРоль <> ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)
				|			ИЛИ Элементы.УчастникРоль = ИСТИНА
				|				И Элементы.УчастникРольЗначение <> ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)
				|				И Элементы.УчастникРольЗначение = Элементы.СсылкаРоль)
				|	И ЕСТЬNULL(Элементы.Ранг, 0) МЕЖДУ Элементы.УчастникРангС И Элементы.УчастникРангПО
				|	И (Элементы.УчастникКонтейнер = НЕОПРЕДЕЛЕНО
				|			ИЛИ Элементы.УчастникКонтейнер = Элементы.Подразделение
				|			ИЛИ Элементы.УчастникКонтейнер = Элементы.ВидПодразделения
				|			ИЛИ Элементы.УчастникКонтейнер = Элементы.Ссылка
				|			ИЛИ ТИПЗНАЧЕНИЯ(Элементы.УчастникКонтейнер) = ТИП(Справочник.РабочиеГруппы)
				|				И Элементы.УчастникКонтейнер В
				|					(ВЫБРАТЬ
				|						Т.Контейнер КАК Ссылка
				|					ИЗ
				|						РегистрСведений.СотрудникиВКонтейнерах КАК Т
				|					ГДЕ
				|						Т.Сотрудник = Элементы.СсылкаСотрудник
				|						И Элементы.ДоступныйТип В (ТИП(Справочник.Сотрудники), ТИП(Справочник.РолиИсполнителей), ТИП(Справочник.СтруктураПредприятия))))
				|
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ
				|	Элементы.Ссылка
				|ИЗ
				|	ПК_Элементы КАК Элементы
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК Подчиненность
				|		ПО (Элементы.ИерархияВниз = ИСТИНА)
				|			И Элементы.Подразделение = Подчиненность.Подчиненное
				|			И Элементы.ИнициаторПодразделение = Подчиненность.Вышестоящее
				|			И (Подчиненность.УровеньВышестоящегоОтПодчиненного > 0)
				|ГДЕ
				|	Элементы.ИерархияВниз = ИСТИНА
				|	И (Элементы.ИерархияПодчиненные = ИСТИНА
				|				И Элементы.ИнициаторРуководитель = ЛОЖЬ
				|			ИЛИ Элементы.ИерархияПодчиненные = ИСТИНА
				|				И Элементы.ИнициаторРуководитель = ИСТИНА
				|				И Подчиненность.РуководительВышестоящего <> Подчиненность.РуководительПодчиненного
				|			ИЛИ Элементы.ИерархияПодчиненное = ИСТИНА
				|				И Элементы.ИнициаторРуководитель = ЛОЖЬ
				|				И Подчиненность.УровеньВышестоящегоОтПодчиненного = 1
				|			ИЛИ Элементы.ИерархияПодчиненное = ИСТИНА
				|				И Элементы.ИнициаторРуководитель = ИСТИНА
				|				И Подчиненность.УровеньВышестоящегоОтПодчиненного = 1
				|				И Подчиненность.РуководительВышестоящего <> Подчиненность.РуководительПодчиненного)
				|	И (Элементы.УчастникСотрудник = ИСТИНА
				|				И Элементы.СсылкаСотрудник <> Элементы.Руководитель
				|			ИЛИ Элементы.УчастникРуководитель = ИСТИНА
				|				И Элементы.СсылкаСотрудник = Элементы.Руководитель
				|			ИЛИ Элементы.УчастникРоль = ИСТИНА
				|				И Элементы.УчастникРольЗначение = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)
				|				И Элементы.СсылкаРоль <> ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)
				|			ИЛИ Элементы.УчастникРоль = ИСТИНА
				|				И Элементы.УчастникРольЗначение <> ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)
				|				И Элементы.УчастникРольЗначение = Элементы.СсылкаРоль)
				|	И ЕСТЬNULL(Элементы.Ранг, 0) МЕЖДУ Элементы.УчастникРангС И Элементы.УчастникРангПО
				|	И (Элементы.УчастникКонтейнер = НЕОПРЕДЕЛЕНО
				|			ИЛИ Элементы.УчастникКонтейнер = Элементы.Подразделение
				|			ИЛИ Элементы.УчастникКонтейнер = Элементы.ВидПодразделения
				|			ИЛИ Элементы.УчастникКонтейнер = Элементы.Ссылка
				|			ИЛИ ТИПЗНАЧЕНИЯ(Элементы.УчастникКонтейнер) = ТИП(Справочник.РабочиеГруппы)
				|				И Элементы.УчастникКонтейнер В
				|					(ВЫБРАТЬ
				|						Т.Контейнер КАК Ссылка
				|					ИЗ
				|						РегистрСведений.СотрудникиВКонтейнерах КАК Т
				|					ГДЕ
				|						Т.Сотрудник = Элементы.СсылкаСотрудник
				|						И Элементы.ДоступныйТип В (ТИП(Справочник.Сотрудники), ТИП(Справочник.РолиИсполнителей), ТИП(Справочник.СтруктураПредприятия))))
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ПК_ДоступныеЭлементы.Ссылка ЕСТЬ NULL КАК ЗапретПоПравиламКоммуникаций,
				|	&ПК_Правило КАК ПравилоКоммуникаций,
				|	ДанныеВыбора.*
				|	//ТаблицаРезультата
				|ИЗ
				|	ТекущиеДанные КАК ДанныеВыбора
				|		ЛЕВОЕ СОЕДИНЕНИЕ ПК_ДоступныеЭлементы КАК ПК_ДоступныеЭлементы
				|		ПО ДанныеВыбора.Ссылка = ПК_ДоступныеЭлементы.Ссылка";
			Запрос.УстановитьПараметр("ПК_Правило", Контекст.Правило);
			УстановитьПараметрИнициатор(Контекст, Запрос, Текст);
		Иначе
			Текст = 
				"ВЫБРАТЬ
				|	Правила.Правило КАК Правило,
				|	Правила.Инициатор КАК Инициатор
				|ПОМЕСТИТЬ ПК_Правила
				|ИЗ
				|	&ПК_Правила КАК Правила
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ДанныеВыбора.Ссылка КАК Ссылка,
				|	ДанныеВыбора.Ссылка КАК СотрудникСсылка
				|ПОМЕСТИТЬ ТекущиеДанныеСотрудники
				|ИЗ
				|	ТекущиеДанные КАК ДанныеВыбора
				|ГДЕ
				|	ТИПЗНАЧЕНИЯ(ДанныеВыбора.Ссылка) = ТИП(Справочник.Сотрудники)
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ДанныеВыбора.Ссылка,
				|	ЕСТЬNULL(СотрудникиВКонтейнерах.Сотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
				|ИЗ
				|	ТекущиеДанные КАК ДанныеВыбора
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПолныеРоли КАК ПолныеРоли
				|		ПО ДанныеВыбора.Ссылка = ПолныеРоли.Владелец
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
				|		ПО (ПолныеРоли.Ссылка = СотрудникиВКонтейнерах.Контейнер)
				|ГДЕ
				|	ТИПЗНАЧЕНИЯ(ДанныеВыбора.Ссылка) = ТИП(Справочник.РолиИсполнителей)
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ДанныеВыбора.Ссылка,
				|	ЕСТЬNULL(СотрудникиВКонтейнерах.Сотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
				|ИЗ
				|	ТекущиеДанные КАК ДанныеВыбора
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
				|		ПО ДанныеВыбора.Ссылка = СотрудникиВКонтейнерах.Контейнер
				|ГДЕ
				|	ТИПЗНАЧЕНИЯ(ДанныеВыбора.Ссылка) = ТИП(Справочник.РабочиеГруппы)
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ДанныеВыбора.Ссылка,
				|	ЕСТЬNULL(СведенияОСотрудниках.Ссылка, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
				|ИЗ
				|	ТекущиеДанные КАК ДанныеВыбора
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК СведенияОСотрудниках
				|		ПО ДанныеВыбора.Ссылка = СведенияОСотрудниках.Подразделение
				|ГДЕ
				|	ТИПЗНАЧЕНИЯ(ДанныеВыбора.Ссылка) = ТИП(Справочник.СтруктураПредприятия)
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	СотрудникСсылка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ТИПЗНАЧЕНИЯ(ДанныеВыбора.Ссылка) КАК ТипЗначения,
				|	ДанныеВыбора.Ссылка КАК Ссылка,
				|	ДанныеВыбора.СотрудникСсылка КАК СотрудникСсылка,
				|	СведенияОСотрудниках.Подразделение КАК Подразделение,
				|	СведенияОПодразделениях.Ранг КАК Ранг,
				|	СведенияОПодразделениях.ВидПодразделения КАК ВидПодразделения
				|ПОМЕСТИТЬ ТекущиеДанныеПодразделенияСотрудников
				|ИЗ
				|	ТекущиеДанныеСотрудники КАК ДанныеВыбора
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК СведенияОСотрудниках
				|		ПО ДанныеВыбора.СотрудникСсылка = СведенияОСотрудниках.Ссылка
				|			И (НЕ СведенияОСотрудниках.ПометкаУдаления)
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СведенияОПодразделениях
				|		ПО (СведенияОСотрудниках.Подразделение = СведенияОПодразделениях.Ссылка)
				|			И (НЕ СведенияОПодразделениях.ПометкаУдаления)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Сотрудники.Ссылка КАК Сотрудник,
				|	ПодчиненностьПодразделений.Подчиненное КАК Подразделение,
				|	Сотрудники.Ссылка КАК Руководитель,
				|	Подразделения.Ранг КАК Ранг,
				|	Подразделения.ВидПодразделения КАК ВидПодразделения,
				|	Сотрудники.Ссылка = Подразделения.Руководитель КАК НепосредственныйРуководитель
				|ПОМЕСТИТЬ ПодразделенияИнициатора
				|ИЗ
				|	ПК_Правила КАК Правила
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
				|		ПО (Правила.Инициатор = Сотрудники.Ссылка)
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
				|		ПО Сотрудники.Ссылка = ПодчиненностьПодразделений.РуководительВышестоящего
				|			И (ПодчиненностьПодразделений.Вышестоящее = ПодчиненностьПодразделений.Подчиненное)
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК Подразделения
				|		ПО (ПодчиненностьПодразделений.Подчиненное = Подразделения.Ссылка)
				|			И (НЕ Подразделения.ПометкаУдаления)
				|
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ
				|	Сотрудники.Ссылка,
				|	Сотрудники.Подразделение,
				|	ЕСТЬNULL(ПодчиненностьПодразделений.РуководительПодчиненного, Подразделения.Руководитель),
				|	Подразделения.Ранг,
				|	Подразделения.ВидПодразделения,
				|	Сотрудники.Ссылка = Подразделения.Руководитель
				|ИЗ
				|	ПК_Правила КАК Правила
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
				|		ПО (Правила.Инициатор = Сотрудники.Ссылка)
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК Подразделения
				|		ПО Сотрудники.Подразделение = Подразделения.Ссылка
				|			И (НЕ Подразделения.ПометкаУдаления)
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
				|		ПО Сотрудники.Подразделение = ПодчиненностьПодразделений.Вышестоящее
				|			И Сотрудники.Подразделение = ПодчиненностьПодразделений.Подчиненное
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ТИПЗНАЧЕНИЯ(Ограничения.ДоступныйТип) КАК ДоступныйТип,
				|	Сотрудники.Ссылка КАК Инициатор,
				|	ЕСТЬNULL(ПодразделенияИнициатора.Подразделение, Сотрудники.Подразделение) КАК ИнициаторПодразделение,
				|	Ограничения.ИнициаторРуководитель = ИСТИНА
				|		И Сотрудники.Ссылка = ПодразделенияИнициатора.Руководитель КАК ИнициаторРуководитель,
				|	ПодразделенияИнициатора.НепосредственныйРуководитель КАК ИнициаторНепосредственныйРуководитель,
				|	Ограничения.УчастникРуководитель КАК УчастникРуководитель,
				|	Ограничения.УчастникСотрудник КАК УчастникСотрудник,
				|	Ограничения.УчастникРоль КАК УчастникРоль,
				|	Ограничения.УчастникРольЗначение КАК УчастникРольЗначение,
				|	Ограничения.УчастникКонтейнер КАК УчастникКонтейнер,
				|	Ограничения.УчастникРангС КАК УчастникРангС,
				|	Ограничения.УчастникРангПО КАК УчастникРангПО,
				|	Ограничения.УчастникРабочаяГруппа КАК УчастникРабочаяГруппа,
				|	Ограничения.УчастникПодразделение КАК УчастникПодразделение,
				|	Ограничения.УчастникИерархияВверх КАК УчастникИерархияВверх,
				|	Ограничения.УчастникИерархияВниз КАК УчастникИерархияВниз,
				|	Ограничения.УчастникИерархияВышестоящее КАК УчастникИерархияВышестоящее,
				|	Ограничения.УчастникИерархияВышестоящие КАК УчастникИерархияВышестоящие,
				|	Ограничения.УчастникИерархияПодчиненное КАК УчастникИерархияПодчиненное,
				|	Ограничения.УчастникИерархияПодчиненные КАК УчастникИерархияПодчиненные,
				|	Ограничения.УчастникИерархияТекущее КАК УчастникИерархияТекущее,
				|	Ограничения.УчастникИерархияСоседи КАК УчастникИерархияСоседи,
				|	Правила.Правило КАК Правило
				|ПОМЕСТИТЬ ПК_Ограничения
				|ИЗ
				|	ПК_Правила КАК Правила
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
				|		ПО (Правила.Инициатор = Сотрудники.Ссылка)
				|		ЛЕВОЕ СОЕДИНЕНИЕ ПодразделенияИнициатора КАК ПодразделенияИнициатора
				|		ПО (Сотрудники.Ссылка = ПодразделенияИнициатора.Сотрудник)
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаКоммуникаций.Ограничения КАК Ограничения
				|		ПО Правила.Правило = Ограничения.Ссылка
				|ГДЕ
				|	(Ограничения.ИнициаторСотрудник = ИСТИНА
				|				И Сотрудники.Ссылка <> ПодразделенияИнициатора.Руководитель
				|			ИЛИ Ограничения.ИнициаторРуководитель = ИСТИНА
				|				И Сотрудники.Ссылка = ПодразделенияИнициатора.Руководитель
				|			ИЛИ Ограничения.ИнициаторРоль = ИСТИНА
				|				И Ограничения.ИнициаторРольЗначение В
				|					(ВЫБРАТЬ
				|						Т.РольИсполнителя.Владелец КАК Ссылка
				|					ИЗ
				|						РегистрСведений.ИсполнителиРолей КАК Т
				|					ГДЕ
				|						Т.Исполнитель = Сотрудники.Ссылка))
				|	И ЕСТЬNULL(ПодразделенияИнициатора.Ранг, 0) МЕЖДУ Ограничения.ИнициаторРангС И Ограничения.ИнициаторРангПО
				|	И (Ограничения.ИнициаторКонтейнер = НЕОПРЕДЕЛЕНО
				|			ИЛИ Ограничения.ИнициаторКонтейнер = ПодразделенияИнициатора.Подразделение
				|			ИЛИ Ограничения.ИнициаторКонтейнер = ПодразделенияИнициатора.ВидПодразделения
				|			ИЛИ ВЫРАЗИТЬ(Ограничения.ИнициаторКонтейнер КАК Справочник.РабочиеГруппы) В
				|				(ВЫБРАТЬ
				|					ВЫРАЗИТЬ(Т.Контейнер КАК Справочник.РабочиеГруппы) КАК Ссылка
				|				ИЗ
				|					РегистрСведений.СотрудникиВКонтейнерах КАК Т
				|				ГДЕ
				|					Т.Сотрудник = Сотрудники.Ссылка))
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Ограничения.ДоступныйТип КАК ДоступныйТип,
				|	ДанныеВыбора.Ссылка КАК Ссылка,
				|	ДанныеВыбора.СотрудникСсылка КАК СсылкаСотрудник,
				|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫРАЗИТЬ(СотрудникиВКонтейнерахРоли.Контейнер КАК Справочник.ПолныеРоли).Владелец КАК Справочник.РолиИсполнителей), ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)) КАК СсылкаРоль,
				|	ЕСТЬNULL(ВозглавляемыеПодразделения.Подчиненное, ДанныеВыбора.Подразделение) КАК Подразделение,
				|	ЕСТЬNULL(ВозглавляемыеПодразделенияСведения.Ранг, ЕСТЬNULL(ДанныеВыбора.Ранг, 0)) КАК Ранг,
				|	ВЫБОР
				|		КОГДА ВозглавляемыеПодразделения.Подчиненное ЕСТЬ NULL
				|			ТОГДА ЕСТЬNULL(РуководителиПодразделений.РуководительПодчиненного, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
				|		ИНАЧЕ ДанныеВыбора.СотрудникСсылка
				|	КОНЕЦ КАК Руководитель,
				|	ЕСТЬNULL(ВозглавляемыеПодразделенияСведения.ВидПодразделения, ЕСТЬNULL(ДанныеВыбора.ВидПодразделения, ЗНАЧЕНИЕ(Справочник.ВидыПодразделений.ПустаяСсылка))) КАК ВидПодразделения,
				|	Ограничения.Инициатор КАК Инициатор,
				|	Ограничения.ИнициаторПодразделение КАК ИнициаторПодразделение,
				|	Ограничения.ИнициаторРуководитель КАК ИнициаторРуководитель,
				|	Ограничения.ИнициаторНепосредственныйРуководитель КАК ИнициаторНепосредственныйРуководитель,
				|	Ограничения.УчастникРуководитель КАК УчастникРуководитель,
				|	Ограничения.УчастникСотрудник КАК УчастникСотрудник,
				|	Ограничения.УчастникРоль КАК УчастникРоль,
				|	Ограничения.УчастникРольЗначение КАК УчастникРольЗначение,
				|	Ограничения.УчастникКонтейнер КАК УчастникКонтейнер,
				|	Ограничения.УчастникРангС КАК УчастникРангС,
				|	Ограничения.УчастникРангПО КАК УчастникРангПО,
				|	Ограничения.УчастникРабочаяГруппа КАК УчастникРабочаяГруппа,
				|	Ограничения.УчастникПодразделение КАК УчастникПодразделение,
				|	Ограничения.УчастникИерархияВниз КАК ИерархияВниз,
				|	Ограничения.УчастникИерархияВверх КАК ИерархияВверх,
				|	Ограничения.УчастникИерархияВышестоящее КАК ИерархияВышестоящее,
				|	Ограничения.УчастникИерархияВышестоящие КАК ИерархияВышестоящие,
				|	Ограничения.УчастникИерархияПодчиненное КАК ИерархияПодчиненное,
				|	Ограничения.УчастникИерархияПодчиненные КАК ИерархияПодчиненные,
				|	Ограничения.УчастникИерархияТекущее КАК ИерархияТекущее,
				|	Ограничения.УчастникИерархияСоседи КАК ИерархияСоседи,
				|	Ограничения.Правило
				|ПОМЕСТИТЬ ПК_Элементы
				|ИЗ
				|	ТекущиеДанныеПодразделенияСотрудников КАК ДанныеВыбора
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПК_Ограничения КАК Ограничения
				|		ПО ДанныеВыбора.ТипЗначения = Ограничения.ДоступныйТип
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК ВозглавляемыеПодразделения
				|		ПО ДанныеВыбора.СотрудникСсылка = ВозглавляемыеПодразделения.РуководительВышестоящего
				|			И (ВозглавляемыеПодразделения.Вышестоящее = ВозглавляемыеПодразделения.Подчиненное)
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК ВозглавляемыеПодразделенияСведения
				|		ПО (ВозглавляемыеПодразделения.Подчиненное = ВозглавляемыеПодразделенияСведения.Ссылка)
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК РуководителиПодразделений
				|		ПО ДанныеВыбора.Подразделение = РуководителиПодразделений.Подчиненное
				|			И (РуководителиПодразделений.Подчиненное = РуководителиПодразделений.Вышестоящее)
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерахРоли
				|		ПО ДанныеВыбора.СотрудникСсылка = СотрудникиВКонтейнерахРоли.Сотрудник
				|			И (ТИПЗНАЧЕНИЯ(СотрудникиВКонтейнерахРоли.Контейнер) = ТИП(Справочник.ПолныеРоли))
				|ГДЕ
				|	НЕ ЕСТЬNULL(ВозглавляемыеПодразделенияСведения.ПометкаУдаления, ЛОЖЬ)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	Элементы.Ссылка КАК Ссылка,
				|	Элементы.Правило КАК Правило
				|ПОМЕСТИТЬ ПК_ВсеДоступныеЭлементы
				|ИЗ
				|	ПК_Элементы КАК Элементы
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК Подчиненность
				|		ПО (Элементы.ИерархияВверх = ИСТИНА)
				|			И Элементы.ИнициаторПодразделение = Подчиненность.Подчиненное
				|			И Элементы.Подразделение = Подчиненность.Вышестоящее
				|ГДЕ
				|	Элементы.ИерархияВверх = ИСТИНА
				|	И (Элементы.ИерархияСоседи = ИСТИНА
				|			ИЛИ Подчиненность.Вышестоящее ЕСТЬ НЕ NULL )
				|	И (Элементы.ИерархияСоседи = ИСТИНА
				|			ИЛИ Элементы.ИерархияТекущее = ИСТИНА
				|				И Элементы.Подразделение = Элементы.ИнициаторПодразделение
				|			ИЛИ Элементы.ИерархияВышестоящие = ИСТИНА
				|				И Элементы.Подразделение <> Элементы.ИнициаторПодразделение
				|				И Элементы.ИнициаторРуководитель = ЛОЖЬ
				|			ИЛИ Элементы.ИерархияВышестоящие = ИСТИНА
				|				И Элементы.ИнициаторРуководитель = ИСТИНА
				|				И Подчиненность.РуководительВышестоящего <> Подчиненность.РуководительПодчиненного
				|			ИЛИ Элементы.ИерархияВышестоящее = ИСТИНА
				|				И Элементы.ИнициаторРуководитель = ЛОЖЬ
				|				И Подчиненность.УровеньВышестоящегоОтПодчиненного = 1
				|			ИЛИ Элементы.ИерархияВышестоящее = ИСТИНА
				|				И Элементы.ИнициаторРуководитель = ИСТИНА
				|				И Элементы.ИнициаторНепосредственныйРуководитель = ИСТИНА
				|				И Подчиненность.УровеньВышестоящегоОтПодчиненного = 1)
				|	И (Элементы.УчастникСотрудник = ИСТИНА
				|				И Элементы.СсылкаСотрудник <> Элементы.Руководитель
				|			ИЛИ Элементы.УчастникРуководитель = ИСТИНА
				|				И Элементы.СсылкаСотрудник = Элементы.Руководитель
				|			ИЛИ Элементы.УчастникРоль = ИСТИНА
				|				И Элементы.УчастникРольЗначение = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)
				|				И Элементы.СсылкаРоль <> ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)
				|			ИЛИ Элементы.УчастникРоль = ИСТИНА
				|				И Элементы.УчастникРольЗначение <> ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)
				|				И Элементы.УчастникРольЗначение = Элементы.СсылкаРоль)
				|	И ЕСТЬNULL(Элементы.Ранг, 0) МЕЖДУ Элементы.УчастникРангС И Элементы.УчастникРангПО
				|	И (Элементы.УчастникКонтейнер = НЕОПРЕДЕЛЕНО
				|			ИЛИ Элементы.УчастникКонтейнер = Элементы.Подразделение
				|			ИЛИ Элементы.УчастникКонтейнер = Элементы.ВидПодразделения
				|			ИЛИ Элементы.УчастникКонтейнер = Элементы.Ссылка
				|			ИЛИ ТИПЗНАЧЕНИЯ(Элементы.УчастникКонтейнер) = ТИП(Справочник.РабочиеГруппы)
				|				И Элементы.УчастникКонтейнер В
				|					(ВЫБРАТЬ
				|						Т.Контейнер КАК Ссылка
				|					ИЗ
				|						РегистрСведений.СотрудникиВКонтейнерах КАК Т
				|					ГДЕ
				|						Т.Сотрудник = Элементы.СсылкаСотрудник
				|						И Элементы.ДоступныйТип В (ТИП(Справочник.Сотрудники), ТИП(Справочник.РолиИсполнителей), ТИП(Справочник.СтруктураПредприятия))))
				|
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ
				|	Элементы.Ссылка,
				|	Элементы.Правило
				|ИЗ
				|	ПК_Элементы КАК Элементы
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК Подчиненность
				|		ПО (Элементы.ИерархияВниз = ИСТИНА)
				|			И Элементы.Подразделение = Подчиненность.Подчиненное
				|			И Элементы.ИнициаторПодразделение = Подчиненность.Вышестоящее
				|			И (Подчиненность.УровеньВышестоящегоОтПодчиненного > 0)
				|ГДЕ
				|	Элементы.ИерархияВниз = ИСТИНА
				|	И (Элементы.ИерархияПодчиненные = ИСТИНА
				|				И Элементы.ИнициаторРуководитель = ЛОЖЬ
				|			ИЛИ Элементы.ИерархияПодчиненные = ИСТИНА
				|				И Элементы.ИнициаторРуководитель = ИСТИНА
				|				И Подчиненность.РуководительВышестоящего <> Подчиненность.РуководительПодчиненного
				|			ИЛИ Элементы.ИерархияПодчиненное = ИСТИНА
				|				И Элементы.ИнициаторРуководитель = ЛОЖЬ
				|				И Подчиненность.УровеньВышестоящегоОтПодчиненного = 1
				|			ИЛИ Элементы.ИерархияПодчиненное = ИСТИНА
				|				И Элементы.ИнициаторРуководитель = ИСТИНА
				|				И Подчиненность.УровеньВышестоящегоОтПодчиненного = 1
				|				И Подчиненность.РуководительВышестоящего <> Подчиненность.РуководительПодчиненного)
				|	И (Элементы.УчастникСотрудник = ИСТИНА
				|				И Элементы.СсылкаСотрудник <> Элементы.Руководитель
				|			ИЛИ Элементы.УчастникРуководитель = ИСТИНА
				|				И Элементы.СсылкаСотрудник = Элементы.Руководитель
				|			ИЛИ Элементы.УчастникРоль = ИСТИНА
				|				И Элементы.УчастникРольЗначение = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)
				|				И Элементы.СсылкаРоль <> ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)
				|			ИЛИ Элементы.УчастникРоль = ИСТИНА
				|				И Элементы.УчастникРольЗначение <> ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)
				|				И Элементы.УчастникРольЗначение = Элементы.СсылкаРоль)
				|	И ЕСТЬNULL(Элементы.Ранг, 0) МЕЖДУ Элементы.УчастникРангС И Элементы.УчастникРангПО
				|	И (Элементы.УчастникКонтейнер = НЕОПРЕДЕЛЕНО
				|			ИЛИ Элементы.УчастникКонтейнер = Элементы.Подразделение
				|			ИЛИ Элементы.УчастникКонтейнер = Элементы.ВидПодразделения
				|			ИЛИ Элементы.УчастникКонтейнер = Элементы.Ссылка
				|			ИЛИ ТИПЗНАЧЕНИЯ(Элементы.УчастникКонтейнер) = ТИП(Справочник.РабочиеГруппы)
				|				И Элементы.УчастникКонтейнер В
				|					(ВЫБРАТЬ
				|						Т.Контейнер КАК Ссылка
				|					ИЗ
				|						РегистрСведений.СотрудникиВКонтейнерах КАК Т
				|					ГДЕ
				|						Т.Сотрудник = Элементы.СсылкаСотрудник
				|						И Элементы.ДоступныйТип В (ТИП(Справочник.Сотрудники), ТИП(Справочник.РолиИсполнителей), ТИП(Справочник.СтруктураПредприятия))))
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Т.Ссылка КАК Ссылка
				|ПОМЕСТИТЬ ПК_ДоступныеЭлементы
				|ИЗ
				|	ПК_ВсеДоступныеЭлементы КАК Т
				|
				|СГРУППИРОВАТЬ ПО
				|	Т.Ссылка
				|
				|ИМЕЮЩИЕ
				|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Т.Правило) >= &ПК_ВсегоПравил
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ПК_ДоступныеЭлементы.Ссылка ЕСТЬ NULL КАК ЗапретПоПравиламКоммуникаций,
				|	&ПК_ПравилаСтрокой КАК ПравилоКоммуникаций,
				|	ДанныеВыбора.*
				|	//ТаблицаРезультата
				|ИЗ
				|	ТекущиеДанные КАК ДанныеВыбора
				|		ЛЕВОЕ СОЕДИНЕНИЕ ПК_ДоступныеЭлементы КАК ПК_ДоступныеЭлементы
				|		ПО ДанныеВыбора.Ссылка = ПК_ДоступныеЭлементы.Ссылка";
			
			ТЗ = Новый ТаблицаЗначений;
			ТЗ.Колонки.Добавить("Правило", Новый ОписаниеТипов("СправочникСсылка.ПравилаКоммуникаций"));
			ТЗ.Колонки.Добавить("Инициатор", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
			
			Строки = Новый Массив;
			
			Для Каждого Правило Из Контекст.Правило Цикл
				Строки.Добавить(XMLСтрока(Правило.Ключ));
				
				Если Правило.Значение = Неопределено Тогда
					Если ТипЗнч(Контекст.Инициатор) = Тип("Массив") Тогда
						Для Каждого Инициатор Из Контекст.Инициатор Цикл
							Запись = ТЗ.Добавить();
							Запись.Правило = Правило.Ключ;
							Запись.Инициатор = Инициатор;
						КонецЦикла;
					Иначе
						Запись = ТЗ.Добавить();
						Запись.Правило = Правило.Ключ;
						Запись.Инициатор = Контекст.Инициатор;
					КонецЕсли;
				Иначе
					Если ТипЗнч(Правило.Значение) = Тип("Массив") Тогда
						Для Каждого Инициатор Из Правило.Значение Цикл
							Запись = ТЗ.Добавить();
							Запись.Правило = Правило.Ключ;
							Запись.Инициатор = Инициатор;
						КонецЦикла;
					Иначе
						Запись = ТЗ.Добавить();
						Запись.Правило = Правило.Ключ;
						Запись.Инициатор = Правило.Значение;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			Запрос.УстановитьПараметр("ПК_Правила", ТЗ);
			Запрос.УстановитьПараметр("ПК_ВсегоПравил", Контекст.Правило.Количество());
			Запрос.УстановитьПараметр("ПК_ПравилаСтрокой", СтрСоединить(Строки, ";"));
		КонецЕсли;
	Иначе
		Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Назначение.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ПК_Правила
			|ИЗ
			|	Справочник.ПравилаКоммуникаций.Назначение КАК Назначение
			|ГДЕ
			|	Назначение.Ключ В(&ПК_Ключ)
			|	И Назначение.Позиция В(&ПК_Позиция)
			|	И Назначение.Этап В(&ПК_Этап)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Назначение.Релевантность УБЫВ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДанныеВыбора.Ссылка КАК Ссылка,
			|	ДанныеВыбора.Ссылка КАК СотрудникСсылка
			|ПОМЕСТИТЬ ТекущиеДанныеСотрудники
			|ИЗ
			|	ТекущиеДанные КАК ДанныеВыбора
			|ГДЕ
			|	ТИПЗНАЧЕНИЯ(ДанныеВыбора.Ссылка) = ТИП(Справочник.Сотрудники)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДанныеВыбора.Ссылка,
			|	ЕСТЬNULL(СотрудникиВКонтейнерах.Сотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
			|ИЗ
			|	ТекущиеДанные КАК ДанныеВыбора
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПолныеРоли КАК ПолныеРоли
			|		ПО ДанныеВыбора.Ссылка = ПолныеРоли.Владелец
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
			|		ПО (ПолныеРоли.Ссылка = СотрудникиВКонтейнерах.Контейнер)
			|ГДЕ
			|	ТИПЗНАЧЕНИЯ(ДанныеВыбора.Ссылка) = ТИП(Справочник.РолиИсполнителей)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДанныеВыбора.Ссылка,
			|	ЕСТЬNULL(СотрудникиВКонтейнерах.Сотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
			|ИЗ
			|	ТекущиеДанные КАК ДанныеВыбора
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
			|		ПО ДанныеВыбора.Ссылка = СотрудникиВКонтейнерах.Контейнер
			|ГДЕ
			|	ТИПЗНАЧЕНИЯ(ДанныеВыбора.Ссылка) = ТИП(Справочник.РабочиеГруппы)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДанныеВыбора.Ссылка,
			|	ЕСТЬNULL(СведенияОСотрудниках.Ссылка, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
			|ИЗ
			|	ТекущиеДанные КАК ДанныеВыбора
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК СведенияОСотрудниках
			|		ПО ДанныеВыбора.Ссылка = СведенияОСотрудниках.Подразделение
			|ГДЕ
			|	ТИПЗНАЧЕНИЯ(ДанныеВыбора.Ссылка) = ТИП(Справочник.СтруктураПредприятия)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	СотрудникСсылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТИПЗНАЧЕНИЯ(ДанныеВыбора.Ссылка) КАК ТипЗначения,
			|	ДанныеВыбора.Ссылка КАК Ссылка,
			|	ДанныеВыбора.СотрудникСсылка КАК СотрудникСсылка,
			|	СведенияОСотрудниках.Подразделение КАК Подразделение,
			|	СведенияОПодразделениях.Ранг КАК Ранг,
			|	СведенияОПодразделениях.ВидПодразделения КАК ВидПодразделения
			|ПОМЕСТИТЬ ТекущиеДанныеПодразделенияСотрудников
			|ИЗ
			|	ТекущиеДанныеСотрудники КАК ДанныеВыбора
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК СведенияОСотрудниках
			|		ПО ДанныеВыбора.СотрудникСсылка = СведенияОСотрудниках.Ссылка
			|			И (НЕ СведенияОСотрудниках.ПометкаУдаления)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СведенияОПодразделениях
			|		ПО (СведенияОСотрудниках.Подразделение = СведенияОПодразделениях.Ссылка)
			|			И (НЕ СведенияОПодразделениях.ПометкаУдаления)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Сотрудники.Ссылка КАК Сотрудник,
			|	ПодчиненностьПодразделений.Подчиненное КАК Подразделение,
			|	Сотрудники.Ссылка КАК Руководитель,
			|	Подразделения.Ранг КАК Ранг,
			|	Подразделения.ВидПодразделения КАК ВидПодразделения,
			|	Сотрудники.Ссылка = Подразделения.Руководитель КАК НепосредственныйРуководитель
			|ПОМЕСТИТЬ ПодразделенияИнициатора
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
			|		ПО Сотрудники.Ссылка = ПодчиненностьПодразделений.РуководительВышестоящего
			|			И (ПодчиненностьПодразделений.Вышестоящее = ПодчиненностьПодразделений.Подчиненное)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК Подразделения
			|		ПО (ПодчиненностьПодразделений.Подчиненное = Подразделения.Ссылка)
			|			И (НЕ Подразделения.ПометкаУдаления)
			|ГДЕ
			|	Сотрудники.Ссылка = &ПК_Инициатор
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	Сотрудники.Ссылка,
			|	Сотрудники.Подразделение,
			|	ЕСТЬNULL(ПодчиненностьПодразделений.РуководительПодчиненного, Подразделения.Руководитель),
			|	Подразделения.Ранг,
			|	Подразделения.ВидПодразделения,
			|	Сотрудники.Ссылка = Подразделения.Руководитель
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК Подразделения
			|		ПО Сотрудники.Подразделение = Подразделения.Ссылка
			|			И (НЕ Подразделения.ПометкаУдаления)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
			|		ПО Сотрудники.Подразделение = ПодчиненностьПодразделений.Вышестоящее
			|			И Сотрудники.Подразделение = ПодчиненностьПодразделений.Подчиненное
			|ГДЕ
			|	Сотрудники.Ссылка = &ПК_Инициатор
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТИПЗНАЧЕНИЯ(Ограничения.ДоступныйТип) КАК ДоступныйТип,
			|	Сотрудники.Ссылка КАК Инициатор,
			|	ЕСТЬNULL(ПодразделенияИнициатора.Подразделение, Сотрудники.Подразделение) КАК ИнициаторПодразделение,
			|	Ограничения.ИнициаторРуководитель = ИСТИНА
			|		И Сотрудники.Ссылка = ПодразделенияИнициатора.Руководитель КАК ИнициаторРуководитель,
			|	ПодразделенияИнициатора.НепосредственныйРуководитель КАК ИнициаторНепосредственныйРуководитель,
			|	Ограничения.УчастникРуководитель КАК УчастникРуководитель,
			|	Ограничения.УчастникСотрудник КАК УчастникСотрудник,
			|	Ограничения.УчастникРоль КАК УчастникРоль,
			|	Ограничения.УчастникРольЗначение КАК УчастникРольЗначение,
			|	Ограничения.УчастникКонтейнер КАК УчастникКонтейнер,
			|	Ограничения.УчастникРангС КАК УчастникРангС,
			|	Ограничения.УчастникРангПО КАК УчастникРангПО,
			|	Ограничения.УчастникРабочаяГруппа КАК УчастникРабочаяГруппа,
			|	Ограничения.УчастникПодразделение КАК УчастникПодразделение,
			|	Ограничения.УчастникИерархияВверх КАК УчастникИерархияВверх,
			|	Ограничения.УчастникИерархияВниз КАК УчастникИерархияВниз,
			|	Ограничения.УчастникИерархияВышестоящее КАК УчастникИерархияВышестоящее,
			|	Ограничения.УчастникИерархияВышестоящие КАК УчастникИерархияВышестоящие,
			|	Ограничения.УчастникИерархияПодчиненное КАК УчастникИерархияПодчиненное,
			|	Ограничения.УчастникИерархияПодчиненные КАК УчастникИерархияПодчиненные,
			|	Ограничения.УчастникИерархияТекущее КАК УчастникИерархияТекущее,
			|	Ограничения.УчастникИерархияСоседи КАК УчастникИерархияСоседи,
			|	Ограничения.Ссылка КАК Правило
			|ПОМЕСТИТЬ ПК_Ограничения
			|ИЗ
			|	Справочник.ПравилаКоммуникаций.Ограничения КАК Ограничения
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО (Сотрудники.Ссылка = &ПК_Инициатор)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПодразделенияИнициатора КАК ПодразделенияИнициатора
			|		ПО (Сотрудники.Ссылка = ПодразделенияИнициатора.Сотрудник)
			|ГДЕ
			|	Ограничения.Ссылка В
			|			(ВЫБРАТЬ
			|				ПК_Правила.Ссылка
			|			ИЗ
			|				ПК_Правила)
			|	И (Ограничения.ИнициаторСотрудник = ИСТИНА
			|				И Сотрудники.Ссылка <> ПодразделенияИнициатора.Руководитель
			|			ИЛИ Ограничения.ИнициаторРуководитель = ИСТИНА
			|				И Сотрудники.Ссылка = ПодразделенияИнициатора.Руководитель
			|			ИЛИ Ограничения.ИнициаторРоль = ИСТИНА
			|				И Ограничения.ИнициаторРольЗначение В
			|					(ВЫБРАТЬ
			|						Т.РольИсполнителя.Владелец КАК Ссылка
			|					ИЗ
			|						РегистрСведений.ИсполнителиРолей КАК Т
			|					ГДЕ
			|						Т.Исполнитель = Сотрудники.Ссылка))
			|	И ЕСТЬNULL(ПодразделенияИнициатора.Ранг, 0) МЕЖДУ Ограничения.ИнициаторРангС И Ограничения.ИнициаторРангПО
			|	И (Ограничения.ИнициаторКонтейнер = НЕОПРЕДЕЛЕНО
			|			ИЛИ Ограничения.ИнициаторКонтейнер = ПодразделенияИнициатора.Подразделение
			|			ИЛИ Ограничения.ИнициаторКонтейнер = ПодразделенияИнициатора.ВидПодразделения
			|			ИЛИ ВЫРАЗИТЬ(Ограничения.ИнициаторКонтейнер КАК Справочник.РабочиеГруппы) В
			|				(ВЫБРАТЬ
			|					ВЫРАЗИТЬ(Т.Контейнер КАК Справочник.РабочиеГруппы) КАК Ссылка
			|				ИЗ
			|					РегистрСведений.СотрудникиВКонтейнерах КАК Т
			|				ГДЕ
			|					Т.Сотрудник = Сотрудники.Ссылка))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Ограничения.ДоступныйТип КАК ДоступныйТип,
			|	ДанныеВыбора.Ссылка КАК Ссылка,
			|	ДанныеВыбора.СотрудникСсылка КАК СсылкаСотрудник,
			|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫРАЗИТЬ(СотрудникиВКонтейнерахРоли.Контейнер КАК Справочник.ПолныеРоли).Владелец КАК Справочник.РолиИсполнителей), ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)) КАК СсылкаРоль,
			|	ЕСТЬNULL(ВозглавляемыеПодразделения.Подчиненное, ДанныеВыбора.Подразделение) КАК Подразделение,
			|	ЕСТЬNULL(ВозглавляемыеПодразделенияСведения.Ранг, ЕСТЬNULL(ДанныеВыбора.Ранг, 0)) КАК Ранг,
			|	ВЫБОР
			|		КОГДА ВозглавляемыеПодразделения.Подчиненное ЕСТЬ NULL
			|			ТОГДА ЕСТЬNULL(РуководителиПодразделений.РуководительПодчиненного, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
			|		ИНАЧЕ ДанныеВыбора.СотрудникСсылка
			|	КОНЕЦ КАК Руководитель,
			|	ЕСТЬNULL(ВозглавляемыеПодразделенияСведения.ВидПодразделения, ЕСТЬNULL(ДанныеВыбора.ВидПодразделения, ЗНАЧЕНИЕ(Справочник.ВидыПодразделений.ПустаяСсылка))) КАК ВидПодразделения,
			|	Ограничения.Инициатор КАК Инициатор,
			|	Ограничения.ИнициаторПодразделение КАК ИнициаторПодразделение,
			|	Ограничения.ИнициаторРуководитель КАК ИнициаторРуководитель,
			|	Ограничения.ИнициаторНепосредственныйРуководитель КАК ИнициаторНепосредственныйРуководитель,
			|	Ограничения.УчастникРуководитель КАК УчастникРуководитель,
			|	Ограничения.УчастникСотрудник КАК УчастникСотрудник,
			|	Ограничения.УчастникРоль КАК УчастникРоль,
			|	Ограничения.УчастникРольЗначение КАК УчастникРольЗначение,
			|	Ограничения.УчастникКонтейнер КАК УчастникКонтейнер,
			|	Ограничения.УчастникРангС КАК УчастникРангС,
			|	Ограничения.УчастникРангПО КАК УчастникРангПО,
			|	Ограничения.УчастникРабочаяГруппа КАК УчастникРабочаяГруппа,
			|	Ограничения.УчастникПодразделение КАК УчастникПодразделение,
			|	Ограничения.УчастникИерархияВниз КАК ИерархияВниз,
			|	Ограничения.УчастникИерархияВверх КАК ИерархияВверх,
			|	Ограничения.УчастникИерархияВышестоящее КАК ИерархияВышестоящее,
			|	Ограничения.УчастникИерархияВышестоящие КАК ИерархияВышестоящие,
			|	Ограничения.УчастникИерархияПодчиненное КАК ИерархияПодчиненное,
			|	Ограничения.УчастникИерархияПодчиненные КАК ИерархияПодчиненные,
			|	Ограничения.УчастникИерархияТекущее КАК ИерархияТекущее,
			|	Ограничения.УчастникИерархияСоседи КАК ИерархияСоседи
			|ПОМЕСТИТЬ ПК_Элементы
			|ИЗ
			|	ТекущиеДанныеПодразделенияСотрудников КАК ДанныеВыбора
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПК_Ограничения КАК Ограничения
			|		ПО ДанныеВыбора.ТипЗначения = Ограничения.ДоступныйТип
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК ВозглавляемыеПодразделения
			|		ПО ДанныеВыбора.СотрудникСсылка = ВозглавляемыеПодразделения.РуководительВышестоящего
			|			И (ВозглавляемыеПодразделения.Вышестоящее = ВозглавляемыеПодразделения.Подчиненное)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК ВозглавляемыеПодразделенияСведения
			|		ПО (ВозглавляемыеПодразделения.Подчиненное = ВозглавляемыеПодразделенияСведения.Ссылка)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК РуководителиПодразделений
			|		ПО ДанныеВыбора.Подразделение = РуководителиПодразделений.Подчиненное
			|			И (РуководителиПодразделений.Подчиненное = РуководителиПодразделений.Вышестоящее)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерахРоли
			|		ПО ДанныеВыбора.СотрудникСсылка = СотрудникиВКонтейнерахРоли.Сотрудник
			|			И (ТИПЗНАЧЕНИЯ(СотрудникиВКонтейнерахРоли.Контейнер) = ТИП(Справочник.ПолныеРоли))
			|ГДЕ
			|	НЕ ЕСТЬNULL(ВозглавляемыеПодразделенияСведения.ПометкаУдаления, ЛОЖЬ)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Элементы.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ПК_ДоступныеЭлементы
			|ИЗ
			|	ПК_Элементы КАК Элементы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК Подчиненность
			|		ПО (Элементы.ИерархияВверх = ИСТИНА)
			|			И Элементы.ИнициаторПодразделение = Подчиненность.Подчиненное
			|			И Элементы.Подразделение = Подчиненность.Вышестоящее
			|ГДЕ
			|	Элементы.ИерархияВверх = ИСТИНА
			|	И (Элементы.ИерархияСоседи = ИСТИНА
			|			ИЛИ Подчиненность.Вышестоящее ЕСТЬ НЕ NULL )
			|	И (Элементы.ИерархияСоседи = ИСТИНА
			|			ИЛИ Элементы.ИерархияТекущее = ИСТИНА
			|				И Элементы.Подразделение = Элементы.ИнициаторПодразделение
			|			ИЛИ Элементы.ИерархияВышестоящие = ИСТИНА
			|				И Элементы.Подразделение <> Элементы.ИнициаторПодразделение
			|				И Элементы.ИнициаторРуководитель = ЛОЖЬ
			|			ИЛИ Элементы.ИерархияВышестоящие = ИСТИНА
			|				И Элементы.ИнициаторРуководитель = ИСТИНА
			|				И Подчиненность.РуководительВышестоящего <> Подчиненность.РуководительПодчиненного
			|			ИЛИ Элементы.ИерархияВышестоящее = ИСТИНА
			|				И Элементы.ИнициаторРуководитель = ЛОЖЬ
			|				И Подчиненность.УровеньВышестоящегоОтПодчиненного = 1
			|			ИЛИ Элементы.ИерархияВышестоящее = ИСТИНА
			|				И Элементы.ИнициаторРуководитель = ИСТИНА
			|				И Элементы.ИнициаторНепосредственныйРуководитель = ИСТИНА
			|				И Подчиненность.УровеньВышестоящегоОтПодчиненного = 1)
			|	И (Элементы.УчастникСотрудник = ИСТИНА
			|				И Элементы.СсылкаСотрудник <> Элементы.Руководитель
			|			ИЛИ Элементы.УчастникРуководитель = ИСТИНА
			|				И Элементы.СсылкаСотрудник = Элементы.Руководитель
			|			ИЛИ Элементы.УчастникРоль = ИСТИНА
			|				И Элементы.УчастникРольЗначение = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)
			|				И Элементы.СсылкаРоль <> ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)
			|			ИЛИ Элементы.УчастникРоль = ИСТИНА
			|				И Элементы.УчастникРольЗначение <> ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)
			|				И Элементы.УчастникРольЗначение = Элементы.СсылкаРоль)
			|	И ЕСТЬNULL(Элементы.Ранг, 0) МЕЖДУ Элементы.УчастникРангС И Элементы.УчастникРангПО
			|	И (Элементы.УчастникКонтейнер = НЕОПРЕДЕЛЕНО
			|			ИЛИ Элементы.УчастникКонтейнер = Элементы.Подразделение
			|			ИЛИ Элементы.УчастникКонтейнер = Элементы.ВидПодразделения
			|			ИЛИ Элементы.УчастникКонтейнер = Элементы.Ссылка
			|			ИЛИ ТИПЗНАЧЕНИЯ(Элементы.УчастникКонтейнер) = ТИП(Справочник.РабочиеГруппы)
			|				И Элементы.УчастникКонтейнер В
			|					(ВЫБРАТЬ
			|						Т.Контейнер КАК Ссылка
			|					ИЗ
			|						РегистрСведений.СотрудникиВКонтейнерах КАК Т
			|					ГДЕ
			|						Т.Сотрудник = Элементы.СсылкаСотрудник
			|						И Элементы.ДоступныйТип В (ТИП(Справочник.Сотрудники), ТИП(Справочник.РолиИсполнителей), ТИП(Справочник.СтруктураПредприятия))))
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	Элементы.Ссылка
			|ИЗ
			|	ПК_Элементы КАК Элементы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК Подчиненность
			|		ПО (Элементы.ИерархияВниз = ИСТИНА)
			|			И Элементы.Подразделение = Подчиненность.Подчиненное
			|			И Элементы.ИнициаторПодразделение = Подчиненность.Вышестоящее
			|			И (Подчиненность.УровеньВышестоящегоОтПодчиненного > 0)
			|ГДЕ
			|	Элементы.ИерархияВниз = ИСТИНА
			|	И (Элементы.ИерархияПодчиненные = ИСТИНА
			|				И Элементы.ИнициаторРуководитель = ЛОЖЬ
			|			ИЛИ Элементы.ИерархияПодчиненные = ИСТИНА
			|				И Элементы.ИнициаторРуководитель = ИСТИНА
			|				И Подчиненность.РуководительВышестоящего <> Подчиненность.РуководительПодчиненного
			|			ИЛИ Элементы.ИерархияПодчиненное = ИСТИНА
			|				И Элементы.ИнициаторРуководитель = ЛОЖЬ
			|				И Подчиненность.УровеньВышестоящегоОтПодчиненного = 1
			|			ИЛИ Элементы.ИерархияПодчиненное = ИСТИНА
			|				И Элементы.ИнициаторРуководитель = ИСТИНА
			|				И Подчиненность.УровеньВышестоящегоОтПодчиненного = 1
			|				И Подчиненность.РуководительВышестоящего <> Подчиненность.РуководительПодчиненного)
			|	И (Элементы.УчастникСотрудник = ИСТИНА
			|				И Элементы.СсылкаСотрудник <> Элементы.Руководитель
			|			ИЛИ Элементы.УчастникРуководитель = ИСТИНА
			|				И Элементы.СсылкаСотрудник = Элементы.Руководитель
			|			ИЛИ Элементы.УчастникРоль = ИСТИНА
			|				И Элементы.УчастникРольЗначение = ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)
			|				И Элементы.СсылкаРоль <> ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)
			|			ИЛИ Элементы.УчастникРоль = ИСТИНА
			|				И Элементы.УчастникРольЗначение <> ЗНАЧЕНИЕ(Справочник.РолиИсполнителей.ПустаяСсылка)
			|				И Элементы.УчастникРольЗначение = Элементы.СсылкаРоль)
			|	И ЕСТЬNULL(Элементы.Ранг, 0) МЕЖДУ Элементы.УчастникРангС И Элементы.УчастникРангПО
			|	И (Элементы.УчастникКонтейнер = НЕОПРЕДЕЛЕНО
			|			ИЛИ Элементы.УчастникКонтейнер = Элементы.Подразделение
			|			ИЛИ Элементы.УчастникКонтейнер = Элементы.ВидПодразделения
			|			ИЛИ Элементы.УчастникКонтейнер = Элементы.Ссылка
			|			ИЛИ ТИПЗНАЧЕНИЯ(Элементы.УчастникКонтейнер) = ТИП(Справочник.РабочиеГруппы)
			|				И Элементы.УчастникКонтейнер В
			|					(ВЫБРАТЬ
			|						Т.Контейнер КАК Ссылка
			|					ИЗ
			|						РегистрСведений.СотрудникиВКонтейнерах КАК Т
			|					ГДЕ
			|						Т.Сотрудник = Элементы.СсылкаСотрудник
			|						И Элементы.ДоступныйТип В (ТИП(Справочник.Сотрудники), ТИП(Справочник.РолиИсполнителей), ТИП(Справочник.СтруктураПредприятия))))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПК_ДоступныеЭлементы.Ссылка ЕСТЬ NULL
			|		И ПК_Правила.Ссылка ЕСТЬ НЕ NULL КАК ЗапретПоПравиламКоммуникаций,
			|	ПК_Правила.Ссылка КАК ПравилоКоммуникаций,
			|	ДанныеВыбора.*
			|	//ТаблицаРезультата
			|ИЗ
			|	ТекущиеДанные КАК ДанныеВыбора
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПК_ДоступныеЭлементы КАК ПК_ДоступныеЭлементы
			|		ПО ДанныеВыбора.Ссылка = ПК_ДоступныеЭлементы.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПК_Правила КАК ПК_Правила
			|		ПО (ИСТИНА)";
		УстановитьПараметрыПодбора(Контекст, Запрос);
		УстановитьПараметрИнициатор(Контекст, Запрос, Текст);
	КонецЕсли;
	
	Если Не ВыводитьРезультатВКолонке Тогда
		Текст = Лев(Текст, СтрНайти(Текст, ";", НаправлениеПоиска.СКонца) - 1);
		
		Если Контекст.Свойство("Правило") Тогда
			Текст = СтрЗаменить(Текст, "ПОМЕСТИТЬ ПК_ДоступныеЭлементы", "//ТаблицаРезультата");
		Иначе
			Текст = Текст + "
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ДанныеВыбора.*
				|//ТаблицаРезультата
				|ИЗ
				|	ТекущиеДанные КАК ДанныеВыбора
				|		ЛЕВОЕ СОЕДИНЕНИЕ ПК_ДоступныеЭлементы КАК ПК_ДоступныеЭлементы
				|		ПО ДанныеВыбора.Ссылка = ПК_ДоступныеЭлементы.Ссылка
				|		ЛЕВОЕ СОЕДИНЕНИЕ ПК_Правила КАК ПК_Правила
				|		ПО (ИСТИНА)
				|ГДЕ
				|	ПК_Правила.Ссылка ЕСТЬ NULL ИЛИ ПК_ДоступныеЭлементы.Ссылка ЕСТЬ НЕ NULL";
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяТаблицыРезультата <> Неопределено Тогда
		Текст = СтрЗаменить(Текст, "//ТаблицаРезультата", "ПОМЕСТИТЬ " + ИмяТаблицыРезультата);
	КонецЕсли;
	
	Если ИмяТаблицыИсходныхДанных <> "ТекущиеДанные" Тогда
		Текст = СтрЗаменить(Текст, "ТекущиеДанные", ИмяТаблицыИсходныхДанных);
	КонецЕсли;
	
	Если ИмяПоляИсходногоОбъекта <> "Ссылка" Тогда
		Текст = СтрЗаменить(Текст, "ДанныеВыбора.Ссылка", "ДанныеВыбора." + ИмяПоляИсходногоОбъекта);
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// Возвращает подходящее по контексту правило. 
//
// Параметры:
//  Контекст - Структура - Критерии отбора правила.
//						   см. ПравилаКоммуникацийКлиентСервер.КонтекстВыбора() и ДополнитьКонтекст().
//	ВсеПодходящие - Булево - Признак получения всех подходящих правил в порядке релевантности.
//
// Возвращаемое значение:
//	СправочникСсылка.ПравилаКоммуникаций,
//	Массив Из СправочникСсылка.ПравилаКоммуникаций - Пододящие правила.
//
Функция ПодобратьПравило(Контекст, ВсеПодходящие = Ложь) Экспорт
	
	Если Контекст.Свойство("Правило") Тогда
		Возврат Контекст.Правило;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапросаПодбораПравила(Контекст, ВсеПодходящие));
	УстановитьПараметрыПодбора(Контекст, Запрос);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ВсеПодходящие Тогда
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;

КонецФункции

// Определяет необходимость применения правил обработки по контексту
// и промежуточные данные для ускорения проверки. 
//
// Параметры:
//	Контекст - Структура - Критерии отбора подходящего правила.
//						   см. ПравилаКоммуникацийКлиентСервер.КонтекстВыбора().
//	ПолучатьПравило - Булево - Сразу получать подходящее правило.
// 
// Возвращаемое значение:
//	Булево - Истина, если есть подходящее правило.
//	ФиксированнаяСтруктура:
//		* Правило - СправочникСсылка.ПравилаКоммуникаций - Правило коммуникаций.
//		* Инициатор - СправочникСсылка.Сотрудники - Инициатор коммуникации.
//
Функция ЕстьПравила(Контекст, ПолучатьПравило = Ложь) Экспорт
	
	Если Не Контекст.Свойство("РежимОтладки")
			И (Не ПолучитьФункциональнуюОпцию("ИспользоватьПравилаКоммуникаций")
				Или Пользователи.ЭтоПолноправныйПользователь()) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДополнитьКонтекст(Контекст);
	
	Если Контекст.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПолучатьПравило Тогда
		Правило = ПодобратьПравило(Контекст);
		
		Если Не ЗначениеЗаполнено(Правило) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Новый ФиксированнаяСтруктура("Правило, Инициатор", Правило, Контекст.Инициатор);
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Производит верификацию заполненных значений контекста для точного поиска правила.
// При необходимости заполняет отсутствующие.
//
// Параметры:
//	Контекст - см. ПравилаКоммуникацийКлиентСервер.КонтекстВыбора
// 
// Возвращаемое значение:
//	Структура Из КлючИЗначение.
//
Функция ДополнитьКонтекст(Контекст) Экспорт
	
	Если Контекст.Свойство("Предметы") Тогда
		
		Если Контекст.Предметы.Количество() = 1 Тогда
			Контекст.Вставить("Ссылка", Контекст.Предметы[0]);
			Контекст.Удалить("Предметы");
		Иначе
			Правила = Новый Соответствие;
			Инициаторы = Новый Массив;
			
			Для Каждого Предмет Из Контекст.Предметы Цикл
			
				НовыйКонтекст = Новый Структура("Ссылка", Предмет);
				Для Каждого Элемент Из Контекст Цикл
					Если Элемент.Ключ <> "Предметы" Тогда
						НовыйКонтекст.Вставить(Элемент.Ключ, Элемент.Значение);
					КонецЕсли;
				КонецЦикла;
				
				Правило = ПодобратьПравило(ДополнитьКонтекст(НовыйКонтекст));
				
				Если ЗначениеЗаполнено(Правило) Тогда
					ИнициаторыПравила = Правила[Правило];
					Если ИнициаторыПравила = Неопределено Тогда 
						Правила.Вставить(Правило, Новый Массив);
						ИнициаторыПравила = Правила[Правило];
					КонецЕсли;
					
					Если ЗначениеЗаполнено(НовыйКонтекст.Инициатор) Тогда
						Если ТипЗнч(НовыйКонтекст.Инициатор) <> Тип("Массив") Тогда
							ИнициаторыПравила.Добавить(НовыйКонтекст.Инициатор);
						Иначе
							ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
								ИнициаторыПравила, НовыйКонтекст.Инициатор, Истина);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НовыйКонтекст.Инициатор) Тогда
					Если ТипЗнч(НовыйКонтекст.Инициатор) <> Тип("Массив") Тогда
						Инициаторы.Добавить(НовыйКонтекст.Инициатор);
					Иначе
						ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
							Инициаторы, НовыйКонтекст.Инициатор, Истина);
					КонецЕсли;
				КонецЕсли;
				
				НовыйКонтекст.Очистить();
			КонецЦикла;
			
			Если Правила.Количество() = 0 Тогда
				Контекст.Очистить();
				Возврат Контекст;
			ИначеЕсли Правила.Количество() = 1 Тогда
				Для Каждого Элемент Из Правила Цикл
					Контекст.Вставить("Правило", Элемент.Ключ);
				КонецЦикла;
			Иначе
				Контекст.Вставить("Правило", Новый ФиксированноеСоответствие(Правила));
			КонецЕсли;
			
			Если Не Контекст.Свойство("Инициатор") Тогда
				Если Инициаторы.Количество() = 1 Тогда
					Контекст.Вставить("Инициатор", Инициаторы[0]);
				Иначе
					Контекст.Вставить("Инициатор", Инициаторы);
				КонецЕсли;
			КонецЕсли;
			Правила.Очистить();
			Контекст.Удалить("Предметы");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Контекст.Свойство("Правило") Тогда
			
		Если Не Контекст.Свойство("Вид") Тогда
			ТекущийТип = ТипЗнч(Контекст.Ссылка);
			
			Если ТекущийТип = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
				Запрос = Новый Запрос(
					"ВЫБРАТЬ
					|	ДокументыПредприятия.ВидДокумента КАК ВидДокумента,
					|	ДокументыПредприятия.Тематика КАК Тематика,
					|	ДокументыПредприятия.Подготовил КАК Подготовил,
					|	ДокументыПредприятия.Создал КАК Создал
					|ИЗ
					|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
					|ГДЕ
					|	ДокументыПредприятия.Ссылка = &Ссылка");
				Запрос.УстановитьПараметр("Ссылка", Контекст.Ссылка);
				
				УстановитьПривилегированныйРежим(Истина);
				Выборка = Запрос.Выполнить().Выбрать();
				УстановитьПривилегированныйРежим(Ложь);
				Выборка.Следующий();
				
				Контекст.Вставить("Вид", Выборка.ВидДокумента);
				Контекст.Вставить("Тематика", Выборка.Тематика);
				Если Не Контекст.Свойство("Инициатор") Тогда
					Контекст.Вставить("Инициатор", ?(ЗначениеЗаполнено(Выборка.Подготовил), Выборка.Подготовил, Выборка.Создал));
				КонецЕсли;
				
			ИначеЕсли ТекущийТип = Тип("ДокументСсылка.Задача")
				Или ТекущийТип = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
					
				Если ТекущийТип = Тип("ДокументСсылка.Задача") Тогда
					Запрос = Новый Запрос(
						"ВЫБРАТЬ ПЕРВЫЕ 1
						|	Задачи.ВидЗадачи КАК ВидЗадачи,
						|	ЗадачаУчастники.ВидУчастника КАК ВидУчастника,
						|	Задачи.Автор КАК Автор,
						|	Задачи.Создал КАК Создал,
						|	ЗадачаУчастники.Участник КАК Исплнитель,
						|	Задачи.Источник КАК Источник,
						|	Действия.Действие КАК ДействиеПОД,
						|	ЗадачаУчастники.ВнешнийИдентификатор КАК ИдентификаторУчастника
						|ИЗ
						|	Документ.Задача.Участники КАК ЗадачаУчастники
						|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Задача КАК Задачи
						|		ПО ЗадачаУчастники.Ссылка = Задачи.Ссылка
						|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцессыДействий КАК Действия
						|		ПО (Задачи.Источник = Действия.Процесс)
						|ГДЕ
						|	ЗадачаУчастники.Ссылка = &Ссылка
						|	И (ЗадачаУчастники.Участник = &ОтКого
						|			ИЛИ &ОтКого = НЕОПРЕДЕЛЕНО)");
				Иначе
					Запрос = Новый Запрос(
						"ВЫБРАТЬ ПЕРВЫЕ 1
						|	Задачи.ВидЗадачи КАК ВидЗадачи,
						|	ДействиеЗадачи.ВидУчастника КАК ВидУчастника,
						|	Задачи.Автор КАК Автор,
						|	Задачи.Создал КАК Создал,
						|	ДействиеЗадачи.Исполнитель КАК Исплнитель,
						|	Задачи.Источник КАК Источник,
						|	Действия.Действие КАК ДействиеПОД,
						|	ЗадачаИсполнителя.ИдентификаторИсполнителя КАК ИдентификаторУчастника
						|ИЗ
						|	Документ.ДействиеЗадачи КАК ДействиеЗадачи
						|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Задача КАК Задачи
						|		ПО ДействиеЗадачи.Задача = Задачи.Ссылка
						|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцессыДействий КАК Действия
						|		ПО (Задачи.Источник = Действия.Процесс)
						|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
						|		ПО ДействиеЗадачи.Источник = ЗадачаИсполнителя.Ссылка
						|ГДЕ
						|	ДействиеЗадачи.Ссылка = &Ссылка");
				КонецЕсли;
				Запрос.УстановитьПараметр("Ссылка", Контекст.Ссылка);
				Если Контекст.Свойство("ОтКого") И ЗначениеЗаполнено(Контекст.ОтКого) Тогда
					Запрос.УстановитьПараметр("ОтКого", Контекст.ОтКого);
				Иначе
					Запрос.УстановитьПараметр("ОтКого", Неопределено);
				КонецЕсли;
				
				УстановитьПривилегированныйРежим(Истина);
				Выборка = Запрос.Выполнить().Выбрать();
				УстановитьПривилегированныйРежим(Ложь);
				Выборка.Следующий();
				
				Если Контекст.Свойство("ОтКого") И Не Контекст.Свойство("Инициатор") Тогда
					Контекст.Вставить("Инициатор", ?(ЗначениеЗаполнено(Контекст.ОтКого), Контекст.ОтКого, Выборка.Исплнитель));
				КонецЕсли;
					
				Если ЗначениеЗаполнено(Выборка.ДействиеПОД) Тогда
					Контекст.Вставить("Владелец", Контекст.Ссылка);
					Контекст.Вставить("Ссылка", Выборка.ДействиеПОД);
					Если ЗначениеЗаполнено(Выборка.ИдентификаторУчастника) Тогда
						Контекст.Вставить("Участник", Выборка.ИдентификаторУчастника);
					ИначеЕсли Контекст.Свойство("ОтКого") И ЗначениеЗаполнено(Контекст.ОтКого) Тогда
						Контекст.Вставить("Участник", Контекст.ОтКого);
					КонецЕсли;
					ДополнитьКонтекст(Контекст);
				Иначе
					Контекст.Вставить("Вид", Выборка.ВидЗадачи);
					Контекст.Вставить("ФункцияУчастника", Выборка.ВидУчастника);
					Если Не Контекст.Свойство("Инициатор") Тогда
						Контекст.Вставить("Инициатор", ?(ЗначениеЗаполнено(Выборка.Автор), Выборка.Автор, Выборка.Создал));
					КонецЕсли;
				КонецЕсли;
			
			ИначеЕсли ТекущийТип = Тип("СправочникСсылка.Мероприятия") Тогда
				Запрос = Новый Запрос(
					"ВЫБРАТЬ
					|	Мероприятия.ВидМероприятия КАК ВидМероприятия,
					|	Мероприятия.Подготовил КАК Подготовил
					|ИЗ
					|	Справочник.Мероприятия КАК Мероприятия
					|ГДЕ
					|	Мероприятия.Ссылка = &Ссылка");
				Запрос.УстановитьПараметр("Ссылка", Контекст.Ссылка);
				
				УстановитьПривилегированныйРежим(Истина);
				Выборка = Запрос.Выполнить().Выбрать();
				УстановитьПривилегированныйРежим(Ложь);
				Выборка.Следующий();
				
				Контекст.Вставить("Вид", Выборка.ВидМероприятия);
				Если Не Контекст.Свойство("Инициатор") Тогда
					Контекст.Вставить("Инициатор", Выборка.Подготовил);
				КонецЕсли;
					
			Иначе //Действия обработки документа.
				Если ТекущийТип = Тип("СправочникСсылка.ДействияСогласования")
					Или ТекущийТип = Тип("СправочникСсылка.ДействияПодписания") Тогда
					Запрос = Новый Запрос(
						"ВЫБРАТЬ РАЗЛИЧНЫЕ
						|	Участники.Ссылка.Предмет.ВидДокумента КАК ВидДокумента,
						|	Участники.Ссылка.Предмет.Тематика КАК Тематика,
						|	Участники.Ссылка.Создал КАК Создал,
						|	Участники.Ссылка.Автор КАК Автор,
						|	Участники.ФункцияУчастника КАК ФункцияУчастника,
						|	NULL КАК Этап
						|ИЗ
						|	Справочник.ДействияСогласования.Участники КАК Участники
						|ГДЕ
						|	Участники.Ссылка = &Ссылка");
				
					Если ТекущийТип <> Тип("СправочникСсылка.ДействияСогласования") Тогда
						Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.ДействияСогласования",
							СтрЗаменить(XMLТип(ТекущийТип).ИмяТипа, "Ref.", "."));
					КонецЕсли;
				
				ИначеЕсли ТекущийТип = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
					Запрос = Новый Запрос(
						"ВЫБРАТЬ РАЗЛИЧНЫЕ
						|	Участники.Ссылка.Предмет.ВидДокумента КАК ВидДокумента,
						|	Участники.Ссылка.Предмет.Тематика КАК Тематика,
						|	Участники.Ссылка.Создал КАК Создал,
						|	Участники.Ссылка.Автор КАК Автор,
						|	ЗНАЧЕНИЕ(Перечисление.ФункцииУчастниковОзнакомления.Ознакомляемый) КАК ФункцияУчастника,
						|	NULL КАК Этап
						|ИЗ
						|	Справочник.ДействияОзнакомления.Участники КАК Участники
						|ГДЕ
						|	Участники.Ссылка = &Ссылка");
					
					Если ТипЗнч(Контекст.Ссылка) <> Тип("СправочникСсылка.ДействияОзнакомления") Тогда
						Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.ДействияОзнакомления",
							СтрЗаменить(XMLТип(ТекущийТип).ИмяТипа, "Ref.", "."));
					КонецЕсли;
					
				Иначе
					Запрос = Новый Запрос(
						"ВЫБРАТЬ РАЗЛИЧНЫЕ
						|	Участники.Ссылка.Предмет.ВидДокумента КАК ВидДокумента,
						|	Участники.Ссылка.Предмет.Тематика КАК Тематика,
						|	Участники.Ссылка.Создал КАК Создал,
						|	Участники.Ссылка.Автор КАК Автор,
						|	Участники.ФункцияУчастника КАК ФункцияУчастника,
						|	NULL КАК Этап
						|ИЗ
						|	Справочник.ДействияИсполнения.Участники КАК Участники
						|ГДЕ
						|	Участники.Ссылка = &Ссылка");
					
					Если ТекущийТип <> Тип("СправочникСсылка.ДействияИсполнения") Тогда
						Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.ДействияИсполнения",
							СтрЗаменить(XMLТип(ТекущийТип).ИмяТипа, "Ref.", "."));
					КонецЕсли;
				КонецЕсли;
				
				Запрос.УстановитьПараметр("Ссылка", Контекст.Ссылка);
				
				Если Не Контекст.Свойство("Участник") Или Не ЗначениеЗаполнено(Контекст.Участник) Тогда
				ИначеЕсли ТипЗнч(Контекст.Участник) = Тип("УникальныйИдентификатор") Тогда
					Запрос.Текст = Запрос.Текст + "
					|	И Участники.Идентификатор = &Участник";
					Запрос.УстановитьПараметр("Участник", Контекст.Участник);
				Иначе
					Запрос.Текст = Запрос.Текст + "
					|	И Участники.Участник = &Участник";
					Запрос.УстановитьПараметр("Участник", Контекст.Участник);
				КонецЕсли;
				
				УстановитьПривилегированныйРежим(Истина);
				Выборка = Запрос.Выполнить().Выбрать();
				УстановитьПривилегированныйРежим(Ложь);
				Выборка.Следующий();
				
				Контекст.Вставить("Вид", Выборка.ВидДокумента);
				Контекст.Вставить("Тематика", Выборка.Тематика);
				Если Не Контекст.Свойство("Инициатор") Тогда
					Контекст.Вставить("Инициатор", ?(ЗначениеЗаполнено(Выборка.Автор), Выборка.Автор, Выборка.Создал));
				КонецЕсли;
				Если ЗначениеЗаполнено(Выборка.Этап) Тогда
					Контекст.Вставить("Этап", Выборка.Этап);
				КонецЕсли;
				Если Выборка.Количество() > 1 Тогда
					Контекст.Вставить("ФункцияУчастника", Выборка.Владелец().Выгрузить().ВыгрузитьКолонку("ФункцияУчастника"));
				Иначе
					Контекст.Вставить("ФункцияУчастника", Выборка.ФункцияУчастника);
				КонецЕсли;
			
			КонецЕсли;
		КонецЕсли;
		
		Если Контекст.Свойство("Ссылка") Тогда
			Если ТипЗнч(Контекст.Ссылка) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
				Контекст.Вставить("Предмет", Перечисления.ПравилаКоммуникацийПредметы.Документ);
			ИначеЕсли ТипЗнч(Контекст.Ссылка) = Тип("ДокументСсылка.Задача")
					Или ТипЗнч(Контекст.Ссылка) = Тип("ДокументСсылка.ДействиеЗадачи")
					Или ТипЗнч(Контекст.Ссылка) = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач") Тогда
				Контекст.Вставить("Предмет", Перечисления.ПравилаКоммуникацийПредметы.Задача);
			ИначеЕсли ТипЗнч(Контекст.Ссылка) = Тип("СправочникСсылка.Мероприятия") Тогда
				Контекст.Вставить("Предмет", Перечисления.ПравилаКоммуникацийПредметы.Мероприятие);
			Иначе
				Контекст.Вставить("Предмет", Перечисления.ПравилаКоммуникацийПредметы.Документ);
			КонецЕсли;
		Иначе
			Контекст.Вставить("Предмет", Перечисления.ПравилаКоммуникацийПредметы.Документ);
		КонецЕсли;
		
		Если Контекст.Свойство("ИмяПоля") И Контекст.ИмяПоля = "Адресат" Тогда
			Контекст.Вставить("Позиция", Перечисления.ПравилаКоммуникацийФункцииУчастников.Адресат);
		ИначеЕсли Контекст.Свойство("ФункцияУчастника") Тогда
			Если Не ЗначениеЗаполнено(Контекст.ФункцияУчастника) Тогда
				Контекст.Вставить("Позиция", Неопределено);
			ИначеЕсли ТипЗнч(Контекст.ФункцияУчастника) = Тип("Массив") Тогда
				М = Новый Массив;
				Для Каждого Элемент Из Контекст.ФункцияУчастника Цикл
					Если Не ЗначениеЗаполнено(Элемент) Тогда
						Продолжить;
					КонецЕсли;
					
					Если XMLСтрока(Элемент) = "ОбрабатывающийРезультат" Тогда
						М.Добавить(Перечисления.ПравилаКоммуникацийФункцииУчастников.ОбрабатывающийРезультат);
					Иначе
						М.Добавить(Элемент);
					КонецЕсли;
				КонецЦикла;
				
				Если М.Количество() = 0 Тогда
					Контекст.Вставить("Позиция", Неопределено);
				ИначеЕсли М.Количество() = 1 Тогда
					Контекст.Вставить("Позиция", М[0]);
					М = Неопределено;
				Иначе
					Контекст.Вставить("Позиция", М);
				КонецЕсли;
			ИначеЕсли XMLСтрока(Контекст.ФункцияУчастника) = "ОбрабатывающийРезультат" Тогда
				Контекст.Вставить("Позиция", Перечисления.ПравилаКоммуникацийФункцииУчастников.ОбрабатывающийРезультат);
			Иначе
				Контекст.Вставить("Позиция", Контекст.ФункцияУчастника);
			КонецЕсли;
			
			Если Контекст.Позиция = Неопределено И Контекст.Свойство("Действие") Тогда
				ТекущийТип = ТипЗнч(Контекст.Действие);
				Если ТекущийТип = Тип("СправочникСсылка.ДействияИсполнения") Тогда
					Контекст.Вставить("Позиция", Перечисления.ФункцииУчастниковИсполнения.Исполнитель);
				ИначеЕсли ТекущийТип = Тип("СправочникСсылка.ДействияСогласования") Тогда
					Контекст.Вставить("Позиция", Перечисления.ФункцииУчастниковСогласования.Согласующий);
				ИначеЕсли ТекущийТип = Тип("СправочникСсылка.ДействияПодписания") Тогда
					Контекст.Вставить("Позиция", Перечисления.ФункцииУчастниковПодписания.Подписывающий);
				ИначеЕсли ТекущийТип = Тип("СправочникСсылка.ДействияУтверждения") Тогда
					Контекст.Вставить("Позиция", Перечисления.ФункцииУчастниковУтверждения.Утверждающий);
				ИначеЕсли ТекущийТип = Тип("СправочникСсылка.ДействияРегистрации") Тогда
					Контекст.Вставить("Позиция", Перечисления.ФункцииУчастниковРегистрации.Регистратор);
				ИначеЕсли ТекущийТип = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
					Контекст.Вставить("Позиция", Перечисления.ФункцииУчастниковОзнакомления.Ознакомляемый);
				КонецЕсли;
			КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	Если Не Контекст.Свойство("Инициатор") Или Не ЗначениеЗаполнено(Контекст.Инициатор) Тогда
		Контекст.Вставить("Инициатор", СотрудникиПовтИсп.ВсеСотрудникиТекущегоПользователя());
	ИначеЕсли ТипЗнч(Контекст.Инициатор) = Тип("СправочникСсылка.Пользователи") Тогда
		Контекст.Инициатор = Сотрудники.СотрудникиПользователя(Контекст.Инициатор);
	ИначеЕсли ТипЗнч(Контекст.Инициатор) = Тип("СправочникСсылка.ПолныеРоли") Тогда
		Контекст.Инициатор = РегистрыСведений.ИсполнителиРолей.ИсполнителиРоли(Контекст.Инициатор, Истина);
		
		Если Контекст.Инициатор.Количество() = 0 Тогда
			Контекст.Инициатор = Справочники.Сотрудники.ПустаяСсылка();
		ИначеЕсли Контекст.Инициатор.Количество() = 1 Тогда
			Контекст.Инициатор = Контекст.Инициатор[0];
		КонецЕсли;
	Иначе
		Контекст.Инициатор = СотрудникиПовтИсп.ВсеСотрудникиТекущегоПользователя();
	КонецЕсли;
	
	Возврат Контекст;
	
КонецФункции

// Настраивает поля ввода участников исходного объекта для работы с правилами коммуникаций.
// 
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма исходного объекта.
//	ПоляУчастников - Строка, ПолеВвода - Поля для ввода участников.
//
Процедура НастроитьПоляПредмета(Форма, ПоляУчастников) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПравилаКоммуникаций") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПоляУчастников) = Тип("Строка") Тогда
		Для Каждого Имя Из СтрРазделить(ПоляУчастников, ",", Ложь) Цикл
			Элемент = Форма.Элементы[СокрЛП(Имя)];
			Если Элемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.Авто Тогда
				Элемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ПоляУчастников.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.Авто Тогда
			ПоляУчастников.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Настраивает поле ввода для выбора позиции в формах правил.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма ввода правил.
//
Процедура НастроитьПолеПозиции(Форма) Экспорт
	
	Поле = Форма.Элементы.Позиция;
	Список = Поле.СписокВыбора;
	Список.Очистить();
	
	ВыбранныеВиды = Новый Массив;
	Если ТипЗнч(Форма.Вид) = Тип("СписокЗначений") Тогда
		ВыбранныеВиды = Форма.Вид.ВыгрузитьЗначения();
	ИначеЕсли ЗначениеЗаполнено(Форма.Вид) Тогда
		ВыбранныеВиды.Добавить(Форма.Вид);
	КонецЕсли;
	
	ОтображатьФункцииДокументов = Истина;
	ОтображатьФункцииМероприятий = Истина;
	ОтображатьФункцииЗадач = Истина;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(МАКСИМУМ(Таблица.ОтображатьФункцииДокументов), ИСТИНА) КАК ОтображатьФункцииДокументов,
		|	ЕСТЬNULL(МАКСИМУМ(Таблица.ОтображатьФункцииМероприятий), ИСТИНА) КАК ОтображатьФункцииМероприятий,
		|	ЕСТЬNULL(МАКСИМУМ(Таблица.ФункцииЗадач), ИСТИНА) КАК ОтображатьФункцииЗадач
		|ИЗ
		|	(ВЫБРАТЬ ИСТИНА КАК ОтображатьФункцииДокументов, ЛОЖЬ КАК ОтображатьФункцииМероприятий, ЛОЖЬ КАК ФункцииЗадач
		|	ИЗ Справочник.ВидыДокументов КАК ВидыДокументов
		|	ГДЕ &Предмет = ЗНАЧЕНИЕ(Перечисление.ПравилаКоммуникацийПредметы.Документ)
		|			ИЛИ ВидыДокументов.Ссылка В(&ВыбранныеВиды)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ ИСТИНА, ЛОЖЬ, ЛОЖЬ
		|	ИЗ Справочник.ТематикиДокументов КАК ТематикиДокументов
		|	ГДЕ &Предмет = ЗНАЧЕНИЕ(Перечисление.ПравилаКоммуникацийПредметы.Документ)
		|			ИЛИ ТематикиДокументов.Ссылка В(&ВыбранныеВиды)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ ЛОЖЬ, ИСТИНА, ЛОЖЬ
		|	ИЗ Справочник.ВидыМероприятий КАК ВидыМероприятий
		|	ГДЕ &Предмет = ЗНАЧЕНИЕ(Перечисление.ПравилаКоммуникацийПредметы.Мероприятие)
		|			ИЛИ ВидыМероприятий.Ссылка В(&ВыбранныеВиды)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ ЛОЖЬ, ЛОЖЬ, ИСТИНА
		|	ИЗ Справочник.ВидыЗадач КАК ВидыЗадач
		|	ГДЕ &Предмет = ЗНАЧЕНИЕ(Перечисление.ПравилаКоммуникацийПредметы.Задача)
		|			ИЛИ ВидыЗадач.Ссылка В(&ВыбранныеВиды)) КАК Таблица");
	Запрос.УстановитьПараметр("Предмет", Форма.Предмет); 
	Запрос.УстановитьПараметр("ВыбранныеВиды", ВыбранныеВиды);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОтображатьФункцииДокументов = Выборка.ОтображатьФункцииДокументов;
		ОтображатьФункцииМероприятий = Выборка.ОтображатьФункцииМероприятий;
		ОтображатьФункцииЗадач = Выборка.ОтображатьФункцииЗадач;
	КонецЕсли;
	
	ОтображатьПринадлежностьФункции =
		ОтображатьФункцииДокументов И ОтображатьФункцииМероприятий И ОтображатьФункцииЗадач;
		
	Если ОтображатьФункцииДокументов Или ОтображатьФункцииМероприятий Тогда
		
		ФункцииУчастников = Новый Массив;
		ФункцииУчастников.Добавить("ФункцииУчастниковИсполнения");
		ФункцииУчастников.Добавить("ФункцииУчастниковОзнакомления");
		ФункцииУчастников.Добавить("ФункцииУчастниковПодписания");
		ФункцииУчастников.Добавить("ФункцииУчастниковРегистрации");
		ФункцииУчастников.Добавить("ФункцииУчастниковСогласования");
		ФункцииУчастников.Добавить("ФункцииУчастниковУтверждения");
		
		Исключения = Новый Массив;
		Исключения.Добавить(НСтр("ru = 'ОбрабатывающийРезультат'"));
		Исключения.Добавить(НСтр("ru = 'АвтоопределениеФункцииУчастника'"));
		Исключения.Добавить(НСтр("ru = 'Помощник'"));
				
		Для Каждого ИмяКоллекции Из ФункцииУчастников Цикл
			Для Каждого Элемент Из Перечисления[ИмяКоллекции].ПолучитьДанныеВыбора(Новый Структура()) Цикл
				Ссылка = Элемент.Значение.Значение;
				Если Исключения.Найти(XMLСтрока(Ссылка)) = Неопределено Тогда
					Список.Добавить(
						Ссылка,
						Элемент.Представление + ?(ОтображатьПринадлежностьФункции, Нстр("ru = ' (Обработка предмета)'"), ""));
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если ОтображатьФункцииДокументов Тогда
			ФункцияУчастника = ПредопределенноеЗначение("Перечисление.ПравилаКоммуникацийФункцииУчастников.Адресат");
			Список.Добавить(
				ФункцияУчастника,
				Строка(ФункцияУчастника) + ?(ОтображатьПринадлежностьФункции, Нстр("ru = ' (Предмет)'"), ""));
		КонецЕсли;
			
		ФункцияУчастника = ПредопределенноеЗначение("Перечисление.ПравилаКоммуникацийФункцииУчастников.ОбрабатывающийРезультат");
		Список.Добавить(
			ФункцияУчастника,
			Строка(ФункцияУчастника) + ?(ОтображатьПринадлежностьФункции, Нстр("ru = ' (Обработка предмета)'"), ""));
		
	КонецЕсли;
	
	Если ОтображатьФункцииЗадач Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВидыЗадач.ВидУчастникаИсполнитель КАК Участник,
			|	ПРЕДСТАВЛЕНИЕ(ВидыЗадач.ВидУчастникаИсполнитель) КАК ПредставлениеУчастника
			|ИЗ
			|	Справочник.ВидыЗадач КАК ВидыЗадач
			|ГДЕ
			|	(ВидыЗадач.ДоступенДляВыбора
			|		ИЛИ ВидыЗадач.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыЗадач.Вопрос))
			|	И (&ОтборПоВиду = ЛОЖЬ
			|			ИЛИ ВидыЗадач.Ссылка В (&ВыбранныеВиды))
			|	И НЕ ВидыЗадач.ВидУчастникаИсполнитель = ЗНАЧЕНИЕ(Справочник.ВидыУчастниковЗадач.ПустаяСсылка)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ВидыЗадач.ВидУчастникаПроверяющий,
			|	ПРЕДСТАВЛЕНИЕ(ВидыЗадач.ВидУчастникаПроверяющий)
			|ИЗ
			|	Справочник.ВидыЗадач КАК ВидыЗадач
			|ГДЕ
			|	ВидыЗадач.ДоступенДляВыбора
			|	И (&ОтборПоВиду = ЛОЖЬ
			|			ИЛИ ВидыЗадач.Ссылка В (&ВыбранныеВиды))
			|	И НЕ ВидыЗадач.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыЗадач.Вопрос)
			|	И НЕ ВидыЗадач.ВидУчастникаПроверяющий = ЗНАЧЕНИЕ(Справочник.ВидыУчастниковЗадач.ПустаяСсылка)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВидыЗадач.ВидУчастникаИсполнитель");
		Запрос.УстановитьПараметр("ВыбранныеВиды", ВыбранныеВиды);
		Запрос.УстановитьПараметр("ОтборПоВиду", ВыбранныеВиды.Количество() > 0);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Список.Добавить(
				Выборка.Участник,
				Выборка.ПредставлениеУчастника + ?(ОтображатьПринадлежностьФункции, Нстр("ru = ' (Задача)'"), ""));
		КонецЦикла;
		
	КонецЕсли;
	
	Типы = Новый Массив;
	Для Каждого Элемент Из Список Цикл
		Если Типы.Найти(ТипЗнч(Элемент.Значение)) = Неопределено Тогда
			Типы.Добавить(ТипЗнч(Элемент.Значение));
		КонецЕсли;
	КонецЦикла;
	
	Список.СортироватьПоПредставлению();
	
	Поле.ДоступныеТипы = Новый ОписаниеТипов(Типы);
	
	Если ТипЗнч(Форма.Позиция) = Тип("СписокЗначений") Тогда
		Индекс = Форма.Позиция.Количество();
		Пока Индекс > 0 Цикл
			Индекс = Индекс - 1;
			Если Поле.СписокВыбора.НайтиПоЗначению(Форма.Позиция[Индекс].Значение) = Неопределено Тогда
				Форма.Позиция.Удалить(Индекс);
			КонецЕсли;
		КонецЦикла;
		
		Если Форма.Позиция.Количество() = 0 Тогда
			Форма.Позиция = Перечисления.ПравилаКоммуникацийПредметы.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли Поле.СписокВыбора.НайтиПоЗначению(Форма.Позиция) = Неопределено Тогда
		Форма.Позиция = Перечисления.ПравилаКоммуникацийПредметы.ПустаяСсылка();
	КонецЕсли;
	
	Если Поле.СписокВыбора.Количество() Тогда
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Ссылка", Поле.СписокВыбора.ВыгрузитьЗначения());
		Поле.ПараметрыВыбора =
			Новый ФиксированныйМассив(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрВыбора));
	Иначе
		Поле.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список видов задач, поддерживаемых правилами коммуникаций.
//
// Параметры:
//	Предмет - ПеречислениеСсылка.ПравилаКоммуникацийПредметы - Предмет, к которому могут быть применены правила.
//
// Возвращаемое значение:
//	Массив Из СправочникСсылка.ВидыЗадач.
//
Функция ПоддерживаемыеВидыПредметов(Предмет = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыДокументов.Ссылка КАК ВидПредмета
		|ИЗ
		|	Справочник.ВидыДокументов КАК ВидыДокументов
		|ГДЕ
		|	(&Предмет В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Перечисление.ПравилаКоммуникацийПредметы.ПустаяСсылка))
		|			ИЛИ &Предмет = ЗНАЧЕНИЕ(Перечисление.ПравилаКоммуникацийПредметы.Документ))
		|	И НЕ ВидыДокументов.ЭтоГруппа
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВидыМероприятий.Ссылка
		|ИЗ
		|	Справочник.ВидыМероприятий КАК ВидыМероприятий
		|ГДЕ
		|	(&Предмет В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Перечисление.ПравилаКоммуникацийПредметы.ПустаяСсылка))
		|			ИЛИ &Предмет = ЗНАЧЕНИЕ(Перечисление.ПравилаКоммуникацийПредметы.Мероприятие))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТематикиДокументов.Ссылка
		|ИЗ
		|	Справочник.ТематикиДокументов КАК ТематикиДокументов
		|ГДЕ
		|	(&Предмет В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Перечисление.ПравилаКоммуникацийПредметы.ПустаяСсылка))
		|			ИЛИ &Предмет = ЗНАЧЕНИЕ(Перечисление.ПравилаКоммуникацийПредметы.Документ))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВидыЗадач.Ссылка
		|ИЗ
		|	Справочник.ВидыЗадач КАК ВидыЗадач
		|ГДЕ
		|	(&Предмет В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Перечисление.ПравилаКоммуникацийПредметы.ПустаяСсылка))
		|			ИЛИ &Предмет = ЗНАЧЕНИЕ(Перечисление.ПравилаКоммуникацийПредметы.Задача))
		|	И (ВидыЗадач.ДоступенДляВыбора
		|			ИЛИ ВидыЗадач.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыЗадач.Вопрос))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидПредмета
		|АВТОУПОРЯДОЧИВАНИЕ");
	Запрос.УстановитьПараметр("Предмет", Предмет);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ВидПредмета");
	
КонецФункции

// Удаляет временные таблицы правил коммуникаций.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц, из которого нужно удалить таблицы.
//	ДополнительныеТаблицы - Строка, Массив Из Строка - Список имен таблиц, разделенных запятыми,
//													   которые удалить нужно вместе с таблицами правил.
//
Процедура УдалитьВременныеТаблицы(МенеджерВременныхТаблиц, ДополнительныеТаблицы = Неопределено) Экспорт
	
	ТекстЗапроса = Новый Массив;
	
	УдаляемыеТаблицы = ДополнительныеТаблицы;
	Если ТипЗнч(ДополнительныеТаблицы) = Тип("Строка") Тогда
		УдаляемыеТаблицы =
			СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДополнительныеТаблицы, ",", Истина, Истина);
	КонецЕсли;
	
	Для Каждого Таблица Из МенеджерВременныхТаблиц.Таблицы Цикл
		Если СтрНачинаетсяС(Таблица.ПолноеИмя, "ПК_") Тогда
			ТекстЗапроса.Добавить(СтрШаблон("УНИЧТОЖИТЬ %1", Таблица.ПолноеИмя));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Таблица Из УдаляемыеТаблицы Цикл
		Если МенеджерВременныхТаблиц.Таблицы.Найти(Таблица) <> Неопределено Тогда
			ТекстЗапроса.Добавить(СтрШаблон("УНИЧТОЖИТЬ %1", Таблица));
		КонецЕсли;
	КонецЦикла;
	
	Если ТекстЗапроса.Количество() > 0 Тогда
		Запрос = Новый Запрос(СтрСоединить(ТекстЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов()));
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
	КонецЕсли;
	
КонецПроцедуры

// Формирует структуру из всех полей для подбора правила, со значениями по умолчанию. 
// 
// Возвращаемое значение:
//	Структура:
//		* Предмет - ПеречислениеСсылка.ПравилаКоммуникацийПредметы.
//		* Вид - Неопределено.
//		* Позиция - Неопределено.
//		* Этап - Строка.
//
Функция ПоляНазначения() Экспорт
	
	ПоляНазначения = Новый Структура;
	ПоляНазначения.Вставить("Предмет", Перечисления.ПравилаКоммуникацийПредметы.ПустаяСсылка());
	ПоляНазначения.Вставить("Вид", Неопределено);
	ПоляНазначения.Вставить("Позиция", Неопределено);
	ПоляНазначения.Вставить("Этап", "");
	
	Возврат ПоляНазначения;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует текст запроса для подбора подходящего правила.
//
// Параметры:
//	Контекст - Структура - Контекст правил коммуникаций.
//	ВсеПодходящие - Булево - Признак того, что нужно получать все подходящие под условия правила.
//
// Возвращаемое значение:
//	Строка - Текст запроса.
//
Функция ТекстЗапросаПодбораПравила(Контекст, ВсеПодходящие = Ложь)
	
	Если Контекст.Свойство("Правило") Тогда
		Возврат
			"ВЫБРАТЬ
			|	Правила.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ПравилаКоммуникаций КАК Правила
			|ГДЕ
			|	Правила.Ссылка = &ПК_Правило";
	ИначеЕсли ВсеПодходящие Тогда
		Возврат
			"ВЫБРАТЬ
			|	Назначение.Ссылка КАК Ссылка,
			|	МАКСИМУМ(Назначение.Релевантность) КАК Релевантность
			|ИЗ
			|	Справочник.ПравилаКоммуникаций.Назначение КАК Назначение
			|ГДЕ
			|	Назначение.Ключ В (&ПК_Ключ)
			|	И Назначение.Позиция В (&ПК_Позиция)
			|	И Назначение.Этап В (&ПК_Этап)
			|
			|СГРУППИРОВАТЬ ПО
			|	Назначение.Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	Релевантность УБЫВ";
	Иначе
		Возврат
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Назначение.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.ПравилаКоммуникаций.Назначение КАК Назначение
			|ГДЕ
			|	Назначение.Ключ В(&ПК_Ключ)
			|	И Назначение.Позиция В(&ПК_Позиция)
			|	И Назначение.Этап В(&ПК_Этап)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Назначение.Релевантность УБЫВ";
	КонецЕсли;
	
КонецФункции

// Устанавливает параметры запроса для подбора правила.
//
// Параметры:
//	Контекст - Структура - контекст применения правила.
//	Запрос - Запрос - исходный запрос.
//
Процедура УстановитьПараметрыПодбора(Контекст, Запрос)
	
	Если Контекст.Свойство("Правило") Тогда
		Запрос.УстановитьПараметр("ПК_Правило", Контекст.Правило);
	Иначе		
		Ключи = Новый Массив;
		Ключи.Добавить(Перечисления.ПравилаКоммуникацийПредметы.ПустаяСсылка());
		Ключи.Добавить(Контекст.Предмет);
		Если ЗначениеЗаполнено(Контекст.Вид) Тогда
			Ключи.Добавить(Контекст.Вид);
		КонецЕсли;
		Если Контекст.Свойство("Тематика") Тогда
			Ключи.Добавить(Контекст.Тематика);
		КонецЕсли;
		Запрос.УстановитьПараметр("ПК_Ключ", Ключи);
		
		Для Каждого Поле Из ПоляНазначения() Цикл
			Если Поле.Ключ = "Предмет" Или Поле.Ключ = "Вид" Тогда
				Продолжить;
			КонецЕсли;
			М = Новый Массив;
			М.Добавить(Поле.Значение);
			Если Контекст.Свойство(Поле.Ключ) И ЗначениеЗаполнено(Контекст[Поле.Ключ]) Тогда
				Если ТипЗнч(Контекст[Поле.Ключ]) = Тип("Массив") Тогда
					Для Каждого Эл Из Контекст[Поле.Ключ] Цикл
						М.Добавить(Эл);
					КонецЦикла;
				Иначе
					М.Добавить(Контекст[Поле.Ключ]);
				КонецЕсли;
			КонецЕсли;
			Запрос.УстановитьПараметр("ПК_" + Поле.Ключ, М);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Устанавливает параметр отбора по инициатору.
//
// Параметры:
//	Контекст - Структура - Контекст правила.
//	Запрос - Запрос - Запрос.
//	ИсходныйТекст - Строка - Исходный текст запроса.
//
Процедура УстановитьПараметрИнициатор(Контекст, Запрос, ИсходныйТекст = Неопределено)
	
	Если ТипЗнч(Контекст.Инициатор) = Тип("Массив") Тогда
		Если Контекст.Инициатор.Количество() = 1 Тогда
			Запрос.УстановитьПараметр("ПК_Инициатор", Контекст.Инициатор[0]);
		Иначе
			Запрос.УстановитьПараметр("ПК_Инициатор", Контекст.Инициатор);
			Если ИсходныйТекст = Неопределено Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "= &ПК_Инициатор", "В(&ПК_Инициатор)");
			Иначе
				ИсходныйТекст = СтрЗаменить(ИсходныйТекст, "= &ПК_Инициатор", "В(&ПК_Инициатор)");
			КонецЕсли;
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("ПК_Инициатор", Контекст.Инициатор);
	КонецЕсли;

КонецПроцедуры

// Возвращает описание типов объектов, которые могут быть проверены на соответствие правилам коммуникаций.
//
// Возвращаемое значение:
//	ОписаниеТипов - Типы объектов, которые могут быть проверены правилами коммуникаций.
//
Функция ОписаниеТиповПроверяемыхОбъектов()
	
	Возврат Новый ОписаниеТипов(
		"СправочникСсылка.Сотрудники,
		|СправочникСсылка.РолиИсполнителей,
		|СправочникСсылка.СтруктураПредприятия,
		|СправочникСсылка.РабочиеГруппы")
	
КонецФункции

#КонецОбласти

#КонецЕсли