#Область ОписаниеПеременных

&НаКлиенте
Перем РежимДобавленияИсполнителя;

&НаКлиенте
Перем ПолноеИмяПеретаскиваемогоФайла;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьДатуИВремяВСрокахЗадач =
		ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			
			РеквизитыШаблонаЗадачи =
				ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					Параметры.ЗначениеКопирования,
					"ОписаниеФорматированное");
			
			ОписаниеФорматированное =
				РеквизитыШаблонаЗадачи.ОписаниеФорматированное.Получить();
			
		ИначеЕсли Параметры.Свойство("Основание")
			И ЗначениеЗаполнено(Параметры.Основание) Тогда
			
			РеквизитыЗадачи =
				ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					Параметры.Основание,
					"ОписаниеФорматированное");
			
			ОписаниеФорматированное =
				РеквизитыЗадачи.ОписаниеФорматированное.Получить();
			
		КонецЕсли;
		
		ОбновитьФормуПоДаннымОбъекта();
		
	КонецЕсли;
	
	Элементы.ГруппаДоступ.Заголовок = "";
	
	ЗаполнитьСписокВыбораТрудоемкостьСтрокой();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ПротоколированиеРаботыСотрудников.ЗаписатьОткрытие(Объект.Ссылка);
	
	НастроитьПолеСоздал();
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ОписаниеФорматированное = ТекущийОбъект.ОписаниеФорматированное.Получить();
	
	ОбновитьФормуПоДаннымОбъекта();
	
	ПраваПользователяПоОбъекту =
		ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(ТекущийОбъект.Ссылка);
	ТолькоПросмотр = Не ПраваПользователяПоОбъекту.Изменение;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// В заголовке форма временно хранит представление шаблона - очистим его.
	Если ЗначениеЗаполнено(ТекущийОбъект.ШаблонЗаголовка) Тогда
		ТекущийОбъект.Заголовок = "";
	КонецЕсли;
	
	// В описании форме времено хранит представление шаблона - очистим его.
	Если ЗначениеЗаполнено(ТекущийОбъект.ШаблонОписания) Тогда
		ОписаниеФорматированное.Удалить();
	КонецЕсли;
	
	// Описание форматированное хранится на форме в форматированном документе,
	// а в объекте в хранилище значени - перенесём его.
	ТекущийОбъект.ОписаниеФорматированное = Новый ХранилищеЗначения(ОписаниеФорматированное);
	
	// В участниках форме временно хранит пустую строку для удобного ввода - очистим её.
	ОбщегоНазначенияДокументооборотКлиентСервер.УдалитьПустыеСтрокиТаблицы(
		ТекущийОбъект.Участники,
		"Участник");
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьФормуПоДаннымОбъекта();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъекта(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если (ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены")
		Или ИмяСобытия = "ФайлИзменен" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("Владелец")
			И Параметр.Свойство("Файл")
			И ЗначениеЗаполнено(Параметр.Владелец)  Тогда
			ВладелецФайла = Параметр.Владелец;
			ФайлСсылка = Параметр.Файл; 
		Иначе	
			ВладелецФайла = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Источник, "ВладелецФайла");
			ФайлСсылка = Источник; 
		КонецЕсли;	
		
		Если ВладелецФайла = Объект.Ссылка Тогда
			
			ОбновитьСтрокуПриложения(ФайлСсылка);
			
			УстановитьДоступностьКомандПриложений();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИмпортФайловЗавершен" И ТипЗнч(Источник) = Тип("Структура")
		И Источник.ВладелецФайлов = Объект.Ссылка Тогда
		
		ДобавитьМассивФайлов(Источник.МассивСсылокФайлов);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидЗадачиПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.ВидЗадачи) Тогда
		Объект.ВидЗадачи = ПредопределенноеЗначение("Справочник.ВидыЗадач.Поручение");
	КонецЕсли;
	
	ВидЗадачиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриоритетПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Приоритет) Тогда
		Объект.Приоритет = ПредопределенноеЗначение("Справочник.ПриоритетыЗадач.Обычный");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПриИзменении(Элемент)
	
	ДопПараметры = СрокиИсполненияПроцессовКлиент.ДопПараметрыДляИзмененияСрокаПоПредставлению();
	ДопПараметры.Форма = ЭтотОбъект;
	ДопПараметры.Поле = "СрокПредставление";
	ДопПараметры.НаименованиеИзмененногоРеквизита = "Срок";
	ДопПараметры.Исполнитель = СотрудникиКлиент.ОсновнойСотрудник();
	
	СрокиИсполненияПроцессовКлиент.ИзменитьСрокИсполненияУчастникаПроцессаПоПредставлению(
		Объект.Срок,
		Объект.СрокДни,
		Объект.СрокЧасы,
		Объект.СрокМинуты,
		Объект.СрокВариантУстановки,
		СрокПредставление,
		ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ПараметрыВыбораСрока = СрокиИсполненияПроцессовКлиент.ПараметрыВыбораСрокаУчастникаПроцесса();
	ПараметрыВыбораСрока.Форма = ЭтотОбъект;
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполнения = "Срок";
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполненияДни = "СрокДни";
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполненияЧасы = "СрокЧасы";
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполненияМинуты = "СрокМинуты";
	ПараметрыВыбораСрока.ИмяРеквизитаВариантУстановкиСрока = "СрокВариантУстановки";
	ПараметрыВыбораСрока.ИмяРеквизитаПредставлениеСрока = "СрокПредставление";
	ПараметрыВыбораСрока.ИмяОбъектаФормы = "Объект";
	ПараметрыВыбораСрока.НаименованиеСрокаУчастника = "Срок";
	ПараметрыВыбораСрока.Участник = СотрудникиКлиент.ОсновнойСотрудник();
	
	СрокиИсполненияПроцессовКлиент.ВыбратьСрокУчастникаПроцесса(ПараметрыВыбораСрока);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СрокиИсполненияПроцессовКлиент.ИзменитьОтносительныйСрокУчастникаПроцесса(
		ЭтотОбъект,
		Объект.Срок,
		Объект.СрокДни,
		Объект.СрокЧасы,
		Объект.СрокМинуты,
		СрокПредставление,
		Объект.СрокВариантУстановки,
		Направление,
		"Срок");
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудоемкостьСтрокойПриИзменении(Элемент)
	
	ОтДо = СтрРазделить(Объект.Челчасов, "-", Ложь);
	Если ОтДо.Количество() <> 2 Тогда
		Объект.Челчасов = "";
		Возврат;
	КонецЕсли;
	
	Объект.ТрудоемкостьОт = Число(ОтДо[0]);
	Объект.ТрудоемкостьДо = Число(ОтДо[1]);
	Объект.Челчасов = Строка(Объект.ТрудоемкостьОт) + "-" + Строка(Объект.ТрудоемкостьДо);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторПриИзменении(Элемент)
	
	Если Объект.Автор = Неопределено Тогда
		Объект.Автор = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвторАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекстПоиска = СокрЛП(Текст);
	Если Не ЗначениеЗаполнено(ТекстПоиска) Или СтрДлина(ТекстПоиска) < 2 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнениеТипа = Новый ОписаниеТипов(
		"СправочникСсылка.АвтоподстановкиДляОбъектов,
		|СправочникСсылка.Сотрудники,
		|СправочникСсылка.ПроектыКонтейнеры, 
		|СправочникСсылка.РабочиеГруппы,
		|СправочникСсылка.ПодразделенияКонтейнеры");
	
	ТипОбъекта = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.Задача");
	
	ДанныеВыбора = СотрудникиВызовСервера.СформироватьДанныеВыбора(
		ТекстПоиска,
		ДополнениеТипа,
		ТипОбъекта);
	
	Если ЗначениеЗаполнено(ДанныеВыбора) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвторОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Если значение требует уточнения, будет вызвана форма для ввода уточняющих данных.
	// Обработка выбора не должна выполняться в этом случае.
	ТипыДляУточнения = Новый Массив;
	ТипыДляУточнения.Добавить(Тип("Структура"));
	ТипыДляУточнения.Добавить(Тип("СправочникСсылка.РолиИсполнителей"));
	ТипыДляУточнения.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	ТипыДляУточнения.Добавить(Тип("СправочникСсылка.Проекты"));
	Если ТипыДляУточнения.Найти(ТипЗнч(ВыбранноеЗначение)) <> Неопределено Тогда
		СотрудникиКлиент.ОбработкаВыбораКонтейнера(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
		// Повторная проверка (значение могло быть изменено).
		Если ТипыДляУточнения.Найти(ТипЗнч(ВыбранноеЗначение)) <> Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Объект.Автор = ВыбранноеЗначение;
	Иначе
		Объект.Автор = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка")
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвторНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ВыбиратьКонтейнерыПользователей", Истина);
	ПараметрыФормы.Вставить("ПодменятьПользователейСотрудниками", Истина);
	ПараметрыФормы.Вставить("ОтображатьАвтоподстановкиПоЗадачам", Истина);
	
	Если ЗначениеЗаполнено(Объект.Автор) Тогда
		ПараметрыФормы.Вставить("ВыбранныеАдресаты", Объект.Автор);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор автора'"));
	
	ОткрытьФорму("Справочник.АдреснаяКнига.Форма.ФормаСписка",
		ПараметрыФормы, 
		Элемент,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекстПоиска = СокрЛП(Текст);
	Если Не ЗначениеЗаполнено(ТекстПоиска) Или СтрДлина(ТекстПоиска) < 2 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнениеТипа = Новый ОписаниеТипов(
		"СправочникСсылка.АвтоподстановкиДляОбъектов,
		|СправочникСсылка.Сотрудники,
		|СправочникСсылка.ПроектыКонтейнеры, 
		|СправочникСсылка.РабочиеГруппы,
		|СправочникСсылка.ПодразделенияКонтейнеры");
	
	ТипОбъекта = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.Задача");
	
	ДанныеВыбора = СотрудникиВызовСервера.СформироватьДанныеВыбора(
		ТекстПоиска,
		ДополнениеТипа,
		ТипОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.Заголовок = "";
	Объект.ШаблонЗаголовка =
		ПредопределенноеЗначение("Справочник.АвтоподстановкиДляОбъектов.ПустаяСсылка");
	
	ОбновитьФормуПоДаннымОбъекта();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить(
		"ТипОбъекта",
		ПредопределенноеЗначение("Перечисление.ТипыОбъектов.Задача"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаголовокПослеВыбора", ЭтотОбъект);
	
	ОткрытьФорму(
		"Справочник.АвтоподстановкиДляОбъектов.ФормаВыбора", 
		ПараметрыФормы,,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеФорматированноеВыборНажатие(Элемент)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить(
		"ТипОбъекта",
		ПредопределенноеЗначение("Перечисление.ТипыОбъектов.Задача"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОписаниеПослеВыбора", ЭтотОбъект);
	
	ОткрытьФорму(
		"Справочник.АвтоподстановкиДляОбъектов.ФормаВыбора", 
		ПараметрыФормы,,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеФорматированноеОчиститьНажатие(Элемент)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Объект.ШаблонОписания =
		ПредопределенноеЗначение("Справочник.АвтоподстановкиДляОбъектов.ПустаяСсылка");
	ОписаниеФорматированное.Удалить();
	
	ОбновитьФормуПоДаннымОбъекта();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоступ

&НаКлиенте
Процедура ДоступПриИзменении(Элемент)
	
	ОбновитьЗаголовокДоступ();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Для Каждого Значение Из ВыбранноеЗначение Цикл
		ОтборСтроки = Новый Структура("Участник", Значение);
		Если Объект.Доступ.НайтиСтроки(ОтборСтроки).Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		Строка = Объект.Доступ.Добавить();
		Строка.Участник = Значение;
		ЗаполнитьИконку(Строка);
	КонецЦикла;
	
	КоличествоЭлементов = Объект.Доступ.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ОбратныйИндекс = КоличествоЭлементов - Индекс;
		Строка = Объект.Доступ[ОбратныйИндекс];
		
		Если ВыбранноеЗначение.Найти(Строка.Участник) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Объект.Доступ.Удалить(ОбратныйИндекс);
		
	КонецЦикла;
	
	Объект.Доступ.Сортировать("Иконка, Участник");
	
	ОбновитьЗаголовокДоступ();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ЗаполнитьИконку(Элемент.ТекущиеДанные);
	Объект.Доступ.Сортировать("Иконка, Участник");
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не НоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.ТекущиеДанные.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	ЗаполнитьИконку(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		
		СтандартнаяОбработка = Ложь;
		
		ДополнениеТипа = Новый ОписаниеТипов(
			"СправочникСсылка.ПолныеРоли, СправочникСсылка.РабочиеГруппы,
			|СправочникСсылка.СтруктураПредприятия, СправочникСсылка.Проекты");
		
		ДанныеВыбора = СотрудникиВызовСервера.СформироватьДанныеВыбора(
			Текст,
			ДополнениеТипа);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступУчастникОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, ВыборДобавлением, СтандартнаяОбработка)
	
	СотрудникиКлиент.ОбработкаВыбораКонтейнера(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступУчастникНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка= Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ОтображатьРоли", Истина);
	ПараметрыФормы.Вставить("ПодменятьПользователейСотрудниками", Истина);
	ПараметрыФормы.Вставить("ВыбиратьКонтейнерыПользователей", Истина);
	
	Если Элементы.Доступ.ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы.Вставить("ВыбранныеАдресаты", Элементы.Доступ.ТекущиеДанные.Участник);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор участника'"));
	ПараметрыФормы.Вставить("ЗаголовокСпискаАдреснойКниги", НСтр("ru = 'Все сотрудники'"));
	
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(
		ПараметрыФормы,
		Элементы.ДоступУчастник,
		Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУчастники

&НаКлиенте
Процедура УчастникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	РежимДобавленияИсполнителя = Истина;
	
	Отказ = Истина;
	Если ЗначениеЗаполнено(ВидУчастникаПроверяющий) Тогда
		ВсегоСтрок = Объект.Участники.Количество();
		НовСтр = Объект.Участники.Вставить(ВсегоСтрок - 1);
	Иначе
		
		НовСтр = Объект.Участники.Добавить();
	КонецЕсли;
	НовСтр.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	НовСтр.ВидУчастника = ВидУчастникаИсполнитель;
	ИдСтроки = НовСтр.ПолучитьИдентификатор();
	
	Элементы.Участники.ТекущаяСтрока = ИдСтроки;
	
	Элементы.Участники.ИзменитьСтроку();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.ВидУчастника = ВидУчастникаПроверяющий Тогда
		Отказ = Истина;
		ТекущиеДанные.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПриАктивизацииСтроки(Элемент)
	
	УчастникиОбработкаАктивизацииСтроки();	
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПриИзменении(Элемент)
	
	ДанныеТекущегоУчастника = Новый Структура("Участник, ВидУчастника");
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ДанныеТекущегоУчастника.ВидУчастника = Элемент.ТекущиеДанные.ВидУчастника;
		ДанныеТекущегоУчастника.Участник = Элемент.ТекущиеДанные.Участник;
	КонецЕсли;
	
	УчастникиПриИзмененииНаСервере(ДанныеТекущегоУчастника);
	ОбновитьСписокВыбораВидУчастника();
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если РежимДобавленияИсполнителя = Истина Тогда
		Элемент.ТекущийЭлемент = Элементы.УчастникиУчастник;
		РежимДобавленияИсполнителя = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка) Экспорт
	
	ТекстПоиска = СокрЛП(Текст);
	Если Не ЗначениеЗаполнено(ТекстПоиска) Или СтрДлина(ТекстПоиска) < 2 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнениеТипа = Новый ОписаниеТипов(
		"СправочникСсылка.АвтоподстановкиДляОбъектов,
		|СправочникСсылка.ПолныеРоли,
		|СправочникСсылка.Сотрудники,
		|СправочникСсылка.ПроектыКонтейнеры, 
		|СправочникСсылка.РабочиеГруппы,
		|СправочникСсылка.ПодразделенияКонтейнеры");
	
	ТипОбъекта = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.Задача");
	
	ДанныеВыбора = СотрудникиВызовСервера.СформироватьДанныеВыбора(
		ТекстПоиска,
		ДополнениеТипа,
		ТипОбъекта);
	
	Если ЗначениеЗаполнено(ДанныеВыбора) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиУчастникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если значение требует уточнения, будет вызвана форма для ввода уточняющих данных.
	// Обработка выбора не должна выполняться в этом случае.
	ТипыДляУточнения = Новый Массив;
	ТипыДляУточнения.Добавить(Тип("Структура"));
	ТипыДляУточнения.Добавить(Тип("СправочникСсылка.РолиИсполнителей"));
	ТипыДляУточнения.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	ТипыДляУточнения.Добавить(Тип("СправочникСсылка.Проекты"));
	Если ТипыДляУточнения.Найти(ТипЗнч(ВыбранноеЗначение)) <> Неопределено Тогда
		СотрудникиКлиент.ОбработкаВыбораКонтейнера(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
		// Повторная проверка (значение могло быть изменено).
		Если ТипыДляУточнения.Найти(ТипЗнч(ВыбранноеЗначение)) <> Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ТекущиеДанные.Участник = ВыбранноеЗначение;
	Иначе
		ТекущиеДанные.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка")
	КонецЕсли;
	
	Элементы.Участники.ЗакончитьРедактированиеСтроки(Ложь);
	
	УчастникиПриИзмененииНаСервере(Неопределено);
	ОбновитьСписокВыбораВидУчастника();
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиУчастникОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ТекущийУчастник = Неопределено;
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущийУчастник = ТекущиеДанные.Участник;
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Участник) Тогда
			Если ТекущиеДанные.ВидУчастника <> ВидУчастникаПроверяющий Тогда
				СтандартнаяОбработка = Ложь;
				ПодобратьИсполнителейРеализация();
				Возврат;
			КонецЕсли;
			
			ТекущийУчастник = СотрудникиКлиент.ОсновнойСотрудник();
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ОтображатьРоли", Истина);
	ПараметрыФормы.Вставить("ВыбиратьКонтейнерыПользователей", Истина);
	ПараметрыФормы.Вставить("ПодменятьПользователейСотрудниками", Истина);
	ПараметрыФормы.Вставить("ОтображатьАвтоподстановкиПоЗадачам", Истина);
	
	Если ЗначениеЗаполнено(ТекущийУчастник) Тогда
		ПараметрыФормы.Вставить("ВыбранныеАдресаты", ТекущийУчастник);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор участников'"));
	
	ОткрытьФорму("Справочник.АдреснаяКнига.Форма.ФормаСписка",
		ПараметрыФормы, 
		Элемент,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиУчастникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка) Экспорт
	
	ТекстПоиска = СокрЛП(Текст);
	Если Не ЗначениеЗаполнено(ТекстПоиска) Или СтрДлина(ТекстПоиска) < 2 Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ДополнениеТипа = Новый ОписаниеТипов(
		"СправочникСсылка.АвтоподстановкиДляОбъектов,
		|СправочникСсылка.ПолныеРоли,
		|СправочникСсылка.Сотрудники,
		|СправочникСсылка.ПроектыКонтейнеры, 
		|СправочникСсылка.РабочиеГруппы,
		|СправочникСсылка.ПодразделенияКонтейнеры");
	
	ТипОбъекта = ПредопределенноеЗначение("Перечисление.ТипыОбъектов.Задача");
	
	ДанныеВыбора = СотрудникиВызовСервера.СформироватьДанныеВыбора(
		ТекстПоиска,
		ДополнениеТипа,
		ТипОбъекта);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПриложения

&НаКлиенте
Процедура ПриложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	Если ДанныеСтроки <> Неопределено Тогда
		ВыборФайла(ДанныеСтроки.Приложение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандПриложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ДанныеСтроки = Элементы.Приложения.ТекущиеДанные;
	
	Если ДанныеСтроки <> Неопределено Тогда
		РаботаСЗадачамиКлиент.ПоказатьПриложение(ДанныеСтроки.Приложение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	НаименованиеПриложения = "";
	МассивПриложений = Новый Массив;
	
	Для Каждого ВыбраннаяСтрока Из Элементы.Приложения.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Объект.Приложения.НайтиПоИдентификатору(ВыбраннаяСтрока);
			
		МассивПриложений.Добавить(ДанныеСтроки.Приложение);
		НаименованиеПриложения = Строка(ДанныеСтроки.Приложение);
		
	КонецЦикла;
	
	КоличествоПриложений = МассивПриложений.Количество();
	
	Если КоличествоПриложений = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПриложенияПередУдалениемПродолжение",
		ЭтотОбъект,
		Новый Структура("МассивПриложений", МассивПриложений));
		
	Если КоличествоПриложений > 1 Тогда 
		ТекстВопроса = НСтр("ru = 'Удалить выделенные приложения?'");
	Иначе 
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Удалить ""%1""?'"),
			НаименованиеПриложения);
	КонецЕсли;
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ВладелецФайлаСписка = Объект.Ссылка;
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;	
	ОбработанныеФайлы = РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(
		ПараметрыПеретаскивания,
		ВладелецФайлаСписка,
		ЭтотОбъект,
		НеОткрыватьКарточкуПослеСозданияИзФайла);
	
	Если ОбработанныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайлов = ДанныеФайлов(ОбработанныеФайлы);
	Для Каждого ОбработанныйФайл Из ОбработанныеФайлы Цикл
		
		СтрокаПриложения = Объект.Приложения.Добавить();
		СтрокаПриложения.Приложение = ОбработанныйФайл;
		
		Если ТипЗнч(ОбработанныйФайл) = Тип("СправочникСсылка.Файлы") Тогда
			ДанныеФайла = ДанныеФайлов.Получить(ОбработанныйФайл);
			ЗаполнитьЗначенияСвойств(СтрокаПриложения, ДанныеФайла);
		Иначе
			СтрокаПриложения.ИндексКартинки = РаботаСЗадачамиКлиентСервер.ИндексКартинкиПриложения(ОбработанныйФайл);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьПредставлениеПриложений();
	
	Модифицированность = Истина;
	
	Записать(); // запишем еще раз, т.к. спр Файл уже записан, а табл часть Приложения еще нет
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
#Если Не ВебКлиент Тогда
	
	КоличествоВыделенныхВложений = Элементы.Приложения.ВыделенныеСтроки.Количество();
	
	Если КоличествоВыделенныхВложений = 0 Тогда
		
		Возврат;
		
	ИначеЕсли КоличествоВыделенныхВложений = 1 Тогда
		
		ФайлСсылка = Элементы.Приложения.ТекущиеДанные.Приложение;
		Если ТипЗнч(ФайлСсылка) <> Тип("СправочникСсылка.Файлы") Тогда
			
			МассивОбъектов = Новый Массив;
			МассивОбъектов.Добавить(ФайлСсылка);
			ПараметрыПеретаскивания.Значение = МассивОбъектов;
			
			Возврат;
			
		КонецЕсли;
			
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ФайлСсылка);
		
		ПолноеИмяПеретаскиваемогоФайла = "";
		
		Обработчик = Новый ОписаниеОповещения("ПослеПолучитьФайлВерсииВРабочийКаталог", ЭтотОбъект);
		РаботаСФайламиКлиент.ПолучитьФайлВерсииВРабочийКаталог(Обработчик, 
		ДанныеФайла, ПолноеИмяПеретаскиваемогоФайла, УникальныйИдентификатор);
		
		Если ЗначениеЗаполнено(ПолноеИмяПеретаскиваемогоФайла) Тогда
			Файл = Новый Файл(ПолноеИмяПеретаскиваемогоФайла);
			ПараметрыПеретаскивания.Значение = Файл;
		Иначе
			Выполнение = Ложь;
		КонецЕсли;
		
	Иначе // более одного выделено
		
		МассивОбъектов = Новый Массив;
		Для каждого ВыделеннаяСтрока Из Элементы.Приложения.ВыделенныеСтроки Цикл
			ДанныеСтроки = Объект.Приложения.НайтиПоИдентификатору(ВыделеннаяСтрока);
			МассивОбъектов.Добавить(ДанныеСтроки.Приложение);
		КонецЦикла;
		Если МассивОбъектов.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыПеретаскивания.Значение = МассивОбъектов;
		
	КонецЕсли;
	
#Иначе
	
	Выполнение = Ложь;
	
#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНазначения

&НаКлиенте
Процедура НазначенияПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеНазначения = РаботаСЗадачамиКлиентСервер.НовыеДанныеНазначения();
	ЗаполнитьЗначенияСвойств(ДанныеНазначения, ТекущиеДанные);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДанныеНазначения", ДанныеНазначения);
	ПараметрыФормы.Вставить("Создал", Объект.Создал);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ТекущиеДанные", ТекущиеДанные);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПослеВводаНазначения",
		ЭтотОбъект,
		ПараметрыОбработчика);
	
	ОткрытьФорму(
		"Справочник.ШаблоныЗадач.Форма.ФормаНазначения",
		ПараметрыФормы,
		Элементы.Назначения,
		УникальныйИдентификатор,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Копирование И ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеНазначения = РаботаСЗадачамиКлиентСервер.НовыеДанныеНазначения();
	Если Копирование Тогда
		ЗаполнитьЗначенияСвойств(ДанныеНазначения, ТекущиеДанные);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДанныеНазначения", ДанныеНазначения);
	ПараметрыФормы.Вставить("Создал", Объект.Создал);
	
	ПараметрыОбработчика = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПослеВводаНазначения",
		ЭтотОбъект,
		ПараметрыОбработчика);
	
	ОткрытьФорму(
		"Справочник.ШаблоныЗадач.Форма.ФормаНазначения",
		ПараметрыФормы,
		Элементы.Назначения,
		УникальныйИдентификатор,,,
		ОписаниеОповещения);
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Асинх Процедура ВставитьКартинкуИзБуфера(Команда)
	
	Если Не ЗаписатьЕслиНовый() Тогда
		Возврат; 
	КонецЕсли;
	
	КартинкаИзБуфераОбмена = Ждать СредстваБуфераОбмена.ПолучитьДанныеАсинх(СтандартныйФорматДанныхБуфераОбмена.Картинка);
	
	Если КартинкаИзБуфераОбмена = Неопределено Тогда
		ПоказатьПредупреждение(
			, НСтр(
				"ru='Буфер обмена не содержит картинки'"
				, "ru"
			)
		);
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = "";
	
#Если Не ВебКлиент Тогда 
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла("png");
	КартинкаИзБуфераОбмена.Записать(ПутьКФайлу);

#КонецЕсли
	
	ВставитьКартинкуИзБуфераЗавершение(Истина, ПутьКФайлу);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПриложение(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьДобавлениеПриложения", ЭтотОбъект);
	
	ОткрытьФорму(
		"Документ.ДействиеЗадачи.Форма.ВыборПриложения",
		Новый Структура("Задача", Объект.Ссылка),,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(Команда)
	
	ДобавитьФайлВПриложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	Если Не ЗаписатьЕслиНовый() Тогда
		Возврат; 
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Приложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Неопределено, 
		ТекущиеДанные.Приложение,
		УникальныйИдентификатор);
	ПараметрыОбновленияФайла.ХранитьВерсии = Ложь;
	ПараметрыОбновленияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	ПараметрыОбновленияФайла.Редактирует = ТекущиеДанные.Редактирует;
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	Если Не ЗаписатьЕслиНовый() Тогда
		Возврат; 
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Приложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОсвобожденияФайла = РаботаСФайламиКлиент.ПараметрыОсвобожденияФайла(
		Неопределено, 
		ТекущиеДанные.Приложение);
	ПараметрыОсвобожденияФайла.ХранитьВерсии = Ложь;
	ПараметрыОсвобожденияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	ПараметрыОсвобожденияФайла.Редактирует = ТекущиеДанные.Редактирует;
	ПараметрыОсвобожденияФайла.УникальныйИдентификатор = УникальныйИдентификатор;
	РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(ПараметрыОсвобожденияФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПриложение(Команда)
	
	Если Не ЗаписатьЕслиНовый() Тогда
		Возврат; 
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Приложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСЗадачамиКлиент.ПросмотретьПриложение(
		ТекущиеДанные.Приложение,
		УникальныйИдентификатор,
		ПредыдущийАдресФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьДоступ(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 2);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ОтображатьРоли", Истина);
	ПараметрыФормы.Вставить("ПодменятьПользователейСотрудниками", Истина);
	ПараметрыФормы.Вставить("ВыбиратьКонтейнерыПользователей", Истина);
	
	ВыбранныеАдресаты = Новый Массив;
	Для Каждого Строка Из Объект.Доступ Цикл
		Если Не ЗначениеЗаполнено(Строка.Участник) Тогда
			Продолжить;
		КонецЕсли;
		ВыбранныеАдресаты.Добавить(Строка.Участник);
	КонецЦикла;
	ПараметрыФормы.Вставить("ВыбранныеАдресаты", ВыбранныеАдресаты);
	
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Подбор участников'"));
	ПараметрыФормы.Вставить("ЗаголовокСпискаАдреснойКниги", НСтр("ru = 'Все сотрудники'"));
	ПараметрыФормы.Вставить("ЗаголовокСпискаВыбранных", НСтр("ru = 'Выбранные сотрудники'"));
	
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыФормы, Элементы.Доступ, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИсполнителей(Команда)
	
	ПодобратьИсполнителейРеализация();
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтветственного(Команда)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.Участник) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеВидУчастника = ТекущиеДанные.ВидУчастника;
	
	Если ТекущиеДанныеВидУчастника = ВидУчастникаПроверяющий Тогда 
		Возврат;
	КонецЕсли;	

	Если ТекущиеДанныеВидУчастника = ВидУчастникаОтветственный Тогда
		
		ТекущиеДанные.ВидУчастника = ВидУчастникаИсполнитель;
		
		СортироватьУчастников();
		
		УчастникиОбработкаАктивизацииСтроки();
		
		Модифицированность = Истина;
		
	ИначеЕсли ТекущиеДанныеВидУчастника = ВидУчастникаИсполнитель Тогда
		
		// найти прежнего Ответственного и поменять
		Для Каждого Стр Из Объект.Участники Цикл
			
			Если Стр.ВидУчастника = ВидУчастникаОтветственный Тогда
				
				Стр.ВидУчастника = ВидУчастникаИсполнитель;
				
				// Ответственный должен быть один в документе, значит нет смысла дальше перебирать строки.
				Прервать;
				
			КонецЕсли;
				
		КонецЦикла;	
		
		ТекущиеДанные.ВидУчастника = ВидУчастникаОтветственный;
		
		СортироватьУчастников();
		
		УчастникиОбработкаАктивизацииСтроки();
		
		Модифицированность = Истина; 
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура РедактироватьФайл(Команда)
	
	Если Не ЗаписатьЕслиНовый() Тогда
		Возврат; 
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Приложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
			
	КомандыРаботыСФайламиКлиент.Редактировать(ТекущиеДанные.Приложение);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыОбновитьИзФайлаНаДиске(Команда)
	
	Если Не ЗаписатьЕслиНовый() Тогда
		Возврат; 
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Приложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	ТекущееПриложение = ТекущиеДанные.Приложение;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаИРабочийКаталог(ТекущееПриложение);
	
	РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
		Неопределено,
		ДанныеФайла,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыОткрытьКарточку(Команда)
	
	Если Не ЗаписатьЕслиНовый() Тогда
		Возврат; 
	КонецЕсли;
	
	ДанныеСтроки = Элементы.Приложения.ТекущиеДанные;
	
	Если ДанныеСтроки <> Неопределено Тогда
		РаботаСЗадачамиКлиент.ПоказатьПриложение(ДанныеСтроки.Приложение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВидЗадачиПриИзмененииНаСервере()
	
	ВидЗадачиПриИзмененииКонвертировать();
	
	НастроитьФормуПоВидуЗадачи();
	
КонецПроцедуры

&НаСервере
Процедура ВидЗадачиПриИзмененииКонвертировать()
	
	Если НастроенныйВидЗадачи = Объект.ВидЗадачи Тогда
		Возврат;
	КонецЕсли;
	
	СтарыеДанныеВида = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(НастроенныйВидЗадачи);
	НовыеДанныеВида = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(Объект.ВидЗадачи);
	
	// Конвертация участников.
	КоличествоЭлементов = Объект.Участники.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ОбратныйИндекс = КоличествоЭлементов - Индекс;
		СтрокаУчастника = Объект.Участники[ОбратныйИндекс];
		
		СтрокаАктуальна = Ложь;
		Если СтрокаУчастника.ВидУчастника = СтарыеДанныеВида.ВидУчастникаОтветственный Тогда
			
			Если ЗначениеЗаполнено(НовыеДанныеВида.ВидУчастникаОтветственный) Тогда
				СтрокаУчастника.ВидУчастника = НовыеДанныеВида.ВидУчастникаОтветственный;
			Иначе
				СтрокаУчастника.ВидУчастника = НовыеДанныеВида.ВидУчастникаИсполнитель;
			КонецЕсли;
			
			СтрокаАктуальна = Истина;
			
		ИначеЕсли СтрокаУчастника.ВидУчастника = СтарыеДанныеВида.ВидУчастникаИсполнитель Тогда
			
			СтрокаУчастника.ВидУчастника = НовыеДанныеВида.ВидУчастникаИсполнитель;
			
			СтрокаАктуальна = Истина;
			
		ИначеЕсли СтрокаУчастника.ВидУчастника = СтарыеДанныеВида.ВидУчастникаПроверяющий Тогда
			
			СтрокаУчастника.ВидУчастника = НовыеДанныеВида.ВидУчастникаПроверяющий;
			
			Если ЗначениеЗаполнено(НовыеДанныеВида.ВидУчастникаПроверяющий) Тогда
				СтрокаАктуальна = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаАктуальна Тогда
			Продолжить;
		КонецЕсли;
		
		Объект.Участники.Удалить(ОбратныйИндекс);
		
	КонецЦикла;
	
	ДобавитьОбязательныеСтрокиТаблицыУчастники();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОбязательныеСтрокиТаблицыУчастники()
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(Объект.ВидЗадачи);
	
	ЕстьИсполнитель = Ложь;
	ЕстьПроверяющий = Ложь;
	Для Каждого СтрокаУчастника Из Объект.Участники Цикл
		
		Если СтрокаУчастника.ВидУчастника = ДанныеВидаЗадачи.ВидУчастникаОтветственный
			Или СтрокаУчастника.ВидУчастника = ДанныеВидаЗадачи.ВидУчастникаИсполнитель Тогда
			
			ЕстьИсполнитель = Истина;
			
		ИначеЕсли СтрокаУчастника.ВидУчастника = ДанныеВидаЗадачи.ВидУчастникаПроверяющий Тогда
			
			ЕстьПроверяющий = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеВидаЗадачи.ВидУчастникаИсполнитель) И Не ЕстьИсполнитель Тогда
		
		СтрокаУчастника = Объект.Участники.Вставить(0);
		СтрокаУчастника.Участник = Справочники.Сотрудники.ПустаяСсылка();
		СтрокаУчастника.ВидУчастника = ДанныеВидаЗадачи.ВидУчастникаИсполнитель;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеВидаЗадачи.ВидУчастникаПроверяющий) И Не ЕстьПроверяющий Тогда
		
		СтрокаУчастника = Объект.Участники.Добавить();
		СтрокаУчастника.Участник = Справочники.Сотрудники.ПустаяСсылка();
		СтрокаУчастника.ВидУчастника = ДанныеВидаЗадачи.ВидУчастникаПроверяющий;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьИконку(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Участник) Тогда
		Если ТипЗнч(ТекущиеДанные.Участник) = Тип("СправочникСсылка.РолиИсполнителей")
			Или ТипЗнч(ТекущиеДанные.Участник) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			ТекущиеДанные.Иконка = 1;
		ИначеЕсли ТипЗнч(ТекущиеДанные.Участник) = Тип("СправочникСсылка.РабочиеГруппы") Тогда
			ТекущиеДанные.Иконка = 2;
		ИначеЕсли ТипЗнч(ТекущиеДанные.Участник) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			ТекущиеДанные.Иконка = 2;
		ИначеЕсли ТипЗнч(ТекущиеДанные.Участник) = Тип("СправочникСсылка.ПодразделенияКонтейнеры") Тогда
			ТекущиеДанные.Иконка = 2;
		ИначеЕсли ТипЗнч(ТекущиеДанные.Участник) = Тип("СправочникСсылка.ПроектыКонтейнеры") Тогда
			ТекущиеДанные.Иконка = 2;
		ИначеЕсли ТипЗнч(ТекущиеДанные.Участник) = Тип("СправочникСсылка.Пользователи")
			Или ТипЗнч(ТекущиеДанные.Участник) = Тип("СправочникСсылка.Сотрудники") Тогда
			ТекущиеДанные.Иконка = 3;
		ИначеЕсли ТипЗнч(ТекущиеДанные.Участник) = Тип("Строка") Тогда
			ТекущиеДанные.Иконка = 4;
		КонецЕсли;
	Иначе
		ТекущиеДанные.Иконка = -1;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоВидуЗадачи()
	
	Если НастроенныйВидЗадачи = Объект.ВидЗадачи Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(Объект.ВидЗадачи);
	
	ВидУчастникаОтветственный = ДанныеВидаЗадачи.ВидУчастникаОтветственный;
	ВидУчастникаИсполнитель = ДанныеВидаЗадачи.ВидУчастникаИсполнитель;
	ВидУчастникаПроверяющий = ДанныеВидаЗадачи.ВидУчастникаПроверяющий;
	ЗаголовокСпискаВыбранныхУчастников = ДанныеВидаЗадачи.ЗаголовокСпискаВыбранныхУчастников;
	ЗаголовокФормыВыбораИсполнителей = ДанныеВидаЗадачи.ЗаголовокФормыВыбораИсполнителей;
	
	Элементы.УчастникиКонтекстноеМенюОтветственный.Видимость =
		ЗначениеЗаполнено(ВидУчастникаОтветственный);
	
	Команды.ПодобратьИсполнителей.Заголовок = ДанныеВидаЗадачи.ЗаголовокКомандыПодобратьИсполнителей;
	Команды.ПодобратьИсполнителей.Подсказка = ДанныеВидаЗадачи.ЗаголовокКомандыПодобратьИсполнителей;
	
	НастроенныйВидЗадачи = Объект.ВидЗадачи;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВыбораВидУчастника()
	
	ЭтоОтветственный = Ложь;
	ЭтоПроверяющий = Ложь;
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ТекущиеДанные.ВидУчастника = ВидУчастникаОтветственный Тогда
			ЭтоОтветственный = Истина;
		КонецЕсли;
		
		Если ТекущиеДанные.ВидУчастника = ВидУчастникаПроверяющий Тогда
			ЭтоПроверяющий = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ЕстьСтрокаОтветственного = Ложь;
	ЕстьСтрокаПроверяющего = Ложь;
	Для Каждого СтрокаУчастника Из Объект.Участники Цикл
		
		Если СтрокаУчастника.ВидУчастника = ВидУчастникаОтветственный Тогда
			ЕстьСтрокаОтветственного = Истина;
		КонецЕсли;
		
		Если СтрокаУчастника.ВидУчастника = ВидУчастникаПроверяющий Тогда
			ЕстьСтрокаПроверяющего = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ЕстьВыборОтветственного = Ложь;
	ЕстьВыборПроверяющего = Ложь;
	Для Каждого ЭлементСписка Из Элементы.УчастникиВидУчастника.СписокВыбора Цикл
		
		Если ЭлементСписка.Значение = ВидУчастникаОтветственный Тогда
			ЕстьВыборОтветственного = Истина;
		КонецЕсли;
		
		Если ЭлементСписка.Значение = ВидУчастникаПроверяющий Тогда
			ЕстьВыборПроверяющего = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьСтрокаОтветственного И ЕстьВыборОтветственного И Не ЭтоОтветственный Тогда
		
		// Удалим
		СтрокаОтветственного = Элементы.УчастникиВидУчастника.СписокВыбора.НайтиПоЗначению(
			ВидУчастникаОтветственный);
		Элементы.УчастникиВидУчастника.СписокВыбора.Удалить(СтрокаОтветственного);
		
	ИначеЕсли (Не ЕстьСтрокаОтветственного Или ЭтоОтветственный) И Не ЕстьВыборОтветственного Тогда
		
		// Добавим
		Элементы.УчастникиВидУчастника.СписокВыбора.Вставить(
			0,
			ВидУчастникаОтветственный);
		
	КонецЕсли;
	
	Если ЕстьСтрокаПроверяющего И ЕстьВыборПроверяющего И Не ЭтоПроверяющий Тогда
		
		// Удалим
		СтрокаПроверяющего = Элементы.УчастникиВидУчастника.СписокВыбора.НайтиПоЗначению(
			ВидУчастникаПроверяющий);
		Элементы.УчастникиВидУчастника.СписокВыбора.Удалить(СтрокаПроверяющего);
		
	ИначеЕсли (Не ЕстьСтрокаПроверяющего Или ЭтоПроверяющий) И Не ЕстьВыборПроверяющего Тогда
		
		// Добавим
		Элементы.УчастникиВидУчастника.СписокВыбора.Вставить(
			Элементы.УчастникиВидУчастника.СписокВыбора.Количество(),
			ВидУчастникаПроверяющий);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИсполнителейРеализация(ТекущийВидУчастника = Неопределено)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаголовокФормы", ЗаголовокФормыВыбораИсполнителей);
	ПараметрыФормы.Вставить("ЗаголовокСпискаВыбранных", ЗаголовокСпискаВыбранныхУчастников + ":");
	ПараметрыФормы.Вставить("ПодменятьПользователейСотрудниками", Истина);
	ПараметрыФормы.Вставить("РежимРаботыФормы", 2);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ОтображатьРоли", Истина);
	ПараметрыФормы.Вставить("ВыбиратьКонтейнерыПользователей", Истина);
	ПараметрыФормы.Вставить("ОтображатьАвтоподстановкиПоЗадачам", Истина);
	ПараметрыФормы.Вставить("КонтекстОткрытия", Объект.Ссылка);
	ПараметрыФормы.Вставить("УстановитьВыделение", СотрудникиКлиент.ОсновнойСотрудник());
	ПараметрыФормы.Вставить("Оптимизировать", Истина);
	ПараметрыФормы.Вставить("ИдентификаторФормыВладельца", УникальныйИдентификатор);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПодобратьИсполнителейПослеВыбора", ЭтотОбъект);
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыФормы, ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИсполнителейПослеВыбора(АдресРезультата, ДопПараметры) Экспорт
	
	Если АдресРезультата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьИсполнителейИзХранилища(АдресРезультата);
	ОбновитьСписокВыбораВидУчастника();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьИсполнителейИзХранилища(АдресРезультата)
	
	ВыбранныеИсполнители = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	// Добавим исполнителей.
	МассивИсполнители = ИсполнителиНаСервере();
	ВыбраноНесколькоИсполнителей = ВыбранныеИсполнители.Количество() > 1;
	Для Каждого ВыбранныйИсполнитель Из ВыбранныеИсполнители Цикл
		
		Если МассивИсполнители.Найти(ВыбранныйИсполнитель.Контакт) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не УказаныИсполнителиНаСервере()
			И ЗначениеЗаполнено(ВидУчастникаОтветственный)
			И ВыбраноНесколькоИсполнителей Тогда
			ДобавитьЗаменитьУчастникаПоВидуНаСервере(
				ВыбранныйИсполнитель.Контакт,
				ВидУчастникаОтветственный);
		Иначе
			СтрокаУчастника = Объект.Участники.Добавить();
			СтрокаУчастника.ВидУчастника = ВидУчастникаИсполнитель;
			СтрокаУчастника.Участник = ВыбранныйИсполнитель.Контакт;
		КонецЕсли;
		
	КонецЦикла;
	
	// Обработаем изменение.
	УчастникиПриИзмененииНаСервере(Неопределено, Ложь);
	
	СортироватьУчастников();
	
	УдалитьИзВременногоХранилища(АдресРезультата); // очищается временное хранилище для минимизации расхода оперативной памяти
	
КонецПроцедуры 

&НаКлиенте
Процедура УчастникиОбработкаАктивизацииСтроки()
	
	ОбновитьСписокВыбораВидУчастника();
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ТекущиеДанные.ВидУчастника = ВидУчастникаПроверяющий Тогда
			Элементы.УчастникиКонтекстноеМенюОтветственный.Доступность = Ложь;
		Иначе
			Элементы.УчастникиКонтекстноеМенюОтветственный.Доступность = Истина;
		КонецЕсли;

		Если ТекущиеДанные.ВидУчастника = ВидУчастникаОтветственный Тогда
			Элементы.УчастникиКонтекстноеМенюОтветственный.Пометка = Истина;
		Иначе
			Элементы.УчастникиКонтекстноеМенюОтветственный.Пометка = Ложь;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УчастникиПриИзмененииНаСервере(ДанныеТекущегоУчастника, ОбновитьПредставление = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаУчастника Из Объект.Участники Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаУчастника.ВидУчастника) Тогда
			СтрокаУчастника.ВидУчастника = ВидУчастникаИсполнитель;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
			СтрокаУчастника.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СортироватьУчастников()
	
	Для Каждого СтрокаУчастника Из Объект.Участники Цикл
		
		СтрокаВида = "1";
		
		Если СтрокаУчастника.ВидУчастника = ВидУчастникаОтветственный Тогда
			СтрокаВида = "1";
		ИначеЕсли СтрокаУчастника.ВидУчастника = ВидУчастникаИсполнитель Тогда
			СтрокаВида = "2";
		ИначеЕсли СтрокаУчастника.ВидУчастника = ВидУчастникаПроверяющий Тогда
			СтрокаВида = "4";
		Иначе
			СтрокаВида = "3";
		КонецЕсли;
		
		СтрокаУчастника.ПорядокДляСортировки = СтрокаВида + "-" + СтрокаУчастника.Участник;
		
	КонецЦикла;	

	Объект.Участники.Сортировать("ПорядокДляСортировки");	
	
КонецПроцедуры

&НаСервере
Функция ИсполнителиНаСервере()
	
	МассивИсполнители = Новый Массив;
	Для Каждого СтрокаУчастника Из Объект.Участники Цикл
		
		Если СтрокаУчастника.ВидУчастника <> ВидУчастникаОтветственный
			И СтрокаУчастника.ВидУчастника <> ВидУчастникаИсполнитель Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивИсполнители.Добавить(СтрокаУчастника.Участник);
		
	КонецЦикла;
	
	Возврат МассивИсполнители;
	
КонецФункции

&НаСервере
Функция УказаныИсполнителиНаСервере()
	
	УказаныИсполнители = Ложь;
	Для Каждого СтрокаУчастника Из Объект.Участники Цикл
		
		Если СтрокаУчастника.ВидУчастника <> ВидУчастникаОтветственный
			И СтрокаУчастника.ВидУчастника <> ВидУчастникаИсполнитель Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		УказаныИсполнители = Истина;
		Прервать;
		
	КонецЦикла;
	
	Возврат УказаныИсполнители;
	
КонецФункции

&НаСервере
Процедура ДобавитьЗаменитьУчастникаПоВидуНаСервере(Участник, ВидУчастника)
	
	Заменили = Ложь;
	Для Каждого Стр Из Объект.Участники Цикл
		
		Если Стр.ВидУчастника = ВидУчастника Тогда
			
			Если Не ЗначениеЗаполнено(Стр.Состояние) Тогда
				Стр.Участник = Участник;
				Заменили = Истина;
			Иначе
				Если Стр.Участник <> Участник Тогда
					Объект.Участники.Удалить(Стр);
				Иначе
					Заменили = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
			 
	КонецЦикла;	
	
	Если Заменили = Ложь Тогда
		
		НовСтр = Объект.Участники.Добавить();
		НовСтр.Участник = Участник;
		НовСтр.ВидУчастника = ВидУчастника;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайла(Приложение)
	
	Если ТипЗнч(Приложение) <> Тип("СправочникСсылка.Файлы") Тогда
		РаботаСЗадачамиКлиент.ПоказатьПриложение(Приложение);
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
		Приложение,
		Неопределено,
		УникальныйИдентификатор,
		Неопределено,
		ПредыдущийАдресФайла);
		
	#Если ВебКлиент Тогда
			
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(
			Неопределено,
			ДанныеФайла,
			УникальныйИдентификатор);
			
		Возврат;
	#КонецЕсли
		
	Если ЗначениеЗаполнено(ДанныеФайла.Редактирует)
		И Не ДанныеФайла.РедактируетТекущийПользователь Тогда
		
		ТекстВопроса =
			СтрШаблон(
				НСтр("ru = 'Файл ""%1"" уже занят пользователем ""%2"".
					|Открыть его в режиме только для чтения ?'"),
				ДанныеФайла.ПолноеНаименованиеВерсии,
				Строка(ДанныеФайла.Редактирует));
				
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
				
		ОбработчикВопроса = Новый ОписаниеОповещения("ПослеВопросаФайлЗанятДругим", 
			ЭтотОбъект, ПараметрыОбработчика);
				
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	КомандыРаботыСФайламиКлиент.Редактировать(Приложение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаФайлЗанятДругим(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат; // ничего не делаем
	КонецЕсли;
	
	РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, 
		ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандПриложений()
	
	ТекущиеДанные = Элементы.Приложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
		
		Элементы.ПриложенияКонтекстноеМенюРедактировать.Доступность =
			Не ЗначениеЗаполнено(ТекущиеДанные.Редактирует);
		Элементы.ПриложенияКонтекстноеМенюЗакончитьРедактирование.Доступность =
			ТекущиеДанные.РедактируетТекущийПользователь;
		Элементы.ПриложенияКонтекстноеМенюОсвободить.Доступность =
			ТекущиеДанные.РедактируетТекущийПользователь;
		Элементы.ПриложенияКонтекстноеМенюФайлыОбновитьИзФайлаНаДиске.Доступность = Истина;
		
	Иначе
		
		Элементы.ПриложенияКонтекстноеМенюРедактировать.Доступность = Ложь;
		Элементы.ПриложенияКонтекстноеМенюЗакончитьРедактирование.Доступность = Ложь;
		Элементы.ПриложенияКонтекстноеМенюОсвободить.Доступность = Ложь;
		Элементы.ПриложенияКонтекстноеМенюФайлыОбновитьИзФайлаНаДиске.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияПередУдалениемПродолжение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		
		МассивПриложений = ПараметрыВыполнения.МассивПриложений;
		
		// просто строки удаляем
		Для Каждого Приложение Из МассивПриложений Цикл
			ПараметрыОтбора = Новый Структура("Приложение", Приложение);
			Строки = Объект.Приложения.НайтиСтроки(ПараметрыОтбора);
			Если Строки.Количество() >= 1 Тогда
				Объект.Приложения.Удалить(Строки[0]);
			КонецЕсли;	
		КонецЦикла;	
		
		ОбновитьПредставлениеПриложений();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеПриложений()
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивФайлов = Новый Массив;
	Для Каждого СтрокаДляОбработки Из Объект.Приложения Цикл 
		
		Если ТипЗнч(СтрокаДляОбработки.Приложение) <> Тип("СправочникСсылка.Файлы") Тогда
			Продолжить;
		КонецЕсли;
		
		МассивФайлов.Добавить(СтрокаДляОбработки.Приложение);
		
	КонецЦикла;
	
	РеквизитыФайлов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		МассивФайлов,
		"ИндексКартинки, ХранитьВерсии, Редактирует, Описание,
		|ПометкаУдаления, ПодписанЭП, ТекущаяВерсияРасширение");
	
	Для Каждого СтрокаДляОбработки Из Объект.Приложения Цикл
		
		МассивПредставление = Новый Массив;
		МассивПредставление.Добавить(Строка(СтрокаДляОбработки.Приложение));
		
		Если ТипЗнч(СтрокаДляОбработки.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
			
			РеквизитыФайла = РеквизитыФайлов[СтрокаДляОбработки.Приложение];
			Если ЗначениеЗаполнено(РеквизитыФайла.Описание) Тогда
				МассивПредставление.Добавить(РеквизитыФайла.Описание);
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаДляОбработки.ПредставлениеПриложения = СтрСоединить(МассивПредставление, ", ");
		
	КонецЦикла;
	
	Если Объект.Приложения.Количество() <> 0 Тогда
		Элементы.ПриложенияПриложение.Заголовок = СтрШаблон(
				НСтр("ru = 'Приложения (%1)'"),
				Объект.Приложения.Количество());
	Иначе
		Элементы.ПриложенияПриложение.Заголовок = НСтр("ru = 'Приложения'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеФайлов(Файлы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Файлы.Редактирует КАК Редактирует,
		|	Файлы.ПометкаУдаления КАК ПометкаУдаления,
		|	Файлы.ИндексКартинки КАК ИндексКартинки,
		|	ВЫБОР
		|		КОГДА Файлы.Редактирует В (&ТекущийПользовательИСотрудники)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РедактируетТекущийПользователь,
		|	ВЫБОР
		|		КОГДА НЕ Файлы.Редактирует В (&ТекущийПользовательИСотрудники)
		|				И Файлы.Редактирует <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|				И Файлы.Редактирует <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|				И Файлы.Редактирует <> НЕОПРЕДЕЛЕНО
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РедактируетДругойПользователь,
		|	Файлы.Ссылка КАК Ссылка,
		|	Файлы.ТекущаяВерсияРазмер КАК Размер
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.Ссылка В(&Файлы)");
	Запрос.УстановитьПараметр("Файлы", Файлы);
	Запрос.УстановитьПараметр("ТекущийПользовательИСотрудники", Сотрудники.ТекущийПользовательИСотрудники());
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		СтруктураФайла = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицы);
		
		СтруктураФайла.Вставить("ПолноеИмяФайлаВРабочемКаталоге", "");
		СтруктураФайла.Вставить("ДатаМодификацииУниверсальнаяВБазе", ТекущаяДатаСеанса());
		
		Если СтруктураФайла.РедактируетТекущийПользователь = Истина 
				И ЗначениеЗаполнено(СтруктураФайла.Ссылка) Тогда
				
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(
				СтруктураФайла.Ссылка);
			СтруктураФайла.ПолноеИмяФайлаВРабочемКаталоге = ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге;
			СтруктураФайла.ДатаМодификацииУниверсальнаяВБазе = ДанныеФайла.ДатаМодификацииУниверсальная;
		КонецЕсли;
		
		Результат.Вставить(
			СтрокаТаблицы.Ссылка,
			СтруктураФайла);
			
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Асинх Процедура ПослеПолучитьФайлВерсииВРабочийКаталог(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат.ФайлПолучен Тогда
		
		ПолноеИмяПеретаскиваемогоФайла = Результат.ПолноеИмяФайла;
		
		Файл = Новый Файл(ПолноеИмяПеретаскиваемогоФайла);
		Если Ждать Файл.СуществуетАсинх() Тогда
			Файл.УстановитьТолькоЧтениеАсинх(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьДобавлениеПриложения(Приложение, ПараметрыВыполнения) Экспорт
	
	Если Не ЗначениеЗаполнено(Приложение) Тогда
		Возврат;
	КонецЕсли;
	
	Если Приложение = "ФайлСДиска" Тогда
		ДобавитьФайлВПриложения();
		Возврат;
	КонецЕсли;
	
	СтрокаПриложения = Объект.Приложения.Добавить();
	СтрокаПриложения.Приложение = Приложение;
	
	Если ТипЗнч(Приложение) = Тип("СправочникСсылка.Файлы") Тогда
		ДанныеФайлов = ДанныеФайлов(Приложение);
		ДанныеФайла = ДанныеФайлов.Получить(Приложение);
		ЗаполнитьЗначенияСвойств(СтрокаПриложения, ДанныеФайла);
	Иначе
		СтрокаПриложения.ИндексКартинки = РаботаСЗадачамиКлиентСервер.ИндексКартинкиПриложения(Приложение);
	КонецЕсли;
	ОбновитьПредставлениеПриложений();
	
	Модифицированность = Истина;
	
	Записать(); // запишем еще раз, т.к. спр Файл уже записан, а табл часть Приложения еще нет
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлВПриложения()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	РежимСоздания = 2; // с диска
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
	НеОткрыватьФормуВыбораРежимаСозданияФайла = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьДобавлениеПриложения", ЭтотОбъект);
	РаботаСФайламиКлиент.ДобавитьФайл(
		ОписаниеОповещения,
		Объект.Ссылка,
		ЭтотОбъект,
		РежимСоздания,
		НеОткрыватьКарточкуПослеСозданияИзФайла,
		,,,,
		НеОткрыватьФормуВыбораРежимаСозданияФайла);
	
КонецПроцедуры

&НаКлиенте
Функция ЗаписатьЕслиНовый()
	
	ПродолжитьОперацию = Истина;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат ПродолжитьОперацию;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		ПродолжитьОперацию = Ложь;
		Возврат ПродолжитьОперацию;
	КонецЕсли;
	
	Если Не Записать() Тогда
		ПродолжитьОперацию = Ложь;
		Возврат ПродолжитьОперацию;
	КонецЕсли;
	  
	Возврат ПродолжитьОперацию;
	
КонецФункции

&НаКлиенте
Процедура ВставитьКартинкуИзБуфераЗавершение(Результат, ПутьКФайлу) Экспорт
	
	Если Результат = Истина Тогда
		
		Если Не ПустаяСтрока(ПутьКФайлу) Тогда
			
			НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
			Приложение = РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(
				ПутьКФайлу, Объект.Ссылка, ЭтотОбъект, НеОткрыватьКарточкуПослеСозданияИзФайла);
				
			СтрокаПриложения = Объект.Приложения.Добавить();
			СтрокаПриложения.Приложение = Приложение;
			
			Если ТипЗнч(Приложение) = Тип("СправочникСсылка.Файлы") Тогда
				ДанныеФайлов = ДанныеФайлов(Приложение);
				ДанныеФайла = ДанныеФайлов.Получить(Приложение);
				ЗаполнитьЗначенияСвойств(СтрокаПриложения, ДанныеФайла);
			Иначе
				СтрокаПриложения.ИндексКартинки = РаботаСЗадачамиКлиентСервер.ИндексКартинкиПриложения(Приложение);
			КонецЕсли;
			ОбновитьПредставлениеПриложений();
			
			Модифицированность = Истина;
			
			Записать(); // запишем еще раз, т.к. спр Файл уже записан, а табл часть Приложения еще нет
				
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Буфер обмена не содержит картинки'"));
		КонецЕсли;
	
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИконкиФайлов()
	
	МассивФайлов = Новый Массив;
	
	Для Каждого Стр Из Объект.Приложения Цикл 
		
		Если ТипЗнч(Стр.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
			МассивФайлов.Добавить(Стр.Приложение);
		КонецЕсли;	
		
	КонецЦикла;	
	
	ДанныеФайлов = ДанныеФайлов(МассивФайлов);
	
	Для Каждого Стр Из Объект.Приложения Цикл 
		
		Если ТипЗнч(Стр.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
			ДанныеФайла = ДанныеФайлов.Получить(Стр.Приложение);
			ЗаполнитьЗначенияСвойств(Стр, ДанныеФайла);
		Иначе
			Стр.ИндексКартинки = РаботаСЗадачамиКлиентСервер.ИндексКартинкиПриложения(Стр.Приложение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМассивФайлов(МассивСсылокФайлов)
	
	ДанныеФайлов = ДанныеФайлов(МассивСсылокФайлов);
	
	Для Каждого Приложение Из МассивСсылокФайлов Цикл
		
		СтрокаПриложения = Объект.Приложения.Добавить();
		СтрокаПриложения.Приложение = Приложение;
		
		Если ТипЗнч(Приложение) = Тип("СправочникСсылка.Файлы") Тогда
			ДанныеФайла = ДанныеФайлов.Получить(Приложение);
			ЗаполнитьЗначенияСвойств(СтрокаПриложения, ДанныеФайла);
		Иначе
			СтрокаПриложения.ИндексКартинки = РаботаСЗадачамиКлиентСервер.ИндексКартинкиПриложения(Приложение);
		КонецЕсли;
		
	КонецЦикла;
	ОбновитьПредставлениеПриложений();
	
	Модифицированность = Истина;
	
	Записать(); // запишем еще раз, т.к. спр Файл уже записан, а табл часть Приложения еще нет
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтрокуПриложения(Приложение)
	
	СтрокаНужногоПриложения = Неопределено;
	Для Каждого СтрокаПриложения Из Объект.Приложения Цикл
		
		Если СтрокаПриложения.Приложение = Приложение Тогда 
			СтрокаНужногоПриложения = СтрокаПриложения;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаНужногоПриложения <> Неопределено Тогда
		ДанныеФайлов = ДанныеФайлов(Приложение);
		ДанныеФайла = ДанныеФайлов.Получить(Приложение);
		ЗаполнитьЗначенияСвойств(СтрокаНужногоПриложения, ДанныеФайла);
		ОбновитьПредставлениеПриложений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСрокиИсполненияОтложенно(РеквизитТаблица = "", ИндексСтроки = 0) Экспорт
	
	// Срок исполнения для шаблонов задач не предусмотрен.
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораТрудоемкостьСтрокой()
	
	Элементы.ТрудоемкостьСтрокой.СписокВыбора.Очистить();
	Элементы.ТрудоемкостьСтрокой.СписокВыбора.Добавить("0-1");
	Элементы.ТрудоемкостьСтрокой.СписокВыбора.Добавить("1-1");
	Элементы.ТрудоемкостьСтрокой.СписокВыбора.Добавить("1-2");
	Элементы.ТрудоемкостьСтрокой.СписокВыбора.Добавить("2-3");
	Элементы.ТрудоемкостьСтрокой.СписокВыбора.Добавить("3-5");
	Элементы.ТрудоемкостьСтрокой.СписокВыбора.Добавить("5-8");
	Элементы.ТрудоемкостьСтрокой.СписокВыбора.Добавить("8-13");
	Элементы.ТрудоемкостьСтрокой.СписокВыбора.Добавить("13-21");
	Элементы.ТрудоемкостьСтрокой.СписокВыбора.Добавить("21-34");
	Элементы.ТрудоемкостьСтрокой.СписокВыбора.Добавить("34-55");
	Элементы.ТрудоемкостьСтрокой.СписокВыбора.Добавить("55-89");
	Элементы.ТрудоемкостьСтрокой.СписокВыбора.Добавить("89-144");
	Элементы.ТрудоемкостьСтрокой.СписокВыбора.Добавить("144-233");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФормуПоДаннымОбъекта()
	
	Для Каждого Строка Из Объект.Доступ Цикл
		ЗаполнитьИконку(Строка);
	КонецЦикла;
	
	ОбщегоНазначенияДокументооборот.ПоказатьНадписьПометкиУдаления(
		ЭтотОбъект,
		Объект.ПометкаУдаления);
	
	НастроитьФормуПоВидуЗадачи();
	
	ЗаполнитьИконкиФайлов();
	
	ОбновитьПредставлениеПриложений();
	
	СрокПредставление = СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
		Объект.Срок,
		Объект.СрокДни,
		Объект.СрокЧасы,
		Объект.СрокМинуты,
		ИспользоватьДатуИВремяВСрокахЗадач,
		Объект.СрокВариантУстановки);
	
	ДобавитьОбязательныеСтрокиТаблицыУчастники();
	
	ОбновитьПолеЗаголовка();
	
	ОбновитьПолеОписания();
	
	ОбновитьПредставлениеНазначений();
	
	Элементы.Назначения.Доступность = Не Объект.ПометкаУдаления;
	
	ОбновитьЗаголовокДоступ();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокПослеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ШаблонЗаголовка = Результат;
	Объект.ДобавлятьПредставлениеПриложений = Ложь;
	
	ОбновитьФормуПоДаннымОбъекта();
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПослеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ШаблонОписания = Результат;
	
	ОбновитьФормуПоДаннымОбъекта();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПолеЗаголовка()
	
	Если ЗначениеЗаполнено(Объект.ШаблонЗаголовка) Тогда
		Объект.Заголовок = СтрШаблон("%1: %2",
			НСтр("ru = 'Автоподстановка'"),
			Объект.ШаблонЗаголовка);
	КонецЕсли;
	
	Элементы.Заголовок.РедактированиеТекста = Не ЗначениеЗаполнено(Объект.ШаблонЗаголовка);
	Элементы.Заголовок.КнопкаОчистки = ЗначениеЗаполнено(Объект.ШаблонЗаголовка);
	Элементы.ДобавлятьПредставлениеПриложений.Доступность =
		Не ЗначениеЗаполнено(Объект.ШаблонЗаголовка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПолеОписания()
	
	Если ЗначениеЗаполнено(Объект.ШаблонОписания) Тогда
		Описание = СтрШаблон("%1: %2",
			НСтр("ru = 'Автоподстановка'"),
			Объект.ШаблонОписания);
		ОписаниеФорматированное.Удалить();
		ОписаниеФорматированное.Добавить(Описание, Тип("ТекстФорматированногоДокумента"));
	КонецЕсли;
	
	Элементы.ОписаниеФорматированное.Доступность = Не ЗначениеЗаполнено(Объект.ШаблонОписания);
	Элементы.ОписаниеФорматированноеОчистить.Видимость = ЗначениеЗаполнено(Объект.ШаблонОписания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаНазначения(ДанныеНазначения, ДополнительныеПараметры) Экспорт
	
	Если ДанныеНазначения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ТекущиеДанные") Тогда
		ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	Иначе
		ТекущиеДанные = Объект.Назначения.Добавить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеНазначения);
	
	ОбновитьПредставлениеНазначений();
	
	Модифицированность = Истина;
	
	ПредложитьДобавитьВДоступПриНеобходимости(ТекущиеДанные.Кому);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеНазначений()
	
	Для Каждого СтрокаНазначения Из Объект.Назначения Цикл
		
		ДанныеНазначения = РаботаСЗадачамиКлиентСервер.НовыеДанныеНазначения();
		ЗаполнитьЗначенияСвойств(ДанныеНазначения, СтрокаНазначения);
		
		СтрокаНазначения.ПредставлениеНазначения = РаботаСЗадачами.ПредставлениеНазначения(
			ДанныеНазначения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПолеСоздал()
	
	Если РаботаСЗадачами.ЕстьПравоНазначенияШаблонов() Тогда
		Элементы.Создал.РежимВыбораИзСписка = Ложь;
	Иначе
		Элементы.Создал.РежимВыбораИзСписка = Истина;
		СотрудникиДляНастройкиШаблонов = РаботаСЗадачами.СотрудникиДляНастройкиШаблонов();
		Для Каждого Сотрудник Из СотрудникиДляНастройкиШаблонов Цикл
			Элементы.Создал.СписокВыбора.Добавить(Сотрудник, Строка(Сотрудник));
		КонецЦикла;
		Если ЗначениеЗаполнено(Объект.Создал)
			И Элементы.Создал.СписокВыбора.НайтиПоЗначению(Объект.Создал) = Неопределено Тогда
			Элементы.Создал.СписокВыбора.Добавить(Объект.Создал, Строка(Объект.Создал));
		КонецЕсли;
		Элементы.Создал.СписокВыбора.СортироватьПоПредставлению();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Приложение редактирует другой пользователь.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПриложенияПриложение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Приложения.Редактирует");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"ЦветТекста",
		ЦветаСтиля.ФайлЗанятыйДругимПользователем);
	
	// Приложение редактирует текущий пользователь.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПриложенияПриложение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение =
		Новый ПолеКомпоновкиДанных("Объект.Приложения.РедактируетТекущийПользователь");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра(
		"ЦветТекста",
		ЦветаСтиля.ФайлЗанятыйТекущимПользователем);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокДоступ()
	
	КоличествоДоступ = Объект.Доступ.Количество(); 
	
	Если КоличествоДоступ > 0 Тогда 
		ЗаголовокДоступ = СтрШаблон(НСтр("ru = 'Доступен (%1)'"), 
			КоличествоДоступ);
		Элементы.ГруппаДоступ.Поведение = ПоведениеОбычнойГруппы.Обычное;	
	Иначе 
		ЗаголовокДоступ = НСтр("ru = 'Доступен мне'");
		Элементы.ГруппаДоступ.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьДобавитьВДоступПриНеобходимости(Кому)
	
	Если Не ЗначениеЗаполнено(Кому) Или Кому = Объект.Создал Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Участник", Кому);
	НайденныеСтроки = Объект.Доступ.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВсеСотрудники = ПредопределенноеЗначение("Справочник.РабочиеГруппы.ВсеПользователи");
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Участник", ВсеСотрудники);
	НайденныеСтроки = Объект.Доступ.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения =
		Новый ОписаниеОповещения("ПослеПредложенияДобавитьДоступ", ЭтотОбъект, Кому);
	ТекстВопроса = СтрШаблон(
			НСтр("ru = 'Шаблон был назначен ""%1"", при этом доступа к шаблону может не быть.
			|
			|Добавить доступ?'"),
			Кому);
	ОбщегоНазначенияДокументооборотКлиент.ПоказатьВопросДаНет(ОписаниеОповещения, ТекстВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПредложенияДобавитьДоступ(Результат, Кому) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Объект.Доступ.Добавить();
	НоваяСтрока.Участник = Кому;
	ЗаполнитьИконку(НоваяСтрока);
	
	ОбновитьЗаголовокДоступ();
	
КонецПроцедуры

#КонецОбласти