#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Создал = Сотрудники.ОсновнойСотрудник();
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.Задача") Тогда
		ОбработкаЗаполненияПоЗадаче(ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияДокументооборот.УстановитьДополнительноеСвойствоПредыдущиеЗначенияРеквизитов(ЭтотОбъект);
	
	Если ДополнительныеСвойства.ЭтоНовый И Не ЗначениеЗаполнено(ДатаСоздания) Тогда
		ДатаСоздания = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ДополнительныеСвойства.ЭтоНовый И Не ЗначениеЗаполнено(Создал) Тогда
		Создал = Сотрудники.ОсновнойСотрудник();
	КонецЕсли;
	
	ДатаИзменения = ТекущаяДатаСеанса();
	
	СкопироватьПриложенияДругихЗадач();
	
	ПротоколированиеРаботыСотрудников.ЗаписатьОткрытие(Ссылка);
	
	ОбщегоНазначенияДокументооборотКлиентСервер.УдалитьПустыеСтрокиТаблицы(Доступ, "Участник");
	ОбщегоНазначенияДокументооборот.УдалитьДублиСтрокТабличнойЧасти(
		Доступ,
		Метаданные.Справочники.ШаблоныЗадач.ТабличныеЧасти.Доступ);
	
	ОбщегоНазначенияДокументооборот.УдалитьДублиСтрокТабличнойЧасти(
		Назначения,
		Метаданные.Справочники.ШаблоныЗадач.ТабличныеЧасти.Назначения);
	
	ОбщегоНазначенияДокументооборотКлиентСервер.УдалитьПустыеСтрокиТаблицы(Приложения, "Приложение");
	ОбщегоНазначенияДокументооборот.УдалитьДублиСтрокТабличнойЧасти(
		Приложения,
		Метаданные.Справочники.ШаблоныЗадач.ТабличныеЧасти.Приложения);
		
	ОбщегоНазначенияДокументооборотКлиентСервер.УдалитьПустыеСтрокиТаблицы(Участники, "Участник");
	ОбщегоНазначенияДокументооборот.УдалитьДублиСтрокТабличнойЧасти(
		Участники,
		Метаданные.Справочники.ШаблоныЗадач.ТабличныеЧасти.Участники);
	
	Если ПометкаУдаления Тогда
		Назначения.Очистить();
	КонецЕсли;
	
	Если ПометкаУдаления Или Недействителен Тогда
		Пользователь = Справочники.Пользователи.ПустаяСсылка();
	Иначе
		Пользователь = Сотрудники.ЛюбойПользовательСотрудника(Создал);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПометитьУдаленныеПриложения();
	
	ОбновитьПроектПриложений();
	
	РасширитьРабочиеГруппыПриложений();
	
	ПротоколированиеРаботыСотрудников.ПриЗаписиОбъектаДанных(ЭтотОбъект);
	
	ИзмениласьПометкаУдаления = ОбщегоНазначенияДокументооборот.ИзменилосьЗначениеРеквизитов(
		ЭтотОбъект,
		"ПометкаУДаления");
	Если ИзмениласьПометкаУдаления Тогда
		РаботаСФайламиВызовСервера.ПометитьНаУдалениеПриложенныеФайлы(Ссылка, ПометкаУдаления);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	СотрудникиДляНастройкиШаблонов = РаботаСЗадачами.СотрудникиДляНастройкиШаблонов();
	
	ДатаСоздания = Дата(1, 1, 1);
	ДатаИзменения = Дата(1, 1, 1);
	Если СотрудникиДляНастройкиШаблонов.Найти(Создал) = Неопределено Тогда
		Создал = Сотрудники.ОсновнойСотрудник();
	КонецЕсли;
	ПометкаУдаления = Ложь;
	
	Если Не РаботаСЗадачами.ЕстьПравоНазначенияШаблонов() Тогда
		Для Каждого СтрокаНазначения Из Назначения Цикл
			Если СотрудникиДляНастройкиШаблонов.Найти(СтрокаНазначения.Кому) = Неопределено Тогда
				СтрокаНазначения.Кому = Сотрудники.ОсновнойСотрудник();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Копирует файлы, указанные как приложения, к данной задаче.
//
Процедура СкопироватьПриложенияДругихЗадач()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВсеПриложенныеФайлы = Новый Массив; // Массив из СправочникСсылка.Файлы
	Для Каждого СтрокаПриложения Из Приложения Цикл
		
		Если ТипЗнч(СтрокаПриложения.Приложение) <> Тип("СправочникСсылка.Файлы") Тогда
			Продолжить;
		КонецЕсли;
		
		ВсеПриложенныеФайлы.Добавить(СтрокаПриложения.Приложение);
		
	КонецЦикла;
	
	Если ВсеПриложенныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПодходящиеТипыВладельцев = Новый Массив;
	ПодходящиеТипыВладельцев.Добавить(Тип("СправочникСсылка.ШаблоныЗадач"));
	ПодходящиеТипыВладельцев.Добавить(Тип("ДокументСсылка.Задача"));
	ПодходящиеТипыВладельцев.Добавить(Тип("ДокументСсылка.ДействиеЗадачи"));
	ПодходящиеТипыВладельцев.Добавить(Тип("БизнесПроцессСсылка.Исполнение"));
	ПодходящиеТипыВладельцев.Добавить(Тип("БизнесПроцессСсылка.КомплексныйПроцесс"));
	ПодходящиеТипыВладельцев.Добавить(Тип("БизнесПроцессСсылка.Ознакомление"));
	ПодходящиеТипыВладельцев.Добавить(Тип("БизнесПроцессСсылка.Подписание"));
	ПодходящиеТипыВладельцев.Добавить(Тип("БизнесПроцессСсылка.Приглашение"));
	ПодходящиеТипыВладельцев.Добавить(Тип("БизнесПроцессСсылка.Рассмотрение"));
	ПодходящиеТипыВладельцев.Добавить(Тип("БизнесПроцессСсылка.Регистрация"));
	ПодходящиеТипыВладельцев.Добавить(Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач"));
	ПодходящиеТипыВладельцев.Добавить(Тип("БизнесПроцессСсылка.Согласование"));
	ПодходящиеТипыВладельцев.Добавить(Тип("БизнесПроцессСсылка.Утверждение"));
	
	ФайлыДляПереноса = Новый Массив;
	ВладельцыФайлов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВсеПриложенныеФайлы, "ВладелецФайла");
	Для Каждого КлючИЗначение Из ВладельцыФайлов Цикл
		
		ПриложенныйФайл = КлючИЗначение.Ключ;
		ВладелецПриложенногоФайла = КлючИЗначение.Значение;
		
		ТипВладельца = ТипЗнч(ВладелецПриложенногоФайла);
		
		Если ПодходящиеТипыВладельцев.Найти(ТипВладельца) = Неопределено
			Или ВладелецПриложенногоФайла = Ссылка Тогда
			Продолжить;
		КонецЕсли;
		
		ФайлыДляПереноса.Добавить(ПриложенныйФайл);
		
	КонецЦикла;
	
	Если ФайлыДляПереноса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНовогоОбъекта = ОбщегоНазначенияДокументооборот.СсылкаНовогоОбъекта(ЭтотОбъект);
	Для Каждого СтрокаПриложения Из Приложения Цикл
		
		Если ФайлыДляПереноса.Найти(СтрокаПриложения.Приложение) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПриложения.Приложение = РаботаСФайламиВызовСервера.СкопироватьФайл(
			СтрокаПриложения.Приложение,
			СсылкаНовогоОбъекта);
		
	КонецЦикла;
	
КонецПроцедуры

// Помечает на удаление файлы, которые были приложениями и были удалены.
//
Процедура ПометитьУдаленныеПриложения()
	
	ИзменилисьПриложения = ОбщегоНазначенияДокументооборот.ИзменилосьЗначениеРеквизитов(
		ЭтотОбъект,
		"Приложения");
	Если ДополнительныеСвойства.ЭтоНовый Или Не ИзменилисьПриложения Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущиеЗначенияРеквизитов = ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов;
	
	Для Каждого СтрПриложения Из ПредыдущиеЗначенияРеквизитов.Приложения Цикл
		
		Если Приложения.Найти(СтрПриложения.Приложение, "Приложение") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(СтрПриложения.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
			ФайлОбъект = СтрПриложения.Приложение.ПолучитьОбъект();
			Если ФайлОбъект.ВладелецФайла = Ссылка Тогда
				ФайлОбъект.Редактирует = Неопределено;
				ФайлОбъект.ПометкаУдаления = Истина;
				ФайлОбъект.Записать();
			КонецЕсли;	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляет проект приложений.
// 
Процедура ОбновитьПроектПриложений()
	
	ИзменилсяПроект =
		ОбщегоНазначенияДокументооборот.ИзменилосьЗначениеРеквизитов(ЭтотОбъект, "Проект");
	
	Если ДополнительныеСвойства.ЭтоНовый Или Не ИзменилсяПроект Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Файлы.Ссылка КАК Файл
			|ИЗ
			|	Справочник.Файлы КАК Файлы
			|ГДЕ
			|	Файлы.ВладелецФайла = &ВладельцФайлов
			|	И Файлы.Проект <> &Проект");
		
		Запрос.УстановитьПараметр("ВладельцФайлов", Ссылка);
		Запрос.УстановитьПараметр("Проект", Проект);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.Файлы");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Файл);
			Блокировка.Заблокировать();
			
			ФайлОбъект = Выборка.Файл.ПолучитьОбъект();
			Если ФайлОбъект.Проект = Проект Тогда
				Продолжить;
			КонецЕсли;
			
			ФайлОбъект.Проект = Проект;
			ФайлОбъект.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Расширяет рабочие группы приложений.
// Права на приложения проверяются и расширяются не перед записью, а при записи,
// т.к. часть прав приложений зависит от самой задачи - пока нового исполнителя нет в задачи,
// у него нет и прав на приложения.
// 
Процедура РасширитьРабочиеГруппыПриложений()
	
	ЕстьИзмененияРабочейГруппы = ОбщегоНазначенияДокументооборот.ИзменилосьЗначениеРеквизитов(
		ЭтотОбъект,
		"Создал, Доступ, Приложения");
	
	Если ПометкаУдаления Или Не ЕстьИзмененияРабочейГруппы Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПредыдущиеЗначенияРеквизитов = ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов;
	
	// На новые приложения предоставим права всем участникам.
	СтарыеПриложения = ПредыдущиеЗначенияРеквизитов.Приложения.ВыгрузитьКолонку("Приложение");
	
	КоличествоЭлементов = СтарыеПриложения.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ОбратныйИндекс = КоличествоЭлементов - Индекс;
		ЭлементМассива = СтарыеПриложения[ОбратныйИндекс];
		Если Не РаботаСЗадачамиКлиентСервер.ЭтоПриложениеБезПрав(ЭлементМассива) Тогда
			Продолжить;
		КонецЕсли;
		
		СтарыеПриложения.Удалить(ОбратныйИндекс);
		
	КонецЦикла;
	
	РаботаСЗадачами.ИсключитьФайлыЗадач(СтарыеПриложения);
	
	ПриложенияЗадачи = Приложения.ВыгрузитьКолонку("Приложение");
	
	НовыеПриложения = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		НовыеПриложения,
		ПриложенияЗадачи);
	
	КоличествоЭлементов = НовыеПриложения.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ОбратныйИндекс = КоличествоЭлементов - Индекс;
		ЭлементМассива = НовыеПриложения[ОбратныйИндекс];
		Если Не РаботаСЗадачамиКлиентСервер.ЭтоПриложениеБезПрав(ЭлементМассива) Тогда
			Продолжить;
		КонецЕсли;
		
		НовыеПриложения.Удалить(ОбратныйИндекс);
		
	КонецЦикла;
	
	РаботаСЗадачами.ИсключитьФайлыЗадач(НовыеПриложения);
	
	ДобавленныеПриложения = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		НовыеПриложения,
		СтарыеПриложения);
	
	ВсеПриложения = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВсеПриложения,
		ПриложенияЗадачи);
	
	КоличествоЭлементов = ВсеПриложения.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ОбратныйИндекс = КоличествоЭлементов - Индекс;
		ЭлементМассива = ВсеПриложения[ОбратныйИндекс];
		Если Не РаботаСЗадачамиКлиентСервер.ЭтоПриложениеБезПрав(ЭлементМассива) Тогда
			Продолжить;
		КонецЕсли;
		
		ВсеПриложения.Удалить(ОбратныйИндекс);
		
	КонецЦикла;
	
	РаботаСЗадачами.ИсключитьФайлыЗадач(ВсеПриложения);
	
	// Новым участникам предоставим права на все приложения.
	СтарыеУчастникиРГ = Новый Массив;
	СтарыеУчастникиРГ.Добавить(ПредыдущиеЗначенияРеквизитов.Создал);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		СтарыеУчастникиРГ,
		ПредыдущиеЗначенияРеквизитов.Доступ.ВыгрузитьКолонку("Участник"),
		Истина);
	
	НовыеУчастникиРГ = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Создал);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		НовыеУчастникиРГ,
		Доступ.ВыгрузитьКолонку("Участник"),
		Истина);
	
	ДобавленныеУчастникиРГ = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		НовыеУчастникиРГ,
		СтарыеУчастникиРГ);
	
	ВсеУчастникиРГ = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Создал);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВсеУчастникиРГ,
		Доступ.ВыгрузитьКолонку("Участник"),
		Истина);
	
	ОбщегоНазначенияДокументооборотКлиентСервер.УдалитьПустыеЗначения(ДобавленныеПриложения);
	ОбщегоНазначенияДокументооборотКлиентСервер.УдалитьПустыеЗначения(ВсеУчастникиРГ);
	ОбщегоНазначенияДокументооборотКлиентСервер.УдалитьПустыеЗначения(ВсеПриложения);
	ОбщегоНазначенияДокументооборотКлиентСервер.УдалитьПустыеЗначения(ДобавленныеУчастникиРГ);
	
	Если ДобавленныеПриложения.Количество() > 0 Тогда
		
		РаботаСРабочимиГруппами.РасширитьРабочуюГруппуПредметов(
			ДобавленныеПриложения,
			ВсеУчастникиРГ,
			Ложь,
			Ссылка);
		
		РаботаСЗадачами.ПроверитьПраваНаПриложения(
			ДобавленныеПриложения,
			ВсеУчастникиРГ);
		
	КонецЕсли;
	
	Если ДобавленныеУчастникиРГ.Количество() > 0 Тогда
		
		НеобработанныеПриложенияСПравомИзменения = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
			ВсеПриложения,
			ДобавленныеПриложения);
		РаботаСРабочимиГруппами.РасширитьРабочуюГруппуПредметов(
			НеобработанныеПриложенияСПравомИзменения,
			ДобавленныеУчастникиРГ,
			Ложь, 
			Ссылка);
		
		РаботаСЗадачами.ПроверитьПраваНаПриложения(
			НеобработанныеПриложенияСПравомИзменения,
			ДобавленныеУчастникиРГ);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка заполнения по задаче.
// 
// Параметры:
//  Задача - ДокументСсылка.Задача
// 
Процедура ОбработкаЗаполненияПоЗадаче(Задача)
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задача,
		"Автор, ВидЗадачи, ДатаСоздания, Заголовок, ОписаниеФорматированное, Приоритет, Проект,
		|Срок, ТрудоемкостьДо, ТрудоемкостьОт, ТрудоемкостьСтрокой,
		|Приложения, Участники");
	
	ПриложенияЗадачи = РеквизитыЗадачи.Приложения.Выгрузить();
	ПриложенияЗадачи.Сортировать("НомерСтроки");
	
	УчастникиаЗадачи = РеквизитыЗадачи.Участники.Выгрузить();
	УчастникиаЗадачи.Сортировать("НомерСтроки");
	
	Автор = РеквизитыЗадачи.Автор;
	
	ВидЗадачи = РеквизитыЗадачи.ВидЗадачи;
	
	Наименование = РеквизитыЗадачи.Заголовок;
	Заголовок = РеквизитыЗадачи.Заголовок;
	ШаблонЗаголовка = Справочники.АвтоподстановкиДляОбъектов.ПустаяСсылка();
	ДобавлятьПредставлениеПриложений = Ложь;
	
	ОчищатьПриложения = Ложь;
	Приложения.Очистить();
	Для Каждого СтрокаПриложения Из ПриложенияЗадачи Цикл
		НоваяСтрока = Приложения.Добавить();
		НоваяСтрока.Приложение = СтрокаПриложения.Приложение;
	КонецЦикла;
	
	ОписаниеЗадачи = РеквизитыЗадачи.ОписаниеФорматированное.Получить();
	ОписаниеФорматированное = Новый ХранилищеЗначения(ОписаниеЗадачи);
	ШаблонОписания = Справочники.АвтоподстановкиДляОбъектов.ПустаяСсылка();
	
	Приоритет = РеквизитыЗадачи.Приоритет;
	
	Проект = РеквизитыЗадачи.Проект;
	
	Срок = Дата(1, 1, 1);
	СрокДни = 0;
	СрокЧасы = 0;
	СрокМинуты = 0;
	СрокВариантУстановки = Перечисления.ВариантыУстановкиСрокаИсполнения.ПустаяСсылка();
	Если ЗначениеЗаполнено(РеквизитыЗадачи.ДатаСоздания) И ЗначениеЗаполнено(РеквизитыЗадачи.Срок) Тогда
		
		ДлительностьДней = Неопределено;
		
		ГрафикРаботы = ГрафикиРаботы.ГрафикРаботыСотрудника(Сотрудники.ОсновнойСотрудник());
		Если ЗначениеЗаполнено(ГрафикРаботы) Тогда
			ДлительностьПериода = ГрафикиРаботы.ПолучитьДлительностьПериода(
				ГрафикРаботы,
				РеквизитыЗадачи.ДатаСоздания,
				РеквизитыЗадачи.Срок);
			Если ДлительностьПериода <> Неопределено Тогда
				ДлительностьДней = ДлительностьПериода.КоличествоПолныхРабочихДней;
				Если ДлительностьПериода.КоличествоПолныхРабочихЧасов > 0 Тогда
					ДлительностьДней = ДлительностьДней +1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ДлительностьДней = Неопределено Тогда
			
			ДлительностьСекунд = РеквизитыЗадачи.Срок - РеквизитыЗадачи.ДатаСоздания;
			
			ДлительностьДней = Цел(ДлительностьСекунд / 86400);
			ДлительностьСекунд = ДлительностьСекунд - ДлительностьДней * 86400;
			
			Если ДлительностьСекунд > 0 Тогда
				ДлительностьДней = ДлительностьДней + 1;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДлительностьДней > 0 Тогда
			СрокДни = ДлительностьДней;
			СрокВариантУстановки = Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
		КонецЕсли;
		
	КонецЕсли;
	
	ТрудоемкостьДо = РеквизитыЗадачи.ТрудоемкостьДо;
	ТрудоемкостьОт = РеквизитыЗадачи.ТрудоемкостьОт;
	Челчасов = РеквизитыЗадачи.ТрудоемкостьСтрокой;
	
	Участники.Очистить();
	Для Каждого СтрокаУчастника Из УчастникиаЗадачи Цикл
		НоваяСтрока = Участники.Добавить();
		НоваяСтрока.ВидУчастника = СтрокаУчастника.ВидУчастника;
		НоваяСтрока.Участник = СтрокаУчастника.Участник;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли


