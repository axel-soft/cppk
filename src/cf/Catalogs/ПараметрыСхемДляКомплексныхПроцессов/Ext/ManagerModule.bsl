#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает пустую структуру данных параметров схемы для комплексного процесса. 
// 
// Возвращаемое значение:
// 	Структура:
//   * Схема - СправочникСсылка.СхемыПроцессов
//   * ВладелецСхемы - СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов,
//                     БизнесПроцессСсылка.КомплексныйПроцесс
//   * ОбъектДоступа - СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов,
//                     БизнесПроцессСсылка.КомплексныйПроцесс
//   * ВерсияДанных - Строка - версия данных параметров схемы.
//   * ИсточникДанных - СправочникССылка.ИсточникиДанных - признак того, что схема изменяется в другой системе.
//   * НастройкиЭлементов - Соответствие -
//   	см. РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураНастроекЭлементовСхемы
//   * ИдентификаторыНастроек - Соответствие
//      см. РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураИдентификаторовЭлементовСхемы
//   * ПорядокСортировкиНастроекЭлементов - Соответствие
//     ** Ключ - Строка - имя элемента с настройкой в схеме.
//     ** Значение - Число - порядок
//   * ПометкаУдаления - Булево - признак пометки удаления.
//
Функция СтруктураДанныхПараметровСхемы() Экспорт
	
	Возврат РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураДанныхПараметровСхемы();
	
КонецФункции

// Возвращает данные параметров схемы схемы для комплексного процесса.
//  
// Параметры:
// 	ПараметрыСхемы - СправочникСсылка.ПараметрыСхемДляКомплексныхПроцессов 
// 	
// Возвращаемое значение:
//  Структура - см. СтруктураДанныхПараметровСхемы
// 	
Функция ДанныеПараметровСхемы(ПараметрыСхемы) Экспорт
	
	ПараметрыСхемыОбъект = ПараметрыСхемы.ПолучитьОбъект();
	
	ДанныеПараметров = СтруктураДанныхПараметровСхемы();
	ДанныеПараметров.Схема = ПараметрыСхемыОбъект.Схема;
	ДанныеПараметров.ВладелецСхемы = ПараметрыСхемыОбъект.ВладелецСхемы;
	ДанныеПараметров.ВерсияДанных = ПараметрыСхемыОбъект.ВерсияДанных;
	ДанныеПараметров.ОбъектДоступа = ПараметрыСхемыОбъект.ОбъектДоступа;
	
	ДанныеПараметров.ИсточникДанных = ПараметрыСхемыОбъект.ИсточникДанных;
		
	Для Каждого СтрокаТаблицы Из ПараметрыСхемыОбъект.НастройкиЭлементов Цикл
		
		ДанныеПараметров.ИдентификаторыНастроек[СтрокаТаблицы.ИмяЭлемента] = 
			СтрокаТаблицы.Идентификатор;
			
		ДанныеПараметров.ПорядокСортировкиНастроекЭлементов[СтрокаТаблицы.ИмяЭлемента] = 
			СтрокаТаблицы.ПорядокСортировки;
			
		Если СтрокаТаблицы.Настройка = Неопределено Тогда
			ДанныеПараметров.НастройкиЭлементов[СтрокаТаблицы.ИмяЭлемента] = 
				СтрокаТаблицы.НастройкаХранилище.Получить();
		Иначе
			ДанныеПараметров.НастройкиЭлементов[СтрокаТаблицы.ИмяЭлемента] = 
				СтрокаТаблицы.Настройка;			
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат ДанныеПараметров;
	
КонецФункции

// Записывает данные параметров схемы для комплексного процесса.
// 
// Если передается пустая ссылка, то создается новый элемент справочника.
// Если передается идентификатор, то обновляется соответствующий элемент справочника или создается
// новый по этому идентификатору.
// Если передается ссылка на элемент, то он и обновляется.
//   
// Параметры:
// 	ПараметрыСхемы - СправочникСсылка.ПараметрыСхемДляКомплексныхПроцессов, УникальныйИдентификатор
// 	ДанныеПараметров - Структура - см. СтруктураДанныхПараметровСхемы.
// 	ПроверятьВозможностьИзменения - Булево - признак проверки возможности изменения параметров.
// 	Загрузка - Булево - режим загрузки данных. 
//
// Возвращаемое значение:
//  Структура
//   * ПараметрыСхемы - СправочникСсылка.ПараметрыСхемДляКомплексныхПроцессов
//   * ВерсияДанных - Строка
//   * ПорядокСортировкиНастроекЭлементов - Соответствие - новый порядок настроек элементов.
//      ** Ключ - Строка - имя элемента с настройкой в схеме.
//      ** Значение - Число - порядок
// 	
Функция ЗаписатьДанныеПараметровСхемы(ПараметрыСхемы, ДанныеПараметров,
	ПроверятьВозможностьИзменения = Истина,
	Загрузка = Ложь) Экспорт
	
	РезультатЗаписи = Новый Структура;
	РезультатЗаписи.Вставить("ПараметрыСхемы", ПустаяСсылка());
	РезультатЗаписи.Вставить("ВерсияДанных", "");
	РезультатЗаписи.Вставить("ПорядокСортировкиНастроекЭлементов", Новый Соответствие());
	
	ТипСсылкиНаПараметры = ТипЗнч(ПараметрыСхемы);
	
	НовыйОбъектПараметров = Ложь;	
	Если ТипСсылкиНаПараметры = Тип("СправочникСсылка.ПараметрыСхемДляКомплексныхПроцессов")
		И ЗначениеЗаполнено(ПараметрыСхемы) Тогда
		
		ЗаблокироватьДанныеДляРедактирования(ПараметрыСхемы);
		ПараметрыСхемыОбъект = ПараметрыСхемы.ПолучитьОбъект();
		
	ИначеЕсли ТипСсылкиНаПараметры = Тип("УникальныйИдентификатор") Тогда
		
		СсылкаПоИдентификатору = ПолучитьСсылку(ПараметрыСхемы);
		Если ОбщегоНазначения.СсылкаСуществует(СсылкаПоИдентификатору) Тогда
			ЗаблокироватьДанныеДляРедактирования(СсылкаПоИдентификатору);
			ПараметрыСхемыОбъект = СсылкаПоИдентификатору.ПолучитьОбъект();
		Иначе
			ПараметрыСхемыОбъект = СоздатьЭлемент();
			ПараметрыСхемыОбъект.УстановитьСсылкуНового(СсылкаПоИдентификатору);
			ПараметрыСхемыОбъект.Схема = ДанныеПараметров.Схема;
			ПараметрыСхемыОбъект.ВладелецСхемы = ДанныеПараметров.ВладелецСхемы;
			ПараметрыСхемыОбъект.ОбъектДоступа = ДанныеПараметров.ОбъектДоступа;
			НовыйОбъектПараметров = Истина;
		КонецЕсли;
		
	Иначе
		ПараметрыСхемыОбъект = СоздатьЭлемент();
		ПараметрыСхемыОбъект.Схема = ДанныеПараметров.Схема;
		ПараметрыСхемыОбъект.ВладелецСхемы = ДанныеПараметров.ВладелецСхемы;
		ПараметрыСхемыОбъект.ОбъектДоступа = ДанныеПараметров.ОбъектДоступа;
		НовыйОбъектПараметров = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСхемыОбъект.ВерсияДанных)
		И ЗначениеЗаполнено(ДанныеПараметров.ВерсияДанных)
		И ПараметрыСхемыОбъект.ВерсияДанных <> ДанныеПараметров.ВерсияДанных Тогда
		
		ВызватьИсключение НСтр("ru = 'Не удалось сохранить изменения.
			|Возможно, параметры схемы были изменены другим сотрудником.'");
	КонецЕсли;
	
	ПараметрыСхемыОбъект.ИсточникДанных = ДанныеПараметров.ИсточникДанных;
	
	ПараметрыСхемыОбъект.НастройкиЭлементов.Очистить();
	Для Каждого НастройкаПараметра Из ДанныеПараметров.НастройкиЭлементов Цикл
		СтрокаТаблицы = ПараметрыСхемыОбъект.НастройкиЭлементов.Добавить();
		
		СтрокаТаблицы.Идентификатор = 
			ДанныеПараметров.ИдентификаторыНастроек[НастройкаПараметра.Ключ];
		
		СтрокаТаблицы.ИмяЭлемента = НастройкаПараметра.Ключ;
		
		Если ТипЗнч(НастройкаПараметра.Значение) = Тип("НастройкиКомпоновкиДанных") Тогда
			СтрокаТаблицы.НастройкаХранилище = Новый ХранилищеЗначения(НастройкаПараметра.Значение);
		Иначе
			СтрокаТаблицы.Настройка = НастройкаПараметра.Значение;
		КонецЕсли;
						
	КонецЦикла;
	
	Если Не ПроверятьВозможностьИзменения И Не Загрузка Тогда
		ПараметрыСхемыОбъект.ОтключитьПроверкуВозможностиИзменения();
	КонецЕсли;
	
	ПараметрыСхемыОбъект.ПометкаУдаления = ДанныеПараметров.ПометкаУдаления;
	
	ПараметрыСхемыОбъект.ОбменДанными.Загрузка = Загрузка;
	ПараметрыСхемыОбъект.Записать();
	
	Если Не НовыйОбъектПараметров Тогда
		РазблокироватьДанныеДляРедактирования(ПараметрыСхемыОбъект.Ссылка);
	КонецЕсли;
	
	РезультатЗаписи.ПараметрыСхемы = ПараметрыСхемыОбъект.Ссылка;
	РезультатЗаписи.ВерсияДанных = ПараметрыСхемыОбъект.ВерсияДанных;
	
	Для Каждого СтрокаТаблицы Из ПараметрыСхемыОбъект.НастройкиЭлементов Цикл
		РезультатЗаписи.ПорядокСортировкиНастроекЭлементов[СтрокаТаблицы.ИмяЭлемента] =
			СтрокаТаблицы.ПорядокСортировки;
	КонецЦикла;
	
	Возврат РезультатЗаписи;
	
КонецФункции

// Возвращает ссылку на параметры схемы по владельцу.
// 
// Параметры:
//  ВладелецСхемы - СправочникСсылка.ПараметрыСхемДляКомплексныхПроцессов,
//                  БизнесПроцессСсылка.КомплексныйПроцесс
// 
// Возвращаемое значение:
//   СправочникСсылка.ПараметрыСхемДляКомплексныхПроцессов
// 	
Функция ПараметрыСхемыПоВладельцу(ВладелецСхемы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПараметрыСхемДляКомплексныхПроцессов.Ссылка
		|ИЗ
		|	Справочник.ПараметрыСхемДляКомплексныхПроцессов КАК ПараметрыСхемДляКомплексныхПроцессов
		|ГДЕ
		|	ПараметрыСхемДляКомплексныхПроцессов.ВладелецСхемы = &ВладелецСхемы";
	Запрос.УстановитьПараметр("ВладелецСхемы", ВладелецСхемы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка; 
	КонецЕсли;
	
	Возврат ПустаяСсылка();
	
КонецФункции

// Возвращает ссылку на параметры по переданной схеме процесса.
// 
// Параметры:
//  СхемаПроцесса - СправочникСсылка.СхемыПроцессов
// 
// Возвращаемое значение:
//   СправочникСсылка.ПараметрыСхемДляКомплексныхПроцессов
// 	
Функция ПараметрыПоСхеме(СхемаПроцесса) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПараметрыСхемДляКомплексныхПроцессов.Ссылка
		|ИЗ
		|	Справочник.ПараметрыСхемДляКомплексныхПроцессов КАК ПараметрыСхемДляКомплексныхПроцессов
		|ГДЕ
		|	ПараметрыСхемДляКомплексныхПроцессов.Схема = &СхемаПроцесса";
	Запрос.УстановитьПараметр("СхемаПроцесса", СхемаПроцесса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка; 
	КонецЕсли;
	
	Возврат ПустаяСсылка();
	
КонецФункции

// Возвращает доступность изменения параметров схемы.
// 
// Параметры:
// 	ПараметрыСхемы - СправочникСсылка.ПараметрыСхемДляКомплексныхПроцессов,
// 	                 СправочникОбъект.ПараметрыСхемДляКомплексныхПроцессов
// 	
// Возвращаемое значение:
//  Булево
//  
//
Функция ДоступностьИзмененияПараметровСхемы(ПараметрыСхемы) Экспорт
	
	Если РольДоступна("ПолныеПрава") = Истина Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыСхемы) = Тип("СправочникОбъект.ПараметрыСхемДляКомплексныхПроцессов") Тогда
		ОбъектДоступа = ПараметрыСхемы.ОбъектДоступа;
	Иначе
		ОбъектДоступа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыСхемы, "ОбъектДоступа");
	КонецЕсли;
		
	ПраваНаОбъектДоступа = ДокументооборотПраваДоступа.ПраваСотрудниковПоОбъекту(ОбъектДоступа,
		Истина, Сотрудники.ВсеСотрудникиТекущегоПользователя());
		
	Если ПраваНаОбъектДоступа.Найти(Истина, "Изменение") <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
		
КонецФункции

// Объект доступа параметров по владельцу схемы.
// 
// Параметры:
//  ВладелецСхемы - БизнесПроцессОбъект.КомплексныйПроцесс,
//                  БизнесПроцессСсылка.КомплексныйПроцесс,
//                  СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов,
//                  СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов
// 
// Возвращаемое значение:
//  СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов,
//  БизнесПроцессСсылка.КомплексныйПроцесс
//
Функция ОбъектДоступаПараметровПоВладельцуСхемы(ВладелецСхемы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
		
	ТипВладельцаСхемы = ТипЗнч(ВладелецСхемы);
	
	ОбъектДоступа = ВладелецСхемы;
	КомплексныйПроцессВладельца = Неопределено;
	
	Если ТипВладельцаСхемы = Тип("БизнесПроцессОбъект.КомплексныйПроцесс") Тогда
		ОбъектДоступа = ВладелецСхемы.СсылкаНаПроцесс();
	ИначеЕсли ТипВладельцаСхемы = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов") Тогда
		 КомплексныйПроцессВладельца = 	
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецСхемы, "КомплексныйПроцесс");
	ИначеЕсли ТипВладельцаСхемы = Тип("СправочникОбъект.ШаблоныКомплексныхБизнесПроцессов") Тогда
		//@skip-warning
		ОбъектДоступа = ВладелецСхемы.СсылкаНаШаблон();
		//@skip-warning
		КомплексныйПроцессВладельца = ВладелецСхемы.КомплексныйПроцесс;
	Иначе
		ВызватьИсключение НСтр("ru = 'Владелец схемы не поддерживается.'",
			ОбщегоНазначения.КодОсновногоЯзыка());		 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КомплексныйПроцессВладельца) Тогда
		ОбъектДоступа = КомплексныйПроцессВладельца;
	КонецЕсли;
		
	Возврат ОбъектДоступа;
	
КонецФункции

// Возвращает отслеживаемые реквизиты для дополнительного свойства ПредыдущиеЗначенияРеквизитов.
//
// Возвращаемое значение:
//  Строка - Отслеживаемые реквизиты.
//
Функция ОтслеживаемыеРеквизиты() Экспорт
		
	Возврат "ПометкаУдаления";
	
КонецФункции

// Удаляет порцию устаревших данных.
// 
// Возвращаемое значение - Булево - Истина, если были найдены устаревшие данные, в противном случае Ложь.
// 
Функция УдалитьПорциюУстаревшихДанных() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
		
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 2000
		|	ПараметрыСхемДляКомплексныхПроцессов.Ссылка,
		|	ПараметрыСхемДляКомплексныхПроцессов.Схема
		|ИЗ
		|	Справочник.ПараметрыСхемДляКомплексныхПроцессов КАК ПараметрыСхемДляКомплексныхПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныКомплексныхБизнесПроцессов КАК ШаблоныКомплексныхБизнесПроцессов
		|		ПО ПараметрыСхемДляКомплексныхПроцессов.ВладелецСхемы = ШаблоныКомплексныхБизнесПроцессов.Ссылка
		|		И ПараметрыСхемДляКомплексныхПроцессов.ОбъектДоступа = ШаблоныКомплексныхБизнесПроцессов.Ссылка
		|ГДЕ
		|	ПараметрыСхемДляКомплексныхПроцессов.ВладелецСхемы ССЫЛКА Справочник.ШаблоныКомплексныхБизнесПроцессов
		|	И ШаблоныКомплексныхБизнесПроцессов.Ссылка ЕСТЬ NULL
		|	И ПараметрыСхемДляКомплексныхПроцессов.ПометкаУдаления = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 2000
		|	ПараметрыСхемДляКомплексныхПроцессов.Ссылка,
		|	ПараметрыСхемДляКомплексныхПроцессов.Схема
		|ИЗ
		|	Справочник.ПараметрыСхемДляКомплексныхПроцессов КАК ПараметрыСхемДляКомплексныхПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.КомплексныйПроцесс КАК КомплексныйПроцесс
		|		ПО ПараметрыСхемДляКомплексныхПроцессов.ВладелецСхемы = КомплексныйПроцесс.Ссылка
		|		И ПараметрыСхемДляКомплексныхПроцессов.ОбъектДоступа = КомплексныйПроцесс.Ссылка
		|ГДЕ
		|	ПараметрыСхемДляКомплексныхПроцессов.ПометкаУдаления = ЛОЖЬ
		|	И ПараметрыСхемДляКомплексныхПроцессов.ВладелецСхемы ССЫЛКА БизнесПроцесс.КомплексныйПроцесс
		|	И КомплексныйПроцесс.Ссылка ЕСТЬ NULL";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
			
		Попытка
						
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ПараметрыОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПараметрыОбъект.УстановитьПометкуУдаления(Истина);
			РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Схема);
			СхемаОбъект = Выборка.Схема.ПолучитьОбъект();
			СхемаОбъект.УстановитьПометкуУдаления(Истина);
			РазблокироватьДанныеДляРедактирования(Выборка.Схема);
						
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Очистка параметров несформированных комплексных процессов/шаблонов'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
			
	КонецЦикла;
			 
	Возврат Выборка.Количество() > 0;
	
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("ВладелецСхемы");
		
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Представление = СтрШаблон(
		НСтр("ru = 'Параметры схемы для процесса ""%1""'"),
		Строка(Данные.ВладелецСхемы)); 
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
#Если ТолстыйКлиентУправляемоеПриложение Тогда
	// Не предусмотрено особого поведения для толстого клиента управляемого приложения.
#Иначе
	Если РаботаСКомплекснымиБизнесПроцессамиСобытия.ОбработатьПолучениеФормыПараметровСхемы(
		ВидФормы, Параметры, ВыбраннаяФорма, СтандартнаяОбработка) Тогда
		
		Возврат;
	КонецЕсли;
#КонецЕсли
	
КонецПроцедуры

#КонецОбласти