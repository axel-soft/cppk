#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет доступные реестры.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Реестры - Доступные реестры.
//
Функция ДоступныеРеестры() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРеестры") Тогда
		
		ДоступныеРеестры = Новый Массив;
		
		Возврат ДоступныеРеестры;
		
	КонецЕсли;
	
	КонтейнерыВсехСотрудниковТекущегоПользователя = Сотрудники.КонтейнерыВсехСотрудниковТекущегоПользователя();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Реестры.Ссылка КАК Реестр
		|ИЗ
		|	Справочник.Реестры КАК Реестры
		|ГДЕ
		|	Реестры.ПометкаУдаления = ЛОЖЬ
		|	И Реестры.Доступ.Контейнер В(&КонтейнерыВсехСотрудниковТекущегоПользователя)");
	
	Запрос.УстановитьПараметр(
		"КонтейнерыВсехСотрудниковТекущегоПользователя",
		КонтейнерыВсехСотрудниковТекущегоПользователя);
	
	ДоступныеРеестры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Реестр");
	
	ОписанияРеестров = ОписанияРеестров(ДоступныеРеестры);
	
	КоличествоЭлементов = ДоступныеРеестры.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ОбратныйИндекс = КоличествоЭлементов - Индекс;
		ДоступныйРеестр = ДоступныеРеестры[ОбратныйИндекс];
		ОписаниеРеестра = ОписанияРеестров[ДоступныйРеестр];
		
		Если ОписаниеРеестра.ВидыЭлементовРеестра.Количество() = 0 Тогда
			ДоступныеРеестры.Удалить(ОбратныйИндекс);
			Продолжить;
		КонецЕсли;
		
		Если ОписаниеРеестра.ДанныеРеестра = Перечисления.ДанныеРеестров.Мероприятия
			И Не ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеМероприятиями") Тогда
			ДоступныеРеестры.Удалить(ОбратныйИндекс);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДоступныеРеестры;
	
КонецФункции

// Формирует данные реестра.
//
// Параметры:
//  Реестр - СправочникСсылка.Реестры.
// 
// Возвращаемое значение:
//  Структура - Данные реестра. См. Справочники.Реестры.НовоеОписаниеРеестра().
//
Функция ОписаниеРеестра(Реестр) Экспорт
	
	Реестры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Реестр);
	ОписанияРеестров = ОписанияРеестров(Реестры);
	ОписаниеРеестра = ОписанияРеестров[Реестр];
	
	Возврат ОписаниеРеестра;
	
КонецФункции

// Формирует данные реестров.
//
// Параметры:
//  Реестры - Массив из СправочникСсылка.Реестры.
// 
// Возвращаемое значение:
//  Соответствие - Данные реестров.
//   * Ключ - СправочникСсылка.Реестры - Реестр.
//   * Значение - Структура - Данные реестра. См. Справочники.Реестры.ОписаниеРеестра().
//
Функция ОписанияРеестров(Реестры) Экспорт
	
	ОписанияРеестров = Новый Соответствие;
	Если Не ЗначениеЗаполнено(Реестры) Тогда
		Возврат ОписанияРеестров;
	КонецЕсли;
	
	Для Каждого Реестр Из Реестры Цикл
		ОписаниеРеестра = НовоеОписаниеРеестра();
		ОписаниеРеестра.Реестр = Реестр;
		ОписанияРеестров[Реестр] = ОписаниеРеестра;
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Реестры.Ссылка КАК Ссылка,
		|	Реестры.Наименование КАК Наименование,
		|	Реестры.НаименованиеЯзык1 КАК НаименованиеЯзык1,
		|	Реестры.ДанныеРеестра КАК ДанныеРеестра,
		|	Реестры.ВидыЭлементовРеестра.(
		|		ВидЭлементовРеестра КАК ВидЭлементовРеестра
		|	) КАК ВидыЭлементовРеестра
		|ИЗ
		|	Справочник.Реестры КАК Реестры
		|ГДЕ
		|	Реестры.Ссылка В (&Реестры)");
	
	Запрос.УстановитьПараметр("Реестры", Реестры);
	
	ВсеВидыЭлементовРеестра = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОписаниеРеестра = ОписанияРеестров[Выборка.Ссылка];
		ОписаниеРеестра.ДанныеРеестра = Выборка.ДанныеРеестра;
		ОписаниеРеестра.Заголовок = Выборка.Наименование;
		ОписаниеРеестра.КлючНазначенияИспользования = Лев(Строка(Выборка.Ссылка.УникальныйИдентификатор()), 128);
		ОписаниеРеестра.ВидыЭлементовРеестра =
			Выборка.ВидыЭлементовРеестра.Выгрузить().ВыгрузитьКолонку("ВидЭлементовРеестра");
		
		КонфигурацияИспользуетТолькоОдинЯзык = МультиязычностьПовтИсп.КонфигурацияИспользуетТолькоОдинЯзык(Ложь);
		Если Не КонфигурацияИспользуетТолькоОдинЯзык
			И Не МультиязычностьСервер.ЭтоОсновнойЯзык()
			И ЗначениеЗаполнено(Выборка.НаименованиеЯзык1) Тогда
			ОписаниеРеестра.Заголовок = Выборка.НаименованиеЯзык1;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ВсеВидыЭлементовРеестра,
			ОписаниеРеестра.ВидыЭлементовРеестра,
			Истина);
		
	КонецЦикла;
	
	ВсеВидыМероприятий = Новый Массив;
	ВсеВидыДокументов = Новый Массив;
	Для Каждого КлючИЗначение Из ОписанияРеестров Цикл
		
		ОписаниеРеестра = КлючИЗначение.Значение;
		
		Если ОписаниеРеестра.ДанныеРеестра = Перечисления.ДанныеРеестров.ДокументыПредприятия Тогда
			
			Для Каждого ВидЭлементовРеестра Из ОписаниеРеестра.ВидыЭлементовРеестра Цикл
				ВсеВидыДокументов.Добавить(ВидЭлементовРеестра);
			КонецЦикла;
			
		ИначеЕсли ОписаниеРеестра.ДанныеРеестра = Перечисления.ДанныеРеестров.Мероприятия Тогда
			
			Для Каждого ВидЭлементовРеестра Из ОписаниеРеестра.ВидыЭлементовРеестра Цикл
				ВсеВидыМероприятий.Добавить(ВидЭлементовРеестра);
			КонецЦикла;
			
		ИначеЕсли ЗначениеЗаполнено(ОписаниеРеестра.ДанныеРеестра) Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестные данные реестра %1'"),
				ОписаниеРеестра.ДанныеРеестра);
	
		КонецЕсли;
		
	КонецЦикла;

	Если ВсеВидыМероприятий.Количество() > 0 Тогда
		
		РеквизитыВидовМероприятий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			ВсеВидыМероприятий,
			"ПометкаУдаления");
		Для Каждого Реестр Из Реестры Цикл
			
			ОписаниеРеестра = ОписанияРеестров[Реестр];
			Если ОписаниеРеестра.ДанныеРеестра <> Перечисления.ДанныеРеестров.Мероприятия Тогда
				Продолжить;
			КонецЕсли;
			
			// Исключим помеченные на удаление.
			КоличествоЭлементов = ОписаниеРеестра.ВидыЭлементовРеестра.Количество();
			Для Индекс = 1 По КоличествоЭлементов Цикл
				
				ОбратныйИндекс = КоличествоЭлементов - Индекс;
				ВидМероприятий = ОписаниеРеестра.ВидыЭлементовРеестра[ОбратныйИндекс];
				
				РеквизитыВидаМероприятий = РеквизитыВидовМероприятий[ВидМероприятий];
				Если Не РеквизитыВидаМероприятий.ПометкаУдаления Тогда
					Продолжить;
				КонецЕсли;
				
				ОписаниеРеестра.ВидыЭлементовРеестра.Удалить(ОбратныйИндекс);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
		
	Если ВсеВидыДокументов.Количество() > 0 Тогда
		
		РеквизитыВидовДокументов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			ВсеВидыДокументов,
			"ПометкаУдаления, ЭтоГруппа");
		Для Каждого Реестр Из Реестры Цикл
			
			ОписаниеРеестра = ОписанияРеестров[Реестр];
			Если ОписаниеРеестра.ДанныеРеестра <> Перечисления.ДанныеРеестров.ДокументыПредприятия Тогда
				Продолжить;
			КонецЕсли;
			
			// Исключим помеченные на удаление.
			КоличествоЭлементов = ОписаниеРеестра.ВидыЭлементовРеестра.Количество();
			Для Индекс = 1 По КоличествоЭлементов Цикл
				
				ОбратныйИндекс = КоличествоЭлементов - Индекс;
				ВидДокументов = ОписаниеРеестра.ВидыЭлементовРеестра[ОбратныйИндекс];
				
				РеквизитыВидаДокументов = РеквизитыВидовДокументов[ВидДокументов];
				Если Не РеквизитыВидаДокументов.ПометкаУдаления Тогда
					Продолжить;
				КонецЕсли;
				
				ОписаниеРеестра.ВидыЭлементовРеестра.Удалить(ОбратныйИндекс);
				
			КонецЦикла;
			
			// Развернем группы.
			КоличествоЭлементов = ОписаниеРеестра.ВидыЭлементовРеестра.Количество();
			Для Индекс = 1 По КоличествоЭлементов Цикл
				
				ОбратныйИндекс = КоличествоЭлементов - Индекс;
				ВидДокументов = ОписаниеРеестра.ВидыЭлементовРеестра[ОбратныйИндекс];
				
				РеквизитыВидаДокументов = РеквизитыВидовДокументов[ВидДокументов];
				Если Не РеквизитыВидаДокументов.ЭтоГруппа Тогда
					Продолжить;
				КонецЕсли;
				
				ОписаниеРеестра.ВидыЭлементовРеестра.Удалить(ОбратныйИндекс);
				
				НайденныеВидыДокументов = Справочники.ВидыДокументов.НайтиПоГруппе(ВидДокументов);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					ОписаниеРеестра.ВидыЭлементовРеестра,
					НайденныеВидыДокументов);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ОписанияРеестров;
	
КонецФункции

// Формирует структуру данных команд реестра.
// 
// Возвращаемое значение:
//  Структура - Данные команд реестра.
//   * Реестр - СправочникСсылка.
//   * Открыть - СправочникСсылка.КомандыВиджетов, Строка - Команда "Открыть реестр".
//   * Создать - СправочникСсылка.КомандыВиджетов, Строка - Команда "Создать элемент реестра".
//   * ДанныеРеестра - ПеречислениеСсылка.ДанныеРеестров - Данные реестра.
//
Функция КомандыРеестра() Экспорт
	
	КомандыРеестра = Новый Структура("Реестр, Открыть, Создать, ДанныеРеестра");
	КомандыРеестра.Реестр = ПустаяСсылка();
	КомандыРеестра.Открыть = Справочники.КомандыВиджетов.ПустаяСсылка();
	КомандыРеестра.Создать = Справочники.КомандыВиджетов.ПустаяСсылка();
	КомандыРеестра.ДанныеРеестра = Перечисления.ДанныеРеестров.ПустаяСсылка();
	
	Возврат КомандыРеестра;
	
КонецФункции

// Формирует данные команд реестров.
//
// Параметры:
//  Реестры - Массив из СправочникСсылка.Реестры.
// 
// Возвращаемое значение:
//  Массив из Структура - Данные команд реестров. См. Справочники.Реестры.КомандыРеестра.
//
Функция КомандыРеестров(Реестры) Экспорт
	
	КомандыРеестров = Новый Массив;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Реестры.Ссылка КАК Ссылка,
		|	Реестры.КомандаОткрыть КАК КомандаОткрыть,
		|	Реестры.КомандаСоздать КАК КомандаСоздать,
		|	Реестры.ДанныеРеестра КАК ДанныеРеестра,
		|	Реестры.ВидыЭлементовРеестра.(
		|		ВидЭлементовРеестра)
		|ИЗ
		|	Справочник.Реестры КАК Реестры
		|ГДЕ
		|	Реестры.Ссылка В (&Реестры)");
	Запрос.УстановитьПараметр("Реестры", Реестры);
	
	// Вычисление видов документов, доступных для создания.
	ВидыДокументовДоступныеДляСоздания = Новый Соответствие();
	ЗапросПоРазрешениямНаСоздание = Новый Запрос;
	Если ПолучитьФункциональнуюОпцию("ДокументооборотИспользоватьОграничениеПравДоступа") Тогда
		ЗапросПоРазрешениямНаСоздание.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СоставСубъектовПравДоступа.Субъект КАК Субъект
			|ПОМЕСТИТЬ СоставСубъектовПравДоступа
			|ИЗ
			|	РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектовПравДоступа
			|ГДЕ
			|	СоставСубъектовПравДоступа.Сотрудник В(&ВсеСотрудникиПользователя)
			|	И СоставСубъектовПравДоступа.ИмяОбластиДелегирования В ("""", ""Документы"", ""ДокументыПросмотрИРедактирование"")
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Субъект
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СотрудникиВКонтейнерах.Контейнер КАК Контейнер
			|ПОМЕСТИТЬ СотрудникиВКонтейнерах
			|ИЗ
			|	РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СоставСубъектовПравДоступа КАК СоставСубъектовПравДоступа
			|		ПО СотрудникиВКонтейнерах.Сотрудник = СоставСубъектовПравДоступа.Субъект
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Контейнер
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РазрешенияНаСозданиеДокументов.ВидДокумента КАК ВидДокумента
			|ИЗ
			|	РегистрСведений.РазрешенияНаСозданиеДокументов КАК РазрешенияНаСозданиеДокументов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
			|		ПО РазрешенияНаСозданиеДокументов.Участник = СотрудникиВКонтейнерах.Контейнер";
		ЗапросПоРазрешениямНаСоздание.УстановитьПараметр("ВсеСотрудникиПользователя",
			Сотрудники.ВсеСотрудникиТекущегоПользователя());
	Иначе
		ЗапросПоРазрешениямНаСоздание.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВидыДокументов.Ссылка КАК ВидДокумента
			|ИЗ
			|	Справочник.ВидыДокументов КАК ВидыДокументов
			|ГДЕ
			|	НЕ ВидыДокументов.ПометкаУдаления
			|	И НЕ ВидыДокументов.ЭтоГруппа";
	КонецЕсли;
	ВыборкаПоРазрешениям = ЗапросПоРазрешениямНаСоздание.Выполнить().Выбрать();
	Пока ВыборкаПоРазрешениям.Следующий() Цикл
		ВидыДокументовДоступныеДляСоздания[ВыборкаПоРазрешениям.ВидДокумента] = Истина;
	КонецЦикла;
	
	// Вычисление иерархии видов документов.
	ЗапросПоИерархии = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидыДокументов.Ссылка КАК ВидДокумента,
		|	ВидыДокументов.Родитель КАК Родитель
		|ИЗ
		|	Справочник.ВидыДокументов КАК ВидыДокументов");
	
	ИерархияВидовДокументов = ЗапросПоИерархии.Выполнить().Выгрузить();
	
	ПодчиненныеЭлементыПервыхУровней = Новый Соответствие;
	
	Для Каждого СтрокаИерархии Из ИерархияВидовДокументов Цикл
		
		Если ПодчиненныеЭлементыПервыхУровней.Получить(СтрокаИерархии.Родитель) = Неопределено Тогда
			ПодчиненныеЭлементыПервыхУровней.Вставить(СтрокаИерархии.Родитель, Новый Массив);
		КонецЕсли;
		ПодчиненныеЭлементыПервогоУровня =
			ПодчиненныеЭлементыПервыхУровней.Получить(СтрокаИерархии.Родитель);
		
		ПодчиненныеЭлементыПервогоУровня.Добавить(СтрокаИерархии.ВидДокумента);
		
	КонецЦикла;
	
	ПодчиненныеЭлементыВсехУровней = Новый Соответствие;
	
	Для Каждого ВидДокумента Из ИерархияВидовДокументов.ВыгрузитьКолонку("ВидДокумента") Цикл
		
		ПодчиненныеЭлементыКОбработке = ПодчиненныеЭлементыПервыхУровней.Получить(ВидДокумента);
		Если ПодчиненныеЭлементыКОбработке = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПодчиненныеЭлементыВсехУровней.Получить(ВидДокумента) = Неопределено Тогда
			ПодчиненныеЭлементыВсехУровней.Вставить(ВидДокумента, Новый Массив);
		КонецЕсли;
		ПодчиненныеЭлементы = ПодчиненныеЭлементыВсехУровней.Получить(ВидДокумента);
		
		Пока ПодчиненныеЭлементыКОбработке.Количество() > 0 Цикл
			
			ПодчиненныйЭлемент = ПодчиненныеЭлементыКОбработке.Получить(0);
			ПодчиненныеЭлементыКОбработке.Удалить(0);
			
			ПодчиненныеЭлементы.Добавить(ПодчиненныйЭлемент);
			
			ПодчиненныеЭлементыСледующегоУровня =
				ПодчиненныеЭлементыПервыхУровней.Получить(ПодчиненныйЭлемент);
			Если ПодчиненныеЭлементыСледующегоУровня = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				ПодчиненныеЭлементыКОбработке,
				ПодчиненныеЭлементыСледующегоУровня);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Заполнение команд.
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		КомандыРеестра = КомандыРеестра();
		КомандыРеестра.Реестр = Выборка.Ссылка;
		КомандыРеестра.Открыть = Выборка.КомандаОткрыть;
		КомандыРеестра.Создать = Выборка.КомандаСоздать;
		КомандыРеестра.ДанныеРеестра = Выборка.ДанныеРеестра;
		
		Если Выборка.ДанныеРеестра = Перечисления.ДанныеРеестров.ДокументыПредприятия Тогда
			
			ЕстьРазрешениеНаСоздание = Ложь;
			
			Для Каждого СтрВидаДокумента Из Выборка.ВидыЭлементовРеестра.Выгрузить() Цикл
				
				Если ВидыДокументовДоступныеДляСоздания[СтрВидаДокумента.ВидЭлементовРеестра] <> Неопределено Тогда
					ЕстьРазрешениеНаСоздание = Истина;
				КонецЕсли;
				
				ПодчиненныеЭлементы =
					ПодчиненныеЭлементыВсехУровней.Получить(СтрВидаДокумента.ВидЭлементовРеестра);
				Если ПодчиненныеЭлементы = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого ВидЭлементовРеестра Из ПодчиненныеЭлементы Цикл
					
					Если ВидыДокументовДоступныеДляСоздания[ВидЭлементовРеестра] <> Неопределено Тогда
						ЕстьРазрешениеНаСоздание = Истина;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
				
			Если Не ЕстьРазрешениеНаСоздание Тогда
				КомандыРеестра.Создать = Справочники.КомандыВиджетов.ПустаяСсылка();
			КонецЕсли;
			
		КонецЕсли;
		
		КомандыРеестров.Добавить(КомандыРеестра);
		
	КонецЦикла;
	
	Возврат КомандыРеестров;
	
КонецФункции

// Находит реестр по источнику.
// 
// Параметры:
// 	Источник - СправочникСсылка.ВидыМероприятий, СправочникСсылка.ВидыДокументов.
// 	
// Возвращаемое значение:
//  СправочникСсылка.Реестры.
// 	
Функция НайтиПоИсточнику(Источник) Экспорт
	
	Если Не ЗначениеЗаполнено(Источник) Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Реестры.Ссылка КАК Реестр
		|ИЗ
		|	Справочник.Реестры КАК Реестры
		|ГДЕ
		|	Реестры.Источник = &Источник
		|	И Реестры.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("Источник", Источник);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НайденныйРеестр = ?(Выборка.Следующий(), Выборка.Реестр, ПустаяСсылка());
	
	Возврат НайденныйРеестр;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта"
		И Параметры.Свойство("Ключ")
		И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		
		Если Параметры.Свойство("НастроитьРеестр") И Параметры.НастроитьРеестр Тогда
			Возврат;
		КонецЕсли;
		
		ОписаниеРеестра = ОписаниеРеестра(Параметры.Ключ);
		
		Если ОписаниеРеестра.ДанныеРеестра = Перечисления.ДанныеРеестров.ДокументыПредприятия Тогда
			
			ВыбраннаяФорма = Метаданные.Справочники.ДокументыПредприятия.Формы.ФормаСпискаСПапками;
			
			ДоступныеВидыДокументов = Новый СписокЗначений;
			ДоступныеВидыДокументов.ЗагрузитьЗначения(ОписаниеРеестра.ВидыЭлементовРеестра);
			Параметры.Вставить("ДоступныеВидыДокументов", ДоступныеВидыДокументов);
			
		ИначеЕсли ОписаниеРеестра.ДанныеРеестра = Перечисления.ДанныеРеестров.Мероприятия Тогда
			
			ВыбраннаяФорма = Метаданные.Справочники.Мероприятия.Формы.ФормаСписка;
			
			ДоступныеВидыМероприятий = Новый СписокЗначений;
			ДоступныеВидыМероприятий.ЗагрузитьЗначения(ОписаниеРеестра.ВидыЭлементовРеестра);
			Параметры.Вставить("ДоступныеВидыМероприятий", ДоступныеВидыМероприятий);
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
		Параметры.Вставить("Заголовок", ОписаниеРеестра.Заголовок);
		Параметры.Вставить("КлючНазначенияИспользования", ОписаниеРеестра.КлючНазначенияИспользования);
		Параметры.Вставить("НавигационнаяСсылка", ПолучитьНавигационнуюСсылку(Параметры.Ключ));
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
    МультиязычностьКлиентСервер.ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка);
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
    МультиязычностьКлиентСервер.ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка);
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СтрокаПоиска", ?(Параметры.СтрокаПоиска = Неопределено, "", Параметры.СтрокаПоиска) + "%");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реестры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Реестры КАК Реестры
	|ГДЕ
	|	НЕ Реестры.ПометкаУдаления
	|	И Реестры.Наименование ПОДОБНО &СтрокаПоиска
	|
	|УПОРЯДОЧИТЬ ПО
	|	Реестры.Наименование";
	
	ОбъектМетаданных = Метаданные.Справочники.Реестры;
	Если Не МультиязычностьПовтИсп.КонфигурацияИспользуетТолькоОдинЯзык(ОбъектМетаданных.ТабличныеЧасти.Найти("Представления") = Неопределено) Тогда
		
		Если МультиязычностьСервер.ИспользуетсяПервыйДополнительныйЯзык() Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"Реестры.Наименование ПОДОБНО &СтрокаПоиска",
				"(Реестры.Наименование ПОДОБНО &СтрокаПоиска ИЛИ Реестры.НаименованиеЯзык1 ПОДОБНО &СтрокаПоиска)");
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеВыбора = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует структуру данных реестра.
// 
// Возвращаемое значение:
//  Структура - Данные реестра.
//   * Реестр - СправочникСсылка.Реестры.
//   * ДанныеРеестра - ПеречислениеСсылка.ДанныеРеестров.
//   * Заголовок - Строка.
//   * КлючНазначенияИспользования - Строка.
//   * ВидыЭлементовРеестра - Массив из СправочникСсылка.ВидыМероприятий, СправочникСсылка.ВидыДокументов.
//
Функция НовоеОписаниеРеестра()
	
	ОписаниеРеестра = Новый Структура(
		"Реестр, ДанныеРеестра, Заголовок, ВидыЭлементовРеестра, КлючНазначенияИспользования");
	ОписаниеРеестра.Реестр = ПустаяСсылка();
	ОписаниеРеестра.ДанныеРеестра = Перечисления.ДанныеРеестров.ПустаяСсылка();
	ОписаниеРеестра.Заголовок = "";
	ОписаниеРеестра.КлючНазначенияИспользования = "";
	ОписаниеРеестра.ВидыЭлементовРеестра = Новый Массив;
	
	Возврат ОписаниеРеестра;
	
КонецФункции


#КонецОбласти

#КонецЕсли