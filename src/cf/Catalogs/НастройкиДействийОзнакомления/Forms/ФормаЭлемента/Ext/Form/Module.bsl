#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НастройкиДействий.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	ОбновитьДеревоУчастниковПоОбъекту();
	
	Элементы.ПодписыватьУЭП.Видимость = 
		ПолучитьФункциональнуюОпцию("ИспользоватьОзнакомлениеСУЭП") И ТипОбъекта = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьПредставлениеСроков();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Объект.Ссылка.Пустая());
	ОбновитьОбъектПоДеревуУчастников(Отказ);
	ДействияКлиент.ОтложенноеНачалоВыполненияПередЗаписью(ЭтотОбъект);
	
	Если ПараметрыЗаписи.Свойство("НеПроверятьУчастников") И ПараметрыЗаписи.НеПроверятьУчастников Тогда
		Возврат;
	КонецЕсли;
	ПроверитьУчастников(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	НастройкиДействий.ПриЗаписиНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	НастройкиДействий.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_НастройкиДействий", Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КлючОбщейНастройкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ОбщаяНастройка);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.НастройкиДействияАвторНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.НастройкиДействияАвторОбработкаВыбора(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(Объект, "Автор", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.НастройкиДействияАвторАвтоПодбор(
		ЭтотОбъект, Текст, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта);
		
КонецПроцедуры

&НаКлиенте
Процедура АвторОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.НастройкиДействияАвторОкончаниеВводаТекста(
		ЭтотОбъект, Текст, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОтложенногоНачалаВыполненияНажатие(Элемент, СтандартнаяОбработка)
	
	ДействияКлиент.ОписаниеОтложенногоНачалаВыполненияНажатие(ЭтаФорма, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУчастники

&НаКлиенте
Процедура УчастникиПриИзменении(Элемент)
	
	ОбновитьПредставленияВДеревеУчастников(Участники);
	ДействияКлиент.УстановитьДоступностьКомандыЗащищенный(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Участники.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Поле = Элементы.ЕстьОсобоеНаименованиеОписание Тогда
		
		Если ТекущиеДанные = Неопределено  
			Или Элементы.ЕстьОсобоеНаименованиеОписание.ТолькоПросмотр = Истина Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Описание", ТекущиеДанные.Описание);
		ПараметрыФормы.Вставить("ТолькоОписание", Истина);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗавершитьНастройкуОсобогоОписания", ЭтотОбъект, ТекущиеДанные);
			
		ОткрытьФорму("ОбщаяФорма.РедактированиеОсобогоНаименованияИОписанияЗадачи",
			ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
	
	ИначеЕсли Поле = Элементы.УчастникиЗащищенный Тогда
		ДействияКлиент.Защищенный(ЭтотОбъект);
	КонецЕсли;
		
КонецПроцедуры

// Продолжение процедуры УчастникиВыбор
//
&НаКлиенте
Процедура ЗавершитьНастройкуОсобогоОписания(
	НаименованиеИОписание, СтрокаУчастника) Экспорт
	
	Если НаименованиеИОписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаУчастника.Описание = НаименованиеИОписание.Описание;
	
	СтрокаУчастника.ЕстьОсобоеНаименованиеОписание =
		ЗначениеЗаполнено(СтрокаУчастника.Описание);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьЭлементовФормы();
	ДействияКлиент.УчастникиПриАктивизацииСтроки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыУстановкиСрока = СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	СтрокиДействия = Участники.ПолучитьЭлементы();
	
	СтрокаУчастника = СтрокиДействия.Добавить();
	СтрокаУчастника.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	СтрокаУчастника.ПредставлениеСтроки = ДействияКлиентСервер.ПредставлениеУчастника(СтрокаУчастника.Участник);
	
	ИндексПредыдущегоЭлемента = СтрокиДействия.Количество() - 2;
	Если ИндексПредыдущегоЭлемента >= 0 Тогда
		
		СтрокаУчастника.ВариантУстановкиСрока = 
			СтрокиДействия[ИндексПредыдущегоЭлемента].ВариантУстановкиСрока;
		
		Если СтрокаУчастника.ВариантУстановкиСрока = ВариантыУстановкиСрока.ТочныйСрок Тогда
				СтрокаУчастника.Срок = СтрокиДействия[ИндексПредыдущегоЭлемента].Срок;
		Иначе
			СтрокаУчастника.СрокДни = СтрокиДействия[ИндексПредыдущегоЭлемента].СрокДни;
			СтрокаУчастника.СрокЧасы = СтрокиДействия[ИндексПредыдущегоЭлемента].СрокЧасы;
			СтрокаУчастника.СрокМинуты = СтрокиДействия[ИндексПредыдущегоЭлемента].СрокМинуты;
		КонецЕсли;
		
	Иначе
		
		СтрокаУчастника.ВариантУстановкиСрока = ВариантыУстановкиСрока.ОтносительныйСрок;
		
	КонецЕсли;
	
	Элементы.Участники.ТекущаяСтрока = СтрокаУчастника.ПолучитьИдентификатор();
	
	ЗаполнитьПредставлениеСроков();
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ВыделенныеСтроки = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(
		Элементы.Участники.ВыделенныеСтроки);
	ЭлементыУчастники = Участники.ПолучитьЭлементы();
	
	// Удаляем всех выделенных участников.
	КоличествоВыделенныхСтрок = ВыделенныеСтроки.Количество();
	ИндексСтроки = КоличествоВыделенныхСтрок - 1;
	
	Пока ИндексСтроки >= 0 Цикл
		
		ИндексТекущейСтроки = ИндексСтроки;
		ИндексСтроки = ИндексСтроки - 1;
		
		СтрокаУчастника = Участники.НайтиПоИдентификатору(ВыделенныеСтроки[ИндексТекущейСтроки]);
		
		ЭлементыУчастники.Удалить(СтрокаУчастника);
		ВыделенныеСтроки.Удалить(ИндексТекущейСтроки);
		Модифицированность = Истина;
	КонецЦикла;
	
	ОбновитьПредставленияВДеревеУчастников(Участники);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Или ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	УдаленыНекоторыеУчастники = Ложь;
	ДобавленыНовыеУчастники = Ложь;
	
	// Массив выбранных участников с обратной сортировкой.
	ВыбранныеУчастники = Новый Массив;
	ИндексСтроки = ВыбранноеЗначение.Количество() - 1;
	Пока ИндексСтроки >= 0 Цикл
		ВыбранныеУчастники.Добавить(ВыбранноеЗначение[ИндексСтроки]);
		ИндексСтроки = ИндексСтроки - 1;
	КонецЦикла;
	
	// Определение порядка выполнения, сроков и т.д. для новых строк.
	ВариантыУстановкиСрока = СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	ЗначенияКолонокДляНовыхСтрок = Новый Структура;
	ЗначенияКолонокДляНовыхСтрок.Вставить("ВариантУстановкиСрока",
		ВариантыУстановкиСрока.ОтносительныйСрок);
	ЗначенияКолонокДляНовыхСтрок.Вставить("Срок", Дата(1,1,1));
	ЗначенияКолонокДляНовыхСтрок.Вставить("СрокДни", 0);
	ЗначенияКолонокДляНовыхСтрок.Вставить("СрокЧасы", 0);
	ЗначенияКолонокДляНовыхСтрок.Вставить("СрокМинуты", 0);
	
	// Удаление неактуальных участников.
	СтрокиУчастников = Участники.ПолучитьЭлементы();
	ИндексСтроки = СтрокиУчастников.Количество() - 1;
	Пока ИндексСтроки >= 0 Цикл
		
		СтрокаУчастника = СтрокиУчастников[ИндексСтроки];
		
		Если ИндексСтроки = СтрокиУчастников.Количество() - 1 Тогда
			ЗаполнитьЗначенияСвойств(ЗначенияКолонокДляНовыхСтрок, СтрокаУчастника);
		КонецЕсли;
		
		// Пропускаем существующих участников.
		ВыбранныйУчастник = ВыбранныеУчастники.Найти(СтрокаУчастника.Участник);
		Если ВыбранныйУчастник <> Неопределено Тогда
			ВыбранныеУчастники.Удалить(ВыбранныйУчастник);
			ИндексСтроки = ИндексСтроки - 1;
			Продолжить;
		КонецЕсли;
		
		СтрокиУчастников.Удалить(СтрокаУчастника);
		УдаленыНекоторыеУчастники = Истина;
		
		ИндексСтроки = ИндексСтроки - 1;
		
	КонецЦикла;
	
	// Добавление новых участников.
	ИндексСтроки = ВыбранныеУчастники.Количество() - 1;
	Пока ИндексСтроки >= 0 Цикл
		
		ВыбранныйУчастник = ВыбранныеУчастники[ИндексСтроки];
		
		СтрокаУчастника = СтрокиУчастников.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаУчастника, ЗначенияКолонокДляНовыхСтрок);
		СтрокаУчастника.Участник = ВыбранныйУчастник;
		СтрокаУчастника.УсловиеПредставление = СтрокаУчастника.Условие;	
		ВыбранныеУчастники.Удалить(ИндексСтроки);
		ДобавленыНовыеУчастники = Истина;
		ИндексСтроки = ИндексСтроки - 1;
		
	КонецЦикла;
	
	Если ДобавленыНовыеУчастники Тогда
		ОбновитьПредставленияВДеревеУчастников(Участники);
		ЗаполнитьПредставлениеСроков();
	КонецЕсли;
	
	Если УдаленыНекоторыеУчастники Или ДобавленыНовыеУчастники Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Работа с УчастникиПредставлениеСтроки

&НаКлиенте
Процедура ПредставлениеСтрокиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Участник = ТекущиеДанные.ПредставлениеСтроки;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ПредставлениеСтроки) Тогда
		ТекущиеДанные.Защищенный = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаголовокФормы = НСтр("ru = 'Выбор ознакомляемого'");
	НастройкиДействийКлиент.ПредставлениеСтрокиНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка, ЗаголовокФормы, Истина, Истина, ТипОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиОткрытие(Элемент, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.ПредставлениеСтрокиОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиОчистка(Элемент, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.ПредставлениеСтрокиОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиДействийКлиент.ПредставлениеСтрокиОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	// Если значение требует уточнения, будет вызвана форма для ввода уточняющих данных.
	// Обработка выбора не должна выполняться в этом случае.
	ТипыДляУточнения = Новый Массив;
	ТипыДляУточнения.Добавить(Тип("Структура"));
	ТипыДляУточнения.Добавить(Тип("СправочникСсылка.РолиИсполнителей"));
	ТипыДляУточнения.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	ТипыДляУточнения.Добавить(Тип("СправочникСсылка.Проекты"));
	Если ТипыДляУточнения.Найти(ТипЗнч(ВыбранноеЗначение)) <> Неопределено Тогда
		СотрудникиКлиент.ОбработкаВыбораКонтейнера(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
		// Повторная проверка (значение могло быть изменено).
		Если ТипыДляУточнения.Найти(ТипЗнч(ВыбранноеЗначение)) <> Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекущиеДанные.Участник = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.ПредставлениеСтрокиАвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора,
		ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, Неопределено, ТипОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.ПредставлениеСтрокиОкончаниеВводаТекста(ЭтотОбъект, Элемент, Текст, 
		ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, Неопределено, ТипОбъекта);
	
КонецПроцедуры

// Работа с УчастникиУсловие
&НаКлиенте
Процедура УсловиеПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.УсловиеПредставлениеОткрытие(
		ЭтотОбъект, Элемент, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура УсловиеПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.УсловиеПредставлениеОбработкаВыбора(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УсловиеПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.УсловиеПредставлениеНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта);
			
КонецПроцедуры
	
&НаКлиенте
Процедура УсловиеПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.УсловиеПредставлениеОчистка(
		ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УсловиеПредставлениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.УсловиеПредставлениеАвтоПодбор(
		Текст, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура УсловиеПредставлениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.УсловиеПредставлениеОкончаниеВводаТекста(
		Текст, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта);
		
КонецПроцедуры

// Работа с УчастникиСрокПредставление

&НаКлиенте
Процедура СрокПредставлениеПриИзменении(Элемент)
	
	ДействияКлиент.СрокПредставлениеПриИзменении(
		ЭтаФорма, Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ДействияКлиент.СрокПредставлениеРегулирование(
		ЭтаФорма, Элемент, Направление, СтандартнаяОбработка, Истина);
	ЗаполнитьПредставлениеСроков();
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыУстановкиСрока = 
		СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	ТекущиеДанные.Срок = ВыбранноеЗначение;
	ТекущиеДанные.СрокДни = 0;
	ТекущиеДанные.СрокЧасы = 0;
	ТекущиеДанные.СрокМинуты = 0;
	ТекущиеДанные.ВариантУстановкиСрока = ВариантыУстановкиСрока.ТочныйСрок;
	
	ЗаполнитьПредставлениеСроков();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыУчастники

&НаКлиенте
Процедура Подобрать(Команда)
	
	НастройкиДействийКлиент.УчастникиПодобрать(
		ЭтотОбъект,
		НСтр("ru = 'Подбор ознакомляемых'"),
		ТипОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура Защищенный(Команда)
	ДействияКлиент.Защищенный(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Готово(Команда)
	
	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУчастниковПоУмолчанию(Команда)
	
	ЗаполнитьУчастниковПоУмолчаниюНаСервере();
	
	ЗаполнитьПредставлениеСроков();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗадержку(Команда)
	
	ДействияКлиент.ОчиститьЗадержку(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьУчастниковПоУмолчаниюНаСервере()
	
	ДействиеОбъект = РеквизитФормыВЗначение("Объект");
	ДействиеОбъект.ЗаполнитьУчастниковПоУмолчанию();
	ЗначениеВРеквизитФормы(ДействиеОбъект, "Объект");
	
	ОбновитьДеревоУчастниковПоОбъекту();
	
КонецПроцедуры

// Заполняет представление сроков в карточке процесса.
//
&НаКлиенте
Процедура ЗаполнитьПредставлениеСроков() Экспорт
	
	ЭлементыУчастники = Участники.ПолучитьЭлементы();
	
	Для Каждого ЭлементУчастник Из ЭлементыУчастники Цикл
		
		ЭлементУчастник.СрокПредставление = 
			СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
				ЭлементУчастник.Срок,
				ЭлементУчастник.СрокДни,
				ЭлементУчастник.СрокЧасы,
				ЭлементУчастник.СрокМинуты,
				ИспользоватьДатуИВремяВСрокахЗадач,
				ЭлементУчастник.ВариантУстановкиСрока);
			
	КонецЦикла;
	
КонецПроцедуры

// Признак недоступности строки, переопределяемый для данного вида действия участника.
// Вызывается для строк с участниками, т.е. "нижнего" уровня дерева.
// 
// Параметры:
//  СтрокаДерева - ДанныеФормыЭлементДерева - Строка дерева "Участники".
//  СтрокаРодитель - Неопределено, ДанныеФормыЭлементДерева - Строка родитель строки дерева.
// 
// Возвращаемое значение:
//  Булево - Признак, что строка должна быть недоступна.
&НаКлиенте
Функция СтрокаУчастникаНедоступна(СтрокаДерева, СтрокаРодитель) Экспорт
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы() Экспорт
	
	Элементы.Удалить.Доступность = Истина;
	Элементы.КонтекстУдалить.Доступность = Истина;
	ДействияКлиент.УстановитьТолькоПросмотрИУдалениеУчастникаПоЗащищенности(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Участники

// Заполняет дерево участников по объекту.
//
&НаСервере
Процедура ОбновитьДеревоУчастниковПоОбъекту()
	
	ЭлементыУчастники = Участники.ПолучитьЭлементы();
	ЭлементыУчастники.Очистить();
	
	Для Каждого Участник Из Объект.Участники Цикл
		
		ЭлементУчастник = ЭлементыУчастники.Добавить();
		ЗаполнитьЗначенияСвойств(ЭлементУчастник, Участник);
		ЭлементУчастник.Участник = Участник.Участник;
		ЭлементУчастник.УсловиеПредставление = ЭлементУчастник.Условие;
		ЭлементУчастник.ЕстьОсобоеНаименованиеОписание = ЗначениеЗаполнено(ЭлементУчастник.Описание);
			
	КонецЦикла;
	
	ОбновитьПредставленияВДеревеУчастников(Участники);
	
КонецПроцедуры

// Заполняет объект по дереву участников.
//
&НаКлиенте
Процедура ОбновитьОбъектПоДеревуУчастников(Отказ)
	
	СсылкаНеуказанногоСотрудники = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	Если Не ЗначениеЗаполнено(Объект.ВозможностьИзменятьУчастников) Тогда
		Объект.ВозможностьИзменятьУчастников = ПредопределенноеЗначение(
			"Перечисление.ВариантыДоступностиИзмененияДействий.Авто");
	КонецЕсли;
	
	Объект.Участники.Очистить();
	
	ЭлементыУчастники = Участники.ПолучитьЭлементы();
	
	Для Каждого ЭлементУчастник Из ЭлементыУчастники Цикл
		
		Если Не ЗначениеЗаполнено(ЭлементУчастник.Участник)
			Или ЭлементУчастник.Участник = СсылкаНеуказанногоСотрудники Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныеСотрудники = Объект.Участники.НайтиСтроки(
			Новый Структура("Участник, Защищенный, Описание", 
			ЭлементУчастник.Участник, Ложь, ЭлементУчастник.Описание));
		Если НайденныеСотрудники.Количество() > 0 Тогда
			Отказ = Истина;
			ПоказатьПредупреждение(, СтрШаблон(
				НСтр("ru = 'Повторяется участник ознакомления: %1
				|Удалите дубли, укажите особое описание или установите участнику признак ""Защищенный""'"),
					ЭлементУчастник.Участник));
			Возврат;
		КонецЕсли;
		
		Участник = Объект.Участники.Добавить();
		ЗаполнитьЗначенияСвойств(Участник, ЭлементУчастник);
		
	КонецЦикла;
	
КонецПроцедуры

// Обновляет представления строк в дереве участников.
//
// Параметры:
//  Участники - ДанныеФормыДерево - дерево с участниками.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставленияВДеревеУчастников(Участники)
	
	ЭлементыУчастники = Участники.ПолучитьЭлементы();
	
	Для Каждого ЭлементУчастник Из ЭлементыУчастники Цикл
		
		Если ЗначениеЗаполнено(ЭлементУчастник.Участник) Тогда
			ЭлементУчастник.ПредставлениеСтроки = 
				Строка(ЭлементУчастник.Участник) + "                              ";
		Иначе
			ЭлементУчастник.ПредставлениеСтроки = 
				Строка(ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка")) 
				+ "                              ";
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьУчастников(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверкиДействительностиУчастников = 
		РаботаСУчастникамиКлиент.ПроверитьДействительностьУчастников(ЭтотОбъект);
	Если Не РезультатПроверкиДействительностиУчастников.ВсеДействительны Тогда
		
		Отказ = Истина;
		
		Обработчик = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиДействительностиУчастниковПродолжение",
			ЭтотОбъект);
		
		РаботаСУчастникамиКлиент.ОбработатьРезультатПроверкиДействительностиУчастников(
			РезультатПроверкиДействительностиУчастников,
			Обработчик);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработать результат проверки действительности участников продолжение.
// 
// Параметры:
//  Результат - Структура - результат проверки и выбор пользователя:
//   * РезультатПроверки - см. РаботаСУчастникамиВызовСервера.ПроверитьДействительностьУчастников
//   * ВариантОбработки - Число, КодВозвратаДиалога - 0 - заменить, 1 - оставить как есть,
//                                                    КодВозвратаДиалога.Отмена - отмена.
//  ДополнительныеПараметры - Произвольный
//
&НаКлиенте
Процедура ОбработатьРезультатПроверкиДействительностиУчастниковПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ВариантОбработки = Результат.ВариантОбработки;
	
	// Выбрана отмена.
	Если ВариантОбработки = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	// Хочет продолжить как есть.
	Если ВариантОбработки = 1 Тогда
		ЗаписатьЗакрытьБезПроверкиУчастников();
		Возврат;
	КонецЕсли;
	
	// Согласился заменить участников.
	Если ВариантОбработки = 0 Тогда
		ОбработчикЗамены = Новый ОписаниеОповещения("УчастникиЗамена", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.ФормаЗаменыУчастников", Результат.РезультатПроверки, ЭтотОбъект,,,,
			ОбработчикЗамены);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЗакрытьБезПроверкиУчастников(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не Записать(Новый Структура("НеПроверятьУчастников", Истина)) Тогда
		Возврат;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиЗамена(Замены, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Замены = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаменитьУчастниковНаСервере(Замены);
	
КонецПроцедуры

// Заменить участников на сервере.
// 
// Параметры:
//  Замены - Массив Из Структура:
//   * ВидУчастника - СправочникСсылка.ВидыУчастниковЗадач
//   * Участник - СправочникСсылка.Сотрудники
//   * УчастникЗаменитьНа - СправочникСсылка.Сотрудники
&НаСервере
Процедура ЗаменитьУчастниковНаСервере(Замены)
	
	БылиЗамены = Ложь;
	
	Для Каждого Замена Из Замены Цикл
		
		КлючиСтруктурыОтбора = "Участник";
		СтруктураОтбора = Новый Структура(КлючиСтруктурыОтбора);
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Замена, КлючиСтруктурыОтбора);
		НайденныеСтрокиУчастников = Объект.Участники.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаУчастника Из НайденныеСтрокиУчастников Цикл
			СтрокаУчастника.Участник = Замена.УчастникЗаменитьНа;
			БылиЗамены = Истина;
		КонецЦикла; 
		
	КонецЦикла;
	
	Если БылиЗамены Тогда
		
		Модифицированность = Истина;
		ОбновитьДеревоУчастниковПоОбъекту();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
