
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает отслеживаемые реквизиты для дополнительного свойства ПредыдущиеЗначенияРеквизитов.
//
// Возвращаемое значение:
//  Строка - Отслеживаемые реквизиты.
//
Функция ОтслеживаемыеРеквизиты() Экспорт
	
	ОтслеживаемыеРеквизиты =
		"Код, Наименование, ПометкаУдаления, ИмяПредопределенныхДанных,
			|АдресРесурса, Комментарий, МетодHTTP, Параметры, Участники";
	
	Возврат ОтслеживаемыеРеквизиты;
	
КонецФункции

#Область КОД

// См. КОДПереопределяемый.ПередЗаписьюПрочтенногоИзСообщенияКОД
Процедура ПередЗаписьюПрочтенногоИзСообщенияКОД(Данные, ЧтениеСообщения, СтандартнаяОбработка) Экспорт
	
	Изменения = КОДПолучение.ИзмененияСсылочныхДанных(Данные,
		ОтслеживаемыеРеквизиты());
	
	ЗаполнитьДополнительныеСвойстваШаблонаИОбновитьФактическихУчастниковПередЗаписью(Данные);
	
	КОДПолучение.ДобавитьДанныеДляОбработкиПриЗавершенииЧтенияСообщения(
		ЧтениеСообщения, ТипЗнч(Данные), Новый УникальныйИдентификатор, Данные, Изменения);
	
КонецПроцедуры

// См. КОДПереопределяемый.ПриЗавершенииЧтенияСообщенияКОД
Процедура ПриЗавершенииЧтенияСообщенияКОД(
		ТипДанных, ДанныеДляПостобработки, ТипОбработан, ТипыДанныхДляПостобработки, ЧтениеСообщения = Неопределено) Экспорт
		
	Если ТипыДанныхДляПостобработки[Тип("РегистрСведенийНаборЗаписей.СотрудникиВКонтейнерах")] <> Неопределено Тогда
		ТипОбработан = Ложь;
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеДляПостобработки Цикл
		
		// Проверим изменения в шаблоне 2ФА: если изменилась только ТЧ ФактическиеУчастники, то
		// обновление 2ФА будет произведено при обработке изменений составов контейнеров
		
		Если Не ВШаблонеЕстьИзменения(СтрокаДанных.Изменения) Тогда
			Продолжить;
		КонецЕсли;
		
		СоздатьОбновитьШаблонДвухфакторнойАутентификации(СтрокаДанных.ЗначениеДанных);
		Включить2ФАУчастникамШаблона(СтрокаДанных.ЗначениеДанных);//@skip-check query-in-loop
		Отключить2ФАУдаленнымУчастникам(СтрокаДанных.ЗначениеДанных);
		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает полный состав сотрудников, включая сотрудников из состава контейнеров
// 
// Параметры:
//  Участники - Массив из СправочникСсылка.Сотрудники, ОпределяемыйТип.КонтейнерыСотрудников - 
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Сотрудники по участникам включая состав контейнеров:
//  *Участник - СправочникСсылка.Сотрудники
//  *Контейнер - ОпределяемыйТип.КонтейнерыСотрудников
Функция СотрудникиИКонтейнерыПоУчастникам(Участники) Экспорт
	
	// Разделим участников на сотрудников и контейнеры, чтобы получить составы контейнеров
	СотрудникиМассив = Новый Массив;
	Контейнеры = Новый Массив;
	
	Для Каждого Участник Из Участники Цикл
		Если ТипЗнч(Участник) = Тип("СправочникСсылка.Сотрудники") Тогда
			СотрудникиМассив.Добавить(Участник);
		ИначеЕсли ТипЗнч(Участник) = Тип("СправочникСсылка.РабочиеГруппы")
			Или ТипЗнч(Участник) = Тип("СправочникСсылка.ПодразделенияКонтейнеры") Тогда
			Контейнеры.Добавить(Участник);
		КонецЕсли;
	КонецЦикла;
	
	ЗапросРГ = Новый Запрос;
	ЗапросРГ.Текст = "ВЫБРАТЬ
	|	Сотрудник КАК Участник,
	|	Контейнер КАК Контейнер
	|ИЗ
	|	РегистрСведений.СотрудникиВКонтейнерах
	|ГДЕ
	|	Контейнер В (&Контейнеры)";
	ЗапросРГ.УстановитьПараметр("Контейнеры", Контейнеры);
	
	СоставКонтейнеров = ЗапросРГ.Выполнить().Выгрузить();
	
	Для Каждого Сотрудник Из СотрудникиМассив Цикл
		СоставКонтейнеров.Добавить().Участник = Сотрудник;
	КонецЦикла;
	
	Возврат СоставКонтейнеров;
	
КонецФункции

// Возвращает таблицу значений с сотрудниками, у которых не заполнены указанные виды КИ
// 
// Параметры:
//  Участники - Массив из ОпределяемыйТип.КонтейнерыСотрудников - Участники, заполненность КИ которых надо проверить
//  ВидыКИ - Массив из СправочникСсылка.ВидыКонтактнойИнформации - Виды КИ для проверки заполенности
// 
// Возвращаемое значение:
//  ТаблицаЗначений - См. СотрудникиИКонтейнерыПоУчастникам
Функция СотрудникиИКонтейнерыСНезаполненнойКИ(Участники, ВидыКИ) Экспорт
	
	СотрудникиИКонтейнеры = СотрудникиИКонтейнерыПоУчастникам(Участники);
	СотрудникиСНезаполненнойКИ = СотрудникиИКонтейнеры.СкопироватьКолонки();
	СотрудникиМассив = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
		СотрудникиИКонтейнеры.ВыгрузитьКолонку("Участник"));
	ВыбранныеВидыКИ = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидыКИ);
	
	// Собрали всех сотрудников, проверим, заполнена ли у них контактная информация
	ЗначенияКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(СотрудникиМассив, , ВыбранныеВидыКИ);
	
	Для Каждого ВидКИ Из ВыбранныеВидыКИ Цикл
		Для Каждого СотрудникСтрока Из СотрудникиИКонтейнеры Цикл
			
			Отбор = Новый Структура("Объект, Вид", СотрудникСтрока.Участник, ВидКИ);
			
			НайденныеКИ = ЗначенияКИ.НайтиСтроки(Отбор);
			
			Если НайденныеКИ.Количество() = 0 Тогда 
				
				Если СотрудникиСНезаполненнойКИ.Найти(СотрудникСтрока.Участник) = Неопределено Тогда
					НоваяСтрока = СотрудникиСНезаполненнойКИ.Добавить();
					НоваяСтрока.Участник = СотрудникСтрока.Участник;
					НоваяСтрока.Контейнер = СотрудникСтрока.Контейнер;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	
	Возврат СотрудникиСНезаполненнойКИ;
	
КонецФункции

// Список пользователей для обработки.
// 
// Параметры:
//  Участники - Массив Из ОпределяемыйТип.КонтейнерыСотрудников - Участники
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Список пользователей для обработки. Колонки:
// * ИдПользователяИБ - УникальныйИдентификатор - Идентификатор пользователя ИБ
// * Сотрудник - СправочникСсылка.Сотрудники - Сотрудник, которому соответствует пользователь
// * Пользователь - СправочникСсылка.Пользователи - Пользователь сотрудника
Функция СотрудникиИПользователиДляОбработки(Участники) Экспорт
	
	ЗапросСотрудников = Новый Запрос;
	ЗапросСотрудников.Текст = "ВЫБРАТЬ
	|	СотрудникиВКонтейнерах.Сотрудник
	|ПОМЕСТИТЬ Сотрудники
	|ИЗ
	|	РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
	|ГДЕ
	|	СотрудникиВКонтейнерах.Контейнер В (&Участники)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиПользователей.Пользователь.ИдентификаторПользователяИБ КАК ИдПользователяИБ,
	|	СотрудникиПользователей.Сотрудник,
	|	СотрудникиПользователей.Пользователь
	|ИЗ
	|	РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Сотрудники КАК Сотрудники
	|		ПО СотрудникиПользователей.Сотрудник = Сотрудники.Сотрудник";
	ЗапросСотрудников.УстановитьПараметр("Участники", Участники);
	
	Возврат ЗапросСотрудников.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает массив видов КИ, выбранных в качестве параметров шаблона 2ФА
// 
// Параметры:
//  ПараметрыШаблона - См. Справочник.ШаблоныДвухфакторнойАутентификации.Участники
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.ВидыКонтактнойИнформации - Выбранные виды КИ в параметрах
Функция ВыбранныеВидыКИ(ПараметрыШаблона) Экспорт
	
	Возврат ОбщегоНазначенияДокументооборотКлиентСервер.ЭлементыМассиваЗаданногоТипа(
		ПараметрыШаблона.ВыгрузитьКолонку("ЗначениеПараметра"),
		Тип("СправочникСсылка.ВидыКонтактнойИнформации"));
	
КонецФункции

// Возвращает значения КИ по массиву Сотрудников.
//  
// Параметры:
//  Сотрудники - Массив из СправочникСсылка.Сотрудники - Сотрудники, КИ которых надо получить
//  ВидыКИ - Массив из СправочникСсылка.ВидыКонтактнойИнформации - Виды КИ, которую надо получить
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Значения КИСотрудников:
// * Объект - СправочникСсылка.Сотрудники
// * Представление - Строка
// * ЗначенияПолей - Строка
// * Значение - Строка  
// * Вид - СправочникСсылка.ВидыКонтактнойИнформации
// * Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации 
// * Дата - Дата
// * ИдентификаторСтрокиТабличнойЧасти - Число 
Функция ЗначенияКИСотрудников(Сотрудники, ВидыКИ) Экспорт
	
	ВидыКИ = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидыКИ);
	ЗначенияКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(Сотрудники, , ВидыКИ);
	
	Возврат ЗначенияКИ;
	
КонецФункции

// Заполняет дополнительные свойства шаблона перед записью для их проверки при записи, а также
// обновляет состав фактических участников шаблона
// 
// Параметры:
//  ШаблонОбъект - СправочникОбъект.ШаблоныДвухфакторнойАутентификации
Процедура ЗаполнитьДополнительныеСвойстваШаблонаИОбновитьФактическихУчастниковПередЗаписью(ШаблонОбъект) Экспорт

	// Запомним предыдущие реквизиты
	Если Не ШаблонОбъект.ЭтоНовый() Тогда
		
		ПредыдущиеРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ШаблонОбъект.Ссылка, "Наименование, ФактическиеУчастники");
		
		НаименованиеДляПоиска = ПредыдущиеРеквизиты.Наименование;
		
		ПредыдущиеФактическиеУчастники = ПредыдущиеРеквизиты.ФактическиеУчастники;
		ШаблонОбъект.ДополнительныеСвойства.Вставить("ПредыдущиеФактическиеУчастники",
			ПредыдущиеФактическиеУчастники.Выгрузить().ВыгрузитьКолонку("Пользователь"));
		
	Иначе
		НаименованиеДляПоиска = ШаблонОбъект.Наименование;
	КонецЕсли;

	ШаблонОбъект.ДополнительныеСвойства.Вставить("НаименованиеДляПоиска", НаименованиеДляПоиска);
	
	СтрокиДляОбработки = СотрудникиИПользователиДляОбработки(ШаблонОбъект.Участники.ВыгрузитьКолонку("Участник"));
	ШаблонОбъект.ДополнительныеСвойства.Вставить("СтрокиДляОбработки", СтрокиДляОбработки);
	
	// Обновим состав фактических участников
	ШаблонОбъект.ФактическиеУчастники.Очистить();
	Если Не ШаблонОбъект.ПометкаУдаления Тогда
		Для Каждого ПользовательИСотрудник Из СтрокиДляОбработки Цикл
			ШаблонОбъект.ФактическиеУчастники.Добавить().Пользователь = ПользовательИСотрудник.Пользователь;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Сравнивает текущий состав фактических участников шаблона с предыдущим и отключает 2ФА тем 
// пользователям, которые были исключены из него
// 
// Параметры:
//  ШаблонОбъект - СправочникОбъект.ШаблоныДвухфакторнойАутентификации
Процедура Отключить2ФАУдаленнымУчастникам(ШаблонОбъект) Экспорт

	Если Не ШаблонОбъект.ДополнительныеСвойства.Свойство("ПредыдущиеФактическиеУчастники") Тогда 
		Возврат;
	КонецЕсли;
	
	ПредыдущиеФактическиеУчастники = ШаблонОбъект.ДополнительныеСвойства.ПредыдущиеФактическиеУчастники;
	ИдПользователей = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ПредыдущиеФактическиеУчастники,
		"ИдентификаторПользователяИБ");
		
	Для Каждого ПредыдущийФактическийУчастник Из ПредыдущиеФактическиеУчастники Цикл
		Если ШаблонОбъект.ФактическиеУчастники.Найти(ПредыдущийФактическийУчастник) = Неопределено Тогда

			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
				ИдПользователей[ПредыдущийФактическийУчастник].ИдентификаторПользователяИБ);
				
			Отключить2ФАПользователюИБ(ПользовательИБ, 
				ШаблонОбъект.ДополнительныеСвойства.НаименованиеДляПоиска);
				
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область Управление2ФА

// Создает или обновляет платформенный шаблон настроек второго фактора аутентификации по настройкам
// из переданного шаблона 2ФА
// 
// Параметры:
//  ШаблонОбъект - СправочникОбъект.ШаблоныДвухфакторнойАутентификации
Процедура СоздатьОбновитьШаблонДвухфакторнойАутентификации(ШаблонОбъект) Экспорт
	
	НаименованиеДляПоиска = ШаблонОбъект.ДополнительныеСвойства.НаименованиеДляПоиска;
	ШаблонНастроек = ШаблоныНастроекВторогоФактораАутентификации.НайтиПоИмени(НаименованиеДляПоиска);
	
	Если ШаблонНастроек = Неопределено Тогда
		ШаблонНастроек = ШаблоныНастроекВторогоФактораАутентификации.СоздатьШаблон();
		ШаблонНастроек.Имя = НаименованиеДляПоиска;
	КонецЕсли;
	
	// Заполнение параметров шаблона 2ФА
	// Если шаблон переименован, то и платформенный нужно переименовать
	ШаблонНастроек.Имя = ШаблонОбъект.Наименование;
	ЗапросHTTP = Новый HTTPЗапрос;
	ЗапросHTTP.АдресРесурса = ШаблонОбъект.АдресРесурса;
	ШаблонНастроек.HTTPЗапросНаАутентификацию = ЗапросHTTP;
	ШаблонНастроек.МетодHTTPЗапросаНаАутентификацию = ШаблонОбъект.МетодHTTP;
	ШаблонНастроек.Записать();
	
КонецПроцедуры

// Включает 2ФА пользователям ИБ по настройкам шаблона 2ФА при записи шаблона
// 
// Параметры:
//  ШаблонОбъект - СправочникОбъект.ШаблоныДвухфакторнойАутентификации
Процедура Включить2ФАУчастникамШаблона(ШаблонОбъект) Экспорт
	
	Параметры = ШаблонОбъект.Параметры;
	
	Если ШаблонОбъект.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиДляОбработки = ШаблонОбъект.ДополнительныеСвойства.СтрокиДляОбработки;
	
	ЗначенияПараметровСотрудников = ЗначенияКИСотрудников(
		СтрокиДляОбработки.ВыгрузитьКолонку("Сотрудник"),
		ВыбранныеВидыКИ(Параметры));

	ОтборПараметров = Новый Структура("Объект, Вид",
		Справочники.Сотрудники.ПустаяСсылка(), Справочники.ВидыКонтактнойИнформации.ПустаяСсылка());
	
	Для Каждого ПользовательИСотрудник Из СтрокиДляОбработки Цикл
			
		ЕстьНезаполненныеПараметры = Ложь;
		ОтборПараметров.Объект = ПользовательИСотрудник.Сотрудник;
		
		// Параметры шаблона для конкретного пользователя
		ПараметрыШаблона = Новый Соответствие;
		Для Каждого Параметр Из Параметры Цикл
			Если ТипЗнч(Параметр.ЗначениеПараметра) = Тип("Строка") Тогда
				ПараметрыШаблона[Параметр.ИмяПараметра] = Параметр.ЗначениеПараметра;
			Иначе
				ОтборПараметров.Вид = Параметр.ЗначениеПараметра;
				НайденныеСтроки = ЗначенияПараметровСотрудников.НайтиСтроки(ОтборПараметров);
				Если НайденныеСтроки.Количество() Тогда
					СтрокаКИ = НайденныеСтроки[0];
					ПараметрыШаблона[Параметр.ИмяПараметра] = СтрокаКИ.Представление;
				Иначе
					ЕстьНезаполненныеПараметры = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		// Если у сотрудника не заполнена КИ, не включаем для него 2ФА
		Если ЕстьНезаполненныеПараметры Тогда
			Продолжить;
		КонецЕсли;
		
		НастройкаПользователя = Новый НастройкаВторогоФактораАутентификации;
		НастройкаПользователя.ИмяШаблонаНастройки = ШаблонОбъект.Наименование;
		НастройкаПользователя.Параметры = ПараметрыШаблона;
		
		// Привязка шаблона с параметрами к пользователю
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			ПользовательИСотрудник.ИдПользователяИБ);
		
		// Если у пользователя уже была эта настройка, обновим ее.
		НастройкаОбновлена = Ложь;
		Н = ПользовательИБ.НастройкиВторогоФактораАутентификации.ВГраница();
		Пока Н >= 0 Цикл
			
			Настройка = ПользовательИБ.НастройкиВторогоФактораАутентификации[Н];
			Если Настройка.ИмяШаблонаНастройки = НастройкаПользователя.ИмяШаблонаНастройки Тогда
				
				Если НастройкаОбновлена Тогда
					// Настройка задублировалась, надо удалить
					ПользовательИБ.НастройкиВторогоФактораАутентификации.Удалить(Н);
					Н = Н - 1;
					Продолжить;
				КонецЕсли;
				
				ПользовательИБ.НастройкиВторогоФактораАутентификации[Н] = НастройкаПользователя;
				НастройкаОбновлена = Истина;
				
			КонецЕсли;
			
			Н = Н - 1;
		КонецЦикла;
		
		// Если настройки не было, добавим
		Если Не НастройкаОбновлена Тогда
			ПользовательИБ.НастройкиВторогоФактораАутентификации.Добавить(НастройкаПользователя);
		КонецЕсли;
		
		ПользовательИБ.ОбработкаНастроекВторогоФактораАутентификации = 
			ТипОбработкиНастроекВторогоФактораАутентификации.ИспользоватьСледующуюПриОшибке;
		ПользовательИБ.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Отключает двухфакторную аутентификацию пользователю ИБ и записывает его.
// 
// Параметры:
//  ПользовательИБ - ПользовательИнформационнойБазы - Пользователь ИБ
//  ИмяШаблона - Строка - Имя шаблона 2ФА, по которому нужно отключить 2ФА. Если не передано, то будут очищены все настройки 2ФА.
//
Процедура Отключить2ФАПользователюИБ(ПользовательИБ, ИмяШаблона = "") Экспорт
	
	ЕстьИзменения = Ложь;
	
	Если ЗначениеЗаполнено(ИмяШаблона) Тогда
		
		Индекс = ПользовательИБ.НастройкиВторогоФактораАутентификации.ВГраница();
		Пока Индекс >= 0 Цикл
			
			Настройка = ПользовательИБ.НастройкиВторогоФактораАутентификации[Индекс];
			Если Настройка.ИмяШаблонаНастройки = ИмяШаблона Тогда
				ПользовательИБ.НастройкиВторогоФактораАутентификации.Удалить(Индекс);
				ЕстьИзменения = Истина;
			КонецЕсли;
			
			Индекс = Индекс - 1;
		КонецЦикла;
	
	Иначе
		
		Если ПользовательИБ.НастройкиВторогоФактораАутентификации.Количество() Тогда
			ПользовательИБ.НастройкиВторогоФактораАутентификации.Очистить();
			ЕстьИзменения = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПользовательИБ.НастройкиВторогоФактораАутентификации.Количество() = 0 
		И ПользовательИБ.ОбработкаНастроекВторогоФактораАутентификации <> 
			ТипОбработкиНастроекВторогоФактораАутентификации.НеИспользовать Тогда
		
		ПользовательИБ.ОбработкаНастроекВторогоФактораАутентификации =
			ТипОбработкиНастроекВторогоФактораАутентификации.НеИспользовать;
		ЕстьИзменения = Истина;
		
	КонецЕсли;
	
	Если ЕстьИзменения Тогда
		ПользовательИБ.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Помечает на удаление все шаблоны 2ФА, после чего очищает все оставшиеся настройки у пользователей ИБ
Процедура ОчиститьВсеНастройкиДвухфакторнойАутентификации() Экспорт
	
	Выборка = Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		ШаблонОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ШаблонОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
	
	ВсеПользователи = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Для Каждого Пользователь Из ВсеПользователи Цикл
		
		Если Пользователь.НастройкиВторогоФактораАутентификации.Количество() Или 
			Пользователь.ОбработкаНастроекВторогоФактораАутентификации <> Неопределено Тогда
			Отключить2ФАПользователюИБ(Пользователь);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаИзмененияСоставовКонтейнеров

// Перезаписывает шаблон 2ФА, чтобы обновить настройки 2ФА у пользователей ИБ при изменении составов
// контейнеров сотрудников
// 
// Параметры:
//  Шаблон - СправочникСсылка.ШаблоныДвухфакторнойАутентификации - Измененные контейнеры
// 
// Возвращаемое значение:
//  Булево - Все измененные контейнеры обработаны
Функция ОбработатьИзменениеСоставаКонтейнеров(Шаблон) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДвухфакторнуюАутентификацию") Тогда
		Возврат Истина;
	КонецЕсли;
	
	ШаблонОбъект = Шаблон.ПолучитьОбъект();
	ШаблонОбъект.Заблокировать();
	ШаблонОбъект.Записать();
	
	Возврат Истина;
	
КонецФункции

// Создает задание очереди на обработку измененных контейнеров, или непосредственно
// запускает обработку если очередь не используется
// 
// Параметры:
//  ИзмененныеКонтейнеры - Массив Из ОпределяемыйТип.КонтейнерыСотрудников - Измененные контейнеры
Процедура ПриИзмененииСоставаКонтейнеров(Знач ИзмененныеКонтейнеры) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДвухфакторнуюАутентификацию") Тогда
		Возврат;
	КонецЕсли;
	
	Номер = ИзмененныеКонтейнеры.ВГраница();
	Пока Номер >= 0 Цикл
		Если ТипЗнч(ИзмененныеКонтейнеры[Номер]) <> Тип("СправочникСсылка.ПодразделенияКонтейнеры") 
			И ТипЗнч(ИзмененныеКонтейнеры[Номер]) <> Тип("СправочникСсылка.РабочиеГруппы")
			И ТипЗнч(ИзмененныеКонтейнеры[Номер]) <> Тип("СправочникСсылка.Сотрудники") Тогда
			ИзмененныеКонтейнеры.Удалить(Номер);
		КонецЕсли;
		Номер = Номер - 1;
	КонецЦикла;
	
	Если ИзмененныеКонтейнеры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ШаблоныДвухфакторнойАутентификацииУчастники.Ссылка КАК Ссылка,
		|	ШаблоныДвухфакторнойАутентификацииУчастники.Участник КАК Контейнер
		|ИЗ
		|	Справочник.ШаблоныДвухфакторнойАутентификации.Участники КАК ШаблоныДвухфакторнойАутентификацииУчастники
		|ГДЕ
		|	ШаблоныДвухфакторнойАутентификацииУчастники.Участник В(&ИзмененныеКонтейнеры)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ШаблоныДвухфакторнойАутентификацииУчастники.Ссылка,
		|	СотрудникиВКонтейнерах.Сотрудник
		|ИЗ
		|	Справочник.ШаблоныДвухфакторнойАутентификации.Участники КАК ШаблоныДвухфакторнойАутентификацииУчастники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиВКонтейнерах
		|		ПО (ШаблоныДвухфакторнойАутентификацииУчастники.Участник = СотрудникиВКонтейнерах.Контейнер)
		|ГДЕ
		|	СотрудникиВКонтейнерах.Сотрудник В (&ИзмененныеКонтейнеры)");
	Запрос.УстановитьПараметр("ИзмененныеКонтейнеры", ИзмененныеКонтейнеры);
	ШаблоныВыборка = Запрос.Выполнить().Выбрать();
	
	ИспользоватьЗадания = ОбработкаОчередиЗаданийСервер.ИспользоватьЗадания(); 
	Если ИспользоватьЗадания Тогда	
		
		Пока ШаблоныВыборка.Следующий() Цикл
			ОбработкаОчередиЗаданийСервер.ДобавитьЗаданиеОбработатьИзменениеСоставаКонтейнеровДля2ФА(
				ШаблоныВыборка.Ссылка, ШаблоныВыборка.Контейнер);
		КонецЦикла;
		
	Иначе
		
		Пока ШаблоныВыборка.Следующий() Цикл
			ОбработатьИзменениеСоставаКонтейнеров(ШаблоныВыборка.Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет, есть ли изменения в шаблоне 2ФА, кроме состава ТЧ ФактическиеУчастники
// 
// Параметры: ШаблонОбъект - СправочникОбъект.ШаблоныДвухфакторнойАутентификации
//  Изменения - Структура - См. КОДПолучение.ИзмененияСсылочныхДанных
// 
// Возвращаемое значение:
//  Булево - В шаблоне есть изменения
Функция ВШаблонеЕстьИзменения(Изменения) Экспорт

	Если Изменения.ЭтоНовый Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Изменения Цикл
		Если СтрЗаканчиваетсяНа(КлючИЗначение.Ключ, "Изменение") И КлючИЗначение.Значение Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецЕсли
