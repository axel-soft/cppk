#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка = Ложь)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Владелец");
	Поля.Добавить("СпособВключенияУчастников");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка) 
	
	СтандартнаяОбработка = Ложь;
	Представление = СтрШаблон("%1, %2", Данные.Владелец, Данные.СпособВключенияУчастников);
	
КонецПроцедуры

// Вместо открытия элемента открывается форма проекта.
//
Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма,
			ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
				
		СтандартнаяОбработка = Ложь;
		Если Не Параметры.Свойство("Ключ") Тогда
			ВызватьИсключение НСтр(
				"ru = 'Справочник наполняется автоматически и не предназначен для редактирования.'");
		КонецЕсли;
		ВыбраннаяФорма = Метаданные.Справочники.Проекты.Формы.ФормаЭлемента;
		Параметры.Ключ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "Владелец");
		
	ИначеЕсли ВидФормы = "ФормаВыбора"
		Или ВидФормы = "ФормаСписка" И Параметры.Свойство("РежимВыбора") И Параметры.РежимВыбора Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "Справочник.АдреснаяКнига.ФормаСписка";
		
		Параметры.Вставить("РежимРаботыФормы", 1);
		Параметры.Вставить("УпрощенныйИнтерфейс", Истина);
		Параметры.Вставить("ОтображатьСотрудников", Истина);
		Параметры.Вставить("ВыбиратьКонтейнерыПользователей", Истина);
		Параметры.Вставить("УточнятьСоставКонтейнеров", Истина);
		Параметры.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор проекта'"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Текст = Параметры.СтрокаПоиска; 
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 20
	|	ПроектыКонтейнеры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПроектыКонтейнеры КАК ПроектыКонтейнеры
	|ГДЕ
	|	(ПроектыКонтейнеры.Владелец.Наименование ПОДОБНО &Текст
	|		ИЛИ ПроектыКонтейнеры.Владелец.Код ПОДОБНО &Текст)
	|	И НЕ ПроектыКонтейнеры.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Находит или создает проект-контейнер по ссылке на проект.
//
// Параметры:
//   Проект - СправочникСсылка.Проекты - проект.
//   СпособВключенияУчастников - ПеречислениеСсылка.СпособВключенияУчастников -
//   	способ включения участников проекта.
//   СсылкаНового - СправочникСсылка.ПроектыКонтейнеры, Неопределено - ссылка для присваивания новому элементу.
//
// Возвращаемое значение:
//   СправочникСсылка.ПроектыКонтейнеры - элемент, найденный в справочнике
//     или созданный на основании исходного проекта.
//
Функция НайтиСоздатьПроектКонтейнер(Проект, СпособВключенияУчастников, СсылкаНового = Неопределено) Экспорт
	
	Результат = НайтиПроектКонтейнер(Проект, СпособВключенияУчастников);
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = СоздатьПроектКонтейнер(Проект, СпособВключенияУчастников, СсылкаНового);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Находит проект-контейнер по ссылке на проект.
//
// Параметры:
//   Проект - СправочникСсылка.Проекты - проект.
//   СпособВключенияУчастников - ПеречислениеСсылка.СпособВключенияУчастников -
//   	способ включения участников проекта.
//
// Возвращаемое значение:
//   СправочникСсылка.ПроектыКонтейнеры, Неопределено - элемент, найденный в справочнике.
//
Функция НайтиПроектКонтейнер(Проект, СпособВключенияУчастников) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПроектыКонтейнеры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПроектыКонтейнеры КАК ПроектыКонтейнеры
		|ГДЕ
		|	ПроектыКонтейнеры.Владелец = &Владелец
		|	И ПроектыКонтейнеры.СпособВключенияУчастников = &СпособВключенияУчастников");
		
	Запрос.УстановитьПараметр("Владелец", Проект);
	Запрос.УстановитьПараметр("СпособВключенияУчастников", СпособВключенияУчастников);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Создает проект-контейнер.
//
// Параметры:
//   Проект - СправочникСсылка.Проекты - проект.
//   СпособВключенияУчастников - ПеречислениеСсылка.СпособВключенияУчастников -
//   	способ включения участников проекта.
//   СсылкаНового - СправочникСсылка.ПроектыКонтейнеры, Неопределено - ссылка для присваивания новому элементу.
//
// Возвращаемое значение:
//   СправочникСсылка.ПроектыКонтейнеры, Неопределено - созданный элемент.
//
Функция СоздатьПроектКонтейнер(Проект, СпособВключенияУчастников, СсылкаНового = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПроектКонтейнер = Справочники.ПроектыКонтейнеры.СоздатьЭлемент();
	Если ЗначениеЗаполнено(СсылкаНового) И Не ОбщегоНазначения.СсылкаСуществует(СсылкаНового) Тогда
		ПроектКонтейнер.УстановитьСсылкуНового(СсылкаНового);
	КонецЕсли;
	ПроектКонтейнер.Владелец = Проект;
	ПроектКонтейнер.СпособВключенияУчастников = СпособВключенияУчастников;
	
	ПроектКонтейнер.Записать();
	
	Возврат ПроектКонтейнер.Ссылка;
	
КонецФункции

// Возвращает состав сотрудников, входящих в указанный контейнер.
//
// Параметры:
//   Контейнер - СправочникСсылка.Сотрудники - контейнер сотрудников.
//
// Возвращаемое значение:
//   Массив - массив значений СправочникСсылка.Сотрудники - состав контейнера.
//
Функция СоставКонтейнераСотрудников(Контейнер) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Контейнер) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	РеквизитыКонтейнера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контейнер,
		"ПометкаУдаления, Владелец, Владелец.ПометкаУдаления, СпособВключенияУчастников");
	
	Если РеквизитыКонтейнера.ПометкаУдаления = Истина
		Или РеквизитыКонтейнера.ВладелецПометкаУдаления = Истина Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контейнер", Контейнер);
	Запрос.УстановитьПараметр("Проект", РеквизитыКонтейнера.Владелец);
	
	СпособыВключения = Перечисления.СпособВключенияУчастниковПроекта;
	Если РеквизитыКонтейнера.СпособВключенияУчастников = СпособыВключения.ТолькоРуководитель Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Сотрудники.Ссылка КАК Сотрудник
			|ИЗ
			|	Справочник.Проекты КАК Проекты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО Проекты.Руководитель = Сотрудники.Ссылка
			|ГДЕ
			|	Проекты.Ссылка = &Проект
			|	И НЕ Сотрудники.ПометкаУдаления";
		
	ИначеЕсли РеквизитыКонтейнера.СпособВключенияУчастников = СпособыВключения.ВсеУчастники Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Сотрудники.Ссылка КАК Сотрудник
			|ИЗ
			|	Справочник.Проекты КАК Проекты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО Проекты.Руководитель = Сотрудники.Ссылка
			|ГДЕ
			|	Проекты.Ссылка = &Проект
			|	И НЕ Сотрудники.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	Сотрудники.Ссылка
			|ИЗ
			|	Справочник.Проекты.ПроектнаяКоманда КАК ПроектнаяКоманда
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО ПроектнаяКоманда.Исполнитель = Сотрудники.Ссылка
			|ГДЕ
			|	ПроектнаяКоманда.Ссылка = &Проект
			|	И НЕ Сотрудники.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	Сотрудники.Ссылка
			|ИЗ
			|	Справочник.Проекты.ПроектнаяКоманда КАК ПроектнаяКоманда
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПолныеРоли КАК ПолныеРоли
			|		ПО ПроектнаяКоманда.Исполнитель = ПолныеРоли.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиРолей КАК ИсполнителиРолей
			|		ПО (ПолныеРоли.Ссылка = ИсполнителиРолей.РольИсполнителя)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО (ИсполнителиРолей.Исполнитель = Сотрудники.Ссылка)
			|ГДЕ
			|	ПроектнаяКоманда.Ссылка = &Проект
			|	И НЕ ПолныеРоли.ПометкаУдаления
			|	И НЕ Сотрудники.ПометкаУдаления";
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
КонецФункции

// Возвращает контейнеры типа ПроектыКонтейнеры, которым принадлежит указанный сотрудник.
//
// Параметры:
//   Сотрудник - СправочникСсылка.Сотрудники - проверяемый сотрудник.
//
// Возвращаемое значение:
//   Массив - массив значений СправочникСсылка.ПроектыКонтейнеры -
//   	контейнеры, которым принадлежит сотрудник.
//
Функция КонтейнерыСотрудника(Сотрудник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ПометкаУдаления") = Истина Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Контейнеры.Ссылка КАК Контейнер
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПроектыКонтейнеры КАК Контейнеры
		|		ПО Проекты.Ссылка = Контейнеры.Владелец
		|ГДЕ
		|	Проекты.Руководитель = &Сотрудник
		|	И НЕ Проекты.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Контейнеры.Ссылка
		|ИЗ
		|	Справочник.Проекты.ПроектнаяКоманда КАК ПроектнаяКомандаТЧ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
		|		ПО ПроектнаяКомандаТЧ.Ссылка = Проекты.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПроектыКонтейнеры КАК Контейнеры
		|		ПО (Проекты.Ссылка = Контейнеры.Владелец)
		|ГДЕ
		|	ПроектнаяКомандаТЧ.Исполнитель = &Сотрудник
		|	И Контейнеры.СпособВключенияУчастников = ЗНАЧЕНИЕ(Перечисление.СпособВключенияУчастниковПроекта.ВсеУчастники)
		|	И НЕ Проекты.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Контейнеры.Ссылка
		|ИЗ
		|	Справочник.Проекты.ПроектнаяКоманда КАК ПроектнаяКомандаТЧ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
		|		ПО ПроектнаяКомандаТЧ.Ссылка = Проекты.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПроектыКонтейнеры КАК Контейнеры
		|		ПО Проекты.Ссылка = Контейнеры.Владелец
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПолныеРоли КАК ПолныеРоли
		|		ПО ПроектнаяКомандаТЧ.Исполнитель = ПолныеРоли.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиРолей КАК ИсполнителиРолей
		|		ПО ПолныеРоли.Ссылка = ИсполнителиРолей.РольИсполнителя
		|ГДЕ
		|	ИсполнителиРолей.Исполнитель = &Сотрудник
		|	И Контейнеры.СпособВключенияУчастников = ЗНАЧЕНИЕ(Перечисление.СпособВключенияУчастниковПроекта.ВсеУчастники)
		|	И НЕ Проекты.ПометкаУдаления
		|	И НЕ ПолныеРоли.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контейнер");
	
	Возврат Результат;
	
КонецФункции

// Возвращает отслеживаемые реквизиты для дополнительного свойства ПредыдущиеЗначенияРеквизитов.
//
// Возвращаемое значение:
//  Строка - Отслеживаемые реквизиты.
//
Функция ОтслеживаемыеРеквизиты() Экспорт
	
	ОтслеживаемыеРеквизиты = "ПометкаУдаления";
	
	Возврат ОтслеживаемыеРеквизиты;
	
КонецФункции

#Область ОбновлениеДанныхКэширующихОбъектов

// Конструктор параметров обновления данных кэширующих объектов.
//
// Возвращаемое значение:
//	Структура:
//		* ОбъектыДляОбновленияСотрудниковВКонтейнерах - Массив Из СправочникСсылка.РабочиеГруппы - Список объектов, по которым необходимо обновить данные РС СотрудникиВКонтейнерах.
//
Функция ПараметрыОбновленияДанныхКэширующихОбъектов() Экспорт
	
	ПараметрыОбновления = Новый Структура;	
	ПараметрыОбновления.Вставить("ОбъектыДляОбновленияСотрудниковВКонтейнерах", Новый Массив);
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Устанавливает значения параметров обновления данных кэширующих объектов по данным объекта.
//
// Параметры:
//	Объект - СправочникОбъект.ПроектыКонтейнеры - Объект, для которго необходимо определить параметры обновления.
//
// Возвращаемое значение:
//	Структура: см. ПараметрыОбновленияДанныхКэширующихОбъектов.
//
Функция ЗначенияПараметровОбновленияДанныхКэширующихОбъектов(Объект) Экспорт
	
	ПараметрыОбновления = ПараметрыОбновленияДанныхКэширующихОбъектов();
	
	ПредыдущиеЗначенияРеквизитов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Объект.ДополнительныеСвойства, "ПредыдущиеЗначенияРеквизитов");
	
	СсылкаНаОбъект = Объект.Ссылка;
	
	Если Объект.ЭтоНовый() Тогда
		Если Объект.ПолучитьСсылкуНового().Пустая() Тогда // Установим ссылку нового, если ее нет
			СсылкаНаОбъект = ПолучитьСсылку(Новый УникальныйИдентификатор);
			Объект.УстановитьСсылкуНового(СсылкаНаОбъект);
		Иначе // Если ссылку нового уже установили ранее, возьмем ее
			СсылкаНаОбъект = Объект.ПолучитьСсылкуНового();
		КонецЕсли;
	КонецЕсли;
	
	Если ПредыдущиеЗначенияРеквизитов = Неопределено Тогда
		ПредыдущиеЗначенияРеквизитов =
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъект, ОтслеживаемыеРеквизиты());
	КонецЕсли;
	
	Если Объект.ЭтоНовый()
			Или ПредыдущиеЗначенияРеквизитов.ПометкаУдаления <> Объект.ПометкаУдаления Тогда
		
		ПараметрыОбновления.ОбъектыДляОбновленияСотрудниковВКонтейнерах.Добавить(СсылкаНаОбъект);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновляет данные зависимых объектов согласно установленным параметрам.
//
// Параметры:
//	Объект - СправочникОбъект.ПроектыКонтейнеры - Объект, по данным которого необходимо обновить кэширующие объекты.
//	ПараметрыОбновления - Структура Из КлючИЗначение - см. ПараметрыОбновленияДанныхКэширующихОбъектов.
//
Процедура ОбновитьДанныеКэширующихОбъектов(Объект, ПараметрыОбновления) Экспорт
	
	Если ПараметрыОбновления.ОбъектыДляОбновленияСотрудниковВКонтейнерах.Количество() Тогда
		РегистрыСведений.СотрудникиВКонтейнерах.ОбновитьДанныеКонтейнеров(
			ПараметрыОбновления.ОбъектыДляОбновленияСотрудниковВКонтейнерах);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
