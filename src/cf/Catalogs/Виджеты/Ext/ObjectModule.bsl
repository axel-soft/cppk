#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Ошибки = Неопределено;
	
	// Уникальность наименования.
	Если Не НаименованиеУникально() Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Ошибки,
			"Объект.Наименование",
			НСтр("ru = 'Данное наименование уже указано для другого виджета.'"));
	КонецЕсли;
	
	// Запрет нескольких уровней вложенности виджетов.
	ВсеВложенныеВиджеты = Новый Массив;
	
	Для Каждого ВложенныйВиджет Из ВложенныеВиджеты.ВыгрузитьКолонку("Виджет") Цикл
		
		Если Не ЗначениеЗаполнено(ВложенныйВиджет) Тогда
			Продолжить;
		КонецЕсли;
		
		ВсеВложенныеВиджеты.Добавить(ВложенныйВиджет);
		
	КонецЦикла;
	
	Для Каждого ВложенныйВиджет Из Компоновка.ВыгрузитьКолонку("Виджет") Цикл
		
		Если Не ЗначениеЗаполнено(ВложенныйВиджет) Тогда
			Продолжить;
		КонецЕсли;
		
		ВсеВложенныеВиджеты.Добавить(ВложенныйВиджет);
		
	КонецЦикла;
	
	ВсеВложенныеВиджеты = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВсеВложенныеВиджеты);
	
	РеквизитыВложенныхВиджетов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ВсеВложенныеВиджеты,
		"Вид");
	
	НомерВиджета = 1;
	Для Каждого ВложенныйВиджет Из ВложенныеВиджеты.ВыгрузитьКолонку("Виджет") Цикл
		
		Если Не ЗначениеЗаполнено(ВложенныйВиджет) Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитыВложенногоВиджета = РеквизитыВложенныхВиджетов[ВложенныйВиджет];
		
		Если ВложенныйВиджет = Ссылка Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				"Объект.ВложенныеВиджеты[%1].Виджет",
				НСтр("ru = 'Виджет вложен сам в себя.'"),
				"Объект.ВложенныеВиджеты",
				НомерВиджета,
				НСтр("ru = 'Виджет вложен сам в себя в строке %1.'"));
				
		ИначеЕсли РеквизитыВложенногоВиджета.Вид = Перечисления.ВидыВиджетов.Альтернативный Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				"Объект.ВложенныеВиджеты[%1].Виджет",
				НСтр("ru = 'Альтернативный виджет вложен в альтернативный.'"),
				"Объект.ВложенныеВиджеты",
				НомерВиджета,
				НСтр("ru = 'Альтернативный виджет вложен в альтернативный %1.'"));
				
		ИначеЕсли РеквизитыВложенногоВиджета.Вид = Перечисления.ВидыВиджетов.Комплексный Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				"Объект.ВложенныеВиджеты[%1].Виджет",
				НСтр("ru = 'Комплексный виджет вложен в альтернативный.'"),
				"Объект.ВложенныеВиджеты",
				НомерВиджета,
				НСтр("ru = 'Комплексный виджет вложен в альтернативный в строке %1.'"));
				
		КонецЕсли;
		
		НомерВиджета = НомерВиджета + 1;
		
	КонецЦикла;
	
	НомерВиджета = 1;
	Для Каждого ВложенныйВиджет Из Компоновка.ВыгрузитьКолонку("Виджет") Цикл
		
		Если Не ЗначениеЗаполнено(ВложенныйВиджет) Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитыВложенногоВиджета = РеквизитыВложенныхВиджетов[ВложенныйВиджет];
		
		Если ВложенныйВиджет = Ссылка Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				"Объект.Компоновка[%1].Виджет",
				НСтр("ru = 'Виджет вложен сам в себя.'"),
				"Объект.Компоновка",
				НомерВиджета,
				НСтр("ru = 'Виджет вложен сам в себя в строке %1.'"));
				
		ИначеЕсли РеквизитыВложенногоВиджета.Вид = Перечисления.ВидыВиджетов.Альтернативный Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				"Объект.Компоновка[%1].Виджет",
				НСтр("ru = 'Альтернативный виджет вложен в комплексный.'"),
				"Объект.Компоновка",
				НомерВиджета,
				НСтр("ru = 'Альтернативный виджет вложен в комплексный %1.'"));
				
		ИначеЕсли РеквизитыВложенногоВиджета.Вид = Перечисления.ВидыВиджетов.Комплексный Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				"Объект.Компоновка[%1].Виджет",
				НСтр("ru = 'Комплексный виджет вложен в комплексный.'"),
				"Объект.Компоновка",
				НомерВиджета,
				НСтр("ru = 'Комплексный виджет вложен в комплексный в строке %1.'"));
				
		КонецЕсли;
		
		НомерВиджета = НомерВиджета + 1;
		
	КонецЦикла;
	
	// Количество показателей.
	Если Вид = Перечисления.ВидыВиджетов.Показатели Тогда
		
		КоличествоПоказателей = ОсновныеПоказатели.Количество();
		Если КоличествоПоказателей > РаботаСВиджетами.ПоддерживаемоеКоличествоПоказателей() Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				"Объект.ОсновныеПоказатели",
				СтрШаблон(
					НСтр("ru = 'Виджет ""%1"" не поддерживает количество показателей %2.'"),
					Вид,
					КоличествоПоказателей));
		КонецЕсли;
		
	ИначеЕсли Вид = Перечисления.ВидыВиджетов.Заголовок Тогда
		
		КоличествоПоказателей = ОсновныеПоказатели.Количество();
		Если КоличествоПоказателей > 1 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
				Ошибки,
				"Объект.ОсновныеПоказатели",
				СтрШаблон(
					НСтр("ru = 'Виджет ""%1"" не поддерживает количество показателей %2.'"),
					Вид,
					КоличествоПоказателей));
		КонецЕсли;
		
	КонецЕсли;
	
	КоличествоПоказателей = ПоказателиЗаголовка.Количество();
	Если ПоказателиЗаголовка.Количество() > 1 Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Ошибки,
			"Объект.ПоказателиЗаголовка",
			СтрШаблон(
				НСтр("ru = 'Показатели заголовка не поддерживают количество показателей %1.'"),
				КоличествоПоказателей));
	КонецЕсли;
	
	// Типы значений показателей.
	ВсеПоказатели = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВсеПоказатели,
		ОсновныеПоказатели.ВыгрузитьКолонку("Показатель"));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВсеПоказатели,
		ДополнительныеПоказатели.ВыгрузитьКолонку("Показатель"));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВсеПоказатели,
		ПоказателиЗаголовка.ВыгрузитьКолонку("Показатель"));
	ВсеПоказатели = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВсеПоказатели);
	
	РеквизитыПоказателей =
		ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВсеПоказатели, "ТипЗначенияПоказателя");
	
	НомерПоказателя = 1;
	Для Каждого Показатель Из ОсновныеПоказатели.ВыгрузитьКолонку("Показатель") Цикл
		
		РеквизитыПоказателя = РеквизитыПоказателей[Показатель];
		Если РеквизитыПоказателя = Неопределено Тогда
			НомерПоказателя = НомерПоказателя + 1;
			Продолжить;
		КонецЕсли;
		
		ОжидаемыеТипы = Новый Массив;
		Если Вид = Перечисления.ВидыВиджетов.Список Тогда
			ОжидаемыеТипы.Добавить("Массив");
			ОжидаемыеТипы.Добавить("Число");
		ИначеЕсли Вид = Перечисления.ВидыВиджетов.Диаграмма
			И ТипДиаграммы = "ГистограммаСНакоплением" Тогда
			ОжидаемыеТипы.Добавить("Массив");
		Иначе
			ОжидаемыеТипы.Добавить("Число");
		Конецесли;
		
		Если ОжидаемыеТипы.Найти(РеквизитыПоказателя.ТипЗначенияПоказателя) <> Неопределено Тогда
			НомерПоказателя = НомерПоказателя + 1;
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Ошибки,
			"Объект.ОсновныеПоказатели[%1].Показатель",
			СтрШаблон(
				НСтр("ru = 'Тип значения показателя ""%1"" не соответствует ожидаемому ""%2"".'"),
				РеквизитыПоказателя.ТипЗначенияПоказателя,
				СтрСоединить(ОжидаемыеТипы, ", ")),
			"Объект.ОсновныеПоказатели",
			НомерПоказателя,
			СтрШаблон(
				НСтр("ru = 'Тип значения показателя ""%1"" не соответствует ожидаемому ""%2"" в строке %3.'"),
				РеквизитыПоказателя.ТипЗначенияПоказателя,
				СтрСоединить(ОжидаемыеТипы, ", "),
				"%1"));
		
		НомерПоказателя = НомерПоказателя + 1;
		
	КонецЦикла;
	
	НомерПоказателя = 1;
	Для Каждого Показатель Из ДополнительныеПоказатели.ВыгрузитьКолонку("Показатель") Цикл
		
		РеквизитыПоказателя = РеквизитыПоказателей[Показатель];
		Если РеквизитыПоказателя = Неопределено Тогда
			НомерПоказателя = НомерПоказателя + 1;
			Продолжить;
		КонецЕсли;
		
		ОжидаемыйТипЗначенияПоказателя = "Число";
		
		Если РеквизитыПоказателя.ТипЗначенияПоказателя = ОжидаемыйТипЗначенияПоказателя Тогда
			НомерПоказателя = НомерПоказателя + 1;
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Ошибки,
			"Объект.ДополнительныеПоказатели[%1].Показатель",
			СтрШаблон(
				НСтр("ru = 'Тип значения показателя ""%1"" не соответствует ожидаемому ""%2"".'"),
				РеквизитыПоказателя.ТипЗначенияПоказателя,
				ОжидаемыйТипЗначенияПоказателя),
			"Объект.ДополнительныеПоказатели",
			НомерПоказателя,
			СтрШаблон(
				НСтр("ru = 'Тип значения показателя ""%1"" не соответствует ожидаемому ""%2"" в строке %3.'"),
				РеквизитыПоказателя.ТипЗначенияПоказателя,
				ОжидаемыйТипЗначенияПоказателя,
				"%1"));
		
		НомерПоказателя = НомерПоказателя + 1;
		
	КонецЦикла;
	
	НомерПоказателя = 1;
	Для Каждого Показатель Из ПоказателиЗаголовка.ВыгрузитьКолонку("Показатель") Цикл
		
		РеквизитыПоказателя = РеквизитыПоказателей[Показатель];
		Если РеквизитыПоказателя = Неопределено Тогда
			НомерПоказателя = НомерПоказателя + 1;
			Продолжить;
		КонецЕсли;
		
		ОжидаемыйТипЗначенияПоказателя = "Число";
		
		Если РеквизитыПоказателя.ТипЗначенияПоказателя = ОжидаемыйТипЗначенияПоказателя Тогда
			НомерПоказателя = НомерПоказателя + 1;
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Ошибки,
			"Объект.ПоказателиЗаголовка[%1].Показатель",
			СтрШаблон(
				НСтр("ru = 'Тип значения показателя ""%1"" не соответствует ожидаемому ""%2"".'"),
				РеквизитыПоказателя.ТипЗначенияПоказателя,
				ОжидаемыйТипЗначенияПоказателя),
			"Объект.ПоказателиЗаголовка",
			НомерПоказателя,
			СтрШаблон(
				НСтр("ru = 'Тип значения показателя ""%1"" не соответствует ожидаемому ""%2"" в строке %3.'"),
				РеквизитыПоказателя.ТипЗначенияПоказателя,
				ОжидаемыйТипЗначенияПоказателя,
				"%1"));
		
		НомерПоказателя = НомерПоказателя + 1;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
	// Непроверяемые реквизиты.
	НепроверяемыеРеквизиты = Новый Массив;
	
	Если Вид <> Перечисления.ВидыВиджетов.Диаграмма
		И Вид <> Перечисления.ВидыВиджетов.ДиаграммаСЛегендой Тогда
		НепроверяемыеРеквизиты.Добавить("ТипДиаграммы");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПриЧтенииПредставленийНаСервере() Экспорт
	МультиязычностьСервер.ПриЧтенииПредставленийНаСервере(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет, что наименование уникально.
// 
// Возвращаемое значение:
//  Булево - Наименование уникально.
//
Функция НаименованиеУникально()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Виджеты.Ссылка
		|ИЗ
		|	Справочник.Виджеты КАК Виджеты
		|ГДЕ
		|	Виджеты.Наименование = &Наименование
		|	И Виджеты.Ссылка <> &Ссылка";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	НаименованиеУникально = РезультатЗапроса.Пустой();
	
	Возврат НаименованиеУникально;
	
КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли