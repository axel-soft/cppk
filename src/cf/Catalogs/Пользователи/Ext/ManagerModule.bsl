///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////
#Если НЕ МобильныйАвтономныйСервер Тогда

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов

// Возвращает реквизиты объекта, которые не рекомендуется редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив из Строка
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив;
	НеРедактируемыеРеквизиты.Добавить("Служебный");
	НеРедактируемыеРеквизиты.Добавить("ИдентификаторПользователяИБ");
	НеРедактируемыеРеквизиты.Добавить("ИдентификаторПользователяСервиса");
	НеРедактируемыеРеквизиты.Добавить("УдалитьСвойстваПользователяИБ");
	
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ПодключаемыеКоманды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
КонецПроцедуры

// Для использования в процедуре ДобавитьКомандыСозданияНаОсновании других модулей менеджеров объектов.
// Добавляет в список команд создания на основании этот объект.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//  СтрокаТаблицыЗначений, Неопределено - описание добавленной команды.
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульСозданиеНаОсновании = ОбщегоНазначения.ОбщийМодуль("СозданиеНаОсновании");
		Возврат МодульСозданиеНаОсновании.ДобавитьКомандуСозданияНаОсновании(КомандыСозданияНаОсновании, Метаданные.Справочники.Пользователи);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

// Возвращает состав сотрудников, входящих в указанный контейнер.
//
// Параметры:
//   Контейнер - СправочникСсылка.Сотрудники - контейнер сотрудников.
//
// Возвращаемое значение:
//   Массив - массив значений СправочникСсылка.Сотрудники - состав контейнера.
//
Функция СоставКонтейнераСотрудников(Контейнер) Экспорт
	
	Если Не ЗначениеЗаполнено(Контейнер) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контейнер, "ПометкаУдаления") = Истина Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СотрудникиПользователей.Сотрудник КАК Сотрудник
		|ИЗ
		|	РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|ГДЕ
		|	СотрудникиПользователей.Пользователь = &Пользователь
		|	И НЕ СотрудникиПользователей.Сотрудник.ПометкаУдаления");
	Запрос.УстановитьПараметр("Пользователь", Контейнер);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
	Возврат Результат;
	
КонецФункции

// Возвращает контейнеры типа Пользователи, которым принадлежит указанный сотрудник.
//
// Параметры:
//   Сотрудник - СправочникСсылка.Сотрудники - проверяемый сотрудник.
//
// Возвращаемое значение:
//   Массив - массив значений СправочникСсылка.Пользователи -
//   	контейнеры, которым принадлежит сотрудник.
//
Функция КонтейнерыСотрудника(Сотрудник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ПометкаУдаления") = Истина Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СотрудникиПользователей.Пользователь КАК Контейнер
		|ИЗ
		|	РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|ГДЕ
		|	СотрудникиПользователей.Сотрудник = &Сотрудник
		|	И НЕ СотрудникиПользователей.Пользователь.ПометкаУдаления");
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контейнер");
	
	Возврат Результат;
	
КонецФункции

// Вернет Истина, у этого объекта метаданных есть функция ПолучитьАдресФото
Функция ЕстьФункцияПолученияФото() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Прочитать фото и вернуть адрес (навигационную ссылку)
// Параметры:
//  Ссылка - ссылка на справочник, для которого надо показать фото
//  УникальныйИдентификатор - уникальный идентификатор формы, откуда идет вызов
//  ЕстьКартинка - возвращаемое значение - Булево - Истина, если в объекте есть картинка
//
// Возвращаемое значение:
//   Строка - навигационная ссылка - или "", если нет картинки
Функция ПолучитьАдресФото(Ссылка, УникальныйИдентификатор, ЕстьКартинка) Экспорт
	
	АдресКартинки = "";
	
	КонтейнерФотографии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ФизЛицо");
	Если Не ЗначениеЗаполнено(КонтейнерФотографии) Тогда
		КонтейнерФотографии = Справочники.КаналыОбсуждений.КаналПоПользователю(Ссылка);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КонтейнерФотографии) Тогда
		Возврат АдресКартинки;
	КонецЕсли;
	
	Если ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() 
		И Не ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(КонтейнерФотографии).Чтение Тогда
		Возврат АдресКартинки;
	КонецЕсли;
	
	АдресКартинки = РаботаСФотографиями.ПолучитьНавигационнуюСсылкуРеквизита(
		КонтейнерФотографии, УникальныйИдентификатор, ЕстьКартинка);
	
	Возврат АдресКартинки;
	
КонецФункции

// Возвращает двоичные данные фото пользователя
//
Функция ПолучитьДвоичныеДанныеФото(Пользователь) Экспорт
	
	КонтейнерФотографии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ФизЛицо");
	
	Если Не ЗначениеЗаполнено(КонтейнерФотографии) Тогда
		КонтейнерФотографии = Справочники.КаналыОбсуждений.КаналПоПользователю(Пользователь);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КонтейнерФотографии) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа()
		И Не ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(КонтейнерФотографии).Чтение Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДвоичныеДанные = РаботаСФотографиями.ПолучитьДвоичныеДанныеРеквизита(
		КонтейнерФотографии, "ФайлФотографии");
	Если Не ЗначениеЗаполнено(ДвоичныеДанные) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДвоичныеДанные;
	
КонецФункции

// Возвращает отслеживаемые реквизиты для дополнительного свойства ПредыдущиеЗначенияРеквизитов.
//
// Возвращаемое значение:
//  Строка - Отслеживаемые реквизиты.
//
Функция ОтслеживаемыеРеквизиты() Экспорт
	
	ОтслеживаемыеРеквизиты = "ПометкаУдаления, Недействителен, Наименование, ФизЛицо";
	
	Возврат ОтслеживаемыеРеквизиты;
	
КонецФункции

// Конструктор параметров обновления составов групп пользователей.
//
// Возвращаемое значение:
//	Структура:
//		* ЭтоНовый - Булево.
//
Функция ПараметрыОбновленияСоставовГруппПользователей() Экспорт
	
	ПараметрыОбновления = Новый Структура;
	ПараметрыОбновления.Вставить("ЭтоНовый", Ложь);
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Устанавливает значения параметров обновления составов групп пользователей по данным объекта.
//
// Параметры:
//	Объект - СправочникОбъект.РабочиеГруппы - Объект, для которго необходимо определить параметры обновления.
//
// Возвращаемое значение:
//	Структура: см. ПараметрыОбновленияСоставовГруппПользователей.
//
Функция ЗначенияПараметровСоставовГруппПользователей(Объект) Экспорт
	
	ПараметрыОбновления = ПараметрыОбновленияСоставовГруппПользователей();
	
	ПараметрыОбновления.ЭтоНовый = Объект.ЭтоНовый();
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновляет составы групп пользователей.
//
// Параметры:
//	Пользователь - СправочникСсылка.Пользователи - Пользователь, для которого необходимо обновить составы групп пользователей.
//	ПараметрыОбновления - см. ПараметрыОбновленияСоставовГруппПользователей.
//
Процедура ОбновитьСоставыГруппПользователей(Пользователь, ПараметрыОбновления) Экспорт
	
	УчастникиИзменений = Новый Соответствие;
	ИзмененныеГруппы = Новый Соответствие;
	
	ПользователиСлужебный.ОбновитьСоставыГруппПользователей(
		Справочники.РабочиеГруппы.ВсеПользователи, Пользователь, УчастникиИзменений, ИзмененныеГруппы);
	
	ПользователиСлужебный.ОбновитьИспользуемостьСоставовГруппПользователей(
		Пользователь, УчастникиИзменений, ИзмененныеГруппы);
	
	ПользователиСлужебный.ПослеОбновленияСоставовГруппПользователей(
		УчастникиИзменений, ИзмененныеГруппы);
		
	ИнтеграцияПодсистемБСП.ПослеДобавленияИзмененияПользователяИлиГруппы(
		Пользователь, ПараметрыОбновления.ЭтоНовый);
	
КонецПроцедуры

// Конструктор параметров обновления данных кэширующих объектов.
//
// Возвращаемое значение:
//	Структура:
//		* ОбновитьДанныеРегистраСотрудникиВКонтейнерах - Булево - Признак необходимости обновления данных РС СотрудникиВКонтейнерах.
//
Функция ПараметрыОбновленияДанныхКэширующихОбъектов() Экспорт
	
	ПараметрыОбновления = Новый Структура;
	ПараметрыОбновления.Вставить("ОбновитьДанныеРегистраСотрудникиВКонтейнерах", Ложь);
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Устанавливает значения параметров обновления данных кэширующих объектов по данным объекта.
//
// Параметры:
//	Объект - СправочникОбъект.РабочиеГруппы - Объект, для которго необходимо определить параметры обновления.
//
// Возвращаемое значение:
//	Структура: см. ПараметрыОбновленияДанныхКэширующихОбъектов.
//
Функция ЗначенияПараметровОбновленияДанныхКэширующихОбъектов(Объект) Экспорт
	
	ПараметрыОбновления = ПараметрыОбновленияДанныхКэширующихОбъектов();
	
	ПредыдущиеЗначенияРеквизитов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Объект.ДополнительныеСвойства, "ПредыдущиеЗначенияРеквизитов");
	
	СсылкаНаОбъект = Объект.Ссылка;
	
	Если Объект.ЭтоНовый() Тогда
		Если Объект.ПолучитьСсылкуНового().Пустая() Тогда // Установим ссылку нового, если ее нет
			СсылкаНаОбъект = ПолучитьСсылку(Новый УникальныйИдентификатор);
			Объект.УстановитьСсылкуНового(СсылкаНаОбъект);
		Иначе // Если ссылку нового уже установили ранее, возьмем ее
			СсылкаНаОбъект = Объект.ПолучитьСсылкуНового();
		КонецЕсли;
	КонецЕсли;
	
	Если ПредыдущиеЗначенияРеквизитов = Неопределено Тогда
		ПредыдущиеЗначенияРеквизитов =
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъект, ОтслеживаемыеРеквизиты());
	КонецЕсли; 
	
	Если Объект.ЭтоНовый()
			Или ПредыдущиеЗначенияРеквизитов.ПометкаУдаления <> Объект.ПометкаУдаления Тогда
		
		ПараметрыОбновления.ОбновитьДанныеРегистраСотрудникиВКонтейнерах = Истина;
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновляет данные зависимых объектов согласно установленным параметрам.
//
// Параметры:
//	Объект - СправочникОбъект.Пользователи - Объект, по данным которого необходимо обновить данные кэширующих объектов.
//	ПараметрыОбновления - см. ПараметрыОбновленияДанныхКэширующихОбъектов.
//
Процедура ОбновитьДанныеКэширующихОбъектов(Объект, ПараметрыОбновления) Экспорт
	
	Если ПараметрыОбновления.ОбновитьДанныеРегистраСотрудникиВКонтейнерах = Истина Тогда
		РегистрыСведений.СотрудникиВКонтейнерах.ОбновитьДанныеКонтейнера(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Недействителен = Ложь;
	Служебный = Ложь;
	
	Если Параметры.Отбор.Свойство("Недействителен") Тогда
		Недействителен = Параметры.Отбор.Недействителен;
	Иначе
		Параметры.Отбор.Вставить("Недействителен", Ложь);
	КонецЕсли;
	
	Если Параметры.Отбор.Свойство("Служебный") Тогда
		Служебный = Параметры.Отбор.Служебный;
	Иначе
		Параметры.Отбор.Вставить("Служебный", Ложь);
	КонецЕсли;
	
	НеИспользоватьОтборПоФизЛицу = Истина;
	ФизЛицо = Неопределено;
	Если Параметры.Отбор.Свойство("ФизЛицо") Тогда
		НеИспользоватьОтборПоФизЛицу = Ложь;
		ФизЛицо = Параметры.Отбор.ФизЛицо;
	КонецЕсли;
	
	Текст = Параметры.СтрокаПоиска; 
	СловаПоиска = ОбщегоНазначенияДокументооборот.СловаПоиска(Текст);
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Пользователи.Ссылка КАК Ссылка,
		|	Сотрудники.Подразделение КАК Подразделение,
		|	Сотрудники.Должность КАК Должность
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователя
		|		ПО Пользователи.Ссылка = СотрудникиПользователя.Пользователь
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО СотрудникиПользователя.Сотрудник = Сотрудники.Ссылка
		|ГДЕ
		|	Пользователи.Наименование ПОДОБНО &Текст
		|	И Пользователи.Недействителен = &Недействителен
		|	И Пользователи.Служебный = &Служебный
		|	И (&НеИспользоватьОтборПоФизЛицу
		|	ИЛИ Пользователи.ФизЛицо = &ФизЛицо)";
	
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	Запрос.УстановитьПараметр("Недействителен", Недействителен);
	Запрос.УстановитьПараметр("Служебный", Служебный);
	Запрос.УстановитьПараметр("НеИспользоватьОтборПоФизЛицу", НеИспользоватьОтборПоФизЛицу);
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПредставлениеФорматированнаяСтрока = ОбщегоНазначенияДокументооборот.ФорматированныйРезультатПоиска(
			Строка(Выборка.Ссылка),
			СловаПоиска);
		Если ЗначениеЗаполнено(Выборка.Подразделение) Или ЗначениеЗаполнено(Выборка.Должность) Тогда 
			
			ДобавкаТекст = "";
			Если ЗначениеЗаполнено(Выборка.Подразделение) И ЗначениеЗаполнено(Выборка.Должность) Тогда 
				ДобавкаТекст = СтрШаблон(НСтр("ru = ' (%1, %2)'"), Строка(Выборка.Подразделение), Строка(Выборка.Должность));
			ИначеЕсли ЗначениеЗаполнено(Выборка.Подразделение) Тогда 	
				ДобавкаТекст = СтрШаблон(НСтр("ru = ' (%1)'"), Строка(Выборка.Подразделение));
			ИначеЕсли ЗначениеЗаполнено(Выборка.Должность) Тогда 	
				ДобавкаТекст = СтрШаблон(НСтр("ru = ' (%1)'"), Строка(Выборка.Должность));
			КонецЕсли;	
			
			ПредставлениеФорматированнаяСтрока = Новый ФорматированнаяСтрока(
				ПредставлениеФорматированнаяСтрока, 
				Новый ФорматированнаяСтрока(ДобавкаТекст, 
					, WebЦвета.Серый)
				);
				
			ДанныеВыбора.Добавить(Выборка.Ссылка, ПредставлениеФорматированнаяСтрока);
			
		Иначе	
			
			ДанныеВыбора.Добавить(Выборка.Ссылка, ПредставлениеФорматированнаяСтрока);
			
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ФормаЭлемента";
		
	ИначеЕсли (ВидФормы = "ФормаВыбора"
		И Не Параметры.Свойство("ПростаяФормаВыбора"))
		Или (ВидФормы = "ФормаСписка"
			И Параметры.Свойство("РежимВыбора")
			И Параметры.РежимВыбора) Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "Справочник.АдреснаяКнига.ФормаСписка";
		Параметры.Вставить("РежимРаботыФормы", 1);
		Параметры.Вставить("УпрощенныйИнтерфейс", Истина);
		Параметры.Вставить("ОтображатьПользователей", Истина);
		Параметры.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор пользователя'"));
		Если Параметры.Свойство("ВыборГруппПользователей")
			И Параметры.ВыборГруппПользователей = Истина Тогда
			Параметры.Вставить("ВыбиратьКонтейнерыПользователей", Истина);
		КонецЕсли;
		Если Параметры.Свойство("ТекущаяСтрока") Тогда
			Параметры.Вставить("ВыбранныеАдресаты", Параметры.ТекущаяСтрока);
		КонецЕсли;
		
		Параметры.Вставить("КонтролироватьДублиАдресатов", Истина);
		Параметры.Вставить("КонтролироватьСотрудниковБезПользователя", Истина); 
		Параметры.Вставить("ЗапрещатьВыбиратьСотрудниковБезПользователя", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	СписокПользователей = ПользователиСлужебный.ПользователиДляВключенияВосстановленияПароля();
	
	Если СписокПользователей.Количество() > 0 Тогда
		ВключитьСтандартныеНастройкиВосстановленияПароля();
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, СписокПользователей);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ПользовательСсылка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, "Справочник.Пользователи");
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	СписокОшибок = Новый Массив;
	
	Пока ПользовательСсылка.Следующий() Цикл
		Результат = ПользователиСлужебный.ОбновитьПочтуДляВосстановленияПароля(ПользовательСсылка.Ссылка);
		
		Если Результат.Статус = "Ошибка" Тогда
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			СписокОшибок.Добавить(Результат.ТекстОшибки);
		Иначе
			ОбъектовОбработано = ОбъектовОбработано + 1;
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ПользовательСсылка.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, "Справочник.Пользователи");
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов <> 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось обработать некоторых сведения о пользователях (пропущены): %1
			|%2'"), ПроблемныхОбъектов, СтрСоединить(СписокОшибок, Символы.ПС));
		ВызватьИсключение ТекстСообщения;
	Иначе
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			Метаданные.Справочники.Пользователи,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Обработана очередная порция сведений о пользователях: %1'"),
				ОбъектовОбработано));
	КонецЕсли;
	
КонецПроцедуры

Процедура ВключитьСтандартныеНастройкиВосстановленияПароля()
	
	Настройки = ДополнительныеНастройкиАутентификации.ПолучитьНастройкиВосстановленияПароля();
	Настройки.СпособВосстановленияПароля = СпособВосстановленияПароляПользователяИнформационнойБазы.ОтправкаКодаПодтвержденияЧерезСтандартныйСервис;
	ДополнительныеНастройкиАутентификации.УстановитьНастройкиВосстановленияПароля(Настройки);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

#КонецЕсли
