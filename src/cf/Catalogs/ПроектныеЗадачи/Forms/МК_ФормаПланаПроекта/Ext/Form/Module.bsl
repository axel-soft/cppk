#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
	
	РежимПросмотра = "Планирование";
	
	Проект = Параметры.Проект;
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'План проекта ""%1""'"),
		Строка(Проект));
		
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи") Тогда 
		Элементы.ДеревоЗадачЗадачи.Видимость = Ложь;
	КонецЕсли;	
	
	ПоказатьПомеченныеНаУдаление = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ИмяФормы,
		"ПоказатьПомеченныеНаУдаление",
		Ложь);
	Элементы.ДеревоЗадачПоказатьПомеченныеНаУдаление.Пометка = ПоказатьПомеченныеНаУдаление;
	
	РеквизитыПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Проект,
		"Ссылка, СпособПланирования, ГрафикРаботы,
		|АвтоматическиРассчитыватьПланПроекта, 
		|ТекущийПланНачало, ТекущийПланОкончание, 
		|ЗагруженИзMSProject, РедактируетсяВСтороннейСистеме,
		|ЕдиницаТрудозатратЗадач, ЕдиницаДлительностиЗадач,
		|ПроектнаяКоманда, Состояние");
	РеквизитыПроекта.Вставить("ЗаполненаПроектнаяКоманда", 
		Не РеквизитыПроекта.ПроектнаяКоманда.Пустой());
	РеквизитыПроекта.Вставить("ДанныеДоступныДляИзменения", 
		ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(Проект).Изменение);
	РеквизитыПроекта.Удалить("ПроектнаяКоманда");
	РеквизитыПроекта.Вставить("ПроектЗавершен", 
		РеквизитыПроекта.Состояние = Перечисления.СостоянияПроектов.Завершен);
	РеквизитыПроекта.Удалить("Состояние");
		
	Если Параметры.Свойство("СостояниеПроектныхЗадач") Тогда 
		ПереданноеСостояниеПроектныхЗадач = Параметры.СостояниеПроектныхЗадач;
	КонецЕсли;
	
	СостояниеПроектныхЗадач = "Все";
	Если ЗначениеЗаполнено(ПереданноеСостояниеПроектныхЗадач) Тогда 
		СостояниеПроектныхЗадач = ПереданноеСостояниеПроектныхЗадач;
	КонецЕсли;	
	ЗаполнитьДеревоЗадач();
	РольПолныеПрава = РольДоступна("ПолныеПрава");
	
	Если Не РольПолныеПрава И (Не РеквизитыПроекта.ДанныеДоступныДляИзменения 
		Или РеквизитыПроекта.РедактируетсяВСтороннейСистеме 
		Или РеквизитыПроекта.ПроектЗавершен) Тогда
		Элементы.ДеревоЗадач.ИзменятьСоставСтрок = Ложь;
		Элементы.ДеревоЗадач.ИзменятьПорядокСтрок = Ложь;
		Элементы.ДеревоЗадачКонтекстноеМенюСвязатьЗадачи.Доступность = Ложь;
		Элементы.ДеревоЗадачКонтекстноеМенюГруппаДобавить.Доступность = Ложь;
		Элементы.ДеревоЗадачКонтекстноеМенюГруппаИзменениеПорядкаЗадач.Доступность = Ложь;
	Иначе	
		Элементы.ДеревоЗадач.ИзменятьСоставСтрок = Истина;
		Элементы.ДеревоЗадач.ИзменятьПорядокСтрок = Истина;
		Элементы.ДеревоЗадачКонтекстноеМенюСвязатьЗадачи.Доступность = Истина;
		Элементы.ДеревоЗадачКонтекстноеМенюГруппаДобавить.Доступность = Истина;
		Элементы.ДеревоЗадачКонтекстноеМенюГруппаИзменениеПорядкаЗадач.Доступность = Истина;
	КонецЕсли;	
	
	УстановитьВидимость(РежимПросмотра);

	Элементы.ТрудозатратыФактСтр.ТолькоПросмотр = Ложь;
	Элементы.ДеревоЗадачИзменить.Видимость = Истина;
	
	ПоказыватьЗадачиПроцессов = Ложь;
	Элементы.ГруппаЗадачиПроцессов.Видимость = ПоказыватьЗадачиПроцессов;
	Элементы.ДеревоЗадачПоказыватьЗадачиПроцессов.Пометка = ПоказыватьЗадачиПроцессов;
	
	Если ПоказыватьЗадачиПроцессов Тогда
		Элементы.ДеревоЗадач.ИспользованиеТекущейСтроки = ИспользованиеТекущейСтрокиТаблицы.ОтображениеВыделенияИВыбор;
	Иначе
		Элементы.ДеревоЗадач.ИспользованиеТекущейСтроки = ИспользованиеТекущейСтрокиТаблицы.Выбор;
	КонецЕсли;
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию(
		"ИспользоватьДатуИВремяВСрокахЗадач");
	
	ФорматДатыДляКолонок = ?(ИспользоватьДатуИВремяВСрокахЗадач, 
		"ДФ='dd.MM.yy H:mm'",
		"ДФ='dd.MM.yy'");
		
	Элементы.ОсновныеЗадачиСрокИсполнения.Формат = ФорматДатыДляКолонок;
	Элементы.ВспомогательныеЗадачиСрокИсполнения.Формат = ФорматДатыДляКолонок;
	
	Если Не РольПолныеПрава Тогда 
		Если РеквизитыПроекта.РедактируетсяВСтороннейСистеме Тогда
			Элементы.РедактированиеЗапрещеноПодпись.Видимость = Истина;
			Элементы.РедактированиеЗапрещеноПодпись.Заголовок = 
				НСтр("ru = 'Проект редактируется в сторонней системе. Редактирование плана запрещено.'");
			
		ИначеЕсли РеквизитыПроекта.ПроектЗавершен Тогда
			Элементы.РедактированиеЗапрещеноПодпись.Видимость = Истина;
			Элементы.РедактированиеЗапрещеноПодпись.Заголовок = 
				НСтр("ru = 'Проект завершен. Редактирование плана запрещено.'");
			
		ИначеЕсли Не РеквизитыПроекта.ДанныеДоступныДляИзменения Тогда 
			Элементы.РедактированиеЗапрещеноПодпись.Видимость = Истина;
			Элементы.РедактированиеЗапрещеноПодпись.Заголовок = 
				НСтр("ru = 'Нет прав на редактирование плана проекта.'");
			
		КонецЕсли;
	КонецЕсли;
	
	НастройкиФормы = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(ИмяФормы + "/ТекущиеДанные", "");
	Если НастройкиФормы = Неопределено Или НастройкиФормы.Получить("ПоИсполнителю") = Неопределено Тогда
		ПоИсполнителю = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаПечать;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Учет трудозатрат
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияИспользоватьУчетВремени,
		Неопределено,
		ВидыРабот,
		СпособУказанияВремени,
		Команды.ПереключитьХронометраж,
		Элементы.ПереключитьХронометраж,
		Элементы.УказатьТрудозатраты);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ЭтоМобильныйКлиентСБольшимЭкраном = МК_КлиентСервер.ЭтоМобильныйСБольшимЭкраном();
	МК_НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Не ЗначениеЗаполнено(ПереданноеСостояниеПроектныхЗадач) Тогда 
		СостояниеПроектныхЗадач = Настройки["СостояниеПроектныхЗадач"];
		ЗаполнитьДеревоЗадач();
	Иначе	
		СохраненноеСостояниеПроектныхЗадач = Настройки["СостояниеПроектныхЗадач"];
		СостояниеПроектныхЗадач = ПереданноеСостояниеПроектныхЗадач;
	КонецЕсли;
	
	УстановитьВидимость(Настройки["РежимПросмотра"]);
	
	ПоказыватьЗадачиПроцессов = Настройки["ПоказыватьЗадачиПроцессов"];
	Элементы.ГруппаЗадачиПроцессов.Видимость = ПоказыватьЗадачиПроцессов;
	Элементы.ДеревоЗадачПоказыватьЗадачиПроцессов.Пометка = ПоказыватьЗадачиПроцессов;
	
	Если ПоказыватьЗадачиПроцессов Тогда
		Элементы.ДеревоЗадач.ИспользованиеТекущейСтроки = ИспользованиеТекущейСтрокиТаблицы.ОтображениеВыделенияИВыбор;
	Иначе
		Элементы.ДеревоЗадач.ИспользованиеТекущейСтроки = ИспользованиеТекущейСтрокиТаблицы.Выбор;
	КонецЕсли;
	
	ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.ПоИсполнителю, ПоИсполнителю);
	ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.СостояниеПроектныхЗадач, СостояниеПроектныхЗадач);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()
	
	ЭтоМобильныйКлиентСБольшимЭкраном = МК_КлиентСервер.ЭтоМобильныйСБольшимЭкраном();
	МК_НастроитьЭлементыФормы();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Для Каждого Строка Из ДеревоЗадач.ПолучитьЭлементы() Цикл
		Элементы.ДеревоЗадач.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить(ИмяФормы, 
		"ПоказатьПомеченныеНаУдаление", 
		ПоказатьПомеченныеНаУдаление);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	
	Если ТипЗнч(РезультатВыбора) = Тип("Строка") И ЭтоАдресВременногоХранилища(РезультатВыбора) Тогда 
		
		МассивИсполнителей = ЗагрузитьИсполнителейИзВременногоХранилища(РезультатВыбора);
		СконвертироватьПользователейВСотрудников(МассивИсполнителей);
		
		ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
		Исполнители = ТекущиеДанные.Исполнители; 
		Исполнители.Очистить();
		
		Для Каждого Исполнитель Из МассивИсполнителей Цикл
			НоваяСтрока = Исполнители.Добавить();
			НоваяСтрока.Исполнитель = Исполнитель;
			НоваяСтрока.ТекущийПланТрудозатраты = 
				ТекущиеДанные.ТекущийПланТрудозатраты / МассивИсполнителей.Количество();
		КонецЦикла;
		ТекущиеДанные.ИсполнителиСтр = ПредставлениеИсполнителя(Исполнители);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СконвертироватьПользователейВСотрудников(МассивПользователей)

	Для Каждого Пользователь Из МассивПользователей Цикл
		МассивПользователей[МассивПользователей.Найти(Пользователь)] = 
			Сотрудники.ОсновнойСотрудникПользователя(Пользователь);
	КонецЦикла;

КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененаПроектнаяЗадача" И Параметр.Проект = Проект Тогда 
		
		Индекс = -1;
		РаботаСПроектамиКлиентСервер.НайтиЗадачуВДеревеПоСсылке(
			ДеревоЗадач.ПолучитьЭлементы(), Параметр.ПроектнаяЗадача, Индекс);
		
		НайденнаяСтрока = ДеревоЗадач.НайтиПоИдентификатору(Индекс);
		Если Параметр.Родитель <> НайденнаяСтрока.РодительскаяЗадача Тогда 
			ОбновитьДеревоЗадач();
		Иначе	
			ОбновитьИзмененныеСтрокиЗадач(Параметр.МассивИзмененныхЗадач);
		КонецЕсли;	
		
	КонецЕсли;	
		
	Если ИмяСобытия = "СозданаПроектнаяЗадача" И Параметр.Проект = Проект Тогда  	
		
		Если ЗначениеЗаполнено(Параметр.Родитель) Тогда 
			Индекс = -1;
			РаботаСПроектамиКлиентСервер.НайтиЗадачуВДеревеПоСсылке(
				ДеревоЗадач.ПолучитьЭлементы(), Параметр.Родитель, Индекс);
			
			НоваяСтрока = ДеревоЗадач.НайтиПоИдентификатору(Индекс).ПолучитьЭлементы().Добавить();
		Иначе
			НоваяСтрока = ДеревоЗадач.ПолучитьЭлементы().Добавить();
		КонецЕсли;	
		НоваяСтрока.Ссылка = Параметр.ПроектнаяЗадача;
		Элементы.ДеревоЗадач.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
		МассивИзмененныхЗадач = Новый Массив;
		МассивИзмененныхЗадач.Добавить(Параметр.ПроектнаяЗадача);
		
		Для Каждого Строка Из Параметр.МассивИзмененныхЗадач Цикл
			МассивИзмененныхЗадач.Добавить(Строка);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Параметр.Родитель) Тогда 
			МассивИзмененныхЗадач.Добавить(Параметр.Родитель);	
		КонецЕсли;	
		
		ОбновитьИзмененныеСтрокиЗадач(МассивИзмененныхЗадач);
		
	КонецЕсли;
	
	Если (ИмяСобытия = "БизнесПроцессСтартован" И Параметр.Проект = Проект) Тогда
		
		Если ЗначениеЗаполнено(Параметр.ПроектнаяЗадача) Тогда 
			МассивИзмененныхЗадач = Новый Массив;
		    МассивИзмененныхЗадач.Добавить(Параметр.ПроектнаяЗадача);
			ОбновитьИзмененныеСтрокиЗадач(МассивИзмененныхЗадач);
			
			Индекс = -1;
			РаботаСПроектамиКлиентСервер.НайтиЗадачуВДеревеПоСсылке(
				ДеревоЗадач.ПолучитьЭлементы(), Параметр.ПроектнаяЗадача, Индекс);
			
			НайденнаяСтрока = ДеревоЗадач.НайтиПоИдентификатору(Индекс);
			НайденнаяСтрока.Задачи = Истина;
			
			ОбновитьМиникарточку();
		КонецЕсли;	
		
	КонецЕсли;
	
	Если ИмяСобытия = "БизнесПроцессСтартован" И ТипЗнч(Параметр.СсылкаНаПредметБизнесПроцесса) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда 	
		СсылкаНаПредметБизнесПроцесса = Параметр.СсылкаНаПредметБизнесПроцесса;
		Если ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(СсылкаНаПредметБизнесПроцесса, "Владелец") = Проект Тогда 
			
			Индекс = -1;
			РаботаСПроектамиКлиентСервер.НайтиЗадачуВДеревеПоСсылке(
				ДеревоЗадач.ПолучитьЭлементы(), СсылкаНаПредметБизнесПроцесса, Индекс);
			
			НайденнаяСтрока = ДеревоЗадач.НайтиПоИдентификатору(Индекс);
			НайденнаяСтрока.Задачи = Истина;
			
			ОбновитьМиникарточку();
		КонецЕсли;                                         
	КонецЕсли;	
		
	Если ИмяСобытия = "ЗаписьКонтроля" Тогда
		Если ЗначениеЗаполнено(Параметр.Предмет)
			И ТипЗнч(Параметр.Предмет) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда 
			ОбновитьДеревоЗадач();
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Если ЗначениеЗаполнено(ПереданноеСостояниеПроектныхЗадач) Тогда 
		Настройки.Вставить("СостояниеПроектныхЗадач", СохраненноеСостояниеПроектныхЗадач);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РежимПросмотраПриИзменении(Элемент)
	
	УстановитьВидимость(РежимПросмотра);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПроектныхЗадачПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(СостояниеПроектныхЗадач) Тогда 
		СостояниеПроектныхЗадач = "Все";
	КонецЕсли;	
		
	ОбновитьДеревоЗадач();
	
	Если СостояниеПроектныхЗадач = "Все" Тогда 
		Для Каждого Строка Из ДеревоЗадач.ПолучитьЭлементы() Цикл
			Элементы.ДеревоЗадач.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
	КонецЕсли;
	
	ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.СостояниеПроектныхЗадач, СостояниеПроектныхЗадач);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоИсполнителюПриИзменении(Элемент)
	
	ОбновитьДеревоЗадач();
	
	ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.ПоИсполнителю, ПоИсполнителю);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоИсполнителюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ОтображатьРоли", Истина);
	ПараметрыФормы.Вставить("ОтображатьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ВыбиратьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор исполнителя'"));
	
	Если ЗначениеЗаполнено(ПоИсполнителю) Тогда
		ПараметрыФормы.Вставить("ВыбранныеАдресаты", ПоИсполнителю);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.АдреснаяКнига.ФормаСписка",
		ПараметрыФормы,
		Элементы.ПоИсполнителю,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоИсполнителюАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПолныеРоли");
		ДанныеВыбора = СотрудникиВызовСервера.СформироватьДанныеВыбора(Текст, ДополнениеТипа);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоИсполнителюОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПолныеРоли");
		ДанныеВыбора = СотрудникиВызовСервера.СформироватьДанныеВыбора(Текст, ДополнениеТипа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоИсполнителюОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СотрудникиКлиент.ОбработкаВыбораКонтейнера(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоЗадач

&НаКлиенте
Процедура ДеревоЗадачПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		ТекущаяПроектнаяЗадача = ПредопределенноеЗначение("Справочник.ПроектныеЗадачи.ПустаяСсылка");
		
		Элементы.ДеревоЗадачКонтекстноеМенюВверх.Доступность = Ложь;
		Элементы.ДеревоЗадачКонтекстноеМенюВниз.Доступность = Ложь;
		Элементы.ДеревоЗадачКонтекстноеМенюНаУровеньВыше.Доступность = Ложь;
		Элементы.ДеревоЗадачКонтекстноеМенюНаУровеньНиже.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	Если КоличествоВыделенныхЗадач <> Элементы.ДеревоЗадач.ВыделенныеСтроки.Количество() 
		ИЛИ ТекущаяПроектнаяЗадача <> Элемент.ТекущиеДанные.Ссылка Тогда
		КоличествоВыделенныхЗадач = Элементы.ДеревоЗадач.ВыделенныеСтроки.Количество();
		ТекущаяПроектнаяЗадача = Элемент.ТекущиеДанные.Ссылка;
		УстановитьДоступностьКомандПеремещения(ТекущаяПроектнаяЗадача, ДеревоЗадач, Элементы);
	КонецЕсли;
	
	ОбновитьПараметрыУчетаВремениВФорме();
	
	Если ПоказыватьЗадачиПроцессов Тогда 
		ПодключитьОбработчикОжидания("ОбновитьМиникарточку", 0.2, Истина);
	КонецЕсли;	
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Не РеквизитыПроекта.ДанныеДоступныДляИзменения 
		Или РеквизитыПроекта.ПроектЗавершен Тогда 
		
		ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.Ссылка);
		ОткрытьФорму("Справочник.ПроектныеЗадачи.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		Возврат;
		
	КонецЕсли;	
		
	СтандартнаяОбработка = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачОбработкаЗапросаОбновления(Элемент)
	
	ОбновитьДеревоЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Не РольПолныеПрава Тогда 
		Если Не РеквизитыПроекта.ДанныеДоступныДляИзменения Тогда 
			СообщениеТекст = НСтр("ru = 'У вас нет прав на добавление проектных задач.'");
			ПоказатьПредупреждение(, СообщениеТекст);
			Возврат;
		КонецЕсли;
		
		Если РеквизитыПроекта.ПроектЗавершен Тогда 
			СообщениеТекст = НСтр("ru = 'Проект завершен. Добавление задач запрещено.'");
			ПоказатьПредупреждение(, СообщениеТекст);
			ОтменаРедактирования = Истина;
			Возврат;
		КонецЕсли;
		
		Если РеквизитыПроекта.РедактируетсяВСтороннейСистеме Тогда
			СообщениеТекст = НСтр("ru = 'Проект редактируется в сторонней системе. Добавление задач запрещено.'");
			ПоказатьПредупреждение(, СообщениеТекст);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Проект", Проект);
	
	ТекущийДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущийДанные <> Неопределено Тогда 
		ПараметрыФормы.Вставить("Родитель", ТекущийДанные.РодительскаяЗадача);
			
		Если Копирование Тогда 
			ПараметрыФормы.Вставить("ЗначениеКопирования", ТекущийДанные.Ссылка);
		КонецЕсли;
	КонецЕсли;	
		
	ОткрытьФорму("Справочник.ПроектныеЗадачи.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПередНачаломИзменения(Элемент, Отказ)
	
	Если Не РеквизитыПроекта.ДанныеДоступныДляИзменения
		Или РеквизитыПроекта.ПроектЗавершен Тогда 
	
		Отказ = Истина;
	
		ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;	
	
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.Ссылка);
		
		ОткрытьФорму("Справочник.ПроектныеЗадачи.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Владелец) Тогда // изменяется новая строка
		ТекущиеДанные.Владелец = Проект;
		
		Если РеквизитыПроекта.СпособПланирования 
				= ПредопределенноеЗначение("Перечисление.СпособыПланированияПроекта.ОтДатыНачалаПроекта") Тогда 
			ТекущиеДанные.ТипОграничения 
				= ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.КакМожноРаньше");
		Иначе	
			ТекущиеДанные.ТипОграничения 
				= ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.КакМожноПозже");
		КонецЕсли;
		
		Если Не ТекущиеДанные.Копирование Тогда 
			РодительЭлемента = ТекущиеДанные.ПолучитьРодителя();
			
			Если РодительЭлемента = Неопределено Тогда 
				ЭлементыДерева = ДеревоЗадач.ПолучитьЭлементы();
			Иначе	
				ЭлементыДерева = РодительЭлемента.ПолучитьЭлементы();
			КонецЕсли;
			КоличествоЭлементов = ЭлементыДерева.Количество();
			
			УстановитьПредшественника = Ложь; // устанавливается связь, если 2 предыдущие задачи связаны
			Если КоличествоЭлементов >= 3 Тогда 
				ПоследняяЗадача = ЭлементыДерева[КоличествоЭлементов - 2];
				ПредпоследняяЗадача = ЭлементыДерева[КоличествоЭлементов - 3];
				
				Для Каждого Строка Из ПоследняяЗадача.Предшественники Цикл
					Если Строка.Предшественник = ПредпоследняяЗадача.Ссылка Тогда 
						УстановитьПредшественника = Истина;
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;	
			
			Если УстановитьПредшественника Тогда 
				НоваяСтрока = ТекущиеДанные.Предшественники.Добавить();
				НоваяСтрока.Предшественник = ПоследняяЗадача.Ссылка;
				НоваяСтрока.ТипЗависимости 
					= ПредопределенноеЗначение("Перечисление.ТипыЗависимостейПроектныхЗадач.ОкончаниеНачало");
				ТекущиеДанные.ПредшественникиСтр 
					= ПредставлениеПредшественников(ТекущиеДанные.Предшественники);
				
				Если ТекущиеДанные.ТипОграничения 
						= ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.КакМожноРаньше") Тогда 
					ТекущиеДанные.ТекущийПланНачало = ПоследняяЗадача.ТекущийПланОкончание;
				Иначе
					Если РодительЭлемента = Неопределено Тогда 
						ТекущиеДанные.ТекущийПланОкончание = РеквизитыПроекта.ТекущийПланОкончание;
					Иначе	
						ТекущиеДанные.ТекущийПланОкончание = РодительЭлемента.ТекущийПланОкончание;
					КонецЕсли;	
				КонецЕсли;
			Иначе	
				Если РодительЭлемента = Неопределено Тогда 
					Если ТекущиеДанные.ТипОграничения 
							= ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.КакМожноРаньше") Тогда 
						ТекущиеДанные.ТекущийПланНачало = РеквизитыПроекта.ТекущийПланНачало;
					Иначе
						ТекущиеДанные.ТекущийПланОкончание = РеквизитыПроекта.ТекущийПланОкончание;
					КонецЕсли;	
				Иначе
					Если ТекущиеДанные.ТипОграничения 
							= ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.КакМожноРаньше") Тогда 
						ТекущиеДанные.ТекущийПланНачало = РодительЭлемента.ТекущийПланНачало;
					Иначе	
						ТекущиеДанные.ТекущийПланОкончание = РодительЭлемента.ТекущийПланОкончание;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			
			Если РодительЭлемента <> Неопределено Тогда 
				ТекущиеДанные.РодительскаяЗадача = РодительЭлемента.Ссылка;
			КонецЕсли;
			
			ТекущиеДанные.ТекущийПланДлительность = 1;
			
			ПроектнаяЗадачаСтруктура = Новый Структура;
			ПроектнаяЗадачаСтруктура.Вставить("Владелец", ТекущиеДанные.Владелец);
			ПроектнаяЗадачаСтруктура.Вставить("ГрафикРаботы", ТекущиеДанные.ГрафикРаботы);
			
			Если ТекущиеДанные.ТипОграничения 
				= ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.КакМожноРаньше") Тогда 
				ТекущиеДанные.ТекущийПланОкончание = РаботаСПроектами.РассчитатьОкончаниеПериода(ПроектнаяЗадачаСтруктура, 
					ТекущиеДанные.ТекущийПланНачало, 
					ТекущиеДанные.ТекущийПланДлительность, 
					ТекущиеДанные.ТекущийПланЕдиницаДлительности);
			Иначе
				ТекущиеДанные.ТекущийПланНачало = РаботаСПроектами.РассчитатьНачалоПериода(ПроектнаяЗадачаСтруктура, 
					ТекущиеДанные.ТекущийПланОкончание, 
					ТекущиеДанные.ТекущийПланДлительность, 
					ТекущиеДанные.ТекущийПланЕдиницаДлительности);
			КонецЕсли;			
			
		КонецЕсли;
		
		ПодписьТекПланДлительность = ПолучитьПодписьДлительности(
			ТекущиеДанные.ТекущийПланДлительность, ТекущиеДанные.ТекущийПланЕдиницаДлительности);
		ТекущиеДанные.ТекущийПланДлительностьСтр = Строка(ТекущиеДанные.ТекущийПланДлительность) + " " + ПодписьТекПланДлительность;
		
		ТекущиеДанные.ТекущийПланЕдиницаТрудозатрат = РеквизитыПроекта.ЕдиницаТрудозатратЗадач;
		ТекущиеДанные.ЕдиницаТрудозатратФакт = РеквизитыПроекта.ЕдиницаТрудозатратЗадач;
			
		ТекущиеДанные.ТекущийПланЕдиницаДлительности = РеквизитыПроекта.ЕдиницаДлительностиЗадач;
		ТекущиеДанные.ЕдиницаДлительностиФакт = РеквизитыПроекта.ЕдиницаДлительностиЗадач;
		
	КонецЕсли;	
	
	ДатаНачалаДоРедактирования = ТекущиеДанные.ТекущийПланНачало;
	ДатаОкончанияДоРедактирования = ТекущиеДанные.ТекущийПланОкончание;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ОтменаРедактирования Тогда 
		
		ТекущаяСтрока = Элементы.ДеревоЗадач.ТекущаяСтрока;
		ЭлементДерева = ДеревоЗадач.НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда 
			
			Отказ = Истина;
			
			РодительЭлемента = ЭлементДерева.ПолучитьРодителя();
			Если РодительЭлемента = Неопределено Тогда 
				ИндексЭлемента = ДеревоЗадач.ПолучитьЭлементы().Индекс(ЭлементДерева);
				ДеревоЗадач.ПолучитьЭлементы().Удалить(ИндексЭлемента);
			Иначе
				ИндексЭлемента = РодительЭлемента.ПолучитьЭлементы().Индекс(ЭлементДерева);
				РодительЭлемента.ПолучитьЭлементы().Удалить(ИндексЭлемента);
			КонецЕсли;	
			Возврат;
			
		Иначе	
			
		КонецЕсли;	
		
	Иначе	
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Наименование) Тогда 
			ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Наименование""'");
			ПоказатьПредупреждение(, ТекстСообщения);
			Отказ = Истина;
			Возврат;
		КонецЕсли;	
	
		Если Не ЗначениеЗаполнено(ТекущиеДанные.ТекущийПланНачало) Тогда 
			ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Начало (план)""'");
			ПоказатьПредупреждение(, ТекстСообщения);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(ТекущиеДанные.ТекущийПланОкончание) Тогда 
			ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Окончание (план)""'");
			ПоказатьПредупреждение(, ТекстСообщения);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ОтменаРедактирования Тогда 
		РазблокироватьСтрокуДляРедактирования(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
		
		МассивИзмененныхЗадач = Новый Массив;
		МассивИзмененныхЗадач.Добавить(ТекущиеДанные.Ссылка);
		ОбновитьИзмененныеСтрокиЗадач(МассивИзмененныхЗадач);
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда 
		НовыйЭлемент = Истина;
	Иначе
		НовыйЭлемент = Ложь;
	КонецЕсли;	
	
	ЗаписатьПроектнуюЗадачуИзСтрокиДерева(Элементы.ДеревоЗадач.ТекущаяСтрока);
	ТекущаяПроектнаяЗадача = ТекущиеДанные.Ссылка;
	
	Если НовыйЭлемент Тогда 
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(ТекущиеДанные.Ссылка),
			Строка(ТекущиеДанные.Ссылка),
			БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Изменение:'"), 
			ПолучитьНавигационнуюСсылку(ТекущиеДанные.Ссылка),
			Строка(ТекущиеДанные.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Не РольПолныеПрава Тогда 
		Если Не РеквизитыПроекта.ДанныеДоступныДляИзменения Тогда 
			СообщениеТекст = НСтр("ru = 'У вас нет прав на удаление проектных задач.'");
			ПоказатьПредупреждение(, СообщениеТекст);
			Возврат;
		КонецЕсли;
		
		Если РеквизитыПроекта.ПроектЗавершен Тогда 
			СообщениеТекст = НСтр("ru = 'Проект завершен. Удаление задач запрещено.'");
			ПоказатьПредупреждение(, СообщениеТекст);
			ОтменаРедактирования = Истина;
			Возврат;
		КонецЕсли;
	
		Если РеквизитыПроекта.РедактируетсяВСтороннейСистеме Тогда
			СообщениеТекст = НСтр("ru = 'Проект редактируется в сторонней системе. Удаление задач запрещено.'");
			ПоказатьПредупреждение(, СообщениеТекст);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВыделенныеСтроки = Элемент.ВыделенныеСтроки;
	Если ВыделенныеСтроки = Неопределено Или ВыделенныеСтроки.Количество() <= 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Режим = РежимДиалогаВопрос.ДаНет;
    ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
	
	Если ВыделенныеСтроки.Количество() = 1 Тогда 
		Если НЕ Элементы.ДеревоЗадач.ТекущиеДанные.ПометкаУдаления Тогда
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Пометить ""%1"" на удаление?'"),
				Строка(Элементы.ДеревоЗадач.ТекущиеДанные.Ссылка));
				
			ПараметрыОповещения.Вставить("ПометкаУдаления", Истина);
	        ОписаниеОповещения = Новый ОписаниеОповещения(
				"ДеревоЗадачПередУдалениемПродолжение",
				ЭтотОбъект,
				ПараметрыОповещения);	
				
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Режим);
		Иначе
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Снять с ""%1"" пометку удаления?'"),
				Строка(Элементы.ДеревоЗадач.ТекущиеДанные.Ссылка));
				
			ПараметрыОповещения.Вставить("ПометкаУдаления", Ложь);
	        ОписаниеОповещения = Новый ОписаниеОповещения(
				"ДеревоЗадачПередУдалениемПродолжение",
				ЭтотОбъект,
				ПараметрыОповещения);	
				
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Режим);
		КонецЕсли;
	ИначеЕсли ВыделенныеСтроки.Количество() > 1 Тогда
		ПометкаУдаления = Истина;
		Для Каждого СтрокаТаблицы Из ВыделенныеСтроки Цикл
			СтрокаТаблицыПроектнаяЗадача = ДеревоЗадач.НайтиПоИдентификатору(СтрокаТаблицы);
			Если СтрокаТаблицыПроектнаяЗадача.ПометкаУдаления = Истина Тогда
				ПометкаУдаления = Ложь;
				Прервать;	
			КонецЕсли;
		КонецЦикла;
		
		Если ПометкаУдаления Тогда
			ПараметрыОповещения.Вставить("ПометкаУдаления", Истина);
	        ОписаниеОповещения = Новый ОписаниеОповещения(
				"ДеревоЗадачПередУдалениемПродолжение",
				ЭтотОбъект,
				ПараметрыОповещения);	
				
			ПоказатьВопрос(ОписаниеОповещения,
				НСтр("ru = 'Пометить выделенные элементы на удаление?'"), Режим);
		Иначе
			ПараметрыОповещения.Вставить("ПометкаУдаления", Ложь);
	        ОписаниеОповещения = Новый ОписаниеОповещения(
				"ДеревоЗадачПередУдалениемПродолжение",
				ЭтотОбъект,
				ПараметрыОповещения);	
				
			ПоказатьВопрос(ОписаниеОповещения,
				НСтр("ru = 'Снять с выделенных элементов пометку на удаление?'"), Режим);
		КонецЕсли;
	КонецЕсли;		
			
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не РольПолныеПрава Тогда 
		Если Не РеквизитыПроекта.ДанныеДоступныДляИзменения Тогда 
			СообщениеТекст = НСтр("ru = 'У вас нет прав на изменение проектных задач. Перетаскивание задач запрещено.'");
			ПоказатьПредупреждение(, СообщениеТекст);
			Возврат;
		КонецЕсли;
		
		Если РеквизитыПроекта.ПроектЗавершен Тогда 
			СообщениеТекст = НСтр("ru = 'Проект завершен. Перетаскивание задач запрещено.'");
			ПоказатьПредупреждение(, СообщениеТекст);
			ОтменаРедактирования = Истина;
			Возврат;
		КонецЕсли;
		
		Если РеквизитыПроекта.РедактируетсяВСтороннейСистеме Тогда
			СообщениеТекст = НСтр("ru = 'Проект редактируется в сторонней системе. Перетаскивание задач запрещено.'");
			ПоказатьПредупреждение(, СообщениеТекст);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаИсточник = ПараметрыПеретаскивания.Значение[0];
	СтрокаДереваИсточник = ДеревоЗадач.НайтиПоИдентификатору(СтрокаИсточник);
	Если СтрокаДереваИсточник = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	СсылкаИсточник = СтрокаДереваИсточник.Ссылка;
	
	Если Строка <> Неопределено Тогда
		СтрокаПриемник = Строка;
		СтрокаДереваПриемник = ДеревоЗадач.НайтиПоИдентификатору(СтрокаПриемник);
		СсылкаПриемник = СтрокаДереваПриемник.Ссылка;
		
		Если Не СтрокаДереваИсточник.ПометкаУдаления И СтрокаДереваПриемник.ПометкаУдаления Тогда 
			Возврат;
		КонецЕсли;	
	Иначе
		СсылкаПриемник = Неопределено;
	КонецЕсли;		
	
	Если СсылкаИсточник = СсылкаПриемник Тогда 
		Возврат;
	КонецЕсли;	
	
	СписокРаскрытыхЗадач.Очистить();
	РаботаСПроектамиКлиент.ПолучитьМассивРаскрытыхЗадач(
		Элементы.ДеревоЗадач, ДеревоЗадач.ПолучитьЭлементы(), СписокРаскрытыхЗадач);
	
	ДеревоЗадачПеретаскиваниеСервер(СсылкаИсточник, СсылкаПриемник);
	
	РаботаСПроектамиКлиент.УстановитьРазвернутостьЭлементовДерева(
		Элементы.ДеревоЗадач, ДеревоЗадач, СписокРаскрытыхЗадач);
		
	РаботаСПроектамиКлиент.УстановитьТекущуюЗадачуВДеревеПоСсылке(
		Элементы.ДеревоЗадач, ДеревоЗадач, СсылкаИсточник);	
		
	УстановитьДоступностьКомандПеремещения(
		ТекущаяПроектнаяЗадача, ДеревоЗадач, Элементы);	
		
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСтрНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Исполнители = ТекущиеДанные.Исполнители;
	АдресВременногоХранилища = ПоместитьИсполнителейВоВременноеХранилище(Исполнители, УникальныйИдентификатор);
	
	Если РеквизитыПроекта.ЗаполненаПроектнаяКоманда Тогда 
		
		ПараметрыВыбора = Новый Структура;
		ПараметрыВыбора.Вставить("Проект", Проект);
		ПараметрыВыбора.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);
		
		ОткрытьФорму("Справочник.ПроектныеЗадачи.Форма.ФормаПодбораИсполнителей", ПараметрыВыбора, ЭтотОбъект); 
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
		ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
		ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
		ПараметрыФормы.Вставить("ОтображатьРоли", Истина);
		ПараметрыФормы.Вставить("ОтображатьКонтрагентов", Истина);
		ПараметрыФормы.Вставить("ВыбиратьКонтрагентов", Истина);
		ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор исполнителя'"));
		ПараметрыФормы.Вставить("ПодменятьПользователейСотрудниками", Истина);
		
		Если Исполнители.Количество() = 1 Тогда
			ПараметрыФормы.Вставить("ВыбранныеАдресаты", Исполнители[0].Исполнитель);
		КонецЕсли;
		
		ОткрытьФорму("Справочник.АдреснаяКнига.ФормаСписка",
			ПараметрыФормы,
			Элементы.ИсполнителиСтр,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСтрОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СотрудникиКлиент.ОбработкаВыбораКонтейнера(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	Если СтандартнаяОбработка = Ложь Тогда
		// Ожидание выбора уточнения из отдельной формы.
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
		ВыбранноеЗначение = СотрудникиВызовСервера.ОсновнойСотрудникПользователя(ВыбранноеЗначение);
	КонецЕсли;
		
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БылиИзменения = Ложь;
	
	Найден = Ложь;
	Для Каждого Строка Из ТекущиеДанные.Исполнители Цикл
		Если Строка.Исполнитель = ВыбранноеЗначение Тогда
			Найден = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не Найден Тогда
		НоваяСтрока = ТекущиеДанные.Исполнители.Добавить();
		НоваяСтрока.Исполнитель = ВыбранноеЗначение;
		БылиИзменения = Истина;
	КонецЕсли;
	Исполнители = ТекущиеДанные.Исполнители;
	
	ИменаИсполнителей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		Элементы.ИсполнителиСтр.ТекстРедактирования, ",", Истина, Истина);
	Если Исполнители.Количество() > ИменаИсполнителей.Количество() Тогда
		ВыполнитьУдалениеИсполнителей(ИменаИсполнителей, Исполнители, ВыбранноеЗначение);
		БылиИзменения = Истина;
		
		ТекущиеДанные.Исполнители.Очистить();
		Для Каждого Строка Из Исполнители Цикл
			НоваяСтрока = ТекущиеДанные.Исполнители.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЕсли;
	ТекущиеДанные.ИсполнителиСтр = ПредставлениеИсполнителя(ТекущиеДанные.Исполнители);
	
	Если БылиИзменения Тогда
		ВсегоРаспределено = 0;
		ВерхняяГраница = ТекущиеДанные.Исполнители.Количество() - 1;
		Для Номер = 0 По ВерхняяГраница Цикл
			СтрокаИсполнители = ТекущиеДанные.Исполнители[Номер];
			Если Номер = ВерхняяГраница Тогда
				СтрокаИсполнители.ТекущийПланТрудозатраты = ТекущиеДанные.ТекущийПланТрудозатраты - ВсегоРаспределено;
			Иначе
				СтрокаИсполнители.ТекущийПланТрудозатраты =
					ТекущиеДанные.ТекущийПланТрудозатраты / ТекущиеДанные.Исполнители.Количество();
				ВсегоРаспределено = ВсегоРаспределено + СтрокаИсполнители.ТекущийПланТрудозатраты;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСтрАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ТекстПоиска = ВыделитьТекстДляАвтоподбораИсполнителя(Текст);
		Если РеквизитыПроекта.ЗаполненаПроектнаяКоманда Тогда 
			ДанныеВыбора = РаботаСПроектами.СформироватьДанныеВыбораИсполнителя(Проект, ТекстПоиска);
		Иначе
			ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПолныеРоли");
			ДанныеВыбора = СотрудникиВызовСервера.СформироватьДанныеВыбора(ТекстПоиска, ДополнениеТипа);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСтрОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ТекстПоиска = ВыделитьТекстДляАвтоподбораИсполнителя(Текст);
		Если РеквизитыПроекта.ЗаполненаПроектнаяКоманда Тогда 
			ДанныеВыбора = РаботаСПроектами.СформироватьДанныеВыбораИсполнителя(Проект, ТекстПоиска);
		Иначе
			ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПолныеРоли");
			ДанныеВыбора = СотрудникиВызовСервера.СформироватьДанныеВыбора(ТекстПоиска, ДополнениеТипа);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСтрПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Исполнители = ТекущиеДанные.Исполнители;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ИсполнителиСтр) Тогда 
		Исполнители.Очистить();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСтрОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Исполнители = ТекущиеДанные.Исполнители;
	Исполнители.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеЗадачиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Наименование = ТекущиеДанные.НаименованиеЗадачи;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланНачалоЗадачиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ТекущийПланНачало) 
		И ТекущиеДанные.ТекущийПланНачало = НачалоДня(ТекущиеДанные.ТекущийПланНачало)
		И ИспользоватьГрафикиРаботы Тогда
		
		ГрафикРаботы = ?(ЗначениеЗаполнено(ТекущиеДанные.ГрафикРаботы), 
			ТекущиеДанные.ГрафикРаботы, 
			РеквизитыПроекта.ГрафикРаботы);
			
		ТекущиеДанные.ТекущийПланНачало = ГрафикиРаботы.ПолучитьПервоеРабочееВремяДня(
			ГрафикРаботы,
			ТекущиеДанные.ТекущийПланНачало);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ТекущийПланНачало) Тогда 	
		ТекущиеДанные.ТекущийПланДлительность = 0;
		
	ИначеЕсли Не ЗначениеЗаполнено(ТекущиеДанные.ТекущийПланДлительность) Тогда 
		ТекущиеДанные.ТекущийПланОкончание = ТекущиеДанные.ТекущийПланНачало;
		
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ТекущийПланДлительность) Тогда 	
		
		ПроектнаяЗадачаСтруктура = Новый Структура;
		ПроектнаяЗадачаСтруктура.Вставить("Владелец", ТекущиеДанные.Владелец);
		ПроектнаяЗадачаСтруктура.Вставить("ГрафикРаботы", ТекущиеДанные.ГрафикРаботы);
		
		ТекущиеДанные.ТекущийПланОкончание = РаботаСПроектами.РассчитатьОкончаниеПериода(ПроектнаяЗадачаСтруктура, 
			ТекущиеДанные.ТекущийПланНачало, 
			ТекущиеДанные.ТекущийПланДлительность, 
			ТекущиеДанные.ТекущийПланЕдиницаДлительности);
			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ТекущийПланНачало) 
		И РеквизитыПроекта.СпособПланирования 
			= ПредопределенноеЗначение("Перечисление.СпособыПланированияПроекта.ОтДатыНачалаПроекта") 
		И ТекущиеДанные.ТекущийПланНачало <> ДатаНачалаДоРедактирования
		И РеквизитыПроекта.АвтоматическиРассчитыватьПланПроекта Тогда 
		
		Если ТекущиеДанные.ТипОграничения 
				= ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.ФиксированноеНачало") 
			Или ТекущиеДанные.ТипОграничения 
				= ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.НачалоНеРанее") Тогда 
			ТекущиеДанные.ДатаОграничения = ТекущиеДанные.ТекущийПланНачало;
		Иначе
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("ТекущийПланНачало", ТекущиеДанные.ТекущийПланНачало);
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ТекущийПланНачалоПриИзмененииПродолжение",
				ЭтотОбъект, ПараметрыОповещения);
			
			ТекстВопроса = СтрШаблон( 
				НСтр("ru = 'Дата начала проектной задачи рассчитывается автоматически.
							|Установить для текущей задачи ограничение ""Фиксированное начало"" %1?'"),
							Формат(ТекущиеДанные.ТекущийПланНачало, "ДФ='дд.ММ.гггг ЧЧ:мм'"));
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланОкончаниеЗадачиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ТекущийПланОкончание) 
		И ТекущиеДанные.ТекущийПланОкончание = НачалоДня(ТекущиеДанные.ТекущийПланОкончание)
		И ИспользоватьГрафикиРаботы Тогда
		
		ГрафикРаботы = ?(ЗначениеЗаполнено(ТекущиеДанные.ГрафикРаботы),
			ТекущиеДанные.ГрафикРаботы,
			РеквизитыПроекта.ГрафикРаботы);
			
		ТекущиеДанные.ТекущийПланОкончание = ГрафикиРаботы.ПолучитьПоследнееРабочееВремяДня(
			ГрафикРаботы,
			ТекущиеДанные.ТекущийПланОкончание);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ТекущийПланОкончание) Тогда 	
		ТекущиеДанные.ТекущийПланДлительность = 0;	
	
	ИначеЕсли Не ЗначениеЗаполнено(ТекущиеДанные.ТекущийПланДлительность) Тогда 
		ТекущиеДанные.ТекущийПланНачало = ТекущиеДанные.ТекущийПланОкончание;
		
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ТекущийПланНачало) Тогда 	
		
		ПроектнаяЗадачаСтруктура = Новый Структура;
		ПроектнаяЗадачаСтруктура.Вставить("Владелец", ТекущиеДанные.Владелец);
		ПроектнаяЗадачаСтруктура.Вставить("ГрафикРаботы", ТекущиеДанные.ГрафикРаботы);
		
		ТекущиеДанные.ТекущийПланДлительность = РаботаСПроектами.РассчитатьДлительностьПериода(ПроектнаяЗадачаСтруктура, 
			ТекущиеДанные.ТекущийПланНачало, 
			ТекущиеДанные.ТекущийПланОкончание, 
			ТекущиеДанные.ТекущийПланЕдиницаДлительности);
			
		ТекущиеДанные.ТекущийПланДлительностьСтр = ТекущиеДанные.ТекущийПланДлительность;	
			
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ТекущийПланОкончание) 
		И РеквизитыПроекта.СпособПланирования 
			= ПредопределенноеЗначение("Перечисление.СпособыПланированияПроекта.ОтДатыОкончанияПроекта") 
		И ТекущиеДанные.ТекущийПланОкончание <> ДатаОкончанияДоРедактирования
		И РеквизитыПроекта.АвтоматическиРассчитыватьПланПроекта Тогда 
		
		Если ТекущиеДанные.ТипОграничения 
				= ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.ФиксированноеОкончание") 
		 Или ТекущиеДанные.ТипОграничения 
		 		= ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.ОкончаниеНеПозднее") Тогда 
			ТекущиеДанные.ДатаОграничения = ТекущиеДанные.ТекущийПланОкончание;
		Иначе 	
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("ТекущийПланОкончание", ТекущиеДанные.ТекущийПланОкончание);
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ТекущийПланОкончаниеПриИзмененииПродолжение",
				ЭтотОбъект, ПараметрыОповещения);
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку( 
				НСтр("ru = 'Дата окончания проектной задачи рассчитывается автоматически.
							|Установить для текущей задачи ограничение ""Фиксированное окончание"" %1?'"),
							Формат(ТекущиеДанные.ТекущийПланОкончание, "ДФ='дд.ММ.гггг ЧЧ:мм'"));
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланТрудозатратыСтрПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	НачальныеТрудозатраты = ТекущиеДанные.ТекущийПланТрудозатраты;
	Попытка
		ЧисловаяЧасть = ПолучитьЧисловуюЧасть(ТекущиеДанные.ТекущийПланТрудозатратыСтр);
		ТекущийПланТрудозатраты = Число(ЧисловаяЧасть);
	Исключение
		ТекстСообщения = НСтр("ru = 'Указано некорректное значение трудозатрат'");
		ПоказатьПредупреждение(, ТекстСообщения);
		ТекущиеДанные.ТекущийПланТрудозатратыСтр = НачальныеТрудозатраты;
		Возврат;
	КонецПопытки;	
	ТекущиеДанные.ТекущийПланТрудозатраты = ТекущийПланТрудозатраты;
	
	Если ТекущиеДанные.ТекущийПланТрудозатраты > 0 Тогда 
		ПодписьТекПланТрудозатраты = ПолучитьПодписьТрудозатрат(
			ТекущиеДанные.ТекущийПланТрудозатраты, ТекущиеДанные.ТекущийПланЕдиницаТрудозатрат);
		ТекущиеДанные.ТекущийПланТрудозатратыСтр = Строка(ТекущиеДанные.ТекущийПланТрудозатраты) + " " + ПодписьТекПланТрудозатраты;
	Иначе	
		ТекущиеДанные.ТекущийПланТрудозатратыСтр = "";
	КонецЕсли;
	
	Исполнители = ТекущиеДанные.Исполнители;
	Для Каждого СтрокаИсполнители Из Исполнители Цикл
		СтрокаИсполнители.ТекущийПланТрудозатраты = ТекущиеДанные.ТекущийПланТрудозатраты / Исполнители.Количество();
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланТрудозатратыСтрРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущийПланТрудозатраты = ТекущиеДанные.ТекущийПланТрудозатраты;
	
	ТекущиеДанные.ТекущийПланТрудозатраты = ТекущийПланТрудозатраты + Направление;
	
	Если ТекущиеДанные.ТекущийПланТрудозатраты > 0 Тогда 
		ПодписьТекПланТрудозатраты = ПолучитьПодписьТрудозатрат(
			ТекущиеДанные.ТекущийПланТрудозатраты, ТекущиеДанные.ТекущийПланЕдиницаТрудозатрат);
		ТекущиеДанные.ТекущийПланТрудозатратыСтр = Строка(ТекущиеДанные.ТекущийПланТрудозатраты) + " " + ПодписьТекПланТрудозатраты;
	Иначе	
		ТекущиеДанные.ТекущийПланТрудозатратыСтр = "";
	КонецЕсли;
	
	Исполнители = ТекущиеДанные.Исполнители;
	Для Каждого СтрокаИсполнители Из Исполнители Цикл
		СтрокаИсполнители.ТекущийПланТрудозатраты = ТекущиеДанные.ТекущийПланТрудозатраты / Исполнители.Количество();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОсновныеЗадачи

&НаКлиенте
Процедура ОсновныеЗадачиПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ОсновныеЗадачи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
		
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВспомогательныеЗадачи

&НаКлиенте
Процедура ВспомогательныеЗадачиПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ВспомогательныеЗадачи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
		
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ТекущееСостояние(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("КлючВарианта", "ТекущееСостояние");
	ПараметрыФормы.Вставить("Проект", Проект);
	
	ОткрытьФорму("Отчет.ПроектныеЗадачи.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СкороДолжныЗавершиться(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("КлючВарианта", "ДолжныЗакончиться");
	ПараметрыФормы.Вставить("Проект", Проект);
	
	ОткрытьФорму("Отчет.ПроектныеЗадачи.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СкороДолжныНачаться(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("КлючВарианта", "ДолжныНачаться");
	ПараметрыФормы.Вставить("Проект", Проект);
	
	ОткрытьФорму("Отчет.ПроектныеЗадачи.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланФактПоСрокам(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("КлючВарианта", "ПланФактПоСрокам");
	ПараметрыФормы.Вставить("Проект", Проект);
	
	ОткрытьФорму("Отчет.ПроектныеЗадачи.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланФактПоТрудозатратам(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("КлючВарианта", "ПланФактПоТрудозатратам");
	ПараметрыФормы.Вставить("Проект", Проект);
	
	ОткрытьФорму("Отчет.ПроектныеЗадачи.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СвязатьЗадачи(Команда)
	
	Если Элементы.ДеревоЗадач.ВыделенныеСтроки.Количество() < 2 Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Для установки предшественника выделите две или более задачи.'"));
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	
	Если Элементы.ДеревоЗадач.ВыделенныеСтроки.Количество() = 2 Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Установлен предшественник для задачи ""%1""'"),
			ТекущиеДанные.НаименованиеЗадачи);
		
		
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Установлены предшественники для задачи ""%1""'"),
			ТекущиеДанные.НаименованиеЗадачи);
	КонецЕсли;	
	
	Результат = СвязатьЗадачиСервер();
	Если Результат Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Установка предшественника'"),
			ПолучитьНавигационнуюСсылку(ТекущиеДанные.Ссылка),
			ТекстСообщения,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточку(Команда)
	
	ТекущийДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущийДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущийДанные.Ссылка);
	
	ОткрытьФорму("Справочник.ПроектныеЗадачи.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПомеченныеНаУдаление(Команда)
		
	ПоказатьПомеченныеНаУдаление = Не ПоказатьПомеченныеНаУдаление;
	Элементы.ДеревоЗадачПоказатьПомеченныеНаУдаление.Пометка = ПоказатьПомеченныеНаУдаление;
	
	СписокРаскрытыхЗадач.Очистить();
	РаботаСПроектамиКлиент.ПолучитьМассивРаскрытыхЗадач(
		Элементы.ДеревоЗадач, ДеревоЗадач.ПолучитьЭлементы(), СписокРаскрытыхЗадач);
	ВременнаяТекущаяПроектнаяЗадача = ТекущаяПроектнаяЗадача;
	
	ЗаполнитьДеревоЗадач();
	РаботаСПроектамиКлиент.УстановитьРазвернутостьЭлементовДерева(
		Элементы.ДеревоЗадач, ДеревоЗадач, СписокРаскрытыхЗадач);		
	РаботаСПроектамиКлиент.УстановитьТекущуюЗадачуВДеревеПоСсылке(
		Элементы.ДеревоЗадач, ДеревоЗадач, ВременнаяТекущаяПроектнаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПроект(Команда)
	
	ПоказатьЗначение(, Проект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОсновнойПроцесс(Команда)
	
	ТекущиеДанные = Элементы.ОсновныеЗадачи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
		
	ПоказатьЗначение(, ТекущиеДанные.БизнесПроцесс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВспомогательныйПроцесс(Команда)
	
	ТекущиеДанные = Элементы.ВспомогательныеЗадачи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
		
	ПоказатьЗначение(, ТекущиеДанные.БизнесПроцесс);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьЗадачиПроцессов(Команда)
	
	ПоказыватьЗадачиПроцессовНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Контроль(Команда)
	
	ТекущийДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущийДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	КонтрольКлиент.ОбработкаКомандыКонтроль(ТекущийДанные.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПодчиненную(Команда)
	
	Если Не РольПолныеПрава Тогда 
		Если Не РеквизитыПроекта.ДанныеДоступныДляИзменения Тогда 
			СообщениеТекст = НСтр("ru = 'У вас нет прав на добавление проектных задач.'");
			ПоказатьПредупреждение(, СообщениеТекст);
			Возврат;
		КонецЕсли;
		
		Если РеквизитыПроекта.ПроектЗавершен Тогда 
			СообщениеТекст = НСтр("ru = 'Проект завершен. Добавление задач запрещено.'");
			ПоказатьПредупреждение(, СообщениеТекст);
			ОтменаРедактирования = Истина;
			Возврат;
		КонецЕсли;

		Если РеквизитыПроекта.РедактируетсяВСтороннейСистеме Тогда
			СообщениеТекст = НСтр("ru = 'Проект редактируется в сторонней системе. Добавление задач запрещено.'");
			ПоказатьПредупреждение(, СообщениеТекст);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Проект", Проект);
		
	ТекущийДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущийДанные <> Неопределено Тогда 
		ПараметрыФормы.Вставить("Родитель", ТекущийДанные.Ссылка);
	КонецЕсли;	
		
	ОткрытьФорму("Справочник.ПроектныеЗадачи.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоследующую(Команда)
	
	Если Не РольПолныеПрава Тогда 
		Если Не РеквизитыПроекта.ДанныеДоступныДляИзменения Тогда 
			СообщениеТекст = НСтр("ru = 'У вас нет прав на добавление проектных задач.'");
			ПоказатьПредупреждение(, СообщениеТекст);
			Возврат;
		КонецЕсли;
		
		Если РеквизитыПроекта.ПроектЗавершен Тогда 
			СообщениеТекст = НСтр("ru = 'Проект завершен. Добавление задач запрещено.'");
			ПоказатьПредупреждение(, СообщениеТекст);
			ОтменаРедактирования = Истина;
			Возврат;
		КонецЕсли;
		
		Если РеквизитыПроекта.РедактируетсяВСтороннейСистеме Тогда
			СообщениеТекст = НСтр("ru = 'Проект редактируется в сторонней системе. Добавление задач запрещено.'");
			ПоказатьПредупреждение(, СообщениеТекст);
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Проект", Проект);
		
	ТекущийДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущийДанные <> Неопределено Тогда 
		ПараметрыФормы.Вставить("Родитель", ТекущийДанные.РодительскаяЗадача);
		ПараметрыФормы.Вставить("Предшественник", ТекущийДанные.Ссылка);
	КонецЕсли;	
		
	ОткрытьФорму("Справочник.ПроектныеЗадачи.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НаУровеньНиже(Команда)
	
	Если Элементы.ДеревоЗадач.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокРаскрытыхЗадач.Очистить();
	РаботаСПроектамиКлиент.ПолучитьМассивРаскрытыхЗадач(
		Элементы.ДеревоЗадач, ДеревоЗадач.ПолучитьЭлементы(), СписокРаскрытыхЗадач);
	ТекущаяЗадачаДоПеремещения = ТекущаяПроектнаяЗадача;
	МассивВыделенныхЗадач = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоЗадач.ВыделенныеСтроки Цикл
		Ссылка = ДеревоЗадач.НайтиПоИдентификатору(ВыделеннаяСтрока).Ссылка;	
		МассивВыделенныхЗадач.Добавить(Ссылка);
	КонецЦикла;
	
	НаУровеньНижеСервер(
		Элементы.ДеревоЗадач.ТекущиеДанные.Ссылка, 
		Элементы.ДеревоЗадач.ТекущиеДанные.РодительскаяЗадача);
		
	РаботаСПроектамиКлиент.УстановитьРазвернутостьЭлементовДерева(
		Элементы.ДеревоЗадач, ДеревоЗадач, СписокРаскрытыхЗадач);		
	Элементы.ДеревоЗадач.ВыделенныеСтроки.Очистить();
	Для Каждого Ссылка Из МассивВыделенныхЗадач Цикл
		РаботаСПроектамиКлиент.УстановитьВыделеннуюЗадачуВДеревеПоСсылке(Элементы.ДеревоЗадач, ДеревоЗадач, Ссылка);	
	КонецЦикла;
	
	РаботаСПроектамиКлиент.УстановитьТекущуюЗадачуВДеревеПоСсылке(
		Элементы.ДеревоЗадач, ДеревоЗадач, ТекущаяЗадачаДоПеремещения);
		
	УстановитьДоступностьКомандПеремещения(
		ТекущаяПроектнаяЗадача, ДеревоЗадач, Элементы);
	
КонецПроцедуры

&НаКлиенте
Процедура НаУровеньВыше(Команда)
	
	Если Элементы.ДеревоЗадач.ТекущиеДанные = Неопределено 
		ИЛИ НЕ ЗначениеЗаполнено(Элементы.ДеревоЗадач.ТекущиеДанные.РодительскаяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	СписокРаскрытыхЗадач.Очистить();
	РаботаСПроектамиКлиент.ПолучитьМассивРаскрытыхЗадач(
		Элементы.ДеревоЗадач, ДеревоЗадач.ПолучитьЭлементы(), СписокРаскрытыхЗадач);
	ТекущаяЗадачаДоПеремещения = ТекущаяПроектнаяЗадача;
	МассивВыделенныхЗадач = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоЗадач.ВыделенныеСтроки Цикл
		Ссылка = ДеревоЗадач.НайтиПоИдентификатору(ВыделеннаяСтрока).Ссылка;	
		МассивВыделенныхЗадач.Добавить(Ссылка);
	КонецЦикла;

	НаУровеньВышеСервер(
		Элементы.ДеревоЗадач.ТекущиеДанные.Ссылка, 
		Элементы.ДеревоЗадач.ТекущиеДанные.РодительскаяЗадача);
		
	РаботаСПроектамиКлиент.УстановитьРазвернутостьЭлементовДерева(
		Элементы.ДеревоЗадач, ДеревоЗадач, СписокРаскрытыхЗадач);		
	Элементы.ДеревоЗадач.ВыделенныеСтроки.Очистить();
	Для Каждого Ссылка Из МассивВыделенныхЗадач Цикл
		РаботаСПроектамиКлиент.УстановитьВыделеннуюЗадачуВДеревеПоСсылке(
			Элементы.ДеревоЗадач, ДеревоЗадач, Ссылка);	
	КонецЦикла;
	РаботаСПроектамиКлиент.УстановитьТекущуюЗадачуВДеревеПоСсылке(
		Элементы.ДеревоЗадач, ДеревоЗадач, ТекущаяЗадачаДоПеремещения);
    УстановитьДоступностьКомандПеремещения(
		ТекущаяПроектнаяЗадача, ДеревоЗадач, Элементы);

КонецПроцедуры

&НаКлиенте
Процедура Вверх(Команда)
	
	Если Элементы.ДеревоЗадач.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяЗадачаДоПеремещения = ТекущаяПроектнаяЗадача;
	МассивВыделенныхЗадач = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоЗадач.ВыделенныеСтроки Цикл
		Ссылка = ДеревоЗадач.НайтиПоИдентификатору(ВыделеннаяСтрока).Ссылка;	
		МассивВыделенныхЗадач.Добавить(Ссылка);
	КонецЦикла;
	
	ВверхСервер();
		
	Элементы.ДеревоЗадач.ВыделенныеСтроки.Очистить();
	Для Каждого Ссылка Из МассивВыделенныхЗадач Цикл
		РаботаСПроектамиКлиент.УстановитьВыделеннуюЗадачуВДеревеПоСсылке(
			Элементы.ДеревоЗадач, ДеревоЗадач, Ссылка);	
	КонецЦикла;
	
	РаботаСПроектамиКлиент.УстановитьТекущуюЗадачуВДеревеПоСсылке(
		Элементы.ДеревоЗадач, ДеревоЗадач, ТекущаяЗадачаДоПеремещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Вниз(Команда)
	
	Если Элементы.ДеревоЗадач.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяЗадачаДоПеремещения = ТекущаяПроектнаяЗадача;
	МассивВыделенныхЗадач = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоЗадач.ВыделенныеСтроки Цикл
		Ссылка = ДеревоЗадач.НайтиПоИдентификатору(ВыделеннаяСтрока).Ссылка;	
		МассивВыделенныхЗадач.Добавить(Ссылка);
	КонецЦикла;
	
	ВнизСервер();
		
	Элементы.ДеревоЗадач.ВыделенныеСтроки.Очистить();
	Для Каждого Ссылка Из МассивВыделенныхЗадач Цикл
		РаботаСПроектамиКлиент.УстановитьВыделеннуюЗадачуВДеревеПоСсылке(
			Элементы.ДеревоЗадач, ДеревоЗадач, Ссылка);	
	КонецЦикла;
	
	РаботаСПроектамиКлиент.УстановитьТекущуюЗадачуВДеревеПоСсылке(
		Элементы.ДеревоЗадач, ДеревоЗадач, ТекущаяЗадачаДоПеремещения);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.ДеревоЗадач);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.ДеревоЗадач, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.ДеревоЗадач);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПоказатьПодзадачи(Команда)
	
	ТекущаяСтрока = Элементы.ДеревоЗадач.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Элементы.ДеревоЗадач.Развернуть(ТекущаяСтрока, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПодзадачи(Команда)
	
	ТекущаяСтрока = Элементы.ДеревоЗадач.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Элементы.ДеревоЗадач.Свернуть(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура Уровень1(Команда)
	
	ПоказатьУровень(1);
	
КонецПроцедуры

&НаКлиенте
Процедура Уровень2(Команда)
	
	ПоказатьУровень(2);
	
КонецПроцедуры

&НаКлиенте
Процедура Уровень3(Команда)
	
	ПоказатьУровень(3);
	
КонецПроцедуры

&НаКлиенте
Процедура Уровень4(Команда)
	
	ПоказатьУровень(4);
	
КонецПроцедуры

&НаКлиенте
Процедура Уровень5(Команда)
	
	ПоказатьУровень(5);
	
КонецПроцедуры

&НаКлиенте
Процедура Уровень6(Команда)
	
	ПоказатьУровень(6);
	
КонецПроцедуры

&НаКлиенте
Процедура Уровень7(Команда)
	
	ПоказатьУровень(7);
	
КонецПроцедуры

// Учет времени

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	ПараметрыОповещения = Неопределено;
	НуженДиалог = УчетВремениКлиент.НуженДиалогДляХронометража(ВключенХронометраж, 
		ДатаНачалаХронометража, ВидыРабот);
	
	Если НуженДиалог = Ложь Тогда
		
		ПереключитьХронометражСервер(ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, ТекущиеДанные.Ссылка);
	
	Иначе
		ДлительностьРаботы = УчетВремениКлиент.ПолучитьДлительностьРаботы(ДатаНачалаХронометража);
		
		ОписаниеРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Работа с документом ""%1""'"),
			ТекущиеДанные.Наименование);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДатаОтчета", ТекущаяДата());
		ПараметрыФормы.Вставить("ВидыРабот", ВидыРабот);
		ПараметрыФормы.Вставить("ОписаниеРаботы", ОписаниеРаботы);
		ПараметрыФормы.Вставить("ДлительностьРаботы", ДлительностьРаботы);
		ПараметрыФормы.Вставить("НачалоРаботы", ДатаНачалаХронометража);
		ПараметрыФормы.Вставить("Объект", ТекущиеДанные.Ссылка);
		ПараметрыФормы.Вставить("СпособУказанияВремени", СпособУказанияВремени);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПереключитьХронометражПродолжение",
			ЭтотОбъект,
			Новый Структура("Объект", ТекущиеДанные.Ссылка));
		
		ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаДобавленияРаботы", ПараметрыФормы,,,,,
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДатаОтчета = ТекущаяДата();
	
	УчетВремениКлиент.ДобавитьВОтчетКлиент(
		ДатаОтчета,
		ВключенХронометраж, 
		ДатаНачалаХронометража, 
		ДатаКонцаХронометража, 
		ВидыРабот, 
		ТекущиеДанные.Ссылка,
		СпособУказанияВремени,
		Элементы.ПереключитьХронометраж,
		Ложь,
		ЭтотОбъект); // Выполнена
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВидимость(Режим)
	
	Элементы.ИсполнителиСтр.Видимость = Истина;
	
	Если Режим = "Планирование" Тогда 
		
		Элементы.ДеревоЗадачГруппаПланирование.Группировка = ГруппировкаКолонок.Горизонтальная;
		
		Элементы.ТекущийПланНачалоЗадачи.Видимость = Истина;
		Элементы.ТекущийПланОкончаниеЗадачи.Видимость = Истина;
		
		Элементы.НачалоФакт.Видимость = Ложь;
		Элементы.ОкончаниеФакт.Видимость = Ложь;
		
		Элементы.ДеревоЗадачГруппаТрудозатраты.Видимость = Ложь;
		
	ИначеЕсли Режим = "НаВыполнение" Тогда 
		
		Элементы.ДеревоЗадачГруппаПланирование.Группировка = ГруппировкаКолонок.Вертикальная;
		
		Элементы.ТекущийПланНачалоЗадачи.Видимость = Истина;
		Элементы.ТекущийПланОкончаниеЗадачи.Видимость = Ложь;
		
		Элементы.НачалоФакт.Видимость = Истина;
		Элементы.ОкончаниеФакт.Видимость = Ложь;
		
		Элементы.ДеревоЗадачГруппаТрудозатраты.Видимость = Ложь;
		
	ИначеЕсли Режим = "КонтрольВыполнения" Тогда 
		
		Элементы.ДеревоЗадачГруппаПланирование.Группировка = ГруппировкаКолонок.Вертикальная;
		
		Элементы.ТекущийПланНачалоЗадачи.Видимость = Ложь;
		Элементы.ТекущийПланОкончаниеЗадачи.Видимость = Истина;
		
		Элементы.НачалоФакт.Видимость = Ложь;
		Элементы.ОкончаниеФакт.Видимость = Истина;
		
		Элементы.ДеревоЗадачГруппаТрудозатраты.Видимость = Ложь;
		
	ИначеЕсли Режим = "Трудозатраты" Тогда 
		
		Элементы.ТекущийПланНачалоЗадачи.Видимость = Ложь;
		Элементы.ТекущийПланОкончаниеЗадачи.Видимость = Ложь;

		Элементы.НачалоФакт.Видимость = Ложь;
		Элементы.ОкончаниеФакт.Видимость = Ложь;
		
		Элементы.ДеревоЗадачГруппаТрудозатраты.Видимость = Истина;
		
	ИначеЕсли Режим = "Полный" Тогда 
		
		Элементы.ДеревоЗадачГруппаПланирование.Группировка = ГруппировкаКолонок.Горизонтальная;

		Элементы.ТекущийПланНачалоЗадачи.Видимость = Истина;
		Элементы.ТекущийПланОкончаниеЗадачи.Видимость = Истина;
		
		Элементы.НачалоФакт.Видимость = Истина;
		Элементы.ОкончаниеФакт.Видимость = Истина;
		
		Элементы.ДеревоЗадачГруппаТрудозатраты.Видимость = Истина;
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьДеревоЗадач()
	
	Дерево = РеквизитФормыВЗначение("ДеревоЗадач");
	Дерево.Строки.Очистить();
	
	Если ЗначениеЗаполнено(Проект) Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителяПредметы.Предмет КАК Предмет,
		|	ЗадачаИсполнителяПредметы.Ссылка.Выполнена КАК Выполнена,
		|	ЗадачаИсполнителяПредметы.Ссылка.ПометкаУдаления КАК ПометкаУдаления
		|ПОМЕСТИТЬ ПредметыЗадач
		|ИЗ
		|	Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ЗадачаИсполнителяПредметы.Предмет) = ТИП(Справочник.ПроектныеЗадачи)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Предмет,
		|	Выполнена,
		|	ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.ПроектнаяЗадача,
		|	ЗадачаИсполнителя.Выполнена,
		|	ЗадачаИсполнителя.ПометкаУдаления
		|ПОМЕСТИТЬ Задачи
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.Проект = &Проект
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗадачаИсполнителя.ПроектнаяЗадача,
		|	ЗадачаИсполнителя.Выполнена,
		|	ЗадачаИсполнителя.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПроектныеЗадачи.Ссылка,
		|	ПроектныеЗадачи.ВерсияДанных,
		|	ПроектныеЗадачи.Родитель,
		|	ПроектныеЗадачи.ПометкаУдаления,
		|	ПроектныеЗадачи.Наименование,
		|	ПроектныеЗадачи.КодСДР,
		|	ПроектныеЗадачи.Владелец,
		|	ПроектныеЗадачи.ГрафикРаботы,
		|	ПроектныеЗадачи.ТекущийПланТрудозатраты,
		|	ПроектныеЗадачи.ТекущийПланЕдиницаТрудозатрат,
		|	ПроектныеЗадачи.ЕдиницаТрудозатратФакт,
		|	ПроектныеЗадачи.СуммарнаяЗадача,
		|	ПроектныеЗадачи.Веха,
		|	ПроектныеЗадачи.ТипОграничения,
		|	ПроектныеЗадачи.ДатаОграничения,
		|	ПроектныеЗадачи.Исполнители.(
		|		Ссылка,
		|		НомерСтроки,
		|		Исполнитель,
		|		ТекущийПланТрудозатраты
		|	),
		|	ПроектныеЗадачи.Предшественники.(
		|		Ссылка,
		|		НомерСтроки,
		|		Предшественник,
		|		ТипЗависимости,
		|		Задержка,
		|		ЕдиницаЗадержки
		|	),
		|	ЕСТЬNULL(СрокиПроектныхЗадач.ТекущийПланНачало, ДАТАВРЕМЯ(1, 1, 1)) КАК ТекущийПланНачало,
		|	ЕСТЬNULL(СрокиПроектныхЗадач.ТекущийПланОкончание, ДАТАВРЕМЯ(1, 1, 1)) КАК ТекущийПланОкончание,
		|	ЕСТЬNULL(СрокиПроектныхЗадач.ТекущийПланДлительность, 0) КАК ТекущийПланДлительность,
		|	ЕСТЬNULL(СрокиПроектныхЗадач.ТекущийПланЕдиницаДлительности, ЗНАЧЕНИЕ(Перечисление.ЕдиницыДлительности.ПустаяСсылка)) КАК ТекущийПланЕдиницаДлительности,
		|	ЕСТЬNULL(СрокиПроектныхЗадач.НачалоФакт, ДАТАВРЕМЯ(1, 1, 1)) КАК НачалоФакт,
		|	ЕСТЬNULL(СрокиПроектныхЗадач.ОкончаниеФакт, ДАТАВРЕМЯ(1, 1, 1)) КАК ОкончаниеФакт,
		|	ЕСТЬNULL(СрокиПроектныхЗадач.ДлительностьФакт, 0) КАК ДлительностьФакт,
		|	ЕСТЬNULL(СрокиПроектныхЗадач.ЕдиницаДлительностиФакт, ЗНАЧЕНИЕ(Перечисление.ЕдиницыДлительности.ПустаяСсылка)) КАК ЕдиницаДлительностиФакт,
		|	ВЫБОР
		|		КОГДА ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					Задачи КАК Задачи
		|				ГДЕ
		|					ПроектныеЗадачи.Ссылка = Задачи.ПроектнаяЗадача
		|					И НЕ Задачи.ПометкаУдаления
		|					И НЕ Задачи.Выполнена
		|	
		|				ОБЪЕДИНИТЬ ВСЕ
		|	
		|				ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					ПредметыЗадач КАК ПредметыЗадач
		|				ГДЕ
		|					ПроектныеЗадачи.Ссылка = ПредметыЗадач.Предмет
		|					И НЕ ПредметыЗадач.ПометкаУдаления
		|					И НЕ ПредметыЗадач.Выполнена)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьЗадачи,
		|	ВЫБОР
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтроле)
		|			ТОГДА ВЫБОР
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|							ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|						ТОГДА 1
		|					ИНАЧЕ 3
		|				КОНЕЦ
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятСКонтроля)
		|			ТОГДА 4
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтролеНесколько)
		|			ТОГДА ВЫБОР
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|							ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|						ТОГДА 5
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполненияОбщий = ДАТАВРЕМЯ(1, 1, 1)
		|							ИЛИ КешИнформацииОбОбъектах.СрокИсполненияОбщий >= &ТекущаяДата
		|						ТОГДА 8
		|					ИНАЧЕ 6
		|				КОНЕЦ
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятСКонтроляНесколько)
		|			ТОГДА 7
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СмешанноНесколько)
		|			ТОГДА ВЫБОР
		|					КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|							ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|						ТОГДА 9
		|					ИНАЧЕ 10
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СостояниеКонтроля
		|ИЗ
		|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СрокиПроектныхЗадач КАК СрокиПроектныхЗадач
		|		ПО ПроектныеЗадачи.Ссылка = СрокиПроектныхЗадач.ПроектнаяЗадача
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|		ПО ПроектныеЗадачи.Ссылка = КешИнформацииОбОбъектах.Объект
		|ГДЕ
		|	ПроектныеЗадачи.Владелец = &Проект
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПроектныеЗадачи.НомерЗадачиВУровне ИЕРАРХИЯ";
		
		Запрос.УстановитьПараметр("Проект", Проект);
		Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
     
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		ТекущаяДата = ТекущаяДатаСеанса();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ПометкаУдаления И Не ПоказатьПомеченныеНаУдаление Тогда 
				Продолжить;
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(СостояниеПроектныхЗадач) И СостояниеПроектныхЗадач <> "Все" Тогда 
				Если Не Выборка.СуммарнаяЗадача Тогда 
				
				Если СостояниеПроектныхЗадач = "Завершены" Тогда 
					Если ЗначениеЗаполнено(Выборка.ОкончаниеФакт) Тогда 
					Иначе	
						Продолжить;
					КонецЕсли;	
					
				ИначеЕсли СостояниеПроектныхЗадач = "НеЗавершены" Тогда 
					Если Не ЗначениеЗаполнено(Выборка.ОкончаниеФакт) Тогда 
					Иначе	
						Продолжить;
					КонецЕсли;	
					
				ИначеЕсли СостояниеПроектныхЗадач = "НеНачатыВовремя" Тогда 
					Если Не ЗначениеЗаполнено(Выборка.НачалоФакт) И Выборка.ТекущийПланНачало < ТекущаяДата Тогда 
					Иначе
						Продолжить;
					КонецЕсли;	
					
				ИначеЕсли СостояниеПроектныхЗадач = "ВремяНачалаНеНаступило" Тогда 
					Если Не ЗначениеЗаполнено(Выборка.НачалоФакт) И Выборка.ТекущийПланНачало >= ТекущаяДата Тогда 
					Иначе
						Продолжить;
					КонецЕсли;
					
				ИначеЕсли СостояниеПроектныхЗадач = "ВыполняютсяСПросрочкой" Тогда 	
					Если ЗначениеЗаполнено(Выборка.НачалоФакт) И Не ЗначениеЗаполнено(Выборка.ОкончаниеФакт) 
						И Выборка.ТекущийПланОкончание < ТекущаяДата Тогда 
					Иначе
						Продолжить;
					КонецЕсли;	
					
				ИначеЕсли СостояниеПроектныхЗадач = "ВыполняютсяБезПросрочки" Тогда 		
					Если ЗначениеЗаполнено(Выборка.НачалоФакт) И Не ЗначениеЗаполнено(Выборка.ОкончаниеФакт) 
						И Выборка.ТекущийПланОкончание >= ТекущаяДата Тогда 
					Иначе
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
				КонецЕсли;
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(ПоИсполнителю) Тогда 
				Если Не Выборка.СуммарнаяЗадача Тогда 
				
				НайденИсполнитель = Ложь;
				
				Исполнители = Выборка.Исполнители.Выгрузить();
				Для Каждого Строка Из Исполнители Цикл
					Если ПоИсполнителю = Строка.Исполнитель Тогда
						НайденИсполнитель = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Не НайденИсполнитель Тогда 
					Продолжить;
				КонецЕсли;	
				
				КонецЕсли;
			КонецЕсли;
			
			Родитель = Выборка.Родитель;
			Если Не ЗначениеЗаполнено(Родитель) Тогда 
				НоваяСтрока = Дерево.Строки.Добавить();
			Иначе	
				НайденнаяСтрока = Дерево.Строки.Найти(Родитель, "Ссылка", Истина);	
				НоваяСтрока = НайденнаяСтрока.Строки.Добавить();
			КонецЕсли;
			
			НоваяСтрока.Предшественники.Колонки.Добавить("Предшественник");
			НоваяСтрока.Предшественники.Колонки.Добавить("ТипЗависимости");
			НоваяСтрока.Предшественники.Колонки.Добавить("Задержка");
			НоваяСтрока.Предшественники.Колонки.Добавить("ЕдиницаЗадержки");
			
			НоваяСтрока.Исполнители.Колонки.Добавить("Исполнитель");
			НоваяСтрока.Исполнители.Колонки.Добавить("ТекущийПланТрудозатраты");
			
			НоваяСтрока.Задачи = Выборка.ЕстьЗадачи;
			НоваяСтрока.ТекущаяДата = ТекущаяДата;
			
			ЗаполнитьСтрокуДереваИзПроектнойЗадачи(НоваяСтрока, Выборка);
			
		КонецЦикла;
		
		Если (ЗначениеЗаполнено(СостояниеПроектныхЗадач) И СостояниеПроектныхЗадач <> "Все")
			Или ЗначениеЗаполнено(ПоИсполнителю) Тогда 
			УдалитьСуммарныеСтрокиБезПодчиненных(Дерево);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоЗадач");
	
	Индекс = -1;
	РаботаСПроектамиКлиентСервер.НайтиЗадачуВДеревеПоСсылке(
		ДеревоЗадач.ПолучитьЭлементы(), ТекущаяПроектнаяЗадача, Индекс);
	Если Индекс > -1 Тогда
		Элементы.ДеревоЗадач.ТекущаяСтрока = Индекс;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УдалитьСуммарныеСтрокиБезПодчиненных(Дерево, ТекущаяСтрока = Неопределено)
	
	Если ТекущаяСтрока = Неопределено Тогда 
		ТекущаяСтрока = Дерево;
	КонецЕсли;	
	
	КоличествоСтрок = ТекущаяСтрока.Строки.Количество();
	
	ВсеСуммарные = Истина;
	
	Инд = 1;
	Пока Инд <= КоличествоСтрок Цикл
		Строка = ТекущаяСтрока.Строки[КоличествоСтрок - Инд];
		Если Строка.СуммарнаяЗадача Тогда 
			Если Не УдалитьСуммарныеСтрокиБезПодчиненных(Дерево, Строка) Тогда 
				ВсеСуммарные = Ложь;
			КонецЕсли;	
		Иначе	
			ВсеСуммарные = Ложь;
		КонецЕсли;
		Инд = Инд + 1;
	КонецЦикла;
	
	Если ВсеСуммарные Тогда 
		Если ТекущаяСтрока <> Дерево Тогда 
			Если ТекущаяСтрока.СуммарнаяЗадача Тогда 
				Если ЗначениеЗаполнено(ТекущаяСтрока.Родитель) Тогда 
					ТекущаяСтрока.Родитель.Строки.Удалить(ТекущаяСтрока);
				Иначе
					Дерево.Строки.Удалить(ТекущаяСтрока);
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВсеСуммарные;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокуДереваИзПроектнойЗадачи(ЭлементДерева, ПроектнаяЗадача)
	
	Если ТипЗнч(ЭлементДерева) = Тип("Число") Тогда 
		ЭлементДерева = ДеревоЗадач.НайтиПоИдентификатору(ЭлементДерева);
	КонецЕсли;	
	
	СписокРеквизитов1 = 
	"Наименование, 
	|Родитель,
	|Исполнители,
	|Предшественники,
	|КодСДР, 
	|Владелец, 
	|Ссылка,
	|ВерсияДанных,
	|ПометкаУдаления, 
	|ГрафикРаботы, 
	|ТекущийПланТрудозатраты, 
	|ТекущийПланЕдиницаТрудозатрат, 
	|ЕдиницаТрудозатратФакт,
	|ТипОграничения,
	|ДатаОграничения,
	|СуммарнаяЗадача,
	|Веха";
	
	СписокРеквизитов2 = 
	"ТекущийПланНачало, 
	|ТекущийПланОкончание, 
	|ТекущийПланДлительность, 
	|ТекущийПланЕдиницаДлительности, 
	|НачалоФакт,
	|ОкончаниеФакт,
	|ДлительностьФакт,
	|ЕдиницаДлительностиФакт,
	|СостояниеКонтроля";
	
	Если ТипЗнч(ПроектнаяЗадача) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда 
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПроектнаяЗадача, СписокРеквизитов1);
		
		ДанныеПроектнойЗадачи = РаботаСПроектами.ПолучитьДанныеПроектнойЗадачи(ПроектнаяЗадача);
		СтруктураРеквизитов2 = Новый Структура(СписокРеквизитов2);
		Для Каждого Строка Из СтруктураРеквизитов2 Цикл
			Реквизиты.Вставить(Строка.Ключ, ДанныеПроектнойЗадачи[Строка.Ключ]);
		КонецЦикла;	
		
	Иначе
		Реквизиты = ПроектнаяЗадача;
	КонецЕсли;	
	
	СписокРеквизитов = СписокРеквизитов1 + "," + СписокРеквизитов2;
	СписокРеквизитов = СтрЗаменить(СписокРеквизитов, "Родитель,", "");
	СписокРеквизитов = СтрЗаменить(СписокРеквизитов, "Исполнители,", "");
	СписокРеквизитов = СтрЗаменить(СписокРеквизитов, "Предшественники,", "");
	
	ЗаполнитьЗначенияСвойств(ЭлементДерева, Реквизиты, СписокРеквизитов);
	
	ЭлементДерева.ИндексКартинки = ?(ЭлементДерева.ПометкаУдаления, 3, 2);
	ЭлементДерева.РодительскаяЗадача = Реквизиты.Родитель;
	ЭлементДерева.НаименованиеЗадачи = Реквизиты.КодСДР + "  " + Реквизиты.Наименование; 
	
	// плановая длительность
	ПодписьТекПланДлительность = ПолучитьПодписьДлительности(
		Реквизиты.ТекущийПланДлительность, Реквизиты.ТекущийПланЕдиницаДлительности);
	ЭлементДерева.ТекущийПланДлительностьСтр = Строка(Реквизиты.ТекущийПланДлительность) + " " + ПодписьТекПланДлительность;
	
	// фактическая длительность
	ЭлементДерева.ДлительностьФактСтр = "";
	Если Реквизиты.ДлительностьФакт > 0 Тогда 
		ПодписьТекФактДлительность = ПолучитьПодписьДлительности(
			Реквизиты.ДлительностьФакт, Реквизиты.ЕдиницаДлительностиФакт);
		ЭлементДерева.ДлительностьФактСтр = Строка(Реквизиты.ДлительностьФакт) + " " + ПодписьТекФактДлительность;
	КонецЕсли;
	
	// плановые трудозатраты
	ЭлементДерева.ТекущийПланТрудозатратыСтр = "";
	Если Реквизиты.ТекущийПланТрудозатраты > 0 Тогда 
		ПодписьТекПланТрудозатраты = ПолучитьПодписьТрудозатрат(
			Реквизиты.ТекущийПланТрудозатраты, Реквизиты.ТекущийПланЕдиницаТрудозатрат);
		ЭлементДерева.ТекущийПланТрудозатратыСтр = Строка(Реквизиты.ТекущийПланТрудозатраты) + " " + ПодписьТекПланТрудозатраты;
	КонецЕсли;	
	
	// фактические трудозатраты
	ТрудозатратыФакт = РаботаСПроектами.ПолучитьФактическиеТрудозатратыПроектнойЗадачи(Реквизиты.Ссылка);
	ЭлементДерева.ТрудозатратыФакт = ТрудозатратыФакт;
	Если ТрудозатратыФакт > 0 Тогда 
		ПодписьТрудозатратыФакт = ПолучитьПодписьТрудозатрат(ТрудозатратыФакт, Реквизиты.ЕдиницаТрудозатратФакт);
		ЭлементДерева.ТрудозатратыФактСтр = Строка(ТрудозатратыФакт) + " " + ПодписьТрудозатратыФакт;
	КонецЕсли;
	
	// состояние
	СостояниеСтр = "";
	Если ЗначениеЗаполнено(Реквизиты.ОкончаниеФакт) Тогда 
		СостояниеСтр = НСтр("ru = 'Выполнена'");
   	ИначеЕсли ЗначениеЗаполнено(Реквизиты.НачалоФакт) Тогда 
		СостояниеСтр = НСтр("ru = 'Выполняется'");
	Иначе   
		СостояниеСтр = НСтр("ru = 'Запланирована'");
	КонецЕсли;	
	ЭлементДерева.Состояние = СостояниеСтр;
	
	// исполнители
	ЭлементДерева.Исполнители.Очистить();
	Если ТипЗнч(Реквизиты.Исполнители) = Тип("РезультатЗапроса") Тогда 
		ТаблИсполнители = Реквизиты.Исполнители.Выгрузить();
	Иначе	
		ТаблИсполнители = Реквизиты.Исполнители;
	КонецЕсли;
	Для Каждого СтрокаТаблЧасти Из ТаблИсполнители Цикл
		СтрокаТаблицыЗначений = ЭлементДерева.Исполнители.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗначений, СтрокаТаблЧасти);
	КонецЦикла;	
	ЭлементДерева.ИсполнителиСтр = ПредставлениеИсполнителя(ЭлементДерева.Исполнители);
	
	// предшественники
	ЭлементДерева.Предшественники.Очистить();
	Если ТипЗнч(Реквизиты.Предшественники) = Тип("РезультатЗапроса") Тогда 
		ТаблПредшественники = Реквизиты.Предшественники.Выгрузить();
	Иначе	
		ТаблПредшественники = Реквизиты.Предшественники;
	КонецЕсли;
	Для Каждого СтрокаТаблЧасти Из ТаблПредшественники Цикл
		СтрокаТаблицыЗначений = ЭлементДерева.Предшественники.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗначений, СтрокаТаблЧасти);
	КонецЦикла;	
	ЭлементДерева.ПредшественникиСтр = ПредставлениеПредшественников(ЭлементДерева.Предшественники);
	
	// задержка начала
	НачалоФакт = ?(ЗначениеЗаполнено(Реквизиты.НачалоФакт), Реквизиты.НачалоФакт, ТекущаяДатаСеанса()) ;
	ЭлементДерева.ЗадержкаНачала = (НачалоФакт > Реквизиты.ТекущийПланНачало);
	
	// задержка окончания
	ОкончаниеФакт = ?(ЗначениеЗаполнено(Реквизиты.ОкончаниеФакт), Реквизиты.ОкончаниеФакт, ТекущаяДатаСеанса()) ;
	ЭлементДерева.ЗадержкаОкончания = (ОкончаниеФакт > Реквизиты.ТекущийПланОкончание);
	
	// все предшественники выполнены
	//ВсеПредшественникиВыполнены = Истина;
	//Для Каждого СтрокаТаблЧасти Из ТаблПредшественники Цикл
	//	Если Не ЗначениеЗаполнено(СтрокаТаблЧасти.Предшественник) Тогда 
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	ДанныеПредшественника = РаботаСПроектами.ПолучитьДанныеПроектнойЗадачи(СтрокаТаблЧасти.Предшественник);
	//	Если ДанныеПредшественника.ПометкаУдаления Тогда 
	//		Продолжить;
	//	КонецЕсли;	
	//	
	//	Если Не ЗначениеЗаполнено(ДанныеПредшественника.ОкончаниеФакт) Тогда 
	//		ВсеПредшественникиВыполнены = Ложь;
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла;
	//ЭлементДерева.ВсеПредшественникиВыполнены = ВсеПредшественникиВыполнены;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСтрокиДереваИзПроектныхЗадач(ДеревоЗадач, ПроектныеЗадачи)
	
	ДанныеПроектныхЗадач = РаботаСПроектами.ПолучитьДанныеПроектныхЗадач(ПроектныеЗадачи);
	Для Каждого ДанныеПроектнойЗадачи Из ДанныеПроектныхЗадач Цикл
		
		Индекс = -1;
		РаботаСПроектамиКлиентСервер.НайтиЗадачуВДеревеПоСсылке(
			ДеревоЗадач.ПолучитьЭлементы(), ДанныеПроектнойЗадачи.Ключ, Индекс);
		Если Индекс = -1 Тогда 
			Продолжить;
		КонецЕсли;
		ЭлементДерева = ДеревоЗадач.НайтиПоИдентификатору(Индекс);
		
		ЗаполнитьСтрокуДереваИзПроектнойЗадачи(ЭлементДерева, ДанныеПроектнойЗадачи.Значение);
		
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьИзмененныеСтрокиЗадач(МассивИзмененныхЗадач)

	ОбновленныеЗадачи = Новый Массив;
	
	Для Каждого ИзмененнаяЗадача Из МассивИзмененныхЗадач Цикл
		
		Если ОбновленныеЗадачи.Найти(ИзмененнаяЗадача) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;	
		ОбновленныеЗадачи.Добавить(ИзмененнаяЗадача);
		
	КонецЦикла;	
	
	ЗаполнитьСтрокиДереваИзПроектныхЗадач(ДеревоЗадач, ОбновленныеЗадачи);
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура РазблокироватьСтрокуДляРедактирования(Ссылка, УникальныйИдентификатор)
	
	Если ЗначениеЗаполнено(Ссылка) Тогда 
		РазблокироватьДанныеДляРедактирования(Ссылка, УникальныйИдентификатор);
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьДеревоЗадач()
	
	СписокРаскрытыхЗадач.Очистить();
	РаботаСПроектамиКлиент.ПолучитьМассивРаскрытыхЗадач(
		Элементы.ДеревоЗадач, ДеревоЗадач.ПолучитьЭлементы(), СписокРаскрытыхЗадач);
		
	ЗаполнитьДеревоЗадач();
	
	РаботаСПроектамиКлиент.УстановитьРазвернутостьЭлементовДерева(
		Элементы.ДеревоЗадач, ДеревоЗадач, СписокРаскрытыхЗадач);
	РаботаСПроектамиКлиент.УстановитьТекущуюЗадачуВДеревеПоСсылке(
		Элементы.ДеревоЗадач, ДеревоЗадач, ТекущаяПроектнаяЗадача);
	
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьМиникарточку()

	Если Не ПоказыватьЗадачиПроцессов Тогда 
		Возврат;
	КонецЕсли;	
	
	ОсновныеЗадачи.Очистить();
	ВспомогательныеЗадачи.Очистить();
	
	ЗаголовокОсновныеЗадачи = НСтр("ru = 'Основные задачи:'");
	ЗаголовокВспомогательныеЗадачи = НСтр("ru = 'Вспомогательные задачи:'");
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеМиникарточки = ПолучитьДанныеМиникарточки(ТекущиеДанные.Ссылка);
	
	Для Каждого Строка Из ДанныеМиникарточки.ОсновныеЗадачи Цикл
		НоваяСтрока = ОсновныеЗадачи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	КоличествоОсновныхЗадач = ДанныеМиникарточки.ОсновныеЗадачи.Количество();
	Если КоличествоОсновныхЗадач > 0 Тогда 
		ЗаголовокОсновныеЗадачи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Основные задачи (%1):'"),
			КоличествоОсновныхЗадач);
	КонецЕсли;
	
	Для Каждого Строка Из ДанныеМиникарточки.ВспомогательныеЗадачи Цикл
		НоваяСтрока = ВспомогательныеЗадачи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	КоличествоВспомогательныхЗадач = ДанныеМиникарточки.ВспомогательныеЗадачи.Количество();
	Если КоличествоВспомогательныхЗадач > 0 Тогда 
		ЗаголовокВспомогательныеЗадачи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Вспомогательные задачи (%1):'"),
			КоличествоВспомогательныхЗадач);
	КонецЕсли;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьДанныеМиникарточки(ПроектнаяЗадача) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Исполнитель,
		|	ЗадачаИсполнителя.СрокИсполнения,
		|	ЗадачаИсполнителя.РольИсполнителя,
		|	ЗадачаИсполнителя.ТочкаМаршрута,
		|	ЗадачаИсполнителя.БизнесПроцесс,
		|	ВЫБОР
		|		КОГДА ЗадачаИсполнителя.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|				И ЗадачаИсполнителя.СрокИсполнения < &ТекущаяДата
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Просрочена,
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.ПроектнаяЗадача = &ПроектнаяЗадача
		|	И НЕ ЗадачаИсполнителя.Выполнена
		|	И НЕ ЗадачаИсполнителя.ПометкаУдаления
		|	И ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Исполнитель,
		|	ЗадачаИсполнителя.СрокИсполнения,
		|	ЗадачаИсполнителя.РольИсполнителя,
		|	ЗадачаИсполнителя.ТочкаМаршрута,
		|	ЗадачаИсполнителя.БизнесПроцесс,
		|	ВЫБОР
		|		КОГДА ЗадачаИсполнителя.СрокИсполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|				И ЗадачаИсполнителя.СрокИсполнения < &ТекущаяДата
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Просрочена,
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.Предметы.Предмет = &ПроектнаяЗадача
		|	И НЕ ЗадачаИсполнителя.Выполнена
		|	И НЕ ЗадачаИсполнителя.ПометкаУдаления
		|	И ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)";
		
	Запрос.УстановитьПараметр("ПроектнаяЗадача", ПроектнаяЗадача);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Результаты = Запрос.ВыполнитьПакет();
	
	ДанныеМиникарточки = Новый Структура;
	ДанныеМиникарточки.Вставить("ОсновныеЗадачи", ПолучитьДанныеЗадач(Результаты[0]));
	ДанныеМиникарточки.Вставить("ВспомогательныеЗадачи", ПолучитьДанныеЗадач(Результаты[1]));
	
	Возврат ДанныеМиникарточки;
	
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьДанныеЗадач(РезультатЗапроса)
	
	МассивЗадачи = Новый Массив;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаЗадача = Новый Структура(
			"Исполнитель,
			|СрокИсполнения,
			|ТочкаМаршрута, 
			|Ссылка,
			|Просрочена,
			|БизнесПроцесс");
		
		Если ЗначениеЗаполнено(Выборка.Исполнитель) Тогда
			СтрокаИсполнитель = Строка(Выборка.Исполнитель);
		Иначе
			СтрокаИсполнитель = Строка(Выборка.РольИсполнителя);
		КонецЕсли;
		
		СтрокаЗадача.Исполнитель = СтрокаИсполнитель;
		СтрокаЗадача.СрокИсполнения = Выборка.СрокИсполнения; 
		СтрокаЗадача.ТочкаМаршрута = Выборка.ТочкаМаршрута; 
		СтрокаЗадача.Ссылка = Выборка.Ссылка; 
		СтрокаЗадача.БизнесПроцесс = Выборка.БизнесПроцесс; 
		СтрокаЗадача.Просрочена = Выборка.Просрочена; 
		
		МассивЗадачи.Добавить(СтрокаЗадача);
	КонецЦикла;	
	
	Возврат МассивЗадачи;
	
КонецФункции	

&НаСервереБезКонтекста
Функция ПредставлениеПредшественников(Знач Предшественники)
	
	ПредшественникиСтр = "";
	Для Каждого СтрокаТаблЧасти Из Предшественники Цикл
		
		Если СтрокаТаблЧасти.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.ОкончаниеНачало Тогда
			ТипЗависимости = "";
		ИначеЕсли СтрокаТаблЧасти.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.ОкончаниеОкончание Тогда
			ТипЗависимости = НСтр("ru = 'ОО'");
		ИначеЕсли СтрокаТаблЧасти.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.НачалоОкончание Тогда
			ТипЗависимости = НСтр("ru = 'НО'");
		ИначеЕсли СтрокаТаблЧасти.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.НачалоНачало Тогда
			ТипЗависимости = НСтр("ru = 'НН'");
		КонецЕсли;
		
		Задержка = "";
		Если СтрокаТаблЧасти.Задержка > 0 Тогда
			Задержка = " + " + СтрокаТаблЧасти.Задержка + " " 
				+ ПолучитьПодписьДлительности(СтрокаТаблЧасти.Задержка, СтрокаТаблЧасти.ЕдиницаЗадержки);
		КонецЕсли;
		
		ПредшественникКодСДР = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблЧасти.Предшественник, "КодСДР");
		ПредшественникиСтр = ПредшественникиСтр + ПредшественникКодСДР + ТипЗависимости + Задержка + ", ";
		
	КонецЦикла;	
	
	Если ПредшественникиСтр <> "" Тогда 
		ПредшественникиСтр = Лев(ПредшественникиСтр, СтрДлина(ПредшественникиСтр)-2);
	КонецЕсли;
	
	Возврат ПредшественникиСтр;
	
КонецФункции	

&НаСервереБезКонтекста
Функция ПредставлениеИсполнителя(Знач Исполнители)
	
	ИсполнителиСтр = "";
	Для Каждого Строка Из Исполнители Цикл
		ПредставлениеИсполнителя = Строка(Строка.Исполнитель);
		ИсполнителиСтр = ИсполнителиСтр + ", " + ПредставлениеИсполнителя;
	КонецЦикла;
	
	Если ИсполнителиСтр <> "" Тогда 
		ИсполнителиСтр = Сред(ИсполнителиСтр, 3);
	КонецЕсли;	
	
	Возврат ИсполнителиСтр;
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПодписьДлительности(Длительность, ЕдиницаДлительности)
	
	ПодписьДлительность = "";
	
	ЦелаяЧастьДлительность = Цел(Длительность);
	Если ЕдиницаДлительности = ПредопределенноеЗначение("Перечисление.ЕдиницыДлительности.Минута") Тогда
		ПодписьДлительность = ДелопроизводствоКлиентСервер.ПолучитьПодписьМинут(ЦелаяЧастьДлительность);
			
	ИначеЕсли ЕдиницаДлительности = ПредопределенноеЗначение("Перечисление.ЕдиницыДлительности.Час") Тогда
		ПодписьДлительность = ДелопроизводствоКлиентСервер.ПолучитьПодписьЧасов(ЦелаяЧастьДлительность);
			
	ИначеЕсли ЕдиницаДлительности = ПредопределенноеЗначение("Перечисление.ЕдиницыДлительности.День") Тогда
		ПодписьДлительность = ДелопроизводствоКлиентСервер.ПолучитьПодписьДней(ЦелаяЧастьДлительность);
			
	ИначеЕсли ЕдиницаДлительности = ПредопределенноеЗначение("Перечисление.ЕдиницыДлительности.Неделя") Тогда
		ПодписьДлительность = ДелопроизводствоКлиентСервер.ПолучитьПодписьНедель(ЦелаяЧастьДлительность);
			
	ИначеЕсли ЕдиницаДлительности = ПредопределенноеЗначение("Перечисление.ЕдиницыДлительности.Месяц") Тогда
		ПодписьДлительность = ДелопроизводствоКлиентСервер.ПолучитьПодписьМесяцев(ЦелаяЧастьДлительность);	
			
	Иначе
		ПодписьДлительность = НРег(Строка(ЕдиницаДлительности));
	КонецЕсли;
	
	Возврат ПодписьДлительность;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПодписьТрудозатрат(Трудозатраты, ЕдиницаТрудозатрат)
	
	ПодписьТрудозатраты = "";
	
	ЦелаяЧастьТрудозатраты = Цел(Трудозатраты);
	Если ЕдиницаТрудозатрат = ПредопределенноеЗначение("Перечисление.ЕдиницыТрудозатрат.ЧеловекоМинута") Тогда
		ПодписьТрудозатраты = НСтр("ru = 'чел-'") 
			+ ДелопроизводствоКлиентСервер.ПолучитьПодписьМинут(ЦелаяЧастьТрудозатраты);
			
	ИначеЕсли ЕдиницаТрудозатрат = ПредопределенноеЗначение("Перечисление.ЕдиницыТрудозатрат.ЧеловекоЧас") Тогда
		ПодписьТрудозатраты = НСтр("ru = 'чел-'") 
			+ ДелопроизводствоКлиентСервер.ПолучитьПодписьЧасов(ЦелаяЧастьТрудозатраты);
			
	ИначеЕсли ЕдиницаТрудозатрат = ПредопределенноеЗначение("Перечисление.ЕдиницыТрудозатрат.ЧеловекоДень") Тогда
		ПодписьТрудозатраты = НСтр("ru = 'чел-'") 
			+ ДелопроизводствоКлиентСервер.ПолучитьПодписьДней(ЦелаяЧастьТрудозатраты);
			
	ИначеЕсли ЕдиницаТрудозатрат = ПредопределенноеЗначение("Перечисление.ЕдиницыТрудозатрат.ЧеловекоНеделя") Тогда
		ПодписьТрудозатраты = НСтр("ru = 'чел-'") 
			+ ДелопроизводствоКлиентСервер.ПолучитьПодписьНедель(ЦелаяЧастьТрудозатраты);
			
	ИначеЕсли ЕдиницаТрудозатрат = ПредопределенноеЗначение("Перечисление.ЕдиницыТрудозатрат.ЧеловекоМесяц") Тогда
		ПодписьТрудозатраты = НСтр("ru = 'чел-'") 
			+ ДелопроизводствоКлиентСервер.ПолучитьПодписьМесяцев(ЦелаяЧастьТрудозатраты);	
			
	Иначе
		ПодписьТрудозатраты = НРег(Строка(ЕдиницаТрудозатрат));
	КонецЕсли;
	
	Возврат ПодписьТрудозатраты;
	
КонецФункции

&НаСервере
Процедура ЗаписатьПроектнуюЗадачуИзСтрокиДерева(ИндексСтроки)
	
	ЭлементДерева = ДеревоЗадач.НайтиПоИдентификатору(ИндексСтроки);
	
	Если ЗначениеЗаполнено(ЭлементДерева.Ссылка) Тогда 
		ПроектнаяЗадачаОбъект = ЭлементДерева.Ссылка.ПолучитьОбъект();
		
		Если ЭлементДерева.ВерсияДанных <> ЭлементДерева.Ссылка.ВерсияДанных Тогда 
			РазблокироватьСтрокуДляРедактирования(ПроектнаяЗадачаОбъект.Ссылка, УникальныйИдентификатор);
			
			ЗаполнитьСтрокуДереваИзПроектнойЗадачи(ЭлементДерева, ПроектнаяЗадачаОбъект.Ссылка);
			
			ТекстСообщения = НСтр("ru = 'Данные были изменены другим пользователем'");
			ВызватьИсключение ТекстСообщения; 
		КонецЕсли;	
	Иначе
		ПроектнаяЗадачаОбъект = Справочники.ПроектныеЗадачи.СоздатьЭлемент();
		ПроектнаяЗадачаОбъект.Важность = Перечисления.ВариантыВажностиОбъектов.Обычная;
		
		ДанныеКода = РаботаСПроектами.ПолучитьКодСДРИНомерЗадачиВУровне(ЭлементДерева.Владелец, ЭлементДерева.РодительскаяЗадача);
		
		ПроектнаяЗадачаОбъект.КодСДР = ДанныеКода.КодСДР;
		ПроектнаяЗадачаОбъект.НомерЗадачиВУровне = ДанныеКода.НомерЗадачиВУровне;
	КонецЕсли;	
	
	Если ЭлементДерева.ТекущийПланДлительность = 0 Тогда 
		ПроектнаяЗадачаОбъект.Веха = Истина;
	Иначе
		ПроектнаяЗадачаОбъект.Веха = Ложь;
	КонецЕсли;	
	
	ПроектнаяЗадачаОбъект.ЕдиницаТрудозатратФакт = ЭлементДерева.ЕдиницаТрудозатратФакт;
	ПроектнаяЗадачаОбъект.ТекущийПланЕдиницаТрудозатрат = ЭлементДерева.ТекущийПланЕдиницаТрудозатрат;
	ПроектнаяЗадачаОбъект.ТекущийПланТрудозатраты = ЭлементДерева.ТекущийПланТрудозатраты;
	
	ПроектнаяЗадачаОбъект.Наименование = ЭлементДерева.Наименование;
	ПроектнаяЗадачаОбъект.Владелец = ЭлементДерева.Владелец;
	ПроектнаяЗадачаОбъект.Родитель = ЭлементДерева.РодительскаяЗадача;
	
	ПроектнаяЗадачаОбъект.Предшественники.Загрузить(ЭлементДерева.Предшественники.Выгрузить());
	ПроектнаяЗадачаОбъект.Исполнители.Загрузить(ЭлементДерева.Исполнители.Выгрузить());
	
	ПроектнаяЗадачаОбъект.ТипОграничения = ЭлементДерева.ТипОграничения;
	ПроектнаяЗадачаОбъект.ДатаОграничения = ЭлементДерева.ДатаОграничения;
	
	ПроектнаяЗадачаОбъект.ДополнительныеСвойства.Вставить("ПроверитьПредшественников", Истина);
	ПроектнаяЗадачаОбъект.Записать();
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("НачалоФакт", ЭлементДерева.НачалоФакт);
	СтруктураДанных.Вставить("ОкончаниеФакт", ЭлементДерева.ОкончаниеФакт);
	СтруктураДанных.Вставить("ДлительностьФакт", ЭлементДерева.ДлительностьФакт);
	СтруктураДанных.Вставить("ЕдиницаДлительностиФакт", ЭлементДерева.ЕдиницаДлительностиФакт);
	
	СтруктураДанных.Вставить("ТекущийПланНачало", ЭлементДерева.ТекущийПланНачало);
	СтруктураДанных.Вставить("ТекущийПланОкончание", ЭлементДерева.ТекущийПланОкончание);
	СтруктураДанных.Вставить("ТекущийПланДлительность", ЭлементДерева.ТекущийПланДлительность);
	СтруктураДанных.Вставить("ТекущийПланЕдиницаДлительности", ЭлементДерева.ТекущийПланЕдиницаДлительности);
		
	РаботаСПроектами.ЗаписатьСрокиПроектнойЗадачи(ПроектнаяЗадачаОбъект.Ссылка, СтруктураДанных);
	
	ЭлементДерева.Ссылка = ПроектнаяЗадачаОбъект.Ссылка;
	ЭлементДерева.ВерсияДанных = ПроектнаяЗадачаОбъект.ВерсияДанных;
	
	РазблокироватьСтрокуДляРедактирования(ПроектнаяЗадачаОбъект.Ссылка, УникальныйИдентификатор);
	
	// рассчитать план
	МассивИзмененныхЗадач = Новый Массив;
	РаботаСПроектами.РассчитатьПланПроекта(ПроектнаяЗадачаОбъект.Ссылка, МассивИзмененныхЗадач);
	
	Если МассивИзмененныхЗадач.Найти(ПроектнаяЗадачаОбъект.Родитель) = Неопределено Тогда 
		МассивИзмененныхЗадач.Добавить(ПроектнаяЗадачаОбъект.Родитель);
	КонецЕсли;	
	ОбновитьИзмененныеСтрокиЗадач(МассивИзмененныхЗадач);
	
	ИсторияРаботыПользователя.Добавить(ПроектнаяЗадачаОбъект.Ссылка);
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДанныеДоступностиКомандПеремещения(ДеревоЗадач, ЭлементыФормы)
	
	ДеревоЗадачВверх = Истина;
	ДеревоЗадачВниз = Истина;
	ДеревоЗадачНаУровеньВыше = Истина;
	ДеревоЗадачНаУровеньНиже = Истина;
	
	ВыделенныеСтроки = ЭлементыФормы.ДеревоЗадач.ВыделенныеСтроки;
	ВыделенныеСтрокиКоличество = ВыделенныеСтроки.Количество();
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		СтрокаТекущая = ДеревоЗадач.НайтиПоИдентификатору(ВыделеннаяСтрока);
		СтрокаРодитель = СтрокаТекущая.ПолучитьРодителя();
		
		ДеревоЗадачНаУровеньВыше = ДеревоЗадачНаУровеньВыше 
			И (СтрокаРодитель <> Неопределено)
			И ВыделенныеСтрокиКоличество = 1
			И Не СтрокаТекущая.ПометкаУдаления;
			
		Если СтрокаРодитель = Неопределено Тогда
			СтрокаРодитель = ДеревоЗадач;
		КонецЕсли;
		
		ДеревоЗадачНаУровеньНиже = ДеревоЗадачНаУровеньНиже 
			И СтрокаРодитель.ПолучитьЭлементы().Индекс(СтрокаТекущая) > 0
			И ВыделенныеСтрокиКоличество = 1
			И Не СтрокаТекущая.ПометкаУдаления;
		
		ДеревоЗадачВверх = ДеревоЗадачВверх
			И СтрокаРодитель.ПолучитьЭлементы().Индекс(СтрокаТекущая) > 0
			И Не СтрокаТекущая.ПометкаУдаления;
			
		ДеревоЗадачВниз = ДеревоЗадачВниз
			И СтрокаРодитель.ПолучитьЭлементы().Индекс(СтрокаТекущая) < 
				СтрокаРодитель.ПолучитьЭлементы().Количество() - 1
			И Не СтрокаТекущая.ПометкаУдаления;
			
	КонецЦикла;
	
	ДанныеВозврата = Новый Структура;
	ДанныеВозврата.Вставить("ДеревоЗадачВверх", 		ДеревоЗадачВверх);
	ДанныеВозврата.Вставить("ДеревоЗадачВниз", 			ДеревоЗадачВниз);
	ДанныеВозврата.Вставить("ДеревоЗадачНаУровеньВыше", ДеревоЗадачНаУровеньВыше);
	ДанныеВозврата.Вставить("ДеревоЗадачНаУровеньНиже", ДеревоЗадачНаУровеньНиже);
		
	Возврат ДанныеВозврата;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандПеремещения(ТекущаяПроектнаяЗадача, ДеревоЗадач, Элементы)
	
	ДанныеДоступности = ПолучитьДанныеДоступностиКомандПеремещения(ДеревоЗадач, Элементы);
	
	Элементы.ДеревоЗадачКонтекстноеМенюВверх.Доступность = ДанныеДоступности.ДеревоЗадачВверх;
	Элементы.ДеревоЗадачКонтекстноеМенюВниз.Доступность = ДанныеДоступности.ДеревоЗадачВниз;
	
	Элементы.ДеревоЗадачКонтекстноеМенюНаУровеньВыше.Доступность = ДанныеДоступности.ДеревоЗадачНаУровеньВыше;
	Элементы.ДеревоЗадачКонтекстноеМенюНаУровеньНиже.Доступность = ДанныеДоступности.ДеревоЗадачНаУровеньНиже;
	
КонецПроцедуры

&НаСервере
Функция ПометитьНаУдалениеПроектныеЗадачи(ВыделенныеСтроки, ПометкаУдаления)
	
	Для Каждого СтрокаТаблицы Из ВыделенныеСтроки Цикл
		СтрокаТаблицыПроектнаяЗадача = ДеревоЗадач.НайтиПоИдентификатору(СтрокаТаблицы);
		Если СтрокаТаблицыПроектнаяЗадача = Неопределено Тогда 
			Продолжить;
		КонецЕсли;	
		
		ПроектнаяЗадачаСсылка = СтрокаТаблицыПроектнаяЗадача.Ссылка;
		Если ПроектнаяЗадачаСсылка.Пустая() Тогда
			Продолжить;
		КонецЕсли;	
		
		ПроектнаяЗадачаОбъект = ПроектнаяЗадачаСсылка.ПолучитьОбъект();
		ПроектнаяЗадачаОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
	КонецЦикла;
	
	ЗаполнитьДеревоЗадач();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеОПоследователяхСпискаЗадач(МассивПоследователей, МассивЗадач)
	
	Для Каждого Элемент Из МассивЗадач Цикл
		МассивПоследователейЗадачи = РаботаСПроектами.ПолучитьВсехПоследователей(Элемент).ВыгрузитьКолонку("Ссылка");
		Для Каждого ЭлементПоследователь Из МассивПоследователейЗадачи Цикл 
			Если МассивПоследователей.Найти(ЭлементПоследователь) = Неопределено Тогда
				МассивПоследователей.Добавить(ЭлементПоследователь);	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЧисловуюЧасть(Знач Строка) 
	
	Строка = СокрЛП(Строка);
	Если ПустаяСтрока(Строка) Тогда 
		Возврат "0";
	КонецЕсли;	
	
	ЧисловаяЧасть = "";
	
	ДопустимыеСимволы = "0123456789., ";
	Для Инд = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(Строка,Инд,1);
		Если Найти(ДопустимыеСимволы, Символ) > 0 Тогда 
			ЧисловаяЧасть = ЧисловаяЧасть + Символ;
		Иначе	
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	ЧисловаяЧасть = СтрЗаменить(ЧисловаяЧасть, " ", "");
	
	Возврат ЧисловаяЧасть;
	
КонецФункции	

&НаСервере
Функция СвязатьЗадачиСервер()
	
	ТекущаяСтрока = Элементы.ДеревоЗадач.ТекущаяСтрока;
	Последователь = ДеревоЗадач.НайтиПоИдентификатору(ТекущаяСтрока).Ссылка;
	
	Предшественники = Новый Массив;
	Для Каждого Строка Из Элементы.ДеревоЗадач.ВыделенныеСтроки Цикл
		Предшественник = ДеревоЗадач.НайтиПоИдентификатору(Строка).Ссылка;
		Если Предшественник <> Последователь Тогда 
			Предшественники.Добавить(Предшественник);
		КонецЕсли;	
	КонецЦикла;	
	
	СвязьУстановлена = Ложь;
	ОбъектПоследователь = Последователь.ПолучитьОбъект();
	Для Каждого Предшественник Из Предшественники Цикл
		Если ОбъектПоследователь.Предшественники.Найти(Предшественник, "Предшественник") = Неопределено Тогда 
			НоваяСтрока = ОбъектПоследователь.Предшественники.Добавить();
			НоваяСтрока.Предшественник = Предшественник;
			НоваяСтрока.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.ОкончаниеНачало;
			СвязьУстановлена = Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Если СвязьУстановлена Тогда 
		ОбъектПоследователь.ДополнительныеСвойства.Вставить("ПроверитьПредшественников", Истина);
		ОбъектПоследователь.Записать();
		
		МассивИзмененныхЗадач = Новый Массив;
		РаботаСПроектами.РассчитатьПланПроекта(Последователь, МассивИзмененныхЗадач);
		ОбновитьИзмененныеСтрокиЗадач(МассивИзмененныхЗадач);
		
		Возврат Истина;
	Иначе	
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции

&НаСервере
Процедура НаУровеньНижеСервер(Ссылка, Родитель)
	
	// Вычисляем наличие соседней задачи, в которую помещается текущая задача
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроектныеЗадачи.Ссылка
		|ИЗ
		|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
		|ГДЕ
		|	ПроектныеЗадачи.Родитель = &Родитель
		|	И ПроектныеЗадачи.Владелец = &Проект
		|	И НЕ ПроектныеЗадачи.ПометкаУдаления
		|	И ПроектныеЗадачи.НомерЗадачиВУровне = &НомерВУровне - 1";
		
	Запрос.УстановитьПараметр("Родитель", Родитель);
	Запрос.УстановитьПараметр("НомерВУровне", Ссылка.НомерЗадачиВУровне);
	Запрос.УстановитьПараметр("Проект", Ссылка.Владелец);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ОбъектЗадача = Ссылка.ПолучитьОбъект();
		РодительЗадачи = ОбъектЗадача.Родитель;
		ОбъектЗадача.Родитель = Выборка.Ссылка;
		ОбъектЗадача.НомерЗадачиВУровне = РаботаСПроектами.ПолучитьМаксимальныйНомерЗадачиУровня(
			Ссылка.Владелец,
			ОбъектЗадача.Родитель) + 1;
		ОбъектЗадача.ДополнительныеСвойства.Вставить("ПроверитьПредшественников", Истина);
		ОбъектЗадача.Записать();
		
		РаботаСПроектами.ЗаполнитьКодыСДРПроектныхЗадач(Ссылка.Владелец);

		Если ЗначениеЗаполнено(РодительЗадачи) Тогда 
			РаботаСПроектами.РассчитатьПланПроекта(РодительЗадачи);
		КонецЕсли;	
		Если ЗначениеЗаполнено(ОбъектЗадача.Родитель) Тогда 
			РаботаСПроектами.РассчитатьПланПроекта(ОбъектЗадача.Родитель);
		КонецЕсли;
		
		ЗаполнитьДеревоЗадач();
		СписокРаскрытыхЗадач.Добавить(ОбъектЗадача.Родитель);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НаУровеньВышеСервер(Ссылка, Родитель)
	
	// Выбор всех задачи одного с родителем уровня и сдвигаем номера на один вниз
	МассивЗадачУровняРодителя = 
		РаботаСПроектами.ПолучитьМассивЗадачОдногоУровняСУказанной(Ссылка.Владелец, Родитель);
		
	// Подготовка номера для вставки подчиненной задачи на один уровень вверх
	КоличествоЭлементов = МассивЗадачУровняРодителя.Количество(); 
	Для Счетчик = 0 по КоличествоЭлементов - 1 Цикл
		Индекс = КоличествоЭлементов - Счетчик - 1;
		Задача = МассивЗадачУровняРодителя[Индекс];
		Если Задача.НомерЗадачиВУровне > Родитель.НомерЗадачиВУровне Тогда
			ЗадачаОбъект = Задача.ПолучитьОбъект();
			ЗадачаОбъект.НомерЗадачиВУровне = ЗадачаОбъект.НомерЗадачиВУровне + 1;
		КонецЕсли;
	КонецЦикла;
		
	ЗадачаОбъект = Ссылка.ПолучитьОбъект();
	РодительЗадачи = ЗадачаОбъект.Родитель;
	ЗадачаОбъект.Родитель = Родитель.Родитель;
	ЗадачаОбъект.НомерЗадачиВУровне = Родитель.НомерЗадачиВУровне + 1;
	ЗадачаОбъект.ДополнительныеСвойства.Вставить("ПроверитьПредшественников", Истина);
	ЗадачаОбъект.Записать();
		
	РаботаСПроектами.ЗаполнитьКодыСДРПроектныхЗадач(Ссылка.Владелец);
	
	Если ЗначениеЗаполнено(РодительЗадачи) Тогда 
		РаботаСПроектами.РассчитатьПланПроекта(РодительЗадачи);
	КонецЕсли;	
	Если ЗначениеЗаполнено(ЗадачаОбъект.Родитель) Тогда 
		РаботаСПроектами.РассчитатьПланПроекта(ЗадачаОбъект.Родитель);
	КонецЕсли;
	
	ЗаполнитьДеревоЗадач();
	СписокРаскрытыхЗадач.Добавить(ЗадачаОбъект.Родитель);
	
КонецПроцедуры

&НаСервере
Процедура ВверхСервер()
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСсылок = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоЗадач.ВыделенныеСтроки Цикл
		Ссылка = ДеревоЗадач.НайтиПоИдентификатору(ВыделеннаяСтрока).Ссылка;
		Индекс = Неопределено;
		Для Каждого Элемент Из МассивСсылок Цикл
			Если Элемент.НомерЗадачиВУровне > Ссылка.НомерЗадачиВУровне Тогда
				Индекс = МассивСсылок.Найти(Элемент);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Индекс = Неопределено Тогда
			МассивСсылок.Добавить(Ссылка);
		Иначе
			МассивСсылок.Вставить(Индекс, Ссылка); 
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого Ссылка Из МассивСсылок Цикл
		// Получение задачи с номером в уровне, меньшим на 1, чем текущий
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПроектныеЗадачи.Ссылка
			|ИЗ
			|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
			|ГДЕ
			|	ПроектныеЗадачи.Владелец = &Владелец
			|	И ПроектныеЗадачи.Родитель = &Родитель
			|	И Не ПометкаУдаления
			|	И ПроектныеЗадачи.НомерЗадачиВУровне = &НомерЗадачиВУровне";
		Запрос.УстановитьПараметр("Владелец", Ссылка.Владелец);
		Запрос.УстановитьПараметр("Родитель", Ссылка.Родитель);
		Запрос.УстановитьПараметр("НомерЗадачиВУровне", Ссылка.НомерЗадачиВУровне - 1);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			// сдвиг строк в дереве
			Идентификатор = -1;
			РаботаСПроектамиКлиентСервер.НайтиЗадачуВДеревеПоСсылке(
				ДеревоЗадач.ПолучитьЭлементы(),
				Ссылка,
				Идентификатор);
				
			СтрокаТекущейЗадачи = ДеревоЗадач.НайтиПоИдентификатору(Идентификатор);
			СтрокаРодительскойЗадачи = СтрокаТекущейЗадачи.ПолучитьРодителя();
			Если СтрокаРодительскойЗадачи = Неопределено Тогда
				СтрокаРодительскойЗадачи = ДеревоЗадач;	
			КонецЕсли;
			
			ИндексТекущейЗадачи = СтрокаРодительскойЗадачи.ПолучитьЭлементы().Индекс(СтрокаТекущейЗадачи);
			СтрокаРодительскойЗадачи.ПолучитьЭлементы().Сдвинуть(ИндексТекущейЗадачи, -1);
			
			// изменение реквизитов объектов
			ТекущаяЗадачаОбъект = Ссылка.ПолучитьОбъект();
			ПредыдущаяЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Буфер = ТекущаяЗадачаОбъект.НомерЗадачиВУровне;
			ТекущаяЗадачаОбъект.НомерЗадачиВУровне = ПредыдущаяЗадачаОбъект.НомерЗадачиВУровне;
			ПредыдущаяЗадачаОбъект.НомерЗадачиВУровне = Буфер;

			БуферСДР = ТекущаяЗадачаОбъект.КодСДР;
			ТекущаяЗадачаОбъект.КодСДР = ПредыдущаяЗадачаОбъект.КодСДР;
			ПредыдущаяЗадачаОбъект.КодСДР = БуферСДР;
			
			Если ТекущаяЗадачаОбъект.Предшественники.Количество() = 1 Тогда 
				НайденнаяСтрока = ТекущаяЗадачаОбъект.Предшественники.Найти(
					ПредыдущаяЗадачаОбъект.Ссылка, "Предшественник");
				Если НайденнаяСтрока <> Неопределено Тогда 
					Буфер = Новый Структура("Предшественник, ТипЗависимости, Задержка, ЕдиницаЗадержки");
					ЗаполнитьЗначенияСвойств(Буфер, НайденнаяСтрока);
					
					ТекущаяЗадачаОбъект.Предшественники.Загрузить(
						ПредыдущаяЗадачаОбъект.Предшественники.Выгрузить());
					
					ПредыдущаяЗадачаОбъект.Предшественники.Очистить();
					НоваяСтрока = ПредыдущаяЗадачаОбъект.Предшественники.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Буфер);
					НоваяСтрока.Предшественник = ТекущаяЗадачаОбъект.Ссылка;
				КонецЕсли;	
			КонецЕсли;
			
			ТекущаяЗадачаОбъект.Записать();
			ПредыдущаяЗадачаОбъект.Записать();
			
			ИзмененныеЗадачи = Новый Массив;
			ИзмененныеЗадачи.Добавить(ТекущаяЗадачаОбъект.Ссылка);
			ИзмененныеЗадачи.Добавить(ПредыдущаяЗадачаОбъект.Ссылка);
			
			// заполнение кодов СДР
			РаботаСПроектами.ЗаполнитьКодыСДРПодчиненныхЗадач(ТекущаяЗадачаОбъект.Ссылка, ИзмененныеЗадачи);
			РаботаСПроектами.ЗаполнитьКодыСДРПодчиненныхЗадач(ПредыдущаяЗадачаОбъект.Ссылка, ИзмененныеЗадачи);
			
			// обновление последователей
			ЗаполнитьДанныеОПоследователяхСпискаЗадач(ИзмененныеЗадачи, ИзмененныеЗадачи);
			ОбновитьИзмененныеСтрокиЗадач(ИзмененныеЗадачи);
			
			СписокРаскрытыхЗадач.Добавить(ТекущаяПроектнаяЗадача.Родитель);
 		КонецЕсли;
	КонецЦикла;
	
	Если МассивСсылок.Количество() > 0 Тогда 
		РаботаСПроектами.ЗаполнитьПорядокПроектныхЗадач(Проект);
	КонецЕсли;
	
	УстановитьДоступностьКомандПеремещения(ТекущаяПроектнаяЗадача, ДеревоЗадач, Элементы);
	 
КонецПроцедуры

&НаСервере
Процедура ВнизСервер()
	
	МассивСсылок = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоЗадач.ВыделенныеСтроки Цикл
		Ссылка = ДеревоЗадач.НайтиПоИдентификатору(ВыделеннаяСтрока).Ссылка;
		Индекс = Неопределено;
		Для Каждого Элемент Из МассивСсылок Цикл
			Если Элемент.НомерЗадачиВУровне < Ссылка.НомерЗадачиВУровне Тогда
				Индекс = МассивСсылок.Найти(Элемент);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Индекс = Неопределено Тогда
			МассивСсылок.Добавить(Ссылка);
		Иначе
			МассивСсылок.Вставить(Индекс, Ссылка); 
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого Ссылка Из МассивСсылок Цикл
		// Получение задачи с номером в уровне, меньшим на 1, чем текущий
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПроектныеЗадачи.Ссылка
			|ИЗ
			|	Справочник.ПроектныеЗадачи КАК ПроектныеЗадачи
			|ГДЕ
			|	ПроектныеЗадачи.Владелец = &Владелец
			|	И ПроектныеЗадачи.Родитель = &Родитель
			|	И Не ПометкаУдаления
			|	И ПроектныеЗадачи.НомерЗадачиВУровне = &НомерЗадачиВУровне";
			
		Запрос.УстановитьПараметр("Владелец", Ссылка.Владелец);
		Запрос.УстановитьПараметр("Родитель", Ссылка.Родитель);
		Запрос.УстановитьПараметр("НомерЗадачиВУровне", Ссылка.НомерЗадачиВУровне + 1);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			// сдвиг строк в дереве	
			Идентификатор = -1;
			РаботаСПроектамиКлиентСервер.НайтиЗадачуВДеревеПоСсылке(
				ДеревоЗадач.ПолучитьЭлементы(),
				Ссылка,
				Идентификатор);
			СтрокаТекущейЗадачи = ДеревоЗадач.НайтиПоИдентификатору(Идентификатор);
			СтрокаРодительскойЗадачи = СтрокаТекущейЗадачи.ПолучитьРодителя();
			Если СтрокаРодительскойЗадачи = Неопределено Тогда
				СтрокаРодительскойЗадачи = ДеревоЗадач;	
			КонецЕсли;
			ИндексТекущейЗадачи = СтрокаРодительскойЗадачи.ПолучитьЭлементы().Индекс(СтрокаТекущейЗадачи);
			СтрокаРодительскойЗадачи.ПолучитьЭлементы().Сдвинуть(ИндексТекущейЗадачи, 1);
			
			// изменение реквизитов объектов
			ТекущаяЗадачаОбъект = Ссылка.ПолучитьОбъект();
			СледующаяЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Буфер = ТекущаяЗадачаОбъект.НомерЗадачиВУровне;
			ТекущаяЗадачаОбъект.НомерЗадачиВУровне = СледующаяЗадачаОбъект.НомерЗадачиВУровне;
			СледующаяЗадачаОбъект.НомерЗадачиВУровне = Буфер;

			БуферСДР = ТекущаяЗадачаОбъект.КодСДР;
			ТекущаяЗадачаОбъект.КодСДР = СледующаяЗадачаОбъект.КодСДР;
			СледующаяЗадачаОбъект.КодСДР = БуферСДР;
			
			Если СледующаяЗадачаОбъект.Предшественники.Количество() = 1 Тогда 
				НайденнаяСтрока = СледующаяЗадачаОбъект.Предшественники.Найти(ТекущаяЗадачаОбъект.Ссылка, "Предшественник");
				Если НайденнаяСтрока <> Неопределено Тогда 
					Буфер = Новый Структура("Предшественник, ТипЗависимости, Задержка, ЕдиницаЗадержки");
					ЗаполнитьЗначенияСвойств(Буфер, НайденнаяСтрока);
					
					СледующаяЗадачаОбъект.Предшественники.Загрузить(ТекущаяЗадачаОбъект.Предшественники.Выгрузить());
					
					ТекущаяЗадачаОбъект.Предшественники.Очистить();
					НоваяСтрока = ТекущаяЗадачаОбъект.Предшественники.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Буфер);
					НоваяСтрока.Предшественник = СледующаяЗадачаОбъект.Ссылка;
				КонецЕсли;	
			КонецЕсли;
			
			ТекущаяЗадачаОбъект.Записать();
			СледующаяЗадачаОбъект.Записать();
			
			ИзмененныеЗадачи = Новый Массив;
			ИзмененныеЗадачи.Добавить(ТекущаяЗадачаОбъект.Ссылка);
			ИзмененныеЗадачи.Добавить(СледующаяЗадачаОбъект.Ссылка);
			
			// заполнение кодов СДР
			РаботаСПроектами.ЗаполнитьКодыСДРПодчиненныхЗадач(ТекущаяЗадачаОбъект.Ссылка, ИзмененныеЗадачи);
			РаботаСПроектами.ЗаполнитьКодыСДРПодчиненныхЗадач(СледующаяЗадачаОбъект.Ссылка, ИзмененныеЗадачи);
			
			// обновление последователей
			ЗаполнитьДанныеОПоследователяхСпискаЗадач(ИзмененныеЗадачи, ИзмененныеЗадачи);
			ОбновитьИзмененныеСтрокиЗадач(ИзмененныеЗадачи);
			
			СписокРаскрытыхЗадач.Добавить(ТекущаяПроектнаяЗадача.Родитель);		
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСсылок.Количество() > 0 Тогда 
		РаботаСПроектами.ЗаполнитьПорядокПроектныхЗадач(Проект);
	КонецЕсли;

	УстановитьДоступностьКомандПеремещения(ТекущаяПроектнаяЗадача, ДеревоЗадач, Элементы);
	
КонецПроцедуры

&НаСервере
Процедура ДеревоЗадачПеретаскиваниеСервер(СсылкаИсточник, СсылкаПриемник)
	
	НачатьТранзакцию();
	Попытка
		
		ОбъектИсточник = СсылкаИсточник.ПолучитьОбъект();
		СтарыйРодительИсточника = ОбъектИсточник.Родитель;
		
		НовыйРодительИсточника = СсылкаПриемник;
		ОбъектИсточник.Родитель = НовыйРодительИсточника;
		
		ОбъектИсточник.НомерЗадачиВУровне = РаботаСПроектами.ПолучитьМаксимальныйНомерЗадачиУровня(
			ОбъектИсточник.Владелец,
			ОбъектИсточник.Родитель) + 1;
		ОбъектИсточник.ДополнительныеСвойства.Вставить("ПроверитьПредшественников", Истина);
		ОбъектИсточник.Записать();
		
		Если ЗначениеЗаполнено(СтарыйРодительИсточника) Тогда 
			РаботаСПроектами.РассчитатьПланПроекта(СтарыйРодительИсточника);
		КонецЕсли;	
		РаботаСПроектами.РассчитатьПланПроекта(СсылкаИсточник);
		
		РаботаСПроектами.ЗаполнитьКодыСДРПроектныхЗадач(ОбъектИсточник.Владелец);
		
		ЗаполнитьДеревоЗадач();
		СписокРаскрытыхЗадач.Добавить(СсылкаПриемник);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьУдалениеИсполнителей(ИменаИсполнителей, Исполнители, ВыбранноеЗначение)
	
	КоличествоСтрок = Исполнители.Количество();
	Для Инд = 1 по КоличествоСтрок Цикл
		Строка = Исполнители[КоличествоСтрок-Инд];
		Если ИменаИсполнителей.Найти(Строка.Исполнитель.Наименование) = Неопределено
				И Строка.Исполнитель <> ВыбранноеЗначение Тогда
			Исполнители.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ВыделитьТекстДляАвтоподбораИсполнителя(Знач Текст)
	
	Текст = СокрЛП(Текст);
	
	ПозРазделителя = 0;
	Для Инд = 1 По СтрДлина(Текст) Цикл
		Символ = Сред(Текст, Инд, 1);
		Если Символ = "," Тогда 
			ПозРазделителя = Инд;
		КонецЕсли;
	КонецЦикла;	
	
	Если ПозРазделителя = 0 Тогда 
		Возврат Текст;
	Иначе
		Возврат СокрЛП(Сред(Текст, ПозРазделителя+1));
	КонецЕсли;	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПоместитьИсполнителейВоВременноеХранилище(Исполнители, УникальныйИдентификатор)

	Возврат ПоместитьВоВременноеХранилище(
		Исполнители.Выгрузить().ВыгрузитьКолонку("Исполнитель"),
		УникальныйИдентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗагрузитьИсполнителейИзВременногоХранилища(АдресВременногоХранилища)
	
	Возврат ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСкрытьКнопкуОчисткиОтбора(Поле, Значение)
	
	Если ЗначениеЗаполнено(Значение) И Значение <> "Все" Тогда 
		Поле.КнопкаОчистки = Истина;
		#Если Клиент Тогда
			Поле.ЦветФона = ОбщегоНазначенияКлиент.ЦветСтиля("ФонУправляющегоПоля");
		#Иначе
			Поле.ЦветФона = ЦветаСтиля["ФонУправляющегоПоля"];
		#КонецЕсли	
	Иначе 
		Поле.КнопкаОчистки = Ложь;
		Поле.ЦветФона = Новый Цвет();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьУровень(Уровень, Знач ТекущийУровень = 0, СтрокаРодитель = Неопределено)
	
	Если СтрокаРодитель = Неопределено Тогда 
		СтрокаРодитель = ДеревоЗадач;
	КонецЕсли;	
	
	ТекущийУровень = ТекущийУровень + 1;
	
	Если Уровень <= ТекущийУровень Тогда 
		Для Каждого Строка Из СтрокаРодитель.ПолучитьЭлементы() Цикл
			Элементы.ДеревоЗадач.Свернуть(Строка.ПолучитьИдентификатор());
		КонецЦикла;	
	Иначе
		Для Каждого Строка Из СтрокаРодитель.ПолучитьЭлементы() Цикл
			Элементы.ДеревоЗадач.Развернуть(Строка.ПолучитьИдентификатор());
			ПоказатьУровень(Уровень, ТекущийУровень, Строка);
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ДеревоЗадачПередУдалениемПродолжение(Результат, Параметры) Экспорт 

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	ВыделенныеСтроки = Параметры.ВыделенныеСтроки;
	ПометкаУдаления = Параметры.ПометкаУдаления;
	СписокРаскрытыхЗадач.Очистить();
	РаботаСПроектамиКлиент.ПолучитьМассивРаскрытыхЗадач(Элементы.ДеревоЗадач, ДеревоЗадач.ПолучитьЭлементы(), СписокРаскрытыхЗадач);
	ВременнаяТекущаяПроектнаяЗадача = ТекущаяПроектнаяЗадача;
	ПометитьНаУдалениеПроектныеЗадачи(ВыделенныеСтроки, ПометкаУдаления);
	РаботаСПроектамиКлиент.УстановитьРазвернутостьЭлементовДерева(Элементы.ДеревоЗадач, ДеревоЗадач, СписокРаскрытыхЗадач);		
	
	Если ПоказатьПомеченныеНаУдаление Тогда 
		РаботаСПроектамиКлиент.УстановитьТекущуюЗадачуВДеревеПоСсылке(Элементы.ДеревоЗадач, ДеревоЗадач, ВременнаяТекущаяПроектнаяЗадача);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланНачалоПриИзмененииПродолжение(Результат, Параметры) Экспорт 
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ТекущиеДанные.ТипОграничения 
			= ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.ФиксированноеНачало");
		ТекущиеДанные.ДатаОграничения = Параметры.ТекущийПланНачало;
		ЗаписатьПроектнуюЗадачуИзСтрокиДерева(Элементы.ДеревоЗадач.ТекущаяСтрока);
	Иначе	
		ТекущиеДанные.ТекущийПланНачало = ДатаНачалаДоРедактирования;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПланОкончаниеПриИзмененииПродолжение(Результат, Параметры) Экспорт 
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ТекущиеДанные.ТипОграничения 
			= ПредопределенноеЗначение("Перечисление.ТипыОграниченийПроектныхЗадач.ФиксированноеОкончание");
		ТекущиеДанные.ДатаОграничения = Параметры.ТекущийПланОкончание;
		ЗаписатьПроектнуюЗадачуИзСтрокиДерева(Элементы.ДеревоЗадач.ТекущаяСтрока);
	Иначе	
		ТекущиеДанные.ТекущийПланОкончание = ДатаОкончанияДоРедактирования;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометражПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		ДобавитьВОтчетИОбновитьФорму(Результат, ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Параметры.Объект);
	Иначе
		ОтключитьХронометражСервер();
	КонецЕсли;  

КонецПроцедуры

&НаСервере
Процедура ПоказыватьЗадачиПроцессовНаСервере()
	
	ПоказыватьЗадачиПроцессов = Не ПоказыватьЗадачиПроцессов;
	Элементы.ГруппаЗадачиПроцессов.Видимость = ПоказыватьЗадачиПроцессов;
	Элементы.ДеревоЗадачПоказыватьЗадачиПроцессов.Пометка = ПоказыватьЗадачиПроцессов;
	
	Если ПоказыватьЗадачиПроцессов Тогда
		Элементы.ДеревоЗадач.ИспользованиеТекущейСтроки = ИспользованиеТекущейСтрокиТаблицы.ОтображениеВыделенияИВыбор;
	Иначе
		Элементы.ДеревоЗадач.ИспользованиеТекущейСтроки = ИспользованиеТекущейСтрокиТаблицы.Выбор;
	КонецЕсли;
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции_Хронометраж

&НаСервере
Процедура ПереключитьХронометражСервер(ПараметрыОповещения) Экспорт
	
	Если ТекущаяПроектнаяЗадача = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УчетВремени.ПереключитьХронометражСервер(
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ТекущаяПроектнаяЗадача,
		ВидыРабот,
		Команды.ПереключитьХронометраж,
		Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения) Экспорт
	
	УчетВремени.ДобавитьВОтчетИОбновитьФорму(
	    ПараметрыОтчета, 
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		Команды.ПереключитьХронометраж,
		Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьХронометражСервер() Экспорт
	
	Если ТекущаяПроектнаяЗадача = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УчетВремени.ОтключитьХронометражСервер(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ТекущаяПроектнаяЗадача,
		Команды.ПереключитьХронометраж,
		Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыУчетаВремениВФорме()
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Элементы.ПереключитьХронометраж.Доступность = Ложь;
		Элементы.УказатьТрудозатраты.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	ТекущаяПроектнаяЗадача = ТекущиеДанные.Ссылка;
	
	ПараметрыУчетаВремени = ПолучитьПараметрыУчетаВремени(ТекущиеДанные.Ссылка);
	
	ДатаНачалаХронометража = ПараметрыУчетаВремени.ДатаНачалаХронометража;
	ДатаКонцаХронометража = ПараметрыУчетаВремени.ДатаКонцаХронометража;
	ВключенХронометраж = ПараметрыУчетаВремени.ВключенХронометраж;
	ОпцияИспользоватьУчетВремени = ПараметрыУчетаВремени.ОпцияИспользоватьУчетВремени;
	ВидыРабот = ПараметрыУчетаВремени.ВидыРабот;
	СпособУказанияВремени = ПараметрыУчетаВремени.СпособУказанияВремени;
	
	Для Каждого СвойствоЭлемента Из ПараметрыУчетаВремени.ПереключитьХронометраж Цикл
		Элементы.ПереключитьХронометраж[СвойствоЭлемента.Ключ] = СвойствоЭлемента.Значение;
	КонецЦикла;
	
	Для Каждого СвойствоЭлемента Из ПараметрыУчетаВремени.УказатьТрудозатраты Цикл
		Элементы.УказатьТрудозатраты[СвойствоЭлемента.Ключ] = СвойствоЭлемента.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыУчетаВремени(Документ)
	
	Результат = Новый Структура;
	
	ДатаНачалаХронометража = Неопределено;
	ДатаКонцаХронометража = Неопределено;
	ВключенХронометраж = Неопределено;
	ОпцияИспользоватьУчетВремени = Неопределено;
	ВидыРабот = Неопределено;
	СпособУказанияВремени = Неопределено;
	
	ПереключитьХронометражНеМеняяПодсказку = Новый Структура("Имя, Подсказка");
	
	ПереключитьХронометраж = Новый Структура("Доступность, Пометка, Видимость");
	ПереключитьХронометраж.Доступность = Истина;
	
	УказатьТрудозатраты = Новый Структура("Доступность");
	УказатьТрудозатраты.Доступность = Истина;
	
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияИспользоватьУчетВремени,
		Документ,
		ВидыРабот,
		СпособУказанияВремени,
		ПереключитьХронометражНеМеняяПодсказку,
		ПереключитьХронометраж,
		УказатьТрудозатраты);
		
	Результат.Вставить("ПереключитьХронометраж", Новый Соответствие);
	Результат.Вставить("УказатьТрудозатраты", Новый Соответствие);
	
	Результат.ПереключитьХронометраж.Вставить(
		"Доступность",
		ПереключитьХронометраж.Доступность);
	Результат.ПереключитьХронометраж.Вставить(
		"Пометка",
		ПереключитьХронометраж.Пометка);
	Результат.УказатьТрудозатраты.Вставить(
		"Доступность",
		УказатьТрудозатраты.Доступность);
	
	Результат.Вставить("ДатаНачалаХронометража", ДатаНачалаХронометража);
	Результат.Вставить("ДатаКонцаХронометража", ДатаКонцаХронометража);
	Результат.Вставить("ВключенХронометраж", ВключенХронометраж);
	Результат.Вставить("ОпцияИспользоватьУчетВремени", ОпцияИспользоватьУчетВремени);
	Результат.Вставить("ВидыРабот", ВидыРабот);
	Результат.Вставить("СпособУказанияВремени", СпособУказанияВремени);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_МобильныйКлиент

&НаСервере
Процедура МК_НастроитьЭлементыФормы()
	
	Если ЭтоМобильныйКлиентСБольшимЭкраном Тогда
		
		Элементы.ГруппаЗадачиПроекта.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		Элементы.ГруппаЗадачиПроцессов.Поведение = ПоведениеОбычнойГруппы.Обычное;
		Элементы.ГруппаЗадачиПроцессов.ОтображатьЗаголовок = Ложь;;
		Элементы.ГруппаЗадачиПроцессов.Скрыть();
		
	Иначе
		
		Элементы.ГруппаЗадачиПроекта.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Элементы.ГруппаЗадачиПроцессов.Поведение = ПоведениеОбычнойГруппы.Всплывающая;
		Элементы.ГруппаЗадачиПроцессов.ОтображатьЗаголовок = Истина;
		Элементы.ГруппаЗадачиПроцессов.Скрыть();
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти
