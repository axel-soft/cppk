#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет поставляемые данные.
// 
Процедура ЗаполнитьПоставляемыеДанные() Экспорт
	
	// Руководителя
	ВсеЗадачиОбъект = ВсеЗадачи.ПолучитьОбъект();
	ВсеЗадачиОбъект.Наименование = НСтр("ru = 'Все задачи'");
	ВсеЗадачиОбъект.КлючРеестра = Неопределено;
	ВсеЗадачиОбъект.ТипРеестра = Перечисления.ТипыРеестров.ВсеЗадачи;
	
	ОбновлениеИнформационнойБазыХолдинг.ЗаписатьДанные(ВсеЗадачиОбъект);
	
КонецПроцедуры

// Реестры действия задачи.
// 
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//  КэшДанных - Структура,
//              Неопределено.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.РеестрыЗадач.
// 
Функция РеестрыДействияЗадачи(ДействиеЗадачи, КэшДанных = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеестрыДействияЗадачи = Новый Массив;
	
	КонтекстРасчета = НовыйКонтекстРасчетаДействияЗадачи();
	
	Если КэшДанных <> Неопределено И КэшДанных.Свойство("ДанныеДействияЗадачи") Тогда
		КонтекстРасчета.РеквизитыДействияЗадачи = КэшДанных.ДанныеДействияЗадачи;
	Иначе
		КонтекстРасчета.РеквизитыДействияЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДействиеЗадачи,
			"ПометкаУдаления, Задача, Проведен, СостояниеУчастникаЗадачи, Исполнитель, ОсобыйАвтор");
	КонецЕсли;
	
	ЗадачаИсключенаИзУчета = КонтекстРасчета.РеквизитыДействияЗадачи.ПометкаУдаления
		Или Не КонтекстРасчета.РеквизитыДействияЗадачи.Проведен
		Или Не ЗначениеЗаполнено(КонтекстРасчета.РеквизитыДействияЗадачи.СостояниеУчастникаЗадачи);
	
	Если ЗадачаИсключенаИзУчета Тогда
		Возврат РеестрыДействияЗадачи;
	КонецЕсли;
	
	СформироватьКонтекстРасчетаДействияЗадачи(ДействиеЗадачи, КэшДанных, КонтекстРасчета);
	
	ДобавитьЗадачиМнеДействияЗадачи(КонтекстРасчета);
	ДобавитьЗадачиОтМеняДействияЗадачи(КонтекстРасчета);
	ДобавитьЗадачиПодразделенияДействияЗадачи(КонтекстРасчета);
	ДобавитьЗадачиПодчиненныхДействияЗадачи(КонтекстРасчета);
	ДобавитьЗадачиПроектаДействияЗадачи(КонтекстРасчета);
	ДобавитьЗадачиПоПроектамДействияЗадачи(КонтекстРасчета);
	
	РеестрыДействияЗадачи = РеестрыПоКлючамИТипам(КонтекстРасчета.КлючиРеестровПоТипам);
	РеестрыДействияЗадачи.Добавить(ВсеЗадачи);
	
	Возврат РеестрыДействияЗадачи;
	
КонецФункции

// Реестры задачи.
// 
// Параметры:
//  Задача - ДокументСсылка.Задача.
//  КэшДанных - Структура,
//              Неопределено.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.РеестрыЗадач.
// 
Функция РеестрыЗадачи(Задача, КэшДанных = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеестрыЗадачи = Новый Массив;
	
	КонтекстРасчета = НовыйКонтекстРасчетаРеестровЗадачи();
	
	Если КэшДанных <> Неопределено И КэшДанных.Свойство("ДанныеЗадачи") Тогда
		КонтекстРасчета.РеквизитыЗадачи = КэшДанных.ДанныеЗадачи;
	Иначе
		КонтекстРасчета.РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Задача,
			"ПометкаУдаления, Проведен, Автор, Проект");
	КонецЕсли;
	
	ЗадачаИсключенаИзУчета = КонтекстРасчета.РеквизитыЗадачи.ПометкаУдаления
		Или Не КонтекстРасчета.РеквизитыЗадачи.Проведен;
	
	Если ЗадачаИсключенаИзУчета Тогда
		Возврат РеестрыЗадачи;
	КонецЕсли;
	
	СформироватьКонтекстРасчетаЗадачи(КонтекстРасчета);
	
	ДобавитьЗадачиОтМеняЗадачи(КонтекстРасчета);
	ДобавитьЗадачиПроектаЗадачи(КонтекстРасчета);
	ДобавитьЗадачиПоПроектамЗадачи(КонтекстРасчета);
	
	РеестрыЗадачи = РеестрыПоКлючамИТипам(КонтекстРасчета.КлючиРеестровПоТипам);
	РеестрыЗадачи.Добавить(ВсеЗадачи);
	
	Возврат РеестрыЗадачи;
	
КонецФункции

// Возвращает реестр "Задачи мне".
// 
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи.
// 
// Возвращаемое значение:
//  СправочникСсылка.РеестрыЗадач.
// 
Функция РеестрЗадачиМне(Пользователь) Экспорт
	
	ТипРеестра = Перечисления.ТипыРеестров.ЗадачиМне;
	
	РеестрЗадачиМне = РеестрПоКлючуИТипу(ТипРеестра, Пользователь);
	
	Возврат РеестрЗадачиМне;
	
КонецФункции

// Возвращает реестр "Задачи от меня".
// 
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи.
// 
// Возвращаемое значение:
//  СправочникСсылка.РеестрыЗадач.
// 
Функция РеестрЗадачиОтМеня(Пользователь) Экспорт
	
	ТипРеестра = Перечисления.ТипыРеестров.ЗадачиОтМеня;
	
	РеестрЗадачиОтМеня = РеестрПоКлючуИТипу(ТипРеестра, Пользователь);
	
	Возврат РеестрЗадачиОтМеня;
	
КонецФункции

// Возвращает реестр "Задачи подразделения".
// 
// Параметры:
//  Подразделение - СправочникСсылка.СтруктураПредприятия.
// 
// Возвращаемое значение:
//  СправочникСсылка.РеестрыЗадач.
// 
Функция РеестрЗадачиПодразделения(Подразделение) Экспорт
	
	ТипРеестра = Перечисления.ТипыРеестров.ЗадачиПодразделения;
	
	РеестрЗадачиПодразделения = РеестрПоКлючуИТипу(ТипРеестра, Подразделение);
	
	Возврат РеестрЗадачиПодразделения;
	
КонецФункции

// Возвращает реестр "Задачи подразделения без руководителя".
// 
// Параметры:
//  Подразделение - СправочникСсылка.СтруктураПредприятия.
// 
// Возвращаемое значение:
//  СправочникСсылка.РеестрыЗадач.
// 
Функция РеестрЗадачиПодразделенияБезРуководителя(Подразделение) Экспорт
	
	ТипРеестра = Перечисления.ТипыРеестров.ЗадачиПодразделенияБезРуководителя;
	
	РеестрЗадачиПодразделения = РеестрПоКлючуИТипу(ТипРеестра, Подразделение);
	
	Возврат РеестрЗадачиПодразделения;
	
КонецФункции

// Возвращает реестр "Задачи подчиненных".
// 
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи.
// 
// Возвращаемое значение:
//  СправочникСсылка.РеестрыЗадач.
// 
Функция РеестрЗадачиПодчиненных(Пользователь) Экспорт
	
	ТипРеестра = Перечисления.ТипыРеестров.ЗадачиПодчиненных;
	
	РеестрЗадачиПодчиненных = РеестрПоКлючуИТипу(ТипРеестра, Пользователь);
	
	Возврат РеестрЗадачиПодчиненных;
	
КонецФункции

// Возвращает реестр "Задачи по проектам".
// 
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи.
// 
// Возвращаемое значение:
//  СправочникСсылка.РеестрыЗадач.
// 
Функция РеестрЗадачиПоПроектам(Пользователь) Экспорт
	
	ТипРеестра = Перечисления.ТипыРеестров.ЗадачиПоПроектам;
	
	РеестрЗадачиПоПроектам = РеестрПоКлючуИТипу(ТипРеестра, Пользователь);
	
	Возврат РеестрЗадачиПоПроектам;
	
КонецФункции

// Возвращает реестр "Задачи проекта".
// 
// Параметры:
//  Проект - СправочникСсылка.Проекты.
// 
// Возвращаемое значение:
//  СправочникСсылка.РеестрыЗадач.
// 
Функция РеестрЗадачиПроекта(Проект) Экспорт
	
	ТипРеестра = Перечисления.ТипыРеестров.ЗадачиПроекта;
	
	РеестрЗадачиПроекта = РеестрПоКлючуИТипу(ТипРеестра, Проект);
	
	Возврат РеестрЗадачиПроекта;
	
КонецФункции

// Формирует структура контекста расчета реестров действия задачи.
// 
// Возвращаемое значение:
//  Структура - Новый контекст расчета реестров действия задачи:
//   * КлючиРеестровПоТипам - Соответствие.
//   * ПроектАктивен - Булево.
//   * ПользователиПоСотрудникам - Соответствие.
//   * РуководителиПроекта - Массив.
//   * ВсеЗамещающиеИПомощникиРуководителяПроекта - Массив.
//   * ЗамещающиеИПомощникиРуководителей - Неопределено,
//                                         РаботаСЗадачами.ЗамещающиеИПомощникиПоЗадачам.
//   * ФизЛицаПоРуководителям - Соответствие.
//   * ВсеРуководителиПоИерархии - Массив.
//   * СотрудникиПоФизЛицамРуководителей - Соответствие.
//   * СотрудникиИсполнителя - Массив.
//   * РуководителиПодразделенийПоИерархии - Неопределено,
//                                           СтруктураПредприятия.РуководителиПодразделенийПоИерархии.
//   * РеквизитыСотрудниковИсполнителей - Соответствие.
//   * СотрудникиАвтора - Массив.
//   * ВсеЗамещающиеИПомощникиАвтора - Массив.
//   * ИсполнителиВместо - Массив.
//   * ВсеЗамещающиеИПомощникиИсполнителя - Массив.
//   * РеквизитыДействияЗадачи - Структура.
//   * РеквизитыЗадачи - Структура.
// 
Функция НовыйКонтекстРасчетаДействияЗадачи() Экспорт
	
	КонтекстРасчета = Новый Структура;
	КонтекстРасчета.Вставить("КлючиРеестровПоТипам", Новый Соответствие);
	КонтекстРасчета.Вставить("ПроектАктивен", Ложь);
	КонтекстРасчета.Вставить("ПользователиПоСотрудникам", Новый Соответствие);
	КонтекстРасчета.Вставить("РуководителиПроекта", Новый Массив);
	КонтекстРасчета.Вставить("ВсеЗамещающиеИПомощникиРуководителяПроекта", Новый Массив);
	КонтекстРасчета.Вставить("ЗамещающиеИПомощникиРуководителей", Неопределено);
	КонтекстРасчета.Вставить("ФизЛицаПоРуководителям", Новый Соответствие);
	КонтекстРасчета.Вставить("ВсеРуководителиПоИерархии", Новый Массив);
	КонтекстРасчета.Вставить("СотрудникиПоФизЛицамРуководителей", Новый Соответствие);
	КонтекстРасчета.Вставить("СотрудникиИсполнителя", Новый Массив);
	КонтекстРасчета.Вставить("РуководителиПодразделенийПоИерархии", Неопределено);
	КонтекстРасчета.Вставить("РеквизитыСотрудниковИсполнителей", Новый Соответствие);
	КонтекстРасчета.Вставить("СотрудникиАвтора", Новый Массив);
	КонтекстРасчета.Вставить("ВсеЗамещающиеИПомощникиАвтора", Новый Массив);
	КонтекстРасчета.Вставить("ИсполнителиВместо", Новый Массив);
	КонтекстРасчета.Вставить("ВсеЗамещающиеИПомощникиИсполнителя", Новый Массив);
	КонтекстРасчета.Вставить("ВсеЗамещающиеИПомощникиИсполнителя", Новый Массив);
	
	КонтекстРасчета.Вставить("РеквизитыДействияЗадачи", Новый Структура);
	КонтекстРасчета.РеквизитыДействияЗадачи.Вставить("ПометкаУдаления");
	КонтекстРасчета.РеквизитыДействияЗадачи.Вставить("Задача");
	КонтекстРасчета.РеквизитыДействияЗадачи.Вставить("Проведен");
	КонтекстРасчета.РеквизитыДействияЗадачи.Вставить("СостояниеУчастникаЗадачи");
	КонтекстРасчета.РеквизитыДействияЗадачи.Вставить("Исполнитель");
	КонтекстРасчета.РеквизитыДействияЗадачи.Вставить("ОсобыйАвтор");
	
	КонтекстРасчета.Вставить("РеквизитыЗадачи", Новый Структура);
	КонтекстРасчета.РеквизитыЗадачи.Вставить("Проект");
	КонтекстРасчета.РеквизитыЗадачи.Вставить("Автор");
	
	Возврат КонтекстРасчета;
	
КонецФункции

// Формирует структура контекста расчета реестров задачи.
// 
// Возвращаемое значение:
//  Структура - Контекст расчета реестров задачи:
//   * КлючиРеестровПоТипам - Соответствие.
//   * ПроектАктивен - Булево.
//   * ПользователиПоСотрудникам - Соответствие.
//   * РуководителиПроекта - Массив.
//   * ВсеЗамещающиеИПомощникиРуководителяПроекта - Массив.
//   * СотрудникиАвтора - Массив.
//   * ВсеЗамещающиеИПомощникиАвтора - Массив.
//   * РеквизитыЗадачи - Структура.
// 
Функция НовыйКонтекстРасчетаРеестровЗадачи() Экспорт
	
	КонтекстРасчета = Новый Структура;
	КонтекстРасчета.Вставить("КлючиРеестровПоТипам", Новый Соответствие);
	КонтекстРасчета.Вставить("ПроектАктивен", Ложь);
	КонтекстРасчета.Вставить("ПользователиПоСотрудникам", Новый Соответствие);
	КонтекстРасчета.Вставить("РуководителиПроекта", Новый Массив);
	КонтекстРасчета.Вставить("ВсеЗамещающиеИПомощникиРуководителяПроекта", Новый Массив);
	КонтекстРасчета.Вставить("СотрудникиАвтора", Новый Массив);
	КонтекстРасчета.Вставить("ВсеЗамещающиеИПомощникиАвтора", Новый Массив);
	
	КонтекстРасчета.Вставить("РеквизитыЗадачи", Новый Структура);
	КонтекстРасчета.РеквизитыЗадачи.Вставить("ПометкаУдаления");
	КонтекстРасчета.РеквизитыЗадачи.Вставить("Проведен");
	КонтекстРасчета.РеквизитыЗадачи.Вставить("Автор");
	КонтекстРасчета.РеквизитыЗадачи.Вставить("Проект");
	
	Возврат КонтекстРасчета;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеКэширующихДанных

// Обрабатывает обновление кэширующих данных.
// 
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса - Выборка из очереди обновления кэширующих данных:
//   * ОтметкаВремени - ОпределяемыйТип.ОтметкаВремени.
//   * ЗависимыйОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//   * ВлияющийОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//   * КлючВлияющихДанных - ЛюбаяСсылка.
//   * Автор - СправочникСсылка.Пользователи.
//   * ЗагрузкаОбработанныхДанныхИзДругойСистемы - Булево.
//   * ИзмененияВлияющихДанных - ХранилищеЗначения.
//   * Попыток - Число.
//   * ДатаКОбработке - Дата.
// 
Процедура ОбновитьКэширующиеДанные(Выборка) Экспорт
	
	ОбновитьРеестрыПоКлючуРеестра(Выборка.КлючВлияющихДанных);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает реестр по ключу и типу.
// Если реестра нет, то создаёт его.
// 
// Параметры:
//  ТипРеестра - ПеречислениеСсылка.ТипыРеестров.
//  КлючРеестра - СправочникСсылка.Пользователи, СправочникСсылка.Проекты, Неопределено - Ключ реестра.
// 
// Возвращаемое значение:
//  СправочникСсылка.РеестрыЗадач.
// 
Функция РеестрПоКлючуИТипу(ТипРеестра, КлючРеестра)
	
	КлючиРеестровПоТипам = Новый Соответствие;
	
	ДобавитьКлючРеестра(КлючиРеестровПоТипам, ТипРеестра, КлючРеестра);
	
	РеестрыПоКлючамИТипам = РеестрыПоКлючамИТипам(КлючиРеестровПоТипам);
	
	РеестрЗадачиМне = РеестрыПоКлючамИТипам[0];
	
	Возврат РеестрЗадачиМне;
	
КонецФункции

// Возвращает реестры по ключам и типам.
// Если реестра нет, то создаёт его.
// 
// Параметры:
//  КлючиРеестровПоТипам - Соответствие из КлючИЗначение:
//   * Ключ - ПеречислениеСсылка.ТипыРеестров.
//   * Значение - Массив из СправочникСсылка.Пользователи, СправочникСсылка.Проекты, Неопределено. 
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.РеестрыЗадач.
// 
Функция РеестрыПоКлючамИТипам(КлючиРеестровПоТипам)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РеестрыЗадач.Ссылка,
		|	РеестрыЗадач.ТипРеестра,
		|	РеестрыЗадач.КлючРеестра
		|ИЗ
		|	Справочник.РеестрыЗадач КАК РеестрыЗадач
		|ГДЕ
		|	РеестрыЗадач.КлючРеестра В (&ВсеКлючиРеестров)
		|	И НЕ РеестрыЗадач.ПометкаУдаления");
	
	ВсеКлючиРеестров = Новый Массив;
	Для Каждого КлючРеестраЗадачПоТипу Из КлючиРеестровПоТипам Цикл
		
		КлючиРеестраЗадач = КлючРеестраЗадачПоТипу.Значение;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеКлючиРеестров, КлючиРеестраЗадач);
		
	КонецЦикла;
	
	ВсеКлючиРеестров = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВсеКлючиРеестров);
	
	Запрос.УстановитьПараметр("ВсеКлючиРеестров", ВсеКлючиРеестров);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
	ТаблицаРезультата.Индексы.Добавить("КлючРеестра, ТипРеестра");
	
	ПараметрыОтбора = Новый Структура("КлючРеестра, ТипРеестра");
	
	РеестрыПоКлючамИТипам = Новый Массив;
	
	НеобходимоСоздатьРеестры = Ложь;
	КлючиРеестровПоТипамДляСоздания = Новый Соответствие;
	
	Для Каждого КлючиРеестраПоТипу Из КлючиРеестровПоТипам Цикл
		
		ТипРеестра = КлючиРеестраПоТипу.Ключ;
		КлючиРеестраЗадач = КлючиРеестраПоТипу.Значение;
		
		ПараметрыОтбора.ТипРеестра = ТипРеестра;
		
		Для Каждого КлючРеестра Из КлючиРеестраЗадач Цикл
			
			ПараметрыОтбора.КлючРеестра = КлючРеестра;
			
			НайденныеСтроки = ТаблицаРезультата.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				НайденныйРеестр = НайденныеСтроки[0].Ссылка;
				
				РеестрыПоКлючамИТипам.Добавить(НайденныйРеестр);
				
			Иначе
				
				Если КлючиРеестровПоТипамДляСоздания[ТипРеестра] = Неопределено Тогда
					КлючиРеестровПоТипамДляСоздания[ТипРеестра] = Новый Массив;
				КонецЕсли;
				
				КлючиРеестраДляСоздания =
					КлючиРеестровПоТипамДляСоздания[ТипРеестра];
				КлючиРеестраДляСоздания.Добавить(КлючРеестра);
				
				НеобходимоСоздатьРеестры = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если НеобходимоСоздатьРеестры Тогда
		
		СозданныеРеестрыПоКлючамИТипам =
			СоздатьРеестрыПоКлючамИТипам(КлючиРеестровПоТипамДляСоздания);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			РеестрыПоКлючамИТипам,
			СозданныеРеестрыПоКлючамИТипам);
		
	КонецЕсли;
	
	Возврат РеестрыПоКлючамИТипам;
	
КонецФункции

// Добаляет получателей в ключи реестров по типам.
// 
// Параметры:
//  КлючиРеестровПоТипам - Соответствие из КлючИЗначение - В данный параметр происходит добавление:
//   * Ключ - ПеречислениеСсылка.ТипыРеестров.
//   * Значение - Массив из СправочникСсылка.Пользователи, СправочникСсылка.Проекты, Неопределено. 
//  ТипРеестра - ПеречислениеСсылка.ТипыРеестров.
//  ПолучателиРеестра - Массив из СправочникСсылка.Сотрудники.
//  ОбработанныеКлючи - Соответствие из КлючИЗначение:
//   * Ключ - СправочникСсылка.Пользователи, СправочникСсылка.Проекты - Обработанный ключ.
//   * Значение - Булево.
//  ПользователиПоСотрудникам - Соответствие из КлючИЗначение:
//   * Ключ - СправочникСсылка.Сотрудники.
//   * Значение - Массив из СправочникСсылка.Пользователи.
// 
Процедура ДобавитьПолучателейВКлючиРеестровПоТипам(КлючиРеестровПоТипам, ТипРеестра, ПолучателиРеестра, ОбработанныеКлючи, ПользователиПоСотрудникам)
	
	// Реестры формируются для пользователей, которые их будут смотреть.
	Для Каждого ПолучательРеестра Из ПолучателиРеестра Цикл
		
		ПользователиПоСотруднику = ПользователиПоСотрудникам[ПолучательРеестра];
		
		Для Каждого КлючРеестра Из ПользователиПоСотруднику Цикл
			
			// Если руководитель занимает несколько должностей, по иерархии, замещает или помогает нескольким, 
			// то отображаем только верхнюю по иерархии.
			Если ОбработанныеКлючи[КлючРеестра] <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОбработанныеКлючи[КлючРеестра] = Истина;
			
			ДобавитьКлючРеестра(КлючиРеестровПоТипам, ТипРеестра, КлючРеестра);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет ключ реестра.
// 
// Параметры:
//  КлючиРеестровПоТипам - Соответствие из КлючИЗначение - В данный параметр происходит добавление:
//   * Ключ - ПеречислениеСсылка.ТипыРеестров.
//   * Значение - Массив из СправочникСсылка.Пользователи, СправочникСсылка.Проекты, Неопределено. 
//  ТипРеестра - ПеречислениеСсылка.ТипыРеестров.
//  КлючРеестра - СправочникСсылка.Пользователи, СправочникСсылка.Проекты, Неопределено - Ключ реестра.
// 
Процедура ДобавитьКлючРеестра(КлючиРеестровПоТипам, ТипРеестра, КлючРеестра)
	
	Если КлючиРеестровПоТипам[ТипРеестра] = Неопределено Тогда
		КлючиРеестровПоТипам[ТипРеестра] = Новый Массив;
	КонецЕсли;
	КлючиРеестраЗадач = КлючиРеестровПоТипам[ТипРеестра];
	КлючиРеестраЗадач.Добавить(КлючРеестра);
	
КонецПроцедуры

// Возвращает реестры по ключам и типам, с блокировкой.
// Если реестра нет, то создаёт его.
// 
// Параметры:
//  КлючиРеестровПоТипам - Соответствие из КлючИЗначение:
//   * Ключ - ПеречислениеСсылка.ТипыРеестров.
//   * Значение - Массив из СправочникСсылка.Пользователи, СправочникСсылка.Проекты, Неопределено.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.РеестрыЗадач.
// 
Функция СоздатьРеестрыПоКлючамИТипам(КлючиРеестровПоТипам)
	
	ВсеКлючиРеестров = Новый Массив;
	Для Каждого КлючиРеестраПоТипу Из КлючиРеестровПоТипам Цикл
		
		КлючиРеестра = КлючиРеестраПоТипу.Значение;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеКлючиРеестров, КлючиРеестра);
		
	КонецЦикла;
	
	ВсеКлючиРеестров = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВсеКлючиРеестров);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		Для Каждого КлючиРеестраПоТипу Из КлючиРеестровПоТипам Цикл
			
			ТипРеестра = КлючиРеестраПоТипу.Ключ;
			КлючиРеестра = КлючиРеестраПоТипу.Значение;
			
			Для Каждого КлючРеестра Из КлючиРеестра Цикл
				ЭлементБлокировки = Блокировка.Добавить("Справочник.РеестрыЗадач");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("КлючРеестра", КлючРеестра);
				ЭлементБлокировки.УстановитьЗначение("ТипРеестра", ТипРеестра);
			КонецЦикла;
			
		КонецЦикла;
		
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	РеестрыЗадач.Ссылка,
			|	РеестрыЗадач.ТипРеестра,
			|	РеестрыЗадач.КлючРеестра
			|ИЗ
			|	Справочник.РеестрыЗадач КАК РеестрыЗадач
			|ГДЕ
			|	РеестрыЗадач.КлючРеестра В (&ВсеКлючиРеестров)
			|	И НЕ РеестрыЗадач.ПометкаУдаления");
		
		Запрос.УстановитьПараметр("ВсеКлючиРеестров", ВсеКлючиРеестров);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ТаблицаРезультата = РезультатЗапроса.Выгрузить();
		ТаблицаРезультата.Индексы.Добавить("КлючРеестра, ТипРеестра");
		
		ПараметрыОтбора = Новый Структура("КлючРеестра, ТипРеестра");
		
		РеестрыПоКлючамИТипам = Новый Массив;
		
		Для Каждого КлючиРеестраПоТипу Из КлючиРеестровПоТипам Цикл
			
			ТипРеестра = КлючиРеестраПоТипу.Ключ;
			КлючиРеестра = КлючиРеестраПоТипу.Значение;
			
			ПараметрыОтбора.ТипРеестра = ТипРеестра;
			
			Для Каждого КлючРеестра Из КлючиРеестра Цикл
				
				ПараметрыОтбора.КлючРеестра = КлючРеестра;
				
				НайденныеСтроки = ТаблицаРезультата.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					НайденныйРеестр = НайденныеСтроки[0].Ссылка;
					
					РеестрыПоКлючамИТипам.Добавить(НайденныйРеестр);
					
				Иначе
					
					РеестрЗадачОбъект = СоздатьЭлемент();
					РеестрЗадачОбъект.КлючРеестра = КлючРеестра;
					РеестрЗадачОбъект.ТипРеестра = ТипРеестра;
					РеестрЗадачОбъект.Записать();
					
					РеестрыПоКлючамИТипам.Добавить(РеестрЗадачОбъект.Ссылка);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат РеестрыПоКлючамИТипам;
	
КонецФункции

// Обновляет реестры по ключу реестра.
// 
// Параметры:
//  КлючРеестра - см. Справочник.РеестрыЗадач.КлючРеестра.
//
Процедура ОбновитьРеестрыПоКлючуРеестра(КлючРеестра)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РеестрыЗадач.Ссылка,
		|	РеестрыЗадач.КлючРеестра,
		|	РеестрыЗадач.ТипРеестра
		|ИЗ
		|	Справочник.РеестрыЗадач КАК РеестрыЗадач
		|ГДЕ
		|	РеестрыЗадач.КлючРеестра = &КлючРеестра");
	
	Запрос.УстановитьПараметр("КлючРеестра", КлючРеестра);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.РеестрыЗадач");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
			ЭлементБлокировки.УстановитьЗначение("КлючРеестра", ВыборкаДетальныеЗаписи.КлючРеестра);
			ЭлементБлокировки.УстановитьЗначение("ТипРеестра", ВыборкаДетальныеЗаписи.ТипРеестра);
			Блокировка.Заблокировать();
			
			РеестрЗадачОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			// Обновление реквизита Наименование происходит в процедуре ПередЗаписью.
			РеестрЗадачОбъект.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры


// Добавляет задачи проекта действия задачи.
// 
// Параметры:
//  КонтекстРасчета - См. Справочники.РеестрыЗадач.НовыйКонтекстРасчетаДействияЗадачи.
// 
Процедура ДобавитьЗадачиПроектаДействияЗадачи(КонтекстРасчета)
	
	Если Не ЗначениеЗаполнено(КонтекстРасчета.РеквизитыЗадачи.Проект) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьКлючРеестра(
		КонтекстРасчета.КлючиРеестровПоТипам,
		Перечисления.ТипыРеестров.ЗадачиПроекта,
		КонтекстРасчета.РеквизитыЗадачи.Проект);
	
КонецПроцедуры

// Добавляет задачи по проектам действия задачи.
// 
// Параметры:
//  КонтекстРасчета - См. Справочники.РеестрыЗадач.НовыйКонтекстРасчетаДействияЗадачи.
// 
Процедура ДобавитьЗадачиПоПроектамДействияЗадачи(КонтекстРасчета)
	
	Если Не КонтекстРасчета.ПроектАктивен Тогда
		Возврат;
	КонецЕсли;
	
	ПолучателиРеестра = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ПолучателиРеестра,
		КонтекстРасчета.РуководителиПроекта);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ПолучателиРеестра,
		КонтекстРасчета.ВсеЗамещающиеИПомощникиРуководителяПроекта);
	
	ПолучателиРеестра = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПолучателиРеестра);
	
	ДобавитьПолучателейВКлючиРеестровПоТипам(
		КонтекстРасчета.КлючиРеестровПоТипам,
		Перечисления.ТипыРеестров.ЗадачиПоПроектам,
		ПолучателиРеестра,
		Новый Соответствие,
		КонтекстРасчета.ПользователиПоСотрудникам);
	
КонецПроцедуры

// Добавляет задачи подчиненных действия задачи.
// 
// Параметры:
//  КонтекстРасчета - См. Справочники.РеестрыЗадач.НовыйКонтекстРасчетаДействияЗадачи.
// 
Процедура ДобавитьЗадачиПодчиненныхДействияЗадачи(КонтекстРасчета)
	
	ОбработанныеРуководители = Новый Соответствие;
	
	Для Каждого Руководитель Из КонтекстРасчета.ВсеРуководителиПоИерархии Цикл
		
		// Руководители обходятся по иерархии - от вышестоящего до непосредственного.
		
		// Если руководитель является сам исполнителем - то он, его замещающие и помощники, 
		// не видит эту задачу в форме "Задачи подчиненных".
		ФизЛицоРуководителя = КонтекстРасчета.ФизЛицаПоРуководителям[Руководитель];
		ВсеСотрудникиРуководителя = КонтекстРасчета.СотрудникиПоФизЛицамРуководителей[ФизЛицоРуководителя];
		
		СотрудникиИсполнителяБезСотрудниковРуководителя =
			ОбщегоНазначенияКлиентСервер.РазностьМассивов(
				КонтекстРасчета.СотрудникиИсполнителя,
				ВсеСотрудникиРуководителя);
		
		ЭтоЗадачаРуководителя = СотрудникиИсполнителяБезСотрудниковРуководителя.Количество() = 0;
		Если ЭтоЗадачаРуководителя Тогда
			Продолжить;
		КонецЕсли;
		
		// Замещающие и помощники видят в форме "Задачи подчиненных" те же задачи, что и руководитель.
		ПолучателиРеестра = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Руководитель);
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Сотрудник", Руководитель);
		НайденныеСтроки = КонтекстРасчета.ЗамещающиеИПомощникиРуководителей.НайтиСтроки(ПараметрыОтбора);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ПолучателиРеестра.Добавить(НайденнаяСтрока.Замещающий);
		КонецЦикла;
		
		ДобавитьПолучателейВКлючиРеестровПоТипам(
			КонтекстРасчета.КлючиРеестровПоТипам,
			Перечисления.ТипыРеестров.ЗадачиПодчиненных,
			ПолучателиРеестра,
			ОбработанныеРуководители,
			КонтекстРасчета.ПользователиПоСотрудникам);
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет задачи подразделения действия задачи.
// 
// Параметры:
//  КонтекстРасчета - См. Справочники.РеестрыЗадач.НовыйКонтекстРасчетаДействияЗадачи.
// 
Процедура ДобавитьЗадачиПодразделенияДействияЗадачи(КонтекстРасчета)
	
	ОбработанныеПодразделения = Новый Соответствие;
	
	Для Каждого СотрудникИсполнителя Из КонтекстРасчета.СотрудникиИсполнителя Цикл
		
		РеквизитыСотрудникаИсполнителя = КонтекстРасчета.РеквизитыСотрудниковИсполнителей[СотрудникИсполнителя];
		Если РеквизитыСотрудникаИсполнителя = Неопределено
			Или Не ЗначениеЗаполнено(РеквизитыСотрудникаИсполнителя.Подразделение) Тогда
			Продолжить;
		КонецЕсли;
		
		ПодразделениеЗадачи = РеквизитыСотрудникаИсполнителя.Подразделение;
		
		Если ОбработанныеПодразделения[ПодразделениеЗадачи] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбработанныеПодразделения[ПодразделениеЗадачи] = Истина;
		
		ДобавитьКлючРеестра(
			КонтекстРасчета.КлючиРеестровПоТипам,
			Перечисления.ТипыРеестров.ЗадачиПодразделения,
			ПодразделениеЗадачи);
		
		СтрокаРуководителя =
			КонтекстРасчета.РуководителиПодразделенийПоИерархии.Найти(ПодразделениеЗадачи, "Подразделение");
		Если СтрокаРуководителя = Неопределено
			Или Не ЗначениеЗаполнено(СтрокаРуководителя.Руководитель) Тогда
			Продолжить;
		КонецЕсли;
		
		ФизЛицоРуководителя = КонтекстРасчета.ФизЛицаПоРуководителям[СтрокаРуководителя.Руководитель];
		Если ФизЛицоРуководителя = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВсеСотрудникиРуководителя = КонтекстРасчета.СотрудникиПоФизЛицамРуководителей[ФизЛицоРуководителя];
		Если ВсеСотрудникиРуководителя = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СотрудникиИсполнителяБезСотрудниковРуководителя =
			ОбщегоНазначенияКлиентСервер.РазностьМассивов(
				КонтекстРасчета.СотрудникиИсполнителя,
				ВсеСотрудникиРуководителя);
		
		ЭтоЗадачаРуководителя = СотрудникиИсполнителяБезСотрудниковРуководителя.Количество() = 0;
		Если ЭтоЗадачаРуководителя Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьКлючРеестра(
			КонтекстРасчета.КлючиРеестровПоТипам,
			Перечисления.ТипыРеестров.ЗадачиПодразделенияБезРуководителя,
			ПодразделениеЗадачи);
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет задачи от меня действия задачи.
// 
// Параметры:
//  КонтекстРасчета - См. Справочники.РеестрыЗадач.НовыйКонтекстРасчетаДействияЗадачи.
// 
Процедура ДобавитьЗадачиОтМеняДействияЗадачи(КонтекстРасчета)
	
	ПолучателиРеестра = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ПолучателиРеестра,
		КонтекстРасчета.СотрудникиАвтора);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ПолучателиРеестра,
		КонтекстРасчета.ВсеЗамещающиеИПомощникиАвтора);
	
	ПолучателиРеестра = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПолучателиРеестра);
	
	ДобавитьПолучателейВКлючиРеестровПоТипам(
		КонтекстРасчета.КлючиРеестровПоТипам,
		Перечисления.ТипыРеестров.ЗадачиОтМеня,
		ПолучателиРеестра,
		Новый Соответствие,
		КонтекстРасчета.ПользователиПоСотрудникам);
	
КонецПроцедуры

// Добавляет задачи мне действия задачи.
// 
// Параметры:
//  КонтекстРасчета - См. Справочники.РеестрыЗадач.НовыйКонтекстРасчетаДействияЗадачи.
// 
Процедура ДобавитьЗадачиМнеДействияЗадачи(КонтекстРасчета)
	
	ПолучателиРеестра = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ПолучателиРеестра,
		КонтекстРасчета.СотрудникиИсполнителя);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ПолучателиРеестра,
		КонтекстРасчета.ВсеЗамещающиеИПомощникиИсполнителя);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ПолучателиРеестра,
		КонтекстРасчета.ИсполнителиВместо);
	
	ПолучателиРеестра = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПолучателиРеестра);
	
	ДобавитьПолучателейВКлючиРеестровПоТипам(
		КонтекстРасчета.КлючиРеестровПоТипам,
		Перечисления.ТипыРеестров.ЗадачиМне,
		ПолучателиРеестра,
		Новый Соответствие,
		КонтекстРасчета.ПользователиПоСотрудникам);
	
КонецПроцедуры

// Формирует контекст расчета действия задачи.
// 
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
//  КэшДанных - Структура,
//              Неопределено.
//  КонтекстРасчета - См. Справочники.РеестрыЗадач.НовыйКонтекстРасчетаДействияЗадачи.
// 
Процедура СформироватьКонтекстРасчетаДействияЗадачи(ДействиеЗадачи, КэшДанных, КонтекстРасчета)
	
	Если КэшДанных <> Неопределено И КэшДанных.Свойство("ДанныеЗадачи") Тогда
		КонтекстРасчета.РеквизитыЗадачи = КэшДанных.ДанныеЗадачи;
	Иначе
		КонтекстРасчета.РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			КонтекстРасчета.РеквизитыДействияЗадачи.Задача,
			"Проект, Автор");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонтекстРасчета.РеквизитыЗадачи.Проект) Тогда
		
		РеквизитыПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			КонтекстРасчета.РеквизитыЗадачи.Проект,
			"ПометкаУдаления, Состояние, Руководитель");
		
		КонтекстРасчета.ПроектАктивен = Справочники.Проекты.ПроектАктивен(
			РеквизитыПроекта.Состояние,
			РеквизитыПроекта.ПометкаУдаления);
		
		Если ЗначениеЗаполнено(РеквизитыПроекта.Руководитель) Тогда
			РеквизитыРуководителя =
				ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					РеквизитыПроекта.Руководитель,
					"ПометкаУдаления");
			Если РеквизитыРуководителя.ПометкаУдаления = Ложь Тогда
				КонтекстРасчета.РуководителиПроекта.Добавить(РеквизитыПроекта.Руководитель);
			КонецЕсли;
		КонецЕсли;
		
		ЗамещающиеИПомощникиРуководителейПроекта = РаботаСПроектами.ЗамещающиеИПомощникиПоПроектам(
			КонтекстРасчета.РуководителиПроекта);
		КонтекстРасчета.ВсеЗамещающиеИПомощникиРуководителяПроекта =
			ЗамещающиеИПомощникиРуководителейПроекта.ВыгрузитьКолонку("Замещающий");
		
	КонецЕсли;
	
	КонтекстРасчета.СотрудникиИсполнителя =
		РаботаСЗадачами.СотрудникиУчастника(КонтекстРасчета.РеквизитыДействияЗадачи.Исполнитель);
	
	КонтекстРасчета.ИсполнителиВместо = РегистрыСведений.ИсполнителиВместоНедействительных.ИсполнителиВместо(
		КонтекстРасчета.РеквизитыДействияЗадачи.Исполнитель);
	
	КонтекстРасчета.РеквизитыСотрудниковИсполнителей =
		ОбщегоНазначения.ЗначенияРеквизитовОбъектов(КонтекстРасчета.СотрудникиИсполнителя, "Подразделение");
	
	ПодразделенияСотрудников = Новый Массив;
	
	Для Каждого СотрудникИсполнителя Из КонтекстРасчета.СотрудникиИсполнителя Цикл
		
		РеквизитыСотрудникаИсполнителя = КонтекстРасчета.РеквизитыСотрудниковИсполнителей[СотрудникИсполнителя];
		Если РеквизитыСотрудникаИсполнителя = Неопределено
			Или Не ЗначениеЗаполнено(РеквизитыСотрудникаИсполнителя.Подразделение) Тогда
			Продолжить;
		КонецЕсли;
		
		ПодразделенияСотрудников.Добавить(РеквизитыСотрудникаИсполнителя.Подразделение);
		
	КонецЦикла;
	
	ПодразделенияСотрудников = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПодразделенияСотрудников);
	
	РеквизитыПодразделений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ПодразделенияСотрудников,
		"ПометкаУдаления");
	КоличествоЭлементов = ПодразделенияСотрудников.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ОбратныйИндекс = КоличествоЭлементов - Индекс;
		Подразделение = ПодразделенияСотрудников[ОбратныйИндекс];
		
		РеквизитыПодразделения = РеквизитыПодразделений[Подразделение];
		Если РеквизитыПодразделения.ПометкаУдаления = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		ПодразделенияСотрудников.Удалить(ОбратныйИндекс);
		
	КонецЦикла;
	
	КонтекстРасчета.РуководителиПодразделенийПоИерархии =
		СтруктураПредприятия.РуководителиПодразделенийПоИерархии(ПодразделенияСотрудников);
	КонтекстРасчета.РуководителиПодразделенийПоИерархии.Индексы.Добавить("Подразделение");
	
	Для Каждого СтрокаРуководителя Из КонтекстРасчета.РуководителиПодразделенийПоИерархии Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаРуководителя.Руководитель) Тогда
			Продолжить;
		КонецЕсли;
		
		КонтекстРасчета.ВсеРуководителиПоИерархии.Добавить(СтрокаРуководителя.Руководитель);
		
	КонецЦикла;
	
	КонтекстРасчета.ВсеРуководителиПоИерархии =
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(КонтекстРасчета.ВсеРуководителиПоИерархии);
	
	РеквизитыРуководителей =
		ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			КонтекстРасчета.ВсеРуководителиПоИерархии,
			"ПометкаУдаления");
	КоличествоЭлементов = КонтекстРасчета.ВсеРуководителиПоИерархии.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ОбратныйИндекс = КоличествоЭлементов - Индекс;
		Руководитель = КонтекстРасчета.ВсеРуководителиПоИерархии[ОбратныйИндекс];
		
		РеквизитыРуководителя = РеквизитыРуководителей[Руководитель];
		Если РеквизитыРуководителя.ПометкаУдаления = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		КонтекстРасчета.ВсеРуководителиПоИерархии.Удалить(ОбратныйИндекс);
		
	КонецЦикла;
	
	КонтекстРасчета.ЗамещающиеИПомощникиРуководителей =
		РаботаСЗадачами.ЗамещающиеИПомощникиПоЗадачам(КонтекстРасчета.ВсеРуководителиПоИерархии);
	КонтекстРасчета.ЗамещающиеИПомощникиРуководителей.Индексы.Добавить("Сотрудник");
	ВсеЗамещающиеИПомощникиРуководителя =
		КонтекстРасчета.ЗамещающиеИПомощникиРуководителей.ВыгрузитьКолонку("Замещающий");
	
	ЗамещающиеИПомощникиИсполнителей =
		РегистрыСведений.ВсеИсполнителиДействийЗадач.ЗамещенияПоДействию(ДействиеЗадачи);
	КонтекстРасчета.ВсеЗамещающиеИПомощникиИсполнителя =
		ЗамещающиеИПомощникиИсполнителей.ВыгрузитьКолонку("Замещающий");
	
	КонтекстРасчета.ФизЛицаПоРуководителям = Сотрудники.ФизЛицаПоСотрудникам(КонтекстРасчета.ВсеРуководителиПоИерархии);
	ФизЛицаРуководителей = ОбщегоНазначенияДокументооборотКлиентСервер.ЗначенияСоответствия(
		КонтекстРасчета.ФизЛицаПоРуководителям);
	
	КонтекстРасчета.СотрудникиПоФизЛицамРуководителей = Сотрудники.СотрудникиПоФизЛицам(ФизЛицаРуководителей);
	
	Автор = Документы.ДействиеЗадачи.Автор(
		КонтекстРасчета.РеквизитыДействияЗадачи.ОсобыйАвтор,
		КонтекстРасчета.РеквизитыЗадачи.Автор);
	КонтекстРасчета.СотрудникиАвтора = РаботаСЗадачами.СотрудникиУчастника(Автор);
	ЗамещающиеИПомощникиАвтора = РаботаСЗадачами.ЗамещающиеИПомощникиПоЗадачам(КонтекстРасчета.СотрудникиАвтора);
	КонтекстРасчета.ВсеЗамещающиеИПомощникиАвтора = ЗамещающиеИПомощникиАвтора.ВыгрузитьКолонку("Замещающий");
	
	ВсеВозможныеСотрудникиПользователей = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВсеВозможныеСотрудникиПользователей, КонтекстРасчета.СотрудникиИсполнителя);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВсеВозможныеСотрудникиПользователей, КонтекстРасчета.ВсеЗамещающиеИПомощникиИсполнителя);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВсеВозможныеСотрудникиПользователей, КонтекстРасчета.ИсполнителиВместо);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВсеВозможныеСотрудникиПользователей, КонтекстРасчета.СотрудникиАвтора);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВсеВозможныеСотрудникиПользователей, КонтекстРасчета.ВсеЗамещающиеИПомощникиАвтора);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВсеВозможныеСотрудникиПользователей, КонтекстРасчета.ВсеРуководителиПоИерархии);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВсеВозможныеСотрудникиПользователей, ВсеЗамещающиеИПомощникиРуководителя);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВсеВозможныеСотрудникиПользователей, КонтекстРасчета.РуководителиПроекта);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВсеВозможныеСотрудникиПользователей, КонтекстРасчета.ВсеЗамещающиеИПомощникиРуководителяПроекта);
	
	ВсеВозможныеСотрудникиПользователей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
		ВсеВозможныеСотрудникиПользователей);
	
	КонтекстРасчета.ПользователиПоСотрудникам =
		Сотрудники.ПользователиПоСотрудникам(ВсеВозможныеСотрудникиПользователей);
	
КонецПроцедуры

// Добавляет задачи по проектам действия задачи.
// 
// Параметры:
//  КонтекстРасчета - См. Справочники.РеестрыЗадач.НовыйКонтекстРасчетаРеестровЗадачи.
// 
Процедура ДобавитьЗадачиПоПроектамЗадачи(КонтекстРасчета)
	
	Если Не КонтекстРасчета.ПроектАктивен Тогда
		Возврат;
	КонецЕсли;
	
	ПолучателиРеестра = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ПолучателиРеестра,
		КонтекстРасчета.РуководителиПроекта);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ПолучателиРеестра,
		КонтекстРасчета.ВсеЗамещающиеИПомощникиРуководителяПроекта);
	
	ПолучателиРеестра = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПолучателиРеестра);
	
	ДобавитьПолучателейВКлючиРеестровПоТипам(
		КонтекстРасчета.КлючиРеестровПоТипам,
		Перечисления.ТипыРеестров.ЗадачиПоПроектам,
		ПолучателиРеестра,
		Новый Соответствие,
		КонтекстРасчета.ПользователиПоСотрудникам);
	
КонецПроцедуры

// Добавляет задачи по проектам действия задачи.
// 
// Параметры:
//  КонтекстРасчета - См. Справочники.РеестрыЗадач.НовыйКонтекстРасчетаРеестровЗадачи.
// 
Процедура ДобавитьЗадачиПроектаЗадачи(КонтекстРасчета)
	
	Если Не ЗначениеЗаполнено(КонтекстРасчета.РеквизитыЗадачи.Проект) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьКлючРеестра(
		КонтекстРасчета.КлючиРеестровПоТипам,
		Перечисления.ТипыРеестров.ЗадачиПроекта,
		КонтекстРасчета.РеквизитыЗадачи.Проект);
	
КонецПроцедуры

// Добавляет задачи по проектам действия задачи.
// 
// Параметры:
//  КонтекстРасчета - См. Справочники.РеестрыЗадач.НовыйКонтекстРасчетаРеестровЗадачи.
// 
Процедура ДобавитьЗадачиОтМеняЗадачи(КонтекстРасчета)
	
	ПолучателиРеестра = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ПолучателиРеестра,
		КонтекстРасчета.СотрудникиАвтора);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ПолучателиРеестра,
		КонтекстРасчета.ВсеЗамещающиеИПомощникиАвтора);
	
	ПолучателиРеестра = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПолучателиРеестра);
	
	ДобавитьПолучателейВКлючиРеестровПоТипам(
		КонтекстРасчета.КлючиРеестровПоТипам,
		Перечисления.ТипыРеестров.ЗадачиОтМеня,
		ПолучателиРеестра,
		Новый Соответствие,
		КонтекстРасчета.ПользователиПоСотрудникам);
	
КонецПроцедуры

// Формирует контекст расчета задачи.
// 
// Параметры:
//  КонтекстРасчета - См. Справочники.РеестрыЗадач.НовыйКонтекстРасчетаРеестровЗадачи.
// 
Процедура СформироватьКонтекстРасчетаЗадачи(КонтекстРасчета)
	
	Если ЗначениеЗаполнено(КонтекстРасчета.РеквизитыЗадачи.Проект) Тогда
		
		РеквизитыПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			КонтекстРасчета.РеквизитыЗадачи.Проект,
			"ПометкаУдаления, Состояние, Руководитель");
		
		КонтекстРасчета.ПроектАктивен = Справочники.Проекты.ПроектАктивен(
			РеквизитыПроекта.Состояние,
			РеквизитыПроекта.ПометкаУдаления);
		
		Если ЗначениеЗаполнено(РеквизитыПроекта.Руководитель) Тогда
			РеквизитыРуководителя =
				ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					РеквизитыПроекта.Руководитель,
					"ПометкаУдаления");
			Если РеквизитыРуководителя.ПометкаУдаления = Ложь Тогда
				КонтекстРасчета.РуководителиПроекта.Добавить(РеквизитыПроекта.Руководитель);
			КонецЕсли;
		КонецЕсли;
		
		ЗамещающиеИПомощникиРуководителейПроекта = РаботаСПроектами.ЗамещающиеИПомощникиПоПроектам(
			КонтекстРасчета.РуководителиПроекта);
		КонтекстРасчета.ВсеЗамещающиеИПомощникиРуководителяПроекта =
			ЗамещающиеИПомощникиРуководителейПроекта.ВыгрузитьКолонку("Замещающий");
		
	КонецЕсли;
	
	КонтекстРасчета.СотрудникиАвтора = РаботаСЗадачами.СотрудникиУчастника(КонтекстРасчета.РеквизитыЗадачи.Автор);
	ЗамещающиеИПомощникиАвтора = РаботаСЗадачами.ЗамещающиеИПомощникиПоЗадачам(КонтекстРасчета.СотрудникиАвтора);
	КонтекстРасчета.ВсеЗамещающиеИПомощникиАвтора = ЗамещающиеИПомощникиАвтора.ВыгрузитьКолонку("Замещающий");
	
	ВсеВозможныеСотрудникиПользователей = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВсеВозможныеСотрудникиПользователей, КонтекстРасчета.СотрудникиАвтора);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВсеВозможныеСотрудникиПользователей, КонтекстРасчета.ВсеЗамещающиеИПомощникиАвтора);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВсеВозможныеСотрудникиПользователей, КонтекстРасчета.РуководителиПроекта);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВсеВозможныеСотрудникиПользователей, КонтекстРасчета.ВсеЗамещающиеИПомощникиРуководителяПроекта);
	
	ВсеВозможныеСотрудникиПользователей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(
		ВсеВозможныеСотрудникиПользователей);
	
	КонтекстРасчета.ПользователиПоСотрудникам =
		Сотрудники.ПользователиПоСотрудникам(ВсеВозможныеСотрудникиПользователей);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
