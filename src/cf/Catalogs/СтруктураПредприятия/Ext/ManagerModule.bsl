
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает структуру полей подразделения
//
// Возвращаемое значение:
//   Структура
//     Родитель
//     Наименование
//     Руководитель
//     ГрафикРаботы
//     Комментарий
//
Функция ПолучитьСтруктуруПодразделения() Экспорт
	
	ПараметрыПодразделения = Новый Структура;
	ПараметрыПодразделения.Вставить("Родитель");
	ПараметрыПодразделения.Вставить("Наименование");
	ПараметрыПодразделения.Вставить("Руководитель");
	ПараметрыПодразделения.Вставить("ГрафикРаботы");
	ПараметрыПодразделения.Вставить("Комментарий");
	
	Возврат ПараметрыПодразделения;
	
КонецФункции

// Создает и записывает в БД подразделение
//
// Параметры:
//   СтруктураПодразделения - Структура - структура полей подразделения.
//
// Возвращаемое значение:
//   СправочникСсылка.СтруктураПредприятия
//
Функция СоздатьПодразделение(СтруктураПодразделения) Экспорт
	
	НовоеПодразделение = СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НовоеПодразделение, СтруктураПодразделения);
	НовоеПодразделение.Записать();
	
	Возврат НовоеПодразделение.Ссылка;
	
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

КонецПроцедуры

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
КонецПроцедуры

// Возвращает состав сотрудников, входящих в указанный контейнер.
//
// Параметры:
//   Контейнер - СправочникСсылка.Сотрудники - контейнер сотрудников.
//
// Возвращаемое значение:
//   Массив - массив значений СправочникСсылка.Сотрудники - состав контейнера.
//
Функция СоставКонтейнераСотрудников(Контейнер) Экспорт
	
	Если Не ЗначениеЗаполнено(Контейнер) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контейнер, "ПометкаУдаления") = Истина Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
		|		ПО Сотрудники.Подразделение = ПодчиненностьПодразделений.Подчиненное
		|ГДЕ
		|	ПодчиненностьПодразделений.Вышестоящее = &Контейнер
		|	И НЕ Сотрудники.ПометкаУдаления
		|	И НЕ ПодчиненностьПодразделений.Подчиненное.ПометкаУдаления");
	Запрос.УстановитьПараметр("Контейнер", Контейнер);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
	Возврат Результат;
	
КонецФункции

// Возвращает контейнеры типа СтруктураПредприятия, которым принадлежит указанный сотрудник.
//
// Параметры:
//   Сотрудник - СправочникСсылка.Сотрудники - проверяемый сотрудник.
//
// Возвращаемое значение:
//   Массив - массив значений СправочникСсылка.СтруктураПредприятия -
//   	контейнеры, которым принадлежит сотрудник.
//
Функция КонтейнерыСотрудника(Сотрудник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ПометкаУдаления") = Истина Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодчиненностьПодразделений.Вышестоящее КАК Контейнер 
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
		|		ПО Сотрудники.Подразделение = ПодчиненностьПодразделений.Подчиненное
		|ГДЕ
		|	Сотрудники.Ссылка = &Сотрудник
		|	И НЕ ПодчиненностьПодразделений.Подчиненное.ПометкаУдаления
		|	И НЕ ПодчиненностьПодразделений.Вышестоящее.ПометкаУдаления
		|");
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контейнер");
	
	Возврат Результат;
	
КонецФункции

// Возвращает руководителя для подразделения.
// 
// Если у переданного разделения руководитель не заполнен, то для него является руководителем
// ближайший вверх по иерархии.
// 
// Параметры:
//  Подразделение - СправочникСсылка.СтруктураПредприятия,
//                  СправочникОбъект.СтруктураПредприятия.
// 
// Возвращаемое значение:
//  СправочникСсылка.Сотрудники
//
Функция РуководительПодразделения(Подразделение) Экспорт
	
	Если ТипЗнч(Подразделение) = Тип("СправочникОбъект.СтруктураПредприятия") Тогда
		Если ЗначениеЗаполнено(Подразделение.Руководитель) Тогда
			Возврат Подразделение.Руководитель;
		КонецЕсли;
		ПодразделениеСсылка = Подразделение.Родитель;
	Иначе
		ПодразделениеСсылка = Подразделение;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Справочник.Ссылка КАК Ссылка,
		|	Родитель1.Ссылка КАК Родитель1,
		|	Родитель2.Ссылка КАК Родитель2,
		|	Родитель3.Ссылка КАК Родитель3,
		|	Родитель4.Ссылка КАК Родитель4,
		|	Родитель5.Ссылка КАК Родитель5,
		|	Справочник.Руководитель КАК Руководитель,
		|	Родитель1.Руководитель КАК Руководитель1,
		|	Родитель2.Руководитель КАК Руководитель2,
		|	Родитель3.Руководитель КАК Руководитель3,
		|	Родитель4.Руководитель КАК Руководитель4,
		|	Родитель5.Руководитель КАК Руководитель5
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК Справочник
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК Родитель1
		|		ПО Справочник.Родитель = Родитель1.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК Родитель2
		|		ПО Родитель1.Родитель = Родитель2.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК Родитель3
		|		ПО Родитель2.Родитель = Родитель3.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК Родитель4
		|		ПО Родитель3.Родитель = Родитель4.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК Родитель5
		|		ПО Родитель4.Родитель = Родитель5.Ссылка
		|ГДЕ
		|	Справочник.Ссылка = &Подразделение");
	
	Запрос.УстановитьПараметр("Подразделение", ПодразделениеСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Руководитель = Справочники.Сотрудники.ПустаяСсылка();
	
	Если Не Выборка.Следующий() Тогда
		Возврат Руководитель;
	КонецЕсли;
	
	ИндексПоля = 0;
	СмещениеРуководителя = 6;
	Пока ЗначениеЗаполнено(Выборка[ИндексПоля]) Цикл
		
		Руководитель = Выборка[ИндексПоля + СмещениеРуководителя];
		Если ЗначениеЗаполнено(Руководитель) Тогда
			Прервать;
		КонецЕсли;
		
		Если ИндексПоля = 5 Тогда
			// Если у последнего родителя нет руководителя, то подгружаем еще 5 вышестоящих
			// подразделений с руководителями для обхода.
			Запрос.УстановитьПараметр("Подразделение", Выборка[ИндексПоля]);
			Выборка = Запрос.Выполнить().Выбрать(); //@skip-check query-in-loop
			Если Не Выборка.Следующий() Тогда
				Прервать;
			КонецЕсли;
			ИндексПоля = 0;
		Иначе
			ИндексПоля = ИндексПоля + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Руководитель;
	
КонецФункции

// Возвращает отслеживаемые реквизиты для дополнительного свойства ПредыдущиеЗначенияРеквизитов.
//
// Возвращаемое значение:
//  Строка - Отслеживаемые реквизиты.
//
Функция ОтслеживаемыеРеквизиты() Экспорт
	
	ОтслеживаемыеРеквизиты = 
		"Руководитель, Родитель, ПометкаУдаления, Наименование, Ранг, УказанОсобыйРанг";
	
	Возврат ОтслеживаемыеРеквизиты;
	
КонецФункции

#Область ОбновлениеДанныхКэширующихОбъектов

// Конструктор параметров обновления данных кэширующих объектов.
//
// Возвращаемое значение:
//	Структура:
//	 * ОбъектыДляОбновленияСотрудниковВКонтейнерах - Массив Из СправочникСсылка.СтруктураПредприятия - Список объектов, по которым необходимо обновить данные РС СотрудникиВКонтейнерах.
//	 * ПараметрыОбновленияАдреснойКниги - Структура Из КлючИЗначение - Параметры обновления адресной книги см. ПараметрыОбновленияАдреснойКниги.
//
Функция ПараметрыОбновленияДанныхКэширующихОбъектов() Экспорт
	
	ПараметрыОбновления = Новый Структура;
	ПараметрыОбновления.Вставить("ОбъектыДляОбновленияСотрудниковВКонтейнерах", Новый Массив);
	ПараметрыОбновления.Вставить("ПараметрыОбновленияАдреснойКниги", ПараметрыОбновленияАдреснойКниги());
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Устанавливает значения параметров обновления данных кэширующих объектов по данным объекта.
//
// Параметры:
//	Объект - СправочникОбъект.СтруктураПредприятия - Объект, для которго необходимо определить параметры обновления.
//
// Возвращаемое значение:
//	Структура: см. ПараметрыОбновленияДанныхКэширующихОбъектов.
//
Функция ЗначенияПараметровОбновленияДанныхКэширующихОбъектов(Объект) Экспорт
	
	ПараметрыОбновления = ПараметрыОбновленияДанныхКэширующихОбъектов();
	
	ПредыдущиеЗначенияРеквизитов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Объект.ДополнительныеСвойства, "ПредыдущиеЗначенияРеквизитов");
	
	СсылкаНаОбъект = Объект.Ссылка;
	
	Если Объект.ЭтоНовый() Тогда
		Если Объект.ПолучитьСсылкуНового().Пустая() Тогда // Установим ссылку нового, если ее нет
			СсылкаНаОбъект = ПолучитьСсылку(Новый УникальныйИдентификатор);
			Объект.УстановитьСсылкуНового(СсылкаНаОбъект);
		Иначе // Если ссылку нового уже установили ранее, возьмем ее
			СсылкаНаОбъект = Объект.ПолучитьСсылкуНового();
		КонецЕсли;
	КонецЕсли;
	
	Если ПредыдущиеЗначенияРеквизитов = Неопределено Тогда
		ПредыдущиеЗначенияРеквизитов =
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъект, ОтслеживаемыеРеквизиты());	
	КонецЕсли;
	
	Если ПредыдущиеЗначенияРеквизитов.Руководитель <> Объект.Руководитель
			Или ПредыдущиеЗначенияРеквизитов.Родитель <> Объект.Родитель Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ПодчиненностьПодразделений.Подчиненное КАК Подразделение
			|ИЗ
			|	РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
			|ГДЕ
			|	ПодчиненностьПодразделений.Вышестоящее = &Подразделение");
		Запрос.УстановитьПараметр("Подразделение", СсылкаНаОбъект);
		
		ПодразделенияДляПересчета = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подразделение");
		
		ПодразделенияКонтейнеры = Справочники.ПодразделенияКонтейнеры.НайтиПодразделенияКонтейнеры(
			ПодразделенияДляПересчета, Перечисления.СпособВключенияСотрудниковПодразделения.ТолькоРуководитель);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ПараметрыОбновления.ОбъектыДляОбновленияСотрудниковВКонтейнерах,
			ПодразделенияКонтейнеры);
	КонецЕсли;
	
	Если ПредыдущиеЗначенияРеквизитов.ПометкаУдаления <> Объект.ПометкаУдаления Тогда
		ПараметрыОбновления.ОбъектыДляОбновленияСотрудниковВКонтейнерах.Добавить(СсылкаНаОбъект);
	КонецЕсли;
		
	Если ПредыдущиеЗначенияРеквизитов.Родитель <> Объект.Родитель Тогда
		ПараметрыОбновления.ОбъектыДляОбновленияСотрудниковВКонтейнерах.Добавить(
			Объект.Родитель);
		ПараметрыОбновления.ОбъектыДляОбновленияСотрудниковВКонтейнерах.Добавить(
			ПредыдущиеЗначенияРеквизитов.Родитель);
	КонецЕсли;
		
	ПараметрыОбновления.ПараметрыОбновленияАдреснойКниги = ЗначенияПараметровОбновленияАдреснойКнигиПоОбъекту(Объект); 
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновляет данные зависимых объектов согласно установленным параметрам.
//
// Параметры:
//	Объект - СправочникОбъект.СтруктураПредприятия - Объект, по данным которого необходимо обновить адресной книги.
//	ПараметрыОбновления - Структура Из КлючИЗначение - см. ПараметрыОбновленияДанныхКэширующихОбъектов.
//
Процедура ОбновитьДанныеКэширующихОбъектов(Объект, ПараметрыОбновления) Экспорт
	
	Если ПараметрыОбновления.ОбъектыДляОбновленияСотрудниковВКонтейнерах.Количество() Тогда
		РегистрыСведений.СотрудникиВКонтейнерах.ОбновитьДанныеКонтейнеров(
			ПараметрыОбновления.ОбъектыДляОбновленияСотрудниковВКонтейнерах);
	КонецЕсли;
		
	ОбновитьАдреснуюКнигу(Объект, ПараметрыОбновления.ПараметрыОбновленияАдреснойКниги);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеАдреснойКниги

// Конструктор параметров обновления адресной книги.
//
// Возвращаемое значение:
//	Структура:
//		* ОбновитьДанныеОбъекта - Булево - Признак обновления данных по объекту.
//		* ОбновитьДанныеОтображенияОбъекта - Булево - Признак обновления данных отображения.
//		* ОбновитьСловаПоискаПоОбъекту - Булево - Признак обновления слов поиска по объекту.
//		* ОбновитьДоступностьВПоискеПоОбъекту - Булево - Признак обновления доступности в результатах поиска.
//		* ОбновитьДанныеСотрудниковПодразделения - Булево - Признак обновления в адресной книге данных о сотрудниках, входящих в подразделение.
//
Функция ПараметрыОбновленияАдреснойКниги() Экспорт
	
	ПараметрыОбновленияАдреснойКниги = Новый Структура;
	ПараметрыОбновленияАдреснойКниги.Вставить("ОбновитьДанныеОбъекта", Ложь);
	ПараметрыОбновленияАдреснойКниги.Вставить("ОбновитьДанныеОтображенияОбъекта", Ложь);
	ПараметрыОбновленияАдреснойКниги.Вставить("ОбновитьСловаПоискаПоОбъекту", Ложь);
	ПараметрыОбновленияАдреснойКниги.Вставить("ОбновитьДоступностьВПоискеПоОбъекту", Ложь);
	ПараметрыОбновленияАдреснойКниги.Вставить("ОбновитьДанныеСотрудниковПодразделения", Ложь);
	
	Возврат ПараметрыОбновленияАдреснойКниги;
	
КонецФункции

// Устанавливает значения параметров обновления адресной книги по данным объекта.
//
// Параметры:
//	Объект - СправочникОбъект.СтруктураПредприятия - Объект, для которго необходимо определить параметры обновления.
//
// Возвращаемое значение:
//	Структура: см. ПараметрыОбновленияАдреснойКниги.
//
Функция ЗначенияПараметровОбновленияАдреснойКнигиПоОбъекту(Объект) Экспорт
	
	ПараметрыОбновленияАдреснойКниги = ПараметрыОбновленияАдреснойКниги();
		
	Если Не РаботаСАдреснойКнигой.ТребуетсяОбновлениеАдреснойКниги(Объект) Тогда
		Возврат ПараметрыОбновленияАдреснойКниги; 
	КонецЕсли;

	Если Объект.ЭтоНовый() Тогда
		ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОбъекта = Истина;
		ПараметрыОбновленияАдреснойКниги.ОбновитьСловаПоискаПоОбъекту = Истина;
	Иначе
		ПредыдущиеЗначенияРеквизитов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			Объект.ДополнительныеСвойства, "ПредыдущиеЗначенияРеквизитов");
		
		Если ПредыдущиеЗначенияРеквизитов = Неопределено Тогда
			ПредыдущиеЗначенияРеквизитов =
				ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, ОтслеживаемыеРеквизиты());	
		КонецЕсли; 

		Если ПредыдущиеЗначенияРеквизитов.Родитель <> Объект.Родитель Тогда
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОбъекта = Истина;
		КонецЕсли;
		
		Если ПредыдущиеЗначенияРеквизитов.ПометкаУдаления <> Объект.ПометкаУдаления Тогда
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОбъекта = Истина;
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОтображенияОбъекта = Истина;
			ПараметрыОбновленияАдреснойКниги.ОбновитьДоступностьВПоискеПоОбъекту = Истина;
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеСотрудниковПодразделения = Истина;
		КонецЕсли;
		
		Если ПредыдущиеЗначенияРеквизитов.Наименование <> Объект.Наименование Тогда
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОбъекта = Истина;
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОтображенияОбъекта = Истина;
			ПараметрыОбновленияАдреснойКниги.ОбновитьСловаПоискаПоОбъекту = Истина;
		КонецЕсли;		
	КонецЕсли;
	
	Возврат ПараметрыОбновленияАдреснойКниги;

КонецФункции

// Обновляет адресную книгу, согласно установленным параметрам.
//
// Параметры:
//	Объект - СправочникОбъект.СтруктураПредприятия - Объект, по данным которого необходимо обновить адресной книги.
//	ПараметрыОбновления - Структура Из КлючИЗначение - см. ПараметрыОбновленияАдреснойКниги.
//
Процедура ОбновитьАдреснуюКнигу(Объект, ПараметрыОбновления) Экспорт
	
	Если ПараметрыОбновления.ОбновитьДанныеОбъекта Тогда
		Справочники.АдреснаяКнига.ОбновитьДанныеОбъекта(
			Объект.Ссылка, Объект.Родитель, Справочники.АдреснаяКнига.ПоСтруктуреПредприятия);
	КонецЕсли;
	
	Если ПараметрыОбновления.ОбновитьДанныеОтображенияОбъекта Тогда
		Справочники.АдреснаяКнига.ОбновитьДанныеОтображенияПодчиненногоОбъекта(Объект.Ссылка);
	КонецЕсли;
	
	Если ПараметрыОбновления.ОбновитьСловаПоискаПоОбъекту Тогда
		РегистрыСведений.ОбъектыПоискаВАдреснойКниге.ОбновитьСловаПоискаПоПодразделению(Объект);
	КонецЕсли;
	
	Если ПараметрыОбновления.ОбновитьДоступностьВПоискеПоОбъекту Тогда
		РегистрыСведений.ОбъектыПоискаВАдреснойКниге.ОбновитьДоступностьВПоиске(Объект);
	КонецЕсли;
	
	Если ПараметрыОбновления.ОбновитьДанныеСотрудниковПодразделения Тогда
		СотрудникиПодразделения = Сотрудники.СотрудникиПодразделения(Объект.Ссылка, Ложь);
		Справочники.АдреснаяКнига.РасширитьСписокСотрудниковРолями(СотрудникиПодразделения);
		Справочники.АдреснаяКнига.ОбновитьСписокПодчиненныхОбъектов(
			Объект.Ссылка, Объект.Родитель, СотрудникиПодразделения, Справочники.АдреснаяКнига.ПоСтруктуреПредприятия);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область АдреснаяКнига

// Вернет Истина, у этого модуля менеджера есть функция ПолучитьАдресФото.
// 
// Возвращаемое значение:
//  Булево.
// 
Функция ЕстьФункцияПолученияФото() Экспорт
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеКэширующихДанных

// Обрабатывает обновление кэширующих данных.
// 
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса - Выборка из очереди обновления кэширующих данных:
//   * ОтметкаВремени - ОпределяемыйТип.ОтметкаВремени.
//   * ЗависимыйОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//   * ВлияющийОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//   * КлючВлияющихДанных - ЛюбаяСсылка.
//   * Автор - СправочникСсылка.Пользователи.
//   * ЗагрузкаОбработанныхДанныхИзДругойСистемы - Булево.
//   * ИзмененияВлияющихДанных - ХранилищеЗначения.
//   * Попыток - Число.
//   * ДатаКОбработке - Дата.
// 
Процедура ОбновитьКэширующиеДанные(Выборка) Экспорт
	
	Если ТипЗнч(Выборка.КлючВлияющихДанных) = Тип("СправочникСсылка.ЗамещающиеИПомощники") Тогда
		
		ОбновитьКэширующиеДанныеПоЗамещающимИПомощникам(Выборка);
		
	ИначеЕсли ТипЗнч(Выборка.КлючВлияющихДанных) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		ОбновитьКэширующиеДанныеПоСотруднику(Выборка);
		
	ИначеЕсли ТипЗнч(Выборка.КлючВлияющихДанных) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		ОбновитьКэширующиеДанныеПоПодразделению(Выборка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
    
    МультиязычностьКлиентСервер.ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка);
    
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
    
    МультиязычностьКлиентСервер.ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка);
    
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Текст = Параметры.СтрокаПоиска; 
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 50
	|	Подразделения.Ссылка,
	|	Подразделения.Представление КАК Подразделение
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК Подразделения
	|ГДЕ
	|	Подразделения.ПометкаУдаления = ЛОЖЬ
	|	И Подразделения.Наименование ПОДОБНО &Текст";
	
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	
	ОбъектМетаданных = Метаданные.Справочники.СтруктураПредприятия;
	Если Не МультиязычностьПовтИсп.КонфигурацияИспользуетТолькоОдинЯзык(ОбъектМетаданных.ТабличныеЧасти.Найти("Представления") = Неопределено) Тогда
		
		Если МультиязычностьСервер.ИспользуетсяПервыйДополнительныйЯзык() Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
				"Подразделения.Наименование ПОДОБНО &Текст",
				"(Подразделения.Наименование ПОДОБНО &Текст ИЛИ Подразделения.НаименованиеЯзык1 ПОДОБНО &Текст)");
		КонецЕсли;
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДобавкаТекста = СтрШаблон(НСтр("ru = ' (%1)'"), "Подразделение");
			
		ПредставлениеФорматированнаяСтрока = Новый ФорматированнаяСтрока(
			Выборка.Подразделение, 
			Новый ФорматированнаяСтрока(ДобавкаТекста, 
				, WebЦвета.Серый)
			);
			
		ДанныеВыбора.Добавить(Выборка.Ссылка, ПредставлениеФорматированнаяСтрока);
			
	КонецЦикла;
	
КонецПроцедуры

// Обновить кэширующие данные по замещающему или помощнику.
// 
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса.
// 
Процедура ОбновитьКэширующиеДанныеПоЗамещающимИПомощникам(Выборка)
	
	ЗатронутыеСотрудники = Новый Массив;
	
	ИзмененияВлияющихДанных = Выборка.ИзмененияВлияющихДанных.Получить();
	Если ИзмененияВлияющихДанных <> Неопределено Тогда
		
		ПредыдущиеЗначенияРеквизитов = ИзмененияВлияющихДанных.ПредыдущиеЗначенияРеквизитов;
		НовыеЗначенияРеквизитов = ИзмененияВлияющихДанных.НовыеЗначенияРеквизитов;
		
		Если ЗначениеЗаполнено(НовыеЗначенияРеквизитов.Сотрудник) Тогда
			ЗатронутыеСотрудники.Добавить(НовыеЗначенияРеквизитов.Сотрудник);
		КонецЕсли;
		Если ЗначениеЗаполнено(ПредыдущиеЗначенияРеквизитов.Сотрудник)
			И ПредыдущиеЗначенияРеквизитов.Сотрудник <> НовыеЗначенияРеквизитов.Сотрудник Тогда
			ЗатронутыеСотрудники.Добавить(ПредыдущиеЗначенияРеквизитов.Сотрудник);
		КонецЕсли;
		
		ИзменилсяСотрудник =
			ПредыдущиеЗначенияРеквизитов.Сотрудник <> НовыеЗначенияРеквизитов.Сотрудник;
		
		ИзменилсяЗамещающий =
			ПредыдущиеЗначенияРеквизитов.Замещающий <> НовыеЗначенияРеквизитов.Замещающий;
		
		ИзменилосьДействует =
			ПредыдущиеЗначенияРеквизитов.Действует <> НовыеЗначенияРеквизитов.Действует;
		
		БылиВсеОбласти =
			ПредыдущиеЗначенияРеквизитов.ВопросыЗамещения.Найти(
				Справочники.ОбластиЗамещения.ВсеОбласти, "Область") <> Неопределено;
		БылаОбластьЗадачиПросмотр =
			ПредыдущиеЗначенияРеквизитов.ВопросыЗамещения.Найти(
				Справочники.ОбластиЗамещения.ЗадачиПросмотр, "Область") <> Неопределено;
		БылаОбластьЗадачи =
			ПредыдущиеЗначенияРеквизитов.ВопросыЗамещения.Найти(
				Справочники.ОбластиЗамещения.Задачи, "Область") <> Неопределено;
		ПредыдущееЗначениеЕстьОбласть =
			БылиВсеОбласти Или БылаОбластьЗадачиПросмотр Или БылаОбластьЗадачи;
		
		ЕстьВсеОбласти =
			НовыеЗначенияРеквизитов.ВопросыЗамещения.Найти(
				Справочники.ОбластиЗамещения.ВсеОбласти, "Область") <> Неопределено;
		ЕстьОбластьЗадачиПросмотр =
			НовыеЗначенияРеквизитов.ВопросыЗамещения.Найти(
				Справочники.ОбластиЗамещения.ЗадачиПросмотр, "Область") <> Неопределено;
		ЕстьОбластьЗадачи =
			НовыеЗначенияРеквизитов.ВопросыЗамещения.Найти(
				Справочники.ОбластиЗамещения.Задачи, "Область") <> Неопределено;
		НовоеЗначениеЕстьОбласть =
			ЕстьВсеОбласти Или ЕстьОбластьЗадачиПросмотр Или ЕстьОбластьЗадачи;
			
		ИзмениласьОбласть =
			ПредыдущееЗначениеЕстьОбласть <> НовоеЗначениеЕстьОбласть;
		
		ЕстьИзменения = 
			ИзменилосьДействует
			Или (НовыеЗначенияРеквизитов.Действует
				И (ИзменилсяСотрудник Или ИзменилсяЗамещающий Или ИзмениласьОбласть));
		
		Если Не ЕстьИзменения Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		
		ЗамещающийИлиПомощник = Выборка.КлючВлияющихДанных; // СправочникСсылка.ЗамещающиеИПомощники
		
		ЗатронутыйСотрудник =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗамещающийИлиПомощник, "Сотрудник");
		Если ЗначениеЗаполнено(ЗатронутыйСотрудник) Тогда
			ЗатронутыеСотрудники.Добавить(ЗатронутыйСотрудник);
		КонецЕсли;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СтруктураПредприятия.Ссылка
			|ИЗ
			|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
			|ГДЕ
			|	СтруктураПредприятия.Руководитель В (&ЗатронутыеСотрудники)");
		
		Запрос.УстановитьПараметр("ЗатронутыеСотрудники", ЗатронутыеСотрудники);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ТаблицаРезультата = РезультатЗапроса.Выгрузить();
		
		ЗатронутыеПоразделения = ТаблицаРезультата.ВыгрузитьКолонку("Ссылка");
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СтруктураПредприятия.Ссылка
			|ИЗ
			|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
			|ГДЕ
			|	СтруктураПредприятия.Ссылка В ИЕРАРХИИ (&ЗатронутыеПоразделения)");
		
		Запрос.УстановитьПараметр("ЗатронутыеПоразделения", ЗатронутыеПоразделения);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
				"Документ.ДействиеЗадачи",
				"Справочник.СтруктураПредприятия",
				ВыборкаДетальныеЗаписи.Ссылка);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

// Обновить кэширующие данные по сотруднику.
// 
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса.
// 
Процедура ОбновитьКэширующиеДанныеПоСотруднику(Выборка)
	
	Сотрудник = Выборка.КлючВлияющихДанных; // СправочникСсылка.Сотрудники
	
	НачатьТранзакцию();
	Попытка
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СтруктураПредприятия.Ссылка
			|ИЗ
			|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
			|ГДЕ
			|	СтруктураПредприятия.Руководитель = &Сотрудник");
		
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ТаблицаРезультата = РезультатЗапроса.Выгрузить();
		
		ЗатронутыеПоразделения = ТаблицаРезультата.ВыгрузитьКолонку("Ссылка");
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СтруктураПредприятия.Ссылка
			|ИЗ
			|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
			|ГДЕ
			|	СтруктураПредприятия.Ссылка В ИЕРАРХИИ (&ЗатронутыеПоразделения)");
		
		Запрос.УстановитьПараметр("ЗатронутыеПоразделения", ЗатронутыеПоразделения);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
				"Документ.ДействиеЗадачи",
				"Справочник.СтруктураПредприятия",
				ВыборкаДетальныеЗаписи.Ссылка);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

// Обновить кэширующие данные по подразделению.
// 
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса.
// 
Процедура ОбновитьКэширующиеДанныеПоПодразделению(Выборка)
	
	Подразделение = Выборка.КлючВлияющихДанных; // СправочникСсылка.СтруктураПредприятия
	
	ЗатронутыеПоразделения = Новый Массив;
	ЗатронутыеПоразделения.Добавить(Подразделение);
	
	НачатьТранзакцию();
	Попытка
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	СтруктураПредприятия.Ссылка
			|ИЗ
			|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
			|ГДЕ
			|	СтруктураПредприятия.Ссылка В ИЕРАРХИИ (&ЗатронутыеПоразделения)");
		
		Запрос.УстановитьПараметр("ЗатронутыеПоразделения", ЗатронутыеПоразделения);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
				"Документ.ДействиеЗадачи",
				"Справочник.СтруктураПредприятия",
				ВыборкаДетальныеЗаписи.Ссылка);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Составляет список подчиненных подразделений, которым нужно обновить ранг, и вызывает рекурсивное обновление ранга
// Вызывается из модуля объекта СтруктураПредприятия при записи, если изменился ранг
// Параметры:
//  Подразделение - СправочникСсылка.СтруктураПредприятия - Подразделение, у которого изменен ранг
Процедура ОбновитьРангиНижестоящихПодразделений(Подразделение) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтруктураПредприятия.Родитель КАК Родитель,
	               |	СтруктураПредприятия.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	               |ГДЕ
	               |	НЕ СтруктураПредприятия.УказанОсобыйРанг
	               |	И СтруктураПредприятия.Родитель В ИЕРАРХИИ(&Подразделение)";
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	// Рекурсивный обход по родителю подчиненных подразделений, чтобы обойтись одним запросом
	УстановитьРангНепосредственнымПодчиненным(Подразделение, РезультатЗапроса);

КонецПроцедуры

// Рекурсивно устанавливает ранг подразделениям, подчиненным переданному.
// Параметры:
//  Подразделение			  - СправочникСсылка.СтруктураПредприятия - Родительское подразделение
//  ПодразделенияДляОбработки - ТаблицаЗначений - Таблица с подразделениями и родителями 
//													из процедуры ОбновитьРангиНижестоящихПодразделений
Процедура УстановитьРангНепосредственнымПодчиненным(Подразделение, ПодразделенияДляОбработки)
	
	ОтборТекущего = Новый Структура("Родитель", Подразделение);
	ПодчиненныеТекущему = ПодразделенияДляОбработки.НайтиСтроки(ОтборТекущего);
	
	Для Каждого Строка Из ПодчиненныеТекущему Цикл
		ПодразделениеОбъект = Строка.Ссылка.ПолучитьОбъект();
		ПодразделениеОбъект.ДополнительныеСвойства.Вставить("НеОбновлятьРангиНижестоящих", Истина);
		ПодразделениеОбъект.Ранг = Подразделение.Ранг+1;
		ПодразделениеОбъект.Записать();
		УстановитьРангНепосредственнымПодчиненным(Строка.Ссылка, ПодразделенияДляОбработки);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецЕсли