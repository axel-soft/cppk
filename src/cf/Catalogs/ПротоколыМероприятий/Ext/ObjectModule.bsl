#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Обновляет реквизит ПредставлениеИсполнителей.
//
Процедура ОбновитьПредставлениеИсполнителей() Экспорт
	
	МассивПредставлениеИсполнителей = Новый Массив;
	Для Каждого СтрокаИсполнителя Из Исполнители Цикл
		ПредставлениеИсполнителя =
			РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(СтрокаИсполнителя.Исполнитель);
		МассивПредставлениеИсполнителей.Добавить(ПредставлениеИсполнителя);
	КонецЦикла;
	
	НовоеПредставлениеИсполнителей = СтрСоединить(МассивПредставлениеИсполнителей, ", ");
	
	НовоеПредставлениеИсполнителей =
		РаботаСоСтроками.Сократить(НовоеПредставлениеИсполнителей, 1024);
	Если НовоеПредставлениеИсполнителей = ПредставлениеИсполнителей Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеИсполнителей = НовоеПредставлениеИсполнителей;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	СостояниеИсполнения = Перечисления.СостоянияПротоколовМероприятий.ТребуетсяИсполнение;
	СостояниеИсполненияУстановил = Сотрудники.ОсновнойСотрудник();
	
	Если Не ЗначениеЗаполнено(Проверяющий) Тогда
		Проверяющий = Справочники.Сотрудники.ПустаяСсылка();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контролер) Тогда
		Контролер = Справочники.Сотрудники.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Проверим уникальность номера протокола, для удобства ввода.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПротоколыМероприятий.Ссылка
		|ИЗ
		|	Справочник.ПротоколыМероприятий КАК ПротоколыМероприятий
		|ГДЕ
		|	ПротоколыМероприятий.Владелец = &Владелец
		|	И ПротоколыМероприятий.НомерПунктаПротокола = &НомерПунктаПротокола
		|	И ПротоколыМероприятий.Ссылка <> &Ссылка
		|	И Не ПротоколыМероприятий.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("НомерПунктаПротокола", НомерПунктаПротокола);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	НомерУникален = РезультатЗапроса.Пустой();
	
	Если Не НомерУникален Тогда
		ТекстОшибки = НСтр("ru = 'Номер не уникален.'");
		ОбщегоНазначения.СообщитьПользователю(
			ТекстОшибки, ЭтотОбъект, "НомерПунктаПротокола", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСеанса.ЗагрузкаОбработанныхДанныхИзДругойСистемы Тогда
		Возврат;
	КонецЕсли;
	
	Наименование = Решили;
	СтарыеРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "СостояниеИсполнения, НомерПунктаПрограммы");
	ДополнительныеСвойства.Вставить("СтарыеРеквизиты", СтарыеРеквизиты);
	
	ОбновитьПредставлениеИсполнителей();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСеанса.ЗагрузкаОбработанныхДанныхИзДругойСистемы Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.СтарыеРеквизиты.НомерПунктаПрограммы <> НомерПунктаПрограммы Тогда
		ПриИзмененииНомераПунктаПрограммы();
	КонецЕсли;
	
	Если ДополнительныеСвойства.СтарыеРеквизиты.СостояниеИсполнения <> СостояниеИсполнения Тогда
		ПриИзмененииСостоянияИсполнения();
	КонецЕсли;
	
	ПроверитьИзменениеСостоянияМероприятия();
	
	// Рабочая группа мероприятия.
	Если Не ДополнительныеСвойства.Свойство("ПропуститьРасширениеРабочейГруппыМероприятия")
		Или Не ДополнительныеСвойства.ПропуститьРасширениеРабочейГруппыМероприятия Тогда
		ТаблицаНабора = РаботаСРабочимиГруппами.ПолучитьРабочуюГруппуДокумента(Владелец);
		КолСтрокДоДобавления = ТаблицаНабора.Количество();
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Контролер, Ложь);
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Ответственный, Ложь);
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Проверяющий, Ложь);
		Если ТаблицаНабора.Количество() > КолСтрокДоДобавления Тогда
			РаботаСРабочимиГруппами.ПерезаписатьРабочуюГруппуОбъекта(Владелец, ТаблицаНабора, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	СостояниеИсполнения = Перечисления.СостоянияПротоколовМероприятий.ТребуетсяИсполнение;
	СостояниеИсполненияУстановил = 
		Сотрудники.ОсновнойСотрудник();
	Исполнение = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Корректирует протокол мероприятия при изменении номер пункта программы.
//
Процедура ПриИзмененииНомераПунктаПрограммы()
	
	// Помеченные на удаление пункты протокола не отражаем в протоколе мероприятия.
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Мероприятие = Владелец.ПолучитьОбъект();
	Мероприятие.Заблокировать();
	
	// Находим строку в протоколе мероприятия. Если ее нет - добавляем.
	СтрокаЭтогоПунктаПротокола = Мероприятие.Протокол.Найти(Ссылка, "ПунктПротокола");
	Если СтрокаЭтогоПунктаПротокола = Неопределено Тогда
		
		ОписаниеЧисла = Новый ОписаниеТипов("Число");
		
		РазделенныйНомерПункта = СтрРазделить(НомерПунктаПротокола, ".");
		Если РазделенныйНомерПункта.Количество() >= 1 Тогда
			АвтоНомерПункта = ОписаниеЧисла.ПривестиЗначение(РазделенныйНомерПункта[0]);
		Иначе
			АвтоНомерПункта = 0;
		КонецЕсли;
		Если РазделенныйНомерПункта.Количество() >= 2 Тогда
			АвтоНомерПодпункта = ОписаниеЧисла.ПривестиЗначение(РазделенныйНомерПункта[1]);
		Иначе
			АвтоНомерПодпункта = 0;
		КонецЕсли;
		
		Если АвтоНомерПункта = 0 Тогда
			
			ИндексВставки = Мероприятие.Протокол.Количество();
			
		Иначе
			
			ПунктыПротокола = Мероприятие.Протокол.ВыгрузитьКолонку("ПунктПротокола");
			РеквизитыПунктовПротокола =
				ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
					ПунктыПротокола,
					"НомерПунктаПротокола");
			
			ИндексВставки = 0;
			Для Каждого СтрокаПротокола Из Мероприятие.Протокол Цикл
				
				РеквизитыПунктаПротокола =
					РеквизитыПунктовПротокола[СтрокаПротокола.ПунктПротокола];
				
				РазделенныйНомерПункта =
					СтрРазделить(РеквизитыПунктаПротокола.НомерПунктаПротокола, ".");
				Если РазделенныйНомерПункта.Количество() >= 1 Тогда
					НомерПунктаСтроки = ОписаниеЧисла.ПривестиЗначение(РазделенныйНомерПункта[0]);
				Иначе
					НомерПунктаСтроки = 0;
				КонецЕсли;
				Если РазделенныйНомерПункта.Количество() >= 2 Тогда
					НомерПодпунктаСтроки =
						ОписаниеЧисла.ПривестиЗначение(РазделенныйНомерПункта[1]);
				Иначе
					НомерПодпунктаСтроки = 0;
				КонецЕсли;
				
				Если НомерПунктаСтроки = 0 Тогда
					ИндексВставки = Мероприятие.Протокол.Количество();
					Прервать;
				КонецЕсли;
				
				Если АвтоНомерПункта > НомерПунктаСтроки Тогда
					
					// Наш пункт ещё впереди.
					ИндексВставки = ИндексВставки + 1;
					Продолжить;
					
				ИначеЕсли АвтоНомерПункта = НомерПунктаСтроки
					И АвтоНомерПодпункта >= НомерПодпунктаСтроки Тогда
					
					// Это наш пункт, наш подпункт ещё впередит.
					ИндексВставки = ИндексВставки + 1;
					Продолжить;
					
				Иначе
					
					// Наш пункт уже прошёл.
					Прервать;
					
				КонецЕсли;
				
				ИндексВставки = ИндексВставки + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		СтрокаЭтогоПунктаПротокола = Мероприятие.Протокол.Вставить(ИндексВставки);
		
		
	КонецЕсли;
	СтрокаЭтогоПунктаПротокола.НомерПунктаПрограммы = НомерПунктаПрограммы;
	СтрокаЭтогоПунктаПротокола.ПунктПротокола = Ссылка;
	
	Мероприятие.Записать();
	
КонецПроцедуры

// Отмечает изменение состояния пункта протокола в истории.
//
Процедура ПриИзмененииСостоянияИсполнения()
	
	РегистрыСведений.ИсторияСостоянийПротоколовМероприятий.ДобавитьЗапись(
		ТекущаяДата(),
		Ссылка,
		СостояниеИсполнения,
		СостояниеИсполненияУстановил,
		Владелец);
	
КонецПроцедуры

// Проверяет изменение состояние мероприятия.
//
Процедура ПроверитьИзменениеСостоянияМероприятия()
	
	Если ДополнительныеСвойства.СтарыеРеквизиты.СостояниеИсполнения = СостояниеИсполнения Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СостояниеИсполненияУстановил) <> Тип("БизнесПроцессСсылка.Исполнение") Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеМероприятия = РассчитатьСостояниеИсполненияПротоколаМероприятия(Владелец);
	Если СостояниеМероприятия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтароеСостояниеМероприятия = УправлениеМероприятиями.ПолучитьСостояниеМероприятия(Владелец, "СостояниеПротокола");
	Если СтароеСостояниеМероприятия <> СостояниеМероприятия Тогда
		УправлениеМероприятиями.ЗаписатьСостояниеМероприятия(Владелец, ТекущаяДата(), СостояниеМероприятия, СостояниеИсполненияУстановил);
	КонецЕсли;
	
КонецПроцедуры

// Рассчитывает состояние исполнения протокола мероприятия по состоянию пунктов протокола.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СостоянияМероприятий - Рассчитанное состояние исполнения протокола.
//
Функция РассчитатьСостояниеИсполненияПротоколаМероприятия(Мероприятие)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПротоколыМероприятий.СостояниеИсполнения
		|ИЗ
		|	Справочник.Мероприятия.Протокол КАК МероприятияПротокол
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПротоколыМероприятий КАК ПротоколыМероприятий
		|		ПО МероприятияПротокол.ПунктПротокола = ПротоколыМероприятий.Ссылка
		|ГДЕ
		|	ПротоколыМероприятий.ПометкаУдаления = ЛОЖЬ
		|	И МероприятияПротокол.Ссылка = &Мероприятие";
	
	Запрос.УстановитьПараметр("Мероприятие", Мероприятие);
	
	Выборка = Запрос.Выполнить().Выбрать();
	ЕстьИсполнен = Ложь;
	ЕстьНаИсполнении = Ложь;
	ЕстьТребуетсяИсполнение = Ложь;
	Пока Выборка.Следующий() Цикл
		Если Выборка.СостояниеИсполнения = Перечисления.СостоянияПротоколовМероприятий.Исполнен Тогда
			ЕстьИсполнен = Истина;
		ИначеЕсли Выборка.СостояниеИсполнения = Перечисления.СостоянияПротоколовМероприятий.НаИсполнении Тогда
			ЕстьНаИсполнении = Истина;
		ИначеЕсли Выборка.СостояниеИсполнения = Перечисления.СостоянияПротоколовМероприятий.ТребуетсяИсполнение Тогда
			ЕстьТребуетсяИсполнение = Истина;
		КонецЕсли;
	КонецЦикла;
	
	СостояниеИсполненияПротоколаМероприятия = Неопределено;
	Если ЕстьИсполнен И Не ЕстьНаИсполнении И Не ЕстьТребуетсяИсполнение Тогда
		СостояниеИсполненияПротоколаМероприятия = Перечисления.СостоянияМероприятий.ПротоколИсполнен;
	ИначеЕсли ЕстьНаИсполнении Тогда
		СостояниеИсполненияПротоколаМероприятия = Перечисления.СостоянияМероприятий.ПротоколНаИсполнении;
	ИначеЕсли ЕстьИсполнен И ЕстьТребуетсяИсполнение Тогда
		СостояниеИсполненияПротоколаМероприятия = Перечисления.СостоянияМероприятий.ПротоколНаИсполнении;
	КонецЕсли;
	
	Возврат СостояниеИсполненияПротоколаМероприятия;
	
КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли