#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПредыдущееСостояниеИсполнения = Объект.СостояниеИсполнения;
	
	// Чтение данных мероприятия для доступа к информации о программе и протоколу.
	ЗначениеВРеквизитФормы(Объект.Владелец.ПолучитьОбъект(), "Мероприятие");
	Элементы.Владелец.Заголовок = Строка(Мероприятие.ВидМероприятия);
	
	УправлениеМероприятиями.ВывестиПротоколМероприятия(Мероприятие.Протокол);
	ТекущийНомерПунктаПрограммы = Объект.НомерПунктаПрограммы;
	
	// Заполнение списка выбора номера пункта программы.
	УправлениеМероприятиями.ЗаполнитьСписокВыбораНомераПунктаПрограммы(
		Элементы.НомерПунктаПрограммы.СписокВыбора,
		Мероприятие.Программа);
	
	// Заполнение нового пункта протокола.
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
		Если ЗначениеЗаполнено(Объект.НомерПунктаПротокола) Тогда
			
			РазделенныйНомерПункта = СтрРазделить(Объект.НомерПунктаПротокола, ".");
			
			Если РазделенныйНомерПункта.Количество() >= 1 Тогда
				
				ПерваяЧастьНомера = РазделенныйНомерПункта[0];
				
				ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
				ИзвлеченныйНомерПрограммы = ОписаниеТипаЧисло.ПривестиЗначение(ПерваяЧастьНомера);
				
				Если ИзвлеченныйНомерПрограммы <= Мероприятие.Программа.Количество() Тогда
					Объект.НомерПунктаПрограммы = ИзвлеченныйНомерПрограммы;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			// Заполнение номера программы для нового объекта.
			МаксимальныйПунктПротокола = 0;
			Для Каждого Строка Из Мероприятие.Протокол Цикл
				Если Строка.НомерПунктаПрограммы > МаксимальныйПунктПротокола Тогда 
					МаксимальныйПунктПротокола = Строка.НомерПунктаПрограммы;
				КонецЕсли;
			КонецЦикла;
			Если МаксимальныйПунктПротокола < Мероприятие.Программа.Количество() Тогда
				
				Объект.НомерПунктаПрограммы = МаксимальныйПунктПротокола + 1;
				
				Объект.НомерПунктаПротокола =
					УправлениеМероприятиямиКлиентСервер.ПолучитьНомерПунктаПротокола(
						Объект,
						Мероприятие.Протокол);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Заполнение слушали для нового объекта.
		УправлениеМероприятиямиКлиентСервер.ЗаполнитьСлушалиПунктаПротокола(
			Объект, Мероприятие.Программа);
		
		// Корректируем срок. 
		Если ЗначениеЗаполнено(Объект.СрокИсполненияПроцесса)
			И Объект.СрокИсполненияПроцесса = НачалоДня(Объект.СрокИсполненияПроцесса) Тогда
			Объект.СрокИсполненияПроцесса = КонецДня(Объект.СрокИсполненияПроцесса);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.НомерПунктаПротокола) Тогда
		
		МаксимальныйНомерПротокола = 0;
		ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
		Протокол = УправлениеМероприятиями.ПолучитьПротоколМероприятия(Мероприятие.Ссылка);
		Для Каждого СтрокаПротокола Из Протокол Цикл
			
			РазделенныйНомерПункта = СтрРазделить(СтрокаПротокола.НомерПунктаПротокола, ".");
			Если РазделенныйНомерПункта.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ПерваяЧастьНомера = РазделенныйНомерПункта[0];
			ИзвлеченныйНомерПротокола = ОписаниеТипаЧисло.ПривестиЗначение(ПерваяЧастьНомера);
			
			МаксимальныйНомерПротокола = Макс(
				МаксимальныйНомерПротокола,
				ИзвлеченныйНомерПротокола);
			
		КонецЦикла;
		
		Объект.НомерПунктаПротокола = Строка(МаксимальныйНомерПротокола + 1);
		
	КонецЕсли;
	
	// Установка заголовка.
	Заголовок = УправлениеМероприятиямиКлиентСервер.СформироватьЗаголовокПунктаПротокола(
		Объект,
		Мероприятие.Протокол);
	
	// Отображение помеченных на удаление пунктов протокола.
	Если Объект.ПометкаУдаления Тогда
		
		КлючСохраненияПоложенияОкна = "УдаленныйПунктПротокола";
		Элементы.ГруппаУдален.Видимость = Истина;
		
		УстановитьРежимПросмотра();
		
	КонецЕсли;
	
	Если МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(Объект.ИсточникДанных) Тогда
		УстановитьРежимПросмотра();
	КонецЕсли;
	
	// Доступность по состояния.
	УстановитьДоступностьПоСостоянию();
	УстановитьВидимостьИсторииСостояний();
	
	Элементы.СрокВремя.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Элементы.ДатаИсполнения.Формат = РаботаСЗадачами.ФорматСрокаПолный();
	Элементы.ДатаИсполнения.ФорматРедактирования = РаботаСЗадачами.ФорматСрокаПолный();
	
	Если Не ЗначениеЗаполнено(Объект.НомерПунктаПротокола) Тогда
		Элементы.НомерПунктаПротокола.АктивизироватьПоУмолчанию = Истина;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПредыдущееСостояниеИсполнения = Объект.СостояниеИсполнения;
	
	// Чтение данных мероприятия для доступа к информации о программе и протоколу.
	ЗначениеВРеквизитФормы(Объект.Владелец.ПолучитьОбъект(), "Мероприятие");
	УправлениеМероприятиями.ВывестиПротоколМероприятия(Мероприятие.Протокол);
	ТекущийНомерПунктаПрограммы = Объект.НомерПунктаПрограммы;
	
	// Заполнение списка выбора номера пункта программы.
	УправлениеМероприятиями.ЗаполнитьСписокВыбораНомераПунктаПрограммы(
		Элементы.НомерПунктаПрограммы.СписокВыбора,
		Мероприятие.Программа);
	
	// Установка заголовка.
	Заголовок = УправлениеМероприятиямиКлиентСервер.СформироватьЗаголовокПунктаПротокола(
		Объект,
		Мероприятие.Протокол);
	
	// Отображение помеченных на удаление пунктов протокола.
	Если Объект.ПометкаУдаления Тогда
		
		КлючСохраненияПоложенияОкна = "УдаленныйПунктПротокола";
		Элементы.ГруппаУдален.Видимость = Истина;
		
		УстановитьРежимПросмотра();
		
	КонецЕсли;
	
	// Доступность по состояния.
	УстановитьДоступностьПоСостоянию();
	УстановитьВидимостьИсторииСостояний();
	УстановитьПредупреждениеРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(
		Объект.Исполнители,
		"Исполнитель");
	ОбщегоНазначенияДокументооборотКлиент.УдалитьДублиСтрокТаблицы(
		Объект.Исполнители,
		"Исполнитель");
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПредыдущееСостояниеИсполнения <> ТекущийОбъект.СостояниеИсполнения Тогда
		ТекущийОбъект.СостояниеИсполненияУстановил = Сотрудники.ОсновнойСотрудник();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПредыдущееСостояниеИсполнения = ТекущийОбъект.СостояниеИсполнения;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	УправлениеМероприятиямиКлиент.ОповеститьОЗаписиПунктаПротокола(Объект.Владелец, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НомерПунктаПрограммыПриИзменении(Элемент)
	
	Объект.НомерПунктаПротокола = "";
	Объект.НомерПунктаПротокола =
		УправлениеМероприятиямиКлиентСервер.ПолучитьНомерПунктаПротокола(
			Объект,
			Мероприятие.Протокол);
	Заголовок = УправлениеМероприятиямиКлиентСервер.СформироватьЗаголовокПунктаПротокола(
		Объект,
		Мероприятие.Протокол);
	
	УправлениеМероприятиямиКлиентСервер.ЗаполнитьСлушалиПунктаПротокола(
		Объект,
		Мероприятие.Программа,
		ТекущийНомерПунктаПрограммы);
	
	ТекущийНомерПунктаПрограммы = Объект.НомерПунктаПрограммы;
	
	РазрешитьРедактирование();
	
КонецПроцедуры

&НаКлиенте
Процедура НомерПунктаПрограммыОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УправлениеМероприятиямиКлиент.ПоказатьПунктПрограммы(
		Мероприятие.Ссылка,
		ТекущийНомерПунктаПрограммы);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерПунктаПротоколаПриИзменении(Элемент)
	
	РазрешитьРедактирование();
	
КонецПроцедуры

&НаКлиенте
Процедура СлушалиПриИзменении(Элемент)
	
	РазрешитьРедактирование();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыступилиПриИзменении(Элемент)
	
	РазрешитьРедактирование();
	
КонецПроцедуры

&НаКлиенте
Процедура РешилиПриИзменении(Элемент)
	
	РазрешитьРедактирование();
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СрокИсполненияПроцесса)
		И Объект.СрокИсполненияПроцесса = НачалоДня(Объект.СрокИсполненияПроцесса) Тогда
		Объект.СрокИсполненияПроцесса = КонецДня(Объект.СрокИсполненияПроцесса);
	КонецЕсли;
	
	РазрешитьРедактирование();
	
	Если ЗначениеЗаполнено(Объект.СрокИсполненияПроцесса)
		И Объект.СрокИсполненияПроцесса < ОбщегоНазначенияКлиент.ДатаСеанса() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Установленный срок уже прошел.'"), 2);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокВремяПриИзменении(Элемент)
	
	РазрешитьРедактирование();
	
	Если ЗначениеЗаполнено(Объект.СрокИсполненияПроцесса)
		И Объект.СрокИсполненияПроцесса < ОбщегоНазначенияКлиент.ДатаСеанса() Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Установленный срок уже прошел.'"), 2);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	РазрешитьРедактирование();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийПриИзменении(Элемент)
	
	РазрешитьРедактирование();
	
КонецПроцедуры

&НаКлиенте
Процедура АвторПриИзменении(Элемент)
	
	РазрешитьРедактирование();
	
КонецПроцедуры

&НаКлиенте
Процедура АвторОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(Объект, "Автор", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерПриИзменении(Элемент)
	
	РазрешитьРедактирование();
	
КонецПроцедуры


&НаКлиенте
Процедура ПроверяющийОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.Проверяющий = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.Контролер = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПолныеРоли");
		ДанныеВыбора = СотрудникиВызовСервера.СформироватьДанныеВыбора(Текст, ДополнениеТипа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПолныеРоли");
		ДанныеВыбора = СотрудникиВызовСервера.СформироватьДанныеВыбора(Текст, ДополнениеТипа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПолныеРоли");
		ДанныеВыбора = СотрудникиВызовСервера.СформироватьДанныеВыбора(Текст, ДополнениеТипа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПолныеРоли");
		ДанныеВыбора = СотрудникиВызовСервера.СформироватьДанныеВыбора(Текст, ДополнениеТипа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ОтображатьРоли", Истина);
	ПараметрыФормы.Вставить("ВыбранныеАдресаты", Объект.Проверяющий);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор проверяющего'"));
	
	ОткрытьФорму("Справочник.АдреснаяКнига.Форма.ФормаСписка",
		ПараметрыФормы,
		Элементы.Проверяющий,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ОтображатьРоли", Истина);
	ПараметрыФормы.Вставить("ВыбранныеАдресаты", Объект.Контролер);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор контролера'"));
	
	ОткрытьФорму("Справочник.АдреснаяКнига.Форма.ФормаСписка",
		ПараметрыФормы,
		Элементы.Контролер,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СотрудникиКлиент.ОбработкаВыбораКонтейнера(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
		ВыбранноеЗначение = СотрудникиВызовСервера.ОсновнойСотрудникПользователя(ВыбранноеЗначение);
	КонецЕсли;
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(Объект, "Проверяющий", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СотрудникиКлиент.ОбработкаВыбораКонтейнера(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
		ВыбранноеЗначение = СотрудникиВызовСервера.ОсновнойСотрудникПользователя(ВыбранноеЗначение);
	КонецЕсли; 
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(Объект, "Контролер", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеИсполненияПриИзменении(Элемент)
	
	РазрешитьРедактирование();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаИсполненияПриИзменении(Элемент)
	
	РазрешитьРедактирование();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подобрать(Команда)
	
	ОписаниеОповещенияОбработкиВыбора = Новый ОписаниеОповещения(
		"ЗавершитьПодборИсполнителей",
		ЭтотОбъект);
		
	РаботаСАдреснойКнигойКлиент.ПодобратьИсполнителейДляПроцессов(
		ЭтотОбъект,
		Объект.Исполнители,
		ОписаниеОповещенияОбработкиВыбора,
		Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСостояний(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ПунктПротокола", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", СтруктураОтбора);
	ОткрытьФорму(
		"РегистрСведений.ИсторияСостоянийПротоколовМероприятий.Форма.ФормаИсторииСостояний",
		ПараметрыФормы,
		ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсполнители

&НаКлиенте
Процедура ИсполнителиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ТекущиеДанные.Исполнитель = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Исполнители.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Исполнитель) Или Объект.Исполнители.Количество() > 1 Тогда
		
		РаботаСАдреснойКнигойКлиент.ВыбратьИсполнителяДляПроцесса(
			ЭтотОбъект,
			Элементы.Исполнители);
		
	Иначе
		
		ОписаниеОповещенияОбработкиВыбора = Новый ОписаниеОповещения(
			"ЗавершитьПодборИсполнителей",
			ЭтотОбъект);
			
		РаботаСАдреснойКнигойКлиент.ПодобратьИсполнителейДляПроцессов(
			ЭтотОбъект,
			Объект.Исполнители,
			ОписаниеОповещенияОбработкиВыбора,
			Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОчистка(Элемент, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительОчистка(
		СтандартнаяОбработка,
		Элементы.Исполнители);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительОбработкаВыбора(
		Элемент,
		ВыбранноеЗначение,
		СтандартнаяОбработка);
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(
		Элементы.Исполнители.ТекущиеДанные, "Исполнитель", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительАвтоПодбор(
		ЭтотОбъект,
		Текст,
		ДанныеВыбора,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительОкончаниеВводаТекста(
		ЭтотОбъект,
		Текст,
		ДанныеВыбора,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиОписаниеНачалоВыбораПродолжение(Результат, Параметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.ШаблоныТекстов")  Тогда 
		Элементы.Исполнители.ТекущиеДанные.Описание = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
			Результат, "Шаблон");
	КонецЕсли;	
		
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьДоступностьПоСостоянию()
	
	Если РольДоступна("ПолныеПрава") Тогда 
		Возврат;
	КонецЕсли;	
	
	СостояниеПротокола =
		УправлениеМероприятиями.ПолучитьСостояниеМероприятия(Объект.Владелец, "СостояниеПротокола");
	
	// Установка доступности по состоянию протокола.
	Если СостояниеПротокола = Перечисления.СостоянияМероприятий.ПротоколНаСогласовании
		Или СостояниеПротокола = Перечисления.СостоянияМероприятий.ПротоколСогласован
		Или СостояниеПротокола = Перечисления.СостоянияМероприятий.ПротоколНаУтверждении
		Или СостояниеПротокола = Перечисления.СостоянияМероприятий.ПротоколУтвержден
		Или СостояниеПротокола = Перечисления.СостоянияМероприятий.ПротоколНаИсполнении
		Или СостояниеПротокола = Перечисления.СостоянияМероприятий.ПротоколИсполнен Тогда 
		
		УстановитьРежимПросмотра();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимПросмотра()
	
	// Если режим просмотра уже установлен, то ничего делать не нужно.
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	// Установка режима просмотра.
	ТолькоПросмотр = Истина;
	Элементы.Записать.Видимость = Ложь;
	Элементы.Отмена.КнопкаПоУмолчанию = Истина;
	Элементы.Отмена.Заголовок = НСтр("ru = 'Закрыть'");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИсторииСостояний()
	
	Элементы.ИсторияСостояний.Видимость =
		РегистрыСведений.ИсторияСостоянийПротоколовМероприятий.ДоступнаИсторияСостояний(
			Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПодборИсполнителей(ВыбранныеИсполнители, ДопПараметры) Экспорт
	
	Если ВыбранныеИсполнители = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Удаление пропавших строк из таблицы Исполнители.
	КоличествоСтрок = Объект.Исполнители.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		
		Строка = Объект.Исполнители[КоличествоСтрок - Инд];
		
		УдалитьИсполнителя = Истина;
		Для Каждого ВыбранныйИсполнитель Из ВыбранныеИсполнители Цикл
			Если Строка.Исполнитель = ВыбранныйИсполнитель Тогда
				УдалитьИсполнителя = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если УдалитьИсполнителя Тогда
			Объект.Исполнители.Удалить(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	// Обработка выбранных контактов
	Для Каждого ВыбранныйАдресат1 Из ВыбранныеИсполнители Цикл
		
		//Находим количество дублей для выбранного адресата.
		КоличествоВхождений = 0;
		Для Каждого ВыбранныйАдресат2 Из ВыбранныеИсполнители Цикл
			Если ВыбранныйАдресат1 = ВыбранныйАдресат2 Тогда
				
				КоличествоВхождений = КоличествоВхождений + 1;
			КонецЕсли;
		КонецЦикла;
		
		// Ищем выбранный контакт в таблице Исполнители
		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("Исполнитель", ВыбранныйАдресат1);
		НайденныеСтроки = Объект.Исполнители.НайтиСтроки(СтруктураДляПоиска);
		КоличествоНайденныхСтрок = НайденныеСтроки.Количество();
		
		// Если выбранный контакт встречается в списке выбранных больше, чем
		// в таблице Исполнители, тогда добавляем недостающих конец списка.
		Если КоличествоВхождений > КоличествоНайденныхСтрок Тогда
			
			Пока КоличествоВхождений <> КоличествоНайденныхСтрок Цикл
				
				НоваяСтрокаИсполнитель = Объект.Исполнители.Добавить();
				НоваяСтрокаИсполнитель.Исполнитель = ВыбранныйАдресат1;
				
				КоличествоНайденныхСтрок = КоличествоНайденныхСтрок + 1;
				
			КонецЦикла;
			
		// Если выбранный контакт встречается в списке выбранных меньше, чем
		// в таблице Исполнители, тогда удаляем лишние строки с конца списка.
		ИначеЕсли КоличествоВхождений < КоличествоНайденныхСтрок Тогда
			Пока КоличествоВхождений <> КоличествоНайденныхСтрок Цикл
				Объект.Исполнители.Удалить(НайденныеСтроки[КоличествоНайденныхСтрок - 1]);
				КоличествоНайденныхСтрок = КоличествоНайденныхСтрок - 1;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредупреждениеРедактирования()
	
	ТребуетсяПредупреждение =
		(Объект.СостояниеИсполнения = Перечисления.СостоянияПротоколовМероприятий.НаИсполнении
		Или Объект.СостояниеИсполнения = Перечисления.СостоянияПротоколовМероприятий.Исполнен)
		И Не РедактированиеРазрешено;
	
	Если ТребуетсяПредупреждение Тогда
		ЗначениеОтображения = ОтображениеПредупрежденияПриРедактировании.Отображать;
	Иначе
		ЗначениеОтображения = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	КонецЕсли;
	
	ТекстПредупреждения =
		НСтр("ru = 'Отмечено, что протокол уже находится на исполнении или исполнен.
			|Если исполнение протокола происходит с помощью обработки, то внесенные в данной форме не повлияют на обработку, а только повлияют на печатную форму протокола.
			|В случае, если необходимо изменить не протокол мероприятия, а то, как происходит его исполнение - следует вносить изменения на закладке ""Обработка""'");
	
	ЭлементыДляПредупреждения = Новый Массив;
	ЭлементыДляПредупреждения.Добавить(Элементы.НомерПунктаПрограммы);
	ЭлементыДляПредупреждения.Добавить(Элементы.НомерПунктаПротокола);
	ЭлементыДляПредупреждения.Добавить(Элементы.Слушали);
	ЭлементыДляПредупреждения.Добавить(Элементы.Выступили);
	ЭлементыДляПредупреждения.Добавить(Элементы.Решили);
	ЭлементыДляПредупреждения.Добавить(Элементы.Срок);
	ЭлементыДляПредупреждения.Добавить(Элементы.СрокВремя);
	ЭлементыДляПредупреждения.Добавить(Элементы.Исполнитель);
	ЭлементыДляПредупреждения.Добавить(Элементы.Проверяющий);
	ЭлементыДляПредупреждения.Добавить(Элементы.Автор);
	ЭлементыДляПредупреждения.Добавить(Элементы.Контролер);
	ЭлементыДляПредупреждения.Добавить(Элементы.СостояниеИсполнения);
	ЭлементыДляПредупреждения.Добавить(Элементы.ДатаИсполнения);
	
	Для Каждого ЭлементДляПредупреждения Из ЭлементыДляПредупреждения Цикл
		ЭлементДляПредупреждения.ОтображениеПредупрежденияПриРедактировании = ЗначениеОтображения;
		ЭлементДляПредупреждения.ПредупреждениеПриРедактировании = ТекстПредупреждения;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьРедактирование()
	
	Если Не ТребуетсяПредупреждение Тогда
		Возврат;
	КонецЕсли;
	
	РедактированиеРазрешено = Истина;
	УстановитьПредупреждениеРедактирования();
	
КонецПроцедуры

#КонецОбласти
