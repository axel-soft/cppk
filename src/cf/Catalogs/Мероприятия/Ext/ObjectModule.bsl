#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда 
		
		Организатор = Сотрудники.ОсновнойСотрудник();
		Куратор = Сотрудники.ОсновнойСотрудник();
		
		Подготовил = Сотрудники.ОсновнойСотрудник();
		Подразделение = Сотрудники.ПодразделениеСотрудника(Подготовил);
		
		Важность = Перечисления.ВариантыВажностиОбъектов.Обычная;
		ТипПрограммы = Перечисления.ТипыПрограммыПротокола.ВТаблице;
		ТипПротокола = Перечисления.ТипыПрограммыПротокола.ВТаблице;
		
		Если Константы.ИспользоватьГрифыДоступа.Получить() Тогда
			ГрифДоступа = Константы.ГрифДоступаПоУмолчанию.Получить();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Организация) Тогда 
			Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Проект) Тогда 
			Проект = РаботаСПроектами.ПолучитьПроектПоУмолчанию();
		КонецЕсли;
		
	КонецЕсли;
	
	// Ввод на основании мероприятия
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Мероприятия") Тогда 
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, 
			"Наименование, ВидМероприятия, Описание, Важность, МестоПроведения, Папка, Предмет, Проект, Помещение, Подразделение");
			
		ПредыдущееМероприятие = ДанныеЗаполнения;
		Наименование = РеквизитыОснования.Наименование;
		ВидМероприятия = РеквизитыОснования.ВидМероприятия;
		Описание = РеквизитыОснования.Описание;
		Важность = РеквизитыОснования.Важность;
		МестоПроведения = РеквизитыОснования.МестоПроведения;
		Папка = РеквизитыОснования.Папка;  
		Предмет = РеквизитыОснования.Предмет;
		Проект = РеквизитыОснования.Проект;
		Помещение = РеквизитыОснования.Помещение;
		
		Если ЗначениеЗаполнено(РеквизитыОснования.Подразделение) Тогда
			Подразделение = РеквизитыОснования.Подразделение;
		КонецЕсли;
		
		// Переносятся только пункты, по которым не приняты решения
		Для Каждого Строка Из ДанныеЗаполнения.Программа Цикл
			
			НайденныеСтроки = ДанныеЗаполнения.Протокол.НайтиСтроки(
				Новый Структура("НомерПунктаПрограммы", Строка.НомерПункта));
			Если НайденныеСтроки.Количество() > 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Программа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, , "ВремяФакт");
			НоваяСтрока.НомерПункта = НоваяСтрока.НомерСтроки;
			
		КонецЦикла;
		УправлениеМероприятиямиКлиентСервер.ПересчитатьНачалоОкончаниеПунктовПрограммы(ЭтотОбъект);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Проекты") Тогда
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "ЭтоГруппа") Тогда
			СообщениеПользователю = НСтр("ru = 'Выберите проект, а не группу.'");
			ВызватьИсключение СообщениеПользователю;
		КонецЕсли;
		
		Проект = ДанныеЗаполнения;
		Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Мероприятие по проекту %1'"),
			Строка(Проект));
		
		Если ЗначениеЗаполнено(ДанныеЗаполнения.Подразделение) Тогда
			Подразделение = ДанныеЗаполнения.Подразделение;
		КонецЕсли;
		
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ДанныеЗаполнения) Тогда
		
		ДанныеЗаполненияОбъект = ДанныеЗаполнения.ПолучитьОбъект();
		ТекстПисьма = ДанныеЗаполненияОбъект.ПолучитьТекстовоеПредставлениеСодержанияПисьма();
		ТекстПисьмаСТемой = СокрЛП(ДанныеЗаполненияОбъект.Тема) + "." + Символы.ПС + ТекстПисьма;
		
		Предмет = ДанныеЗаполнения;
		Проект = ДанныеЗаполненияОбъект.Проект;
		Описание = ТекстПисьма;
		
		Событие = РаботаСАнализомТекстаВызовСервера.НайтиСобытие(ТекстПисьмаСТемой, ДанныеЗаполненияОбъект.Дата);
		Если Событие <> Неопределено Тогда
			ДатаНачала = Событие.Начало;
			ДатаОкончания = Событие.Конец;
			МестоПроведения = Событие.Место;
			Наименование = Событие.Текст;
		Иначе
			Наименование = ДанныеЗаполненияОбъект.Тема;
		КонецЕсли;
		
	ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоДокумент(ДанныеЗаполнения) Тогда 
		
		Предмет = ДанныеЗаполнения;
		
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения,
			"Заголовок, Содержание, ГрифДоступа, Организация, Проект, Подразделение, 
			|Важность, ВидДокумента.ИспользоватьВажность");
		Наименование = РеквизитыДокумента.Заголовок;
		Описание = РеквизитыДокумента.Содержание;
		ГрифДоступа = РеквизитыДокумента.ГрифДоступа;
		Организация = РеквизитыДокумента.Организация;
		Проект = РеквизитыДокумента.Проект;
		
		Если ЗначениеЗаполнено(РеквизитыДокумента.Подразделение) Тогда
			Подразделение = РеквизитыДокумента.Подразделение;
		КонецЕсли;
		
		Если ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(ДанныеЗаполнения) Тогда
			РеквизитыВходящегоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, 
				"Контрагент, ПодписалОтКонтрагента");
			Организатор = РеквизитыВходящегоДокумента.Контрагент;
			ОрганизаторКонтактноеЛицо = РеквизитыВходящегоДокумента.ПодписалОтКонтрагента;
		КонецЕсли;
		
		Если РеквизитыДокумента.ВидДокументаИспользоватьВажность = Истина Тогда
			Важность = РеквизитыДокумента.Важность;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Массив") 
		И ДанныеЗаполнения.Количество() > 0
		И ТипЗнч(ДанныеЗаполнения[0]) = Тип("СправочникСсылка.Файлы") Тогда 
		
		Если ДанныеЗаполнения.Количество() = 1 И Не ЗначениеЗаполнено(Наименование) Тогда 
			Наименование = ДанныеЗаполнения[0].ПолноеНаименование;
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") И Не ЗначениеЗаполнено(Проект) Тогда
			Проекты = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ДанныеЗаполнения, "Проект");
			Проект = Проекты.Получить(ДанныеЗаполнения[0]);
			Для Каждого Строка Из Проекты Цикл
				Если Строка.Значение <> Проект Тогда 
					Проект = Неопределено;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "Владелец");
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Мероприятие") Тогда
			
			ЗаполнитьНаОснованииМероприятия(ДанныеЗаполнения.Мероприятие);
			
		КонецЕсли;
		
	Иначе
		
		Если ДанныеЗаполнения <> Неопределено И ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
			Предмет = ДанныеЗаполнения;
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеМероприятиямиПереопределяемый.ОбработкаЗаполнения(
		ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗначениеЗаполнено(ПредыдущееМероприятие) И ПредыдущееМероприятие = Ссылка Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Указана ссылка на самого себя!'"),
			ЭтотОбъект,
			"ПредыдущееМероприятие",, 
			Отказ);
	КонецЕсли;	
	
	ЕстьАвтоматическиеБрони = Ложь;
	Если ЗначениеЗаполнено(Ссылка) Тогда
		АвтоматическиеБрониПоПредмету = БронированиеПомещений.АвтоматическиеБрониПоПредмету(Ссылка);
		ЕстьАвтоматическиеБрони = АвтоматическиеБрониПоПредмету.Количество() > 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаНачала) Или ЕстьАвтоматическиеБрони Тогда 
		ПроверяемыеРеквизиты.Добавить("ДатаОкончания");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаОкончания) Или ЕстьАвтоматическиеБрони Тогда 
		ПроверяемыеРеквизиты.Добавить("ДатаНачала");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда 
		Если ДатаНачала = ДатаОкончания Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Указанная дата окончания совпадает с датой начала!'"),
				ЭтотОбъект,
				"ДатаОкончания",, 
				Отказ);
		ИначеЕсли ДатаОкончания < ДатаНачала Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Указанная дата окончания меньше, чем дата начала!'"),
				ЭтотОбъект,
				"ДатаОкончания",, 
				Отказ);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыМероприятияПоСсылке = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,
		"ПометкаУдаления, Протокол, Куратор, Организатор, Председатель, Секретарь, Проект, Важность");
	
	// Пометка на удаление приложенных файлов
	ПредыдущаяПометкаУдаления = Ложь;
	Если Не Ссылка.Пустая() Тогда
		ПредыдущаяПометкаУдаления = РеквизитыМероприятияПоСсылке.ПометкаУдаления;
	КонецЕсли;
	ДополнительныеСвойства.Вставить("ПредыдущаяПометкаУдаления", ПредыдущаяПометкаУдаления);
	
	// Смена проект приложенных файлов.
	ИзменилсяПроект = Ложь;
	Если Не ЭтоНовый() Тогда
		ИзменилсяПроект = Проект <> РеквизитыМероприятияПоСсылке.Проект;
	КонецЕсли;
	ДополнительныеСвойства.Вставить("ИзменилсяПроект", ИзменилсяПроект);
	
	Если Не ПараметрыСеанса.ЗагрузкаОбработанныхДанныхИзДругойСистемы
		И ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
			
		Если ПометкаУдаления Тогда
			ДополнительныеСвойства.Вставить("НужноПометитьНаУдалениеБизнесСобытия", Истина);
		КонецЕсли;
		
		Если ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(Ссылка).Удаление Тогда
			
			Обработка = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(Ссылка);
			
			Если ПометкаУдаления И ЗначениеЗаполнено(Ссылка) Тогда
				
				КППоПредмету = РаботаСПроцессамиПоОбработкамОбъектов.АктивныйКППоПредмету(Ссылка);
				Если ЗначениеЗаполнено(КППоПредмету) Тогда
					ВызватьИсключение 
						НСтр("ru = 'Нельзя установить пометку удаления. По мероприятию есть активный комплексный процесс.'");
				КонецЕсли;
				
			КонецЕсли;	
			
			РаботаСФайламиВызовСервера.ПометитьНаУдалениеПриложенныеФайлы(Ссылка, ПометкаУдаления);
			Если ПометкаУдаления
				И Справочники.ОбработкиОбъектов.ЕстьАктивныеОбработки(Ссылка) Тогда
				Попытка
					ОбработкиОбъектов.ПрерватьОбработкуОбъектаПриПометкеНаУдаление(Ссылка, 
						НСтр("ru = 'Мероприятие помечено на удаление'"));
				Исключение
					ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ВызватьИсключение НСтр("ru = 'Не удалось установить пометку удаления по причине:'") + Символы.ПС + ТекстОшибки;
				КонецПопытки;
			КонецЕсли;
			
			ВсеОбработкиПредмета = ОбработкиОбъектов.ВсеОбработкиПредмета(Ссылка);
			ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ВсеОбработкиПредмета, Обработка);
			ОбработкиОбъектов.ПометитьОбработкиНаУдаление(ВсеОбработкиПредмета, ПометкаУдаления);
			
			Если ПометкаУдаления И ЗначениеЗаполнено(Ссылка) Тогда
				ПрочиеЗадачи = РаботаСЗадачами.ЗадачиПоПриложению(Ссылка);
				Для Каждого ПрочаяЗадача Из ПрочиеЗадачи Цикл
					РаботаСЗадачами.УдалитьЗадачу(ПрочаяЗадача);
				КонецЦикла;
			КонецЕсли;
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У вас нет права ""Пометка на удаление"" мероприятия ""%1"".'"),
				Строка(Ссылка));
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ДатаСоздания) Тогда
		ДатаСоздания = ТекущаяДатаСеанса();
	КонецЕсли;
	ДатаИзменения = ТекущаяДатаСеанса();
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Серия = Серия + 1;
	КонецЕсли;
	
	// Заполнение периода строкой
	ПериодСтрокой = УправлениеМероприятиями.ПериодСтрокой(ДатаНачала, ДатаОкончания, "");
	
	// Обработка рабочей группы
	СсылкаОбъекта = Ссылка;
	// Установка ссылки нового
	Если Не ЗначениеЗаполнено(СсылкаОбъекта) Тогда
		СсылкаОбъекта = ПолучитьСсылкуНового();
		Если Не ЗначениеЗаполнено(СсылкаОбъекта) Тогда
			СсылкаНового = Справочники.Мероприятия.ПолучитьСсылку();
			УстановитьСсылкуНового(СсылкаНового);
			СсылкаОбъекта = СсылкаНового;
		КонецЕсли;
	КонецЕсли;
	
	// Определение дескрипторов для проверки прав при записи рабочей группы.
	Если ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		ДокументооборотПраваДоступа.ОпределитьДескрипторыОбъекта(ЭтотОбъект);
	КонецЕсли;
	
	// Подготовка рабочей группы
	РабочаяГруппа = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(СсылкаОбъекта);
	// Добавление автоматических участников из самого объекта
	Если РаботаСРабочимиГруппами.ПоОбъектуВедетсяАвтоматическоеЗаполнениеРабочейГруппы(ЭтотОбъект) Тогда
		ДобавитьУчастниковРабочейГруппыВНабор(РабочаяГруппа);
	КонецЕсли;
	
	// Добавление участников, переданных "снаружи", например из формы объекта
	Если ДополнительныеСвойства.Свойство("РабочаяГруппаДобавить") Тогда
		Для Каждого Эл Из ДополнительныеСвойства.РабочаяГруппаДобавить Цикл
			// Добавление участника в итоговую рабочую группу
			Строка = РабочаяГруппа.Добавить();
			Строка.Участник = Эл.Участник;
			Строка.Изменение = Эл.Изменение;
		КонецЦикла;	
	КонецЕсли;		
	
	// Удаление участников, переданных "снаружи", например из формы объекта
	Если ДополнительныеСвойства.Свойство("РабочаяГруппаУдалить") Тогда
		Для Каждого Эл Из ДополнительныеСвойства.РабочаяГруппаУдалить Цикл
			// Поиск удаляемого участника в итоговой рабочей группе
			Для Каждого Эл2 Из РабочаяГруппа Цикл
				Если Эл2.Участник = Эл.Участник 
					И Эл2.Изменение = Эл.Изменение Тогда
					// Удаление участника из итоговой рабочей группы
					РабочаяГруппа.Удалить(Эл2);
					Прервать;
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;	
	КонецЕсли;		

	// Обработка обязательного заполнения рабочих групп 
	Если РабочаяГруппа.Количество() = 0 Тогда
		Если РаботаСРабочимиГруппами.ОбязательноеЗаполнениеРабочихГруппДокументов(ВидМероприятия) Тогда
			Строка = РабочаяГруппа.Добавить();
			Строка.Участник = Сотрудники.ОсновнойСотрудникПользователя(
				Пользователи.ТекущийПользователь());
			Строка.Изменение = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Запись итоговой рабочей группы
	РаботаСРабочимиГруппами.ПерезаписатьРабочуюГруппуОбъекта(
		СсылкаОбъекта,
		РабочаяГруппа,
		Ложь, // ОбновитьПрава
		Истина, // ПроверятьПрава 
		?(ЭтоНовый(), Неопределено, Пользователи.ТекущийПользователь()));
	
	// Установка необходимости обновления прав доступа
	ДополнительныеСвойства.Вставить("ДополнительныеПравообразующиеЗначенияИзменены");
	
	// Обновление адресной книги.
	ДополнительныеСвойства.Вставить(
		"ПараметрыОбновленияАдреснойКниги",
		Справочники.Мероприятия.ЗначенияПараметровОбновленияАдреснойКнигиПоОбъекту(ЭтотОбъект));
	
	// Пометка удаления удаленных из протокола пунктов.
	Если ЭтоНовый() Тогда
		ИсходныйПротокол = Новый Массив;
	Иначе
		ИсходныйПротокол = РеквизитыМероприятияПоСсылке.Протокол.Выгрузить().ВыгрузитьКолонку("ПунктПротокола");
	КонецЕсли;
	ДополнительныеСвойства.Вставить("ИсходныйПротокол", ИсходныйПротокол);
	
	// Рабочая группа документа-предмета.
	Если Не ПараметрыСеанса.ЗагрузкаОбработанныхДанныхИзДругойСистемы Тогда
		Если РаботаСРабочимиГруппами.ПоОбъектуВедетсяАвтоматическоеЗаполнениеРабочейГруппы(Предмет) Тогда
			ДобавляемыеУчастникиРГПредмета = Новый Соответствие;
			ТипКонтейнеровСотрудников = Метаданные.ОпределяемыеТипы.КонтейнерыСотрудников.Тип;
			ИменаРеквизитовУчастников = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
				"Куратор, Организатор, Председатель, Секретарь",, Истина, Истина);
			Для Каждого ИмяРеквизита Из ИменаРеквизитовУчастников Цикл
				ЗначениеРеквизита = ЭтотОбъект[ИмяРеквизита];
				Если ЗначениеРеквизита <> РеквизитыМероприятияПоСсылке[ИмяРеквизита]
					И ТипКонтейнеровСотрудников.СодержитТип(ТипЗнч(ЗначениеРеквизита)) Тогда
					ДобавляемыеУчастникиРГПредмета[ЗначениеРеквизита] = Ложь;
				КонецЕсли;
			КонецЦикла;
			ДополнительныеСвойства.Вставить("ДобавляемыеУчастникиРГПредмета", ДобавляемыеУчастникиРГПредмета);
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		Если ЗначениеЗаполнено(Ссылка) Тогда 
			СсылкаПроект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Проект");
			ДополнительныеСвойства.Вставить("ИзменилсяПроект", СсылкаПроект <> Проект);
		КонецЕсли;	
	КонецЕсли;	
	
	ДополнительныеСвойства.Вставить("РезультатБронирования",
		БронированиеПомещенийКлиентСервер.РезультатБронирования());
	
	ИзмениласьВажность = Важность <> РеквизитыМероприятияПоСсылке.Важность;
	ДополнительныеСвойства.Вставить("ИзмениласьВажность", ИзмениласьВажность);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Возможно, выполнена явная регистрация событий при загрузке объекта.
	Если Не ДополнительныеСвойства.Свойство("НеРегистрироватьБизнесСобытия") Тогда
		Если ДополнительныеСвойства.Свойство("ЭтоНовый") И ДополнительныеСвойства.ЭтоНовый Тогда
			БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Ссылка, Справочники.ВидыБизнесСобытий.СозданиеМероприятия);	
		Иначе
			БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Ссылка, Справочники.ВидыБизнесСобытий.ИзменениеМероприятия);
		КонецЕсли;	
	КонецЕсли;	
	
	Если ДополнительныеСвойства.Свойство("НужноПометитьНаУдалениеБизнесСобытия") Тогда
		БизнесСобытияВызовСервера.ПометитьНаУдалениеСобытияПоИсточнику(Ссылка);
	КонецЕсли;	
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если ДополнительныеСвойства.Свойство("ПредыдущаяПометкаУдаления") Тогда
		ПредыдущаяПометкаУдаления = ДополнительныеСвойства.ПредыдущаяПометкаУдаления;
	КонецЕсли;
	
	Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
		ПротоколированиеРаботыСотрудников.ЗаписатьПометкуУдаления(Ссылка, ПометкаУдаления);
	КонецЕсли;	
	
	РегистрыСведений.ДанныеМероприятий.ОбновитьДанныеМероприятия(Ссылка);
	
	// Обновление адресной книги.
	Справочники.Мероприятия.ОбновитьАдреснуюКнигу(
		ЭтотОбъект, ДополнительныеСвойства.ПараметрыОбновленияАдреснойКниги);
		
	// Пометка удаления удаленных из протокола пунктов.
	Для Каждого ПунктПротокола Из ДополнительныеСвойства.ИсходныйПротокол Цикл
		
		Если Протокол.Найти(ПунктПротокола, "ПунктПротокола") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПунктПротоколаОбъект = ПунктПротокола.ПолучитьОбъект();
		ПунктПротоколаОбъект.Заблокировать();
		ПунктПротоколаОбъект.УстановитьПометкуУдаления(Истина);
		ИсторияРаботыПользователя.Добавить(ПунктПротоколаОбъект.Ссылка);
		
	КонецЦикла;
	
	Если ДополнительныеСвойства.Свойство("ИзмененныеСостояния") Тогда
		Для Каждого ИзменноеСостояние Из ДополнительныеСвойства.ИзмененныеСостояния Цикл
			ЗаписатьСостояниеМероприятия(
				ИзменноеСостояние.НачальноеСостояние,
				ИзменноеСостояние.Состояние,
				ИзменноеСостояние.Период);
		КонецЦикла;
	КонецЕсли;
	
	// Рабочая группа документа-предмета.
	ДобавляемыеУчастникиРГПредмета = Неопределено;
	Если ДополнительныеСвойства.Свойство("ДобавляемыеУчастникиРГПредмета", ДобавляемыеУчастникиРГПредмета)
		И ДобавляемыеУчастникиРГПредмета.Количество() > 0
		И ДелопроизводствоКлиентСервер.ЭтоДокумент(Предмет) Тогда
		
		ТаблицаНабора = РаботаСРабочимиГруппами.ПолучитьРабочуюГруппуДокумента(Предмет);
		КолСтрокДоДобавления = ТаблицаНабора.Количество();
		Для Каждого КлючИЗначение Из ДобавляемыеУчастникиРГПредмета Цикл
			РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
				ТаблицаНабора, КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		Если ТаблицаНабора.Количество() > КолСтрокДоДобавления Тогда
			РаботаСРабочимиГруппами.ПерезаписатьРабочуюГруппуОбъекта(Предмет, ТаблицаНабора, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	ДействияСервер.ВидОбъектаПриЗаписи(Ссылка, ДополнительныеСвойства, Отказ);
	
	РаботаСРабочимКалендаремСервер.ОбновитьЗаписиКалендаряПоПредмету(Ссылка, Ложь);
	
	// Смена проект приложенных файлов.
	Если ДополнительныеСвойства.ИзменилсяПроект Тогда 
		РаботаСПроектами.ЗаполнитьПроектПодчиненныхФайлов(Ссылка);
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ИзмениласьВажность")
		И ДополнительныеСвойства.ИзмениласьВажность Тогда
		ДействияСервер.ОбновитьВажностьДействийПоПредмету(Ссылка, Важность);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Организатор = Сотрудники.ОсновнойСотрудник();
	
	Подготовил = Сотрудники.ОсновнойСотрудник();
	
	Протокол.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет в набор участников рабочей группы.
//
// Параметры:
//  ТаблицаНабора	 - РегистрСведенийНаборЗаписей.РабочиеГруппы - Набор участников рабочей группы.
//
Процедура ДобавитьУчастниковРабочейГруппыВНабор(ТаблицаНабора)
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ИсходныеРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,
			"ВидМероприятия, Председатель, Секретарь, Организатор, Куратор, Подготовил");
		Если ИсходныеРеквизиты.ВидМероприятия = ВидМероприятия Тогда
			ДобавитьТолькоНовыхУчастниковРабочейГруппыВНабор(ТаблицаНабора, ИсходныеРеквизиты);
		Иначе
			ДобавитьВсехУчастниковРабочейГруппыВНабор(ТаблицаНабора);
		КонецЕсли;	
	Иначе	
		ДобавитьВсехУчастниковРабочейГруппыВНабор(ТаблицаНабора);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в набор новых участников рабочей группы.
//
// Параметры:
//  ТаблицаНабора		 - РегистрСведенийНаборЗаписей.РабочиеГруппы - Набор участников рабочей группы.
//  ИсходныеРеквизиты	 - Структура								 - Исходные реквизиты.
//
Процедура ДобавитьТолькоНовыхУчастниковРабочейГруппыВНабор(ТаблицаНабора, ИсходныеРеквизиты)
	
	// Добавление реквизита Председатель
	Если ИсходныеРеквизиты.Председатель <> Председатель Тогда
		ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Председатель, Истина);
	КонецЕсли;
	
	// Добавление реквизита Секретарь
	Если ИсходныеРеквизиты.Секретарь <> Секретарь Тогда 
		ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Секретарь, Истина);
	КонецЕсли;
	
	// Добавление реквизита Организатор
	Если ИсходныеРеквизиты.Организатор <> Организатор Тогда
		ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Организатор, Истина);
	КонецЕсли;
	
	// Добавление реквизита Куратор
	Если ИсходныеРеквизиты.Куратор <> Куратор Тогда
		ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Куратор, Истина);
	КонецЕсли;
	
	// Добавление реквизита Подготовил
	Если ИсходныеРеквизиты.Подготовил <> Подготовил Тогда
		ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Подготовил, Истина);
	КонецЕсли;
	
	// Обработка табличной части Участники
	Если ДополнительныеСвойства.Свойство("СписокУчастников") Тогда
		ИсходныеУчастники = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(Ссылка, Истина);
		ТекущиеУчастники = ДополнительныеСвойства.СписокУчастников;
		Для Каждого Эл Из ТекущиеУчастники Цикл
			// Поиск в исходной табличной части 
			Найден = Ложь;
			Для Каждого Эл2 Из ИсходныеУчастники Цикл
				Если Эл.Исполнитель = Эл2.Исполнитель Тогда
					Найден = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			// Добавление нового участника рабочей группы
			Если Не Найден  Тогда
				ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Эл.Исполнитель);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьВсехУчастниковРабочейГруппыВНабор(ТаблицаНабора)
	
	ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Председатель, Истина);
	ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Секретарь, Истина);
	ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Организатор, Истина);
	ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Куратор, Истина);
	ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Подготовил, Истина);
	
	// Обработка табличной части Участники
	Если ДополнительныеСвойства.Свойство("СписокУчастников") Тогда
		ТекущиеУчастники = ДополнительныеСвойства.СписокУчастников;
		Для Каждого Эл Из ТекущиеУчастники Цикл
			ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Эл.Исполнитель);
		КонецЦикла;
	КонецЕсли;
	
	// Добавление контролеров
	Если Не Ссылка.Пустая() Тогда 
		Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьУчастникаВТаблицуНабора(
			ТаблицаНабора,
			Участник,
			Изменение = Ложь) Экспорт
	
	Если Метаданные.ОпределяемыеТипы.КонтейнерыСотрудников.Тип.СодержитТип(ТипЗнч(Участник)) Тогда
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
			ТаблицаНабора, Участник, Изменение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьСостояниеМероприятия(НачальноеСостояние, Состояние, Период)
	
	Если НачальноеСостояние = Состояние Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Состояние) Тогда 
		РезультатБронирования = УправлениеМероприятиями.ЗаписатьСостояниеМероприятия(
			Ссылка,
			Период,
			Состояние,
			Сотрудники.ОсновнойСотрудник());
	Иначе
		РезультатБронирования = УправлениеМероприятиями.ОчиститьСостояниеМероприятия(
			Ссылка,
			НачальноеСостояние);
	КонецЕсли;
	
	БронированиеПомещенийКлиентСервер.ДополнитьРезультатБронирования(
		ДополнительныеСвойства.РезультатБронирования,
		РезультатБронирования);
	
КонецПроцедуры

// Заполняет мероприятие на основании мероприятия.
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия - Мероприятие.
//
Процедура ЗаполнитьНаОснованииМероприятия(Мероприятие)
	
	Если Не ЗначениеЗаполнено(Мероприятие) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Мероприятие, 
		"Наименование, ВидМероприятия, Описание, Важность, МестоПроведения,
		|Папка, Предмет, Проект, Помещение, Подразделение, ДополнительныеРеквизиты");
	
	ПредыдущееМероприятие = Мероприятие;
	Наименование = РеквизитыОснования.Наименование;
	ВидМероприятия = РеквизитыОснования.ВидМероприятия;
	Описание = РеквизитыОснования.Описание;
	Важность = РеквизитыОснования.Важность;
	МестоПроведения = РеквизитыОснования.МестоПроведения;
	Папка = РеквизитыОснования.Папка;  
	Предмет = РеквизитыОснования.Предмет;
	Проект = РеквизитыОснования.Проект;
	Помещение = РеквизитыОснования.Помещение;
	
	Если ЗначениеЗаполнено(РеквизитыОснования.Подразделение) Тогда
		Подразделение = РеквизитыОснования.Подразделение;
	КонецЕсли;
	
	Для Каждого Строка Из РеквизитыОснования.ДополнительныеРеквизиты.Выгрузить() Цикл
		НоваяСтрока = ДополнительныеРеквизиты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
	// Переносятся только пункты, по которым не приняты решения
	Для Каждого Строка Из Мероприятие.Программа Цикл
		
		НайденныеСтроки = Мероприятие.Протокол.НайтиСтроки(
			Новый Структура("НомерПунктаПрограммы", Строка.НомерПункта));
		Если НайденныеСтроки.Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Программа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, , "ВремяФакт");
		НоваяСтрока.НомерПункта = НоваяСтрока.НомерСтроки;
		
	КонецЦикла;
	УправлениеМероприятиямиКлиентСервер.ПересчитатьНачалоОкончаниеПунктовПрограммы(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли