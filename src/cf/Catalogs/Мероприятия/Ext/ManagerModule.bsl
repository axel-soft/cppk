#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ПраваДоступа

// Возвращает строку, содержащую перечисление полей доступа через запятую.
Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат 
		"Ссылка,
		|ГрифДоступа,
		|Организация,
		|Подразделение,
		|ВидМероприятия,
		|Проект,
		|Папка,
		|Организатор,
		|Председатель,
		|Секретарь,
		|Куратор,
		|Подготовил";
	
КонецФункции

// Проверяет наличие метода.
// 
Функция ЕстьМетодЗаполнитьДескрипторыОбъекта() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Заполняет переданную таблицу дескрипторов объекта.
// 
Процедура ЗаполнитьДескрипторыОбъекта(ОбъектДоступа, ТаблицаДескрипторов, ПротоколРасчетаПрав = Неопределено) Экспорт
	
	// Стандартные дескрипторы.
	ДокументооборотПраваДоступа.ЗаполнитьДескрипторыОбъектаСтандартно(
		ОбъектДоступа, ТаблицаДескрипторов);
	
	СтрокиПротокола = Новый Массив;
	
	// Управляющие мероприятием.
	ОписаниеТиповКонтейнераСотрудников = Метаданные.ОпределяемыеТипы.КонтейнерыСотрудников.Тип;
	Если ЗначениеЗаполнено(ОбъектДоступа.Организатор)
		И ОписаниеТиповКонтейнераСотрудников.СодержитТип(ТипЗнч(ОбъектДоступа.Организатор)) Тогда
		ДокументооборотПраваДоступа.ДобавитьИндивидуальныйДескриптор(
			ОбъектДоступа, ТаблицаДескрипторов, ОбъектДоступа.Организатор, Истина);
		СтрокиПротокола.Добавить("Организатор");
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ОбъектДоступа.Председатель)
		И ОписаниеТиповКонтейнераСотрудников.СодержитТип(ТипЗнч(ОбъектДоступа.Председатель)) Тогда
		ДокументооборотПраваДоступа.ДобавитьИндивидуальныйДескриптор(
			ОбъектДоступа, ТаблицаДескрипторов, ОбъектДоступа.Председатель, Истина);
		СтрокиПротокола.Добавить("Председатель");
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ОбъектДоступа.Секретарь)
		И ОписаниеТиповКонтейнераСотрудников.СодержитТип(ТипЗнч(ОбъектДоступа.Секретарь)) Тогда
		ДокументооборотПраваДоступа.ДобавитьИндивидуальныйДескриптор(
			ОбъектДоступа, ТаблицаДескрипторов, ОбъектДоступа.Секретарь, Истина);
		СтрокиПротокола.Добавить("Секретарь");
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ОбъектДоступа.Куратор)
		И ОписаниеТиповКонтейнераСотрудников.СодержитТип(ТипЗнч(ОбъектДоступа.Куратор)) Тогда
		ДокументооборотПраваДоступа.ДобавитьИндивидуальныйДескриптор(
			ОбъектДоступа, ТаблицаДескрипторов, ОбъектДоступа.Куратор, Истина);
		СтрокиПротокола.Добавить("Куратор");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектДоступа.Подготовил)
		И ОписаниеТиповКонтейнераСотрудников.СодержитТип(ТипЗнч(ОбъектДоступа.Подготовил)) Тогда
		ДокументооборотПраваДоступа.ДобавитьИндивидуальныйДескриптор(
			ОбъектДоступа, ТаблицаДескрипторов, ОбъектДоступа.Подготовил, Истина);
		СтрокиПротокола.Добавить("Подготовил");
	КонецЕсли;
	
	// Участники мероприятия.
	Участники = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(ОбъектДоступа.Ссылка, Истина);
	Для Каждого СтрУчастника Из Участники Цикл
		Если ОписаниеТиповКонтейнераСотрудников.СодержитТип(ТипЗнч(СтрУчастника.Исполнитель)) Тогда
			ДокументооборотПраваДоступа.ДобавитьИндивидуальныйДескриптор(
				ОбъектДоступа, ТаблицаДескрипторов, СтрУчастника.Исполнитель, Ложь);
		КонецЕсли;
	КонецЦикла;
	
	Если ПротоколРасчетаПрав <> Неопределено Тогда
		Для Каждого СтрПротокола Из СтрокиПротокола Цикл
			Если СтрПротокола = "Организатор" Тогда
				ЗаписьПротокола = Новый Структура("Элемент, Описание",
					ОбъектДоступа.Организатор, НСтр("ru = 'Организатор'"));
			ИначеЕсли СтрПротокола = "Председатель" Тогда
				ЗаписьПротокола = Новый Структура("Элемент, Описание",
					ОбъектДоступа.Председатель, НСтр("ru = 'Председатель'"));
			ИначеЕсли СтрПротокола = "Секретарь" Тогда
				ЗаписьПротокола = Новый Структура("Элемент, Описание",
					ОбъектДоступа.Секретарь, НСтр("ru = 'Секретарь'"));
			ИначеЕсли СтрПротокола = "Куратор" Тогда
				ЗаписьПротокола = Новый Структура("Элемент, Описание",
					ОбъектДоступа.Куратор, НСтр("ru = 'Куратор'"));
			ИначеЕсли СтрПротокола = "Подготовил" Тогда
				ЗаписьПротокола = Новый Структура("Элемент, Описание",
					ОбъектДоступа.Подготовил, НСтр("ru = 'Подготовил'"));
			КонецЕсли;
			ПротоколРасчетаПрав.Добавить(ЗаписьПротокола);
		КонецЦикла;
		Если Участники.Количество() > 0 Тогда
			ЗаписьПротокола = Новый Структура("Элемент, Описание",
				ОбъектДоступа.Ссылка, НСтр("ru = 'Участники мероприятия'"));
			ПротоколРасчетаПрав.Добавить(ЗаписьПротокола);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет переданный дескриптор доступа 
Процедура ЗаполнитьОсновнойДескриптор(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	ДескрипторДоступа.ГрифДоступа = ОбъектДоступа.ГрифДоступа;
	ДескрипторДоступа.Организация = ОбъектДоступа.Организация;
	ДескрипторДоступа.Подразделение = ОбъектДоступа.Подразделение;
	ДескрипторДоступа.ВидОбъекта = ОбъектДоступа.ВидМероприятия;
	
	ДокументооборотПраваДоступа.ЗаполнитьПапкуДескриптораОбъекта(ОбъектДоступа, ДескрипторДоступа);
	
КонецПроцедуры

// Возвращает права доступа сотрудников к файлам мероприятий.
// 
Функция ПолучитьПраваНаФайлы(Мероприятия, СотрудникиОтбор) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаПрав = ДокументооборотПраваДоступа.ТаблицаПравСотрудниковПоОбъектам();
	
	// Права на изменение файлов должны быть у управляющих мероприятием и всех участников мероприятия.
	// Если есть рабочая группа, то права на изменение файлов должны быть только у ее участников,
	//  для которых установлен признак "Изменение".
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Мероприятия.Ссылка КАК ОбъектДоступа,
		|	ПраваПоДескрипторамДоступаОбъектов.Сотрудник КАК Сотрудник,
		|	ИСТИНА КАК Чтение,
		|	ДескрипторыДляОбъектов.ТипДескриптора = 2
		|		ИЛИ ДескрипторыДляОбъектов.ТипДескриптора = 1
		|			И ПраваПоДескрипторамДоступаОбъектов.Изменение КАК Добавление,
		|	ДескрипторыДляОбъектов.ТипДескриптора = 2
		|		ИЛИ ДескрипторыДляОбъектов.ТипДескриптора = 1
		|			И ПраваПоДескрипторамДоступаОбъектов.Изменение КАК Изменение,
		|	ДескрипторыДляОбъектов.ТипДескриптора = 2
		|		ИЛИ ДескрипторыДляОбъектов.ТипДескриптора = 1
		|			И ПраваПоДескрипторамДоступаОбъектов.Изменение КАК Удаление,
		|	ЛОЖЬ КАК УправлениеПравами
		|ИЗ
		|	Справочник.Мероприятия КАК Мероприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
		|		ПО Мероприятия.Ссылка = ДескрипторыДляОбъектов.Объект
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваПоДескрипторамДоступаОбъектов КАК ПраваПоДескрипторамДоступаОбъектов
		|		ПО ДескрипторыДляОбъектов.Дескриптор = ПраваПоДескрипторамДоступаОбъектов.Дескриптор
		|ГДЕ
		|	Мероприятия.Ссылка В(&Мероприятия)
		|	И ПраваПоДескрипторамДоступаОбъектов.Сотрудник В(&СотрудникиОтбор)");
	
	Запрос.УстановитьПараметр("Мероприятия", Мероприятия);
	Запрос.УстановитьПараметр("СотрудникиОтбор", СотрудникиОтбор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаПрав.Добавить(), Выборка);
	КонецЦикла;
	
	ИдентификаторОМ = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Справочники.Файлы);
	ДокументооборотПраваДоступа.РасширитьТаблицуПравНеограниченнымиПравами(
		ТаблицаПрав, ИдентификаторОМ, Мероприятия, СотрудникиОтбор);
	
	Возврат ТаблицаПрав;
	
КонецФункции

// Проверяет наличие метода.
// 
Функция ЕстьМетодПолучитьПравилаОбработкиНастроекПравПапки() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает таблицу значений с правилами обработки настроек прав папки,
// которые следует применять для расчета прав объекта
// 
Функция ПолучитьПравилаОбработкиНастроекПравПапки() Экспорт
	
	ТаблицаПравил = ДокументооборотПраваДоступа.ТаблицаПравилОбработкиНастроекПапки();
	
	Стр = ТаблицаПравил.Добавить();
	Стр.Настройка = "ЧтениеПапокИМероприятий";
	Стр.Чтение = Истина;
	
	Стр = ТаблицаПравил.Добавить();
	Стр.Настройка = "ДобавлениеПапокИМероприятий";
	Стр.Добавление = Истина;
	
	Стр = ТаблицаПравил.Добавить();
	Стр.Настройка = "ИзменениеПапокИМероприятий";
	Стр.Изменение = Истина;
	
	Стр = ТаблицаПравил.Добавить();
	Стр.Настройка = "ПометкаУдаленияПапокИМероприятий";
	Стр.Удаление = Истина;
	
	Возврат ТаблицаПравил;
	
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Карточка
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Справочник.Мероприятия";
	КомандаПечати.Идентификатор = "Карточка";
	КомандаПечати.Представление = НСтр("ru = 'Карточка мероприятия'");
	КомандаПечати.Обработчик = "УправлениеПечатьюКлиентДокументооборот.ПечатьКарточкиМероприятия";
	
КонецПроцедуры

// Процедура формирования печатной формы
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Карточка") Тогда	
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"Карточка", "Карточка мероприятия", ПечатьКарточки(МассивОбъектов, ОбъектыПечати, ПараметрыПечати),
			, "Справочник.Мероприятия.ПФ_MXL_Карточка");
			
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЛистОзнакомления") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм
        УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЛистОзнакомления",
			"Лист ознакомления",
			ЛистОзнакомления(МассивОбъектов, ОбъектыПечати),
			,
			"Справочник.ДействияОзнакомления.ПФ_MXL_ЛистОзнакомления");
			
	КонецЕсли;
	
КонецПроцедуры

// Формирует печатную форму карточки мероприятия
//
Функция ПечатьКарточки(МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	// Создаем табличный документ и устанавливаем имя параметров печати
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_Карточка";
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	// Получаем запросом необходимые данные
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Мероприятия.Ссылка КАК Ссылка,
		|	Мероприятия.Организация КАК Организация,
		|	Мероприятия.Наименование КАК Наименование,
		|	Мероприятия.МестоПроведения,
		|	Мероприятия.ДатаНачалаФакт,
		|	Мероприятия.ДатаОкончанияФакт,
		|	Мероприятия.Председатель КАК Председатель,
		|	Мероприятия.Секретарь КАК Секретарь,
		|	Мероприятия.ДатаНачала,
		|	Мероприятия.ДатаОкончания,
		|	Мероприятия.ДатаИзменения КАК ДатаИзменения,
		|	Мероприятия.Организатор КАК Организатор
		|ИЗ
		|	Справочник.Мероприятия КАК Мероприятия
		|ГДЕ
		|	Мероприятия.Ссылка В(&МассивОбъектов)";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ВыборкаЗаголовок = Запрос.Выполнить().Выбрать();
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УчастникиМероприятия.Порядок КАК Порядок,
		|	УчастникиМероприятия.Исполнитель,
		|	УчастникиМероприятия.Мероприятие КАК Ссылка
		|ИЗ
		|	РегистрСведений.УчастникиМероприятия КАК УчастникиМероприятия
		|ГДЕ
		|	УчастникиМероприятия.Мероприятие В(&МассивОбъектов)
		|	И Не УчастникиМероприятия.Отсутствовал
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ВыборкаУчастники = Запрос.Выполнить().Выбрать();
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Программа.НомерПункта КАК НомерПункта,
		|	Программа.Содержание КАК Содержание,
		|	Программа.Исполнитель КАК Исполнитель,
		|	Программа.Ссылка КАК Ссылка,
		|	Программа.ВремяПлан,
		|	Программа.Начало,
		|	Программа.Окончание,
		|	Программа.ВремяФакт
		|ИЗ
		|	Справочник.Мероприятия.Программа КАК Программа
		|ГДЕ
		|	Программа.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерПункта";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ВыборкаПункты = Запрос.Выполнить().Выбрать();
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Протокол.Ссылка КАК Ссылка,
		|	Протокол.НомерСтроки КАК НомерСтроки,
		|	ПротоколыМероприятий.Ответственный КАК Исполнитель,
		|	ПротоколыМероприятий.Контролер КАК Контролер,
		|	ПротоколыМероприятий.НомерПунктаПрограммы КАК НомерПунктаПрограммы,
		|	ПротоколыМероприятий.Слушали КАК Слушали,
		|	ПротоколыМероприятий.Выступили КАК Выступили,
		|	ПротоколыМероприятий.Решили КАК Решили,
		|	ПротоколыМероприятий.СрокИсполненияПроцесса КАК СрокИсполнения,
		|	ПротоколыМероприятий.НомерПунктаПротокола КАК НомерПунктаПротокола,
		|	ПротоколыМероприятий.Исполнители.(
		|		Исполнитель) КАК Исполнители
		|ИЗ
		|	Справочник.Мероприятия.Протокол КАК Протокол
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПротоколыМероприятий КАК ПротоколыМероприятий
		|		ПО Протокол.ПунктПротокола = ПротоколыМероприятий.Ссылка
		|ГДЕ
		|	Протокол.Ссылка В (&МассивОбъектов)
		|УПОРЯДОЧИТЬ ПО
		|	Протокол.НомерПунктаПрограммы,
		|	Протокол.НомерСтроки";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ВыборкаПротокол = Запрос.Выполнить().Выбрать();
	ТаблицаПротокол = Новый ТаблицаЗначений;
	ТаблицаПротокол.Колонки.Добавить("Ссылка");
	ТаблицаПротокол.Колонки.Добавить("НомерСтроки");
	ТаблицаПротокол.Колонки.Добавить("Исполнители");
	ТаблицаПротокол.Колонки.Добавить("НомерПунктаПрограммы");
	ТаблицаПротокол.Колонки.Добавить("Слушали");
	ТаблицаПротокол.Колонки.Добавить("Выступили");
	ТаблицаПротокол.Колонки.Добавить("Решили");
	ТаблицаПротокол.Колонки.Добавить("СрокИсполнения");
	ТаблицаПротокол.Колонки.Добавить("Контролер");
	ТаблицаПротокол.Колонки.Добавить("НомерПунктаПротокола");
	
	// Получение областей макета 
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.Мероприятия.ПФ_MXL_Карточка");
	ОбластьЗаголовокНаименованиеПредприятия = Макет.ПолучитьОбласть("ЗаголовокНаименованиеПредприятия");
	ОбластьЗаголовокОтчета = Макет.ПолучитьОбласть("ЗаголовокОтчета");
	ОбластьЗаголовокНаименованиеМероприятия = Макет.ПолучитьОбласть("ЗаголовокНаименованиеМероприятия");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	
	ОбластьЗаголовокУчастники = Макет.ПолучитьОбласть("ЗаголовокУчастники");
	ОбластьСтрокаУчастники = Макет.ПолучитьОбласть("СтрокаУчастники");
	
	ОбластьЗаголовокПрограмма = Макет.ПолучитьОбласть("ЗаголовокПрограмма");
	ОбластьСтрокаПрограмма = Макет.ПолучитьОбласть("СтрокаПрограмма");
	
	ОбластьЗаголовокСлушали = Макет.ПолучитьОбласть("ЗаголовокСлушали");
	ОбластьСтрокаСлушали = Макет.ПолучитьОбласть("СтрокаСлушали");
	
	ОбластьЗаголовокВыступили = Макет.ПолучитьОбласть("ЗаголовокВыступили");
	ОбластьСтрокаВыступили = Макет.ПолучитьОбласть("СтрокаВыступили");
	
	ОбластьЗаголовокРешили = Макет.ПолучитьОбласть("ЗаголовокРешили");
	ОбластьСтрокаРешили = Макет.ПолучитьОбласть("СтрокаРешили");
	
	ОбластьПредседательСекретарь = Макет.ПолучитьОбласть("ПредседательСекретарь");
	ОбластьОрганизатор = Макет.ПолучитьОбласть("Организатор");
	ОбластьДатаНесколькоДней = Макет.ПолучитьОбласть("ДатаНесколькоДней");
	ОбластьДата = Макет.ПолучитьОбласть("Дата");
	ОбластьМесто = Макет.ПолучитьОбласть("Место");
	ОбластьЗаголовокПротокол = Макет.ПолучитьОбласть("ЗаголовокПротокол");
	
	ПредставлениеМестногоЧасовогоПояса = РаботаСЧасовымиПоясами.ПредставлениеМестногоЧасовогоПояса();
	
	ПервыйДокумент = Истина;
	Пока ВыборкаЗаголовок.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки с которой начали выводить текущий документ
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Вывод заголовка
		Если ПараметрыПечати.ВыводитьОрганизацию Тогда
			НаименованиеПредприятия = Справочники.Организации.ПредставлениеОрганизацииНаДату(ВыборкаЗаголовок.Организация, ВыборкаЗаголовок.ДатаИзменения);
			Если ЗначениеЗаполнено(НаименованиеПредприятия) Тогда
				ОбластьЗаголовокНаименованиеПредприятия.Параметры.НаименованиеПредприятия = НаименованиеПредприятия;
				ТабличныйДокумент.Вывести(ОбластьЗаголовокНаименованиеПредприятия);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыПечати.ЗаголовокОтчета) Тогда
			ОбластьЗаголовокОтчета.Параметры.ЗаголовокОтчета = ПараметрыПечати.ЗаголовокОтчета;
			ТабличныйДокумент.Вывести(ОбластьЗаголовокОтчета);
		КонецЕсли;
		
		ОбластьЗаголовокНаименованиеМероприятия.Параметры.НаименованиеМероприятия = ВыборкаЗаголовок.Наименование;
		ТабличныйДокумент.Вывести(ОбластьЗаголовокНаименованиеМероприятия);
		
		ДатаУчетаМероприятия = ДатаУчетаМероприятия(ВыборкаЗаголовок.Ссылка);
		
		// Вывод тела
		Если ПараметрыПечати.ВыводитьДатуИМестоПроведения Тогда 
			
			// Вывод даты и места
			МестнаяДатаНачала = РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(ВыборкаЗаголовок.ДатаНачала);
			МестнаяДатаОкончания = РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(ВыборкаЗаголовок.ДатаОкончания);
			Если НачалоДня(МестнаяДатаОкончания) - НачалоДня(МестнаяДатаНачала) = 0 Тогда
				ОбластьДата.Параметры.ДатаПроведения = Формат(МестнаяДатаНачала, "ДФ=dd.MM.yyyy");
				ОбластьДата.Параметры.ВремяПроведения = Формат(МестнаяДатаНачала, "ДФ=ЧЧ:мм")
					+ " - "
					+ Формат(МестнаяДатаОкончания, "ДФ=ЧЧ:мм");
				Если ЗначениеЗаполнено(ПредставлениеМестногоЧасовогоПояса) Тогда
					ОбластьДата.Параметры.ВремяПроведения = ОбластьДата.Параметры.ВремяПроведения
						+ " "
						+ ПредставлениеМестногоЧасовогоПояса;
				КонецЕсли;
				ТабличныйДокумент.Вывести(ОбластьДата);
			Иначе
				ОбластьДатаНесколькоДней.Параметры.ДатаНачала = Формат(МестнаяДатаНачала, "ДФ='dd.MM.yyyy ЧЧ:мм'");
				Если ЗначениеЗаполнено(ПредставлениеМестногоЧасовогоПояса) Тогда
					ОбластьДата.Параметры.ДатаНачала = ОбластьДата.Параметры.ДатаНачала
						+ " "
						+ ПредставлениеМестногоЧасовогоПояса;
				КонецЕсли;
				ОбластьДатаНесколькоДней.Параметры.ДатаОкончания = Формат(МестнаяДатаОкончания, "ДФ='dd.MM.yyyy ЧЧ:мм'");
				ТабличныйДокумент.Вывести(ОбластьДатаНесколькоДней);
			КонецЕсли;
			
			ОбластьМесто.Параметры.МестоПроведения = ВыборкаЗаголовок.МестоПроведения;
			ТабличныйДокумент.Вывести(ОбластьМесто);
			
		КонецЕсли;
		
		Если ПараметрыПечати.ВыводитьПредседателяИСекретаря Тогда 
			// Вывод председателя и секретаря
			ОбластьПредседательСекретарь.Параметры.Председатель = Строка(ВыборкаЗаголовок.Председатель);
			ОбластьПредседательСекретарь.Параметры.Секретарь = Строка(ВыборкаЗаголовок.Секретарь);
			ТабличныйДокумент.Вывести(ОбластьПредседательСекретарь);
		КонецЕсли;
		
		Если ПараметрыПечати.ВыводитьОрганизатора Тогда
			
			// Вывод организатора
			ПредставлениеОрганизатора = Сотрудники.ПредставлениеСотрудникаНаДату(ВыборкаЗаголовок.Организатор,
				ДатаУчетаМероприятия);
			ОбластьОрганизатор.Параметры.Организатор = ПредставлениеОрганизатора;
			ТабличныйДокумент.Вывести(ОбластьОрганизатор);
			
		КонецЕсли;
		
		Если ПараметрыПечати.ВыводитьУчастников Тогда 
			// Вывод участников
			ТабличныйДокумент.Вывести(ОбластьЗаголовокУчастники);
			Номер = 0;
			Пока ВыборкаУчастники.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Цикл
				Номер = Номер + 1;
				ОбластьСтрокаУчастники.Параметры.Номер = Номер;
				
				ПредставлениеУчастника = "";
				Если ТипЗнч(ВыборкаУчастники.Исполнитель) = Тип("СправочникСсылка.Сотрудники") Тогда
					
					ПредставлениеУчастника = Сотрудники.ПредставлениеСотрудникаНаДату(ВыборкаУчастники.Исполнитель,
						ДатаУчетаМероприятия);
					
				Иначе
					
					ПредставлениеУчастника =  Строка(ВыборкаУчастники.Исполнитель);
					
				КонецЕсли;
				
				ОбластьСтрокаУчастники.Параметры.Участник = ПредставлениеУчастника;
				ТабличныйДокумент.Вывести(ОбластьСтрокаУчастники);
			КонецЦикла;
		КонецЕсли;
		
		Если ПараметрыПечати.ВыводитьПрограмму И ВыборкаПункты.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Тогда 
			ВыборкаПункты.Сбросить();
			
			// Вывод программы
			ТабличныйДокумент.Вывести(ОбластьЗаголовокПрограмма);
			Номер = 0;
			Пока ВыборкаПункты.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Цикл
				
				Номер = Номер + 1;
				ОбластьСтрокаПрограмма.Параметры.НомерПункта = Номер;
				ОбластьСтрокаПрограмма.Параметры.Содержание = ВыборкаПункты.Содержание;
				ОбластьСтрокаПрограмма.Параметры.Исполнитель = Строка(ВыборкаПункты.Исполнитель);
				МестнаяНачало = РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(ВыборкаПункты.Начало);
				МестнаяОкончание = РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(ВыборкаПункты.Окончание);
				Если ЗначениеЗаполнено(МестнаяНачало) И ЗначениеЗаполнено(МестнаяОкончание) Тогда 
					ОбластьСтрокаПрограмма.Параметры.Время =
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'с %1 по %2'"),
							Формат(МестнаяНачало, "ДФ=ЧЧ:мм"),
							Формат(МестнаяОкончание, "ДФ=ЧЧ:мм"));
				ИначеЕсли ЗначениеЗаполнено(ВыборкаПункты.ВремяПлан) Тогда
					ОбластьСтрокаПрограмма.Параметры.Время = 
						НапоминанияПользователяДокументооборотКлиентСервер.ПредставлениеВремени(ВыборкаПункты.ВремяПлан, Ложь, Ложь);
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьСтрокаПрограмма);
				
			КонецЦикла;
		КонецЕсли;
		
		Если ПараметрыПечати.ВыводитьПротокол И ВыборкаПротокол.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Тогда 
			ВыборкаПротокол.Сбросить();
			ТаблицаПротокол.Очистить();
			
			// Вывод протокола
			ТабличныйДокумент.Вывести(ОбластьЗаголовокПротокол);
			
			Пока ВыборкаПротокол.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Цикл
				СтрокаПротокола = ТаблицаПротокол.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПротокола, ВыборкаПротокол);
			КонецЦикла;
			УправлениеМероприятиямиКлиентСервер.ВывестиНомераПунктовПротокола(ТаблицаПротокол);
			
			Для Каждого СтрокаПротокола Из ТаблицаПротокол Цикл
				
				ОбластьЗаголовокСлушали.Параметры.НомерПункта = СтрокаПротокола.НомерПунктаПротокола;
				ТабличныйДокумент.Вывести(ОбластьЗаголовокСлушали);
				
				ОбластьСтрокаСлушали.Параметры.Слушали = СтрокаПротокола.Слушали;
				ТабличныйДокумент.Вывести(ОбластьСтрокаСлушали);
				
				Если ЗначениеЗаполнено(СтрокаПротокола.Выступили) Тогда 
					
					ТабличныйДокумент.Вывести(ОбластьЗаголовокВыступили);
					ОбластьСтрокаВыступили.Параметры.Выступили = СтрокаПротокола.Выступили;
					ТабличныйДокумент.Вывести(ОбластьСтрокаВыступили);
					
				КонецЕсли;	
				
				ТабличныйДокумент.Вывести(ОбластьЗаголовокРешили);
				
				Решили = СтрокаПротокола.Решили;
				
				МассивИсполнители =
					СтрокаПротокола.Исполнители.Выгрузить().ВыгрузитьКолонку("Исполнитель");
				Если МассивИсполнители.Количество() > 0 Тогда 
					
					ПредставлениеИсполнителей = СтрСоединить(МассивИсполнители, ", ");
					
					Решили = Решили 
						+ Символы.ПС 
						+ НСтр("ru = 'Исполнители:'") + " "
						+ ПредставлениеИсполнителей;
					
					Если ЗначениеЗаполнено(СтрокаПротокола.СрокИсполнения) Тогда 
						Решили = Решили 
							+ Символы.ПС
							+ НСтр("ru = 'Срок:'") + " "
							+ Формат(СтрокаПротокола.СрокИсполнения, "ДЛФ=D");
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрокаПротокола.Контролер) Тогда 
						Решили = Решили 
							+ Символы.ПС
							+ НСтр("ru = 'Контролер:'") + " "
							+ СтрокаПротокола.Контролер;
					КонецЕсли;
					
				КонецЕсли;		
				
				ОбластьСтрокаРешили.Параметры.Решили = Решили;
				ТабличныйДокумент.Вывести(ОбластьСтрокаРешили);
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Вывод подвала
		Если ПараметрыПечати.ВыводитьПредседателяИСекретаря Тогда 
			ОбластьПодвал.Параметры.Председатель =
				Строка(ВыборкаЗаголовок.Председатель);
			ОбластьПодвал.Параметры.Секретарь = 
				Строка(ВыборкаЗаголовок.Секретарь);
			ТабличныйДокумент.Вывести(ОбластьПодвал);
		КонецЕсли;	
		
		// В табличном документе зададим имя области в которую был 
		// выведен объект. Нужно для возможности печати по-комплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаЗаголовок.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция получает данные для формирования печатной формы "Лист ознакомления"
//
// Параметры:
//  МассивОбъектов - Массив - Массив ссылок на документы, по которым необходимо получить данные;
//  ОбъектыПечати  - СписокЗначений - список объектов печати;
//
// Возвращаемое значение:
//  ТабличныйДокумент - ТабличныйДокумент - печатная форма
//
Функция ЛистОзнакомления(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = Справочники.ДействияОзнакомления.ТабличныйДокументЛистОзнакомления(
		МассивОбъектов[0], ОбъектыПечати);
	Возврат ТабличныйДокумент;
	
КонецФункции

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
КонецПроцедуры

#КонецОбласти

#Область РабочаяГруппа

// Возвращает признак наличия метода ДобавитьУчастниковВТаблицу у менеджера объекта
//
Функция ЕстьМетодДобавитьУчастниковВТаблицу() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Добавляет участников мероприятия в переданную таблицу.
//
// Параметры:
//  ТаблицаНабора	 - РегистрСведенийНаборЗаписей.РабочиеГруппы	 - Набор участников.
//  Мероприятие		 - СправочникСсылка.Мероприятия	 - Мероприятие.
//
Процедура ДобавитьУчастниковВТаблицу(ТаблицаНабора, Мероприятие) Экспорт
	
	Если ТипЗнч(Мероприятие) = Тип("СправочникСсылка.Мероприятия") Тогда 
		РеквизитыМероприятия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Мероприятие,
			"Организатор, Секретарь, Председатель, Куратор, Подготовил, Ссылка");
	Иначе 
		РеквизитыМероприятия = Мероприятие;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыМероприятия.Ссылка) Тогда 
		Участники = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(РеквизитыМероприятия.Ссылка, Истина);
		Для Каждого Строка Из Участники Цикл
			ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Строка.Исполнитель);
		КонецЦикла;
	КонецЕсли;
	
	ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, РеквизитыМероприятия.Организатор, Истина);
	ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, РеквизитыМероприятия.Секретарь, Истина);
	ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, РеквизитыМероприятия.Председатель, Истина);
	ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, РеквизитыМероприятия.Куратор, Истина);
	ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, РеквизитыМероприятия.Подготовил, Истина);
	
	ПротоколМероприятия = УправлениеМероприятиями.ПолучитьПротоколМероприятия(РеквизитыМероприятия.Ссылка);
	Для Каждого Строка Из ПротоколМероприятия Цикл
		ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Строка.Ответственный);
		Для Каждого СтрокаИсполнителя Из Строка.Исполнители Цикл
			ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, СтрокаИсполнителя.Исполнитель);
		КонецЦикла;
	КонецЦикла;
	
	// Добавление контролеров
	Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, РеквизитыМероприятия.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеАдреснойКниги

// Конструктор параметров обновления адресной книги.
//
// Возвращаемое значение:
//	Структура:
//		* ОбновитьДанныеОбъекта - Булево - Признак обновления данных по объекту.
//		* ОбновитьСловаПоискаПоОбъекту - Булево - Признак обновления слов поиска по объекту.
//		* ОбновитьДоступностьВПоискеПоОбъекту - Булево - Признак обновления доступности в результатах поиска.
//		* ОбновитьДанныеУчастниковМероприятия - Булево - Признак обновления данных об участниках мероприятия.
//
Функция ПараметрыОбновленияАдреснойКниги() Экспорт
	
	ПараметрыОбновленияАдреснойКниги = Новый Структура;
	ПараметрыОбновленияАдреснойКниги.Вставить("ОбновитьДанныеОбъекта", Ложь);
	ПараметрыОбновленияАдреснойКниги.Вставить("ОбновитьСловаПоискаПоОбъекту", Ложь);
	ПараметрыОбновленияАдреснойКниги.Вставить("ОбновитьДоступностьВПоискеПоОбъекту", Ложь);
	ПараметрыОбновленияАдреснойКниги.Вставить("ОбновитьДанныеУчастниковМероприятия", Ложь);
	
	Возврат ПараметрыОбновленияАдреснойКниги;
	
КонецФункции

// Устанавливает значения параметров обновления адресной книги по данным объекта.
//
// Параметры:
//	Объект - СправочникОбъект.Мероприятия - Объект, для которго необходимо определить параметры обновления.
//
// Возвращаемое значение:
//	Структура: см. ПараметрыОбновленияАдреснойКниги.
//
Функция ЗначенияПараметровОбновленияАдреснойКнигиПоОбъекту(Объект) Экспорт
	
	ПараметрыОбновленияАдреснойКниги = ПараметрыОбновленияАдреснойКниги();
		
	Если Не РаботаСАдреснойКнигой.ТребуетсяОбновлениеАдреснойКниги(Объект) Тогда
		Возврат ПараметрыОбновленияАдреснойКниги; 
	КонецЕсли;

	Если Объект.ЭтоНовый() Тогда
		ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОбъекта = Истина;
		ПараметрыОбновленияАдреснойКниги.ОбновитьСловаПоискаПоОбъекту = Истина;
	Иначе
		ПредыдущиеЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.Ссылка, "Наименование, Папка, ПометкаУдаления");

		Если ПредыдущиеЗначенияРеквизитов.Папка <> Объект.Папка Тогда
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОбъекта = Истина;
		КонецЕсли;
		
		Если ПредыдущиеЗначенияРеквизитов.ПометкаУдаления <> Объект.ПометкаУдаления Тогда
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОбъекта = Истина;
			ПараметрыОбновленияАдреснойКниги.ОбновитьДоступностьВПоискеПоОбъекту = Истина;
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеУчастниковМероприятия = Истина;
		КонецЕсли;
		
		Если ПредыдущиеЗначенияРеквизитов.Наименование <> Объект.Наименование Тогда
			ПараметрыОбновленияАдреснойКниги.ОбновитьСловаПоискаПоОбъекту = Истина;
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОбъекта = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыОбновленияАдреснойКниги;

КонецФункции

// Обновляет адресную книгу, согласно установленным параметрам.
//
// Параметры:
//	Объект - СправочникОбъект.Мероприятия - Объект, по данным которого необходимо обновить адресной книги.
//	ПараметрыОбновления - Структура Из КлючИЗначение - см. ПараметрыОбновленияАдреснойКниги.
//
Процедура ОбновитьАдреснуюКнигу(Объект, ПараметрыОбновления) Экспорт
	
	Если ПараметрыОбновления.ОбновитьДанныеОбъекта Тогда
		Справочники.АдреснаяКнига.ОбновитьДанныеОбъекта(
			Объект.Ссылка, Объект.Папка, Справочники.АдреснаяКнига.ПоМероприятиям, Объект.Ссылка);
	КонецЕсли;
	
	Если ПараметрыОбновления.ОбновитьДанныеУчастниковМероприятия Тогда
		УчастникиМероприятия = 
			УправлениеМероприятиями.ПолучитьУчастниковМероприятия(Объект.Ссылка, Истина);
		УчастникиМероприятия = УчастникиМероприятия.ВыгрузитьКолонку("Исполнитель");
				
		Справочники.АдреснаяКнига.ОбновитьСписокПодчиненныхОбъектов(
			Объект.Ссылка,
			Объект.Папка,
			УчастникиМероприятия,
			Справочники.АдреснаяКнига.ПоМероприятиям,
			Объект.Ссылка);
	КонецЕсли;
	
	Если ПараметрыОбновления.ОбновитьСловаПоискаПоОбъекту Тогда
		РегистрыСведений.ОбъектыПоискаВАдреснойКниге.ОбновитьСловаПоискаПоМероприятию(Объект);
	КонецЕсли;
	
	Если ПараметрыОбновления.ОбновитьДоступностьВПоискеПоОбъекту Тогда
		РегистрыСведений.ОбъектыПоискаВАдреснойКниге.ОбновитьДоступностьВПоиске(Объект);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

// Проверяет, подходит ли объект к шаблону бизнес-процесса
Функция ШаблонПодходитДляАвтозапускаБизнесПроцессаПоОбъекту(ШаблонСсылка, ПредметСсылка, Подписчик, ВидСобытия, Условие) Экспорт
	
	Возврат БизнесСобытияВызовСервера.ШаблонПодходитДляАвтозапускаБизнесПроцессаПоПредмету(ШаблонСсылка, 
		ПредметСсылка, Подписчик, ВидСобытия, Условие);
	
КонецФункции

// Возвращает имя предмета процесса по умолчанию
//
Функция ПолучитьИмяПредметаПоУмолчанию(Ссылка) Экспорт
	
	Возврат НСтр("ru='Мероприятие'");
	
КонецФункции

// Формирует HTML представление записи календаря
Функция СформироватьHTMLПредставление(Мероприятие, ДатаЗаписи) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Мероприятие)
		ИЛИ ТипЗнч(Мероприятие) <> Тип("СправочникСсылка.Мероприятия") Тогда
		Возврат РаботаСРабочимКалендаремКлиентСервер.ПолучитьПустоеHTMLПредставление();
	КонецЕсли;
	
	РеквизитыМероприятия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Мероприятие,
		"Наименование, ВидМероприятия, МестоПроведения, Организатор,
		|Председатель, Секретарь, ДатаНачала, ДатаОкончания, Описание");
	
	ТекстНаименование = РеквизитыМероприятия.Наименование;
	РаботаС_HTML.ЗаменитьСпецСимволыHTML(ТекстНаименование);
	РаботаС_HTML.ДобавитьТегиКСсылкам(ТекстНаименование);
	
	ТекстВидМероприятия = Строка(РеквизитыМероприятия.ВидМероприятия);
	РаботаС_HTML.ЗаменитьСпецСимволыHTML(ТекстВидМероприятия);
	
	ТекстМестоПроведения =  РеквизитыМероприятия.МестоПроведения;
	РаботаС_HTML.ЗаменитьСпецСимволыHTML(ТекстМестоПроведения);
	РаботаС_HTML.ДобавитьТегиКСсылкам(ТекстМестоПроведения);
	
	ТекстОрганизатор = Строка(РеквизитыМероприятия.Организатор);
	РаботаС_HTML.ЗаменитьСпецСимволыHTML(ТекстОрганизатор);
	
	ТекстПредседатель = Строка(РеквизитыМероприятия.Председатель);
	РаботаС_HTML.ЗаменитьСпецСимволыHTML(ТекстПредседатель);
	
	ТекстСекретарь = Строка(РеквизитыМероприятия.Секретарь);
	РаботаС_HTML.ЗаменитьСпецСимволыHTML(ТекстСекретарь);
	
	ТекстВремя = Формат(РеквизитыМероприятия.ДатаНачала, "ДФ=ЧЧ:мм") + " - "
		+ Формат(РеквизитыМероприятия.ДатаОкончания, "ДФ=ЧЧ:мм");
	РаботаС_HTML.ЗаменитьСпецСимволыHTML(ТекстВремя);
	
	ТекстДата = Формат(РеквизитыМероприятия.ДатаНачала, "ДФ='дддд, д ММММ гггг'");
	РаботаС_HTML.ЗаменитьСпецСимволыHTML(ТекстДата);
	
	ТекстДатаНачала = Формат(РеквизитыМероприятия.ДатаНачала, "ДФ='дддд, д ММММ гггг ЧЧ:мм'");
	РаботаС_HTML.ЗаменитьСпецСимволыHTML(ТекстДатаНачала);
	
	ТекстДатаОкончания = Формат(РеквизитыМероприятия.ДатаОкончания, "ДФ='дддд, д ММММ гггг ЧЧ:мм'");
	РаботаС_HTML.ЗаменитьСпецСимволыHTML(ТекстДатаОкончания);
	
	ТекстОписание = РеквизитыМероприятия.Описание;
	ТекстОписание = РаботаС_HTML.ЗаменитьСпецСимволыHTML(ТекстОписание);
	ТекстОписание = СтрЗаменить(ТекстОписание, Символы.ПС, "<br>");
	РаботаС_HTML.ДобавитьТегиКСсылкам(ТекстОписание);
	
	ПредставлениеHTML =
		"<html><body scroll=auto>
		|<div style='font-size=14pt;font-family=Arial;line-height:150%'>
		|<b>[Наименование]</b>
		|</div>
		|<div style='font-size=10pt;font-family=Arial;top-margin:10px'>
		|<b>[НадписьВидМероприятия]:</b> [ВидМероприятия]<br>
		|<b>[НадписьМестоПроведения]:</b> [МестоПроведения]<br>
		|<b>[НадписьОрганизатор]:</b> [Организатор]<br>
		|<b>[НадписьПредседатель]:</b> [Председатель]<br>
		|<b>[НадписьСекретарь]:</b> [Секретарь]<br>
		|<b>[НадписьВремя]:</b> [Время]<br>
		|<b>[НадписьДата]:</b> [Дата]<br>
		|<b>[НадписьДатаНачала]:</b> [ДатаНачала]<br>
		|<b>[НадписьДатаОкончания]:</b> [ДатаОкончания]<br>
		|</div>
		|<hr>
		|<div style='font-size=10pt;font-family=Arial'>
		|[Описание]
		|</div>
		|</body></html>";
	
	Если НачалоДня(РеквизитыМероприятия.ДатаОкончания) - НачалоДня(РеквизитыМероприятия.ДатаНачала) <> 0 Тогда
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьВремя]:</b> [Время]<br>", "");
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьДата]:</b> [Дата]<br>", "");
	Иначе
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьДатаНачала]:</b> [ДатаНачала]<br>", "");
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьДатаОкончания]:</b> [ДатаОкончания]<br>", "");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекстМестоПроведения) Тогда
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьМестоПроведения]:</b> [МестоПроведения]<br>", "");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекстПредседатель) Тогда
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьПредседатель]:</b> [Председатель]<br>", "");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекстСекретарь) Тогда
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьСекретарь]:</b> [Секретарь]<br>", "");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекстДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(ТекстДатаОкончания) Тогда
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьДатаНачала]:</b> [ДатаНачала]<br>", "");
		ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
			Символы.ПС + "<b>[НадписьДатаОкончания]:</b> [ДатаОкончания]<br>", "");
	КонецЕсли;
	
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[НадписьВидМероприятия]", НСтр("ru = 'Вид мероприятия'"));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[НадписьМестоПроведения]", НСтр("ru = 'Место проведения'"));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[НадписьОрганизатор]", НСтр("ru = 'Организатор'"));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[НадписьПредседатель]", НСтр("ru = 'Председатель'"));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[НадписьСекретарь]", НСтр("ru = 'Секретарь'"));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[НадписьВремя]", НСтр("ru = 'Время'"));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[НадписьДата]", НСтр("ru = 'Дата'"));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[НадписьДатаНачала]", НСтр("ru = 'Начало'"));
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML,
		"[НадписьДатаОкончания]", НСтр("ru = 'Окончание'"));
	
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[Наименование]", ТекстНаименование);
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[ВидМероприятия]", ТекстВидМероприятия);
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[МестоПроведения]", ТекстМестоПроведения);
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[Организатор]", ТекстОрганизатор);
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[Председатель]", ТекстПредседатель);
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[Секретарь]", ТекстСекретарь);
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[Время]", ТекстВремя);
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[Дата]", ТекстДата);
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[ДатаНачала]", ТекстДатаНачала);
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[ДатаОкончания]", ТекстДатаОкончания);
	ПредставлениеHTML = СтрЗаменить(ПредставлениеHTML, "[Описание]", ТекстОписание);
	
	Возврат ПредставлениеHTML;
	
КонецФункции

// Возвращает отслеживаемые реквизиты для дополнительного свойства ПредыдущиеЗначенияРеквизитов.
//
// Возвращаемое значение:
//  Строка - Отслеживаемые реквизиты.
//
Функция ОтслеживаемыеРеквизиты() Экспорт
	
	ОтслеживаемыеРеквизиты =
		"Наименование, Описание, Помещение, ДатаНачала, ДатаОкончания, ПометкаУдаления";
	
	Возврат ОтслеживаемыеРеквизиты;
	
КонецФункции

// Проверяет что участник мероприятия является участником.
//
// Параметры:
//  РеквизитыМероприятия - СправочникСсылка.Мероприятия, Структура - Мероприятие.
// 
// Возвращаемое значение:
//  Тип - Текстовое описание содержания возвращаемого значения функции.
//
Функция ОрганизаторЯвляетсяУчастником(Мероприятие) Экспорт
	
	Если ТипЗнч(Мероприятие) = Тип("Структура") Тогда
		РеквизитыМероприятия = Мероприятие;
	Иначе
		РеквизитыМероприятия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Мероприятие, "Ссылка, Организатор");
	КонецЕсли;
	
	ОрганизаторЯвляетсяУчастником = РегистрыСведений.УчастникиМероприятия.ЯвляетсяУчастникомМероприятия(
		РеквизитыМероприятия.Ссылка,
		Сотрудники.ОсновнойСотрудникПользователя(РеквизитыМероприятия.Организатор));
	Если Не ОрганизаторЯвляетсяУчастником Тогда
		ОрганизаторЯвляетсяУчастником = РегистрыСведений.УчастникиМероприятия.ЯвляетсяУчастникомМероприятия(
		РеквизитыМероприятия.Ссылка,
		РеквизитыМероприятия.Организатор);
	КонецЕсли;
	
	Возврат ОрганизаторЯвляетсяУчастником;
	
КонецФункции

// Данные календаря по предмету.
// 
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия.
// 
// Возвращаемое значение:
//  Массив из Структура - Данные календаря по предмету. См. РаботаСРабочимКалендаремСервер.НовыйДанныеЗаписиКалендаряПоПредмету().
//
Функция ДанныеКалендаряПоПредмету(Мероприятие) Экспорт
	
	ДанныеКалендаряПоПредмету = Новый Массив;
	
	ПриглашенияАктуальны = УправлениеМероприятиями.ПриглашенияАктуальны(Мероприятие);
	Если Не ПриглашенияАктуальны Тогда
		Возврат ДанныеКалендаряПоПредмету;
	КонецЕсли;
	
	РеквизитыМероприятия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Мероприятие,
		"Наименование, МестоПроведения, Описание, ДатаНачала, ДатаОкончания");
	
	УчастникиМероприятия = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(Мероприятие);
	
	Для Каждого СтрокаУчастника Из УчастникиМероприятия Цикл
		
		УчастникПодходящегоТипа =
			Метаданные.Справочники.ЗаписиРабочегоКалендаря.Реквизиты.Сотрудник.Тип.СодержитТип(
				ТипЗнч(СтрокаУчастника.Исполнитель));
		Если Не УчастникПодходящегоТипа Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеЗаписиКалендаряПоПредмету =
			РаботаСРабочимКалендаремСервер.НовыйДанныеЗаписиКалендаряПоПредмету();
		ДанныеЗаписиКалендаряПоПредмету.Предмет = Мероприятие;
		ДанныеЗаписиКалендаряПоПредмету.Сотрудник = СтрокаУчастника.Исполнитель;
		ДанныеЗаписиКалендаряПоПредмету.ДатаНачала = РеквизитыМероприятия.ДатаНачала;
		ДанныеЗаписиКалендаряПоПредмету.ДатаОкончания = РеквизитыМероприятия.ДатаОкончания;
		ДанныеЗаписиКалендаряПоПредмету.ВесьДень = Ложь;
		ДанныеЗаписиКалендаряПоПредмету.ПодключатьНапоминаниеАвтоматически = Истина;
		ДанныеЗаписиКалендаряПоПредмету.ОповещатьОбИзменении = Истина;
		
		ДанныеЗаписиКалендаряПоПредмету.Состояние =
			ПолучитьСоответствующееСостояниеЗаписиРабочегоКалендаря(
				СтрокаУчастника.СостояниеПриглашения);
		
		ОписаниеЗаписиКалендаря = Новый Массив;
		ОписаниеЗаписиКалендаря.Добавить(СокрЛП(РеквизитыМероприятия.Наименование));
		Если ЗначениеЗаполнено(РеквизитыМероприятия.МестоПроведения) Тогда
			ОписаниеЗаписиКалендаря.Добавить(Символы.ПС);
			ОписаниеЗаписиКалендаря.Добавить(НСтр("ru = 'Место:'"));
			ОписаниеЗаписиКалендаря.Добавить(" ");
			ОписаниеЗаписиКалендаря.Добавить(РеквизитыМероприятия.МестоПроведения);
		КонецЕсли;
		Если ЗначениеЗаполнено(РеквизитыМероприятия.Описание) Тогда
			ОписаниеЗаписиКалендаря.Добавить(Символы.ПС);
			ОписаниеЗаписиКалендаря.Добавить(СокрЛП(РеквизитыМероприятия.Описание));
		КонецЕсли;
		ДанныеЗаписиКалендаряПоПредмету.Описание = СтрСоединить(ОписаниеЗаписиКалендаря, Символы.ПС);
		
		ДанныеКалендаряПоПредмету.Добавить(ДанныеЗаписиКалендаряПоПредмету);
		
	КонецЦикла; 
	
	Возврат ДанныеКалендаряПоПредмету;
	
КонецФункции

// Дата учета мероприятия
//
// Параметры:
//  Мероприятие - СправочникСсылка.Мероприятия
// 
// Возвращаемое значение:
//  Дата
//
Функция ДатаУчетаМероприятия(Мероприятие) Экспорт
	
	Даты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Мероприятие, "ДатаСоздания,ДатаНачала");
	Если ЗначениеЗаполнено(Даты.ДатаНачала) Тогда
		
		Возврат Даты.ДатаНачала;
		
	Иначе
		
		Возврат Даты.ДатаСоздания; 
		
	КонецЕсли;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

#Область АдреснаяКнига

// Вернет Истина, у этого модуля менеджера есть функция ПолучитьАдресФото.
// 
// Возвращаемое значение:
//  Булево.
// 
Функция ЕстьФункцияПолученияФото() Экспорт
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	// Нет настроек.
	
КонецПроцедуры

// Дополняет объект реквизитами, хранящимися отдельно от объекта либо в служебной части самого объекта,
// не предназначенной для вывода в отчетах.
//
// Параметры:
//  Объект - СправочникОбъект
//         - ДокументОбъект
//         - ПланВидовРасчетаОбъект
//         - ПланСчетовОбъект
//         - ПланВидовХарактеристикОбъект -
//           версионируемый объект.
//  ДополнительныеРеквизиты - ТаблицаЗначений - коллекция дополнительных реквизитов, которые требуется сохранить вместе
//                                              с версией объекта:
//   * Идентификатор - Произвольный - уникальный идентификатор реквизита. Требуется при восстановлении из версии
//                                    объекта в случае, когда значение реквизита хранится отдельно от объекта.
//   * Наименование - Строка - название реквизита.
//   * Значение - Произвольный - значение реквизита.
//
Процедура ПриПодготовкеДанныхОбъекта(Объект, ДополнительныеРеквизиты) Экспорт 
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	УчастникиМероприятия.ИдентификаторОтметкиВремени,
		|	УчастникиМероприятия.Исполнитель,
		|	УчастникиМероприятия.КонтрольнаяСуммаПриглашения,
		|	УчастникиМероприятия.Мероприятие,
		|	УчастникиМероприятия.Отсутствовал,
		|	УчастникиМероприятия.Порядок,
		|	УчастникиМероприятия.СостояниеПриглашения,
		|	УчастникиМероприятия.ЯвкаОбязательна
		|ИЗ
		|	РегистрСведений.УчастникиМероприятия КАК УчастникиМероприятия
		|ГДЕ
		|	УчастникиМероприятия.Мероприятие = &Мероприятие");
	
	Запрос.УстановитьПараметр("Мероприятие", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаИстории = РезультатЗапроса.Выгрузить();
	
	СтрокаИстории = ДополнительныеРеквизиты.Добавить();
	СтрокаИстории.Идентификатор = Новый УникальныйИдентификатор("88a2e071-f342-482b-a5b0-468c72ef9a78");
	СтрокаИстории.Наименование = "УчастникиМероприятия";
	СтрокаИстории.Значение = Новый ХранилищеЗначения(ТаблицаИстории);
	
КонецПроцедуры

// Восстанавливает значения реквизитов объекта, хранящихся отдельно от объекта.
//
// Параметры:
//  Объект - СправочникОбъект
//         - ДокументОбъект
//         - ПланВидовРасчетаОбъект
//         - ПланСчетовОбъект
//         - ПланВидовХарактеристикОбъект -
//           версионируемый объект:
//   * Ссылка - ЛюбаяСсылка
//  ДополнительныеРеквизиты - ТаблицаЗначений - коллекция дополнительных реквизитов, которые были сохранены вместе с
//                                              версией объекта:
//   * Идентификатор - Произвольный - уникальный идентификатор реквизита.
//   * Наименование - Строка - название реквизита.
//   * Значение - Произвольный - значение реквизита.
//
Процедура ПриВосстановленииВерсииОбъекта(Объект, ДополнительныеРеквизиты) Экспорт
	
	// Пытаемся найти сохраненную версию истории:
	ИскомаяСтрока = ДополнительныеРеквизиты.Найти("УчастникиМероприятия", "Наименование");
	Если ИскомаяСтрока = Неопределено
		Или ТипЗнч(ИскомаяСтрока.Значение) <> Тип("ХранилищеЗначения") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаИстории = ИскомаяСтрока.Значение.Получить();
	
	НаборЗаписей = РегистрыСведений.УчастникиМероприятия.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Мероприятие.Установить(Объект.Ссылка);
	НаборЗаписей.Загрузить(ТаблицаИстории);
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("ВидМероприятия");
	Поля.Добавить("ДатаНачала");
	Поля.Добавить("Наименование");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Представление = УправлениеМероприятиямиКлиентСервер.РасширенноеПредставлениеСДатой(
		Данные.ВидМероприятия,
		Данные.ДатаНачала,
		Данные.Наименование);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет участника в переданную таблицу.
//
Процедура ДобавитьУчастникаВТаблицуНабора(
			ТаблицаНабора,
			Участник,
			Изменение = Ложь) Экспорт
	
	Если Метаданные.ОпределяемыеТипы.КонтейнерыСотрудников.Тип.СодержитТип(ТипЗнч(Участник)) Тогда
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(
			ТаблицаНабора, Участник, Изменение);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает соответствующее состояние записи календаря
Функция ПолучитьСоответствующееСостояниеЗаписиРабочегоКалендаря(СостояниеПриглашения)
	
	СостояниеЗаписиРабочегоКалендаря = Неопределено;
	
	Если СостояниеПриглашения = Перечисления.СостоянияПриглашения.Принято Тогда
		СостояниеЗаписиРабочегоКалендаря = Перечисления.СостоянияЗаписейРабочегоКалендаря.Принято;
	ИначеЕсли СостояниеПриглашения = Перечисления.СостоянияПриглашения.НеПринято Тогда
		СостояниеЗаписиРабочегоКалендаря = Перечисления.СостоянияЗаписейРабочегоКалендаря.Отклонено;
	ИначеЕсли СостояниеПриглашения = Перечисления.СостоянияПриглашения.Отправлено 
		ИЛИ Не ЗначениеЗаполнено(СостояниеПриглашения) Тогда
		СостояниеЗаписиРабочегоКалендаря = Перечисления.СостоянияЗаписейРабочегоКалендаря.ПодВопросом;
	КонецЕсли;
	
	Возврат СостояниеЗаписиРабочегоКалендаря;
	
КонецФункции

#КонецОбласти

#КонецЕсли