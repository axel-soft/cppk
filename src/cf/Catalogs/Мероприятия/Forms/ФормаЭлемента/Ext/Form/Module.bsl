#Область ОписаниеПеременных

&НаКлиенте
Перем ТекущийОбъектОбзора;

&НаКлиенте
Перем ТекущиаяВерсияОбъектОбзора;

&НаКлиенте
Перем УстановленОбзорДолгогоФормирования;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЯвкаОбязательнаПоУмолчанию = УправлениеМероприятиями.ПолучитьПерсональнуюНастройку("ЯвкаОбязательнаПоУмолчанию");
	
	// Проверка прав на гриф.
	Если Не Пользователи.ЭтоПолноправныйПользователь() И ЗначениеЗаполнено(Объект.ГрифДоступа) Тогда
		ПраваНаГриф = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(Объект.ГрифДоступа);
		Если Не ПраваНаГриф.Чтение Тогда
			ТекстОшибки = НСтр("ru = 'Невозможно открыть мероприятие: отсутствуют права на гриф доступа'");
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	// Протоколирование работы пользователей
	ПротоколированиеРаботыСотрудников.ЗаписатьОткрытие(Объект.Ссылка);
	
	// Кэшируемые значения
	ПустаяСсылкаНаСотрудника = Справочники.Сотрудники.ПустаяСсылка();
	ПользователиПустаяСсылка = Справочники.Пользователи.ПустаяСсылка();
	НачальноеЗначениеДатаНачала = Объект.ДатаНачала;
	НачальноеЗначениеДатаОкончания = Объект.ДатаОкончания;
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ТаймлистИспользуется = ТаймлистПовтИсп.ТаймлистИспользуется();
	ДоступноРаспознаваниеТаймлист = ТаймлистПовтИсп.ДоступноРаспознаваниеПоЗапросу();
	
	// Категории данных
	ИспользоватьКатегорииДанных = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	ИспользоватьАвтоматическуюКатегоризациюДанных = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюКатегоризациюДанных");
	ИспользоватьПроверкуКатегорий = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	
	// Установка параметров файлов
	Файлы.Параметры.УстановитьЗначениеПараметра("ВладелецФайла", Объект.Ссылка);
	
	Файлы.Параметры.УстановитьЗначениеПараметра("ПользовательИЕгоСотрудники", 
		СотрудникиВызовСервера.ПользовательИЕгоСотрудники(Пользователи.ТекущийПользователь()));	
	
	РаботаСФайламиВызовСервера.ЗаполнитьУсловноеОформлениеСпискаФайлов(Файлы);
	НайтиИПоказатьКоличествоФайлов();
	
	// Установка времени
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Элементы.РешенияСрокИсполнения.Формат = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='дд.ММ.гггг ЧЧ:мм'", "ДЛФ=D");
	
	// Вывод предмета строкой
	Если ЗначениеЗаполнено(Объект.Предмет) Тогда 
		ПредметСтрокой = ОбщегоНазначенияДокументооборотВызовСервера.ПредметСтрокой(Объект.Предмет);
	КонецЕсли;	
	
	ПерепискаПоПредмету = Неопределено;
	НачальныйПерепискаПоПредмету = ПерепискаПоПредмету;
	
	Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Параметры.Основание) Тогда
		НужноВыполнитьСопоставлениеЭП = Истина;
	КонецЕсли;	   
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
		
		МассивФайлов =
			РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Параметры.ЗначениеКопирования, Ложь);
		
		Если МассивФайлов.Количество() > 0 Тогда
			
			Для Каждого ФайлСсылка Из МассивФайлов Цикл
				
				ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ФайлСсылка);
				АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
				
				НоваяСтрока = ФайлыДобавленные.Добавить();
				НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
				НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
				НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
				НоваяСтрока.ШаблонОснованиеДляСоздания = ФайлСсылка.ШаблонОснованиеДляСоздания;
				НоваяСтрока.ДобавленИзШаблона = ЗначениеЗаполнено(НоваяСтрока.ШаблонОснованиеДляСоздания);
				
			КонецЦикла;
			
			Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
			
			КоличествоФайлов = МассивФайлов.Количество();
			
		КонецЕсли;
		
		// Копирование категорий данных
		Если ИспользоватьКатегорииДанных Тогда
			КатегорииИсточника = РаботаСКатегориямиДанных.ПолучитьКатегорииОбъекта(Параметры.ЗначениеКопирования);
			Для Каждого Категория Из КатегорииИсточника Цикл
				НоваяСтрока = СписокКатегорийДанных.Добавить();
				НоваяСтрока.Значение = Категория.Ссылка;
				НоваяСтрока.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(Категория.Ссылка);
			КонецЦикла;
		КонецЕсли;
		
		// Копирование участников и включение организатора в участники
		УчастникиЗначенияКопирования = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(Параметры.ЗначениеКопирования);
		Участники.Загрузить(УчастникиЗначенияКопирования);
		ОбновитьЧасовыеПоясаУчастниковНаСервере();
		
		ДобавитьВУчастники(Объект.Организатор);
		ДобавитьВУчастники(Объект.ОрганизаторКонтактноеЛицо);
		
		Для Каждого Участник Из Участники Цикл
			Участник.СостояниеПриглашения = Неопределено;
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(Параметры.Основание) Тогда // Ввод на основании	
		
		Если ТипЗнч(Параметры.Основание) = Тип("Структура") Тогда
			ОснованиеДокумента = Параметры.Основание.Основание;
		Иначе
			ОснованиеДокумента = Параметры.Основание;
		КонецЕсли;
		
	 	Если ТипЗнч(ОснованиеДокумента) = Тип("Массив") 
			И ОснованиеДокумента.Количество() > 0
			И ТипЗнч(ОснованиеДокумента[0]) = Тип("СправочникСсылка.Файлы") Тогда 			
			
			Для Каждого Файл Из ОснованиеДокумента Цикл  
				ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(Файл);
				АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
				
				НоваяСтрока = ФайлыДобавленные.Добавить();
				НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
				НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
				НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
				НоваяСтрока.ДобавленИзШаблона = Ложь;
			КонецЦикла;
			
			Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
			КоличествоФайлов = ФайлыДобавленные.Количество();	
			
		ИначеЕсли ДелопроизводствоКлиентСервер.ЭтоДокумент(ОснованиеДокумента) Тогда
			
			МассивФайлов =
				РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(ОснованиеДокумента, Ложь);
				
			Если МассивФайлов.Количество() > 0 Тогда
				
				Для Каждого ФайлСсылка Из МассивФайлов Цикл
					
					ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ФайлСсылка);
					АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
					
					НоваяСтрока = ФайлыДобавленные.Добавить();
					НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
					НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
					НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
					НоваяСтрока.ДобавленИзШаблона = Ложь;
					
				КонецЦикла;
				
				Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
				
				КоличествоФайлов = МассивФайлов.Количество();
				
			КонецЕсли;
			
			Если ТипЗнч(ОснованиеДокумента) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
				Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					ОснованиеДокумента,
					"ВидДокумента.ЯвляетсяВходящейКорреспонденцией,
					|ВидДокумента.ЯвляетсяИсходящейКорреспонденцией");
					
				Если Реквизиты.ВидДокументаЯвляетсяВходящейКорреспонденцией 
					Или Реквизиты.ВидДокументаЯвляетсяИсходящейКорреспонденцией Тогда
				
					ПерепискаПоПредмету = ОснованиеДокумента;
				
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ОснованиеДокумента) = Тип("СправочникСсылка.Мероприятия") Тогда 
			УчастникиОснования = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(ОснованиеДокумента);
			Участники.Загрузить(УчастникиОснования);
			ОбновитьЧасовыеПоясаУчастниковНаСервере();
			
			Для Каждого Участник Из Участники Цикл
				Участник.СостояниеПриглашения = Неопределено;
			КонецЦикла;
			
			ЗаполнитьЗначенияСвойств(Объект, ОснованиеДокумента, "Председатель");
			ЗаполнитьЗначенияСвойств(Объект, ОснованиеДокумента, "Секретарь");
			
		ИначеЕсли ТипЗнч(ОснованиеДокумента) = Тип("СправочникСсылка.Проекты") Тогда
			
			Для Каждого ЭлементПроектнаяКоманда Из ОснованиеДокумента.ПроектнаяКоманда Цикл
				ДобавитьВУчастники(ЭлементПроектнаяКоманда.Исполнитель);
			КонецЦикла;
			
			Объект.Председатель = 
				Сотрудники.ОсновнойСотрудникПользователя(
				ОснованиеДокумента.Руководитель);
			
			ДобавитьВУчастники(Объект.Председатель);
			
		ИначеЕсли ТипЗнч(ОснованиеДокумента) = Тип("СправочникСсылка.Контрагенты")
			Или ТипЗнч(ОснованиеДокумента) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			
			ДобавитьВУчастники(ОснованиеДокумента);
			
		ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ОснованиеДокумента) Тогда 
			
			Параметры.ПисьмоОснование = ОснованиеДокумента;
			
			Если ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(ОснованиеДокумента) Тогда
				
				ОтправительАдресат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеДокумента, "ОтправительАдресат");
				Если ЗначениеЗаполнено(ОтправительАдресат) Тогда
					ДанныеАдресата = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(ОтправительАдресат);
					ДобавитьВУчастники(ДанныеАдресата.Контакт);
				КонецЕсли;
				
			ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(ОснованиеДокумента) Тогда
				
				Для Каждого Получатель Из ОснованиеДокумента.ПолучателиПисьма Цикл
					Адресат = Получатель.Адресат;
					Если ЗначениеЗаполнено(Адресат) Тогда
						ДанныеАдресата = ВстроеннаяПочтаСервер.ПолучитьПредставлениеИКонтактАдресата(Адресат);
						ДобавитьВУчастники(ДанныеАдресата.Контакт);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			// Заполнение файлов из письма
			МассивФайлов =
				РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(ОснованиеДокумента, Ложь);
			
			Если МассивФайлов.Количество() > 0 Тогда
				
				Для Каждого ФайлСсылка Из МассивФайлов Цикл
					
					ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ФайлСсылка);
					АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
					
					НоваяСтрока = ФайлыДобавленные.Добавить();
					НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
					НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
					НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
					НоваяСтрока.Расширение = ДанныеФайла.Расширение;
					НоваяСтрока.Размер = ДанныеФайла.Размер;
					НоваяСтрока.ДобавленИзШаблона = Ложь;
					
				КонецЦикла;
				
				Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
				
				КоличествоФайлов = МассивФайлов.Количество();
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("МассивФайлов") Тогда
		
		МассивФайлов = Параметры.МассивФайлов;
		Если МассивФайлов.Количество() <> 0 Тогда
			Для Каждого ФайлПринятый Из МассивФайлов Цикл
				Файл = Новый Файл(ФайлПринятый);
				НоваяСтрока = ФайлыДобавленные.Добавить();
				НоваяСтрока.Наименование = Файл.ИмяБезРасширения;
				НоваяСтрока.ПолныйПуть = ФайлПринятый;
				НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(Файл.Расширение);
				НоваяСтрока.ДобавленИзШаблона = Ложь;
			КонецЦикла;
			
			Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
			
			КоличествоФайлов = МассивФайлов.Количество();
			
			Если МассивФайлов.Количество() = 1 Тогда
				Файл = Новый Файл(МассивФайлов[0]);
				Объект.Заголовок = Файл.ИмяБезРасширения;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ЕстьЗашифрованныеИлиЗанятыеФайлы = РаботаСФайламиВызовСервера.ЕстьЗашифрованныеИлиЗанятыеФайлы(Объект.Ссылка);
	Если Не ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи()
		И Не ЭлектроннаяПодпись.ИспользоватьШифрование() Тогда
		
		Элементы.ФайлыПодписан.Видимость = Ложь;
	КонецЕсли;
	
	ПриложениеЯвляетсяВебКлиентом = ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом();
	// Режим "Тонкий клиент" Windows.
	Элементы.ФайлыВставитьКартинкуИзБуфера.Видимость = Не ПриложениеЯвляетсяВебКлиентом И ОбщегоНазначения.ЭтоWindowsКлиент();
	
	// Чтение категорий данных
	Если ИспользоватьКатегорииДанных Тогда
		СписокКатегорийДанныхЗначение = РеквизитФормыВЗначение("СписокКатегорийДанных");
		РаботаСКатегориямиДанных.ЗагрузитьДанныеОКатегориях(Элементы, Объект, СписокКатегорийДанныхЗначение, ИспользоватьАвтоматическуюКатегоризациюДанных, Параметры); 
		ЗначениеВРеквизитФормы(СписокКатегорийДанныхЗначение, "СписокКатегорийДанных"); 
		Если РольДоступна(Метаданные.Роли.ПроверкаКатегорий) Тогда
			Если ИспользоватьАвтоматическуюКатегоризациюДанных Тогда
				АвтоматическаяКатегоризацияВыполнена = РаботаСКатегориямиДанных.ПолучитьФлагВыполненияАвтоматическойКатегоризации(Объект.Ссылка);
				Если АвтоматическаяКатегоризацияВыполнена Тогда
					Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияВыполнена;
				Иначе
					Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияНеВыполнена;
				КонецЕсли;
			Иначе
				Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
			КонецЕсли;
			Если ИспользоватьПроверкуКатегорий Тогда
				КатегорииПроверены = РаботаСКатегориямиДанных.ПолучитьФлагПроверкиКатегорийОбъекта(Объект.Ссылка);
				Если КатегорииПроверены Тогда
					Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииПроверены;
				Иначе
					Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииНеПроверены;
				КонецЕсли;
			Иначе
				Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
			Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.Категории.Видимость = Ложь;
	КонецЕсли;
	
	// Видимость программы и протокола
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ВидМероприятия", Объект.ВидМероприятия));
	УчитыватьКакПротокольноеМероприятие = ПолучитьФункциональнуюОпциюФормы("УчитыватьКакПротокольноеМероприятие");
	УчитыватьКуратора = ПолучитьФункциональнуюОпциюФормы("УчитыватьКуратора");
	ДлительностьПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидМероприятия, "Длительность");
	Если Не ЗначениеЗаполнено(ДлительностьПоУмолчанию) Тогда
		ДлительностьПоУмолчанию = 3600;
	Иначе
		ДлительностьПоУмолчанию = ДлительностьПоУмолчанию * 60;
	КонецЕсли;
	
	УстановитьВидимость();
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьРеквизитыПоВидуМероприятия();
	КонецЕсли;
	
	// Заполнение участников мероприятия
	ЗаполнитьУчастниковМероприятия();
	
	// Вывод информационных надписей
	ОбновитьМестныеВременаНаСервере();
	ВывестиДлительностьВПрограмме();
	ВывестиРешенияВПрограмме();
	ВывестиПротоколМероприятия();
	
	СледующееМероприятие = УправлениеМероприятиями.ПолучитьСледующееМероприятие(Объект.Ссылка);
	Если Не ЗначениеЗаполнено(СледующееМероприятие) Тогда 
		Элементы.СледующееМероприятие.Видимость = Ложь;
	КонецЕсли;	
	
	// Инициализация учета времени
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияВестиУчетТрудозатрат,
		Объект.Ссылка,
		ВидыРабот,
		СпособУказанияВремени,
		Команды.ПереключитьХронометраж,
		Элементы.ПереключитьХронометраж,
		Элементы.УказатьТрудозатраты);
	
	// Заполнение рабочих групп
	РаботаСРабочимиГруппами.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Запись в список последних
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаСвойства");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	
	// Сохранение вводимых значений
	СохранениеВводимыхЗначений.ЗаполнитьСписокВыбора(
		ЭтотОбъект,
		ЭлементыДляСохранения(),
		ИмяФормы);
	
	ОтображатьПодсказкуСледующегоДействия = ТекущийПользователь = Объект.Организатор
		Или Сотрудники.ЭтоСотрудникПользователя(
			Сотрудники.ОсновнойСотрудникПользователя(Объект.Секретарь))
		Или Сотрудники.ЭтоСотрудникПользователя(
			Сотрудники.ОсновнойСотрудникПользователя(Объект.Председатель));
		
	Элементы.ПодсказкаСледующегоДействия.Видимость = ОтображатьПодсказкуСледующегоДействия;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ДобавитьВУчастники(Объект.Организатор);
		ДобавитьВУчастники(Объект.ОрганизаторКонтактноеЛицо);
		ПринятьПриглашениеТекущимПользователем();
	КонецЕсли;
	
	// Показ помеченных на удаление файлов
	ПоказатьПомеченныеНаУдаление = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ИмяФормы,
		"ПоказатьПомеченныеНаУдаление",
		Ложь);
	НастроитьПоказПомеченныхНаУдалениеФайлов();
	
	ВывестиСтрокуСостояний();
	
	// Вывод состояний
	ОбновитьСостоянияМероприятия();
	
	ПроверятьОтсутствие = Отсутствия.ПредупреждатьОбОтсутствии();
	ПроверитьОтсутствие = Не ЗначениеЗаполнено(Объект.Ссылка);
	
	ИспользоватьСхемыПомещений = ПолучитьФункциональнуюОпцию("ИспользоватьСхемыПомещений");
	Элементы.МестоПроведения.КнопкаВыбора = ИспользоватьСхемыПомещений;
	ПрочитатьМестоПроведения();
	
	// Доступность по правам
	УстановитьДоступностьПоПравам();
	
	УправлениеМероприятиямиПереопределяемый.ОбработкаЗаполненияДополнительныхРеквизитов(
		ЭтотОбъект,
		Объект,
		Параметры.Основание);
	
	// Организатор текстом.
	Если ЗначениеЗаполнено(Объект.Организатор) И ЗначениеЗаполнено(Объект.ОрганизаторКонтактноеЛицо) Тогда
		ОрганизаторТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1, %2", Объект.Организатор, Объект.ОрганизаторКонтактноеЛицо);
	Иначе
		ОрганизаторТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1", Объект.Организатор);
	КонецЕсли;
	
	УстановитьДоступностьПоСостоянию();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаПечать;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Параметры.Свойство("СотрудникЗаписиКалендаря", СотрудникЗаписиКалендаря);
	ОбновитьДанныеСвязаннойЗаписиКалендаря();
	ОбновитьДанныеПриглашения();
	ИспользоватьРабочийКалендарь = ПолучитьФункциональнуюОпцию("ИспользоватьРабочийКалендарь");
	
	ЗаполнитьСписокТиповПредмета();
	
	Элементы.ПредставлениеМестногоЧасовогоПояса.Видимость = ЗначениеЗаполнено(ПредставлениеМестногоЧасовогоПояса);
	Элементы.ОсталосьДоНачала.Видимость = Не Элементы.ПредставлениеМестногоЧасовогоПояса.Видимость;
	
	ОбсужденияДокументооборот.ОбновитьВидимостьОбсужденийВАвтообновляемомЧате(ЭтотОбъект);
	
	ДоступныеВидыМероприятий = Параметры.ДоступныеВидыМероприятий;
	Если Параметры.ДоступныеВидыМероприятий.Количество() > 0 Тогда
		
		Элементы.ВидМероприятия.СписокВыбора.ЗагрузитьЗначения(
			ДоступныеВидыМероприятий.ВыгрузитьЗначения());
		Элементы.ВидМероприятия.РежимВыбораИзСписка = Истина;
		
		Если ДоступныеВидыМероприятий.Количество() = 1
			И Не ЗначениеЗаполнено(Объект.ВидМероприятия) Тогда
			
			Объект.ВидМероприятия = ДоступныеВидыМероприятий[0].Значение;
			
			ПриИзмененииВидаМероприятия();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьЗадачиПоПриложению();
	
	// Шаблоны автозапуска
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТолькоЧтоСозданныйОбъект = Истина;
	КонецЕсли;
	
	// Ввод нового
	Если Объект.Ссылка.Пустая() Тогда 
		// При создании предмета, показываем все действия
		ДействияПоказыватьВсе = Истина;
		Элементы.ДействияПоказатьВсе.Пометка = ДействияПоказыватьВсе;
	КонецЕсли;
	
	ПользовательЯвляетсяЗаместителемИлиПомощником = ДействияСерверПовтИсп.ПользовательЯвляетсяЗаместителемИлиПомощником();
	
	ОбновитьПараметрыВидаОбъекта();
	ДействияСобытия.ПриСозданииФормыПредметаНаСервере(ЭтотОбъект, Параметры, ПараметрыВидаОбъекта);
	ОбновитьОбластьЗадач();
	
	ПредложитьОтправитьПриглашение = Не ЗначениеЗаполнено(Объект.Ссылка);
	
	ОбновитьНастройкиОбзора();
	ОбновитьДеревоОбзораНаСервере();
	
	ОткрытьЗапрошеннуюСтраницу();
	
	СпособСогласованияВРежимеЗамечаний =
		СогласованиеВРежимеЗамечанийСерверПовтИсп.СпособСогласованияВРежимеЗамечаний();
	
	ОбновитьВидимостьКомандыЗакончитьРедактирование();
	
	ЭтоВебКлиент = ОбщегоНазначения.ЭтоВебКлиент();
	ЭтоТонкийКлиент = ОбщегоНазначенияДокументооборот.ЭтоТонкийКлиент();
	
	// Pdf
	Если ЭтоТонкийКлиент Или (ЭтоВебКлиент И ПолеPDFРаботаетВВебКлиенте) Тогда
		Если ПоказыватьPdfСредствами1С Тогда
			ВывестиPDFДокументНаСервере();
		КонецЕсли;
	КонецЕсли;
	//Конец Pdf
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ЭтоМобильныйКлиент = ПараметрыСеанса.ЭтоМобильныйКлиент;
	Если ЭтоМобильныйКлиент Тогда
		МК_НастроитьЭлементыФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВывестиДлительностьМероприятия();
	ВывестиСуммарнуюДлительностьПрограммы();
	ВывестиОсталосьДоНачала();
	ВывестиПодсказкуСледующегоДействия();
	ОбновитьСпискиВыбораДат();
	УстановитьДоступность();
	ЗаполнитьИнтервалыНапоминания();
	
	Оповестить("ОбновитьСписокПоследних");
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ДействияКлиент.РазвернутьДействия(Элементы.Действия, Действия);
	
	Если НужноВыполнитьСопоставлениеЭП Тогда
		УстановитьСоответствиеФайловИЭП();      
		НужноВыполнитьСопоставлениеЭП = Ложь;
	КонецЕсли;
	
	Если ЭтоМобильныйКлиент Тогда
		МК_ОбновитьЗаголовокДеревоОбзора();
	КонецЕсли;
	
	Если Параметры.Свойство("Действие")
		И ЗначениеЗаполнено(Параметры.Действие) Тогда
		ПодключитьОбработчикОжидания("ОткрытьДействиеОтложено", 0.5, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПередЗакрытием(
		Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированность) Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	КонецЕсли;
	
	Если ЗакрытьФормуПриНаличииЗанятыхФайлов <> Истина Тогда
		ДелопроизводствоКлиент.ПередЗакрытиемДокумента(Объект, Отказ, ЭтотОбъект);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ТолькоЧтоСозданныйОбъект И БылПоказанДиалогИнтерактивногоЗапускаОбработки <> Истина Тогда
		ОбработкиОбъектовКлиент.ВыполнитьИнтерактивныйЗапускОбработки(
			ЭтотОбъект,
			Объект.Ссылка, 
			ВидИнтерактивногоСобытияАвтозапускаОбработки,
			УсловияЗапуска, 
			ПредопределенноеЗначение("Перечисление.ВидыИнтерактивныхДействий.ЗакрытиеКарточкиТолькоЧтоСозданногоДокумента"),
			БылПоказанДиалогИнтерактивногоЗапускаОбработки,
			Отказ);		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ПредложитьОтправитьПриглашение() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не ПараметрыЗаписи.Свойство("ЗакрытьПослеЗаписи") Тогда
		ПараметрыЗаписи.Вставить("ЗакрытьПослеЗаписи", Ложь);
	КонецЕсли;
	
	ИнформацияОбОтсутствии = Неопределено;
	Если Не ОтсутствияКлиент.ПроверитьОтсутствиеПоМероприятию(ЭтотОбъект, Отказ, ИнформацияОбОтсутствии) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюПослеВопросаОВозможностиОтсутствия",
			ЭтотОбъект, ПараметрыЗаписи);
		ОтсутствияКлиент.ПоказатьПредупреждениеОбОтсутствииПоМероприятию(
			ИнформацияОбОтсутствии, ОписаниеОповещения, ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Объект.Программа Цикл
		ЗаполнитьСтрокуПрограммы(Строка, ПараметрыПреобразованияМестногоВремени);
	КонецЦикла;
	
	УправлениеМероприятиямиКлиентСервер.ВывестиРешенияПрограммы(Объект.Программа, Объект.Протокол);
	
	Если Не УчитыватьКакПротокольноеМероприятие Тогда
		Объект.Председатель = ПустаяСсылкаНаСотрудника;
		Объект.Секретарь = ПустаяСсылкаНаСотрудника;
	КонецЕсли;
	
	Если Не УчитыватьКуратора Тогда
		Объект.Куратор = ПустаяСсылкаНаСотрудника;
	КонецЕсли;
	
	УстановитьМестоПроведения();
	
	Если ИзменилсяКлючНастроекОбработки Тогда
		
		ОписаниеВозврата = ПравилаОбработкиКлиент.ПроверитьВозможностьСменыКлючевыхРеквизитов(
			ВидМероприятияИзменен, Объект.Ссылка);
			
		Отказ = ОписаниеВозврата.Отказ;	
			
		Если Отказ Тогда
			ПоказатьПредупреждение(, ОписаниеВозврата.ТекстОшибки);
			Возврат;
		КонецЕсли;		
		
		Если ОписаниеВозврата.НадоЗадатьВопрос 
			И Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждениеОПерезаполненииОбработки") Тогда
			
			ТекстСообщения = ОписаниеВозврата.ТекстВопроса;
				
			Обработчик = Новый ОписаниеОповещения(
				"ПередЗаписьюПродолжениеПослеВопросаОПерезаполненииОбработки", 
				ЭтотОбъект,
				ПараметрыЗаписи);
			ПоказатьВопрос(Обработчик, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
			
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	// Удаление пустых строк участников
	КоличествоУчастников = Участники.Количество();
	Для Инд = 1 По КоличествоУчастников Цикл
		Строка = Участники[КоличествоУчастников - Инд];
		Если Не ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
			Участники.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	КоличествоУчастников = Участники.Количество();
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// Рабочая группа
	РабочаяГруппаТаблицаКоличество = РабочаяГруппаТаблица.Количество();
	Для Инд = 1 По РабочаяГруппаТаблицаКоличество Цикл
		Строка = РабочаяГруппаТаблица[РабочаяГруппаТаблицаКоличество - Инд];
		Если Не ЗначениеЗаполнено(Строка.Участник) Тогда 
			РабочаяГруппаТаблица.Удалить(Строка);
		КонецЕсли;	
	КонецЦикла;	
	
	НоваяРабочаяГруппа = РабочаяГруппаТаблица.Выгрузить();
	ТипКонтейнеров = Метаданные.ОпределяемыеТипы.КонтейнерыСотрудников.Тип;
	Для Каждого Стр Из Участники Цикл
		Если ТипКонтейнеров.СодержитТип(ТипЗнч(Стр.Исполнитель)) Тогда
			СтрокаРГ = НоваяРабочаяГруппа.Добавить();
			СтрокаРГ.Участник = Стр.Исполнитель;
			СтрокаРГ.Изменение = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	РабочаяГруппаДобавить = Новый Массив;
	РабочаяГруппаУдалить = Новый Массив;
	
	// Формирование списка удаленных участников рабочей группы
	Для каждого Эл Из ИсходнаяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для каждого Эл2 Из НоваяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.Изменение = Эл2.Изменение Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не Найден Тогда
			РабочаяГруппаУдалить.Добавить(
				Новый Структура("Участник, Изменение", 
					Эл.Участник,
					Эл.Изменение));
		КонецЕсли;
		
	КонецЦикла;	
	
	// Формирование списка добавленных участников рабочей группы
	Для каждого Эл Из НоваяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для каждого Эл2 Из ИсходнаяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.Изменение = Эл2.Изменение Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
		Если Не Найден Тогда
			РабочаяГруппаДобавить.Добавить(
				Новый Структура("Участник, Изменение", 
					Эл.Участник,
					Эл.Изменение));
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаУдалить", РабочаяГруппаУдалить);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаДобавить", РабочаяГруппаДобавить);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("СписокУчастников", Участники);
	
	Если ПараметрыЗаписи.ЭтоНовыйОбъект Тогда 
		
		Если Не ИзмененоСостояние Тогда 
			
			ИзмененоСостояние = Истина;
			
			СтруктураСостояния = Новый Структура("Состояние, Установил, Период, НачальноеСостояние, Тип",
				Перечисления.СостоянияМероприятий.МероприятиеВСтадииПодготовки,
				Пользователи.ТекущийПользователь(),
				ТекущаяДатаСеанса(),
				Перечисления.СостоянияМероприятий.ПустаяСсылка(),
				"Мероприятия");
			
			ИзмененныеСостояния.Очистить();
			ИзмененныеСостояния.Добавить(СтруктураСостояния);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстОшибки = "";
	ДопустимыеПользователи = Новый Массив;
	ДопустимыеПользователи.Добавить(
		Сотрудники.ОсновнойСотрудникПользователя(ТекущийОбъект.Организатор));
	Если ЗначениеЗаполнено(ТекущийОбъект.Куратор) Тогда
		ДопустимыеПользователи.Добавить(
			Сотрудники.ОсновнойСотрудникПользователя(ТекущийОбъект.Куратор));
	КонецЕсли;
	Если СостояниеМероприятия <> Перечисления.СостоянияМероприятий.МероприятиеОтменено
		И Не ТекущийОбъект.ПометкаУдаления
		И Не БронированиеПомещений.ВозможнаБроньПомещения(
			Объект.Помещение,
			Объект.ДатаНачала,
			Объект.ДатаОкончания,
			ДопустимыеПользователи,
			Объект.Ссылка,
			ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "МестоПроведения",, Отказ);
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ИзмененныеСостояния", ИзмененныеСостояния.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(ПерепискаПоПредмету) И НачальныйПерепискаПоПредмету <> ПерепискаПоПредмету Тогда 
		ОснованиеПереписки = ПерепискаПоПредмету;	
	КонецЕсли;
	
	// Запись участников совещания
	УдаленныеВнешниеПриглашения = Новый Массив;
	Если ДанныеУчастниковЗаблокированы Или Объект.Ссылка.Пустая() Тогда 
		
		СтарыеВнешниеПриглашения = Новый Массив;
		
		СтарыеУчастники = УправлениеМероприятиями.ПолучитьУчастниковМероприятия(ТекущийОбъект.Ссылка);
		Для Каждого СтрокаУчастника Из СтарыеУчастники Цикл
			
			Если Не УправлениеМероприятиями.ЭтоВнутреннийУчастник(СтрокаУчастника.Исполнитель)
				И ЗначениеЗаполнено(СтрокаУчастника.КонтрольнаяСуммаПриглашения) Тогда
				СтарыеВнешниеПриглашения.Добавить(СтрокаУчастника.Исполнитель);
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписей = РегистрыСведений.УчастникиМероприятия.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Мероприятие.Значение = ТекущийОбъект.Ссылка;
		НаборЗаписей.Отбор.Мероприятие.Использование = Истина;
		
		НовыеВнешниеПриглашения = Новый Массив;
		Для Каждого Строка Из Участники Цикл
			
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка);
			НоваяЗапись.Мероприятие = ТекущийОбъект.Ссылка;
			НоваяЗапись.Порядок = Участники.Индекс(Строка);
			
			Если Не УправлениеМероприятиями.ЭтоВнутреннийУчастник(Строка.Исполнитель)
				И ЗначениеЗаполнено(Строка.КонтрольнаяСуммаПриглашения) Тогда
				НовыеВнешниеПриглашения.Добавить(Строка.Исполнитель);
			КонецЕсли;
			
		КонецЦикла;	
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьРасширениеРабочейГруппыМероприятия", Истина);
		НаборЗаписей.Записать();
		
		РаботаСРабочимКалендаремСервер.ОбновитьЗаписиКалендаряПоПредмету(ТекущийОбъект.Ссылка, Ложь);
		
		УдаленныеВнешниеПриглашения = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
			СтарыеВнешниеПриглашения,
			НовыеВнешниеПриглашения);
		
		РазблокироватьДанныеУчастниковДляРедактирования();
		
	КонецЕсли;
	
	// Сохранение вводимых значений
	СохранениеВводимыхЗначений.ОбновитьСпискиВыбора(ЭтотОбъект, ЭлементыДляСохранения(), ИмяФормы);
	
	// Установка связей
	СвязиОбъектов.УстановитьСвязь(
		ТекущийОбъект.Ссылка,
		НачальныйПерепискаПоПредмету,
		ПерепискаПоПредмету,
		Справочники.ТипыСвязей.ПерепискаПоПредмету);
	Если ЗначениеЗаполнено(Параметры.ПисьмоОснование) Тогда
		СвязиОбъектов.УстановитьСвязь(ТекущийОбъект.Ссылка, Неопределено, Параметры.ПисьмоОснование,
			Справочники.ТипыСвязей.НаОснованииПисьма);
	КонецЕсли;
	
	УправлениеМероприятиями.ОтправитьПриглашенияУчастникамПриНеобходимости(ТекущийОбъект.Ссылка);
	
	Если УдаленныеВнешниеПриглашения.Количество() > 0 Тогда
		
		АдресаДляОтправкиПриглашений = Новый Массив;
		Для Каждого УдаленныйУчастник Из УдаленныеВнешниеПриглашения Цикл
			
			АдресДляОтправкиПриглашений =
				УправлениеМероприятиями.АдресДляОтправкиПриглашений(УдаленныйУчастник);
			Если Не ЗначениеЗаполнено(АдресДляОтправкиПриглашений) Тогда
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Не указан адрес для отправки приглашений %1 (%2).'"),
					УдаленныйУчастник,
					ТипЗнч(УдаленныйУчастник));
			КонецЕсли;
			
			АдресаДляОтправкиПриглашений.Добавить(АдресДляОтправкиПриглашений);
			
		КонецЦикла;
		
		УправлениеМероприятиями.ОтправитьОтменуПриглашенийВнешнимУчастникам(
			ТекущийОбъект.Ссылка,
			АдресаДляОтправкиПриглашений);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Состояние
	ИзмененныеСостояния.Очистить();
	ОбновитьСостоянияМероприятия();
	
	// Протоколирование работы пользователей
	ПротоколированиеРаботыСотрудников.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(Объект.Ссылка);
	
	ВывестиДлительностьВПрограмме();
	ВывестиРешенияВПрограмме();
	ВывестиПротоколМероприятия();
	
	// Создание файлов при сохранении нового документа
	Если ФайлыДобавленные.Количество() <> 0 И ЭтоАдресВременногоХранилища(ФайлыДобавленные[0].ПолныйПуть) Тогда
		Для Каждого ФайлТаблицы Из ФайлыДобавленные Цикл 
			
			АдресФайлаСтрока = ФайлТаблицы.ПолныйПуть;
			
			ДанныеФайла = ПолучитьИзВременногоХранилища(ФайлТаблицы.ПолныйПуть);
			
			ВладелецФайла = Объект.Ссылка;
			Источник = ДанныеФайла.Ссылка;
			
			ХранитьВерсииНовыйФайл = Источник.ХранитьВерсии;
			
			Если ТипЗнч(Объект.Ссылка) <> ТипЗнч(ДанныеФайла.Владелец) Тогда 
				ХранитьВерсииНовыйФайл = Истина;
			КонецЕсли;	
			
			СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
			СведенияОФайле.Комментарий = Источник.Описание;
			СведенияОФайле.ИмяБезРасширения = Источник.ПолноеНаименование;
			СведенияОФайле.ХранитьВерсии = ХранитьВерсииНовыйФайл;
			
			НачатьТранзакцию();
			Попытка
				Приемник = РаботаСФайламиВызовСервера.СоздатьФайл(ВладелецФайла, СведенияОФайле);
				
				ХранилищеФайла = Неопределено;
				Если Источник.ТекущаяВерсия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда 
					ХранилищеФайла = РаботаСФайламиВызовСервера.ПолучитьХранилищеФайлаИзИнформационнойБазы(Источник.ТекущаяВерсия);
				КонецЕсли;	
				
				ТекстХранилище = РегистрыСведений.ТекстыВерсийФайлов.ПолучитьТекстХранилище(Источник.ТекущаяВерсия);
				
				СведенияОФайле.Размер = Источник.ТекущаяВерсия.Размер;
				СведенияОФайле.РасширениеБезТочки = Источник.ТекущаяВерсия.Расширение;
				СведенияОФайле.АдресВременногоХранилищаФайла = ХранилищеФайла;
				СведенияОФайле.АдресВременногоХранилищаТекста = ТекстХранилище;
				СведенияОФайле.СсылкаНаВерсиюИсточник = Источник.ТекущаяВерсия;
				СведенияОФайле.ВремяИзменения = Источник.ТекущаяВерсия.ДатаМодификацииФайла;
				СведенияОФайле.ВремяИзмененияУниверсальное = Источник.ТекущаяВерсия.ДатаМодификацииУниверсальная;

				Версия = РаботаСФайламиВызовСервера.СоздатьВерсию(Приемник, СведенияОФайле);
				
				РаботаСФайламиВызовСервера.ОбновитьВерсиюВФайле(Приемник, Версия, ТекстХранилище);
				
				НовыйФайл = Приемник;
				РаботаСЭП.ЗаписатьЭПФайлу(НовыйФайл, ФайлыЭП, АдресФайлаСтрока, ЭтотОбъект);
				
				ИОМВладелеца = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ВладелецФайла));
				ПараметрыРаспознавания = РаботаСФайламиВызовСервера.ПодготовитьПараметрыРаспознавания(ИОМВладелеца);
				
				Если ПараметрыРаспознавания <> Неопределено И ПараметрыРаспознавания.Свойство("РаспознатьПослеДобавления") И ПараметрыРаспознавания.РаспознатьПослеДобавления Тогда
					РаспознатьНемедленно = Ложь;
					ОписаниеОшибки = "";
					РаспознанныйТекст = "";
					РаботаСФайламиВызовСервера.РаспознатьФайл(Приемник, ПараметрыРаспознавания, ОписаниеОшибки, 
						РаспознанныйТекст, УникальныйИдентификатор,  РаспознатьНемедленно);		
				КонецЕсли;
				
				Если ФайлТаблицы.ДобавленИзШаблона Тогда
					ФайлОбъект = Приемник.ПолучитьОбъект();
					ФайлОбъект.ШаблонОснованиеДляСоздания = ФайлТаблицы.ШаблонОснованиеДляСоздания;
					ФайлОбъект.Записать();	
				КонецЕсли;
				
				Если ДанныеФайла.Зашифрован Тогда
					
					ФайлОбъект = Приемник.ПолучитьОбъект();
					ФайлОбъект.Зашифрован = Истина;
					
					ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
					ФайлОбъект.Записать();
					
					ВерсияОбъект = Приемник.ТекущаяВерсия.ПолучитьОбъект();
					ВерсияОбъект.Зашифрован = Истина;
					ВерсияОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
					ВерсияОбъект.Записать();
					
					РегистрыСведений.СертификатыШифрования.СкопироватьСертификатыШифрования(
						Источник.Ссылка, ФайлОбъект.Ссылка);
					
				КонецЕсли;	
				
				Если Источник = ТекущийФайлВСпискеДобавленных Тогда
					ТекущийФайлВСпискеДобавленных = Приемник;
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
		КонецЦикла;
		ФайлыДобавленные.Очистить();	
	КонецЕсли;
	
	// Категории данных
	Если ИспользоватьКатегорииДанных Тогда
		РаботаСКатегориямиДанных.ЗаписатьСписокКатегорийУОбъекта(СписокКатегорийДанных, Объект.Ссылка);
		Если ИспользоватьАвтоматическуюКатегоризациюДанных Тогда
			АвтоматическаяКатегоризацияВыполнена = РаботаСКатегориямиДанных.ПолучитьФлагВыполненияАвтоматическойКатегоризации(Объект.Ссылка);
			Если АвтоматическаяКатегоризацияВыполнена Тогда
				Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияВыполнена;
			Иначе
				Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияНеВыполнена;
			КонецЕсли;
		Иначе
			Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
		КонецЕсли;
		Если ИспользоватьПроверкуКатегорий Тогда
			КатегорииПроверены = РаботаСКатегориямиДанных.ПолучитьФлагПроверкиКатегорийОбъекта(Объект.Ссылка);
			Если КатегорииПроверены Тогда
				Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииПроверены;
			Иначе
				Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииНеПроверены;
			КонецЕсли;
		Иначе
			Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ОбъектПослеЗаписиНаСервере(ЭтотОбъект, ПараметрыЗаписи);
	
	// Формирование исходной рабочей группы
	УчастникиРабочейГруппы = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	ИсходнаяРабочаяГруппа.Очистить();
	Для каждого Эл Из УчастникиРабочейГруппы Цикл
		
		Строка = ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник; 
		Строка.Изменение = Эл.Изменение;
		
	КонецЦикла;
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина Тогда
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	КонецЕсли;
	
	ВывестиСтрокуСостояний();
	
	// Файлы
	ЗначениеПараметра = Файлы.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВладелецФайла"));
	Если Не ЗначениеЗаполнено(ЗначениеПараметра.Значение) Тогда 
		Файлы.Параметры.УстановитьЗначениеПараметра("ВладелецФайла", Объект.Ссылка);
	КонецЕсли;
	Если Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица Тогда 
		Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаСписок;
	КонецЕсли;
	
	УстановитьДоступностьПоСостоянию();
	
	ОбработатьИзменениеНапоминанияНаСервере();
	Если Не ПараметрыЗаписи.ЗакрытьПослеЗаписи Тогда
		ОбновитьДанныеСвязаннойЗаписиКалендаря();
		ОбновитьДанныеПриглашения();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СвязаннаяЗаписьКалендаря) Тогда
		СинхронизацияКалендарей.ПослеЗаписиСобытияКалендаря(СвязаннаяЗаписьКалендаря);
	КонецЕсли;
	
	ОбновитьМестныеВременаНаСервере();
	
	ОбсужденияДокументооборот.ОбновитьВидимостьОбсужденийВАвтообновляемомЧате(ЭтотОбъект);
	
	ЗаполнитьШаблоныДляАвтоЗапуска();
	
	Если ИзменилсяКлючНастроекОбработки Или
		(ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект")
			И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина) Тогда
		// Сначала прочитаем все что есть
		Если Не ДействияПоказыватьВсе Тогда
			ДействияПоказыватьВсе = Не ДействияПоказыватьВсе;
			Элементы.ДействияПоказатьВсе.Пометка = ДействияПоказыватьВсе;
		
			ПрочитатьДействия();
		КонецЕсли;
		ОбновитьПараметрыВидаОбъекта();
		ПравилаОбработкиСервер.ЗаполнитьДействияВФормеПредмета(
			ЭтотОбъект,
			ПараметрыВидаОбъекта,
			ТекущийОбъект);
		ИзменилсяКлючНастроекОбработки = Ложь;
		ОбработкаПредставление = Формат(КоличествоДействий, "");
		ДействияСервер.УстановитьВидимостьКомандУправленияОбработкой(
			ТекущийОбъект.Ссылка,
			Элементы,
			ПараметрыВидаОбъекта,
			СостояниеОбработки);
	КонецЕсли;
	
	ВидМероприятияИзменен = Ложь;
	
	ОбновитьЗаголовок();
	
	БронированиеПомещенийХолдинг.ОперативноеПодтверждениеБронирования(
		ТекущийОбъект.ДополнительныеСвойства.РезультатБронирования);
	ПараметрыЗаписи.Вставить("РезультатБронирования",
		ТекущийОбъект.ДополнительныеСвойства.РезультатБронирования);
	
	ОбновитьДеревоОбзораНаСервере();
	
	ОбновитьВидимостьКомандыЗакончитьРедактирование();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ФайлыДобавленные.Количество() <> 0 И Не ЭтоАдресВременногоХранилища(ФайлыДобавленные[0].ПолныйПуть) Тогда
		Для Каждого ФайлТаблицы Из ФайлыДобавленные Цикл
			РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(ФайлТаблицы.ПолныйПуть, Объект.Ссылка, ЭтотОбъект, Истина);
		КонецЦикла;
		ФайлыДобавленные.Очистить();
	КонецЕсли;
	
	УстановитьДоступностьКоманд();
	ВывестиПодсказкуСледующегоДействия();
	
	Если ЗначениеЗаполнено(ТекущийФайлВСпискеДобавленных) Тогда
		КомандыРаботыСФайламиКлиент.Редактировать(ТекущийФайлВСпискеДобавленных);
		УстановитьДоступностьКоманд();
		УстановитьТекущийФайл(ТекущийФайлВСпискеДобавленных);
		ТекущийФайлВСпискеДобавленных = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПерепискаПоПредмету) Тогда 
		Оповестить("ОбновитьПредметПереписки", ПерепискаПоПредмету, ЭтотОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПереписки) Тогда 
		ПараметрСобытия = Новый Структура;
		ПараметрСобытия.Вставить("Документ", ОснованиеПереписки);
		Оповестить("ИзмененыСвязиПодчиненныхДокументов", ПараметрСобытия);
		ОснованиеПереписки = Неопределено;
	КонецЕсли;
	
	ТекстОповещения = ?(ПараметрыЗаписи.ЭтоНовыйОбъект, НСтр("ru = 'Создание:'"), НСтр("ru = 'Изменение:'"));
	ПоказатьОповещениеПользователя(
		ТекстОповещения,
		ПолучитьНавигационнуюСсылку(Объект.Ссылка),
		Строка(Объект.Ссылка),
		БиблиотекаКартинок.Информация32);
	
	Оповестить("Запись_Мероприятие");
	
	ОбработатьИзменениеНапоминанияНаКлиенте();
	
	ДействияКлиент.РазвернутьДействия(Элементы.Действия, Действия);
	
	БронированиеПомещенийХолдингКлиент.ОперативноеПодтверждениеБронирования(ПараметрыЗаписи.РезультатБронирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ДокументСоздан" И ТипЗнч(Источник) = Тип("ФормаКлиентскогоПриложения") Тогда
		Если Источник.ВладелецФормы = Элементы.МатериалПрограмма Тогда
			Объект.МатериалПрограмма = Параметр;
			УстановитьДоступность();
			Модифицированность = Истина;
		КонецЕсли;	
			
		Если Источник.ВладелецФормы = Элементы.МатериалПротокол Тогда 
			Объект.МатериалПротокол = Параметр;
			УстановитьДоступность();
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ФайлыДокументаПомеченыНаУдаление" И ОбъектЕстьВДеревеОбзора(Параметр) Тогда
		
		ОбновитьФайлы();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ФайлИзменен" И ОбъектЕстьВДеревеОбзора(Параметр.Владелец) Тогда
		
		ОбновитьФайлы();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИмпортФайловЗавершен" И ТипЗнч(Источник) = Тип("Структура")
		И Источник.ВладелецФайлов = Объект.Ссылка Тогда
		
		ОбновитьФайлы();
		
		Если Параметр <> Неопределено Тогда
			УстановитьТекущийФайл(Параметр);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда
		ВладелецФайла = Неопределено;
		
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Владелец")
			 И ЗначениеЗаполнено(Параметр.Владелец)  Тогда
			ВладелецФайла = Параметр.Владелец;
		ИначеЕсли ТипЗнч(Источник) = Тип("СправочникСсылка.Файлы") Тогда	
			ВладелецФайла = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
				Источник,
				"ВладелецФайла");
		КонецЕсли;	
		
		Если ВладелецФайла = Объект.Ссылка Тогда
			
			Если ТекущийОбъектОбзора = Объект.Ссылка Тогда
				ТекущиаяВерсияОбъектОбзора = "";
			КонецЕсли;
			
			ОбновитьФайлы();
			ОбновитьОбзор();
			УстановитьДоступностьКоманд();
			
			Если ИспользоватьАвтоматическуюКатегоризациюДанных Тогда
				РаботаСКатегориямиДанных.СнятьПризнакОбработкиОбъектаПравилами(Объект.Ссылка);
				Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтокатегоризацияНеВыполнена;
			КонецЕсли;
		КонецЕсли;	
 	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл"
		И Параметр.Событие = "ПрисоединенныйФайлПодписан"
		И Источник = Объект.Ссылка Тогда
		ТекущиаяВерсияОбъектОбзора = "";
		ОбновитьФайлы();
		ОбновитьОбзор();
		УстановитьДоступностьКоманд();
 	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" Тогда
		Если Параметр <> Неопределено Тогда
			
			ВладелецФайла = Неопределено;
			Если Параметр.Свойство("Владелец", ВладелецФайла) Тогда
				Если ВладелецФайла = Объект.Ссылка Тогда
					ОбновитьФайлы();
					
					ФайлСозданный = Неопределено;
					Если Параметр.Свойство("Файл", ФайлСозданный) Тогда
						УстановитьТекущийФайл(ФайлСозданный);
					КонецЕсли;
					
					ОповеститьОбИзменении(Объект.Ссылка);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

	Если ИмяСобытия = "БизнесПроцессСтартован" Тогда 
		Если Параметр.Свойство("СсылкаНаБизнесПроцесс")
			И ТипЗнч(Параметр.СсылкаНаБизнесПроцесс) = Тип("БизнесПроцессСсылка.Приглашение")
			И (Параметр.СсылкаНаПредметБизнесПроцесса = Объект.Ссылка Или 
				Параметр.СсылкаНаПредметБизнесПроцесса = Объект.МатериалПротокол Или
				Параметр.СсылкаНаПредметБизнесПроцесса = Объект.МатериалПрограмма) Тогда 
			ЗаполнитьУчастниковМероприятия();
			Прочитать();
			ВывестиПодсказкуСледующегоДействия();
		ИначеЕсли Параметр.Свойство("СсылкаНаПредметБизнесПроцесса")
			И (Параметр.СсылкаНаПредметБизнесПроцесса = Объект.Ссылка Или 
				Параметр.СсылкаНаПредметБизнесПроцесса = Объект.МатериалПротокол Или
				Параметр.СсылкаНаПредметБизнесПроцесса = Объект.МатериалПрограмма) Тогда 
			Прочитать();
			ВывестиПодсказкуСледующегоДействия();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "РедактироваласьКатегория" Тогда
		ОбновитьДанныеОКатегориях(Параметр);
	КонецЕсли;
	
	Если ИмяСобытия = "ПриглашениеПринято" 
		Или ИмяСобытия = "ПриглашениеОтклонено"
		Или ИмяСобытия = "МероприятиеОтменено" 
		Или ИмяСобытия = "ПриглашенияОтправлены"
		Или ИмяСобытия = "ИсключеныУчастники" Тогда
		Если Параметр = Объект.Ссылка Тогда
			Прочитать();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "СозданаТемаПоПредмету" Тогда 
		Если Параметр.Предмет = Объект.Ссылка Тогда 
			ВывестиСтрокуСостояний();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ПунктПротокола" Тогда
		Если Параметр.Мероприятие = Объект.Ссылка Тогда
			
			Прочитать();
			
			ПараметрыОтбора = Новый Структура("ПунктПротокола", Параметр.ПунктПротокола);
			СтрокиПунктаПротокола = Объект.Протокол.НайтиСтроки(ПараметрыОтбора);
			Если СтрокиПунктаПротокола.Количество() <> 0 Тогда
				СтрокаПунктаПротокола = СтрокиПунктаПротокола[0];
				Элементы.Протокол.ТекущаяСтрока = СтрокаПунктаПротокола.ПолучитьИдентификатор()
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "Запись_НапоминанияПользователя_Документооборот"
		И Источник = СвязаннаяЗаписьКалендаря
		И ПараметрыНапоминанияДокументооборота(Параметр) 
		И ИспользоватьНапоминанияПользователя Тогда
		
		Напоминание = Параметр;
		УстановитьНадписьНапоминания(
			Параметр,
			УстановитьНапоминание,
			УстановленоНапоминание,
			СрокНапоминанияПоУмолчанию,
			ИнтервалВремениСтрокой,
			СпособУстановкиВремениНапоминания,
			ВремяНапоминания);
		УстановитьДоступностьЭлементовФормы();
		ЗаполнитьИнтервалыНапоминания();
		
	ИначеЕсли ИмяСобытия = "Удаление_НапоминанияПользователя_Документооборот"
		И Источник = СвязаннаяЗаписьКалендаря
		И ИспользоватьНапоминанияПользователя Тогда
		
		Напоминание = Неопределено;
		УстановитьНадписьНапоминания(
			Неопределено,
			УстановитьНапоминание,
			УстановленоНапоминание,
			СрокНапоминанияПоУмолчанию,
			ИнтервалВремениСтрокой,
			СпособУстановкиВремениНапоминания,
			ВремяНапоминания);
		УстановитьДоступностьЭлементовФормы();
		ЗаполнитьИнтервалыНапоминания();
		
	КонецЕсли;
	
	ОбработатьСобытиеЗаписиЗадачи(ИмяСобытия, Параметр, Источник);
	
	Если ИмяСобытия = "ЗаписьКонтроля"
		И ДействияКлиентСервер.ЭтоДействие(Параметр.Предмет) Тогда
		ОбработатьЗаписьКонтроля(Параметр.Предмет);
		ДействияКлиент.РазвернутьДействия(Элементы.Действия, Действия);
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьДействияВПредмете" И Параметр.Предмет = Объект.Ссылка
		Или ОбработкиОбъектовКлиент.ЭтоОповещениеОПереходеКВыполнениюДействияПредмета(
			ИмяСобытия, Параметр, Объект.Ссылка) Тогда
			
		ОбновитьДействиеВПредмете();
		ДействияКлиент.РазвернутьДействия(Элементы.Действия, Действия);
		
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьДействияВПредметеПриВыполненииЗадачи" И Параметр.Предмет = Объект.Ссылка Тогда
			
		Если Не ОбработкаОчередиЗаданийКлиентПовтИсп.ИспользоватьЗадания() Тогда
			ОбновитьДействиеВПредмете();
			ДействияКлиент.РазвернутьДействия(Элементы.Действия, Действия);
		Иначе        
			ПодключитьОбработчикОжидания("ОбновитьОбработка", 5, Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ПереключитьНаЗакладкуОбработка"
		И Параметр = Объект.Ссылка Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбработка;
		ПриПереключенииНаСтраницуОбработка();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ОбновитьМестныеВременаНаСервере();
	ВывестиДлительностьВПрограмме();
	ВывестиРешенияВПрограмме();
	ВывестиПротоколМероприятия();
	ЗаполнитьСпискиВыбора(
		МестнаяДатаНачала,
		Элементы.ДатаНачалаВремя.СписокВыбора,
		МестнаяДатаНачалаФакт,
		Элементы.ДатаНачалаВремяФакт.СписокВыбора);
	ЗаполнитьСпискиВыбора(
		МестнаяДатаОкончания,
		Элементы.ДатаОкончанияВремя.СписокВыбора,
		МестнаяДатаОкончанияФакт,
		Элементы.ДатаОкончанияВремяФакт.СписокВыбора);
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ПриЧтенииНаСервере(ЭтотОбъект);
	
	// Формирование исходной рабочей группы
	УчастникиРабочейГруппы = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	ИсходнаяРабочаяГруппа.Очистить();
	Для каждого Эл Из УчастникиРабочейГруппы Цикл
		
		Строка = ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник; 
		Строка.Изменение = Эл.Изменение;
		
	КонецЦикла;
	
	// Вывод состояний
	ОбновитьСостоянияМероприятия();
	ВывестиСтрокуСостояний();
	
	ПрочитатьМестоПроведения();
	
	// Организатор текстом.
	Если ЗначениеЗаполнено(Объект.Организатор) И ЗначениеЗаполнено(Объект.ОрганизаторКонтактноеЛицо) Тогда
		ОрганизаторТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1, %2", Объект.Организатор, Объект.ОрганизаторКонтактноеЛицо);
	Иначе
		ОрганизаторТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1", Объект.Организатор);
	КонецЕсли;
	
	УстановитьДоступностьПоСостоянию();
	
	ОбновитьДанныеПриглашения();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьПараметрыВидаОбъекта();
	ДействияСобытия.ПриЧтенииПредметаНаСервере(ЭтотОбъект, Параметры, ПараметрыВидаОбъекта);
	ОбщегоНазначенияДокументооборот.ПоказатьНадписьПометкиУдаления(
		ЭтотОбъект, ТекущийОбъект.ПометкаУдаления);
	
	ЗаполнитьУчастниковМероприятия();
	ОбновитьОбластьЗадач();
	
	ОбновитьЗаголовок();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// Проверка дублей
	КоличествоИсполнителей = Участники.Количество();
	Для Инд1 = 0 По КоличествоИсполнителей-2 Цикл
		Строка1 = Участники[Инд1];
		
		Если Не ЗначениеЗаполнено(Строка1.Исполнитель) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Инд2 = Инд1+1 По КоличествоИсполнителей-1 Цикл
			Строка2 = Участники[Инд2];
			
			Если Строка1.Исполнитель = Строка2.Исполнитель Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Участник ""%1"" указан дважды в списке участников!'"),
					Строка(Строка1.Исполнитель));
				
				ОбщегоНазначения.СообщитьПользователю(
					ТекстСообщения,
					,
					"Участники[" + Формат(Инд1, "ЧГ=0") + "].Исполнитель",, 
					Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Проверка председателя
	Если ЗначениеЗаполнено(Объект.Председатель) И УчитыватьКакПротокольноеМероприятие Тогда 
		
		Найден = Ложь;
		Для Каждого Строка Из Участники Цикл
			Если Строка.Исполнитель = Объект.Председатель Тогда 
				Найден = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Не Найден Тогда 
			ТекстСообщения = НСтр("ru = 'Председатель не найден среди участников мероприятия'");
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,
				,
				"Объект.Председатель",, 
				Отказ);
		КонецЕсли;	
		
	КонецЕсли;
	
	// Проверка секретаря
	Если ЗначениеЗаполнено(Объект.Секретарь) И УчитыватьКакПротокольноеМероприятие Тогда 
		
		Найден = Ложь;
		Для Каждого Строка Из Участники Цикл
			Если Строка.Исполнитель = Объект.Секретарь Тогда 
				Найден = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Не Найден И Участники.Количество() > 0 Тогда 
			ТекстСообщения = НСтр("ru = 'Секретарь не найден среди участников мероприятия'");
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,
				,
				"Объект.Секретарь",, 
				Отказ);
		КонецЕсли;	
		
	КонецЕсли;	

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияДокументооборотКлиент.ВставитьВОписаниеОповещенияОЗакрытииСсылкуНаОбъект(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И ((УстановитьНапоминание И (ИзмененоНапоминание Или ИзмененоВремя Или Не УстановленоНапоминание))
			Или (Не УстановитьНапоминание И УстановленоНапоминание)) Тогда
		ОбработатьИзменениеНапоминанияНаСервере();
		ОбработатьИзменениеНапоминанияНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаОбработка 
		И Не ТолькоПросмотр Тогда
		ПриПереключенииНаСтраницуОбработка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаФактПриИзменении(Элемент)
	
	ОбновитьСпискиВыбораДат();
	ОбновитьВременаСеанса();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияФактПриИзменении(Элемент)
	
	ОбновитьСпискиВыбораДат();
	ОбновитьВременаСеанса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработанаПриИзменении(Элемент)
	
	ПриИзмененииОтработана();
	УстановитьДоступностьЭлементовФормы();
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ИзмененныеЗаписиКалендаря = Новый Массив;
		ИзмененныеЗаписиКалендаря.Добавить(СвязаннаяЗаписьКалендаря);
		Оповестить("Запись_ЗаписьКалендаря", ИзмененныеЗаписиКалендаря, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПриглашенияПриИзменении(Элемент)
	
	ДоступноеПриглашение = ДоступныеПриглашения.НайтиПоИдентификатору(
		Число(ПредставлениеПриглашения));
	Если ДоступноеПриглашение <> Неопределено Тогда
		ИсполнительПриглашения = ДоступноеПриглашение.Исполнитель;
		ОтКогоДелегированиеПриглашения = ДоступноеПриглашение.ОтКогоДелегирование;
		ОбновитьДанныеПриглашения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредседательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбораУчастника = СформироватьДанныеВыбораУчастника();
	
	Если ДанныеВыбораУчастника.Количество() = 0 Тогда 
		ТекстПредупреждения = НСтр("ru = 'Председатель выбирается из состава участников. Укажите участников мероприятия.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если ДанныеВыбораУчастника.Количество() > 10 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("ПредседательНачалоВыбораЗавершение", ЭтотОбъект);
		ДанныеВыбораУчастника.ПоказатьВыборЭлемента(
			ОписаниеОповещения,
			НСтр("ru = 'Укажите председателя.'"),
			ДанныеВыбораУчастника.НайтиПоЗначению(Объект.Председатель));
	Иначе
		Модифицированность = Истина;
		ДанныеВыбора = ДанныеВыбораУчастника;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредседательНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	Объект.Председатель = Результат.Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредседательАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораУчастника(Текст);
	Иначе
		ПредседательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредседательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		ДанныеВыбораУчастника = СформироватьДанныеВыбораУчастника(Текст);
		Если ДанныеВыбораУчастника.Количество() = 1 Тогда 
			Модифицированность = Истина;
			Объект.Председатель = ДанныеВыбораУчастника[0].Значение;
		Иначе	
			СтандартнаяОбработка = Ложь;
			ДанныеВыбора = ДанныеВыбораУчастника;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СекретарьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбораУчастника = СформироватьДанныеВыбораУчастника();
	
	Если ДанныеВыбораУчастника.Количество() = 0 Тогда 
		ТекстПредупреждения = НСтр("ru = 'Секретарь выбирается из состава участников. Укажите участников мероприятия.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если ДанныеВыбораУчастника.Количество() > 10 Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("СекретарьНачалоВыбораЗавершение", ЭтотОбъект);
		ДанныеВыбораУчастника.ПоказатьВыборЭлемента(
			ОписаниеОповещения,
			НСтр("ru = 'Укажите секретаря'"),
			ДанныеВыбораУчастника.НайтиПоЗначению(Объект.Секретарь));
	Иначе
		Модифицированность = Истина;
		ДанныеВыбора = ДанныеВыбораУчастника;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СекретарьНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	Объект.Секретарь = Результат.Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура СекретарьАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораУчастника(Текст);
	Иначе
		СекретарьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СекретарьОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		ДанныеВыбораУчастника = СформироватьДанныеВыбораУчастника(Текст);
		Если ДанныеВыбораУчастника.Количество() = 1 Тогда
			Модифицированность = Истина;
			Объект.Секретарь = ДанныеВыбораУчастника[0].Значение;
		Иначе
			СтандартнаяОбработка = Ложь;
			ДанныеВыбора = ДанныеВыбораУчастника;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизаторТекстПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ОрганизаторТекст) Тогда
		Объект.Организатор = Неопределено;
		Объект.ОрганизаторКонтактноеЛицо = Неопределено;
		ОрганизаторТекст = Неопределено;
	КонецЕсли;
	ВывестиПодсказкуСледующегоДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизаторТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ОтображатьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ВыбиратьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор организатора мероприятия'"));
	ПараметрыФормы.Вставить("ПодменятьПользователейСотрудниками", Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВыбораОрганизатора", ЭтотОбъект);
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыФормы, ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыбораОрганизатора(ВыбранныеУчастники, ДопПараметры) Экспорт
	
	Если ВыбранныеУчастники = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизаторТекстОбработкаВыбора(Элементы.ОрганизаторТекст, ВыбранныеУчастники[0].Контакт, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизаторТекстОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.Организатор = Неопределено;
	Объект.ОрганизаторКонтактноеЛицо = Неопределено;
	ОрганизаторТекст = Неопределено;
	Модифицированность = Истина;
	ВывестиПодсказкуСледующегоДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизаторТекстОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ОрганизаторКонтактноеЛицо) Тогда
		ПоказатьЗначение(, Объект.ОрганизаторКонтактноеЛицо);
	ИначеЕсли ЗначениеЗаполнено(Объект.Организатор) Тогда
		ПоказатьЗначение(, Объект.Организатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизаторТекстОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		ОрганизаторТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1", ВыбранноеЗначение);
		Объект.Организатор = ВыбранноеЗначение;
		Объект.ОрганизаторКонтактноеЛицо = Неопределено;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
		
		ОрганизаторТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1", ВыбранноеЗначение);
		Объект.Организатор = ВыбранноеЗначение;
		Объект.ОрганизаторКонтактноеЛицо = Неопределено;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		Организатор = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "Владелец");
		
		ОрганизаторТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1, %2", Организатор, ВыбранноеЗначение);
		Объект.Организатор = Организатор;
		Объект.ОрганизаторКонтактноеЛицо = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда 	
		
		ОрганизаторТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1", ВыбранноеЗначение);
		Объект.Организатор = ВыбранноеЗначение;
		Объект.ОрганизаторКонтактноеЛицо = Неопределено;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если ЗначениеЗаполнено(ВыбранноеЗначение.Контрагент) И ЗначениеЗаполнено(ВыбранноеЗначение.КонтактноеЛицо) Тогда
			ОрганизаторТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1, %2", ВыбранноеЗначение.Контрагент, ВыбранноеЗначение.КонтактноеЛицо);
			Объект.Организатор = ВыбранноеЗначение.Контрагент;
			Объект.ОрганизаторКонтактноеЛицо = ВыбранноеЗначение.КонтактноеЛицо;
		Иначе
			ОрганизаторТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1", ВыбранноеЗначение.Контрагент);
			Объект.Организатор = ВыбранноеЗначение.Контрагент;
			Объект.ОрганизаторКонтактноеЛицо = Неопределено;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		Текст = СокрЛП(ВыбранноеЗначение);
		
		Если Найти(Текст, ",") > 0 Тогда 
			ТекстОрганизаторКонтрагент = Лев(Текст, Найти(Текст, ",") - 1); 
			ТекстОрганизаторКонтактноеЛицо = СокрЛП(Прав(Текст, СтрДлина(Текст)-СтрДлина(СокрЛП(ТекстОрганизаторКонтрагент))-1));
		Иначе
			ТекстОрганизаторКонтрагент = Текст; 
			ТекстОрганизаторКонтактноеЛицо = "";
		КонецЕсли;	
		
		Результат = Делопроизводство.НайтиКонтрагентаИКонтактноеЛицо(ТекстОрганизаторКонтрагент, ТекстОрганизаторКонтактноеЛицо);
		
		Если ЗначениеЗаполнено(Результат) Тогда 
			Если ЗначениеЗаполнено(Результат.Контрагент) И ЗначениеЗаполнено(Результат.КонтактноеЛицо) Тогда
				ОрганизаторТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"%1, %2", Результат.Контрагент, Результат.КонтактноеЛицо);
				Объект.Организатор = Результат.Контрагент;
				Объект.ОрганизаторКонтактноеЛицо = Результат.КонтактноеЛицо;
			Иначе
				ОрганизаторТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"%1", Результат.Контрагент);
				Объект.Организатор = Результат.Контрагент;
				Объект.ОрганизаторКонтактноеЛицо = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	ВывестиПодсказкуСледующегоДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизаторТекстАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		Текст = СокрЛП(Текст);
		
		Если ЗначениеЗаполнено(Объект.Организатор) Тогда
			Если Найти(Текст, СокрЛП(Объект.Организатор)+",") > 0 Тогда 
				ТекстПоиска = СокрЛП(Прав(Текст, СтрДлина(Текст)-СтрДлина(СокрЛП(Объект.Организатор))-1));
				ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораКонтактногоЛицаПолучателя(ТекстПоиска, Объект.Организатор);
			Иначе
				ДанныеВыбора = УправлениеМероприятиямиВызовСервера.СформироватьДанныеВыбораОрганизатора(ПараметрыПолученияДанных);
			КонецЕсли;
		Иначе
			ДанныеВыбора = УправлениеМероприятиямиВызовСервера.СформироватьДанныеВыбораОрганизатора(ПараметрыПолученияДанных);;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизаторТекстОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		Текст = СокрЛП(Текст);
		
		Если ЗначениеЗаполнено(Объект.Организатор) Тогда
			Если Найти(Текст, СокрЛП(Объект.Организатор)+",") > 0 Тогда 
				ТекстПоиска = СокрЛП(Прав(Текст, СтрДлина(Текст)-СтрДлина(СокрЛП(Объект.Организатор))-1));
				ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораКонтактногоЛицаПолучателя(ТекстПоиска, Объект.Организатор);
			Иначе
				ДанныеВыбора = УправлениеМероприятиямиВызовСервера.СформироватьДанныеВыбораОрганизатора(ПараметрыПолученияДанных);;
			КонецЕсли;
		Иначе
			ДанныеВыбора = УправлениеМероприятиямиВызовСервера.СформироватьДанныеВыбораОрганизатора(ПараметрыПолученияДанных);;
		КонецЕсли;
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			СтандартнаяОбработка = Истина;
			ОрганизаторТекстОбработкаВыбора(Элемент, ДанныеВыбора[0].Значение, Ложь)
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидМероприятияПриИзменении(Элемент)
	
	ИзменилсяКлючНастроекОбработки = Истина;
	
	ПриИзмененииВидаМероприятия();
	
	ВывестиПодсказкуСледующегоДействия();
	
	ВидМероприятияИзменен = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаМероприятия()
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ВидМероприятия", Объект.ВидМероприятия));
	УчитыватьКакПротокольноеМероприятие = ПолучитьФункциональнуюОпциюФормы("УчитыватьКакПротокольноеМероприятие");
	УчитыватьКуратора = ПолучитьФункциональнуюОпциюФормы("УчитыватьКуратора");
	ДлительностьПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидМероприятия, "Длительность");
	Если Не ЗначениеЗаполнено(ДлительностьПоУмолчанию) Тогда
		ДлительностьПоУмолчанию = 3600;
	Иначе
		ДлительностьПоУмолчанию = ДлительностьПоУмолчанию * 60;
	КонецЕсли;
	ВывестиРешенияВПрограмме();
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ПриИзмененииВидаОбъекта(ЭтотОбъект);
	
	// Подсистема Свойства
	ОбновитьЭлементыДополнительныхРеквизитов();
	
	ЗаполнитьРеквизитыПоВидуМероприятия();
	
	ОбновитьДеревоОбзораНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВажностьПриИзменении(Элемент)
	
	ИзменилсяКлючНастроекОбработки = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрифДоступаПриИзменении(Элемент)
	
	ИзменилсяКлючНастроекОбработки = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ОбновитьВременаСеанса();
	
	ПроверитьОтсутствие = Истина;
	ИзмененоВремя = Истина;
	
	РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(
		Объект.ДатаНачала, Объект.ДатаОкончания, Ложь,
		НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания, , , , ДлительностьПоУмолчанию);
	
	УправлениеМероприятиямиКлиентСервер.ПересчитатьНачалоОкончаниеПунктовПрограммы(Объект, ПараметрыПреобразованияМестногоВремени);
	
	ВывестиДлительностьМероприятия();
	ВывестиСуммарнуюДлительностьПрограммы();
	ВывестиОсталосьДоНачала();
	ВывестиПодсказкуСледующегоДействия();
	ОбновитьСпискиВыбораДат();
	ОбновитьМестныеВременаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	ОбновитьВременаСеанса();
	
	ПроверитьОтсутствие = Истина;
	ИзмененоВремя = Истина;
	
	РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(
		Объект.ДатаНачала, Объект.ДатаОкончания, Ложь,
		НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания, , , , ДлительностьПоУмолчанию);
	
	ВывестиДлительностьМероприятия();
	ВывестиСуммарнуюДлительностьПрограммы();
	ВывестиПодсказкуСледующегоДействия();
	ОбновитьСпискиВыбораДат();
	ОбновитьМестныеВременаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяПриИзменении(Элемент)
	
	ОбновитьВременаСеанса();
	
	ПроверитьОтсутствие = Истина;
	ИзмененоВремя = Истина;
	
	РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(
		Объект.ДатаНачала, Объект.ДатаОкончания, Ложь,
		НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания, , , , ДлительностьПоУмолчанию);
	
	УправлениеМероприятиямиКлиентСервер.ПересчитатьНачалоОкончаниеПунктовПрограммы(Объект, ПараметрыПреобразованияМестногоВремени);
	
	ВывестиДлительностьМероприятия();
	ВывестиСуммарнуюДлительностьПрограммы();
	ВывестиОсталосьДоНачала();
	ВывестиПодсказкуСледующегоДействия();
	ОбновитьСпискиВыбораДат();
	ОбновитьМестныеВременаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Элемент.СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, МестнаяДатаНачала);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, МестнаяДатаНачала);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяПриИзменении(Элемент)
	
	ОбновитьВременаСеанса();
	
	ПроверитьОтсутствие = Истина;
	ИзмененоВремя = Истина;
	
	РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(
		Объект.ДатаНачала, Объект.ДатаОкончания, Ложь,
		НачальноеЗначениеДатаНачала, НачальноеЗначениеДатаОкончания, , , , ДлительностьПоУмолчанию);
	
	ВывестиДлительностьМероприятия();
	ВывестиСуммарнуюДлительностьПрограммы();
	ВывестиПодсказкуСледующегоДействия();
	ОбновитьСпискиВыбораДат();
	ОбновитьМестныеВременаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Элемент.СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаОкончания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаОкончания);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяФактПриИзменении(Элемент)
	
	ОбновитьСпискиВыбораДат();
	ОбновитьВременаСеанса();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяФактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Элемент.СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяФактАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(МестнаяДатаНачалаФакт) Тогда
			РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, МестнаяДатаНачалаФакт);
		Иначе
			РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, МестнаяДатаНачала);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаВремяФактОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(МестнаяДатаНачалаФакт) Тогда
		РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, МестнаяДатаНачалаФакт);
	Иначе
		РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, МестнаяДатаНачала);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяФактПриИзменении(Элемент)
	
	ОбновитьСпискиВыбораДат();
	ОбновитьВременаСеанса();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяФактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Элемент.СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяФактАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(Объект.ДатаОкончанияФакт) Тогда
			РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаОкончанияФакт);
		Иначе
			РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаОкончания);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияВремяФактОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ДатаОкончанияФакт) Тогда
		РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаОкончанияФакт);
	Иначе
		РаботаСРабочимКалендаремКлиент.СформироватьДанныеВыбораВремени(Текст, ДанныеВыбора, Объект.ДатаОкончания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ИзменилсяКлючНастроекОбработки = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ИзменилсяКлючНастроекОбработки = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПрограммыПриИзменении(Элемент)
	
	Если Объект.ТипПрограммы <> ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВОтдельномДокументе") Тогда 
		Объект.МатериалПрограмма = Неопределено;
	КонецЕсли;	
	
	УстановитьДоступность();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаПриИзменении(Элемент)
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПротоколаПриИзменении(Элемент)
	
	Если Объект.ТипПротокола <> ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВОтдельномДокументе") Тогда 
		Объект.МатериалПротокол = Неопределено;
	КонецЕсли;	
	
	УстановитьДоступность();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалПротоколПриИзменении(Элемент)
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Элемент", Элемент);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПредметНачалоВыбораЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокТиповПредмета, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ВыбранныйТип = Результат.Значение;
	
	ЗначениеВыбранногоТипа = Неопределено;
	Если Найти(ВыбранныйТип, "Справочник.") <> 0 Тогда
		ЗначениеВыбранногоТипа = Тип(СтрЗаменить(ВыбранныйТип, "Справочник.", "СправочникСсылка."));
	ИначеЕсли Найти(ВыбранныйТип, "Документ.") <> 0 Тогда
		ЗначениеВыбранногоТипа = Тип(СтрЗаменить(ВыбранныйТип, "Документ.", "ДокументСсылка."));
	КонецЕсли;
	
	Если ТипЗнч(Объект.Предмет) = ЗначениеВыбранногоТипа Тогда 
		РаботаСФайламиКлиент.ОбъектВыборСФайлами(ДополнительныеПараметры.Элемент, ВыбранныйТип, Объект.Предмет);
	Иначе
		РаботаСФайламиКлиент.ОбъектВыборСФайлами(ДополнительныеПараметры.Элемент, ВыбранныйТип, Неопределено);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
		ПредметСтрокой = ОбщегоНазначенияДокументооборотВызовСервера.ПредметСтрокой(ВыбранноеЗначение);
	КонецЕсли;
	
	Объект.Предмет = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Предмет) Тогда 
		ПоказатьЗначение(, Объект.Предмет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.Предмет = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура МестоПроведенияПриИзменении(Элемент)
	
	ВывестиПодсказкуСледующегоДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура МестоПроведенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("КлючНазначенияИспользования", "ВыборПомещенияДляМероприятия");
	
	ОткрытьФорму("Справочник.ТерриторииИПомещения.Форма.ВыборПомещения", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура МестоПроведенияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МестоПроведения = "";
	ВывестиПодсказкуСледующегоДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура МестоПроведенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") И ИспользоватьСхемыПомещений Тогда
		
		ДанныеВыбора = УправлениеМероприятиямиВызовСервера.СформироватьДанныеВыбораМестаПроведения(ВыбранноеЗначение);
		
		Для Каждого ЭлементДанныхВыбора Из ДанныеВыбора Цикл
			
			Если Строка(ЭлементДанныхВыбора.Значение) = ВыбранноеЗначение Тогда
				ВыбранноеЗначение = ЭлементДанныхВыбора.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МестоПроведенияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) И ИспользоватьСхемыПомещений Тогда 
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = УправлениеМероприятиямиВызовСервера.СформироватьДанныеВыбораМестаПроведения(ПараметрыПолученияДанных);
		
		ЕстьТочноеСовпадение = Ложь;
		Для Каждого ЭлементДанныхВыбора Из ДанныеВыбора Цикл
			
			Если Строка(ЭлементДанныхВыбора.Значение) = Текст Тогда
				ЕстьТочноеСовпадение = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ЕстьТочноеСовпадение Тогда
			ДанныеВыбора.Добавить(Текст);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МестоПроведенияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) И ИспользоватьСхемыПомещений Тогда 
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = УправлениеМероприятиямиВызовСервера.СформироватьДанныеВыбораМестаПроведения(ПараметрыПолученияДанных);
		
		ЕстьТочноеСовпадение = Ложь;
		Для Каждого ЭлементДанныхВыбора Из ДанныеВыбора Цикл
			
			Если Строка(ЭлементДанныхВыбора.Значение) = Текст Тогда
				ЕстьТочноеСовпадение = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ЕстьТочноеСовпадение Тогда
			ДанныеВыбора.Добавить(Текст);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПриИзменении(Элемент)
	
	Если Не ДанныеУчастниковЗаблокированы И Не Объект.Ссылка.Пустая() Тогда 
		ЗаблокироватьДанныеУчастниковДляРедактирования();
	КонецЕсли;
	
	ПроверитьОтсутствие = Истина;
	
	ВывестиПодсказкуСледующегоДействия();
	ОбновитьЧасовыеПоясаУчастниковНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	ВывестиПодсказкуСледующегоДействия();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаВзаимодействиеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбработка;
	ПриПереключенииНаСтраницуОбработка();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаКатегорииНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.Категории;
	
	Если ЭтоМобильныйКлиент Тогда
		МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.Категории, Элементы.МК_КнопкаСтраницаКатегории);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаФорумНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Для перехода по ссылке мероприятие необходимо записать.'"));
		Возврат;
	КонецЕсли;	
	
	ОткрытьФорму("Справочник.ТемыОбсуждений.Форма.ФормаПросмотраТемы", 
		Новый Структура("Документ", Объект.Ссылка), ЭтотОбъект, КлючУникальности, Окно);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаКонтрольНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Для постановки на контроль мероприятия необходимо записать.'"));
		Возврат;
	КонецЕсли;
	
	КонтрольКлиент.ОбработкаКомандыКонтроль(Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуСостояния("СостояниеМероприятия");
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеТекстОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеТекстОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуСостояния("СостояниеМероприятия");
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПриглашенийПриИзменении(Элемент)
	
	ПриИзмененииСостояния("Приглашений");
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПриглашенийОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПрограммыПриИзменении(Элемент)
	
	ПриИзмененииСостояния("Программы");
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПрограммыОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПротоколаПриИзменении(Элемент)
	
	ПриИзмененииСостояния("Протокола");
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПротоколаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеМатериаловВыступающихПриИзменении(Элемент)
	
	ПриИзмененииСостояния("МатериаловВыступающих");
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеМатериаловВыступающихОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНапоминаниеПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалВремениСтрокойПриИзменении(Элемент)
	
	ЗаполнитьИнтервалыНапоминания();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалВремениСтрокойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = НСтр("ru = 'Другое...'") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура();
		
		ПараметрыФормы.Вставить("СпособУстановкиВремениНапоминания", СпособУстановкиВремениНапоминания);
		ПараметрыФормы.Вставить("ИнтервалВремениСтрокой", ИнтервалВремениСтрокой);
		ПараметрыФормы.Вставить("ВремяНапоминания",
			?(СпособУстановкиВремениНапоминания 
				= ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ВУказанноеВремя"),
				ВремяНапоминания,
				Объект.ДатаНачала));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ИнтервалВремениСтрокойОбработкаВыбораЗавершение", ЭтотОбъект);
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму(
			"РегистрСведений.НапоминанияПользователя.Форма.НапоминаниеДокументооборот",
			ПараметрыФормы,,,,,
			ОписаниеОповещения, РежимОткрытияОкна);
		
	ИначеЕсли ИнтервалВремениСтрокой <> ВыбранноеЗначение Тогда
		
		ИзмененоНапоминание = Истина;
		СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета");
		
	Иначе
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалВремениСтрокойОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.СпособУстановкиВремениНапоминания
		= ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета") Тогда
		
		Если УстановитьНапоминание = Ложь ИЛИ ИнтервалВремениСтрокой <> Результат.ИнтервалВремениСтрокой Тогда
			УстановитьНапоминание = Истина;
			ИзмененоНапоминание = Истина;
		КонецЕсли;
		СпособУстановкиВремениНапоминания = Результат.СпособУстановкиВремениНапоминания;
		ИнтервалВремениСтрокой = Результат.ИнтервалВремениСтрокой;
		ВремяНапоминания = Дата(1,1,1);
		
	ИначеЕсли Результат.СпособУстановкиВремениНапоминания =
		ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ВУказанноеВремя") Тогда
		
		Если УстановитьНапоминание = Ложь ИЛИ ВремяНапоминания <> Результат.ВремяНапоминания Тогда
			УстановитьНапоминание = Истина;
			ИзмененоНапоминание = Истина;
		КонецЕсли;
		СпособУстановкиВремениНапоминания = Результат.СпособУстановкиВремениНапоминания;
		ВремяНапоминания = Результат.ВремяНапоминания;
		ИнтервалВремениСтрокой =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'в %2 %1'"),
				Формат(ВремяНапоминания, "ДЛФ=D"),
				Формат(ВремяНапоминания, "ДФ=ЧЧ:мм"));
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФормы();
	ЗаполнитьИнтервалыНапоминания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовилПриИзменении(Элемент)
	
	ПодготовилПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбзорHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если СтрНайти(ДанныеСобытия.Href, "OpenForEdit") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ДанныеСобытия.Anchor = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанныеФайла = ТекущиеДанныеФайла();
		Если ТекущиеДанныеФайла = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиФайл = ТекущиеДанныеФайла.Ссылка;
		РедактируетТекущийПользователь = ТекущиеДанныеФайла.РедактируетТекущийПользователь;
		
		Если Не РедактируетТекущийПользователь Тогда 
			Возврат;
		КонецЕсли;
		
		КомандыРаботыСФайламиКлиент.Редактировать(ТекущиФайл);
		
	ИначеЕсли СтрНайти(ДанныеСобытия.Href, "OpenForView") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ДанныеСобытия.Anchor = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиФайл = ТекущийФайл();
		Если ТекущиФайл = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		РаботаСФайламиКлиент.ОткрытьФайлДокумента(ТекущиФайл, ЭтотОбъект);
		
	ИначеЕсли СтрНайти(ДанныеСобытия.Href, "CreatePreview") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанныеФайла = ТекущиеДанныеФайла();
		Если ТекущиеДанныеФайла = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущийФайл = ТекущиеДанныеФайла.Ссылка;
	
		ДокументPDF = Неопределено;
		
		ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();
		ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
		ПараметрыHTMLПредставление.Расширение = ТекущиеДанныеФайла.Расширение;
		ПараметрыHTMLПредставление.Размер = ТекущиеДанныеФайла.ТекущаяВерсияРазмер;
		ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
		ПараметрыHTMLПредставление.ИгнорироватьМаксРазмер = Истина;
		
		ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
			ТекущийФайл,
			ПараметрыHTMLПредставление,
			ДокументPDF,
			ВыполняетсяРаспознавание);
		
		ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ОбзорHTML, ТаймлистАвтопротоколHTML,
			РаспознанныйТекстHTML);
		
		Элементы.КартинкаОбзорУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
		Элементы.НадписьОбзорУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
		МасштабироватьPDFИКартинки = ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки;
		
		УстановитьВидимостьКомандМасштаба(ТекущиеДанныеФайла.Расширение);
		
		ОжидатьРаспознаванияПриНеобходимости(ТекущийФайл);
		
	ИначеЕсли СтрНайти(ДанныеСобытия.Href, "events/ShowStatus") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОткрытьФормуСостояния("СостояниеМероприятия");
		
	Иначе
		
		РаботаС_HTMLКлиент.ОткрытьСсылку(Элемент, ДанныеСобытия, СтандартнаяОбработка, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУчастники

&НаКлиенте
Процедура УчастникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда 
		ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
		ТекущиеДанные.Исполнитель = ПустаяСсылкаНаСотрудника;
		ТекущиеДанные.ЯвкаОбязательна = ЯвкаОбязательнаПоУмолчанию;
		
		КоличествоУчастников = Участники.Количество();
	КонецЕсли;
	
	Если Не ДанныеУчастниковЗаблокированы И Не Объект.Ссылка.Пустая() Тогда 
		ЗаблокироватьДанныеУчастниковДляРедактирования();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Исполнитель = Объект.Председатель
		И ЗначениеЗаполнено(Объект.Председатель) И УчитыватьКакПротокольноеМероприятие Тогда
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя изменить участника ""%1"", так как он указан в качестве председателя'"),
			Строка(ТекущиеДанные.Исполнитель));
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.Исполнитель = Объект.Секретарь
		И ЗначениеЗаполнено(Объект.Секретарь) И УчитыватьКакПротокольноеМероприятие Тогда 
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя изменить участника ""%1"", так как он указан в качестве секретаря'"),
			Строка(ТекущиеДанные.Исполнитель));
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ПодменятьПользователейСотрудниками", Истина);
	ПараметрыФормы.Вставить("ОтображатьРоли", Истина);
	ПараметрыФормы.Вставить("ОтображатьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ВыбиратьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ОтображатьЛичныхАдресатов", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор исполнителя'"));
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Исполнитель) Тогда
		ПараметрыФормы.Вставить("ВыбранныеАдресаты", ТекущиеДанные.Исполнитель);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.АдреснаяКнига.Форма.ФормаСписка",
		ПараметрыФормы,
		Элементы.УчастникиИсполнитель,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = УправлениеМероприятиямиВызовСервера.СформироватьДанныеВыбораУчастника(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = УправлениеМероприятиямиВызовСервера.СформироватьДанныеВыбораУчастника(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не УчитыватьКакПротокольноеМероприятие Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Председатель) 
		И ТекущиеДанные.Исполнитель = Объект.Председатель
		И Не ЕстьДублиУчастника(Объект.Председатель) Тогда
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя удалить участника ""%1"", так как он указан в качестве председателя'"),
			Строка(ТекущиеДанные.Исполнитель));
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Секретарь) 
		И ТекущиеДанные.Исполнитель = Объект.Секретарь
		И Не ЕстьДублиУчастника(Объект.Секретарь) Тогда
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя удалить участника ""%1"", так как он указан в качестве секретаря'"),
			Строка(ТекущиеДанные.Исполнитель));
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	КоличествоУчастников = Участники.Количество();
	
	Если Не ДанныеУчастниковЗаблокированы И Не Объект.Ссылка.Пустая() Тогда 
		ЗаблокироватьДанныеУчастниковДляРедактирования();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПослеУдаления(Элемент)
	
	КоличествоУчастников = Участники.Количество();
	
	Если Не ДанныеУчастниковЗаблокированы И Не Объект.Ссылка.Пустая() Тогда 
		ЗаблокироватьДанныеУчастниковДляРедактирования();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.РабочиеГруппы") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СоставРабочейГруппы = РаботаСПользователями.ПолучитьПользователейРабочейГруппы(ВыбранноеЗначение);
		
		ВГраницаСоставРабочейГруппы = СоставРабочейГруппы.ВГраница();
		Для Инд = 0 По ВГраницаСоставРабочейГруппы Цикл
			СтруктураПоиска = Новый Структура("Исполнитель", СоставРабочейГруппы[ВГраницаСоставРабочейГруппы - Инд]);
			НайденныеСтроки = Участники.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда 
				СоставРабочейГруппы.Удалить(ВГраницаСоставРабочейГруппы - Инд);
			КонецЕсли;
		КонецЦикла;
		
		Если СоставРабочейГруппы.Количество() > 0 Тогда 
			
			ТекущийДанные = Элементы.Участники.ТекущиеДанные;
			ТекущийДанные.Исполнитель = СоставРабочейГруппы[0];
			
			Для Инд = 1 По СоставРабочейГруппы.ВГраница() Цикл
				
				ТекущаяСтрока = Элементы.Участники.ТекущаяСтрока;
				Индекс = Участники.Индекс(Участники.НайтиПоИдентификатору(ТекущаяСтрока));
				
				НоваяСтрока = Участники.Вставить(Индекс + 1);
				НоваяСтрока.Исполнитель = СоставРабочейГруппы[Инд];
				НоваяСтрока.ЯвкаОбязательна = ЯвкаОбязательнаПоУмолчанию;
				
				Элементы.Участники.ТекущаяСтрока = новаяСтрока.ПолучитьИдентификатор();
				
			КонецЦикла;
			
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(
		Элементы.Участники.ТекущиеДанные, "Исполнитель", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	Если ЭтоМобильныйКлиент Тогда
		Элементы.УчастникиОтсутствовал.Видимость = Ложь;
		Элементы.УчастникиЯвкаОбязательна.Видимость = Ложь;
	КонецЕсли;		

КонецПроцедуры

&НаКлиенте
Процедура УчастникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ЭтоМобильныйКлиент Тогда
		Элементы.УчастникиОтсутствовал.Видимость = Истина;
		Элементы.УчастникиЯвкаОбязательна.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрограмма

&НаКлиенте
Процедура ПрограммаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуИзмененияПунктаПрограммы(Элемент.ДанныеСтроки(ВыбраннаяСтрока));
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ПараметрыФормы = УправлениеМероприятиямиКлиентСервер.НовыйПараметрыФормыВводПунктаПрограммы();
	
	Если Копирование Тогда 
		ТекущиеДанные = Элементы.Программа.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, ТекущиеДанные);
	КонецЕсли;	
	
	// последний пункт программы
	Если Объект.Программа.Количество() = 0 Тогда 
		НомерПункта = 1;
		Начало = Объект.ДатаНачала;
	Иначе	
		ПоследнийПункт = Объект.Программа[Объект.Программа.Количество()-1];
		НомерПункта = ПоследнийПункт.НомерПункта + 1;
		Начало = ПоследнийПункт.Окончание;
	КонецЕсли;
	
	ПараметрыФормы.НомерПункта = НомерПункта;
	ПараметрыФормы.Начало = Начало;
	ПараметрыФормы.ТребуетПринятияРешения = Истина;
	ПараметрыФормы.ВидМероприятия = Объект.ВидМероприятия;
	ПараметрыФормы.СостояниеПрограммы = СостояниеПрограммы;
	
	ОткрытьФорму("Справочник.Мероприятия.Форма.ВводПунктаПрограммы",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ПрограммаПередНачаломДобавленияЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаПередНачаломДобавленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда 
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Объект.Программа.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат);
	
	ЗаполнитьСтрокуПрограммы(НоваяСтрока, ПараметрыПреобразованияМестногоВремени);
	НоваяСтрока.Решение = УправлениеМероприятиямиКлиентСервер.ПолучитьРешениеВСтрокеПрограммы(НоваяСтрока, Объект.Протокол);
	
	Элементы.Программа.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Модифицированность = Истина;
	
	УправлениеМероприятиямиКлиентСервер.ПересчитатьНачалоОкончаниеПунктовПрограммы(Объект, ПараметрыПреобразованияМестногоВремени);
	ВывестиСуммарнуюДлительностьПрограммы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОткрытьФормуИзмененияПунктаПрограммы(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаПереместитьВверх(Команда)
	
	ТекущиеДанные = Элементы.Программа.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.НомерСтроки = 1 Тогда 
		Возврат;
	КонецЕсли;	
	СтарыйНомер = ТекущиеДанные.НомерПункта;
	НовыйНомер = СтарыйНомер-1;
	
	Объект.Программа.Сдвинуть(ТекущиеДанные.НомерСтроки - 1, -1); 
	ПоменятьНомерПунктаПрограммы(СтарыйНомер, НовыйНомер);
	
	УправлениеМероприятиямиКлиентСервер.ПересчитатьНачалоОкончаниеПунктовПрограммы(Объект, ПараметрыПреобразованияМестногоВремени);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаПереместитьВниз(Команда)
	
	ТекущиеДанные = Элементы.Программа.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.НомерСтроки = Объект.Программа.Количество() Тогда 
		Возврат;
	КонецЕсли;
	СтарыйНомер = ТекущиеДанные.НомерПункта;
	НовыйНомер = СтарыйНомер+1;
	
	Объект.Программа.Сдвинуть(ТекущиеДанные.НомерСтроки - 1, 1); 
	ПоменятьНомерПунктаПрограммы(СтарыйНомер, НовыйНомер);
	
	УправлениеМероприятиямиКлиентСервер.ПересчитатьНачалоОкончаниеПунктовПрограммы(Объект, ПараметрыПреобразованияМестногоВремени);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.Программа.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	СтруктураПоиска = Новый Структура("НомерПунктаПрограммы", ТекущиеДанные.НомерПункта);
	НайденныеСтроки = Объект.Протокол.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда 
		ТекстПредупреждения = НСтр("ru = 'Нельзя удалить пункт программы, так как для него введен пункт протокола.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Программа.ТекущаяСтрока;
	ЭлементКоллекции = Объект.Программа.НайтиПоИдентификатору(ТекущаяСтрока);
	ИндексЭлемента = Объект.Программа.Индекс(ЭлементКоллекции);
	
	// Изменение номеров пунктов программы
	Для Инд = ИндексЭлемента + 1 По Объект.Программа.Количество()-1 Цикл
		
		СтарыйНомер = Объект.Программа[Инд].НомерПункта;
		НовыйНомер = СтарыйНомер - 1;
		
		ПоменятьНомерПунктаПрограммы(СтарыйНомер, НовыйНомер);
		
	КонецЦикла;
	
	Объект.Программа.Удалить(ИндексЭлемента);
	
	// Пересчет программы
	УправлениеМероприятиямиКлиентСервер.ПересчитатьНачалоОкончаниеПунктовПрограммы(Объект, ПараметрыПреобразованияМестногоВремени);
	ВывестиСуммарнуюДлительностьПрограммы();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	// Изменение номеров пунктов программы
	ИзмененияНомеровПунктовПрограммы = Новый Соответствие;
	Для Каждого ПунктПрограммы Из Объект.Программа Цикл
		
		СтарыйНомер = ПунктПрограммы.НомерПункта;
		НовыйНомер = ПунктПрограммы.НомерСтроки;
		
		Если СтарыйНомер = НовыйНомер Тогда
			Продолжить;
		КонецЕсли;
		
		ИзмененияНомеровПунктовПрограммы.Вставить(СтарыйНомер, НовыйНомер);
		ПунктПрограммы.НомерПункта = НовыйНомер;
		
	КонецЦикла;
	
	// Пересчет программы
	УправлениеМероприятиямиКлиентСервер.ПересчитатьНачалоОкончаниеПунктовПрограммы(Объект, ПараметрыПреобразованияМестногоВремени);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПротокол

&НаКлиенте
Процедура ПротоколПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если ПротоколТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	Если Копирование Тогда
		ТекущиеДанные = Элементы.Протокол.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ПараметрыФормы.Вставить("ЗначениеКопирования", ТекущиеДанные.ПунктПротокола);
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура("Владелец", Объект.Ссылка);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Справочник.ПротоколыМероприятий.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.Протокол.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ПротоколСостояниеИсполненияГиперссылка Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.Исполнение) Тогда
			ПоказатьЗначение(, ТекущиеДанные.Исполнение);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.ПунктПротокола);
	ОткрытьФорму("Справочник.ПротоколыМероприятий.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Протокол.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ПротоколСостояниеИсполненияГиперссылка Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.Исполнение) Тогда
			ПоказатьЗначение(, ТекущиеДанные.Исполнение);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.ПунктПротокола);
	ОткрытьФорму("Справочник.ПротоколыМероприятий.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколПередУдалением(Элемент, Отказ)
	
	Если ПротоколТолькоПросмотр Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлы

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВладелецФайла = Объект.Ссылка;
	ФайлОснование = ТекущийФайл();
	
	Если Не Копирование Тогда
		Попытка
			РежимСоздания = 1;
			РаботаСФайламиКлиент.ДобавитьФайл(Неопределено, ВладелецФайла, ЭтотОбъект, РежимСоздания, Истина);
		Исключение
			Инфо = ИнформацияОбОшибке();
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка создания нового файла: %1'"),
				КраткоеПредставлениеОшибки(Инфо));
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецПопытки;
	Иначе
		РаботаСФайламиКлиент.СкопироватьФайл(ВладелецФайла, ФайлОснование);
	КонецЕсли;
	
	ОбновитьФайлы();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриИзменении(Элемент)
	
	НайтиИПоказатьКоличествоФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КакОткрывать = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ДействиеПоДвойномуЩелчкуМыши;
	Если КакОткрывать = "ОткрыватьКарточку" Тогда
		ПоказатьЗначение(, ВыбраннаяСтрока);
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ВыбраннаяСтрока, 
		Неопределено, УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	РезультатОткрытьКарточку = "ОткрытьКарточку";
	
	Если Результат = РезультатРедактировать Тогда
		Обработчик = Новый ОписаниеОповещения("СписокВыборПослеРедактированияФайла", ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	ИначеЕсли Результат = РезультатОткрытьКарточку Тогда
		ПоказатьЗначение(, ПараметрыВыполнения.ДанныеФайла.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеРедактированияФайла(Результат, ПараметрыВыполнения) Экспорт
	
	УстановитьДоступностьКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Файлы.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВладелецФайлаСписка = Объект.Ссылка;
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;	
	РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(
		ПараметрыПеретаскивания,
		ВладелецФайлаСписка,
		ЭтотОбъект,
		НеОткрыватьКарточкуПослеСозданияИзФайла);
	ОбновитьФайлы();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ФайлыДобавленные.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
		ФайлСсылка = ПолучитьИзВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ФайлСсылка, 
			Неопределено, УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);
		КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	Иначе		
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(
			Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПослеУдаления(Элемент)
	
	КоличествоФайлов = ФайлыДобавленные.Количество();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокКатегорий

&НаКлиенте
Процедура СписокКатегорийДанныхПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	УдалитьКатегорииИзСпискаВыбранных();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Ключ", Элемент.ТекущиеДанные.Значение);
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ПараметрыФормы = Новый Структура("Ключ", Элемент.ТекущиеДанные.Значение);
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПослеУдаления(Элемент)
	
	СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуПодбораКатегорийПродолжение",
		ЭтотОбъект,
		Новый Структура);

	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаКатегорий(
		СписокКатегорийДанных, ОписаниеОповещения); 
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораКатегорийПродолжение(СписокКатегорийДанных, Параметры)Экспорт 
	
	Модифицированность = Параметры.Модифицированность Или Модифицированность;
	Элементы.Категории.Заголовок = 
		РаботаСКатегориямиДанныхКлиентСервер.ПолучитьЗаголовокВкладкиКатегории(СписокКатегорийДанных);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРабочаяГруппа

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСАдреснойКнигойКлиент.ВыбратьУчастникаРабочейГруппы(ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СотрудникиКлиент.ОбработкаВыбораКонтейнера(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСРабочимиГруппамиКлиент.ДокументРабочаяГруппаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры 

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСРабочимиГруппамиКлиент.ДокументРабочаяГруппаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Неопределено, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриНачалеРедактирования(Элемент, НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриОкончанииРедактирования(
		ЭтотОбъект,
		Элемент,
		ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалением(Элемент, Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РабочаяГруппаТаблицаПередУдалениемПродолжение",
		ЭтотОбъект);
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаТаблицаПередУдалением(
		ЭтотОбъект,
		Отказ,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	ТаблицаРГ = Элементы.РабочаяГруппаТаблица;
	Для Каждого Индекс Из ТаблицаРГ.ВыделенныеСтроки Цикл
		РабочаяГруппаТаблица.Удалить(ТаблицаРГ.ДанныеСтроки(Индекс));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ЭтоМобильныйКлиент Тогда
		Элементы.РабочаяГруппаТаблицаИзменение.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ЭтоМобильныйКлиент Тогда
			Элементы.РабочаяГруппаТаблицаИзменение.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоОбзора

&НаКлиенте
Процедура ДеревоОбзораПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбзораПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущийФайл = ТекущийФайл();
	Если ТекущийФайл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьФайл(ТекущийФайл);
	
	Если ЭтоМобильныйКлиент Тогда
		МК_ОбновитьЗаголовокДеревоОбзора();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбзораПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущийФайл = ТекущийФайл();
	Если ТекущийФайл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущийФайл);
	
	Если ЭтоМобильныйКлиент Тогда
		МК_ОбновитьЗаголовокДеревоОбзора();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбзораПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
		
	ВладелецФайлаСписка = Объект.Ссылка;
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;	
	РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(
		ПараметрыПеретаскивания,
		ВладелецФайлаСписка,
		ЭтотОбъект,
		НеОткрыватьКарточкуПослеСозданияИзФайла);
	ОбновитьФайлы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбзораПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбзораПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКоманд();
	ПодключитьОбработчикОжидания("ОбновитьОбзор", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбзораВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущийФайл = ТекущийФайл();
	Если ТекущийФайл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КакОткрывать = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ДействиеПоДвойномуЩелчкуМыши;
	Если КакОткрывать = "ОткрыватьКарточку" Тогда
		ПоказатьЗначение(, ТекущийФайл);
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
		ТекущийФайл,
		Неопределено,
		УникальныйИдентификатор,
		Неопределено,
		ПредыдущийАдресФайла);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыДействия

&НаКлиенте
Процедура ДействияПриИзменении(Элемент)
	
	ДействияКлиент.ДействияПриИзменении(ЭтотОбъект,
		Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДействияКлиент.ДействияВыбор(ЭтотОбъект,
		Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПриАктивизацииСтроки(Элемент)
	
	ДействияКлиент.ДействияПриАктивизацииСтроки(ЭтотОбъект,
		Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПередНачаломИзменения(Элемент, Отказ)
	
	ДействияКлиент.ДействияПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ДействияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ОбработчикОповещения = Новый ОписаниеОповещения("ДобавитьДействиеЗавершение", ЭтотОбъект);
	ПараметрыОбъектаОбработки = ДействияКлиентСервер.ПараметрыОбъектаОбработки(
		Объект.Ссылка,
		Объект);
	ДействияКлиент.ДобавитьДействиеИзКарточкиПредмета(
		ЭтотОбъект,
		ОбработчикОповещения,
		ПараметрыОбъектаОбработки,
		ПараметрыВидаОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПередРазворачиванием(Элемент, Строка, Отказ)
	
	ДействияКлиент.ДействияПередРазворачиванием(ЭтотОбъект, Элемент, Строка, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПередУдалением(Элемент, Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДействияПередУдалениемПродолжение",
		ЭтотОбъект, Новый Структура);
	ДействияКлиент.ДействияПередУдалением(
		ЭтотОбъект,
		Элемент,
		Отказ,
		ОписаниеОповещения,
		ПараметрыВидаОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПослеУдаления(Элемент)
	
	ДействияКлиент.ДействияПослеУдаления(ЭтотОбъект,
		Элемент);
		
	ДействияПослеУдаленияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДействияПослеУдаленияНаСервере()
	
	ОбновитьПараметрыВидаОбъекта();

КонецПроцедуры

&НаКлиенте
Процедура ДействияПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	МассивДействий = Новый Массив;
	Если Результат = КодВозвратаДиалога.Да Тогда 
		МассивДействий.Добавить(Параметры.ТекущиеДанные.Действие);
	КонецЕсли;
	
	ПометитьДействияНаУдаление(МассивДействий);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы 

&НаКлиенте
Процедура МК_ЗаписатьМероприятие(Команда)

	ЗавершениеПрикрепленияЗаписи = Новый ОписаниеОповещения("ЗавершениеПрикрепленияЗаписи", ЭтотОбъект);
	МК_Клиент.НачатьПолучениеМультимедиаДанных("Аудио", ЗавершениеПрикрепленияЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаРасшифровка(Команда)

	МК_ПереключитьОбзорНаСтраницу(ЭтотОбъект, Элементы.СтраницаОбзорHTML, Элементы.МК_КнопкаСтраницаРасшифровка);
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаАвтопротокол(Команда)

	МК_ПереключитьОбзорНаСтраницу(ЭтотОбъект, Элементы.СтраницаТаймлистАвтопротокол, Элементы.МК_КнопкаСтраницаАвтопротокол);
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаОбзор(Команда)

	МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.СтраницаОбзор, Элементы.МК_КнопкаСтраницаОбзор);

КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаМероприятие(Команда)

	МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.СтраницаМероприятие, Элементы.МК_КнопкаСтраницаМероприятие);

КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаУчастники(Команда)

	МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.СтраницаУчастники, Элементы.МК_КнопкаСтраницаУчастники);

КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаПрограмма(Команда)

	МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.СтраницаПрограмма, Элементы.МК_КнопкаСтраницаПрограмма);

КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаОбработка(Команда)

	МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.СтраницаОбработка, Элементы.МК_КнопкаСтраницаОбработка);

КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаПротокол(Команда)

	МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.СтраницаРешения, Элементы.МК_КнопкаСтраницаПротокол);

КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаКатегории(Команда)

	МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.Категории, Элементы.МК_КнопкаСтраницаКатегории);

КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаФайлы(Команда)

	МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.ГруппаФайлы, Элементы.МК_КнопкаСтраницаФайлы);

КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаРабочаяГруппа(Команда)

	МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.СтраницаРабочаяГруппа, Элементы.МК_КнопкаСтраницаРабочаяГруппа);

КонецПроцедуры

&НаКлиенте
Процедура МК_ПоказатьСкрытьДеревоОбзора(Команда)

	Элементы.ДеревоОбзора.Видимость = Не Элементы.ДеревоОбзора.Видимость;
	МК_ПоказатьСкрытьДеревоОбзораПродолжение();

КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#Область Файлы

&НаКлиенте
Процедура ПоказатьПомеченныеНаУдаление(Команда)
	
	ПоказатьПомеченныеНаУдаление = Не ПоказатьПомеченныеНаУдаление;
	ПоказатьПомеченныеНаУдалениеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзСписка(Команда)
	
	Если Элементы.ФайлыДобавленные.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
		ФайлСсылка = ПолучитьИзВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ФайлСсылка, 
			Неопределено, УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);
		КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	Иначе		
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(
			Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если Объект.Ссылка.Пустая()
		И Элементы.ФайлыДобавленные.ТекущаяСтрока <> Неопределено Тогда
		Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
			ТекущийФайлВСпискеДобавленных = ПолучитьИзВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
			Записать();
		Иначе			
			РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(
				Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
		КонецЕсли;	
	Иначе
		
		ТекущийФайл = ТекущийФайл();
		Если ТекущийФайл = Неопределено Тогда 
			Возврат;
		КонецЕсли;
			
		Обработчик = Новый ОписаниеОповещения("ОбновитьФайлПослеКоманды", ЭтотОбъект);
		РаботаСФайламиКлиент.РедактироватьСОповещением(Обработчик, ТекущийФайл);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	ТекущийФайл = ТекущийФайл();
	Если ТекущийФайл = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьФайлПослеКоманды", ЭтотОбъект);
	
	ТекущиеДанные = ТекущиеДанныеФайла();
	
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(
		Обработчик,
		ТекущийФайл,
		УникальныйИдентификатор);
	ПараметрыОбновленияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;
	ПараметрыОбновленияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	ПараметрыОбновленияФайла.Редактирует = ТекущиеДанные.Редактирует;
	ПараметрыОбновленияФайла.АвторТекущейВерсии = ТекущиеДанные.Автор;
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура Занять(Команда)
	
	ТекущийФайл = ТекущийФайл();
	Если ТекущийФайл = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	Обработчик = Новый ОписаниеОповещения("ОбновитьФайлПослеКоманды", ЭтотОбъект);
	РаботаСФайламиКлиент.ЗанятьСОповещением(Обработчик, ТекущийФайл);
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	ТекущийФайл = ТекущийФайл();
	Если ТекущийФайл = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьФайлПослеКоманды", ЭтотОбъект);
	
	ТекущиеДанные = ТекущиеДанныеФайла();
	
	ПараметрыОсвобожденияФайла = РаботаСФайламиКлиент.ПараметрыОсвобожденияФайла(
		Обработчик,
		ТекущийФайл);
	ПараметрыОсвобожденияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;
	ПараметрыОсвобожденияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	ПараметрыОсвобожденияФайла.Редактирует = ТекущиеДанные.Редактирует;
	РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(ПараметрыОсвобожденияФайла);
	
	УстановитьДоступностьКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	ТекущийФайл = ТекущийФайл();
	Если ТекущийФайл = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьФайлПослеКоманды", ЭтотОбъект);
	
	РаботаСФайламиКлиент.СохранитьИзмененияФайлаСОповещением(
		Обработчик,
		ТекущийФайл,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	ТекущийФайл = ТекущийФайл();
	Если ТекущийФайл = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ВыделенныеФайлы = ВыделенныеФайлы();
	Если ВыделенныеФайлы.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		СписокФайловДляВыгрузки.ЗагрузитьЗначения(ВыделенныеФайлы);
		
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			РаботаСФайламиКлиент.СохранитьФайлыКак(СписокФайловДляВыгрузки, УникальныйИдентификатор);
		КонецЕсли;
		
	Иначе
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(
			ТекущийФайл,
			Неопределено,
			УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	ТекущийФайл = ТекущийФайл();
	Если ТекущийФайл = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаИРабочийКаталог(ТекущийФайл);
	
	РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
		Неопределено,
		ДанныеФайла,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Распознать(Команда)
	
	ТекущийФайл = ТекущийФайл();
	Если ТекущийФайл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеФайлы = ВыделенныеФайлы();
	ВыделенныеФайлыТаймлист = ВыделенныеФайлыТаймлист(ВыделенныеФайлы);
	
	Если ВыделенныеФайлыТаймлист.Количество() > 0 Тогда
		
		Обработчик = Новый ОписаниеОповещения("ПослеНачалаРасшифровки", ЭтотОбъект);
		ДополнительныеПараметрыОповещения = Новый Структура("ВыделенныеФайлы, Обработчик",
			ВыделенныеФайлы, Обработчик);
		ОповещениеОЗакрытииФормыТаймлист = Новый ОписаниеОповещения("ПослеУказанияКоличестваСпикеров", ЭтотОбъект,
			ДополнительныеПараметрыОповещения);
		
		Если ВыделенныеФайлыТаймлист.Количество() = 1 Тогда
			ТаймлистКлиент.НачатьРасшифровку(ЭтотОбъект, ВыделенныеФайлыТаймлист[0].Значение,
				ОповещениеОЗакрытииФормыТаймлист);
		Иначе
			ТаймлистКлиент.НачатьРасшифровку(ЭтотОбъект, ВыделенныеФайлыТаймлист, ОповещениеОЗакрытииФормыТаймлист);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ПослеРаспознавания", ЭтотОбъект);
	
	Если ВыделенныеФайлы.Количество() > 1 Тогда
		КомандыРаботыСФайламиКлиент.РаспознатьФайлСОповещением(Обработчик, ВыделенныеФайлы);
	Иначе
		КомандыРаботыСФайламиКлиент.РаспознатьФайлСОповещением(Обработчик, ТекущийФайл);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортФайлов(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ИмпортФайловПослеУстановкиРасширения", ЭтотОбъект);
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьФайл(Команда)
	
	ТекущийФайл = ТекущийФайл();
	Если ТекущийФайл = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	МассивФайлов = Новый Массив;
	МассивФайлов.Добавить(ТекущийФайл);
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ТекущийФайл);
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ВладелецФайла", ДанныеФайла.Владелец);
	ПараметрыВыполнения.Вставить("Ссылка", ТекущийФайл);
	
	РаботаСФайламиСлужебныйКлиент.ПодписатьФайл(МассивФайлов, УникальныйИдентификатор,
		Новый ОписаниеОповещения("ПодписатьЗавершение", ЭтотОбъект, ПараметрыВыполнения));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭПИзФайла(Команда)
	
	ТекущийФайл = ТекущийФайл();
	Если ТекущийФайл = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ДобавитьЭПИзФайлаЗавершение", ЭтотОбъект);
	РаботаСФайламиСлужебныйКлиент.ДобавитьПодписьИзФайла(
		ТекущийФайл,
		УникальныйИдентификатор,
		Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВместеСЭП(Команда)
	
	ТекущийФайл = ТекущийФайл();
	Если ТекущийФайл = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйКлиент.СохранитьФайлВместеСПодписью(ТекущийФайл, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Зашифровать(Команда)
	
	ТекущийФайл = ТекущийФайл();
	Если ТекущийФайл = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектСсылка = ТекущийФайл;
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(ОбъектСсылка);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", ОбъектСсылка);
	Обработчик = Новый ОписаниеОповещения("ЗашифроватьПослеШифрованияНаКлиенте", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиСлужебныйКлиент.Зашифровать(Обработчик, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ТекущийФайл = ТекущийФайл();
	Если ТекущийФайл = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектСсылка = ТекущийФайл;
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(ОбъектСсылка);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", ОбъектСсылка);
	Обработчик = Новый ОписаниеОповещения("РасшифроватьПослеРасшифровкиНаКлиенте", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиСлужебныйКлиент.Расшифровать(Обработчик, ДанныеФайла.Ссылка, УникальныйИдентификатор, ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ВыделенныеФайлы = ВыделенныеФайлы();
	ЧислоФайлов = ВыделенныеФайлы.Количество();
	СкопироватьСтрокиНаСервере(ВыделенныеФайлы);
	
	Если ЧислоФайлов <> 0 Тогда
		
		ПолноеОписание = СтрШаблон(
			НСтр("ru = 'Файлы (%1 шт) скопированы в буфер обмена.'"), ЧислоФайлов);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Копирование в буфер'"),
			,
			ПолноеОписание,
			БиблиотекаКартинок.Информация32);
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	Если Модифицированность Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЧислоФайлов = 0;
	ВставитьСтрокиНаСервере(ЧислоФайлов);
	
	Если ЧислоФайлов <> 0 Тогда
		
		ПолноеОписание = СтрШаблон(
			НСтр("ru = 'Файлы (%1 шт) вставлены из буфера обмена.'"), ЧислоФайлов);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Вставка из буфера'"),
			,
			ПолноеОписание,
			БиблиотекаКартинок.Информация32);
			
	КонецЕсли;	
		
КонецПроцедуры

#КонецОбласти

#Область Категории

&НаКлиенте
Процедура ОткрытьФормуПодбораКатегорий(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуПодбораКатегорийПродолжение",
		ЭтотОбъект,
		Новый Структура);

	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаКатегорий(
		СписокКатегорийДанных, ОписаниеОповещения); 
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьКатегорииИзСпискаВыбранных()
	
	Если Элементы.СписокКатегорийДанных.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаления = РаботаСКатегориямиДанных.ФильтроватьСписокКатегорийДляУдаления(Объект.Ссылка, СписокКатегорийДанных, Элементы.СписокКатегорийДанных.ВыделенныеСтроки);
	Для Каждого СтрокаДляУдаления Из МассивСтрокДляУдаления Цикл
		СписокКатегорийДанных.Удалить(СписокКатегорийДанных.НайтиПоИдентификатору(СтрокаДляУдаления));
	КонецЦикла;
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		Модифицированность = Истина;
		СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокОбъектовСВыбраннымиКатегориями(Команда)
	
	Если СписокКатегорийДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	МассивКатегорий = Новый Массив();
	УникальныйИдентификаторСпискаКатегорий = "";
	Для Каждого ВыбраннаяКатегория Из СписокКатегорийДанных Цикл
		МассивКатегорий.Добавить(ВыбраннаяКатегория.Значение);
		УникальныйИдентификаторСпискаКатегорий = УникальныйИдентификаторСпискаКатегорий + "," + ВыбраннаяКатегория.ПолноеНаименование;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокВыбранныхКатегорий", МассивКатегорий);
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаСписка", ПараметрыФормы, Элементы.СписокКатегорийДанных, УникальныйИдентификаторСпискаКатегорий);
	
КонецПроцедуры

#КонецОбласти

#Область РабочаяГруппа

&НаКлиенте
Процедура ПерезаполнитьРабочуюГруппуДокумента(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПерезаполнитьРабочуюГруппуДокументаЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Рабочая группа будет заполнена автоматически. Все внесенные изменения будут удалены. Продолжить?'");
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьРабочуюГруппуДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПерезаполнитьРабочуюГруппуДокументаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУчастниковРабочейГруппы(Команда)
	
	РаботаСАдреснойКнигойКлиент.ПодобратьУчастниковРабочейГруппы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаОбновить(Команда)
	
	РабочаяГруппаОбновитьНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область УчетВремени

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	
	ПараметрыОповещения = Неопределено;
	
	НуженДиалог = УчетВремениКлиент.НуженДиалогДляХронометража(
		ВключенХронометраж,
		ДатаНачалаХронометража,
		ВидыРабот);
	
	Если НуженДиалог = Ложь Тогда
		
		ПереключитьХронометражСервер(ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
		
	Иначе
		
		ДлительностьРаботы = УчетВремениКлиент.ПолучитьДлительностьРаботы(ДатаНачалаХронометража);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДатаОтчета", ТекущаяДата());
		ПараметрыФормы.Вставить("ВидыРабот", ВидыРабот);
		ПараметрыФормы.Вставить("ОписаниеРаботы", Строка(Объект.Ссылка));
		ПараметрыФормы.Вставить("ДлительностьРаботы", ДлительностьРаботы);
		ПараметрыФормы.Вставить("НачалоРаботы", ДатаНачалаХронометража);
		ПараметрыФормы.Вставить("Объект", Объект.Ссылка);
		ПараметрыФормы.Вставить("СпособУказанияВремени", СпособУказанияВремени);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПереключитьХронометражЗавершение", ЭтотОбъект);
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаДобавленияРаботы",
			ПараметрыФормы, , , , , ОписаниеОповещения, РежимОткрытияОкна);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометражЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПараметрыОповещения = Неопределено;
		ДобавитьВОтчетИОбновитьФорму(Результат, ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
	Иначе
		ОтключитьХронометражСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	
	ДатаОтчета = ТекущаяДата();
	
	УчетВремениКлиент.ДобавитьВОтчетКлиент(
		ДатаОтчета,
		ВключенХронометраж, 
		ДатаНачалаХронометража, 
		ДатаКонцаХронометража, 
		ВидыРабот, 
		Объект.Ссылка,
		СпособУказанияВремени,
		Элементы.ПереключитьХронометраж,
		Ложь,
		ЭтотОбъект);
		
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПодобратьУчастников(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Подбор участников мероприятия'"));
	ПараметрыФормы.Вставить("ЗаголовокСпискаВыбранных", НСтр("ru = 'Выбранные участники мероприятия:'"));
	ПараметрыФормы.Вставить("ЗаголовокСпискаАдреснойКниги", НСтр("ru = 'Все участники мероприятия:'"));
	ПараметрыФормы.Вставить("РежимРаботыФормы", 2);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ПодменятьПользователейСотрудниками", Истина);
	ПараметрыФормы.Вставить("ОтображатьРоли", Истина);
	ПараметрыФормы.Вставить("ОтображатьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ВыбиратьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ОтображатьЛичныхАдресатов", Истина);
	
	ВыбранныеАдресаты = Новый Массив;
	Для Каждого СтрУчастник Из Участники Цикл
		Адресат = РаботаСАдреснойКнигойКлиент.СтруктураВыбранногоАдресата();
		Адресат.Контакт = СтрУчастник.Исполнитель;
		ВыбранныеАдресаты.Добавить(Адресат);
	КонецЦикла;
	ПараметрыФормы.Вставить("ВыбранныеАдресаты", ВыбранныеАдресаты);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодобратьУчастников_Продолжение", ЭтотОбъект);
	
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыФормы, ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУчастников_Продолжение(УчастникиМероприятия, ДополнительныеПараметры) Экспорт
	
	Если УчастникиМероприятия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из УчастникиМероприятия Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Исполнитель", Строка.Контакт);
		НайденныеУчастники = Участники.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеУчастники.Количество() = 0 Тогда
			Строка.Вставить("ЯвкаОбязательна", ЯвкаОбязательнаПоУмолчанию);
			Строка.Вставить("Отсутствовал", Ложь);
			Строка.Вставить("СостояниеПриглашения",
				ПредопределенноеЗначение("Перечисление.СостоянияПриглашения.ПустаяСсылка"));
			Продолжить;
		КонецЕсли;
		
		НайденныйУчастник = НайденныеУчастники[0];
		
		Строка.Вставить("ЯвкаОбязательна", НайденныйУчастник.ЯвкаОбязательна);
		Строка.Вставить("Отсутствовал", НайденныйУчастник.Отсутствовал);
		Строка.Вставить("СостояниеПриглашения", НайденныйУчастник.СостояниеПриглашения);
		
	КонецЦикла;
	Участники.Очистить();
	
	Для Каждого Строка Из УчастникиМероприятия Цикл
		НоваяСтрока = Участники.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.Исполнитель = Строка.Контакт;
	КонецЦикла;
	
	КоличествоУчастников = Участники.Количество();
	
	Если УчастникиМероприятия.Количество() > 0 Тогда 
		ЗаблокироватьДанныеУчастниковДляРедактирования();
	КонецЕсли;
	
	Модифицированность = Истина;
	ПроверитьОтсутствие = Истина;
	
	ВывестиПодсказкуСледующегоДействия();
	ОбновитьЧасовыеПоясаУчастниковНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеУчастников(Команда)
	
	ЗаполнитьУчастниковМероприятия();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПротокол(Команда)
	
	Если Объект.Программа.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для заполнения протокола необходимо сначала заполнить программу.'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПротоколЗавершение", ЭтотОбъект);
	Если Объект.Протокол.Количество() > 0  Тогда
		ТекстВопроса = НСтр("ru = 'Перед заполнением строки протокола будут очищены, а мероприятие будет записано.
			|Продолжить?'");
		ОбщегоНазначенияДокументооборотКлиент.ПоказатьВопросДаНет(ОписаниеОповещения, ТекстВопроса);
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Заполнить протокол мероприятия?'");
	ОбщегоНазначенияДокументооборотКлиент.ПоказатьВопросДаНет(ОписаниеОповещения, ТекстВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПротоколЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеМероприятиямиВызовСервера.ЗаполнитьПротокол(Объект.Ссылка);
	
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПротоколНаОснованииПредыдущего(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ПредыдущееМероприятие) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не указано предыдущее мероприятие.'"),,
			"Объект.ПредыдущееМероприятие");
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПротоколНаОснованииПредыдущегоЗавершение", ЭтотОбъект);
	Если Объект.Протокол.Количество() > 0  Тогда
		ТекстВопроса =
			НСтр("ru = 'Выполняется заполнение протокола на основании протокола предыдущего мероприятия.
				|Перед заполнением строки протокола будут очищены. Продолжить?'");
		ОбщегоНазначенияДокументооборотКлиент.ПоказатьВопросДаНет(ОписаниеОповещения, ТекстВопроса);
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Заполнить программу и протокол на основании протокола предыдущего мероприятия?
		|Внимание! Программа мероприятия будет очищена и скопирована из предыдущего.'");
	ОбщегоНазначенияДокументооборотКлиент.ПоказатьВопросДаНет(ОписаниеОповещения, ТекстВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПротоколНаОснованииПредыдущегоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеМероприятиямиВызовСервера.ЗаполнитьПротоколНаОснованииПредыдущего(Объект.Ссылка);
	
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПрограмму(Команда)
	
	СоздатьДокумент(Элементы.МатериалПрограмма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПротокол(Команда)
	
	СоздатьДокумент(Элементы.МатериалПротокол);
	
КонецПроцедуры

&НаКлиенте
Процедура Подписаться(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектПодписки", Объект.Ссылка);
		ОткрытьФорму("ОбщаяФорма.ПодпискаНаУведомленияПоОбъекту", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьВремя(Команда)
	
	ПодобратьВремяКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступностьУчастников(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНачала) Или Не ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не указана дата мероприятия.'"),
			,
			"МестнаяДатаНачала");
		Возврат;
		
	КонецЕсли;
	
	Если Участники.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не указаны участники мероприятия.'"),
			,
			"Участники");
		Возврат;
		
	КонецЕсли;
	
	МассивУчастников = Новый Массив;
	Для Каждого Строка Из Участники Цикл
		Если ЗначениеЗаполнено(Строка.Исполнитель)
			И ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Сотрудники") Тогда
			 
			МассивУчастников.Добавить(Строка.Исполнитель);
		КонецЕсли;
	КонецЦикла;
	
	ИсключенияЗанятости = Новый Массив;
	ИсключенияЗанятости.Добавить(Объект.Ссылка);
	УчастникиДоступны = РаботаСРабочимКалендаремКлиент.ПроверитьДоступностьФизЛицСотрудников(
		МассивУчастников,
		Объект.ДатаНачала,
		Объект.ДатаОкончания,
		ИспользоватьРабочийКалендарь,
		ИсключенияЗанятости,
		Ложь);
	
	Если УчастникиДоступны Тогда
		ТекстПредупреждения = НСтр("ru = 'Все участники доступны.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьДоступностьУчастниковЗавершение", ЭтотОбъект);
	РаботаСРабочимКалендаремКлиент.ОткрытьФормуЗанятостиФизЛицСотрудников(
		ОписаниеОповещения, МассивУчастников, Объект.ДатаНачала, Объект.ДатаОкончания, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступностьУчастниковЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат Тогда
		ПодобратьВремяКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиПрограммуВОтдельномДокументе(Команда)
	
	Объект.ТипПрограммы = ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВОтдельномДокументе");
	
	УстановитьДоступность();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиПрограммуВТаблице(Команда)
	
	Объект.ТипПрограммы = ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВТаблице");
	Объект.МатериалПрограмма = Неопределено;
	
	УстановитьДоступность();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиПрограммуВФайлах(Команда)
	
	Объект.ТипПрограммы = ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВМатериалах");
	Объект.МатериалПрограмма = Неопределено;
	
	УстановитьДоступность();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиПротоколВОтдельномДокументе(Команда)
	
	Объект.ТипПротокола = ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВОтдельномДокументе");
	
	УстановитьДоступность();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиПротоколВТаблице(Команда)
	
	Объект.ТипПротокола = ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВТаблице");
	Объект.МатериалПротокол = Неопределено;
	
	УстановитьДоступность();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ВестиПротоколВФайлах(Команда)
	
	Объект.ТипПротокола = ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВМатериалах");
	Объект.МатериалПротокол = Неопределено;
	
	УстановитьДоступность();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ЗаписатьИЗакрытьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписать(Команда)
	
	Если Не УчитыватьКакПротокольноеМероприятие Тогда
		Объект.Председатель = ПустаяСсылкаНаСотрудника;
		Объект.Секретарь = ПустаяСсылкаНаСотрудника;
	КонецЕсли;
	
	УстановитьМестоПроведения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ЗакрытьПослеЗаписи", Ложь);
	ЗаписатьКлиент(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЯвкаОбязательнаДляВсех(Команда)
	
	Если Не ДанныеУчастниковЗаблокированы И Не Объект.Ссылка.Пустая() Тогда 
		ЗаблокироватьДанныеУчастниковДляРедактирования();
	КонецЕсли;
	
	Для Каждого Участник Из Участники Цикл
		Участник.ЯвкаОбязательна = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьЯвкаОбязательнаДляВсех(Команда)
	
	Если Не ДанныеУчастниковЗаблокированы И Не Объект.Ссылка.Пустая() Тогда 
		ЗаблокироватьДанныеУчастниковДляРедактирования();
	КонецЕсли;
	
	Для Каждого Участник Из Участники Цикл
		Участник.ЯвкаОбязательна = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ВставитьКартинкуИзБуфера(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	КартинкаИзБуфераОбмена = Ждать СредстваБуфераОбмена.ПолучитьДанныеАсинх(СтандартныйФорматДанныхБуфераОбмена.Картинка);
	
	Если КартинкаИзБуфераОбмена = Неопределено Тогда
		ПоказатьПредупреждение(
			, НСтр(
				"ru='Буфер обмена не содержит картинки'"
				, "ru"
			)
		);
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = "";
	
#Если Не ВебКлиент Тогда 
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла("png");
	КартинкаИзБуфераОбмена.Записать(ПутьКФайлу);

#КонецЕсли
	
	ВставитьКартинкуИзБуфераЗавершение(Истина, ПутьКФайлу);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветЖелтый(Команда)
	
	УстановитьЦвет(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Желтый"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветЗеленый(Команда)
	
	УстановитьЦвет(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Зеленый"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветКрасный(Команда)
	
	УстановитьЦвет(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Красный"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветНет(Команда)
	
	УстановитьЦвет(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Нет"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветОранжевый(Команда)
	
	УстановитьЦвет(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Оранжевый"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветСиний(Команда)
	
	УстановитьЦвет(ПредопределенноеЗначение("Перечисление.ЦветаРабочегоКалендаря.Синий"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьПриглашение(Команда)
	
	Если СостояниеПриглашения = ПредопределенноеЗначение("Перечисление.СостоянияПриглашения.Принято") Тогда
		Возврат;
	КонецЕсли;
	
	ИсключенияЗанятости = Новый Массив;
	ИсключенияЗанятости.Добавить(Объект.Ссылка);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПринятьПриглашениеЗавершение", ЭтотОбъект);
	Если Не РаботаСРабочимКалендаремКлиент.ПроверитьДоступностьФизЛицСотрудников(
			СотрудникиКлиент.ОсновнойСотрудник(),
			Объект.ДатаНачала,
			Объект.ДатаОкончания,
			ИспользоватьРабочийКалендарь,
			ИсключенияЗанятости,
			Истина,
			ОписаниеОповещения) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьПриглашениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьСостояниеПриглашения(ПредопределенноеЗначение("Перечисление.СостоянияПриглашения.Принято"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьПриглашение(Команда)
	
	Если СостояниеПриглашения = ПредопределенноеЗначение("Перечисление.СостоянияПриглашения.НеПринято") Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьСостояниеПриглашения(ПредопределенноеЗначение("Перечисление.СостоянияПриглашения.НеПринято"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПриглашение(Команда)
	
	ИзменитьСостояниеПриглашения(ПредопределенноеЗначение("Перечисление.СостоянияПриглашения.ПустаяСсылка"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПунктПрограммы(Команда)
	
	ОткрытьФормуИзмененияПунктаПрограммы(Элементы.Программа.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПрервавшегоОбработку(Команда)
	ПоказатьЗначение(, ПрервалРасшифровка);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	РежимСоздания = 1;
	РаботаСФайламиКлиент.ДобавитьФайл(
		Неопределено,
		Объект.Ссылка,
		ЭтотОбъект,
		РежимСоздания,
		Истина);
		
	Если ЭтоМобильныйКлиент Тогда
		МК_ОбновитьЗаголовокДеревоОбзора();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоОбзора(Команда)
	
	ОбновитьДеревоОбзораНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОбзорHTML(Команда)
	
	ТекущийОбъектОбзора = Неопределено;
	ТекущиаяВерсияОбъектОбзора = Неопределено;
	ОбновитьОбзор();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуФайла(Команда)
	
	ТекущийФайл = ТекущийФайл();
	Если ТекущийФайл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущийФайл);
	
КонецПроцедуры

&НаКлиенте
Процедура НастоящийРазмер(Команда)
	
	ТекущиеДанные = ТекущиеДанныеФайла();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	ТекущийФайл = ТекущиеДанные.Ссылка;
	РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	
	Если Не ИспользоватьПредпросмотрФайлов Или РедактируетТекущийПользователь Тогда
		Возврат;
	КонецЕсли;
	
	ДокументPDF = Неопределено;
	
	ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();
	ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
	ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.Расширение;
	ПараметрыHTMLПредставление.Размер = ТекущиеДанные.ТекущаяВерсияРазмер;
	ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
	ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки = Ложь;
	МасштабироватьPDFИКартинки = Ложь;
	
	ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
		ТекущийФайл,
		ПараметрыHTMLПредставление,
		ДокументPDF,
		ВыполняетсяРаспознавание);
	
	ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ОбзорHTML, ТаймлистАвтопротоколHTML,
		РаспознанныйТекстHTML);
	
	Элементы.КартинкаОбзорУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
	Элементы.НадписьОбзорУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
	
	УстановитьВидимостьКомандМасштаба(ТекущиеДанные.Расширение);
	
	Если ДокументPDF = Неопределено Или ЭтоМобильныйКлиент Тогда
		Элементы.СтраницыОбзора.ТекущаяСтраница = Элементы.СтраницаОбзорHTML;
	Иначе
		Элементы.СтраницыОбзора.ТекущаяСтраница = Элементы.СтраницаОбзорPDF;
		ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
		Элементы.ДокументPdfПоле.НомерТекущейСтраницы = 1;
	КонецЕсли;
	
	ОжидатьРаспознаванияПриНеобходимости(ТекущийФайл);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоШиринеОкна(Команда)
	
	ТекущиеДанные = ТекущиеДанныеФайла();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	ТекущийФайл = ТекущиеДанные.Ссылка;
	РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	
	Если Не ИспользоватьПредпросмотрФайлов Или  РедактируетТекущийПользователь Тогда
		Возврат;
	КонецЕсли;
	
	ДокументPDF = Неопределено;
	
	ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();
	ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
	ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.Расширение;
	ПараметрыHTMLПредставление.Размер = ТекущиеДанные.ТекущаяВерсияРазмер;
	ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
	ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки = Истина;
	МасштабироватьPDFИКартинки = Истина;
	
	ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
		ТекущийФайл,
		ПараметрыHTMLПредставление,
		ДокументPDF,
		ВыполняетсяРаспознавание);
	
	ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ОбзорHTML, ТаймлистАвтопротоколHTML,
		РаспознанныйТекстHTML);
	
	Элементы.КартинкаОбзорУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
	Элементы.НадписьОбзорУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
	
	УстановитьВидимостьКомандМасштаба(ТекущиеДанные.Расширение);
	
	Если ДокументPDF = Неопределено Или ЭтоМобильныйКлиент Тогда
		Элементы.СтраницыОбзора.ТекущаяСтраница = Элементы.СтраницаОбзорHTML;
	Иначе
		Элементы.СтраницыОбзора.ТекущаяСтраница = Элементы.СтраницаОбзорPDF;
		ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
		Элементы.ДокументPdfПоле.НомерТекущейСтраницы = 1;
	КонецЕсли;
	
	ОжидатьРаспознаванияПриНеобходимости(ТекущийФайл);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВПротокол(Команда)
	
	Если ПротоколТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПеренестиВПротоколПродолжение", ЭтотОбъект);
	
	Если Объект.Протокол.Количество() <> 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Протокол содержит пункты. Перезаполнить из данных автопротокола?'");
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Перезаполнить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
		
		ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
		ПараметрыВопроса.Заголовок = НСтр("ru = 'Заполнение протокола'");
		ПараметрыВопроса.КнопкаПоУмолчанию = КодВозвратаДиалога.Да;
		ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
		ПараметрыВопроса.Картинка = БиблиотекаКартинок.ДиалогВопрос;
		
		СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(Оповещение, ТекстВопроса, Кнопки, ПараметрыВопроса);
		
	Иначе
		
		РезультатОповещения = Новый Структура("Значение", КодВозвратаДиалога.Да);
		ВыполнитьОбработкуОповещения(Оповещение, РезультатОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВПротоколПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Или Результат.Значение <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Протокол.Очистить();
	
	ТекущиеДанныеФайла = ТекущиеДанныеФайла();
	
	Если Не ЗначениеЗаполнено(ТекущиеДанныеФайла.ТаймлистСледующиеШаги) Тогда
		Возврат;
	КонецЕсли;
	
	МассивПунктов = СтрРазделить(ТекущиеДанныеФайла.ТаймлистСледующиеШаги, ";");
	НомерПункта = 1;
	
	Для Каждого Пункт Из МассивПунктов Цикл
		
		ДатаПункта = Неопределено;
		ДействияКлиент.ВыделитьЭлементыПункта(Пункт, ДатаПункта, "");
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("Владелец", Объект.Ссылка);
		ПараметрыЗаполнения.Вставить("Решили", Пункт);
		ПараметрыЗаполнения.Вставить("НомерПунктаПротокола", Строка(НомерПункта));
		ПараметрыЗаполнения.Вставить("СрокИсполненияПроцесса", ДатаПункта);
		
		СоздатьЗаполнитьПунктПротокола(ПараметрыЗаполнения);
		
		НомерПункта = НомерПункта + 1;
		
	КонецЦикла;
	
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МасштабПлюс(Команда)
	
	Элементы["ДокументPdfПоле"].Масштаб = Элементы["ДокументPdfПоле"].Масштаб + 10;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МасштабМинус(Команда)
	
	Если Элементы["ДокументPdfПоле"].Масштаб <= 10 Тогда
		Возврат;
	КонецЕсли;	
	
	Элементы["ДокументPdfПоле"].Масштаб = Элементы["ДокументPdfПоле"].Масштаб - 10;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоворотЛево(Команда)
	
	Элементы["ДокументPdfПоле"].Ориентация = Элементы["ДокументPdfПоле"].Ориентация - 90;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоворотПраво(Команда)
	
	Элементы["ДокументPdfПоле"].Ориентация = Элементы["ДокументPdfПоле"].Ориентация + 90;

КонецПроцедуры

&НаКлиенте
Процедура ВзятьПункт(Команда)
	
	Если ПротоколТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныйТекст = Элементы.ТекстДляПунктов.ВыделенныйТекст;
	Если Не ЗначениеЗаполнено(ВыделенныйТекст) Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите текст пункта.'"));
		Возврат;
		
	КонецЕсли;
	
	ДатаПункта = Неопределено;
	Номер = "";
	ДействияКлиент.ВыделитьЭлементыПункта(ВыделенныйТекст, ДатаПункта, Номер);
	
	Элементы.ТекстДляПунктов.УстановитьГраницыВыделения(1, 1);
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Владелец", Объект.Ссылка);
	ЗначенияЗаполнения.Вставить("Решили", ВыделенныйТекст);
	ЗначенияЗаполнения.Вставить("НомерПунктаПротокола", Номер);
	ЗначенияЗаполнения.Вставить("СрокИсполненияПроцесса", ДатаПункта);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Справочник.ПротоколыМероприятий.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьИзФайла(Команда)
	
	Если ПротоколТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если ПередВыполнениемОперацииМероприятия() Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ПротоколВзятьИзФайла.Пометка Тогда
		Элементы.ПротоколВзятьИзФайла.Пометка = Ложь;
		Элементы.ГруппаТекст.Видимость = Ложь;
		Возврат;
	КонецЕсли;

	Элементы.ПротоколВзятьИзФайла.Пометка = Истина;
	
	МассивФайлов = Новый Массив;
	ИзвлеченныйТекст = "";
	ДанныеФайла = Неопределено;
	РаботаСФайламиВызовСервера.ПолучитьСписокФайловИТекст(
		Объект.Ссылка,
		УникальныйИдентификатор,
		МассивФайлов,
		ИзвлеченныйТекст,
		ДанныеФайла);
	
	Если МассивФайлов.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'В мероприятии нет файлов doc, docx, odt и расширений Таймлист.'"));
		Элементы.ПротоколВзятьИзФайла.Пометка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если МассивФайлов.Количество() > 1 Тогда
		
		ОписаниеОповещенияОВыборе = Новый ОписаниеОповещения(
			"ВзятьИзФайла_Продолжение",
			ЭтотОбъект);
		ПараметрыОткрытия = Новый Структура("Файлы", МассивФайлов);
		ОткрытьФорму("ОбщаяФорма.ВыборФайлаДляИзвлеченияТекста", ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещенияОВыборе,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		Возврат;
		
	КонецЕсли;
	
	ВыбранныйФайл = МассивФайлов[0].Ссылка;
	Элементы.ДекорацияТекст.Заголовок = Строка(ВыбранныйФайл);
	
	#Если ТонкийКлиент Тогда
		
		Если ОбщегоНазначенияКлиент.ЭтоWindowsКлиент() И ДанныеФайла <> Неопределено Тогда
			
			ИзвлеченныйТекст = ДействияКлиент.ПолучитьТекст(ДанныеФайла, СпособСогласованияВРежимеЗамечаний);
			
		КонецЕсли;
		
	#КонецЕсли
	
	Если Не ЗначениеЗаполнено(ИзвлеченныйТекст) Тогда
		ИзвлеченныйТекст = РаботаСФайламиВызовСервера.ПолучитьТекстФайла(ВыбранныйФайл);
	КонецЕсли;
	
	// Если ровно 1 файл и не надо выбирать файл.
	ПоказатьТекстДляПунктов(ИзвлеченныйТекст);
	
КонецПроцедуры

&НаКлиенте
Процедура Страница1(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте
Процедура Страница2(Команда)      
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте
Процедура Страница3(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте
Процедура Страница4(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте         
Процедура Страница5(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	      

&НаКлиенте
Процедура Страница6(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	  

&НаКлиенте
Процедура Страница7(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	 

&НаКлиенте
Процедура Страница8(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	   

&НаКлиенте
Процедура Страница9(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте
Процедура Назад(Команда)
	
	НомерПорции = НомерПорции - 1;
	ЧастьВыбор(НомерПорции);
	
КонецПроцедуры

&НаКлиенте
Процедура Вперед(Команда)
	
	НомерПорции = НомерПорции + 1;
	ЧастьВыбор(НомерПорции);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаВыбор(Команда)
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("СтраницаВыборЗавершение", ЭтотОбъект);
	ОбзорФайловКлиент.ВыбратьСтраницуДинамическогоСписка(
		ЭтотОбъект,
		Команда,
		НомерПорции,
		ВсегоПорцийПредпросмотра,
		ОповещениеОЗавершении);
	
КонецПроцедуры

#Область ОбработкаОбъектов

&НаКлиенте
Процедура ДобавитьДействие(Команда)
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ДобавитьДействиеЗавершение", ЭтотОбъект);
	ПараметрыОбъектаОбработки = ДействияКлиентСервер.ПараметрыОбъектаОбработки(
		Объект.Ссылка,
		Объект);
	ДействияКлиент.ДобавитьДействиеИзКарточкиПредмета(
		ЭтотОбъект,
		ОбработчикОповещения,
		ПараметрыОбъектаОбработки,
		ПараметрыВидаОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДействиеЗавершение(Результат, Параметры) Экспорт
	
	ПрочитатьДействия();
	ДействияКлиент.РазвернутьДействия(Элементы.Действия, Действия);
	
КонецПроцедуры

&НаКлиенте
Процедура СхемаОбработки(Команда)
	
	РаботаСПроцессамиПоОбработкамОбъектовКлиент.ОткрытьСхемуОбработкиОбъекта(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СхемаОбработкиЕще(Команда)
	
	РаботаСПроцессамиПоОбработкамОбъектовКлиент.ОткрытьСхемуОбработкиОбъекта(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДействия(Команда)
	
	ПрочитатьДействия();
	ДействияКлиент.РазвернутьДействия(Элементы.Действия, Действия);
	
КонецПроцедуры

&НаКлиенте
Процедура Контроль(Команда)
	
	ДействияКлиент.ПоставитьДействиеНаКонтроль(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДействияВФорме() Экспорт
	
	ПрочитатьДействия();
	ДействияКлиент.РазвернутьДействия(Элементы.Действия, Действия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКВыполнениюДействия(Команда)
	
	ТекущиеДанные = Элементы.Действия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.Действие) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкиОбъектовКлиент.ПерейтиКВыполнениюДействия(
		Объект.Ссылка, ТекущиеДанные.Действие);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияОтправить(Команда)
		
	ДействияОтправитьВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияОтправитьВыполнить() Экспорт
		
	ОбработчикОповещения = Новый ОписаниеОповещения(
		"ДействияОтправитьЗавершение",
		ЭтотОбъект,
		Новый Структура);	
		
	ОбработкиОбъектовКлиент.НачатьОбработкуИзКарточкиПредмета(
		ЭтотОбъект,
		ОбработчикОповещения,
		ПараметрыВидаОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияОстановить(Команда)
	
	ОбработчикОповещения = Новый ОписаниеОповещения(
		"ДействияОстановитьЗавершение",
		ЭтотОбъект,
		Новый Структура);
		
	ОбработкиОбъектовКлиент.ОстановитьПродолжитьОбработкуИзКарточкиПредмета(
		ЭтотОбъект,
		ОбработчикОповещения,
		ПараметрыВидаОбъекта);
		
КонецПроцедуры

&НаКлиенте
Процедура ДействияОстановитьЗавершение(Результат, Параметры) Экспорт
	
	ОбновитьДействияСостояниеИДоступностьПолей();
	ДействияКлиент.РазвернутьДействия(Элементы.Действия, Действия);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПротоколРазногласий(Команда)

	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(ДействиеСогласованияВРежимеЗамечаний);
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Справочник.ДокументыПредприятия",
		"ПротоколРазногласий",
		МассивДокументов,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияОтправитьЗавершение(Результат, Параметры) Экспорт
	
	БылПоказанДиалогИнтерактивногоЗапускаОбработки = Истина;
	
	ПодключитьОбработчикОжидания("ОбновитьКнопкуОтправить", 15, Истина);
	
	ОбновитьДействияСостояниеИДоступностьПолей();
	ДействияКлиент.РазвернутьДействия(Элементы.Действия, Действия);
	
	Попытка 
		РазблокироватьДанныеФормыДляРедактирования();
	Исключение
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
			НСтр("ru = 'Ошибка после отправки в обработку'"),, 
			ОписаниеОшибки(),,
			Истина);
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДействияСостояниеИДоступностьПолей()
	
	ПрочитатьДействия(Истина);
	УстановитьДоступностьПоСостоянию();
	ВывестиСтрокуСостояний();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ВыполнитьДействиеЗавершение", ЭтотОбъект);
	ДействияКлиент.ВыполнитьДействиеИзКарточкиПредмета(ЭтотОбъект, ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеЗавершение(Результат, Параметры) Экспорт
	
	ПрочитатьДействия();
	ДействияКлиент.РазвернутьДействия(Элементы.Действия, Действия);
	
	ОповеститьОбИзменении(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПоказатьВсе(Команда)
	
	ДействияКлиент.ДействияПоказатьВсе(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияЗаполнить(Команда)
	
	Если ЗначениеЗаполнено(КомплексныйПроцессПоПредмету) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Документ обрабатывается в рамках комплексного процесса.'"));
		Возврат;
	КонецЕсли;
	
	ДействияКлиент.ЗаполнитьДействия(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// перечитать действия
		ПрочитатьДействия();
		ДействияКлиент.РазвернутьДействия(Элементы.Действия, Действия);
		УстановитьДоступностьПоСостоянию();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДействия(ПослеПомещенияВИсторию = Ложь) Экспорт
	
	// Сначала прочитаем все что есть
	Если Не ДействияПоказыватьВсе Тогда
		ДействияПоказыватьВсе = Не ДействияПоказыватьВсе;
		Элементы.ДействияПоказатьВсе.Пометка = ДействияПоказыватьВсе;
	
		ПрочитатьДействия();
	КонецЕсли;
	
	ОбновитьПараметрыВидаОбъекта();
	ПравилаОбработкиСервер.ЗаполнитьДействияВФормеПредмета(ЭтотОбъект, ПараметрыВидаОбъекта);
	ИзменилсяКлючНастроекОбработки = Ложь;
	Если Действия.ПолучитьЭлементы().Количество() = 0
		И Не ПослеПомещенияВИсторию Тогда
		
		Сообщить(НСтр("ru = 'Обработка мероприятия не настроена'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПерезапуститьОбработку(Команда)
	
	Если ЗначениеЗаполнено(КомплексныйПроцессПоПредмету) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Документ обрабатывается в рамках комплексного процесса.'"));
		Возврат;
	КонецЕсли;
	
	Если ДействияВызовСервера.ЕстьПравоПомещенияДействийВИсторию() Тогда
		ТекстВопроса = 
			НСтр("ru = 'Поместить процесс обработки документа в историю и заполнить обработку заново?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикПерезапуститьОбработку",
			ЭтотОбъект, Новый Структура);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,
			, КодВозвратаДиалога.Нет);
	Иначе 
		ПоказатьПредупреждение(,НСтр("ru = 'Недостаточно прав на перезапуск обработки.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПерезапуститьОбработку(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ОбновлениеДереваОбработкиПослеПоместитьВИсторию",
			ЭтотОбъект,
			Новый Структура);	
		
		ПричинаПрерывания = Новый Структура("ПричинаПрерывания", "");
		
		ДополнительныеПараметры = Новый Структура("Форма, ОбработчикОповещения, ПоместитьВИсторию",
			ЭтотОбъект, ОбработчикОповещения, Истина);
		
		ОбработкиОбъектовКлиент.ПродолжитьПрерваниеОбработкиДокументаПослеВводаПричиныПрерывания(
			ПричинаПрерывания, ДополнительныеПараметры);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеДереваОбработкиПослеПоместитьВИсторию(Результат, Параметры) Экспорт
	
	Действия.ПолучитьЭлементы().Очистить();
	
	ДействияКлиент.ЗаполнитьДействия(ЭтотОбъект, Истина);

	// перечитать действия
	ПрочитатьДействия();
	ДействияКлиент.РазвернутьДействия(Элементы.Действия, Действия);
	УстановитьДоступностьПоСостоянию();
	
	ДействияКлиент.ДействияПослеПомещенияВИсторию(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияХодОбработки(Команда)
	ДействияКлиент.ДействияХодОбработки(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДействияЗамечанияСогласования(Команда)
	ДействияКлиент.ДействияЗамечанияСогласования(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКВыполнениюЗадачи(Команда)

	Для Каждого СтрокаДействия Из Действия.ПолучитьЭлементы() Цикл
		Если НайтиСтрокуДействияИОткрытьФорму(СтрокаДействия) Тогда
			Возврат;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЛистОзнакомления(Команда)                          
	
	ДействияОзнакомления = Новый Массив;
	Для Каждого Стр Из Действия.ПолучитьЭлементы() Цикл
		
		Если ЗначениеЗаполнено(Стр.Действие) И ДействияКлиентСервер.ЭтоДействиеОзнакомления(Стр.Действие) Тогда      
			
			ДействияОзнакомления.Добавить(Стр.Действие);

		КонецЕсли;	
		
	КонецЦикла;	
	
	// тут проверку на число исполнителей                                                                 
	ЧислоУчастников = 0;
	МаксимальноеЧислоДляПоказа = 0;
	ДействияВызовСервера.ЧислоУчастниковОзнакомления(ДействияОзнакомления, ЧислоУчастников, МаксимальноеЧислоДляПоказа);
	
	Если ЧислоУчастников > МаксимальноеЧислоДляПоказа Тогда
		
		ТекстВопроса = СтрШаблон(
			НСтр("ru = 'В мероприятии %1 ознакомлений, поэтому формирование листа ознакомления может быть длительным. 
			|Продолжить?'"),
			ЧислоУчастников);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЛистОзнакомленияПродолжение",
			ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;    
	
	ЛистОзнакомленияПродолжение(КодВозвратаДиалога.Да, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛистОзнакомленияПродолжение(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
		
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(Объект.Ссылка);
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Справочник.ДокументыПредприятия",
		"ЛистОзнакомления",
		МассивДокументов,
		ЭтотОбъект);
		
КонецПроцедуры	

&НаКлиенте
Процедура ХодОзнакомления(Команда)

 	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("КлючВарианта", "ЛистОзнакомления");
	ОткрытьФорму("Отчет.ОзнакомлениеСОбъектом.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Файлы

&НаКлиенте
Процедура ОткрытьФайлВыполнить()
	
	ТекущийФайл = ТекущийФайл();
	Если ТекущийФайл = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ТекущийФайл, 
		Неопределено, УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);
		
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПомеченныеНаУдалениеНаСервере()
	
	НастроитьПоказПомеченныхНаУдалениеФайлов();
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ИмяФормы,
		"ПоказатьПомеченныеНаУдаление",
		ПоказатьПомеченныеНаУдаление);
	
	ОбновитьДеревоОбзораНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПоказПомеченныхНаУдалениеФайлов()
	
	Элементы.ФайлыПоказатьПомеченныеНаУдаление.Пометка = ПоказатьПомеченныеНаУдаление;
	Элементы.ДеревоОбзораПоказатьПомеченныеНаУдаление.Пометка = ПоказатьПомеченныеНаУдаление;
	
	Если ПоказатьПомеченныеНаУдаление Тогда
		ПараметрПометкиУдаления = Новый ПараметрКомпоновкиДанных("НеПоказыватьПомеченныеНаУдаление");
		Для Каждого Элемент Из Файлы.Параметры.Элементы Цикл
			Если Элемент.Параметр = ПараметрПометкиУдаления Тогда
				Элемент.Использование = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Файлы.Параметры.УстановитьЗначениеПараметра("НеПоказыватьПомеченныеНаУдаление", Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Таймлист

// Обработчик выполнение команды получения автопротокола из HTML обзора файла.
// 
// Параметры:
//  Результат - Массив Из Структура - массив спикеров с их именами и ролями
//  Файл - СправочникСсылка.Файлы
// 
&НаКлиенте
Процедура НачатьПолучениеАвтопротокола(Результат, Файл) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаймлистВызовСервера.НачатьОбработкуФайла(
		Файл,
		ПредопределенноеЗначение("Перечисление.ТаймлистТипыЗаданий.ПодготовитьДанныеКПолучениюАвтопротокола"),
		Результат);
	
	ОбновитьФайлы();
	ОбновитьОбзор();
	УстановитьДоступностьКоманд();
	
КонецПроцедуры

#КонецОбласти

#Область Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область РабочаяГруппа

&НаСервере
Процедура ПерезаполнитьРабочуюГруппуДокументаСервер()
	
	РаботаСРабочимиГруппами.ПерезаполнитьРабочуюГруппуНаФорме(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура РабочаяГруппаОбновитьНаСервере()
	
	РаботаСРабочимиГруппами.ПриЧтенииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область УчетВремени

&НаСервере
Процедура ПереключитьХронометражСервер(ПараметрыОповещения)
	
	УчетВремени.ПереключитьХронометражСервер(
	ПараметрыОповещения,
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	Объект.Ссылка,
	ВидыРабот,
	Команды.ПереключитьХронометраж,
	Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения)
	
	УчетВремени.ДобавитьВОтчетИОбновитьФорму(
		ПараметрыОтчета, 
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		Команды.ПереключитьХронометраж,
		Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьХронометражСервер()
	
	УчетВремени.ОтключитьХронометражСервер(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		Объект.Ссылка,
		Команды.ПереключитьХронометраж,
		Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция ПередВыполнениемОперацииМероприятия()
	
	ОтменаОперации = Ложь;
	ТребуетсяЗаписатьМероприятие = Объект.Ссылка.Пустая() Или Модифицированность;
	Если ТребуетсяЗаписатьМероприятие Тогда
		Если Не Записать() Тогда
			ОтменаОперации = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ОтменаОперации Тогда
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Возврат ОтменаОперации;
	
КонецФункции

&НаКлиенте
Процедура СоздатьДокумент(ЭлементВладелец)
	
	ТипШаблонаДокумента = "ШаблоныДокументов";
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТипШаблонаДокумента", ТипШаблонаДокумента);
	ПараметрыФормы.Вставить("ВозможностьСозданияПустогоДокумента", Истина);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ЭлементВладелец", ЭлементВладелец);
	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьДокументЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("ОбщаяФорма.СозданиеДокументаПоШаблону", ПараметрыФормы, , , , , ОписаниеОповещения, РежимОткрытияОкна);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Или Результат = "ПрерватьОперацию" Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФормыДокумента = "Справочник.ДокументыПредприятия.ФормаОбъекта";
	
	КлючеваяОперация = "ДокументыПредприятияВыполнениеКомандыСоздать";
	ОценкаПроизводительностиКлиент.ЗамерВремени(КлючеваяОперация);
	
	ПараметрыФормы = ДелопроизводствоКлиент.ПараметрыФормыДляСозданияДокумента(Результат);
	ОткрытьФорму(ИмяФормыДокумента, ПараметрыФормы, ДополнительныеПараметры.ЭлементВладелец);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостоянияМероприятия()
	
	// Считываем состояние мероприятия из базы данных.
	ПрочитатьСостоянияМероприятия();
	
	// Учитываем состояния, которые пользователь успел поменять за время работы.
	ПрочитатьИзмененныеСостояния();
	
	// Обновляем представление состояния мероприятия.
	ОбновитьОбщееПредставлениеСостояния(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСостоянияМероприятия()
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		СостояниеМероприятия = Перечисления.СостоянияМероприятий.МероприятиеВСтадииПодготовки;
		НачальноеСостояниеМероприятия = Перечисления.СостоянияМероприятий.ПустаяСсылка();
		
		СостояниеПрограммы = Перечисления.СостоянияМероприятий.ПустаяСсылка();
		НачальноеСостояниеПрограммы = Перечисления.СостоянияМероприятий.ПустаяСсылка();
		
		СостояниеПриглашений = Перечисления.СостоянияМероприятий.ПустаяСсылка();
		НачальноеСостояниеПриглашений = Перечисления.СостоянияМероприятий.ПустаяСсылка();
		
		СостояниеМатериаловВыступающих = Перечисления.СостоянияМероприятий.ПустаяСсылка();
		НачальноеСостояниеМатериаловВыступающих = Перечисления.СостоянияМероприятий.ПустаяСсылка();
		
		СостояниеПротокола = Перечисления.СостоянияМероприятий.ПустаяСсылка();
		НачальноеСостояниеПротокола = Перечисления.СостоянияМероприятий.ПустаяСсылка();
		
	Иначе
		
		СостояниеМероприятия = УправлениеМероприятиями.ПолучитьСостояниеМероприятия(Объект.Ссылка, "СостояниеМероприятия");
		НачальноеСостояниеМероприятия = СостояниеМероприятия;
		
		СостояниеПриглашений = УправлениеМероприятиями.ПолучитьСостояниеМероприятия(Объект.Ссылка, "СостояниеПриглашений");
		НачальноеСостояниеПриглашений = СостояниеПриглашений;
		
		СостояниеПрограммы = УправлениеМероприятиями.ПолучитьСостояниеМероприятия(Объект.Ссылка, "СостояниеПрограммы");
		НачальноеСостояниеПрограммы = СостояниеПрограммы;
		
		СостояниеМатериаловВыступающих = УправлениеМероприятиями.ПолучитьСостояниеМероприятия(Объект.Ссылка, "СостояниеМатериаловВыступающих");
		НачальноеСостояниеМатериаловВыступающих = СостояниеМатериаловВыступающих;
		
		СостояниеПротокола = УправлениеМероприятиями.ПолучитьСостояниеМероприятия(Объект.Ссылка, "СостояниеПротокола");
		НачальноеСостояниеПротокола = СостояниеПротокола;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьИзмененныеСостояния()
	
	СостоянияКУдалению = Новый Массив;
	Для Каждого ЭлементИзмененноеСостояние Из ИзмененныеСостояния Цикл
		
		ИзмененноеСостояние = ЭлементИзмененноеСостояние.Значение;
		Если ЗначениеЗаполнено(ИзмененноеСостояние.Состояние) Тогда 
			ИмяСостояния = УправлениеМероприятиями.ПолучитьИмяЭлементаСостояния(ИзмененноеСостояние.Состояние);
		Иначе
			ИмяСостояния = УправлениеМероприятиями.ПолучитьИмяЭлементаСостояния(ИзмененноеСостояние.НачальноеСостояние);
		КонецЕсли;
		
		Если ИзмененноеСостояние.НачальноеСостояние <> ЭтотОбъект["НачальноеСостояние" + ИмяСостояния] Тогда
			СостоянияКУдалению.Добавить(ЭлементИзмененноеСостояние);
			Продолжить;
		КонецЕсли;
		
		ЭтотОбъект["Состояние" + ИмяСостояния] = ИзмененноеСостояние.Состояние;
		
	КонецЦикла;
	Для Каждого ЭлементКУдалению Из СостоянияКУдалению Цикл
		ИзмененныеСостояния.Удалить(ЭлементКУдалению);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОбщееПредставлениеСостояния(Форма)
	
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(Форма.СостояниеМероприятия);
	МассивСостояний.Добавить(Форма.СостояниеПриглашений);
	МассивСостояний.Добавить(Форма.СостояниеПрограммы);
	МассивСостояний.Добавить(Форма.СостояниеМатериаловВыступающих);
	МассивСостояний.Добавить(Форма.СостояниеПротокола);
	Форма.СостояниеТекст = УправлениеМероприятиямиКлиентСервер.ПолучитьСтроковоеПредставлениеСостояний(МассивСостояний);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСуммарнуюДлительностьПрограммы()
	
	Если Объект.ТипПрограммы <> ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВТаблице") Тогда 
		Возврат;
	КонецЕсли;
	
	// Вывод итогового времени в подвал
	ВремяПланСек = 0; ВремяФактСек = 0;
	
	Для Каждого Строка Из Объект.Программа Цикл
		ВремяПланСек = ВремяПланСек + Строка.ВремяПлан;
		ВремяФактСек = ВремяФактСек + Строка.ВремяФакт;
	КонецЦикла;
	
	ИтогоВремяПлан = УчетВремениКлиентСервер.ЧислоВСтроку(ВремяПланСек);
	ИтогоВремяФакт = УчетВремениКлиентСервер.ЧислоВСтроку(ВремяФактСек);
	
	// Вывод превышенного / оставшегося времени
	СуммарнаяДлительностьПрограммы = 0;
	Для Каждого Строка Из Объект.Программа Цикл
		СуммарнаяДлительностьПрограммы = СуммарнаяДлительностьПрограммы + Строка.ВремяПлан;
	КонецЦикла;
	
	ИнформационнаяНадписьПрограмма = "";
	
	Если ЗначениеЗаполнено(Объект.ДатаНачала) 
		И ЗначениеЗаполнено(Объект.ДатаОкончания)
		И НачалоДня(Объект.ДатаНачала) = НачалоДня(Объект.ДатаОкончания) Тогда 
		
		ДлительностьСек = Объект.ДатаОкончания - Объект.ДатаНачала;
		Если СуммарнаяДлительностьПрограммы <> ДлительностьСек Тогда 
			Если СуммарнаяДлительностьПрограммы > ДлительностьСек Тогда 
				ИнформационнаяНадписьПрограмма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Превышено на %1'"),  
					УчетВремениКлиентСервер.ЧислоВСтроку(СуммарнаяДлительностьПрограммы - ДлительностьСек));
			Иначе
				ИнформационнаяНадписьПрограмма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Осталось %1'"),
					УчетВремениКлиентСервер.ЧислоВСтроку(ДлительностьСек - СуммарнаяДлительностьПрограммы));
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПоменятьНомерПунктаПрограммы(СтарыйНомер, НовыйНомер)
	
	СтруктураПоиска = Новый Структура("НомерПункта", СтарыйНомер);
	НайденныеСтрокиСтарыйНомер = Объект.Программа.НайтиСтроки(СтруктураПоиска);
	
	СтруктураПоиска = Новый Структура("НомерПункта", НовыйНомер);
	НайденныеСтрокиНовыйНомер = Объект.Программа.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтрокиСтарыйНомер.Количество() > 0 Тогда 
		НайденныеСтрокиСтарыйНомер[0].НомерПункта = НовыйНомер;
	КонецЕсли;
	
	Если НайденныеСтрокиНовыйНомер.Количество() > 0 Тогда 
		НайденныеСтрокиНовыйНомер[0].НомерПункта = СтарыйНомер;
	КонецЕсли;
	
	Если НовыйНомер > СтарыйНомер Тогда 
		
		НайденныеСтрокиНовыйНомер[0].Начало = НайденныеСтрокиСтарыйНомер[0].Начало;
		НайденныеСтрокиНовыйНомер[0].Окончание = НайденныеСтрокиНовыйНомер[0].Начало + НайденныеСтрокиНовыйНомер[0].ВремяПлан;
		ЗаполнитьСтрокуПрограммы(НайденныеСтрокиНовыйНомер[0], ПараметрыПреобразованияМестногоВремени);
		
		НайденныеСтрокиСтарыйНомер[0].Начало = НайденныеСтрокиСтарыйНомер[0].Окончание;
		НайденныеСтрокиСтарыйНомер[0].Окончание = НайденныеСтрокиСтарыйНомер[0].Начало + НайденныеСтрокиСтарыйНомер[0].ВремяПлан;
		ЗаполнитьСтрокуПрограммы(НайденныеСтрокиСтарыйНомер[0], ПараметрыПреобразованияМестногоВремени);
		
	ИначеЕсли НовыйНомер < СтарыйНомер Тогда 
		
		НайденныеСтрокиСтарыйНомер[0].Начало = НайденныеСтрокиНовыйНомер[0].Начало;
		НайденныеСтрокиСтарыйНомер[0].Окончание = НайденныеСтрокиСтарыйНомер[0].Начало + НайденныеСтрокиСтарыйНомер[0].ВремяПлан;
		ЗаполнитьСтрокуПрограммы(НайденныеСтрокиСтарыйНомер[0], ПараметрыПреобразованияМестногоВремени);
		
		НайденныеСтрокиНовыйНомер[0].Начало = НайденныеСтрокиСтарыйНомер[0].Окончание;
		НайденныеСтрокиНовыйНомер[0].Окончание = НайденныеСтрокиНовыйНомер[0].Начало + НайденныеСтрокиНовыйНомер[0].ВремяПлан;
		ЗаполнитьСтрокуПрограммы(НайденныеСтрокиНовыйНомер[0], ПараметрыПреобразованияМестногоВремени);
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ВывестиДлительностьВПрограмме()
	
	Для Каждого Строка Из Объект.Программа Цикл
		ЗаполнитьСтрокуПрограммы(Строка, ПараметрыПреобразованияМестногоВремени);
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура ВывестиПротоколМероприятия()
	
	// Чтение данных протокола выполняется только для протокольных мероприятий.
	Если Не УчитыватьКакПротокольноеМероприятие Тогда 
		Возврат;
	КонецЕсли;
	
	// Чтение данных протокола выполняется только если протокол ведется в таблице.
	Если Объект.ТипПротокола <> ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВТаблице") Тогда 
		Возврат;
	КонецЕсли;
	
	УправлениеМероприятиями.ВывестиПротоколМероприятия(Объект.Протокол);
	УправлениеМероприятиямиКлиентСервер.ВывестиРешенияПрограммы(Объект.Программа, Объект.Протокол);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРешенияВПрограмме()
	
	Если Не УчитыватьКакПротокольноеМероприятие
		Или Объект.ТипПротокола <> ПредопределенноеЗначение("Перечисление.ТипыПрограммыПротокола.ВТаблице") Тогда 
		Элементы.ПрограммаРешение.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ПрограммаРешение.Видимость = Истина;
	
	УправлениеМероприятиямиКлиентСервер.ВывестиРешенияПрограммы(Объект.Программа, Объект.Протокол);
	
КонецПроцедуры	
 
&НаКлиенте
Процедура УстановитьДоступностьКоманды(Команда, Доступность)
	
	Команда.Доступность = Доступность;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФайлПослеКоманды(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	ОбновитьФайлы();
	УстановитьДоступностьКоманд();
	ОбновитьОбзор();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьСтраницОбзораФайла()
	
	ТекущиеДанныеФайла = ТекущиеДанныеФайла();
	
	Если ТекущиеДанныеФайла <> Неопределено
		И ТаймлистКлиентСервер.ЭтоРасширениеФайлаТаймлист(ТекущиеДанныеФайла.Расширение) Тогда
		
		Если ТекущиеДанныеФайла.ТаймлистСтатус
			= ПредопределенноеЗначение("Перечисление.ТаймлистСтатусы.ПолученАвтопротокол") Тогда
			Элементы.СтраницаТаймлистАвтопротокол.Видимость = Истина;
			Элементы.СтраницыОбзора.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
			Элементы.СтраницаОбзорHTML.Заголовок = НСтр("ru = 'Расшифровка'");
		Иначе
			Элементы.СтраницаТаймлистАвтопротокол.Видимость = Ложь;
			Элементы.СтраницыОбзора.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
			Элементы.СтраницаОбзорHTML.Заголовок = "";
		КонецЕсли;
		
		Элементы.СтраницаОбзорHTML.Видимость = Истина;
		Элементы.СтраницаОбзорPDF.Видимость = Ложь;
		Элементы.СтраницаРаспознанныйТекст.Видимость = Ложь;
		
	ИначеЕсли ТекущиеДанныеФайла <> Неопределено
		И ТекущиеДанныеФайла.СтатусРаспознаванияТекста
			= ПредопределенноеЗначение("Перечисление.СтатусыРаспознаванияТекста.Распознано") Тогда
		
		Элементы.СтраницыОбзора.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		
		Если Элементы.СтраницыОбзора.ТекущаяСтраница = Элементы.СтраницаОбзорPDF Тогда
			Элементы.СтраницаОбзорHTML.Видимость = Ложь;
			Элементы.СтраницаОбзорPDF.Видимость = Истина;
			Элементы.СтраницаОбзорPDF.Заголовок = НСтр("ru = 'Предпросмотр'");
		Иначе
			Элементы.СтраницаОбзорPDF.Видимость = Ложь;
			Элементы.СтраницаОбзорHTML.Видимость = Истина;
			Элементы.СтраницаОбзорHTML.Заголовок = НСтр("ru = 'Предпросмотр'");
		КонецЕсли;
		
		Элементы.СтраницаТаймлистАвтопротокол.Видимость = Ложь;
		Элементы.СтраницаРаспознанныйТекст.Видимость = Истина;
		
	Иначе
		
		Элементы.СтраницыОбзора.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.СтраницаОбзорHTML.Видимость = Истина;
		Элементы.СтраницаОбзорPDF.Видимость = Истина;
		Элементы.СтраницаРаспознанныйТекст.Видимость = Ложь;
		Элементы.СтраницаТаймлистАвтопротокол.Видимость = Ложь;
		Элементы.СтраницаОбзорHTML.Заголовок = "";
		Элементы.СтраницаОбзорPDF.Заголовок = "";
		
	КонецЕсли;
	
	Если ЭтоМобильныйКлиент Тогда
		Элементы.МК_КнопкаСтраницаАвтопротокол.Видимость = Элементы.СтраницаТаймлистАвтопротокол.Видимость;
		Элементы.МК_КнопкаСтраницаРасшифровка.Видимость = Элементы.СтраницаТаймлистАвтопротокол.Видимость;
		Элементы.СтраницыОбзора.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		
		Элементы.СтраницаОбзорPDF.Видимость = Ложь;
		Элементы.СтраницаРаспознанныйТекст.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманд()
	
	ТекущиеДанные = ТекущиеДанныеФайла();
	
	Если ТекущиеДанные = Неопределено Тогда
		
		УстановитьДоступностьКоманды(Элементы.ОткрытьФайл, Ложь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыОткрытьФайл, Ложь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораОткрытьФайл, Ложь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораКонтекстноеМенюОткрытьФайл, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Редактировать, Ложь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыРедактировать, Ложь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораРедактировать, Ложь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораКонтекстноеМенюРедактировать, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.ЗакончитьРедактирование, Ложь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыЗакончитьРедактирование, Ложь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораЗакончитьРедактирование, Ложь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораКонтекстноеМенюЗакончитьРедактирование, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Изменить, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюИзменить, Ложь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораОткрытьКарточку, Ложь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораКонтекстноеМенюОткрытьКарточкуФайла, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Занять, Ложь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыЗанять, Ложь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораЗанять, Ложь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораКонтекстноеМенюЗанять, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.СохранитьИзменения, Ложь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыСохранитьИзменения, Ложь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораСохранитьИзменения, Ложь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораКонтекстноеМенюСохранитьИзменения, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Удалить, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюУстановитьПометкуУдаления, Ложь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораУдалитьФайл, Ложь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораКонтекстноеМенюУдалить, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.СохранитьКак, Ложь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыСохранитьКак, Ложь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораСохранитьКак, Ложь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораКонтекстноеМенюСохранитьКак, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.Освободить, Ложь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыОсвободить, Ложь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораОсвободить, Ложь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораКонтекстноеМенюОсвободить, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.ОбновитьИзФайлаНаДиске, Ложь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске, Ложь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораОбновитьИзФайлаНаДиске, Ложь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораКонтекстноеМенюОбновитьИзФайлаНаДиске, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.ФайлыРаспознать, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюРаспознать, Ложь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораРаспознатьДополнительно, Ложь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораРаспознать, Ложь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораКонтекстноеМенюРаспознать, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.ФайлыПодписатьФайл, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюПодписатьФайл, Ложь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораПодписатьФайл, Ложь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораКонтекстноеМенюПодписатьФайл, Ложь);

		УстановитьДоступностьКоманды(Элементы.ФайлыДобавитьЭПИзФайла, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюДобавитьЭПИзФайла, Ложь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораДобавитьЭПИзФайла, Ложь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораКонтекстноеМенюДобавитьЭПИзФайла, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.ФайлыСохранитьВместеСЭП, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюСохранитьВместеСЭП, Ложь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораСохранитьВместеСЭП, Ложь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораКонтекстноеМенюСохранитьВместеСЭП, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.ФайлыЗашифровать, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюЗашифровать, Ложь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораЗашифровать, Ложь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораКонтекстноеМенюЗашифровать, Ложь);
		
		УстановитьДоступностьКоманды(Элементы.ФайлыРасшифровать, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюРасшифровать, Ложь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораРасшифровать, Ложь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораКонтекстноеМенюРасшифровать, Ложь);
		
	Иначе
		
		РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
		Редактирует = ТекущиеДанные.Редактирует;
		ПодписанЭП = ТекущиеДанные.ПодписанЭП;
		Зашифрован = ТекущиеДанные.Зашифрован;
		
		УстановитьДоступностьКоманды(Элементы.ОткрытьФайл, Истина);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыОткрытьФайл, Истина);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораОткрытьФайл, Истина);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораКонтекстноеМенюОткрытьФайл, Истина);
		
		УстановитьДоступностьКоманды(Элементы.Редактировать, Не ТекущиеДанные.ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыРедактировать, Не ТекущиеДанные.ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораРедактировать, Не ТекущиеДанные.ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораКонтекстноеМенюРедактировать, Не ТекущиеДанные.ПодписанЭП);
		
		УстановитьДоступностьКоманды(Элементы.ЗакончитьРедактирование, РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыЗакончитьРедактирование, РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораЗакончитьРедактирование, РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораКонтекстноеМенюЗакончитьРедактирование, РедактируетТекущийПользователь);
		
		УстановитьДоступностьКоманды(Элементы.Изменить, Истина);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюИзменить, Истина);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораОткрытьКарточку, Истина);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораКонтекстноеМенюОткрытьКарточкуФайла, Истина);
		
		УстановитьДоступностьКоманды(Элементы.Занять, Не ЗначениеЗаполнено(Редактирует));
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыЗанять, Не ЗначениеЗаполнено(Редактирует));
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораЗанять, Не ЗначениеЗаполнено(Редактирует));
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораКонтекстноеМенюЗанять, Не ЗначениеЗаполнено(Редактирует));
		
		УстановитьДоступностьКоманды(Элементы.СохранитьИзменения, РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыСохранитьИзменения, РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораСохранитьИзменения, РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораКонтекстноеМенюСохранитьИзменения, РедактируетТекущийПользователь);
		
		УстановитьДоступностьКоманды(Элементы.Удалить, Истина);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюУстановитьПометкуУдаления, Истина);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораУдалитьФайл, Истина);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораКонтекстноеМенюУдалить, Истина);
		
		УстановитьДоступностьКоманды(Элементы.СохранитьКак, Истина);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыСохранитьКак, Истина);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораСохранитьКак, Истина);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораКонтекстноеМенюСохранитьКак, Истина);
		
		УстановитьДоступностьКоманды(Элементы.Освободить, ЗначениеЗаполнено(Редактирует));
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыОсвободить, ЗначениеЗаполнено(Редактирует));
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораОсвободить, ЗначениеЗаполнено(Редактирует));
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораКонтекстноеМенюОсвободить, ЗначениеЗаполнено(Редактирует));
		
		УстановитьДоступностьКоманды(Элементы.ОбновитьИзФайлаНаДиске, Истина);
		УстановитьДоступностьКоманды(Элементы.КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске, Истина);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораОбновитьИзФайлаНаДиске, Истина);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораКонтекстноеМенюОбновитьИзФайлаНаДиске, Истина);
		
		Расширение = ТекущиеДанные.Расширение;
		ИспользоватьImageMagickДляРаспознаванияPDF = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ИспользоватьImageMagickДляРаспознаванияPDF;
		ПрограммаРаспознавания = РаботаСФайламиКлиентПовтИсп.ПрограммаРаспознавания();
		РасширениеПоддерживается = РаботаСФайламиКлиентСервер.ЭтотФайлМожноРаспознать(
			Расширение, ИспользоватьImageMagickДляРаспознаванияPDF, ПрограммаРаспознавания, ТаймлистИспользуется);
		ДоступноРаспознаваниеПоЗапросу = РаботаСФайламиКлиентПовтИсп.ДоступноРаспознаваниеПоЗапросу();
		ЭтоРасширениеТаймлист = ТаймлистКлиентСервер.ЭтоРасширениеФайлаТаймлист(Расширение);
		
		УстановитьДоступностьКоманды(Элементы.ФайлыРаспознать,
			ИспользоватьОбзорОбъектов
			И РасширениеПоддерживается
			И (Не ЭтоРасширениеТаймлист
					И ДоступноРаспознаваниеПоЗапросу
					И ТекущиеДанные.СтатусРаспознаванияТекста
						<> ПредопределенноеЗначение("Перечисление.СтатусыРаспознаванияТекста.Распознано")
					И ТекущиеДанные.СтатусРаспознаванияТекста
						<> ПредопределенноеЗначение("Перечисление.СтатусыРаспознаванияТекста.Распознается")
				Или ЭтоРасширениеТаймлист
					И ДоступноРаспознаваниеТаймлист
					И Не ЗначениеЗаполнено(ТекущиеДанные.ТаймлистСтатус)
					И Не ЗначениеЗаполнено(ТекущиеДанные.ТаймлистЗадание))
			И Не ЗначениеЗаполнено(Редактирует));
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюРаспознать, Элементы.ФайлыРаспознать.Доступность);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораРаспознать, Элементы.ФайлыРаспознать.Доступность);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораРаспознатьДополнительно, Элементы.ФайлыРаспознать.Доступность);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораКонтекстноеМенюРаспознать, Элементы.ФайлыРаспознать.Доступность);
		
		УстановитьДоступностьКоманды(Элементы.ФайлыПодписатьФайл, Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюПодписатьФайл, Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораПодписатьФайл, Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораКонтекстноеМенюПодписатьФайл, Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован);
		
		УстановитьДоступностьКоманды(Элементы.ФайлыДобавитьЭПИзФайла, Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюДобавитьЭПИзФайла, Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораДобавитьЭПИзФайла, Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораКонтекстноеМенюДобавитьЭПИзФайла, Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован);
		
		УстановитьДоступностьКоманды(Элементы.ФайлыСохранитьВместеСЭП, ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюСохранитьВместеСЭП, ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораСохранитьВместеСЭП, ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораКонтекстноеМенюСохранитьВместеСЭП, ПодписанЭП);
		
		УстановитьДоступностьКоманды(Элементы.ФайлыЗашифровать, Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюЗашифровать, Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораЗашифровать, Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораКонтекстноеМенюЗашифровать, Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован);
		
		УстановитьДоступностьКоманды(Элементы.ФайлыРасшифровать, Зашифрован);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюРасшифровать, Зашифрован);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораРасшифровать, Зашифрован);
		УстановитьДоступностьКоманды(Элементы.ДеревоОбзораКонтекстноеМенюРасшифровать, Зашифрован);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьДанныеВыбораУчастника(Текст = "")
	
	ДанныеВыбора = Новый СписокЗначений;
	Для Каждого Строка Из Участники Цикл
		Если Не ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
			Продолжить;
		КонецЕсли;
		Если Текст <> "" И НРег(Лев(Строка.Исполнитель, СтрДлина(Текст))) <> НРег(Текст) Тогда 
			Продолжить;
		КонецЕсли;
		ДанныеВыбора.Добавить(Строка.Исполнитель, Строка(Строка.Исполнитель));
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

&НаСервере
Функция ЭлементыДляСохранения()
	
	СохраняемыеЭлементы = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.ОрганизаторКонтактноеЛицо) Тогда 
		СохраняемыеЭлементы.Вставить("ОрганизаторТекст", 
			СокрЛП(Объект.Организатор) + ", " + СокрЛП(Объект.ОрганизаторКонтактноеЛицо));
	Иначе 
		СохраняемыеЭлементы.Вставить("ОрганизаторТекст", Объект.Организатор);
	КонецЕсли;
	
	Возврат СохранениеВводимыхЗначений.СформироватьТаблицуСохраняемыхЭлементов(СохраняемыеЭлементы);
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьПоСостоянию()
	
	МероприятиеОтменено =
		СостояниеМероприятия = Перечисления.СостоянияМероприятий.МероприятиеОтменено;
	ПриглашенияОтправлены = ЗначениеЗаполнено(СостояниеПриглашений);
	Элементы.УчастникиОтправитьПриглашения.Доступность =
		Не ПриглашенияОтправлены И Не МероприятиеОтменено;
	Элементы.УчастникиОтправитьПриглашения.Заголовок =
		?(ПриглашенияОтправлены,
			НСтр("ru = 'Приглашения отправлены'"),
			НСтр("ru = 'Отправить приглашения'"));
	Элементы.УчастникиОтменитьМероприятие.Видимость =
		ПриглашенияОтправлены;
	Элементы.УчастникиОтменитьМероприятие.Доступность =
		Не МероприятиеОтменено;
	Элементы.УчастникиОтменитьМероприятие.Заголовок =
		?(МероприятиеОтменено,
			НСтр("ru = 'Мероприятие отменено'"),
			НСтр("ru = 'Отменить мероприятие'"));
		
	КартинкаОтправкаПриглашения = ?(ЗначениеЗаполнено(СостояниеПриглашений),
		БиблиотекаКартинок.ЗеленаяГалочка,
		Новый Картинка);
	Элементы.УчастникиОтправитьПриглашения.Картинка = КартинкаОтправкаПриглашения;
	
	Элементы.ДатаНачала.ПредупреждениеПриРедактировании = "";
	Элементы.ДатаНачала.ОтображениеПредупрежденияПриРедактировании =
		ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	Элементы.ДатаНачалаВремя.ПредупреждениеПриРедактировании = "";
	Элементы.ДатаНачалаВремя.ОтображениеПредупрежденияПриРедактировании =
		ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	Элементы.ДатаОкончания.ПредупреждениеПриРедактировании = "";
	Элементы.ДатаОкончания.ОтображениеПредупрежденияПриРедактировании =
		ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	Элементы.ДатаОкончанияВремя.ПредупреждениеПриРедактировании = "";
	Элементы.ДатаОкончанияВремя.ОтображениеПредупрежденияПриРедактировании =
		ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	Элементы.МестоПроведения.ПредупреждениеПриРедактировании = "";
	Элементы.МестоПроведения.ОтображениеПредупрежденияПриРедактировании =
		ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	Элементы.Наименование.ПредупреждениеПриРедактировании = "";
	Элементы.Наименование.ОтображениеПредупрежденияПриРедактировании =
		ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	Элементы.Описание.ПредупреждениеПриРедактировании = "";
	Элементы.Описание.ОтображениеПредупрежденияПриРедактировании =
		ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	
	Если СостояниеПриглашений = Перечисления.СостоянияМероприятий.ПриглашенияОтправлены Тогда 
		
		ПредупреждениеПриРедактировании = НСтр("ru = 'Приглашения уже отправлены. При изменении приглашения будут отправлены повторно'");
		Элементы.ДатаНачала.ПредупреждениеПриРедактировании = ПредупреждениеПриРедактировании;
		Элементы.ДатаНачала.ОтображениеПредупрежденияПриРедактировании =
			ОтображениеПредупрежденияПриРедактировании.Отображать;
		Элементы.ДатаНачалаВремя.ПредупреждениеПриРедактировании = ПредупреждениеПриРедактировании;
		Элементы.ДатаНачалаВремя.ОтображениеПредупрежденияПриРедактировании =
			ОтображениеПредупрежденияПриРедактировании.Отображать;
		Элементы.ДатаОкончания.ПредупреждениеПриРедактировании = ПредупреждениеПриРедактировании;
		Элементы.ДатаОкончания.ОтображениеПредупрежденияПриРедактировании =
			ОтображениеПредупрежденияПриРедактировании.Отображать;
		Элементы.ДатаОкончанияВремя.ПредупреждениеПриРедактировании = ПредупреждениеПриРедактировании;
		Элементы.ДатаОкончанияВремя.ОтображениеПредупрежденияПриРедактировании =
			ОтображениеПредупрежденияПриРедактировании.Отображать;
		Элементы.МестоПроведения.ПредупреждениеПриРедактировании = ПредупреждениеПриРедактировании;
		Элементы.МестоПроведения.ОтображениеПредупрежденияПриРедактировании =
			ОтображениеПредупрежденияПриРедактировании.Отображать;
		Элементы.Наименование.ПредупреждениеПриРедактировании = ПредупреждениеПриРедактировании;
		Элементы.Наименование.ОтображениеПредупрежденияПриРедактировании =
			ОтображениеПредупрежденияПриРедактировании.Отображать;
		Элементы.Описание.ПредупреждениеПриРедактировании = ПредупреждениеПриРедактировании;
		Элементы.Описание.ОтображениеПредупрежденияПриРедактировании =
			ОтображениеПредупрежденияПриРедактировании.Отображать;
		
	КонецЕсли;
	
	Если СостояниеПриглашений = Перечисления.СостоянияМероприятий.ПриглашенияПриняты Тогда 
		
		ПредупреждениеПриРедактировании = НСтр("ru = 'Приглашения уже приняты. При изменении приглашения будут отправлены повторно'");
		Элементы.ДатаНачала.ПредупреждениеПриРедактировании = ПредупреждениеПриРедактировании;
		Элементы.ДатаНачала.ОтображениеПредупрежденияПриРедактировании =
			ОтображениеПредупрежденияПриРедактировании.Отображать;
		Элементы.ДатаНачалаВремя.ПредупреждениеПриРедактировании = ПредупреждениеПриРедактировании;
		Элементы.ДатаНачалаВремя.ОтображениеПредупрежденияПриРедактировании =
			ОтображениеПредупрежденияПриРедактировании.Отображать;
		Элементы.ДатаОкончания.ПредупреждениеПриРедактировании = ПредупреждениеПриРедактировании;
		Элементы.ДатаОкончания.ОтображениеПредупрежденияПриРедактировании =
			ОтображениеПредупрежденияПриРедактировании.Отображать;
		Элементы.ДатаОкончанияВремя.ПредупреждениеПриРедактировании = ПредупреждениеПриРедактировании;
		Элементы.ДатаОкончанияВремя.ОтображениеПредупрежденияПриРедактировании =
			ОтображениеПредупрежденияПриРедактировании.Отображать;
		Элементы.МестоПроведения.ПредупреждениеПриРедактировании = ПредупреждениеПриРедактировании;
		Элементы.МестоПроведения.ОтображениеПредупрежденияПриРедактировании =
			ОтображениеПредупрежденияПриРедактировании.Отображать;
		Элементы.Наименование.ПредупреждениеПриРедактировании = ПредупреждениеПриРедактировании;
		Элементы.Наименование.ОтображениеПредупрежденияПриРедактировании =
			ОтображениеПредупрежденияПриРедактировании.Отображать;
		Элементы.Описание.ПредупреждениеПриРедактировании = ПредупреждениеПриРедактировании;
		Элементы.Описание.ОтображениеПредупрежденияПриРедактировании =
			ОтображениеПредупрежденияПриРедактировании.Отображать;
		
	КонецЕсли;
	
	Если РольДоступна("ПолныеПрава") Тогда 
		Возврат;
	КонецЕсли;	
	
	// Установка доступности по состоянию приглашения.
	Элементы.Участники.ТолькоПросмотр = Ложь;
	Элементы.Программа.ТолькоПросмотр = Ложь;
	
	// Установка доступности по состоянию программы.
	Элементы.Программа.ТолькоПросмотр = Ложь;
	Элементы.ПрограммаДобавить.Доступность = Истина;
	Элементы.ПрограммаУдалить.Доступность = Истина;
	Элементы.ПрограммаПереместитьВниз.Доступность = Истина;
	Элементы.ПрограммаПереместитьВверх.Доступность = Истина;
	Элементы.ВестиПрограммуВОтдельномДокументе.Доступность = Истина;
	Элементы.ВестиПрограммуВТаблице.Доступность = Истина;
	Элементы.ВестиПрограммуВФайлах.Доступность = Истина;
	
	Если СостояниеПрограммы = Перечисления.СостоянияМероприятий.ПрограммаНаУтверждении
		Или СостояниеПрограммы = Перечисления.СостоянияМероприятий.ПрограммаУтверждена Тогда
		
		// Команду "ПрограммаИзменить" не запрещаем использовать,
		// т.к. она необходимо для указания фактического времени.
		
		Элементы.Программа.ТолькоПросмотр = Истина;
		Элементы.ПрограммаДобавить.Доступность = Ложь;
		Элементы.ПрограммаУдалить.Доступность = Ложь;
		Элементы.ПрограммаПереместитьВниз.Доступность = Ложь;
		Элементы.ПрограммаПереместитьВверх.Доступность = Ложь;
		Элементы.ВестиПрограммуВОтдельномДокументе.Доступность = Ложь;
		Элементы.ВестиПрограммуВТаблице.Доступность = Ложь;
		Элементы.ВестиПрограммуВФайлах.Доступность = Ложь;
		
	КонецЕсли;
	
	// Установка доступности по состоянию протокола.
	ПротоколТолькоПросмотр = Ложь;
	Элементы.ПротоколЗаполнитьПротокол.Доступность = Истина;
	Элементы.ПротоколДобавить.Доступность = Истина;
	Элементы.ПротоколУдалить.Доступность = Истина;
	Элементы.ПротоколВестиПротоколВОтдельномДокументе.Доступность = Истина;
	Элементы.ПротоколВестиПротоколВТаблице.Доступность = Истина;
	Элементы.ПротоколВестиПротоколВФайлах.Доступность = Истина;
	Элементы.ПротоколКонтекстноеМенюДобавить.Доступность = Истина;
	Элементы.ПротоколКонтекстноеМенюСкопировать.Доступность = Истина;
	Элементы.ПротоколКонтекстноеМенюУдалить.Доступность = Истина;
	Элементы.ПротоколКонтекстноеМенюПереместитьВверх.Доступность = Истина;
	Элементы.ПротоколКонтекстноеМенюПереместитьВниз.Доступность = Истина;
	
	Если СостояниеПротокола = Перечисления.СостоянияМероприятий.ПротоколНаСогласовании
		Или СостояниеПротокола = Перечисления.СостоянияМероприятий.ПротоколСогласован
		Или СостояниеПротокола = Перечисления.СостоянияМероприятий.ПротоколНаУтверждении
		Или СостояниеПротокола = Перечисления.СостоянияМероприятий.ПротоколУтвержден
		Или СостояниеПротокола = Перечисления.СостоянияМероприятий.ПротоколНаИсполнении
		Или СостояниеПротокола = Перечисления.СостоянияМероприятий.ПротоколИсполнен Тогда 
		
		ПротоколТолькоПросмотр = Истина;
		Элементы.ПротоколЗаполнитьПротокол.Доступность = Ложь;
		Элементы.ПротоколДобавить.Доступность = Ложь;
		Элементы.ПротоколУдалить.Доступность = Ложь;
		Элементы.ПротоколВестиПротоколВОтдельномДокументе.Доступность = Ложь;
		Элементы.ПротоколВестиПротоколВТаблице.Доступность = Ложь;
		Элементы.ПротоколВестиПротоколВФайлах.Доступность = Ложь;
		Элементы.ПротоколКонтекстноеМенюДобавить.Доступность = Ложь;
		Элементы.ПротоколКонтекстноеМенюСкопировать.Доступность = Ложь;
		Элементы.ПротоколКонтекстноеМенюУдалить.Доступность = Ложь;
		Элементы.ПротоколКонтекстноеМенюПереместитьВверх.Доступность = Ложь;
		Элементы.ПротоколКонтекстноеМенюПереместитьВниз.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок()
	
	СписокКатегорийДанных.Сортировать("ПолноеНаименование");
	Элементы.Категории.Заголовок = РаботаСКатегориямиДанныхКлиентСервер.ПолучитьЗаголовокВкладкиКатегории(СписокКатегорийДанных);	
			
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОКатегориях(Параметр)
	
	Для Каждого ВыбраннаяКатегория Из СписокКатегорийДанных Цикл
		ВыбраннаяКатегория.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(ВыбраннаяКатегория.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаблокироватьДанныеУчастниковДляРедактирования()
	
	Если Объект.Ссылка.Пустая() Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Участники Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
			Продолжить;
		КонецЕсли;
		
		ЗначенияКлюча = Новый Структура;
		ЗначенияКлюча.Вставить("Мероприятие", Объект.Ссылка);
		ЗначенияКлюча.Вставить("Исполнитель", Строка.Исполнитель);
		КлючЗаписи = РегистрыСведений.УчастникиМероприятия.СоздатьКлючЗаписи(ЗначенияКлюча);
		ЗаблокироватьДанныеДляРедактирования(КлючЗаписи,, УникальныйИдентификатор);
		
	КонецЦикла;	
	
	ДанныеУчастниковЗаблокированы = Истина;
	
КонецПроцедуры	

&НаСервере
Процедура РазблокироватьДанныеУчастниковДляРедактирования()
	
	Если Объект.Ссылка.Пустая() Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Участники Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
			Продолжить;
		КонецЕсли;
		
		ЗначенияКлюча = Новый Структура;
		ЗначенияКлюча.Вставить("Мероприятие", Объект.Ссылка);
		ЗначенияКлюча.Вставить("Исполнитель", Строка.Исполнитель);
				
		КлючЗаписи = РегистрыСведений.УчастникиМероприятия.СоздатьКлючЗаписи(ЗначенияКлюча);
		РазблокироватьДанныеДляРедактирования(КлючЗаписи, УникальныйИдентификатор);
		
	КонецЦикла;	
	
	ДанныеУчастниковЗаблокированы = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУчастниковМероприятия()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
		Участники.Очистить();
		
		НаборЗаписей = РегистрыСведений.УчастникиМероприятия.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Мероприятие.Значение = Объект.Ссылка;
		НаборЗаписей.Отбор.Мероприятие.Использование = Истина;
		НаборЗаписей.Прочитать();
		
		Записи = НаборЗаписей.Выгрузить();
		Записи.Сортировать("Порядок");
		Для Каждого Запись Из Записи Цикл
			НоваяСтрока = Участники.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Запись);
		КонецЦикла;	
		
	КонецЕсли;
	
	ДанныеУчастниковЗаблокированы = Ложь;
	КоличествоУчастников = Участники.Количество();
	ОбновитьЧасовыеПоясаУчастниковНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Если Объект.ТипПрограммы = Перечисления.ТипыПрограммыПротокола.ВМатериалах Тогда 
		
		Элементы.Программа.Видимость = Ложь;
		Элементы.ИнформационнаяНадписьПрограмма.Видимость = Ложь;
		Элементы.ГруппаКоманднаяПанельПрограмма.Видимость = Ложь;
		Элементы.ГруппаПрограмма.Видимость = Истина;
		Элементы.ТипПрограммы.Видимость = Истина;
		Элементы.МатериалПрограмма.Видимость = Ложь;
		Элементы.СоздатьПрограмму.Видимость = Ложь;
		
	ИначеЕсли Объект.ТипПрограммы = Перечисления.ТипыПрограммыПротокола.ВОтдельномДокументе Тогда
		
		Элементы.Программа.Видимость = Ложь;
		Элементы.ИнформационнаяНадписьПрограмма.Видимость = Ложь;
		Элементы.ГруппаКоманднаяПанельПрограмма.Видимость = Ложь;
		Элементы.ГруппаПрограмма.Видимость = Истина;
		Элементы.ТипПрограммы.Видимость = Истина;
		Элементы.МатериалПрограмма.Видимость = Истина;
		Элементы.СоздатьПрограмму.Видимость = Истина;
		
	ИначеЕсли Объект.ТипПрограммы = Перечисления.ТипыПрограммыПротокола.ВТаблице Тогда
		
		Элементы.Программа.Видимость = Истина;
		Элементы.ИнформационнаяНадписьПрограмма.Видимость = Истина;
		Элементы.ГруппаКоманднаяПанельПрограмма.Видимость = Истина;
		Элементы.ГруппаПрограмма.Видимость = Ложь;
		Элементы.ТипПрограммы.Видимость = Ложь;
		Элементы.МатериалПрограмма.Видимость = Ложь;
		Элементы.СоздатьПрограмму.Видимость = Ложь;
		
	КонецЕсли;
	
	Если Объект.ТипПротокола = Перечисления.ТипыПрограммыПротокола.ВМатериалах Тогда
		
		Элементы.Протокол.Видимость = Ложь;
		Элементы.ГруппаПротокол.Видимость = Истина;
		Элементы.ТипПротокола.Видимость = Истина;
		Элементы.МатериалПротокол.Видимость = Ложь;
		Элементы.СоздатьПротокол.Видимость = Ложь;
		
	ИначеЕсли Объект.ТипПротокола = Перечисления.ТипыПрограммыПротокола.ВОтдельномДокументе Тогда
		
		Элементы.Протокол.Видимость = Ложь;
		Элементы.ГруппаПротокол.Видимость = Истина;
		Элементы.ТипПротокола.Видимость = Истина;
		Элементы.МатериалПротокол.Видимость = Истина;
		Элементы.СоздатьПротокол.Видимость = Истина;
		
	ИначеЕсли Объект.ТипПротокола = Перечисления.ТипыПрограммыПротокола.ВТаблице Тогда
		
		Элементы.Протокол.Видимость = Истина;
		Элементы.ГруппаПротокол.Видимость = Ложь;
		Элементы.ТипПротокола.Видимость = Ложь;
		Элементы.МатериалПротокол.Видимость = Ложь;
		Элементы.СоздатьПротокол.Видимость = Ложь;
		
	КонецЕсли;
	
	Если ЭтоМобильныйКлиент Тогда
		
		Элементы.МК_ПротоколКоманднаяПанель.Видимость = Элементы.Протокол.Видимость;
		Элементы.ТипПротокола.Видимость = Истина;
		
		Элементы.ГруппаКоманднаяПанельПрограмма.Видимость = Ложь;
		Элементы.МК_ПрограммаКоманднаяПанель.Видимость = Элементы.Программа.Видимость;
		Элементы.ТипПрограммы.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступность()
	
	Элементы.СоздатьПрограмму.Доступность = Не ЗначениеЗаполнено(Объект.МатериалПрограмма);
	Элементы.СоздатьПротокол.Доступность = Не ЗначениеЗаполнено(Объект.МатериалПротокол);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиДлительностьМероприятия()
	
	ДлительностьСтр = "";
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНачала) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда 
		Возврат;
	КонецЕсли;
	
	Если НачалоДня(Объект.ДатаНачала) <> НачалоДня(Объект.ДатаОкончания) Тогда 
		Возврат;
	КонецЕсли;	
	
	ДлительностьСек = Объект.ДатаОкончания - Объект.ДатаНачала;
		
	Часов = Цел(ДлительностьСек	/ 3600);
	ПодписьЧасов = ДелопроизводствоКлиентСервер.ПолучитьПодписьЧасов(Часов);
	
	Минут = Цел((ДлительностьСек - Часов*3600) / 60);
	ПодписьМинут = ДелопроизводствоКлиентСервер.ПолучитьПодписьМинут(Минут);
	
	Если Часов > 0 Тогда 
		ДлительностьСтр = ДлительностьСтр + Строка(Часов) + " " + ПодписьЧасов;
	КонецЕсли;	
		
	Если Минут > 0 Тогда 
		ДобавитьЗначениеКСтрокеЧерезРазделитель(ДлительностьСтр, " ", Строка(Минут) + " " + ПодписьМинут);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиОсталосьДоНачала()

	ТекущаяДата = ТекущаяДата();
	Если МестнаяДатаНачала <= ТекущаяДата Тогда 
		ОсталосьДоНачала = "";
	Иначе
		ОсталосьДоНачала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'осталось %1'"),
			НРег(ДелопроизводствоКлиентСервер.РазностьДатВДнях(МестнаяДатаНачала, ТекущаяДата)));
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура НайтиИПоказатьКоличествоФайлов()
	
	КоличествоФайлов = 0;
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоФайлов = Делопроизводство.КоличествоФайлов(Объект.Ссылка);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПодобратьВремяКлиент()
	
	ПроверитьОтсутствие = Ложь;
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда 
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Участники.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указаны участники мероприятия.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения,
			,
			"Участники");
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Мероприятие", Объект.Ссылка);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодобратьВремяКлиентЗавершение", ЭтотОбъект);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("Справочник.ЗаписиРабочегоКалендаря.Форма.ВыборВремени",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОписаниеОповещения,
		РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьВремяКлиентЗавершение(Время, ДополнительныеПараметры) Экспорт
	
	Если Время = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	Объект.ДатаНачала = Время.ДатаНачала;
	Объект.ДатаОкончания = Время.ДатаОкончания;
	
	Если Объект.ДатаНачала > Объект.ДатаОкончания Тогда 
		Объект.ДатаОкончания = Объект.ДатаНачала +  1 * ДлительностьПоУмолчанию;
	КонецЕсли;

	НачальноеЗначениеДатаНачала = Объект.ДатаНачала;
	НачальноеЗначениеДатаОкончания = Объект.ДатаОкончания;
	
	УправлениеМероприятиямиКлиентСервер.ПересчитатьНачалоОкончаниеПунктовПрограммы(Объект, ПараметрыПреобразованияМестногоВремени);
	
	ВывестиДлительностьМероприятия();
	ВывестиСуммарнуюДлительностьПрограммы();
	ВывестиОсталосьДоНачала();
	ОбновитьМестныеВременаНаКлиенте();
	
	// Включение добавленных во время подбора участников в участники мероприятия
	Для Каждого ДобавленныйУчастник Из Время.ДобавленныеУчастники Цикл
		
		Если Не ДанныеУчастниковЗаблокированы И Не Объект.Ссылка.Пустая() Тогда 
			ЗаблокироватьДанныеУчастниковДляРедактирования();
		КонецЕсли;
		
		ТекущаяСтрока = Элементы.Участники.ТекущаяСтрока;
		Индекс = Участники.Индекс(Участники.НайтиПоИдентификатору(ТекущаяСтрока));
		
		НоваяСтрока = Участники.Вставить(Индекс + 1);
		НоваяСтрока.Исполнитель = ДобавленныйУчастник;
		НоваяСтрока.ЯвкаОбязательна = ЯвкаОбязательнаПоУмолчанию;
		
		Элементы.Участники.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиПодсказкуСледующегоДействия()
	
	Если Не ОтображатьПодсказкуСледующегоДействия Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполненыОсновныеРеквизиты = 
		ЗначениеЗаполнено(Объект.ВидМероприятия)
		И ЗначениеЗаполнено(Объект.Наименование)
		И ЗначениеЗаполнено(Объект.ДатаНачала)
		И ЗначениеЗаполнено(Объект.ДатаОкончания)
		И ЗначениеЗаполнено(Объект.Организатор)
		И Участники.Количество() <> 0;
	
	ПодсказкаСледующегоДействия = УправлениеМероприятиямиКлиент.ПолучитьПодсказкуСледующегоДействия(
		СостояниеМероприятия, СостояниеПрограммы, СостояниеПриглашений, СостояниеМатериаловВыступающих,
		СостояниеПротокола, ЗаполненыОсновныеРеквизиты, УчитыватьКакПротокольноеМероприятие, Объект);
	Элементы.ПодсказкаСледующегоДействия.Видимость = ЗначениеЗаполнено(ПодсказкаСледующегоДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСпискиВыбораДат()
	
	ЗаполнитьСпискиВыбора(
		МестнаяДатаНачала,
		Элементы.ДатаНачалаВремя.СписокВыбора,
		МестнаяДатаНачалаФакт,
		Элементы.ДатаНачалаВремяФакт.СписокВыбора);
	ЗаполнитьСпискиВыбора(
		МестнаяДатаОкончания,
		Элементы.ДатаОкончанияВремя.СписокВыбора,
		МестнаяДатаОкончанияФакт,
		Элементы.ДатаОкончанияВремяФакт.СписокВыбора);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСпискиВыбора(ДатаВыбора, СписокВыбораПлан, ДатаВыбораФакт, СписокВыбораФакт)
	
	БазоваяДатаПлан = ?(ЗначениеЗаполнено(ДатаВыбора), ДатаВыбора, ТекущаяДата());
	ЗаполнитьСписокВыбора(БазоваяДатаПлан, СписокВыбораПлан);
	
	Если ЗначениеЗаполнено(ДатаВыбораФакт) Тогда
		БазоваяДатаФакт = ДатаВыбораФакт;
	ИначеЕсли ЗначениеЗаполнено(ДатаВыбора) Тогда
		БазоваяДатаФакт = ДатаВыбора;
	Иначе
		БазоваяДатаФакт = ТекущаяДата();
	КонецЕсли;
	ЗаполнитьСписокВыбора(БазоваяДатаФакт, СписокВыбораФакт);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбора(ДатаВыбора, СписокВыбора)
	
	СписокВыбора.Очистить();
	ТекДата = НачалоДня(ДатаВыбора);
	Для Инд = 1 По 24 Цикл
		
		СписокВыбора.Добавить(ТекДата, Формат(ТекДата, "ДФ=ЧЧ:мм"));
		Если ДатаВыбора > ТекДата И ДатаВыбора < ТекДата + 3600 Тогда
			СписокВыбора.Добавить(ДатаВыбора, Формат(ДатаВыбора, "ДФ=ЧЧ:мм"));
		КонецЕсли;
		
		ТекДата = ТекДата + 3600;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСтрокуСостояний()
	
	УстановитьПривилегированныйРежим(Истина);
	
	КешИнформации = РегистрыСведений.КешИнформацииОбОбъектах.СоздатьМенеджерЗаписи();
	КешИнформации.Объект = Объект.Ссылка;
	КешИнформации.Прочитать();
	
	// Картинка Взаимодействие
	СостояниеОбработки = ДействияСервер.ТекущееСостояниеОбработки(Объект.Ссылка);
	Если СостояниеОбработки = Перечисления.СостоянияОбработкиОбъектов.Завершена Тогда
		
		СтатусВзаимодействие = 0;
		Элементы.КартинкаВзаимодействие.Подсказка = НСтр("ru = 'Обработка мероприятия завершена'");
		Элементы.КартинкаВзаимодействие.Видимость = Истина;
		
	ИначеЕсли СостояниеОбработки = Перечисления.СостоянияОбработкиОбъектов.Выполняется
		Или СостояниеОбработки = Перечисления.СостоянияВыполненияДействий.Выполняется Тогда  
		
		СтатусВзаимодействие = 1;
		Элементы.КартинкаВзаимодействие.Подсказка = НСтр("ru = 'Обработка мероприятия активна'");
		Элементы.КартинкаВзаимодействие.Видимость = Истина;
	
	ИначеЕсли СостояниеОбработки = Перечисления.СостоянияОбработкиОбъектов.Остановлена Тогда  
		
		СтатусВзаимодействие = 2;
		Элементы.КартинкаВзаимодействие.Подсказка = НСтр("ru = 'Обработка мероприятия на паузе'");
		Элементы.КартинкаВзаимодействие.Видимость = Истина;
			
	Иначе	
		
		Элементы.КартинкаВзаимодействие.Видимость = Ложь;
		
	КонецЕсли;
	
	// Картинка Категории
	Элементы.КартинкаКатегории.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	Если СписокКатегорийДанных.Количество() > 0 Тогда 
		СтатусКатегории = 1;
		Элементы.КартинкаКатегории.Подсказка = НСтр("ru = 'Есть категории'");
	Иначе
		СтатусКатегории = 0;
		Элементы.КартинкаКатегории.Подсказка = НСтр("ru = 'Нет категорий'");
	КонецЕсли;	
	
	// Картинка Форум
	ИспользоватьОбсуждения = ПолучитьФункциональнуюОпцию("ИспользоватьОбсуждения");
	Элементы.КартинкаФорум.Видимость = ИспользоватьОбсуждения;
	Если ИспользоватьОбсуждения Тогда
		Тема = РаботаСОбсуждениями.НайтиТемуПоПредмету(Объект.Ссылка);
		Если Тема = Неопределено Тогда 
			СтатусФорум = 0;
			Элементы.КартинкаФорум.Подсказка = НСтр("ru = 'Нет обсуждения'");
		Иначе
			СтатусФорум = 1;
			Элементы.КартинкаФорум.Подсказка = НСтр("ru = 'Есть обсуждение'");
		КонецЕсли;
	КонецЕсли;
	
	// Картинка Контроль
	Элементы.КартинкаКонтроль.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов");
	ОбзорДокумента.ВывестиКартинкуКонтроля(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьРешениеНеПринято()
	
	ЕстьРешениеНеПринято = Ложь;
	Если УчитыватьКакПротокольноеМероприятие Тогда 
		
		Для Каждого Строка Из Объект.Программа Цикл
			
			Решение = "";
			Если Строка.ТребуетПринятияРешения Тогда 
				НайденныеСтроки = Объект.Протокол.НайтиСтроки(Новый Структура("НомерПунктаПрограммы", Строка.НомерПункта));
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Если ЗначениеЗаполнено(НайденнаяСтрока.Решили) Тогда 
						Решение = НСтр("ru = 'Принято'");
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
				
				Если Решение = "" Тогда 
					ЕстьРешениеНеПринято = Истина;
					Прервать;
				КонецЕсли;	
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЕсли;
	
	Возврат ЕстьРешениеНеПринято;
	
КонецФункции

&НаСервере
Процедура ПрочитатьМестоПроведения()
	
	Если ЗначениеЗаполнено(Объект.Помещение) Тогда
		МестоПроведения = Объект.Помещение;
	Иначе
		МестоПроведения = Объект.МестоПроведения;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьМестоПроведения()
	
	Объект.МестоПроведения = МестоПроведения;
	Объект.Помещение = МестоПроведения;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоПравам()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(Объект.ИсточникДанных) Тогда
		ТолькоПросмотр = Истина;
		НеРедактируетсяОписание = НСтр("ru = 'Мероприятие загружено из сторонней системы, редактирование запрещено.'");
		Элементы.ГруппаНеРедактируется.Видимость = Истина;
		Элементы.ГруппаПриглашениеИКалендарь.Доступность = Ложь;
	Иначе
		ТолькоПросмотр = Не ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(Объект.Ссылка).Изменение;
		Элементы.ГруппаПриглашениеИКалендарь.Доступность = Истина;
	КонецЕсли;
	
	Элементы.ФормаЗаписатьИЗакрыть.Видимость = Не ТолькоПросмотр;
	Элементы.ФормаЗаписатьИЗакрыть.КнопкаПоУмолчанию = Не ТолькоПросмотр;
	Элементы.ФормаЗакрыть.Видимость = ТолькоПросмотр;
	Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = ТолькоПросмотр;
	
	Элементы.ФормаЗаписать.Видимость = Не ТолькоПросмотр;
	
	Элементы.ГруппаДействияСоставУчастников.Доступность = Не ТолькоПросмотр;
	Элементы.Действия.ИзменятьСоставСтрок = Не ТолькоПросмотр;
	Элементы.Действия.ИзменятьПорядокСтрок = Не ТолькоПросмотр;
	Элементы.ДействияОтправить.Доступность = Не ТолькоПросмотр;
	Элементы.ДействияОстановить.Доступность = Не ТолькоПросмотр;
	Элементы.ДействияКонтекстноеМенюОбновитьДействия.Доступность = Не ТолькоПросмотр;
	Элементы.ДействияПерезапуститьОбработку.Доступность = Не ТолькоПросмотр;
	Элементы.ТаймлистАвтопротоколHTMLКонтекстноеМенюПеренестиВПротокол.Доступность = Не ТолькоПросмотр;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКлиент(ПараметрыЗаписи)
	
	Если Записать(ПараметрыЗаписи) Тогда
		
		Если ПараметрыЗаписи.Свойство("ЗакрытьПослеЗаписи") И Не ПараметрыЗаписи.ЗакрытьПослеЗаписи Тогда
			Возврат;
		КонецЕсли;
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСостояния(АктивизироватьЭлемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Мероприятие", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВидМероприятия", Объект.ВидМероприятия);
	ПараметрыФормы.Вставить("УчитыватьКакПротокольноеМероприятие", УчитыватьКакПротокольноеМероприятие);
	ПараметрыФормы.Вставить("ИзмененныеСостояния", ИзмененныеСостояния);
	ПараметрыФормы.Вставить("ЕстьРешениеНеПринято", ЕстьРешениеНеПринято());
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ПараметрыФормы.Вставить("АктивизироватьЭлемент", АктивизироватьЭлемент);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОткрытьФормуСостоянияЗавершение",
		ЭтотОбъект);
	
	ОткрытьФорму("Справочник.Мероприятия.Форма.СостоянияМероприятия",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСостоянияЗавершение(Результат, Параметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда 
		
		Модифицированность = Истина;
		
		ИзмененоСостояние = Истина;
		ИзмененныеСостояния.Очистить();
		ИзмененныеСостояния.ЗагрузитьЗначения(Результат);
		
		ОбновитьСостоянияМероприятия();
		ВывестиПодсказкуСледующегоДействия();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВУчастники(Исполнитель)
	
	Если Не ЗначениеЗаполнено(Исполнитель) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбораИсполнитель = Новый Структура("Исполнитель", Исполнитель);
	Если Участники.НайтиСтроки(ПараметрыОтбораИсполнитель).Количество() = 0 Тогда
		НоваяСтрока = Участники.Добавить();
		НоваяСтрока.Исполнитель = Исполнитель;
		НоваяСтрока.ЯвкаОбязательна = ЯвкаОбязательнаПоУмолчанию;
		КоличествоУчастников = Участники.Количество();
	КонецЕсли;
	
	ОбновитьЧасовыеПоясаУчастниковНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСостояния(ИмяСостояния)
	
	ИзмененоСостояние = Истина;
	
	СостоянияКУдалению = Новый Массив;
	Для Каждого ИзмененноеСостояние Из ИзмененныеСостояния Цикл
		
		Если ИзмененноеСостояние.Значение.Тип <> ИмяСостояния Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИзмененноеСостояние.Значение.Состояние = ЭтотОбъект["Состояние" + ИмяСостояния] Тогда
			Возврат;
		КонецЕсли;
		
		СостоянияКУдалению.Добавить(ИзмененноеСостояние);
		
	КонецЦикла;
	Для Каждого ЭлементКУдалению Из СостоянияКУдалению Цикл
		ИзмененныеСостояния.Удалить(ЭлементКУдалению);
	КонецЦикла;
	
	Если ЭтотОбъект["Состояние" + ИмяСостояния] <> ЭтотОбъект["НачальноеСостояние" + ИмяСостояния] Тогда
		СтруктураСостояния = Новый Структура("Состояние, Установил, Период, НачальноеСостояние, Тип",
			ЭтотОбъект["Состояние" + ИмяСостояния],
			ПользователиКлиент.ТекущийПользователь(),
			ТекущаяДата(),
			ЭтотОбъект["НачальноеСостояние" + ИмяСостояния],
			ИмяСостояния);
		ИзмененныеСостояния.Добавить(СтруктураСостояния);
	КонецЕсли;
	
	ОбновитьОбщееПредставлениеСостояния(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоВидуМероприятия()
	
	Если Не ЗначениеЗаполнено(Объект.ВидМероприятия) Тогда
		Возврат;
	КонецЕсли;
	
	Если УчитыватьКуратора Тогда
		КураторПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидМероприятия, "Куратор");
		Если ЗначениеЗаполнено(КураторПоУмолчанию) Тогда
			Объект.Куратор = КураторПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
	ПомещениеПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидМероприятия, "Помещение");
	Если ЗначениеЗаполнено(ПомещениеПоУмолчанию) Тогда
		МестоПроведения = ПомещениеПоУмолчанию;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦвет(НовыйЦвет)
	
	Если Цвет = НовыйЦвет Тогда
		Возврат;
	КонецЕсли;
	
	Цвет = НовыйЦвет;
	ПриИзмененииЦвета();
	Если ЗначениеЗаполнено(СвязаннаяЗаписьКалендаря) Тогда
		ИзмененныеЗаписиКалендаря = Новый Массив;
		ИзмененныеЗаписиКалендаря.Добавить(СвязаннаяЗаписьКалендаря);
		Оповестить("Запись_ЗаписьКалендаря", ИзмененныеЗаписиКалендаря, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЦвета()
	
	УстановитьПометкуКомандЦвета();
	РаботаСРабочимКалендаремСервер.УстановитьЦветЗаписиКалендаря(СвязаннаяЗаписьКалендаря, Цвет);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкуКомандЦвета()
	
	Элементы.УстановитьЦветКрасный.Пометка = (Цвет = Перечисления.ЦветаРабочегоКалендаря.Красный);
	Элементы.УстановитьЦветСиний.Пометка = (Цвет = Перечисления.ЦветаРабочегоКалендаря.Синий);
	Элементы.УстановитьЦветЖелтый.Пометка = (Цвет = Перечисления.ЦветаРабочегоКалендаря.Желтый);
	Элементы.УстановитьЦветЗеленый.Пометка = (Цвет = Перечисления.ЦветаРабочегоКалендаря.Зеленый);
	Элементы.УстановитьЦветОранжевый.Пометка = (Цвет = Перечисления.ЦветаРабочегоКалендаря.Оранжевый);
	Элементы.УстановитьЦветНет.Пометка = (Цвет = Перечисления.ЦветаРабочегоКалендаря.Нет);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьЦвет()
	
	Цвет = РаботаСРабочимКалендаремСервер.ПолучитьЦветСобытияКалендаря(СвязаннаяЗаписьКалендаря);
	УстановитьПометкуКомандЦвета();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеСвязаннойЗаписиКалендаря()
	
	СвязаннаяЗаписьКалендаря = Справочники.ЗаписиРабочегоКалендаря.СвязаннаяЗаписьКалендаря(
		Объект.Ссылка,
		СотрудникЗаписиКалендаря);
	Если Не ЗначениеЗаполнено(СвязаннаяЗаписьКалендаря) Тогда
		Элементы.ГруппаДанныеЗаписиКалендаря.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаДанныеЗаписиКалендаря.Видимость = Истина;
	ПрочитатьЦвет();
	ИспользоватьНапоминанияПользователя = ПолучитьФункциональнуюОпцию("ИспользоватьНапоминанияПользователя");
	
	Если ИспользоватьНапоминанияПользователя Тогда 
		СрокНапоминанияПоУмолчанию =
			ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиНапоминаний",
			"СрокНапоминанияПоУмолчанию",
			15);
		УстанавливатьНапоминаниеАвтоматически =
			ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиНапоминаний",
			"УстанавливатьНапоминаниеАвтоматически",
			Истина);
		ПрочитатьНапоминание();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНапоминание()
	
	Если Не ИспользоватьНапоминанияПользователя Тогда
		Возврат;
	КонецЕсли;

	ИзмененоНапоминание = Ложь;
	
	Если ЗначениеЗаполнено(СвязаннаяЗаписьКалендаря) Тогда
		
		Напоминание = ПолучитьПараметрыНапоминанияПоИсточнику(СвязаннаяЗаписьКалендаря);
		УстановитьНадписьНапоминания(
			Напоминание,
			УстановитьНапоминание,
			УстановленоНапоминание,
			СрокНапоминанияПоУмолчанию,
			ИнтервалВремениСтрокой,
			СпособУстановкиВремениНапоминания,
			ВремяНапоминания);
		
	Иначе
		
		УстановитьНапоминание = УстанавливатьНапоминаниеАвтоматически;
		УстановленоНапоминание = Ложь;
		ИнтервалВремениСтрокой = НапоминанияПользователяДокументооборотКлиентСервер.ПредставлениеВремениДокументооборот(СрокНапоминанияПоУмолчанию * 60);
		СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета;
		ВремяНапоминания = Дата(1,1,1);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеНапоминанияНаСервере()
	
	Если Не ИспользоватьНапоминанияПользователя Тогда
		Возврат;
	КонецЕсли;
	
	Если УстановитьНапоминание И (ИзмененоНапоминание Или ИзмененоВремя Или Не УстановленоНапоминание) Тогда
		
		// Отключение старого напоминания, если оно было установлено ранее
		Если УстановленоНапоминание И (ИзмененоНапоминание Или ИзмененоВремя) Тогда
			НапоминанияПользователяСлужебный.ОтключитьНапоминание(Напоминание, Ложь);
			НапоминаниеСтарое = Напоминание;
			Напоминание = Неопределено;
			ИзмененоНапоминание = Ложь;
			ИзмененоВремя = Ложь;
		КонецЕсли;
		
		Если СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета Тогда
			// Подключение напоминания относительно времени предмета
			ИнтервалВремениНапоминания = НапоминанияПользователяДокументооборот.ИнтервалВремени(ИнтервалВремениСтрокой);
			Напоминание = НапоминанияПользователяДокументооборот.ПодключитьНапоминаниеДоВремениПредмета(
				Строка(СвязаннаяЗаписьКалендаря), ИнтервалВремениНапоминания, СвязаннаяЗаписьКалендаря, "ДатаНачала");
			ОбновитьЗаписьВКешеНапоминаний = Истина;
			УстановленоНапоминание = Истина;
			
		ИначеЕсли СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя Тогда
			// Подключение напоминания в указанное время
			Напоминание = НапоминанияПользователяСлужебный.ПодключитьПроизвольноеНапоминание(
				Строка(СвязаннаяЗаписьКалендаря),
				ВремяНапоминания,
				0,
				СвязаннаяЗаписьКалендаря);
			ОбновитьЗаписьВКешеНапоминаний = Истина;
			УстановленоНапоминание = Истина;
			
		КонецЕсли;
		
	ИначеЕсли Не УстановитьНапоминание И УстановленоНапоминание Тогда
		
		// Отключение старого напоминания
		НапоминанияПользователяСлужебный.ОтключитьНапоминание(Напоминание);
		НапоминаниеСтарое = Напоминание;
		Напоминание = Неопределено;
		УстановленоНапоминание = Ложь;
		
	КонецЕсли;
	
	УстановитьНадписьНапоминания(Напоминание, УстановитьНапоминание, УстановленоНапоминание,
		СрокНапоминанияПоУмолчанию, ИнтервалВремениСтрокой,
		СпособУстановкиВремениНапоминания, ВремяНапоминания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеНапоминанияНаКлиенте()
	
	Если Не ИспользоватьНапоминанияПользователя Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбновитьЗаписьВКешеНапоминаний Тогда
		НапоминанияПользователяКлиент.ОбновитьЗаписьВКэшеОповещений(Напоминание);
		Оповестить("Запись_НапоминанияПользователя_Документооборот", Напоминание, Напоминание.Источник);
		ОбновитьЗаписьВКешеНапоминаний = Ложь;
	ИначеЕсли НапоминаниеСтарое <> Неопределено Тогда
		НапоминанияПользователяКлиент.УдалитьЗаписьИзКэшаОповещений(НапоминаниеСтарое);
		Оповестить("Удаление_НапоминанияПользователя_Документооборот", , НапоминаниеСтарое.Источник);
		НапоминаниеСтарое = Неопределено;
	КонецЕсли;
	УстановитьДоступностьЭлементовФормы();
	ЗаполнитьИнтервалыНапоминания();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИнтервалыНапоминания()
	
	Если ИспользоватьНапоминанияПользователя Тогда
		
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Очистить();
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'при наступлении события'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 5 минут'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 10 минут'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 15 минут'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 30 минут'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 1 час'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 2 часа'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'за 3 часа'"));
		Элементы.ИнтервалВремениСтрокой.СписокВыбора.Добавить(НСтр("ru = 'Другое...'"));
		
		Если Элементы.ИнтервалВремениСтрокой.СписокВыбора.НайтиПоЗначению(ИнтервалВремениСтрокой) = Неопределено Тогда
			Элементы.ИнтервалВремениСтрокой.СписокВыбора.Вставить(0, ИнтервалВремениСтрокой);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы()
	
	Если ИспользоватьНапоминанияПользователя Тогда
		Элементы.ИнтервалВремениСтрокой.Доступность = УстановитьНапоминание;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыНапоминанияПоИсточнику(Источник)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НапоминанияПользователя.Пользователь,
	|	НапоминанияПользователя.ВремяСобытия,
	|	НапоминанияПользователя.Источник,
	|	НапоминанияПользователя.СрокНапоминания КАК СрокНапоминания,
	|	НапоминанияПользователя.Описание КАК Описание,
	|	2 КАК ИндексКартинки,
	|	НапоминанияПользователя.СпособУстановкиВремениНапоминания,
	|	НапоминанияПользователя.ИнтервалВремениНапоминания,
	|	НапоминанияПользователя.ИмяРеквизитаИсточника
	|ИЗ
	|	РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
	|ГДЕ
	|	НапоминанияПользователя.Пользователь = &Пользователь
	|	И НапоминанияПользователя.Источник = &Источник";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("Источник", Источник);
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрыНапоминания = Новый Структура("Пользователь,Источник,ВремяСобытия,СрокНапоминания,
		|Описание,СпособУстановкиВремениНапоминания,ИнтервалВремениНапоминания,ИмяРеквизитаИсточника");
	
	Результат = Неопределено;
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыНапоминания, Выборка);
		Результат = ПараметрыНапоминания;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьНадписьНапоминания(
	Напоминание,
	УстановитьНапоминание,
	УстановленоНапоминание,
	СрокНапоминанияПоУмолчанию,
	ИнтервалВремениСтрокой,
	СпособУстановкиВремениНапоминания,
	ВремяНапоминания)
	
	Если Напоминание <> Неопределено Тогда
		
		УстановитьНапоминание = Истина;
		УстановленоНапоминание = Истина;
		
		Если Напоминание.СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ВУказанноеВремя") Тогда
			
			ИнтервалВремениСтрокой =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'в %2 %1'"),
					Формат(Напоминание.ВремяСобытия, "ДЛФ=D"),
					Формат(Напоминание.ВремяСобытия, "ДФ=ЧЧ:мм"));
			СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ВУказанноеВремя");
			ВремяНапоминания = Напоминание.ВремяСобытия;
			
		ИначеЕсли Напоминание.СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета") Тогда
			
			Если Напоминание.ИнтервалВремениНапоминания >= 0 И Напоминание.ИмяРеквизитаИсточника = "ДатаНачала" Тогда
				
				ИнтервалВремениСтрокой = НапоминанияПользователяДокументооборотКлиентСервер.ПредставлениеВремениДокументооборот(Напоминание.ИнтервалВремениНапоминания);
				
			ИначеЕсли Напоминание.ИнтервалВремениНапоминания <> 0 И Напоминание.ИмяРеквизитаИсточника = "ДатаОкончания" Тогда
				
				ИнтервалВремениСтрокой = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'за %1 до окончания'"),
					НапоминанияПользователяДокументооборотКлиентСервер.ПредставлениеВремени(Напоминание.ИнтервалВремениНапоминания));
				
			ИначеЕсли Напоминание.ИнтервалВремениНапоминания = 0 И Напоминание.ИмяРеквизитаИсточника = "ДатаОкончания" Тогда
				
				ИнтервалВремениСтрокой = НСтр("ru = 'при окончании события'");
				
			КонецЕсли;
			
			СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета");
			ВремяНапоминания = Дата(1,1,1);
			
		ИначеЕсли Напоминание.СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.Периодически") Тогда
			
			ИнтервалВремениСтрокой = НСтр("ru = 'по заданному расписанию'");
			СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.Периодически");
			ВремяНапоминания = Дата(1,1,1);
			
		КонецЕсли;
		
	Иначе
		
		УстановитьНапоминание = Ложь;
		УстановленоНапоминание = Ложь;
		ИнтервалВремениСтрокой = НапоминанияПользователяДокументооборотКлиентСервер.ПредставлениеВремениДокументооборот(СрокНапоминанияПоУмолчанию * 60);
		СпособУстановкиВремениНапоминания = ПредопределенноеЗначение("Перечисление.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета");
		ВремяНапоминания = Дата(1,1,1);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыНапоминанияДокументооборота(ПараметрыНапоминания)
	
	Если ПараметрыНапоминания.Свойство("Пользователь")
		И ПараметрыНапоминания.Свойство("Источник")
		И ПараметрыНапоминания.Свойство("ВремяСобытия")
		И ПараметрыНапоминания.Свойство("СпособУстановкиВремениНапоминания")
		И ПараметрыНапоминания.Свойство("ИнтервалВремениНапоминания")
		И ПараметрыНапоминания.Свойство("ИмяРеквизитаИсточника") Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеПриглашения()
	
	Элементы.ПредставлениеПриглашения.СписокВыбора.Очистить();
	ЗначениеВРеквизитФормы(
		РегистрыСведений.УчастникиМероприятия.ДоступныеПриглашения(Объект.Ссылка),
		"ДоступныеПриглашения");
	
	Для Каждого ДоступноеПриглашение Из ДоступныеПриглашения Цикл
		Элементы.ПредставлениеПриглашения.СписокВыбора.Добавить(
			Строка(ДоступноеПриглашение.ПолучитьИдентификатор()),
			ДоступноеПриглашение.Представление);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИсполнительПриглашения) Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Исполнитель", ИсполнительПриглашения);
		ПараметрыОтбора.Вставить("ОтКогоДелегирование", ОтКогоДелегированиеПриглашения);
		НайденныеСтроки = ДоступныеПриглашения.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			ИсполнительПриглашения = Неопределено;
			ОтКогоДелегированиеПриглашения = Неопределено;
			СостояниеПриглашения = Неопределено;
			ПредставлениеПриглашения = Неопределено;
		Иначе
			НайденнаяСтрока = НайденныеСтроки[0];
			ИсполнительПриглашения = НайденнаяСтрока.Исполнитель;
			ОтКогоДелегированиеПриглашения = НайденнаяСтрока.ОтКогоДелегирование;
			СостояниеПриглашения = НайденнаяСтрока.СостояниеПриглашения;
			ПредставлениеПриглашения = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИсполнительПриглашения) И ДоступныеПриглашения.Количество() <> 0 Тогда
		ДоступноеПриглашение = ДоступныеПриглашения[0];
		ИсполнительПриглашения = ДоступноеПриглашение.Исполнитель;
		ОтКогоДелегированиеПриглашения = ДоступноеПриглашение.ОтКогоДелегирование;
		СостояниеПриглашения = ДоступноеПриглашение.СостояниеПриглашения;
		ПредставлениеПриглашения = ДоступноеПриглашение.ПолучитьИдентификатор();
	КонецЕсли;
	
	Элементы.ГруппаПриглашениеИКалендарь.Видимость = ЗначениеЗаполнено(ИсполнительПриглашения)
		И ЗначениеЗаполнено(СостояниеПриглашений)
		И СостояниеМероприятия = Перечисления.СостоянияМероприятий.МероприятиеВСтадииПодготовки;
	Если ДоступныеПриглашения.Количество() > 1 Тогда
		Элементы.ПредставлениеПриглашения.Видимость = Истина;
		Элементы.ГруппаПриглашение.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Иначе
		Элементы.ПредставлениеПриглашения.Видимость = Ложь;
		Элементы.ГруппаПриглашение.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	КонецЕсли;
	Элементы.ПринятьПриглашение.Видимость = СостояниеПриглашения <> Перечисления.СостоянияПриглашения.НеПринято;
	Элементы.ПринятьПриглашение.Пометка = СостояниеПриглашения = Перечисления.СостоянияПриглашения.Принято;
	Элементы.ОтклонитьПриглашение.Видимость = СостояниеПриглашения <> Перечисления.СостоянияПриглашения.Принято;
	Элементы.ОтклонитьПриглашение.Пометка = СостояниеПриглашения = Перечисления.СостоянияПриглашения.НеПринято;
	Элементы.ИзменитьПриглашение.Видимость = СостояниеПриглашения = Перечисления.СостоянияПриглашения.Принято
		Или СостояниеПриглашения = Перечисления.СостоянияПриглашения.НеПринято;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеПриглашения(НовоеСостояниеПриглашения)
	
	ИзменитьСостояниеПриглашенияНаСервере(НовоеСостояниеПриглашения);
	Если ЗначениеЗаполнено(СвязаннаяЗаписьКалендаря) Тогда
		ИзмененныеЗаписиКалендаря = Новый Массив;
		ИзмененныеЗаписиКалендаря.Добавить(СвязаннаяЗаписьКалендаря);
		Оповестить("Запись_ЗаписьКалендаря", ИзмененныеЗаписиКалендаря, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСостояниеПриглашенияНаСервере(НовоеСостояниеПриглашения)
	
	РегистрыСведений.УчастникиМероприятия.ИзменитьСостояниеПриглашения(
		Объект.Ссылка,
		ИсполнительПриглашения,
		НовоеСостояниеПриглашения,
		ОтКогоДелегированиеПриглашения);
	
	ОбновитьДанныеПриглашения();
	ОбновитьСостоянияМероприятия();
	ЗаполнитьУчастниковМероприятия();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОтработана()
	
	Если Отработана Тогда
		УстановитьНапоминание = Ложь;
		Цвет = Перечисления.ЦветаРабочегоКалендаря.Нет;
	КонецЕсли;
	
	РаботаСРабочимКалендаремСервер.УстановитьОтработанаЗаписьКалендаря(СвязаннаяЗаписьКалендаря, Отработана);
	ПриИзмененииЦвета();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокТиповПредмета()
	
	СписокТиповПредмета.Очистить();
	Если ПравоДоступа("Просмотр", Метаданные.Справочники.ДокументыПредприятия) Тогда
		СписокТиповПредмета.Добавить("Справочник.ДокументыПредприятия", НСтр("ru = 'Документ'"));
	КонецЕсли;
	Если ПравоДоступа("Просмотр", Метаданные.Справочники.Файлы) Тогда
		СписокТиповПредмета.Добавить("Справочник.Файлы", НСтр("ru = 'Файл'"));
	КонецЕсли;
	Если ПравоДоступа("Просмотр", Метаданные.Справочники.Контрагенты) Тогда
		СписокТиповПредмета.Добавить("Справочник.Контрагенты", НСтр("ru = 'Контрагент'"));
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользованиеВстроеннойПочты") Тогда
		Если ПравоДоступа("Просмотр", Метаданные.Документы.ВходящееПисьмо) Тогда
			СписокТиповПредмета.Добавить("Документ.ВходящееПисьмо", НСтр("ru = 'Входящее письмо'"));
		КонецЕсли;
		Если ПравоДоступа("Просмотр", Метаданные.Документы.ИсходящееПисьмо) Тогда
			СписокТиповПредмета.Добавить("Документ.ИсходящееПисьмо", НСтр("ru = 'Исходящее письмо'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовилПриИзмененииНаСервере()
	
	Объект.Подразделение = Сотрудники.ПодразделениеСотрудника(Объект.Подготовил);
	
КонецПроцедуры

&НаСервере
Процедура ПринятьПриглашениеТекущимПользователем()
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Исполнитель", ТекущийПользователь);
	НайденныеУчастники = Участники.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеУчастники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НайденныйУчастник = НайденныеУчастники[0];
	НайденныйУчастник.СостояниеПриглашения = Перечисления.СостоянияПриглашения.Принято;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуИзмененияПунктаПрограммы(ДанныеПункта)
	
	Если ДанныеПункта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = УправлениеМероприятиямиКлиентСервер.НовыйПараметрыФормыВводПунктаПрограммы();
		
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ДанныеПункта);
	ПараметрыФормы.ВидМероприятия = Объект.ВидМероприятия;
	ПараметрыФормы.СостояниеПрограммы = СостояниеПрограммы;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеПункта", ДанныеПункта);
	ОткрытьФорму("Справочник.Мероприятия.Форма.ВводПунктаПрограммы",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ПрограммаПередНачаломИзмененияЗавершение",
			ЭтотОбъект,
			ПараметрыОбработчика));
	
КонецПроцедуры

&НаКлиенте
Процедура ПрограммаПередНачаломИзмененияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеПункта = ДополнительныеПараметры.ДанныеПункта;
	ЗаполнитьЗначенияСвойств(ДанныеПункта, Результат);
	
	ЗаполнитьСтрокуПрограммы(ДанныеПункта, ПараметрыПреобразованияМестногоВремени);
	ДанныеПункта.Решение =
		УправлениеМероприятиямиКлиентСервер.ПолучитьРешениеВСтрокеПрограммы(
			ДанныеПункта,
			Объект.Протокол);
	
	Модифицированность = Истина;
	
	УправлениеМероприятиямиКлиентСервер.ПересчитатьНачалоОкончаниеПунктовПрограммы(Объект, ПараметрыПреобразованияМестногоВремени);
	ВывестиСуммарнуюДлительностьПрограммы();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьМестныеВременаНаСервере()
	
	Если ПараметрыПреобразованияМестногоВремени = Неопределено Тогда
		ПараметрыПреобразованияМестногоВремени = РаботаСЧасовымиПоясами.ПараметрыПреобразованияМестногоВремени();
		ПредставлениеМестногоЧасовогоПояса = ПараметрыПреобразованияМестногоВремени.ПредставлениеМестногоЧасовогоПояса;
	КонецЕсли;
	
	МестнаяДатаНачала = РаботаСЧасовымиПоясамиКлиентСервер.ПривестиКМестномуВремени(
		Объект.ДатаНачала,
		ПараметрыПреобразованияМестногоВремени);
	МестнаяДатаОкончания = РаботаСЧасовымиПоясамиКлиентСервер.ПривестиКМестномуВремени(
		Объект.ДатаОкончания,
		ПараметрыПреобразованияМестногоВремени);
	МестнаяДатаНачалаФакт = РаботаСЧасовымиПоясамиКлиентСервер.ПривестиКМестномуВремени(
		Объект.ДатаНачалаФакт,
		ПараметрыПреобразованияМестногоВремени);
	МестнаяДатаОкончанияФакт = РаботаСЧасовымиПоясамиКлиентСервер.ПривестиКМестномуВремени(
		Объект.ДатаОкончанияФакт,
		ПараметрыПреобразованияМестногоВремени);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМестныеВременаНаКлиенте()
	
	МестнаяДатаНачала = РаботаСЧасовымиПоясамиКлиентСервер.ПривестиКМестномуВремени(
		Объект.ДатаНачала,
		ПараметрыПреобразованияМестногоВремени);
	МестнаяДатаОкончания = РаботаСЧасовымиПоясамиКлиентСервер.ПривестиКМестномуВремени(
		Объект.ДатаОкончания,
		ПараметрыПреобразованияМестногоВремени);
	МестнаяДатаНачалаФакт = РаботаСЧасовымиПоясамиКлиентСервер.ПривестиКМестномуВремени(
		Объект.ДатаНачалаФакт,
		ПараметрыПреобразованияМестногоВремени);
	МестнаяДатаОкончанияФакт = РаботаСЧасовымиПоясамиКлиентСервер.ПривестиКМестномуВремени(
		Объект.ДатаОкончанияФакт,
		ПараметрыПреобразованияМестногоВремени);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВременаСеанса()
	
	Объект.ДатаНачала = РаботаСЧасовымиПоясамиКлиентСервер.ПривестиКВремениСеанса(
		МестнаяДатаНачала,
		ПараметрыПреобразованияМестногоВремени);
	Объект.ДатаОкончания = РаботаСЧасовымиПоясамиКлиентСервер.ПривестиКВремениСеанса(
		МестнаяДатаОкончания,
		ПараметрыПреобразованияМестногоВремени);
	Объект.ДатаНачалаФакт = РаботаСЧасовымиПоясамиКлиентСервер.ПривестиКВремениСеанса(
		МестнаяДатаНачалаФакт,
		ПараметрыПреобразованияМестногоВремени);
	Объект.ДатаОкончанияФакт = РаботаСЧасовымиПоясамиКлиентСервер.ПривестиКВремениСеанса(
		МестнаяДатаОкончанияФакт,
		ПараметрыПреобразованияМестногоВремени);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСтрокуПрограммы(СтрокаПрограммы, ПараметрыПреобразованияМестногоВремени)
	
	СтрокаПрограммы.ВремяПланСтр = УчетВремениКлиентСервер.ЧислоВСтроку(СтрокаПрограммы.ВремяПлан);
	СтрокаПрограммы.ВремяФактСтр = УчетВремениКлиентСервер.ЧислоВСтроку(СтрокаПрограммы.ВремяФакт);
	СтрокаПрограммы.МестнаяНачало = РаботаСЧасовымиПоясамиКлиентСервер.ПривестиКМестномуВремени(
		СтрокаПрограммы.Начало,
		ПараметрыПреобразованияМестногоВремени);
	СтрокаПрограммы.МестнаяОкончание = РаботаСЧасовымиПоясамиКлиентСервер.ПривестиКМестномуВремени(
		СтрокаПрограммы.Окончание,
		ПараметрыПреобразованияМестногоВремени);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЧасовыеПоясаУчастниковНаКлиенте()
	
	ЕстьСтрокиКОбновлению = Ложь;
	Для Каждого СтрокаУчастник Из Участники Цикл
		
		Если СтрокаУчастник.Исполнитель <> СтрокаУчастник.ИсполнительЧасовогоПояса Тогда
			СтрокаУчастник.ЧасовойПоясУчастника = "";
			СтрокаУчастник.ПредставлениеЧасовогоПояса = "";
		КонецЕсли;
		
		Если ТипЗнч(СтрокаУчастник.Исполнитель) <> Тип("СправочникСсылка.Пользователи")
			Или Не ЗначениеЗаполнено(СтрокаУчастник.Исполнитель)
			Или ЗначениеЗаполнено(СтрокаУчастник.ЧасовойПоясУчастника) Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьСтрокиКОбновлению = Истина;
		
	КонецЦикла;
	
	Если Не ЕстьСтрокиКОбновлению Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьЧасовыеПоясаУчастниковНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЧасовыеПоясаУчастниковНаСервере()
	
	ПользователиДляОпределенияЧасовыхПоясов = Новый Массив;
	Для Каждого СтрокаУчастник Из Участники Цикл
		
		Если ТипЗнч(СтрокаУчастник.Исполнитель) <> Тип("СправочникСсылка.Пользователи")
			Или Не ЗначениеЗаполнено(СтрокаУчастник.Исполнитель)
			Или ЗначениеЗаполнено(СтрокаУчастник.ЧасовойПоясУчастника) Тогда
			Продолжить;
		КонецЕсли;
		
		ПользователиДляОпределенияЧасовыхПоясов.Добавить(СтрокаУчастник.Исполнитель);
		
	КонецЦикла;
	
	ЧасовойПоясПоУмолчанию = РаботаСЧасовымиПоясами.ЧасовойПоясПоУмолчанию();
	ЧасовыеПоясаПользователей =
		РаботаСЧасовымиПоясами.ЧасовыеПоясаПользователей(ПользователиДляОпределенияЧасовыхПоясов);
	Для Каждого СтрокаУчастник Из Участники Цикл
		
		Если ТипЗнч(СтрокаУчастник.Исполнитель) <> Тип("СправочникСсылка.Пользователи")
			Или Не ЗначениеЗаполнено(СтрокаУчастник.Исполнитель)
			Или ЗначениеЗаполнено(СтрокаУчастник.ЧасовойПоясУчастника) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаУчастник.ЧасовойПоясУчастника = ЧасовыеПоясаПользователей[СтрокаУчастник.Исполнитель];
		Если Не ЗначениеЗаполнено(ПредставлениеМестногоЧасовогоПояса)
			И СтрокаУчастник.ЧасовойПоясУчастника = ЧасовойПоясПоУмолчанию Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаУчастник.ПредставлениеЧасовогоПояса =
			РаботаСЧасовымиПоясами.ПредставлениеЧасовогоПоясаДО(СтрокаУчастник.ЧасовойПоясУчастника);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСобытиеЗаписиЗадачи(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия <> "Запись_Задача" Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьЗадачиПоПриложению();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗадачиПоПриложению()
	
	ЗаголовокКомандыЗадачиПоПриложению = РаботаСЗадачами.ЗаголовокКомандыЗадачиПоПриложению(Объект.Ссылка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЗадачиПоПриложению",
		"Заголовок",
		ЗаголовокКомандыЗадачиПоПриложению);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЗадачиПоПриложению",
		"Видимость",
		ЗначениеЗаполнено(ЗаголовокКомандыЗадачиПоПриложению));
	
КонецПроцедуры

&НаСервере
Процедура ПометитьДействияНаУдаление(МассивДействий)
	
	Если МассивДействий.Количество() > 0 Тогда 
		ОбновитьПараметрыВидаОбъекта();
		ПараметрыОбъектаОбработки = ДействияКлиентСервер.ПараметрыОбъектаОбработки(Объект.Ссылка, Объект);
		ДействияСервер.ПометитьНаУдалениеИоОбновитьОтображение(
			ЭтотОбъект,
			МассивДействий,
			Истина,
			ПараметрыОбъектаОбработки,
			ПараметрыВидаОбъекта);
	Иначе 
		ПрочитатьДействия();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДействия(ПерезаполнитьПодписантов = Ложь) Экспорт
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		ВерсияДанных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ВерсияДанных");
		Если ВерсияДанных <> Объект.ВерсияДанных Тогда
			Если Модифицированность Тогда
				ВызватьИсключение  НСтр("ru = 'Документ был изменен другим сотрудником или процессом. 
					|Необходимо открыть документ заново.'") ;
			Иначе
				Прочитать();
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьПараметрыВидаОбъекта();
		ПараметрыОбъектаОбработки = ДействияКлиентСервер.ПараметрыОбъектаОбработки(Объект.Ссылка, Объект);
		ДействияСервер.ПрочитатьДействияВФормуПредмета(
			ЭтотОбъект,
			ПараметрыОбъектаОбработки,
			ПараметрыВидаОбъекта);
		ОбработкаПредставление = Формат(КоличествоДействий, "");
		
		ОбновитьОбластьЗадач();
		
		ОбновитьСостоянияМероприятия();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКнопкуОтправить() Экспорт
	
	Если Не Модифицированность Тогда
		Прочитать();
	КонецЕсли;
	
	// перечитать действия
	ПрочитатьДействия();
	ДействияКлиент.РазвернутьДействия(Элементы.Действия, Действия);
	УстановитьДоступностьПоСостоянию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОбработка() Экспорт
	
	// перечитать действия
	ПрочитатьДействия();
	ДействияКлиент.РазвернутьДействия(Элементы.Действия, Действия);
	
КонецПроцедуры

&НаКлиенте
Функция НайтиСтрокуДействияИОткрытьФорму(СтрокаДействия)
	
	Если СтрокаДействия.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.Выполняется") Тогда 
		
		ЭтоМояЗадача = Ложь;
		Если (СотрудникиТекущегоПользователя.Найти(СтрокаДействия.Участник) <> Неопределено
			Или РолиТекущегоПользователя.Найти(СтрокаДействия.Участник) <> Неопределено) Тогда
			
			ЭтоМояЗадача = Истина;
			
		Иначе	

			Если ПользовательЯвляетсяЗаместителемИлиПомощником Тогда
				ЭтоМояЗадача = ДействияВызовСервера.ПоЗадачеЕстьЗамещение(СтрокаДействия.Действие, СтрокаДействия.Участник, СотрудникиТекущегоПользователя);
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если ЭтоМояЗадача Тогда
		
			Если ДействияКлиентСервер.ЭтоДействиеОзнакомления(СтрокаДействия.Действие) И СтрокаДействия.ЭтоУчастник	Тогда
					
				ДействиеЗадачи = ДействияВызовСервера.ДействиеЗадачиДляСтрокиОзнакомления(
					СтрокаДействия.Действие, СтрокаДействия.Идентификатор);
				Если ЗначениеЗаполнено(ДействиеЗадачи) Тогда
					ПоказатьЗначение(, ДействиеЗадачи);	
					Возврат Истина;
				КонецЕсли;
				
			КонецЕсли;	
			
			Если РаботаСПроцессамиПоОбработкамОбъектовКлиентПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
				
				// откроем карточку задачи
				РаботаСПроцессамиПоДействиямСобытияКлиент.ОбработатьДвойнойКликНаУчастникаДействия(
					ЭтотОбъект, СтрокаДействия); 
				Возврат Истина;	
					
			Иначе	
				
				// перейдем на закладку Обработка
				Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбработка;
				ПриПереключенииНаСтраницуОбработка();
				Возврат Истина;
				
			КонецЕсли;	
				
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаДействияТек Из СтрокаДействия.ПолучитьЭлементы() Цикл
		Если НайтиСтрокуДействияИОткрытьФорму(СтрокаДействияТек) Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Ложь; // не открыли задачу
	
КонецФункции

&НаКлиенте
Процедура ПриПереключенииНаСтраницуОбработка()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Или Модифицированность Тогда // ни разу не был записан
		ПодключитьОбработчикОжидания("ЗаписатьДействияПриПереключенииСтраниц", 0.2, Истина);
	КонецЕсли;
	
	Если ЭтоМобильныйКлиент Тогда
		МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.СтраницаОбработка, Элементы.МК_КнопкаСтраницаОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДействияПриПереключенииСтраниц()

	Состояние(НСтр("ru = 'Выполняется запись документа...'"));
	Записать();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОбластьЗадач()
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		ПользовательИЕгоСотрудники = 
			СотрудникиВызовСервера.ПользовательИЕгоСотрудники(Пользователи.ТекущийПользователь());
			
		РолиТекущегоПользователя = ПараметрыСеанса.РолиТекущегоПользователя;
		ЗадачаНайдена = Ложь;
		
		Для Каждого СтрокаДействия Из Действия.ПолучитьЭлементы() Цикл
			ПроверитьЧтоЕстьЗадачаМне(СтрокаДействия, ПользовательИЕгоСотрудники, РолиТекущегоПользователя, ЗадачаНайдена);
		КонецЦикла;	
		
		Если Не ЗадачаНайдена Тогда
			Элементы.ГруппаЗадач.Видимость = Ложь;
			Возврат;
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЧтоЕстьЗадачаМне(СтрокаДействия, ПользовательИЕгоСотрудники, РолиТекущегоПользователя,
	ЗадачаНайдена)
	
	Если ЗадачаНайдена Тогда
		Возврат;
	КонецЕсли;	
	
	ЭтоМояЗадача = Ложь;
	Если (ПользовательИЕгоСотрудники.Найти(СтрокаДействия.Участник) <> Неопределено
		Или РолиТекущегоПользователя.Найти(СтрокаДействия.Участник) <> Неопределено) Тогда
		
		ЭтоМояЗадача = Истина;
		
	Иначе	

		Если ПользовательЯвляетсяЗаместителемИлиПомощником И СтрокаДействия.Состояние = Перечисления.СостоянияВыполненияДействий.Выполняется Тогда
			ЭтоМояЗадача = ДействияВызовСервера.ПоЗадачеЕстьЗамещение(СтрокаДействия.Действие, СтрокаДействия.Участник, ПользовательИЕгоСотрудники);
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если ЭтоМояЗадача Тогда
		
		Если СтрокаДействия.ЭтоДействие 
			И СтрокаДействия.Состояние <> Перечисления.СостоянияВыполненияДействий.Выполняется
			И СтрокаДействия.Состояние <> Перечисления.СостоянияВыполненияДействий.Завершено Тогда
			Возврат;
		КонецЕсли;	

		Если СтрокаДействия.ЭтоУчастник
			И СтрокаДействия.Состояние <> Перечисления.СостоянияВыполненияДействий.Выполняется Тогда
			Возврат;
		КонецЕсли;	
		
		ДанныеВозврата = ДействияСервер.ДействиеЗадачиИСостояниеУчастникаДействияОбработки(
			СтрокаДействия.Действие,
			СтрокаДействия.Идентификатор);
		Если Не ЗначениеЗаполнено(ДанныеВозврата.ДействиеЗадачи) Или ДанныеВозврата.Активна = Ложь Тогда
			Возврат;
		КонецЕсли;
		
		Элементы.ГруппаЗадач.Видимость = Истина;
		УстановитьТекстГруппаЗадач(СтрокаДействия);
		ЗадачаНайдена = Истина;
		Возврат;
		
	КонецЕсли;
	
	Для Каждого СтрокаДействияТек Из СтрокаДействия.ПолучитьЭлементы() Цикл
		ПроверитьЧтоЕстьЗадачаМне(СтрокаДействияТек, ПользовательИЕгоСотрудники, РолиТекущегоПользователя, ЗадачаНайдена);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстГруппаЗадач(СтрокаДействия)
	
	Элементы.ПерейтиКВыполнениюЗадачи.Видимость = Истина;
	
	ЭтоОбработатьРезультат 
		= ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(СтрокаДействия.Функция);
	
	Если ДействияКлиентСервер.ЭтоДействиеИсполнения(СтрокаДействия.Действие) Тогда
		
		Если Не ЭтоОбработатьРезультат Тогда
			Если СтрокаДействия.Функция = Перечисления.ФункцииУчастниковИсполнения.Рассматривающий Тогда
				Элементы.ДекорацияЗадач.Заголовок = НСтр("ru = 'Мероприятие находится у Вас на рассмотрении'");
				Элементы.ПерейтиКВыполнениюЗадачи.Заголовок = НСтр("ru = 'Перейти к рассмотрению'");
			Иначе
				Элементы.ДекорацияЗадач.Заголовок = НСтр("ru = 'Мероприятие находится у Вас на исполнении'");
				Элементы.ПерейтиКВыполнениюЗадачи.Заголовок = НСтр("ru = 'Перейти к исполнению'");
			КонецЕсли;
		Иначе
			Элементы.ДекорацияЗадач.Заголовок = НСтр("ru = 'Мероприятие у Вас на обработке результата исполнения'");
			Элементы.ПерейтиКВыполнениюЗадачи.Заголовок = НСтр("ru = 'Перейти к обработке результата'");
		КонецЕсли;
		
	ИначеЕсли ДействияКлиентСервер.ЭтоДействиеОзнакомления(СтрокаДействия.Действие) Тогда
		
		Элементы.ДекорацияЗадач.Заголовок = НСтр("ru = 'Мероприятие находится у Вас на ознакомлении'");
		Элементы.ПерейтиКВыполнениюЗадачи.Заголовок = НСтр("ru = 'Перейти к ознакомлению'");
		
	ИначеЕсли ДействияКлиентСервер.ЭтоДействиеПодписания(СтрокаДействия.Действие) Тогда
		
		Если Не ЭтоОбработатьРезультат Тогда
			Если СтрокаДействия.Функция = Перечисления.ФункцииУчастниковПодписания.ОбеспечивающийПодписание Тогда

				Элементы.ДекорацияЗадач.Заголовок = НСтр("ru = 'Мероприятие находится у вас на исполнении'");
				Элементы.ПерейтиКВыполнениюЗадачи.Заголовок = НСтр("ru = 'Перейти к исполнению'");
					
			Иначе		
			
				Элементы.ДекорацияЗадач.Заголовок = НСтр("ru = 'Мероприятие находится у Вас на подписании'");
				Элементы.ПерейтиКВыполнениюЗадачи.Заголовок = НСтр("ru = 'Перейти к подписанию'");
			КонецЕсли;
		Иначе
			Элементы.ДекорацияЗадач.Заголовок = НСтр("ru = 'Мероприятие у Вас на обработке результата подписания'");
			Элементы.ПерейтиКВыполнениюЗадачи.Заголовок = НСтр("ru = 'Перейти к обработке результата'");
		КонецЕсли;
		
	ИначеЕсли ДействияКлиентСервер.ЭтоДействиеРегистрации(СтрокаДействия.Действие) Тогда
		
		Если Не ЭтоОбработатьРезультат Тогда
			Элементы.ДекорацияЗадач.Заголовок = НСтр("ru = 'Мероприятие находится у Вас на регистрации'");
			Элементы.ПерейтиКВыполнениюЗадачи.Заголовок = НСтр("ru = 'Перейти к регистрации'");
		Иначе
			Элементы.ДекорацияЗадач.Заголовок = НСтр("ru = 'Мероприятие у Вас на обработке результата регистрации'");
			Элементы.ПерейтиКВыполнениюЗадачи.Заголовок = НСтр("ru = 'Перейти к обработке результата'");
		КонецЕсли;
		
	ИначеЕсли ДействияКлиентСервер.ЭтоДействиеСогласования(СтрокаДействия.Действие) Тогда
		
		Если Не ЭтоОбработатьРезультат Тогда
			Элементы.ДекорацияЗадач.Заголовок = НСтр("ru = 'Мероприятие у Вас на согласовании'");
			Элементы.ПерейтиКВыполнениюЗадачи.Заголовок = НСтр("ru = 'Перейти к согласованию'");
		Иначе
			Элементы.ДекорацияЗадач.Заголовок = НСтр("ru = 'Мероприятие у Вас на обработке результата согласования'");
			Элементы.ПерейтиКВыполнениюЗадачи.Заголовок = НСтр("ru = 'Перейти к обработке результата'");
		КонецЕсли;
		
	ИначеЕсли ДействияКлиентСервер.ЭтоДействиеУтверждения(СтрокаДействия.Действие) Тогда
		
		Если Не ЭтоОбработатьРезультат Тогда
			Элементы.ДекорацияЗадач.Заголовок = НСтр("ru = 'Мероприятие находится у Вас на утверждении'");
			Элементы.ПерейтиКВыполнениюЗадачи.Заголовок = НСтр("ru = 'Перейти к утверждению'");
		Иначе
			Элементы.ДекорацияЗадач.Заголовок = НСтр("ru = 'Мероприятие у Вас на обработке результата утверждения'");
			Элементы.ПерейтиКВыполнениюЗадачи.Заголовок = НСтр("ru = 'Перейти к обработке результата'");
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаписьКонтроля(ПредметКонтроля = Неопределено)
	
	Если ЗначениеЗаполнено(ПредметКонтроля) 
		И ДействияКлиентСервер.ЭтоДействие(ПредметКонтроля) Тогда
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредметКонтроля, "Предмет") = Объект.Ссылка Тогда
			ПрочитатьДействия();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОбзорДокумента.ВывестиКартинкуКонтроля(ЭтотОбъект);
	РабочаяГруппаОбновитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьШаблоныДляАвтоЗапуска()
	
	НастройкиАвтозапускаОбработки  
		= ДействияСервер.НастройкиАвтозапускаОбработки(Объект.Ссылка);
		
	Если ЗначениеЗаполнено(НастройкиАвтозапускаОбработки) Тогда	
		ВидИнтерактивногоСобытияАвтозапускаОбработки = НастройкиАвтозапускаОбработки.ВидИнтерактивногоСобытия;	
		УсловияЗапуска.Загрузить(НастройкиАвтозапускаОбработки.УсловияЗапуска);
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВопросаОПерезаполненииОбработки(РезультатВопроса, ПараметрыЗаписи) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаписи.Вставить("ПоказаноПредупреждениеОПерезаполненииОбработки", Истина);
		Записать(ПараметрыЗаписи);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыВидаОбъекта()
	
	ПараметрыВидаОбъекта = ДействияСервер.ПараметрыВидаОбъекта(Объект.ВидМероприятия);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДействиеВПредмете()
	 
	ПрочитатьДействия(Истина);
	ОбновитьСостоянияМероприятия();
			
КонецПроцедуры

&НаКлиенте
Функция ПредложитьОтправитьПриглашение()
	
	Если Не ПредложитьОтправитьПриглашение
		Или ЗначениеЗаполнено(СостояниеПриглашений)
		Или Не ЗначениеЗаполнено(Объект.Ссылка)
		Или Объект.ПометкаУдаления Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПредложитьОтправитьПриглашение = Ложь;
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(
		"ПредложитьОтправитьПриглашениеЗавершение",
		ЭтотОбъект);
	
	ОбщегоНазначенияДокументооборотКлиент.ПоказатьВопросДаНет(
		ОписаниеОповещенияОЗавершении,
		НСтр("ru = 'Приглашения не отправлены. Отправить приглашения?'"));
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПредложитьОтправитьПриглашениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	
	ПриглашенияОтправлены = УправлениеМероприятиямиКлиент.ОтправитьПриглашения(Объект.Ссылка);
	Если Не ПриглашенияОтправлены Тогда
		Возврат;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовок()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		АвтоЗаголовок = Ложь;
		Заголовок = Строка(Объект.Ссылка);
		
	Иначе
		
		АвтоЗаголовок = Истина;
		Заголовок = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиОбзора()
	
	НастройкаИспользоватьОбзорДокументов = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "ИспользоватьОбзорДокументов");
	Если НастройкаИспользоватьОбзорДокументов = Неопределено Тогда 
		ИспользоватьОбзорОбъектов = Истина;
	Иначе
		ИспользоватьОбзорОбъектов = НастройкаИспользоватьОбзорДокументов;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ИспользоватьОбзорОбъектов = Ложь;
	КонецЕсли;
	
	ИспользоватьПредпросмотрФайловОбщая = ПолучитьФункциональнуюОпцию("ИспользоватьПредпросмотрФайлов");
	ИспользоватьПредпросмотрФайловЛичная =
		ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "ИспользоватьПредпросмотрФайлов");
		
	Если ИспользоватьПредпросмотрФайловЛичная = Неопределено Тогда
		ИспользоватьПредпросмотрФайловЛичная = Истина;
	КонецЕсли;
	
	ИспользоватьПредпросмотрФайлов = 
		ИспользоватьОбзорОбъектов И ИспользоватьПредпросмотрФайловОбщая И ИспользоватьПредпросмотрФайловЛичная;
	
	Если ИспользоватьОбзорОбъектов Тогда 
		Элементы.СтраницаОбзор.Видимость = Истина;
		Элементы.ГруппаФайлы.Видимость = Ложь;
	Иначе	
		Элементы.СтраницаОбзор.Видимость = Ложь;
		Элементы.ГруппаФайлы.Видимость = Истина;
	КонецЕсли;
	
	Если ЭтоМобильныйКлиент Тогда
		Элементы.МК_КнопкаСтраницаОбзор.Видимость = Элементы.СтраницаОбзор.Видимость;
		Элементы.МК_КнопкаСтраницаФайлы.Видимость = Элементы.ГруппаФайлы.Видимость;
	КонецЕсли;
	
	ОбзорОбъектов.УстановитьУсловноеОформлениеДереваОбзора(
		УсловноеОформление,
		Элементы.ДеревоОбзора.Имя);
	
	ПолеPDFРаботаетВВебКлиенте = РаботаСPDFПовтИсп.ПолеPDFРаботаетВВебКлиенте();
	ПоказыватьPdfСредствами1С = РаботаСФайламиСлужебныйПовтИсп.ПоказыватьPdfСредствами1С();  
	МаксимальноеЧислоСтраницДляПредпросмотра = ОбзорФайловСервер.МаксимальноеЧислоСтраницДляПредпросмотра();
	
	СоздатьКнопкиПорционногоПредпросмотра();
	
	ВсегоПорцийПредпросмотра = 1;
	НомерПорции = 1;
	ОбновитьКнопкиДинамическогоСписка();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоОбзораНаСервере()
	
	Если Не ИспользоватьОбзорОбъектов Тогда
		Возврат;
	КонецЕсли;
	
	ОбзорОбъектов.ОбновитьДеревоОбзора(
		Объект.Ссылка,
		ДеревоОбзора,
		Элементы.ДеревоОбзора,
		Элементы.ДеревоОбзораПредставление,
		ПоказатьПомеченныеНаУдаление);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтрокуДереваОбзора(НоваяТекущаяСтрока)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСтроки", НоваяТекущаяСтрока);
	НайденнаяСтрока = ОбщегоНазначенияДокументооборотКлиентСервер.НайтиСтрокуДерева(
		ДеревоОбзора,
		СтруктураОтбора);
	
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ДеревоОбзора.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаСервере
Процедура ОткрытьЗапрошеннуюСтраницу()
	
	Если Параметры.ОткрытьЗакладкуФайлы И ИспользоватьОбзорОбъектов Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбзор;

		Если ЭтоМобильныйКлиент Тогда
			МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.СтраницаОбзор, Элементы.МК_КнопкаСтраницаОбзор);
		КонецЕсли;

	ИначеЕсли Параметры.ОткрытьЗакладкуФайлы И Не ИспользоватьОбзорОбъектов Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаФайлы;

		Если ЭтоМобильныйКлиент Тогда
			МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.ГруппаФайлы, Элементы.МК_КнопкаСтраницаФайлы);
		КонецЕсли;

	ИначеЕсли Параметры.ОткрытьЗакладкуКатегории Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.Категории;

		Если ЭтоМобильныйКлиент Тогда
			МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.Категории, Элементы.МК_КнопкаСтраницаКатегории);
		КонецЕсли;

	ИначеЕсли Параметры.ОткрытьЗакладкуОбработка Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбработка;

		Если ЭтоМобильныйКлиент Тогда
			МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.СтраницаОбработка, Элементы.МК_КнопкаСтраницаОбработка);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОбзор()
	
	ПоказатьОбзорТекущегоФайла();
	УстановитьВидимостьСтраницОбзораФайла();
	
	Если ЭтоМобильныйКлиент Тогда
		МК_КлиентСервер.АдаптироватьHtmlПодЭкранМобильногоПриНеобходимости(ОбзорHTML);
		МК_КлиентСервер.АдаптироватьHtmlПодЭкранМобильногоПриНеобходимости(ТаймлистАвтопротоколHTML);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОбзорТекущегоФайла()
	
	ТекущиеДанные = Элементы.ДеревоОбзора.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.КлючСтроки = ТекущийОбъектОбзора
		И ТекущиеДанные.ВерсияДанных = ТекущиаяВерсияОбъектОбзора
		И ТекущиеДанные.ДанныеОбъекта <> Неопределено
			И Не ТаймлистКлиентСервер.ЭтоРасширениеФайлаТаймлист(ТекущиеДанные.ДанныеОбъекта.ТекущаяВерсияРасширение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьПредпросмотрФайлов
		И ТипЗнч(ТекущиеДанные.КлючСтроки) = Тип("СправочникСсылка.Файлы")
		И ЗначениеЗаполнено(ТекущиеДанные.КлючСтроки) Тогда
		
		ДанныеФайла = ТекущиеДанные.ДанныеОбъекта;
		
		Если ДанныеФайла.РедактируетТекущийПользователь Тогда
			 
			ОбзорHTML = ОбзорФайловКлиентСервер.HTMLПредставлениеПриРедактировании();
			Элементы.КартинкаОбзорУрезан.Видимость = Ложь;
			Элементы.НадписьОбзорУрезан.Видимость = Ложь;
			УстановитьВидимостьКомандМасштаба("");
			Элементы.СтраницыОбзора.ТекущаяСтраница = Элементы.СтраницаОбзорHTML;
			
			ТекущийОбъектОбзора = ТекущиеДанные.КлючСтроки;
			ТекущиаяВерсияОбъектОбзора = ТекущиеДанные.ВерсияДанных;
			УстановленОбзорДолгогоФормирования = Ложь;
			
		ИначеЕсли ОбзорФайловКлиент.ЭтоФайлСДолгойОбработкой(ДанныеФайла.Расширение)
				И Не ДанныеФайла.ПредпросмотрЕстьВБазе
				И Не УстановленОбзорДолгогоФормирования Тогда
			
			ОбзорHTML = ОбзорФайловКлиент.HTMLПредставлениеСДолгойОбработкой();
			Элементы.КартинкаОбзорУрезан.Видимость = Ложь;
			Элементы.НадписьОбзорУрезан.Видимость = Ложь;
			УстановитьВидимостьКомандМасштаба("");
			Элементы.СтраницыОбзора.ТекущаяСтраница = Элементы.СтраницаОбзорHTML;
			
			ТекущийОбъектОбзора = Неопределено;
			ТекущиаяВерсияОбъектОбзора = Неопределено;
			УстановленОбзорДолгогоФормирования = Истина;
			
			ПодключитьОбработчикОжидания("ОбновитьОбзор", 0.2, Истина);
			
		Иначе
			
			ДокументPDF = Неопределено;
			
			ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();
			ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
			ПараметрыHTMLПредставление.Расширение = ДанныеФайла.Расширение;
			ПараметрыHTMLПредставление.Размер = ДанныеФайла.ТекущаяВерсияРазмер;
			ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
			
			ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
				ТекущиеДанные.КлючСтроки, 
				ПараметрыHTMLПредставление,
				ДокументPDF,
				ВыполняетсяРаспознавание);
			
			ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ОбзорHTML, ТаймлистАвтопротоколHTML,
				РаспознанныйТекстHTML);
			
			Элементы.КартинкаОбзорУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
			Элементы.НадписьОбзорУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
			МасштабироватьPDFИКартинки = ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки;
			
			ДанныеФайла.ПредпросмотрЕстьВБазе = Истина;
			УстановитьВидимостьКомандМасштаба(ДанныеФайла.Расширение);
			
			НомерПорции = 1;
			ВсегоПорцийПредпросмотра = ПараметрыHTMLПредставление.ВсегоПорцийПредпросмотра;
			ОбновитьКнопкиДинамическогоСпискаКлиент();
			
			Если ДокументPDF = Неопределено Или ЭтоМобильныйКлиент Тогда
				Элементы.СтраницыОбзора.ТекущаяСтраница = Элементы.СтраницаОбзорHTML;
			Иначе
				Элементы.СтраницыОбзора.ТекущаяСтраница = Элементы.СтраницаОбзорPDF;
				ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
				Элементы.ДокументPdfПоле.НомерТекущейСтраницы = 1;
			КонецЕсли;
			
			ТекущийОбъектОбзора = ТекущиеДанные.КлючСтроки;
			ТекущиаяВерсияОбъектОбзора = ТекущиеДанные.ВерсияДанных;
			УстановленОбзорДолгогоФормирования = Ложь;
			
			ОжидатьРаспознаванияПриНеобходимости(ТекущиеДанные.КлючСтроки);
			
		КонецЕсли;
		
	ИначеЕсли ОбзорОбъектовКлиентСервер.ЭтоИзвестныйОбъектОбзора(ТекущиеДанные.КлючСтроки) Тогда
		
		ДанныеОбзораОбъекта = ОбзорОбъектовКлиент.ДанныеОбзораОбъекта(
			ТекущиеДанные.КлючСтроки,
			УникальныйИдентификатор);
		ОбзорHTML = ДанныеОбзораОбъекта.ТекстHTML;  
		
		Элементы.ПереключениеСтраниц.Видимость = Ложь;
		
		Элементы.КартинкаОбзорУрезан.Видимость = Ложь;
		Элементы.НадписьОбзорУрезан.Видимость = Ложь;
		УстановитьВидимостьКомандМасштаба("");
		Элементы.СтраницыОбзора.ТекущаяСтраница = Элементы.СтраницаОбзорHTML;
		ТекущийОбъектОбзора = ТекущиеДанные.КлючСтроки;
		ТекущиаяВерсияОбъектОбзора = ТекущиеДанные.ВерсияДанных;
		УстановленОбзорДолгогоФормирования = Ложь;
		
	Иначе
		
		ДанныеОбзораОбъекта = ОбзорОбъектовКлиент.ДанныеОбзораОбъекта(
			Объект.Ссылка,
			УникальныйИдентификатор);
		ОбзорHTML = ДанныеОбзораОбъекта.ТекстHTML;      
		
		Элементы.ПереключениеСтраниц.Видимость = Ложь;
		
		Элементы.КартинкаОбзорУрезан.Видимость = Ложь;
		Элементы.НадписьОбзорУрезан.Видимость = Ложь;
		УстановитьВидимостьКомандМасштаба("");
		Элементы.СтраницыОбзора.ТекущаяСтраница = Элементы.СтраницаОбзорHTML;
		ТекущийОбъектОбзора = Объект.Ссылка;
		ТекущиаяВерсияОбъектОбзора = Объект.ВерсияДанных;
		УстановленОбзорДолгогоФормирования = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКомандМасштаба(Расширение)
	
	Если ОбзорФайловКлиентСервер.ЭтоКартинка(Расширение) Или ОбзорФайловКлиентСервер.ЭтоPDF(Расширение) Тогда
		
		Если МасштабироватьPDFИКартинки Тогда
			
			Элементы.ОбзорHTMLКонтекстноеМенюНастоящийРазмер.Видимость = Истина;
			Элементы.ОбзорHTMLКонтекстноеМенюПоШиринеОкна.Видимость = Ложь;
			
		Иначе
				
			Элементы.ОбзорHTMLКонтекстноеМенюНастоящийРазмер.Видимость = Ложь;
			Элементы.ОбзорHTMLКонтекстноеМенюПоШиринеОкна.Видимость = Истина;
			
		КонецЕсли;
	
	Иначе
			
		Элементы.ОбзорHTMLКонтекстноеМенюНастоящийРазмер.Видимость = Ложь;
		Элементы.ОбзорHTMLКонтекстноеМенюПоШиринеОкна.Видимость = Ложь;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфераЗавершение(Результат, ПутьКФайлу) Экспорт
	
	Если Результат = Истина Тогда
		
		Если Не ПустаяСтрока(ПутьКФайлу) Тогда
			
			НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
			РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(
				ПутьКФайлу, Объект.Ссылка, ЭтотОбъект, НеОткрыватьКарточкуПослеСозданияИзФайла);
				
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Буфер обмена не содержит картинки'"));
		КонецЕсли;
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийФайл(НоваяТекущаяСтрока)
	
	Если ИспользоватьОбзорОбъектов Тогда
		
		УстановитьТекущуюСтрокуДереваОбзора(НоваяТекущаяСтрока);
		
	Иначе
		
		Элементы.Файлы.ТекущаяСтрока = НоваяТекущаяСтрока;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ТекущийФайл()
	
	ТекущийФайл = Неопределено;
	
	Если ИспользоватьОбзорОбъектов Тогда
		
		Если Элементы.ДеревоОбзора.ТекущиеДанные <> Неопределено Тогда
			ТекущийФайл = Элементы.ДеревоОбзора.ТекущиеДанные.КлючСтроки;
		КонецЕсли;
		
	Иначе
		
		ТекущийФайл = Элементы.Файлы.ТекущаяСтрока;
		
	КонецЕсли;
	
	Если ТипЗнч(ТекущийФайл) <> Тип("СправочникСсылка.Файлы") Тогда
		ТекущийФайл = Неопределено;
	КонецЕсли;
	
	Возврат ТекущийФайл;
	
КонецФункции

&НаКлиенте
Функция ТекущиеДанныеФайла()
	
	ТекущиеДанныеФайла = Неопределено;
	
	ТекущийФайл = ТекущийФайл();
	Если ТекущийФайл = Неопределено Тогда
		Возврат ТекущиеДанныеФайла;
	КонецЕсли;
	
	Если ИспользоватьОбзорОбъектов Тогда
		
		Если Элементы.ДеревоОбзора.ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанныеФайла = Элементы.ДеревоОбзора.ТекущиеДанные.ДанныеОбъекта;
		КонецЕсли;
		
	Иначе
		
		ТекущиеДанныеФайла = Элементы.Файлы.ТекущиеДанные;
		
	КонецЕсли;
	
	Возврат ТекущиеДанныеФайла;
	
КонецФункции

&НаКлиенте
Функция ВыделенныеФайлы()
	
	ВыделенныеФайлы = Новый Массив;
	
	ТекущийФайл = ТекущийФайл();
	Если ТекущийФайл = Неопределено Тогда
		Возврат ВыделенныеФайлы;
	КонецЕсли;
	
	Если ИспользоватьОбзорОбъектов Тогда
		
		Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоОбзора.ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Элементы.ДеревоОбзора.ДанныеСтроки(ВыделеннаяСтрока);
			
			Если ТипЗнч(ДанныеСтроки.КлючСтроки) = Тип("СправочникСсылка.Файлы") Тогда
				ВыделенныеФайлы.Добавить(ДанныеСтроки.КлючСтроки);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Элементы.ДеревоОбзора.ВыделенныеСтроки <> Неопределено Тогда
			ТекущийФайл = Элементы.ДеревоОбзора.ТекущиеДанные.КлючСтроки;
		КонецЕсли;
		
	Иначе
		
		Для Каждого ВыбраннаяСтрока Из Элементы.Файлы.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);
			ВыделенныеФайлы.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ВыделенныеФайлы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыделенныеФайлыТаймлист(ВыделенныеФайлы)
	
	ФайлыТаймлист = Новый СписокЗначений;
	РасширенияФайлов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВыделенныеФайлы, "ТекущаяВерсияРасширение");
	
	Для Каждого Расширение Из РасширенияФайлов Цикл
		Если ТаймлистКлиентСервер.ЭтоРасширениеФайлаТаймлист(Расширение.Значение) Тогда
			ФайлыТаймлист.Добавить(Расширение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ФайлыТаймлист;
	
КонецФункции

&НаКлиенте
Процедура ПослеРаспознавания(Результат, ПараметрыВыполнения) Экспорт
	
	ОбновитьФайлы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеНачалаРасшифровки(Результат, ПараметрыВыполнения) Экспорт
	
	ОбновитьФайлы();
	УстановитьДоступностьКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУказанияКоличестваСпикеров(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ВыделенныеФайлы.Количество() > 1 Тогда
		КомандыРаботыСФайламиКлиент.РаспознатьФайлСОповещением(ДополнительныеПараметры.Обработчик,
			ДополнительныеПараметры.ВыделенныеФайлы,, Результат);
	Иначе
		КомандыРаботыСФайламиКлиент.РаспознатьФайлСОповещением(ДополнительныеПараметры.Обработчик,
			ДополнительныеПараметры.ВыделенныеФайлы[0],, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФайлы()
	
	Если ИспользоватьОбзорОбъектов Тогда
		
		ОбновитьДеревоОбзораНаСервере();
		
	Иначе
		
		Элементы.Файлы.Обновить();
		НайтиИПоказатьКоличествоФайлов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортФайловПослеУстановкиРасширения(Результат, ПараметрыВыполнения) Экспорт
	
	Если НЕ ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСФайлами(Неопределено);
		Возврат;
	КонецЕсли;
		
	РаботаСФайламиКлиент.ВыполнитьИмпортФайловСОткрытиемФормыИмпорта(Объект.Ссылка);
		
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОповеститьОбИзменении(ПараметрыВыполнения.Ссылка);
	Оповестить("ПрисоединенныйФайлПодписан", ПараметрыВыполнения.ВладелецФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭПИзФайлаЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	УстановитьДоступностьКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗашифроватьПослеШифрованияНаКлиенте(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяРабочегоКаталога = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	ЕстьЗашифрованныеИлиЗанятыеФайлы = Неопределено;
	
	ЗашифроватьСервер(
		Результат.МассивДанныхДляЗанесенияВБазу,
		Результат.МассивОтпечатков,
		МассивФайловВРабочемКаталогеДляУдаления,
		ИмяРабочегоКаталога,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	РаботаСФайламиКлиент.ИнформироватьОШифровании(
		МассивФайловВРабочемКаталогеДляУдаления,
		ПараметрыВыполнения.ДанныеФайла.Владелец,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	УстановитьДоступностьКоманд();
	
КонецПроцедуры

&НаСервере
Процедура ЗашифроватьСервер(МассивДанныхДляЗанесенияВБазу, МассивОтпечатков, 
	МассивФайловВРабочемКаталогеДляУдаления,
	ИмяРабочегоКаталога, ОбъектСсылка, ЕстьЗашифрованныеИлиЗанятыеФайлы)
	
	Зашифровать = Истина;
	РаботаСФайламиВызовСервера.ЗанестиИнформациюОШифровании(
		ОбъектСсылка,
		Зашифровать,
		МассивДанныхДляЗанесенияВБазу,
		Неопределено,  // УникальныйИдентификатор
		ИмяРабочегоКаталога,
		МассивФайловВРабочемКаталогеДляУдаления,
		МассивОтпечатков);
	
	СсылкаВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "ВладелецФайла");
	ЕстьЗашифрованныеИлиЗанятыеФайлы = РаботаСФайламиВызовСервера.ЕстьЗашифрованныеИлиЗанятыеФайлы(СсылкаВладелецФайла);	
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПослеРасшифровкиНаКлиенте(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяРабочегоКаталога = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	
	ЕстьЗашифрованныеИлиЗанятыеФайлы = Неопределено;
	
	РасшифроватьСервер(
		Результат.МассивДанныхДляЗанесенияВБазу,
		ИмяРабочегоКаталога,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	РаботаСФайламиКлиент.ИнформироватьОРасшифровке(
		ПараметрыВыполнения.ДанныеФайла.Владелец,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	УстановитьДоступностьКоманд();
	
КонецПроцедуры

&НаСервере
Процедура РасшифроватьСервер(МассивДанныхДляЗанесенияВБазу, 
	ИмяРабочегоКаталога, ОбъектСсылка, ЕстьЗашифрованныеИлиЗанятыеФайлы)
	
	Зашифровать = Ложь;
	МассивОтпечатков = Новый Массив;
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	
	РаботаСФайламиВызовСервера.ЗанестиИнформациюОШифровании(
		ОбъектСсылка,
		Зашифровать,
		МассивДанныхДляЗанесенияВБазу,
		Неопределено,  // УникальныйИдентификатор
		ИмяРабочегоКаталога,
		МассивФайловВРабочемКаталогеДляУдаления,
		МассивОтпечатков);
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиНаСервере(Знач ВыделенныеФайлы)
	
	ОбщегоНазначенияДокументооборот.СкопироватьФайлыВБуферОбменаИзСпискаФайлов(ВыделенныеФайлы);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ЧислоФайлов)
	
	Если ОбщегоНазначения.ПустойБуферОбмена() Тогда
		Возврат;
	КонецЕсли;	
	
	ДанныеИзБуфераОбмена = ОбщегоНазначения.СтрокиИзБуфераОбмена();
	МассивФайлов = ДанныеИзБуфераОбмена.Данные;
	
	ЧислоФайлов = МассивФайлов.Количество();
	
	ВладелецФайла = Объект.Ссылка;
	
	РаботаСФайламиВызовСервера.СкопироватьФайлы(МассивФайлов, ВладелецФайла);
	ОбновитьФайлы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПослеВопросаОВозможностиОтсутствия(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьОтсутствие = Ложь;
	Если Записать(ПараметрыЗаписи) Тогда
		
		Если ПараметрыЗаписи.Свойство("ЗакрытьПослеЗаписи") И Не ПараметрыЗаписи.ЗакрытьПослеЗаписи Тогда
			Возврат;
		КонецЕсли;
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОбъектЕстьВДеревеОбзора(КлючСтроки)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("КлючСтроки", КлючСтроки);
	НайденнаяСтрока = ОбщегоНазначенияДокументооборотКлиентСервер.НайтиСтрокуДерева(
		ДеревоОбзора,
		СтруктураОтбора);
	
	ОбъектЕстьВДеревеОбзора = НайденнаяСтрока <> Неопределено;
	
	Возврат ОбъектЕстьВДеревеОбзора;
	
КонецФункции

&НаСервере
Процедура ВывестиPDFДокументНаСервере()
	
	СведенияОДокументеPDF = РаботаСPDFПовтИсп.НовыеСведенияОPDFДокументеНаФорме();
	СведенияОДокументеPDF.ИмяРодителяЭлемента = "СтраницаОбзорPDF";
	СведенияОДокументеPDF.ИмяРодителяКоманды = "ГруппаОбзорФайлаКоманды";
	
	РаботаСPDF.ВывестиPDFДокументНаФорму(ЭтотОбъект, СведенияОДокументеPDF);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьЗаполнитьПунктПротокола(ПараметрыЗаполнения)
	
	ПунктПротокола = Справочники.ПротоколыМероприятий.СоздатьЭлемент();
	
	ЗаполнитьЗначенияСвойств(ПунктПротокола, ПараметрыЗаполнения);
	ПунктПротокола.СостояниеИсполненияУстановил = Сотрудники.ОсновнойСотрудник();
	ПунктПротокола.СостояниеИсполнения = Перечисления.СостоянияПротоколовМероприятий.ТребуетсяИсполнение;
	
	ПунктПротокола.Записать();
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции_МобильныйКлиент

&НаСервере
Процедура МК_НастроитьЭлементыФормы()
	
	// Общее.
	СворачиваниеЭлементовПоВажности = СворачиваниеЭлементовФормыПоВажности.НеИспользовать;
	ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;

	МК_ЭлементыСтиля = МК_ПовтИсп.ЭлементыСтиля();

	Элементы.ФормаЗаписать.Отображение = ОтображениеКнопки.Картинка;
	МК.ПреобразоватьКнопкуВАкцентную(ЭтотОбъект, МК_ПовтИсп.ЭлементыСтиля(), Элементы.ФормаЗаписатьИЗакрыть);
	
	// Переключатели страниц.
	МК_НастроитьПереключательСтраниц();
	
	// Страница "Обзор".
	МК_НастроитьСтраницуОбзор();
	
	// Страница "Мероприятие".
	МК_НастроитьСтраницуМероприятие();
	
	// Страница "Участники".
	МК_НастроитьСтраницуУчастники();
	
	// Страница "Программа".
	МК_НастроитьСтраницуПрограмма();
	
	// Страница "Обработка".
	МК_НастроитьСтраницуОбработка();
	
	// Страница "Протокол".	
	МК_НастроитьСтраницуПротокол();
	
	// Страница "Файлы".
	МК_НастроитьСтраницуФайлы();
	
	// Страница "Категории".
	МК_НастроитьСтраницуКатегории();
	
	// Страница "Доступ".
	МК_НастроитьСтраницуДоступ();
	
КонецПроцедуры

&НаСервере
Процедура МК_НастроитьСтраницуОбзор()

	Элементы.МК_ДеревоОбзора.Видимость = Истина;
	Элементы.СтраницаОбзор.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;

	Элементы.Переместить(Элементы.ДеревоОбзора, Элементы.МК_ДеревоОбзора);

	Элементы.Переместить(
		Элементы.ДеревоОбзораСоздатьФайл, Элементы.МК_ДеревоОбзораКоманднаяПанель, Элементы.МК_ЗаписатьМероприятие);
		
	Элементы.ДеревоОбзора.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	Элементы.ДеревоОбзора.ИспользованиеТекущейСтроки = ИспользованиеТекущейСтрокиТаблицы.ОтображениеВыделенияИВыбор;
	Элементы.ДеревоОбзора.Шапка = Ложь;

	Элементы.ДеревоОбзора.ВариантУправленияВысотой = ВариантУправленияВысотойТаблицы.ПоСодержимому;
	Элементы.ДеревоОбзора.АвтоМаксимальнаяВысота = Ложь;
	Элементы.ДеревоОбзора.АвтоМаксимальнаяВысотаВСтрокахТаблицы = Ложь;

	Элементы.ДеревоОбзора.ВысотаВСтрокахТаблицы = 3;
	Элементы.ДеревоОбзора.МаксимальнаяВысотаВСтрокахТаблицы = 3;
	Элементы.ДеревоОбзора.Высота = 3;
	Элементы.ДеревоОбзора.МаксимальнаяВысота = 3;

	МК_КлиентСервер.ОформитьКнопкуФильтра(МК_ЭлементыСтиля, Элементы.ДеревоОбзораСоздатьФайл);
	МК_КлиентСервер.ОформитьКнопкуФильтра(МК_ЭлементыСтиля, Элементы.МК_ЗаписатьМероприятие);
	
	МК.ОформитьКнопкуСворачиваемойГруппы(Элементы.МК_ПоказатьСкрытьДеревоОбзора, Элементы.ДеревоОбзора.Видимость);
	
	Элементы.СтраницаОбзорHTML.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	
	// Группа задача.
	Элементы.ГруппаЗадач.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Элементы.ДекорацияЗадач.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;
	Элементы.ПерейтиКВыполнениюЗадачи.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;
	
	// Группа напомнить.
	Элементы.ГруппаНапоминаниеОтносительноДатыНачала.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	Элементы.УстановитьНапоминание.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	Элементы.ИнтервалВремениСтрокой.Ширина = 8;
	
	Элементы.ГруппаСостояния.Видимость = Ложь;
	
	МК_КлиентСервер.АдаптироватьHtmlПодЭкранМобильногоПриНеобходимости(ОбзорHTML);
	МК_КлиентСервер.АдаптироватьHtmlПодЭкранМобильногоПриНеобходимости(ТаймлистАвтопротоколHTML);
	
	Элементы.МК_КнопкаСтраницаАвтопротокол.Видимость = Элементы.СтраницаТаймлистАвтопротокол.Видимость;
	Элементы.МК_КнопкаСтраницаРасшифровка.Видимость = Элементы.СтраницаТаймлистАвтопротокол.Видимость;
	Элементы.СтраницыОбзора.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;

КонецПроцедуры

&НаСервере
Процедура МК_НастроитьСтраницуМероприятие()
	
	Элементы.Описание.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	Элементы.СостояниеТекст.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	Элементы.СостояниеТекст.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;

	Для Каждого Элемент Из Элементы.ГруппаПраваяКолонка.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда
			МК.ВыровнятьЭлементФормы(Элемент);
		КонецЕсли;
	КонецЦикла;

	Элементы.ГруппаНачало.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	Элементы.ГруппаОкончание.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;

	Элементы.ДатаНачалаВремя.РастягиватьПоГоризонтали = Ложь;
	Элементы.ДатаНачалаВремя.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
	Элементы.ДатаНачала.РастягиватьПоГоризонтали = Истина;
	Элементы.ДатаНачала.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;

	Элементы.ДатаОкончанияВремя.РастягиватьПоГоризонтали = Ложь;
	Элементы.ДатаОкончанияВремя.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
	Элементы.ДатаОкончания.РастягиватьПоГоризонтали = Истина;
	Элементы.ДатаОкончания.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;

	Элементы.ПредставлениеМестногоЧасовогоПояса.Видимость = Ложь;
	Элементы.ОсталосьДоНачала.Видимость = Ложь;
	Элементы.ДлительностьСтр.Видимость = Ложь;
	
	// Дополнительные реквзиты в группу основной страницы.
	ГруппаДополнительно = Элементы.МК_ГруппаДополнительно;
	
	ГруппаДополнительно.Видимость = Истина;
	Элементы.Переместить(Элементы.ГруппаНачалоФакт, ГруппаДополнительно);
	Элементы.Переместить(Элементы.ГруппаОкончаниеФакт, ГруппаДополнительно);
	Элементы.Переместить(Элементы.Организация, ГруппаДополнительно);
	Элементы.Переместить(Элементы.Проект, ГруппаДополнительно);
	Элементы.Переместить(Элементы.Куратор, ГруппаДополнительно);
	Элементы.Переместить(Элементы.Подготовил, ГруппаДополнительно);
	Элементы.Переместить(Элементы.Подразделение, ГруппаДополнительно);
	Элементы.Переместить(Элементы.ПредыдущееМероприятие, ГруппаДополнительно);
	Элементы.Переместить(Элементы.СледующееМероприятие, ГруппаДополнительно);
	
	Для Каждого Элемент Из Элементы.СтраницаДополнительно.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда
			МК.ВыровнятьЭлементФормы(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ГруппаНачалоФакт.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	Элементы.ГруппаОкончаниеФакт.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;

	Элементы.ДатаНачалаВремяФакт.РастягиватьПоГоризонтали = Ложь;
	Элементы.ДатаНачалаВремяФакт.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
	Элементы.ДатаНачалаФакт.РастягиватьПоГоризонтали = Истина;
	Элементы.ДатаНачалаФакт.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;

	Элементы.ДатаОкончанияВремяФакт.РастягиватьПоГоризонтали = Ложь;
	Элементы.ДатаОкончанияВремяФакт.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
	Элементы.ДатаОкончанияФакт.РастягиватьПоГоризонтали = Истина;
	Элементы.ДатаОкончанияФакт.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;

	Элементы.ПредставлениеМестногоЧасовогоПоясаФакт.Видимость = Ложь;

КонецПроцедуры

&НаСервере
Процедура МК_НастроитьСтраницуУчастники()
	
	Элементы.СтраницаУчастники.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	
	Элементы.ДекорацияОтступПередПодваломУчастникиМК.Видимость = Истина;
	Элементы.МК_УчастникиКоманднаяПанель.Видимость = Истина;
	
	Элементы.УчастникиДобавить.Видимость = Ложь;
	
	МК_КлиентСервер.ОформитьКнопкуФильтра(МК_ЭлементыСтиля, Элементы.УчастникиПодобрать, Истина);
	Элементы.Переместить(Элементы.УчастникиПодобрать, Элементы.МК_УчастникиКоманднаяПанель);
	
	Элементы.Переместить(Элементы.УчастникиОтменитьМероприятие, Элементы.Участники.КонтекстноеМеню);
	Элементы.Переместить(Элементы.УчастникиПодобратьВремя, Элементы.Участники.КонтекстноеМеню);
	Элементы.Переместить(Элементы.УчастникиПроверитьДоступностьУчастников, Элементы.Участники.КонтекстноеМеню);
	Элементы.Переместить(Элементы.УчастникиОтправитьПриглашения, Элементы.Участники.КонтекстноеМеню);
	
	Элементы.Участники.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;

	Элементы.Участники.Шапка = Ложь;
	Элементы.УчастникиГруппаКолонокМК.Видимость = Истина;
	Элементы.Переместить(Элементы.УчастникиИсполнитель, Элементы.ГруппаУчастники);
	Элементы.Переместить(Элементы.УчастникиСостояниеПриглашения, Элементы.ГруппаПриглашениеМК);

	Элементы.УчастникиГруппаИсполнитель.Видимость = Ложь;
	Элементы.УчастникиОтсутствовал.Видимость = Ложь;
	Элементы.УчастникиЯвкаОбязательна.Видимость = Ложь;
	Элементы.УчастникиИсполнитель.Высота = 1;

КонецПроцедуры

&НаСервере
Процедура МК_НастроитьСтраницуПрограмма()
	
	Элементы.СтраницаПрограмма.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	
	Элементы.МК_ГруппаПрограмма.Видимость = Истина;
	Элементы.Переместить(Элементы.Программа, Элементы.МК_ГруппаПрограмма);
	
	МК_КлиентСервер.ОформитьКнопкуФильтра(МК_ЭлементыСтиля, Элементы.ПрограммаДобавить);
	Элементы.Переместить(Элементы.ПрограммаДобавить, Элементы.МК_ПрограммаКоманднаяПанель);
	
	Элементы.ТипПрограммы.Видимость = Истина;
	Элементы.Переместить(Элементы.ТипПрограммы, Элементы.ГруппаПрограммаПодвал);
	МК.ВыровнятьЭлементФормы(Элементы.ТипПрограммы);
	
	Элементы.Переместить(Элементы.ГруппаПрограммаПодвал, Элементы.СтраницаПрограмма, Элементы.ГруппаТаблицаПрограмма);
	Элементы.Переместить(Элементы.ГруппаПрограмма, Элементы.ГруппаПрограммаПодвал);
	
	МК.ВыровнятьЭлементФормы(Элементы.МатериалПрограмма);
	МК_КлиентСервер.ОформитьКнопкуФильтра(МК_ЭлементыСтиля, Элементы.СоздатьПрограмму);
	Элементы.ГруппаПрограмма.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;

	Элементы.Программа.Шапка = Ложь;
	Элементы.Программа.Подвал = Ложь;
	Элементы.ГруппаКоманднаяПанельПрограмма.Видимость = Ложь;
	
	Элементы.МК_ПрограммаГруппаКолонок.Видимость = Истина;
	Элементы.Переместить(Элементы.ПрограммаСодержание, Элементы.МК_ПрограммаПерваяКолонка);
	Элементы.Переместить(Элементы.ПрограммаИсполнитель, Элементы.МК_ПрограммаПерваяКолонка);
	Элементы.Переместить(Элементы.ПрограммаВремяПлан, Элементы.МК_ПрограммаВтораяКолонка);
	Элементы.Переместить(Элементы.ПрограммаВремяФакт, Элементы.МК_ПрограммаВтораяКолонка);

	Элементы.ПрограммаНомерПункта.Видимость = Ложь;
	Элементы.ПрограммаКомментарий.Видимость = Ложь;
	Элементы.ПрограммаГруппаВремя.Видимость = Ложь;
	Элементы.ПрограммаГруппаВремяНовое.Видимость = Ложь;
	Элементы.ПрограммаРешение.Видимость = Ложь;
	
	Элементы.ПрограммаСодержание.Высота = 3;
	Элементы.ПрограммаСодержание.Ширина = 10;
	
	Элементы.ПрограммаВремяПлан.Ширина = 6;
	Элементы.ПрограммаВремяПлан.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
	Элементы.ПрограммаВремяФакт.Ширина = 6;
	Элементы.ПрограммаВремяФакт.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
	
	Элементы.ПрограммаИсполнитель.Высота = 1;
	Элементы.ПрограммаИсполнитель.Ширина = 10;
	Элементы.ПрограммаИсполнитель.ЦветТекста = ЦветаСтиля.МК_ЦветАвтораИсполнителя;
	Элементы.ПрограммаИсполнитель.Шрифт = ШрифтыСтиля.МК_ШрифтАвтораИсполнителя;
	
	Элементы.Переместить(Элементы.ПрограммаИзменить, Элементы.Программа.КонтекстноеМеню);
	Элементы.Переместить(Элементы.ПрограммаПереместитьВниз, Элементы.Программа.КонтекстноеМеню);
	Элементы.Переместить(Элементы.ПрограммаПереместитьВверх, Элементы.Программа.КонтекстноеМеню);

КонецПроцедуры

&НаСервере
Процедура МК_НастроитьСтраницуОбработка()
	
	Элементы.МК_ДействияКоманднаяПанель.Видимость = Истина;
	
	МК_КлиентСервер.ОформитьКнопкуФильтра(МК_ЭлементыСтиля, Элементы.ДействияОтправить, Истина);
	Элементы.Переместить(Элементы.ДействияОтправить, Элементы.МК_ДействияКоманднаяПанель);
	
	МК_КлиентСервер.ОформитьКнопкуФильтра(МК_ЭлементыСтиля, Элементы.ДействияОстановить, Истина);
	Элементы.Переместить(Элементы.ДействияОстановить, Элементы.МК_ДействияКоманднаяПанель);
	
	МК_КлиентСервер.ОформитьКнопкуФильтра(МК_ЭлементыСтиля, Элементы.СхемаОбработкиЕще, Истина);
	Элементы.Переместить(Элементы.СхемаОбработкиЕще, Элементы.МК_ДействияКоманднаяПанель);
	
	Элементы.Переместить(Элементы.ГруппаДействияКомПанель, Элементы.Действия.КонтекстноеМеню);
	Элементы.Переместить(Элементы.ГруппаКнопкиЗапуска, Элементы.СтраницаОбработка);
	
	Элементы.ГруппаДействияКомПанель.Заголовок = НСтр("ru = 'Еще'");
	
	Элементы.Действия.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;

	Элементы.Действия.Шапка = Ложь;
	Элементы.ДействияГруппаКолонокМК.Видимость = Истина;
	Элементы.Переместить(Элементы.ДействияПредставление, Элементы.ГруппаДействиеСотрудники);
	Элементы.Переместить(Элементы.ДействияПредставлениеСотрудники, Элементы.ГруппаДействиеСотрудники);

	Элементы.ДействияСрокПредставление.Видимость = Ложь;
	Элементы.ДействияПредставлениеРезультата.Видимость = Ложь;
	Элементы.ДействияДатаУстановкиСостояния.Видимость = Ложь;
	Элементы.ДействияСостояниеКонтроля.Видимость = Ложь;
	
	Элементы.ДействияПредставлениеСотрудники.ЦветТекста = ЦветаСтиля.МК_ЦветАвтораИсполнителя;
	Элементы.ДействияПредставлениеСотрудники.Шрифт = ШрифтыСтиля.МК_ШрифтАвтораИсполнителя;
	Элементы.ВыполнитьДействие.Отображение = ОтображениеКнопки.Текст;

КонецПроцедуры

&НаСервере
Процедура МК_НастроитьСтраницуПротокол()
	
	Элементы.СтраницаРешения.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	
	Элементы.МК_ГруппаПротокол.Видимость = Истина;
	Элементы.Переместить(Элементы.Протокол, Элементы.МК_ГруппаПротокол);
	
	МК_КлиентСервер.ОформитьКнопкуФильтра(МК_ЭлементыСтиля, Элементы.ПротоколДобавить);
	Элементы.Переместить(Элементы.ПротоколДобавить, Элементы.МК_ПротоколКоманднаяПанель);
	
	МК_КлиентСервер.ОформитьКнопкуФильтра(МК_ЭлементыСтиля, Элементы.ПротоколВзятьИзФайла, Истина);
	Элементы.Переместить(Элементы.ПротоколВзятьИзФайла, Элементы.МК_ПротоколКоманднаяПанель);

	Элементы.ТипПротокола.Видимость = Истина;
	Элементы.Переместить(Элементы.ТипПротокола, Элементы.ГруппаПротоколПодвал);
	МК.ВыровнятьЭлементФормы(Элементы.ТипПротокола);
	
	Элементы.Переместить(Элементы.ГруппаПротоколПодвал, Элементы.СтраницаРешения, Элементы.ГруппаТаблицаПротокол);
	Элементы.Переместить(Элементы.ГруппаПротокол, Элементы.ГруппаПротоколПодвал);
	
	МК.ВыровнятьЭлементФормы(Элементы.МатериалПротокол);
	МК_КлиентСервер.ОформитьКнопкуФильтра(МК_ЭлементыСтиля, Элементы.СоздатьПротокол);
	Элементы.ГруппаПротокол.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;

	Элементы.Протокол.Шапка = Ложь;
	Элементы.Протокол.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	
	Элементы.МК_ПротоколГруппаКолонок.Видимость = Истина;
	Элементы.Переместить(Элементы.ПротоколРешили, Элементы.МК_ПротоколПерваяКолонка);
	Элементы.Переместить(Элементы.ПротоколПредставлениеИсполнителей, Элементы.МК_ПротоколПерваяКолонка);
	Элементы.Переместить(Элементы.РешенияСрокИсполнения, Элементы.МК_ПротоколВтораяКолонка);

	Элементы.НомерПунктаПротокола.Видимость = Ложь;
	Элементы.ПротоколСлушали.Видимость = Ложь;
	Элементы.ПротоколВыступили.Видимость = Ложь;
	Элементы.ПротоколГруппаСостояниеИсполнения.Видимость = Ложь;
	
	Элементы.ПротоколРешили.Высота = 3;
	
	Элементы.РешенияСрокИсполнения.Ширина = 6;
	Элементы.РешенияСрокИсполнения.Формат = НСтр("ru='ДФ=''dd.MM.yy H:mm'''");
	
	Элементы.ПротоколПредставлениеИсполнителей.Высота = 1;
	Элементы.ПротоколПредставлениеИсполнителей.ЦветТекста = ЦветаСтиля.МК_ЦветАвтораИсполнителя;
	Элементы.ПротоколПредставлениеИсполнителей.Шрифт = ШрифтыСтиля.МК_ШрифтАвтораИсполнителя;

КонецПроцедуры

&НаСервере
Процедура МК_НастроитьСтраницуФайлы()
	
	Элементы.ГруппаФайлы.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	Элементы.ГруппаСписок.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	Элементы.ГруппаТаблица.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	
	// Файлы.
	Элементы.МК_ФайлыКоманднаяПанель.Видимость = Истина;
	
	МК_КлиентСервер.ОформитьКнопкуФильтра(МК_ЭлементыСтиля, Элементы.СоздатьФайл);
	Элементы.Переместить(Элементы.СоздатьФайл, Элементы.МК_ФайлыКоманднаяПанель);
	
	Элементы.Файлы.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	
	Элементы.Файлы.Шапка = Ложь;
	Элементы.ФайлыПодписан.Видимость = Ложь;
	
	// Файлы добавленные.
	Элементы.МК_ФайлыДобавленныеКоманднаяПанель.Видимость = Истина;
	
	МК_КлиентСервер.ОформитьКнопкуФильтра(МК_ЭлементыСтиля, Элементы.СоздатьДобавленныйФайл);
	Элементы.Переместить(Элементы.СоздатьДобавленныйФайл, Элементы.МК_ФайлыДобавленныеКоманднаяПанель);

	Элементы.ФайлыДобавленные.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;

	Элементы.ФайлыДобавленные.Шапка = Ложь;

КонецПроцедуры

&НаСервере
Процедура МК_НастроитьСтраницуДоступ()
	
	Элементы.МК_ДоступКоманднаяПанель.Видимость = Истина;
	
	Элементы.РабочаяГруппаТаблицаДобавить.Видимость = Ложь;
	
	МК_КлиентСервер.ОформитьКнопкуФильтра(МК_ЭлементыСтиля, Элементы.ПодобратьУчастниковРабочейГруппы, Истина);
	Элементы.Переместить(Элементы.ПодобратьУчастниковРабочейГруппы, Элементы.МК_ДоступКоманднаяПанель);
	
	Элементы.Переместить(Элементы.РабочаяГруппаПраваДоступа, Элементы.РабочаяГруппаТаблица.КонтекстноеМеню);
	Элементы.Переместить(Элементы.ПерезаполнитьРабочуюГруппуДокумента, Элементы.РабочаяГруппаТаблица.КонтекстноеМеню);
	
	Элементы.РабочаяГруппаТаблица.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	
	Элементы.СтраницаРабочаяГруппа.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	Элементы.РабочаяГруппаТаблица.Шапка = Ложь;

	Элементы.РабочаяГруппаТаблицаИзменение.Видимость = Ложь;
	Элементы.РабочаяГруппаТаблицаИконка.Видимость = Ложь;
	Элементы.РабочаяГруппаТаблицаПустаяКолонка.Видимость = Ложь;

КонецПроцедуры

&НаСервере
Процедура МК_НастроитьСтраницуКатегории()

	Элементы.Категории.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	
	Элементы.МК_КатегорииКоманднаяПанель.Видимость = Истина;
	
	МК_КлиентСервер.ОформитьКнопкуФильтра(
		МК_ЭлементыСтиля, Элементы.СписокКатегорийДанныхОткрытьФормуПодбораКатегорий, Истина);
		
	Элементы.Переместить(
		Элементы.СписокКатегорийДанныхОткрытьФормуПодбораКатегорий, Элементы.МК_КатегорииКоманднаяПанель);
	
	Элементы.Переместить(
		Элементы.СписокКатегорийДанныхОткрытьСписокОбъектовСВыбраннымиКатегориями, 
		Элементы.СписокКатегорийДанных.КонтекстноеМеню);
		
	Элементы.СписокКатегорийДанных.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;

КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПрикрепленияЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	МассивРезультатов = Результат;
	Если ТипЗнч(Результат) <> Тип("Массив") Тогда
		МассивРезультатов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Результат);
	КонецЕсли;
	
	ТекстОшибок = Новый Массив;
	
	Для Каждого ЛокальныйАдресФайла Из МассивРезультатов Цикл
		
		ПолученныйФайл = МК_Клиент.ИнформацияОбАудиоФайле(ЛокальныйАдресФайла);
		
		Если ПолученныйФайл <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(ПолученныйФайл.Ошибка) Тогда
				ТекстОшибок.Добавить(ПолученныйФайл.Ошибка);
				Продолжить;
			КонецЕсли;

			НоваяСтрока = ФайлыДобавленные.Добавить();
			НоваяСтрока.Наименование = ПолученныйФайл.Представление;
			НоваяСтрока.ПолныйПуть = ПолученныйФайл.АдресВременногоФайла;
			НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(
				ПолученныйФайл.Расширение);
			НоваяСтрока.ДобавленИзШаблона = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекстОшибок.Количество() > 0 Тогда
		ТекстСообщения = СтрСоединить(ТекстОшибок, Символы.ПС);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Записать();
	
	МК_ОбновитьЗаголовокДеревоОбзора();
	
КонецПроцедуры

&НаСервере
Процедура МК_НастроитьПереключательСтраниц()

	// Основные страницы.
	Элементы.МК_КнопкаСтраницаОбзор.Видимость = Элементы.СтраницаОбзор.Видимость;
	Элементы.МК_КнопкаСтраницаФайлы.Видимость = Элементы.ГруппаФайлы.Видимость;
	Элементы.МК_КнопкаСтраницаКатегории.Видимость = Элементы.Категории.Видимость;
	Элементы.МК_КнопкаСтраницаПротокол.Видимость = УчитыватьКакПротокольноеМероприятие;

	Элементы.МК_ГруппаПереключателиСтраниц.Видимость = Истина;
	Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.СтраницаОбзор, Элементы.МК_КнопкаСтраницаОбзор);
	
	// Страницы обзора.
	Элементы.МК_КнопкаСтраницаРасшифровка.Видимость = Элементы.СтраницаТаймлистАвтопротокол.Видимость;
	Элементы.МК_КнопкаСтраницаАвтопротокол.Видимость = Элементы.СтраницаТаймлистАвтопротокол.Видимость;
	
	Элементы.МК_ГруппаОбзорПереключателиСтраниц.Видимость = Истина;
	Элементы.СтраницыОбзора.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	МК_ПереключитьОбзорНаСтраницу(ЭтотОбъект, Элементы.СтраницаОбзорHTML, Элементы.МК_КнопкаСтраницаРасшифровка);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_ПереключитьНаСтраницу(Форма, Страница, Кнопка)

	Форма.Элементы.Страницы.ТекущаяСтраница = Страница;
	МК_СброситьОформлениеПереключателейСтраниц(Форма);
	МК_КлиентСервер.ОформитьКнопкуФильтра(Форма.МК_ЭлементыСтиля, Кнопка, Истина, Истина);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_СброситьОформлениеПереключателейСтраниц(Форма)

	МК_КлиентСервер.ОформитьКнопкуФильтра(
		Форма.МК_ЭлементыСтиля, Форма.Элементы.МК_КнопкаСтраницаОбзор, Истина, Ложь);

	МК_КлиентСервер.ОформитьКнопкуФильтра(
		Форма.МК_ЭлементыСтиля, Форма.Элементы.МК_КнопкаСтраницаМероприятие, Истина, Ложь);

	МК_КлиентСервер.ОформитьКнопкуФильтра(
		Форма.МК_ЭлементыСтиля, Форма.Элементы.МК_КнопкаСтраницаУчастники, Истина, Ложь);

	МК_КлиентСервер.ОформитьКнопкуФильтра(
		Форма.МК_ЭлементыСтиля, Форма.Элементы.МК_КнопкаСтраницаПрограмма, Истина, Ложь);

	МК_КлиентСервер.ОформитьКнопкуФильтра(
		Форма.МК_ЭлементыСтиля, Форма.Элементы.МК_КнопкаСтраницаОбработка, Истина, Ложь);

	МК_КлиентСервер.ОформитьКнопкуФильтра(
		Форма.МК_ЭлементыСтиля, Форма.Элементы.МК_КнопкаСтраницаПротокол, Истина, Ложь);

	МК_КлиентСервер.ОформитьКнопкуФильтра(
		Форма.МК_ЭлементыСтиля, Форма.Элементы.МК_КнопкаСтраницаКатегории, Истина, Ложь);

	МК_КлиентСервер.ОформитьКнопкуФильтра(
		Форма.МК_ЭлементыСтиля, Форма.Элементы.МК_КнопкаСтраницаФайлы, Истина, Ложь);

	МК_КлиентСервер.ОформитьКнопкуФильтра(
		Форма.МК_ЭлементыСтиля, Форма.Элементы.МК_КнопкаСтраницаРабочаяГруппа, Истина, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура МК_ПоказатьСкрытьДеревоОбзораПродолжение()

	Количество = ДеревоОбзора.ПолучитьЭлементы().Количество();

	Если Количество = 0 Тогда
		Элементы.ДеревоОбзора.Видимость = Ложь;
	КонецЕсли;

	МК_КлиентСервер.ОформитьПроизвольныйЭлементПоСостоянию(
		МК_ЭлементыСтиля, Элементы.МК_ПоказатьСкрытьДеревоОбзора, Элементы.ДеревоОбзора.Видимость);

	МК_КлиентСервер.УстановитьНовуюВысотуДополнительнойТаблицы(Элементы.ДеревоОбзора, Количество);

КонецПроцедуры

&НаКлиенте
Процедура МК_ОбновитьЗаголовокДеревоОбзора()

	Количество = ДеревоОбзора.ПолучитьЭлементы().Количество();

	Элементы.МК_ДеревоОбзораЗаголовок.Заголовок = СтрШаблон(
			НСтр("ru = 'Файлы (%1)'"), Формат(Количество, "ЧН=0; ЧГ="));

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_ПереключитьОбзорНаСтраницу(Форма, Страница, Кнопка)

	Форма.Элементы.СтраницыОбзора.ТекущаяСтраница = Страница;
	МК_СброситьОформлениеПереключателейСтраницОбзора(Форма);
	МК_КлиентСервер.ОформитьКнопкуФильтра(Форма.МК_ЭлементыСтиля, Кнопка, Истина, Истина);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_СброситьОформлениеПереключателейСтраницОбзора(Форма)

	МК_КлиентСервер.ОформитьКнопкуФильтра(
		Форма.МК_ЭлементыСтиля, Форма.Элементы.МК_КнопкаСтраницаАвтопротокол, Истина, Ложь);

	МК_КлиентСервер.ОформитьКнопкуФильтра(
		Форма.МК_ЭлементыСтиля, Форма.Элементы.МК_КнопкаСтраницаРасшифровка, Истина, Ложь);

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура УстановитьСоответствиеФайловИЭП()   
	
	Если ФайлыДобавленные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьПодписи = Ложь;
	Для Каждого СтрФайл Из ФайлыДобавленные Цикл
		Если РаботаСЭПКлиентСервер.ЭтоФайлПодписи(СтрФайл.Расширение) Тогда
			ЕстьПодписи = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	

	Если Не ЕстьПодписи Тогда
		Возврат;
	КонецЕсли;      
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	
	ПроверятьЭлектронныеПодписиНаСервере = МодульЭлектроннаяПодписьКлиент.ОбщиеНастройки(
		).ПроверятьЭлектронныеПодписиНаСервере;
	
	ЗаполнитьСписокФайловИзВложений();
	
	СписокФайлов = СписокФайлов();

	ИндексФайла = СписокФайлов.Количество() - 1;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СписокФайлов", СписокФайлов);
	ДополнительныеПараметры.Вставить("ИндексФайла", ИндексФайла);
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ПроверятьЭлектронныеПодписиНаСервере", ПроверятьЭлектронныеПодписиНаСервере);
	
	РаботаСЭПКлиент.УстановитьСоответствиеФайловИЭП(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция СписокФайлов()   
	
	Возврат РаботаСЭП.СписокФайлов(ЭтотОбъект);
	
КонецФункции	

&НаСервере
Процедура ЗаполнитьСписокФайловИзВложений()       
	
	РаботаСЭП.ЗаполнитьСписокФайловИзВложений(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьИзФайла_Продолжение(ВыбранноеЗначение, Параметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Элементы.ПротоколВзятьИзФайла.Пометка = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ДекорацияТекст.Заголовок = Строка(ВыбранноеЗначение.Файл);
	
	ИзвлеченныйТекст = "";
	
	Если ТаймлистИспользуется И ТаймлистКлиентСервер.ЭтоРасширениеФайлаТаймлист(ВыбранноеЗначение.Расширение) Тогда
		
		ДанныеФайла = ТаймлистВызовСервера.ДанныеФайлаДляОткрытия(ВыбранноеЗначение.Файл);
		ПунктыПротокола = СтрРазделить(ДанныеФайла.СледующиеШаги, ";");
		ПунктыДляОтображения = Новый Массив;
		НомерПункта = 1;
		Для Каждого Пункт Из ПунктыПротокола  Цикл
			ПунктыДляОтображения.Добавить(СтрШаблон("%1. %2;", НомерПункта, Пункт));
			НомерПункта = НомерПункта + 1;
		КонецЦикла;
		
		ИзвлеченныйТекст = СтрСоединить(ПунктыДляОтображения, Символы.ПС);
		
	Иначе
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ВыбранноеЗначение.Файл,, УникальныйИдентификатор);
		
		#Если ТонкийКлиент Тогда
			
			Если ОбщегоНазначенияКлиент.ЭтоWindowsКлиент() Тогда
				
				ИзвлеченныйТекст = ДействияКлиент.ПолучитьТекст(ДанныеФайла, СпособСогласованияВРежимеЗамечаний);
				
			КонецЕсли;
			
		#КонецЕсли
		
		Если Не ЗначениеЗаполнено(ИзвлеченныйТекст) Тогда
			ИзвлеченныйТекст = РаботаСФайламиВызовСервера.ПолучитьТекстФайла(ВыбранноеЗначение.Файл);
		КонецЕсли;
		
	КонецЕсли;
	
	ПоказатьТекстДляПунктов(ИзвлеченныйТекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТекстДляПунктов(ИзвлеченныйТекст)
	
	ТекстДляПунктов = СокрЛП(ИзвлеченныйТекст);
	Элементы.ГруппаТекст.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьИЗакрытьНаКлиенте();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьНаКлиенте()
	
	Если Не УчитыватьКакПротокольноеМероприятие Тогда
		Объект.Председатель = ПустаяСсылкаНаСотрудника;
		Объект.Секретарь = ПустаяСсылкаНаСотрудника;
	КонецЕсли;
	
	УстановитьМестоПроведения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ЗакрытьПослеЗаписи", Истина);
	ЗаписатьКлиент(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьДублиУчастника(Участник)
	
	КоличествоСтрокУчастника = 0;
	
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если СтрокаУчастника.Исполнитель = Участник Тогда
			КоличествоСтрокУчастника = КоличествоСтрокУчастника + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ЕстьДублиУчастника = КоличествоСтрокУчастника > 1;
	
	Возврат ЕстьДублиУчастника;
	
КонецФункции

&НаСервере
Процедура ОбновитьВидимостьКомандыЗакончитьРедактирование()
	
	Элементы.ЗакончитьРедактирование.Видимость = ЗначениеЗаполнено(Объект.Ссылка)
		И Не ЭтоМобильныйКлиент;
	
КонецПроцедуры

&НаКлиенте
Процедура КураторОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(Объект, "Куратор", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовилОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(Объект, "Подготовил", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьРаспознаванияПриНеобходимости(НовыйКлючРаспознавания) 
	
	Если Не ВыполняетсяРаспознавание Тогда
		Возврат;
	КонецЕсли;
	
	КлючРаспознавания = НовыйКлючРаспознавания;
	ПодключитьОбработчикОжидания("Подключаемый_ОжиданиеРаспознования", 5, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОжиданиеРаспознования() 
	
	ТекущиеДанные = Элементы.ДеревоОбзора.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		Или ТекущиеДанные.КлючСтроки <> КлючРаспознавания Тогда
		ВыполняетсяРаспознавание = Ложь;
	КонецЕсли;
	
	Если Не ВыполняетсяРаспознавание Тогда
		ОтключитьОбработчикОжидания("Подключаемый_ОжиданиеРаспознования");
		Возврат;
	КонецЕсли;
	
	ОбновитьОбзор();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКнопкиПорционногоПредпросмотра()
	
	ИмяРодителяКоманды = "ГруппаСтраницыКнопкиПеремотки";
	ОбзорФайловСервер.СоздатьКнопкиПорционногоПредпросмотра(ЭтотОбъект, ИмяРодителяКоманды);
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьКнопкиДинамическогоСписка()
	
	ОбзорФайловКлиентСервер.ОбновитьКнопкиДинамическогоСписка(
		ЭтотОбъект,
		НомерПорции,
		ВсегоПорцийПредпросмотра);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКнопкиДинамическогоСпискаКлиент()
	
	ОбзорФайловКлиентСервер.ОбновитьКнопкиДинамическогоСписка(
		ЭтотОбъект,
		НомерПорции,
		ВсегоПорцийПредпросмотра);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаВыборЗавершение(НоваяСтраница, ДополнительныеПараметры) Экспорт
	
	ЧастьВыбор(НоваяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастьВыбор(НоваяСтраница)
	
	Если НоваяСтраница = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НомерПорции = НоваяСтраница;
	
	ТекущиеДанные = ТекущиеДанныеФайла();
	ТекущийФайл = ТекущиеДанные.Ссылка;
	
	ДокументPDF = Неопределено;
	
	ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();
	ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
	ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.Расширение;
	ПараметрыHTMLПредставление.Размер = ТекущиеДанные.ТекущаяВерсияРазмер;
	ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
	ПараметрыHTMLПредставление.ПредпросмотрОфисныхФайлов = ПредпросмотрОфисныхФайлов;
	
	ПараметрыHTMLПредставление.НомерПорции = НомерПорции - 1; // номера для пользователя - с 1, в СУБД - с 0
	
	ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
		ТекущийФайл,
		ПараметрыHTMLПредставление,
		ДокументPDF);
	
	ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ОбзорHTML, ТаймлистАвтопротоколHTML,
		РаспознанныйТекстHTML);
	
	Элементы.ГруппаОбзорУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
	МасштабироватьPDFИКартинки = ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки;
	УстановитьВидимостьКомандМасштаба(ТекущиеДанные.Расширение);
	ТекущиеДанные.ПредпросмотрЕстьВБазе = Истина; 
	
	ВсегоПорцийПредпросмотра = ПараметрыHTMLПредставление.ВсегоПорцийПредпросмотра;
	
	Если ДокументPDF = Неопределено Тогда
		Элементы.СтраницыОбзора.ТекущаяСтраница = Элементы.СтраницаОбзорHTML;
	Иначе
		Элементы.СтраницыОбзора.ТекущаяСтраница = Элементы.СтраницаОбзорPDF;
		ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
		Элементы.ДокументPdfПоле.НомерТекущейСтраницы = 1;
	КонецЕсли;     
	
	ОбновитьКнопкиДинамическогоСпискаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДействиеОтложено()
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОбработка;
	ДействияКлиент.ОткрытьКарточкуДействияПоДействию(ЭтотОбъект, Параметры.Действие);

КонецПроцедуры

#КонецОбласти
