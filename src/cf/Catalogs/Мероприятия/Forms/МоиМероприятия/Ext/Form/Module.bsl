#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Параметры списка
	Список.Параметры.УстановитьЗначениеПараметра("Участники",
		Сотрудники.ВсеСотрудникиТекущегоПользователя(Ложь)); 
	
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДатаСеанса());
	
	// Задачи
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи") Тогда 
		Элементы.Задачи.Видимость = Ложь;
	КонецЕсли;
	
	// Контроль
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда 
		Элементы.СостояниеКонтроля.Видимость = Ложь;
	КонецЕсли;
	
	// Категории
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных") Тогда
		Элементы.ЕстьКатегорииДанных.Видимость = Ложь;
	КонецЕсли;
	
	// Автообновление
	Если ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом() Тогда
		Элементы.СписокКонтекстноеМенюАвтообновление.Видимость = Ложь;
	Иначе
		Автообновление.ЗагрузитьНастройкиАвтообновленияСписка(ЭтотОбъект, "Список");
		Элементы.СписокКонтекстноеМенюАвтообновление.Видимость = Истина;
	КонецЕсли;
	
	// Отображение удаленных
	ПереключитьОтображатьУдаленные();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.СписокКоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Учет трудозатрат
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияИспользоватьУчетВремени,
		Неопределено,
		ВидыРабот,
		СпособУказанияВремени,
		Команды.ПереключитьХронометраж,
		Элементы.ПереключитьХронометраж,
		Элементы.УказатьТрудозатраты);
	
	// МобильныйКлиент
	МК_НастроитьЭлементыФормы();
	// Конец МобильныйКлиент
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписьКонтроля" Тогда
		Если ЗначениеЗаполнено(Параметр.Предмет)
			И ТипЗнч(Параметр.Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда 
			ОповеститьОбИзменении(Параметр.Предмет);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Отображение удаленных
	ПереключитьОтображатьУдаленные();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле = Элементы.Файлы Тогда
		ПараметрыОткрытия = Новый Структура("Ключ, ОткрытьЗакладкуФайлы", ВыбраннаяСтрока, Истина);
		ОткрытьФорму("Справочник.Мероприятия.ФормаОбъекта", ПараметрыОткрытия);
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.Задачи Тогда
		ПараметрыОткрытия = Новый Структура("Ключ, ОткрытьЗакладкуОбработка", 
			ВыбраннаяСтрока, Истина);
		ОткрытьФорму("Справочник.Мероприятия.ФормаОбъекта", ПараметрыОткрытия, Элементы.Список);
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ЕстьКатегорииДанных Тогда
		ПараметрыОткрытия = Новый Структура("Ключ, ОткрытьЗакладкуКатегории", ВыбраннаяСтрока, Истина);
		ОткрытьФорму("Справочник.Мероприятия.ФормаОбъекта", ПараметрыОткрытия);
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.СостояниеКонтроля Тогда
		КонтрольКлиент.ОбработкаКомандыКонтроль(ВыбраннаяСтрока, ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("Ключ", ВыбраннаяСтрока);
	ОткрытьФорму("Справочник.Мероприятия.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		Или ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ТекущееМероприятие = Неопределено;
		УстановитьДоступностьКомандОтправить(Ложь);
		ОбновитьПараметрыУчетаВремениВФорме();
		Возврат;
	КонецЕсли;
	
	ТекущееМероприятие = ТекущиеДанные.Ссылка;
	УстановитьДоступностьКомандОтправить(ТекущиеДанные.ПротокольноеМероприятие);
	ОбновитьПараметрыУчетаВремениВФорме();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)

	Перем ТекущиеСостоянияОбработок;
	
	МероприятияПорции = Новый Массив;
	ЕстьКолонкаЗадачи = Ложь;
	Для Каждого КлючИЗначение Из Строки Цикл
		
		ДанныеСтроки = КлючИЗначение.Значение.Данные;
		
		// Период строкой
		Если ДанныеСтроки.Свойство("ПериодСтрокой") Тогда
			ДанныеСтроки.ПериодСтрокой = УправлениеМероприятиями.МестныйПериодСтрокой(
				ДанныеСтроки.ДатаНачала,
				ДанныеСтроки.ДатаОкончания);
		КонецЕсли;
		
		Если ДанныеСтроки.Свойство("Задачи") Тогда
			ЕстьКолонкаЗадачи = Истина;
		КонецЕсли;
		
		МероприятияПорции.Добавить(ДанныеСтроки.Ссылка);
		
	КонецЦикла;
	
	Если ЕстьКолонкаЗадачи Тогда
		ТекущиеСостоянияОбработок = ДействияСервер.ТекущиеСостоянияОбработок(МероприятияПорции);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Строки Цикл
		
		ДанныеСтроки = КлючИЗначение.Значение.Данные;
		
		// Задачи
		Если ДанныеСтроки.Свойство("Задачи") Тогда
			
			ДанныеСтроки.Задачи =
				ДействияСервер.ИндексКартинкиКоллекцияВзаимодействияСотрудников(
					ТекущиеСостоянияОбработок[ДанныеСтроки.Ссылка]);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбработкаЗапросаОбновления(Элемент)
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Автообновление(Команда)
	
	АвтообновлениеКлиент.УстановитьПараметрыАвтообновленияСписка(ЭтотОбъект, "Список");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКатегории(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыбратьКатегорииПродолжение",
		ЭтотОбъект);
		
	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаОбъектов(
		Элементы.Список, Истина, ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКатегорииПродолжение(Результат, Параметры) Экспорт 

	Если Результат <> Неопределено Тогда
		ОповеститьОбИзменении(Элементы.Список.ТекущаяСтрока);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтображатьУдаленные(Команда)
	
	ОтображатьУдаленные = Не ОтображатьУдаленные;
	ПереключитьОтображатьУдаленные();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	ПараметрыОповещения = Неопределено;
	НуженДиалог = УчетВремениКлиент.НуженДиалогДляХронометража(ВключенХронометраж, 
		ДатаНачалаХронометража, ВидыРабот);
	
	Если НуженДиалог = Ложь Тогда
		
		ПереключитьХронометражСервер(ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, ТекущиеДанные.Ссылка);
		
	Иначе
		ДлительностьРаботы = УчетВремениКлиент.ПолучитьДлительностьРаботы(ДатаНачалаХронометража);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДатаОтчета", ТекущаяДата());
		ПараметрыФормы.Вставить("ВидыРабот", ВидыРабот);
		ПараметрыФормы.Вставить("ОписаниеРаботы", Строка(ТекущиеДанные.Ссылка));
		ПараметрыФормы.Вставить("ДлительностьРаботы", ДлительностьРаботы);
		ПараметрыФормы.Вставить("НачалоРаботы", ДатаНачалаХронометража);
		ПараметрыФормы.Вставить("Объект", ТекущиеДанные.Ссылка);
		ПараметрыФормы.Вставить("СпособУказанияВремени", СпособУказанияВремени);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПереключитьХронометражПродолжение",
			ЭтотОбъект,
			Новый Структура("Объект", ТекущиеДанные.Ссылка));
		
		ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаДобавленияРаботы", ПараметрыФормы,,,,,
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты(Команда)
	
	ПараметрыФормы = Новый Структура("Источник", ТекущееМероприятие);
	ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаСпискаИсточника", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДатаОтчета = ТекущаяДата();
	
	УчетВремениКлиент.ДобавитьВОтчетКлиент(
		ДатаОтчета,
		ВключенХронометраж, 
		ДатаНачалаХронометража, 
		ДатаКонцаХронометража, 
		ВидыРабот, 
		ТекущиеДанные.Ссылка,
		СпособУказанияВремени,
		Элементы.ПереключитьХронометраж,
		Ложь,
		ЭтотОбъект); // Выполнена
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПереключитьОтображатьУдаленные()
	
	Элементы.ФормаОтображатьУдаленные.Пометка = ОтображатьУдаленные;
	Список.Параметры.УстановитьЗначениеПараметра("ОтображатьУдаленные", ОтображатьУдаленные);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандОтправить(ПротокольноеМероприятие)
	
	ВыбраноМероприятие = ЗначениеЗаполнено(ТекущееМероприятие);
	
	Если Элементы.Найти("ФормаОбщаяКомандаСоздатьПисьмоНаОсновании") <> Неопределено Тогда
		Элементы.ФормаОбщаяКомандаСоздатьПисьмоНаОсновании.Доступность = ВыбраноМероприятие;
	КонецЕсли;
	Элементы.ОтправитьОбъекты.Доступность = ВыбраноМероприятие;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения) Экспорт
	
	УчетВремени.ДобавитьВОтчетИОбновитьФорму(
		ПараметрыОтчета, 
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		Команды.ПереключитьХронометраж,
		Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыУчетаВремениВФорме()
	
	Если Не ЗначениеЗаполнено(ТекущееМероприятие) Тогда 
		Элементы.ПереключитьХронометраж.Доступность = Ложь;
		Элементы.УказатьТрудозатраты.Доступность = Ложь;
		Элементы.Трудозатраты.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	ПараметрыУчетаВремени = ПолучитьПараметрыУчетаВремени(ТекущееМероприятие);
	
	ДатаНачалаХронометража = ПараметрыУчетаВремени.ДатаНачалаХронометража;
	ДатаКонцаХронометража = ПараметрыУчетаВремени.ДатаКонцаХронометража;
	ВключенХронометраж = ПараметрыУчетаВремени.ВключенХронометраж;
	ОпцияИспользоватьУчетВремени = ПараметрыУчетаВремени.ОпцияИспользоватьУчетВремени;
	ВидыРабот = ПараметрыУчетаВремени.ВидыРабот;
	СпособУказанияВремени = ПараметрыУчетаВремени.СпособУказанияВремени;
	
	Для Каждого СвойствоЭлемента Из ПараметрыУчетаВремени.ПереключитьХронометраж Цикл
		Элементы.ПереключитьХронометраж[СвойствоЭлемента.Ключ] = СвойствоЭлемента.Значение;
	КонецЦикла;
	
	Для Каждого СвойствоЭлемента Из ПараметрыУчетаВремени.УказатьТрудозатраты Цикл
		Элементы.УказатьТрудозатраты[СвойствоЭлемента.Ключ] = СвойствоЭлемента.Значение;
	КонецЦикла;
	
	Элементы.Трудозатраты.Доступность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьХронометражСервер() Экспорт
	
	Если Не ЗначениеЗаполнено(ТекущееМероприятие) Тогда 
		Возврат;
	КонецЕсли;
	
	УчетВремени.ОтключитьХронометражСервер(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ТекущееМероприятие,
		Команды.ПереключитьХронометраж,
		Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометражПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		ДобавитьВОтчетИОбновитьФорму(Результат, ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Параметры.Объект);
	Иначе
		ОтключитьХронометражСервер();
	КонецЕсли;  

КонецПроцедуры

&НаСервере
Процедура ПереключитьХронометражСервер(ПараметрыОповещения) Экспорт
	
	Если Не ЗначениеЗаполнено(ТекущееМероприятие) Тогда 
		Возврат;
	КонецЕсли;
	
	УчетВремени.ПереключитьХронометражСервер(
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ТекущееМероприятие,
		ВидыРабот,
		Команды.ПереключитьХронометраж,
		Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыУчетаВремени(Мероприятие)
	
	Результат = Новый Структура;
	
	ДатаНачалаХронометража = Неопределено;
	ДатаКонцаХронометража = Неопределено;
	ВключенХронометраж = Неопределено;
	ОпцияИспользоватьУчетВремени = Неопределено;
	ВидыРабот = Неопределено;
	СпособУказанияВремени = Неопределено;
	
	ПереключитьХронометражНеМеняяПодсказку = Новый Структура("Имя, Подсказка");
	
	ПереключитьХронометраж = Новый Структура("Доступность, Пометка, Видимость");
	ПереключитьХронометраж.Доступность = Истина;
	
	УказатьТрудозатраты = Новый Структура("Доступность");
	УказатьТрудозатраты.Доступность = Истина;
	
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияИспользоватьУчетВремени,
		Мероприятие,
		ВидыРабот,
		СпособУказанияВремени,
		ПереключитьХронометражНеМеняяПодсказку,
		ПереключитьХронометраж,
		УказатьТрудозатраты);
		
	Результат.Вставить("ПереключитьХронометраж", Новый Соответствие);
	Результат.Вставить("УказатьТрудозатраты", Новый Соответствие);
	
	Результат.ПереключитьХронометраж.Вставить(
		"Доступность",
		ПереключитьХронометраж.Доступность);
	Результат.ПереключитьХронометраж.Вставить(
		"Пометка",
		ПереключитьХронометраж.Пометка);
	Результат.УказатьТрудозатраты.Вставить(
		"Доступность",
		УказатьТрудозатраты.Доступность);
	
	Результат.Вставить("ДатаНачалаХронометража", ДатаНачалаХронометража);
	Результат.Вставить("ДатаКонцаХронометража", ДатаКонцаХронометража);
	Результат.Вставить("ВключенХронометраж", ВключенХронометраж);
	Результат.Вставить("ОпцияИспользоватьУчетВремени", ОпцияИспользоватьУчетВремени);
	Результат.Вставить("ВидыРабот", ВидыРабот);
	Результат.Вставить("СпособУказанияВремени", СпособУказанияВремени);
	
	Возврат Результат;
	
КонецФункции

#Область СлужебныеПроцедурыИФункции_МобильныйКлиент

&НаСервере
Процедура МК_НастроитьЭлементыФормы()
	
	Если Не ПараметрыСеанса.ЭтоМобильныйКлиент Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ПодменюПечать.Видимость = Ложь;
	
	// Акцентная кнопка
	МК.ПреобразоватьКнопкуВАкцентную(ЭтотОбъект, МК_ПовтИсп.ЭлементыСтиля(), Элементы.ФормаСоздать);
	
	Элементы.ФормаСправочникМероприятияВсеМероприятия.Заголовок = НСтр("ru = 'Все'");
	
	// Список.
	Элементы.СписокГруппаКолонокМК.Видимость = Истина;
	Элементы.Переместить(Элементы.СписокНаименование, Элементы.ГруппаНаименование);
	Элементы.Переместить(Элементы.ГруппаПериодСтрокой, Элементы.ГруппаВремя);
	
	Элементы.СписокНаименование.Высота = 3;
	Элементы.ПериодСтрокой.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;
	
	Элементы.Список.Шапка = Ложь;
	Элементы.Код.Видимость = Ложь;
	Элементы.Участники.Видимость = Ложь;
	Элементы.ВидМероприятия.Видимость = Ложь;
	Элементы.МестоПроведения.Видимость = Ложь;
	Элементы.СостояниеМероприятия.Видимость = Ложь;
	Элементы.Председатель.Видимость = Ложь;
	Элементы.Секретарь.Видимость = Ложь;
	Элементы.Проект.Видимость = Ложь;
	Элементы.Комментарий.Видимость = Ложь;
	Элементы.ДатаНачала.Видимость = Ложь;
	Элементы.ДатаОкончания.Видимость = Ложь;
	Элементы.ГруппаЗадачиФайлы.Видимость = Ложь;
	Элементы.ГруппаВажностьКонтроль.Видимость = Ложь;
	Элементы.СостояниеКонтроля.Видимость = Ложь;
	Элементы.Ссылка.Видимость = Ложь;
	
	Элементы.Переместить(Элементы.УказатьТрудозатраты, Элементы.Список.КонтекстноеМеню);
	Элементы.Переместить(Элементы.ПереключитьХронометраж, Элементы.Список.КонтекстноеМеню);
	Элементы.Переместить(Элементы.Трудозатраты, Элементы.Список.КонтекстноеМеню);

КонецПроцедуры

#КонецОбласти

#КонецОбласти