#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Возвращает наименования реквизитов, необходимых для определения прав доступа.
//
Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат "Ссылка, Ответственный, Доступ";
	
КонецФункции

Процедура ЗаполнитьОсновнойДескриптор(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	ДескрипторДоступа.ГрифДоступа = ОбъектДоступа.Ссылка;
	
КонецПроцедуры

// Проверяет наличие метода.
// 
Функция ЕстьМетодЗаполнитьДескрипторыОбъекта() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Заполняет переданную таблицу дескрипторов объекта.
// 
Процедура ЗаполнитьДескрипторыОбъекта(ОбъектДоступа, ТаблицаДескрипторов, ПротоколРасчетаПрав = Неопределено) Экспорт
	
	// Если по каким-то предметам даны права по разрезу ГДК, на нее должны быть права.  
	ДокументооборотПраваДоступа.ЗаполнитьДескрипторОбъектаОсновной(ОбъектДоступа, ТаблицаДескрипторов);
	
	ДокументооборотПраваДоступа.ДобавитьИндивидуальныйДескриптор(
		ОбъектДоступа, ТаблицаДескрипторов, ОбъектДоступа.Ответственный, Истина);
	
	ТаблицаДоступа = ОбъектДоступа.Доступ.Выгрузить();
	Для Каждого СтрДоступа Из ТаблицаДоступа Цикл
		ДокументооборотПраваДоступа.ДобавитьИндивидуальныйДескриптор(
			ОбъектДоступа, ТаблицаДескрипторов, СтрДоступа.Участник, Истина);
	КонецЦикла;
	
	Если ПротоколРасчетаПрав <> Неопределено Тогда
		ЗаписьПротокола = Новый Структура("Элемент, Описание",
			ОбъектДоступа.Ответственный, НСтр("ru = 'Ответственный'"));
		ПротоколРасчетаПрав.Добавить(ЗаписьПротокола);
		ЗаписьПротокола = Новый Структура("Элемент, Описание",
			ОбъектДоступа.Ссылка, НСтр("ru = 'Сотрудники на закладке ""Доступ""'"));
		ПротоколРасчетаПрав.Добавить(ЗаписьПротокола);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак того, что менеджер содержит метод ЗапросДляРасчетаПрав()
// 
Функция ЕстьМетодЗапросДляРасчетаПрав() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает запрос для расчета прав доступа по дескрипторам объекта
// 
// Параметры:
//  
//  Дескрипторы - Массив - массив дескрипторов, чьи права нужно рассчитать
//  ИдОбъекта - Ссылка - идентификатор объекта метаданных, назначенный переданным дескрипторам
//  МенеджерОбъектаДоступа - СправочникМенеджер, ДокументМенеджер - менеджер объекта доступа
// 
// Возвращаемое значение - Запрос - запрос, который выберет права доступа для переданного массива дескрипторов
// 
Функция ЗапросДляРасчетаПрав(Дескрипторы, ИдОбъекта, МенеджерОбъектаДоступа) Экспорт
	
	Запрос = Справочники.ДескрипторыДоступаОбъектов.ЗапросДляСтандартногоРасчетаПрав(
		Дескрипторы, ИдОбъекта, МенеджерОбъектаДоступа, Ложь, Истина);
	Запрос.Текст = ДокументооборотПраваДоступаПовтИсп.ТекстЗапросаДляРасчетаПравРазрезаДоступа();
	
	Возврат Запрос;
	
КонецФункции

// Заполняет протокол расчета прав дескрипторов
// 
// Параметры:
//  
//  ПротоколРасчетаПрав - Массив - протокол для заполнения
//  ЗапросПоПравам - Запрос - запрос, который использовался для расчета прав дескрипторов
//  Дескрипторы - Массив - массив дескрипторов, чьи права были рассчитаны
//  
Процедура ЗаполнитьПротоколРасчетаПрав(ПротоколРасчетаПрав, ЗапросПоПравам) Экспорт
	
	Справочники.ДескрипторыДоступаОбъектов.ЗаполнитьПротоколРасчетаПравСтандартно(
		ПротоколРасчетаПрав, ЗапросПоПравам);
	
КонецПроцедуры

// Возвращает порцию объектов с запрещенными участниками доступа, либо количество таких участников.
//
// Параметры:
//  ТолькоКоличество - Булево - если Истина, то возвращается количество объектов.
//  ГруппаОтбор - СправочникСсылка.ГруппыДоступаКонтрагентов, Неопределено - группа для отбора.
//
// Возвращаемое значение:
//  Массив, Число - порция объектов с запрещенными участниками доступа, либо количество таких участников.
//
Функция ОбъектыСЗапрещеннымиУчастникамиДоступа(
			МетаданныеОбъектов, ТолькоКоличество = Ложь, ГрифОтбор = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000 РАЗРЕШЕННЫЕ
		|	ОбъектыДоступа.Ссылка КАК Объект
		|ИЗ
		|	Справочник.ДокументыПредприятия КАК ОбъектыДоступа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РабочиеГруппы КАК РабочиеГруппы
		|		ПО ОбъектыДоступа.Ссылка = РабочиеГруппы.Объект
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиВКонтейнерах КАК СотрудникиУчастников
		|		ПО (РабочиеГруппы.Участник = СотрудникиУчастников.Контейнер)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваПоДескрипторамДоступаОбъектов КАК ПраваПоДескрипторам
		|			ПО ДескрипторыДляОбъектов.Дескриптор = ПраваПоДескрипторам.Дескриптор
		|		ПО (ДескрипторыДляОбъектов.Объект = ОбъектыДоступа.ГрифДоступа)
		|		И (ПраваПоДескрипторам.Сотрудник = СотрудникиУчастников.Сотрудник)
		|ГДЕ
		|	ДескрипторыДляОбъектов.Объект ЕСТЬ NULL
		|	И НЕ СотрудникиУчастников.Сотрудник.ПометкаУдаления
		|	И ОбъектыДоступа.ГрифДоступа = &ГрифДоступа");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДокументыПредприятия", МетаданныеОбъектов.Имя);
		
	Если ТолькоКоличество Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РАЗЛИЧНЫЕ ПЕРВЫЕ 1000", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"ОбъектыДоступа.Ссылка КАК Объект",
			"КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОбъектыДоступа.Ссылка) КАК КолОбъектов");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ГрифОтбор) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"ОбъектыДоступа.ГрифДоступа = &ГрифДоступа",
			"ОбъектыДоступа.ГрифДоступа <> ЗНАЧЕНИЕ(Справочник.ГрифыДоступа.ПустаяСсылка)");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ГрифДоступа", ГрифОтбор);
	
	Если ТолькоКоличество Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Возврат Выборка.КолОбъектов;
	Иначе
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
    МультиязычностьКлиентСервер.ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка);
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
    МультиязычностьКлиентСервер.ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка);
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
    МультиязычностьСервер.ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка, Метаданные.Справочники.ГрифыДоступа);
КонецПроцедуры

#КонецОбласти


#КонецЕсли
