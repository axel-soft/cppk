#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Находит или создает подразделение-контейнер по ссылке на Подразделение.
//
// Параметры:
//   Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение.
//   СпособВключенияПодчиненных - ПеречислениеСсылка.СпособВключенияСотрудниковПодразделения -
//   	способ учета подчиненных подразделений.
//   СсылкаНового - СправочникСсылка.ПодразделенияКонтейнеры, Неопределено - ссылка для присваивания новому элементу.
//
// Возвращаемое значение:
//   СправочникСсылка.ПодразделенияКонтейнеры - элемент, найденный в справочнике
//     или созданный на основании исходного подразделения.
//
Функция НайтиСоздатьПодразделениеКонтейнер(Подразделение, СпособВключенияПодчиненных, СсылкаНового = Неопределено) Экспорт
	
	Результат = НайтиПодразделениеКонтейнер(Подразделение, СпособВключенияПодчиненных);
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = СоздатьПодразделениеКонтейнер(Подразделение, СпособВключенияПодчиненных, СсылкаНового);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Находит подразделение-контейнер по ссылке на Подразделение.
//
// Параметры:
//   Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение.
//   СпособВключенияПодчиненных - ПеречислениеСсылка.СпособВключенияСотрудниковПодразделения -
//   	способ учета подчиненных подразделений.
//
// Возвращаемое значение:
//   СправочникСсылка.ПодразделенияКонтейнеры, Неопределено - элемент, найденный в справочнике.
//
Функция НайтиПодразделениеКонтейнер(Подразделение, СпособВключенияПодчиненных) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПодразделенияКонтейнеры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПодразделенияКонтейнеры КАК ПодразделенияКонтейнеры
		|ГДЕ
		|	ПодразделенияКонтейнеры.Владелец = &Владелец
		|	И ПодразделенияКонтейнеры.СпособВключенияПодчиненных = &СпособВключенияПодчиненных");
		
	Запрос.УстановитьПараметр("Владелец", Подразделение);
	Запрос.УстановитьПараметр("СпособВключенияПодчиненных", СпособВключенияПодчиненных);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Находит подразделения-контейнеры по массиву ссылок на Подразделения.
//
// Параметры:
//   Подразделения - Массив - подразделений.
//     * СправочникСсылка.СтруктураПредприятия
//   СпособВключенияПодчиненных - ПеречислениеСсылка.СпособВключенияСотрудниковПодразделения -
//   	способ учета подчиненных подразделений.
//
// Возвращаемое значение:
//   Массив - элементы, найденный в справочнике.
//   * СправочникСсылка.ПодразделенияКонтейнеры
//
Функция НайтиПодразделенияКонтейнеры(Подразделения, СпособВключенияПодчиненных) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПодразделенияКонтейнеры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПодразделенияКонтейнеры КАК ПодразделенияКонтейнеры
		|ГДЕ
		|	ПодразделенияКонтейнеры.Владелец В (&Подразделения)
		|	И ПодразделенияКонтейнеры.СпособВключенияПодчиненных = &СпособВключенияПодчиненных");
		
	Запрос.УстановитьПараметр("Подразделения", Подразделения);
	Запрос.УстановитьПараметр("СпособВключенияПодчиненных", СпособВключенияПодчиненных);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Создает подразделение-контейнер.
//
// Параметры:
//   Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение.
//   СпособВключенияПодчиненных - ПеречислениеСсылка.СпособВключенияСотрудниковПодразделения -
//   	способ учета подчиненных подразделений.
//   СсылкаНового - СправочникСсылка.ПодразделенияКонтейнеры, Неопределено - ссылка для присваивания новому элементу.
//
// Возвращаемое значение:
//   СправочникСсылка.ПодразделениКонтейнеры - элемент, созданный на основании исходного подразделения.
//
Функция СоздатьПодразделениеКонтейнер(Подразделение, СпособВключенияПодчиненных, СсылкаНового = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПодразделенеКонтейнер = Справочники.ПодразделенияКонтейнеры.СоздатьЭлемент();
	Если ЗначениеЗаполнено(СсылкаНового) И Не ОбщегоНазначения.СсылкаСуществует(СсылкаНового) Тогда
		ПодразделенеКонтейнер.УстановитьСсылкуНового(СсылкаНового);
	КонецЕсли;
	ПодразделенеКонтейнер.Владелец = Подразделение;
	ПодразделенеКонтейнер.СпособВключенияПодчиненных = СпособВключенияПодчиненных;
	
	ПодразделенеКонтейнер.Записать();
	
	Возврат ПодразделенеКонтейнер.Ссылка;
	
КонецФункции

// Возвращает состав сотрудников, входящих в указанный контейнер.
//
// Параметры:
//   Контейнер - СправочникСсылка.Сотрудники - контейнер сотрудников.
//
// Возвращаемое значение:
//   Массив - массив значений СправочникСсылка.Сотрудники - состав контейнера.
//
Функция СоставКонтейнераСотрудников(Контейнер) Экспорт
	
	Если Не ЗначениеЗаполнено(Контейнер) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	РеквизитыКонтейнера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контейнер,
		"ПометкаУдаления, Владелец, Владелец.ПометкаУдаления, СпособВключенияПодчиненных");
	
	Если РеквизитыКонтейнера.ПометкаУдаления = Истина
		Или РеквизитыКонтейнера.ВладелецПометкаУдаления = Истина Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контейнер", Контейнер);
	Запрос.УстановитьПараметр("Подразделение", РеквизитыКонтейнера.Владелец);
		
	Если РеквизитыКонтейнера.СпособВключенияПодчиненных =
		Перечисления.СпособВключенияСотрудниковПодразделения.БезПодчиненных Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.Ссылка КАК Сотрудник
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.Подразделение = &Подразделение
			|	И НЕ Сотрудники.ПометкаУдаления";
		
	ИначеЕсли РеквизитыКонтейнера.СпособВключенияПодчиненных =
		Перечисления.СпособВключенияСотрудниковПодразделения.СПодчиненными Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Сотрудники.Ссылка КАК Сотрудник
			|ИЗ
			|	РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО ПодчиненностьПодразделений.Подчиненное = Сотрудники.Подразделение
			|ГДЕ
			|	ПодчиненностьПодразделений.Вышестоящее = &Подразделение
			|	И НЕ Сотрудники.ПометкаУдаления
			|	И НЕ ПодчиненностьПодразделений.Подчиненное.ПометкаУдаления";
	
	ИначеЕсли РеквизитыКонтейнера.СпособВключенияПодчиненных =
		Перечисления.СпособВключенияСотрудниковПодразделения.ТолькоРуководитель Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПодчиненностьПодразделений.РуководительПодчиненного КАК Сотрудник
			|ИЗ
			|	РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО ПодчиненностьПодразделений.РуководительПодчиненного = Сотрудники.Ссылка
			|ГДЕ
			|	ПодчиненностьПодразделений.Подчиненное = &Подразделение
			|	И ПодчиненностьПодразделений.Вышестоящее = &Подразделение
			|	И НЕ Сотрудники.ПометкаУдаления";
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
КонецФункции

// Возвращает контейнеры типа ПодразделенияКонтейнеры, которым принадлежит указанный сотрудник.
//
// Параметры:
//   Сотрудник - СправочникСсылка.Сотрудники - проверяемый сотрудник.
//
// Возвращаемое значение:
//   Массив - массив значений СправочникСсылка.ПодразделенияКонтейнеры -
//   	контейнеры, которым принадлежит сотрудник.
//
Функция КонтейнерыСотрудника(Сотрудник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ПометкаУдаления") = Истина Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Контейнеры.Ссылка КАК Контейнер
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
		|		ПО Сотрудники.Подразделение = ПодчиненностьПодразделений.Подчиненное
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияКонтейнеры КАК Контейнеры
		|		ПО ПодчиненностьПодразделений.Вышестоящее = Контейнеры.Владелец
		|ГДЕ
		|	Сотрудники.Ссылка = &Сотрудник
		|	И НЕ Контейнеры.ПометкаУдаления
		|	И
		|		(Контейнеры.СпособВключенияПодчиненных = ЗНАЧЕНИЕ(Перечисление.СпособВключенияСотрудниковПодразделения.СПодчиненными)
		|	ИЛИ
		|		Контейнеры.СпособВключенияПодчиненных = ЗНАЧЕНИЕ(Перечисление.СпособВключенияСотрудниковПодразделения.БезПодчиненных)
		|	И Контейнеры.Владелец = Сотрудники.Подразделение)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Контейнеры.Ссылка
		|ИЗ
		|	РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПодразделенияКонтейнеры КАК Контейнеры
		|		ПО ПодчиненностьПодразделений.Подчиненное = Контейнеры.Владелец
		|ГДЕ
		|	ПодчиненностьПодразделений.Подчиненное = ПодчиненностьПодразделений.Вышестоящее
		|	И ПодчиненностьПодразделений.РуководительПодчиненного = &Сотрудник
		|	И НЕ Контейнеры.ПометкаУдаления
		|	И
		|		Контейнеры.СпособВключенияПодчиненных = ЗНАЧЕНИЕ(Перечисление.СпособВключенияСотрудниковПодразделения.ТолькоРуководитель)");
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контейнер");
	
	Возврат Результат;
	
КонецФункции

// Возвращает отслеживаемые реквизиты для дополнительного свойства ПредыдущиеЗначенияРеквизитов.
//
// Возвращаемое значение:
//  Строка - Отслеживаемые реквизиты.
//
Функция ОтслеживаемыеРеквизиты() Экспорт
	
	ОтслеживаемыеРеквизиты = "ПометкаУдаления";
	
	Возврат ОтслеживаемыеРеквизиты;
	
КонецФункции
	
#Область ОбновлениеДанныхКэширующихОбъектов

// Конструктор параметров обновления данных кэширующих объектов.
//
// Возвращаемое значение:
//	Структура:
//		* ОбъектыДляОбновленияСотрудниковВКонтейнерах - Массив Из СправочникСсылка.РабочиеГруппы - Список объектов, по которым необходимо обновить данные РС СотрудникиВКонтейнерах.
//
Функция ПараметрыОбновленияДанныхКэширующихОбъектов() Экспорт
	
	ПараметрыОбновления = Новый Структура;	
	ПараметрыОбновления.Вставить("ОбъектыДляОбновленияСотрудниковВКонтейнерах", Новый Массив);
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Устанавливает значения параметров обновления данных кэширующих объектов по данным объекта.
//
// Параметры:
//	Объект - СправочникОбъект.ПодразделенияКонтейнеры - Объект, для которго необходимо определить параметры обновления.
//
// Возвращаемое значение:
//	Структура: см. ПараметрыОбновленияДанныхКэширующихОбъектов.
//
Функция ЗначенияПараметровОбновленияДанныхКэширующихОбъектов(Объект) Экспорт
	
	ПараметрыОбновления = ПараметрыОбновленияДанныхКэширующихОбъектов();
	
	ПредыдущиеЗначенияРеквизитов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Объект.ДополнительныеСвойства, "ПредыдущиеЗначенияРеквизитов");
	
	СсылкаНаОбъект = Объект.Ссылка;
	
	Если Объект.ЭтоНовый() Тогда
		Если Объект.ПолучитьСсылкуНового().Пустая() Тогда // Установим ссылку нового, если ее нет
			СсылкаНаОбъект = ПолучитьСсылку(Новый УникальныйИдентификатор);
			Объект.УстановитьСсылкуНового(СсылкаНаОбъект);
		Иначе // Если ссылку нового уже установили ранее, возьмем ее
			СсылкаНаОбъект = Объект.ПолучитьСсылкуНового();
		КонецЕсли;
	КонецЕсли;
	
	Если ПредыдущиеЗначенияРеквизитов = Неопределено Тогда
		ПредыдущиеЗначенияРеквизитов =
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъект, ОтслеживаемыеРеквизиты());	
	КонецЕсли; 
	
	Если Объект.ЭтоНовый()
			Или ПредыдущиеЗначенияРеквизитов.ПометкаУдаления <> Объект.ПометкаУдаления Тогда
		
		ПараметрыОбновления.ОбъектыДляОбновленияСотрудниковВКонтейнерах.Добавить(СсылкаНаОбъект);
	КонецЕсли;

	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновляет данные зависимых объектов согласно установленным параметрам.
//
// Параметры:
//	Объект - СправочникОбъект.ПодразделенияКонтейнеры - Объект, по данным которого необходимо обновить кэширующие объекты.
//	ПараметрыОбновления - Структура Из КлючИЗначение - см. ПараметрыОбновленияДанныхКэширующихОбъектов.
//
Процедура ОбновитьДанныеКэширующихОбъектов(Объект, ПараметрыОбновления) Экспорт
	
	Если ПараметрыОбновления.ОбъектыДляОбновленияСотрудниковВКонтейнерах.Количество() Тогда
		РегистрыСведений.СотрудникиВКонтейнерах.ОбновитьДанныеКонтейнеров(
			ПараметрыОбновления.ОбъектыДляОбновленияСотрудниковВКонтейнерах);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка = Ложь)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Владелец");
	Поля.Добавить("СпособВключенияПодчиненных");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка) 
	
	СтандартнаяОбработка = Ложь;
	Представление = СтрШаблон("%1, %2", Данные.Владелец, Данные.СпособВключенияПодчиненных);
	
КонецПроцедуры

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Вместо открытия элемента открывается форма подразделения.
//
Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма,
			ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Не Параметры.Свойство("Ключ") Тогда
			ВызватьИсключение НСтр(
				"ru = 'Справочник наполняется автоматически и не предназначен для редактирования.'");
		КонецЕсли;
		
		ВыбраннаяФорма = Метаданные.Справочники.СтруктураПредприятия.Формы.ФормаЭлемента;
		Параметры.Ключ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "Владелец");
		
	ИначеЕсли ВидФормы = "ФормаВыбора"
		Или ВидФормы = "ФормаСписка" И Параметры.Свойство("РежимВыбора") И Параметры.РежимВыбора Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ВыбраннаяФорма = "Справочник.АдреснаяКнига.ФормаСписка";
		
		Параметры.Вставить("РежимРаботыФормы", 1);
		Параметры.Вставить("УпрощенныйИнтерфейс", Истина);
		Параметры.Вставить("ОтображатьСотрудников", Истина);
		Параметры.Вставить("ОтображатьПодразделения", Истина);
		Параметры.Вставить("ВыбиратьПодразделения", Истина);
		Параметры.Вставить("УточнятьСоставКонтейнеров", Истина);
		Параметры.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор подразделения'"));
		
		Если Параметры.Свойство("ТекущаяСтрока") И ЗначениеЗаполнено(Параметры.ТекущаяСтрока) Тогда
			Если ТипЗнч(Параметры.ТекущаяСтрока) = Тип("СправочникСсылка.ПодразделенияКонтейнеры") Тогда
				Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ТекущаяСтрока, "Владелец");
				Параметры.Вставить("ВыбранныеАдресаты", Подразделение);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Текст = Параметры.СтрокаПоиска; 
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 20
		|	ПодразделенияКонтейнеры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПодразделенияКонтейнеры КАК ПодразделенияКонтейнеры
		|ГДЕ
		|	(ПодразделенияКонтейнеры.Владелец.Наименование ПОДОБНО &Текст
		|		ИЛИ ПодразделенияКонтейнеры.Владелец.Код ПОДОБНО &Текст)
		|	И НЕ ПодразделенияКонтейнеры.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли

#КонецОбласти