
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ОбработчикиОбновления

// Процедура обновления на 3.0.15
// 
// Параметры:
//  Параметры - Структура - Параметры обработчика:
//   * ПрогрессВыполнения - Структура:
//      ** ОбработаноОбъектов - Число.
//      ** ВсегоОбъектов - Число.
//   * ОбработкаЗавершена - Булево
//
Процедура ОбновитьРодительОбъектаГруппКонтактов(Параметры) Экспорт
	
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(АдреснаяКнига.Ссылка) КАК ВсегоОбъектов
		|ИЗ
		|	Справочник.АдреснаяКнига КАК АдреснаяКнига
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АдреснаяКнига КАК АдреснаяКнигаРодитель
		|		ПО АдреснаяКнига.Родитель = АдреснаяКнигаРодитель.Ссылка
		|ГДЕ
		|	АдреснаяКнига.ТипДанныхОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыДанныхАдреснойКниги.ГруппаКонтактовПользователей)
		|	И АдреснаяКнига.РодительОбъекта = НЕОПРЕДЕЛЕНО
		|	И ТИПЗНАЧЕНИЯ(АдреснаяКнига.ОбъектДоступа) = ТИП(Справочник.Сотрудники)");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.ВсегоОбъектов;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 10000
	|	АдреснаяКнига.Ссылка КАК Ссылка,
	|	АдреснаяКнигаРодитель.Объект КАК ОбъектРодителя,
	|	АдреснаяКнига.ОбъектДоступа КАК Сотрудник
	|ИЗ
	|	Справочник.АдреснаяКнига КАК АдреснаяКнига
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АдреснаяКнига КАК АдреснаяКнигаРодитель
	|		ПО АдреснаяКнига.Родитель = АдреснаяКнигаРодитель.Ссылка
	|ГДЕ
	|	АдреснаяКнига.ТипДанныхОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыДанныхАдреснойКниги.ГруппаКонтактовПользователей)
	|	И АдреснаяКнига.РодительОбъекта = НЕОПРЕДЕЛЕНО
	|	И ТИПЗНАЧЕНИЯ(АдреснаяКнига.ОбъектДоступа) = ТИП(Справочник.Сотрудники)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Ссылка = Выборка.Ссылка;
			Объект = Ссылка.ПолучитьОбъект(); 
			НовыйОбъектРодителя = Выборка.ОбъектРодителя;
			Если НовыйОбъектРодителя = "Избранное" Тогда
				НовыйОбъектРодителя = Справочники.ГруппыКонтактовПользователей.ПолучитьКорневуюГруппу(Выборка.Сотрудник);
			КонецЕсли;
			Объект.РодительОбъекта = НовыйОбъектРодителя;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось установить родителя группы контактов пользователей %1 по причине:
				|%2'"),
				Выборка.Ссылка,
				ПодробноеПредставлениеОшибки); 
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Выборка.Ссылка.Метаданные(),
				Выборка.Ссылка,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов > 0 Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Процедуре ПерейтиНаВерсию_3_0_15_30 не удалось установить родителя для нескольких групп контактов: %1'"),
			ПроблемныхОбъектов);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = 
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	Параметры.ОбработкаЗавершена = (ОбработаноОбъектов = 0);
	
КонецПроцедуры

#КонецОбласти

Процедура ОбновитьДанныеОбъекта(Объект, Родитель, Раздел, ОбъектДоступа = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОбщегоНазначения.СсылкаСуществует(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	// Определение родителя в адресной книге
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АдреснаяКнига.Ссылка
		|ИЗ
		|	Справочник.АдреснаяКнига КАК АдреснаяКнига
		|ГДЕ
		|	АдреснаяКнига.Объект = &Родитель
		|	И АдреснаяКнига.Ссылка В ИЕРАРХИИ(&Раздел)";
	Запрос.УстановитьПараметр("Родитель", Родитель);
	Запрос.УстановитьПараметр("Раздел", Раздел);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РодительВАдреснойКниге = Выборка.Ссылка;
	Иначе
		РодительВАдреснойКниге = Раздел;
	КонецЕсли;
	
	СсылкаНаОбъектВАдреснойКниге = ПолучитьСсылкуНаОбъектВАдреснойКниге(Объект, Родитель, Раздел);
	
	Если СсылкаНаОбъектВАдреснойКниге = РодительВАдреснойКниге Тогда
		РодительВАдреснойКниге = Неопределено;
	КонецЕсли;
	
	Если СсылкаНаОбъектВАдреснойКниге <> Неопределено Тогда
		
		ЗаблокироватьДанныеДляРедактирования(СсылкаНаОбъектВАдреснойКниге);
		ОбъектВАдреснойКниге = СсылкаНаОбъектВАдреснойКниге.ПолучитьОбъект();
		ОбъектВАдреснойКниге.Родитель = РодительВАдреснойКниге;
		ОбъектВАдреснойКниге.РодительОбъекта = Родитель;
		ОбъектВАдреснойКниге.Объект = Объект;
		ОбъектВАдреснойКниге.ОбъектДоступа = ОбъектДоступа;
		УстановитьПорядокОбъектаВСписке(ОбъектВАдреснойКниге, Объект, Родитель);
		УстановитьПризнакОтображенияОбъектаВАдреснойКниге(ОбъектВАдреснойКниге, Объект);
		УстановитьПредставлениеОбъектаВАдреснойКниге(ОбъектВАдреснойКниге, Объект);
		ОбъектВАдреснойКниге.Записать();
		РазблокироватьДанныеДляРедактирования(СсылкаНаОбъектВАдреснойКниге);
		
	Иначе
		
		ОбъектВАдреснойКниге = СоздатьЭлемент();
		ОбъектВАдреснойКниге.Родитель = РодительВАдреснойКниге;
		ОбъектВАдреснойКниге.РодительОбъекта = Родитель;
		ОбъектВАдреснойКниге.Объект = Объект;
		ОбъектВАдреснойКниге.ОбъектДоступа = ОбъектДоступа;
		УстановитьПорядокОбъектаВСписке(ОбъектВАдреснойКниге, Объект, Родитель);
		УстановитьПризнакОтображенияОбъектаВАдреснойКниге(ОбъектВАдреснойКниге, Объект);
		УстановитьПредставлениеОбъектаВАдреснойКниге(ОбъектВАдреснойКниге, Объект);
		ОбъектВАдреснойКниге.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСписокПодчиненныхОбъектов(
	Объект, Родитель, Знач СписокПодчиненных, Раздел, ОбъектДоступа = Неопределено,
	ОбновитьТолькоСоставПодчиненных = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОбщегоНазначения.СсылкаСуществует(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		ОбъектАдреснойКниге = 
			ПолучитьСсылкуНаОбъектВАдреснойКниге(Объект, Родитель, Раздел);
		
		НовыеПодчиненные = Новый Соответствие;
		
		Для Каждого ПодчиненныйОбъект Из СписокПодчиненных Цикл
			НовыеПодчиненные[ПодчиненныйОбъект] = Истина;
		КонецЦикла;
		
		ТекущиеПодчиненные = Новый Соответствие; 
		
		// Получение текущего списка подчиненных в адресной книге
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	АдреснаяКнига.Ссылка КАК Ссылка,
			|	АдреснаяКнига.Родитель КАК Родитель,
			|	АдреснаяКнига.Объект КАК Объект,
			|	АдреснаяКнига.РодительОбъекта КАК РодительОбъекта,
			|	АдреснаяКнига.ОбъектДоступа КАК ОбъектДоступа,
			|	АдреснаяКнига.ОтображатьВАдреснойКниге КАК ОтображатьВАдреснойКниге,
			|	АдреснаяКнига.Родитель.ОтображатьВАдреснойКниге КАК ОтображатьРодителяВАдреснойКниге,
			|	АдреснаяКнига.Объект.ПометкаУдаления КАК ПометкаУдаленияОбъекта
			|ИЗ
			|	Справочник.АдреснаяКнига КАК АдреснаяКнига
			|ГДЕ
			|	АдреснаяКнига.РодительОбъекта = &РодительОбъекта";
		Запрос.УстановитьПараметр("РодительОбъекта", Объект);
		
		СписокПодчиненныхВАдреснойКниге = Запрос.Выполнить().Выгрузить();
		
		Если Не ОбновитьТолькоСоставПодчиненных Тогда
			ОтображениеЗаписей = ОтображениеЗаписейВАдреснойКниге(СписокПодчиненныхВАдреснойКниге);
		КонецЕсли;
		
		// Получение строк адресной книги к удалению
		СтрокиКУдалению = Новый Массив;
		СтрокиКОбновлению = Новый Массив;
		Для Каждого СтрАдреснойКниги ИЗ СписокПодчиненныхВАдреснойКниге Цикл
			
			Если НовыеПодчиненные[СтрАдреснойКниги.Объект] = Неопределено Тогда
				
				СтрокиКУдалению.Добавить(СтрАдреснойКниги.Ссылка);
				
			ИначеЕсли Не ОбновитьТолькоСоставПодчиненных
				И (СтрАдреснойКниги.ОбъектДоступа <> ОбъектДоступа
					Или СтрАдреснойКниги.ОтображатьВАдреснойКниге <> ОтображениеЗаписей[СтрАдреснойКниги.Ссылка]) Тогда
				
				СтрокиКОбновлению.Добавить(СтрАдреснойКниги.Ссылка);
			КонецЕсли;
			
			ТекущиеПодчиненные[СтрАдреснойКниги.Объект] = Истина;
			
		КонецЦикла;
		
		// Получение массива к добавлению
		НовыеПодчиненныеОбъекты = Новый Массив;
		Для Каждого Подчиненный ИЗ СписокПодчиненных Цикл
			
			Если Подчиненный = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекущиеПодчиненные[Подчиненный] = Неопределено Тогда
				НовыеПодчиненныеОбъекты.Добавить(Подчиненный);
			КонецЕсли;
		КонецЦикла;
		
		МассивДляУдаления = Новый Массив;
		// Удаление старых
		Для Каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
			
			Если СтрНайти(Строка(УдаляемаяСтрока),"<Объект не найден>") <> 0 Тогда 
				
				УдаляемыйОбъект = УдаляемаяСтрока.ПолучитьОбъект();
				УдаляемыйОбъект.УстановитьПометкуУдаления(Истина);
				МассивДляУдаления.Добавить(УдаляемаяСтрока);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Добавление новых
		Для Каждого Подчиненный Из НовыеПодчиненныеОбъекты Цикл
			НовыйПодчиненный = СоздатьЭлемент();
			НовыйПодчиненный.Родитель = ОбъектАдреснойКниге;
			НовыйПодчиненный.Объект = Подчиненный;
			НовыйПодчиненный.РодительОбъекта = Объект;
			НовыйПодчиненный.ОбъектДоступа = ОбъектДоступа;
			УстановитьПорядокОбъектаВСписке(НовыйПодчиненный, Подчиненный, Объект);
			УстановитьПризнакОтображенияОбъектаВАдреснойКниге(НовыйПодчиненный, Подчиненный);
			УстановитьПредставлениеОбъектаВАдреснойКниге(НовыйПодчиненный, Подчиненный);
			НовыйПодчиненный.Записать();
		КонецЦикла;
		
		// Обновление строк старых подчиненных
		Для Каждого СтрДляОбновления Из СтрокиКОбновлению Цикл
			ПодчиненныйОбъект = СтрДляОбновления.ПолучитьОбъект();
			ПодчиненныйОбъект.ОбъектДоступа = ОбъектДоступа;
			УстановитьПризнакОтображенияОбъектаВАдреснойКниге(
				ПодчиненныйОбъект, ПодчиненныйОбъект.Объект);
			ПодчиненныйОбъект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	Для Каждого УдаляемаяСтрока Из МассивДляУдаления Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.АдреснаяКнига");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", УдаляемаяСтрока);
			Блокировка.Заблокировать();
			
			УдаляемыйОбъект = УдаляемаяСтрока.ПолучитьОбъект();
			Если УдаляемыйОбъект <> Неопределено Тогда
				УдаляемыйОбъект.Удалить();
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьДанныеОтображенияПодчиненногоОбъекта(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОбщегоНазначения.СсылкаСуществует(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	Разделы = Новый Массив;
	Разделы.Добавить(Избранное);
	
	ТипОбъекта = ТипЗнч(Объект);
	Если ТипОбъекта = Тип("СправочникСсылка.Сотрудники")
		Или ТипОбъекта = Тип("СправочникСсылка.Пользователи")
		Или ТипОбъекта = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		
		Разделы.Добавить(Сотрудники);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АдреснаяКнига.Ссылка,
		|	АдреснаяКнига.Родитель,
		|	АдреснаяКнига.Родитель.Объект КАК РодительОбъект,
		|	АдреснаяКнига.Родитель.ТипДанныхОбъекта КАК ТипДанныхОбъекта
		|ИЗ
		|	Справочник.АдреснаяКнига КАК АдреснаяКнига
		|ГДЕ
		|	АдреснаяКнига.Объект = &Объект
		|	И АдреснаяКнига.Ссылка В ИЕРАРХИИ(&Разделы)";
		
	Запрос.УстановитьПараметр("Разделы", Разделы);
	Запрос.УстановитьПараметр("Объект", Объект);
	
	ТаблицаРодителей = Новый ТаблицаЗначений;
	ТаблицаРодителей.Колонки.Добавить("Объект");
	ТаблицаРодителей.Колонки.Добавить("ЭлементАдреснойКниги");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		ЭлементАдреснойКниги = Выборка.Ссылка.ПолучитьОбъект();
		УстановитьПризнакОтображенияОбъектаВАдреснойКниге(ЭлементАдреснойКниги, Объект);
		УстановитьПредставлениеОбъектаВАдреснойКниге(ЭлементАдреснойКниги, Объект);
		ЭлементАдреснойКниги.Записать();
		РазблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		
		Если Выборка.ТипДанныхОбъекта = Перечисления.ТипыДанныхАдреснойКниги.ГруппаКонтактовПользователей Тогда
			НоваяСтрРодитель = ТаблицаРодителей.Добавить();
			НоваяСтрРодитель.Объект = Выборка.РодительОбъект;
			НоваяСтрРодитель.ЭлементАдреснойКниги = Выборка.Родитель;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаРодителей.Свернуть("Объект, ЭлементАдреснойКниги");
	
	Для Каждого СтрРодитель Из ТаблицаРодителей Цикл
		ЗаблокироватьДанныеДляРедактирования(СтрРодитель.ЭлементАдреснойКниги);
		ЭлементАдреснойКниги = СтрРодитель.ЭлементАдреснойКниги.ПолучитьОбъект();
		УстановитьПредставлениеОбъектаВАдреснойКниге(ЭлементАдреснойКниги, СтрРодитель.Объект);
		ЭлементАдреснойКниги.Записать();
		РазблокироватьДанныеДляРедактирования(СтрРодитель.ЭлементАдреснойКниги);
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в список сотрудников роли, исполнителями которых
// являются сотрудники из этого же списка.
//
Процедура РасширитьСписокСотрудниковРолями(СписокСотрудников,
	ВключатьТолькоРолиСотрудниковИзСписка = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Если ВключатьТолькоРолиСотрудниковИзСписка Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИсполнителиРолей.РольИсполнителя.Владелец КАК Роль
			|ИЗ
			|	РегистрСведений.ИсполнителиРолей КАК ИсполнителиРолей
			|ГДЕ
			|	ИсполнителиРолей.Исполнитель В (&СписокПользователей)";
		Запрос.УстановитьПараметр("СписокПользователей", СписокСотрудников);
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	РолиИсполнителей.Ссылка КАК Роль
			|ИЗ
			|	Справочник.РолиИсполнителей КАК РолиИсполнителей";
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокСотрудников.Добавить(Выборка.Роль);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьОбъект(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОбщегоНазначения.СсылкаСуществует(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	ОбъектВАдреснойКниге = 
		ПолучитьСсылкуНаОбъектВАдреснойКниге(Объект);
	
	ЗаблокироватьДанныеДляРедактирования(ОбъектВАдреснойКниге);
	ОбъектВАдреснойКниге = ОбъектВАдреснойКниге.ПолучитьОбъект();
	ОбъектВАдреснойКниге.Удалить();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура Заполнить() Экспорт
	
	Справочники.АдреснаяКнига.ОчиститьАдреснуюКнигу();
	Справочники.АдреснаяКнига.ЗаполнитьАдреснуюКнигу();
	РегистрыСведений.ОбъектыПоискаВАдреснойКниге.ЗаполнитьСловаПоиска();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьСсылкуНаОбъектВАдреснойКниге(
	Объект, Родитель = Неопределено, СсылкаНаРаздел = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Объект = Справочники.РабочиеГруппы.ВсеПользователи Тогда
		Возврат ВсеПользователи;
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ГруппыКонтактовПользователей")
		И НЕ ЗначениеЗаполнено(Родитель) Тогда
		
		Возврат Избранное;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(СсылкаНаРаздел) Тогда
		УсловиеПоРазделу = "	И АдреснаяКнига.Ссылка В ИЕРАРХИИ(&СсылкаНаРаздел)";
		Запрос.УстановитьПараметр("СсылкаНаРаздел", СсылкаНаРаздел);
	Иначе
		УсловиеПоРазделу = "";
	КонецЕсли;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АдреснаяКнига.Ссылка
		|ИЗ
		|	Справочник.АдреснаяКнига КАК АдреснаяКнига
		|ГДЕ
		|	АдреснаяКнига.Объект = &Объект
		|" + УсловиеПоРазделу;
	Запрос.УстановитьПараметр("Объект", Объект);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьПредопределенныеРазделы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		// Начальное заполнение разделов		
		РазделАдреснойКниги = Справочники.АдреснаяКнига.Избранное.ПолучитьОбъект();
		РазделАдреснойКниги.Объект = НСтр("ru = 'Избранное'");
		РазделАдреснойКниги.ОтображатьВАдреснойКниге = Истина;
		РазделАдреснойКниги.ПредставлениеОбъекта = РазделАдреснойКниги.Объект;
		РазделАдреснойКниги.ПорядокОбъектаВСписке = -13;
		РазделАдреснойКниги.Записать();
		
		РазделАдреснойКниги = Справочники.АдреснаяКнига.Организации.ПолучитьОбъект();
		РазделАдреснойКниги.Объект = РедакцииКонфигурацииКлиентСервер.Организации();
		РазделАдреснойКниги.ОтображатьВАдреснойКниге = Истина;
		РазделАдреснойКниги.ПредставлениеОбъекта = РазделАдреснойКниги.Объект;
		РазделАдреснойКниги.ПорядокОбъектаВСписке = -12;
		РазделАдреснойКниги.Записать();	
		
		РазделАдреснойКниги = Справочники.АдреснаяКнига.Сотрудники.ПолучитьОбъект();
		РазделАдреснойКниги.Объект = НСтр("ru = 'Сотрудники'");
		РазделАдреснойКниги.ОтображатьВАдреснойКниге = Истина;
		РазделАдреснойКниги.ПредставлениеОбъекта = РазделАдреснойКниги.Объект;
		РазделАдреснойКниги.ПорядокОбъектаВСписке = -11;
		РазделАдреснойКниги.Записать();
		
		РазделАдреснойКниги = Справочники.АдреснаяКнига.ПоСтруктуреПредприятия.ПолучитьОбъект();
		РазделАдреснойКниги.Объект = НСтр("ru = 'По подразделениям'");
		РазделАдреснойКниги.ОтображатьВАдреснойКниге = Истина;
		РазделАдреснойКниги.ПредставлениеОбъекта = РазделАдреснойКниги.Объект;
		РазделАдреснойКниги.ПорядокОбъектаВСписке = -10;
		РазделАдреснойКниги.Записать();
		
		РазделАдреснойКниги = Справочники.АдреснаяКнига.ПоРабочимГруппам.ПолучитьОбъект();
		РазделАдреснойКниги.Объект = НСтр("ru = 'По рабочим группам'");
		РазделАдреснойКниги.ОтображатьВАдреснойКниге = Истина;
		РазделАдреснойКниги.ПредставлениеОбъекта = РазделАдреснойКниги.Объект;
		РазделАдреснойКниги.ПорядокОбъектаВСписке = -9;
		РазделАдреснойКниги.Записать();
		
		РазделАдреснойКниги = Справочники.АдреснаяКнига.ПоМероприятиям.ПолучитьОбъект();
		РазделАдреснойКниги.Объект = НСтр("ru = 'По мероприятиям'");
		РазделАдреснойКниги.ОтображатьВАдреснойКниге = Истина;
		РазделАдреснойКниги.ПредставлениеОбъекта = РазделАдреснойКниги.Объект;
		РазделАдреснойКниги.ПорядокОбъектаВСписке = -8;
		РазделАдреснойКниги.Записать();
		
		РазделАдреснойКниги = Справочники.АдреснаяКнига.ПоПроектам.ПолучитьОбъект();
		РазделАдреснойКниги.Объект = НСтр("ru = 'По проектам'");
		РазделАдреснойКниги.ОтображатьВАдреснойКниге = Истина;
		РазделАдреснойКниги.ПредставлениеОбъекта = РазделАдреснойКниги.Объект;
		РазделАдреснойКниги.ПорядокОбъектаВСписке = -7;
		РазделАдреснойКниги.Записать();
		
		РазделАдреснойКниги = Справочники.АдреснаяКнига.АвтоподстановкиДляПроцессов.ПолучитьОбъект();
		РазделАдреснойКниги.Объект = НСтр("ru = 'Автоподстановки'");
		РазделАдреснойКниги.ОтображатьВАдреснойКниге = Истина;
		РазделАдреснойКниги.ПредставлениеОбъекта = РазделАдреснойКниги.Объект;
		РазделАдреснойКниги.ПорядокОбъектаВСписке = -6;
		РазделАдреснойКниги.Записать();
		
		РазделАдреснойКниги = Справочники.АдреснаяКнига.АвтоподстановкиДляДокументов.ПолучитьОбъект();
		РазделАдреснойКниги.Объект = НСтр("ru = 'Автоподстановки'");
		РазделАдреснойКниги.ОтображатьВАдреснойКниге = Истина;
		РазделАдреснойКниги.ПредставлениеОбъекта = РазделАдреснойКниги.Объект;
		РазделАдреснойКниги.ПорядокОбъектаВСписке = -5;
		РазделАдреснойКниги.Записать();
		
		РазделАдреснойКниги = Справочники.АдреснаяКнига.АвтоподстановкиДляЗадач.ПолучитьОбъект();
		РазделАдреснойКниги.Объект = НСтр("ru = 'Автоподстановки'");
		РазделАдреснойКниги.ОтображатьВАдреснойКниге = Истина;
		РазделАдреснойКниги.ПредставлениеОбъекта = РазделАдреснойКниги.Объект;
		РазделАдреснойКниги.ПорядокОбъектаВСписке = -5;
		РазделАдреснойКниги.Записать();
		
		РазделАдреснойКниги = Справочники.АдреснаяКнига.АвтоподстановкиДляМероприятий.ПолучитьОбъект();
		РазделАдреснойКниги.Объект = НСтр("ru = 'Автоподстановки'");
		РазделАдреснойКниги.ОтображатьВАдреснойКниге = Истина;
		РазделАдреснойКниги.ПредставлениеОбъекта = РазделАдреснойКниги.Объект;
		РазделАдреснойКниги.ПорядокОбъектаВСписке = -5;
		РазделАдреснойКниги.Записать();
		
		РазделАдреснойКниги = Справочники.АдреснаяКнига.АвтоподстановкиДляЗадачПроцессов.ПолучитьОбъект();
		РазделАдреснойКниги.Объект = НСтр("ru = 'Автоподстановки'");
		РазделАдреснойКниги.ОтображатьВАдреснойКниге = Истина;
		РазделАдреснойКниги.ПредставлениеОбъекта = РазделАдреснойКниги.Объект;
		РазделАдреснойКниги.ПорядокОбъектаВСписке = -5;
		РазделАдреснойКниги.Записать();
		
		РазделАдреснойКниги = Справочники.АдреснаяКнига.ВсеАвтоподстановки.ПолучитьОбъект();
		РазделАдреснойКниги.Объект = НСтр("ru = 'Автоподстановки'");
		РазделАдреснойКниги.ОтображатьВАдреснойКниге = Истина;
		РазделАдреснойКниги.ПредставлениеОбъекта = РазделАдреснойКниги.Объект;
		РазделАдреснойКниги.ПорядокОбъектаВСписке = -5;
		РазделАдреснойКниги.Записать();
		
		РазделАдреснойКниги = Справочники.АдреснаяКнига.Роли.ПолучитьОбъект();
		РазделАдреснойКниги.Объект = НСтр("ru = 'Роли'");
		РазделАдреснойКниги.ОтображатьВАдреснойКниге = Истина;
		РазделАдреснойКниги.ПредставлениеОбъекта = РазделАдреснойКниги.Объект;
		РазделАдреснойКниги.ПорядокОбъектаВСписке = -4;
		РазделАдреснойКниги.Записать();
		
		РазделАдреснойКниги = Справочники.АдреснаяКнига.Контрагенты.ПолучитьОбъект();
		РазделАдреснойКниги.Объект = НСтр("ru = 'Контрагенты'");
		РазделАдреснойКниги.ОтображатьВАдреснойКниге = Истина;
		РазделАдреснойКниги.ПредставлениеОбъекта = РазделАдреснойКниги.Объект;
		РазделАдреснойКниги.ПорядокОбъектаВСписке = -3;
		РазделАдреснойКниги.Записать();
		
		РазделАдреснойКниги = Справочники.АдреснаяКнига.ЛичныеАдресаты.ПолучитьОбъект();
		РазделАдреснойКниги.Объект = НСтр("ru = 'Личные адресаты'");
		РазделАдреснойКниги.ОтображатьВАдреснойКниге = Истина;
		РазделАдреснойКниги.ПредставлениеОбъекта = РазделАдреснойКниги.Объект;
		РазделАдреснойКниги.ПорядокОбъектаВСписке = -2;
		РазделАдреснойКниги.Записать();
		
		РазделАдреснойКниги = Справочники.АдреснаяКнига.ВсеПользователи.ПолучитьОбъект();
		РазделАдреснойКниги.Объект = Справочники.РабочиеГруппы.ВсеПользователи;
		РазделАдреснойКниги.ОтображатьВАдреснойКниге = Истина;
		РазделАдреснойКниги.ПредставлениеОбъекта = РазделАдреснойКниги.Объект;
		РазделАдреснойКниги.ПорядокОбъектаВСписке = 0;
		РазделАдреснойКниги.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьАдреснуюКнигу() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьПредопределенныеРазделы();
	
	// Избранное
	Выборка = Справочники.ГруппыКонтактовПользователей.ВыбратьИерархически();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ОбщийСписокРассылки Тогда
			ОбъектДоступа = Выборка.Ссылка;
		Иначе
			ОбъектДоступа = Выборка.Автор;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
			ОбновитьДанныеОбъекта(
				Выборка.Ссылка,
				Выборка.Родитель,
				Справочники.АдреснаяКнига.Избранное,
				ОбъектДоступа);
		КонецЕсли;
		
		КонтактыГруппы = Новый Массив;
		Для Каждого СтрКонтакт Из Выборка.Контакты Цикл
			Если ЗначениеЗаполнено(СтрКонтакт.Контакт) Тогда
				КонтактыГруппы.Добавить(СтрКонтакт.Контакт);
			Иначе
				КонтактыГруппы.Добавить(СтрКонтакт.КонтактнаяИнформация);
			КонецЕсли;
		КонецЦикла;
		
		ОбновитьСписокПодчиненныхОбъектов(
			Выборка.Ссылка,
			Выборка.Родитель,
			КонтактыГруппы,
			Справочники.АдреснаяКнига.Избранное,
			ОбъектДоступа);
		
	КонецЦикла;
	Выборка = Неопределено;
	
	// По структуре предприятия
	Выборка = Справочники.СтруктураПредприятия.ВыбратьИерархически();
	Пока Выборка.Следующий() Цикл
		ОбновитьДанныеОбъекта(
			Выборка.Ссылка,
			Выборка.Родитель,
			Справочники.АдреснаяКнига.ПоСтруктуреПредприятия);
		
		МодульСотрудники = ОбщегоНазначения.ОбщийМодуль("Сотрудники");		
		СотрудникиПодразделения = МодульСотрудники.СотрудникиПодразделения(Выборка.Ссылка, Ложь);
		
		РасширитьСписокСотрудниковРолями(СотрудникиПодразделения);
				
		ОбновитьСписокПодчиненныхОбъектов(
			Выборка.Ссылка,
			Выборка.Родитель,
			СотрудникиПодразделения,
			Справочники.АдреснаяКнига.ПоСтруктуреПредприятия);
		
	КонецЦикла;
	Выборка = Неопределено;
	
	// По рабочим группам
	Выборка = Справочники.РабочиеГруппы.ВыбратьИерархически();
	Пока Выборка.Следующий() Цикл
		ОбновитьДанныеОбъекта(
			Выборка.Ссылка,
			Выборка.Родитель,
			Справочники.АдреснаяКнига.ПоРабочимГруппам);
			
		Если Выборка.Ссылка = Справочники.РабочиеГруппы.ВсеПользователи Тогда
			ЗапросПодчиненных = Новый Запрос(
			"ВЫБРАТЬ
			|	Сотрудники.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники");
			Состав = ЗапросПодчиненных.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
			ВключатьТолькоРолиСотрудниковИзСписка = Ложь;
		Иначе
			Состав = Выборка.Состав.ВыгрузитьКолонку("Участник");
			ВключатьТолькоРолиСотрудниковИзСписка = Истина;
		КонецЕсли;
		
		РасширитьСписокСотрудниковРолями(Состав, ВключатьТолькоРолиСотрудниковИзСписка);
		
		ОбновитьСписокПодчиненныхОбъектов(
			Выборка.Ссылка,
			Выборка.Родитель,
			Состав,
			Справочники.АдреснаяКнига.ПоРабочимГруппам);
	КонецЦикла;
	Выборка = Неопределено;
		
	// По мероприятиям
	Выборка = Справочники.ПапкиМероприятий.ВыбратьИерархически();
	Пока Выборка.Следующий() Цикл
		ОбновитьДанныеОбъекта(
			Выборка.Ссылка,
			Выборка.Родитель,
			Справочники.АдреснаяКнига.ПоМероприятиям,
			Выборка.Ссылка);
	КонецЦикла;
	Выборка = Неопределено;
	
	ЗапросПодчиненных = Новый Запрос(
	"ВЫБРАТЬ
	|	УчастникиМероприятия.Исполнитель КАК Исполнитель
	|ИЗ
	|	РегистрСведений.УчастникиМероприятия КАК УчастникиМероприятия
	|ГДЕ
	|	УчастникиМероприятия.Мероприятие = &Мероприятие
	|	И ТИПЗНАЧЕНИЯ(УчастникиМероприятия.Исполнитель) В (ТИП(Справочник.Сотрудники), ТИП(Справочник.Пользователи), ТИП(Справочник.РолиИсполнителей))
	|
	|СГРУППИРОВАТЬ ПО
	|	УчастникиМероприятия.Исполнитель");
	
	Выборка = Справочники.Мероприятия.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбновитьДанныеОбъекта(
			Выборка.Ссылка,
			Выборка.Папка,
			Справочники.АдреснаяКнига.ПоМероприятиям,
			Выборка.Ссылка);
			
		ЗапросПодчиненных.УстановитьПараметр("Мероприятие", Выборка.Ссылка);
		
		ОбновитьСписокПодчиненныхОбъектов(
			Выборка.Ссылка,
			Выборка.Родитель,
			ЗапросПодчиненных.Выполнить().Выгрузить().ВыгрузитьКолонку(0),
			Справочники.АдреснаяКнига.ПоМероприятиям,
			Выборка.Ссылка);
	КонецЦикла;
	Выборка = Неопределено;
	
	// По проектам
	Выборка = Справочники.ПапкиПроектов.ВыбратьИерархически();
	Пока Выборка.Следующий() Цикл
		ОбновитьДанныеОбъекта(
			Выборка.Ссылка,
			Выборка.Родитель,
			Справочники.АдреснаяКнига.ПоПроектам,
			Выборка.Ссылка);
	КонецЦикла;
	Выборка = Неопределено;
	
	Выборка = Справочники.Проекты.ВыбратьИерархически();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		ОбновитьДанныеОбъекта(
			Выборка.Ссылка,
			Выборка.Папка,
			Справочники.АдреснаяКнига.ПоПроектам,
			Выборка.Ссылка);
		
		ПроектнаяКоманда = Выборка.ПроектнаяКоманда.ВыгрузитьКолонку("Исполнитель");
		
		ИндексУчастникаПроекта = ПроектнаяКоманда.Количество() - 1;
		Пока ИндексУчастникаПроекта >= 0 Цикл
			УчастникПроекта = ПроектнаяКоманда[ИндексУчастникаПроекта];
			ТипУчастника = ТипЗнч(УчастникПроекта);
			Если ТипУчастника <> Тип("СправочникСсылка.Сотрудники")
				И ТипУчастника <> Тип("СправочникСсылка.Пользователи")
				И ТипУчастника <> Тип("СправочникСсылка.РолиИсполнителей") Тогда
				
				ПроектнаяКоманда.Удалить(ИндексУчастникаПроекта);
			КонецЕсли;
			ИндексУчастникаПроекта = ИндексУчастникаПроекта - 1;
		КонецЦикла;
		
		ОбновитьСписокПодчиненныхОбъектов(
			Выборка.Ссылка,
			Выборка.Родитель,
			ПроектнаяКоманда,
			Справочники.АдреснаяКнига.ПоПроектам,
			Выборка.Ссылка);
		
	КонецЦикла;
	Выборка = Неопределено;
	
	// Роли
	Выборка = Справочники.РолиИсполнителей.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбновитьДанныеОбъекта(
			Выборка.Ссылка,
			Неопределено,
			Справочники.АдреснаяКнига.Роли);
	КонецЦикла;
	Выборка = Неопределено;
	
	// Контрагенты
	Выборка = Справочники.Контрагенты.ВыбратьИерархически();
	Пока Выборка.Следующий() Цикл
		ОбновитьДанныеОбъекта(
			Выборка.Ссылка,
			Выборка.Родитель,
			Справочники.АдреснаяКнига.Контрагенты,
			Выборка.Ссылка);
	КонецЦикла;
	Выборка = Неопределено;
	
	Выборка = Справочники.КонтактныеЛица.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбновитьДанныеОбъекта(
			Выборка.Ссылка,
			Выборка.Владелец,
			Справочники.АдреснаяКнига.Контрагенты,
			Выборка.Ссылка);
	КонецЦикла;
	Выборка = Неопределено;
	
	// Личные адресаты
	Выборка = Справочники.ГруппыЛичныхАдресатов.ВыбратьИерархически();
	Пока Выборка.Следующий() Цикл
		ОбновитьДанныеОбъекта(
			Выборка.Ссылка,
			Выборка.Родитель,
			Справочники.АдреснаяКнига.ЛичныеАдресаты,
			Выборка.Сотрудник);
	КонецЦикла;
	Выборка = Неопределено;
	
	Выборка = Справочники.ЛичныеАдресаты.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбновитьДанныеОбъекта(
			Выборка.Ссылка,
			Выборка.Группа,
			Справочники.АдреснаяКнига.ЛичныеАдресаты,
			Выборка.Сотрудник);
	КонецЦикла;
	Выборка = Неопределено;
	
	// Организации
	Выборка = Справочники.Организации.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбновитьДанныеОбъекта(
			Выборка.Ссылка,
			Неопределено,
			Справочники.АдреснаяКнига.Организации);
	КонецЦикла;
	Выборка = Неопределено;	
	
	// Автоподстановки для объектов
	Выборка = Справочники.АвтоподстановкиДляОбъектов.ВыбратьИерархически();
	Пока Выборка.Следующий() Цикл
		РазделыАдреснойКниги =
			Справочники.АвтоподстановкиДляОбъектов.РазделыАдреснойКниги(Выборка.ТипОбъекта);
		Для Каждого РазделАдреснойКниги Из РазделыАдреснойКниги Цикл
			ОбновитьДанныеОбъекта(
				Выборка.Ссылка,
				Выборка.Родитель,
				РазделАдреснойКниги);
		КонецЦикла;
	КонецЦикла;
	Выборка = Неопределено;
	
	// Автоподстановки для процессов
	Выборка = Справочники.АвтоподстановкиДляПроцессов.ВыбратьИерархически();
	Пока Выборка.Следующий() Цикл
		ОбновитьДанныеОбъекта(
			Выборка.Ссылка,
			Выборка.Родитель,
			Справочники.АдреснаяКнига.АвтоподстановкиДляПроцессов);
	КонецЦикла;
	Выборка = Неопределено;
	
КонецПроцедуры

Процедура ОчиститьАдреснуюКнигу() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Справочники.АдреснаяКнига.ВыбратьИерархически(Справочники.АдреснаяКнига.ПустаяСсылка(),);
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Предопределенный Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектАдреснойКниги = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектАдреснойКниги.Удалить();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьПорядокОбъектаВСписке(ЭлементАдреснойКниги, Объект, РодительОбъекта)
	
	Если ЭлементАдреснойКниги.Предопределенный Тогда
		Возврат;
	КонецЕсли;
	
	ПорядокОбъектаВСписке = 99;
	
	ТипОбъекта = ТипЗнч(Объект);
	
	Если ТипОбъекта = Тип("СправочникСсылка.СтруктураПредприятия")
		ИЛИ ТипОбъекта = Тип("СправочникСсылка.РабочиеГруппы")
		ИЛИ ТипОбъекта = Тип("СправочникСсылка.ПапкиМероприятий")
		ИЛИ ТипОбъекта = Тип("СправочникСсылка.ПапкиПроектов")
		ИЛИ ТипОбъекта = Тип("СправочникСсылка.ГруппыКонтактовПользователей")
		ИЛИ ТипОбъекта = Тип("СправочникСсылка.ГруппыЛичныхАдресатов") Тогда
		
		ПорядокОбъектаВСписке = 1;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Проекты")
		ИЛИ ТипОбъекта = Тип("СправочникСсылка.Мероприятия") Тогда
		ПорядокОбъектаВСписке = 3;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		ПорядокОбъектаВСписке = 4;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Сотрудники") Тогда
		ПорядокОбъектаВСписке = 5;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Пользователи") Тогда
		ПорядокОбъектаВСписке = 5;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Контрагенты") Тогда
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ЭтоГруппа") Тогда
			ПорядокОбъектаВСписке = 1;
		Иначе
			ПорядокОбъектаВСписке = 2;
		КонецЕсли;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ЛичныеАдресаты")
		ИЛИ ТипОбъекта = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		ПорядокОбъектаВСписке = 6;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РодительОбъекта) Тогда
		ТипРодителя = ТипЗнч(РодительОбъекта);
		Если ТипРодителя = Тип("СправочникСсылка.ГруппыКонтактовПользователей") Тогда
			Если ТипОбъекта = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
				ПорядокОбъектаВСписке = 3;
			ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.РабочиеГруппы") Тогда
				ПорядокОбъектаВСписке = 7;
			ИначеЕсли ТипОбъекта = Тип("Строка") Тогда
				СписокФункций = РаботаСАдреснойКнигой.ПолучитьСписокДоступныхФункций();
				ЭтоАвтоподстановка = Ложь;
				Для Инд = 0 По СписокФункций.Количество() - 1 Цикл
					Если СписокФункций[Инд].Представление = Объект Тогда 
						ЭтоАвтоподстановка = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ЭтоАвтоподстановка Тогда
					ПорядокОбъектаВСписке = 7;
				Иначе
					ПорядокОбъектаВСписке = 3;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементАдреснойКниги.ПорядокОбъектаВСписке = ПорядокОбъектаВСписке;
	
КонецПроцедуры

Процедура УстановитьПредставлениеОбъектаВАдреснойКниге(ЭлементАдреснойКниги, Объект)
	
	ДополнительныеОписание = "";
	
	ТипДанныхРодителя = Неопределено;
	Если ЗначениеЗаполнено(ЭлементАдреснойКниги.Родитель) Тогда
		ТипДанныхРодителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ЭлементАдреснойКниги.Родитель, "ТипДанныхОбъекта");
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.ГруппыКонтактовПользователей") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ГруппыКонтактовПользователейКонтакты.Контакт
			|ИЗ
			|	Справочник.ГруппыКонтактовПользователей.Контакты КАК ГруппыКонтактовПользователейКонтакты
			|ГДЕ
			|	ГруппыКонтактовПользователейКонтакты.Ссылка = &Группа
			|	И ВЫБОР
			|			КОГДА ГруппыКонтактовПользователейКонтакты.Контакт ССЫЛКА Справочник.Пользователи
			|				ТОГДА ЕСТЬNULL(ГруппыКонтактовПользователейКонтакты.Контакт.ПометкаУдаления = ЛОЖЬ, ИСТИНА)
			|						И ЕСТЬNULL(ГруппыКонтактовПользователейКонтакты.Контакт.Служебный = ЛОЖЬ, ИСТИНА)
			|						И ЕСТЬNULL(ГруппыКонтактовПользователейКонтакты.Контакт.Недействителен = ЛОЖЬ, ИСТИНА)
			|			КОГДА ТИПЗНАЧЕНИЯ(ГруппыКонтактовПользователейКонтакты.Контакт) = ТИП(СТРОКА)
			|					ИЛИ ГруппыКонтактовПользователейКонтакты.Контакт = НЕОПРЕДЕЛЕНО
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЕСТЬNULL(ГруппыКонтактовПользователейКонтакты.Контакт.ПометкаУдаления = ЛОЖЬ, ИСТИНА)
			|		КОНЕЦ";
			
		Запрос.УстановитьПараметр("Группа", Объект);
		Выборка = Запрос.Выполнить().Выбрать();
		КоличествоПодчиненных = Выборка.Количество();
		ДополнительныеОписание = " (" + КоличествоПодчиненных + ")";
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.РабочиеГруппы")
		И (ТипДанныхРодителя = Перечисления.ТипыДанныхАдреснойКниги.ГруппаКонтактовПользователей
			Или ЭлементАдреснойКниги.Родитель = Справочники.АдреснаяКнига.Избранное) Тогда
		
		ДополнительныеОписание = НСтр("ru = ' (Рабочая группа)'");
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.СтруктураПредприятия")
		И (ТипДанныхРодителя = Перечисления.ТипыДанныхАдреснойКниги.ГруппаКонтактовПользователей
			Или ЭлементАдреснойКниги.Родитель = Справочники.АдреснаяКнига.Избранное) Тогда
		
		ДополнительныеОписание = НСтр("ru = ' (Подразделение)'");
		
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Сотрудники") Тогда
		ЭлементАдреснойКниги.ПредставлениеОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект, "ПредставлениеВПереписке");
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Пользователи") Тогда
		ЭлементАдреснойКниги.ПредставлениеОбъекта = 
			ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				Объект, "ПредставлениеВПерепискеСРангом");
	Иначе
		ЭлементАдреснойКниги.ПредставлениеОбъекта = Строка(Объект) + ДополнительныеОписание;
	КонецЕсли;
	
КонецПроцедуры

// Рассчитывает и возвращает признак отображения переданных записей адресной книги.
//
// Параметры:
//  ТаблицаЗначений:
//   * Ссылка - СправочникСсылка.АдреснаяКнига
//   * Родитель - СправочникСсылка.АдреснаяКнига
//   * Объект - СправочникСсылка.Сотрудники, СправочникСсылка.Контрагенты, СправочникСсылка.ГруппыЛичныхАдресатов, СправочникСсылка.Проекты, СправочникСсылка.ЛичныеАдресаты, СправочникСсылка.ДОУ_БизнесЕдиницы, СправочникСсылка.СтруктураПредприятия, СправочникСсылка.РолиИсполнителей, СправочникСсылка.АвтоподстановкиДляОбъектов, СправочникСсылка.РабочиеГруппы, Строка, СправочникСсылка.Пользователи, СправочникСсылка.Организации, СправочникСсылка.ГруппыКонтактовПользователей, СправочникСсылка.ПапкиПроектов, СправочникСсылка.АвтоподстановкиДляПроцессов, СправочникСсылка.Мероприятия, СправочникСсылка.КонтактныеЛица, СправочникСсылка.ПапкиМероприятий
//   * РодительОбъекта - СправочникСсылка.Проекты, СправочникСсылка.ДОУ_БизнесЕдиницы, СправочникСсылка.СтруктураПредприятия, СправочникСсылка.АвтоподстановкиДляОбъектов, СправочникСсылка.РабочиеГруппы, СправочникСсылка.ГруппыКонтактовПользователей, СправочникСсылка.АвтоподстановкиДляПроцессов, СправочникСсылка.Мероприятия
//   * ОтображатьРодителяВАдреснойКниге - Булево
//   * ПометкаУдаленияОбъекта - Булево
//
// Возвращаемое значение:
//  Соответствие - отображение ссылок адресной книги.
//   * Ключ - СправочникСсылка.АдреснаяКнига
//	 * Значение - Булево
//
Функция ОтображениеЗаписейВАдреснойКниге(ЗаписиАдреснойКниги)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаписиАдреснойКниги", ЗаписиАдреснойКниги);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаписиАдреснойКниги.Ссылка КАК Ссылка,
		|	ЗаписиАдреснойКниги.Родитель КАК Родитель,
		|	ЗаписиАдреснойКниги.Объект КАК Объект,
		|	ЗаписиАдреснойКниги.РодительОбъекта КАК РодительОбъекта,
		|	ЗаписиАдреснойКниги.ОтображатьРодителяВАдреснойКниге КАК ОтображатьРодителяВАдреснойКниге,
		|	ЗаписиАдреснойКниги.ПометкаУдаленияОбъекта КАК ПометкаУдаленияОбъекта
		|ПОМЕСТИТЬ ЗаписиАдреснойКниги
		|ИЗ
		|	&ЗаписиАдреснойКниги КАК ЗаписиАдреснойКниги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаписиАдреснойКниги0.Ссылка КАК Ссылка,
		|	ЛОЖЬ КАК ОтображатьВАдреснойКниге,
		|	0 КАК Приоритет
		|ИЗ
		|	ЗаписиАдреснойКниги КАК ЗаписиАдреснойКниги0
		|ГДЕ
		|	ЗаписиАдреснойКниги0.РодительОбъекта ССЫЛКА Справочник.СтруктураПредприятия
		|	И ЗаписиАдреснойКниги0.Родитель <> ЗНАЧЕНИЕ(Справочник.АдреснаяКнига.ПустаяСсылка)
		|	И ЗаписиАдреснойКниги0.ОтображатьРодителяВАдреснойКниге = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаписиАдреснойКниги0.Ссылка,
		|	ЛОЖЬ,
		|	0
		|ИЗ
		|	ЗаписиАдреснойКниги КАК ЗаписиАдреснойКниги0
		|ГДЕ
		|	ЗаписиАдреснойКниги0.РодительОбъекта ССЫЛКА Справочник.РабочиеГруппы
		|	И ЗаписиАдреснойКниги0.Родитель <> ЗНАЧЕНИЕ(Справочник.АдреснаяКнига.ПустаяСсылка)
		|	И ЗаписиАдреснойКниги0.ОтображатьРодителяВАдреснойКниге = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаписиАдреснойКниги0.Ссылка,
		|	ЛОЖЬ,
		|	0
		|ИЗ
		|	ЗаписиАдреснойКниги КАК ЗаписиАдреснойКниги0
		|ГДЕ
		|	ЗаписиАдреснойКниги0.РодительОбъекта ССЫЛКА Справочник.ГруппыКонтактовПользователей
		|	И ЗаписиАдреснойКниги0.Родитель <> ЗНАЧЕНИЕ(Справочник.АдреснаяКнига.ПустаяСсылка)
		|	И ЗаписиАдреснойКниги0.ОтображатьРодителяВАдреснойКниге = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаписиАдреснойКниги0.Ссылка,
		|	ЛОЖЬ,
		|	0
		|ИЗ
		|	ЗаписиАдреснойКниги КАК ЗаписиАдреснойКниги0
		|ГДЕ
		|	ЗаписиАдреснойКниги0.РодительОбъекта ССЫЛКА Справочник.Мероприятия
		|	И ЗаписиАдреснойКниги0.Родитель <> ЗНАЧЕНИЕ(Справочник.АдреснаяКнига.ПустаяСсылка)
		|	И ЗаписиАдреснойКниги0.ОтображатьРодителяВАдреснойКниге = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаписиАдреснойКниги0.Ссылка,
		|	ЛОЖЬ,
		|	0
		|ИЗ
		|	ЗаписиАдреснойКниги КАК ЗаписиАдреснойКниги0
		|ГДЕ
		|	ЗаписиАдреснойКниги0.РодительОбъекта ССЫЛКА Справочник.Проекты
		|	И ЗаписиАдреснойКниги0.Родитель <> ЗНАЧЕНИЕ(Справочник.АдреснаяКнига.ПустаяСсылка)
		|	И ЗаписиАдреснойКниги0.ОтображатьРодителяВАдреснойКниге = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаписиАдреснойКниги1.Ссылка,
		|	Сотрудники.ПометкаУдаления = ЛОЖЬ
		|	И Сотрудники.Действует = ИСТИНА,
		|	1
		|ИЗ
		|	ЗаписиАдреснойКниги КАК ЗаписиАдреснойКниги1
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ЗаписиАдреснойКниги1.Объект = Сотрудники.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаписиАдреснойКниги1.Ссылка,
		|	НЕ Пользователи.ПометкаУдаления
		|	И НЕ Пользователи.Недействителен
		|	И НЕ Пользователи.Служебный,
		|	1
		|ИЗ
		|	ЗаписиАдреснойКниги КАК ЗаписиАдреснойКниги1
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО ЗаписиАдреснойКниги1.Объект = Пользователи.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаписиАдреснойКниги1.Ссылка,
		|	РабочиеГруппы.ПометкаУдаления <> ИСТИНА
		|	И РабочиеГруппы.Недействительна <> ИСТИНА,
		|	1
		|ИЗ
		|	ЗаписиАдреснойКниги КАК ЗаписиАдреснойКниги1
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РабочиеГруппы КАК РабочиеГруппы
		|		ПО ЗаписиАдреснойКниги1.Объект = РабочиеГруппы.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаписиАдреснойКниги1.Ссылка,
		|	КонтактныеЛица.ПометкаУдаления <> ИСТИНА
		|	И КонтактныеЛица.НеДействует <> ИСТИНА,
		|	1
		|ИЗ
		|	ЗаписиАдреснойКниги КАК ЗаписиАдреснойКниги1
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица КАК КонтактныеЛица
		|		ПО ЗаписиАдреснойКниги1.Объект = КонтактныеЛица.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаписиАдреснойКниги2.Ссылка,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ЗаписиАдреснойКниги2.Объект) = ТИП(СТРОКА)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЕСТЬNULL(НЕ ЗаписиАдреснойКниги2.ПометкаУдаленияОбъекта, ИСТИНА)
		|	КОНЕЦ,
		|	2
		|ИЗ
		|	ЗаписиАдреснойКниги КАК ЗаписиАдреснойКниги2
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОтображениеЗаписей = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		ОтображениеЗаписей[Выборка.Ссылка] = Выборка.ОтображатьВАдреснойКниге;
	КонецЦикла;
	
	Возврат ОтображениеЗаписей;
	
КонецФункции

Процедура УстановитьПризнакОтображенияОбъектаВАдреснойКниге(ЭлементАдреснойКниги, Объект)
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	МетаданныеАдрКниги = Метаданные.Справочники.АдреснаяКнига;
	
	ТаблицаЗначений.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.АдреснаяКнига"));
	ТаблицаЗначений.Колонки.Добавить("Родитель", Новый ОписаниеТипов("СправочникСсылка.АдреснаяКнига"));
	ТаблицаЗначений.Колонки.Добавить("Объект", МетаданныеАдрКниги.Реквизиты.Объект.Тип);
	ТаблицаЗначений.Колонки.Добавить("РодительОбъекта", МетаданныеАдрКниги.Реквизиты.РодительОбъекта.Тип);
	ТаблицаЗначений.Колонки.Добавить("ОтображатьРодителяВАдреснойКниге", Новый ОписаниеТипов("Булево"));
	ТаблицаЗначений.Колонки.Добавить("ПометкаУдаленияОбъекта", Новый ОписаниеТипов("Булево"));
	
	СтрокаТаблицы = ТаблицаЗначений.Добавить();
	СтрокаТаблицы.Ссылка = ЭлементАдреснойКниги.Ссылка;
	СтрокаТаблицы.Родитель = ЭлементАдреснойКниги.Родитель;
	СтрокаТаблицы.Объект = Объект;
	СтрокаТаблицы.РодительОбъекта = ЭлементАдреснойКниги.РодительОбъекта;
	
	СтрокаТаблицы.ОтображатьРодителяВАдреснойКниге = Истина;
	Если ЗначениеЗаполнено(СтрокаТаблицы.Родитель) Тогда
		СтрокаТаблицы.ОтображатьРодителяВАдреснойКниге = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				СтрокаТаблицы.Родитель, "ОтображатьВАдреснойКниге");
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Объект)) Тогда
		СтрокаТаблицы.ПометкаУдаленияОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект, "ПометкаУдаления");
	КонецЕсли;
	
	ОтображениеЗаписей = ОтображениеЗаписейВАдреснойКниге(ТаблицаЗначений);
	
	ЭлементАдреснойКниги.ОтображатьВАдреснойКниге = ОтображениеЗаписей[ЭлементАдреснойКниги.Ссылка];
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
