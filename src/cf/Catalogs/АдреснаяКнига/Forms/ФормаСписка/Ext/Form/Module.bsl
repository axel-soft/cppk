
&НаКлиенте
Перем ИсточникПеретаскивания;

#Область ОписаниеПараметровФормы

//   ЗаголовокФормы - значение устанавливается в заголовок формы
//   ЗаголовокСпискаАдреснойКниги - значение устанавливается в заголовок над строкой поиска и деревом адресатов.
//   ЗаголовокСпискаВыбранных - значение устанавливается в заголовок над таблицей ВыбранныеАдресаты
//   РежимРаботыФормы - Число - может принимать значения 0,1,2.
//     0 - в форме отсутствует возможность выбора адресатов.
//     1 - можно выбрать одного адресата (выбор)
//     2 - множественный выбор адресатов (подбор)
//   УпрощенныйИнтерфейс - Булево - Истина, если результатом выбора и параметром ВыбранныеАдресаты является
//     ссылка (РежимРаботыФормы = 1) или массив ссылок (РежимРаботыФормы = 2), а не массив структур.
//   ОтображатьСотрудников - Булево - при указании значения Истина, отображается раздел Сотрудники
//                                    с подчиненными разделами и пользователями.
//   ОтображатьРоли - Булево -  при указании значения Истина, отображается раздел Сотрудники
//                              с подчиненными разделами и ролями.
//   ОтображатьАвтоподстановкиПоДокументам - Булево - при указании значения Истина, отображается раздел
//                                                    АвтоподстановкиДляДокументов
//   ОтображатьАвтоподстановкиПоМероприятиям - Булево - при указании значения Истина, отображается раздел
//                                                    АвтоподстановкиДляМероприятий
//   ОтображатьАвтоподстановкиПоПроцессам - Булево - при указании значения Истина, отображается раздел
//                                                    АвтоподстановкиДляПроцессов
//   ОтображатьАвтоподстановкиПоЗадачам - Булево - при указании значения Истина, отображается раздел
//                                                    АвтоподстановкиДляЗадач
//   ОтображатьАвтоподстановкиПоЗадачамПроцессов - Булево - при указании значения Истина, отображается раздел
//                                                    АвтоподстановкиДляЗадачПроцессов
//   ОтображатьВсеАвтоподстановки - Булево - при указании значения Истина, отображается все разделы Автоподстановок
//   ОтображатьКонтрагентов - Булево - при указании значения Истина отображается раздел Контрагенты.
//   ОтображатьОрганизации - Булево - при указании значения Истина отображается раздел Организации.
//   ОтображатьЛичныхАдресатов - Булево - при указании значения Истина отображается раздел ЛичныеАдресаты.
//   ИменаПредметов - СписокЗначений - список имен предметов, для которых выбирается автоподстановка.
//   ВыбранныеАдресаты - Массив структур - для УпрощенныйИнтерфейс = Ложь, или
//                     - Ссылка - для УпрощенныйИнтерфейс = Истина и РежимРаботыФормы = 1, или
//                     - Массив ссылок - для УпрощенныйИнтерфейс = Истина и РежимРаботыФормы = 2.
//                     Ранее выбранный адресат или адресаты.
//   СписокОтбора - СписокЗначений - содержит возможные значения отображения и поиска в адресной книге.
//   КонтролироватьДублиАдресатов - Булево - признак необходимости контроля дублей в списке выбранных адресатов.
//   КонтролироватьСотрудниковБезПользователя - Булево - при указании значения Истина отображается предупреждение о
//                                   					 сотруднике без пользователя в момент его выбора.
//   ГруппаПоУмолчанию - ПеречислениеСсылка.ТипыАдресатов - Указывает какой тип адреса следует установить по умолчанию
//                                                          выбранным адресатам.
//   ПоказыватьТипАдресов - Булево - при указании значения Истина отображается переключатель выбора типа
//                                   адресов для выбранных контактов.
//   УчетнаяЗаписьПочты - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись, которая используется
//                                                                         для определения списков электронных
//                                                                         адресов.
//   ВыбиратьЭлектронныеАдреса - Булево - при указании значения Истина выбираются адресаты с электронными адресами.
//                                        При выборе осуществляется проверка наличия электронного адреса.
//   ВыбиратьКонтрагентов - при указании значения Истина, будет возможность поместить контрагента
//                                 в список выбранных, иначе будут помещаться только подчиненные контактные лица 
//   ВыбиратьКонтейнерыПользователей - Булево - Истина, если при выборе контейнера пользователей выбирается сам контейнер,
//     											а не пользователи, входящие в его состав.
//   НеВыбиратьПолныеРоли - Булево - Истина, если нужно добавлять только роли исполнителя
//   УточнятьСоставКонтейнеров - Булево - Истина, если при выборе подразделения или проекта нужно давать уточнить,
//   									  как их разворачивать до пользователей. По умолчанию Истина.
//   ВыбиратьПользователейСистемыВзаимодействия - Истина, если форма открывается для выбора пользователей обсуждения.
//   ОбъектДляОтбораПоПравам - если указан, то можно выбирать только пользователей, которые имеют права на этот объект.
//
//   Устарели (интерпретируются как ВыбиратьКонтейнерыПользователей = Истина):
//       ВыбиратьРабочиеГруппы - при указании значения Истина, будет возможность поместить рабочую группу
//                                 в список выбранных, иначе будет помещаться содержимое группы.
//       ВыбиратьПодразделения - при указании значения Истина, будет возможность поместить подразделение
//                                 в список выбранных, иначе будет помещаться содержимое группы.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НастроитьОтображениеСтраниц(Ложь);
	
	ЭтоМобильныйКлиент = ПараметрыСеанса.ЭтоМобильныйКлиент;
	Если ЭтоМобильныйКлиент Тогда
		МК_НастроитьЭлементыФормы();
	КонецЕсли;
	
	Если Параметры.РежимРаботыФормы = Неопределено Тогда
		Параметры.РежимРаботыФормы = 0;
		Параметры.ОтображатьКонтрагентов = Истина;
		Параметры.ОтображатьСотрудников = Истина;
		Параметры.ОтображатьЛичныхАдресатов = Истина;
		Параметры.ОтображатьРоли = Истина;
	КонецЕсли; 
	
	Если Параметры.Свойство("МножественныйВыбор") И Параметры.МножественныйВыбор Тогда
		Параметры.РежимРаботыФормы = 2;
	КонецЕсли;
	
	Если Параметры.ОтображатьПользователей И Не Параметры.ОтображатьСотрудников Тогда
		// Для выбора пользователей из подразделений.
		Параметры.ОтображатьСотрудников = Истина;
	КонецЕсли;
	
	Если Параметры.ВыбиратьЭлектронныеАдреса Тогда
		
		ТекстИсключения = НСтр("ru = 'В адресной книге не могут быть установлены одновременно
			|параметры ВыбиратьЭлектронныеАдреса и %1'");
			
		Если Параметры.ОтображатьАвтоподстановкиПоДокументам Тогда
			ТекстИсключения = СтрШаблон(
				ТекстИсключения,"ОтображатьАвтоподстановкиПоДокументам");
			ВызватьИсключение ТекстИсключения;
		ИначеЕсли Параметры.ОтображатьАвтоподстановкиПоМероприятиям Тогда
			ТекстИсключения = СтрШаблон(
				ТекстИсключения, "ОтображатьАвтоподстановкиПоМероприятиям");
			ВызватьИсключение ТекстИсключения;
		ИначеЕсли Параметры.ОтображатьАвтоподстановкиПоЗадачамПроцессов Тогда
			ТекстИсключения = СтрШаблон(
				ТекстИсключения, "ОтображатьАвтоподстановкиПоЗадачамПроцессов");
			ВызватьИсключение ТекстИсключения;
		ИначеЕсли Параметры.ОтображатьАвтоподстановкиПоПроцессам Тогда
			ТекстИсключения = СтрШаблон(
				ТекстИсключения, "ОтображатьАвтоподстановкиПоПроцессам");
			ВызватьИсключение ТекстИсключения;
		ИначеЕсли Параметры.ОтображатьАвтоподстановкиПоЗадачам Тогда
			ТекстИсключения = СтрШаблон(
				ТекстИсключения, "ОтображатьАвтоподстановкиПоЗадачам");
			ВызватьИсключение ТекстИсключения;
		ИначеЕсли Параметры.ОтображатьВсеАвтоподстановки Тогда
			ТекстИсключения = СтрШаблон(
				ТекстИсключения, "ОтображатьВсеАвтоподстановки");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗапрещатьВыбиратьСотрудниковБезПользователя = Параметры.ЗапрещатьВыбиратьСотрудниковБезПользователя;
	
	ГруппаПоУмолчанию = Параметры.ГруппаПоУмолчанию;
	
	УточнятьСоставКонтейнеров = Истина;
	Если Параметры.Свойство("УточнятьСоставКонтейнеров")
		И ТипЗнч(Параметры.УточнятьСоставКонтейнеров) = Тип("Булево") Тогда
		УточнятьСоставКонтейнеров = Параметры.УточнятьСоставКонтейнеров;
	КонецЕсли;
	
	ВыбиратьКонтейнерыПользователей = Параметры.ВыбиратьКонтейнерыПользователей
		Или Параметры.ВыбиратьПодразделения
		Или Параметры.ВыбиратьРабочиеГруппы;
		
	ОтображатьРоли = Параметры.ОтображатьРоли;
	
	СохраненныеНастройки = ХранилищеСистемныхНастроек.Загрузить(ИмяФормы + "/ТекущиеДанные");
	Если ТипЗнч(СохраненныеНастройки) = Тип("Соответствие") Тогда
		ПоказыватьНедействительных = СохраненныеНастройки.Получить("ПоказыватьНедействительных");
		РасширенныйРежимПоиска = СохраненныеНастройки.Получить("РасширенныйРежимПоиска");
	Иначе
		РасширенныйРежимПоиска = Истина;
	КонецЕсли;
	
	Элементы.СписокКонтекстноеМенюПоказыватьНедействительных.Пометка = ПоказыватьНедействительных;
	Элементы.РезультатПоискаКонтекстноеМенюПоказыватьНедействительных.Пометка = ПоказыватьНедействительных;
	Элементы.СписокКонтекстноеМенюРасширенныйРежимПоиска.Пометка = РасширенныйРежимПоиска;
	Элементы.РезультатПоискаКонтекстноеМенюРасширенныйРежимПоиска.Пометка = РасширенныйРежимПоиска;
	
	ЗаполнитьПараметрыСпискаПриСозданииФормы();
	ЗаполнитьПараметрыРезультатаПоискаПриСозданииФормы();
	
	ОбновитьПараметрыСписка();
	ОбновитьПараметрыСпискаРезультатПоиска(); 
	
	УстановитьВидимостьЭлементовПоРежимуРаботыФормы();
	
	этоПолноправныйПользовательИБ = ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ();
	Если этоПолноправныйПользовательИБ Тогда
		
		Если ЭтоМобильныйКлиент Тогда
			
			Элементы.СписокКонтекстноеМенюДобавитьВИзбранное.Доступность = Ложь;
			Элементы.РезультатПоискаКонтекстноеМенюДобавитьВИзбранноеПолучателя.Доступность = Ложь;
			Элементы.ВыбранныеАдресатыКонтекстноеМенюДобавитьВИзбранное.Доступность = Ложь;
			Элементы.СписокКонтекстноеМенюСоздатьЭлемент.Доступность = Ложь;
			Если Элементы.Найти("СписокКонтекстноеМенюУдалить") <> Неопределено Тогда
				Элементы.СписокКонтекстноеМенюУдалить.Доступность = Ложь;
			КонецЕсли;
		
		Иначе
			
			Элементы.СписокКонтекстноеМенюДобавитьВИзбранное.Видимость = Ложь;
			Элементы.РезультатПоискаКонтекстноеМенюДобавитьВИзбранноеПолучателя.Видимость = Ложь;
			Элементы.ВыбранныеАдресатыКонтекстноеМенюДобавитьВИзбранное.Видимость = Ложь;
			Элементы.СписокКонтекстноеМенюСоздатьЭлемент.Видимость = Ложь;
			Если Элементы.Найти("СписокКонтекстноеМенюУдалить") <> Неопределено Тогда
				Элементы.СписокКонтекстноеМенюУдалить.Видимость = Ложь;
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	ДоступноДобавлениеГруппКонтактов = ПравоДоступа("Добавление", Метаданные.Справочники.ГруппыКонтактовПользователей);
	ДоступноДобавлениеЛичныхАдресатов = ПравоДоступа("Добавление", Метаданные.Справочники.ЛичныеАдресаты);
	ДоступноДобавлениеРабочихГрупп = ПравоДоступа("Добавление", Метаданные.Справочники.РабочиеГруппы);
	
	Если ЭтоМобильныйКлиент Тогда
		Элементы.СписокКонтекстноеМенюДобавитьГруппу.Доступность = ДоступноДобавлениеГруппКонтактов
			Или ДоступноДобавлениеЛичныхАдресатов
			Или ДоступноДобавлениеРабочихГрупп;
	Иначе
		
		Элементы.СписокКонтекстноеМенюДобавитьГруппу.Видимость = ДоступноДобавлениеГруппКонтактов
			Или ДоступноДобавлениеЛичныхАдресатов
			Или ДоступноДобавлениеРабочихГрупп;
	
	КонецЕсли;
	
	Элементы.СписокКонтекстноеМенюОбновитьДанныеАдреснойКниги.Видимость = этоПолноправныйПользовательИБ;
	
	ЗаполнитьВыбранныеАдресатыСогласноПараметрам();
	
	ВыбиратьТолькоСотрудников = Не Параметры.ВыбиратьКонтрагентов
		И Не Параметры.ВыбиратьПодразделения
		И Не Параметры.ВыбиратьПользователейСистемыВзаимодействия
		И Не Параметры.ВыбиратьКонтейнерыПользователей
		И Не Параметры.ВыбиратьРолиИсполнителя
		И Не Параметры.ВыбиратьРабочиеГруппы
		И Не Параметры.ВыбиратьЭлектронныеАдреса;
	
	// Установка заголовков формы
	Если ЗначениеЗаполнено(Параметры.ЗаголовокФормы) Тогда
		
		Заголовок = Параметры.ЗаголовокФормы;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗаголовокСпискаВыбранных) Тогда
		Элементы.ДекорацияВыбранныеАдресаты.Заголовок = Параметры.ЗаголовокСпискаВыбранных;
	ИначеЕсли ВыбиратьТолькоСотрудников Тогда
		Элементы.ДекорацияВыбранныеАдресаты.Заголовок = НСтр("ru='Выбранные сотрудники'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗаголовокСпискаАдреснойКниги) Тогда
		Элементы.ДекорацияВсеАдресаты.Заголовок = Параметры.ЗаголовокСпискаАдреснойКниги;
	ИначеЕсли ВыбиратьТолькоСотрудников Тогда
		Элементы.ДекорацияВсеАдресаты.Заголовок = НСтр("ru='Все сотрудники'");
	КонецЕсли;
	
	// Отображение фото контактов
	ПоказыватьФотографии = ОбзорОбъектов.ПоказыватьФотографии();
	
	КлючСохраненияПоложенияОкна = Строка(Параметры.РежимРаботыФормы);
	
	Если ЗначениеЗаполнено(Параметры.ОбъектДляОтбораПоПравам) Тогда
		ТаблицаПрав = ДокументооборотПраваДоступа.ПраваПользователейПоОбъекту(
			Параметры.ОбъектДляОтбораПоПравам, Истина);
		ПользователиСПравами = Новый Соответствие;
		Для Каждого СтрПрав Из ТаблицаПрав Цикл
			ПользователиСПравами[СтрПрав.Пользователь] = Истина;
		КонецЦикла;
		ПараметрыОтбораПоПравам = Новый Структура(
			"ВыполнятьОтбор, Пользователи", Истина, ПользователиСПравами);
		Список.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить(
			"ПараметрыОтбораПоПравам", ПараметрыОтбораПоПравам);
		РезультатПоиска.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить(
			"ПараметрыОтбораПоПравам", ПараметрыОтбораПоПравам);
	КонецЕсли;
	
	Если Параметры.Свойство("ПравилаКоммуникаций") Тогда
		ПравилаКоммуникаций = Справочники.ПравилаКоммуникаций.ЕстьПравила(Параметры.ПравилаКоммуникаций, Истина);
		Если ПравилаКоммуникаций <> Ложь Тогда
			Список.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ПравилаКоммуникаций", ПравилаКоммуникаций);
			РезультатПоиска.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ПравилаКоммуникаций", ПравилаКоммуникаций);
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ВыбранныеПользователи") Тогда
		ЗакрыватьПриВыборе = Истина;
		Для Каждого ВыбранныйПользователь Из Параметры.ВыбранныеПользователи Цикл
			СтрокаАдресат = ВыбранныеАдресаты.Добавить();
			СтрокаАдресат.Контакт = ВыбранныйПользователь;
			СтрокаАдресат.НомерКартинки = 5;
			СтрокаАдресат.ПолноеПредставление = Строка(ВыбранныйПользователь);
		КонецЦикла;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьНачальноеОтображениеРазделов();
	
	Если ЭтоМобильныйКлиент Тогда
		ОбновитьЗаголовокГруппыВыбранныхАдресатов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ГруппыКонтактовПользователей_Запись" Тогда
		
		Элементы.Список.Обновить();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Сотрудники" И Источник = ТекущийКонтакт Тогда
		
		ОбновитьКарточкуКонтакта();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура HTMLОписаниеКонтактаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Лев(ДанныеСобытия.Href, 6) = "v8doc:" Тогда 
		
		НавигационнаяСсылкаПоля = Сред(ДанныеСобытия.Href, 7);
		
		ПерейтиПоНавигационнойСсылке(НавигационнаяСсылкаПоля);
	ИначеЕсли Найти(ДанныеСобытия.Href, "ДобавитьФото")
		И ЗначениеЗаполнено(ТекущийКонтакт)
		И ТипЗнч(ТекущийКонтакт) <> Тип("Строка") Тогда
			
			ПраваПоОбъекту = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(
				ТекущийКонтакт,
				ПользователиКлиентСервер.ТекущийПользователь());
			
			Если Не ПраваПоОбъекту.Изменение Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Нет прав на изменение контакта.'"));
				Возврат;
			КонецЕсли;
			
			ПараметрыОписания = Новый Структура(
				"АдресВременногоХранилищаФайла", 
				"");
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"HTMLОписаниеКонтактаПриНажатии_Продолжение",
				ЭтотОбъект,
				ПараметрыОписания);
			
			ФайловыеФункцииКлиент.ВыбратьКартинкуИПоместитьВХранилище(
			ОписаниеОповещения, УникальныйИдентификатор);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура HTMLОписаниеКонтактаПриНажатии_Продолжение(Результат, Параметры) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	НаименованиеКонтакта = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
		ТекущийКонтакт,
		"Наименование");
			
	РаботаСФотографиями.ЗаписатьИзображение(
		Параметры.АдресВременногоХранилищаФайла,
		УникальныйИдентификатор,
		ТекущийКонтакт,
		НаименованиеКонтакта);
		
	ОбновитьКарточкуКонтакта();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаПоУмолчаниюПриИзменении(Элемент)
	
	Для Каждого ВыбранныйАдресат ИЗ ВыбранныеАдресаты Цикл
		
		ВыбранныйАдресат.Группа = ГруппаПоУмолчанию;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы_СтрокаПоиска

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ВыполнитьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	НастроитьОтображениеСтраниц(Ложь);
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	СписокПриАктивизацииСтроки(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаВФормеИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		НастроитьОтображениеСтраниц(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Список

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные.ЗапретПоПравам = Истина Тогда
		ПоказатьПредупреждение(,
			СтрШаблон(НСтр("ru = 'Пользователь не имеет прав на ""%1"", выбор запрещен'"),
				Параметры.ОбъектДляОтбораПоПравам));
		Возврат;
	ИначеЕсли Элемент.ТекущиеДанные.ЗапретПоПравиламКоммуникаций = Истина Тогда
		ПравилаКоммуникацийКлиент.ПоказатьНарушение(
			Элемент.ТекущиеДанные.Объект,
			Список.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ПравилаКоммуникаций.Правило);
		Возврат;
	КонецЕсли;
	
	Если Параметры.РежимРаботыФормы = 0 Тогда
		ОткрытьКарточкуОбъекта();
	ИначеЕсли Параметры.РежимРаботыФормы = 1 Тогда
		ОписаниеОповещения = 
			Новый ОписаниеОповещения("ВыбратьАдресатов_Продолжение", ЭтаФорма);
		ДобавитьВыделенныеКонтактыВСписокВыбранных(ОписаниеОповещения);
	ИначеЕсли Параметры.РежимРаботыФормы = 2 Тогда
		ДобавитьВыделенныеКонтактыВСписокВыбранных();
	КонецЕсли;

	Если ЭтоМобильныйКлиент Тогда
		ОбновитьЗаголовокГруппыВыбранныхАдресатов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("УстановитьДоступностьКомандСписка", 0.2, Истина);
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		НовыйТекущийКонтакт = Неопределено;
	Иначе
		НовыйТекущийКонтакт = ТекущиеДанные.Объект;
	КонецЕсли;
	
	Если ТекущийКонтакт = НовыйТекущийКонтакт Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКонтакт = НовыйТекущийКонтакт;
	
	ПодключитьОбработчикОжидания("ОбновитьКарточкуКонтакта", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения("ДобавитьГруппу_Продолжение", ЭтаФорма);
	
	Если ЭтоИзбранное(ТекущиеДанные) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЭтоГруппаКонтактов", Истина);
		ПараметрыФормы.Вставить("Родитель", ТекущийКонтакт);
		
		ОткрытьФорму("Справочник.ГруппыКонтактовПользователей.ФормаОбъекта", 
			ПараметрыФормы,
			ЭтаФорма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ЭтоЛичныеАдресаты(ТекущиеДанные) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Родитель", ТекущийКонтакт);
		
		ОткрытьФорму("Справочник.ЛичныеАдресаты.ФормаОбъекта",
			ПараметрыФормы,
			ЭтаФорма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ОткрытьКарточкуОбъекта();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	
	ДопустимыеТипы = Новый Массив;
	ДопустимыеТипы.Добавить(Тип("СправочникСсылка.ГруппыКонтактовПользователей"));
	ДопустимыеТипы.Добавить(Тип("СправочникСсылка.ГруппыЛичныхАдресатов"));
	ДопустимыеТипы.Добавить(Тип("СправочникСсылка.ЛичныеАдресаты"));
	
	ОбъектыКУдалению = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока ИЗ ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(ВыделеннаяСтрока);
		Если ДопустимыеТипы.Найти(ДанныеСтроки.ТипОбъекта) = Неопределено
			И ДопустимыеТипы.Найти(ДанныеСтроки.ТипРодителяОбъекта) = Неопределено Тогда
			
			Продолжить;
		КонецЕсли;
		СтруктураУдаляемогоОбъекта = Новый Структура;
		СтруктураУдаляемогоОбъекта.Вставить("Объект", ДанныеСтроки.Объект);
		СтруктураУдаляемогоОбъекта.Вставить("РодительОбъекта", ДанныеСтроки.РодительОбъекта);
		ОбъектыКУдалению.Добавить(СтруктураУдаляемогоОбъекта);
	КонецЦикла;
	
	Если ОбъектыКУдалению.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Удаление доступно только для разделов ""Личные адресаты"" и ""Избранное"".'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УдалитьЭлементГруппу_ПродолжениеПослеВопроса", ЭтаФорма, ОбъектыКУдалению);
	ПоказатьВопрос(ОписаниеОповещения,
		НСтр("ru = 'Удалить выделенных адресатов?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭлементГруппу_ПродолжениеПослеВопроса(Результат, ОбъектыКУдалению) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВыделенныеОбъекты(ОбъектыКУдалению);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru='Удаление из адресной книги'"),,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Адресаты (%1 шт) удалены из адресной книги.'"),
			ОбъектыКУдалению.Количество()),
			БиблиотекаКартинок.Информация32);
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	// Подготовка дополнительных данных
	СотрудникиСтрок = Новый Массив;
	Объекты = Новый Массив;
	Для Каждого КлючИЗначение Из Строки Цикл
		
		ДанныеСтроки = КлючИЗначение.Значение.Данные;
		
		// Объект
		Если ДанныеСтроки.Свойство("Объект")
			И ЗначениеЗаполнено(ДанныеСтроки.Объект)
			И ТипЗнч(ДанныеСтроки.Объект) <> Тип("Строка") Тогда
			
			Объекты.Добавить(ДанныеСтроки.Объект);
			
			Если ТипЗнч(ДанныеСтроки.Объект) = Тип("СправочникСсылка.Сотрудники") Тогда
				СотрудникиСтрок.Добавить(ДанныеСтроки.Объект);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ОписанияТекущихОтсутствийСотрудников = Отсутствия.ПолучитьОписанияТекущихОтсутствийСотрудников(СотрудникиСтрок);
	
	ВыполнятьОтборПоПравам = Ложь;
	ПользователиДляОтбораПоПравам = Неопределено;
	ПараметрыОтбораПоПравам = Неопределено;
	Если Настройки.ДополнительныеСвойства.Свойство("ПараметрыОтбораПоПравам", ПараметрыОтбораПоПравам) Тогда
		ВыполнятьОтборПоПравам = ПараметрыОтбораПоПравам.ВыполнятьОтбор;
		ПользователиДляОтбораПоПравам = ПараметрыОтбораПоПравам.Пользователи;
	КонецЕсли;
	
	// Правила коммуникаций.
	Если Объекты.Количество() И Настройки.ДополнительныеСвойства.Свойство("ПравилаКоммуникаций") Тогда
		ДоступныеЭлементы = ПроверитьПоПравиламКоммуникаций(
			Объекты,
			Настройки.ДополнительныеСвойства.ПравилаКоммуникаций,
			Истина);
	КонецЕсли;
	
	// Заполнение данных строк
	Для Каждого КлючИЗначение Из Строки Цикл
		
		ДанныеСтроки = КлючИЗначение.Значение.Данные;
		ОформлениеСтроки = КлючИЗначение.Значение.Оформление;
		
		Если ДанныеСтроки.Свойство("Картинка")
			И ДанныеСтроки.Свойство("Объект")
			И ЗначениеЗаполнено(ДанныеСтроки.Объект) Тогда
			
			// Картинка
			Если ДанныеСтроки.Картинка = 5 Тогда
				ОписаниеОтсутствия = ОписанияТекущихОтсутствийСотрудников[ДанныеСтроки.Объект];
				Если ОписаниеОтсутствия <> Неопределено Тогда
					ДанныеСтроки.Картинка = 11;
				КонецЕсли;
			КонецЕсли;
			
			// Пользователи без прав.
			Если ВыполнятьОтборПоПравам
				И ТипЗнч(ДанныеСтроки.Объект) = Тип("СправочникСсылка.Пользователи")
				И ПользователиДляОтбораПоПравам[ДанныеСтроки.Объект] = Неопределено Тогда
				ДанныеСтроки.ЗапретПоПравам = Истина;
				Для Каждого ЭлементОформления Из ОформлениеСтроки Цикл
					ЭлементОформления.Значение.УстановитьЗначениеПараметра(
						"ЦветТекста", ЦветаСтиля.НедействительныеОбъекты);
				КонецЦикла;
			КонецЕсли;
			
			// Запрет по правилам коммуникаций 
			Если ДоступныеЭлементы <> Неопределено
				И ТипЗнч(ДанныеСтроки.Объект) <> Тип("Строка")
				И ДоступныеЭлементы.Найти(ДанныеСтроки.Объект) = Неопределено Тогда
				
				ДанныеСтроки.ЗапретПоПравиламКоммуникаций = Истина;
				Для Каждого ЭлементОформления Из ОформлениеСтроки Цикл
					ЭлементОформления.Значение.УстановитьЗначениеПараметра(
						"ЦветТекста", ЦветаСтиля.НедействительныеОбъекты);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ИсточникПеретаскивания = Элементы.Список;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ИсточникПеретаскивания = Элементы.Список Тогда
	
		СтандартнаяОбработка = Ложь;
		
		ПереносимыеОбъекты = Новый Массив;
		
		Для Каждого Стр ИЗ ПараметрыПеретаскивания.Значение Цикл
			ДанныеСтроки = Элементы.Список.ДанныеСтроки(Стр);
			
			ПереносимыйОбъект = Новый Структура;
			ПереносимыйОбъект.Вставить("Объект", ДанныеСтроки.Объект);
			ПереносимыйОбъект.Вставить("ТипОбъекта", ДанныеСтроки.ТипОбъекта);
			ПереносимыйОбъект.Вставить("РодительОбъекта", ДанныеСтроки.РодительОбъекта);
			ПереносимыйОбъект.Вставить("ТипРодителяОбъекта", ДанныеСтроки.ТипРодителяОбъекта);
			
			ПереносимыеОбъекты.Добавить(ПереносимыйОбъект);
			
		КонецЦикла;
		
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(Строка);
		
		НоваяГруппа = Новый Структура;
		НоваяГруппа.Вставить("Ссылка", Строка);
		НоваяГруппа.Вставить("Объект", ДанныеСтроки.Объект);
		НоваяГруппа.Вставить("ТипОбъекта", ДанныеСтроки.ТипОбъекта);
		
		ПеренестиОбъектыВГруппу(НоваяГруппа, ПереносимыеОбъекты);
		
		Элементы.Список.Обновить();
		
	ИначеЕсли ИсточникПеретаскивания = Элементы.ВыбранныеАдресаты Тогда
		
		СтандартнаяОбработка = Ложь;
		
		УдалитьВыделенныеКонтактыИзСпискаВыбранных();
		
	КонецЕсли;
		
	ИсточникПеретаскивания = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРезультатПоиска

&НаКлиенте
Процедура РезультатПоискаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные.ЗапретПоПравам = Истина Тогда
		ПоказатьПредупреждение(,
			СтрШаблон(НСтр("ru = 'Пользователь не имеет прав на ""%1"", выбор запрещен'"),
				Параметры.ОбъектДляОтбораПоПравам));
		Возврат;
	ИначеЕсли Элемент.ТекущиеДанные.ЗапретПоПравиламКоммуникаций = Истина Тогда
		ПравилаКоммуникацийКлиент.ПоказатьНарушение(
			Элемент.ТекущиеДанные.ОбъектПоиска,
			Список.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ПравилаКоммуникаций.Правило);
		Возврат;
	КонецЕсли;
	
	Если Параметры.РежимРаботыФормы = 0 Тогда
		ОткрытьКарточкуОбъекта();
	ИначеЕсли Параметры.РежимРаботыФормы = 1 Тогда
		ОписаниеОповещения = 
			Новый ОписаниеОповещения("ВыбратьАдресатов_Продолжение", ЭтаФорма);
		ДобавитьВыделенныеКонтактыВСписокВыбранных(ОписаниеОповещения);
	ИначеЕсли Параметры.РежимРаботыФормы = 2 Тогда
		ДобавитьВыделенныеКонтактыВСписокВыбранных();
		
		Если ЭтоМобильныйКлиент Тогда
			ОбновитьЗаголовокГруппыВыбранныхАдресатов();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПоискаПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("УстановитьДоступностьКомандРезультатПоиска", 0.2, Истина);
	
	ТекущиеДанные = Элементы.РезультатПоиска.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		НовыйТекущийКонтакт = Неопределено;
	Иначе
		НовыйТекущийКонтакт = ТекущиеДанные.ОбъектПоиска;
	КонецЕсли;
	
	Если ТекущийКонтакт = НовыйТекущийКонтакт Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийКонтакт = НовыйТекущийКонтакт;
	
	ПодключитьОбработчикОжидания("ОбновитьКарточкуКонтакта", 0.2, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РезультатПоискаПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	// Подготовка дополнительных данных
	СотрудникиСтрок = Новый Массив;
	Объекты = Новый Массив;
	Для Каждого КлючИЗначение Из Строки Цикл
		
		ДанныеСтроки = КлючИЗначение.Значение.Данные;
		
		// ОбъектПоиска
		Если ДанныеСтроки.Свойство("ОбъектПоиска")
			И ЗначениеЗаполнено(ДанныеСтроки.ОбъектПоиска) Тогда
			
			Объекты.Добавить(ДанныеСтроки.ОбъектПоиска);
			Если ТипЗнч(ДанныеСтроки.ОбъектПоиска) = Тип("СправочникСсылка.Сотрудники") Тогда
				СотрудникиСтрок.Добавить(ДанныеСтроки.ОбъектПоиска);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ОписанияТекущихОтсутствийСотрудников = Отсутствия.ПолучитьОписанияТекущихОтсутствийСотрудников(СотрудникиСтрок);
	
	ВыполнятьОтборПоПравам = Ложь;
	ПользователиДляОтбораПоПравам = Неопределено;
	ПараметрыОтбораПоПравам = Неопределено;
	Если Настройки.ДополнительныеСвойства.Свойство("ПараметрыОтбораПоПравам", ПараметрыОтбораПоПравам) Тогда
		ВыполнятьОтборПоПравам = ПараметрыОтбораПоПравам.ВыполнятьОтбор;
		ПользователиДляОтбораПоПравам = ПараметрыОтбораПоПравам.Пользователи;
	КонецЕсли;
	
	// ПравилаКоммуникаций
	Если Объекты.Количество() И Настройки.ДополнительныеСвойства.Свойство("ПравилаКоммуникаций") Тогда
		ДоступныеЭлементы = ПроверитьПоПравиламКоммуникаций(
			Объекты,
			Настройки.ДополнительныеСвойства.ПравилаКоммуникаций,
			Истина);
	КонецЕсли;
	
	// Заполнение данных строк
	Для Каждого КлючИЗначение Из Строки Цикл
		
		ДанныеСтроки = КлючИЗначение.Значение.Данные;
		ОформлениеСтроки = КлючИЗначение.Значение.Оформление;
		
		Если ДанныеСтроки.Свойство("Картинка")
			И ДанныеСтроки.Свойство("ОбъектПоиска")
			И ЗначениеЗаполнено(ДанныеСтроки.ОбъектПоиска) Тогда
			
			// Картинка
			Если ДанныеСтроки.Картинка = 5 Тогда
				ОписаниеОтсутствия = ОписанияТекущихОтсутствийСотрудников[ДанныеСтроки.ОбъектПоиска];
				Если ОписаниеОтсутствия <> Неопределено Тогда
					ДанныеСтроки.Картинка = 11;
				КонецЕсли;
			КонецЕсли;
			
			// Пользователи без прав.
			Если ВыполнятьОтборПоПравам
				И ТипЗнч(ДанныеСтроки.ОбъектПоиска) = Тип("СправочникСсылка.Пользователи")
				И ПользователиДляОтбораПоПравам[ДанныеСтроки.ОбъектПоиска] = Неопределено Тогда
				ДанныеСтроки.ЗапретПоПравам = Истина;
				Для Каждого ЭлементОформления Из ОформлениеСтроки Цикл
					ЭлементОформления.Значение.УстановитьЗначениеПараметра(
						"ЦветТекста", ЦветаСтиля.НедействительныеОбъекты);
				КонецЦикла;
			КонецЕсли;
			
			// Запрет по правилам коммуникаций 
			Если ДоступныеЭлементы <> Неопределено
					И ДоступныеЭлементы.Найти(ДанныеСтроки.ОбъектПоиска) = Неопределено Тогда
				
				ДанныеСтроки.ЗапретПоПравиламКоммуникаций = Истина;
				Для Каждого ЭлементОформления Из ОформлениеСтроки Цикл
					ЭлементОформления.Значение.УстановитьЗначениеПараметра(
						"ЦветТекста", ЦветаСтиля.НедействительныеОбъекты);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПоискаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ИсточникПеретаскивания = Элементы.РезультатПоиска;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПоискаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ИсточникПеретаскивания = Элементы.ВыбранныеАдресаты Тогда
		
		СтандартнаяОбработка = Ложь;
		
		УдалитьВыделенныеКонтактыИзСпискаВыбранных();
		
	КонецЕсли;
	
	ИсточникПеретаскивания = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыбранныеАдресаты

&НаКлиенте
Процедура ВыбранныеАдресатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Индекс = ВыбранныеАдресаты.Индекс(ВыбранныеАдресаты.НайтиПоИдентификатору(ВыбраннаяСтрока));
	
	ВыбранныеАдресаты.Удалить(Индекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеАдресатыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеАдресатыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ВыбранныеАдресаты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено
		Или ТипЗнч(ТекущиеДанные.Контакт) = Тип("Строка") Тогда
		
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.Контакт);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеАдресатыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ИсточникПеретаскивания = Элементы.ВыбранныеАдресаты;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеАдресатыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ИсточникПеретаскивания = Элементы.Список
		Или ИсточникПеретаскивания = Элементы.РезультатПоиска Тогда
		
		СтандартнаяОбработка = Ложь;
		ДобавитьВыделенныеКонтактыВСписокВыбранных(, Истина);
	КонецЕсли;
	
	ИсточникПеретаскивания = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеАдресатыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьЭлемент(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоЛичныеАдресаты(ТекущиеДанные) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения("ДобавитьГруппу_Продолжение", ЭтаФорма);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Родитель", ТекущийКонтакт);
		
	ОткрытьФорму("Справочник.ЛичныеАдресаты.ФормаОбъекта",
			ПараметрыФормы,
			ЭтаФорма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭлемент_Продолжение(Результат, Параметры) Экспорт
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппу(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения("ДобавитьГруппу_Продолжение", ЭтаФорма);
	
	Если ЭтоИзбранное(ТекущиеДанные) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЭтоГруппаКонтактов", Истина);
		ПараметрыФормы.Вставить("Родитель", ТекущийКонтакт);
		ОткрытьФорму("Справочник.ГруппыКонтактовПользователей.ФормаОбъекта", 
			ПараметрыФормы,
			ЭтаФорма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ЭтоЛичныеАдресаты(ТекущиеДанные) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Родитель", ТекущийКонтакт);
		
		ОткрытьФорму("Справочник.ГруппыЛичныхАдресатов.ФормаОбъекта", 
			ПараметрыФормы,
			ЭтаФорма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	ИначеЕсли ЭтоРабочиеГруппы(ТекущиеДанные) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Родитель", ТекущийКонтакт);
		ПараметрыФормы.Вставить("Ответственный", СотрудникиКлиент.ОсновнойСотрудник());
		
		ОткрытьФорму("Справочник.РабочиеГруппы.ФормаОбъекта", 
			ПараметрыФормы,
			ЭтаФорма,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппу_Продолжение(Результат, Параметры) Экспорт
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВИзбранное(Команда)
	
	ПараметрыТекущегоСписка = ПараметрыТекущегоСписка();
	ВыделенныеСтроки = ПараметрыТекущегоСписка.ВыделенныеСтроки;
	ТаблицаФормы = ПараметрыТекущегоСписка.ТаблицаФормы;
	ИмяПоля_Объект = ПараметрыТекущегоСписка.ИмяПоля_Объект;
	ИмяПоля_ТипОбъекта = ПараметрыТекущегоСписка.ИмяПоля_ТипОбъекта;
	
	ПроверятьДопустимостьТипаОбъекта = ТаблицаФормы <> Элементы.ВыбранныеАдресаты;
	
	ДопустимыеТипДляИзбранного = Новый Массив;
	ДопустимыеТипДляИзбранного.Добавить(Тип("СправочникСсылка.Контрагенты"));
	ДопустимыеТипДляИзбранного.Добавить(Тип("СправочникСсылка.ЛичныеАдресаты"));
	ДопустимыеТипДляИзбранного.Добавить(Тип("СправочникСсылка.РолиИсполнителей"));
	ДопустимыеТипДляИзбранного.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	ДопустимыеТипДляИзбранного.Добавить(Тип("СправочникСсылка.РабочиеГруппы"));
	ДопустимыеТипДляИзбранного.Добавить(Тип("СправочникСсылка.Пользователи"));
	ДопустимыеТипДляИзбранного.Добавить(Тип("СправочникСсылка.Сотрудники"));
	ДопустимыеТипДляИзбранного.Добавить(Тип("СправочникСсылка.КонтактныеЛица"));
	
	ОбъектыДляДобавления = Новый Массив;
	
	Для Каждого ВыбранныйОбъект ИЗ ВыделенныеСтроки Цикл
		ДанныеСтроки = ТаблицаФормы.ДанныеСтроки(ВыбранныйОбъект);
		Если ПроверятьДопустимостьТипаОбъекта
			И ДопустимыеТипДляИзбранного.Найти(ДанныеСтроки[ИмяПоля_ТипОбъекта]) = Неопределено Тогда
			
			Продолжить;
		КонецЕсли;
		ОбъектыДляДобавления.Добавить(ДанныеСтроки[ИмяПоля_Объект]);
	КонецЦикла;
	
	Если ОбъектыДляДобавления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьГруппыВИзбранном() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ДобавитьВИзбранное_ПродолжениеПослеВыбораГруппы", ЭтаФорма, ОбъектыДляДобавления);
		
		ОткрытьФорму("Справочник.ГруппыКонтактовПользователей.Форма.ВыборГруппыДляДобавления"
			,,ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Возврат;
	КонецЕсли;
	
	ДобавитьВИзбранное_ПродолжениеПослеВыбораГруппы(
		"",
		ОбъектыДляДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВИзбранное_ПродолжениеПослеВыбораГруппы(Группа, ОбъектыДляДобавления) Экспорт
	
	Если Группа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Группа = "" Тогда
		ДобавитьКонтактыВГруппу(Неопределено, ОбъектыДляДобавления);
	Иначе
		ДобавитьКонтактыВГруппу(Группа, ОбъектыДляДобавления);
	КонецЕсли;
	
	Элементы.Список.Обновить();
	
	ТекстОповещения = НСтр("ru='Добавление в избранное'");
	
	Если ОбъектыДляДобавления.Количество() = 1 Тогда
		ПоказатьОповещениеПользователя(
			ТекстОповещения,
			ПолучитьНавигационнуюСсылку(ОбъектыДляДобавления[0]),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Адресат ""%1"" добавлен в Избранное.'"),
				Строка(ОбъектыДляДобавления[0])),
				БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьОповещениеПользователя(
			ТекстОповещения,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Адресаты (%1 шт) добавлены в Избранное.'"),
				ОбъектыДляДобавления.Количество()),
				БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОбъект(Команда)
	
	ПараметрыТекущегоСписка = ПараметрыТекущегоСписка();
	ИмяПоля_Объект = ПараметрыТекущегоСписка.ИмяПоля_Объект;
	ИмяПоля_ТипОбъекта = ПараметрыТекущегоСписка.ИмяПоля_ТипОбъекта;
	ТекущиеДанные = ПараметрыТекущегоСписка.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не МожноОтправить(ТекущиеДанные[ИмяПоля_ТипОбъекта]) Тогда
		ТекстПредупреждения = НСтр("ru = 'Нельзя отправить выделенный объект.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ТипОбъекта = ТекущиеДанные[ИмяПоля_ТипОбъекта];
	
	Если ТипОбъекта = Тип("СправочникСсылка.Проекты") Тогда
		ПомощникОтправитьКлиентКОРП.ОтправитьПроектыИлиПроектныеЗадачи(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущиеДанные[ИмяПоля_Объект]),
			ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	Если ТипОбъекта = Тип("СправочникСсылка.Пользователи") Тогда
		ПомощникОтправитьКлиент.ОтправитьПользователям(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущиеДанные[ИмяПоля_Объект]),
			ЭтаФорма);
		Возврат;
	КонецЕсли;
	
	ПомощникОтправитьКлиент.ОтправитьОбъекты(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущиеДанные[ИмяПоля_Объект]),
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСписокАдресатов(Команда)
	
	ПараметрыТекущегоСписка = ПараметрыТекущегоСписка();
	ТекущиеДанные = ПараметрыТекущегоСписка.ТекущиеДанные;
	ВыделенныеСтроки = ПараметрыТекущегоСписка.ВыделенныеСтроки;
	ТаблицаФормы = ПараметрыТекущегоСписка.ТаблицаФормы;
	
	ИмяПоля_Объект = ПараметрыТекущегоСписка.ИмяПоля_Объект;
	ИмяПоля_ТипОбъекта = ПараметрыТекущегоСписка.ИмяПоля_ТипОбъекта;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДопустимыеТипы = Новый Массив;
	ДопустимыеТипы.Добавить(Тип("СправочникСсылка.Пользователи"));
	ДопустимыеТипы.Добавить(Тип("СправочникСсылка.РолиИсполнителей"));
	ДопустимыеТипы.Добавить(Тип("СправочникСсылка.Контрагенты"));
	ДопустимыеТипы.Добавить(Тип("СправочникСсылка.КонтактныеЛица"));
	ДопустимыеТипы.Добавить(Тип("СправочникСсылка.ЛичныеАдресаты"));
	
	ОбъектыКДобавлению = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока ИЗ ВыделенныеСтроки Цикл
		ДанныеСтроки = ТаблицаФормы.ДанныеСтроки(ВыделеннаяСтрока);
		Если ДопустимыеТипы.Найти(ДанныеСтроки[ИмяПоля_ТипОбъекта]) = Неопределено Тогда
			
			Продолжить;
		КонецЕсли;
		ОбъектыКДобавлению.Добавить(ДанныеСтроки[ИмяПоля_Объект]);
	КонецЦикла;
	
	Если ОбъектыКДобавлению.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.УчетнаяЗаписьПочты) Тогда
		ДобавитьВСписокАдресатов_ПродолжениеПослеВыбораУчетнойЗаписиЭлПочты(
			Параметры.УчетнаяЗаписьПочты, ОбъектыКДобавлению);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьВСписокАдресатов_ПродолжениеПослеВыбораУчетнойЗаписиЭлПочты", ЭтаФорма, ОбъектыКДобавлению);
	
	Отбор = Новый Структура("ВариантИспользования", 
		ПредопределенноеЗначение("Перечисление.ВариантыИспользованияПочты.Встроенная"));
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ответственный", ПользователиКлиентСервер.ТекущийПользователь());
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОткрытьФорму("Справочник.УчетныеЗаписиЭлектроннойПочты.ФормаВыбора",
		ПараметрыФормы,
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСписокАдресатов_ПродолжениеПослеВыбораУчетнойЗаписиЭлПочты(
		УчетнаяЗаписьДляДобавления, ОбъектыКДобавлению) Экспорт
	
	Если УчетнаяЗаписьДляДобавления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДобавитьВСписокАдресатов_ПродолжениеПослеВыбораСпискаАдресатов", ЭтаФорма, ОбъектыКДобавлению);
	
	ПараметрыФормы = Новый Структура("УчетнаяЗапись", УчетнаяЗаписьДляДобавления);
	ОткрытьФорму("Справочник.СпискиАдресовЭлектроннойПочты.ФормаВыбора",
		ПараметрыФормы,
		ЭтаФорма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСписокАдресатов_ПродолжениеПослеВыбораСпискаАдресатов(
		СписокАдресатов, ОбъектыКДобавлению) Экспорт
	
	Если СписокАдресатов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьКонтактыВСписокАдресатов(СписокАдресатов, ОбъектыКДобавлению);
	
	ТекстОповещения = НСтр("ru = 'Добавление в список адресатов.'");
	
	Если ОбъектыКДобавлению.Количество() = 1 Тогда
		ПоказатьОповещениеПользователя(
			ТекстОповещения,
			ПолучитьНавигационнуюСсылку(СписокАдресатов),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Адресат ""%1"" добавлен в список ""%2"".'"),
				Строка(ОбъектыКДобавлению[0]),
				СписокАдресатов),
				БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьОповещениеПользователя(
			ТекстОповещения,
			ПолучитьНавигационнуюСсылку(СписокАдресатов),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Адресаты (%1 шт) добавлены в список ""%2"".'"),
				ОбъектыКДобавлению.Количество(),
				СписокАдресатов),
				БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзOutlook(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоЛичныеАдресаты(ТекущиеДанные) Тогда
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru='Выполняется загрузка из адресной книги Outlook. Пожалуйста подождите...'"));
	
	МассивКонтактов = РаботаСЛичнымиАдресатамиКлиент.ЗагрузитьКонтактыИзOutlook();
	
	ЧислоЗагруженных = РаботаСЛичнымиАдресатами.ЗаписатьКонтакты(МассивКонтактов);
	
	Состояние();
	
	Элементы.Список.Обновить();
	
	СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Загрузка из адресной книги Outlook завершена. Загружено: %1.'"), 
		Формат(ЧислоЗагруженных, "ЧН=0"));
	ПоказатьПредупреждение(,СтрокаСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьАвтосписок(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоИзбранное(ТекущиеДанные) Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаИзбранного = ТекущиеДанные.Объект;
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения("ДобавитьАвтосписок_Продолжение", ЭтаФорма, ГруппаИзбранного);
	
	ОткрытьФорму("Справочник.АдреснаяКнига.Форма.ВыборАвтогруппы",,,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьАвтосписок_Продолжение(Автосписок, ГруппаИзбранного) Экспорт
	
	Если ТипЗнч(Автосписок) <> Тип("ЭлементСпискаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	КонтактыКДобавлению = Новый Массив;
	КонтактыКДобавлению.Добавить(Автосписок.Представление);
	
	Если ТипЗнч(ГруппаИзбранного) <> Тип("СправочникСсылка.ГруппыКонтактовПользователей") Тогда
		ДобавитьКонтактыВГруппу(Неопределено, КонтактыКДобавлению);
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В ""Избранное"" добавлен автосписок ""%1"".'"),
			Автосписок.Представление);
	Иначе
		ДобавитьКонтактыВГруппу(ГруппаИзбранного, КонтактыКДобавлению);
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В группу ""%1"" избранного добавлен автосписок ""%2"".'"),
			ГруппаИзбранного,
			Автосписок.Представление);
	КонецЕсли;
	
	Элементы.Список.Обновить();
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Добавление в Избранное'"),,
		ТекстПояснения,
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьНедействительных(Команда)
	
	ПоказыватьНедействительныхНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РасширенныйРежимПоиска(Команда)
	
	РасширенныйРежимПоискаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеАдреснойКниги(Команда)
	
	ТекстВопрос = НСтр("ru = 'Адресная книга будет полностью перезаполнена. Это может занять длительное время!
		|
		|Продолжить?'");
		
	ОписаниеОповещения = Новый ОписаниеОповещения("Продолжение_ОбновитьДанныеАдреснойКниги", ЭтаФорма);
		
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопрос, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура Продолжение_ОбновитьДанныеАдреснойКниги(КодОтвета, ДопПараметры) Экспорт
	
	Если КодОтвета <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеАдреснойКнигиНаСервере();
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонтактИзРезультатаПоиска(Команда)
	
	ОткрытьКарточкуОбъекта();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиВОбщемСписке(Команда)
	
	ТекущиеДанные = Элементы.РезультатПоиска.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Список.ТекущаяСтрока = ПолучитьСсылкуНаОбъектВАдреснойКниге(ТекущиеДанные.ОбъектПоиска);
	
	НастроитьОтображениеСтраниц(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьИзСпискаВВыбранное(Команда)
	
	ДобавитьВыделенныеКонтактыВСписокВыбранных();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьИзВыбранныхВСписок(Команда)
	
	УдалитьВыделенныеКонтактыИзСпискаВыбранных();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьАдресатовКоманда(Команда)
	
	Если ВыбранныеАдресаты.Количество() = 0 Тогда
		ОписаниеОповещения = 
			Новый ОписаниеОповещения("ВыбратьАдресатов_Продолжение", ЭтаФорма);
		ДобавитьВыделенныеКонтактыВСписокВыбранных(ОписаниеОповещения);
		Возврат;
	КонецЕсли;
	
	ВыбратьАдресатов_Продолжение(Неопределено, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьАдресатов_Продолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыбратьАдресатов();
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВыбранныхАдресатов(Команда)
	
	УдалитьВыделенныеКонтактыИзСпискаВыбранных();
	
	Если ЭтоМобильныйКлиент Тогда
		ОбновитьЗаголовокГруппыВыбранныхАдресатов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПараметрыСпискаПриСозданииФормы()
	
	СписокНеДоступныхРазделов = Новый Массив;
	СписокНеДоступныхТиповОбъектов = Новый Массив;
	
	Если НЕ Параметры.ОтображатьСотрудников И НЕ ОтображатьРоли Тогда
		СписокНеДоступныхРазделов.Добавить(Справочники.АдреснаяКнига.Сотрудники);
	КонецЕсли;
	Если НЕ ОтображатьРоли Тогда
		СписокНеДоступныхРазделов.Добавить(Справочники.АдреснаяКнига.Роли);
	КонецЕсли;
	
	Если Не Параметры.ОтображатьОрганизации Тогда
		СписокНеДоступныхРазделов.Добавить(Справочники.АдреснаяКнига.Организации);
		СписокНеДоступныхТиповОбъектов.Добавить(Перечисления.ТипыДанныхАдреснойКниги.Организация);	
	КонецЕсли;	
	
	Если НЕ Параметры.ОтображатьСотрудников Тогда
		СписокНеДоступныхТиповОбъектов.Добавить(Перечисления.ТипыДанныхАдреснойКниги.РабочаяГруппа);
		СписокНеДоступныхТиповОбъектов.Добавить(Перечисления.ТипыДанныхАдреснойКниги.СтруктураПредприятия);
		СписокНеДоступныхТиповОбъектов.Добавить(Перечисления.ТипыДанныхАдреснойКниги.Пользователь);
		СписокНеДоступныхТиповОбъектов.Добавить(Перечисления.ТипыДанныхАдреснойКниги.Сотрудник);
	КонецЕсли;
	Если НЕ Параметры.ОтображатьПользователей Тогда
		СписокНеДоступныхТиповОбъектов.Добавить(Перечисления.ТипыДанныхАдреснойКниги.Пользователь);
	КонецЕсли;
	Если НЕ ОтображатьРоли Тогда
		СписокНеДоступныхТиповОбъектов.Добавить(Перечисления.ТипыДанныхАдреснойКниги.РольИсполнителей);
	КонецЕсли;
	
	Если Не Параметры.ОтображатьАвтоподстановкиПоЗадачам Тогда
		СписокНеДоступныхРазделов.Добавить(Справочники.АдреснаяКнига.АвтоподстановкиДляЗадач);
	КонецЕсли;
	Если НЕ Параметры.ОтображатьАвтоподстановкиПоПроцессам Тогда
		СписокНеДоступныхРазделов.Добавить(Справочники.АдреснаяКнига.АвтоподстановкиДляПроцессов);
	КонецЕсли;
	Если НЕ Параметры.ОтображатьАвтоподстановкиПоДокументам Тогда
		СписокНеДоступныхРазделов.Добавить(Справочники.АдреснаяКнига.АвтоподстановкиДляДокументов);
	КонецЕсли;
	Если НЕ Параметры.ОтображатьАвтоподстановкиПоМероприятиям Тогда
		СписокНеДоступныхРазделов.Добавить(Справочники.АдреснаяКнига.АвтоподстановкиДляМероприятий);
	КонецЕсли;
	Если НЕ Параметры.ОтображатьАвтоподстановкиПоЗадачамПроцессов Тогда
		СписокНеДоступныхРазделов.Добавить(Справочники.АдреснаяКнига.АвтоподстановкиДляЗадачПроцессов);
	КонецЕсли;
	Если НЕ Параметры.ОтображатьВсеАвтоподстановки Тогда
		СписокНеДоступныхРазделов.Добавить(Справочники.АдреснаяКнига.ВсеАвтоподстановки);
	КонецЕсли;
	
	Если НЕ Параметры.ОтображатьКонтрагентов
		Или НЕ ПравоДоступа("Чтение", Метаданные.Справочники.Контрагенты)
		Или НЕ ПравоДоступа("Чтение", Метаданные.Справочники.КонтактныеЛица) Тогда
		
		СписокНеДоступныхРазделов.Добавить(Справочники.АдреснаяКнига.Контрагенты);
		СписокНеДоступныхТиповОбъектов.Добавить(Перечисления.ТипыДанныхАдреснойКниги.Контрагент);
		СписокНеДоступныхТиповОбъектов.Добавить(Перечисления.ТипыДанныхАдреснойКниги.КонтактноеЛицо);
	КонецЕсли;
	
	Если НЕ Параметры.ОтображатьЛичныхАдресатов
		Или Не ПравоДоступа("Чтение", Метаданные.Справочники.ГруппыЛичныхАдресатов)
		Или Не ПравоДоступа("Чтение", Метаданные.Справочники.ЛичныеАдресаты)
		Или Не ПолучитьФункциональнуюОпцию("ИспользованиеВстроеннойПочты")
		Или Не РегистрыСведений.ИспользованиеПочты.ПолучитьИспользованиеВстроеннойПочты() 
		Или ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ() Тогда
		
		СписокНеДоступныхРазделов.Добавить(Справочники.АдреснаяКнига.ЛичныеАдресаты);
		СписокНеДоступныхТиповОбъектов.Добавить(Перечисления.ТипыДанныхАдреснойКниги.ГруппаЛичныхАдресатов);
		СписокНеДоступныхТиповОбъектов.Добавить(Перечисления.ТипыДанныхАдреснойКниги.ЛичныйАдресат);
	КонецЕсли;
	
	Если ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ() Тогда
		СписокНеДоступныхРазделов.Добавить(Справочники.АдреснаяКнига.Избранное);
	КонецЕсли;
	
	Если СписокНеДоступныхРазделов.Количество() > 0 Тогда
		Список.Параметры.УстановитьЗначениеПараметра(
			"СписокНеДоступныхРазделов", СписокНеДоступныхРазделов);
	КонецЕсли;
	
	Если СписокНеДоступныхТиповОбъектов.Количество() > 0 Тогда
		Список.Параметры.УстановитьЗначениеПараметра(
			"СписокНеДоступныхТиповОбъектов", СписокНеДоступныхТиповОбъектов);
	КонецЕсли;
	
	Если Параметры.СписокОтбора.Количество() > 0 Тогда
		
		ДоступныеТипыДляВыбора = Новый Массив;
		
		Если Параметры.ОтображатьСотрудников Тогда
			ДоступныеТипыДляВыбора.Добавить(Перечисления.ТипыДанныхАдреснойКниги.Сотрудник);
		КонецЕсли;
		Если Параметры.ОтображатьПользователей Тогда
			ДоступныеТипыДляВыбора.Добавить(Перечисления.ТипыДанныхАдреснойКниги.Пользователь);
		КонецЕсли;
		Если ОтображатьРоли Тогда
			ДоступныеТипыДляВыбора.Добавить(Перечисления.ТипыДанныхАдреснойКниги.РольИсполнителей);
		КонецЕсли;
		
		Если Параметры.ОтображатьОрганизации Тогда
			ДоступныеТипыДляВыбора.Добавить(Перечисления.ТипыДанныхАдреснойКниги.Организация);
		КонецЕсли;		
		
		Если Параметры.ОтображатьКонтрагентов Тогда
			Если Параметры.ВыбиратьКонтрагентов Тогда
				ДоступныеТипыДляВыбора.Добавить(Перечисления.ТипыДанныхАдреснойКниги.Контрагент);
			КонецЕсли;
			ДоступныеТипыДляВыбора.Добавить(Перечисления.ТипыДанныхАдреснойКниги.КонтактноеЛицо);
		КонецЕсли;
		Если Параметры.ОтображатьЛичныхАдресатов Тогда
			ДоступныеТипыДляВыбора.Добавить(Перечисления.ТипыДанныхАдреснойКниги.ЛичныйАдресат);
		КонецЕсли;
		Если ВыбиратьКонтейнерыПользователей Тогда
			ДоступныеТипыДляВыбора.Добавить(Перечисления.ТипыДанныхАдреснойКниги.РабочаяГруппа);
			ДоступныеТипыДляВыбора.Добавить(Перечисления.ТипыДанныхАдреснойКниги.СтруктураПредприятия);
		КонецЕсли;
		
		Список.Параметры.УстановитьЗначениеПараметра(
			"ДоступныеТипыДляВыбора", ДоступныеТипыДляВыбора);
			
		Список.Параметры.УстановитьЗначениеПараметра(
			"СписокОтбора", Параметры.СписокОтбора.ВыгрузитьЗначения());
		
	КонецЕсли;
	
	Если Параметры.СписокОтбораАвтоподстановок.Количество() > 0 Тогда
		СписокОтбора = Параметры.СписокОтбораАвтоподстановок.ВыгрузитьЗначения();
		Список.Параметры.УстановитьЗначениеПараметра(
			"СписокОтбораАвтоподстановок",
			СписокОтбора);
		РезультатПоиска.Параметры.УстановитьЗначениеПараметра(
			"СписокОтбораАвтоподстановок",
			СписокОтбора);
	КонецЕсли;
		
	Список.Параметры.УстановитьЗначениеПараметра(
		"ПоказыватьНедействительных", ПоказыватьНедействительных);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыРезультатаПоискаПриСозданииФормы()
	
	СписокНеДоступныхТиповОбъектов = Новый Массив;
	
	Если НЕ Параметры.ОтображатьСотрудников Тогда
		СписокНеДоступныхТиповОбъектов.Добавить(Тип("СправочникСсылка.РабочиеГруппы"));
		СписокНеДоступныхТиповОбъектов.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
		СписокНеДоступныхТиповОбъектов.Добавить(Тип("СправочникСсылка.Пользователи"));
		СписокНеДоступныхТиповОбъектов.Добавить(Тип("СправочникСсылка.Сотрудники"));
	КонецЕсли;
	Если НЕ Параметры.ОтображатьПользователей Тогда
		СписокНеДоступныхТиповОбъектов.Добавить(Тип("СправочникСсылка.Пользователи"));
	КонецЕсли;
	Если НЕ ОтображатьРоли Тогда
		СписокНеДоступныхТиповОбъектов.Добавить(Тип("СправочникСсылка.РолиИсполнителей"));
	КонецЕсли;
	
	Если Не Параметры.ОтображатьОрганизации Тогда
		СписокНеДоступныхТиповОбъектов.Добавить(Тип("СправочникСсылка.Организации"));
	КонецЕсли;	
	
	Если НЕ Параметры.ОтображатьКонтрагентов
		Или НЕ ПравоДоступа("Чтение", Метаданные.Справочники.Контрагенты)
		Или НЕ ПравоДоступа("Чтение", Метаданные.Справочники.КонтактныеЛица) Тогда
		
		СписокНеДоступныхТиповОбъектов.Добавить(Тип("СправочникСсылка.Контрагенты"));
		СписокНеДоступныхТиповОбъектов.Добавить(Тип("СправочникСсылка.КонтактныеЛица"));
	КонецЕсли;
	Если НЕ Параметры.ОтображатьЛичныхАдресатов
		Или НЕ ПравоДоступа("Чтение", Метаданные.Справочники.ГруппыЛичныхАдресатов)
		Или НЕ ПравоДоступа("Чтение", Метаданные.Справочники.ЛичныеАдресаты)
		Или Не ПолучитьФункциональнуюОпцию("ИспользованиеВстроеннойПочты")
		Или Не РегистрыСведений.ИспользованиеПочты.ПолучитьИспользованиеВстроеннойПочты()
		Или ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ() Тогда
		
		СписокНеДоступныхТиповОбъектов.Добавить(Тип("СправочникСсылка.ЛичныеАдресаты"));
	КонецЕсли;
	
	Если Не Параметры.ОтображатьАвтоподстановкиПоПроцессам
		И Не Параметры.ОтображатьВсеАвтоподстановки Тогда
		СписокНеДоступныхТиповОбъектов.Добавить(Тип("СправочникСсылка.АвтоподстановкиДляПроцессов"));
	КонецЕсли;
	Если Не Параметры.ОтображатьАвтоподстановкиПоДокументам
		И Не Параметры.ОтображатьАвтоподстановкиПоМероприятиям
		И Не Параметры.ОтображатьАвтоподстановкиПоЗадачамПроцессов
		И Не Параметры.ОтображатьАвтоподстановкиПоЗадачам
		И Не Параметры.ОтображатьВсеАвтоподстановки Тогда
		СписокНеДоступныхТиповОбъектов.Добавить(Тип("СправочникСсылка.АвтоподстановкиДляОбъектов"));
	КонецЕсли;
		
	Если СписокНеДоступныхТиповОбъектов.Количество() > 0 Тогда
		РезультатПоиска.Параметры.УстановитьЗначениеПараметра(
			"СписокНеДоступныхТиповОбъектов", СписокНеДоступныхТиповОбъектов);
	КонецЕсли;
	
	Если Параметры.СписокОтбора.Количество() > 0 Тогда
		РезультатПоиска.Параметры.УстановитьЗначениеПараметра(
			"СписокОтбора", Параметры.СписокОтбора.ВыгрузитьЗначения());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыСписка()
	
	Список.Параметры.УстановитьЗначениеПараметра(
		"ПоказыватьНедействительных", ПоказыватьНедействительных);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыСпискаРезультатПоиска()
	
	РезультатПоиска.Параметры.УстановитьЗначениеПараметра("Слово", "%" + СтрокаПоиска + "%");
	
	РезультатПоиска.Параметры.УстановитьЗначениеПараметра(
		"ПоказыватьНедействительных", ПоказыватьНедействительных); 
	
	РезультатПоиска.Параметры.УстановитьЗначениеПараметра(
		"РасширенныйРежимПоиска", РасширенныйРежимПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНачальноеОтображениеРазделов()
	
	Элементы.Список.Развернуть(ПредопределенноеЗначение("Справочник.АдреснаяКнига.Избранное"));
	
	Если Параметры.ОтображатьСотрудников Тогда
		Элементы.Список.Развернуть(ПредопределенноеЗначение("Справочник.АдреснаяКнига.Сотрудники"));
	КонецЕсли;
	
	Если Параметры.ОтображатьКонтрагентов
		И НЕ Параметры.ОтображатьСотрудников
		И НЕ Параметры.ОтображатьЛичныхАдресатов Тогда
		
		Элементы.Список.Развернуть(ПредопределенноеЗначение("Справочник.АдреснаяКнига.Контрагенты"));
	КонецЕсли;
	
	Если Параметры.ОтображатьОрганизации
		И Не Параметры.ОтображатьКонтрагентов Тогда
		
		Элементы.Список.Развернуть(ПредопределенноеЗначение("Справочник.АдреснаяКнига.Организации"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоРежимуРаботыФормы()
	
	Если Параметры.РежимРаботыФормы = 0 Тогда // Режим работы адресной книги без возможности выбора
		Элементы.ГруппаПереместитьИПолучатели.Видимость = Ложь;
		Элементы.ДекорацияВсеАдресаты.Видимость = Ложь;
		Элементы.ГруппаКнопкиВыбора.Видимость = Ложь;
	ИначеЕсли Параметры.РежимРаботыФормы = 1 Тогда // Выбор одного адресата
		Элементы.ГруппаПереместитьИПолучатели.Видимость = Ложь;
		Элементы.ДекорацияВсеАдресаты.Видимость = Ложь;
	ИначеЕсли Параметры.РежимРаботыФормы = 2 Тогда // Выбор нескольких адресатов
		// Ничего не отключаем
	КонецЕсли;
	
	Элементы.ГруппаПоУмолчанию.Видимость = Параметры.ПоказыватьТипАдресов;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандСписка()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоИзбранное = ЭтоИзбранное(ТекущиеДанные);
	ЭтоЛичныеАдресаты = ЭтоЛичныеАдресаты(ТекущиеДанные);
	ЭтоРабочиеГруппы = ЭтоРабочиеГруппы(ТекущиеДанные);
	
	Элементы.СписокКонтекстноеМенюДобавитьГруппу.Доступность = 
		(ЭтоИзбранное И ДоступноДобавлениеГруппКонтактов)
		Или (ЭтоЛичныеАдресаты И ДоступноДобавлениеЛичныхАдресатов)
		Или (ЭтоРабочиеГруппы И ДоступноДобавлениеРабочихГрупп);
	
	Элементы.СписокКонтекстноеМенюИзменить.Доступность = НЕ ТекущиеДанные.Предопределенный
		ИЛИ ТекущиеДанные.Ссылка = ПредопределенноеЗначение("Справочник.АдреснаяКнига.ВсеПользователи");
	
	Если Элементы.Найти("СписокКонтекстноеМенюУдалить") <> Неопределено Тогда
		Элементы.СписокКонтекстноеМенюУдалить.Доступность = НЕ ТекущиеДанные.Предопределенный
			И (ЭтоИзбранное ИЛИ ЭтоЛичныеАдресаты);
	КонецЕсли;
	
	Элементы.СписокКонтекстноеМенюОтправитьОбъект.Доступность = 
		НЕ ТекущиеДанные.Предопределенный И МожноОтправить(ТекущиеДанные.ТипОбъекта);
	
	Элементы.СписокКонтекстноеМенюДобавитьВИзбранное.Доступность = НЕ ТекущиеДанные.Предопределенный
		И НЕ ЭтоИзбранное
		И ТекущиеДанные.ТипОбъекта <> Тип("СправочникСсылка.ПапкиМероприятий")
		И ТекущиеДанные.ТипОбъекта <> Тип("СправочникСсылка.Мероприятия")
		И ТекущиеДанные.ТипОбъекта <> Тип("СправочникСсылка.ПапкиПроектов")
		И ТекущиеДанные.ТипОбъекта <> Тип("СправочникСсылка.Проекты")
		И ТекущиеДанные.ТипОбъекта <> Тип("СправочникСсылка.ГруппыЛичныхАдресатов")
		И ТекущиеДанные.ТипОбъекта <> Тип("СправочникСсылка.Организации")
		И ТекущиеДанные.ТипОбъекта <> Тип("Строка");
		
	Элементы.СписокКонтекстноеМенюДобавитьВСписокАдресатов.Доступность = 
		ТекущиеДанные.ТипОбъекта = Тип("СправочникСсылка.Контрагенты")
		ИЛИ ТекущиеДанные.ТипОбъекта = Тип("СправочникСсылка.КонтактныеЛица")
		ИЛИ ТекущиеДанные.ТипОбъекта = Тип("СправочникСсылка.Пользователи")
		ИЛИ ТекущиеДанные.ТипОбъекта = Тип("СправочникСсылка.Сотрудники")
		ИЛИ ТекущиеДанные.ТипОбъекта = Тип("СправочникСсылка.РолиИсполнителей")
		ИЛИ ТекущиеДанные.ТипОбъекта = Тип("СправочникСсылка.ЛичныеАдресаты");
	
	Элементы.СписокКонтекстноеМенюЗагрузитьИзOutlook.Доступность = ЭтоЛичныеАдресаты;
	
	Элементы.СписокКонтекстноеМенюДобавитьАвтосписок.Доступность = ЭтоИзбранное;
	
	Элементы.СписокКонтекстноеМенюСоздатьЭлемент.Доступность = ЭтоЛичныеАдресаты(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандРезультатПоиска()

	ТекущиеДанные = Элементы.РезультатПоиска.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.РезультатПоискаКонтекстноеМенюДобавитьВИзбранноеПолучателя.Доступность = 
		ТекущиеДанные.ТипОбъектаПоиска <> Тип("СправочникСсылка.Организации");

КонецПроцедуры

// Устанавливает текущую строку списка по указанному контакту (первую подходящую).
//
// Параметры:
//   Контакт - ЛюбаяСсылка - ранее выбранный контакт.
//
&НаСервере
Процедура УстановитьТекущуюСтрокуСписка(ВыбранныйКонтакт)
	
	Если Не ЗначениеЗаполнено(ВыбранныйКонтакт) Тогда
		Возврат;
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных = "ИсточникДанных1";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	
	СтрокаВыбрать = СтрПолучитьСтроку(Список.ТекстЗапроса, 1);
	КоличествоСимволовВПервойСтрокеЗапроса = СтрДлина(СтрокаВыбрать);
	ОбщееКоличествоСимволов = СтрДлина(Список.ТекстЗапроса);
	КоличествоСимволовВЗапросеБезПервойСтроки = 
		ОбщееКоличествоСимволов - КоличествоСимволовВПервойСтрокеЗапроса;
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ"
		+ Прав(Список.ТекстЗапроса, КоличествоСимволовВЗапросеБезПервойСтроки);
		
	НаборДанных.Запрос = ТекстЗапроса;
	НаборДанных.Имя = "НаборДанных1";
	
	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных);
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(Список.КомпоновщикНастроек.ПолучитьНастройки());
	КомпоновщикНастроекКомпоновкиДанных.Настройки.УсловноеОформление.Элементы.Очистить();
	
	КомпоновщикНастроекКомпоновкиДанных.Настройки.Структура.Очистить();
	КомпоновщикНастроекКомпоновкиДанных.Настройки.Выбор.Элементы.Очистить();
	
	ГруппировкаКомпоновкиДанных = КомпоновщикНастроекКомпоновкиДанных.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ГруппировкаКомпоновкиДанных.Использование = Истина;
	
	ЭлементПорядка = ГруппировкаКомпоновкиДанных.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("Ссылка.ПорядокОбъектаВСписке");
	ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
	ЭлементПорядка.Использование = Истина;
	
	ПолеГруппировки = ГруппировкаКомпоновкиДанных.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
	ПолеГруппировки.Использование = Истина;
	
	ПолеГруппировки = ГруппировкаКомпоновкиДанных.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Объект");
	ПолеГруппировки.Использование = Истина;
	
	ПолеВыбора = КомпоновщикНастроекКомпоновкиДанных.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
	ПолеВыбора.Использование = Истина;
	
	ПолеВыбора = КомпоновщикНастроекКомпоновкиДанных.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("Объект");
	ПолеВыбора.Использование = Истина;
	
	КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(
		"ВыбранныйКонтакт", 
		?(ТипЗнч(ВыбранныйКонтакт) = Тип("СправочникСсылка.Пользователи"), СотрудникиВызовСервера.СотрудникиПользователя(ВыбранныйКонтакт), ВыбранныйКонтакт));
		
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, 
		КомпоновщикНастроекКомпоновкиДанных.Настройки,,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТаблицаРезультата);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Для Каждого СтрокаРезультата Из ТаблицаРезультата Цикл
		Если ЗначениеЗаполнено(СтрокаРезультата.Объект) Тогда
			Элементы.Список.ТекущаяСтрока = СтрокаРезультата.Ссылка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоИзбранное(ТекущиеДанные)
	
	Возврат ТекущиеДанные.Ссылка = ПредопределенноеЗначение("Справочник.АдреснаяКнига.Избранное")
		ИЛИ ТекущиеДанные.ТипОбъекта = Тип("СправочникСсылка.ГруппыКонтактовПользователей")
		ИЛИ ТекущиеДанные.ТипРодителяОбъекта = Тип("СправочникСсылка.ГруппыКонтактовПользователей");
	
КонецФункции

&НаКлиенте
Функция ЭтоЛичныеАдресаты(ТекущиеДанные)
	
	Возврат ТекущиеДанные.Ссылка = ПредопределенноеЗначение("Справочник.АдреснаяКнига.ЛичныеАдресаты")
		ИЛИ ТекущиеДанные.ТипОбъекта = Тип("СправочникСсылка.ГруппыЛичныхАдресатов")
		ИЛИ ТекущиеДанные.ТипОбъекта = Тип("СправочникСсылка.ЛичныеАдресаты")
		ИЛИ ТекущиеДанные.ТипРодителяОбъекта = Тип("СправочникСсылка.ГруппыЛичныхАдресатов");
		
КонецФункции

&НаКлиенте
Функция ЭтоРабочиеГруппы(ТекущиеДанные)
	
	Возврат (ТекущиеДанные.Ссылка = ПредопределенноеЗначение("Справочник.АдреснаяКнига.ПоРабочимГруппам")
			Или ТекущиеДанные.ТипОбъекта = Тип("СправочникСсылка.РабочиеГруппы"))
		И Не ТекущиеДанные.Объект = ПредопределенноеЗначение("Справочник.РабочиеГруппы.ВсеПользователи");
		
КонецФункции

&НаКлиенте
Функция МожноОтправить(ТипОбъекта)
	
	Возврат ТипОбъекта = Тип("СправочникСсылка.Контрагенты")
		ИЛИ ТипОбъекта = Тип("СправочникСсылка.Проекты")
		ИЛИ ТипОбъекта = Тип("СправочникСсылка.Мероприятия")
		ИЛИ ТипОбъекта = Тип("СправочникСсылка.Пользователи")
		ИЛИ ТипОбъекта = Тип("СправочникСсылка.Сотрудники");
		
КонецФункции

&НаКлиенте
Функция ПараметрыТекущегоСписка(НеПолучатьПараметрыДляСпискаВыбранныеАдресаты = Истина)
	
	ПараметрыСписка = Новый Структура;
	ПараметрыСписка.Вставить("ВыделенныеСтроки");
	ПараметрыСписка.Вставить("ТаблицаФормы");
	ПараметрыСписка.Вставить("ИмяПоля_Объект");
	ПараметрыСписка.Вставить("ИмяПоля_ТипОбъекта");
	ПараметрыСписка.Вставить("ИмяПоля_КартинкиОбъекта");
	ПараметрыСписка.Вставить("ИмяПоля_ДействующаяЗапись");
	ПараметрыСписка.Вставить("ИмяПоля_РодительОбъекта", "");
	ПараметрыСписка.Вставить("ИмяПоля_ТипРодителяОбъекта", "");
	ПараметрыСписка.Вставить("ТекущиеДанные");
	
	Если Не НеПолучатьПараметрыДляСпискаВыбранныеАдресаты И ТекущийЭлемент = Элементы.ВыбранныеАдресаты Тогда
		ПараметрыСписка.ВыделенныеСтроки = Элементы.ВыбранныеАдресаты.ВыделенныеСтроки;
		ПараметрыСписка.ТаблицаФормы = Элементы.ВыбранныеАдресаты;
		ПараметрыСписка.ИмяПоля_Объект = "Контакт";
	ИначеЕсли Элементы.Список.Видимость Тогда
		ПараметрыСписка.ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
		ПараметрыСписка.ТаблицаФормы = Элементы.Список;
		ПараметрыСписка.ИмяПоля_Объект = "Объект";
		ПараметрыСписка.ИмяПоля_ТипОбъекта = "ТипОбъекта";
		ПараметрыСписка.ИмяПоля_КартинкиОбъекта = "ПорядокОбъектаВСписке";
		ПараметрыСписка.ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		ПараметрыСписка.ИмяПоля_ДействующаяЗапись = "ОтображатьВАдреснойКниге";
		ПараметрыСписка.ИмяПоля_РодительОбъекта = "РодительОбъекта";
		ПараметрыСписка.ИмяПоля_ТипРодителяОбъекта = "ТипРодителяОбъекта";
	ИначеЕсли Элементы.РезультатПоиска.Видимость Тогда
		ПараметрыСписка.ВыделенныеСтроки = Элементы.РезультатПоиска.ВыделенныеСтроки;
		ПараметрыСписка.ТаблицаФормы = Элементы.РезультатПоиска;
		ПараметрыСписка.ИмяПоля_Объект = "ОбъектПоиска";
		ПараметрыСписка.ИмяПоля_ТипОбъекта = "ТипОбъектаПоиска";
		ПараметрыСписка.ИмяПоля_КартинкиОбъекта = "Картинка";
		ПараметрыСписка.ИмяПоля_ДействующаяЗапись = "ИспользоватьВПоиске";
		ПараметрыСписка.ТекущиеДанные = Элементы.РезультатПоиска.ТекущиеДанные;
	КонецЕсли;
	
	Возврат ПараметрыСписка;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПоиск()
	
	СтрокаПоиска = Элементы.СтрокаПоискаВФорме.ТекстРедактирования;
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда 
		
		ОбновитьПараметрыСпискаРезультатПоиска();
		ПереносДанныхЗавершен = ПереносДанныхЗавершен();
		НастроитьОтображениеСтраниц(Истина, ПереносДанныхЗавершен);
		РезультатПоискаПриАктивизацииСтроки(Неопределено);
		
	Иначе
		
		ОбновитьПараметрыСписка();
		НастроитьОтображениеСтраниц(Ложь);
		СписокПриАктивизацииСтроки(Неопределено);
		
	КонецЕсли;
	
	Элементы.РезультатПоиска.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуОбъекта()
	
	ПараметрыТекущегоСписка = ПараметрыТекущегоСписка();
	ВыделенныеСтроки = ПараметрыТекущегоСписка.ВыделенныеСтроки;
	ТекущиеДанные = ПараметрыТекущегоСписка.ТекущиеДанные;
	ИмяПоля_Объект = ПараметрыТекущегоСписка.ИмяПоля_Объект;
	ИмяПоля_ТипОбъекта = ПараметрыТекущегоСписка.ИмяПоля_ТипОбъекта;
	ИмяПоля_РодительОбъекта = ПараметрыТекущегоСписка.ИмяПоля_РодительОбъекта;
	ИмяПоля_ТипРодителяОбъекта = ПараметрыТекущегоСписка.ИмяПоля_ТипРодителяОбъекта;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные[ИмяПоля_Объект]) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектДляОткрытия = ТекущиеДанные[ИмяПоля_Объект];
	
	Если ТекущиеДанные[ИмяПоля_ТипОбъекта] = Тип("Строка") Тогда
		Если ЗначениеЗаполнено(ИмяПоля_РодительОбъекта)
			И ТекущиеДанные[ИмяПоля_ТипРодителяОбъекта] = 
				Тип("СправочникСсылка.ГруппыКонтактовПользователей") Тогда
			
			ОбъектДляОткрытия = ТекущиеДанные[ИмяПоля_РодительОбъекта];
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПоказатьЗначение(, ОбъектДляОткрытия);
	
КонецПроцедуры

&НаСервере
Процедура ПоказыватьНедействительныхНаСервере()
	
	ПоказыватьНедействительных = Не ПоказыватьНедействительных;
	Элементы.СписокКонтекстноеМенюПоказыватьНедействительных.Пометка = ПоказыватьНедействительных;
	Элементы.РезультатПоискаКонтекстноеМенюПоказыватьНедействительных.Пометка = ПоказыватьНедействительных;
	
	Если Элементы.РезультатПоиска.Видимость Тогда
		ОбновитьПараметрыСпискаРезультатПоиска();
	Иначе
		ОбновитьПараметрыСписка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасширенныйРежимПоискаНаСервере()
	
	РасширенныйРежимПоиска = Не РасширенныйРежимПоиска;
	Элементы.СписокКонтекстноеМенюРасширенныйРежимПоиска.Пометка = РасширенныйРежимПоиска;
	Элементы.РезультатПоискаКонтекстноеМенюРасширенныйРежимПоиска.Пометка = РасширенныйРежимПоиска;
	
	Если Элементы.РезультатПоиска.Видимость Тогда
		ОбновитьПараметрыСпискаРезультатПоиска();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСсылкуНаОбъектВАдреснойКниге(СсылкаНаОбъект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АдреснаяКнига.Ссылка,
		|	АдреснаяКнига.Родитель.ПорядокОбъектаВСписке КАК ПорядокОбъектаВСписке
		|ИЗ
		|	Справочник.АдреснаяКнига КАК АдреснаяКнига
		|ГДЕ
		|	АдреснаяКнига.Объект = &СсылкаНаОбъект
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядокОбъектаВСписке";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПеренестиОбъектыВГруппу(Знач Группа, Знач ПереносимыеОбъекты)
	
	ЭтоГруппаКонтактов = Ложь;
	ЭтоГруппаЛичныхАдресатов = Ложь;
	
	Если Группа.ТипОбъекта = Тип("СправочникСсылка.ГруппыКонтактовПользователей") Тогда
		ЭтоГруппаКонтактов = Истина;
	ИначеЕсли Группа.Ссылка = Справочники.АдреснаяКнига.Избранное Тогда
		ЭтоГруппаКонтактов = Истина;
		Группа.Объект = Неопределено;
	ИначеЕсли Группа.ТипОбъекта = Тип("СправочникСсылка.ГруппыЛичныхАдресатов") Тогда
		ЭтоГруппаЛичныхАдресатов = Истина;
	ИначеЕсли Группа.Ссылка = Справочники.АдреснаяКнига.ЛичныеАдресаты Тогда
		ЭтоГруппаЛичныхАдресатов = Истина;
		Группа.Объект = Справочники.ГруппыЛичныхАдресатов.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ ЭтоГруппаКонтактов И НЕ ЭтоГруппаЛичныхАдресатов Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Если ЭтоГруппаКонтактов Тогда
		
		ОбъектыКУдалению = Новый Массив;
		ОбъектыКПереносу = Новый Массив;
		Для Каждого Стр ИЗ ПереносимыеОбъекты Цикл
			Если Стр.РодительОбъекта = Группа.Объект Тогда
				Продолжить;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Группа.Объект)
				И Не ЗначениеЗаполнено(
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Стр.РодительОбъекта, "Родитель")) Тогда
				
				Продолжить;
			КонецЕсли;
			Если Стр.ТипОбъекта = Тип("СправочникСсылка.ГруппыКонтактовПользователей") Тогда
				Объект = Стр.Объект.ПолучитьОбъект();
				Объект.Родитель = 
					?(ЗначениеЗаполнено(Группа.Объект),
						Группа.Объект,
						Справочники.ГруппыКонтактовПользователей.ПолучитьКорневуюГруппу());
				Объект.Записать();
			ИначеЕсли Стр.ТипРодителяОбъекта = Тип("СправочникСсылка.ГруппыКонтактовПользователей") Тогда
				ОбъектыКУдалению.Добавить(Стр);
				ОбъектыКПереносу.Добавить(Стр.Объект);
			КонецЕсли;
		КонецЦикла;
		
		УдалитьВыделенныеОбъекты(ОбъектыКУдалению);
		ДобавитьКонтактыВГруппу(Группа.Объект, ОбъектыКПереносу);
		
	ИначеЕсли ЭтоГруппаЛичныхАдресатов Тогда
		
		Для Каждого Стр ИЗ ПереносимыеОбъекты Цикл
			Если Стр.ТипОбъекта = Тип("СправочникСсылка.ГруппыЛичныхАдресатов") Тогда
				Объект = Стр.Объект.ПолучитьОбъект();
				Объект.Родитель = Группа.Объект;
				Объект.Записать();
			ИначеЕсли Стр.ТипОбъекта = Тип("СправочникСсылка.ЛичныеАдресаты") Тогда
				Объект = Стр.Объект.ПолучитьОбъект();
				Объект.Группа = Группа.Объект;
				Объект.Записать();
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьВыделенныеОбъекты(Знач ОбъектыКУдалению)
	
	Для Каждого Стр ИЗ ОбъектыКУдалению Цикл
		
		НачатьТранзакцию();
		
		Попытка
		
			Если ТипЗнч(Стр.РодительОбъекта) = Тип("СправочникСсылка.ГруппыКонтактовПользователей") Тогда
				
				ЗаблокироватьДанныеДляРедактирования(Стр.РодительОбъекта);
				
				ГруппаОбъект = Стр.РодительОбъекта.ПолучитьОбъект();
				СтрокаКонтакта = ГруппаОбъект.Контакты.Найти(Стр.Объект, "Контакт");
				Если СтрокаКонтакта = Неопределено Тогда
					СтрокаКонтакта = ГруппаОбъект.Контакты.Найти(Стр.Объект, "КонтактнаяИнформация");
				КонецЕсли;
				Если СтрокаКонтакта <> Неопределено Тогда
					ГруппаОбъект.Контакты.Удалить(СтрокаКонтакта);
					ГруппаОбъект.Записать();
				КонецЕсли;
				
				РазблокироватьДанныеДляРедактирования(Стр.РодительОбъекта);
				
			ИначеЕсли ТипЗнч(Стр.Объект) = Тип("СправочникСсылка.ГруппыКонтактовПользователей")
				ИЛИ ТипЗнч(Стр.Объект) = Тип("СправочникСсылка.ГруппыЛичныхАдресатов")
				ИЛИ ТипЗнч(Стр.Объект) = Тип("СправочникСсылка.ЛичныеАдресаты") Тогда
				
				ЗаблокироватьДанныеДляРедактирования(Стр.Объект);
				
				ГруппаОбъект = Стр.Объект.ПолучитьОбъект();
				ГруппаОбъект.УстановитьПометкуУдаления(Истина);
				
				РазблокироватьДанныеДляРедактирования(Стр.Объект);
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьКонтактыВСписокАдресатов(СписокАдресатов, Знач ОбъектыКДобавлению)
	
	НачатьТранзакцию();
	
	Для Каждого Объект Из ОбъектыКДобавлению Цикл
		
		Адрес = "";
		
		АдресаКонтакта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект),
			Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,,
			ТекущаяДатаСеанса());
			
		Если АдресаКонтакта.Количество() > 0 Тогда
			Адрес = АдресаКонтакта[0].Представление;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Адрес) Тогда
			Продолжить;
		КонецЕсли;
	
		Справочники.СпискиАдресовЭлектроннойПочты.ДобавитьВСписок(
			СписокАдресатов, Адрес);
			
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьАдресатов()
	
	Если ВыбранныеАдресаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Массив;
	Если Параметры.ВыбиратьПользователейСистемыВзаимодействия Тогда
		
		ВыбранныеПользователи = Новый Массив;
		Для Каждого ВыбранныйАдресат Из ВыбранныеАдресаты Цикл
			// В режиме выбора пользователей СВ тут всегда должны быть только пользователи.
			Если ТипЗнч(ВыбранныйАдресат.Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
				ВыбранныеПользователи.Добавить(ВыбранныйАдресат.Контакт);
			КонецЕсли;
		КонецЦикла;
		Результат = ИдентификаторыПользователейСВ(ВыбранныеПользователи);
		
	ИначеЕсли Параметры.УпрощенныйИнтерфейс Тогда
		
		Если Параметры.РежимРаботыФормы = 1 Тогда
			Результат = ВыбранныеАдресаты[0].Контакт;
		Иначе // подбор
			Результат = Новый Массив;
			Для Каждого ВыбранныйАдресат Из ВыбранныеАдресаты Цикл
				Результат.Добавить(ВыбранныйАдресат.Контакт);
			КонецЦикла;
		КонецЕсли;
			
	ИначеЕсли Параметры.Оптимизировать Тогда
		
		Результат = ЗаписатьПодборВХранилище();
		
	Иначе
	
		Результат = Новый Массив;
		Для Каждого ВыбранныйАдресат Из ВыбранныеАдресаты Цикл
			Группа = ?(ПустаяСтрока(ВыбранныйАдресат.Группа),
				Неопределено,
				ВыбранныйАдресат.Группа);
			СтруктураАдресата = Новый Структура(
				"Адрес, Представление, Контакт, ТипПолучателя",
				ВыбранныйАдресат.Адрес,
				ВыбранныйАдресат.Представление,
				ВыбранныйАдресат.Контакт,
				Группа);
			Результат.Добавить(СтруктураАдресата);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Параметры.ПодменятьПользователейСотрудниками И Не Параметры.Оптимизировать Тогда
		ПодменитьВРезультатеВыбораПользователейСотрудниками(Результат);
	КонецЕсли;
	
	ОповеститьОВыборе(Результат);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьДанныеАдреснойКнигиНаСервере()
	
	Справочники.АдреснаяКнига.ОчиститьАдреснуюКнигу();
	Справочники.АдреснаяКнига.ЗаполнитьАдреснуюКнигу();
	РегистрыСведений.ОбъектыПоискаВАдреснойКниге.ЗаполнитьСловаПоиска();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокПредставленийАвтогрупп()
	
	ПредставленияАвтогрупп = Новый Массив;
	Автогруппы = РаботаСАдреснойКнигой.ПолучитьСписокДоступныхФункций();
	Для Каждого Автогруппа Из Автогруппы Цикл
		ПредставленияАвтогрупп.Добавить(Автогруппа.Представление);
	КонецЦикла;
	
	Возврат ПредставленияАвтогрупп;
	
КонецФункции

&НаСервере
Процедура ОтработатьПараметрУстановитьВыделение()

		Если Параметры.Свойство("УстановитьВыделение") Тогда
			УстановитьВыделение = Параметры.УстановитьВыделение;
			УстановитьТекущуюСтрокуСписка(УстановитьВыделение);
		КонецЕсли;	
	
КонецПроцедуры

// Заполняет таблицу ВыбранныеАдресаты согласно параметрам формы.
//
&НаСервере
Процедура ЗаполнитьВыбранныеАдресатыСогласноПараметрам()
	
	Если Не ЗначениеЗаполнено(Параметры.ВыбранныеАдресаты) Тогда
		
		ОтработатьПараметрУстановитьВыделение();
		Возврат;
	КонецЕсли;
	
	Если Параметры.УпрощенныйИнтерфейс Тогда
		
		Если Параметры.РежимРаботыФормы = 1 Тогда // выбор, передана ссылка
			
			ВыбранныйАдресат = Параметры.ВыбранныеАдресаты;
			
			Если ТипЗнч(ВыбранныйАдресат) = Тип("СправочникСсылка.ПолныеРоли") Тогда // получим роль
				РольИсполнителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранныйАдресат, "Владелец");
				УстановитьТекущуюСтрокуСписка(РольИсполнителя);
			Иначе
				УстановитьТекущуюСтрокуСписка(ВыбранныйАдресат);
			КонецЕсли;
			
		Иначе // подбор, передан массив или массив структур (если вызов осуществлен из формы действия)
			
			Для Каждого ВыбранныйАдресат Из Параметры.ВыбранныеАдресаты Цикл
				
				Если ТипЗнч(ВыбранныйАдресат) = Тип("Структура") Тогда
					СтрАдресат = Новый Структура("Контакт", ВыбранныйАдресат.Участник);
				Иначе
					СтрАдресат = Новый Структура("Контакт", ВыбранныйАдресат);
				КонецЕсли;
				
				Если Параметры.КонтролироватьДублиАдресатов
					И ВыбранныеАдресаты.НайтиСтроки(СтрАдресат).Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрАдресат = ВыбранныеАдресаты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрАдресат, СтрАдресат);
				Если ТипЗнч(ВыбранныйАдресат) = Тип("Структура") Тогда
					НоваяСтрАдресат.Недоступно = ВыбранныйАдресат.Недоступно;
				КонецЕсли;
				
				НоваяСтрАдресат.НомерКартинки = НомерКартинкиКонтакта(НоваяСтрАдресат.Контакт, Неопределено);
				НоваяСтрАдресат.ПолноеПредставление = ПолучитьПолноеПредставлениеАдресата(
					НоваяСтрАдресат.Адрес, НоваяСтрАдресат.Контакт);
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе // не УпрощенныйИнтерфейс, передан массив структур
		
		Для Каждого ВыбранныйАдресат Из Параметры.ВыбранныеАдресаты Цикл
		
			Если Параметры.РежимРаботыФормы = 1 Тогда
				УстановитьТекущуюСтрокуСписка(ВыбранныйАдресат.Контакт);
				Возврат;
			КонецЕсли;
			
			Если Параметры.КонтролироватьДублиАдресатов
				И ВыбранныеАдресаты.НайтиСтроки(ВыбранныйАдресат).Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрАдресат = ВыбранныеАдресаты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрАдресат, ВыбранныйАдресат);
			
			НоваяСтрАдресат.НомерКартинки = НомерКартинкиКонтакта(НоваяСтрАдресат.Контакт, Неопределено);
			Если ЗначениеЗаполнено(НоваяСтрАдресат.Адрес) Тогда
				НоваяСтрАдресат.Представление = ВстроеннаяПочтаСервер.ПолучитьПочтовоеПредставлениеКонтакта(
					НоваяСтрАдресат.Контакт, НоваяСтрАдресат.Адрес);
			КонецЕсли;
			НоваяСтрАдресат.ПолноеПредставление = ПолучитьПолноеПредставлениеАдресата(
				НоваяСтрАдресат.Адрес, НоваяСтрАдресат.Контакт);
		
		КонецЦикла;
		
	КонецЕсли;
	
	ОтработатьПараметрУстановитьВыделение();
			
КонецПроцедуры

// Получает полную роль по роли исполнителя без объектов адресации.
//
// Параметры:
//   РольИсполнителя - СправочникСсылка.РолиИсполнителей - выбранная роль.
//
// Возвращаемое значение:
//   СправочникСсылка.ПолныеРоли - полная роль, соответствующая указанной.
//
&НаСервереБезКонтекста
Функция ПолнаяРольБезОбъектаАдресации(РольИсполнителя)
	
	Возврат ОбщегоНазначенияДокументооборотПовтИсп.НайтиСоздатьПолнуюРоль(РольИсполнителя, Неопределено, Неопределено);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПодменитьВРезультатеВыбораПользователейСотрудниками(Результат)
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.Пользователи") Тогда
		
		Результат = Сотрудники.ОсновнойСотрудникПользователя(Результат);
		
	ИначеЕсли ТипЗнч(Результат) = Тип("Массив") Тогда
		
		Для Индекс = 0 По Результат.Количество() - 1 Цикл
			
			ТипРезультата = ТипЗнч(Результат[Индекс]);
			
			Если ТипРезультата = Тип("СправочникСсылка.Пользователи") Тогда
				
				Результат[Индекс] = 
					Сотрудники.ОсновнойСотрудникПользователя(Результат[Индекс]);
				
			ИначеЕсли ТипРезультата = Тип("Структура")
				И ТипЗнч(Результат[Индекс].Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
				
				Результат[Индекс].Контакт =
					Сотрудники.ОсновнойСотрудникПользователя(Результат[Индекс].Контакт);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьПоПравиламКоммуникаций(ПроверяемыеЭлементы, Правила, ВключатьВРезультатНепроверяемые = Ложь)
	
	Возврат Справочники.ПравилаКоммуникаций.ПроверитьЭлементы(
				ПроверяемыеЭлементы, Правила, ВключатьВРезультатНепроверяемые);
	
КонецФункции

&НаСервере
Функция ЗаписатьПодборВХранилище()
	
	Результат = Новый Массив;
	Для Каждого ВыбранныйАдресат Из ВыбранныеАдресаты Цикл
		Группа = ?(ПустаяСтрока(ВыбранныйАдресат.Группа),
			Неопределено,
			ВыбранныйАдресат.Группа);
		СтруктураАдресата = Новый Структура(
			"Адрес, Представление, Контакт, ТипПолучателя",
			ВыбранныйАдресат.Адрес,
			ВыбранныйАдресат.Представление,
			ВыбранныйАдресат.Контакт,
			Группа);
		Результат.Добавить(СтруктураАдресата);
	КонецЦикла;
	
	Если Параметры.ПодменятьПользователейСотрудниками Тогда
		ПодменитьВРезультатеВыбораПользователейСотрудниками(Результат);
	КонецЕсли;
	
	АдресРезультата = ПоместитьВоВременноеХранилище(Результат, Параметры.ИдентификаторФормыВладельца);
	
	Возврат АдресРезультата;
	
КонецФункции

#Область СлужебныеПроцедурыИФункции_МобильныйКлиент

&НаСервере
Процедура МК_НастроитьЭлементыФормы()
	
	СворачиваниеЭлементовПоВажности = СворачиваниеЭлементовФормыПоВажности.НеИспользовать;
	ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Авто;
	
	Элементы.ВыбратьАдресатовКоманда.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели;
	Элементы.ВыбратьАдресатовКоманда.Отображение = ОтображениеКнопки.Картинка;
	Элементы.ВыбратьАдресатовКоманда.Картинка = БиблиотекаКартинок.ЗаписатьИЗакрыть;
	
	Элементы.СписокКонтекстноеМенюОбновитьДанныеАдреснойКниги.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	Элементы.СписокКонтекстноеМенюПоказыватьНедействительных.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	
	Элементы.СписокКонтекстноеМенюОбновить.Видимость = Ложь;
	Элементы.СписокКонтекстноеМенюГруппа2.Видимость = Ложь;
	Элементы.ГруппаОсновная.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;
	Элементы.СтрокаПоискаВФорме.РастягиватьПоГоризонтали = Истина;
	Элементы.ГруппаПоУмолчанию.ШиринаЭлемента = 0;
	
	// Скроем ненужное.
	Элементы.ДекорацияВсеАдресаты.Видимость = Ложь;
	Элементы.ДекорацияВыбранныеАдресаты.Видимость = Ложь;
	Элементы.ПереместитьИзСпискаВВыбранное.Видимость = Ложь;
	Элементы.ПереместитьИзВыбранныхВСписок.Видимость = Ложь;
	Элементы.HTMLОписаниеКонтакта.Видимость = Ложь;
	
	// Настроим список Выбранные адресаты.
	Элементы.ВыбранныеАдресаты.ВариантУправленияВысотой = ВариантУправленияВысотойТаблицы.ВСтрокахТаблицы;
	Элементы.ВыбранныеАдресаты.ВертикальнаяПолосаПрокрутки = ИспользованиеПолосыПрокрутки.ИспользоватьВсегда;
	Элементы.ВыбранныеАдресаты.АвтоМаксимальнаяВысота = Ложь;
	Элементы.ВыбранныеАдресаты.МаксимальнаяВысота = 5;
	
	// Настроим ячейки в списке Выбранные адресаты.
	Элементы.ВыбранныеАдресатыНомерКартинки.АвтоВысотаЯчейки = Истина;
	Элементы.ПолноеПредставление.АвтоВысотаЯчейки = Истина;
	
	// Установим заголовок у ГруппаПолучатели и растянем ее.
	Элементы.ГруппаПолучатели.Заголовок = НСтр("ru = 'Выбранные получатели'");
	Элементы.ГруппаПолучатели.ОтображатьЗаголовок = Истина;
	Элементы.ГруппаПолучатели.РастягиватьПоГоризонтали = Истина;
	
	// Настроим команды.
	Элементы.Отмена.Видимость = Ложь;
	
КонецПроцедуры

// Обновляет заголовок элемента ГруппаПолучатели.
// Вызывается при выборе из списка Список.
//
&НаКлиенте
Процедура ОбновитьЗаголовокГруппыВыбранныхАдресатов() Экспорт
	
	Элементы.ГруппаПолучатели.Заголовок =
		СтрШаблон(
			НСтр("ru = 'Выбранные получатели (%1)'"),
			ВыбранныеАдресаты.Количество());
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_КарточкаКонтакта

&НаКлиенте
Процедура ОбновитьКарточкуКонтакта()
	
	Если ТипЗнч(ТекущийКонтакт) = Тип("СправочникСсылка.Сотрудники") Тогда
		HTMLОписаниеКонтакта = ОбзорОбъектовКлиент.ОбзораОбъекта(
			ТекущийКонтакт,
			УникальныйИдентификатор);
		Возврат;
	КонецЕсли;
	
	ЦветФонаHTMLОписания = "";
	
	HTMLОписаниеКонтакта = "<html>"
		+ "<head>"
		+ ОбзорОбъектовКлиентСервер.СтильHTML()
		+ "<body %bgcolor%>";
		
	HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "<table>";
	HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "<tr>";
	
	Если ЗначениеЗаполнено(ТекущийКонтакт)
		И ТипЗнч(ТекущийКонтакт) <> Тип("Строка") Тогда
		
		ДанныеКонтакта = ПолучитьДанныеКонтакта(ТекущийКонтакт, УникальныйИдентификатор,
			ПоказыватьФотографии);
			
		// Фото контакта
		Если ПоказыватьФотографии Тогда
			
			АдресФото = "";
			СсылкаПодФото = "";
			
			Если ДанныеКонтакта.ЕстьФото Тогда
				Картинка = Новый Картинка(ДанныеКонтакта.ДвоичныеДанныеФото);
				Расширение = Строка(Картинка.Формат());
				АдресФото = "data:image/" + Расширение + ";base64," + Base64Строка(ДанныеКонтакта.ДвоичныеДанныеФото);
				СсылкаПодФото = "v8doc:" + ПолучитьНавигационнуюСсылку(ТекущийКонтакт);
			ИначеЕсли ДанныеКонтакта.ВозможностьДобавленияФото Тогда
				Расширение = Строка(БиблиотекаКартинок.ПользовательБезФото.Формат());
				ДвоичныеДанныеФото = БиблиотекаКартинок.ПользовательБезФото.ПолучитьДвоичныеДанные();
				АдресФото = "data:image/" + Расширение + ";base64," + Base64Строка(ДвоичныеДанныеФото);
				СсылкаПодФото = "ДобавитьФото";
			КонецЕсли;
			
			Если СсылкаПодФото <> "" Тогда
				HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "<td width = ""20"">";
				HTMLОписаниеКонтакта = HTMLОписаниеКонтакта +
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"<a href=""%1""><img border=""1"" src=""%2"" height=""70"" style=""border-color: #bdbdbd"" ></a>", 
						СсылкаПодФото,
						АдресФото);
				HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "</td>";
			КонецЕсли;
			
		КонецЕсли;
		
		// Описание контакта
		HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "<td>";
		
		HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "<b>";
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(
			HTMLОписаниеКонтакта,
			ТекущийКонтакт,
			"",
			ДанныеКонтакта.ПредставлениеКонтакта);
		HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "</b>";
			
		HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "<br>";
		
		ОписаниеКонтакта_HTML = "";
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(
			ОписаниеКонтакта_HTML,
			ДанныеКонтакта.ОписаниеКонтакта,
			"");
		
		ОписаниеКонтакта_HTML = СтрЗаменить(ОписаниеКонтакта_HTML, Символы.ПС, "<br>");
		HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + ОписаниеКонтакта_HTML;
			
		HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "</td>";
			
		Если ДанныеКонтакта.ОписаниеОтсутствия <> Неопределено Тогда
			
			ЦветФонаHTMLОписания = "bgcolor = ""#FFE1E1""";
			
			HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "<td align = right>";
			
			HTMLОписаниеКонтакта = HTMLОписаниеКонтакта
				+ СтрШаблон("<a href=v8doc:%1>%2</a>",
					ПолучитьНавигационнуюСсылку(ДанныеКонтакта.ОписаниеОтсутствия.Ссылка),
					РаботаС_HTML.ЗаменитьСпецСимволыHTML(ДанныеКонтакта.ОписаниеОтсутствия.Представление));
			
			HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "</td>";
			
		КонецЕсли;
		
	КонецЕсли;
	
	HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "</tr>";
	HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "</table>";
	
	HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "</body>";
	HTMLОписаниеКонтакта = HTMLОписаниеКонтакта + "</html>";
	
	HTMLОписаниеКонтакта = СтрЗаменить(HTMLОписаниеКонтакта, "%bgcolor%", ЦветФонаHTMLОписания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеКонтакта(Контакт, УникальныйИдентификатор, ПолучатьФото)
	
	ДанныеКонтакта = Новый Структура;
	ДанныеКонтакта.Вставить("ДвоичныеДанныеФото", "");
	ДанныеКонтакта.Вставить("ПредставлениеКонтакта", "");
	ДанныеКонтакта.Вставить("ОписаниеКонтакта", "");
	ДанныеКонтакта.Вставить("ЕстьФото", Ложь);
	ДанныеКонтакта.Вставить("ВозможностьДобавленияФото", Ложь);
	ДанныеКонтакта.Вставить("ОписаниеОтсутствия", Неопределено);
	
	ТипКонтакта = ТипЗнч(Контакт);
	
	Если ПолучатьФото Тогда
		ДвоичныеДанныеФото = РаботаСФотографиями.ПолучитьДвоичныеДанныеФото(Контакт);
		Если ЗначениеЗаполнено(ДвоичныеДанныеФото) Тогда
			ДанныеКонтакта.ЕстьФото = Истина;
			ДанныеКонтакта.ДвоичныеДанныеФото = ДвоичныеДанныеФото;
		КонецЕсли;
	КонецЕсли;
		
	Если ТипКонтакта = Тип("СправочникСсылка.Пользователи")
		Или ТипКонтакта = Тип("СправочникСсылка.КонтактныеЛица")
		Или ТипКонтакта = Тип("СправочникСсылка.ЛичныеАдресаты") Тогда
		
		ДанныеКонтакта.ВозможностьДобавленияФото = Истина;
	ИначеЕсли ТипКонтакта = Тип("СправочникСсылка.Контрагенты") Тогда
		РеквизитыКонтакта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Контакт, "ЭтоГруппа, ЮрФизЛицо");
		
		ДанныеКонтакта.ВозможностьДобавленияФото = НЕ РеквизитыКонтакта.ЭтоГруппа 
			И РеквизитыКонтакта.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
	Иначе
		ДанныеКонтакта.ВозможностьДобавленияФото = Ложь;
	КонецЕсли;
	
	Если ДанныеКонтакта.ВозможностьДобавленияФото Тогда
		// Проверка на право изменения карточки контакта.
		ПраваПоОбъекту = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(
			Контакт,
			ПользователиКлиентСервер.ТекущийПользователь());
		
		Если Не ПраваПоОбъекту.Изменение Тогда
			ДанныеКонтакта.ВозможностьДобавленияФото = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипКонтакта = Тип("СправочникСсылка.Пользователи") Тогда
		ДанныеКонтакта.ОписаниеОтсутствия = 
			Отсутствия.ПолучитьОписаниеТекущегоОтсутствияСотрудника(Контакт);
	КонецЕсли;
	
	ДополнительноеОписаниеКонтакта = "";
	
	Если ТипКонтакта = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		ДополнительноеОписаниеКонтакта = ОписаниеПодразделенияДляКарточки(Контакт);
	ИначеЕсли ТипКонтакта = Тип("СправочникСсылка.Пользователи") Тогда
		ДополнительноеОписаниеКонтакта = ОписаниеПользователяДляКарточки(Контакт);
	ИначеЕсли ТипКонтакта = Тип("СправочникСсылка.ЛичныеАдресаты") Тогда
		ДополнительноеОписаниеКонтакта = ОписаниеЛичногоАдресатаДляКарточки(Контакт);
	ИначеЕсли ТипКонтакта = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		ДополнительноеОписаниеКонтакта = ОписаниеКонтактногоЛицаДляКарточки(Контакт);
	ИначеЕсли ТипКонтакта = Тип("СправочникСсылка.Контрагенты") Тогда
		ДополнительноеОписаниеКонтакта = ОписаниеКонтрагентаДляКарточки(Контакт);
	ИначеЕсли ТипКонтакта = Тип("СправочникСсылка.Организации") Тогда
		ДополнительноеОписаниеКонтакта = ОписаниеОрганизацииДляКарточки(Контакт);		
	ИначеЕсли ТипКонтакта = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		ДополнительноеОписаниеКонтакта = ОписаниеРолиДляКарточки(Контакт);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительноеОписаниеКонтакта) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			ДанныеКонтакта.ОписаниеКонтакта,
			Символы.ПС,
			ДополнительноеОписаниеКонтакта);
	КонецЕсли;
	
	Возврат ДанныеКонтакта;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеПодразделенияДляКарточки(Контакт)
	
	Результат = "";
	
	Руководитель = СтруктураПредприятия.РуководительПодразделения(Контакт);
	
	Если ЗначениеЗаполнено(Руководитель) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат, 
			Символы.ПС, 
			НСтр("ru='Руководитель: '") + Строка(Руководитель));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеПользователяДляКарточки(Контакт)
	
	Результат = "";
	
	СотрудникПользователя = Сотрудники.ОсновнойСотрудникПользователя(Контакт);
	Если Не ЗначениеЗаполнено(СотрудникПользователя) Тогда
		Возврат Результат;
	КонецЕсли;

	Если ТипЗнч(СотрудникПользователя) = Тип("СправочникСсылка.Сотрудники") Тогда	
		ОписаниеПользователяПодразделение = Сотрудники.ПодразделениеСотрудника(СотрудникПользователя);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОписаниеПользователяПодразделение) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат, 
			Символы.ПС, 
			ОписаниеПользователяПодразделение);
	КонецЕсли;	
	
	Телефон = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
		СотрудникПользователя, 
		Справочники.ВидыКонтактнойИнформации.ТелефонПользователя,,
		ТекущаяДатаСеанса());
		
	Если ЗначениеЗаполнено(Телефон) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат, 
			Символы.ПС, 
			НСтр("ru='Тел: '") + Телефон);
	КонецЕсли;
	
	АдресЭП = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
		СотрудникПользователя, 
		Справочники.ВидыКонтактнойИнформации.EmailПользователя,,
		ТекущаяДатаСеанса());
		
	Если ЗначениеЗаполнено(АдресЭП) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат, 
			Символы.ПС, 
			НСтр("ru='E-mail: '") + АдресЭП);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеРолиДляКарточки(Контакт)
	
	Результат = "";
	
	АдресЭП = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
		Контакт, 
		Справочники.ВидыКонтактнойИнформации.EmailРоли,,
		ТекущаяДатаСеанса());
		
	Если ЗначениеЗаполнено(АдресЭП) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат, 
			Символы.ПС, 
			НСтр("ru='E-mail: '") + АдресЭП);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеЛичногоАдресатаДляКарточки(Контакт)
	
	Результат = "";
	
	Организация = Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контакт, "Организация"));
	Если ЗначениеЗаполнено(Организация) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат, 
			Символы.ПС, 
			Организация);
	КонецЕсли;		
	
	Должность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контакт, "Должность");
	Если ЗначениеЗаполнено(Должность) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат, 
			Символы.ПС, 
			Должность);
	КонецЕсли;
	
	ТелефонКонтактногоЛица = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
		Контакт, 
		Справочники.ВидыКонтактнойИнформации.РабочийТелефонАдресата,,
		ТекущаяДатаСеанса());
		
	Если ЗначениеЗаполнено(ТелефонКонтактногоЛица) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат, 
			Символы.ПС, 
			НСтр("ru='Тел: '") + ТелефонКонтактногоЛица);
	КонецЕсли;
	
	АдресЭП = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
		Контакт, 
		Справочники.ВидыКонтактнойИнформации.EmailАдресата,,
		ТекущаяДатаСеанса());
		
	Если ЗначениеЗаполнено(АдресЭП) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат, 
			Символы.ПС, 
			НСтр("ru='E-mail: '") + АдресЭП);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеКонтактногоЛицаДляКарточки(Контакт)
	
	Результат = "";
	
	Должность = Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контакт, "Должность"));
	Если ЗначениеЗаполнено(Должность) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат, 
			Символы.ПС, 
			Должность);
	КонецЕсли;
	
	ТелефонКонтактногоЛица = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
		Контакт, 
		Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица,,
		ТекущаяДатаСеанса());
		
	Если ЗначениеЗаполнено(ТелефонКонтактногоЛица) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат, 
			Символы.ПС, 
			НСтр("ru='Тел: '") + ТелефонКонтактногоЛица);
	КонецЕсли;
	
	АдресЭП = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
		Контакт, 
		Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица,,
		ТекущаяДатаСеанса());
		
	Если ЗначениеЗаполнено(АдресЭП) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат, 
			Символы.ПС, 
			НСтр("ru='E-mail: '") + АдресЭП);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеКонтрагентаДляКарточки(Контакт)
	
	Результат = "";
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контакт, "ЭтоГруппа") Тогда
		Возврат "";
	КонецЕсли;
	
	ТелефонКонтактногоЛица = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
		Контакт, 
		Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,,
		ТекущаяДатаСеанса());
		
	Если ЗначениеЗаполнено(ТелефонКонтактногоЛица) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат, 
			Символы.ПС, 
			НСтр("ru='Тел: '") + ТелефонКонтактногоЛица);
	КонецЕсли;
	
	АдресЭП = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
		Контакт, 
		Справочники.ВидыКонтактнойИнформации.EmailКонтрагента,,
		ТекущаяДатаСеанса());
		
	Если ЗначениеЗаполнено(АдресЭП) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат, 
			Символы.ПС, 
			НСтр("ru='E-mail: '") + АдресЭП);
	КонецЕсли;
	
	ФактическийАдрес = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
		Контакт, 
		Справочники.ВидыКонтактнойИнформации.ФактическийАдресКонтрагента,,
		ТекущаяДатаСеанса());
		
	Если ЗначениеЗаполнено(ФактическийАдрес) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат, 
			Символы.ПС, 
			НСтр("ru='Адрес: '") + ФактическийАдрес);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеОрганизацииДляКарточки(Контакт)
	
	Результат = "";
	
	Телефон = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
		Контакт, 
		Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации,,
		ТекущаяДатаСеанса());
		
	Если ЗначениеЗаполнено(Телефон) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат, 
			Символы.ПС, 
			НСтр("ru='Тел: '") + Телефон);
	КонецЕсли;
	
	АдресЭП = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
		Контакт, 
		Справочники.ВидыКонтактнойИнформации.EmailОрганизации,,
		ТекущаяДатаСеанса());
		
	Если ЗначениеЗаполнено(АдресЭП) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат, 
			Символы.ПС, 
			НСтр("ru='E-mail: '") + АдресЭП);
	КонецЕсли;
	
	ЮрАдресОрганизации = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
		Контакт, 
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,,
		ТекущаяДатаСеанса());
		
	Если ЗначениеЗаполнено(ЮрАдресОрганизации) Тогда
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат, 
			Символы.ПС, 
			НСтр("ru='Адрес: '") + ЮрАдресОрганизации);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ВыборАдресатов

&НаКлиенте
Процедура ДобавитьВыделенныеКонтактыВСписокВыбранных(
	ОписаниеОповещенияПослеДобавления = Неопределено, Перетаскивание = Ложь)
	
	ПараметрыТекущегоСписка = ПараметрыТекущегоСписка(Перетаскивание);
	ВыделенныеСтроки = ПараметрыТекущегоСписка.ВыделенныеСтроки;
	ТаблицаФормы = ПараметрыТекущегоСписка.ТаблицаФормы;
	ИмяПоля_Объект = ПараметрыТекущегоСписка.ИмяПоля_Объект;
	ИмяПоля_ТипОбъекта = ПараметрыТекущегоСписка.ИмяПоля_ТипОбъекта;
	ИмяПоля_ДействующаяЗапись = ПараметрыТекущегоСписка.ИмяПоля_ДействующаяЗапись;
	
	ТекущиеДанные = ПараметрыТекущегоСписка.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Особенным образом обрабатываем выбор автоподстановок процессов, роли с объектами адресации,
	// подразделения и проекты, т.к. для их выбора требуется выбор доп. параметров.
	// Обработка происходит в случае выбора одной строки.
	Если ВыделенныеСтроки.Количество() = 1 Тогда
		
		Если ТекущиеДанные.ЭтоРоль
			И Не Параметры.ВыбиратьЭлектронныеАдреса
			И ОтображатьРоли
			И ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
				ТекущиеДанные[ИмяПоля_Объект], "ИспользуетсяСОбъектамиАдресации")
			И (Не Параметры.Свойство("НеВыбиратьПолныеРоли") Или Не Параметры.НеВыбиратьПолныеРоли) Тогда
				
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ОписаниеОповещенияПослеДобавления",
				ОписаниеОповещенияПослеДобавления);
				
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПродолжитьДобавлениеКонтактаПослеВыбораОбъектовАдресации",
				ЭтаФорма, ДополнительныеПараметры);
				
			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("РольИсполнителя", ТекущиеДанные[ИмяПоля_Объект]);
				
			// Подставим подразделение в качестве объекта адресации, если это уместно.
			Если ТекущиеДанные.Свойство("РодительОбъекта")
				И ТипЗнч(ТекущиеДанные.РодительОбъекта) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
				РеквизитыРоли = ОбщегоНазначенияДокументооборотВызовСервера.ЗначенияРеквизитовОбъекта(
					ТекущиеДанные[ИмяПоля_Объект],
					"ТипыОсновногоОбъектаАдресации, ТипыДополнительногоОбъектаАдресации");
				Если РеквизитыРоли.ТипыОсновногоОбъектаАдресации 
					= ПредопределенноеЗначение("ПланВидовХарактеристик.ОбъектыАдресацииЗадач.Подразделение") Тогда
					ПараметрыОткрытияФормы.Вставить("ОсновнойОбъектАдресации", ТекущиеДанные.РодительОбъекта);
				ИначеЕсли РеквизитыРоли.ТипыДополнительногоОбъектаАдресации 
					= ПредопределенноеЗначение("ПланВидовХарактеристик.ОбъектыАдресацииЗадач.Подразделение") Тогда
					ПараметрыОткрытияФормы.Вставить("ДополнительныйОбъектАдресации", ТекущиеДанные.РодительОбъекта);
				КонецЕсли;
			КонецЕсли;
				
			ОткрытьФорму("ОбщаяФорма.ВыборРолиИсполнителя", 
				ПараметрыОткрытияФормы, 
				ЭтаФорма,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
			Возврат;
			
		ИначеЕсли ТекущиеДанные.ЭтоСтруктураПредприятия
			И ВыбиратьКонтейнерыПользователей
			И УточнятьСоставКонтейнеров Тогда
			
			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("Подразделение", ТекущиеДанные[ИмяПоля_Объект]);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ОписаниеОповещенияПослеДобавления",
				ОписаниеОповещенияПослеДобавления);
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПродолжитьДобавлениеКонтактаПослеВыбораПодразделенияКонтейнера",
				ЭтаФорма, ДополнительныеПараметры);
			
			ОткрытьФорму("Справочник.ПодразделенияКонтейнеры.Форма.ВыборПодразделенияКонтейнера", 
				ПараметрыОткрытияФормы, 
				ЭтаФорма,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Возврат;
			
		ИначеЕсли ТекущиеДанные.ЭтоПроект
			И ВыбиратьКонтейнерыПользователей
			И УточнятьСоставКонтейнеров Тогда
			
			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("Проект", ТекущиеДанные[ИмяПоля_Объект]);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ОписаниеОповещенияПослеДобавления",
				ОписаниеОповещенияПослеДобавления);
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПродолжитьДобавлениеКонтактаПослеВыбораПроектаКонтейнера",
				ЭтаФорма, ДополнительныеПараметры);
			
			ОткрытьФорму("Справочник.ПроектыКонтейнеры.Форма.ВыборПроектаКонтейнера", 
				ПараметрыОткрытияФормы, 
				ЭтаФорма,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Формирование списка выделенных объектов
	ВыделенныеОбъекты = Новый Массив;
	
	Если Параметры.РежимРаботыФормы = 1 Тогда
		
		ВыбранныеАдресаты.Очистить();
		
		Если ТекущиеДанные.ЭтоРаздел
			И ТекущиеДанные.Ссылка = ПредопределенноеЗначение("Справочник.АдреснаяКнига.Сотрудники") Тогда
			
			ВыделеннаяСтрока = СтруктураВыделеннойСтроки();
			ВыделеннаяСтрока.Объект = ПредопределенноеЗначение("Справочник.РабочиеГруппы.ВсеПользователи");
			ВыделеннаяСтрока.ТипОбъекта = Тип("СправочникСсылка.РабочиеГруппы");
			ВыделеннаяСтрока.ЭтоАвтоподстановкаДляПроцессов = Ложь;
			ВыделеннаяСтрока.ЭтоАвтоподстановкаДляОбъектов = Ложь;
			ВыделеннаяСтрока.ЭтоАвтогруппа = Ложь;
			ВыделеннаяСтрока.ЭтоРаздел = Ложь;
			ВыделенныеОбъекты.Добавить(ВыделеннаяСтрока);
			
		Иначе
			
			ДобавитьВыделенныйОбъектВМассив(
				ВыделенныеОбъекты, ТекущиеДанные, ИмяПоля_Объект, ИмяПоля_ТипОбъекта);
				
		КонецЕсли;
		
	Иначе
		Для Каждого Стр ИЗ ВыделенныеСтроки Цикл
			
			ДанныеСтроки = ТаблицаФормы.ДанныеСтроки(Стр);
			
			// Особым образом обрабатываем выбор раздела Сотрудники
			Если ДанныеСтроки.ЭтоРаздел
				И ДанныеСтроки.Ссылка = ПредопределенноеЗначение("Справочник.АдреснаяКнига.Сотрудники") Тогда
				
				ВыделеннаяСтрока = СтруктураВыделеннойСтроки();
				ВыделеннаяСтрока.Объект = ПредопределенноеЗначение("Справочник.РабочиеГруппы.ВсеПользователи");
				ВыделеннаяСтрока.ТипОбъекта = Тип("СправочникСсылка.РабочиеГруппы");
				ВыделеннаяСтрока.ЭтоАвтоподстановкаДляПроцессов = Ложь;
				ВыделеннаяСтрока.ЭтоАвтоподстановкаДляОбъектов = Ложь;
				ВыделеннаяСтрока.ЭтоАвтогруппа = Ложь;
				ВыделеннаяСтрока.ЭтоРаздел = Ложь;
				ВыделенныеОбъекты.Добавить(ВыделеннаяСтрока);
				
			Иначе
				ДобавитьВыделенныйОбъектВМассив(
					ВыделенныеОбъекты, ДанныеСтроки, ИмяПоля_Объект, ИмяПоля_ТипОбъекта);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Правила коммуникаций.
	ПравилаКоммуникаций = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Список.КомпоновщикНастроек.Настройки.ДополнительныеСвойства,
		"ПравилаКоммуникаций");
		
	КонтактыОбъектов = КонтактыОбъектов(ВыделенныеОбъекты, Параметры, ПравилаКоммуникаций);
	
	// Формирование списков контактов к добавлению
	КонтактыКДобавлению = Новый Массив;
	
	Если КонтактыОбъектов.Количество() = 1 Тогда
		
		Если Параметры.ВыбиратьЭлектронныеАдреса Тогда 
			Если КонтактыОбъектов[0].Адреса.Количество() = 0 Тогда
			
				МассивСтрок = Новый Массив;
				МассивСтрок.Добавить(НСтр("ru = 'У адресата ""'"));
				МассивСтрок.Добавить(
					Новый ФорматированнаяСтрока(
						Строка(КонтактыОбъектов[0].Контакт),,,,
						ПолучитьНавигационнуюСсылку(КонтактыОбъектов[0].Контакт)));
				МассивСтрок.Добавить(НСтр("ru = '"" нет электронной почты.'"));
				ТекстПредупреждения = Новый ФорматированнаяСтрока(МассивСтрок);
				ПоказатьПредупреждение(,ТекстПредупреждения);
				
				Возврат;
			КонецЕсли;
			
			Если КонтактыОбъектов[0].Адреса.Количество() > 1 Тогда
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Контакт", КонтактыОбъектов[0]);
				ПараметрыФормы.Вставить(
					"ВыборНесколькихАдресов", ?(Параметры.РежимРаботыФормы = 2, Истина, Ложь));
				
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ДобавитьКонтактыВСписокВыбранных", ЭтаФорма, ОписаниеОповещенияПослеДобавления);
				
				ОткрытьФорму(
					"Справочник.АдреснаяКнига.Форма.ВыбораАдресовКонтакта",
					ПараметрыФормы,,,,,
					ОписаниеОповещения,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		КонтактыКДобавлению.Добавить(КонтактыОбъектов[0]);
		
	Иначе
		Для Каждого КонтактОбъекта ИЗ КонтактыОбъектов Цикл
			
			// Контакты без электронных адресов пропускаем.
			Если КонтактОбъекта.Адреса.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			КонтактыКДобавлению.Добавить(КонтактОбъекта);
			
		КонецЦикла;
	КонецЕсли;
	
	ДобавитьКонтактыВСписокВыбранных(КонтактыКДобавлению, ОписаниеОповещенияПослеДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВыделенныеКонтактыИзСпискаВыбранных()
	
	ОчиститьСообщения();
	
	ВыделенныеСтроки = Элементы.ВыбранныеАдресаты.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИндексВМассиве = ВыделенныеСтроки.Количество() - 1;
	
	Пока ИндексВМассиве >= 0 Цикл
		ВыделеннаяСтрока = ВыделенныеСтроки[ИндексВМассиве];
		ДанныеСтроки = ВыбранныеАдресаты.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если ДанныеСтроки.Недоступно Тогда
			ИндексВМассиве = ИндексВМассиве - 1;
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Удаление участника %1 невозможно.'"), ДанныеСтроки.Контакт),, "ВыбранныеАдресаты");
			Продолжить;
		КонецЕсли;
		Индекс = ВыбранныеАдресаты.Индекс(ДанныеСтроки);
		ВыбранныеАдресаты.Удалить(Индекс);
		ИндексВМассиве = ИндексВМассиве - 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВыделенныйОбъектВМассив(
	ВыделенныеОбъекты, ДанныеСтроки, ИмяПоля_Объект, ИмяПоля_ТипОбъекта)
	
	ВыделеннаяСтрока = СтруктураВыделеннойСтроки();
	
	ЗаполнитьЗначенияСвойств(ВыделеннаяСтрока, ДанныеСтроки);
	ВыделеннаяСтрока.Объект = ДанныеСтроки[ИмяПоля_Объект];
	ВыделеннаяСтрока.ТипОбъекта = ДанныеСтроки[ИмяПоля_ТипОбъекта];
	ВыделенныеОбъекты.Добавить(ВыделеннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураВыделеннойСтроки()
	
	ВыделеннаяСтрока = Новый Структура(
		"Объект, ТипОбъекта, ЭтоАвтоподстановкаДляПроцессов, ЭтоАвтоподстановкаДляОбъектов, ЭтоАвтогруппа, ЭтоРаздел");
		
	Возврат ВыделеннаяСтрока;
	
КонецФункции

&НаКлиенте
Процедура ПродолжитьДобавлениеКонтактаПослеВыбораОбъектовАдресации(
	ПараметрыРоли, ДополнительныеПараметры) Экспорт
	
	Если ПараметрыРоли = КодВозвратаДиалога.Отмена
		Или ПараметрыРоли = Неопределено Тогда
		
		Возврат;
	КонецЕсли;
	
	ПараметрыКонтакта = СтруктураКонтакта();
	ПараметрыКонтакта.Контакт = ПараметрыРоли.РольИсполнителяПолная;
	ПараметрыКонтакта.НомерКартинки = НомерКартинкиКонтакта(ПараметрыРоли.РольИсполнителяПолная, Неопределено);
	ПараметрыКонтакта.Представление = ПолучитьПолноеПредставлениеАдресата("", ПараметрыРоли.РольИсполнителяПолная);
	ПараметрыКонтакта.Адреса.Добавить(СтруктураАдресаКонтакта());
	ПараметрыКонтакта.ТипКонтакта = Тип("СправочникСсылка.ПолныеРоли");
	
	ПараметрыКонтакта.Адреса[0].ПолноеПредставление = ПолучитьПолноеПредставлениеАдресата(
		ПараметрыКонтакта.Адреса[0].Адрес,
		ПараметрыКонтакта.Контакт);
	
	КонтактыКДобавлению = Новый Массив;
	КонтактыКДобавлению.Добавить(ПараметрыКонтакта);
	
	ДобавитьКонтактыВСписокВыбранных(
		КонтактыКДобавлению, ДополнительныеПараметры.ОписаниеОповещенияПослеДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьДобавлениеКонтактаПослеВыбораПодразделенияКонтейнера(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Или Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКонтакта = СтруктураКонтакта();
	ПараметрыКонтакта.Контакт = Результат.ПодразделениеКонтейнер;
	ПараметрыКонтакта.НомерКартинки = НомерКартинкиКонтакта(Результат.ПодразделениеКонтейнер, Неопределено);
	ПараметрыКонтакта.Представление = ПолучитьПолноеПредставлениеАдресата("", Результат.ПодразделениеКонтейнер);
	ПараметрыКонтакта.Адреса.Добавить(СтруктураАдресаКонтакта());
	ПараметрыКонтакта.ТипКонтакта = Тип("СправочникСсылка.ПодразделенияКонтейнеры");
	
	ПараметрыКонтакта.Адреса[0].ПолноеПредставление = ПолучитьПолноеПредставлениеАдресата(
		ПараметрыКонтакта.Адреса[0].Адрес,
		ПараметрыКонтакта.Контакт);
	
	КонтактыКДобавлению = Новый Массив;
	КонтактыКДобавлению.Добавить(ПараметрыКонтакта);
	
	ДобавитьКонтактыВСписокВыбранных(
		КонтактыКДобавлению, ДополнительныеПараметры.ОписаниеОповещенияПослеДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьДобавлениеКонтактаПослеВыбораПроектаКонтейнера(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Или Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКонтакта = СтруктураКонтакта();
	ПараметрыКонтакта.Контакт = Результат.ПроектКонтейнер;
	ПараметрыКонтакта.НомерКартинки = НомерКартинкиКонтакта(Результат.ПроектКонтейнер, Неопределено);
	ПараметрыКонтакта.Представление = ПолучитьПолноеПредставлениеАдресата("", Результат.ПроектКонтейнер);
	ПараметрыКонтакта.Адреса.Добавить(СтруктураАдресаКонтакта());
	ПараметрыКонтакта.ТипКонтакта = Тип("СправочникСсылка.ПроектыКонтейнеры");
	
	ПараметрыКонтакта.Адреса[0].ПолноеПредставление = ПолучитьПолноеПредставлениеАдресата(
		ПараметрыКонтакта.Адреса[0].Адрес,
		ПараметрыКонтакта.Контакт);
	
	КонтактыКДобавлению = Новый Массив;
	КонтактыКДобавлению.Добавить(ПараметрыКонтакта);
	
	ДобавитьКонтактыВСписокВыбранных(
		КонтактыКДобавлению, ДополнительныеПараметры.ОписаниеОповещенияПослеДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКонтактыВСписокВыбранных(
		КонтактыКДобавлению, ОписаниеОповещенияПослеДобавления) Экспорт
		
	Если КонтактыКДобавлению = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Отбор по правам.
	Если ТипЗнч(ПараметрыОтбораПоПравам) = Тип("Структура")
		И ПараметрыОтбораПоПравам.ВыполнятьОтбор = Истина Тогда
		КолСтрок = КонтактыКДобавлению.Количество();
		КолУдаленных = 0;
		Для Сч = 1 По КолСтрок Цикл
			Индекс = КолСтрок - Сч;
			Контакт = КонтактыКДобавлению[Индекс].Контакт;
			Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Пользователи")
				И ПараметрыОтбораПоПравам.Пользователи[Контакт] = Неопределено Тогда
				КонтактыКДобавлению.Удалить(Индекс);
				КолУдаленных = КолУдаленных + 1;
			КонецЕсли;
		КонецЦикла;
		Если КолУдаленных > 0 Тогда
			Сообщить(СтрШаблон(
				НСтр("ru = 'Некоторые пользователи (%1) не добавлены по причине отсутствия прав на ""%2""'"),
				КолУдаленных, Параметры.ОбъектДляОтбораПоПравам));
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Контакт");
	Если Параметры.ВыбиратьЭлектронныеАдреса Тогда
		ПараметрыОтбора.Вставить("Адрес");
	КонецЕсли;
	
	// Правила коммуникаций.
	ИспользуютсяПравилаКоммуникаций =
		Список.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ПравилаКоммуникаций");
	
	ПредупреждатьОНаличииКонтактаВСписке = КонтактыКДобавлению.Количество() = 1;
	ПредупреждатьОНедоступностиЭлемента = 
		ИспользуютсяПравилаКоммуникаций И КонтактыКДобавлению.Количество() = 1;
	ПредупреждатьОСотрудникеБезПользователя = 
		Параметры.КонтролироватьСотрудниковБезПользователя 
		И КонтактыКДобавлению.Количество() = 1;
	
	// Обработка списков контактов
	Для Каждого СтрКонтакт ИЗ КонтактыКДобавлению Цикл
		
		Если ИспользуютсяПравилаКоммуникаций И Не СтрКонтакт.ДоступенПоПравиламКоммуникаций Тогда
			Если ПредупреждатьОНедоступностиЭлемента Тогда
				ПравилаКоммуникацийКлиент.ПоказатьНарушение(
					СтрКонтакт.Контакт,
					Список.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ПравилаКоммуникаций.Правило);
				Возврат;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если Параметры.КонтролироватьДублиАдресатов Тогда
		
			ПараметрыОтбора.Контакт = СтрКонтакт.Контакт;
			
			Если ПараметрыОтбора.Свойство("Адрес") Тогда
				ПараметрыОтбора.Адрес = СтрКонтакт.Адреса[0].Адрес;
			КонецЕсли;
			
			Если ВыбранныеАдресаты.НайтиСтроки(ПараметрыОтбора).Количество() > 0 Тогда
				Если ПредупреждатьОНаличииКонтактаВСписке Тогда
					
					Если СтрКонтакт.ТипКонтакта = Тип("СправочникСсылка.Пользователи") Тогда
						ПредставлениеТипаКонтактаВЕдинственномЧисле = НСтр("ru = 'Пользователь'");
						СловоВыбран = НСтр("ru = 'выбран'");
					ИначеЕсли СтрКонтакт.ТипКонтакта = Тип("СправочникСсылка.Контрагенты") Тогда
						ПредставлениеТипаКонтактаВЕдинственномЧисле = НСтр("ru = 'Контрагент'");
						СловоВыбран = НСтр("ru = 'выбран'");
					ИначеЕсли СтрКонтакт.ТипКонтакта = Тип("СправочникСсылка.ЛичныеАдресаты") Тогда
						ПредставлениеТипаКонтактаВЕдинственномЧисле = НСтр("ru = 'Личный адресат'");
						СловоВыбран = НСтр("ru = 'выбран'");
					ИначеЕсли СтрКонтакт.ТипКонтакта = Тип("СправочникСсылка.ПолныеРоли") Тогда
						ПредставлениеТипаКонтактаВЕдинственномЧисле = НСтр("ru = 'Роль'");
						СловоВыбран = НСтр("ru = 'выбрана'");
					ИначеЕсли СтрКонтакт.ТипКонтакта = Тип("СправочникСсылка.РабочиеГруппы") Тогда
						ПредставлениеТипаКонтактаВЕдинственномЧисле = НСтр("ru = 'Группа контактов'");
						СловоВыбран = НСтр("ru = 'выбрана'");
					ИначеЕсли СтрКонтакт.ТипКонтакта = Тип("СправочникСсылка.СтруктураПредприятия") Тогда 
						ПредставлениеТипаКонтактаВЕдинственномЧисле = НСтр("ru = 'Подразделение'");
						СловоВыбран = НСтр("ru = 'выбрано'");
					ИначеЕсли СтрКонтакт.ТипКонтакта = Тип("СправочникСсылка.КонтактныеЛица") Тогда
						ПредставлениеТипаКонтактаВЕдинственномЧисле = НСтр("ru = 'Контактное лицо'");
						СловоВыбран = НСтр("ru = 'выбрано'");
					ИначеЕсли СтрКонтакт.ТипКонтакта = Тип("СправочникСсылка.Сотрудники") Тогда
						ПредставлениеТипаКонтактаВЕдинственномЧисле = НСтр("ru = 'Сотрудник'");
						СловоВыбран = НСтр("ru = 'выбран'");
					Иначе
						ПредставлениеТипаКонтактаВЕдинственномЧисле = НСтр("ru = 'Контакт'");
						СловоВыбран = НСтр("ru = 'выбран'");
					КонецЕсли;
					
					СтроковоеПредставлениеКонтакта = "" + СтрКонтакт.Контакт;
					
					ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '%1 ""%2"" уже %3.'"),
						ПредставлениеТипаКонтактаВЕдинственномЧисле,
						СтроковоеПредставлениеКонтакта,
						СловоВыбран);
					
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстПредупреждения);
					Возврат;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗапрещатьВыбиратьСотрудниковБезПользователя И СтрКонтакт.СотрудникБезПользователя Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ПредупреждатьОСотрудникеБезПользователя И СтрКонтакт.СотрудникБезПользователя Тогда
			
			// Так как показываем предупреждение только когда добавляет один контакт,
			// делаем возврат и продолжаем выполнение через оповещение.
			ПараметрыОповещенияПредупреждения = Новый Структура;
			ПараметрыОповещенияПредупреждения.Вставить("Контакт", СтрКонтакт);
			ПараметрыОповещенияПредупреждения.Вставить("ОписаниеОповещенияПослеДобавления",
			ОписаниеОповещенияПослеДобавления);
			
			ОповещениеПослеПредупреждения = Новый ОписаниеОповещения("ПослеПредупрежденияОСотрудникеБезПользователя",
			ЭтотОбъект, ПараметрыОповещенияПредупреждения);
			
			РаботаСАдреснойКнигойКлиент.ПоказатьПредупреждениеПоСотрудникуБезПользователя(СтрКонтакт.Контакт,
			ОповещениеПослеПредупреждения);
			
			Возврат;
			
		КонецЕсли;
		
		НоваяСтр = ВыбранныеАдресаты.Добавить();
		Если ТипЗнч(СтрКонтакт.Контакт) = Тип("СправочникСсылка.РолиИсполнителей") 
			И Параметры.ВыбиратьРолиИсполнителя <> Истина Тогда
			НоваяСтр.Контакт = ПолнаяРольБезОбъектаАдресации(СтрКонтакт.Контакт);
		Иначе
			НоваяСтр.Контакт = СтрКонтакт.Контакт;
		КонецЕсли;
		НоваяСтр.Адрес = СтрКонтакт.Адреса[0].Адрес;
		НоваяСтр.Представление = СтрКонтакт.Адреса[0].Представление;
		НоваяСтр.Группа = ГруппаПоУмолчанию;
		НоваяСтр.ПолноеПредставление = СтрКонтакт.Адреса[0].ПолноеПредставление;
		НоваяСтр.НомерКартинки = СтрКонтакт.НомерКартинки;
		
	КонецЦикла;
	
	ВыбранныеАдресаты.Сортировать("НомерКартинки Возр, ПолноеПредставление Возр");
	
	Если ОписаниеОповещенияПослеДобавления <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеДобавления);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПредупрежденияОСотрудникеБезПользователя(ДополнительныеПараметры) Экспорт
	
	СтрКонтакт = ДополнительныеПараметры.Контакт;
	ОписаниеОповещенияПослеДобавления = ДополнительныеПараметры.ОписаниеОповещенияПослеДобавления;
	
	НоваяСтр = ВыбранныеАдресаты.Добавить();
	Если ТипЗнч(СтрКонтакт.Контакт) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		НоваяСтр.Контакт = ПолнаяРольБезОбъектаАдресации(СтрКонтакт.Контакт);
	Иначе
		НоваяСтр.Контакт = СтрКонтакт.Контакт;
	КонецЕсли;
	НоваяСтр.Адрес = СтрКонтакт.Адреса[0].Адрес;
	НоваяСтр.Представление = СтрКонтакт.Адреса[0].Представление;
	НоваяСтр.Группа = ГруппаПоУмолчанию;
	НоваяСтр.ПолноеПредставление = СтрКонтакт.Адреса[0].ПолноеПредставление;
	НоваяСтр.НомерКартинки = СтрКонтакт.НомерКартинки;
	
	ВыбранныеАдресаты.Сортировать("НомерКартинки Возр, ПолноеПредставление Возр");
	
	Если ОписаниеОповещенияПослеДобавления <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеДобавления);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьАвтоподстановкиВСписокВыбранных(
	СписокАвтоподстановок, ОписаниеОповещенияПослеДобавления) Экспорт
	
	Если СписокАвтоподстановок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтактыКДобавлению = Новый Массив;
	
	Для Каждого Автоподстановка Из СписокАвтоподстановок Цикл
		Если Автоподстановка.Пометка Тогда
			СтруктураКонтакта = СтруктураКонтакта();
			СтруктураКонтакта.Контакт = Автоподстановка.Значение;
			СтруктураКонтакта.НомерКартинки = НомерКартинкиКонтакта(Автоподстановка.Значение, Неопределено);
			СтруктураАдресаКонтакта = СтруктураАдресаКонтакта();
			СтруктураАдресаКонтакта.ПолноеПредставление = Автоподстановка.Значение;
			СтруктураКонтакта.Адреса.Добавить(СтруктураАдресаКонтакта);
			КонтактыКДобавлению.Добавить(СтруктураКонтакта);
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьКонтактыВСписокВыбранных(КонтактыКДобавлению, ОписаниеОповещенияПослеДобавления);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ПолучениеКонтактовОбъектов

&НаСервереБезКонтекста
Функция КонтактыОбъектов(Знач ВыделенныеОбъекты, Знач Параметры, Знач ПравилаКоммуникаций)
	
	РазворачиватьГруппыОбъектов = 
		Параметры.РежимРаботыФормы = 2;
		
	//АвтоподстановкиДляПроцессов = 
	//	ШаблоныБизнесПроцессов.ПолучитьСписокДоступныхФункций(Параметры.ИменаПредметов.ВыгрузитьЗначения());
	
	КоличествоИменПредметов = Параметры.ИменаПредметов.Количество();
	
	ВыбиратьКонтейнерыПользователей = Параметры.ВыбиратьКонтейнерыПользователей
		Или Параметры.ВыбиратьПодразделения
		Или Параметры.ВыбиратьРабочиеГруппы;
	ОтображатьРоли = Параметры.ОтображатьРоли Или 
		(Параметры.ОтображатьСотрудников И ВыбиратьКонтейнерыПользователей);
		
	ПредставленияАвтогрупп = ПолучитьСписокПредставленийАвтогрупп();
	
	// Разворачиваем группы объектов.
	КонтактыОбъектов = Новый Массив;
	
	Для Каждого Стр Из ВыделенныеОбъекты Цикл
		
		// Разделы адресной книги не обрабатываем
		Если Стр.ЭтоРаздел Тогда
			Продолжить;
		КонецЕсли;
		
		// Автоподстановки для процессов.
		Если Стр.ЭтоАвтоподстановкаДляПроцессов Тогда
			КонтактыОбъектов.Добавить(Стр.Объект);
			Продолжить;
		КонецЕсли;
		
		// Автоподстановки для объектов.
		Если Стр.ЭтоАвтоподстановкаДляОбъектов Тогда
			КонтактыОбъектов.Добавить(Стр.Объект);
			Продолжить;
		КонецЕсли;
		
		Если РазворачиватьГруппыОбъектов Тогда // Если используется множественный выбор
			Если Стр.ЭтоАвтогруппа Тогда
				ДобавитьАвтогруппуВМассивКонтактов(Стр.Объект, КонтактыОбъектов);
			ИначеЕсли Стр.ТипОбъекта = Тип("СправочникСсылка.ГруппыКонтактовПользователей") Тогда
				ОбъектыПапкиВИзбранном = ОбъектыПапкиВИзбранном(Стр.Объект);
				Для Каждого ОбъектПапкиВИзбранном Из ОбъектыПапкиВИзбранном Цикл
					ТипОбъектаПапкиВИзбранном = ТипЗнч(ОбъектПапкиВИзбранном);
					Если ТипОбъектаПапкиВИзбранном = Тип("Строка")
						И ПредставленияАвтогрупп.Найти(ОбъектПапкиВИзбранном) <> Неопределено Тогда
						
						ДобавитьАвтогруппуВМассивКонтактов(ОбъектПапкиВИзбранном, КонтактыОбъектов);
					Иначе
						ДобавитьОбъектВМассивКонтактов(
							ОбъектПапкиВИзбранном, ТипОбъектаПапкиВИзбранном, КонтактыОбъектов, Параметры);
					КонецЕсли;
				КонецЦикла;
			Иначе
				ДобавитьОбъектВМассивКонтактов(Стр.Объект, Стр.ТипОбъекта, КонтактыОбъектов, Параметры);
			КонецЕсли;
		Иначе
			Если Стр.ЭтоАвтогруппа Тогда
				Продолжить;
			Иначе
				Если КонтактыОбъектов.Найти(Стр.Объект) = Неопределено Тогда
					КонтактыОбъектов.Добавить(Стр.Объект);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ДопустимыеТипыДляВыбора = Новый Массив;
	
	Если Параметры.ОтображатьСотрудников Тогда
		ДопустимыеТипыДляВыбора.Добавить(Тип("СправочникСсылка.Сотрудники"));
	КонецЕсли;
	
	Если Параметры.ОтображатьПользователей Тогда
		ДопустимыеТипыДляВыбора.Добавить(Тип("СправочникСсылка.Пользователи"));
	КонецЕсли;
	
	Если ОтображатьРоли Тогда
		ДопустимыеТипыДляВыбора.Добавить(Тип("СправочникСсылка.РолиИсполнителей"));
		ДопустимыеТипыДляВыбора.Добавить(Тип("СправочникСсылка.ПолныеРоли"));
	КонецЕсли;
	
	Если Параметры.ОтображатьОрганизации Тогда
		ДопустимыеТипыДляВыбора.Добавить(Тип("СправочникСсылка.Организации"));
	КонецЕсли;	
	
	Если Параметры.ОтображатьКонтрагентов Тогда
		Если Параметры.ВыбиратьКонтрагентов Тогда
			ДопустимыеТипыДляВыбора.Добавить(Тип("СправочникСсылка.Контрагенты"));
		КонецЕсли;
		ДопустимыеТипыДляВыбора.Добавить(Тип("СправочникСсылка.КонтактныеЛица"));
	КонецЕсли;
	
	Если Параметры.ОтображатьЛичныхАдресатов Тогда
		ДопустимыеТипыДляВыбора.Добавить(Тип("СправочникСсылка.ЛичныеАдресаты"));
	КонецЕсли;
	
	Если ВыбиратьКонтейнерыПользователей Тогда
		ДопустимыеТипыДляВыбора.Добавить(Тип("СправочникСсылка.РабочиеГруппы"));
		ДопустимыеТипыДляВыбора.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	КонецЕсли;
	
	Если Параметры.ВыбиратьЭлектронныеАдреса Тогда
		ДопустимыеТипыДляВыбора.Добавить(Тип("Строка"));
	КонецЕсли;
	
	Если Параметры.ОтображатьАвтоподстановкиПоДокументам
		Или Параметры.ОтображатьАвтоподстановкиПоМероприятиям
		Или Параметры.ОтображатьАвтоподстановкиПоЗадачамПроцессов
		Или Параметры.ОтображатьАвтоподстановкиПоЗадачам
		Или Параметры.ОтображатьВсеАвтоподстановки Тогда
		ДопустимыеТипыДляВыбора.Добавить(Тип("СправочникСсылка.АвтоподстановкиДляОбъектов"));
	КонецЕсли;
	
	Если Параметры.ОтображатьАвтоподстановкиПоПроцессам
		Или Параметры.ОтображатьВсеАвтоподстановки Тогда
		ДопустимыеТипыДляВыбора.Добавить(Тип("СправочникСсылка.АвтоподстановкиДляПроцессов"));
	КонецЕсли;
	
	// Формируем массив адресатов с описанием
	КонтактыОбъектовСОписанием = Новый Массив;
	
	ПроверятьВСпискеОтбора = Параметры.СписокОтбора.Количество();
	
	// Правила коммуникаций.
	ИспользуютсяПравилаКоммуникаций = ЗначениеЗаполнено(ПравилаКоммуникаций);	
	Если ИспользуютсяПравилаКоммуникаций Тогда
		ДоступныеЭлементы = 
			ПроверитьПоПравиламКоммуникаций(КонтактыОбъектов, ПравилаКоммуникаций, Истина);
	КонецЕсли;
	
	// Сотрудники без активных пользователей.
	КонтролироватьСотрудниковБезПользователя = 
		Параметры.КонтролироватьСотрудниковБезПользователя Или Параметры.ОтображатьПользователей;
	Если КонтролироватьСотрудниковБезПользователя Тогда
		СотрудникиБезПользователей = НайтиСотрудниковБезПользователей(КонтактыОбъектов);
	КонецЕсли;
	
	ОписанияОтсутствий = Отсутствия.ПолучитьОписанияТекущихОтсутствийСотрудников(КонтактыОбъектов); 
	
	СотрудниковБезПользователяБольшеОдного = Ложь;
	
	Для Каждого Контакт ИЗ КонтактыОбъектов Цикл
		
		ТипКонтакта = ТипЗнч(Контакт);
		
		Если ДопустимыеТипыДляВыбора.Найти(ТипКонтакта) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПроверятьВСпискеОтбора Тогда
			Если Параметры.СписокОтбора.НайтиПоЗначению(Контакт) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Исключаем все роли, которые не могут использоваться без объектов адресации,
		// в случае если выбираем саму роль.
		Если Не Параметры.ВыбиратьЭлектронныеАдреса
			И ТипКонтакта = Тип("СправочникСсылка.РолиИсполнителей")
			И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контакт, "ИспользуетсяБезОбъектовАдресации") Тогда
			
			Продолжить;
		КонецЕсли;
		
		// Исключаем группы контрагентов.
		Если ТипКонтакта = Тип("СправочникСсылка.Контрагенты")
			И ЗначениеЗаполнено(Контакт)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контакт, "ЭтоГруппа") Тогда
			
			Продолжить;
		КонецЕсли;
		
		ЭтоАдресЭлектроннойПочты = Ложь;
		Если ТипКонтакта = Тип("Строка") Тогда
			ЭтоАдресЭлектроннойПочты = РаботаСоСтроками.ЭтоАдресЭлектроннойПочты(Контакт);
			Если Не Параметры.ВыбиратьЭлектронныеАдреса
				И ЭтоАдресЭлектроннойПочты Тогда
				
				Продолжить;
			КонецЕсли;
			Если Параметры.ВыбиратьЭлектронныеАдреса
				И Не ЭтоАдресЭлектроннойПочты Тогда
				
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураКонтакта = СтруктураКонтакта();
		СтруктураКонтакта.Контакт = Контакт;
		СтруктураКонтакта.НомерКартинки = НомерКартинкиКонтакта(Контакт, ОписанияОтсутствий[Контакт]);
		СтруктураКонтакта.ТипКонтакта = ТипКонтакта;
		Если ИспользуютсяПравилаКоммуникаций И ТипЗнч(ДоступныеЭлементы) = Тип("Массив") Тогда
			СтруктураКонтакта.ДоступенПоПравиламКоммуникаций = ДоступныеЭлементы.Найти(Контакт) <> Неопределено;
		КонецЕсли;
		
		Если ТипЗнч(СтруктураКонтакта.Контакт) = Тип("СправочникСсылка.Сотрудники") Тогда
			
			Если КонтролироватьСотрудниковБезПользователя Тогда
				НетПользователя = СотрудникиБезПользователей.Найти(СтруктураКонтакта.Контакт) <> Неопределено;
				СтруктураКонтакта.СотрудникБезПользователя = НетПользователя;
			КонецЕсли;
			
			Если Параметры.ОтображатьПользователей Тогда
				// Замена сотрудника на пользователя.
				Сотрудник = СтруктураКонтакта.Контакт;
				СтруктураКонтакта.Контакт = СотрудникиВызовСервера.ПриоритетныйПользовательСотрудника(СтруктураКонтакта.Контакт);
				
				Если Не ЗначениеЗаполнено(СтруктураКонтакта.Контакт) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Параметры.ВыбиратьЭлектронныеАдреса Тогда
			
			Если ЭтоАдресЭлектроннойПочты Тогда
				СтруктураАдресаКонтакта = СтруктураАдресаКонтакта();
				СтруктураАдресаКонтакта.Адрес = Контакт;
				СтруктураАдресаКонтакта.ПолноеПредставление = ПолучитьПолноеПредставлениеАдресата(Контакт, "");
				СтруктураКонтакта.Адреса.Добавить(СтруктураАдресаКонтакта);
				СтруктураКонтакта.Контакт = "";
				
			ИначеЕсли СтруктураКонтакта.Контакт.Метаданные().ТабличныеЧасти.Найти("КонтактнаяИнформация") <> Неопределено Тогда
				
				АдресаКонтакта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Контакт),
					Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,,
					ТекущаяДатаСеанса());
				АдресаКонтакта.Свернуть("Представление");
				Для Каждого АдресКонтакта ИЗ АдресаКонтакта Цикл
					СтруктураАдресаКонтакта = СтруктураАдресаКонтакта();
					СтруктураАдресаКонтакта.Адрес = АдресКонтакта.Представление;
					СтруктураАдресаКонтакта.Представление = 
					ВстроеннаяПочтаСервер.ПолучитьПочтовоеПредставлениеКонтакта(СтруктураКонтакта.Контакт, АдресКонтакта.Представление);
					СтруктураАдресаКонтакта.ПолноеПредставление = 
					ПолучитьПолноеПредставлениеАдресата(АдресКонтакта.Представление, СтруктураКонтакта.Контакт);
					
					СтруктураКонтакта.Адреса.Добавить(СтруктураАдресаКонтакта);
				КонецЦикла;
				
			Иначе
				СтруктураАдресаКонтакта = СтруктураАдресаКонтакта();
				СтруктураАдресаКонтакта.ПолноеПредставление = ПолучитьПолноеПредставлениеАдресата("", СтруктураКонтакта.Контакт);
				СтруктураКонтакта.Адреса.Добавить(СтруктураАдресаКонтакта);
			КонецЕсли;
		Иначе
			СтруктураАдресаКонтакта = СтруктураАдресаКонтакта();
			СтруктураАдресаКонтакта.ПолноеПредставление = ПолучитьПолноеПредставлениеАдресата("", СтруктураКонтакта.Контакт);
			СтруктураКонтакта.Адреса.Добавить(СтруктураАдресаКонтакта);
			
		КонецЕсли;
		
		КонтактыОбъектовСОписанием.Добавить(СтруктураКонтакта);
	КонецЦикла;
	
	Если КонтролироватьСотрудниковБезПользователя Тогда
		
		Если СотрудникиБезПользователей.Количество() > 0 Тогда
			
			ТекстСообщения = ТекстПредупрежденияОСотрудникахБезПользователя(СотрудникиБезПользователей[0], 
				СотрудникиБезПользователей.Количество() > 1, ВыделенныеОбъекты);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КонтактыОбъектовСОписанием;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиСотрудниковБезПользователей(КонтактыОбъектов)
	
	КонтактыСотрудники = ОбщегоНазначенияДокументооборотКлиентСервер.СоответствиеПоТипам(КонтактыОбъектов)[Тип(
		"СправочникСсылка.Сотрудники")];
	
	Если КонтактыСотрудники = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат Сотрудники.СотрудникиБезПользователя(КонтактыСотрудники);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьАвтогруппуВМассивКонтактов(Объект, Контакты)
	
	КонтактыАвтоСписка = РаботаСАдреснойКнигой.ПолучитьЗначениеАвтоподстановки(Объект);
	
	Если КонтактыАвтоСписка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Контакт ИЗ КонтактыАвтоСписка Цикл
		Если Контакты.Найти(Контакт) = Неопределено Тогда
			Контакты.Добавить(Контакт);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьОбъектВМассивКонтактов(Объект, ТипОбъекта, Контакты, Параметры)
	
	ВыбиратьКонтейнерыПользователей = Параметры.ВыбиратьКонтейнерыПользователей
		Или Параметры.ВыбиратьПодразделения
		Или Параметры.ВыбиратьРабочиеГруппы;
	
	Если ТипОбъекта = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		Если ВыбиратьКонтейнерыПользователей Тогда
			Если Контакты.Найти(Объект) = Неопределено Тогда
				Контакты.Добавить(Объект);
			КонецЕсли;
		Иначе
			ПользователиПодразделения = ПользователиПоОбъекту(
				Объект, Справочники.АдреснаяКнига.ПоСтруктуреПредприятия);
			Для Каждого ПользовательПодразделения ИЗ ПользователиПодразделения Цикл
				Если Контакты.Найти(ПользовательПодразделения) = Неопределено Тогда
					Контакты.Добавить(ПользовательПодразделения);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.РабочиеГруппы") Тогда
		Если ВыбиратьКонтейнерыПользователей Тогда
			Если Контакты.Найти(Объект) = Неопределено Тогда
				Контакты.Добавить(Объект);
			КонецЕсли;
		Иначе
			ПользователиГруппы = ПользователиПоОбъекту(
				Объект, Справочники.АдреснаяКнига.ПоРабочимГруппам);
			Для Каждого ПользовательГруппы ИЗ ПользователиГруппы Цикл
				Если Контакты.Найти(ПользовательГруппы) = Неопределено Тогда
					Контакты.Добавить(ПользовательГруппы);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ПапкиМероприятий") Тогда
		ПользователиМероприятий = ПользователиПоОбъекту(
			Объект, Справочники.АдреснаяКнига.ПоМероприятиям);
		Для Каждого ПользовательМероприятия ИЗ ПользователиМероприятий Цикл
			Если Контакты.Найти(ПользовательМероприятия) = Неопределено Тогда
				Контакты.Добавить(ПользовательМероприятия);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Мероприятия") Тогда
		ПользователиМероприятий = ПользователиПоОбъекту(
			Объект, Справочники.АдреснаяКнига.ПоМероприятиям);
		Для Каждого ПользовательМероприятия ИЗ ПользователиМероприятий Цикл
			Если Контакты.Найти(ПользовательМероприятия) = Неопределено Тогда
				Контакты.Добавить(ПользовательМероприятия);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ПапкиПроектов") Тогда
		ПользователиПроектов = ПользователиПоОбъекту(
			Объект, Справочники.АдреснаяКнига.ПоПроектам);
		Для Каждого ПользовательПроекта ИЗ ПользователиПроектов Цикл
			Если Контакты.Найти(ПользовательПроекта) = Неопределено Тогда
				Контакты.Добавить(ПользовательПроекта);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Проекты") Тогда
		ПользователиПроектов = ПользователиПоОбъекту(
			Объект, Справочники.АдреснаяКнига.ПоПроектам);
		Для Каждого ПользовательПроекта ИЗ ПользователиПроектов Цикл
			Если Контакты.Найти(ПользовательМероприятия) = Неопределено Тогда
				Контакты.Добавить(ПользовательПроекта);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Контрагенты") Тогда
		Если Параметры.ВыбиратьКонтрагентов Тогда
			Контрагенты = ПодчиненныеКонтрагенты(Объект);
			
			Для Каждого Контрагент ИЗ Контрагенты Цикл
				Если Контакты.Найти(Контрагент) = Неопределено Тогда
					Контакты.Добавить(Контрагент);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		КонтактныеЛицаКонтрагента = КонтактныеЛицаКонтрагента(Объект);
		Для Каждого КонтактноеЛицо ИЗ КонтактныеЛицаКонтрагента Цикл
			Если Контакты.Найти(КонтактноеЛицо) = Неопределено Тогда
				Контакты.Добавить(КонтактноеЛицо);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ГруппыЛичныхАдресатов") Тогда
		ЛичныеАдресатыГруппы = ЛичныеАдресатыГруппы(Объект);
		Для Каждого ЛичныеАдресат ИЗ ЛичныеАдресатыГруппы Цикл
			Если Контакты.Найти(ЛичныеАдресат) = Неопределено Тогда
				Контакты.Добавить(ЛичныеАдресат);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если Контакты.Найти(Объект) = Неопределено Тогда
			Контакты.Добавить(Объект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбъектыПапкиВИзбранном(Папка)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ГруппыКонтактовПользователей.Ссылка
		|ПОМЕСТИТЬ Папки
		|ИЗ
		|	Справочник.ГруппыКонтактовПользователей КАК ГруппыКонтактовПользователей
		|ГДЕ
		|	ГруппыКонтактовПользователей.Родитель В ИЕРАРХИИ(&Папка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Папка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГруппыКонтактовПользователейКонтакты.Контакт,
		|	ГруппыКонтактовПользователейКонтакты.КонтактнаяИнформация
		|ИЗ
		|	Папки КАК Папки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыКонтактовПользователей.Контакты КАК ГруппыКонтактовПользователейКонтакты
		|		ПО Папки.Ссылка = ГруппыКонтактовПользователейКонтакты.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ГруппыКонтактовПользователейКонтакты.Контакт,
		|	ГруппыКонтактовПользователейКонтакты.КонтактнаяИнформация";
	Запрос.УстановитьПараметр("Папка", Папка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОбъектыПапки = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Контакт) Тогда
			
			ТипКонтакта = ТипЗнч(Выборка.Контакт);
			
			Если ТипКонтакта = Тип("СправочникСсылка.Пользователи") Тогда
				РеквизитыКонтакта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					Выборка.Контакт, "Недействителен, Служебный, ПометкаУдаления");
				Если РеквизитыКонтакта.Недействителен
					Или РеквизитыКонтакта.Служебный
					Или РеквизитыКонтакта.ПометкаУдаления Тогда
					
					Продолжить;
				КонецЕсли;
			ИначеЕсли ТипКонтакта <> Тип("Строка") Тогда
				РеквизитыКонтакта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					Выборка.Контакт, "ПометкаУдаления");
				Если РеквизитыКонтакта.ПометкаУдаления Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ОбъектыПапки.Добавить(Выборка.Контакт);
		Иначе
			ОбъектыПапки.Добавить(Выборка.КонтактнаяИнформация);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбъектыПапки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПользователиПоОбъекту(Объект, РазделАдреснойКниги)
	
	СсылкаНаОбъектВАдреснойКниге = 
		Справочники.АдреснаяКнига.ПолучитьСсылкуНаОбъектВАдреснойКниге(
			Объект, ,РазделАдреснойКниги);
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.РабочиеГруппы")
		Или ТипЗнч(Объект) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		Условие = "
			|	И АдреснаяКнига.Объект ССЫЛКА Справочник.Сотрудники";
	Иначе
		Условие = "
			|	И (АдреснаяКнига.Объект ССЫЛКА Справочник.Сотрудники
			|			ИЛИ АдреснаяКнига.Объект ССЫЛКА Справочник.РолиИсполнителей)";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АдреснаяКнига.Объект
		|ИЗ
		|	Справочник.АдреснаяКнига КАК АдреснаяКнига
		|ГДЕ
		|	АдреснаяКнига.Ссылка В ИЕРАРХИИ(&СсылкаНаОбъектВАдреснойКниге)
		|	И АдреснаяКнига.ОтображатьВАдреснойКниге
		|%Условие%
		|
		|СГРУППИРОВАТЬ ПО
		|	АдреснаяКнига.Объект";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Условие%", Условие);
		
	Запрос.УстановитьПараметр("СсылкаНаОбъектВАдреснойКниге", СсылкаНаОбъектВАдреснойКниге);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПодчиненныеКонтрагенты(Контрагент)
	
	СсылкаНаОбъектВАдреснойКниге = 
		Справочники.АдреснаяКнига.ПолучитьСсылкуНаОбъектВАдреснойКниге(
			Контрагент, , Справочники.АдреснаяКнига.Контрагенты);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АдреснаяКнига.Объект
		|ИЗ
		|	Справочник.АдреснаяКнига КАК АдреснаяКнига
		|ГДЕ
		|	АдреснаяКнига.Ссылка В ИЕРАРХИИ(&СсылкаНаОбъектВАдреснойКниге)
		|	И АдреснаяКнига.ОтображатьВАдреснойКниге
		|	И АдреснаяКнига.Объект ССЫЛКА Справочник.Контрагенты
		|	И АдреснаяКнига.ПорядокОбъектаВСписке = 2";
	Запрос.УстановитьПараметр("СсылкаНаОбъектВАдреснойКниге", СсылкаНаОбъектВАдреснойКниге);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
КонецФункции

&НаСервереБезКонтекста
Функция КонтактныеЛицаКонтрагента(Контрагент)
	
	СсылкаНаОбъектВАдреснойКниге = 
		Справочники.АдреснаяКнига.ПолучитьСсылкуНаОбъектВАдреснойКниге(
			Контрагент, , Справочники.АдреснаяКнига.Контрагенты);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АдреснаяКнига.Объект
		|ИЗ
		|	Справочник.АдреснаяКнига КАК АдреснаяКнига
		|ГДЕ
		|	АдреснаяКнига.Ссылка В ИЕРАРХИИ(&СсылкаНаОбъектВАдреснойКниге)
		|	И АдреснаяКнига.ОтображатьВАдреснойКниге
		|	И АдреснаяКнига.Объект ССЫЛКА Справочник.КонтактныеЛица";
	Запрос.УстановитьПараметр("СсылкаНаОбъектВАдреснойКниге", СсылкаНаОбъектВАдреснойКниге);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
КонецФункции

&НаСервереБезКонтекста
Функция ЛичныеАдресатыГруппы(Группа)
	
	СсылкаНаОбъектВАдреснойКниге = 
		Справочники.АдреснаяКнига.ПолучитьСсылкуНаОбъектВАдреснойКниге(
			Группа, , Справочники.АдреснаяКнига.ЛичныеАдресаты);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АдреснаяКнига.Объект
		|ИЗ
		|	Справочник.АдреснаяКнига КАК АдреснаяКнига
		|ГДЕ
		|	АдреснаяКнига.Ссылка В ИЕРАРХИИ(&СсылкаНаОбъектВАдреснойКниге)
		|	И АдреснаяКнига.ОтображатьВАдреснойКниге
		|	И АдреснаяКнига.Объект ССЫЛКА Справочник.ЛичныеАдресаты";
	Запрос.УстановитьПараметр("СсылкаНаОбъектВАдреснойКниге", СсылкаНаОбъектВАдреснойКниге);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураКонтакта()
	
	СтруктураКонтакта = Новый Структура;
	СтруктураКонтакта.Вставить("Контакт");
	СтруктураКонтакта.Вставить("Адреса", Новый Массив);
	СтруктураКонтакта.Вставить("НомерКартинки");
	СтруктураКонтакта.Вставить("ТипКонтакта");
	СтруктураКонтакта.Вставить("Представление");
	СтруктураКонтакта.Вставить("ДоступенПоПравиламКоммуникаций", Истина);
	СтруктураКонтакта.Вставить("СотрудникБезПользователя", Ложь);
	
	Возврат СтруктураКонтакта;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураАдресаКонтакта()
	
	Возврат Новый Структура("Адрес, Представление, ПолноеПредставление");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПолноеПредставлениеАдресата(Адрес, Контакт)
	
	Представление = "";
	Разделитель = "";
	Если ЗначениеЗаполнено(Контакт) Тогда
		Представление = Строка(Контакт);
		Разделитель = " ";
	КонецЕсли;
	Если ЗначениеЗаполнено(Адрес) Тогда
		Представление = Представление + Разделитель + "<" + Строка(Адрес) + ">";
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НомерКартинкиКонтакта(Контакт, ОписаниеОтсутствия)
	
	НомерКартинки = 8;
	
	ТипКонтакта = ТипЗнч(Контакт);
	Если ТипКонтакта = Тип("СправочникСсылка.РабочиеГруппы")
		Или ТипКонтакта = Тип("СправочникСсылка.СтруктураПредприятия")
		Или ТипКонтакта = Тип("СправочникСсылка.ПодразделенияКонтейнеры")
		Или ТипКонтакта = Тип("СправочникСсылка.ПроектыКонтейнеры") Тогда
		НомерКартинки = 0;
	ИначеЕсли ТипКонтакта = Тип("СправочникСсылка.Контрагенты") Тогда
		НомерКартинки = 3;
	ИначеЕсли ТипКонтакта = Тип("СправочникСсылка.РолиИсполнителей")
		Или ТипКонтакта = Тип("СправочникСсылка.ПолныеРоли") Тогда
		НомерКартинки = 4;
	ИначеЕсли ТипКонтакта = Тип("СправочникСсылка.Сотрудники") Тогда
		Если ОписаниеОтсутствия = Неопределено Тогда
			НомерКартинки = 5;
		Иначе
			НомерКартинки = 11;
		КонецЕсли;
	ИначеЕсли ТипКонтакта = Тип("СправочникСсылка.Пользователи") Тогда
		Если ОписаниеОтсутствия = Неопределено Тогда
			НомерКартинки = 5;
		Иначе
			НомерКартинки = 11;
		КонецЕсли;
	ИначеЕсли ТипКонтакта = Тип("СправочникСсылка.ЛичныеАдресаты")
		ИЛИ ТипКонтакта = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			
		НомерКартинки = 6;
	ИначеЕсли ТипКонтакта = Тип("СправочникСсылка.Организации") Тогда
		НомерКартинки = 9;	
	КонецЕсли;
	
	Возврат НомерКартинки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИдентификаторыПользователейСВ(Знач Пользователи)
	
	ИдентификаторыПользователейСВ = Новый Массив;
	ИдентификаторыПользователейИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		Пользователи, "ИдентификаторПользователяИБ");
	Для Каждого Пользователь Из Пользователи Цикл
		ИдентификаторПользователяИБ = ИдентификаторыПользователейИБ[Пользователь];
		ИдентификаторПользователяСВ = ОбсужденияДокументооборот.ИдентификаторПользователяСВПоИдПользователяИБ(
			ИдентификаторПользователяИБ);
		Если ИдентификаторПользователяСВ <> Неопределено Тогда
			ИдентификаторыПользователейСВ.Добавить(ИдентификаторПользователяСВ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИдентификаторыПользователейСВ;
		
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ДобавлениеКонтактаВИзбранное

&НаСервереБезКонтекста
Функция ЕстьГруппыВИзбранном()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ГруппыКонтактовПользователей.Ссылка
		|ИЗ
		|	Справочник.ГруппыКонтактовПользователей КАК ГруппыКонтактовПользователей
		|ГДЕ
		|	НЕ ГруппыКонтактовПользователей.Родитель = ЗНАЧЕНИЕ(Справочник.ГруппыКонтактовПользователей.ПустаяСсылка)
		|	И НЕ ГруппыКонтактовПользователей.ПометкаУдаления
		|	И ГруппыКонтактовПользователей.Автор В (&Автор)";
	Запрос.УстановитьПараметр("Автор", Сотрудники.ТекущийПользовательИСотрудники());
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьКонтактыВГруппу(Знач Группа, Знач Контакты)
	
	НачатьТранзакцию();
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ГруппыКонтактовПользователей.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ГруппыКонтактовПользователей КАК ГруппыКонтактовПользователей
		|ГДЕ
		|	НЕ ГруппыКонтактовПользователей.ПометкаУдаления
		|	И ГруппыКонтактовПользователей.Автор В (&Автор)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
	Запрос.УстановитьПараметр("Автор", Сотрудники.ПользовательИЕгоСотрудники());
		
	Если Запрос.Выполнить().Пустой() Тогда
		ГруппаОбъект = Справочники.ГруппыКонтактовПользователей.СоздатьЭлемент();
		ГруппаОбъект.Наименование = НСтр("ru = 'Без группы'");
		ГруппаОбъект.Автор = Сотрудники.ОсновнойСотрудник();
		ГруппаОбъект.Записать();
	КонецЕсли;
	
	ТипыКонтактовСАдресами = Новый Массив;
	ТипыКонтактовСАдресами.Добавить(Тип("СправочникСсылка.Контрагенты"));
	ТипыКонтактовСАдресами.Добавить(Тип("СправочникСсылка.ЛичныеАдресаты"));
	ТипыКонтактовСАдресами.Добавить(Тип("СправочникСсылка.РолиИсполнителей"));
	ТипыКонтактовСАдресами.Добавить(Тип("СправочникСсылка.Пользователи"));
	ТипыКонтактовСАдресами.Добавить(Тип("СправочникСсылка.Сотрудники"));
	ТипыКонтактовСАдресами.Добавить(Тип("СправочникСсылка.КонтактныеЛица"));
	
	ПредставленияАвтогрупп = ПолучитьСписокПредставленийАвтогрупп();
	
	Для Каждого Контакт ИЗ Контакты Цикл
		
		ТипКонтакта = ТипЗнч(Контакт);
		
		Если ТипКонтакта = Тип("Строка")
			И ПредставленияАвтогрупп.Найти(Контакт) = Неопределено Тогда
			
			Справочники.ГруппыКонтактовПользователей.ЗаписатьКонтакт("", Контакт, Группа);
			Продолжить;
		КонецЕсли;
		
		Адрес = "";
		Если ТипыКонтактовСАдресами.Найти(ТипКонтакта) <> Неопределено Тогда
			АдресаКонтакта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Контакт),
				Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,,
				ТекущаяДатаСеанса());
				
			Если АдресаКонтакта.Количество() > 0 Тогда
				Адрес = АдресаКонтакта[0].Представление;
			КонецЕсли;
		КонецЕсли;
			
		Справочники.ГруппыКонтактовПользователей.ЗаписатьКонтакт(Контакт, Адрес, Группа);
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

#КонецОбласти

// Устанавливает видимость списков Адресной книги
//
// Параметры:
//  ПоказатьРезультатыПоиска - Булево
//  ПереносДанныхЗавершен	 - Булево - Если Истина, то пользователь может пользоваться поиском
//
&НаСервере
Процедура НастроитьОтображениеСтраниц(ПоказатьРезультатыПоиска, ПереносДанныхЗавершен=Истина)
	
	Элементы.Список.Видимость = Не ПоказатьРезультатыПоиска;
	Элементы.РезультатПоиска.Видимость = ПоказатьРезультатыПоиска;
	Элементы.ГруппаПредупреждениеОбновлениеНеЗавершено.Видимость = ПоказатьРезультатыПоиска И Не ПереносДанныхЗавершен;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементУсловногоОформления = РезультатПоиска.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЕстьИсполнители");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.РольБезИсполнителей.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементУсловногоОформления = Список.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЕстьИсполнители");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.РольБезИсполнителей.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
КонецПроцедуры

// Возвращает Истина, если данные поиска уже перенесены из старого РС УдалитьПоискВАдреснойКниге (3.0.15.17)
// 
// Возвращаемое значение:
//  Булево
//
&НаСервереБезКонтекста
Функция ПереносДанныхЗавершен()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УдалитьПоискВАдреснойКниге.ОбъектПоиска КАК ОбъектПоиска
		|ИЗ
		|	РегистрСведений.УдалитьПоискВАдреснойКниге КАК УдалитьПоискВАдреснойКниге";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ПереносДанныхЗавершен = Не Выборка.Следующий(); 
	
	Возврат ПереносДанныхЗавершен;
	
КонецФункции

// Возвращает текст предупреждения о сотрудниках без пользователя
//
// Параметры:
//  СотрудникБезПользователя				 - СправочникСсылка.Сотрудники - если сотрудников без пользователя больше одного, 
//																			 то первый из них
//  СотрудниковБезПользователяБольшеОдного	 - Булево
//  ВыделенныеОбъекты						 - Массив Из Структура - поля:
//   * ТипОбъекта - Тип
// 
// Возвращаемое значение:
//  Строка
// 
&НаСервереБезКонтекста
Функция ТекстПредупрежденияОСотрудникахБезПользователя(СотрудникБезПользователя, 
	СотрудниковБезПользователяБольшеОдного, ВыделенныеОбъекты)
	
	Если ВыделенныеОбъекты.Количество() = 1 Тогда
		
		Объект = ВыделенныеОбъекты[0];
		ТипОбъекта = Объект.ТипОбъекта;
		
		Если ТипОбъекта = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			
			Если СотрудниковБезПользователяБольшеОдного Тогда
				
				ШаблонСообщения = 
				НСтр("ru = 'В выбранном подразделении пользователю %1 и др. не разрешен вход в программу.
				|Такие пользователи не будут добавлены в список!'");
				
			Иначе
				
				ШаблонСообщения = 
				НСтр("ru = 'В выбранном подразделении пользователю %1 не разрешен вход в программу.
				|Он не будет добавлен в список!'");
				
			КонецЕсли;
			
		ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.РабочиеГруппы") Тогда
			
			Если СотрудниковБезПользователяБольшеОдного Тогда
				
				ШаблонСообщения = 
				НСтр("ru = 'В выбранной группе пользователю %1 и др. не разрешен вход в программу.
				|Такие пользователи не будут добавлены в список!'");
				
			Иначе
				
				ШаблонСообщения = 
				НСтр("ru = 'В выбранной группе пользователю %1 не разрешен вход в программу.
				|Он не будет добавлен в список!'");
				
			КонецЕсли;
			
		ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Мероприятия") 
			Или ТипОбъекта = Тип("СправочникСсылка.ПапкиМероприятий") Тогда
			
			Если СотрудниковБезПользователяБольшеОдного Тогда
				
				ШаблонСообщения = 
				НСтр("ru = 'В выбранном мероприятии пользователю %1 и др. не разрешен вход в программу.
				|Такие пользователи не будут добавлены в список!'");
				
			Иначе
				
				ШаблонСообщения = 
				НСтр("ru = 'В выбранном мероприятии пользователю %1 не разрешен вход в программу.
				|Он не будет добавлен в список!'");
				
			КонецЕсли;
			
		ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.Проекты")
			Или ТипОбъекта = Тип("СправочникСсылка.ПапкиПроектов") Тогда
			
			Если СотрудниковБезПользователяБольшеОдного Тогда
				
				ШаблонСообщения = 
				НСтр("ru = 'В выбранном проекте пользователю %1 и др. не разрешен вход в программу.
				|Такие пользователи не будут добавлены в список!'");
				
			Иначе
				
				ШаблонСообщения = 
				НСтр("ru = 'В выбранном проекте пользователю %1 не разрешен вход в программу.
				|Он не будет добавлен в список!'");
				
			КонецЕсли;
			
		Иначе
			
			ШаблонСообщения = 
			НСтр("ru = 'Выбранному пользователю %1 не разрешен вход в программу.
			|Он не будет добавлен в список!'");
			
		КонецЕсли;
		
	Иначе
		
		Если СотрудниковБезПользователяБольшеОдного Тогда
			
			ШаблонСообщения = 
			НСтр("ru = 'В выбранных объектах пользователю %1 и др. не разрешен вход в программу.
			|Такие пользователи не будут добавлены в список!'");
			
		Иначе
			
			ШаблонСообщения = 
			НСтр("ru = 'В выбранных объектах пользователю %1 не разрешен вход в программу.
			|Он не будет добавлен в список!'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрШаблон(ШаблонСообщения, СотрудникБезПользователя);
	
КонецФункции

#КонецОбласти
