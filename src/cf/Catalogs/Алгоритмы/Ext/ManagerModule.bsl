
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс	
	
// Выполняет код указанного алгоритма.
//
// Параметры:
//  КлючДляВызова - Строка - см. реквизит КлючДляВызова справочника Алгоритмы.
//  Параметры - Произвольный - произвольные параметры для выполнения алгоритма.
//
// Возвращаемое значение:
//  Произвольный - значение, возвращенное вызванным алгоритмом. По умолчанию Неопределено.
//
Функция Вызвать(КлючДляВызова, Параметры = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	ДанныеАлгоритма = ДанныеАлгоритмаПоКлючу(КлючДляВызова);
	Если Не ЗначениеЗаполнено(ДанныеАлгоритма.Ссылка) Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Алгорим %1 не существует'"), КлючДляВызова);
	КонецЕсли;
	
	УстановитьБезопасныйРежим(Истина);
	Выполнить(ДанныеАлгоритма.Выражение);
	
	Возврат Результат;
	
КонецФункции

// Обновляет предопределенные алгоритмы.
//
Процедура ЗаполнитьПредопределенные() Экспорт
	
	ТаблицаЭлементов = Новый ТаблицаЗначений;
	ТаблицаЭлементов.Колонки.Добавить("ИмяПредопределенного");
	ТаблицаЭлементов.Колонки.Добавить("КлючДляВызова");
	ТаблицаЭлементов.Колонки.Добавить("Выражение");
	
	Стр = ТаблицаЭлементов.Добавить();
	Стр.ИмяПредопределенного = "НепосредственныйРуководительПользователя";
	Стр.КлючДляВызова = "НепосредственныйРуководительПользователя";
	Стр.Выражение = 
		"Если ТипЗнч(Параметры) <> Тип(""Структура"") Тогда
		|    ВызватьИсключение(СтрШаблон(
		|        НСтр(""ru = 'Неверный тип """"%1"""" переменной """"Параметры"""". Ожидается Структура.'""),
		|        ТипЗнч(Параметры)));
		|КонецЕсли;
		|
		|Если Не Параметры.Свойство(""Пользователь"") Тогда
		|    ВызватьИсключение(
		|        НСтр(""ru = 'В параметрах алгоритма отсутствует обязательное свойство """"Пользователь""""'""));
		|КонецЕсли;
		|
		|Сотрудник = Сотрудники.ОсновнойСотрудникПользователя(
		|	Параметры.Пользователь);
		|Если ЗначениеЗаполнено(Сотрудник) И ТипЗнч(Сотрудник) = Тип(""СправочникСсылка.Сотрудники"") Тогда
		|	Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, ""Подразделение"");
		|Иначе
		|	Подразделение = Неопределено;
		|КонецЕсли;
		|
		|Результат = Справочники.Сотрудники.ПустаяСсылка();
		|Если ЗначениеЗаполнено(Подразделение) Тогда
		|	ПодразделениеРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, ""Родитель"");
		|	РуководительПодразделения = СтруктураПредприятия.РуководительПодразделения(Подразделение);
		|	
		|	Если РуководительПодразделения <> Сотрудник Тогда 
		|		Результат = РуководительПодразделения;
		|	Иначе
		|		Пока ПодразделениеРодитель <> Неопределено Цикл
		|			Подразделение = ПодразделениеРодитель;
		|			ПодразделениеРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, ""Родитель"");
		|			РуководительПодразделения = СтруктураПредприятия.РуководительПодразделения(Подразделение);
		|			Если РуководительПодразделения <> Сотрудник Тогда 
		|				Результат = РуководительПодразделения;
		|				Прервать;
		|			КонецЕсли;
		|		КонецЦикла;	
		|	КонецЕсли;
		|	Результат = РуководительПодразделения;
		|КонецЕсли;";
	
	Стр = ТаблицаЭлементов.Добавить();
	Стр.ИмяПредопределенного = "НепосредственныйРуководительСотрудника";
	Стр.КлючДляВызова = "НепосредственныйРуководительСотрудника";
	
	Стр.Выражение = 
		"Если ТипЗнч(Параметры) <> Тип(""Структура"") Тогда
		|    ВызватьИсключение(СтрШаблон(
		|        НСтр(""ru = 'Неверный тип """"%1"""" переменной """"Параметры"""". Ожидается Структура.'""),
		|        ТипЗнч(Параметры)));
		|КонецЕсли;
		|
		|Если Не Параметры.Свойство(""Сотрудник"") Тогда
		|    ВызватьИсключение(
		|        НСтр(""ru = 'В параметрах алгоритма отсутствует обязательное свойство """"Сотрудник""""'""));
		|КонецЕсли;
		|
		|Сотрудник = Параметры.Сотрудник;
		|Если ЗначениеЗаполнено(Сотрудник) И ТипЗнч(Сотрудник) = Тип(""СправочникСсылка.Сотрудники"") Тогда
		|	Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, ""Подразделение"");
		|Иначе
		|	Подразделение = Неопределено;
		|КонецЕсли;
		|
		|Результат = Справочники.Сотрудники.ПустаяСсылка();
		|Если ЗначениеЗаполнено(Подразделение) Тогда
		|	ПодразделениеРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, ""Родитель"");
		|	РуководительПодразделения = СтруктураПредприятия.РуководительПодразделения(Подразделение);
		|	
		|	Если РуководительПодразделения <> Сотрудник Тогда 
		|		Результат = РуководительПодразделения;
		|	Иначе
		|		Пока ПодразделениеРодитель <> Неопределено Цикл
		|			Подразделение = ПодразделениеРодитель;
		|			ПодразделениеРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Подразделение, ""Родитель"");
		|			РуководительПодразделения = СтруктураПредприятия.РуководительПодразделения(Подразделение);
		|			Если РуководительПодразделения <> Сотрудник Тогда 
		|				Результат = РуководительПодразделения;
		|				Прервать;
		|			КонецЕсли;
		|		КонецЦикла;	
		|	КонецЕсли;
		|	Результат = РуководительПодразделения;
		|КонецЕсли;";
	
	Стр = ТаблицаЭлементов.Добавить();
	Стр.ИмяПредопределенного = "ВсеРуководителиПользователя";
	Стр.КлючДляВызова = "ВсеРуководителиПользователя";
	Стр.Выражение = 
		"Если ТипЗнч(Параметры) <> Тип(""Структура"") Тогда
		|    ВызватьИсключение(СтрШаблон(
		|        НСтр(""ru = 'Неверный тип """"%1"""" переменной """"Параметры"""". Ожидается Структура.'""),
		|        ТипЗнч(Параметры)));
		|КонецЕсли;
		|
		|Если Не Параметры.Свойство(""Пользователь"") Тогда
		|    ВызватьИсключение(СтрШаблон(
		|        НСтр(""ru = 'В параметрах алгоритма отсутствует обязательное свойство """"Пользователь""""'""),
		|        ТипЗнч(Параметры)));
		|КонецЕсли;
		|
		|Запрос = Новый Запрос;
		|Запрос.Текст = 
		|	""ВЫБРАТЬ
		|	|	ПодчиненностьПодразделений.РуководительВышестоящего КАК Руководитель
		|	|ИЗ
		|	|	РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
		|	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|	|	ПО ПодчиненностьПодразделений.Подчиненное = Сотрудники.Подразделение
		|	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|	|	ПО Сотрудники.Ссылка = СотрудникиПользователей.Сотрудник
		|	|	
		|	|ГДЕ
		|	|	СотрудникиПользователей.Пользователь = &Пользователь
		|	|	И ПодчиненностьПодразделений.РуководительВышестоящего <> СотрудникиПользователей.Сотрудник"";
		|Запрос.УстановитьПараметр(""Пользователь"", Параметры.Пользователь);
		|Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);";
	
	Стр = ТаблицаЭлементов.Добавить();
	Стр.ИмяПредопределенного = "ВсеРуководителиСотрудника";
	Стр.КлючДляВызова = "ВсеРуководителиСотрудника";
	Стр.Выражение = 
		"Если ТипЗнч(Параметры) <> Тип(""Структура"") Тогда
		|    ВызватьИсключение(СтрШаблон(
		|        НСтр(""ru = 'Неверный тип """"%1"""" переменной """"Параметры"""". Ожидается Структура.'""),
		|        ТипЗнч(Параметры)));
		|КонецЕсли;
		|
		|Если Не Параметры.Свойство(""Сотрудник"") Тогда
		|    ВызватьИсключение(
		|        НСтр(""ru = 'В параметрах алгоритма отсутствует обязательное свойство """"Сотрудник""""'""));
		|КонецЕсли;
		|
		|Запрос = Новый Запрос;
		|Запрос.Текст = 
		|	""ВЫБРАТЬ
		|	|	ПодчиненностьПодразделений.РуководительВышестоящего КАК Руководитель
		|	|ИЗ
		|	|	РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
		|	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|	|		ПО ПодчиненностьПодразделений.Подчиненное = Сотрудники.Подразделение
		|	|	
		|	|ГДЕ
		|	|	Сотрудники.Ссылка = &Сотрудник
		|	|	И ПодчиненностьПодразделений.РуководительВышестоящего <> &Сотрудник
		|	|УПОРЯДОЧИТЬ ПО
		|	|	ПодчиненностьПодразделений.УровеньВышестоящегоОтПодчиненного"";
		|Запрос.УстановитьПараметр(""Сотрудник"", Параметры.Сотрудник);
		|Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);";
	
	Стр = ТаблицаЭлементов.Добавить();
	Стр.ИмяПредопределенного = "ВсеПодчиненныеПользователя";
	Стр.КлючДляВызова = "ВсеПодчиненныеПользователя";
	Стр.Выражение = 
		"Если ТипЗнч(Параметры) <> Тип(""Структура"") Тогда
		|    ВызватьИсключение(СтрШаблон(
		|        НСтр(""ru = 'Неверный тип """"%1"""" переменной """"Параметры"""". Ожидается Структура.'""),
		|        ТипЗнч(Параметры)));
		|КонецЕсли;
		|
		|Если Не Параметры.Свойство(""Пользователь"") Тогда
		|    ВызватьИсключение(
		|        НСтр(""ru = 'В параметрах алгоритма отсутствует обязательное свойство """"Пользователь""""'""));
		|КонецЕсли;
		|
		|Запрос = Новый Запрос;
		|Запрос.Текст = 
		|	""ВЫБРАТЬ
		|	|	Сотрудники.Ссылка КАК Сотрудник
		|	|ИЗ
		|	|	Справочник.Сотрудники КАК Сотрудники
		|	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
		|	|		ПО Сотрудники.Подразделение = ПодчиненностьПодразделений.Подчиненное
		|	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|	|		ПО ПодчиненностьПодразделений.РуководительВышестоящего = СотрудникиПользователей.Сотрудник
		|	|ГДЕ
		|	|	СотрудникиПользователей.Пользователь = &Пользователь
		|	|	И Сотрудники.Ссылка <> СотрудникиПользователей.Сотрудник
		|	|	И Сотрудники.Действует"";
		|Запрос.УстановитьПараметр(""Пользователь"", Параметры.Пользователь);
		|
		|Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);";

	Стр = ТаблицаЭлементов.Добавить();
	Стр.ИмяПредопределенного = "ВсеПодчиненныеСотрудника";
	Стр.КлючДляВызова = "ВсеПодчиненныеСотрудника";
	Стр.Выражение = 
		"Если ТипЗнч(Параметры) <> Тип(""Структура"") Тогда
		|    ВызватьИсключение(СтрШаблон(
		|        НСтр(""ru = 'Неверный тип """"%1"""" переменной """"Параметры"""". Ожидается Структура.'""),
		|        ТипЗнч(Параметры)));
		|КонецЕсли;
		|
		|Если Не Параметры.Свойство(""Сотрудник"") Тогда
		|    ВызватьИсключение(
		|        НСтр(""ru = 'В параметрах алгоритма отсутствует обязательное свойство """"Сотрудник""""'""));
		|КонецЕсли;
		|	
		|Запрос = Новый Запрос;
		|Запрос.Текст = 
		|	""ВЫБРАТЬ
		|	|	Сотрудники.Ссылка КАК Сотрудник
		|	|ИЗ
		|	|	Справочник.Сотрудники КАК Сотрудники
		|	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
		|	|		ПО Сотрудники.Подразделение = ПодчиненностьПодразделений.Подчиненное
		|	|ГДЕ
		|	|	ПодчиненностьПодразделений.РуководительВышестоящего = &Сотрудник
		|	|	И Сотрудники.Ссылка <> &Сотрудник
		|	|	И Сотрудники.Действует"";
		|Запрос.УстановитьПараметр(""Сотрудник"", Параметры.Сотрудник);
		|
		|Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);";

	Стр = ТаблицаЭлементов.Добавить();
	Стр.ИмяПредопределенного = "ВсеКоллегиСотрудника";
	Стр.КлючДляВызова = "ВсеКоллегиСотрудника";
	Стр.Выражение = 
		"Если ТипЗнч(Параметры) <> Тип(""Структура"") Тогда
		|    ВызватьИсключение(СтрШаблон(
		|        НСтр(""ru = 'Неверный тип """"%1"""" переменной """"Параметры"""". Ожидается Структура.'""),
		|        ТипЗнч(Параметры)));
		|КонецЕсли;
		|
		|Если Не Параметры.Свойство(""Сотрудник"") Тогда
		|    ВызватьИсключение(
		|        НСтр(""ru = 'В параметрах алгоритма отсутствует обязательное свойство """"Сотрудник""""'""));
		|КонецЕсли;
		|
		|Результат = Новый Массив;
		|Сотрудник = Параметры.Сотрудник;
		|Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, ""Подразделение"");
		|
		|Если ЗначениеЗаполнено(Подразделение) Тогда
		|	Запрос = Новый Запрос;
		|	Запрос.Текст = 
		|		""ВЫБРАТЬ
		|		|	Сотрудники.Ссылка КАК Сотрудник
		|		|ИЗ
		|		|	Справочник.Сотрудники КАК Сотрудники
		|		|ГДЕ
		|		|	Сотрудники.Подразделение = &Подразделение
		|		|	И Сотрудники.Ссылка <> &Сотрудник
		|		|	И Сотрудники.Действует"";
		|	Запрос.УстановитьПараметр(""Сотрудник"", Сотрудник);
		|	Запрос.УстановитьПараметр(""Подразделение"", Подразделение);
		|	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
		|	
		|	РуководительПодразделения = СтруктураПредприятия.РуководительПодразделения(Подразделение);
		|	Если Результат.Найти(РуководительПодразделения) = Неопределено Тогда
		|		Результат.Добавить(РуководительПодразделения);
		|	КонецЕсли;
		|
		|КонецЕсли;";
	
	Стр = ТаблицаЭлементов.Добавить();
	Стр.ИмяПредопределенного = "РуководителиПодразделений";
	Стр.КлючДляВызова = "РуководителиПодразделений";
	Стр.Выражение = 
		"Результат = Новый Массив;
		|Запрос = Новый Запрос;
		|Запрос.Текст = 
		|	""ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	|	Сотрудники.Ссылка КАК Ссылка
		|	|ИЗ
		|	|	Справочник.Сотрудники КАК Сотрудники
		|	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|	|		ПО (Сотрудники.Ссылка = СтруктураПредприятия.Руководитель)
		|	|ГДЕ
		|	|	Сотрудники.Действует
		|	|	И НЕ Сотрудники.ПометкаУдаления"";
		|Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
		|
		|";
		
	Стр = ТаблицаЭлементов.Добавить();
	Стр.ИмяПредопределенного = "ВсеВизыДокумента";
	Стр.КлючДляВызова = "ВсеВизыДокумента";
	Стр.Выражение = 
		"Если ТипЗнч(Параметры) <> Тип(""Структура"") Тогда
		|	ВызватьИсключение(СтрШаблон(
		|		НСтр(""ru = 'Неверный тип """"%1"""" переменной """"Параметры"""". Ожидается Структура.'""),
		|		ТипЗнч(Параметры)));
		|КонецЕсли;
		|
		|Если Не Параметры.Свойство(""Документ"") Тогда
		|	ВызватьИсключение(
		|		НСтр(""ru = 'В параметрах алгоритма отсутствует обязательное свойство """"Документ""""'""));
		|КонецЕсли;
		|
		|ТолькоАктивные = Истина;
		|Если Параметры.Свойство(""ТолькоАктивные"") Тогда
		|	ТолькоАктивные = Параметры.ТолькоАктивные;
		|КонецЕсли;
		|
		|Документ = Параметры.Документ;
		|Результат = РаботаСВизамиСогласования.ПолучитьВизыДокумента(Документ, ТолькоАктивные);";
		
	Стр = ТаблицаЭлементов.Добавить();
	Стр.ИмяПредопределенного = "СвязанныйОбъект";
	Стр.КлючДляВызова = "СвязанныйОбъект";
	Стр.Выражение = 
		"Если ТипЗнч(Параметры) <> Тип(""Структура"") Тогда
		|	ВызватьИсключение(СтрШаблон(
		|		НСтр(""ru = 'Неверный тип """"%1"""" переменной """"Параметры"""". Ожидается Структура.'""),
		|		ТипЗнч(Параметры)));
		|КонецЕсли;
		|
		|Если Не Параметры.Свойство(""Объект"") Тогда
		|	ВызватьИсключение(
		|		НСтр(""ru = 'В параметрах алгоритма отсутствует обязательное свойство """"Объект""""'""));
		|КонецЕсли;
		|Если Не Параметры.Свойство(""ТипСвязи"") Тогда
		|	ВызватьИсключение(
		|		НСтр(""ru = 'В параметрах алгоритма отсутствует обязательное свойство """"ТипСвязи""""'""));
		|КонецЕсли;
		|
		|Результат = СвязиОбъектов.ПолучитьСвязанныйОбъект(Параметры.Объект, Параметры.ТипСвязи);";
		
	Стр = ТаблицаЭлементов.Добавить();
	Стр.ИмяПредопределенного = "ВсеСвязанныеОбъекты";
	Стр.КлючДляВызова = "ВсеСвязанныеОбъекты";
	Стр.Выражение = 
		"Если ТипЗнч(Параметры) <> Тип(""Структура"") Тогда
		|	ВызватьИсключение(СтрШаблон(
		|		НСтр(""ru = 'Неверный тип """"%1"""" переменной """"Параметры"""". Ожидается Структура.'""),
		|		ТипЗнч(Параметры)));
		|КонецЕсли;
		|
		|Если Не Параметры.Свойство(""Объект"") Тогда
		|	ВызватьИсключение(
		|		НСтр(""ru = 'В параметрах алгоритма отсутствует обязательное свойство """"Объект""""'""));
		|КонецЕсли
		|
		|Результат = СвязиОбъектов.ПолучитьВсеСвязиОбъекта(Параметры.Объект);";
		
	Для Каждого Стр Из ТаблицаЭлементов Цикл
		Попытка
			АлгоритмСсылка = Справочники.Алгоритмы[Стр.ИмяПредопределенного];
			АлгоритмОбъект = АлгоритмСсылка.ПолучитьОбъект();
			Если АлгоритмОбъект.Выражение <> Стр.Выражение
				Или АлгоритмОбъект.КлючДляВызова <> Стр.КлючДляВызова Тогда
				АлгоритмОбъект.Выражение = Стр.Выражение;
				АлгоритмОбъект.КлючДляВызова = Стр.КлючДляВызова;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(АлгоритмОбъект);
			КонецЕсли;
		Исключение
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Ошибка при обновлении предопределенного алгоритма ""%1"": %2'"),
				Стр.ИмяПредопределенного,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				"Алгоритмы",
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.Алгоритмы,,
				ТекстОшибки);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеАлгоритмаПоКлючу(КлючДляВызова)
	
	ДанныеАлгоритма = Новый Структура("Ссылка, Выражение", Неопределено, "");
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Алгоритмы.Ссылка КАК Ссылка,
		|	Алгоритмы.Выражение
		|ИЗ
		|	Справочник.Алгоритмы КАК Алгоритмы
		|ГДЕ
		|	Алгоритмы.КлючДляВызова = &КлючДляВызова
		|	И НЕ Алгоритмы.ПометкаУдаления");
	Запрос.УстановитьПараметр("КлючДляВызова", КлючДляВызова);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДанныеАлгоритма.Ссылка = Выборка.Ссылка;
		ДанныеАлгоритма.Выражение = Выборка.Выражение;
	КонецЕсли;
	
	Возврат ДанныеАлгоритма;
	
КонецФункции

#КонецОбласти

#КонецЕсли
