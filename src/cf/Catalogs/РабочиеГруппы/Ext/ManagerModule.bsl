///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Смотри также ОбновлениеИнформационнойБазыПереопределяемый.ПриНастройкеНачальногоЗаполненияЭлементов
// 
// Параметры:
//  Настройки - см. ОбновлениеИнформационнойБазыПереопределяемый.ПриНастройкеНачальногоЗаполненияЭлементов.Настройки
//
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Ложь;
	
КонецПроцедуры

// Смотри также ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов
// 
// Параметры:
//   КодыЯзыков - см. ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов.КодыЯзыков
//   Элементы - см. ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов.Элементы
//   ТабличныеЧасти - см. ОбновлениеИнформационнойБазыПереопределяемый.ПриНачальномЗаполненииЭлементов.ТабличныеЧасти
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт

	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "ВсеПользователи";
	Элемент.Наименование = НСтр("ru = 'Все сотрудники'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "РуководителиПодразделений";
	Элемент.Наименование = НСтр("ru = 'Руководители подразделений'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Возвращает структуру полей рабочей группы.
//
// Возвращаемое значение:
//   Структура
//     Наименование
//     Родитель
//
Функция ПолучитьСтруктуруРабочихГрупп() Экспорт
	
	СвойстваЭлемента = Новый Структура;
	СвойстваЭлемента.Вставить("Наименование");
	СвойстваЭлемента.Вставить("Родитель");
	
	Возврат СвойстваЭлемента;
	
КонецФункции

// Создает и записывает в БД элемент справочника.
//
// Параметры:
//   СтруктураРабочейГруппы - Структура - структура полей рабочей группы.
//
Функция СоздатьРабочуюГруппу(СтруктураРабочейГруппы) Экспорт
	
	НовыйЭлемент = СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтруктураРабочейГруппы);
	НовыйЭлемент.Записать();
	
	Возврат НовыйЭлемент.Ссылка;
	
КонецФункции

// Возвращает состав сотрудников, входящих в указанный контейнер.
//
// Параметры:
//   Контейнер - СправочникСсылка.Сотрудники - контейнер сотрудников.
//
// Возвращаемое значение:
//   Массив - массив значений СправочникСсылка.Сотрудники - состав контейнера.
//
Функция СоставКонтейнераСотрудников(Контейнер) Экспорт
	
	Если Не ЗначениеЗаполнено(Контейнер) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Если Контейнер = Справочники.РабочиеГруппы.ВсеПользователи Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Сотрудники.Ссылка КАК Ссылка
		    |ИЗ
		    |	Справочник.Сотрудники КАК Сотрудники
		    |ГДЕ
		    |	НЕ Сотрудники.ПометкаУдаления");
	Иначе
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РабочиеГруппыСостав.Участник КАК Участник
			|ИЗ
			|	Справочник.РабочиеГруппы КАК РабочиеГруппы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РабочиеГруппы.Состав КАК РабочиеГруппыСостав
			|		ПО РабочиеГруппы.Ссылка = РабочиеГруппыСостав.Ссылка
			|ГДЕ
			|	РабочиеГруппы.Ссылка В ИЕРАРХИИ(&Контейнер)
			|	И НЕ РабочиеГруппы.ПометкаУдаления
			|	И НЕ РабочиеГруппыСостав.Участник.ПометкаУдаления");
		Запрос.УстановитьПараметр("Контейнер", Контейнер);
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
	Возврат Результат;
	
КонецФункции

// Возвращает контейнеры типа РабочиеГруппы, которым принадлежит указанный сотрудник.
//
// Параметры:
//   Сотрудник - СправочникСсылка.Сотрудники - проверяемый сотрудник.
//
// Возвращаемое значение:
//   Массив - массив значений СправочникСсылка.РабочиеГруппы -
//   	контейнеры, которым принадлежит сотрудник.
//
Функция КонтейнерыСотрудника(Сотрудник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ПометкаУдаления") = Истина Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РабочиеГруппы.Ссылка КАК Ссылка,
		|	РабочиеГруппы.Родитель КАК Родитель1,
		|	РабочиеГруппы.Родитель.Родитель КАК Родитель2,
		|	РабочиеГруппы.Родитель.Родитель.Родитель КАК Родитель3
		|ИЗ
		|	Справочник.РабочиеГруппы КАК РабочиеГруппы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РабочиеГруппы.Состав КАК РабочиеГруппыСостав
		|		ПО РабочиеГруппы.Ссылка = РабочиеГруппыСостав.Ссылка
		|ГДЕ
		|	РабочиеГруппыСостав.Участник = &Сотрудник
		|	И НЕ РабочиеГруппы.ПометкаУдаления
		|");
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Контейнеры = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Контейнеры.Добавить(Выборка.Ссылка);
		Если ЗначениеЗаполнено(Выборка.Родитель1) Тогда
			Контейнеры.Добавить(Выборка.Родитель1);
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.Родитель2) Тогда
			Контейнеры.Добавить(Выборка.Родитель2);
		КонецЕсли;
		ТекущийРодитель = Выборка.Родитель3;
		Пока ЗначениеЗаполнено(ТекущийРодитель) Цикл
			Контейнеры.Добавить(ТекущийРодитель);
			ТекущийРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийРодитель, "Родитель");
		КонецЦикла;
	КонецЦикла;
	Контейнеры.Добавить(Справочники.РабочиеГруппы.ВсеПользователи);
	Контейнеры = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Контейнеры);
	
	Возврат Контейнеры;
	
КонецФункции

// Вернет Истина, у этого объекта метаданных есть функция ПолучитьАдресФото
Функция ЕстьФункцияПолученияФото() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает отслеживаемые реквизиты для дополнительного свойства ПредыдущиеЗначенияРеквизитов.
//
// Возвращаемое значение:
//  Строка - Отслеживаемые реквизиты.
//
Функция ОтслеживаемыеРеквизиты() Экспорт
	
	ОтслеживаемыеРеквизиты = "Родитель, Состав, Недействительна";
	
	Возврат ОтслеживаемыеРеквизиты;
	
КонецФункции

#Область ОбновлениеСоставовГруппПользователей

// Конструктор параметров обновления составов групп пользователей.
//
// Возвращаемое значение:
//	Структура:
//		* ЭтоНовый - Булево
//		* ИзмененияСостава - Массив Из СправочникСсылка.Пользователи, СправочникСсылка.Сотрудники.
//		* Родитель - СправочникСсылка.РабочиеГруппы.
//		* ПредыдущийРодитель - СправочникСсылка.РабочиеГруппы.
//
Функция ПараметрыОбновленияСоставовГруппПользователей() Экспорт
	
	ПараметрыОбновления = Новый Структура;
	ПараметрыОбновления.Вставить("ЭтоНовый", Ложь);
	ПараметрыОбновления.Вставить("ИзмененияСостава", Новый Массив);
	ПараметрыОбновления.Вставить("Родитель", ПустаяСсылка());
	ПараметрыОбновления.Вставить("ПредыдущийРодитель", ПустаяСсылка());
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Устанавливает значения параметров обновления составов групп пользователей по данным объекта.
//
// Параметры:
//	Объект - СправочникОбъект.РабочиеГруппы - Объект, для которго необходимо определить параметры обновления.
//
// Возвращаемое значение:
//	Структура: см. ПараметрыОбновленияСоставовГруппПользователей.
//
Функция ЗначенияПараметровСоставовГруппПользователей(Объект) Экспорт
	
	ПараметрыОбновления = ПараметрыОбновленияСоставовГруппПользователей();
	
	ПредыдущиеЗначенияРеквизитов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Объект.ДополнительныеСвойства, "ПредыдущиеЗначенияРеквизитов");
	
	СсылкаНаОбъект = Объект.Ссылка;
	
	Если Объект.ЭтоНовый() Тогда
		Если Объект.ПолучитьСсылкуНового().Пустая() Тогда // Установим ссылку нового, если ее нет
			СсылкаНаОбъект = ПолучитьСсылку(Новый УникальныйИдентификатор);
			Объект.УстановитьСсылкуНового(СсылкаНаОбъект);
		Иначе // Если ссылку нового уже установили ранее, возьмем ее
			СсылкаНаОбъект = Объект.ПолучитьСсылкуНового();
		КонецЕсли;
	КонецЕсли;
	
	Если ПредыдущиеЗначенияРеквизитов = Неопределено Тогда
		ПредыдущиеЗначенияРеквизитов =
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъект, ОтслеживаемыеРеквизиты());
	КонецЕсли; 
	
	ПредыдущийСоставРабочейГруппы = Неопределено;
	Если ПредыдущиеЗначенияРеквизитов.Состав <> Неопределено Тогда
		Если ТипЗнч(ПредыдущиеЗначенияРеквизитов.Состав) = Тип("РезультатЗапроса") Тогда
			ПредыдущийСоставРабочейГруппы = ПредыдущиеЗначенияРеквизитов.Состав.Выгрузить()
		Иначе
			ПредыдущийСоставРабочейГруппы = ПредыдущиеЗначенияРеквизитов.Состав;
		КонецЕсли;
	КонецЕсли;
	
	ИзмененияСоставаСотрудники = ПользователиСлужебный.РазличияЗначенийКолонки(
		"Участник", Объект.Состав.Выгрузить(), ПредыдущийСоставРабочейГруппы);
		
	ИзмененияСостава = Сотрудники.ЛюбыеПользователиСотрудников(ИзмененияСоставаСотрудники);
	
	ПараметрыОбновления.ЭтоНовый = Объект.ЭтоНовый();
	ПараметрыОбновления.ИзмененияСостава = ИзмененияСостава;
	ПараметрыОбновления.Родитель = Объект.Родитель;
	ПараметрыОбновления.ПредыдущийРодитель = ПредыдущиеЗначенияРеквизитов.Родитель;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновляет составы групп пользователей.
//
// Параметры:
//	РабочаяГруппа - СправочникСсылка.РабочиеГруппы - Рабочая группа , для которой необходимо обновить составы групп пользователей.
//	ПараметрыОбновления - см. ПараметрыОбновленияСоставовГруппПользователей.
//
Процедура ОбновитьСоставыГруппПользователей(РабочаяГруппа, ПараметрыОбновления) Экспорт
	
	УчастникиИзменений = Новый Соответствие;
	ИзмененныеГруппы   = Новый Соответствие;
	
	Если РабочаяГруппа <> ВсеПользователи Тогда
		
		ПользователиСлужебный.ОбновитьСоставыГруппПользователей(
			РабочаяГруппа, ПараметрыОбновления.ИзмененияСостава, УчастникиИзменений, ИзмененныеГруппы);
			
		Если ПараметрыОбновления.ПредыдущийРодитель <> ПараметрыОбновления.Родитель Тогда
			Если ЗначениеЗаполнено(ПараметрыОбновления.Родитель) Тогда
				ПользователиСлужебный.ОбновитьСоставыГруппПользователей(
					ПараметрыОбновления.Родитель, , УчастникиИзменений, ИзмененныеГруппы);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПараметрыОбновления.ПредыдущийРодитель) Тогда
				ПользователиСлужебный.ОбновитьСоставыГруппПользователей(
					ПараметрыОбновления.ПредыдущийРодитель, , УчастникиИзменений, ИзмененныеГруппы);
			КонецЕсли;
		КонецЕсли;
		
		ПользователиСлужебный.ОбновитьИспользуемостьСоставовГруппПользователей(
			РабочаяГруппа, УчастникиИзменений, ИзмененныеГруппы);
		
		ПользователиСлужебный.ПослеОбновленияСоставовГруппПользователей(
			УчастникиИзменений, ИзмененныеГруппы);
		
	КонецЕсли;
		
	ИнтеграцияПодсистемБСП.ПослеДобавленияИзмененияПользователяИлиГруппы(РабочаяГруппа, ПараметрыОбновления.ЭтоНовый);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеДанныхКэширующихОбъектов

// Конструктор параметров обновления данных кэширующих объектов.
//
// Возвращаемое значение:
//	Структура:
//		* ОбъектыДляОбновленияСотрудниковВКонтейнерах - Массив Из СправочникСсылка.РабочиеГруппы - Список объектов, по которым необходимо обновить данные РС СотрудникиВКонтейнерах.
//		* ПараметрыОбновленияАдреснойКниги - Структура Из КлючИЗначение - Параметры обновления адресной книги см. ПараметрыОбновленияАдреснойКниги.
//
Функция ПараметрыОбновленияДанныхКэширующихОбъектов() Экспорт
	
	ПараметрыОбновления = Новый Структура;
	ПараметрыОбновления.Вставить("ОбъектыДляОбновленияСотрудниковВКонтейнерах", Новый Массив);
	ПараметрыОбновления.Вставить("ПараметрыОбновленияАдреснойКниги", ПараметрыОбновленияАдреснойКниги());
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Устанавливает значения параметров обновления данных кэширующих объектов по данным объекта.
//
// Параметры:
//	Объект - СправочникОбъект.РабочиеГруппы - Объект, для которго необходимо определить параметры обновления.
//
// Возвращаемое значение:
//	Структура: см. ПараметрыОбновленияДанныхКэширующихОбъектов.
//
Функция ЗначенияПараметровОбновленияДанныхКэширующихОбъектов(Объект) Экспорт
	
	ПараметрыОбновления = ПараметрыОбновленияДанныхКэширующихОбъектов();
	
	ПредыдущиеЗначенияРеквизитов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Объект.ДополнительныеСвойства, "ПредыдущиеЗначенияРеквизитов");
	
	СсылкаНаОбъект = Объект.Ссылка;
	
	Если Объект.ЭтоНовый() Тогда
		Если Объект.ПолучитьСсылкуНового().Пустая() Тогда // Установим ссылку нового, если ее нет
			СсылкаНаОбъект = ПолучитьСсылку(Новый УникальныйИдентификатор);
			Объект.УстановитьСсылкуНового(СсылкаНаОбъект);
		Иначе // Если ссылку нового уже установили ранее, возьмем ее
			СсылкаНаОбъект = Объект.ПолучитьСсылкуНового();
		КонецЕсли;
	КонецЕсли;
	
	Если ПредыдущиеЗначенияРеквизитов = Неопределено Тогда
		ПредыдущиеЗначенияРеквизитов =
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъект, ОтслеживаемыеРеквизиты());
	КонецЕсли; 
	
	Если СсылкаНаОбъект <> ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РабочиеГруппы.ВсеПользователи") Тогда
		Если ЗначениеЗаполнено(ПредыдущиеЗначенияРеквизитов.Родитель)
				И ПредыдущиеЗначенияРеквизитов.Родитель <> Объект.Родитель Тогда
			
			ПараметрыОбновления.ОбъектыДляОбновленияСотрудниковВКонтейнерах.Добавить(
				ПредыдущиеЗначенияРеквизитов.Родитель);
		КонецЕсли;
		
		ПараметрыОбновления.ОбъектыДляОбновленияСотрудниковВКонтейнерах.Добавить(СсылкаНаОбъект);
	КонецЕсли;
	
	ПараметрыОбновления.ПараметрыОбновленияАдреснойКниги = ЗначенияПараметровОбновленияАдреснойКнигиПоОбъекту(Объект); 
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновляет данные зависимых объектов согласно установленным параметрам.
//
// Параметры:
//	Объект - СправочникОбъект.СтруктураПредприятия - Объект, по данным которого необходимо обновить адресной книги.
//	ПараметрыОбновления - Структура Из КлючИЗначение - см. ПараметрыОбновленияДанныхКэширующихОбъектов.
//
Процедура ОбновитьДанныеКэширующихОбъектов(Объект, ПараметрыОбновления) Экспорт
	
	Если ПараметрыОбновления.ОбъектыДляОбновленияСотрудниковВКонтейнерах.Количество() Тогда
		РегистрыСведений.СотрудникиВКонтейнерах.ОбновитьДанныеКонтейнеров(
			ПараметрыОбновления.ОбъектыДляОбновленияСотрудниковВКонтейнерах);
	КонецЕсли;
	
	ОбновитьАдреснуюКнигу(Объект, ПараметрыОбновления.ПараметрыОбновленияАдреснойКниги);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеАдреснойКниги

// Конструктор параметров обновления адресной книги.
//
// Возвращаемое значение:
//	Структура:
//		* ОбновитьДанныеОбъекта - Булево - Признак обновления данных по объекту.
//		* ОбновитьДанныеОтображенияОбъекта - Булево - Признак обновления данных отображения.
//		* ОбновитьСловаПоискаПоОбъекту - Булево - Признак обновления слов поиска по объекту.
//		* ОбновитьДоступностьВПоискеПоОбъекту - Булево - Признак обновления доступности в результатах поиска.
//		* ОбновитьСоставГруппы - Булево - Признак необходимости обновления данных адресной книги по составу рабочей группы.
//
Функция ПараметрыОбновленияАдреснойКниги() Экспорт
	
	ПараметрыОбновленияАдреснойКниги = Новый Структура;
	ПараметрыОбновленияАдреснойКниги.Вставить("ОбновитьДанныеОбъекта", Ложь);
	ПараметрыОбновленияАдреснойКниги.Вставить("ОбновитьДанныеОтображенияОбъекта", Ложь);
	ПараметрыОбновленияАдреснойКниги.Вставить("ОбновитьСловаПоискаПоОбъекту", Ложь);
	ПараметрыОбновленияАдреснойКниги.Вставить("ОбновитьДоступностьВПоискеПоОбъекту", Ложь);
	ПараметрыОбновленияАдреснойКниги.Вставить("ОбновитьСоставГруппы", Ложь);
	
	Возврат ПараметрыОбновленияАдреснойКниги;
	
КонецФункции

// Устанавливает значения параметров обновления адресной книги по данным объекта.
//
// Параметры:
//	Объект - СправочникОбъект.РабочиеГруппы - Объект, для которго необходимо определить параметры обновления.
//
// Возвращаемое значение:
//	Структура: см. ПараметрыОбновленияАдреснойКниги.
//
Функция ЗначенияПараметровОбновленияАдреснойКнигиПоОбъекту(Объект) Экспорт
	
	ПараметрыОбновленияАдреснойКниги = ПараметрыОбновленияАдреснойКниги();
		
	Если Не РаботаСАдреснойКнигой.ТребуетсяОбновлениеАдреснойКниги(Объект)
		Или Объект.Ссылка = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.РабочиеГруппы.ВсеПользователи") Тогда
		
		Возврат ПараметрыОбновленияАдреснойКниги; 
	КонецЕсли;
	
	Если Объект.ЭтоНовый() Тогда
		ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОбъекта = Истина;
		ПараметрыОбновленияАдреснойКниги.ОбновитьСоставГруппы = Истина;
		ПараметрыОбновленияАдреснойКниги.ОбновитьСловаПоискаПоОбъекту = Истина;
	Иначе
		ПредыдущиеЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.Ссылка, "Наименование, ПометкаУдаления, Родитель, Недействительна, Состав");
		
		Если ПредыдущиеЗначенияРеквизитов.Родитель <> Объект.Родитель
				Или Объект.Ссылка = РуководителиПодразделений Тогда
			
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОбъекта = Истина;
		КонецЕсли;
		
		Если ПредыдущиеЗначенияРеквизитов.Наименование <> Объект.Наименование Тогда
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОбъекта = Истина;
			ПараметрыОбновленияАдреснойКниги.ОбновитьСловаПоискаПоОбъекту = Истина;
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОтображенияОбъекта = Истина;
		КонецЕсли;
	
		Если ПредыдущиеЗначенияРеквизитов.ПометкаУдаления <> Объект.ПометкаУдаления
				Или ПредыдущиеЗначенияРеквизитов.Недействительна <> Объект.Недействительна Тогда
			
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОбъекта = Истина;
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОтображенияОбъекта = Истина;
			ПараметрыОбновленияАдреснойКниги.ОбновитьДоступностьВПоискеПоОбъекту = Истина;
			ПараметрыОбновленияАдреснойКниги.ОбновитьСоставГруппы = Истина;
		КонецЕсли;
		
		ТекущийСостав = Объект.Состав.ВыгрузитьКолонку("Участник");
		СтарыйСостав = ПредыдущиеЗначенияРеквизитов.Состав.Выгрузить().ВыгрузитьКолонку("Участник");
		
		Для Каждого Участник ИЗ ТекущийСостав Цикл
			Если СтарыйСостав.Найти(Участник) = Неопределено Тогда
				ПараметрыОбновленияАдреснойКниги.ОбновитьСловаПоискаПоОбъекту = Истина;
				ПараметрыОбновленияАдреснойКниги.ОбновитьСоставГруппы = Истина;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Участник ИЗ СтарыйСостав Цикл
			Если ТекущийСостав.Найти(Участник) = Неопределено Тогда
				ПараметрыОбновленияАдреснойКниги.ОбновитьСловаПоискаПоОбъекту = Истина;
				ПараметрыОбновленияАдреснойКниги.ОбновитьСоставГруппы = Истина;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПараметрыОбновленияАдреснойКниги;

КонецФункции

// Обновляет адресную книгу, согласно установленным параметрам.
//
// Параметры:
//	Объект - СправочникОбъект.РабочиеГруппы - Объект, по данным которого необходимо обновить адресной книги.
//	ПараметрыОбновления - Структура Из КлючИЗначение - см. ПараметрыОбновленияАдреснойКниги.
//
Процедура ОбновитьАдреснуюКнигу(Объект, ПараметрыОбновления) Экспорт
	
	Если ПараметрыОбновления.ОбновитьДанныеОбъекта Тогда
		Справочники.АдреснаяКнига.ОбновитьДанныеОбъекта(
			Объект.Ссылка, Объект.Родитель, Справочники.АдреснаяКнига.ПоРабочимГруппам);
	КонецЕсли;
		
	Если ПараметрыОбновления.ОбновитьДанныеОтображенияОбъекта Тогда
		Справочники.АдреснаяКнига.ОбновитьДанныеОтображенияПодчиненногоОбъекта(Объект.Ссылка);
	КонецЕсли;
	
	Если ПараметрыОбновления.ОбновитьСловаПоискаПоОбъекту Тогда
		РегистрыСведений.ОбъектыПоискаВАдреснойКниге.ОбновитьСловаПоискаПоРабочейГруппе(Объект);
	КонецЕсли;
	
	Если ПараметрыОбновления.ОбновитьДоступностьВПоискеПоОбъекту Тогда
		РегистрыСведений.ОбъектыПоискаВАдреснойКниге.ОбновитьДоступностьВПоиске(Объект);
	КонецЕсли;
	
	Если ПараметрыОбновления.ОбновитьСоставГруппы Тогда
		ТекущийСостав = Объект.Состав.Выгрузить().ВыгрузитьКолонку("Участник");
		
		Справочники.АдреснаяКнига.РасширитьСписокСотрудниковРолями(ТекущийСостав);
		Справочники.АдреснаяКнига.ОбновитьСписокПодчиненныхОбъектов(
			Объект.Ссылка, Объект.Родитель, ТекущийСостав, Справочники.АдреснаяКнига.ПоРабочимГруппам);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#КонецЕсли
