///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверенныеРеквизитыОбъекта = Новый Массив;
	Ошибки = Неопределено;
	
	// Проверка использования родителя.
	Если Родитель = Справочники.РабочиеГруппы.ВсеПользователи Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
			"Объект.Родитель",
			НСтр("ru = 'Предопределенная группа ""Все пользователи"" не может быть родителем.'"),
			"");
	КонецЕсли;
	
	// Проверка незаполненных и повторяющихся пользователей.
	ПроверенныеРеквизитыОбъекта.Добавить("Состав.Участник");
	
	Для каждого ТекущаяСтрока Из Состав Цикл;
		НомерСтроки = Состав.Индекс(ТекущаяСтрока);
		
		// Проверка заполнения значения.
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Участник) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"Объект.Состав[%1].Участник",
				НСтр("ru = 'Участник не выбран.'"),
				"Объект.Состав",
				НомерСтроки,
				НСтр("ru = 'Участник в строке %1 не выбран.'"));
			Продолжить;
		КонецЕсли;
		
		// Проверка наличия повторяющихся значений.
		НайденныеЗначения = Состав.НайтиСтроки(Новый Структура("Участник", ТекущаяСтрока.Участник));
		Если НайденныеЗначения.Количество() > 1 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"Объект.Состав[%1].Участник",
				НСтр("ru = 'Участник повторяется.'"),
				"Объект.Состав",
				НомерСтроки,
				НСтр("ru = 'Участник в строке %1 повторяется.'"));
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, ПроверенныеРеквизитыОбъекта);
	
КонецПроцедуры

// Блокирует недопустимые действия с предопределенной группой "Все пользователи".
Процедура ПередЗаписью(Отказ)
	
	// АПК:75-выкл проверка ОбменДанными.Загрузка должна быть после блокировки регистра.
	// Блокировка всего регистра используется вместо установки разделяемой блокировки на справочник,
	// которая приводит к взаимоблокировке при иерархическом обновлении составов групп пользователей,
	// а также вместо последовательной исключительной блокировки регистра в разрезе групп,
	// которая также приводит к взаимоблокировке в ряде случаев.
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("РегистрСведений.СоставыГруппПользователей");
	Блокировка.Заблокировать();
	// АПК:75-вкл
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияДокументооборот.УстановитьДополнительноеСвойствоПредыдущиеЗначенияРеквизитов(ЭтотОбъект);
	
	Если Ссылка = Справочники.РабочиеГруппы.ВсеПользователи Тогда
		Если НЕ Родитель.Пустая() Тогда
			ВызватьИсключение
				НСтр("ru = 'Предопределенная группа ""Все сотрудники""
				           |может быть только в корне.'");
		КонецЕсли;
		Если Состав.Количество() > 0 Тогда
			ВызватьИсключение
				НСтр("ru = 'Добавление пользователей в группу
				           |""Все сотрудники"" не поддерживается.'");
		КонецЕсли;
	Иначе
		Если Родитель = Справочники.РабочиеГруппы.ВсеПользователи Тогда
			ВызватьИсключение
				НСтр("ru = 'Предопределенная группа ""Все сотрудники""
				           |не может быть родителем.'");
		КонецЕсли;
		
		Если Не ДополнительныеСвойства.ЭтоНовый
			И ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов.Недействительна <> Недействительна Тогда
			ОбновитьНедействительностьПодчиненныхГрупп();
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить(
		"ПараметрыОбновленияДанныхКэширующихОбъектов",
		Справочники.РабочиеГруппы.ЗначенияПараметровОбновленияДанныхКэширующихОбъектов(ЭтотОбъект));
	
	ДополнительныеСвойства.Вставить(
		"ПараметрыОбновленияСоставовГруппПользователей",
		Справочники.РабочиеГруппы.ЗначенияПараметровСоставовГруппПользователей(ЭтотОбъект));
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Справочники.РабочиеГруппы.ОбновитьСоставыГруппПользователей(
		Ссылка, ДополнительныеСвойства.ПараметрыОбновленияСоставовГруппПользователей);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Справочники.РабочиеГруппы.ОбновитьДанныеКэширующихОбъектов(
		ЭтотОбъект, ДополнительныеСвойства.ПараметрыОбновленияДанныхКэширующихОбъектов);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьНедействительностьПодчиненныхГрупп()
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РабочиеГруппы.Ссылка
		|ИЗ
		|	Справочник.РабочиеГруппы КАК РабочиеГруппы
		|ГДЕ
		|	РабочиеГруппы.Недействительна <> &Недействительна
		|	И РабочиеГруппы.Родитель = &Ссылка");
	Запрос.УстановитьПараметр("Недействительна", Недействительна);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИзменяемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ИзменяемыйОбъект.Заблокировать();
		ИзменяемыйОбъект.Недействительна = Недействительна;
		ИзменяемыйОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли