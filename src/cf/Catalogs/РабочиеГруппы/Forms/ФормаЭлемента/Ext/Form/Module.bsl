
///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ЗначениеЗаполнено(Параметры.Родитель) Тогда
			Объект.Родитель = Параметры.Родитель;
		КонецЕсли;
		Если ЗначениеЗаполнено(Параметры.Ответственный) Тогда
			Объект.Ответственный = Параметры.Ответственный;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Ссылка = Справочники.РабочиеГруппы.ПустаяСсылка()
	   И Объект.Родитель = Справочники.РабочиеГруппы.ВсеПользователи Тогда
		Объект.Родитель = Справочники.РабочиеГруппы.ПустаяСсылка();
	КонецЕсли;
	
	Если Объект.Ссылка = Справочники.РабочиеГруппы.ВсеПользователи Тогда
		ТолькоПросмотр = Истина;
		Элементы.ДекорацияПредопределеннаяГруппаВсеПользователи.Видимость = Истина;
		Элементы.СтраницыУчастникиГруппыКомментарий.Видимость = Ложь;
		Элементы.Недействительна.Видимость = Ложь;
	КонецЕсли;
	
	ЗаполнитьСведенияОСотрудниках();
	
	ОбновитьСписокНедействительныхПользователей(Истина);
	УстановитьДоступностьСвойств(ЭтотОбъект);
	ОбновитьСогласноПометкеУдаленияНедействительностиИАвтозаполнению();
	
	Если ОбщегоНазначения.ЭтоАвтономноеРабочееМесто() Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Элементы.ФормаПолномочияИРазрешения.Заголовок = НСтр("ru = 'Полномочия'");
	КонецЕсли;	
	
	Элементы.ФормаПолномочияИРазрешения.Видимость = ПравоДоступа("Изменение", 
		Метаданные.РегистрыСведений.ПолномочияСотрудников);
	
	ОбсужденияДокументооборот.ОбновитьВидимостьОбсужденийВАвтообновляемомЧате(ЭтотОбъект);
	
	Элементы.ГруппаПометкаУдаления.Видимость = Объект.ПометкаУдаления;
	
КонецПроцедуры


&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьСведенияОСотрудниках();
	ОбновитьСписокНедействительныхПользователей(Истина);
	УстановитьДоступностьСвойств(ЭтотОбъект);
	ОбновитьСогласноПометкеУдаленияНедействительностиИАвтозаполнению()

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_РабочиеГруппы", Новый Структура, Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьСведенияОСотрудниках();
	ОбновитьСогласноПометкеУдаленияНедействительностиИАвтозаполнению();
	ОбсужденияДокументооборот.ОбновитьВидимостьОбсужденийВАвтообновляемомЧате(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ВыборРодителя");
	
	ОткрытьФорму("Справочник.РабочиеГруппы.ФормаВыбора", ПараметрыФормы, Элементы.Родитель);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура НедействительнаПриИзменении(Элемент)
	
	ОбновитьСогласноПометкеУдаленияНедействительностиИАвтозаполнению();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтозаполнениеПриИзменении(Элемент)
	
	ОбновитьСогласноПометкеУдаленияНедействительностиИАвтозаполнению();
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Автозаполнение И ЗначениеЗаполнено(Объект.АлгоритмАвтозаполнения) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("АвтозаполнениеПриИзмененииПродолжение",
			ЭтотОбъект,
			Объект.Автозаполнение);
		ПоказатьВопрос(ОписаниеОповещения,
			НСтр("ru = 'Рабочая группа будет перезаполнена по алгоритму автозаполнения. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтозаполнениеПриИзмененииПродолжение(Результат, ВыбранноеЗначение) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПоАлгоритму();
	Иначе
		Объект.Автозаполнение = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмАвтозаполненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение <> Объект.АлгоритмАвтозаполнения Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("АлгоритмАвтозаполненияОбработкаВыбораПродолжение",
			ЭтотОбъект,
			ВыбранноеЗначение);
		ПоказатьВопрос(ОписаниеОповещения,
			НСтр("ru = 'Рабочая группа будет перезаполнена по алгоритму автозаполнения. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмАвтозаполненияОбработкаВыбораПродолжение(Результат, ВыбранноеЗначение) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.АлгоритмАвтозаполнения = ВыбранноеЗначение;
		ЗаполнитьПоАлгоритму();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйОчистка(Элемент, СтандартнаяОбработка)
	Объект.Ответственный = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСостав

&НаКлиенте
Процедура СоставОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Объект.Состав.Очистить();
	Для каждого Значение Из ВыбранноеЗначение Цикл
		Объект.Состав.Добавить().Участник = Значение;
	КонецЦикла;
	ЗаполнитьСведенияОСотрудниках();
	Элементы.Состав.Обновить();
	УстановитьДоступностьСвойств(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(
		Элементы.Состав.ТекущиеДанные, "Сотрудник", ВыбранноеЗначение, СтандартнаяОбработка);
	
	ЗаполнитьСведенияОСотрудниках(Элементы.Состав.ТекущаяСтрока, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	СообщениеПользователю = ПеремещениеПользователяВГруппу(ПараметрыПеретаскивания.Значение, Объект.Ссылка);
	Если СообщениеПользователю <> Неопределено Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Перемещение пользователей'"), , СообщениеПользователю, БиблиотекаКартинок.Информация32);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СоставПриИзменении(Элемент)
	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодобратьПользователей(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Подбор участников рабочей группы'"));
	ПараметрыФормы.Вставить("ЗаголовокСпискаАдреснойКниги", НСтр("ru = 'Все сотрудники'"));
	ПараметрыФормы.Вставить("ЗаголовокСпискаВыбранных", НСтр("ru = 'Выбранные сотрудники'"));
	ПараметрыФормы.Вставить("РежимРаботыФормы", 2);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ПодменятьПользователейСотрудниками", Истина);
	ПараметрыФормы.Вставить("КонтролироватьДублиАдресатов", Истина);
	
	ВыбранныеПользователи = Новый Массив;
	Для Каждого Строка Из Объект.Состав Цикл
		ВыбранныеПользователи.Добавить(Строка.Участник);
	КонецЦикла;
	ПараметрыФормы.Вставить("ВыбранныеАдресаты", ВыбранныеПользователи);
	
	ОткрытьФорму("Справочник.АдреснаяКнига.ФормаСписка",
		ПараметрыФормы,
		Элементы.Состав,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьНедействительныхПользователей(Команда)
	ОбновитьСписокНедействительныхПользователей(Ложь);
	УстановитьДоступностьСвойств(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоВозрастанию(Команда)
	СоставСортироватьСтроки("ПоВозрастанию");
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоУбыванию(Команда)
	СоставСортироватьСтроки("ПоУбыванию");
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	СоставПереместитьСтроку("Вверх");
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	СоставПереместитьСтроку("Вниз");
КонецПроцедуры

&НаКлиенте
Процедура ПолномочияИРазрешения(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;
	
	ПараметрыФормыПолномочий = Новый Структура("Пользователь", Объект.Ссылка);
	ОткрытьФорму("Обработка.ПолномочияИРазрешения.Форма", ПараметрыФормыПолномочий, ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.АлгоритмАвтозаполнения) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран алгоритм автозаполнения.'"),
			Объект.Ссылка,
			"Объект.АлгоритмАвтозаполнения");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоАлгоритму();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьСвойств(Форма)
	
	Элементы = Форма.Элементы;
	
	СоставГруппы = Форма.Объект.Состав;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Недействителен", Ложь);
	ЕстьДействительныеПользователи = СоставГруппы.НайтиСтроки(ПараметрыОтбора).Количество() > 0;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ПометкаУдаления", Ложь);
	ЕстьНеУдаленныеПользователи = СоставГруппы.НайтиСтроки(ПараметрыОтбора).Количество() > 0;
	
	ПараметрыОтбора.Вставить("Недействителен", Истина);
	ЕстьНедействительныеПользователи = СоставГруппы.НайтиСтроки(ПараметрыОтбора).Количество() > 0;
	
	ПараметрыОтбора.Вставить("ПометкаУдаления", Истина);
	ЕстьУдаленныеПользователи = СоставГруппы.НайтиСтроки(ПараметрыОтбора).Количество() > 0;
	
	ДоступностьКомандПеремещения =
		(ЕстьДействительныеПользователи Или ЕстьНеУдаленныеПользователи)
		Или ((ЕстьНедействительныеПользователи Или ЕстьУдаленныеПользователи)
			И Элементы.ПоказыватьНедействительныхПользователей.Пометка);
	
	Элементы.СоставПереместитьВверх.Доступность         = ДоступностьКомандПеремещения;
	Элементы.СоставПереместитьВниз.Доступность          = ДоступностьКомандПеремещения;
	Элементы.СоставКонтекстноеМенюПереместитьВверх.Доступность = ДоступностьКомандПеремещения;
	Элементы.СоставКонтекстноеМенюПереместитьВниз.Доступность  = ДоступностьКомандПеремещения;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Недействительные.

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Участник.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Состав.Недействителен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);

	// Удаленные.

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Участник.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Состав.ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт",
		Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Ложь, Ложь, Ложь, Истина, ));

КонецПроцедуры

&НаСервере
Функция ПеремещениеПользователяВГруппу(МассивСотрудников, НоваяГруппаВладелец)
	
	МассивПеремещенныхСотрудников = Новый Массив;
	МассивНеПеремещенныхСотрудников = Новый Массив;
	Для Каждого СотрудникСсылка Из МассивСотрудников Цикл
		
		ПараметрыОтбора = Новый Структура("Участник", СотрудникСсылка);
		Если ТипЗнч(СотрудникСсылка) = Тип("СправочникСсылка.Сотрудники")
			И Объект.Состав.НайтиСтроки(ПараметрыОтбора).Количество() = 0 Тогда
			Объект.Состав.Добавить().Участник = СотрудникСсылка;
			МассивПеремещенныхСотрудников.Добавить(СотрудникСсылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПользователиСлужебный.ФормированиеСообщенияПользователю(
		МассивПеремещенныхСотрудников, НоваяГруппаВладелец, Ложь, МассивНеПеремещенныхСотрудников);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСведенияОСотрудниках(ИдентификаторСтроки = Неопределено, ВыбранныйСотрудник = Неопределено)
	
	Если ВыбранныйСотрудник = Неопределено Тогда
		ВыбранныеСотрудники = Объект.Состав.Выгрузить().ВыгрузитьКолонку("Участник");
	Иначе
		ВыбранныеСотрудники = Новый Массив;
		ВыбранныеСотрудники.Добавить(ВыбранныйСотрудник);
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Участник,
		|	НЕ Сотрудники.Действует КАК Недействителен,
		|	Сотрудники.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В (&Сотрудники)");
	Запрос.УстановитьПараметр("Сотрудники", ВыбранныеСотрудники);
	ТаблицаИсточник = Запрос.Выполнить().Выгрузить();
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		ЗаполняемаяСтрока = Объект.Состав.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ТаблицаИсточник.Количество() = 0 Тогда
			ЗаполняемаяСтрока.Недействителен = Ложь;
		Иначе
			ЗаполнитьЗначенияСвойств(ЗаполняемаяСтрока, ТаблицаИсточник[0]);
		КонецЕсли;
	Иначе
		Для Каждого ЗаполняемаяСтрока Из Объект.Состав Цикл
			Если ВыбранныеСотрудники.Найти(ЗаполняемаяСтрока.Участник) <> Неопределено Тогда
				СтрокаИсточник = ТаблицаИсточник.Найти(ЗаполняемаяСтрока.Участник);
				Если СтрокаИсточник = Неопределено Тогда
					ЗаполняемаяСтрока.Недействителен = Ложь;
					ЗаполняемаяСтрока.ПометкаУдаления = Ложь;
				Иначе
					ЗаполнитьЗначенияСвойств(ЗаполняемаяСтрока, СтрокаИсточник);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокНедействительныхПользователей(ПередОткрытиемФормы)
	
	Элементы.ПоказыватьНедействительныхПользователей.Пометка = ?(ПередОткрытиемФормы, Ложь,
		НЕ Элементы.ПоказыватьНедействительныхПользователей.Пометка);
	
	Отбор = Новый Структура;
	
	Если Не Элементы.ПоказыватьНедействительныхПользователей.Пометка Тогда
		Отбор.Вставить("Недействителен", Ложь);
		Отбор.Вставить("ПометкаУдаления", Ложь);
		Элементы.Состав.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	Иначе
		Элементы.Состав.ОтборСтрок = Новый ФиксированнаяСтруктура();
	КонецЕсли;
	
	Элементы.Состав.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура СоставСортироватьСтроки(ТипСортировки)
	
	Если Не Элементы.ПоказыватьНедействительныхПользователей.Пометка Тогда
		Элементы.Состав.ОтборСтрок = Новый ФиксированнаяСтруктура();
	КонецЕсли;
	
	Если ТипСортировки = "ПоВозрастанию" Тогда
		Объект.Состав.Сортировать("Участник Возр");
	Иначе
		Объект.Состав.Сортировать("Участник Убыв");
	КонецЕсли;
	
	Если Не Элементы.ПоказыватьНедействительныхПользователей.Пометка Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Недействителен", Ложь);
		Отбор.Вставить("ПометкаУдаления", Ложь);
		Элементы.Состав.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоставПереместитьСтроку(НаправлениеПеремещения)
	
	Строка = Объект.Состав.НайтиПоИдентификатору(Элементы.Состав.ТекущаяСтрока);
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИндексТекущейСтроки = Строка.НомерСтроки - 1;
	Сдвиг = 0;
	
	Пока Истина Цикл
		Сдвиг = Сдвиг + ?(НаправлениеПеремещения = "Вверх", -1, 1);
		
		Если ИндексТекущейСтроки + Сдвиг < 0
		Или ИндексТекущейСтроки + Сдвиг >= Объект.Состав.Количество() Тогда
			Возврат;
		КонецЕсли;
		
		Если Элементы.ПоказыватьНедействительныхПользователей.Пометка
			Или Объект.Состав[ИндексТекущейСтроки + Сдвиг].Недействителен = Ложь
			Или Объект.Состав[ИндексТекущейСтроки + Сдвиг].ПометкаУдаления = Ложь Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Объект.Состав.Сдвинуть(ИндексТекущейСтроки, Сдвиг);
	Элементы.Состав.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСогласноПометкеУдаленияНедействительностиИАвтозаполнению()
	
	ТекстЗаголовка = "";
	
	Если Объект.ПометкаУдаления Тогда
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru = 'Помечена на удаление.'");
	КонецЕсли;
	
	Если Объект.Недействительна Тогда
		ТекстЗаголовка = ТекстЗаголовка + ?(ПустаяСтрока(ТекстЗаголовка), "", " ") + НСтр("ru = 'Недействительна.'");
	КонецЕсли;
	
	Если Объект.Автозаполнение Тогда
		ТекстЗаголовка = ТекстЗаголовка + ?(ПустаяСтрока(ТекстЗаголовка), "", " ") + НСтр("ru = 'Заполняется автоматически.'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстЗаголовка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + ?(ПустаяСтрока(ТекстЗаголовка), "", " ") + НСтр("ru = 'Состав участников не редактируется.'");
	КонецЕсли;
	Элементы.ДекорацияПомеченаНаУдалениеНедействительна.Заголовок = ТекстЗаголовка;
	
	ДоступностьИзменения = Не Объект.ПометкаУдаления 
		И Не Объект.Недействительна
		И Не Объект.Автозаполнение;
	
	Элементы.Состав.Доступность = ДоступностьИзменения Или Объект.Автозаполнение;
	Элементы.Состав.ТолькоПросмотр = Не ДоступностьИзменения Или Объект.Автозаполнение;
	
	Элементы.СоставПодобрать.Доступность = ДоступностьИзменения;
	Элементы.СоставКонтекстноеМенюПодобратьПользователей.Доступность = ДоступностьИзменения;
	Элементы.СоставПереместитьВверх.Доступность = ДоступностьИзменения;
	Элементы.СоставПереместитьВниз.Доступность = ДоступностьИзменения;
	Элементы.СоставСортироватьПоВозрастанию.Доступность = ДоступностьИзменения;
	Элементы.СоставСортироватьПоУбыванию.Доступность = ДоступностьИзменения;
	Элементы.СоставКонтекстноеМенюПереместитьВверх.Доступность = ДоступностьИзменения;
	Элементы.СоставКонтекстноеМенюПереместитьВниз.Доступность = ДоступностьИзменения;
	
	Элементы.Заполнить.Видимость = Объект.Автозаполнение;
	Элементы.Заполнить.Доступность = Объект.Автозаполнение
		И Не Объект.Недействительна
		И Не Объект.ПометкаУдаления;

	Элементы.АлгоритмАвтозаполнения.Доступность = Объект.Автозаполнение;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоАлгоритму()
	
	Результат = РаботаСРабочимиГруппами.УчастникиРабочейГруппыПоАлгоритму(
		Объект.АлгоритмАвтозаполнения);
		
	Если ЗначениеЗаполнено(Результат.Ошибка) Тогда
		ОбщегоНазначения.СообщитьПользователю(Результат.Ошибка,
			Объект.Ссылка,
			"Объект.АлгоритмАвтозаполнения");
		Возврат;
	КонецЕсли;
	
	Объект.Состав.Очистить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(Объект.Состав,
		Результат.Участники,
		"Участник");
	
	ЗаполнитьСведенияОСотрудниках();
	
КонецПроцедуры

#КонецОбласти
