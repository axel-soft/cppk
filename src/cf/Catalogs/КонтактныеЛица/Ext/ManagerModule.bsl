#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

КонецПроцедуры

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
КонецПроцедуры

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область ОбновлениеАдреснойКниги

// Конструктор параметров обновления адресной книги.
//
// Возвращаемое значение:
//	Структура:
//		* ОбновитьДанныеОбъекта - Булево - Признак обновления данных по объекту.
//		* ОбновитьДанныеОтображенияОбъекта - Булево - Признак обновления данных отображения.
//		* ОбновитьСловаПоискаПоОбъекту - Булево - Признак обновления слов поиска по объекту.
//		* ОбновитьДоступностьВПоискеПоОбъекту - Булево - Признак обновления доступности в результатах поиска.
//		* КонтрагентыДляОбновленияСловПоиска - Массив Из СправочникСсылка.Контрагенты - Список контрагентов для обновления слов поиска.
//
Функция ПараметрыОбновленияАдреснойКниги() Экспорт
	
	ПараметрыОбновленияАдреснойКниги = Новый Структура;
	ПараметрыОбновленияАдреснойКниги.Вставить("ОбновитьДанныеОбъекта", Ложь);
	ПараметрыОбновленияАдреснойКниги.Вставить("ОбновитьДанныеОтображенияОбъекта", Ложь);
	ПараметрыОбновленияАдреснойКниги.Вставить("ОбновитьСловаПоискаПоОбъекту", Ложь);
	ПараметрыОбновленияАдреснойКниги.Вставить("ОбновитьДоступностьВПоискеПоОбъекту", Ложь);
	ПараметрыОбновленияАдреснойКниги.Вставить("КонтрагентыДляОбновленияСловПоиска", Новый Массив);
	
	Возврат ПараметрыОбновленияАдреснойКниги;
	
КонецФункции

// Устанавливает значения параметров обновления адресной книги по данным объекта.
//
// Параметры:
//	Объект - СправочникОбъект.КонтактныеЛица - Объект, для которго необходимо определить параметры обновления.
//
// Возвращаемое значение:
//	Структура: см. ПараметрыОбновленияАдреснойКниги.
//
Функция ЗначенияПараметровОбновленияАдреснойКнигиПоОбъекту(Объект) Экспорт
	
	ПараметрыОбновленияАдреснойКниги = ПараметрыОбновленияАдреснойКниги();
		
	Если Не РаботаСАдреснойКнигой.ТребуетсяОбновлениеАдреснойКниги(Объект) Тогда
		Возврат ПараметрыОбновленияАдреснойКниги; 
	КонецЕсли;
	
	Если Объект.ЭтоНовый() Тогда
		ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОбъекта = Истина;
		ПараметрыОбновленияАдреснойКниги.ОбновитьСловаПоискаПоОбъекту = Истина;
		ПараметрыОбновленияАдреснойКниги.КонтрагентыДляОбновленияСловПоиска.Добавить(Объект.Владелец);
	Иначе
		ПредыдущиеЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.Ссылка, "Наименование, Владелец, ПометкаУдаления, КонтактнаяИнформация, НеДействует");

		Если ПредыдущиеЗначенияРеквизитов.Владелец <> Объект.Владелец Тогда
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОбъекта = Истина;
			ПараметрыОбновленияАдреснойКниги.КонтрагентыДляОбновленияСловПоиска.Добавить(
				ПредыдущиеЗначенияРеквизитов.Владелец);
			ПараметрыОбновленияАдреснойКниги.КонтрагентыДляОбновленияСловПоиска.Добавить(
				Объект.Владелец);
		КонецЕсли;
		
		Если ПредыдущиеЗначенияРеквизитов.ПометкаУдаления <> Объект.ПометкаУдаления Тогда
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОбъекта = Истина;
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОтображенияОбъекта = Истина;
			ПараметрыОбновленияАдреснойКниги.ОбновитьДоступностьВПоискеПоОбъекту = Истина;
		КонецЕсли;
		
		Если ПредыдущиеЗначенияРеквизитов.Наименование <> Объект.Наименование Тогда
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОбъекта = Истина;
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОтображенияОбъекта = Истина;
			ПараметрыОбновленияАдреснойКниги.ОбновитьСловаПоискаПоОбъекту = Истина;
		КонецЕсли;
		
		Если ПредыдущиеЗначенияРеквизитов.НеДействует <> Объект.НеДействует Тогда
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОбъекта = Истина;
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОтображенияОбъекта = Истина;
			ПараметрыОбновленияАдреснойКниги.ОбновитьДоступностьВПоискеПоОбъекту = Истина;
		КонецЕсли;
		
		Если Не ПараметрыОбновленияАдреснойКниги.ОбновитьСловаПоискаПоОбъекту Тогда
			СтараяКонтактнаяИнформация =
				ПредыдущиеЗначенияРеквизитов.КонтактнаяИнформация.Выгрузить().ВыгрузитьКолонку("Представление");
			НоваяКонтактнаяИнформация =
				Объект.КонтактнаяИнформация.Выгрузить().ВыгрузитьКолонку("Представление");
			
			Для Каждого Элемент ИЗ НоваяКонтактнаяИнформация Цикл
				Если СтараяКонтактнаяИнформация.Найти(Элемент) = Неопределено Тогда
					ПараметрыОбновленияАдреснойКниги.ОбновитьСловаПоискаПоОбъекту = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ПараметрыОбновленияАдреснойКниги.ОбновитьСловаПоискаПоОбъекту Тогда
				Для Каждого Элемент ИЗ СтараяКонтактнаяИнформация Цикл
					Если НоваяКонтактнаяИнформация.Найти(Элемент) = Неопределено Тогда
						ПараметрыОбновленияАдреснойКниги.ОбновитьСловаПоискаПоОбъекту = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыОбновленияАдреснойКниги;

КонецФункции

// Обновляет адресную книгу, согласно установленным параметрам.
//
// Параметры:
//	Объект - СправочникОбъект.КонтактныеЛица - Объект, по данным которого необходимо обновить адресной книги.
//	ПараметрыОбновления - Структура Из КлючИЗначение - см. ПараметрыОбновленияАдреснойКниги.
//
Процедура ОбновитьАдреснуюКнигу(Объект, ПараметрыОбновления) Экспорт
	
	Если ПараметрыОбновления.ОбновитьДанныеОбъекта Тогда
		Справочники.АдреснаяКнига.ОбновитьДанныеОбъекта(
			Объект.Ссылка, Объект.Владелец, Справочники.АдреснаяКнига.Контрагенты, Объект.Ссылка);
	КонецЕсли;
	
	Если ПараметрыОбновления.ОбновитьДанныеОтображенияОбъекта Тогда
		Справочники.АдреснаяКнига.ОбновитьДанныеОтображенияПодчиненногоОбъекта(Объект.Ссылка);
	КонецЕсли;
	
	Если ПараметрыОбновления.ОбновитьСловаПоискаПоОбъекту Тогда
		РегистрыСведений.ОбъектыПоискаВАдреснойКниге.ОбновитьСловаПоискаПоКонтактномуЛицу(Объект);
	КонецЕсли;
	
	Если ПараметрыОбновления.КонтрагентыДляОбновленияСловПоиска.Количество() > 0 Тогда
		Для Каждого Контрагент Из ПараметрыОбновления.КонтрагентыДляОбновленияСловПоиска Цикл
			РегистрыСведений.ОбъектыПоискаВАдреснойКниге.ОбновитьСловаПоискаПоКонтрагенту(Контрагент);
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыОбновления.ОбновитьДоступностьВПоискеПоОбъекту Тогда
		РегистрыСведений.ОбъектыПоискаВАдреснойКниге.ОбновитьДоступностьВПоиске(Объект);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Текст = Параметры.СтрокаПоиска;
	СловаПоиска = ОбщегоНазначенияДокументооборот.СловаПоиска(Текст);
	ДанныеВыбора = Новый СписокЗначений;
	Запрос = Новый Запрос;
	
	ТекстОтбора = "";
	Если Параметры.Отбор.Свойство("Владелец")
		И ЗначениеЗаполнено(Параметры.Отбор.Владелец) Тогда
			ТекстОтбора = " И Владелец = &Владелец";
			Запрос.УстановитьПараметр("Владелец", Параметры.Отбор.Владелец);
	КонецЕсли;
		
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 50
	|	КонтактныеЛица.Ссылка,
	|	КонтактныеЛица.Должность,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(КонтактныеЛица.Владелец) КАК Контрагент,
	|	КонтактныеЛица.Представление КАК КонтактноеЛицо
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|ГДЕ
	|	КонтактныеЛица.ПометкаУдаления = ЛОЖЬ
	|	И КонтактныеЛица.Наименование ПОДОБНО &Текст
	|	И НЕ КонтактныеЛица.НеДействует" + ТекстОтбора;
	
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПредставлениеФорматированнаяСтрока = ОбщегоНазначенияДокументооборот.ФорматированныйРезультатПоиска(
			Выборка.КонтактноеЛицо,
			СловаПоиска);
		
		Если ЗначениеЗаполнено(Выборка.Контрагент)
			И ЗначениеЗаполнено(Выборка.Должность) Тогда
			
			ДобавкаТекста = СтрШаблон(НСтр("ru = ', %1 (%2)'"),
				Выборка.Должность,
				Выборка.Контрагент);
				
			ПредставлениеФорматированнаяСтрока = Новый ФорматированнаяСтрока(
				ПредставлениеФорматированнаяСтрока,
				Новый ФорматированнаяСтрока(ДобавкаТекста,
					, WebЦвета.Серый)
				);
				
			ДанныеВыбора.Добавить(Выборка.Ссылка, ПредставлениеФорматированнаяСтрока);
				
		ИначеЕсли ЗначениеЗаполнено(Выборка.Контрагент) Тогда
			
			ДобавкаТекста = СтрШаблон(НСтр("ru = ' (%1)'"),
				Выборка.Контрагент);
			
			ПредставлениеФорматированнаяСтрока = Новый ФорматированнаяСтрока(
				ПредставлениеФорматированнаяСтрока,
				Новый ФорматированнаяСтрока(ДобавкаТекста,
					, WebЦвета.Серый)
				);
				
			ДанныеВыбора.Добавить(Выборка.Ссылка, ПредставлениеФорматированнаяСтрока);
			
		Иначе
			ДанныеВыбора.Добавить(Выборка.Ссылка, ПредставлениеФорматированнаяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("Наименование");
	Поля.Добавить("НеДействует");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	Если Данные.НеДействует Тогда
		СтандартнаяОбработка = Ложь;
		Представление = СтрШаблон(НСтр("ru = '%1 (не действует)'"),
			Данные.Наименование);
	КонецЕсли;
	
КонецПроцедуры

// Вернет Истина, у этого объекта метаданных есть функция ПолучитьАдресФото
Функция ЕстьФункцияПолученияФото() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Прочитать фото и вернуть адрес (навигационную ссылку)
// Параметры:
//  Ссылка - ссылка на справочник, для которого надо показать фото
//  УникальныйИдентификатор - уникальный идентификатор формы, откуда идет вызов
//  ЕстьКартинка - возвращаемое значение - Булево - Истина, если в объекте есть картинка
//
// Возвращаемое значение:
//   Строка - навигационная ссылка - или "", если нет картинки
Функция ПолучитьАдресФото(Ссылка, УникальныйИдентификатор, ЕстьКартинка) Экспорт
	
	АдресКартинки = "";
	
	ФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ФизЛицо");
	
	Если ЗначениеЗаполнено(ФизЛицо) Тогда
		
		Если УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() 
			И Не ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(ФизЛицо).Чтение Тогда
			Возврат АдресКартинки;
		КонецЕсли;	
		
		АдресКартинки = РаботаСФотографиями.ПолучитьНавигационнуюСсылкуРеквизита(ФизЛицо, УникальныйИдентификатор, ЕстьКартинка);
		
	КонецЕсли;
	
	Возврат АдресКартинки;
	
КонецФункции

// Возвращает двоичные данные фото контактного лица
//
Функция ПолучитьДвоичныеДанныеФото(КонтактноеЛицо) Экспорт
	
	ФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтактноеЛицо, "ФизЛицо");
	
	Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей()
		И Не ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(ФизЛицо).Чтение Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДвоичныеДанные = РаботаСФотографиями.ПолучитьДвоичныеДанныеРеквизита(ФизЛицо, "ФайлФотографии");
	Если Не ЗначениеЗаполнено(ДвоичныеДанные) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДвоичныеДанные;
	
КонецФункции

#КонецОбласти

#КонецЕсли