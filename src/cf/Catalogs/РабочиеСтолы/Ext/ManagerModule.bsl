#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает данные вариант компоновки.
// 
// Параметры:
// 	ВариантКомпновкиРабочегоСтола - Строка.
// 	
// Возвращаемое значение:
//  Структура - Данные варианта компоновки:
//   * Имя - Строка.
//   * Представление - Строка.
//   * ИмяМакета - Строка.
//   * КоличествоКолонок - Число.
//   * КоличествоСтрок - Число.
// 	
Функция ДанныеВариантаКомпоновки(Знач ВариантКомпновкиРабочегоСтола) Экспорт
	
	Если Не ЗначениеЗаполнено(ВариантКомпновкиРабочегоСтола) Тогда
		ВариантКомпновкиРабочегоСтола = ТекущийВариантКомпоновкиРабочегоСтола();
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ВариантыКомпоновкиРабочегоСтола = ОбщегоНазначенияДокументооборот.ТаблицаЗначенийИзМакета(
			ПолучитьМакет("ПоставляемыеДанные_ВариантыКомпоновкиРабочегоСтола_Мобильный"));
	Иначе
		ВариантыКомпоновкиРабочегоСтола = ОбщегоНазначенияДокументооборот.ТаблицаЗначенийИзМакета(
			ПолучитьМакет("ПоставляемыеДанные_ВариантыКомпоновкиРабочегоСтола"));
	КонецЕсли;
	
	СтрокаВариантаКомпоновки = ВариантыКомпоновкиРабочегоСтола.Найти(
		ВариантКомпновкиРабочегоСтола,
		"Имя");
	Если СтрокаВариантаКомпоновки = Неопределено Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Не найдены данные вариант компоновки рабочего стола ""%1"".'"),
			ВариантКомпновкиРабочегоСтола);
	КонецЕсли;
	
	ДанныеВариантаКомпоновки = Новый Структура;
	ДанныеВариантаКомпоновки.Вставить("Имя", СтрокаВариантаКомпоновки.Имя);
	ДанныеВариантаКомпоновки.Вставить("Представление", СтрокаВариантаКомпоновки.Представление);
	ДанныеВариантаКомпоновки.Вставить("ИмяМакета", СтрокаВариантаКомпоновки.ИмяМакета);
	ДанныеВариантаКомпоновки.Вставить("КоличествоКолонок", Число(СтрокаВариантаКомпоновки.КоличествоКолонок));
	ДанныеВариантаКомпоновки.Вставить("КоличествоСтрок", Число(СтрокаВариантаКомпоновки.КоличествоСтрок));
	ДанныеВариантаКомпоновки.Вставить("ТаблицаКомпоновки", Неопределено);
	
	Возврат ДанныеВариантаКомпоновки;
	
КонецФункции

// Получает данные рабочего стола.
// 
// Параметры:
//  РабочийСтол - СправочникСсылка.РабочиеСтолы.
// 
// Возвращаемое значение:
//  Структура - Данные рабочего стола. См. Справочнники.РабочиеСтолы.НовыйДанныеРабочегоСтола().
// 
Функция ДанныеРабочегоСтола(РабочийСтол) Экспорт
	
	Если Не ЗначениеЗаполнено(РабочийСтол) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Не найден поставляемый рабочий стол %1.'"),
			РабочийСтол);
	КонецЕсли; 
	
	РеквизитыРабочегоСтола = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		РабочийСтол,
		 "Наименование, НаименованиеЯзык1, Условие, ИмяПредопределенныхДанных");
	
	ДанныеВиджетов = Новый Соответствие;
	
	ДанныеРабочегоСтола = НовыйДанныеРабочегоСтола();
	ДанныеРабочегоСтола.Имя =
		?(ЗначениеЗаполнено(РеквизитыРабочегоСтола.ИмяПредопределенныхДанных),
			РеквизитыРабочегоСтола.ИмяПредопределенныхДанных,
			СтрЗаменить(Строка(РабочийСтол.УникальныйИдентификатор()), "-", ""));
	ДанныеРабочегоСтола.Наименование = РеквизитыРабочегоСтола.Наименование;
	ДанныеРабочегоСтола.Условие = РеквизитыРабочегоСтола.Условие;
	ДанныеРабочегоСтола.Элементы = ЭлементыПоставляемогоРабочегоСтола(РабочийСтол, ДанныеВиджетов);
	
	КонфигурацияИспользуетТолькоОдинЯзык = МультиязычностьПовтИсп.КонфигурацияИспользуетТолькоОдинЯзык(Ложь);
	Если Не КонфигурацияИспользуетТолькоОдинЯзык И Не МультиязычностьСервер.ЭтоОсновнойЯзык() Тогда
		ДанныеРабочегоСтола.Наименование = РеквизитыРабочегоСтола.НаименованиеЯзык1;
	КонецЕсли;
	
	ИнициализироватьРабочийСтол(ДанныеРабочегоСтола, ДанныеВиджетов);
	
	Возврат ДанныеРабочегоСтола;
	
КонецФункции

// Заполняет поставляемые данные.
// 
Процедура ЗаполнитьПоставляемыеДанные() Экспорт
	
	// Рабочий стол руководителя.
	РабочийСтолОбъект = РабочийСтолРуководителя.ПолучитьОбъект();
	РабочийСтолОбъект.Наименование = НСтр("ru = 'Рабочий стол руководителя'");
	РабочийСтолОбъект.Условие = Справочники.АлгоритмыПроверки.ЭтоРуководитель;
	
	Если Не ЗначениеЗаполнено(РабочийСтолОбъект.РеквизитДопУпорядочивания) Тогда
		РабочийСтолОбъект.РеквизитДопУпорядочивания = 1;
	КонецЕсли; 
	
	РабочийСтолОбъект.Схема.Очистить();
	
	СтрокаСхемы = РабочийСтолОбъект.Схема.Добавить();
	СтрокаСхемы.Виджет = Справочники.Виджеты.ЗадачиМнеШирокий;
	СтрокаСхемы.Позиция = Перечисления.ПозицииНаРабочемСтоле.Виджет1_1;
	
	СтрокаСхемы = РабочийСтолОбъект.Схема.Добавить();
	СтрокаСхемы.Виджет = Справочники.Виджеты.ЗадачиПодчиненныхШирокий;
	СтрокаСхемы.Позиция = Перечисления.ПозицииНаРабочемСтоле.Виджет1_3;
	
	СтрокаСхемы = РабочийСтолОбъект.Схема.Добавить();
	СтрокаСхемы.Виджет = Справочники.Виджеты.БлокНавигацииРуководителя;
	СтрокаСхемы.Позиция = Перечисления.ПозицииНаРабочемСтоле.БлокНавигации;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(РабочийСтолОбъект);
	
	// Основной рабочий стол.
	РабочийСтолОбъект = ОсновнойРабочийСтол.ПолучитьОбъект();
	РабочийСтолОбъект.Наименование = НСтр("ru = 'Основной рабочий стол'");
	РабочийСтолОбъект.Условие = Справочники.АлгоритмыПроверки.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(РабочийСтолОбъект.РеквизитДопУпорядочивания) Тогда
		РабочийСтолОбъект.РеквизитДопУпорядочивания = 2;
	КонецЕсли;
	
	РабочийСтолОбъект.Схема.Очистить();
	
	СтрокаСхемы = РабочийСтолОбъект.Схема.Добавить();
	СтрокаСхемы.Виджет = Справочники.Виджеты.ЗадачиМне;
	СтрокаСхемы.Позиция = Перечисления.ПозицииНаРабочемСтоле.Виджет1_1;
	
	СтрокаСхемы = РабочийСтолОбъект.Схема.Добавить();
	СтрокаСхемы.Виджет = Справочники.Виджеты.ЗадачиОтМеня;
	СтрокаСхемы.Позиция = Перечисления.ПозицииНаРабочемСтоле.Виджет1_2;
	
	СтрокаСхемы = РабочийСтолОбъект.Схема.Добавить();
	СтрокаСхемы.Виджет = Справочники.Виджеты.ЕжедневныеОтчеты;
	СтрокаСхемы.Позиция = Перечисления.ПозицииНаРабочемСтоле.Виджет1_3;
	
	СтрокаСхемы = РабочийСтолОбъект.Схема.Добавить();
	СтрокаСхемы.Виджет = Справочники.Виджеты.Почта;
	СтрокаСхемы.Позиция = Перечисления.ПозицииНаРабочемСтоле.Виджет2_1;
	
	СтрокаСхемы = РабочийСтолОбъект.Схема.Добавить();
	СтрокаСхемы.Виджет = Справочники.Виджеты.Контроль;
	СтрокаСхемы.Позиция = Перечисления.ПозицииНаРабочемСтоле.Виджет2_2;
	
	СтрокаСхемы = РабочийСтолОбъект.Схема.Добавить();
	СтрокаСхемы.Виджет = Справочники.Виджеты.МоиДокументы;
	СтрокаСхемы.Позиция = Перечисления.ПозицииНаРабочемСтоле.Виджет2_3;
	
	СтрокаСхемы = РабочийСтолОбъект.Схема.Добавить();
	СтрокаСхемы.Виджет = Справочники.Виджеты.КалендарьИлиМероприятия;
	СтрокаСхемы.Позиция = Перечисления.ПозицииНаРабочемСтоле.Виджет3_1;
	
	СтрокаСхемы = РабочийСтолОбъект.Схема.Добавить();
	СтрокаСхемы.Виджет = Справочники.Виджеты.Отсутствия;
	СтрокаСхемы.Позиция = Перечисления.ПозицииНаРабочемСтоле.Виджет3_2;
	
	СтрокаСхемы = РабочийСтолОбъект.Схема.Добавить();
	СтрокаСхемы.Виджет = Справочники.Виджеты.Форум;
	СтрокаСхемы.Позиция = Перечисления.ПозицииНаРабочемСтоле.Виджет4_1;
	
	СтрокаСхемы = РабочийСтолОбъект.Схема.Добавить();
	СтрокаСхемы.Виджет = Справочники.Виджеты.ЯРедактирую;
	СтрокаСхемы.Позиция = Перечисления.ПозицииНаРабочемСтоле.Виджет4_2;
	
	СтрокаСхемы = РабочийСтолОбъект.Схема.Добавить();
	СтрокаСхемы.Виджет = Справочники.Виджеты.БлокНавигацииСотрудника;
	СтрокаСхемы.Позиция = Перечисления.ПозицииНаРабочемСтоле.БлокНавигации;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(РабочийСтолОбъект);
	
	// Рабочий стол руководителя (по видам задач).
	РабочийСтолОбъект = РабочийСтолРуководителяПоВидамЗадач.ПолучитьОбъект();
	РабочийСтолОбъект.Наименование = НСтр("ru = 'Рабочий стол руководителя (по видам задач)'"); 
	РабочийСтолОбъект.Условие = Справочники.АлгоритмыПроверки.ЭтоРуководитель;
	
	Если Не ЗначениеЗаполнено(РабочийСтолОбъект.РеквизитДопУпорядочивания) Тогда
		РабочийСтолОбъект.РеквизитДопУпорядочивания = 3;
	КонецЕсли; 
	
	РабочийСтолОбъект.Схема.Очистить();
	
	СтрокаСхемы = РабочийСтолОбъект.Схема.Добавить();
	СтрокаСхемы.Виджет = Справочники.Виджеты.ЗадачиМнеШирокийПоВидамЗадач;
	СтрокаСхемы.Позиция = Перечисления.ПозицииНаРабочемСтоле.Виджет1_1;
	
	СтрокаСхемы = РабочийСтолОбъект.Схема.Добавить();
	СтрокаСхемы.Виджет = Справочники.Виджеты.ЗадачиПодчиненныхШирокий;
	СтрокаСхемы.Позиция = Перечисления.ПозицииНаРабочемСтоле.Виджет1_3;
	
	СтрокаСхемы = РабочийСтолОбъект.Схема.Добавить();
	СтрокаСхемы.Виджет = Справочники.Виджеты.БлокНавигацииРуководителя;
	СтрокаСхемы.Позиция = Перечисления.ПозицииНаРабочемСтоле.БлокНавигации;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(РабочийСтолОбъект);
	
КонецПроцедуры

// Формирует список настраиваемых свойств элемента рабочего стола.
// 
// Возвращаемое значение:
//  Массив из Строка - Настраиваемые свойства элемента рабочего стола.
//
Функция НастраиваемыеСвойстваЭлементаРабочегоСтола() Экспорт
	
	НастраиваемыеСвойстваЭлементаРабочегоСтола = Новый Массив;
	НастраиваемыеСвойстваЭлементаРабочегоСтола.Добавить("Группировка");
	НастраиваемыеСвойстваЭлементаРабочегоСтола.Добавить("РастягиватьПоГоризонтали");
	НастраиваемыеСвойстваЭлементаРабочегоСтола.Добавить("РастягиватьПоВертикали");
	НастраиваемыеСвойстваЭлементаРабочегоСтола.Добавить("ВертикальныйИнтервал");
	НастраиваемыеСвойстваЭлементаРабочегоСтола.Добавить("ГоризонтальныйИнтервал");
	НастраиваемыеСвойстваЭлементаРабочегоСтола.Добавить("Ширина");
	НастраиваемыеСвойстваЭлементаРабочегоСтола.Добавить("Высота");
	НастраиваемыеСвойстваЭлементаРабочегоСтола.Добавить("ГоризонтальноеПоложениеВГруппе");
	
	Возврат НастраиваемыеСвойстваЭлементаРабочегоСтола;
	
КонецФункции

// Формирует пустую схему рабочего стола.
// 	 
// Возвращаемое значение:
//  Структура - Схема рабочего стола.
//   * Виджет1_1 - Строка.
//   * Виджет1_2 - Строка.
//   * Виджет1_3 - Строка.
//   * Виджет2_1 - Строка.
//   * Виджет2_2 - Строка.
//   * Виджет2_3 - Строка.
//   * Виджет3_1 - Строка.
//   * Виджет3_2 - Строка.
//   * Виджет3_3 - Строка.
//   * Виджет4_1 - Строка.
//   * Виджет4_2 - Строка.
//   * Виджет4_3 - Строка.
//   * БлокНавигации - Строка.
// 	
Функция НоваяСхемаРабочегоСтола() Экспорт
	
	СхемаРабочегоСтола = Новый Структура(
		"Виджет1_1, Виджет1_2, Виджет1_3,
		|Виджет2_1, Виджет2_2, Виджет2_3,
		|Виджет3_1, Виджет3_2, Виджет3_3,
		|Виджет4_1, Виджет4_2, Виджет4_3,
		|БлокНавигации");
	СхемаРабочегоСтола.Виджет1_1 = "";
	СхемаРабочегоСтола.Виджет1_2 = "";
	СхемаРабочегоСтола.Виджет1_3 = "";
	СхемаРабочегоСтола.Виджет2_1 = "";
	СхемаРабочегоСтола.Виджет2_2 = "";
	СхемаРабочегоСтола.Виджет2_3 = "";
	СхемаРабочегоСтола.Виджет3_1 = "";
	СхемаРабочегоСтола.Виджет3_2 = "";
	СхемаРабочегоСтола.Виджет3_3 = "";
	СхемаРабочегоСтола.Виджет4_1 = "";
	СхемаРабочегоСтола.Виджет4_2 = "";
	СхемаРабочегоСтола.Виджет4_3 = "";
	СхемаРабочегоСтола.БлокНавигации = "";
	
	Возврат СхемаРабочегоСтола;
	
КонецФункции

// Возвращает текущий рабочий стол, подходящий текущему пользователю по умолчанию.
// 
// Возвращаемое значение:
//  СправочникСсылка.РабочиеСтолы - Текущий рабочий стол.
//
Функция РабочийСтолПоУмолчанию() Экспорт
	
	РабочийСтолПоУмолчанию = Неопределено;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РабочиеСтолы.Ссылка,
		|	РабочиеСтолы.Условие
		|ИЗ
		|	Справочник.РабочиеСтолы КАК РабочиеСтолы
		|ГДЕ
		|	РабочиеСтолы.ПометкаУдаления = ЛОЖЬ
		|УПОРЯДОЧИТЬ ПО
		|	РабочиеСтолы.РеквизитДопУпорядочивания");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		РабочийСтолДоступен = РаботаСРабочимСтолом.ПроверитьУсловие(Выборка.Условие);
		Если РабочийСтолДоступен Тогда
			РабочийСтолПоУмолчанию = Выборка.Ссылка;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(РабочийСтолПоУмолчанию) Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось определить рабочий стол по умолчанию.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат РабочийСтолПоУмолчанию;
	
КонецФункции

// Формирует список вариантов компоновки.
//
// Возвращаемое значение:
//  СписокЗначений - Варианты компоновки.
// 	
Функция ВариантыКомпоновки() Экспорт
	
	ВариантыКомпоновки = Новый СписокЗначений;
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ВариантыКомпоновкиРабочегоСтола = ОбщегоНазначенияДокументооборот.ТаблицаЗначенийИзМакета(
			ПолучитьМакет("ПоставляемыеДанные_ВариантыКомпоновкиРабочегоСтола_Мобильный"));
	Иначе
		ВариантыКомпоновкиРабочегоСтола = ОбщегоНазначенияДокументооборот.ТаблицаЗначенийИзМакета(
			ПолучитьМакет("ПоставляемыеДанные_ВариантыКомпоновкиРабочегоСтола"));
	КонецЕсли;
	
	Для Каждого ОчереднойВариантКомпоновки Из ВариантыКомпоновкиРабочегоСтола Цикл
		
		ВариантыКомпоновки.Добавить(
			ОчереднойВариантКомпоновки.Имя,
			ОчереднойВариантКомпоновки.Представление);
		
	КонецЦикла;
	
	Возврат ВариантыКомпоновки;
	
КонецФункции

// Формирует список доступных данных.
// 
// Возвращаемое значение:
//  СписокЗначений - Список доступных данных.
//
Функция ДоступныеДанные() Экспорт
	
	ДоступныеДанные = Новый СписокЗначений;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РабочиеСтолы.Ссылка,
		|	РабочиеСтолы.Представление
		|ИЗ
		|	Справочник.РабочиеСтолы КАК РабочиеСтолы
		|ГДЕ
		|	РабочиеСтолы.ПометкаУдаления = ЛОЖЬ
		|УПОРЯДОЧИТЬ ПО
		|	РабочиеСтолы.РеквизитДопУпорядочивания");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДоступныеДанные.Добавить(Выборка.Ссылка, Выборка.Представление);
	КонецЦикла;
	
	Возврат ДоступныеДанные;
	
КонецФункции


// Формирует схему рабочего стола.
// 
// Параметры:
// 	РабочийСтол - Строка.
// 	 
// Возвращаемое значение:
//  Структура - Схема рабочего стола. См. Справочники.РабочиеСтолы.НоваяСхемаРабочегоСтола().
// 	
Функция СхемаРабочегоСтола(РабочийСтол, ДанныеВариантаКомпоновки = Неопределено, ДанныеВиджетов = Неопределено) Экспорт
	
	СхемаРабочегоСтола = НоваяСхемаРабочегоСтола();
	Если Не ЗначениеЗаполнено(РабочийСтол) Тогда
		Возврат СхемаРабочегоСтола;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РабочиеСтолыСхема.Виджет,
		|	РабочиеСтолыСхема.Позиция
		|ИЗ
		|	Справочник.РабочиеСтолы.Схема КАК РабочиеСтолыСхема
		|ГДЕ
		|	РабочиеСтолыСхема.Ссылка = &РабочийСтол");
	
	Запрос.УстановитьПараметр("РабочийСтол", РабочийСтол);
	
	ТаблицаСхемы = Запрос.Выполнить().Выгрузить();
	
	ВиджетыСхемы = ТаблицаСхемы.ВыгрузитьКолонку("Виджет");
	ДанныеВиджетовСхемы = Справочники.Виджеты.ДанныеВиджетов(ВиджетыСхемы);
	
	Если ДанныеВиджетов = Неопределено Тогда
		ДанныеВиджетов = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ДанныеВиджетовСхемы Цикл
		ДанныеВиджетов[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
	КонецЦикла;
	
	Для Каждого СтрокаСхемы Из ТаблицаСхемы Цикл
		
		// Недоступные виджеты не отображаем в схеме.
		ДанныеВиджета = ДанныеВиджетов[СтрокаСхемы.Виджет];
		Если ДанныеВиджета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СвойствоСхемы = Перечисления.ПозицииНаРабочемСтоле.СвойствоСхемы(СтрокаСхемы.Позиция);
		СхемаРабочегоСтола[СвойствоСхемы] = СтрокаСхемы.Виджет;
		
	КонецЦикла;
	
	Если ДанныеВариантаКомпоновки = Неопределено Тогда
		ВариантКомпоновки = ТекущийВариантКомпоновкиРабочегоСтола();
		ДанныеВариантаКомпоновки = ДанныеВариантаКомпоновки(ВариантКомпоновки);
	КонецЕсли;
	
	НомерЦикла = 0;
	ЕстьИзменения = Истина;
	Пока ЕстьИзменения Цикл
		
		Если НомерЦикла > 10000 Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Обнаружено зацикливание'"));
		КонецЕсли;
		
		ЕстьИзменения = Ложь;
		
		Пока СдвинутьСтрокиВлево(СхемаРабочегоСтола, ДанныеВариантаКомпоновки) Цикл
			
			Если НомерЦикла > 10000 Тогда
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Обнаружено зацикливание'"));
			КонецЕсли;
			
			ЕстьИзменения = Истина;
			
			НомерЦикла = НомерЦикла + 1;
			
		КонецЦикла;
		
		Пока СдвинутьКолонкиВверх(СхемаРабочегоСтола, ДанныеВариантаКомпоновки) Цикл
			
			Если НомерЦикла > 10000 Тогда
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Обнаружено зацикливание'"));
			КонецЕсли;
			
			ЕстьИзменения = Истина;
			
			НомерЦикла = НомерЦикла + 1;
			
		КонецЦикла;
		
		НомерЦикла = НомерЦикла + 1;
		
	КонецЦикла; 
	
	Возврат СхемаРабочегоСтола;
	
КонецФункции

// Формирует таблицу элементов рабочего стола.
Функция НовыйЭлементыРабочегоСтола() Экспорт
	
	// Типы у колонок не требуются.
	// Неопределено трактуется как не заданное значение.
	// Значение с типом трактуется как заданное значение явно.
	ЭлементыРабочегоСтола = Новый ТаблицаЗначений;
	ЭлементыРабочегоСтола.Колонки.Добавить("Имя");
	ЭлементыРабочегоСтола.Колонки.Добавить("Родитель");
	ЭлементыРабочегоСтола.Колонки.Добавить("Тип");
	ЭлементыРабочегоСтола.Колонки.Добавить("Группировка");
	ЭлементыРабочегоСтола.Колонки.Добавить("РастягиватьПоГоризонтали");
	ЭлементыРабочегоСтола.Колонки.Добавить("РастягиватьПоВертикали");
	ЭлементыРабочегоСтола.Колонки.Добавить("ВертикальныйИнтервал");
	ЭлементыРабочегоСтола.Колонки.Добавить("ГоризонтальныйИнтервал");
	ЭлементыРабочегоСтола.Колонки.Добавить("Ширина");
	ЭлементыРабочегоСтола.Колонки.Добавить("Высота");
	ЭлементыРабочегоСтола.Колонки.Добавить("Отступ");
	ЭлементыРабочегоСтола.Колонки.Добавить("МаксимальныйОтступ");
	ЭлементыРабочегоСтола.Колонки.Добавить("ГоризонтальноеПоложениеВГруппе");
	ЭлементыРабочегоСтола.Колонки.Добавить("ЦветВиджета");
	
	ЭлементыРабочегоСтола.Колонки.Добавить("Виджет");
	ЭлементыРабочегоСтола.Колонки.Добавить("ДанныеВиджета");
	ЭлементыРабочегоСтола.Колонки.Добавить("ЭлементФормы");
	
	Возврат ЭлементыРабочегоСтола;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает вариант компоновки рабочего стола.
// 
// Возвращаемое значение:
// 	Строка - Вариант компоновки рабочего стола.
//
Функция ТекущийВариантКомпоновкиРабочегоСтола()
	
	ВариантКомпоновкиРабочегоСтола = РегистрыСведений.НастройкиРабочихСтолов.ЗначениеНастройки(
		Пользователи.ТекущийПользователь(),
		Перечисления.НастройкиРабочегоСтола.ВариантКомпоновки);
	Если ЗначениеЗаполнено(ВариантКомпоновкиРабочегоСтола) Тогда
		Возврат ВариантКомпоновкиРабочегоСтола;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ВариантыКомпоновкиРабочегоСтола = ОбщегоНазначенияДокументооборот.ТаблицаЗначенийИзМакета(
			ПолучитьМакет("ПоставляемыеДанные_ВариантыКомпоновкиРабочегоСтола_Мобильный"));
	Иначе
		ВариантыКомпоновкиРабочегоСтола = ОбщегоНазначенияДокументооборот.ТаблицаЗначенийИзМакета(
			ПолучитьМакет("ПоставляемыеДанные_ВариантыКомпоновкиРабочегоСтола"));
	КонецЕсли;
		
	ИнформацияЭкрановКлиента = ПолучитьИнформациюЭкрановКлиента();
	ИнформацияОсновногоЭкрана = ИнформацияЭкрановКлиента[0];
	
	СоотношениеСторон = ИнформацияОсновногоЭкрана.Ширина / ИнформацияОсновногоЭкрана.Высота;
		
	Для Каждого ОчереднойВариантКомпоновки Из ВариантыКомпоновкиРабочегоСтола Цикл
		
		СоотношениеСторонОт = Число(ОчереднойВариантКомпоновки.От);
		Если ЗначениеЗаполнено(СоотношениеСторонОт) И СоотношениеСторон <= СоотношениеСторонОт Тогда
			Продолжить;
		КонецЕсли;
		
		СоотношениеСторонДо = Число(ОчереднойВариантКомпоновки.До);
		Если ЗначениеЗаполнено(СоотношениеСторонДо) И СоотношениеСторон > СоотношениеСторонДо Тогда
			Продолжить;
		КонецЕсли;
		
		ВариантКомпоновкиРабочегоСтола = ОчереднойВариантКомпоновки.Имя;
		Прервать;
		
	КонецЦикла;
		
	Если Не ЗначениеЗаполнено(ВариантКомпоновкиРабочегоСтола) Тогда
		ВызватьИсключение НСтр("ru = 'Подходящий вариант компновки рабочего стола не найден.'");
	КонецЕсли;
	
	Возврат ВариантКомпоновкиРабочегоСтола;
	
КонецФункции



// Заполняет данные виджетов.
Процедура ЗаполнитьДанныеВиджетов(ЭлементыРабочегоСтола, ДанныеВиджетов)
	
	// Заполним данные доступных виджетов, недоступные виджеты удалим.
	КоличествоЭлементов = ЭлементыРабочегоСтола.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		СтрокаЭлемента = ЭлементыРабочегоСтола[КоличествоЭлементов - Индекс];
		Если Не ЗначениеЗаполнено(СтрокаЭлемента.Виджет) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеВиджета = ДанныеВиджетов[СтрокаЭлемента.Виджет];
		Если ДанныеВиджета = Неопределено Тогда
			ДанныеВиджетов[СтрокаЭлемента.Виджет] =
				Справочники.Виджеты.ДанныеВиджета(СтрокаЭлемента.Виджет);
			ДанныеВиджета = ДанныеВиджетов[СтрокаЭлемента.Виджет];
		КонецЕсли;
		
		Если ДанныеВиджета = Неопределено Тогда
			ЭлементыРабочегоСтола.Удалить(СтрокаЭлемента);
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаЭлемента.ЦветВиджета) Тогда
			ДанныеВиджета.Цвет = СтрокаЭлемента.ЦветВиджета;
		КонецЕсли;
		
		Если ДанныеВиджета.Цвет = Перечисления.ЦветаВиджетов.Авто Тогда
			ДанныеВиджета.Цвет = Перечисления.ВидыВиджетов.АвтоЦвет(ДанныеВиджета.Вид);
		КонецЕсли;
		
		СтрокаЭлемента.ДанныеВиджета = ДанныеВиджета;
		
		Если ДанныеВиджета.ОсновнаяГруппа <> Неопределено Тогда
			ДанныеВиджета.ОсновнаяГруппа = Неопределено;
			ДанныеВиджета.СчетчикЭлементов = Новый Соответствие;
		КонецЕсли;
		
		Для Каждого ВложенныйВиджет Из ДанныеВиджета.ВложенныеВиджеты Цикл
			Если ВложенныйВиджет.ОсновнаяГруппа <> Неопределено Тогда
				ВложенныйВиджет.ОсновнаяГруппа = Неопределено;
				ВложенныйВиджет.СчетчикЭлементов = Новый Соответствие;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// Инициализируем цвет виджета "Авто".
	ИндексАвтоЦвета = -1;
	АвтоЦветаВиджетов = Новый Массив;
	АвтоЦветаВиджетов.Добавить(Перечисления.ЦветаВиджетов.Синий);
	АвтоЦветаВиджетов.Добавить(Перечисления.ЦветаВиджетов.Оранжевый);
	АвтоЦветаВиджетов.Добавить(Перечисления.ЦветаВиджетов.Зеленый);
	АвтоЦветаВиджетов.Добавить(Перечисления.ЦветаВиджетов.Желтый);
	АвтоЦветаВиджетов.Добавить(Перечисления.ЦветаВиджетов.Зеленый);
	АвтоЦветаВиджетов.Добавить(Перечисления.ЦветаВиджетов.Синий);
	АвтоЦветаВиджетов.Добавить(Перечисления.ЦветаВиджетов.Желтый);
	АвтоЦветаВиджетов.Добавить(Перечисления.ЦветаВиджетов.Оранжевый);
	АвтоЦветаВиджетов.Добавить(Перечисления.ЦветаВиджетов.Оранжевый);
	АвтоЦветаВиджетов.Добавить(Перечисления.ЦветаВиджетов.Зеленый);
	АвтоЦветаВиджетов.Добавить(Перечисления.ЦветаВиджетов.Желтый);
	АвтоЦветаВиджетов.Добавить(Перечисления.ЦветаВиджетов.Синий);
	Для Каждого СтрокаЭлемента Из ЭлементыРабочегоСтола Цикл
		
		Если СтрокаЭлемента.ДанныеВиджета = Неопределено
			Или СтрокаЭлемента.ДанныеВиджета.Цвет <> Перечисления.ЦветаВиджетов.Авто Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексАвтоЦвета = ИндексАвтоЦвета + 1;
		Если ИндексАвтоЦвета > АвтоЦветаВиджетов.ВГраница() Тогда
			ИндексАвтоЦвета = 0;
		КонецЕсли;
		СтрокаЭлемента.ДанныеВиджета.Цвет = АвтоЦветаВиджетов[ИндексАвтоЦвета];
		
	КонецЦикла;
	
	Если Не ПараметрыСеанса.ЭтоМобильныйКлиент Тогда
		// Цветовая схема.
		ЦветоваяСхемаРабочегоСтола = РаботаСРабочимСтолом.ЦветоваяСхемаРабочегоСтола();
		Если ЦветоваяСхемаРабочегоСтола = Перечисления.ЦветовыеСхемыРабочегоСтола.Серая Тогда
			
			Для Каждого СтрокаЭлемента Из ЭлементыРабочегоСтола Цикл
				
				Если СтрокаЭлемента.ДанныеВиджета = Неопределено
					Или СтрокаЭлемента.ДанныеВиджета.Цвет = Перечисления.ЦветаВиджетов.Белый Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаЭлемента.ДанныеВиджета.Цвет = Перечисления.ЦветаВиджетов.Серый;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;

	// Цвета вложенных виджетов.
	Для Каждого СтрокаЭлемента Из ЭлементыРабочегоСтола Цикл
		
		Если СтрокаЭлемента.ДанныеВиджета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ДанныеВложенногоВиджета Из СтрокаЭлемента.ДанныеВиджета.ВложенныеВиджеты Цикл
			
			Если ДанныеВложенногоВиджета.Цвет <> Перечисления.ЦветаВиджетов.Авто Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеВложенногоВиджета.Цвет = СтрокаЭлемента.ДанныеВиджета.Цвет;
			
		КонецЦикла;
		
	КонецЦикла;

	
КонецПроцедуры

// Определяет имя свойства виджета.
// 
// Параметры:
//  ДанныеВариантаКомпоновки - Структура - См. Справочники.РабочиеСтолы.ДанныеВариантаКомпоновки().
// 	НомерКолонки - Число.
// 	НомерСтроки - Число.
// 	
// Возвращаемое значение:
//  Строка - Имя свойства виджета.
// 	
Функция ИмяСвойстваВиджета(ДанныеВариантаКомпоновки, НомерКолонки, НомерСтроки)
	
	ИмяСвойстваВиджета = "";
	
	Если ДанныеВариантаКомпоновки.ТаблицаКомпоновки = Неопределено Тогда
		МакетКомпоновки = ПолучитьМакет(ДанныеВариантаКомпоновки.ИмяМакета);
		ДанныеВариантаКомпоновки.ТаблицаКомпоновки = ОбщегоНазначенияДокументооборот.ТаблицаЗначенийИзМакета(МакетКомпоновки);
	КонецЕсли;
	ТаблицаКомпоновки = ДанныеВариантаКомпоновки.ТаблицаКомпоновки;
	
	Для Каждого СтрокаКомпоновки Из ТаблицаКомпоновки Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаКомпоновки.НомерКолонки)
			Или Не ЗначениеЗаполнено(СтрокаКомпоновки.НомерСтроки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Число(СтрокаКомпоновки.НомерКолонки) = НомерКолонки
			И Число(СтрокаКомпоновки.НомерСтроки) = НомерСтроки Тогда
			ИмяСвойстваВиджета = СтрокаКомпоновки.Имя;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИмяСвойстваВиджета) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестно имя свойства виджета с номером колонки %1 и номером строки %2 для варианта компоновки %3.'"),
			НомерКолонки,
			НомерСтроки,
			ДанныеВариантаКомпоновки.Имя);
	КонецЕсли;
	
	Возврат ИмяСвойстваВиджета;
	
КонецФункции

// Выполняет инициализацию рабочего стола.
Процедура ИнициализироватьРабочийСтол(ДанныеРабочегоСтола, ДанныеВиджетов)
	
	ДанныеРабочегоСтола.Имя = СокрЛП(ДанныеРабочегоСтола.Имя);
	
	ДанныеРабочегоСтола.ПространствоИмен = "РабочийСтол" + ДанныеРабочегоСтола.Имя;
	
	РазвернутьКомплексныеВиджеты(ДанныеРабочегоСтола.Элементы, ДанныеВиджетов);
	
	Для Каждого ЭлементРабочегоСтола Из ДанныеРабочегоСтола.Элементы Цикл
		
		ЭлементРабочегоСтола.Имя = СокрЛП(ЭлементРабочегоСтола.Имя);
		ЭлементРабочегоСтола.Родитель = СокрЛП(ЭлементРабочегоСтола.Родитель);
		
		Если ЭлементРабочегоСтола.Отступ = Неопределено Тогда
			ЭлементРабочегоСтола.Отступ = 1;
		КонецЕсли;
		Если ЭлементРабочегоСтола.МаксимальныйОтступ = Неопределено Тогда
			ЭлементРабочегоСтола.МаксимальныйОтступ = ЭлементРабочегоСтола.Отступ;
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеРабочегоСтола.Элементы.Индексы.Добавить("Имя, Родитель");
	
	ЗаполнитьДанныеВиджетов(ДанныеРабочегоСтола.Элементы, ДанныеВиджетов);
	
КонецПроцедуры

// Разворачивает комплексные виджеты.
Процедура РазвернутьКомплексныеВиджеты(ЭлементыРабочегоСтола, ДанныеВиджетов)
	
	НовыеВиджеты = Новый Массив;
	
	КоличествоЭлементов = ЭлементыРабочегоСтола.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ТекущийИндекс = КоличествоЭлементов - Индекс;
		СтрокаЭлемента = ЭлементыРабочегоСтола[ТекущийИндекс];
		Если СтрокаЭлемента.Тип <> Перечисления.ТипыЭлементовРабочегоСтола.Виджет Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеВиджета = ДанныеВиджетов[СтрокаЭлемента.Виджет];
		Если ДанныеВиджета = Неопределено Тогда
			ДанныеВиджетов[СтрокаЭлемента.Виджет] =
				Справочники.Виджеты.ДанныеВиджета(СтрокаЭлемента.Виджет);
			ДанныеВиджета = ДанныеВиджетов[СтрокаЭлемента.Виджет];
		КонецЕсли;
		
		Если ДанныеВиджета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеВиджета.Вид <> Перечисления.ВидыВиджетов.Комплексный Тогда
			Продолжить;
		КонецЕсли;
			
		Родитель = СтрокаЭлемента.Родитель;
		ЭлементыРабочегоСтола.Удалить(СтрокаЭлемента);
		
		ВложенныйИндекс = ТекущийИндекс;
		Для Каждого СтрокаВложенногоЭлемента Из ДанныеВиджета.ЭлементыКомплексногоВиджета Цикл
			
			НоваяСтрокаЭлемента = ЭлементыРабочегоСтола.Вставить(ВложенныйИндекс);
			ВложенныйИндекс = ВложенныйИндекс + 1;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЭлемента, СтрокаВложенногоЭлемента);
			НоваяСтрокаЭлемента.Родитель = СтрЗаменить(НоваяСтрокаЭлемента.Родитель, "%РОДИТЕЛЬ%", Родитель);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Сдвигает виджеты в колонках вверх в схеме рабочего стола
// 
// Параметры:
// 	СхемаРабочегоСтола - Структура - См. Справочники.РабочиеСтолы.НоваяСхемаРабочегоСтола().
//  ДанныеВариантаКомпоновки - Структура - См. Справочники.РабочиеСтолы.ДанныеВариантаКомпоновки().
// 	
// Возвращаемое значение:
// 	Булево - Есть изменения в схеме рабочего стола.
//
Функция СдвинутьКолонкиВверх(СхемаРабочегоСтола, ДанныеВариантаКомпоновки)
	
	ЕстьИзменения = Ложь;
	
	Для НомерКолонки = 1 По ДанныеВариантаКомпоновки.КоличествоКолонок Цикл
		
		Для НомерСтроки = 2 По ДанныеВариантаКомпоновки.КоличествоСтрок Цикл
			
			ТекущееСвойствоВиджета = ИмяСвойстваВиджета(
				ДанныеВариантаКомпоновки,
				НомерКолонки,
				НомерСтроки);
			Если Не ЗначениеЗаполнено(СхемаРабочегоСтола[ТекущееСвойствоВиджета]) Тогда
				Продолжить;
			КонецЕсли;
			
			СвойствоВиджетаСверху = ИмяСвойстваВиджета(
				ДанныеВариантаКомпоновки,
				НомерКолонки,
				НомерСтроки - 1);
			Если ЗначениеЗаполнено(СхемаРабочегоСтола[СвойствоВиджетаСверху]) Тогда
				Продолжить;
			КонецЕсли;
			
			СхемаРабочегоСтола[СвойствоВиджетаСверху] = СхемаРабочегоСтола[ТекущееСвойствоВиджета];
			СхемаРабочегоСтола[ТекущееСвойствоВиджета] = "";
			
			ЕстьИзменения = Истина;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ЕстьИзменения;
	
КонецФункции

// Сдвигает виджеты в строках влево в схеме рабочего стола
// 
// Параметры:
// 	СхемаРабочегоСтола - Структура - См. Справочники.РабочиеСтолы.НоваяСхемаРабочегоСтола().
//  ДанныеВариантаКомпоновки - Структура - См. Справочники.РабочиеСтолы.ДанныеВариантаКомпоновки().
// 	
// Возвращаемое значение:
// 	Булево - Есть изменения в схеме рабочего стола.
//
Функция СдвинутьСтрокиВлево(СхемаРабочегоСтола, ДанныеВариантаКомпоновки)
	
	ЕстьИзменения = Ложь;
	
	Для НомерСтроки = 1 По ДанныеВариантаКомпоновки.КоличествоСтрок Цикл
		
		Для НомерКолонки = 2 По ДанныеВариантаКомпоновки.КоличествоКолонок Цикл
			
			ТекущееСвойствоВиджета = ИмяСвойстваВиджета(
				ДанныеВариантаКомпоновки,
				НомерКолонки,
				НомерСтроки);
			Если Не ЗначениеЗаполнено(СхемаРабочегоСтола[ТекущееСвойствоВиджета]) Тогда
				Продолжить;
			КонецЕсли;
			
			СвойствоВиджетаСлева = ИмяСвойстваВиджета(
				ДанныеВариантаКомпоновки,
				НомерКолонки - 1,
				НомерСтроки);
			Если ЗначениеЗаполнено(СхемаРабочегоСтола[СвойствоВиджетаСлева]) Тогда
				Продолжить;
			КонецЕсли;
			
			СхемаРабочегоСтола[СвойствоВиджетаСлева] = СхемаРабочегоСтола[ТекущееСвойствоВиджета];
			СхемаРабочегоСтола[ТекущееСвойствоВиджета] = "";
			
			ЕстьИзменения = Истина;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ЕстьИзменения;
	
КонецФункции


// Формирует структуру данных рабочего стола.
// 
// Возвращаемое значение:
//  Структура - Структура данные рабочего стола:
//   * Имя - Строка.
//   * Наименование - Строка.
//   * Условие - СправочникСсылка.АлгоритмыПроверки.
//   * ПространствоИмен - Строка. 
//   * СчетчикЭлементов - Соответствие.
//      ** Ключ - Строка - Тип элемента.
//      ** Значение - Число - Номер элемента.
//
Функция НовыйДанныеРабочегоСтола()
	
	ДанныеРабочегоСтола = Новый Структура;
	ДанныеРабочегоСтола.Вставить("Имя", "");
	ДанныеРабочегоСтола.Вставить("Наименование", "");
	ДанныеРабочегоСтола.Вставить("Условие", Справочники.АлгоритмыПроверки.ПустаяСсылка());
	ДанныеРабочегоСтола.Вставить("Элементы", НовыйЭлементыРабочегоСтола());
	
	ДанныеРабочегоСтола.Вставить("ПространствоИмен", "");
	ДанныеРабочегоСтола.Вставить("СчетчикЭлементов", Новый Соответствие);
	
	Возврат ДанныеРабочегоСтола;
	
КонецФункции

// Возвращает элементы поставляемого рабочего стола.
Функция ЭлементыПоставляемогоРабочегоСтола(РабочийСтол, ДанныеВиджетов)
	
	ЭлементыРабочегоСтола = НовыйЭлементыРабочегоСтола();
	
	ВариантКомпоновки = ТекущийВариантКомпоновкиРабочегоСтола();
	ДанныеВариантаКомпоновки = ДанныеВариантаКомпоновки(ВариантКомпоновки);
	
	СхемаРабочегоСтола = РегистрыСведений.НастройкиРабочихСтолов.ЗначениеНастройки(
		Пользователи.ТекущийПользователь(),
		Перечисления.НастройкиРабочегоСтола.СхемаРабочегоСтола); 
	Если СхемаРабочегоСтола = Неопределено Тогда
		
		СхемаРабочегоСтола = СхемаРабочегоСтола(РабочийСтол, ДанныеВариантаКомпоновки, ДанныеВиджетов);
		
	Иначе
		
		ВиджетыСхемы = Новый Массив;
		
		Для Каждого КлючИЗначение Из СхемаРабочегоСтола Цикл
			
			Если Не ЗначениеЗаполнено(КлючИЗначение.Значение)
				Или ТипЗнч(КлючИЗначение.Значение) <> Тип("СправочникСсылка.Виджеты") Тогда
				Продолжить;
			КонецЕсли;
			
			ВиджетыСхемы.Добавить(КлючИЗначение.Значение);
			
		КонецЦикла;
		
		ДанныеВиджетовСхемы = Справочники.Виджеты.ДанныеВиджетов(ВиджетыСхемы);
		
		Для Каждого КлючИЗначение Из ДанныеВиджетовСхемы Цикл
			ДанныеВиджетов[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДанныеВариантаКомпоновки.ТаблицаКомпоновки = Неопределено Тогда
		МакетКомпоновки = ПолучитьМакет(ДанныеВариантаКомпоновки.ИмяМакета);
		ДанныеВариантаКомпоновки.ТаблицаКомпоновки = ОбщегоНазначенияДокументооборот.ТаблицаЗначенийИзМакета(МакетКомпоновки);
	КонецЕсли;
	ТаблицаКомпоновки = ДанныеВариантаКомпоновки.ТаблицаКомпоновки;
	
	Для Каждого СтрокаПоставляемыхДанных Из ТаблицаКомпоновки Цикл
		
		ТипСтроки = Перечисления.ТипыЭлементовРабочегоСтола[СтрокаПоставляемыхДанных.Тип];
		Если ТипСтроки = Перечисления.ТипыЭлементовРабочегоСтола.Виджет
			Или ТипСтроки = Перечисления.ТипыЭлементовРабочегоСтола.БлокНавигации Тогда
			ВиджетСтроки = СхемаРабочегоСтола[СтрокаПоставляемыхДанных.Имя];
			Если ЗначениеЗаполнено(ВиджетСтроки) Тогда
				ИмяСтроки = СтрЗаменить(Строка(ВиджетСтроки.УникальныйИдентификатор()), "-", "");
			Иначе
				ИмяСтроки = "";
			КонецЕсли;
		Иначе
			ВиджетСтроки = Неопределено;
			ИмяСтроки = СтрокаПоставляемыхДанных.Имя;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ИмяСтроки) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементРабочегоСтола = ЭлементыРабочегоСтола.Добавить();
		ЭлементРабочегоСтола.Имя = ИмяСтроки;
		ЭлементРабочегоСтола.Виджет = ВиджетСтроки;
		ЭлементРабочегоСтола.Родитель = СтрокаПоставляемыхДанных.Родитель;
		ЭлементРабочегоСтола.Тип = ТипСтроки;
		
		Если ЗначениеЗаполнено(СтрокаПоставляемыхДанных.Группировка) Тогда
			ЭлементРабочегоСтола.Группировка =
				ГруппировкаПодчиненныхЭлементовФормы[СтрокаПоставляемыхДанных.Группировка];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПоставляемыхДанных.РастягиватьПоГоризонтали) Тогда
			ЭлементРабочегоСтола.РастягиватьПоГоризонтали =
				Булево(СтрокаПоставляемыхДанных.РастягиватьПоГоризонтали);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПоставляемыхДанных.РастягиватьПоВертикали) Тогда
			ЭлементРабочегоСтола.РастягиватьПоВертикали =
				Булево(СтрокаПоставляемыхДанных.РастягиватьПоВертикали);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПоставляемыхДанных.ВертикальныйИнтервал) Тогда
			ЭлементРабочегоСтола.ВертикальныйИнтервал =
				ИнтервалМеждуЭлементамиФормы[СтрокаПоставляемыхДанных.ВертикальныйИнтервал];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПоставляемыхДанных.ГоризонтальныйИнтервал) Тогда
			ЭлементРабочегоСтола.ГоризонтальныйИнтервал =
				ИнтервалМеждуЭлементамиФормы[СтрокаПоставляемыхДанных.ГоризонтальныйИнтервал];
			КонецЕсли;
			
		Если ЗначениеЗаполнено(СтрокаПоставляемыхДанных.Ширина) Тогда
			ЭлементРабочегоСтола.Ширина = Число(СтрокаПоставляемыхДанных.Ширина);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПоставляемыхДанных.Высота) Тогда
			ЭлементРабочегоСтола.Высота = Число(СтрокаПоставляемыхДанных.Высота);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПоставляемыхДанных.Отступ) Тогда
			ЭлементРабочегоСтола.Отступ = Число(СтрокаПоставляемыхДанных.Отступ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПоставляемыхДанных.МаксимальныйОтступ) Тогда
			ЭлементРабочегоСтола.МаксимальныйОтступ = Число(СтрокаПоставляемыхДанных.МаксимальныйОтступ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПоставляемыхДанных.ГоризонтальноеПоложениеВГруппе) Тогда
			ЭлементРабочегоСтола.ГоризонтальноеПоложениеВГруппе =
				ГоризонтальноеПоложениеЭлемента[СтрокаПоставляемыхДанных.ГоризонтальноеПоложениеВГруппе];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПоставляемыхДанных.ЦветВиджета) Тогда
			ЭлементРабочегоСтола.ЦветВиджета =
				Перечисления.ЦветаВиджетов[СтрокаПоставляемыхДанных.ЦветВиджета];
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЭлементыРабочегоСтола;
	
КонецФункции

#КонецОбласти

#КонецЕсли