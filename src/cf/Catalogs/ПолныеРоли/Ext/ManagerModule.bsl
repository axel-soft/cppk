#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Находит или создает полную роль по исходной роли, дополненной объектами адресации.
//
// Параметры:
//   ИсходнаяРоль - СправочникСсылка.РолиИсполнителей - исходная роль.
//   ОсновнойОбъектАдресации - Характеристика.ОбъектыАдресацииЗадач - основной объект адресации.
//   ДополнительныйОбъектАдресации - Характеристика.ОбъектыАдресацииЗадач - доп. объект адресации.
//
// Возвращаемое значение:
//   СправочникСсылка.ПолныеРоли - полная роль, найденная в справочнике или созданная на
//     основании исходной роли.
//
Функция НайтиСоздатьПолнуюРоль(ИсходнаяРоль,
	Знач ОсновнойОбъектАдресации = Неопределено,
	Знач ДополнительныйОбъектАдресации = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ОсновнойОбъектАдресации) Тогда
		ОсновнойОбъектАдресации = Неопределено;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДополнительныйОбъектАдресации) Тогда
		ДополнительныйОбъектАдресации = Неопределено;
	КонецЕсли;
	
	ПолнаяРоль = НайтиПолнуюРоль(
		ИсходнаяРоль, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации);
	Если ЗначениеЗаполнено(ПолнаяРоль) Тогда
		Возврат ПолнаяРоль;
	КонецЕсли;
	
	ПолнаяРоль = СоздатьПолнуюРоль(
		ИсходнаяРоль, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации);
	
	Возврат ПолнаяРоль;
	
КонецФункции

// Ищет и возвращает полную роль.
//
// Параметры:
//  ИсходнаяРоль - СправочникСсылка.РолиИсполнителей - исходная роль.
//  ОсновнойОбъектАдресации - Характеристика.ОбъектыАдресацииЗадач - основной объект адресации.
//  ДополнительныйОбъектАдресации - Характеристика.ОбъектыАдресацииЗадач - доп. объект адресации.
//
// Возвращаемое значение:
//  СправочникСсылка.ПолныеРоли - полная роль, найденная в справочнике.
//
Функция НайтиПолнуюРоль(ИсходнаяРоль,
	Знач ОсновнойОбъектАдресации = Неопределено,
	Знач ДополнительныйОбъектАдресации = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ОсновнойОбъектАдресации) Тогда
		ОсновнойОбъектАдресации = Неопределено;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДополнительныйОбъектАдресации) Тогда
		ДополнительныйОбъектАдресации = Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка
		|ИЗ
		|	Справочник.ПолныеРоли КАК ПолныеРоли
		|ГДЕ
		|	Владелец = &Владелец
		|   И ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации
		|	И ДополнительныйОбъектАдресации = &ДополнительныйОбъектАдресации");
		
	Запрос.УстановитьПараметр("Владелец", ИсходнаяРоль);
	Запрос.УстановитьПараметр("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
	Запрос.УстановитьПараметр("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ПустаяСсылка();
	
КонецФункции

// Находит полные роли по роли исполнителя.
// 
// Параметры:
//  РольИсполнителя - СправочникСсылка.РолиИсполнителей.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.ПолныеРоли - Полные роли по роли исполнителя.
// 
Функция НайтиПоРолиИсполнителя(РольИсполнителя) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НайденныеПолныеРоли = Новый Массив;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПолныеРоли.Ссылка
		|ИЗ
		|	Справочник.ПолныеРоли КАК ПолныеРоли
		|ГДЕ
		|	ПолныеРоли.Владелец = &РольИсполнителя");
	
	Запрос.УстановитьПараметр("РольИсполнителя", РольИсполнителя);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НайденныеПолныеРоли.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Возврат НайденныеПолныеРоли;
	
КонецФункции

// Находит полные роли по объекту адресации.
// 
// Параметры:
//  ОбъектАдресации - Характеристика.ОбъектыАдресацииЗадач.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.ПолныеРоли - Полные роли по объекту адресации.
// 
Функция НайтиПоОбъектуАдресации(ОбъектАдресации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НайденныеПолныеРоли = Новый Массив;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПолныеРоли.Ссылка
		|ИЗ
		|	Справочник.ПолныеРоли КАК ПолныеРоли
		|ГДЕ
		|	ПолныеРоли.ОсновнойОбъектАдресации = &ОбъектАдресации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПолныеРоли.Ссылка
		|ИЗ
		|	Справочник.ПолныеРоли КАК ПолныеРоли
		|ГДЕ
		|	ПолныеРоли.ДополнительныйОбъектАдресации = &ОбъектАдресации");
	
	Запрос.УстановитьПараметр("ОбъектАдресации", ОбъектАдресации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НайденныеПолныеРоли.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Возврат НайденныеПолныеРоли;
	
КонецФункции

// Создает полную роль по исходной и объектам адресации.
//
// Параметры:
//   ИсходнаяРоль - СправочникСсылка.РолиИсполнителей - исходная роль.
//   ОсновнойОбъектАдресации - Характеристика.ОбъектыАдресацииЗадач - основной объект адресации.
//   ДополнительныйОбъектАдресации - Характеристика.ОбъектыАдресацииЗадач - доп. объект адресации.
//
// Возвращаемое значение:
//   СправочникСсылка.ПолныеРоли - полная роль, созданная на основании исходной роли.
//
Функция СоздатьПолнуюРоль(ИсходнаяРоль, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
	
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.ПолныеРоли");
		ЭлементБлокировки.УстановитьЗначение("Владелец", ИсходнаяРоль);
		ЭлементБлокировки.УстановитьЗначение("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
		ЭлементБлокировки.УстановитьЗначение("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
		БлокировкаДанных.Заблокировать();
		
		ПолнаяРольСсылка = НайтиПолнуюРоль(
			ИсходнаяРоль, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации);
		
		Если ЗначениеЗаполнено(ПолнаяРольСсылка) Тогда
			ЗафиксироватьТранзакцию();
			Возврат ПолнаяРольСсылка
		КонецЕсли;
	
		ПолнаяРоль = СоздатьЭлемент();
		
		ПолнаяРоль.Владелец = ИсходнаяРоль;
		ПолнаяРоль.ОсновнойОбъектАдресации = ОсновнойОбъектАдресации;
		ПолнаяРоль.ДополнительныйОбъектАдресации = ДополнительныйОбъектАдресации;
		
		ПолнаяРоль.Записать();
		
		ПолнаяРольСсылка = ПолнаяРоль.Ссылка;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат ПолнаяРольСсылка;
	
КонецФункции

// Возвращает состав сотрудников, входящих в указанный контейнер.
//
// Параметры:
//	Контейнер - СправочникСсылка.Сотрудники - контейнер сотрудников.
//
// Возвращаемое значение:
//	Массив Из СправочникСсылка.Сотрудники - состав контейнера.
//
Функция СоставКонтейнераСотрудников(Контейнер) Экспорт
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контейнер, "ПометкаУдаления") = Истина Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат РегистрыСведений.ИсполнителиРолей.ИсполнителиРоли(Контейнер);
	
КонецФункции

// Возвращает контейнеры типа ПолныеРоли, которым принадлежит указанный сотрудник.
//
// Параметры:
//	Сотрудник - СправочникСсылка.Сотрудники - проверяемый сотрудник.
//
// Возвращаемое значение:
//	Массив Из СправочникСсылка.ПолныеРоли - Контейнеры, которым принадлежит сотрудник.
//
Функция КонтейнерыСотрудника(Сотрудник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ПометкаУдаления") = Истина Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат РегистрыСведений.ИсполнителиРолей.РолиИсполнителя(Сотрудник);
	
КонецФункции

// Устанавливает или снимает пометку удаления с полных ролей, подчиненных указанному владельцу,
// по указанным признакам.
//
// Параметры:
//   Владелец - СправочникСсылка.РолиИсполнителей - роль-владелец.
//   УстанавливаемаяПометкаПолныхРолейБезОбъектовАдресации - Булево - новая пометка для ролей без ОА, или
//                                                         - Неопределено - не менять пометку.
//   УстанавливаемаяПометкаПолныхРолейСОбъектамиАдресации - Булево - новая пометка для ролей с ОА, или
//                                                        - Неопределено - не менять пометку.
//
Процедура ОбновитьПометкуУдаленияСогласноВладельцу(Владелец, ПометкаУдаления,
	ИспользуетсяБезОбъектовАдресации, ИспользуетсяСОбъектамиАдресации,
	ТипыОсновногоОбъектаАдресации, ТипыДополнительногоОбъектаАдресации) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("ПометкаУдаления", ПометкаУдаления);
	Запрос.УстановитьПараметр("ОбъектыАдресацииОбязательны", Не ИспользуетсяБезОбъектовАдресации);
	
	Если ИспользуетсяСОбъектамиАдресации
		И ЗначениеЗаполнено(ТипыОсновногоОбъектаАдресации) Тогда
		Запрос.УстановитьПараметр("ТипыОсновногоОбъектаАдресации", ТипыОсновногоОбъектаАдресации.ТипЗначения.Типы());
		Если ИспользуетсяБезОбъектовАдресации Тогда
			Запрос.Параметры.ТипыОсновногоОбъектаАдресации.Добавить(Тип("Неопределено"));
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("ТипыОсновногоОбъектаАдресации", Новый Массив);
		Запрос.Параметры.ТипыОсновногоОбъектаАдресации.Добавить(Тип("Неопределено"));
	КонецЕсли;
	
	Если ИспользуетсяСОбъектамиАдресации
		И ЗначениеЗаполнено(ТипыДополнительногоОбъектаАдресации) Тогда
		Запрос.УстановитьПараметр("ТипыДополнительногоОбъектаАдресации", ТипыДополнительногоОбъектаАдресации.ТипЗначения.Типы());
		Если ИспользуетсяБезОбъектовАдресации Тогда
			Запрос.Параметры.ТипыДополнительногоОбъектаАдресации.Добавить(Тип("Неопределено"));
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("ТипыДополнительногоОбъектаАдресации", Новый Массив);
		Запрос.Параметры.ТипыДополнительногоОбъектаАдресации.Добавить(Тип("Неопределено"));
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПолныеРоли.Ссылка КАК Ссылка,
		|	НЕ ПолныеРоли.ПометкаУдаления КАК НоваяПометкаУдаления
		|ИЗ
		|	Справочник.ПолныеРоли КАК ПолныеРоли
		|ГДЕ
		|	ПолныеРоли.Владелец = &Владелец
		|	И ВЫБОР
		|		КОГДА &ПометкаУдаления И ПолныеРоли.ПометкаУдаления <> &ПометкаУдаления
		|			ТОГДА ИСТИНА
		|		КОГДА &ОбъектыАдресацииОбязательны И
		|			(ПолныеРоли.ОсновнойОбъектАдресации = Неопределено И ПолныеРоли.ДополнительныйОбъектАдресации = Неопределено)
		|			ТОГДА ИСТИНА
		|		КОГДА НЕ ТИПЗНАЧЕНИЯ(ПолныеРоли.ОсновнойОбъектАдресации) В (&ТипыОсновногоОбъектаАдресации)
		|			ТОГДА ИСТИНА
		|		КОГДА НЕ ТИПЗНАЧЕНИЯ(ПолныеРоли.ДополнительныйОбъектАдресации) В (&ТипыДополнительногоОбъектаАдресации)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ <> ПолныеРоли.ПометкаУдаления
		|";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИзменяемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ИзменяемыйОбъект.Записать();
	КонецЦикла;
		
КонецПроцедуры

// Возвращает отслеживаемые реквизиты для дополнительного свойства ПредыдущиеЗначенияРеквизитов.
//
// Возвращаемое значение:
//  Строка - Отслеживаемые реквизиты.
//
Функция ОтслеживаемыеРеквизиты() Экспорт
	
	ОтслеживаемыеРеквизиты = "ПометкаУдаления";
	
	Возврат ОтслеживаемыеРеквизиты;
	
КонецФункции

#Область ОбновлениеДанныхКэширующихОбъектов

// Конструктор параметров обновления данных кэширующих объектов.
//
// Возвращаемое значение:
//	Структура:
//		* ОбновитьДанныеРегистраСотрудникиВКонтейнерах - Булево - Признак необходимости обновления данных РС СотрудникиВКонтейнерах.
//
Функция ПараметрыОбновленияДанныхКэширующихОбъектов() Экспорт
	
	ПараметрыОбновления = Новый Структура;
	ПараметрыОбновления.Вставить("ОбновитьДанныеРегистраСотрудникиВКонтейнерах", Ложь);
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Устанавливает значения параметров обновления данных кэширующих объектов по данным объекта.
//
// Параметры:
//	Объект - СправочникОбъект.РабочиеГруппы - Объект, для которго необходимо определить параметры обновления.
//
// Возвращаемое значение:
//	Структура: см. ПараметрыОбновленияДанныхКэширующихОбъектов.
//
Функция ЗначенияПараметровОбновленияДанныхКэширующихОбъектов(Объект) Экспорт
	
	ПараметрыОбновления = ПараметрыОбновленияДанныхКэширующихОбъектов();
	
	ПредыдущиеЗначенияРеквизитов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Объект.ДополнительныеСвойства, "ПредыдущиеЗначенияРеквизитов");
	
	СсылкаНаОбъект = Объект.Ссылка;
	
	Если Объект.ЭтоНовый() Тогда
		Если Объект.ПолучитьСсылкуНового().Пустая() Тогда // Установим ссылку нового, если ее нет
			СсылкаНаОбъект = ПолучитьСсылку(Новый УникальныйИдентификатор);
			Объект.УстановитьСсылкуНового(СсылкаНаОбъект);
		Иначе // Если ссылку нового уже установили ранее, возьмем ее
			СсылкаНаОбъект = Объект.ПолучитьСсылкуНового();
		КонецЕсли;
	КонецЕсли;
	
	Если ПредыдущиеЗначенияРеквизитов = Неопределено Тогда
		ПредыдущиеЗначенияРеквизитов =
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъект, ОтслеживаемыеРеквизиты());
	КонецЕсли; 
	
	Если Не Объект.ЭтоНовый()
			И ПредыдущиеЗначенияРеквизитов.ПометкаУдаления <> Объект.ПометкаУдаления Тогда
		
		ПараметрыОбновления.ОбновитьДанныеРегистраСотрудникиВКонтейнерах = Истина;
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновляет данные зависимых объектов согласно установленным параметрам.
//
// Параметры:
//	Объект - СправочникОбъект.Пользователи - Объект, по данным которого необходимо обновить данные кэширующих объектов.
//	ПараметрыОбновления - см. ПараметрыОбновленияДанныхКэширующихОбъектов.
//
Процедура ОбновитьДанныеКэширующихОбъектов(Объект, ПараметрыОбновления) Экспорт
	
	Если ПараметрыОбновления.ОбновитьДанныеРегистраСотрудникиВКонтейнерах = Истина Тогда
		РегистрыСведений.СотрудникиВКонтейнерах.ОбновитьДанныеКонтейнера(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

// Получает дополнительные поля представления для полной роли.
//
Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка = Ложь)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Владелец");
	Поля.Добавить("ОсновнойОбъектАдресации");
	Поля.Добавить("ДополнительныйОбъектАдресации");
	
КонецПроцедуры

// Собирает представление полной роли из исходной и объектов адресации.
//
Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка) 
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Данные.ОсновнойОбъектАдресации) Тогда
		Если ЗначениеЗаполнено(Данные.ДополнительныйОбъектАдресации) Тогда
			Представление = СтрШаблон("%1, %2, %3",
				Данные.Владелец,
				Данные.ОсновнойОбъектАдресации,
				Данные.ДополнительныйОбъектАдресации);
		Иначе
			Представление = СтрШаблон("%1, %2",
				Данные.Владелец,
				Данные.ОсновнойОбъектАдресации);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Данные.ДополнительныйОбъектАдресации) Тогда
			Представление = СтрШаблон("%1, %2",
				Данные.Владелец,
				Данные.ДополнительныйОбъектАдресации);
		Иначе
			Представление = Строка(Данные.Владелец);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Подменяет форму элемента общей формой ВыборРолиИсполнителя.
//
Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация,
	СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" И Не Параметры.Свойство("Ключ") Тогда
		ВызватьИсключение НСтр("ru = 'Справочник наполняется автоматически и не предназначен для редактирования.'");
	КонецЕсли;
	
	Если ВидФормы = "ФормаОбъекта" И Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		
		СтандартнаяОбработка = Ложь;
		РеквизитыСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Ключ,
			"Владелец, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации");
		
		ВыбраннаяФорма = Метаданные.ОбщиеФормы.ПросмотрРолиИсполнителя;
		Параметры.Вставить("ПолнаяРоль", Параметры.Ключ);
		Параметры.Вставить("РольИсполнителя", РеквизитыСсылки.Владелец);
		Параметры.Вставить("ОсновнойОбъектАдресации", РеквизитыСсылки.ОсновнойОбъектАдресации);
		Параметры.Вставить("ДополнительныйОбъектАдресации", РеквизитыСсылки.ДополнительныйОбъектАдресации);
		Параметры.Вставить("Заголовок", НСтр("ru = 'Просмотр роли'"));
		Параметры.Вставить("ТолькоПросмотр", Истина);
		
	ИначеЕсли ВидФормы = "ФормаВыбора"
		Или ВидФормы = "ФормаСписка" И Параметры.Свойство("РежимВыбора") И Параметры.РежимВыбора Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ВыбраннаяФорма = "Справочник.АдреснаяКнига.ФормаСписка";
		
		Параметры.Вставить("РежимРаботыФормы", 1);
		Параметры.Вставить("УпрощенныйИнтерфейс", Истина);
		Параметры.Вставить("ОтображатьРоли", Истина);
		Параметры.Вставить("УточнятьСоставКонтейнеров", Истина);
		Параметры.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор роли'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Подменяет стандартную обработку получения данных выбора поиском по наименованию владельца.
//
Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Текст = Параметры.СтрокаПоиска; 
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПолныеРоли.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПолныеРоли КАК ПолныеРоли
	|ГДЕ
	|	ПолныеРоли.Владелец.Наименование ПОДОБНО &Текст
	|	И Не ПолныеРоли.ПометкаУдаления
	|";
	
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеВыбора.Добавить(Выборка.Ссылка);
			
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли

#КонецОбласти