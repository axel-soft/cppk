
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Обновляет предопределенные автоподстановки.
//
Процедура ЗаполнитьПредопределенные() Экспорт
	
	ТаблицаЭлементов = Новый ТаблицаЗначений;
	ТаблицаЭлементов.Колонки.Добавить("ИмяПредопределенного");
	ТаблицаЭлементов.Колонки.Добавить("Выражение");
	
	Стр = ТаблицаЭлементов.Добавить();
	Стр.ИмяПредопределенного = "АвторПроцесса";
	Стр.Выражение = "Результат = Объект.Автор";
	
	Стр = ТаблицаЭлементов.Добавить();
	Стр.ИмяПредопределенного = "НепосредственныйРуководительАвтораПроцесса";
	Стр.Выражение = "ПараметрыАлгоритма = Новый Структура(""Сотрудник"", Объект.Автор);
		|Результат = Справочники.Алгоритмы.Вызвать(""НепосредственныйРуководительСотрудника"", ПараметрыАлгоритма);";
	
	Стр = ТаблицаЭлементов.Добавить();
	Стр.ИмяПредопределенного = "ВсеРуководителиАвтораПроцесса";
	Стр.Выражение = "ПараметрыАлгоритма = Новый Структура(""Сотрудник"", Объект.Автор);
		|Результат = Справочники.Алгоритмы.Вызвать(""ВсеРуководителиСотрудника"", ПараметрыАлгоритма);";
	
	Стр = ТаблицаЭлементов.Добавить();
	Стр.ИмяПредопределенного = "ВсеПодчиненныеАвтораПроцесса";
	Стр.Выражение = "ПараметрыАлгоритма = Новый Структура(""Сотрудник"", Объект.Автор);
		|Результат = Справочники.Алгоритмы.Вызвать(""ВсеПодчиненныеСотрудника"", ПараметрыАлгоритма);";
	
	Стр = ТаблицаЭлементов.Добавить();
	Стр.ИмяПредопределенного = "ВсеКоллегиАвтораПроцесса";
	Стр.Выражение = "Запрос = Новый Запрос(
		|	""ВЫБРАТЬ
		|	|	СотрудникиКоллеги.Ссылка КАК Сотрудник
		|	|ИЗ
		|	|	Справочник.Сотрудники КАК Сотрудники
		|	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК СотрудникиКоллеги
		|	|		ПО Сотрудники.Подразделение = СотрудникиКоллеги.Подразделение
		|	|ГДЕ
		|	|	Сотрудники.Ссылка = &АвторПроцесса
		|	|	И Сотрудники.Ссылка <> СотрудникиКоллеги.Ссылка
		|	|	И СотрудникиКоллеги.Действует"");
		|Запрос.УстановитьПараметр(""АвторПроцесса"", Объект.Автор);
		|Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
		|
		|ПодразделениеАвтора = Сотрудники.ПодразделениеСотрудника(Объект.Автор);
		|Если ЗначениеЗаполнено(ПодразделениеАвтора) Тогда
		|	РуководительПодразделения = СтруктураПредприятия.РуководительПодразделения(ПодразделениеАвтора);
		|	Если Результат.Найти(РуководительПодразделения) = Неопределено Тогда
		|		Результат.Добавить(РуководительПодразделения);
		|	КонецЕсли;
		|КонецЕсли;
		|";
	
	Стр = ТаблицаЭлементов.Добавить();
	Стр.ИмяПредопределенного = "ВсеРуководителиПредприятия";
	Стр.Выражение = "Запрос = Новый Запрос(
		|	""ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	|	СтруктураПредприятия.Руководитель КАК Руководитель
		|	|ИЗ
		|	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|	|		ПО СтруктураПредприятия.Руководитель = Сотрудники.Ссылка
		|	|ГДЕ
		|	|	НЕ СтруктураПредприятия.ПометкаУдаления
		|	|	И Сотрудники.Действует"");
		|Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);";
	
	Стр = ТаблицаЭлементов.Добавить();
	Стр.ИмяПредопределенного = "ВсеПользователиИнформационнойБазы";
	Стр.Выражение = "Результат = Новый Массив;
		|Запрос = Новый Запрос(
		|	""ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	|	Пользователи.Ссылка,
		|	|	Пользователи.ИдентификаторПользователяИБ
		|	|ИЗ
		|	|	Справочник.Пользователи КАК Пользователи
		|	|ГДЕ
		|	|	НЕ Пользователи.Недействителен
		|	|	И НЕ Пользователи.ПометкаУдаления
		|	|
		|	|УПОРЯДОЧИТЬ ПО
		|	|	Пользователи.Наименование"");
		|Выборка = Запрос.Выполнить().Выбрать();
		|УстановитьПривилегированныйРежим(Истина);
		|Пока Выборка.Следующий() Цикл
		|	Если ЗначениеЗаполнено(Выборка.ИдентификаторПользователяИБ) Тогда 
		|		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
		|			Выборка.ИдентификаторПользователяИБ);
		|		Если ПользовательИБ <> Неопределено Тогда
		|			Результат.Добавить(Выборка.Ссылка);
		|		КонецЕсли;
		|	КонецЕсли;
		|КонецЦикла;";
	
	Для Каждого Стр Из ТаблицаЭлементов Цикл
		Попытка
			АПСсылка = Справочники.АвтоподстановкиДляПроцессов[Стр.ИмяПредопределенного];
			АПОбъект = АПСсылка.ПолучитьОбъект();
			Если АПОбъект.Выражение <> Стр.Выражение Тогда
				АПОбъект.Выражение = Стр.Выражение;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(АПОбъект);
			КонецЕсли;
		Исключение
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Ошибка при обновлении предопределенной автоподстановки ""%1"": %2'"),
				Стр.ИмяПредопределенного,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				"АвтоподстановкиДляПроцессов",
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.АвтоподстановкиДляПроцессов,,
				ТекстОшибки);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область ОбновлениеАдреснойКниги

// Конструктор параметров обновления адресной книги.
//
// Возвращаемое значение:
//	Структура:
//		* ОбновитьДанныеОбъекта - Булево - Признак обновления данных по объекту.
//		* ОбновитьДанныеОтображенияОбъекта - Булево - Признак обновления данных отображения.
//		* ОбновитьСловаПоискаПоОбъекту - Булево - Признак обновления слов поиска по объекту.
//		* ОбновитьДоступностьВПоискеПоОбъекту - Булево - Признак обновления доступности в результатах поиска.
//
Функция ПараметрыОбновленияАдреснойКниги() Экспорт
	
	ПараметрыОбновленияАдреснойКниги = Новый Структура;
	ПараметрыОбновленияАдреснойКниги.Вставить("ОбновитьДанныеОбъекта", Ложь);
	ПараметрыОбновленияАдреснойКниги.Вставить("ОбновитьДанныеОтображенияОбъекта", Ложь);
	ПараметрыОбновленияАдреснойКниги.Вставить("ОбновитьСловаПоискаПоОбъекту", Ложь);
	ПараметрыОбновленияАдреснойКниги.Вставить("ОбновитьДоступностьВПоискеПоОбъекту", Ложь);
	
	Возврат ПараметрыОбновленияАдреснойКниги;
	
КонецФункции

// Устанавливает значения параметров обновления адресной книги по данным объекта.
//
// Параметры:
//	Объект - СправочникОбъект.АвтоподстановкиДляПроцессов - Объект, для которго необходимо определить параметры обновления.
//
// Возвращаемое значение:
//	Структура: см. ПараметрыОбновленияАдреснойКниги.
//
Функция ЗначенияПараметровОбновленияАдреснойКнигиПоОбъекту(Объект) Экспорт
	
	ПараметрыОбновленияАдреснойКниги = ПараметрыОбновленияАдреснойКниги();
		
	Если Не РаботаСАдреснойКнигой.ТребуетсяОбновлениеАдреснойКниги(Объект) Тогда
		Возврат ПараметрыОбновленияАдреснойКниги; 
	КонецЕсли;

	Если Объект.ЭтоНовый() Тогда
		ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОбъекта = Истина;
		Если Не Объект.ЭтоГруппа Тогда
			ПараметрыОбновленияАдреснойКниги.ОбновитьСловаПоискаПоОбъекту = Истина;
		КонецЕсли;
	Иначе
		ПредыдущиеЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.Ссылка, "Наименование, ПометкаУдаления, Родитель");
		
		Если ПредыдущиеЗначенияРеквизитов.Родитель <> Объект.Родитель Тогда
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОбъекта = Истина;
		КонецЕсли;
		
		Если ПредыдущиеЗначенияРеквизитов.ПометкаУдаления <> Объект.ПометкаУдаления Тогда
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОбъекта = Истина;
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОтображенияОбъекта = Истина;
			ПараметрыОбновленияАдреснойКниги.ОбновитьДоступностьВПоискеПоОбъекту = Истина;
		КонецЕсли;
		
		Если ПредыдущиеЗначенияРеквизитов.Наименование <> Объект.Наименование Тогда
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОбъекта = Истина;
			ПараметрыОбновленияАдреснойКниги.ОбновитьДанныеОтображенияОбъекта = Истина;
			Если Не Объект.ЭтоГруппа Тогда
				ПараметрыОбновленияАдреснойКниги.ОбновитьСловаПоискаПоОбъекту = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыОбновленияАдреснойКниги;

КонецФункции

// Обновляет адресную книгу, согласно установленным параметрам.
//
// Параметры:
//	Объект - СправочникОбъект.АвтоподстановкиДляПроцессов - Объект, по данным которого необходимо обновить адресной книги.
//	ПараметрыОбновления - Структура Из КлючИЗначение - см. ПараметрыОбновленияАдреснойКниги.
//
Процедура ОбновитьАдреснуюКнигу(Объект, ПараметрыОбновления) Экспорт
	
	Если ПараметрыОбновления.ОбновитьДанныеОбъекта Тогда
		Справочники.АдреснаяКнига.ОбновитьДанныеОбъекта(
			Объект.Ссылка, Объект.Родитель, Справочники.АдреснаяКнига.АвтоподстановкиДляПроцессов);
		Справочники.АдреснаяКнига.ОбновитьДанныеОбъекта(
			Объект.Ссылка, Объект.Родитель, Справочники.АдреснаяКнига.ВсеАвтоподстановки);
	КонецЕсли;
	
	Если ПараметрыОбновления.ОбновитьДанныеОтображенияОбъекта Тогда
		Справочники.АдреснаяКнига.ОбновитьДанныеОтображенияПодчиненногоОбъекта(Объект.Ссылка);
	КонецЕсли;
	
	Если ПараметрыОбновления.ОбновитьСловаПоискаПоОбъекту Тогда
		РегистрыСведений.ОбъектыПоискаВАдреснойКниге.ОбновитьСловаПоискаПоАвтоподстановкеДляПроцессов(Объект);
	КонецЕсли;
	
	Если ПараметрыОбновления.ОбновитьДоступностьВПоискеПоОбъекту Тогда
		РегистрыСведений.ОбъектыПоискаВАдреснойКниге.ОбновитьДоступностьВПоиске(Объект);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область АдреснаяКнига

// Вернет Истина, у этого модуля менеджера есть функция ПолучитьАдресФото.
// 
// Возвращаемое значение:
//  Булево.
// 
Функция ЕстьФункцияПолученияФото() Экспорт
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли
