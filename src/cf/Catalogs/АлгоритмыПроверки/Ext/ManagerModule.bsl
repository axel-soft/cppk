#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет поставляемые данные.
// 
Процедура ЗаполнитьПоставляемыеДанные() Экспорт
	
	// Доступны "Задачи мне".
	АлгоритмПроверкиОбъект = ДоступныЗадачиМне.ПолучитьОбъект();
	АлгоритмПроверкиОбъект.Наименование = НСтр("ru = 'Доступны ""Задачи мне""'");
	АлгоритмПроверкиОбъект.ВыражениеУсловия =
		"Результат = РаботаСЗадачами.ДоступныЗадачиМне(Предмет.Ссылка);";
	АлгоритмПроверкиОбъект.СпособЗаданияУсловия =
		Перечисления.СпособыЗаданияУсловия.НаВстроенномЯзыке;
	АлгоритмПроверкиОбъект.ТипОбъекта = Перечисления.ТипыОбъектов.Пользователи;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(АлгоритмПроверкиОбъект);
	
	// Доступны "Задачи от меня".
	АлгоритмПроверкиОбъект = ДоступныЗадачиОтМеня.ПолучитьОбъект();
	АлгоритмПроверкиОбъект.Наименование = НСтр("ru = 'Доступны ""Задачи от меня""'");
	АлгоритмПроверкиОбъект.ВыражениеУсловия =
		"Результат = РаботаСЗадачами.ДоступныЗадачиОтМеня(Предмет.Ссылка);";
	АлгоритмПроверкиОбъект.СпособЗаданияУсловия =
		Перечисления.СпособыЗаданияУсловия.НаВстроенномЯзыке;
	АлгоритмПроверкиОбъект.ТипОбъекта = Перечисления.ТипыОбъектов.Пользователи;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(АлгоритмПроверкиОбъект);
	
	// Доступны "Задачи подчиненных".
	АлгоритмПроверкиОбъект = ДоступныЗадачиПодчиненных.ПолучитьОбъект();
	АлгоритмПроверкиОбъект.Наименование = НСтр("ru = 'Доступны ""Задачи подчиненных""'");
	АлгоритмПроверкиОбъект.ВыражениеУсловия =
		"Результат = РаботаСЗадачами.ДоступныЗадачиПодчиненных(Предмет.Ссылка);";
	АлгоритмПроверкиОбъект.СпособЗаданияУсловия =
		Перечисления.СпособыЗаданияУсловия.НаВстроенномЯзыке;
	АлгоритмПроверкиОбъект.ТипОбъекта = Перечисления.ТипыОбъектов.Пользователи;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(АлгоритмПроверкиОбъект);
	
	// Это ответственный за НСИ.
	АлгоритмПроверкиОбъект = ЭтоОтветственныйЗаНСИ.ПолучитьОбъект();
	АлгоритмПроверкиОбъект.Наименование = НСтр("ru = 'Это ответственный за НСИ'");
	АлгоритмПроверкиОбъект.ВыражениеУсловия =
		"Результат = РаботаСПользователями.ЭтоОтветственныйЗаНСИ(Предмет.Ссылка);";
	АлгоритмПроверкиОбъект.СпособЗаданияУсловия =
		Перечисления.СпособыЗаданияУсловия.НаВстроенномЯзыке;
	АлгоритмПроверкиОбъект.ТипОбъекта = Перечисления.ТипыОбъектов.Пользователи;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(АлгоритмПроверкиОбъект);
	
	// Это руководитель.
	АлгоритмПроверкиОбъект = ЭтоРуководитель.ПолучитьОбъект();
	АлгоритмПроверкиОбъект.Наименование = НСтр("ru = 'Это руководитель'");
	АлгоритмПроверкиОбъект.ВыражениеУсловия =
		"Результат = РаботаСПользователями.ЭтоРуководитель(Предмет.Ссылка);";
	АлгоритмПроверкиОбъект.СпособЗаданияУсловия =
		Перечисления.СпособыЗаданияУсловия.НаВстроенномЯзыке;
	АлгоритмПроверкиОбъект.ТипОбъекта = Перечисления.ТипыОбъектов.Пользователи;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(АлгоритмПроверкиОбъект);
	
	// Документ согласован.
	АлгоритмПроверкиОбъект = ДокументСогласован.ПолучитьОбъект();
	АлгоритмПроверкиОбъект.Наименование = НСтр("ru = 'Документ всеми согласован'");
	АлгоритмПроверкиОбъект.ВыражениеУсловия =
		"Результат = Истина;
		|Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Предмет) Тогда
		|	ПараметрыАлгоритма = Новый Структура(""Документ, ТолькоАктивные"", Предмет.Ссылка, Истина);
		|	ВсеВизыДокумента = Справочники.Алгоритмы.Вызвать(""ВсеВизыДокумента"", ПараметрыАлгоритма);
		|	Для Каждого СтрВиза Из ВсеВизыДокумента Цикл
		|		Если Не ЗначениеЗаполнено(СтрВиза.РезультатСогласования)
		|			Или СтрВиза.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда
		|			Результат = Ложь;
		|			Прервать;
		|		КонецЕсли;
		|	КонецЦикла;
		|КонецЕсли;";
	АлгоритмПроверкиОбъект.СпособЗаданияУсловия =
		Перечисления.СпособыЗаданияУсловия.НаВстроенномЯзыке;
	АлгоритмПроверкиОбъект.ТипОбъекта = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(АлгоритмПроверкиОбъект);
	
	АлгоритмПроверкиОбъект = ОтветОтправлен.ПолучитьОбъект();
	АлгоритмПроверкиОбъект.Наименование = НСтр("ru = 'Ответ на входящий документ отправлен'");
	АлгоритмПроверкиОбъект.ВыражениеУсловия =
		"Результат = Ложь;
		|Если ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(Предмет) Тогда
		|	ПараметрыАлгоритма = Новый Структура;
		|	ПараметрыАлгоритма.Вставить(""Объект"", Предмет.Ссылка);
		|	ПараметрыАлгоритма.Вставить(""ТипСвязи"", Справочники.ТипыСвязей.ОтправленОтвет);
		|	
		|	// Получим связанный ответный документ
		|	СвязанныйОбъект = Справочники.Алгоритмы.Вызвать(""СвязанныйОбъект"", ПараметрыАлгоритма);
		|	Если ЗначениеЗаполнено(СвязанныйОбъект)
		|		И ДелопроизводствоКлиентСервер.ЭтоИсходящийДокумент(СвязанныйОбъект) Тогда
		|		// Если документ найден, то проверяем данные корреспонденции
		|		КорреспонденцияДокумента = РаботаСКорреспонденцией.КорреспонденцияДокумента(СвязанныйОбъект);
		|		Если ЗначениеЗаполнено(КорреспонденцияДокумента) Тогда 
		|			Результат = Истина;
		|			КорреспондентыВыборка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		|				КорреспонденцияДокумента, ""Корреспонденты"").Выбрать();
		|			// Проверим, что Отправлен по всем корреспондентам
		|			Пока КорреспондентыВыборка.Следующий() Цикл 
		|				Если Не КорреспондентыВыборка.Отправлен Тогда 
		|					Результат = Ложь;
		|					Прервать;
		|				КонецЕсли;
		|			КонецЦикла;
		|		КонецЕсли;
		|	КонецЕсли;
		|КонецЕсли;";
	АлгоритмПроверкиОбъект.СпособЗаданияУсловия =
		Перечисления.СпособыЗаданияУсловия.НаВстроенномЯзыке;
	АлгоритмПроверкиОбъект.ТипОбъекта = Перечисления.ТипыОбъектов.ДокументыПредприятия;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(АлгоритмПроверкиОбъект);
	
КонецПроцедуры

// Возвращает структуру полей алгоритма проверки
//
// Возвращаемое значение:
//   Структура
//     Наименование
//     ТипОбъекта
//     СпособЗаданияУсловия
//     ВыражениеУсловия
//     НастройкаУсловия
//     НастройкаКомбинацииУсловий
//     Ответственный
//     Комментарий
//
Функция ПолучитьСтруктуруАлгоритмаПроверки() Экспорт
	
	СтруктураАлгоритмаПроверки = Новый Структура;
	СтруктураАлгоритмаПроверки.Вставить("Наименование");
	СтруктураАлгоритмаПроверки.Вставить("ТипОбъекта");
	СтруктураАлгоритмаПроверки.Вставить("СпособЗаданияУсловия");
	СтруктураАлгоритмаПроверки.Вставить("ВыражениеУсловия");
	СтруктураАлгоритмаПроверки.Вставить("НастройкаУсловия");
	СтруктураАлгоритмаПроверки.Вставить("НастройкаКомбинацииУсловий");
	СтруктураАлгоритмаПроверки.Вставить("Ответственный");
	СтруктураАлгоритмаПроверки.Вставить("Комментарий");
	
	Возврат СтруктураАлгоритмаПроверки;
	
КонецФункции

// Создает и запсывает в БД алгоритм проверки
//
// Параметры:
//   СтруктураАлгоритмыПроверки - Структура - структура полей алгоритма проверки.
//
// Возвращаемое значение:
//   СправочникСсылка.АлгоритмыПроверки
//
Функция СоздатьАлгоритмПроверки(СтруктураАлгоритмыПроверки) Экспорт
	
	НовыйАлгоритмПроверки = СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НовыйАлгоритмПроверки, СтруктураАлгоритмыПроверки);
	НовыйАлгоритмПроверки.Записать();
	
	Возврат НовыйАлгоритмПроверки.Ссылка;
	
КонецФункции

// Возвращает выражение для выполнения проверки условия
// 
// Параметры:
// 	Условие - СправочникСсылка.АлгоритмыПроверки, ДанныеФормыСтруктура - ссылка, или проверяемое условие.
// 	
// Возвращаемое значение:
// 	Строка - выражение для выполнения проверки условия
//
Функция ПолноеВыражениеУсловия(Условие, РеквизитыУсловия = Неопределено) Экспорт
	
	МассивВыражений = Новый Массив;
	
	РеквизитыУсловия = Условие;
	Если ТипЗнч(Условие) = Тип("СправочникСсылка.АлгоритмыПроверки")
		И РеквизитыУсловия = Неопределено Тогда
		РеквизитыУсловия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Условие, "ВыражениеУсловия, Параметры");
		РеквизитыУсловия.Параметры = РеквизитыУсловия.Параметры.Выгрузить();
	КонецЕсли;
	
	Для Каждого СтрокаПараметра Из РеквизитыУсловия.Параметры Цикл
		Если СтрокаПараметра.Значение = Неопределено Тогда
			ВыражениеЗначения = "Неопределено";
		Иначе
			МетаданныеЗначения = СтрокаПараметра.Значение.Метаданные();
			Менеджер = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(МетаданныеЗначения) + "." + МетаданныеЗначения.Имя;
			Если ОбщегоНазначения.ЭтоСправочник(МетаданныеЗначения)
				И СтрокаПараметра.Значение.Предопределенный Тогда
				ВыражениеЗначения = СтрШаблон("%1.%2",
					Менеджер, СтрокаПараметра.Значение.ИмяПредопределенныхДанных);
			Иначе
				Идентификатор = Строка(СтрокаПараметра.Значение.УникальныйИдентификатор());
				ВыражениеЗначения = СтрШаблон("%1.ПолучитьСсылку(Новый УникальныйИдентификатор(""%2""))",
					Менеджер, Идентификатор);
			КонецЕсли;
		КонецЕсли;
		МассивВыражений.Добавить(СтрШаблон("%1 = %2;", СтрокаПараметра.Имя, ВыражениеЗначения));
	КонецЦикла;
	
	МассивВыражений.Добавить(РеквизитыУсловия.ВыражениеУсловия);
	
	Возврат СтрСоединить(МассивВыражений, Символы.ПС);
	
КонецФункции

#КонецОбласти

#КонецЕсли