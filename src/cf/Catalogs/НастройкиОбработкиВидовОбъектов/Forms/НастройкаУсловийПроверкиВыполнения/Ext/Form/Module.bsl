
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ВидДействия = Параметры.ВидДействия;
	НастройкаОбработки = Параметры.НастройкаОбработки;
	ПоляНастройкиОбработки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаОбработки, "УсловияПроверкиВыполнения, ВидОбъекта");
	Выборка = ПоляНастройкиОбработки.УсловияПроверкиВыполнения.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидДействия <> ВидДействия Тогда
			Продолжить;
		КонецЕсли;
		
		НовСтр = УсловияПроверки.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
	КонецЦикла;
	
	Заголовок = СтрШаблон(НСтр("ru = 'Условия проверки выполнения действия ""%1""'"), ВидДействия);
	
	ТипОбъекта = ОбщегоНазначенияДокументооборотКлиентСервер.ТипОбъектаПоТипуВидаОбъекта(
		ТипЗнч(ПоляНастройкиОбработки.ВидОбъекта));
	ТипыОбъектов.Добавить(Перечисления.ТипыОбъектов.ДействиеЗадачи);
	ТипыОбъектов.Добавить(ТипОбъекта);
	
	Если Параметры.Свойство("ТолькоПросмотр") Тогда
		ТолькоПросмотр = Параметры.ТолькоПросмотр;
	КонецЕсли;
	
	ТипДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДействия, "Тип");
	Элементы.УсловияПроверкиЭтап.Видимость = ДействияКлиентСервер.ЭтоТипДействияСЭтапами(ТипДействия);
	
	Элементы.УсловияПроверкиФункция.РежимВыбораИзСписка = Истина;
	Элементы.УсловияПроверкиФункция.БыстрыйВыбор = Истина;
	СписокВыбора = Элементы.УсловияПроверкиФункция.СписокВыбора;
	Если ТипДействия = Перечисления.ТипыДействий.Исполнение Тогда
		СписокВыбора.Добавить(Перечисления.ФункцииУчастниковИсполнения.Рассматривающий);
		СписокВыбора.Добавить(Перечисления.ФункцииУчастниковИсполнения.Исполнитель);
		СписокВыбора.Добавить(Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат);
	ИначеЕсли ТипДействия = Перечисления.ТипыДействий.Ознакомление Тогда
		Элементы.УсловияПроверкиФункция.Видимость = Ложь; // В действиях ознакомления в ТЧ нет Функций участников.
	ИначеЕсли ТипДействия = Перечисления.ТипыДействий.Подписание Тогда
		СписокВыбора.Добавить(Перечисления.ФункцииУчастниковПодписания.Подписывающий);
		СписокВыбора.Добавить(Перечисления.ФункцииУчастниковПодписания.ОбрабатывающийРезультат);
	ИначеЕсли ТипДействия = Перечисления.ТипыДействий.Регистрация Тогда
		СписокВыбора.Добавить(Перечисления.ФункцииУчастниковРегистрации.Регистратор);
		СписокВыбора.Добавить(Перечисления.ФункцииУчастниковРегистрации.ОбрабатывающийРезультат);
	ИначеЕсли ТипДействия = Перечисления.ТипыДействий.Согласование Тогда
		СписокВыбора.Добавить(Перечисления.ФункцииУчастниковСогласования.Согласующий);
		СписокВыбора.Добавить(Перечисления.ФункцииУчастниковСогласования.ОбрабатывающийРезультат);
	ИначеЕсли ТипДействия = Перечисления.ТипыДействий.Утверждение Тогда
		СписокВыбора.Добавить(Перечисления.ФункцииУчастниковУтверждения.Утверждающий);
		СписокВыбора.Добавить(Перечисления.ФункцииУчастниковУтверждения.ОбрабатывающийРезультат);
	Иначе
		ВызватьИсключение НСтр("ru = 'Непредвиденный тип действия, обратитесь к администратору'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУсловияПроверки

&НаКлиенте
Процедура УсловияПроверкиПередНачаломИзменения(Элемент, Отказ)
	
	// Для типа действия с этапами сам этап можно выбрать только на основную функцию и не надо 
	// на Обрабатывающий результат - там нет этапов и условие не отработает
	Если Элемент.ТекущийЭлемент.Имя = "УсловияПроверкиЭтап" Тогда
		
		ФункцияУчастника = Элемент.ТекущиеДанные.Функция;
		Если ЭтоФункцияБезЭтапов(ФункцияУчастника) Тогда
			Отказ = Истина;
			ОчиститьСообщения();
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Для функции ""%1"" нет этапов, редактирование невозможно.'"), ФункцияУчастника));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияПроверкиУсловиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипыОбъектов", ТипыОбъектов);

	ОткрытьФорму("Справочник.АлгоритмыПроверки.ФормаВыбора",
		ПараметрыФормы,
		Элемент,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура УсловияПроверкиУсловиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораУсловий(Текст);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УсловияПроверкиУсловиеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораУсловий(Текст);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УсловияПроверкиФункцияПриИзменении(Элемент)
	
	ДоступностьЭтапа();
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияПроверкиЭтапАвтоПодбор(
	Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекстПоиска = СокрЛП(Текст);
	Если Не ЗначениеЗаполнено(ТекстПоиска)
		Или СтрДлина(ТекстПоиска) < 2 Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = РаботаСЭтапамиВызовСервера.ДанныеВыбора(ТекстПоиска, ТипДействия, Новый Массив());
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияПроверкиЭтапПриИзменении(Элемент)
	
	ДоступностьЭтапа();
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияПроверкиЭтапОбработкаВыбора(
	Элемент, ВыбранноеЗначение, ДополнительныеДанные, ВыборДобавлением, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.УсловияПроверки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные.Этап = ВыбранноеЗначение;
	ДоступностьЭтапа();
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияПроверкиЭтапОткрытие(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.УсловияПроверки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ТекущиеДанные.Этап);
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияПроверкиЭтапОкончаниеВводаТекста(
	Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекстПоиска = СокрЛП(Текст);
	Если ТекстПоиска = "" Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = РаботаСЭтапамиВызовСервера.ДанныеВыбора(ТекстПоиска, ТипДействия, Новый Массив());
	ДоступностьЭтапа();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	ОчиститьСообщения();
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(УсловияПроверки, "Условие");
	ОбщегоНазначенияДокументооборотКлиент.УдалитьДублиСтрокТаблицы(УсловияПроверки, "Условие, Функция, Этап");
	
	Для Каждого СтрУсловие Из УсловияПроверки Цикл
		Если Не ЗначениеЗаполнено(СтрУсловие.ТекстПредупреждения) Тогда 
			НомерСтроки = УсловияПроверки.Индекс(СтрУсловие);
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Поле ""Текст предупреждения"" не заполнено'"),,
				"УсловияПроверки["+Формат(НомерСтроки, "ЧН=; ЧГ=")+"].ТекстПредупреждения");
			Возврат;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрУсловие.Условие) Тогда 
			НомерСтроки = УсловияПроверки.Индекс(СтрУсловие);
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Поле ""Условие"" не заполнено'"),,
				"УсловияПроверки["+Формат(НомерСтроки, "ЧН=; ЧГ=")+"].Условие");
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ОКНаСервере();
	Закрыть(ПредставлениеУсловий);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработчикВыбораФункцииУчастника(ВыбранныйЭлемент, ДопПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.УсловияПроверки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные.Функция = ВыбранныйЭлемент.Значение;
	
КонецПроцедуры

&НаСервере
Функция СформироватьДанныеВыбораУсловий(Текст)
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Условия.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.АлгоритмыПроверки КАК Условия
		|ГДЕ
		|	Условия.Наименование ПОДОБНО &Текст
		|	И Не Условия.ПометкаУдаления
		|	И Условия.ТипОбъекта В (&ТипыОбъектов)";
	
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	Запрос.УстановитьПараметр("ТипыОбъектов", ТипыОбъектов);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла;
		
	Возврат ДанныеВыбора;
	
КонецФункции

&НаСервере
Процедура ОКНаСервере()
	
	НастройкаОбъект = НастройкаОбработки.ПолучитьОбъект();
	ТекущиеУсловия = НастройкаОбъект.УсловияПроверкиВыполнения.Выгрузить();
	НастройкаОбъект.УсловияПроверкиВыполнения.Очистить();
	Для Каждого ТекУсловие Из ТекущиеУсловия Цикл
		Если ТекУсловие.ВидДействия = ВидДействия Тогда
			Продолжить;
		КонецЕсли;
		
		НовСтр = НастройкаОбъект.УсловияПроверкиВыполнения.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ТекУсловие);
	КонецЦикла;
	
	Для Каждого Стр Из УсловияПроверки Цикл
		НовСтр = НастройкаОбъект.УсловияПроверкиВыполнения.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Стр);
		НовСтр.ВидДействия = ВидДействия; 
	КонецЦикла;
	
	НастройкаОбъект.Записать();
	
	ПредставлениеУсловий = СтрСоединить(УсловияПроверки.Выгрузить().ВыгрузитьКолонку("Условие"),
		"; ");
	
КонецПроцедуры

// Для действий с этапами, но на этих функциях нет этапов
&НаКлиенте
Функция ЭтоФункцияБезЭтапов(ФункцияУчастника)
	
	Возврат ФункцияУчастника
		= ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.ОбрабатывающийРезультат")
		Или ФункцияУчастника
		= ПредопределенноеЗначение("Перечисление.ФункцииУчастниковСогласования.ОбрабатывающийРезультат")
		Или Не ЗначениеЗаполнено(ФункцияУчастника);
	
КонецФункции

&НаКлиенте
Процедура ДоступностьЭтапа()
	
	ТекущиеДанные = Элементы.УсловияПроверки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Этап) И ЭтоФункцияБезЭтапов(ТекущиеДанные.Функция) Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Для функции ""%1"" нет этапов - поле ""Этап"" очищено'"), ТекущиеДанные.Функция));
		ТекущиеДанные.Этап = "";
	КонецЕсли;

КонецПроцедуры

#КонецОбласти