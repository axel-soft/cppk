#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает структуру данных для заполнения.
// 
// Возвращаемое значение:
//  Структура
//    * ВидОбъекта - ОпределяемыйТип.ВидОбъектаСОбработкой
//    * ДействуетС - Дата
//    * ДействуетПо - Дата
//    * ВидыДействий - Массив
//      ** СправочникСсылка.ВидыДействий
//
Функция СтруктураДанныхДляЗаполнения() Экспорт
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ВидОбъекта", Неопределено);
	СтруктураДанных.Вставить("ДействуетС", Дата(1, 1, 1));
	СтруктураДанных.Вставить("ДействуетПо", Дата(1, 1, 1));
	СтруктураДанных.Вставить("ВидыДействий", Новый Массив());
	
	Возврат СтруктураДанных;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Заполняет наименование по виду объекта и периоду действия. 
// 
Процедура ЗаполнитьНаименование() Экспорт
	
	СтрокиНаименования = Новый Массив;
	
	СтрокиНаименования.Добавить(Строка(ВидОбъекта));
	СтрокиНаименования.Добавить(". ");
	
	СтрокиНаименования.Добавить(Формат(ДействуетС, "ДФ=dd.MM.yyyy;"));
	
	Если ЗначениеЗаполнено(ДействуетПо) Тогда
		СтрокиНаименования.Добавить(" - ");
		СтрокиНаименования.Добавить(Формат(ДействуетПо, "ДФ=dd.MM.yyyy;"));	
	КонецЕсли;
	
	Наименование = СтрСоединить(СтрокиНаименования);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	// Заполнение по структуре особого типа (см. СтруктураДанныхДляЗаполнения).
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ВидОбъекта <> ДанныеЗаполнения.ВидОбъекта Тогда
			ВидОбъекта = ДанныеЗаполнения.ВидОбъекта;
		КонецЕсли;
		
		Если ДействуетС <> ДанныеЗаполнения.ДействуетС Тогда
			ДействуетС = ДанныеЗаполнения.ДействуетС;
		КонецЕсли;
		
		Если ДействуетПо <> ДанныеЗаполнения.ДействуетПо Тогда
			ДействуетПо = ДанныеЗаполнения.ДействуетПо;
		КонецЕсли;
				
		ТекущиеВидыДействий = Новый Массив;
		Для Каждого СтрокаТаблицы Из ВидыДействий Цикл
			ТекущиеВидыДействий.Добавить(СтрокаТаблицы.ВидДействия);
		КонецЦикла;
		Если Не ОбщегоНазначения.ДанныеСовпадают(
			ТекущиеВидыДействий, ДанныеЗаполнения.ВидыДействий) Тогда			
			ВидыДействий.Очистить();
			Для Каждого ВидДействия	Из ДанныеЗаполнения.ВидыДействий Цикл
				СтрокаТаблицы = ВидыДействий.Добавить();
				СтрокаТаблицы.ВидДействия = ВидДействия;
			КонецЦикла;
			
			ТекущиеУсловияПроверкиВыполнения = УсловияПроверкиВыполнения.Выгрузить();
			УсловияПроверкиВыполнения.Очистить();
			Для Каждого УсловиеПроверки	Из ТекущиеУсловияПроверкиВыполнения Цикл
				СтрНайти = ВидыДействий.НайтиСтроки(Новый Структура("ВидДействия", УсловиеПроверки.ВидДействия));
				Если СтрНайти.Количество() > 0 Тогда
					СтрокаТаблицы = УсловияПроверкиВыполнения.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, УсловиеПроверки);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Автор) Тогда
		Автор = Сотрудники.ОсновнойСотрудник();
	КонецЕсли;
	
	Если ВидыДействий.Количество() = 0 И Не ПометкаУдаления Тогда
		ПометкаУдаления = Истина;
	КонецЕсли;
	
	ЗаполнитьНаименование();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСПроцессамиПоОбработкамОбъектовСобытия.ПриЗаписиНастройкиОбработкиВидаОбъекта(ЭтотОбъект);
	
	ДействияСервер.ОбновитьПодпискуНаБизнесСобытия(ВидБизнесСобытия);
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСПроцессамиПоОбработкамОбъектовСобытия.ПередУдалениемНастройкиОбработкиВидаОбъекта(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Иначе
	ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли