#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВидимостьКомандыСравнить = 
		Не ОбщегоНазначения.ЭтоLinuxКлиент() И Не ОбщегоНазначения.ЭтоВебКлиент();
	Элементы.ФормаСравнить.Видимость = ВидимостьКомандыСравнить; 
	
	УстановитьВидимостьЭлементовЭП();
	
	Исполнитель = Объект.Исполнитель;
	Если Сотрудники.ПолСотрудника(Исполнитель, Истина) = Перечисления.ПолФизическогоЛица.Женский Тогда
		Заголовок = СтрШаблон(НСтр("ru = 'Версии файлов, с которыми ознакомилась %1'"), Исполнитель);
	Иначе 
		Заголовок = СтрШаблон(НСтр("ru = 'Версии файлов, с которыми ознакомился %1'"), Исполнитель);
	КонецЕсли;
	
	ЗаполнитьДеревоВерсий();
	ЗаполнитьДанныеЭП();
	УстановитьУсловноеОформление();
	
КонецПроцедуры  

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьКарточкуВерсии(Команда)
	
	ТекущиеДанные = Элементы.ДеревоВерсий.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	 
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВерсию(Команда)
	
	ТекущиеДанные = Элементы.ДеревоВерсий.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФормамиСравненияВерсийКлиент.ОткрытьВерсиюНаКлиенте(ЭтотОбъект, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Сравнить(Команда)
	
	РаботаСФормамиСравненияВерсийКлиент.СравнитьВерсииФайловВДереве(ЭтотОбъект, ДеревоВерсий);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ВыгрузитьXML(Команда)
	
	ДвоичныеДанные = ДвоичныеДанныеФайлаXML();
	
	Если ДвоичныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ВыборФайла.ПолноеИмяФайла = НСтр("ru = 'Схема данных подписи'");
	ВыборФайла.Фильтр = "Файл .xml(*.xml)|*.xml";
	Результат = Ждать ВыборФайла.ВыбратьАсинх();
	Если Результат <> Неопределено Тогда
		ДвоичныеДанные.Записать(ВыборФайла.ПолноеИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьБинарникЭП(Команда)
	
	АдресПодписи = АдресДвоичныхДанныхПодписи(); 
	ЭлектроннаяПодписьСлужебныйКлиент.СохранитьПодпись(АдресПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодпись(Команда)
	
	Если ДанныеЭП = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Данные ознакомления не подписаны!'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	РаботаСЭПКлиент.ОткрытьПодпись(ДанныеЭП, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодпись(Команда)
	
	Если ДанныеЭП = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Данные ознакомления не подписаны!'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	МассивПодписей = Новый Массив;
	МассивПодписей.Добавить(ДанныеЭП);
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПроверитьЭПЗавершение", ЭтотОбъект);
	
	ПараметрыПроверки = РаботаСЭПКлиент.НовыеПараметрыПроверкиПодписей();
	ПараметрыПроверки.ИмяТаблицыЭП = "";
	ПараметрыПроверки.ВыделенныеСтроки = МассивПодписей;
	ПараметрыПроверки.ПерезаполнитьВыделенныеСтроки = Истина;
	
	РаботаСЭПКлиент.ПроверитьПодписи(ЭтотОбъект, ПараметрыПроверки, ОбработчикЗавершения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоВерсий

&НаКлиенте
Процедура ДеревоВерсийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоВерсий.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФормамиСравненияВерсийКлиент.ОткрытьВерсиюНаКлиенте(ЭтотОбъект, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВерсийПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ДеревоВерсий.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	 
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВидимостьЭлементовЭП()
	
	Элементы.ГруппаВыгрузить.Видимость = Объект.Подписана;
	Элементы.ГруппаКомандыЭП.Видимость = Объект.Подписана;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеЭП()
	
	Если Объект.Подписана Тогда
		ДанныеЭП = РаботаСЭП.ЗаполнитьДанныеПодписиОбъекта(Объект.Ссылка, УникальныйИдентификатор);
	Иначе
		ДанныеЭП = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоВерсий()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТекущиеВерсииФайловОзнакомления.Файл КАК Файл,
	|	ТекущиеВерсииФайловОзнакомления.ВерсияФайла КАК ТекущаяВерсия,
	|	ТекущиеВерсииФайловОзнакомления.ХэшСуммаВерсииФайла КАК ХэшСуммаТекущейВерсииФайла
	|ПОМЕСТИТЬ ТекущиеВерсииФайловОзнакомления
	|ИЗ
	|	&ТекущиеВерсииФайловОзнакомления КАК ТекущиеВерсииФайловОзнакомления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыПредприятия.Ссылка КАК ДокументПредприятия
	|ПОМЕСТИТЬ ДокументОзнакомления
	|ИЗ
	|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДанныеОзнакомленияПодПодпись КАК ДанныеОзнакомленияПодПодпись
	|		ПО (ДанныеОзнакомленияПодПодпись.Документ = ДокументыПредприятия.Ссылка)
	|ГДЕ
	|	ДанныеОзнакомленияПодПодпись.Ссылка = &ОбъектДанныхОзнакомления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОзнакомленияПодПодписьВерсииФайлов.ВерсияФайла КАК ВерсияФайла,
	|	ВерсииФайлов.Владелец КАК Файл,
	|	ВерсииФайлов.ПометкаУдаления КАК ПометкаУдаления,
	|	ДанныеОзнакомленияПодПодписьВерсииФайлов.ХэшСуммаВерсииФайла КАК ХэшСуммаВерсииФайла
	|ПОМЕСТИТЬ ВерсииФайловОзнакомления
	|ИЗ
	|	Справочник.ДанныеОзнакомленияПодПодпись.ВерсииФайлов КАК ДанныеОзнакомленияПодПодписьВерсииФайлов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
	|		ПО ДанныеОзнакомленияПодПодписьВерсииФайлов.ВерсияФайла = ВерсииФайлов.Ссылка
	|ГДЕ
	|	ДанныеОзнакомленияПодПодписьВерсииФайлов.Ссылка = &ОбъектДанныхОзнакомления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВерсииФайловОзнакомления.ВерсияФайла КАК Ссылка,
	|	ВерсииФайловОзнакомления.ХэшСуммаВерсииФайла = ТекущиеВерсииФайловОзнакомления.ХэшСуммаТекущейВерсииФайла КАК ЭтоТекущая,
	|	ВЫБОР
	|		КОГДА ВерсииФайловОзнакомления.ПометкаУдаления
	|			ТОГДА &ВерсияУдалена
	|		КОГДА ВерсииФайловОзнакомления.ХэшСуммаВерсииФайла = ТекущиеВерсииФайловОзнакомления.ХэшСуммаТекущейВерсииФайла
	|			ТОГДА &СТекущейВерсиейОзнакомлен
	|		ИНАЧЕ &ОзнакомленСЭтойВерсией
	|	КОНЕЦ КАК Комментарий,
	|	ВерсииФайлов.ПометкаУдаления КАК ПометкаУдаления,
	|	ВерсииФайлов.Владелец КАК Владелец
	|ПОМЕСТИТЬ ВерсииФайловСКоторымиПользовательОзнакомился
	|ИЗ
	|	ТекущиеВерсииФайловОзнакомления КАК ТекущиеВерсииФайловОзнакомления
	|		ПРАВОЕ СОЕДИНЕНИЕ ВерсииФайловОзнакомления КАК ВерсииФайловОзнакомления
	|		ПО ТекущиеВерсииФайловОзнакомления.Файл = ВерсииФайловОзнакомления.Файл
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
	|		ПО (ВерсииФайлов.Ссылка = ВерсииФайловОзнакомления.ВерсияФайла)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВерсииФайловСКоторымиПользовательОзнакомился.Ссылка КАК Ссылка,
	|	ИСТИНА КАК ФайлБылПриОзнакомлении,
	|	ВерсииФайловСКоторымиПользовательОзнакомился.ЭтоТекущая КАК ЭтоТекущая,
	|	ВерсииФайловСКоторымиПользовательОзнакомился.Комментарий КАК Комментарий
	|ПОМЕСТИТЬ ВсеНужныеВерсии
	|ИЗ
	|	ВерсииФайловСКоторымиПользовательОзнакомился КАК ВерсииФайловСКоторымиПользовательОзнакомился
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТекущиеВерсииФайловОзнакомления.ТекущаяВерсия,
	|	ИСТИНА,
	|	ИСТИНА,
	|	&ТекущаяВерсия
	|ИЗ
	|	ВерсииФайловСКоторымиПользовательОзнакомился КАК ВерсииФайловСКоторымиПользовательОзнакомился
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТекущиеВерсииФайловОзнакомления КАК ТекущиеВерсииФайловОзнакомления
	|		ПО ВерсииФайловСКоторымиПользовательОзнакомился.Владелец = ТекущиеВерсииФайловОзнакомления.Файл
	|			И (НЕ ВерсииФайловСКоторымиПользовательОзнакомился.ЭтоТекущая)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТекущиеВерсииФайловОзнакомления.ТекущаяВерсия,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	&ВерсияДобавленаПослеОзнакомления
	|ИЗ
	|	ТекущиеВерсииФайловОзнакомления КАК ТекущиеВерсииФайловОзнакомления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВерсииФайловСКоторымиПользовательОзнакомился КАК ВерсииФайловСКоторымиПользовательОзнакомился
	|		ПО (ВерсииФайловСКоторымиПользовательОзнакомился.Владелец = ТекущиеВерсииФайловОзнакомления.Файл)
	|ГДЕ
	|	ВерсииФайловСКоторымиПользовательОзнакомился.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеНужныеВерсии.Ссылка КАК Ссылка,
	|	ВсеНужныеВерсии.ФайлБылПриОзнакомлении КАК ФайлБылПриОзнакомлении,
	|	ВсеНужныеВерсии.ЭтоТекущая КАК ЭтоТекущая,
	|	ВсеНужныеВерсии.Комментарий КАК СтатусОзнакомления,
	|	ВерсииФайлов.Код КАК Код,
	|	ВерсииФайлов.Размер КАК Размер,
	|	ВерсииФайлов.Автор КАК Автор,
	|	ВерсииФайлов.ДатаСоздания КАК ДатаСоздания,
	|	ВерсииФайлов.ПолноеНаименование КАК Представление,
	|	ВерсииФайлов.РодительскаяВерсия КАК РодительскаяВерсия,
	|	ВЫБОР
	|		КОГДА ВерсииФайлов.ПометкаУдаления
	|			ТОГДА ВерсииФайлов.ИндексКартинки + 1
	|		ИНАЧЕ ВерсииФайлов.ИндексКартинки
	|	КОНЕЦ КАК ИндексКартинки,
	|	ВерсииФайлов.ПометкаУдаления КАК ПометкаУдаления,
	|	ВерсииФайлов.Владелец КАК Владелец,
	|	ВерсииФайлов.Расширение КАК Расширение,
	|	ВерсииФайлов.НомерВерсии КАК НомерВерсии,
	|	ВерсииФайлов.НеМеняетСути КАК НеМеняетСути,
	|	ЕСТЬNULL(СведенияОФайлахДокументооборот.ЯвляетсяОригиналом, ЛОЖЬ) КАК ЯвляетсяОригиналом,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СведенияОФайлахДокументооборот.ЯвляетсяОригиналом, ЛОЖЬ)
	|			ТОГДА 0
	|		ИНАЧЕ -1
	|	КОНЕЦ КАК ИндексКартинкиЯвляетсяОригиналом
	|ИЗ
	|	ВсеНужныеВерсии КАК ВсеНужныеВерсии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФайлахДокументооборот КАК СведенияОФайлахДокументооборот
	|			ПО ВерсииФайлов.Владелец = СведенияОФайлахДокументооборот.Файл
	|		ПО ВсеНужныеВерсии.Ссылка = ВерсииФайлов.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Владелец,
	|	НомерВерсии УБЫВ");
	
	Запрос.УстановитьПараметр("ОбъектДанныхОзнакомления", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТекущиеВерсииФайловОзнакомления", 
		Справочники.ДанныеОзнакомленияПодПодпись.ВерсииФайловПоДокументуИИхХэшСуммы(Объект.Документ));
	
	Запрос.УстановитьПараметр("СТекущейВерсиейОзнакомлен", НСтр("ru = 'Ознакомлен(-а) с текущей версией'"));
	Запрос.УстановитьПараметр("ОзнакомленСЭтойВерсией", НСтр("ru = 'Ознакомлен(-а) с этой версией'"));
	Запрос.УстановитьПараметр("ТекущаяВерсия", Справочники.ВерсииФайлов.ТекстНадписиТекущаяВерсия());
	Запрос.УстановитьПараметр("ВерсияУдалена", Справочники.ВерсииФайлов.ТекстНадписиВерсияУдалена());
	Запрос.УстановитьПараметр("ВерсияДобавленаПослеОзнакомления", НСтр("ru = 'Версия добавлена после ознакомления'"));
	
	Данные = Запрос.Выполнить().Выгрузить();

	Дерево = РеквизитФормыВЗначение("ДеревоВерсий");
	Дерево.Строки.Очистить();
	
	Для Каждого Строка Из Данные Цикл
		
		СтрокаРодителя = Дерево.Строки.НайтиСтроки(Новый Структура("Ссылка", Строка.Владелец));
		Если СтрокаРодителя.Количество() > 0 Тогда
			Ветвь = СтрокаРодителя[0].Строки.Добавить();
		Иначе
			
			ВетвьРодителя = Дерево.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(ВетвьРодителя, Строка);
			ВетвьРодителя.Ссылка = Строка.Владелец;
			Если Строка.ЯвляетсяОригиналом Тогда
				ВетвьРодителя.СтатусОзнакомления = НСтр("ru = 'Скан-копия оригинала документа'");
			Иначе
				ВетвьРодителя.СтатусОзнакомления = "";
			КонецЕсли;
			ВетвьРодителя.ЭтоРодитель = Истина;
			
			Ветвь = ВетвьРодителя.Строки.Добавить();
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Ветвь, Строка);
		Ветвь.ИндексКартинки = -1;
		Ветвь.ИндексКартинкиЯвляетсяОригиналом = -1;
		Ветвь.ЯвляетсяОригиналом = Строка.ЯвляетсяОригиналом;
		Ветвь.Представление = СтрШаблон(НСтр("ru = 'Версия №%1'"), Ветвь.НомерВерсии); 
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоВерсий");
	
КонецПроцедуры

// Формирует XML и возвращает его Двоичные данные
// 
// Возвращаемое значение:
//  ДвоичныеДанные
//
&НаСервере
Функция ДвоичныеДанныеФайлаXML()
	
	ВерсияПодписи = Неопределено;
	Если ДанныеЭП <> Неопределено Тогда
		ВерсияПодписи = ДанныеЭП.Версия;
	КонецЕсли;
	
	Возврат Справочники.ДанныеОзнакомленияПодПодпись.ДвоичныеДанныеОзнакомленияПодПодпись(Объект.Ссылка, ВерсияПодписи);
	
КонецФункции

// Возвращает адрес подписи
// Если к объекту нет ЭП, то возвращает Неопределено
//
// Возвращаемое значение:
//  Строка, Неопределено
//
&НаСервере
Функция АдресДвоичныхДанныхПодписи()
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлектронныеПодписи.Подпись КАК Подпись
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭлектронныеПодписи
		|ГДЕ
		|	ЭлектронныеПодписи.ПодписанныйОбъект = &Объект";
	
	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда
		Возврат ПоместитьВоВременноеХранилище(Выборка.Подпись.Получить());
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура УстановитьУсловноеОформление()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементВидимостьОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Видимость");
	ЭлементВидимостьОформления.Значение = Ложь;
	ЭлементВидимостьОформления.Использование = Истина;
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоВерсий.ЭтоРодитель");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина; 
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("ДеревоВерсийИндексКартинки");
	ЭлементОформляемогоПоля.Использование = Истина;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ГруппаИ = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ЭлементОтбораДанных = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоВерсий.ЯвляетсяОригиналом");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоВерсий.ПометкаУдаления");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ГруппаИли = ГруппаИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ЭлементШрифтаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
	ЭлементШрифтаОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,, Истина);
	ЭлементШрифтаОформления.Использование = Истина;
	ЭлементШрифтаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементШрифтаОформления.Значение = Новый Цвет(255,0,0);
	ЭлементШрифтаОформления.Использование = Истина;
	ЭлементОтбораДанных = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоВерсий.ЭтоТекущая");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь; 
	ЭлементОтбораДанных = ГруппаИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоВерсий.ФайлБылПриОзнакомлении");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("ДеревоВерсийСтатусОзнакомления");
	ЭлементОформляемогоПоля.Использование = Истина;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементШрифтаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
	ЭлементШрифтаОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,, Истина);
	ЭлементШрифтаОформления.Использование = Истина;
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоВерсий.ЭтоРодитель");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоВерсий.ЯвляетсяОригиналом");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("ДеревоВерсийСтатусОзнакомления");
	ЭлементОформляемогоПоля.Использование = Истина;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементШрифтаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
	ЭлементШрифтаОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,,,, Истина);
	ЭлементШрифтаОформления.Использование = Истина;
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоВерсий.ПометкаУдаления");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("ДеревоВерсий");
	ЭлементОформляемогоПоля.Использование = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЭПЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура")
		Или Не Результат.Свойство("Успех")
		Или Результат.Успех <> Истина Тогда
		
		Возврат;
	КонецЕсли;
	
	РаботаСЭПКлиент.ОтобразитьРезультатПроверкиПодписей(Результат);
	
КонецПроцедуры

#КонецОбласти

