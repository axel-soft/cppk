
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПраваНаИзменениеОграничены = Не Пользователи.ЭтоПолноправныйПользователь(,, Ложь)
		И Не РольДоступна(Метаданные.Роли.ДобавлениеИзменениеЗамещающихИПомощниковБезОграничения);
	
	// Заголовки и другие тексты.
	Если Объект.ВидЗамещения = Перечисления.ВидыЗамещения.Замещающие Тогда
		Заголовок = СтрШаблон(НСтр("ru = 'Замещающий %1'"), Объект.Наименование);
		Элементы.Замещающий.Заголовок = НСтр("ru = 'Замещающий'");
		Элементы.Комментарий.ПодсказкаВвода =
			НСтр("ru = 'Номер доверенности, приказа или любая другая информация'");
	ИначеЕсли Объект.ВидЗамещения = Перечисления.ВидыЗамещения.Помощники Тогда
		Заголовок = СтрШаблон(НСтр("ru = 'Помощник %1'"), Объект.Наименование);
		Элементы.Замещающий.Заголовок = НСтр("ru = 'Помощник'");
		Элементы.Комментарий.ПодсказкаВвода = НСтр("ru = 'Комментарий'");
	КонецЕсли;
	
	// Заполнение дерева функций.
	ОтмеченныеОбласти = Новый Соответствие;
	ПереданыВсеОбласти = Ложь;
	Для Каждого Стр Из Объект.ВопросыЗамещения Цикл
		Если Стр.Область = Справочники.ОбластиЗамещения.ВсеОбласти Тогда
			ПереданыВсеОбласти = Истина;
		КонецЕсли;
		СписокОтбора = ОтмеченныеОбласти[Стр.Область];
		Если СписокОтбора = Неопределено Тогда
			СписокОтбора = Новый СписокЗначений;
			ОтмеченныеОбласти[Стр.Область] = СписокОтбора;
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.ЗначениеОтбора) Тогда
			СписокОтбора.Добавить(Стр.ЗначениеОтбора);
		КонецЕсли;
	КонецЦикла;
	
	Дерево = ЗамещающиеИПомощники.ДеревоВопросовЗамещения(ОтмеченныеОбласти, ПереданыВсеОбласти);
	ЗначениеВРеквизитФормы(Дерево, "ДеревоВопросовЗамещения");
	
	// Заполнение списков выбора сотрудника и замещающего.
	Если ПраваНаИзменениеОграничены Тогда
		ЗаполнитьСпискиВыбораСотрудников();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
		ПраваНаОбъект = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(ТекущийОбъект.Ссылка);
		Если Не ПраваНаОбъект.Изменение Тогда
			ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущийОбъект.ПометкаУдаления Тогда 
		КлючНазначенияИспользования = "УстановленаПометкаУдаления";
	КонецЕсли;
	ОбщегоНазначенияДокументооборот.ПоказатьНадписьПометкиУдаления(
		ЭтотОбъект, ТекущийОбъект.ПометкаУдаления);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьДоступность();
	
	// Ветки, в которых отмечены не все подчиненные, нужно развернуть.
	Для Каждого Ветка Из ДеревоВопросовЗамещения.ПолучитьЭлементы() Цикл
		Если Ветка.Пометка = 2 Тогда
			Элементы.ДеревоВопросовЗамещения.Развернуть(Ветка.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	ЗаполнитьВопросыЗамещенияПоДаннымФормы();
	
	Если Объект.ВопросыЗамещения.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не выбраны передаваемые функции'"),, "ДеревоВопросовЗамещения");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ЗамещающиеИПомощники", , Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПереданыВсеОбласти И НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) И СуществуетАналогичноеЗамещение() Тогда
		Отказ = Истина;
		НаименованиеСотрудника = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Сотрудник, "Наименование");
		ТипЗамещения = ?(Объект.ВидЗамещения = Перечисления.ВидыЗамещения.Замещающие,
		НСтр("ru = 'замещающий'"), НСтр("ru = 'помощник'"));
		НаименованиеЗамещающего = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Замещающий, "Наименование");
		СообщениеПользователю = СтрШаблон(
		НСтр("ru='Для сотрудника %1 уже назначен %2 %3 по всем функциям на указанные даты'"), НаименованиеСотрудника, 
		ТипЗамещения, НаименованиеЗамещающего);
		ОбщегоНазначения.СообщитьПользователю(СообщениеПользователю);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	ПроверитьДоступностьВыбранногоСотрудника(Элемент, Объект.Сотрудник)

КонецПроцедуры

&НаКлиенте
Процедура СотрудникАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПраваНаИзменениеОграничены Тогда
		Возврат;
	КонецЕсли;
	
	СотрудникиДляСпискаВыбора = СотрудникиДляСпискаВыбора(Текст);
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(СотрудникиДляСпискаВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗамещающийПриИзменении(Элемент)

	ПроверитьДоступностьВыбранногоСотрудника(Элемент, Объект.Замещающий)
	
КонецПроцедуры

&НаКлиенте
Процедура ЗамещающийАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПраваНаИзменениеОграничены Тогда
		Возврат;
	КонецЕсли;
	
	СотрудникиДляСпискаВыбора = СотрудникиДляСпискаВыбора(Текст);
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(СотрудникиДляСпискаВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданыВсеОбластиПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	Если ПереданыВсеОбласти Тогда
		ВыбратьВсеФункции(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоВопросовЗамещения

&НаКлиенте
Процедура ДеревоВопросовЗамещенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ДеревоВопросовЗамещенияПредставлениеОтбора Тогда
		
		ЗамещающиеИПомощникиКлиент.ДеревоВопросовЗамещенияВыбор(Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВопросовЗамещенияПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоВопросовЗамещения.ТекущиеДанные;
	ЗамещающиеИПомощникиКлиент.ДеревоВопросовЗамещенияПометкаПриИзменении(ДеревоВопросовЗамещения, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВопросовЗамещенияПриАктивизацииСтроки(Элемент)
	
	ДоступенОтбор = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ДоступенОтбор = ТекущиеДанные.ДоступенОтбор;
	КонецЕсли;
	
	Элементы.ДеревоВопросовЗамещенияКонтекстноеМенюСкопироватьОтборы.Видимость = ДоступенОтбор;	
	Элементы.ДеревоВопросовЗамещенияКонтекстноеМенюВставитьОтборы.Видимость = ДоступенОтбор;
	Элементы.ДеревоВопросовЗамещенияКонтекстноеМенюВставитьОтборы.Доступность = 
		ЗначениеЗаполнено(АдресСкопированныхОтборов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьВсеФункции(Команда)
	
	ЗамещающиеИПомощникиКлиент.ВыбратьВсеФункцииВДеревеЗамещений(ДеревоВопросовЗамещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьВсеФункции(Команда)
	
	ЗамещающиеИПомощникиКлиент.СброситьВсеФункцииВДеревеЗамещений(ДеревоВопросовЗамещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьОтборы(Команда)
	
	ТекущиеДанные = Элементы.ДеревоВопросовЗамещения.ТекущиеДанные;
	АдресСкопированныхОтборов = ЗамещающиеИПомощникиКлиент.СкопироватьОтборы(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьОтборы(Команда)
	
	ТекущиеДанные = Элементы.ДеревоВопросовЗамещения.ТекущиеДанные;
	ЗамещающиеИПомощникиКлиент.ВставитьОтборы(ТекущиеДанные, АдресСкопированныхОтборов);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	
	Если ЗначениеЗаполнено(Объект.Основание) Тогда
		Элементы.Сотрудник.ТолькоПросмотр = Истина;
		Элементы.ДатаНачала.ТолькоПросмотр = Истина;
		Элементы.ДатаОкончания.ТолькоПросмотр = Истина;
	Иначе
		Элементы.Основание.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.НадписьБессрочно.Видимость = Не ЗначениеЗаполнено(Объект.ДатаОкончания);
	Элементы.ДеревоВопросовЗамещения.Доступность = Не ПереданыВсеОбласти;
	Элементы.ВыбратьВсеФункции.Доступность       = Не ПереданыВсеОбласти;
	Элементы.СброситьВсеФункции.Доступность      = Не ПереданыВсеОбласти;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВопросыЗамещенияПоДаннымФормы()
	
	Объект.ВопросыЗамещения.Очистить();
	
	ЗамещающиеИПомощникиКлиентСервер.ЗаполнитьВопросыЗамещенияПоДаннымДерева(Объект,
		ДеревоВопросовЗамещения, ПереданыВсеОбласти);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбораСотрудников()
	
	СотрудникиДляСпискаВыбора = СотрудникиДляСпискаВыбора();
	Если СотрудникиДляСпискаВыбора.Количество() > 0 Тогда
		Элементы.Сотрудник.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
		Элементы.Сотрудник.СписокВыбора.ЗагрузитьЗначения(СотрудникиДляСпискаВыбора);
		Если Объект.ВидЗамещения = Перечисления.ВидыЗамещения.Замещающие Тогда
			Элементы.Замещающий.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать; 
			Элементы.Замещающий.СписокВыбора.ЗагрузитьЗначения(СотрудникиДляСпискаВыбора);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СотрудникиДляСпискаВыбора(НабранныйТекст = "")
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СоставСубъектовПравДоступа.Субъект КАК Руководитель
		|Поместить ДоступныеРуководители
		|ИЗ
		|	РегистрСведений.СоставСубъектовПравДоступа КАК СоставСубъектовПравДоступа
		|ГДЕ
		|	СоставСубъектовПравДоступа.Сотрудник В (&СотрудникиПользователя)
		|	И СоставСубъектовПравДоступа.ИмяОбластиДелегирования = """"
		|	И (СоставСубъектовПравДоступа.ОбъектОснование = НЕОПРЕДЕЛЕНО
		|	ИЛИ СоставСубъектовПравДоступа.ОбъектОснование ССЫЛКА Справочник.ЗамещающиеИПомощники)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 20
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	ИСТИНА В
		|		(ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			Справочник.СтруктураПредприятия КАК Руководители
		|		ГДЕ
		|			Руководители.Руководитель = Сотрудники.Ссылка
		|			И Руководители.ПометкаУдаления = ЛОЖЬ) КАК ЭтоРуководитель,
		|	ПодчиненностьПодразделений.УровеньВышестоящего + ПодчиненностьПодразделений.УровеньВышестоящегоОтПодчиненного КАК
		|		УровеньПодчиненности,
		|	Сотрудники.Владелец КАК ФизЛицо
		|ИЗ
		|	РегистрСведений.ПодчиненностьПодразделений КАК ПодчиненностьПодразделений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДоступныеРуководители КАК ДоступныеРуководители
		|		ПО ПодчиненностьПодразделений.РуководительВышестоящего = ДоступныеРуководители.Руководитель
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ПодчиненностьПодразделений.Подчиненное = Сотрудники.Подразделение
		|ГДЕ
		|	Сотрудники.Действует
		|	И Сотрудники.Владелец.Наименование ПОДОБНО &НабранныйТекст
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоРуководитель УБЫВ,
		|	УровеньПодчиненности,
		|	ФизЛицо
		|АВТОУПОРЯДОЧИВАНИЕ");
	
	Запрос.УстановитьПараметр("СотрудникиПользователя", Сотрудники.ВсеСотрудникиТекущегоПользователя());
	Запрос.УстановитьПараметр("НабранныйТекст", НабранныйТекст + "%");
	Если НабранныйТекст = "" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"И Сотрудники.Владелец.Наименование ПОДОБНО &НабранныйТекст", "");
	КонецЕсли;
	НайденныеСотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
	Возврат НайденныеСотрудники;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьДоступностьВыбранногоСотрудника(Элемент, ВыбранныйСотрудник)
	
	Если Не ПраваНаИзменениеОграничены Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.СписокВыбора.НайтиПоЗначению(ВыбранныйСотрудник) <> Неопределено Тогда
		Возврат
	КонецЕсли;
	
	// В список выбора могли поместиться не все сотрудники.
	Если Не СотрудникДоступенДляВыбора(ВыбранныйСотрудник) Тогда
		Объект[Элемент.Имя] = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СотрудникДоступенДляВыбора(ВыбранныйСотрудник)
	
	Если Не ЗначениеЗаполнено(ВыбранныйСотрудник) Тогда
		Возврат Истина; // ничего и не произойдет.
	КонецЕсли;
	// Администратору, привилегированному режиму и этой роли - доступно всегда:
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеЗамещающихИПомощниковБезОграничения") Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПодразделенияВсех = Справочники.ЗамещающиеИПомощники.ПодразделенияУчастниковЗамещения();
	ПодразделениеВыбранного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранныйСотрудник, "Подразделение");
	Если Не Справочники.ЗамещающиеИПомощники.ПодразделениеВходитВИерархию(ПодразделениеВыбранного, ПодразделенияВсех)
		Тогда
		ОбщегоНазначения.СообщитьПользователю(
			Справочники.ЗамещающиеИПомощники.ТекстОшибки_НельзяВыбратьСотрудника(ВыбранныйСотрудник));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СуществуетАналогичноеЗамещение() 

	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВопросыЗамещения.Ссылка КАК Замещение
	|ИЗ
	|	Справочник.ЗамещающиеИПомощники.ВопросыЗамещения КАК ВопросыЗамещения
	|ГДЕ
	|	ВопросыЗамещения.Область = ЗНАЧЕНИЕ(Справочник.ОбластиЗамещения.ВсеОбласти)
	|	И ВопросыЗамещения.Ссылка.ДатаНачала <= &ДатаНачала
	|	И (ВопросыЗамещения.Ссылка.ДатаОкончания >= &ДатаОкончания
	|	И ВопросыЗамещения.Ссылка.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
	|	И ВопросыЗамещения.Ссылка.Сотрудник = &Сотрудник
	|	И ВопросыЗамещения.Ссылка.Замещающий = &Замещающий
	|	И ВопросыЗамещения.Ссылка.ВидЗамещения = &ВидЗамещения
	|	И НЕ ВопросыЗамещения.Ссылка.ПометкаУдаления
	|	И ВопросыЗамещения.Ссылка <> &ЭтоЗамещение";
	Запрос.УстановитьПараметр("Сотрудник", Объект.Сотрудник);
	Запрос.УстановитьПараметр("ДатаНачала", Объект.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Объект.ДатаОкончания);
	Запрос.УстановитьПараметр("Замещающий", Объект.Замещающий);
	Запрос.УстановитьПараметр("ВидЗамещения", Объект.ВидЗамещения);
	Запрос.УстановитьПараметр("ЭтоЗамещение", Объект.Ссылка);
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции

#КонецОбласти