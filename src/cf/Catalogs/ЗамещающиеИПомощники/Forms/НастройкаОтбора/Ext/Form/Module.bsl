#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Заполнение дерева видов.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВидыДокументов.Ссылка КАК ЗначениеОтбора,
		|	ВЫБОР
		|		КОГДА ВидыДокументов.Ссылка В (&ВыбранныеЗначения)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Пометка,
		|	ВЫБОР
		|		КОГДА ВидыДокументов.ЭтоГруппа
		|			ТОГДА -1
		|		ИНАЧЕ -1
		|	КОНЕЦ КАК Картинка
		|ИЗ
		|	Справочник.ВидыДокументов КАК ВидыДокументов
		|ГДЕ
		|	НЕ ПометкаУдаления
		|АВТОУПОРЯДОЧИВАНИЕ");
	Запрос.УстановитьПараметр("ВыбранныеЗначения", Параметры.ВыбранныеЗначения.ВыгрузитьЗначения());
	ДеревоЗначений = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	СтрокиКОбработке = Новый Массив;
	Для Каждого Стр Из ДеревоЗначений.Строки Цикл
		СтрокиКОбработке.Добавить(Стр);
	КонецЦикла;
	Пока СтрокиКОбработке.Количество() > 0 Цикл
		Стр = СтрокиКОбработке[0];
		Если Стр.Пометка = 1 Тогда
			ТекРодитель = Стр.Родитель;
			Пока ТекРодитель <> Неопределено И ТекРодитель.Пометка = 0 Цикл
				ТекРодитель.Пометка = 2;
				ТекРодитель = ТекРодитель.Родитель;
			КонецЦикла;
		ИначеЕсли Стр.Родитель <> Неопределено И Стр.Родитель.Пометка = 1 Тогда
			 Стр.Пометка = 1;
		КонецЕсли;
		Для Каждого ПодчиненнаяСтр Из Стр.Строки Цикл
			СтрокиКОбработке.Добавить(ПодчиненнаяСтр);
		КонецЦикла;
		СтрокиКОбработке.Удалить(0);
	КонецЦикла;
	ЗначениеВРеквизитФормы(ДеревоЗначений, "Дерево");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Разворачивание веток, в которых выбраны не все элементы.
	СтрокиКОбработке = Новый Массив;
	Для Каждого ЭлементДерева Из Дерево.ПолучитьЭлементы() Цикл
		СтрокиКОбработке.Добавить(ЭлементДерева);
	КонецЦикла;
	Пока СтрокиКОбработке.Количество() > 0 Цикл
		Стр = СтрокиКОбработке[0];
		Если Стр.Пометка = 2 Тогда
			Элементы.Дерево.Развернуть(Стр.ПолучитьИдентификатор());
		КонецЕсли;
		Для Каждого ЭлементДерева Из Стр.ПолучитьЭлементы() Цикл
			СтрокиКОбработке.Добавить(ЭлементДерева);
		КонецЦикла;
		СтрокиКОбработке.Удалить(0);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДерево

&НаКлиенте
Процедура ДеревоПометкаПриИзменении(Элемент)
	
	ТекСтрокаДерева = Дерево.НайтиПоИдентификатору(Элементы.Дерево.ТекущаяСтрока);
	Если ТекСтрокаДерева.Пометка = 2 Тогда
		ТекСтрокаДерева.Пометка = 0;
	КонецЕсли;
	
	// Подчиненные строки.
	СтрокиКОбработке = Новый Массив;
	Для Каждого ЭлементДерева Из ТекСтрокаДерева.ПолучитьЭлементы() Цикл
		Если ЭлементДерева.Пометка <> ТекСтрокаДерева.Пометка Тогда
			СтрокиКОбработке.Добавить(ЭлементДерева);
		КонецЕсли;
	КонецЦикла;
	Пока СтрокиКОбработке.Количество() > 0 Цикл
		Стр = СтрокиКОбработке[0];
		Стр.Пометка = ТекСтрокаДерева.Пометка;
		Для Каждого ЭлементДерева Из Стр.ПолучитьЭлементы() Цикл
			Если ЭлементДерева.Пометка <> ТекСтрокаДерева.Пометка Тогда
				СтрокиКОбработке.Добавить(ЭлементДерева);
			КонецЕсли;
		КонецЦикла;
		СтрокиКОбработке.Удалить(0);
	КонецЦикла;
	
	ОбновитьПометкиРодителей(ТекСтрокаДерева);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	УстановитьПометки(1);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьВсе(Команда)
	
	УстановитьПометки(0);
	
КонецПроцедуры

&НаКлиенте
Процедура Выбрать(Команда)
	
	Результат = Новый СписокЗначений;
	
	ОтмеченыВсе = Истина;
	ЕстьОтмеченные = Ложь;
	СтрокиКОбработке = Новый Массив;
	Для Каждого ЭлементДерева Из Дерево.ПолучитьЭлементы() Цикл
		СтрокиКОбработке.Добавить(ЭлементДерева);
	КонецЦикла;
	Пока СтрокиКОбработке.Количество() > 0 Цикл
		Стр = СтрокиКОбработке[0];
		Если Стр.Пометка = 1 Тогда
			ЕстьОтмеченные = Истина;
			Результат.Добавить(Стр.ЗначениеОтбора);
		Иначе
			ОтмеченыВсе = Ложь;
			Для Каждого ЭлементДерева Из Стр.ПолучитьЭлементы() Цикл
				СтрокиКОбработке.Добавить(ЭлементДерева);
			КонецЦикла;
		КонецЕсли;
		СтрокиКОбработке.Удалить(0);
	КонецЦикла;
	
	Если Не ЕстьОтмеченные Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Элементы не выбраны'"));
		Возврат;
	КонецЕсли;
	
	Если ОтмеченыВсе Тогда
		Результат.Очистить(); // Пустой список отбора означает "Выбраны все".
	КонецЕсли;
	
	Результат.СортироватьПоЗначению();
	Закрыть(Результат);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьПометки(Пометка)
	
	СтрокиКОбработке = Новый Массив;
	Для Каждого ЭлементДерева Из Дерево.ПолучитьЭлементы() Цикл
		Если ЭлементДерева.Пометка <> Пометка Тогда
			СтрокиКОбработке.Добавить(ЭлементДерева);
		КонецЕсли;
	КонецЦикла;
	Пока СтрокиКОбработке.Количество() > 0 Цикл
		Стр = СтрокиКОбработке[0];
		Стр.Пометка = Пометка;
		Для Каждого ЭлементДерева Из Стр.ПолучитьЭлементы() Цикл
			Если ЭлементДерева.Пометка <> Пометка Тогда
				СтрокиКОбработке.Добавить(ЭлементДерева);
			КонецЕсли;
		КонецЦикла;
		СтрокиКОбработке.Удалить(0);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПометкиРодителей(СтрокаДерева)
	
	СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
	Пока СтрокаРодитель <> Неопределено Цикл
		НоваяПометка = 0;
		ЕстьНоль = Ложь;
		ЕстьОдин = Ложь;
		ЕстьДва  = Ложь;
		Для Каждого ПодчиненнаяСтрока Из СтрокаРодитель.ПолучитьЭлементы() Цикл
			ЕстьНоль = ЕстьНоль Или ПодчиненнаяСтрока.Пометка = 0;
			ЕстьОдин = ЕстьОдин Или ПодчиненнаяСтрока.Пометка = 1;
			ЕстьДва  = ЕстьДва  Или ПодчиненнаяСтрока.Пометка = 2;
			Если ЕстьНоль И ЕстьОдин Или ЕстьДва Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьДва Тогда
			НоваяПометка = 2;
		ИначеЕсли ЕстьНоль И ЕстьОдин Тогда
			НоваяПометка = 2;
		ИначеЕсли ЕстьНоль Тогда
			НоваяПометка = 0;
		ИначеЕсли ЕстьОдин Тогда
			НоваяПометка = 1;
		КонецЕсли;
		Если НоваяПометка = СтрокаРодитель.Пометка Тогда
			Прервать; // Пометка не изменилась, вышестоящие строки обрабатывать не нужно.
		Иначе
			СтрокаРодитель.Пометка = НоваяПометка;
		КонецЕсли;
		СтрокаРодитель = СтрокаРодитель.ПолучитьРодителя();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
