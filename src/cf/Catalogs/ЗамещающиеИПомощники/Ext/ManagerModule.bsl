#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает массив элементов, где переданные сотрудники являются замещающими или помощниками.
//
// Параметры:
//  Кому - СправочникСсылка.Пользователи, СправочникСсылка.Сотрудники, Массив
//   - под пользователем подразумеваются все сотрудники пользователя.
// ОбластиЗамещения - СправочникСсылка.ОбластиЗамещения, Массив - области замещения для отбора.
// 	Будут отобраны только те замещения, в которых есть хотя бы одна из указанных областей.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с данными о замещениях:
//   * Замещение - СправочникСсылка.ЗамещающиеИПомощники - замещение
//   * ВидЗамещения - ПеречислениеСсылка.ВидыЗамещения - вид замещения
//   * Сотрудник - СправочникСсылка.Сотрудники - замещаемый сотрудник
//   * Замещающий - СправочникСсылка.Сотрудники - замещающий сотрудник
//
Функция АктуальныеЗамещения(Знач Кому, Знач ОбластиЗамещения = Неопределено) Экспорт
	
	Если ТипЗнч(Кому) <> Тип("Массив") Тогда
		Кому = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Кому);
	КонецЕсли;
	
	ЗамещающиеСотрудники = Сотрудники.ЗаменитьПользователейСотрудниками(Кому);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗамещающиеИПомощники.Ссылка КАК Замещение,
		|	ЗамещающиеИПомощники.ВидЗамещения КАК ВидЗамещения,
		|	ЗамещающиеИПомощники.Сотрудник КАК Сотрудник,
		|	ЗамещающиеИПомощники.Замещающий КАК Замещающий
		|ИЗ
		|	Справочник.ЗамещающиеИПомощники КАК ЗамещающиеИПомощники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗамещающиеИПомощники.ВопросыЗамещения КАК ВопросыЗамещенияТЧ
		|		ПО ЗамещающиеИПомощники.Ссылка = ВопросыЗамещенияТЧ.Ссылка
		|ГДЕ
		|	ЗамещающиеИПомощники.Замещающий В (&ЗамещающиеСотрудники)
		|	И ЗамещающиеИПомощники.Действует
		|	И ВопросыЗамещенияТЧ.Область В (&ОбластиЗамещения)");
	Если ОбластиЗамещения = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ВопросыЗамещенияТЧ.Область В (&ОбластиЗамещения)", "");
	Иначе
		Если ТипЗнч(ОбластиЗамещения) <> Тип("Массив") Тогда
			ОбластиЗамещения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбластиЗамещения);
		КонецЕсли;
		ОбластиЗамещения.Добавить(Справочники.ОбластиЗамещения.ВсеОбласти);
	КонецЕсли;
	Запрос.УстановитьПараметр("ЗамещающиеСотрудники", ЗамещающиеСотрудники);
	Запрос.УстановитьПараметр("ОбластиЗамещения", ОбластиЗамещения);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает таблицу с замещающими или помощниками по действиям задач.
// 	По каждому действию возвращается только одна запись. Если найдено несколько,
// 	то выбирается одна случайная, но с приоритетом вида замещения "Замещающие" над "Помощники".
//	Используется, например, чтобы выяснить, по каким действиям текущий пользователь является помощником. 
// 	
// Параметры:
//  ДействияЗадач - ДокументСсылка.ДействиеЗадачи, Массив - действие или массив действий.
//  ЗамещающиеИПомощники - СправочникСсылка.Сотрудники, Массив - сотрудники для отбора.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с данными о замещениях
//   * ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи - действие задачи
//   * Замещение - СправочникСсылка.ЗамещающиеИПомощники - замещение
//   * ВидЗамещения - ПеречислениеСсылка.ВидыЗамещения - вид замещения
//   * Сотрудник - СправочникСсылка.Сотрудники - замещаемый сотрудник
//   * Замещающий - СправочникСсылка.Сотрудники - замещающий сотрудник
//
Функция АктуальныеЗамещенияПоДействиямЗадач(ДействияЗадач, ЗамещающиеИПомощники) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ДействиеЗадачи", Новый ОписаниеТипов("ДокументСсылка.ДействиеЗадачи"));
	Результат.Колонки.Добавить("Замещение", Новый ОписаниеТипов("СправочникСсылка.ЗамещающиеИПомощники"));
	Результат.Колонки.Добавить("ВидЗамещения", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗамещения"));
	Результат.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Результат.Колонки.Добавить("Замещающий", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВсеИсполнителиДействийЗадач.ДействиеЗадачи КАК ДействиеЗадачи,
		|	ЗамещающиеИПомощники.Ссылка КАК Замещение,
		|	ЗамещающиеИПомощники.ВидЗамещения КАК ВидЗамещения,
		|	ЗамещающиеИПомощники.Сотрудник КАК Сотрудник,
		|	ЗамещающиеИПомощники.Замещающий КАК Замещающий
		|ИЗ
		|	РегистрСведений.ВсеИсполнителиДействийЗадач КАК ВсеИсполнителиДействийЗадач
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗамещающиеИПомощники КАК ЗамещающиеИПомощники
		|		ПО ВсеИсполнителиДействийЗадач.Основание = ЗамещающиеИПомощники.Ссылка
		|ГДЕ
		|	ВсеИсполнителиДействийЗадач.ДействиеЗадачи В (&ДействияЗадач)
		|	И ВсеИсполнителиДействийЗадач.Исполнитель В (&ЗамещающиеИПомощники)
		|УПОРЯДОЧИТЬ ПО
		|	ЗамещающиеИПомощники.ВидЗамещения = ЗНАЧЕНИЕ(Перечисление.ВидыЗамещения.Замещающие) УБЫВ
		|ИТОГИ
		|ПО
		|	ВсеИсполнителиДействийЗадач.ДействиеЗадачи");
	Запрос.УстановитьПараметр("ДействияЗадач", ДействияЗадач);
	Запрос.УстановитьПараметр("ЗамещающиеИПомощники", ЗамещающиеИПомощники);
	ВыборкаПоДействиям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДействиям.Следующий() Цикл
		Выборка = ВыборкаПоДействиям.Выбрать();
		Если Выборка.Следующий() Тогда
			// По каждому действию нужна только одна запись.
			ЗаполнитьЗначенияСвойств(Результат.Добавить(), Выборка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает таблицу с замещающими или помощниками по действиям задач.
// 	По каждому действию возвращается все записи.  
// 	
// Параметры:
//  ДействияЗадач - ДокументСсылка.ДействиеЗадачи, Массив - действие или массив действий.
//  ЗамещающиеИПомощники - СправочникСсылка.Сотрудники, Массив - сотрудники для отбора.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с данными о замещениях
//   * ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи - действие задачи
//   * Замещение - СправочникСсылка.ЗамещающиеИПомощники - замещение
//   * ВидЗамещения - ПеречислениеСсылка.ВидыЗамещения - вид замещения
//   * Сотрудник - СправочникСсылка.Сотрудники - замещаемый сотрудник
//   * Замещающий - СправочникСсылка.Сотрудники - замещающий сотрудник
//
Функция ВсеЗамещенияПоДействиямЗадач(ДействияЗадач, ЗамещающиеИПомощники) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ДействиеЗадачи", Новый ОписаниеТипов("ДокументСсылка.ДействиеЗадачи"));
	Результат.Колонки.Добавить("Замещение", Новый ОписаниеТипов("СправочникСсылка.ЗамещающиеИПомощники"));
	Результат.Колонки.Добавить("ВидЗамещения", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗамещения"));
	Результат.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Результат.Колонки.Добавить("Замещающий", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВсеИсполнителиДействийЗадач.ДействиеЗадачи КАК ДействиеЗадачи,
		|	ЗамещающиеИПомощники.Ссылка КАК Замещение,
		|	ЗамещающиеИПомощники.ВидЗамещения КАК ВидЗамещения,
		|	ЗамещающиеИПомощники.Сотрудник КАК Сотрудник,
		|	ЗамещающиеИПомощники.Замещающий КАК Замещающий
		|ИЗ
		|	РегистрСведений.ВсеИсполнителиДействийЗадач КАК ВсеИсполнителиДействийЗадач
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗамещающиеИПомощники КАК ЗамещающиеИПомощники
		|		ПО ВсеИсполнителиДействийЗадач.Основание = ЗамещающиеИПомощники.Ссылка
		|ГДЕ
		|	ВсеИсполнителиДействийЗадач.ДействиеЗадачи В (&ДействияЗадач)
		|	И ВсеИсполнителиДействийЗадач.Исполнитель В (&ЗамещающиеИПомощники)
		|УПОРЯДОЧИТЬ ПО
		|	ЗамещающиеИПомощники.ВидЗамещения = ЗНАЧЕНИЕ(Перечисление.ВидыЗамещения.Замещающие) УБЫВ");
	Запрос.УстановитьПараметр("ДействияЗадач", ДействияЗадач);
	Запрос.УстановитьПараметр("ЗамещающиеИПомощники", ЗамещающиеИПомощники);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Сотрудник", Выборка.Сотрудник);
		ПараметрыОтбора.Вставить("ДействиеЗадачи", Выборка.ДействиеЗадачи);
		
		НайденныеСтроки = Результат.НайтиСтроки(ПараметрыОтбора);
		
		УжеЕстьРезультат = НайденныеСтроки.Количество() > 0;
		
		Если УжеЕстьРезультат Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), Выборка);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает таблицу соответствия областей замещения видам задач.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица соответствия областей замещения видам задач.
//   *ОбластьЗамещения - СправочникСсылка.ОбластиЗамещения - область.
//   *ВидЗадачи - СправочникСсылка.ОбластиЗамещения - вид задачи.
//
Функция ВидыЗадачДокументовПоОбластямЗамещения() Экспорт
	
	ВидыДействийЗадачПоОбластямЗамещения = Новый ТаблицаЗначений;
	ВидыДействийЗадачПоОбластямЗамещения.Колонки.Добавить("ОбластьЗамещения",
		Новый ОписаниеТипов("СправочникСсылка.ОбластиЗамещения"));
	ВидыДействийЗадачПоОбластямЗамещения.Колонки.Добавить("ВидЗадачи",
		Новый ОписаниеТипов("СправочникСсылка.ВидыЗадач"));
	
	ОбластиМенеджер = Справочники.ОбластиЗамещения;
	ВидыЗадачМенеджер = Справочники.ВидыЗадач;
	
	Стр = ВидыДействийЗадачПоОбластямЗамещения.Добавить();
	Стр.ОбластьЗамещения = ОбластиМенеджер.ДокументыИсполнение;
	Стр.ВидЗадачи = ВидыЗадачМенеджер.Исполнение;
	
	Стр = ВидыДействийЗадачПоОбластямЗамещения.Добавить();
	Стр.ОбластьЗамещения = ОбластиМенеджер.ДокументыОзнакомление;
	Стр.ВидЗадачи = ВидыЗадачМенеджер.Ознакомление;
	
	Стр = ВидыДействийЗадачПоОбластямЗамещения.Добавить();
	Стр.ОбластьЗамещения = ОбластиМенеджер.ДокументыПодписание;
	Стр.ВидЗадачи = ВидыЗадачМенеджер.Подписание;
	
	Стр = ВидыДействийЗадачПоОбластямЗамещения.Добавить();
	Стр.ОбластьЗамещения = ОбластиМенеджер.ДокументыПоручение;
	Стр.ВидЗадачи = ВидыЗадачМенеджер.Поручение;
	
	Стр = ВидыДействийЗадачПоОбластямЗамещения.Добавить();
	Стр.ОбластьЗамещения = ОбластиМенеджер.ДокументыПоручение;
	Стр.ВидЗадачи = ВидыЗадачМенеджер.Вопрос;
	
	Стр = ВидыДействийЗадачПоОбластямЗамещения.Добавить();
	Стр.ОбластьЗамещения = ОбластиМенеджер.ДокументыПоручение;
	Стр.ВидЗадачи = ВидыЗадачМенеджер.ЗапросНаПереносСрока;
	
	Стр = ВидыДействийЗадачПоОбластямЗамещения.Добавить();
	Стр.ОбластьЗамещения = ОбластиМенеджер.ДокументыРассмотрение;
	Стр.ВидЗадачи = ВидыЗадачМенеджер.Рассмотрение;
	
	Стр = ВидыДействийЗадачПоОбластямЗамещения.Добавить();
	Стр.ОбластьЗамещения = ОбластиМенеджер.ДокументыРегистрация;
	Стр.ВидЗадачи = ВидыЗадачМенеджер.Регистрация;
	
	Стр = ВидыДействийЗадачПоОбластямЗамещения.Добавить();
	Стр.ОбластьЗамещения = ОбластиМенеджер.ДокументыСогласование;
	Стр.ВидЗадачи = ВидыЗадачМенеджер.Согласование;
	
	Стр = ВидыДействийЗадачПоОбластямЗамещения.Добавить();
	Стр.ОбластьЗамещения = ОбластиМенеджер.ДокументыУтверждение;
	Стр.ВидЗадачи = ВидыЗадачМенеджер.Утверждение;
	
	Возврат ВидыДействийЗадачПоОбластямЗамещения;
	
КонецФункции

// Возвращает отслеживаемые реквизиты для дополнительного свойства ПредыдущиеЗначенияРеквизитов.
//
// Возвращаемое значение:
//  Строка - Отслеживаемые реквизиты.
//
Функция ОтслеживаемыеРеквизиты() Экспорт
	
	ОтслеживаемыеРеквизиты = "ПометкаУдаления, ВидЗамещения, ДатаНачала, ДатаОкончания,
		|Действует, Замещающий, Сотрудник, ВопросыЗамещения";
	Возврат ОтслеживаемыеРеквизиты;
	
КонецФункции

// Возвращает массив элементов, замещающих переданного сотрудника.
// 
// Параметры:
//  СотрудникиМассив - СправочникСсылка.Пользователи, СправочникСсылка.Сотрудники, Массив - Сотрудник. Под пользователем подразумеваются все сотрудники пользователя.
//  ОбластиЗамещения - СправочникСсылка.ОбластиЗамещения, Массив - области замещения для отбора.
// Будут отобраны только те замещения, в которых есть хотя бы одна из указанных областей.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с данными о замещениях:
// * Замещение - СправочникСсылка.ЗамещающиеИПомощники - замещение
// * ВидЗамещения - ПеречислениеСсылка.ВидыЗамещения - вид замещения
// * Сотрудник - СправочникСсылка.Сотрудники - замещаемый сотрудник
// * Замещающий - СправочникСсылка.Сотрудники - замещающий сотрудник
Функция АктуальныеЗамещенияСотрудников(Знач СотрудникиМассив, Знач ОбластиЗамещения = Неопределено) Экспорт
	
	Если ТипЗнч(СотрудникиМассив) <> Тип("Массив") Тогда
		СотрудникиМассив = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СотрудникиМассив);
	КонецЕсли;
	
	СотрудникиМассив = Сотрудники.ЗаменитьПользователейСотрудниками(СотрудникиМассив);
	
	Если СотрудникиМассив.Количество() = 0 Тогда
		АктуальныеЗамещенияСотрудников = Новый ТаблицаЗначений;
		АктуальныеЗамещенияСотрудников.Колонки.Добавить("Замещение");
		АктуальныеЗамещенияСотрудников.Колонки.Добавить("ВидЗамещения");
		АктуальныеЗамещенияСотрудников.Колонки.Добавить("Сотрудник");
		АктуальныеЗамещенияСотрудников.Колонки.Добавить("Замещающий");
		Возврат АктуальныеЗамещенияСотрудников;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗамещающиеИПомощники.Ссылка КАК Замещение,
		|	ЗамещающиеИПомощники.ВидЗамещения КАК ВидЗамещения,
		|	ЗамещающиеИПомощники.Сотрудник КАК Сотрудник,
		|	ЗамещающиеИПомощники.Замещающий КАК Замещающий
		|ИЗ
		|	Справочник.ЗамещающиеИПомощники КАК ЗамещающиеИПомощники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗамещающиеИПомощники.ВопросыЗамещения КАК ВопросыЗамещенияТЧ
		|		ПО ЗамещающиеИПомощники.Ссылка = ВопросыЗамещенияТЧ.Ссылка
		|ГДЕ
		|	ЗамещающиеИПомощники.Сотрудник В (&Сотрудники)
		|	И ЗамещающиеИПомощники.Действует
		|	И ВопросыЗамещенияТЧ.Область В (&ОбластиЗамещения)
		|УПОРЯДОЧИТЬ ПО
		|	Замещающий");
	Если ОбластиЗамещения = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ВопросыЗамещенияТЧ.Область В (&ОбластиЗамещения)", "");
	Иначе
		Если ТипЗнч(ОбластиЗамещения) <> Тип("Массив") Тогда
			ОбластиЗамещения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбластиЗамещения);
		КонецЕсли;
		ОбластиЗамещения.Добавить(Справочники.ОбластиЗамещения.ВсеОбласти);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Сотрудники", СотрудникиМассив);
	Запрос.УстановитьПараметр("ОбластиЗамещения", ОбластиЗамещения);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// ВерсионированиеОбъектов
//@skip-check module-empty-method
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
КонецПроцедуры
// Конец ВерсионированиеОбъектов

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеКэширующихДанных

// Обрабатывает обновление кэширующих данных.
// 
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса - Выборка из очереди обновления кэширующих данных:
//   * ОтметкаВремени - ОпределяемыйТип.ОтметкаВремени.
//   * ЗависимыйОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//   * ВлияющийОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//   * КлючВлияющихДанных - ЛюбаяСсылка.
//   * Автор - СправочникСсылка.Пользователи.
//   * ЗагрузкаОбработанныхДанныхИзДругойСистемы - Булево.
//   * ИзмененияВлияющихДанных - ХранилищеЗначения.
//   * Попыток - Число.
//   * ДатаКОбработке - Дата.
// 
Процедура ОбновитьКэширующиеДанные(Выборка) Экспорт
	
	Если ТипЗнч(Выборка.КлючВлияющихДанных) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		ОбновитьКэширующиеДанныеПоСотруднику(Выборка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ПроверкаДоступностиУчастниковЗамещения

// Определяет подразделения участников замещения текущего пользователя.
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//	* Ключ - СправочникСсылка.Сотрудники -
//	* Значение - СправочникСсылка.СтруктураПредприятия -
Функция ПодразделенияУчастниковЗамещения() Экспорт
	
	// Все сотрудники текущего пользователя и кого он замещает:
	УчастникиЗамещения = АктуальныеЗамещения(ПараметрыСеанса.СотрудникиПользователя); // Вычисляем замещаемых.
	// Добавляем себя:
	Для Каждого СотрудникТекущего Из ПараметрыСеанса.СотрудникиПользователя Цикл
		НоваяСтрока = УчастникиЗамещения.Добавить();
		НоваяСтрока.Сотрудник = СотрудникТекущего;
	КонецЦикла;
	УчастникиЗамещения.Свернуть("Сотрудник");
	УчастникиЗамещенияМассив = УчастникиЗамещения.ВыгрузитьКолонку("Сотрудник"); // Массив Из СправочникСсылка.Сотрудники
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъектов(УчастникиЗамещенияМассив, "Подразделение");
	
КонецФункции

// Входит ли подразделение в иерархию других подразделений.
// 
// Параметры:
//  Подразделение - СправочникСсылка.СтруктураПредприятия - Подразделение, которое проверяем.
//  Подразделения - Соответствие Из КлючИЗначение - Подразделения в которых ищем.
// * Ключ - СправочникСсылка.Сотрудники - 
// * Значение - СправочникСсылка.СтруктураПредприятия - 
// 
// Возвращаемое значение:
//  Булево - Входит в иерархию или нет.
Функция ПодразделениеВходитВИерархию(Подразделение, Подразделения) Экспорт
	
	Для Каждого КлючЗначение Из Подразделения Цикл
		Если Подразделение.ПринадлежитЭлементу(КлючЗначение.Значение) 
			Или Подразделение = КлючЗначение.Значение Тогда
			// Тогда все верно.
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Текстовая константа - сообщение про неверно выбранного сотрудника.
// 
// Параметры:
//  Сотрудник - СправочникСсылка.Сотрудники -
// 
// Возвращаемое значение:
//  Строка - Текст ошибки нельзя выбрать сотрудника
Функция ТекстОшибки_НельзяВыбратьСотрудника(Сотрудник) Экспорт
	
	Возврат СтрШаблон(
		НСтр("ru = 'Сотрудник ""%1"" недоступен для выбора. Можно выбрать себя, своего подчиненного или подчиненного того сотрудника, замещающим или помощником которого вы являетесь.'"),
		Сотрудник);
	
КонецФункции

#КонецОбласти

// Обновляет все данные, необходимые для корректного отображения задач, переданных по замещению.
// Вызывается при изменении замещения или данных, связанных с ним (например, списка ролей замещаемого сотрудника).
// 
// Параметры:
//  Замещение - СправочникСсылка.ЗамещающиеИПомощники -
// 
Процедура ОбновитьДанныеЗадачПоЗамещению(Замещение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
	
		КлючеваяОперацияОбщая = СтрШаблон(НСтр("ru = 'Запись замещения.Обновление всех данных по задачам'"));
		НачалоОбщегоЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
		
		РеквизитыЗамещения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Замещение,
			"Действует, Замещающий, ВидЗамещения, ВопросыЗамещения");
		РеквизитыЗамещения.ВопросыЗамещения = РеквизитыЗамещения.ВопросыЗамещения.Выгрузить();
	
		РегистрыСведений.ИсполнителиРолейИДелегаты.ОбновитьЗаписиПоНастройкеЗамещения(Замещение);
		
		// Вычисление действий задач.
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ВсеИсполнителиДействийЗадач.ДействиеЗадачи,
			|	ВсеИсполнителиДействийЗадач.Исполнитель,
			|	ВсеИсполнителиДействийЗадач.Основание
			|ИЗ
			|	РегистрСведений.ВсеИсполнителиДействийЗадач КАК ВсеИсполнителиДействийЗадач
			|ГДЕ
			|	ВсеИсполнителиДействийЗадач.Основание = &Основание");
		Запрос.УстановитьПараметр("Основание", Замещение);
		ИсполнителиПоЗамещению = Запрос.Выполнить().Выгрузить();
		СтарыеДействияКОбработке = ИсполнителиПоЗамещению.ВыгрузитьКолонку("ДействиеЗадачи");
		НовыеДействияКОбработке = ПодходящиеДействияЗадач(Замещение);
		ВсеДействияКОбработке = ОбщегоНазначения.СкопироватьРекурсивно(СтарыеДействияКОбработке);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеДействияКОбработке, НовыеДействияКОбработке);
		
		
		// РС ВсеИсполнителиДействийЗадач.
		КлючеваяОперация = СтрШаблон(НСтр("ru = 'Запись замещения.Обновление РС ВсеИсполнителиДействийЗадач'"));
		НачалоЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
		
		Если РеквизитыЗамещения.Действует И НовыеДействияКОбработке.Количество() Тогда
			// Пишем по одной записи, чтобы на больших базах не блокировать много записей регистра, мешая выполнять
			// задачи:
			Для Каждого ДействиеЗадачи Из НовыеДействияКОбработке Цикл
			
				НаборВсеИсполнители = РегистрыСведений.ВсеИсполнителиДействийЗадач.СоздатьНаборЗаписей();
				НаборВсеИсполнители.Отбор.ДействиеЗадачи.Установить(ДействиеЗадачи);
				НаборВсеИсполнители.Отбор.Исполнитель.Установить(РеквизитыЗамещения.Замещающий);
				НаборВсеИсполнители.Отбор.Основание.Установить(Замещение);

				Стр = НаборВсеИсполнители.Добавить();
				Стр.Основание = Замещение;
				Стр.ДействиеЗадачи = ДействиеЗадачи;
				Стр.Исполнитель = РеквизитыЗамещения.Замещающий;
				НаборВсеИсполнители.Записать();
				
			КонецЦикла;
		Иначе
			// Удаление по одной записи, чтобы на больших базах не блокировать много записей регистра, мешая выполнять
			// задачи другим:
			Для Каждого ИсполнительПоЗамещению Из ИсполнителиПоЗамещению Цикл
				НаборВсеИсполнители = РегистрыСведений.ВсеИсполнителиДействийЗадач.СоздатьНаборЗаписей();
				НаборВсеИсполнители.Отбор.ДействиеЗадачи.Установить(ИсполнительПоЗамещению.ДействиеЗадачи);
				НаборВсеИсполнители.Отбор.Исполнитель.Установить(ИсполнительПоЗамещению.Исполнитель);
				НаборВсеИсполнители.Отбор.Основание.Установить(Замещение);
				НаборВсеИсполнители.Записать();
			КонецЦикла;
		КонецЕсли;
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, НачалоЗамера);
		
		
		// РС ДействияЗадач.
		КлючеваяОперация = СтрШаблон(НСтр("ru = 'Запись замещения.Обновление РС ДействияЗадач'"));
		НачалоЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
		Для Каждого ДействиеЗадачи Из ВсеДействияКОбработке Цикл
			РегистрыСведений.РеестрЗадачПоИсполнителям.ОбновитьПоДействиюЗадачи(ДействиеЗадачи);
		КонецЦикла;
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, НачалоЗамера);
		
		
		// РН КоличествоЗадачПоИсполнителям.
		КлючеваяОперация = СтрШаблон(НСтр("ru = 'Запись замещения.Обновление РН КоличествоЗадачПоИсполнителям'"));
		НачалоЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
		Для Каждого ДействиеЗадачи Из ВсеДействияКОбработке Цикл
			РегистрыНакопления.КоличествоЗадачПоИсполнителям.ОбновитьПоДействиюЗадачи(ДействиеЗадачи);
		КонецЦикла;
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, НачалоЗамера);
		
		
		// РС УчастникиПроцессов.
		КлючеваяОперация = СтрШаблон(НСтр("ru = 'Запись замещения.Обновление РС УчастникиПроцессов'"));
		НачалоЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
		
		Если РеквизитыЗамещения.Действует Тогда
		
			Если  РеквизитыЗамещения.ВопросыЗамещения.Найти(Справочники.ОбластиЗамещения.ВсеОбласти) = Неопределено
				И РеквизитыЗамещения.ВопросыЗамещения.Найти(Справочники.ОбластиЗамещения.Задачи) = Неопределено
				И РеквизитыЗамещения.ВопросыЗамещения.Найти(Справочники.ОбластиЗамещения.ЗадачиПросмотр) = Неопределено Тогда
				
				// Не переданы права на чтение всех задач, нужно добавить участника в регистр.
				Запрос = Новый Запрос(
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ЗадачаИсполнителя.БизнесПроцесс
					|ИЗ
					|	Документ.ДействиеЗадачи КАК ДействиеЗадачи
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
					|		ПО ДействиеЗадачи.Источник = ЗадачаИсполнителя.Ссылка
					|ГДЕ
					|	ДействиеЗадачи.Ссылка В (&НовыеДействияКОбработке)");
				Запрос.УстановитьПараметр("НовыеДействияКОбработке", НовыеДействияКОбработке);
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					
					НаборУчастникиПроцессов = РегистрыСведений.УчастникиПроцессов.СоздатьНаборЗаписей();
					НаборУчастникиПроцессов.Отбор.Участник.Установить(РеквизитыЗамещения.Замещающий);
					НаборУчастникиПроцессов.Отбор.Процесс.Установить(Выборка.БизнесПроцесс);
					НаборУчастникиПроцессов.Отбор.Основание.Установить(Замещение);
					
					Стр = НаборУчастникиПроцессов.Добавить();
					Стр.Участник = РеквизитыЗамещения.Замещающий;
					Стр.Процесс = Выборка.БизнесПроцесс;
					Стр.Основание = Замещение;
					
					НаборУчастникиПроцессов.Записать();
					
				КонецЦикла;
			КонецЕсли;
		Иначе
			// Удаление по одной записи, чтобы на больших базах не блокировать много записей регистра, мешая выполнять
			// задачи другим:
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	Т.Участник,
				|	Т.Процесс,
				|	Т.Основание
				|ИЗ
				|	РегистрСведений.УчастникиПроцессов КАК Т
				|ГДЕ
				|	Т.Основание = &Замещение");
			Запрос.УстановитьПараметр("Замещение", Замещение);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Набор = РегистрыСведений.УчастникиПроцессов.СоздатьНаборЗаписей();
				Набор.Отбор.Участник.Установить(Выборка.Участник);
				Набор.Отбор.Процесс.Установить(Выборка.Процесс);
				Набор.Отбор.Основание.Установить(Замещение);
				Набор.Записать();
			КонецЦикла;
		КонецЕсли;
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, НачалоЗамера);
		
		
		// Права на приложения задач.
		КлючеваяОперация = СтрШаблон(НСтр("ru = 'Запись замещения.Обновление прав на приложения'"));
		НачалоЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ДействиеЗадачиПриложения.Приложение КАК Приложение,
			|	ЕСТЬNULL(ВидыДействий.РазрешитьУчастникамИзменятьПредмет, ЛОЖЬ) КАК ПравоИзменения
			|ИЗ
			|	Документ.ДействиеЗадачи КАК ДействиеЗадачиДок
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДействиеЗадачи.Приложения КАК ДействиеЗадачиПриложения
			|		ПО ДействиеЗадачиДок.Ссылка = ДействиеЗадачиПриложения.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|		ПО ДействиеЗадачиДок.Источник = ЗадачаИсполнителя.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцессыДействий КАК ПроцессыДействий
			|		ПО (ЗадачаИсполнителя.БизнесПроцесс = ПроцессыДействий.Процесс)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДействий КАК ВидыДействий
			|		ПО (ПроцессыДействий.Действие.ВидДействия = ВидыДействий.Ссылка)
			|ГДЕ
			|	ДействиеЗадачиДок.Ссылка В(&ДобавленныеДействияКОбработке)
			|	И ТИПЗНАЧЕНИЯ(ДействиеЗадачиПриложения.Приложение) В (&ДопустимыеТипыОбъектов)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ЗадачаПриложения.Приложение,
			|	ЕСТЬNULL(ВидыДействий.РазрешитьУчастникамИзменятьПредмет, ЛОЖЬ)
			|ИЗ
			|	Документ.ДействиеЗадачи КАК ДействиеЗадачиДок
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Задача.Приложения КАК ЗадачаПриложения
			|		ПО ДействиеЗадачиДок.Задача = ЗадачаПриложения.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|		ПО ДействиеЗадачиДок.Источник = ЗадачаИсполнителя.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцессыДействий КАК ПроцессыДействий
			|		ПО (ЗадачаИсполнителя.БизнесПроцесс = ПроцессыДействий.Процесс)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДействий КАК ВидыДействий
			|		ПО (ПроцессыДействий.Действие.ВидДействия = ВидыДействий.Ссылка)
			|ГДЕ
			|	ДействиеЗадачиДок.Ссылка В(&ДобавленныеДействияКОбработке)
			|	И ТИПЗНАЧЕНИЯ(ЗадачаПриложения.Приложение) В (&ДопустимыеТипыОбъектов)");
		Запрос.УстановитьПараметр("ДобавленныеДействияКОбработке",
			ОбщегоНазначенияКлиентСервер.РазностьМассивов(НовыеДействияКОбработке, СтарыеДействияКОбработке));
		Запрос.УстановитьПараметр("ДопустимыеТипыОбъектов",
			Метаданные.РегистрыСведений.РабочиеГруппы.Измерения.Объект.Тип.Типы());
		Выборка = Запрос.Выполнить().Выбрать();
		ТаблицаУчастниковРГ = РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников();
		Стр = ТаблицаУчастниковРГ.Добавить();
		Стр.Участник = РеквизитыЗамещения.Замещающий;
		Пока Выборка.Следующий() Цикл
			ТаблицаУчастниковРГ[0].Изменение = Выборка.ПравоИзменения;
			РаботаСРабочимиГруппами.ДобавитьУчастниковВРабочуюГруппуОбъекта(
				Выборка.Приложение,
				ТаблицаУчастниковРГ,
				Истина, // ОбновитьПрава
				Ложь); // ПроверятьПрава - отключение проверки ГД и ГДК.
		КонецЦикла;
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, НачалоЗамера);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперацияОбщая, НачалоОбщегоЗамера);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает действия задач, для которых актуально текущее замещение.
//
Функция ПодходящиеДействияЗадач(Замещение)
	
	РеквизитыЗамещения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Замещение,
		"Действует, Сотрудник, Замещающий, ВопросыЗамещения");
	РеквизитыЗамещения.ВопросыЗамещения = РеквизитыЗамещения.ВопросыЗамещения.Выгрузить();
	
	Если Не РеквизитыЗамещения.Действует Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДействияЗадач.Ссылка КАК ДействиеЗадачи,
		|	ДействияЗадач.Задача КАК Задача,
		|	ДействияЗадач.ВидДействия КАК ВидДействия,
		|	ДействияЗадач.Источник КАК Источник,
		|	ЗадачаДок.ВидЗадачи КАК ВидЗадачи
		|ПОМЕСТИТЬ ДействияЗадачСотрудника
		|ИЗ
		|	Документ.ДействиеЗадачи КАК ДействияЗадач
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ЗадачаДок
		|		ПО ДействияЗадач.Задача = ЗадачаДок.Ссылка
		|ГДЕ
		|	ДействияЗадач.Исполнитель В (&СотрудникИЕгоРоли)
		|	И ДействияЗадач.СостояниеУчастникаЗадачи В (&СостоянияОжидаетВыполнения)");
	
	Если РеквизитыЗамещения.ВопросыЗамещения.Найти(Справочники.ОбластиЗамещения.ВсеОбласти) <> Неопределено Тогда
		// Все задачи.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПОМЕСТИТЬ ДействияЗадачСотрудника", "");
	Иначе
		
		// Вычисление передаваемых типов приложений.
		ЗапросПоСоставуОбластей = Новый Запрос(
			"ВЫБРАТЬ
			|	ТипЗначения(ИдентификаторыОбъектовМетаданных.ЗначениеПустойСсылки) КАК ТипОбъекта
			|ИЗ
			|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбластиЗамещения.Состав КАК ОбластиЗамещенияСостав
			|		ПО ОбластиЗамещенияСостав.ОбъектМетаданных = ИдентификаторыОбъектовМетаданных.Ссылка
			|ГДЕ
			|	ОбластиЗамещенияСостав.Ссылка В (&ВопросыЗамещения)");
		ЗапросПоСоставуОбластей.УстановитьПараметр("ВопросыЗамещения", РеквизитыЗамещения.ВопросыЗамещения.ВыгрузитьКолонку("Область"));
		ДоступныеТипыПриложений = ЗапросПоСоставуОбластей.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
		
		// Задачи с отбором по типу приложений, без доп. условий; вопросы выполнения задач.
		Запрос.Текст =  Запрос.Текст + "
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|" + "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДействияЗадачСотрудника.ДействиеЗадачи КАК ДействиеЗадачи
			|ИЗ
			|	ДействияЗадачСотрудника КАК ДействияЗадачСотрудника
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача.Приложения КАК ЗадачаПриложения
			|		ПО ДействияЗадачСотрудника.Задача = ЗадачаПриложения.Ссылка
			|ГДЕ
			|	ТипЗначения(ЗадачаПриложения.Приложение) В (&ДоступныеТипыПриложений)
			|	И НЕ ДействияЗадачСотрудника.ВидДействия В (&ВидыДействийВопросЗапрос)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ДействияЗадачСотрудника.ДействиеЗадачи КАК ДействиеЗадачи
			|ИЗ
			|	ДействияЗадачСотрудника КАК ДействияЗадачСотрудника
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача.Приложения КАК ЗадачаПриложения
			|		ПО ДействияЗадачСотрудника.Задача = ЗадачаПриложения.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
			|		ПО ЗадачаПриложения.Приложение = Файлы.Ссылка
			|ГДЕ
			|	ТипЗначения(Файлы.ВладелецФайла) В (&ДоступныеТипыПриложений)
			|	И НЕ ДействияЗадачСотрудника.ВидДействия В (&ВидыДействийВопросЗапрос)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ДействияЗадачСотрудника.ДействиеЗадачи КАК ДействиеЗадачи
			|ИЗ
			|	ДействияЗадачСотрудника КАК ДействияЗадачСотрудника
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачиИсточники
			|		ПО ДействияЗадачСотрудника.Источник = ЗадачиИсточники.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.РешениеВопросовВыполненияЗадач КАК РешениеВопросов
			|		ПО ЗадачиИсточники.БизнесПроцесс = РешениеВопросов.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДействиеЗадачи КАК ДействияПредметы
			|		ПО РешениеВопросов.ПредметРассмотрения = ДействияПредметы.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ЗадачиПредметов
			|		ПО ДействияПредметы.Задача = ЗадачиПредметов.Ссылка
			|ГДЕ
			|	ДействияЗадачСотрудника.ВидДействия В (&ВидыДействийВопросЗапрос)
			|	И (ЗадачиПредметов.Создал = &Замещающий
			|		ИЛИ ЗадачиПредметов.Создал = &ПользовательЗамещающего)";
		
		// Документы - доп. условия по видам задач и документов.
		ПоДокументамДоступныВсеЗадачи = РеквизитыЗамещения.ВопросыЗамещения.Найти(
			Справочники.ОбластиЗамещения.Документы) <> Неопределено;
		ЕстьЗадачиПоДокументам = ПоДокументамДоступныВсеЗадачи;
		Если Не ПоДокументамДоступныВсеЗадачи Тогда
			ЗапросПоОбластямЗамещения = Новый Запрос(
				"ВЫБРАТЬ
				|	МАКСИМУМ(ОбластиЗамещения.Ссылка В (&ВсеВыбранныеОбласти)) КАК ЕстьВыбранные,
				|	МАКСИМУМ(НЕ ОбластиЗамещения.Ссылка В (&ВыбранныеОбластиБезОтборов)) КАК ЕстьНевыбранные
				|ИЗ
				|	Справочник.ОбластиЗамещения КАК ОбластиЗамещения
				|ГДЕ
				|	ОбластиЗамещения.Родитель = ЗНАЧЕНИЕ(Справочник.ОбластиЗамещения.Документы)
				|	И ОбластиЗамещения.Ссылка <> ЗНАЧЕНИЕ(Справочник.ОбластиЗамещения.ДокументыПросмотрИРедактирование)");
			
			ВыбранныеОбластиБезОтборов = Новый Массив;
			ВсеВыбранныеОбласти = Новый Массив;
			Для Каждого СтрЗамещения Из РеквизитыЗамещения.ВопросыЗамещения Цикл
				Если Не ЗначениеЗаполнено(СтрЗамещения.ЗначениеОтбора) Тогда
					ВыбранныеОбластиБезОтборов.Добавить(СтрЗамещения.Область);
				КонецЕсли;
				ВсеВыбранныеОбласти.Добавить(СтрЗамещения.Область);
			КонецЦикла;
			
			ЗапросПоОбластямЗамещения.УстановитьПараметр("ВыбранныеОбластиБезОтборов", ВыбранныеОбластиБезОтборов);
			ЗапросПоОбластямЗамещения.УстановитьПараметр("ВсеВыбранныеОбласти", ВсеВыбранныеОбласти);
			
			Выборка = ЗапросПоОбластямЗамещения.Выполнить().Выбрать();
			Выборка.Следующий();
			ЕстьЗадачиПоДокументам = Выборка.ЕстьВыбранные;
			ПоДокументамДоступныВсеЗадачи = Не Выборка.ЕстьНевыбранные;
		КонецЕсли;
		Если ЕстьЗадачиПоДокументам И Не ПоДокументамДоступныВсеЗадачи Тогда
			ИндексДокументы = ДоступныеТипыПриложений.Найти(Тип("СправочникСсылка.ДокументыПредприятия"));
			Если ИндексДокументы <> Неопределено Тогда
				// Из общего запроса документы исключаются.
				ДоступныеТипыПриложений.Удалить(ИндексДокументы);
			КонецЕсли;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ОбластьЗамещения,
				|	ВидЗадачи
				|ПОМЕСТИТЬ ВидыЗадачПоОбластям
				|ИЗ
				|	&ВидыЗадачПоОбластям КАК ВидыЗадачПоОбластям
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВидыДокументов.Ссылка КАК ВидДокумента,
				|	ВидыЗадачПоОбластям.ВидЗадачи
				|ПОМЕСТИТЬ ПоляПриложенийИВидыЗадач
				|ИЗ
				|	Справочник.ЗамещающиеИПомощники.ВопросыЗамещения КАК ВопросыЗамещения
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументов КАК ВидыДокументов
				|		ПО ВопросыЗамещения.Область = ЗНАЧЕНИЕ(Справочник.ОбластиЗамещения.ВсеОбласти)
				|		ИЛИ ВопросыЗамещения.Область = ЗНАЧЕНИЕ(Справочник.ОбластиЗамещения.Документы)
				|		ИЛИ ВидыДокументов.Ссылка = ВопросыЗамещения.ЗначениеОтбора
				|		ИЛИ ВидыДокументов.Родитель = ВопросыЗамещения.ЗначениеОтбора
				|		ИЛИ ВидыДокументов.Родитель.Родитель = ВопросыЗамещения.ЗначениеОтбора
				|		ИЛИ ВидыДокументов.Родитель.Родитель.Родитель = ВопросыЗамещения.ЗначениеОтбора
				|		ИЛИ ВидыДокументов.Родитель.Родитель.Родитель.Родитель = ВопросыЗамещения.ЗначениеОтбора
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыЗадачПоОбластям КАК ВидыЗадачПоОбластям
				|		ПО ВопросыЗамещения.Область = ЗНАЧЕНИЕ(Справочник.ОбластиЗамещения.ВсеОбласти)
				|		ИЛИ ВопросыЗамещения.Область = ЗНАЧЕНИЕ(Справочник.ОбластиЗамещения.Документы)
				|		ИЛИ ВопросыЗамещения.Область = ВидыЗадачПоОбластям.ОбластьЗамещения
				|ГДЕ
				|	ВопросыЗамещения.Ссылка = &Замещение
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|"
			+ Запрос.Текст
				+ "
				|
				|ОБЪЕДИНИТЬ
				|
				|" + "ВЫБРАТЬ
				|	ДействияЗадачСотрудника.ДействиеЗадачи КАК ДействиеЗадачи
				|ИЗ
				|	ДействияЗадачСотрудника КАК ДействияЗадачСотрудника
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача.Приложения КАК ЗадачаПриложения
				|		ПО ДействияЗадачСотрудника.Задача = ЗадачаПриложения.Ссылка
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДокументыПредприятия КАК ДокументыПредприятия
				|		ПО ЗадачаПриложения.Приложение = ДокументыПредприятия.Ссылка
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоляПриложенийИВидыЗадач КАК ПоляПриложенийИВидыЗадач
				|		ПО ДокументыПредприятия.ВидДокумента = ПоляПриложенийИВидыЗадач.ВидДокумента
				|		И ДействияЗадачСотрудника.ВидЗадачи = ПоляПриложенийИВидыЗадач.ВидЗадачи";
		КонецЕсли;
		
		// Прочие поручения.
		Если РеквизитыЗамещения.ВопросыЗамещения.Найти(Справочники.ОбластиЗамещения.ЗадачиВыполнениеПрочихПоручений) <> Неопределено
			Или РеквизитыЗамещения.ВопросыЗамещения.Найти(Справочники.ОбластиЗамещения.Задачи) <> Неопределено Тогда
			Запрос.Текст = Запрос.Текст 
				+ "
				|
				|ОБЪЕДИНИТЬ
				|
				|" + "ВЫБРАТЬ
				|	ДействияЗадачСотрудника.ДействиеЗадачи КАК ДействиеЗадачи
				|Из
				|	ДействияЗадачСотрудника КАК ДействияЗадачСотрудника
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Задача КАК ЗадачаДок
				|		ПО ДействияЗадачСотрудника.Задача = ЗадачаДок.Ссылка
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Задача.Приложения КАК ЗадачаПриложения
				|		ПО ДействияЗадачСотрудника.Задача = ЗадачаПриложения.Ссылка
				|ГДЕ
				|	ЗадачаДок.Источник = НЕОПРЕДЕЛЕНО
				|	И (ЗадачаПриложения.Приложение ЕСТЬ NULL
				|		ИЛИ ТИПЗНАЧЕНИЯ(ЗадачаПриложения.Приложение) В (&ТипыПредметовПрочихЗадач)
				|		ИЛИ ЗадачаПриложения.Приложение ССЫЛКА Справочник.Файлы
				|			И ЗадачаПриложения.Приложение.ВладелецФайла В (&ТипыПредметовПрочихЗадач))";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДоступныеТипыПриложений", ДоступныеТипыПриложений);
		Запрос.УстановитьПараметр("ТипыПредметовПрочихЗадач",
			ЗамещающиеИПомощники.ТипыПредметовПрочихЗадач());
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Замещение", Замещение);
	Запрос.УстановитьПараметр("Замещающий",РеквизитыЗамещения.Замещающий);
	Запрос.УстановитьПараметр("ПользовательЗамещающего",Сотрудники.ПользовательСотрудника(РеквизитыЗамещения.Замещающий));
	Запрос.УстановитьПараметр("ВидыЗадачПоОбластям", ВидыЗадачДокументовПоОбластямЗамещения());
	
	СотрудникИЕгоРоли = РегистрыСведений.ИсполнителиРолей.РолиИсполнителя(РеквизитыЗамещения.Сотрудник);
	СотрудникИЕгоРоли.Добавить(РеквизитыЗамещения.Сотрудник);
	Запрос.УстановитьПараметр("СотрудникИЕгоРоли", СотрудникИЕгоРоли);
	
	СостоянияОжидаетВыполнения = Справочники.СостоянияУчастниковЗадач.СостоянияОжидаетВыполнения();
	СостоянияОжидаетВыполнения.Добавить(Справочники.СостоянияУчастниковЗадач.ПустаяСсылка());
	Запрос.УстановитьПараметр("СостоянияОжидаетВыполнения", СостоянияОжидаетВыполнения);
	
	ВидыДействийВопросЗапрос = Новый Массив;
	ВидыДействийВопросЗапрос.Добавить(Справочники.ВидыДействийЗадач.РассмотретьВопрос);
	ВидыДействийВопросЗапрос.Добавить(Справочники.ВидыДействийЗадач.РассмотретьЗапрос);
	Запрос.УстановитьПараметр("ВидыДействийВопросЗапрос", ВидыДействийВопросЗапрос);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
КонецФункции

// Обновить кэширующие данные по сотруднику.
// 
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса.
// 
Процедура ОбновитьКэширующиеДанныеПоСотруднику(Выборка)
	
	Сотрудник = Выборка.КлючВлияющихДанных; // СправочникСсылка.Сотрудники
	
	НачатьТранзакцию();
	Попытка
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ЗамещающиеИПомощники.Ссылка,
			|	ЗамещающиеИПомощники.ВопросыЗамещения.(
			|		Ссылка,
			|		НомерСтроки,
			|		Область,
			|		ЗначениеОтбора)
			|ИЗ
			|	Справочник.ЗамещающиеИПомощники КАК ЗамещающиеИПомощники
			|ГДЕ
			|	ЗамещающиеИПомощники.Замещающий = &Сотрудник
			|	И ЗамещающиеИПомощники.Действует");
		
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ВопросыЗамещения = ВыборкаДетальныеЗаписи.ВопросыЗамещения.Выгрузить();
			
			ЕстьВсеОбласти =
				ВопросыЗамещения.Найти(
					Справочники.ОбластиЗамещения.ВсеОбласти, "Область") <> Неопределено;
			
			ЕстьОбластьПроекты =
				ВопросыЗамещения.Найти(
					Справочники.ОбластиЗамещения.Проекты, "Область") <> Неопределено;
			ЭтоЗамещениеПроектов = ЕстьВсеОбласти Или ЕстьОбластьПроекты;
			
			ЕстьОбластьЗадачиПросмотр =
				ВопросыЗамещения.Найти(
					Справочники.ОбластиЗамещения.ЗадачиПросмотр, "Область") <> Неопределено;
			ЕстьОбластьЗадачи =
				ВопросыЗамещения.Найти(
					Справочники.ОбластиЗамещения.Задачи, "Область") <> Неопределено;
			ЭтоЗамещениеЗадач = ЕстьВсеОбласти Или ЕстьОбластьЗадачиПросмотр Или ЕстьОбластьЗадачи;
			
			Если ЭтоЗамещениеПроектов Тогда
				
				РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
					"Справочник.Проекты",
					"Справочник.ЗамещающиеИПомощники",
					ВыборкаДетальныеЗаписи.Ссылка);
					
			КонецЕсли;
			
			Если ЭтоЗамещениеЗадач Тогда
				
				РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
					"РегистрСведений.ИсполнителиРолей",
					"Справочник.ЗамещающиеИПомощники",
					ВыборкаДетальныеЗаписи.Ссылка);
				
				РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
					"Документ.Задача",
					"Справочник.ЗамещающиеИПомощники",
					ВыборкаДетальныеЗаписи.Ссылка);
				
				РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
					"Документ.ДействиеЗадачи",
					"Справочник.ЗамещающиеИПомощники",
					ВыборкаДетальныеЗаписи.Ссылка);
				
				РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
					"Справочник.СтруктураПредприятия",
					"Справочник.ЗамещающиеИПомощники",
					ВыборкаДетальныеЗаписи.Ссылка);
					
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

#КонецОбласти

#КонецЕсли
