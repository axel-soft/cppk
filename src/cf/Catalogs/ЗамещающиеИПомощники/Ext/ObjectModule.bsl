#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеКэширующихДанных

// Обрабатывает изменение влияющих данных, формирует очередь обновления кэширующих данных.
//
Процедура ОбработатьИзменениеВлияющихДанных() Экспорт
	
	ВлияющийОбъектМетаданных = "Справочник.ЗамещающиеИПомощники";
	КлючВлияющихДанных = Ссылка;
	
	// Замещающие и помощники руководителя проекта.
	ЗависимыйОбъектМетаданных = "Справочник.Проекты";
	ВлияющиеРеквизиты = "Замещающий, Сотрудник, Действует, ВопросыЗамещения";
	ОбновлениеКэширующихДанных.ОбработатьИзменениеВлияющихДанных(
		ЭтотОбъект,
		ЗависимыйОбъектМетаданных,
		ВлияющийОбъектМетаданных,
		КлючВлияющихДанных,
		ВлияющиеРеквизиты);
	
	// Замещающие и помощники исполнителя роли.
	ЗависимыйОбъектМетаданных = "РегистрСведений.ИсполнителиРолей";
	ВлияющиеРеквизиты = "Замещающий, Сотрудник, Действует, ВопросыЗамещения";
	ОбновлениеКэширующихДанных.ОбработатьИзменениеВлияющихДанных(
		ЭтотОбъект,
		ЗависимыйОбъектМетаданных,
		ВлияющийОбъектМетаданных,
		КлючВлияющихДанных,
		ВлияющиеРеквизиты);
	
	// Замещающие и помощники автора задачи.
	ЗависимыйОбъектМетаданных = "Документ.Задача";
	ВлияющиеРеквизиты = "Замещающий, Сотрудник, Действует, ВопросыЗамещения";
	ОбновлениеКэширующихДанных.ОбработатьИзменениеВлияющихДанных(
		ЭтотОбъект,
		ЗависимыйОбъектМетаданных,
		ВлияющийОбъектМетаданных,
		КлючВлияющихДанных,
		ВлияющиеРеквизиты);
	
	// Замещающие и помощники исполнителя задачи.
	ЗависимыйОбъектМетаданных = "Документ.ДействиеЗадачи";
	ВлияющиеРеквизиты = "Замещающий, Сотрудник, Действует, ВопросыЗамещения";
	ОбновлениеКэширующихДанных.ОбработатьИзменениеВлияющихДанных(
		ЭтотОбъект,
		ЗависимыйОбъектМетаданных,
		ВлияющийОбъектМетаданных,
		КлючВлияющихДанных,
		ВлияющиеРеквизиты);
	
	// Замещающие и помощники руководителя подразделения.
	ЗависимыйОбъектМетаданных = "Справочник.СтруктураПредприятия";
	ВлияющиеРеквизиты = "Замещающий, Сотрудник, Действует, ВопросыЗамещения";
	ОбновлениеКэширующихДанных.ОбработатьИзменениеВлияющихДанных(
		ЭтотОбъект,
		ЗависимыйОбъектМетаданных,
		ВлияющийОбъектМетаданных,
		КлючВлияющихДанных,
		ВлияющиеРеквизиты);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Создал) Тогда
		Создал = Сотрудники.ОсновнойСотрудник();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Сотрудник = Сотрудники.ОсновнойСотрудник();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ВопросыЗамещения.Количество() = 0 Тогда
		Стр = ВопросыЗамещения.Добавить();
		Стр.Область = Справочники.ОбластиЗамещения.ВсеОбласти;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Создал = Сотрудники.ОсновнойСотрудник();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗначениеЗаполнено(ДатаОкончания) И ДатаНачала > ДатаОкончания Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Дата окончания должна быть больше или равна дате начала'"),
			ЭтотОбъект, "ДатаОкончания",, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗамещениеДоступно(Сотрудник, Замещающий);
	
	// Создание замещения из помеченного на удаление отсутствия.
	Если ЗначениеЗаполнено(Основание)
		И Не ПометкаУдаления
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ПометкаУдаления") Тогда
		ПометкаУдаления = Истина;
	КонецЕсли;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	Действует = Не ПометкаУдаления
		И ДатаНачала <= ТекущаяДатаСеанса
		И (Не ЗначениеЗаполнено(ДатаОкончания) Или КонецДня(ДатаОкончания) >= ТекущаяДатаСеанса); 
	
	Наименование = СтрШаблон("%1 %2 %3",
		Замещающий,
		?(ВидЗамещения = Перечисления.ВидыЗамещения.Замещающие, НСтр("ru = 'за'"), НСтр("ru = 'для'")),
		Сотрудник);
	
	ОбщегоНазначенияДокументооборот.УстановитьДополнительноеСвойствоПредыдущиеЗначенияРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьИзмененияВлияющиеНаЗадачи = ОбщегоНазначенияДокументооборот.ИзменилосьЗначениеРеквизитов(
		ЭтотОбъект, "ВидЗамещения, Действует, Замещающий, Сотрудник, ВопросыЗамещения");
	
	Если ЕстьИзмененияВлияющиеНаЗадачи Тогда
		Если Не ОбработкаОчередиЗаданийСервер.ДобавитьЗаданиеОбновитьДанныеЗадачПоЗамещению(Ссылка) Тогда
			Справочники.ЗамещающиеИПомощники.ОбновитьДанныеЗадачПоЗамещению(Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	// Бизнес-события.
	Если Действует Тогда
		Если ДополнительныеСвойства.ЭтоНовый Тогда
			БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(
				Ссылка, Справочники.ВидыБизнесСобытий.ЗамещающиеИПомощникиСоздание);
		ИначеЕсли Не ДополнительныеСвойства.Свойство("ЭтоАвтоматическаяАктуализацияВСоответствииСоСроками")
				Или ДополнительныеСвойства.ЭтоАвтоматическаяАктуализацияВСоответствииСоСроками <> Истина Тогда
			БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(
				Ссылка, Справочники.ВидыБизнесСобытий.ЗамещающиеИПомощникиИзменение);
		КонецЕсли;
	КонецЕсли;
	Если ПометкаУдаления И ОбщегоНазначенияДокументооборот.ИзменилосьЗначениеРеквизитов(
			ЭтотОбъект, "ПометкаУдаления") Тогда
		БизнесСобытияВызовСервера.ПометитьНаУдалениеСобытияПоИсточнику(Ссылка);
	КонецЕсли;
	
	ОбработатьИзменениеВлияющихДанных();
	
КонецПроцедуры

#КонецОбласти

// Определяет, доступно ли сделать замещение.
// Полноправный пользователь и особая роль может сделать любое замещение.
// Обычный пользователь может выбрать себя, своего подчиненного или подчиненного того сотрудника, замещающим или 
// помощником которого он является.
// Если проверка не проходит, то вызывается исключение.
//
// Параметры:
//  Замещаемый - СправочникСсылка.Сотрудники - Кого замещают. Для проверки из формы - в этом параметре оба случая
//											   И кого и на кого.
//  Замещающий - СправочникСсылка.Сотрудники - На кого замещают..
//			   - Неопределено - Для проверки из формы.
Процедура ЗамещениеДоступно(Замещаемый, Замещающий)
	
	// Администратор, привилегированный режим и эта роль - могут всегда:
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеЗамещающихИПомощниковБезОграничения") Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Замещаемый) Или Не ЗначениеЗаполнено(Замещающий) Тогда
		// Перестраховка, эти поля обязательны для заполнения на уровне проверки заполнения:
		ВызватьИсключение НСтр("ru = 'Должен быть указан и замещаемый и замещающий сотрудники.'");
	КонецЕсли;
	
	ПодразделениеЗамещаемого = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Замещаемый, "Подразделение");
	ПодразделениеЗамещающего = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Замещающий, "Подразделение");
	ПодразделенияВсех = Справочники.ЗамещающиеИПомощники.ПодразделенияУчастниковЗамещения();
	
	Если Не Справочники.ЗамещающиеИПомощники.ПодразделениеВходитВИерархию(
		ПодразделениеЗамещаемого, ПодразделенияВсех) Тогда
		ВызватьИсключение Справочники.ЗамещающиеИПомощники.ТекстОшибки_НельзяВыбратьСотрудника(Замещаемый);
	КонецЕсли;
	Если Не Справочники.ЗамещающиеИПомощники.ПодразделениеВходитВИерархию(
		ПодразделениеЗамещающего, ПодразделенияВсех) Тогда
		ВызватьИсключение Справочники.ЗамещающиеИПомощники.ТекстОшибки_НельзяВыбратьСотрудника(Замещающий);
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли
