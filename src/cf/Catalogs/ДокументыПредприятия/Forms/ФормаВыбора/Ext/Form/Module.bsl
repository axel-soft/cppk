#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// текущая строка по умолчанию
	Если Параметры.Свойство("ТекущаяСтрока") И ЗначениеЗаполнено(Параметры.ТекущаяСтрока) 
	   И ТипЗнч(Параметры.ТекущаяСтрока) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда 
		ТекущаяПапка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ТекущаяСтрока, "Папка");
		Элементы.Папки.ТекущаяСтрока = ТекущаяПапка;
	Иначе
		ТекущаяПапка = Неопределено;
	КонецЕсли;	     
	
	ВестиУчетПоТематикам = Истина;
	
	// вид просмотра
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПапкиДокументов") Тогда
	
		ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоПапкам;
		
	Иначе
		
		ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.Списком;
		Элементы.ВидПросмотраМеню.Видимость = Ложь;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ИспользоватьИерархию") И Не Параметры.ИспользоватьИерархию Тогда
		СвойствоИспользоватьИерархию = Истина;
		ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.Списком;
	КонецЕсли;
	ПереключитьВидПросмотра();
	
	// Комплекты документов
	Если Параметры.Свойство("ЯвляетсяКомплектомДокументов") Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ЯвляетсяКомплектомДокументов", Параметры.ЯвляетсяКомплектомДокументов);
	КонецЕсли;
	
	// Виды документов
	Если Параметры.Свойство("ВидДокумента") Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ВидДокумента", Параметры.ВидДокумента);
		
		ДоступныеВидыДокументов.Добавить(Параметры.ВидДокумента);
	КонецЕсли;
	
	Если Параметры.Свойство("ПоказыватьКомандуСоздать") Тогда
		Элементы.СписокСоздать.Видимость = (Параметры.ПоказыватьКомандуСоздать = Истина);
	КонецЕсли;
	
	Если Параметры.Свойство("Заголовок") Тогда
		Заголовок = Параметры.Заголовок;
	КонецЕсли;
	
	Если Параметры.Свойство("ТолькоВходящаяКорреспонденция") Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ТолькоВходящаяКорреспонденция",
			Параметры.ТолькоВходящаяКорреспонденция);
			
		Элементы.ИсходящийНомерИДата.Видимость = Истина;
		Элементы.Контрагент.Видимость = Истина;
		Элементы.Контрагент.Заголовок = НСтр("ru = 'Отправитель'"); 
		
		КлючНазначенияИспользования = "ТолькоВходящаяКорреспонденция";
		КлючСохраненияПоложенияОкна = "ТолькоВходящаяКорреспонденция"; 
		
		ТипКорреспонденции = "ЯвляетсяВходящейКорреспонденцией";
	
	ИначеЕсли Параметры.Свойство("ТолькоИсходящаяКорреспонденция") Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ТолькоИсходящаяКорреспонденция",
			Параметры.ТолькоИсходящаяКорреспонденция);   
			
		Элементы.Контрагент.Видимость = Истина;
		Элементы.Контрагент.Заголовок = НСтр("ru = 'Получатели'");   
		
		Если ДелопроизводствоПовтИсп.ЕстьИсходящиеВидыДокументовСУчетомВходящегоНомера() Тогда
			Элементы.ИсходящийНомерИДата.Видимость = Истина;
			Элементы.ИсходящийНомерИДата.Заголовок = НСтр("ru = 'Номер и дата получателя'");   
		КонецЕсли;
		
		КлючНазначенияИспользования = "ТолькоИсходящаяКорреспонденция";
		КлючСохраненияПоложенияОкна = "ТолькоИсходящаяКорреспонденция";
		
		ТипКорреспонденции = "ЯвляетсяИсходящейКорреспонденцией";
		
	ИначеЕсли Параметры.Свойство("ТолькоНеКорреспонденция") Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ТолькоНеКорреспонденция",
			Параметры.ТолькоНеКорреспонденция);      
			
		Элементы.Контрагент.Видимость = Ложь;                         
		КлючНазначенияИспользования = "ТолькоНеКорреспонденция";  
		КлючСохраненияПоложенияОкна = "ТолькоНеКорреспонденция";  
		
	КонецЕсли;
	
	// Только зарегистрированные.
	Если Параметры.ТолькоЗарегистрированные Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ПустойРегистрационныйНомер", "");
	КонецЕсли;
	
	ВыбранныеДокументыНадпись = НСтр("ru = 'Выбранные документы:'");
	
	// Подбор связанного документа
	Если Параметры.Свойство("СвязанныйОбъект") Тогда
		СписокСвязанныхДокументов = ПолучитьСписокСвязанныхДокументов(Параметры.СвязанныйОбъект);
		Список.Параметры.УстановитьЗначениеПараметра("СписокСвязанныхДокументов", СписокСвязанныхДокументов);
	КонецЕсли;
	
	Если Параметры.Свойство("ВыбранныеЗначения") Тогда
		Для каждого Значение Из Параметры.ВыбранныеЗначения Цикл
			ВыбранныеЗначения.Добавить(Значение, ПолучитьПолныйПуть(Значение) + Значение);
		КонецЦикла;
		ОбновитьОтображение();
	КонецЕсли;
	
	Если ЗакрыватьПриВыборе Тогда
		Элементы.ВыбранныеДокументыНадпись.Видимость = Ложь;
		Элементы.ВыбранныеЗначения.Видимость = Ложь;
	КонецЕсли;
	
	//кешируем наличие доступных шаблонов документов
	ЕстьДоступныеШаблоныДокументов = Делопроизводство.ЕстьДоступныеШаблоныДокументов();
	
	ПоказыватьУдаленные = Ложь;
	ПоказатьУдаленные();
	
	// Тематики
	ТематикиИспользуются = РаботаСТематикамиДокументов.ТематикиИспользуются();
	Если ТематикиИспользуются Тогда 
		Элементы.ВидИТематикаТекст.Подсказка = НСтр("ru = 'Вид и тематика документа'");
		Элементы.ВидИТематикаТекст.ПодсказкаВвода = НСтр("ru = 'Вид и тематика документа'");
	Иначе 
		Элементы.ВидИТематикаТекст.Подсказка = НСтр("ru = 'Вид документа'");
		Элементы.ВидИТематикаТекст.ПодсказкаВвода = НСтр("ru = 'Вид документа'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НавигационнаяСсылка) Тогда
		НавигационнаяСсылка = "e1cib/list/Справочник.ДокументыПредприятия";
	КонецЕсли;
	
	ЭтоМобильныйКлиент = ПараметрыСеанса.ЭтоМобильныйКлиент;
	Если ЭтоМобильныйКлиент Тогда
		МК_НастроитьЭлементыФормы();
	КонецЕсли;
	
	// Открытие в режиме "Обращения граждан":
	ЭтоРежимОбращенияГраждан = (
		КлючНазначенияИспользования = РаботаСОбращениямиКлиентСервер.КлючСписокОбращенийГраждан());
	Если ЭтоРежимОбращенияГраждан Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ЭтоРежимОбращенияГраждан", ЭтоРежимОбращенияГраждан);
		Элементы.ОтборКонтрагент.ПодсказкаВвода = НСтр("ru = 'Гражданин/Организация'");
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		Организация = Параметры.Организация;
	КонецЕсли;
	
	Если Параметры.ЗапретитьИзменятьФильтры = Истина Тогда
		
		Элементы.ГруппаБыстрыеОтборы.ТолькоПросмотр = Истина;
		Элементы.ПериодВыборки.Видимость = Ложь;
		
		Если Параметры.Отбор.Свойство("Организация") Тогда
			
			Организация = Параметры.Отбор.Организация;
			
		Иначе
			
			Элементы.ОтборОрганизация.Видимость = Ложь;
			
		КонецЕсли;
		
		Если Параметры.Отбор.Свойство("Контрагент") Тогда
			
			Контрагент = Параметры.Отбор.Контрагент;
			
		Иначе
			
			Элементы.ОтборКонтрагент.Видимость = Ложь;
			
		КонецЕсли;
		
		Если Параметры.Отбор.Свойство("ВидДокумента") Тогда
			
			ВидДокумента = Параметры.Отбор.ВидДокумента;
			Тематика = Неопределено;
			Если Параметры.Отбор.Свойство("Тематика") Тогда
				Тематика = Параметры.Отбор.Тематика;
			КонецЕсли;
			
			ВидИТематикаТекст = РаботаСШаблонамиДокументовКлиентСервер.ПредставлениеШаблона(ВидДокумента, Тематика);
			
		Иначе
			
			Элементы.ВидИТематикаТекст.Видимость = Ложь;
			
		КонецЕсли;
		
		ПараметрыОтбора = Новый Соответствие;
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ПараметрыОтбора, Параметры.Отбор);
		РаботаСоСпискамиДокументовКлиентСервер.УстановитьОтборСписка(Список, ПараметрыОтбора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//Обработчик ожидания для периодического обновления количества доступных шаблонов документов через каждые 20 минут
	ПодключитьОбработчикОжидания("ОбновитьКоличествоДоступныхШаблонов", 1200, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Не СвойствоИспользоватьИерархию Тогда 
	
		ВидПросмотра = Настройки["ВидПросмотра"];
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПапкиДокументов") Тогда
		
			ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.Списком;
		
		КонецЕсли;
		
		ПереключитьВидПросмотра();
		
	КонецЕсли;	
	
	ПоказыватьУдаленные = Настройки["ПоказыватьУдаленные"];
	ПоказатьУдаленные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПолученияНавигационнойСсылки(Ключ, Представление, ПолученнаяНавигационнаяСсылка, СтандартнаяОбработка)
	
	ТекущийДанные = Элементы.Список.ТекущиеДанные;
	Если Ключ = "Документ" И ТекущийДанные <> Неопределено
		И ЗначениеЗаполнено(ТекущийДанные.Ссылка) Тогда
		
		ПолученнаяНавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ТекущийДанные.Ссылка);

	Иначе
		
		ВызватьИсключение СтрШаблон("%1 ""%2""", НСтр("ru = 'Неизвестный ключ'"), Ключ);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПолученияСпискаНавигационныхСсылок(СписокНавигационыхСсылок, КлючПоУмолчанию)
	
	КлючФормы = "Документ";
	ТекущийДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущийДанные <> Неопределено И ЗначениеЗаполнено(ТекущийДанные.Ссылка) Тогда
		ПредставлениеФормы = СтрШаблон("%1 (%2)", Строка(ТекущийДанные.Ссылка), НСтр("ru = 'Документ'"));
		СписокНавигационыхСсылок.Добавить(КлючФормы, ПредставлениеФормы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПапкиПриАктивизацииСтроки(Элемент)
	
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам") Тогда	
	
		Если ТекущаяПапка = Элементы.Папки.ТекущаяСтрока Тогда
			Возврат;
		КонецЕсли;
		
		ТекущаяПапка = Элементы.Папки.ТекущаяСтрока;
		
		ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина);
		
		Если ЭтоМобильныйКлиент Тогда
			Элементы.МК_Папки.Скрыть();
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодВыборкиПриИзменении(Элемент)
	
	ПараметрыОтбора = Новый Соответствие;
	Параметрыотбора.Вставить("ПериодВыборки", ПериодВыборки);
	
	РаботаСоСпискамиДокументовКлиентСервер.УстановитьОтборСписка(Список, ПараметрыОтбора);
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент, ПериодВыборки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	УстановитьОтборПоОрганизации(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидИТематикаТекстПриИзменении(Элемент)
	
	ДелопроизводствоКлиент.ВидИТематикаПриИзменении(ЭтаФорма, Истина);
	РаботаСоСпискамиДокументовКлиентСервер.УстановитьОтборВидДокумента(Список, ВидДокумента, Тематика, ДоступныеВидыДокументов);
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент, ВидИТематикаТекст);
	
	ДелопроизводствоКлиент.ВидИТематикаУстановитьВидимостьКнопкиВыбора(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидИТематикаТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДелопроизводствоКлиент.ВидИТематикаНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидИТематикаТекстОчистка(Элемент, СтандартнаяОбработка)
	
	ДелопроизводствоКлиент.ВидИТематикаОчистка(ЭтаФорма, Истина);
	РаботаСоСпискамиДокументовКлиентСервер.УстановитьОтборВидДокумента(Список, ВидДокумента, Тематика, ДоступныеВидыДокументов);
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент, ВидИТематикаТекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидИТематикаТекстОткрытие(Элемент, СтандартнаяОбработка)
	
	ДелопроизводствоКлиент.ВидИТематикаОткрытие(ЭтаФорма, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидИТематикаТекстОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДелопроизводствоКлиент.ВидИТематикаОбработкаВыбора(
		ЭтаФорма, ВыбранноеЗначение, СтандартнаяОбработка, Истина);
	
	РаботаСоСпискамиДокументовКлиентСервер.УстановитьОтборВидДокумента(Список, ВидДокумента, Тематика, ДоступныеВидыДокументов);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент, ВидИТематикаТекст);
	
	ДелопроизводствоКлиент.ВидИТематикаУстановитьВидимостьКнопкиВыбора(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидИТематикаТекстАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ДелопроизводствоКлиент.ВидИТематикаАвтоПодбор(
		ЭтаФорма, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидИТематикаТекстОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ДелопроизводствоКлиент.ВидИТематикаОкончаниеВводаТекста(
		ЭтаФорма, Текст, ДанныеВыбора, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентПриИзменении(Элемент)
	
	ПараметрыОтбора = Новый Соответствие;
	Параметрыотбора.Вставить("Контрагент", Контрагент);	
	
	РаботаСоСпискамиДокументовКлиентСервер.УстановитьОтборСписка(Список, ПараметрыОтбора);
	
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент, Контрагент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = РаботаСоСпискамиДокументовКлиент.ПолучитьДанныеТекущейСтрокиСписка(Элементы.Список,
		Элементы.Список.ТекущаяСтрока);
		
	Если ЗакрыватьПриВыборе Тогда
		Если ТекущиеДанные = Неопределено Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана строка.'"));
			Возврат;
		КонецЕсли;
		
		ОповеститьОВыборе(ТекущиеДанные.Ссылка);
		Возврат;
	КонецЕсли;
	
	ВыборЗначенияСервер(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.Списком") Тогда
		
		ТекущиеДанные = РаботаСоСпискамиДокументовКлиент.ПолучитьДанныеТекущейСтрокиСписка(Элементы.Список,
			Элементы.Список.ТекущаяСтрока);
		
		Если ТекущиеДанные <> Неопределено Тогда 
			ТекущаяПапка = ТекущиеДанные.Папка;
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	СоздатьНовыйДокумент(Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	РаботаСоСпискамиДокументовКлиент.СписокПередНачаломИзменения(
		Элементы.Список, Элементы.Список.ТекущаяСтрока, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	РаботаСоСпискамиДокументовКлиент.ВыполнитьУстановкуПометкиУдаления(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	МассивДокументов = Новый Массив;
	Для Каждого Значение Из ПараметрыПеретаскивания.Значение Цикл
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(Значение);
		Если ДанныеСтроки <> Неопределено Тогда
			МассивДокументов.Добавить(ДанныеСтроки.Ссылка);
		КонецЕсли;	
	КонецЦикла;
		
	ПараметрыПеретаскивания.Значение = МассивДокументов;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыбранныеЗначения

&НаКлиенте
Процедура ВыбранныеЗначенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеЗначенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеЗначенияПослеУдаления(Элемент)
	
	ОбновитьОтображение();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеЗначенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеЗначенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СправочникСсылка.ДокументыПредприятия")
	 Или ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		ВыборЗначенияСервер(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выбрать(Команда)
	
	ТекущиеДанные = РаботаСоСпискамиДокументовКлиент.ПолучитьДанныеТекущейСтрокиСписка(Элементы.Список,
		Элементы.Список.ТекущаяСтрока);
	
	Если ЗакрыватьПриВыборе Тогда
		Если ТекущиеДанные = Неопределено Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана строка.'"));
			Возврат;
		КонецЕсли;
		ОповеститьОВыборе(ТекущиеДанные.Ссылка);
	Иначе
		Если ВыбранныеЗначения.Количество() = 0 Тогда
			ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
			Если ВыделенныеСтроки.Количество() = 0 Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ни один документ.'"));
				Возврат;
			КонецЕсли;
			
			Если ТекущиеДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			ОповеститьОВыборе(ТекущиеДанные.Ссылка);
		
		ИначеЕсли ВыбранныеЗначения.Количество() = 1 Тогда
			ОповеститьОВыборе(ВыбранныеЗначения[0].Значение);
		ИначеЕсли ВыбранныеЗначения.Количество() > 1 Тогда
			ОповеститьОВыборе(ВыбранныеЗначения.ВыгрузитьЗначения());
		КонецЕсли;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленные(Команда)
	
	ПоказыватьУдаленные = Не ПоказыватьУдаленные;
	
	ПоказатьУдаленные();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьПросмотрПапками(Команда)
	
	Если ВидПросмотра <> ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам") Тогда
		ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам");
		ПереключитьВидПросмотра();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьПросмотрСписком(Команда)
	
	Если ВидПросмотра <> ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.Списком") Тогда
		ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.Списком");
		ПереключитьВидПросмотра();
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработкаОжидания()
	
	Если ЗначениеЗаполнено(Элементы.Папки.ТекущаяСтрока) Тогда 
		Список.Параметры.УстановитьЗначениеПараметра("Папка", 
			Элементы.Папки.ТекущаяСтрока);
	Иначе
		Параметр = Список.Параметры.НайтиЗначениеПараметра(
			Новый ПараметрКомпоновкиДанных("Папка"));
		Если Параметр <> Неопределено И Параметр.Использование Тогда 
			Параметр.Использование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьВидПросмотра()
	
	Параметр = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Папка"));
	Параметр.Использование = Ложь;
	
	Элементы.ВключитьПросмотрПапками.Пометка = Ложь;
	Элементы.ВключитьПросмотрСписком.Пометка = Ложь;
	
	Если ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.Списком Тогда
		
		Элементы.Папки.Видимость = Ложь;
		Элементы.Список.ПодчиненныеЭлементы.Папка.Видимость = Истина;
		
		Элементы.ВключитьПросмотрСписком.Пометка = Истина;
		
	ИначеЕсли ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоПапкам Тогда
		
		Элементы.Папки.Видимость = Истина;
		Элементы.Список.ПодчиненныеЭлементы.Папка.Видимость = Ложь;
		
		Элементы.Папки.ТекущаяСтрока = ТекущаяПапка;
		
		Если ЗначениеЗаполнено(ТекущаяПапка) Тогда 
			Список.Параметры.УстановитьЗначениеПараметра("Папка", ТекущаяПапка);
		КонецЕсли;
		
		Элементы.ВключитьПросмотрПапками.Пометка = Истина;
		
	Иначе
		ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоПапкам;
		ПереключитьВидПросмотра();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыборЗначенияСервер(ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда 
		ЗначениеМассив = ВыбранноеЗначение;
	Иначе	
		ЗначениеМассив = Новый Массив;
		ЗначениеМассив.Добавить(ВыбранноеЗначение);
	КонецЕсли;	
	
	Для Каждого Значение Из ЗначениеМассив Цикл
		Элемент = ВыбранныеЗначения.НайтиПоЗначению(Значение);
		Если Элемент = Неопределено Тогда
			ВыбранныеЗначения.Добавить(Значение, ПолучитьПолныйПуть(Значение) + Строка(Значение));
			ВыбранныеЗначения.СортироватьПоПредставлению();
		Иначе
			ВыбранныеЗначения.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьОтображение();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйДокумент(Копирование)
	
	ТекущийДокумент = Элементы.Список.ТекущаяСтрока;
	ПараметрыФормы = Новый Структура;
	Если Копирование Тогда 
		ПараметрыФормы.Вставить("ЗначениеКопирования", ТекущийДокумент);
		Открытьформу("Справочник.ДокументыПредприятия.ФормаОбъекта", ПараметрыФормы, Элементы.Список);
		Возврат;
	КонецЕсли;
	
		
	Если ЕстьДоступныеШаблоныДокументов Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"СоздатьНовыйДокументПродолжение",
			ЭтотОбъект,
			ПараметрыФормы);
		РаботаСШаблонамиДокументовКлиент.ПоказатьФормуСозданияДокументаПоШаблону(
			ОписаниеОповещения,
			"ШаблоныДокументов");
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(ДелопроизводствоКлиентСервер.Текст_НетШаблоновИлиДоступаКНим());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйДокументПродолжение(Результат, ПараметрыФормы) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам") Тогда
		ТекущаяПапка = Элементы.Папки.ТекущаяСтрока;
	Иначе
		ТекущаяПапка = Неопределено;
	КонецЕсли;
	
	ПараметрыФормы = ДелопроизводствоКлиент.ПараметрыФормыДляСозданияДокумента(Результат);
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Папка", ТекущаяПапка);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	Открытьформу("Справочник.ДокументыПредприятия.ФормаОбъекта", ПараметрыФормы, Элементы.Список);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокСвязанныхДокументов(СвязанныйДокумент)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СвязиОбъектов.Объект КАК Ссылка
		|ИЗ
		|	РегистрСведений.СвязиОбъектов КАК СвязиОбъектов
		|ГДЕ
		|	СвязиОбъектов.СвязанныйОбъект = &Ссылка
		|	И СвязиОбъектов.Объект ССЫЛКА Справочник.ДокументыПредприятия
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СвязиОбъектов.СвязанныйОбъект
		|ИЗ
		|	РегистрСведений.СвязиОбъектов КАК СвязиОбъектов
		|ГДЕ
		|	СвязиОбъектов.Объект = &Ссылка
		|	И СвязиОбъектов.СвязанныйОбъект ССЫЛКА Справочник.ДокументыПредприятия");
	
	Запрос.УстановитьПараметр("Ссылка", СвязанныйДокумент);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Процедура ОбновитьОтображение()
	
	ВыбранныеДокументыНадпись = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Выбранные документы (%1):'"), 
			ВыбранныеЗначения.Количество());
			
	УсловноеОформление.Элементы[0].Отбор.Элементы[0].ПравоеЗначение = ВыбранныеЗначения;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПолныйПуть(Ссылка)
	
	УстановитьПривилегированныйРежим(Истина);
	Путь = "";
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДокументыПредприятия.Папка КАК Папка,
		|	ДокументыПредприятия.Папка.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
		|ГДЕ
		|	ДокументыПредприятия.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Папка = РезультатЗапроса[0].Папка;
	Пока ЗначениеЗаполнено(Папка) Цикл
		Путь = РезультатЗапроса[0].Наименование + "\" + Путь;
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ПапкиДокументов.Родитель КАК Папка,
			|	ПапкиДокументов.Родитель.Наименование КАК Наименование
			|ИЗ
			|	Справочник.ПапкиДокументов КАК ПапкиДокументов
			|ГДЕ
			|	ПапкиДокументов.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Папка);
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Папка = РезультатЗапроса[0].Папка;
	КонецЦикла;
	
	Возврат Путь;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьКоличествоДоступныхШаблонов()
	
	ЕстьДоступныеШаблоныДокументов = Делопроизводство.ЕстьДоступныеШаблоныДокументов();
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьУдаленные()
	
	Если ПоказыватьУдаленные Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список, "ПометкаУдаления");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Папки, "ПометкаУдаления");
	Иначе	
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПометкаУдаления", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Папки, "ПометкаУдаления", Ложь);
	КонецЕсли;	
	
	Элементы.ПоказыватьУдаленные.Пометка = ПоказыватьУдаленные;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоОрганизации(Элемент)
	
	ПараметрыОтбора = Новый Соответствие();
	ПараметрыОтбора.Вставить("Организация", Организация);
	РаботаСоСпискамиДокументовКлиентСервер.УстановитьОтборСписка(Список, ПараметрыОтбора);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент, Организация);
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункцииМобильныйКлиент

&НаСервере
Процедура МК_НастроитьЭлементыФормы()

	СворачиваниеЭлементовПоВажности = СворачиваниеЭлементовФормыПоВажности.НеИспользовать;
	ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	
	ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Авто;
	Элементы.ГруппаКоманднаяПанель.Видимость = Ложь;
	
	Элементы.ГруппаСписки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	Элементы.Список.Шапка = Ложь;
	Элементы.Список.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	Элементы.Список.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.ПотянутьСверху;
	
	Элементы.Переместить(Элементы.ГруппаБыстрыеОтборы, Элементы.ГруппаСписки, Элементы.МК_Папки);
	Элементы.ГруппаБыстрыеОтборы.РастягиватьПоГоризонтали = Истина;
	Элементы.ГруппаБыстрыеОтборы.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
	Элементы.ГруппаБыстрыеОтборы.ОтображатьЗаголовок = Истина;
	Элементы.ГруппаБыстрыеОтборы.Заголовок = НСтр("ru = 'Фильтры'");
	Элементы.ГруппаБыстрыеОтборы.Скрыть();
	
	Элементы.ГруппаПоиск.Видимость = Ложь;
	Элементы.ГруппаВсеДействия.Видимость = Ложь;
	Элементы.Переместить(Элементы.ВидПросмотраМеню, КоманднаяПанель);
	Элементы.Переместить(Элементы.ГруппаДокументы, КоманднаяПанель);
	Элементы.Переместить(Элементы.ГруппаНастройка, КоманднаяПанель);
	
	Элементы.МК_Папки.Видимость = Истина;
	Элементы.Переместить(Элементы.Папки, Элементы.МК_Папки);
	Элементы.Папки.ИспользованиеТекущейСтроки = ИспользованиеТекущейСтрокиТаблицы.ОтображениеВыделения;
	
	Элементы.МК_ГруппаКолонок.Видимость = Истина;
	Элементы.Переместить(Элементы.Файлы, Элементы.МК_Картинки);
	Элементы.Переместить(Элементы.Наименование, Элементы.МК_ЦентральнаяКолонка);
	Элементы.Переместить(Элементы.РегистрационныйНомерИДата, Элементы.МК_Картинки);
	Элементы.Переместить(Элементы.Подготовил, Элементы.МК_Картинки);
	
	Элементы.Группа1.Видимость = Ложь;
	Элементы.Папка.Видимость = Ложь;
	Элементы.ВидДокумента.Видимость = Ложь;
	Элементы.Контрагент.Видимость = Ложь;
	Элементы.Организация.Видимость = Ложь;
	Элементы.Утвердил.Видимость = Ложь;
	Элементы.Подразделение.Видимость = Ложь;
	Элементы.ДатаСортировки.Видимость = Ложь;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
