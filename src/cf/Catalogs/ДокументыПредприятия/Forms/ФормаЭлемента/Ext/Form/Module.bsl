
#Область ОписаниеПеременных

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;
&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

&НаКлиенте
Перем ПолноеИмяПеретаскиваемогоФайла;

&НаКлиенте
Перем МобильныйСканерЗанят;

&НаСервере
Перем ПереносКэшаИзЧтенияВСоздание;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ШаблоныДокументов.ВключитьКэшированиеРезультатовАвтоподстановок();
	
	КэшиНаВремяВызова.ПеренестиДокументыПредприятияФормаЭлемента(ПереносКэшаИзЧтенияВСоздание);
	
	ЭтоНовыйДокумент = Не ЗначениеЗаполнено(Объект.Ссылка);
	
	ЭтоМобильныйКлиент = ПараметрыСеанса.ЭтоМобильныйКлиент;
	
	// Кэшируемые значения
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ЭтоПолноправныйПользователь = ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ();
	ТаймлистИспользуется = ТаймлистПовтИсп.ТаймлистИспользуется();
	ДоступноРаспознаваниеТаймлист = ТаймлистПовтИсп.ДоступноРаспознаваниеПоЗапросу();
	
	// Протоколирование работы пользователей
	ПротоколированиеРаботыСотрудников.ЗаписатьОткрытие(Объект.Ссылка);
	
	Делопроизводство.ОбработатьРеквизит(ЭтотОбъект, "Подготовил");
	
	ИспользоватьРолиФайлов = ПолучитьФункциональнуюОпцию("ИспользоватьРолиФайлов");
	
	ПолеPDFРаботаетВВебКлиенте = РаботаСPDFПовтИсп.ПолеPDFРаботаетВВебКлиенте(); 
	МаксимальноеЧислоСтраницДляПредпросмотра = ОбзорФайловСервер.МаксимальноеЧислоСтраницДляПредпросмотра();
	
	Если Параметры.Свойство("ЭтоЛегкаяПочта") Тогда
		НужноВыполнитьСопоставлениеЭП = Истина;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.Основание) = Тип("Структура")
		И ТипЗнч(Параметры.Основание.Основание) <> Тип("Массив")Тогда
		Основание = Параметры.Основание.Основание;
		Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Основание) Тогда
			НужноВыполнитьСопоставлениеЭП = Истина;
		КонецЕсли;
	КонецЕсли;	
	
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСвязиОбъектов") Тогда
		Элементы.ГруппаСвязи.Видимость = Ложь;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПрочтенностьДокументов") Тогда
			Если РаботаСПрочтениями.УстановитьСвойствоПрочтен(Объект.Ссылка, Истина) Тогда	
				ОповеститьОПрочтении = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	РегламентированныйУчетОбращений = ПолучитьФункциональнуюОпцию("РегламентированныйУчетОбращений");
	ИспользоватьШК = ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды");
	ОграничиватьДоступностьПолейПоСостоянию = 
		ПолучитьФункциональнуюОпцию("ОграничиватьДоступностьПолейПоСостоянию") 
		И ПолучитьФункциональнуюОпцию("ИспользоватьСостоянияДокументов")
		И Не Пользователи.ЭтоПолноправныйПользователь();
	ВестиУчетСканКопийОригиналовДокументов = 
		ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов");
		
	// Категории данных
	ИспользоватьКатегорииДанных = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	ИспользоватьАвтоматическуюКатегоризациюДанных = 
		ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюКатегоризациюДанных");
	ИспользоватьПроверкуКатегорий = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	
	НачальнаяДатаРегистрации = Объект.ДатаРегистрации;
	НачальныйЧисловойНомер = Объект.ЧисловойНомер;
	
	ЭтоДелопроизводитель = РольДоступна("РегистрацияДокументовПредприятия") Или РольДоступна("ПолныеПрава");
	РольПолныеПрава = РольДоступна("ПолныеПрава");
	
	НастройкаИспользоватьОбзорДокументов = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "ИспользоватьОбзорДокументов");
	Если НастройкаИспользоватьОбзорДокументов = Неопределено Тогда 
		ИспользоватьОбзорДокументов = Истина;
	Иначе
		ИспользоватьОбзорДокументов = НастройкаИспользоватьОбзорДокументов;
	КонецЕсли;	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ИспользоватьОбзорДокументов = Ложь;
	КонецЕсли;	
	
	СписокВсехРасширенийСканКопийОригиналов = 
		ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами().СписокРасширенийСканКопийОригиналов;
	
	ИспользоватьПредпросмотрФайловОбщая = ПолучитьФункциональнуюОпцию("ИспользоватьПредпросмотрФайлов");
	ИспользоватьПредпросмотрФайловЛичная =
		ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "ИспользоватьПредпросмотрФайлов");
		
	Если ИспользоватьПредпросмотрФайловЛичная = Неопределено Тогда
		ИспользоватьПредпросмотрФайловЛичная = Истина;
	КонецЕсли;
	
	ИспользоватьПредпросмотрФайлов = 
		ИспользоватьОбзорДокументов И ИспользоватьПредпросмотрФайловОбщая И ИспользоватьПредпросмотрФайловЛичная;
		
	Элементы.ДеревоСвязейПредварительныйПросмотр.Видимость = 
		ИспользоватьПредпросмотрФайловОбщая И ИспользоватьПредпросмотрФайловЛичная;
		
	ИдентификаторКлиента = "";
	Если Параметры.Свойство("ИдентификаторКлиента") Тогда
		 
		ИдентификаторКлиента = Параметры.ИдентификаторКлиента;
		
		ПредпросмотрОфисныхФайлов = 
			ХранилищеОбщихНастроек.Загрузить(
			"НастройкиРаботыСДокументами/ПредпросмотрОфисныхФайлов", 
			ИдентификаторКлиента);	
		
		Если Не ЗначениеЗаполнено(ПредпросмотрОфисныхФайлов) Тогда
			ПредпросмотрОфисныхФайлов = Перечисления.ПредпросмотрОфисныхФайлов.ПустаяСсылка();
		КонецЕсли;			
		
	КонецЕсли;
	
	Если ТипЗнч(Параметры.Основание) = Тип("Структура")
		И ТипЗнч(Параметры.Основание.Основание) <> Тип("Массив")Тогда		
		Основание = Параметры.Основание.Основание;
	ИначеЕсли ТипЗнч(Параметры.Основание) <> Тип("Массив") Тогда
		Основание = Параметры.Основание;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.Подготовил) 
		И Параметры.Свойство("Подготовил") И ЗначениеЗаполнено(Параметры.Подготовил) Тогда
		Объект.Подготовил = Параметры.Подготовил;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Подготовил) И Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Подготовил = СотрудникиВызовСервера.ОсновнойСотрудникПользователя(ТекущийПользователь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) И
		ТипЗнч(Основание) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		ОснованиеВидДокументаРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ВидДокумента.Родитель");
	КонецЕсли;
	
	// Ввод нового
	Если Объект.Ссылка.Пустая() Тогда 
		СостояниеТекст = Строка(Перечисления.СостоянияДокументов.Проект);
		
		НеДействуетВСоответствии = Справочники.ДокументыПредприятия.ПустаяСсылка();
		НачальныйНеДействуетВСоответствии = НеДействуетВСоответствии;
		
		ПерепискаПоПредмету = Неопределено;
		НачальныйПерепискаПоПредмету = ПерепискаПоПредмету;
		
		Элементы.Обзор.Видимость = Ложь;
		Элементы.СтраницаФайлы.Видимость = Истина;
		
		УстановитьСрокИсполнения(Объект);
		
		ПредметПереписки = Неопределено;
		НачальныйПредметПереписки = ПредметПереписки;
		// При создании документа, показываем все действия
		ДействияПоказыватьВсе = Истина;
		Элементы.ДействияПоказатьВсе.Пометка = ДействияПоказыватьВсе;
		Делопроизводство.ЗаполнитьКэшВидаДокументаНаФорме(ЭтотОбъект, Объект.ВидДокумента);
	Иначе
		СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(
			Объект.Ссылка);
		ДокументПодписан = ДействияСервер.ДокументПодписан(Объект.Ссылка);	
		
		ПерепискаПоПредмету = Неопределено;
		НачальныйПерепискаПоПредмету = ПерепискаПоПредмету;
		
		ПрочитатьСвязи();
		
		Элементы.ФормаЗаполнитьПоШаблону.Видимость = Ложь;
		ЕстьЗашифрованныеИлиЗанятыеФайлы = РаботаСФайламиВызовСервера.ЕстьЗашифрованныеИлиЗанятыеФайлы(Объект.Ссылка);
		
		Если ИспользоватьОбзорДокументов Тогда 
			Элементы.Обзор.Видимость = Истина;
			Элементы.СтраницаФайлы.Видимость = Ложь;
		Иначе	
			Элементы.Обзор.Видимость = Ложь;
			Элементы.СтраницаФайлы.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Файлы
	
	ПоказыватьКолонкуРазмер = РаботаСФайламиВызовСервера.ПолучитьПоказыватьКолонкуРазмер();
	Если ПоказыватьКолонкуРазмер = Ложь Тогда
		Элементы.ТекущаяВерсияРазмер.Видимость = Ложь;
		Элементы.ТекущаяВерсияРазмерСоздание.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
		Параметры.ДокументОснование = Параметры.ЗначениеКопирования;
		ДокументОснованиеПодписан = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Параметры.ДокументОснование, "ПодписанЭП");
		
		// Копирование рабочей группы
		РаботаСРабочимиГруппами.ДокументПриКопировании(ЭтотОбъект);
		ПодчиненныеФайлы = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
			Параметры.ЗначениеКопирования, Ложь);
		
		Если ПодчиненныеФайлы.Количество() > 0 Тогда 
			Для Каждого ПодчиненныйФайл Из ПодчиненныеФайлы Цикл
				Если Делопроизводство.ФайлЯвляетсяОригиналом(ПодчиненныйФайл) Тогда 
					Продолжить;
				КонецЕсли;
				
				ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ПодчиненныйФайл);
				АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
				
				НоваяСтрока = ФайлыДобавленные.Добавить();
				
				МассивРоли = РегистрыСведений.РолиФайловДокументов.ПолучитьРолиФайла(ПодчиненныйФайл);
				Если МассивРоли.Количество() <> 0 Тогда
					НоваяСтрока.РольФайла = МассивРоли[0];
				КонецЕсли;	
				
				НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
				НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
				НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
				НоваяСтрока.ШаблонОснованиеДляСоздания = ПодчиненныйФайл.ШаблонОснованиеДляСоздания;
				НоваяСтрока.ДобавленИзШаблона = ЗначениеЗаполнено(НоваяСтрока.ШаблонОснованиеДляСоздания);
				
				Если ЗначениеЗаполнено(НоваяСтрока.ШаблонОснованиеДляСоздания) Тогда
					
					ОригинальноеИмя = РегистрыСведений.СведенияОФайлахДокументооборот.ПолучитьПризнак(
						ПодчиненныйФайл, "ОригинальноеИмя");
						
					Если ЗначениеЗаполнено(ОригинальноеИмя) Тогда
						НоваяСтрока.Наименование = ОригинальноеИмя;
					КонецЕсли;		
					
				КонецЕсли;	
				
				
			КонецЦикла;
			
			Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
			
			КоличествоФайловТаблицы = ФайлыДобавленные.Количество();
			КоличествоФайлов = КоличествоФайловТаблицы;
			Элементы.НаименованиеФайла.Заголовок = ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(КоличествоФайловТаблицы);
		КонецЕсли;
		
		// Копирование категорий данных
		Если ИспользоватьКатегорииДанных Тогда
			КатегорииИсточника = РаботаСКатегориямиДанных.ПолучитьКатегорииОбъекта(Параметры.ЗначениеКопирования);
			Для Каждого Категория Из КатегорииИсточника Цикл
				НоваяСтрока = СписокКатегорийДанных.Добавить();
				НоваяСтрока.Значение = Категория.Ссылка;
				НоваяСтрока.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(Категория.Ссылка);
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Параметры.Основание) Тогда // Ввод на основании
		
		Если ТипЗнч(Параметры.Основание) = Тип("Структура") Тогда
			ОснованиеДокумента = Параметры.Основание.Основание;
		Иначе
			ОснованиеДокумента = Параметры.Основание;
		КонецЕсли;
		
		Если ТипЗнч(ОснованиеДокумента) = Тип("Массив")
			И ОснованиеДокумента.Количество() > 0
			И ТипЗнч(ОснованиеДокумента[0]) = Тип("СправочникСсылка.Файлы") Тогда
			
			Для Каждого Файл Из ОснованиеДокумента Цикл  
				ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(Файл);
				АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
				
				НоваяСтрока = ФайлыДобавленные.Добавить();
				НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
				НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
				НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
				НоваяСтрока.ДобавленИзШаблона = Ложь;
				Если АвтозаполнениеШаблоновФайловВызовСервера.ФайлНаходитсяВИерархииПапокШаблонов(Файл) Тогда
					НоваяСтрока.ШаблонОснованиеДляСоздания = Файл;
					НоваяСтрока.ДобавленИзШаблона = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
			КоличествоФайловТаблицы = ФайлыДобавленные.Количество();
			КоличествоФайлов = КоличествоФайловТаблицы;
			
		ИначеЕсли ТипЗнч(ОснованиеДокумента) <> Тип("СправочникСсылка.ДокументыПредприятия")
			И ТипЗнч(ОснованиеДокумента) <> Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО") Тогда
			
			ПерепискаПоПредмету = ОснованиеДокумента;
			
			ПодчиненныеФайлы = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
				ОснованиеДокумента, Ложь);

			Если ПодчиненныеФайлы.Количество() > 0 Тогда 
				Для Каждого ПодчиненныйФайл Из ПодчиненныеФайлы Цикл

					ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ПодчиненныйФайл);
					АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
					
					НоваяСтрока = ФайлыДобавленные.Добавить();
					НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
					НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
					НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
					НоваяСтрока.Расширение = ДанныеФайла.Расширение;
					НоваяСтрока.Размер = ДанныеФайла.Размер;
					НоваяСтрока.ДобавленИзШаблона = Ложь;
				КонецЦикла;
				
				Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
				КоличествоФайловТаблицы = ПодчиненныеФайлы.Количество();
				КоличествоФайлов = КоличествоФайловТаблицы;
				Элементы.НаименованиеФайла.Заголовок = ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(
					КоличествоФайловТаблицы);
			КонецЕсли;
			
			Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ОснованиеДокумента) Тогда
				
				ПараметрыОповещения = Новый Структура;
				ПараметрыОповещения.Вставить("ИмяСобытия", "СозданДокументПредприятияНаОснованииПисьма");
				ПараметрыОповещения.Вставить("ПараметрСобытия", ОснованиеДокумента);
				Параметры.ПисьмоОснование = ОснованиеДокумента;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ОснованиеДокумента) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
			РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОснованиеДокумента,
				"ВидДокумента.ЯвляетсяВходящейКорреспонденцией, 
				|ВидДокумента.ЯвляетсяИсходящейКорреспонденцией");
			Если (ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией 
				Или ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией) Тогда	
				
				Если РеквизитыОснования.ВидДокументаЯвляетсяВходящейКорреспонденцией = Истина 
					Или РеквизитыОснования.ВидДокументаЯвляетсяИсходящейКорреспонденцией = Истина Тогда 
					
					ВОтветНа = ОснованиеДокумента;
					СписокВОтветНа.Добавить(ОснованиеДокумента);
					РеквизитыВОтветНа = РаботаСКорреспонденцией.РеквизитыОтправителяДокументовКорреспонденции(
						СписокВОтветНа).Выбрать();
					Пока РеквизитыВОтветНа.Следующий() Цикл
						ВОтветНаСтрока = РаботаСКорреспонденцией.ПредставлениеДокументаКорреспонденции(
							РеквизитыВОтветНа, НСтр("ru = '№ %1 от %2'"), 
							ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией);
					КонецЦикла;
					
					ПредметыПереписки = СвязиОбъектов.ПолучитьСвязанныеОбъекты(ОснованиеДокумента,
						Справочники.ТипыСвязей.ПредметПереписки);
					СписокПредметовПереписки.ЗагрузитьЗначения(ПредметыПереписки);
					Если ПредметыПереписки.Количество() Тогда
						ПредметПереписки = ПредметыПереписки[0];
					КонецЕсли;
					
				Иначе
					ПредметПереписки = ОснованиеДокумента;
					СписокПредметовПереписки.Добавить(ОснованиеДокумента);
				КонецЕсли;
			КонецЕсли;
			
			НесколькоПредметовПереписки = СписокПредметовПереписки.Количество() > 1;
			ПереноситьФайлы = Истина;
			Если (РеквизитыОснования.ВидДокументаЯвляетсяВходящейКорреспонденцией = Истина 
				И ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией)
				Или ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией
				Или (Не РеквизитыОснования.ВидДокументаЯвляетсяВходящейКорреспонденцией
					И Не РеквизитыОснования.ВидДокументаЯвляетсяИсходящейКорреспонденцией
					И Не ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией) Тогда 
				ПереноситьФайлы = Ложь;
			КонецЕсли;
			
			Если ПереноситьФайлы Тогда
				// Файлы тоже переносим
				ПодчиненныеФайлы = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
					ОснованиеДокумента, Ложь);
	
				Если ПодчиненныеФайлы.Количество() > 0 Тогда 
					Для Каждого ПодчиненныйФайл Из ПодчиненныеФайлы Цикл
	
						ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ПодчиненныйФайл);
						АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
						
						НоваяСтрока = ФайлыДобавленные.Добавить();
						НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
						НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
						НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
						НоваяСтрока.ДобавленИзШаблона = Ложь;
						
						МассивРоли = РегистрыСведений.РолиФайловДокументов.ПолучитьРолиФайла(ПодчиненныйФайл);
						Если МассивРоли.Количество() <> 0 Тогда  // это роли в старом документе
							
							НоваяСтрока.РольФайла = МассивРоли[0];
							
							Если ВидДокументаКэш.РолиФайлов.Количество() = 0 Тогда
								НоваяСтрока.РольФайла = Неопределено;
							Иначе
									
								ЕстьРольВНовомДокументе = Ложь;	
								Для Каждого ОписаниеРоли Из ВидДокументаКэш.РолиФайлов Цикл
									Если ОписаниеРоли.Роль = НоваяСтрока.РольФайла Тогда
										ЕстьРольВНовомДокументе = Истина;
										Прервать;
									КонецЕсли;	
								КонецЦикла;	

								Если Не ЕстьРольВНовомДокументе Тогда
									НоваяСтрока.РольФайла = ВидДокументаКэш.РолиФайлов[0].Роль;
								КонецЕсли;	
									
							КонецЕсли;	    
							
						Иначе	
							
							// это роли в новом документе
							Если ВидДокументаКэш.РолиФайлов.Количество() <> 0 Тогда
								НоваяСтрока.РольФайла = ВидДокументаКэш.РолиФайлов[0].Роль;
							КонецЕсли;	
							
						КонецЕсли;	
						
					КонецЦикла;
					
					Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
					КоличествоФайловТаблицы = ПодчиненныеФайлы.Количество();
					КоличествоФайлов = КоличествоФайловТаблицы;
					Элементы.НаименованиеФайла.Заголовок = ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(
						КоличествоФайловТаблицы);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("МассивФайлов") Тогда
		МассивФайлов = Параметры.МассивФайлов;
		Если МассивФайлов.Количество() <> 0 Тогда
			Для Каждого ФайлПринятый Из МассивФайлов Цикл
				Файл = Новый Файл(ФайлПринятый);
				НоваяСтрока = ФайлыДобавленные.Добавить();
				НоваяСтрока.Наименование = Файл.ИмяБезРасширения;
				НоваяСтрока.ПолныйПуть = ФайлПринятый;
				НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(Файл.Расширение);
				НоваяСтрока.ДобавленИзШаблона = Ложь;
			КонецЦикла;
			
			Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
			
			КоличествоФайловТаблицы = МассивФайлов.Количество();
			КоличествоФайлов = КоличествоФайловТаблицы;
			Элементы.НаименованиеФайла.Заголовок = ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(
				КоличествоФайловТаблицы);
			
			Если МассивФайлов.Количество() = 1 Тогда
				Файл = Новый Файл(МассивФайлов[0]);
				Объект.Заголовок = Файл.ИмяБезРасширения;
			КонецЕсли;
			
		КонецЕсли;

	ИначеЕсли Параметры.Свойство("Вложения") Тогда
		Вложения = Параметры.Вложения;
		Если Вложения.Количество() <> 0 Тогда
			Для Каждого ФайлПринятый Из Вложения Цикл
				
				НоваяСтрока = ФайлыДобавленные.Добавить();
				НоваяСтрока.Наименование = ФайлПринятый.Имя;
				НоваяСтрока.Расширение = ФайлПринятый.Расширение;
				НоваяСтрока.Адрес = ФайлПринятый.Адрес;
				НоваяСтрока.Размер = ФайлПринятый.Размер;
				НоваяСтрока.ИндексКартинки = ФайлПринятый.ИндексКартинки;
				НоваяСтрока.ДобавленИзШаблона = Ложь;
				
			КонецЦикла;
			
			Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
			
			КоличествоФайловТаблицы = Вложения.Количество();
			КоличествоФайлов = КоличествоФайловТаблицы;
			Элементы.НаименованиеФайла.Заголовок = ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(
				КоличествоФайловТаблицы);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.Свойство("Идентификатор") Тогда
		ИдентификаторПисьма = Параметры.Идентификатор;
		ЗагруженИзПочты = Истина;
	КонецЕсли;	
	Если Параметры.Свойство("Тема") Тогда
		Объект.Заголовок = Параметры.Тема;
	КонецЕсли;	
	
	КомуПереданДокумент = Делопроизводство.СтрокаКомуПереданДокумент(Объект.Ссылка);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаСвойства");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	ОбновитьПолныйПуть();
	
	Если Не ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
		Элементы.ФайлыПодписанЗашифрован.Видимость = Ложь;
	Иначе
		ЗаполнитьСписокПодписей(Истина); // Истина - ИзПриСозданииНаСервере
	КонецЕсли;
		
	// Статьи ДДС.
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ДокументыПредприятия")
		И ЗначениеЗаполнено(Основание) Тогда
		ПрочитатьСтатьиДДС(Основание);
	Иначе
		ПрочитатьСтатьиДДС(Параметры.ДокументОснование);
	КонецЕсли;
	
	// Срок действия
	СрокДействияПриСозданииНаСервере();
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда 
		Если ВидДокументаКэш.УчитыватьНедействующиеДокументы
			И ВидДокументаКэш.ЯвляетсяДоговором Тогда
			Элементы.НеДействует.Заголовок = НСтр("ru = 'Расторгнут'");
		КонецЕсли;
		Элементы.Проект.АвтоОтметкаНезаполненного = ВидДокументаКэш.ОбязательноУказаниеПроекта;
	КонецЕсли;
	
	Если Объект.НеДействует Тогда
		
		Элементы.ДатаОкончанияДействия.Видимость = Истина;
		Элементы.НеДействуетВСоответствии.Доступность = Истина;
		Элементы.НеДействуетВСоответствииСтрока.Доступность = Истина;
		Элементы.НеДействуетВСоответствииСтрока.Видимость = ЗначениеЗаполнено(НеДействуетВСоответствии);
		
	ИначеЕсли Не Объект.НеДействует И ЗначениеЗаполнено(НеДействуетВСоответствии) Тогда
			
		// пока текущ документ еще действует, но уже есть новый документ	
		
		РеквизитыСвязанного 
			= ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
				НеДействуетВСоответствии, "ПометкаУдаления, Наименование");
		ПометкаУдаленияСвязанного = РеквизитыСвязанного.ПометкаУдаления;
		
		Элементы.ДатаОкончанияДействия.Видимость = Ложь;
			
		Если ПометкаУдаленияСвязанного = Ложь Тогда
		
			Элементы.НеДействуетВСоответствии.Доступность = Истина;
			Элементы.НеДействуетВСоответствии.ТолькоПросмотр = Истина;
			Элементы.НеДействуетВСоответствииСтрока.Доступность = Истина;
			Элементы.НеДействуетВСоответствииСтрока.ТолькоПросмотр = Истина;
			
			Элементы.ДекорацияГотовитсяКОтмене.Видимость = Истина;
			Элементы.НеДействует.Видимость = Ложь;
			НеДействуетВСоответствииСтрока = РеквизитыСвязанного.Наименование;
		Иначе
			
			НеДействуетВСоответствии = Неопределено; // помеченный на удаление - очистим
			НеДействуетВСоответствииСтрока = "";
			
		КонецЕсли;	
		
	Иначе	
		
		Элементы.ДатаОкончанияДействия.Видимость = Ложь;
		Элементы.НеДействует.Видимость = ВидДокументаКэш.УчитыватьНедействующиеДокументы; //Ложь;
		Элементы.ДекорацияГотовитсяКОтмене.Видимость = Ложь;
		Элементы.НеДействуетВСоответствииСтрока.Видимость = Ложь;
		
	КонецЕсли;
	
	// Чтение категорий данных	
	Если ИспользоватьКатегорииДанных Тогда
		ПредопределенныеВсеКатегории = Справочники.КатегорииДанных.ВсеКатегории;
		СписокКатегорийДанныхЗначение = РеквизитФормыВЗначение("СписокКатегорийДанных");
		РаботаСКатегориямиДанных.ЗагрузитьДанныеОКатегориях(Элементы, Объект, СписокКатегорийДанныхЗначение, ИспользоватьАвтоматическуюКатегоризациюДанных, Параметры); 
		ЗначениеВРеквизитФормы(СписокКатегорийДанныхЗначение, "СписокКатегорийДанных"); 
		Если РольДоступна(Метаданные.Роли.ПроверкаКатегорий) Тогда
			Если ИспользоватьАвтоматическуюКатегоризациюДанных Тогда
				АвтоматическаяКатегоризацияВыполнена = РаботаСКатегориямиДанных.ПолучитьФлагВыполненияАвтоматическойКатегоризации(Объект.Ссылка);
				Если АвтоматическаяКатегоризацияВыполнена Тогда
					Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтоКатегоризацияВыполнена;
				Иначе
					Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтоКатегоризацияНеВыполнена;
				КонецЕсли;
			Иначе
				Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
			КонецЕсли;
			Если ИспользоватьПроверкуКатегорий Тогда
				КатегорииПроверены = РаботаСКатегориямиДанных.ПолучитьФлагПроверкиКатегорийОбъекта(Объект.Ссылка);
				Если КатегорииПроверены Тогда
					Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииПроверены;
				Иначе
					Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииНеПроверены;
				КонецЕсли;
			Иначе
				Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
			Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.Категории.Видимость = Ложь;
	КонецЕсли;
	
	ПараметрШаблонДокумента = Параметры.ШаблонДокумента;
	Если Не ЗначениеЗаполнено(ПараметрШаблонДокумента) Тогда
		ПараметрШаблонДокумента = Объект.Шаблон;
	КонецЕсли;
	
	Если Параметры.Свойство("ТематикаДокумента")
		И ЗначениеЗаполнено(Параметры.ТематикаДокумента)
		И Не ЗначениеЗаполнено(Объект.Тематика) Тогда 
		Объект.Тематика = Параметры.ТематикаДокумента;
	КонецЕсли;
	
	ВидИТематикаТекст = СокрЛП(Объект.ВидДокумента);
	Если ВидДокументаКэш.ВестиУчетПоТематикам Тогда 
		Элементы.ВидИТематикаТекст.Подсказка = НСтр("ru = 'Вид и тематика документа'");
		
		Если ЗначениеЗаполнено(Объект.Тематика) Тогда 
			ВидИТематикаТекст = СтрШаблон("%1 - %2",
				СокрЛП(Объект.ВидДокумента), СокрЛП(Объект.Тематика));
		КонецЕсли;
	Иначе 
		Элементы.ВидИТематикаТекст.Подсказка = НСтр("ru = 'Вид документа'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрШаблонДокумента) И Не РольДоступна("ПолныеПрава") Тогда 
		
		РеквизитыШаблона = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
			ПараметрШаблонДокумента,
			"ЗапретитьРедактироватьФайлы, ЗапретитьУдалятьФайлы, ЗапретитьИзменятьРеквизитыИзШаблона,
			|Контрагенты, Стороны");
		
		ЗапретитьРедактироватьФайлы = РеквизитыШаблона.ЗапретитьРедактироватьФайлы;
		ЗапретитьУдалятьФайлы = РеквизитыШаблона.ЗапретитьУдалятьФайлы;
		ЗапретитьИзменятьРеквизитыИзШаблона = РеквизитыШаблона.ЗапретитьИзменятьРеквизитыИзШаблона;
		
		Для Каждого КонтрагентШаблона Из РеквизитыШаблона.Контрагенты.Выгрузить() Цикл
			СтрокаКонтрагентыШаблона = КонтрагентыШаблона.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКонтрагентыШаблона, КонтрагентШаблона);
			СтрокаКонтрагентыШаблона.СпособОтправки = КонтрагентШаблона.Способ;
		КонецЦикла;
		
		Для Каждого СторонаШаблона Из РеквизитыШаблона.Стороны.Выгрузить() Цикл
			СтрокаСтороныШаблона = СтороныШаблона.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСтороныШаблона, СторонаШаблона);
			СтрокаСтороныШаблона.Подписал = СторонаШаблона.Подписант;
		КонецЦикла;
		
		Если ЗапретитьУдалятьФайлы Тогда
			Элементы.ФайлыДобавленныеУдалить.Доступность = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ВестиУчетПоКонтрагентам = Ложь;
	ВестиУчетПоОрганизациям = Ложь;
	
	ВариантПодписания = Перечисления.ВариантыПодписания.НеПодписывается;
	
	Если Параметры.ШаблонДокумента <> Неопределено Тогда
		
		ИзменениеВидаДокументаОбработано = Ложь;
		
		Если Не Параметры.ЗаполнятьРеквизитыДоСоздания Тогда
			
			ДокументОбъект = РеквизитФормыВЗначение("Объект");
			ШаблоныДокументов.ЗаполнитьРеквизитыДокументаПоШаблону(Параметры.ШаблонДокумента, ДокументОбъект);
			ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
			
			ПриИзмененииВидаДокумента(Истина);
			ИзменениеВидаДокументаОбработано = Истина;
			
			Если ВидДокументаКэш.ВестиУчетСторон
				И Параметры.ЗначенияЗаполнения.Свойство("Контрагент") Тогда
					ДобавитьСторону(Параметры.ЗначенияЗаполнения.Контрагент,,1);
			КонецЕсли;
			
			УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
			
		КонецЕсли;
		
		// файлы - после заполнения документа по шаблону (чтобы имя документа уже было)
		ШаблоныДокументов.ЗаполнитьФайлыДокументаПоШаблону(
			Параметры.ШаблонДокумента, ФайлыДобавленные, Ложь, Объект);
		КоличествоФайлов = ФайлыДобавленные.Количество();
		Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
		Элементы.НаименованиеФайла.Заголовок = 
			ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(КоличествоФайлов);
		
		Если СтатьиДвиженияДенежныхСредств.Количество() = 0 Тогда
			ШаблоныДокументов.ЗаполнитьСтатьиДДСДокументаПоШаблону(Параметры.ШаблонДокумента,
				СтатьиДвиженияДенежныхСредств, Объект.Сумма, Объект.СуммаНДС);
		КонецЕсли;
		
		Если Не ИзменениеВидаДокументаОбработано Тогда
			ПриИзмененииВидаДокумента(Истина);
		КонецЕсли;
		
		Элементы.РедактироватьДобавленныйФайл.Видимость = Истина;
		Элементы.РедактироватьДобавленныйФайлКонтекст.Видимость = Истина;
		
		// Рабочие группы
		Объект.Шаблон = Параметры.ШаблонДокумента;
		
		// Регламентированный учет обращений
		Если Параметры.Свойство("ТаблицаВопросы") Тогда
			РаботаСОбращениямиВызовСервера.ЗаполнитьВопросыДокумента(ЭтотОбъект, Параметры.ТаблицаВопросы);
		КонецЕсли;
		// Конец Регламентированный учет обращений
	Иначе
		
		//Копирование дополнительных реквизитов основания 
		Если ЗначениеЗаполнено(Основание) 
			И ТипЗнч(Основание) = Тип("СправочникСсылка.ДокументыПредприятия")
			И ЭтаФорма.Свойства_ИспользоватьСвойства Тогда
			
			Для Каждого Реквизит Из Основание.ДополнительныеРеквизиты Цикл
				СтруктураПоиска = Новый Структура("Свойство", Реквизит.Свойство);
				МассивСтрок = ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураПоиска);
				Если МассивСтрок.Количество() > 0 Тогда
					НоваяСтрока = МассивСтрок[0];
					ЭтаФорма[НоваяСтрока.ИмяРеквизитаЗначение] = Реквизит.Значение;
				КонецЕсли;
			КонецЦикла;
			ОбновитьЭлементыДополнительныхРеквизитов();
		КонецЕсли;
		
		Делопроизводство.ЗаполнитьСписокВыбораФормыДокумента(ЭтотОбъект);
		ФормаДокументаПриОткрытии = Объект.ФормаДокумента;
	КонецЕсли;
	
	Если ТипЗнч(ОснованиеДокумента) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО") Тогда
		
		ЗаполнитьРеквизитыПриОтраженииВходящегоЭДО();
		
	КонецЕсли;
	
	Если Параметры.Свойство("Текст") Тогда
		Объект.Содержание = Объект.Содержание + Символы.ПС + Параметры.Текст;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда 
		ВестиУчетПоКонтрагентам = ВидДокументаКэш.ВестиУчетПоКонтрагентам;
		ВестиУчетПоОрганизациям = ВидДокументаКэш.ВестиУчетПоОрганизациям;
		ВариантПодписания = ВидДокументаКэш.ВариантПодписания; 
		ЯвляетсяЗаявкойНаОплату = ВидДокументаКэш.ЯвляетсяЗаявкойНаОплату;
	КонецЕсли;
	
	УстановитьВидимостьКомандыСозданияИсходящегоДокументаЭДО();
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Шаблоны автозапуска
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТолькоЧтоСозданныйДокумент = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("ТолькоЧтоСозданныйДокумент") Тогда
		ТолькоЧтоСозданныйДокумент = Параметры.ТолькоЧтоСозданныйДокумент;
	КонецЕсли;	
	
	// Комплекты документов
	РаботаСКомплектамиДокументовСервер.ДокументПриСозданииНаСервере(ЭтотОбъект);
	ТипСвязиСодержит = Справочники.ТипыСвязей.Содержит;
	
	// Параметры оповещения
	Если Параметры.Свойство("ПараметрыОповещения") Тогда
		ПараметрыОповещения = Параметры.ПараметрыОповещения;
	КонецЕсли;
	
	// Реквизиты по виду документа
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ВидДокумента", Объект.ВидДокумента));
	
	Если ЗначениеЗаполнено(Объект.Шаблон) Тогда 
		УстановитьПривилегированныйРежим(Истина);
		РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Шаблон,
			"ЗаполнениеНаименованияПоШаблону, Заголовок");
		Если РеквизитыШаблона.ЗаполнениеНаименованияПоШаблону Тогда 
			НаименованиеСозданоПоШаблону = Истина;
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	УчитыватьНДС = Делопроизводство.УчитыватьНДС(Объект.Организация);
	Элементы.ГруппаСуммаНДС.Видимость = УчитыватьНДС;
	Элементы.ТоварыСтавкаНДС.Видимость = УчитыватьНДС;
	Элементы.ТоварыСуммаНДС.Видимость = УчитыватьНДС;
	
	ТекущийИтогСумма = Объект.Товары.Итог("Сумма");
	ТекущийИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС");
	
	// Запоминаем начальные значения реквизитов
	ЗапомнитьЗначенияРеквизитов();
	
	УстановитьДоступностьПолей();
	
	// Доступность элементов
	УстановитьДоступностьРеквизитовРегистрации(Объект);
	
	// Инструкции
	ПоказыватьИнструкции = Ложь; // тут значение по умолчанию, если нет настроек формы ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции");
	ПолучитьИнструкции();
	
	// Заполнение текстовых реквизитов
	Если ЗначениеЗаполнено(Объект.Дело) Тогда
		РеквизитыДела = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Дело, "НоменклатураДел.Индекс, МестоХраненияДел"); 
		ДелоТекст = СокрЛП(Объект.Дело);
		МестоХранения = РеквизитыДела.МестоХраненияДел;
	КонецЕсли;	
	
	СформироватьПредставлениеСтатейДДС();
	
	// Заявка на оплату.
	Если ЯвляетсяЗаявкойНаОплату Тогда
		Получатель = Справочники.Контрагенты.ПустаяСсылка();
		Для Каждого Сторона Из Объект.Стороны Цикл
			Если Сторона.Наименование = ПредопределенноеЗначение("Справочник.НаименованияСторон.Получатель") Тогда
				Получатель = Сторона.Сторона;
			КонецЕсли;
		КонецЦикла;
		Элементы.ГруппаПолучатель.Видимость = Истина;
		Элементы.Организация.Заголовок = НСтр("ru = 'Плательщик'");
		Элементы.ГруппаОрганизация.ОтображатьЗаголовок = Ложь;
		Элементы.ГруппаАвансовыйОтчет.Видимость =
			ТипЗнч(Получатель) = Тип("СправочникСсылка.Пользователи")
			Или ТипЗнч(Получатель) = Тип("СправочникСсылка.Сотрудники");
	Иначе
		Элементы.ГруппаПолучатель.Видимость = Ложь;
		Элементы.Организация.Заголовок = РедакцииКонфигурацииКлиентСервер.Организация();
		Элементы.ГруппаОрганизация.ОтображатьЗаголовок = Истина;
	КонецЕсли;
	
	// Учет трудозатрат
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияИспользоватьУчетВремени,
		Объект.Ссылка,
		ВидыРабот,
		СпособУказанияВремени,
		Команды.ПереключитьХронометраж,
		Элементы.ПереключитьХронометраж,
		Элементы.УказатьТрудозатраты);
		
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	
	НесколькоКонтрагентов = (Объект.Контрагенты.Количество() > 1);
	УстановитьВидимостьКонтрагентов();
	
	ЗаполнитьСвязи();
	
	Если Объект.Ссылка.Пустая() Тогда 
		Делопроизводство.АктивизироватьЭлементПоУмолчанию(ЭтотОбъект);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	УстановитьВидимостьКомандыПечатиКонверта();
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Параметры.Свойство("ОткрытьЗакладкуФайлы") Тогда
		Если Элементы.Обзор.Видимость Тогда 
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор;
		Иначе
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаФайлы;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ОткрытьЗакладкуЭП") Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЭП;
	КонецЕсли;
	
	Если Параметры.Свойство("ОткрытьЗакладкуОбработка") Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОбработка;
	КонецЕсли;
	
	Если Параметры.Свойство("ОткрытьЗакладкуКатегории") Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Категории;
	КонецЕсли;
	
	Если Параметры.Свойство("ОткрытьЗакладкуТовары") Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаТовары;
	КонецЕсли;
	
	ПользовательЯвляетсяЗаместителемИлиПомощником = ДействияСерверПовтИсп.ПользовательЯвляетсяЗаместителемИлиПомощником();
	
	ВключитьАвтоОтметкуИЗаполнитьПолеОтветственный();
	ОбновитьПараметрыВидаОбъекта();
	ДействияСобытия.ПриСозданииФормыПредметаНаСервере(ЭтотОбъект, Параметры, ПараметрыВидаОбъекта);
	ОбновитьОбластьЗадач();

	ИспользоватьУтверждение = ЕстьДействияУтверждения;
	ИспользоватьПодписание = ЕстьДействияПодписания;
	
	Элементы.СтороныПодписан.ТолькоПросмотр = ЕстьДействияПодписания
		И Не Пользователи.ЭтоПолноправныйПользователь();
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		Делопроизводство.ПрочитатьОбязательныеТипыСвязей(ЭтотОбъект, ОбязательныеТипыСвязей, Объект.Ссылка, Объект.ВидДокумента);
		
		Если ТипЗнч(Основание) = Тип("СправочникСсылка.ДокументыПредприятия") И Не ТипСвязиВыбран Тогда
			МассивТиповСвязей = ПолучитьТипыСвязей(Основание, Объект.ВидДокумента);	
		КонецЕсли;
	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Делопроизводство.ПрочитатьОбязательныеСвязи(Объект.Ссылка, 
			ОбязательныеТипыСвязей, ОбязательныеСвязи);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ПараметрШаблонДокумента) Тогда
		УстановитьДоступностьКомандФайлыДобавленные();
	КонецЕсли;	
	
	Делопроизводство.ОбновитьСведенияОПолученииОригинала(ЭтотОбъект);
	Элементы.ГруппаДобавитьФайл.Видимость = Не Элементы.Обзор.Видимость;
	КлючЗаписи = Делопроизводство.ПолучитьКлючЗаписиРегистраДанныеДокументов(Объект);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
    // Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	Если ЗначениеЗаполнено(Объект.Создал) И ЗначениеЗаполнено(Объект.ДатаСоздания) Тогда 
		СоздалТекст = СокрЛП(Объект.ДатаСоздания) + ", " + СокрЛП(Объект.Создал);
	Иначе 
		СоздалТекст = СокрЛП(Объект.ДатаСоздания);
	КонецЕсли;
	
	Если ВидДокументаКэш.ВестиУчетТоваровИУслуг Тогда
		ВестиУчетТоваровИУслуг = Истина;
		Элементы.СтраницаТовары.Видимость = Истина;
	Иначе 
		Элементы.СтраницаТовары.Видимость = Ложь;
		ВестиУчетТоваровИУслуг = Ложь;
	КонецЕсли;
	
	// Работа со подписями
	РаботаСПодписямиДокументов.ЗаполнитьТаблицуСторон(ЭтотОбъект);
	Если ВидДокументаКэш.ВестиУчетСторон Тогда
		КонтрагентПустаяСсылка = Справочники.Контрагенты.ПустаяСсылка();
		КонтактноеЛицоПустаяСсылка = Справочники.КонтактныеЛица.ПустаяСсылка();
		Для Каждого СтрокаСтороны Из Объект.Стороны Цикл
			Если СтрокаСтороны.НомерСтроки = 1 Тогда
				ДокументПодписанНами = СтрокаСтороны.Подписан;
			КонецЕсли; 
		КонецЦикла;
		
		УстановитьУсловноеОформление();
	КонецЕсли;	
	
	Элементы.ПодписьТекст.Видимость = ИспользоватьПодписание 
		И Не ВидДокументаКэш.ВестиУчетСторон И Не ЯвляетсяКомплектом;
	Элементы.ГруппаСтороны.Видимость = ВидДокументаКэш.ВестиУчетСторон 
		И Не ЯвляетсяЗаявкойНаОплату;
	Элементы.СтороныПодписан.Видимость = ВидДокументаКэш.ВестиУчетСторон
		И Не ЯвляетсяЗаявкойНаОплату
		И ВариантПодписания <> Перечисления.ВариантыПодписания.НеПодписывается;
	Элементы.СтороныДатаПодписи.Видимость = ВидДокументаКэш.ВестиУчетСторон
		И Не ЯвляетсяЗаявкойНаОплату
		И ВариантПодписания <> Перечисления.ВариантыПодписания.НеПодписывается;
		
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ПриСозданииНаСервере.
	ИспользоватьСервисСПАРКРиски = СПАРКРиски.ИспользованиеРазрешено();
	ПараметрыПроцедуры = Новый Структура("ВариантОтображения", "Однострочный");
	СПАРКРиски.ПриСозданииНаСервере(
		ЭтотОбъект,
		Неопределено,
		Объект.Контрагент,
		ОбщегоНазначенияДокументооборотКлиентСервер.ВидКонтрагентаСПАРК(Объект.Контрагент),
		ПараметрыПроцедуры);
	
	Если Не ИспользоватьСервисСПАРКРиски Тогда
		Элементы.КонтрагентыСводныйИндикатор.Видимость = Ложь;
		Элементы.СтороныСводныйИндикатор.Видимость = Ложь;
		Элементы.ГруппаИндексыСПАРКРиски.Видимость = Ложь;
		Элементы.ГруппаИндексыСПАРКРиски2.Видимость = Ложь;
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ПриСозданииНаСервере.
	
	АвтовизуализацияЭП = ПолучитьФункциональнуюОпцию("АвтовизуализацияЭП");
	
	Делопроизводство.ОбновитьВидимостьРеквизитовХранения(ЭтотОбъект, ВидДокументаКэш);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		РаботаСКорреспонденцией.ПриСозданииФормыНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
		ЗаполнитьДанныеКорреспонденцииНаФормеДокумента = Истина;
	КонецЕсли;
	
	ПриложениеЯвляетсяВебКлиентом = ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом();
	Если ПриложениеЯвляетсяВебКлиентом Или Не ОбщегоНазначения.ЭтоWindowsКлиент() Тогда
		Элементы.ВставитьКартинкуИзБуфера.Видимость = Ложь;
		Элементы.ВставитьКартинкуИзБуфераСоздание.Видимость = Ложь;
		Элементы.ФайлыДобавленныеВставитьКартинкуИзБуфера.Видимость = Ложь;
		Элементы.ПроверитьОрфографию.Видимость = Ложь;
		Элементы.ПроверитьОрфографию.Доступность = Ложь;
		Элементы.СодержаниеПроверитьОрфографию.Видимость = Ложь;
		Элементы.СодержаниеПроверитьОрфографию.Доступность = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьИТекстНадписиРабочихДней();
	
	Нумерация.УстановитьВидимостьВременногоНомера(ЭтотОбъект);
	
	Элементы.ДекорацияЗапретРасширенияДоступа.Видимость = Объект.ЗапретитьАвтоматическоеРасширениеДоступа;
	
	ПоддерживаетсяМобильныйСканер = РегистрыСведений.КэшМобильныхСканов.ПоддерживаетсяМобильныйСканер();
		
	ИспользоватьУчетПоОрганизациям = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям");
	
	РаботаСРекомендованнымиНастройками.УстановитьРекомендованныеНастройки(ИмяФормы, КлючНазначенияИспользования);
	
	Справочники.ПравилаКоммуникаций.НастроитьПоляПредмета(ЭтаФорма, Элементы.Адресат);
	
	ЕстьРольРедактированиеВизуализацииЭП 
		= ЭтоПолноправныйПользователь Или РольДоступна("РедактированиеВизуализацииЭП");
		
	ПоказатьДелаетНедействующими();
	
	ОбновитьЗадачиПоПриложению();
	
	НастроитьФормуПоСостояниюДела();
	
	ЗаполнитьПоляУтвердилПодписалНаСервере();
	НастройкиФормы = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(
		ИмяФормы + "/" + КлючНазначенияИспользования + "/ТекущиеДанные", "");
	
	Если НастройкиФормы = Неопределено Тогда
		ПриЗагрузкеДанныхИзНастроекНаСервере(НастройкиФормы);
	КонецЕсли;
	
	// картинки состояний
	ОбзорДокумента.ВывестиСтрокуСостояний(ЭтотОбъект);
	
	ОтобразитьВажность(ЭтотОбъект);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды") Тогда
		Команды.ВставитьРегистрационныйШтампИШтрихкод.Заголовок 
			= НСтр("ru = 'Вставить регистрационный штамп (в файл pdf)'");
	КонецЕсли;	
	
	Если ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией Тогда
		Элементы.КонтрагентыКонтрагентГруппа.Заголовок = НСтр("ru = 'Получатель'");
	КонецЕсли;
	
	СрокИсполненияПриОткрытии = Объект.СрокИсполнения;
	
	СозданиеФормыЗавершено = Истина;
	
	ЗаполнитьЗакладкуМЭДОВФормеСервер();
	
	ШаблоныДокументов.ОтключитьКэшированиеРезультатовАвтоподстановок();
	
	Элементы.Сканировать.Видимость = ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией;
	
	ПоказыватьPdfСредствами1С = РаботаСФайламиСлужебныйПовтИсп.ПоказыватьPdfСредствами1С();
	
	ЭтоВебКлиент = ОбщегоНазначения.ЭтоВебКлиент();
	ЭтоТонкийКлиент = ОбщегоНазначенияДокументооборот.ЭтоТонкийКлиент();
	
	// Pdf
	Если ЭтоТонкийКлиент Или (ЭтоВебКлиент И ПолеPDFРаботаетВВебКлиенте) Тогда
		Если ПоказыватьPdfСредствами1С Тогда
			ВывестиPDFДокументНаСервере();
		КонецЕсли;
	КонецЕсли;
	//Конец Pdf
	
	УстановитьВидимостьГруппыЭДОВПодменюСервис();
	
	// Сервис "1С:Share"
	ИспользоватьСервис1CShare = ИнтеграцияShareДокументооборот.ИспользоватьСервис1СShare();

	УстановитьВидимостьКомандСервиса1СShare();
	
	УстановитьВидимостьВыполненияВнеПрограммы();  
	
	СоздатьКнопкиПорционногоПредпросмотра();
	
	ВсегоПорцийПредпросмотра = 1;
	НомерПорции = 1;
	ОбновитьКнопкиДинамическогоСписка();
	
	НастройкиРегНомера = ШтрихкодированиеСервер.ПерсональныеНастройкиПоложенияРегНомера();
	ПоказыватьПриВставкеРегНомера = НастройкиРегНомера.ПоказыватьПриВставке;
	
	Если ЭтоМобильныйКлиент Тогда
		МК_НастроитьЭлементыФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьКомандСпискаПодписей(Элементы.ЭлектронныеПодписи.ТекущиеДанные);
	УстановитьДоступностьСканирования();
	
	Если ОповеститьОПрочтении Тогда
		Оповестить("ПрочтениеОбновитьСписок", Объект.Ссылка);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиентПодMacOS() Тогда
		Элементы.ФормаПодписать.Видимость = Ложь;
		Элементы.ФормаЭПИШифрование.Видимость = Ложь;
		Элементы.КонтекстноеМенюФайлыГруппаЭПИШифрование.Видимость = Ложь;
		Элементы.ЭлектронныеПодписи.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		
		Элементы.ТаблицаПодписейКонтекстноеМенюПроверить.Видимость = Ложь;
		Элементы.ТаблицаПодписейКонтекстноеМенюПроверитьВсе.Видимость = Ложь;
		Элементы.ТаблицаПодписейКонтекстноеМенюОткрытьПодпись.Видимость = Ложь;
		Элементы.ТаблицаПодписейКонтекстноеМенюУдалить.Видимость = Ложь;
		Элементы.ТаблицаПодписейКонтекстноеМенюСохранить.Видимость = Ложь;
	КонецЕсли;
	
	СоставСтрока = ДелопроизводствоКлиентСервер.ПолучитьСтрокуСоставДокумента(Объект);
	НачальныйСостав = СоставСтрока;
	
	Оповестить("ОбновитьСписокПоследних");
	
	Если Не Параметры.ДокументОснование.Пустая() И ДокументОснованиеПодписан Тогда
		ПодключитьОбработчикОжидания("ВопросКопированияЭП", 0.2, Истина);
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	ОбновитьОтображениеСуммы();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ПриОткрытии.
	СПАРКРискиКлиент.ПриОткрытии(ЭтотОбъект, Неопределено);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ПриОткрытии.
	
	ДействияКлиент.РазвернутьДействия(Элементы.Действия, Действия);
	
	РаскрытьДеревоФайлов();
	
	РаботаСКорреспонденциейКлиентСервер.УстановитьВидимостьЭлементовВОтветНаИПредметПереписки(ЭтотОбъект);

	УстановитьВидимостьПредварительногоПросмотраВСвязях();
	
	Если Не ЭтоМобильныйКлиент Тогда
		
		МобильныйСканерЗанят = Ложь;
		Элементы.ДобавитьСканСМобильного.Видимость = ПоддерживаетсяМобильныйСканер;
		Элементы.ДобавитьСканСМобильногоСоздание.Видимость = ПоддерживаетсяМобильныйСканер;
		Элементы.ФайлыДобавленныеДобавитьСканСМобильного.Видимость = ПоддерживаетсяМобильныйСканер;
		
		Если ПоддерживаетсяМобильныйСканер И ТолькоЧтоСозданныйДокумент Тогда
			ПодключитьОбработчикОжидания("ДобавитьСканСМобильногоАвтоматически", 3, Ложь);
		КонецЕсли;
		
	Иначе
		МК_ПоказатьСкрытьДеревоОбзораПродолжение();
	КонецЕсли;
	
	Если НужноВыполнитьСопоставлениеЭП Тогда
		УстановитьСоответствиеФайловИЭП();      
		НужноВыполнитьСопоставлениеЭП = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("Действие")
		И ЗначениеЗаполнено(Параметры.Действие) Тогда
		ПодключитьОбработчикОжидания("ОткрытьДействиеОтложено", 0.5, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросКопированияЭП()
	
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Документ ""%1"" и присоединенные к нему файлы подписаны.
		| Копирование сведений об ЭП в новый документ сделает его недоступным для изменения.
		| Скопировать в новый документ сведения об ЭП?'"),
		Строка(Параметры.ДокументОснование));
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВопросКопированияЭППродолжение",
		ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, Текст, РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры

&НаКлиенте
Процедура ВопросКопированияЭППродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		КопироватьПодписиЭП = Истина;
		УстановитьДоступностьПолей();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	// Перенос срока связанного документа
	Если ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
		И ИсточникВыбора.Заголовок = НСтр("ru = 'Выбор связанного документа'") Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Документ", ВыбранноеЗначение);
		ПараметрыОткрытия.Вставить("ЗаполнитьРеквизиты", Истина);
		ПараметрыОткрытия.Вставить("ДокументИсточникИзменения", Объект.Ссылка);
		ПараметрыОткрытия.Вставить("ИзменятьСрокДействия", Истина);
		
		// Передадим также сроки исходного документа
		ПараметрыОткрытия.Вставить("ДатаНачалаДействия", Объект.ДатаНачалаДействия);
		ПараметрыОткрытия.Вставить("ДатаОкончанияДействия", Объект.ДатаОкончанияДействия);
		ПараметрыОткрытия.Вставить("Бессрочный", Объект.Бессрочный);
		ПараметрыОткрытия.Вставить("ПорядокПродления", Объект.ПорядокПродления);
		ПараметрыОткрытия.Вставить("РежимПереносСрока", Истина);
		
		ОткрытьФорму("Справочник.ДокументыПредприятия.Форма.ИзменениеСрокаДействия", ПараметрыОткрытия, ЭтаФорма);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПеретаскиваниеФайловЗавершено" И Параметр = Объект.Ссылка Тогда
		ЗаполнитьСписокФайловКлиент();
	КонецЕсли;
	
	Если ИмяСобытия = "ПереименованиеФайловЗавершено" И Параметр = Объект.Ссылка Тогда
		ЗаполнитьСписокФайловКлиент();
	КонецЕсли;
	
	Если ИмяСобытия = "ИмпортФайловЗавершен" И ТипЗнч(Источник) = Тип("Структура")
		И Источник.ВладелецФайлов = Объект.Ссылка Тогда
		ЗаполнитьСписокФайловКлиент();
		
		Если Параметр <> Неопределено Тогда
			УстановитьТекущуюСтрокуФайла(Параметр);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ФайлыДокументаПомеченыНаУдаление" Тогда
		ЗаполнитьСписокФайловКлиент();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Владелец")
			 И Параметр.Свойство("Файл") И ЗначениеЗаполнено(Параметр.Владелец)  Тогда
			ВладелецФайла = Параметр.Владелец;
			ФайлСсылка = Параметр.Файл; 
		Иначе	
			ВладелецФайла = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Источник, "ВладелецФайла");
			ФайлСсылка = Источник; 
		КонецЕсли;
		
		Если ВладелецФайла = Объект.Ссылка Тогда
			ОбновитьСтрокуФайла(ФайлСсылка);
			
			ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
			УстановитьДоступностьКоманд(ТекущиеДанные);
			
			Если ТипЗнч(Параметр) = Тип("Структура") Тогда
				Если Параметр.Свойство("ЕстьЗашифрованныеИлиЗанятыеФайлы") Тогда
					ЕстьЗашифрованныеИлиЗанятыеФайлы = Параметр.ЕстьЗашифрованныеИлиЗанятыеФайлы;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ИспользоватьПредпросмотрФайлов Тогда
			
			ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
			
			Если ТекущиеДанные <> Неопределено Тогда
				ТекущийФайл = ТекущиеДанные.Ссылка; 
				ФайлРедактируется = ТекущиеДанные.РедактируетТекущийПользователь;
				
				Если Параметр.Свойство("Файл") И Параметр.Файл = ТекущийФайл Тогда
				
					Если ФайлРедактируется Тогда
				
						ПредставлениеHTML = ОбзорФайловКлиентСервер.HTMLПредставлениеПриРедактировании();
						Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
						Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
						Элементы.ПереключениеСтраниц.Видимость = Ложь;
						
					Иначе
						
						ДокументPDF = Неопределено;
						
						ТекстСостояния = НСтр("ru = 'Обновляются данные предпросмотра... '");
						Состояние(ТекстСостояния);
						
						ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();
						ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
						ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.Расширение;
						ПараметрыHTMLПредставление.Размер = ТекущиеДанные.ТекущаяВерсияРазмер;
						ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
						ПараметрыHTMLПредставление.ПредпросмотрОфисныхФайлов = ПредпросмотрОфисныхФайлов;
						ПараметрыHTMLПредставление.ОбновитьПредставление = Истина;
						
						ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
							ТекущийФайл, 
							ПараметрыHTMLПредставление,
							ДокументPDF);
						
						ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ПредставлениеHTML,
							ТаймлистАвтопротоколHTML, РаспознанныйТекстHTML);
						
						Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
						МасштабироватьPDFИКартинки = ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки;
						УстановитьВидимостьКомандМасштаба(ТекущиеДанные.Расширение);	
						
						Если ДокументPDF = Неопределено Тогда
							Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
						Иначе
							Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
							ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF; 
							Элементы.ДокументPdfПоле.НомерТекущейСтраницы = 1;
						КонецЕсли;
						
						Состояние();
						
					КонецЕсли; 
				
				КонецЕсли;
			КонецЕсли;
			
	 	КонецЕсли;
		
 	КонецЕсли;
	
	Если ИмяСобытия = "ФайлИзменен" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			Если Параметр.Владелец = Объект.Ссылка Тогда 
				Если Параметр.Свойство("ИзменилсяПризнакОригинала") И Параметр.ИзменилсяПризнакОригинала Тогда 
					ОбновитьСтрокуФайла(Параметр.Файл, Истина);
				Иначе	
					ОбновитьСтрокуФайла(Параметр.Файл);	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
		
	Если ИмяСобытия = "ЗадачаСогласованияВыполнена" Тогда
		Если Параметр.Свойство("Предмет") И Параметр.Предмет = Объект.Ссылка Тогда
			ПолучитьОбзорДокумента();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ОбъектПодписан" И Параметр = Объект.Ссылка Тогда
		ПрочитатьУстановитьДоступностьПолейЗаполнитьПодписи();
	КонецЕсли;
	
	Если ИмяСобытия = "ПрисоединенныйФайлЗашифрован" И Параметр = Объект.Ссылка Тогда
		ЗаполнитьСписокПодписей();
		УстановитьДоступностьКомандСпискаПодписей(Элементы.ЭлектронныеПодписи.ТекущиеДанные);
	КонецЕсли;
	
	Если ИмяСобытия = "ПрисоединенныйФайлПодписан" И Параметр = Объект.Ссылка Тогда
		ЗаполнитьСписокПодписей();
		УстановитьДоступностьКомандСпискаПодписей(Элементы.ЭлектронныеПодписи.ТекущиеДанные);
		ОповеститьОбИзменении(КлючЗаписи);
		ОбновитьКартинкуЭП();
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененЖурналПередачи" И Параметр = Объект.Ссылка Тогда
		КомуПереданДокумент = Делопроизводство.СтрокаКомуПереданДокумент(Объект.Ссылка);
		ПолучитьОбзорДокумента();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" Тогда
		
		Если Параметр <> Неопределено
		   И Параметр.Свойство("Владелец")
		   И Параметр.Владелец = Объект.Ссылка Тогда
		   	СозданДокументЭДО = Параметр.Свойство("ДокументЭДО");
			Если СозданДокументЭДО Тогда
				СвязанныеДокументыЭДО.Добавить(Параметр.ДокументЭДО);       
				
				Если ЗначениеЗаполнено(ТекущийДокументЭДО) Тогда
					
					ЭлементСписка = СвязанныеДокументыЭДО.НайтиПоЗначению(ТекущийДокументЭДО);
					Если ЭлементСписка <> Неопределено Тогда
						СвязанныеДокументыЭДО.Удалить(ЭлементСписка);
					КонецЕсли;
					
				КонецЕсли;	
				
				Элементы.СоздатьИсходящийДокументЭДО.Видимость = Ложь;
				Элементы.СоздатьИсходящийДокументЭДОМенюЭДО.Видимость = Ложь;
				Элементы.СоздатьИсходящийДокументЭДОПодменюСервис.Видимость = Ложь;
				Элементы.ПросмотретьЭлектронныйДокумент.Видимость = Истина;
			КонецЕсли;
			ЗаполнитьСписокФайловКлиент();
			
			Если Параметр.Свойство("Файл") Тогда
				Если ТипЗнч(Параметр.Файл) = Тип("СправочникСсылка.Файлы") Тогда
					УстановитьТекущуюСтрокуФайла(Параметр.Файл);
					ОтметитьПризнакОригиналУНовогоФайла(Параметр.Файл);
				КонецЕсли;
				
				Если Не Элементы.Обзор.Видимость 
					И Элементы.ГруппаСтраницы.ТекущаяСтраница 
					<> Элементы.СтраницаФайлы Тогда 
					Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаФайлы;
					
					Если ЭтоМобильныйКлиент Тогда
						Элементы.МК_КнопкаСтраницаФайлы.Видимость = Элементы.СтраницаФайлы.Видимость;
						МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.СтраницаФайлы, Элементы.МК_КнопкаСтраницаФайлы);
					КонецЕсли;
					
				ИначеЕсли Элементы.Обзор.Видимость И Элементы.ГруппаСтраницы.ТекущаяСтраница <> Элементы.Обзор Тогда 
					Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор;
				КонецЕсли;
			КонецЕсли;
			Если Параметр.Свойство("СуммаДокумента")
				И Не ЗначениеЗаполнено(Объект.Сумма) Тогда
				Объект.Сумма = Параметр.СуммаДокумента;
			КонецЕсли; 
			Если Параметр.Свойство("СуммаНДС") 
				И Не ЗначениеЗаполнено(Объект.СуммаНДС) Тогда
				Объект.СуммаНДС = Параметр.СуммаНДС;
			КонецЕсли; 
			Если Параметр.Свойство("Валюта")
				И ЗначениеЗаполнено(Объект.Валюта) Тогда
				Объект.Валюта = Параметр.Валюта;
			КонецЕсли; 
			
			ОповеститьОбИзменении(КлючЗаписи);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененыРеквизитыПриИзмененииСвязи" И Параметр = Объект.Ссылка Тогда
		Прочитать();
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененыСвязиДокумента" Тогда
		
		Если Параметр.Документ = Объект.Ссылка Тогда
			ПрочитатьСвязи(Параметр.ТипыСвязей);
		КонецЕсли;
		
		ЗаполнитьСвязи();
		ОбновитьИнформациюОСвязях();
		
		// Раскроем дерево
	    КоллекцияСтрок = ДеревоСвязей.ПолучитьЭлементы();
		Для Каждого Строка Из КоллекцияСтрок Цикл
			ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
			Элементы.ДеревоСвязей.Развернуть(ИдентификаторСтроки, Истина);
		КонецЦикла;	
		
		// Установим курсор в нужную строку
		Если Параметр.Свойство("СвязанныйОбъект") Тогда 
			НашлиСтроку = Ложь; 
			КоллекцияСтрок = ДеревоСвязей.ПолучитьЭлементы();
			Для Каждого Строка Из КоллекцияСтрок Цикл
				Если НашлиСтроку Тогда
					Прервать;
				КонецЕсли;
				
				ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
				Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл 
					Если Параметр.СвязанныйОбъект = ПодчиненнаяСтрока.СвязанныйОбъект 
					   И Параметр.ТипыСвязей[0] = ПодчиненнаяСтрока.ТипСвязи Тогда
						Элементы.ДеревоСвязей.ТекущаяСтрока = ПодчиненнаяСтрока.ПолучитьИдентификатор();
						НашлиСтроку = Истина;
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
			КонецЦикла;	
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "УстановленаСвязь" Тогда 
		Если Параметр.Документ = Объект.Ссылка
			И (Параметр.ТипСвязи = ПредопределенноеЗначение("Справочник.ТипыСвязей.ОтветПереадресовавшему")
			Или Параметр.ТипСвязи = ПредопределенноеЗначение("Справочник.ТипыСвязей.ПереадресованДокументом")) Тогда
			РаботаСКорреспонденциейКлиент.ОбработкаОповещенияОПереадресацииДокументом(ЭтотОбъект,
				Параметр, Источник);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененыСвязиПодчиненныхДокументов" И Параметр.Документ = Объект.Ссылка Тогда
		ЗаполнитьСвязи();
		ОбновитьИнформациюОСвязях();
		
		// Раскроем дерево
	    КоллекцияСтрок = ДеревоСвязей.ПолучитьЭлементы();
		Для Каждого Строка Из КоллекцияСтрок Цикл
			ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
			Элементы.ДеревоСвязей.Развернуть(ИдентификаторСтроки, Истина);
		КонецЦикла;	
	КонецЕсли;
	
	// Комплекты документов
	Если ЯвляетсяКомплектом Тогда
		Если ИмяСобытия = "ДобавленЭлементКомплекта" Тогда
			Если Параметр.Свойство("ПараметрСобытия") И Параметр.ПараметрСобытия = УникальныйИдентификатор Тогда
				РаботаСКомплектамиДокументовКлиент.СоставКомплектаДобавитьЭлементы(ЭтаФорма, Параметр.Ссылка);
			КонецЕсли;
		КонецЕсли;
		Если ИмяСобытия = "БизнесПроцессСтартован" Тогда
			РаботаСКомплектамиДокументовКлиент.СоставКомплектаОбновить(ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "БизнесПроцессСтартован"
		И Параметр.Свойство("СсылкаНаПредметБизнесПроцесса")
		И Параметр.СсылкаНаПредметБизнесПроцесса = Объект.Ссылка Тогда

		ОбновитьКнопкуОтправить();
	КонецЕсли;
	
	// Резолюции
	Если ИмяСобытия = "Запись_Резолюции" И Параметр = Объект.Ссылка Тогда
		ПолучитьОбзорДокумента();
	КонецЕсли;
	
	// Визы согласования
	Если ИмяСобытия = "Запись_ВизыСогласования" И Параметр = Объект.Ссылка Тогда
		ПрочитатьГруппыНаСервере();
		ПолучитьОбзорДокумента();
	КонецЕсли;
	
	Если ИмяСобытия = "НапечатанШтрихкод" И Параметр = Объект.Ссылка Тогда
		НеобходимоНапечататьШтрихкодПриСоздании = Ложь;
	КонецЕсли; 
	
	Если ИмяСобытия = "РедактироваласьКатегория" Тогда
		ОбновитьДанныеОКатегориях(Параметр);
	КонецЕсли;
	
	Если ИмяСобытия = "СозданаТемаПоПредмету"
		И Параметр.Предмет = Объект.Ссылка Тогда 
		// картинки состояний
		ВывестиСтрокуСостояний();
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьКонтроля" Тогда 
		Если Параметр.Предмет = Объект.Ссылка Тогда 
			ОбработатьЗаписьКонтроля();
			
		ИначеЕсли ДействияКлиентСервер.ЭтоДействие(Параметр.Предмет) Тогда 
			ОбработатьЗаписьКонтроля(Параметр.Предмет);
			ДействияКлиент.РазвернутьДействия(Элементы.Действия, Действия);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьДанныеФормыПослеПодготовкиДокументаККорректировке" И Параметр = Объект.Ссылка Тогда
		// Обновляем представление документа на закладке Обзор.
		ПолучитьОбзорДокумента();

		// Обновляем данные формы связанные с ЭП.
		ЗаполнитьСписокПодписей();
		УстановитьДоступностьКомандСпискаПодписей(Элементы.ЭлектронныеПодписи.ТекущиеДанные);
		ОповеститьОбИзменении(КлючЗаписи);
		ОбновитьКартинкуЭП();
		
		// Обновляем табличную часть Стороны.
		ЗаполнитьТаблицуСторон();
		Элементы.Стороны.Обновить();
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
    // Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ОбработкаОповещения.
	СПАРКРискиКлиент.ОбработкаОповещения(ЭтотОбъект, Неопределено, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ОбработкаОповещения.	
	
	Если ИмяСобытия = "ОригиналПолученИзменить" И Параметр = Объект.Ссылка Тогда
		ПоменятьПризнакНаличияОргинала();
	КонецЕсли; 

	Если ИмяСобытия = "ОбновитьДействияВПредмете" И Параметр.Предмет = Объект.Ссылка
		Или ОбработкиОбъектовКлиент.ЭтоОповещениеОПереходеКВыполнениюДействияПредмета(
			ИмяСобытия, Параметр, Объект.Ссылка) Тогда
			
		ОбновитьДействиеВПредмете();
		ДействияКлиент.РазвернутьДействия(Элементы.Действия, Действия);
		
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьДействияВПредметеПриВыполненииЗадачи" И Параметр.Предмет = Объект.Ссылка Тогда
			
		Если Не ОбработкаОчередиЗаданийКлиентПовтИсп.ИспользоватьЗадания() Тогда
			ОбновитьДействиеВПредмете();
			ДействияКлиент.РазвернутьДействия(Элементы.Действия, Действия);
		Иначе        
			ПодключитьОбработчикОжидания("ОбновитьОбработка", 5, Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ПереключитьНаЗакладкуОбработка"
		И Параметр = Объект.Ссылка Тогда
			
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОбработка;
		ПриПереключенииНаСтраницуОбработка();
			
	КонецЕсли;
	
	Если ИмяСобытия = "РолиФайловВыбраны"  Тогда
		
		ЗаполнитьСписокФайловКлиент();
		
		ОбщегоНазначенияДокументооборотКлиент.ЗапуститьФоновоеПереименованиеФайлов(
			Объект.Ссылка,
			УникальныйИдентификатор);
		
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьПредметПереписки" И Параметр = Объект.Ссылка Тогда 
		
		ПредметыПереписки = СвязиОбъектов.ПолучитьСвязанныеОбъекты(Объект.Ссылка, 
			ПредопределенноеЗначение("Справочник.ТипыСвязей.ПредметПереписки"));
		
		Для Каждого Предмет Из ПредметыПереписки Цикл
			Если СписокПредметовПереписки.НайтиПоЗначению(Предмет) = Неопределено Тогда
				СписокПредметовПереписки.Добавить(Предмет);
			КонецЕсли;
		КонецЦикла;
		Если ПредметыПереписки.Количество() И Не ЗначениеЗаполнено(ПредметПереписки) Тогда
			ПредметПереписки = ПредметыПереписки[0];
		КонецЕсли;
		
		Если ПредметыПереписки.Количество() > 1 Тогда
			НесколькоПредметовПереписки = Истина;
			РаботаСКорреспонденциейКлиентСервер.УстановитьВидимостьЭлементовВОтветНаИПредметПереписки(ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеЭП" Тогда
		ВыполнитьОбновлениеСпискаПодписей();
	КонецЕсли;
	 
	ОбработатьСобытиеЗаписиЗадачи(ИмяСобытия, Параметр, Источник);
	
	
	// Если обновился предмет сообщения МЭДО, то могло измениться состояние:
	Если ИмяСобытия = "Запись_УведомлениеМЭДО" Или ИмяСобытия = "Запись_КвитанцияМЭДО" Тогда
		Если Параметр.Документ = Объект.Ссылка Тогда
			ОбновитьИсториюСостоянийМЭДОСервер();
			ОповеститьОбИзменении(КлючЗаписи);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Запись_ДанныеДокументаМЭДО" Тогда
		Если Параметр.Документ = Объект.Ссылка Тогда
			ЗаполнитьЗакладкуМЭДОВФормеСервер();
			ОповеститьОбИзменении(КлючЗаписи);
		КонецЕсли;
	КонецЕсли;
	
	
	Если ИмяСобытия = "Запись_ВыгрузкаВССТУ" Тогда
		ОбновитьСостояниеВыгрузкиССТУ_Сервер(Истина);
	КонецЕсли;
	
	Если ИмяСобытия = ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияСостоянияЭДО() Тогда
		
		Если Не ЗначениеЗаполнено(Параметр) Или Параметр.ЭлектронныеДокументы.Найти(ТекущийДокументЭДО) <> Неопределено Тогда
			ОбновитьРеквизитыЭДО();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ЭлектронныйДокументВходящий_ПодборДокументаУчета" Тогда
		
		ОбновитьРеквизитыЭДО();
		
	КонецЕсли;
	
	Если ИмяСобытия = ОбменЭДОДокументооборотКлиент.ИмяСобытияСозданияИсходящегоЭДО() Тогда
		ОбработатьСобытиеСозданияИсходящегоЭДО(Параметр);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПереносКэшаИзЧтенияВСоздание =
		КэшиНаВремяВызова.ИнициализироватьДокументыПредприятияФормаЭлемента(ТекущийОбъект.Ссылка);
	
	Делопроизводство.ЗаполнитьКэшВидаДокументаНаФорме(ЭтотОбъект, Объект.ВидДокумента);
	// Запоминаем начальные значения реквизитов
	ЗапомнитьЗначенияРеквизитов();
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ПриЧтенииНаСервере(ЭтотОбъект);
	
	// Формирование исходной рабочей группы
	КэшДокументыПредприятияФормаЭлемента =
		КэшиНаВремяВызоваПовтИсп.КэшДокументыПредприятияФормаЭлемента();
	Если КэшДокументыПредприятияФормаЭлемента.Инициализирован
		И КэшДокументыПредприятияФормаЭлемента.КэшДокумента.Ссылка = Объект.Ссылка Тогда
		Участники = КэшДокументыПредприятияФормаЭлемента.УчастникиРабочейГруппы;
	Иначе
		Участники = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	КонецЕсли;
	ИсходнаяРабочаяГруппа.Очистить();
	Для каждого Эл Из Участники Цикл
		
		Строка = ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник;
		Строка.Изменение = Эл.Изменение;
		
	КонецЦикла;
	
	СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(
		Объект.Ссылка);
	ДокументПодписан = ДействияСервер.ДокументПодписан(Объект.Ссылка);
	Если КэшДокументыПредприятияФормаЭлемента.Инициализирован
		И КэшДокументыПредприятияФормаЭлемента.КэшДокумента.Ссылка = Объект.Ссылка Тогда
		
		ЕстьФайлыШаблона = КэшДокументыПредприятияФормаЭлемента.КэшДокумента.ЕстьФайлыШаблона;
	Иначе
		ЕстьФайлыШаблона =
			РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Объект.Шаблон, Ложь).Количество() > 0;
	КонецЕсли;
	
	// Комплекты документов
	РаботаСКомплектамиДокументовСервер.ДокументПриЧтенииНаСервере(ЭтотОбъект);
	
	// Статьи ДДС.
	ПрочитатьСтатьиДДС(Объект.Ссылка);
	
	// Авансовый отчет.
	ПрочитатьОбязательстваПоАвансовомуОтчету(Объект.Ссылка);
	
	// Не действует.
	НеДействуетИсходноеЗначение = ТекущийОбъект.НеДействует;
	
	Элементы.ГруппаОтменен.Видимость = Делопроизводство.ЭтотВидДокументаМожноОтменить(Объект.ВидДокумента);
	
	// Срок действия
	СрокДействияПриЧтенииНаСервере();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Нумерация.УстановитьВидимостьВременногоНомера(ЭтотОбъект);
	
	КраткиеСведенияОСвязях = СвязиОбъектов.КраткиеСведенияОСвязях(Объект.Ссылка);
	
	Если Не ЗначениеЗаполнено(КраткиеСведенияОСвязях) Тогда	
		КраткиеСведенияОСвязях = НСтр("ru = 'Связи: не заданы'");
	КонецЕсли;	
	Элементы.КраткиеСведенияОСвязях.Видимость 
		= ЗначениеЗаполнено(КраткиеСведенияОСвязях) И Не ЭтоНовыйДокумент;
	
	Если Не ЭтоНовыйДокумент Тогда
		Элементы.ГруппаСвязи.Видимость = Ложь;
	КонецЕсли;	
	
	ОбновитьОбластьЗадач();
	
	ПользовательИЕгоСотрудники = СотрудникиВызовСервера.ПользовательИЕгоСотрудники();
	ТекПользовательПодготовилДокумент  = 
		(ПользовательИЕгоСотрудники.Найти(Объект.Подготовил) <> Неопределено); 
	
	РегламентированныйУчетОбращений = ПолучитьФункциональнуюОпцию("РегламентированныйУчетОбращений");
	Если ЗаполнитьДанныеКорреспонденцииНаФормеДокумента Тогда
		Документы.Корреспонденция.ЗаполнитьДанныеНаФормеДокумента(ЭтотОбъект);
	Иначе	
		РаботаСКорреспонденцией.ПриСозданииФормыНаСервере(ЭтотОбъект, Ложь, Истина);
		ЗаполнитьДанныеКорреспонденцииНаФормеДокумента = Истина;
	КонецЕсли;
	
	ПоказатьДелаетНедействующими();
	ОтобразитьВажность(ЭтотОбъект);
	
	ОбновитьПараметрыВидаОбъекта();
	ДействияСобытия.ПриЧтенииПредметаНаСервере(ЭтотОбъект, Параметры, ПараметрыВидаОбъекта);
	
	ОбщегоНазначенияДокументооборот.ПоказатьНадписьПометкиУдаления(
		ЭтотОбъект, ТекущийОбъект.ПометкаУдаления);
	
	ДелоЗакрыто = ЗначениеЗаполнено(ТекущийОбъект.Дело) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект.Дело,
		"ДелоЗакрыто");
	Если СозданиеФормыЗавершено Тогда
		УстановитьДоступностьПолей();
	КонецЕсли;   
	
	ОбновитьРеквизитыЭДО(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеПредупрежденияПриРегистрации(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = Ложь Или Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	ПараметрыЗаписи.Вставить("ПоказаноПредупреждениеПриРегистрации", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеПредупрежденияОСканКопииОригинала(ПараметрыЗаписи) Экспорт

	ПараметрыЗаписи.Вставить("ПоказаноПредупреждениеОСканКопииОригиналаДокумента", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеПредупрежденияОПеререгистрации(Результат, ПараметрыЗаписи) Экспорт

	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ПоказаноПредупреждениеОПеререгистрации", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеУказанияДанныхРегистрации(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	РегистрационныйНомер = СокрЛП(Результат.РегистрационныйНомер);
	ПараметрыЗаписи.Вставить("УказанРегистрационныйНомер", Истина);
	ПараметрыЗаписи.Вставить("НовыйРегистрационныйНомер", РегистрационныйНомер);
	ПараметрыЗаписи.Вставить("ДатаРегистрации", Результат.ДатаРегистрации);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВыбораПропущенногоНомера(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И ЗначениеЗаполнено(Результат.ПропущенныйНомер) Тогда
		Объект.ЧисловойНомер = Результат.ПропущенныйНомер;
		ПараметрыЗаписи.Вставить("СтруктураПропущенногоНомера", Результат);
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ПоказанаФормаВыбораПропущенногоНомера", Истина);
	
	Записать(ПараметрыЗаписи);
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВопросаОЗаписиВЖурналеПередачи(Результат, ПараметрыЗаписи) Экспорт
	
	НужныйКонтрагент = ПараметрыЗаписи.КонтрагентСПодтверждениемОЖурналеПередачи;
	НайденнаяСтрока = КонтрагентыДляОтраженияВЖурналеПередачи.НайтиСтроки(Новый Структура("Контрагент", НужныйКонтрагент))[0];
	Если Результат = КодВозвратаДиалога.Да Тогда
		НайденнаяСтрока.НеобходимостьОтметкиВЖурналеПередачиПодтверждена = 
			ПредопределенноеЗначение("Перечисление.ДаНетСпрашивать.Да");
	Иначе
		НайденнаяСтрока.НеобходимостьОтметкиВЖурналеПередачиПодтверждена = 
			ПредопределенноеЗначение("Перечисление.ДаНетСпрашивать.Нет");
	КонецЕсли;
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВопросаОСозданииСвязи(Результат, ПараметрыЗаписи) Экспорт

	Если Результат <> КодВозвратаДиалога.Да Тогда
		СвязанныйДокументДляНумерации = Неопределено;
		Возврат;
	КонецЕсли;
					
	Если ТипыВидыСвязанныхДокументовДляНумерации.Количество() = 0 Тогда
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Невозможно указать связь ""%1"", так как связь данного типа не настроена для документов вида ""%2"".'"),
			ТипСвязиНумератора,
			Объект.ВидДокумента);
		
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПередЗаписьюПродолжениеПослеВыбораСвязанногоДокумента",
		ЭтотОбъект,
		ПараметрыЗаписи);
	
	// Определение количества возможных типов связанного документа
	ТипСвязанногоДокументаСоставной = Ложь;
	ТипДляВыбора = ТипыВидыСвязанныхДокументовДляНумерации[0].Тип;
	Для Каждого СтрокаТипа Из ТипыВидыСвязанныхДокументовДляНумерации Цикл
		Если СтрокаТипа.Тип <> ТипДляВыбора Тогда
			ТипСвязанногоДокументаСоставной = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Открытие формы выбора связанного документа
	Если ТипСвязанногоДокументаСоставной Тогда
		
		ОткрытьФорму(
			"ОбщаяФорма.ВыборДокументаДляСвязи", 
			Новый Структура("ТаблицаТипов", ТипыВидыСвязанныхДокументовДляНумерации),,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
	Иначе
		
		// Заполнение отбора по виду документа
		МассивВидовДокументов = Новый Массив;
		Для Каждого СтрокаТипа Из ТипыВидыСвязанныхДокументовДляНумерации Цикл
			
			Если ЗначениеЗаполнено(СтрокаТипа.Вид) Тогда 
				Если МассивВидовДокументов.Найти(СтрокаТипа.Вид) = Неопределено Тогда
					МассивВидовДокументов.Добавить(СтрокаТипа.Вид);
				КонецЕсли;
			Иначе
				// Настройка предусматривает любой вид документа, отбор не нужен
				МассивВидовДокументов.Очистить();
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура;
		Если МассивВидовДокументов.Количество() > 0 Тогда
			ПараметрыФормы.Вставить("Отбор", Новый Структура("ВидДокумента", МассивВидовДокументов));
		КонецЕсли;
			
		Поз = Найти(ТипДляВыбора, ".");
		ИмяФормыВыбора = "Справочник." + Сред(ТипДляВыбора, Поз + 1) + ".ФормаВыбора";
		
		ОткрытьФорму(
			ИмяФормыВыбора, 
			ПараметрыФормы,,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;				
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВыбораСвязанногоДокумента(СвязанныйДокумент, ПараметрыЗаписи) Экспорт
	
	Если Не ЗначениеЗаполнено(СвязанныйДокумент) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда // связь будет добавлена при записи
		СвязанныйДокументДляНумерации = СвязанныйДокумент;
	Иначе // связь нужно добавить сейчас для корректного формирования номера
		СвязиОбъектов.СоздатьСвязь(
			Объект.Ссылка, 
			СвязанныйДокумент, 
			ТипСвязиНумератора);
		СоздатьСвязьДляНумерации = Ложь;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("СвязанныйОбъект", СвязанныйДокумент);
	ПараметрыЗаписи.Вставить("ПоказанВопросОСозданииСвязи", Истина);
	
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОчиститьСообщения();
	
	// Оценка производительности
	УИДЗамераВыполнениеКомандыЗаписать = ОценкаПроизводительностиКлиент.ЗамерВремени(
		"ДокументыПредприятияВыполнениеКомандыЗаписать", Ложь, Ложь);
	
	ЭтоНагрузочноеТестирование = НагрузочноеТестированиеКлиент.ЭтоНагрузочноеТестирование();
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(Объект.Товары, "Номенклатура");
	
	Если ПараметрыЗаписи.Свойство("Регистрация") Тогда
		
		ПредыдущийРегНомер = Объект.РегистрационныйНомер;
		ПредыдущаяДатаРегистрации = Объект.ДатаРегистрации;
		
		// Регистрация
		Если Не ДокументЗарегистрирован() Тогда 
			Если ОграничиватьДоступностьПолейПоСостоянию И
				Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждениеПриРегистрации")
				И РегистрацияПриЗакрытии <> Истина Тогда
				ОбработчикОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеПредупрежденияПриРегистрации",
					ЭтотОбъект,
					ПараметрыЗаписи);
				ДелопроизводствоКлиент.ПредупредитьПриРегистрации(ОбработчикОповещения, Отказ);
				Если Отказ Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			Если ОбязателенФайлОригинала
				И РегистрацияПриЗакрытии <> Истина Тогда 
				ОтсутствуетОригинал = Истина;
				
				Для Каждого Строка Из Файлы.ПолучитьЭлементы() Цикл
					Если Не Строка.ЭтоРольФайла И Не Строка.ЭтоДокументЭДО Тогда
						Если Строка.Оригинал И Не Строка.ПометкаУдаления Тогда 
							ОтсутствуетОригинал = Ложь;
							Прервать;
						КонецЕсли;	
					Иначе
						
						Для Каждого Подстрока Из Строка.ПолучитьЭлементы() Цикл
							Если Подстрока.Оригинал И Не Подстрока.ПометкаУдаления Тогда 
								ОтсутствуетОригинал = Ложь;
								Прервать;
							КонецЕсли;	
						КонецЦикла;	
						
					КонецЕсли;	
						
				КонецЦикла;
				
				Если Не ЭтоНагрузочноеТестирование Тогда
					Если ОтсутствуетОригинал Тогда
						Если Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждениеОСканКопииОригиналаДокумента") Тогда
							ОписаниеОповещения = Новый ОписаниеОповещения(
								"ПередЗаписьюПродолжениеПослеПредупрежденияОСканКопииОригинала",
								ЭтотОбъект,
								ПараметрыЗаписи);
							ПоказатьПредупреждение(
								ОписаниеОповещения, 
								НСтр("ru = 'Для документа требуется обязательное наличие скан-копии оригинала.
									|Вы можете добавить ее в список файлов после регистрации документа.'"));
							Отказ = Истина;
							Возврат;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждениеОПеререгистрации") Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеПредупрежденияОПеререгистрации",
					ЭтотОбъект,
					ПараметрыЗаписи);
					
				ДелопроизводствоКлиент.ПредупредитьПриПеререгистрации(ОписаниеОповещения);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(Объект);
		СтруктураПараметров.Вставить("ПерепискаПоПредмету",	ПерепискаПоПредмету);
		СтруктураПараметров.Вставить("ПолученВОтветНа", ВОтветНа);
		СтруктураПараметров.Вставить("НеДействуетВСоответствии", НеДействуетВСоответствии);
		СтруктураПараметров.Вставить("СвязанныйОбъект", СвязанныйДокументДляНумерации);
		
		ПараметрыЗаписи.Вставить("ПроверкаНеобходимостиУказатьСвязанныйДокументПройдена", Ложь);
		СтруктураВозврата = Делопроизводство.ДляРегистрацииНеобходимоУказатьСвязанныйДокумент(СтруктураПараметров);
		ПараметрыЗаписи.ПроверкаНеобходимостиУказатьСвязанныйДокументПройдена = Истина;
		
		Нумератор = СтруктураВозврата.Нумератор;
		СоздатьСвязьДляНумерации = СтруктураВозврата.СоздатьСвязьДляНумерации;
		ИспользоватьПропущенныеНомера = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			СтруктураВозврата, "ИспользоватьПропущенныеНомера", Ложь);
		
		Если СтруктураВозврата.Свойство("ТипСвязиНумератора") Тогда 
			ТипСвязиНумератора = СтруктураВозврата.ТипСвязиНумератора;
		КонецЕсли;	
		
		Если СтруктураВозврата.Свойство("ТипыВидыСвязанныхДокументовДляНумерации") Тогда 
			Для Каждого Строка Из СтруктураВозврата.ТипыВидыСвязанныхДокументовДляНумерации Цикл
				НоваяСтрока = ТипыВидыСвязанныхДокументовДляНумерации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЦикла;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Нумератор) Тогда
			
			Если Не ПараметрыЗаписи.Свойство("УказанРегистрационныйНомер") Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеУказанияДанныхРегистрации",
					ЭтотОбъект,
					ПараметрыЗаписи);
				РегистрационныйНомер = Объект.РегистрационныйНомер;
				ДатаРегистрации = Объект.ДатаРегистрации;
				ДелопроизводствоКлиент.ВвестиДанныеРегистрации(РегистрационныйНомер, ДатаРегистрации,
					НСтр("ru = 'Укажите номер и дату регистрации'"),
					ОписаниеОповещения);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
		Иначе
			
			Если СоздатьСвязьДляНумерации И Не ПараметрыЗаписи.Свойство("ПоказанВопросОСозданииСвязи")
				И Не ЭтоНагрузочноеТестирование Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеВопросаОСозданииСвязи",
					ЭтотОбъект,
					ПараметрыЗаписи);
				
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Для регистрации документа необходимо заполнить связь ""%1"". Заполнить сейчас?'"),
						ТипСвязиНумератора);
						
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			Если Не ПараметрыЗаписи.Свойство("ПоказанаФормаВыбораПропущенногоНомера")
				И ИспользоватьПропущенныеНомера Тогда
				Оповещение = Новый ОписаниеОповещения("ПередЗаписьюПродолжениеПослеВыбораПропущенногоНомера",
					ЭтотОбъект, ПараметрыЗаписи);
				НумерацияКлиент.ВыбратьПропущенныеНомера(Объект, Оповещение, Отказ);
				Если Отказ Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		// Зададим вопрос о связанном документе для временного номера
		ПараметрыЗаписи.Вставить("ПроверкаНеобходимостиУказатьСвязанныйДокументПройдена", Ложь);
		СтруктураВозврата = Нумерация.ДляВременногоНомераТребуетсяУстановитьСвязь(Объект);
		ПараметрыЗаписи.ПроверкаНеобходимостиУказатьСвязанныйДокументПройдена = Истина;
		
		Если СтруктураВозврата.Свойство("ТипСвязиНумератора") Тогда 
			ТипСвязиНумератора = СтруктураВозврата.ТипСвязиНумератора;
		КонецЕсли;
		Если СтруктураВозврата.Свойство("ТипыВидыСвязанныхДокументовДляНумерации") Тогда 
			Для Каждого Строка Из СтруктураВозврата.ТипыВидыСвязанныхДокументовДляНумерации Цикл
				НоваяСтрока = ТипыВидыСвязанныхДокументовДляНумерации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЦикла;
		КонецЕсли;
		СоздатьСвязьДляНумерации = СтруктураВозврата.СоздатьСвязьДляНумерации;
		
		Если СоздатьСвязьДляНумерации И Не ПараметрыЗаписи.Свойство("ПоказанВопросОСозданииСвязи")
			И Не ЭтоНагрузочноеТестирование Тогда
		
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПередЗаписьюПродолжениеПослеВопросаОСозданииСвязи", ЭтотОбъект, ПараметрыЗаписи);
			
			ТекстВопроса = СтрШаблон(
				НСтр("ru='Для записи документа необходимо заполнить связь ""%1"". Заполнить сейчас?'"),
				ТипСвязиНумератора);
					
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если (ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией И ПараметрыЗаписи.Свойство("Регистрация") Или 
		ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией)
		И ЗначениеЗаполнено(ПредметПереписки) Тогда
		
		Если Не КонтрагентыДляОтраженияВЖурналеПередачи.Количество() Тогда
			УстановитьНеобходимостьОтметкиВЖурналеПередачи();
		КонецЕсли;
		
		Если ДелопроизводствоКлиент.ЗадатьВопросОбОтраженииВЖурналеПередачи(
				ЭтотОбъект, ПараметрыЗаписи, Отказ) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбязательныеТипыСвязей.Количество() <> 0 И
		ОбязательныеТипыСвязей.Количество() <> ОбязательныеСвязи.Количество()
		И ЧислоПользовательскихСвязей <= 1
		И ОбязательныеТипыСвязей.Количество() = 1 
		И ТипЗнч(Основание) = Тип("СправочникСсылка.ДокументыПредприятия") 	
		И ЗначениеЗаполнено(Основание) Тогда
				
		Строка = ОбязательныеТипыСвязей[0];
		
		Если ОснованиеВидДокумента = Строка.СсылкаНа
			Или ОснованиеВидДокументаРодитель = Строка.СсылкаНа Тогда
			
			НоваяСтрока = ОбязательныеСвязи.Добавить();
			НоваяСтрока.ТипСвязи = Строка.ТипСвязи;
			НоваяСтрока.СсылкаНа = Строка.СсылкаНа;
			НоваяСтрока.СвязанныйОбъект = Основание;
			НоваяСтрока.НужноЗаписать = Истина;
			
			ОкноВыбораТипаСвязиПоказано = Истина;
					
		КонецЕсли;			
		
	КонецЕсли;	
	
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ДокументыПредприятия") 
		И Не ТипСвязиВыбран 
		И Не ОкноВыбораТипаСвязиПоказано Тогда
		
		ТипСвязиВыбран = Истина;
		
		Если МассивТиповСвязей.Количество() > 0 И Не ЭтоНагрузочноеТестирование Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПередЗаписьюПродолжениеПослеВыбораТипаСвязи",
				ЭтотОбъект,
				ПараметрыЗаписи);
			ПараметрыФормы = Новый Структура("МассивТиповСвязей, Основание", МассивТиповСвязей, Основание);
			ОткрытьФорму(
				"Справочник.ДокументыПредприятия.Форма.ВыборТипаСвязи",
				ПараметрыФормы,,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
				
			Отказ = Истина;	
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	// Заявки на оплату.
	Если ЯвляетсяЗаявкойНаОплату Тогда
		Объект.Контрагент = Неопределено;
		Объект.Контрагенты.Очистить();
		Если ТипЗнч(Получатель) = Тип("СправочникСсылка.Контрагенты")
			И ЗначениеЗаполнено(Получатель) Тогда
			Объект.Контрагенты.Добавить().Контрагент = Получатель;
			Объект.Контрагент = Получатель; // приведение типа
		КонецЕсли;
		Объект.Стороны.Очистить();
		Если ИспользоватьУчетПоОрганизациям Тогда
			СторонаПлательщик = Объект.Стороны.Добавить();
			СторонаПлательщик.Сторона = Объект.Организация;
			СторонаПлательщик.Наименование = ПредопределенноеЗначение("Справочник.НаименованияСторон.Плательщик");
		КонецЕсли;
		СторонаПолучатель = Объект.Стороны.Добавить();
		СторонаПолучатель.Сторона = Получатель;
		СторонаПолучатель.Наименование = ПредопределенноеЗначение("Справочник.НаименованияСторон.Получатель");
	КонецЕсли;
	
	Если ОбязательныеТипыСвязей.Количество() <> 0 И
		ОбязательныеТипыСвязей.Количество() <> ОбязательныеСвязи.Количество() Тогда
		
		СколькоНеЗаполненоСвязей = 
			ОбязательныеТипыСвязей.Количество() - ОбязательныеСвязи.Количество();
			
		ОбязательныеСвязиПараметр = Новый Массив;
		Для Каждого Строка Из ОбязательныеТипыСвязей Цикл
			
			Отбор = Новый Структура();
			Отбор.Вставить("ТипСвязи", Строка.ТипСвязи);
			
			Строки = ОбязательныеСвязи.НайтиСтроки(Отбор);
			Если Строки.Количество() = 0 Тогда
				
				ПараметрыСвязи = Новый Структура("ТипСвязи, СсылкаНа",
					Строка.ТипСвязи, Строка.СсылкаНа);
				
				ОбязательныеСвязиПараметр.Добавить(ПараметрыСвязи);
				
			КонецЕсли;
			
		КонецЦикла;	
		
		ПараметрыОповещенияСвязей = Новый Структура("ОбязательныеСвязи, ПараметрыЗаписи", 
			ОбязательныеСвязиПараметр, ПараметрыЗаписи);
		
		КонтрагентДляОтбора = Неопределено;
		Если ВидДокументаКэш.ВестиУчетСторон Тогда
			Для Каждого Строка Из Объект.Стороны Цикл
				Если ЗначениеЗаполнено(Строка.Сторона) 
					И ТипЗнч(Строка.Сторона) = Тип("СправочникСсылка.Контрагенты") Тогда 
					КонтрагентДляОтбора = Строка.Сторона;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ВестиУчетПоКонтрагентам Тогда 
			Если Объект.Контрагенты.Количество() > 0 Тогда
				КонтрагентДляОтбора = Объект.Контрагенты[0].Контрагент;
			ИначеЕсли ЗначениеЗаполнено(Объект.Контрагент) Тогда 
				КонтрагентДляОтбора = Объект.Контрагент;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыОткрытияФормы = Новый Структура(
			"Документ, ОбязательныеСвязи, Контрагент, Организация, Проект", 
			Объект.Ссылка, ОбязательныеСвязиПараметр,
			КонтрагентДляОтбора, Объект.Организация, Объект.Проект);	
			
		ИмяФормыСозданияСвязи = "";	
		Если СколькоНеЗаполненоСвязей = 1 Тогда
			
			СтрокаПараметров = ОбязательныеСвязиПараметр[0];
			Если ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.ДокументыПредприятия")
				Или ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.ВидыДокументов") Тогда
				ИмяФормыСозданияСвязи = "Справочник.ДокументыПредприятия.Форма.ФормаВыбораДляСозданияСвязи";
			ИначеЕсли ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.Файлы") Тогда
				ИмяФормыСозданияСвязи = "Справочник.Файлы.Форма.ФормаВыбораДляСозданияСвязи";
			ИначеЕсли ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.Мероприятия") Тогда
				ИмяФормыСозданияСвязи = "Справочник.Мероприятия.Форма.ФормаВыбораДляСозданияСвязи";
			ИначеЕсли ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("СправочникСсылка.Проекты") Тогда
				ИмяФормыСозданияСвязи = "Справочник.Проекты.Форма.ФормаВыбораДляСозданияСвязи";
			ИначеЕсли ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда
				ИмяФормыСозданияСвязи = "Документ.ВходящееПисьмо.Форма.ФормаВыбораДляСозданияСвязи";
			ИначеЕсли ТипЗнч(СтрокаПараметров.СсылкаНа) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
				ИмяФормыСозданияСвязи = "Документ.ИсходящееПисьмо.Форма.ФормаВыбораДляСозданияСвязи";
			Иначе	
				ИмяФормыСозданияСвязи = "РегистрСведений.СвязиОбъектов.Форма.ФормаВнешнегоРесурсаДляСозданияСвязи";
			КонецЕсли;	
			
		Иначе	
			ИмяФормыСозданияСвязи = "РегистрСведений.СвязиОбъектов.Форма.СозданиеОбязательныхСвязей";
		КонецЕсли;	
		
		
		Если Не ЭтоНагрузочноеТестирование Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПередЗаписьюПродолжениеПослеВыбораОбязательнойСвязи",
				ЭтотОбъект,
				ПараметрыОповещенияСвязей);
			
			ОткрытьФорму(ИмяФормыСозданияСвязи, 
				ПараметрыОткрытияФормы, ЭтотОбъект,,,,
				ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ЕстьПрошедшиеДаты = Ложь;
	ТекДата = НачалоДня(ТекущаяДата());
	Если ПараметрыЗаписи.Свойство("Регистрация") И Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждениеОПревышенииСрокаОтмены") Тогда
		
		Для Каждого СтрокаДокумент Из СписокНеДействующихДокументов Цикл 		
				
			Если ЗначениеЗаполнено(СтрокаДокумент.ДатаОтмены)
				И СтрокаДокумент.ДатаОтмены < ТекДата Тогда	
				
				ТекстСообщения = НСтр("ru = 'Для некоторых отменяемых документов указана прошедшая дата. 
				|Продолжить регистрацию?'");	
					
				Кнопки = Новый СписокЗначений;
				Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Продолжить регистрацию'"));
				Кнопки.Добавить(КодВозвратаДиалога.Отмена);
				
				Обработчик = Новый ОписаниеОповещения(
					"ПередЗаписьюПродолжениеПослеВопросаОПревышенииСрокаОтмены", 
					ЭтотОбъект,
					ПараметрыЗаписи);
				ПоказатьВопрос(Обработчик, ТекстСообщения, Кнопки);
				
				Отказ = Истина;
				Возврат;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ИзменилсяКлючНастроекОбработки Тогда
		
		ОписаниеВозврата = ПравилаОбработкиКлиент.ПроверитьВозможностьСменыКлючевыхРеквизитов(
			ВидДокументаИзменен, Объект.Ссылка);
		
		Если ОписаниеВозврата.Отказ Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если Отказ Тогда
			ПоказатьПредупреждение(, ОписаниеВозврата.ТекстОшибки);
			Возврат;
		КонецЕсли;		
		
		Если ОписаниеВозврата.НадоЗадатьВопрос 
			И Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждениеОПерезаполненииОбработки") Тогда
			
			ТекстСообщения = ОписаниеВозврата.ТекстВопроса;
				
			Обработчик = Новый ОписаниеОповещения(
				"ПередЗаписьюПродолжениеПослеВопросаОПерезаполненииОбработки", 
				ЭтотОбъект,
				ПараметрыЗаписи);
			ПоказатьВопрос(Обработчик, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
			
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
			
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Не ЗначениеЗаполнено(Объект.Ссылка));
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВопросаОПерезаполненииОбработки(РезультатВопроса, ПараметрыЗаписи) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаписи.Вставить("ПоказаноПредупреждениеОПерезаполненииОбработки", Истина);
		Записать(ПараметрыЗаписи);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВопросаОПревышенииСрокаОтмены(РезультатВопроса, ПараметрыЗаписи) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ПараметрыЗаписи.Вставить("ПоказаноПредупреждениеОПревышенииСрокаОтмены", Истина);
		Записать(ПараметрыЗаписи);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВыбораТипаСвязи(ТипСвязи, ПараметрыЗаписи) Экспорт
	
	ОкноВыбораТипаСвязиПоказано = Истина;
	
	Если ТипЗнч(ТипСвязи) = Тип("СправочникСсылка.ТипыСвязей")
		И ЗначениеЗаполнено(ТипСвязи) Тогда
		
		ТипСвязиПриСозданииНаОснованииВнутреннегоДокумента = ТипСвязи;
		
		Отбор = Новый Структура();
		Отбор.Вставить("ТипСвязи", ТипСвязиПриСозданииНаОснованииВнутреннегоДокумента);
		
		СтрокиСвязи = ОбязательныеСвязи.НайтиСтроки(Отбор);
		СтрокиТипыСвязи = ОбязательныеТипыСвязей.НайтиСтроки(Отбор);
		
		Если СтрокиСвязи.Количество() = 0 И СтрокиТипыСвязи.Количество() <> 0 Тогда
			
			НоваяСтрока = ОбязательныеСвязи.Добавить();
			НоваяСтрока.ТипСвязи = ТипСвязиПриСозданииНаОснованииВнутреннегоДокумента;
			НоваяСтрока.СвязанныйОбъект = Основание;
			НоваяСтрока.НужноЗаписать = Ложь;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеПослеВыбораОбязательнойСвязи(Результат, Параметры) Экспорт 
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Массив") Тогда
		
		ВыбранныеОбязательныеСвязи = Результат; // массив
		
		Для Каждого Строка Из ВыбранныеОбязательныеСвязи Цикл
		
			Отбор = Новый Структура();
			Отбор.Вставить("ТипСвязи", Строка.ТипСвязи);
			Отбор.Вставить("СсылкаНа", Строка.СсылкаНа);
			
			Строки = ОбязательныеСвязи.НайтиСтроки(Отбор);
			Если Строки.Количество() = 1 Тогда
				Строки[0].СвязанныйОбъект = Строка.СвязанныйОбъект;
			ИначеЕсли Строки.Количество() = 0 Тогда
				
				НоваяСтрока = ОбязательныеСвязи.Добавить();
				НоваяСтрока.ТипСвязи = Строка.ТипСвязи;
				НоваяСтрока.СсылкаНа = Строка.СсылкаНа;
				НоваяСтрока.СвязанныйОбъект = Строка.СвязанныйОбъект;
				НоваяСтрока.Комментарий = Строка.Комментарий;
				НоваяСтрока.НужноЗаписать = Истина;
				
			КонецЕсли;	
		
		КонецЦикла;
		
		Записать(Параметры.ПараметрыЗаписи);
		
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ВидДокументаКэш.ВестиУчетСторон
		И Не ЯвляетсяЗаявкойНаОплату
		И ПолучитьФункциональнуюОпцию("ИспользоватьРеквизитыУчетаПоКонтрагентам",
			Новый Структура("ВидДокумента", Объект.ВидДокумента)) 
		И Не (ВидДокументаКэш.ЯвляетсяОбращениемОтГраждан 
			И ВидОбращения = Перечисления.ВидыОбращенийГраждан.Анонимное) Тогда
		Если НесколькоКонтрагентов Тогда 
			
			Если Объект.Контрагенты.Количество() = 0 Тогда
				Если ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией Тогда
					ТекстСообщения = НСтр("ru = 'Не введено ни одной строки в список ""Получатели""'");
				Иначе
					ТекстСообщения = НСтр("ru = 'Не введено ни одной строки в список ""Контрагенты""'");
				КонецЕсли;
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.Контрагенты",,Отказ);
				
			Иначе
				
				Для Каждого Стр Из Объект.Контрагенты Цикл
					
					Если Не ЗначениеЗаполнено(Стр.Контрагент) Тогда
						
						Если ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией Тогда
						
							ТекстОшибки = СтрШаблон(
								НСтр("ru = 'Не заполнена колонка ""Получатель"" в строке %1 списка ""Получатели""'"),
								Объект.Контрагенты.Индекс(Стр)+1);
							
						Иначе

							ТекстОшибки = СтрШаблон(
								НСтр("ru = 'Не заполнена колонка ""Контрагент"" в строке %1 списка ""Контрагенты""'"),
								Объект.Контрагенты.Индекс(Стр)+1);
									
						КонецЕсли;		
						
						ОбщегоНазначения.СообщитьПользователю(
							ТекстОшибки,,"Объект.Контрагенты["+Объект.Контрагенты.Индекс(Стр)+"].Контрагент",,Отказ);
						
						
					КонецЕсли;	
					
				КонецЦикла;		
					
			КонецЕсли;
			
		Иначе
			Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда 
				ТекстСообщения = НСтр("ru = 'Поле ""Контрагент"" не заполнено'");
				
				Если ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией Тогда
					ТекстСообщения = НСтр("ru = 'Поле ""Отправитель"" не заполнено'");
				КонецЕсли;

				Если ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией Тогда
					ТекстСообщения = НСтр("ru = 'Поле ""Получатель"" не заполнено'");
				КонецЕсли;
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.Контрагент",,Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда 
		
		ВестиУчетПоСтатьямДДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, 
			"ВестиУчетПоСтатьямДДС");
		Если ВестиУчетПоСтатьямДДС 
			И Не НеПроверятьЗаполнениеСтатейДДС Тогда
			Если СтатьиДвиженияДенежныхСредств.Количество() = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Не выбрана статья движения денежных средств'");
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, 
					"ПредставлениеСтатейДДС",, Отказ);
			Иначе
				ИтогСумма = 0;
				Для Каждого Строка из СтатьиДвиженияДенежныхСредств Цикл
					ИтогСумма = ИтогСумма + Строка.Сумма;
				КонецЦикла;
				Если Объект.Сумма <> ИтогСумма Тогда
					ТекстОшибки = НСтр("ru = 'Сумма не соответствует ее расшифровке по статьям движения денежных средств'");
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "Сумма",, Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбязательныеТипыСвязей.Количество() <> 0 И
		ОбязательныеТипыСвязей.Количество() <> ОбязательныеСвязи.Количество()
		И Не НагрузочноеТестирование.ЭтоНагрузочноеТестирование() Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указаны обязательные связи'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		
	КонецЕсли;
	
	ТекстСообщения = "";
	Если Делопроизводство.ПолучитьЗапретСозданияДокументовНеПоШаблону(Объект.Ссылка, Объект.ВидДокумента, 
			ПараметрШаблонДокумента, ТекстСообщения) Тогда
		
		Если Не НагрузочноеТестирование.ЭтоНагрузочноеТестирование() Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект.ВидДокумента", , Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	РаботаСКорреспонденцией.ПроверкаЗаполненияФормыНаСервере(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	РаботаСОбращениями.ПроверкаЗаполненияФормыНаСервере(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка));  
	ПерваяЗапись = ПараметрыЗаписи.ЭтоНовыйОбъект;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ИнтерактивнаяЗапись", Истина);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ТипСвязиПриСозданииНаОснованииДокумента",
		ТипСвязиПриСозданииНаОснованииВнутреннегоДокумента);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Основание", Основание);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификатор);
	
	Для Каждого Строка Из ТекущийОбъект.Товары Цикл 
		Строка.Номер = Строка.НомерСтроки;
	КонецЦикла;
	
	НовыйДокумент = Объект.Ссылка.Пустая();
	
	// Обработка рабочей группы
	Если НовыйДокумент Тогда
		// для заполненного документа, обновим рабочую группу по заполненным реквизитам.
		РаботаСРабочимиГруппами.ДобавитьУчастниковВРабочуюГруппуДокументаИзШаблона(ЭтотОбъект);
	КонецЕсли;
	РаботаСРабочимиГруппами.ОбъектПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
	// Срок действия
	СрокДействияПередЗаписьюНаСервере(ТекущийОбъект, ПараметрыЗаписи);
	
	Если ТекущийОбъект.Стороны.Количество() > 0 И Не ВидДокументаКэш.ВестиУчетСторон Тогда 
		ТекущийОбъект.Стороны.Очистить();
	КонецЕсли;
	
	Если ТекущийОбъект.Контрагенты.Количество() > 0
		И Не ВестиУчетПоКонтрагентам
		И Не ВидДокументаКэш.ВестиУчетСторон Тогда 
		ТекущийОбъект.Контрагент = Неопределено;
		ТекущийОбъект.КонтактноеЛицо = Неопределено;
		ТекущийОбъект.ПодписалОтКонтрагента = Неопределено;
		ТекущийОбъект.Контрагенты.Очистить();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ПередЗаписьюНаСервереДокумент.
	СПАРКРискиПереопределяемый.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ПередЗаписьюНаСервереДокумент.
	
	// Рабочая группа
	РабочаяГруппаТаблицаКоличество = РабочаяГруппаТаблица.Количество();
	Для Инд = 1 По РабочаяГруппаТаблицаКоличество Цикл
		Строка = РабочаяГруппаТаблица[РабочаяГруппаТаблицаКоличество - Инд];
		Если Не ЗначениеЗаполнено(Строка.Участник) Тогда 
			РабочаяГруппаТаблица.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоУчастниковРабочейГруппы = РабочаяГруппаТаблица.Количество();
	
	НоваяРабочаяГруппа = РабочаяГруппаТаблица.Выгрузить();
	РабочаяГруппаДобавить = Новый Массив;
	РабочаяГруппаУдалить = Новый Массив;
	
	// Формирование списка удаленных участников рабочей группы
	Для Каждого Эл Из ИсходнаяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для Каждого Эл2 Из НоваяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.Изменение = Эл2.Изменение Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не Найден Тогда
			РабочаяГруппаУдалить.Добавить(
				Новый Структура("Участник, Изменение",
					Эл.Участник,
					Эл.Изменение));
		КонецЕсли;
		
	КонецЦикла;
	
	// Формирование списка добавленных участников рабочей группы
	Для Каждого Эл Из НоваяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для Каждого Эл2 Из ИсходнаяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.Изменение = Эл2.Изменение Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не Найден Тогда
			РабочаяГруппаДобавить.Добавить(
				Новый Структура("Участник, Изменение",
					Эл.Участник,
					Эл.Изменение));
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаУдалить", РабочаяГруппаУдалить);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаДобавить", РабочаяГруппаДобавить);
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда 
		Если Не ПараметрыЗаписи.Свойство("МассивСостояний") Тогда 
			СтруктураСостояния = Новый Структура("Состояние, Установил, Период, НачальноеСостояние", 
				Перечисления.СостоянияДокументов.Проект, 
				Сотрудники.ОсновнойСотрудник(), 
				ТекущаяДатаСеанса(),
			    Перечисления.СостоянияДокументов.ПустаяСсылка());
				
			МассивСостояний = Новый Массив;	
			МассивСостояний.Добавить(СтруктураСостояния);
			
			ПараметрыЗаписи.Вставить("МассивСостояний", МассивСостояний);
		КонецЕсли;
	КонецЕсли;
	
	// Регистрация
	Если ПараметрыЗаписи.Свойство("Регистрация") Тогда
		Если ПараметрыЗаписи.Свойство("ПроверкаНеобходимостиУказатьСвязанныйДокументПройдена")
			И Не ПараметрыЗаписи.ПроверкаНеобходимостиУказатьСвязанныйДокументПройдена Тогда 
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если Не ПроверитьВозможностьРегистрации(ТекущийОбъект) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ЭтоРегистрация", Истина);
		
		СтруктураСостояния = Новый Структура("Состояние, Установил, Период, НачальноеСостояние", 
			Перечисления.СостоянияДокументов.Зарегистрирован, 
			Сотрудники.ОсновнойСотрудник(), 
			ТекущаяДатаСеанса(),
			Перечисления.СостоянияДокументов.ПустаяСсылка());
				
		МассивСостояний = Новый Массив;	
		МассивСостояний.Добавить(СтруктураСостояния);
		ПараметрыЗаписи.Вставить("МассивСостояний", МассивСостояний);
		
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
	
	РаботаСКорреспонденцией.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	Если ВидДокументаКэш.ВестиУчетПоСтатьямДДС Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СтатьиДвиженияДенежныхСредств",
			СтатьиДвиженияДенежныхСредств);
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("СоздатьСвязьДляНумерации",
		СоздатьСвязьДляНумерации);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("СвязанныйДокументДляНумерации",
		СвязанныйДокументДляНумерации);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ТипСвязиНумератора",
		ТипСвязиНумератора);
	СоздатьСвязьДляНумерации = Ложь;
	
	
	// Если это документ МЭДО и пользователь снимает регистрацию, то нужно предложить создать уведомление об отказе
	// в регистрации:
	Если ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией
		И Не ТекущийОбъект.Ссылка.Пустая()
		И Не ЗначениеЗаполнено(Объект.РегистрационныйНомер)
		И МЭДОПовтИсп.НужноСоздаватьУведомления()
		И МЭДОПереопределяемый.ЭтоДокументМЭДО(ЭтотОбъект, Перечисления.НаправленияСообщенийМЭДО.Входящее)
		И ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект.Ссылка, "РегистрационныйНомер"))
		Тогда
		// У записанного объекта была регистрация, а сейчас она снята, 
		// значит надо предложить пользователю создать уведомление об отказе в регистрации:
		ОтмененаРегистрацияДокумента = Истина;
		ЕстьДоступКМЭДО = МЭДОПереопределяемый.ЕстьДоступКРаботеСМЭДО();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(ПерепискаПоПредмету) И НачальныйПерепискаПоПредмету <> ПерепискаПоПредмету Тогда 
		ОснованиеПереписки = ПерепискаПоПредмету;	
	КонецЕсли;

	// Установка связей
	РаботаСОбращениями.ЗафиксироватьСвязанныеДокументыПоВопросамОбращения(ЭтотОбъект, ТекущийОбъект.Ссылка);
	СвязиОбъектов.УстановитьСвязь(ТекущийОбъект.Ссылка, 
		НачальныйПерепискаПоПредмету, ПерепискаПоПредмету, Справочники.ТипыСвязей.ПерепискаПоПредмету);
	
	Если ЗначениеЗаполнено(Параметры.ПисьмоОснование) Тогда
		СвязиОбъектов.УстановитьСвязь(ТекущийОбъект.Ссылка, 
			Неопределено, Параметры.ПисьмоОснование, Справочники.ТипыСвязей.НаОснованииПисьма);
	КонецЕсли;
	
	ЭтоРегистрация = ПараметрыЗаписи.Свойство("Регистрация");	
	ДокументЗарегистрированАргумент = ЗначениеЗаполнено(ТекущийОбъект.РегистрационныйНомер);	
		
	СвязиОбъектов.УстановитьДелаетНеДействующим(ТекущийОбъект.Ссылка, 
		СписокНеДействующихДокументовНачальное, СписокНеДействующихДокументов, 
		Справочники.ТипыСвязей.ДелаетНеДействующим,,,,
		ЭтоРегистрация, ДокументЗарегистрированАргумент);
		
	ВремТабл = СписокНеДействующихДокументов.Выгрузить();
	СписокНеДействующихДокументовНачальное.Загрузить(ВремТабл);
	
	ТекДата = НачалоДня(ТекущаяДатаСеанса());
	
	Для Каждого СтрокаДокумент Из СписокНеДействующихДокументов Цикл
			
		УстановитьРеквизит = Истина;
		
		Если ЗначениеЗаполнено(СтрокаДокумент.ДатаОтмены) Тогда
			
			УстановитьРеквизит = Ложь; 
			
			// дата в прошлом, и идет регистрация	
			Если СтрокаДокумент.ДатаОтмены <= ТекДата И СтрокаДокумент.Источник = "СвязиОбъектов" Тогда	
				УстановитьРеквизит = Истина; 
			КонецЕсли;	
			
			// если дата в будущем - не пишем
			
		КонецЕсли;	
		
		Если УстановитьРеквизит Тогда
			
			СвязиОбъектов.УстановитьРеквизитыПриДобавленииСвязи(СтрокаДокумент.Документ,,
				Справочники.ТипыСвязей.НеДействуетВСоответствии, ДокументЗарегистрированАргумент,
				СтрокаДокумент.ДатаОтмены);
			
		КонецЕсли;
		
	КонецЦикла;	
	
	// пишем ранее подготовленные обязательные связи
	Для Каждого Строка Из ОбязательныеСвязи Цикл
		
		Если Строка.НужноЗаписать Тогда
			
			Попытка
				
				Если Строка.СвязатьСТекущимДокументом Тогда 
					// Связать существующий объект с текущим документом
					СвязиОбъектов.СоздатьСвязь(
						Строка.СвязанныйОбъект, 
						ТекущийОбъект.Ссылка,
						Строка.ТипСвязи,,,
						Строка.Комментарий);
				Иначе
					// Связать текущий документ с существующим
					СвязиОбъектов.СоздатьСвязь(
						ТекущийОбъект.Ссылка,
						Строка.СвязанныйОбъект,
						Строка.ТипСвязи,,,
						Строка.Комментарий);
				КонецЕсли;
					
				Строка.НужноЗаписать = Ложь;
				
			Исключение
				ОбязательныеСвязи.Удалить(Строка);
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЕсли;
	
	КонецЦикла;
	
	// Изменение состояния
	Если ПараметрыЗаписи.Свойство("МассивСостояний") И ТипЗнч(ПараметрыЗаписи.МассивСостояний) = Тип("Массив") Тогда 
		ИзменитьСостояние(ТекущийОбъект.Ссылка, ПараметрыЗаписи.МассивСостояний);
	КонецЕсли;
	
	СвязиПрочитаны = Ложь;
	// Авансовый отчет.
	Если ЗначениеЗаполнено(АвансовыйОтчетПриЧтении)
		И АвансовыйОтчет <> АвансовыйОтчетПриЧтении Тогда
		ЗаполнитьСвязи();
		СвязиПрочитаны = Истина;
		СвязиОбъектов.УдалитьСвязь(ТекущийОбъект.Ссылка,
			АвансовыйОтчетПриЧтении,
			Справочники.ТипыСвязей.АвансовыйОтчет);
	КонецЕсли;
	Если ЯвляетсяЗаявкойНаОплату
		И (ТипЗнч(Получатель) = Тип("СправочникСсылка.Пользователи")
			Или ТипЗнч(Получатель) = Тип("СправочникСсылка.Сотрудники")) Тогда
		Если ЗначениеЗаполнено(АвансовыйОтчет) Тогда
			Если Не СвязиПрочитаны Тогда
				ЗаполнитьСвязи();
				СвязиПрочитаны = Истина;
			КонецЕсли;
			
			СвязиОбъектов.УстановитьСвязь(ТекущийОбъект.Ссылка, 
				АвансовыйОтчетПриЧтении,
				АвансовыйОтчет,
				Справочники.ТипыСвязей.АвансовыйОтчет);
		КонецЕсли;
		ЗаписьОбязательства = РегистрыСведений.ОбязательстваПоАвансовымОтчетам.СоздатьМенеджерЗаписи();
		ЗаписьОбязательства.ЗаявкаНаОплату = ТекущийОбъект.Ссылка;
		ЗаписьОбязательства.Предоставлен = АвансовыйОтчетПредоставлен;
		ЗаписьОбязательства.Требуется = АвансовыйОтчетТребуется;
		ЗаписьОбязательства.СрокПредоставления = СрокПредоставленияАвансовогоОтчета;
		ЗаписьОбязательства.Записать();
	ИначеЕсли АвансовыйОтчетТребуется Тогда
		ЗаписьОбязательства = РегистрыСведений.ОбязательстваПоАвансовымОтчетам.СоздатьМенеджерЗаписи();
		ЗаписьОбязательства.ЗаявкаНаОплату = ТекущийОбъект.Ссылка;
		ЗаписьОбязательства.Удалить();
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	ГотовностьКОтправкеМЭДО_Сервер(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НовыйДокумент Тогда
		Если ЗначениеЗаполнено(ПараметрыОповещения) 
			И ПараметрыОповещения.Свойство("ИмяСобытия")
			И ПараметрыОповещения.ИмяСобытия = "СозданДокументПредприятияНаОснованииПисьма" Тогда
			ПисьмоСсылка = ПараметрыОповещения.ПараметрСобытия;
			ПисьмоОбъект = ПисьмоСсылка.ПолучитьОбъект();
			ПисьмоОбъект.Предмет = Объект.Ссылка;
			ПисьмоОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если НовыйДокумент Тогда
		РаботаСШаблонамиДокументовСервер.ЗаписатьИспользованиеШаблона(Объект.Шаблон);
	КонецЕсли;
	
	// Протоколирование работы пользователей
	ПротоколированиеРаботыСотрудников.ЗаписатьСоздание(Объект.Ссылка, НовыйДокумент);
	ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(Объект.Ссылка);
	
	// Автозаполнение файлов
	ИзменениеФайловMSWordНаСервере = Константы.ИзменениеФайловMSWordТолькоНаСервере.Получить();
	ИспользоватьАвтозаполнениеФайлов = ПолучитьФункциональнуюОпцию("ИспользоватьАвтозаполнениеФайлов");
	ИспользоватьШтрихкоды = ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды");
	
	ЕстьДобавленныеФайлы = Ложь;
	
	// Создание файлов при сохранении нового документа
	Если ФайлыДобавленные.Количество() > 0 Тогда
		
		ДанныеДляЗаполненияФайловНаКлиенте.Очистить();
		Индекс = ФайлыДобавленные.Количество() - 1;
        Пока Индекс >= 0 Цикл
        	
			ФайлТаблицы = ФайлыДобавленные[Индекс];
			 
			Если Не ЭтоАдресВременногоХранилища(ФайлТаблицы.ПолныйПуть)
				И Не ЭтоАдресВременногоХранилища(ФайлТаблицы.Адрес) Тогда
				Индекс = Индекс - 1;
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ФайлТаблицы.Условие) Тогда
				
				Если Не РаботаСАлгоритмамиПроверки.АлгоритмПоПредметуВыполняется(
					Объект.Ссылка, ФайлТаблицы.Условие) Тогда
					ФайлыДобавленные.Удалить(Индекс);
					Индекс = Индекс - 1;
					КоличествоФайлов = КоличествоФайлов - 1;
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			ЕстьДобавленныеФайлы = Истина;
			
			ХранитьВерсииНовыйФайл = Истина;
			ХранилищеФайла = Неопределено;
			ТекстХранилище = Неопределено;
			СсылкаНаВерсиюИсточник = Неопределено;
			
			СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
			ВладелецФайла = Объект.Ссылка;
			
			ДанныеФайла = Неопределено;
			
			АдресФайлаСтрока = "";
			
			Если ЭтоАдресВременногоХранилища(ФайлТаблицы.ПолныйПуть) Тогда
				
				АдресФайлаСтрока = ФайлТаблицы.ПолныйПуть;
				
				ДанныеФайла = ПолучитьИзВременногоХранилища(ФайлТаблицы.ПолныйПуть);
				Источник = ДанныеФайла.Ссылка;
				ХранитьВерсииНовыйФайл = Источник.ХранитьВерсии;
				Расширение = Источник.ТекущаяВерсия.Расширение;
				
				Если ТипЗнч(Объект.Ссылка) <> ТипЗнч(ДанныеФайла.Владелец) Или ФайлТаблицы.ДобавленИзШаблона Тогда 
					ХранитьВерсииНовыйФайл = Истина;
				КонецЕсли;
				
				ТекстХранилище = РегистрыСведений.ТекстыВерсийФайлов.ПолучитьТекстХранилище(Источник.ТекущаяВерсия);
					
				Если Источник.ТекущаяВерсия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
					ХранилищеФайла = РаботаСФайламиВызовСервера.ПолучитьХранилищеФайлаИзИнформационнойБазы(Источник.ТекущаяВерсия);
				КонецЕсли;
				
				СведенияОФайле.Комментарий = Источник.Описание;
				СведенияОФайле.ИмяБезРасширения = ФайлТаблицы.Наименование; //Источник.ПолноеНаименование;
				СсылкаНаВерсиюИсточник = Источник.ТекущаяВерсия;
				Размер = Источник.ТекущаяВерсия.Размер;
					
				ДатаМодификацииФайла = Источник.ТекущаяВерсия.ДатаМодификацииФайла;
				ДатаМодификацииУниверсальная = Источник.ТекущаяВерсия.ДатаМодификацииУниверсальная;
				
				ПолноеНаименование = Источник.ПолноеНаименование;
					
			ИначеЕсли ЭтоАдресВременногоХранилища(ФайлТаблицы.Адрес) Тогда  
				
				АдресФайлаСтрока = ФайлТаблицы.Адрес;
				
				ХранилищеФайла = ФайлТаблицы.Адрес; // адрес во временном хранилище
						
				СведенияОФайле.ИмяБезРасширения = ФайлТаблицы.Наименование;
				Расширение = ФайлТаблицы.Расширение;
				
				ПолноеНаименование = ФайлТаблицы.Наименование;
						
				Размер = ФайлТаблицы.Размер;

				ДатаМодификацииФайла = ТекущаяДата();
				ДатаМодификацииУниверсальная = ТекущаяДата();
						
			КонецЕсли;
			
			СведенияОФайле.ХранитьВерсии = ХранитьВерсииНовыйФайл;
			
			НачатьТранзакцию();
			Попытка
				Приемник = РаботаСФайламиВызовСервера.СоздатьФайл(ВладелецФайла, СведенияОФайле);
				
				Если ЗначениеЗаполнено(ФайлТаблицы.ШаблонОснованиеДляСоздания)
						И ЗначениеЗаполнено(ПараметрШаблонДокумента) Тогда
					РегистрыСведений.ФайлыСозданныеПоШаблону.ЗанестиИнформациюОФайле(Приемник, Истина);//СозданПоШаблону
				КонецЕсли;
				
				СведенияОФайле.Размер = Размер;
				СведенияОФайле.РасширениеБезТочки = Расширение;
				СведенияОФайле.АдресВременногоХранилищаФайла = ХранилищеФайла;
				СведенияОФайле.АдресВременногоХранилищаТекста = ТекстХранилище;
				СведенияОФайле.СсылкаНаВерсиюИсточник = СсылкаНаВерсиюИсточник;
				СведенияОФайле.ВремяИзменения = ДатаМодификацииФайла;
				СведенияОФайле.ВремяИзмененияУниверсальное = ДатаМодификацииУниверсальная;

				Версия = РаботаСФайламиВызовСервера.СоздатьВерсию(Приемник, СведенияОФайле);
				
				РаботаСФайламиВызовСервера.ОбновитьВерсиюВФайле(Приемник, Версия, ТекстХранилище);

				НовыйФайл = Приемник;
				РаботаСЭП.ЗаписатьЭПФайлу(НовыйФайл, ФайлыЭП, АдресФайлаСтрока, ЭтаФорма);
				
				Если ФайлТаблицы.ДобавленИзШаблона Тогда	
					РаботаСФайламиВызовСервера.ЗаписатьОригинальноеИмяФайла(Приемник, ФайлТаблицы.Наименование);
				КонецЕсли;	
				РегистрыСведений.РолиФайловДокументов.ЗаписатьРольФайла(Приемник, ФайлТаблицы.РольФайла); 
				
				// тут заполним порядок из шаблона.
				Если ФайлТаблицы.Порядок <> 0 Тогда 
					РаботаСФайламиВызовСервера.ЗаписатьПорядокФайла(Приемник, ФайлТаблицы.Порядок);
				КонецЕсли;
				
				ИОМВладелеца = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
					Тип("СправочникСсылка.ДокументыПредприятия"));
				ПараметрыРаспознавания = РаботаСФайламиВызовСервера.ПодготовитьПараметрыРаспознавания(ИОМВладелеца);
				Если ПараметрыРаспознавания <> Неопределено И ПараметрыРаспознавания.Свойство("РаспознатьПослеДобавления") И ПараметрыРаспознавания.РаспознатьПослеДобавления Тогда
					РаспознатьНемедленно = Ложь;
					ОписаниеОшибки = "";
					РаспознанныйТекст = "";
					РаботаСФайламиВызовСервера.РаспознатьФайл(Приемник, ПараметрыРаспознавания, ОписаниеОшибки,
						РаспознанныйТекст, УникальныйИдентификатор,  РаспознатьНемедленно);
				КонецЕсли; 
					
				Если КопироватьПодписиЭП Тогда
					
					ВерсияОбъект = Приемник.ТекущаяВерсия.ПолучитьОбъект();
					
					ЧислоПодписей = РаботаСЭП.СкопироватьВсеПодписи(Источник.ТекущаяВерсия, Приемник.ТекущаяВерсия);
					
					Если ЧислоПодписей <> 0 Тогда
						ФайлОбъект = Приемник.ПолучитьОбъект();
						ФайлОбъект.ПодписанЭП = Истина;
						ФайлОбъект.Записать();
						
						ВерсияОбъект.ПодписанЭП = Истина;
						ВерсияОбъект.Записать();
					КонецЕсли;
				КонецЕсли;
				
				Если ФайлТаблицы.ДобавленИзШаблона Тогда
					ФайлОбъект = Приемник.ПолучитьОбъект();
					ФайлОбъект.ШаблонОснованиеДляСоздания = ФайлТаблицы.ШаблонОснованиеДляСоздания;
					Если ФайлОбъект.ПодписанЭП Тогда
						ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
					КонецЕсли;
					ФайлОбъект.Записать();	
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеФайла) И ДанныеФайла.Зашифрован Тогда
					
					ФайлОбъект = Приемник.ПолучитьОбъект();
					ФайлОбъект.Зашифрован = Истина;
					
					ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
					ФайлОбъект.Записать();
					
					ВерсияОбъект = Приемник.ТекущаяВерсия.ПолучитьОбъект();
					ВерсияОбъект.Зашифрован = Истина;
					ВерсияОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
					ВерсияОбъект.Записать();
					
					РегистрыСведений.СертификатыШифрования.СкопироватьСертификатыШифрования(
						Источник.Ссылка, ФайлОбъект.Ссылка);
					
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
			
			// Автозаполнение файлов
			ПодготовитьТаблицуФайловДляАвтозаполнения(Источник, Приемник, ФайлТаблицы,
				ИспользоватьАвтозаполнениеФайлов, ИзменениеФайловMSWordНаСервере, ИспользоватьШтрихкоды);
			
			Если Источник = ТекущийФайлВСпискеДобавленныхДляРедактирования Тогда
				ТекущийФайлВСпискеДобавленныхДляРедактирования = Приемник;
			КонецЕсли;
			
			Если Источник = ТекущийФайлВСпискеДобавленныхДляОткрытия
				И ЗначениеЗаполнено(ТекущийФайлВСпискеДобавленныхДляОткрытия) Тогда
				ТекущийФайлВСпискеДобавленныхДляОткрытия = Приемник;
			КонецЕсли;

			Если ФайлТаблицы.Адрес = ТекущийФайлВСпискеДобавленныхДляОткрытия
				И ЗначениеЗаполнено(ТекущийФайлВСпискеДобавленныхДляОткрытия) Тогда
				ТекущийФайлВСпискеДобавленныхДляОткрытия = Приемник;
			КонецЕсли;
			
			// Установка признака оригинала
			Если ВестиУчетСканКопийОригиналовДокументов
				И Не ФайлТаблицы.ДобавленИзШаблона 
				И ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(Приемник.ТекущаяВерсияРасширение) Тогда 
				
				Делопроизводство.СохранитьСведенияОбОригиналеФайла(Приемник, ВладелецФайла);
				
				Если Элементы.Обзор.Видимость Тогда 
					ЭлементГруппаНадписьОтсутствуетОригинал = Элементы.ГруппаНадписьОтсутствуетОригинал;
				Иначе
					ЭлементГруппаНадписьОтсутствуетОригинал = Элементы.ГруппаНадписьОтсутствуетОригиналСоздание;
				КонецЕсли;
				Если ЭлементГруппаНадписьОтсутствуетОригинал.Видимость Тогда 
					ЭлементГруппаНадписьОтсутствуетОригинал.Видимость = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			ФайлыДобавленные.Удалить(Индекс);
			Индекс = Индекс - 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Файлы
 	Делопроизводство.СохранитьСведенияОбОригиналахФайловИзКарточки(Файлы, Объект.Ссылка,
		ОригиналПолученУстановленоВручную);
	Если НовыйДокумент Тогда 
		ЗаполнитьСписокФайлов(Истина);
	КонецЕсли;	
	Делопроизводство.ОбновитьСведенияОПолученииОригинала(ЭтаФорма);
	
	// Заполнение по шаблону
	Элементы.ФормаЗаполнитьПоШаблону.Видимость = Ложь;
	
	//Заполнение Корреспонденции
	Документы.Корреспонденция.ЗаполнитьДанныеНаФормеДокумента(ЭтотОбъект);
		
	// Шаблоны автозапуска
	ЗаполнитьШаблоныДляАвтоЗапуска();
	
	// Срок действия
	СрокДействияПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи);
	
	// Файлы
	Если Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица Тогда
		Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаСписокСоздание;
	КонецЕсли;
	
	// Комплекты документов
	Если ЯвляетсяКомплектом Или НачальныеЗначенияРеквизитов[0].ЯвляетсяКомплектом Тогда
		РаботаСКомплектамиДокументовСервер.СохранитьСоставКомплекта(ЭтотОбъект);
	КонецЕсли;
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ОбъектПослеЗаписиНаСервере(ЭтотОбъект, ПараметрыЗаписи);
	
	// Формирование исходной рабочей группы
	УчастникиРабочейГруппы = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	ИсходнаяРабочаяГруппа.Очистить();
	Для Каждого Эл Из УчастникиРабочейГруппы Цикл
		
		Строка = ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник; 
		Строка.Изменение = Эл.Изменение;
		
	КонецЦикла;
	
	// Категории данных
	Если ИспользоватьКатегорииДанных Тогда
		РаботаСКатегориямиДанных.ЗаписатьСписокКатегорийУОбъекта(СписокКатегорийДанных, Объект.Ссылка);
		Если ИспользоватьАвтоматическуюКатегоризациюДанных Тогда
			АвтоматическаяКатегоризацияВыполнена = РаботаСКатегориямиДанных.ПолучитьФлагВыполненияАвтоматическойКатегоризации(Объект.Ссылка);
			Если АвтоматическаяКатегоризацияВыполнена Тогда
				Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтоКатегоризацияВыполнена;
			Иначе
				Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтоКатегоризацияНеВыполнена;
			КонецЕсли;
		Иначе
			Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
		КонецЕсли;
		Если ИспользоватьПроверкуКатегорий Тогда
			КатегорииПроверены = РаботаСКатегориямиДанных.ПолучитьФлагПроверкиКатегорийОбъекта(Объект.Ссылка);
			Если КатегорииПроверены Тогда
				Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииПроверены;
			Иначе
				Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииНеПроверены;
			КонецЕсли;
		Иначе
			Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	НавигационнаяСсылкаДокумента = ПолучитьНавигационнуюСсылку(ТекущийОбъект.Ссылка);
	ПредставлениеОбъекта = Строка(ТекущийОбъект.Ссылка);
	
	Если ДокументооборотПраваДоступа.ЕстьПравоРегистрации(ТекущийОбъект.Ссылка) Тогда
		Элементы.РегистрационныйНомер.ТолькоПросмотр = Ложь;	
		Элементы.ДатаРегистрации.ТолькоПросмотр = Ложь;
	Иначе 
		Элементы.РегистрационныйНомер.ТолькоПросмотр = Истина;	
		Элементы.ДатаРегистрации.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// Т.к. запись прошла, заполним новые начальные значения реквизитов. Выполнять в самом конце транзакции.
	ЗапомнитьЗначенияРеквизитов();
	
	Если НовыйДокумент Тогда
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	КонецЕсли;
	
	Если ИзменилсяКлючНастроекОбработки Или НовыйДокумент Тогда
		// Сначала прочитаем все что есть
		Если Не ДействияПоказыватьВсе Тогда
			ДействияПоказыватьВсе = Не ДействияПоказыватьВсе;
			Элементы.ДействияПоказатьВсе.Пометка = ДействияПоказыватьВсе;
		
			ПрочитатьДействия();
			СрокИсполненияПриОткрытии = Объект.СрокИсполнения
		КонецЕсли;
		ОбновитьПараметрыВидаОбъекта();
		ПравилаОбработкиСервер.ЗаполнитьДействияВФормеПредмета(
			ЭтотОбъект,
			ПараметрыВидаОбъекта,
			ТекущийОбъект);
		ИзменилсяКлючНастроекОбработки = Ложь;
		ОбработкаПредставление = Формат(КоличествоДействий, "");
		ДействияСервер.УстановитьВидимостьКомандУправленияОбработкой(
			ТекущийОбъект.Ссылка, Элементы, ВидДокументаКэш, СостояниеОбработки);
	КонецЕсли;
	
	// ЭП
	Если КопироватьПодписиЭП Тогда
		Источник = Параметры.ДокументОснование;
		Приемник = Объект.Ссылка;
		ДокументОбъект = Объект.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ПодписанЭП = Истина;
		
		РаботаСЭП.СкопироватьВсеПодписи(Источник.Ссылка, Приемник);
		
		ДокументОбъект.Записать();
		ПрочитатьУстановитьДоступностьПолейЗаполнитьПодписи();

	ИначеЕсли ДокументОснованиеПодписан Тогда	
		ДокументОбъект = Объект.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ПодписанЭП = Ложь;
		ДокументОбъект.Записать();
		Прочитать();
	КонецЕсли;
	
	Если Не НовыйДокумент И СрокИсполненияПриОткрытии <> Объект.СрокИсполнения Тогда
		ПрочитатьДействия();
	КонецЕсли;
	СрокИсполненияПриОткрытии = Объект.СрокИсполнения;
	
	НастроитьФормуПоСостояниюДела();
	ЗаполнитьПоляУтвердилПодписалНаСервере();
	ЗаполнитьСвязи();
	
	ПолучитьИнструкции();
	СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(
		ТекущийОбъект.Ссылка);
	ДокументПодписан = ДействияСервер.ДокументПодписан(Объект.Ссылка);	
	ПолучитьОбзорДокумента();
	КлючЗаписи = Делопроизводство.ПолучитьКлючЗаписиРегистраДанныеДокументов(ТекущийОбъект);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// Работа со сторонами
	РаботаСПодписямиДокументов.ЗаполнитьТаблицуСторон(ЭтотОбъект);
	Если ВидДокументаКэш.ВестиУчетСторон Тогда
		УстановитьУсловноеОформление();
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ПослеЗаписиНаСервере.
	СПАРКРискиПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ПослеЗаписиНаСервере.
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("НадоПереименоватьФайлыПоШаблону") 
		И (Не ПерваяЗапись Или (ПерваяЗапись И ЕстьДобавленныеФайлы))
		Тогда
			
		НадоПереименоватьФайлыПоШаблону = Истина;
		ТекущийОбъект.ДополнительныеСвойства.Удалить("НадоПереименоватьФайлыПоШаблону");
		
	КонецЕсли;            
	
	ПерваяЗапись = Ложь;
	
	УстановитьДоступностьРеквизитовРегистрации(ТекущийОбъект);
	ВывестиДекорациюОтсутствуетОригинал(ТекущийОбъект);
	Делопроизводство.ОтразитьВЖурналеПередачи(ЭтотОбъект);
	
	УстановитьЗапретУдаленияКонтрагентовИзШаблона();
	УстановитьЗапретУдаленияСторонИзШаблона();
	
	ВидДокументаИзменен = Ложь;
	
	МЭДОПереопределяемый.СохранитьДанныеМЭДОВФорме(
		ЭтотОбъект, МЭДОДокументооборот.НаправлениеОтКэшаВидаДокумента(ВидДокументаКэш));
		
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("СвязиКорреспонденцииИзменены") 
		И ТекущийОбъект.ДополнительныеСвойства.СвязиКорреспонденцииИзменены Тогда
		ОбновитьИнформациюОСвязях();
	КонецЕсли;
	
	Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО") Тогда
		
		ОтражениеВУчетеДОВызовСервера.УстановитьСвязьЭлектронногоДокументаСОбъектомУчета(Параметры.Основание, Объект.Ссылка);
		
	КонецЕсли;
	
	УстановитьВидимостьКомандСервиса1СShare();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПослеЗаписиКлиент(ПараметрыЗаписи);
	
	// Оценка производительности
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамераВыполнениеКомандыЗаписать);
	
	Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО") Тогда
		Оповестить(ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияСостоянияЭДО());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	КэшиНаВремяВызова.ПеренестиДокументыПредприятияФормаЭлемента(ПереносКэшаИзЧтенияВСоздание);
	
	Если Не Объект.Ссылка.Пустая() Тогда 
		ЗаполнитьСписокФайлов(Истина);
		ВывестиДекорациюОтсутствуетОригинал(Объект);
	КонецЕсли;
	
	Если ТипЗнч(Настройки) = Тип("Соответствие") 
		И Настройки["ПоказыватьУдаленныеФайлы"] <> Неопределено Тогда		
		
		Если ИспользоватьОбзорДокументов И Не Объект.Ссылка.Пустая() Тогда		
			Элементы.ФайлыПоказыватьУдаленныеФайлы.Пометка = Настройки["ПоказыватьУдаленныеФайлы"];
		Иначе
			Элементы.ФайлыСозданиеПоказыватьУдаленныеФайлы.Пометка = Настройки["ПоказыватьУдаленныеФайлы"];		
		КонецЕсли;
	
	КонецЕсли;
	
	Если ТипЗнч(Настройки) = Тип("Соответствие") 
		И Настройки["ПоказыватьИнструкции"] <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции") Тогда
		ПолучитьИнструкции();
	КонецЕсли;
	
	Если ТипЗнч(Настройки) = Тип("Соответствие") 
		И Настройки["ПоказыватьТолькоОригиналыВСвязях"] <> Неопределено
		И ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов") Тогда
		ЗаполнитьСвязи();
	КонецЕсли;
	
	Если ТипЗнч(Настройки) = Тип("Соответствие") 
		И Настройки["ПоказыватьУдаленныеСвязи"] <> Неопределено 
		И Не Объект.Ссылка.Пустая() Тогда
		Элементы.ДеревоСвязейПоказыватьУдаленныеСвязи.Пометка = Настройки["ПоказыватьУдаленныеСвязи"];
		ЗаполнитьСвязи();
	КонецЕсли;
		
	Если ТипЗнч(Настройки) = Тип("Соответствие") 
		И Настройки["ИспользоватьПредварительныйПросмотр"] = Истина Тогда
		Настройки["ИспользоватьПредварительныйПросмотр"] = 
			Настройки["ИспользоватьПредварительныйПросмотр"] И ИспользоватьПредпросмотрФайлов;
	КонецЕсли;
	
	Если ТипЗнч(Настройки) = Тип("Соответствие") 
		И Настройки["НеПоказыватьДанныеОбработки"] <> Неопределено
		Или Настройки = Неопределено Тогда
		Элементы.НеПоказыватьДанныеОбработки.Пометка = НеПоказыватьДанныеОбработки;
		Если Не Объект.Ссылка.Пустая() Тогда 
			ПолучитьОбзорДокумента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ЗаписатьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть()

	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Закрыть", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПередЗакрытием(
		Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированность) Тогда
		Возврат;
	КонецЕсли;
	
	// Штрихкодирование
	Если Не Объект.Ссылка.Пустая() И ИспользоватьШК
		И НеобходимоНапечататьШтрихкодПриСоздании И Не ПоказанВопросОВставкеШтрихкода Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для данного документа не был напечатан штрихкод.%1Действительно закрыть форму?'"),
			Символы.ПС);
		РежимВопроса = РежимДиалогаВопрос.ДаНет;
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПередЗакрытиемПродолжение",
			ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимВопроса);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	КонецЕсли;
	
	ВариантПредупрежденияПриЗакрытииВходящего = ДелопроизводствоКлиентПовтИсп.
		ПолучитьПерсональныеНастройкиРаботыСДокументами().ВариантПредупрежденияПриЗакрытииВходящего;	
		
	РегистрацияПриЗакрытии = Ложь;
	Если ЗначениеЗаполнено(Объект.Ссылка) И Не ДокументЗарегистрирован() 
		И ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией
		И ЭтоДелопроизводитель
		И ЗакрытьНезарегистрированныйДокумент <> Истина
		И ВариантПредупрежденияПриЗакрытииВходящего <> "ЗакрыватьБезРегистрации" 
		И ДокументооборотПраваДоступа.ЕстьПравоРегистрации(Объект.Ссылка) 
		И ДокументАктивен() Тогда 
		
		Если ВариантПредупрежденияПриЗакрытииВходящего = "ВсегдаРегистрировать" Тогда 
			РегистрацияПриЗакрытии = Истина;
			Если ЗарегистрироватьДокумент() Тогда 
				ЗакрытьНезарегистрированныйДокумент = Истина;
			КонецЕсли;
		Иначе
			ПараметрыОбработчика = Новый Структура;
			ПараметрыОбработчика.Вставить("Отказ", Отказ);
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПродолжениеПередЗакрытием",
				ЭтотОбъект,
				ПараметрыОбработчика);
			ОткрытьФорму("ОбщаяФорма.ПредупреждениеПриЗакрытииНезарегистрированного", ,
				ЭтотОбъект, , , , ОписаниеОповещения);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда	
		
	МассивЗахваченныхФайлов = ПолучитьЗахваченныеФайлы();
	
	Расширение = "";
	МассивЗахваченныхТолькоWordФайлов = Новый Массив;
	СписокЗанятыеWordФайлы = ДелопроизводствоКлиент.ПолучитьЗанятыеВнешнимиПрограммамиФайлы(
		Объект.Ссылка, УникальныйИдентификатор, 
		МассивЗахваченныхФайлов, Расширение, МассивЗахваченныхТолькоWordФайлов);
		
	Если СписокЗанятыеWordФайлы.Количество() <> 0 Тогда
		
		НазваниеПрограммы = ДелопроизводствоКлиент.ПолучитьНазваниеПрограммыЗахвата(
			Расширение, СписокЗанятыеWordФайлы.Количество());
			
		СтрокаФайлов = "";
		Для Каждого ИмяРасширение Из СписокЗанятыеWordФайлы Цикл
			Если Не ПустаяСтрока(СтрокаФайлов) Тогда
				СтрокаФайлов = СтрокаФайлов + Символы.ПС;
			КонецЕсли;	
			СтрокаФайлов = СтрокаФайлов + ИмяРасширение;
		КонецЦикла;
		
		Если СписокЗанятыеWordФайлы.Количество() > 1 Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Для закрытия карточки документа закройте файлы, занятые %1:
				| 
				|%2.'"),
				НазваниеПрограммы, СтрокаФайлов);
		Иначе	
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Для закрытия карточки документа закройте файл, занятый %1:
				| 
				|%2.'"),
				НазваниеПрограммы, СтрокаФайлов);
			
		КонецЕсли;	
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.ОК);
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		Обработчик = Новый ОписаниеОповещения("ПослеВопросаФайлыЗанятыWordПередЗакрытием", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстСообщения, Кнопки);
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	НеОсвобождатьЗанятыеWordФайлы = Истина;
	ДелопроизводствоКлиент.ПоместитьИзмененияФайлов(Объект.Ссылка, УникальныйИдентификатор, 
		МассивЗахваченныхТолькоWordФайлов, НеОсвобождатьЗанятыеWordФайлы);
		
	#КонецЕсли
	
	// Для целей МЭДО, нужно предложить создать исходящее уведомление:
	Если ОтмененаРегистрацияДокумента Тогда
		МЭДОКлиент.НачатьСозданиеУведомленияОбОтказе(
			Объект.Ссылка,
			ЭтотОбъект,
			ЕстьДоступКМЭДО);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ТолькоЧтоСозданныйДокумент И БылПоказанДиалогИнтерактивногоЗапускаОбработки <> Истина Тогда
		ОбработкиОбъектовКлиент.ВыполнитьИнтерактивныйЗапускОбработки(
			ЭтотОбъект, Объект.Ссылка, 
			ВидИнтерактивногоСобытияАвтозапускаОбработки,
			УсловияЗапуска, 
			ПредопределенноеЗначение("Перечисление.ВидыИнтерактивныхДействий.ЗакрытиеКарточкиТолькоЧтоСозданногоДокумента"),
			БылПоказанДиалогИнтерактивногоЗапускаОбработки, Отказ);	
	КонецЕсли;
	
	ОбщегоНазначенияДокументооборотКлиент.ВставитьВОписаниеОповещенияОЗакрытииСсылкуНаОбъект(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеПередЗакрытием(Результат, Параметры) Экспорт
	
	Если Результат = "НеРегистрировать" Тогда	
		
		ЗакрытьНезарегистрированныйДокумент = Истина;
		Закрыть();
		
	ИначеЕсли Результат = "Зарегистрировать" Тогда 
		
		РегистрацияПриЗакрытии = Истина;
		ЗакрытьНезарегистрированныйДокумент = Истина;
		
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("Закрыть", Истина);
		ЗарегистрироватьДокумент(ПараметрыЗаписи);

	Иначе	
		
		ЗакрытьНезарегистрированныйДокумент = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаФайлыЗанятыWordПередЗакрытием(РезультатВопроса, ПараметрыВыполнения) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		Закрыть();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемПродолжение(ОтветПользователя, параметры) Экспорт
	
	Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ПоказанВопросОВставкеШтрихкода = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьИЗакрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияДокументооборотКлиент.ВставитьВОписаниеОповещенияОЗакрытииСсылкуНаОбъект(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПолученияНавигационнойСсылки(Ключ, Представление, НавигационнаяСсылка, СтандартнаяОбработка)
	
	Если Ключ = "Сервис1СShare" Тогда
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Объект.Ссылка);
		ПодключитьОбработчикОжидания("Подключаемый_ПоделитьсяДокументомShare", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПолученияСпискаНавигационныхСсылок(СписокНавигационыхСсылок, КлючПоУмолчанию)
	
	ВидимостьКомандСервиса1CShare = ИнтеграцияShareДокументооборотКлиентСервер.ВидимостьКомандСервиса1CShare(
			ЭтотОбъект, ВидДокументаКэш);
	Если ВидимостьКомандСервиса1CShare.ИспользоватьСервис1CShare
		И ВидимостьКомандСервиса1CShare.Видимость Тогда
			СписокНавигационыхСсылок.Добавить("Сервис1СShare",
				НСтр("ru = 'Веб-ссылка на документ, опубликованный на 1С:Share'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПолеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Найти(ДанныеСобытия.Href, "goods") Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаТовары;
		Возврат;
		
	ИначеЕсли Найти(ДанныеСобытия.Href, "ShowLinks") Тогда
		
		ОбзорСпискаДокументовКлиент.ПоказатьСвязи(ДанныеСобытия.Href);
		
		Возврат;
	
	ИначеЕсли Найти(ДанныеСобытия.Href, "v8doc:status") Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОбработка;
		ПриПереключенииНаСтраницуОбработка();
		Возврат;
		
	ИначеЕсли Найти(ДанныеСобытия.Href, "OpenForEdit") Тогда
		
		ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиФайл = ТекущиеДанные.Ссылка;
			РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
			
			Если Не РедактируетТекущийПользователь 
				Или ДанныеСобытия.Anchor = Неопределено Тогда
			
				Возврат;
			
			КонецЕсли;
			
			КомандыРаботыСФайламиКлиент.Редактировать(ТекущиФайл);
			ОповеститьОбИзменении(КлючЗаписи);
		КонецЕсли;
		Возврат;

	ИначеЕсли Найти(ДанныеСобытия.Href, "OpenForView") Тогда
		
		ТекущийФайл = Неопределено;
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСвязи Тогда
			
			ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
			
			Если ТекущиеДанные <> Неопределено Тогда
				ТекущийФайл = ТекущиеДанные.Файл;
			КонецЕсли;
			
		Иначе	
		
			ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
			Если ТекущиеДанные <> Неопределено Тогда
				ТекущийФайл = ТекущиеДанные.Ссылка;
			КонецЕсли;	
		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущийФайл) Тогда
			
			Если ДанныеСобытия.Anchor = Неопределено Тогда
			
				Возврат;
			
			КонецЕсли;
			
			РаботаСФайламиКлиент.ОткрытьФайлДокумента(ТекущийФайл, ЭтаФорма);
		КонецЕсли;
				
		Возврат;
		
	ИначеЕсли Найти(ДанныеСобытия.Href, "CreatePreview") Тогда       
		
		Если Элемент = Элементы.ПредставлениеHTML Тогда
		
			ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
			Если ТекущиеДанные <> Неопределено Тогда      
				
				ТекущийФайл = ТекущиеДанные.Ссылка;
			
				ДокументPDF = Неопределено;
				
				ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();
				ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
				ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.Расширение;
				ПараметрыHTMLПредставление.Размер = 0;
				ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
				ПараметрыHTMLПредставление.ИгнорироватьМаксРазмер = Истина;
				
				ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
					ТекущийФайл,
					ПараметрыHTMLПредставление,
					ДокументPDF);
				
				ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ПредставлениеHTML, ТаймлистАвтопротоколHTML,
					РаспознанныйТекстHTML);
				
				Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
				
			КонецЕсли;
			
		ИначеЕсли Элемент = Элементы.СвязиПредставлениеHTML Тогда	 
			
			ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;

			Если ТекущиеДанные <> Неопределено Тогда
				
				ТекущийФайл = ТекущиеДанные.Файл;
				ТекущийДокумент = ТекущиеДанные.СвязанныйОбъект;

				Если ЗначениеЗаполнено(ТекущийФайл) Тогда
					
					ДокументPDF = Неопределено;
					
					ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();  
					ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
					ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.РасширениеФайла;
					ПараметрыHTMLПредставление.Размер = ТекущиеДанные.Размер;
					ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
					ПараметрыHTMLПредставление.ПредпросмотрОфисныхФайлов = ПредпросмотрОфисныхФайлов; 
					ПараметрыHTMLПредставление.ИгнорироватьМаксРазмер = Истина; // это важно
					
					ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
						ТекущийФайл,
						ПараметрыHTMLПредставление,
						ДокументPDF);
					
					ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ПредставлениеHTMLСвязи);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли Найти(ДанныеСобытия.Href, "ShowInReplyTo") Тогда
		
		РаботаС_HTMLКлиент.ОткрытьСсылку(Элемент, ДанныеСобытия, СтандартнаяОбработка, ЭтотОбъект);
		Возврат;
		
	ИначеЕсли Найти(ДанныеСобытия.Href, "OpenEDI") Тогда
		
		Если ЗначениеЗаполнено(ТекущийДокументЭДО) Тогда
			ПоказатьЗначение(, ТекущийДокументЭДО);
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли Найти(ДанныеСобытия.Href, "GetAutoprotocol") Тогда
		
		РаботаС_HTMLКлиент.ОткрытьСсылку(Элемент, ДанныеСобытия, СтандартнаяОбработка, ЭтотОбъект);
		Возврат;
		
	ИначеЕсли Найти(ДанныеСобытия.Href, "https://timelist.ru/1CDO") Тогда
		
		РаботаС_HTMLКлиент.ОткрытьСсылку(Элемент, ДанныеСобытия, СтандартнаяОбработка, ЭтотОбъект);
		Возврат;
		
	ИначеЕсли Лев(ДанныеСобытия.Href, 6) <> "v8doc:" Тогда 
		Возврат;
		
	КонецЕсли;
	
	НавигационнаяСсылкаПоля = Сред(ДанныеСобытия.Href, 7);
	ПараметрыНажатия = Новый Структура;
	ПараметрыНажатия.Вставить("ТекущийПользователь", ТекущийПользователь);
	ПараметрыНажатия.Вставить("СрокДействияДокументИсточникИзменения", СрокДействияДокументИсточникИзменения);
	ПараметрыНажатия.Вставить("СрокДействияКомментарий", СрокДействияКомментарий);
	
	ЭлементСрокДействия = Элементы.Найти("СрокДействияСтрока");
	Если ЭлементСрокДействия <> Неопределено Тогда
	ПараметрыНажатия.Вставить("НеИзменятьСрокДействия", 
		ТолькоПросмотр Или Элементы.СрокДействияСтрока.ТолькоПросмотр);
	КонецЕсли;
	
	ПараметрыНажатия.Вставить("Элемент", Элемент);
	ПараметрыНажатия.Вставить("ЭтаФорма", ЭтаФорма);
	ПараметрыНажатия.Вставить("МестоХранения", МестоХранения);
	ПараметрыНажатия.Вставить("ЗапретитьРучноеИзменениеСостоянияДокументов",
		ЗапретитьРучноеИзменениеСостоянияДокументов);
	
	ДелопроизводствоКлиент.ОбработатьНажатиеНаПолеОбзор(Объект, НавигационнаяСсылкаПоля, ПараметрыНажатия); 
	
КонецПроцедуры

&НаКлиенте
Процедура СрокДействияСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТекущийПользователь", ТекущийПользователь);
	ПараметрыОткрытия.Вставить("СрокДействияДокументИсточникИзменения", СрокДействияДокументИсточникИзменения);
	ПараметрыОткрытия.Вставить("СрокДействияКомментарий", СрокДействияКомментарий);
	ПараметрыОткрытия.Вставить("ЭтаФорма", ЭтаФорма);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ИзменитьСрокДействияДокументаПродолжение",
		ЭтотОбъект);
	ПараметрыОткрытия.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	
	ДелопроизводствоКлиент.ИзменитьСрокДействияДокумента(Объект, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИсполненияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СрокИсполнения) И (КонецДня(Объект.СрокИсполнения) < Объект.ДатаРегистрации) Тогда 
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Установленный срок исполнения меньше даты регистрации документа!'"),,,
			"Объект.СрокИсполнения");
		Возврат;
	КонецЕсли;	
	
	ПроверитьПревышениеСрокаИсполнения();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПревышениеСрокаИсполнения()

	РеквизитыСрока = ОбщегоНазначенияДокументооборотВызовСервера.ЗначенияРеквизитовОбъекта(Объект.ВидДокумента,
		"СрокИсполнения, СрокИсполненияУказанВРабочихДнях");
	
	СрокИсполненияДней = РеквизитыСрока.СрокИсполнения;
	СрокУказанВРабочихДнях = РеквизитыСрока.СрокИсполненияУказанВРабочихДнях;
	
	Если ЗначениеЗаполнено(СрокИсполненияДней) И ЗначениеЗаполнено(Объект.ДатаРегистрации) Тогда 
		
		СрокПревышен = Ложь;
		
		Если Не СрокУказанВРабочихДнях 
			И Объект.СрокИсполнения > Объект.ДатаРегистрации + 24 * 3600 * СрокИсполненияДней Тогда
			
			СрокПревышен = Истина;
			
		ИначеЕсли СрокУказанВРабочихДнях Тогда
			
			ОсновнойГрафик = ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы();
			ОсновнойКалендарь = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ОсновнойГрафик,
				"Календарь");
			
			НормативныйСрок = КалендарныеГрафики.ПолучитьДатуПоКалендарю(ОсновнойКалендарь,
				Объект.ДатаРегистрации,
				СрокИсполненияДней);
				
			Если Объект.СрокИсполнения > НормативныйСрок Тогда
				СрокПревышен = Истина;
			КонецЕсли;

		КонецЕсли;
		
		Если СрокПревышен Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Установленный срок исполнения превышает нормативный срок для данного вида документа!'")
				,,, "Объект.СрокИсполнения");
		КонецЕсли;	
		
	КонецЕсли;
	
	Если СрокУказанВРабочихДнях Тогда
		УстановитьЗаголовокНадписиРабочихДней();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	
	ОбновитьОтображениеСуммы();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаНДСПриИзменении(Элемент)
	
	Если Не ВестиУчетПоСтатьямДДС Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСтатей = СтатьиДвиженияДенежныхСредств.Количество();
	Если КоличествоСтатей = 1 Тогда
		СтатьиДвиженияДенежныхСредств[0].СуммаНДС = Объект.СуммаНДС;
	ИначеЕсли КоличествоСтатей > 1 Тогда
		ИтогСуммаНДС = 0;
		Для Каждого Строка из СтатьиДвиженияДенежныхСредств Цикл
			ИтогСуммаНДС = ИтогСуммаНДС + Строка.СуммаНДС;
		КонецЦикла;
		Если ИтогСуммаНДС = Объект.СуммаНДС Тогда
			Элементы.СтраницыСуммаВернаНеверна.ТекущаяСтраница =
				Элементы.СтраницаСуммаВерна;
		Иначе
			Элементы.СтраницыСуммаВернаНеверна.ТекущаяСтраница =
				Элементы.СтраницаСуммаНеверна;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИзменитьСуммуНажатие(Элемент)
	
	ОткрытьСтатьиДДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтатейДДСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Если СтатьиДвиженияДенежныхСредств.Количество() <= 1 
			И ЗначениеЗаполнено(Текст) Тогда
			ДанныеВыбора = ПолучитьДанныеВыбораСтатейДДС(Текст);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтатейДДСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры,
	СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		СтатьиДвиженияДенежныхСредств.Очистить();
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Если СтатьиДвиженияДенежныхСредств.Количество() <= 1 
		И ЗначениеЗаполнено(Текст) Тогда
		ДанныеВыбора = ПолучитьДанныеВыбораСтатейДДС(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыбораСтатейДДС(Текст)
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура);
	ПараметрыВыбора.Вставить("СтрокаПоиска", Текст);
	ПараметрыВыбора.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
	ПараметрыВыбора.Вставить("СпособПоискаСтроки", СпособПоискаСтрокиПриВводеПоСтроке.ЛюбаяЧасть);
	Возврат Справочники.СтатьиДвиженияДенежныхСредств.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
КонецФункции

&НаКлиенте
Процедура ПредставлениеСтатейДДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтатьиДвиженияДенежныхСредств.Очистить();
	Строка = СтатьиДвиженияДенежныхСредств.Добавить();
	Строка.СтатьяДвиженияДенежныхСредств = ВыбранноеЗначение;
	Строка.Сумма = Объект.Сумма;
	Строка.СуммаНДС = Объект.СуммаНДС;
	СформироватьПредставлениеСтатейДДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтатейДДСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьСтатьиДДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтатейДДСОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьСтатьиДДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтатейДДСОчистка(Элемент, СтандартнаяОбработка)
	
	СтатьиДвиженияДенежныхСредств.Очистить();
	СформироватьПредставлениеСтатейДДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтатьиДДС()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьСтатьиДДСЗавершение", ЭтаФорма);
	МассивСтрок = Новый Массив;
	Для каждого Строка из СтатьиДвиженияДенежныхСредств Цикл
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("СтатьяДвиженияДенежныхСредств", 
			Строка.СтатьяДвиженияДенежныхСредств);
		СтруктураСтроки.Вставить("Сумма", Строка.Сумма);
		СтруктураСтроки.Вставить("СуммаНДС", Строка.СуммаНДС);
		МассивСтрок.Добавить(СтруктураСтроки);
	КонецЦикла;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтатьиДвиженияДенежныхСредств", МассивСтрок);
	ПараметрыФормы.Вставить("Сумма", Объект.Сумма);
	ПараметрыФормы.Вставить("СуммаНДС", Объект.СуммаНДС);
	ПараметрыФормы.Вставить("УчитыватьНДС", УчитыватьНДС);
	ОткрыватьНаПросмотр = (Элементы.ПредставлениеСтатейДДС.ТолькоПросмотр Или ТолькоПросмотр);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ОткрыватьНаПросмотр);
	ОткрытьФорму("Справочник.ДокументыПредприятия.Форма.СтатьиДвиженияДенежныхСредств", ПараметрыФормы, 
		ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтатьиДДСЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	Модифицированность = Истина;
	СтатьиДвиженияДенежныхСредств.Очистить();
	Объект.Сумма = 0;
	Объект.СуммаНДС = 0;
	Для каждого СтруктураСтроки из Результат Цикл
		Строка = СтатьиДвиженияДенежныхСредств.Добавить();
		Строка.СтатьяДвиженияДенежныхСредств = СтруктураСтроки.СтатьяДвиженияДенежныхСредств;
		Строка.Сумма = СтруктураСтроки.Сумма;
		Строка.СуммаНДС = СтруктураСтроки.СуммаНДС;
		Объект.Сумма = Объект.Сумма + СтруктураСтроки.Сумма;
		Объект.СуммаНДС = Объект.СуммаНДС + СтруктураСтроки.СуммаНДС;
	КонецЦикла;
	СформироватьПредставлениеСтатейДДС();
	Элементы.СтраницыСуммаВернаНеверна.ТекущаяСтраница =
		Элементы.СтраницаСуммаВерна;
	
КонецПроцедуры

&НаКлиенте
Процедура ПапкаПриИзменении(Элемент)
	
	ОбновитьПолныйПуть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтмененПриИзменении(Элемент)
	
	Если Объект.НеДействует Тогда 
		Элементы.НеДействуетВСоответствии.Доступность = Истина;
		
		Если УчитыватьСрокДействия 
			И (НачалоДня(Объект.ДатаОкончанияДействия) <> НачалоДня(ТекущаяДата()) 
			Или Объект.Бессрочный <> Ложь 
			Или Объект.ПорядокПродления <> ПредопределенноеЗначение("Перечисление.ПорядокПродления.НеПродлевается")) Тогда
			Объект.ДатаОкончанияДействия = ТекущаяДата();
			Объект.Бессрочный = Ложь;
			Объект.ПорядокПродления = ПредопределенноеЗначение("Перечисление.ПорядокПродления.НеПродлевается");
			СрокДействияСтрока = ДелопроизводствоКлиентСервер.СформироватьПредставлениеСрокаДействия(
				Объект, СрокДействияКомментарий);
			
			Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
				ПолучитьОбзорДокумента();
			КонецЕсли;
			
			ПоказатьПредупреждение(, НСтр( "ru = 'Срок действия документа изменен'"));
		КонецЕсли;
	Иначе
		НеДействуетВСоответствии = Неопределено;
		Элементы.НеДействуетВСоответствии.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НеДействуетВСоответствииСтрокаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(НеДействуетВСоответствии) Тогда 
		ПоказатьЗначение(, НеДействуетВСоответствии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НеДействуетВСоответствииСтрокаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
		НеДействуетВСоответствии = ВыбранноеЗначение;
		НеДействуетВСоответствииСтрока = СокрЛП(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НеДействуетВСоответствииСтрокаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДокументыСделавшиеНедействующим(Текст, Объект.ВидДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтмененДокументомНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("НеДействует", Ложь));
	ОткрытьФорму("Справочник.ДокументыПредприятия.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДелаетНедействующимиСтрокаНажатие(Элемент)
	
	// надо получить массив видов документов, которые можно сделать не действующими
	ВидыОтменяемыхДокументов = Делопроизводство.ПолучитьВидыОтменяемыхДокументов(Объект.ВидДокумента);
	
	ТаблицаНеДействующихДокументов = Новый Массив; // массив структур Документ + ДатаОтмены
	Для Каждого Строка Из СписокНеДействующихДокументов Цикл
		ОписаниеДок = Новый Структура("Документ, ДатаОтмены, УжеУстановлен, Источник",
			Строка.Документ, Строка.ДатаОтмены, Строка.УжеУстановлен, Строка.Источник);
		ТаблицаНеДействующихДокументов.Добавить(ОписаниеДок);	
	КонецЦикла;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидыОтменяемыхДокументов", ВидыОтменяемыхДокументов);
	ПараметрыФормы.Вставить("ТаблицаДокументов", ТаблицаНеДействующихДокументов);
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ЗапретитьМенятьСписокОтменяемыхДокументов", ЗапретитьМенятьСписокОтменяемыхДокументов);
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВводНеДействующихДокументов", ЭтаФорма);
	
	ОткрытьФорму("ОбщаяФорма.ВводНеДействующихДокументов", ПараметрыФормы,,,,,
		Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВводНеДействующихДокументов(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат <> Неопределено И ТипЗнч(Результат) = Тип("Массив") Тогда
		
		СписокНеДействующихДокументов.Очистить();
		Для Каждого Строка Из Результат Цикл
			НовСтр = СписокНеДействующихДокументов.Добавить();
			НовСтр.Документ = Строка.Документ;
			НовСтр.ДатаОтмены = Строка.ДатаОтмены;
			НовСтр.Источник = Строка.Источник;
			НовСтр.УжеУстановлен = Строка.УжеУстановлен;
		КонецЦикла;	
		
		Модифицированность = Истина;
		
		Если СписокНеДействующихДокументов.Количество() <> 0 Тогда
			Элементы.ДелаетНедействующимиСтрока.Заголовок = СтрШаблон(
				НСтр("ru = 'Делает недействующими (%1)'"), СписокНеДействующихДокументов.Количество());
		Иначе
			Элементы.ДелаетНедействующимиСтрока.Заголовок = НСтр("ru = 'Делает недействующими'");
		КонецЕсли;	
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.Обзор И Модифицированность Тогда
		ПолучитьОбзорДокумента();

	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаДоступ Тогда
		ПриПереключенииНаСтраницуДоступ();
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОбработка
		И Не ТолькоПросмотр Тогда
		ПриПереключенииНаСтраницуОбработка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПереключенииНаСтраницуОбработка()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Или Модифицированность Тогда // ни разу не был записан
		ПодключитьОбработчикОжидания("ЗаписатьДействияПриПереключенииСтраниц", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПереключенииНаСтраницуДоступ()
	
	Для Каждого Строка Из РабочаяГруппаТаблица Цикл
		Если ЗначениеЗаполнено(Строка.Автоподстановка) Тогда
			ПриПереключенииНаСтраницуДоступНаСервере();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// При переключении на страницу "Доступ" пересчитывает участников РГ, заполненных
// по автоподстановкам
&НаСервере
Процедура ПриПереключенииНаСтраницуДоступНаСервере()
	
	ИсходнаяРГ = ДанныеФормыВЗначение(РабочаяГруппаТаблица, Тип("ТаблицаЗначений"));
	ОбновленнаяРГ = ИсходнаяРГ.Скопировать();
	РаботаСРабочимиГруппами.ОбновитьУчастниковРабочейГруппыПоАвтоподстановкам(ОбновленнаяРГ, Объект);
	
	Если Не ОбщегоНазначения.ДанныеСовпадают(ИсходнаяРГ, ОбновленнаяРГ) Тогда
		Элементы.ДекорацияРГОбновлена.Видимость = Истина;
		ЗначениеВДанныеФормы(ОбновленнаяРГ, РабочаяГруппаТаблица);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВзаимодействиеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОбработка;
	ПриПереключенииНаСтраницуОбработка(); 
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЭПНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ГруппаЭП.Видимость Тогда 
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЭП;
	Иначе
		ПоказатьПредупреждение(,НСтр("ru = 'Не подписан электронной подписью'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КартинкаФорумНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Для перехода по ссылке документ необходимо записать.'"));
		Возврат;
	КонецЕсли;	
	
	ОткрытьФорму("Справочник.ТемыОбсуждений.Форма.ФормаПросмотраТемы", 
		Новый Структура("Документ", Объект.Ссылка), ЭтаФорма, ЭтаФорма.КлючУникальности, ЭтаФорма.Окно);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаКатегорииНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Категории;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрифДоступаПриИзменении(Элемент)
	
	ПолучитьИнструкции();
	
	ИзменилсяКлючНастроекОбработки = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыКонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Контрагенты.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
		СтандартнаяОбработка = Ложь;
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""Контрагент""'"),,
			"Объект.Контрагенты["+ Формат(ТекущиеДанные.НомерСтроки-1, "ЧН=0; ЧГ=0") +"].Контрагент",,);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыПодписалОтКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Контрагенты.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
		СтандартнаяОбработка = Ложь;
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""Контрагент""'"),,
			"Объект.Контрагенты["+ Формат(ТекущиеДанные.НомерСтроки-1, "ЧН=0; ЧГ=0") +"].Контрагент",,);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСтатус(Результат, Параметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда 
		ИзменитьСостояние(Объект.Ссылка, Результат);
		ОповеститьОбИзменении(КлючЗаписи);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПредметПерепискиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКорреспонденциейКлиент.ПредметПерепискиОбработкаВыбора(ЭтотОбъект,
		Элемент,
		ВыбранноеЗначение,
		СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура ПредметПерепискиПриИзменении(Элемент)
	
	РаботаСКорреспонденциейКлиент.ПредметПерепискиПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметПерепискиОчистка(Элемент, СтандартнаяОбработка)
	
	РаботаСКорреспонденциейКлиент.ПредметПерепискиОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметПерепискиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)

	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(ПредметПереписки) Тогда
		РаботаСКорреспонденциейКлиент.ПредметПерепискиАвтоПодбор(ЭтотОбъект,
			Элемент,
			Текст,
			ДанныеВыбора,
			ПараметрыПолученияДанных,
			Ожидание,
			СтандартнаяОбработка);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПредметПерепискиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	РаботаСКорреспонденциейКлиент.ПредметПерепискиОкончаниеВводаТекста(ЭтотОбъект,
		Элемент,
		Текст,
		ДанныеВыбора,
		ПараметрыПолученияДанных,
		СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПредметПерепискиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(ПредметПереписки) Тогда
		РаботаСКорреспонденциейКлиент.ПредметПерепискиНачалоВыбора(ЭтотОбъект,
			Элемент,
			ДанныеВыбора,
			СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПредметовПерепискиЗначениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Элементы.СписокПредметовПереписки.ТекущиеДанные.Значение) Тогда
		РаботаСКорреспонденциейКлиент.ПредметПерепискиАвтоПодбор(ЭтотОбъект,
			Элемент,
			Текст,
			ДанныеВыбора,
			ПараметрыПолученияДанных,
			Ожидание,
			СтандартнаяОбработка);
		КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПредметовПерепискиЗначениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	РаботаСКорреспонденциейКлиент.ПредметПерепискиОкончаниеВводаТекста(ЭтотОбъект,
		Элемент,
		Текст,
		ДанныеВыбора,
		ПараметрыПолученияДанных,
		СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СписокПредметовПерепискиЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ДелопроизводствоКлиентСервер.ЭтоДокумент(Элементы.СписокПредметовПереписки.ТекущиеДанные.Значение) Тогда
		РаботаСКорреспонденциейКлиент.ПредметПерепискиНачалоВыбора(ЭтотОбъект,
			Элемент,
			ДанныеВыбора,
			СтандартнаяОбработка);
	КонецЕсли;
		
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Изменение полей, влияющих на номер

&НаКлиенте
Процедура ДатаРегистрацииПриИзменении(Элемент)
	
	ПриИзмененииДатыРегистрации();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, ДатаРегистрации);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ВидИТематикаТекстПриИзменении(Элемент)
	
	ДелопроизводствоКлиент.ВидИТематикаПриИзменении(ЭтаФорма);
	ПриИзмененииВидаДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидИТематикаТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДелопроизводствоКлиент.ВидИТематикаНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидИТематикаТекстОчистка(Элемент, СтандартнаяОбработка)
	
	ДелопроизводствоКлиент.ВидИТематикаОчистка(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидИТематикаТекстОткрытие(Элемент, СтандартнаяОбработка)
	
	ДелопроизводствоКлиент.ВидИТематикаОткрытие(ЭтаФорма, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидИТематикаТекстОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДелопроизводствоКлиент.ВидИТематикаОбработкаВыбора(ЭтаФорма, ВыбранноеЗначение, СтандартнаяОбработка);
	ПриИзмененииВидаДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидИТематикаТекстАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ДелопроизводствоКлиент.ВидИТематикаАвтоПодбор(
		ЭтаФорма, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидИТематикаТекстОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ДелопроизводствоКлиент.ВидИТематикаОкончаниеВводаТекста(
		ЭтаФорма, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерПриИзменении(Элемент)
	
	// ручное изменение номера
	СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(Объект);
	Нумератор = Нумерация.ПолучитьНумераторДокумента(СтруктураПараметров);
	Если ЗначениеЗаполнено(Нумератор) Тогда 
		Объект.ЧисловойНомер = -1;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УчитыватьНДС = Делопроизводство.УчитыватьНДС(Объект.Организация);
	Элементы.ГруппаСуммаНДС.Видимость = УчитыватьНДС;
	Элементы.ТоварыСтавкаНДС.Видимость = УчитыватьНДС;
	Элементы.ТоварыСуммаНДС.Видимость = УчитыватьНДС;
	
	ИзменилсяКлючНастроекОбработки = Истина;
	ПолучитьИнструкции();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросДеятельностиПриИзменении(Элемент)
	
	ПолучитьИнструкции();
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Выбор пользователей, контрагента и контактного лица

&НаКлиенте
Процедура ОтветственныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СотрудникиКлиент.ВыбратьСотрудникаИзАдреснойКниги(Элемент, Объект.Ответственный);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйЗаХранениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СотрудникиКлиент.ВыбратьСотрудникаИзАдреснойКниги(Элемент, Объект.ОтветственныйЗаХранение);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с местом хранения

&НаКлиенте
Процедура МестоХраненияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораМестаХранения(Текст);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МестоХраненияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораМестаХранения(Текст);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	СкопироватьКонтрагентаИзРеквизитовВСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		СтандартнаяОбработка = Ложь;
		
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""Контрагент""'"),,,
			"Объект.Контрагент");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ОбработчикИзмененияКонтрагента(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("ОбщаяФорма.ВыборКонтрагентаКонтактноеЛицо", 
			Новый Структура("Получатель, Режим", Объект.Контрагент, "КонтрагентыИСпискиРассылки"), Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией Тогда
		Возврат
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ОбработатьВыборПолучателей(ВыбранноеЗначение);
	
	Модифицированность = Истина;
	Если Не ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СпискиРассылкиПоКонтрагентам") Тогда
		СкопироватьКонтрагентаИзРеквизитовВСписок();
	КонецЕсли;
	ВыбранноеЗначение = Объект.Контрагент;
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
	// Отображать не по ссылке, а по ИНН, НЕ сохраняя в кэше.
	Если ИспользоватьСервисСПАРКРиски Тогда
		ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения.
		ОбновитьОтображениеИндексыСПАРК();
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.Контрагент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборПолучателей(ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СпискиРассылкиПоКонтрагентам") Тогда
		
		ЗаполнитьИсполнителейПоСпискуРассылки(ВыбранноеЗначение);
		Возврат;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		Объект.Контрагент = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
			ВыбранноеЗначение, "Владелец");
		Объект.КонтактноеЛицо = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Объект.Контрагент = ВыбранноеЗначение;
		Объект.КонтактноеЛицо = Неопределено;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если ЗначениеЗаполнено(ВыбранноеЗначение.Контрагент) 
			И ЗначениеЗаполнено(ВыбранноеЗначение.КонтактноеЛицо) Тогда
			Объект.Контрагент = ВыбранноеЗначение.Контрагент;
			Объект.КонтактноеЛицо = ВыбранноеЗначение.КонтактноеЛицо;
		Иначе
			Объект.Контрагент = ВыбранноеЗначение.Контрагент;
			Объект.КонтактноеЛицо = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	РаботаСКорреспонденцией.УстановитьДоступностьОтправки(ЭтотОбъект, Объект.РегистрационныйНомер);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсполнителейПоСпискуРассылки(СписокРассылки, НачальнаяСтрока = Неопределено)
	
	ПолучателиКоличество = СписокРассылки.Получатели.Количество();
	Если ПолучателиКоличество = 0 Тогда 
		Возврат;
	КонецЕсли;	
	
	Для Инд = 0 По ПолучателиКоличество - 1 Цикл
		Если НачальнаяСтрока = Неопределено Тогда 
			НоваяСтрока = Объект.Контрагенты.Добавить();
		Иначе
			НоваяСтрока = Объект.Контрагенты.Вставить(НачальнаяСтрока + Инд);
		КонецЕсли;	
		НоваяСтрока.Контрагент = СписокРассылки.Получатели[Инд].Получатель;
		НоваяСтрока.КонтактноеЛицо = СписокРассылки.Получатели[Инд].Адресат;
	КонецЦикла;	
	Если НачальнаяСтрока <> Неопределено Тогда 
		Объект.Контрагенты.Удалить(НачальнаяСтрока + ПолучателиКоличество);
	КонецЕсли;	
	
	Если Не НесколькоКонтрагентов Тогда 
		
		Если Объект.Контрагенты.Количество() = 1 Тогда 
			ЗаполнитьЗначенияСвойств(ЭтаФорма, Объект.Контрагенты[0], 
				"Контрагент, КонтактноеЛицо, 
				|Отправлен, ДатаОтправки, СпособОтправки, ВходящийНомер, ВходящаяДата");
		Иначе	
			НесколькоКонтрагентов = Истина;
			УстановитьВидимостьКонтрагентов();
		КонецЕсли;
		
	КонецЕсли;	
	
	РаботаСКорреспонденцией.УстановитьДоступностьОтправки(ЭтотОбъект, Объект.РегистрационныйНомер);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписалОтКонтрагентаПриИзменении(Элемент)
	
	СкопироватьКонтрагентаИзРеквизитовВСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписалОтКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		СтандартнаяОбработка = Ложь;
		
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""Контрагент""'"),,,
			"Объект.Контрагент");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСАдреснойКнигойКлиент.ВыбратьУчастника(ЭтаФорма, Элемент, СтандартнаяОбработка,
		Объект.Адресат, Ложь);
		
КонецПроцедуры

&НаКлиенте
Процедура АдресатОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСАдреснойКнигойКлиент.ОбработатьВыборУчастника(ЭтаФорма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(Объект, "Адресат", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресатАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСАдреснойКнигойКлиент.ПодобратьУчастника(ЭтаФорма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
		Ожидание, СтандартнаяОбработка, Объект.Адресат, Ложь,
		ПредопределенноеЗначение("Перечисление.ТипыОбъектов.ДокументыПредприятия"));
	
КонецПроцедуры

&НаКлиенте
Процедура АдресатОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСАдреснойКнигойКлиент.ПодобратьУчастника(ЭтаФорма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
		0, СтандартнаяОбработка, Объект.Адресат, Ложь,
		ПредопределенноеЗначение("Перечисление.ТипыОбъектов.ДокументыПредприятия"));
		
КонецПроцедуры

&НаКлиенте
Процедура ПодготовилПриИзменении(Элемент)
	
	ПодготовилПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовилПриИзмененииНаСервере()
	
	ПодразделениеДоИзменения = Объект.Подразделение;
	Если ЗначениеЗаполнено(Объект.Подготовил) И Не НельзяМенятьПодразделение Тогда 
		Объект.Подразделение = Сотрудники.ПодразделениеСотрудника(Объект.Подготовил);
	КонецЕсли;
	
	Если ПодразделениеДоИзменения <> Объект.Подразделение Тогда
		ИзменилсяКлючНастроекОбработки = Истина;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая()
		И Сотрудники.ЭтоСотрудникТекущегоПользователя(Объект.Подготовил) Тогда
		РаботаСРабочимиГруппами.ЗаменитьСотрудниковТекущегоПользователя(
			РабочаяГруппаТаблица, Объект.Подготовил);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовилНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СотрудникиКлиент.ВыбратьСотрудникаИзАдреснойКниги(Элемент, Объект.Подготовил);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовилОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(Объект, "Подготовил", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ИзменилсяКлючНастроекОбработки = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Выбор получателя

&НаКлиенте
Процедура ПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	ПараметрыФормы.Вставить("ОтображатьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ВыбиратьКонтрагентов", Истина);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ВыбиратьСотрудников", Истина);
	ПараметрыФормы.Вставить("ПодменятьПользователейСотрудниками", Истина);
	
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор получателя'"));
	Если ЗначениеЗаполнено(Получатель) Тогда
		ПараметрыФормы.Вставить("ВыбранныеАдресаты", Получатель);
	КонецЕсли;
	ОткрытьФорму("Справочник.АдреснаяКнига.Форма.ФормаСписка",
		ПараметрыФормы,
		Элемент,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Получатель = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПриИзменении(Элемент)
	
	ТипПолучателя = ТипЗнч(Получатель);
	
	Элементы.ГруппаАвансовыйОтчет.Видимость =
		ТипПолучателя = Тип("СправочникСсылка.Пользователи")
		Или ТипПолучателя = Тип("СправочникСсылка.Сотрудники");
		
	Если ТипПолучателя = Тип("СправочникСсылка.Пользователи")
		Или ТипПолучателя = Тип("СправочникСсылка.Сотрудники") Тогда
		
		АвансовыйОтчетТребуется = Истина;
		Элементы.ГруппаАвансовыйОтчетУказан.Видимость = ЗначениеЗаполнено(АвансовыйОтчет);
		Элементы.ГруппаАвансовыйОтчетНеПредоставлен.Видимость = Не ЗначениеЗаполнено(АвансовыйОтчет)
			И НЕ АвансовыйОтчетПредоставлен И АвансовыйОтчетТребуется;
		Элементы.ГруппаАвансовыйОтчетПредоставлен.Видимость = Не ЗначениеЗаполнено(АвансовыйОтчет)
			И АвансовыйОтчетПредоставлен;
		Элементы.ГруппаАвансовыйОтчетНеТребуется.Видимость = Не ЗначениеЗаполнено(АвансовыйОтчет)
			И Не АвансовыйОтчетТребуется;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ЗаявкиНаОплатуВызовСервера.ДанныеВыбораПолучателя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ЗаявкиНаОплатуВызовСервера.ДанныеВыбораПолучателя(Текст);
	Иначе
		Получатель = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Авансовый отчет

&НаКлиенте
Процедура ДекорацияАвансовыйОтчетНеПредоставленСсылкаНажатие(Элемент)
	Список = Новый СписокЗначений;
	Список.Добавить("Предоставлен", НСтр("ru = 'предоставлен'"));
	Список.Добавить("Создать", НСтр("ru = 'создать'"));
	Список.Добавить("Выбрать", НСтр("ru = 'выбрать'"));
	Список.Добавить("НеТребуется", НСтр("ru = 'не требуется'"));
	ОписаниеОповещения = Новый ОписаниеОповещения("ДекорацияАвансовыйОтчетПослеВыбораИзМеню", ЭтотОбъект);
	ПоказатьВыборИзМеню(ОписаниеОповещения, Список, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАвансовыйОтчетПредоставленСсылкаНажатие(Элемент)
	Список = Новый СписокЗначений;
	Список.Добавить("НеПредоставлен", НСтр("ru = 'не предоставлен'"));
	Список.Добавить("Создать", НСтр("ru = 'создать'"));
	Список.Добавить("Выбрать", НСтр("ru = 'выбрать'"));
	Список.Добавить("НеТребуется", НСтр("ru = 'не требуется'"));
	ОписаниеОповещения = Новый ОписаниеОповещения("ДекорацияАвансовыйОтчетПослеВыбораИзМеню", ЭтотОбъект);
	ПоказатьВыборИзМеню(ОписаниеОповещения, Список, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАвансовыйОтчетНеТребуетсяСсылкаНажатие(Элемент)
	Список = Новый СписокЗначений;
	Список.Добавить("Предоставлен", НСтр("ru = 'предоставлен'"));
	Список.Добавить("НеПредоставлен", НСтр("ru = 'не предоставлен'"));
	Список.Добавить("Создать", НСтр("ru = 'создать'"));
	Список.Добавить("Выбрать", НСтр("ru = 'выбрать'"));
	ОписаниеОповещения = Новый ОписаниеОповещения("ДекорацияАвансовыйОтчетПослеВыбораИзМеню", ЭтотОбъект);
	ПоказатьВыборИзМеню(ОписаниеОповещения, Список, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАвансовыйОтчетПослеВыбораИзМеню(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат.Значение = "Предоставлен" Тогда
		АвансовыйОтчетПредоставлен = Истина;
		АвансовыйОтчетТребуется = Истина;
		Элементы.ГруппаАвансовыйОтчетУказан.Видимость = Ложь;
		Элементы.ГруппаАвансовыйОтчетНеПредоставлен.Видимость = Ложь;
		Элементы.ГруппаАвансовыйОтчетПредоставлен.Видимость = Истина;
		Элементы.ГруппаАвансовыйОтчетНеТребуется.Видимость = Ложь;
	ИначеЕсли Результат.Значение = "НеПредоставлен" Тогда
		АвансовыйОтчетПредоставлен = Ложь;
		АвансовыйОтчетТребуется = Истина;
		Элементы.ГруппаАвансовыйОтчетУказан.Видимость = Ложь;
		Элементы.ГруппаАвансовыйОтчетНеПредоставлен.Видимость = Истина;
		Элементы.ГруппаАвансовыйОтчетПредоставлен.Видимость = Ложь;
		Элементы.ГруппаАвансовыйОтчетНеТребуется.Видимость = Ложь;
	ИначеЕсли Результат.Значение = "Создать" Тогда
		АвансовыйОтчетТребуется = Истина;
		Элементы.ГруппаАвансовыйОтчетУказан.Видимость = Истина;
		Элементы.ГруппаАвансовыйОтчетНеПредоставлен.Видимость = Ложь;
		Элементы.ГруппаАвансовыйОтчетПредоставлен.Видимость = Ложь;
		Элементы.ГруппаАвансовыйОтчетНеТребуется.Видимость = Ложь;
		ЗаявкиНаОплатуКлиент.НачатьСозданиеАвансовогоОтчета(ЭтотОбъект, Элементы.АвансовыйОтчет);
	ИначеЕсли Результат.Значение = "Выбрать" Тогда
		АвансовыйОтчетТребуется = Истина;
		Элементы.ГруппаАвансовыйОтчетУказан.Видимость = Истина;
		Элементы.ГруппаАвансовыйОтчетНеПредоставлен.Видимость = Ложь;
		Элементы.ГруппаАвансовыйОтчетПредоставлен.Видимость = Ложь;
		Элементы.ГруппаАвансовыйОтчетНеТребуется.Видимость = Ложь;
		ЗаявкиНаОплатуКлиент.НачатьВыборАвансовогоОтчета(ЭтотОбъект, Элементы.АвансовыйОтчет);
	ИначеЕсли Результат.Значение = "НеТребуется" Тогда
		АвансовыйОтчетПредоставлен = Ложь;
		АвансовыйОтчетТребуется = Ложь;
		Элементы.ГруппаАвансовыйОтчетУказан.Видимость = Ложь;
		Элементы.ГруппаАвансовыйОтчетНеПредоставлен.Видимость = Ложь;
		Элементы.ГруппаАвансовыйОтчетПредоставлен.Видимость = Ложь;
		Элементы.ГруппаАвансовыйОтчетНеТребуется.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АвансовыйОтчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	АвансовыйОтчет = ВыбранноеЗначение;
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		АвансовыйОтчетПредоставлен = Истина;
		Элементы.ГруппаАвансовыйОтчетПредоставлен.Видимость = Ложь;
		Элементы.ГруппаАвансовыйОтчетНеПредоставлен.Видимость = Ложь;
		Элементы.ГруппаАвансовыйОтчетУказан.Видимость = Истина;
	Иначе
		АвансовыйОтчетПредоставлен = Ложь;
		Элементы.ГруппаАвансовыйОтчетПредоставлен.Видимость = Ложь;
		Элементы.ГруппаАвансовыйОтчетНеПредоставлен.Видимость = Истина;
		Элементы.ГруппаАвансовыйОтчетУказан.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с составом документа

&НаКлиенте
Процедура СоставСтрокаПриИзменении(Элемент)
	
	Результат = ДелопроизводствоКлиент.ПолучитьСоставДокумента(Объект, СоставСтрока, НачальныйСостав); 
	СоставСтрока = Результат.Состав;
    НачальныйСостав = СоставСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаПоиска = НРег(Элемент.ТекстРедактирования);	
	Результат = ДелопроизводствоКлиент.ПолучитьСоставДокумента(Объект, СтрокаПоиска, НачальныйСостав); 
	СоставСтрока = Результат.Состав;
	
	// На случай возврата ошибки останавливаем вызов
	Если Результат.Отказ Тогда
		Возврат;
	КонецЕсли;	

	СтандартнаяОбработка = Ложь;	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КоличествоЛистов", Объект.КоличествоЛистов);
	ПараметрыФормы.Вставить("КоличествоПриложений", Объект.КоличествоПриложений);
	ПараметрыФормы.Вставить("КоличествоЭкземпляров", Объект.КоличествоЭкземпляров);
	ПараметрыФормы.Вставить("ЛистовВПриложениях", Объект.ЛистовВПриложениях);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СоставСтрокаНачалоВыбораПродолжение",
		ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.СоставДокумента", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставСтрокаНачалоВыбораПродолжение(Результат, Параметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Количество() > 0 Тогда 
		Объект.КоличествоЛистов = Результат.КоличествоЛистов;
		Объект.КоличествоПриложений = Результат.КоличествоПриложений;
		Объект.КоличествоЭкземпляров = Результат.КоличествоЭкземпляров;
		Объект.ЛистовВПриложениях = Результат.ЛистовВПриложениях;
		
        ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;	
	
	СоставСтрока = ДелопроизводствоКлиентСервер.ПолучитьСтрокуСоставДокумента(Объект);
    НачальныйСостав = СоставСтрока;
		
КонецПроцедуры	

&НаКлиенте
Процедура СоставСтрокаОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.КоличествоЛистов = 0;
	Объект.КоличествоПриложений = 0;
	Объект.КоличествоЭкземпляров = 0;
	Объект.ЛистовВПриложениях = 0;
    НачальныйСостав = Неопределено;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с делом документа

&НаКлиенте
Процедура ДелоТекстПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ДелоТекст) Тогда 
		Объект.Дело = Неопределено;
		МестоХранения = Неопределено;
		ДелоТекст = Неопределено;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДелоТекстНачалоВыбораПродолжение",
		ЭтотОбъект,
		Новый Структура("Элемент", Элемент));
			
	Если Не ЗначениеЗаполнено(Объект.Дело) 
		И Делопроизводство.КоличествоЗадач(Объект.Ссылка, Истина) > 0 Тогда 
		
		ТекстВопроса = 
			НСтр("ru = 'По документу имеются невыполненные задачи.'") 
			+ Символы.ПС 
			+ НСтр("ru = 'Вы действительно хотите поместить документ в дело?'");
			
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;	
			
КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстНачалоВыбораПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДатаРегистрации", 		Объект.ДатаРегистрации);
		ПараметрыФормы.Вставить("Организация", 			Объект.Организация);
		ПараметрыФормы.Вставить("ВидДокумента", 		Объект.ВидДокумента);
		ПараметрыФормы.Вставить("Контрагент", 			КонтрагентыДокумента());
		ПараметрыФормы.Вставить("ВопросДеятельности", 	Объект.ВопросДеятельности);
		ПараметрыФормы.Вставить("ТекущаяСтрока", 		Объект.Дело);
		ОтборНоменклатураДел = ?(ВидДокументаКэш.ВестиУчетПоНоменклатуреДел, Объект.НоменклатураДел, Неопределено);
		ПараметрыФормы.Вставить("НоменклатураДел", 		ОтборНоменклатураДел);
		ПараметрыФормы.Вставить("Подразделение", 		Объект.Подразделение);
		ПараметрыФормы.Вставить("ФормаДокумента", 		Объект.ФормаДокумента);
		ПараметрыФормы.Вставить("ГрифДоступа", 		    Объект.ГрифДоступа);
		
		Отбор = Новый Структура;
		Отбор.Вставить("ПометкаУдаления", Ложь);
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		ДелопроизводствоКлиент.ВыбратьДело(Параметры.Элемент, ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.Дело = Неопределено;
	МестоХранения = Неопределено;
	ДелоТекст = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ДелоТекст) Тогда
		ПоказатьЗначение(, Объект.Дело);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ДелаХраненияДокументов") Тогда 
		
		СтандартнаяОбработка = Ложь;
		Дело = ВыбранноеЗначение;
				
		Если ЗначениеЗаполнено(Дело) Тогда	
			
			Если Не ЗначениеЗаполнено(Объект.Дело) Тогда 
				КоличествоЗадач = Делопроизводство.КоличествоЗадач(Объект.Ссылка, Истина);
				Если КоличествоЗадач > 0 Тогда 
					
					ПараметрыОбработчика = Новый Структура();
					ПараметрыОбработчика.Вставить("Дело", Дело);
					ОписаниеОповещения = Новый ОписаниеОповещения(
						"ДелоТекстОбработкаВыбораПродолжение",
						ЭтотОбъект,
						ПараметрыОбработчика);
					
					ТекстВопроса = 
						НСтр("ru = 'По документу имеются невыполненные задачи.'") 
						+ Символы.ПС 
						+ НСтр("ru = 'Вы действительно хотите поместить документ в дело?'");
					
					ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
					Возврат;	
				КонецЕсли;
			КонецЕсли;
			
			РеквизитыДела = ОбщегоНазначенияДокументооборотВызовСервера.ЗначенияРеквизитовОбъекта(Дело, 
				"НоменклатураДел.Индекс, МестоХраненияДел"); 
			ДелоТекст = СокрЛП(Дело);
			МестоХранения = РеквизитыДела.МестоХраненияДел;
		Иначе
			ДелоТекст = Неопределено;
			МестоХранения = Неопределено;
		КонецЕсли;	

		Объект.Дело = Дело;
        Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстОбработкаВыбораПродолжение(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		МестоХранения = Неопределено;
		ДелоТекст = Неопределено;
		Возврат;
	КонецЕсли;
	
	Дело = Параметры.Дело;
	РеквизитыДела = ОбщегоНазначенияДокументооборотВызовСервера.ЗначенияРеквизитовОбъекта(Дело, 
		"НоменклатураДел.Индекс, МестоХраненияДел"); 
	ДелоТекст = СокрЛП(Дело);
	МестоХранения = РеквизитыДела.МестоХраненияДел;
	Объект.Дело = Дело;
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораДелаХранения(
			Текст, Объект.Организация, Объект.Подразделение, Объект.ФормаДокумента, Объект.ГрифДоступа);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДелоТекстОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
        СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораДелаХранения(
			Текст, Объект.Организация, Объект.Подразделение, Объект.ФормаДокумента, Объект.ГрифДоступа);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с номенклатурой дел

&НаКлиенте
Процедура НоменклатураДелНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", 			Объект.Организация);
	ПараметрыФормы.Вставить("ВидДокумента", 		Объект.ВидДокумента);
	ПараметрыФормы.Вставить("Контрагент", 			КонтрагентыДокумента());
	ПараметрыФормы.Вставить("ВопросДеятельности", 	Объект.ВопросДеятельности);
	ПараметрыФормы.Вставить("ТекущаяСтрока", 		Объект.НоменклатураДел);
	ПараметрыФормы.Вставить("Подразделение", 		Объект.Подразделение);
	ПараметрыФормы.Вставить("ФормаДокумента", 		Объект.ФормаДокумента);
	
	ОткрытьФорму("Справочник.НоменклатураДел.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДелОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОрганизацияДокумента = Объект.Организация;
	
	Если Не СовпадаетОрганизацияСовпадаетСОрганизациейНоменклатурыДел(ОрганизацияДокумента, ВыбранноеЗначение) Тогда
		ТекстПредупреждения = РедакцииКонфигурацииКлиентСервер.ОшибкаНеСовпаденияОрганизацииНоменклатурыДел();
		ПоказатьПредупреждение(, ТекстПредупреждения);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДелАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
		
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораНоменклатурыДел(
			Текст, Объект.Организация, Объект.Подразделение, Объект.ФормаДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураДелОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Делопроизводство.СформироватьДанныеВыбораНоменклатурыДел(
			Текст, Объект.Организация, Объект.Подразделение, Объект.ФормаДокумента);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с состоянием документа

&НаКлиенте
Процедура СостояниеТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОбработка;
	ПриПереключенииНаСтраницуОбработка();
		
КонецПроцедуры

&НаКлиенте
Процедура СостояниеТекстНачалоВыбораПродолжение(Результат, Параметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда 
		Если Объект.Ссылка.Пустая() Тогда 
			ПараметрыЗаписи = Новый Структура("МассивСостояний", Результат);
			Если Не Записать(ПараметрыЗаписи) Тогда 
				Возврат;
			КонецЕсли;	
		Иначе
			ИзменитьСостояние(Объект.Ссылка, Результат);
			ОповеститьОбИзменении(КлючЗаписи);
		КонецЕсли;			
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура СостояниеТекстОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеТекстОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОбработка;
	ПриПереключенииНаСтраницуОбработка();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа со связями документа

&НаКлиенте
Процедура ДеревоСвязейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;				
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
	 Или ТекущиеДанные.ЭтоРодитель Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
		ВыборФайла(ТекущиеДанные.Файл);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СвязаннаяСтрока) Тогда 
		ПерейтиПоНавигационнойСсылке(ТекущиеДанные.СвязаннаяСтрока);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СвязанныйОбъект) Тогда 
		ПоказатьЗначение(, ТекущиеДанные.СвязанныйОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПриАктивизацииСтроки(Элемент)
	
	Элементы.ДеревоСвязейОткрыть.Доступность = Ложь;
	Элементы.ДеревоСвязейКонтекстноеМенюКнопкаОткрыть.Доступность = Ложь;
	Элементы.ДеревоСвязейУдалить.Доступность = Ложь;
	Элементы.ДеревоСвязейКонтекстноеМенюКнопкаУдалить.Доступность = Ложь;
	Элементы.ДеревоСвязейКонтекстноеМенюКнопкаСкопировать.Доступность = Ложь;
	
	Элементы.ДеревоСвязейКонтекстноеМенюДеревоСвязейСохранитьКак.Доступность = Ложь;
	Элементы.ДеревоСвязейКонтекстноеМенюДеревоСвязейНапечататьФайлы.Доступность = Ложь;
	Элементы.ДеревоСвязейСохранитьКак.Доступность = Ложь;
	Элементы.ДеревоСвязейНапечататьФайлы.Доступность = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеHTMLСвязи = Неопределено;
	Элементы.ГруппаПредпросмотрУрезанСвязи.Видимость = Ложь;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
		
		Элементы.ДеревоСвязейОткрыть.Доступность = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюКнопкаОткрыть.Доступность = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюДеревоСвязейСохранитьКак.Доступность = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюДеревоСвязейНапечататьФайлы.Доступность = Истина;
		Элементы.ДеревоСвязейСохранитьКак.Доступность = Истина;
		Элементы.ДеревоСвязейНапечататьФайлы.Доступность = Истина;
		
		Если ИспользоватьПредварительныйПросмотрВСвязях Тогда
			Если ОбзорФайловКлиент.ЭтоФайлСДолгойОбработкой(ТекущиеДанные.РасширениеФайла) Тогда
				ПредставлениеHTMLСвязи = ОбзорФайловКлиент.HTMLПредставлениеСДолгойОбработкой();
			КонецЕсли;		

			ПодключитьОбработчикОжидания("ОбновитьПревьюСвязи", 0.2, Истина);
		КонецЕсли;	
		
	ИначеЕсли Не ТекущиеДанные.ЭтоРодитель Тогда 	
		
		Элементы.ДеревоСвязейОткрыть.Доступность = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюКнопкаОткрыть.Доступность = Истина;
		Элементы.ДеревоСвязейУдалить.Доступность = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюКнопкаУдалить.Доступность = Истина;
		Элементы.ДеревоСвязейКонтекстноеМенюКнопкаСкопировать.Доступность = Истина;
		
		Если ИспользоватьПредварительныйПросмотрВСвязях 
				И ДелопроизводствоКлиентСервер.ЭтоДокумент(ТекущиеДанные.СвязанныйОбъект) Тогда
			
			ПодключитьОбработчикОжидания("ОбновитьПревьюСвязи", 0.2, Истина);
		КонецЕсли;
		
	КонецЕсли; 	

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ОписаниеОповещения = Неопределено;
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		Если Не Копирование Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписатьПослеВыбораСвязи", ЭтотОбъект);
		КонецЕсли;
		
		НеПродолжатьСозданиеСвязи = Ложь;
		Если ОбязательныеТипыСвязей.Количество() <> 0 И
			ОбязательныеТипыСвязей.Количество() <> ОбязательныеСвязи.Количество() Тогда
			НеПродолжатьСозданиеСвязи = Истина;
		КонецЕсли;	
		
		ПараметрыЗаписи = Новый Структура;
		Если Не Записать(ПараметрыЗаписи) Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
			
		Если НеПродолжатьСозданиеСвязи Тогда
			Возврат;
		КонецЕсли;	
			
	КонецЕсли;

	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("УникальныйИдентификаторФормыВладельца", ЭтаФорма.УникальныйИдентификатор);
	
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы.Вставить("ТипСвязи", Элементы.ДеревоСвязей.ТекущиеДанные.ТипСвязи);
	КонецЕсли;	
	
	Если Копирование Тогда 
		ПараметрыКлюча = Новый Структура;
		ПараметрыКлюча.Вставить("Объект", Объект.Ссылка);
		ПараметрыКлюча.Вставить("ТипСвязи", ТекущиеДанные.ТипСвязи);
		ПараметрыКлюча.Вставить("СвязанныйОбъект", ТекущиеДанные.СвязанныйОбъект);
		ПараметрыКлюча.Вставить("СвязаннаяСтрока", ТекущиеДанные.СвязаннаяСтрока);
		ПараметрыКлюча.Вставить("ДополнительныйОбъектСвязи", ТекущиеДанные.ДополнительныйОбъектСвязи);
		
		ПараметрыФормы.Вставить("ЗначениеКопирования", ПолучитьКлюч(ПараметрыКлюча));
		Открытьформу("РегистрСведений.СвязиОбъектов.ФормаЗаписи", ПараметрыФормы, Элементы.ДеревоСвязей);
	Иначе 
		ОчиститьСообщения();
		Открытьформу("РегистрСведений.СвязиОбъектов.Форма.СозданиеСвязи", ПараметрыФормы,
			Элементы.ДеревоСвязей,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
		
	Если ТекущиеДанные.ЭтоРодитель Тогда		
		Если ЗначениеЗаполнено(ТекущиеДанные.ТипСвязи) Тогда
			ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.ТипСвязи);
			ОткрытьФорму("Справочник.ТипыСвязей.Форма.ФормаЭлемента", ПараметрыФормы, Элементы.ДеревоСвязей);
		КонецЕсли;	
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
		ПоказатьЗначение(, ТекущиеДанные.Файл);
	Иначе	
		ПараметрыКлюча = Новый Структура;
		ПараметрыКлюча.Вставить("Объект", Объект.Ссылка);
		ПараметрыКлюча.Вставить("ТипСвязи", ТекущиеДанные.ТипСвязи);
		ПараметрыКлюча.Вставить("СвязанныйОбъект", ТекущиеДанные.СвязанныйОбъект);
		ПараметрыКлюча.Вставить("СвязаннаяСтрока", ТекущиеДанные.СвязаннаяСтрока);
		ПараметрыКлюча.Вставить("ДополнительныйОбъектСвязи", ТекущиеДанные.ДополнительныйОбъектСвязи);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("УникальныйИдентификаторФормыВладельца", ЭтаФорма.УникальныйИдентификатор);
		ПараметрыФормы.Вставить("Ключ", ПолучитьКлюч(ПараметрыКлюча));
		Открытьформу("РегистрСведений.СвязиОбъектов.ФормаЗаписи", ПараметрыФормы, Элементы.ДеревоСвязей);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
	 Или ТекущиеДанные.ЭтоРодитель
	 Или ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда
		Возврат;
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ДеревоСвязейПередУдалениемПродолжение",
		ЭтотОбъект,
		Новый Структура("ТекущиеДанные", ТекущиеДанные));

	ПоказатьВопрос(ОписаниеОповещения, 
		НСтр("ru = 'Удалить связь?'"), 
		РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПередУдалениемПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ТекущиеДанные = Параметры.ТекущиеДанные;
		
		ПараметрыУдаления = Новый Структура;
		ПараметрыУдаления.Вставить("Документ", Объект.Ссылка);
		ПараметрыУдаления.Вставить("ТипСвязи", ТекущиеДанные.ТипСвязи);
		ПараметрыУдаления.Вставить("СвязанныйОбъект", ТекущиеДанные.СвязанныйОбъект);
		ПараметрыУдаления.Вставить("СвязаннаяСтрока", ТекущиеДанные.СвязаннаяСтрока);
		ПараметрыУдаления.Вставить("ДополнительныйОбъектСвязи", ТекущиеДанные.ДополнительныйОбъектСвязи);
		
		УдалитьСвязь(ПараметрыУдаления);
		
		КоллекцияСтрок = ДеревоСвязей.ПолучитьЭлементы();
		Для Каждого Строка Из КоллекцияСтрок Цикл
			Элементы.ДеревоСвязей.Развернуть(Строка.ПолучитьИдентификатор(), Истина)
		КонецЦикла;
		
		// Оповестим связанный документ об удалении связи
		Если ЗначениеЗаполнено(ТекущиеДанные.СвязанныйОбъект) Тогда 
			ПараметрОповещения = Новый Структура;
			ПараметрОповещения.Вставить("Документ", ТекущиеДанные.СвязанныйОбъект);
			Оповестить("ИзмененыСвязиПодчиненныхДокументов", ПараметрОповещения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	СвязанныйОбъект = ПараметрыПеретаскивания.Значение[0];
	
	Если ЗначениеЗаполнено(СвязанныйОбъект)
		И ДелопроизводствоКлиент.ДокументыМожноСвязать(Объект.Ссылка, СвязанныйОбъект) Тогда 
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
		ПараметрыФормы.Вставить("СвязанныйОбъект", СвязанныйОбъект);
		
		ОчиститьСообщения();
		Открытьформу("РегистрСведений.СвязиОбъектов.Форма.СозданиеСвязи", ПараметрыФормы,
			Элементы.ДеревоСвязей,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 			
	Иначе 
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя установить связь между выбранными объектами'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьТолькоОригиналыВСвязяхПриИзменении(Элемент)
	
	ЗаполнитьСвязи();
	
	КоллекцияСтрок = ДеревоСвязей.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияСтрок Цикл
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Элементы.ДеревоСвязей.Развернуть(ИдентификаторСтроки, Истина)
	КонецЦикла;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Работа с инструкциями

&НаКлиенте
Процедура ИнструкцияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСИнструкциямиКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, Элемент.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОригиналПолученТекстНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не Элемент.Доступность Или Элемент.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПараметрыЗаписи = Новый Структура;
		Если Не Записать(ПараметрыЗаписи) Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ПоменятьПризнакНаличияОргинала();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоменятьПризнакНаличияОргинала()
	
	Если Не Элементы.ОригиналПолученТекст.Доступность Или Элементы.ОригиналПолученТекст.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПоменятьПризнакНаличияОргиналаПродолжение",
		ЭтотОбъект);
	Если ОригиналПолучен Тогда 
		ТекстВопроса = НСтр("ru = 'Снять отметку о получении оригинала?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
	Иначе
		ТекстВопроса = НСтр("ru = 'Отметить получение оригинала?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоменятьПризнакНаличияОргиналаПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОригиналПолученТекстНажатиеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОригиналПолученТекстНажатиеНаСервере() 
	
	ОригиналПолученУстановленоВручную = Истина;
	ОригиналПолучен = Не ОригиналПолучен;
	РегистрыСведений.ДанныеДокументовПредприятия.ЗаписатьОтметкуОПолученииОригиналаДокумента(
		Объект.Ссылка, ОригиналПолучен);
	Делопроизводство.ОбновитьСведенияОПолученииОригинала(ЭтаФорма);
	ПолучитьОбзорДокумента();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с категориями документа

&НаКлиенте
Процедура СписокКатегорийДанныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Ключ", Элемент.ТекущиеДанные.Значение);
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ВыполнитьОткрытиеФормыПодбораКатегорий();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ПараметрыФормы = Новый Структура("Ключ", Элемент.ТекущиеДанные.Значение);
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	УдалитьКатегорииИзСпискаВыбранных();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКатегорийДанныхПослеУдаления(Элемент)
	
	СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок();
	Модифицированность = Истина;
	
КонецПроцедуры

// ИнтернетПоддержкаПользователей.СПАРКРиски
&НаКлиенте
Процедура ДекорацияИндексыСПАРКРискиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СПАРКРискиКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);

КонецПроцедуры

// ИнтернетПоддержкаПользователей.СПАРКРиски

&НаКлиенте
Процедура ФормаДокументаПриИзменении(Элемент)
	
	ФормаДокументаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Дополнительно

&НаКлиенте
Процедура ЗарегистрировалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СотрудникиКлиент.ВыбратьСотрудникаИзАдреснойКниги(Элемент, Объект.Зарегистрировал);
	
КонецПроцедуры

// Переадресация

&НаКлиенте
Процедура КонтактноеЛицоПереадресовавшегоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСКорреспонденциейКлиент.КонтактноеЛицоПереадресовавшегоНачалоВыбора(ЭтотОбъект,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяОтветПереадресовавшемуПриИзменении(Элемент)
	
	РаботаСКорреспонденциейКлиент.ТребуетсяОтветПереадресовавшемуПриИзменении(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданВАрхивИлиУничтоженНадписьНажатие(Элемент)
	
	Если ЗначениеЗаполнено(СтруктураСостоянияДела.Регистратор) Тогда
		ПоказатьЗначение(, СтруктураСостоянияДела.Регистратор);
	КонецЕсли;
	
КонецПроцедуры

#Область СобытияШапкиДляМэдо

&НаКлиенте
Процедура ГотовКОтправкеМЭДОПриИзменении(Элемент)
	
	Элементы.ИсторияСостоянийМЭДООтправитьПоМЭДО.Доступность = ГотовКОтправкеМЭДО;
	
КонецПроцедуры

&НаКлиенте
Процедура ГлавныйФайлМЭДОАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = ПолучитьФайлыПодходящиеДляМЭДО();

КонецПроцедуры

&НаКлиенте
Процедура ГлавныйФайлМЭДОНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтветственныйОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(Объект, "Ответственный", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйЗаХранениеОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(Объект, "ОтветственныйЗаХранение", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресатВходящейКорреспонденцииОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(
		ЭтотОбъект, "АдресатВходящейКорреспонденции", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрировалОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(Объект, "Зарегистрировал", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

#Область СобытияШапкиВопросыОбращений

&НаКлиенте
Асинх Процедура ДекорацияСостояниеССТУНажатие(Элемент)
	
	СостояниеССТУ = РаботаСОбращениямиВызовСервера.СостояниеВыгрузкиССТУДокумента(Объект.Ссылка);
	Если ЗначениеЗаполнено(СостояниеССТУ.Выгрузка) Тогда
		ОбработчикЗакрытия = Новый ОписаниеОповещения("ПослеЗакрытияВыгрузкиССТУ", ЭтотОбъект);
		ПоказатьЗначение(ОбработчикЗакрытия, СостояниеССТУ.Выгрузка);
	Иначе
		РаботаСОбращениямиКлиент.СоздатьВыгрузкуВССТУ(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГотовоКВыгрузкеССТУПриИзменении(Элемент)
	
	ОбновитьСостояниеВыгрузкиССТУ_Сервер(Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтороны

&НаКлиенте
Процедура СтороныСторонаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПараметрыТаблицыСтороны(ТекущиеДанные);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.Стороны);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
	// Отображать не по ссылке, а по ИНН, НЕ сохраняя в кэше.
	Если ИспользоватьСервисСПАРКРиски Тогда
		ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения.
		ОбновитьОтображениеИндексыСПАРК(ТекущиеДанные.Сторона);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если ТипЗнч(НедоступныеПоля) = Тип("Структура") И НедоступныеПоля.Свойство("СтороныДобавить") Тогда
		Выполнение = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЗапретУдаления
		Или ТипЗнч(НедоступныеПоля) = Тип("Структура") И НедоступныеПоля.Свойство("СтороныУдалить") Тогда
		Отказ = Истина;
	КонецЕсли;               
	
	Если ДокументБлокированПоЭДО Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	Если РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(ТекущиеДанные.Сторона)
		И ТекущиеДанные.Подписан = Истина
		И ЗначениеЗаполнено(ТекущиеДанные.Подписал)
		И ЗначениеЗаполнено(ТекущиеДанные.Установил)
		И (Не СотрудникиВызовСервера.ЭтоСотрудникПользователя(
			СотрудникиВызовСервера.ОсновнойСотрудникПользователя(ТекущиеДанные.Подписал))
			И Не СотрудникиВызовСервера.ЛюбойПользовательСотрудника(ТекущиеДанные.Установил) = ТекущийПользователь) Тогда
		
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
		ТекущиеДанные.Подписал = "";
		
		Если ТекущиеДанные.НомерСтроки > 1 Тогда
			ТекущиеДанные.Сторона = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		Иначе 
			ТекущиеДанные.Сторона = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПриИзменении(Элемент)
	
	СкопироватьКонтрагентаИОрганизациюВРеквизиты();
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ЭтоМобильныйКлиент Тогда
		// Вернем видимость скрытых полей таблицы для полного просмотра информации о стороне на МК.
		МК_УстановитьВидимостьПолейТаблицыСтороны(Истина);
	КонецЕсли;

	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	Если Поле = Элементы.СтороныСводныйИндикатор Тогда
		СтандартнаяОбработка = Ложь;
		// Откроем подсказку
		Если ТекущиеДанные.ИнформацияСпаркРиски = "SPARK:NoInformation" Тогда 
			СПАРКРискиКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект,
				Поле, ТекущиеДанные.ИнформацияСпаркРиски, Истина);
			
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СводныйИндикатор) 
			И ТекущиеДанные.СводныйИндикатор > 0 Тогда 
			СПАРКРискиКлиент.ПоказатьЗначенияИндексовКонтрагента(ТекущиеДанные.ИндексыСПАРКРиски, ЭтотОбъект);
			
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ИнформацияСпаркРиски) Тогда 
			ПерейтиПоНавигационнойСсылке(ТекущиеДанные.ИнформацияСпаркРиски);
		КонецЕсли;
	КонецЕсли;
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСПодписямиДокументовКлиент.СтороныПриАктивизацииЯчейки(ЭтаФорма, Элементы, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// Скроем поля таблицы сторон для МК.
	Если ЭтоМобильныйКлиент Тогда
		МК_УстановитьВидимостьПолейТаблицыСтороны(Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтороныПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если ТипЗнч(НедоступныеПоля) = Тип("Структура") И НедоступныеПоля.Свойство("СтороныДобавить") Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;	
	
	Если ДокументБлокированПоЭДО Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Объект.Стороны.Количество() = 0 Тогда
		ОрганизациюПоУмолчанию = РаботаСОрганизациями.ОрганизацияПоУмолчанию();
		Если ЗначениеЗаполнено(ОрганизациюПоУмолчанию) Тогда
			Отказ = Истина;
			ДобавитьСторону(ОрганизациюПоУмолчанию);
			Элементы.Стороны.ВыделенныеСтроки.Добавить(Объект.Стороны[0].ПолучитьИдентификатор());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныСторонаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	// По организациям работает быстрый выбор.
	Если ТипЗнч(ТекущиеДанные.Сторона) = Тип("СправочникСсылка.Организации") Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимРаботыФормы", 1);
	ПараметрыФормы.Вставить("УпрощенныйИнтерфейс", Истина);
	Если ТекущиеДанные.НомерСтроки > 1 Тогда
		ПараметрыФормы.Вставить("ОтображатьКонтрагентов", Истина);
		ПараметрыФормы.Вставить("ВыбиратьКонтрагентов", Истина);
	КонецЕсли;
	ПараметрыФормы.Вставить("ОтображатьОрганизации", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru = 'Выбор стороны'"));
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Сторона) Тогда
		ПараметрыФормы.Вставить("ВыбранныеАдресаты", ТекущиеДанные.Сторона);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.АдреснаяКнига.Форма.ФормаСписка",
		ПараметрыФормы,
		Элементы.СтороныСторона,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныСторонаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Организации") Тогда
		
		ТекущиеДанные.Сторона = ВыбранноеЗначение;
		ТекущиеДанные.КонтактноеЛицо = ПользователиПустаяСсылка;
		ТекущиеДанные.Подписал = "";
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		ТекущиеДанные.Сторона = ВыбранноеЗначение;
		ОсновноеКонтактноеЛицо = РаботаСКонтрагентамиВызовСервера.ОсновноеКонтактноеЛицоКонтрагента(
			ВыбранноеЗначение);
		ТекущиеДанные.КонтактноеЛицо = ОсновноеКонтактноеЛицо;
		ТекущиеДанные.Подписал = "";
		
		// СтандартныеПодсистемы.РаботаСКонтрагентами
		ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.Стороны);
		// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
		
		// ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
		// Отображать не по ссылке, а по ИНН, НЕ сохраняя в кэше.
		Если ИспользоватьСервисСПАРКРиски Тогда
			ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения.
			ОбновитьОтображениеИндексыСПАРК(ТекущиеДанные.Сторона);
		КонецЕсли;
		// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Сторона)
			Или (ЗначениеЗаполнено(ТекущиеДанные.Сторона) И ТипЗнч(ТекущиеДанные.Сторона) = Тип("СправочникСсылка.Контрагенты")) Тогда
			ТекущиеДанные.Сторона = РаботаСОрганизациями.ОрганизацияПоУмолчанию();
		КонецЕсли;
		
		ТекущиеДанные.КонтактноеЛицо = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		Контрагент = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "Владелец");
		ТекущиеДанные.Сторона = Контрагент;
		ТекущиеДанные.КонтактноеЛицо = ВыбранноеЗначение;
		
		// ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
		// Отображать не по ссылке, а по ИНН, НЕ сохраняя в кэше.
		Если ИспользоватьСервисСПАРКРиски Тогда
			ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения.
			ОбновитьОтображениеИндексыСПАРК(ТекущиеДанные.Сторона);
		КонецЕсли;
		// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
	КонецЕсли;
	
	Модифицированность = Истина;
	СкопироватьКонтрагентаИОрганизациюВРеквизиты();
	УстановитьПараметрыТаблицыСтороны(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныСторонаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
		ПараметрыПолученияДанных.Вставить("НомерСтрокиСтороны", ТекущиеДанные.НомерСтроки);
		ДанныеВыбора = РаботаСПодписямиДокументовВызовСервера.СформироватьДанныеВыбораСтороны(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныСторонаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
		ПараметрыПолученияДанных.Вставить("НомерСтрокиСтороны", ТекущиеДанные.НомерСтроки);
		ДанныеВыбора = РаботаСПодписямиДокументовВызовСервера.СформироватьДанныеВыбораСтороны(ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныКонтактноеЛицоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПараметрыТаблицыСтороны(ТекущиеДанные);	
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныКонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСПодписямиДокументовКлиент.СтороныКонтактноеЛицоНачалоВыбора(
		ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, Элементы.СтороныКонтактноеЛицо);
		
КонецПроцедуры

&НаКлиенте
Процедура СтороныКонтактноеЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Сотрудники") Тогда

		Если Не ЗначениеЗаполнено(ТекущиеДанные.Сторона)
			ИЛИ (ЗначениеЗаполнено(ТекущиеДанные.Сторона) И ТипЗнч(ТекущиеДанные.Сторона) = Тип("СправочникСсылка.Контрагенты")) Тогда
				ТекущиеДанные.Сторона = РаботаСОрганизациями.ОрганизацияПоУмолчанию();
		КонецЕсли;	
		ТекущиеДанные.КонтактноеЛицо = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		Контрагент = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "Владелец");
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Сторона)
			ИЛИ Контрагент <> ТекущиеДанные.Сторона Тогда
				ТекущиеДанные.Сторона = Контрагент;
		КонецЕсли;
		ТекущиеДанные.КонтактноеЛицо = ВыбранноеЗначение;	
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	УстановитьПараметрыТаблицыСтороны(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныКонтактноеЛицоАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
		ПараметрыПолученияДанных.Вставить("Сторона", ТекущиеДанные.Сторона);
		ДанныеВыбора = РаботаСПодписямиДокументовВызовСервера.СформироватьДанныеВыбораКонтактногоЛицаСтороны(ПараметрыПолученияДанных);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныКонтактноеЛицоОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
		ПараметрыПолученияДанных.Вставить("Сторона", ТекущиеДанные.Сторона);
		ДанныеВыбора = РаботаСПодписямиДокументовВызовСервера.СформироватьДанныеВыбораКонтактногоЛицаСтороны(ПараметрыПолученияДанных);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПодписалПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьПараметрыТаблицыСтороны(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПодписалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСПодписямиДокументовКлиент.СтороныПодписалНачалоВыбора(
		ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, Элементы.СтороныПодписал);
			
КонецПроцедуры

&НаКлиенте
Процедура СтороныПодписалОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Сотрудники") Тогда

		Если Не ЗначениеЗаполнено(ТекущиеДанные.Сторона)
			ИЛИ (ЗначениеЗаполнено(ТекущиеДанные.Сторона) И ТипЗнч(ТекущиеДанные.Сторона) = Тип("СправочникСсылка.Контрагенты")) Тогда
				ТекущиеДанные.Сторона = РаботаСОрганизациями.ОрганизацияПоУмолчанию();
		КонецЕсли;	
		
		ТекущиеДанные.Подписал = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		Контрагент = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "Владелец");
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Сторона)
			ИЛИ Контрагент <> ТекущиеДанные.Сторона Тогда
				ТекущиеДанные.Сторона = Контрагент;
		КонецЕсли;
		ТекущиеДанные.Подписал = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		Если РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(ТекущиеДанные.Сторона)
			И ПодписантыИзДействий.Количество() Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные.Подписал = ВыбранноеЗначение;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	УстановитьПараметрыТаблицыСтороны(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПодписалАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтороныПодписалАвтоПодборОкончаниеВводаТекста(Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура СтороныПодписалОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СтороныПодписалАвтоПодборОкончаниеВводаТекста(Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПодписалАвтоПодборОкончаниеВводаТекста(Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
		ПараметрыПолученияДанных.Вставить("Сторона", ТекущиеДанные.Сторона);
		ПараметрыПолученияДанных.Вставить("ЕстьПодписантыПоДействиям", ПодписантыИзДействий.Количество());
		Если ПодписантыИзДействий.Количество() Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("Ссылка", ПодписантыИзДействий);
			ПараметрыПолученияДанных.Вставить("Отбор", Отбор);
		КонецЕсли;
		ДанныеВыбора = РаботаСПодписямиДокументовВызовСервера.СформироватьДанныеВыбораПодписал(
			ПараметрыПолученияДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныПодписанПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные.Подписан Тогда 
		Если Не ЗначениеЗаполнено(ТекущиеДанные.ДатаПодписи) Тогда
			ТекущиеДанные.ДатаПодписи = ТекущаяДата();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Подписал)
			И РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(ТекущиеДанные.Сторона) Тогда
				ТекущиеДанные.Подписал = СотрудникиВызовСервера.ОсновнойСотрудник();
		КонецЕсли;
		Если ТекущиеДанные.НомерСтроки = 1 Тогда
			ДокументПодписанНами = Истина;
		КонецЕсли; 
			ТекущиеДанные.Установил = ТекущийПользователь;
		Для Каждого Сотрудник Из СотрудникиТекущегоПользователя Цикл 
			Если ТипЗнч(Сотрудник) = Тип("СправочникСсылка.Сотрудники") Тогда 
				ТекущиеДанные.Установил = Сотрудник;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтороныКомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Комментарий", ТекущиеДанные.Комментарий);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводКомментарияСтороныЗавершение", ЭтотОбъект);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ОткрытьФорму("ОбщаяФорма.ВводКомментария", ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкна);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводКомментарияСтороныЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Стороны.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Комментарий = Результат;
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтрагенты

&НаКлиенте
Процедура КонтрагентыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Если ТипЗнч(НедоступныеПоля) = Тип("Структура") И НедоступныеПоля.Свойство("КонтрагентыДобавить") Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыПередУдалением(Элемент, Отказ)
	
	Если ТипЗнч(НедоступныеПоля) = Тип("Структура") И НедоступныеПоля.Свойство("КонтрагентыУдалить")
		Или Элементы.Контрагенты.ТекущиеДанные.ЗапретУдаления Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ЭтоМобильныйКлиент Тогда
		// Вернем видимость скрытых полей таблицы для полного просмотра информации о получателях на МК.
		МК_УстановитьВидимостьПолейТаблицыКонтрагенты(Истина);
	КонецЕсли;

	ТекущиеДанные = Элементы.Контрагенты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	Если Поле = Элементы.КонтрагентыСводныйИндикатор Тогда
		// Откроем подсказку
		Если ТекущиеДанные.ИнформацияСпаркРиски = "SPARK:NoInformation" Тогда 
			СПАРКРискиКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект,
				Поле, ТекущиеДанные.ИнформацияСпаркРиски, Истина);
			
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СводныйИндикатор) 
			И ТекущиеДанные.СводныйИндикатор > 0 Тогда 
			СПАРКРискиКлиент.ПоказатьЗначенияИндексовКонтрагента(ТекущиеДанные.ИндексыСПАРКРиски, ЭтаФорма);
		
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ИнформацияСпаркРиски) Тогда 
			
			ПерейтиПоНавигационнойСсылке(ТекущиеДанные.ИнформацияСпаркРиски);
		КонецЕсли;
	КонецЕсли;
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ЭтоМобильныйКлиент Тогда
		МК_УстановитьВидимостьПолейТаблицыКонтрагенты(Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если ТипЗнч(НедоступныеПоля) = Тип("Структура") И  НедоступныеПоля.Свойство("КонтрагентыДобавить") Тогда
		Выполнение = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыПриАктивизацииСтроки(Элемент)
	
	РаботаСКорреспонденциейКлиент.КонтрагентыПриАктивизацииСтроки(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыКонтрагентПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Контрагенты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.КонтактноеЛицо = РаботаСКонтрагентамиВызовСервера.ОсновноеКонтактноеЛицоКонтрагента(
		ТекущиеДанные.Контрагент);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
    ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.Контрагенты);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
	// Отображать не по ссылке, а по ИНН, НЕ сохраняя в кэше.
	Если ИспользоватьСервисСПАРКРиски Тогда
		ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения.
		ОбновитьОтображениеИндексыСПАРК(ТекущиеДанные.Контрагент);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыКонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Контрагенты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("ОбщаяФорма.ВыборКонтрагентаКонтактноеЛицо", 
		Новый Структура("Получатель, Режим, ПометкаУдаления", 
		ТекущиеДанные.Контрагент, "КонтрагентыИСпискиРассылки", Ложь),
		Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Контрагенты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СпискиРассылкиПоКонтрагентам") Тогда 
		
		ЭлементКоллекции = Объект.Контрагенты.НайтиПоИдентификатору(Элементы.Контрагенты.ТекущаяСтрока);
		ЗаполнитьИсполнителейПоСпискуРассылки(ВыбранноеЗначение, Объект.Контрагенты.Индекс(ЭлементКоллекции));
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		ТекущиеДанные.Контрагент = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
			ВыбранноеЗначение, "Владелец");
		ТекущиеДанные.КонтактноеЛицо = ВыбранноеЗначение;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		ТекущиеДанные.Контрагент = ВыбранноеЗначение;
		ТекущиеДанные.КонтактноеЛицо = РаботаСКонтрагентамиВызовСервера.ОсновноеКонтактноеЛицоКонтрагента(
			ТекущиеДанные.Контрагент);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			
		Если ЗначениеЗаполнено(ВыбранноеЗначение.Контрагент) И ЗначениеЗаполнено(ВыбранноеЗначение.КонтактноеЛицо) Тогда
			ТекущиеДанные.Контрагент = ВыбранноеЗначение.Контрагент;
			ТекущиеДанные.КонтактноеЛицо = ВыбранноеЗначение.КонтактноеЛицо;
		Иначе
			ТекущиеДанные.Контрагент = ВыбранноеЗначение.Контрагент;
			ТекущиеДанные.КонтактноеЛицо = РаботаСКонтрагентамиВызовСервера.ОсновноеКонтактноеЛицоКонтрагента(
				ТекущиеДанные.Контрагент);
		КонецЕсли;
		
	КонецЕсли;
	
	ВыбранноеЗначение = ТекущиеДанные.Контрагент;
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыОтправленПриИзменении(Элемент)
	
	РаботаСКорреспонденциейКлиент.КонтрагентыОтправленПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыСпособОтправкиПриИзменении(Элемент)
	
	ТекДанные = Элементы.Контрагенты.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.СпособОтправки = ПредопределенноеЗначение("Справочник.СпособыДоставки.МЭДО")
		И Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда
			ВидимостьЭлементовМЭДОВФормеСервер();
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВидимостьЭлементовМЭДОВФормеСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовПодписьТекст

&НаКлиенте
Процедура ПодписьТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПодписьТекстОткрытиеИНачалоВыбора(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПодписьТекстНачалоВыбораПродолжение(Результат, Параметры) Экспорт

	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	СписокПолей = "Подписал, РезультатПодписания, ДатаПодписания,
				  |КомментарийПодписи, УстановилПодпись, ДатаУстановкиПодписи";
	ЗаполнитьЗначенияСвойств(Объект, Результат, СписокПолей);

	ПодписьТекст = ДелопроизводствоКлиентСервер.ПолучитьСтрокуПодписи(Объект);

	Если Не Объект.Ссылка.Пустая() Тогда
		Записать();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодписьТекстОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ПодписьТекстОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ПодписьТекстОткрытиеИНачалоВыбора(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПодписьТекстОткрытиеИНачалоВыбора(ТолькоПросмотр = Ложь)
	
	Если ЕстьДействияПодписания Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОбработка;
		ПриПереключенииНаСтраницуОбработка();
	Иначе
		ПараметрыФормы = Новый Структура("Подписал, РезультатПодписания, ДатаПодписания,
										 |УстановилПодпись, ДатаУстановкиПодписи, КомментарийПодписи, Шаблон");
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, Объект);
	
		ОткрыватьНаПросмотр = Элементы.ПодписьТекст.ТолькоПросмотр Или ТолькоПросмотр;
		ПараметрыФормы.Вставить("ТолькоПросмотр", ОткрыватьНаПросмотр);
	
		Если Объект.Ссылка.Пустая() Тогда
			ПараметрыФормы.Вставить("ЗаголовокКомандыЗаписать", НСтр("ru = 'Готово'"));
		КонецЕсли;
	
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодписьТекстНачалоВыбораПродолжение", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.ПодписьДокумента", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовУтверждениеТекст

&НаКлиенте
Процедура УтверждениеТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УтверждениеТекстОткрытиеИНачалоВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура УтверждениеТекстОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УтверждениеТекстОткрытиеИНачалоВыбора(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УтверждениеТекстОткрытиеИНачалоВыбора(ТолькоПросмотр = Ложь)
	
	Если ЕстьДействияУтверждения Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОбработка;
		ПриПереключенииНаСтраницуОбработка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УтверждениеТекстОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлы

&НаКлиенте
Процедура ВыборФайла(Файл)
	
	КакОткрывать = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ДействиеПоДвойномуЩелчкуМыши;
	Если КакОткрывать = "ОткрыватьКарточку" Тогда
		ПоказатьЗначение(, Файл);
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Файл, 
		Неопределено, 
		ЭтаФорма.УникальныйИдентификатор, 
		Неопределено, 
		ПредыдущийАдресФайла);
		
	Если ДанныеФайла.Свойство("ВладелецСменилПрочтенность") Тогда
		ОповеститьОбИзменении(КлючЗаписи);
	КонецЕсли;	
		
	Если ДанныеФайла.ТребуетсяСоздатьВизуализациюЭП
		И ДанныеФайла.ВизуализацияЭПДобавлена = Ложь Тогда
			
		#Если Не ВебКлиент И Не МобильныйКлиент Тогда
			// для doc файла заполним на клиенте - если не веб клиент
			РаботаСФайламиКлиент.СоздатьВизуализациюЭПВФайлеDocXls(
				ДанныеФайла, УникальныйИдентификатор);
		#КонецЕсли	
		
		КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
		Возврат;
			
	КонецЕсли;		 
		
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Элементы.Редактировать.Доступность);
	
КонецПроцедуры	

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	РезультатОткрытьКарточку = "ОткрытьКарточку";
	
	Если Результат = РезультатРедактировать Тогда
		Обработчик = Новый ОписаниеОповещения("СписокВыборПослеРедактированияФайла", ЭтотОбъект, ПараметрыВыполнения);
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	ИначеЕсли Результат = РезультатОткрытьКарточку Тогда
		ПоказатьЗначение(, ПараметрыВыполнения.ДанныеФайла.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеРедактированияФайла(Результат, ПараметрыВыполнения) Экспорт
	
	ОбновитьСтрокуФайла(ПараметрыВыполнения.ДанныеФайла.Ссылка);
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриИзменении(Элемент)
	
	МассивФайлов = Новый Массив;
	Для Каждого Строка Из Файлы.ПолучитьЭлементы() Цикл
		Если Не Строка.ЭтоРольФайла И Не Строка.ЭтоДокументЭДО Тогда
			МассивФайлов.Добавить(Строка.Ссылка);
		Иначе
			
			Для Каждого Подстрока Из Строка.ПолучитьЭлементы() Цикл
				МассивФайлов.Добавить(Подстрока.Ссылка);
			КонецЦикла;	
			
		КонецЕсли;	
			
	КонецЦикла;
	
	КоличествоФайлов = МассивФайлов.Количество();
	Элементы.НаименованиеФайла.Заголовок = ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(КоличествоФайлов);

КонецПроцедуры

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Строка = Файлы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Строка = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Строка.ЭтоРольФайла Тогда
		Возврат;
	КонецЕсли;	
	
	Если Строка.ЭтоДокумент Тогда
		Возврат;
	КонецЕсли;	

	Если Строка.ЭтоДокументЭДО Тогда
		Если ИнтерфейсЭДОДокументооборотВызовСервера.ДоступныДляЧтенияВсеДокументыПакета(Строка.ДокументЭДО) Тогда
			ПоказатьЗначение(,Строка.ДокументЭДО);
		Иначе
			ПоказатьПредупреждение(, НСтр("ru='Невозможно открыть документ ЭДО, так как он состоит в пакете, но не все документы пакета доступны для просмотра.'"));
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Строка.ПодписанЭП Или ДокументПодписан Тогда
		РаботаСФайламиКлиент.ОткрытьФайлДокумента(Строка.Ссылка, ЭтаФорма);
	Иначе	
		ВыборФайла(Строка.Ссылка);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	Элементы.НеПоказыватьДанныеОбработки.Видимость = Истина;
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;  
	
	Если ТекущиеДанные <> Неопределено
		И ИспользоватьПредпросмотрФайлов Тогда
		
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если Не ТекущиеДанные.ЭтоДокумент
				И Не ТекущиеДанные.ЭтоРольФайла Тогда  
				
				Если ОбзорФайловКлиент.ЭтоФайлСДолгойОбработкой(ТекущиеДанные.Расширение)
					И Не ТекущиеДанные.ПредпросмотрЕстьВБазе Тогда
					ПредставлениеHTML = ОбзорФайловКлиент.HTMLПредставлениеСДолгойОбработкой();
					Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
					Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
				КонецЕсли;
				
			КонецЕсли;
			Элементы.НеПоказыватьДанныеОбработки.Видимость = ТекущиеДанные.ЭтоДокумент
				Или ТекущиеДанные.ЭтоРольФайла;
		КонецЕсли;
		
		Если ТекущиеДанные.Ссылка <> ТекущийФайл Или ТекущиеДанные.ЭтоДокументЭДО Тогда
			ТекущийФайл = ТекущиеДанные.Ссылка;
			ПодключитьОбработчикОжидания("ОбновитьПревьюФайла", 0.2, Истина);
			Возврат;
		КонецЕсли;
		
	Иначе
		
		Если ПредставлениеHTML <> ПредставлениеHTMLДокумента Тогда
			ПредставлениеHTML = ПредставлениеHTMLДокумента;
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоДокумент
		Или ТекущиеДанные.ЭтоРольФайла Тогда
		
		Если ПредставлениеHTML <> ПредставлениеHTMLДокумента Тогда
			ПредставлениеHTML = ПредставлениеHTMLДокумента;
		КонецЕсли;
		
		Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
		Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
		Элементы.ПереключениеСтраниц.Видимость = Ложь;
		УстановитьВидимостьКомандМасштаба("");
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПревьюФайла()
	
	ПоказатьОбзорТекущегоФайла();
	УстановитьВидимостьСтраницОбзораФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОбзорТекущегоФайла()
	
	Если Элементы.Файлы.ТекущиеДанные = Неопределено Тогда
		Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
		Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
		ПредставлениеHTML = ПредставлениеHTMLДокумента; 
		Элементы.ПредставлениеHTML.Вывод = ИспользованиеВывода.Авто;
		Элементы.ПереключениеСтраниц.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекущийФайл = Элементы.Файлы.ТекущиеДанные.Ссылка;
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	РедактируетТекущийПользователь = Элементы.Файлы.ТекущиеДанные.РедактируетТекущийПользователь;
	
	Если ТекущиеДанные.ЭтоДокумент
		Или ТекущиеДанные.ЭтоРольФайла Тогда
		
		ПредставлениеHTML = ПредставлениеHTMLДокумента;
		Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
		Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
		УстановитьВидимостьКомандМасштаба("");   
		Элементы.ПредставлениеHTML.Вывод = ИспользованиеВывода.Авто;
		Элементы.ПереключениеСтраниц.Видимость = Ложь;
		Возврат;
		
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоДокументЭДО Тогда      
		
		Элементы.ПредставлениеHTML.Вывод = ИспользованиеВывода.Авто;
		
		ДанныеВизуализации = ОбменЭДОДокументооборотВызовСервера.ДанныеВизуализации(ТекущиеДанные.ДокументЭДО);
		СостояниеЭДО = ДанныеВизуализации.Состояние;
		
		Если ДанныеВизуализации.ТабличныйДокументСформирован Тогда 
			
			Если ТипЗнч(ДанныеВизуализации.ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
				
				ТабличныйДокументЭДО = ДанныеВизуализации.ТабличныйДокумент;  
				Элементы.ГруппаЭДОСтраницы.ТекущаяСтраница = Элементы.ГруппаЭДОТабличный;
				Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаЭДО; // только если формализованный
				
			ИначеЕсли ТипЗнч(ДанныеВизуализации.ТабличныйДокумент) = Тип("Строка") Тогда // html
				
				Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
				ПредставлениеHTML = ДанныеВизуализации.ТабличныйДокумент;
				
			КонецЕсли;
		
		Иначе
			
			ТабличныйДокументЭДО = Новый ТабличныйДокумент;
			
			Если ДанныеВизуализации.Свойство("ДвоичныеДанные") Тогда
				// тут предпросмотр
				
				Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
				
				ДвоичныеДанныеФайла  = ДанныеВизуализации.ДвоичныеДанные;
				
				ПараметрыПолученияПредставления = ОбзорФайловКлиентСервер.ПараметрыПолученияПредставления();
				
				СистемнаяИнформация = Новый СистемнаяИнформация();
				ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
				
				ПараметрыПолученияПредставления.ТребуетсяСоздатьВизуализациюЭП = Ложь;
				ПараметрыПолученияПредставления.МаксимальноеЧислоСтраницДляПредпросмотра = 10;
				ПараметрыПолученияПредставления.ПредпросмотрУрезан = Ложь;
				ПараметрыПолученияПредставления.УникальныйИдентификатор = УникальныйИдентификатор;
				ПараметрыПолученияПредставления.Расширение = ДанныеВизуализации.ПрисоединенныйФайлРасширение;
				ПараметрыПолученияПредставления.ПредпросмотрОфисныхФайлов = ПредпросмотрОфисныхФайлов;
				ПараметрыПолученияПредставления.ИдентификаторКлиента = ИдентификаторКлиента;
				ПараметрыПолученияПредставления.ПоддерживаемыеТипы = ОбзорФайловКлиентСервер.ПоддерживаемыеТипыПредпросмотра();
				ПараметрыПолученияПредставления.МасштабироватьPDFИКартинки = МасштабироватьPDFИКартинки;
				ПараметрыПолученияПредставления.ЭтоСлужебноеСообщение = Ложь;
				ПараметрыПолученияПредставления.ИспользоватьLibreOffice = Ложь;
				
				ПараметрыПолученияПредставления.Вставить("ДвоичныеДанные", ДвоичныеДанныеФайла);
				
				РеквизитыФайла = Новый Структура("ТекущаяВерсияРасширение, Зашифрован, ТекущаяВерсияРазмер, Наименование", 
					ДанныеВизуализации.ПрисоединенныйФайлРасширение, Ложь, ДвоичныеДанныеФайла.Размер(), 
					ДанныеВизуализации.ПрисоединенныйФайлПредставление);
				ДанныеФайла = Неопределено;
				ПредпросмотрУрезан = Ложь;
				ДокументPDF = Неопределено;
				
				ДанныеОбзора = ОбзорФайловКлиент.СформироватьHTMLПредставление(
					ПараметрыПолученияПредставления,
					РеквизитыФайла,
					ДанныеФайла,
					ПредпросмотрУрезан,
					ДокументPDF);
				
				ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ПредставлениеHTML, ТаймлистАвтопротоколHTML,
					РаспознанныйТекстHTML);
				
				Если ДокументPDF = Неопределено Тогда
					Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
				Иначе
					Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
					ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
					Элементы.ДокументPdfПоле.НомерТекущейСтраницы = 1;
				КонецЕсли;
					
			Иначе
				
				ПредставлениеHTML = ОбзорФайловКлиентСервер.HTMLПредставлениеНеПоддерживаемыйДокументЭДО();
				Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущийДокументЭДО = ТекущиеДанные.ДокументЭДО;
		Возврат;
	КонецЕсли;
	
	Если РедактируетТекущийПользователь Тогда
		
		ПредставлениеHTML = ОбзорФайловКлиентСервер.HTMLПредставлениеПриРедактировании();
		Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
		Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
		Элементы.ПереключениеСтраниц.Видимость = Ложь;
		
	Иначе
		
		Если ЗначениеЗаполнено(ТекущийФайл) Тогда
			
			ДокументPDF = Неопределено;
			
			ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();       
			ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
			ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.Расширение;
			ПараметрыHTMLПредставление.Размер = ТекущиеДанные.ТекущаяВерсияРазмер;
			ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
			ПараметрыHTMLПредставление.ПредпросмотрОфисныхФайлов = ПредпросмотрОфисныхФайлов;
			
			ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
				ТекущийФайл,
				ПараметрыHTMLПредставление,
				ДокументPDF);
			
			ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ПредставлениеHTML, ТаймлистАвтопротоколHTML,
				РаспознанныйТекстHTML);
			
			Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
			МасштабироватьPDFИКартинки = ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки;
			УстановитьВидимостьКомандМасштаба(ТекущиеДанные.Расширение);
			ТекущиеДанные.ПредпросмотрЕстьВБазе = Истина;
			
			НомерПорции = 1;
			ВсегоПорцийПредпросмотра = ПараметрыHTMLПредставление.ВсегоПорцийПредпросмотра;
			ОбновитьКнопкиДинамическогоСпискаКлиент();
			
			Если ДокументPDF = Неопределено Тогда
				Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
			Иначе
				Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
				ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
				Элементы.ДокументPdfПоле.НомерТекущейСтраницы = 1;
			КонецЕсли;      
			
			Элементы.ПредставлениеHTML.Вывод = ИспользованиеВывода.Запретить;
			
		Иначе
			ПредставлениеHTML = "<html><body></body></html>";
			Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
			Элементы.ПереключениеСтраниц.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыСозданиеПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКоманд(Элементы.ФайлыСоздание.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ПараметрыДобавления = Новый Структура;
	ФайлыПередНачаломДобавленияКлиент(Элемент, Отказ, Копирование, Родитель, Группа, ПараметрыДобавления);
		
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавленияКлиент(Элемент, Отказ, Копирование, Родитель, Группа, ПараметрыДобавления)
	
	ДобавлениеОригинала = ПараметрыДобавления.Свойство("ДобавлениеОригинала", ДобавлениеОригинала);
	
	РольФайла = Неопределено;
	ПараметрыДобавления.Свойство("РольФайла", РольФайла);
	
	Если ВестиУчетСканКопийОригиналовДокументов 
		И ТипЗнч(ДоступныеПоля) = Тип("Структура") 
		И ДоступныеПоля.Свойство("СоздатьФайлОригинал") 
		И Не ДоступныеПоля.Свойство("СоздатьФайлОбычный")
		И Не ДобавлениеОригинала Тогда
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В текущем состоянии ""%1"" можно добавить только скан-копию оригинала документа. Продолжить?'"),
			СостояниеТекст);
		
		СписокВариантовОтветов = Новый СписокЗначений;
		СписокВариантовОтветов.Добавить(Строка(КодВозвратаДиалога.Да));
		СписокВариантовОтветов.Добавить(Строка(КодВозвратаДиалога.Нет));
		
		ПараметрыДобавления.Вставить("ДобавлениеОригинала", ДобавлениеОригинала);
		
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Элемент", Элемент);
		ПараметрыОбработчика.Вставить("Отказ", Отказ);
		ПараметрыОбработчика.Вставить("Копирование", Копирование);
		ПараметрыОбработчика.Вставить("Родитель", Родитель);
		ПараметрыОбработчика.Вставить("Группа", Группа);
		ПараметрыОбработчика.Вставить("ПараметрыДобавления", ПараметрыДобавления);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ФайлыПередНачаломДобавленияКлиентПродолжение",
			ЭтотОбъект,
			ПараметрыОбработчика);
		
		ДелопроизводствоКлиент.ПоказатьРасширеннуюФормуВопроса(ЭтаФорма,
			НСтр("ru = 'Добавление файла'"),
			Текст,
			"ДобавлениеОригинала",
			"ЗадаватьВопросПриДобавленииСканКопииОригинала",
			СписокВариантовОтветов,,
			ОписаниеОповещения);
		Возврат;
			
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПараметрыЗаписи = Новый Структура;
		Если Не Записать(ПараметрыЗаписи) Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВладелецФайла = Объект.Ссылка;
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();                                   
	
	Если Не ЗначениеЗаполнено(РольФайла) Тогда
		Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.РольФайла) Тогда
			РольФайла = ТекущиеДанные.РольФайла;
		ИначеЕсли Файлы.ПолучитьЭлементы().Количество() <> 0 Тогда	
			СтрФайлы = Файлы.ПолучитьЭлементы()[0];
			Если ЗначениеЗаполнено(СтрФайлы.РольФайла) Тогда
				РольФайла = СтрФайлы.РольФайла;
			КонецЕсли;		
		КонецЕсли;	
	КонецЕсли;	
	
	МожноДобавитьТолькоОдинФайл = Ложь;
		
	Если (ЗначениеЗаполнено(Объект.РегистрационныйНомер) 
		Или СостояниеОбработки = ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Выполняется"))
		И ВидДокументаКэш.РолиФайлов.Количество() <> 0 И ИспользоватьРолиФайлов Тогда
		
		Если ВВидеЭтаРольТолькоОдинФайл(ВидДокументаКэш.РолиФайлов, РольФайла) Тогда
			
			НетФайловВРоли = Ложь;
			// найдем число файлов в роли
			Если ТекущиеДанные <> Неопределено Тогда
				Если ТекущиеДанные.ЭтоРольФайла Тогда
					НетФайловВРоли = (ТекущиеДанные.ПолучитьЭлементы().Количество() = 0);
				КонецЕсли;	
			КонецЕсли;	
			
			Если Не НетФайловВРоли Тогда
				
				ПоказатьПредупреждение(, 
					СтрШаблон(НСтр("ru = 'В роли ""%1"" с признаком ""Только один файл"" уже есть файл, поэтому добавить еще один файл в эту роль нельзя.' "), РольФайла));
					
				РольФайла = Неопределено;
				
				Возврат;
				
			Иначе
			
				МожноДобавитьТолькоОдинФайл = Истина;	
				
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Если Не Копирование Тогда
		Попытка
			
			РежимСоздания = ?(ДобавлениеОригинала, 2, 1);
			ДополнительныеПараметры = Новый Структура("МожноДобавитьТолькоОдинФайл", МожноДобавитьТолькоОдинФайл);
			ДополнительныеПараметры.Вставить("ДоступнаОтметкаОригинала",
				ТипЗнч(ДоступныеПоля) <> Тип("Структура")
				Или ТипЗнч(ДоступныеПоля) = Тип("Структура") И ДоступныеПоля.Свойство("СоздатьФайлОригинал"));
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеИзмененияСпискаФайлов", ЭтотОбъект);
			РаботаСФайламиКлиент.ДобавитьФайл(ОписаниеОповещения, ВладелецФайла, 
				ЭтаФорма, РежимСоздания, Истина, ДобавлениеОригинала,,,,,
				Объект.Шаблон, РольФайла, , ДополнительныеПараметры);
				
		Исключение
			ПоказатьПредупреждение(, ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаСозданияНовогоФайла(
				ИнформацияОбОшибке()));
		КонецПопытки;
	Иначе
		ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;	
		ФайлОснование = ТекущиеДанные.Ссылка;
		
		РаботаСФайламиКлиент.СкопироватьФайл(ВладелецФайла, ФайлОснование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияСпискаФайлов(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ПолучитьОбзорДокумента();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавленияКлиентПродолжение(Результат, ПараметрыОбработчика) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Или Результат = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика.ПараметрыДобавления.ДобавлениеОригинала = Истина;
	ФайлыПередНачаломДобавленияКлиент(
		ПараметрыОбработчика.Элемент, 
		ПараметрыОбработчика.Отказ, 
		ПараметрыОбработчика.Копирование, 
		ПараметрыОбработчика.Родитель, 
		ПараметрыОбработчика.Группа, 
		ПараметрыОбработчика.ПараметрыДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломИзменения(Элемент, Отказ)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		Если Элементы.Файлы.ТекущийЭлемент = Элементы.Оригинал Тогда 
			Возврат;
		КонецЕсли;	
	Иначе	
		ТекущиеДанные = Элементы.ФайлыСоздание.ТекущиеДанные;
		Если Элементы.ФайлыСоздание.ТекущийЭлемент = Элементы.ОригиналСоздание Тогда 
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	Отказ = Истина;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоРольФайла Тогда
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.ЭтоДокумент Тогда
		Возврат;
	КонецЕсли;
		
	ОткрытьКарточкуФайлаРеализация(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.ЭтоДокумент Или ТекущиеДанные.ЭтоРольФайла Или ТекущиеДанные.ЭтоДокументЭДО Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(НедоступныеПоля) = Тип("Структура")
		И НедоступныеПоля.Свойство("Удалить") Тогда
		// Удаление запрещено по НДПС
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено Тогда
		РазрешеноУдаление = Не (ЗапретитьУдалятьФайлы И ТекущиеДанные.СозданПоШаблонуДокумента);
		Если Не РазрешеноУдаление Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ФайлыПередУдалениемПродолжение",
		ЭтотОбъект,
		Новый Структура);
	ДелопроизводствоКлиент.ПометитьФайлыДокументаНаУдаление(ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		
		МассивФайлов = Параметры.МассивФайлов;
		
		КоличествоЗанятыхФайлов = Неопределено;
		ПометитьФайлыНаУдаление(МассивФайлов, Не Параметры.ПометкаУдаления, 
			КоличествоЗанятыхФайлов);
			
		Если КоличествоЗанятыхФайлов <> Неопределено Тогда
			СтандартныеПодсистемыКлиент.УстановитьПараметрКлиента(
				"КоличествоЗанятыхФайлов", 
				КоличествоЗанятыхФайлов);
		КонецЕсли;	
		
		Если ПоказыватьУдаленныеФайлы Тогда 
			Для Каждого Файл Из МассивФайлов Цикл 
				ОбновитьСтрокуФайла(Файл);
			КонецЦикла;
		КонецЕсли;
		
		Оповестить("ФайлыДокументаПомеченыНаУдаление", Объект.Ссылка);
		
		Если Параметры.ПодписанЭП Тогда
			Оповестить("ПрисоединенныйФайлПодписан", Объект.Ссылка);
		КонецЕсли;
		
		РаскрытьДеревоФайлов(); 
		
		ПолучитьОбзорДокумента();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ЭлементФайлов = Неопределено;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
		ЭлементФайлов = Элементы.Файлы;
	Иначе	
		ТекущиеДанные = Элементы.ФайлыСоздание.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.ФайлыСоздание.ВыделенныеСтроки;
		ЭлементФайлов = Элементы.ФайлыСоздание;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
		
		Если ВыделенныеСтроки.Количество() = 1 Тогда
			
			ВыбраннаяСтрока = ВыделенныеСтроки[0];
			ДанныеСтроки = ЭлементФайлов.ДанныеСтроки(ВыбраннаяСтрока);	
			ФайлСсылка = ДанныеСтроки.Ссылка;
			
			Если ЗначениеЗаполнено(ФайлСсылка) Тогда
				
				ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ФайлСсылка);
				
				ПолноеИмяПеретаскиваемогоФайла = "";
				
				Обработчик = Новый ОписаниеОповещения("ПослеПолучитьФайлВерсииВРабочийКаталог", ЭтотОбъект);
				РаботаСФайламиКлиент.ПолучитьФайлВерсииВРабочийКаталог(Обработчик, 
					ДанныеФайла, ПолноеИмяПеретаскиваемогоФайла, УникальныйИдентификатор);
					
			КонецЕсли;		
			
			Если ЗначениеЗаполнено(ПолноеИмяПеретаскиваемогоФайла) Тогда		
				Файл = Новый Файл(ПолноеИмяПеретаскиваемогоФайла);
				ПараметрыПеретаскивания.Значение = Файл;
				Возврат;
			Иначе
				Выполнение = Ложь;
				Возврат;
			КонецЕсли;	
			
		КонецЕсли;	
		
		
	#КонецЕсли
		
	МассивФайловДляПеретаскивания = Новый Массив;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			
			Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
				ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);	
			Иначе	
				ДанныеСтроки = Элементы.ФайлыСоздание.ДанныеСтроки(ВыбраннаяСтрока);	
			КонецЕсли;

			МассивФайловДляПеретаскивания.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		МассивФайловДляПеретаскивания.Добавить(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	ПараметрыПеретаскивания.Значение = МассивФайловДляПеретаскивания;
	
КонецПроцедуры

// Продолжение процедуры после получения файла на клиент
&НаКлиенте
Процедура ПослеПолучитьФайлВерсииВРабочийКаталог(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат.ФайлПолучен Тогда
		
		ПолноеИмяПеретаскиваемогоФайла = Результат.ПолноеИмяФайла;
		
		Файл = Новый Файл(ПолноеИмяПеретаскиваемогоФайла);
		Если Файл.Существует() Тогда
			Файл.УстановитьТолькоЧтение(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
		ТекущийЭлемент = Элементы.Файлы;
	Иначе	
		ТекущийЭлемент = Элементы.ФайлыСоздание;
	КонецЕсли;

	Если ТекущийЭлемент.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	РольФайла = Неопределено;
	ТекущиеДанные = Неопределено;
	Если Строка <> Неопределено Тогда
		
		ТекущиеДанные = Файлы.НайтиПоИдентификатору(Строка);
		Если ТекущиеДанные <> Неопределено Тогда
			РольФайла = ТекущиеДанные.РольФайла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если РольФайла = Неопределено И Файлы.ПолучитьЭлементы().Количество() <> 0 Тогда	
		СтрФайлы = Файлы.ПолучитьЭлементы()[0];
		Если ЗначениеЗаполнено(СтрФайлы.РольФайла) Тогда
			РольФайла = СтрФайлы.РольФайла;
		КонецЕсли;		
	КонецЕсли;	
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПараметрыЗаписи = Новый Структура;
		Если Не Записать(ПараметрыЗаписи) Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВладелецФайлаСписка = Объект.Ссылка;
	
	ОбщегоНазначенияДокументооборотКлиент.ПеретаскиваниеФайлов(
		ЭтотОбъект,
		ВладелецФайлаСписка,
		РольФайла,
		ПараметрыПеретаскивания);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскиваниеПродолжение(Результат, ПараметрыОбработчика) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Или Результат = Ложь Тогда
		ПеретаскиваниеОригинала = Ложь;
		Возврат;
	КонецЕсли;
	
	ПеретаскиваниеОригинала = Истина;
	
	ФайлыПеретаскивание(
		ПараметрыОбработчика.Элемент, 
		ПараметрыОбработчика.ПараметрыПеретаскивания, 
		ПараметрыОбработчика.СтандартнаяОбработка, 
		ПараметрыОбработчика.Строка, 
		ПараметрыОбработчика.Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура ОригиналПриИзменении(Элемент)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоРольФайла Тогда 
		ТекущиеДанные.Оригинал = Не ТекущиеДанные.Оригинал;
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя отметить как оригинал роль файла.'"));
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.СозданИзШаблона Тогда 
		ТекущиеДанные.Оригинал = Не ТекущиеДанные.Оригинал;
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя отметить как оригинал файл, созданный из шаблона.'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОригиналПриИзмененииПродолжение",
		ЭтотОбъект,
		Новый Структура("ТекущиеДанные", ТекущиеДанные));
	
	КоличествоРасширенийСканКопий = 0;
	ЭтоРасширениеСканКопии = ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(
		ТекущиеДанные.Расширение, КоличествоРасширенийСканКопий);
	Если ТекущиеДанные.Оригинал 
		И Не ЭтоРасширениеСканКопии И КоличествоРасширенийСканКопий > 0 Тогда  
		ТекстВопроса = НСтр("ru = 'Выбранный файл, возможно, не является скан-копией. 
		|Вы действительно хотите отметить его как оригинал?'");
			
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет, 
			НСтр("ru = 'Отметка оригинала'"));
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ОригиналПриИзмененииПродолжение(Результат, Параметры) Экспорт 
	
	ТекущиеДанные = Параметры.ТекущиеДанные;

	Если Результат <> КодВозвратаДиалога.Да Тогда
		ТекущиеДанные.Оригинал = Не ТекущиеДанные.Оригинал;
		Возврат;
	КонецЕсли;

	Модифицированность = Истина;
	Если ОригиналПолученУстановленоВручную = Неопределено Тогда
		ОригиналПолученУстановленоВручную = Ложь;
	КонецЕсли;
	
	Если Не (ОбязателенФайлОригинала И ЗначениеЗаполнено(Объект.РегистрационныйНомер)) Тогда
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.Оригинал И Не ТекущиеДанные.ПометкаУдаления Тогда
		УстановитьВидимостьДекорацииОтсутствуетОригинал(Ложь);
	ИначеЕсли ПолучитьВидимостьДекорацииОтсутствуетОригинал() Тогда
		Возврат;
	Иначе
		ОтсутствуетОригинал = Истина;
		Для Каждого Строка Из Файлы.ПолучитьЭлементы() Цикл
			Если Не Строка.ЭтоРольФайла И Не Строка.ЭтоДокументЭДО Тогда
				Если Строка.Оригинал И Не Строка.ПометкаУдаления Тогда
					ОтсутствуетОригинал = Ложь;
					Прервать;
				КонецЕсли;
			Иначе
				Для Каждого Подстрока Из Строка.ПолучитьЭлементы() Цикл
					Если Подстрока.Оригинал И Не Подстрока.ПометкаУдаления Тогда
						ОтсутствуетОригинал = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		Если ОтсутствуетОригинал Тогда
			УстановитьВидимостьДекорацииОтсутствуетОригинал(Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ВВидеЭтаРольТолькоОдинФайл(РолиФайлов, Роль)
	
	Для Каждого ОписаниеРоли Из РолиФайлов Цикл
		Если ОписаниеРоли.Роль = Роль И ОписаниеРоли.ТолькоОдинФайл Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции	

&НаКлиенте
Процедура ВложенияСортироватьПоИмени(Команда)

	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РольФайла = ТекущиеДанные.РольФайла;
	РаботаСФайламиВызовСервера.СортироватьФайлыПоИмениДляДокумента(Объект.Ссылка, РольФайла);
	
	ЗаполнитьСписокФайловКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПереместитьВверх(Команда)

	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоДокумент Или ТекущиеДанные.ЭтоРольФайла Или ТекущиеДанные.ЭтоДокументЭДО Тогда
		Возврат;
	КонецЕсли;
		
	Сиблинги = Неопределено;
		
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Сиблинги = Файлы.ПолучитьЭлементы();
	Иначе	
		Сиблинги = Родитель.ПолучитьЭлементы();
	КонецЕсли;		
	
	ТекИндекс = Сиблинги.Индекс(ТекущиеДанные);
	
	Если ТекИндекс = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Сиблинги.Сдвинуть(ТекИндекс, -1);
	
	ЗаписатьПорядокВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПереместитьВниз(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоДокумент Или ТекущиеДанные.ЭтоРольФайла Или ТекущиеДанные.ЭтоДокументЭДО Тогда
		Возврат;
	КонецЕсли;
		
	Сиблинги = Неопределено;
		
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Сиблинги = Файлы.ПолучитьЭлементы();
	Иначе	
		Сиблинги = Родитель.ПолучитьЭлементы();
	КонецЕсли;		
	
	ТекИндекс = Сиблинги.Индекс(ТекущиеДанные);
		
	Если ТекИндекс = Сиблинги.Количество() - 1 Тогда
		Возврат;
	КонецЕсли;	
		
	Сиблинги.Сдвинуть(ТекИндекс, 1);
	
	ЗаписатьПорядокВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура СвязатьДокументСВходящимЭДО(Команда) 
	
	ПослеВыбораДокумента = Новый ОписаниеОповещения("ОбработчикВыбораВходящегоДокументаЭДО", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Контрагент", Объект.Контрагент);
	
	ОткрытьФорму("Справочник.ДокументыПредприятия.Форма.ФормаВыбораВходящегоДокументаЭДОДляСозданияСвязи", 
		ПараметрыФормы, ЭтотОбъект,,,, ПослеВыбораДокумента);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура РазорватьСвязьСЭлектроннымДокументом(Команда)
	
	ТекстВопроса = 
		НСтр("ru = 'Связь между документами разорвется. Повторно связать документы возможно только в ручном режиме.
		|Продолжить?'");
	
	Результат = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ОтражениеВУчетеДОВызовСервера.РазорватьСвязьЭлектронногоДокументаСОбъектомУчета(Объект.Ссылка);
		
		ТекстСообщения = НСтр("ru = 'Связь с электронным документом разорвана'");
		ПоказатьОповещениеПользователя(ТекстСообщения);
		
		ПослеИзмененияСвязиСДокументомЭДО();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлыДобавленные

&НаКлиенте
Процедура ФайлыДобавленныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ФайлыДобавленные.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(ТекущиеДанные.ПолныйПуть) Тогда 
		ПараметрыЗаписи = Новый Структура;
		ТекущийФайлВСпискеДобавленныхДляОткрытия = ПолучитьИзВременногоХранилища(ТекущиеДанные.ПолныйПуть).Ссылка;
		Записать(ПараметрыЗаписи);
	ИначеЕсли ЭтоАдресВременногоХранилища(ТекущиеДанные.Адрес) Тогда 
		ПараметрыЗаписи = Новый Структура;
		ТекущийФайлВСпискеДобавленныхДляОткрытия = ТекущиеДанные.Адрес;
		Записать(ПараметрыЗаписи);
	Иначе
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(ТекущиеДанные.ПолныйПуть);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ФайлыДобавленные.ТекущиеДанные;

	Если ТекущиеДанные <> Неопределено Тогда
		РазрешеноУдаление = Не (ЗапретитьУдалятьФайлы И ТекущиеДанные.ДобавленИзШаблона);
		Если Не РазрешеноУдаление Тогда
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПослеУдаления(Элемент)
	
	КоличествоФайловТаблицы = ФайлыДобавленные.Количество();
	КоличествоФайлов = КоличествоФайловТаблицы;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
		
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавленныеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
		
	СтандартнаяОбработка = Ложь;	
		
	Если Элементы.ФайлыДобавленные.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Истина Тогда
		
		Файл = ПараметрыПеретаскивания.Значение;		
		НоваяСтрока = ФайлыДобавленные.Добавить();
		НоваяСтрока.Наименование = Файл.ИмяБезРасширения;
		НоваяСтрока.ПолныйПуть = Файл.ПолноеИмя;
		НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(Файл.Расширение);
		КоличествоФайлов = КоличествоФайлов+1;
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Ложь Тогда
		
		ПоказатьПредупреждение(, Нстр("ru = 'Выберите только файлы, но не каталоги.'"));
		Возврат;		
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() > 0 И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				Если ФайлПринятый.ЭтоФайл() Тогда // только файлы, но не каталоги											
					НоваяСтрока = ФайлыДобавленные.Добавить();
					НоваяСтрока.Наименование = ФайлПринятый.ИмяБезРасширения;
					НоваяСтрока.ПолныйПуть = ФайлПринятый.ПолноеИмя;
					НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ФайлПринятый.Расширение);										
					КоличествоФайлов = КоличествоФайлов+1;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Элементы.ФайлыДобавленные.Обновить();	
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	Если ТекущийИтогСумма = Объект.Сумма Тогда 
		Объект.Сумма = Объект.Товары.Итог("Сумма");
	КонецЕсли;
	ТекущийИтогСумма = Объект.Товары.Итог("Сумма");
	
	Если УчитыватьНДС Тогда 
		Если ТекущийИтогСуммаНДС = Объект.СуммаНДС Тогда 
			Объект.СуммаНДС = Объект.Товары.Итог("СуммаНДС");
		КонецЕсли;
		ТекущийИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС");
	КонецЕсли;
	
	ОбновитьОтображениеСуммы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПринятыеЭлементы = Новый Массив;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") 
		И ПараметрыПеретаскивания.Значение.Количество() > 0 
		И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		Для Каждого Строка Из ПараметрыПеретаскивания.Значение Цикл
			ПринятыеЭлементы.Добавить(Строка);
		КонецЦикла;	
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		ПринятыеЭлементы.Добавить(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
	
	Если ПринятыеЭлементы.Количество() > 0 Тогда
		Для Каждого ВыделеннаяСтрока Из ПринятыеЭлементы Цикл
			ТекущиеДанные = Элементы.ВсеТовары.ДанныеСтроки(ВыделеннаяСтрока);
			Если ТекущиеДанные.ЭтоГруппа Тогда 
				Обработчик = Новый ОписаниеОповещения("ПеренестиНоменклатуруПродолжение", ЭтотОбъект, 
					Новый Структура("Группа", ТекущиеДанные.Ссылка));
				ПоказатьВопрос(Обработчик, 
					НСтр("ru = 'Выбран групповой элемент.
	                     |Добавить все содержимое группы?'"), РежимДиалогаВопрос.ДаНет, 60);
				Возврат;
			
			Иначе 
				НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", ТекущиеДанные.Ссылка));
				Если НайденныеСтроки.Количество() = 0 Тогда 
					НайденнаяСтрока = Объект.Товары.Добавить();
					НайденнаяСтрока.Номенклатура = ТекущиеДанные.Ссылка;
					НайденнаяСтрока.ЕдиницаИзмерения = ТекущиеДанные.ЕдиницаИзмерения;
					НайденнаяСтрока.Цена = ТекущиеДанные.Цена;
					НайденнаяСтрока.СтавкаНДС = ТекущиеДанные.СтавкаНДС;
					НайденнаяСтрока.Количество = 1;
					ДелопроизводствоКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(НайденнаяСтрока, НайденнаяСтрока.СтавкаНДС);
				Иначе 
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
						НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + 1;
						ДелопроизводствоКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(НайденнаяСтрока, НайденнаяСтрока.СтавкаНДС);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Модифицированность = Истина;
		ТоварыПриИзменении(Элементы.Товары);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьНоменклатуру(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда 
			РеквизитыКарточки = ОбщегоНазначенияДокументооборотВызовСервера.ЗначенияРеквизитовОбъекта(
				ТекущиеДанные.Номенклатура, "СтавкаНДС, Цена, ЕдиницаИзмерения");
			ТекущиеДанные.Цена = РеквизитыКарточки.Цена;
			ТекущиеДанные.СтавкаНДС = РеквизитыКарточки.СтавкаНДС;
			ТекущиеДанные.ЕдиницаИзмерения = РеквизитыКарточки.ЕдиницаИзмерения;
			
			Если ТекущиеДанные.Количество = 0 Тогда 
				ТекущиеДанные.Количество = 1;
			КонецЕсли;
			
			ДелопроизводствоКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(ТекущиеДанные, ТекущиеДанные.СтавкаНДС);
		Иначе 
			ТекущиеДанные.Номенклатура = Неопределено;
			ТекущиеДанные.Цена = 0;
			ТекущиеДанные.СтавкаНДС = Неопределено;
			ТекущиеДанные.Сумма = 0;
			ТекущиеДанные.СуммаНДС = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ДелопроизводствоКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(ТекущиеДанные, ТекущиеДанные.СтавкаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ДелопроизводствоКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(ТекущиеДанные, ТекущиеДанные.СтавкаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ДелопроизводствоКлиентСервер.ПересчитатьСуммуНДСВСтрокеТЧ(ТекущиеДанные, ТекущиеДанные.СтавкаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = УчетНДСВызовСервера.СформироватьДанныеВыбораСтавкиНДС(, ?(ЗначениеЗаполнено(Объект.ДатаРегистрации),
		Объект.ДатаРегистрации, Объект.ДатаСоздания));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ДатаРегистрации) Тогда
		ДанныеВыбора = УчетНДСВызовСервера.СформироватьДанныеВыбораСтавкиНДС(Текст, Объект.ДатаРегистрации);
	ИначеЕсли ЗначениеЗаполнено(Текст) Тогда
		ДанныеВыбора = УчетНДСВызовСервера.СформироватьДанныеВыбораСтавкиНДС(Текст);
	ИначеЕсли Не ЗначениеЗаполнено(Текст) Тогда
		ДанныеВыбора = УчетНДСВызовСервера.СформироватьДанныеВыбораСтавкиНДС(, Объект.ДатаСоздания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ДатаРегистрации) Тогда
		ДанныеВыбора = УчетНДСВызовСервера.СформироватьДанныеВыбораСтавкиНДС(Текст, Объект.ДатаРегистрации);
	ИначеЕсли ЗначениеЗаполнено(Текст) Тогда
		ДанныеВыбора = УчетНДСВызовСервера.СформироватьДанныеВыбораСтавкиНДС(Текст);
	ИначеЕсли Не ЗначениеЗаполнено(Текст) Тогда
		ДанныеВыбора = УчетНДСВызовСервера.СформироватьДанныеВыбораСтавкиНДС(, Объект.ДатаСоздания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ДелопроизводствоКлиентСервер.ПересчитатьЦенуПоСуммеВСтрокеТЧ(ТекущиеДанные, ТекущиеДанные.СтавкаНДС);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРабочаяГруппа

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСАдреснойКнигойКлиент.ВыбратьУчастникаРабочейГруппы(ЭтаФорма, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСРабочимиГруппамиКлиент.ДокументРабочаяГруппаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСРабочимиГруппамиКлиент.ДокументРабочаяГруппаУчастникАвтоПодбор(Элемент, Текст, ДанныеВыбора, Неопределено, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаУчастникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СотрудникиКлиент.ОбработкаВыбораКонтейнера(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриНачалеРедактирования(Элемент, НоваяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаПриОкончанииРедактирования(
		ЭтаФорма,
		Элемент,
		ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалением(Элемент, Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РабочаяГруппаТаблицаПередУдалениемПродолжение",
		ЭтотОбъект);
	РаботаСРабочимиГруппамиКлиент.РабочаяГруппаТаблицаПередУдалением(ЭтаФорма, Отказ, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаТаблицаПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	ТаблицаРГ = Элементы.РабочаяГруппаТаблица;
	Для Каждого Индекс Из ТаблицаРГ.ВыделенныеСтроки Цикл
		РабочаяГруппаТаблица.Удалить(ТаблицаРГ.ДанныеСтроки(Индекс));
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСоставКомплекта 

&НаКлиенте
Процедура СоставКомплектаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	РаботаСКомплектамиДокументовКлиент.СоставКомплектаВыбор(ЭтаФорма, Элемент, Поле, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаПриАктивизацииСтроки(Элемент)
	РаботаСКомплектамиДокументовКлиент.СоставКомплектаПриАктивизацииСтроки(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	РаботаСКомплектамиДокументовКлиент.СоставКомплектаПередНачаломДобавления(ЭтаФорма, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущийЭлемент = Элементы.СоставКомплектаКомментарий
		И Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Отказ = Истина;
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаОткрытьКарточку(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаПередУдалением(Элемент, Отказ)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаУдалить(ЭтаФорма, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РаботаСКомплектамиДокументовКлиент.СоставКомплектаДобавитьЭлементы(ЭтаФорма, ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	РаботаСКомплектамиДокументовКлиент.СоставКомплектаДобавитьЭлементы(ЭтаФорма, ПараметрыПеретаскивания.Значение);
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаКомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаИзменитьКомментарий(ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭлектронныеПодписи

&НаКлиенте
Процедура ТаблицаПодписейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ЭлектронныеПодписи.ТекущиеДанные;
	
	Если ДелопроизводствоКлиентСервер.ЭтоФайл(ТекущиеДанные.Объект)
		И Не ЗначениеЗаполнено(ТекущиеДанные.ДатаПодписи) Тогда
		
		ВыборФайла(ТекущиеДанные.Объект);
	Иначе
		РаботаСЭПКлиент.ОткрытьПодпись(ТекущиеДанные, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодписейПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандСпискаПодписей(Элементы.ЭлектронныеПодписи.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодписейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодписейПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	РаботаСЭПКлиент.ОткрытьПодпись(Элементы.ЭлектронныеПодписи.ТекущиеДанные, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПодписейПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ЭлектронныеПодписи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		ИЛИ ТекущиеДанные.Объект = Неопределено
		ИЛИ ТекущиеДанные.Объект.Пустая() Тогда
		
		Возврат;
	КонецЕсли;
	
	УдалитьПодписи();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсторияСостоянийМЭДО

&НаКлиенте
Процедура ИсторияСостоянийМЭДОВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ИсторияСостоянийМЭДО.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Описание = Новый ОписаниеОповещения("ОбновитьИсториюСостоянийМЭДОКлиент", ЭтотОбъект, Неопределено);
	ПоказатьЗначение(Описание, ТекущиеДанные.ПредметСообщения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовОбращенийИКорреспонденции

&НаКлиенте
Процедура МнениеАвтораОРезультатахПриИзменении(Элемент)
	
	ИзменилсяКодВопроса();
	
КонецПроцедуры

&НаКлиенте
Процедура МнениеАвтораОРезультатахНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводКомментарияМнениеАвтораОРезультатахЗавершение", ЭтотОбъект);
	РаботаСОбращениямиКлиент.ВвестиКомментарий(
		ОписаниеОповещения, НСтр("ru = 'Мнение заявителя о результатах'"), МнениеАвтораОРезультатах);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводКомментарияМнениеАвтораОРезультатахЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	МнениеАвтораОРезультатах = Результат;
	ИзменилсяКодВопроса();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура МнениеАвтораОМерахПриИзменении(Элемент)
	
	ИзменилсяКодВопроса();
	
КонецПроцедуры

&НаКлиенте
Процедура МнениеАвтораОМерахНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводКомментарияМнениеАвтораОМерахЗавершение", ЭтотОбъект);
	РаботаСОбращениямиКлиент.ВвестиКомментарий(
		ОписаниеОповещения, НСтр("ru = 'Мнение заявителя о мерах'"), МнениеАвтораОМерах);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводКомментарияМнениеАвтораОМерахЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	МнениеАвтораОМерах = Результат;
	ИзменилсяКодВопроса();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатРассмотренияПриИзменении(Элемент)
	
	РаботаСОбращениямиКлиент.РезультатРассмотренияПриИзменении(ЭтотОбъект);
	ИзменилсяКодВопроса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганДляПередачиПриИзменении(Элемент)
	
	СопроводительныйДокумент = Неопределено;
	СопроводительныйДокументСтрока = Неопределено;
	ИзменилсяКодВопроса();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с "Сопроводительный документ"

&НаКлиенте
Процедура СопроводительныйДокументСтрокаПриИзменении(Элемент)
	
	РаботаСОбращениямиКлиент.СопроводительныйДокументПриИзменении(ЭтаФорма, Элемент);
	ИзменилсяКодВопроса();
	
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныйДокументСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСОбращениямиКлиент.СопроводительныйДокументНачалоВыбора(
		ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныйДокументСтрокаОчистка(Элемент, СтандартнаяОбработка)
	
	РаботаСОбращениямиКлиент.СопроводительныйДокументОчистка(
		ЭтаФорма, Элемент, СтандартнаяОбработка);
	ИзменилсяКодВопроса();
	
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныйДокументСтрокаОткрытие(Элемент, СтандартнаяОбработка)
	
	РаботаСОбращениямиКлиент.СопроводительныйДокументОткрытие(
		ЭтаФорма, Элемент, СтандартнаяОбработка); 
	
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныйДокументСтрокаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСОбращениямиКлиент.СопроводительныйДокументОбработкаВыбора(
		ЭтаФорма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	ИзменилсяКодВопроса();
	
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныйДокументСтрокаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСОбращениямиКлиент.СопроводительныйДокументАвтоПодбор(
		ЭтаФорма, Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныйДокументСтрокаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСОбращениямиКлиент.СопроводительныйДокументОкончаниеВводаТекста(
		ЭтаФорма, Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с "Ответный документ"

&НаКлиенте
Процедура ОтветныйДокументСтрокаПриИзменении(Элемент)
	
	РаботаСОбращениямиКлиент.ОтветныйДокументПриИзменении(ЭтаФорма, Элемент);
	ИзменилсяКодВопроса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветныйДокументСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСОбращениямиКлиент.ОтветныйДокументНачалоВыбора(
		ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветныйДокументСтрокаОчистка(Элемент, СтандартнаяОбработка)
	
	РаботаСОбращениямиКлиент.ОтветныйДокументОчистка(
		ЭтаФорма, Элемент, СтандартнаяОбработка);
	ИзменилсяКодВопроса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветныйДокументСтрокаОткрытие(Элемент, СтандартнаяОбработка)
	
	РаботаСОбращениямиКлиент.ОтветныйДокументОткрытие(
		ЭтаФорма, Элемент, СтандартнаяОбработка); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветныйДокументСтрокаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСОбращениямиКлиент.ОтветныйДокументОбработкаВыбора(
		ЭтаФорма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	ИзменилсяКодВопроса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветныйДокументСтрокаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСОбращениямиКлиент.ОтветныйДокументАвтоПодбор(
		ЭтаФорма, Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветныйДокументСтрокаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСОбращениямиКлиент.ОтветныйДокументОкончаниеВводаТекста(
		ЭтаФорма, Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с кодом вопроса

&НаКлиенте
Процедура КодВопросаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСОбращениямиКлиент.ВвестиКодВопроса(ЭтаФорма,, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КодВопросаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Обработчик = Новый ОписаниеОповещения("КодВопросаПослеВыбора", 
		ЭтотОбъект);
	РаботаСОбращениямиКлиент.ВвестиКодВопроса(ЭтаФорма, Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура КодВопросаПослеВыбора(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда 
		Раздел = Результат.Раздел;
		Тематика = Результат.Тематика;
		Тема = Результат.Тема;
		Вопрос = Результат.Вопрос;
		КодВопроса = Результат.КодВопроса;
		
		ИзменилсяКодВопроса();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодВопросаОчистка(Элемент, СтандартнаяОбработка)
	
	Раздел = Неопределено;
	Тематика = Неопределено;
	Тема = Неопределено;
	Вопрос = Неопределено;
	КодВопроса = "";
	ВопросыОбращения.Очистить();
	КоличествоВопросовОбращения = ВопросыОбращения.Количество();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтветаПриИзменении(Элемент)
	
	ИзменилсяКодВопроса();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Работа с таблицей Вопросы

&НаКлиенте
Процедура ВопросыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Обработчик = Новый ОписаниеОповещения("КодыВопросовПослеДобавления", 
			ЭтотОбъект);
	Иначе 
		Обработчик = Новый ОписаниеОповещения(
			"ВводНовойСтрокиПослеВыбораВопросаЗавершение", 
			ЭтотОбъект);
	КонецЕсли;
	
	РаботаСОбращениямиКлиент.ПриДобавленииВопроса(ЭтаФорма, Отказ, Копирование, Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура КодыВопросовПослеДобавления(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда 
		НоваяСтрока = ВопросыОбращения.Добавить();
		НоваяСтрока.Раздел = Результат.Раздел;
		НоваяСтрока.Тематика = Результат.Тематика;
		НоваяСтрока.Тема = Результат.Тема;
		НоваяСтрока.Вопрос = Результат.Вопрос;
		НоваяСтрока.КодВопроса = Результат.КодВопроса;
		
		НоваяСтрока.РезультатРассмотрения = Результат.РезультатРассмотрения;
		НоваяСтрока.ДатаОтвета = Результат.ДатаОтвета;
		НоваяСтрока.ОрганДляПередачи = Результат.ОрганДляПередачи;
		
		НоваяСтрока.СопроводительныйДокументСтрока = Результат.СопроводительныйДокументСтрока;
		НоваяСтрока.СопроводительныйДокумент = Результат.СопроводительныйДокумент;
		
		НоваяСтрока.ОтветныйДокумент = Результат.ОтветныйДокумент;
		НоваяСтрока.ОтветныйДокументСтрока = Результат.ОтветныйДокументСтрока;
		
		Если ЗначениеЗаполнено(НоваяСтрока.ОтветныйДокументСтрока) Тогда 
			НоваяСтрока.Документ = НоваяСтрока.ОтветныйДокументСтрока;
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.СопроводительныйДокументСтрока) Тогда 
			НоваяСтрока.Документ = НоваяСтрока.СопроводительныйДокументСтрока;
		КонецЕсли;
		
		НоваяСтрока.МнениеАвтораОРезультатах = Результат.МнениеАвтораОРезультатах;
		НоваяСтрока.МнениеАвтораОМерах = Результат.МнениеАвтораОМерах;
		
		Модифицированность = Истина;
		Элементы.Вопросы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
		КоличествоВопросовОбращения = ВопросыОбращения.Количество();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросыПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Вопросы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("КодыВопросовПослеВыбора", 
		ЭтотОбъект, Новый Структура("ТекущиеДанные", ТекущиеДанные));
	РаботаСОбращениямиКлиент.ПриДобавленииВопроса(
		ЭтаФорма, Отказ, Истина, Обработчик, НСтр("ru = 'Вопрос из тематического классификатора'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КодыВопросовРазделПриИзменении(Элемент)
	
	ОбновитьКодВопросаВТаблице();
	
КонецПроцедуры

&НаКлиенте
Процедура КодыВопросовТематикаПриИзменении(Элемент)
	
	ОбновитьКодВопросаВТаблице();
	
КонецПроцедуры

&НаКлиенте
Процедура КодыВопросовТемаПриИзменении(Элемент)
	
	ОбновитьКодВопросаВТаблице();
	
КонецПроцедуры

&НаКлиенте
Процедура КодыВопросовВопросПриИзменении(Элемент)
	
	ОбновитьКодВопросаВТаблице();
	
КонецПроцедуры

&НаКлиенте
Процедура КодыВопросовКодВопросаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Вопросы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("КодыВопросовПослеВыбора", 
		ЭтотОбъект, Новый Структура("ТекущиеДанные", ТекущиеДанные));
	РаботаСОбращениямиКлиент.ПриДобавленииВопроса(ЭтаФорма, СтандартнаяОбработка, Истина, Обработчик);

КонецПроцедуры

&НаКлиенте
Процедура КодыВопросовПослеВыбора(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда 
		ТекущиеДанные = Параметры.ТекущиеДанные;
		ТекущиеДанные.Раздел = Результат.Раздел;
		ТекущиеДанные.Тематика = Результат.Тематика;
		ТекущиеДанные.Тема = Результат.Тема;
		ТекущиеДанные.Вопрос = Результат.Вопрос;
		ТекущиеДанные.КодВопроса = Результат.КодВопроса;
		
		ТекущиеДанные.РезультатРассмотрения = Результат.РезультатРассмотрения;
		ТекущиеДанные.ДатаОтвета = Результат.ДатаОтвета;
		ТекущиеДанные.ОрганДляПередачи = Результат.ОрганДляПередачи;
		ТекущиеДанные.СопроводительныйДокументСтрока = Результат.СопроводительныйДокументСтрока;
		ТекущиеДанные.СопроводительныйДокумент = Результат.СопроводительныйДокумент;
		ТекущиеДанные.ОтветныйДокумент = Результат.ОтветныйДокумент;
		ТекущиеДанные.ОтветныйДокументСтрока = Результат.ОтветныйДокументСтрока;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ОтветныйДокументСтрока) Тогда 
			ТекущиеДанные.Документ = ТекущиеДанные.ОтветныйДокументСтрока;
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СопроводительныйДокументСтрока) Тогда 
			ТекущиеДанные.Документ = ТекущиеДанные.СопроводительныйДокументСтрока;
		КонецЕсли;
		
		ТекущиеДанные.МнениеАвтораОРезультатах = Результат.МнениеАвтораОРезультатах;
		ТекущиеДанные.МнениеАвтораОМерах = Результат.МнениеАвтораОМерах;
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНовойСтрокиПослеВыбораВопросаЗавершение(Результат, Параметры) Экспорт 
		
	Если Не Результат = Неопределено Тогда 
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
		ПараметрыФормы.Вставить("Отправитель", Неопределено);
		ПараметрыФормы.Вставить("Раздел", Результат.Раздел);
		ПараметрыФормы.Вставить("Тематика", Результат.Тематика);
		ПараметрыФормы.Вставить("Тема", Результат.Тема);
		ПараметрыФормы.Вставить("Вопрос", Результат.Вопрос);
		ПараметрыФормы.Вставить("КодВопроса", Результат.КодВопроса);
		
		ПараметрыФормы.Вставить("РезультатРассмотрения", Неопределено);
		ПараметрыФормы.Вставить("ДатаОтвета", Неопределено);
		ПараметрыФормы.Вставить("ОрганДляПередачи", Неопределено);
		ПараметрыФормы.Вставить("СопроводительныйДокументСтрока", Неопределено);
		ПараметрыФормы.Вставить("СопроводительныйДокумент", Неопределено);
		ПараметрыФормы.Вставить("ОтветныйДокумент", Неопределено);
		ПараметрыФормы.Вставить("ОтветныйДокументСтрока", Неопределено);
		
		ПараметрыФормы.Вставить("МнениеАвтораОРезультатах", Неопределено);
		ПараметрыФормы.Вставить("МнениеАвтораОМерах", Неопределено);
		
		ПараметрыФормы.Вставить("КлючСохраненияПоложенияОкна", "ВыборНесколькихВопросов");
		
		ОткрытьФорму(
			"Справочник.ДокументыПредприятия.Форма.ФормаВыбораИзКлассификатора",
			ПараметрыФормы, , , , ,
			Новый ОписаниеОповещения("КодыВопросовПослеДобавления", ЭтотОбъект, Параметры),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Обращения граждан

&НаКлиенте
Процедура ПовторноеПриИзменении(Элемент)
	
	РаботаСОбращениямиКлиент.ПовторноеПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДубликатПриИзменении(Элемент)
	
	РаботаСОбращениямиКлиент.ДубликатПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОбращенияПриИзменении(Элемент)
	
	РаботаСОбращениямиКлиент.ВидОбращенияПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПервичноеОбращениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСОбращениямиКлиент.ПервичноеОбращениеНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПервичноеОбращениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСОбращениямиКлиент.ОбращениеАвтоПодбор(ЭтаФорма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПервичноеОбращениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСОбращениямиКлиент.ОбращениеАвтоПодбор(ЭтаФорма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, 0, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновноеОбращениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСОбращениямиКлиент.ОбращениеАвтоПодбор(ЭтаФорма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновноеОбращениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСОбращениямиКлиент.ОбращениеАвтоПодбор(ЭтаФорма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, 0, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновноеОбращениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСОбращениямиКлиент.ОсновноеОбращениеНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Работа с корреспонденцией

&НаКлиенте
Процедура АдресатКорреспонденцииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(АдресатВходящейКорреспонденции) И Не НельзяМенятьПодразделение Тогда 
		Объект.Подразделение = РаботаСПользователями.ПолучитьПодразделение(АдресатВходящейКорреспонденции);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресатВходящейКорреспонденцииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СотрудникиКлиент.ВыбратьСотрудникаИзАдреснойКниги(Элемент, АдресатВходящейКорреспонденции);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправленПриИзменении(Элемент)
	
	РаботаСКорреспонденциейКлиент.ОтправленПриИзменении(ЭтотОбъект, Элемент);
	
	СкопироватьКонтрагентаИзРеквизитовВСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящийНомерПриИзменении(Элемент)
	
	СкопироватьКонтрагентаИзРеквизитовВСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящаяДатаПриИзменении(Элемент)
	
	СкопироватьКонтрагентаИзРеквизитовВСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОтправкиПриИзменении(Элемент)
	
	СкопироватьКонтрагентаИзРеквизитовВСписок();
	
	Если СпособОтправки = ПредопределенноеЗначение("Справочник.СпособыДоставки.МЭДО")
		И Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			ВидимостьЭлементовМЭДОВФормеСервер();
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ВидимостьЭлементовМЭДОВФормеСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтправкиПриИзменении(Элемент)
	
	СкопироватьКонтрагентаИзРеквизитовВСписок();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с "В ответ на"

&НаКлиенте
Процедура ВОтветНаСтрокаПриИзменении(Элемент)
	
	РаботаСКорреспонденциейКлиент.ВОтветНаСтрокаПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВОтветНаСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСКорреспонденциейКлиент.ВОтветНаСтрокаНачалоВыбора(
		ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВОтветНаСтрокаОчистка(Элемент, СтандартнаяОбработка)
	
	РаботаСКорреспонденциейКлиент.ВОтветНаСтрокаОчистка(ЭтаФорма, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВОтветНаСтрокаОткрытие(Элемент, СтандартнаяОбработка)
	
	РаботаСКорреспонденциейКлиент.ВОтветНаСтрокаОткрытие(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВОтветНаСтрокаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКорреспонденциейКлиент.ВОтветНаСтрокаОбработкаВыбора(
		ЭтаФорма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВОтветНаСтрокаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСКорреспонденциейКлиент.ВОтветНаСтрокаАвтоПодбор(
		ЭтаФорма, Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВОтветНаСтрокаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСКорреспонденциейКлиент.ВОтветНаСтрокаОкончаниеВводаТекста(
		ЭтаФорма, Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НесколькоВОтветНа(Команда)
	
	РаботаСКорреспонденциейКлиент.НесколькоВОтветНа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НесколькоПредметовПереписки(Команда)
	
	РаботаСКорреспонденциейКлиент.НесколькоПредметовПереписки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПредметовПерепискиЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСКорреспонденциейКлиент.СписокПредметовПерепискиЗначениеОбработкаВыбора(ЭтотОбъект,
		Элемент,
		ВыбранноеЗначение,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокВОтветНа

&НаКлиенте
Процедура СписокВОтветНаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСКорреспонденциейКлиент.ВОтветНаСтрокаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВОтветНаЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	РаботаСКорреспонденциейКлиент.ВОтветНаСтрокаОбработкаВыбора(ЭтотОбъект,
		Элемент,
		ВыбранноеЗначение,
		СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура СписокВОтветНаЗначениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСКорреспонденциейКлиент.ВОтветНаСтрокаАвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВОтветНаЗначениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСКорреспонденциейКлиент.ВОтветНаСтрокаОкончаниеВводаТекста(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВОтветНаПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	РаботаСКорреспонденциейКлиент.ВОтветНаСтрокаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СписокВОтветНаПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РаботаСКорреспонденциейКлиент.ВОтветНаСтрокаОбработкаВыбора(ЭтотОбъект,
		Элемент,
		ВыбранноеЗначение,
		СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СписокВОтветНаПредставлениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	РаботаСКорреспонденциейКлиент.ВОтветНаСтрокаАвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СписокВОтветНаПредставлениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	РаботаСКорреспонденциейКлиент.ВОтветНаСтрокаОкончаниеВводаТекста(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СписокВОтветНаПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Элементы.СписокВОтветНа.ТекущиеДанные.Значение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДействия

&НаКлиенте
Процедура ДействияПриИзменении(Элемент)
	
	ДействияКлиент.ДействияПриИзменении(ЭтотОбъект,
		Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДействияКлиент.ДействияВыбор(ЭтотОбъект,
		Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПриАктивизацииСтроки(Элемент)
	
	ДействияКлиент.ДействияПриАктивизацииСтроки(ЭтотОбъект,
		Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПередНачаломИзменения(Элемент, Отказ)
	
	ДействияКлиент.ДействияПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ДействияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ОбработчикОповещения = Новый ОписаниеОповещения("ДобавитьДействиеЗавершение", ЭтотОбъект);
	ПараметрыОбъектаОбработки = ДействияКлиентСервер.ПараметрыОбъектаОбработки(
		Объект.Ссылка,
		Объект);
	ДействияКлиент.ДобавитьДействиеИзКарточкиПредмета(
		ЭтотОбъект,
		ОбработчикОповещения,
		ПараметрыОбъектаОбработки,
		ПараметрыВидаОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПередРазворачиванием(Элемент, Строка, Отказ)
	
	ДействияКлиент.ДействияПередРазворачиванием(ЭтотОбъект, Элемент, Строка, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПередУдалением(Элемент, Отказ)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДействияПередУдалениемПродолжение",
		ЭтотОбъект, Новый Структура);
	ДействияКлиент.ДействияПередУдалением(
		ЭтотОбъект,
		Элемент,
		Отказ,
		ОписаниеОповещения,
		ПараметрыВидаОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПослеУдаления(Элемент)
	
	ДействияКлиент.ДействияПослеУдаления(ЭтотОбъект,
		Элемент);
		
	ДействияПослеУдаленияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДействияПослеУдаленияНаСервере()
	
	ОбновитьПараметрыВидаОбъекта();
	ДействияСервер.ЗаполнитьРеквизитыПодписанияУтвержденияВФорме(
		ЭтотОбъект,
		ПараметрыВидаОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура ДействияПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	МассивДействий = Новый Массив;
	Если Результат = КодВозвратаДиалога.Да Тогда 
		МассивДействий.Добавить(Параметры.ТекущиеДанные.Действие);
	КонецЕсли;
	
	ПометитьДействияНаУдаление(МассивДействий);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура МК_СтраницаЭП(Команда)
	
	МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.ГруппаЭП, Элементы.МК_КнопкаСтраницаЭП);
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаФайлы(Команда)
	
	МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.СтраницаФайлы, Элементы.МК_КнопкаСтраницаФайлы);
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаОбзор(Команда)
	
	МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.Обзор, Элементы.МК_КнопкаСтраницаОбзор);
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаОсновное(Команда)
	
	МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.ГруппаОсновные, Элементы.МК_КнопкаСтраницаОсновное);
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаКонтрагенты(Команда)
	
	МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.ГруппаКонтрагенты, Элементы.МК_КнопкаСтраницаКонтрагенты);

КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаОбработка(Команда)
	
	МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.СтраницаОбработка, Элементы.МК_КнопкаСтраницаОбработка);

КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаКатегории(Команда)
	
	МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.Категории, Элементы.МК_КнопкаСтраницаКатегории);

КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаРабочаяГруппа(Команда)
	
	МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.ГруппаДоступ, Элементы.МК_КнопкаСтраницаРабочаяГруппа);

КонецПроцедуры

&НаКлиенте
Процедура МК_ПоказатьСкрытьДеревоОбзора(Команда)

	Элементы.Файлы.Видимость = Не Элементы.Файлы.Видимость;
	МК_ПоказатьСкрытьДеревоОбзораПродолжение();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоШаблонуПродолжение", ЭтотОбъект);
	РаботаСШаблонамиДокументовКлиент.ПоказатьФормуЗаполненияДокументаПоШаблону(
		ОписаниеОповещения,
		"ШаблоныДокументов", 
		Объект.Папка);
		
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПрервавшегоОбработку(Команда)
	ПоказатьЗначение(, ПрервалРасшифровка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуПродолжение(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено
		И ТипЗнч(Результат) <> Тип("Строка") Тогда
		ЗаполнитьПоШаблонуВыполнить(Результат.ШаблонДокумента);
	ИначеЕсли ТипЗнч(Результат) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не найдено доступных шаблонов документов.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСрокДействияСвязанногоДокумента(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Выбор связанного документа'"));
	ПараметрыОткрытия.Вставить("СвязанныйОбъект", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ПоказыватьКомандуСоздать", Ложь);
	ПараметрыОткрытия.Вставить("ИспользоватьИерархию", Ложь);
	ОткрытьФорму("Справочник.ДокументыПредприятия.ФормаВыбора", ПараметрыОткрытия, ЭтаФорма, "ПодборСвязанногоДокумента");
	
КонецПроцедуры

&НаКлиенте
Процедура Зарегистрировать(Команда)
	
	ЗарегистрироватьДокумент();
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОсновные;
	
КонецПроцедуры

&НаКлиенте
Функция ЗарегистрироватьДокумент(ПараметрыЗаписи = Неопределено)
	
	ЧисловойНомер = 0;
	ДатаРегистрации = Дата(1,1,1);
	РегистрационныйНомер = "";
	
	Попытка
		Если ПараметрыЗаписи = Неопределено Тогда
			ПараметрыЗаписи = Новый Структура;
		КонецЕсли;
		
		ПараметрыЗаписи.Вставить("Регистрация", Истина);
		Если Не Записать(ПараметрыЗаписи) Тогда 
			Возврат Ложь;
		КонецЕсли;
	Исключение
		Если ЗначениеЗаполнено(ЧисловойНомер) Тогда
			КомпенсацияРегистрации();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Истина;
			
КонецФункции

&НаКлиенте
Процедура Подписаться(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектПодписки", Объект.Ссылка);
		ОткрытьФорму("ОбщаяФорма.ПодпискаНаУведомленияПоОбъекту", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЭП(Команда)
	
	ПодписатьБезЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьБезЭДО()
	
	Если ЕстьЗашифрованныеИлиЗанятыеФайлы Тогда
		ТекстПредупреждения = НСтр("ru = 'Нельзя подписать документ с зашифрованными или занятыми файлами.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПодписатьДокументПродолжение", ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда  
		
		ТекстВопроса = ТекстВопросаНезаписанныхДанных(НСтр("ru = 'Подписать'"));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.ОК);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДокументПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда 
		
		Возврат;
		
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда
		
		ПараметрыЗаписи = Новый Структура;
		Если Не Записать(ПараметрыЗаписи) Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
	Если Не ДействияКлиент.МожноЛиПодписатьКЭП(ЭтаФорма) Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Нельзя подписать документ, т.к. по нему запущена обработка, содержащая согласование в режиме замечаний.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;	
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Объект", Объект.Ссылка);
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПодписатьДокументЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	
	ДанныеДляПодписания = Объект.Ссылка;
	
	ПараметрыПодписания = РаботаСЭПКлиент.НовыеПараметрыПодписания();
	ПараметрыПодписания.ИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыПодписания.ОбработчикЗавершения = ОбработчикЗавершения;
	
	РаботаСЭПКлиент.Подписать(ДанныеДляПодписания, ПараметрыПодписания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДокументЗавершение(Результат, Параметры) Экспорт
	
	РаботаСЭПКлиент.ПослеПодписанияОбъекта(Результат, Параметры);
	
	ПодписатьДокументЗавершениеВызовСервера();
	УстановитьДоступностьКомандСпискаПодписей(Элементы.ЭлектронныеПодписи.ТекущиеДанные);
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЛистСогласования(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПечатьЛистСогласованияПродолжение",
		ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Выполнение действия ""Лист согласования"" возможно только после записи данных.
			|Данные будут записаны.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЛистСогласованияПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда
		
		ПараметрыЗаписи = Новый Структура;
		Если Не Записать(ПараметрыЗаписи) Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;

	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(Объект.Ссылка);
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Справочник.ДокументыПредприятия",
		"ЛистСогласования",
		МассивДокументов,
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЛистСогласованияСИсторией(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПечатьЛистСогласованияСИсториейПродолжение",
		ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		ТекстВопроса = ТекстВопросаНезаписанныхДанных(НСтр("ru = 'Лист согласования с историей'"));
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЛистСогласованияСИсториейПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда
		
		ПараметрыЗаписи = Новый Структура;
		Если Не Записать(ПараметрыЗаписи) Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;

	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(Объект.Ссылка);
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Справочник.ДокументыПредприятия",
		"ЛистСогласованияСИсторией",
		МассивДокументов,
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОдинКонтрагент(Команда)
	
	КоличествоКонтрагентов = Объект.Контрагенты.Количество(); 
	Для Инд = 1 По КоличествоКонтрагентов Цикл 
		Строка = Объект.Контрагенты[КоличествоКонтрагентов - Инд]; 
		Если Не ЗначениеЗаполнено(Строка.Контрагент) Тогда 
			Объект.Контрагенты.Удалить(Строка); 
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОдинКонтрагентПродолжение",
		ЭтотОбъект);	
	
	Если Объект.Контрагенты.Количество() > 1 Тогда 
		ТекстВопроса = НСтр("ru = 'Все контрагенты, кроме первого, будут удалены. 
			|Продолжить?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе 
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Отмена);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОдинКонтрагентПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда

		Пока Объект.Контрагенты.Количество() > 1 Цикл
			Объект.Контрагенты.Удалить(1);
		КонецЦикла;
		
		Модифицированность = Истина;
	КонецЕсли;
	
	Если Объект.Контрагенты.Количество() > 0 Тогда
		Строка = Объект.Контрагенты[0];
		Объект.Контрагент = Строка.Контрагент;
		Объект.КонтактноеЛицо = Строка.КонтактноеЛицо;
		Объект.ПодписалОтКонтрагента = Строка.ПодписалОтКонтрагента;
		
		РаботаСКорреспонденциейКлиент.СкопироватьКонтрагентаИзСпискаВРеквизиты(ЭтаФорма, Строка);
		
	Иначе	
		Объект.Контрагент = Неопределено;
		Объект.КонтактноеЛицо = Неопределено;
		Объект.ПодписалОтКонтрагента = Неопределено;
		
		РаботаСКорреспонденциейКлиент.СкопироватьКонтрагентаИзСпискаВРеквизиты(ЭтаФорма, Неопределено);
	КонецЕсли;
	
	НесколькоКонтрагентов = Ложь;
	УстановитьВидимостьКонтрагентов();
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОсновные;
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
	// Отображать не по ссылке, а по ИНН, НЕ сохраняя в кэше.
	Если ИспользоватьСервисСПАРКРиски Тогда
		ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения.
		ОбновитьОтображениеИндексыСПАРК();
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
	
КонецПроцедуры

&НаКлиенте
Процедура МногоКонтрагентов(Команда)
	
	НесколькоКонтрагентов = Истина;
	УстановитьВидимостьКонтрагентов();
	СкопироватьКонтрагентаИзРеквизитовВСписок();

	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКонтрагенты;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа со связями документа

&НаКлиенте
Процедура СтруктураСвязей(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'Документ еще не записан и не имеет связей.'"));
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура("Документ", Объект.Ссылка);
	ОткрытьФорму("Отчет.СтруктураСвязейДокумента.Форма", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСвязь(Команда)
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
	 Или ТекущиеДанные.ЭтоРодитель Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
		ОткрытьФайл(ТекущиеДанные.Файл);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СвязаннаяСтрока) Тогда 
		ПерейтиПоНавигационнойСсылке(ТекущиеДанные.СвязаннаяСтрока);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СвязанныйОбъект) Тогда
		ПоказатьЗначение(, ТекущиеДанные.СвязанныйОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейОбновить(Команда)
	
	ЗаполнитьСвязи();
	
	КоллекцияСтрок = ДеревоСвязей.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияСтрок Цикл
		ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Элементы.ДеревоСвязей.Развернуть(ИдентификаторСтроки, Истина)
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейОткрытьДляПросмотра(Команда)
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
		Возврат;
	КонецЕсли;
	
	ОткрытьФайл(ТекущиеДанные.Файл);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейСохранитьКак(Команда)
	
	ВыделенныеСтроки = Элементы.ДеревоСвязей.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.ДеревоСвязей.ДанныеСтроки(ВыбраннаяСтрока);	
			Если ЗначениеЗаполнено(ДанныеСтроки.Файл) Тогда 
				СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Файл);
			КонецЕсли;	
		КонецЦикла;
		
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			РаботаСФайламиКлиент.СохранитьФайлыКак(СписокФайловДляВыгрузки, УникальныйИдентификатор);
		КонецЕсли;
		
	Иначе
		
		ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(ТекущиеДанные.Файл, 
				Неопределено, 
				ЭтаФорма.УникальныйИдентификатор);
			
			КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвязейНапечататьФайлы(Команда)
	
	#Если ВебКлиент Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте печать файлов не поддерживается.'"));
		Возврат;
	#КонецЕсли
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Если СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86 
	   И СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Печать файлов возможна только в Windows.'"));
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.ДеревоСвязей.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		МассивФайлов = Новый Массив;
		Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.ДеревоСвязей.ДанныеСтроки(ВыделеннаяСтрока);	
			Если ЗначениеЗаполнено(ДанныеСтроки.Файл) Тогда 
				МассивФайлов.Добавить(ДанныеСтроки.Файл);
			КонецЕсли;	
		КонецЦикла;
		
		Если МассивФайлов.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;	
			
		ДанныеФайлов = РаботаСФайламиВызовСервера.ДанныеФайловДляОткрытия(
			МассивФайлов, 
			ЭтаФорма.УникальныйИдентификатор);
			
		КомандыРаботыСФайламиКлиент.НапечататьФайлы(ДанныеФайлов);
	Иначе
		
		ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.Файл) Тогда 
			Возврат;
		КонецЕсли;	
	
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
			ТекущиеДанные.Файл, 
			Неопределено, 
			ЭтаФорма.УникальныйИдентификатор, 
			Неопределено, 
			ПредыдущийАдресФайла);
			
		Если ДанныеФайла.Свойство("ВладелецСменилПрочтенность") Тогда
			ОповеститьОбИзменении(КлючЗаписи);
		КонецЕсли;	
			
		КомандыРаботыСФайламиКлиент.НапечататьФайл(ДанныеФайла);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Команды работы с таблицей Файлы

&НаКлиенте
Процедура ПросмотретьИзСписка(Команда)
	
	Если Элементы.ФайлыДобавленные.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
		ФайлСсылка = ПолучитьИзВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
		ОткрытьФайл(ФайлСсылка);
	Иначе		
		РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(
			Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если Объект.Ссылка.Пустая()
		И Элементы.ФайлыДобавленные.ТекущаяСтрока <> Неопределено Тогда
		Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
			ПараметрыЗаписи = Новый Структура;
			ТекущийФайлВСпискеДобавленныхДляРедактирования = ПолучитьИзВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
			Записать(ПараметрыЗаписи);
		Иначе			
			РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(
				Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
		КонецЕсли;
	Иначе
		
		ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
			
		Если ТекущиеДанные.ЭтоДокумент Или ТекущиеДанные.ЭтоРольФайла Или ТекущиеДанные.ЭтоДокументЭДО Тогда
			Возврат;
		КонецЕсли;
		
		КомандыРаботыСФайламиКлиент.Редактировать(ТекущиеДанные.Ссылка);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	МассивФайлов = ВыделенныйМассивЗанятыхФайлов();

	Если МассивФайлов.Количество() = 1 Тогда
		
		ОбработчикРезультата = Новый ОписаниеОповещения("ПослеИзмененияСпискаФайлов", ЭтотОбъект);
		ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(ОбработчикРезультата, 
			ТекущиеДанные.Ссылка, ЭтаФорма.УникальныйИдентификатор);
		ПараметрыОбновленияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;
		ПараметрыОбновленияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
		ПараметрыОбновленияФайла.Редактирует = ТекущиеДанные.Редактирует;
		РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
		
	ИначеЕсли МассивФайлов.Количество() > 1 Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("МассивФайлов",                     МассивФайлов);
		ПараметрыФормы.Вставить("ВозможностьСоздаватьВерсииФайлов", Истина);
		ПараметрыФормы.Вставить("Редактирует",                      ТекущиеДанные.Редактирует);
		
		ОткрытьФорму("Справочник.Файлы.Форма.ФормаЗавершениеРедактирования", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура Занять(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоДокумент Или ТекущиеДанные.ЭтоРольФайла Или ТекущиеДанные.ЭтоДокументЭДО Тогда
		Возврат;
	КонецЕсли;	
	
	МассивФайлов = ВыделенныйМассивНезанятыхФайлов();

	Если МассивФайлов.Количество() = 1 Тогда
	
		РаботаСФайламиКлиент.ЗанятьСОповещением(Неопределено, ТекущиеДанные.Ссылка);
		ОбновитьСтрокуФайла(ТекущиеДанные.Ссылка);
		
	ИначеЕсли МассивФайлов.Количество() > 1 Тогда
		
		Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект, МассивФайлов);
		РаботаСФайламиКлиент.ЗанятьСОповещением(Обработчик, МассивФайлов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	МассивФайлов = ВыделенныйМассивЗанятыхФайлов();

	Если МассивФайлов.Количество() = 1 Тогда
	
		ПараметрыОсвобожденияФайла = РаботаСФайламиКлиент.ПараметрыОсвобожденияФайла(Неопределено, 
			ТекущиеДанные.Ссылка);
		ПараметрыОсвобожденияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;	
		ПараметрыОсвобожденияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;	
		ПараметрыОсвобожденияФайла.Редактирует = ТекущиеДанные.Редактирует;	
		РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(ПараметрыОсвобожденияФайла);
	
	ИначеЕсли МассивФайлов.Количество() > 1 Тогда
		
		Обработчик = Новый ОписаниеОповещения("УстановитьДоступностьФайловыхКоманд", ЭтотОбъект, МассивФайлов);
		РаботаСФайламиКлиент.ОсвободитьФайлыПоСсылкам(Обработчик, МассивФайлов);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.СохранитьИзмененияФайлаСОповещением(
		Неопределено,
		ТекущиеДанные.Ссылка,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
	Иначе	
		ТекущиеДанные = Элементы.ФайлыСоздание.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.ФайлыСоздание.ВыделенныеСтроки;
	КонецЕсли;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			
			Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
				ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);	
			Иначе	
				ДанныеСтроки = Элементы.ФайлыСоздание.ДанныеСтроки(ВыбраннаяСтрока);	
			КонецЕсли;

			СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			РаботаСФайламиКлиент.СохранитьФайлыКак(СписокФайловДляВыгрузки, УникальныйИдентификатор);
		КонецЕсли;
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Если ТекущиеДанные.ЭтоДокумент Или ТекущиеДанные.ЭтоРольФайла Или ТекущиеДанные.ЭтоДокументЭДО Тогда
			Возврат;
		КонецЕсли;	
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(ТекущиеДанные.Ссылка, Неопределено, ЭтаФорма.УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоДокумент Или ТекущиеДанные.ЭтоРольФайла Или ТекущиеДанные.ЭтоДокументЭДО Тогда
		Возврат;
	КонецЕсли;	
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаИРабочийКаталог(ТекущиеДанные.Ссылка);
	
	РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
		Неопределено,
		ДанныеФайла,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Сканировать(Команда)

	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			НавигационнаяСсылкаДокумента,
			ПредставлениеОбъекта,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;

	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
	РаботаСоСканеромКлиент.СканироватьИПоказатьДиалогПросмотра(Объект.Ссылка, УникальныйИдентификатор, НеОткрыватьКарточкуПослеСозданияИзФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура Распознать(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТаймлистКлиентСервер.ЭтоРасширениеФайлаТаймлист(ТекущиеДанные.Расширение) Тогда
		
		Обработчик = Новый ОписаниеОповещения("ОбновитьСписокФайловПослеНачалаРасшифровки", ЭтотОбъект,
			ТекущиеДанные);
		
		ДополнительныеПараметрыОповещения = Новый Структура("ВыделенныеФайлы, Обработчик",
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущиеДанные.Ссылка), Обработчик);
		Оповещение = Новый ОписаниеОповещения("ПослеУказанияКоличестваСпикеров", ЭтотОбъект,
			ДополнительныеПараметрыОповещения);
		
		ТаймлистКлиент.НачатьРасшифровку(ЭтотОбъект, ТекущиеДанные.Ссылка, Оповещение);
		
		Возврат;
		
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьСписокФайловПослеОперации", ЭтотОбъект);
	КомандыРаботыСФайламиКлиент.РаспознатьФайлСОповещением(Обработчик, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокФайловПослеОперации(Результат, ПараметрыВыполнения) Экспорт
	
	ЗаполнитьСписокФайловКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокФайловПослеНачалаРасшифровки(Результат, ТекущиеДанные) Экспорт
	
	ЗаполнитьСписокФайловКлиент();
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУказанияКоличестваСпикеров(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КомандыРаботыСФайламиКлиент.РаспознатьФайлСОповещением(ДополнительныеПараметры.Обработчик,
		ДополнительныеПараметры.ВыделенныеФайлы[0],, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортФайлов(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ИмпортФайловПослеУстановкиРасширения", ЭтотОбъект);
	ФайловыеФункцииСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортФайловПослеУстановкиРасширения(Результат, ПараметрыВыполнения) Экспорт
	
	Если НЕ ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
		ФайловыеФункцииСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСФайлами(Неопределено);
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПараметрыЗаписи = Новый Структура;
		Если Не Записать(ПараметрыЗаписи) Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			НавигационнаяСсылкаДокумента,
			ПредставлениеОбъекта,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	РольФайла = Неопределено;
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	
	Если ИспользоватьРолиФайлов Тогда
		Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.РольФайла) Тогда
			РольФайла = ТекущиеДанные.РольФайла;
		ИначеЕсли Файлы.ПолучитьЭлементы().Количество() <> 0 Тогда	
			СтрФайлы = Файлы.ПолучитьЭлементы()[0];
			Если ЗначениеЗаполнено(СтрФайлы.РольФайла) Тогда
				РольФайла = СтрФайлы.РольФайла;
			КонецЕсли;		
		КонецЕсли;	
	КонецЕсли;	
	
	МожноДобавитьТолькоОдинФайл = Ложь;
		
	Если (ЗначениеЗаполнено(Объект.РегистрационныйНомер) 
		Или СостояниеОбработки = ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Выполняется"))
		И ВидДокументаКэш.РолиФайлов.Количество() <> 0 И ИспользоватьРолиФайлов Тогда
		
		Если ВВидеЭтаРольТолькоОдинФайл(ВидДокументаКэш.РолиФайлов, РольФайла) Тогда
			
			НетФайловВРоли = Ложь;
			// найдем число файлов в роли
			Если ТекущиеДанные <> Неопределено Тогда
				Если ТекущиеДанные.ЭтоРольФайла Тогда
					НетФайловВРоли = (ТекущиеДанные.ПолучитьЭлементы().Количество() = 0);
				КонецЕсли;	
			КонецЕсли;	
			
			Если Не НетФайловВРоли Тогда
				
				ПоказатьПредупреждение(, 
					СтрШаблон(НСтр("ru = 'В роли ""%1"" с признаком ""Только один файл"" уже есть файл, поэтому добавить еще один файл в эту роль нельзя.' "), РольФайла));
					
				РольФайла = Неопределено;
				
				Возврат;
				
			Иначе
			
				МожноДобавитьТолькоОдинФайл = Истина;	
				
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	РаботаСФайламиКлиент.ВыполнитьИмпортФайловСОткрытиемФормыИмпорта(Объект.Ссылка, РольФайла, МожноДобавитьТолькоОдинФайл);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленныеФайлы(Команда)
	
	ПоказыватьУдаленныеФайлы = Не ПоказыватьУдаленныеФайлы;
	
	ЗаполнитьСписокФайловКлиент();
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
		Элементы.ФайлыПоказыватьУдаленныеФайлы.Пометка = ПоказыватьУдаленныеФайлы;
	Иначе	
		Элементы.ФайлыСозданиеПоказыватьУдаленныеФайлы.Пометка = ПоказыватьУдаленныеФайлы;		
	КонецЕсли;
	
	Элементы.НаименованиеФайла.Заголовок = ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(КоличествоФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленныеСвязи(Команда)
	
	ПоказыватьУдаленныеСвязи = Не ПоказыватьУдаленныеСвязи;
	Элементы.ДеревоСвязейПоказыватьУдаленныеСвязи.Пометка = ПоказыватьУдаленныеСвязи;
	ЗаполнитьСвязи();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрВСвязях(Команда)
	
	ИспользоватьПредварительныйПросмотрВСвязях = Не ИспользоватьПредварительныйПросмотрВСвязях;
	УстановитьВидимостьПредварительногоПросмотраВСвязях();
	
КонецПроцедуры

&НаКлиенте
Процедура Напечатать(Команда)
	
	#Если ВебКлиент Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте печать файлов не поддерживается.'"));
		Возврат;
	#КонецЕсли
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Если СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86 
	   И СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Печать файлов возможна только в Windows.'"));
		Возврат;
	КонецЕсли;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
	Иначе	
		ТекущиеДанные = Элементы.ФайлыСоздание.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.ФайлыСоздание.ВыделенныеСтроки;
	КонецЕсли;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		МассивФайлов = Новый Массив;
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
				ДанныеСтроки = Элементы.Файлы.ДанныеСтроки(ВыбраннаяСтрока);	
			Иначе	
				ДанныеСтроки = Элементы.ФайлыСоздание.ДанныеСтроки(ВыбраннаяСтрока);	
			КонецЕсли;
			МассивФайлов.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
		Если МассивФайлов.Количество() > 0 Тогда
			
			ДанныеФайлов = РаботаСФайламиВызовСервера.ДанныеФайловДляОткрытия(
				МассивФайлов, 
				ЭтаФорма.УникальныйИдентификатор);
				
			КомандыРаботыСФайламиКлиент.НапечататьФайлы(ДанныеФайлов);
			
		КонецЕсли;
	Иначе
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;	
	
		Если ТекущиеДанные.ЭтоДокумент Или ТекущиеДанные.ЭтоРольФайла Или ТекущиеДанные.ЭтоДокументЭДО Тогда
			Возврат;
		КонецЕсли;	
	
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
			ТекущиеДанные.Ссылка, 
			Неопределено, 
			ЭтаФорма.УникальныйИдентификатор, 
			Неопределено, 
			ПредыдущийАдресФайла);
			
		Если ДанныеФайла.Свойство("ВладелецСменилПрочтенность") Тогда
			ОповеститьОбИзменении(КлючЗаписи);
		КонецЕсли;	
		
		КомандыРаботыСФайламиКлиент.НапечататьФайл(ДанныеФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(Команда)
	
	ПараметрыДобавления = Новый Структура;
	
	Если Элементы.Обзор.Видимость Тогда
		ТекущаяТаблица = Элементы.Файлы;
	Иначе	
		ТекущаяТаблица = Элементы.ФайлыСоздание;
	КонецЕсли;
	
	ФайлыПередНачаломДобавленияКлиент(ТекущаяТаблица, Истина, Ложь, Неопределено, Неопределено, ПараметрыДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлРеквизиты(Команда)
	
	ПараметрыДобавления = Новый Структура;
	
	Если ВидДокументаКэш.РолиФайлов.Количество() <> 0 И ИспользоватьРолиФайлов Тогда
		
		ПараметрыДобавления.Вставить("РольФайла", ВидДокументаКэш.РолиФайлов[0].Роль);
		
	КонецЕсли;	
	
	Если Элементы.Обзор.Видимость Тогда
		ТекущаяТаблица = Элементы.Файлы;
	Иначе	
		ТекущаяТаблица = Элементы.ФайлыСоздание;
	КонецЕсли;
	
	ФайлыПередНачаломДобавленияКлиент(ТекущаяТаблица, Истина, Ложь, Неопределено, Неопределено, ПараметрыДобавления);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьФайлыИзШаблона(Команда)
	
	Если Модифицированность Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПерезаполнитьФайлыИзШаблонаПродолжение", ЭтотОбъект);
	ТекстВопроса =
		НСтр("ru = 'Файлы, добавленные из шаблона, будут перезаполнены согласно условиям добавления. Продолжить?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьФайлыИзШаблонаПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПараметрыПослеПерезаполнения = ПерезаполнитьФайлыИзШаблонаНаСервере();
		
		Если ПараметрыПослеПерезаполнения.КоличествоЗанятыхФайлов <> Неопределено Тогда
			СтандартныеПодсистемыКлиент.УстановитьПараметрКлиента(
				"КоличествоЗанятыхФайлов", 
				ПараметрыПослеПерезаполнения.КоличествоЗанятыхФайлов);
		КонецЕсли;
		
		Если ПоказыватьУдаленныеФайлы Тогда
			Для Каждого Файл Из ПараметрыПослеПерезаполнения.ФайлыКУдалению Цикл
				ОбновитьСтрокуФайла(Файл);
			КонецЦикла;
		КонецЕсли;
		
		Оповестить("ФайлыДокументаПомеченыНаУдаление", Объект.Ссылка);
		Если ПараметрыПослеПерезаполнения.ПодписанЭП Тогда
			Оповестить("ПрисоединенныйФайлПодписан");
		КонецЕсли;
		НадоПереименоватьФайлыПоШаблону = Ложь;
		ОбщегоНазначенияДокументооборотКлиент.ЗапуститьФоновоеПереименованиеФайлов(
			Объект.Ссылка, УникальныйИдентификатор);
		
		Элементы.НаименованиеФайла.Заголовок = ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(КоличествоФайлов);
		РаскрытьДеревоФайлов();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Команды работы с таблицей Рабочая группа

&НаКлиенте
Процедура РабочаяГруппаОбновить(Команда)
	
	РабочаяГруппаОбновитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьРабочуюГруппуДокумента(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПерезаполнитьРабочуюГруппуДокументаПродолжение",
		ЭтотОбъект);
	ТекстВопроса = НСтр("ru = 'Рабочая группа будет заполнена автоматически. Все внесенные изменения будут удалены. Продолжить?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьРабочуюГруппуДокументаПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПерезаполнитьРабочуюГруппуДокументаСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУчастниковРабочейГруппы(Команда)
	
	РаботаСАдреснойКнигойКлиент.ПодобратьУчастниковРабочейГруппы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте

////////////////////////////////////////////////////////////////////////////////
// Команды работы с электронной подписью

&НаКлиенте
Процедура ПроверитьПодписи(Команда)
	
	Если Элементы.ЭлектронныеПодписи.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПроверитьПодписиЗавершение", ЭтотОбъект);
	
	ПараметрыПроверки = РаботаСЭПКлиент.НовыеПараметрыПроверкиПодписей();
	ПараметрыПроверки.ИмяТаблицыЭП = "ЭлектронныеПодписи";
	ПараметрыПроверки.ВыделенныеСтроки = Элементы.ЭлектронныеПодписи.ВыделенныеСтроки;
	ПараметрыПроверки.ПерезаполнитьВыделенныеСтроки = Истина;
	
	РаботаСЭПКлиент.ПроверитьПодписи(ЭтотОбъект, ПараметрыПроверки, ОбработчикЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВсе(Команда)
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПроверитьПодписиЗавершение", ЭтотОбъект);
	
	ПараметрыПроверки = РаботаСЭПКлиент.НовыеПараметрыПроверкиПодписей();
	ПараметрыПроверки.ИмяТаблицыЭП = "ЭлектронныеПодписи";
	ПараметрыПроверки.ВыделенныеСтроки = Неопределено;
	ПараметрыПроверки.ПерезаполнитьВыделенныеСтроки = Истина;
	
	РаботаСЭПКлиент.ПроверитьПодписи(ЭтотОбъект, ПараметрыПроверки, ОбработчикЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура")
		Или Не Результат.Свойство("Успех")
		Или Результат.Успех <> Истина Тогда
		
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбновлениеСпискаПодписей();
	ОбновитьКолонкиСпискаФайлов("СтатусПроверкиЭП");
	ОбновитьКартинкуЭП();
	
	РаботаСЭПКлиент.ОтобразитьРезультатПроверкиПодписей(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодпись(Команда)
	
	РаботаСЭПКлиент.ОткрытьПодпись(Элементы.ЭлектронныеПодписи.ТекущиеДанные, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПодпись(Команда)
	
	УдалитьПодписи();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьПодпись(Команда)
	
	Если Элементы.ЭлектронныеПодписи.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Элементы.ЭлектронныеПодписи.ТекущиеДанные.Объект <> Неопределено И (НЕ Элементы.ЭлектронныеПодписи.ТекущиеДанные.Объект.Пустая()) Тогда
		
		АдресПодписи = Элементы.ЭлектронныеПодписи.ТекущиеДанные.АдресПодписи;
		
		РасширениеПодключено = ФайловыеФункцииСлужебныйКлиент.РасширениеРаботыСФайламиПодключено();
		Если РасширениеПодключено Тогда
			
			ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			
			РасширениеДляФайловПодписи = ЭлектроннаяПодписьКлиент.ПерсональныеНастройки().РасширениеДляФайловПодписи;
			Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Все файлы (*.%1)|*.%1'"), РасширениеДляФайловПодписи);
			
			ДиалогОткрытияФайла.Фильтр = Фильтр;
			ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
			ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл для сохранения подписи'");
			
			Если ДиалогОткрытияФайла.Выбрать() Тогда
				
				ПолныйПутьПодписи = ДиалогОткрытияФайла.ПолноеИмяФайла;
				
				Файл = Новый Файл(ПолныйПутьПодписи);
				ПередаваемыеФайлы = Новый Массив;
				Описание = Новый ОписаниеПередаваемогоФайла(ПолныйПутьПодписи, АдресПодписи);
				ПередаваемыеФайлы.Добавить(Описание);
				
				ПутьКФайлу = Файл.Путь;
				ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
					ПутьКФайлу, ОбщегоНазначенияКлиент.ТипПлатформыКлиента());

				// Сохраним Файл из БД на диск
				ПолучитьФайлы(ПередаваемыеФайлы,, ПутьКФайлу, Ложь);
					
				Текст = СтрШаблон(
					НСтр("ru = 'Подпись сохранена в файл ""%1""'"),
					ДиалогОткрытияФайла.ПолноеИмяФайла);
				Состояние(Текст);
				
			КонецЕсли;
			
		КонецЕсли;		
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьФайл(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоДокумент Или ТекущиеДанные.ЭтоРольФайла Или ТекущиеДанные.ЭтоДокументЭДО Тогда
		Возврат;
	КонецЕсли;	
	
	МассивФайлов = Новый Массив;
	МассивФайлов.Добавить(ТекущиеДанные.Ссылка);
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ТекущиеДанные.Ссылка);
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ВладелецФайла", ДанныеФайла.Владелец);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодписатьФайлЗавершение", ЭтотОбъект, ПараметрыВыполнения);
	
	РаботаСФайламиСлужебныйКлиент.ПодписатьФайл(МассивФайлов, УникальныйИдентификатор, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьФайлЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("ПрисоединенныйФайлПодписан", ПараметрыВыполнения.ВладелецФайла);
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭПИзФайла(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйКлиент.ДобавитьПодписьИзФайла(
		ТекущиеДанные.Ссылка,
		УникальныйИдентификатор,
		Новый ОписаниеОповещения("ДобавитьЭПИзФайлаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭПИзФайлаЗавершение(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Истина Тогда
		ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
		УстановитьДоступностьКоманд(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВместеСЭП(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйКлиент.СохранитьФайлВместеСПодписью(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Зашифровать(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоДокумент Или ТекущиеДанные.ЭтоРольФайла Или ТекущиеДанные.ЭтоДокументЭДО Тогда
		Возврат;
	КонецЕсли;	
	
	ОбъектСсылка = ТекущиеДанные.Ссылка;
	ДанныеФайла = РаботаСФайламиВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(ОбъектСсылка);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", ОбъектСсылка);
	Обработчик = Новый ОписаниеОповещения("ЗашифроватьПослеШифрованияНаКлиенте", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиСлужебныйКлиент.Зашифровать(Обработчик, ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗашифроватьПослеШифрованияНаКлиенте(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяРабочегоКаталога = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	ЕстьЗашифрованныеИлиЗанятыеФайлы = Неопределено;
	
	ЗашифроватьСервер(
		Результат.МассивДанныхДляЗанесенияВБазу,
		Результат.МассивОтпечатков,
		МассивФайловВРабочемКаталогеДляУдаления,
		ИмяРабочегоКаталога,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	РаботаСФайламиКлиент.ИнформироватьОШифровании(
		МассивФайловВРабочемКаталогеДляУдаления,
		ПараметрыВыполнения.ДанныеФайла.Владелец,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ЗашифроватьСервер(МассивДанныхДляЗанесенияВБазу, МассивОтпечатков, 
	МассивФайловВРабочемКаталогеДляУдаления,
	ИмяРабочегоКаталога, ОбъектСсылка, ЕстьЗашифрованныеИлиЗанятыеФайлы)
	
	Зашифровать = Истина;
	РаботаСФайламиВызовСервера.ЗанестиИнформациюОШифровании(
		ОбъектСсылка,
		Зашифровать,
		МассивДанныхДляЗанесенияВБазу,
		Неопределено,  // УникальныйИдентификатор
		ИмяРабочегоКаталога,
		МассивФайловВРабочемКаталогеДляУдаления,
		МассивОтпечатков);
	
	СсылкаВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "ВладелецФайла");
	ЕстьЗашифрованныеИлиЗанятыеФайлы = РаботаСФайламиВызовСервера.ЕстьЗашифрованныеИлиЗанятыеФайлы(СсылкаВладелецФайла);	
	
	ЗаполнитьСписокПодписей(); // т.к. параметр Зашифрован в таблице подписей изменился
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъектСсылка = ТекущиеДанные.Ссылка;
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаИКоличествоВерсий(ОбъектСсылка);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	ПараметрыОбработчика.Вставить("ОбъектСсылка", ОбъектСсылка);
	Обработчик = Новый ОписаниеОповещения("РасшифроватьПослеРасшифровкиНаКлиенте", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиСлужебныйКлиент.Расшифровать(Обработчик, ДанныеФайла.Ссылка, УникальныйИдентификатор, ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПослеРасшифровкиНаКлиенте(Результат, ПараметрыВыполнения) Экспорт
	
	Если Не Результат.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ФайловыеФункцииКлиент.ПроинициализироватьПутьКРабочемуКаталогу();
	ИмяРабочегоКаталога = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ПутьКЛокальномуКэшуФайлов;
	
	ЕстьЗашифрованныеИлиЗанятыеФайлы = Неопределено;
	
	РасшифроватьСервер(
		Результат.МассивДанныхДляЗанесенияВБазу,
		ИмяРабочегоКаталога,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	РаботаСФайламиКлиент.ИнформироватьОРасшифровке(
		ПараметрыВыполнения.ДанныеФайла.Владелец,
		ПараметрыВыполнения.ОбъектСсылка,
		ЕстьЗашифрованныеИлиЗанятыеФайлы);
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура РасшифроватьСервер(МассивДанныхДляЗанесенияВБазу, 
	ИмяРабочегоКаталога, ОбъектСсылка, ЕстьЗашифрованныеИлиЗанятыеФайлы)
	
	Зашифровать = Ложь;
	МассивОтпечатков = Новый Массив;
	МассивФайловВРабочемКаталогеДляУдаления = Новый Массив;
	
	РаботаСФайламиВызовСервера.ЗанестиИнформациюОШифровании(
		ОбъектСсылка,
		Зашифровать,
		МассивДанныхДляЗанесенияВБазу,
		Неопределено,  // УникальныйИдентификатор
		ИмяРабочегоКаталога,
		МассивФайловВРабочемКаталогеДляУдаления,
		МассивОтпечатков);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСписокПодписей()
	
	Коллекция = ЭлектронныеПодписи.ПолучитьЭлементы();
	Для Каждого Строка Из Коллекция Цикл
		Элементы.ЭлектронныеПодписи.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокПодписей(Команда)
	
	ВыполнитьОбновлениеСпискаПодписей();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектронныеПодписиОбработкаЗапросаОбновления(Элемент)
	
	ВыполнитьОбновлениеСпискаПодписей();

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбновлениеСпискаПодписей()
	
	ЗаполнитьСписокПодписей();
	РазвернутьСписокПодписей();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФайлДаннымиДокумента(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущийФайл = ТекущиеДанные.Ссылка;
	Если ТекущийФайл = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ПараметрыЗаписи = Новый Структура;
		Если НЕ Записать(ПараметрыЗаписи) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	#Если НЕ ВебКлиент И Не МобильныйКлиент Тогда
		ДанныеВыполнения = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьПоляФайлаДаннымиВладельца(
			Истина,
			ТекущийФайл, 
			Истина, 
			УникальныйИдентификатор);
	#Иначе
		ДанныеВыполнения = ЗаполнитьФайлДаннымиДокументаСервер(ТекущийФайл);
	#КонецЕсли
	
	Если ДанныеВыполнения.Результат Тогда
		Прочитать();
		Текст = НСтр("ru = 'Поля в файле обновлены данными владельца.'");
	Иначе
		ВызватьИсключение(ДанныеВыполнения.Описание);
	КонецЕсли;
	
	ПоказатьПредупреждение(, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьШтрихкод(Команда)
	
	ШтрихкодированиеКлиент.ВставитьШтрихкод(ЭтаФорма);

КонецПроцедуры   

&НаКлиенте
Процедура ВставитьРегистрационныйШтамп(Команда)

	ШтрихкодированиеКлиент.ВставитьРегистрационныйШтамп(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьВизуализациюЭП(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если РаботаСФайламиКлиентСервер.ЭтоРасширениеДляАвтовизуализации(ТекущиеДанные.Расширение) Тогда
			
		ФайлВизуализации = ТекущиеДанные.ФайлВизуализации;
			
		Если Не ЗначениеЗаполнено(ФайлВизуализации) Тогда
			
			// тут создастся визуализация если ее еще нет.
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
				ТекущиеДанные.Ссылка, 
				Неопределено, 
				УникальныйИдентификатор);
	
			Если ДанныеФайла.ТребуетсяСоздатьВизуализациюЭП
				И ДанныеФайла.ВизуализацияЭПДобавлена = Ложь Тогда 
				
				#Если Не ВебКлиент И Не МобильныйКлиент Тогда
					// для doc файла заполним на клиенте - если не веб клиент
					РаботаСФайламиКлиент.СоздатьВизуализациюЭПВФайлеDocXls(
						ДанныеФайла, УникальныйИдентификатор);
				#КонецЕсли	
				
			КонецЕсли;
	
			ФайлВизуализации = ФайлВизуализации(Объект.Ссылка, ТекущиеДанные.Ссылка, 
				ЭтаФорма.УникальныйИдентификатор);
			ТекущиеДанные.ФайлВизуализации = ФайлВизуализации;	
			
		КонецЕсли;		
		
			
		Если ЗначениеЗаполнено(ФайлВизуализации) Тогда
			ОткрыватьPdfВWord = Ложь;
			КомандыРаботыСФайламиКлиент.Редактировать(ФайлВизуализации,,,,ОткрыватьPdfВWord);
		КонецЕсли;	

	Иначе
	
		ПоказатьПредупреждение(, НСтр("ru = 'Файл визуализации есть только для форматов doc docx odt pdf'"));			
				
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеВизуализацииЭП(Команда)

	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		
	Если РаботаСФайламиКлиентСервер.ЭтоРасширениеДляАвтовизуализации(ТекущиеДанные.Расширение) Тогда
			
		ФайлВизуализации = ФайлВизуализации(Объект.Ссылка, ТекущиеДанные.Ссылка,
			ЭтаФорма.УникальныйИдентификатор);
		Если ЗначениеЗаполнено(ФайлВизуализации) Тогда
			
			ПараметрыОбработчика = Новый Структура;
			ПараметрыОбработчика.Вставить("ФайлСсылка", ТекущиеДанные.Ссылка);
			ПараметрыОбработчика.Вставить("Расширение", ТекущиеДанные.Расширение);
			ПараметрыОбработчика.Вставить("ТекущаяВерсияРазмер", ТекущиеДанные.ТекущаяВерсияРазмер);
			Обработчик = Новый ОписаниеОповещения("ОбновитьПревьюФайлаПослеРедактирования", ЭтотОбъект, ПараметрыОбработчика);
			
			ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Обработчик, 
				ФайлВизуализации, ЭтаФорма.УникальныйИдентификатор);
			ПараметрыОбновленияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;
			ПараметрыОбновленияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
			ПараметрыОбновленияФайла.Редактирует = ТекущиеДанные.Редактирует;
			РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
			
		КонецЕсли;	
	
	Иначе
	
		ПоказатьПредупреждение(, НСтр("ru = 'Файл визуализации есть только для форматов doc docx odt pdf'"));			
				
	КонецЕсли;

КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////
// Команды работы с составом комплекта

&НаКлиенте
Процедура ЭлементКомплектаУдалить(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаУдалить(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаПросмотретьФайл(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаПросмотретьФайл(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаОткрытьКарточку(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаОткрытьКарточку(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаРедактировать(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаРедактировать(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаОбновитьИзФайлаНаДиске(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаОбновитьИзФайлаНаДиске(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаЗанятьФайл(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаЗанятьФайл(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаОтменитьРедактированиеФайла(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаОтменитьРедактированиеФайла(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаЗакончитьРедактирование(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаЗакончитьРедактирование(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаСохранитьФайлКак(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаСохранитьФайлКак(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаСохранитьИзмененияФайла(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаСохранитьИзмененияФайла(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаОбновить(Команда)
	РаботаСКомплектамиДокументовКлиент.СоставКомплектаОбновить(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОбъектыКомплекта(Команда)
	РаботаСКомплектамиДокументовКлиент.ОтправитьОбъектыКомплекта(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаИзменитьКомментарий(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаИзменитьКомментарий(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаПереместитьВниз(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаПереместитьВниз(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЭлементКомплектаПереместитьВверх(Команда)
	РаботаСКомплектамиДокументовКлиент.ЭлементКомплектаПереместитьВверх(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаПодобратьДокументыПредприятия(Команда)
	РаботаСКомплектамиДокументовКлиент.СоставКомплектаПодобрать(ЭтаФорма, "ДокументыПредприятия");
КонецПроцедуры

&НаКлиенте
Процедура СоставКомплектаПодобратьФайлы(Команда)
	РаботаСКомплектамиДокументовКлиент.СоставКомплектаПодобрать(ЭтаФорма, "Файлы");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Категории

&НаКлиенте
Процедура УдалитьКатегорииИзСпискаВыбранных()
	
	Если Элементы.СписокКатегорийДанных.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаления = РаботаСКатегориямиДанных.ФильтроватьСписокКатегорийДляУдаления(Объект.Ссылка, СписокКатегорийДанных, Элементы.СписокКатегорийДанных.ВыделенныеСтроки);
	Для Каждого СтрокаДляУдаления Из МассивСтрокДляУдаления Цикл
		СписокКатегорийДанных.Удалить(СписокКатегорийДанных.НайтиПоИдентификатору(СтрокаДляУдаления));
	КонецЦикла;
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		Модифицированность = Истина;
		СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок();
		
		Если СписокКатегорийДанных.Количество() = 0 Тогда 
			СтатусКатегории = 0;
			Элементы.КартинкаКатегории.Подсказка = НСтр("ru = 'Нет категорий'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокОбъектовСВыбраннымиКатегориями(Команда)
	
	Если СписокКатегорийДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	МассивКатегорий = Новый Массив();
	УникальныйИдентификаторСпискаКатегорий = "";
	Для Каждого ВыбраннаяКатегория Из СписокКатегорийДанных Цикл
		МассивКатегорий.Добавить(ВыбраннаяКатегория.Значение);
		УникальныйИдентификаторСпискаКатегорий = УникальныйИдентификаторСпискаКатегорий + "," + ВыбраннаяКатегория.ПолноеНаименование;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("СписокВыбранныхКатегорий", МассивКатегорий);
	
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаСписка", ПараметрыФормы, Элементы.СписокКатегорийДанных, УникальныйИдентификаторСпискаКатегорий);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбораКатегорий(Команда)
	
	ВыполнитьОткрытиеФормыПодбораКатегорий();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОткрытиеФормыПодбораКатегорий()
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыполнитьОткрытиеФормыПодбораКатегорийПродолжение",
		ЭтотОбъект,
		Новый Структура);

	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаКатегорий(СписокКатегорийДанных, ОписаниеОповещения); 
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОткрытиеФормыПодбораКатегорийПродолжение(СписокКатегорийДанных, Параметры)Экспорт 
	
	Элементы.Категории.Заголовок = РаботаСКатегориямиДанныхКлиентСервер.ПолучитьЗаголовокВкладкиКатегории(СписокКатегорийДанных);
	
	Если СписокКатегорийДанных.Количество() > 0 Тогда 
		СтатусКатегории = 1;
		Элементы.КартинкаКатегории.Подсказка = НСтр("ru = 'Есть категории'");
	КонецЕсли;
	
	Модифицированность = Параметры.Модифицированность Или Модифицированность;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Учет времени

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	
	ПараметрыОповещения = Неопределено;
	НуженДиалог = УчетВремениКлиент.НуженДиалогДляХронометража(ВключенХронометраж, 
		ДатаНачалаХронометража, ВидыРабот);
	
	Если НуженДиалог = Ложь Тогда
		
		ПереключитьХронометражСервер(ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
	
	Иначе
		ДлительностьРаботы = УчетВремениКлиент.ПолучитьДлительностьРаботы(ДатаНачалаХронометража);
		
		ОписаниеРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Работа с документом ""%1""'"),
			Объект.Наименование);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДатаОтчета", ТекущаяДата());
		ПараметрыФормы.Вставить("ВидыРабот", ВидыРабот);
		ПараметрыФормы.Вставить("ОписаниеРаботы", ОписаниеРаботы);
		ПараметрыФормы.Вставить("ДлительностьРаботы", ДлительностьРаботы);
		ПараметрыФормы.Вставить("НачалоРаботы", ДатаНачалаХронометража);
		ПараметрыФормы.Вставить("Объект", Объект.Ссылка);
		ПараметрыФормы.Вставить("СпособУказанияВремени", СпособУказанияВремени);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПереключитьХронометражПродолжение",
			ЭтотОбъект);
		
		ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаДобавленияРаботы", ПараметрыФормы,,,,,
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометражПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		ДобавитьВОтчетИОбновитьФорму(Результат, ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж, Объект.Ссылка);
	Иначе
		ОтключитьХронометражСервер();
	КонецЕсли;  

КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	
	ДатаОтчета = ТекущаяДата();
	
	УчетВремениКлиент.ДобавитьВОтчетКлиент(
		ДатаОтчета,
		ВключенХронометраж, 
		ДатаНачалаХронометража, 
		ДатаКонцаХронометража, 
		ВидыРабот, 
		Объект.Ссылка,
		СпособУказанияВремени,
		ЭтаФорма.Элементы.ПереключитьХронометраж,
		Ложь,
		ЭтаФорма); // Выполнена
		
	КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Команды работы с инструкциями

&НаКлиенте
Процедура ПоказыватьИнструкции(Команда)
	
	ПоказыватьИнструкции = Не ПоказыватьИнструкции;
	ПолучитьИнструкции();
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	ЧислоФайлов = 0;
	СкопироватьСтрокиНаСервере(ЧислоФайлов);
	
	Если ЧислоФайлов <> 0 Тогда
		
		ПолноеОписание = СтрШаблон(
			НСтр("ru = 'Файлы (%1 шт) скопированы в буфер обмена.'"), ЧислоФайлов);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Копирование в буфер'"),
			,
			ПолноеОписание,
			БиблиотекаКартинок.Информация32);
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	Если Модифицированность Тогда
		ПараметрыЗаписи = Новый Структура;
		Если НЕ Записать(ПараметрыЗаписи) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЧислоФайлов = 0;
	ВставитьСтрокиНаСервере(ЧислоФайлов);
	
	Если ЧислоФайлов <> 0 Тогда
		
		ПолноеОписание = СтрШаблон(
			НСтр("ru = 'Файлы (%1 шт) вставлены из буфера обмена.'"), ЧислоФайлов);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Вставка из буфера'"),
			,
			ПолноеОписание,
			БиблиотекаКартинок.Информация32);
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ВставитьКартинкуИзБуфера(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		ПараметрыЗаписи = Новый Структура;
		Если Не Записать(ПараметрыЗаписи) Тогда 
			Возврат;
		КонецЕсли;
		
	КонецЕсли;              
	
	КартинкаИзБуфераОбмена = Ждать СредстваБуфераОбмена.ПолучитьДанныеАсинх(СтандартныйФорматДанныхБуфераОбмена.Картинка);
	
	Если КартинкаИзБуфераОбмена = Неопределено Тогда
		ПоказатьПредупреждение(
			, НСтр(
				"ru='Буфер обмена не содержит картинки'"
				, "ru"
			)
		);
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = "";
	
#Если Не ВебКлиент Тогда 
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла("png");
	КартинкаИзБуфераОбмена.Записать(ПутьКФайлу);

#КонецЕсли
	
	ВставитьКартинкуИзБуфераЗавершение(Истина, ПутьКФайлу);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфераЗавершение(Результат, ПутьКФайлу) Экспорт
	
	Если Результат = Истина Тогда
		
		Если Не ПустаяСтрока(ПутьКФайлу) Тогда
			
			РольФайла = Неопределено;
				
			ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
			Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.РольФайла) Тогда
				РольФайла = ТекущиеДанные.РольФайла;
			ИначеЕсли Файлы.ПолучитьЭлементы().Количество() <> 0 Тогда	
				СтрФайлы = Файлы.ПолучитьЭлементы()[0];
				Если ЗначениеЗаполнено(СтрФайлы.РольФайла) Тогда
					РольФайла = СтрФайлы.РольФайла;
				КонецЕсли;		
			КонецЕсли;	
			
			МожноДобавитьТолькоОдинФайл = Ложь;
				
			Если (ЗначениеЗаполнено(Объект.РегистрационныйНомер) 
				Или СостояниеОбработки = ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Выполняется"))
				И ВидДокументаКэш.РолиФайлов.Количество() <> 0 И ИспользоватьРолиФайлов Тогда
				
				Если ВВидеЭтаРольТолькоОдинФайл(ВидДокументаКэш.РолиФайлов, РольФайла) Тогда
					
					НетФайловВРоли = Ложь;
					// найдем число файлов в роли
					Если ТекущиеДанные <> Неопределено Тогда
						Если ТекущиеДанные.ЭтоРольФайла Тогда
							НетФайловВРоли = (ТекущиеДанные.ПолучитьЭлементы().Количество() = 0);
						КонецЕсли;	
					КонецЕсли;	
					
					Если Не НетФайловВРоли Тогда
						
						ПоказатьПредупреждение(, 
							СтрШаблон(НСтр("ru = 'В роли ""%1"" с признаком ""Только один файл"" уже есть файл, поэтому добавить еще один файл в эту роль нельзя.' "), РольФайла));
							
						РольФайла = Неопределено;
						
						Возврат;
						
					Иначе
					
						МожноДобавитьТолькоОдинФайл = Истина;	
						
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЕсли;	
			
			Если ВестиУчетСканКопийОригиналовДокументов 
				И ТипЗнч(ДоступныеПоля) = Тип("Структура") 
				И ДоступныеПоля.Свойство("СоздатьФайлОригинал") 
				И Не ДоступныеПоля.Свойство("СоздатьФайлОбычный") Тогда
				
				ФайлКартинки = Новый Файл(ПутьКФайлу);
				РасширениеФайла = ФайлКартинки.Расширение;
				ФайлКартинки = Неопределено;
				
				КоличествоРасширенийСканКопий = 0;
				ЭтоРасширениеСканКопии = ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(
					РасширениеФайла, КоличествоРасширенийСканКопий);
				Если Не ЭтоРасширениеСканКопии И КоличествоРасширенийСканКопий > 0 Тогда 
					ПоказатьПредупреждение(, СтрШаблон(
						НСтр("ru = 'Выбранный файл не является скан-копией. Выберите файл с расширением: %1.'"),
						СписокВсехРасширенийСканКопийОригиналов));
					Возврат;
				КонецЕсли;
				
			КонецЕсли;	
			
			ДополнительныеПараметры = Новый Структура("РольФайла, МожноДобавитьТолькоОдинФайл", 
				РольФайла, МожноДобавитьТолькоОдинФайл);
			
			НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
			РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(
				ПутьКФайлу, Объект.Ссылка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла,
				,,,ДополнительныеПараметры);
				
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Буфер обмена не содержит картинки'"));
		КонецЕсли;
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТовары(Команда)
	
	ПоказыватьНоменклатуру = Не ПоказыватьНоменклатуру;
	Элементы.ПодобратьТовары.Пометка = ПоказыватьНоменклатуру;
	Элементы.ВсяНоменклатура.Видимость = ПоказыватьНоменклатуру;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатуру(Команда)
	
	ВыделенныеСтроки = Элементы.ВсеТовары.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ТекущиеДанные = Элементы.ВсеТовары.ДанныеСтроки(ВыделеннаяСтрока);
		Если ТекущиеДанные.ЭтоГруппа Тогда 
			Обработчик = Новый ОписаниеОповещения("ПеренестиНоменклатуруПродолжение", ЭтотОбъект, 
				Новый Структура("Группа", ТекущиеДанные.Ссылка));
			ПоказатьВопрос(Обработчик, 
				НСтр("ru = 'Выбран групповой элемент.
                     |Добавить все содержимое группы?'"), РежимДиалогаВопрос.ДаНет, 60);
			Возврат;
			
		Иначе 
			НайденныеСтроки = Объект.Товары.НайтиСтроки(
				Новый Структура("Номенклатура, ЕдиницаИзмерения",
				ТекущиеДанные.Ссылка, ТекущиеДанные.ЕдиницаИзмерения));
			Если НайденныеСтроки.Количество() = 0 Тогда 
				НайденнаяСтрока = Объект.Товары.Добавить();
				НайденнаяСтрока.Номенклатура = ТекущиеДанные.Ссылка;
				НайденнаяСтрока.ЕдиницаИзмерения = ТекущиеДанные.ЕдиницаИзмерения;
				НайденнаяСтрока.Цена = ТекущиеДанные.Цена;
				НайденнаяСтрока.СтавкаНДС = ТекущиеДанные.СтавкаНДС;
				НайденнаяСтрока.Количество = 1;
				ДелопроизводствоКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(НайденнаяСтрока, НайденнаяСтрока.СтавкаНДС);
			Иначе 
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
					НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + 1;
					ДелопроизводствоКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(НайденнаяСтрока, НайденнаяСтрока.СтавкаНДС);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Модифицированность = Истина;
	
	ТоварыПриИзменении(Элементы.Товары);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Команды работы с ЭДО

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьФайловыхКоманд(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
 	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуФайла(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли; 
	
	Если ТекущиеДанные.ЭтоДокумент Или ТекущиеДанные.ЭтоДокументЭДО Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.ЭтоРольФайла Тогда
		ПоказатьЗначение(, ТекущиеДанные.РольФайла);
	Иначе	
		ОткрытьКарточкуФайлаРеализация(ТекущиеДанные.Ссылка);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуФайлаРеализация(ФайлСсылка)
	
	УстановитьТолькоПросмотр = Ложь;

	Если Элементы.Файлы.ИзменятьСоставСтрок = Ложь Тогда
		УстановитьТолькоПросмотр = Истина;
	КонецЕсли; 

	ПараметрыОткрытия = Новый Структура("Ключ, УстановитьТолькоПросмотр", 
		ФайлСсылка, УстановитьТолькоПросмотр); 
	ОткрытьФорму("Справочник.Файлы.ФормаОбъекта", ПараметрыОткрытия);
	
КонецПроцедуры

#Область КомандыВопросовОбращений

&НаКлиенте
Процедура НесколькоВопросов(Команда)
	
	Если Элементы.Вопросы.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	НесколькоВопросов = Истина;
	УстановитьВидимостьКодовВопросов();
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВопросы;
	Элементы.Вопросы.ДобавитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ВыгрузитьВССТУ(Команда)
	
	РаботаСОбращениямиКлиент.СоздатьВыгрузкуВССТУ(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Работа с мобильным сканером

&НаКлиенте
Процедура ДобавитьСканСМобильного(Команда)
	
	ДобавитьСканСМобильногоВручную();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьРольФайла(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоРольФайла Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоДокументЭДО Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоПолноправныйПользователь 
		И  (ЗначениеЗаполнено(Объект.РегистрационныйНомер) 
		Или СостояниеОбработки = ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Выполняется")) Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Нельзя изменять роль файла у зарегистрированного 
		|или отправленного в обработку документа.'"));
		Возврат;
		
	КонецЕсли;	

	СписокФайлов = ТекущийСписокФайлов();
	
	МассивФайлов = Новый Массив;
	Для Каждого ВыбраннаяСтрока Из СписокФайлов.ВыделенныеСтроки Цикл
		ДанныеСтроки = СписокФайлов.ДанныеСтроки(ВыбраннаяСтрока);
		МассивФайлов.Добавить(ДанныеСтроки.Ссылка);
	КонецЦикла;	
	
	ПараметрыОткрытия = Новый Структура("МассивФайлов", МассивФайлов);	
	
	ОткрытьФорму("Справочник.РолиФайлов.Форма.ФормаВыбораРолейДляФайла", ПараметрыОткрытия,,,,,
		,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Переадресация
&НаКлиенте
Процедура ОтправитьОтветПереадресовавшему(Команда)
	
	РаботаСКорреспонденциейКлиент.ОтправитьОтветПереадресовавшему(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Переадресовать(Команда)
	
	РаботаСКорреспонденциейКлиент.Переадресовать(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОрфографию(Команда)
	
	#Если ВебКлиент Или МобильныйКлиент Тогда
		Возврат;
	#КонецЕсли

	// Проверяем одновременно оба поля
	ИДРазделитель = СокрЛП(Новый УникальныйИдентификатор());
	ТекстСодержания = Объект.Заголовок + Символы.Таб + ИДРазделитель + Символы.Таб + Объект.Содержание;
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеПроверитьОрфографию", 
		ЭтотОбъект,
		Новый Структура("ИДРазделитель", ИДРазделитель));
	ОрфографияКлиент.ПроверитьОрфографиюТекст(ОписаниеОповещения, ТекстСодержания);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПроверитьОрфографию(Результат, Параметры) Экспорт
	
	Если Результат.ТекстИзменен Тогда
		Разделитель = Символы.Таб + Параметры.ИДРазделитель + Символы.Таб;
		
		ТекстСодержания = Результат.ПроверяемыйТекст;
		Объект.Заголовок = Лев(ТекстСодержания, СтрНайти(ТекстСодержания, Разделитель) - 1);
		Объект.Содержание = Прав(ТекстСодержания, 
			СтрДлина(ТекстСодержания) - СтрНайти(ТекстСодержания, Разделитель) - СтрДлина(Разделитель) + 1);
		
		Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВажностьВысокая(Команда)
	
	Объект.Важность = ПредопределенноеЗначение("Перечисление.ВариантыВажностиОбъектов.Высокая");
	ОтобразитьВажность(ЭтотОбъект);
	
	ИзменилсяКлючНастроекОбработки = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВажностьНормальная(Команда)
	
	Объект.Важность = ПредопределенноеЗначение("Перечисление.ВариантыВажностиОбъектов.Обычная");
	ОтобразитьВажность(ЭтотОбъект);
	
	ИзменилсяКлючНастроекОбработки = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВажностьНизкая(Команда)
	
	Объект.Важность = ПредопределенноеЗначение("Перечисление.ВариантыВажностиОбъектов.Низкая");
	ОтобразитьВажность(ЭтотОбъект);
	
	ИзменилсяКлючНастроекОбработки = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НеПоказыватьДанныеОбработки(Команда)

	НеПоказыватьДанныеОбработки = Не НеПоказыватьДанныеОбработки;
	Элементы.НеПоказыватьДанныеОбработки.Пометка = НеПоказыватьДанныеОбработки;
	
	ПолучитьОбзорДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура НастоящийРазмер(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	ТекущийФайл = ТекущиеДанные.Ссылка;
	РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	
	Если ИспользоватьПредпросмотрФайлов
		И Не ТекущиеДанные.ЭтоДокумент
		И Не ТекущиеДанные.ЭтоРольФайла
		И Не РедактируетТекущийПользователь Тогда
	
		ДокументPDF = Неопределено;
		
		ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();   
		ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
		ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.Расширение;
		ПараметрыHTMLПредставление.Размер = ТекущиеДанные.ТекущаяВерсияРазмер;
		ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
		ПараметрыHTMLПредставление.ПредпросмотрОфисныхФайлов = ПредпросмотрОфисныхФайлов;
		ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки = Ложь;
		МасштабироватьPDFИКартинки = Ложь;
		
		ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
			ТекущийФайл,
			ПараметрыHTMLПредставление,
			ДокументPDF);
		
		ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ПредставлениеHTML, ТаймлистАвтопротоколHTML,
			РаспознанныйТекстHTML);
		
		Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
		
		УстановитьВидимостьКомандМасштаба(ТекущиеДанные.Расширение);
		
		НомерПорции = 1;
		ВсегоПорцийПредпросмотра = ПараметрыHTMLПредставление.ВсегоПорцийПредпросмотра;
		ОбновитьКнопкиДинамическогоСпискаКлиент();
		
		Если ДокументPDF = Неопределено Тогда
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
		Иначе
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
			ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
			Элементы.ДокументPdfПоле.НомерТекущейСтраницы = 1;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоШиринеОкна(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	ТекущийФайл = ТекущиеДанные.Ссылка;
	РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	
	Если ИспользоватьПредпросмотрФайлов
		И Не ТекущиеДанные.ЭтоДокумент
		И Не ТекущиеДанные.ЭтоРольФайла
		И Не РедактируетТекущийПользователь Тогда
	
		ДокументPDF = Неопределено;
		
		ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();   
		ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
		ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.Расширение;
		ПараметрыHTMLПредставление.Размер = ТекущиеДанные.ТекущаяВерсияРазмер;
		ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
		ПараметрыHTMLПредставление.ПредпросмотрОфисныхФайлов = ПредпросмотрОфисныхФайлов;
		ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки = Истина;  
		МасштабироватьPDFИКартинки = Истина;
		
		ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
			ТекущийФайл,
			ПараметрыHTMLПредставление,
			ДокументPDF);
		
		ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ПредставлениеHTML, ТаймлистАвтопротоколHTML,
			РаспознанныйТекстHTML);
		
		Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
		
		УстановитьВидимостьКомандМасштаба(ТекущиеДанные.Расширение);

		НомерПорции = 1;
		ВсегоПорцийПредпросмотра = ПараметрыHTMLПредставление.ВсегоПорцийПредпросмотра;
		ОбновитьКнопкиДинамическогоСпискаКлиент();
		
		Если ДокументPDF = Неопределено Тогда
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
		Иначе
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
			ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
			Элементы.ДокументPdfПоле.НомерТекущейСтраницы = 1;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКомандМасштаба(Расширение)
	
	Если ОбзорФайловКлиентСервер.ЭтоКартинка(Расширение) Или ОбзорФайловКлиентСервер.ЭтоPDF(Расширение) Тогда
		
		Если МасштабироватьPDFИКартинки Тогда
			
			Элементы.НастоящийРазмер.Видимость = Истина;
			Элементы.ПоШиринеОкна.Видимость = Ложь;
			
		Иначе
				
			Элементы.НастоящийРазмер.Видимость = Ложь;
			Элементы.ПоШиринеОкна.Видимость = Истина;
			
		КонецЕсли;
	
	Иначе
			
		Элементы.НастоящийРазмер.Видимость = Ложь;
		Элементы.ПоШиринеОкна.Видимость = Ложь;
		
	КонецЕсли;
		
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОтветноеУведомлениеМЭДО(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	МЭДОКлиент.СоздатьОтветноеУведомление(Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

#Область КомандыМЭДО

&НаКлиенте
Процедура ОбновитьИсториюСостоянийМЭДО(Команда)
	
	ОбновитьИсториюСостоянийМЭДОСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоМЭДО(Команда)
	
	ОчиститьСообщения();
	
	Если Не ГотовКОтправкеМЭДО Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Необходимо установить флаг ""Готов к отправке""'"),
			Объект.Ссылка);
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
			
	ИначеЕсли Модифицированность Тогда 
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Флаг мог сняться при записи документа, проверкой готовности к отправке:
	Если Не ГотовКОтправкеМЭДО Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Флаг готовности к отправке снят автоматически при проверке, отправка отменена'"),
			Объект.Ссылка);
		Возврат;
	КонецЕсли;
	
	ДанныеОтвета = МЭДОКлиент.НовыйЛегкийОтвет();
	МЭДОВызовСервера.ОтправитьИсходящиеДокументы(
		Объект.Организация,
		ДанныеОтвета,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка));
	
	МЭДОКлиент.ПоказатьРезультатОтправки(НСтр("ru = 'Документ отправлен'"), ДанныеОтвета);
	// Перечитать, т.к. после записи документа обнуляются все реквизиты формы, и нужно обновить флаги отправки:
	ЗаполнитьЗакладкуМЭДОВФормеСервер();
	ОповеститьОбИзменении(КлючЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандДействийФормы

&НаКлиенте
Процедура ДобавитьДействие(Команда)
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ДобавитьДействиеЗавершение", ЭтотОбъект);
	ПараметрыОбъектаОбработки = ДействияКлиентСервер.ПараметрыОбъектаОбработки(
		Объект.Ссылка,
		Объект);
	ДействияКлиент.ДобавитьДействиеИзКарточкиПредмета(
		ЭтотОбъект,
		ОбработчикОповещения,
		ПараметрыОбъектаОбработки,
		ПараметрыВидаОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДействиеЗавершение(Результат, Параметры) Экспорт
	
	ПрочитатьДействия();
	ДействияКлиент.РазвернутьДействия(Элементы.Действия, Действия);
	
КонецПроцедуры

&НаКлиенте
Процедура СхемаОбработки(Команда)
	
	СхемаОбработкиПродолжение();

КонецПроцедуры

&НаКлиенте
Процедура СхемаОбработкиЕще(Команда)
	
	СхемаОбработкиПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура СхемаОбработкиПродолжение()
	
	РаботаСПроцессамиПоОбработкамОбъектовКлиент.ОткрытьСхемуОбработкиОбъекта(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДействия(Команда)
	
	ПрочитатьДействия();
	ДействияКлиент.РазвернутьДействия(Элементы.Действия, Действия);
	
КонецПроцедуры

&НаКлиенте
Процедура Контроль(Команда)
	
	ДействияКлиент.ПоставитьДействиеНаКонтроль(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДействияВФорме() Экспорт
	
	ПрочитатьДействия();
	ДействияКлиент.РазвернутьДействия(Элементы.Действия, Действия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКВыполнениюДействия(Команда)
	
	ТекущиеДанные = Элементы.Действия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.Действие) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкиОбъектовКлиент.ПерейтиКВыполнениюДействия(
		Объект.Ссылка, ТекущиеДанные.Действие);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияОтправить(Команда)
	
	ДействияОтправитьВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияОтправитьВыполнить() Экспорт
	
	// 2 разных замера:
	Если СостояниеОбработки = ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Выполняется") 
		Или СостояниеОбработки = ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Остановлена") Тогда
		// прервать обработку:
		УИДЗамераВыполнениеКомандыОтправитьВОбработку = ОценкаПроизводительностиКлиент.ЗамерВремени(
			"ДокументыПредприятияВыполнениеКомандыПрерватьОбработку", Ложь, Ложь);
	Иначе
		// отправить в обработку:
		УИДЗамераВыполнениеКомандыОтправитьВОбработку = ОценкаПроизводительностиКлиент.ЗамерВремени(
			"ДокументыПредприятияВыполнениеКомандыОтправитьВОбработку", Ложь, Ложь);
	КонецЕсли;
	
	ОбработчикОповещения = Новый ОписаниеОповещения(
		"ДействияОтправитьЗавершение",
		ЭтотОбъект,
		Новый Структура);	
		
	ОбработкиОбъектовКлиент.НачатьОбработкуИзКарточкиПредмета(
		ЭтотОбъект,
		ОбработчикОповещения,
		ПараметрыВидаОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияОстановить(Команда)
	
	ОбработчикОповещения = Новый ОписаниеОповещения(
		"ДействияОстановитьЗавершение",
		ЭтотОбъект,
		Новый Структура);
		
	ОбработкиОбъектовКлиент.ОстановитьПродолжитьОбработкуИзКарточкиПредмета(
		ЭтотОбъект,
		ОбработчикОповещения,
		ПараметрыВидаОбъекта);
		
КонецПроцедуры

&НаКлиенте
Процедура ДействияОстановитьЗавершение(Результат, Параметры) Экспорт
	
	ОбновитьДействияСостояниеИДоступностьПолей();
	ДействияКлиент.РазвернутьДействия(Элементы.Действия, Действия);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПротоколРазногласий(Команда)

	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(ДействиеСогласованияВРежимеЗамечаний);
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Справочник.ДокументыПредприятия",
		"ПротоколРазногласий",
		МассивДокументов,
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияОтправитьЗавершение(Результат, Параметры) Экспорт
	
	БылПоказанДиалогИнтерактивногоЗапускаПроцесса = Истина;
	
	ПодключитьОбработчикОжидания("ОбновитьКнопкуОтправить", 15, Истина);
	
	ОбновитьДействияСостояниеИДоступностьПолей();
	ДействияКлиент.РазвернутьДействия(Элементы.Действия, Действия);
	
	Попытка 
		РазблокироватьДанныеФормыДляРедактирования();
	Исключение
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
			НСтр("ru = 'Ошибка после отправки в обработку'"),, 
			ОписаниеОшибки(),,
			Истина);
	КонецПопытки;
	
	ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(УИДЗамераВыполнениеКомандыОтправитьВОбработку);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействие(Команда)
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ВыполнитьДействиеЗавершение", ЭтотОбъект);
	ДействияКлиент.ВыполнитьДействиеИзКарточкиПредмета(ЭтотОбъект, ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеЗавершение(Результат, Параметры) Экспорт
	
	ПрочитатьДействия();
	ДействияКлиент.РазвернутьДействия(Элементы.Действия, Действия);
	
	ОповеститьОбИзменении(КлючЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПоказатьВсе(Команда)
	
	ДействияКлиент.ДействияПоказатьВсе(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияЗаполнить(Команда)
	
	Если ЗначениеЗаполнено(КомплексныйПроцессПоПредмету) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Документ обрабатывается в рамках комплексного процесса.'"));
		Возврат;
	КонецЕсли;
		
	ДействияКлиент.ЗаполнитьДействия(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// перечитать действия
		ПрочитатьДействия();
		ДействияКлиент.РазвернутьДействия(Элементы.Действия, Действия);
		УстановитьДоступностьПолей();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДействия(ПослеПомещенияВИсторию = Ложь) Экспорт
	
	// Сначала прочитаем все что есть
	Если Не ДействияПоказыватьВсе Тогда
		ДействияПоказыватьВсе = Не ДействияПоказыватьВсе;
		Элементы.ДействияПоказатьВсе.Пометка = ДействияПоказыватьВсе;
	
		ПрочитатьДействия();
	КонецЕсли;
	
	ОбновитьПараметрыВидаОбъекта();
	ПравилаОбработкиСервер.ЗаполнитьДействияВФормеПредмета(ЭтотОбъект, ПараметрыВидаОбъекта);
	ИзменилсяКлючНастроекОбработки = Ложь;
	ДействияСервер.ЗаполнитьРеквизитыПодписанияУтвержденияВФорме(
		ЭтотОбъект,
		ПараметрыВидаОбъекта,
		Истина);
	Если Действия.ПолучитьЭлементы().Количество() = 0
		И Не ПослеПомещенияВИсторию Тогда
		
		Сообщить(НСтр("ru = 'Обработка документа не настроена'"));
	КонецЕсли;
	
	УстановитьВидимостьВыполненияВнеПрограммы();
КонецПроцедуры

&НаКлиенте
Процедура ДействияПерезапуститьОбработку(Команда)
	
	Если ЗначениеЗаполнено(КомплексныйПроцессПоПредмету) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Документ обрабатывается в рамках комплексного процесса.'"));
		Возврат;
	КонецЕсли;
	
	Если ДействияВызовСервера.ЕстьПравоПомещенияДействийВИсторию() Тогда
		ТекстВопроса = 
			НСтр("ru = 'Поместить процесс обработки документа в историю и заполнить обработку заново?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикПерезапуститьОбработку",
			ЭтотОбъект, Новый Структура);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,
			, КодВозвратаДиалога.Нет);
	Иначе 
		ПоказатьПредупреждение(,НСтр("ru = 'Недостаточно прав на перезапуск обработки.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПерезапуститьОбработку(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбработчикОповещения = Новый ОписаниеОповещения(
			"ОбновлениеДереваОбработкиПослеПоместитьВИсторию",
			ЭтотОбъект,
			Новый Структура);	
		
		ПричинаПрерывания = Новый Структура("ПричинаПрерывания", "");
		
		ДополнительныеПараметры = Новый Структура("Форма, ОбработчикОповещения, ПоместитьВИсторию",
			ЭтотОбъект, ОбработчикОповещения, Истина);
		
		ОбработкиОбъектовКлиент.ПродолжитьПрерваниеОбработкиДокументаПослеВводаПричиныПрерывания(
			ПричинаПрерывания, ДополнительныеПараметры);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеДереваОбработкиПослеПоместитьВИсторию(Результат, Параметры) Экспорт
	
	Действия.ПолучитьЭлементы().Очистить();
	
	ДействияКлиент.ЗаполнитьДействия(ЭтотОбъект, Истина);

	// перечитать действия
	ПрочитатьДействия();
	ДействияКлиент.РазвернутьДействия(Элементы.Действия, Действия);
	УстановитьДоступностьПолей();
	
	ДействияКлиент.ДействияПослеПомещенияВИсторию(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияХодОбработки(Команда)
	ДействияКлиент.ДействияХодОбработки(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДействияЗамечанияСогласования(Команда)
	ДействияКлиент.ДействияЗамечанияСогласования(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКВыполнениюЗадачи(Команда)

	Для Каждого СтрокаДействия Из Действия.ПолучитьЭлементы() Цикл
		Если НайтиСтрокуДействияИОткрытьФорму(СтрокаДействия) Тогда
			Возврат;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЛистОзнакомления(Команда)
	
	ДействияОзнакомления = Новый Массив;
	Для Каждого Стр Из Действия.ПолучитьЭлементы() Цикл
		
		Если ЗначениеЗаполнено(Стр.Действие) И ДействияКлиентСервер.ЭтоДействиеОзнакомления(Стр.Действие) Тогда      
			
			ДействияОзнакомления.Добавить(Стр.Действие);

		КонецЕсли;	
		
	КонецЦикла;	
	
	// тут проверку на число исполнителей                                                                 
	ЧислоУчастников = 0;
	МаксимальноеЧислоДляПоказа = 0;
	ДействияВызовСервера.ЧислоУчастниковОзнакомления(ДействияОзнакомления, ЧислоУчастников, МаксимальноеЧислоДляПоказа);
	
	Если ЧислоУчастников > МаксимальноеЧислоДляПоказа Тогда
		
		ТекстВопроса = СтрШаблон(
			НСтр("ru = 'В документе %1 ознакомлений, поэтому формирование листа ознакомления может быть длительным. 
			|Продолжить?'"),
			ЧислоУчастников);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЛистОзнакомленияПродолжение",
			ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;    
	
	ЛистОзнакомленияПродолжение(КодВозвратаДиалога.Да, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛистОзнакомленияПродолжение(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
		
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(Объект.Ссылка);
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Справочник.ДокументыПредприятия",
		"ЛистОзнакомления",
		МассивДокументов,
		ЭтаФорма);
		
КонецПроцедуры	

&НаКлиенте
Процедура ХодОзнакомления(Команда)

 	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("КлючВарианта", "ЛистОзнакомления");
	ОткрытьФорму("Отчет.ОзнакомлениеСОбъектом.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ДействиеВыполненоВнеПрограммы(Команда)

	ДействияКлиент.ВводРезультатаВыполненияДействияВнеСистемы(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СоздатьИсходящийДокументЭДО(Команда)
	
	СоздатьИсходящийДокументЭДОРеализация();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИсходящийДокументЭДОРеализация()
	
	Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗадатьВопросОЗаписиДокументаПередСозданиемИсходящегоЭД();
		Возврат;
	КонецЕсли;
	
	ПараметрыСоздания = ОбменЭДОДокументооборотКлиент.НовыеПараметрыСозданияИсходящегоЭДОПоДокументуДО();
	ПараметрыСоздания.Документ = Объект.Ссылка;
	ПараметрыСоздания.АктуальныйДокументЭДО = ТекущийДокументЭДО;
	ПараметрыСоздания.Форма = ЭтотОбъект;
	
	ОбменЭДОДокументооборотКлиент.СоздатьИсходящийЭДОПоДокументуДО(ПараметрыСоздания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереформироватьДокументЭДО(Команда)

	СоздатьИсходящийДокументЭДОРеализация();
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьАннулирование(Команда)
	
	НаборДействий = Новый Соответствие;	
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПринятьАннулирование"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить"));
		
	ПакетнаяОбработка = Ложь;
	ВыполнитьДействияПоЭДО(НаборДействий, ПакетнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулирование(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	
	ДополнительныеПараметры.Вставить("ЭлектронныеДокументы", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущийДокументЭДО));
	
	НаборДействий = Новый Соответствие;	
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ОтклонитьАннулирование"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить"));
	
	ДополнительныеПараметры.Вставить("НаборДействий", НаборДействий);
	ДополнительныеПараметры.Вставить("ОсновноеДействие", ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.ОтклонитьАннулирование"));
				
	Обработчик = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеВводаСтроки", ИнтерфейсДокументовЭДОКлиент, ДополнительныеПараметры);
	
	ДополнительныеПараметры = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
	ДополнительныеПараметры.ЗаголовокФормы = НСтр("ru = 'Укажите причины отклонения предложения об аннулировании'");
	ДополнительныеПараметры.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Отклонить аннулирование'");
	ДополнительныеПараметры.Многострочность = Истина;
	ДополнительныеПараметры.Обязательность = Истина;
	ДополнительныеПараметры.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для отклонения предложения об аннулировании документа необходимо указать причину.'");
	ОбщегоНазначенияБЭДКлиент.ПоказатьВводСтрокиБЭД(Обработчик, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура Аннулировать(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	
	ДополнительныеПараметры.Вставить("ЭлектронныеДокументы", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущийДокументЭДО));
	
	НаборДействий = Новый Соответствие;	
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Аннулировать"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ЭлектронныеДокументыЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить"));
	
	ДополнительныеПараметры.Вставить("НаборДействий", НаборДействий);
	ДополнительныеПараметры.Вставить("ОсновноеДействие", ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.Аннулировать"));
				
	Обработчик = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеВводаСтроки", ИнтерфейсДокументовЭДОКлиент, ДополнительныеПараметры);
	
	ДополнительныеПараметры = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
	ДополнительныеПараметры.ЗаголовокФормы = НСтр("ru = 'Укажите причины аннулирования документа'");
	ДополнительныеПараметры.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Аннулировать'");
	ДополнительныеПараметры.Многострочность = Истина;
	ДополнительныеПараметры.Обязательность = Истина;
	ДополнительныеПараметры.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для аннулирования документа необходимо указать причину.'");
	ОбщегоНазначенияБЭДКлиент.ПоказатьВводСтрокиБЭД(Обработчик, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьЭлектронныйДокумент(Команда)
	ПоказатьЗначение(,
		ИнтеграцияЭДОВызовСервера.ОсновнойЭлектронныйДокументОбъектаУчета(Объект.Ссылка));
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭлектронныеДокументы(Команда)
	ИнтерфейсДокументовЭДОКлиент.ОткрытьДеревоЭлектронныхДокументов(Объект.Ссылка);
КонецПроцедуры

// Обработать событие создания исходящего ЭДО.
// 
// Параметры:
//  Параметр - см. ОбменЭДОДокументооборотКлиент.НовыеПараметрыСобытияСозданияИсходящегоЭДО
&НаКлиенте
Процедура ОбработатьСобытиеСозданияИсходящегоЭДО(Параметр)
	
	Если Параметр.ДокументДО <> Объект.Ссылка Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийДокументЭДО = Параметр.СозданныйЭДО;
	ОбновитьСостояниеЭДО();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеЭДО()
	
	СостояниеЭДО = ОбменЭДОДокументооборот.СостояниеДокументаИДоступностьКоманд(
					ТекущийДокументЭДО, ЭтотОбъект);
	ОбновитьРеквизитыЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоделитьсяДокументомShare(Команда)
	
	Подключаемый_ПоделитьсяДокументомShare();
	
КонецПроцедуры

&НаКлиенте
Процедура Страница1(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте
Процедура Страница2(Команда)      
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте
Процедура Страница3(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте
Процедура Страница4(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте         
Процедура Страница5(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	      

&НаКлиенте
Процедура Страница6(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	  

&НаКлиенте
Процедура Страница7(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	 

&НаКлиенте
Процедура Страница8(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	   

&НаКлиенте
Процедура Страница9(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте
Процедура Назад(Команда)
	
	НомерПорции = НомерПорции - 1;
	ЧастьВыбор(НомерПорции);
	
КонецПроцедуры

&НаКлиенте
Процедура Вперед(Команда)
	
	НомерПорции = НомерПорции + 1;
	ЧастьВыбор(НомерПорции);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаВыбор(Команда)
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("СтраницаВыборЗавершение", ЭтотОбъект);
	ОбзорФайловКлиент.ВыбратьСтраницуДинамическогоСписка(
		ЭтотОбъект,
		Команда,
		НомерПорции,
		ВсегоПорцийПредпросмотра,
		ОповещениеОЗавершении);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВывестиСтрокуСостояний()
	
	ОбзорДокумента.ВывестиКартинкуФорума(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ТекстВопросаНезаписанныхДанных(НазваниеКоманды) Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Данные еще не записаны.
             |Выполнение действия ""%1"" возможно только после записи данных.
             |Данные будут записаны.'"),
		НазваниеКоманды);
	
КонецФункции

#Область Таймлист

// Обработчик выполнение команды получения автопротокола из HTML обзора файла.
// 
// Параметры:
//  Результат - Массив Из Структура - массив спикеров с их именами и ролями
//  Файл - СправочникСсылка.Файлы
// 
&НаКлиенте
Процедура НачатьПолучениеАвтопротокола(Результат, Файл) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаймлистВызовСервера.НачатьОбработкуФайла(
		Файл,
		ПредопределенноеЗначение("Перечисление.ТаймлистТипыЗаданий.ПодготовитьДанныеКПолучениюАвтопротокола"),
		Результат);
	
	ЗаполнитьСписокФайловКлиент();
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция ТекущиеДанныеСпискаФайлов()
	
	Если Элементы.Обзор.Видимость Тогда
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	Иначе	
		ТекущиеДанные = Элементы.ФайлыСоздание.ТекущиеДанные;
	КонецЕсли;
	
	Возврат ТекущиеДанные;
	
КонецФункции

&НаКлиенте
Функция ТекущийСписокФайлов()
	
	Если Элементы.Обзор.Видимость Тогда
		Возврат Элементы.Файлы;
	Иначе	
		Возврат Элементы.ФайлыСоздание;
	КонецЕсли;
	
КонецФункции

// Заполняет список файлов в карточке документа
//
//	Параметры
//		ЗаполнитьПризнакОригинал - Булево - если Истина, то будет заполнен признак оригинала
//
&НаСервере
Процедура ЗаполнитьСписокФайлов(ЗаполнитьПризнакОригинал = Ложь)
	
	ОтметитьЗахваченныеФайлы = Истина;
	Делопроизводство.ЗаполнитьСписокФайловДокумента(ЭтаФорма, ЗаполнитьПризнакОригинал,,
		ОтметитьЗахваченныеФайлы, СвязанныеДокументыЭДО.Количество() <> 0);   
		
	ФайлыЗаполненыСЭДО = (СвязанныеДокументыЭДО.Количество() <> 0);
	
	// добавим строку документа
	Если ИспользоватьПредпросмотрФайлов Или СвязанныеДокументыЭДО.Количество() <> 0 Тогда
		
		Если Файлы.ПолучитьЭлементы().Количество() <> 0 Или СвязанныеДокументыЭДО.Количество() <> 0 Тогда
		
			РольФайла = Неопределено;
			Если Файлы.ПолучитьЭлементы().Количество() <> 0 Тогда
				Строка1 = Файлы.ПолучитьЭлементы().Получить(0);
				РольФайла = Строка1.РольФайла;
			КонецЕсли;	
			
			Если ИспользоватьПредпросмотрФайлов Тогда
				
				НовСтр = Файлы.ПолучитьЭлементы().Вставить(0);
				НовСтр.ЭтоДокумент = Истина;
				НовСтр.Наименование = НСтр("ru = 'Документ'");
				НовСтр.ИндексКартинки = 10;
				НовСтр.СтатусПроверкиЭП = -1;
				Если Объект.ПодписанЭП Тогда
					НовСтр.СтатусПроверкиЭП = 3;
				КонецЕсли;	
				НовСтр.РольФайла = РольФайла; 
				
			КонецЕсли;
			
			Если СвязанныеДокументыЭДО.Количество() <> 0 Тогда
				
				Для Каждого СтрокаСписка Из СвязанныеДокументыЭДО Цикл
					
					ДокЭДО = СтрокаСписка.Значение;
					
					Если Файлы.ПолучитьЭлементы().Количество() <> 0 Тогда
						СтрЭДО = Файлы.ПолучитьЭлементы().Вставить(1);
					Иначе	
						СтрЭДО = Файлы.ПолучитьЭлементы().Вставить(0);
					КонецЕсли;	
					
					СтрЭДО.ДокументЭДО = ДокЭДО;
					СтрЭДО.ЭтоДокументЭДО = Истина;              
					
					СтрЭДО.Наименование = Строка(ДокЭДО) + НСтр("ru = ' (Документ ЭДО)'");
					
					СтрЭДО.ИндексКартинки = 30; // как xml  
					СтрЭДО.СтатусПроверкиЭП = -1;
					СтрЭДО.РольФайла = РольФайла; 
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокФайловКлиент(ЗаполнитьПризнакОригинал = Ложь) Экспорт
	
	ДанныеМиникарточки = ОбзорСпискаДокументов.ДанныеМиникарточкиТолькоФайлы(
		Объект.Ссылка, Объект.ВидДокумента, ПоказыватьУдаленныеФайлы);
	
	ОбзорСпискаДокументовКлиент.ЗаполнитьДеревоФайловКарточкаДокумента(ЭтаФорма, ДанныеМиникарточки); 
	
	ФайлыЗаполненыСЭДО = (СвязанныеДокументыЭДО.Количество() <> 0);
	
	// добавим строку документа
	Если ИспользоватьПредпросмотрФайлов Или СвязанныеДокументыЭДО.Количество() <> 0 Тогда
		
		Если Файлы.ПолучитьЭлементы().Количество() <> 0 Или СвязанныеДокументыЭДО.Количество() <> 0 Тогда
		
			РольФайла = Неопределено;
			Если Файлы.ПолучитьЭлементы().Количество() <> 0 Тогда
				Строка1 = Файлы.ПолучитьЭлементы().Получить(0);
				РольФайла = Строка1.РольФайла;
			КонецЕсли;	
			
			Если ИспользоватьПредпросмотрФайлов Тогда
				
				НовСтр = Файлы.ПолучитьЭлементы().Вставить(0);
				НовСтр.ЭтоДокумент = Истина;
				НовСтр.Наименование = НСтр("ru = 'Документ'");
				НовСтр.ИндексКартинки = 10;
				НовСтр.СтатусПроверкиЭП = -1;
				Если Объект.ПодписанЭП Тогда
					НовСтр.СтатусПроверкиЭП = 3;
				КонецЕсли;
				НовСтр.РольФайла = РольФайла;
				
			КонецЕсли;	
			
			Если СвязанныеДокументыЭДО.Количество() <> 0 Тогда
				
				Для Каждого СтрокаСписка Из СвязанныеДокументыЭДО Цикл
					
					ДокЭДО = СтрокаСписка.Значение;
					
					Если ИспользоватьПредпросмотрФайлов Тогда
						СтрЭДО = Файлы.ПолучитьЭлементы().Вставить(1);
					Иначе
						СтрЭДО = Файлы.ПолучитьЭлементы().Вставить(0);
					КонецЕсли;	
					
					СтрЭДО.ДокументЭДО = ДокЭДО;
					СтрЭДО.ЭтоДокументЭДО = Истина;  
					
					СтрЭДО.Наименование = Строка(ДокЭДО) + НСтр("ru = ' (Документ ЭДО)'");
					
					СтрЭДО.ИндексКартинки = 30; // как xml  
					СтрЭДО.СтатусПроверкиЭП = -1;
					СтрЭДО.РольФайла = РольФайла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьСтраницОбзораФайла()
	
	Элементы.ТаймлистАвтопротоколHTML.Видимость = ЗначениеЗаполнено(ТаймлистАвтопротоколHTML);
	Элементы.РаспознанныйТекстHTML.Видимость = ЗначениеЗаполнено(РаспознанныйТекстHTML);
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	
	Если ТекущиеДанные <> Неопределено
		И ТаймлистКлиентСервер.ЭтоРасширениеФайлаТаймлист(ТекущиеДанные.Расширение) Тогда
		
		Если ТекущиеДанные.ТаймлистСтатус
			= ПредопределенноеЗначение("Перечисление.ТаймлистСтатусы.ПолученАвтопротокол") Тогда
			Элементы.ГруппаТаймлистАвтопротокол.Видимость = Истина;
			Элементы.ГруппаПредпросмотрСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
			Элементы.ГруппаHtml.Заголовок = НСтр("ru = 'Расшифровка'");
		Иначе
			Элементы.ГруппаТаймлистАвтопротокол.Видимость = Ложь;
			Элементы.ГруппаПредпросмотрСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
			Элементы.ГруппаHtml.Заголовок = "";
		КонецЕсли;
		
		Элементы.ГруппаHtml.Видимость = Истина;
		Элементы.ГруппаРаспознанныйТекст.Видимость = Ложь;
		Элементы.ГруппаPdf.Видимость = Ложь;
		Элементы.ГруппаЭДО.Видимость = Ложь;
		
	ИначеЕсли ТекущиеДанные <> Неопределено
		И ТекущиеДанные.СтатусРаспознаванияТекста
			= ПредопределенноеЗначение("Перечисление.СтатусыРаспознаванияТекста.Распознано") Тогда
		
		Элементы.ГруппаПредпросмотрСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		
		Если Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf Тогда
			Элементы.ГруппаHtml.Видимость = Ложь;
			Элементы.ГруппаPdf.Видимость = Истина;
			Элементы.ГруппаPdf.Заголовок = НСтр("ru = 'Предпросмотр'");
		Иначе
			Элементы.ГруппаPdf.Видимость = Ложь;
			Элементы.ГруппаHtml.Видимость = Истина;
			Элементы.ГруппаHtml.Заголовок = НСтр("ru = 'Предпросмотр'");
		КонецЕсли;
		
		Элементы.ГруппаТаймлистАвтопротокол.Видимость = Ложь;
		Элементы.ГруппаРаспознанныйТекст.Видимость = Истина;
		Элементы.ГруппаЭДО.Видимость = Ложь;
		
	Иначе
		
		Элементы.ГруппаПредпросмотрСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.ГруппаHtml.Видимость = Истина;
		Элементы.ГруппаPdf.Видимость = Истина;
		Элементы.ГруппаРаспознанныйТекст.Видимость = Ложь;
		Элементы.ГруппаТаймлистАвтопротокол.Видимость = Ложь;
		Элементы.ГруппаЭДО.Видимость = Истина;
		Элементы.ГруппаHtml.Заголовок = "";
		Элементы.ГруппаPdf.Заголовок = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаскрытьДеревоФайлов()
	
	// Раскроем дерево
	КоллекцияСтрок = Файлы.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияСтрок Цикл
		
		Если ЗначениеЗаполнено(Строка.РольФайла) И
			Строка.РольОбязательная Тогда
			
			ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
			Если Элементы.Обзор.Видимость Тогда
				Элементы.Файлы.Развернуть(ИдентификаторСтроки, Истина);
			ИначеЕсли Элементы.СтраницаФайлы.Видимость Тогда
				Элементы.ФайлыСоздание.Развернуть(ИдентификаторСтроки, Истина);
			КонецЕсли;
			
		КонецЕсли;

		Если Строка.ЭтоДокумент Тогда
			
			ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
			Если Элементы.Обзор.Видимость Тогда
				Элементы.Файлы.Развернуть(ИдентификаторСтроки, Истина);
			ИначеЕсли Элементы.СтраницаФайлы.Видимость Тогда
				Элементы.ФайлыСоздание.Развернуть(ИдентификаторСтроки, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры	

// Обновляет одну или несколько колонок в списке файлов
//
//	Параметры
//		Колонки - Строка - список колонок, которые нужно обновить
//
&НаСервере
Процедура ОбновитьКолонкиСпискаФайлов(Колонки)
	
	МассивФайлов = Новый Массив;
	Для Каждого Строка Из Файлы.ПолучитьЭлементы() Цикл
		Если Не Строка.ЭтоРольФайла И Не Строка.ЭтоДокументЭДО Тогда
			МассивФайлов.Добавить(Строка.Ссылка);
		Иначе
			
			Для Каждого Подстрока Из Строка.ПолучитьЭлементы() Цикл
				МассивФайлов.Добавить(Подстрока.Ссылка);
			КонецЦикла;	
			
		КонецЕсли;	
			
	КонецЦикла;
	
	ТаблицаФайлов = Делопроизводство.ПолучитьДанныеФайловДляСписка(МассивФайлов, Объект.Ссылка);
	
	Для Каждого Строка Из Файлы.ПолучитьЭлементы() Цикл
		
		Если Не Строка.ЭтоРольФайла И Не Строка.ЭтоДокументЭДО Тогда
			НайденнаяСтрока = ТаблицаФайлов.Найти(Строка.Ссылка, "Ссылка");
			Если НайденнаяСтрока <> Неопределено Тогда 
				ЗаполнитьЗначенияСвойств(Строка, НайденнаяСтрока, Колонки);
			КонецЕсли;	
		Иначе
			
			Для Каждого Подстрока Из Строка.ПолучитьЭлементы() Цикл
				НайденнаяСтрока = ТаблицаФайлов.Найти(Подстрока.Ссылка, "Ссылка");
				Если НайденнаяСтрока <> Неопределено Тогда 
					ЗаполнитьЗначенияСвойств(Подстрока, НайденнаяСтрока, Колонки);
				КонецЕсли;	
			КонецЦикла;	
			
		КонецЕсли;	
			
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура ПометитьФайлыНаУдаление(МассивФайлов, ЗначениеПометкиУдаления,
	КоличествоЗанятыхФайлов = Неопределено)
	
	ОтметитьЗахваченныеФайлы = Истина;
	Если ОригиналПолученУстановленоВручную = Неопределено Тогда
		ОригиналПолученУстановленоВручную = Ложь;
	КонецЕсли;	
	
	Делопроизводство.ПометитьФайлыНаУдаление(ЭтотОбъект, МассивФайлов, 
		ЗначениеПометкиУдаления,, ОтметитьЗахваченныеФайлы, КоличествоЗанятыхФайлов, Истина,
		ОригиналПолученУстановленоВручную);
	
	Если ПоказыватьУдаленныеФайлы Тогда
		ЗаполнитьСписокФайлов(Истина);
	КонецЕсли;		

	ВывестиДекорациюОтсутствуетОригинал(Объект);
	Делопроизводство.ОбновитьСведенияОПолученииОригинала(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтрокуФайла(Файл)
	
	СтрокаИдентификатор = Неопределено;

	Для Каждого Строка Из Файлы.ПолучитьЭлементы() Цикл
		Если Не Строка.ЭтоРольФайла Тогда
			Если Строка.Ссылка = Файл Или Строка.ДокументЭДО = Файл Тогда 
				СтрокаИдентификатор = Строка.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;	
		Иначе
			
			Для Каждого Подстрока Из Строка.ПолучитьЭлементы() Цикл
				Если Подстрока.Ссылка = Файл Тогда 
					СтрокаИдентификатор = Подстрока.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
		КонецЕсли;	
			
	КонецЦикла;
	
	Если СтрокаИдентификатор = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Элементы.Обзор.Видимость Тогда
		Элементы.Файлы.ТекущаяСтрока = СтрокаИдентификатор;
	Иначе	
		Элементы.ФайлыСоздание.ТекущаяСтрока = СтрокаИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает признак оригинал для нового созданного файла
//
//	Параметры
//		Файл - СправочникСсылка.Файлы - ссылка на новый файл
//
&НаКлиенте
Процедура ОтметитьПризнакОригиналУНовогоФайла(Файл)
	
	Если Не ВестиУчетСканКопийОригиналовДокументов Тогда 
		Возврат;
	КонецЕсли;	
	
	НайденнаяСтрока = Неопределено;
	Для Каждого Строка Из Файлы.ПолучитьЭлементы() Цикл
		
		Если Строка.Ссылка = Файл Тогда 
			НайденнаяСтрока = Строка;
			Прервать;
		КонецЕсли;	
		
		Для Каждого Подстрока Из Строка.ПолучитьЭлементы() Цикл
			Если Подстрока.Ссылка = Файл Тогда 
				НайденнаяСтрока = Подстрока;
				Прервать;
			КонецЕсли;	
		КонецЦикла;		
		
	КонецЦикла;	
	
	Если НайденнаяСтрока = Неопределено
	 Или НайденнаяСтрока.СозданИзШаблона
	 Или НайденнаяСтрока.Оригинал Тогда  
	 Возврат;
	КонецЕсли;	
	
	ТолькоДобавлениеОригинала = ТипЗнч(ДоступныеПоля) = Тип("Структура") 
		И ДоступныеПоля.Свойство("СоздатьФайлОригинал") 
		И Не ДоступныеПоля.Свойство("СоздатьФайлОбычный");
		
	Если СведенияОбОригиналеОбновлены(Файл, ТолькоДобавлениеОригинала, НайденнаяСтрока.Расширение) Тогда 
		НайденнаяСтрока.Оригинал = Истина;
	КонецЕсли;
	
	Если НайденнаяСтрока.Оригинал 
		И Не НайденнаяСтрока.ПометкаУдаления
		И ОбязателенФайлОригинала 
		И ЗначениеЗаполнено(Объект.РегистрационныйНомер) Тогда 
		УстановитьВидимостьДекорацииОтсутствуетОригинал(Ложь);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция СведенияОбОригиналеОбновлены(Файл, ТолькоДобавлениеОригинала, Расширение)
	
	Если Не (ТолькоДобавлениеОригинала 
		Или (ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(Расширение)
			И Не Делопроизводство.ЕстьСведенияОбОригиналеФайла(Файл))) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если ОригиналПолученУстановленоВручную = Неопределено Тогда
		ОригиналПолученУстановленоВручную = Ложь;
	КонецЕсли;
	
	Делопроизводство.СохранитьСведенияОбОригиналеФайла(Файл, Объект.Ссылка, ,ОригиналПолученУстановленоВручную);
	Делопроизводство.ОбновитьСведенияОПолученииОригинала(ЭтаФорма);
	ПолучитьОбзорДокумента();
	
	Возврат Истина;
	
КонецФункции

// Обновляет данные одного файла в списке файлов документа
//
// Параметры
//    Файл - СправочникСсылка.Файлы - ссылка на файл
//    ЗаполнитьПризнакОригинал - Булево - Истина, если требуется обновить признак оригинала
//
&НаКлиенте
Процедура ОбновитьСтрокуФайла(Файл, ЗаполнитьПризнакОригинал = Ложь)
	
	ДелопроизводствоКлиент.ОбновитьСтрокуФайла(Файлы, Файл, ЗаполнитьПризнакОригинал);
	
КонецПроцедуры	

&НаСервере
Процедура НастроитьФормуПоСостояниюДела()
	
	ДокументВАрхивеИлиУничтожен = Ложь;
	Элементы.ГруппаПереданВАрхивИлиУничтожен.Видимость = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Дело) Тогда
		Возврат;
	КонецЕсли;
	
	СостоянияМенеджер = Перечисления.СостоянияДелХраненияДокументов;
	СтруктураСостоянияДела = РегистрыСведений.СостоянияДелХраненияДокументов.СостояниеДела(Объект.Дело);
	Если СтруктураСостоянияДела.Состояние = СостоянияМенеджер.ПереданоВАрхив
			Или СтруктураСостоянияДела.Состояние = СостоянияМенеджер.Уничтожено Тогда
		
		ДокументВАрхивеИлиУничтожен = Истина;
		
		Элементы.ГруппаПереданВАрхивИлиУничтожен.Видимость = Истина;
		Элементы.ПереданВАрхивИлиУничтоженНадпись.Заголовок =
			СтрШаблон(НСтр("ru = 'Документ %1 %2'"), 
			?(СтруктураСостоянияДела.Состояние = СостоянияМенеджер.ПереданоВАрхив,
				НСтр("ru = 'передан в архив'"), НСтр("ru = 'уничтожен'")), 
			СтруктураСостоянияДела.ДатаСостояния);
		ТолькоПросмотр = Истина;
		Элементы.ГруппаКомПанели.Доступность = Ложь;
		Элементы.ГруппаОсновнаяКомПанель.Доступность = Ложь;
		Элементы.ГруппаКоманды.Доступность = Ложь;
		Элементы.ОригиналПолученТекст.Доступность = Ложь;
		
		Элементы.ДействияЗаполнить.Доступность = Ложь;
		Элементы.ДействияПерезапуститьОбработку.Доступность = Ложь;
		Элементы.ДействияОтправить.Доступность = Ложь;
		Элементы.ДействияОстановить.Доступность = Ложь;
		Элементы.ДобавитьДействие.Доступность = Ложь;
		Элементы.ДействияДобавить.Доступность = Ложь;
		Элементы.ДействияУдалить.Доступность = Ложь;
		Элементы.ДействияКонтекстноеМенюДобавить.Доступность = Ложь;
		Элементы.ДействияКонтекстноеМенюИзменить.Доступность = Ложь;
		Элементы.ДействияКонтекстноеМенюУдалить.Доступность = Ложь;
		Элементы.ДействияКонтекстноеМенюПерейтиКВыполнениюДействия.Доступность = Ложь;
		
		Элементы.ПереданВАрхивИлиУничтоженНадпись.Гиперссылка = ПолучитьФункциональнуюОпцию(
			"ИспользоватьНоменклатуруДел"); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОбзорДокумента()
	
	Если Не ИспользоватьОбзорДокументов Тогда 
		Возврат;
	КонецЕсли;
	
	Если ОценкаПроизводительностиВызовСервераПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		Если НеПоказыватьДанныеОбработки Тогда 
			КлючеваяОперация = "ФормированиеОбзораДокументаСокращенный";
		Иначе
			КлючеваяОперация = "ФормированиеОбзораДокумента";
		КонецЕсли;
		ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
		ПредставлениеHTML = ОбзорДокумента.ПолучитьОбзорДокумента(ЭтаФорма);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	Иначе
		ПредставлениеHTML = ОбзорДокумента.ПолучитьОбзорДокумента(ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоМобильныйКлиент Тогда
		МК_КлиентСервер.АдаптироватьHtmlПодЭкранМобильногоПриНеобходимости(ПредставлениеHTML);
	КонецЕсли;
	
	ПредставлениеHTMLДокумента = ПредставлениеHTML;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаДокумента(ПриСозданииНаСервере = Ложь)

	ТекстСообщения = "";
	Если Делопроизводство.ПолучитьЗапретСозданияДокументовНеПоШаблону(Объект.Ссылка, Объект.ВидДокумента, 
			ПараметрШаблонДокумента, ТекстСообщения, Ложь) Тогда
			
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект.ВидДокумента");
		
		Объект.ВидДокумента = Неопределено;
		Возврат;
		
	КонецЕсли;
	
	ВидДокументаИзменен = Истина;	
	
	ПредыдущийВидДокумента = ВидДокументаКэш.Ссылка;
	
	Делопроизводство.ЗаполнитьКэшВидаДокументаНаФорме(ЭтотОбъект, Объект.ВидДокумента);
	
	ВестиУчетПоКонтрагентам = ВидДокументаКэш.ВестиУчетПоКонтрагентам;
	ВестиУчетПоОрганизациям = ВидДокументаКэш.ВестиУчетПоОрганизациям;
	ВариантПодписания = ВидДокументаКэш.ВариантПодписания;
	ЯвляетсяЗаявкойНаОплату = ВидДокументаКэш.ЯвляетсяЗаявкойНаОплату;
	УстановитьВидимостьКомандыСозданияИсходящегоДокументаЭДО();
	
	Если ЗначениеЗаполнено(Основание) Тогда
		Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
			Если ВидДокументаКэш.ВестиУчетСторон Тогда
				Если  ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Основание)Тогда
					
					Адрес = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание.ОтправительАдресат, "Адрес");
					СтруктураРезультата = 
					ВстроеннаяПочтаСервер.ПолучитьКонтрагентаИКонтактноеЛицоПоСтрокеАдреса(Адрес);
					
					Если СтруктураРезультата <> Неопределено Тогда
						Объект.Стороны.Очистить();
						ДобавитьСторону(СтруктураРезультата.Контрагент, СтруктураРезультата.КонтактноеЛицо, 1);
						
					КонецЕсли;
					
				ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Основание)Тогда
					
					МассивАдресов = Новый Массив;
					
					Для Каждого СтрПолучатель Из Основание.ПолучателиПисьма Цикл 
						МассивАдресов.Добавить(СтрПолучатель.Адресат);
					КонецЦикла;
					Для Каждого СтрПолучатель Из Основание.ПолучателиКопий Цикл 
						МассивАдресов.Добавить(СтрПолучатель.Адресат);
					КонецЦикла;
					Для Каждого СтрПолучатель Из Основание.ПолучателиСкрытыхКопий Цикл 
						МассивАдресов.Добавить(СтрПолучатель.Адресат);
					КонецЦикла;
					
					Объект.Стороны.Очистить();
					Если ЗначениеЗаполнено(Объект.Организация) Тогда
						ДобавитьСторону(Объект.Организация);
					КонецЕсли;
					
					Для Каждого Адресат Из МассивАдресов Цикл 
						Адрес = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Адресат, "Адрес");
						СтруктураРезультата = 
						ВстроеннаяПочтаСервер.ПолучитьКонтрагентаИКонтактноеЛицоПоСтрокеАдреса(Адрес);
						
						Если СтруктураРезультата <> Неопределено Тогда
							Строка = Объект.Стороны.Добавить();
							ДобавитьСторону(СтруктураРезультата.Контрагент, СтруктураРезультата.КонтактноеЛицо, 1);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			ИначеЕсли ВидДокументаКэш.ВестиУчетПоКонтрагентам И Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
				Если  ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Основание)Тогда
					
					Адрес = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание.ОтправительАдресат, "Адрес");
					СтруктураРезультата = 
						ВстроеннаяПочтаСервер.ПолучитьКонтрагентаИКонтактноеЛицоПоСтрокеАдреса(Адрес);
						
					Если СтруктураРезультата <> Неопределено Тогда
						Объект.Контрагент = СтруктураРезультата.Контрагент;
						Объект.КонтактноеЛицо = СтруктураРезультата.КонтактноеЛицо;
		
						Объект.Контрагенты.Очистить();	
						Строка = Объект.Контрагенты.Добавить();
						Строка.Контрагент = СтруктураРезультата.Контрагент;
						Строка.КонтактноеЛицо = СтруктураРезультата.КонтактноеЛицо;
						
					КонецЕсли;
					
				ИначеЕсли  ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Основание)Тогда
					
					МассивАдресов = Новый Массив;
					
					Для Каждого СтрПолучатель Из Основание.ПолучателиПисьма Цикл 
						МассивАдресов.Добавить(СтрПолучатель.Адресат);
					КонецЦикла;
					Для Каждого СтрПолучатель Из Основание.ПолучателиКопий Цикл 
						МассивАдресов.Добавить(СтрПолучатель.Адресат);
					КонецЦикла;
					Для Каждого СтрПолучатель Из Основание.ПолучателиСкрытыхКопий Цикл 
						МассивАдресов.Добавить(СтрПолучатель.Адресат);
					КонецЦикла;
					
					Объект.Контрагенты.Очистить();
					Для Каждого Адресат Из МассивАдресов Цикл 
						Адрес = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Адресат, "Адрес");
						СтруктураРезультата = 
							ВстроеннаяПочтаСервер.ПолучитьКонтрагентаИКонтактноеЛицоПоСтрокеАдреса(Адрес);
							
						Если СтруктураРезультата <> Неопределено Тогда
							Строка = Объект.Контрагенты.Добавить();
							Строка.Контрагент = СтруктураРезультата.Контрагент;
							Строка.КонтактноеЛицо = СтруктураРезультата.КонтактноеЛицо;
						КонецЕсли;
					КонецЦикла;	
					
					Если Объект.Контрагенты.Количество() > 0 Тогда 
						Объект.Контрагент = Объект.Контрагенты[0].Контрагент;
						Объект.КонтактноеЛицо = Объект.Контрагенты[0].КонтактноеЛицо;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НесколькоКонтрагентов = (Объект.Контрагенты.Количество() > 1);
	УстановитьВидимостьКонтрагентов();
	
	УстановитьСрокИсполнения(Объект, Истина);
	
	// Срок действия
	СрокДействияПриИзмененииВидаДокумента();
	
	// Недействующие документы
	Если ЗначениеЗаполнено(Объект.ВидДокумента)
		И ВидДокументаКэш.УчитыватьНедействующиеДокументы
		И ВидДокументаКэш.ЯвляетсяДоговором Тогда
		Элементы.НеДействует.Заголовок = НСтр("ru = 'Расторгнут'");
	КонецЕсли;
	
	// Реквизиты по виду документа
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ВидДокумента", Объект.ВидДокумента));
	НеобходимоНапечататьШтрихкодПриСоздании = ВидДокументаКэш.НеобходимаПечатьШтрихкода;
	УчитыватьСрокДействия = ВидДокументаКэш.УчитыватьСрокДействия;
	
	// Статьи ДДС.
	ВестиУчетПоСтатьямДДС = ?(ЗначениеЗаполнено(Объект.ВидДокумента),
		ВидДокументаКэш.ВестиУчетПоСтатьямДДС, 
		Ложь);
	Элементы.ГруппаСуммаНДССтатьиДДС.Видимость = ВестиУчетПоСтатьямДДС;
	Если Не ВестиУчетПоСтатьямДДС Тогда
		СтатьиДвиженияДенежныхСредств.Очистить();
	КонецЕсли;
	СформироватьПредставлениеСтатейДДС();
	
	// Заявка на оплату.
	Если ЗначениеЗаполнено(Объект.ВидДокумента)
		И ВидДокументаКэш.ЯвляетсяЗаявкойНаОплату Тогда
		Элементы.ГруппаПолучатель.Видимость = Истина;
		Элементы.Организация.Заголовок = НСтр("ru = 'Плательщик'");
		Элементы.ГруппаОрганизация.ОтображатьЗаголовок = Ложь;
		Элементы.Сумма.АвтоОтметкаНезаполненного = Истина;
		Элементы.Сумма1.АвтоОтметкаНезаполненного = Истина;
		Элементы.Получатель.АвтоОтметкаНезаполненного = Истина;
	Иначе
		Элементы.ГруппаПолучатель.Видимость = Ложь;
		Элементы.Организация.Заголовок = РедакцииКонфигурацииКлиентСервер.Организация();
		Элементы.ГруппаОрганизация.ОтображатьЗаголовок = Истина;
		Элементы.Сумма.АвтоОтметкаНезаполненного = Неопределено;
		Элементы.Сумма1.АвтоОтметкаНезаполненного = Неопределено;
		Элементы.Получатель.АвтоОтметкаНезаполненного = Неопределено;
	КонецЕсли;
	
	// Заполнение валюты
	Если Не ЗначениеЗаполнено(Объект.Валюта)
		И ЗначениеЗаполнено(Объект.ВидДокумента) 
		И ПолучитьФункциональнуюОпцию("ИспользоватьСуммуВоВнутренних",
		Новый Структура("ВидДокумента", Объект.ВидДокумента)) Тогда
		Объект.Валюта = Делопроизводство.ПолучитьВалютуПоУмолчанию();
	КонецЕсли;
	
	// Доступность реквизитов регистрации
	Если Не ПриСозданииНаСервере Тогда
		УстановитьДоступностьРеквизитовРегистрации(Объект);
	КонецЕсли;
	
	// Обработчик механизма "Свойства"
	ОбновитьЭлементыДополнительныхРеквизитов();
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ПриИзмененииВидаОбъекта(ЭтотОбъект);
	
	// Комплекты документов
	РаботаСКомплектамиДокументовСервер.ДокументПриИзмененииВидаДокументаНаСервере(ЭтотОбъект);
	
	// Смена заголовка организации и установка видимости при взаимодействии ФО.
	ИспользоватьУчетПоОрганизациям = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям");
	Если ИспользоватьУчетПоОрганизациям
		И (Не ВидДокументаКэш.ВестиУчетСторон Или ЯвляетсяЗаявкойНаОплату) Тогда
		Если ПолучитьФункциональнуюОпцию("ВестиУчетПоОрганизациям",
			Новый Структура("ВидДокумента", Объект.ВидДокумента)) Тогда
			Элементы.Организация.Видимость = Истина;
			Элементы.Организация.АвтоОтметкаНезаполненного = Истина;
			Элементы.ГруппаОрганизация.Заголовок = РедакцииКонфигурацииКлиентСервер.ИмяОрганизацииБезУчетаСторон();
			Элементы.ГруппаОрганизация.Подсказка = РедакцииКонфигурацииКлиентСервер.ПодсказкаОрганизацииБезУчетаСторон();
		Иначе
			Элементы.Организация.Видимость = Ложь;
			Элементы.ГруппаОрганизация.Заголовок = РедакцииКонфигурацииКлиентСервер.ИмяОрганизацииУчетСторон();
			Элементы.ГруппаОрганизация.Подсказка = РедакцииКонфигурацииКлиентСервер.ПодсказкаОрганизацииУчетСторон();
			Объект.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		КонецЕсли;
		
	ИначеЕсли ВидДокументаКэш.ВестиУчетСторон Тогда
		Элементы.Организация.Видимость = Ложь;
		
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда 
			Объект.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		КонецЕсли;
	Иначе
		Элементы.Организация.Видимость = Ложь;
		Элементы.ГруппаОрганизация.Заголовок = РедакцииКонфигурацииКлиентСервер.ИмяОрганизацииУчетСторон();
		Элементы.ГруппаОрганизация.Подсказка = РедакцииКонфигурацииКлиентСервер.ПодсказкаОрганизацииУчетСторон();
		Объект.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	Элементы.ГруппаСтороны.Видимость = ВидДокументаКэш.ВестиУчетСторон 
		И Не ЯвляетсяЗаявкойНаОплату;
	Элементы.СтороныПодписан.Видимость = ВидДокументаКэш.ВестиУчетСторон
		И Не ЯвляетсяЗаявкойНаОплату
		И ВариантПодписания <> Перечисления.ВариантыПодписания.НеПодписывается;
	Элементы.СтороныДатаПодписи.Видимость = ВидДокументаКэш.ВестиУчетСторон
		И Не ЯвляетсяЗаявкойНаОплату
		И ВариантПодписания <> Перечисления.ВариантыПодписания.НеПодписывается;
	
	Если ВидДокументаКэш.ВестиУчетСторон Тогда
		ДобавитьСторону(Объект.Организация);	
	Иначе
		Объект.Стороны.Очистить();
	КонецЕсли;
	
	ВывестиДекорациюОтсутствуетОригинал(Объект);
	
	//Копирование дополнительных реквизитов основания 
	Если ЗначениеЗаполнено(Основание) 
		И ТипЗнч(Основание) = Тип("СправочникСсылка.ДокументыПредприятия")
		И ЭтаФорма.Свойства_ИспользоватьСвойства Тогда
		
		Для Каждого Реквизит Из Основание.ДополнительныеРеквизиты Цикл
			СтруктураПоиска = Новый Структура("Свойство", Реквизит.Свойство);
			МассивСтрок = ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураПоиска);
			Если МассивСтрок.Количество() > 0 Тогда
				НоваяСтрока = МассивСтрок[0];
				ЭтаФорма[НоваяСтрока.ИмяРеквизитаЗначение] = Реквизит.Значение;
			КонецЕсли;
		КонецЦикла;
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
	// Обновить инструкции
	ПолучитьИнструкции();
	
	ВключитьАвтоОтметкуИЗаполнитьПолеОтветственный();	
	
	Делопроизводство.ПрочитатьОбязательныеТипыСвязей(ЭтаФорма, ОбязательныеТипыСвязей, Объект.Ссылка, Объект.ВидДокумента);	
	
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ДокументыПредприятия") И Не ТипСвязиВыбран Тогда
		МассивТиповСвязей = ПолучитьТипыСвязей(Основание, Объект.ВидДокумента);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента)
		И ВидДокументаКэш.ВестиУчетТоваровИУслуг Тогда
		ВестиУчетТоваровИУслуг = Истина;
		Элементы.СтраницаТовары.Видимость = Истина;
		
		Если Объект.Товары.Количество() > 0 И Объект.Сумма <> Объект.Товары.Итог("Сумма") Тогда 
			Элементы.Сумма1.Видимость = Истина;
			Элементы.Сумма.Видимость = Ложь;
		Иначе 
			Элементы.Сумма1.Видимость = Ложь;
			Элементы.Сумма.Видимость = Истина;
		КонецЕсли;
	Иначе 
		Элементы.СтраницаТовары.Видимость = Ложь;
		ВестиУчетТоваровИУслуг = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		Элементы.Проект.АвтоОтметкаНезаполненного = ВидДокументаКэш.ОбязательноУказаниеПроекта;
	КонецЕсли;
	
	Элементы.ПодписьТекст.Видимость = ИспользоватьПодписание И Не ВидДокументаКэш.ВестиУчетСторон;
	
	РаботаСПодписямиДокументов.ЗаполнитьТаблицуСторон(ЭтотОбъект);
	УстановитьУсловноеОформление();
	
	Делопроизводство.ЗаполнитьСписокВыбораФормыДокумента(ЭтотОбъект);
	ФормаДокументаПриОткрытии = Объект.ФормаДокумента;
	
	Если Не ПриСозданииНаСервере Тогда
		Делопроизводство.ОбновитьСведенияОПолученииОригинала(ЭтотОбъект);
	КонецЕсли;
	Делопроизводство.ОбновитьВидимостьРеквизитовХранения(ЭтотОбъект, ВидДокументаКэш);
	
	ВидИТематикаТекст = СокрЛП(Объект.ВидДокумента);
	Если ВидДокументаКэш.ВестиУчетПоТематикам Тогда 
		Элементы.ВидИТематикаТекст.Подсказка = НСтр("ru = 'Вид и тематика документа'");
		
		Если ЗначениеЗаполнено(Объект.Тематика) Тогда 
			ВидИТематикаТекст = СтрШаблон("%1 - %2",
				СокрЛП(Объект.ВидДокумента), СокрЛП(Объект.Тематика));
		КонецЕсли;
	Иначе 
		Элементы.ВидИТематикаТекст.Подсказка = НСтр("ru = 'Вид документа'");
	КонецЕсли;
	
	Элементы.ГруппаОтменен.Видимость = Делопроизводство.ЭтотВидДокументаМожноОтменить(Объект.ВидДокумента);	
	ПоказатьДелаетНедействующими();
	
	// Методы ниже будут вызваны из ПриСозданииНаСервере
	Если Не ПриСозданииНаСервере Тогда
		
		// Не заполняем данные корреспонденции на форме этой процедурой при создании на сервере,
	 	// чтобы не дублировать вызов метода РаботаСКорреспонденцией.ПриИзмененииВидаДокуметаНаФорме
		РаботаСКорреспонденцией.ПриИзмененииВидаДокуметаНаФорме(ЭтотОбъект);
		
		УстановитьВидимостьИТекстНадписиРабочихДней();
		
	КонецЕсли;
	
	Нумерация.УстановитьВидимостьВременногоНомера(ЭтотОбъект);
	
	УстановитьВидимостьКомандыПечатиКонверта();
	
	РаботаСРекомендованнымиНастройками.УстановитьРекомендованныеНастройки(ИмяФормы, КлючНазначенияИспользования);
	ОтобразитьВажность(ЭтотОбъект);
	
	// Направление могло измениться с исходящего на входящий или наоборот, от этого зависит видимость элементов: 
	ВидимостьЭлементовМЭДОВФормеСервер();
		
	Элементы.Сканировать.Видимость = ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией;
	
	УстановитьВидимостьГруппыЭДОВПодменюСервис();
	
	УстановитьВидимостьКомандСервиса1СShare();
	
КонецПроцедуры

&НаСервере
Процедура ВключитьАвтоОтметкуИЗаполнитьПолеОтветственный()
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда 
		
		ОбязательноеУказаниеОтветственного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.
			ВидДокумента, "ОбязательноеУказаниеОтветственного");
			
		Если ОбязательноеУказаниеОтветственного Тогда	
			
			Элементы.Ответственный.АвтоОтметкаНезаполненного = Истина;
			
			// только для нового документа это делаем
			Если Не ЗначениеЗаполнено(Объект.Ответственный) И Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
				Объект.Ответственный = Сотрудники.ОсновнойСотрудник();
				Модифицированность = Истина;
			КонецЕсли;	
			
		Иначе
			Элементы.Ответственный.АвтоОтметкаНезаполненного = Ложь;
			Элементы.Ответственный.ОтметкаНезаполненного = Ложь;
		КонецЕсли;			
			
	КонецЕсли;		
	
КонецПроцедуры	

&НаСервере
Процедура ПриИзмененииДатыРегистрации()
	
	Нумератор = Нумерация.ПолучитьНумераторДокумента(Объект);
	Если Нумерация.ПроверитьСменуПериодаНумерации(Объект.ДатаРегистрации, НачальнаяДатаРегистрации, Нумератор) Тогда 
		СформироватьЧисловойНомерДокумента(Объект);
		СформироватьСтроковыйНомерДокумента(Объект);
	Иначе
		СформироватьСтроковыйНомерДокумента(Объект);
	КонецЕсли;
	НачальнаяДатаРегистрации = Объект.ДатаРегистрации;
	
КонецПроцедуры

&НаСервере
Процедура ЗапомнитьЗначенияРеквизитов()
	
	НачальныеЗначенияРеквизитов.Очистить();
	НачальныеЗначения = НачальныеЗначенияРеквизитов.Добавить();
	ЗаполнитьЗначенияСвойств(НачальныеЗначения, Объект);
	НачальныеЗначения.СрокДействияДокументИсточникИзменения = СрокДействияДокументИсточникИзменения;
	НачальныеЗначения.СрокДействияКомментарий = СрокДействияКомментарий;
	НачальныеЗначения.ЯвляетсяКомплектом = 
		ЗначениеЗаполнено(Объект.ВидДокумента)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ЯвляетсяКомплектомДокументов");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиКлиент(ПараметрыЗаписи)
	
	Если НовыйДокумент Тогда
		Если ЗначениеЗаполнено(ПараметрыОповещения)
			И ПараметрыОповещения.Свойство("ПараметрСобытия") Тогда
			ПараметрОповещения = Новый Структура;
			ПараметрОповещения.Вставить("Ссылка", Объект.Ссылка);
			ПараметрОповещения.Вставить("ПараметрСобытия", ПараметрыОповещения.ПараметрСобытия);
			Оповестить(ПараметрыОповещения.ИмяСобытия, ПараметрОповещения);
		КонецЕсли;
		
		Оповестить("ДокументИзмененДляСписков", КлючЗаписи, ЭтаФорма);
		
		Оповестить("ДокументСоздан", Объект.Ссылка, ЭтаФорма);     
		
		Если ЗначениеЗаполнено(Параметры.ПисьмоОснование) Тогда
			ОповеститьОбИзменении(Параметры.ПисьмоОснование);  
			Оповестить("ИзменилосьСодержаниеПисьма", Параметры.ПисьмоОснование);
		КонецЕсли;	
		
		НовыйДокумент = Ложь;
	Иначе	
		ОповеститьОбИзменении(КлючЗаписи);
		Оповестить("ДокументИзмененДляСписков", КлючЗаписи, ЭтаФорма);
	КонецЕсли;
	
	Оповестить("ДокументИзменен", Объект.Ссылка, ЭтаФорма);
	
	Если ЗначениеЗаполнено(ПерепискаПоПредмету) Тогда 
		Оповестить("ОбновитьПредметПереписки", ПерепискаПоПредмету, ЭтаФорма);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеПереписки) Тогда 
		ПараметрСобытия = Новый Структура;
		ПараметрСобытия.Вставить("Документ", ОснованиеПереписки);
		Оповестить("ИзмененыСвязиПодчиненныхДокументов", ПараметрСобытия);
		ОснованиеПереписки = Неопределено;
	КонецЕсли;	
	
	Если ФайлыДобавленные.Количество() > 0 Тогда
		Индекс = ФайлыДобавленные.Количество() - 1;
		Пока Индекс >= 0 Цикл 
			
			ФайлТаблицы = ФайлыДобавленные[Индекс];
			
			Если ЭтоАдресВременногоХранилища(ФайлТаблицы.ПолныйПуть) Тогда
				Индекс = Индекс - 1;
				Продолжить;
			КонецЕсли;
			
			РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(ФайлТаблицы.ПолныйПуть, Объект.Ссылка, ЭтаФорма, Истина);			
			
			ФайлыДобавленные.Удалить(Индекс);			
			Индекс = Индекс - 1;

		КонецЦикла;
	КонецЕсли;
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	УстановитьДоступностьКоманд(ТекущиеДанные);
	
	УстановитьДоступностьКомандСпискаПодписей(Элементы.ЭлектронныеПодписи.ТекущиеДанные);
	
	#Если НЕ ВебКлиент И Не МобильныйКлиент Тогда
	//Выполнить автозаполнение файлов, которые должны заполняться на клиенте
	Если ДанныеДляЗаполненияФайловНаКлиенте.Количество() > 0 Тогда
		Состояние(НСтр("ru = 'Выполняется автоматическое заполнение файлов. Пожалуйста, подождите...'"));
		
		МассивДанныхДляОбновленияФайлов = Новый Массив();
		
		Для Каждого ФайлДляАвтоЗаполнения Из ДанныеДляЗаполненияФайловНаКлиенте Цикл
			
			ЗаполненныйФайл = Новый Структура("ДвоичныеДанные, ТекущаяВерсия");
			ДвоичныеДанныеЗаполненногоФайла = Неопределено;
			Если ФайлДляАвтоЗаполнения.Автозаполнение Тогда
				ДвоичныеДанныеЗаполненногоФайла = АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьФайлMSWordПоДвоичнымДанным(
					ФайлДляАвтоЗаполнения.НастройкиЗаполнения[0].Значение.РасширениеШаблона,
					ФайлДляАвтоЗаполнения.НастройкиЗаполнения[0].Значение.НастройкиЗамены,
					ФайлДляАвтоЗаполнения.НастройкиЗаполнения[0].Значение.ДвоичныеДанные);
			КонецЕсли;
			
			// Штрихкодирование
			Если ФайлДляАвтоЗаполнения.Штрихкодирование
				И ФайлДляАвтоЗаполнения.НастройкиЗаполнения.Количество() > 1 Тогда
				ДанныеШК = ФайлДляАвтоЗаполнения.НастройкиЗаполнения[1].Значение;
				Если Не ДанныеШК.Свойство("СообщениеОбОшибке") 
					ИЛИ Не ЗначениеЗаполнено(ДанныеШК.СообщениеОбОшибке) Тогда
					
					Если ДвоичныеДанныеЗаполненногоФайла = Неопределено Тогда
						ДвоичныеДанныеЗаполненногоФайла = ДанныеШК.ДвоичныеДанныеФайла;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ДвоичныеДанныеЗаполненногоФайла) Тогда 
						РезультатВставкиШтрихкода = ШтрихкодированиеКлиентСервер.ВставитьШтрихкодВместоТэга(ФайлДляАвтоЗаполнения.Файл,
						"ВставитьИзображениеШтрихкода", 
						Истина, 
						ДанныеШК.ДвоичныеДанныеИзображения, 
						ДвоичныеДанныеЗаполненногоФайла,
						ДанныеШК.Расширение,
						ДанныеШК.ФайлРедактируется,
						ДанныеШК.ИзменениеФайловMSWordТолькоНаСервере,
						ДанныеШК.НастройкиШтрихкода.ВысотаШК,
						УникальныйИдентификатор,
						Ложь);		
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			Если ТипЗнч(РезультатВставкиШтрихкода) = Тип("ДвоичныеДанные") Тогда
				ДвоичныеДанныеЗаполненногоФайла = РезультатВставкиШтрихкода;
			КонецЕсли;
			
			Если ДвоичныеДанныеЗаполненногоФайла <> Неопределено Тогда
				ЗаполненныйФайл.ДвоичныеДанные = ДвоичныеДанныеЗаполненногоФайла;
				ЗаполненныйФайл.ТекущаяВерсия = ФайлДляАвтоЗаполнения.НастройкиЗаполнения[0].Значение.ТекущаяВерсия;
				МассивДанныхДляОбновленияФайлов.Добавить(ЗаполненныйФайл);
			КонецЕсли;
		КонецЦикла;
		Если МассивДанныхДляОбновленияФайлов.Количество() > 0 Тогда
			ВыполнитьПакетноеОбновлениеВерсийФайлов(МассивДанныхДляОбновленияФайлов);
		КонецЕсли;
		ДанныеДляЗаполненияФайловНаКлиенте.Очистить();
		Состояние();
	КонецЕсли;
	
	#КонецЕсли

	Если ЗначениеЗаполнено(ТекущийФайлВСпискеДобавленныхДляРедактирования) Тогда
		
		ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
		
		Если ТекущиеДанные.Ссылка = ТекущийФайлВСпискеДобавленныхДляРедактирования Тогда
			КомандыРаботыСФайламиКлиент.Редактировать(ТекущийФайлВСпискеДобавленныхДляРедактирования);
		КонецЕсли;
		
		УстановитьДоступностьКоманд(ТекущиеДанные);
		
		УстановитьТекущуюСтрокуФайла(ТекущийФайлВСпискеДобавленныхДляРедактирования);
		ТекущийФайлВСпискеДобавленныхДляРедактирования = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийФайлВСпискеДобавленныхДляОткрытия) Тогда  
		
		ПодключитьОбработчикОжидания("ОткрытьФайлПослеЗаписиДокумента", 1, Истина);
		
	КонецЕсли;
	
	//Регистрация 
	Если ПараметрыЗаписи.Свойство("Регистрация") Тогда
		
		ВыполняетсяРегистрация = Ложь;
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Документ зарегистрирован:'"), НавигационнаяСсылкаДокумента,
			ПредставлениеОбъекта, БиблиотекаКартинок.Информация32);
			
		Если Не БылПоказанДиалогИнтерактивногоЗапускаОбработки Тогда	
			ОтказПараметр = Ложь;	
			ОбработкиОбъектовКлиент.ВыполнитьИнтерактивныйЗапускОбработки(
				ЭтаФорма, Объект.Ссылка, 
				ВидИнтерактивногоСобытияАвтозапускаОбработки,
				УсловияЗапуска, 
				ПредопределенноеЗначение("Перечисление.ВидыИнтерактивныхДействий.ИнтерактивнаяРегистрацияДокумента"),
				БылПоказанДиалогИнтерактивногоЗапускаОбработки, ОтказПараметр);		                            
		КонецЕсли;	
		
	КонецЕсли;
	
	Если Объект.НеДействует
		И Объект.НеДействует <> НеДействуетИсходноеЗначение Тогда
		ДелопроизводствоКлиент.ПослеУстановкиНедействительности(ЭтаФорма, Объект.Ссылка);
	КонецЕсли;
	НеДействуетИсходноеЗначение = Объект.НеДействует;
	
	КонтрагентыДляОтраженияВЖурналеПередачи.Очистить();
	
	Для Каждого Строка Из ОбязательныеСвязи Цикл
		Если Строка.ТипСвязи = ПредопределенноеЗначение("Справочник.ТипыСвязей.ОтветПереадресовавшему") 
			Или Строка.ТипСвязи = ПредопределенноеЗначение("Справочник.ТипыСвязей.ПереадресованДокументом")
			И Не Строка.НужноЗаписать Тогда
			
			ПараметрОповещения = Новый Структура;
			ПараметрОповещения.Вставить("Документ", Строка.СвязанныйОбъект);
			ПараметрОповещения.Вставить("СвязанныйОбъект", Объект.Ссылка);
			ПараметрОповещения.Вставить("ТипСвязи", Строка.ТипСвязи);
			
			Оповестить("УстановленаСвязь", ПараметрОповещения, ЭтаФорма);
			
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Изменение:'"),
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		Закрыть();
	КонецЕсли;
	
	Если НадоПереименоватьФайлыПоШаблону Тогда
		НадоПереименоватьФайлыПоШаблону = Ложь;
		ОбщегоНазначенияДокументооборотКлиент.ЗапуститьФоновоеПереименованиеФайлов(
			Объект.Ссылка,
			УникальныйИдентификатор);
	КонецЕсли;
	
	Если ЗагруженИзПочты Тогда
		ПараметрыОповещения = Новый Структура("Ссылка, Идентификатор", 
			Объект.Ссылка, ИдентификаторПисьма);
		Оповестить("Документ_ЗаписьИзПочты", ПараметрыОповещения);
	КонецЕсли;
	
	Если Не ПараметрыЗаписи.Свойство("Закрыть") Тогда	
		ДействияКлиент.РазвернутьДействия(Элементы.Действия, Действия);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьТаблицуФайловДляАвтозаполнения(Источник, Приемник, ФайлТаблицы,
	ИспользоватьАвтозаполнениеФайлов, ИзменениеФайловMSWordНаСервере, ИспользоватьШтрихкоды)
	
	// Автозаполнение файлов
	Если Источник <> Неопределено И ФайлТаблицы.ДобавленИзШаблона Тогда
		Попытка
			НастройкиАвтозаполнения = ПолучитьНастройкиАвтозаполненийШаблона(Приемник, 
				Приемник.ШаблонОснованиеДляСоздания, Приемник.ВладелецФайла);
			
			Если ИспользоватьАвтозаполнениеФайлов 
				И Не ИзменениеФайловMSWordНаСервере
				И Приемник.ТекущаяВерсияРасширение = "doc"
				И ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Обычная
				И Не ЭтоВебКлиент Тогда
				НоваяСтрока = ДанныеДляЗаполненияФайловНаКлиенте.Добавить();
				НоваяСтрока.Файл = Приемник;
				НоваяСтрока.Автозаполнение = Истина;
				НоваяСтрока.Штрихкодирование = Ложь;
				НоваяСтрока.НастройкиЗаполнения.Добавить(НастройкиАвтозаполнения);
			КонецЕсли;
			
			Если ИспользоватьШтрихкоды Тогда
				ДанныеОШтрихкоде = ШтрихкодированиеСервер.ПолучитьДанныеДляВставкиШтрихкодаВОбъект(Приемник);
				
				Если (ИзменениеФайловMSWordНаСервере И Приемник.ТекущаяВерсияРасширение = "doc")
					ИЛИ  Приемник.ТекущаяВерсияРасширение <> "doc" Тогда
					Если ДанныеОШтрихкоде <> Неопределено
						И ДанныеОШтрихкоде.Свойство("ДвоичныеДанныеФайла") Тогда
						Попытка 
							ШтрихкодированиеКлиентСервер.ВставитьШтрихкодВместоТэга(Приемник.Ссылка,
								"ВставитьИзображениеШтрихкода", 
								Ложь, 
								ДанныеОШтрихкоде.ДвоичныеДанныеИзображения, 
								ДанныеОШтрихкоде.ДвоичныеДанныеФайла,
								ДанныеОШтрихкоде.Расширение,
								ДанныеОШтрихкоде.ФайлРедактируется,
								ДанныеОШтрихкоде.ИзменениеФайловMSWordТолькоНаСервере,
								ДанныеОШтрихкоде.НастройкиШтрихкода.ВысотаШК);
						Исключение
						КонецПопытки;		
					КонецЕсли;
				КонецЕсли;
				
				Если Не ИзменениеФайловMSWordНаСервере
					И Приемник.ТекущаяВерсияРасширение = "doc"
					И ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Обычная
					И Не ЭтоВебКлиент Тогда
					ПараметрыОтбора = Новый Структура("Файл", Приемник);
					НайденныеСтроки = ДанныеДляЗаполненияФайловНаКлиенте.НайтиСтроки(ПараметрыОтбора);
					
					Если НайденныеСтроки.Количество() > 0 Тогда
						НайденныеСтроки[0].Штрихкодирование = Истина;
						НайденныеСтроки[0].НастройкиЗаполнения.Добавить(ДанныеОШтрихкоде);
					Иначе
						НоваяСтрока = ДанныеДляЗаполненияФайловНаКлиенте.Добавить();
						НоваяСтрока.Файл = Приемник;
						НоваяСтрока.Автозаполнение = Ложь;
						НоваяСтрока.Штрихкодирование = Истина;
						НоваяСтрока.НастройкиЗаполнения.Добавить(НастройкиАвтозаполнения);
						НоваяСтрока.НастройкиЗаполнения.Добавить(ДанныеОШтрихкоде);	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			// печать организации				
			Если Приемник.ТекущаяВерсияРасширение = "docx"
				Или Приемник.ТекущаяВерсияРасширение = "odt" Тогда
					
					КартинкиПечатейОрганизации = Справочники.Организации.КартинкиПечатейОрганизации(
						Объект.Ссылка);
					
					ПечатиОрганизации = Новый Соответствие;	
					ПечатиОрганизации.Вставить(
						ВставкаКартинкиОрганизацииСервер.ТегЛоготипОрганизации(),
						КартинкиПечатейОрганизации);
						
					// сюда же скрипты будут вставлены со своими тегами.
					ДополнитьПечатиОрганизацииИзСкриптов(ПечатиОрганизации, 
						Объект.Ссылка, Приемник.Ссылка);	
						
					Если КартинкиПечатейОрганизации.Количество() <> 0 Тогда	
						ДвоичныеДанныеФайла 
							= АвтозаполнениеШаблоновФайловВызовСервера.ПолучитьДвоичныеДанныеФайла(
							Приемник.Ссылка);	
						
						ВставкаКартинкиОрганизацииСервер.ВставитьПечатиОрганизацииВместоТэга(
							Приемник.Ссылка,
							ПечатиОрганизации, 
							ДвоичныеДанныеФайла,
							Приемник.ТекущаяВерсияРасширение,
							УникальныйИдентификатор);
					КонецЕсли;	
						
			КонецЕсли;
		
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Данные.Заполнение'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				
			Сообщение = Новый СообщениеПользователю;
			Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
			Сообщение.Текст = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			Сообщение.Поле = "Файлы";
			Сообщение.Сообщить();
			
		КонецПопытки;
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ПрочитатьГруппыНаСервере()
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ПриЧтенииНаСервере(ЭтаФорма);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьСрокИсполнения(ТекущийОбъект, ПриИзмененииВидаДокумента = Ложь)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСрокИсполненияВоВнутренних", 
									  Новый Структура("ВидДокумента", ТекущийОбъект.ВидДокумента)) Тогда
			
		РеквизитыПредыдущегоСрока = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПредыдущийВидДокумента,
			"СрокИсполнения, СрокИсполненияУказанВРабочихДнях");							  
		Если ТипЗнч(ВидДокументаКэш) = Тип("Структура") Тогда
			РеквизитыСрока = ВидДокументаКэш;
		Иначе
			РеквизитыСрока = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийОбъект.ВидДокумента,
				"СрокИсполнения, СрокИсполненияУказанВРабочихДнях");
		КонецЕсли;
		
		ДатаНачалаСрока = ТекущийОбъект.ДатаРегистрации;
		Если Не ЗначениеЗаполнено(ДатаНачалаСрока) Тогда
			ДатаНачалаСрока = ТекущийОбъект.ДатаСоздания;
		КонецЕсли;
		
		ЗаменитьСрок = Ложь;
		Если ЗначениеЗаполнено(ПредыдущийВидДокумента)
			И ПриИзмененииВидаДокумента
			И ТекущийОбъект.СрокИсполнения = РассчитатьСрокИсполнения(ДатаНачалаСрока, 
				РеквизитыПредыдущегоСрока) Тогда
				
			ЗаменитьСрок = Истина;
			
		ИначеЕсли Не ЗначениеЗаполнено(ТекущийОбъект.СрокИсполнения) Тогда
			
			ЗаменитьСрок = Истина;
			
		КонецЕсли;
		
		
		Если ЗаменитьСрок И ЗначениеЗаполнено(РеквизитыСрока.СрокИсполнения) Тогда
			
			ТекущийОбъект.СрокИсполнения = РассчитатьСрокИсполнения(ДатаНачалаСрока, РеквизитыСрока);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РассчитатьСрокИсполнения(ДатаНачалаСрока, РеквизитыСрока)
	
	Результат = Дата("00000000");
	
	Если РеквизитыСрока.СрокИсполненияУказанВРабочихДнях Тогда
		
		Результат = КалендарныеГрафикиДокументооборот.ПолучитьДатуПоОсновномуКалендарю(
			ДатаНачалаСрока, РеквизитыСрока.СрокИсполнения);
		
	Иначе
		
		Результат = ДатаНачалаСрока + 24 * 3600 * РеквизитыСрока.СрокИсполнения;
		
	КонецЕсли;
	
	Возврат НачалоДня(Результат);

КонецФункции


&НаСервере
Процедура ОбновитьПолныйПуть()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПапкаРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "Папка");
	
	Если ЗначениеЗаполнено(ПапкаРодитель) Тогда
		
		ПолныйПуть = "";
		
		Пока Не ПапкаРодитель.Пустая() Цикл
			
			Если Не ПустаяСтрока(ПолныйПуть) Тогда
				ПолныйПуть = "\" + ПолныйПуть;
			КонецЕсли;	
			
			ПолныйПуть = Строка(ПапкаРодитель) + ПолныйПуть;
			
			ПапкаРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПапкаРодитель, "Родитель");	
			Если Не ЗначениеЗаполнено(ПапкаРодитель) Тогда
				Прервать;
			КонецЕсли;	
			
		КонецЦикла;
		
		Элементы.Папка.Подсказка = ПолныйПуть;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура СортироватьСписокИУстановитьКоличествоКатегорийВЗаголовок()
	
	СписокКатегорийДанных.Сортировать("ПолноеНаименование");
	Элементы.Категории.Заголовок = РаботаСКатегориямиДанныхКлиентСервер.ПолучитьЗаголовокВкладкиКатегории(СписокКатегорийДанных);	
			
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОКатегориях(Параметр)
	
	Для Каждого ВыбраннаяКатегория Из СписокКатегорийДанных Цикл
		ВыбраннаяКатегория.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(ВыбраннаяКатегория.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСостояние(Документ, МассивСостояний) 
	
	Для Каждого СтруктураСостояния Из МассивСостояний Цикл
		
		Если СтруктураСостояния.Состояние = СтруктураСостояния.НачальноеСостояние Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураСостояния.Состояние) Тогда 
			Делопроизводство.ЗаписатьСостояниеДокумента(Документ, СтруктураСостояния.Период, СтруктураСостояния.Состояние, СтруктураСостояния.Установил);
		Иначе
			Делопроизводство.ОчиститьСостояниеДокумента(Документ, СтруктураСостояния.НачальноеСостояние);
		КонецЕсли;
		
	КонецЦикла;	
	СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(
		Документ);
	
	// установка доступности
	Делопроизводство.УстановитьДоступностьПоСостоянию(ЭтаФорма, Документ, ДоступныеПоля, НедоступныеПоля);
	УстановитьДоступностьПоЭП();
	УстановитьДоступностьПоЗапрету();
	
	Если НаименованиеСозданоПоШаблону Тогда 
		Элементы.Заголовок.ТолькоПросмотр = Истина;
		Элементы.Заголовок.Подсказка = НСтр("ru = 'Заголовок документа сформирован автоматически по шаблону, редактирование запрещено.'");
		Элементы.Заголовок.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	КонецЕсли;
	
	ПолучитьИнструкции();
	ПолучитьОбзорДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьКонтрагентаИзРеквизитовВСписок(УстановитьОсновноеКонтактноеЛицо = Ложь)
	
	Объект.Контрагенты.Очистить();
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		Возврат;
	КонецЕсли;
	
	Строка = Объект.Контрагенты.Добавить();
	Строка.Контрагент = Объект.Контрагент;
	Если Не ЗначениеЗаполнено(Объект.КонтактноеЛицо) И УстановитьОсновноеКонтактноеЛицо Тогда
		Объект.КонтактноеЛицо = РаботаСКонтрагентамиВызовСервера.ОсновноеКонтактноеЛицоКонтрагента(Строка.Контрагент);
	КонецЕсли;
	Строка.КонтактноеЛицо = Объект.КонтактноеЛицо;
	Строка.ПодписалОтКонтрагента = Объект.ПодписалОтКонтрагента;
	Строка.ЗапретУдаления = Элементы.Контрагент.ТолькоПросмотр;
	
	РаботаСКорреспонденциейКлиент.СкопироватьКонтрагентаИзРеквизитовВСписок(ЭтотОбъект, Строка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаписьКонтроля(ПредметКонтроля = Неопределено)
	
	Если ЗначениеЗаполнено(ПредметКонтроля) 
		И ДействияКлиентСервер.ЭтоДействие(ПредметКонтроля) Тогда
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредметКонтроля, "Предмет") = Объект.Ссылка Тогда
			ПрочитатьДействия();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВывестиКартинкуКонтроля();
	РабочаяГруппаОбновитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиКартинкуКонтроля()
	
	ОбзорДокумента.ВывестиКартинкуКонтроля(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьКонтрагентаИОрганизациюВРеквизиты()
	
	// копирование контрагента
	СторонаКонтрагент = Неопределено;
	ИндексСторон = Объект.Стороны.Количество()-1;
	
	Пока ИндексСторон > -1 Цикл
		
		Если ЗначениеЗаполнено(Объект.Стороны[ИндексСторон].Сторона)
			И РаботаСПодписямиДокументовКлиентСервер.ЭтоКонтрагент(Объект.Стороны[ИндексСторон].Сторона) Тогда
				СторонаКонтрагент = Объект.Стороны[ИндексСторон].Сторона;	
		КонецЕсли;
			
		ИндексСторон = ИндексСторон - 1;
	КонецЦикла;
			
	Если СторонаКонтрагент <> Неопределено Тогда
		Объект.Контрагент = СторонаКонтрагент;
	КонецЕсли;
	
	// копирование организации	
	Если Объект.Стороны.Количество() > 0
		И РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(Объект.Стороны[0].Сторона) Тогда
		Если Объект.Организация <> Объект.Стороны[0].Сторона Тогда
			Объект.Организация = Объект.Стороны[0].Сторона;
			ОрганизацияПриИзмененииНаСервере();
			УстановитьУсловноеОформление();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСторон()
	
	РаботаСПодписямиДокументов.ЗаполнитьТаблицуСторон(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Работа с рабочей группой

&НаСервере
Процедура ПерезаполнитьРабочуюГруппуДокументаСервер()
	
	РаботаСРабочимиГруппами.ПерезаполнитьРабочуюГруппуНаФорме(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура РабочаяГруппаОбновитьНаСервере()
	
	РаботаСРабочимиГруппами.ПриЧтенииНаСервере(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Работа с шаблонами

&НаСервере
Процедура ЗаполнитьШаблоныДляАвтоЗапуска()
	
	НастройкиАвтозапускаОбработки  
		= ДействияСервер.НастройкиАвтозапускаОбработки(Объект.Ссылка);
		
	Если ЗначениеЗаполнено(НастройкиАвтозапускаОбработки) Тогда	
		ВидИнтерактивногоСобытияАвтозапускаОбработки = НастройкиАвтозапускаОбработки.ВидИнтерактивногоСобытия;	
		УсловияЗапуска.Загрузить(НастройкиАвтозапускаОбработки.УсловияЗапуска);
	КонецЕсли; 
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоШаблонуВыполнить(ШаблонДокумента)
	
	ШаблоныДокументов.ЗаполнитьФайлыДокументаПоШаблону(
		ШаблонДокумента, ФайлыДобавленные, Истина, Объект);
	КоличествоФайлов = ФайлыДобавленные.Количество();
	Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
	Элементы.НаименованиеФайла.Заголовок = ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(КоличествоФайлов);
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ШаблоныДокументов.ЗаполнитьРеквизитыДокументаПоШаблону(ШаблонДокумента, ДокументОбъект);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Элементы.Категории.Заголовок = 
		РаботаСКатегориямиДанныхКлиентСервер.ПолучитьЗаголовокВкладкиКатегории(СписокКатегорийДанных);
	
	ШаблоныДокументов.ЗаполнитьСтатьиДДСДокументаПоШаблону(ШаблонДокумента,
		СтатьиДвиженияДенежныхСредств, Объект.Сумма, СуммаНДС);

	НесколькоКонтрагентов = (Объект.Контрагенты.Количество() > 1);
	УстановитьВидимостьКонтрагентов();

	ПриИзмененииВидаДокумента();
	
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтаФорма);
	
	Модифицированность = Истина;
	Элементы.РедактироватьДобавленныйФайл.Видимость = Истина;
	Элементы.РедактироватьДобавленныйФайлКонтекст.Видимость = Истина;
	
	РаботаСРабочимиГруппами.ДобавитьУчастниковВРабочуюГруппуДокументаИзШаблона(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПечатиОрганизацииИзСкриптов(ПечатиОрганизации, 
	ДокументВладелецФайла, ФайлСсылка)
				
	НастройкиАвтозаполнения =
		АвтозаполнениеШаблоновФайловВызовСервера.ПолучитьНастройкиАвтозаполненияШаблоновФайлов(
			ФайлСсылка,
			ДокументВладелецФайла,
			,
			Истина); // ИспользоватьСкриптыСДвоичнымиДанными

	Для Каждого Стр Из НастройкиАвтозаполнения.МассивЗамен Цикл
		Если ТипЗнч(Стр.ЗначениеЗамены) = Тип("ДвоичныеДанные") Тогда
			ИмяТега = Стр.ТермДляЗамены;
			Если  Не ЗначениеЗаполнено(ИмяТега) Тогда
				ИмяТега = Стр.ЗаменяемаяСтрока;
			КонецЕсли;	
			МассивДвДанные = Новый Массив;
			МассивДвДанные.Добавить(Стр.ЗначениеЗамены);
			ПечатиОрганизации[ИмяТега] = МассивДвДанные; 
		КонецЕсли;	
	КонецЦикла;	
							
КонецПроцедуры							
							
&НаСервере
Функция ПолучитьНастройкиАвтозаполненийШаблона(Файл, Шаблон, Документ)  
	
	СтруктураВозврата = Новый Структура("ВыполнятьНаСервере, РасширениеШаблона, НастройкиЗамены, ДанныеФайла, ДвоичныеДанные, ТекущаяВерсия");
	НаСервере = Константы.ИзменениеФайловMSWordТолькоНаСервере.Получить();
	ПеремДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(Файл.Ссылка,,, Истина);
	
	СтруктураВозврата.ВыполнятьНаСервере = НаСервере;
	СтруктураВозврата.РасширениеШаблона = НРег(Файл.ТекущаяВерсияРасширение);
	
	Если Шаблон = Неопределено Тогда
		Шаблон = Файл;
	КонецЕсли;
		
	СтруктураВозврата.НастройкиЗамены = АвтозаполнениеШаблоновФайловВызовСервера.ПолучитьМассивАвтозаполненийШаблона(Файл, Шаблон, Документ);
	СтруктураВозврата.ДанныеФайла = ПеремДанныеФайла;
	
	ТекущаяВерсия = Файл.ТекущаяВерсия.ПолучитьОбъект();
	ИмяСРасширениемФайла = ТекущаяВерсия.ПолноеНаименование + "." + ТекущаяВерсия.Расширение;
	ДвоичныеДанныеФайла = АвтозаполнениеШаблоновФайловВызовСервера.ПолучитьДвоичныеДанныеФайла(Файл);
	
	СтруктураВозврата.ДвоичныеДанные = ДвоичныеДанныеФайла;
	СтруктураВозврата.ТекущаяВерсия = Файл.ТекущаяВерсия;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Функция ПерезаполнитьФайлыИзШаблонаНаСервере()
	
	ФайлыКУдалению = Новый Массив;
	ФайлыКДобавлению = Новый Массив;
	ИгнорируемыеФайлыШаблона = Новый Массив;
	КоличествоЗанятыхФайлов = Неопределено;
	ПодписанЭП = Ложь;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ФайлыКУдалению", ФайлыКУдалению);
	СтруктураВозврата.Вставить("ФайлыКДобавлению", ФайлыКДобавлению);
	СтруктураВозврата.Вставить("ПодписанЭП", ПодписанЭП);
	СтруктураВозврата.Вставить("КоличествоЗанятыхФайлов", КоличествоЗанятыхФайлов);
	
	Для Каждого Строка Из Файлы.ПолучитьЭлементы() Цикл
		
		Если Не Строка.ЭтоРольФайла И Не Строка.ЭтоДокумент И Не Строка.ЭтоДокументЭДО Тогда
			Если Строка.СозданИзШаблона Тогда
				Если Не Строка.ПодписанЭП И Не Строка.ПометкаУдаления
					И Не РаботаСАлгоритмамиПроверки.АлгоритмПоПредметуВыполняется(Объект.Ссылка, Строка.Условие) Тогда
					
					ФайлыКУдалению.Добавить(Строка.Ссылка);
				ИначеЕсли Не Строка.ПометкаУдаления Тогда
					ИгнорируемыеФайлыШаблона.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
						Строка.Ссылка, "ШаблонОснованиеДляСоздания"));
				КонецЕсли;
			КонецЕсли;
		Иначе
			Для Каждого Подстрока Из Строка.ПолучитьЭлементы() Цикл
				Если Подстрока.СозданИзШаблона Тогда
					Если Не Подстрока.ПодписанЭП И Не Подстрока.ПометкаУдаления
						И Не РаботаСАлгоритмамиПроверки.АлгоритмПоПредметуВыполняется(Объект.Ссылка, Подстрока.Условие)Тогда
						
						ФайлыКУдалению.Добавить(Подстрока.Ссылка);
					ИначеЕсли Не Подстрока.ПометкаУдаления Тогда
						ИгнорируемыеФайлыШаблона.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
							Строка.Ссылка, "ШаблонОснованиеДляСоздания"));
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ПометитьФайлыНаУдаление(ФайлыКУдалению, Истина, КоличествоЗанятыхФайлов);
	
	ФайлыКДобавлению = ШаблоныДокументов.ПолучитьФайлыСогласноУловиямДобавления(Объект.Ссылка, ИгнорируемыеФайлыШаблона);
	
	Для Каждого Файл Из ФайлыКДобавлению Цикл
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(Файл.Ссылка);
		Если ТипЗнч(ДанныеФайла) <> Тип("Структура")
			Или Не ДанныеФайла.Свойство("Ссылка")
			Или ДанныеФайла.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
		ШаблонОснованиеДляСоздания = Файл.Ссылка;
		РолиФайла = РегистрыСведений.РолиФайловДокументов.ПолучитьРолиФайла(Файл.Ссылка);
		Если РолиФайла.Количество() <> 0 Тогда
			РольФайла = РолиФайла[0];
		КонецЕсли;
		
		СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
		Источник = ДанныеФайла.Ссылка;
		ХранитьВерсииНовыйФайл = Источник.ХранитьВерсии;
		Расширение = Источник.ТекущаяВерсия.Расширение;
		ХранитьВерсииНовыйФайл = Истина;
		
		ТекстХранилище = РегистрыСведений.ТекстыВерсийФайлов.ПолучитьТекстХранилище(Источник.ТекущаяВерсия);
			
		Если Источник.ТекущаяВерсия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			ХранилищеФайла = РаботаСФайламиВызовСервера.ПолучитьХранилищеФайлаИзИнформационнойБазы(
				Источник.ТекущаяВерсия);
		КонецЕсли;
		
		СведенияОФайле.Комментарий = Источник.Описание;
		СведенияОФайле.ИмяБезРасширения = Наименование;
		СсылкаНаВерсиюИсточник = Источник.ТекущаяВерсия;
		Размер = Источник.ТекущаяВерсия.Размер;
		
		ДатаМодификацииФайла = Источник.ТекущаяВерсия.ДатаМодификацииФайла;
		ДатаМодификацииУниверсальная = Источник.ТекущаяВерсия.ДатаМодификацииУниверсальная;
		
		СведенияОФайле.ХранитьВерсии = ХранитьВерсииНовыйФайл;
		
		НачатьТранзакцию();
		Попытка
			
			Приемник = РаботаСФайламиВызовСервера.СоздатьФайл(Объект.Ссылка, СведенияОФайле);
			
			РегистрыСведений.ФайлыСозданныеПоШаблону.ЗанестиИнформациюОФайле(Приемник, Истина);
			
			СведенияОФайле.Размер = Размер;
			СведенияОФайле.РасширениеБезТочки = Расширение;
			СведенияОФайле.АдресВременногоХранилищаФайла = ХранилищеФайла;
			СведенияОФайле.АдресВременногоХранилищаТекста = ТекстХранилище;
			СведенияОФайле.СсылкаНаВерсиюИсточник = СсылкаНаВерсиюИсточник;
			СведенияОФайле.ВремяИзменения = ДатаМодификацииФайла;
			СведенияОФайле.ВремяИзмененияУниверсальное = ДатаМодификацииУниверсальная;
			
			Версия = РаботаСФайламиВызовСервера.СоздатьВерсию(Приемник, СведенияОФайле);
			РаботаСФайламиВызовСервера.ОбновитьВерсиюВФайле(Приемник, Версия, ТекстХранилище);
			РаботаСФайламиВызовСервера.ЗаписатьОригинальноеИмяФайла(Приемник, Наименование);
			РегистрыСведений.РолиФайловДокументов.ЗаписатьРольФайла(Приемник, РольФайла);
			
			ИОМВладелеца = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
				Тип("СправочникСсылка.ДокументыПредприятия"));
			ПараметрыРаспознавания = РаботаСФайламиВызовСервера.ПодготовитьПараметрыРаспознавания(ИОМВладелеца);
			Если ПараметрыРаспознавания <> Неопределено
				И ПараметрыРаспознавания.Свойство("РаспознатьПослеДобавления")
				И ПараметрыРаспознавания.РаспознатьПослеДобавления Тогда
				
				РаспознатьНемедленно = Ложь;
				ОписаниеОшибки = "";
				РаспознанныйТекст = "";
				РаботаСФайламиВызовСервера.РаспознатьФайл(Приемник, ПараметрыРаспознавания, ОписаниеОшибки,
					РаспознанныйТекст, УникальныйИдентификатор,  РаспознатьНемедленно);
				
			КонецЕсли;
			
			Если КопироватьПодписиЭП Тогда
				
				ПриемникТекущаяВерсия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Приемник, "ТекущаяВерсия");
				ЧислоПодписей = РаботаСЭП.СкопироватьВсеПодписи(Источник.ТекущаяВерсия, ПриемникТекущаяВерсия);
				
				Если ЧислоПодписей <> 0 Тогда
					
					Если Не ПодписанЭП Тогда
						ПодписанЭП = Истина;
					КонецЕсли;
					
					ФайлОбъект = Приемник.ПолучитьОбъект();
					ФайлОбъект.ПодписанЭП = Истина;
					ФайлОбъект.Записать();
					
					ВерсияОбъект = ПриемникТекущаяВерсия.ПолучитьОбъект();
					ВерсияОбъект.ПодписанЭП = Истина;
					ВерсияОбъект.Записать();
				КонецЕсли;
			КонецЕсли;
			
			ФайлОбъект = Приемник.ПолучитьОбъект();
			ФайлОбъект.ШаблонОснованиеДляСоздания = ШаблонОснованиеДляСоздания;
			Если ФайлОбъект.ПодписанЭП Тогда
				ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
			КонецЕсли;
			ФайлОбъект.Записать();
			
			Если ЗначениеЗаполнено(ДанныеФайла) И ДанныеФайла.Зашифрован Тогда
				
				ФайлОбъект = Приемник.ПолучитьОбъект();
				ФайлОбъект.Зашифрован = Истина;
				
				ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
				ФайлОбъект.Записать();
				
				ВерсияОбъект = Приемник.ТекущаяВерсия.ПолучитьОбъект();
				ВерсияОбъект.Зашифрован = Истина;
				ВерсияОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
				ВерсияОбъект.Записать();
				
				РегистрыСведений.СертификатыШифрования.СкопироватьСертификатыШифрования(
					Источник.Ссылка, ФайлОбъект.Ссылка);
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
	ЗаполнитьСписокФайлов();
	
	Возврат СтруктураВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//Управление доступностью полей

&НаКлиенте
Процедура УстановитьДоступностьКоманды(Команда, Доступность)
	
	Если ДоступныеПоля = "" Тогда
		Команда.Доступность = Доступность;
	ИначеЕсли ТипЗнч(ДоступныеПоля) = Тип("Структура") Тогда
		Если ДоступныеПоля.Свойство(Команда.Имя) Или Не НедоступныеПоля.Свойство(Команда.Имя) Тогда
			Команда.Доступность = Доступность;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКоманды(Команда, Видимость)
	Команда.Видимость = Видимость;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманд(ТекущиеДанные)
	
	Если Элементы.Обзор.Видимость Тогда
		Префикс = "";
	Иначе
		Префикс = "Создание";
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено
		Или ТипЗнч(Элементы["Файлы"+Префикс].ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		
		УстановитьДоступностьКоманды(Элементы["СоздатьФайл"+Префикс], Не Объект.ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСоздать"+Префикс], Не Объект.ПодписанЭП);
		
		УстановитьДоступностьКоманды(Элементы["ВставитьКартинкуИзБуфера"+Префикс], Не Объект.ПодписанЭП);
		
		УстановитьДоступностьКоманды(Элементы["ОткрытьФайл"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОткрытьФайл"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Напечатать"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыНапечатать"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Редактировать"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыРедактировать"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ЗакончитьРедактирование"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗакончитьРедактирование"+Префикс], Ложь);

		УстановитьДоступностьКоманды(Элементы["Изменить"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыИзменить"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Занять"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗанять"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["СохранитьИзменения"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьИзменения"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Удалить"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыУдалить"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["СохранитьКак"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьКак"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Освободить"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОсвободить"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ОбновитьИзФайлаНаДиске"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Распознать"], Ложь);
		УстановитьДоступностьКоманды(Элементы["ФайлыРаспознать"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыРаспознать"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыПодписатьФайл"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыПодписатьФайл"+Префикс], Ложь);
	                                 
		УстановитьДоступностьКоманды(Элементы["ФайлыДобавитьЭПИзФайла"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыДобавитьЭПИзФайла"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыСохранитьВместеСЭП"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьВместеСЭП"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыЗашифровать"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗашифровать"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыРасшифровать"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыРасшифровать"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыЗаполнитьФайлДаннымиДокумента"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗаполнитьФайлДаннымиДокумента"+Префикс], Ложь);

		УстановитьДоступностьКоманды(Элементы["ФайлыВставитьРегистрационныйНомер"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыВставитьРегистрационныйНомер"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ВставитьРегистрационныйШтампИШтрихкод"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюВставитьРегистрационныйШтампИШтрихкод"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыВставитьРегистрационныйНомер"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыВставитьРегистрационныйНомер"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыВставитьШтрихкод"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыВставитьШтрихкод"+Префикс], Ложь);		
		
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСнятьОтметкуСканКопияОригиналаУВсехФайлов"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюОткрытьИсходныйФайл"+Префикс], Ложь);
		
		УстановитьВидимостьКоманды(Элементы["РедактироватьВизуализациюЭП"+Префикс], Ложь);
		УстановитьВидимостьКоманды(Элементы["РедактироватьВизуализациюЭПКонтекстноеМеню"+Префикс], Ложь);
		
		УстановитьВидимостьКоманды(Элементы["ЗакончитьРедактированиеВизуализацииЭП"+Префикс], Ложь);
		УстановитьВидимостьКоманды(Элементы["ЗакончитьРедактированиеВизуализацииЭПКонтекстноеМеню"+Префикс], Ложь);
		
		
	Иначе
		
		РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
		Редактирует = ТекущиеДанные.Редактирует;
		ПодписанЭП = ТекущиеДанные.ПодписанЭП;
		Зашифрован = ТекущиеДанные.Зашифрован;
		СозданПоШаблонуДокумента = ТекущиеДанные.СозданПоШаблонуДокумента;
		РазрешеноРедактирование = Не (ЗапретитьРедактироватьФайлы И СозданПоШаблонуДокумента);
		РазрешеноУдаление = Не (ЗапретитьУдалятьФайлы И СозданПоШаблонуДокумента) 
			И Не ТекущиеДанные.ЭтоДокументЭДО И Не ТекущиеДанные.ЭтоРольФайла;
		ФайлВизуализацииЗанятМной = ТекущиеДанные.ФайлВизуализацииЗанятМной;        
		
		ЭтоОтправленныйЭДОФайл = (ДокументБлокированПоЭДОФайл = ТекущиеДанные.Ссылка); 
		РазрешеноПоЭДО = (Не ДокументБлокированПоЭДО) 
			Или (ДокументБлокированПоЭДО И Не ЭтоОтправленныйЭДОФайл);
		
		УстановитьДоступностьКоманды(Элементы["СоздатьФайл"+Префикс], Не Объект.ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСоздать"+Префикс], Не Объект.ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыИмпортФайлов"+Префикс],
			Не Объект.ПодписанЭП И Не ДокументВАрхивеИлиУничтожен);
		
		УстановитьДоступностьКоманды(Элементы["ВставитьКартинкуИзБуфера"+Префикс], Не Объект.ПодписанЭП);
		
		УстановитьДоступностьКоманды(Элементы["ОткрытьФайл"+Префикс], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОткрытьФайл"+Префикс], Истина);
		
		УстановитьДоступностьКоманды(Элементы["Напечатать"+Префикс], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыНапечатать"+Префикс], Истина);
		
		УстановитьДоступностьКоманды(Элементы["Редактировать"+Префикс], 
			НЕ ТекущиеДанные.ПодписанЭП И РазрешеноРедактирование И РазрешеноПоЭДО);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыРедактировать"+Префикс], 
			Не ТекущиеДанные.ПодписанЭП И РазрешеноРедактирование И Не ДокументВАрхивеИлиУничтожен И РазрешеноПоЭДО);
		
		УстановитьДоступностьКоманды(Элементы["ЗакончитьРедактирование"+Префикс], РедактируетТекущийПользователь И РазрешеноРедактирование);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗакончитьРедактирование"+Префикс], РедактируетТекущийПользователь И РазрешеноРедактирование);

		УстановитьДоступностьКоманды(Элементы["Изменить"+Префикс], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыИзменить"+Префикс], Истина);
		
		УстановитьДоступностьКоманды(Элементы["Занять"+Префикс], 
			Не ЗначениеЗаполнено(Редактирует) И РазрешеноРедактирование И РазрешеноПоЭДО);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗанять"+Префикс], 
			Не ЗначениеЗаполнено(Редактирует) И РазрешеноРедактирование И Не ДокументВАрхивеИлиУничтожен И РазрешеноПоЭДО);

		УстановитьДоступностьКоманды(Элементы["СохранитьИзменения"+Префикс], РедактируетТекущийПользователь И РазрешеноРедактирование);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьИзменения"+Префикс], РедактируетТекущийПользователь И РазрешеноРедактирование);

		УстановитьДоступностьКоманды(Элементы["Удалить"+Префикс], РазрешеноУдаление);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыУдалить"+Префикс], РазрешеноУдаление);
		
		УстановитьДоступностьКоманды(Элементы["СохранитьКак"+Префикс], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьКак"+Префикс], Истина);

		УстановитьДоступностьКоманды(Элементы["Освободить"+Префикс],  ЗначениеЗаполнено(Редактирует) И РазрешеноРедактирование);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОсвободить"+Префикс],  ЗначениеЗаполнено(Редактирует) И РазрешеноРедактирование);

		УстановитьДоступностьКоманды(Элементы["ОбновитьИзФайлаНаДиске"+Префикс], 
			РазрешеноРедактирование И РазрешеноПоЭДО);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске"+Префикс], 
			РазрешеноРедактирование И Не ДокументВАрхивеИлиУничтожен И РазрешеноПоЭДО);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюВыбратьРольФайла"+Префикс], 
			Не ДокументВАрхивеИлиУничтожен);
		
		Расширение = ТекущиеДанные.Расширение;
		ИспользоватьImageMagickДляРаспознаванияPDF = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ИспользоватьImageMagickДляРаспознаванияPDF;
		ПрограммаРаспознавания = РаботаСФайламиКлиентПовтИсп.ПрограммаРаспознавания();
		РасширениеПоддерживается = РаботаСФайламиКлиентСервер.ЭтотФайлМожноРаспознать(
			Расширение, ИспользоватьImageMagickДляРаспознаванияPDF, ПрограммаРаспознавания, ТаймлистИспользуется);
		ДоступноРаспознаваниеПоЗапросу = РаботаСФайламиКлиентПовтИсп.ДоступноРаспознаваниеПоЗапросу();
		ЭтоРасширениеТаймлист = ТаймлистКлиентСервер.ЭтоРасширениеФайлаТаймлист(Расширение);
		ЭтоPdf = (НРег(Расширение) = "pdf"); 
		ДоступнаВставкаШтрихкодаИРегНомера = 
			ЭтоPdf И ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.РегистрационныйНомер); 
			
		ДоступнаВставитьРегистрационныйНомер = 
			ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.РегистрационныйНомер) 
			И Не ПодписанЭП И Не ЗначениеЗаполнено(Редактирует);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыРаспознать"+Префикс],
			РасширениеПоддерживается
			И (Не ЭтоРасширениеТаймлист
					И ДоступноРаспознаваниеПоЗапросу
					И ТекущиеДанные.СтатусРаспознаванияТекста
						<> ПредопределенноеЗначение("Перечисление.СтатусыРаспознаванияТекста.Распознано")
					И ТекущиеДанные.СтатусРаспознаванияТекста
						<> ПредопределенноеЗначение("Перечисление.СтатусыРаспознаванияТекста.Распознается")
				Или ЭтоРасширениеТаймлист
					И ДоступноРаспознаваниеТаймлист
					И Не ЗначениеЗаполнено(ТекущиеДанные.ТаймлистСтатус)
					И Не ЗначениеЗаполнено(ТекущиеДанные.ТаймлистЗадание))
			И Не ЗначениеЗаполнено(Редактирует)
			И Не ДокументВАрхивеИлиУничтожен);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыРаспознать"+Префикс],
			Элементы["ФайлыРаспознать" + Префикс].Доступность);
		УстановитьДоступностьКоманды(Элементы["Распознать"],
			Элементы["ФайлыРаспознать" + Префикс].Доступность);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыПодписатьФайл"+Префикс],
			Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован И Не ДокументВАрхивеИлиУничтожен);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыПодписатьФайл"+Префикс],
			Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован И Не ДокументВАрхивеИлиУничтожен);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыДобавитьЭПИзФайла"+Префикс],
		Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован И Не ДокументВАрхивеИлиУничтожен);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыДобавитьЭПИзФайла"+Префикс],
			Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован И Не ДокументВАрхивеИлиУничтожен);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыСохранитьВместеСЭП"+Префикс], ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьВместеСЭП"+Префикс], ПодписанЭП);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыЗашифровать"+Префикс], 
			Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован И Не ДокументВАрхивеИлиУничтожен);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗашифровать"+Префикс],
			Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован И Не ДокументВАрхивеИлиУничтожен);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыРасшифровать"+Префикс], Зашифрован);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыРасшифровать"+Префикс], Зашифрован);

		УстановитьДоступностьКоманды(Элементы["ФайлыЗаполнитьФайлДаннымиДокумента"+Префикс],
			ТекущиеДанные.СозданИзШаблона И Не ЗначениеЗаполнено(Редактирует) И Не Зашифрован И Не ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗаполнитьФайлДаннымиДокумента"+Префикс],
			ТекущиеДанные.СозданИзШаблона И Не ЗначениеЗаполнено(Редактирует) И Не Зашифрован И Не ПодписанЭП);
			
		УстановитьДоступностьКоманды(Элементы["ВставитьРегистрационныйШтампИШтрихкод"+Префикс],
			ДоступнаВставкаШтрихкодаИРегНомера);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюВставитьРегистрационныйШтампИШтрихкод"+Префикс],
			ДоступнаВставкаШтрихкодаИРегНомера);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыВставитьШтрихкод"+Префикс],
			Не ЗначениеЗаполнено(Редактирует) И Не ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыВставитьШтрихкод"+Префикс],
			Не ЗначениеЗаполнено(Редактирует) И Не ПодписанЭП И Не ДокументВАрхивеИлиУничтожен);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыВставитьРегистрационныйНомер"+Префикс],
			ДоступнаВставитьРегистрационныйНомер);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыВставитьРегистрационныйНомер"+Префикс],
			ДоступнаВставитьРегистрационныйНомер И Не ДокументВАрхивеИлиУничтожен);
		
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСнятьОтметкуСканКопияОригиналаУВсехФайлов"+Префикс],
			Не Элементы.Оригинал.ТолькоПросмотр);
		
		РасширениеДляАвтовизуализации = РаботаСФайламиКлиентСервер.ЭтоРасширениеДляАвтовизуализации(Расширение);
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюОткрытьИсходныйФайл"+Префикс],
			АвтовизуализацияЭП И ПодписанЭП И РасширениеДляАвтовизуализации);
			
		ВидныКомандыВизуализации = АвтовизуализацияЭП 
			И (ПодписанЭП Или ДокументПодписан)
			И РасширениеДляАвтовизуализации 
			И (ЕстьРольРедактированиеВизуализацииЭП Или ТекПользовательПодготовилДокумент);
		
		УстановитьВидимостьКоманды(Элементы["РедактироватьВизуализациюЭП"+Префикс], 
			ВидныКомандыВизуализации);
		УстановитьВидимостьКоманды(Элементы["РедактироватьВизуализациюЭПКонтекстноеМеню"+Префикс], 
			ВидныКомандыВизуализации);
		
		УстановитьВидимостьКоманды(Элементы["ЗакончитьРедактированиеВизуализацииЭП"+Префикс], 
			ВидныКомандыВизуализации И ФайлВизуализацииЗанятМной);
		УстановитьВидимостьКоманды(Элементы["ЗакончитьРедактированиеВизуализацииЭПКонтекстноеМеню"+Префикс], 
			ВидныКомандыВизуализации И ФайлВизуализацииЗанятМной);
		
	КонецЕсли;
	
	УстановитьВидимостьКоманды(
		Элементы["ПерезаполнитьФайлыИзШаблона" + Префикс], ЕстьФайлыШаблона И Не Объект.ПодписанЭП);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьУстановитьДоступностьПолейЗаполнитьПодписи()
	
	Прочитать();
	УстановитьДоступностьПолей();
	ЗаполнитьСписокПодписей();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПолей()
	
	УстановитьДоступностьПоСостоянию();
	УстановитьДоступностьПоЭП();
	УстановитьДоступностьПоПравам();
	УстановитьДоступностьПоЗапрету();
	УстановитьДоступностьПоЭДО();
	
	Если НаименованиеСозданоПоШаблону Тогда 
		Элементы.Заголовок.ТолькоПросмотр = Истина;
		Элементы.Заголовок.Подсказка = НСтр("ru = 'Заголовок документа сформирован автоматически по шаблону, редактирование запрещено.'");
		Элементы.Заголовок.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	КонецЕсли;
	
	Если ДелоЗакрыто Тогда
		Элементы.ДелоТекст.ТолькоПросмотр = Истина;
		Элементы.ДелоТекст.Подсказка = НСтр("ru = 'Документ помещен в закрытое дело, состав дела нельзя менять.'");
		Элементы.ДелоТекст.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьРеквизитовХранения()
	
	Делопроизводство.ОбновитьВидимостьРеквизитовХранения(ЭтотОбъект, ВидДокументаКэш);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоЭП()
	
	УстановитьТолькоПросмотр = Объект.ПодписанЭП
		Или КопироватьПодписиЭП; // При копировании ЭП тоже нужно защищать поля от изменений
	
	ИспользоватьСостоянияДокументов = ПолучитьФункциональнуюОпцию("ИспользоватьСостоянияДокументов");
	ДоступныПолныеПрава = РольДоступна("ПолныеПрава");
	УстановитьДоступностьПоСостояниюНеРаботает = ДоступныПолныеПрава ИЛИ НЕ ИспользоватьСостоянияДокументов;
	
	// если не ПодписанЭП - делаем доступными ключевые поля - только для роли ПолныеПрава
	// - для неполных прав сработает УстановитьДоступностьПоСостоянию
	Если Объект.ПодписанЭП Или (НЕ Объект.ПодписанЭП И УстановитьДоступностьПоСостояниюНеРаботает) Тогда
		
		МассивИмен = Справочники.ДокументыПредприятия.ПолучитьИменаКлючевыхРеквизитов();
		
		ПрефиксОбъекта = "Объект.";
		МассивИменСОбъектом = Новый Массив;
		Для Каждого ИмяПоля Из МассивИмен Цикл
			ИмяСОбъектом = ПрефиксОбъекта + ИмяПоля;
			Если ИмяПоля = "Файлы" Тогда
				МассивИменСОбъектом.Добавить(ИмяПоля);
			Иначе
				МассивИменСОбъектом.Добавить(ИмяСОбъектом);
			КонецЕсли;
		КонецЦикла;
		
		ЭлементыДляИмен = Новый Массив;
		ЭлементыДляИмен.Добавить(Элементы.Заголовок);
		ЭлементыДляИмен.Добавить(Элементы.Содержание);
		ЭлементыДляИмен.Добавить(Элементы.Организация);
		ЭлементыДляИмен.Добавить(Элементы.Сумма);
		ЭлементыДляИмен.Добавить(Элементы.Валюта);
		ЭлементыДляИмен.Добавить(Элементы.Файлы);
		ЭлементыДляИмен.Добавить(Элементы.ФайлыСоздание);
		ЭлементыДляИмен.Добавить(Элементы.СтороныСторона);
		ЭлементыДляИмен.Добавить(Элементы.СтороныПодписан);
		ЭлементыДляИмен.Добавить(Элементы.СтороныПодписал);
		ЭлементыДляИмен.Добавить(Элементы.СтороныДатаПодписи);
		
		Для Каждого Элем Из ЭлементыДляИмен Цикл
			
			Если ТипЗнч(Элем) = Тип("ПолеФормы") ИЛИ ТипЗнч(Элем) = Тип("ТаблицаФормы") Тогда
				
				Если МассивИменСОбъектом.Найти(Элем.ПутьКДанным) <> Неопределено Тогда
					Если Элем.ПутьКДанным = "Файлы" Тогда 
						Элем.ИзменятьСоставСтрок = Не УстановитьТолькоПросмотр;
					Иначе
						Элем.ТолькоПросмотр = УстановитьТолькоПросмотр;
					КонецЕсли;	
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоЭДО()
	
	УстановитьТолькоПросмотр = ДокументБлокированПоЭДО;
	
	Если ДокументБлокированПоЭДО Тогда
		
		МассивИмен = Справочники.ДокументыПредприятия.ПолучитьИменаКлючевыхРеквизитов();
		
		ПрефиксОбъекта = "Объект.";
		МассивИменСОбъектом = Новый Массив;
		Для Каждого ИмяПоля Из МассивИмен Цикл
			ИмяСОбъектом = ПрефиксОбъекта + ИмяПоля;
			Если ИмяПоля = "Файлы" Тогда
				МассивИменСОбъектом.Добавить(ИмяПоля);
			Иначе
				МассивИменСОбъектом.Добавить(ИмяСОбъектом);
			КонецЕсли;
		КонецЦикла;
		
		ЭлементыДляИмен = Новый Массив;
		ЭлементыДляИмен.Добавить(Элементы.Заголовок);
		ЭлементыДляИмен.Добавить(Элементы.Содержание);
		ЭлементыДляИмен.Добавить(Элементы.Организация);
		ЭлементыДляИмен.Добавить(Элементы.Контрагент);
		ЭлементыДляИмен.Добавить(Элементы.Сумма);
		ЭлементыДляИмен.Добавить(Элементы.Валюта);
		ЭлементыДляИмен.Добавить(Элементы.СтороныСторона);
		ЭлементыДляИмен.Добавить(Элементы.СтороныПодписан);
		ЭлементыДляИмен.Добавить(Элементы.СтороныПодписал);
		ЭлементыДляИмен.Добавить(Элементы.СтороныДатаПодписи);
		
		Для Каждого Элем Из ЭлементыДляИмен Цикл
			
			Если ТипЗнч(Элем) = Тип("ПолеФормы") ИЛИ ТипЗнч(Элем) = Тип("ТаблицаФормы") Тогда
				
				Если МассивИменСОбъектом.Найти(Элем.ПутьКДанным) <> Неопределено Тогда
					Если Элем.ПутьКДанным = "Файлы" Тогда 
						Элем.ИзменятьСоставСтрок = Не УстановитьТолькоПросмотр;
					Иначе
						Элем.ТолькоПросмотр = УстановитьТолькоПросмотр;
					КонецЕсли;	
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла;   
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоСостоянию()
	
	Делопроизводство.УстановитьДоступностьПоСостоянию(ЭтаФорма, Объект.Ссылка, ДоступныеПоля, НедоступныеПоля);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоПравам()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(Объект.ИсточникДанных) Тогда
			ПраваПоОбъекту = Новый Структура("Изменение", Ложь);
			НеРедактируетсяОписание = НСтр("ru = 'Документ загружен из сторонней системы, редактирование запрещено.'");
			Элементы.ГруппаНеРедактируется.Видимость = Истина;
		Иначе
			ПраваПоОбъекту = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(Объект.Ссылка);
		КонецЕсли;
		
		Если Не ПраваПоОбъекту.Изменение Тогда
			ТолькоПросмотр = Истина;
			Элементы.Зарегистрировать.Доступность = Ложь;
			Элементы.Оригинал.ТолькоПросмотр = Истина;
			Элементы.ОригиналСоздание.ТолькоПросмотр = Истина;
			
			Элементы.ФормаЗакрыть.Видимость = Истина;
			Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = Истина;
			Элементы.ФормаЗаписатьИЗакрыть.Видимость = Ложь;
			Элементы.ФормаЗаписать.Видимость = Ложь;
			Элементы.ЗаписатьИЗакрытьЕще.Видимость = Ложь;
			Элементы.ЗаписатьЕще.Видимость = Ложь;
			
			Элементы.СписокКатегорийДанныхКонтекстноеМенюОткрытьФормуПодбораКатегорий.Доступность = Ложь;
			Элементы.СписокКатегорийДанныхОткрытьФормуПодбораКатегорий.Доступность = Ложь;
			
			Элементы.ПодписьТекст.ТолькоПросмотр = ТолькоПросмотр;
			Элементы.УтверждениеТекст.ТолькоПросмотр = ТолькоПросмотр;
			
			// Если доступа к документу нет, то состояние можно только "смотреть"
			ЗапретитьРучноеИзменениеСостоянияДокументов = Истина;
			Элементы.ДобавитьФайл.Доступность = Ложь;
			
			// Комплекты
			Элементы.СоставКомплекта.ИзменятьСоставСтрок = Ложь;
			Элементы.СоставКомплекта.ИзменятьПорядокСтрок = Ложь;
			Элементы.СоставКомплектаПодобратьДокументыПредприятия.Доступность = Ложь;
			Элементы.СоставКомплектаПодобратьФайлы.Доступность = Ложь;
			Элементы.ЭлементКомплектаУдалить.Доступность = Ложь;
			Элементы.КонтекстноеМенюЭлементКомплектаУдалить.Доступность = Ложь;
			Элементы.КонтекстноеМенюЭлементКомплектаПереместитьВверх.Доступность = Ложь;
			Элементы.КонтекстноеМенюЭлементКомплектаПереместитьВниз.Доступность = Ложь;
			
			Элементы.ПроверитьОрфографию.Доступность = Ложь;
			Элементы.СодержаниеПроверитьОрфографию.Доступность = Ложь;
			
			Элементы.ГруппаКоманды.Доступность = Ложь;
			Элементы.ГруппаДействияСоставУчастников.Доступность = Ложь;
			Элементы.Действия.ИзменятьСоставСтрок = Ложь;
			Элементы.Действия.ИзменятьПорядокСтрок = Ложь;
			Элементы.ДействияОтправить.Доступность = Ложь;
			Элементы.ДействияОстановить.Доступность = Ложь;
			Элементы.ДействияПерезапуститьОбработку.Доступность = Ложь;
			Элементы.ОтправитьОтветПереадресовавшему.Доступность = Ложь;
			Элементы.Переадресовать.Доступность = Ложь;
			Элементы.Переадресовать.Доступность = Ложь;
			Элементы.КонтекстноеМенюФайлыРедактировать.Доступность = Ложь;
			Элементы.КонтекстноеМенюФайлыСоздать.Доступность = Ложь;
			Элементы.КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске.Доступность = Ложь;
			Элементы.КонтекстноеМенюФайлыИзменить.Доступность = Ложь;
			Элементы.КонтекстноеМенюФайлыУдалить.Доступность = Ложь;
			Элементы.КонтекстноеМенюФайлыЗаполнитьФайлДаннымиДокумента.Доступность = Ложь;
			Элементы.КонтекстноеМенюФайлыГруппаДополнительно.Доступность = Ложь;
			Элементы.КонтекстноеМенюФайлыИмпортФайлов.Доступность = Ложь;
			Элементы.КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске.Доступность = Ложь;
			
			Элементы.ВставитьРегистрационныйШтампИШтрихкод.Доступность = Ложь;
			Элементы.ВставитьРегистрационныйШтампИШтрихкодСоздание.Доступность = Ложь;
			Элементы.КонтекстноеМенюВставитьРегистрационныйШтампИШтрихкодСоздание.Доступность = Ложь;
			Элементы.КонтекстноеМенюВставитьРегистрационныйШтампИШтрихкод.Доступность = Ложь;
			
		ИначеЕсли Не ДокументооборотПраваДоступа.ЕстьПравоРегистрации(Объект.Ссылка) Тогда
			Элементы.РегистрационныйНомер.ТолькоПросмотр = Истина;
			Элементы.ДатаРегистрации.ТолькоПросмотр = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Ставит доступность полям, уже заполненным в шаблоне.
&НаСервере
Процедура УстановитьДоступностьПоЗапрету()
	
	Если Не ЗначениеЗаполнено(Объект.Шаблон) Или РольДоступна("ПолныеПрава")
		Или Не ЗапретитьИзменятьРеквизитыИзШаблона Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИменаРеквизитов = Справочники.ДокументыПредприятия.ИменаРеквизитовИзШаблона();
	РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.Шаблон, ИменаРеквизитов);
		
	Для Каждого Пара Из РеквизитыШаблона Цикл
			
		ИмяРеквизита = Пара.Ключ;
		
		Если ИмяРеквизита = "Стороны" Или ИмяРеквизита = "Контрагенты" Тогда 
			Продолжить; 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыШаблона[ИмяРеквизита]) Тогда
			НайденныйЭлемент = Элементы.Найти(ИмяРеквизита);
			Если НайденныйЭлемент <> Неопределено Тогда
				
				НайденныйЭлемент.ТолькоПросмотр = Истина;
				
				Если ИмяРеквизита = "Подразделение" Тогда 
					НельзяМенятьПодразделение = Истина; 
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(РеквизитыШаблона["СтатьяДвиженияДенежныхСредств"]) Тогда
		Элементы.ПредставлениеСтатейДДС.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыШаблона["ВидДокумента"]) 
		Или ЗначениеЗаполнено(РеквизитыШаблона["Тематика"]) Тогда
		Элементы.ВидИТематикаТекст.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыШаблона["Способ"]) Тогда
		Элементы.СпособОтправки.ТолькоПросмотр = Истина;
		Элементы.СпособПолучения.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	УстановитьЗапретУдаленияКонтрагентовИзШаблона();
	УстановитьЗапретУдаленияСторонИзШаблона();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗапретУдаленияКонтрагентовИзШаблона()
	
	Если Не ЗапретитьИзменятьРеквизитыИзШаблона Или РольДоступна("ПолныеПрава") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Контрагент");
	Для Каждого КонтрагентШаблона Из КонтрагентыШаблона Цикл
		ПараметрыОтбора.Контрагент = КонтрагентШаблона.Контрагент;
		НайденныеСтроки = Объект.Контрагенты.НайтиСтроки(ПараметрыОтбора);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.ЗапретУдаления = Истина;
		КонецЦикла;
	КонецЦикла;
	
	Элементы["ОдинКонтрагент"].Доступность = КонтрагентыШаблона.Количество() <= 1;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗапретУдаленияСторонИзШаблона()
	
	Если Не ЗапретитьИзменятьРеквизитыИзШаблона Или РольДоступна("ПолныеПрава") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Сторона");
	Для Каждого СторонаШаблона Из СтороныШаблона Цикл
		ПараметрыОтбора.Сторона = СторонаШаблона.Сторона;
		НайденныеСтроки = Объект.Стороны.НайтиСтроки(ПараметрыОтбора);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.ЗапретУдаления = Истина;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКонтрагентов()
	
	Элементы.ГруппаКонтрагент.Видимость =
		Не НесколькоКонтрагентов
		И ВестиУчетПоКонтрагентам
		И Не ВидДокументаКэш.ВестиУчетСторон
		И Не ЯвляетсяЗаявкойНаОплату;
		
	Элементы.ГруппаКонтрагенты.Видимость =
		НесколькоКонтрагентов
		И ВестиУчетПоКонтрагентам
		И Не ВидДокументаКэш.ВестиУчетСторон
		И Не ЯвляетсяЗаявкойНаОплату;

КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуСканКопияОригиналаУВсехФайлов(Команда)
	
	Если Элементы.Оригинал.ТолькоПросмотр
		Или (ТипЗнч(ДоступныеПоля) = Тип("Структура")
		И Не ДоступныеПоля.Свойство("СоздатьФайлОригинал")) Тогда 
		Возврат;
		
	Иначе 
		ЕстьПометкиОригинала = Ложь;
		
		Для Каждого Строка Из Файлы.ПолучитьЭлементы() Цикл
			Если Не Строка.ЭтоРольФайла И Не Строка.ЭтоДокументЭДО Тогда
				Если Строка.Оригинал И Не Строка.ПометкаУдаления Тогда 
					Строка.Оригинал = Ложь;
					ЕстьПометкиОригинала = Истина;
				КонецЕсли;	
			Иначе
				
				Для Каждого Подстрока Из Строка.ПолучитьЭлементы() Цикл
					Если Подстрока.Оригинал И Не Подстрока.ПометкаУдаления Тогда 
						Подстрока.Оригинал = Ложь;
						ЕстьПометкиОригинала = Истина;
					КонецЕсли;	
				КонецЦикла;	
				
			КонецЕсли;	
				
		КонецЦикла;
		
		Если ОбязателенФайлОригинала И ЗначениеЗаполнено(Объект.РегистрационныйНомер)
			И Не ПолучитьВидимостьДекорацииОтсутствуетОригинал() Тогда 
			УстановитьВидимостьДекорацииОтсутствуетОригинал(Истина);
		КонецЕсли;
		
		Если ЕстьПометкиОригинала Тогда
			Если ОригиналПолученУстановленоВручную = Неопределено Тогда
				ОригиналПолученУстановленоВручную = Ложь;
			КонецЕсли;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами

&НаКлиенте
Процедура ОткрытьФайл(Файл)
	
	Если Не ЗначениеЗаполнено(Файл) Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиКлиент.ОткрытьФайлДокумента(Файл, ЭтаФорма);
	
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьФайлВыполнить()
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ОткрытьФайл(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИсходныйФайл(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	РаботаСФайламиКлиент.ОткрытьИсходныйФайлДокумента(ТекущиеДанные.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьФайлДаннымиДокументаСервер(ТекущийФайл)
	
	Возврат АвтозаполнениеШаблоновФайловКлиентСервер.ЗаполнитьПоляФайлаДаннымиВладельца(
		Ложь,
		ТекущийФайл, 
		Истина, 
		УникальныйИдентификатор);
		
КонецФункции

&НаСервере
Процедура ВыполнитьПакетноеОбновлениеВерсийФайлов(МассивФайловДляОбновления)
	
	Для Каждого ЗаполненныйФайл Из МассивФайловДляОбновления Цикл
		АвтозаполнениеШаблоновФайловВызовСервера.ОбновитьВерсиюИзДвоичныхДанных(
			ЗаполненныйФайл.ДвоичныеДанные, ЗаполненныйФайл.ТекущаяВерсия, "Вставка штрихкода");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокФайлов(Команда)
	
	ЗаполнитьСписокФайловКлиент();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДекорациюОтсутствуетОригинал(ТекущийОбъект)
	
	ОбязателенФайлОригинала = ВестиУчетСканКопийОригиналовДокументов 
		И ЗначениеЗаполнено(ТекущийОбъект.ВидДокумента)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект.ВидДокумента, "ОбязателенФайлОригинала");
		
	Если ОбязателенФайлОригинала И ЗначениеЗаполнено(ТекущийОбъект.РегистрационныйНомер) Тогда 
		
		ОтсутствуетОригинал = Истина;
		
		Для Каждого Строка Из Файлы.ПолучитьЭлементы() Цикл
			Если Не Строка.ЭтоРольФайла И Не Строка.ЭтоДокументЭДО Тогда
				Если Строка.Оригинал И Не Строка.ПометкаУдаления Тогда 
					ОтсутствуетОригинал = Ложь;
					Прервать;
				КонецЕсли;	
			Иначе
				
				Для Каждого Подстрока Из Строка.ПолучитьЭлементы() Цикл
					Если Подстрока.Оригинал И Не Подстрока.ПометкаУдаления Тогда 
						ОтсутствуетОригинал = Ложь;
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
				
			КонецЕсли;	
				
		КонецЦикла;
		
		Если ОтсутствуетОригинал Тогда 
			УстановитьВидимостьДекорацииОтсутствуетОригиналНаСервере(Истина);
		Иначе
			УстановитьВидимостьДекорацииОтсутствуетОригиналНаСервере(Ложь);
		КонецЕсли;
		
	Иначе
		УстановитьВидимостьДекорацииОтсутствуетОригиналНаСервере(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДекорацииОтсутствуетОригинал(Видимость)
	
	Если Элементы.Обзор.Видимость Тогда 
		ЭлементГруппаНадписьОтсутствуетОригинал = Элементы.ГруппаНадписьОтсутствуетОригинал;
	Иначе
		ЭлементГруппаНадписьОтсутствуетОригинал = Элементы.ГруппаНадписьОтсутствуетОригиналСоздание;
	КонецЕсли;
		
	Если ЭлементГруппаНадписьОтсутствуетОригинал.Видимость <> Видимость Тогда 
		ЭлементГруппаНадписьОтсутствуетОригинал.Видимость = Видимость;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьВидимостьДекорацииОтсутствуетОригинал()
	
	Если Элементы.Обзор.Видимость Тогда 
		ЭлементГруппаНадписьОтсутствуетОригинал = Элементы.ГруппаНадписьОтсутствуетОригинал;
	Иначе
		ЭлементГруппаНадписьОтсутствуетОригинал = Элементы.ГруппаНадписьОтсутствуетОригиналСоздание;
	КонецЕсли;
	
	Возврат ЭлементГруппаНадписьОтсутствуетОригинал.Видимость;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьДекорацииОтсутствуетОригиналНаСервере(Видимость)
	
	Если Элементы.Обзор.Видимость Тогда 
		ЭлементГруппаНадписьОтсутствуетОригинал = Элементы.ГруппаНадписьОтсутствуетОригинал;
	Иначе
		ЭлементГруппаНадписьОтсутствуетОригинал = Элементы.ГруппаНадписьОтсутствуетОригиналСоздание;
	КонецЕсли;
	
	ЭлементГруппаНадписьОтсутствуетОригинал.Видимость = Видимость;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа со связями документа

&НаСервере
Процедура ПрочитатьСвязи(ТипыСвязей = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	Если ТипыСвязей = Неопределено Или ТипыСвязей.Найти(Справочники.ТипыСвязей.НеДействуетВСоответствии) <> Неопределено Тогда
		НеДействуетВСоответствии = СвязиОбъектов.ПолучитьСвязанныйОбъект(Объект.Ссылка, Справочники.ТипыСвязей.НеДействуетВСоответствии);
		
		Если Не ЗначениеЗаполнено(НеДействуетВСоответствии) Тогда
			
			ГотовитсяКОтменеДокументы = РегистрыСведений.ОтменяемыеДокументы.ПрочитатьНовыеДокументы(Объект.Ссылка);
			Если ГотовитсяКОтменеДокументы.Количество() <> 0 Тогда
				НеДействуетВСоответствии = ГотовитсяКОтменеДокументы[0].Документ;
				НеДействуетВСоответствииСтрока = СокрЛП(НеДействуетВСоответствии);
			Иначе
				
				ГотовитсяКОтменеДокументыОтложенно = РегистрыСведений.ОтложеннаяУстановкаСвязей.ПрочитатьНовыеДокументы(
					Объект.Ссылка, Справочники.ТипыСвязей.ДелаетНеДействующим);

				Если ГотовитсяКОтменеДокументыОтложенно.Количество() <> 0 Тогда
					НеДействуетВСоответствии = ГотовитсяКОтменеДокументыОтложенно[0].Документ;
					НеДействуетВСоответствииСтрока = СокрЛП(НеДействуетВСоответствии);
				КонецЕсли;	
					
			КонецЕсли;
		Иначе 
			НеДействуетВСоответствииСтрока = СокрЛП(НеДействуетВСоответствии);
		КонецЕсли;	
		
		НачальныйНеДействуетВСоответствии = НеДействуетВСоответствии;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТипыСвязей = Неопределено Или ТипыСвязей.Найти(Справочники.ТипыСвязей.ДелаетНеДействующим) <> Неопределено Тогда 
		
		СписокНеДействующихДокументов.Очистить();
		СвязиОбъектов.ПрочитатьНеДействующие(Объект.Ссылка, Объект.РегистрационныйНомер, СписокНеДействующихДокументов);
		
		ВремТабл = СписокНеДействующихДокументов.Выгрузить();
		СписокНеДействующихДокументовНачальное.Загрузить(ВремТабл);
		
		Если СписокНеДействующихДокументов.Количество() <> 0 Тогда
			Элементы.ДелаетНедействующимиСтрока.Заголовок = СтрШаблон(
				НСтр("ru = 'Делает недействующими (%1)'"), СписокНеДействующихДокументов.Количество());
		Иначе
			Элементы.ДелаетНедействующимиСтрока.Заголовок = НСтр("ru = 'Делает недействующими'");
		КонецЕсли;	
		
	КонецЕсли;
	
	Если ТипыСвязей = Неопределено Или ТипыСвязей.Найти(Справочники.ТипыСвязей.АвансовыйОтчет) <> Неопределено Тогда
		АвансовыйОтчет = СвязиОбъектов.ПолучитьСвязанныйОбъект(Объект.Ссылка, Справочники.ТипыСвязей.АвансовыйОтчет);
		АвансовыйОтчетПриЧтении = АвансовыйОтчет;
		Элементы.ГруппаАвансовыйОтчетУказан.Видимость = ЗначениеЗаполнено(АвансовыйОтчет);
		Элементы.ГруппаАвансовыйОтчетНеПредоставлен.Видимость = Не ЗначениеЗаполнено(АвансовыйОтчет)
			И НЕ АвансовыйОтчетПредоставлен И АвансовыйОтчетТребуется;
		Элементы.ГруппаАвансовыйОтчетПредоставлен.Видимость = Не ЗначениеЗаполнено(АвансовыйОтчет)
			И АвансовыйОтчетПредоставлен;
		Элементы.ГруппаАвансовыйОтчетНеТребуется.Видимость = Не ЗначениеЗаполнено(АвансовыйОтчет)
			И Не АвансовыйОтчетТребуется;
	КонецЕсли;
		
	Если ТипыСвязей = Неопределено 
		Или ТипыСвязей.Найти(Справочники.ТипыСвязей.ПредметПереписки) <> Неопределено Тогда

		ПредметыПереписки = СвязиОбъектов.ПолучитьСвязанныеОбъекты(Объект.Ссылка,
			Справочники.ТипыСвязей.ПредметПереписки);
		
		Если ПредметыПереписки.Количество() Тогда
			СписокПредметовПереписки.ЗагрузитьЗначения(ПредметыПереписки);
			ПредметПереписки = ПредметыПереписки[0];
			Если Не ЗначениеЗаполнено(НачальныйПредметПереписки) Тогда
				НачальныйПредметПереписки = ПредметПереписки;
			КонецЕсли;
			НесколькоПредметовПереписки = СписокПредметовПереписки.Количество() > 1;
		КонецЕсли;
		
		РаботаСКорреспонденциейКлиентСервер.УстановитьВидимостьЭлементовВОтветНаИПредметПереписки(ЭтотОбъект);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОСвязях()
	
	КраткиеСведенияОСвязях = СвязиОбъектов.КраткиеСведенияОСвязях(Объект.Ссылка);
		
	Если Не ЗначениеЗаполнено(КраткиеСведенияОСвязях) Тогда	
		КраткиеСведенияОСвязях = НСтр("ru = 'Связи: не заданы'");
	КонецЕсли;	
		
	Элементы.КраткиеСведенияОСвязях.Видимость 
		= ЗначениеЗаполнено(КраткиеСведенияОСвязях) И Не ЭтоНовыйДокумент;
		
	ПолучитьОбзорДокумента();	
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСвязи()
	
	Если Не ЭтоНовыйДокумент Тогда
		Возврат;
	КонецЕсли;
	
	Делопроизводство.ЗаполнитьДеревоСвязейДокумента(ЭтаФорма);
	
КонецПроцедуры	

&НаСервере
Процедура УдалитьСвязь(Параметры)
	
	Если ЗначениеЗаполнено(Параметры.СвязанныйОбъект) Тогда 
		СвязанныйОбъект = Параметры.СвязанныйОбъект;
	ИначеЕсли ЗначениеЗаполнено(Параметры.СвязаннаяСтрока) Тогда 
		СвязанныйОбъект = Параметры.СвязаннаяСтрока;
	КонецЕсли;

	НастройкаСвязи = СвязиОбъектов.ПолучитьНастройкуСвязи(Параметры.Документ, СвязанныйОбъект, Параметры.ТипСвязи);
	Если НастройкаСвязи <> Неопределено И НастройкаСвязи.Обязательная Тогда
		ВызватьИсключение НСтр("ru = 'Нельзя удалять обязательную связь.'");
	КонецЕсли;	
	
	СвязиОбъектов.УдалитьСвязь(Параметры.Документ, СвязанныйОбъект, Параметры.ТипСвязи,, Истина);
	ЗаполнитьСвязи();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКлюч(ПараметрыКлюча)
	
	КлючЗаписи = РегистрыСведений.СвязиОбъектов.СоздатьКлючЗаписи(ПараметрыКлюча);
	Возврат КлючЗаписи;
	
КонецФункции	

&НаСервере
Функция ПолучитьТипыСвязей(Основание, ВидДокумента)
	
	МассивТиповСвязей.Очистить();
	ЧислоПользовательскихСвязей = 0;
	
	СвязанныйДокумент = Новый Структура("ВидДокумента", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ВидДокумента"));
	ДокументСтруктура = Новый Структура("ВидДокумента", ВидДокумента);
	ТаблицаНастроекСвязей = СвязиОбъектов.ПолучитьНастройкиСвязи(ДокументСтруктура, СвязанныйДокумент);
	
	Для Каждого Строка Из ТаблицаНастроекСвязей Цикл
		
		Если Не СвязиОбъектов.ЭтоПодходящийТипСвязи(Объект.Ссылка, Основание, Строка.ТипСвязи) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Единичная Тогда
			
			// если связь единичная - надо проверить, что нет уже документов, связанных с основанием связью этого типа
			ДокументыНайденные = СвязиОбъектов.ПолучитьСвязанныеОбъекты(Основание, Строка.ТипОбратнойСвязи);
			Если ДокументыНайденные.Количество() = 0 Тогда
				МассивТиповСвязей.Добавить(Строка.ТипСвязи);
			КонецЕсли;
			
		Иначе
			
			МассивТиповСвязей.Добавить(Строка.ТипСвязи);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из МассивТиповСвязей Цикл
		Если ЗначениеЗаполнено(Строка.Значение) И Не Строка.Значение.Предопределенный Тогда
			ЧислоПользовательскихСвязей = ЧислоПользовательскихСвязей + 1;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат МассивТиповСвязей;
	
КонецФункции

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ЭтаФорма.Свойства_ИспользоватьСвойства Тогда
		УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с электронной подписью

&НаСервере
Процедура ОбновитьКартинкуЭП()
	
	ОбзорДокумента.ВывестиКартинкуЭП(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПодписатьДокументЗавершениеВызовСервера()
	
	ПрочитатьУстановитьДоступностьПолейЗаполнитьПодписи();
	ОбновитьКартинкуЭП();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПодписей(ИзПриСозданииНаСервере = Ложь) Экспорт
	
	РаботаСЭП.ЗаполнитьСписокПодписей(Объект.Ссылка, ЭлектронныеПодписи, 
		УникальныйИдентификатор, Элементы.ГруппаЭП, ВсегоПодписей);
		
	Если ИзПриСозданииНаСервере = Ложь Тогда	
		ОбновитьКолонкиСпискаФайлов("СтатусПроверкиЭП,ПодписанЭП");
	КонецЕсли;
	
	Если СвязанныеДокументыЭДО.Количество() <> 0 Тогда
		
		МассивЭД = СвязанныеДокументыЭДО.ВыгрузитьЗначения(); 
		СколькоДобавилиПодписей = 0;
		ОбменЭДОДокументооборот.ДополнитьСписокПодписей(МассивЭД, ЭлектронныеПодписи, 
			СколькоДобавилиПодписей, УникальныйИдентификатор);
		
		ВсегоПодписей = ВсегоПодписей + СколькоДобавилиПодписей;
		
		ТекстЗаголовка = НСтр("ru = 'ЭП'");
		Если ВсегоПодписей <> 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + " (" + Строка(ВсегоПодписей) + ")";
		КонецЕсли;
		Элементы.ГруппаЭП.Заголовок = ТекстЗаголовка;
		
		Если ВсегоПодписей = 0 Тогда 
			Элементы.ГруппаЭП.Видимость = Ложь;
		Иначе	
			Элементы.ГруппаЭП.Видимость = Истина;
		КонецЕсли;	
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПодписи()
	
	Если Элементы.ЭлектронныеПодписи.ВыделенныеСтроки.Количество() > 1 Тогда
		ТекстВопроса = НСтр("ru = 'Удалить выделенные подписи?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Удалить выделенную подпись?'");
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"УдалитьПодписиПродолжение",
		ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьПодписиПродолжение(Результат, Параметры) Экспорт 

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
		
	УдалитьПодписиИОбновитьСписок(Ложь);
		
	ОповеститьОбИзменении(КлючЗаписи);
		
	УстановитьДоступностьКомандСпискаПодписей(Элементы.ЭлектронныеПодписи.ТекущиеДанные);
		
КонецПроцедуры	

&НаСервере
Процедура УдалитьПодписиИОбновитьСписок(РеквизитПодписанИзменен)
	
	РаботаСЭП.УдалитьПодписиИОбновитьСписок(РеквизитПодписанИзменен, 
		Элементы.ЭлектронныеПодписи.ВыделенныеСтроки,
		Объект.Ссылка, ЭлектронныеПодписи, УникальныйИдентификатор, Элементы.ГруппаЭП, ВсегоПодписей);
		
	Если РеквизитПодписанИзменен Тогда
		ПрочитатьУстановитьДоступностьПолейЗаполнитьПодписи();
	КонецЕсли;
	
	ОбновитьКолонкиСпискаФайлов("СтатусПроверкиЭП");
	ОбновитьКартинкуЭП();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандСпискаПодписей(ТекущиеДанные)
	
	ЭтоПодпись = Истина;
	ЕстьПодписи = (ЭлектронныеПодписи.ПолучитьЭлементы().Количество() <> 0);
	
	Если ТекущиеДанные <> Неопределено Тогда
		ЭтоПодпись = ТекущиеДанные.Объект <> Неопределено И (НЕ ТекущиеДанные.Объект.Пустая());
	КонецЕсли;
		
	Элементы.ТаблицаПодписейПроверить.Доступность = ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейПроверитьВсе.Доступность = ЕстьПодписи;
	Элементы.ТаблицаПодписейОткрытьПодпись.Доступность = ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейУдалить.Доступность = Не ДокументВАрхивеИлиУничтожен И ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейСохранить.Доступность = ЕстьПодписи И ЭтоПодпись;
	
	Элементы.ТаблицаПодписейКонтекстноеМенюПроверить.Доступность = ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейКонтекстноеМенюПроверитьВсе.Доступность = ЕстьПодписи;
	Элементы.ТаблицаПодписейКонтекстноеМенюОткрытьПодпись.Доступность = ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейКонтекстноеМенюУдалить.Доступность = Не ДокументВАрхивеИлиУничтожен И ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейКонтекстноеМенюСохранить.Доступность = ЕстьПодписи И ЭтоПодпись;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// Регистрация документа

&НаСервере
Процедура КомпенсацияРегистрации()
	
	УстановитьДоступностьРеквизитовРегистрации(Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьРеквизитовРегистрации(ТекущийОбъект)
	
	ЭтоДелопроизводитель = РольДоступна("РегистрацияДокументовПредприятия") Или РольДоступна("ПолныеПрава");
	Если Не ЭтоДелопроизводитель Тогда 
		
		Элементы.Зарегистрировать.Видимость = Ложь;
		Элементы.ЗарегистрироватьЕще.Видимость = Ложь;
		Элементы.ГруппаРегНомер.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		Если Не ЗначениеЗаполнено(Объект.РегистрационныйНомер) 
		   И Не ЗначениеЗаполнено(Объект.ДатаРегистрации) Тогда 
			Элементы.РегистрационныйНомер.Видимость = Ложь;
			Элементы.ДатаРегистрации.Видимость = Ложь;
		КонецЕсли;
		
	Иначе
		
		Элементы.Зарегистрировать.Видимость = Истина;
		Элементы.ЗарегистрироватьЕще.Видимость = Истина;
		Элементы.ГруппаРегНомер.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		
		Если Не ЗначениеЗаполнено(ТекущийОбъект.ВидДокумента) Тогда // не известен вид нумерации
			
			Элементы.РегистрационныйНомер.Доступность = Ложь;
			Элементы.ДатаРегистрации.Доступность = Ложь;
			Элементы.ГруппаРегНомер.Подсказка = 
				НСтр("ru = 'Для регистрации документа используйте кнопку ""Зарегистрировать"" в командной панели.'");
			
			Элементы.ФайлыВставитьРегистрационныйНомер.Доступность = Ложь;
			Элементы.КонтекстноеМенюФайлыВставитьРегистрационныйНомер.Доступность = Ложь;
			Элементы.ФайлыВставитьРегистрационныйНомерСоздание.Доступность = Ложь;
			Элементы.КонтекстноеМенюФайлыВставитьРегистрационныйНомерСоздание.Доступность = Ложь;
			
		Иначе
			
			Если ЗначениеЗаполнено(ТекущийОбъект.РегистрационныйНомер) Тогда // документ зарегистрирован
				Элементы.РегистрационныйНомер.Доступность = Истина;
				Элементы.ДатаРегистрации.Доступность = Истина;
				Элементы.Зарегистрировать.Видимость = Ложь;
				Элементы.ЗарегистрироватьЕще.Заголовок = НСтр("ru = 'Перерегистрировать'");
				Элементы.РегистрационныйНомер.ОтображениеПредупрежденияПриРедактировании = 
					ОтображениеПредупрежденияПриРедактировании.Отображать;
				Элементы.ГруппаРегНомер.Подсказка = 
					НСтр("ru = 'Для перерегистрации документа используйте команду ""Еще \ Документ \ Перерегистрировать"".'");
				
				Элементы.ФайлыВставитьРегистрационныйНомер.Доступность = Истина;
				Элементы.КонтекстноеМенюФайлыВставитьРегистрационныйНомер.Доступность = Истина;
				Элементы.ФайлыВставитьРегистрационныйНомерСоздание.Доступность = Истина;
				Элементы.КонтекстноеМенюФайлыВставитьРегистрационныйНомерСоздание.Доступность = Истина;
			Иначе
				Элементы.РегистрационныйНомер.Доступность = Ложь;
				Элементы.ДатаРегистрации.Доступность = Ложь;
				Элементы.ЗарегистрироватьЕще.Заголовок = НСтр("ru = 'Зарегистрировать'");
				Элементы.ГруппаРегНомер.Подсказка = 
					НСтр("ru = 'Для регистрации документа используйте кнопку ""Зарегистрировать"" в командной панели.'");
				
				Элементы.ФайлыВставитьРегистрационныйНомер.Доступность = Ложь;
				Элементы.КонтекстноеМенюФайлыВставитьРегистрационныйНомер.Доступность = Ложь;
				Элементы.ФайлыВставитьРегистрационныйНомерСоздание.Доступность = Ложь;
				Элементы.КонтекстноеМенюФайлыВставитьРегистрационныйНомерСоздание.Доступность = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоМобильныйКлиент Тогда
		Элементы.ГруппаРегНомер.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
	РаботаСКорреспонденцией.УстановитьДоступностьОтправки(ЭтаФорма, ТекущийОбъект.РегистрационныйНомер);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЧисловойНомерДокумента(ТекущийОбъект)
	
	СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(ТекущийОбъект);
	СтруктураПараметров.Вставить("ПерепискаПоПредмету",	ПерепискаПоПредмету);
	СтруктураПараметров.Вставить("НеДействуетВСоответствии", НеДействуетВСоответствии);
	СтруктураПараметров.Вставить("СвязанныйОбъект", СвязанныйДокументДляНумерации);
	СтруктураПараметров.Вставить("ПолученВОтветНа", ВОтветНа);
	
	Нумерация.СформироватьЧисловойНомерДокумента(СтруктураПараметров, ТекущийОбъект.ЧисловойНомер);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтроковыйНомерДокумента(ТекущийОбъект)
	
	СтруктураПараметров = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(ТекущийОбъект);
	СтруктураПараметров.Вставить("ПерепискаПоПредмету",	ПерепискаПоПредмету);
	СтруктураПараметров.Вставить("НеДействуетВСоответствии", НеДействуетВСоответствии);
	СтруктураПараметров.Вставить("СвязанныйОбъект", СвязанныйДокументДляНумерации);
	СтруктураПараметров.Вставить("ПолученВОтветНа", ВОтветНа);
	
	ОписанияОшибок = Новый СписокЗначений;
	Нумерация.СформироватьСтроковыйНомерДокумента(СтруктураПараметров, ТекущийОбъект.РегистрационныйНомер, ОписанияОшибок);
	
	Для Каждого ОписаниеОшибки Из ОписанияОшибок Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ОписаниеОшибки.Представление,,
			ОписаниеОшибки.Значение,
			"Объект");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеРеквизита(ЗначениеРеквизита, ИмяРеквизита, Поле, ТекстСообщения = Неопределено)
	
	Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		Сообщение = Новый СообщениеПользователю;
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			Сообщение.Текст = ТекстСообщения;
		Иначе
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Поле ""%1"" не заполнено'"),
				ИмяРеквизита);
		КонецЕсли;
		Сообщение.Поле = Поле;
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьРегистрации(ТекущийОбъект)
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Истина;
	
	// Проверка заполненности срока действия документа
	Если ЗначениеЗаполнено(ТекущийОбъект.ВидДокумента)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект.ВидДокумента, "УчитыватьСрокДействия") Тогда
		Если ПолучитьФункциональнуюОпцию("УчитыватьСрокДействияДокумента", 
			Новый Структура("ВидДокумента", ТекущийОбъект.ВидДокумента)) Тогда
			Поле = "СрокДействияСтрока";
			Сообщение = НСтр("ru = 'Не заполнена дата начала действия'");
			Если Не ПроверитьЗаполнениеРеквизита(
				ТекущийОбъект.ДатаНачалаДействия,
				НСтр("ru = 'Дата начала действия'"),
				Поле,
				Сообщение) Тогда
				Результат = Ложь;
			КонецЕсли;
			Если Не ТекущийОбъект.Бессрочный Тогда
				Сообщение = НСтр("ru = 'Не заполнена дата окончания действия'");
				Если Не ПроверитьЗаполнениеРеквизита(
					ТекущийОбъект.ДатаОкончанияДействия,
					НСтр("ru = 'Дата окончания действия'"),
					Поле,
					Сообщение) Тогда
					Результат = Ложь;
				КонецЕсли;
				Сообщение = НСтр("ru = 'Не заполнен порядок продления'");
				Если Не ПроверитьЗаполнениеРеквизита(
					ТекущийОбъект.ПорядокПродления,
					НСтр("ru = 'Порядок продления'"),
					Поле,
					Сообщение)Тогда
					Результат = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// проверка уникальности номера, указанного вручную
	Нумератор = Нумерация.ПолучитьНумераторДокумента(ТекущийОбъект);
	Если Не ЗначениеЗаполнено(Нумератор) Тогда 
		Если ЗначениеЗаполнено(РегистрационныйНомер) Тогда 
			ОбъектСтруктура = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(ТекущийОбъект);
			ОбъектСтруктура.Вставить("РегистрационныйНомер", РегистрационныйНомер);
			ОбъектСтруктура.Вставить("ДатаРегистрации", ТекущаяДатаСеанса());
			
			Если Не Делопроизводство.НомерУникален(ОбъектСтруктура) Тогда 
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Указанный регистрационный номер не уникален!'"));
				Возврат Ложь;	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруДелВоВнутренних", 
		Новый Структура("ВидДокумента", ТекущийОбъект.ВидДокумента))  
		И Не ЗначениеЗаполнено(ТекущийОбъект.НоменклатураДел) Тогда 
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Поле ""Номенклатура дел"" не заполнено'"),,"Объект.НоменклатураДел");
		Результат = Ложь;
	КонецЕсли;
	
	КоличествоЗанятыхФайлов = РаботаСФайламиВызовСервера.ПолучитьКоличествоЗанятыхФайлов(ТекущийОбъект.Ссылка);
	Если КоличествоЗанятыхФайлов > 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Документ содержит файлы, занятые для редактирования'"),,,"Файлы");
		Результат = Ложь;
	КонецЕсли;
	
	Делопроизводство.ПроверитьЗаполнениеРеквизитовХраненияВФорме(ЭтотОбъект, Результат);
	
	Если ВестиУчетТоваровИУслуг И УчитыватьНДС Тогда
		ДатаРегистрацииПроверка = ?(ЗначениеЗаполнено(ТекущийОбъект.ДатаРегистрации), ТекущийОбъект.ДатаРегистрации,
			ТекущаяДатаСеанса());
		Для Сч = 0 По ТекущийОбъект.Товары.Количество() - 1 Цикл
			ТекстСообщения = "";
			Если ЗначениеЗаполнено(ТекущийОбъект.Товары[Сч].СтавкаНДС)
				И Не УчетНДС.СтавкаНДСДействует(ТекущийОбъект.Товары[Сч].СтавкаНДС, ДатаРегистрацииПроверка) Тогда
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Ставка НДС %1, указанная в строке %2 таблицы ""Товары и услуги"", недействительна на дату регистрации документа.'"),
					ТекущийОбъект.Товары[Сч].СтавкаНДС,
					Сч + 1);
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекстСообщения) Тогда
				Результат = Ложь;
				Путь = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", Сч + 1, "СтавкаНДС");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Путь);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Не дадим зарегистрировать документ
	// если у него файлы не удовлетворяют ролям.
	Если ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
		
		ТекстОшибки = "";
		Если Не РаботаСФайламиВызовСервера.ФайлыУдовлетворяютРолям(ТекущийОбъект.Ссылка, ТекстОшибки) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,,,"Файлы");
			Результат = Ложь;	
			
		КонецЕсли;	 
		
	Иначе

		ТекстОшибки = "";
		Если Не РаботаСФайламиВызовСервера.ФайлыДобавленныеУдовлетворяютРолям(ФайлыДобавленные, ТекущийОбъект.ВидДокумента, ТекстОшибки) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,,,"Файлы");
			Результат = Ложь;	
			
		КонецЕсли;	 
		
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ДокументЗарегистрирован()
	
	Возврат ЗначениеЗаполнено(Объект.РегистрационныйНомер);
	
КонецФункции

&НаКлиенте
Функция ДокументАктивен()
	
	ДокументАктивен = Истина;
	Если СтруктураСостоянияДела <> Неопределено
		И СтруктураСостоянияДела.Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияДелХраненияДокументов.ПустаяСсылка") Тогда
		ДокументАктивен = Ложь;
	КонецЕсли;
	
	Возврат ДокументАктивен;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////
// Срок действия документа

&НаСервере
Процедура СрокДействияПриЧтенииНаСервере()
	
	НачальныйСрокДействияЗаполнен = СрокДействияЗаполнен();
	УчитыватьСрокДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, 
		"УчитыватьСрокДействия");
	ОбновитьОтображениеСрокаДействия();
	
КонецПроцедуры

&НаСервере
Процедура СрокДействияПриСозданииНаСервере()
	
	НачальныйСрокДействияЗаполнен = СрокДействияЗаполнен();
	
	Если ТипЗнч(ВидДокументаКэш) = Тип("Структура") Тогда
		УчитыватьСрокДействия = ВидДокументаКэш.УчитыватьСрокДействия;
	Иначе
		УчитыватьСрокДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, 
			"УчитыватьСрокДействия");
	КонецЕсли;
	
	ОбновитьОтображениеСрокаДействия();
	
КонецПроцедуры

&НаСервере
Процедура СрокДействияПередЗаписьюНаСервере(ТекущийОбъект, ПараметрыЗаписи);
	
	ПараметрыЗаписи.Вставить("СрокДействияКомментарий", СрокДействияКомментарий);
	ПараметрыЗаписи.Вставить("СрокДействияДокументИсточникИзменения", СрокДействияДокументИсточникИзменения);
	
	Если ТекущийОбъект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТекущийОбъект.ВидДокумента) 
		Или Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект.ВидДокумента, "УчитыватьСрокДействия") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не НачальныеЗначенияРеквизитов[0].НеДействует И ТекущийОбъект.НеДействует Тогда // установлен признак "Не действует"
		
		Если ЗначениеЗаполнено(НеДействуетВСоответствии) Тогда
			СрокДействияКомментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Действие документа прекращено в соответствии с документом: %1.'"),
				Строка(НеДействуетВСоответствии));
		Иначе
			СрокДействияКомментарий = НСтр("ru = 'Действие документа прекращено.'");
		КонецЕсли;
		СрокДействияДокументИсточникИзменения = НеДействуетВСоответствии;
		ПараметрыЗаписи.Вставить("СрокДействияКомментарий", СрокДействияКомментарий);
		ПараметрыЗаписи.Вставить("СрокДействияДокументИсточникИзменения", НеДействуетВСоответствии);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СрокДействияПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи);
	
	Если НовыйДокумент
			И СрокДействияЗаполнен()
			Или СрокДействияИзменен(ТекущийОбъект, ПараметрыЗаписи) Тогда
		Запись = РегистрыСведений.ИсторияСроковДействияДокументов.НоваяЗапись();
		Запись.Документ = Объект.Ссылка;
		Запись.ДатаНачалаДействия = Объект.ДатаНачалаДействия;
		Запись.ДатаОкончанияДействия = Объект.ДатаОкончанияДействия;
		Запись.Бессрочный = Объект.Бессрочный;
		Запись.ПорядокПродления = Объект.ПорядокПродления;
		Запись.ДокументИсточникИзменения = ПараметрыЗаписи.СрокДействияДокументИсточникИзменения;
		Запись.Комментарий = ПараметрыЗаписи.СрокДействияКомментарий;
		РегистрыСведений.ИсторияСроковДействияДокументов.ДобавитьЗапись(Запись);
	КонецЕсли;
	
	НачальныйСрокДействияЗаполнен = СрокДействияЗаполнен();
	УчитыватьСрокДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Объект.ВидДокумента,
		"УчитыватьСрокДействия");
	
КонецПроцедуры

&НаСервере
Процедура СрокДействияПриИзмененииВидаДокумента()
	
	Если ТипЗнч(ВидДокументаКэш) = Тип("Структура") Тогда
		УчитыватьСрокДействия = ВидДокументаКэш.УчитыватьСрокДействия;
	Иначе
		УчитыватьСрокДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, 
			"УчитыватьСрокДействия");
	КонецЕсли;
	
	ОбновитьОтображениеСрокаДействия();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеСрокаДействия()
	
	Если УчитыватьСрокДействия Тогда
		ИсторияСрока = РегистрыСведений.ИсторияСроковДействияДокументов.ИсторияСрокаДействия(Объект.Ссылка);
		СрокДействияКомментарий = ИсторияСрока.Комментарий;
		СрокДействияДокументИсточникИзменения = ИсторияСрока.ДокументИсточникИзменения;
		
		СрокДействияСтрока = ДелопроизводствоКлиентСервер.СформироватьПредставлениеСрокаДействия(
			Объект, СрокДействияКомментарий);
		Элементы.СрокДействияСтрока.Видимость = Истина;
	Иначе
		Элементы.СрокДействияСтрока.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСрокДействияДокументаПродолжение(Результат, Параметры) Экспорт 

	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		Объект.ДатаНачалаДействия = Результат.ДатаНачалаДействия;
		Объект.ДатаОкончанияДействия = Результат.ДатаОкончанияДействия;
		Объект.Бессрочный = Результат.Бессрочный;
		Объект.ПорядокПродления = Результат.ПорядокПродления;
		СрокДействияДокументИсточникИзменения = Результат.ДокументИсточникИзменения;
		СрокДействияКомментарий = Результат.Комментарий;
		СрокДействияСтрока = ДелопроизводствоКлиентСервер.СформироватьПредставлениеСрокаДействия(
			Объект, СрокДействияКомментарий);
		Модифицированность = Истина;
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
			ПолучитьОбзорДокумента();
		КонецЕсли;	
	КонецЕсли;	

КонецПроцедуры	

&НаСервере
Функция СрокДействияЗаполнен()
	
	Возврат ЗначениеЗаполнено(Объект.ДатаНачалаДействия)
	Или Объект.Бессрочный
	Или ЗначениеЗаполнено(Объект.ДатаОкончанияДействия)
	Или ЗначениеЗаполнено(Объект.ПорядокПродления);
	
КонецФункции

&НаСервере
Функция СрокДействияИзменен(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НачальныеЗначенияРеквизитов.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ТекущийОбъект.ДатаНачалаДействия <> НачальныеЗначенияРеквизитов[0].ДатаНачалаДействия
	Или ТекущийОбъект.Бессрочный <> НачальныеЗначенияРеквизитов[0].Бессрочный
	Или ТекущийОбъект.ДатаОкончанияДействия <> НачальныеЗначенияРеквизитов[0].ДатаОкончанияДействия
	Или ТекущийОбъект.ПорядокПродления <> НачальныеЗначенияРеквизитов[0].ПорядокПродления
	Или ПараметрыЗаписи.СрокДействияДокументИсточникИзменения <> НачальныеЗначенияРеквизитов[0].СрокДействияДокументИсточникИзменения
	Или ПараметрыЗаписи.СрокДействияКомментарий <> НачальныеЗначенияРеквизитов[0].СрокДействияКомментарий;
	
КонецФункции

// Устанавливает доступность команд для поля ФайлыДобавленные (видно при создании по шаблону)
&НаСервере
Процедура УстановитьДоступностьКомандФайлыДобавленные()
	
	СозданИзШаблона = Истина;
	РазрешеноРедактирование = Не (ЗапретитьРедактироватьФайлы И СозданИзШаблона);
	РазрешеноУдаление = Не (ЗапретитьУдалятьФайлы И СозданИзШаблона);
	
	Элементы.РедактироватьДобавленныйФайл.Доступность = РазрешеноРедактирование;
	Элементы.РедактироватьДобавленныйФайлКонтекст.Доступность = РазрешеноРедактирование;
	Элементы.ФайлыДобавленныеУдалить.Доступность = РазрешеноУдаление;
	Элементы.ФайлыДобавленныеКонтекстноеМенюУдалить.Доступность = РазрешеноУдаление;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНоменклатуруПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		ПеренестиНоменклатуруИзГруппы(Параметры.Группа);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиНоменклатуруИзГруппы(ГруппаНоменклатуры)
	
	Делопроизводство.ПеренестиНоменклатуруИзГруппы(ЭтаФорма, ГруппаНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеСуммы()
	
	Если ВестиУчетТоваровИУслуг И 
		Объект.Товары.Количество() > 0 И Объект.Сумма <> Объект.Товары.Итог("Сумма") Тогда 
		Элементы.Сумма1.Видимость = Истина;
		Элементы.Сумма.Видимость = Ложь;
	Иначе 
		Элементы.Сумма1.Видимость = Ложь;
		Элементы.Сумма.Видимость = Истина;
	КонецЕсли;
	
	Если Не ВестиУчетПоСтатьямДДС Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСтатей = СтатьиДвиженияДенежныхСредств.Количество();
	Если КоличествоСтатей = 1 Тогда
		СтатьиДвиженияДенежныхСредств[0].Сумма = Объект.Сумма;
	ИначеЕсли КоличествоСтатей > 1 Тогда
		ИтогСумма = 0;
		Для Каждого Строка из СтатьиДвиженияДенежныхСредств Цикл
			ИтогСумма = ИтогСумма + Строка.Сумма;
		КонецЦикла;
		Если ИтогСумма = Объект.Сумма Тогда
			Элементы.СтраницыСуммаВернаНеверна.ТекущаяСтраница =
				Элементы.СтраницаСуммаВерна;
		Иначе
			Элементы.СтраницыСуммаВернаНеверна.ТекущаяСтраница =
				Элементы.СтраницаСуммаНеверна;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с инструкциями

&НаСервере
Процедура ПолучитьИнструкции()
	
	РаботаСИнструкциями.ПолучитьИнструкции(ЭтаФорма, 90, 102);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Учет времени

&НаСервере
Процедура ОтключитьХронометражСервер()
	
	УчетВремени.ОтключитьХронометражСервер(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		Объект.Ссылка,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьХронометражСервер(ПараметрыОповещения)
	
	УчетВремени.ПереключитьХронометражСервер(
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		Объект.Ссылка,
		ВидыРабот,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения)
	
	УчетВремени.ДобавитьВОтчетИОбновитьФорму(
		ПараметрыОтчета, 
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ЭтаФорма.Команды.ПереключитьХронометраж,
		ЭтаФорма.Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаКонтрольНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КонтрольКлиент.ОбработкаКомандыКонтроль(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Статьи ДДС

&НаСервере
Процедура ПрочитатьСтатьиДДС(ДокументОснование = Неопределено)
	
	ВестиУчетПоСтатьямДДС = ?(ЗначениеЗаполнено(Объект.ВидДокумента),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ВестиУчетПоСтатьямДДС"), 
		Ложь);
	Элементы.ГруппаСуммаНДССтатьиДДС.Видимость = ВестиУчетПоСтатьямДДС;
	
	Если ВестиУчетПоСтатьямДДС Тогда
		
		Если НЕ Объект.Ссылка.Пустая() Тогда // прочтем статьи самого документа
			РегистрыСведений.СтатьиДвиженияДенежныхСредствДокументов.ПрочитатьСтатьиДокумента(
				Объект.Ссылка, СтатьиДвиженияДенежныхСредств);
			НеПроверятьЗаполнениеСтатейДДС = (СтатьиДвиженияДенежныхСредств.Количество() = 0);
		ИначеЕсли ЗначениеЗаполнено(ДокументОснование) Тогда // скопируем статьи основания
			РегистрыСведений.СтатьиДвиженияДенежныхСредствДокументов.ПрочитатьСтатьиДокумента(
				ДокументОснование, СтатьиДвиженияДенежныхСредств);
		КонецЕсли;
			
		СуммаНДС = 0;
		Для Каждого Строка из СтатьиДвиженияДенежныхСредств Цикл
			СуммаНДС = СуммаНДС + Строка.СуммаНДС;
		КонецЦикла;
			
	КонецЕсли;
	
	СформироватьПредставлениеСтатейДДС();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеСтатейДДС()
	
	Если Не ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		ВестиУчетПоСтатьямДДС = Ложь;
	ИначеЕсли ТипЗнч(ВидДокументаКэш) = Тип("Структура") Тогда
		ВестиУчетПоСтатьямДДС = ВидДокументаКэш.ВестиУчетПоСтатьямДДС;
	Иначе
		ВестиУчетПоСтатьямДДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект.ВидДокумента, "ВестиУчетПоСтатьямДДС");
	КонецЕсли;
	
	Если Не ВестиУчетПоСтатьямДДС Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСтатей = СтатьиДвиженияДенежныхСредств.Количество();
	
	Если КоличествоСтатей <= 1 Тогда
		
		Элементы.СтраницыСтатьиДДС.ТекущаяСтраница = Элементы.СтраницаСтатьяДДС;
		Элементы.ПредставлениеСтатейДДС.РедактированиеТекста = Истина;
		
		Если КоличествоСтатей = 1 Тогда
			ПредставлениеСтатейДДС = Строка(СтатьиДвиженияДенежныхСредств[0].СтатьяДвиженияДенежныхСредств);
		Иначе
			ПредставлениеСтатейДДС = "";
		КонецЕсли;
		
	Иначе // несколько статей
		
		Элементы.СтраницыСтатьиДДС.ТекущаяСтраница = Элементы.СтраницаСтатьиДДС;
		Элементы.ПредставлениеСтатейДДС.РедактированиеТекста = Ложь;
		
		// Соберем представление статей строкой в поле формы.
		Результат = "";
		Для каждого Строка из СтатьиДвиженияДенежныхСредств Цикл
			Если Результат <> "" Тогда
				Результат = Результат + "; ";
			КонецЕсли;
			Результат = Результат + Строка(Строка.СтатьяДвиженияДенежныхСредств);
		КонецЦикла;
		
		ПредставлениеСтатейДДС = Результат;
			
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ПрочитатьОбязательстваПоАвансовомуОтчету(ЗаявкаНаОплату)
	
	ЯвляетсяЗаявкойНаОплату = ?(ЗначениеЗаполнено(Объект.ВидДокумента),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ЯвляетсяЗаявкойНаОплату"), 
		Ложь);
	
	Если ЯвляетсяЗаявкойНаОплату Тогда
		
		Обязательства = РегистрыСведений.ОбязательстваПоАвансовымОтчетам.Получить(
			Новый Структура("ЗаявкаНаОплату", ЗаявкаНаОплату));
		АвансовыйОтчетПредоставлен = Обязательства.Предоставлен;
		АвансовыйОтчетТребуется = Обязательства.Требуется;
		СрокПредоставленияАвансовогоОтчета = Обязательства.СрокПредоставления;
	Иначе
		АвансовыйОтчетПредоставлен = Ложь;
		АвансовыйОтчетТребуется = Ложь;
		СрокПредоставленияАвансовогоОтчета = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Копирование файлов

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ЧислоФайлов)
	
	ЧислоФайлов = Элементы.Файлы.ВыделенныеСтроки.Количество();
	
	ОбщегоНазначенияДокументооборот.СкопироватьФайлыВБуферОбменаИзТаблицыФайлы(
		Файлы, Элементы.Файлы.ВыделенныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьСтрокиНаСервере(ЧислоФайлов)
	
	Если ОбщегоНазначения.ПустойБуферОбмена() Тогда
		Возврат;
	КонецЕсли;	
	
	ДанныеИзБуфераОбмена = ОбщегоНазначения.СтрокиИзБуфераОбмена();
	МассивФайлов = ДанныеИзБуфераОбмена.Данные;
	
	ЧислоФайлов = МассивФайлов.Количество();
	
	РаботаСФайламиВызовСервера.СкопироватьФайлВПриложенных(МассивФайлов, Объект.Ссылка);
	
	ЗаполнитьСписокФайлов();
	Модифицированность = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа со сторонами

&НаСервере
Процедура ДобавитьСторону(Сторона, КонтактноеЛицо = Неопределено, ИндексКартинки = 2)
	
	Если Не ЗначениеЗаполнено(Сторона) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбораСторона = Новый Структура("Сторона", Сторона);
	Если Объект.Стороны.НайтиСтроки(ПараметрыОтбораСторона).Количество() = 0 Тогда
		НоваяСтрока = Объект.Стороны.Добавить();
		НоваяСтрока.Сторона = Сторона;
		НоваяСтрока.Подписал = "";
		НоваяСтрока.ИндексКартинкиСтороны = ИндексКартинки;
		
		Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			НоваяСтрока.КонтактноеЛицо = КонтактноеЛицо;	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыТаблицыСтороны(СтрокаТаблицы)
	
	Если ТипЗнч(СтрокаТаблицы.Сторона) = Тип("СправочникСсылка.Контрагенты") Тогда
		СтрокаТаблицы.ИндексКартинкиСтороны = 1;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Сторона)
			И ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
				СтрокаТаблицы.Сторона, "ЮрФизЛицо") = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда 
			СтрокаТаблицы.КонтрагентЯвляетсяФизЛицом = Истина;
		Иначе 
			СтрокаТаблицы.КонтрагентЯвляетсяФизЛицом = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СтрокаТаблицы.Сторона) = Тип("СправочникСсылка.Организации") Тогда
		СтрокаТаблицы.ИндексКартинкиСтороны = 2;
		СтрокаТаблицы.КонтрагентЯвляетсяФизЛицом = Ложь;
	Иначе
		СтрокаТаблицы.ИндексКартинкиСтороны = 0;
		СтрокаТаблицы.КонтрагентЯвляетсяФизЛицом = Ложь;
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Если Не ЭтоМобильныйКлиент Тогда
		РаботаСПодписямиДокументов.УстановитьУсловноеОформлениеСторон(УсловноеОформление, Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с ЭДО

&НаСервере
Процедура ЗаполнитьПоляУтвердилПодписалНаСервере()
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ПодписьТекст = Делопроизводство.ПолучитьСтрокуПодписи(Объект.Ссылка, Объект.ВидДокумента,
			Новый Структура("ВариантДа, ВариантНет", НСтр("ru = 'Да'"), НСтр("ru = 'Нет'")));
		УтверждениеТекст = Делопроизводство.ПолучитьСтрокуУтверждения(Объект.Ссылка, Объект.ВидДокумента,
			Новый Структура("ВариантДа, ВариантНет", НСтр("ru = 'Да'"), НСтр("ru = 'Нет'")));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ТекущийДокументЭДО) Тогда
		ПоказатьЗначение(, ТекущийДокументЭДО);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыделенныйМассивНезанятыхФайлов()
	
	МассивФайлов = Новый Массив;
	
	ТекСписок = Неопределено;
	Если Элементы.Обзор.Видимость Тогда
		ТекСписок = Элементы.Файлы;
	Иначе	
		ТекСписок = Элементы.ФайлыСоздание;
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из ТекСписок.ВыделенныеСтроки Цикл
		ДанныеСтроки = ТекСписок.ДанныеСтроки(ЭлементСписка);
		
		Если ЗначениеЗаполнено(ДанныеСтроки.Редактирует) Тогда
			Продолжить;
		КонецЕсли;
		МассивФайлов.Добавить(ДанныеСтроки.Ссылка);
	КонецЦикла;
	
	Возврат МассивФайлов;
	
КонецФункции

&НаКлиенте
Функция ВыделенныйМассивЗанятыхФайлов()
	
	МассивФайлов = Новый Массив;
	
	ТекСписок = Неопределено;
	Если Элементы.Обзор.Видимость Тогда
		ТекСписок = Элементы.Файлы;
	Иначе	
		ТекСписок = Элементы.ФайлыСоздание;
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из ТекСписок.ВыделенныеСтроки Цикл
		ДанныеСтроки = ТекСписок.ДанныеСтроки(ЭлементСписка);
		
		Если Не ЗначениеЗаполнено(ДанныеСтроки.Редактирует) Тогда
			Продолжить;
		КонецЕсли;
		МассивФайлов.Добавить(ДанныеСтроки.Ссылка);
	КонецЦикла;
	
	Возврат МассивФайлов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры механизма свойств

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с мобильным сканером
&НаКлиенте
Процедура ДобавитьСканСМобильногоАвтоматически()

	//Если форма активна и блокировка РС КэшМобильныхСканов  уже стоит и есть скан
	Если ВводДоступен() И МобильныйСканерЗанят И МК_ВызовСервера.СканыЗагружены() Тогда
		
		Если ТипЗнч(ДоступныеПоля) = Тип("Структура") 
			И Не ДоступныеПоля.Свойство("СоздатьФайлОригинал") 
			И Не ДоступныеПоля.Свойство("СоздатьФайлОбычный") Тогда
			
			МК_ВызовСервера.УдалитьДанныеСканов();
			
			Текст = СтрШаблон(
				НСтр("ru = 'В текущем состоянии ""%1"" файлы добавлять нельзя.'"),
				СостояниеТекст);
			ПоказатьПредупреждение(, Текст);
			
			Возврат;
		КонецЕсли;
		
		//Пытаемся записать документ
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			ДокументЗаписан = Ложь;
			Попытка
				ПараметрыЗаписи = Новый Структура;
				ДокументЗаписан = Записать(ПараметрыЗаписи);
			Исключение
				МК_ВызовСервера.УдалитьДанныеСканов();
				ВызватьИсключение;
			КонецПопытки;
			
			Если Не ДокументЗаписан Тогда
				МК_ВызовСервера.УдалитьДанныеСканов();
				Текст = НСтр("ru = 'При добавлении файла не удалось записать документ.'");
				ПоказатьПредупреждение(, Текст);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		МК_Клиент.ОбработатьДанныеСканов(Объект.Ссылка);
		
	КонецЕсли;
	
	//Если форм активна, пытаемся устанавливить блокировку
	Если ВводДоступен() И Не МобильныйСканерЗанят
		И МК_ВызовСервера.ЗанятьСканер(УникальныйИдентификатор)Тогда
		
		МобильныйСканерЗанят = Истина;
	КонецЕсли;
	
	//Если форма уже не активна, то блокировку нужно снять
	Если Не ВводДоступен() И МобильныйСканерЗанят Тогда
		МК_ВызовСервера.ОсвободитьСканер(УникальныйИдентификатор);
		МобильныйСканерЗанят = Ложь;
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСканСМобильногоВручную()
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
		ТекущийЭлемент = Элементы.Файлы;
	Иначе	
		ТекущийЭлемент = Элементы.ФайлыСоздание;
	КонецЕсли;

	Если ТекущийЭлемент.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДоступныеПоля) = Тип("Структура") 
		И Не ДоступныеПоля.Свойство("СоздатьФайлОригинал") 
		И Не ДоступныеПоля.Свойство("СоздатьФайлОбычный") Тогда
		Текст = СтрШаблон(
			НСтр("ru = 'В текущем состоянии ""%1"" файлы добавлять нельзя.'"),
			СостояниеТекст);
		ПоказатьПредупреждение(, Текст);
		
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		ПараметрыЗаписи = Новый Структура;
		Если Не Записать(ПараметрыЗаписи) Тогда 
			Возврат;
		КонецЕсли;
				
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"), 
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	Если Не МобильныйСканерЗанят 
			И Не МК_ВызовСервера.ЗанятьСканер(УникальныйИдентификатор) Тогда
		ПоказатьПредупреждение(,НСтр("ru='Сканирование выполняется в другой карточке документа'"));
		Возврат;
	КонецЕсли;
	
	МобильныйСканерЗанят = Истина;
	ОтключитьОбработчикОжидания("ДобавитьСканСМобильногоАвтоматически");
	Описание = Новый ОписаниеОповещения("ПродолжитьРаботуСканера", ЭтотОбъект);
	МК_Клиент.ДобавитьСканыСМобильного(ЭтотОбъект, Описание);
	
КонецПроцедуры

// Продолжаем работу сканера в автоматическом режиме, если он был приостановлен запуском ручного
&НаКлиенте
Процедура ПродолжитьРаботуСканера(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТолькоЧтоСозданныйДокумент Тогда
		ПодключитьОбработчикОжидания("ДобавитьСканСМобильногоАвтоматически", 3, Ложь);
	Иначе
		МобильныйСканерЗанят = Ложь;
		МК_ВызовСервера.ОсвободитьСканер(УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлПослеЗаписиДокумента()
	
	Если ЗначениеЗаполнено(ТекущийФайлВСпискеДобавленныхДляОткрытия) Тогда
		
		ВыборФайла(ТекущийФайлВСпискеДобавленныхДляОткрытия);
		ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
		УстановитьДоступностьКоманд(ТекущиеДанные);
		
		УстановитьТекущуюСтрокуФайла(ТекущийФайлВСпискеДобавленныхДляОткрытия);
		ТекущийФайлВСпискеДобавленныхДляОткрытия = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Срок исполнения в рабочих днях

&НаСервере
Процедура УстановитьВидимостьИТекстНадписиРабочихДней()
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыШаблона = Новый Структура("ДлительностьИсполнения, СрокИсполненияУказанВРабочихДнях",
		0, Ложь);
	Если ЗначениеЗаполнено(Объект.Шаблон) Тогда
		РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Шаблон,
			"ДлительностьИсполнения, СрокИсполненияУказанВРабочихДнях");
	КонецЕсли;
	
	РеквизитыВида = Новый Структура("СрокИсполненияУказанВРабочихДнях, ИспользоватьСрокИсполнения",
		Ложь, Ложь);
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		Если ТипЗнч(ВидДокументаКэш) = Тип("Структура") Тогда
			РеквизитыВида = ВидДокументаКэш;
		Иначе
			РеквизитыВида = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидДокумента,
				"СрокИсполненияУказанВРабочихДнях");
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыВида.ИспользоватьСрокИсполнения
		И (ЗначениеЗаполнено(РеквизитыШаблона.ДлительностьИсполнения)
			И РеквизитыШаблона.СрокИсполненияУказанВРабочихДнях = Истина
			Или Не ЗначениеЗаполнено(РеквизитыШаблона.ДлительностьИсполнения)
			И РеквизитыВида.СрокИсполненияУказанВРабочихДнях = Истина) Тогда
		
		Элементы.НадписьРабочихДней.Видимость = Истина;
		УстановитьЗаголовокНадписиРабочихДней();
		
	Иначе
		
		Элементы.НадписьРабочихДней.Видимость = Ложь;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокНадписиРабочихДней()
	
	ДатаНачалаСрока = Объект.ДатаРегистрации;
	Если Не ЗначениеЗаполнено(ДатаНачалаСрока) Тогда
		ДатаНачалаСрока = Объект.ДатаСоздания;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СрокИсполнения) Тогда
		Элементы.НадписьРабочихДней.Заголовок = "";
		Возврат;
	КонецЕсли;
	
	ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
	
	Если Не ИспользоватьГрафикиРаботы Тогда
		Элементы.НадписьРабочихДней.Заголовок = "";
		Возврат;
	КонецЕсли;
	
	ОсновнойГрафик = ГрафикиРаботы.ПолучитьОсновнойГрафикРаботы();
	ОсновнойКалендарь = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновнойГрафик, "Календарь");
	
	КоличествоРабочихДней = КалендарныеГрафики.ПолучитьРазностьДатПоКалендарю(ОсновнойКалендарь,
		ДатаНачалаСрока,
		Объект.СрокИсполнения);
		
	СклонениеРабочихДней 
	= СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		НСтр("ru = ';%1 рабочий день;;%1 рабочего дня;%1 рабочих дней;%1 рабочего дня'"),
		КоличествоРабочихДней);
		
	Элементы.НадписьРабочихДней.Заголовок = СтрШаблон("(%1)", СклонениеРабочихДней);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНеобходимостьОтметкиВЖурналеПередачи()
	
	Если ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией Тогда
		Делопроизводство.УстановитьНеобходимостьОтметкиОВозвратеДокумента(ЭтотОбъект);
	ИначеЕсли ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией Тогда
		Делопроизводство.УстановитьНеобходимостьОтметкиОПередачеДокументаКонтрагенту(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСобытиеЗаписиЗадачи(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия <> "Запись_Задача" Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьЗадачиПоПриложению();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗадачиПоПриложению()
	
	ЗаголовокКомандыЗадачиПоПриложению = РаботаСЗадачами.ЗаголовокКомандыЗадачиПоПриложению(Объект.Ссылка);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЗадачиПоПриложению",
		"Заголовок",
		ЗаголовокКомандыЗадачиПоПриложению);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ЗадачиПоПриложению",
		"Видимость",
		ЗначениеЗаполнено(ЗаголовокКомандыЗадачиПоПриложению));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПослеВыбораСвязи(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыЗаписи = Новый Структура;
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьДелаетНедействующими()
	
	ЭтотВидМожетОтменять = Делопроизводство.ЭтотВидДокументаМожетОтменять(Объект.ВидДокумента);
	Если Не ВидДокументаКэш.УчитыватьНедействующиеДокументы Тогда
		ЭтотВидМожетОтменять = Ложь;
	КонецЕсли;	
	Элементы.ДелаетНедействующимиСтрока.Видимость = ЭтотВидМожетОтменять;
	
	Если Не ЗначениеЗаполнено(Объект.РегистрационныйНомер) Тогда
		Элементы.ГруппаОтменен.Доступность = Ложь;
	Иначе
		Элементы.ГруппаОтменен.Доступность = Истина;
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьДокументыСделавшиеНедействующим(ВОтветНаСтрока, ВидДокумента)
	
	ДанныеВыбора = Новый СписокЗначений;

	Если Лев(ВОтветНаСтрока, 1) = "№" Тогда
		ВОтветНаСтрока = СокрЛП(Прав(ВОтветНаСтрока, СтрДлина(ВОтветНаСтрока)-1));
	КонецЕсли;	

	Если Не ЗначениеЗаполнено(ВидДокумента) Или Не ЗначениеЗаполнено(ВОтветНаСтрока)Тогда
		Возврат ДанныеВыбора;
	КонецЕсли;
	
	ВидыОтменяющихДокументов = Делопроизводство.ПолучитьВидыОтменяющихДокументов(ВидДокумента);
	
	ОтборСтруктура = Новый Структура("НеДействует, ВидДокумента", Ложь, ВидыОтменяющихДокументов);
	
	// Заполнение "в ответ на". Поиск по номеру или наименованию
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументыПредприятия.Ссылка
	|ИЗ
	|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
	|ГДЕ
	|	(ДокументыПредприятия.РегистрационныйНомер ПОДОБНО &СтрокаПоиска
	|			ИЛИ ДокументыПредприятия.Заголовок ПОДОБНО &СтрокаПоиска)
	|	И ДокументыПредприятия.ВидДокумента В(&ВидДокумента)
	|	И ДокументыПредприятия.РегистрационныйНомер <> &РегистрационныйНомер";
	
	Запрос.Параметры.Вставить("СтрокаПоиска", ВОтветНаСтрока + "%");
	Запрос.Параметры.Вставить("ВидДокумента", ВидыОтменяющихДокументов);
	Запрос.Параметры.Вставить("РегистрационныйНомер", "");
	
	Если ВидыОтменяющихДокументов.Количество() = 0 Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ДокументыПредприятия.ВидДокумента В(&ВидДокумента)", "");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 

		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ДанныеВыбора.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
	КонецЕсли;	
	
	Возврат ДанныеВыбора;
	
КонецФункции

&НаСервере
Процедура ЗаписатьПорядокВложений()
	
	ПорядковыйУровень1 = 0;
	Для Каждого Строка Из Файлы.ПолучитьЭлементы() Цикл
		
		Если Не Строка.ЭтоРольФайла И Не Строка.ЭтоДокумент И Не Строка.ЭтоДокументЭДО Тогда
			РаботаСФайламиВызовСервера.ЗаписатьПорядокФайла(Строка.Ссылка, ПорядковыйУровень1);
			ПорядковыйУровень1 = ПорядковыйУровень1 + 1;
		Иначе
			
			ПорядковыйУровень2 = 0;
			
			Для Каждого Подстрока Из Строка.ПолучитьЭлементы() Цикл
				РаботаСФайламиВызовСервера.ЗаписатьПорядокФайла(Подстрока.Ссылка, ПорядковыйУровень2);
				ПорядковыйУровень2 = ПорядковыйУровень2 + 1;				
			КонецЦикла;	
			
		КонецЕсли;	
			
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция КонтрагентыДокумента()
	
	КонтрагентыВсе = Новый Массив();
	Для Каждого Строка Из Объект.Стороны Цикл
		Если ЗначениеЗаполнено(Строка.СТорона) 
				И РаботаСПодписямиДокументовКлиентСервер.ЭтоКонтрагент(Строка.Сторона) Тогда
			КонтрагентыВсе.Добавить(Строка.Сторона);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Строка Из Объект.Контрагенты Цикл
		Если ЗначениеЗаполнено(Строка.Контрагент) Тогда
			КонтрагентыВсе.Добавить(Строка.Контрагент);
		КонецЕсли;
	КонецЦикла;
	КонтрагентыВсе.Добавить(Объект.Контрагент);
	КонтрагентыУникальные = Новый Массив();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КонтрагентыУникальные, КонтрагентыВсе, Истина);
	
	Возврат КонтрагентыУникальные;
	
КонецФункции

// После ответа на вопрос о записи документа перед созданием исходящего ЭД.
// 
// Параметры:
//  Результат - КодВозвратаДиалога
//  		  - Неопределено
//  ДополнительныеПараметры - Структура
//  						- Неопределено
//
&НаКлиенте
Процедура ПослеОтветаОЗаписиДокументаПередСозданиемИсходящегоЭД(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = КодВозвратаДиалога.ОК Тогда
		Если Записать() Тогда
			СоздатьИсходящийДокументЭДО(Неопределено);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросОЗаписиДокументаПередСозданиемИсходящегоЭД() 
	
	ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
	ПараметрыВопроса.Заголовок = "";
	ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
	ПараметрыВопроса.Картинка = БиблиотекаКартинок.ДиалогВосклицание;

	НазваниеКоманды = "Создать исходящий документ ЭДО";
	ТекстВопроса = ТекстВопросаНезаписанныхДанных(НазваниеКоманды);
	СписокВариантовОтветов = Новый СписокЗначений;
	СписокВариантовОтветов.Добавить(КодВозвратаДиалога.ОК);
	СписокВариантовОтветов.Добавить(КодВозвратаДиалога.Отмена);

	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтветаОЗаписиДокументаПередСозданиемИсходящегоЭД", ЭтотОбъект,
		Неопределено);

	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(ОписаниеОповещения, ТекстВопроса, СписокВариантовОтветов,
		ПараметрыВопроса);
		
КонецПроцедуры

// После ответа о записи документа перед отправкой через "1С:Share"
// 
// Параметры:
//  Результат - КодВозвратаДиалога
//  		  - Неопределено
//  ДополнительныеПараметры - Структура
//  						- Неопределено
//
&НаКлиенте
Процедура ПослеОтветаОЗаписиДокументаПередОтправкойЧерез1СShare(Результат, ДополнительныеПараметры)
		Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = КодВозвратаДиалога.ОК Тогда
		Если Записать() Тогда
			ПоделитьсяДокументомShare(Неопределено);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросОЗаписиДокументаПередОтправкойЧерез1СShare() 
	
	ПараметрыВопроса = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
	ПараметрыВопроса.Заголовок = "";
	ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
	ПараметрыВопроса.Картинка = БиблиотекаКартинок.ДиалогВосклицание;

	НазваниеКоманды = "Поделиться документом";
	ТекстВопроса = ТекстВопросаНезаписанныхДанных(НазваниеКоманды);
	СписокВариантовОтветов = Новый СписокЗначений;
	СписокВариантовОтветов.Добавить(КодВозвратаДиалога.ОК);
	СписокВариантовОтветов.Добавить(КодВозвратаДиалога.Отмена);

	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОтветаОЗаписиДокументаПередОтправкойЧерез1СShare",
		ЭтотОбъект, Неопределено);

	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(ОписаниеОповещения, ТекстВопроса,
		СписокВариантовОтветов, ПараметрыВопроса);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоделитьсяДокументомShare()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Или Модифицированность Тогда
		ЗадатьВопросОЗаписиДокументаПередОтправкойЧерез1СShare();
		Возврат;
	КонецЕсли;
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("Источник", ЭтотОбъект);
	ИнтеграцияShareКлиент.ПоделитьсяДокументом(Объект.Ссылка, ПараметрыКоманды);
	
КонецПроцедуры

#Область СлужебныеДляМЭДО

&НаКлиенте
Процедура ОбновитьИсториюСостоянийМЭДОКлиент(ДопПараметры) Экспорт
	
	ОбновитьИсториюСостоянийМЭДОСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИсториюСостоянийМЭДОСервер()
	
	МЭДОПереопределяемый.ОбновитьИсториюСостоянийМЭДОВФорме(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗакладкуМЭДОВФормеСервер()
	
	МЭДОПереопределяемый.ЗаполнитьЗакладкуМЭДОВФорме(
		ЭтотОбъект, МЭДОДокументооборот.НаправлениеОтКэшаВидаДокумента(ВидДокументаКэш));
	// От заполнения полей могла измениться видимость:
	ВидимостьЭлементовМЭДОВФормеСервер();
	
	Если ЗначениеЗаполнено(ТекущееСостояниеМЭДО) И ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией Тогда
		// Должна была проставиться галочка Отправлен в "Корреспонденции":
		Документы.Корреспонденция.ЗаполнитьДанныеНаФормеДокумента(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидимостьЭлементовМЭДОВФормеСервер()
	
	МЭДОПереопределяемый.ВидимостьЭлементовМЭДОВФорме(
		ЭтотОбъект, МЭДОДокументооборот.НаправлениеОтКэшаВидаДокумента(ВидДокументаКэш));
	
КонецПроцедуры

&НаСервере
Функция ГотовностьКОтправкеМЭДО_Сервер(Отказ)
	
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НаправлениеМЭДО = МЭДОДокументооборот.НаправлениеОтКэшаВидаДокумента(ВидДокументаКэш);
	Если НаправлениеМЭДО = Перечисления.НаправленияСообщенийМЭДО.Исходящее И ГотовКОтправкеМЭДО Тогда
		Если Не МЭДОПереопределяемый.ДокументГотовКОтправке(
			ЭтотОбъект, НаправлениеМЭДО, Элементы.ГруппаМЭДО.Видимость, Истина) Тогда
			ГотовКОтправкеМЭДО = Ложь; // Принудительно снимаем флаг.
			Модифицированность = Истина;
			Отказ = Истина;
			УстановитьДоступностьРеквизитовРегистрации(Объект); // Возможно, нужно откатить назад видимость.
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ПолучитьФайлыПодходящиеДляМЭДО()
	
	СписокВыбора = Новый СписокЗначений();
	
	Для Каждого Стр Из Файлы.ПолучитьЭлементы() Цикл
		Если Не Стр.ЭтоРольФайла Тогда
			Если СтрНайти(НРег(Стр.Расширение), "pdf") > 0 И Не Стр.Оригинал Тогда
				СписокВыбора.Добавить(Стр.Ссылка, Стр.Наименование);
			КонецЕсли;
		Иначе
			Для Каждого Подстрока Из Стр.ПолучитьЭлементы() Цикл
				Если СтрНайти(НРег(Подстрока.Расширение), "pdf") > 0 И Не Подстрока.Оригинал Тогда
					СписокВыбора.Добавить(Подстрока.Ссылка, Подстрока.Наименование);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_НагрузочноеТестирование
	// Функции-обертки для программного вызова команд и обработчиков, как-будто они вызываются интерактивно.
	
	&НаКлиенте
	Функция НТ_ДействияЗаполнить() Экспорт
		
		ДействияЗаполнить(Неопределено); //@skip-check invocation-form-event-handler
		Возврат Истина;
		
	КонецФункции
	
	&НаКлиенте
	Функция НТ_ДействияОтправить() Экспорт
		
		ДействияОтправитьВыполнить();
		Возврат Истина;
		
	КонецФункции
	
	&НаКлиенте
	Функция НТ_Записать() Экспорт
		
		ПараметрыЗаписи = Новый Структура();
		Если Записать(ПараметрыЗаписи) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции
	
	&НаКлиенте
	Функция НТ_Зарегистрировать() Экспорт
		
		Если ЗарегистрироватьДокумент() Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОсновные;
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецФункции
	
	#Область ВызовыОбработчиковПолей
		
		&НаКлиенте
		Функция НТ_АдресатКорреспонденцииПриИзменении() Экспорт
			
			АдресатКорреспонденцииПриИзменении(Неопределено); //@skip-check invocation-form-event-handler
			Возврат Истина;
			
		КонецФункции
		
		&НаКлиенте
		Функция НТ_ВидИТематикаТекстПриИзменении() Экспорт
			
			ВидИТематикаТекстПриИзменении(Неопределено); //@skip-check invocation-form-event-handler
			Возврат Истина;
			
		КонецФункции
		
		&НаКлиенте
		Функция НТ_ВидОбращенияПриИзменении() Экспорт
			
			ВидОбращенияПриИзменении(Неопределено); //@skip-check invocation-form-event-handler
			Возврат Истина;
			
		КонецФункции
		
		&НаКлиенте
		Функция НТ_КонтрагентПриИзменении() Экспорт
			
			ОбработчикИзмененияКонтрагента(); //@skip-check invocation-form-event-handler
			Возврат Истина;
			
		КонецФункции
		
		&НаКлиенте
		Функция НТ_СформироватьПредставлениеСтатейДДС() Экспорт
		
			СформироватьПредставлениеСтатейДДС();
			Возврат Истина;
		
		КонецФункции
		
	#КонецОбласти
	
#КонецОбласти

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
    ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
    ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
    ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт    
    ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

// ИнтернетПоддержкаПользователей.СПАРКРиски

// Обновляет отображение индексов СПАРК Риски.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура Подключаемый_ОбновитьОтображениеИндексыСПАРК()

	ОбновитьОтображениеИндексыСПАРК();

КонецПроцедуры

// Обновляет отображение индексов СПАРК Риски.
// 
// Параметры:
//  КонтрагентСПАРК - СправочникСсылка.Контрагенты - Контрагент
//
&НаКлиенте
Процедура ОбновитьОтображениеИндексыСПАРК(КонтрагентСПАРК = Неопределено)

	Если КонтрагентСПАРК = Неопределено Тогда 
		КонтрагентСПАРК = Объект.Контрагент;
	КонецЕсли;
	
	ПараметрыОтображения = Новый Структура("ВариантОтображения", "Однострочный");
	СПАРКРискиКлиент.ОтобразитьИндексыСПАРК(
		ИндексыСПАРКРиски,
		КонтрагентСПАРК,
		КонтрагентСПАРК, // Искать по ссылке
		ОбщегоНазначенияДокументооборотКлиентСервер.ВидКонтрагентаСПАРК(КонтрагентСПАРК),
		ЭтотОбъект,
		ПараметрыОтображения,
		Истина);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИндексыСПАРКРискиСтрока2КартинкаКрНажатие(Элемент)
	
	ПоказатьИндексыКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИндексыКонтрагента()
	
	СПАРКРискиКлиент.ПоказатьЗначенияИндексовКонтрагента(ИндексыСПАРКРиски, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИндексыСПАРКРискиСтрока2КартинкаЗелНажатие(Элемент)
	
	ПоказатьИндексыКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИндексыСПАРКРискиСтрока2КартинкаОранжНажатие(Элемент)
	
	ПоказатьИндексыКонтрагента();
	
КонецПроцедуры

// Конец ИнтернетПоддержкаПользователей.СПАРКРиски

&НаКлиенте
Процедура ПометитьКакПрочтенное(Команда)
	
	ДелопроизводствоКлиент.ПометитьКакПрочтенное(ЭтаФорма, Объект.Ссылка, КлючЗаписи);
	
КонецПроцедуры

&НаСервере
Функция ПометитьКакПрочтенноеСервер() Экспорт
	
	Возврат Делопроизводство.ПометитьКакПрочтенное(ЭтаФорма, Объект.Ссылка);
	
КонецФункции

&НаКлиенте
Функция ПолучитьЗахваченныеФайлы()
	
	МассивЗахваченныхФайлов = Новый Массив;
	
	ДелопроизводствоКлиент.ДобавитьЗанятыеФайлыСамойКарточки(ЭтаФорма, МассивЗахваченныхФайлов);
	
	Возврат МассивЗахваченныхФайлов;
	
КонецФункции

#Область РегламентированныйУчетОбращенийСлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьКодВопросаВТаблице()
	
	ТекущиеДанные = Элементы.Вопросы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.КодВопроса = РаботаСОбращениямиВызовСервера.СформироватьКодВопроса(
		ТекущиеДанные.Раздел, ТекущиеДанные.Тематика, ТекущиеДанные.Тема, ТекущиеДанные.Вопрос);
	
КонецПроцедуры

&НаСервере
Процедура ИзменилсяКодВопроса()
	
	РаботаСОбращениями.ОбновитьКодВопроса(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеВыгрузкиССТУ_Сервер(ПеречитатьФлагГотовности)
	
	РаботаСОбращениями.УстановитьВидимостьПолейУчетаОбращенийГраждан(ЭтотОбъект, ПеречитатьФлагГотовности);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВыгрузкиССТУ(ДопПараметры) Экспорт
	
	// Могло измениться состояние документа "Выгрузка в ССТУ", а также флажок готовности может снимется:
	ОбновитьСостояниеВыгрузкиССТУ_Сервер(Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКодовВопросов()
	
	РаботаСОбращениями.УстановитьВидимостьКодовВопросов(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииДействий

&НаСервере
Процедура ПрочитатьДействия(ПерезаполнитьПодписантов = Ложь) Экспорт
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		ВерсияДанных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "ВерсияДанных");
		Если ВерсияДанных <> Объект.ВерсияДанных Тогда
			Если Модифицированность Тогда
				ВызватьИсключение  НСтр("ru = 'Документ был изменен другим сотрудником или процессом. 
					|Необходимо открыть документ заново.'") ;
			Иначе
				Прочитать();
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьПараметрыВидаОбъекта();
		ПараметрыОбъектаОбработки = ДействияКлиентСервер.ПараметрыОбъектаОбработки(
			Объект.Ссылка,
			Объект);
		ДействияСервер.ПрочитатьДействияВФормуПредмета(
			ЭтотОбъект,
			ПараметрыОбъектаОбработки,
			ПараметрыВидаОбъекта);
		ОбработкаПредставление = Формат(КоличествоДействий, "");
		
		ОбновитьОбластьЗадач();
		
		ДействияСервер.ЗаполнитьРеквизитыПодписанияУтвержденияВФорме(
			ЭтотОбъект,
			ПараметрыВидаОбъекта,
			ПерезаполнитьПодписантов);
			
		Если Не НеПоказыватьДанныеОбработки Тогда
			ПолучитьОбзорДокумента();
		КонецЕсли;
		
		УстановитьДоступностьПоСостоянию();
		
		УстановитьВидимостьВыполненияВнеПрограммы();
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОбластьЗадач()
	
	Если Не Объект.Ссылка.Пустая()
			И Не МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(Объект.ИсточникДанных) Тогда
		
		ПользовательИЕгоСотрудники = 
			СотрудникиВызовСервера.ПользовательИЕгоСотрудники(ПользователиКлиентСервер.ТекущийПользователь(), Ложь);
			
		РолиТекущегоПользователя = ПараметрыСеанса.РолиТекущегоПользователя;
		ЗадачаНайдена = Ложь;
		
		Для Каждого СтрокаДействия Из Действия.ПолучитьЭлементы() Цикл
			ПроверитьЧтоЕстьЗадачаМне(СтрокаДействия, ПользовательИЕгоСотрудники, РолиТекущегоПользователя, ЗадачаНайдена);
		КонецЦикла;	
		
		Если Не ЗадачаНайдена Тогда
			Элементы.ГруппаЗадач.Видимость = Ложь;
			Возврат;
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЧтоЕстьЗадачаМне(СтрокаДействия, ПользовательИЕгоСотрудники, РолиТекущегоПользователя,
	ЗадачаНайдена)
	
	Если ЗадачаНайдена Тогда
		Возврат;
	КонецЕсли;	            
	
	ЭтоМояЗадача = Ложь;
	Если (ПользовательИЕгоСотрудники.Найти(СтрокаДействия.Участник) <> Неопределено
		Или РолиТекущегоПользователя.Найти(СтрокаДействия.Участник) <> Неопределено) Тогда
		
		ЭтоМояЗадача = Истина;
		
	Иначе	

		Если ПользовательЯвляетсяЗаместителемИлиПомощником И СтрокаДействия.Состояние = Перечисления.СостоянияВыполненияДействий.Выполняется Тогда
			ЭтоМояЗадача = ДействияВызовСервера.ПоЗадачеЕстьЗамещение(СтрокаДействия.Действие, СтрокаДействия.Участник, ПользовательИЕгоСотрудники);
		КонецЕсли;	
		
	КонецЕсли;	
	
	Если ЭтоМояЗадача Тогда
		
		Если СтрокаДействия.ЭтоДействие 
			И СтрокаДействия.Состояние <> Перечисления.СостоянияВыполненияДействий.Выполняется
			И СтрокаДействия.Состояние <> Перечисления.СостоянияВыполненияДействий.Завершено Тогда
			Возврат;
		КонецЕсли;	

		Если СтрокаДействия.ЭтоУчастник
			И СтрокаДействия.Состояние <> Перечисления.СостоянияВыполненияДействий.Выполняется Тогда
			Возврат;
		КонецЕсли;	
		
		ДанныеВозврата = ДействияСервер.ДействиеЗадачиИСостояниеУчастникаДействияОбработки(
			СтрокаДействия.Действие,
			СтрокаДействия.Идентификатор);
		Если Не ЗначениеЗаполнено(ДанныеВозврата.ДействиеЗадачи) Или ДанныеВозврата.Активна = Ложь Тогда
			Возврат;
		КонецЕсли;
		
		Элементы.ГруппаЗадач.Видимость = Истина;
		УстановитьТекстГруппаЗадач(СтрокаДействия);
		ЗадачаНайдена = Истина;
		Возврат;
		
	КонецЕсли;
	
	Для Каждого СтрокаДействияТек Из СтрокаДействия.ПолучитьЭлементы() Цикл
		ПроверитьЧтоЕстьЗадачаМне(СтрокаДействияТек, ПользовательИЕгоСотрудники, РолиТекущегоПользователя, ЗадачаНайдена);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстГруппаЗадач(СтрокаДействия)
	
	Элементы.ПерейтиКВыполнениюЗадачи.Видимость = Истина;
	
	ЭтоОбработатьРезультат 
		= ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(СтрокаДействия.Функция);
	
	Если ДействияКлиентСервер.ЭтоДействиеИсполнения(СтрокаДействия.Действие) Тогда
		
		Если Не ЭтоОбработатьРезультат Тогда
			Если СтрокаДействия.Функция = Перечисления.ФункцииУчастниковИсполнения.Рассматривающий Тогда
				Элементы.ДекорацияЗадач.Заголовок = НСтр("ru = 'Документ находится у Вас на рассмотрении'");
				Элементы.ПерейтиКВыполнениюЗадачи.Заголовок = НСтр("ru = 'Перейти к рассмотрению'");
			Иначе
				Элементы.ДекорацияЗадач.Заголовок = НСтр("ru = 'Документ находится у Вас на исполнении'");
				Элементы.ПерейтиКВыполнениюЗадачи.Заголовок = НСтр("ru = 'Перейти к исполнению'");
			КонецЕсли;
		Иначе
			Элементы.ДекорацияЗадач.Заголовок = НСтр("ru = 'Документ у Вас на обработке результата исполнения'");
			Элементы.ПерейтиКВыполнениюЗадачи.Заголовок = НСтр("ru = 'Перейти к обработке результата'");
		КонецЕсли;
		
	ИначеЕсли ДействияКлиентСервер.ЭтоДействиеОзнакомления(СтрокаДействия.Действие) Тогда
		
		Элементы.ДекорацияЗадач.Заголовок = НСтр("ru = 'Документ находится у Вас на ознакомлении'");
		Элементы.ПерейтиКВыполнениюЗадачи.Заголовок = НСтр("ru = 'Перейти к ознакомлению'");
		
	ИначеЕсли ДействияКлиентСервер.ЭтоДействиеПодписания(СтрокаДействия.Действие) Тогда
		
		Если Не ЭтоОбработатьРезультат Тогда
			Если СтрокаДействия.Функция = Перечисления.ФункцииУчастниковПодписания.ОбеспечивающийПодписание Тогда

				Элементы.ДекорацияЗадач.Заголовок = НСтр("ru = 'Документ находится у вас на исполнении'");
				Элементы.ПерейтиКВыполнениюЗадачи.Заголовок = НСтр("ru = 'Перейти к исполнению'");
					
			Иначе		
			
				Элементы.ДекорацияЗадач.Заголовок = НСтр("ru = 'Документ находится у Вас на подписании'");
				Элементы.ПерейтиКВыполнениюЗадачи.Заголовок = НСтр("ru = 'Перейти к подписанию'");
			КонецЕсли;
		Иначе
			Элементы.ДекорацияЗадач.Заголовок = НСтр("ru = 'Документ у Вас на обработке результата подписания'");
			Элементы.ПерейтиКВыполнениюЗадачи.Заголовок = НСтр("ru = 'Перейти к обработке результата'");
		КонецЕсли;
		
	ИначеЕсли ДействияКлиентСервер.ЭтоДействиеРегистрации(СтрокаДействия.Действие) Тогда
		
		Если Не ЭтоОбработатьРезультат Тогда
			Элементы.ДекорацияЗадач.Заголовок = НСтр("ru = 'Документ находится у Вас на регистрации'");
			Элементы.ПерейтиКВыполнениюЗадачи.Заголовок = НСтр("ru = 'Перейти к регистрации'");
		Иначе
			Элементы.ДекорацияЗадач.Заголовок = НСтр("ru = 'Документ у Вас на обработке результата регистрации'");
			Элементы.ПерейтиКВыполнениюЗадачи.Заголовок = НСтр("ru = 'Перейти к обработке результата'");
		КонецЕсли;
		
	ИначеЕсли ДействияКлиентСервер.ЭтоДействиеСогласования(СтрокаДействия.Действие) Тогда
		
		Если Не ЭтоОбработатьРезультат Тогда
			Элементы.ДекорацияЗадач.Заголовок = НСтр("ru = 'Документ у Вас на согласовании'");
			Элементы.ПерейтиКВыполнениюЗадачи.Заголовок = НСтр("ru = 'Перейти к согласованию'");
		Иначе
			Элементы.ДекорацияЗадач.Заголовок = НСтр("ru = 'Документ у Вас на обработке результата согласования'");
			Элементы.ПерейтиКВыполнениюЗадачи.Заголовок = НСтр("ru = 'Перейти к обработке результата'");
		КонецЕсли;
		
	ИначеЕсли ДействияКлиентСервер.ЭтоДействиеУтверждения(СтрокаДействия.Действие) Тогда
		
		Если Не ЭтоОбработатьРезультат Тогда
			Элементы.ДекорацияЗадач.Заголовок = НСтр("ru = 'Документ находится у Вас на утверждении'");
			Элементы.ПерейтиКВыполнениюЗадачи.Заголовок = НСтр("ru = 'Перейти к утверждению'");
		Иначе
			Элементы.ДекорацияЗадач.Заголовок = НСтр("ru = 'Документ у Вас на обработке результата утверждения'");
			Элементы.ПерейтиКВыполнениюЗадачи.Заголовок = НСтр("ru = 'Перейти к обработке результата'");
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПометитьДействияНаУдаление(МассивДействий)
	
	Если МассивДействий.Количество() > 0 Тогда 
		ОбновитьПараметрыВидаОбъекта();
		ПараметрыОбъектаОбработки = ДействияКлиентСервер.ПараметрыОбъектаОбработки(Объект.Ссылка, Объект);
		ДействияСервер.ПометитьНаУдалениеИоОбновитьОтображение(
			ЭтотОбъект,
			МассивДействий,
			Истина,
			ПараметрыОбъектаОбработки,
			ПараметрыВидаОбъекта);
	Иначе 
		ПрочитатьДействия();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКнопкуОтправить() Экспорт
	
	Если Не Модифицированность Тогда
		Прочитать();
	КонецЕсли;
	
	// перечитать действия
	ПрочитатьДействия();
	ДействияКлиент.РазвернутьДействия(Элементы.Действия, Действия);
	УстановитьДоступностьПолей();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОбработка() Экспорт
	
	// перечитать действия
	ПрочитатьДействия();
	ДействияКлиент.РазвернутьДействия(Элементы.Действия, Действия);
	
КонецПроцедуры

&НаКлиенте
Функция НайтиСтрокуДействияИОткрытьФорму(СтрокаДействия)
	
	Если СтрокаДействия.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.Выполняется") Тогда 
		
		ЭтоМояЗадача = Ложь;
		ВсеСотрудникиТекущегоПользователя = СотрудникиВызовСервера.СотрудникиПользователя(, Ложь);
		Если (ВсеСотрудникиТекущегоПользователя.Найти(СтрокаДействия.Участник) <> Неопределено
			Или РолиТекущегоПользователя.Найти(СтрокаДействия.Участник) <> Неопределено) Тогда
			
			ЭтоМояЗадача = Истина;
			
		Иначе	

			Если ПользовательЯвляетсяЗаместителемИлиПомощником Тогда
				ЭтоМояЗадача = ДействияВызовСервера.ПоЗадачеЕстьЗамещение(СтрокаДействия.Действие, СтрокаДействия.Участник, СотрудникиТекущегоПользователя);
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если ЭтоМояЗадача Тогда
		
			Если ДействияКлиентСервер.ЭтоДействиеОзнакомления(СтрокаДействия.Действие) И СтрокаДействия.ЭтоУчастник	Тогда
				
				ДействиеЗадачи = ДействияВызовСервера.ДействиеЗадачиДляСтрокиОзнакомления(
					СтрокаДействия.Действие, СтрокаДействия.Идентификатор);
				Если ЗначениеЗаполнено(ДействиеЗадачи) Тогда
					ПоказатьЗначение(, ДействиеЗадачи);	
					Возврат Истина;
				КонецЕсли;
				
			КонецЕсли;	
			
			Если РаботаСПроцессамиПоОбработкамОбъектовКлиентПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
				
				// откроем карточку задачи
				РаботаСПроцессамиПоДействиямСобытияКлиент.ОбработатьДвойнойКликНаУчастникаДействия(
					ЭтаФорма, СтрокаДействия);
				Возврат Истина;	
					
			Иначе	
				
				// перейдем на закладку Обработка
				Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОбработка;
				ПриПереключенииНаСтраницуОбработка();
				Возврат Истина;
				
			КонецЕсли;	
				
			Возврат Ложь;  
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаДействияТек Из СтрокаДействия.ПолучитьЭлементы() Цикл
		Если НайтиСтрокуДействияИОткрытьФорму(СтрокаДействияТек) Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Ложь; // не открыли задачу
	
КонецФункции

&НаКлиенте
Процедура КраткиеСведенияОСвязяхНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДелопроизводствоКлиент.ОткрытьФормуСвязи(Объект.Ссылка);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКомандыПечатиКонверта()

	Если Элементы.Найти("ПодменюПечатьОбычное_Конверт") <> Неопределено Тогда
		
		Если ТипЗнч(ВидДокументаКэш) = Тип("Структура") Тогда
			ЭтоИсходящаяКорреспонденция = ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией;
		Иначе
			ЭтоИсходящаяКорреспонденция = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Объект.ВидДокумента, "ЯвляетсяИсходящейКорреспонденцией");
		КонецЕсли;
		Элементы["ПодменюПечатьОбычное_Конверт"].Видимость = ЭтоИсходящаяКорреспонденция = Истина;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФайлВизуализации(Документ, Файл, УникальныйИдентификатор)
	
	ФайлВизуализация = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьСлужебныйФайл(
		Документ, Файл, Перечисления.ОтношенияСлужебныхФайлов.ВизуализацияЭП);
		
	Возврат ФайлВизуализация;	
	
КонецФункции	

&НаКлиенте
Процедура ОбновитьПревьюФайлаПослеРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	ТекущийФайл = ПараметрыВыполнения.ФайлСсылка;
	ТекущаяВерсияРазмер = ПараметрыВыполнения.ТекущаяВерсияРазмер;
	Расширение = ПараметрыВыполнения.Расширение;
	
	Если ИспользоватьПредпросмотрФайлов Тогда
		
		ДокументPDF = Неопределено;
		
		ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();   
		ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
		ПараметрыHTMLПредставление.Расширение = Расширение;
		ПараметрыHTMLПредставление.Размер = ТекущаяВерсияРазмер;
		ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
		ПараметрыHTMLПредставление.ПредпросмотрОфисныхФайлов = ПредпросмотрОфисныхФайлов;
		
		ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
			ТекущийФайл, 
			ПараметрыHTMLПредставление,
			ДокументPDF);
		
		ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ПредставлениеHTML, ТаймлистАвтопротоколHTML,
			РаспознанныйТекстHTML);
		
		Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
		МасштабироватьPDFИКартинки = ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки;
		
		УстановитьВидимостьКомандМасштаба(ПараметрыВыполнения.Расширение);
		
		Если ДокументPDF = Неопределено Тогда
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
		Иначе
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
			ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
			Элементы.ДокументPdfПоле.НомерТекущейСтраницы = 1;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредпросмотр(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущийФайл = ТекущиеДанные.Ссылка;
	РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	
	Если ИспользоватьПредпросмотрФайлов
		И Не ТекущиеДанные.ЭтоДокумент
		И Не ТекущиеДанные.ЭтоРольФайла
		И Не РедактируетТекущийПользователь Тогда
		
		ДокументPDF = Неопределено;
		
		ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();  
		ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
		ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.Расширение;
		ПараметрыHTMLПредставление.Размер = ТекущиеДанные.ТекущаяВерсияРазмер;
		ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
		ПараметрыHTMLПредставление.ПредпросмотрОфисныхФайлов = ПредпросмотрОфисныхФайлов;
		ПараметрыHTMLПредставление.ОбновитьПредставление = Истина;
		
		ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
			ТекущийФайл, 
			ПараметрыHTMLПредставление,
			ДокументPDF);
		
		ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ПредставлениеHTML, ТаймлистАвтопротоколHTML,
			РаспознанныйТекстHTML);
		
		Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
		МасштабироватьPDFИКартинки = ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки;
		
		УстановитьВидимостьКомандМасштаба(ТекущиеДанные.Расширение);

		НомерПорции = 1;
		ВсегоПорцийПредпросмотра = ПараметрыHTMLПредставление.ВсегоПорцийПредпросмотра;
		ОбновитьКнопкиДинамическогоСпискаКлиент();
		
		Если ДокументPDF = Неопределено Тогда
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
		Иначе
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
			ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
			Элементы.ДокументPdfПоле.НомерТекущейСтраницы = 1;
		КонецЕсли;
		
		УстановитьВидимостьСтраницОбзораФайла();
		
	Иначе
		ПолучитьОбзорИСтрокуСостоянийДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДействияПриПереключенииСтраниц()

	Состояние(НСтр("ru = 'Выполняется запись документа...'"));
	
	ПараметрыЗаписи = Новый Структура;
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДействияСостояниеИДоступностьПолей()
	
	ПрочитатьДействия(Истина);
	СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(
		Объект.Ссылка);
	УстановитьДоступностьПолей();
	ОбзорДокумента.ВывестиСтрокуСостояний(ЭтотОбъект);
	ДействияСервер.УстановитьВидимостьКомандВыполненияВнеПрограммы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьВажность(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	Элементы.ГруппаВажность.Видимость = Форма.ВидДокументаКэш.ИспользоватьВажность;
	
	Если Объект.Важность = ПредопределенноеЗначение("Перечисление.ВариантыВажностиОбъектов.Высокая") Тогда
		Элементы.ГруппаВажность.Картинка = БиблиотекаКартинок.ВажностьВысокая;
		Элементы.ГруппаВажность.Подсказка = НСтр("ru = 'Высокая важность'");
	ИначеЕсли Объект.Важность = ПредопределенноеЗначение("Перечисление.ВариантыВажностиОбъектов.Низкая") Тогда
		Элементы.ГруппаВажность.Картинка = БиблиотекаКартинок.ВажностьНизкая;
		Элементы.ГруппаВажность.Подсказка = НСтр("ru = 'Низкая важность'");
	Иначе
		Элементы.ГруппаВажность.Картинка = БиблиотекаКартинок.ВажностьНеЗадана;
		Элементы.ГруппаВажность.Подсказка = НСтр("ru = 'Нормальная важность'");
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыВидаОбъекта()
	
	ПараметрыВидаОбъекта = ДействияКлиентСервер.НовыйПараметрыВидаОбъекта();
	ПараметрыВидаОбъекта.ВидОбъекта = Объект.ВидДокумента;
	ПараметрыВидаОбъекта.ОбработкаЗадана = ВидДокументаКэш.ОбработкаЗадана;
	ПараметрыВидаОбъекта.НастройкиДействийЗаданы = ВидДокументаКэш.НастройкиДействийЗаданы;
	ПараметрыВидаОбъекта.ВестиУчетСторон = ВидДокументаКэш.ВестиУчетСторон;
	ПараметрыВидаОбъекта.ВестиУчетПоТематикам = ВидДокументаКэш.ВестиУчетПоТематикам;
	ПараметрыВидаОбъекта.РолиФайлов = ВидДокументаКэш.РолиФайлов;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДействиеВПредмете()
	 
	ПрочитатьДействия(Истина);
	СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(Объект.Ссылка);
	ПолучитьОбзорИСтрокуСостоянийДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОбзорИСтрокуСостоянийДокумента()
	
	ПолучитьОбзорДокумента();
	ОбзорДокумента.ВывестиСтрокуСостояний(ЭтотОбъект);

КонецПроцедуры

// Предварительный просмотр на закладке "Связи".

&НаКлиенте
Процедура УстановитьВидимостьПредварительногоПросмотраВСвязях()
	
	Элементы.ДеревоСвязейПредварительныйПросмотр.Пометка = ИспользоватьПредварительныйПросмотрВСвязях;
	Элементы.ГруппаПредставлениеHTMLВСвязях.Видимость = ИспользоватьПредварительныйПросмотрВСвязях;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПревьюСвязи()
	
	ПоказатьОбзорТекущейСвязи();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОбзорТекущейСвязи()
	
	ТекущиеДанные = Элементы.ДеревоСвязей.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Элементы.ГруппаПредпросмотрУрезанСвязи.Видимость = Ложь;
		Возврат;
	КонецЕсли;

	ТекущийФайл = ТекущиеДанные.Файл;
	ТекущийДокумент = ТекущиеДанные.СвязанныйОбъект;

	Если ЗначениеЗаполнено(ТекущийФайл) Тогда
		
		ДокументPDF = Неопределено;
		
		ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла(); 
		ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
		ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.РасширениеФайла;
		ПараметрыHTMLПредставление.Размер = ТекущиеДанные.Размер;
		ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
		ПараметрыHTMLПредставление.ПредпросмотрОфисныхФайлов = ПредпросмотрОфисныхФайлов;
		
		ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
			ТекущийФайл,
			ПараметрыHTMLПредставление,
			ДокументPDF);
		
		ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ПредставлениеHTMLСвязи);
		
		Элементы.ГруппаПредпросмотрУрезанСвязи.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
		МасштабироватьPDFИКартинки = ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки;
		
		УстановитьВидимостьКомандМасштаба(ТекущиеДанные.РасширениеФайла);
		
	ИначеЕсли ЗначениеЗаполнено(ТекущийДокумент) И ДелопроизводствоКлиентСервер.ЭтоДокумент(ТекущийДокумент) Тогда
		ДанныеМиникарточки = ОбзорСпискаДокументов.ПолучитьДанныеМиникарточки(ТекущийДокумент);
		ПредставлениеHTMLСвязи = ДанныеМиникарточки.Обзор;
		Элементы.ГруппаПредпросмотрУрезанСвязи.Видимость = Ложь;
	Иначе
		ПредставлениеHTMLСвязи = "<html><body></body></html>";
		Элементы.ГруппаПредпросмотрУрезанСвязи.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_МобильныйКлиент

&НаСервере
Процедура МК_НастроитьЭлементыФормы()

	МК.УстановитьОбщиеСвойстваФормы(ЭтотОбъект);
	МК_ЭлементыСтиля = МК_ПовтИсп.ЭлементыСтиля();
	
	СоставКоманднойПанелиНаМобильномУстройстве.Добавить(Элементы.ГруппаОсновнаяКомПанель);
	СоставКоманднойПанелиНаМобильномУстройстве.Добавить(Элементы.ГруппаВсеДействия);
	МК.ПреобразоватьКнопкуВАкцентную(ЭтотОбъект, МК_ЭлементыСтиля, Элементы.ФормаЗаписатьИЗакрыть);
	Элементы.ФормаЗаписать.Отображение = ОтображениеКнопки.Картинка;
	Элементы.ФормаЗаписать.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели;
	Элементы.ПодменюПечать.Отображение = ОтображениеКнопки.Картинка;
	
	// Настройка отображения декорации
	Элементы.ДекорацияЗадач.Шрифт = ШрифтыСтиля.ОбычныйШрифтТекста;
	Элементы.ПерейтиКВыполнениюЗадачи.Шрифт = ШрифтыСтиля.ОбычныйШрифтТекста;
	
	// Вставка из буфера через компоненту - не поддерживается в моб. клиенте
	Элементы.ВставитьКартинкуИзБуфера.Видимость = Ложь;
	
	Элементы.ГруппаИнструкции.Видимость = Ложь;
	ПоказыватьИнструкции = Ложь;

	// Перенос команд формы документа в Группу "Все действия"
	Элементы.Переместить(Элементы.Зарегистрировать, Элементы.ГруппаВсеДействия);
	Элементы.Переместить(Элементы.ФормаЗаписать, Элементы.ГруппаВсеДействия);
	Элементы.Переместить(Элементы.ГруппаСоздатьНаОсновании, Элементы.ГруппаВсеДействия);
	Элементы.Переместить(Элементы.ОтправитьОбъекты, Элементы.ГруппаВсеДействия);
	Элементы.Переместить(Элементы.ГруппаКомандыЭДО, Элементы.ГруппаВсеДействия);

	МК_НастроитьСтраницыФормы();

КонецПроцедуры

&НаСервере
Процедура МК_НастроитьСтраницыФормы()

	// Страница "Обзор"
	Если Элементы.Обзор.Видимость Тогда
		МК_НастроитьСтраницуОбзор();
	КонецЕсли;
	
	// Страница "Реквизиты"
	Если Элементы.ГруппаОсновные.Видимость Тогда
		МК_НастроитьСтраницуОсновное();
	КонецЕсли;
	
	// Страница "Контрагенты"
	Если Элементы.ГруппаКонтрагенты.Видимость Тогда
		МК_НастроитьСтраницуКонтрагенты();
	КонецЕсли;
	
	// Страница "Обработка"
	Если Элементы.СтраницаОбработка.Видимость Тогда
		МК_НастроитьСтраницуОбработка();
	КонецЕсли;
	
	// Страница "Переадресован"
	Если Элементы.ГруппаПереадресация.Видимость Тогда
		МК_НастроитьСтраницуПереадресация();
	КонецЕсли;
	
	// Страница "Категории"
	Если Элементы.Категории.Видимость Тогда
		МК_НастроитьСтраницуКатегории();
	КонецЕсли;
	
	// Страница "ЭП"
	Если Элементы.ГруппаЭП.Видимость Тогда
		МК_НастроитьСтраницуЭП();
	КонецЕсли;
	
	// Страница "Доступ"
	Если Элементы.ГруппаДоступ.Видимость Тогда
		МК_НастроитьСтраницуДоступ();
	КонецЕсли;
	
	// Страница "Файлы"
	Если Элементы.СтраницаФайлы.Видимость Тогда
		МК_НастроитьСтраницуФайлы();
	КонецЕсли;
	
	Элементы.МК_КнопкаСтраницаОбзор.Видимость = Элементы.Обзор.Видимость;
	Элементы.МК_КнопкаСтраницаФайлы.Видимость = Элементы.СтраницаФайлы.Видимость;
	Элементы.МК_КнопкаСтраницаОсновное.Видимость = Элементы.ГруппаОсновные.Видимость;
	Элементы.МК_КнопкаСтраницаКонтрагенты.Видимость = Элементы.ГруппаКонтрагенты.Видимость;
	Элементы.МК_КнопкаСтраницаОбработка.Видимость = Элементы.СтраницаОбработка.Видимость;
	Элементы.МК_КнопкаСтраницаКатегории.Видимость = Элементы.Категории.Видимость;
	Элементы.МК_КнопкаСтраницаЭП.Видимость = Элементы.ГруппаЭП.Видимость;
	Элементы.МК_КнопкаСтраницаРабочаяГруппа.Видимость = Элементы.ГруппаДоступ.Видимость;
	
	Элементы.МК_ГруппаПереключателиСтраниц.Видимость = Истина;
	Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	Если Элементы.Обзор.Видимость Тогда
		МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.Обзор, Элементы.МК_КнопкаСтраницаОбзор);
	Иначе
		МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.ГруппаОсновные, Элементы.МК_КнопкаСтраницаОсновное);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_ПереключитьНаСтраницу(Форма, Страница, Кнопка)

	Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница = Страница;
	МК_СброситьОформлениеПереключателейСтраниц(Форма);
	МК_КлиентСервер.ОформитьКнопкуФильтра(Форма.МК_ЭлементыСтиля, Кнопка, Истина, Истина);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_СброситьОформлениеПереключателейСтраниц(Форма)

	МК_КлиентСервер.ОформитьКнопкуФильтра(
		Форма.МК_ЭлементыСтиля, Форма.Элементы.МК_КнопкаСтраницаОбзор, Истина, Ложь);

	МК_КлиентСервер.ОформитьКнопкуФильтра(
		Форма.МК_ЭлементыСтиля, Форма.Элементы.МК_КнопкаСтраницаОсновное, Истина, Ложь);

	МК_КлиентСервер.ОформитьКнопкуФильтра(
		Форма.МК_ЭлементыСтиля, Форма.Элементы.МК_КнопкаСтраницаКонтрагенты, Истина, Ложь);

	МК_КлиентСервер.ОформитьКнопкуФильтра(
		Форма.МК_ЭлементыСтиля, Форма.Элементы.МК_КнопкаСтраницаОбработка, Истина, Ложь);

	МК_КлиентСервер.ОформитьКнопкуФильтра(
		Форма.МК_ЭлементыСтиля, Форма.Элементы.МК_КнопкаСтраницаКатегории, Истина, Ложь);

	МК_КлиентСервер.ОформитьКнопкуФильтра(
		Форма.МК_ЭлементыСтиля, Форма.Элементы.МК_КнопкаСтраницаЭП, Истина, Ложь);

	МК_КлиентСервер.ОформитьКнопкуФильтра(
		Форма.МК_ЭлементыСтиля, Форма.Элементы.МК_КнопкаСтраницаРабочаяГруппа, Истина, Ложь);
		
	МК_КлиентСервер.ОформитьКнопкуФильтра(
		Форма.МК_ЭлементыСтиля, Форма.Элементы.МК_КнопкаСтраницаФайлы, Истина, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура МК_ПоказатьСкрытьДеревоОбзораПродолжение()

	Если КоличествоФайлов = 0 Тогда
		Элементы.Файлы.Видимость = Ложь;
	КонецЕсли;
	
	МК_ОбновитьЗаголовокДеревоОбзора();

	МК_КлиентСервер.ОформитьПроизвольныйЭлементПоСостоянию(
		МК_ЭлементыСтиля, Элементы.МК_ПоказатьСкрытьДеревоОбзора, Элементы.Файлы.Видимость);

	МК_КлиентСервер.УстановитьНовуюВысотуДополнительнойТаблицы(Элементы.Файлы, КоличествоФайлов);

КонецПроцедуры

&НаКлиенте
Процедура МК_ОбновитьЗаголовокДеревоОбзора()

	Элементы.МК_ДеревоОбзораЗаголовок.Заголовок = СтрШаблон(
			НСтр("ru = 'Документ и файлы (%1)'"), Формат(КоличествоФайлов, "ЧН=0; ЧГ="));

КонецПроцедуры

&НаСервере
Процедура МК_НастроитьСтраницуОбзор()
	
	МК.ОформитьКнопкуСворачиваемойГруппы(Элементы.МК_ПоказатьСкрытьДеревоОбзора, Элементы.Файлы.Видимость);
	МК_КлиентСервер.ОформитьКнопкуФильтра(МК_ЭлементыСтиля, Элементы.МК_СоздатьФайл);
	
	Элементы.МК_ДеревоОбзора.Видимость = Истина;
	Элементы.ГруппаСостояния.Видимость = Ложь;
	Элементы.ДекорацияКоманды.Видимость = Ложь;
	
	Элементы.Переместить(Элементы.ГруппаФайлы, Элементы.ГруппаОбзорФайлы);
	Элементы.Файлы.Шапка = Ложь;
	Элементы.Файлы.ИспользованиеТекущейСтроки = ИспользованиеТекущейСтрокиТаблицы.ОтображениеВыделенияИВыбор;
	Элементы.Файлы.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	
	Элементы.ГруппаЗадач.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	Элементы.ДекорацияЗадач.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;
	Элементы.ПерейтиКВыполнениюЗадачи.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;

КонецПроцедуры

&НаСервере
Процедура МК_НастроитьСтраницуФайлы()
	
	Элементы.ФайлыСоздание.Шапка = Ложь;
	Элементы.ФайлыСоздание.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	Элементы.Переместить(Элементы.ДобавитьСканСМобильногоСоздание, Элементы.ФайлыСоздание.КонтекстноеМеню);
	
	Элементы.ФайлыДобавленные.Шапка = Ложь;
	Элементы.ФайлыДобавленные.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	Элементы.Переместить(Элементы.ФайлыДобавленныеДобавитьСканСМобильного, Элементы.ФайлыДобавленные.КонтекстноеМеню);

КонецПроцедуры

&НаСервере
Процедура МК_НастроитьСтраницуОсновное()
	
	Элементы.Заголовок.Заголовок = НСтр("ru = 'Заголовок'");

	Элементы.Содержание.Заголовок = НСтр("ru = 'Содержание'");
	Элементы.Содержание.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	Элементы.Содержание.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	
	Элементы.ВопросДеятельности.КнопкаВыбора = Истина;
	Элементы.ВопросДеятельности.КнопкаОчистки = Истина;
	
	Элементы.ГруппаЛево.ОтображатьОтступСлева = Ложь;
	Элементы.ГруппаЛево.Отображение = ОтображениеОбычнойГруппы.Нет;
	Элементы.ГруппаЛево.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	
	Элементы.ГруппаПраво.ОтображатьОтступСлева = Ложь;
	Элементы.ГруппаПраво.Отображение = ОтображениеОбычнойГруппы.Нет;
	Элементы.ГруппаПраво.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	
	Элементы.ГруппаОсновные.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;

	МК_НастроитьТаблицуСтороны();

КонецПроцедуры

&НаСервере
Процедура МК_НастроитьСтраницуКонтрагенты()
	
	Элементы.ГруппаКонтрагенты.ЦветФона = WebЦвета.Белый;
	Элементы.КонтрагентыКонтактноеЛицо.ЦветТекста = WebЦвета.ТемноСерый;
	Элементы.КонтрагентыКонтактноеЛицо.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;
	
	Элементы.КонтрагентыГруппаКолонокМК.Видимость = Истина;
	Элементы.Переместить(Элементы.КонтрагентыКонтрагент, Элементы.КонтрагентыГруппаКолонокМК);
	Элементы.Переместить(Элементы.КонтрагентыКонтактноеЛицо, Элементы.КонтрагентыГруппаКолонокМК);
	
	Элементы.Контрагенты.Шапка = Ложь;
	Элементы.ОдинКонтрагент.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	МК_УстановитьВидимостьПолейТаблицыКонтрагенты(Ложь);

КонецПроцедуры

&НаСервере
Процедура МК_НастроитьСтраницуОбработка()

	Элементы.Действия.Шапка = Ложь;
	
	Элементы.ДействияСрокПредставление.Видимость = Ложь;
	Элементы.ДействияПредставлениеРезультата.Видимость = Ложь;
	Элементы.ДействияДатаУстановкиСостояния.Видимость = Ложь;
	Элементы.ДействияСостояниеКонтроля.Видимость = Ложь;
	Элементы.ГруппаСостояниеОбработки.Видимость = Ложь;
	Элементы.ДействияГруппаКомментарийИФайлы.Видимость = Ложь;
	
	Элементы.ДействияПредставлениеСотрудники.ЦветТекста = WebЦвета.ТемноСерый;
	Элементы.ДействияПредставлениеСотрудники.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;
	
	Элементы.ДействияКолонкиМК.Видимость = Истина;
	Элементы.Переместить(Элементы.ДействияПредставлениеСотрудники, Элементы.ДействияВтораяСтрокаМК);
	Элементы.Переместить(Элементы.ДействияПредставление, Элементы.ДействияПерваяСтрокаМК);
	Элементы.Переместить(Элементы.ДействияНомерКартинки, Элементы.ДействияКолонкиМК, Элементы.ДействияГруппаВертикальная);
	
	Элементы.ДействияНомерКартинки.Высота = 1;
	Элементы.ДействияНомерКартинки.Ширина = 1;
	
	Элементы.ДействияПредставлениеСотрудники.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;
	Элементы.ДействияПредставлениеСотрудники.ЦветТекста = ЦветаСтиля.МК_ЦветАвтораИсполнителя;
	Элементы.ДействияПредставлениеСотрудники.Высота = 1;

КонецПроцедуры

&НаСервере
Процедура МК_НастроитьСтраницуПереадресация()
	
	Элементы.Переадресовавший.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элементы.Переадресат.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элементы.ГруппаТребуетсяОтвет.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;

КонецПроцедуры

&НаСервере
Процедура МК_НастроитьСтраницуКатегории()
	
	Элементы.Категории.ЦветФона = WebЦвета.Белый;
	Элементы.СписокКатегорийДанныхОткрытьФормуПодбораКатегорий.Отображение = ОтображениеКнопки.Текст;

КонецПроцедуры

&НаСервере
Процедура МК_НастроитьСтраницуЭП()
	
	Элементы.ТаблицаПодписейОткрытьПодпись.Видимость = Ложь;
	Элементы.ТаблицаПодписейПроверить.Видимость = Ложь;
	Элементы.ТаблицаПодписейСохранить.Видимость = Ложь;
	Элементы.ТаблицаПодписейУдалить.Видимость = Ложь;
	Элементы.ТаблицаПодписейОбновить.Видимость = Ложь;
	
	Элементы.Переместить(Элементы.ТаблицаПодписейПроверитьВсе, Элементы.ЭлектронныеПодписи.КонтекстноеМеню);
	
	Элементы.ЭлектронныеПодписи.Шапка = Ложь;
	Элементы.ТаблицаПодписейДатаПодписиИКомментарий.Видимость = Ложь;

КонецПроцедуры

&НаСервере
Процедура МК_НастроитьСтраницуДоступ()
	
	Элементы.РабочаяГруппаТаблица.Шапка = Ложь;
	Элементы.РабочаяГруппаТаблицаПустаяКолонка.Видимость = Ложь;
	Элементы.РабочаяГруппаТаблицаИзменение.Видимость = Ложь;
	Элементы.РабочаяГруппаТаблицаУчастник.Высота = 2;
	
	Элементы.Переместить(Элементы.РабочаяГруппаТаблицаДобавить, Элементы.РабочаяГруппаТаблица.КонтекстноеМеню);
	Элементы.Переместить(Элементы.РабочаяГруппаТаблицаУдалить, Элементы.РабочаяГруппаТаблица.КонтекстноеМеню);
	
	Элементы.ПерезаполнитьРабочуюГруппуДокумента.Видимость = Ложь;
	Элементы.РабочаяГруппаТаблицаРабочаяГруппаОбновить.Видимость = Ложь;
	Элементы.РабочаяГруппаТаблицаВывестиСписок.Видимость = Ложь;
	
	Элементы.ГруппаДоступ.ЦветФона = WebЦвета.Белый;

КонецПроцедуры

&НаСервере
Процедура МК_НастроитьТаблицуСтороны()
	
	Элементы.Стороны.Шапка = Ложь;
	Элементы.СтороныСторонаИСпарк.Видимость = Ложь;
	Элементы.Стороны.ИспользованиеТекущейСтроки = ИспользованиеТекущейСтрокиТаблицы.Выбор;
	
	Элементы.КоманднаяПанельСтороны.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
	Элементы.ДекорацияСтороны.РастягиватьПоГоризонтали = Истина;
	
	Элементы.СтороныДобавить.Отображение = ОтображениеКнопки.Картинка;
	Элементы.СтороныДобавить.Картинка = БиблиотекаКартинок.СоздатьЭлементСписка;
	
	Элементы.СтороныСторона.Шрифт = ШрифтыСтиля.ОбычныйШрифтТекста;
	
	МК_УстановитьВидимостьПолейТаблицыСтороны(Ложь);
	
	Элементы.СтороныМК.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Процедура МК_УстановитьВидимостьПолейТаблицыСтороны(Видимость)
	
	Элементы.СтороныГруппаКомментарийУстановил.Видимость = Видимость;
	Элементы.СтороныГруппаНаименованиеПодписал.Видимость = Видимость;
	Элементы.СтороныКонтактноеЛицо.Видимость = Видимость;
	Элементы.СтороныЭтоНекорректныйКонтрагент.Видимость = Видимость;
	Элементы.СтороныГруппаПодписанДатаПодписи.Видимость = Видимость;
	
КонецПроцедуры

&НаСервере
Процедура МК_УстановитьВидимостьПолейТаблицыКонтрагенты(Видимость)
	
	Элементы.КонтрагентыСводныйИндикатор.Видимость = Видимость;
	Элементы.КонтрагентыЭтоНекорректныйКонтрагент.Видимость = Видимость;
	Элементы.ПолучателиИсходящейКорреспонденции.Видимость = Видимость;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВставитьРегистрационныйШтампИШтрихкод(Команда)
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущийФайл = ТекущиеДанные.Ссылка;
	Если ТекущийФайл = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	ОписаниеОповещенияОВыборе = Новый ОписаниеОповещения(
		"ВставитьРегистрационныйШтампИШтрихкодПродолжение", ЭтотОбъект,
		Новый Структура("ТекущийФайл, Расширение, ТекущаяВерсияРазмер", 
			ТекущийФайл, ТекущиеДанные.Расширение, ТекущиеДанные.ТекущаяВерсияРазмер));
	
	Если ПоказыватьПриВставкеРегНомера Тогда
			
		ОткрытьФорму("ОбщаяФорма.ВыборРасположенияПриВставкеРегНомерШтрихкод", , , , , ,
			ОписаниеОповещенияОВыборе, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
	Иначе
			
		НастройкиРегНомера = ШтрихкодированиеСервер.ПерсональныеНастройкиПоложенияРегНомера();
		НастройкиШтрихкода = ШтрихкодированиеСервер.ПолучитьПерсональныеНастройкиПоложенияШтрихкодаНаСтранице();
		НастройкиРегНомерИШтрихкод = Новый Структура("НастройкиРегНомера, НастройкиШтрихкода", НастройкиРегНомера, НастройкиШтрихкода);
			
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОВыборе, НастройкиРегНомерИШтрихкод);
	КонецЕсли;	
	
КонецПроцедуры

// Вставить регистрационный штамп и штрихкод продолжение - обработчик оповещения
// 
// Параметры:
//  НастройкиРегНомерИШтрихкод  - Структура:
//  * НастройкиРегНомера - См. ШтрихкодированиеКлиентСервер.НовыеНастройкиРегНомера
//  * НастройкиШтрихкода - См. ШтрихкодированиеКлиентСервер.НовыеНастройкиШтрихкода
//  Параметры - Структура:
//  * ТекущийФайл - СправочникСсылка.Файлы -
//  * Расширение - Строка -
//  * ТекущаяВерсияРазмер - Число -
&НаКлиенте
Процедура ВставитьРегистрационныйШтампИШтрихкодПродолжение(НастройкиРегНомерИШтрихкод, Параметры) Экспорт
	
	Если ТипЗнч(НастройкиРегНомерИШтрихкод) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;      
	
	ПоказыватьПриВставкеРегНомера = НастройкиРегНомерИШтрихкод.НастройкиРегНомера.ПоказыватьПриВставке;
	
	ТекущийФайл = Параметры.ТекущийФайл;
	Расширение = Параметры.Расширение;
	ТекущаяВерсияРазмер = Параметры.ТекущаяВерсияРазмер;
	
	РаботаСФайламиВызовСервера.ВставитьРегистрационныйШтампИШтрихкод(
		Объект.Ссылка,
		ТекущийФайл,
		НастройкиРегНомерИШтрихкод);
		
	РаботаСФайламиКлиент.ОткрытьФайлДокумента(ТекущийФайл, ЭтотОбъект);
	
	Если ИспользоватьПредпросмотрФайлов Тогда
		
		ДокументPDF = Неопределено;
		
		ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла(); 
		ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
		ПараметрыHTMLПредставление.Расширение = Расширение;
		ПараметрыHTMLПредставление.Размер = ТекущаяВерсияРазмер;
		ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
		ПараметрыHTMLПредставление.ПредпросмотрОфисныхФайлов = ПредпросмотрОфисныхФайлов;
		
		ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
			ТекущийФайл,
			ПараметрыHTMLПредставление,
			ДокументPDF);
		
		ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ПредставлениеHTML, ТаймлистАвтопротоколHTML,
			РаспознанныйТекстHTML);
		
		Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
		МасштабироватьPDFИКартинки = ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки;
		
		УстановитьВидимостьКомандМасштаба(Расширение);
		
		Если ДокументPDF = Неопределено Тогда
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
		Иначе
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
			ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
			Элементы.ДокументPdfПоле.НомерТекущейСтраницы = 1;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СовпадаетОрганизацияСовпадаетСОрганизациейНоменклатурыДел(Организация, НоменклатураДел)
	
	ОрганизацияНоменклатурыДел = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоменклатураДел, "Организация");
	Возврат Организация = ОрганизацияНоменклатурыДел;
	
КонецФункции

&НаСервере
Процедура ВывестиPDFДокументНаСервере()
	
	СведенияОДокументеPDF = РаботаСPDFПовтИсп.НовыеСведенияОPDFДокументеНаФорме();
	СведенияОДокументеPDF.ИмяРодителяЭлемента = "ГруппаPdf";
	СведенияОДокументеPDF.ИмяРодителяКоманды = "ГруппаОбзорФайлаКоманды";
	
	РаботаСPDF.ВывестиPDFДокументНаФорму(ЭтотОбъект, СведенияОДокументеPDF);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МасштабПлюс(Команда)
	
	Элементы["ДокументPdfПоле"].Масштаб = Элементы["ДокументPdfПоле"].Масштаб + 10;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МасштабМинус(Команда)
	
	Если Элементы["ДокументPdfПоле"].Масштаб <= 10 Тогда
		Возврат;
	КонецЕсли;	
	
	Элементы["ДокументPdfПоле"].Масштаб = Элементы["ДокументPdfПоле"].Масштаб - 10;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоворотЛево(Команда)
	
	Элементы["ДокументPdfПоле"].Ориентация = Элементы["ДокументPdfПоле"].Ориентация - 90;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоворотПраво(Команда)
	
	Элементы["ДокументPdfПоле"].Ориентация = Элементы["ДокументPdfПоле"].Ориентация + 90;

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеHTMLПередПечатью(Элемент, ДиалогПечати, Отказ)
	
	Если ИспользоватьПредпросмотрФайлов И ЗначениеЗаполнено(ТекущийФайл) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, НСтр("ru = 'Откройте файл в приложении и там выполните команду печати'"));
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСоответствиеФайловИЭП()   
	
	Если ФайлыДобавленные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьПодписи = Ложь;
	Для Каждого СтрФайл Из ФайлыДобавленные Цикл
		Если РаботаСЭПКлиентСервер.ЭтоФайлПодписи(СтрФайл.Расширение) Тогда
			ЕстьПодписи = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	

	Если Не ЕстьПодписи Тогда
		Возврат;
	КонецЕсли;      
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	
	ПроверятьЭлектронныеПодписиНаСервере = МодульЭлектроннаяПодписьКлиент.ОбщиеНастройки(
		).ПроверятьЭлектронныеПодписиНаСервере;
	
	ЗаполнитьСписокФайловИзВложений();
	
	СписокФайлов = СписокФайлов();

	ИндексФайла = СписокФайлов.Количество() - 1;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СписокФайлов", СписокФайлов);
	ДополнительныеПараметры.Вставить("ИндексФайла", ИндексФайла);
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	ДополнительныеПараметры.Вставить("ПроверятьЭлектронныеПодписиНаСервере", ПроверятьЭлектронныеПодписиНаСервере);
	
	РаботаСЭПКлиент.УстановитьСоответствиеФайловИЭП(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Функция СписокФайлов()   
	
	Возврат РаботаСЭП.СписокФайлов(ЭтотОбъект);
	
КонецФункции	

&НаСервере
Процедура ЗаполнитьСписокФайловИзВложений()       
	
	РаботаСЭП.ЗаполнитьСписокФайловИзВложений(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьСканирования()
	
	ДоступнаКомандаСканировать = Ложь;
	#Если Не ВебКлиент Тогда   
		Если ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией Тогда
			ДоступнаКомандаСканировать = РаботаСоСканеромКлиентПовтИсп.ДоступнаКомандаСканировать();
		КонецЕсли;
	#КонецЕсли
	
	УстановитьДоступностьКоманды(Элементы.Сканировать, ДоступнаКомандаСканировать);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыбораВходящегоДокументаЭДО(Результат, Параметр) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ОтражениеВУчетеДОВызовСервера.УстановитьСвязьЭлектронногоДокументаСОбъектомУчета(Результат, Объект.Ссылка);
	
	ТекстСообщения = НСтр("ru = 'Связь с электронным документом установлена'");
	ПоказатьОповещениеПользователя(ТекстСообщения);
	
	ПослеИзмененияСвязиСДокументомЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПоЭДО(НаборДействий, ПакетнаяОбработка)
	
	ПараметрыВыполненияДействийПоЭДО = ЭлектронныеДокументыЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	
	ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы.Добавить(ТекущийДокументЭДО);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрыВыполненияДействийПоЭДО", ПараметрыВыполненияДействийПоЭДО);	
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ИнтерфейсДокументовЭДОКлиент, ДополнительныеПараметры);

	ИнтерфейсДокументовЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);
	
КонецПроцедуры

&НаСервере
Процедура ФормаДокументаПриИзмененииНаСервере()
	
	Если ФормаДокументаПриОткрытии <> Объект.ФормаДокумента Тогда 
		ФормаДокументаПриОткрытии = Объект.ФормаДокумента;
		Объект.НоменклатураДел = Неопределено;
		Объект.Дело = Неопределено;
		ДелоТекст = Неопределено;
		
		ОбновитьВидимостьРеквизитовХранения();
		ИзменилсяКлючНастроекОбработки = Истина;
	КонецЕсли;
	
	УстановитьВидимостьКомандыСозданияИсходящегоДокументаЭДО();
	УстановитьВидимостьКомандИзмененияСвязиСДокументомЭДО();
	УстановитьВидимостьГруппыЭДОВПодменюСервис();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКомандыСозданияИсходящегоДокументаЭДО()
	
	ЕстьВозможностьСоздатьИсходящийЭлектронныйДокумент = ОбменЭДОДокументооборот.
			ЕстьВозможностьСоздатьИсходящийЭлектронныйДокумент(ЭтотОбъект);
	Элементы.СоздатьИсходящийДокументЭДО.Видимость = ЕстьВозможностьСоздатьИсходящийЭлектронныйДокумент;
	Элементы.СоздатьИсходящийДокументЭДОМенюЭДО.Видимость = ЕстьВозможностьСоздатьИсходящийЭлектронныйДокумент;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКомандИзмененияСвязиСДокументомЭДО()
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЭДОВДокументообороте") И ЗначениеЗаполнено(Объект.Ссылка)
		И Не Объект.ФормаДокумента = Перечисления.ВариантыФормДокументов.Бумажная Тогда
		 
		ЕстьЭлектронныйДокумент = ЗначениеЗаполнено(ТекущийДокументЭДО); 
		ЕстьПрава = ЭтоПолноправныйПользователь 
			Или ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ОбъектыУчетаДокументовЭДО);
		
		Элементы.СвязатьДокументСВходящимЭДО.Видимость = Не ЕстьЭлектронныйДокумент И ЕстьПрава;
		Элементы.РазорватьСвязьСЭлектроннымДокументом.Видимость = ЕстьЭлектронныйДокумент И ЕстьПрава;
		
	Иначе
		
		Элементы.СвязатьДокументСВходящимЭДО.Видимость = Ложь;
		Элементы.РазорватьСвязьСЭлектроннымДокументом.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыЭДО(ПриЧтенииНаСервере = Ложь)
	
	МассивЭД = ОбменЭДОДокументооборот.ЭлектронныеДокументыОбъектаУчета(Объект.Ссылка);
	СвязанныеДокументыЭДО.ЗагрузитьЗначения(МассивЭД);
	Если МассивЭД.Количество() <> 0 Тогда
		СостояниеЭДО = ОбменЭДОДокументооборот.СостояниеДокументаИДоступностьКоманд(МассивЭД[0], ЭтаФорма);
		ТекущийДокументЭДО = МассивЭД[0];
	Иначе
		ОбменЭДОДокументооборот.ДоступностьКомандНет(ЭтаФорма);
		ТекущийДокументЭДО = Неопределено;
		СостояниеЭДО = Неопределено;
		Элементы.СостояниеЭДО.Видимость = Ложь;
	КонецЕсли; 
	
	УстановитьВидимостьКомандИзмененияСвязиСДокументомЭДО();
	ОбновитьКартинкуЭДО();
	ПолучитьОбзорДокумента();
	УстановитьВидимостьГруппыЭДОВПодменюСервис(); 
	
	Если Не ПриЧтенииНаСервере И Не ФайлыЗаполненыСЭДО И СвязанныеДокументыЭДО.Количество() <> 0 Тогда
		
		ЗаполнитьСписокФайлов();
		
	КонецЕсли;	     
	
	УстановитьДоступностьПоЭДО();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПриОтраженииВходящегоЭДО()
	
	ДанныеБЭД = Параметры.ДанныеБЭД;
	
	ЯвляетсяВходящейКорреспонденцией = ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией;
	ВестиУчетСторон = ВидДокументаКэш.ВестиУчетСторон;
	УчитыватьСумму = ВидДокументаКэш.УчитыватьСуммуДокумента;
	
	Если УчитыватьСумму Тогда
		
		Объект.Сумма = ДанныеБЭД.СуммаДокумента;
		
	КонецЕсли;
	
	Если ВестиУчетСторон Тогда
		
		Стороны = Объект.Стороны;
		Стороны.Очистить();
		СтрокаОрганизация = Стороны.Добавить(); 
		СтрокаОрганизация.Сторона = ДанныеБЭД.Организация;
		
		СтрокаКонтрагент = Стороны.Добавить(); 
		СтрокаКонтрагент.Сторона = ДанныеБЭД.Контрагент; 
		
		УстановленныеПодписи = ДанныеБЭД.УстановленныеПодписи;
		Если УстановленныеПодписи.Количество() > 0 Тогда
			
			СвойстваПодписи = УстановленныеПодписи[УстановленныеПодписи.ВГраница()];
			
			СтрокаКонтрагент.Подписан = Истина;
			СтрокаКонтрагент.Подписал =
			НайтиДобавитьКонтактноеЛицоИзСертификата(ДанныеБЭД.Контрагент, СвойстваПодписи.Сертификат);
			СтрокаКонтрагент.ДатаПодписи = СвойстваПодписи.ДатаПодписи;
			
		КонецЕсли; 
		
	Иначе
		
		Объект.Организация = ДанныеБЭД.Организация;
		ОрганизацияПриИзмененииНаСервере();
		Объект.Контрагент = ДанныеБЭД.Контрагент;
		
	КонецЕсли;
	
	Объект.ФормаДокумента = Перечисления.ВариантыФормДокументов.Электронная;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикИзмененияКонтрагента(УстановитьОсновноеКонтактноеЛицо = Ложь)
	
	СкопироватьКонтрагентаИзРеквизитовВСписок(УстановитьОсновноеКонтактноеЛицо);
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
	// Отображать не по ссылке, а по ИНН, НЕ сохраняя в кэше.
	Если ИспользоватьСервисСПАРКРиски Тогда
		ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения.
		ОбновитьОтображениеИндексыСПАРК();
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элементы.Контрагент);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ТекущийДокументЭДО) Тогда
		ПоказатьЗначение(, ТекущийДокументЭДО);
	КонецЕсли;
	
КонецПроцедуры

// Управляет видимостью подменю ЭДО в меню Сервис и видимостью команд в нем
&НаСервере
Процедура УстановитьВидимостьГруппыЭДОВПодменюСервис()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЭДОВДокументообороте") Тогда
		Элементы.ГруппаСервисЭДО.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ЭД = ИнтеграцияЭДО.ОсновнойЭлектронныйДокументОбъектаУчета(Объект.Ссылка);
	
	Элементы.ОткрытьЭлектронныеДокументы.Видимость = ЗначениеЗаполнено(ЭД);
	Элементы.ПросмотретьЭлектронныйДокумент.Видимость = ЗначениеЗаполнено(ЭД);
	
	Элементы.СоздатьИсходящийДокументЭДОПодменюСервис.Видимость = 
		ОбменЭДОДокументооборот.ЕстьВозможностьСоздатьИсходящийЭлектронныйДокумент(ЭтотОбъект);
	
КонецПроцедуры

// Устанавливает числовое значение статуса ЭДО для картинки
//
&НаСервере
Процедура ОбновитьКартинкуЭДО()
	
	СостоянияЭДОПоЦветам = ИнтерфейсЭДОДокументооборот.НаборыСостоянийЭДОПоЦветамИконок();
	
	Если СостоянияЭДОПоЦветам.Красные.Найти(СостояниеЭДОСсылка) <> Неопределено Тогда
		СтатусЭДО = 2;
	ИначеЕсли СостоянияЭДОПоЦветам.Зеленые.Найти(СостояниеЭДОСсылка) <> Неопределено Тогда
		СтатусЭДО = 1;
	ИначеЕсли СостоянияЭДОПоЦветам.Серые.Найти(СостояниеЭДОСсылка) <> Неопределено Тогда
		СтатусЭДО = 3;
	Иначе
		СтатусЭДО = 0;
	КонецЕсли;
	
	Элементы.КартинкаЭДО.Подсказка = СостояниеЭДО;
	
КонецПроцедуры

// Выполняется после нажатия на кнопки установки и разрыва связи с документом ЭДО
//
&НаКлиенте
Процедура ПослеИзмененияСвязиСДокументомЭДО()
	
	Оповестить("ЭлектронныйДокументВходящий_ПодборДокументаУчета");
	Оповестить(ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияСостоянияЭДО());
	ЗаполнитьСписокФайлов(Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКомандСервиса1СShare()
	
	ВидимостьКомандСервиса1CShare = ИнтеграцияShareДокументооборотКлиентСервер.ВидимостьКомандСервиса1CShare(
			ЭтотОбъект, ВидДокументаКэш);
	Элементы.ПоделитьсяДокументомShare.Видимость = ВидимостьКомандСервиса1CShare.ИспользоватьСервис1CShare
		И ВидимостьКомандСервиса1CShare.Видимость;
	Элементы.ПоделитьсяДокументомShareКомПанель.Видимость = ВидимостьКомандСервиса1CShare.ИспользоватьСервис1CShare
		И ВидимостьКомандСервиса1CShare.Видимость;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьВыполненияВнеПрограммы()
	Если СостояниеОбработки <> ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Выполняется")
		И КоличествоДействий > 0 Тогда
		Элементы.ДействияКонтекстноеМенюДействиеВыполненоВнеПрограммы.Видимость = Истина;
	Иначе
		Элементы.ДействияКонтекстноеМенюДействиеВыполненоВнеПрограммы.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СоздатьКнопкиПорционногоПредпросмотра()
	
	ИмяРодителяКоманды = "ГруппаСтраницыКнопкиПеремотки";
	ОбзорФайловСервер.СоздатьКнопкиПорционногоПредпросмотра(ЭтотОбъект, ИмяРодителяКоманды);
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьКнопкиДинамическогоСписка()
	
	ОбзорФайловКлиентСервер.ОбновитьКнопкиДинамическогоСписка(
		ЭтотОбъект,
		НомерПорции,
		ВсегоПорцийПредпросмотра);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКнопкиДинамическогоСпискаКлиент()
	
	ОбзорФайловКлиентСервер.ОбновитьКнопкиДинамическогоСписка(
		ЭтотОбъект,
		НомерПорции,
		ВсегоПорцийПредпросмотра);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаВыборЗавершение(НоваяСтраница, ДополнительныеПараметры) Экспорт
	
	ЧастьВыбор(НоваяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастьВыбор(НоваяСтраница)
	
	Если НоваяСтраница = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НомерПорции = НоваяСтраница;
	
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущийФайл = ТекущиеДанные.Ссылка; 
	КонецЕсли;	
	
	ДокументPDF = Неопределено;
	
	ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();      
	ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
	ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.Расширение;
	ПараметрыHTMLПредставление.Размер = ТекущиеДанные.ТекущаяВерсияРазмер;
	ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
	ПараметрыHTMLПредставление.ПредпросмотрОфисныхФайлов = ПредпросмотрОфисныхФайлов;
	
	ПараметрыHTMLПредставление.НомерПорции = НомерПорции - 1; // номера для пользователя - с 1, в СУБД - с 0
	
	ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
		ТекущийФайл,
		ПараметрыHTMLПредставление,
		ДокументPDF);
	
	ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ПредставлениеHTML, ТаймлистАвтопротоколHTML,
		РаспознанныйТекстHTML);
	
	Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
	МасштабироватьPDFИКартинки = ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки;
	УстановитьВидимостьКомандМасштаба(ТекущиеДанные.Расширение);
	ТекущиеДанные.ПредпросмотрЕстьВБазе = Истина; 
	
	ВсегоПорцийПредпросмотра = ПараметрыHTMLПредставление.ВсегоПорцийПредпросмотра;
	
	Если ДокументPDF = Неопределено Тогда
		Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
	Иначе
		Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
		ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
		Элементы.ДокументPdfПоле.НомерТекущейСтраницы = 1;
	КонецЕсли;     
	
	ОбновитьКнопкиДинамическогоСпискаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДействиеОтложено()
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОбработка;
	ДействияКлиент.ОткрытьКарточкуДействияПоДействию(ЭтотОбъект, Параметры.Действие);

КонецПроцедуры

// Выполняет поиск контактного лица контрагента по данным сертификата ЭП, при отсутствии добавляет новое.
//
Функция НайтиДобавитьКонтактноеЛицоИзСертификата(Контрагент, Сертификат)
	
	УстановитьПривилегированныйРежим(Истина);
	
	КонтактноеЛицо = Справочники.КонтактныеЛица.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(Сертификат) Тогда
		Возврат КонтактноеЛицо;
	КонецЕсли;
	
	Если ТипЗнч(Сертификат) = Тип("ХранилищеЗначения") Тогда
		ДвоичныеДанныеСертификата = Сертификат.Получить();
	Иначе
		ДвоичныеДанныеСертификата = Сертификат;
	КонецЕсли;
	
	Субъект = ЭлектроннаяПодписьКлиентСервер.СвойстваСубъектаСертификата(
		Новый СертификатКриптографии(ДвоичныеДанныеСертификата));
		
	Если Не Субъект.Свойство("ОбщееИмя") Тогда
		Возврат КонтактноеЛицо;		
	КонецЕсли;
	
	ФИОКонтактногоЛица = Новый Массив;
	Если ЗначениеЗаполнено(Субъект.Фамилия) Тогда
		ФИОКонтактногоЛица.Добавить(Субъект.Фамилия);
	КонецЕсли;
	Если ЗначениеЗаполнено(Субъект.Имя) Тогда
		ФИОКонтактногоЛица.Добавить(Субъект.Имя);
		
		Если ЗначениеЗаполнено(Субъект.Отчество) Тогда
			ФИОКонтактногоЛица.Добавить(Субъект.Отчество);
		КонецЕсли;	
	КонецЕсли;
	Если Не ФИОКонтактногоЛица.Количество() Тогда
		ФИОКонтактногоЛица.Добавить(Субъект.ОбщееИмя);
	КонецЕсли;
	НаименованиеКонтактногоЛица = СтрСоединить(ФИОКонтактногоЛица, " ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КонтактныеЛица.Ссылка КАК КонтактноеЛицо
		|ИЗ
		|	Справочник.КонтактныеЛица КАК КонтактныеЛица
		|ГДЕ
		|	КонтактныеЛица.Владелец = &Владелец
		|	И НЕ КонтактныеЛица.ПометкаУдаления
		|	И КонтактныеЛица.Наименование = &Наименование";
		
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	Запрос.УстановитьПараметр("Наименование", НаименованиеКонтактногоЛица);
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		// Добавляем новое контактное лицо
		КонтактноеЛицо = Справочники.КонтактныеЛица.СоздатьЭлемент();
		КонтактноеЛицо.Владелец = Контрагент;
		КонтактноеЛицо.Наименование = НаименованиеКонтактногоЛица;
		Субъект.Свойство("Должность", КонтактноеЛицо.Должность);
		КонтактноеЛицо.Комментарий = НСтр("ru = 'Создан при загрузке ЭД.'");
		КонтактноеЛицо.ОбменДанными.Загрузка = Истина;
		КонтактноеЛицо.Записать();
		
		КонтактноеЛицо = КонтактноеЛицо.Ссылка;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		КонтактноеЛицо = Выборка.КонтактноеЛицо; 
		
	КонецЕсли;
	
	Возврат КонтактноеЛицо;
	
КонецФункции

#КонецОбласти