&НаКлиенте
Перем ПолноеИмяПеретаскиваемогоФайла;

&НаКлиенте
Перем КлючЗаписиДляУстановки;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("НавигационнаяСсылка") Тогда
		НавигационнаяСсылка = Параметры.НавигационнаяСсылка;
		АвтоНавигационнаяСсылка = Ложь;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(НавигационнаяСсылка) Тогда
		НавигационнаяСсылка = "e1cib/list/Справочник.ДокументыПредприятия";
	КонецЕсли;

	ПриСозданииНаСервереРедакцииКонфигурации();

	ИспользоватьРолиФайлов = ПолучитьФункциональнуюОпцию("ИспользоватьРолиФайлов");

	ФорматДатыДляКолонокЗадач = ?(ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач"),
		"ДФ='dd.MM.yy H:mm'", "ДФ='dd.MM.yy'");

	ПоказыватьОбластьОбзора = Истина;
	Элементы.ЗадачиСрокИсполнения.Формат = ФорматДатыДляКолонокЗадач;
	Элементы.ПоказыватьОбластьОбзора.Пометка = ПоказыватьОбластьОбзора;
	ВестиУчетСканКопийОригиналовДокументов = ПолучитьФункциональнуюОпцию(
		"ВестиУчетСканКопийОригиналовДокументов");

	Список.Параметры.УстановитьЗначениеПараметра("ИспользоватьПрочтенностьДокументов",
		ПолучитьФункциональнуюОпцию("ИспользоватьПрочтенностьДокументов"));

	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	Список.Параметры.УстановитьЗначениеПараметра("ОтборПоКонтрагенту", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("КонтрагентОтбор", Неопределено);
	Список.Параметры.УстановитьЗначениеПараметра("Пользователь", Пользователи.ТекущийПользователь());

	Если Параметры.Свойство("Папка") И ЗначениеЗаполнено(Параметры.Папка) Тогда
		ПапкаПриОткрытии = Параметры.Папка;
	КонецЕсли;

	ИспользоватьКатегорииДанных = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");

	МассивКолонок = Новый Массив;
	МассивКолонок.Добавить("Прочтен");
	МассивКолонок.Добавить("КоличествоВажныхСвязей");
	МассивКолонок.Добавить("ИндексКартинкиФайлы");
	Список.УстановитьОграниченияИспользованияВПорядке(МассивКолонок);

	МассивКолонок = Новый Массив;
	МассивКолонок.Добавить("ИндексКартинкиФайлы");
	Список.УстановитьОграниченияИспользованияВГруппировке(МассивКолонок);
	Список.УстановитьОграниченияИспользованияВОтборе(МассивКолонок);

	Если Не ПравоДоступа("Добавление", Метаданные.Справочники.ДокументыПредприятия) Тогда
		ДелопроизводствоКлиентСервер.УстановитьВидимостьДоступностьКомандСоздания(Элементы,
			"Видимость", Ложь);
	КонецЕсли;
	
	// Устанавливаем вид просмотра 
	ЗаполнитьСписокВыбораВидаПросмотра();

	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Проекты.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", ТекущийПользователь);
	ТолькоМоиПроекты = Ложь;
	ПереключитьОтборПоПроектам();

	ПредыдущийВидПросмотра = ВидПросмотра;
	ПереключитьВидПросмотра();

	ВестиУчетПоТематикам = Истина;
	Параметры.Свойство("ДоступныеВидыДокументов", ДоступныеВидыДокументов);
	Если ДоступныеВидыДокументов.Количество() <> 0 Тогда
		
		// Список видов документов
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ВидыДокументов, "Ссылка", ДоступныеВидыДокументов.ВыгрузитьЗначения(),
			ВидСравненияКомпоновкиДанных.ВСписке, НСтр("ru = 'Вид документа'"), Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);

		Элементы.ВидыДокументов.Отображение = ОтображениеТаблицы.Список;
		ТекущийВидДокумента = ДоступныеВидыДокументов[0].Значение;
		
		// Список документов
		РаботаСоСпискамиДокументовКлиентСервер.УстановитьОтборВидДокумента(Список, ВидДокумента,
			Тематика, ДоступныеВидыДокументов);
		
		// Отборы действующих и актуальных документов.
		УчитыватьСрокДействия = Ложь;
		ВестиУчетПоОрганизациям = Ложь;
		ВестиУчетПоКонтрагентам = Ложь;
		ВестиУчетПоТематикам = Ложь;
		ЗначенияРеквизитов = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектовВПривилегированномРежиме(
			ДоступныеВидыДокументов.ВыгрузитьЗначения(),
			"УчитыватьСрокДействия, ВестиУчетПоКонтрагентам, ВестиУчетПоОрганизациям, ВестиУчетПоТематикам, ИспользоватьВажность");

		Для Каждого КлючИЗначение Из ЗначенияРеквизитов Цикл
			Если КлючИЗначение.Значение.УчитыватьСрокДействия = Истина Тогда
				УчитыватьСрокДействия = Истина;
			КонецЕсли;
			Если КлючИЗначение.Значение.ВестиУчетПоКонтрагентам = Истина Тогда
				ВестиУчетПоКонтрагентам = Истина;
			КонецЕсли;
			Если КлючИЗначение.Значение.ВестиУчетПоОрганизациям = Истина Тогда
				ВестиУчетПоОрганизациям = Истина;
			КонецЕсли;
			Если КлючИЗначение.Значение.ВестиУчетПоТематикам = Истина Тогда
				ВестиУчетПоТематикам = Истина;
			КонецЕсли;
			Если КлючИЗначение.Значение.ИспользоватьВажность = Истина Тогда
				ИспользоватьВажность = Истина;
			КонецЕсли;
		КонецЦикла;
		
		// Видимость быстрых отборов
		Элементы.ОтборКонтрагент.Видимость = ВестиУчетПоКонтрагентам;
		Элементы.ОтборОрганизация.Видимость = ВестиУчетПоОрганизациям;
		Если Не ВестиУчетПоТематикам Тогда
			Если ДоступныеВидыДокументов.Количество() = 1 Тогда
				Элементы.ВидИТематикаТекст.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;

	Иначе
		ИспользоватьВажность = ВключенУчетВажности();
	КонецЕсли;

	Элементы.Важность.Видимость = ИспользоватьВажность;
	Элементы.ОтборВажность.Видимость = ИспользоватьВажность;

	Если Параметры.Свойство("Заголовок") Тогда
		Заголовок = Параметры.Заголовок;
		АвтоЗаголовок = Ложь;
	КонецЕсли;

	ПоказыватьУдаленные = Ложь;
	ПоказатьУдаленные();
	
	// Кешируем количество доступных шаблонов документов
	ЕстьДоступныеШаблоныДокументов = Делопроизводство.ЕстьДоступныеШаблоныДокументов();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаКоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Учет трудозатрат
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража, ДатаКонцаХронометража, ВключенХронометраж,
		ОпцияИспользоватьУчетВремени, Неопределено, ВидыРабот, СпособУказанияВремени,
		Команды.ПереключитьХронометраж, Элементы.ПереключитьХронометраж,
		Элементы.УказатьТрудозатраты);
	
	// Тематики
	ТематикиИспользуются = РаботаСТематикамиДокументов.ТематикиИспользуются();
	Если ТематикиИспользуются Тогда
		Элементы.ВидИТематикаТекст.Подсказка = НСтр("ru = 'Вид и тематика документа'");
		Элементы.ВидИТематикаТекст.ПодсказкаВвода = НСтр("ru = 'Вид и тематика документа'");
	Иначе
		Элементы.ВидИТематикаТекст.Подсказка = НСтр("ru = 'Вид документа'");
		Элементы.ВидИТематикаТекст.ПодсказкаВвода = НСтр("ru = 'Вид документа'");
	КонецЕсли;

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПрочтенностьДокументов") Тогда
		Элементы.Прочтен.Видимость = Ложь;
	КонецЕсли;

	Элементы.ОтборВажность.СписокВыбора[0].Картинка = БиблиотекаКартинок.ВажностьВысокая;
	Элементы.ОтборВажность.СписокВыбора[1].Картинка = БиблиотекаКартинок.ВажностьНеЗадана;
	Элементы.ОтборВажность.СписокВыбора[2].Картинка = БиблиотекаКартинок.ВажностьНизкая;

	УстановитьВидимостьПоУсловиямИФункционалнымОпциям();

	РаботаСРекомендованнымиНастройками.УстановитьРекомендованныеНастройки(ИмяФормы,
		КлючНазначенияИспользования);
	
	// Открытие в карточке другого объекта
	Если Параметры.Свойство("ДокументыПоОбъекту") Тогда
		ТекущееПоле = Неопределено;
		Если ТипЗнч(Параметры.ДокументыПоОбъекту) = Тип("СправочникСсылка.Контрагенты") Тогда
			ТекущееПоле = "Контрагент";
		ИначеЕсли ТипЗнч(Параметры.ДокументыПоОбъекту) = Тип("СправочникСсылка.Проекты") Тогда
			ТекущееПоле = "Проект";
		КонецЕсли;
		Если ТекущееПоле <> Неопределено Тогда
			Элементы["Отбор" + ТекущееПоле].Видимость = Ложь;
			ПараметрыОтбора = Новый Соответствие;
			Параметрыотбора.Вставить(ТекущееПоле, Параметры.ДокументыПоОбъекту);
			РаботаСоСпискамиДокументовКлиентСервер.УстановитьОтборСписка(Список, Параметрыотбора);
		КонецЕсли;
		Элементы.СтраницыДеревоРазрезов.Видимость = Ложь;
		ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.Списком;
		АвтоматическоеСохранениеДанныхВНастройках = АвтоматическоеСохранениеДанныхФормыВНастройках.НеИспользовать;
	КонецЕсли;

	ЕстьМЭДО = Ложь;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьМЭДО") Тогда
		ЕстьМЭДО = МЭДОПереопределяемый.ЕстьДоступКРаботеСМЭДО();
	КонецЕсли;
	Элементы.СостояниеМЭДО.Видимость = ЕстьМЭДО;
	Элементы.ОтборСостояниеМЭДО.Видимость = ЕстьМЭДО;

	ИзменитьВнешнийВидДляРежимаОбращений();

	ЭтоМобильныйКлиент = ПараметрыСеанса.ЭтоМобильныйКлиент;
	ЭтоМобильноеУстройствоСБольшимЭкраном = МК_КлиентСервер.ЭтоМобильныйСБольшимЭкраном();
	ЭтоМобильныйКлиентВПортретномРежиме = МК_ВызовСервера.ЭтоМобильныйВПортретномРежиме();

	Если ЭтоМобильныйКлиент Тогда
		МК_НастроитьЭлементыФормы();
	КонецЕсли;
	
	// Сервис "1С:Share"
	ИспользоватьСервис1CShare = ИнтеграцияShareДокументооборот.ИспользоватьСервис1СShare();
	
	СостоянияЭДОПоЦветам = ИнтерфейсЭДОДокументооборот.НаборыСостоянийЭДОПоЦветамИконок();
	Список.Параметры.УстановитьЗначениеПараметра("СостоянияЭДОЗеленые", СостоянияЭДОПоЦветам.Зеленые);
	Список.Параметры.УстановитьЗначениеПараметра("СостоянияЭДОКрасные", СостоянияЭДОПоЦветам.Красные);
	Список.Параметры.УстановитьЗначениеПараметра("СостоянияЭДОСерые", СостоянияЭДОПоЦветам.Серые);
	УстановитьУсловноеОформлениеСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиентПодMacOS() Тогда
		Элементы.Подписать.Видимость = Ложь;
		Элементы.СписокКонтекстноеМенюПодписать.Видимость = Ложь;
	КонецЕсли;

	Если ИспользоватьКатегорииДанных И ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоКатегориям") Тогда
		РаботаСКатегориямиДанныхКлиент.УстановитьПризнакВыбораЭлементовДерева(
			Элементы.ДеревоКатегорий, ДеревоКатегорий, ВыбранныеКатегорииПриОткрытии,
			ВыбранныеКатегории);
		РаботаСКатегориямиДанныхКлиент.УстановитьРазвернутостьЭлементовДерева(
			Элементы.ДеревоКатегорий, ДеревоКатегорий, КатегорииПриОткрытии);
		ПрименитьФильтрКатегорий();
	КонецЕсли;
	
	//Обработчик ожидания для периодического обновления количества доступных шаблонов документов через каждые 20 минут
	ПодключитьОбработчикОжидания("ОбновитьКоличествоДоступныхШаблонов", 1200, Ложь);

	Если ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоНоменклатуреДел") Тогда

		Для Каждого ЭлементДерева Из НоменклатураДел.ПолучитьЭлементы() Цикл
			Элементы.СписокНоменклатураДел.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЦикла;

		Если ТекущаяНоменклатураДел <> Неопределено Тогда
			Идентификатор = Неопределено;
			ДелопроизводствоКлиент.НайтиСтрокуДереваПоСсылке(ТекущаяНоменклатураДел,
				НоменклатураДел, Идентификатор);
			Если Идентификатор <> Неопределено Тогда
				ТекущаяНоменклатураДел = Неопределено;
				Элементы.СписокНоменклатураДел.ТекущаяСтрока = Идентификатор;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоДеламТомам") Тогда

		Для Каждого ЭлементДерева Из ДелаТома.ПолучитьЭлементы() Цикл
			Элементы.ДелаТома.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЦикла;

		Если ТекущееДелоТом <> Неопределено Тогда
			Идентификатор = Неопределено;
			ДелопроизводствоКлиент.НайтиСтрокуДереваПоСсылке(ТекущееДелоТом, ДелаТома,
				Идентификатор);
			Если Идентификатор <> Неопределено Тогда
				ТекущееДелоТом = Неопределено;
				Элементы.ДелаТома.ТекущаяСтрока = Идентификатор;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	ДелопроизводствоКлиент.ВидИТематикаУстановитьВидимостьКнопкиВыбора(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Не ЭтоМобильныйКлиент Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.МК_Страницы.ТекущаяСтраница <> Элементы.МК_СтраницаКонтент Тогда
		Элементы.МК_Страницы.ТекущаяСтраница = Элементы.МК_СтраницаКонтент;
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;

	Если ИспользоватьКатегорииДанных И ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоКатегориям") Тогда
		СписокРаскрытыхКатегорий.Очистить();
		РаботаСКатегориямиДанныхКлиент.ПолучитьМассивРаскрытыхКатегорий(Элементы.ДеревоКатегорий,
			ДеревоКатегорий.ПолучитьЭлементы(), СписокРаскрытыхКатегорий);
		СостояниеДереваИзменилось = Ложь;
		Если КатегорииПриОткрытии.Количество() <> СписокРаскрытыхКатегорий.Количество()
			Или ВыбранныеКатегории.Количество() <> ВыбранныеКатегорииПриОткрытии.Количество() Тогда
			СостояниеДереваИзменилось = Истина;
		КонецЕсли;

		Если Не СостояниеДереваИзменилось Тогда
			Для Каждого Элемент Из КатегорииПриОткрытии Цикл
				СостояниеДереваИзменилось = СписокРаскрытыхКатегорий.НайтиПоЗначению(
					Элемент.Значение) = Неопределено;
				Если СостояниеДереваИзменилось Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		Если Не СостояниеДереваИзменилось Тогда
			Для Каждого Элемент Из ВыбранныеКатегории Цикл
				СостояниеДереваИзменилось = ВыбранныеКатегорииПриОткрытии.НайтиПоЗначению(
					Элемент.Значение) = Неопределено;
				Если СостояниеДереваИзменилось Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		Если ТекущаяКатегория <> ТекущаяКатегорияПриОткрытии Тогда
			СостояниеДереваИзменилось = Истина;
		КонецЕсли;

		Если СостояниеДереваИзменилось Тогда
			РаботаСКатегориямиДанных.ЗаписатьПараметрыДереваКатегорийВСпискахДокументов(
				"СписокДокументовПредприятия", СписокРаскрытыхКатегорий, ТекущаяКатегория,
				ВыбранныеКатегории, ОтборДанных, СУчетомПодкатегорий, ПоказыватьСписокОтмеченных);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ДокументИзмененДляСписков" Тогда
		Если ТипЗнч(Источник) = Тип("ФормаКлиентскогоПриложения") И Источник.ВладелецФормы
			= Элементы.Список И Элементы.Список.ТекущаяСтрока <> Параметр Тогда

			КлючЗаписиДляУстановки = Параметр;
			ПодключитьОбработчикОжидания("УстановитьТекущуюСтрокуОтложенно", 0.2, Истина);

		КонецЕсли;
	КонецЕсли;

	Если ИмяСобытия = "РедактироваласьКатегория" И (Источник.ВладелецФормы = Неопределено
		Или Источник.ВладелецФормы.Имя <> "ДеревоКатегорий") Тогда
		ОбновитьДеревоКатегорий(Неопределено);
	КонецЕсли;

	Если ИмяСобытия = "ИмпортФайловВСписокДокументовПредприятияЗавершен" Тогда
		ОбновитьДеревоКатегорий(Неопределено);
	КонецЕсли;

	Если ИмяСобытия = "ЗаписьКонтроля" Тогда
		Если ЗначениеЗаполнено(Параметр.Предмет) И ТипЗнч(Параметр.Предмет) = Тип(
			"СправочникСсылка.ДокументыПредприятия") Тогда
			ДелопроизводствоКлиент.ОповеститьОбИзмененииОбъекта(Параметр.Предмет);
		КонецЕсли;
	КонецЕсли;

	Если ИмяСобытия = "ОбновленоСостояниеЭДДО" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;

	Если ИмяСобытия = "ОтражениеВходящихЭДО" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;

	Если ИмяСобытия = "ПрочтениеОбновитьСписок" Тогда

		ТекущиеДанные = РаботаСоСпискамиДокументовКлиент.ПолучитьДанныеТекущейСтрокиСписка(
			Элементы.Список, Элементы.Список.ТекущаяСтрока);
		Если ТекущиеДанные <> Неопределено Тогда

			ТекущийДокументСписка = ТекущиеДанные.Ссылка;

			Если Параметр = ТекущийДокументСписка Тогда
				ОповеститьОбИзменении(Элементы.Список.ТекущаяСтрока);
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если ПоказыватьОбластьОбзора Тогда
		Если (ИмяСобытия = "ДокументИзменен" Или ИмяСобытия = "Запись_ДокументыПредприятия")
			И Параметр = ТекущийДокумент Тогда
			ОбновитьМиникарточку();
			Если ПоказыватьОбластьОбзора Тогда
				Переписка_УстановитьДоступностьКоманд();
			КонецЕсли;
		КонецЕсли;

		Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда

			Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Владелец")
				И Параметр.Свойство("Файл") И ЗначениеЗаполнено(Параметр.Владелец) Тогда
				ВладелецФайла = Параметр.Владелец;
				ФайлСсылка = Параметр.Файл;
			Иначе
				ВладелецФайла = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
					Источник, "ВладелецФайла");
				ФайлСсылка = Источник;
			КонецЕсли;

			Если ВладелецФайла = ТекущийДокумент Тогда
				ОбновитьСтрокуФайла(ФайлСсылка);

				ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
				ОбзорСпискаДокументовКлиент.УстановитьДоступностьКоманд(ТекущиеДанные, ЭтаФорма);
			КонецЕсли;

		КонецЕсли;

		Если ИмяСобытия = "ФайлИзменен" Тогда
			Если ТипЗнч(Параметр) = Тип("Структура") Тогда
				Если Параметр.Владелец = ТекущийДокумент Тогда
					ОбновитьСтрокуФайла(Параметр.Файл);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если ИмяСобытия = "БизнесПроцессСтартован" Тогда
			Если Параметр.Свойство("СсылкаНаПредметБизнесПроцесса")
				И Параметр.СсылкаНаПредметБизнесПроцесса = ТекущийДокумент Тогда
				ОбзорСпискаДокументовКлиент.ЗаполнитьСписокЗадач(ЭтаФорма);
			КонецЕсли;
		КонецЕсли;

		Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" Тогда

			Если Параметр <> Неопределено И Параметр.Свойство("Владелец") И Параметр.Владелец
				= ТекущийДокумент Тогда

				ОбзорСпискаДокументовКлиент.ЗаполнитьСписокФайлов(ЭтаФорма);

				Если Параметр.Свойство("Файл") Тогда
					УстановитьТекущуюСтрокуФайла(Параметр.Файл);
					ОтметитьПризнакОригиналУНовогоФайла(Параметр.Файл);
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

		Если ИмяСобытия = "ИзмененыСвязиДокумента" И Параметр.Документ = ТекущийДокумент Тогда
			ОбзорСпискаДокументовКлиент.ОбновитьСтрокуСвязи(ЭтотОбъект);
		КонецЕсли;

		Если ИмяСобытия = "ИзмененыСвязиПодчиненныхДокументов" И Параметр.Документ
			= ТекущийДокумент Тогда
			ОбзорСпискаДокументовКлиент.ОбновитьСтрокуСвязи(ЭтотОбъект);
		КонецЕсли;

		Если (ИмяСобытия = "ФайлыДокументаПомеченыНаУдаление" И Параметр = ТекущийДокумент)
			Или (ИмяСобытия = "ИмпортФайловЗавершен" И ТипЗнч(Источник) = Тип("Структура")
			И Источник.ВладелецФайлов = ТекущийДокумент) Тогда
			ОбзорСпискаДокументовКлиент.ЗаполнитьСписокФайлов(ЭтотОбъект);
			Элементы.Список.Обновить();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияСостоянияЭДО() Тогда
		Элементы.Список.Обновить();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()

	ЭтоМобильноеУстройствоСБольшимЭкраном = МК_КлиентСервер.ЭтоМобильныйСБольшимЭкраном();
	ЭтоМобильныйКлиентВПортретномРежиме = МК_ВызовСервера.ЭтоМобильныйВПортретномРежиме();

	ПриИзмененииПараметровЭкранаНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)

	РаботаСоСпискамиДокументовКлиентСервер.УстановитьОтборСписка(Список, Настройки);

	ТолькоМоиПроекты = Настройки["ТолькоМоиПроекты"];
	ПереключитьОтборПоПроектам();

	ПоказыватьУдаленные = Настройки["ПоказыватьУдаленные"];
	ПоказатьУдаленные();
	
	// Устанавливаем вид просмотра 
	Если Не ЗначениеЗаполнено(ПапкаПриОткрытии) Тогда
		ТекущаяПапка = Настройки["ТекущаяПапка"];
		ВидПросмотра = Настройки["ВидПросмотра"];
	Иначе
		ТекущаяПапка = ПапкаПриОткрытии;
		ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоПапкам;
	КонецЕсли;
	Элементы.Папки.ТекущаяСтрока = ТекущаяПапка;
	
	// На случай снятия ФО устанавливаем просмотр по папкам
	Если ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоВопросамДеятельности
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности") Тогда
		ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоПапкам;
	ИначеЕсли ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоКонтрагентам
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьРеквизитыУчетаПоКонтрагентам") Тогда
		ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоПапкам;
	ИначеЕсли ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоНоменклатуреДел
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруДел") Тогда
		ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоПапкам;
	ИначеЕсли ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоКатегориям
		И Не ИспользоватьКатегорииДанных Тогда
		ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоПапкам;
	ИначеЕсли ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоПроектам
		И Не ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда
		ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоПапкам;
	КонецЕсли;
	
	//На случай использования ФО, для отказа от папок документов устанавливаем просмотр списком
	Если ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоПапкам
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьПапкиДокументов") Тогда
		ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.Списком;
	КонецЕсли;

	Если Настройки["ПоказыватьОбластьОбзора"] = Неопределено Тогда
		ПоказыватьОбластьОбзора = Ложь;
	Иначе
		ПоказыватьОбластьОбзора = Настройки["ПоказыватьОбластьОбзора"];
	КонецЕсли;

	Элементы.ПоказыватьОбластьОбзора.Пометка = ПоказыватьОбластьОбзора;
	Если ПоказыватьОбластьОбзора Тогда
		Элементы.ГруппаМиникарточка.Видимость = Истина;
	Иначе
		Элементы.ГруппаМиникарточка.Видимость = Ложь;
	КонецЕсли;

	Если ЭтоМобильныйКлиент Тогда

		Если Настройки["МК_ОтображатьВидДокумента"] = Неопределено Тогда
			МК_ОтображатьВидДокумента = Ложь;
		Иначе
			МК_ОтображатьВидДокумента = Настройки["МК_ОтображатьВидДокумента"];
		КонецЕсли;

		Элементы.МК_ПоказатьВидДокумента.Пометка = МК_ОтображатьВидДокумента;
		Элементы.МК_СписокВидДокумента.Видимость = МК_ОтображатьВидДокумента;

	КонецЕсли;

	ПредыдущийВидПросмотра = ВидПросмотра;

	ТекущийВидДокумента = Настройки["ТекущийВидДокумента"];
	Элементы.ВидыДокументов.ТекущаяСтрока = ТекущийВидДокумента;

	ТекущийВопросДеятельности = Настройки["ТекущийВопросДеятельности"];
	Элементы.ВопросыДеятельности.ТекущаяСтрока = ТекущийВопросДеятельности;

	ТекущийКонтрагент = Настройки["ТекущийКонтрагент"];
	Элементы.Контрагенты.ТекущаяСтрока = ТекущийКонтрагент;

	ТекущийПроект = Настройки["ТекущийПроект"];
	Элементы.Проекты.ТекущаяСтрока = ТекущийПроект;

	ГодНоменклатурыДел = Настройки["ГодНоменклатурыДел"];
	ОрганизацияНоменклатурыДел = Настройки["ОрганизацияНоменклатурыДел"];

	ПереключитьВидПросмотра();
	РаботаСоСпискамиДокументовКлиентСервер.УстановитьОтборВидДокумента(Список, ВидДокумента,
		Тематика, ДоступныеВидыДокументов);

	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
		Элементы.ОтборПапка, Папка);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
		Элементы.ОтборОрганизация, Организация);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
		Элементы.ОтборСторона1, Сторона1);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
		Элементы.ОтборКонтрагент, Контрагент);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
		Элементы.ОтборСторона2, Сторона2);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
		Элементы.ПериодВыборки, ПериодВыборки);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
		Элементы.ОтборПроект, Проект);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
		Элементы.ОтборСостояние, Состояние);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
		Элементы.ОтборКатегория, Категория);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
		Элементы.ВидИТематикаТекст, ВидИТематикаТекст);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
		Элементы.ОтборПрочитанность, Прочитанность);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
		Элементы.ОтборВажность, Важность);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
		Элементы.ОтборСостояниеМЭДО, СостояниеМЭДО);

	Если Не ЗначениеЗаполнено(Сторона1) Тогда
		Сторона1 = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Сторона2) Тогда
		Сторона2 = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;

	Если Прочитанность = "Непрочтенные" Тогда
		ЕстьОтборПоНепрочтенным = Истина;
	Иначе
		ЕстьОтборПоНепрочтенным = Ложь;
	КонецЕсли;
	
	//Мобильный клиент
		Если ЭтоМобильныйКлиент Тогда
			МК_ОбновитьРазрез(ЭтотОбъект);
		КонецЕсли;
	//Конец МобильныйКлиент
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПерехода(ОбъектПерехода, СтандартнаяОбработка)

	РаботаСоСпискамиДокументовКлиент.ОбработкаПерехода(ЭтаФорма, ОбъектПерехода,
		СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПолученияНавигационнойСсылки(Ключ, Представление, ПолученнаяНавигационнаяСсылка,
	СтандартнаяОбработка)

	Если Ключ = "Документ" Тогда

		ПолученнаяНавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ТекущийДокумент);

	ИначеЕсли Ключ = "Список" Тогда

		ПолученнаяНавигационнаяСсылка = НавигационнаяСсылка;
		
	ИначеЕсли Ключ = "Сервис1СShare" Тогда
		
		ПолученнаяНавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ТекущийДокумент);
		ПодключитьОбработчикОжидания("Подключаемый_ПоделитьсяДокументомShare", 1, Истина);
		
	Иначе

		ВызватьИсключение СтрШаблон("%1 ""%2""", НСтр("ru = 'Неизвестный ключ'"), Ключ);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПолученияСпискаНавигационныхСсылок(СписокНавигационыхСсылок, КлючПоУмолчанию)

	КлючФормы = "Документ";
	Если ЗначениеЗаполнено(ТекущийДокумент) Тогда
		ПредставлениеФормы = СтрШаблон("%1 (%2)", Строка(ТекущийДокумент), НСтр("ru = 'Документ'"));
		СписокНавигационыхСсылок.Добавить(КлючФормы, ПредставлениеФормы);
	КонецЕсли;

	КлючСписок = "Список";
	СписокНавигационыхСсылок.Добавить(КлючСписок, Заголовок);
	
	Если ИспользоватьСервис1CShare И Элементы.ОбщаяКомандаПоделитьсяДокументомShare.Видимость
		И ЗначениеЗаполнено(ТекущийДокумент) Тогда
		СписокНавигационыхСсылок.Добавить("Сервис1СShare",
			НСтр("ru = 'Веб-ссылка на документ, опубликованный на 1С:Share'"));
	КонецЕсли;	

	КлючПоУмолчанию = КлючСписок;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПапкиПриАктивизацииСтроки(Элемент)

	Если ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам")
		И Элементы.СтраницаПапки.Видимость И ТекущаяПапка <> Элементы.Папки.ТекущаяСтрока Тогда

		ТекущаяПапка = Элементы.Папки.ТекущаяСтрока;

		ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПапкиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка,
	Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПапкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	СтандартнаяОбработка = Ложь;

	ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение;

	Если Не ЗначениеЗаполнено(Строка) Тогда
		ЭтоПереносПапок = ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив")
			И ЗначениеПеретаскивания.Количество() > 0 И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип(
			"СправочникСсылка.ПапкиДокументов");

		Если Не ЭтоПереносПапок Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") И ЗначениеПеретаскивания.Количество() > 0
		И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда

		Если ИзменитьПапкуДокументов(ЗначениеПеретаскивания, Строка) = Истина Тогда
			Элементы.Список.Обновить();

			Если ЗначениеПеретаскивания.Количество() = 1 Тогда
				ПолноеОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Документ ""%1"" перенесен в папку ""%2""'"),
					ЗначениеПеретаскивания[0], Строка);

				ПоказатьОповещениеПользователя(
					НСтр("ru = 'Документ перенесен.'"), ПолучитьНавигационнуюСсылку(
					ЗначениеПеретаскивания[0]), ПолноеОписание, БиблиотекаКартинок.Информация32);
			Иначе
				ПолноеОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Документы (%1 шт.) перенесены в папку ""%2""'"),
					ЗначениеПеретаскивания.Количество(), Строка);

				ПоказатьОповещениеПользователя(
					НСтр("ru = 'Документы перенесены.'"), , ПолноеОписание,
					БиблиотекаКартинок.Информация32);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Строка", Строка);
	СтруктураПараметров.Вставить("ПараметрыПеретаскивания", ПараметрыПеретаскивания);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПапкиПеретаскиваниеПродолжение", ЭтотОбъект,
		СтруктураПараметров);

	Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") И ЗначениеПеретаскивания.Количество() >= 1
		И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("СправочникСсылка.ПапкиДокументов") Тогда

		НайденоЗацикливание = Ложь;
		Если РаботаСФайламиВызовСервера.СменитьРодителяПапок(ЗначениеПеретаскивания, Строка,
			НайденоЗацикливание) = Истина Тогда
			Элементы.Папки.Обновить();
			Элементы.Список.Обновить();

			Если ЗначениеПеретаскивания.Количество() = 1 Тогда
				ПолноеОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Папка ""%1"" перенесена в папку ""%2""'"),
					ЗначениеПеретаскивания[0], Строка);

				ПоказатьОповещениеПользователя(
					НСтр("ru = 'Папка перенесена.'"), , ПолноеОписание,
					БиблиотекаКартинок.Информация32);
			Иначе
				ПолноеОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Папки (%1 шт.) перенесены в папку ""%2""'"),
					ЗначениеПеретаскивания.Количество(), Строка);

				ПоказатьОповещениеПользователя(
					НСтр("ru = 'Папки перенесены.'"), , ПолноеОписание,
					БиблиотекаКартинок.Информация32);
			КонецЕсли;

			ВыполнитьОбработкуОповещения(ОписаниеОповещения);
		Иначе
			Если НайденоЗацикливание = Истина Тогда
				ПоказатьПредупреждение(ОписаниеОповещения, НСтр("ru = 'Зацикливание уровней !'"));
			КонецЕсли;
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПапкиПеретаскиваниеПродолжение(Результат, Параметры) Экспорт

	ОбработатьПеретаскиваниеФайлов(Параметры.ПараметрыПеретаскивания, "Папка", Параметры.Строка);

КонецПроцедуры

&НаКлиенте
Процедура ВидыДокументовПриАктивизацииСтроки(Элемент)

	Если ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоВидамДокументов")
		И Элементы.СтраницаВидыДокументов.Видимость И ТекущийВидДокумента
		<> Элементы.ВидыДокументов.ТекущаяСтрока Тогда

		ТекущийВидДокумента = Элементы.ВидыДокументов.ТекущаяСтрока;

		ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросыДеятельностиПриАктивизацииСтроки(Элемент)

	Если ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоВопросамДеятельности")
		И Элементы.СтраницаВопросыДеятельности.Видимость И ТекущийВопросДеятельности
		<> Элементы.ВопросыДеятельности.ТекущаяСтрока Тогда

		ТекущийВопросДеятельности = Элементы.ВопросыДеятельности.ТекущаяСтрока;

		ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыПриАктивизацииСтроки(Элемент)

	Если ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоКонтрагентам") И Элементы.СтраницаКонтрагенты.Видимость
		И ТекущийКонтрагент <> Элементы.Контрагенты.ТекущаяСтрока Тогда

		ТекущийКонтрагент = Элементы.Контрагенты.ТекущаяСтрока;

		ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатураДелПриАктивизацииСтроки(Элемент)

	Если ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоНоменклатуреДел")
		И Элементы.СтраницаНоменклатураДел.Видимость Тогда

		ТекущиеДанные = Элементы.СписокНоменклатураДел.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущаяНоменклатураДел = ТекущиеДанные.Ссылка Тогда
				Возврат;
			КонецЕсли;

			ТекущаяНоменклатураДел = ТекущиеДанные.Ссылка;
		КонецЕсли;

		ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДелаТомаПриАктивизацииСтроки(Элемент)

	Если ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоДеламТомам")
		И Элементы.СтраницаДелаТома.Видимость Тогда

		ТекущиеДанные = Элементы.ДелаТома.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущееДелоТом = ТекущиеДанные.Ссылка Тогда
				Возврат;
			КонецЕсли;

			ТекущееДелоТом = ТекущиеДанные.Ссылка;
		КонецЕсли;

		ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидыДокументовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания,
	СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВопросыДеятельностиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания,
	СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатураДелПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания,
	СтандартнаяОбработка, Строка, Поле)

	Если ТипЗнч(Строка) <> Тип("Число") Тогда
		Возврат;
	КонецЕсли;

	ЭлементДерева = НоменклатураДел.НайтиПоИдентификатору(Строка);
	Если ЭлементДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЭлементДерева.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ДелаТомаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка,
	Строка, Поле)

	Если ТипЗнч(Строка) <> Тип("Число") Тогда
		Возврат;
	КонецЕсли;

	ЭлементДерева = ДелаТома.НайтиПоИдентификатору(Строка);
	Если ЭлементДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЭлементДерева.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ВидыДокументовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка,
	Строка, Поле)

	СтандартнаяОбработка = Ложь;

	Если Не ЗначениеЗаполнено(Строка) Тогда
		Возврат;
	КонецЕсли;

	ОбработатьПеретаскиваниеДокументов(
		ПараметрыПеретаскивания, "ВидДокумента", Строка, НСтр("ru = 'Вид документа'"));

	ОбработатьПеретаскиваниеФайлов(ПараметрыПеретаскивания, "ВидДокумента", Строка);

КонецПроцедуры

&НаКлиенте
Процедура ВопросыДеятельностиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка,
	Строка, Поле)

	СтандартнаяОбработка = Ложь;

	Если Не ЗначениеЗаполнено(Строка) Тогда
		Возврат;
	КонецЕсли;

	ОбработатьПеретаскиваниеДокументов(
		ПараметрыПеретаскивания, "ВопросДеятельности", Строка, НСтр("ru = 'Вопрос деятельности'"));

	ОбработатьПеретаскиваниеФайлов(ПараметрыПеретаскивания, "ВопросДеятельности", Строка);

КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатураДелПеретаскивание(Элемент, ПараметрыПеретаскивания,
	СтандартнаяОбработка, Строка, Поле)

	СтандартнаяОбработка = Ложь;

	Если Не ЗначениеЗаполнено(Строка) Тогда
		Возврат;
	КонецЕсли;

	ЭлементДерева = НоменклатураДел.НайтиПоИдентификатору(Строка);
	Если ЭлементДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОбработатьПеретаскиваниеДокументов(
		ПараметрыПеретаскивания, "НоменклатураДел", ЭлементДерева.Ссылка, НСтр(
		"ru = 'Номенклатура дел'"));

	ОбработатьПеретаскиваниеФайлов(ПараметрыПеретаскивания, "НоменклатураДел", ЭлементДерева.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ДелаТомаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка,
	Поле)

	СтандартнаяОбработка = Ложь;

	Если Не ЗначениеЗаполнено(Строка) Тогда
		Возврат;
	КонецЕсли;

	ЭлементДерева = ДелаТома.НайтиПоИдентификатору(Строка);
	Если ЭлементДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОбработатьПеретаскиваниеДокументов(
		ПараметрыПеретаскивания, "Дело", ЭлементДерева.Ссылка, НСтр("ru = 'Дело'"));

	ОбработатьПеретаскиваниеФайлов(ПараметрыПеретаскивания, "Дело", ЭлементДерева.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатураДелВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ТекущиеДанные = Элементы.СписокНоменклатураДел.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПоказатьЗначение( , ТекущиеДанные.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатураДелПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;

	ТекущиеДанные = Элементы.СписокНоменклатураДел.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПоказатьЗначение( , ТекущиеДанные.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ДелаТомаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ТекущиеДанные = Элементы.ДелаТома.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПоказатьЗначение( , ТекущиеДанные.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ДелаТомаПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;

	ТекущиеДанные = Элементы.ДелаТома.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПоказатьЗначение( , ТекущиеДанные.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ВидИТематикаТекстПриИзменении(Элемент)

	ДелопроизводствоКлиент.ВидИТематикаПриИзменении(ЭтотОбъект, Истина);
	РаботаСоСпискамиДокументовКлиентСервер.УстановитьОтборВидДокумента(Список, ВидДокумента,
		Тематика, ДоступныеВидыДокументов);

	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент,
		ВидИТематикаТекст);

	ДелопроизводствоКлиент.ВидИТематикаУстановитьВидимостьКнопкиВыбора(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ВидИТематикаТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ДелопроизводствоКлиент.ВидИТематикаНачалоВыбора(ЭтотОбъект, Элемент, СтандартнаяОбработка,
		Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВидИТематикаТекстОчистка(Элемент, СтандартнаяОбработка)

	ДелопроизводствоКлиент.ВидИТематикаОчистка(ЭтотОбъект, Истина);
	РаботаСоСпискамиДокументовКлиентСервер.УстановитьОтборВидДокумента(Список, ВидДокумента,
		Тематика, ДоступныеВидыДокументов);

	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент,
		ВидИТематикаТекст);

КонецПроцедуры

&НаКлиенте
Процедура ВидИТематикаТекстОткрытие(Элемент, СтандартнаяОбработка)

	ДелопроизводствоКлиент.ВидИТематикаОткрытие(ЭтотОбъект, СтандартнаяОбработка, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВидИТематикаТекстОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ДелопроизводствоКлиент.ВидИТематикаОбработкаВыбора(
		ЭтотОбъект, ВыбранноеЗначение, СтандартнаяОбработка, Истина);

	РаботаСоСпискамиДокументовКлиентСервер.УстановитьОтборВидДокумента(Список, ВидДокумента,
		Тематика, ДоступныеВидыДокументов);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент,
		ВидИТематикаТекст);

	ДелопроизводствоКлиент.ВидИТематикаУстановитьВидимостьКнопкиВыбора(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ВидИТематикаТекстАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)

	ДелопроизводствоКлиент.ВидИТематикаАвтоПодбор(
		ЭтотОбъект, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВидИТематикаТекстОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)

	ДелопроизводствоКлиент.ВидИТематикаОкончаниеВводаТекста(
		ЭтотОбъект, Текст, ДанныеВыбора, СтандартнаяОбработка, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОтборПапкаПриИзменении(Элемент)

	ПараметрыОтбора = Новый Соответствие;
	Параметрыотбора.Вставить("Папка", Папка);

	РаботаСоСпискамиДокументовКлиентСервер.УстановитьОтборСписка(Список, ПараметрыОтбора);

	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент, Папка);

КонецПроцедуры

&НаКлиенте
Процедура ПериодВыборкиПриИзменении(Элемент)

	ПараметрыОтбора = Новый Соответствие;
	Параметрыотбора.Вставить("ПериодВыборки", ПериодВыборки);

	РаботаСоСпискамиДокументовКлиентСервер.УстановитьОтборСписка(Список, ПараметрыОтбора);

	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент,
		ПериодВыборки);

КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)

	ПараметрыОтбора = Новый Соответствие;
	Параметрыотбора.Вставить("Организация", Организация);

	РаботаСоСпискамиДокументовКлиентСервер.УстановитьОтборСписка(Список, ПараметрыОтбора);

	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент,
		Организация);

КонецПроцедуры

&НаКлиенте
Процедура ОтборСторона1ПриИзменении(Элемент)

	ПараметрыОтбора = Новый Соответствие;
	Параметрыотбора.Вставить("Сторона1", Сторона1);

	РаботаСоСпискамиДокументовКлиентСервер.УстановитьОтборСписка(Список, ПараметрыОтбора);

	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент, Сторона1);

КонецПроцедуры

&НаКлиенте
Процедура ОтборСторона1Очистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Сторона1ДопустимыОрганизации Тогда
		Сторона1 = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
	ИначеЕсли Сторона1ДопустимыКонтрагенты Тогда
		Сторона1 = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	ИначеЕсли Сторона1ДопустимыСотрудники Тогда
		Сторона1 = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	Иначе
		Сторона1 = Неопределено;
	КонецЕсли;
	ОтборСторона1ПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтборСторона1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Сторона1ДопустимыОрганизации Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	РаботаСоСпискамиДокументовКлиент.НачалоВыбораСтороны(Элемент, Сторона1,
		Сторона1ДопустимыКонтрагенты, Сторона1ДопустимыСотрудники);
КонецПроцедуры

&НаКлиенте
Процедура ОтборСторона1АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание,
	СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСоСпискамиДокументов.ДанныеВыбораСтороны(Текст,
			Сторона1ДопустимыОрганизации, Сторона1ДопустимыКонтрагенты, Сторона1ДопустимыСотрудники);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборСторона1ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСоСпискамиДокументов.ДанныеВыбораСтороны(Текст,
			Сторона1ДопустимыОрганизации, Сторона1ДопустимыКонтрагенты, Сторона1ДопустимыСотрудники);
	Иначе
		Если Сторона1ДопустимыОрганизации Тогда
			Сторона1 = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		ИначеЕсли Сторона1ДопустимыКонтрагенты Тогда
			Сторона1 = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		ИначеЕсли Сторона1ДопустимыСотрудники Тогда
			Сторона1 = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
		Иначе
			Сторона1 = Неопределено;
		КонецЕсли;
		ОтборСторона1ПриИзменении(Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентПриИзменении(Элемент)

	ПараметрыОтбора = Новый Соответствие;
	Параметрыотбора.Вставить("Контрагент", Контрагент);

	РаботаСоСпискамиДокументовКлиентСервер.УстановитьОтборСписка(Список, ПараметрыОтбора);

	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент,
		Контрагент);

КонецПроцедуры

&НаКлиенте
Процедура ОтборСторона2ПриИзменении(Элемент)

	ПараметрыОтбора = Новый Соответствие;
	Параметрыотбора.Вставить("Сторона2", Сторона2);

	РаботаСоСпискамиДокументовКлиентСервер.УстановитьОтборСписка(Список, ПараметрыОтбора);

	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент, Сторона2);

КонецПроцедуры

&НаКлиенте
Процедура ОтборСторона2Очистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Сторона2ДопустимыОрганизации Тогда
		Сторона2 = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
	ИначеЕсли Сторона2ДопустимыКонтрагенты Тогда
		Сторона2 = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	ИначеЕсли Сторона2ДопустимыСотрудники Тогда
		Сторона2 = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	Иначе
		Сторона2 = Неопределено;
	КонецЕсли;
	ОтборСторона2ПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтборСторона2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Сторона2ДопустимыОрганизации Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	РаботаСоСпискамиДокументовКлиент.НачалоВыбораСтороны(Элемент, Сторона2,
		Сторона2ДопустимыКонтрагенты, Сторона2ДопустимыСотрудники);
КонецПроцедуры

&НаКлиенте
Процедура ОтборСторона2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание,
	СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСоСпискамиДокументов.ДанныеВыбораСтороны(Текст,
			Сторона2ДопустимыОрганизации, Сторона2ДопустимыКонтрагенты, Сторона2ДопустимыСотрудники);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборСторона2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
	СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСоСпискамиДокументов.ДанныеВыбораСтороны(Текст,
			Сторона2ДопустимыОрганизации, Сторона2ДопустимыКонтрагенты, Сторона2ДопустимыСотрудники);
	Иначе
		Если Сторона2ДопустимыОрганизации Тогда
			Сторона2 = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		ИначеЕсли Сторона2ДопустимыКонтрагенты Тогда
			Сторона2 = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		ИначеЕсли Сторона2ДопустимыСотрудники Тогда
			Сторона2 = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
		Иначе
			Сторона2 = Неопределено;
		КонецЕсли;
		ОтборСторона2ПриИзменении(Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияНоменклатурыДелПриИзменении(Элемент)

	Если ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоНоменклатуреДел") Тогда

		ЗаполнитьДеревоНоменклатурыДел();

		Для Каждого ЭлементДерева Из НоменклатураДел.ПолучитьЭлементы() Цикл
			Элементы.СписокНоменклатураДел.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЦикла;

	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоДеламТомам") Тогда

		ЗаполнитьДеревоДелТомов();

		Для Каждого ЭлементДерева Из ДелаТома.ПолучитьЭлементы() Цикл
			Элементы.ДелаТома.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГодНоменклатурыДелПриИзменении(Элемент)

	Если ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоНоменклатуреДел") Тогда

		ЗаполнитьДеревоНоменклатурыДел();

		Для Каждого ЭлементДерева Из НоменклатураДел.ПолучитьЭлементы() Цикл
			Элементы.СписокНоменклатураДел.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЦикла;

	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоДеламТомам") Тогда

		ЗаполнитьДеревоДелТомов();

		Для Каждого ЭлементДерева Из ДелаТома.ПолучитьЭлементы() Цикл
			Элементы.ДелаТома.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТолькоМоиПроектыПриИзменении(Элемент)

	ПереключитьОтборПоПроектам();

КонецПроцедуры

&НаКлиенте
Процедура ПроектыПриАктивизацииСтроки(Элемент)

	Если ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоПроектам") И Элементы.СтраницаПроекты.Видимость
		И ТекущийПроект <> Элементы.Проекты.ТекущаяСтрока Тогда

		ТекущийПроект = Элементы.Проекты.ТекущаяСтрока;

		ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроектыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка,
	Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПроектыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	СтандартнаяОбработка = Ложь;

	Если Не ЗначениеЗаполнено(Строка) Тогда
		Возврат;
	КонецЕсли;

	ОбработатьПеретаскиваниеДокументов(
		ПараметрыПеретаскивания, "Проект", Строка, НСтр("ru = 'Проект'"));

	ОбработатьПеретаскиваниеФайлов(ПараметрыПеретаскивания, "Проект", Строка);

КонецПроцедуры

&НаКлиенте
Процедура ОтборПроектПриИзменении(Элемент)

	ПараметрыОтбора = Новый Соответствие;
	Параметрыотбора.Вставить("Проект", Проект);

	РаботаСоСпискамиДокументовКлиентСервер.УстановитьОтборСписка(Список, ПараметрыОтбора);

	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент, Проект);

КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеПриИзменении(Элемент)

	ПараметрыОтбора = Новый Соответствие;
	Параметрыотбора.Вставить("Состояние", Состояние);

	РаботаСоСпискамиДокументовКлиентСервер.УстановитьОтборСписка(Список, ПараметрыОтбора);

	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент,
		Состояние);

КонецПроцедуры

&НаКлиенте
Процедура ОтборКатегорияПриИзменении(Элемент)

	ПараметрыОтбора = Новый Соответствие;
	ПараметрыОтбора.Вставить("Категория", Категория);

	РаботаСоСпискамиДокументовКлиентСервер.УстановитьОтборСписка(Список, ПараметрыОтбора);

	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент,
		Категория);

КонецПроцедуры

&НаКлиенте
Процедура ОтборПрочитанностьПриИзменении(Элемент)

	ПараметрыОтбора = Новый Соответствие;
	ПараметрыОтбора.Вставить("Прочитанность", Прочитанность);

	РаботаСоСпискамиДокументовКлиентСервер.УстановитьОтборСписка(Список, ПараметрыОтбора);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент,
		Прочитанность);

	Если Прочитанность = "Непрочтенные" Тогда
		ЕстьОтборПоНепрочтенным = Истина;
	Иначе
		ЕстьОтборПоНепрочтенным = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтборВажностьПриИзменении(Элемент)

	ПараметрыОтбора = Новый Соответствие;
	ПараметрыОтбора.Вставить("Важность", Важность);

	РаботаСоСпискамиДокументовКлиентСервер.УстановитьОтборСписка(Список, ПараметрыОтбора);

	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент, Важность);

КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеМЭДОПриИзменении(Элемент)

	ПараметрыОтбора = Новый Соответствие;
	ПараметрыОтбора.Вставить("СостояниеМЭДО", СостояниеМЭДО);

	РаботаСоСпискамиДокументовКлиентСервер.УстановитьОтборСписка(Список, ПараметрыОтбора);

	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элемент,
		СостояниеМЭДО);

КонецПроцедуры

// Обзор

&НаКлиенте
Процедура ОбзорHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда
		Возврат;
	КонецЕсли;

	Если СтрНайти(ДанныеСобытия.Href, "goods") > 0 Тогда
		ПараметрыОткрытия = Новый Структура("Ключ, ОткрытьЗакладкуТовары", ТекущийДокумент, Истина);
		ОткрытьФорму("Справочник.ДокументыПредприятия.ФормаОбъекта", ПараметрыОткрытия);
		Возврат;

	ИначеЕсли СтрНайти(ДанныеСобытия.Href, "ShowLinks") > 0 Тогда

		ОбзорСпискаДокументовКлиент.ПоказатьСвязи(ДанныеСобытия.Href);

		Возврат;

	ИначеЕсли СтрНайти(ДанныеСобытия.Href, "ShowInReplyTo") > 0 Тогда

		РаботаС_HTMLКлиент.ОткрытьСсылку(Элемент, ДанныеСобытия, СтандартнаяОбработка, ЭтотОбъект);
		Возврат;

	ИначеЕсли Лев(ДанныеСобытия.Href, 6) <> "v8doc:" Тогда
		Возврат;
	КонецЕсли;

	НавигационнаяСсылкаПоля = Сред(ДанныеСобытия.Href, 7);
	ПерейтиПоНавигационнойСсылке(НавигационнаяСсылкаПоля);

КонецПроцедуры

&НаКлиенте
Процедура ПереключательПоказыватьПодробностиПриИзменении(Элемент)

	Если ПереключательПоказыватьПодробности = "Задачи" Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаЗадачиСвязи;
	ИначеЕсли ПереключательПоказыватьПодробности = "Описание" Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаСодержаниеФайлы;
	ИначеЕсли ПереключательПоказыватьПодробности = "Переписка" Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаПереписка;
		ОбновитьДеревоПереписки();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФайлыДокумента

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Строка = Файлы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Строка.ЭтоРольФайла Тогда
		Возврат;
	КонецЕсли;
	
	Если Строка.ЭтоДокументЭДО Тогда
		ПоказатьЗначение(,Строка.ДокументЭДО);
		Возврат;
	КонецЕсли;	
	
	Если Строка.ПодписанЭП Или ДокументПодписан Тогда
		РаботаСФайламиКлиент.ОткрытьФайлДокумента(Строка.Ссылка, ЭтаФорма);
	Иначе
		ВыборФайла(Строка.Ссылка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)

	ОбзорСпискаДокументовКлиент.УстановитьДоступностьКоманд(Элементы.ФайлыДокумента.ТекущиеДанные,
		ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	Отказ = Истина;
	ПараметрыДобавления = Новый Структура;
	ФайлыПередНачаломДобавленияКлиент(Элемент, Отказ, Копирование, Родитель, Группа,
		ПараметрыДобавления);

КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавленияКлиент(Элемент, Отказ, Копирование, Родитель, Группа,
	ПараметрыДобавления)

	ДобавлениеОригинала = ПараметрыДобавления.Свойство("ДобавлениеОригинала", ДобавлениеОригинала);

	Если ВестиУчетСканКопийОригиналовДокументов И ТипЗнч(ДоступныеПоля) = Тип("Структура")
		И ДоступныеПоля.Свойство("СоздатьФайлОригинал") И Не ДоступныеПоля.Свойство(
		"СоздатьФайлОбычный") И Не ДобавлениеОригинала Тогда

		Текст = НСтр(
			"ru = 'В текущем состоянии документа можно добавить только скан-копию оригинала. Продолжить?'");

		СписокВариантовОтветов = Новый СписокЗначений;
		СписокВариантовОтветов.Добавить(Строка(КодВозвратаДиалога.Да));
		СписокВариантовОтветов.Добавить(Строка(КодВозвратаДиалога.Нет));

		ПараметрыДобавления.Вставить("ДобавлениеОригинала", ДобавлениеОригинала);

		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("Элемент", Элемент);
		ПараметрыОбработчика.Вставить("Отказ", Отказ);
		ПараметрыОбработчика.Вставить("Копирование", Копирование);
		ПараметрыОбработчика.Вставить("Родитель", Родитель);
		ПараметрыОбработчика.Вставить("Группа", Группа);
		ПараметрыОбработчика.Вставить("ПараметрыДобавления", ПараметрыДобавления);

		ОписаниеОповещения = Новый ОписаниеОповещения("ФайлыПередНачаломДобавленияКлиентПродолжение",
			ЭтотОбъект, ПараметрыОбработчика);

		ДелопроизводствоКлиент.ПоказатьРасширеннуюФормуВопроса(ЭтаФорма, НСтр(
			"ru = 'Добавление файла'"), Текст, "ДобавлениеОригинала",
			"ЗадаватьВопросПриДобавленииСканКопииОригинала", СписокВариантовОтветов, ,
			ОписаниеОповещения);
		Возврат;
	КонецЕсли;

	РольФайла = Неопределено;
	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные <> Неопределено Тогда
		РольФайла = ТекущиеДанные.РольФайла;
	КонецЕсли;

	МожноДобавитьТолькоОдинФайл = Ложь;

	Если (ЗначениеЗаполнено(ТекущийРегистрационныйНомер) Или ТекущееСостояниеОбработки
		= ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Выполняется"))
		И ТекущийЧислоРолейФайлов <> 0 И ИспользоватьРолиФайлов Тогда

		Если ВВидеЭтаРольТолькоОдинФайл(ВидДокументаКэш.РолиФайлов, РольФайла) Тогда

			НетФайловВРоли = Ложь;
			// найдем число файлов в роли
			Если ТекущиеДанные <> Неопределено Тогда
				Если ТекущиеДанные.ЭтоРольФайла Тогда
					НетФайловВРоли = (ТекущиеДанные.ПолучитьЭлементы().Количество() = 0);
				КонецЕсли;
			КонецЕсли;

			Если Не НетФайловВРоли Тогда

				ПоказатьПредупреждение( , СтрШаблон(НСтр(
					"ru = 'В роли ""%1"" с признаком ""Только один файл"" уже есть файл, поэтому добавить еще один файл в эту роль нельзя.' "),
					РольФайла));

				РольФайла = Неопределено;

				Возврат;

			Иначе

				МожноДобавитьТолькоОдинФайл = Истина;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	ВладелецФайла = ТекущийДокумент;
	Если Не Копирование Тогда
		Попытка
			РежимСоздания = ?(ДобавлениеОригинала, 2, 1);
			ДополнительныеПараметры = Новый Структура("МожноДобавитьТолькоОдинФайл",
				МожноДобавитьТолькоОдинФайл);
			ДополнительныеПараметры.Вставить("ДоступнаОтметкаОригинала",
				ТипЗнч(ДоступныеПоля) <> Тип("Структура")
				Или ТипЗнч(ДоступныеПоля) = Тип("Структура") И ДоступныеПоля.Свойство("СоздатьФайлОригинал"));

			РаботаСФайламиКлиент.ДобавитьФайл(Неопределено, ВладелецФайла, ЭтаФорма, РежимСоздания,
				Истина, ДобавлениеОригинала, , , , , , РольФайла, , ДополнительныеПараметры);
		Исключение
			ПоказатьПредупреждение( , ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаСозданияНовогоФайла(
				ИнформацияОбОшибке()));
		КонецПопытки;
	Иначе
		ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ФайлОснование = ТекущиеДанные.Ссылка;

		РаботаСФайламиКлиент.СкопироватьФайл(ВладелецФайла, ФайлОснование);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавленияКлиентПродолжение(Результат, ПараметрыОбработчика) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Или Результат = Ложь Тогда
		Возврат;
	КонецЕсли;

	ПараметрыОбработчика.ПараметрыДобавления.ДобавлениеОригинала = Истина;
	ФайлыПередНачаломДобавленияКлиент(
		ПараметрыОбработчика.Элемент, ПараметрыОбработчика.Отказ, ПараметрыОбработчика.Копирование,
		ПараметрыОбработчика.Родитель, ПараметрыОбработчика.Группа,
		ПараметрыОбработчика.ПараметрыДобавления);

КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;

	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПоказатьЗначение( , ТекущиеДанные.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	ОписаниеОповещения = Новый ОписаниеОповещения("ФайлыПередУдалениемПродолжение", ЭтотОбъект,
		Новый Структура);
	ДелопроизводствоКлиент.ПометитьФайлыДокументаНаУдаление(ЭтаФорма, ОписаниеОповещения, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалениемПродолжение(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		МассивФайлов = Параметры.МассивФайлов;
		ПометитьФайлыНаУдаление(МассивФайлов, Не Параметры.ПометкаУдаления);

		Если ПоказыватьУдаленныеФайлы Тогда
			Для Каждого Файл Из МассивФайлов Цикл
				ОбновитьСтрокуФайла(Файл);
			КонецЦикла;
		КонецЕсли;

		Если Параметры.ПодписанЭП Тогда
			Оповестить("ПрисоединенныйФайлПодписан", ТекущийДокумент);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФайлыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)

	ТекущиеДанные = Элементы.ФайлыДокумента.ТекущиеДанные;
	ВыделенныеСтроки = Элементы.ФайлыДокумента.ВыделенныеСтроки;

#Если Не ВебКлиент Тогда

	Если ВыделенныеСтроки.Количество() = 1 Тогда

		ВыбраннаяСтрока = ВыделенныеСтроки[0];
		ДанныеСтроки = Элементы.ФайлыДокумента.ДанныеСтроки(ВыбраннаяСтрока);
		ФайлСсылка = ДанныеСтроки.Ссылка;

		Если ЗначениеЗаполнено(ФайлСсылка) Тогда

			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ФайлСсылка);

			ПолноеИмяПеретаскиваемогоФайла = "";

			Обработчик = Новый ОписаниеОповещения("ПослеПолучитьФайлВерсииВРабочийКаталог",
				ЭтотОбъект);
			РаботаСФайламиКлиент.ПолучитьФайлВерсииВРабочийКаталог(Обработчик, ДанныеФайла,
				ПолноеИмяПеретаскиваемогоФайла, УникальныйИдентификатор);

		КонецЕсли;

		Если ЗначениеЗаполнено(ПолноеИмяПеретаскиваемогоФайла) Тогда
			Файл = Новый Файл(ПолноеИмяПеретаскиваемогоФайла);
			ПараметрыПеретаскивания.Значение = Файл;
			Возврат;
		Иначе
			Выполнение = Ложь;
			Возврат;
		КонецЕсли;

	КонецЕсли;

#КонецЕсли

	МассивФайловДляПеретаскивания = Новый Массив;

	Если ВыделенныеСтроки.Количество() > 1 Тогда
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.ФайлыДокумента.ДанныеСтроки(ВыбраннаяСтрока);
			МассивФайловДляПеретаскивания.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
	Иначе
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;

		МассивФайловДляПеретаскивания.Добавить(ТекущиеДанные.Ссылка);
	КонецЕсли;

	ПараметрыПеретаскивания.Значение = МассивФайловДляПеретаскивания;

КонецПроцедуры

// Продолжение процедуры после получения файла на клиент
&НаКлиенте
Процедура ПослеПолучитьФайлВерсииВРабочийКаталог(Результат, ПараметрыВыполнения) Экспорт

	Если Результат.ФайлПолучен Тогда

		ПолноеИмяПеретаскиваемогоФайла = Результат.ПолноеИмяФайла;

		Файл = Новый Файл(ПолноеИмяПеретаскиваемогоФайла);
		Если Файл.Существует() Тогда
			Файл.УстановитьТолькоЧтение(Ложь);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФайлыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка,
	Строка, Поле)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	СтандартнаяОбработка = Ложь;
	ТекущийЭлемент = Элементы.ФайлыДокумента;

	Если ТекущийЭлемент.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;

	РольФайла = Неопределено;
	ТекущиеДанные = Неопределено;
	Если Строка <> Неопределено Тогда
		ТекущиеДанные = Файлы.НайтиПоИдентификатору(Строка);
		Если ТекущиеДанные <> Неопределено Тогда
			РольФайла = ТекущиеДанные.РольФайла;
		КонецЕсли;
	КонецЕсли;

	ДрагДропНесколькоФайлов = Ложь;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
		И ПараметрыПеретаскивания.Значение.Количество() > 1 Тогда
		ДрагДропНесколькоФайлов = Истина;
	КонецЕсли;

	Если (ЗначениеЗаполнено(ТекущийРегистрационныйНомер) Или ТекущееСостояниеОбработки
		= ПредопределенноеЗначение("Перечисление.СостоянияОбработкиОбъектов.Выполняется"))
		И ТекущийЧислоРолейФайлов <> 0 И ИспользоватьРолиФайлов Тогда

		Если ВВидеЭтаРольТолькоОдинФайл(ВидДокументаКэш.РолиФайлов, РольФайла) Тогда

			НетФайловВРоли = Ложь;
			// найдем число файлов в роли
			Если ТекущиеДанные <> Неопределено Тогда
				Если ТекущиеДанные.ЭтоРольФайла Тогда
					НетФайловВРоли = (ТекущиеДанные.ПолучитьЭлементы().Количество() = 0);
				КонецЕсли;
			КонецЕсли;

			Если Не НетФайловВРоли Тогда

				ПоказатьПредупреждение( , СтрШаблон(НСтр(
					"ru = 'В роли ""%1"" с признаком ""Только один файл"" уже есть файл, поэтому добавить еще один файл в эту роль нельзя.' "),
					РольФайла));

				РольФайла = Неопределено;

				Возврат;

			Иначе

				Если ДрагДропНесколькоФайлов Тогда

					ПоказатьПредупреждение( , СтрШаблон(НСтр(
						"ru = 'В роль ""%1"" с признаком ""Только один файл"" можно добавить только один файл.' "),
						РольФайла));

					РольФайла = Неопределено;
					СтандартнаяОбработка = Ложь;

					Возврат;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если ТипЗнч(НедоступныеПоля) = Тип("Структура") И НедоступныеПоля.Свойство(
		"КонтекстноеМенюФайлыРедактировать") И ТекущийЧислоРолейФайлов <> 0
		И ИспользоватьРолиФайлов Тогда

		РольФайла = Неопределено;

		Текст = СтрШаблон(
			НСтр("ru = 'В текущем состоянии ""%1"" менять роль файлов нельзя.'"), СостояниеТекст);
		ПоказатьПредупреждение( , Текст);
		Возврат;

	КонецЕсли;

	Если ЗначениеЗаполнено(ТекущийДокумент) Тогда

		Если ТипЗнч(ДоступныеПоля) = Тип("Структура") И Не ДоступныеПоля.Свойство(
			"СоздатьФайлОригинал") И Не ДоступныеПоля.Свойство("СоздатьФайлОбычный") Тогда
			Текст = СтрШаблон(
				НСтр("ru = 'В текущем состоянии ""%1"" файлы добавлять нельзя.'"), СостояниеТекст);
			ПоказатьПредупреждение( , Текст);

			Возврат;

		ИначеЕсли ВестиУчетСканКопийОригиналовДокументов И ТипЗнч(ДоступныеПоля) = Тип("Структура")
			И ДоступныеПоля.Свойство("СоздатьФайлОригинал") И Не ДоступныеПоля.Свойство(
			"СоздатьФайлОбычный") И Не ПеретаскиваниеОригинала Тогда

			Текст = СтрШаблон(
				НСтр(
				"ru = 'В текущем состоянии ""%1"" можно добавить только скан-копию оригинала документа. Продолжить?'"),
				СостояниеТекст);

			СписокВариантовОтветов = Новый СписокЗначений;
			СписокВариантовОтветов.Добавить(Строка(КодВозвратаДиалога.Да));
			СписокВариантовОтветов.Добавить(Строка(КодВозвратаДиалога.Нет));

			ПараметрыОбработчика = Новый Структура;
			ПараметрыОбработчика.Вставить("Элемент", Элемент);
			ПараметрыОбработчика.Вставить("СтандартнаяОбработка", СтандартнаяОбработка);
			ПараметрыОбработчика.Вставить("Строка", Строка);
			ПараметрыОбработчика.Вставить("Поле", Поле);
			ПараметрыОбработчика.Вставить("ПараметрыПеретаскивания", ПараметрыПеретаскивания);

			ОписаниеОповещения = Новый ОписаниеОповещения("ФайлыПеретаскиваниеПродолжение",
				ЭтотОбъект, ПараметрыОбработчика);

			ДелопроизводствоКлиент.ПоказатьРасширеннуюФормуВопроса(ЭтаФорма, НСтр(
				"ru = 'Перетаскивание файла'"), Текст, "ДобавлениеОригинала",
				"ЗадаватьВопросПриДобавленииСканКопииОригинала", СписокВариантовОтветов, ,
				ОписаниеОповещения);
			Возврат;

		КонецЕсли;

		Если ПеретаскиваниеОригинала Тогда
			ТекстПредупреждения = "";
			ПараметрыПеретаскивания.Значение = ДелопроизводствоКлиент.ОтобратьДляПеретаскиванияТолькоФайлыОригиналы(
				ПараметрыПеретаскивания, СостояниеТекст, ТекстПредупреждения);

			Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
				ПоказатьПредупреждение( , ТекстПредупреждения);
				Возврат;
			КонецЕсли;
		КонецЕсли;

		ВладелецФайлаСписка = ТекущийДокумент;
		НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
		РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(ПараметрыПеретаскивания,
			ВладелецФайлаСписка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла, РольФайла);

		ОбзорСпискаДокументовКлиент.ЗаполнитьСписокФайлов(ЭтаФорма);

	КонецЕсли;

	ПеретаскиваниеОригинала = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскиваниеПродолжение(Результат, ПараметрыОбработчика) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Или Результат = Ложь Тогда
		ПеретаскиваниеОригинала = Ложь;
		Возврат;
	КонецЕсли;

	ПеретаскиваниеОригинала = Истина;

	ФайлыПеретаскивание(
		ПараметрыОбработчика.Элемент, ПараметрыОбработчика.ПараметрыПеретаскивания,
		ПараметрыОбработчика.СтандартнаяОбработка, ПараметрыОбработчика.Строка,
		ПараметрыОбработчика.Поле);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокЗадачи

&НаКлиенте
Процедура ЗадачиПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;

	ТекущиеДанные = Элементы.СписокЗадачи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РаботаСЗадачамиКлиент.ОткрытьКарточкуИсполнителяЗадачи(
		ТекущиеДанные.ДействиеЗадачи,
		Неопределено,
		Ложь);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	РаботаСоСпискамиДокументовКлиент.ОбработкаВыбора(ЭтотОбъект, Элементы.Список, Поле,
		СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)

	ТекущиеДанные = РаботаСоСпискамиДокументовКлиент.ПолучитьДанныеТекущейСтрокиСписка(
		Элементы.Список, Элементы.Список.ТекущаяСтрока);
	Если ТекущиеДанные = Неопределено Тогда
		ОбзорHTML = Неопределено;
		ТекущийДокумент = Неопределено;
		Файлы.ПолучитьЭлементы().Очистить();
		ДеревоПереписки.ПолучитьЭлементы().Очистить();
		СписокЗадачи.Очистить();
		Возврат;
	КонецЕсли;

	Если ТекущийДокумент <> ТекущиеДанные.Ссылка Тогда
		ПодключитьОбработчикОжидания("ОбновитьМиникарточку", 0.2, Истина);
		
		// СтандартныеПодсистемы.ПодключаемыеКоманды
		ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
		// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	Отказ = Истина;
	СоздатьНовыйДокумент(Копирование);

КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)

	РаботаСоСпискамиДокументовКлиент.СписокПередНачаломИзменения(
		Элементы.Список, Элементы.Список.ТекущаяСтрока, Отказ);

КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)

	Отказ = Истина;
	РаботаСоСпискамиДокументовКлиент.ВыполнитьУстановкуПометкиУдаления(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СписокОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)

	Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.КатегорииДанных") Тогда
		ОбновитьДеревоКатегорий(Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)

	МассивДокументов = Новый Массив;
	Для Каждого Значение Из ПараметрыПеретаскивания.Значение Цикл
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(Значение);
		Если ДанныеСтроки <> Неопределено Тогда
			МассивДокументов.Добавить(ДанныеСтроки.Ссылка);
		КонецЕсли;
	КонецЦикла;

	ПараметрыПеретаскивания.Значение = МассивДокументов;

КонецПроцедуры

&НаКлиенте
Процедура СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка,
	Строка, Поле)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	СтандартнаяОбработка = Ложь;

	Если ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам") Тогда
		ТекущаяПапкаПриПеретаскивании = Элементы.Папки.ТекущаяСтрока;
	Иначе
		ТекущаяПапкаПриПеретаскивании = Неопределено;
	КонецЕсли;

	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл")
		И ПараметрыПеретаскивания.Значение.ЭтоФайл() Тогда

		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ПараметрыПеретаскивания.Значение.ПолноеИмя);

		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("МассивФайлов", МассивФайлов);
		СоздатьНовыйДокумент(Ложь, ПараметрыОткрытияФормы);

	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда

		Если ПараметрыПеретаскивания.Значение.Количество() > 0 И ТипЗнч(
			ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда

			МассивФайлов = Новый Массив;
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				МассивФайлов.Добавить(ФайлПринятый.ПолноеИмя);
			КонецЦикла;

			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("МассивФайлов", МассивФайлов);
			СоздатьНовыйДокумент(Ложь, ПараметрыОткрытияФормы);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокОбработкаЗапросаОбновления()
	Элементы.Список.Обновить();
КонецПроцедуры

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки, ИспользуютсяСтандартныеНастройки)

	СброситьНастройкуУпорядочивания(Настройки);
	
КонецПроцедуры

&НаСервере
Процедура СписокПриСохраненииПользовательскихНастроекНаСервере(Элемент, Настройки)
	
	СброситьНастройкуУпорядочивания(Настройки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)

	МассивДокументов = Новый Массив;

	Для Каждого КлючИЗначение Из Строки Цикл

		ДанныеСтроки = КлючИЗначение.Значение.Данные;

		ОписаниеДокумента = Новый Структура("Ссылка, ВидДокумента", ДанныеСтроки.Ссылка,
			ДанныеСтроки.ВидДокумента);
		МассивДокументов.Добавить(ОписаниеДокумента);

	КонецЦикла;

	СоотвДокКолво = СвязиОбъектов.ЧислоВажныхСвязейДокументов(МассивДокументов);

	Для Каждого КлючИЗначение Из Строки Цикл

		ДанныеСтроки = КлючИЗначение.Значение.Данные;

		Документ = ДанныеСтроки.Ссылка;

		Колво = СоотвДокКолво.Получить(Документ);
		Если Колво <> Неопределено Тогда
			ДанныеСтроки.КоличествоВажныхСвязей = Колво;
		КонецЕсли;

	КонецЦикла;
	
	// Подготовка дополнительных данных.
	ВидыДокументыСтрок = Новый Массив;
	СотрудникиСтрок = Новый Массив;
	ПользователиСтрок = Новый Массив;
	Для Каждого КлючИЗначение Из Строки Цикл

		ДанныеСтроки = КлючИЗначение.Значение.Данные;

		Если ЗначениеЗаполнено(ДанныеСтроки.ВидДокумента) Тогда
			ВидыДокументыСтрок.Добавить(ДанныеСтроки.ВидДокумента);
		КонецЕсли;

		Если ДанныеСтроки.Свойство("Подготовил") И ЗначениеЗаполнено(ДанныеСтроки.Подготовил)
			И ТипЗнч(ДанныеСтроки.Подготовил) = Тип("СправочникСсылка.Сотрудники") Тогда
			СотрудникиСтрок.Добавить(ДанныеСтроки.Подготовил);
		КонецЕсли;

		Если ДанныеСтроки.Свойство("Подготовил") И ЗначениеЗаполнено(ДанныеСтроки.Подготовил)
			И ТипЗнч(ДанныеСтроки.Подготовил) = Тип("СправочникСсылка.Пользователи") Тогда
			ПользователиСтрок.Добавить(ДанныеСтроки.Подготовил);
		КонецЕсли;

	КонецЦикла;

	ВидыДокументыСтрок = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидыДокументыСтрок);
	СотрудникиСтрок = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СотрудникиСтрок);
	ПользователиСтрок = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПользователиСтрок);

	ИменаРеквизитовВидовДокументов = "ОбязателенФайлОригинала, КонтролироватьНаличиеОригинала, ЯвляетсяКомплектомДокументов";

	РеквизитыВидовДокументов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ВидыДокументыСтрок, ИменаРеквизитовВидовДокументов);

	РеквизитыСотрудников = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		СотрудникиСтрок, "Действует");

	РеквизитыПользователей = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ПользователиСтрок, "Недействителен");
	
	// Заполнение данных строк.
	ВестиУчетСканКопийОригиналовДокументов = ПолучитьФункциональнуюОпцию(
		"ВестиУчетСканКопийОригиналовДокументов");
	Для Каждого КлючИЗначение Из Строки Цикл

		ДанныеСтроки = КлючИЗначение.Значение.Данные;

		Если ЗначениеЗаполнено(ДанныеСтроки.ВидДокумента) Тогда
			РеквизитыВидаДокумента = РеквизитыВидовДокументов[ДанныеСтроки.ВидДокумента];
		Иначе
			РеквизитыВидаДокумента = Новый Структура(ИменаРеквизитовВидовДокументов);
			РеквизитыВидаДокумента.ОбязателенФайлОригинала = Ложь;
			РеквизитыВидаДокумента.КонтролироватьНаличиеОригинала = Ложь;
			РеквизитыВидаДокумента.ЯвляетсяКомплектомДокументов = Ложь;
		КонецЕсли;
		
		// Является комплектом документов.
		Если ДанныеСтроки.Свойство("ЯвляетсяКомплектомДокументов") Тогда
			ДанныеСтроки.ЯвляетсяКомплектомДокументов = РеквизитыВидаДокумента.ЯвляетсяКомплектомДокументов;
		КонецЕсли;
		
		// Индекс картинки файлы.
		Если ДанныеСтроки.Свойство("ИндексКартинкиФайлы") Тогда

			Если РеквизитыВидаДокумента.КонтролироватьНаличиеОригинала И Не ДанныеСтроки.ОригиналПолучен
				И Не ДанныеСтроки.РегистрационныйНомер = "" Тогда

				ИндексКартинкиФайлы = 4;

			ИначеЕсли Не ВестиУчетСканКопийОригиналовДокументов Или Не РеквизитыВидаДокумента.ОбязателенФайлОригинала
				Или ДанныеСтроки.СодержитОригинал Или ДанныеСтроки.РегистрационныйНомер = "" Тогда

				Если Не ДанныеСтроки.ЕстьФайлы Тогда

					ИндексКартинкиФайлы = 0;

				ИначеЕсли ДанныеСтроки.СодержитОригинал И ВестиУчетСканКопийОригиналовДокументов Тогда

					ИндексКартинкиФайлы = 2;

				Иначе

					ИндексКартинкиФайлы = 1;

				КонецЕсли;

			Иначе

				Если Не ДанныеСтроки.ЕстьФайлы Или (РеквизитыВидаДокумента.КонтролироватьНаличиеОригинала
					И Не ДанныеСтроки.ОригиналПолучен) Тогда

					ИндексКартинкиФайлы = 4;

				Иначе

					ИндексКартинкиФайлы = 3;

				КонецЕсли;

			КонецЕсли;

			ДанныеСтроки.ИндексКартинкиФайлы = ИндексКартинкиФайлы;

		КонецЕсли; 
		
		// Подготовил недействителен.
		Если ДанныеСтроки.Свойство("Подготовил") И ДанныеСтроки.Свойство(
			"ПодготовилНедействителен") Тогда

			Если ЗначениеЗаполнено(ДанныеСтроки.Подготовил) И ТипЗнч(ДанныеСтроки.Подготовил) = Тип(
				"СправочникСсылка.Сотрудники") Тогда

				РеквизитыСотрудника = РеквизитыСотрудников[ДанныеСтроки.Подготовил];

				ПодготовилНедействителен = Не РеквизитыСотрудника.Действует;

			ИначеЕсли ЗначениеЗаполнено(ДанныеСтроки.Подготовил) И ТипЗнч(ДанныеСтроки.Подготовил)
				= Тип("СправочникСсылка.Пользователи") Тогда

				РеквизитыПользователя = РеквизитыПользователей[ДанныеСтроки.Подготовил];

				ПодготовилНедействителен = РеквизитыПользователя.Недействителен;

			Иначе

				ПодготовилНедействителен = Ложь;

			КонецЕсли;

			ДанныеСтроки.ПодготовилНедействителен = ПодготовилНедействителен;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоКатегорий

&НаКлиенте
Процедура ДеревоКатегорийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если Элементы.ДеревоКатегорий.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(
		Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка) Тогда

		ПараметрыФормы = Новый Структура("Ключ", Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка);
		ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПриАктивизацииСтроки(Элемент)

	Если Элементы.ДеревоКатегорий.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекущаяКатегория = Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка Тогда
		Возврат;
	КонецЕсли;

	Если Элементы.ДеревоКатегорий.ТекущиеДанные <> Неопределено Тогда
		ТекущаяКатегория = Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка;
	КонецЕсли;

	КоличествоВыбранныхКатегорий = ВыбранныеКатегории.Количество();
	Если КоличествоВыбранныхКатегорий = 1 И ВыбранныеКатегории[0].Пометка = Ложь
		И ВыбранныеКатегории[0].Значение <> Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка Тогда
		ВыбранныеКатегории[0].Значение = Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка;
		ВыбранныеКатегории[0].Представление = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(
			ВыбранныеКатегории[0].Значение);
		ПодключитьОбработчикОжидания("ПрименитьФильтрКатегорий", 0.2, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийВыбранаПриИзменении(Элемент)

	Если Элементы.ДеревоКатегорий.ТекущиеДанные.Выбрана
		И Не ПроверитьПредельноеКоличествоОтмеченныхКатегорий() Тогда
		Элементы.ДеревоКатегорий.ТекущиеДанные.Выбрана = Ложь;
		Возврат;
	КонецЕсли;

	Если ВыбранныеКатегории.Количество() = 1 И ВыбранныеКатегории[0].Значение = ТекущаяКатегория Тогда

		ВыбранныеКатегории[0].Пометка = Элементы.ДеревоКатегорий.ТекущиеДанные.Выбрана;
		Возврат;

	КонецЕсли;
	ПодключитьОбработчикОжидания("ПрименитьФильтрКатегорий", 0.2, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	Отказ = Истина;
	ЗначениеЗаполнения = Новый Структура;
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения, ЗначениеКопирования");
	Если Не Копирование Тогда
		ЗначениеЗаполнения.Вставить("Родитель", Элемент.ТекущиеДанные.Ссылка);
	Иначе
		ПараметрыФормы.ЗначениеКопирования = Элемент.ТекущиеДанные.Ссылка;
	КонецЕсли;
	ПараметрыФормы.ЗначенияЗаполнения = ЗначениеЗаполнения;
	ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПередУдалением(Элемент, Отказ)

	ОписаниеОповещения = Новый ОписаниеОповещения("ДеревоКатегорийПередУдалениемПродолжение",
		ЭтотОбъект);

	Отказ = Истина;
	РаботаСКатегориямиДанныхКлиент.ПометитьКатегориюНаУдаление(
		Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка,
		Элементы.ДеревоКатегорий.ТекущиеДанные.ПометкаУдаления, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПередУдалениемПродолжение(Результат, Параметры) Экспорт

	ОбновитьДеревоКатегорий(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)

	ОбновитьДеревоКатегорий(Неопределено);
	ПрименитьФильтрКатегорий();
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка,
	Строка, Поле)

	ОписаниеОповещения = Новый ОписаниеОповещения("ДеревоКатегорийПеретаскиваниеПродолжение",
		ЭтотОбъект);

	РаботаСКатегориямиДанныхКлиент.ФормаСпискаОбъектовДеревоКатегорийПеретаскивание(
		ЭтаФорма, ПараметрыПеретаскивания, Строка, СтандартнаяОбработка, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПеретаскиваниеПродолжение(Результат, Параметры) Экспорт

	ОбновитьДеревоКатегорий(Неопределено);
	ПереключитьВидПросмотра();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПереписки

&НаКлиенте
Процедура ДеревоПерепискиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ТекущиеДанные = Элементы.ДеревоПереписки.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение( , ТекущиеДанные.Ссылка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоПерепискиПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;

	ТекущиеДанные = Элементы.ДеревоПереписки.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение( , ТекущиеДанные.Ссылка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоПерепискиПриАктивизацииСтроки(Элемент)

	Переписка_УстановитьДоступностьКоманд();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подписать(Команда)

	Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Не выбран документ.'");
		ПоказатьПредупреждение( , ТекстПредупреждения);
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Элементы.Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'");
		ПоказатьПредупреждение( , ТекстПредупреждения);
		Возврат;
	КонецЕсли;

	Если Элементы.Список.ТекущиеДанные.ЯвляетсяКомплектомДокументов = Истина Тогда
		ТекстПредупреждения = НСтр("ru = 'Комплекты документов не могут быть подписаны ЭП.'");
		ПоказатьПредупреждение( , ТекстПредупреждения);
		Возврат;
	КонецЕсли;

	ТекущиеДанные = Элементы.Список.ТекущиеДанные;

	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Объект", ТекущиеДанные.Ссылка);
	ОбработчикЗавершения = Новый ОписаниеОповещения("ПодписатьЗавершение", ЭтотОбъект,
		ПараметрыОбработчика);

	ПараметрыПодписания = РаботаСЭПКлиент.НовыеПараметрыПодписания();
	ПараметрыПодписания.ИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыПодписания.ОбработчикЗавершения = ОбработчикЗавершения;

	РаботаСЭПКлиент.Подписать(ТекущиеДанные.Ссылка, ПараметрыПодписания);

КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЗавершение(Результат, Параметры) Экспорт

	РаботаСЭПКлиент.ПослеПодписанияОбъекта(Результат, Параметры);

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)

	Если ТекущийЭлемент = Элементы.Папки Тогда
		Элементы.Папки.Обновить();
	ИначеЕсли ТекущийЭлемент = Элементы.ДеревоКатегорий Тогда
		ОбновитьДеревоКатегорий(Команда);
	Иначе
		Элементы.Список.Обновить();
		ОбновитьМиникарточку();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКомплект(Команда)

	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	МассивОбъектов = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(ВыделеннаяСтрока);
		МассивОбъектов.Добавить(ДанныеСтроки.Ссылка);
	КонецЦикла;

	РаботаСКомплектамиДокументовКлиент.ДобавитьВКомплект(МассивОбъектов);

КонецПроцедуры

&НаКлиенте
Процедура Автообновление(Команда)

	АвтообновлениеКлиент.УстановитьПараметрыАвтообновленияСписка(ЭтаФорма, "Список");

КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ИзменитьКатегорию(Команда)

	ТекущаяКатегория = Элементы.ДеревоКатегорий.ТекущиеДанные.Ссылка;
	Если Элементы.ДеревоКатегорий.ТекущийЭлемент.Вид <> ВидПоляФормы.ПолеФлажка И ЗначениеЗаполнено(
		ТекущаяКатегория) Тогда
		ПараметрыФормы = Новый Структура("Ключ", ТекущаяКатегория);
		ОткрытьФорму("Справочник.КатегорииДанных.ФормаОбъекта", ПараметрыФормы,
			Элементы.ДеревоКатегорий);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеОтметки(Команда)

	Если ВыбранныеКатегории.Количество() > 0 Тогда
		СнятьВсеОтметкиСервер();
		ПодключитьОбработчикОжидания("ПрименитьФильтрКатегорий", 0.2, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСУчетомВсехОтмеченных(Команда)

	ОтборДанных = "ПоВсем";
	Элементы.ДеревоКатегорийПоказыватьСУчетомОднойИзОтмеченных.Пометка = Ложь;
	Элементы.ДеревоКатегорийПоказыватьСУчетомВсехОтмеченных.Пометка = Истина;

	ПодключитьОбработчикОжидания("ПрименитьФильтрКатегорий", 0.2, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСУчетомОднойИзОтмеченных(Команда)

	ОтборДанных = "ПоОднойИз";
	Элементы.ДеревоКатегорийПоказыватьСУчетомОднойИзОтмеченных.Пометка = Истина;
	Элементы.ДеревоКатегорийПоказыватьСУчетомВсехОтмеченных.Пометка = Ложь;

	ПодключитьОбработчикОжидания("ПрименитьФильтрКатегорий", 0.2, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСУчетомИерархии(Команда)

	СУчетомПодкатегорий = Не СУчетомПодкатегорий;
	Элементы.ДеревоКатегорийПоказыватьСУчетомИерархии.Пометка = СУчетомПодкатегорий;

	ПодключитьОбработчикОжидания("ПрименитьФильтрКатегорий", 0.2, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьОтмеченныеКатегории(Команда)

	ПоказыватьСписокОтмеченных = Не ПоказыватьСписокОтмеченных;
	Элементы.ДеревоКатегорийПоказыватьВыбранныеКатегории.Пометка = ПоказыватьСписокОтмеченных;
	Элементы.ВыбранныеКатегории.Видимость = ПоказыватьСписокОтмеченных;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКатегории(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьКатегорииПродолжение", ЭтотОбъект);

	РаботаСКатегориямиДанныхКлиент.ОткрытьФормуПодбораКатегорийДляСпискаОбъектов(
		Элементы.Список, Истина, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКатегорииПродолжение(Результат, Параметры) Экспорт

	Если Результат <> Неопределено Тогда
		
		Если Не ЭтоМобильныйКлиент Тогда
			ОповеститьОбИзменении(Элементы.Список.ТекущаяСтрока);
		Иначе
			Элементы.Список.Обновить();
		КонецЕсли;
		
		ОбновитьДеревоКатегорий(Неопределено);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоКатегорий(Команда)

	СписокРаскрытыхКатегорий.Очистить();
	РаботаСКатегориямиДанныхКлиент.ПолучитьМассивРаскрытыхКатегорий(Элементы.ДеревоКатегорий,
		ДеревоКатегорий.ПолучитьЭлементы(), СписокРаскрытыхКатегорий);
	ТекущаяКатегорияДляОткрытия = ТекущаяКатегория;
	ПостроитьДеревоКатегорий();

	ИдКатегории = Неопределено;
	РаботаСКатегориямиДанныхКлиентСервер.НайтиКатегориюВДеревеПоСсылке(
		ДеревоКатегорий.ПолучитьЭлементы(), ТекущаяКатегория, ИдКатегории);
	РазвернутьРодителяИУстановитьТекущуюСтроку(ИдКатегории);
	Элементы.ДеревоКатегорий.ТекущаяСтрока = ИдКатегории;

	РаботаСКатегориямиДанныхКлиент.УстановитьРазвернутостьЭлементовДерева(Элементы.ДеревоКатегорий,
		ДеревоКатегорий, СписокРаскрытыхКатегорий);
	РаботаСКатегориямиДанныхКлиент.УстановитьПризнакВыбораЭлементовДерева(Элементы.ДеревоКатегорий,
		ДеревоКатегорий, ВыбранныеКатегории);
	ТекущаяКатегория = ТекущаяКатегорияДляОткрытия;
	РаботаСКатегориямиДанныхКлиентСервер.УстановитьТекущуюКатегориюВДеревеПоСсылке(
		Элементы.ДеревоКатегорий, ДеревоКатегорий, ТекущаяКатегория);

КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленные(Команда)

	ПоказыватьУдаленные = Не ПоказыватьУдаленные;

	ПоказатьУдаленные();

КонецПроцедуры

&НаКлиенте
Процедура НастроитьПрава(Команда)

	ТекущаяСтрока = Элементы.Папки.ТекущаяСтрока;
	Если Не ЗначениеЗаполнено(ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	// Открытие формы настройки прав.
	ПараметрыФормы = Новый Структура("СсылкаНаОбъект", ТекущаяСтрока);
	ОткрытьФорму("ОбщаяФорма.НастройкиПравПапок", ПараметрыФормы, , ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВМоиДокументы(Команда)

	МассивДокументов = РаботаСоСпискамиДокументовКлиент.ПолучитьВыбранныеДокументы(Элементы.Список);
	МоиДокументыКлиент.ДобавитьВМоиДокументы(МассивДокументов);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискПоРеквизитам(Команда)

	ПараметрыОткрытия = Новый Структура("ВидПоиска, КлючНазначенияИспользования ",
		ПредопределенноеЗначение("Перечисление.ВидыПоиска.ПоискДокументыПредприятия"),
		"ПоискИзСпискаДокументовПредприятия");
	ОткрытьФорму("Обработка.ПоискПоРеквизитам.Форма.ПоискДокументовИФайлов", ПараметрыОткрытия);

КонецПроцедуры

&НаКлиенте
Процедура МК_СписокСортироватьПоНаименованию(Команда)

	МК_ПереключитьСортировку(СписокСортироватьПо, СписокНаправлениеСортировки, "Заголовок");
	МК_СортироватьСписокПоКолонке("Заголовок", ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура МК_СписокСортироватьПоПодготовил(Команда)

	МК_ПереключитьСортировку(СписокСортироватьПо, СписокНаправлениеСортировки, "Подготовил");
	МК_СортироватьСписокПоКолонке("Подготовил", ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура МК_СписокСортироватьПоРегНомеру(Команда)

	МК_ПереключитьСортировку(СписокСортироватьПо, СписокНаправлениеСортировки,
		"РегистрационныйНомерИДата");
	МК_СортироватьСписокПоКолонке("РегистрационныйНомерИДата", ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура МК_СписокСортироватьПоДате(Команда)

	МК_ПереключитьСортировку(СписокСортироватьПо, СписокНаправлениеСортировки, "ДатаСортировки");
	МК_СортироватьСписокПоКолонке("ДатаСортировки", ЭтотОбъект);

КонецПроцедуры

// Команды работы с файлами

&НаКлиенте
Процедура ОткрытьФайлВыполнить(Команда)

	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОткрытьФайл(ТекущиеДанные.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)

	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоДокументЭДО Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ОбработчикРезультата", Неопределено);
	ПараметрыВыполнения.Вставить("ОбъектСсылка", ТекущиеДанные.Ссылка);
	ПараметрыВыполнения.Вставить("ПоказыватьОповещения", Истина);
	Обработчик = Новый ОписаниеОповещения("РедактироватьСОповещениемЗавершение", ЭтотОбъект,
		ПараметрыВыполнения);
	РаботаСФайламиКлиент.РедактироватьФайлПоСсылке(Обработчик, ТекущиеДанные.Ссылка,
		УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
// Продолжение процедуры (см. выше).
Процедура РедактироватьСОповещениемЗавершение(ФайлОтредактирован, ПараметрыВыполнения) Экспорт

	Если ФайлОтредактирован Тогда

		ОповеститьОбИзменении(ПараметрыВыполнения.ОбъектСсылка);

		Оповестить("Запись_Файл",
			Новый Структура("Событие, Файл, Владелец, ЕстьЗашифрованныеИлиЗанятыеФайлы",
			"ДанныеФайлаИзменены", ПараметрыВыполнения.ОбъектСсылка,
			ПараметрыВыполнения.ДанныеФайла.Владелец,
			ПараметрыВыполнения.ДанныеФайла.ЕстьЗашифрованныеИлиЗанятыеФайлы),
			ПараметрыВыполнения.ОбъектСсылка);

		Оповестить("Запись_Файл",
			Новый Структура("Событие, Файл, Владелец, ЕстьЗашифрованныеИлиЗанятыеФайлы",
			"ФайлРедактировался", ПараметрыВыполнения.ОбъектСсылка,
			ПараметрыВыполнения.ДанныеФайла.Владелец,
			ПараметрыВыполнения.ДанныеФайла.ЕстьЗашифрованныеИлиЗанятыеФайлы),
			ПараметрыВыполнения.ОбъектСсылка);

		Если ПараметрыВыполнения.ДанныеФайла.Свойство("ВладелецСменилПрочтенность") Тогда
			ОповеститьОбИзменении(Элементы.Список.ТекущаяСтрока);
		КонецЕсли;

	КонецЕсли;

	РаботаСФайламиКлиент.ВернутьРезультат(ПараметрыВыполнения.ОбработчикРезультата, Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)

	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.ЭтоДокументЭДО Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Неопределено,
		ТекущиеДанные.Ссылка, ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОбновленияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;
	ПараметрыОбновленияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	ПараметрыОбновленияФайла.Редактирует = ТекущиеДанные.Редактирует;
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)

	ТекущиеДанные = Элементы.ФайлыДокумента.ТекущиеДанные;
	ВыделенныеСтроки = Элементы.ФайлыДокумента.ВыделенныеСтроки;

	Если ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.ФайлыДокумента.ДанныеСтроки(ВыбраннаяСтрока);
			СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;

		Если СписокФайловДляВыгрузки.Количество() > 0 Тогда
			РаботаСФайламиКлиент.СохранитьФайлыКак(СписокФайловДляВыгрузки, УникальныйИдентификатор);
		КонецЕсли;
	Иначе
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ТекущиеДанные.ЭтоДокументЭДО Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(ТекущиеДанные.Ссылка,
			Неопределено, ЭтаФорма.УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Напечатать(Команда)

#Если ВебКлиент Тогда
	ПоказатьПредупреждение( , НСтр("ru = 'В Веб-клиенте печать файлов не поддерживается.'"));
	Возврат;
#КонецЕсли

	СистемнаяИнфо = Новый СистемнаяИнформация;
	Если СистемнаяИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86 И СистемнаяИнфо.ТипПлатформы
		<> ТипПлатформы.Windows_x86_64 Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Печать файлов возможна только в Windows.'"));
		Возврат;
	КонецЕсли;

	ТекущиеДанные = Элементы.ФайлыДокумента.ТекущиеДанные;
	ВыделенныеСтроки = Элементы.ФайлыДокумента.ВыделенныеСтроки;

	Если ВыделенныеСтроки.Количество() > 1 Тогда
		МассивФайлов = Новый Массив;
		Для Каждого ВыбраннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.ФайлыДокумента.ДанныеСтроки(ВыбраннаяСтрока);
			МассивФайлов.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;

		Если МассивФайлов.Количество() > 0 Тогда

			ДанныеФайлов = РаботаСФайламиВызовСервера.ДанныеФайловДляОткрытия(
				МассивФайлов, ЭтаФорма.УникальныйИдентификатор);

			КомандыРаботыСФайламиКлиент.НапечататьФайлы(ДанныеФайлов);

		КонецЕсли;
	Иначе
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ТекущиеДанные.ЭтоДокументЭДО Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
			ТекущиеДанные.Ссылка, Неопределено, ЭтаФорма.УникальныйИдентификатор, Неопределено,
			ПредыдущийАдресФайла);

		Если ДанныеФайла.Свойство("ВладелецСменилПрочтенность") Тогда
			ОповеститьОбИзменении(Элементы.Список.ТекущаяСтрока);
		КонецЕсли;

		КомандыРаботыСФайламиКлиент.НапечататьФайл(ДанныеФайла);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)

	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоДокументЭДО Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаИРабочийКаталог(ТекущиеДанные.Ссылка);

	РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
		Неопределено, ДанныеФайла, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокФайлов(Команда)

	ОбновитьМиникарточку();

КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленныеФайлы(Команда)

	ПоказыватьУдаленныеФайлы = Не ПоказыватьУдаленныеФайлы;

	ОбновитьМиникарточку();

	Элементы.ПоказыватьУдаленныеФайлы.Пометка = ПоказыватьУдаленныеФайлы;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)

	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РаботаСФайламиКлиент.СохранитьИзмененияФайлаСОповещением(
		Неопределено, ТекущиеДанные.Ссылка, УникальныйИдентификатор);

КонецПроцедуры

// Команды работы с режимами просмотра

&НаКлиенте
Процедура РежимПросмотраСписком(Команда)

	ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.Списком");
	ВидПросмотраПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПросмотраПоПапкам(Команда)

	ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам");

	ТекущиеДанные = РаботаСоСпискамиДокументовКлиент.ПолучитьДанныеТекущейСтрокиСписка(
		Элементы.Список, Элементы.Список.ТекущаяСтрока);

	Элементы.Папки.ТекущаяСтрока = ?(ТекущиеДанные = Неопределено, Неопределено,
		ТекущиеДанные.Папка);

	ВидПросмотраПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура РежимПросмотраПоВидамДокументов(Команда)

	ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоВидамДокументов");
	ВидПросмотраПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура РежимПросмотраПоВопросамДеятельности(Команда)

	ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоВопросамДеятельности");
	ВидПросмотраПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура РежимПросмотраПоКонтрагентам(Команда)

	ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоКонтрагентам");
	ВидПросмотраПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура РежимПросмотраПоНоменклатуреДел(Команда)

	ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоНоменклатуреДел");
	ВидПросмотраПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура РежимПросмотраПоДеламТомам(Команда)

	ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоДеламТомам");
	ВидПросмотраПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура РежимПросмотраПоКатегориям(Команда)

	ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоКатегориям");
	ВидПросмотраПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура РежимПросмотраПоПроектам(Команда)

	ВидПросмотра = ПредопределенноеЗначение("Перечисление.ВидыПросмотраСпискаОбъектов.ПоПроектам");
	ВидПросмотраПриИзменении();

КонецПроцедуры

// Команды списка задач

&НаКлиенте
Процедура ОткрытьЗадачу(Команда)

	ТекущиеДанные = Элементы.СписокЗадачи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РаботаСЗадачамиКлиент.ОткрытьКарточкуИсполнителяЗадачи(
		ТекущиеДанные.ДействиеЗадачи,
		Неопределено,
		Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьОбластьОбзора(Команда)

	ПоказыватьОбластьОбзора = Не ПоказыватьОбластьОбзора;
	Если ПоказыватьОбластьОбзора Тогда
		Элементы.ГруппаМиникарточка.Видимость = Истина;
		ОбновитьМиникарточку();
	Иначе
		Элементы.ГруппаМиникарточка.Видимость = Ложь;
	КонецЕсли;

	Элементы.ПоказыватьОбластьОбзора.Пометка = ПоказыватьОбластьОбзора;

	Если ЭтоМобильныйКлиент Тогда
		ЭтоМобильноеУстройствоСБольшимЭкраном = МК_КлиентСервер.ЭтоМобильныйСБольшимЭкраном();
		ЭтоМобильныйКлиентВПортретномРежиме = МК_ВызовСервера.ЭтоМобильныйВПортретномРежиме();
		ПриИзмененииПараметровЭкранаНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчеты(Команда)

	Раздел = ПредопределенноеЗначение("Перечисление.РазделыОтчетов.ДокументыПредприятияСписок");

	ЗаголовокФормы = НСтр("ru = 'Отчеты по документам'");

	РазделГипперСсылка = НастройкиВариантовОтчетовДокументооборот.ПолучитьРазделОтчетаПоИмени(
		"ДокументыИФайлы");

	ПараметрыФормы = Новый Структура("Раздел, ЗаголовокФормы, НеОтображатьИерархию, РазделГипперСсылка",
		Раздел, ЗаголовокФормы, Истина, РазделГипперСсылка);

	ОткрытьФорму(
		"Обработка.ВсеОтчеты.Форма.ФормаПоКатегориям", ПараметрыФормы, ЭтотОбъект,
		"ДокументыПредприятияСписок");

КонецПроцедуры

// Учет времени

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)

	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПараметрыОповещения = Неопределено;
	НуженДиалог = УчетВремениКлиент.НуженДиалогДляХронометража(ВключенХронометраж,
		ДатаНачалаХронометража, ВидыРабот);

	Если НуженДиалог = Ложь Тогда

		ПереключитьХронометражСервер(ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж,
			ТекущиеДанные.Ссылка);

	Иначе
		ДлительностьРаботы = УчетВремениКлиент.ПолучитьДлительностьРаботы(ДатаНачалаХронометража);

		ОписаниеРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Работа с документом ""%1""'"), ТекущиеДанные.Наименование);

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ДатаОтчета", ТекущаяДата());
		ПараметрыФормы.Вставить("ВидыРабот", ВидыРабот);
		ПараметрыФормы.Вставить("ОписаниеРаботы", ОписаниеРаботы);
		ПараметрыФормы.Вставить("ДлительностьРаботы", ДлительностьРаботы);
		ПараметрыФормы.Вставить("НачалоРаботы", ДатаНачалаХронометража);
		ПараметрыФормы.Вставить("Объект", ТекущиеДанные.Ссылка);
		ПараметрыФормы.Вставить("СпособУказанияВремени", СпособУказанияВремени);

		ОписаниеОповещения = Новый ОписаниеОповещения("ПереключитьХронометражПродолжение",
			ЭтотОбъект, Новый Структура("Объект", ТекущиеДанные.Ссылка));

		ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаДобавленияРаботы",
			ПараметрыФормы, , , , , ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометражПродолжение(Результат, Параметры) Экспорт

	Если Результат <> Неопределено Тогда
		ДобавитьВОтчетИОбновитьФорму(Результат, ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(ПараметрыОповещения, ВключенХронометраж,
			Параметры.Объект);
	Иначе
		ОтключитьХронометражСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)

	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ДатаОтчета = ТекущаяДата();

	УчетВремениКлиент.ДобавитьВОтчетКлиент(
		ДатаОтчета, ВключенХронометраж, ДатаНачалаХронометража, ДатаКонцаХронометража, ВидыРабот,
		ТекущиеДанные.Ссылка, СпособУказанияВремени, ЭтаФорма.Элементы.ПереключитьХронометраж, Ложь,
		ЭтаФорма); // Выполнена

КонецПроцедуры

&НаКлиенте
Процедура ПометитьКакПрочтенные(Команда)

	РаботаСоСпискамиДокументовКлиент.ПометитьКакПрочтенные(Элементы.Список);

КонецПроцедуры

#Область ОбработчикиКоманд_ДеревоПереписки

&НаКлиенте
Процедура ОбновитьПереписку(Команда)

	ОбновитьДеревоПереписки();
	Переписка_УстановитьДоступностьКоманд();

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьОтвет(Команда)

	Если (Элементы.Список.ТекущаяСтрока = Неопределено) Или (Элементы.ДеревоПереписки.ТекущаяСтрока
		= Неопределено) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначениеКопирования", Элементы.ДеревоПереписки.ТекущиеДанные.Ссылка);
	ПараметрыФормы.Вставить("Основание", Элементы.Список.ТекущаяСтрока);
	ОткрытьФорму("Справочник.ДокументыПредприятия.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Асинх Процедура ОтметитьКакДубликатОбращения(Команда)

	Если (Элементы.Список.ТекущаяСтрока = Неопределено) Или (Элементы.ДеревоПереписки.ТекущаяСтрока
		= Неопределено) Тогда
		Возврат;
	КонецЕсли;
	Если Ждать ВопросАсинх(
		НСтр("ru = 'Отметить обращение как дубликат выделенному в истории переписки?'"),
		РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	ДокументСсылка = Элементы.Список.ТекущиеДанные.Ссылка;

	Если ОтметитьКакДубликатНаСервере(ДокументСсылка,
		Элементы.ДеревоПереписки.ТекущиеДанные.Ссылка) Тогда
		ОповеститьОбИзменении(Элементы.Список.ТекущаяСтрока);

		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Обращение отмечено как дубликат:'"), ПолучитьНавигационнуюСсылку(
			ДокументСсылка), Строка(ДокументСсылка), БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьПредупреждение( , НСтр(
			"ru = 'Не заполнена корреспонденция документа. Возможно документ заполнен не до конца'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Асинх Процедура ОтметитьКакПовторноеОбращение(Команда)

	Если (Элементы.Список.ТекущиеДанные = Неопределено) Или (Элементы.ДеревоПереписки.ТекущаяСтрока
		= Неопределено) Тогда
		Возврат;
	КонецЕсли;
	Если Ждать ВопросАсинх(
		НСтр("ru = 'Отметить обращение как повторное выделенному в истории переписки?'"),
		РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	ДокументСсылка = Элементы.Список.ТекущиеДанные.Ссылка;

	Если ОтметитьКакПовторноеНаСервере(ДокументСсылка,
		Элементы.ДеревоПереписки.ТекущиеДанные.Ссылка) Тогда
		ОповеститьОбИзменении(Элементы.Список.ТекущаяСтрока);

		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Обращение отмечено как повторное:'"), ПолучитьНавигационнуюСсылку(
			ДокументСсылка), Строка(ДокументСсылка), БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьПредупреждение( , НСтр(
			"ru = 'Не заполнена корреспонденция документа. Возможно документ заполнен не до конца'"));
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура МК_ПоказатьСкрытьФайлы(Команда)

	Если КоличествоФайлов = 0 Тогда
		Элементы.ФайлыДокумента.Видимость = Ложь;
		Возврат;
	КонецЕсли;

	Элементы.ФайлыДокумента.Видимость = Не Элементы.ФайлыДокумента.Видимость;

	МК_КлиентСервер.ОформитьДополнительнуюКнопкуПоСостоянию(МК_ЭлементыСтиля,
		Элементы.МК_ПоказатьСкрытьФайлы, Элементы.ФайлыДокумента.Видимость);

КонецПроцедуры

&НаКлиенте
Процедура МК_ПоказатьСкрытьФильтры(Команда)

	Элементы.МК_ГруппаФильтры.Видимость = Не Элементы.МК_ГруппаФильтры.Видимость;

	МК_КлиентСервер.ОформитьДополнительнуюКнопкуПоСостоянию(МК_ЭлементыСтиля,
		Элементы.МК_ПоказатьСкрытьФильтры, Элементы.МК_ГруппаФильтры.Видимость);

КонецПроцедуры

&НаКлиенте
Процедура МК_ОчиститьФильтры(Команда)

	ПараметрыОтбора = Новый Соответствие;

	ПериодВыборки = Неопределено;
	Параметрыотбора.Вставить("ПериодВыборки", ПериодВыборки);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
		Элементы.ПериодВыборки, ПериодВыборки);

	Папка = Неопределено;
	Параметрыотбора.Вставить("Папка", Папка);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
		Элементы.ОтборПапка, Папка);

	ВидИТематикаТекст = Неопределено;
	ДелопроизводствоКлиент.ВидИТематикаОчистка(ЭтотОбъект, Истина);
	РаботаСоСпискамиДокументовКлиентСервер.УстановитьОтборВидДокумента(Список, ВидДокумента,
		Тематика, ДоступныеВидыДокументов);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
		Элементы.ВидИТематикаТекст, ВидИТематикаТекст);

	Организация = Неопределено;
	Параметрыотбора.Вставить("Организация", Организация);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
		Элементы.ОтборОрганизация, Организация);

	Контрагент = Неопределено;
	Параметрыотбора.Вставить("Контрагент", Контрагент);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
		Элементы.ОтборКонтрагент, Контрагент);

	Проект = Неопределено;
	Параметрыотбора.Вставить("Проект", Проект);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
		Элементы.ОтборПроект, Проект);

	Состояние = Неопределено;
	Параметрыотбора.Вставить("Состояние", Состояние);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
		Элементы.ОтборСостояние, Состояние);

	Категория = Неопределено;
	ПараметрыОтбора.Вставить("Категория", Категория);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
		Элементы.ОтборКатегория, Категория);

	Важность = Неопределено;
	ПараметрыОтбора.Вставить("Важность", Важность);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
		Элементы.ОтборВажность, Важность);

	Прочитанность = Неопределено;
	ПараметрыОтбора.Вставить("Прочитанность", Прочитанность);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
		Элементы.ОтборПрочитанность, Прочитанность);

	Если Прочитанность = "Непрочтенные" Тогда
		ЕстьОтборПоНепрочтенным = Истина;
	Иначе
		ЕстьОтборПоНепрочтенным = Ложь;
	КонецЕсли;

	СостояниеМЭДО = Неопределено;
	ПараметрыОтбора.Вставить("СостояниеМЭДО", СостояниеМЭДО);
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
		Элементы.ОтборСостояниеМЭДО, СостояниеМЭДО);

	РаботаСоСпискамиДокументовКлиентСервер.УстановитьОтборСписка(Список, ПараметрыОтбора);

КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаСодержание(Команда)

	МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.МК_СтраницаСодержаниеФайлы,
		Элементы.МК_КнопкаСтраницаСодержаниеФайлы);

КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаЗадачиСвязи(Команда)

	МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.МК_СтраницаЗадачиСвязи,
		Элементы.МК_КнопкаСтраницаЗадачиСвязи);

КонецПроцедуры

&НаКлиенте
Процедура МК_ПоказатьРазрез(Команда)

	Если ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.Списком") Тогда
		Возврат;
	КонецЕсли;

	Элементы.МК_Страницы.ТекущаяСтраница = Элементы.МК_СтраницаРазрезов;
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СкрытьРазрезы(Команда)

	Элементы.МК_Страницы.ТекущаяСтраница = Элементы.МК_СтраницаКонтент;

КонецПроцедуры

&НаКлиенте
Процедура МК_ОчиститьГруппировку(Команда)

	МК_СброситьРазрез();

КонецПроцедуры

&НаКлиенте
Процедура МК_ОтображатьВидДокумента(Команда)

	МК_ОтображатьВидДокумента = Не МК_ОтображатьВидДокумента;
	Элементы.МК_ПоказатьВидДокумента.Пометка = МК_ОтображатьВидДокумента;
	Элементы.МК_СписокВидДокумента.Видимость = МК_ОтображатьВидДокумента;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНаСервереРедакцииКонфигурации()

	Элементы.ОтборОрганизация.Подсказка = РедакцииКонфигурацииКлиентСервер.Организация();
	Элементы.ОтборОрганизация.ПодсказкаВвода = РедакцииКонфигурацииКлиентСервер.Организация();

	Элементы.ОрганизацияНоменклатурыДел.Заголовок = РедакцииКонфигурацииКлиентСервер.Организация();
	Элементы.ОрганизацияДелТомов.Заголовок = РедакцииКонфигурацииКлиентСервер.Организация();

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПоУсловиямИФункционалнымОпциям()

	Элементы.ЕстьКатегории.Видимость = ИспользоватьКатегорииДанных;
	Элементы.Важность.Видимость = ИспользоватьВажность;
	Элементы.ПодписанЭП.Видимость = ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи();
	Элементы.Задачи.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи");
	Элементы.СостояниеКонтроля.Видимость = ПолучитьФункциональнуюОпцию(
		"ИспользоватьКонтрольОбъектов");
	Элементы.ИндексСостоянияДела.Видимость = ПолучитьФункциональнуюОпцию(
		"ИспользоватьНоменклатуруДел")
		И ДелопроизводствоСерверПовтИсп.ИспользуетсяПередачаДелХранения();
	Элементы.СостояниеЭДО.Видимость = ОбщегоНазначенияБЭД.ЗначениеФункциональнойОпции(
		"ИспользоватьОбменЭД");
	Элементы.ВременныйНомер.Видимость = Нумерация.ВременныеНомераИспользуются();

	Если Не ДелопроизводствоПовтИсп.МоиДокументыИспользуются() Тогда
		Элементы.ДобавитьВМоиДокументы.Видимость = Ложь;
		Элементы.СписокКонтекстноеМенюДобавитьВМоиДокументы.Видимость = Ложь;
	КонецЕсли;

	СписокКомплектов = РаботаСКомплектамиДокументовСервер.ПолучитьСписокВидовКомплектов();
	Если СписокКомплектов.Количество() = 0 Тогда
		Элементы.ДобавитьВКомплект.Видимость = Ложь;
		Элементы.СписокКонтекстноеМенюДобавитьВКомплект.Видимость = Ложь;
	КонецЕсли;

	Если ПолучитьФункциональнуюОпцию("ИспользоватьПапкиДокументов") Тогда
		ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.ПоПапкам;
	Иначе
		ВидПросмотра = Перечисления.ВидыПросмотраСпискаОбъектов.Списком;
		Элементы.РежимПросмотраПоПапкам.Видимость = Ложь;
		Элементы.СписокКонтекстноеМенюРежимПросмотраПоПапкам.Видимость = Ложь;
		Элементы.ГруппаПапки.Видимость = Ложь;
	КонецЕсли;

	Если ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом() Тогда
		Элементы.СписокКонтекстноеМенюАвтообновление.Видимость = Ложь;
	Иначе
		Автообновление.ЗагрузитьНастройкиАвтообновленияСписка(ЭтотОбъект, "Список");
		Элементы.СписокКонтекстноеМенюАвтообновление.Видимость = Истина;
	КонецЕсли;
	
	// Установим группировки элементов в соотв. с видимостью колонок
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.Файлы);
	МассивЭлементов.Добавить(Элементы.Задачи);
	МассивЭлементов.Добавить(Элементы.КоличествоВажныхСвязей);
	МассивЭлементов.Добавить(Элементы.ПодписанЭП);
	МассивЭлементов.Добавить(Элементы.СостояниеКонтроля);
	МассивЭлементов.Добавить(Элементы.ИндексСостоянияДела);
	МассивЭлементов.Добавить(Элементы.ЕстьКатегории);
	МассивЭлементов.Добавить(Элементы.Важность);
	МассивЭлементов.Добавить(Элементы.СостояниеЭДО);

	ТекущиеГруппы = Новый Соответствие;
	ТекущиеГруппы.Вставить(0, Элементы.ГруппаФайлыЗадачи);
	ТекущиеГруппы.Вставить(1, Элементы.ГруппаЭПКатегории);
	ТекущиеГруппы.Вставить(2, Элементы.ГруппаКонтрольИСостоянияДел);
	ТекущиеГруппы.Вставить(3, Элементы.ГруппаКатегорииИВажность);
	ТекущиеГруппы.Вставить(4, Элементы.ГруппаЭДО);

	Ит = 0;
	НомерГруппы = 0;
	Для Каждого Элемент Из МассивЭлементов Цикл
		Если Элемент.Видимость = Ложь Тогда
			Продолжить;
		КонецЕсли;

		Элементы.Переместить(Элемент, ТекущиеГруппы.Получить(НомерГруппы));
		Ит = Ит + 1;

		Если Ит % 2 = 0 Тогда
			НомерГруппы = НомерГруппы + 1;
		КонецЕсли;

		Если НомерГруппы > 4 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВидПросмотраПриИзменении()

	Если ЭтоМобильныйКлиент Тогда
		МК_ПредставлениеТекущейГруппировки = "";
		Элементы.МК_Страницы.ТекущаяСтраница = Элементы.МК_СтраницаКонтент;
	КонецЕсли;

	Если ВидПросмотра = ПредыдущийВидПросмотра Тогда
		Возврат;
	КонецЕсли;

	Если ИспользоватьКатегорииДанных И ПредыдущийВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоКатегориям") Тогда
		СписокРаскрытыхКатегорий.Очистить();
		РаботаСКатегориямиДанныхКлиент.ПолучитьМассивРаскрытыхКатегорий(
			Элементы.ДеревоКатегорий, ДеревоКатегорий.ПолучитьЭлементы(), СписокРаскрытыхКатегорий);
	КонецЕсли;
	ПредыдущийВидПросмотра = ВидПросмотра;

	ПереключитьВидПросмотра();

	Если ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоНоменклатуреДел") Тогда

		Для Каждого ЭлементДерева Из НоменклатураДел.ПолучитьЭлементы() Цикл
			Элементы.СписокНоменклатураДел.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЦикла;

		Если ТекущаяНоменклатураДел <> Неопределено Тогда
			Идентификатор = Неопределено;
			ДелопроизводствоКлиент.НайтиСтрокуДереваПоСсылке(ТекущаяНоменклатураДел,
				НоменклатураДел, Идентификатор);
			Если Идентификатор <> Неопределено Тогда
				ТекущаяНоменклатураДел = Неопределено;
				Элементы.СписокНоменклатураДел.ТекущаяСтрока = Идентификатор;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоДеламТомам") Тогда

		Для Каждого ЭлементДерева Из ДелаТома.ПолучитьЭлементы() Цикл
			Элементы.ДелаТома.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЦикла;

		Если ТекущееДелоТом <> Неопределено Тогда
			Идентификатор = Неопределено;
			ДелопроизводствоКлиент.НайтиСтрокуДереваПоСсылке(ТекущееДелоТом, ДелаТома,
				Идентификатор);
			Если Идентификатор <> Неопределено Тогда
				ТекущееДелоТом = Неопределено;
				Элементы.ДелаТома.ТекущаяСтрока = Идентификатор;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоКатегориям") Тогда

		Если ИспользоватьКатегорииДанных Тогда
			РаботаСКатегориямиДанныхКлиент.УстановитьПризнакВыбораЭлементовДерева(
				Элементы.ДеревоКатегорий, ДеревоКатегорий, ВыбранныеКатегорииПриОткрытии,
				ВыбранныеКатегории);
			РаботаСКатегориямиДанныхКлиент.УстановитьРазвернутостьЭлементовДерева(
				Элементы.ДеревоКатегорий, ДеревоКатегорий, КатегорииПриОткрытии);
		КонецЕсли;

	ИначеЕсли ВидПросмотра <> ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоКатегориям") Тогда

		ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина);

	КонецЕсли;

	МК_СброситьРазрез();

КонецПроцедуры

&НаКлиенте
Функция ВВидеЭтаРольТолькоОдинФайл(РолиФайлов, Роль)

	Для Каждого ОписаниеРоли Из РолиФайлов Цикл
		Если ОписаниеРоли.Роль = Роль И ОписаниеРоли.ТолькоОдинФайл Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;

КонецФункции

&НаКлиенте
Процедура СоздатьДокументВыполнить()

	СоздатьНовыйДокумент(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьПапкуВыполнить()

	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Родитель", Элементы.Папки.ТекущаяСтрока);

	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Справочник.ПапкиДокументов.ФормаОбъекта", ПараметрыФормы, Элементы.Папки);

КонецПроцедуры

&НаКлиенте
Процедура ИмпортФайловВыполнить()

#Если Не ВебКлиент Тогда
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.Фильтр = РаботаСФайламиКлиент.ПолучитьФильтрДляДиалогаВыбораФайла();
	ДиалогОткрытияФайла.МножественныйВыбор = Истина;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файлы'");

	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Если ВидПросмотра = ПредопределенноеЗначение(
			"Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам") Тогда
			ВладелецДокумента = Элементы.Папки.ТекущаяСтрока;
		Иначе
			ВладелецДокумента = Неопределено;
		КонецЕсли;

		СписокКатегорий = Новый Массив;
		Если ВидПросмотра = ПредопределенноеЗначение(
			"Перечисление.ВидыПросмотраСпискаОбъектов.ПоКатегориям") Тогда
			Если ВыбранныеКатегории.Количество() = 0 Тогда
				СписокКатегорий.Добавить(ТекущаяКатегория);
			Иначе
				Для Каждого ВыбраннаяКатегория Из ВыбранныеКатегории Цикл
					СписокКатегорий.Добавить(ВыбраннаяКатегория.Значение);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

		ПараметрыИмпорта = Новый Структура;
		ПараметрыИмпорта.Вставить("Папка", ВладелецДокумента);
		ПараметрыИмпорта.Вставить("Файлы", ДиалогОткрытияФайла.ВыбранныеФайлы);
		ПараметрыИмпорта.Вставить("СписокКатегорий", СписокКатегорий);

		ОткрытьФорму("Справочник.ДокументыПредприятия.Форма.ФормаИмпортаФайлов", ПараметрыИмпорта,
			Элементы.Список);
	КонецЕсли;
#Иначе
		ПоказатьПредупреждение( , НСтр("ru = 'В Веб-клиенте импорт файлов не поддерживается.'"));
#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКоличествоДоступныхШаблонов()

	ЕстьДоступныеШаблоныДокументов = Делопроизводство.ЕстьДоступныеШаблоныДокументов();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораВидаПросмотра()

	Если ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруДел") Тогда
		ОрганизацияНоменклатурыДел = Справочники.Организации.ОрганизацияПоУмолчанию();
		ГодНоменклатурыДел = Год(ТекущаяДатаСеанса());
	Иначе
		Элементы.РежимПросмотраПоНоменклатуреДел.Видимость = Ложь;
		Элементы.РежимПросмотраПоДеламТомам.Видимость = Ложь;
	КонецЕсли;

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности") Тогда
		Элементы.РежимПросмотраПоВопросамДеятельности.Видимость = Ложь;
		Элементы.СписокКонтекстноеМенюРежимПросмотраПоПроектам.Видимость = Ложь;
	КонецЕсли;

	Если Не ИспользоватьКатегорииДанных Тогда
		Элементы.РежимПросмотраПоКатегориям.Видимость = Ложь;
		Элементы.СписокКонтекстноеМенюРежимПросмотраПоКатегориям.Видимость = Ложь;
	КонецЕсли;

	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда
		Элементы.РежимПросмотраПоПроектам.Видимость = Ложь;
		Элементы.СписокКонтекстноеМенюРежимПросмотраПоПроектам.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПеретаскиваниеДокументов(ПараметрыПеретаскивания, ИмяРеквизита,
	ЗначениеРеквизита, Синоним)

	ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение;

	Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") И ЗначениеПеретаскивания.Количество() > 0
		И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда

		Если ИзменитьРеквизитДокументов(
			ЗначениеПеретаскивания, ИмяРеквизита, ЗначениеРеквизита, Синоним) = Истина Тогда
			Элементы.Список.Обновить();

			Если ЗначениеПеретаскивания.Количество() = 1 Тогда
				ПолноеОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Документ ""%1"" перенесен в ""%2""'"), ЗначениеПеретаскивания[0],
					ЗначениеРеквизита);

				ПоказатьОповещениеПользователя(
					НСтр("ru = 'Документ перенесен.'"), , ПолноеОписание,
					БиблиотекаКартинок.Информация32);
			Иначе
				ПолноеОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Документы (%1 шт.) перенесены в ""%2""'"),
					ЗначениеПеретаскивания.Количество(), ЗначениеРеквизита);

				ПоказатьОповещениеПользователя(
					НСтр("ru = 'Документы перенесены.'"), , ПолноеОписание,
					БиблиотекаКартинок.Информация32);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПеретаскиваниеФайлов(ПараметрыПеретаскивания, ИмяРеквизита, ЗначениеРеквизита)

	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл")
		И ПараметрыПеретаскивания.Значение.ЭтоФайл() Тогда

		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ПараметрыПеретаскивания.Значение.ПолноеИмя);

		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить(ИмяРеквизита, ЗначениеРеквизита);

		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("МассивФайлов", МассивФайлов);
		ПараметрыОткрытияФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);

		ОткрытьФорму("Справочник.ДокументыПредприятия.ФормаОбъекта", ПараметрыОткрытияФормы,
			Элементы.Список);

	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
		И ПараметрыПеретаскивания.Значение.Количество() > 0 И ТипЗнч(
		ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда

		МассивФайлов = Новый Массив;
		Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
			МассивФайлов.Добавить(ФайлПринятый.ПолноеИмя);
		КонецЦикла;

		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить(ИмяРеквизита, ЗначениеРеквизита);

		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("МассивФайлов", МассивФайлов);
		ПараметрыОткрытияФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);

		ОткрытьФорму("Справочник.ДокументыПредприятия.ФормаОбъекта", ПараметрыОткрытияФормы,
			Элементы.Список);

	КонецЕсли;

КонецПроцедуры	

// Можно ли изменить папку у документа
// Параметры
//  ДокументСсылка  - СправочникСсылка.ДокументыПредприятия - ссылка на документ
//  СтрокаОшибки - возвращаемое - строка с ошибкой.
//
// Возвращаемое значение:
//   Булево - Истина, если можно
&НаСервереБезКонтекста
Функция МожноИзменятьПапку(ДокументСсылка)

	Шаблон = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
		ДокументСсылка, "Шаблон");

	Если ЗначениеЗаполнено(Шаблон) И Не РольДоступна("ПолныеПрава") Тогда

		ЗапретитьИзменятьРеквизитыИзШаблона 
		= ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
			Шаблон, "ЗапретитьИзменятьРеквизитыИзШаблона");

		Если ЗапретитьИзменятьРеквизитыИзШаблона И ЗначениеЗаполнено(Шаблон.Папка) Тогда
			Возврат Ложь;
		КонецЕсли;

	КонецЕсли;

	Возврат Истина;

КонецФункции	

// Переносит документы в другую папку.
// Параметры
//  МассивДокументов  - массив ссылок (СправочникСсылка.ДокументыПредприятия)
//  НоваяПапка - СправочникСсылка.ПапкиДокументов - новая папка - куда переносим
//
// Возвращаемое значение:
//   Булево - Истина, если успешно
&НаСервереБезКонтекста
Функция ИзменитьПапкуДокументов(МассивДокументов, НоваяПапка)

	Если МассивДокументов.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// тот же родитель - ничего делать не надо
	Если МассивДокументов[0].Папка = НоваяПапка Тогда
		Возврат Ложь;
	КонецЕсли;

	Для Каждого ДокументСсылка Из МассивДокументов Цикл

		Если Не ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(ДокументСсылка).Изменение Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'У вас нет права на изменение документа ""%1"".'"),
				Строка(ДокументСсылка));
		КонецЕсли;

		Если Не Делопроизводство.ПолеДокументаДоступноПоСостоянию("Папка", ДокументСсылка) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр(
				"ru = 'В текущем состоянии запрещено изменять папку у документа ""%1"".'"), Строка(
				ДокументСсылка));
		КонецЕсли;

		Если Не МожноИзменятьПапку(ДокументСсылка) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Запрещено изменять папку у документа ""%1"".'"), Строка(
				ДокументСсылка));
		КонецЕсли;

	КонецЦикла;

	НачатьТранзакцию();
	Попытка
		Для Каждого ДокументСсылка Из МассивДокументов Цикл

			ЗаблокироватьДанныеДляРедактирования(ДокументСсылка);

			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.Папка = НоваяПапка;
			ДокументОбъект.Записать();

		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

	Возврат Истина;

КонецФункции

&НаСервереБезКонтекста
Функция ИзменитьРеквизитДокументов(МассивДокументов, ИмяРеквизита, ЗначениеРеквизита, Синоним)

	Если МассивДокументов.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// ничего менять не надо
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МассивДокументов[0], ИмяРеквизита)
		= ЗначениеРеквизита Тогда
		Возврат Ложь;
	КонецЕсли;

	Для Каждого ДокументСсылка Из МассивДокументов Цикл

		Если Не ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(ДокументСсылка).Изменение Тогда
			ВызватьИсключение СтрШаблон(НСтр(
				"ru = 'У вас нет права на изменение документа ""%1"".'"), Строка(ДокументСсылка));
		КонецЕсли;

		Если Не Делопроизводство.ПолеДокументаДоступноПоСостоянию(ИмяРеквизита, ДокументСсылка) Тогда
			ВызватьИсключение СтрШаблон(
				НСтр(
				"ru = 'В текущем состоянии запрещено изменять реквизит ""%1"" у документа ""%2"".'"),
				Синоним, Строка(ДокументСсылка));
		КонецЕсли;

		Если Не Делопроизводство.ПолеДокументаДоступноДляИзменения(ИмяРеквизита, ДокументСсылка) Тогда

			ВызватьИсключение СтрШаблон(НСтр(
				"ru = 'Запрещено изменять реквизит ""%1"" у документа ""%2"".'"), Синоним, Строка(
				ДокументСсылка));
		КонецЕсли;

	КонецЦикла;

	НачатьТранзакцию();
	Попытка
		Для Каждого ДокументСсылка Из МассивДокументов Цикл
			ЗаблокироватьДанныеДляРедактирования(ДокументСсылка);
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект[ИмяРеквизита] = ЗначениеРеквизита;
			ДокументОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(ДокументОбъект.Ссылка);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура УстановитьПараметрыСписка()

	РаботаСоСпискамиДокументовКлиент.УстановитьПараметрыСписка(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОжидания()

	УстановитьПараметрыСписка();
	Если ЭтоМобильныйКлиент Тогда
		МК_ПереключитьРазрез();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПереключитьВидПросмотра()

	РаботаСоСпискамиДокументов.ПереключитьВидПросмотра(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйДокумент(Копирование, ПараметрыФормы = Неопределено)
	
	Если ЭтоМобильныйКлиент Тогда
		ТекстСообщения = НСтр("ru = 'Функциональность в мобильном клиенте пока недоступна. Воспользуйтесь веб-клиентом или тонким клиентом'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;

	Если Копирование Тогда

		ТекущиеДанные = РаботаСоСпискамиДокументовКлиент.ПолучитьДанныеТекущейСтрокиСписка(
			Элементы.Список, Элементы.Список.ТекущаяСтрока);

		Если ТекущиеДанные <> Неопределено Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ЗначениеКопирования", ТекущиеДанные.Ссылка);
			Открытьформу("Справочник.ДокументыПредприятия.ФормаОбъекта", ПараметрыФормы,
				Элементы.Список, Новый УникальныйИдентификатор);
		КонецЕсли;

	Иначе

		Если ЕстьДоступныеШаблоныДокументов Тогда
			ДополнительныеПараметры = Новый Структура;
			Если ДоступныеВидыДокументов.Количество() > 0 Тогда
				ДополнительныеПараметры.Вставить("ДоступныеВидыДокументов", ДоступныеВидыДокументов);
			КонецЕсли;
			Если ЭтоРежимОбращенияГраждан Тогда
				ДополнительныеПараметры.Вставить("СозданиеОбращенияГраждан", Истина);
			КонецЕсли;
			ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьНовыйДокументПродолжение",
				ЭтотОбъект, ПараметрыФормы);
			РаботаСШаблонамиДокументовКлиент.ПоказатьФормуСозданияДокументаПоШаблону(
				ОписаниеОповещения, "ШаблоныДокументов", ДополнительныеПараметры);
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				ДелопроизводствоКлиентСервер.Текст_НетШаблоновИлиДоступаКНим());
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйДокументПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения = ПолучитьЗначенияЗаполненияПоВидуПросмотра();
	Если ЗначенияЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КлючеваяОперация = "ДокументыПредприятияВыполнениеКомандыСоздать";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	
	ПараметрыФормы = ДелопроизводствоКлиент.ПараметрыФормыДляСозданияДокумента(Результат);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	Если ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоКатегориям") Тогда
		Если ВыбранныеКатегории.Количество() > 0 Тогда
			ПараметрыФормы.Вставить("СписокКатегорий", ВыбранныеКатегории);
		ИначеЕсли Не ТекущаяКатегория = Неопределено И Не ТекущаяКатегория.Пустая()
			И Не ТекущаяКатегория = ВсеКатегорииПредопределенное Тогда
			ПараметрыФормы.Вставить("ОднаКатегория", ТекущаяКатегория);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры) Тогда
		Для Каждого Параметр Из Параметры Цикл
			Если Параметр.Ключ = "ЗначенияЗаполнения" Тогда
				ПараметрыФормы.ЗначенияЗаполнения.Вставить(Параметр.Ключ, Параметр.Значение);
			Иначе
				ПараметрыФормы.Вставить(Параметр.Ключ, Параметр.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Открытьформу("Справочник.ДокументыПредприятия.ФормаОбъекта", ПараметрыФормы, Элементы.Список,
		Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗначенияЗаполненияПоВидуПросмотра()

	Возврат РаботаСоСпискамиДокументовКлиент.ПолучитьЗначенияЗаполненияПоВидуПросмотра(ЭтаФорма);

КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоНоменклатурыДел()

	РаботаСоСпискамиДокументов.ЗаполнитьДеревоНоменклатурыДел(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоДелТомов()

	РаботаСоСпискамиДокументов.ЗаполнитьДеревоДелТомов(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПереключитьОтборПоПроектам()

	Проекты.Параметры.УстановитьЗначениеПараметра("ТолькоМоиПроекты", ТолькоМоиПроекты);

КонецПроцедуры

&НаСервере
Процедура СнятьВсеОтметкиСервер()

	СнятьВсеОтметкиВыполнить(ДеревоКатегорий.ПолучитьЭлементы());

КонецПроцедуры

&НаСервере
Процедура СнятьВсеОтметкиВыполнить(ЭлементыОдногоУровня)

	ВыбранныеКатегории.Очистить();
	Для Каждого ЭлементУровня Из ЭлементыОдногоУровня Цикл
		ЭлементУровня.Выбрана = Ложь;
		СнятьВсеОтметкиВыполнить(ЭлементУровня.ПолучитьЭлементы());
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоКатегорий() Экспорт

	Дерево = РеквизитФормыВЗначение("ДеревоКатегорий");
	Дерево = РаботаСКатегориямиДанных.ПостроитьДеревоКатегорий(Дерево, , Истина,
		Перечисления.ТипыОбъектов.ДокументыПредприятия);
	ЗначениеВРеквизитФормы(Дерево, "ДеревоКатегорий");

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбранныхКатегорий() Экспорт

	ВыбранныеКатегории.Очистить();
	ПолучитьВыбранныеКатегории();
	ПолучитьКоличествоКатегорийДляПоиска();

	Для Каждого ВыбраннаяКатегория Из ВыбранныеКатегории Цикл
		Если Не ЗначениеЗаполнено(ВыбраннаяКатегория.Значение) Тогда
			РаботаСКатегориямиДанныхКлиентСервер.ОтключитьКатегорииКакПараметры(Список, 10);
			Список.Параметры.УстановитьЗначениеПараметра("НаличиеКатегорий", 0);
			Возврат;
		КонецЕсли;
	КонецЦикла;

	РаботаСКатегориямиДанных.СписокКатегорийВЗапросСписка(Список, 10, ВыбранныеКатегории,
		ОтборДанных, СУчетомПодкатегорий);

КонецПроцедуры

&НаКлиенте
Процедура ПрименитьФильтрКатегорий()

	КлючеваяОперация = "ДокументыПредприятияВыполнениеКомандыОтборПоКатегориям";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);

	Если ВыбранныеКатегории.Количество() > 0 Тогда
		СтрокаСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пожалуйста, подождите!%1Идет поиск данных по категориям...'"), Символы.ПС);
		Состояние(СтрокаСостояния);
	КонецЕсли;
	УстановитьПараметрыВыбранныхКатегорий();
	Если ВыбранныеКатегории.Количество() > 0 Тогда
		Состояние();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РазвернутьРодителяИУстановитьТекущуюСтроку(ИдКатегории)

	Если ДеревоКатегорий.НайтиПоИдентификатору(ИдКатегории).ПолучитьРодителя() <> Неопределено Тогда
		Элементы.ДеревоКатегорий.Развернуть(ДеревоКатегорий.НайтиПоИдентификатору(
			ИдКатегории).ПолучитьРодителя().ПолучитьИдентификатор(), Ложь);
	КонецЕсли;

	Элементы.ДеревоКатегорий.ТекущаяСтрока = ИдКатегории;

КонецПроцедуры

&НаСервере
Процедура ПолучитьКоличествоКатегорийДляПоиска()

	КоличествоВыбранныхКатегорий = ВыбранныеКатегории.Количество();
	КоличествоОтмеченныхКатегорий = 0;
	Для Каждого Элемент Из ВыбранныеКатегории Цикл
		Если Элемент.Пометка Тогда
			КоличествоОтмеченныхКатегорий = КоличествоОтмеченныхКатегорий + 1;
		КонецЕсли;
	КонецЦикла;

	Элементы.ДеревоКатегорийПоказыватьСУчетомВсехОтмеченных.Доступность = КоличествоОтмеченныхКатегорий
		> 1;
	Элементы.ДеревоКатегорийПоказыватьСУчетомОднойИзОтмеченных.Доступность = КоличествоОтмеченныхКатегорий
		> 1;

	КоличествоКатегорийДляПоиска = КоличествоВыбранныхКатегорий;
	Если КоличествоВыбранныхКатегорий > 1 Тогда
		КоличествоКатегорийДляПоиска = КоличествоОтмеченныхКатегорий;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПроверитьПредельноеКоличествоОтмеченныхКатегорий()

	КоличествоОтмеченныхКатегорий = 0;
	Для Каждого ВыбраннаяКатегория Из ВыбранныеКатегории Цикл
		Если ВыбраннаяКатегория.Пометка Тогда
			КоличествоОтмеченныхКатегорий = КоличествоОтмеченныхКатегорий + 1;
		КонецЕсли;
	КонецЦикла;

	Если КоличествоОтмеченныхКатегорий = 10 Тогда
		ТекстПредупреждения = НСтр("ru = 'Одновременно может быть отмечено не более 10 категорий.'");
		ПоказатьПредупреждение( , ТекстПредупреждения);
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

&НаСервере
Процедура ПолучитьВыбранныеКатегории()

	ПолучитьВыбранныеКатегорииВыполнить(ДеревоКатегорий.ПолучитьЭлементы(), ВыбранныеКатегории);

	ЕстьОтмеченныеКатегории = Ложь;
	Для Каждого Элемент Из ВыбранныеКатегории Цикл
		Если Элемент.Пометка = Истина Тогда
			ЕстьОтмеченныеКатегории = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ЕстьОтмеченныеКатегории Тогда
		Для Каждого Элемент Из ВыбранныеКатегории Цикл
			Если Элемент.Пометка = Ложь Тогда
				ВыбранныеКатегории.Удалить(Элемент);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ПолучитьКоличествоКатегорийДляПоиска();
	СтрокаЗаголовка = НСтр("ru = 'Категории, по которым выполняется отбор'");
	Если КоличествоКатегорийДляПоиска > 0 Тогда
		СтрокаЗаголовка = СтрокаЗаголовка + " (" + КоличествоКатегорийДляПоиска + ")";
	КонецЕсли;
	Элементы.ВыбранныеКатегории.Заголовок = СтрокаЗаголовка;

КонецПроцедуры

&НаСервере
Процедура ПолучитьВыбранныеКатегорииВыполнить(ЭлементыОдногоУровня, ВыбранныеКатегории)

	Для Каждого ЭлементУровня Из ЭлементыОдногоУровня Цикл
		Если ЭлементУровня.Выбрана Тогда
			ВыбранныеКатегории.Добавить(ЭлементУровня.Ссылка, ЭлементУровня.ПолноеНаименование,
				Истина);
		ИначеЕсли ЭлементУровня.Ссылка = ТекущаяКатегория Тогда
			ВыбранныеКатегории.Добавить(ЭлементУровня.Ссылка, ЭлементУровня.ПолноеНаименование,
				Ложь);
		КонецЕсли;
		ПолучитьВыбранныеКатегорииВыполнить(ЭлементУровня.ПолучитьЭлементы(), ВыбранныеКатегории);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПоказатьУдаленные()

	Если ПоказыватьУдаленные Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список,
			"ПометкаУдаления");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Папки,
			"ПометкаУдаления");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(ВидыДокументов,
			"ПометкаУдаления");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
			ВопросыДеятельности, "ПометкаУдаления");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Контрагенты,
			"ПометкаУдаления");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Проекты,
			"ПометкаУдаления");
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
			"ПометкаУдаления", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Папки,
			"ПометкаУдаления", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ВидыДокументов,
			"ПометкаУдаления", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ВопросыДеятельности, "ПометкаУдаления", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Контрагенты,
			"ПометкаУдаления", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Проекты,
			"ПометкаУдаления", Ложь);
	КонецЕсли;

	Элементы.ПоказыватьУдаленные.Пометка = ПоказыватьУдаленные;

КонецПроцедуры

// Заполнение миникарточки

&НаКлиенте
Процедура ОбновитьМиникарточку()

	ОбновитьПараметрыУчетаВремениВФорме();

	Если ПоказыватьОбластьОбзора Тогда
		ОбзорСпискаДокументовКлиент.ОбновитьМиникарточку(ЭтотОбъект);

		ОбновитьДеревоПереписки();

	КонецЕсли;

	Если ЭтоМобильныйКлиент Тогда
		МК_ОбновитьМиникарточку();
	КонецЕсли;

КонецПроцедуры

// Работа с файлами

&НаКлиенте
Функция ТекущиеДанныеСпискаФайлов()

	ТекущиеДанные = Элементы.ФайлыДокумента.ТекущиеДанные;

	Возврат ТекущиеДанные;

КонецФункции

&НаКлиенте
Процедура ОткрытьФайл(Файл)

	Если Не ЗначениеЗаполнено(Файл) Тогда
		Возврат;
	КонецЕсли;

	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
		Файл, Неопределено, УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);

	Если ДанныеФайла.Свойство("ВладелецСменилПрочтенность") Тогда
		ОповеститьОбИзменении(Элементы.Список.ТекущаяСтрока);
	КонецЕсли;

	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);

КонецПроцедуры

&НаКлиенте
Процедура ВыборФайла(Файл)

	КакОткрывать = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ДействиеПоДвойномуЩелчкуМыши;
	Если КакОткрывать = "ОткрыватьКарточку" Тогда
		ПоказатьЗначение( , Файл);
		Возврат;
	КонецЕсли;

	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Файл, Неопределено,
		УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла, , Истина); // НеДелатьПрочтенным

	Если ДанныеФайла.Свойство("ВладелецСменилПрочтенность") Тогда
		ОповеститьОбИзменении(Элементы.Список.ТекущаяСтрока);
	КонецЕсли;

	Если ДанныеФайла.ТребуетсяСоздатьВизуализациюЭП И ДанныеФайла.ВизуализацияЭПДобавлена = Ложь Тогда

#Если Не ВебКлиент И Не МобильныйКлиент Тогда
			// для doc файла заполним на клиенте - если не веб клиент
		РаботаСФайламиКлиент.СоздатьВизуализациюЭПВФайлеDocXls(
				ДанныеФайла, УникальныйИдентификатор);
#КонецЕсли

		КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
		Возврат;

	КонецЕсли
	;

	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", ЭтотОбъект,
		ПараметрыОбработчика);

	РаботаСФайламиКлиент.ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтрокуФайла(Файл)

	ДелопроизводствоКлиент.ОбновитьСтрокуФайла(Файлы, Файл, Истина);

КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт

	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	РезультатОткрытьКарточку = "ОткрытьКарточку";

	Если Результат = РезультатРедактировать Тогда
		Обработчик = Новый ОписаниеОповещения("СписокВыборПослеРедактированияФайла", ЭтотОбъект,
			ПараметрыВыполнения);
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, ПараметрыВыполнения.ДанныеФайла,
			УникальныйИдентификатор);
	ИначеЕсли Результат = РезультатОткрытьКарточку Тогда
		ПоказатьЗначение( , ПараметрыВыполнения.ДанныеФайла.Ссылка);
	Иначе
		Возврат;
	КонецЕсли;

	ПерсональныеНастройки = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами();
	Если ПерсональныеНастройки.СпрашиватьРежимРедактированияПриОткрытииФайла Тогда
		// Делаем прочтенным документ, если до этого он был непрочтенным
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено И ТекущиеДанные.Прочтен = Ложь Тогда
			РаботаСПрочтениями.УстановитьСвойствоПрочтен(ТекущийДокумент, Истина);
			ОповеститьОбИзменении(Элементы.Список.ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеРедактированияФайла(Результат, ПараметрыВыполнения) Экспорт

	ОбновитьСтрокуФайла(ПараметрыВыполнения.ДанныеФайла.Ссылка);

	ТекущиеДанные = ТекущиеДанныеСпискаФайлов();
	ОбзорСпискаДокументовКлиент.УстановитьДоступностьКоманд(ТекущиеДанные, ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПометитьФайлыНаУдаление(МассивФайлов, ЗначениеПометкиУдаления)

	Делопроизводство.ПометитьФайлыНаУдаление(ЭтаФорма, МассивФайлов, ЗначениеПометкиУдаления,
		Истина);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтрокуФайла(Файл)

	СтрокаИдентификатор = Неопределено;

	Для Каждого Строка Из Файлы.ПолучитьЭлементы() Цикл
		Если Не Строка.ЭтоРольФайла И Не Строка.ЭтоДокументЭДО Тогда
			Если Строка.Ссылка = Файл Тогда
				СтрокаИдентификатор = Строка.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		Иначе

			Для Каждого Подстрока Из Строка.ПолучитьЭлементы() Цикл
				Если Подстрока.Ссылка = Файл Тогда
					СтрокаИдентификатор = Подстрока.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	Если СтрокаИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Элементы.ФайлыДокумента.ТекущаяСтрока = СтрокаИдентификатор;

КонецПроцедуры	

// Устанавливает признак оригинал для нового созданного файла
//
//	Параметры
//		Файл - СправочникСсылка.Файлы - ссылка на новый файл
//
&НаКлиенте
Процедура ОтметитьПризнакОригиналУНовогоФайла(Файл)

	Если Не ВестиУчетСканКопийОригиналовДокументов Тогда
		Возврат;
	КонецЕсли;

	НайденнаяСтрока = Неопределено;

	Для Каждого Строка Из Файлы.ПолучитьЭлементы() Цикл

		Если Строка.Ссылка = Файл Тогда
			НайденнаяСтрока = Строка;
			Прервать;
		КонецЕсли;

		Для Каждого Подстрока Из Строка.ПолучитьЭлементы() Цикл
			Если Подстрока.Ссылка = Файл Тогда
				НайденнаяСтрока = Строка;
				Прервать;
			КонецЕсли;
		КонецЦикла;

	КонецЦикла;

	Если НайденнаяСтрока = Неопределено Или НайденнаяСтрока.СозданИзШаблона
		Или НайденнаяСтрока.Оригинал Тогда
		Возврат;
	КонецЕсли;

	ДоступноТолькоДобавлениеОригинала = ТипЗнч(ДоступныеПоля) = Тип("Структура")
		И ДоступныеПоля.Свойство("СоздатьФайлОригинал") И Не ДоступныеПоля.Свойство(
		"СоздатьФайлОбычный");

	Если ДоступноТолькоДобавлениеОригинала Или (ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(
		НайденнаяСтрока.Расширение) И Не Делопроизводство.ЕстьСведенияОбОригиналеФайла(Файл)) Тогда
		НайденнаяСтрока.Оригинал = Истина;
		Делопроизводство.СохранитьСведенияОбОригиналеФайла(Файл, ТекущийДокумент);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВключенУчетВажности()

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Истина
	|ИЗ
	|	Справочник.ВидыДокументов КАК ВидыДокументов
	|ГДЕ
	|	НЕ ВидыДокументов.ПометкаУдаления
	|	И ВидыДокументов.ИспользоватьВажность";

	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции

&НаКлиенте
Процедура УстановитьТекущуюСтрокуОтложенно()

	Если Не ВводДоступен() Тогда
		ПодключитьОбработчикОжидания("УстановитьТекущуюСтрокуОтложенно", 0.2, Истина);
		Возврат;
	КонецЕсли;

	УстановитьТекущуюСтроку();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтроку()

	Элементы.Список.ТекущаяСтрока = КлючЗаписиДляУстановки;

КонецПроцедуры

// Сбрасывает настройки поля сортировки - при открытии сортировка всегда опять будет по умолчанию (поле ДатаСортировки).
// Для больших баз сортировка по некоторым полям делается очень долго (десятки минут). Если это осознанно делает
// пользователь - ок, но при открытии он не должен долго ждать.
// 
// Параметры:
//  Настройки - ПользовательскиеНастройкиКомпоновкиДанных -
&НаСервере
Процедура СброситьНастройкуУпорядочивания(Настройки)
	
	Для Каждого ЭлементНастроек Из Настройки.Элементы Цикл
		Если ТипЗнч(ЭлементНастроек) = Тип("ПорядокКомпоновкиДанных") Тогда
			Для Каждого ЭлементПорядка Из ЭлементНастроек.Элементы Цикл
				ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("ДатаСортировки");
				Прервать;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоделитьсяДокументомShare()
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("Источник", ЭтотОбъект);
	ИнтеграцияShareКлиент.ПоделитьсяДокументом(ТекущийДокумент, ПараметрыКоманды);
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции_НагрузочноеТестирование

&НаКлиенте
Функция НТ_ПереключитьРежимПросмотра() Экспорт

	ВидПросмотраПриИзменении();
	Возврат Истина;

КонецФункции

&НаКлиенте
Функция НТ_СоздатьДокумент() Экспорт

	СоздатьДокументВыполнить(); //@skip-check invocation-form-event-handler
	Возврат Истина;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_РежимОбращенийГраждан

&НаСервере
Процедура ИзменитьВнешнийВидДляРежимаОбращений()

	ЭтоРежимОбращенияГраждан = (
		КлючНазначенияИспользования = РаботаСОбращениямиКлиентСервер.КлючСписокОбращенийГраждан());
	Если Не ЭтоРежимОбращенияГраждан Тогда
		Возврат; // Если не установлен параметр ЭтоРежимОбращенияГраждан, то не будет и отбора.
	КонецЕсли;
	
	Список.Параметры.УстановитьЗначениеПараметра("ЭтоРежимОбращенияГраждан", ЭтоРежимОбращенияГраждан);

	Заголовок = НСтр("ru = 'Обращения граждан и организаций'");
	АвтоЗаголовок = Ложь;
	Элементы.ДеревоПереписки.Подсказка = НСтр("ru = 'Переписка по контрагенту или гражданину'");
	
	Элементы.СписокКонтекстноеМенюГруппаКнопкиОбращений.Видимость = Истина;
	Элементы.ОтборКонтрагент.ПодсказкаВвода = НСтр("ru = 'Гражданин/Организация'");

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоПереписки()

	ТекущиеДанные = РаботаСоСпискамиДокументовКлиент.ПолучитьДанныеТекущейСтрокиСписка(
		Элементы.Список, Элементы.Список.ТекущаяСтрока);

	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ВидКорреспонденции) Тогда
		// Есть дерево переписки, обновление только если оно видно на закладке:
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаПереписка Тогда
			ОбновитьДеревоПерепискиСервер(ТекущиеДанные.Ссылка);
			ЭлементыДерева = ДеревоПереписки.ПолучитьЭлементы();
			Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
				ИдентификаторСтроки = ЭлементДерева.ПолучитьИдентификатор();
				Элементы.ДеревоПереписки.Развернуть(ИдентификаторСтроки, Истина);
				Если ЭлементДерева.Ссылка = ТекущиеДанные.Ссылка Тогда
					Элементы.ДеревоПереписки.ТекущаяСтрока = ИдентификаторСтроки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		// Не видно дерева переписки:
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаПереписка Тогда
			ДеревоПереписки.ПолучитьЭлементы().Очистить();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Обновить дерево переписки на сервере.
// 
// Параметры:
//  Документ - СправочникСсылка.ДокументыПредприятия - Документ, по которому генерируется дерево переписки
//  ЭтоОбращение - Булево - Документ является обращением граждан
&НаСервере
Процедура ОбновитьДеревоПерепискиСервер(Документ)

	Дерево = РеквизитФормыВЗначение("ДеревоПереписки");
	Дерево.Строки.Очистить();

	Если ЭтоРежимОбращенияГраждан Тогда
		
		// В этом режиме переписка в целом по контрагенту, вся история:
		Запрос = Новый Запрос(
			"// Все, кроме текущего документа:
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДокументыПредприятия.Ссылка КАК Ссылка,
			|	ДокументыПредприятия.ДатаРегистрации,
			|	ДокументыПредприятия.РегистрационныйНомер КАК РегистрационныйНомер,
			|	ДокументыПредприятия.Заголовок КАК Заголовок,
			|	ДокументыПредприятия.ДатаСоздания Как ДатаСоздания,
			|	ЛОЖЬ КАК Отправлен,
			|	""Входящее"" КАК ВидСообщения
			|ИЗ
			|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.СвязиОбъектов КАК СвязьВОтветНа
			|		ПО ДокументыПредприятия.Ссылка = СвязьВОтветНа.Объект
			|		И (СвязьВОтветНа.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ПолученВОтветНа))
			|ГДЕ
			|	ДокументыПредприятия.Контрагент = &Контрагент
			|	И СвязьВОтветНа.СвязанныйОбъект ЕСТЬ NULL
			|	И НЕ ДокументыПредприятия.ПометкаУдаления
			|	И ДокументыПредприятия.ВидДокумента.ЯвляетсяОбращениемОтГраждан
			|	И ДокументыПредприятия.Ссылка <> &ТекущийДокумент
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|// Добавить текущий документ:
			|ВЫБРАТЬ
			|	ДокументыПредприятия.Ссылка КАК Ссылка,
			|	ДокументыПредприятия.ДатаРегистрации,
			|	ДокументыПредприятия.РегистрационныйНомер КАК РегистрационныйНомер,
			|	ДокументыПредприятия.Заголовок КАК Заголовок,
			|	ДокументыПредприятия.ДатаСоздания Как ДатаСоздания,
			|	ЛОЖЬ КАК Отправлен,
			|	""Входящее"" КАК ВидСообщения
			|ИЗ
			|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
			|ГДЕ
			|	ДокументыПредприятия.Ссылка = &ТекущийДокумент
			|	И ДокументыПредприятия.Контрагент = &Контрагент
			|	И НЕ ДокументыПредприятия.ПометкаУдаления
			|	И ДокументыПредприятия.ВидДокумента.ЯвляетсяОбращениемОтГраждан
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДокументыПредприятия.Ссылка,
			|	ДокументыПредприятия.ДатаРегистрации,
			|	ДокументыПредприятия.РегистрационныйНомер,
			|	ДокументыПредприятия.Заголовок,
			|	ДокументыПредприятия.ДатаСоздания,
			|	ТчКорреспонденты.Отправлен,
			|	""Исходящее"" КАК ВидСообщения
			|ИЗ
			|	Документ.Корреспонденция.Корреспонденты КАК ТчКорреспонденты
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
			|		ПО ДокументыПредприятия.Ссылка = ТчКорреспонденты.Ссылка.Основание
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.СвязиОбъектов КАК СвязьВОтветНа
			|		ПО ДокументыПредприятия.Ссылка = СвязьВОтветНа.Объект
			|		И СвязьВОтветНа.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.ОтправленВОтветНа)
			|ГДЕ
			|	ТчКорреспонденты.Корреспондент = &Контрагент
			|	И СвязьВОтветНа.СвязанныйОбъект ЕСТЬ NULL
			|	И НЕ ДокументыПредприятия.ПометкаУдаления
			|	И ДокументыПредприятия.ВидДокумента.ЯвляетсяИсходящейКорреспонденцией
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДатаРегистрации");
		Запрос.УстановитьПараметр("Контрагент", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Контрагент"));
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ВыведенныеПисьма = Новый Массив();
			Делопроизводство.ДобавитьПисьмоВДерево(Дерево.Строки, Выборка.Ссылка, ТекущийДокумент, ВыведенныеПисьма);
		КонецЦикла;
		
	Иначе
		
		// Переписка по одному документу, как в карточке документа:
		ВыведенныеПисьма = Новый Массив();
		Делопроизводство.ДобавитьПисьмоВДерево(Дерево.Строки, Документ, ТекущийДокумент, ВыведенныеПисьма);
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоПереписки");

КонецПроцедуры

&НаКлиенте
Процедура Переписка_УстановитьДоступностьКоманд()

	Элементы.ДеревоПерепискиКонтекстноеМенюСкопироватьОтвет.Видимость = ЭтоРежимОбращенияГраждан;
	Если Не ЭтоРежимОбращенияГраждан Тогда
		Возврат;
	КонецЕсли;
	ДеревоТекущиеДанные = Элементы.ДеревоПереписки.ТекущиеДанные;
	СписокТекущаяСтрока = Элементы.Список.ТекущаяСтрока;

	Если ДеревоТекущиеДанные = Неопределено Тогда
		Элементы.СписокКонтекстноеМенюОтметитьКакПовторноеОбращение.Доступность = Ложь;
		Элементы.СписокКонтекстноеМенюОтметитьКакДубликатОбращения.Доступность = Ложь;
		Элементы.ДеревоПерепискиКонтекстноеМенюСкопироватьОтвет.Доступность = Ложь;
		Возврат;
	КонецЕсли;

	Элементы.ДеревоПерепискиКонтекстноеМенюСкопироватьОтвет.Доступность = (
		ДеревоТекущиеДанные.ВидСообщения = "Исходящее" 
		И ТипЗнч(ДеревоТекущиеДанные.Ссылка) = Тип("СправочникСсылка.ДокументыПредприятия"));

	Если СписокТекущаяСтрока = Неопределено Тогда
		Элементы.СписокКонтекстноеМенюОтметитьКакПовторноеОбращение.Доступность = Ложь;
		Элементы.СписокКонтекстноеМенюОтметитьКакДубликатОбращения.Доступность = Ложь;
		Возврат;
	КонецЕсли;

	Если ДеревоТекущиеДанные.ВидСообщения = "Входящее" И ДеревоТекущиеДанные.Ссылка
		<> СписокТекущаяСтрока Тогда
		Элементы.СписокКонтекстноеМенюОтметитьКакПовторноеОбращение.Доступность = Истина;
		Элементы.СписокКонтекстноеМенюОтметитьКакДубликатОбращения.Доступность = Истина;
	Иначе
		Элементы.СписокКонтекстноеМенюОтметитьКакПовторноеОбращение.Доступность = Ложь;
		Элементы.СписокКонтекстноеМенюОтметитьКакДубликатОбращения.Доступность = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОтметитьКакДубликатНаСервере(Документ, СвязанныйДокумент)

	КорреспонденцияСсылка = РаботаСКорреспонденцией.КорреспонденцияДокумента(Документ);
	Если Не ЗначениеЗаполнено(КорреспонденцияСсылка) Тогда
		Возврат Ложь; // Перестраховка, корреспонденция должна на этот момент быть
	КонецЕсли;

	ЗаблокироватьДанныеДляРедактирования(КорреспонденцияСсылка);
	КорреспонденцияОбъект = КорреспонденцияСсылка.ПолучитьОбъект();
	НачальноеОсновноеОбращение = КорреспонденцияОбъект.ОсновноеОбращение;

	КорреспонденцияОбъект.ЭтоДубликатОбращения = Истина;
	КорреспонденцияОбъект.ОсновноеОбращение = СвязанныйДокумент;
	КорреспонденцияОбъект.Записать();

	СвязиОбъектов.УстановитьСвязь(
		Документ, НачальноеОсновноеОбращение, СвязанныйДокумент,
		Справочники.ТипыСвязей.ОсновноеОбращение);
	Возврат Истина;

КонецФункции

&НаСервере
Функция ОтметитьКакПовторноеНаСервере(Документ, СвязанныйДокумент)

	КорреспонденцияСсылка = РаботаСКорреспонденцией.КорреспонденцияДокумента(Документ);
	Если Не ЗначениеЗаполнено(КорреспонденцияСсылка) Тогда
		Возврат Ложь; // Перестраховка, корреспонденция должна на этот момент быть
	КонецЕсли;

	ЗаблокироватьДанныеДляРедактирования(КорреспонденцияСсылка);
	КорреспонденцияОбъект = КорреспонденцияСсылка.ПолучитьОбъект();
	НачальноеПервичноеОбращение = КорреспонденцияОбъект.ПервичноеОбращение;

	КорреспонденцияОбъект.ЭтоПовторноеОбращение = Истина;
	КорреспонденцияОбъект.ПервичноеОбращение = СвязанныйДокумент;
	КорреспонденцияОбъект.Записать();

	СвязиОбъектов.УстановитьСвязь(
		Документ, НачальноеПервичноеОбращение, СвязанныйДокумент,
		Справочники.ТипыСвязей.ПервичноеОбращение);
	Возврат Истина;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Хронометраж

&НаСервере
Процедура ПереключитьХронометражСервер(ПараметрыОповещения) Экспорт

	Если ТекущийДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УчетВремени.ПереключитьХронометражСервер(
		ПараметрыОповещения, ДатаНачалаХронометража, ДатаКонцаХронометража, ВключенХронометраж,
		ТекущийДокумент, ВидыРабот, Команды.ПереключитьХронометраж, Элементы.ПереключитьХронометраж);

КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения) Экспорт

	УчетВремени.ДобавитьВОтчетИОбновитьФорму(
		ПараметрыОтчета, ПараметрыОповещения, ДатаНачалаХронометража, ДатаКонцаХронометража,
		ВключенХронометраж, Команды.ПереключитьХронометраж, Элементы.ПереключитьХронометраж);

КонецПроцедуры

&НаСервере
Процедура ОтключитьХронометражСервер() Экспорт

	Если ТекущийДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УчетВремени.ОтключитьХронометражСервер(
		ДатаНачалаХронометража, ДатаКонцаХронометража, ВключенХронометраж, ТекущийДокумент,
		Команды.ПереключитьХронометраж, Элементы.ПереключитьХронометраж);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыУчетаВремениВФорме()

	ТекущиеДанные = РаботаСоСпискамиДокументовКлиент.ПолучитьДанныеТекущейСтрокиСписка(
		Элементы.Список, Элементы.Список.ТекущаяСтрока);
	Если ТекущиеДанные = Неопределено Тогда
		Элементы.ПереключитьХронометраж.Доступность = Ложь;
		Элементы.УказатьТрудозатраты.Доступность = Ложь;
		Возврат;
	КонецЕсли;

	ТекущийДокумент = ТекущиеДанные.Ссылка;

	ПараметрыУчетаВремени = ПолучитьПараметрыУчетаВремени(ТекущиеДанные.Ссылка);

	ДатаНачалаХронометража = ПараметрыУчетаВремени.ДатаНачалаХронометража;
	ДатаКонцаХронометража = ПараметрыУчетаВремени.ДатаКонцаХронометража;
	ВключенХронометраж = ПараметрыУчетаВремени.ВключенХронометраж;
	ОпцияИспользоватьУчетВремени = ПараметрыУчетаВремени.ОпцияИспользоватьУчетВремени;
	ВидыРабот = ПараметрыУчетаВремени.ВидыРабот;
	СпособУказанияВремени = ПараметрыУчетаВремени.СпособУказанияВремени;

	Для Каждого СвойствоЭлемента Из ПараметрыУчетаВремени.ПереключитьХронометраж Цикл
		Элементы.ПереключитьХронометраж[СвойствоЭлемента.Ключ] = СвойствоЭлемента.Значение;
	КонецЦикла;

	Для Каждого СвойствоЭлемента Из ПараметрыУчетаВремени.УказатьТрудозатраты Цикл
		Элементы.УказатьТрудозатраты[СвойствоЭлемента.Ключ] = СвойствоЭлемента.Значение;
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыУчетаВремени(Документ)

	Результат = Новый Структура;

	ДатаНачалаХронометража = Неопределено;
	ДатаКонцаХронометража = Неопределено;
	ВключенХронометраж = Неопределено;
	ОпцияИспользоватьУчетВремени = Неопределено;
	ВидыРабот = Неопределено;
	СпособУказанияВремени = Неопределено;

	ПереключитьХронометражНеМеняяПодсказку = Новый Структура("Имя, Подсказка");

	ПереключитьХронометраж = Новый Структура("Доступность, Пометка, Видимость");
	ПереключитьХронометраж.Доступность = Истина;

	УказатьТрудозатраты = Новый Структура("Доступность");
	УказатьТрудозатраты.Доступность = Истина;

	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража, ДатаКонцаХронометража, ВключенХронометраж,
		ОпцияИспользоватьУчетВремени, Документ, ВидыРабот, СпособУказанияВремени,
		ПереключитьХронометражНеМеняяПодсказку, ПереключитьХронометраж, УказатьТрудозатраты);

	Результат.Вставить("ПереключитьХронометраж", Новый Соответствие);
	Результат.Вставить("УказатьТрудозатраты", Новый Соответствие);

	Результат.ПереключитьХронометраж.Вставить(
		"Доступность", ПереключитьХронометраж.Доступность);
	Результат.ПереключитьХронометраж.Вставить(
		"Пометка", ПереключитьХронометраж.Пометка);
	Результат.УказатьТрудозатраты.Вставить(
		"Доступность", УказатьТрудозатраты.Доступность);

	Результат.Вставить("ДатаНачалаХронометража", ДатаНачалаХронометража);
	Результат.Вставить("ДатаКонцаХронометража", ДатаКонцаХронометража);
	Результат.Вставить("ВключенХронометраж", ВключенХронометраж);
	Результат.Вставить("ОпцияИспользоватьУчетВремени", ОпцияИспользоватьУчетВремени);
	Результат.Вставить("ВидыРабот", ВидыРабот);
	Результат.Вставить("СпособУказанияВремени", СпособУказанияВремени);

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_МобильныйКлиент

&НаСервере
Процедура МК_НастроитьЭлементыФормы()

	МК_ЭлементыСтиля = МК_ПовтИсп.ЭлементыСтиля();
	
	// Общая адаптация.
	Элементы.МК.Видимость = Истина;
	Элементы.ГруппаОтборыИМиникарточка.Видимость = Ложь;

	СворачиваниеЭлементовПоВажности = СворачиваниеЭлементовФормыПоВажности.НеИспользовать;
	ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	
	// Страницы разрезов.
	Элементы.МК_Страницы.ТекущаяСтраница = Элементы.МК_СтраницаКонтент;
	Элементы.Переместить(Элементы.СтраницыДеревоРазрезов, Элементы.МК_СтраницаРазрезов,
		Элементы.МК_СкрытьРазрезы);
	Элементы.СтраницыДеревоРазрезов.Ширина = 20;
	
	// Команды разреза.
	МК.ОформитьКнопкуФильтра(Элементы.МК_КнопкаЗаголовокРазреза, Истина);
	
	// Список.
	Элементы.Переместить(Элементы.Список, Элементы.МК_ГруппаСписок);
	Элементы.Переместить(Элементы.МК_НижнийБлок, Элементы.МК_ГруппаСписок);
	МК_АдаптироватьСписокДокументов();

	МК_АдаптироватьФильтры();
	МК_АдаптироватьКоманднуюПанель();
	
	// Верхний блок.
	Элементы.МК_ГруппаФильтры.Видимость = Ложь;
	МК.ОформитьДополнительнуюКнопкуПоСостоянию(Элементы.МК_ПоказатьСкрытьФильтры,
		Элементы.МК_ГруппаФильтры.Видимость);

	Элементы.ФайлыДокумента.Видимость = КоличествоФайлов > 0;
	МК.ОформитьДополнительнуюКнопкуПоСостоянию(Элементы.МК_ПоказатьСкрытьФайлы,
		Элементы.ФайлыДокумента.Видимость);

	// Нижний блок.
	Элементы.Переместить(Элементы.СоздатьДокумент, Элементы.МК_НижнийБлок);
	Элементы.СоздатьДокумент.Отображение = ОтображениеКнопки.Текст;
	Элементы.СоздатьДокумент.Заголовок = НСтр("ru = 'Создать'");
	МК.ОформитьАкцентнуюКнопку(Элементы.СоздатьДокумент);
	
	// Командная панель.
	Элементы.Подписать.Видимость = Ложь;
	Элементы.ПометитьКакПрочтенные.Видимость = Ложь;
	Элементы.Обновить.Видимость = Ложь;

	Если ПустаяСтрока(СписокСортироватьПо) Тогда
		СписокСортироватьПо = "Заголовок";
		СписокНаправлениеСортировки = "Возр";
	КонецЕсли;

	ПриИзмененииПараметровЭкранаНаСервере();

КонецПроцедуры

&НаСервере
Процедура МК_АдаптироватьКоманднуюПанель()

	ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;

	СоставКоманднойПанелиНаМобильномУстройстве.Добавить(Элементы.МК_КоманднаяПанель);
	Элементы.ГруппаКоманды.Видимость = Ложь;

	Элементы.Переместить(Элементы.ПоказыватьОбластьОбзора, Элементы.МК_НастройкиСписка);
	Элементы.ПоказыватьОбластьОбзора.ПоложениеВКоманднойПанели = ПоложениеВКоманднойПанели;

	Элементы.Переместить(Элементы.ПоказыватьУдаленные, Элементы.МК_НастройкиСписка);
	Элементы.ПоказыватьУдаленные.ПоложениеВКоманднойПанели = ПоложениеВКоманднойПанели;

	Элементы.Переместить(Элементы.МК_ПоказатьВидДокумента, Элементы.МК_НастройкиСписка);
	Элементы.МК_ПоказатьВидДокумента.ПоложениеВКоманднойПанели = ПоложениеВКоманднойПанели;

	Элементы.Переместить(Элементы.ГруппаРежимПросмотра, Элементы.МК_КоманднаяПанель);

	Элементы.РежимПросмотраСписком.ПоложениеВКоманднойПанели = ПоложениеВКоманднойПанели;
	Элементы.РежимПросмотраПоПапкам.ПоложениеВКоманднойПанели = ПоложениеВКоманднойПанели;
	Элементы.РежимПросмотраПоВидамДокументов.ПоложениеВКоманднойПанели = ПоложениеВКоманднойПанели;
	Элементы.РежимПросмотраПоВопросамДеятельности.ПоложениеВКоманднойПанели = ПоложениеВКоманднойПанели;
	Элементы.РежимПросмотраПоКонтрагентам.ПоложениеВКоманднойПанели = ПоложениеВКоманднойПанели;
	Элементы.РежимПросмотраПоНоменклатуреДел.ПоложениеВКоманднойПанели = ПоложениеВКоманднойПанели;
	Элементы.РежимПросмотраПоДеламТомам.ПоложениеВКоманднойПанели = ПоложениеВКоманднойПанели;
	Элементы.РежимПросмотраПоКатегориям.ПоложениеВКоманднойПанели = ПоложениеВКоманднойПанели;
	Элементы.РежимПросмотраПоПроектам.ПоложениеВКоманднойПанели = ПоложениеВКоманднойПанели;

КонецПроцедуры

&НаСервере
Процедура МК_АдаптироватьФильтры()

	Элементы.Переместить(Элементы.ПериодВыборки, Элементы.МК_ФильтрыПерваяСтрока);
	Элементы.Переместить(Элементы.ОтборПапка, Элементы.МК_ФильтрыПерваяСтрока);

	Элементы.Переместить(Элементы.ВидИТематикаТекст, Элементы.МК_ФильтрыВтораяСтрока);
	Элементы.Переместить(Элементы.ОтборОрганизация, Элементы.МК_ФильтрыВтораяСтрока);

	Элементы.Переместить(Элементы.ОтборКонтрагент, Элементы.МК_ФильтрыТретьяСтрока);
	Элементы.Переместить(Элементы.ОтборПроект, Элементы.МК_ФильтрыТретьяСтрока);

	Элементы.Переместить(Элементы.ОтборСостояние, Элементы.МК_ФильтрыЧетвертаяСтрока);
	Элементы.Переместить(Элементы.ОтборКатегория, Элементы.МК_ФильтрыЧетвертаяСтрока);

	Элементы.Переместить(Элементы.ОтборВажность, Элементы.МК_ФильтрыПятаяСтрока);
	Элементы.Переместить(Элементы.ОтборПрочитанность, Элементы.МК_ФильтрыПятаяСтрока);

	Элементы.Переместить(Элементы.ОтборСостояниеМЭДО, Элементы.МК_ГруппаФильтры);
	МК.ОформитьКнопкуФильтра(Элементы.МК_ОчиститьФильтры, Истина);

КонецПроцедуры

&НаСервере
Процедура МК_АдаптироватьСписокДокументов()

	Элементы.Список.Шапка = Ложь;
	Элементы.Список.ВертикальныеЛинии = Ложь;
	Элементы.Список.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.ЗаголовокФормы;
	
	// Скроем колонки.
	Элементы.ГруппаФайлыЗадачи.Видимость = Ложь;
	Элементы.ГруппаЭПКатегории.Видимость = Ложь;
	Элементы.ГруппаКонтрольИСостоянияДел.Видимость = Ложь;
	Элементы.ГруппаКатегорииИВажность.Видимость = Ложь;
	Элементы.ГруппаЭДО.Видимость = Ложь;
	Элементы.ГруппаВидТематика.Видимость = Ложь;
	Элементы.ГруппаРегНомерДатаИВремНомер.Видимость = Ложь;
	Элементы.ГруппаРегистрационныйНомерИДата.Видимость = Ложь;
	Элементы.ГруппаУтвердилПодготовил.Видимость = Ложь;
	Элементы.ВнутреннийНомер.Видимость = Ложь;
	Элементы.ДатаСортировки.Видимость = Ложь;
	Элементы.Папка.Видимость = Ложь;

	Элементы.Организация.Видимость = Ложь;
	Элементы.Сторона1.Видимость = Ложь;
	Элементы.Подразделение.Видимость = Ложь;
	Элементы.СрокИсполнения.Видимость = Ложь;
	Элементы.Проект.Видимость = Ложь;
	Элементы.НоменклатураДел.Видимость = Ложь;

	Элементы.Дело.Видимость = Ложь;
	Элементы.ВопросДеятельности.Видимость = Ложь;
	Элементы.КонтрагентыДляСписков.Видимость = Ложь;
	Элементы.АдресатыДляСписков.Видимость = Ложь;
	Элементы.Сторона2.Видимость = Ложь;

	Элементы.Зарегистрировал.Видимость = Ложь;
	Элементы.Создал.Видимость = Ложь;
	Элементы.Ответственный.Видимость = Ложь;
	Элементы.Состояние.Видимость = Ложь;
	Элементы.Сумма.Видимость = Ложь;
	Элементы.Валюта.Видимость = Ложь;

	Элементы.ДатаНачалаДействия.Видимость = Ложь;
	Элементы.ДатаОкончанияДействия.Видимость = Ложь;
	Элементы.ПодписанВсеми.Видимость = Ложь;
	Элементы.Прочтен.Видимость = Ложь;
	Элементы.ВидОбращения.Видимость = Ложь;
	Элементы.ИсходящийНомерИДата.Видимость = Ложь;

	Элементы.Повторное.Видимость = Ложь;
	Элементы.Дубликат.Видимость = Ложь;
	Элементы.Переадресовавший.Видимость = Ложь;
	Элементы.СпособПолучения.Видимость = Ложь;
	Элементы.СостояниеМЭДО.Видимость = Ложь;
	Элементы.Содержание.Видимость = Ложь;

	Элементы.Ссылка.Видимость = Ложь;
	
	// Скроем команды из контекстного меню.
	Элементы.СписокКонтекстноеМенюОбновить.Видимость = Ложь;
	Элементы.СписокКонтекстноеМенюАвтообновление.Видимость = Ложь;
	Элементы.ГруппаСтандартныхКоманд.Видимость = Ложь;
	Элементы.КонтекстноеМенюСписокИмпортФайлов.Видимость = Ложь;

	Элементы.МК_ГруппаКолонок.Видимость = Истина;

	Элементы.Переместить(Элементы.Файлы, Элементы.МК_СписокКартинки);
	Элементы.Переместить(Элементы.СостояниеКонтроля, Элементы.МК_СписокКартинки);
	Элементы.Переместить(Элементы.Задачи, Элементы.МК_СписокКартинки);
	Элементы.Переместить(Элементы.Важность, Элементы.МК_СписокКартинки);

	Элементы.Переместить(Элементы.Наименование, Элементы.МК_СписокНаименование);
	Элементы.Переместить(Элементы.РегистрационныйНомерИДата, Элементы.МК_СписокРегНомер);
	Элементы.Переместить(Элементы.ВидДокумента, Элементы.МК_СписокВидДокумента);
	Элементы.Переместить(Элементы.Подготовил, Элементы.МК_СписокПодготовил);

	Элементы.Файлы.ВажностьПриОтображении = ВажностьПриОтображении.Низкая;
	Элементы.ПодписанЭП.ВажностьПриОтображении = ВажностьПриОтображении.Низкая;
	Элементы.СостояниеКонтроля.ВажностьПриОтображении = ВажностьПриОтображении.Низкая;
	Элементы.Наименование.ВажностьПриОтображении = ВажностьПриОтображении.Высокая;
	Элементы.РегистрационныйНомерИДата.ВажностьПриОтображении = ВажностьПриОтображении.Обычная;
	Элементы.Подготовил.ВажностьПриОтображении = ВажностьПриОтображении.Обычная;

	Элементы.Наименование.Высота = 2;
	Элементы.Наименование.АвтоВысотаЯчейки = Ложь;

	Элементы.Подготовил.ЦветТекста = WebЦвета.ТемноСерый;
	Элементы.Подготовил.Высота = 1;
	Элементы.Подготовил.АвтоВысотаЯчейки = Ложь;

	Элементы.РегистрационныйНомерИДата.Высота = 1;
	Элементы.РегистрационныйНомерИДата.АвтоВысотаЯчейки = Ложь;

КонецПроцедуры

&НаСервере
Процедура МК_АдаптироватьМиникарточку()

	Элементы.МК_ГруппаМиникарточка.Видимость = Истина;
	
	// Содержание.
	Элементы.Переместить(Элементы.ОбзорHTML, Элементы.МК_СтраницаСодержаниеФайлы, Элементы.МК_Файлы);
	
	// Файлы.
	Элементы.ФайлыДокумента.Шапка = Ложь;
	Элементы.ФайлыРольФайла.Видимость = Ложь;
	Элементы.ФайлыДокументаОписание.Видимость = Ложь;

	Элементы.ФайлыДокументаНаименование.Высота = 1;

	Элементы.Переместить(Элементы.ФайлыДокумента, Элементы.МК_Файлы);
	
	// Задачи.
	Элементы.СписокЗадачи.Шапка = Ложь;
	Элементы.Переместить(Элементы.СписокЗадачи, Элементы.МК_СтраницаЗадачиСвязи);

КонецПроцедуры

&НаКлиенте
Процедура МК_ОбновитьМиникарточку()

	МК_ОбновитьЗаголовкиПредпросмотра(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПараметровЭкранаНаСервере()

	Если Не ЭтоМобильныйКлиент Тогда
		Возврат;
	КонецЕсли;

	Если Не ПоказыватьОбластьОбзора Тогда
		МК_НастроитьФормуДляМаленькихЭкранов();
		Возврат;
	КонецЕсли;

	Если ЭтоМобильноеУстройствоСБольшимЭкраном И Не ЭтоМобильныйКлиентВПортретномРежиме Тогда
		МК_НастроитьФормуДляБольшихЭкранов();
	Иначе
		МК_НастроитьФормуДляМаленькихЭкранов();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура МК_НастроитьФормуДляБольшихЭкранов()

	Элементы.Список.ИспользованиеТекущейСтроки = ИспользованиеТекущейСтрокиТаблицы.ОтображениеВыделенияИВыбор;

	Элементы.МК_СтраницаКонтент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	Элементы.Переместить(Элементы.МК_СтраницаРазрезов, Элементы.МК_СтраницаКонтент,
		Элементы.МК_ГруппаСписокИФильтры);
	Элементы.МК_СкрытьРазрезы.Видимость = Ложь;

	Элементы.МК_ФильтрыПерваяСтрока.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	Элементы.МК_ФильтрыВтораяСтрока.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	Элементы.МК_ФильтрыТретьяСтрока.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	Элементы.МК_ФильтрыЧетвертаяСтрока.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	Элементы.МК_ФильтрыПятаяСтрока.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;

	Элементы.МК_КнопкаЗаголовокРазреза.Доступность = Ложь;

	МК_СброситьОформлениеПереключателейСтраницПредпросмотра(ЭтотОбъект);
	МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.МК_СтраницаСодержаниеФайлы,
		Элементы.МК_КнопкаСтраницаСодержаниеФайлы);

	МК_ОбновитьЗаголовкиПредпросмотра(ЭтотОбъект);
	МК_АдаптироватьМиникарточку();

КонецПроцедуры

&НаСервере
Процедура МК_НастроитьФормуДляМаленькихЭкранов()

	Элементы.МК_ГруппаМиникарточка.Видимость = Ложь;

	Элементы.МК_СтраницаКонтент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Элементы.Переместить(Элементы.МК_СтраницаРазрезов, Элементы.МК_Страницы,
		Элементы.МК_СтраницаКонтент);
	Элементы.МК_СкрытьРазрезы.Видимость = Истина;

	Элементы.МК_ФильтрыПерваяСтрока.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Элементы.МК_ФильтрыВтораяСтрока.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Элементы.МК_ФильтрыТретьяСтрока.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Элементы.МК_ФильтрыЧетвертаяСтрока.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Элементы.МК_ФильтрыПятаяСтрока.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;

	Элементы.МК_КнопкаЗаголовокРазреза.Доступность = Истина;

	Элементы.Список.ИспользованиеТекущейСтроки = ИспользованиеТекущейСтрокиТаблицы.Выбор;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_СброситьОформлениеПереключателейСтраницПредпросмотра(Форма)

	МК_КлиентСервер.ОформитьДополнительнуюКнопкуПоСостоянию(Форма.МК_ЭлементыСтиля,
		Форма.Элементы.МК_КнопкаСтраницаСодержаниеФайлы, Ложь);

	МК_КлиентСервер.ОформитьДополнительнуюКнопкуПоСостоянию(Форма.МК_ЭлементыСтиля,
		Форма.Элементы.МК_КнопкаСтраницаЗадачиСвязи, Ложь);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_ПереключитьНаСтраницу(Форма, Страница, Кнопка)

	Форма.Элементы.МК_СтраницыМиникарточки.ТекущаяСтраница = Страница;
	МК_СброситьОформлениеПереключателейСтраницПредпросмотра(Форма);
	МК_КлиентСервер.ОформитьДополнительнуюКнопкуПоСостоянию(Форма.МК_ЭлементыСтиля, Кнопка, Истина);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_ОбновитьЗаголовкиПредпросмотра(Форма)
	
	// Для файлов.
	Если Форма.КоличествоФайлов > 0 Тогда
		Форма.Элементы.МК_ФайлыНадпись.Заголовок = СтрШаблон(НСтр("ru = 'Файлы (%1)'"),
			Форма.КоличествоФайлов);
	Иначе
		Форма.Элементы.МК_ФайлыНадпись.Заголовок = НСтр("ru = 'Файлы'");
	КонецЕсли;
	
	// Для страницы "Задачи".
	Если Форма.КоличествоЗадач > 0 Тогда
		Форма.Элементы.МК_КнопкаСтраницаЗадачиСвязи.Заголовок = СтрШаблон(НСтр(
			"ru = 'Задачи (%1)'"), Форма.КоличествоЗадач);
	Иначе
		Форма.Элементы.МК_КнопкаСтраницаЗадачиСвязи.Заголовок = НСтр("ru = 'Задачи'");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МК_ПереключитьРазрез()

	Если Не ЭтоМобильныйКлиент Тогда
		Возврат;
	КонецЕсли;

	МК_ОбновитьРазрез(ЭтотОбъект);
	Элементы.МК_Страницы.ТекущаяСтраница = Элементы.МК_СтраницаКонтент;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_ОбновитьРазрез(Форма)

	Если Не Форма.ЭтоМобильныйКлиент Тогда
		Возврат;
	КонецЕсли;
	
	ОформитьЗаголовокРазреза(Форма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОформитьЗаголовокРазреза(Форма)

	Форма.МК_ПредставлениеТекущейГруппировки = "";
	
	Если Форма.ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам") Тогда
		
		ЗаголовокГруппировки = НСтр("ru = 'Папка'");
		
		Если ЗначениеЗаполнено(Форма.ТекущаяПапка) Тогда
			ПредставлениеГруппировки = Форма.ТекущаяПапка;
		КонецЕсли;
		
	ИначеЕсли Форма.ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоВидамДокументов") Тогда
		ЗаголовокГруппировки = НСтр("ru = 'Вид'");
		Если ЗначениеЗаполнено(Форма.ТекущийВидДокумента) Тогда
			ПредставлениеГруппировки = Форма.ТекущийВидДокумента;
		КонецЕсли;
		
	ИначеЕсли Форма.ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоВопросамДеятельности") Тогда
		ЗаголовокГруппировки = НСтр("ru = 'Вопрос деятельности'");

		Если ЗначениеЗаполнено(Форма.ТекущийВопросДеятельности) Тогда
			ПредставлениеГруппировки = Форма.ТекущийВопросДеятельности;
		КонецЕсли;
		
	ИначеЕсли Форма.ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоКонтрагентам") Тогда
		ЗаголовокГруппировки = НСтр("ru = 'Контрагент'");
		
		Если ЗначениеЗаполнено(Форма.ТекущийКонтрагент) Тогда
			ПредставлениеГруппировки = Форма.ТекущийКонтрагент;
		КонецЕсли;
		
	ИначеЕсли Форма.ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоНоменклатуреДел") Тогда
		ЗаголовокГруппировки = НСтр("ru = 'Номенклатура дел'");
		
		Если ЗначениеЗаполнено(Форма.ТекущаяНоменклатураДел) Тогда
			ПредставлениеГруппировки = Форма.ТекущаяНоменклатураДел;
		КонецЕсли;
		
	ИначеЕсли Форма.ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоДеламТомам") Тогда
		ЗаголовокГруппировки = НСтр("ru = 'Дело'");
				
		Если ЗначениеЗаполнено(Форма.ТекущееДелоТом) Тогда
			ПредставлениеГруппировки = Форма.ТекущееДелоТом;
		КонецЕсли;
		
	ИначеЕсли Форма.ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоКатегориям") Тогда
		ЗаголовокГруппировки = НСтр("ru = 'Категория'");
		
		Если ЗначениеЗаполнено(Форма.ТекущаяКатегория) Тогда
			ПредставлениеГруппировки = Форма.ТекущаяКатегория;
		КонецЕсли;

	ИначеЕсли Форма.ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоПроектам") Тогда
		ЗаголовокГруппировки = НСтр("ru = 'Проект'");
		Если ЗначениеЗаполнено(Форма.ТекущийПроект) Тогда
			ПредставлениеГруппировки = Форма.ТекущийПроект;
		КонецЕсли;
		
	Иначе
		ЗаголовокГруппировки = НСтр("ru = 'Списком'");
	КонецЕсли;
	
	ЕстьГруппировка = ЗначениеЗаполнено(ПредставлениеГруппировки);
	Если ЕстьГруппировка Тогда
		Форма.МК_ПредставлениеТекущейГруппировки = ПредставлениеГруппировки;
		ЗаголовокГруппировки = СтрШаблон("%1 (%2)", Строка(ПредставлениеГруппировки), ЗаголовокГруппировки);
	КонецЕсли;

	Форма.Элементы.МК_КнопкаЗаголовокРазреза.Заголовок = ЗаголовокГруппировки;
	
	МК_КлиентСервер.ОформитьКнопкуФильтра(Форма.МК_ЭлементыСтиля,
		Форма.Элементы.МК_КнопкаЗаголовокРазреза, Истина, ЕстьГруппировка);
	
	Форма.Элементы.МК_ОчиститьГруппировку.Видимость = ЕстьГруппировка;

КонецПроцедуры

&НаКлиенте
Процедура МК_СброситьРазрез()

	Если Не ЭтоМобильныйКлиент Тогда
		Возврат;
	КонецЕсли;

	МК_ПредставлениеТекущейГруппировки = "";
	
	Если ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоПапкам") Тогда
		МК_ОчиститьГруппировкуПоПапкам();

	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоВидамДокументов") Тогда
		МК_ОчиститьГруппировкуПоВидам();

	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоВопросамДеятельности") Тогда
		МК_ОчиститьГруппировкуПоВопросамДеятельности();

	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоКонтрагентам") Тогда
		МК_ОчиститьГруппировкуПоКонтрагенту();

	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоНоменклатуреДел") Тогда
		МК_ОчиститьГруппировкуПоНоменклатуреДел();

	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоДеламТомам") Тогда
		МК_ОчиститьГруппировкуПоДелам();

	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоКатегориям") Тогда
		МК_ОчиститьГруппировкуПоКатегориям();

	ИначеЕсли ВидПросмотра = ПредопределенноеЗначение(
		"Перечисление.ВидыПросмотраСпискаОбъектов.ПоПроектам") Тогда
		МК_ОчиститьГруппировкуПоПроекту();
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбработкаОжидания", 0.2, Истина);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_ПереключитьСортировку(ТекущееЗначениеСортироватьПо, НаправлениеСортировки, ИмяКолонки)

	Если ТекущееЗначениеСортироватьПо = ИмяКолонки Тогда
		Если НаправлениеСортировки = "Возр" Тогда
			НаправлениеСортировки = "Убыв";
		Иначе
			НаправлениеСортировки = "Возр";
		КонецЕсли;
	Иначе
		ТекущееЗначениеСортироватьПо = ИмяКолонки;
		НаправлениеСортировки = "Возр";
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_СортироватьСписокПоКолонке(ИмяКолонки, Форма)

	Форма.Список.Порядок.Элементы.Очистить();
	Для Каждого ПользовательскаяНастройка Из Форма.Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл

		Если ТипЗнч(ПользовательскаяНастройка) <> Тип("ПорядокКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;

		ПользовательскаяНастройка.Элементы.Очистить();

		ЭлементПорядка = ПользовательскаяНастройка.Элементы.Добавить(Тип(
			"ЭлементПорядкаКомпоновкиДанных"));
		ЭлементПорядка.Использование = Истина;
		ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонки);
		ЭлементПорядка.ТипУпорядочивания = ?(Форма.СписокНаправлениеСортировки = "Возр",
			НаправлениеСортировкиКомпоновкиДанных.Возр, НаправлениеСортировкиКомпоновкиДанных.Убыв);

	КонецЦикла;

	МК_УстановитьПометкуСортировки(Форма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_УстановитьПометкуСортировки(Форма)

	Форма.Элементы.МК_СписокСортироватьПоНаименованию.Пометка = Ложь;
	Форма.Элементы.МК_СписокСортироватьПоНаименованию.Заголовок = НСтр("ru = 'Наименование'");

	Форма.Элементы.МК_СписокСортироватьПоРегНомеру.Пометка = Ложь;
	Форма.Элементы.МК_СписокСортироватьПоРегНомеру.Заголовок = НСтр("ru = 'Рег. номер'");

	Форма.Элементы.МК_СписокСортироватьПоПодготовил.Пометка = Ложь;
	Форма.Элементы.МК_СписокСортироватьПоПодготовил.Заголовок = НСтр("ru = 'Подготовил'");

	Форма.Элементы.МК_СписокСортироватьПоДате.Пометка = Ложь;
	Форма.Элементы.МК_СписокСортироватьПоДате.Заголовок = НСтр("ru = 'Дата'");

	Если Форма.СписокСортироватьПо = "Заголовок" Тогда
		Форма.Элементы.МК_СписокСортироватьПоНаименованию.Пометка = Истина;
		Форма.Элементы.МК_СписокСортироватьПоНаименованию.Заголовок = СтрШаблон("%1 (%2)", НСтр(
			"ru = 'Наименование'"), Форма.СписокНаправлениеСортировки);

	ИначеЕсли Форма.СписокСортироватьПо = "РегистрационныйНомерИДата" Тогда
		Форма.Элементы.МК_СписокСортироватьПоРегНомеру.Пометка = Истина;
		Форма.Элементы.МК_СписокСортироватьПоРегНомеру.Заголовок = СтрШаблон("%1 (%2)", НСтр(
			"ru = 'Рег. номер'"), Форма.СписокНаправлениеСортировки);

	ИначеЕсли Форма.СписокСортироватьПо = "Подготовил" Тогда
		Форма.Элементы.МК_СписокСортироватьПоПодготовил.Пометка = Истина;
		Форма.Элементы.МК_СписокСортироватьПоПодготовил.Заголовок = СтрШаблон("%1 (%2)", НСтр(
			"ru = 'Подготовил'"), Форма.СписокНаправлениеСортировки);

	ИначеЕсли Форма.СписокСортироватьПо = "ДатаСортировки" Тогда
		Форма.Элементы.МК_СписокСортироватьПоДате.Пометка = Истина;
		Форма.Элементы.МК_СписокСортироватьПоДате.Заголовок = СтрШаблон("%1 (%2)", НСтр(
			"ru = 'Дата'"), Форма.СписокНаправлениеСортировки);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МК_ОчиститьГруппировкуПоВидам()

	Элементы.ВидыДокументов.ТекущаяСтрока = Неопределено;
	ТекущийВидДокумента = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура МК_ОчиститьГруппировкуПоВопросамДеятельности()

	Элементы.ВопросыДеятельности.ТекущаяСтрока = Неопределено;
	ТекущийВопросДеятельности = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура МК_ОчиститьГруппировкуПоКонтрагенту()

	Элементы.Контрагенты.ТекущаяСтрока = Неопределено;
	ТекущийКонтрагент = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура МК_ОчиститьГруппировкуПоНоменклатуреДел()

	Элементы.СписокНоменклатураДел.ТекущаяСтрока = Неопределено;
	ТекущаяНоменклатураДел = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура МК_ОчиститьГруппировкуПоПроекту()

	Элементы.Проекты.ТекущаяСтрока = Неопределено;
	ТекущийПроект = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура МК_ОчиститьГруппировкуПоДелам()

	Элементы.ДелаТома.ТекущаяСтрока = Неопределено;
	ТекущееДелоТом = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура МК_ОчиститьГруппировкуПоПапкам()

	Элементы.Папки.ТекущаяСтрока = Неопределено;
	ТекущаяПапка = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура МК_ОчиститьГруппировкуПоКатегориям()

	ВыбранныеКатегории.Очистить();

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеСписков()
	
	Делопроизводство.СписокДокументовУсловноеОформлениеПомеченныхНаУдаление(ВидыДокументов);
	Делопроизводство.СписокДокументовУсловноеОформлениеПомеченныхНаУдаление(ВопросыДеятельности);
	Делопроизводство.СписокДокументовУсловноеОформлениеПомеченныхНаУдаление(Контрагенты);
	Делопроизводство.СписокДокументовУсловноеОформлениеПомеченныхНаУдаление(Папки);
	Делопроизводство.СписокДокументовУсловноеОформлениеПомеченныхНаУдаление(Проекты);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти