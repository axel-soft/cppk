#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает структуру полей ВнутреннегоДокумента
//
// Возвращаемое значение:
//   Структура
//
Функция ПолучитьСтруктуруВнутреннегоДокумента() Экспорт
	
	СтруктуруВнутреннегоДокумента = Новый Структура;
	СтруктуруВнутреннегоДокумента.Вставить("ВидДокумента");
	СтруктуруВнутреннегоДокумента.Вставить("Заголовок");
	СтруктуруВнутреннегоДокумента.Вставить("Содержание");
	СтруктуруВнутреннегоДокумента.Вставить("Папка");
	СтруктуруВнутреннегоДокумента.Вставить("Организация");
	СтруктуруВнутреннегоДокумента.Вставить("ВопросДеятельности");
	СтруктуруВнутреннегоДокумента.Вставить("НоменклатураДел");
	СтруктуруВнутреннегоДокумента.Вставить("КоличествоЭкземпляров");
	СтруктуруВнутреннегоДокумента.Вставить("КоличествоЛистов");
	СтруктуруВнутреннегоДокумента.Вставить("Подразделение");
	СтруктуруВнутреннегоДокумента.Вставить("Источник");
	
	Возврат СтруктуруВнутреннегоДокумента;
	
КонецФункции


// Данные для формата документ предприятия.
// 
// Параметры:
//  Документ - СправочникСсылка.ДокументыПредприятия
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
// * ВидДокумента - СправочникСсылка.ВидыДокументов
// * Дата - Дата
// * УчитыватьСуммуДокумента - Булево 
// * УчитыватьСрокДействия - Булево
// * Содержание - Строка
// * КоличествоЛистов - Число
// * КоличествоПриложений - Число
// * ЛистовВПриложениях - Число
// * КоличествоЭкземпляров - Число 
// * Сумма - Число 
// * СуммаНДС - Число 
// * Валюта - Строка
// * ДатаНачалаДействия - Дата
// * ДатаОкончанияДействия - Дата
// * ВестиУчетСторон - Булево
// * ПорядокПродления - ПеречислениеСсылка.ПорядокПродления
// * КонтактноеЛицо - СправочникСсылка.Сотрудники, Строка, СправочникСсылка.Пользователи, СправочникСсылка.КонтактныеЛица -
// * Подписал - СправочникСсылка.Сотрудники, Строка, СправочникСсылка.Пользователи, СправочникСсылка.КонтактныеЛица -
// * ЯвляетсяБессрочным - Булево
// * Номер - ОпределяемыйТип.РегистрационныйНомер
// * ФормаДокумента - ПеречислениеСсылка.ВариантыФормДокументов
// * ВидДокумента_Наименование - Строка
// * ЯвляетсяДоговором - Булево
// * ЯвляетсяИсходящейКорреспонденцией - Булево 
// * Валюта_Код - Строка
// * Валюта_Наименование - Строка
// * Организация - СправочникСсылка.Организации
// * Контрагент - СправочникСсылка.Контрагенты
// * ВестиУчетПоКонтрагентам - Булево
// * ПлательщикНДС - Булево
// * ДатаПодписания - Дата
//
Функция ДанныеДляФорматаДокументПредприятия(Документ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументыПредприятия.Ссылка,
		|	ДокументыПредприятия.Бессрочный КАК ЯвляетсяБессрочным,
		|	ДокументыПредприятия.ДатаРегистрации КАК Дата,
		|	ДокументыПредприятия.РегистрационныйНомер КАК Номер,
		|	ДокументыПредприятия.Сумма,
		|	ДокументыПредприятия.СуммаНДС,
		|	ДокументыПредприятия.ФормаДокумента,
		|	ДокументыПредприятия.КоличествоЛистов,
		|	ДокументыПредприятия.КоличествоПриложений,
		|	ДокументыПредприятия.КоличествоЭкземпляров,
		|	ДокументыПредприятия.ЛистовВПриложениях,
		|	ДокументыПредприятия.ДатаНачалаДействия,
		|	ДокументыПредприятия.ДатаОкончанияДействия,
		|	ВидыДокументов.Наименование КАК ВидДокумента_Наименование,
		|	ВидыДокументов.ВестиУчетСторон,
		|	ВидыДокументов.ЯвляетсяДоговором,
		|	ВидыДокументов.ЯвляетсяИсходящейКорреспонденцией,
		|	Валюты.Код КАК Валюта_Код,
		|	Валюты.Наименование КАК Валюта_Наименование,
		|	ДокументыПредприятия.ПорядокПродления КАК ПорядокПродления,
		|	ДокументыПредприятия.Заголовок КАК Наименование,
		|	ДокументыПредприятия.Содержание,
		|	ДокументыПредприятия.Организация,
		|	ДокументыПредприятия.Контрагент,
		|	ДокументыПредприятия.ДатаПодписания,
		|	ДокументыПредприятия.Подписал,
		|	ДокументыПредприятия.ПодписалОтКонтрагента,
		|	ВЫБОР
		|		КОГДА ДокументыПредприятия.Ответственный <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|		И ДокументыПредприятия.Ответственный <> Неопределено
		|			ТОГДА ДокументыПредприятия.Ответственный
		|		ИНАЧЕ ДокументыПредприятия.Подготовил
		|	КОНЕЦ КАК КонтактноеЛицо,
		|	Организации.ПлательщикНДС КАК ПлательщикНДС,
		|	ВидыДокументов.УчитыватьСуммуДокумента КАК УчитыватьСуммуДокумента,
		|	ВидыДокументов.УчитыватьСрокДействия КАК УчитыватьСрокДействия,
		|	ВидыДокументов.ВестиУчетПоКонтрагентам,
		|	ДокументыПредприятия.Адресат
		|ИЗ
		|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДокументов КАК ВидыДокументов
		|		ПО ДокументыПредприятия.ВидДокумента = ВидыДокументов.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
		|		ПО ДокументыПредприятия.Валюта = Валюты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО ДокументыПредприятия.Организация = Организации.Ссылка
		|ГДЕ
		|	ДокументыПредприятия.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Возврат Выборка;
	
КонецФункции	

// Создает и записывает в БД документ предприятия
//
// Параметры:
//   СтруктуруВнутреннегоДокумента - Структура - структура полей документа предприятия.
//
Функция СоздатьДокументПредприятия(СтруктуруВнутреннегоДокумента) Экспорт
	
	НачатьТранзакцию();
	Попытка
		НовыйДокументПредприятия = СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НовыйДокументПредприятия, СтруктуруВнутреннегоДокумента);
		
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		
		НовыйДокументПредприятия.ДатаСоздания = ТекущаяДатаСеанса;
		
		НовыйДокументПредприятия.Записать();
		
		Делопроизводство.ЗаписатьСостояниеДокумента(
			НовыйДокументПредприятия.Ссылка,
			ТекущаяДатаСеанса,
			Перечисления.СостоянияДокументов.Проект,
			Сотрудники.ОсновнойСотрудник());
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Не удалось создать документ'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат НовыйДокументПредприятия.Ссылка;
	
КонецФункции

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
КонецПроцедуры

// Возвращает имена ключевых реквизитов заполненных из шаблона
//
// Возвращаемое значение:
//	Строка - имена ключевых реквизитов
// 
Функция ИменаРеквизитовИзШаблона() Экспорт
	
	Возврат "Адресат, ВидДокумента, Тематика, Организация, ГрифДоступа, ВопросДеятельности, Папка, Подразделение,
	|Проект, Ответственный, НоменклатураДел, Стороны, Контрагенты, Контрагент, СтатьяДвиженияДенежныхСредств,
	|ВидОбращения, Способ, АдресатВходящейКорреспонденции,
	|ФормаДокумента";
	
КонецФункции

// Возвращает отслеживаемые реквизиты для дополнительного свойства ПредыдущиеЗначенияРеквизитов.
//
// Возвращаемое значение:
//  Строка - Отслеживаемые реквизиты.
//
Функция ОтслеживаемыеРеквизиты() Экспорт
	
	ОтслеживаемыеРеквизиты = "Организация,Контрагент,Сумма,Валюта,Стороны";
	Возврат ОтслеживаемыеРеквизиты;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Отбор")
		И Параметры.Отбор.Свойство("ВидДокумента")
		И ТипЗнч(Параметры.Отбор.ВидДокумента) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
				
		Если Не ЗначениеЗаполнено(Параметры.СтрокаПоиска) Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 20
		|	ДокументыПредприятия.Ссылка КАК Ссылка,
		|	ДокументыПредприятия.Наименование КАК Представление,
		|	ДокументыПредприятия.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
		|ГДЕ
		|	ДокументыПредприятия.Наименование ПОДОБНО &СтрокаПоиска
		|	И //Отбор
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокументыПредприятия.ПометкаУдаления,
		|	ДокументыПредприятия.Наименование");
		
		Запрос.УстановитьПараметр("СтрокаПоиска",
			ОбщегоНазначенияДокументооборотКлиентСервер.ЗамаскироватьСпецсимволыДляОператораЗапросаПОДОБНО(Параметры.СтрокаПоиска)
			+ "%");
			
		Отборы = Новый Массив;
		Для Каждого Поле Из Параметры.Отбор Цикл
			Если Поле.Ключ = "ВидДокумента" Тогда
				
				Для Каждого ПолеВида Из Поле.Значение Цикл
					Если ТипЗнч(ПолеВида.Значение) = Тип("Массив")
						Или ТипЗнч(ПолеВида.Значение) = Тип("ФиксированныйМассив") Тогда
						Отборы.Добавить(СтрШаблон("%1.%2 В (&%1_%2)", Поле.Ключ, ПолеВида.Ключ));
					Иначе
						Отборы.Добавить(СтрШаблон("%1.%2 = &%1_%2", Поле.Ключ, ПолеВида.Ключ));
					КонецЕсли;
					Запрос.УстановитьПараметр(Поле.Ключ + "_" + ПолеВида.Ключ, ПолеВида.Значение);
				КонецЦикла;
				Продолжить;
				
			ИначеЕсли ТипЗнч(Поле.Значение) = Тип("Массив")
				Или ТипЗнч(Поле.Значение) = Тип("ФиксированныйМассив") Тогда
				Отборы.Добавить(Поле.Ключ + " В (&" + Поле.Ключ + ")");
			Иначе
				Отборы.Добавить(Поле.Ключ + " = &" + Поле.Ключ);
			КонецЕсли;
			Запрос.УстановитьПараметр(Поле.Ключ, Поле.Значение);
			
		КонецЦикла;
		
		Если Отборы.Количество() Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "//Отбор", СтрСоединить(Отборы, "
				|	И "));
		КонецЕсли;
		
		ДанныеВыбора = Новый СписокЗначений;
		Дл = СтрДлина(Параметры.СтрокаПоиска);
		ЦветВыделения = ЦветаСтиля.ВыделениеТекстаВСпискеВыбораЦвет;
			
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ДанныеВыбора.Добавить(Выборка.Ссылка, 
				Новый ФорматированнаяСтрока(
					Новый ФорматированнаяСтрока(Лев(Выборка.Представление, Дл), Новый Шрифт(,,Истина,,,Выборка.ПометкаУдаления), ЦветВыделения),
					Новый ФорматированнаяСтрока(Сред(Выборка.Представление, Дл + 1), Новый Шрифт(,,,,,Выборка.ПометкаУдаления))));
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_АвтозаполнениеФайлов

//Возвращает поддерживается или нет перезаполнение по шаблону
Функция ПоддерживаетсяПерезаполнениеПоШаблону() Экспорт
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_УправлениеДоступом

Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат 
		"Ссылка,
		|ВидДокумента,
		|ВопросДеятельности,
		|ГрифДоступа,
		|Организация,
		|Подразделение,
		|Папка,
		|Контрагент,
		|Контрагенты";
	
КонецФункции

// Заполняет переданный дескриптор доступа 
Процедура ЗаполнитьОсновнойДескриптор(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	ДескрипторДоступа.ВидОбъекта = ОбъектДоступа.ВидДокумента;
	ДескрипторДоступа.ВопросДеятельности = ОбъектДоступа.ВопросДеятельности;
	ДескрипторДоступа.ГрифДоступа = ОбъектДоступа.ГрифДоступа;
	ДескрипторДоступа.Организация = ОбъектДоступа.Организация;
	ДескрипторДоступа.Подразделение = ОбъектДоступа.Подразделение;
	
	// Контрагенты
	ВсеКонтрагенты = ОбъектДоступа.Контрагенты.Выгрузить().ВыгрузитьКолонку("Контрагент");
	ЗначенияГруппыДоступа = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВсеКонтрагенты, "ГруппаДоступа");
	
	ДобавленныеГруппы = Новый Соответствие;
	Для Каждого КлючИЗначение Из ЗначенияГруппыДоступа Цикл
		ГруппаДоступа = КлючИЗначение.Значение;
		Если ЗначениеЗаполнено(ГруппаДоступа) И ДобавленныеГруппы.Получить(ГруппаДоступа) = Неопределено Тогда
			Строка = ДескрипторДоступа.Контрагенты.Добавить();
			Строка.ГруппаДоступа = ГруппаДоступа;
			ДобавленныеГруппы.Вставить(ГруппаДоступа, Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьМетодПолучитьПравилаОбработкиНастроекПравПапки() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает таблицу значений с правилами обработки настроек прав папки,
// которые следует применять для расчета прав объекта
// 
Функция ПолучитьПравилаОбработкиНастроекПравПапки() Экспорт
	
	ТаблицаПравил = ДокументооборотПраваДоступа.ТаблицаПравилОбработкиНастроекПапки();
	
	Стр = ТаблицаПравил.Добавить();
	Стр.Настройка = "ЧтениеПапокИДокументовПредприятия";
	Стр.Чтение = Истина;
	
	Стр = ТаблицаПравил.Добавить();
	Стр.Настройка = "ДобавлениеПапокИДокументовПредприятия";
	Стр.Добавление = Истина;
	
	Стр = ТаблицаПравил.Добавить();
	Стр.Настройка = "ИзменениеПапокИДокументовПредприятия";
	Стр.Изменение = Истина;
	
	Стр = ТаблицаПравил.Добавить();
	Стр.Настройка = "ПометкаУдаленияПапокИДокументовПредприятия";
	Стр.Удаление = Истина;
	
	Возврат ТаблицаПравил;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_ПодсистемаПечать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Карточка
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Справочник.ДокументыПредприятия";
	КомандаПечати.Идентификатор = "Карточка";
	КомандаПечати.Представление = НСтр("ru = 'Карточка документа'");
	КомандаПечати.Обработчик = "УправлениеПечатьюКлиентДокументооборот.ПечатьКарточкиДокумента";
	
	// Конверт
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Справочник.ДокументыПредприятия";
	КомандаПечати.Идентификатор = "Конверт";
	КомандаПечати.Представление = НСтр("ru = 'Напечатать конверт'");
	КомандаПечати.Обработчик = "УправлениеПечатьюКлиентДокументооборот.ПечатьКонверта";

	// Напечатать файлы
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Справочник.ДокументыПредприятия";
	КомандаПечати.Идентификатор = "НапечататьФайлы";
	КомандаПечати.Представление = НСтр("ru = 'Напечатать файлы'");
	КомандаПечати.Обработчик = "УправлениеПечатьюКлиентДокументооборот.НапечататьФайлы";
	
	// Регистрационный штамп
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Справочник.ДокументыПредприятия";
	КомандаПечати.Идентификатор = "РегистрационныйШтамп";
	КомандаПечати.Представление = НСтр("ru = 'Регистрационный штамп'");
	КомандаПечати.Обработчик = "УправлениеПечатьюКлиентДокументооборот.ПечатьРегистрационногоШтампа";
    
    Если ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды") Тогда
        // Штрихкод на наклейке
        КомандаПечати = КомандыПечати.Добавить();
        КомандаПечати.МенеджерПечати = "Справочник.ДокументыПредприятия";
        КомандаПечати.Идентификатор = "ШтрихкодНаНаклейке";
        КомандаПечати.Представление = НСтр("ru = 'Штрихкод на наклейке'");
        КомандаПечати.Обработчик = "УправлениеПечатьюКлиентДокументооборот.ПечатьШтрихкодаНаНаклейке";
        
        // Штрихкод на странице
        КомандаПечати = КомандыПечати.Добавить();
        КомандаПечати.МенеджерПечати = "Справочник.ДокументыПредприятия";
        КомандаПечати.Идентификатор = "ШтрихкодНаСтранице";
        КомандаПечати.Представление = НСтр("ru = 'Штрихкод на странице'");
        КомандаПечати.Обработчик = "УправлениеПечатьюКлиентДокументооборот.ПечатьШтрихкодаНаСтранице";
    КонецЕсли;
    
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак доступности печати по-комплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если ПараметрыПечати.Свойство("БесшовнаяИнтеграция") Тогда
		БесшовнаяИнтеграция = ПараметрыПечати.БесшовнаяИнтеграция;
	Иначе
		БесшовнаяИнтеграция = Ложь;
	КонецЕсли;
	
	// Формируем табличный документ и добавляем его в коллекцию печатных форм.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Карточка") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"Карточка",
			"Карточка документа предприятия",
			ПечатьКарточки(МассивОбъектов, ОбъектыПечати, ПараметрыПечати),,
			"Справочник.ДокументыПредприятия.ПФ_MXL_Карточка");
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЛистСогласования") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЛистСогласования",
			"Лист согласования",
			ЛистСогласования(МассивОбъектов, ОбъектыПечати, БесшовнаяИнтеграция),,
			"БизнесПроцесс.Согласование.ПФ_MXL_ЛистСогласования");
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЛистСогласованияСИсторией") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЛистСогласованияСИсторией",
			"Лист согласования с историей",
			ЛистСогласованияСИсторией(МассивОбъектов, ОбъектыПечати, БесшовнаяИнтеграция),,
			"БизнесПроцесс.Согласование.ПФ_MXL_ЛистСогласованияСИсторией");
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПротоколРазногласий") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПротоколРазногласий",
			"Протокол разногласий",
			ПротоколРазногласий(МассивОбъектов, ОбъектыПечати, БесшовнаяИнтеграция),,
			"Справочник.ДействияСогласования.ПФ_MXL_ПротоколРазногласий");
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЛистОзнакомления") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЛистОзнакомления",
			"Лист ознакомления",
			ЛистОзнакомления(МассивОбъектов, ОбъектыПечати, БесшовнаяИнтеграция),,
			"Справочник.ДействияОзнакомления.ПФ_MXL_ЛистОзнакомления");
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КарточкаДокументаВнешнееПодписание") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"КарточкаДокументаВнешнееПодписание",
			"Карточка документа",
			КарточкаДокументаВнешнееПодписание(МассивОбъектов, ОбъектыПечати),,
			"Справочник.ДокументыПредприятия.ПФ_MXL_КарточкаДокументаВнешнееПодписание");
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует печатную форму карточки документа
//
// Параметры:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ОбъектыПечати   - СписокЗначений - список объектов печати;
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// Возвращаемое значение:
//  ТабличныйДокумент - ТабличныйДокумент - печатная форма
//
Функция ПечатьКарточки(МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	// Создаем табличный документ и устанавливаем имя параметров печати
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_КарточкаВнутреннегоДокумента";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.ДокументыПредприятия.ПФ_MXL_Карточка");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьРеквизитыШапка = Макет.ПолучитьОбласть("РеквизитыШапка");
	
	ОбластьФайлыШапка = Макет.ПолучитьОбласть("ФайлыШапка");
	ОбластьФайлыСтрока = Макет.ПолучитьОбласть("ФайлыСтрока");
	
	ОбластьВерсииШапка = Макет.ПолучитьОбласть("ВерсииШапка");
	ОбластьВерсииСтрока = Макет.ПолучитьОбласть("ВерсииСтрока");
	ОбластьВерсииСтрокаФайл = Макет.ПолучитьОбласть("ВерсииСтрокаФайл");
	
	ОбластьЭПШапка = Макет.ПолучитьОбласть("ЭПШапка");
	ОбластьЭПСтрока = Макет.ПолучитьОбласть("ЭПСтрока");
	ОбластьЭПОбъект = Макет.ПолучитьОбласть("ЭПОбъект");
	
	ОбластьСоставКомплектаШапка = Макет.ПолучитьОбласть("СоставКомплектаШапка");
	ОбластьСоставКомплектаСтрока = Макет.ПолучитьОбласть("СоставКомплектаСтрока");
	
	ОбластьСвязанныеДокументыШапка = Макет.ПолучитьОбласть("СвязанныеДокументыШапка");
	ОбластьСвязанныеДокументыСтрока = Макет.ПолучитьОбласть("СвязанныеДокументыСтрока");
	ОбластьСвязанныеДокументыТипСвязи = Макет.ПолучитьОбласть("СвязанныеДокументыТипСвязи");
	
	ОбластьЖурналПередачиШапка = Макет.ПолучитьОбласть("ЖурналПередачиШапка");
	ОбластьЖурналПередачиСтрока = Макет.ПолучитьОбласть("ЖурналПередачиСтрока");
	
	ОбластьРезолюцииШапка = Макет.ПолучитьОбласть("РезолюцииШапка");
	ОбластьРезолюцииСтрока = Макет.ПолучитьОбласть("РезолюцииСтрока");
	
	ОбластьОбработкаШапка = Макет.ПолучитьОбласть("ОбработкаШапка");
	ОбластьОбработкаСтрока = Макет.ПолучитьОбласть("ОбработкаСтрока");
	
	ОбластьДругиеЗадачиШапка = Макет.ПолучитьОбласть("ДругиеЗадачиШапка");
	ОбластьДругиеЗадачиСтрока = Макет.ПолучитьОбласть("ДругиеЗадачиСтрока");
	
	ОбластьИсторияСроковДействияШапка = Макет.ПолучитьОбласть("ИсторияСроковДействияШапка");
	ОбластьИсторияСроковДействияСтрока = Макет.ПолучитьОбласть("ИсторияСроковДействияСтрока");
	
	ОбластьДопРеквизитыШапка = Макет.ПолучитьОбласть("ДопРеквизитыШапка");
	ОбластьДопРеквизитыСтрока = Макет.ПолучитьОбласть("ДопРеквизитыСтрока");
	
	ОбластьПрочиеШапка = Макет.ПолучитьОбласть("ПрочиеШапка");
	ОбластьПрочиеСтрока = Макет.ПолучитьОбласть("ПрочиеСтрока");
	ОбластьПрочиеПодвал = Макет.ПолучитьОбласть("ПрочиеПодвал");
	
	ОбластьСтороныШапка = Макет.ПолучитьОбласть("СтороныШапка");
	ОбластьСтороныСтрока = Макет.ПолучитьОбласть("СтороныСтрока");	
	
	ОбластьТоварыШапка = Макет.ПолучитьОбласть("ТоварыШапка");
	ОбластьТоварыСтрока = Макет.ПолучитьОбласть("ТоварыСтрока");
	ОбластьТоварыИтог = Макет.ПолучитьОбласть("ТоварыИтог");
	
	ОбластьПодписаниеСтрока = Макет.ПолучитьОбласть("ПодписаниеСтрока");
	ОбластьПодписаниеШапка = Макет.ПолучитьОбласть("ПодписаниеШапка");
	
	// Получаем запросом необходимые данные
	Индекс = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументПредприятия.Ссылка,
		|	ДокументПредприятия.Представление,
		|	ДокументПредприятия.ВидДокумента КАК ВидДокумента,
		|	ВЫБОР
		|		КОГДА ДокументПредприятия.ДатаРегистрации <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДокументПредприятия.ДатаРегистрации
		|		ИНАЧЕ ДокументПредприятия.ДатаСоздания
		|	КОНЕЦ КАК ДатаСортировки
		|ИЗ
		|	Справочник.ДокументыПредприятия КАК ДокументПредприятия
		|ГДЕ
		|	ДокументПредприятия.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСортировки; ";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ИндексВыборкаЗаголовок = Индекс;

	Если ПараметрыПечати.Свойство("РеквизитыКарточки") И ПараметрыПечати.РеквизитыКарточки Тогда
		Индекс = Индекс + 4;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТекущиеСостоянияДокументов.Документ КАК Документ,
		|	ТекущиеСостоянияДокументов.ДатаУстановки КАК Период
		|ПОМЕСТИТЬ СостоянияДокументовУтверждение
		|ИЗ
		|	РегистрСведений.ТекущиеСостоянияДокументов КАК ТекущиеСостоянияДокументов
		|ГДЕ
		|	ТекущиеСостоянияДокументов.Документ В(&МассивОбъектов)
		|	И ТекущиеСостоянияДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Утвержден)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТекущиеСостоянияДокументов.Документ КАК Документ,
		|	ТекущиеСостоянияДокументов.ДатаУстановки КАК Период
		|ПОМЕСТИТЬ СостоянияДокументовИсполнен
		|ИЗ
		|	РегистрСведений.ТекущиеСостоянияДокументов КАК ТекущиеСостоянияДокументов
		|ГДЕ
		|	ТекущиеСостоянияДокументов.Документ В(&МассивОбъектов)
		|	И ТекущиеСостоянияДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Исполнен)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументыПредприятияКонтрагенты.Контрагент) КАК КоличествоКонтрагентов,
		|	ДокументыПредприятияКонтрагенты.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ КонтрагентыДокументов
		|ИЗ
		|	Справочник.ДокументыПредприятия.Контрагенты КАК ДокументыПредприятияКонтрагенты
		|ГДЕ
		|	ДокументыПредприятияКонтрагенты.Ссылка В(&МассивОбъектов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументыПредприятияКонтрагенты.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументПредприятия.ДатаРегистрации КАК ДатаРегистрации,
		|	ВидыДокументов.Представление КАК ВидДокумента,
		|	ВидыДокументов.УчитыватьСуммуДокумента КАК УчитыватьСуммуДокумента,
		|	ВидыДокументов.ВестиУчетПоСтатьямДДС КАК ВестиУчетПоСтатьямДДС,
		|	ВидыДокументов.УчитыватьСрокДействия КАК УчитыватьСрокДействия,
		|	ВидыДокументов.ВестиУчетПоКонтрагентам КАК ВестиУчетПоКонтрагентам,
		|	ВидыДокументов.ВестиУчетПоАдресатам КАК ВестиУчетПоАдресатам,
		|	ВидыДокументов.ВестиУчетПоОрганизациям КАК ВестиУчетПоОрганизациям,
		|	ДокументПредприятия.Адресат.Представление КАК Адресат,
		|	ДокументПредприятия.Дело.Представление КАК Дело,
		|	ДокументПредприятия.Зарегистрировал КАК Зарегистрировал,
		|	ДокументПредприятия.Заголовок КАК Наименование,
		|	ДокументПредприятия.РегистрационныйНомер КАК РегистрационныйНомер,
		|	ДокументПредприятия.Папка.Представление КАК Папка,
		|	ДокументПредприятия.СрокИсполнения КАК ПлановыйСрокИсполнения,
		|	ДокументПредприятия.Подготовил КАК Подготовил,
		|	ДокументПредприятия.Содержание КАК Содержание,
		|	ДокументПредприятия.КоличествоЛистов КАК КоличествоЛистов,
		|	ДокументПредприятия.КоличествоПриложений КАК КоличествоПриложений,
		|	ДокументПредприятия.ЛистовВПриложениях КАК ЛистовВПриложениях,
		|	ДокументПредприятия.КоличествоЭкземпляров КАК КоличествоЭкземпляров,
		|	ДокументПредприятия.Подразделение.Представление КАК Подразделение,
		|	ДокументПредприятия.Утвердил КАК Утвердил,
		|	ДокументПредприятия.Представление КАК Представление,
		|	ДокументПредприятия.Ссылка КАК Ссылка,
		|	ДокументПредприятия.ГрифДоступа.Представление КАК ГрифДоступа,
		|	ДокументПредприятия.ВопросДеятельности.Представление КАК ВопросДеятельности,
		|	ДокументПредприятия.Организация.Представление КАК Организация,
		|	ДокументПредприятия.Организация КАК ОрганизацияСсылка,
		|	ДокументПредприятия.Проект.Представление КАК Проект,
		|	ДокументПредприятия.Сумма КАК Сумма,
		|	ДокументПредприятия.СуммаНДС КАК СуммаНДС,
		|	ДокументПредприятия.Валюта.Представление КАК Валюта,
		|	ДокументПредприятия.ДатаНачалаДействия КАК ДатаНачалаДействия,
		|	ДокументПредприятия.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
		|	ДокументПредприятия.Ответственный КАК Ответственный,
		|	ДанныеДокументовПредприятия.КонтрагентыДляСписков КАК Контрагенты,
		|	ЕСТЬNULL(СостоянияДокументовУтверждение.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаУтверждения,
		|	ЕСТЬNULL(СостоянияДокументовИсполнен.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ФактическийСрокИсполнения,
		|	ВЫБОР
		|		КОГДА СостоянияДокументовИсполнен.Период ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Исполнен,
		|	ЕСТЬNULL(КонтрагентыДокументов.КоличествоКонтрагентов, 0) КАК КоличествоКонтрагентов,
		|	ВидыДокументов.ВестиУчетСторон КАК ВестиУчетСторон,
		|	ВидыДокументов.ВестиУчетПоТематикам КАК ВестиУчетПоТематикам,
		|	ДокументПредприятия.Тематика КАК Тематика,
		|	ДокументПредприятия.Подписал КАК Подписал,
		|	ДокументПредприятия.РезультатПодписания КАК РезультатПодписания,
		|	ДокументПредприятия.ДатаПодписания КАК ДатаПодписания,
		|	ДокументПредприятия.ВременныйНомер КАК ВременныйНомер,
		|	ВидыДокументов.ИспользоватьВременныеНомера КАК ИспользоватьВременныеНомера,
		|	ДокументПредприятия.Важность КАК Важность,
		|	ДокументПредприятия.ДатаСоздания КАК ДатаСоздания,
		|	ВидыДокументов.ИспользоватьВажность КАК ИспользоватьВажность
		|ИЗ
		|	Справочник.ДокументыПредприятия КАК ДокументПредприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияДокументовУтверждение КАК СостоянияДокументовУтверждение
		|		ПО (СостоянияДокументовУтверждение.Документ = ДокументПредприятия.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияДокументовИсполнен КАК СостоянияДокументовИсполнен
		|		ПО (СостоянияДокументовИсполнен.Документ = ДокументПредприятия.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ КонтрагентыДокументов КАК КонтрагентыДокументов
		|		ПО ДокументПредприятия.Ссылка = КонтрагентыДокументов.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеДокументовПредприятия КАК ДанныеДокументовПредприятия
		|		ПО ДокументПредприятия.Ссылка = ДанныеДокументовПредприятия.Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДокументов КАК ВидыДокументов
		|		ПО (ВидыДокументов.Ссылка = ДокументПредприятия.ВидДокумента)
		|ГДЕ
		|	ДокументПредприятия.Ссылка В(&МассивОбъектов);";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаРеквизиты = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("ДопРеквизиты") И ПараметрыПечати.ДопРеквизиты Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДополнительныеРеквизиты.Свойство,
		|	ДополнительныеРеквизиты.Значение,
		|	ДополнительныеРеквизиты.ТекстоваяСтрока,
		|	ДополнительныеРеквизиты.Ссылка,
		|	ДополнительныеРеквизиты.Свойство.ФорматСвойства КАК ФорматСвойства
		|ИЗ
		|	Справочник.ДокументыПредприятия.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
		|ГДЕ
		|	ДополнительныеРеквизиты.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДополнительныеРеквизиты.Свойство.Наименование;";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаДопРеквизиты = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("ИсторияСрокаДействия") И ПараметрыПечати.ИсторияСрокаДействия Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИсторияСроковДействияДокументов.Документ КАК Документ,
		|	ИсторияСроковДействияДокументов.ДатаИзменения КАК ДатаИзменения,
		|	ИсторияСроковДействияДокументов.ДатаНачалаДействия КАК ДействуетС,
		|	ВЫБОР КОГДА ИсторияСроковДействияДокументов.Бессрочный = ИСТИНА
		|	ТОГДА ""Бессрочный""
		|	ИНАЧЕ ИсторияСроковДействияДокументов.ДатаОкончанияДействия
		|	КОНЕЦ КАК ДействуетПо,
		|	ИсторияСроковДействияДокументов.ПорядокПродления КАК ПорядокПродления,
		|	ИсторияСроковДействияДокументов.Изменил КАК Изменил,
		|	ИсторияСроковДействияДокументов.ДокументИсточникИзменения КАК ИзмененДокументом,
		|	ИсторияСроковДействияДокументов.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрСведений.ИсторияСроковДействияДокументов КАК ИсторияСроковДействияДокументов
		|ГДЕ
		|	ИсторияСроковДействияДокументов.Документ В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаИзменения;";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаИсторияСроковДействия = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("ПриложенныеФайлы") И ПараметрыПечати.ПриложенныеФайлы Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.ПолноеНаименование КАК Наименование,
		|	Файлы.Автор КАК Автор,
		|	Файлы.Описание,
		|	Файлы.ДатаСоздания КАК Создан,
		|	Файлы.ТекущаяВерсия.Автор КАК Отредактировал,
		|	Файлы.ТекущаяВерсия.ДатаСоздания КАК Отредактирован,
		|	Файлы.ВладелецФайла КАК ВладелецФайла,
		|	Файлы.Ссылка,
		|	РолиФайловДокументов.Роль КАК Роль
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|   ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РолиФайловДокументов КАК РолиФайловДокументов
		|	ПО РолиФайловДокументов.Файл = Файлы.Ссылка
		|   ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|	ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
		|ГДЕ
		|	Файлы.ВладелецФайла В(&МассивОбъектов)
		|	И Файлы.ПометкаУдаления = ЛОЖЬ
		|	И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование;";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаФайлы = Индекс;
	КонецЕсли;	
	
	Если ПараметрыПечати.Свойство("ВерсииФайлов") И ПараметрыПечати.ВерсииФайлов Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВерсииФайлов.НомерВерсии КАК НомерВерсии,
		|	ВерсииФайлов.Размер / 1024 КАК Размер,
		|	ВерсииФайлов.Автор КАК Автор,
		|	ВерсииФайлов.ДатаСоздания,
		|	ВерсииФайлов.Владелец КАК Файл,
		|	ВерсииФайлов.Владелец.ВладелецФайла КАК ВладелецФайла,
		|	ВерсииФайлов.Ссылка,
		|	ВерсииФайлов.Комментарий
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|ГДЕ
		|	ВерсииФайлов.Владелец.ВладелецФайла В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Файл,
		|	НомерВерсии УБЫВ
		|ИТОГИ ПО
		|	ВладелецФайла,
		|	Файл;";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаВерсии = Индекс;
	КонецЕсли;	
	
	Если ПараметрыПечати.Свойство("ЭП") 
		И ПараметрыПечати.ЭП 
		И ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи") Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭП.КомуВыданСертификат,
		|	ЭП.ДатаПодписи,
		|	ЭП.Комментарий,
		|	ЭП.Подпись,
		|	ЭП.Отпечаток,
		|	ЭП.УстановившийПодпись,
		|	ЭП.Сертификат,
		|	ЭП.ПодписанныйОбъект КАК Документ,
		|	ЭП.ПодписанныйОбъект КАК ОбъектЭП
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
		|ГДЕ
		|	ЭП.ПодписанныйОбъект.ПодписанЭП
		|	И ЭП.ПодписанныйОбъект В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭП.КомуВыданСертификат,
		|	ЭП.ДатаПодписи,
		|	ЭП.Комментарий,
		|	ЭП.Подпись,
		|	ЭП.Отпечаток,
		|	ЭП.УстановившийПодпись,
		|	ЭП.Сертификат,
		|	Файлы.ВладелецФайла,
		|	Файлы.Ссылка
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписи КАК ЭП
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
		|		ПО (Файлы.ТекущаяВерсия = ЭП.ПодписанныйОбъект)
		|ГДЕ
		|	ЭП.ПодписанныйОбъект.ПодписанЭП
		|	И Файлы.ВладелецФайла В(&МассивОбъектов)
		|ИТОГИ ПО
		|	Документ,
		|	ОбъектЭП;";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаЭП = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("СоставКомплекта") И ПараметрыПечати.СоставКомплекта Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязиОбъектов.ТипСвязи.Представление КАК ТипСвязи,
		|	СвязиОбъектов.Объект КАК Документ,
		|	ВЫБОР
		|		КОГДА СвязиОбъектов.СвязанныйОбъект ССЫЛКА Справочник.Файлы
		|			ТОГДА СвязиОбъектов.СвязанныйОбъект.ПолноеНаименование
		|		ИНАЧЕ СвязиОбъектов.СвязанныйОбъект.Заголовок
		|	КОНЕЦ КАК Заголовок,
		|	СвязиОбъектов.СвязанныйОбъект.ДатаРегистрации КАК ДатаРегистрации,
		|	СвязиОбъектов.СвязанныйОбъект.РегистрационныйНомер КАК РегистрационныйНомер,
		|	СвязиОбъектов.СвязанныйОбъект,
		|	СвязиОбъектов.Комментарий
		|ИЗ
		|	РегистрСведений.СвязиОбъектов КАК СвязиОбъектов
		|ГДЕ
		|	СвязиОбъектов.Объект В(&МассивОбъектов)
		|	И СвязиОбъектов.ТипСвязи = ЗНАЧЕНИЕ(Справочник.ТипыСвязей.Содержит)
		|ИТОГИ ПО
		|	Документ;";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаСоставКомплекта = Индекс;
	КонецЕсли;	
	
	Если ПараметрыПечати.Свойство("СвязанныеДокументы") И ПараметрыПечати.СвязанныеДокументы Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязиОбъектов.ТипСвязи.Представление КАК ТипСвязи,
		|	СвязиОбъектов.Объект КАК Документ,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СвязиОбъектов.СвязаннаяСтрока, """") <> """"
		|			ТОГДА СвязиОбъектов.СвязаннаяСтрока
		|		ИНАЧЕ СвязиОбъектов.СвязанныйОбъект
		|	КОНЕЦ КАК Заголовок,
		|	ВЫБОР
		|		КОГДА СвязиОбъектов.СвязанныйОбъект <> НЕОПРЕДЕЛЕНО
		|			ТОГДА СвязиОбъектов.СвязанныйОбъект
		|		ИНАЧЕ СвязиОбъектов.СвязаннаяСтрока
		|	КОНЕЦ КАК СвязанныйОбъект,
		|	СвязиОбъектов.Комментарий
		|ИЗ
		|	РегистрСведений.СвязиОбъектов КАК СвязиОбъектов
		|ГДЕ
		|	СвязиОбъектов.Объект В(&МассивОбъектов)
		|	И СвязиОбъектов.ТипСвязи <> ЗНАЧЕНИЕ(Справочник.ТипыСвязей.Содержит)
		|ИТОГИ ПО
		|	Документ,
		|	ТипСвязи;";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаСвязи = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("ЖурналПередачи") И ПараметрыПечати.ЖурналПередачи Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЖурналПередачиДокументов.Документ КАК Ссылка,
		|	ЖурналПередачиДокументов.Период,
		|	ЖурналПередачиДокументов.НомерЭкземпляра,
		|	ЖурналПередачиДокументов.ТипЭкземпляра,
		|	ЖурналПередачиДокументов.Комментарий,
		|	ЖурналПередачиДокументов.Пользователь.Представление КАК Пользователь
		|ИЗ
		|	РегистрСведений.ЖурналПередачиДокументов КАК ЖурналПередачиДокументов
		|ГДЕ
		|	 ЖурналПередачиДокументов.Документ В(&МассивОбъектов)
		|	И (НЕ ЖурналПередачиДокументов.Возвращен);";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаЖурналПередачи = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("Резолюции") И ПараметрыПечати.Резолюции Тогда
		Индекс = Индекс + 1;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Резолюции.Документ КАК Документ,
		|	Резолюции.АвторРезолюции КАК АвторРезолюции,
		|	Резолюции.ДатаРезолюции КАК ДатаРезолюции,
		|	Резолюции.ТекстРезолюции КАК ТекстРезолюции,
		|	Резолюции.Подписана КАК Подписана,
		|	ЭП.ДатаПодписи КАК ДатаПодписания,
		|	СведенияОбУчастникахДействий.ПредставлениеФактическогоИсполнителя КАК ПредставлениеФактическогоИсполнителя
		|ИЗ
		|	Справочник.Резолюции КАК Резолюции
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭП
		|		ПО (ЭП.ПодписанныйОбъект = Резолюции.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбУчастникахДействий КАК СведенияОбУчастникахДействий
		|		ПО (Резолюции.ИдентификаторУчастника = СведенияОбУчастникахДействий.ИдентификаторУчастника)
		|ГДЕ
		|	Резолюции.Документ В(&МассивОбъектов)
		|	И НЕ Резолюции.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Резолюции.ДатаРезолюции УБЫВ;";
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаРезолюции = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("ВестиУчетТоваровИУслуг") И ПараметрыПечати.ВестиУчетТоваровИУслуг Тогда
		Индекс = Индекс + 1;
		
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументПредприятияТовары.Ссылка,
		|	ВЫБОР
		|		КОГДА ДокументПредприятияТовары.Ссылка.ДатаРегистрации <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДокументПредприятияТовары.Ссылка.ДатаРегистрации
		|		ИНАЧЕ ДокументПредприятияТовары.Ссылка.ДатаСоздания
		|	КОНЕЦ КАК ДатаСортировки,
		|	ДокументПредприятияТовары.Номер КАК Номер,
		|	ДокументПредприятияТовары.Номенклатура,
		|	ДокументПредприятияТовары.Количество,
		|	ДокументПредприятияТовары.ЕдиницаИзмерения КАК Единица,
		|	ДокументПредприятияТовары.Цена,
		|	ДокументПредприятияТовары.СтавкаНДС,
		|	ДокументПредприятияТовары.СуммаНДС,
		|	ДокументПредприятияТовары.Сумма,
		|	ДокументПредприятияТовары.Ссылка.Организация КАК Организация
		|ИЗ
		|	Справочник.ДокументыПредприятия.Товары КАК ДокументПредприятияТовары
		|ГДЕ
		|	ДокументПредприятияТовары.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСортировки,
		|	Номер;";
		
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаТовары = Индекс;
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("Стороны") И ПараметрыПечати.Стороны Тогда
		Индекс = Индекс + 1;
		
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Стороны.Ссылка,
		|	Стороны.Сторона,
		|	Стороны.КонтактноеЛицо,
		|	Стороны.Подписал,
		|	Стороны.Наименование,
		|	Стороны.Подписан,
		|	Стороны.ДатаПодписи
		|ИЗ
		|	Справочник.ДокументыПредприятия.Стороны КАК Стороны
		|ГДЕ
		|	Стороны.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		ИндексВыборкаСторон = Индекс;
	КонецЕсли;	
	
	Результат = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	
	ИспользоватьГрифыДоступа = ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа");
	ИспользоватьВопросыДеятельности = ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности");
	ИспользоватьУчетПоОрганизациям = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям");
	ИспользоватьСостоянияДокументов = ПолучитьФункциональнуюОпцию("ИспользоватьСостоянияДокументов");
	ИспользоватьРезолюцииВДокументах = ПолучитьФункциональнуюОпцию("ИспользоватьРезолюцииВДокументах");
	ИспользоватьСвязиДокументов = ПолучитьФункциональнуюОпцию("ИспользоватьСвязиОбъектов");
	ИспользоватьДополнительныеРеквизитыИСведения = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	
	ВыборкаЗаголовок = Результат[ИндексВыборкаЗаголовок].Выбрать();
	
	ПервыйДокумент = Истина; 
	Пока ВыборкаЗаголовок.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки с которой начали выводить текущий документ
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьЗаголовок.Параметры.Заполнить(ВыборкаЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		ВывестиПодвалРеквизитов = Ложь;
		ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаЗаголовок.Ссылка, "ВидДокумента");
		ВидДокумента = ВыборкаЗаголовок.ВидДокумента;
		ДатаУчетаДокумента = Делопроизводство.ДатаУчетаДокумента(ВыборкаЗаголовок.Ссылка);
		
		// Реквизиты карточки
		Если ПараметрыПечати.Свойство("РеквизитыКарточки") И ПараметрыПечати.РеквизитыКарточки Тогда 
			
			ВыборкаРеквизиты = Результат[ИндексВыборкаРеквизиты].Выбрать();
			Если ВыборкаРеквизиты.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Тогда
				ОбластьРеквизитыШапка.Параметры.Заполнить(ВыборкаРеквизиты);      
				
				Если ПараметрыПечати.Свойство("Штрихкод") И ПараметрыПечати.Штрихкод 
					И ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды") Тогда 
					
					ДанныеОШтрихкоде = ШтрихкодированиеСервер.ПолучитьДанныеДляВставкиШтрихкодаВОбъект(
						ВыборкаЗаголовок.Ссылка, Ложь,,, Ложь);
					КартинкаШтрихкода = Новый Картинка(ДанныеОШтрихкоде.ДвоичныеДанныеИзображения);
					ОбластьРеквизитыШапка.Параметры.Штрихкод = КартинкаШтрихкода;
					
				КонецЕсли;	
				
				Если ВыборкаРеквизиты.ВестиУчетПоТематикам = Истина
					И ЗначениеЗаполнено(ВыборкаРеквизиты.Тематика) Тогда 
					ВидДокументаЗаголовок = НСтр("ru = 'Вид и тематика документа'");
					ВидДокументаСтрока = СокрЛП(ВыборкаРеквизиты.ВидДокумента) + " - " + СокрЛП(ВыборкаРеквизиты.Тематика);
				Иначе 
					ВидДокументаСтрока = СокрЛП(ВыборкаРеквизиты.ВидДокумента);
					ВидДокументаЗаголовок = НСтр("ru = 'Вид документа'");
				КонецЕсли;
				ОбластьРеквизитыШапка.Параметры.ВидДокумента = ВидДокументаСтрока;
				ОбластьРеквизитыШапка.Параметры.ВидДокументаЗаголовок = ВидДокументаЗаголовок;
				
				СоставСтрока = ?(ВыборкаРеквизиты.КоличествоЛистов > 0, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'листов %1,'") + " ", ВыборкаРеквизиты.КоличествоЛистов),"");
				СоставСтрока = СоставСтрока+?(ВыборкаРеквизиты.КоличествоПриложений > 0, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'приложений %1,'") + " ", ВыборкаРеквизиты.КоличествоПриложений),"");
				СоставСтрока = СоставСтрока+?(ВыборкаРеквизиты.КоличествоЭкземпляров > 0, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'экземпляров %1,'") + " ", ВыборкаРеквизиты.КоличествоЭкземпляров),"");
				СоставСтрока = СоставСтрока+?(ВыборкаРеквизиты.ЛистовВПриложениях > 0, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'листов в приложениях %1,'") + " ", ВыборкаРеквизиты.ЛистовВПриложениях),"");
				СоставСтрока = ВРег(Лев(СоставСтрока,1))+Прав(СоставСтрока, СтрДлина(СоставСтрока) - 1);
				Если Прав(СоставСтрока, 2) = ", " Тогда
					СоставСтрока = Лев(СоставСтрока, СтрДлина(СоставСтрока) - 2);
				КонецЕсли;
				
				ОбластьРеквизитыШапка.Параметры.Состав = СоставСтрока;
				
				Если ВыборкаРеквизиты.ИспользоватьВременныеНомера Тогда
					Если ЗначениеЗаполнено(ВыборкаРеквизиты.РегистрационныйНомер)
						И ЗначениеЗаполнено(ВыборкаРеквизиты.ВременныйНомер) Тогда
						ОбластьРеквизитыШапка.Параметры.РегистрационныйНомер = 
							СтрШаблон(НСтр("ru = '%1 (врем. № %2)'"),
								ВыборкаРеквизиты.РегистрационныйНомер,
								ВыборкаРеквизиты.ВременныйНомер);
					ИначеЕсли ЗначениеЗаполнено(ВыборкаРеквизиты.ВременныйНомер) Тогда
						ОбластьРеквизитыШапка.Параметры.РегистрационныйНомер = 
							СтрШаблон(НСтр("ru = 'Врем. № %1'"),
								ВыборкаРеквизиты.ВременныйНомер);
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаРеквизиты.Подготовил) Тогда 
					ФИОПодготовившего = 
						Сотрудники.ПредставлениеСотрудникаНаДату(ВыборкаРеквизиты.Подготовил, ДатаУчетаДокумента);
					ОбластьРеквизитыШапка.Параметры.Подготовил = ФИОПодготовившего;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаРеквизиты.Зарегистрировал) Тогда 
					ФИОРегистрировшего = 
						Сотрудники.ПредставлениеСотрудникаНаДату(ВыборкаРеквизиты.Зарегистрировал, ДатаУчетаДокумента);
					ОбластьРеквизитыШапка.Параметры.Зарегистрировал = ФИОРегистрировшего;
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьРеквизитыШапка);
				
				ПодписьТекст = Делопроизводство.ПолучитьСтрокуПодписи(
					ВыборкаЗаголовок.Ссылка, ВыборкаЗаголовок.ВидДокумента,
					Новый Структура("ВариантДа, ВариантНет", НСтр("ru = 'Да'"), НСтр("ru = 'Нет'")));
				Если ЗначениеЗаполнено(ПодписьТекст) Тогда 
					ОбластьПодписаниеШапка.Параметры.Подписание = НСтр("ru = 'Подписание'");
					ТабличныйДокумент.Вывести(ОбластьПодписаниеШапка);
					ОбластьПодписаниеСтрока.Параметры.Результат = ПодписьТекст;
					ТабличныйДокумент.Вывести(ОбластьПодписаниеСтрока);
						
				КонецЕсли;
				
				УтверждениеТекст = Делопроизводство.ПолучитьСтрокуУтверждения(
					ВыборкаЗаголовок.Ссылка, ВыборкаЗаголовок.ВидДокумента,
					Новый Структура("ВариантДа, ВариантНет", НСтр("ru = 'Да'"), НСтр("ru = 'Нет'")));
				Если ЗначениеЗаполнено(УтверждениеТекст) Тогда 
					ОбластьПодписаниеШапка.Параметры.Подписание = НСтр("ru = 'Утверждение'");
					ТабличныйДокумент.Вывести(ОбластьПодписаниеШапка);
					ОбластьПодписаниеСтрока.Параметры.Результат = УтверждениеТекст;
					ТабличныйДокумент.Вывести(ОбластьПодписаниеСтрока);
						
				КонецЕсли;
				
				// Прочие реквизиты
				Если ВыборкаРеквизиты.УчитыватьСуммуДокумента 
					Или ВыборкаРеквизиты.УчитыватьСрокДействия
					Или ВыборкаРеквизиты.ВестиУчетПоКонтрагентам
					Или ВыборкаРеквизиты.ВестиУчетПоАдресатам
					Или ИспользоватьГрифыДоступа 
					Или (ИспользоватьУчетПоОрганизациям И ВыборкаРеквизиты.ВестиУчетПоОрганизациям)
					Или ИспользоватьВопросыДеятельности 
					Или ИспользоватьСостоянияДокументов
					Или ЗначениеЗаполнено(ВыборкаРеквизиты.Ответственный)
					Или (ЗначениеЗаполнено(ВыборкаРеквизиты.Важность) И ВыборкаРеквизиты.ИспользоватьВажность = Истина)
					Или (ЗначениеЗаполнено(ВыборкаРеквизиты.Проект)
						И ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам")) Тогда
					
					ТабличныйДокумент.Вывести(ОбластьПрочиеШапка);
					
					Если ВыборкаРеквизиты.ИспользоватьВажность И ЗначениеЗаполнено(ВыборкаРеквизиты.Важность) Тогда 
						ОбластьПрочиеСтрока.Параметры.Реквизит = НСтр("ru = 'Важность'");
						ОбластьПрочиеСтрока.Параметры.Значение = ВыборкаРеквизиты.Важность;
						ТабличныйДокумент.Вывести(ОбластьПрочиеСтрока);
					КонецЕсли;
					
					Если ВыборкаРеквизиты.ВестиУчетПоАдресатам Тогда 
						ОбластьПрочиеСтрока.Параметры.Реквизит = НСтр("ru = 'Адресат'");
						ОбластьПрочиеСтрока.Параметры.Значение = Строка(ВыборкаРеквизиты.Адресат);
						ТабличныйДокумент.Вывести(ОбластьПрочиеСтрока);
					КонецЕсли;
					
					Если ИспользоватьГрифыДоступа Тогда 
						ОбластьПрочиеСтрока.Параметры.Реквизит = НСтр("ru = 'Гриф доступа'");
						ОбластьПрочиеСтрока.Параметры.Значение = ВыборкаРеквизиты.ГрифДоступа;
						ТабличныйДокумент.Вывести(ОбластьПрочиеСтрока);
					КонецЕсли;
					
					Если ИспользоватьУчетПоОрганизациям И ВыборкаРеквизиты.ВестиУчетПоОрганизациям Тогда 
						ОбластьПрочиеСтрока.Параметры.Реквизит = РедакцииКонфигурацииКлиентСервер.Организация();
						ОбластьПрочиеСтрока.Параметры.Значение
								= Юрлица.ПредставлениеЮрлицаНаДату(ВыборкаРеквизиты.ОрганизацияСсылка, ВыборкаЗаголовок.ДатаСортировки);
						ТабличныйДокумент.Вывести(ОбластьПрочиеСтрока);
					КонецЕсли;
					
					Если ИспользоватьВопросыДеятельности Тогда 
						ОбластьПрочиеСтрока.Параметры.Реквизит = НСтр("ru = 'Вопрос деятельности'");
						ОбластьПрочиеСтрока.Параметры.Значение = ВыборкаРеквизиты.ВопросДеятельности;
						ТабличныйДокумент.Вывести(ОбластьПрочиеСтрока);
					КонецЕсли;
					
					Если ВыборкаРеквизиты.ВестиУчетПоКонтрагентам Тогда 
						Если ВыборкаРеквизиты.КоличествоКонтрагентов > 1 Тогда 
							ОбластьПрочиеСтрока.Параметры.Реквизит = НСтр("ru = 'Контрагенты'");
						Иначе 
							ОбластьПрочиеСтрока.Параметры.Реквизит = НСтр("ru = 'Контрагент'");
						КонецЕсли;
						
						ОбластьПрочиеСтрока.Параметры.Значение = ВыборкаРеквизиты.Контрагенты;
						ТабличныйДокумент.Вывести(ОбластьПрочиеСтрока);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ВыборкаРеквизиты.Проект)
						И ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда
						ОбластьПрочиеСтрока.Параметры.Реквизит = НСтр("ru = 'Проект'");
						ОбластьПрочиеСтрока.Параметры.Значение = ВыборкаРеквизиты.Проект;
						ТабличныйДокумент.Вывести(ОбластьПрочиеСтрока);
					КонецЕсли;
					
					Если ИспользоватьСостоянияДокументов Тогда 
						ОбластьПрочиеСтрока.Параметры.Реквизит = НСтр("ru = 'Состояние'");
						ОбластьПрочиеСтрока.Параметры.Значение = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(ВыборкаРеквизиты.Ссылка);
						ТабличныйДокумент.Вывести(ОбластьПрочиеСтрока);	
					КонецЕсли;
					
					Если ВыборкаРеквизиты.УчитыватьСуммуДокумента Тогда 
						ОбластьПрочиеСтрока.Параметры.Реквизит = НСтр("ru = 'Сумма'");
						ОбластьПрочиеСтрока.Параметры.Значение = Строка(ВыборкаРеквизиты.Сумма) + " " + Строка(ВыборкаРеквизиты.Валюта);
						ТабличныйДокумент.Вывести(ОбластьПрочиеСтрока);
						
						Если Делопроизводство.УчитыватьНДС(ВыборкаРеквизиты.ОрганизацияСсылка) Тогда 
							ОбластьПрочиеСтрока.Параметры.Реквизит = НСтр("ru = 'Сумма НДС'");
							ОбластьПрочиеСтрока.Параметры.Значение = Строка(ВыборкаРеквизиты.СуммаНДС) + " " + Строка(ВыборкаРеквизиты.Валюта);
							ТабличныйДокумент.Вывести(ОбластьПрочиеСтрока);
						КонецЕсли;
						
						Если ВыборкаРеквизиты.ВестиУчетПоСтатьямДДС Тогда
							
							СтатьиДДС = Новый ТаблицаЗначений;
							СтатьиДДС.Колонки.Добавить("СтатьяДвиженияДенежныхСредств");
							СтатьиДДС.Колонки.Добавить("Сумма");
							СтатьиДДС.Колонки.Добавить("СуммаНДС");
							РегистрыСведений.СтатьиДвиженияДенежныхСредствДокументов.ПрочитатьСтатьиДокумента(
								ВыборкаРеквизиты.Ссылка, СтатьиДДС);
								
							Если СтатьиДДС.Количество() > 1 Тогда
								ОбластьПрочиеСтрока.Параметры.Реквизит = НСтр("ru = 'Статьи ДДС'");
							Иначе
								ОбластьПрочиеСтрока.Параметры.Реквизит = НСтр("ru = 'Статья ДДС'");
							КонецЕсли;
							
							Для Каждого СтрокаСтатьи из СтатьиДДС Цикл
								ОбластьПрочиеСтрока.Параметры.Значение = Строка(СтрокаСтатьи.СтатьяДвиженияДенежныхСредств);
								ТабличныйДокумент.Вывести(ОбластьПрочиеСтрока);
								ОбластьПрочиеСтрока.Параметры.Реквизит = "";
							КонецЦикла;
							
						КонецЕсли;
					КонецЕсли;
					
					Если ВыборкаРеквизиты.УчитыватьСрокДействия И ВидДокумента.УчитыватьСрокДействия Тогда 
						ОбластьПрочиеСтрока.Параметры.Реквизит = НСтр("ru = 'Срок действия'");
						ОбластьПрочиеСтрока.Параметры.Значение = 
							Формат(ВыборкаРеквизиты.ДатаНачалаДействия, "ДЛФ=D") 
							+ " - " 
							+ Формат(ВыборкаРеквизиты.ДатаОкончанияДействия, "ДЛФ=D");
						ТабличныйДокумент.Вывести(ОбластьПрочиеСтрока);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ВыборкаРеквизиты.Ответственный) Тогда 
						ОбластьПрочиеСтрока.Параметры.Реквизит = НСтр("ru = 'Ответственный'");
						ФИООтветственного = Сотрудники.ПредставлениеСотрудникаНаДату(ВыборкаРеквизиты.Ответственный, 
							ДатаУчетаДокумента);
						ОбластьПрочиеСтрока.Параметры.Значение = ФИООтветственного;
						ТабличныйДокумент.Вывести(ОбластьПрочиеСтрока);
					КонецЕсли;
					
					ВывестиПодвалРеквизитов = Истина;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
		
		// Стороны
		Если ПараметрыПечати.Свойство("Стороны") И ПараметрыПечати.Стороны Тогда 
			
			ВыборкаСторон = Результат[ИндексВыборкаСторон].Выбрать();
			Если ВыборкаСторон.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Тогда
				
				ТабличныйДокумент.Вывести(ОбластьСтороныШапка);
				
				ВыборкаСторон.Сбросить();
				Пока ВыборкаСторон.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Цикл 
					ОбластьСтороныСтрока.Параметры.Заполнить(ВыборкаСторон);
					ОбластьСтороныСтрока.Параметры.СторонаПредставление
							= Юрлица.СведенияОЮрлицеНаДату(ВыборкаСторон.Сторона, ВыборкаЗаголовок.ДатаСортировки).ПредставлениеПолное;
					ТабличныйДокумент.Вывести(ОбластьСтороныСтрока);
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
		// Дополнительные реквизиты
		Если ИспользоватьДополнительныеРеквизитыИСведения 
			И ПараметрыПечати.Свойство("ДопРеквизиты") 
			И ПараметрыПечати.ДопРеквизиты Тогда 
			
			ВыборкаДопРеквизиты = Результат[ИндексВыборкаДопРеквизиты].Выбрать();
			Если ВыборкаДопРеквизиты.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Тогда
				ТабличныйДокумент.Вывести(ОбластьДопРеквизитыШапка);
				
				КонфигурацияИспользуетТолькоОдинЯзык = МультиязычностьПовтИсп.КонфигурацияИспользуетТолькоОдинЯзык(Ложь);
				
				ВыборкаДопРеквизиты.Сбросить();
				Пока ВыборкаДопРеквизиты.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Цикл   
					
					ОбластьДопРеквизитыСтрока.Параметры.Свойство = ВыборкаДопРеквизиты.Свойство.Заголовок;
					Если Не КонфигурацияИспользуетТолькоОдинЯзык И Не МультиязычностьСервер.ЭтоОсновнойЯзык() Тогда
						ОбластьДопРеквизитыСтрока.Параметры.Свойство = ВыборкаДопРеквизиты.Свойство.ЗаголовокЯзык1;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ВыборкаДопРеквизиты.ТекстоваяСтрока) Тогда 
						ЗначениеСвойства = ВыборкаДопРеквизиты.ТекстоваяСтрока;
					Иначе
						ЗначениеСвойства = ВыборкаДопРеквизиты.Значение;
					КонецЕсли;	
					
					Если ЗначениеЗаполнено(ВыборкаДопРеквизиты.ФорматСвойства) Тогда
						ЗначениеСвойства = Формат(ЗначениеСвойства, ВыборкаДопРеквизиты.ФорматСвойства);
					КонецЕсли;
					
					ОбластьДопРеквизитыСтрока.Параметры.Значение = ЗначениеСвойства;
					
					ТабличныйДокумент.Вывести(ОбластьДопРеквизитыСтрока);
				КонецЦикла;	
				ВыборкаДопРеквизиты.Сбросить();
				
				ВывестиПодвалРеквизитов = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ВывестиПодвалРеквизитов Тогда 
			ТабличныйДокумент.Вывести(ОбластьПрочиеПодвал);
		КонецЕсли;
		
		// История сроков действия документа
		Если ПараметрыПечати.Свойство("ИсторияСрокаДействия") 
			И ПараметрыПечати.ИсторияСрокаДействия 
			И ВидДокумента.УчитыватьСрокДействия Тогда
			ВыборкаИсторияСроковДействия = Результат[ИндексВыборкаИсторияСроковДействия].Выбрать();
			
			ТабличныйДокумент.Вывести(ОбластьИсторияСроковДействияШапка);
			ВыборкаИсторияСроковДействия.Сбросить();
			Пока ВыборкаИсторияСроковДействия.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Документ") Цикл
				ОбластьИсторияСроковДействияСтрока.Параметры.Заполнить(ВыборкаИсторияСроковДействия);
				ТабличныйДокумент.Вывести(ОбластьИсторияСроковДействияСтрока);
			КонецЦикла;	
			ВыборкаИсторияСроковДействия.Сбросить();
		КонецЕсли;
		
		// Товары и услуги
		Если ПараметрыПечати.Свойство("ВестиУчетТоваровИУслуг") И ПараметрыПечати.ВестиУчетТоваровИУслуг Тогда 
			
			ВыборкаТовары = Результат[ИндексВыборкаТовары].Выбрать();
			Если ВыборкаТовары.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Тогда
				
				ТабличныйДокумент.Вывести(ОбластьТоварыШапка);
				ИтогСуммы = 0; ИтогСуммыНДС = 0; Организация = Справочники.Организации.ПустаяСсылка();
				
				ВыборкаТовары.Сбросить();
				Пока ВыборкаТовары.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Цикл 
					ОбластьТоварыСтрока.Параметры.Заполнить(ВыборкаТовары);
					ТабличныйДокумент.Вывести(ОбластьТоварыСтрока);
					ИтогСуммы = ИтогСуммы + ВыборкаТовары.Сумма;
					ИтогСуммыНДС = ИтогСуммыНДС + ВыборкаТовары.СуммаНДС;
					Организация = ВыборкаТовары.Организация;
				КонецЦикла;
				
				Если ИтогСуммы > 0 Тогда 
					ОбластьТоварыИтог.Параметры.Заголовок = НСтр("ru = 'Итого:'");
					ОбластьТоварыИтог.Параметры.Итог = ИтогСуммы;
					ТабличныйДокумент.Вывести(ОбластьТоварыИтог);
				КонецЕсли;
				
				Если Делопроизводство.УчитыватьНДС(Организация) И ИтогСуммыНДС > 0 Тогда 
					ОбластьТоварыИтог.Параметры.Заголовок = НСтр("ru = 'В том числе НДС:'");
					ОбластьТоварыИтог.Параметры.Итог = ИтогСуммыНДС;
					ТабличныйДокумент.Вывести(ОбластьТоварыИтог);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Приложенные файлы
		Если ПараметрыПечати.Свойство("ПриложенныеФайлы") И ПараметрыПечати.ПриложенныеФайлы Тогда
			
			ИспользоватьРолиФайлов = ПолучитьФункциональнуюОпцию("ИспользоватьРолиФайлов"); 
			
			ВыборкаФайлы = Результат[ИндексВыборкаФайлы].Выбрать(); 
			Если ВыборкаФайлы.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "ВладелецФайла") Тогда
				
				Если Не ИспользоватьРолиФайлов Тогда
					Ячейки = ОбластьФайлыШапка.НайтиТекст("Наименование, Роль");
					Если Ячейки <> Неопределено Тогда
						Ячейки.Текст = НСтр("ru = 'Наименование'"); 
					КонецЕсли;	
				КонецЕсли;	
				
				ТабличныйДокумент.Вывести(ОбластьФайлыШапка);
				
				ВыборкаФайлы.Сбросить();
				Пока ВыборкаФайлы.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "ВладелецФайла") Цикл
					
					ОбластьФайлыСтрока.Параметры.Заполнить(ВыборкаФайлы);
					Отредактировал = ВыборкаФайлы.Отредактировал;
					Если ЗначениеЗаполнено(Отредактировал) Тогда
						
						Отредактировал = Сотрудники.ПредставлениеСотрудникаНаДату(Отредактировал, ДатаУчетаДокумента);
						
					КонецЕсли;
					
					Автор = ВыборкаФайлы.Автор;
					Если ЗначениеЗаполнено(Автор) Тогда
						
						Автор = Сотрудники.ПредставлениеСотрудникаНаДату(Автор, ДатаУчетаДокумента);
						
					КонецЕсли;
					
					ОбластьФайлыСтрока.Параметры.Автор = Автор;
					ОбластьФайлыСтрока.Параметры.Отредактировал = Отредактировал;
					
					НаименованиеРоль = ВыборкаФайлы.Наименование;
					Если ИспользоватьРолиФайлов И ЗначениеЗаполнено(ВыборкаФайлы.Роль) Тогда
						НаименованиеРоль = НаименованиеРоль + ", " + ВыборкаФайлы.Роль;
					КонецЕсли;	 
					ОбластьФайлыСтрока.Параметры.НаименованиеРоль = НаименованиеРоль; 
					ТабличныйДокумент.Вывести(ОбластьФайлыСтрока);
				КонецЦикла;	
				ВыборкаФайлы.Сбросить();
			КонецЕсли;
			
		КонецЕсли;
		
		// Версии файлов
		Если ПараметрыПечати.Свойство("ВерсииФайлов") И ПараметрыПечати.ВерсииФайлов Тогда 
			
			ВыборкаВерсии = Результат[ИндексВыборкаВерсии].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Если ВыборкаВерсии.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "ВладелецФайла") Тогда
				ТабличныйДокумент.Вывести(ОбластьВерсииШапка);
				
				ВыборкаВерсии.Сбросить();
				Пока ВыборкаВерсии.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "ВладелецФайла") Цикл
					
					ВыборкаГруппировкаФайлы = ВыборкаВерсии.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаГруппировкаФайлы.Следующий() Цикл
						ОбластьВерсииСтрокаФайл.Параметры.Заполнить(ВыборкаГруппировкаФайлы);
						
						ТабличныйДокумент.Вывести(ОбластьВерсииСтрокаФайл);
						
						ВыборкаДетали = ВыборкаГруппировкаФайлы.Выбрать();
						Пока ВыборкаДетали.Следующий() Цикл
							ОбластьВерсииСтрока.Параметры.Заполнить(ВыборкаДетали);
							Автор = ВыборкаДетали.Автор;
							Если ЗначениеЗаполнено(Автор) Тогда
								
								Автор = Сотрудники.ПредставлениеСотрудникаНаДату(Автор, ДатаУчетаДокумента);
								
							КонецЕсли;
							ОбластьВерсииСтрока.Параметры.Автор = Автор;
							ТабличныйДокумент.Вывести(ОбластьВерсииСтрока);
						КонецЦикла;	
					КонецЦикла;	
					
				КонецЦикла;	
				ВыборкаВерсии.Сбросить();
				
			КонецЕсли;
		КонецЕсли;
		
		
		// ЭП
		Если ПараметрыПечати.Свойство("ЭП") 
			И ПараметрыПечати.ЭП 
			И ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи") Тогда 
			
			ВыборкаЭП = Результат[ИндексВыборкаЭП].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Если ВыборкаЭП.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Документ") Тогда
				ТабличныйДокумент.Вывести(ОбластьЭПШапка);
				
				ВыборкаЭП.Сбросить();
				Если ВыборкаЭП.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Документ") Тогда
					
					ВыборкаОбъектЭП = ВыборкаЭП.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаОбъектЭП.Следующий() Цикл
						ОбластьЭПОбъект.Параметры.ОбъектЭП = Строка(ТипЗнч(ВыборкаОбъектЭП.ОбъектЭП))
							+ " """ + Строка(ВыборкаОбъектЭП.ОбъектЭП) + """";
						ТабличныйДокумент.Вывести(ОбластьЭПОбъект);
						
						ВыборкаДетали = ВыборкаОбъектЭП.Выбрать();
						Пока ВыборкаДетали.Следующий() Цикл
							ОбластьЭПСтрока.Параметры.Заполнить(ВыборкаДетали);
							ТабличныйДокумент.Вывести(ОбластьЭПСтрока);
						КонецЦикла;	
					КонецЦикла;	
				КонецЕсли;
				ВыборкаЭП.Сбросить();
				
			КонецЕсли;
		КонецЕсли;
		
		// Состав комплекта
		Если ПараметрыПечати.Свойство("СоставКомплекта") 
			И ПараметрыПечати.СоставКомплекта Тогда 
			
			ВыборкаСоставКомплекта = Результат[ИндексВыборкаСоставКомплекта].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Если ВыборкаСоставКомплекта.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Документ") Тогда
				ТабличныйДокумент.Вывести(ОбластьСоставКомплектаШапка);
				ВыборкаДетали = ВыборкаСоставКомплекта.Выбрать();
				Пока ВыборкаДетали.Следующий() Цикл
					ОбластьСоставКомплектаСтрока.Параметры.Заполнить(ВыборкаДетали);
					ТабличныйДокумент.Вывести(ОбластьСоставКомплектаСтрока);
				КонецЦикла;	
				ВыборкаСоставКомплекта.Сбросить();
			КонецЕсли;
			
		КонецЕсли;	
		
		// Связанные документы
		Если ИспользоватьСвязиДокументов 
			И ПараметрыПечати.Свойство("СвязанныеДокументы")
			И ПараметрыПечати.СвязанныеДокументы  Тогда 
			
			ВыборкаСвязи = Результат[ИндексВыборкаСвязи].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Если ВыборкаСвязи.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Документ") Тогда
				ТабличныйДокумент.Вывести(ОбластьСвязанныеДокументыШапка);
				
				ВыборкаСвязи.Сбросить();
				Если ВыборкаСвязи.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Документ") Тогда
					
					ВыборкаТипСвязи = ВыборкаСвязи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаТипСвязи.Следующий() Цикл
						ОбластьСвязанныеДокументыТипСвязи.Параметры.Заполнить(ВыборкаТипСвязи);
						ТабличныйДокумент.Вывести(ОбластьСвязанныеДокументыТипСвязи);
						
						ВыборкаДетали = ВыборкаТипСвязи.Выбрать();
						Пока ВыборкаДетали.Следующий() Цикл
							Если ТипЗнч(ВыборкаДетали.СвязанныйОбъект) = Тип("Строка") Тогда 
								Тип = НСтр("ru = 'Внешняя ссылка'");
							Иначе
								Тип = МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(
									ВыборкаДетали.СвязанныйОбъект);
							КонецЕсли;
							
							ОбластьСвязанныеДокументыСтрока.Параметры.Заполнить(ВыборкаДетали);
							ОбластьСвязанныеДокументыСтрока.Параметры.Тип = Тип;
							ТабличныйДокумент.Вывести(ОбластьСвязанныеДокументыСтрока);
						КонецЦикла;	
					КонецЦикла;	
					
				КонецЕсли;
				ВыборкаСвязи.Сбросить();
				
			КонецЕсли;
			
		КонецЕсли;	
		
		// Журнал передачи
		Если ПараметрыПечати.Свойство("ЖурналПередачи") И ПараметрыПечати.ЖурналПередачи Тогда 
			
			ВыборкаЖурналПередачи = Результат[ИндексВыборкаЖурналПередачи].Выбрать();
			Если ВыборкаЖурналПередачи.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Тогда
				ТабличныйДокумент.Вывести(ОбластьЖурналПередачиШапка);
				
				ВыборкаЖурналПередачи.Сбросить();
				Пока ВыборкаЖурналПередачи.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Ссылка") Цикл
					ОбластьЖурналПередачиСтрока.Параметры.Заполнить(ВыборкаЖурналПередачи);
					ТабличныйДокумент.Вывести(ОбластьЖурналПередачиСтрока);
				КонецЦикла;	
				ВыборкаЖурналПередачи.Сбросить();
			КонецЕсли;
			
		КонецЕсли;
		
		// резолюции
		Если ИспользоватьРезолюцииВДокументах
			И ПараметрыПечати.Свойство("Резолюции")
			И ПараметрыПечати.Резолюции Тогда 
			
			ВыборкаРезолюции = Результат[ИндексВыборкаРезолюции].Выбрать();
			Если ВыборкаРезолюции.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Документ") Тогда
				ТабличныйДокумент.Вывести(ОбластьРезолюцииШапка);
				
				ВыборкаРезолюции.Сбросить();
				Пока ВыборкаРезолюции.НайтиСледующий(ВыборкаЗаголовок.Ссылка, "Документ") Цикл
					
					ОбластьРезолюцииСтрока.Параметры.АвторРезолюции = ВыборкаРезолюции.ПредставлениеФактическогоИсполнителя;
					ОбластьРезолюцииСтрока.Параметры.ДатаРезолюции = ВыборкаРезолюции.ДатаРезолюции;
					Если ПараметрыПечати.Свойство("ЭП")
						И ПараметрыПечати.ЭП И ВыборкаРезолюции.Подписана
						И ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи") Тогда
						ОбластьРезолюцииСтрока.Параметры.ДатаПодписания = ВыборкаРезолюции.ДатаПодписания;
					КонецЕсли;
					ОбластьРезолюцииСтрока.Параметры.Текст = ВыборкаРезолюции.ТекстРезолюции;
					
					ТабличныйДокумент.Вывести(ОбластьРезолюцииСтрока);
				КонецЦикла;	
				ВыборкаРезолюции.Сбросить();
				
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыПечати.Свойство("Обработка") И ПараметрыПечати.Обработка Тогда
			
			ДокументСсылка = ВыборкаЗаголовок.Ссылка;
			ПредставлениеОбработки = "";
			Действия = ДействияСервер.ДеревоОбработки(ДокументСсылка, ПредставлениеОбработки, ВидДокумента);
			
			Если Действия.Строки.Количество() <> 0 Тогда
			
				ОбластьОбработкаШапка = Макет.ПолучитьОбласть("ОбработкаШапка");
				ОбластьОбработкаШапка.Параметры.Обработка = ПредставлениеОбработки; 
				ТабличныйДокумент.Вывести(ОбластьОбработкаШапка);
				
				СтрокиДерева = Действия.Строки;
				Уровень = 0;
				ВывестиДеревоОбработки(СтрокиДерева, ТабличныйДокумент, ОбластьОбработкаСтрока, Уровень);
				
			КонецЕсли;
			
		КонецЕсли;
			
		Если ПараметрыПечати.Свойство("Обработка") И ПараметрыПечати.Обработка Тогда
			
			ДокументСсылка = ВыборкаЗаголовок.Ссылка;
			ЗаголовокЗадач = "";
			ДеревоЗадач = РаботаСЗадачами.ДеревоЗадачДляПечатиКарточкиДокумента(ДокументСсылка, ЗаголовокЗадач);
			
			Если ДеревоЗадач.Строки.Количество() <> 0 Тогда

				ОбластьДругиеЗадачиШапка = Макет.ПолучитьОбласть("ДругиеЗадачиШапка");
				ОбластьДругиеЗадачиШапка.Параметры.ШапкаЗадач = ЗаголовокЗадач; 
				ТабличныйДокумент.Вывести(ОбластьДругиеЗадачиШапка);
				
				СтрокиДерева = ДеревоЗадач.Строки;
				Уровень = 0;
				ВывестиДеревоЗадач(СтрокиДерева, ТабличныйДокумент, ОбластьДругиеЗадачиСтрока, Уровень);
				
			КонецЕсли;
			
		КонецЕсли;
			
		
		// В табличном документе зададим имя области в которую был 
		// выведен объект. Нужно для возможности печати по-комплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаЗаголовок.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ВывестиДеревоЗадач(СтрокиДерева, ТабличныйДокумент, ОбластьОбработкаСтрока, Знач Уровень)
	
	ПрефиксУровня = "";
	Для пер = 0 По Уровень - 1 Цикл
		ПрефиксУровня = ПрефиксУровня + Символы.Таб;
	КонецЦикла;	 
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	СтрокаФормата = ?(ИспользоватьДатуИВремяВСрокахЗадач, "ДФ='dd.MM.yyyy ЧЧ:мм'", "ДЛФ=D");
	
	Для Каждого Строка Из СтрокиДерева Цикл
		
		ОбластьОбработкаСтрока.Параметры.Заполнить(Строка);
		ОбластьОбработкаСтрока.Параметры.Представление = ПрефиксУровня + ОбластьОбработкаСтрока.Параметры.Представление;
		
		Если Строка.ИндексКартинкиСостояния = 9 Тогда
			ОбластьОбработкаСтрока.Параметры.ЗадачаВыполнена = БиблиотекаКартинок.СостояниеЗадачиПоложительныйРезультат;
		ИначеЕсли Строка.ИндексКартинкиСостояния = 8 Тогда
			ОбластьОбработкаСтрока.Параметры.ЗадачаВыполнена = БиблиотекаКартинок.СостояниеЗадачиПоложительныйСЗамечаниямиРезультат;
		ИначеЕсли Строка.ИндексКартинкиСостояния = 7 Тогда
			ОбластьОбработкаСтрока.Параметры.ЗадачаВыполнена = БиблиотекаКартинок.СостояниеЗадачиОтрицательныйРезультат;
		ИначеЕсли Строка.ИндексКартинкиСостояния = 6 Тогда
			ОбластьОбработкаСтрока.Параметры.ЗадачаВыполнена = БиблиотекаКартинок.СостояниеЗадачиНейтральныйРезультат;
		Иначе
			ОбластьОбработкаСтрока.Параметры.ЗадачаВыполнена = Неопределено;
		КонецЕсли;
		
		Если Строка.ЭтоВыполненнаяЗадача
			И ЗначениеЗаполнено(Строка.ДействиеЗадачи)
			И ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(Строка.ДействиеЗадачи).Чтение Тогда
			
			ДатаВыполнения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ДействиеЗадачи, "ДатаВыполнения");
			
			Если ЗначениеЗаполнено(ДатаВыполнения) Тогда
				ОбластьОбработкаСтрока.Параметры.Представление = ОбластьОбработкаСтрока.Параметры.Представление
				 + ", " +  НСтр("ru = 'выполнена: '") + Формат(ДатаВыполнения, СтрокаФормата);
			КонецЕсли;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьОбработкаСтрока);
	
		ВывестиДеревоЗадач(Строка.Строки, ТабличныйДокумент, ОбластьОбработкаСтрока, Уровень + 1);
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ВывестиДеревоОбработки(СтрокиДерева, ТабличныйДокумент, ОбластьОбработкаСтрока, Знач Уровень)
	
	ПрефиксУровня = "";
	Для пер = 0 По Уровень - 1 Цикл
		ПрефиксУровня = ПрефиксУровня + " "; // Символы.Таб
	КонецЦикла;	 
	
	Для Каждого Строка Из СтрокиДерева Цикл
		
		ОбластьОбработкаСтрока.Параметры.Заполнить(Строка);
		ОбластьОбработкаСтрока.Параметры.Представление = ПрефиксУровня + ОбластьОбработкаСтрока.Параметры.Представление;
		
		Если Строка.ЕстьФайлыОтчета Тогда
			ОбластьОбработкаСтрока.Параметры.ЕстьФайлы = БиблиотекаКартинок.Скрепка;
		Иначе	
			ОбластьОбработкаСтрока.Параметры.ЕстьФайлы = Неопределено;
		КонецЕсли;	
		
		ТабличныйДокумент.Вывести(ОбластьОбработкаСтрока);
	
		ВывестиДеревоОбработки(Строка.Строки, ТабличныйДокумент, ОбластьОбработкаСтрока, Уровень + 1);
		
	КонецЦикла;	
	
КонецПроцедуры	

// Функция получает данные для формирования печатной формы "Лист согласования".
//
// Параметры:
//   МассивОбъектов - Массив - массив ссылок на документы, по которым необходимо получить данные.
//   ОбъектыПечати - СписокЗначений - список объектов печати.
//   БесшовнаяИнтеграция - Булево - печатная форма будет отправлена через бесшовную интеграцию на сторону ИС.
//
// Возвращаемое значение:
//   ТабличныйДокумент - печатная форма.
//
Функция ЛистСогласования(МассивОбъектов, ОбъектыПечати, БесшовнаяИнтеграция = Ложь) Экспорт
	
	Возврат РаботаСВизамиСогласования.ПечатьЛистаСогласованияИзДокумента(
		МассивОбъектов,
		ОбъектыПечати,
		Ложь,
		БесшовнаяИнтеграция);
	
КонецФункции

// Функция получает данные для формирования печатной формы "Лист согласования с историей".
//
// Параметры:
//   МассивОбъектов - Массив - массив ссылок на документы, по которым необходимо получить данные.
//   ОбъектыПечати - СписокЗначений - список объектов печати.
//   БесшовнаяИнтеграция - Булево - печатная форма будет отправлена через бесшовную интеграцию на сторону ИС.
//
// Возвращаемое значение:
//   ТабличныйДокумент - печатная форма.
//
Функция ЛистСогласованияСИсторией(МассивОбъектов, ОбъектыПечати, БесшовнаяИнтеграция = Ложь) Экспорт
	
	Возврат РаботаСВизамиСогласования.ПечатьЛистаСогласованияИзДокумента(
		МассивОбъектов,
		ОбъектыПечати,
		Истина,
		БесшовнаяИнтеграция);
	
КонецФункции

// Функция получает данные для формирования печатной формы "Протокол разногласий".
//
// Параметры:
//   МассивОбъектов - Массив - Массив ссылок на документы, по которым необходимо получить данные.
//   ОбъектыПечати - СписокЗначений - список объектов печати.
//   БесшовнаяИнтеграция - Булево - печатная форма будет отправлена через бесшовную интеграцию на сторону ИС.
//
// Возвращаемое значение:
//   ТабличныйДокумент - печатная форма.
//
Функция ПротоколРазногласий(МассивОбъектов, ОбъектыПечати, БесшовнаяИнтеграция = Ложь) Экспорт
	
	Возврат РаботаСВизамиСогласования.ПечатьПротоколРазногласийИзДокумента(
		МассивОбъектов,
		ОбъектыПечати,,
		БесшовнаяИнтеграция);
	
КонецФункции

// Функция получает данные для формирования печатной формы "Лист ознакомления".
//
// Параметры:
//   МассивОбъектов - Массив - массив ссылок на документы, по которым необходимо получить данные.
//   ОбъектыПечати - СписокЗначений - список объектов печати.
//   БесшовнаяИнтеграция - Булево - печатная форма будет отправлена через бесшовную интеграцию на сторону ИС.
//
// Возвращаемое значение:
//   ТабличныйДокумент - печатная форма.
//
Функция ЛистОзнакомления(МассивОбъектов, ОбъектыПечати, БесшовнаяИнтеграция = Ложь) Экспорт
	
	Возврат Справочники.ДействияОзнакомления.ТабличныйДокументЛистОзнакомления(
		МассивОбъектов,
		ОбъектыПечати,
		БесшовнаяИнтеграция);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Карточка документа внешнее подписание.
// 
// Параметры:
//  МассивОбъектов - Массив Из СправочникСсылка.ДокументыПредприятия - Массив ссылок на документы;
//  ОбъектыПечати  - СписокЗначений Из СправочникСсылка.ДокументыПредприятия - список объектов печати;
// 
// Возвращаемое значение:
//  ТабличныйДокумент - печатная форма
//
Функция КарточкаДокументаВнешнееПодписание(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабличныйДокумент = ОбзорДокумента.ПечатьКарточкиДокументаВнешнееПодписание(МассивОбъектов, ОбъектыПечати);
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает массив имен ключевых реквизитов согласно версии
//
// Параметры:
//	Версия - версия набора ключевых реквизитов. По умолчанию Неопределено - значит последняя.
//
// Возвращаемое значение:
//	Массив
// 
Функция ПолучитьИменаКлючевыхРеквизитов(Версия = Неопределено) Экспорт
	
	Если Версия = Неопределено Тогда
		
		Возврат АктуальныеИменаКлючевыхРеквизитов();
		
	Иначе
		
		ИменаПоСтарымВерсиям = ИменаКлючевыхРеквизитовПоСтарымВерсиямПодписей();
		Если ИменаПоСтарымВерсиям[Версия] <> Неопределено Тогда
			
			Возврат ИменаПоСтарымВерсиям[Версия];
			
		Иначе
			
			Возврат АктуальныеИменаКлючевыхРеквизитов();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Возвращает признак наличия метода ДобавитьУчастниковВТаблицу у менеджера объекта
//
Функция ЕстьМетодДобавитьУчастниковВТаблицу() Экспорт
	Возврат Истина;
КонецФункции

// Добавляет участников документа в переданную таблицу
//
Процедура ДобавитьУчастниковВТаблицу(ТаблицаНабора, Документ) Экспорт
	
	Если ТипЗнч(Документ) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда 
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, 
			"Ссылка, Ответственный, Зарегистрировал, Подготовил, Подписал, Адресат, Создал, Стороны");
	Иначе 
		РеквизитыДокумента = Документ;
	КонецЕсли;
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора,
		РеквизитыДокумента.Ответственный, Истина);
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, 
		РеквизитыДокумента.Зарегистрировал, Истина);
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора,
		РеквизитыДокумента.Подготовил, Истина);
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора,
		РеквизитыДокумента.Подписал, Истина);
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, РеквизитыДокумента.Адресат);
	
	РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, РеквизитыДокумента.Создал, Истина);
	
	ПодписантыСторон = РаботаСПодписямиДокументов.ПодписантыСторонДокумента(РеквизитыДокумента.Стороны.Выгрузить());
	Для Каждого Подписант Из ПодписантыСторон Цикл
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, Подписант);
	КонецЦикла;	
	
	ЭП = РаботаСЭП.ПолучитьЭлектронныеПодписи(РеквизитыДокумента.Ссылка);
	Пока ЭП.Следующий() Цикл
		РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, ЭП.УстановившийПодпись);
	КонецЦикла;
	
	Резолюции = РаботаСРезолюциями.ПолучитьРезолюции(РеквизитыДокумента.Ссылка);
	Для Каждого РезолюцииСтрока Из Резолюции Цикл
		Если ТипЗнч(РезолюцииСтрока.АвторРезолюции) = Тип("СправочникСсылка.Пользователи") Тогда
			РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, РезолюцииСтрока.АвторРезолюции);
		КонецЕсли;
		Если ТипЗнч(РезолюцииСтрока.ВнесРезолюцию) = Тип("СправочникСсылка.Пользователи") Тогда
			РаботаСРабочимиГруппами.ДобавитьУчастникаВТаблицуНабора(ТаблицаНабора, РезолюцииСтрока.ВнесРезолюцию);
		КонецЕсли;
	КонецЦикла;
	
	// Добавление контролеров
	Контроль.ДобавитьКонтролеровВТаблицу(ТаблицаНабора, РеквизитыДокумента.Ссылка);
	
КонецПроцедуры

Функция ИмеетСрокДействия(Ссылка) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДокументыПредприятия.ВидДокумента.УчитыватьСрокДействия КАК ИмеетСрокДействия
		|ИЗ
		|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
		|ГДЕ
		|	ДокументыПредприятия.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить()[0].ИмеетСрокДействия;
	
КонецФункции

// Проверяет, подходит ли объект к шаблону бизнес-процесса
Функция ШаблонПодходитДляАвтозапускаБизнесПроцессаПоОбъекту(ШаблонСсылка, ПредметСсылка, Подписчик, ВидСобытия, Условие) Экспорт
	
	Возврат БизнесСобытияВызовСервера.ШаблонПодходитДляАвтозапускаБизнесПроцессаПоПредмету(ШаблонСсылка, 
		ПредметСсылка, Подписчик, ВидСобытия, Условие);
	
КонецФункции

// Возвращает Имя предмета процесса по умолчанию
//
Функция ПолучитьИмяПредметаПоУмолчанию(Ссылка) Экспорт
	
	КэшДокументыПредприятияФормаЭлемента =
		КэшиНаВремяВызоваПовтИсп.КэшДокументыПредприятияФормаЭлемента();
	Если КэшДокументыПредприятияФормаЭлемента.Инициализирован
		И КэшДокументыПредприятияФормаЭлемента.КэшДокумента.Ссылка = Ссылка Тогда
		ИмяПредмета = КэшДокументыПредприятияФормаЭлемента.КэшДокумента.ВидДокумента;
	Иначе
		ИмяПредмета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ВидДокумента");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяПредмета) Тогда
		ИмяПредмета =  НСтр("ru='Документ'")
	КонецЕсли;
	
	Возврат Строка(ИмяПредмета);
	
КонецФункции

// ВерсионированиеОбъектов
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры
// Конец ВерсионированиеОбъектов

Функция ИменаКлючевыхРеквизитовПоСтарымВерсиямПодписей()
	
	РеквизитыПоВерсиям = Новый Соответствие();
	
	ИменаРеквизитов = Новый Массив(); // Массив Из Строка
	ИменаРеквизитов.Добавить("Заголовок");
	ИменаРеквизитов.Добавить("Содержание");
	РеквизитыПоВерсиям[1] = ИменаРеквизитов;
	
	ИменаРеквизитов = Новый Массив(); // Массив Из Строка
	ИменаРеквизитов.Добавить("Заголовок");
	ИменаРеквизитов.Добавить("Содержание");
	ИменаРеквизитов.Добавить("Организация");
	ИменаРеквизитов.Добавить("Контрагент");
	ИменаРеквизитов.Добавить("Стороны.Сторона");
	ИменаРеквизитов.Добавить("Сумма");
	ИменаРеквизитов.Добавить("Валюта");
	ИменаРеквизитов.Добавить("Файлы");
	РеквизитыПоВерсиям[2] = ИменаРеквизитов;
	
	ИменаРеквизитов = Новый Массив(); // Массив Из Строка
	ИменаРеквизитов.Добавить("Заголовок");
	ИменаРеквизитов.Добавить("Содержание");
	ИменаРеквизитов.Добавить("Организация");
	ИменаРеквизитов.Добавить("Контрагент");
	ИменаРеквизитов.Добавить("Стороны.Сторона");
	ИменаРеквизитов.Добавить("Сумма");
	ИменаРеквизитов.Добавить("Валюта");
	ИменаРеквизитов.Добавить("Файлы");
	ИменаРеквизитов.Добавить("Стороны.Подписал");
	ИменаРеквизитов.Добавить("Стороны.ДатаПодписи");
	РеквизитыПоВерсиям[3] = ИменаРеквизитов;
	
	ИменаРеквизитов = Новый Массив(); // Массив Из Строка
	ИменаРеквизитов.Добавить("Заголовок");
	ИменаРеквизитов.Добавить("Содержание");
	ИменаРеквизитов.Добавить("Организация");
	ИменаРеквизитов.Добавить("Контрагент");
	ИменаРеквизитов.Добавить("Стороны.Сторона");
	ИменаРеквизитов.Добавить("Сумма");
	ИменаРеквизитов.Добавить("Валюта");
	ИменаРеквизитов.Добавить("Файлы");
	ИменаРеквизитов.Добавить("Стороны.Подписан");
	ИменаРеквизитов.Добавить("Стороны.Подписал");
	ИменаРеквизитов.Добавить("Стороны.ДатаПодписи");
	РеквизитыПоВерсиям[4] = ИменаРеквизитов;
	
	ИменаРеквизитов = Новый Массив(); // Массив Из Строка
	ИменаРеквизитов.Добавить("Организация");
	ИменаРеквизитов.Добавить("Контрагент");
	ИменаРеквизитов.Добавить("Стороны.Сторона");
	ИменаРеквизитов.Добавить("Сумма");
	ИменаРеквизитов.Добавить("Валюта");
	ИменаРеквизитов.Добавить("Файлы");
	ИменаРеквизитов.Добавить("Стороны.Подписан");
	ИменаРеквизитов.Добавить("Стороны.Подписал");
	ИменаРеквизитов.Добавить("Стороны.ДатаПодписи");
	РеквизитыПоВерсиям[5] = ИменаРеквизитов;
	
	Возврат РеквизитыПоВерсиям;
	
КонецФункции

Функция АктуальныеИменаКлючевыхРеквизитов()
	
	ИменаРеквизитов = Новый Массив(); // Массив Из Строка
	ИменаРеквизитов.Добавить("Организация");
	ИменаРеквизитов.Добавить("Контрагент");
	ИменаРеквизитов.Добавить("Стороны.Сторона");
	ИменаРеквизитов.Добавить("Сумма");
	ИменаРеквизитов.Добавить("Валюта");
	ИменаРеквизитов.Добавить("Файлы");
	ИменаРеквизитов.Добавить("Стороны.Подписан");
	ИменаРеквизитов.Добавить("Стороны.Подписал");
	ИменаРеквизитов.Добавить("Стороны.ДатаПодписи");
	
	Возврат ИменаРеквизитов;
	
КонецФункции

#КонецОбласти

#КонецЕсли