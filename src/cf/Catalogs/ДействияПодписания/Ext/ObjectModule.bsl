#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Выполняет процедуры записи объекта.
//
Процедура ЗаписатьОбъект() Экспорт
	
	Если ДополнительныеСвойства.Свойство("ЭтоНовый") И ДополнительныеСвойства.ЭтоНовый Тогда
		Для Каждого Стр Из Участники Цикл
			РегистрыСведений.ИтерацииДействий.ДобавитьЗапись(Ссылка, 0, Стр.Идентификатор);
		КонецЦикла;
	КонецЕсли;
	
	ДействияСервер.ДействияПриЗаписи(ЭтотОбъект, ДополнительныеСвойства);

	РаботаСПроцессамиПоОбработкамОбъектовСобытия.ПриЗаписиДействия(ЭтотОбъект);
	РаботаСПроцессамиПоДействиямСобытия.ПриЗаписиДействия(ЭтотОбъект);
	
	Добавленные = Новый Массив;
	Если ДополнительныеСвойства.Свойство("Добавленные", Добавленные) Тогда
		Для Каждого Стр Из Добавленные Цикл
			РегистрыСведений.ИтерацииДействий.ДобавитьЗапись(Ссылка, 0, Стр.Идентификатор);
		КонецЦикла;	 
	КонецЕсли; 
	
КонецПроцедуры

// Возвращает участников с функций "Обрабатывающий результат".
// 
// Возвращаемое значение:
//  Массив Из СтрокаТабличнойЧасти - Участники.
//
Функция УчастникОбрабатывающийРезультат() Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ФункцияУчастника", Перечисления.ФункцииУчастниковПодписания.ОбрабатывающийРезультат);
	Возврат Участники.НайтиСтроки(ПараметрыОтбора);

КонецФункции

// Заполняет действие по настройке действия.
//
// Параметры:
// 	Настройка - СправочникСсылка.НастройкиДействийИсполнения - ссылка на настройку.
// 	ПредметОбъект - ОпределяемыйТип.ПредметДействияОбъект.
//
Процедура ЗаполнитьПоНастройке(Настройка, ПредметОбъект = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Настройка) Тогда
		
		Этапы.Очистить();
		Участники.Очистить();
		ЗаполнитьБезУчастников();
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(Настройка) <> Тип("СправочникСсылка.НастройкиДействийПодписания") Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Настройка типа ""%1"" не подходит для заполнения действия подписания.
				|Следует актуализировать правила обработки документов.'"),
			ТипЗнч(Настройка));
	КонецЕсли;
	
	НастройкаДействия = Настройка;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Настройка,
		"Автор, МоментРазыменованияУчастников, Участники, Этапы, СпособПодписания, Важность,
		|ПорядокВыполненияУчастниками, ОтложенноеНачалоВыполнения");
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты,, "Участники, Этапы, Автор, Важность");
	
	Если Не ЗначениеЗаполнено(Реквизиты.СпособПодписания) Тогда 
		СпособПодписания = Перечисления.СпособыПодписанияПредметаДействия.ПЭП;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Реквизиты.Автор) Тогда 
		Автор = Реквизиты.Автор;
	КонецЕсли;
	Если ЗначениеЗаполнено(Реквизиты.Важность) 
		И Реквизиты.Важность <> Перечисления.ВариантыВажностиОбъектов.Обычная Тогда 
		Важность = Реквизиты.Важность;
	КонецЕсли;
	
	Если ПредметОбъект = Неопределено
		И ЗначениеЗаполнено(Предмет) Тогда
		ПредметОбъект = Предмет.ПолучитьОбъект();
	КонецЕсли;

	Выгруженные = Участники.Выгрузить();
	
	РазыменоватьПриСозданииДействия = ДействияСервер.РазыменоватьПриСозданииДействия(
		МоментРазыменованияУчастников);
	
	Участники.Очистить();
	Источники.Очистить();
	
	Этапы.Очистить();
	ТаблицаЭтапы = Реквизиты.Этапы.Выгрузить();
	ТаблицаЭтапы.Сортировать("НомерСтроки");
	Для Каждого ВыборкаЭтапы Из ТаблицаЭтапы Цикл
		Этап = Этапы.Добавить();
		ЗаполнитьЗначенияСвойств(Этап, ВыборкаЭтапы);
	КонецЦикла;
	
	// перенесем добавленных вручную - тут добавляем только с функцией ОбрабатывающийРезультат.
	Для Каждого Выгруженный Из Выгруженные Цикл
		
		Если Выгруженный.ИзНастройки Тогда
			Продолжить;
		КонецЕсли;

		Если Выгруженный.ФункцияУчастника <> Перечисления.ФункцииУчастниковПодписания.ОбрабатывающийРезультат Тогда
			Продолжить;
		КонецЕсли;
		
		Участник = Участники.Добавить();
		ЗаполнитьЗначенияСвойств(Участник, Выгруженный);
		
	КонецЦикла;
	
	ТаблицаУчастники = Реквизиты.Участники.Выгрузить();
	ТаблицаУчастники.Сортировать("НомерСтроки");
	
	// Создадим соответствие замены Идентификатор. Т.к. Идентификатор из настройки брать нельзя.
	СоответствиеИдентификаторов = Новый Соответствие; //  ключ - старый, значение = - новый ИД
	Для Каждого ВыборкаУчастники Из ТаблицаУчастники Цикл
		СоответствиеИдентификаторов[ВыборкаУчастники.Идентификатор] = Новый УникальныйИдентификатор();
	КонецЦикла;	 

	// замена Ид
	Для Каждого ВыборкаУчастники Из ТаблицаУчастники Цикл
		
		Если ЗначениеЗаполнено(ВыборкаУчастники.Идентификатор) Тогда
			ВыборкаУчастники.Идентификатор = СоответствиеИдентификаторов[ВыборкаУчастники.Идентификатор];
		Иначе
			// для старых настроек был пустой Идентификатор
			ВыборкаУчастники.Идентификатор = Новый УникальныйИдентификатор();
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ВыборкаУчастники.ВышестоящийУчастник) Тогда
			ВыборкаУчастники.ВышестоящийУчастник 
				= СоответствиеИдентификаторов[ВыборкаУчастники.ВышестоящийУчастник];
		КонецЕсли;
			
	КонецЦикла;	 
	
	Для Каждого ВыборкаУчастники Из ТаблицаУчастники Цикл

		ЕстьТакойУчастник = Ложь;
		Если ВыборкаУчастники.ФункцияУчастника = Перечисления.ФункцииУчастниковПодписания.Подписывающий Тогда
			
			Если Не ВыборкаУчастники.Защищенный Тогда
				
				ЕстьУчастники = Участники.НайтиСтроки(Новый Структура("Участник, ФункцияУчастника, Описание",
					ВыборкаУчастники.Участник, ВыборкаУчастники.ФункцияУчастника, ВыборкаУчастники.Описание));
				ЕстьТакойУчастник = (ЕстьУчастники.Количество() > 0);
				
			КонецЕсли;
				
		КонецЕсли;	
			
		Если Не ЕстьТакойУчастник Тогда
			
			// Проверим функцию ОбрабатывающийРезультат.
			// Если уже есть ОбрабатывающийРезультат - нового не добавляем
			Если ВыборкаУчастники.ФункцияУчастника = Перечисления.ФункцииУчастниковПодписания.ОбрабатывающийРезультат
				И Участники.Найти(Перечисления.ФункцииУчастниковПодписания.ОбрабатывающийРезультат, "ФункцияУчастника")
				<> Неопределено Тогда

				Продолжить;
			КонецЕсли;
			
			// Проверка условий.
			Если РазыменоватьПриСозданииДействия 
				И Не РаботаСАлгоритмамиПроверки.АлгоритмПоПредметуВыполняется(
				ПредметОбъект, ВыборкаУчастники.Условие) Тогда
				Продолжить;
			КонецЕсли;
			
			Участник = Участники.Добавить();
			ЗаполнитьЗначенияСвойств(Участник, ВыборкаУчастники);
			Участник.ИзНастройки = Истина;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Выгруженный Из Выгруженные Цикл
		
		Если Выгруженный.ИзНастройки Тогда
			Продолжить;
		КонецЕсли;
		
		// "Обрабатывающий результат" добавили ранее, тут не добавляем
		Если Выгруженный.ФункцияУчастника = Перечисления.ФункцииУчастниковПодписания.ОбрабатывающийРезультат Тогда
			Продолжить;
		КонецЕсли;
		
		Если Этапы.Найти(Выгруженный.ИдентификаторЭтапа, "Идентификатор") = Неопределено
			Или Участники.Найти(Выгруженный.Участник, "Участник") <> Неопределено Тогда
			
			// Перенесем идентификаторы по совпадающему Исполнителю
			СтрокаИсполнителя = Участники.Найти(Выгруженный.Участник, "Участник");
			Если СтрокаИсполнителя <> Неопределено Тогда 
				СтрокаИсполнителя.Идентификатор = Выгруженный.Идентификатор;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Участник = Участники.Добавить();
		ЗаполнитьЗначенияСвойств(Участник, Выгруженный);
		
	КонецЦикла;
	
	// Обрабатывающего результат добавим, даже если он не задан в настройке
	Если Участники.Найти(Перечисления.ФункцииУчастниковПодписания.ОбрабатывающийРезультат,
		"ФункцияУчастника") = Неопределено Тогда
		
		Участник = Участники.Добавить();
		Участник.Участник = Автор;
		Участник.ИзНастройки = Истина;
		Участник.Идентификатор = Новый УникальныйИдентификатор;
		Участник.ФункцияУчастника = Перечисления.ФункцииУчастниковПодписания.ОбрабатывающийРезультат;
	КонецЕсли;
	
	Если РазыменоватьПриСозданииДействия Тогда
		Разыменовать(ПредметОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Разыменовывает автоподстановки и контейнеры в составе участников.
//
// Параметры:
// 	ПредметОбъект - ОпределяемыйТип.ПредметДействияОбъект.
// 	ЭтоЗапуск - Булево - признак того, что разыменование происходит в рамках запуска в обработку.
//
Процедура Разыменовать(ПредметОбъект = Неопределено, ЭтоЗапуск = Ложь) Экспорт
	
	ФункцияУчастника = Перечисления.ФункцииУчастниковПодписания.Подписывающий;
	ЭтоДействиеОбработкиДокумента = ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(ПредметОбъект);
	
	Выгруженные = Участники.Выгрузить();
	Участники.Очистить();
		
	Контейнеры = Новый Массив;
	Для Каждого Выгруженный Из Выгруженные Цикл
		
		Если ТипЗнч(Выгруженный.Участник) = Тип("СправочникСсылка.СтруктураПредприятия")
			Или ТипЗнч(Выгруженный.Участник) = Тип("СправочникСсылка.РабочиеГруппы")
			Или ТипЗнч(Выгруженный.Участник) = Тип("СправочникСсылка.ПроектыКонтейнеры")
			Или ТипЗнч(Выгруженный.Участник) = Тип("СправочникСсылка.ПодразделенияКонтейнеры")
			Тогда
			Контейнеры.Добавить(Выгруженный.Участник);
		КонецЕсли;
		
	КонецЦикла;
	
	СоответствиеСотрудниковВКонтейнерах = Новый Соответствие;
	Если Контейнеры.Количество() <> 0 Тогда
		СоответствиеСотрудниковВКонтейнерах = ДействияСервер.ДействующиеСотрудникиВКонтейнерах(Контейнеры);
	КонецЕсли;

	РазыменоватьПриЗапускеДокументаВОбработку = ДействияСервер.РазыменоватьПриЗапускеДокументаВОбработку(
		МоментРазыменованияУчастников);
	РазыменоватьПередВыполнениемДействия = ДействияСервер.РазыменоватьПередВыполнениемДействия(
		МоментРазыменованияУчастников);
	Для Каждого Выгруженный Из Выгруженные Цикл
		// Проверка условий.
		Если (РазыменоватьПередВыполнениемДействия Или РазыменоватьПриЗапускеДокументаВОбработку)
			И Не РаботаСАлгоритмамиПроверки.АлгоритмПоПредметуВыполняется(
				ПредметОбъект, Выгруженный.Условие) Тогда
			Продолжить;
		КонецЕсли;
		
		ФункцияУчастника = Выгруженный.ФункцияУчастника;
		
		ОбеспечивающийПодписание = Выгруженные.Найти(Выгруженный.Идентификатор, "ВышестоящийУчастник");
		Если ОбеспечивающийПодписание <> Неопределено Тогда
			
			Если ТипЗнч(ОбеспечивающийПодписание.Участник) = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов") Тогда
				
				ДанныеРазыменованияОбеспечивающегоПодписание = ДействияСервер.РазыменоватьАвтоподстановку(
					ОбеспечивающийПодписание.Участник,
					ПредметОбъект,
					ОбеспечивающийПодписание.ФункцияУчастника,
					Перечисления.ФункцииУчастниковПодписания.ОбрабатывающийРезультат,
					Ложь,
					Перечисления.ФункцииУчастниковПодписания.ОбеспечивающийПодписание);
				
				Если ДанныеРазыменованияОбеспечивающегоПодписание.Количество() Тогда
					ОбеспечивающийПодписание.Участник = ДанныеРазыменованияОбеспечивающегоПодписание[0];
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(ОбеспечивающийПодписание.Участник) = Тип("СправочникСсылка.РабочиеГруппы")
				Или ТипЗнч(ОбеспечивающийПодписание.Участник) = Тип("СправочникСсылка.ПроектыКонтейнеры")
				Или ТипЗнч(ОбеспечивающийПодписание.Участник) = Тип("СправочникСсылка.ПодразделенияКонтейнеры") Тогда
				
				СтрокиОбеспечивающиеПодписание = СоответствиеСотрудниковВКонтейнерах[ОбеспечивающийПодписание.Участник];
				Если СтрокиОбеспечивающиеПодписание <> Неопределено Тогда
					ОбеспечивающийПодписание.Участник = СтрокиОбеспечивающиеПодписание[0];
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(Выгруженный.Участник) = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов") Тогда
			
			ДанныеРазыменования = ДействияСервер.РазыменоватьАвтоподстановку(
				Выгруженный.Участник,
				ПредметОбъект,
				ФункцияУчастника,
				Перечисления.ФункцииУчастниковПодписания.ОбрабатывающийРезультат,
				Ложь,
				Перечисления.ФункцииУчастниковПодписания.ОбеспечивающийПодписание);
			
			ВсегоРазыменовано = ДанныеРазыменования.Количество();
			
			Для Каждого РазыменованныйУчастник Из ДанныеРазыменования Цикл
				
				Участник = Участники.Добавить();
				ЗаполнитьЗначенияСвойств(Участник, Выгруженный);
				Участник.Участник = РазыменованныйУчастник;
				
				Если ВсегоРазыменовано = 1 Тогда
					Участник.Идентификатор = Выгруженный.Идентификатор;
				Иначе
					Участник.Идентификатор = Новый УникальныйИдентификатор;
				КонецЕсли;
				
				ДействияСервер.ДобавитьИсточник(
					ЭтотОбъект, "Участники.Участник", Участник.Идентификатор, Выгруженный.Участник);
				
				Если ФункцияУчастника = Перечисления.ФункцииУчастниковПодписания.Подписывающий
					И ОбеспечивающийПодписание <> Неопределено Тогда
					
					НовыйОбеспечивающийПодписание = Участники.Добавить();
					ЗаполнитьЗначенияСвойств(НовыйОбеспечивающийПодписание, ОбеспечивающийПодписание);
					НовыйОбеспечивающийПодписание.Идентификатор = Новый УникальныйИдентификатор;
					НовыйОбеспечивающийПодписание.ВышестоящийУчастник = Участник.Идентификатор;
					
				КонецЕсли;
				
				//Записать разыменованного подписанта в предмет
				Если ЭтоДействиеОбработкиДокумента И Не ЗначениеЗаполнено(ПредметОбъект.Подписал) Тогда
					ПредметОбъект.Подписал = РазыменованныйУчастник;
				КонецЕсли;
				
				Если ОбеспечивающийПодписание <> Неопределено Тогда
					Выгруженные.Удалить(ОбеспечивающийПодписание);
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(Выгруженный.Участник) = Тип("СправочникСсылка.РабочиеГруппы")
			Или ТипЗнч(Выгруженный.Участник) = Тип("СправочникСсылка.ПроектыКонтейнеры")
			Или ТипЗнч(Выгруженный.Участник) = Тип("СправочникСсылка.ПодразделенияКонтейнеры") Тогда
			
			СтрокиСотрудники = СоответствиеСотрудниковВКонтейнерах[Выгруженный.Участник];
			
			Если СтрокиСотрудники <> Неопределено Тогда
				Для Каждого Сотрудник Из СтрокиСотрудники Цикл
					
					Если ФункцияУчастника = Перечисления.ФункцииУчастниковПодписания.ОбрабатывающийРезультат
						И УчастникОбрабатывающийРезультат().Количество() <> 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Участник = Участники.Добавить();
					ЗаполнитьЗначенияСвойств(Участник, Выгруженный);
					Участник.Участник = Сотрудник;
					Участник.Идентификатор = Новый УникальныйИдентификатор;
					
					ДействияСервер.ДобавитьИсточник(
						ЭтотОбъект, "Участники.Участник", Участник.Идентификатор, Выгруженный.Участник);
					
					Если ФункцияУчастника = Перечисления.ФункцииУчастниковПодписания.Подписывающий
						И ОбеспечивающийПодписание <> Неопределено Тогда
						
						НовыйОбеспечивающийПодписание = Участники.Добавить();
						ЗаполнитьЗначенияСвойств(НовыйОбеспечивающийПодписание, ОбеспечивающийПодписание);
						НовыйОбеспечивающийПодписание.Идентификатор = Новый УникальныйИдентификатор;
						НовыйОбеспечивающийПодписание.ВышестоящийУчастник = Участник.Идентификатор;
						
					КонецЕсли;
					
					//Записать разыменованного подписанта в предмет
					Если ЭтоДействиеОбработкиДокумента И Не ЗначениеЗаполнено(ПредметОбъект.Подписал) Тогда
						ПредметОбъект.Подписал = Сотрудник;
					КонецЕсли;
					
					Если ФункцияУчастника = Перечисления.ФункцииУчастниковПодписания.ОбеспечивающийПодписание Тогда
						Прервать; // ОбеспечивающийПодписание - берем первую попавшуюся запись - из нескольких
					КонецЕсли;
					
				КонецЦикла;
				
				Если ОбеспечивающийПодписание <> Неопределено Тогда
					Выгруженные.Удалить(ОбеспечивающийПодписание);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ФункцияУчастника = Перечисления.ФункцииУчастниковПодписания.ОбрабатывающийРезультат 
				И УчастникОбрабатывающийРезультат().Количество() <> 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Участник = Участники.Добавить();
			ЗаполнитьЗначенияСвойств(Участник, Выгруженный);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДействияСервер.РазыменоватьАвтора(ЭтотОбъект, ПредметОбъект);
	
	// удалим обеспечивающих подписание, если Подписывающего нет.
	Индекс = Участники.Количество() - 1;
	
	Пока Индекс >= 0 Цикл
		
		СтрокаУчастника = Участники[Индекс]; 
		
		Если ЗначениеЗаполнено(СтрокаУчастника.ВышестоящийУчастник) Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Идентификатор", СтрокаУчастника.ВышестоящийУчастник);
			Строки = Участники.НайтиСтроки(ПараметрыОтбора);
			
			Если Строки.Количество() = 0 Тогда
				Участники.Удалить(Индекс);
			КонецЕсли;	
			
		КонецЕсли;
		
		Индекс = Индекс - 1;
			
	КонецЦикла;	
	
	// Удаление дублей участников.
	ДанныеУчастниковДляУдаленияДублей = Новый Массив;
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
			Продолжить;
		КонецЕсли;

		Если СтрокаУчастника.ФункцияУчастника <> Перечисления.ФункцииУчастниковПодписания.Подписывающий Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеУчастникаДляУдаленияДублей = ДействияСервер.ДанныеУчастникаДляУдаленияДублей();
		ДанныеУчастникаДляУдаленияДублей.Участник = СтрокаУчастника.Участник;
		ДанныеУчастникаДляУдаленияДублей.ИдентификаторГруппы = СтрокаУчастника.ИдентификаторЭтапа;
		ДанныеУчастникаДляУдаленияДублей.СтрокаУчастника = СтрокаУчастника;
		ДанныеУчастниковДляУдаленияДублей.Добавить(ДанныеУчастникаДляУдаленияДублей);
		
	КонецЦикла;
	
	ПорядокЭтапов = Новый Массив;
	Для Каждого СтрокаЭтапа Из Этапы Цикл
		ПорядокЭтапов.Добавить(СтрокаЭтапа.Идентификатор);
	КонецЦикла;
	ПорядокЭтапов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПорядокЭтапов);
	
	ДействияСервер.УдалитьДублиУчастников(ДанныеУчастниковДляУдаленияДублей, Участники, ПорядокЭтапов);
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ДействияСервер.ЗаписатьВХодОбработкиОтличия(ЭтотОбъект, Выгруженные, Участники, 
			НСтр("ru = 'Разыменовать'"));
	КонецЕсли;
	
КонецПроцедуры

// Заменяет участника действия
//
// Параметры:
//	Идентификатор - УникальныйИдентификатор - идентификатор участника
//	НовыйУчастник - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли - новый участник процесса
//	Причина - Строка - описание причины замены
//	Автор - Неопределено, СправочникСсылка.Сотрудники - сотрудник, перенаправивший задачу
//
Процедура ЗаменитьУчастника(Идентификатор, НовыйУчастник, Причина = "", Автор = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		ВызватьИсключение НСтр("ru = 'Замена участника возможна только после записи действия.'");
	КонецЕсли;
	
	ПрежнийУчастник = Неопределено;
	
	СтрокаУчастника = Участники.Найти(Идентификатор, "Идентификатор");
	Если СтрокаУчастника <> Неопределено И СтрокаУчастника.Участник <> НовыйУчастник Тогда
		ПрежнийУчастник = СтрокаУчастника.Участник;
		СтрокаУчастника.Участник = НовыйУчастник;
		
		// Отметим защищенными участников, если новый участник уже есть действии.
		СтрокиУчастника = Участники.НайтиСтроки(
			Новый Структура("Участник, ФункцияУчастника", НовыйУчастник, Перечисления.ФункцииУчастниковПодписания.Подписывающий));
		Если СтрокиУчастника.Количество() > 1 Тогда
			Для Каждого СтрУчастник Из СтрокиУчастника Цикл
				Если Не СтрУчастник.Защищенный Тогда
					СтрУчастник.Защищенный = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	ТекущаяОбработка = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Ссылка);
	
	Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
	Событие.Обработка = ТекущаяОбработка;
	Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.ИзменениеУчастников;
	Событие.Действие = Ссылка;
	Событие.Описание = СтрШаблон(НСтр("ru = 'Участник %1 заменен на %2. Причина: %3'"), ПрежнийУчастник, НовыйУчастник, Причина);
	Событие.ИдентификаторУчастника = Идентификатор;
	Событие.Участник = ПрежнийУчастник;
	Событие.Функция = СтрокаУчастника.ФункцияУчастника;
	Событие.Сотрудник = Автор;
	РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
	
КонецПроцедуры

// Устанавливает срок исполнения участнику.
//
// Параметры:
//  Идентификатор - УникальныйИдентификатор - Идентификатора участника в действии.
//  ВариантУстановкиСрока - ПеречислениеСсылка.ВариантыУстановкиСрокаИсполнения
//  Срок - Дата - срок участника точной датой.
//  СрокДни, СрокЧасы, СрокМинуты - Число - относительный срок участника.
//
Процедура УстановитьСрокИсполненияУчастнику(Идентификатор, ВариантУстановкиСрока,
	Срок, СрокДни, СрокЧасы, СрокМинуты) Экспорт
	
	СтрокаУчастника = Участники.Найти(Идентификатор, "Идентификатор");
	Если СтрокаУчастника <> Неопределено Тогда
		СтрокаУчастника.ВариантУстановкиСрока = ВариантУстановкиСрока;
		СтрокаУчастника.Срок = Срок;
		СтрокаУчастника.СрокДни = СрокДни;
		СтрокаУчастника.СрокЧасы = СрокЧасы;
		СтрокаУчастника.СрокМинуты = СрокМинуты;
	КонецЕсли;
	
	СтрокаУчастника = Участники.Найти(Идентификатор, "ВышестоящийУчастник");
	Если СтрокаУчастника <> Неопределено Тогда
		СтрокаУчастника.ВариантУстановкиСрока = ВариантУстановкиСрока;
		СтрокаУчастника.Срок = Срок;
		СтрокаУчастника.СрокДни = СрокДни;
		СтрокаУчастника.СрокЧасы = СрокЧасы;
		СтрокаУчастника.СрокМинуты = СрокМинуты;
	КонецЕсли;
	
КонецПроцедуры

// Корректирует действие по форме предмета.
// 
// Параметры:
//  ФормаПредмета - ПеречислениеСсылка.ВариантыФормДокументов - Форма предмета
Процедура ЗаполнитьСпособПодписанияПоФормеПредмета(ФормаПредмета) Экспорт
	
	Если ФормаПредмета = Перечисления.ВариантыФормДокументов.Бумажная Тогда
		СпособПодписания = Перечисления.СпособыПодписанияПредметаДействия.НаБумаге;
		
		// Поменяем порядок
		Порядок = ПредопределенноеЗначение("Перечисление.ПорядокВыполненияЭтапаДействия.Последовательно");	
		Для Каждого Этап Из Этапы Цикл
			Если Этап.ПорядокВыполненияУчастниками <> Порядок Тогда
				Этап.ПорядокВыполненияУчастниками = Порядок;
			КонецЕсли;
		КонецЦикла;
		
		ПорядокВыполненияУчастниками = Порядок;
				
	ИначеЕсли ФормаПредмета = Перечисления.ВариантыФормДокументов.Электронная Тогда
		Если Не ЗначениеЗаполнено(СпособПодписания) 
			Или СпособПодписания = Перечисления.СпособыПодписанияПредметаДействия.НаБумаге
			Или Не ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи") Тогда
			СпособПодписания = Перечисления.СпособыПодписанияПредметаДействия.ПЭП;
		КонецЕсли;
		
		ДействияСервер.УдалитьОбеспечивающихПодписание(Участники);		
	Иначе
		СпособПодписания = Перечисления.СпособыПодписанияПредметаДействия.ПЭП;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ДействияСобытия.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") 
		И ДанныеЗаполнения.Свойство("Настройка") Тогда
		ПредметОбъект = Неопределено;
		ДанныеЗаполнения.Свойство("ПредметОбъект", ПредметОбъект);
		ЗаполнитьПоНастройке(ДанныеЗаполнения.Настройка, ПредметОбъект);
	Иначе 
		ЗаполнитьБезУчастников();
	КонецЕсли;
	
	Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		ФормаПредмета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "ФормаДокумента");
		ЗаполнитьСпособПодписанияПоФормеПредмета(ФормаПредмета);
	ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда
		Если Не ЗначениеЗаполнено(СпособПодписания) Тогда
			СпособПодписания = Перечисления.СпособыПодписанияПредметаДействия.ПЭП;
		КонецЕсли;
		
		Если СпособПодписания <> Перечисления.СпособыПодписанияПредметаДействия.НаБумаге Тогда
			ДействияСервер.УдалитьОбеспечивающихПодписание(Участники);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоНовый() И Не ДействияСервер.ПризнакЗаписиДействияПриПомещенииВИсторию(ЭтотОбъект) Тогда
		Обработка = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(Предмет);
		
		Если ЗначениеЗаполнено(Обработка) Тогда
			СостояниеОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Обработка, "Состояние");
			Если СостояниеОбработки = Перечисления.СостоянияОбработкиОбъектов.Выполняется Тогда
			
				Подписывающие = Справочники.ДействияПодписания.УчастникиДействияПодписывающие(ЭтотОбъект);
				Если Подписывающие.Количество() = 0 Тогда
					ВызватьИсключение НСтр("ru = 'Запрещено удалять всех подписывающих, если обработка запущена.'");
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДействияСервер.ДействияПередЗаписью(ЭтотОбъект);
	
	РаботаСПроцессамиПоОбработкамОбъектовСобытия.ПередЗаписьюДействия(ЭтотОбъект);
	РаботаСПроцессамиПоДействиямСобытия.ПередЗаписьюДействия(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДействияСервер.ЗаписатьДействие(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьБезУчастников()

	Участник = Участники.Добавить();
	Участник.Участник = Справочники.Сотрудники.ПустаяСсылка();
	Участник.Идентификатор = Новый УникальныйИдентификатор;
	Участник.ФункцияУчастника = Перечисления.ФункцииУчастниковПодписания.Подписывающий;

	Участник = Участники.Добавить();
	Участник.Участник = Автор;
	Участник.Идентификатор = Новый УникальныйИдентификатор;
	Участник.ФункцияУчастника = Перечисления.ФункцииУчастниковПодписания.ОбрабатывающийРезультат;
	
	Если СпособПодписания = Перечисления.СпособыПодписанияПредметаДействия.НаБумаге Тогда
		ПорядокВыполненияУчастниками = Перечисления.ПорядокВыполненияЭтапаДействия.Последовательно;
	Иначе
		ПорядокВыполненияУчастниками = Перечисления.ПорядокВыполненияЭтапаДействия.Параллельно;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли