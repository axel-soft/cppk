#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("Ссылка");
	Поля.Добавить("ВидДействия");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Представление = ДействияСервер.ПредставлениеДействия(Данные.Ссылка, Данные.ВидДействия);
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ДействияСервер.ОбработкаПолученияФормы(
		ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
		
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Заполняет дерево на закладке Обработка
// 
// Параметры
// ЭлементДействие - элемент дерева 
// Действие - ссылка на действие 
// ПредметОбъект - ОпределяемыйТип.ПредметДействияОбъект.
//
Процедура ЗаполнитьДействиеВФормеПредмета(ЭлементДействие, Действие, ПредметОбъект, 
	НужнаИсторияОбработки, ПечатьКарточкиДокумента = Ложь) Экспорт 
	
	Если ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияПодписания") Тогда 
		ЗначенияЗаполнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие,
			ИменаРеквизитовДляЗаполнения());
		
		ДействиеСсылка = Действие;
		
		УчастникиДействия = ЗначенияЗаполнения.Участники.Выгрузить();
		УчастникиДействия.Сортировать("НомерСтроки Возр");
		
		ЭтапыДействия = ЗначенияЗаполнения.Этапы.Выгрузить();
		ЭтапыДействия.Сортировать("НомерСтроки Возр");
				
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникОбъект.ДействияПодписания") Тогда 
		ЗначенияЗаполнения = Новый Структура(ИменаРеквизитовДляЗаполнения());
		ЗаполнитьЗначенияСвойств(ЗначенияЗаполнения, Действие);
		УчастникиДействия = Действие.Участники;
		ЭтапыДействия = Действие.Этапы;
		ДействиеСсылка = Действие.Ссылка;
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестный тип'");
	КонецЕсли;
	
	ЗначенияЗаполнения.Вставить("Действие", ДействиеСсылка);
	ЗначенияЗаполнения.Вставить("ВариантУстановкиСрока", 
		Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок);
		
	ЕстьЗадачаОзнакомиться = Ложь;	
	Для Каждого Участник Из УчастникиДействия Цикл 

		Если Не ЗначениеЗаполнено(Участник.Участник) Тогда 
			Продолжить;
		КонецЕсли;
		
		// Обрабатывающих показываем только при "Выполнении"
		Если ДействияСервер.ЭтоОбрабатывающийРезультатИЗадачаВыполнена(
			ДействиеСсылка,	Участник.ФункцияУчастника, 
			Перечисления.ФункцииУчастниковПодписания.ОбрабатывающийРезультат,	
			Участник.Участник, Участник.Идентификатор) Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если Участник.ФункцияУчастника = Перечисления.ФункцииУчастниковПодписания.ОбрабатывающийРезультат Тогда
			ЕстьЗадачаОзнакомиться = Истина;
		КонецЕсли;	
		
	КонецЦикла;		
	
	ЭтапыДействияТЧ = ДействияСервер.НоваяТаблицаЭтапы();
	Для Каждого СтрЭтап Из ЭтапыДействия Цикл
		НовСтр = ЭтапыДействияТЧ.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, СтрЭтап);
		НовСтр.Наименование = СтрЭтап.НаименованиеЭтапа;
	КонецЦикла;
	
	ИдЭтапаПодписать = Неопределено;
	Если ЭтапыДействия.Количество() = 0 И ЕстьЗадачаОзнакомиться Тогда
		// добавим псевдо "этап"  Подписать
		ИдЭтапаПодписать = Новый УникальныйИдентификатор;
		НовСтр = ЭтапыДействияТЧ.Добавить();
		НовСтр.Функция = ПредопределенноеЗначение(
			"Перечисление.ФункцииУчастниковПодписания.Подписывающий");
		НовСтр.Наименование = НСтр("ru = 'Подписать'");
		НовСтр.Идентификатор = ИдЭтапаПодписать;
	КонецЕсли;
	
	ИдентификаторОбрабатывающегоРезультат = ДействияСервер.ПредопределенныйИдентификаторУчастника(
		"ЭтапОбрабатывающийРезультатПодписание");	
	Участники = ДействияСервер.НоваяТаблицаУчастники();
	Для Каждого Участник Из УчастникиДействия Цикл 

		Если Не ЗначениеЗаполнено(Участник.Участник) Тогда 
			Продолжить;
		КонецЕсли;
		
		// Обрабатывающих показываем только при "Выполнении"
		Если ДействияСервер.ЭтоОбрабатывающийРезультатИЗадачаВыполнена(
			ДействиеСсылка,	Участник.ФункцияУчастника, 
			Перечисления.ФункцииУчастниковПодписания.ОбрабатывающийРезультат,	
			Участник.Участник, Участник.Идентификатор) Тогда
			Продолжить;
		КонецЕсли;	 
		
		ДобавляемыйУчастник = Участники.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавляемыйУчастник, Участник);
		ДобавляемыйУчастник.Функция = Участник.ФункцияУчастника;
		
		Если ДобавляемыйУчастник.Функция = Перечисления.ФункцииУчастниковПодписания.Подписывающий 
			И ЭтапыДействия.Количество() = 0 И ЕстьЗадачаОзнакомиться Тогда
				
			ДобавляемыйУчастник.ИдентификаторЭтапа = ИдЭтапаПодписать;
			
		КонецЕсли;	
		
		Если ДобавляемыйУчастник.Функция = Перечисления.ФункцииУчастниковПодписания.ОбрабатывающийРезультат Тогда
			ДобавляемыйУчастник.ИдентификаторЭтапа = ИдентификаторОбрабатывающегоРезультат;
			
			НовСтр = ЭтапыДействияТЧ.Добавить();
			НовСтр.Функция = ПредопределенноеЗначение(
				"Перечисление.ФункцииУчастниковПодписания.ОбрабатывающийРезультат");
			НовСтр.Порядок = Перечисления.ПорядокВыполненияЭтапаДействия.Последовательно;
			НовСтр.Наименование = НСтр("ru = 'Ознакомиться с результатом подписания'");
			НовСтр.Идентификатор = ИдентификаторОбрабатывающегоРезультат;
		КонецЕсли;
	КонецЦикла;
	
	ЗначенияЗаполнения.Вставить("Участники", Участники);
	
	ПорядокЭтапов = Новый Массив;
	Для Каждого СтрокаЭтапа Из ЭтапыДействия Цикл
		ПорядокЭтапов.Добавить(СтрокаЭтапа.Идентификатор);
	КонецЦикла;
	ПорядокЭтапов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПорядокЭтапов);
	
	ДействияСервер.ЗаполнитьДействиеВФормеПредмета(ЭлементДействие, ДействиеСсылка, 
		ЗначенияЗаполнения, ПредметОбъект, ПорядокЭтапов, ЭтапыДействияТЧ,
		НужнаИсторияОбработки, ПечатьКарточкиДокумента);
	
КонецПроцедуры

// Проверяет строки участников на возможность начать обработку по ним.
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияПодписания - Ссылка на действие.
// 	ПредметОбъект - ОпределяемыйТип.ПредметДействияОбъект. 
// 	СообщенияОбОшибках - Массив - массив сообщений об ошибках.
// 	ПараметрыПроверок - Структура - вспомогательные параметры проверки перед запуском.
//
Процедура ПроверкаПередЗапуском(Действие, ПредметОбъект, СообщенияОбОшибках, ПараметрыПроверок) Экспорт
	
	Участники = УчастникиДействия(Действие);
	КоличествоПодписаний = Участники.Количество();
	
	Если КоличествоПодписаний = 0 Тогда 
		ТекстОшибки = СтрШаблон("Не указан подписывающий в действии ""%1"".", 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "ВидДействия"));
		СообщенияОбОшибках.Добавить(ТекстОшибки);
	КонецЕсли;
	
	МассивУчастники = Участники.ВыгрузитьКолонку("Участник");
	ДействияСервер.ПроверитьПустыеКонтейнеры(Действие, МассивУчастники, ПредметОбъект, СообщенияОбОшибках);
	
КонецПроцедуры

// Возвращает всех участников действия, кроме обрабатывающего результат
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияПодписания - ссылка на действие
// 	
// Возвращаемое значение:
// 	ТаблицаЗначений - таблица участников действия, кроме обрабатывающего результат.
// 
Функция УчастникиДействия(Действие) Экспорт
	
	Участники = ДействияСервер.НоваяТаблицаУчастники();
	Участники.Колонки.Добавить("Организация");
	
	РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие, "Участники");
	УчастникиДействия = РеквизитыДействия.Участники.Выгрузить();
	УчастникиДействия.Сортировать("НомерСтроки Возр");
	Для Каждого Участник Из УчастникиДействия Цикл 
		
		Если ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(
			Участник.ФункцияУчастника)
			Или Не ЗначениеЗаполнено(Участник.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавляемыйУчастник = Участники.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавляемыйУчастник, Участник);
		ДобавляемыйУчастник.Функция = Участник.ФункцияУчастника;
		
	КонецЦикла;
	
	Возврат Участники;
	
КонецФункции

// Возвращает всех участников действия, включая обрабатывающего результат
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияПодписания - ссылка на действие
// 	
// Возвращаемое значение:
// 	ТаблицаЗначений - таблица участников действия, кроме обрабатывающего результат.
// 
Функция ВсеУчастникиДействия(Действие) Экспорт
	
	Участники = ДействияСервер.НоваяТаблицаУчастники();
	Участники.Колонки.Добавить("Организация");
	
	РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие, "Участники");
	УчастникиДействия = РеквизитыДействия.Участники.Выгрузить();
	
	Для Каждого Участник Из УчастникиДействия Цикл 
		
		Если Не ЗначениеЗаполнено(Участник.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавляемыйУчастник = Участники.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавляемыйУчастник, Участник);
		ДобавляемыйУчастник.Функция = Участник.ФункцияУчастника;
		
	КонецЦикла;
	
	Возврат Участники;
	
КонецФункции

// Возвращает всех участников действия, кроме обрабатывающего результат и обеспечивающего согласование
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияПодписания,
//			   СправочникОбъект.ДействияПодписания - Действие, участников которого необходимо получить.
// 	
// Возвращаемое значение:
// 	ТаблицаЗначений - таблица участников действия, кроме обрабатывающего результат.
// 
Функция УчастникиДействияПодписывающие(Действие) Экспорт
	
	Участники = ДействияСервер.НоваяТаблицаУчастники();
	
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(Действие) Тогда
		РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие, "Участники");
		УчастникиДействия = РеквизитыДействия.Участники.Выгрузить();
	Иначе
		УчастникиДействия = Действие.Участники.Выгрузить();
	КонецЕсли;
	
	Для Каждого Участник Из УчастникиДействия Цикл 
		
		Если Участник.ФункцияУчастника <> Перечисления.ФункцииУчастниковПодписания.Подписывающий Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавляемыйУчастник = Участники.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавляемыйУчастник, Участник);
		ДобавляемыйУчастник.Функция = Участник.ФункцияУчастника;
		
	КонецЦикла;
	
	Возврат Участники;
	
КонецФункции

// Готовит действие к выполнению
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияПодписания - ссылка на действие
//
Процедура ПодготовитьДействиеКВыполнению(Действие) Экспорт
	
	// для всех участников
	
	УчастникиДействия = УчастникиДействия(Действие);
	Для Каждого Участник Из УчастникиДействия Цикл
		РегистрыСведений.ИтерацииДействий.ИнкрементироватьНомерИтерации(Действие, Участник.Идентификатор);
	КонецЦикла;	
	
КонецПроцедуры	

// Отмечает в действии принятие к выполнению
//
// Параметры:
// 	Действие - СправочникСсылка.ДействияПодписания - ссылка на действие
//  ПараметрыИзменения -Структура
//
Процедура ОтметитьПринятиеКИсполнению(Действие, ПараметрыИзменения) Экспорт
	
КонецПроцедуры	

// Проверяет необходимость выполнения действия.
//
// Если не соблюдены условия для обязательного действия, то
// генерируется исключение.
//
// Параметры:
//  Действие - ОпределяемыйТип.ДействияОбъект - объект действия.
//  ПропуститьДействие - Булево - неявно возвращаемый параметр, принимает значение Истина,
//                            если необходимо пропустить исполнение действия.
//
Процедура ПроверитьНеобходимостьВыполненияДействия(Действие, ПропуститьДействие) Экспорт
	
	ПропуститьДействие = Ложь;
	
	Участники = УчастникиДействия(Действие);
	
	// Проверяем наличие участников и если их нет,
	// то отказываемся от создания процесса по действию.
	Если Участники.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'В подписании не указано ни одного участника.'");
	КонецЕсли;
	
КонецПроцедуры

// По Ид обеспечивающего подписание вернет Ид Подписывающего.
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияПодписания
// 	ИдентификаторУчастника - УникальныйИдентификатор
// 	 
// Возвращаемое значение:
// УникальныйИдентификатор
// 	
Функция ИдентификаторПодписывающего(Действие, ИдентификаторУчастника) Экспорт
	
	Если Не ЗначениеЗаполнено(Действие)
		Или Не ЗначениеЗаполнено(ИдентификаторУчастника) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Участники = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Участники");
	Участники = Участники.Выгрузить();
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ФункцияУчастника", Перечисления.ФункцииУчастниковПодписания.ОбеспечивающийПодписание);
	ПараметрыОтбора.Вставить("Идентификатор", ИдентификаторУчастника);
	Строки = Участники.НайтиСтроки(ПараметрыОтбора);
	
	Если Строки.Количество() <> 1 Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Возврат Строки[0].ВышестоящийУчастник;
	
КонецФункции

// По Ид обеспечивающего подписание вернет Подписывающего.
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияПодписания - действие, в которому нужно найти подписанта.
// 	ИдентификаторУчастника - УникальныйИдентификатор - ИД обеспечивающего подписание.
// 	 
// Возвращаемое значение:
// 	Участник - см. тип реквизита Участник
// 	
Функция ПодписывающийПоОбеспечивающемуПодписание(Действие, ИдентификаторУчастника) Экспорт
	
	Если Не ЗначениеЗаполнено(Действие)
		Или Не ЗначениеЗаполнено(ИдентификаторУчастника) Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Участники = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Участники");
	Участники = Участники.Выгрузить();
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ФункцияУчастника", Перечисления.ФункцииУчастниковПодписания.ОбеспечивающийПодписание);
	ПараметрыОтбора.Вставить("Идентификатор", ИдентификаторУчастника);
	Строки = Участники.НайтиСтроки(ПараметрыОтбора);
	
	Если Строки.Количество() <> 1 Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	ИДПодписывающего = Строки[0].ВышестоящийУчастник;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Идентификатор", ИДПодписывающего);
	Строки = Участники.НайтиСтроки(ПараметрыОтбора);
	
	Если Строки.Количество() <> 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Строки[0].Участник;
	
КонецФункции	

// Возвращает представление действия строкой.
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияПодписания
// 	
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеДействияСтрокой(Действие) Экспорт
	
	СтрокиПредставления = Новый	Массив;
		
	РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Действие, "ВидДействия, Участники");
	
	РеквизитыДействия.Участники = РеквизитыДействия.Участники.Выгрузить();
	
	СтрокиПредставления.Добавить(Строка(РеквизитыДействия.ВидДействия));
	СтрокиПредставления.Добавить(Символы.ПС);
	
	ФункцииУчастников = Перечисления.ФункцииУчастниковПодписания;
	
	Для Каждого СтрокаТаблицы Из РеквизитыДействия.Участники Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ВышестоящийУчастник) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.ФункцияУчастника <> ФункцииУчастников.Подписывающий Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиПредставления.Добавить(Символы.ПС);
		СтрокиПредставления.Добавить(Строка(СтрокаТаблицы.Участник));
		
	КонецЦикла;
	
	Возврат СтрСоединить(СтрокиПредставления);
	
КонецФункции

// Возвращает участника, которого необходимо ознакомить с результатом завершения действия.
//
// Параметры:
//	Действие - СправочникСсылка.ДействияПодписания - Действие, в котором нужно найти участника, которого необходимо
//													 ознакомить с результатом.
//
// Возвращаемое значение:
//	* СправочникСсылка.Сотрудники,
//	  СправочникСсылка.ПолныеРоли, 
//	  СправочникСсылка.АвтоподстановкиДляОбъектов - участник, которого необходимо ознакомить с результатом.
//
Функция ОзнакамливаемыйСРезультатом(Действие) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ОзнакамливаемыйСРезультатом = Неопределено;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Участник КАК Участник
		|ИЗ
		|	Справочник.ДействияПодписания.Участники
		|ГДЕ
		|	Ссылка = &Действие
		|	И ФункцияУчастника = ЗНАЧЕНИЕ(Перечисление.ФункцииУчастниковПодписания.ОбрабатывающийРезультат)");
	Запрос.УстановитьПараметр("Действие", Действие);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОзнакамливаемыйСРезультатом = Выборка.Участник;
	КонецЕсли;

	Возврат ОзнакамливаемыйСРезультатом;
		
КонецФункции

// Возвращает описание результата завершения действия.
//
// Параметры:
//	Действие - СправочникСсылка.ДействияПодписания - Действие, для которого необходимо получить описание
//													 результата завершения.
//	КодЯзыка - Строка - Код языка пользователя
//
// Возвращаемое значение:
//	Строка - Описание результата завершения действия.
//
Функция ОписаниеРезультатаЗавершенияДействия(Действие, КодЯзыка) Экспорт

	ОписаниеРезультата = "";
	
	РезультатДействия = РегистрыСведений.РезультатыДействий.РезультатДействия(Действие);	
	Если РезультатДействия = Перечисления.РезультатыПодписания.Подписано Тогда
		ОписаниеРезультата = НСтр("ru = 'Результат подписания: Подписано'", КодЯзыка);
	ИначеЕсли РезультатДействия = Перечисления.РезультатыПодписания.НеПодписано Тогда
		ОписаниеРезультата = НСтр("ru = 'Результат подписания: Не подписано'", КодЯзыка);
	КонецЕсли;	
					
	Возврат ОписаниеРезультата;
	
КонецФункции

// Обновляет способ подписания всех активных не завершенных действий подписания по предмету.
// 
// Параметры:
//  Предмет - ОпределяемыйТип.ПредметДействия.
//  ФормаПредмета - ПеречислениеСсылка.ВариантыФормДокументов - Форма предмета.
//
Процедура ОбновитьПодписанияПоПредмету(Предмет, ФормаПредмета) Экспорт

	АктивныеДействия = ДействияСервер.ТекущиеДействияПредмета(
		Предмет, , ТекущаяДатаСеанса()).Выгрузить();
	МассивДействий = АктивныеДействия.ВыгрузитьКолонку("Действие");

	Для Каждого ДействиеСсылка Из МассивДействий Цикл
		Если Не ДействияКлиентСервер.ЭтоДействиеПодписания(ДействиеСсылка) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РегистрыСведений.РезультатыДействий.РезультатДействия(ДействиеСсылка)) Тогда
			Продолжить;
		КонецЕсли;
		
		ДействиеОбъект = ДействиеСсылка.ПолучитьОбъект();
		ДействиеОбъект.ЗаполнитьСпособПодписанияПоФормеПредмета(ФормаПредмета);
		ДействиеОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Возвращает идентификатор этапа по ИД участника.
// 
// Параметры:
//  Действие - СправочникСсылка.ДействияПодписания - Действие
//  ИдентификаторУчастника - УникальныйИдентификатор - Идентификатор участника
//  ВозвращатьЗначение - Булево - если Истина, то будет возвращать не пустой ИД.
// 
// Возвращаемое значение:
//  ИдентификаторЭтапа - УникальныйИдентификатор - идентификатор этапа
Функция ИдентификаторЭтапаУчастника(Действие, ИдентификаторУчастника, ВозвращатьЗначение = Истина) Экспорт
	
	УчастникиДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Участники").Выгрузить();
	ИдентификаторЭтапа = Неопределено;
	
	Строка = УчастникиДействия.Найти(ИдентификаторУчастника, "Идентификатор");
	Если Строка <> Неопределено Тогда
		ИдентификаторЭтапа = Строка.ИдентификаторЭтапа;
	КонецЕсли;	
	
	Если ВозвращатьЗначение
		И (ИдентификаторЭтапа = Неопределено
			Или  ИдентификаторЭтапа = ДействияСервер.ПредопределенныйИдентификаторУчастника("Пустой")) Тогда
		ИдентификаторЭтапа = ДействияСервер.ПредопределенныйИдентификаторУчастника(
			"ЭтапПодписать");
	КонецЕсли;
	
	Возврат ИдентификаторЭтапа;
	
КонецФункции

// Возвращает название этапа.
// 
// Параметры:
//  Действие - СправочникСсылка.ДействияПодписания - Действие
//  ИдентификаторЭтапа - УникальныйИдентификатор - Идентификатор этапа
// 
// Возвращаемое значение:
//  НазваниеЭтапа - Строка - Название этапа по идентификатору
Функция ЭтапПоИдентификатору(Действие, ИдентификаторЭтапа) Экспорт
	
	НазваниеЭтапа = "";
	Если ИдентификаторЭтапа = Неопределено Тогда
		Возврат НазваниеЭтапа;
	КонецЕсли;
	
	ЭтапыДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Этапы").Выгрузить();
	
	Строка = ЭтапыДействия.Найти(ИдентификаторЭтапа, "Идентификатор");
	Если Строка <> Неопределено Тогда
		НазваниеЭтапа = Строка.НаименованиеЭтапа;
	КонецЕсли;	
	
	Возврат НазваниеЭтапа;
	
КонецФункции

// Возвращает порядок выполнения участника по ИД.
// 
// Параметры:
//  Действие - СправочникСсылка.ДействияПодписания - Действие
//  ИдентификаторУчастника - УникальныйИдентификатор - Идентификатор участника
// 
// Возвращаемое значение:
//  ПорядокУчастника - ПеречислениеСсылка.ПорядокВыполненияЭтапаДействия - порядок выполнения участника
Функция ПорядокУчастника(Действие, ИдентификаторУчастника) Экспорт
	
	РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие,
		"Участники, ПорядокВыполненияУчастниками, Этапы");
	
	УчастникиДействия = РеквизитыДействия.Участники.Выгрузить();
	ИдентификаторЭтапа = Неопределено;
	
	Строка = УчастникиДействия.Найти(ИдентификаторУчастника, "Идентификатор");
	Если Строка <> Неопределено Тогда
		ИдентификаторЭтапа = Строка.ИдентификаторЭтапа;
	КонецЕсли;	
	
	Если ИдентификаторЭтапа = Неопределено
		Или  ИдентификаторЭтапа = ДействияСервер.ПредопределенныйИдентификаторУчастника("Пустой") Тогда
		ПорядокУчастника = РеквизитыДействия.ПорядокВыполненияУчастниками;
	Иначе
		ЭтапыДействия = РеквизитыДействия.Этапы.Выгрузить();
		
		Строка = ЭтапыДействия.Найти(ИдентификаторЭтапа, "Идентификатор");
		Если Строка <> Неопределено Тогда
			ПорядокУчастника = Строка.ПорядокВыполненияУчастниками;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПорядокУчастника;
	
КонецФункции

// Записывает реквизиты подписания в предмете.
// 
// Параметры:
//  Действие - СправочникСсылка.ДействияПодписания - Действие
//  Параметры - см. ДействияСервер.НовыйСведенияОРезультатеВыполненияДействияВнеПрограммы
Процедура ЗаписатьПодписаниеВПредметПриВыполненииВнеПрограммы(Действие, Параметры) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет");
	Если ТипЗнч(Предмет) <> Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		Возврат;
	КонецЕсли;
	
	УчастникиДействия = Параметры.Участники;
	
	ПредметОбъект = Предмет.ПолучитьОбъект();
	Попытка
		ПредметОбъект.Заблокировать();
	Исключение
		ПодробноОписание = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КтоБлокирует = ДействияСервер.БлокируетПредметИзОписанияОшибки(ПодробноОписание);
		
		ЗаписьЖурналаРегистрации("ЗаписатьПодписаниеВПредмет", УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.ДействияПодписания, , ПодробноОписание);
			
		КраткийТекст = СтрШаблон(
			НСтр("ru = 'Не удалось подписать документ ""%1"".
				|Возможно этот документ открыт вами или другим пользователем.у
				|%2
				|
				|Необходимо закрыть карточку документа и открыть ее заново, не внося изменений.'"),
			Строка(Предмет), КтоБлокирует);
		ВызватьИсключение КраткийТекст;
	КонецПопытки;
		
	Если Параметры.РезультатДействия = Перечисления.РезультатыПодписания.Подписано Тогда
		
		// Если подписание завершено - организациям в документе нужно проставить отметку "Подписал"
		// и максимальную дату подписания по организации
		// Если подписант один - он пишется в Подписал, если несколько - пишется строка
		Для Каждого Участник Из УчастникиДействия Цикл
			
			// Нужно записать в документ первого подписанта
			Если Участник.Организация = ПредметОбъект.Организация 
				И Не ЗначениеЗаполнено(ПредметОбъект.Подписал) Тогда
				ПредметОбъект.Подписал = Участник.Участник;
				ПредметОбъект.ДатаПодписания = Участник.Дата;
			КонецЕсли;
			
			СтрокаСтороны = ПредметОбъект.Стороны.Найти(Участник.Организация);
			Если СтрокаСтороны = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаСтороны.Подписан = Истина;
			Если СтрокаСтороны.ДатаПодписи < Участник.Дата Тогда
				СтрокаСтороны.ДатаПодписи = Участник.Дата;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаСтороны.Подписал) Тогда
				СтрокаСтороны.Подписал = Участник.Участник;
			Иначе
				СтрокаСтороны.Подписал = СтрШаблон("%1, %2",
					СтрокаСтороны.Подписал, Участник.Участник);
			КонецЕсли;
			
		КонецЦикла;

		ПредметОбъект.Записать();
		
	ИначеЕсли Параметры.РезультатДействия = Перечисления.РезультатыПодписания.НеПодписано Тогда
		
		Для Каждого СтрокаСтороны Из ПредметОбъект.Стороны Цикл
			Если РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(СтрокаСтороны.Сторона) Тогда
				СтрокаСтороны.Подписан = Ложь;
				СтрокаСтороны.ДатаПодписи = Неопределено;
			КонецЕсли;
		КонецЦикла;

		ПредметОбъект.ДатаПодписания = Неопределено;
		ПредметОбъект.Подписал = Неопределено;
		
		ПредметОбъект.Записать();
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ВыполнениеДействий

Процедура ОтметитьНачалоВыполнения(Действие, Параметры) Экспорт
	
	Если Параметры.Функция <> Перечисления.ФункцииУчастниковПодписания.ОбрабатывающийРезультат 
		И Параметры.ИдентификаторПункта = Неопределено Тогда
		Параметры.ИдентификаторПункта = ИдентификаторЭтапаУчастника(
			Действие, Параметры.ИдентификаторУчастника, Ложь);
	КонецЕсли;
	
	ДействияСервер.ОтметитьНачалоВыполнения(Действие, Параметры);
	
	// сотрем файл визуализации и превью. (если ПЭП)
	РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие, "СпособПодписания, Предмет");
	Если РеквизитыДействия.СпособПодписания = Перечисления.СпособыПодписанияПредметаДействия.ПЭП Тогда
		
		РаботаСФайламиВызовСервера.ОчиститьФайлыВизуализации(РеквизитыДействия.Предмет);
		
	КонецЕсли;	
	
	ДобавитьВМоиДокументы(Действие, Параметры.Функция, Параметры.Участник);
	
КонецПроцедуры

// Отмечает действие Подписание выполненным Подписывающим.
// При этом увеличивает итерацию исполнения действия текущим Подписывающим и
// заполняет информацию о подписании в предмете, если она не заполнена
//
// Параметры:
//  Действие - СправочникСсылка.ДействияПодписания
//  Подписывающий - СправочникСсылка.СтруктураПредприятия,
//                Строка,
//                СправочникСсылка.ПолныеРоли,
//                СправочникСсылка.Пользователи
//  РезультатВыполнения - ПеречислениеСсылка.РезультатыПодписания
//
Процедура ОтметитьВыполнение(Действие, Параметры) Экспорт
	
	Если Параметры.Функция <> Перечисления.ФункцииУчастниковПодписания.ОбрабатывающийРезультат
		И Параметры.ИдентификаторПункта = Неопределено Тогда
		Параметры.ИдентификаторПункта = ИдентификаторЭтапаУчастника(
			Действие, Параметры.ИдентификаторУчастника, Ложь);
	КонецЕсли;
	
	ДействияСервер.ОтметитьВыполнение(Действие, Параметры);
	ОбновитьРезультатВыполнения(Действие);
	ЗаписатьПодписаниеВПредмет(Действие, Параметры);
	
	// сотрем файл визуализации и превью. (если ПЭП)
	РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие, "СпособПодписания, Предмет");
	Если РеквизитыДействия.СпособПодписания = Перечисления.СпособыПодписанияПредметаДействия.ПЭП Тогда
		
		РаботаСФайламиВызовСервера.ОчиститьФайлыВизуализации(РеквизитыДействия.Предмет);
		
	КонецЕсли;	
	
	УдалитьИзМоиДокументы(Действие, Параметры.Функция, Параметры.Участник);

КонецПроцедуры

// Обновляет результат выполнения подписания по результатам подписывающих.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияПодписания
//
Процедура ОбновитьРезультатВыполнения(Действие) Экспорт
	
	Если РаботаСПроцессамиПоДействиямСобытия.ОбработатьОбновлениеРезультатаВыполненияДействия(
		Действие) Тогда
		
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Состояние = РегистрыСведений.СостоянияДействий.СостояниеДействия(Действие);
	Если Состояние <> Перечисления.СостоянияВыполненияДействий.Выполняется Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеИРезультатПолучены = Ложь;
	
	Результат = Неопределено;
			
	// Если нет подписывающих и действие выполняется, то установим ему состояние пропущенного.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Участники.Участник
		|ИЗ
		|	Справочник.ДействияПодписания.Участники КАК Участники
		|ГДЕ
		|	Участники.Ссылка = &Действие
		|	И Участники.ФункцияУчастника = &Функция";
	
	Запрос.УстановитьПараметр("Действие", Действие);
	Запрос.УстановитьПараметр("Функция", Перечисления.ФункцииУчастниковПодписания.Подписывающий);
	
	РезультатЗапроса = Запрос.Выполнить();
		
	Если РезультатЗапроса.Пустой() Тогда
		Состояние = Перечисления.СостоянияВыполненияДействий.Пропущено;
		
		ТекущаяОбработка = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
		
		Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
		Событие.Обработка = ТекущаяОбработка;
		Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.ПропускДействия;
		Событие.Действие = Действие;
		РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
		
		СостояниеИРезультатПолучены = Истина;
	КонецЕсли;
		
	Если Не СостояниеИРезультатПолучены Тогда
		
		// Если не все выполнили свои задачи (состояния отличны от завершенных), то действие выполняется.
		// Иначе завершено, результат действия подсчитывается по результатам подписывающих.
		
		Состояние = Перечисления.СостоянияВыполненияДействий.Выполняется;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СостоянияДействий.ИдентификаторУчастника КАК ИдентификаторУчастника,
			|	СостоянияДействий.Участник КАК Участник,
			|	СостоянияДействий.Функция КАК Функция,
			|	СостоянияДействий.Состояние КАК Состояние
			|ИЗ
			|	РегистрСведений.СостоянияДействий КАК СостоянияДействий
			|ГДЕ
			|	СостоянияДействий.Действие = &Действие
			|	И СостоянияДействий.ИдентификаторУчастника <> &ПустойИдентификатор
			|	И НЕ СостоянияДействий.Состояние В (&КонечныеСостояния)";
		
		Запрос.УстановитьПараметр("Действие", Действие);
		Запрос.УстановитьПараметр("ПустойИдентификатор", УникальныйИдентификаторПустой());
		
		КонечныеСостояния = Новый Массив;
		КонечныеСостояния.Добавить(Перечисления.СостоянияВыполненияДействий.Завершено);
		Запрос.УстановитьПараметр("КонечныеСостояния", КонечныеСостояния);
		
		Если Запрос.Выполнить().Пустой() Тогда
			
			Состояние = Перечисления.СостоянияВыполненияДействий.Завершено;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	РезультатыДействий.Действие КАК Действие,
				|	РезультатыДействий.ИдентификаторУчастника КАК ИдентификаторУчастника,
				|	РезультатыДействий.Функция КАК Функция,
				|	РезультатыДействий.Результат КАК Результат
				|ИЗ
				|	РегистрСведений.РезультатыДействий КАК РезультатыДействий
				|ГДЕ
				|	РезультатыДействий.Действие = &Действие
				|	И РезультатыДействий.Функция = &Функция
				|	И РезультатыДействий.ИдентификаторУчастника <> &ПустойИдентификатор";
			Запрос.УстановитьПараметр("Действие", Действие);
			Запрос.УстановитьПараметр("ПустойИдентификатор", УникальныйИдентификаторПустой());
			Запрос.УстановитьПараметр("Функция", Перечисления.ФункцииУчастниковПодписания.Подписывающий);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			ЕстьОтклонен = Ложь;
			
			Пока Выборка.Следующий() Цикл
				Если Выборка.Результат = Перечисления.РезультатыПодписания.НеПодписано Тогда
					ЕстьОтклонен = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьОтклонен Тогда
				Результат = Перечисления.РезультатыПодписания.НеПодписано;
			Иначе
				Результат = Перечисления.РезультатыПодписания.Подписано;
			КонецЕсли;
			
		КонецЕсли;
		
		СостояниеИРезультатПолучены = Истина;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		РегистрыСведений.РезультатыДействий.УстановитьРезультат(Действие, Результат);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Состояние) Тогда
		РегистрыСведений.СостоянияДействий.УстановитьСостояние(Действие, Состояние);
	КонецЕсли;
	
	ОбработкиОбъектовСобытия.ПриЗавершенииДействия(Действие, Состояние);
	
КонецПроцедуры

// Особенная логика, например удаление виз и пр.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияИсполнения
//	Участники  - таблица значений
//
Процедура ПриСбросеРезультатовВыполнения(Действие, Участники) Экспорт
	
	Для Каждого Стр Из Участники Цикл
		
		РегистрыСведений.ИтерацииДействий.ИнкрементироватьНомерИтерации(Действие,
			Стр.Идентификатор);
			
	КонецЦикла;	
	
КонецПроцедуры

// Обработчик события прерывания выполнения выполнения действий, для
// определения особой логики.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияПодписания
//
Процедура ПриПрерыванииВыполненияДействия(Действие) Экспорт
	
	// Особой логики не предусмотрено.
	
КонецПроцедуры

// Обработчик события удаления результатов выполнения действий, для
// определения особой логики.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияПодписания
//
Процедура ПриУдаленииРезультатовВыполнения(Действие) Экспорт
	
	// Особой логики не предусмотрено.
	
КонецПроцедуры

// Обработчик прерывания
// Параметры:
//  Действие - СправочникСсылка.ДействияПодписания
//	Параметры - см. ДействияСервер.СтруктураПараметровИзмененияДанныхДействия
Процедура ОбработкаПостановкиНаПаузу(Действие, Параметры) Экспорт
	
	УдалитьИзМоиДокументы(Действие, Параметры.Функция, Параметры.Участник);
			
КонецПроцедуры

// Обработчик прерывания
// Параметры:
//  Действие - СправочникСсылка.ДействияПодписания
//	Параметры - см. ДействияСервер.СтруктураПараметровИзмененияДанныхДействия
//
Процедура ОбработкаСнятияПаузы(Действие, Параметры) Экспорт
	
	ДобавитьВМоиДокументы(Действие, Параметры.Функция, Параметры.Участник);	
		
КонецПроцедуры

// Обработчик прерывания
// Параметры:
//  Действие - СправочникСсылка.ДействияПодписания
//	Параметры - см. ДействияСервер.СтруктураПараметровИзмененияДанныхДействия
//
Процедура ОбработкаПрерывания(Действие, Параметры) Экспорт
	
	УдалитьИзМоиДокументы(Действие, Параметры.Функция, Параметры.Участник);	
	
КонецПроцедуры

// Обработчик изменения участника
// Параметры:
//  Действие - СправочникСсылка.ДействияПодписания 
//	Параметры - см. ДействияСервер.СтруктураПараметровИзмененияДанныхДействия
//	ПредыдущийУчастник - СправочникСсылка.Сотрудники
//
Процедура ОбработкаИзмененияУчастника(Действие, Параметры, ПредыдущийУчастник) Экспорт
	
	УдалитьИзМоиДокументы(Действие, Параметры.Функция, ПредыдущийУчастник);
	ДобавитьВМоиДокументы(Действие, Параметры.Функция, Параметры.Участник);
	
КонецПроцедуры

#КонецОбласти

#Область ИсторияДействий

// Помещает действие в историю, обрабатывая связанные с ним данные.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияПодписания - ссылка на действие.
//
Процедура ПоместитьДействиеВИсторию(Действие, ПричинаПрерывания = "") Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		// при прерывании обработки не проверяем блокировку.
		
		ДействиеОбъект = Действие.ПолучитьОбъект();
		ДействиеОбъект.ПомещеноВИсторию = Истина;
		
		ДействияСервер.УстановитьБлокировкиПоПредмету(ДействиеОбъект.Предмет);
		ДействияСервер.УстановитьПризнакЗаписиДействияПриПомещенииВИсторию(ДействиеОбъект);
		ДействиеОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

// Записывает организацию, от имени которой участник подписания выполняет подписание
// 
// Параметры:
//  Действие - СправочникСсылка.ДействияПодписания
//  ИдентификаторУчастника - УникальныйИдентификатор
//  ПредметыСОрганизациями - Соответствие
Процедура ЗаписатьОрганизациюУчастника(Действие, ИдентификаторУчастника, ПредметыСОрганизациями) Экспорт
	
	Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет");
	Организация = ПредметыСОрганизациями[Предмет];
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ДействиеОбъект = Действие.ПолучитьОбъект();
		ДействиеОбъект.Заблокировать();
		
		Участник = ДействиеОбъект.Участники.Найти(ИдентификаторУчастника);
		Если Участник <> Неопределено Тогда
			Участник.Организация = Организация;
			ДействиеОбъект.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру доступных обработчиков событий
//
// Возвращаемое значение:
//  см. ДействияСервер.ДоступныеОбработчикиМенеджера
Функция ДоступныеОбработчикиМенеджера() Экспорт
	
	ДоступныеОбработчики = ДействияСервер.ДоступныеОбработчикиМенеджера(); 
	ДоступныеОбработчики.ОбработкаПрерывания = Истина;
	ДоступныеОбработчики.ОбработкаСнятияПаузы = Истина;
	ДоступныеОбработчики.ОбработкаПостановкиНаПаузу = Истина;
	ДоступныеОбработчики.ОбработкаИзмененияУчастника = Истина;
	Возврат ДоступныеОбработчики;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИменаРеквизитовДляЗаполнения()
	
	Возврат "Ссылка, ВидДействия, СрокДействия, Участники, Этапы, МоментРазыменованияУчастников";
	
КонецФункции

// Записывает реквизиты подписания в предмете.
// 
// Параметры:
//  Действие - СправочникСсылка.ДействияПодписания - Действие
//  Параметры - Структура -  см. СтруктураПараметровИзмененияДанныхДействия()
Процедура ЗаписатьПодписаниеВПредмет(Действие, Параметры) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Если Параметры.Функция <> Перечисления.ФункцииУчастниковПодписания.Подписывающий Тогда
		Возврат;
	КонецЕсли;
	
	Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет");
	Если ТипЗнч(Предмет) <> Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		Возврат;
	КонецЕсли;
		
	Если Параметры.Результат = Перечисления.РезультатыПодписания.Подписано Тогда
		
		УчастникиДействия = УчастникиДействия(Действие);
		СведенияОбУчастниках = РегистрыСведений.СведенияОбУчастникахДействий.ПолучитьСведенияОбУчастникахДействия(
			Действие);
		ФактическийИсполнитель = СведенияОбУчастниках[Параметры.ИдентификаторУчастника].ФактическийИсполнитель;
		Если ТипЗнч(ФактическийИсполнитель) = Тип("СправочникСсылка.ФактическиеИсполнители") Тогда
			ФактическийИсполнитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФактическийИсполнитель, "Факт");
		КонецЕсли;

		ОрганизацияУчастника = Действие.Участники.Найти(Параметры.ИдентификаторУчастника);
		Если ОрганизацияУчастника <> Неопределено Тогда
			ОрганизацияУчастника = ОрганизацияУчастника.Организация;
		КонецЕсли;

		ПредметОбъект = Предмет.ПолучитьОбъект();
		
		Попытка
			ПредметОбъект.Заблокировать();
		Исключение  
			
			ПодробноОписание = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КтоБлокирует = ДействияСервер.БлокируетПредметИзОписанияОшибки(ПодробноОписание);
			
			ЗаписьЖурналаРегистрации("ЗаписатьПодписаниеВПредмет", УровеньЖурналаРегистрации.Ошибка, 
				Метаданные.Справочники.ДействияПодписания, , ПодробноОписание);
				
			КраткийТекст = СтрШаблон(
				НСтр("ru = 'Не удалось подписать документ ""%1"".
					|Возможно этот документ открыт вами или другим пользователем.
					|%2
					|
					|Необходимо закрыть карточку документа.'"),
				Строка(Предмет), КтоБлокирует);
			ВызватьИсключение КраткийТекст;	
			
		КонецПопытки;
		
		// Если подписание завершено - организациям в документе нужно проставить отметку "Подписал"
		// и максимальную дату подписания по организации
		СостояниеДействияПоФункции = РегистрыСведений.СостоянияДействий.СостояниеДействияПоФункцииУчастника(
			Действие, Перечисления.ФункцииУчастниковПодписания.Подписывающий,
			Параметры.ИдентификаторПункта);

		Если СостояниеДействияПоФункции = Перечисления.СостоянияВыполненияДействий.Завершено Тогда

			ДатыИсполнения = РегистрыСведений.СостоянияДействий.ДатыИсполненияУчастникамиДействия(
				Действие);

			Организации = Делопроизводство.ОрганизацииВСторонахДокумента(Предмет);
			Для Каждого Организация Из Организации Цикл
				МаксДатаИсполнения = Дата(1, 1, 1);
				
				Отбор = Новый Структура;
				Отбор.Вставить("Организация", Организация);
				Отбор.Вставить("Функция", Перечисления.ФункцииУчастниковПодписания.Подписывающий);
				
				Для Каждого СтрокаУчастника Из УчастникиДействия.НайтиСтроки(Отбор) Цикл
					СтрокаСДатойИсполнения = ДатыИсполнения.Найти(СтрокаУчастника.Идентификатор);
					Если СтрокаСДатойИсполнения = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					МаксДатаИсполнения = Макс(МаксДатаИсполнения, СтрокаСДатойИсполнения.Дата);
				КонецЦикла;

				Если ЗначениеЗаполнено(МаксДатаИсполнения) Тогда // Подписание за одну из организаций может происходить вне обработки документа
					СтрокаСтороны = ПредметОбъект.Стороны.Найти(Организация);
					СтрокаСтороны.Подписан = Истина;
					СтрокаСтороны.ДатаПодписи = МаксДатаИсполнения;
				КонецЕсли;
			КонецЦикла;

			ПредметОбъект.ДатаПодписания = Параметры.ДатаИсполнения;

		КонецЕсли;
			
		// Нужно записать в документ первого подписанта
		УчастникиСТакойЖеОрганизацией = УчастникиДействия.НайтиСтроки(
			Новый Структура("Организация", ОрганизацияУчастника));
			
		Если УчастникиСТакойЖеОрганизацией.Количество() = 1 Тогда
			
			ПредметОбъект.Подписал = ФактическийИсполнитель;
			СтрокаСтороны = ПредметОбъект.Стороны.Найти(ОрганизацияУчастника);
			Если СтрокаСтороны <> Неопределено Тогда
				СтрокаСтороны.Подписал = ФактическийИсполнитель;
			КонецЕсли;
			
		ИначеЕсли УчастникиСТакойЖеОрганизацией.Количество() > 1 Тогда
			
			ПредметОбъект.Подписал = ФактическийИсполнитель;
			СтрокаСтороны = ПредметОбъект.Стороны.Найти(ОрганизацияУчастника);
			Если СтрокаСтороны <> Неопределено Тогда
				СтрокаСтороны.Подписал = СтрШаблон("%1, %2",
					СтрокаСтороны.Подписал, ФактическийИсполнитель);
			КонецЕсли;
			
		КонецЕсли;

		ПредметОбъект.Записать();
		
	ИначеЕсли Параметры.Результат = Перечисления.РезультатыПодписания.НеПодписано Тогда
		
		// Если один из участников не подписал документ - очистим существующие отметки о подписании в предмете
		
		УчастникиДействия = УчастникиДействия(Действие);
		СостояниеДействияПоФункции = РегистрыСведений.СостоянияДействий.СостояниеДействияПоФункцииУчастника(
						Действие, Перечисления.ФункцииУчастниковПодписания.Подписывающий,
						Параметры.ИдентификаторПункта);

		Если СостояниеДействияПоФункции = Перечисления.СостоянияВыполненияДействий.Завершено Тогда

			ПредметОбъект = Предмет.ПолучитьОбъект();
			ПредметОбъект.Заблокировать();
		
			Для Каждого СтрокаСтороны Из ПредметОбъект.Стороны Цикл
				Если РаботаСПодписямиДокументовКлиентСервер.ЭтоОрганизация(СтрокаСтороны.Сторона) Тогда
					СтрокаСтороны.Подписан = Ложь;
					СтрокаСтороны.ДатаПодписи = Неопределено;
				КонецЕсли;
			КонецЦикла;

			ПредметОбъект.ДатаПодписания = Неопределено;
			ПредметОбъект.Подписал = Неопределено;
			
			ПредметОбъект.Записать();
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Добавляет в МоиДокументы, если участник подписывает документ
// Параметры:
//  Действие - СправочникСсылка.ДействияПодписания
//	ФункцияУчастника - ПеречислениеСсылка.ФункцииУчастниковПодписания
//	Участник - СправочникСсылка.Сотрудники
//
Процедура ДобавитьВМоиДокументы(Действие, ФункцияУчастника, Участник)

	Если ФункцияУчастника = Перечисления.ФункцииУчастниковПодписания.Подписывающий Тогда
		
		ДокументПредприятия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет");
		
		Если ТипЗнч(ДокументПредприятия) <> Тип("СправочникСсылка.ДокументыПредприятия") Тогда
			Возврат;	
		КонецЕсли;
		
		МоиДокументы.ДобавитьЗаписьВМоиДокументы(ДокументПредприятия, 
			Перечисления.ПричиныДобавленияВМоиДокументы.ЯвляюсьПодписантомДокумента,
			Участник);
			 
	КонецЕсли;

КонецПроцедуры   

// Удаляет из МоиДокументы, если участник подписывает документ
// Параметры:
//  Действие - СправочникСсылка.ДействияПодписания
//	ФункцияУчастника - ПеречислениеСсылка.ФункцииУчастниковПодписания
//	Участник - СправочникСсылка.Сотрудники
//
Процедура УдалитьИзМоиДокументы(Действие, ФункцияУчастника, Участник)
	
	Если ФункцияУчастника = Перечисления.ФункцииУчастниковПодписания.Подписывающий Тогда
		
		ДокументПредприятия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет");
		
		Если ТипЗнч(ДокументПредприятия) <> Тип("СправочникСсылка.ДокументыПредприятия") Тогда
			Возврат;	
		КонецЕсли;
		
		МоиДокументы.УдалитьЗаписьИзМоиДокументы(ДокументПредприятия, 
			Перечисления.ПричиныДобавленияВМоиДокументы.ЯвляюсьПодписантомДокумента,
			Участник);
			 
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецЕсли
