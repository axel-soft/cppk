
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	РежимДиалога = Параметры.РежимДиалога;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И Параметры.Свойство("Предмет") Тогда
		Объект.Предмет = Параметры.Предмет;
	КонецЕсли;

	УстановитьСпособыПодписанияИзВидаПредмета();
	
	ДействияСобытия.ЗаполнитьДанныеДействия(ЭтотОбъект, ИзменениеДействияРазрешено());
	
	ИдентификаторОбрабатывающегоРезультат = ДействияСервер.ПредопределенныйИдентификаторУчастника(
		"ЭтапОбрабатывающийРезультатПодписание");
	ИдентификаторЭтапаПодписать= ДействияСервер.ПредопределенныйИдентификаторУчастника(
		"ЭтапПодписать");
	ОбновитьДеревоУчастниковПоОбъекту();
	ДействияСервер.ЗаполнитьСостоянияИРезультатыВФормеДействия(ЭтотОбъект);
	УстановитьДоступностьИзмененияУчастников();
	ДействияСервер.УстановитьВидимостьУсловийУчастников(ЭтотОбъект);
	
	ДействияКлиентСервер.ЗапомнитьУчастниковПриОткрытииКарточки(ЭтотОбъект);
	
	// Завершенное действие можно направить новым участникам.
	ДействияСервер.УстановитьВидимостьНаправленияНовымУчастникам(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьПредставлениеСроков();
	РазныеСроки = ДействияКлиент.ЗначениеРазныеСрокиРекурсивно(Участники.ПолучитьЭлементы());
	Элементы.УчастникиРазныеСроки.Пометка = РазныеСроки;
	ДействияКлиент.ЗаполнитьДоступностьПеремещенияЭтаповУчастников(Участники, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда 
		ПараметрыЗаписи.Вставить("ТребуетсяОбновление", Истина);
		ПроверитьУникальностьЭтапов(Отказ);
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Объект.Ссылка.Пустая());
	ОбновитьОбъектПоДеревуУчастников(Отказ);
	
	Если ИсполнениеДействияСНовымиУчастниками
		И Не ДействияКлиентСервер.УчастникиДействияИзмененыВКарточке(ЭтотОбъект) Тогда
		
		ПоказатьПредупреждение(,
			НСтр("ru = 'Новые участники не добавлены. 
				|Для запуска нового подписания добавьте участников.'"));
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	ДействияКлиент.ОтложенноеНачалоВыполненияПередЗаписью(ЭтотОбъект);
	
	Если ПараметрыЗаписи.Свойство("НеПроверятьУчастников") И ПараметрыЗаписи.НеПроверятьУчастников Тогда
		Возврат;
	КонецЕсли;
	ПроверитьУчастников(Отказ);

	Если Не ЗначениеЗаполнено(Объект.МоментРазыменованияУчастников) Тогда
		Объект.МоментРазыменованияУчастников = ПредопределенноеЗначение("Перечисление.МоментыРазыменованияУчастниковДействий.ПриСозданииДействия");
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ИсполнениеДействияСНовымиУчастниками Тогда
		ДействияСервер.УстановитьПризнакЗаписиИсполненияДействияСНовымиУчастниками(ТекущийОбъект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкаОбработки) Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("НастройкаОбработки", НастройкаОбработки);
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ДействияСобытия.ДействияПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ДействияКлиент.ДействияПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
	ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъекта(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ИсполнениеДействияСНовымиУчастниками =
		ДействияСервер.ДействиеИсполняетсяСНовымиУчастниками(ТекущийОбъект);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АвторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТипОбъекта = ОбщегоНазначенияДокументооборотКлиентСервер.ТипОбъекта(Объект.Предмет);
	НастройкиДействийКлиент.НастройкиДействияАвторНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НастройкиДействийКлиент.НастройкиДействияАвторОбработкаВыбора(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(Объект, "Автор", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТипОбъекта = ОбщегоНазначенияДокументооборотКлиентСервер.ТипОбъекта(Объект.Предмет);
	НастройкиДействийКлиент.НастройкиДействияАвторАвтоПодбор(
		ЭтотОбъект, Текст, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта);
		
КонецПроцедуры

&НаКлиенте
Процедура АвторОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТипОбъекта = ОбщегоНазначенияДокументооборотКлиентСервер.ТипОбъекта(Объект.Предмет);
	НастройкиДействийКлиент.НастройкиДействияАвторОкончаниеВводаТекста(
		ЭтотОбъект, Текст, ДанныеВыбора, СтандартнаяОбработка, ТипОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПодписанияПриИзменении(Элемент)
	
	ВидимостьОбеспечивающего = Объект.СпособПодписания = ПредопределенноеЗначение(
		"Перечисление.СпособыПодписанияПредметаДействия.НаБумаге");
	Элементы.УчастникиДобавитьОбеспечивающегоПодписание.Видимость = ВидимостьОбеспечивающего;
	Элементы.УчастникиКонтекстноеМенюДобавитьОбеспечивающегоПодписание.Видимость = ВидимостьОбеспечивающего;
	
	ДействияКлиент.СпособПодписанияПриИзменении(ЭтотОбъект);
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОтложенногоНачалаВыполненияНажатие(Элемент, СтандартнаяОбработка)
	
	ДействияКлиент.ОписаниеОтложенногоНачалаВыполненияНажатие(ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУчастники

&НаКлиенте
Процедура УчастникиПриИзменении(Элемент)
	
	ОбновитьПредставленияВДеревеУчастников(Участники);
	РазвернутьДеревоУчастников();
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Участники.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Поле = Элементы.ЕстьОсобоеНаименованиеОписание Тогда
		
		Если ТекущиеДанные = Неопределено Или ТекущиеДанные.ЭтоЭтап
			Или ТекущиеДанные.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.ОбрабатывающийРезультат") Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Описание", ТекущиеДанные.Описание);
		ПараметрыФормы.Вставить("ТолькоОписание", Истина);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр Или ТекущиеДанные.Недоступно);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗавершитьНастройкуОсобогоНаименованияИОписанияПодписывающего", ЭтотОбъект, ТекущиеДанные);
			
		ОткрытьФорму("ОбщаяФорма.РедактированиеОсобогоНаименованияИОписанияЗадачи",
			ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
		
		Возврат;
	КонецЕсли;
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.УчастникиУсловиеПредставление
		И ТекущиеДанные <> Неопределено 
		И ЗначениеЗаполнено(ТекущиеДанные.Условие) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Условие);
	
	ИначеЕсли Поле = Элементы.УчастникиЗащищенный Тогда
		
		ДействияКлиент.Защищенный(ЭтотОбъект);

	КонецЕсли;
	
КонецПроцедуры

// Продолжение процедуры УчастникиВыбор
//
&НаКлиенте
Процедура ЗавершитьНастройкуОсобогоНаименованияИОписанияПодписывающего(
	НаименованиеИОписание, СтрокаУчастника) Экспорт
	
	Если НаименованиеИОписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаУчастника.Описание = НаименованиеИОписание.Описание;
	
	СтрокаУчастника.ЕстьОсобоеНаименованиеОписание = ЗначениеЗаполнено(СтрокаУчастника.Описание);
	
	Модифицированность = Истина;
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДочерниеЭлементы = ТекущиеДанные.ПолучитьЭлементы();
	Если ДочерниеЭлементы.Количество() = 1 Тогда // скопируем вниз
		СкопироватьДанныеКОбеспечивающемуПодписание(ДочерниеЭлементы[0], ТекущиеДанные);
	КонецЕсли;	 	
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьЭлементовФормы();
	ДействияКлиент.УчастникиПриАктивизацииСтроки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ЭтоЭтап Тогда
		ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанные.Функция = ПредопределенноеЗначение(
		"Перечисление.ФункцииУчастниковПодписания.ОбрабатывающийРезультат") Тогда
		ПоказатьПредупреждение(, 
			НСтр("ru = 'Добавление в этап обработки результата невозможно.'"));
		Возврат;
	КонецЕсли;
	
	// Запрещено настройками доступность действия
	Если ТекущиеДанные.Недоступно И Не ТекущиеДанные.РазрешеноДобавлять Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыУстановкиСрока = СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	СтрокиЭтапа = ТекущиеДанные.ПолучитьЭлементы();
	
	СтрокаУчастника = СтрокиЭтапа.Добавить();
	СтрокаУчастника.Идентификатор = Новый УникальныйИдентификатор;
	СтрокаУчастника.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	СтрокаУчастника.ПредставлениеСтроки = ДействияКлиентСервер.ПредставлениеУчастника(СтрокаУчастника.Участник);
	СтрокаУчастника.Функция = ПредопределенноеЗначение(
		"Перечисление.ФункцииУчастниковПодписания.Подписывающий");
	СтрокаУчастника.РазрешеноДобавлять = ТекущиеДанные.РазрешеноДобавлять;
	ИндексПредыдущегоЭлемента = СтрокиЭтапа.Количество() - 2;
	Если ИндексПредыдущегоЭлемента >= 0 Тогда
		
		СтрокаУчастника.ВариантУстановкиСрока = 
			СтрокиЭтапа[ИндексПредыдущегоЭлемента].ВариантУстановкиСрока;
		
		Если СтрокаУчастника.ВариантУстановкиСрока = ВариантыУстановкиСрока.ТочныйСрок Тогда
			Если ТекущиеДанные.Порядок = ПредопределенноеЗначение("Перечисление.ПорядокВыполненияЭтапаДействия.Параллельно") Тогда
				СтрокаУчастника.Срок = СтрокиЭтапа[ИндексПредыдущегоЭлемента].Срок;
			КонецЕсли;
		Иначе
			СтрокаУчастника.СрокДни = СтрокиЭтапа[ИндексПредыдущегоЭлемента].СрокДни;
			СтрокаУчастника.СрокЧасы = СтрокиЭтапа[ИндексПредыдущегоЭлемента].СрокЧасы;
			СтрокаУчастника.СрокМинуты = СтрокиЭтапа[ИндексПредыдущегоЭлемента].СрокМинуты;
		КонецЕсли;
		
	Иначе
		СтрокаУчастника.ВариантУстановкиСрока = ВариантыУстановкиСрока.ОтносительныйСрок;
	КонецЕсли;
	
	Если ТекущиеДанные.СрокОбщий Тогда
		ЗаполнитьЗначенияСвойств(СтрокаУчастника, ТекущиеДанные,, "Порядок");
	КонецЕсли;
	
	Элементы.Участники.ТекущаяСтрока = СтрокаУчастника.ПолучитьИдентификатор();
	ДействияКлиент.ЗаполнитьДоступностьПеремещенияЭтаповУчастников(СтрокиЭтапа);
	
	УстановитьДоступностьЭлементовФормы();
	ЗаполнитьПредставлениеСроков();
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ВыделенныеСтроки = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(
		Элементы.Участники.ВыделенныеСтроки);
	
	ВсеЭтапы = Участники.ПолучитьЭлементы();
	
	// Если выделена только одна строка, то выводим сообщение о невозможности
	// ее удаления. Иначе молча удаляем все возможные строки дерева.
	Если ВыделенныеСтроки.Количество() = 1 Тогда
		
		СтрокаДерева = Участники.НайтиПоИдентификатору(ВыделенныеСтроки[0]);
				
		ТекстПредупреждения = "";
		
		Если СтрокаДерева.ЭтоЭтап Тогда
		
			СчЭтаповДанногоВида = 0;
			Для Каждого Этап Из ВсеЭтапы Цикл
				Если Этап.Функция = СтрокаДерева.Функция Тогда
					СчЭтаповДанногоВида = СчЭтаповДанногоВида + 1;
				КонецЕсли;
			КонецЦикла;
			
			Если СчЭтаповДанногоВида < 2 Тогда 
				Если СтрокаДерева.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.Подписывающий") Тогда
					ТекстПредупреждения = НСтр("ru = 'Удаление единственного этапа подписания невозможно.'");
				ИначеЕсли СтрокаДерева.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.ОбрабатывающийРезультат") Тогда
					ТекстПредупреждения = НСтр("ru = 'Удаление этапа обработки результата невозможно.'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаДерева.Защищенный И Не СтрокаДерева.РазрешеноДобавлять Тогда
			ТекстПредупреждения = ДействияКлиентПовтИсп.ТекстПредупрежденияПриУдаленииЗащищенных();
		ИначеЕсли СтрокаДерева.ЭтоЭтап И СтрокаДерева.ИзНастройки И Не ЗначениеЗаполнено(ТекстПредупреждения) Тогда
			ТекстПредупреждения = ДействияКлиентПовтИсп.ТекстПредупрежденияПриУдаленииЭтапа();
		ИначеЕсли СтрокаДерева.Недоступно И Не ЗначениеЗаполнено(ТекстПредупреждения) Тогда
			ТекстПредупреждения = ДействияКлиентПовтИсп.ТекстПредупрежденияПриУдаленииНедоступного();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		
	Иначе
	
		// Вначале исключаем этапы и участников, которых невозможно удалить.
		КоличествоВыделенныхСтрок = ВыделенныеСтроки.Количество();
		ИндексСтроки = КоличествоВыделенныхСтрок - 1;
		
		Пока ИндексСтроки >= 0 Цикл
			
			ИндексТекущейСтроки = ИндексСтроки;
			ИндексСтроки = ИндексСтроки - 1;
			
			СтрокаДерева = Участники.НайтиПоИдентификатору(ВыделенныеСтроки[ИндексТекущейСтроки]);
			
			// Все этапы.
			Если СтрокаДерева.ЭтоЭтап Тогда
				ВыделенныеСтроки.Удалить(ИндексТекущейСтроки);
				Продолжить;
			КонецЕсли;
			
			Если (СтрокаДерева.Защищенный И Не СтрокаДерева.РазрешеноДобавлять)
				Или СтрокаДерева.Недоступно Тогда
				ВыделенныеСтроки.Удалить(ИндексТекущейСтроки);
				Продолжить;
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
	// Удаляем всех выделенных участников.
	КоличествоВыделенныхСтрок = ВыделенныеСтроки.Количество();
	ИндексСтроки = КоличествоВыделенныхСтрок - 1;
	
	Пока ИндексСтроки >= 0 Цикл
		
		ИндексТекущейСтроки = ИндексСтроки;
		ИндексСтроки = ИндексСтроки - 1;
		
		СтрокаУчастника = Участники.НайтиПоИдентификатору(ВыделенныеСтроки[ИндексТекущейСтроки]);
		
		// Пропускаем этапы.
		Если СтрокаУчастника.ЭтоЭтап Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаЭтапа = СтрокаУчастника.ПолучитьРодителя();
		ЭлементыУчастников = СтрокаЭтапа.ПолучитьЭлементы();
		Если СтрокаЭтапа.Функция = 
			ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.ОбрабатывающийРезультат") Тогда 
			Если Элементы.Участники.ТекущийЭлемент.Имя = "ПредставлениеСтроки" Тогда
				ЭлементыУчастников[0].Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
			Иначе
				ЭлементыУчастников[0][Элементы.Участники.ТекущийЭлемент.Имя] = Неопределено;
			КонецЕсли;
		Иначе 
			ЭлементыУчастников.Удалить(СтрокаУчастника);
		КонецЕсли;
		ВыделенныеСтроки.Удалить(ИндексТекущейСтроки);
		Модифицированность = Истина;
		ДействияКлиент.ЗаполнитьДоступностьПеремещенияЭтаповУчастников(ЭлементыУчастников);
	КонецЦикла;
	
	// Удаляем возможные этапы.
	КоличествоВыделенныхСтрок = ВыделенныеСтроки.Количество();
	ИндексСтроки = КоличествоВыделенныхСтрок - 1;
	ЭтапыКУдалению = Новый Массив;
	
	Пока ИндексСтроки >= 0 Цикл
		
		ИндексТекущейСтроки = ИндексСтроки;
		ИндексСтроки = ИндексСтроки - 1;
		
		СтрокаЭтап = Участники.НайтиПоИдентификатору(ВыделенныеСтроки[ИндексТекущейСтроки]);
		
		ЭтапыКУдалению.Добавить(СтрокаЭтап);
	КонецЦикла;
	
	Если ЭтапыКУдалению.Количество() <> ВсеЭтапы.Количество() - 1 Тогда
		
		Для Каждого ЭтапКУдалению Из ЭтапыКУдалению Цикл
			ВсеЭтапы.Удалить(ЭтапКУдалению);
			Модифицированность = Истина;
		КонецЦикла;
		
		ДействияКлиент.ЗаполнитьДоступностьПеремещенияЭтаповУчастников(ВсеЭтапы);
		
	КонецЕсли;
	
	ЭлементыЭтапы = Участники.ПолучитьЭлементы();
	ЕстьЭтапы = Ложь;
	Для Каждого ЭлементЭтап Из ЭлементыЭтапы Цикл
		Если ЭлементЭтап.Идентификатор = ИдентификаторЭтапаПодписать 
			Или ЭлементЭтап.Идентификатор = ИдентификаторОбрабатывающегоРезультат Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьЭтапы = Истина;
		Прервать;
	КонецЦикла;
	
	УстановитьДоступностьЭлементовФормы();
	ОбновитьПредставленияВДеревеУчастников(Участники);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередНачаломИзменения(Элемент, Отказ)
	ДействияКлиент.УчастникиПередНачаломИзменения(ЭтотОбъект, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура УчастникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Или ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	// Определение строки этапа.
	СтрокаЭтапа = Участники.НайтиПоИдентификатору(Элементы.Участники.ТекущаяСтрока);
	Если Не СтрокаЭтапа.ЭтоЭтап Тогда
		СтрокаЭтапа = СтрокаЭтапа.ПолучитьРодителя();
	КонецЕсли;
	
	Если Не СтрокаЭтапа.ЭтоЭтап Тогда
		ВызватьИсключение НСтр("ru = 'Не определена строка этапа'");
	КонецЕсли;
	
	Если СтрокаЭтапа.Функция <> ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.Подписывающий") Тогда
		Возврат;
	КонецЕсли;
	
	УдаленыНекоторыеУчастники = Ложь;
	ДобавленыНовыеУчастники = Ложь;
	
	// Массив выбранных участников с обратной сортировкой.
	ВыбранныеУчастники = Новый Массив;
	ИндексСтроки = ВыбранноеЗначение.Количество() - 1;
	Пока ИндексСтроки >= 0 Цикл
		ВыбранныеУчастники.Добавить(ВыбранноеЗначение[ИндексСтроки]);
		ИндексСтроки = ИндексСтроки - 1;
	КонецЦикла;
	
	// Определение порядка выполнения, сроков и т.д. для новых строк.
	ВариантыУстановкиСрока = СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	ЗначенияКолонокДляНовыхСтрок = Новый Структура;
	ЗначенияКолонокДляНовыхСтрок.Вставить("ВариантУстановкиСрока",
		ВариантыУстановкиСрока.ОтносительныйСрок);
	ЗначенияКолонокДляНовыхСтрок.Вставить("Срок", Дата(1,1,1));
	ЗначенияКолонокДляНовыхСтрок.Вставить("СрокДни", 0);
	ЗначенияКолонокДляНовыхСтрок.Вставить("СрокЧасы", 0);
	ЗначенияКолонокДляНовыхСтрок.Вставить("СрокМинуты", 0);
	ЗначенияКолонокДляНовыхСтрок.Вставить("Идентификатор", СтрокаЭтапа.Идентификатор);
	ЗначенияКолонокДляНовыхСтрок.Вставить("Функция", СтрокаЭтапа.Функция);
	ЗначенияКолонокДляНовыхСтрок.Вставить("РазрешеноДобавлять", СтрокаЭтапа.РазрешеноДобавлять);
	
	// Удаление неактуальных участников.
	СтрокиУчастников = СтрокаЭтапа.ПолучитьЭлементы();
	ИндексСтроки = СтрокиУчастников.Количество() - 1;
	Пока ИндексСтроки >= 0 Цикл
		
		СтрокаУчастника = СтрокиУчастников[ИндексСтроки];
		
		Если ИндексСтроки = СтрокиУчастников.Количество() - 1 Тогда
			ЗаполнитьЗначенияСвойств(ЗначенияКолонокДляНовыхСтрок, СтрокаУчастника);
		КонецЕсли;
		
		// Пропускаем существующих участников этапа.
		ВыбранныйУчастник = ВыбранныеУчастники.Найти(СтрокаУчастника.Участник);
		Если ВыбранныйУчастник <> Неопределено Тогда
			ВыбранныеУчастники.Удалить(ВыбранныйУчастник);
			ИндексСтроки = ИндексСтроки - 1;
			Продолжить;
		КонецЕсли;
		
		// Завершивших свои задачи менять нельзя
		Если СтрокаУчастника.Состояние = ПредопределенноеЗначение(
			"Перечисление.СостоянияВыполненияДействий.Завершено") Тогда
			ИндексСтроки = ИндексСтроки - 1;
			Продолжить;
		КонецЕсли;
		
		// Защищенных участников удалять нельзя
		Если СтрокаУчастника.Защищенный Тогда
			ИндексСтроки = ИндексСтроки - 1;
			Продолжить;
		КонецЕсли;
		
		Если СтрокаУчастника.Недоступно И СтрокаУчастника.РазрешеноДобавлять Тогда
			ИндексСтроки = ИндексСтроки - 1;
			Продолжить;
		КонецЕсли;
		
		СтрокиУчастников.Удалить(СтрокаУчастника);
		УдаленыНекоторыеУчастники = Истина;
		
		ИндексСтроки = ИндексСтроки - 1;
		
	КонецЦикла;
	
	// Добавление новых участников.
	ИндексСтроки = ВыбранныеУчастники.Количество() - 1;
	Пока ИндексСтроки >= 0 Цикл
		
		ВыбранныйУчастник = ВыбранныеУчастники[ИндексСтроки];
		
		СтрокаУчастника = СтрокиУчастников.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаУчастника, ЗначенияКолонокДляНовыхСтрок);
		СтрокаУчастника.Участник = ВыбранныйУчастник;
		СтрокаУчастника.Идентификатор = Новый УникальныйИдентификатор;
		
		ВыбранныеУчастники.Удалить(ИндексСтроки);
		ДобавленыНовыеУчастники = Истина;
		ИндексСтроки = ИндексСтроки - 1;
		
	КонецЦикла;
	
	Если ДобавленыНовыеУчастники Тогда
		ОбновитьПредставленияВДеревеУчастников(Участники);
		РазвернутьДеревоУчастников();
		ЗаполнитьПредставлениеСроков();
	КонецЕсли;
	
	Если УдаленыНекоторыеУчастники Или ДобавленыНовыеУчастники Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ИндексСтроки = ПараметрыПеретаскивания.Значение.Количество() - 1;
	
	УчастникиСЗадачами = Новый Массив;
	ПеремещениеЗадачиОбработкиРезультата = Ложь;
	
	// Анализируем перемещаемые строки и удаляем те, перемещение
	// которых невозможно.
	Пока ИндексСтроки >= 0 Цикл
		
		ИдентификаторСтроки = ПараметрыПеретаскивания.Значение[ИндексСтроки];
		
		СтрокаДерева = Участники.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		УдалитьСтроку = Ложь;
		Если СтрокаДерева.ЭтоЭтап Тогда
			УдалитьСтроку = Истина;
		
		ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.Состояние) Тогда
			
			УчастникиСЗадачами.Добавить(СтрокаДерева.Участник);
			УдалитьСтроку = Истина;
				
		ИначеЕсли ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(СтрокаДерева.Функция) Тогда
			
			ПеремещениеЗадачиОбработкиРезультата = Истина;
			УдалитьСтроку = Истина;
		КонецЕсли;
		
		Если УдалитьСтроку Тогда
			ПараметрыПеретаскивания.Значение.Удалить(ИндексСтроки);
		КонецЕсли;
		
		ИндексСтроки = ИндексСтроки - 1;
		
	КонецЦикла;
	
	// Если строк для перемещения не осталось, то отменяем перемещение.
	Если ПараметрыПеретаскивания.Значение.Количество() = 0 Тогда
		Выполнение = Ложь;
	КонецЕсли;
	
	// Предупреждаем о строках которые невозможно перенести.
	// Предупреждаем только о одной, самой важной, проблеме при переносе.
	Если УчастникиСЗадачами.Количество() > 0 Тогда
		СтрокиПредупреждения = Новый Массив;
		СтрокиПредупреждения.Добавить(
			НСтр("ru = 'Для следующих сотрудников уже сформированы задачи. Перемещение невозможно!'"));
		СтрокиПредупреждения.Добавить(Символы.ПС);
		
		Для Каждого УчастникСЗадачей Из УчастникиСЗадачами Цикл
			СтрокиПредупреждения.Добавить(Символы.ПС);
			СтрокиПредупреждения.Добавить("- ");
			СтрокиПредупреждения.Добавить(УчастникСЗадачей);
		КонецЦикла;
		
		ПоказатьПредупреждение(, СтрСоединить(СтрокиПредупреждения));
		
	ИначеЕсли ПеремещениеЗадачиОбработкиРезультата Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'Перемещение из этапа обработки результата невозможно!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Не ЗначениеЗаполнено(Строка) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ЭтапПолучатель = Участники.НайтиПоИдентификатору(Строка);
	Если ЭтапПолучатель = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Не ЭтапПолучатель.ЭтоЭтап Тогда
		ЭтапПолучатель = ЭтапПолучатель.ПолучитьРодителя();
		Если ЭтапПолучатель = Неопределено Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтапПолучатель.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.ОбрабатывающийРезультат") Тогда
		
		ПоказатьПредупреждение(,
			НСтр("ru = 'Перемещение в этап обработки результата невозможно!'"));
		
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ЭтапПолучатель.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияВыполненияДействий.Завершено") Тогда
		
		ПоказатьПредупреждение(,
			НСтр("ru = 'Перемещение в завершенный этап обработки невозможно!'"));
		
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Строка = ЭтапПолучатель.ПолучитьИдентификатор();
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив") Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ИндексСтроки = ПараметрыПеретаскивания.Значение.Количество() - 1;
	Пока ИндексСтроки >= 0 Цикл
		
		ИндексТекущейСтроки = ИндексСтроки;
		ИндексСтроки = ИндексСтроки - 1;
		
		ИдентификаторСтроки = ПараметрыПеретаскивания.Значение[ИндексТекущейСтроки];
		ПеремещаемаяСтрока = Участники.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		// Исключаем строки, перемещаемые в рамках одного этапа.
		Если ПеремещаемаяСтрока.ПолучитьРодителя() = ЭтапПолучатель Тогда
			ПараметрыПеретаскивания.Значение.Удалить(ИндексТекущейСтроки);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыПеретаскивания.Значение.Количество() = 0 Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ДействияКлиент.ЗаполнитьДоступностьПеремещенияЭтаповУчастников(Участники, Истина);
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

// Работа с УчастникиПредставлениеСтроки

&НаКлиенте
Процедура ПредставлениеСтрокиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.ПредставлениеСтроки) = Тип("Строка")
		И ЗначениеЗаполнено(ТекущиеДанные.ПрефиксСтроки)
		И СтрНачинаетсяС(ТекущиеДанные.ПредставлениеСтроки, ТекущиеДанные.ПрефиксСтроки) Тогда
		
		ТекущиеДанные.ПредставлениеСтроки = Прав(ТекущиеДанные.ПредставлениеСтроки,
			СтрДлина(ТекущиеДанные.ПредставлениеСтроки) - СтрДлина(ТекущиеДанные.ПрефиксСтроки));
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЭтап Тогда
		Если СтрДлина(ТекущиеДанные.ПредставлениеСтроки) > 50 Тогда
			ТекущиеДанные.ПредставлениеСтроки = Лев(ТекущиеДанные.ПредставлениеСтроки, 50);
		КонецЕсли;
		
		ТекущиеДанные.НаименованиеЭтапа = ТекущиеДанные.ПредставлениеСтроки;
	Иначе
		ТекущиеДанные.Участник = ТекущиеДанные.ПредставлениеСтроки;
		ТекущиеДанные.ИзНастройки = Ложь;
	КонецЕсли;
	
	ДействияКлиент.ПредставлениеСтрокиПриИзмененииПредложитьЗащититьДубли(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаголовокФормы = НСтр("ru = 'Выбор подписывающего'");
	ДействияКлиент.ПредставлениеСтрокиНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка, ЗаголовокФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиОткрытие(Элемент, СтандартнаяОбработка)
	
	ДействияКлиент.ПредставлениеСтрокиОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиОчистка(Элемент, СтандартнаяОбработка)
	
	ДействияКлиент.ПредставлениеСтрокиОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДействияКлиент.ПредставлениеСтрокиОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	// Если значение требует уточнения, будет вызвана форма для ввода уточняющих данных.
	// Обработка выбора не должна выполняться в этом случае.
	ТипыДляУточнения = Новый Массив;
	ТипыДляУточнения.Добавить(Тип("Структура"));
	ТипыДляУточнения.Добавить(Тип("СправочникСсылка.РолиИсполнителей"));
	ТипыДляУточнения.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	ТипыДляУточнения.Добавить(Тип("СправочникСсылка.Проекты"));
	Если ТипыДляУточнения.Найти(ТипЗнч(ВыбранноеЗначение)) <> Неопределено Тогда
		СотрудникиКлиент.ОбработкаВыбораКонтейнера(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
		// Повторная проверка (значение могло быть изменено).
		Если ТипыДляУточнения.Найти(ТипЗнч(ВыбранноеЗначение)) <> Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЭтап Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные.НаименованиеЭтапа = ВыбранноеЗначение;
		ТекущиеДанные.ПредставлениеСтроки = ТекущиеДанные.ПрефиксСтроки + ТекущиеДанные.НаименованиеЭтапа;
		
		Если ТекущиеДанные.Идентификатор = ИдентификаторЭтапаПодписать 
			И ТекущиеДанные.НаименованиеЭтапа <> НСтр("ru = 'Подписать'") Тогда
			ТекущиеДанные.Идентификатор = Новый УникальныйИдентификатор();
		КонецЕсли;	
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Участник = ВыбранноеЗначение;
	
	РазвернутьДеревоУчастников();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДействияКлиент.ПредставлениеСтрокиАвтоПодбор(
		ЭтотОбъект,Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСтрокиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДействияКлиент.ПредставлениеСтрокиОкончаниеВводаТекста(
		ЭтотОбъект, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

// Работа с УчастникиСрокПредставление

&НаКлиенте
Процедура СрокПредставлениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекстСообщенияПредупреждения", "");
	ПараметрыФормы.Вставить("ВПредставленииМожетБытьДата", Истина);
	ПараметрыФормы.Вставить("Форма", ЭтотОбъект);
	ПараметрыФормы.Вставить("Исполнитель", ТекущиеДанные.Участник);
	
	РезультатЗаполнения = СрокиИсполненияПроцессовКлиент.ИзменитьСрокИсполненияПоПредставлению(
		ТекущиеДанные.Срок,
		ТекущиеДанные.СрокДни,
		ТекущиеДанные.СрокЧасы,
		ТекущиеДанные.СрокМинуты,
		ТекущиеДанные.ВариантУстановкиСрока,
		ТекущиеДанные.СрокПредставление,
		ПараметрыФормы);
		
	ДочерниеЭлементы = ТекущиеДанные.ПолучитьЭлементы();
	Если ДочерниеЭлементы.Количество() = 1 Тогда // скопируем вниз
		СкопироватьДанныеКОбеспечивающемуПодписание(ДочерниеЭлементы[0], ТекущиеДанные);
	КонецЕсли;
		
	Если РезультатЗаполнения Тогда
		Если Не РазныеСроки Тогда
			ДействияКлиент.ЗаполнитьСрокиСоисполнителейПоТекущейСтроке(
				Участники, ТекущиеДанные);
		КонецЕсли;
		ЗаполнитьПредставлениеСроков();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыФормы.ТекстСообщенияПредупреждения) Тогда
		ПоказатьПредупреждение(, ПараметрыФормы.ТекстСообщенияПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДействияКлиент.СрокПредставлениеНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДействияКлиент.СрокПредставлениеРегулирование(
		ЭтотОбъект, Элемент, Направление, СтандартнаяОбработка, Не РазныеСроки);
	
	ДочерниеЭлементы = ТекущиеДанные.ПолучитьЭлементы();
	Если ДочерниеЭлементы.Количество() = 1 Тогда // скопируем вниз
		СкопироватьДанныеКОбеспечивающемуПодписание(ДочерниеЭлементы[0], ТекущиеДанные);
	КонецЕсли;

	ЗаполнитьПредставлениеСроков();
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДействияКлиент.СрокПредставлениеОбработкаВыбора(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка, Не РазныеСроки);
	ЗаполнитьПредставлениеСроков();
	
КонецПроцедуры

// Работа с УчастникиОписание

&НаКлиенте
Процедура ОписаниеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ЕстьОсобоеНаименованиеОписание = ЗначениеЗаполнено(ТекущиеДанные.Описание);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокПриИзменении(Элемент)
	
	ДействияКлиент.ПорядокПриИзменении(ЭтотОбъект, Элемент);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандФормыУчастники

&НаКлиенте
Процедура Подобрать(Команда)
	
	СтрокаЭтапа = Участники.НайтиПоИдентификатору(Элементы.Участники.ТекущаяСтрока);
	Если Не СтрокаЭтапа.ЭтоЭтап Тогда
		СтрокаЭтапа = СтрокаЭтапа.ПолучитьРодителя();
	КонецЕсли;
	
	Если Не СтрокаЭтапа.ЭтоЭтап Тогда
		ВызватьИсключение НСтр("ru = 'Не определена строка этапа.'");
	КонецЕсли;
	
	Если СтрокаЭтапа.Функция <> ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.Подписывающий") Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныеАдресаты = Новый Массив;
	УчастникиЭтапов = СтрокаЭтапа.ПолучитьЭлементы();
	Для Каждого СтрокаУчастника Из УчастникиЭтапов Цикл
		Если ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
			СтруктураАдресата = Новый Структура("Участник, Недоступно",
				СтрокаУчастника.Участник, СтрокаУчастника.Недоступно Или СтрокаУчастника.Защищенный);
			ВыбранныеАдресаты.Добавить(СтруктураАдресата);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПолученияДанных = Новый Структура;
	ПараметрыПолученияДанных.Вставить("ВыборМножества", Истина);
	ПараметрыПолученияДанных.Вставить("ФункцияУчастника", СтрокаЭтапа.Функция);
	ПараметрыПолученияДанных.Вставить("КонтролироватьСотрудниковБезПользователя", Истина);
	
	РаботаСАдреснойКнигойКлиент.ВыбратьУчастника(ЭтотОбъект, Элементы.Участники, Ложь,
		ВыбранныеАдресаты,,	НСтр("ru = 'Подбор подписывающих'"), ПараметрыПолученияДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.ОбрабатывающийРезультат") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЭтап Тогда
		
		Этапы = Участники.ПолучитьЭлементы();
		ИндексТекущейСтроки = Этапы.Индекс(ТекущиеДанные);
		Если ИндексТекущейСтроки = 0 Тогда
			Возврат;
		КонецЕсли;
		Этапы.Сдвинуть(ИндексТекущейСтроки, -1);
		ДействияКлиент.ЗаполнитьДоступностьПеремещенияЭтаповУчастников(Этапы);
		
	Иначе
		
		УчастникиЭтапа = ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
		
		ИндексТекущейСтроки = УчастникиЭтапа.Индекс(ТекущиеДанные);
		
		Если ИндексТекущейСтроки = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ПредыдущийУчастник = УчастникиЭтапа.Получить(ИндексТекущейСтроки - 1);
		
		УчастникиЭтапа.Сдвинуть(ИндексТекущейСтроки, -1);
		ДействияКлиент.ЗаполнитьДоступностьПеремещенияЭтаповУчастников(УчастникиЭтапа);
		
	КонецЕсли;
	
	ОбновитьПредставленияВДеревеУчастников(Участники);
	УчастникиПриАктивизацииСтроки(Элементы.Участники);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.ОбрабатывающийРезультат") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЭтап Тогда
		
		Этапы = Участники.ПолучитьЭлементы();
		ИндексТекущейСтроки = Этапы.Индекс(ТекущиеДанные);
		Если ИндексТекущейСтроки = Этапы.Количество() - 1 ИЛИ
			Этапы[ИндексТекущейСтроки+1].Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.ОбрабатывающийРезультат") Тогда
			Возврат;
		КонецЕсли;
		Этапы.Сдвинуть(ИндексТекущейСтроки, 1);
		ДействияКлиент.ЗаполнитьДоступностьПеремещенияЭтаповУчастников(Этапы);
		
	Иначе
		
		УчастникиЭтапа = ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
		
		ИндексТекущейСтроки = УчастникиЭтапа.Индекс(ТекущиеДанные);
		
		Если ИндексТекущейСтроки = УчастникиЭтапа.Количество() - 1 Тогда
			Возврат;
		КонецЕсли;
		
		УчастникиЭтапа.Сдвинуть(ИндексТекущейСтроки, 1);
		ДействияКлиент.ЗаполнитьДоступностьПеремещенияЭтаповУчастников(УчастникиЭтапа);
		
	КонецЕсли;
	
	ОбновитьПредставленияВДеревеУчастников(Участники);
	УчастникиПриАктивизацииСтроки(Элементы.Участники);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭтап(Команда)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоДочернийУчастник Тогда
		РодительЭлемента = ТекущиеДанные.ПолучитьРодителя();
		Если РодительЭлемента <> Неопределено Тогда
			ТекущиеДанные = РодительЭлемента;
		КонецЕсли;
	КонецЕсли;
	
	РодительЭлемента = ТекущиеДанные.ПолучитьРодителя();
	Если РодительЭлемента <> Неопределено Тогда
		ТекущиеДанные = РодительЭлемента;
	КонецЕсли;
	
	СтрокиЭтапов = Участники.ПолучитьЭлементы();
	
	ИндексНовогоЭлемента = СтрокиЭтапов.Индекс(ТекущиеДанные);
	Если ТекущиеДанные.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.Подписывающий") Тогда
		ИндексНовогоЭлемента = ИндексНовогоЭлемента + 1;
	КонецЕсли;
	
	СтрокаЭтап = СтрокиЭтапов.Вставить(ИндексНовогоЭлемента);
	СтрокаЭтап.НаименованиеЭтапа = НСтр("ru = 'Новый этап'");
	СтрокаЭтап.ЭтоЭтап = Истина;
	СтрокаЭтап.Порядок = ТекущиеДанные.Порядок;
	СтрокаЭтап.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.Подписывающий");
	СтрокаЭтап.Идентификатор = Новый УникальныйИдентификатор();
	СтрокаЭтап.РазрешеноДобавлять = МожноТолькоДобавлятьУчастников Или МожноДобавлятьУчастников;
	ДействияКлиент.ЗаполнитьДоступностьПеремещенияЭтаповУчастников(СтрокиЭтапов);
	ЕстьЭтапы = Истина;
	Элементы.Участники.ТекущаяСтрока = СтрокаЭтап.ПолучитьИдентификатор();
	
	ОбновитьПредставленияВДеревеУчастников(Участники);
	
КонецПроцедуры

&НаКлиенте
Процедура Защищенный(Команда)
	
	ДействияКлиент.Защищенный(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРазныеСроки(Команда)
	
	РазныеСроки = Не РазныеСроки;
	Элементы.УчастникиРазныеСроки.Пометка = РазныеСроки;
	ДействияКлиент.УстановитьОдинаковыйСрокРекурсивно(Участники.ПолучитьЭлементы(), ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Готово(Команда)
	
	ДействияКлиент.ГотовоИзКарточкиДействия(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьДиалог(Команда)
	
	Закрыть(КодВозвратаДиалога.ОК);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть(КодВозвратаДиалога.Отмена);
	
КонецПроцедуры

&НаКлиенте
Процедура НаправитьНовымУчастникам(Команда)
	
	ИсполнениеДействияСНовымиУчастниками = Истина;
	
	ТолькоПросмотр = Ложь;
	Элементы.ЗаписатьИЗакрыть.Видимость = Истина;
	Элементы.ЗаписатьИЗакрыть.КнопкаПоУмолчанию = Истина;
	УстановитьДоступностьИзмененияУчастников();
	УстановитьДоступностьЭлементовФормы();
	
	// Сразу добавим новую строку
	Для Каждого Этап Из Участники.ПолучитьЭлементы() Цикл
		
		Если Этап.Функция <> ПредопределенноеЗначение(
			"Перечисление.ФункцииУчастниковПодписания.Подписывающий")
			
			Или Этап.Недоступно Тогда
			
			Продолжить;
		КонецЕсли; 	
				
		СтрокаУчастника = Этап.ПолучитьЭлементы().Добавить();
		СтрокаУчастника.ПредставлениеСтроки = ДействияКлиентСервер.ПредставлениеУчастника(
			ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка"));
		СтрокаУчастника.Функция = Этап.Функция;
			
		Элементы.Участники.ТекущаяСтрока = СтрокаУчастника.ПолучитьИдентификатор();
		
		Прервать;
	КонецЦикла;
		
	Элементы.НаправитьНовымУчастникам.Видимость = Ложь;
	
	ПоказатьПредупреждение(,
		НСтр("ru = 'Результаты новых участников не повлияют на результат действия и маршрут обработки, т.к. подписание уже пройдено.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗадержку(Команда)
	
	ДействияКлиент.ОчиститьЗадержку(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеВыполненоВнеПрограммы(Команда)
	
	ДействияКлиент.ВводРезультатаВыполненияВнеПрограммыИзФормыДействия(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ИзменениеДействияРазрешено()
	
	ПредметДействия = Неопределено;
	Если ЗначениеЗаполнено(Объект.Предмет) Тогда
		ПредметДействия = Объект.Предмет
	ИначеЕсли Параметры.Свойство("Предмет") Тогда
		ПредметДействия = Параметры.Предмет;
	КонецЕсли;
	
	Возврат ДействияСервер.ИзменениеДействияРазрешено(Объект.Ссылка, ПредметДействия);
	
КонецФункции

// Заполняет представление сроков в карточке действия.
//
&НаКлиенте
Процедура ЗаполнитьПредставлениеСроков() Экспорт
	
	ЭтапыУчастников = Участники.ПолучитьЭлементы();
	
	Для Каждого ЭтапУчастников Из ЭтапыУчастников Цикл
		
		Если ЭтапУчастников.СрокОбщий Тогда
			ЭтапУчастников.СрокПредставление = 
				СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
					ЭтапУчастников.Срок,
					ЭтапУчастников.СрокДни,
					ЭтапУчастников.СрокЧасы,
					ЭтапУчастников.СрокМинуты,
					ИспользоватьДатуИВремяВСрокахЗадач,
					ЭтапУчастников.ВариантУстановкиСрока);
		Иначе
			ЭтапУчастников.СрокПредставление = "";
		КонецЕсли;
		
		УчастникиЭтапа = ЭтапУчастников.ПолучитьЭлементы();
		
		Для Каждого УчастникЭтапа Из УчастникиЭтапа Цикл
			
			УчастникЭтапа.СрокПредставление = 
				СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
					УчастникЭтапа.Срок,
					УчастникЭтапа.СрокДни,
					УчастникЭтапа.СрокЧасы,
					УчастникЭтапа.СрокМинуты,
					ИспользоватьДатуИВремяВСрокахЗадач,
					УчастникЭтапа.ВариантУстановкиСрока);
			
			// второй уровень
			УчастникиЭтапаВторойУровень = УчастникЭтапа.ПолучитьЭлементы();
			
			Для Каждого УчастникЭтапа2 Из УчастникиЭтапаВторойУровень Цикл
				
				УчастникЭтапа2.СрокПредставление = 
					СрокиИсполненияПроцессовКлиентСервер.ПредставлениеСрокаИсполнения(
						УчастникЭтапа2.Срок,
						УчастникЭтапа2.СрокДни,
						УчастникЭтапа2.СрокЧасы,
						УчастникЭтапа2.СрокМинуты,
						ИспользоватьДатуИВремяВСрокахЗадач,
						УчастникЭтапа2.ВариантУстановкиСрока);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьУникальностьЭтапов(Отказ)
	
	Этапы = Новый Соответствие;
	Для Каждого Элемент1 Из Участники.ПолучитьЭлементы() Цикл
		Если ЗначениеЗаполнено(Элемент1.НаименованиеЭтапа)
			И Этапы.Получить(ВРег(Элемент1.НаименованиеЭтапа)) <> Неопределено Тогда
			Отказ = Истина;
			ПоказатьПредупреждение(, СтрШаблон(
				НСтр("ru = 'Повторяется этап ""%1""'"),
					Элемент1.НаименованиеЭтапа));
			Возврат;
		КонецЕсли;
		Этапы.Вставить(ВРег(Элемент1.НаименованиеЭтапа), Истина);
	КонецЦикла;
	
КонецПроцедуры

// Признак недоступности строки, переопределяемый для данного вида действия участника.
// Вызывается для строк с участниками, т.е. "нижнего" уровня дерева.
// 
// Параметры:
//  СтрокаДерева - ДанныеФормыЭлементДерева - Строка дерева "Участники".
//  СтрокаРодитель - Неопределено, ДанныеФормыЭлементДерева - Строка родитель строки дерева.
// 
// Возвращаемое значение:
//  Булево - Признак, что строка должна быть недоступна.
&НаКлиенте
Функция СтрокаУчастникаНедоступна(СтрокаДерева, СтрокаРодитель) Экспорт
	
	РодительНедоступен = Не ТолькоПросмотр;
	Если СтрокаРодитель <> Неопределено Тогда
		РодительНедоступен = СтрокаРодитель.Недоступно;
	КонецЕсли;
	
	Возврат СтрокаДерева.Недоступно
		Или СтрокаДерева.ЭтоДочернийУчастник 
		Или (РодительНедоступен И Не СтрокаДерева.РазрешеноДобавлять);
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы() Экспорт
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если ТекущийРодитель = Неопределено Тогда
		ЭлементыРодителя = Участники.ПолучитьЭлементы();
		РодительНедоступен = Не ТолькоПросмотр;
	Иначе
		ЭлементыРодителя = ТекущийРодитель.ПолучитьЭлементы();
		РодительНедоступен = ТекущийРодитель.Недоступно;
	КонецЕсли;
	Индекс = ЭлементыРодителя.Индекс(ТекущиеДанные);
	ЭтоПервыйЭлемент = (Индекс = 0);
	ЭтоПоследнийЭлемент = (Индекс = ЭлементыРодителя.Количество() - 1);
	
	ПредыдущийДоступен = Ложь;
	Если Не ЭтоПервыйЭлемент Тогда
		ПредыдущийЭлемент = ЭлементыРодителя.Получить(Индекс - 1);
		ПредыдущийДоступен = Не ПредыдущийЭлемент.Недоступно;
	КонецЕсли;
	
	СледующийДоступен = Ложь;
	Если Не ЭтоПоследнийЭлемент Тогда
		СледующийЭлемент = ЭлементыРодителя.Получить(Индекс + 1);
		СледующийДоступен = Не СледующийЭлемент.Недоступно;
	КонецЕсли;
	
	Если ТекущиеДанные.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.ОбрабатывающийРезультат") Тогда
		ТолькоПросмотрСтроки = ТекущиеДанные.ЭтоЭтап Или ТекущиеДанные.Недоступно;
		Элементы.ПредставлениеСтроки.ТолькоПросмотр = ТолькоПросмотрСтроки;
		Элементы.ПредставлениеСтроки.КнопкаВыбора = Истина;
		Элементы.СрокПредставление.ТолькоПросмотр = ТолькоПросмотрСтроки;
		Элементы.ЕстьОсобоеНаименованиеОписание.ТолькоПросмотр = ТолькоПросмотрСтроки;
		Элементы.Описание.ТолькоПросмотр = ТолькоПросмотрСтроки;
		
		Элементы.Подобрать.Доступность = Ложь;
		Элементы.Добавить.Доступность = Ложь;
		Элементы.ПереместитьВверх.Доступность = Ложь;
		Элементы.ПереместитьВниз.Доступность = Ложь;
		Элементы.Удалить.Доступность = Не ТолькоПросмотрСтроки;
		Элементы.Порядок.ТолькоПросмотр = Истина;
		
	ИначеЕсли ТекущиеДанные.ЭтоЭтап Тогда
		
		Элементы.ПредставлениеСтроки.ТолькоПросмотр = ТекущиеДанные.Недоступно
			Или ИсполнениеДействияСНовымиУчастниками;
		
		Элементы.ПредставлениеСтроки.КнопкаВыбора = Ложь;	
		Элементы.СрокПредставление.ТолькоПросмотр = Истина;
		
		Элементы.ЕстьОсобоеНаименованиеОписание.ТолькоПросмотр = Истина;
		Элементы.Описание.ТолькоПросмотр = Истина;
		
		Элементы.Подобрать.Доступность = Не ТекущиеДанные.Недоступно Или ТекущиеДанные.РазрешеноДобавлять;
		Элементы.Добавить.Доступность = Не ТекущиеДанные.Недоступно Или ТекущиеДанные.РазрешеноДобавлять;
		
		Элементы.ПереместитьВверх.Доступность = Не ЭтоПервыйЭлемент
			И Не ИсполнениеДействияСНовымиУчастниками
			И ТекущиеДанные.МожноПеремещатьВверх;
		
		Элементы.ПереместитьВниз.Доступность = Не ЭтоПоследнийЭлемент
			И Не ИсполнениеДействияСНовымиУчастниками
			И ТекущиеДанные.МожноПеремещатьВниз;
		
		Элементы.Удалить.Доступность = Не ТекущиеДанные.Недоступно
			И (Не ЗначениеЗаполнено(Объект.НастройкаДействия) Или Не ТекущиеДанные.ИзНастройки)
			И Не ИсполнениеДействияСНовымиУчастниками;
		
		Элементы.Порядок.ТолькоПросмотр = 
			Объект.СпособПодписания = ПредопределенноеЗначение("Перечисление.СпособыПодписанияПредметаДействия.НаБумаге")
			Или ТекущиеДанные.Недоступно
			Или ИсполнениеДействияСНовымиУчастниками
			Или ЗначениеЗаполнено(ТекущиеДанные.Состояние);
		
		Элементы.УчастникиДобавитьОбеспечивающегоПодписание.Доступность = Ложь;
		
	ИначеЕсли ТекущиеДанные.ЭтоДочернийУчастник Тогда // обеспечивающий подписание

		Элементы.СрокПредставление.ТолькоПросмотр = Истина;
		
		Элементы.ЕстьОсобоеНаименованиеОписание.ТолькоПросмотр = Истина;
		Элементы.Описание.ТолькоПросмотр = Истина;
		
		Элементы.Подобрать.Доступность = Ложь;
		Элементы.Добавить.Доступность = Ложь;
		Элементы.ПереместитьВверх.Доступность = Ложь;
		Элементы.ПереместитьВниз.Доступность = Ложь;
		Элементы.Порядок.ТолькоПросмотр = Истина;
		
		Элементы.ПредставлениеСтроки.КнопкаВыбора = Истина;
		
		Элементы.УчастникиДобавитьОбеспечивающегоПодписание.Доступность = Ложь;
		
	Иначе // Подписывающий
		ТолькоПросмотрСтроки = СтрокаУчастникаНедоступна(ТекущиеДанные, ТекущийРодитель);
		Элементы.ПредставлениеСтроки.ТолькоПросмотр = ТолькоПросмотрСтроки;
		Элементы.СрокПредставление.ТолькоПросмотр = ТолькоПросмотрСтроки;
		Элементы.ЕстьОсобоеНаименованиеОписание.ТолькоПросмотр = ТолькоПросмотрСтроки;
		Элементы.Описание.ТолькоПросмотр = ТолькоПросмотрСтроки;
		
		Элементы.Подобрать.Доступность = Не РодительНедоступен Или ТекущиеДанные.РазрешеноДобавлять;
		Элементы.Добавить.Доступность = Не РодительНедоступен Или ТекущиеДанные.РазрешеноДобавлять;
		
		Элементы.УчастникиДобавитьОбеспечивающегоПодписание.Доступность = Не ТолькоПросмотрСтроки
			Или ТекущиеДанные.РазрешеноДобавлять;
		
		Элементы.ПереместитьВверх.Доступность = Не ЭтоПервыйЭлемент
			И Не ТолькоПросмотрСтроки
			И ПредыдущийДоступен
			И ТекущиеДанные.МожноПеремещатьВверх;
				
		Элементы.ПереместитьВниз.Доступность = Не ЭтоПоследнийЭлемент
			И Не ТолькоПросмотрСтроки
			И СледующийДоступен
			И ТекущиеДанные.МожноПеремещатьВниз;
		
		Элементы.Удалить.Доступность = Не ТолькоПросмотрСтроки;
		Элементы.Порядок.ТолькоПросмотр = Истина;
		
		Элементы.ПредставлениеСтроки.КнопкаВыбора = Истина;
		
	КонецЕсли;
		
	Элементы.КонтекстДобавить.Доступность = Элементы.Добавить.Доступность;
	Элементы.КонтекстУдалить.Доступность = Элементы.Удалить.Доступность;
	Элементы.УчастникиКонтекстноеМенюДобавитьОбеспечивающегоПодписание.Доступность = 
		Элементы.УчастникиДобавитьОбеспечивающегоПодписание.Доступность;
	
	Элементы.УчастникиДобавитьЭтап.Доступность = Не ЗначениеЗаполнено(Объект.НастройкаДействия)
		И Не ИсполнениеДействияСНовымиУчастниками Или МожноТолькоДобавлятьУчастников Или МожноДобавлятьУчастников;
	
	Элементы.КонтекстДобавитьЭтап.Доступность = Элементы.УчастникиДобавитьЭтап.Доступность;
	
	ДействияКлиент.УстановитьТолькоПросмотрИУдалениеУчастникаПоЗащищенности(ЭтотОбъект);
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции_Участники

// Заполняет дерево участников по объекту.
//
&НаСервере
Процедура ОбновитьДеревоУчастниковПоОбъекту()
	
	ЭтапыУчастников = Участники.ПолучитьЭлементы();
	ЭтапыУчастников.Очистить();
	
	Если Объект.Этапы.Количество() Тогда
		// Добавляем все этапы в таблицу участников.
		Для Каждого СтрокаЭтапа Из Объект.Этапы Цикл
			
			ЭтапУчастников = ЭтапыУчастников.Добавить();
			ЗаполнитьЗначенияСвойств(ЭтапУчастников, СтрокаЭтапа);
			ЭтапУчастников.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.Подписывающий");
			ЭтапУчастников.ЭтоЭтап = Истина;
			ЭтапУчастников.Порядок = СтрокаЭтапа.ПорядокВыполненияУчастниками;
		КонецЦикла;
	Иначе
		ЭтапУчастников = ЭтапыУчастников.Добавить();
		ЭтапУчастников.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.Подписывающий");
		ЭтапУчастников.НаименованиеЭтапа = НСтр("ru = 'Подписать'");
		ЭтапУчастников.ЭтоЭтап = Истина;
		ЭтапУчастников.Идентификатор = ИдентификаторЭтапаПодписать;
		
		Если Объект.СпособПодписания = Перечисления.СпособыПодписанияПредметаДействия.НаБумаге Тогда
			
			ЭтапУчастников.Порядок = Перечисления.ПорядокВыполненияЭтапаДействия.Последовательно;
			
		ИначеЕсли Объект.СпособПодписания = Перечисления.СпособыПодписанияПредметаДействия.ПЭП
			Или Объект.СпособПодписания = Перечисления.СпособыПодписанияПредметаДействия.УЭП Тогда
			
			Если ЗначениеЗаполнено(Объект.ПорядокВыполненияУчастниками) Тогда
				ЭтапУчастников.Порядок = Объект.ПорядокВыполненияУчастниками;
			Иначе	
				ЭтапУчастников.Порядок = Перечисления.ПорядокВыполненияЭтапаДействия.Параллельно;
			КонецЕсли;
			
		Иначе // пусто
		
			Если ФормаПредмета = Перечисления.ВариантыФормДокументов.Бумажная Тогда
				
				ЭтапУчастников.Порядок = Перечисления.ПорядокВыполненияЭтапаДействия.Последовательно;
				
			ИначеЕсли ЗначениеЗаполнено(Объект.ПорядокВыполненияУчастниками) Тогда
				ЭтапУчастников.Порядок = Объект.ПорядокВыполненияУчастниками;
			Иначе
				ЭтапУчастников.Порядок = Перечисления.ПорядокВыполненияЭтапаДействия.Параллельно;
			КонецЕсли;	
		
		КонецЕсли;			
	КонецЕсли;
	
	// Добавляем ОбрабатывающийРезультат
	ЭтапУчастников = ЭтапыУчастников.Добавить();
	ЭтапУчастников.Функция = ПредопределенноеЗначение(
		"Перечисление.ФункцииУчастниковПодписания.ОбрабатывающийРезультат");		
	ЭтапУчастников.Порядок = Перечисления.ПорядокВыполненияЭтапаДействия.Последовательно;
	ЭтапУчастников.НаименованиеЭтапа = НСтр("ru = 'Ознакомиться с результатом подписания'");
	ЭтапУчастников.ЭтоЭтап = Истина;
	ЭтапУчастников.Идентификатор = ИдентификаторОбрабатывающегоРезультат;
	
	УчастникиЗаданы = Объект.Участники.Количество(); 
	
	// Добавляем все этапы в таблицу участников.
	Для Каждого СтрокаЭтапа Из ЭтапыУчастников Цикл
		УчастникиЭтапа = СтрокаЭтапа.ПолучитьЭлементы();
		
		Если СтрокаЭтапа.Идентификатор <> ИдентификаторОбрабатывающегоРезультат Тогда
			
			Если УчастникиЗаданы Тогда
			
				Для Каждого Участник Из Объект.Участники Цикл
					
					Если (ЗначениеЗаполнено(Участник.ИдентификаторЭтапа) 
							И Участник.ИдентификаторЭтапа <> СтрокаЭтапа.Идентификатор)
						Или (Не ЗначениеЗаполнено(Участник.ИдентификаторЭтапа) 
							И Участник.ФункцияУчастника <> СтрокаЭтапа.Функция) Тогда
						Продолжить;
					КонецЕсли;
					
					// На первом уровне выводим только тех, кто никому не подчинен.						
					Если ЗначениеЗаполнено(Участник.ВышестоящийУчастник) Тогда
						Продолжить;
					КонецЕсли;
					
					УчастникЭтапа = УчастникиЭтапа.Добавить();
					ЗаполнитьЗначенияСвойств(УчастникЭтапа, Участник);
					УчастникЭтапа.Функция = Участник.ФункцияУчастника;
					УчастникЭтапа.УсловиеПредставление = Строка(Участник.Условие);
					УчастникЭтапа.ЕстьОсобоеНаименованиеОписание = ЗначениеЗаполнено(УчастникЭтапа.Описание);
						
					// Второй уровень.	
					ПодчиненныеУчастники = УчастникЭтапа.ПолучитьЭлементы();
					Для Каждого УчастникПодчиненный Из Объект.Участники Цикл
						
						Если УчастникПодчиненный.ВышестоящийУчастник = Участник.Идентификатор Тогда
						
							ЭлементУчастникДочерний = ПодчиненныеУчастники.Добавить();
							ЗаполнитьЗначенияСвойств(ЭлементУчастникДочерний, УчастникПодчиненный);
							ЭлементУчастникДочерний.Участник = УчастникПодчиненный.Участник;
							ЭлементУчастникДочерний.Функция = УчастникПодчиненный.ФункцияУчастника;
							ЭлементУчастникДочерний.ЭтоДочернийУчастник = Истина;
							
							ЭлементУчастникДочерний.ЕстьОсобоеНаименованиеОписание = ЗначениеЗаполнено(ЭлементУчастникДочерний.Описание);
								
						КонецЕсли;	
						
					КонецЦикла;
						
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе // ознакомление
			ДействиеОбъект = РеквизитФормыВЗначение("Объект");
			УчастникОбрабатывающийРезультат = ДействиеОбъект.УчастникОбрабатывающийРезультат();
			Если ЗначениеЗаполнено(УчастникОбрабатывающийРезультат) Тогда 
				Для Каждого Участник Из УчастникОбрабатывающийРезультат Цикл
					УчастникЭтапа = УчастникиЭтапа.Добавить();
					ЗаполнитьЗначенияСвойств(УчастникЭтапа, Участник);
					УчастникЭтапа.Функция = Участник.ФункцияУчастника;
					УчастникЭтапа.УсловиеПредставление = Строка(Участник.Условие);
				КонецЦикла;
			Иначе 
				УчастникЭтапа = УчастникиЭтапа.Добавить();
				УчастникЭтапа.Участник = Объект.Автор;
				УчастникЭтапа.Функция = СтрокаЭтапа.Функция;
				УчастникЭтапа.Идентификатор = СтрокаЭтапа.Идентификатор;
			КонецЕсли;
		КонецЕсли;
		
		Если УчастникиЭтапа.Количество() = 0 Тогда
			УчастникЭтапа = УчастникиЭтапа.Добавить();
			УчастникЭтапа.Идентификатор = СтрокаЭтапа.Идентификатор;
			УчастникЭтапа.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
			УчастникЭтапа.Функция = СтрокаЭтапа.Функция;			
		КонецЕсли;
	КонецЦикла;
	
	ЭлементыЭтапы = Участники.ПолучитьЭлементы();
	ЕстьЭтапы = Ложь;
	Для Каждого ЭлементЭтап Из ЭлементыЭтапы Цикл
		Если ЭлементЭтап.Идентификатор = ИдентификаторЭтапаПодписать 
			Или ЭлементЭтап.Идентификатор = ИдентификаторОбрабатывающегоРезультат Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьЭтапы = Истина;
		Прервать;
	КонецЦикла;
	
	ОбновитьПредставленияВДеревеУчастников(Участники);
	Команды.ПереключитьРазныеСроки.Подсказка = ДействияСервер.ПодсказкаКнопкиРазныеСроки(Ложь, ЕстьЭтапы);
	
	ДействияСервер.УстановитьПризнакИзНастройкиДляЭтапов(ЭтотОбъект);
	ДействияСервер.УстановитьЗащищенностьУчастниковВНастройке(ЭтотОбъект);
	
КонецПроцедуры

// Заполняет объект по дереву участников.
//
&НаКлиенте
Процедура ОбновитьОбъектПоДеревуУчастников(Отказ)
	
	СсылкаНеуказанногоПользователя = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	
	Объект.Участники.Очистить();
	Объект.Этапы.Очистить();
	ЕстьЭтапы = Ложь; ЕстьИсполняющиеУчастники = Ложь; ЕстьОбрабатывающийРезультат = Ложь;
	// Этапы пишем, только есть введенные руками
	ЭлементыЭтапы = Участники.ПолучитьЭлементы();
	Для Каждого ЭлементЭтап Из ЭлементыЭтапы Цикл
		Если ЭлементЭтап.Идентификатор = ИдентификаторЭтапаПодписать Тогда
			Объект.ПорядокВыполненияУчастниками = ЭлементЭтап.Порядок;
		КонецЕсли;
		
		Если ЭлементЭтап.Идентификатор = ИдентификаторЭтапаПодписать 
			Или ЭлементЭтап.Идентификатор = ИдентификаторОбрабатывающегоРезультат Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьЭтапы = Истина;
	КонецЦикла;
	
	Для Каждого ЭлементЭтап Из ЭлементыЭтапы Цикл
		
		ИдентификаторЭтапа = Неопределено;
		
		Если ЕстьЭтапы 
			И ЭлементЭтап.Идентификатор <> ИдентификаторОбрабатывающегоРезультат Тогда
			// Для стандартного этапа меняем идентификатор, если заданы другие
			Если ЭлементЭтап.Идентификатор = ИдентификаторЭтапаПодписать Тогда 
				ЭлементЭтап.Идентификатор = Новый УникальныйИдентификатор(); 
			КонецЕсли;
			
			Этап = Объект.Этапы.Добавить();
			ЗаполнитьЗначенияСвойств(Этап, ЭлементЭтап);
			ИдентификаторЭтапа = ЭлементЭтап.Идентификатор;
			Этап.ПорядокВыполненияУчастниками = ЭлементЭтап.Порядок;
		КонецЕсли;
		
		ЭлементыУчастники = ЭлементЭтап.ПолучитьЭлементы();
		
		Для Каждого ЭлементУчастник Из ЭлементыУчастники Цикл
			
			Если Не ЗначениеЗаполнено(ЭлементУчастник.Участник) 
				Или ЭлементУчастник.Участник = СсылкаНеуказанногоПользователя Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементЭтап.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.Подписывающий") Тогда
				
				Отбор = Новый Структура("Участник, Описание", 
					ЭлементУчастник.Участник, ЭлементУчастник.Описание);
				
				Если ЭлементУчастник.Защищенный Тогда
					// Все дубли должны быть отмечены как защищенные. Найдем неотмеченных.
					Отбор.Вставить("Защищенный", Ложь);
				КонецЕсли;
				НайденныеСотрудники = Объект.Участники.НайтиСтроки(Отбор);
				Если НайденныеСотрудники.Количество() > 0 Тогда
					Отказ = Истина;
					ПоказатьПредупреждение(, СтрШаблон(
						НСтр("ru = 'В этапах повторяется подписывающий: %1. 
						|Удалите дубли, укажите особое описание или установите подписывающему признак ""Защищенный""'"),
							ЭлементУчастник.Участник));
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			Участник = Объект.Участники.Добавить();
			ЗаполнитьЗначенияСвойств(Участник, ЭлементУчастник);
			Если ЗначениеЗаполнено(ИдентификаторЭтапа) Тогда
				Участник.ИдентификаторЭтапа = ИдентификаторЭтапа;
			КонецЕсли;
			Участник.ФункцияУчастника = ЭлементУчастник.Функция;
			
			Если Не ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(ЭлементЭтап.Функция) Тогда 
				ЕстьИсполняющиеУчастники = Истина;
			Иначе 
				ЕстьОбрабатывающийРезультат = Истина;
			КонецЕсли;
			
			// второй уровень
			ЭлементыУчастникиДочерние = ЭлементУчастник.ПолучитьЭлементы();
			
			Для Каждого ЭлементУчастникДочерний Из ЭлементыУчастникиДочерние Цикл
				
				Если Не ЗначениеЗаполнено(ЭлементУчастникДочерний.Участник) 
					Или ЭлементУчастникДочерний.Участник = СсылкаНеуказанногоПользователя Тогда
					Продолжить;
				КонецЕсли;

				Отбор = Новый Структура("Участник, ФункцияУчастника, Описание", 
					ЭлементУчастникДочерний.Участник, ЭлементЭтап.Функция,
					ЭлементУчастникДочерний.Описание);
				Если ЭлементУчастникДочерний.Защищенный Тогда
				// Все дубли должны быть отмечены как защищенные. Найдем неотмеченных.
					Отбор.Вставить("Защищенный", Ложь);
				КонецЕсли;

				НайденныеСотрудники = Объект.Участники.НайтиСтроки(Отбор);
				Если НайденныеСотрудники.Количество() > 0 Тогда
					Отказ = Истина;
					ПоказатьПредупреждение(, СтрШаблон(
						НСтр("ru = 'В этапе ""%1"" повторяется участник: %2. 
						|Удалите дубли, укажите особое описание или установите участнику признак ""Защищенный""'"),
							ЭлементЭтап.НаименованиеЭтапа ,ЭлементУчастникДочерний.Участник));
					Возврат;
				КонецЕсли;
				
				УчастникДочерний = Объект.Участники.Добавить();
				ЗаполнитьЗначенияСвойств(УчастникДочерний, ЭлементУчастникДочерний);
				УчастникДочерний.ФункцияУчастника = ЭлементУчастникДочерний.Функция;
				УчастникДочерний.ВышестоящийУчастник = Участник.Идентификатор; // берем от родителя (в ТЧ)
				
				УчастникДочерний.ИдентификаторЭтапа = Участник.ИдентификаторЭтапа; // берем от родителя (в ТЧ)
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Если заполнен только "Обрабатывающий результат", то не сохраняем его
	Если Не ЕстьИсполняющиеУчастники Тогда 
		Объект.Участники.Очистить();
		Объект.Этапы.Очистить();
	ИначеЕсли Не ЕстьОбрабатывающийРезультат Тогда 
		Отказ = Истина;
		ПоказатьПредупреждение(,
			НСтр("ru = 'Отсутствует участник ""ознакомления с результатом подписания""'"));
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Разворачивает дерево участников.
//
&НаКлиенте
Процедура РазвернутьДеревоУчастников()
	
	Для Каждого Этап Из Участники.ПолучитьЭлементы() Цикл
		Элементы.Участники.Развернуть(Этап.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

// Обновляет представления строк в дереве участников.
//
// Параметры:
//  Участники - ДанныеФормыДерево - дерево с участниками.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставленияВДеревеУчастников(Участники)
	
	ЭтапыУчастников = Участники.ПолучитьЭлементы();
	
	Для ИндексЭтапа = 0 По ЭтапыУчастников.Количество() - 1 Цикл
		
		СтрокаЭтапа = ЭтапыУчастников.Получить(ИндексЭтапа);
		
		СтрокаЭтапа.ПрефиксСтроки = "";
		
		СтрокаЭтапа.ПредставлениеСтроки = СтрокаЭтапа.НаименованиеЭтапа;
		
		УчастникиЭтапа = СтрокаЭтапа.ПолучитьЭлементы();
		
		Для ИндексУчастника = 0 По УчастникиЭтапа.Количество() - 1 Цикл
			СтрокаУчастника = УчастникиЭтапа[ИндексУчастника];
			
			СтрокаУчастника.ПрефиксСтроки = "";
			СтрокаУчастника.ПредставлениеСтроки = ДействияКлиентСервер.ПредставлениеУчастника(СтрокаУчастника.Участник);
			
			Если Не ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
				СтрокаУчастника.ПредставлениеСтроки = ДействияКлиентСервер.ПредставлениеУчастника(
					ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка"));
			КонецЕсли;	
			
			// второй уровень
			УчастникиЭтапа2 = СтрокаУчастника.ПолучитьЭлементы();
	
			Для ИндексУчастника2 = 0 По УчастникиЭтапа2.Количество() - 1 Цикл
				СтрокаУчастника = УчастникиЭтапа2[ИндексУчастника2];
	
				СтрокаУчастника.ПрефиксСтроки = "";
				СтрокаУчастника.ПредставлениеСтроки = ДействияКлиентСервер.ПредставлениеУчастника(
					СтрокаУчастника.Участник);
				
				Если Не ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
					СтрокаУчастника.ПредставлениеСтроки = ДействияКлиентСервер.ПредставлениеУчастника(
						ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка"));
				КонецЕсли;	
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьИзмененияУчастников()
	
	Если ТолькоПросмотр = Истина Тогда
		Возврат;
	КонецЕсли;
	
	РазрешениеОбщее = Неопределено;
	НайденныеРазрешения = Разрешения.НайтиСтроки(
		Новый Структура("ИдентификаторЭтапа", 
		ДействияСервер.ПредопределенныйИдентификаторУчастника("Пустой")));
	Если НайденныеРазрешения.Количество() > 0 Тогда
		РазрешениеОбщее = НайденныеРазрешения[0].Разрешение;
	КонецЕсли;
	
	Если РазрешениеОбщее = Перечисления.ВариантыДоступностиИзмененияДействий.Запрещено
		Или РазрешениеОбщее = Перечисления.ВариантыДоступностиИзмененияДействий.РазрешеноДобавлять Тогда
		
		Элементы.Автор.Доступность = Ложь;
		Элементы.СпособПодписания.Доступность = Ложь;
		Элементы.ГруппаОписаниеОтложенногоВыполнения.Доступность = Ложь;
		
	КонецЕсли;
	
	Если РазрешениеОбщее = Перечисления.ВариантыДоступностиИзмененияДействий.РазрешеноДобавлять Тогда
		МожноТолькоДобавлятьУчастников = Истина;
	КонецЕсли;
	
	Если РазрешениеОбщее = Перечисления.ВариантыДоступностиИзмененияДействий.Разрешено Тогда
		МожноДобавлятьУчастников = Истина;
	КонецЕсли;
	
	ЭтапыУчастников = Участники.ПолучитьЭлементы();
	Для Каждого ЭтапУчастников Из ЭтапыУчастников Цикл
		РазрешениеЭтапа = РазрешениеОбщее;
		Если ЭтапУчастников.Идентификатор <> ИдентификаторЭтапаПодписать Тогда
			НайденныеРазрешения = Разрешения.НайтиСтроки(
				Новый Структура("ИдентификаторЭтапа", ЭтапУчастников.Идентификатор));
			Если НайденныеРазрешения.Количество() > 0 Тогда
				РазрешениеЭтапа = НайденныеРазрешения[0].Разрешение;
			КонецЕсли;
		КонецЕсли;
		
		ЭтапУчастников.Недоступно =
			РазрешениеЭтапа = Перечисления.ВариантыДоступностиИзмененияДействий.Запрещено
			Или РазрешениеЭтапа = Перечисления.ВариантыДоступностиИзмененияДействий.РазрешеноДобавлять
			// Завершенные этапы запрещаем редактировать
			Или (ЭтапУчастников.Состояние = Перечисления.СостоянияВыполненияДействий.Завершено
				И Не ИсполнениеДействияСНовымиУчастниками);
		ЭтапУчастников.РазрешеноДобавлять =
			РазрешениеЭтапа = Перечисления.ВариантыДоступностиИзмененияДействий.РазрешеноДобавлять;
		УчастникиЭтапа = ЭтапУчастников.ПолучитьЭлементы();
		Для Каждого УчастникЭтапа Из УчастникиЭтапа Цикл
			
			УчастникЭтапа.Недоступно =
				ЭтапУчастников.Недоступно И ЗначениеЗаполнено(УчастникЭтапа.Участник)
				Или УчастникЭтапа.Состояние = Перечисления.СостоянияВыполненияДействий.Завершено;
			
			УчастникЭтапа.РазрешеноДобавлять = ЭтапУчастников.РазрешеноДобавлять;
			
			ОбеспечивающиеПодписание = УчастникЭтапа.ПолучитьЭлементы();
			Для Каждого ОбеспечивающийПодписание Из ОбеспечивающиеПодписание Цикл
				ОбеспечивающийПодписание.Недоступно = ЭтапУчастников.Недоступно Или УчастникЭтапа.РазрешеноДобавлять;
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОбеспечивающегоПодписание(Команда)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЭтап Тогда
		Возврат;
	КонецЕсли;
		
	Если ТекущиеДанные.ЭтоДочернийУчастник Тогда
		Возврат;
	КонецЕсли;
		
	ТекущиеДанныеРодителя = ТекущиеДанные.ПолучитьРодителя();
	Если ТекущиеДанныеРодителя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанныеРодителя.Функция = ПредопределенноеЗначение(
		"Перечисление.ФункцииУчастниковПодписания.ОбрабатывающийРезультат") Тогда
		ПоказатьПредупреждение(, 
			НСтр("ru = 'Добавление в этап обработки результата невозможно.'"));
		Возврат;
	КонецЕсли;
	
	СтрокиПодписывающего = ТекущиеДанные.ПолучитьЭлементы();
	Если СтрокиПодписывающего.Количество() <> 0 Тогда
		ПоказатьПредупреждение(, 
			НСтр("ru = 'У подписывающего может быть только один обеспечивающий подписание.'"));
		Возврат;
	КонецЕсли;	

	Модифицированность = Истина;
	
	СтрокаУчастника = СтрокиПодписывающего.Добавить();
	СтрокаУчастника.Идентификатор = Новый УникальныйИдентификатор;
	СтрокаУчастника.Функция = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковПодписания.ОбеспечивающийПодписание");
	СтрокаУчастника.ЭтоДочернийУчастник	= Истина;	
	СтрокаУчастника.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	СтрокаУчастника.ПредставлениеСтроки = ДействияКлиентСервер.ПредставлениеУчастника(СтрокаУчастника.Участник);

	СкопироватьДанныеКОбеспечивающемуПодписание(СтрокаУчастника, ТекущиеДанные);
	
	Если ТекущиеДанные.СрокОбщий Тогда
		ЗаполнитьЗначенияСвойств(СтрокаУчастника, ТекущиеДанные);
	КонецЕсли;
	
	Элементы.Участники.ТекущаяСтрока = СтрокаУчастника.ПолучитьИдентификатор();
	
	ЗаполнитьПредставлениеСроков();
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьДанныеКОбеспечивающемуПодписание(Куда, Откуда)
	
	Куда.ВариантУстановкиСрока = Откуда.ВариантУстановкиСрока;
	
	Куда.Описание = Откуда.Описание;
	Куда.ЕстьОсобоеНаименованиеОписание = Откуда.ЕстьОсобоеНаименованиеОписание;

	ВариантыУстановкиСрока = СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();

	Если Куда.ВариантУстановкиСрока = ВариантыУстановкиСрока.ТочныйСрок Тогда
		Куда.Срок 	= Откуда.Срок;
	Иначе
		Куда.СрокДни 	= Откуда.СрокДни;
		Куда.СрокЧасы 	= Откуда.СрокЧасы;
		Куда.СрокМинуты 	= Откуда.СрокМинуты;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСпособыПодписанияИзВидаПредмета()
	
	Если ТипЗнч(Объект.Предмет) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		
		ФормаПредмета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Предмет, 
			"ФормаДокумента");
			
		Если ФормаПредмета = Перечисления.ВариантыФормДокументов.Бумажная Тогда
			Элементы.СпособПодписания.РежимВыбораИзСписка = Истина;
			Элементы.СпособПодписания.СписокВыбора.Добавить(
				Перечисления.СпособыПодписанияПредметаДействия.НаБумаге);
			Если Объект.СпособПодписания <> Перечисления.СпособыПодписанияПредметаДействия.НаБумаге Тогда
				Объект.СпособПодписания = Перечисления.СпособыПодписанияПредметаДействия.НаБумаге;
			КонецЕсли;
						
		ИначеЕсли ФормаПредмета = Перечисления.ВариантыФормДокументов.Электронная Тогда
			Элементы.СпособПодписания.РежимВыбораИзСписка = Истина;
			Элементы.СпособПодписания.СписокВыбора.Добавить(
				Перечисления.СпособыПодписанияПредметаДействия.ПЭП);
			Если ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи") Тогда
				Элементы.СпособПодписания.СписокВыбора.Добавить(
					Перечисления.СпособыПодписанияПредметаДействия.УЭП);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Объект.СпособПодписания)
				Или Объект.СпособПодписания = Перечисления.СпособыПодписанияПредметаДействия.НаБумаге Тогда
				Объект.СпособПодписания = Перечисления.СпособыПодписанияПредметаДействия.ПЭП;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект.Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда
		
		Элементы.СпособПодписания.РежимВыбораИзСписка = Истина;
		Элементы.СпособПодписания.СписокВыбора.Добавить(
			Перечисления.СпособыПодписанияПредметаДействия.НаБумаге);
		Элементы.СпособПодписания.СписокВыбора.Добавить(
				Перечисления.СпособыПодписанияПредметаДействия.ПЭП);
		
		Если Не ЗначениеЗаполнено(Объект.СпособПодписания) Тогда
			Объект.СпособПодписания = Перечисления.СпособыПодписанияПредметаДействия.ПЭП;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.СпособПодписания <> Перечисления.СпособыПодписанияПредметаДействия.НаБумаге Тогда
		Элементы.УчастникиДобавитьОбеспечивающегоПодписание.Видимость = Ложь;
		Элементы.УчастникиКонтекстноеМенюДобавитьОбеспечивающегоПодписание.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьУчастников(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверкиДействительностиУчастников = 
		РаботаСУчастникамиКлиент.ПроверитьДействительностьУчастников(ЭтотОбъект);
	Если Не РезультатПроверкиДействительностиУчастников.ВсеДействительны Тогда
		
		Отказ = Истина;
		
		Обработчик = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиДействительностиУчастниковПродолжение",
			ЭтотОбъект);
		
		РаботаСУчастникамиКлиент.ОбработатьРезультатПроверкиДействительностиУчастников(
			РезультатПроверкиДействительностиУчастников,
			Обработчик);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработать результат проверки действительности участников продолжение.
// 
// Параметры:
//  Результат - Структура - результат проверки и выбор пользователя:
//   * РезультатПроверки - см. РаботаСУчастникамиВызовСервера.ПроверитьДействительностьУчастников
//   * ВариантОбработки - Число, КодВозвратаДиалога - 0 - заменить, 1 - оставить как есть,
//                                                    КодВозвратаДиалога.Отмена - отмена.
//  ДополнительныеПараметры - Произвольный
//
&НаКлиенте
Процедура ОбработатьРезультатПроверкиДействительностиУчастниковПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ВариантОбработки = Результат.ВариантОбработки;
	
	// Выбрана отмена.
	Если ВариантОбработки = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	// Хочет продолжить как есть.
	Если ВариантОбработки = 1 Тогда
		ЗаписатьЗакрытьБезПроверкиУчастников();
		Возврат;
	КонецЕсли;
	
	// Согласился заменить участников.
	Если ВариантОбработки = 0 Тогда
		ОбработчикЗамены = Новый ОписаниеОповещения("УчастникиЗамена", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.ФормаЗаменыУчастников", Результат.РезультатПроверки, ЭтотОбъект,,,,
			ОбработчикЗамены);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЗакрытьБезПроверкиУчастников(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не Записать(Новый Структура("НеПроверятьУчастников", Истина)) Тогда
		Возврат;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиЗамена(Замены, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Замены = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаменитьУчастниковНаСервере(Замены);
	РазвернутьДеревоУчастников();
	
КонецПроцедуры

// Заменить участников на сервере.
// 
// Параметры:
//  Замены - Массив Из Структура:
//   * ВидУчастника - СправочникСсылка.ВидыУчастниковЗадач
//   * Участник - СправочникСсылка.Сотрудники
//   * УчастникЗаменитьНа - СправочникСсылка.Сотрудники
&НаСервере
Процедура ЗаменитьУчастниковНаСервере(Замены)
	
	БылиЗамены = Ложь;
	
	Для Каждого Замена Из Замены Цикл
		
		КлючиСтруктурыОтбора = "ФункцияУчастника, Участник";
		СтруктураОтбора = Новый Структура(КлючиСтруктурыОтбора);
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Замена, КлючиСтруктурыОтбора);
		НайденныеСтрокиУчастников = Объект.Участники.НайтиСтроки(СтруктураОтбора);
		
		ОтбиратьПоНаименованиюЭтапа = ЗначениеЗаполнено(Замена.НаименованиеЭтапа);
		
		Для Каждого СтрокаУчастника Из НайденныеСтрокиУчастников Цикл
			
			Если ОтбиратьПоНаименованиюЭтапа И СтрокаУчастника.ИдентификаторЭтапа <> УникальныйИдентификаторПустой() Тогда
				
				СтрокиЭтапа = Объект.Этапы.НайтиСтроки(Новый Структура("Идентификатор", СтрокаУчастника.ИдентификаторЭтапа));
				Если Замена.НаименованиеЭтапа <> СтрокиЭтапа[0].НаименованиеЭтапа Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаУчастника.Участник = Замена.УчастникЗаменитьНа;
			БылиЗамены = Истина;
		КонецЦикла; 
		
	КонецЦикла;
	
	Если БылиЗамены Тогда
		
		Модифицированность = Истина;
		ОбновитьДеревоУчастниковПоОбъекту();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МоментРазыменованияУчастниковОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#КонецОбласти