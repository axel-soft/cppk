#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет все шаблоны для выполнения.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Шаблоны для выполнения:
//   * Шаблон - СправочникСсылка.ШаблоныТекстов
//   * Наименование - Строка
//   * РезультатДействия - СправочникСсылка.РезультатыДействийЗадач
// 
Функция ВсеШаблоныДляВыполнения() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШаблоныТекстов.Ссылка КАК Ссылка,
		|	ШаблоныТекстов.Наименование КАК Наименование,
		|	ШаблоныТекстов.РезультатДействия КАК РезультатДействия,
		|	ШаблоныТекстов.ОбщийШаблон КАК ОбщийШаблон,
		|	ШаблоныТекстов.Автор КАК Автор
		|ИЗ
		|	Справочник.ШаблоныТекстов КАК ШаблоныТекстов
		|ГДЕ
		|	ШаблоныТекстов.РезультатДействия <> ЗНАЧЕНИЕ(Справочник.РезультатыДействийЗадач.ПустаяСсылка)
		|	И ШаблоныТекстов.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование");
	
	ШаблоныДляВыполнения = Запрос.Выполнить().Выгрузить();
	
	КоличествоЭлементов = ШаблоныДляВыполнения.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		СтрокаТаблицы = ШаблоныДляВыполнения[КоличествоЭлементов - Индекс];
		
		Если СтрокаТаблицы.ОбщийШаблон Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоСотрудникТекущегоПользователя =
			Сотрудники.ЭтоСотрудникТекущегоПользователя(СтрокаТаблицы.Автор);
		Если ЭтоСотрудникТекущегоПользователя Тогда
			Продолжить;
		КонецЕсли;
		
		ШаблоныДляВыполнения.Удалить(СтрокаТаблицы);
		
	КонецЦикла;
	
	Возврат ШаблоныДляВыполнения;
	
КонецФункции

// Определяет шаблоны для выполнения по области применения.
// 
// Параметры:
//  ОбластьПрименения - ПеречислениеСсылка.ОбластиПримененияШаблоновТекстов.
//  ДоступныеРезультаты - Массив из СправочникСсылка.РезультатыДействийЗадач -
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Шаблоны для выполнения:
//   * Шаблон - СправочникСсылка.ШаблоныТекстов.
//   * Наименование - Строка.
//   * РезультатДействия - СправочникСсылка.РезультатыДействийЗадач.
// 
Функция ШаблоныДляВыполнения(ОбластьПрименения, ДоступныеРезультаты) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШаблоныТекстов.Ссылка КАК Ссылка,
		|	ШаблоныТекстов.Наименование КАК Наименование,
		|	ШаблоныТекстов.РезультатДействия КАК РезультатДействия,
		|	ШаблоныТекстов.ОбщийШаблон КАК ОбщийШаблон,
		|	ШаблоныТекстов.Автор КАК Автор
		|ИЗ
		|	Справочник.ШаблоныТекстов КАК ШаблоныТекстов
		|ГДЕ
		|	ШаблоныТекстов.ОбластьПрименения = &ОбластьПрименения
		|	И ШаблоныТекстов.РезультатДействия В (&ДоступныеРезультаты)
		|	И ШаблоныТекстов.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование");
	
	Запрос.УстановитьПараметр("ОбластьПрименения", ОбластьПрименения);
	Запрос.УстановитьПараметр("ДоступныеРезультаты", ДоступныеРезультаты);
	
	ШаблоныДляВыполнения = Запрос.Выполнить().Выгрузить();
	
	КоличествоЭлементов = ШаблоныДляВыполнения.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		СтрокаТаблицы = ШаблоныДляВыполнения[КоличествоЭлементов - Индекс];
		
		Если СтрокаТаблицы.ОбщийШаблон Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоСотрудникТекущегоПользователя =
			Сотрудники.ЭтоСотрудникТекущегоПользователя(СтрокаТаблицы.Автор);
		Если ЭтоСотрудникТекущегоПользователя Тогда
			Продолжить;
		КонецЕсли;
		
		ШаблоныДляВыполнения.Удалить(СтрокаТаблицы);
		
	КонецЦикла;
	
	Возврат ШаблоныДляВыполнения;
	
КонецФункции

// Возвращает текст, сформированный из указанного шаблона
//
Функция ПолучитьТекстШаблона(Шаблон) Экспорт
	
	Если ТипЗнч(Шаблон) = Тип("СправочникСсылка.ШаблоныТекстов") Тогда 
		ТекстШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Шаблон, "Шаблон");
	Иначе 
		ТекстШаблона = Шаблон;
	КонецЕсли;
	
	// Дата
	ТекущаяДата = ТекущаяДатаСеанса();
	ТекстШаблона = СтрЗаменить(ТекстШаблона, "[День]", Формат(ТекущаяДата, "ДФ=дд"));
	ТекстШаблона = СтрЗаменить(ТекстШаблона, "[Месяц]", Формат(ТекущаяДата, "ДФ=ММ"));
	ТекстШаблона = СтрЗаменить(ТекстШаблона, "[Год]", Формат(ТекущаяДата, "ДФ=гггг"));
	
	// Время
	ТекстШаблона = СтрЗаменить(ТекстШаблона, "[Час]", Формат(ТекущаяДата, "ДФ=ЧЧ"));
	ТекстШаблона = СтрЗаменить(ТекстШаблона, "[Минута]", Формат(ТекущаяДата, "ДФ=мм"));
	
	// Сроки исполнения
	Если Найти(ТекстШаблона, "[1 день]") > 0 
		Или Найти(ТекстШаблона, "[2 дня]") > 0
		Или Найти(ТекстШаблона, "[3 дня]") > 0 
		Или Найти(ТекстШаблона, "[Неделя]") > 0 Тогда
		ФорматДаты = ?(ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач"), 
			"ДФ='dd.MM.yy H:mm'",
			"ДФ='dd.MM.yy'");
			
		ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
		Если ИспользоватьГрафикиРаботы Тогда
			График = ГрафикиРаботы.ГрафикРаботыСотрудника(Сотрудники.ОсновнойСотрудник());
		Иначе 
			График = Неопределено;
		КонецЕсли;
		
		Если Найти(ТекстШаблона, "[1 день]") > 0 Тогда 
			СрокИсполнения = РассчитатьДату(ИспользоватьГрафикиРаботы, График, ТекущаяДата, 1);
			ТекстШаблона = СтрЗаменить(ТекстШаблона, "[1 день]", 
				Формат(СрокИсполнения, ФорматДаты));
		КонецЕсли;
		
		Если Найти(ТекстШаблона, "[2 дня]") > 0 Тогда 
			СрокИсполнения = РассчитатьДату(ИспользоватьГрафикиРаботы, График, ТекущаяДата, 2);
			ТекстШаблона = СтрЗаменить(ТекстШаблона, "[2 дня]", 
				Формат(СрокИсполнения, ФорматДаты));
		КонецЕсли;
		
		Если Найти(ТекстШаблона, "[3 дня]") > 0 Тогда 
			СрокИсполнения = РассчитатьДату(ИспользоватьГрафикиРаботы, График, ТекущаяДата, 3);
			ТекстШаблона = СтрЗаменить(ТекстШаблона, "[3 дня]", 
				Формат(СрокИсполнения, ФорматДаты));
		КонецЕсли;
		
		Если Найти(ТекстШаблона, "[Неделя]") > 0 Тогда 
			СрокИсполнения = РассчитатьДату(ИспользоватьГрафикиРаботы, График, ТекущаяДата, 7);
			ТекстШаблона = СтрЗаменить(ТекстШаблона, "[Неделя]", 
				Формат(СрокИсполнения, ФорматДаты));
		КонецЕсли;
	КонецЕсли;
		
	Возврат ТекстШаблона;
	
КонецФункции

// УправлениеДоступом

Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат "Ссылка,
		|ОбщийШаблон,
		|Автор,
		|Пользователи";
	
КонецФункции

// Проверяет наличие метода.
// 
Функция ЕстьМетодЗаполнитьДескрипторыОбъекта() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Заполняет переданную таблицу дескрипторов объекта.
// 
Процедура ЗаполнитьДескрипторыОбъекта(ОбъектДоступа, ТаблицаДескрипторов, ПротоколРасчетаПрав = Неопределено) Экспорт
	
	ДокументооборотПраваДоступа.ДобавитьИндивидуальныйДескриптор(
		ОбъектДоступа, ТаблицаДескрипторов, ОбъектДоступа.Автор, Истина);
	
	ТаблицаПользователей = ОбъектДоступа.Пользователи.Выгрузить();
	Для Каждого СтрПользователя Из ТаблицаПользователей Цикл
		ДокументооборотПраваДоступа.ДобавитьИндивидуальныйДескриптор(
			ОбъектДоступа, ТаблицаДескрипторов, СтрПользователя.ПользовательИлиГруппа, Ложь);
	КонецЦикла;
	
	Если ПротоколРасчетаПрав <> Неопределено Тогда
		
		ЗаписьПротокола = Новый Структура("Элемент, Описание",
			ОбъектДоступа.Автор, НСтр("ru = 'Автор'"));
		ПротоколРасчетаПрав.Добавить(ЗаписьПротокола);
		
		Если ТаблицаПользователей.Количество() > 0 Тогда
			ЗаписьПротокола = Новый Структура("Элемент, Описание",
				ОбъектДоступа.Ссылка, НСтр("ru = 'Пользователи на закладке ""Доступ""'"));
			ПротоколРасчетаПрав.Добавить(ЗаписьПротокола);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив пользователей, делегирующих права проверяемому пользователю
//
// Параметры
//  	Пользователь - СправочникСсылка.Пользователи - проверяемый пользователь
//
// Возвращаемое значение:
//  Массив - массив пользователей
Функция ПолучитьПользователейДелегирующихПрава(Пользователь) Экспорт 
	
	СправочникШаблоны = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Справочник.ШаблоныТекстов");
	
	Замещения = Справочники.ЗамещающиеИПомощники.АктуальныеЗамещения(Пользователь,
		ЗамещающиеИПомощники.ОбластиЗамещенияПоИдентификаторуОбъектаМетаданных(СправочникШаблоны));
	
	Возврат Замещения.ВыгрузитьКолонку("Сотрудник");
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РассчитатьДату(ИспользоватьГрафикиРаботы, График, ТекущаяДата, КоличествоДней)
	
	Если ИспользоватьГрафикиРаботы Тогда
		Дата = КалендарныеГрафики.ПолучитьДатуПоКалендарю(
			График.Календарь, 
			ТекущаяДата,
			КоличествоДней);
		Дата = Дата + (ТекущаяДата - НачалоДня(ТекущаяДата));
	Иначе
		Дата = ТекущаяДата + КоличествоДней * 24 * 3600;
	КонецЕсли;
		
	Возврат Дата;
		
КонецФункции

#КонецОбласти

#КонецЕсли