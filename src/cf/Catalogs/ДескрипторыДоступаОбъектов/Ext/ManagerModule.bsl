#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Выполняет расчет и перезапись прав доступа по указанному определителю
// Возвращает в массиве ПротоколРасчетаПрав перечень данных, которые 
// были использованы при расчете прав
//
// Параметры:
//  
//  ДескрипторСсылка - Ссылка - дескриптор
//  ПротоколРасчетаПрав - Массив - протокол расчета, который будет показан пользователю
//  Немедленно - Булево
//  ОбновитьЗависимыеНемедленно - Булево
//  
Процедура ОбновитьПрава(ДескрипторСсылка, ПротоколРасчетаПрав = Неопределено, Немедленно = Неопределено) Экспорт
	
	// Проверка на отложенное обновление прав доступа
	Если ДокументооборотПраваДоступаПовтИсп.ОтложенноеОбновлениеПравДоступа()
		И Немедленно <> Истина Тогда
		
		// Добавление в очередь
		РегистрыСведений.ОчередьОбновленияПравДоступа.Добавить(ДескрипторСсылка);
		Возврат;
		
	КонецЕсли;
	
	РассчитатьПрава(ДескрипторСсылка, ПротоколРасчетаПрав);
	ДокументооборотПраваДоступа.ОбновитьПраваСвязанныхДескрипторовПоДескриптору(ДескрипторСсылка);
	
КонецПроцедуры

// Выполняет расчет и запись прав
// 
// ДескрипторСсылка - ссылка на дескриптор
// 
Процедура РассчитатьПрава(ДескрипторСсылка, ПротоколРасчетаПрав = Неопределено) Экспорт
	
	РеквизитыДескриптора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДескрипторСсылка,
		"ИдентификаторОбъектаМетаданных, ЭтоПустойДескриптор,
		|Группа, КонтейнерСотрудников, ДляЛокальныхАдминистраторов");
	
	ИдОбъекта = РеквизитыДескриптора.ИдентификаторОбъектаМетаданных;
	ЭтоИндивидуальныйДескриптор = ЗначениеЗаполнено(РеквизитыДескриптора.КонтейнерСотрудников);
	ЭтоДескрипторДляЛокальныхАдминистраторов = РеквизитыДескриптора.ДляЛокальныхАдминистраторов;
	
	НазначениеДескриптора = НазначениеДескриптора(
		ЭтоИндивидуальныйДескриптор, ЭтоДескрипторДляЛокальныхАдминистраторов);
	
	// Расчет прав запросом
	ДескрипторыКРасчету = Новый Массив;
	ДескрипторыКРасчету.Добавить(ДескрипторСсылка);
	РассчитатьПраваЗапросом(ДескрипторыКРасчету, ИдОбъекта, НазначениеДескриптора, ПротоколРасчетаПрав);
	
КонецПроцедуры

// Рассчитывает права для переданного массива дескрипторов
// 
// Параметры:
//  
//  Дескрипторы - Массив - массив дескрипторов, чьи права нужно рассчитать.
//  ИдОбъекта - Ссылка - идентификатор объекта метаданных, назначенный переданным дескрипторам.
//  НазначениеДескрипторов - Строка - см. функцию НазначениеДескриптора()
//  ПротоколРасчетаПрав - Массив - протокол расчета, который будет показан пользователю.
//  
Процедура РассчитатьПраваЗапросом(
			Дескрипторы,
			ИдОбъекта,
			НазначениеДескрипторов,
			ПротоколРасчетаПрав = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Дескрипторы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Дескрипторы = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Дескрипторы);;
	
	ПолноеИмяМетаданных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИдОбъекта, "ПолноеИмя");
	МенеджерОбъектаДоступа = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяМетаданных);
	
	ОбработатьДескрипторыИсключения(Дескрипторы, ИдОбъекта, МенеджерОбъектаДоступа);
	Если Дескрипторы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДескрипторыДляЗапроса = Дескрипторы;
	Если ПротоколРасчетаПрав <> Неопределено Тогда
		// Параметр запроса не должен меняться, поэтому делаем копию
		ДескрипторыДляЗапроса = Новый Массив;
		Для Каждого Эл Из Дескрипторы Цикл
			ДескрипторыДляЗапроса.Добавить(Эл);
		КонецЦикла;
	КонецЕсли;
	
	Если НазначениеДескрипторов = "Индивидуальный" Тогда
		
		ЗапросПоПравам = Новый Запрос;
		ЗапросПоПравам.Текст = 
			ДокументооборотПраваДоступаПовтИсп.ТекстЗапросаДляРасчетаПравИндивидуальныхДескрипторов();
		
	ИначеЕсли НазначениеДескрипторов = "ДляЛокальныхАдминистраторов" Тогда
		
		ЗапросПоПравам = ЗапросДляСтандартногоРасчетаПрав(
			ДескрипторыДляЗапроса, ИдОбъекта, МенеджерОбъектаДоступа);
		
		ЗапросПоПравам.Текст =
			ДокументооборотПраваДоступаПовтИсп.ТекстЗапросаДляРасчетаПравДляЛокальныхАдминистраторов();
		
	Иначе
		
		ЗапросПоПравам = Неопределено;
		ЕстьМетодЗапросДляРасчетаПрав = ОбщегоНазначенияДокументооборотПовтИсп.ЕстьМетодМенеджера(
			ПолноеИмяМетаданных, "ЗапросДляРасчетаПрав");
		
		Если ЕстьМетодЗапросДляРасчетаПрав Тогда
			ЗапросПоПравам = МенеджерОбъектаДоступа.ЗапросДляРасчетаПрав(
				ДескрипторыДляЗапроса, ИдОбъекта, МенеджерОбъектаДоступа);
		Иначе
			ЗапросПоПравам = ЗапросДляСтандартногоРасчетаПрав(
				ДескрипторыДляЗапроса, ИдОбъекта, МенеджерОбъектаДоступа);
		КонецЕсли;
		
		Если ЗапросПоПравам = Неопределено Тогда
			ВызватьИсключение "" + ИдОбъекта + ": " + НСтр("ru = 'Не найден запрос для расчета прав'");
		КонецЕсли;
		
	КонецЕсли;
	
	ЗапросПоПравам.УстановитьПараметр("Дескрипторы", ДескрипторыДляЗапроса);
	ЗапросПоПравам.УстановитьПараметр("Идентификатор", ИдОбъекта);
	
	Результат = ЗапросПоПравам.Выполнить();
	ВыборкаПоДескрипторам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДескрипторам.Следующий() Цикл
		
		// Удаление обработанного дескриптора из массива
		Индекс = Дескрипторы.Найти(ВыборкаПоДескрипторам.Дескриптор);
		Если Индекс <> Неопределено Тогда
			Дескрипторы.Удалить(Индекс);
		КонецЕсли;
		
		АктуальныхЗаписейВсего = ВыборкаПоДескрипторам.АктуальныхЗаписейВсего;
		ИзмененныхЗаписейВсего = ВыборкаПоДескрипторам.ИзмененныхЗаписейВсего;
		
		// Права не менялись.
		Если ИзмененныхЗаписейВсего = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Запись новых прав.
		
		
		Если ДокументооборотПраваДоступа.ЗаписатьРассчитанныеПраваПоштучно(АктуальныхЗаписейВсего, ИзмененныхЗаписейВсего) Тогда
			
			// Права записываются "поштучно".
			Выборка = ВыборкаПоДескрипторам.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если Не Выборка.ЗаписьУдалена И Не Выборка.ЗаписьДобавленаИлиИзменена Тогда
					Продолжить;
				КонецЕсли;
				
				Запись = РегистрыСведений.ПраваПоДескрипторамДоступаОбъектов.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
				
				Если Выборка.ЗаписьДобавленаИлиИзменена Тогда
					Запись.Записать();
				Иначе
					Запись.Прочитать();
					Если Запись.Выбран() Тогда
						Запись.Удалить();
					КонецЕсли;
				КонецЕсли;
					
			КонецЦикла;
			
		Иначе
			
			// Записывается весь набор прав целиком.
			НаборЗаписей = РегистрыСведений.ПраваПоДескрипторамДоступаОбъектов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Дескриптор.Установить(ВыборкаПоДескрипторам.Дескриптор);
			
			Выборка = ВыборкаПоДескрипторам.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Не Выборка.ЗаписьУдалена Тогда
					ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
				КонецЕсли;
			КонецЦикла;
			
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если дескриптор не попал в запрос, значит его права должны быть пустыми
	Для Каждого Дескриптор Из Дескрипторы Цикл
		НаборЗаписей = РегистрыСведений.ПраваПоДескрипторамДоступаОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Дескриптор.Установить(Дескриптор);
		НаборЗаписей.Записать();
	КонецЦикла;
	
	Если ПротоколРасчетаПрав <> Неопределено Тогда
		Если НазначениеДескрипторов = "Основной" И ЕстьМетодЗапросДляРасчетаПрав Тогда
			МенеджерОбъектаДоступа.ЗаполнитьПротоколРасчетаПрав(ПротоколРасчетаПрав, ЗапросПоПравам);
		Иначе
			ЗаполнитьПротоколРасчетаПравСтандартно(ПротоколРасчетаПрав, ЗапросПоПравам, НазначениеДескрипторов);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет права дескрипторов в части руководителей и делегатов.
//
// Параметры:
//  Дескрипторы - Массив, Ссылка - дескрипторы, чьи права нужно обновить.
// 
Процедура ОбновитьПраваПоСоставуСубъектов(Дескрипторы) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПраваПоДескрипторамДоступаОбъектов.Дескриптор,
		|	ПраваПоДескрипторамДоступаОбъектов.Сотрудник,
		|	ПраваПоДескрипторамДоступаОбъектов.Добавление,
		|	ПраваПоДескрипторамДоступаОбъектов.Изменение,
		|	ПраваПоДескрипторамДоступаОбъектов.Удаление,
		|	ПраваПоДескрипторамДоступаОбъектов.УправлениеПравами,
		|	ПраваПоДескрипторамДоступаОбъектов.Чтение
		|ПОМЕСТИТЬ НовыеПрава
		|ИЗ
		|	РегистрСведений.ПраваПоДескрипторамДоступаОбъектов КАК ПраваПоДескрипторамДоступаОбъектов
		|ГДЕ
		|	ПраваПоДескрипторамДоступаОбъектов.Дескриптор В(&Дескрипторы)
		|	И ПраваПоДескрипторамДоступаОбъектов.ОбъектОснование = НЕОПРЕДЕЛЕНО");
	
	ДокументооборотПраваДоступа.ДополнитьТекстЗапросаПоПравам(Запрос.Текст);
	Запрос.УстановитьПараметр("Дескрипторы", Дескрипторы);
	Результат = Запрос.Выполнить();
	ВыборкаПоДескрипторам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДескрипторам.Следующий() Цикл
		
		АктуальныхЗаписейВсего = ВыборкаПоДескрипторам.АктуальныхЗаписейВсего;
		ИзмененныхЗаписейВсего = ВыборкаПоДескрипторам.ИзмененныхЗаписейВсего;
		
		// Права не менялись.
		Если ИзмененныхЗаписейВсего = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Запись новых прав.
		Если ДокументооборотПраваДоступа.ЗаписатьРассчитанныеПраваПоштучно(АктуальныхЗаписейВсего, ИзмененныхЗаписейВсего) Тогда
			
			// Права записываются "поштучно".
			Выборка = ВыборкаПоДескрипторам.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если Не Выборка.ЗаписьУдалена И Не Выборка.ЗаписьДобавленаИлиИзменена Тогда
					Продолжить;
				КонецЕсли;
				
				Запись = РегистрыСведений.ПраваПоДескрипторамДоступаОбъектов.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
				
				Если Выборка.ЗаписьДобавленаИлиИзменена Тогда
					Запись.Записать();
				Иначе
					Запись.Прочитать();
					Если Запись.Выбран() Тогда
						Запись.Удалить();
					КонецЕсли;
				КонецЕсли;
					
			КонецЦикла;
			
		Иначе
			
			// Записывается весь набор прав целиком.
			НаборЗаписей = РегистрыСведений.ПраваПоДескрипторамДоступаОбъектов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Дескриптор.Установить(ВыборкаПоДескрипторам.Дескриптор);
			
			Выборка = ВыборкаПоДескрипторам.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Не Выборка.ЗаписьУдалена Тогда
					ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
				КонецЕсли;
			КонецЦикла;
			
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


// Параметры:
//  
//  ПротоколРасчетаПрав - Массив - протокол для заполнения
//  ЗапросПоПравам - Запрос - запрос, который использовался для расчета прав дескрипторов
//  Дескрипторы - Массив - массив дескрипторов, чьи права были рассчитаны
//  НазначениеДескриптора - Строка - см. функцию НазначениеДескриптора()
//  
Процедура ЗаполнитьПротоколРасчетаПравСтандартно(
			ПротоколРасчетаПрав,
			ЗапросПоПравам,
			НазначениеДескриптора = "Основной") Экспорт
	
	Если ПротоколРасчетаПрав = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Таблицы запроса, которые будут нужны для заполнения протокола
	ИменаТаблицДляЗаполненияПротокола = Новый Массив;
	ИменаТаблицДляЗаполненияПротокола.Добавить("ПраваПоРазрешениямДоступа");
	ИменаТаблицДляЗаполненияПротокола.Добавить("НастройкиПапок");
	ИменаТаблицДляЗаполненияПротокола.Добавить("РабочиеГруппы");
	
	РезультатыЗапросов = ОбщегоНазначенияДокументооборот.ДанныеИзВременныхТаблицЗапроса(
		ЗапросПоПравам, ИменаТаблицДляЗаполненияПротокола);
	
	Для Сч = 0 По ИменаТаблицДляЗаполненияПротокола.Количество() - 1 Цикл
		
		Результат = РезультатыЗапросов[Сч];
		ИмяПодзапроса = ИменаТаблицДляЗаполненияПротокола[Сч];
		
		// Такой ВТ нет в запросе
		Если Результат = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяПодзапроса = "ПраваПоРазрешениямДоступа" Тогда
			
			ЗаписьПротокола = Новый Структура("Элемент, Описание", "ЛокальныеАдминистраторы", 
				НСтр("ru = 'Локальные администраторы'"));
			ПротоколРасчетаПрав.Добавить(ЗаписьПротокола);
			
		ИначеЕсли ИмяПодзапроса = "НастройкиПапок" Тогда
			
			Если Не Результат.Пустой() Тогда
				ЗаписьПротокола = Новый Структура("Элемент, Описание",
					"НастройкиПравПапки", НСтр("ru = 'Настройки прав папки'"));
				ПротоколРасчетаПрав.Добавить(ЗаписьПротокола);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Создает и заполняет новый дескриптор доступа по указанному объекту.
// Параметры:
//	ОбъектДоступа - Объект, Структура - Объект или описание объекта,
//		полученное с помощью метода ПолучитьПоляДоступа.
// 
Функция СоздатьДескрипторОсновной(ОбъектДоступа) Экспорт
	
	Дескриптор = Справочники.ДескрипторыДоступаОбъектов.СоздатьЭлемент();
	ЭтоГруппаСправочника = Ложь;
	
	Если ТипЗнч(ОбъектДоступа) = Тип("Структура") Тогда
		МетаданныеОбъектаДоступа = ОбъектДоступа.Ссылка.Метаданные();
		ЭтоГруппаСправочника = ОбъектДоступа.Свойство("ЭтоГруппа") И ОбъектДоступа.ЭтоГруппа;
	Иначе
		МетаданныеОбъектаДоступа = ОбъектДоступа.Метаданные();
		ЭтоГруппаСправочника = ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъектаДоступа) И ОбъектДоступа.ЭтоГруппа;
	КонецЕсли;
	
	Дескриптор.ИдентификаторОбъектаМетаданных =
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(МетаданныеОбъектаДоступа);
	
	Если ЭтоГруппаСправочника Тогда
		// Для групп справочников заполнение дескриптора не требуется.
		Дескриптор.Группа = Истина;
	Иначе	
		ПолноеИмя = МетаданныеОбъектаДоступа.ПолноеИмя();
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	 	Менеджер.ЗаполнитьОсновнойДескриптор(ОбъектДоступа, Дескриптор);
	КонецЕсли;	
	
	ОчиститьНеиспользуемыеРеквизитыДескриптора(Дескриптор);
	
	Дескриптор.ЗаполнитьПризнакПустого();
	Дескриптор.РассчитатьХэш();
	
	Возврат Дескриптор;
	
КонецФункции

// Создает и заполняет новый дескриптор доступа для элемента рабочей группы.
//
// Параметры:
//  ОбъектМетаданных - Ссылка - идентификатор объекта метаданных, который будет назначен дескриптору.
//  Элемент - Пользователь, РабочаяГруппа, Подразделение - контейнер, который будет назначен дескриптору.
//  Изменение - Булево - признак того, что для пользователей контейнера будет доступно право Изменение.
// 
// Возвращаемое значение:
//  Ссылка - ссылка на созданный дескриптор.
// 
Функция СоздатьДескрипторИндивидуальный(ОбъектМетаданных, Элемент, Изменение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Дескриптор = Справочники.ДескрипторыДоступаОбъектов.СоздатьЭлемент();
	Дескриптор.ИдентификаторОбъектаМетаданных = ОбъектМетаданных;
	Дескриптор.КонтейнерСотрудников = Элемент;
	Дескриптор.Изменение = Изменение;
	Дескриптор.РассчитатьХэш();
	
	Возврат Дескриптор;
	
КонецФункции

// Находит существующий дескриптор доступа по переданному образцу.
// Если дескриптор не найден, то возвращает Неопределено.
Функция НайтиДескрипторПоОбразцу(Дескриптор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтобранныеПоХэшу.Ссылка
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДескрипторыДоступаОбъектов.Ссылка КАК Ссылка,
		|		ДескрипторыДоступаОбъектов.ВидОбъекта КАК ВидОбъекта,
		|		ДескрипторыДоступаОбъектов.ВопросДеятельности КАК ВопросДеятельности,
		|		ДескрипторыДоступаОбъектов.ГрифДоступа КАК ГрифДоступа,
		|		ДескрипторыДоступаОбъектов.Группа КАК Группа,
		|		ДескрипторыДоступаОбъектов.ДляЛокальныхАдминистраторов КАК ДляЛокальныхАдминистраторов,
		|		ДескрипторыДоступаОбъектов.ИдентификаторОбъектаМетаданных КАК ИдентификаторОбъектаМетаданных,
		|		ДескрипторыДоступаОбъектов.Изменение КАК Изменение,
		|		ДескрипторыДоступаОбъектов.КонтейнерСотрудников КАК КонтейнерСотрудников,
		|		ДескрипторыДоступаОбъектов.ОбъектДоступа КАК ОбъектДоступа,
		|		ДескрипторыДоступаОбъектов.Организация КАК Организация,
		|		ДескрипторыДоступаОбъектов.Папка КАК Папка,
		|		ДескрипторыДоступаОбъектов.ПапкаПередаетВсеПрава КАК ПапкаПередаетВсеПрава,
		|		ДескрипторыДоступаОбъектов.Подразделение КАК Подразделение,
		|		ДескрипторыДоступаОбъектов.Проект КАК Проект,
		|		ДескрипторыДоступаОбъектов.ЭтоПустойДескриптор КАК ЭтоПустойДескриптор
		|	ИЗ
		|		Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|	ГДЕ
		|		ДескрипторыДоступаОбъектов.Хэш = &Хэш) КАК ОтобранныеПоХэшу
		|ГДЕ
		|	ОтобранныеПоХэшу.ВидОбъекта = &ВидОбъекта
		|	И ОтобранныеПоХэшу.ВопросДеятельности = &ВопросДеятельности
		|	И ОтобранныеПоХэшу.ГрифДоступа = &ГрифДоступа
		|	И ОтобранныеПоХэшу.Группа = &Группа
		|	И ОтобранныеПоХэшу.ДляЛокальныхАдминистраторов = &ДляЛокальныхАдминистраторов
		|	И ОтобранныеПоХэшу.ИдентификаторОбъектаМетаданных = &ИдентификаторОбъектаМетаданных
		|	И ОтобранныеПоХэшу.Изменение = &Изменение
		|	И ОтобранныеПоХэшу.КонтейнерСотрудников = &КонтейнерСотрудников
		|	И ОтобранныеПоХэшу.ОбъектДоступа = &ОбъектДоступа
		|	И ОтобранныеПоХэшу.Организация = &Организация
		|	И ОтобранныеПоХэшу.Папка = &Папка
		|	И ОтобранныеПоХэшу.ПапкаПередаетВсеПрава = &ПапкаПередаетВсеПрава
		|	И ОтобранныеПоХэшу.Подразделение = &Подразделение
		|	И ОтобранныеПоХэшу.Проект = &Проект
		|	И ОтобранныеПоХэшу.ЭтоПустойДескриптор = &ЭтоПустойДескриптор";
	
	Запрос.УстановитьПараметр("ВидОбъекта", Дескриптор.ВидОбъекта);
	Запрос.УстановитьПараметр("ВопросДеятельности", Дескриптор.ВопросДеятельности);
	Запрос.УстановитьПараметр("ГрифДоступа", Дескриптор.ГрифДоступа);
	Запрос.УстановитьПараметр("Группа", Дескриптор.Группа);
	Запрос.УстановитьПараметр("ДляЛокальныхАдминистраторов", Дескриптор.ДляЛокальныхАдминистраторов);
	Запрос.УстановитьПараметр("ИдентификаторОбъектаМетаданных", Дескриптор.ИдентификаторОбъектаМетаданных);
	Запрос.УстановитьПараметр("Изменение", Дескриптор.Изменение);
	Запрос.УстановитьПараметр("КонтейнерСотрудников", Дескриптор.КонтейнерСотрудников);
	Запрос.УстановитьПараметр("ОбъектДоступа", Дескриптор.ОбъектДоступа);
	Запрос.УстановитьПараметр("Организация", Дескриптор.Организация);
	Запрос.УстановитьПараметр("Папка", Дескриптор.Папка);
	Запрос.УстановитьПараметр("ПапкаПередаетВсеПрава", Дескриптор.ПапкаПередаетВсеПрава);
	Запрос.УстановитьПараметр("Подразделение", Дескриптор.Подразделение);
	Запрос.УстановитьПараметр("Проект", Дескриптор.Проект);
	Запрос.УстановитьПараметр("Хэш", Дескриптор.Хэш);
	Запрос.УстановитьПараметр("ЭтоПустойДескриптор", Дескриптор.ЭтоПустойДескриптор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Дескриптор.КонтейнерСотрудников)  // Для инд. дескриптора доп. проверка не нужна.
				Или ДескрипторыОдинаковы(Выборка.Ссылка.ПолучитьОбъект(), Дескриптор) Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает запрос для расчета прав доступа стандартным способом,
// т.е. с учетом ограничений по группам доступа, рабочим группам, правам папок.
//  
// Параметры:
//  
//  Дескрипторы - Массив - массив дескрипторов, чьи права нужно рассчитать
//  ИдОбъекта - Ссылка - идентификатор объекта метаданных, назначенный переданным дескрипторам
//  МенеджерОбъектаДоступа - СправочникМенеджер, ДокументМенеджер - менеджер объекта доступа
//  УчитыватьРабочиеГруппы - Булево
//  УчитыватьНастройкиПравПапок - Булево
//  УчитыватьПолитикиДоступа - Булево
//  
// Возвращаемое значение - Запрос - запрос, который выберет права доступа для переданного массива дескрипторов
//  
Функция ЗапросДляСтандартногоРасчетаПрав(
			Дескрипторы,
			ИдОбъекта,
			МенеджерОбъектаДоступа,
			УчитыватьНастройкиПравПапок = Неопределено,
			УчитыватьПолитикиДоступа = Истина) Экспорт
	
	Если УчитыватьНастройкиПравПапок = Неопределено Тогда
		УчитыватьНастройкиПравПапок = ОбщегоНазначенияДокументооборот.ЕстьМетодМенеджера(
			МенеджерОбъектаДоступа, "ПолучитьПравилаОбработкиНастроекПравПапки");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ДокументооборотПраваДоступаПовтИсп.ТекстЗапросаДляСтандартногоРасчетаПрав(
		УчитыватьНастройкиПравПапок, УчитыватьПолитикиДоступа);
		
	РеквизитыИдентификатора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ИдОбъекта, "ПолноеИмя, ЗначениеПустойСсылки");
	МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(РеквизитыИдентификатора.ПолноеИмя);
	ЭтоПапка = ДокументооборотПраваДоступа.ЭтоПапка(
		ТипЗнч(РеквизитыИдентификатора.ЗначениеПустойСсылки));
	
	Запрос.УстановитьПараметр("Дескрипторы", Дескрипторы);
	Запрос.УстановитьПараметр("Идентификатор", ИдОбъекта);
	Запрос.УстановитьПараметр("ЭтоПапка", ЭтоПапка);
	Запрос.УстановитьПараметр("ИдентификаторДляПроверкиПолитикДоступа",
		ДокументооборотПраваДоступаПереопределяемый.ИдентификаторДляПроверкиПолитикДоступа(
			ИдОбъекта, МетаданныеОбъекта));
	
	// Получение таблицы дескрипторов с видами доступа и их значениями
	Если УчитыватьПолитикиДоступа Тогда
		ЗапросПоДескрипторам = ДокументооборотПраваДоступаПовтИсп.ЗапросПоДескрипторамСВидамиДоступа();
		ЗапросПоДескрипторам.УстановитьПараметр("Дескрипторы", Дескрипторы);
		ТаблицаДескрипторов = ЗапросПоДескрипторам.Выполнить().Выгрузить();
		Запрос.УстановитьПараметр("ТаблицаДескрипторов", ТаблицаДескрипторов);
	КонецЕсли;
	
	// Получение таблицы правил обработки настроек прав папки
	Если УчитыватьНастройкиПравПапок Тогда
		ПравилаОбработкиНастроекПапки = МенеджерОбъектаДоступа.ПолучитьПравилаОбработкиНастроекПравПапки();
		Запрос.УстановитьПараметр("ПравилаОбработкиНастроекПапки", ПравилаОбработкиНастроекПапки);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

// Удаляет порцию устаревших данных.
// 
// Возвращаемое значение - Булево - Истина, если были найдены устаревшие данные, в противном случае Ложь.
// 
Функция УдалитьПорциюУстаревшихДанных() Экспорт
	
	Лимит = 5000;
	ОбработаноЗаписей = 0;
	ОбработаноУспешно = 0;
	ОбработаноСОшибками = 0;
	
	ЗапросДляПроверкиСсылок = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДескрипторыДляОбъектов.Дескриптор
		|ИЗ
		|	РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
		|ГДЕ
		|	ДескрипторыДляОбъектов.Дескриптор = &Дескриптор");
	
	// Запрос, выбирающий дескрипторы, которые нужно удалить окончательно.
	ЗапросДляУдаления = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 500
		|	ДескрипторыДоступаОбъектов.Ссылка КАК Дескриптор,
		|	ДескрипторыДоступаОбъектов.ПометкаУдаления КАК ПометкаДескриптора,
		|	ЛОЖЬ КАК ЕстьСсылки
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДескрипторыДляОбъектов КАК ДескрипторыДляОбъектов
		|		ПО ДескрипторыДоступаОбъектов.Ссылка = ДескрипторыДляОбъектов.Дескриптор
		|ГДЕ
		|	ДескрипторыДляОбъектов.Объект ЕСТЬ NULL ");
	
	ЕстьЗаписи = Истина;
	Пока ЕстьЗаписи И ОбработаноЗаписей < Лимит Цикл
		
		//@skip-check query-in-loop - порционная обработка
		Результат = ЗапросДляУдаления.Выполнить();
		ЕстьЗаписи = Не Результат.Пустой();
		
		Выборка = Результат.Выбрать();
		//@skip-check query-in-loop - порционная обработка
		ОбработатьВыборкуУстаревшихДанных(Выборка, ЗапросДляПроверкиСсылок, ОбработаноУспешно, ОбработаноСОшибками);
		
		ОбработаноЗаписей = ОбработаноЗаписей + Выборка.Количество();
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru='Удаление устаревших данных'"), 
		УровеньЖурналаРегистрации.Информация,
		Метаданные.Справочники.ДескрипторыДоступаОбъектов, , 
		СтрШаблон(
			НСтр("ru = 'Процедура завершена.
				|Обработано записей: %1
				|Из них:
				|	Успешно - %2
				|	С ошибками - %3'"),
			ОбработаноЗаписей, ОбработаноУспешно, ОбработаноСОшибками));
	
	Возврат ОбработаноЗаписей > 0;
	
КонецФункции

Функция	НазначениеДескриптора(ЭтоИндивидуальныйДескриптор, ЭтоДескрипторДляЛокальныхАдминистраторов) Экспорт
	
	НазначениеДескриптора = "Основной";
	
	Если ЭтоИндивидуальныйДескриптор = Истина Тогда
		НазначениеДескриптора = "Индивидуальный";
	ИначеЕсли ЭтоДескрипторДляЛокальныхАдминистраторов = Истина Тогда
		НазначениеДескриптора = "ДляЛокальныхАдминистраторов";
	КонецЕсли;
	
	Возврат НазначениеДескриптора;
	
КонецФункции

// Находит существующие индивидуальные дескрипторы доступа.
//
// Параметры:
//  ИдентификаторОбъектаМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//  КонтейнерыДескрипторов - ТаблицаЗначений - Конейтнеры дескрипторов:
//   * КонтейнерСотрудников - ОпределяемыйТип.КонтейнерыСотрудников.
//   * Изменение - Булево.
// 
// Возвращаемое значение:
//  Структура - Найденные индивидуальные дескрипторы:
//   * Дескрипторы - Массив из СправочникСсылка.ДескрипторыДоступаОбъектов.
//   * КонтейнерыБезДескрипторов ТаблицаЗначений - Конейтнеры без дескрипторов:
//      ** КонтейнерСотрудников - ОпределяемыйТип.КонтейнерыСотрудников.
//      ** Изменение - Булево.
//
Функция НайтиИндивидуальныеДескрипторы(ИдентификаторОбъектаМетаданных, КонтейнерыДескрипторов) Экспорт
	
	ХэшиИндивидуальныхДескрипторов = ХэшиИндивидуальныхДескрипторов(
		ИдентификаторОбъектаМетаданных,
		КонтейнерыДескрипторов);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДескрипторыДоступаОбъектов.Ссылка КАК Дескриптор,
		|	ДескрипторыДоступаОбъектов.КонтейнерСотрудников КАК КонтейнерСотрудников,
		|	ДескрипторыДоступаОбъектов.Изменение КАК Изменение
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|ГДЕ
		|	ДескрипторыДоступаОбъектов.Хэш В(&ХэшиИндивидуальныхДескрипторов)
		|	И ДескрипторыДоступаОбъектов.ИдентификаторОбъектаМетаданных = &ИдентификаторОбъектаМетаданных
		|	И ДескрипторыДоступаОбъектов.ВидОбъекта = НЕОПРЕДЕЛЕНО
		|	И ДескрипторыДоступаОбъектов.ВопросДеятельности = ЗНАЧЕНИЕ(Справочник.ВопросыДеятельности.ПустаяСсылка)
		|	И ДескрипторыДоступаОбъектов.ГрифДоступа = ЗНАЧЕНИЕ(Справочник.ГрифыДоступа.ПустаяСсылка)
		|	И ДескрипторыДоступаОбъектов.Группа = ЛОЖЬ
		|	И ДескрипторыДоступаОбъектов.ДляЛокальныхАдминистраторов = ЛОЖЬ
		|	И ДескрипторыДоступаОбъектов.ОбъектДоступа = НЕОПРЕДЕЛЕНО
		|	И ДескрипторыДоступаОбъектов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	И ДескрипторыДоступаОбъектов.Папка = НЕОПРЕДЕЛЕНО
		|	И ДескрипторыДоступаОбъектов.ПапкаПередаетВсеПрава = ЛОЖЬ
		|	И ДескрипторыДоступаОбъектов.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|	И ДескрипторыДоступаОбъектов.Проект = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
		|	И ДескрипторыДоступаОбъектов.ЭтоПустойДескриптор = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("ИдентификаторОбъектаМетаданных", ИдентификаторОбъектаМетаданных);
	Запрос.УстановитьПараметр("ХэшиИндивидуальныхДескрипторов", ХэшиИндивидуальныхДескрипторов);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
	ТаблицаРезультата.Индексы.Добавить("КонтейнерСотрудников, Изменение");
	
	НайденныеДескрипторы = Новый Массив;
	КонтейнерыБезДескрипторов = Новый ТаблицаЗначений;
	КонтейнерыБезДескрипторов.Колонки.Добавить("КонтейнерСотрудников");
	КонтейнерыБезДескрипторов.Колонки.Добавить("Изменение");
	
	Для Каждого СтрокаКонтейнера Из КонтейнерыДескрипторов Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("КонтейнерСотрудников", СтрокаКонтейнера.КонтейнерСотрудников);
		ПараметрыОтбора.Вставить("Изменение", СтрокаКонтейнера.Изменение);
		
		НайденныеСтроки = ТаблицаРезультата.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденнаяСтрока = НайденныеСтроки[0];
			НайденныеДескрипторы.Добавить(НайденнаяСтрока.Дескриптор);
		Иначе
			СтрокаКонтейнераБезДескриптора = КонтейнерыБезДескрипторов.Добавить();
			СтрокаКонтейнераБезДескриптора.КонтейнерСотрудников = СтрокаКонтейнера.КонтейнерСотрудников;
			СтрокаКонтейнераБезДескриптора.Изменение = СтрокаКонтейнера.Изменение;
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатПоиска = Новый Структура;
	РезультатПоиска.Вставить("НайденныеДескрипторы", НайденныеДескрипторы);
	РезультатПоиска.Вставить("КонтейнерыБезДескрипторов", КонтейнерыБезДескрипторов);
	
	Возврат РезультатПоиска;
	
КонецФункции

// Формирует пустую стркутуру параметров расчета хэша.
// 
// Возвращаемое значение:
//  Структура - Пустая структура параметров расчета хэша:
//   * ВидОбъекта - Неопределено, СправочникСсылка.ВидыМероприятий, СправочникСсылка.ВидыДокументов - Вид объекта.
//   * ВопросДеятельности - СправочникСсылка.ВопросыДеятельности.
//   * ГрифДоступа - СправочникСсылка.ГрифыДоступа.
//   * Организация - СправочникСсылка.Организации.
//   * Папка - Неопределено, ОпределяемыйТип.Папки - Папка.
//   * ПапкаПередаетВсеПрава - Булево.
//   * Проект - СправочникСсылка.Проекты.
//   * Подразделение - СправочникСсылка.СтруктураПредприятия.
//   * КонтейнерСотрудников - Неопределено, ОпределяемыйТип.КонтейнерыСотрудников - Контейнер сотрудников.
//   * Изменение - Булево.
//   * ОбъектДоступа - Неопределено, БизнесПроцессСсылка - Объект доступа.
//   * ДляЛокальныхАдминистраторов - Булево.
//   * Контрагенты - ТаблицаЗначений - Контрагенты:
//      ** ГруппаДоступа - СправочникСсылка.ГруппыДоступаКонтрагентов.
//   * ФизическиеЛица - ТаблицаЗначений - Физические лица:
//      ** ГруппаДоступа - СправочникСсылка.ГруппыДоступаФизическихЛиц.
//   * НастройкаПрав - ТаблицаЗначений - Физические лица:
//      ** Пользователь - ОпределяемыйТип.КонтейнерыСотрудников.
//      ** Право - Строка.
//      ** ПравоЗапрещено - Булево.
//
Функция НовыеПараметрыРасчетаХэша() Экспорт
	
	ПараметрыРасчетаХэша = Новый Структура;
	ПараметрыРасчетаХэша.Вставить("ВидОбъекта", Неопределено);
	ПараметрыРасчетаХэша.Вставить("ВопросДеятельности", Справочники.ВопросыДеятельности.ПустаяСсылка());
	ПараметрыРасчетаХэша.Вставить("ГрифДоступа", Справочники.ГрифыДоступа.ПустаяСсылка());
	ПараметрыРасчетаХэша.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	ПараметрыРасчетаХэша.Вставить("Папка", Неопределено);
	ПараметрыРасчетаХэша.Вставить("ПапкаПередаетВсеПрава", Ложь);
	ПараметрыРасчетаХэша.Вставить("Проект", Справочники.Проекты.ПустаяСсылка());
	ПараметрыРасчетаХэша.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	
	ПараметрыРасчетаХэша.Вставить("КонтейнерСотрудников", Неопределено);
	ПараметрыРасчетаХэша.Вставить("Изменение", Ложь);
	ПараметрыРасчетаХэша.Вставить("ОбъектДоступа", Неопределено);
	
	ПараметрыРасчетаХэша.Вставить("ДляЛокальныхАдминистраторов", Ложь);
	
	ПараметрыРасчетаХэша.Вставить("Контрагенты", Новый ТаблицаЗначений);
	ПараметрыРасчетаХэша.Контрагенты.Колонки.Добавить("ГруппаДоступа");
	
	ПараметрыРасчетаХэша.Вставить("ФизическиеЛица", Новый ТаблицаЗначений);
	ПараметрыРасчетаХэша.ФизическиеЛица.Колонки.Добавить("ГруппаДоступа");
	
	ПараметрыРасчетаХэша.Вставить("НастройкаПрав", Новый ТаблицаЗначений);
	ПараметрыРасчетаХэша.НастройкаПрав.Колонки.Добавить("Пользователь");
	ПараметрыРасчетаХэша.НастройкаПрав.Колонки.Добавить("Право");
	ПараметрыРасчетаХэша.НастройкаПрав.Колонки.Добавить("ПравоЗапрещено");
	
	Возврат ПараметрыРасчетаХэша;
	
КонецФункции

// Рассчитывает хэш по переданным параметрам.
//
// Параметры:
//  ПараметрыРасчетаХэша - см. Справочники.ДескрипторыДоступаОбъектов.НовыеПараметрыРасчетаХэша.
// 
// Возвращаемое значение:
//  Число - Хэш значение по переданным параметрам.
//
Функция РассчитатьХэш(ПараметрыРасчетаХэша) Экспорт
	
	// Сборка хэш-строки
	ХэшСтрока = "";
	ДобавитьЗначениеКХэшСтроке(ХэшСтрока, ПараметрыРасчетаХэша.ВидОбъекта);
	ДобавитьЗначениеКХэшСтроке(ХэшСтрока, ПараметрыРасчетаХэша.ВопросДеятельности);
	ДобавитьЗначениеКХэшСтроке(ХэшСтрока, ПараметрыРасчетаХэша.ГрифДоступа);
	ДобавитьЗначениеКХэшСтроке(ХэшСтрока, ПараметрыРасчетаХэша.Организация);
	ДобавитьЗначениеКХэшСтроке(ХэшСтрока, ПараметрыРасчетаХэша.Папка);
	ДобавитьЗначениеКХэшСтроке(ХэшСтрока, ПараметрыРасчетаХэша.ПапкаПередаетВсеПрава);
	ДобавитьЗначениеКХэшСтроке(ХэшСтрока, ПараметрыРасчетаХэша.Проект);
	ДобавитьЗначениеКХэшСтроке(ХэшСтрока, ПараметрыРасчетаХэша.Подразделение);
	
	ДобавитьЗначениеКХэшСтроке(ХэшСтрока, ПараметрыРасчетаХэша.КонтейнерСотрудников);
	ДобавитьЗначениеКХэшСтроке(ХэшСтрока, ПараметрыРасчетаХэша.Изменение);
	ДобавитьЗначениеКХэшСтроке(ХэшСтрока, ПараметрыРасчетаХэша.ОбъектДоступа);
	
	Если ПараметрыРасчетаХэша.ДляЛокальныхАдминистраторов Тогда
		ДобавитьЗначениеКХэшСтроке(ХэшСтрока, ПараметрыРасчетаХэша.ДляЛокальныхАдминистраторов);
	КонецЕсли;
	
	// Добавление ТЧ Контрагенты
	Для Каждого Эл Из ПараметрыРасчетаХэша.Контрагенты Цикл
		ДобавитьЗначениеКХэшСтроке(ХэшСтрока, Эл.ГруппаДоступа);
	КонецЦикла;
	
	// Добавление ТЧ ФизическиеЛица
	Для Каждого Эл Из ПараметрыРасчетаХэша.ФизическиеЛица Цикл
		ДобавитьЗначениеКХэшСтроке(ХэшСтрока, Эл.ГруппаДоступа);
	КонецЦикла;
	
	// Добавление ТЧ НастройкаПрав
	Для Каждого Эл Из ПараметрыРасчетаХэша.НастройкаПрав Цикл
		ДобавитьЗначениеКХэшСтроке(ХэшСтрока, Эл.Пользователь);
		ДобавитьЗначениеКХэшСтроке(ХэшСтрока, Эл.Право);
		ДобавитьЗначениеКХэшСтроке(ХэшСтрока, Эл.ПравоЗапрещено);
	КонецЦикла;
	
	// Вычисление хэш-значения
	Хэш = ДокументооборотПраваДоступаПовтИсп.ВычислитьХэшПоСтроке(ХэшСтрока);
	
	Возврат Хэш;
	
КонецФункции

// Определяет хэши индивидуальных дескрипторов.
//
// Параметры:
//  ИдентификаторОбъектаМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//  КонтейнерыДескрипторов - ТаблицаЗначений - Конейтнеры дескрипторов:
//   * КонтейнерСотрудников - ОпределяемыйТип.КонтейнерыСотрудников.
//   * Изменение - Булево.
// 
// Возвращаемое значение:
//  Массив из Строка - Хэши индивидуальных дескрипторов.
//
Функция ХэшиИндивидуальныхДескрипторов(ИдентификаторОбъектаМетаданных, КонтейнерыДескрипторов) Экспорт
	
	ХэшиИндивидуальныхДескрипторов = Новый Массив;
	
	Для Каждого СтрокаКонтейнера Из КонтейнерыДескрипторов Цикл
		
		ПараметрыРасчетаХэша = НовыеПараметрыРасчетаХэша();
		ПараметрыРасчетаХэша.КонтейнерСотрудников = СтрокаКонтейнера.КонтейнерСотрудников;
		ПараметрыРасчетаХэша.Изменение = СтрокаКонтейнера.Изменение;
		
		Хэш = РассчитатьХэш(ПараметрыРасчетаХэша);
		
		ХэшиИндивидуальныхДескрипторов.Добавить(Хэш);
		
	КонецЦикла;
	
	Возврат ХэшиИндивидуальныхДескрипторов;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Ссылка");
	Поля.Добавить("КонтейнерСотрудников");
	Поля.Добавить("Изменение");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Данные.КонтейнерСотрудников <> Неопределено Тогда
		Представление = Строка(Данные.КонтейнерСотрудников)
			+ " (" + ?(Данные.Изменение, "Изменение", "Чтение") + ")";
	Иначе
		Представление = Данные.Ссылка.УникальныйИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Рассчитывает права пустых дескрипторов и дескрипторов групп,
// удаляет эти дескрипторы из массива
//  
// Параметры:
//  
//  Дескрипторы - Массив - массив дескрипторов, чьи права нужно рассчитать
//  ИдОбъекта - Ссылка - идентификатор объекта метаданных, назначенный переданным дескрипторам
//  МенеджерОбъектаДоступа - СправочникМенеджер, ДокументМенеджер, ... - менеджер объекта доступа
//  
Процедура ОбработатьДескрипторыИсключения(Дескрипторы, ИдОбъекта, МенеджерОбъектаДоступа)
	
	// Дескрипторы групп и пустые дескрипторы - учитываются только права ролей.
	ЗапросПоДескрипторамГрупп = Новый Запрос(
		"ВЫБРАТЬ
		|	ДескрипторыДоступаОбъектов.Ссылка КАК Дескриптор
		|ИЗ
		|	Справочник.ДескрипторыДоступаОбъектов КАК ДескрипторыДоступаОбъектов
		|ГДЕ
		|	ДескрипторыДоступаОбъектов.Ссылка В(&Дескрипторы)
		|	И (ДескрипторыДоступаОбъектов.Группа
		|			ИЛИ ДескрипторыДоступаОбъектов.ЭтоПустойДескриптор)");
		
	ЗапросПоДескрипторамГрупп.УстановитьПараметр("Дескрипторы", Дескрипторы);
	Результат = ЗапросПоДескрипторамГрупп.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДескрипторыИсключения = Результат.Выгрузить().ВыгрузитьКолонку("Дескриптор");
	
	Для Каждого ДескрипторГруппы Из ДескрипторыИсключения Цикл
		Индекс = Дескрипторы.Найти(ДескрипторГруппы);
		Если Индекс <> Неопределено Тогда
			Дескрипторы.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	ЗапросПоПравам = ЗапросДляСтандартногоРасчетаПрав(
		ДескрипторыИсключения, ИдОбъекта, МенеджерОбъектаДоступа);
	
	Результат = ЗапросПоПравам.Выполнить();
	ВыборкаПоДескрипторам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДескрипторам.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ПраваПоДескрипторамДоступаОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Дескриптор.Установить(ВыборкаПоДескрипторам.Дескриптор);
		
		Выборка = ВыборкаПоДескрипторам.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		Индекс = ДескрипторыИсключения.Найти(ВыборкаПоДескрипторам.Дескриптор);
		Если Индекс <> Неопределено Тогда
			ДескрипторыИсключения.Удалить(Индекс);
		КонецЕсли;
		
	КонецЦикла;
	
	// Если дескриптор не попал в запрос, значит его права должны быть пустыми
	Для Каждого Дескриптор Из ДескрипторыИсключения Цикл
		НаборЗаписей = РегистрыСведений.ПраваПоДескрипторамДоступаОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Дескриптор.Установить(Дескриптор);
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьНеиспользуемыеРеквизитыДескриптора(Дескриптор)
	
	НеИспользуемыеРеквизиты = ДокументооборотПраваДоступаПовтИсп.НеиспользуемыеРеквизитыДескриптора(
		Дескриптор.ИдентификаторОбъектаМетаданных);
	
	Для Каждого ИмяРеквизита Из НеИспользуемыеРеквизиты Цикл
		
		ЗначениеРеквизита = Дескриптор[ИмяРеквизита];
		Если ТипЗнч(ЗначениеРеквизита) = Тип("СправочникТабличнаяЧасть.ДескрипторыДоступаОбъектов.Контрагенты") Или
			ТипЗнч(ЗначениеРеквизита) = Тип("СправочникТабличнаяЧасть.ДескрипторыДоступаОбъектов.ФизическиеЛица") Тогда
			Дескриптор[ИмяРеквизита].Очистить();
		Иначе
			Дескриптор[ИмяРеквизита] = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет точное сравнение двух дескрипторов по всем табличным частям. 
// Возвращает Истина если дескрипторы одинаковы
Функция ДескрипторыОдинаковы(Дескриптор1, Дескриптор2)
	
	ТабличныеЧасти = Новый ТаблицаЗначений;
	ТабличныеЧасти.Колонки.Добавить("ИмяТабличнойЧасти");
	ТабличныеЧасти.Колонки.Добавить("ПоляДляПроверки");
	ТабличныеЧасти.Колонки.Добавить("КоличествоЗаписей");
	
	// Контрагенты
	ТЧ = ТабличныеЧасти.Добавить();
	ТЧ.ИмяТабличнойЧасти = "Контрагенты";
	ПоляДляПроверки = Новый Массив;
	ПоляДляПроверки.Добавить("ГруппаДоступа");
	ТЧ.ПоляДляПроверки = ПоляДляПроверки;
	
	// ФизическиеЛица
	ТЧ = ТабличныеЧасти.Добавить();
	ТЧ.ИмяТабличнойЧасти = "ФизическиеЛица";
	ПоляДляПроверки = Новый Массив;
	ПоляДляПроверки.Добавить("ГруппаДоступа");
	ТЧ.ПоляДляПроверки = ПоляДляПроверки;
	
	// НастройкаПрав
	ТЧ = ТабличныеЧасти.Добавить();
	ТЧ.ИмяТабличнойЧасти = "НастройкаПрав";
	ПоляДляПроверки = Новый Массив;
	ПоляДляПроверки.Добавить("Пользователь");
	ПоляДляПроверки.Добавить("Право");
	ПоляДляПроверки.Добавить("ПравоЗапрещено");
	ПоляДляПроверки.Добавить("НаследованиеРазрешено");
	ТЧ.ПоляДляПроверки = ПоляДляПроверки;
	
	// Сравнение количества записей
	Для Каждого ТЧ из ТабличныеЧасти Цикл
		ТЧ.КоличествоЗаписей = Дескриптор1[ТЧ.ИмяТабличнойЧасти].Количество();
		Если Дескриптор2[ТЧ.ИмяТабличнойЧасти].Количество() <> ТЧ.КоличествоЗаписей Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// Поэлементное сравнение
	Для Каждого ТЧ из ТабличныеЧасти Цикл
		Если Не ТабличныеЧастиДескрипторовОдинаковы(Дескриптор1, Дескриптор2, 
			ТЧ.ИмяТабличнойЧасти, ТЧ.ПоляДляПроверки, ТЧ.КоличествоЗаписей) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции	

Функция ТабличныеЧастиДескрипторовОдинаковы(Дескриптор1, Дескриптор2, ИмяТабличнойЧасти, ПоляДляПроверки, КоличествоЗаписей)
	
	Для Сч = 0 По КоличествоЗаписей - 1 Цикл
		Для каждого ИмяПоля из ПоляДляПроверки Цикл
			
			Если Дескриптор1[ИмяТабличнойЧасти][Сч][ИмяПоля] <> Дескриптор2[ИмяТабличнойЧасти][Сч][ИмяПоля] Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Для служебного использования.
// 
Процедура ОбработатьВыборкуУстаревшихДанных(Выборка, ЗапросДляПроверкиСсылок, ОбработаноУспешно, ОбработаноСОшибками)
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Дескриптор.ПолучитьОбъект();
		
		Попытка
			Объект.Заблокировать();
		Исключение
			// Объект может быть уже заблокирован
			ОбработаноСОшибками = ОбработаноСОшибками + 1;
			Продолжить;
		КонецПопытки;
		
		НачатьТранзакцию();
		Попытка
			// Удаление дескриптора
			Объект.Удалить();
			ЗапросДляПроверкиСсылок.УстановитьПараметр("Дескриптор", Выборка.Дескриптор);
			РезультатЗапросаПроверки = ЗапросДляПроверкиСсылок.Выполнить(); //@skip-check query-in-loop - порционная обработка
			
			Если РезультатЗапросаПроверки.Пустой() Тогда
				ЗафиксироватьТранзакцию();
				ОбработаноУспешно = ОбработаноУспешно + 1;
			Иначе
				ОтменитьТранзакцию();
				ОбработаноСОшибками = ОбработаноСОшибками + 1;
			КонецЕсли;
		Исключение
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Удаление устаревших дескрипторов доступа объектов'", 
					ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Выборка.Дескриптор.Метаданные(),
				ПолучитьНавигационнуюСсылку(Выборка.Дескриптор),
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ОбработаноСОшибками = ОбработаноСОшибками + 1;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЗначениеКХэшСтроке(ХэшСтрока, Значение)
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		ХэшСтрока = ХэшСтрока + Значение;
		Возврат;
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		ХэшСтрока = ХэшСтрока + Строка(Значение);
		Возврат;
	КонецЕсли;
	
	Строка = Строка(Значение.УникальныйИдентификатор());
	ХэшСтрока = ХэшСтрока + Строка + " ";
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
