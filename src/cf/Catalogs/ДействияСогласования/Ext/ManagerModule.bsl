#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("Ссылка");
	Поля.Добавить("ВидДействия");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Представление = ДействияСервер.ПредставлениеДействия(Данные.Ссылка, Данные.ВидДействия);
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ДействияСервер.ОбработкаПолученияФормы(
		ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
		
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Заполняет дерево на закладке Обработка
// 
// Параметры
// ЭлементДействие - элемент дерева 
// Действие - ссылка на действие 
// ПредметОбъект - ОпределяемыйТип.ПредметДействияОбъект.
//
Процедура ЗаполнитьДействиеВФормеПредмета(ЭлементДействие, Действие, ПредметОбъект, 
	НужнаИсторияОбработки, ПечатьКарточкиДокумента = Ложь) Экспорт 
	
	Если ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияСогласования") Тогда 
		ЗначенияЗаполнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие,
			ИменаРеквизитовДляЗаполнения());
		
		ДействиеСсылка = Действие;
		УчастникиДействия = ЗначенияЗаполнения.Участники.Выгрузить();
		УчастникиДействия.Сортировать("НомерСтроки Возр");
		
		ЭтапыДействия = ЗначенияЗаполнения.Этапы.Выгрузить();
		ЭтапыДействия.Сортировать("НомерСтроки Возр");
		
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникОбъект.ДействияСогласования") Тогда 
		ЗначенияЗаполнения = Новый Структура(ИменаРеквизитовДляЗаполнения());
		ЗаполнитьЗначенияСвойств(ЗначенияЗаполнения, Действие);
		УчастникиДействия = Действие.Участники;
		ЭтапыДействия = Действие.Этапы;
		ДействиеСсылка = Действие.Ссылка;
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестный тип'");
	КонецЕсли;
	
	ЗначенияЗаполнения.Вставить("Действие", ДействиеСсылка);
	ЗначенияЗаполнения.Вставить("ВариантУстановкиСрока", 
		Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок);
	ЗначенияЗаполнения.Вставить("СрокДействия", Дата(1, 1, 1));
	
	ЭтапыДействияТЧ = ДействияСервер.НоваяТаблицаЭтапы();
	Для Каждого СтрЭтап Из ЭтапыДействия Цикл
		НовСтр = ЭтапыДействияТЧ.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, СтрЭтап);
		НовСтр.Наименование = СтрЭтап.НаименованиеЭтапа;
	КонецЦикла;	
	
	ЕстьЗадачаОзнакомиться = Ложь;
	Для Каждого Участник Из УчастникиДействия Цикл 
		
		Если Не ЗначениеЗаполнено(Участник.Участник) Тогда 
			Продолжить;
		КонецЕсли;
		
		// Обрабатывающих показываем только при "Выполнении"
		Если ДействияСервер.ЭтоОбрабатывающийРезультатИЗадачаВыполнена(
			ДействиеСсылка,	Участник.ФункцияУчастника, 
			Перечисления.ФункцииУчастниковСогласования.ОбрабатывающийРезультат,	
			Участник.Участник, Участник.Идентификатор) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Участник.ФункцияУчастника = Перечисления.ФункцииУчастниковСогласования.ОбрабатывающийРезультат Тогда
			ЕстьЗадачаОзнакомиться = Истина;
		КонецЕсли;	
			 
	КонецЦикла;
	
	ИдЭтапаСогласовать = Неопределено;
	Если ЭтапыДействия.Количество() = 0 И ЕстьЗадачаОзнакомиться Тогда
		// добавим псевдо "этап"  Согласовать
		ИдЭтапаСогласовать = Новый УникальныйИдентификатор;
		НовСтр = ЭтапыДействияТЧ.Добавить();
		НовСтр.Функция = ПредопределенноеЗначение(
			"Перечисление.ФункцииУчастниковСогласования.Согласующий");
		НовСтр.Наименование = НСтр("ru = 'Согласовать'");
		НовСтр.Идентификатор = ИдЭтапаСогласовать;
	КонецЕсли;
	
	ИдентификаторОбрабатывающегоРезультат = ДействияСервер.ПредопределенныйИдентификаторУчастника(
		"ЭтапОбрабатывающийРезультатСогласование");
	Участники = ДействияСервер.НоваяТаблицаУчастники();
	Для Каждого Участник Из УчастникиДействия Цикл 
		
		Если Не ЗначениеЗаполнено(Участник.Участник) Тогда 
			Продолжить;
		КонецЕсли;
		
		// Обрабатывающих показываем только при "Выполнении"
		Если ДействияСервер.ЭтоОбрабатывающийРезультатИЗадачаВыполнена(
			ДействиеСсылка,	Участник.ФункцияУчастника, 
			Перечисления.ФункцииУчастниковСогласования.ОбрабатывающийРезультат,	
			Участник.Участник, Участник.Идентификатор) Тогда
			Продолжить;
		КонецЕсли;	 
		
		ДобавляемыйУчастник = Участники.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавляемыйУчастник, Участник);
		ДобавляемыйУчастник.Функция = Участник.ФункцияУчастника;
		
		Если ДобавляемыйУчастник.Функция = Перечисления.ФункцииУчастниковСогласования.Согласующий 
			И ЭтапыДействия.Количество() = 0 И ЕстьЗадачаОзнакомиться Тогда
				
			ДобавляемыйУчастник.ИдентификаторЭтапа = ИдЭтапаСогласовать;
			
		КонецЕсли;	
		
		Если ДобавляемыйУчастник.Функция = Перечисления.ФункцииУчастниковСогласования.ОбрабатывающийРезультат Тогда
			ДобавляемыйУчастник.ИдентификаторЭтапа = ИдентификаторОбрабатывающегоРезультат;
			
			НовСтр = ЭтапыДействияТЧ.Добавить();
			НовСтр.Функция = ПредопределенноеЗначение(
				"Перечисление.ФункцииУчастниковСогласования.ОбрабатывающийРезультат");
			НовСтр.Наименование = НСтр("ru = 'Ознакомиться с результатом согласования'");
			НовСтр.Идентификатор = ИдентификаторОбрабатывающегоРезультат;
		КонецЕсли;
	КонецЦикла;
	
	ЗначенияЗаполнения.Вставить("Участники", Участники);
	
	ПорядокЭтапов = Новый Массив;
	Для Каждого СтрокаЭтапа Из ЭтапыДействия Цикл
		ПорядокЭтапов.Добавить(СтрокаЭтапа.Идентификатор);
	КонецЦикла;
	ПорядокЭтапов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПорядокЭтапов);
	
	ДействияСервер.ЗаполнитьДействиеВФормеПредмета(
		ЭлементДействие, ДействиеСсылка, ЗначенияЗаполнения, ПредметОбъект, 
		ПорядокЭтапов, ЭтапыДействияТЧ, НужнаИсторияОбработки, ПечатьКарточкиДокумента);
	
КонецПроцедуры

// Проверяет строки участников на возможность начать обработку по ним.
//  
// Параметры:
// 	Действие - СправочникСсылка.ДействияСогласования - Ссылка на действие.
// 	ПредметОбъект - ОпределяемыйТип.ПредметДействияОбъект. 
// 	СообщенияОбОшибках - Массив - массив сообщений об ошибках.
// 	ПараметрыПроверок - Структура - вспомогательные параметры проверки перед запуском.
//
Процедура ПроверкаПередЗапуском(Действие, ПредметОбъект, СообщенияОбОшибках, ПараметрыПроверок) Экспорт

	СогласованиеВРежимеЗамечаний = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "СогласованиеВРежимеЗамечаний");
	
	// РолиФайлов
	Если СогласованиеВРежимеЗамечаний И Не ЕстьРольОбязательная(Действие.Предмет) Тогда
		ТекстОшибки = НСтр("ru = 'В виде документа указаны роли.
		|Но ни у одной роли нет признака ""Обязательный файл"".
		|Для согласования в режиме замечаний необходимо задать хотя бы у одной роли признак ""Обязательный файл"".
		|Обратитесь к администратору.'");
		СообщенияОбОшибках.Добавить(ТекстОшибки);
	КонецЕсли;
	
	Если СогласованиеВРежимеЗамечаний Тогда // проверим что нет подписанных ЭП файлов.
		МассивФайлов = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(ПредметОбъект.Ссылка, Ложь, Истина);
		ЗначенияПоля = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивФайлов, "ПодписанЭП");
		
		Для Каждого КлючИЗначение Из ЗначенияПоля Цикл
			
			Если КлючИЗначение.Значение = Истина Тогда // Подписан
			
				ТекстОшибки = СтрШаблон(НСтр("ru = 'В документе есть подписанный ЭП файл (%1).
				|Согласование в режиме замечаний невозможно.
				|Обратитесь к администратору.'"), КлючИЗначение.Ключ);
				
				СообщенияОбОшибках.Добавить(ТекстОшибки);
			
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЕсли;	
		
КонецПроцедуры

// Возвращает всех участников действия, кроме обрабатывающего результат
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияСогласования - ссылка на действие
// 	
// Возвращаемое значение:
// 	ТаблицаЗначений - таблица участников действия, кроме обрабатывающего результат.
// 
Функция УчастникиДействия(Действие) Экспорт
	
	Участники = ДействияСервер.НоваяТаблицаУчастники();
	
	РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие, "Участники");
	УчастникиДействия = РеквизитыДействия.Участники.Выгрузить();
	УчастникиДействия.Сортировать("НомерСтроки Возр");
	Для Каждого Участник Из УчастникиДействия Цикл 
		
		Если ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(
			Участник.ФункцияУчастника)
			Или Не ЗначениеЗаполнено(Участник.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавляемыйУчастник = Участники.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавляемыйУчастник, Участник);
		ДобавляемыйУчастник.Функция = Участник.ФункцияУчастника;
	
	КонецЦикла;
	
	Возврат Участники;
	
КонецФункции

// Возвращает всех участников действия, включая обрабатывающего результат
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияСогласования - ссылка на действие
// 	
// Возвращаемое значение:
// 	ТаблицаЗначений - таблица участников действия, кроме обрабатывающего результат.
// 
Функция ВсеУчастникиДействия(Действие) Экспорт
	
	Участники = ДействияСервер.НоваяТаблицаУчастники();
	
	РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие, "Участники");
	УчастникиДействия = РеквизитыДействия.Участники.Выгрузить();
	
	Для Каждого Участник Из УчастникиДействия Цикл 
		
		Если Не ЗначениеЗаполнено(Участник.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавляемыйУчастник = Участники.Добавить();
		ЗаполнитьЗначенияСвойств(ДобавляемыйУчастник, Участник);
		ДобавляемыйУчастник.Функция = Участник.ФункцияУчастника;
	
	КонецЦикла;
	
	Возврат Участники;
	
КонецФункции

// Готовит действие к выполнению
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияСогласования - ссылка на действие
//
Процедура ПодготовитьДействиеКВыполнению(Действие) Экспорт
	
	РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие, "СогласованиеВРежимеЗамечаний, Предмет");
	СогласованиеВРежимеЗамечаний = РеквизитыДействия.СогласованиеВРежимеЗамечаний;
	Если СогласованиеВРежимеЗамечаний Тогда
		
		СогласованиеВРежимеЗамечанийСервер.НайтиСоздатьВеткуОбработки(Действие);
		
	КонецЕсли;	
	
	РегистрыСведений.ИтерацииДействий.ИнкрементироватьНомерИтерации(Действие);
	
	// для всех участников
	
	УчастникиДействия = УчастникиДействия(Действие);
	Для Каждого Участник Из УчастникиДействия Цикл
		РегистрыСведений.ИтерацииДействий.ИнкрементироватьНомерИтерации(Действие, Участник.Идентификатор);
	КонецЦикла;	
	
КонецПроцедуры	

// Отмечает в действии принятие к выполнению
//
//Параметры:
//  Действие - СправочникСсылка.ДействияСогласования - ссылка на действие
//  ПараметрыИзменения -Структура
//
Процедура ОтметитьПринятиеКИсполнению(Действие, ПараметрыИзменения) Экспорт
	
	Участники = УчастникиДействия(Действие);
	
	// есть среди исполнителей (не "ознакомиться")
	Если Участники.Найти(ПараметрыИзменения.ИдентификаторУчастника, "Идентификатор") <> Неопределено Тогда
		РаботаСВизамиСогласования.ОбновитьВизуУчастника(Действие, ПараметрыИзменения);
	КонецЕсли;	
	
КонецПроцедуры	

// Возвращает идентификатор этапа по ИД участника.
// 
// Параметры:
//  Действие - СправочникСсылка.ДействияСогласования - Действие
//  ИдентификаторУчастника - УникальныйИдентификатор - Идентификатор участника
//  ВозвращатьЗначение - Булево - если Истина, то будет возвращать не пустой ИД.
// 
// Возвращаемое значение:
//  ИдентификаторЭтапа - УникальныйИдентификатор - идентификатор этапа
Функция ИдентификаторЭтапаУчастника(Действие, ИдентификаторУчастника, ВозвращатьЗначение = Истина) Экспорт
	
	УчастникиДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Участники").Выгрузить();
	ИдентификаторЭтапа = Неопределено;
	
	Строка = УчастникиДействия.Найти(ИдентификаторУчастника, "Идентификатор");
	Если Строка <> Неопределено Тогда
		ИдентификаторЭтапа = Строка.ИдентификаторЭтапа;
	КонецЕсли;	
	
	Если ВозвращатьЗначение И
		(ИдентификаторЭтапа = Неопределено
			Или  ИдентификаторЭтапа = ДействияСервер.ПредопределенныйИдентификаторУчастника("Пустой")) Тогда
		ИдентификаторЭтапа = ДействияСервер.ПредопределенныйИдентификаторУчастника(
			"ЭтапСогласовать");
	КонецЕсли;
	
	Возврат ИдентификаторЭтапа;
	
КонецФункции

// Возвращает название этапа.
// 
// Параметры:
//  Действие - СправочникСсылка.ДействияСогласования - Действие
//  ИдентификаторЭтапа - УникальныйИдентификатор - Идентификатор этапа
// 
// Возвращаемое значение:
//  НазваниеЭтапа - Строка - Название этапа по идентификатору
Функция ЭтапПоИдентификатору(Действие, ИдентификаторЭтапа) Экспорт
	
	НазваниеЭтапа = "";
	Если ИдентификаторЭтапа = Неопределено Тогда
		Возврат НазваниеЭтапа;
	КонецЕсли;
	
	ЭтапыДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Этапы").Выгрузить();
	
	Строка = ЭтапыДействия.Найти(ИдентификаторЭтапа, "Идентификатор");
	Если Строка <> Неопределено Тогда
		НазваниеЭтапа = Строка.НаименованиеЭтапа;
	КонецЕсли;	
	
	Возврат НазваниеЭтапа;
	
КонецФункции

// Проверяет необходимость выполнения действия.
//
// Если не соблюдены условия для обязательного действия, то
// генерируется исключение.
//
// Параметры:
//  Действие - ОпределяемыйТип.ДействияОбъект - объект действия.
//  ПропуститьДействие - Булево - неявно возвращаемый параметр, принимает значение Истина,
//                            если необходимо пропустить исполнение действия.
//
Процедура ПроверитьНеобходимостьВыполненияДействия(Действие, ПропуститьДействие) Экспорт
	
	ПропуститьДействие = Ложь;
	
	Участники = УчастникиДействия(Действие);
	
	// Проверяем наличие участников и если их нет,
	// то отказываемся от создания процесса по действию.
	Если Участники.Количество() = 0 Тогда
		ПропуститьДействие = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает представление действия строкой.
// 
// Параметры:
// 	Действие - СправочникСсылка.ДействияСогласования
// 	
// Возвращаемое значение:
//  Строка
//
Функция ПредставлениеДействияСтрокой(Действие) Экспорт
	
	СтрокиПредставления = Новый	Массив;
		
	РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Действие, "ВидДействия, Участники");
	
	РеквизитыДействия.Участники = РеквизитыДействия.Участники.Выгрузить();
	
	СтрокиПредставления.Добавить(Строка(РеквизитыДействия.ВидДействия));
	СтрокиПредставления.Добавить(Символы.ПС);
	
	ФункцииУчастников = Перечисления.ФункцииУчастниковСогласования;
	
	Для Каждого СтрокаТаблицы Из РеквизитыДействия.Участники Цикл
				
		Если СтрокаТаблицы.ФункцияУчастника <> ФункцииУчастников.Согласующий Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиПредставления.Добавить(Символы.ПС);
		СтрокиПредставления.Добавить(Строка(СтрокаТаблицы.Участник));
		
	КонецЦикла;
	
	Возврат СтрСоединить(СтрокиПредставления);
	
КонецФункции

// Возвращает участника, которого необходимо ознакомить с результатом завершения действия.
//
// Параметры:
//	Действие - СправочникСсылка.ДействияСогласования - Действие, в котором нужно найти участника, которого необходимо
//													   ознакомить с результатом.
//
// Возвращаемое значение:
//	* СправочникСсылка.Сотрудники,
//	  СправочникСсылка.ПолныеРоли, 
//	  СправочникСсылка.АвтоподстановкиДляОбъектов - участник, которого необходимо ознакомить с результатом.
//
Функция ОзнакамливаемыйСРезультатом(Действие) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ОзнакамливаемыйСРезультатом = Неопределено;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Участник КАК Участник
		|ИЗ
		|	Справочник.ДействияСогласования.Участники
		|ГДЕ
		|	Ссылка = &Действие
		|	И ФункцияУчастника = ЗНАЧЕНИЕ(Перечисление.ФункцииУчастниковСогласования.ОбрабатывающийРезультат)");
	Запрос.УстановитьПараметр("Действие", Действие);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОзнакамливаемыйСРезультатом = Выборка.Участник;
	КонецЕсли;

	Возврат ОзнакамливаемыйСРезультатом;
		
КонецФункции

// Возвращает описание результата завершения действия.
//
// Параметры:
//	Действие - СправочникСсылка.ДействияСогласования - Действие, для которого необходимо получить описание
//													   результата завершения.
//	КодЯзыка - Строка - Код языка пользователя
//
// Возвращаемое значение:
//	Строка - Описание результата завершения действия.
//
Функция ОписаниеРезультатаЗавершенияДействия(Действие, КодЯзыка) Экспорт

	ОписаниеРезультата = "";
	
	РезультатДействия = РегистрыСведений.РезультатыДействий.РезультатДействия(Действие);	
	Если РезультатДействия = Перечисления.РезультатыСогласования.Согласовано Тогда
		ОписаниеРезультата = НСтр("ru = 'Результат согласования: Согласовано'", КодЯзыка);
	ИначеЕсли РезультатДействия = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда
		ОписаниеРезультата = НСтр("ru = 'Результат согласования: Согласовано с замечаниями'", КодЯзыка);
	ИначеЕсли РезультатДействия = Перечисления.РезультатыСогласования.НеСогласовано Тогда
		ОписаниеРезультата = НСтр("ru = 'Результат согласования: Не согласовано'", КодЯзыка);
	КонецЕсли;	
					
	Возврат ОписаниеРезультата;
	
КонецФункции

// Возвращает замечания в статусе отказать.
// 
// Параметры:
//  Действие - СправочникСсылка.ДействияСогласования - Действие
// 
// Возвращаемое значение:
//  Массив, ТаблицаЗначений - Замечания в статусе отказать
Функция ЗамечанияВСтатусеОтказать(Действие) Экспорт
	
	ВеткаОбработки = СогласованиеВРежимеЗамечанийСервер.НайтиВеткуОбработки(Действие);
	Если Не ЗначениеЗаполнено(ВеткаОбработки) Тогда
		Возврат Новый Массив;
	КонецЕсли;	
	
	НомерИтерации = РегистрыСведений.ИтерацииДействий.НомерИтерации(Действие);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Замечания.Замечание,
	|	Замечания.Комментарий,
	|	Замечания.Автор,
	|	Замечания.Дата КАК Дата,
	|	Замечания.ПринятаяРедакция,
	|	Замечания.ИдентификаторАвтора
	|ИЗ
	|	Справочник.Замечания КАК Замечания
	|ГДЕ
	|	Замечания.ВеткаОбработки = &ВеткаОбработки
	|	И Замечания.ПометкаУдаления = ЛОЖЬ
	|	И Замечания.ТипЗамечания = &ТипЗамечания
	|	И Замечания.СтатусПринятия = &СтатусПринятия
	|	И Замечания.НомерЭтапа = &НомерЭтапа
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Запрос.УстановитьПараметр("ВеткаОбработки", ВеткаОбработки);
	Запрос.УстановитьПараметр("НомерЭтапа", НомерИтерации);
	Запрос.УстановитьПараметр("ТипЗамечания", Перечисления.ТипыЗамечаний.Замечание);
	Запрос.УстановитьПараметр("СтатусПринятия", Перечисления.СтатусыПринятияЗамечаний.НеПринята);

	Замечания = Запрос.Выполнить().Выгрузить();
	Возврат Замечания;
	
КонецФункции

// Возвращает порядок выполнения участника по ИД.
// 
// Параметры:
//  Действие - СправочникСсылка.ДействияСогласования - Действие
//  ИдентификаторУчастника - УникальныйИдентификатор - Идентификатор участника
// 
// Возвращаемое значение:
//  ПорядокУчастника - ПеречислениеСсылка.ПорядокВыполненияЭтапаДействия - порядок выполнения участника
Функция ПорядокУчастника(Действие, ИдентификаторУчастника) Экспорт
	
	РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие,
		"Участники, ПорядокВыполненияУчастниками, Этапы");
	
	УчастникиДействия = РеквизитыДействия.Участники.Выгрузить();
	ИдентификаторЭтапа = Неопределено;
	
	Строка = УчастникиДействия.Найти(ИдентификаторУчастника, "Идентификатор");
	Если Строка <> Неопределено Тогда
		ИдентификаторЭтапа = Строка.ИдентификаторЭтапа;
	КонецЕсли;	
	
	Если ИдентификаторЭтапа = Неопределено
		Или  ИдентификаторЭтапа = ДействияСервер.ПредопределенныйИдентификаторУчастника("Пустой") Тогда
		ПорядокУчастника = РеквизитыДействия.ПорядокВыполненияУчастниками;
	Иначе
		ЭтапыДействия = РеквизитыДействия.Этапы.Выгрузить();
		
		Строка = ЭтапыДействия.Найти(ИдентификаторЭтапа, "Идентификатор");
		Если Строка <> Неопределено Тогда
			ПорядокУчастника = Строка.ПорядокВыполненияУчастниками;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПорядокУчастника;
	
КонецФункции

// Возвращает Истина, если все участники (кроме Обрабатывающего результат) имеют запись в РС РезультатыДействий
// 
// Параметры:
//  Действие - СправочникСсылка.ДействияСогласования - Действие
//  ИдентификаторУчастника - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  Булево
Функция ВсеУчастникиИмеютРезультат(Действие, ИдентификаторУчастника) Экспорт 
	
	Участники = УчастникиДействия(Действие);
	Возврат ЕстьРезультатДействияСогласованоПоВсемУчастникам(Действие, Участники, ИдентификаторУчастника);
	
КонецФункции	

// Проверяет, что для всех переданных участников (кроме ИдентификаторУчастника) установлен результат действия Согласовано.
//
// Параметры:
//  Действие - ОпределяемыйТип.Действия - ссылка на действие.
//  Участники - ТаблицаЗначений - таблица участников действия  
//  ИдентификаторУчастника - УникальныйИдентификатор - его исключаем
//
Функция ЕстьРезультатДействияСогласованоПоВсемУчастникам(Действие, Участники, ИдентификаторУчастника) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	УчастникиИдентификаторы = Участники.ВыгрузитьКолонку("Идентификатор");
	Индекс = УчастникиИдентификаторы.Найти(ИдентификаторУчастника);
	Если Индекс <> Неопределено Тогда
		УчастникиИдентификаторы.Удалить(Индекс);
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РезультатыДействий.Участник КАК Участник,
		|	РезультатыДействий.ИдентификаторУчастника КАК ИдентификаторУчастника,
		|	РезультатыДействий.Результат КАК Результат
		|ИЗ
		|	РегистрСведений.РезультатыДействий КАК РезультатыДействий
		|ГДЕ
		|	РезультатыДействий.Действие = &Действие
		|	И РезультатыДействий.ИдентификаторУчастника В(&Участники)
		|	И РезультатыДействий.Результат = ЗНАЧЕНИЕ(Перечисление.РезультатыСогласования.Согласовано)";
	
	Запрос.УстановитьПараметр("Действие", Действие);
	Запрос.УстановитьПараметр("Участники", УчастникиИдентификаторы);
	
	Результаты = Запрос.Выполнить();
	
	КоличествоУчастников = УчастникиИдентификаторы.Количество();
	
	ВсеВыполнилиДействие = (Результаты.Выбрать().Количество() = КоличествоУчастников);
	
	Возврат ВсеВыполнилиДействие;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ВыполнениеДействий

Процедура ОтметитьНачалоВыполнения(Действие, Параметры) Экспорт
	
	// При первом запуске создаем Визы всех согласующих
	Состояние = РегистрыСведений.СостоянияДействий.СостояниеДействия(Действие);
	Если Не ЗначениеЗаполнено(Состояние) Или Состояние = Перечисления.СостоянияВыполненияДействий.ОтложенныйЗапуск Тогда
		РаботаСВизамиСогласования.СоздатьВизыПоДействию(Действие);
	КонецЕсли;
	
	Если Параметры.Функция = Перечисления.ФункцииУчастниковСогласования.Согласующий 
		И Параметры.ИдентификаторПункта = Неопределено Тогда
		Параметры.ИдентификаторПункта = ИдентификаторЭтапаУчастника(
			Действие, Параметры.ИдентификаторУчастника, Ложь);
	КонецЕсли;
	
	ДействияСервер.ОтметитьНачалоВыполнения(Действие, Параметры);
	
КонецПроцедуры

// Отмечает действие Согласование выполненным согласующим.
// При этом увеличивает итерацию исполнения действия текущим согласующим.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияСогласования
//  Параметры - Структура
//
Процедура ОтметитьВыполнение(Действие, Параметры) Экспорт
	
	Если Параметры.Функция = Перечисления.ФункцииУчастниковСогласования.Согласующий Тогда
		Если Параметры.ИдентификаторПункта = Неопределено Тогда
			Параметры.ИдентификаторПункта = ИдентификаторЭтапаУчастника(
				Действие, Параметры.ИдентификаторУчастника, Ложь);
		КонецЕсли;
		
		РаботаСВизамиСогласования.ОбновитьВизуУчастника(Действие, Параметры);
	КонецЕсли;

	Если ((Параметры.Свойство("ЭтоВыполнениеЗадачиПоПочте") И Параметры.ЭтоВыполнениеЗадачиПоПочте) 
		Или (Параметры.Свойство("ЭтоВыполнениеЗадачиПоЭскалации") И Параметры.ЭтоВыполнениеЗадачиПоЭскалации))
		И ЗначениеЗаполнено(Параметры.Комментарий) И Параметры.Результат = Перечисления.РезультатыСогласования.НеСогласовано Тогда
			
		СогласованиеВРежимеЗамечаний = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "СогласованиеВРежимеЗамечаний");
		
		Если СогласованиеВРежимеЗамечаний Тогда
			// это выполнение задач по почте.  создадим замечание привязанное к документу.
			
			Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет");
			
			ВеткаОбработки = СогласованиеВРежимеЗамечанийСервер.НайтиВеткуОбработки(Действие);
			НомерИтерации = РегистрыСведений.ИтерацииДействий.НомерИтерации(Действие);
			
			Замечание = Справочники.Замечания.СоздатьЭлемент();
			
			Замечание.Автор = Параметры.Участник;
			Замечание.РеальныйАвтор = Параметры.Участник;
			Замечание.Дата = Параметры.ДатаИсполнения;
			
			Замечание.НомерЭтапа =  НомерИтерации; 
			Замечание.ТипЗамечания = Перечисления.ТипыЗамечаний.Замечание; 
			Замечание.ВладелецЗамечания = Предмет;  
			Замечание.Документ = Предмет; 
			Замечание.Замечание = Параметры.Комментарий; 
			Замечание.ВеткаОбработки = ВеткаОбработки;
			Замечание.НомерКартинки = 4;
			
			Замечание.Записать();
			
		КонецЕсли;

	КонецЕсли;
	
	Если Параметры.Функция = Перечисления.ФункцииУчастниковСогласования.ОбрабатывающийРезультат
		И Параметры.Свойство("ЭтоВыполнениеЗадачиПоЭскалации") И Параметры.ЭтоВыполнениеЗадачиПоЭскалации Тогда

		СогласованиеВРежимеЗамечаний = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "СогласованиеВРежимеЗамечаний");
		
		Если СогласованиеВРежимеЗамечаний Тогда
			
			ВеткаОбработки = СогласованиеВРежимеЗамечанийСервер.НайтиВеткуОбработки(Действие);
			Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет");
			
			СогласованиеВРежимеЗамечанийСервер.ПометитьНеотработанныеЗамечанияКакОтказанные(
				Предмет, ВеткаОбработки, Параметры.Комментарий);
			
		КонецЕсли;
		
	КонецЕсли;

	ДействияСервер.ОтметитьВыполнение(Действие, Параметры);
	ОбновитьРезультатВыполнения(Действие);
	
КонецПроцедуры

// Обновляет результат выполнения по результатам согласующих.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияСогласования
//
Процедура ОбновитьРезультатВыполнения(Действие) Экспорт
	
	Если РаботаСПроцессамиПоДействиямСобытия.ОбработатьОбновлениеРезультатаВыполненияДействия(
		Действие) Тогда
		
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Состояние = РегистрыСведений.СостоянияДействий.СостояниеДействия(Действие);
	Если Состояние <> Перечисления.СостоянияВыполненияДействий.Выполняется Тогда
		Возврат;
	КонецЕсли;
			
	СостояниеИРезультатПолучены = Ложь;
		
	Результат = Неопределено;
	
	// Если нет согласующих и действие выполняется, то установим ему состояние пропущенного.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Участники.Участник
		|ИЗ
		|	Справочник.ДействияСогласования.Участники КАК Участники
		|ГДЕ
		|	Участники.Ссылка = &Действие
		|	И Участники.ФункцияУчастника = &Функция";
	
	Запрос.УстановитьПараметр("Действие", Действие);
	Запрос.УстановитьПараметр("Функция", Перечисления.ФункцииУчастниковСогласования.Согласующий);
	
	РезультатЗапроса = Запрос.Выполнить();
			
	Если РезультатЗапроса.Пустой() Тогда
		Состояние = Перечисления.СостоянияВыполненияДействий.Пропущено;
		
		ТекущаяОбработка = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Действие);
		
		Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
		Событие.Обработка = ТекущаяОбработка;
		Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.ПропускДействия;
		Событие.Действие = Действие;
		РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
		
		СостояниеИРезультатПолучены = Истина;
	КонецЕсли;
	
	Если Не СостояниеИРезультатПолучены Тогда
		
		// Если не все выполнили свои задачи (состояния отличны от завершенных), то действие выполняется.
		// Иначе завершено, результат действия подсчитывается по результатам согласующих.
		
		Состояние = Перечисления.СостоянияВыполненияДействий.Выполняется;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	СостоянияДействий.ИдентификаторУчастника КАК ИдентификаторУчастника,
			|	СостоянияДействий.Участник КАК Участник,
			|	СостоянияДействий.Функция КАК Функция,
			|	СостоянияДействий.Состояние КАК Состояние
			|ИЗ
			|	РегистрСведений.СостоянияДействий КАК СостоянияДействий
			|ГДЕ
			|	СостоянияДействий.Действие = &Действие
			|	И СостоянияДействий.ИдентификаторУчастника <> &ПустойИдентификатор
			|	И НЕ СостоянияДействий.Состояние В (&КонечныеСостояния)";
		
		Запрос.УстановитьПараметр("Действие", Действие);
		Запрос.УстановитьПараметр("ПустойИдентификатор", УникальныйИдентификаторПустой());
		
		КонечныеСостояния = Новый Массив;
		КонечныеСостояния.Добавить(Перечисления.СостоянияВыполненияДействий.Завершено);
		Запрос.УстановитьПараметр("КонечныеСостояния", КонечныеСостояния);
		
		Если Запрос.Выполнить().Пустой() Тогда
			
			Состояние = Перечисления.СостоянияВыполненияДействий.Завершено;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	РезультатыДействий.Действие КАК Действие,
				|	РезультатыДействий.ИдентификаторУчастника КАК ИдентификаторУчастника,
				|	РезультатыДействий.Функция КАК Функция,
				|	РезультатыДействий.Результат КАК Результат
				|ИЗ
				|	РегистрСведений.РезультатыДействий КАК РезультатыДействий
				|ГДЕ
				|	РезультатыДействий.Действие = &Действие
				|	И РезультатыДействий.Функция = &Функция
				|	И РезультатыДействий.ИдентификаторУчастника <> &ПустойИдентификатор";
			Запрос.УстановитьПараметр("Действие", Действие);
			Запрос.УстановитьПараметр("ПустойИдентификатор", УникальныйИдентификаторПустой());
			Запрос.УстановитьПараметр("Функция", Перечисления.ФункцииУчастниковСогласования.Согласующий);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			ЕстьСогласованоСЗамечаниями = Ложь;
			ЕстьНеСогласовано = Ложь;
			
			Пока Выборка.Следующий() Цикл
				Если Выборка.Результат = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда
					ЕстьСогласованоСЗамечаниями = Истина;
				ИначеЕсли Выборка.Результат = Перечисления.РезультатыСогласования.НеСогласовано Тогда
					ЕстьНеСогласовано = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьНеСогласовано Тогда
				Результат = Перечисления.РезультатыСогласования.НеСогласовано;
			ИначеЕсли ЕстьСогласованоСЗамечаниями Тогда
				Результат = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями;
			Иначе
				Результат = Перечисления.РезультатыСогласования.Согласовано;
			КонецЕсли;
			
		КонецЕсли;
		
		СостояниеИРезультатПолучены = Истина;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат) Тогда
		РегистрыСведений.РезультатыДействий.УстановитьРезультат(Действие, Результат);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Состояние) Тогда
		РегистрыСведений.СостоянияДействий.УстановитьСостояние(Действие, Состояние);
	КонецЕсли;
	
	ОбработкиОбъектовСобытия.ПриЗавершенииДействия(Действие, Состояние);
	
КонецПроцедуры

// Особенная логика, например удаление виз и пр.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияИсполнения
//	Участники  - таблица значений
//
Процедура ПриСбросеРезультатовВыполнения(Действие, Участники) Экспорт
	
	РаботаСВизамиСогласования.ОбработатьВизыДействияПриНачалеИтерации(Действие, Участники);
	
	РегистрыСведений.ИтерацииДействий.ИнкрементироватьНомерИтерации(Действие);
	
	Для Каждого Стр Из Участники Цикл
		
		РегистрыСведений.ИтерацииДействий.ИнкрементироватьНомерИтерации(Действие,
			Стр.Идентификатор);
			
	КонецЦикла;	
	
КонецПроцедуры

// Обработчик события прерывания выполнения выполнения действий, для
// определения особой логики.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияСогласования
//
Процедура ПриПрерыванииВыполненияДействия(Действие) Экспорт
	
	Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Действие, "Предмет");
	
	ВизыПоДействию = РаботаСВизамиСогласования.АктивныеВизыПоДействию(
		Предмет, Действие);
	
	РаботаСВизамиСогласования.ОтметитьВизыУдаленными(ВизыПоДействию);
	
КонецПроцедуры

// Обработчик события удаления результатов выполнения действий, для
// определения особой логики.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияСогласования
//
Процедура ПриУдаленииРезультатовВыполнения(Действие) Экспорт
	
	Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Действие, "Предмет");
	
	ВизыПоДействию = РаботаСВизамиСогласования.АктивныеВизыПоДействию(
		Предмет, Действие);
	
	РаботаСВизамиСогласования.ПоместитьВизыВИсторию(ВизыПоДействию);
	
КонецПроцедуры

// Проверяет наличие метода.
// 
// Возвращаемое значение:
//  Булево - Есть метод ПриОтменеВыполненияДействияУчастником.
Функция ЕстьМетодПриОтменеВыполненияДействияУчастником() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Дополнительная логика при отмене выполнения действия участником, например сброс визы и пр.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияСогласования
//  Параметры - Структура - См. ДействияСервер.СтруктураПараметровИзмененияДанныхДействия
//              должны быть заполнены сведения об участнике (участник, идентификатор, функция).
//
Процедура ПриОтменеВыполненияДействияУчастником(Действие, Параметры) Экспорт
	
	// Сбросим визу при отмене выполнения.
	Если Параметры.Функция = Перечисления.ФункцииУчастниковСогласования.Согласующий Тогда
		Если Параметры.ИдентификаторПункта = Неопределено Тогда
			Параметры.ИдентификаторПункта = ИдентификаторЭтапаУчастника(
				Действие, Параметры.ИдентификаторУчастника, Ложь);
		КонецЕсли;
		
		РаботаСВизамиСогласования.ОбновитьВизуУчастника(Действие, Параметры);
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти

#Область ИсторияДействий

// Помещает действие в историю, обрабатывая связанные с ним данные.
//
// Параметры:
//  Действие - СправочникСсылка.ДействияСогласования - ссылка на действие.
//
Процедура ПоместитьДействиеВИсторию(Действие, ПричинаПрерывания = "") Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		// при прерывании обработки не проверяем блокировку.
		
		СостояниеДействия = РегистрыСведений.СостоянияДействий.СостояниеДействия(Действие);
		ДействиеОбъект = Действие.ПолучитьОбъект();
		ДействиеОбъект.ПомещеноВИсторию = Истина;
		
		ДействияСервер.УстановитьБлокировкиПоПредмету(ДействиеОбъект.Предмет);
		ДействияСервер.УстановитьПризнакЗаписиДействияПриПомещенииВИсторию(ДействиеОбъект);
		ДействиеОбъект.Записать();
		
		Предмет = ДействиеОбъект.Предмет;
		
		ВизыПоДействию = РаботаСВизамиСогласования.АктивныеВизыПоДействию(
			Предмет, Действие);
		// Если Действие завершено, то помещаем в Историю, в противном случае Удаляем.
		Если СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Завершено Тогда
			РаботаСВизамиСогласования.ПоместитьВизыВИсторию(ВизыПоДействию);
		Иначе
			РаботаСВизамиСогласования.ОтметитьВизыУдаленными(ВизыПоДействию);
		КонецЕсли;
		
		// Удалим html файлы
		СоответствиеСтарыхФайлов = Новый Соответствие;
		ВладелецФайла = Предмет;
		СогласованиеВРежимеЗамечанийСервер.ОчиститьСтарыеПриложенныеФайлы(ВладелецФайла, СоответствиеСтарыхФайлов);

		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

// Возвращает структуру доступных обработчиков событий
//
// Возвращаемое значение:
//  см. ДействияСервер.ДоступныеОбработчикиМенеджера
Функция ДоступныеОбработчикиМенеджера() Экспорт
	
	ДоступныеОбработчики = ДействияСервер.ДоступныеОбработчикиМенеджера(); 
	ДоступныеОбработчики.ОбработкаПрерывания = Ложь;
	ДоступныеОбработчики.ОбработкаСнятияПаузы = Ложь;
	ДоступныеОбработчики.ОбработкаПостановкиНаПаузу = Ложь;
	ДоступныеОбработчики.ОбработкаИзмененияУчастника = Ложь;
	Возврат ДоступныеОбработчики;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИменаРеквизитовДляЗаполнения()
	
	Возврат "Ссылка, ВидДействия, Участники, Автор, Этапы, МоментРазыменованияУчастников";
	
КонецФункции

Функция ЕстьРольОбязательная(Предмет)
	
	Если Не ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Предмет) Тогда
		Возврат Истина; // тут не проверяем
	КонецЕсли;	
	
	ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "ВидДокумента");
	
	РолиФайлов = Делопроизводство.РолиФайловДляВидаДокументов(ВидДокумента);
	Если РолиФайлов.Количество() = 0 Тогда
		Возврат Истина; // тут не проверяем
	КонецЕсли;	
	
	ЧислоРолейСОбязательная = 0;
	Для Каждого Стр Из РолиФайлов Цикл
		Если Стр.Обязательная Тогда
			ЧислоРолейСОбязательная = ЧислоРолейСОбязательная + 1;
		КонецЕсли;	
	КонецЦикла;
		
	Возврат (ЧислоРолейСОбязательная > 0);		
	
КонецФункции

// Создадим протокол разногласий.
//
// Параметры:
//   Документ - СправочникСсылка.ДокументыПредприятия
//   Действие - СправочникСсылка.ДействияСогласования
//   ОбъектыПечати - Массив - коллекция объектов, по которым сформированы печатные формы.
//   БесшовнаяИнтеграция - Булево - печатная форма будет отправлена через бесшовную интеграцию на сторону ИС.
//
// Возвращаемое значение:
//   ТабличныйДокумент - табличный документ
//
Функция ТабличныйДокументПротоколРазногласий(Документ, Действие, ОбъектыПечати, БесшовнаяИнтеграция = Ложь) Экспорт
	
	// Создаем табличный документ.
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.ДействияСогласования.ПФ_MXL_ПротоколРазногласий");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьИсполнителиШапка = Макет.ПолучитьОбласть("ИсполнителиШапка");
	ОбластьИсполнители = Макет.ПолучитьОбласть("Исполнители");
	
	Если ЗначениеЗаполнено(Документ) Тогда
		ОбластьШапка.Параметры.Предмет = СтрШаблон("%1 ""%2""", Документ.Метаданные().ПредставлениеОбъекта, Документ);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	Если Не ЗначениеЗаполнено(Действие) Тогда
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	МассивЗамечаний = ЗамечанияВСтатусеОтказать(Действие);
	Если МассивЗамечаний.Количество() = 0 Тогда
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	ВизыСогласованияРоли = ВизыСогласованияРоли(Документ);
	ИДУчастникаИРолиСоответствие = Новый Соответствие; // ключ ИДУчастника, значение - Роль
	
	Для Каждого СтрокаИсполнитель Из ВизыСогласованияРоли Цикл
		ИДУчастникаИРолиСоответствие[СтрокаИсполнитель.ИдентификаторУчастника] = СтрокаИсполнитель.РольИсполнителя;
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(ОбластьИсполнителиШапка);
	
	Номер = 1;
	Для Каждого СтрокаИсполнитель Из МассивЗамечаний Цикл
		ОбластьИсполнители.Параметры.Заполнить(СтрокаИсполнитель);
		ОбластьИсполнители.Параметры.Дата = Формат(СтрокаИсполнитель.Дата, "ДФ='dd.MM.yyyy ЧЧ:мм';");
		ОбластьИсполнители.Параметры.Номер = Номер;
		
		РольИсполнителя = ИДУчастникаИРолиСоответствие[СтрокаИсполнитель.ИдентификаторАвтора];
		Если ЗначениеЗаполнено(РольИсполнителя) Тогда
			ОбластьИсполнители.Параметры.Автор = СтрШаблон("%1 (%2)",
				СтрокаИсполнитель.Автор,
				РольИсполнителя);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьИсполнители);
		
		Номер = Номер + 1;
	КонецЦикла;
	
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Вернет роли из виз
// 
// Параметры:
// 	Предмет - СправочникСсылка.ДокументыПредприятия
// 	
// Возвращаемое значение:
// 	ТаблицаЗначений
Функция ВизыСогласованияРоли(Предмет)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВизыСогласования.Документ КАК Ссылка,
		|	ВизыСогласования.РольИсполнителя.Владелец КАК РольИсполнителя,
		|	ВизыСогласования.ИдентификаторУчастника КАК ИдентификаторУчастника
		|ИЗ
		|	Справочник.ВизыСогласования КАК ВизыСогласования
		|ГДЕ
		|	ВизыСогласования.Документ = &Документ
		|	И НЕ ВизыСогласования.ПометкаУдаления
		|	И Не ВизыСогласования.ПомещенаВИсторию
		|	И НЕ ВизыСогласования.Удалена";
		
	Запрос.УстановитьПараметр("Документ", Предмет);
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции

#КонецОбласти

#КонецЕсли
