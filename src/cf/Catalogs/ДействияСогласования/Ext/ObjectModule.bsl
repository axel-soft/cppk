#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Выполняет процедуры записи объекта.
//
Процедура ЗаписатьОбъект() Экспорт
	
	Если ДополнительныеСвойства.Свойство("ЭтоНовый") И ДополнительныеСвойства.ЭтоНовый Тогда
		РегистрыСведений.ИтерацииДействий.ДобавитьЗапись(Ссылка, 0);
		
		Для Каждого Стр Из Участники Цикл
			РегистрыСведений.ИтерацииДействий.ДобавитьЗапись(Ссылка, 0, Стр.Идентификатор);
		КонецЦикла;
	КонецЕсли;
	
	ДействияСервер.ДействияПриЗаписи(ЭтотОбъект, ДополнительныеСвойства);
		
	// Изменения участников действия нужно отразить в визах
	Если Не МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(ИсточникДанных) Тогда
		Если Не (ДополнительныеСвойства.Свойство("РежимДиалогаВЗадаче") 
					И ДополнительныеСвойства.РежимДиалогаВЗадаче = Истина)
				И Не (ДополнительныеСвойства.Свойство("ЭтоПеренаправлениеЗадачи") 
					И ДополнительныеСвойства.ЭтоПеренаправлениеЗадачи = Истина)	Тогда
			
			РаботаСВизамиСогласования.ОбновитьВизыУчастниковДействия(
				Ссылка,
				ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "Добавленные", Новый Массив),
				ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "Удаленные", Новый Массив));
		КонецЕсли;
	КонецЕсли;
	
	РаботаСПроцессамиПоОбработкамОбъектовСобытия.ПриЗаписиДействия(ЭтотОбъект);
	РаботаСПроцессамиПоДействиямСобытия.ПриЗаписиДействия(ЭтотОбъект);
	
	Добавленные =
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеСвойства, "Добавленные", Новый Массив);
		
	НовыйНомерИтерации = 0;	
	Если ДополнительныеСвойства.Свойство("БылиУчастники") И ЗначениеЗаполнено(ДополнительныеСвойства.БылиУчастники) Тогда
		
		Для Каждого Стр Из ДополнительныеСвойства.БылиУчастники Цикл
			Если Стр.ФункцияУчастника = Перечисления.ФункцииУчастниковСогласования.Согласующий Тогда
				НовыйНомерИтерации = РегистрыСведений.ИтерацииДействий.НомерИтерации(Ссылка, Стр.Идентификатор);
				Прервать;
			КонецЕсли;	
		КонецЦикла;  
		
	КонецЕсли;	
		
	Для Каждого Стр Из Добавленные Цикл
		РегистрыСведений.ИтерацииДействий.ДобавитьЗапись(Ссылка, НовыйНомерИтерации, Стр.Идентификатор);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает участников с функций "Обрабатывающий результат".
// 
// Возвращаемое значение:
//  Массив Из СтрокаТабличнойЧасти- Участники.
//
Функция УчастникОбрабатывающийРезультат() Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ФункцияУчастника", 
		ПредопределенноеЗначение("Перечисление.ФункцииУчастниковСогласования.ОбрабатывающийРезультат"));
	Возврат Участники.НайтиСтроки(ПараметрыОтбора);
	
КонецФункции

// Заполняет действие по настройке действия.
//
// Параметры:
// 	Настройка - СправочникСсылка.НастройкиДействийИсполнения - ссылка на настройку.
// 	ПредметОбъект - ОпределяемыйТип.ПредметДействияОбъект.
//
Процедура ЗаполнитьПоНастройке(Настройка, ПредметОбъект = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Настройка) Тогда
		
		Этапы.Очистить();
		Участники.Очистить();
		ЗаполнитьБезУчастников();
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(Настройка) <> Тип("СправочникСсылка.НастройкиДействийСогласования") Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Настройка типа ""%1"" не подходит для заполнения действия согласования.
				|Следует актуализировать правила обработки документов.'"),
			ТипЗнч(Настройка));
	КонецЕсли;
	
	НастройкаДействия = Настройка;
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Настройка,
		"Автор, МоментРазыменованияУчастников, Важность,
		|Участники,
		|Этапы,
		|СогласованиеВРежимеЗамечаний,
		|ФормироватьВизы, 
		|ПодписыватьУЭП,
		|ПорядокВыполненияУчастниками,
		|ОтложенноеНачалоВыполнения");
		
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты,, "Участники, Этапы, Автор, Важность");
	ФормируетВизы = Реквизиты.ФормироватьВизы;
	
	Если ЗначениеЗаполнено(Предмет) И Не ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Предмет) Тогда
		СогласованиеВРежимеЗамечаний = Ложь;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Реквизиты.Автор) Тогда 
		Автор = Реквизиты.Автор;
	КонецЕсли;
	Если ЗначениеЗаполнено(Реквизиты.Важность) 
		И Реквизиты.Важность <> Перечисления.ВариантыВажностиОбъектов.Обычная Тогда 
		Важность = Реквизиты.Важность;
	КонецЕсли;
	
	Если ПредметОбъект = Неопределено
		И ЗначениеЗаполнено(Предмет) Тогда
		ПредметОбъект = Предмет.ПолучитьОбъект();
	КонецЕсли;
	
	Выгруженные = Участники.Выгрузить();
	
	РазыменоватьПриСозданииДействия = ДействияСервер.РазыменоватьПриСозданииДействия(МоментРазыменованияУчастников);
	
	Участники.Очистить();
	Источники.Очистить();
	
	Этапы.Очистить();
	ТаблицаЭтапы = Реквизиты.Этапы.Выгрузить();
	ТаблицаЭтапы.Сортировать("НомерСтроки");
	Для Каждого ВыборкаЭтапы Из ТаблицаЭтапы Цикл
		Этап = Этапы.Добавить();
		ЗаполнитьЗначенияСвойств(Этап, ВыборкаЭтапы);
	КонецЦикла;
	
	// перенесем добавленных вручную - тут добавляем только с функцией ОбрабатывающийРезультат.
	Для Каждого Выгруженный Из Выгруженные Цикл
		
		Если Выгруженный.ИзНастройки Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Выгруженный.ФункцияУчастника <> Перечисления.ФункцииУчастниковСогласования.ОбрабатывающийРезультат Тогда
			Продолжить;
		КонецЕсли;	
		
		Участник = Участники.Добавить();
		ЗаполнитьЗначенияСвойств(Участник, Выгруженный);
		
	КонецЦикла;		
	
	ТаблицаУчастники = Реквизиты.Участники.Выгрузить();
	ТаблицаУчастники.Сортировать("НомерСтроки");
	Для Каждого ВыборкаУчастники Из ТаблицаУчастники Цикл
		
		ЕстьТакойУчастник = Ложь;
		Если ВыборкаУчастники.ФункцияУчастника <> Перечисления.ФункцииУчастниковСогласования.ОбрабатывающийРезультат Тогда
			
			Если Не ВыборкаУчастники.Защищенный Тогда
				
				ЕстьУчастники = Участники.НайтиСтроки(Новый Структура("Участник, ФункцияУчастника, Описание",
					ВыборкаУчастники.Участник, ВыборкаУчастники.ФункцияУчастника, ВыборкаУчастники.Описание));
				ЕстьТакойУчастник = (ЕстьУчастники.Количество() > 0);
				
			КонецЕсли;
				
		КонецЕсли;	
			
		Если Не ЕстьТакойУчастник Тогда
			
			// Проверим функцию ОбрабатывающийРезультат.
			// Если уже есть ОбрабатывающийРезультат - нового не добавляем
			Если ВыборкаУчастники.ФункцияУчастника = Перечисления.ФункцииУчастниковСогласования.ОбрабатывающийРезультат 
				И УчастникОбрабатывающийРезультат().Количество() <> 0 Тогда
				Продолжить;
			КонецЕсли;	
			// Проверка условий.
			Если РазыменоватьПриСозданииДействия 
				И Не РаботаСАлгоритмамиПроверки.АлгоритмПоПредметуВыполняется(
				ПредметОбъект, ВыборкаУчастники.Условие) Тогда
				Продолжить;
			КонецЕсли;
			
			Участник = Участники.Добавить();
			ЗаполнитьЗначенияСвойств(Участник, ВыборкаУчастники);
			Участник.ИзНастройки = Истина;
			Участник.Идентификатор = Новый УникальныйИдентификатор;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Выгруженный Из Выгруженные Цикл
		
		Если Выгруженный.ИзНастройки Тогда
			Продолжить;
		КонецЕсли;
		
		// "Обрабатывающий результат" добавили ранее, тут не добавляем
		Если Выгруженный.ФункцияУчастника = Перечисления.ФункцииУчастниковСогласования.ОбрабатывающийРезультат Тогда
			Продолжить;
		КонецЕсли;
		
		Если  Этапы.Найти(Выгруженный.ИдентификаторЭтапа, "Идентификатор") = Неопределено
			Или Участники.Найти(Выгруженный.Участник, "Участник") <> Неопределено Тогда
			// Перенесем идентификаторы по совпадающему Исполнителю
			СтрокаИсполнителя = Участники.Найти(Выгруженный.Участник, "Участник");
			Если СтрокаИсполнителя <> Неопределено Тогда 
				СтрокаИсполнителя.Идентификатор = Выгруженный.Идентификатор;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		// Перенесем сроки
		НайденныеОбязательные = Участники.НайтиСтроки(
			Новый Структура("ИдентификаторЭтапа", Выгруженный.ИдентификаторЭтапа));
		
		Участник = Участники.Добавить();
		ЗаполнитьЗначенияСвойств(Участник, Выгруженный);
		Если НайденныеОбязательные.Количество() > 0 Тогда 
			ЗаполнитьЗначенияСвойств(Участник, НайденныеОбязательные[0],
				"ВариантУстановкиСрока, Срок, СрокДни, СрокМинуты, СрокЧасы");
		КонецЕсли;
		
	КонецЦикла;
	
	// Обрабатывающего результат добавим, даже если он не задан в настройке
	Если УчастникОбрабатывающийРезультат().Количество() = 0 Тогда 
		
		Участник = Участники.Добавить();
		Участник.Участник = Автор;
		Участник.ИзНастройки = Истина;
		Участник.Идентификатор = Новый УникальныйИдентификатор;
		Участник.ФункцияУчастника = ПредопределенноеЗначение(
			"Перечисление.ФункцииУчастниковСогласования.ОбрабатывающийРезультат");
	КонецЕсли;
	
	Если РазыменоватьПриСозданииДействия Тогда
		Разыменовать(ПредметОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Разыменовывает автоподстановки и контейнеры в составе участников.
//
// Параметры:
// 	ПредметОбъект - ОпределяемыйТип.ПредметДействияОбъект.
// 	ЭтоЗапуск - Булево - признак того, что разыменование происходит в рамках запуска в обработку.
//
Процедура Разыменовать(ПредметОбъект = Неопределено, ЭтоЗапуск = Ложь) Экспорт
	
	Если ПредметОбъект = Неопределено Тогда
		ПредметОбъект = Предмет.ПолучитьОбъект();
	КонецЕсли;
	
	ФункцияУчастника = Перечисления.ФункцииУчастниковСогласования.Согласующий;
	
	Выгруженные = Участники.Выгрузить();
	Участники.Очистить();
	
	Контейнеры = Новый Массив;
	Для Каждого Выгруженный Из Выгруженные Цикл
		
		Если ТипЗнч(Выгруженный.Участник) = Тип("СправочникСсылка.СтруктураПредприятия")
			Или ТипЗнч(Выгруженный.Участник) = Тип("СправочникСсылка.РабочиеГруппы")
			Или ТипЗнч(Выгруженный.Участник) = Тип("СправочникСсылка.ПроектыКонтейнеры")
			Или ТипЗнч(Выгруженный.Участник) = Тип("СправочникСсылка.ПодразделенияКонтейнеры")
			Тогда
			Контейнеры.Добавить(Выгруженный.Участник);
		КонецЕсли;	
		
	КонецЦикла;
	
	Вытесняемые = ПравилаОбработкиСервер.ВытесняемыеУчастникиОбработки(ПредметОбъект.Ссылка);
	ВытесненныеУчастники = Новый Соответствие;
	
	СоответствиеСотрудниковВКонтейнерах = Новый Соответствие;
	Если Контейнеры.Количество() <> 0 Тогда
		СоответствиеСотрудниковВКонтейнерах = ДействияСервер.ДействующиеСотрудникиВКонтейнерах(Контейнеры);
	КонецЕсли;	

	РазыменоватьПриЗапускеДокументаВОбработку = ДействияСервер.РазыменоватьПриЗапускеДокументаВОбработку(
		МоментРазыменованияУчастников);
	РазыменоватьПередВыполнениемДействия = ДействияСервер.РазыменоватьПередВыполнениемДействия(
		МоментРазыменованияУчастников);
	Для Каждого Выгруженный Из Выгруженные Цикл
		// Проверка условий.
		Если (РазыменоватьПередВыполнениемДействия Или РазыменоватьПриЗапускеДокументаВОбработку)
			И Не РаботаСАлгоритмамиПроверки.АлгоритмПоПредметуВыполняется(
				ПредметОбъект, Выгруженный.Условие) Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверка на вытеснение
		Если (РазыменоватьПередВыполнениемДействия Или РазыменоватьПриЗапускеДокументаВОбработку)
			И Вытесняемые[Выгруженный.Идентификатор] <> Неопределено Тогда
			
			ВытесненныеУчастники[Выгруженный.Идентификатор] = Вытесняемые[Выгруженный.Идентификатор];
			Продолжить;
			
		КонецЕсли;
		
		ФункцияУчастника = Выгруженный.ФункцияУчастника;
		
		Если ТипЗнч(Выгруженный.Участник) = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов") Тогда
			
			ДанныеРазыменования = ДействияСервер.РазыменоватьАвтоподстановку(
				Выгруженный.Участник, 
				ПредметОбъект,
				ФункцияУчастника, 
				Перечисления.ФункцииУчастниковСогласования.ОбрабатывающийРезультат,
				Ложь);
				
			Для Каждого РазыменованныйУчастник Из ДанныеРазыменования Цикл
				
				Участник = Участники.Добавить();
				ЗаполнитьЗначенияСвойств(Участник, Выгруженный);
				Участник.Участник = РазыменованныйУчастник;
				Участник.Идентификатор = Новый УникальныйИдентификатор;
				
				ДействияСервер.ДобавитьИсточник(
					ЭтотОбъект, "Участники.Участник", Участник.Идентификатор, Выгруженный.Участник);
				
			КонецЦикла;	
			
		ИначеЕсли ТипЗнч(Выгруженный.Участник) = Тип("СправочникСсылка.РабочиеГруппы")
			Или ТипЗнч(Выгруженный.Участник) = Тип("СправочникСсылка.ПроектыКонтейнеры")
			Или ТипЗнч(Выгруженный.Участник) = Тип("СправочникСсылка.ПодразделенияКонтейнеры") Тогда
			
			СтрокиСотрудники = СоответствиеСотрудниковВКонтейнерах[Выгруженный.Участник];

			Если СтрокиСотрудники <> Неопределено Тогда
				Для Каждого Сотрудник Из СтрокиСотрудники Цикл
					
				Если ФункцияУчастника 
					= Перечисления.ФункцииУчастниковСогласования.ОбрабатывающийРезультат 
					И УчастникОбрабатывающийРезультат().Количество() <> 0 Тогда
					Продолжить;
				КонецЕсли;	
					
				Участник = Участники.Добавить();
				ЗаполнитьЗначенияСвойств(Участник, Выгруженный);
				Участник.Участник = Сотрудник;
				Участник.Идентификатор = Новый УникальныйИдентификатор;
				
				ДействияСервер.ДобавитьИсточник(
					ЭтотОбъект, "Участники.Участник", Участник.Идентификатор, Выгруженный.Участник);
				
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			Участник = Участники.Добавить();
			ЗаполнитьЗначенияСвойств(Участник, Выгруженный);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДействияСервер.РазыменоватьАвтора(ЭтотОбъект, ПредметОбъект);
	
	// Удаление дублей участников.
	ДанныеУчастниковДляУдаленияДублей = Новый Массив;
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДействияКлиентСервер.ЭтоФункцияОбработатьРезультат(СтрокаУчастника.ФункцияУчастника) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеУчастникаДляУдаленияДублей = ДействияСервер.ДанныеУчастникаДляУдаленияДублей();
		ДанныеУчастникаДляУдаленияДублей.Участник = СтрокаУчастника.Участник;
		ДанныеУчастникаДляУдаленияДублей.ИдентификаторГруппы = СтрокаУчастника.ИдентификаторЭтапа;
		ДанныеУчастникаДляУдаленияДублей.СтрокаУчастника = СтрокаУчастника;
		ДанныеУчастниковДляУдаленияДублей.Добавить(ДанныеУчастникаДляУдаленияДублей);
		
	КонецЦикла;
	
	ПорядокЭтапов = Новый Массив;
	Для Каждого СтрокаЭтапа Из Этапы Цикл
		ПорядокЭтапов.Добавить(СтрокаЭтапа.Идентификатор);
	КонецЦикла;
	ПорядокЭтапов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПорядокЭтапов);
	
	ДействияСервер.УдалитьДублиУчастников(ДанныеУчастниковДляУдаленияДублей, Участники, ПорядокЭтапов);

	ДополнительныеСвойства.Вставить("ВытесненныеУчастники", ВытесненныеУчастники);
	
	ЧислоСтраницДляПредпросмотраПорции = СогласованиеВРежимеЗамечанийКлиентСерверПереопределяемый.ЧислоСтраницДляПредпросмотраПорции();

	Если ЗначениеЗаполнено(Ссылка) Тогда
		ДействияСервер.ЗаписатьВХодОбработкиОтличия(ЭтотОбъект, Выгруженные, Участники, 
			НСтр("ru = 'Разыменовать'"));
	КонецЕсли;
	
КонецПроцедуры

// Заменяет участника действия
//
// Параметры:
//	Идентификатор - УникальныйИдентификатор - идентификатор участника
//	НовыйУчастник - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли - новый участник процесса
//	Причина - Строка - описание причины замены
//	Автор - Неопределено, СправочникСсылка.Сотрудники - сотрудник, перенаправивший задачу
//
Процедура ЗаменитьУчастника(Идентификатор, НовыйУчастник, Причина = "", Автор = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		ВызватьИсключение НСтр("ru = 'Замена участника возможна только после записи действия.'");
	КонецЕсли;
	
	ПрежнийУчастник = Неопределено;
	
	СтрокаУчастника = Участники.Найти(Идентификатор, "Идентификатор");
	Если СтрокаУчастника <> Неопределено И СтрокаУчастника.Участник <> НовыйУчастник Тогда
		ПрежнийУчастник = СтрокаУчастника.Участник;
		СтрокаУчастника.Участник = НовыйУчастник;
		
		Если СтрокаУчастника.ФункцияУчастника = Перечисления.ФункцииУчастниковСогласования.Согласующий Тогда
			// Обновим визу участника
			ПараметрыУчастника = Новый Структура;
			ПараметрыУчастника.Вставить("Идентификатор", Идентификатор);
			ПараметрыУчастника.Вставить("Участник", НовыйУчастник);
			РаботаСВизамиСогласования.ОбновитьВизуУчастника(Ссылка, ПараметрыУчастника);
		КонецЕсли;
		
		// Отметим защищенными участников, если новый участник уже есть действии.
		СтрокиУчастника = Участники.НайтиСтроки(
			Новый Структура("Участник, ФункцияУчастника", НовыйУчастник, Перечисления.ФункцииУчастниковСогласования.Согласующий));
		Если СтрокиУчастника.Количество() > 1 Тогда
			Для Каждого СтрУчастник Из СтрокиУчастника Цикл
				Если Не СтрУчастник.Защищенный Тогда
					СтрУчастник.Защищенный = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяОбработка = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(Ссылка);
	
	Событие = РегистрыСведений.ХодОбработки.СтруктураСобытия();
	Событие.Обработка = ТекущаяОбработка;
	Событие.ТипСобытия = Перечисления.ТипСобытияХодаОбработки.ИзменениеУчастников;
	Событие.Действие = Ссылка;
	Событие.Описание = СтрШаблон(НСтр("ru = 'Участник %1 заменен на %2. Причина: %3'"), ПрежнийУчастник, НовыйУчастник, Причина);
	Событие.ИдентификаторУчастника = Идентификатор;
	Событие.Участник = ПрежнийУчастник;
	Событие.Функция = СтрокаУчастника.ФункцияУчастника;
	Событие.Сотрудник = Автор;
	РегистрыСведений.ХодОбработки.ЗаписатьСобытие(Событие);
	
КонецПроцедуры

// Устанавливает срок исполнения участнику.
//
// Параметры:
//  Идентификатор - УникальныйИдентификатор - Идентификатора участника в действии.
//  ВариантУстановкиСрока - ПеречислениеСсылка.ВариантыУстановкиСрокаИсполнения
//  Срок - Дата - срок участника точной датой.
//  СрокДни, СрокЧасы, СрокМинуты - Число - относительный срок участника.
//
Процедура УстановитьСрокИсполненияУчастнику(Идентификатор, ВариантУстановкиСрока,
	Срок, СрокДни, СрокЧасы, СрокМинуты) Экспорт
	
	СтрокаУчастника = Участники.Найти(Идентификатор, "Идентификатор");
	
	Если СтрокаУчастника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаУчастника.ВариантУстановкиСрока = ВариантУстановкиСрока;
	СтрокаУчастника.Срок = Срок;
	СтрокаУчастника.СрокДни = СрокДни;
	СтрокаУчастника.СрокЧасы = СрокЧасы;
	СтрокаУчастника.СрокМинуты = СрокМинуты;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ДействияСобытия.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") 
		И ДанныеЗаполнения.Свойство("Настройка") Тогда
		
		ПредметОбъект = Неопределено;
		ДанныеЗаполнения.Свойство("ПредметОбъект", ПредметОбъект);
		ЗаполнитьПоНастройке(ДанныеЗаполнения.Настройка, ПредметОбъект);
		
		Если ДанныеЗаполнения.Свойство("ВытесняемыеУчастники") Тогда
			
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Настройка) Тогда
				Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения.Настройка,
					"МоментРазыменованияУчастников, ФормироватьВизы");
			Иначе
				Реквизиты = Новый Структура("МоментРазыменованияУчастников, ФормироватьВизы",
					Перечисления.МоментыРазыменованияУчастниковДействий.ПриСозданииДействия, Истина);
			КонецЕсли;
		
			ФормируетВизы = Реквизиты.ФормироватьВизы;
			РазыменоватьПриСозданииДействия = ДействияСервер.РазыменоватьПриСозданииДействия(
				МоментРазыменованияУчастников);
		
			Если ФормируетВизы И РазыменоватьПриСозданииДействия Тогда
				ДействияСервер.ОбработатьВытесняемыхУчастников(ЭтотОбъект,
					ДанныеЗаполнения.ВытесняемыеУчастники);
			КонецЕсли;
			
		КонецЕсли;
	Иначе 
		ЗаполнитьБезУчастников();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДействияСервер.ДействияПередЗаписью(ЭтотОбъект);
	
	РаботаСПроцессамиПоОбработкамОбъектовСобытия.ПередЗаписьюДействия(ЭтотОбъект);
	РаботаСПроцессамиПоДействиямСобытия.ПередЗаписьюДействия(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда	
		Возврат;
	КонецЕсли;
	
	ДействияСервер.ЗаписатьДействие(ЭтотОбъект, Отказ);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьБезУчастников()

	Участник = Участники.Добавить();
	Участник.Участник = Справочники.Сотрудники.ПустаяСсылка();
	Участник.Идентификатор = Новый УникальныйИдентификатор;
	Участник.ФункцияУчастника = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковСогласования.Согласующий");
	
	Участник = Участники.Добавить();
	Участник.Участник = Автор;
	Участник.Идентификатор = Новый УникальныйИдентификатор;
	Участник.ФункцияУчастника = ПредопределенноеЗначение("Перечисление.ФункцииУчастниковСогласования.ОбрабатывающийРезультат");
	
	ПорядокВыполненияУчастниками = Перечисления.ПорядокВыполненияЭтапаДействия.Параллельно;
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли