#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ЭлементыСтиля = МК_ПовтИсп.ЭлементыСтиля();

	ИмяЭтойФормы = "ЖурналДокументов.ЭлектроннаяПочта.Форма.МК_ФормаСписка";

	ПоддерживаетсяМножественныйВвод = МК_ПовтИсп.ВерсияПлатформыСервераВыше8322();

	ИсходныйТекстЗапроса = Список.ТекстЗапроса;

	ТекущийПользователь = Пользователи.ТекущийПользователь();

	Список.Параметры.УстановитьЗначениеПараметра("Пользователь", Пользователи.ТекущийПользователь());

	Список.Параметры.УстановитьЗначениеПараметра("ФизическоеЛицо",
		ПараметрыСеанса.ФизическоеЛицоПользователя);

	Список.Параметры.УстановитьЗначениеПараметра("Папка", Справочники.ПапкиПисем.ПустаяСсылка());
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));

	Элементы.СостояниеКонтроляНомерКартинки.Видимость = ПолучитьФункциональнуюОпцию(
		"ИспользоватьКонтрольОбъектов");

	МК.ПреобразоватьКнопкуВАкцентную(ЭтотОбъект, ЭлементыСтиля, Элементы.ФормаСоздатьПисьмо,
		Элементы.НижнийБлок);

	ЗагрузитьНастройки();

	ЗаполнитьУсловноеОформлениеСпискаПисем(Список);

	МК_КлиентСервер.ОформитьКнопкуСворачиваемойГруппы(ЭлементыСтиля,
		Элементы.ЗакрытьОтборы, Истина, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	НастроитьОтборы(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ПисьмаИзменены" И Источник <> ЭтотОбъект Тогда
		ОбновитьДанные();

	ИначеЕсли ИмяСобытия = "ЗаписьКонтроля" Тогда
		Если ЗначениеЗаполнено(Параметр.Предмет) И ТипЗнч(Параметр.Предмет) = Тип(
			"СправочникСсылка.ВеткиПереписки") Тогда
			ОбновитьДанные();
		КонецЕсли;

	ИначеЕсли ИмяСобытия = "ИзменилсяФлаг" Тогда
		ТипОбъекта = ТипЗнч(Параметр[0]);
		Если ТипОбъекта = Тип("ДокументСсылка.ВходящееПисьмо") Или ТипОбъекта = Тип(
			"ДокументСсылка.ИсходящееПисьмо") Тогда
			ОбновитьДанные();
		КонецЕсли;

	ИначеЕсли ИмяСобытия = "Запись_ЛичныйАдресат" Или ИмяСобытия = "Запись_Контрагент"
		Или ИмяСобытия = "Запись_КонтактноеЛицо" Или ИмяСобытия = "Запись_Пользователь"
		Или ИмяСобытия = "Запись_РолиИсполнителей" Или ИмяСобытия = "ИзмененоФизическоеЛицо" Тогда

		ОбновитьДанные();

	ИначеЕсли ИмяСобытия = "ИзмененыНастройкиВстроеннойПочты" И Источник <> ЭтотОбъект Тогда

		Если Параметр.Свойство("ОтображатьУдаленныеПисьмаИПапки") И ОтображатьУдаленныеПисьмаИПапки
			<> Параметр.ОтображатьУдаленныеПисьмаИПапки Тогда

			ОтображатьУдаленныеПисьмаИПапки = Параметр.ОтображатьУдаленныеПисьмаИПапки;
			ОтображатьУдаленныеСервер(Ложь);
			Элементы.Список.Обновить();

		КонецЕсли;

		Если Параметр.Свойство("РежимМоиПапки") И РежимМоиПапки <> Параметр.РежимМоиПапки Тогда

			РежимМоиПапки = Параметр.РежимМоиПапки;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если Элементы.ГруппаОтбор.Видимость Тогда
		ИзменитьВидимостьОтбораПисем();
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборТемаПриИзменении(Элемент)

	НастроитьОтборы();

КонецПроцедуры

&НаКлиенте
Процедура ОтборАдресатПриИзменении(Элемент)

	НастроитьОтборы();

КонецПроцедуры

&НаКлиенте
Процедура ОтборПрочтеноОткрытиеМножественногоЗначения(Элемент, Идентификатор, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ВыбраннаяСтрока = ТаблицаОтбораПрочтено.НайтиПоИдентификатору(Идентификатор);
	ВыбраннаяСтрока.Активность = Не ВыбраннаяСтрока.Активность;

	Для Каждого СтрокаПрочтено Из ТаблицаОтбораПрочтено Цикл
		Если СтрокаПрочтено <> ВыбраннаяСтрока Тогда
			СтрокаПрочтено.Активность = Ложь;
		КонецЕсли;
	КонецЦикла;

	НастроитьОтборы();

КонецПроцедуры

&НаКлиенте
Процедура ОтборЕстьВложенияОткрытиеМножественногоЗначения(Элемент, Идентификатор,
	СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ВыбраннаяСтрока = ТаблицаОтбораЕстьВложения.НайтиПоИдентификатору(Идентификатор);
	ВыбраннаяСтрока.Активность = Не ВыбраннаяСтрока.Активность;

	Для Каждого СтрокаЕстьВложения Из ТаблицаОтбораЕстьВложения Цикл
		Если СтрокаЕстьВложения <> ВыбраннаяСтрока Тогда
			СтрокаЕстьВложения.Активность = Ложь;
		КонецЕсли;
	КонецЦикла;

	НастроитьОтборы();

КонецПроцедуры

&НаКлиенте
Процедура ТекущаяПапкаНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ВыбратьПапку(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ОтборФлагОткрытиеМножественногоЗначения(Элемент, Идентификатор, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ВыбраннаяСтрока = ТаблицаОтбораФлагов.НайтиПоИдентификатору(Идентификатор);
	ВыбраннаяСтрока.Активность = Не ВыбраннаяСтрока.Активность;
	ТаблицаОтбораФлагов.Сортировать("Активность Убыв");
	НастроитьОтборы();

КонецПроцедуры

&НаКлиенте
Процедура ИспользуемыеОтборыОткрытиеМножественногоЗначения(Элемент, Идентификатор,
	СтандартнаяОбработка)

	СтандартнаяОбработка= Ложь;
	ВыбраннаяСтрока = ИспользуемыеОтборы.НайтиПоИдентификатору(Идентификатор);

	Если Не Элементы.ГруппаОтбор.Видимость Тогда
		ПоказатьОтборПисем(Неопределено);
	КонецЕсли;

	ТекущийЭлемент = Элементы[ВыбраннаяСтрока.ИмяЭлемента];
#Если МобильныйКлиент Тогда
	НачатьРедактированиеЭлемента();
#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ИспользуемыеОтборыУдалениеМножественныхЗначений(Элемент, Идентификаторы,
	СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Для Каждого Идентификатор Из Идентификаторы Цикл
		СтрокаОтбора = ИспользуемыеОтборы.НайтиПоИдентификатору(Идентификатор);
		РеквизитФормы = ЭтотОбъект[СтрокаОтбора.ИмяРеквизита];
		Если ТипЗнч(РеквизитФормы) = Тип("ДанныеФормыКоллекция") Тогда
			Для Каждого СтрокаКоллекции Из РеквизитФормы Цикл
				СтрокаКоллекции.Активность = Ложь;
			КонецЦикла;
		Иначе
			ЭтотОбъект[СтрокаОтбора.ИмяРеквизита] = Неопределено;
		КонецЕсли;

		НастроитьОтборы();
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОтборФлагСпискомПриИзменении(Элемент)

	НастроитьОтборы();
	Элемент.КнопкаОчистки = ЗначениеЗаполнено(ОтборФлагСписком);

КонецПроцедуры

&НаКлиенте
Процедура ОтборПрочтеноСпискомПриИзменении(Элемент)

	НастроитьОтборы();

КонецПроцедуры

&НаКлиенте
Процедура ОтборЕстьВложенияСпискомПриИзменении(Элемент)

	НастроитьОтборы();

КонецПроцедуры

&НаКлиенте
Процедура ИспользуемыеОтборыОчистка(Элемент, СтандартнаяОбработка)

	НастроитьОтборы(Истина);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)

	ПоказыватьТекст = МК_ВызовСервера.НастройкаПоказыватьТекст();

	Если ПоказыватьТекст Тогда

		ЕстьПисьмаСПустымКраткимТекстом = Ложь;
		ПисьмаСПустымКраткимТекстом = Новый Массив;
		ДанныеСтрокПисем = Новый Соответствие;

		Для Каждого КлючИЗначение Из Строки Цикл

			ДанныеСтроки = КлючИЗначение.Значение.Данные;
			Письмо = ДанныеСтроки.Ссылка;
			ДанныеСтрокПисем.Вставить(Письмо, ДанныеСтроки);

			Если Не ЗначениеЗаполнено(ДанныеСтроки.ТекстКратко) Тогда
				ПисьмаСПустымКраткимТекстом.Добавить(Письмо);
				ЕстьПисьмаСПустымКраткимТекстом = Истина;
			КонецЕсли;

		КонецЦикла;

		Если ЕстьПисьмаСПустымКраткимТекстом Тогда

			ТаблицаКраткихТекстов = МК.ТаблицаКраткихТекстовИзПисем(ПисьмаСПустымКраткимТекстом);

			Для Каждого СтрокаСКраткимТекстом Из ТаблицаКраткихТекстов Цикл
				ДанныеСтрокПисем[СтрокаСКраткимТекстом.Письмо].ТекстКратко = СтрокаСКраткимТекстом.ТекстКратко;
			КонецЦикла;

			РегистрыСведений.КраткиеТекстыПисем.ЗаполнитьИзТаблицыКраткихТекстов(
				ТаблицаКраткихТекстов);

			ЕстьПисьмаСПустымКраткимТекстом = Ложь;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)

	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЕстьНепрочтенноеПисьмо = Ложь;
	МножественноеВыделение = Элементы.Список.ВыделенныеСтроки.Количество() > 1;
	ЭтоВходящее = Ложь;

	Если МножественноеВыделение Тогда

		Для Каждого ВыделеннаяСтрока Из Элементы.Список.ВыделенныеСтроки Цикл
			ТекущиеДанные = Элементы.Список.ДанныеСтроки(ВыделеннаяСтрока);
			ЕстьНепрочтенноеПисьмо = Не ТекущиеДанные.Прочтено;
			Если ЕстьНепрочтенноеПисьмо Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе

		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанные = Элементы.Список.ДанныеСтроки(ТекущаяСтрока);
		КонецЕсли;

		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		// выделена одна строка
		ЕстьНепрочтенноеПисьмо = Не ТекущиеДанные.Прочтено;

		ЭтоВходящее = ТекущиеДанные.ЭтоВходящее;

	КонецЕсли;

	Элементы.СписокКонтекстноеМенюПометитьКакПрочтенные.Заголовок = ?(ЕстьНепрочтенноеПисьмо,
		НСтр("ru='Прочитано'"), НСтр("ru='Не прочитано'"));

	УстановитьВидимостьКомандКонтекстногоМенюСпискаПисем(Не МножественноеВыделение, ЭтоВходящее);

КонецПроцедуры

&НаКлиенте
Процедура СписокОбработкаЗапросаОбновления()

	ОбновитьДанные();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьПапку(Команда)

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТекущаяСтрока", ТекущаяПапка);

	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПапкуВыполнитьЗавершение", ЭтотОбъект);
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;

	ОткрытьФорму("Справочник.ПапкиПисем.ФормаВыбора", ПараметрыОткрытия, ЭтотОбъект, , , ,
		ОписаниеОповещения, РежимОткрытияОкна);

КонецПроцедуры
&НаКлиенте
Процедура ПоказатьОтборПисем(Команда)

	ИзменитьВидимостьОтбораПисем();

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьОтборы(Команда)

	ИзменитьВидимостьОтбораПисем();

КонецПроцедуры

&НаКлиенте
Процедура СоздатьПисьмо(Команда)

	ВстроеннаяПочтаКлиент.СоздатьПисьмо();

КонецПроцедуры

&НаКлиенте
Процедура ОтображатьУдаленные(Команда)

	ОтображатьУдаленныеПисьмаИПапки = Не ОтображатьУдаленныеПисьмаИПапки;
	ОтображатьУдаленныеСервер();
	Элементы.Список.Обновить();

КонецПроцедуры

&НаКлиенте
Процедура НаписатьПоШаблону(Команда)

	ОписаниеОповещения = Новый ОписаниеОповещения("НаписатьПоШаблонуПродолжение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ШаблоныПисем.ФормаВыбора", , , , , , ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВсеОтборы(Команда)

	НастроитьОтборы(Истина);

КонецПроцедуры

#Область ОбработчикиКомандФормыКонтекстноеМенюСписка

&НаКлиенте
Процедура Ответить(Команда)

	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
	Если ВыбранноеПисьмо = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ВстроеннаяПочтаКлиент.ОтветитьНаПисьмо(ВыбранноеПисьмо);

КонецПроцедуры

&НаКлиенте
Процедура ОтветитьВсем(Команда)

	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
	Если ВыбранноеПисьмо = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ВстроеннаяПочтаКлиент.ОтветитьВсемНаПисьмо(ВыбранноеПисьмо);

КонецПроцедуры

&НаКлиенте
Процедура Переслать(Команда)

	Если Элементы.Список.ВыделенныеСтроки.Количество() > 1 Тогда

		ПересылаемыеПисьма = Новый СписокЗначений;
		ПересылаемыеПисьма.ЗагрузитьЗначения(Элементы.Список.ВыделенныеСтроки);

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПересылаемыеПисьма", ПересылаемыеПисьма);

		ОткрытьФорму("Документ.ИсходящееПисьмо.Форма.ФормаПересылки", ПараметрыФормы, ЭтотОбъект);

	Иначе

		ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
		Если ВыбранноеПисьмо = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ВстроеннаяПочтаКлиент.ПереслатьПисьмо(ВыбранноеПисьмо);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПометитьКакПрочтенные(Команда)

	Письма = ПолучитьВыбранныеПисьма(Истина);
	КоличествоПисем = Письма.Количество();
	Если КоличествоПисем = 0 Тогда
		Возврат;
	КонецЕсли;

	ПрочтенныеПисьма = Новый Массив;
	НепрочтенныеПисьма = Новый Массив;

	Для Каждого Письмо Из Письма Цикл

		Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Письмо) Тогда

			ДанныеСтроки = Элементы.Список.ДанныеСтроки(Письмо);

			Если ДанныеСтроки <> Неопределено Тогда

				Если ДанныеСтроки.Прочтено Тогда
					ПрочтенныеПисьма.Добавить(Письмо);
				Иначе
					НепрочтенныеПисьма.Добавить(Письмо);
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Если НепрочтенныеПисьма.Количество() > 0 Тогда

		Если НепрочтенныеПисьма.Количество() > 1 Тогда
			ТекстСостояния = НСтр("ru = 'Отмечаем как прочитанные...'");
			Состояние(ТекстСостояния);
		КонецЕсли;

		РезультатОбработки = ПометитьКакПрочтенныеСервер(НепрочтенныеПисьма, Истина, ТекущаяПапка);

	Иначе

		Если ПрочтенныеПисьма.Количество() > 1 Тогда
			ТекстСостояния = НСтр("ru = 'Отмечаем как непрочитанные...'");
		КонецЕсли;

		РезультатОбработки = ПометитьКакПрочтенныеСервер(ПрочтенныеПисьма, Ложь, ТекущаяПапка);

	КонецЕсли;

	Если НепрочтенныеПисьма.Количество() > 1 Тогда

		Состояние(СтрШаблон(НСтр("ru = 'Отмечены как прочтенные (%1)'"),
			НепрочтенныеПисьма.Количество()));

	ИначеЕсли ПрочтенныеПисьма.Количество() > 1 Тогда

		Состояние(СтрШаблон(НСтр("ru = 'Отмечены как непрочтенные (%1)'"),
			ПрочтенныеПисьма.Количество()));

	КонецЕсли;

	ОбновитьДанные(РезультатОбработки);

КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВПапку(Команда)

	Письма = ПолучитьВыбранныеПисьма(Истина);
	КоличествоПисем = Письма.Количество();
	Если КоличествоПисем = 0 Тогда
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтображатьУдаленные", ОтображатьУдаленныеПисьмаИПапки);
	ПараметрыФормы.Вставить("РежимМоиПапки", РежимМоиПапки);
	ПараметрыФормы.Вставить("КоличествоПисем", КоличествоПисем);

	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("Письма", Письма);

	ОписаниеОповещения = Новый ОписаниеОповещения("ПеренестиПисьмаВПапкуЗавершение", ЭтотОбъект,
		ПараметрыОбработчика);

	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;

	ОткрытьФорму("Справочник.ПапкиПисем.Форма.ФормаПереносаПисем", ПараметрыФормы, ЭтотОбъект, , , ,
		ОписаниеОповещения, РежимОткрытияОкна);

КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВКорзину(Команда)

	Письма = ПолучитьВыбранныеПисьма(Истина);
	КоличествоПисем = Письма.Количество();
	Если КоличествоПисем = 0 Тогда
		Возврат;
	КонецЕсли;

	Если КоличествоПисем > 1 Тогда
		Состояние(НСтр("ru = 'Идет удаление писем в корзину. Пожалуйста подождите...'"));
	КонецЕсли;

	РезультатОбработки = ПереместитьВКорзинуСервер(Письма, ТекущаяПапка);

	ОбновитьДанные(РезультатОбработки.СведенияОПапке);

	НеПеренесенныеПисьма = РезультатОбработки.НеПеренесенныеПисьма;
	НеПеренесеноПисем = НеПеренесенныеПисьма.Количество();
	Если НеПеренесеноПисем > 0 Тогда

		Если КоличествоПисем > 1 Тогда
			Состояние();
		КонецЕсли;

		Если НеПеренесеноПисем = 1 Тогда

			ТемаПисьма = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
					НеПеренесенныеПисьма[0], "Тема");

			ТекстПредупреждения = СтрШаблон(
				НСтр("ru = 'Письмо ""%1"" не удалось перенести в корзину.
					 |Возможно это письмо открыто вами или другим пользователем.'"), ТемаПисьма);
		Иначе
			ТекстПредупреждения = СтрШаблон(
				НСтр("ru = 'Не удалось перенести в корзину несколько писем (%1).
					 |Возможно эти письма открыты вами или другим пользователем.'"),
				НеПеренесеноПисем);
		КонецЕсли;

		ВызватьИсключение ТекстПредупреждения;

	Иначе

		Если КоличествоПисем > 1 Тогда
			Состояние(СтрШаблон(
				НСтр("ru = 'Письма (%1) успешно удалены в корзину'"), КоличествоПисем));
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Контроль(Команда)

	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
	КонтрольКлиент.ОбработкаКомандыКонтроль(ВыбранноеПисьмо, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ЗаписьВКалендарь(Команда)

	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
	РаботаСРабочимКалендаремКлиент.СоздатьЗаписьКалендаря(ВыбранноеПисьмо);

КонецПроцедуры

&НаКлиенте
Процедура ЖелтыйФлаг(Команда)

	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый"));

КонецПроцедуры

&НаКлиенте
Процедура КрасныйФлаг(Команда)

	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный"));

КонецПроцедуры

&НаКлиенте
Процедура ЗеленыйФлаг(Команда)

	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый"));

КонецПроцедуры

&НаКлиенте
Процедура ОранжевыйФлаг(Команда)

	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый"));

КонецПроцедуры

&НаКлиенте
Процедура ЛиловыйФлаг(Команда)

	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый"));

КонецПроцедуры

&НаКлиенте
Процедура СинийФлаг(Команда)

	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий"));

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФлаг(Команда)

	УстановитьФлаги(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура Отозвать(Команда)

	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Истина);
	Если ВыбранноеПисьмо = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(ВыбранноеПисьмо) Тогда
		ПоказатьПредупреждение( , НСтр(
			"ru = 'Можно отозвать только отправленное исходящее письмо.'"));
		Возврат;
	КонецЕсли;

	ВстроеннаяПочтаКлиент.ОтозватьПисьмо(ВыбранноеПисьмо);

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПоказыватьТекст(Команда)

	Элементы.ФормаПоказыватьТекст.Пометка = Не Элементы.ФормаПоказыватьТекст.Пометка;
	ПоказыватьТекст = Элементы.ФормаПоказыватьТекст.Пометка;
	Элементы.ТекстКратко.Видимость = ПоказыватьТекст;
	МК_ВызовСервера.СохранитьНастройкуПоказыватьТекст(ПоказыватьТекст);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗагрузитьНастройки()

	ОтображатьУдаленныеПисьмаИПапки = ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку(
		"ОтображатьУдаленныеПисьмаИПапки");

	ОтображатьУдаленныеСервер();

	РежимМоиПапки = ВстроеннаяПочтаСервер.ПолучитьПерсональнуюНастройку("РежимМоиПапки");

	ТекущаяПапкаПриСоздании = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			ИмяЭтойФормы, "ТекущаяПапкаПисем", Неопределено);

	Если ЗначениеЗаполнено(ТекущаяПапкаПриСоздании) Тогда
		ТекущаяПапка = ТекущаяПапкаПриСоздании;
		УстановитьОтборПоПапкеСервер(ТекущаяПапкаПриСоздании);
	КонецЕсли;

	Если ПоддерживаетсяМножественныйВвод Тогда

		СтрокаПрочтено = ТаблицаОтбораПрочтено.Добавить();
		СтрокаПрочтено.Значение = Истина;
		СтрокаПрочтено.Представление = НСтр("ru ='Да'");
		СтрокаПрочтено.Активность = Ложь;

		СтрокаПрочтено = ТаблицаОтбораПрочтено.Добавить();
		СтрокаПрочтено.Представление = НСтр("ru ='Нет'");
		СтрокаПрочтено.Активность = Ложь;

		СтрокаЕстьВложения = ТаблицаОтбораЕстьВложения.Добавить();
		СтрокаЕстьВложения.Значение = Истина;
		СтрокаЕстьВложения.Представление = НСтр("ru ='Есть'");
		СтрокаЕстьВложения.Активность = Ложь;

		СтрокаЕстьВложения = ТаблицаОтбораЕстьВложения.Добавить();
		СтрокаЕстьВложения.Представление = НСтр("ru ='Нет'");
		СтрокаЕстьВложения.Активность = Ложь;

	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФлагиОбъектов.Ссылка КАК Значение
	|ИЗ
	|	Перечисление.ФлагиОбъектов КАК ФлагиОбъектов";

	РезультатЗапроса = Запрос.Выполнить();

	ТаблицаФлагов = РезультатЗапроса.Выгрузить();
	ТаблицаФлагов.Колонки.Добавить("Представление");

	Для Каждого СтрокаТаблицыФлагов Из ТаблицаФлагов Цикл
		СтрокаТаблицыФлагов.Представление = СокрЛП(СтрЗаменить(
			Строка(СтрокаТаблицыФлагов.Значение), "флаг", ""));

		Если СтрокаТаблицыФлагов.Значение = Перечисления.ФлагиОбъектов.Оранжевый Тогда
			СтрокаТаблицыФлагов.Представление = НСтр("ru = 'Коричневый'");
		КонецЕсли;
	КонецЦикла;

	Если ПоддерживаетсяМножественныйВвод Тогда
		ТаблицаОтбораФлагов.Загрузить(ТаблицаФлагов);
	Иначе
		Для Каждого СтрокаФлаги Из ТаблицаФлагов Цикл
			Элементы.ОтборФлагСписком.СписокВыбора.Добавить(СтрокаФлаги.Значение,
				СтрокаФлаги.Представление, , Перечисления.ФлагиОбъектов.КартинкаФлага(
				СтрокаФлаги.Значение));
		КонецЦикла;
	КонецЕсли;

	Элементы.ОтборФлаг.Видимость = ПоддерживаетсяМножественныйВвод;
	Элементы.ОтборПрочтено.Видимость = ПоддерживаетсяМножественныйВвод;
	Элементы.ОтборЕстьВложения.Видимость = ПоддерживаетсяМножественныйВвод;

	Элементы.ОтборПрочтеноСписком.Видимость = Не ПоддерживаетсяМножественныйВвод;
	Элементы.ОтборФлагСписком.Видимость = Не ПоддерживаетсяМножественныйВвод;
	Элементы.ОтборЕстьВложенияСписком.Видимость = Не ПоддерживаетсяМножественныйВвод;

	Элементы.ГруппаИспользуемыеОтборы.Видимость = Ложь;
	Элементы.ГруппаОтбор.Видимость = Ложь;

	ПоказыватьТекст = МК_ВызовСервера.НастройкаПоказыватьТекст();
	Элементы.ФормаПоказыватьТекст.Пометка = ПоказыватьТекст;
	Элементы.ТекстКратко.Видимость = ПоказыватьТекст;

КонецПроцедуры

&НаСервере
Процедура ОтображатьУдаленныеСервер(СохранитьПерсональнуюНастройку = Истина)

	Элементы.ФормаОтображатьУдаленные.Пометка = ОтображатьУдаленныеПисьмаИПапки;
	Список.Параметры.УстановитьЗначениеПараметра("ОтображатьУдаленные",
		ОтображатьУдаленныеПисьмаИПапки);

	Если СохранитьПерсональнуюНастройку Тогда
		ВстроеннаяПочтаСервер.УстановитьПерсональнуюНастройку(
			"ОтображатьУдаленныеПисьмаИПапки", ОтображатьУдаленныеПисьмаИПапки);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловноеОформлениеСпискаПисем(Список)

	УсловноеОформлениеКД = Список.КомпоновщикНастроек.Настройки.УсловноеОформление;
	УсловноеОформлениеКД.ИдентификаторПользовательскойНастройки = "ОсновноеОформление";
	
	// Выделять прочтенные письма цветом текста
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;

	ПредставлениеЭлемента = НСтр("ru = 'Выделять прочтенные письма цветом фона и текста'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;

	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(
		Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Прочтено");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("TextColor",
		ЦветаСтиля.ЦветТекстаПрочтенныхПисем);

	ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("Адресаты");
	ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("Тема");
	ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("Дата");
	
	// Отображать дату сегодняшних писем только в виде времени "09:46"
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;

	ПредставлениеЭлемента = НСтр("ru = 'Отображать дату сегодняшних писем только
								 |в виде времени ""09:46"" (стандартная настройка)'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;

	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(
		Тип("ЭлементОтбораКомпоновкиДанных"));

	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбораДанных.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
	ЭлементОтбораДанных.Использование = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Format", "ДФ=ЧЧ:мм");

	// Отображать дату писем за эту неделю в виде "Вт 19:03"
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;

	ПредставлениеЭлемента = НСтр("ru = 'Отображать дату писем за эту неделю в виде ""Вт 19:03""'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;
	
	//( Дата Меньше "Начало этого дня" И Дата Больше или равно "Начало этой недели" )
	ГруппаОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(
		Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораДанных.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ЭлементОтбораДанных = ГруппаОтбораДанных.Элементы.Добавить(
		Тип("ЭлементОтбораКомпоновкиДанных"));

	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
	ЭлементОтбораДанных.Использование = Истина;

	ЭлементОтбораДанных = ГруппаОтбораДанных.Элементы.Добавить(
		Тип("ЭлементОтбораКомпоновкиДанных"));

	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбораДанных.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтойНедели);
	ЭлементОтбораДанных.Использование = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Format", "ДФ='ddd ЧЧ:мм'");
	
	// Отображать дату писем за более ранний, чем эта неделя, период в виде "10 июн."
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;

	ПредставлениеЭлемента = НСтр("ru = 'Отображать дату писем за более ранний, чем эта неделя,
								 |период в виде ""10 июн.""'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;

	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(
		Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтойНедели);
	ЭлементОтбораДанных.Использование = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Format", "ДФ='d MMM'");
	
	// Отображать дату писем за более ранний, чем эта неделя, период в виде "10.06.2021"
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;

	ПредставлениеЭлемента = НСтр("ru = 'Отображать дату писем за более ранний, чем эта неделя,
								 |период в виде ""10.06.21"" (стандартная настройка)'");
	ЭлементУсловногоОформления.Представление = ПредставлениеЭлемента;

	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(
		Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоГода);
	ЭлементОтбораДанных.Использование = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Format", "ДФ='dd.MM.yy'");

	Если РаботаСФайламиВызовСервера.ЕстьДублирующийсяЭлемент(
		УсловноеОформлениеКД.Элементы, ЭлементУсловногоОформления) Тогда
		УсловноеОформлениеКД.Элементы.Удалить(ЭлементУсловногоОформления);
	КонецЕсли;

	МК.УстановитьПолюУсловноеОформлениеСкрытНеВидим(Список, "ФлагНомерКартинки", -1);
	МК.УстановитьПолюУсловноеОформлениеСкрытНеВидим(Список, "ВажностьНомерКартинки", 1);
	МК.УстановитьПолюУсловноеОформлениеСкрытНеВидим(Список, "ЕстьВложения", Ложь);
	МК.УстановитьПолюУсловноеОформлениеСкрытНеВидим(Список, "СостояниеКонтроляНомерКартинки", 0);

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПапкеСервер(Папка)

	Если ТекущаяПапка <> Папка Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяЭтойФормы, "ТекущаяПапкаПисем", Папка);
	КонецЕсли;

	ТекущаяПапка = Папка;
	Если Папка = Неопределено Или Папка.Пустая() Тогда
		Список.Параметры.УстановитьЗначениеПараметра("Папка", Справочники.ПапкиПисем.ПустаяСсылка());
		Заголовок = НСтр("ru = 'Почта'");
		Возврат;
	КонецЕсли;

	Список.Параметры.УстановитьЗначениеПараметра("Папка", Папка);

	СведенияОТекущейПапки = СведенияОПапке(ТекущаяПапка);
	Заголовок = СведенияОТекущейПапки.Заголовок;
	ПредставлениеТекущейПапки = СведенияОТекущейПапки.ПредставлениеПапки;

КонецПроцедуры

&НаСервереБезКонтекста
//Возвращает сведения о папке
// Параметры:
//  ТекущаяПапка - СправочникСсылка.ПапкиПисем - текущая папка
// Возвращаемое значение:
//  Структура:
//   *ПредставлениеПапки - Строка - представление текущей папки
//   *Заголовок - Строка - Заголовок формы (либо путо, либо описание родителей папки через "/")
//
Функция СведенияОПапке(ТекущаяПапка)
	
	//Описание родителя  в заголовок
	// Если установлен отбор, не выводим количество
	СведенияОПапке = ВстроеннаяПочтаСервер.ПолучитьПредставлениеПапки(ТекущаяПапка);

	ПредставлениеПапки = Строка(ТекущаяПапка);
	Если СведенияОпапке.КоличествоПисем > 0 Тогда
		ПредставлениеПапки = СтрШаблон(НСтр("ru = '(%1) %2'"), Формат(
			СведенияОпапке.КоличествоПисем, "ЧГ=0"), Строка(ТекущаяПапка));
	КонецЕсли;

	Возврат Новый Структура("ПредставлениеПапки, Заголовок", ПредставлениеПапки,
		СведенияОпапке.ОписаниеРодителей);

КонецФункции

&НаКлиенте
Процедура ВыбратьПапкуВыполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("СправочникСсылка.ПапкиПисем") Тогда
		УстановитьОтборПоПапкеСервер(Результат);
		Элементы.Список.Обновить();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьВыбранноеПисьмо(ВыводитьПредупреждение)

	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение( , НСтр("ru = 'Не выбрано письмо.'"));
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	// В МК может быть такое, делаем обход.
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено И ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = Элементы.Список.ДанныеСтроки(ТекущаяСтрока);
	КонецЕсли;

	Если ТекущиеДанные = Неопределено Тогда
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение( , НСтр("ru = 'Не выбрано письмо.'"));
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;

	Если Не ТекущиеДанные.Свойство("Ссылка") Тогда
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение( , НСтр("ru = 'Не выбрано письмо.'"));
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;

	Письмо = ТекущиеДанные.Ссылка;
	Если Не ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Письмо) Тогда
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение( , НСтр("ru = 'Не выбрано письмо.'"));
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;

	Возврат Письмо;

КонецФункции

&НаКлиенте
Функция ПолучитьВыбранныеПисьма(ВыводитьПредупреждение)

	Результат = Новый Массив;

	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	Для Каждого Ссылка Из ВыделенныеСтроки Цикл
		Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Ссылка) Тогда
			Результат.Добавить(Ссылка);
		КонецЕсли;
	КонецЦикла;

	ВыбранноеПисьмо = ПолучитьВыбранноеПисьмо(Ложь);
	Если ЗначениеЗаполнено(ВыбранноеПисьмо) И Результат.Найти(ВыбранноеПисьмо) = Неопределено Тогда
		Результат.Добавить(ВыбранноеПисьмо);
	КонецЕсли;

	Если Результат.Количество() = 0 Тогда
		Если ВыводитьПредупреждение Тогда
			ПоказатьПредупреждение( , НСтр("ru = 'Не выбраны письма.'"));
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Функция ПометитьКакПрочтенныеСервер(Письма, Пометка, ТекущаяПапка)

	РаботаСПрочтениями.УстановитьСвойствоПрочтен(Письма, Пометка);

	Возврат СведенияОПапке(ТекущаяПапка);

КонецФункции

//Обновляет данные формы: представление папки и заголовок
// Параметры:
//  СведенияОПапке - Структура:
//   *ПредставлениеПапки - Строка - Представление папки
//   *Заголовок - Строка - Заголовок формы
//  ОбновитьТолькоСписок - Булево - Признак обновления только списка писем
//
&НаКлиенте
Процедура ОбновитьДанные(СведенияОПапке = Неопределено, ОбновитьТолькоСписок = Ложь)

	Если Не ОбновитьТолькоСписок Тогда
		Если СведенияОПапке = Неопределено Тогда
			СведенияОТекущейПапке = СведенияОПапке(ТекущаяПапка);
		Иначе
			СведенияОТекущейПапке = СведенияОПапке;
		КонецЕсли;

		Заголовок = СведенияОТекущейПапке.Заголовок;
		ПредставлениеТекущейПапки = СведенияОТекущейПапке.ПредставлениеПапки;
	КонецЕсли;

	Элементы.Список.Обновить();

КонецПроцедуры

&НаКлиенте
Процедура ПеренестиПисьмаВПапкуЗавершение(Папка, ДополнительныеПараметры) Экспорт

	Если Не ЗначениеЗаполнено(Папка) Тогда
		Возврат;
	КонецЕсли;

	ПереместитьВПапкуКлиент(ДополнительныеПараметры.Письма, Папка);

КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВПапкуКлиент(Письма, Папка)

	КоличествоПисем = Письма.Количество();
	Если КоличествоПисем = 0 Тогда
		Состояние(НСтр("ru = 'Письма не выбраны'"));
		Возврат;
	КонецЕсли;

	Если КоличествоПисем > 1 Тогда
		Состояние(СтрШаблон(
			НСтр("ru = 'Переносим письма в папку ""%1""...'"), Папка));
	КонецЕсли;

	РезультатОбработки = ОбработатьПеремещениеВПапку(Письма, Папка, ТекущаяПапка);

	ОбновитьДанные(РезультатОбработки.СведенияОПапке);

	НеПеренесенныеПисьма = РезультатОбработки.НеПеренесенныеПисьма;
	НеПеренесеноПисем = НеПеренесенныеПисьма.Количество();

	Если НеПеренесеноПисем > 0 Тогда

		Если КоличествоПисем > 1 Тогда
			Состояние();
		КонецЕсли;

		Если НеПеренесеноПисем = 1 Тогда
			ТемаПисьма = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
					НеПеренесенныеПисьма[0], "Тема");
			СообщениеОбОшибке = "";

			Если ТипЗнч(РезультатОбработки.Ошибки) = Тип("Массив")
				И РезультатОбработки.Ошибки.Количество() <> 0 Тогда
				СообщениеОбОшибке = РезультатОбработки.Ошибки[0];
			КонецЕсли;

			ТекстПредупреждения = СтрШаблон(
				НСтр("ru = 'Письмо ""%1"" не удалось переместить в папку ""%2"".
					 |Возможно это письмо открыто вами или другим пользователем.
					 |
					 |Подробное описание ошибки: ""%3""'"), ТемаПисьма, Папка, СообщениеОбОшибке);
		Иначе
			ТекстПредупреждения = СтрШаблон(
				НСтр("ru = 'Не удалось переместить несколько писем (%1) в папку ""%2"".
					 |Возможно эти письма открыты вами или другим пользователем.'"),
				НеПеренесеноПисем, Папка);
		КонецЕсли;

		ВызватьИсключение ТекстПредупреждения;

	Иначе

		Если КоличествоПисем > 1 Тогда

			Состояние(СтрШаблон(
				НСтр("ru = 'Письма (%1) перемещены в папку ""%2""'"), КоличествоПисем, Папка));

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбработатьПеремещениеВПапку(Письма, Папка, ТекущаяПапка)

	Результат = Новый Структура;

	РезультатПереноса = ВстроеннаяПочтаСервер.ПоместитьПисьмаВПапку(Письма, Папка);
	Результат.Вставить("НеПеренесенныеПисьма", РезультатПереноса.НеПеренесенныеПисьма);
	Результат.Вставить("Ошибки", РезультатПереноса.Ошибки);

	СведенияОПапке = СведенияОПапке(ТекущаяПапка);
	Результат.Вставить("СведенияОПапке", СведенияОПапке);

	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Функция ПереместитьВКорзинуСервер(Письма, ТекущаяПапка)

	Результат = Новый Структура;

	РезультатПереноса = ВстроеннаяПочтаСервер.ПоместитьПисьмаВКорзину(Письма);
	Результат.Вставить("НеПеренесенныеПисьма", РезультатПереноса.НеПеренесенныеПисьма);

	СведенияОПапке = СведенияОПапке(ТекущаяПапка);
	Результат.Вставить("СведенияОПапке", СведенияОПапке);

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура УстановитьФлаги(Флаг)

	Письма = ПолучитьВыбранныеПисьма(Истина);
	Если Письма.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	УстановитьФлагиСервер(Письма, Флаг, ТекущаяПапка);

	ОбновитьДанные( , Истина);

	Оповестить("ИзменилсяФлаг", Письма);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьФлагиСервер(Письма, Флаг, ТекущаяПапка)

	РаботаСФлагамиОбъектовСервер.УстановитьФлагОбъектам(Письма, Флаг);

КонецПроцедуры

&НаКлиенте
Процедура НаписатьПоШаблонуПродолжение(Результат, Параметры) Экспорт

	Если ЗначениеЗаполнено(Результат) Тогда
		ВстроеннаяПочтаКлиент.СоздатьПисьмоНаОсновании(Результат);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКомандКонтекстногоМенюСпискаПисем(Отобразить, ЭтоВходящее)

	Элементы.СписокКонтекстноеМенюОтветить.Видимость = Отобразить;
	Элементы.СписокКонтекстноеМенюОтветитьВсем.Видимость = Отобразить;
	Элементы.СписокКонтекстноеМенюКонтроль.Видимость = Отобразить;
	Элементы.СписокКонтекстноеМенюЗаписьВКалендарь.Видимость =Отобразить;
	Элементы.СписокКонтекстноеМенюОтозвать.Видимость = Отобразить И Не ЭтоВходящее;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимостьОтбораПисем(ЗакрытьПринудительно = Ложь)

	Элементы.ГруппаОтбор.Видимость = ?(ЗакрытьПринудительно, Ложь,
		Не Элементы.ГруппаОтбор.Видимость);

	Элементы.ПоказатьОтборПисем.Видимость = Не Элементы.ГруппаОтбор.Видимость;
	Элементы.ОчиститьВсеОтборыВшапке.Видимость = Не Элементы.ГруппаОтбор.Видимость;

КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтборы(ОчиститьВсе = Ложь)

	ИспользуемыеОтборы.Очистить();
	ОтборВключен =-Ложь;

	ВсеФильтрыСпискаПисем = МК_КлиентПовтИсп.ФильтрыВСпискеПисем(ПоддерживаетсяМножественныйВвод);

	Для Каждого Фильтр Из ВсеФильтрыСпискаПисем Цикл
		ЗначениеОтбора = Неопределено;
		СведенияОФильтре = Фильтр.Значение;
		РеквизитФормы = ЭтотОбъект[СведенияОФильтре.ИмяРеквизита];
		ИмяЭлементаДляОформления = "";

		Если ТипЗнч(РеквизитФормы) = Тип("ДанныеФормыКоллекция") Тогда
			Если ОчиститьВсе Тогда
				Для Каждого СтрокаОтбора Из РеквизитФормы Цикл
					СтрокаОтбора.Активность = Ложь;
				КонецЦикла;
			Иначе
				СтрокиОтбора = РеквизитФормы.НайтиСтроки(Новый Структура("Активность", Истина));
				Если СтрокиОтбора.Количество() > 0 Тогда
					ЗначениеОтбора = Новый Массив;
					Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
						ЗначениеОтбора.Добавить(СтрокаОтбора.Значение);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ОчиститьВсе Тогда
				ЭтотОбъект[СведенияОФильтре.ИмяРеквизита] = Неопределено;
			Иначе
				ЗначениеОтбора = РеквизитФормы;
			КонецЕсли;
			ИмяЭлементаДляОформления = Фильтр.Ключ;
		КонецЕсли;

		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор,
			СведенияОФильтре.ИмяПоляОтбора);

		Если ЗначениеЗаполнено(ЗначениеОтбора) Тогда

			ОтборВключен = Истина;
			ПрименитьОтбор(СведенияОФильтре.ИмяПоляОтбора, ЗначениеОтбора);

			Если ПоддерживаетсяМножественныйВвод Тогда
				ТекущиеИспользуемыеОтборы = ИспользуемыеОтборы.НайтиСтроки(
					Новый Структура("ИмяЭлемента", Фильтр.Ключ));

				Если ТекущиеИспользуемыеОтборы.Количество() = 0 Тогда
					СтрокаИспользуемогоОтбора = ИспользуемыеОтборы.Добавить();
					СтрокаИспользуемогоОтбора.Представление = СведенияОФильтре.Представление;
					СтрокаИспользуемогоОтбора.ИмяЭлемента = Фильтр.Ключ;
					СтрокаИспользуемогоОтбора.ИмяРеквизита = СведенияОФильтре.ИмяРеквизита;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

		Если ЗначениеЗаполнено(ИмяЭлементаДляОформления) Тогда
			МК_КлиентСервер.ОформитьПроизвольныйЭлементПоСостоянию(ЭлементыСтиля,
				Элементы[ИмяЭлементаДляОформления], ЗначениеЗаполнено(ЗначениеОтбора));
		КонецЕсли;

	КонецЦикла;

	МК_КлиентСервер.ОформитьПроизвольныйЭлементПоСостоянию(ЭлементыСтиля,
		Элементы.ПоказатьОтборПисем, ОтборВключен);

	Если ПоддерживаетсяМножественныйВвод Тогда
		Элементы.ГруппаИспользуемыеОтборы.Видимость = ИспользуемыеОтборы.Количество() > 0;
	КонецЕсли;

	Элементы.ОчиститьВсеОтборы.Доступность = ОтборВключен;

КонецПроцедуры

&НаКлиенте
Процедура ПрименитьОтбор(ИмяПоляОтбора, ЗначениеОтбора)

	ЗначениеВидаСравнения = ВидСравненияКомпоновкиДанных.Равно;

	Если ТипЗнч(ЗначениеОтбора) = Тип("Строка") Тогда
		ЗначениеВидаСравнения = ВидСравненияКомпоновкиДанных.Содержит;

	ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
		ЗначениеВидаСравнения = ВидСравненияКомпоновкиДанных.ВСписке;

	ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("Число") Тогда
		Если ЗначениеОтбора = 1 Тогда
			ЗначениеОтбора = Ложь;
		ИначеЕсли ЗначениеОтбора = 2 Тогда
			ЗначениеОтбора = Истина;
		КонецЕсли;
	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Список.Отбор, ИмяПоляОтбора, ЗначениеВидаСравнения, ЗначениеОтбора);

КонецПроцедуры

#КонецОбласти