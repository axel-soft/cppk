#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если Не ДополнительныеСвойства.Свойство("Работы") Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФактическиеТрудозатраты.Сотрудник КАК Сотрудник,
		|	ФактическиеТрудозатраты.Источник КАК Источник,
		|	ФактическиеТрудозатраты.Проект КАК Проект,
		|	ФактическиеТрудозатраты.ПроектнаяЗадача КАК ПроектнаяЗадача,
		|	ФактическиеТрудозатраты.ВидРабот КАК ВидРабот,
		|	ФактическиеТрудозатраты.ДатаДобавления КАК ДатаДобавления,
		|	ФактическиеТрудозатраты.НомерДобавления КАК НомерДобавления,
		|	ФактическиеТрудозатраты.Начало КАК Начало,
		|	ФактическиеТрудозатраты.Окончание КАК Окончание
		|ИЗ
		|	РегистрСведений.ФактическиеТрудозатраты КАК ФактическиеТрудозатраты
		|ГДЕ
		|	ФактическиеТрудозатраты.ЕжедневныйОтчет = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = РегистрыСведений.ФактическиеТрудозатраты.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			МенеджерЗаписи.Прочитать();
			
			МенеджерЗаписи.Удалена = Ложь;
			МенеджерЗаписи.Записать();
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	Результат = ДополнительныеСвойства.Работы;
	Результат.Колонки.Добавить("НомерДобавления", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("ДлительностьСверхурочно", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("ДлительностьВВыходные", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("ДлительностьРабочееВремя", Новый ОписаниеТипов("Число"));
	ЕстьКолонкаИзменена = Результат.Колонки.Найти("Изменена") <> Неопределено;
	
	Для Каждого Строка Из Результат Цикл
		Если Не ЗначениеЗаполнено(Строка.ДатаДобавления) 
		 Или НачалоДня(Строка.ДатаДобавления) <> НачалоДня(Дата) Тогда 
			Строка.ДатаДобавления = Дата;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(Строка.Источник) Тогда 
			Строка.Источник = Ссылка;
		КонецЕсли;	
		
		Если Строка.ВидРабот.ВидВремени = Перечисления.ВидыВремени.Рабочее Тогда 
			Строка.ДлительностьРабочееВремя = Строка.Длительность;
		КонецЕсли;	
		
		Строка.НомерДобавления = Результат.Индекс(Строка)+1;
	КонецЦикла;	
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда 
		ГрафикРаботы = ГрафикиРаботы.ГрафикРаботыСотрудника(Сотрудник);
		РабочийДень = ГрафикиРаботы.ЭтоРабочийДень(Дата, ГрафикРаботы);
		Если РабочийДень Тогда 
			ДлительностьРабочегоДня = ГрафикиРаботы.ПолучитьДлительностьРабочегоДня(Дата, ГрафикРаботы);
			ДлительностьРабочееВремя = Результат.Итог("ДлительностьРабочееВремя");
			Если ДлительностьРабочееВремя > ДлительностьРабочегоДня Тогда // сверхурочно
				ДлительностьСверхурочно = ДлительностьРабочееВремя - ДлительностьРабочегоДня;
				
				Инд = Результат.Количество() - 1;
				Пока ДлительностьСверхурочно > 0 Цикл
					Строка = Результат[Инд];
					Если Строка.ДлительностьРабочееВремя > 0 Тогда 
						Если Строка.ДлительностьРабочееВремя >= ДлительностьСверхурочно Тогда 
							Строка.ДлительностьСверхурочно = ДлительностьСверхурочно;
							ДлительностьСверхурочно = 0;
						Иначе
							Строка.ДлительностьСверхурочно = Строка.ДлительностьРабочееВремя;
							ДлительностьСверхурочно = ДлительностьСверхурочно - Строка.ДлительностьСверхурочно;
						КонецЕсли;	
					КонецЕсли;
					Инд = Инд - 1;
				КонецЦикла;	
			КонецЕсли;	
		Иначе	
			Для Каждого Строка Из Результат Цикл
				Строка.ДлительностьВВыходные = Строка.Длительность;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;	
	
	// Очистим "регистратор" существующих записей.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФактическиеТрудозатраты.Сотрудник,
	|	ФактическиеТрудозатраты.Источник,
	|	ФактическиеТрудозатраты.Проект,
	|	ФактическиеТрудозатраты.ПроектнаяЗадача,
	|	ФактическиеТрудозатраты.ВидРабот,
	|	ФактическиеТрудозатраты.ДатаДобавления,
	|	ФактическиеТрудозатраты.НомерДобавления,
	|	ФактическиеТрудозатраты.Начало,
	|	ФактическиеТрудозатраты.Окончание
	|ИЗ
	|	РегистрСведений.ФактическиеТрудозатраты КАК ФактическиеТрудозатраты
	|ГДЕ
	|	ФактическиеТрудозатраты.ЕжедневныйОтчет = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ФактическиеТрудозатраты.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.ЕжедневныйОтчет = Неопределено;
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
	// Очистим записи за период.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФактическиеТрудозатраты.Сотрудник КАК Сотрудник,
	|	ФактическиеТрудозатраты.Источник КАК Источник,
	|	ФактическиеТрудозатраты.Проект КАК Проект,
	|	ФактическиеТрудозатраты.ПроектнаяЗадача КАК ПроектнаяЗадача,
	|	ФактическиеТрудозатраты.ВидРабот КАК ВидРабот,
	|	ФактическиеТрудозатраты.ДатаДобавления КАК ДатаДобавления,
	|	ФактическиеТрудозатраты.НомерДобавления КАК НомерДобавления,
	|	ФактическиеТрудозатраты.Начало КАК Начало,
	|	ФактическиеТрудозатраты.Окончание КАК Окончание
	|ИЗ
	|	РегистрСведений.ФактическиеТрудозатраты КАК ФактическиеТрудозатраты
	|ГДЕ
	|	(НАЧАЛОПЕРИОДА(ФактическиеТрудозатраты.ДатаДобавления, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаОтчета, ДЕНЬ)
	|				И ФактическиеТрудозатраты.Сотрудник = &Сотрудник
	|			ИЛИ ФактическиеТрудозатраты.Источник = &Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДатаОтчета", Дата);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ФактическиеТрудозатраты.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Удалить();
	КонецЦикла;	
	
	Для Каждого Строка Из Результат Цикл
		
		МенеджерЗаписи = РегистрыСведений.ФактическиеТрудозатраты.СоздатьМенеджерЗаписи();
		
		МенеджерЗаписи.Сотрудник = Сотрудник;
		
		МенеджерЗаписи.ОписаниеРаботы = Строка.Работа;
		МенеджерЗаписи.ВидРабот = Строка.ВидРабот;
		МенеджерЗаписи.Источник = Строка.Источник;
		
		МенеджерЗаписи.Проект = Строка.Проект;
		МенеджерЗаписи.ПроектнаяЗадача = Строка.ПроектнаяЗадача;
			
		МенеджерЗаписи.Длительность = Строка.Длительность;
		МенеджерЗаписи.ДлительностьСверхурочно = Строка.ДлительностьСверхурочно;
		МенеджерЗаписи.ДлительностьВВыходные = Строка.ДлительностьВВыходные;
		
		Если СпособУказанияВремени = Перечисления.СпособыУказанияВремени.ВремяНачала Тогда 
			МенеджерЗаписи.Начало = Строка.Начало;
			МенеджерЗаписи.Окончание = Строка.Окончание;
		КонецЕсли;
		
		МенеджерЗаписи.ДатаДобавления = Строка.ДатаДобавления;
		МенеджерЗаписи.НомерДобавления = Строка.НомерДобавления;
		
		МенеджерЗаписи.ЕжедневныйОтчет = Ссылка;
		МенеджерЗаписи.Удалена = Ложь;
		МенеджерЗаписи.Записать();
		
		Если ЕстьКолонкаИзменена И Строка.Изменена Тогда
			РегистрыСведений.МП_ИзмененныеТрудозатраты.ИзменитьЗапись(Сотрудник, Строка.ДатаДобавления, Строка.НомерДобавления);
		КонецЕсли;
	КонецЦикла;
	
	Движения.РабочееВремяСотрудников.Записывать = Истина;
	
	Результат.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	Для Каждого Строка Из Результат Цикл
		
		Движение = Движения.РабочееВремяСотрудников.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Строка);
		
		Движение.Период = Дата;
		Движение.Сотрудник = Сотрудник;
		Движение.ДлительностьВсего = Строка.Длительность;
		Движение.ДлительностьРабочая = Строка.ДлительностьРабочееВремя;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Запись Тогда 
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	
	Если Не ДополнительныеСвойства.Свойство("Работы") Тогда 
		Возврат;
	КонецЕсли;	
	
	Работы = ДополнительныеСвойства.Работы;
	
	// заполнение поля длительность
	Если (СпособУказанияВремени = Перечисления.СпособыУказанияВремени.ВремяНачала) И (Работы.Количество() > 0) Тогда
		
		Для Каждого Строка Из Работы Цикл
			Если Строка.Окончание >= Строка.Начало Тогда 
				Строка.Длительность = Строка.Окончание - Строка.Начало;
			Иначе
				Строка.Длительность = Строка.Окончание - Строка.Начало + 86400;
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЕсли;
	
	// общая длительность работ для вывода в журнал
	ДлительностьРаботСек = Работы.Итог("Длительность");
	ДлительностьРабот = УчетВремениКлиентСервер.ЧислоВСтроку(ДлительностьРаботСек);
	ДлительностьРабочегоВремениСек = 0;
	ВидыРабот = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Работы.ВыгрузитьКолонку("ВидРабот"));
	ВидыВремени = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВидыРабот, "ВидВремени");
	Для Каждого Строка Из Работы Цикл
		ВидВремени = ВидыВремени[Строка.ВидРабот].ВидВремени;
		ДлительностьРабочегоВремениСек = ДлительностьРабочегоВремениСек + 
			?(ВидВремени = ПредопределенноеЗначение("Перечисление.ВидыВремени.Рабочее"),
				Строка.Длительность,
				0);
	КонецЦикла;
	ДлительностьРабочая = УчетВремениКлиентСервер.ЧислоВСтроку(ДлительностьРабочегоВремениСек);
	
	// проверка суммарной длительности для вывода в журнал
	Если Не ЗначениеЗаполнено(НачалоДня) Или Не ЗначениеЗаполнено(ОкончаниеДня) Или (НачалоДня > ОкончаниеДня) Тогда 
		НекорректнаяДлительность = Истина;
	Иначе    	
		ПродолжительностьДняСек = ОкончаниеДня - НачалоДня;
		
		НекорректнаяДлительность = (ДлительностьРаботСек <> ПродолжительностьДняСек);
	КонецЕсли;
	
	// Проверка пропусков интервалов
	Если СпособУказанияВремени = Перечисления.СпособыУказанияВремени.ВремяНачала Тогда 
		
		Для Каждого Строка1 Из Работы Цикл
			ЕстьПозднее = Ложь;
			ЕстьПропуски = Истина;
			
			Для Каждого Строка2 Из Работы Цикл
				Если Работы.Индекс(Строка1) = Работы.Индекс(Строка2) Тогда 
					Продолжить;
				КонецЕсли;	
				
				Если Строка2.Начало >= Строка1.Окончание Тогда 
					ЕстьПозднее = Истина;
				КонецЕсли;	
				
				Если Строка2.Начало = Строка1.Окончание Тогда 
					ЕстьПропуски = Ложь;
				КонецЕсли;	
			КонецЦикла;
			
			Если ЕстьПозднее И ЕстьПропуски Тогда 
				НекорректнаяДлительность = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("Работы", Работы);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЕстьЕжедневныеОтчетыТекущейДаты() Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ежедневный отчет на дату %1 уже был введен ранее!'"),
			Формат(Дата, "ДЛФ=D"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		    ТекстСообщения,
			ЭтотОбъект,
			"Дата",, 
			Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФактическиеТрудозатраты.Сотрудник,
	|	ФактическиеТрудозатраты.Источник,
	|	ФактическиеТрудозатраты.Проект,
	|	ФактическиеТрудозатраты.ПроектнаяЗадача,
	|	ФактическиеТрудозатраты.ВидРабот,
	|	ФактическиеТрудозатраты.ДатаДобавления,
	|	ФактическиеТрудозатраты.НомерДобавления,
	|	ФактическиеТрудозатраты.Начало,
	|	ФактическиеТрудозатраты.Окончание
	|ИЗ
	|	РегистрСведений.ФактическиеТрудозатраты КАК ФактическиеТрудозатраты
	|ГДЕ
	|	ФактическиеТрудозатраты.ЕжедневныйОтчет = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ФактическиеТрудозатраты.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Прочитать();
		
		МенеджерЗаписи.Удалена = Истина;
		МенеджерЗаписи.Записать();
		РегистрыСведений.МП_ИзмененныеТрудозатраты.УдалитьЗаписьОТрудозатрате(Сотрудник, Выборка.ДатаДобавления, 
			Выборка.НомерДобавления);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Сотрудник = Сотрудники.ОсновнойСотрудник();
	Автор = Сотрудник;
	Дата = КонецДня(ТекущаяДатаСеанса());
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда 
		Если ДанныеЗаполнения.Свойство("Дата") Тогда 
			Дата = КонецДня(ДанныеЗаполнения.Дата);
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("Сотрудник") Тогда 
			Сотрудник = ДанныеЗаполнения.Сотрудник;
		КонецЕсли;
	КонецЕсли;
	
	СпособУказанияВремени = УчетВремени.ПолучитьСпособУказанияВремени();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = КонецДня(ТекущаяДатаСеанса());
	Автор = Сотрудники.ОсновнойСотрудник();
	Сотрудник = Сотрудники.ОсновнойСотрудникПользователя(Сотрудник);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЕстьЕжедневныеОтчетыТекущейДаты()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕжедневныйОтчет.Ссылка
	|ИЗ
	|	Документ.ЕжедневныйОтчет КАК ЕжедневныйОтчет
	|ГДЕ
	|	ЕжедневныйОтчет.Сотрудник = &Сотрудник
	|	И НАЧАЛОПЕРИОДА(ЕжедневныйОтчет.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
	|	И ЕжедневныйОтчет.Проведен
	|	И ЕжедневныйОтчет.Ссылка <> &Ссылка";
	
	Запрос.УстановитьПараметр("Дата", 	 Дата);
	Запрос.УстановитьПараметр("Ссылка",  Ссылка);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли