#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ПротоколированиеРаботыСотрудников.ЗаписатьОткрытие(Объект.Ссылка);
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);

	Если Объект.Ссылка.Пустая() Тогда
		УчетВремениВызовСервера.ЗаполнитьНачалоИОкончаниеДня(Объект);
		Элементы.ФормаПоказатьВСписке.Доступность = Ложь;
	КонецЕсли;

	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ЗаполнитьРаботыПриКопировании(Параметры.ЗначениеКопирования.Дата);
		// вывод длительности в строковое поле
		Для Каждого Строка Из Работы Цикл
			Строка.ДлительностьСтр = УчетВремениКлиентСервер.ЧислоВСтроку(Строка.Длительность);
			Строка.ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(
				Строка.Проект, Строка.ПроектнаяЗадача);
		КонецЦикла;
	Иначе
		ЗаполнитьРаботыТекущегоДня();
	КонецЕсли;

	ОбновитьФондРабочегоВремени();
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();

	Если Объект.Сотрудник = Сотрудники.ОсновнойСотрудникПользователя(
		ТекущийПользователь) Тогда
		Элементы.Сотрудник.Видимость = Ложь;
	КонецЕсли;

	ОсновнойВидРабот = УчетВремени.ПолучитьОсновнойВидРабот();
	ОсновнойПроект = РаботаСПроектами.ПолучитьПроектПоУмолчанию();
		
	// установка видимости полей
	УстановитьВидимость();
	
	// формирование заголовка формы
	СформироватьЗаголовокФормы();
	
	// Обработчик механизма "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаМиниАнкета");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);

	Если ЭтотОбъект.Свойства_ИспользоватьСвойства Тогда
		Если ЭтотОбъект.Свойства_ОписаниеДополнительныхРеквизитов.Количество() > 0 Тогда
			Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		КонецЕсли;
	КонецЕсли;	
	
	// Сохранение вводимых значений
	СохранениеВводимыхЗначений.ЗаполнитьСписокВыбора(ЭтотОбъект, ЭлементыДляЗаполнения(),
		ЭтотОбъект.ИмяФормы);

	НачальнаяДата = НачалоДня(Объект.Дата);
	НачальныйСотрудник = Объект.Сотрудник;
	ЗаполнитьОтсутствие();
	
	// Инструкции
	ПоказыватьИнструкции = ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции");
	ПолучитьИнструкции();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	ЭтоМобильныйКлиент = ПараметрыСеанса.ЭтоМобильныйКлиент;
	Если ЭтоМобильныйКлиент Тогда
		МК_НастроитьЭлементыФормы();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ОбновитьЗаПолночь();
	РассчитатьДлительностьСтрок();
	РассчитатьПродолжительностьДня(); 	// обновление реквизита продолжительность
	ОбновитьПодвал();					// вывод итогов в подвал
	Оповестить("ОбновитьСписокПоследних");
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)

	Если (ИсточникВыбора.ИмяФормы
		= "РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаПодбораРабот") И (ТипЗнч(
		РезультатВыбора) = Тип("Структура")) Тогда

		Строка = Работы.Добавить();
		ОбработкаВыбораРаботы(РезультатВыбора, Строка);

	КонецЕсли;

	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВыборПроектаЗадачи" И ТипЗнч(РезультатВыбора) = Тип(
		"Структура") Тогда

		ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ВыбранноеЗначение = РезультатВыбора;

		ТекущиеДанные.Проект = ВыбранноеЗначение.Проект;
		ТекущиеДанные.ПроектнаяЗадача = ВыбранноеЗначение.ПроектнаяЗадача;
		ТекущиеДанные.ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(
			ВыбранноеЗначение.Проект, ВыбранноеЗначение.ПроектнаяЗадача,
			ВыбранноеЗначение.ЕстьПроектныеЗадачи);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "Запись_Отсутствие" Тогда
		ЗаполнитьОтсутствие();
		ОбновитьФондРабочегоВремени();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// вывод длительности в строковое поле
	Для Каждого Строка Из Работы Цикл
		Строка.ДлительностьСтр = УчетВремениКлиентСервер.ЧислоВСтроку(Строка.Длительность);
		Строка.ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(
			Строка.Проект, Строка.ПроектнаяЗадача);
	КонецЦикла;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	ОчиститьСообщения();

	// заполнение длительности на основе строкового поля
	Если Объект.СпособУказанияВремени = ПредопределенноеЗначение(
		"Перечисление.СпособыУказанияВремени.Длительность") Тогда
		Для Каждого Строка Из Работы Цикл
			Строка.Длительность = УчетВремениКлиентСервер.ЧислоИзСтроки(Строка.ДлительностьСтр);
		КонецЦикла;
	КонецЕсли;
	ОбновитьЗаПолночь();
	ОбновитьПодвал();

	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка));

	ТекущийОбъект.ДополнительныеСвойства.Вставить("Работы", Работы.Выгрузить());
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Сохранение вводимых значений
	СохранениеВводимыхЗначений.ОбновитьСпискиВыбора(ЭтотОбъект, ЭлементыДляСохранения(),
		ЭтотОбъект.ИмяФормы);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ПротоколированиеРаботыСотрудников.ЗаписатьСоздание(Объект.Ссылка,
		ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(Объект.Ссылка);

	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина Тогда
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	КонецЕсли;

	СформироватьЗаголовокФормы();
	
	// вывод длительности в строковое поле
	Для Каждого Строка Из Работы Цикл
		Строка.ДлительностьСтр = УчетВремениКлиентСервер.ЧислоВСтроку(Строка.Длительность);
		Строка.ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(
			Строка.Проект, Строка.ПроектнаяЗадача);
	КонецЦикла;

	Элементы.ФормаПоказатьВСписке.Доступность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыОповещения.Вставить("Дата", Объект.Дата);

	Оповестить("ИзмененЕжедневныйОтчет", ПараметрыОповещения, ЭтотОбъект);

	СформироватьЗаголовокФормы();

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	Для Каждого Строка Из Работы Цикл
		ИндексСтроки = Работы.Индекс(Строка);

		Если Не ЗначениеЗаполнено(Строка.Работа) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр(
				"ru = 'Не заполнена колонка ""Содержание работ"" в строке %1 списка ""Работы"".'"),
				ИндексСтроки + 1);

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Работы[" + Формат(
				ИндексСтроки, "ЧН=0; ЧГ=0") + "].Работа", , Отказ);
		КонецЕсли;

		Если Не ЗначениеЗаполнено(Строка.ВидРабот) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнена колонка ""Вид работ"" в строке %1 списка ""Работы"".'"),
				ИндексСтроки + 1);

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Работы[" + Формат(
				ИндексСтроки, "ЧН=0; ЧГ=0") + "].ВидРабот", , Отказ);
		КонецЕсли;

		Если Объект.СпособУказанияВремени = Перечисления.СпособыУказанияВремени.Длительность Тогда
			Длительность = УчетВремениКлиентСервер.ЧислоИзСтроки(Строка.ДлительностьСтр);
			Если Не ЗначениеЗаполнено(Длительность) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнена колонка ""Время"" в строке %1 списка ""Работы"".'"),
					ИндексСтроки + 1);

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Работы["
					+ Формат(ИндексСтроки, "ЧН=0; ЧГ=0") + "].ДлительностьСтр", , Отказ);
			КонецЕсли;
		Иначе
			Если Не ЗначениеЗаполнено(Строка.Начало) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр(
					"ru = 'Не заполнена колонка ""Начало работ"" в строке %1 списка ""Работы"".'"),
					ИндексСтроки + 1);

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Работы["
					+ Формат(ИндексСтроки, "ЧН=0; ЧГ=0") + "].Начало", , Отказ);
			КонецЕсли;

			Если Не ЗначениеЗаполнено(Строка.Окончание) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр(
					"ru = 'Не заполнена колонка ""Окончание работ"" в строке %1 списка ""Работы"".'"),
					ИндексСтроки + 1);

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Работы["
					+ Формат(ИндексСтроки, "ЧН=0; ЧГ=0") + "].Окончание", , Отказ);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Если Объект.СпособУказанияВремени = Перечисления.СпособыУказанияВремени.ВремяНачала Тогда
		
		// Проверка пересекающихся интервалов
		Для Инд1 = 0 По Работы.Количество() - 2 Цикл
			Строка1 = Работы[Инд1];

			Для Инд2 = Инд1 + 1 По Работы.Количество() - 1 Цикл
				Строка2 = Работы[Инд2];

				Если (Строка2.Начало >= Строка1.Начало И Строка2.Начало < Строка1.Окончание
					И Строка2.НачалоЗаПолночь = Строка1.НачалоЗаПолночь) Или (Строка2.Окончание
					> Строка1.Начало И Строка2.Окончание <= Строка1.Окончание
					И Строка2.НачалоЗаПолночь = Строка1.НачалоЗаПолночь) Тогда

					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр(
						"ru = 'Найдены пересекающиеся интервалы времени в строках %1 и %2 списка ""Работы"".'"),
						Инд1 + 1, Инд2 + 1);

					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Работы", ,
						Отказ);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

	КонецЕсли;

	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда

		Для Каждого Строка Из Работы Цикл
			Если Не ЗначениеЗаполнено(Строка.ПроектЗадача) Тогда
				Продолжить;
			КонецЕсли;

			ИндексСтроки = Работы.Индекс(Строка);
			ТекстСообщения = "";
			РезультатПроверки = РаботаСПроектами.ПроверитьЗаписьОФактическихТрудозатратах(
				Строка.Проект, Строка.ПроектнаяЗадача, Строка.Источник,
				Сотрудники.ЛюбойПользовательСотрудника(Объект.Сотрудник), ТекстСообщения);
			Если Не РезультатПроверки Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения, , "Работы[" + ИндексСтроки + "].ПроектЗадача", , Отказ);
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;	
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)

	Если Настройки["ПоказыватьИнструкции"] <> Неопределено И ПолучитьФункциональнуюОпцию(
		"ИспользоватьИнструкции") Тогда
		ПолучитьИнструкции();
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()

	МК_УстановитьВидимостьСообщенияОшибки(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НачалоДняПриИзменении(Элемент)

	Объект.НачалоДня = Объект.НачалоДня - Секунда(Объект.НачалоДня);
	РассчитатьПродолжительностьДня();
	ОбновитьЗаПолночь();
	ОбновитьПодвал();

КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеДняПриИзменении(Элемент)

	Объект.ОкончаниеДня = Объект.ОкончаниеДня - Секунда(Объект.ОкончаниеДня);

	РассчитатьДлительностьСтрок();
	РассчитатьПродолжительностьДня();
	ОбновитьПодвал();

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) <> НачальнаяДата Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ДатаПриИзмененииПродолжение", ЭтотОбъект);
		Если Работы.Количество() > 0 И Не Объект.Ссылка.Пустая() Тогда
			СписокОтветов = Новый СписокЗначений;
			СписокОтветов.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Да, перезаполнить'"));
			СписокОтветов.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Нет, оставить введенные'"));
			ТекстВопроса = НСтр(
				"ru = 'Дата изменена. Перезаполнить отчет работами указанного дня или оставить текущие?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокОтветов, , КодВозвратаДиалога.Да);
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
		КонецЕсли;
		НачальнаяДата = НачалоДня(Объект.Дата);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПриИзмененииДаты();
		ОбновитьПодвал();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)

	Если Объект.Сотрудник <> НачальныйСотрудник Тогда

		СотрудникПриИзмененииСервер();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	СотрудникиКлиент.ВыбратьСотрудникаИзАдреснойКниги(Элемент, Объект.Сотрудник);

КонецПроцедуры

&НаКлиенте
Процедура СотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные,
	СтандартнаяОбработка)

	СотрудникиКлиент.СотрудникОбработкаВыбора(Объект, "Сотрудник", ВыбранноеЗначение,
		СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура НачалоПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	ТекущиеДанные.Начало = ТекущиеДанные.Начало - Секунда(ТекущиеДанные.Начало);

	ТекущиеДанные.НачалоЗаПолночь = Объект.НачалоДня > ТекущиеДанные.Начало;

	РассчитатьДлительностьСтрок();
	ОбновитьПодвал();

	Если ТекущиеДанные.Начало > ТекущиеДанные.Окончание И ЗначениеЗаполнено(
		ТекущиеДанные.Окончание) Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Время начала работы больше, чем время окончания'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	ТекущиеДанные.Окончание = ТекущиеДанные.Окончание - Секунда(ТекущиеДанные.Окончание);

	РассчитатьДлительностьСтрок();
	ОбновитьПодвал();

КонецПроцедуры

&НаКлиенте
Процедура ДлительностьСтрПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;

	Если Не УчетВремениКлиентСервер.ПроверитьФормат(ТекущиеДанные.ДлительностьСтр) Тогда
		ТекущиеДанные.ДлительностьСтр = "";
	КонецЕсли;
	ТекущиеДанные.Длительность = УчетВремениКлиентСервер.ЧислоИзСтроки(
		ТекущиеДанные.ДлительностьСтр);

	ОбновитьПодвал();

КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РаботаСПроектамиКлиент.ВыбратьПроектЗадачу(ЭтотОбъект, ТекущиеДанные.Проект,
		ТекущиеДанные.ПроектнаяЗадача);

КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ТекущиеДанные.Проект = ВыбранноеЗначение.Проект;
		ТекущиеДанные.ПроектнаяЗадача = ВыбранноеЗначение.ПроектнаяЗадача;

		ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(
			ВыбранноеЗначение.Проект, ВыбранноеЗначение.ПроектнаяЗадача,
			ВыбранноеЗначение.ЕстьПроектныеЗадачи);

		ТекущиеДанные.ПроектЗадача = ПроектЗадача;

		ВыбранноеЗначение = ПроектЗадача;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекущиеДанные.ПроектнаяЗадача) Тогда
		ПоказатьЗначение( , ТекущиеДанные.ПроектнаяЗадача);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Проект) Тогда
		ПоказатьЗначение( , ТекущиеДанные.Проект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОчистка(Элемент, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные.Проект = Неопределено;
	ТекущиеДанные.ПроектнаяЗадача = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ТекущиеДанные.ПроектЗадача) Тогда
		ТекущиеДанные.Проект = Неопределено;
		ТекущиеДанные.ПроектнаяЗадача = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)

	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПроектами.СформироватьДанныеВыбораПроектаЗадачи(Текст);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.Работы.ТекущиеДанные;

	Если ЗначениеЗаполнено(Текст) Тогда
		ДанныеВыбораПроектаЗадачи = РаботаСПроектами.СформироватьДанныеВыбораПроектаЗадачи(Текст);

		Если ДанныеВыбораПроектаЗадачи.Количество() = 1 Тогда
			ВыбранноеЗначение = ДанныеВыбораПроектаЗадачи[0].Значение;

			ТекущиеДанные.Проект = ВыбранноеЗначение.Проект;
			ТекущиеДанные.ПроектнаяЗадача = ВыбранноеЗначение.ПроектнаяЗадача;
			ТекущиеДанные.ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(
				ВыбранноеЗначение.Проект, ВыбранноеЗначение.ПроектнаяЗадача,
				ВыбранноеЗначение.ЕстьПроектныеЗадачи);
		Иначе
			СтандартнаяОбработка = Ложь;
			ДанныеВыбора = ДанныеВыбораПроектаЗадачи;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораРаботы(РезультатВыбора, Строка)

	Строка.Работа = РезультатВыбора.Работа;
	Строка.ВидРабот = РезультатВыбора.ВидРабот;
	Если ЗначениеЗаполнено(РезультатВыбора.Начало) Тогда
		Строка.Начало = РезультатВыбора.Начало;
	КонецЕсли;
	Если ЗначениеЗаполнено(РезультатВыбора.Окончание) Тогда
		Строка.Окончание = РезультатВыбора.Окончание;
	КонецЕсли;
	ПриИзмененииВидаРабот(Строка);
	Строка.Проект = РезультатВыбора.Проект;
	Строка.ПроектнаяЗадача = РезультатВыбора.ПроектнаяЗадача;
	Строка.ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Строка.Проект,
		Строка.ПроектнаяЗадача);

	Если ТипЗнч(РезультатВыбора.Источник) = Тип("ДокументСсылка.ЕжедневныйОтчет") Тогда
		Строка.Источник = Неопределено;
	Иначе
		Строка.Источник = РезультатВыбора.Источник;
	КонецЕсли;

	Если Объект.СпособУказанияВремени = ПредопределенноеЗначение(
		"Перечисление.СпособыУказанияВремени.ВремяНачала") Тогда

		Если Не ЗначениеЗаполнено(Строка.Начало) Тогда
			// заполняем начало работы текущим временем
			ТекущаяДата = ТекущаяДата();
			Строка.Начало = ТекущаяДата - Секунда(ТекущаяДата);
		КонецЕсли;

		РассчитатьДлительностьСтрок();

	КонецЕсли;
	ОбновитьПодвал();

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	РаботаСИнструкциямиКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element,
		Элемент.Документ);

КонецПроцедуры

&НаКлиенте
Процедура ДатаРегулирование(Элемент, Направление, СтандартнаяОбработка)

#Если МобильныйКлиент Тогда
	СтандартнаяОбработка = Ложь;
	НачалоДняОтчета = НачалоДня(Объект.Дата);
	Объект.Дата = ?(Направление > 0, НачалоДняОтчета + 24 * 3600, НачалоДняОтчета - 24 * 3600);
#КонецЕсли

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаботы

&НаКлиенте
Процедура РаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда

		ТекущиеДанные = Элементы.Работы.ТекущиеДанные;
		Если Не Копирование Тогда
			ТекущиеДанные.ВидРабот = ОсновнойВидРабот;
			ПриИзмененииВидаРабот(ТекущиеДанные);
			ТекущиеДанные.Проект = ОсновнойПроект;
			ТекущиеДанные.ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(
				ТекущиеДанные.Проект, ТекущиеДанные.ПроектнаяЗадача);
		КонецЕсли;
		Если Объект.СпособУказанияВремени = ПредопределенноеЗначение(
			"Перечисление.СпособыУказанияВремени.ВремяНачала") Тогда
			Строка = Работы.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор());
			Индекс = Работы.Индекс(Строка);
			Если Индекс > 0 Тогда
				ТекущиеДанные.Начало = Работы[Индекс - 1].Окончание;
			Иначе
				ТекущиеДанные.Начало = Объект.НачалоДня;
			КонецЕсли;
			ТекущиеДанные.НачалоЗаПолночь = ТекущиеДанные.Начало < Объект.НачалоДня;

			РассчитатьДлительностьСтрок();
		КонецЕсли;

		ОбновитьПодвал();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РаботыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	РассчитатьДлительностьСтрок();
	ОбновитьПодвал();

	ТекущиеДанные = Элемент.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные.Изменена = Истина;

КонецПроцедуры

&НаКлиенте
Процедура РаботыПослеУдаления(Элемент)

	РассчитатьДлительностьСтрок();
	ОбновитьПодвал();

КонецПроцедуры

&НаКлиенте
Процедура РаботыПередУдалением(Элемент, Отказ)

	ТекущиеДанные = Элемент.ТекущиеДанные;

	Если Параметры.Ключ.Пустая() Или ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МП_ИзмененияВызовСервера.ЗафиксироватьУдалениеЗаписиОТрудозатрате(
		Объект.Сотрудник, Объект.Дата, ТекущиеДанные.НомерДобавленияИсходный);

КонецПроцедуры

&НаКлиенте
Процедура РаботаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Строка = Элементы.Работы.ТекущиеДанные;
		ОбработкаВыбораРаботы(ВыбранноеЗначение, Строка);

		ВыбранноеЗначение = ВыбранноеЗначение.Работа;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РаботаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)

	Если СтрДлина(Текст) < 2 Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Текст) Тогда
		ДанныеВыбора = УчетВремени.ПолучитьДанныеАвтоподбораРабот(Текст, Объект.Сотрудник);
		Если ДанныеВыбора.Количество() > 0 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РаботаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)

	Если СтрДлина(Текст) < 2 Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Текст) Тогда
		ДанныеВыбора = УчетВремени.ПолучитьДанныеАвтоподбораРабот(Текст, Объект.Сотрудник);
		Если ДанныеВыбора.Количество() > 0 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидРаботПриИзменении(Элемент)

	ПриИзмененииВидаРабот(Элементы.Работы.ТекущиеДанные);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура МК_СтраницаМиниАнкета(Команда)

	МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.ГруппаМиниАнкета,
		Элементы.МК_КнопкаСтраницаМиниАнкета);

КонецПроцедуры
&НаКлиенте
Процедура МК_СтраницаРаботы(Команда)

	МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.ГруппаРаботыЗаДень,
		Элементы.МК_КнопкаСтраницаРаботы);

КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьИнструкции(Команда)

	ПоказыватьИнструкции = Не ПоказыватьИнструкции;
	ПолучитьИнструкции();

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВСписке(Команда)

	Если Модифицированность И Не Записать() Тогда
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.Ссылка);

	Если НачальныйСотрудник <> Объект.Сотрудник Тогда
		Форма = ПолучитьФорму("Документ.ЕжедневныйОтчет.Форма.ФормаСписка", ПараметрыФормы);
	Иначе
		Форма = ПолучитьФорму("Документ.ЕжедневныйОтчет.Форма.ФормаСвоиОтчеты", ПараметрыФормы);
	КонецЕсли;

	Форма.Открыть();
	Форма.ВыполнитьПереход(Объект.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)

	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтотОбъект);

КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВидимость()

	Если Объект.СпособУказанияВремени = Перечисления.СпособыУказанияВремени.Длительность Тогда

		Элементы.Начало.Видимость = Ложь;
		Элементы.Окончание.Видимость = Ложь;
		Элементы.ДлительностьСтр.Видимость = Истина;

	ИначеЕсли Объект.СпособУказанияВремени = Перечисления.СпособыУказанияВремени.ВремяНачала Тогда

		Элементы.Начало.Видимость = Истина;
		Элементы.Окончание.Видимость = Истина;
		Элементы.ДлительностьСтр.Видимость = Ложь;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПродолжительностьДня()

	Если Не ЗначениеЗаполнено(Объект.НачалоДня) Или Не ЗначениеЗаполнено(Объект.ОкончаниеДня) Тогда
		ПродолжительностьДня = "";
	ИначеЕсли Объект.НачалоДня > Объект.ОкончаниеДня Тогда
		ПродолжительностьДня = УчетВремениКлиентСервер.ЧислоВСтроку(
			Объект.ОкончаниеДня - Объект.НачалоДня + 86400);
	Иначе
		ПродолжительностьДня = УчетВремениКлиентСервер.ЧислоВСтроку(
			Объект.ОкончаниеДня - Объект.НачалоДня);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодвал()
	
	// вывод строки Всего за день
	ДлительностьРабочегоВремениСек = 0;
	ДлительностьРаботСек = 0;

	Для Каждого Строка Из Работы Цикл
		ДлительностьРаботСек = ДлительностьРаботСек + Строка.Длительность;
		ДлительностьРабочегоВремениСек = ДлительностьРабочегоВремениСек + ?(Строка.ВидВремени
			= ПредопределенноеЗначение("Перечисление.ВидыВремени.Рабочее"), Строка.Длительность, 0);
	КонецЦикла;

	ПроцентФонда = ?(ФондРабочегоВремени = 0, 0, 100 * ДлительностьРабочегоВремениСек
		/ ФондРабочегоВремени);
	ДлительностьРабот = СтрШаблон(НСтр("ru = 'Всего: %1, в т.ч. рабочее: %2 (%3)'"),
		УчетВремениКлиентСервер.ЧислоВСтроку(ДлительностьРаботСек, "0"),
		УчетВремениКлиентСервер.ЧислоВСтроку(ДлительностьРабочегоВремениСек, "0"), Формат(
		ПроцентФонда, "ЧДЦ=0; ЧН=0; ЧГ=0") + "%");
	
	// Вывод строки Превышено \ Осталось.
	ПродолжительностьДняСек = ?(Объект.ОкончаниеДня - Объект.НачалоДня >= 0, Объект.ОкончаниеДня
		- Объект.НачалоДня, Объект.ОкончаниеДня - Объект.НачалоДня + 86400);

	Если Не ЗначениеЗаполнено(Объект.НачалоДня) Или Не ЗначениеЗаполнено(Объект.ОкончаниеДня) Тогда

		СообщениеОшибки = "";

	ИначеЕсли ДлительностьРаботСек > ПродолжительностьДняСек Тогда
		СообщениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '(превышено на %1)'"), УчетВремениКлиентСервер.ЧислоВСтроку(
			ДлительностьРаботСек - ПродолжительностьДняСек));

	ИначеЕсли ДлительностьРаботСек < ПродолжительностьДняСек Тогда
		СообщениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '(осталось %1)'"), УчетВремениКлиентСервер.ЧислоВСтроку(
			ПродолжительностьДняСек - ДлительностьРаботСек));

	Иначе
		СообщениеОшибки = "";
	КонецЕсли;

	МК_УстановитьВидимостьСообщенияОшибки(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаПолночь()

	Для Каждого Строка Из Работы Цикл
		Строка.НачалоЗаПолночь = Строка.Начало < Объект.НачалоДня;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СформироватьЗаголовокФормы()

	Если Объект.Ссылка.Пустая() Тогда
		ЭтотОбъект.Заголовок = НСтр("ru = 'Ежедневный отчет (создание)'");
	Иначе
		ЭтотОбъект.Заголовок = НСтр("ru = 'Ежедневный отчет за'") + " " + Формат(Объект.Дата,
			"ДЛФ=D");
	КонецЕсли;

	Элементы.НачалоДня.Заголовок = ТРег(Формат(Объект.Дата, "ДФ=дддд"));

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьДлительностьСтрок()
	
	// заполнение поля длительность
	Если (Объект.СпособУказанияВремени = ПредопределенноеЗначение(
		"Перечисление.СпособыУказанияВремени.ВремяНачала")) И (Работы.Количество() > 0) Тогда

		Работы.Сортировать("НачалоЗаПолночь, Начало");

		Для Каждого Строка Из Работы Цикл
			Если Строка.Окончание >= Строка.Начало Тогда
				Строка.Длительность = Строка.Окончание - Строка.Начало;
			Иначе
				Строка.Длительность = Строка.Окончание - Строка.Начало + 86400;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПоместитьРаботыВоВременноеХранилище()

	Возврат ПоместитьВоВременноеХранилище(Работы.Выгрузить( , "Работа"), УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ЭлементыДляСохранения()

	СписокСохраняемыхПолей = Новый ТаблицаЗначений;
	СписокСохраняемыхПолей.Колонки.Добавить("ИмяПоляЭлемента");
	СписокСохраняемыхПолей.Колонки.Добавить("ЗначениеРеквизита");

	Для Каждого Строка Из Работы Цикл
		НоваяСтрока = СписокСохраняемыхПолей.Добавить();
		НоваяСтрока.ИмяПоляЭлемента = "ВидРабот";
		НоваяСтрока.ЗначениеРеквизита = Строка.ВидРабот;
	КонецЦикла;

	Возврат СписокСохраняемыхПолей;

КонецФункции

&НаСервере
Функция ЭлементыДляЗаполнения()

	СписокСохраняемыхПолей = Новый ТаблицаЗначений;
	СписокСохраняемыхПолей.Колонки.Добавить("ИмяПоляЭлемента");
	СписокСохраняемыхПолей.Колонки.Добавить("ЗначениеРеквизита");

	НоваяСтрока = СписокСохраняемыхПолей.Добавить();
	НоваяСтрока.ИмяПоляЭлемента = "ВидРабот";

	Возврат СписокСохраняемыхПолей;

КонецФункции

&НаСервере
Процедура ПриИзмененииДаты()

	Если НачалоДня(Объект.Дата) = Объект.Дата Тогда
		Объект.Дата = Объект.Дата + 1;
	КонецЕсли;
	СформироватьЗаголовокФормы();
	УчетВремениВызовСервера.ЗаполнитьНачалоИОкончаниеДня(Объект);

	ЗаполнитьРаботыТекущегоДня();
	ЗаполнитьОтсутствие();
	ОбновитьФондРабочегоВремени();

КонецПроцедуры	

// показывает в табличной части работы за текущий день
&НаСервере
Процедура ЗаполнитьРаботыТекущегоДня(ОчищатьРаботы = Истина)

	Если ОчищатьРаботы Тогда
		Работы.Очистить();
	КонецЕсли;

	Результат = УчетВремениВызовСервера.ПолучитьРаботыЗаДень(Объект.Дата, Объект.Сотрудник);

	Для Каждого Строка Из Результат Цикл
		Если ЗначениеЗаполнено(Строка.ЕжедневныйОтчет) И Строка.ЕжедневныйОтчет <> Объект.Ссылка Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока = Работы.Добавить();
		НоваяСтрока.Работа = Строка.ОписаниеРаботы;
		НоваяСтрока.ВидРабот = Строка.ВидРабот;
		НоваяСтрока.ВидВремени = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.ВидРабот,
			"ВидВремени");
		НоваяСтрока.Проект = Строка.Проект;
		НоваяСтрока.ПроектнаяЗадача = Строка.ПроектнаяЗадача;
		НоваяСтрока.ДатаДобавления = Строка.ДатаДобавления;
		НоваяСтрока.Источник = Строка.Источник;
		НоваяСтрока.НомерДобавленияИсходный = Строка.НомерДобавленияИсходный;
		Если Объект.СпособУказанияВремени = Перечисления.СпособыУказанияВремени.ВремяНачала Тогда
			НоваяСтрока.Начало = Строка.Начало;
			НоваяСтрока.Окончание = ?(ЗначениеЗаполнено(Строка.Окончание), Строка.Окончание,
				Строка.ДатаДобавления);
			НоваяСтрока.Длительность = Строка.Длительность;
			Если Не ЗначениеЗаполнено(НоваяСтрока.Начало) И ЗначениеЗаполнено(
				НоваяСтрока.Окончание) Тогда
				НоваяСтрока.Начало = НоваяСтрока.Окончание - НоваяСтрока.Длительность;
			КонецЕсли;
		Иначе
			НоваяСтрока.Длительность = Строка.Длительность;
		КонецЕсли;

	КонецЦикла;

	Если Объект.СпособУказанияВремени = Перечисления.СпособыУказанияВремени.ВремяНачала Тогда
		Работы.Сортировать("Начало");
	Иначе
		Работы.Сортировать("ДатаДобавления");
	КонецЕсли;
	
	// вывод длительности в строковое поле
	Для Каждого Строка Из Работы Цикл
		Строка.ДлительностьСтр = УчетВремениКлиентСервер.ЧислоВСтроку(Строка.Длительность);
		Строка.ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(
			Строка.Проект, Строка.ПроектнаяЗадача);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРаботыПриКопировании(ДатаКопирования)

	Работы.Очистить();

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФактическиеТрудозатраты.Сотрудник,
	|	ФактическиеТрудозатраты.Источник,
	|	ФактическиеТрудозатраты.Проект,
	|	ФактическиеТрудозатраты.ПроектнаяЗадача,
	|	ФактическиеТрудозатраты.ВидРабот,
	|	ФактическиеТрудозатраты.ДатаДобавления,
	|	ФактическиеТрудозатраты.Начало,
	|	ФактическиеТрудозатраты.Окончание,
	|	ФактическиеТрудозатраты.Длительность,
	|	ФактическиеТрудозатраты.ЕжедневныйОтчет,
	|	ФактическиеТрудозатраты.ОписаниеРаботы
	|ИЗ
	|	РегистрСведений.ФактическиеТрудозатраты КАК ФактическиеТрудозатраты
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ФактическиеТрудозатраты.ДатаДобавления, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаОтчета, ДЕНЬ)
	|	И ФактическиеТрудозатраты.Сотрудник = &Сотрудник";

	Запрос.УстановитьПараметр("ДатаОтчета", ДатаКопирования);
	Запрос.УстановитьПараметр("Сотрудник", Объект.Сотрудник);

	Результат = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из Результат Цикл
		НоваяСтрока = Работы.Добавить();
		НоваяСтрока.Работа = Строка.ОписаниеРаботы;
		НоваяСтрока.ВидРабот = Строка.ВидРабот;
		НоваяСтрока.ВидВремени = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.ВидРабот,
			"ВидВремени");
		НоваяСтрока.Проект = Строка.Проект;
		НоваяСтрока.ПроектнаяЗадача = Строка.ПроектнаяЗадача;
		НоваяСтрока.ДатаДобавления = '00010101';

		Если ТипЗнч(Строка.Источник) = Тип("ДокументСсылка.ЕжедневныйОтчет") Тогда
			НоваяСтрока.Источник = Неопределено;
		Иначе
			НоваяСтрока.Источник = Строка.Источник;
		КонецЕсли;

		Если Объект.СпособУказанияВремени = Перечисления.СпособыУказанияВремени.ВремяНачала Тогда
			НоваяСтрока.Начало = Строка.Начало;
			НоваяСтрока.Окончание = Строка.Окончание;
			НоваяСтрока.Длительность = Строка.Длительность;
		Иначе
			НоваяСтрока.Длительность = Строка.Длительность;
		КонецЕсли;
	КонецЦикла;

	Если Объект.СпособУказанияВремени = Перечисления.СпособыУказанияВремени.ВремяНачала Тогда
		Работы.Сортировать("Начало");
	Иначе
		Работы.Сортировать("ДатаДобавления");
	КонецЕсли;	
	
	// вывод длительности в строковое поле
	Для Каждого Строка Из Работы Цикл
		Строка.ДлительностьСтр = УчетВремениКлиентСервер.ЧислоВСтроку(Строка.Длительность);
		Строка.ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(
			Строка.Проект, Строка.ПроектнаяЗадача);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СотрудникПриИзмененииСервер()

	УчетВремениВызовСервера.ЗаполнитьНачалоИОкончаниеДня(Объект);
	ЗаполнитьРаботыТекущегоДня();
	ЗаполнитьОтсутствие();
	ОбновитьФондРабочегоВремени();

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьВыполнить()

	Если Записать() Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Изменение:'"), ПолучитьНавигационнуюСсылку(Объект.Ссылка), Строка(
			Объект.Ссылка), БиблиотекаКартинок.Информация32);

		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подобрать()

	АдресВременногоХранилища = ПоместитьРаботыВоВременноеХранилище();

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Сотрудник", Объект.Сотрудник);
	ПараметрыФормы.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);

	ОткрытьФорму("РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаПодбораРабот", ПараметрыФормы,
		ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтсутствие()

	Отсутствие = Неопределено;
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОтсутствия") Или Не ЗначениеЗаполнено(
		Объект.Сотрудник) Тогда
		Возврат;
	КонецЕсли;

	ПользовательМассивом = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		Сотрудники.ЛюбойПользовательСотрудника(Объект.Сотрудник));
	НастройкиОтсутствий = ОтсутствияКлиентСервер.НастройкиПроверкиОтсутствий();
	НастройкиОтсутствий.УчитыватьФлагБудуРазбиратьЗадачи = Ложь;
	ТаблицаОтсутствий = Отсутствия.ПолучитьТаблицуОтсутствий(НачалоДня(Объект.Дата), КонецДня(
		Объект.Дата), ПользовательМассивом, НастройкиОтсутствий);
	Если ТаблицаОтсутствий.Количество() > 0 Тогда
		Отсутствие = ТаблицаОтсутствий[0].Ссылка;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииВидаРабот(Работа)

	Если Работа <> Неопределено Тогда
		Работа.ВидВремени = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
			Работа.ВидРабот, "ВидВремени");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьФондРабочегоВремени()
	ФондТаблицей = УчетВремени.ФондРабочегоВремени(Объект.Сотрудник, НачалоДня(Объект.Дата),
		КонецДня(Объект.Дата));
	ФондРабочегоВремени = ФондТаблицей.Итог("Длительность");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА СВОЙСТВ

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
	НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект,
		РеквизитФормыВЗначение("Объект"));

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИНСТРУКЦИИ

&НаСервере
Процедура ПолучитьИнструкции()

	РаботаСИнструкциями.ПолучитьИнструкции(ЭтотОбъект, 85, 115);

КонецПроцедуры

#Область СлужебныеПроцедурыИФункции_МобильныйКлиент

&НаСервере
Процедура МК_НастроитьЭлементыФормы()
	
	// Общее.
	СворачиваниеЭлементовПоВажности = СворачиваниеЭлементовФормыПоВажности.НеИспользовать;
	ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;

	МК_ЭлементыСтиля = МК_ПовтИсп.ЭлементыСтиля();
	ЭтоНеТелефон = МК_ПовтИсп.ЭтоНеТелефон();
	
	// Нижний блок.
	МК.ПреобразоватьКнопкуВАкцентную(ЭтотОбъект, МК_ЭлементыСтиля, Элементы.КнопкаЗаписатьИЗакрыть);

	Элементы.Инструкция.Высота = 3;
	Элементы.Инструкция.Ширина = 10;
	Элементы.Инструкция.РастягиватьПоГоризонтали = Истина;

	// Работы.
	Элементы.ДлительностьСтр.Видимость = Ложь;

	Элементы.Работы.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	Элементы.МК_РаботыКоманднаяПанель.Видимость = Истина;

	Элементы.Работы.Шапка = Ложь;
	Элементы.Работа.Ширина = 40;
	Элементы.Работа.РастягиватьПоГоризонтали = Истина;
	Элементы.ГруппаРаботыЗаДень.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	Элементы.ДекорацияОтступПередПодваломМК.Видимость = Истина;

	Элементы.РаботыГруппаКолонокМК.Видимость = Истина;

	Элементы.Переместить(Элементы.Работа, Элементы.РаботыГруппаРаботаВидМК);
	Элементы.Работа.Ширина = 0;
	Элементы.Работа.АвтоМаксимальнаяШирина = Ложь;
	Элементы.Работа.МаксимальнаяШирина = 30;

	Элементы.Переместить(Элементы.ВидРабот, Элементы.РаботыГруппаРаботаВидМК);
	Элементы.ВидРабот.Шрифт = ШрифтыСтиля.МК_ШрифтАвтораИсполнителя;
	Элементы.ВидРабот.ЦветТекста = ЦветаСтиля.МК_ЦветАвтораИсполнителя;

	Элементы.Переместить(Элементы.Начало, Элементы.РаботыГруппаНачалоОкончаниеМК);
	Элементы.Начало.Ширина = 5;
	Элементы.Начало.ФиксацияВТаблице = ФиксацияВТаблице.Право;

	Элементы.Переместить(Элементы.Окончание, Элементы.РаботыГруппаНачалоОкончаниеМК);
	Элементы.Окончание.Ширина = 5;
	Элементы.Окончание.ФиксацияВТаблице = ФиксацияВТаблице.Право;
	
	// Шапка.
	Элементы.Отсутствие.Видимость = ЗначениеЗаполнено(Отсутствие);

	Если Элементы.Сотрудник.Видимость Тогда
		Элементы.Сотрудник.Заголовок = НСтр("ru = 'Сотрудник'");
		Элементы.Сотрудник.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	КонецЕсли;

	Элементы.Дата.КнопкаРегулирования = Ложь;

	Элементы.КнопкаЗаписать.Картинка = БиблиотекаКартинок.ЗаписатьИЗакрыть;
	Элементы.КнопкаЗаписать.Отображение = ОтображениеКнопки.Картинка;
	
	// Настроим шапку документа
	Элементы.ГруппаШапка.РастягиватьПоГоризонтали = Истина;
	Элементы.ГруппаШапка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;
	Элементы.ПериодРабочегоДня.РастягиватьПоГоризонтали = Истина;
	Элементы.ПериодРабочегоДня.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	Элементы.ПериодРабочегоДня.ВыравниваниеЭлементовИЗаголовков = ВариантВыравниванияЭлементовИЗаголовков.ЭлементыПравоЗаголовкиЛево;

	Элементы.Дата.Ширина = 0;
	Элементы.Дата.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;

	Элементы.НачалоДня.Ширина = 0;
	Элементы.НачалоДня.РастягиватьПоГоризонтали = Истина;
	Элементы.НачалоДня.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	Элементы.НачалоДня.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Авто;

	Элементы.ОкончаниеДня.Ширина = 0;
	Элементы.ОкончаниеДня.АвтоМаксимальнаяШирина = Ложь;
	Элементы.ОкончаниеДня.МаксимальнаяШирина = 4;

	Элементы.ПродолжительностьДня.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
	Элементы.ПродолжительностьДня.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	Элементы.ПродолжительностьДня.Ширина = 0;
	Элементы.ПродолжительностьДня.РастягиватьПоГоризонтали = Истина;

	Элементы.ГруппаИнфо.РастягиватьПоГоризонтали = Истина;
	МК_УстановитьВидимостьСообщенияОшибки(ЭтотОбъект);
	Элементы.КнопкаПодобрать.Видимость = Ложь;
	Элементы.РаботыГруппаНачалоОкончание.Группировка = ГруппировкаКолонок.Вертикальная;
	
	// Страницы.
	Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;

	Если ЭтотОбъект.Свойства_ИспользоватьСвойства Тогда
		Если ЭтотОбъект.Свойства_ОписаниеДополнительныхРеквизитов.Количество() > 0 Тогда
			Элементы.МК_ГруппаПереключателиСтраниц.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;

	МК_СброситьОформлениеПереключателейСтраницПредпросмотра(ЭтотОбъект);
	МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.ГруппаРаботыЗаДень,
		Элементы.МК_КнопкаСтраницаРаботы);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_ПереключитьНаСтраницу(Форма, Страница, Кнопка)

	Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница = Страница;
	МК_СброситьОформлениеПереключателейСтраницПредпросмотра(Форма);
	МК_КлиентСервер.ОформитьКнопкуФильтра(Форма.МК_ЭлементыСтиля, Кнопка, Истина, Истина);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_СброситьОформлениеПереключателейСтраницПредпросмотра(Форма)

	МК_КлиентСервер.ОформитьКнопкуФильтра(
		Форма.МК_ЭлементыСтиля, Форма.Элементы.МК_КнопкаСтраницаРаботы, Истина, Ложь);

	МК_КлиентСервер.ОформитьКнопкуФильтра(
		Форма.МК_ЭлементыСтиля, Форма.Элементы.МК_КнопкаСтраницаМиниАнкета, Истина, Ложь);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_УстановитьВидимостьСообщенияОшибки(Форма)

	Если Форма.ЭтоМобильныйКлиент Тогда
		Форма.Элементы.СообщениеОшибки.Видимость = ЗначениеЗаполнено(Форма.СообщениеОшибки);
		Форма.Элементы.ГруппаИнфо.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти