#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

	// Переопределяемый метод...
	//@skip-check module-empty-method
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ОткрытиеИзДокумента") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ВидФормы = "ФормаОбъекта" И Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		
		ДокументКорреспонденция = Параметры.Ключ; // ДокументСсылка.Корреспонденция
		Основание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ДокументКорреспонденция, "Основание");
		Если ЗначениеЗаполнено(Основание) Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = Метаданные.Справочники.ДокументыПредприятия.Формы.ФормаЭлемента;
			Параметры.Вставить("Ключ", Основание);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Читает данные из связанного документа "Корреспонденция" и заполняет открытую форму документа.
// 
// Параметры:
//  Форма - Структура - В случае вызова для интеграции с внешними ИБ (БИД). Поля структуры повторяют реквизиты формы.
//		  - См. Справочник.ДокументыПредприятия.Форма.ФормаЭлемента
Процедура ЗаполнитьДанныеНаФормеДокумента(Форма) Экспорт 
	
	#Если Не ВнешнееСоединение Тогда
	
	Объект = Форма.Объект;
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Корреспонденция.Ссылка КАК Корреспонденция,
		|	Корреспонденция.ВидКорреспонденции КАК ВидКорреспонденции,
		|	Корреспонденция.ДатаКонтрагента КАК ДатаКонтрагента,
		|	Корреспонденция.НомерКонтрагента КАК НомерКонтрагента,
		|	ЛОЖЬ КАК Отправлен,
		|	Корреспонденция.Корреспонденты.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Корреспондент КАК Корреспондент,
		|		Адресат КАК Адресат,
		|		СпособОтправки КАК СпособОтправки,
		|		Отправлен КАК Отправлен,
		|		ДатаОтправки КАК ДатаОтправки,
		|		НомерКонтрагента КАК НомерКонтрагента,
		|		ДатаКонтрагента КАК ДатаКонтрагента
		|	) КАК Корреспонденты,
		|	Корреспонденция.СпособПолучения КАК СпособПолучения,
		|	Корреспонденция.ВопросыОбращения.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Вопрос КАК Вопрос,
		|		ДатаОтвета КАК ДатаОтвета,
		|		КодВопроса КАК КодВопроса,
		|		МнениеАвтораОМерах КАК МнениеАвтораОМерах,
		|		МнениеАвтораОРезультатах КАК МнениеАвтораОРезультатах,
		|		ОрганДляПередачи КАК ОрганДляПередачи,
		|		Раздел КАК Раздел,
		|		РезультатРассмотрения КАК РезультатРассмотрения,
		|		Тема КАК Тема,
		|		Тематика КАК Тематика
		|	) КАК ВопросыОбращения,
		|	Корреспонденция.ВидОбращения КАК ВидОбращения,
		|	Корреспонденция.КонтактноеЛицоПереадресовавшего КАК КонтактноеЛицоПереадресовавшего,
		|	Корреспонденция.Переадресовавший КАК Переадресовавший,
		|	Корреспонденция.СрокОтветаПереадресовавшему КАК СрокОтветаПереадресовавшему,
		|	Корреспонденция.ТребуетсяОтветПереадресовавшему КАК ТребуетсяОтветПереадресовавшему,
		|	Корреспонденция.ЭтоПовторноеОбращение КАК ЭтоПовторноеОбращение,
		|	Корреспонденция.ЭтоДубликатОбращения КАК ЭтоДубликатОбращения,
		|	Корреспонденция.ОсновноеОбращение КАК ОсновноеОбращение,
		|	Корреспонденция.ПервичноеОбращение КАК ПервичноеОбращение,
		|	Корреспонденция.ГотовоКВыгрузкеССТУ
		|ИЗ
		|	Документ.Корреспонденция КАК Корреспонденция
		|ГДЕ
		|	Корреспонденция.Основание = &Основание";
	
	РежимКопирования = Ложь;
	Если Объект.Ссылка.Пустая() Тогда 
		
		Если Форма.Параметры.Свойство("ЗначениеКопирования") 
			И ЗначениеЗаполнено(Форма.Параметры.ЗначениеКопирования) Тогда 
			
			Документ = Форма.Параметры.ЗначениеКопирования;
			РежимКопирования = Истина;
			
		ИначеЕсли Форма.Параметры.Свойство("ШаблонДокумента") 
			И ЗначениеЗаполнено(Форма.Параметры.ШаблонДокумента) Тогда

			Шаблон = Форма.Параметры.ШаблонДокумента;
			ПоляШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Шаблон, "АдресатВходящейКорреспонденции, ВидОбращения, Способ, Контрагенты");
			
			ВидДокументаКэш = Форма.ВидДокументаКэш; // См. Делопроизводство.НовыйКэшВидаДокумента

			Форма.АдресатВходящейКорреспонденции = ПоляШаблона.АдресатВходящейКорреспонденции;
			Форма.ВидОбращения = ПоляШаблона.ВидОбращения;
			Если ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией Тогда
				Форма.СпособПолучения = ПоляШаблона.Способ;
			ИначеЕсли ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией Тогда

				Форма.СпособОтправки = ПоляШаблона.Способ;

				Для Каждого СтрокаКонтрагента Из ПоляШаблона.Контрагенты.Выгрузить() Цикл

					Отбор = Новый Структура("Контрагент, КонтактноеЛицо",
						СтрокаКонтрагента.Контрагент, СтрокаКонтрагента.КонтактноеЛицо);
					НайденныйКонтрагент = Объект.Контрагенты.НайтиСтроки(Отбор);

					Если НайденныйКонтрагент.Количество() Тогда
						НайденныйКонтрагент[0].СпособОтправки = СтрокаКонтрагента.Способ;
					КонецЕсли;

				КонецЦикла;

			КонецЕсли;

			Возврат;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
	Иначе 
		Документ = Объект.Ссылка;
	КонецЕсли;
	
	Запрос.Параметры.Вставить("Основание", Документ);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если Выборка.ВидКорреспонденции = Перечисления.ВидыКорреспонденции.Входящая Тогда 
			Если Не РежимКопирования Тогда 
				Форма.ИсходящийНомер = Выборка.НомерКонтрагента;
				Форма.ИсходящаяДата = Выборка.ДатаКонтрагента;
				Форма.ГотовоКВыгрузкеССТУ = Выборка.ГотовоКВыгрузкеССТУ;
			КонецЕсли;
			
			Форма.СпособПолучения = Выборка.СпособПолучения;
			Форма.ВидОбращения = Выборка.ВидОбращения;
			
			ВыборкаКорреспонденты = Выборка.Корреспонденты.Выбрать();
			Пока ВыборкаКорреспонденты.Следующий() Цикл 
				Форма.АдресатВходящейКорреспонденции = ВыборкаКорреспонденты.Адресат;
			КонецЦикла;
			
			ВыборкаВопросыОбращения = Выборка.ВопросыОбращения.Выбрать();
			Форма.ВопросыОбращения.Очистить();
			Пока ВыборкаВопросыОбращения.Следующий() Цикл 
				НовСтрока = Форма.ВопросыОбращения.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, ВыборкаВопросыОбращения);
				НовСтрока.КодВопроса = РаботаСОбращениямиВызовСервера.СформироватьКодВопроса(
					НовСтрока.Раздел, НовСтрока.Тематика, НовСтрока.Тема, НовСтрока.Вопрос);
					
				Если РежимКопирования Тогда
					НовСтрока.ДатаОтвета = Неопределено;
					НовСтрока.ОрганДляПередачи = Неопределено;
					НовСтрока.РезультатРассмотрения = Неопределено;
					НовСтрока.МнениеАвтораОРезультатах = Неопределено;
					НовСтрока.МнениеАвтораОМерах = Неопределено;
				КонецЕсли;
			КонецЦикла;
			
			Форма.КонтактноеЛицоПереадресовавшего = Выборка.КонтактноеЛицоПереадресовавшего;
			Форма.Переадресовавший = Выборка.Переадресовавший;
			Форма.СрокОтветаПереадресовавшему = Выборка.СрокОтветаПереадресовавшему;
			Форма.ТребуетсяОтветПереадресовавшему = Выборка.ТребуетсяОтветПереадресовавшему;
			
			Форма.Повторное = Выборка.ЭтоПовторноеОбращение;
			Форма.Дубликат = Выборка.ЭтоДубликатОбращения;
			Форма.ПервичноеОбращение = Выборка.ПервичноеОбращение;
			Форма.ОсновноеОбращение = Выборка.ОсновноеОбращение;
			
			РаботаСОбращениями.ЗаполнитьВопросыОбращения(Форма); // Остальные поля, производные от этих.
			
		Иначе 
			Если Не РежимКопирования Тогда
				Форма.ВходящийНомер = Выборка.НомерКонтрагента;
				Форма.ВходящаяДата = Выборка.ДатаКонтрагента;
			КонецЕсли;
			
			ТЗКорреспонденты = Выборка.Корреспонденты.Выгрузить();
			Для Каждого СтрКонтрагент Из Объект.Контрагенты Цикл 
				СтрНайтиКорреспондента = ТЗКорреспонденты.НайтиСтроки(Новый Структура("Корреспондент", СтрКонтрагент.Контрагент));
				Если СтрНайтиКорреспондента.Количество() = 0 Тогда 
					Продолжить;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(СтрКонтрагент, СтрНайтиКорреспондента[0]);
				
				РеквизитыФормы = Новый Структура;
				Если РежимКопирования Тогда
					РеквизитыФормы.Вставить("Отправлен", Ложь);
					РеквизитыФормы.Вставить("ДатаОтправки", '00010101');
					РеквизитыФормы.Вставить("СпособОтправки", Справочники.СпособыДоставки.ПустаяСсылка());
					РеквизитыФормы.Вставить("ВходящийНомер", "");
					РеквизитыФормы.Вставить("ВходящаяДата", Неопределено);
				Иначе
					РеквизитыФормы.Вставить("ВходящийНомер", СтрНайтиКорреспондента[0].НомерКонтрагента);
					РеквизитыФормы.Вставить("ВходящаяДата", СтрНайтиКорреспондента[0].ДатаКонтрагента);
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(СтрКонтрагент, РеквизитыФормы);
			КонецЦикла;
			
			Если Не РежимКопирования И ТЗКорреспонденты.Количество() > 0 Тогда 
				Форма.Отправлен = ТЗКорреспонденты[0].Отправлен;
				Форма.ДатаОтправки = ТЗКорреспонденты[0].ДатаОтправки;
				Форма.СпособОтправки = ТЗКорреспонденты[0].СпособОтправки;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	#КонецЕсли
	
КонецПроцедуры

// Возвращает структуру корреспонденции.
// 
// Возвращаемое значение:
//  Структура:
// * ВидДокументаКэш - См. Делопроизводство.НовыйКэшВидаДокумента
// * СрокИсполненияПервоначальный - Дата -
// * СрокИсполнения - Дата -
// * ВидОбращения - ПеречислениеСсылка.ВидыОбращенийГраждан -
// * ВопросыОбращения - Массив Из Структура -
// 					  - См. Справочник.ДокументыПредприятия.Форма.ФормаЭлемента.ВопросыОбращения
// * ОсновноеОбращение - СправочникСсылка.ДокументыПредприятия -
// * ПервичноеОбращение - СправочникСсылка.ДокументыПредприятия -
// * ЭтоДубликатОбращения - Булево -
// * ЭтоПовторноеОбращение - Булево -
// * ИсходящийНомер - Строка -
// * ИсходящаяДата - Дата -
// * Контрагент - СправочникСсылка.Контрагенты -
// * АдресатВходящейКорреспонденции - СправочникСсылка.Сотрудники -
// 									- СправочникСсылка.Пользователи -
// 									- СправочникСсылка.КонтактныеЛица -
// 									- Неопределено -
// * ВходящийНомер - Строка -
// * ВходящаяДата - Дата -
// * Контрагенты - Массив Из См. НовыйСтруктураИзСтрокиТчКорреспонденты
// 				 - ТаблицаЗначений - Устаревший способ вызова
// * Ссылка - СправочникСсылка.ДокументыПредприятия -
// * СпособПолучения - СправочникСсылка.СпособыДоставки -
// * КонтактноеЛицоПереадресовавшего - СправочникСсылка.КонтактныеЛица -
// * Переадресовавший - СправочникСсылка.Контрагенты -
// * СрокОтветаПереадресовавшему - Дата -
// * ТребуетсяОтветПереадресовавшему - Булево -
// * ГотовоКВыгрузкеССТУ - Булево - Обращение готово к выгрузке в ССТУ
Функция НовыеПараметрыКорреспонденции() Экспорт
	
	ПараметрыКорреспонденции = Новый Структура();
	ПараметрыКорреспонденции.Вставить("ВидДокументаКэш", Делопроизводство.НовыйКэшВидаДокумента());
	ПараметрыКорреспонденции.Вставить("СрокИсполненияПервоначальный", '00010101');
	ПараметрыКорреспонденции.Вставить("СрокИсполнения", '00010101');
	ПараметрыКорреспонденции.Вставить("ВидОбращения", Перечисления.ВидыОбращенийГраждан.ПустаяСсылка());
	ПараметрыКорреспонденции.Вставить("ВопросыОбращения", Новый Массив());
	ПараметрыКорреспонденции.Вставить("ОсновноеОбращение", Справочники.ДокументыПредприятия.ПустаяСсылка());
	ПараметрыКорреспонденции.Вставить("ПервичноеОбращение", Справочники.ДокументыПредприятия.ПустаяСсылка());
	ПараметрыКорреспонденции.Вставить("ЭтоДубликатОбращения", Ложь);
	ПараметрыКорреспонденции.Вставить("ЭтоПовторноеОбращение", Ложь);
	ПараметрыКорреспонденции.Вставить("ИсходящийНомер", "");
	ПараметрыКорреспонденции.Вставить("ИсходящаяДата", '00010101');
	ПараметрыКорреспонденции.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	ПараметрыКорреспонденции.Вставить("АдресатВходящейКорреспонденции", Неопределено);
	ПараметрыКорреспонденции.Вставить("ВходящийНомер", "");
	ПараметрыКорреспонденции.Вставить("ВходящаяДата", '00010101');
	ПараметрыКорреспонденции.Вставить("Контрагенты", Новый Массив());
	ПараметрыКорреспонденции.Вставить("Ссылка", Справочники.ДокументыПредприятия.ПустаяСсылка());
	ПараметрыКорреспонденции.Вставить("СпособПолучения", Справочники.СпособыДоставки.ПустаяСсылка());
	ПараметрыКорреспонденции.Вставить("КонтактноеЛицоПереадресовавшего", Справочники.КонтактныеЛица.ПустаяСсылка());
	ПараметрыКорреспонденции.Вставить("Переадресовавший", Справочники.Контрагенты.ПустаяСсылка());
	ПараметрыКорреспонденции.Вставить("СрокОтветаПереадресовавшему", '00010101');
	ПараметрыКорреспонденции.Вставить("ТребуетсяОтветПереадресовавшему", Ложь);
	ПараметрыКорреспонденции.Вставить("ГотовоКВыгрузкеССТУ", Ложь);
	
	Возврат ПараметрыКорреспонденции;
	
КонецФункции

// Конструктор структуры, описывающей строку ТЧ Корреспонденции "Корреспонденты". Имена полей совпадают с колонками ТЧ.
// Для совместимости с устаревшими вызовами добавлены поля, как они называются в форме документа
// Сохранение документа "Корреспонденция" учитывает оба вида полей.
// 
// Возвращаемое значение:
//  Структура - Новый строка корреспонденции тч контрагенты:
// * Корреспондент - СправочникСсылка.Контрагенты -
// * Адресат - СправочникСсылка.КонтактныеЛица -
// * НомерКонтрагента - Строка -
// * ДатаКонтрагента - Дата -
// * ДатаОтправки - Дата -
// * СпособОтправки - СправочникСсылка.СпособыДоставки - 
// * Отправлен - Булево -
// * Контрагент - СправочникСсылка.Контрагенты - Для устаревшего вызова. Надо обращаться к "Корреспондент"
// * КонтактноеЛицо - СправочникСсылка.КонтактныеЛица - Для устаревшего вызова. Надо обращаться к "Адресат"
// * ВходящийНомер - Строка - Для устаревшего вызова. Надо обращаться к "НомерКонтрагента"
// * ВходящаяДата - Дата - Для устаревшего вызова. Надо обращаться к "ДатаКонтрагента"
Функция НовыйСтруктураИзСтрокиТчКорреспонденты() Экспорт
	
	СтрокаТч = Новый Структура();
	СтрокаТч.Вставить("Корреспондент", Справочники.Контрагенты.ПустаяСсылка());
	СтрокаТч.Вставить("Адресат", Справочники.КонтактныеЛица.ПустаяСсылка());
	СтрокаТч.Вставить("НомерКонтрагента", "");
	СтрокаТч.Вставить("ДатаКонтрагента", '00010101');
	СтрокаТч.Вставить("ДатаОтправки", '00010101');
	СтрокаТч.Вставить("СпособОтправки", Справочники.СпособыДоставки.ПустаяСсылка());
	СтрокаТч.Вставить("Отправлен", Ложь);
	
	// Поля для совместимости с устаревшим способом вызова:
	СтрокаТч.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	СтрокаТч.Вставить("КонтактноеЛицо", Справочники.КонтактныеЛица.ПустаяСсылка());
	СтрокаТч.Вставить("ВходящийНомер", "");
	СтрокаТч.Вставить("ВходящаяДата", '00010101');
	
	Возврат СтрокаТч;
	
КонецФункции

// Сохранить по данным документа.
// 
// Параметры:
//  ПараметрыКорреспонденции - см. НовыеПараметрыКорреспонденции
//  Отказ - Булево - Если надо пробросить Отказ в обработчик
Процедура СохранитьПоДаннымДокумента(ПараметрыКорреспонденции, Отказ) Экспорт
	
	ВидДокументаКэш = ПараметрыКорреспонденции.ВидДокументаКэш;
	Если Не ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией
		И Не ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.Документы.Корреспонденция) Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Недостаточно прав для работы с корреспонденцией'"));
		Возврат;
	КонецЕсли;
	
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Корреспонденция.Ссылка КАК Корреспонденция,
		|	Корреспонденция.ВидКорреспонденции КАК ВидКорреспонденции,
		|	Корреспонденция.ДатаКонтрагента КАК ДатаКонтрагента,
		|	Корреспонденция.НомерКонтрагента КАК НомерКонтрагента,
		|	Корреспонденция.СпособПолучения КАК СпособПолучения,
		|	Корреспонденция.Корреспонденты.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Корреспондент КАК Корреспондент,
		|		Адресат КАК Адресат,
		|		СпособОтправки КАК СпособОтправки,
		|		Отправлен КАК Отправлен,
		|		ДатаОтправки КАК ДатаОтправки,
		|		НомерКонтрагента КАК НомерКонтрагента,
		|		ДатаКонтрагента КАК ДатаКонтрагента) КАК Корреспонденты,
		|	Корреспонденция.ВопросыОбращения.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Вопрос КАК Вопрос,
		|		ДатаОтвета КАК ДатаОтвета,
		|		КодВопроса КАК КодВопроса,
		|		МнениеАвтораОМерах КАК МнениеАвтораОМерах,
		|		МнениеАвтораОРезультатах КАК МнениеАвтораОРезультатах,
		|		ОрганДляПередачи КАК ОрганДляПередачи,
		|		Раздел КАК Раздел,
		|		РезультатРассмотрения КАК РезультатРассмотрения,
		|		Тема КАК Тема,
		|		Тематика КАК Тематика) КАК ВопросыОбращения,
		|	Корреспонденция.ВидОбращения КАК ВидОбращения,
		|	Корреспонденция.ДатаСоздания,
		|	Корреспонденция.КонтактноеЛицоПереадресовавшего,
		|	Корреспонденция.Основание,
		|	Корреспонденция.ОсновноеОбращение,
		|	Корреспонденция.ПервичноеОбращение,
		|	Корреспонденция.Создал,
		|	Корреспонденция.Переадресовавший,
		|	Корреспонденция.СпособПолучения,
		|	Корреспонденция.СрокИсполненияПервоначальный,
		|	Корреспонденция.СрокОтветаПереадресовавшему,
		|	Корреспонденция.ТребуетсяОтветПереадресовавшему,
		|	Корреспонденция.ЭтоДубликатОбращения,
		|	Корреспонденция.ЭтоПовторноеОбращение,
		|	Корреспонденция.ГотовоКВыгрузкеССТУ
		|ИЗ
		|	Документ.Корреспонденция КАК Корреспонденция
		|ГДЕ
		|	Корреспонденция.Основание = &Основание");
	
	ОснованиеСсылка = ПараметрыКорреспонденции.Ссылка;	
	Запрос.Параметры.Вставить("Основание", ОснованиеСсылка);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		КорреспонденцияОбъект = СоздатьДокумент();
		КорреспонденцияОбъект.Заполнить(ОснованиеСсылка);
		НачальноеПервичноеОбращение = Неопределено;
		НачальноеОсновноеОбращение = Неопределено;
	Иначе 
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		КорреспонденцияОбъект = Выборка.Корреспонденция.ПолучитьОбъект();
		НачальноеПервичноеОбращение = КорреспонденцияОбъект.ПервичноеОбращение;
		НачальноеОсновноеОбращение = КорреспонденцияОбъект.ОсновноеОбращение;
	КонецЕсли;
	
	КорреспонденцияОбъект.Основание = ОснованиеСсылка;
	Если Не ЗначениеЗаполнено(КорреспонденцияОбъект.СрокИсполненияПервоначальный) 
		И ЗначениеЗаполнено(ПараметрыКорреспонденции.СрокИсполнения) Тогда 
		КорреспонденцияОбъект.СрокИсполненияПервоначальный = ПараметрыКорреспонденции.СрокИсполнения;
	КонецЕсли;
	
	Если ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией Тогда 
		
		ЗаполнитьЗначенияСвойств(КорреспонденцияОбъект, ПараметрыКорреспонденции,, 
			"ВопросыОбращения");
		КорреспонденцияОбъект.ВидКорреспонденции = Перечисления.ВидыКорреспонденции.Входящая;
		КорреспонденцияОбъект.НомерКонтрагента = ПараметрыКорреспонденции.ИсходящийНомер;
		КорреспонденцияОбъект.ДатаКонтрагента = ПараметрыКорреспонденции.ИсходящаяДата;
				
		КорреспонденцияОбъект.Корреспонденты.Очистить();
		НоваяСтрока = КорреспонденцияОбъект.Корреспонденты.Добавить();
		НоваяСтрока.Корреспондент = ПараметрыКорреспонденции.Контрагент;
		НоваяСтрока.Адресат = ПараметрыКорреспонденции.АдресатВходящейКорреспонденции;
		
		КорреспонденцияОбъект.ВопросыОбращения.Очистить();
		Для Каждого СтрВопрос Из ПараметрыКорреспонденции.ВопросыОбращения Цикл 
			НоваяСтрока = КорреспонденцияОбъект.ВопросыОбращения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрВопрос);
		КонецЦикла;
		
	ИначеЕсли ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией Тогда
		
		КорреспонденцияОбъект.ВидКорреспонденции = Перечисления.ВидыКорреспонденции.Исходящая;
		
		КорреспонденцияОбъект.НомерКонтрагента = ПараметрыКорреспонденции.ВходящийНомер;
		КорреспонденцияОбъект.ДатаКонтрагента = ПараметрыКорреспонденции.ВходящаяДата;
		
		КорреспонденцияОбъект.Корреспонденты.Очистить();
		
		Для Каждого СтруктураСтрокиКонтрагента Из ПараметрыКорреспонденции.Контрагенты Цикл 
			НоваяСтрока = КорреспонденцияОбъект.Корреспонденты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСтрокиКонтрагента);
			
			// Альтернативные названия полей, устарело, в будущем будет называться одинаково:
			Если Не ЗначениеЗаполнено(НоваяСтрока.Корреспондент)
				И ЗначениеЗаполнено(СтруктураСтрокиКонтрагента.Контрагент) Тогда
				НоваяСтрока.Корреспондент = СтруктураСтрокиКонтрагента.Контрагент;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(НоваяСтрока.Адресат)
				И ЗначениеЗаполнено(СтруктураСтрокиКонтрагента.КонтактноеЛицо) Тогда
				НоваяСтрока.Адресат = СтруктураСтрокиКонтрагента.КонтактноеЛицо;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(НоваяСтрока.НомерКонтрагента)
				И ЗначениеЗаполнено(СтруктураСтрокиКонтрагента.ВходящийНомер) Тогда
				НоваяСтрока.НомерКонтрагента = СтруктураСтрокиКонтрагента.ВходящийНомер;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(НоваяСтрока.ДатаКонтрагента)
				И ЗначениеЗаполнено(СтруктураСтрокиКонтрагента.ВходящаяДата) Тогда
				НоваяСтрока.ДатаКонтрагента = СтруктураСтрокиКонтрагента.ВходящаяДата;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		ВызватьИсключение
			НСтр("ru = 'Ошибка записи корреспонденции документа. Должен быть указан вид документа с признаком,
			|либо ""Является входящей корреспонденцией"" либо ""Является исходящей корреспонденцией'");
	КонецЕсли;
	
	// Записываем новые и измененные объекты
	Если Результат.Пустой() Или ДокументИзменился(КорреспонденцияОбъект, Выборка) Тогда 
		
		КорреспонденцияОбъект.ДополнительныеСвойства.Вставить("ВидДокументаКэш", ВидДокументаКэш);
		КорреспонденцияОбъект.Записать();
		
		СвязиОбъектов.УстановитьСвязь(
			ОснованиеСсылка,
			НачальноеПервичноеОбращение, 
			КорреспонденцияОбъект.ПервичноеОбращение, 
			Справочники.ТипыСвязей.ПервичноеОбращение);
		СвязиОбъектов.УстановитьСвязь(
			ОснованиеСсылка, 
			НачальноеОсновноеОбращение, 
			КорреспонденцияОбъект.ОсновноеОбращение, 
			Справочники.ТипыСвязей.ОсновноеОбращение);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДокументИзменился(КорреспонденцияОбъект, КорреспонденцияВыборка)
	
	Если КорреспонденцияОбъект.ВидКорреспонденции <> КорреспонденцияВыборка.ВидКорреспонденции
		Или КорреспонденцияОбъект.ВидОбращения <> КорреспонденцияВыборка.ВидОбращения
		Или КорреспонденцияОбъект.ДатаКонтрагента <> КорреспонденцияВыборка.ДатаКонтрагента
		Или КорреспонденцияОбъект.ДатаСоздания <> КорреспонденцияВыборка.ДатаСоздания
		Или КорреспонденцияОбъект.КонтактноеЛицоПереадресовавшего <> КорреспонденцияВыборка.КонтактноеЛицоПереадресовавшего
		Или КорреспонденцияОбъект.НомерКонтрагента <> КорреспонденцияВыборка.НомерКонтрагента
		Или КорреспонденцияОбъект.Основание <> КорреспонденцияВыборка.Основание
		Или КорреспонденцияОбъект.ОсновноеОбращение <> КорреспонденцияВыборка.ОсновноеОбращение
		Или КорреспонденцияОбъект.ПервичноеОбращение <> КорреспонденцияВыборка.ПервичноеОбращение
		Или КорреспонденцияОбъект.Переадресовавший <> КорреспонденцияВыборка.Переадресовавший
		Или КорреспонденцияОбъект.Создал <> КорреспонденцияВыборка.Создал
		Или КорреспонденцияОбъект.СпособПолучения <> КорреспонденцияВыборка.СпособПолучения
		Или КорреспонденцияОбъект.СрокИсполненияПервоначальный <> КорреспонденцияВыборка.СрокИсполненияПервоначальный
		Или КорреспонденцияОбъект.СрокОтветаПереадресовавшему <> КорреспонденцияВыборка.СрокОтветаПереадресовавшему
		Или КорреспонденцияОбъект.ТребуетсяОтветПереадресовавшему <> КорреспонденцияВыборка.ТребуетсяОтветПереадресовавшему
		Или КорреспонденцияОбъект.ЭтоДубликатОбращения <> КорреспонденцияВыборка.ЭтоДубликатОбращения
		Или КорреспонденцияОбъект.ЭтоПовторноеОбращение <> КорреспонденцияВыборка.ЭтоПовторноеОбращение
		Или КорреспонденцияОбъект.ГотовоКВыгрузкеССТУ <> КорреспонденцияВыборка.ГотовоКВыгрузкеССТУ
		
		Или ОбщегоНазначенияДокументооборотКлиентСервер.ЕстьОтличияВТаблицах(
			КорреспонденцияОбъект.ВопросыОбращения.Выгрузить(), 
			КорреспонденцияВыборка.ВопросыОбращения.Выгрузить(),
			"Вопрос, ДатаОтвета, КодВопроса, МнениеАвтораОМерах, МнениеАвтораОРезультатах, 
			|ОрганДляПередачи, Раздел, РезультатРассмотрения, Тема, Тематика") 
		Или ОбщегоНазначенияДокументооборотКлиентСервер.ЕстьОтличияВТаблицах(
			КорреспонденцияОбъект.Корреспонденты.Выгрузить(), 
			КорреспонденцияВыборка.Корреспонденты.Выгрузить(),
			"Корреспондент, Адресат, СпособОтправки, Отправлен, ДатаОтправки, 
			|НомерКонтрагента, ДатаКонтрагента")  Тогда 
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецЕсли