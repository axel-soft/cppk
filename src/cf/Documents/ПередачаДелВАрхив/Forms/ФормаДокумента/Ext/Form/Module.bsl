#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПротоколированиеРаботыСотрудников.ЗаписатьОткрытие(Объект.Ссылка);
	ИспользоватьУчетПоОрганизациям = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям");
	
	Если Объект.Ссылка.Пустая() И Объект.ДелаХраненияДокументов.Количество() = 0 Тогда 
		ЗаполнитьДелаВАрхив();
	Иначе
		ЗаполнитьРеквизитыСтрок();
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	ЗаполнитьСписокВыбораСтатусВыгрузкиВАрхив();
	УстановитьСостояниеДокумента();
	
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Оповестить("ОбновитьСписокПоследних");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(
		Объект.ДелаХраненияДокументов, "ДелоХраненияДокументов");
	
	// Проверка заполнения в режиме записи.
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись И Не ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	Для Каждого КлючИЗначение Из ПараметрыЗаписи Цикл
		ТекущийОбъект.ДополнительныеСвойства.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПротоколированиеРаботыСотрудников.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(Объект.Ссылка);
	
	ЗаполнитьРеквизитыСтрок();
	УстановитьСостояниеДокумента();
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина Тогда
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ИзмененаПередачаДелВАрхив");
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьРеквизитыСтрок();
	УстановитьСостояниеДокумента();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") И ЭтоАдресВременногоХранилища(ВыбранноеЗначение) Тогда 
		ЗагрузитьДелаИзВременногоХранилища(ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ЗаполнитьРеквизитыСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ДелоХраненияДокументовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АдресВременногоХранилища = ПоместитьДелаВоВременноеХранилище();
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", "ИзПередачиДелВАрхив");
	ПараметрыФормы.Вставить("АдресВременногоХранилища", АдресВременногоХранилища);
	ПараметрыФормы.Вставить("СостояниеНаДату", ?(Объект.Ссылка.Пустая(), КонецДня(Объект.Дата), Объект.Дата));
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	ПараметрыФормы.Вставить("ФормаДокумента", Объект.ФормаДокументов);
	ПараметрыФормы.Вставить("ГрифДоступа", Объект.ГрифДоступа);
	
	ОткрытьФорму("Справочник.ДелаХраненияДокументов.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДелоХраненияДокументовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДелаХраненияДокументов.ТекущиеДанные;
	Строка = Новый Структура("ДелоХраненияДокументов, Индекс, ДатаНачала, ДатаОкончания, СрокХранения, УжеХранится");
	ЗаполнитьЗначенияСвойств(Строка, ТекущиеДанные);
	
	ЗаполнитьРеквизитыСтроки(Строка);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Строка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДелоХраненияДокументовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораДелаХранения(Текст, Объект.Организация, 
			?(Объект.Ссылка.Пустая(), КонецДня(Объект.Дата), Объект.Дата),
			Объект.ФормаДокументов, Объект.ГрифДоступа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДелоХраненияДокументовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораДелаХранения(Текст, Объект.Организация, 
			?(Объект.Ссылка.Пустая(), КонецДня(Объект.Дата), Объект.Дата),
			Объект.ФормаДокументов, Объект.ГрифДоступа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусВыгрузкиВАрхивПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздалОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(Объект, "Создал", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(Объект, "Передал", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринялОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(Объект, "Принял", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если ИспользоватьУчетПоОрганизациям И Не ЗначениеЗаполнено(Объект.Организация) Тогда 
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			РедакцииКонфигурацииКлиентСервер.ОшибкаНеЗаполненоПолеОрганизация(),,,
			"Объект.Организация");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ФормаДокументов) Тогда 
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнена форма документов'"),,,
			"Объект.ФормаДокументов");
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПродолжение", ЭтотОбъект);
	
	МассивДел = Новый Массив;
	Для Каждого Строка Из Объект.ДелаХраненияДокументов Цикл
		Если ЗначениеЗаполнено(Строка.ДелоХраненияДокументов) Тогда 
			МассивДел.Добавить(Строка.ДелоХраненияДокументов);
		КонецЕсли;	
	КонецЦикла;
	
	Если МассивДел.Количество() > 0 Тогда 
		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,
			РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе 	
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)
	
	АдресВременногоХранилища = ПоместитьДелаВоВременноеХранилище();
	ПараметрыФормы = Новый Структура("РежимВыбора, АдресВременногоХранилища, СостояниеНаДату, Организация", "ИзПередачиДелВАрхив", 
		АдресВременногоХранилища, ?(Объект.Ссылка.Пустая(), КонецДня(Объект.Дата), Объект.Дата-1), Объект.Организация);
	ОткрытьФорму("Справочник.ДелаХраненияДокументов.Форма.ФормаПодбора", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьДляПовторнойОтправкиВ1САрхив(Команда)
	
	РедактироватьОтправленнуюОпись();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтозватьИз1САрхива(Команда)
	
	РедактироватьОтправленнуюОпись(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьОтправленнуюОпись(ОтозватьОпись = Ложь)
	
	ДанныеССервера = ДанныеДляРедактированияОтправленнойОписи(Объект.Ссылка);
	ЕстьУдаленныеДанные = ДанныеССервера.ЕстьУдаленныеДанные;
	Версия1САрхиваПоддерживаетОтзыв = ДанныеССервера.Версия1САрхиваПоддерживаетОтзыв;
	ЭтоАдминистратор = ПользователиКлиент.ЭтоПолноправныйПользователь();
	
	ДополнительныеПараметры = Новый Структура("ОтозватьОпись", ОтозватьОпись);
	ОписаниеОповещенияОПодтверждении = Новый ОписаниеОповещения(
		"ОтозватьИз1САрхиваПослеПодтверждения", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ОтозватьОпись И Не Версия1САрхиваПоддерживаетОтзыв Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Операция недоступна для версий 1С:Архива ниже 1.0.9.'"));
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "";
	Если ОтозватьОпись Тогда
		ТекстВопроса = НСтр(
			"ru = 'При отзыве описи:
			| • опись будет помечена на удаление в этой базе;
			| • в 1С:Архив будет направлено сообщение, при получении которого на удаление будут помечены:
			|    ◦ переданная опись,
			|    ◦ все ее дела,
			|    ◦ все документы в этих делах.
			|
			|Продолжить операцию?'");
		ВысотаТекста = 9;
	КонецЕсли;
	
	Если ЕстьУдаленныеДанные Тогда
		Если Не ЭтоАдминистратор Тогда
			ПоказатьПредупреждение(, НСтр(
				"ru = 'Данные переданных документов уже удалены. Выполнение операции доступно только администратору.'"));
			Возврат;
		Иначе
			Если ОтозватьОпись Тогда
				ТекстВопроса = НСтр(
					"ru = 'Внимание! Данные переданных документов уже удалены. После выполнения операции их нужно будет восстановить вручную самостоятельно.'")
					+ Символы.ПС + Символы.ПС + ТекстВопроса;
				ВысотаТекста = 13;
			Иначе
				ТекстВопроса = НСтр(
					"ru = 'Внимание! Данные переданных документов уже удалены. Для повторной отправки описи их нужно будет восстановить вручную самостоятельно.
					|
					|Продолжить операцию?'");
				ВысотаТекста = 5;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстВопроса) Тогда
		ВариантыОтвета = Новый СписокЗначений;
		ВариантыОтвета.Добавить("Да", НСтр("ru = 'Продолжить'"));
		ВариантыОтвета.Добавить("Отмена", НСтр("ru = 'Отмена'"));
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", ?(ОтозватьОпись,
			НСтр("ru = 'Отзыв описи'"), НСтр("ru = 'Редактирование описи'")));
		ПараметрыФормы.Вставить("ТекстВопроса", ТекстВопроса);
		ПараметрыФормы.Вставить("СписокДоступныхВариантов", ВариантыОтвета);
		ПараметрыФормы.Вставить("ВариантОтветаПоУмолчанию", "Отмена");
		ПараметрыФормы.Вставить("ЗадержкаВремени", Новый Структура("Да", 9));
		ПараметрыФормы.Вставить("ВысотаТекста", ВысотаТекста);
		
		ОткрытьФорму("ОбщаяФорма.РасширенныйВопрос", ПараметрыФормы,,,,,
			ОписаниеОповещенияОПодтверждении, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОПодтверждении, "Да");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОтозватьИз1САрхиваПослеПодтверждения(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> "Да" Тогда
		Возврат;
	КонецЕсли;
	
	ВключитьВозможностьРедактированияНаСервере(ДополнительныеПараметры.ОтозватьОпись);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДелаХраненияДокументов

&НаКлиенте
Процедура ДелаХраненияДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ТолькоПросмотр = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДелаХраненияДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДелоХраненияДокументов) Тогда
		ПоказатьЗначение(, ТекущиеДанные.ДелоХраненияДокументов);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция СформироватьДанныеВыбораДелаХранения(Знач Текст, Знач Организация,
			Знач ДатаСреза, Знач ФормаДокументов, Знач ГрифДоступа)
	
	ДанныеВыбора = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДелаХраненияДокументов.Ссылка,
	|	ДелаХраненияДокументов.Наименование,
	|	ДелаХраненияДокументов.НоменклатураДел,
	|	ДелаХраненияДокументов.НоменклатураДел.Индекс КАК Индекс,
	|	ДелаХраненияДокументов.ДатаОкончания
	|ИЗ
	|	Справочник.ДелаХраненияДокументов КАК ДелаХраненияДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДелХраненияДокументов.СрезПоследних(&НаДату,) КАК СостоянияДел
	|		ПО (СостоянияДел.ДелоХраненияДокументов = ДелаХраненияДокументов.Ссылка)
	|ГДЕ
	|	ЕСТЬNULL(СостоянияДел.Состояние,
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияДелХраненияДокументов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СостоянияДелХраненияДокументов.ПустаяСсылка)
	|	И (ДелаХраненияДокументов.Наименование ПОДОБНО &Текст
	|	ИЛИ ДелаХраненияДокументов.НоменклатураДел.Индекс + "" "" + ДелаХраненияДокументов.Наименование ПОДОБНО &Текст)
	|	И ДелаХраненияДокументов.ДелоЗакрыто
	|	И ДелаХраненияДокументов.ФормаДокументов = &ФормаДокументов";

	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		Запрос.Текст = Запрос.Текст +"
			|	И ДелаХраненияДокументов.Организация = &Организация";
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГрифДоступа) Тогда
		Запрос.Текст = Запрос.Текст +"
			|	И ДелаХраненияДокументов.НоменклатураДел.ГрифДоступа = &ГрифДоступа";
		Запрос.УстановитьПараметр("ГрифДоступа", ГрифДоступа);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НаДату", Новый Граница(ДатаСреза, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	Запрос.УстановитьПараметр("Дата", ДатаСреза);
	Запрос.УстановитьПараметр("ФормаДокументов", ФормаДокументов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Год(Выборка.ДатаОкончания) + 1 > Год(ДатаСреза) Тогда 
			Продолжить;
		КонецЕсли;
		ДанныеВыбора.Добавить(Выборка.Ссылка, Выборка.Индекс + " " + Выборка.Наименование);
	КонецЦикла;
		
	Возврат ДанныеВыбора;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыСтрок()
	
	Для Каждого Строка Из Объект.ДелаХраненияДокументов Цикл 
		Если Не ЗначениеЗаполнено(Строка.ДелоХраненияДокументов) Тогда 
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьРеквизитыСтроки(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыСтроки(Строка)
	
	РеквизитыДела = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.ДелоХраненияДокументов,
		"НоменклатураДел.Индекс, НоменклатураДел.СрокХранения, ДатаНачала, ДатаОкончания");
	Строка.ДатаНачала = РеквизитыДела.ДатаНачала;
	Строка.ДатаОкончания = РеквизитыДела.ДатаОкончания;
	
	СрокХранения = РеквизитыДела.НоменклатураДелСрокХранения;
	Если ТипЗнч(СрокХранения) = Тип("Число") Тогда 
		Строка.СрокХранения = Строка(СрокХранения) + " " + ДелопроизводствоКлиентСервер.ПодписьЛет(СрокХранения);
	Иначе
		Строка.СрокХранения = СрокХранения;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Строка.ДелоХраненияДокументов) 
		И (РеквизитыДела.ДатаОкончания <> Дата(1,1,1))
		И (Объект.Дата >= РеквизитыДела.ДатаОкончания) Тогда
		УжеХранится = Год(Объект.Дата) - Год(РеквизитыДела.ДатаОкончания) - 1;
		Если УжеХранится < 1 Тогда 
			Строка.УжеХранится = НСтр("ru = 'Менее года'");
		Иначе	
			Строка.УжеХранится = Строка(УжеХранится) + " " + ДелопроизводствоКлиентСервер.ПодписьЛет(УжеХранится);
		КонецЕсли;	
	Иначе
		Строка.УжеХранится = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьДелаВоВременноеХранилище()

	Возврат ПоместитьВоВременноеХранилище(Объект.ДелаХраненияДокументов.Выгрузить(,"ДелоХраненияДокументов"), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьДелаИзВременногоХранилища(АдресВременногоХранилища)

	Объект.ДелаХраненияДокументов.Загрузить(ПолучитьИзВременногоХранилища(АдресВременногоХранилища));
	ЗаполнитьРеквизитыСтрок();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДелаВАрхив()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтноситсяКНоменклатуреДел2.Ссылка КАК ПереходящееДело
		|ПОМЕСТИТЬ ПереходящиеДела
		|ИЗ
		|	Справочник.ДелаХраненияДокументов.ОтноситсяКНоменклатуреДел КАК ОтноситсяКНоменклатуреДел1
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДелаХраненияДокументов.ОтноситсяКНоменклатуреДел КАК ОтноситсяКНоменклатуреДел2
		|		ПО (ОтноситсяКНоменклатуреДел2.Ссылка = ОтноситсяКНоменклатуреДел1.Ссылка)
		|ГДЕ
		|	НЕ ОтноситсяКНоменклатуреДел1.Ссылка.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтноситсяКНоменклатуреДел2.Ссылка
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтноситсяКНоменклатуреДел2.НоменклатураДел) > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДелаХраненияДокументовОтноситсяКНоменклатуреДел.НоменклатураДел КАК НоменклатураДел
		|ПОМЕСТИТЬ ПереходящиеНоменклатуры
		|ИЗ
		|	ПереходящиеДела КАК ПереходящиеДела
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДелаХраненияДокументов.ОтноситсяКНоменклатуреДел КАК ДелаХраненияДокументовОтноситсяКНоменклатуреДел
		|		ПО ПереходящиеДела.ПереходящееДело = ДелаХраненияДокументовОтноситсяКНоменклатуреДел.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ДелаХраненияДокументов.Ссылка КАК ДелоХраненияДокументов,
		|	ДелаХраненияДокументов.ДатаОкончания КАК ДатаОкончанияДела,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПереходящиеНоменклатуры.НоменклатураДел, ЛОЖЬ) <> ЛОЖЬ
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьПереходящее,
		|	ДелаХраненияДокументов.НоменклатураДел КАК НоменклатураДел,
		|	НоменклатураДелСпр.Индекс КАК НоменклатураДелИндекс
		|ИЗ
		|	Справочник.ДелаХраненияДокументов КАК ДелаХраненияДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураДел КАК НоменклатураДелСпр
		|		ПО ДелаХраненияДокументов.НоменклатураДел = НоменклатураДелСпр.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДелХраненияДокументов.СрезПоследних(&НаДатуГраница, ) КАК СостоянияДел
		|		ПО (СостоянияДел.ДелоХраненияДокументов = ДелаХраненияДокументов.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПереходящиеНоменклатуры КАК ПереходящиеНоменклатуры
		|		ПО ДелаХраненияДокументов.НоменклатураДел = ПереходящиеНоменклатуры.НоменклатураДел
		|ГДЕ
		|	ЕСТЬNULL(СостоянияДел.Состояние, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
		|	И НоменклатураДелСпр.ФормаДокументов = &ФормаДокументов
		|	И НЕ ДелаХраненияДокументов.ПометкаУдаления
		|	И ДелаХраненияДокументов.ДелоЗакрыто
		|	И ДелаХраненияДокументов.НоменклатураДел.КатегорияДела <> ЗНАЧЕНИЕ(Перечисление.КатегорииДел.ВременноеДо10)
		|	И ГОД(&НаДату) - ГОД(ДелаХраненияДокументов.ДатаОкончания) > НоменклатураДелСпр.СрокОперативногоХранения";
		
	НаДату = Объект.Дата;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда 
		Запрос.Текст = Запрос.Текст + Символы.ПС + "И ДелаХраненияДокументов.Организация = &Организация ";
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда 
		Запрос.Текст = Запрос.Текст + Символы.ПС + " И ДелаХраненияДокументов.Подразделение = &Подразделение";
		Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ГрифДоступа) Тогда 
		Запрос.Текст = Запрос.Текст + Символы.ПС + " И НоменклатураДелСпр.ГрифДоступа = &ГрифДоступа";
		Запрос.УстановитьПараметр("ГрифДоступа", Объект.ГрифДоступа);
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	НоменклатураДелИндекс";
	
	Запрос.УстановитьПараметр("ФормаДокументов", Объект.ФормаДокументов);
	Запрос.УстановитьПараметр("НаДату", НаДату);
	Запрос.УстановитьПараметр("НаДатуГраница", Новый Граница(НаДату, ВидГраницы.Исключая));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивПоиска = Объект.ДелаХраненияДокументов.НайтиСтроки(
			Новый Структура("ДелоХраненияДокументов", Выборка.ДелоХраненияДокументов));
		Если МассивПоиска.Количество() = 0 Тогда 
			Если Выборка.ЕстьПереходящее Тогда 
				ДобавитьПереходящиеДела(Выборка.НоменклатураДел, НаДату);
				Продолжить;
			КонецЕсли;
			НоваяСтрока = Объект.ДелаХраненияДокументов.Добавить();
			НоваяСтрока.ДелоХраненияДокументов = Выборка.ДелоХраненияДокументов;
			ЗаполнитьРеквизитыСтроки(НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПереходящиеДела(НоменклатураДел, НаДату)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДелаОтносятсяКНоменклатуреДел.Ссылка КАК Дело
		|ПОМЕСТИТЬ ДелаТекущейНоменклатурыДел
		|ИЗ
		|	Справочник.ДелаХраненияДокументов.ОтноситсяКНоменклатуреДел КАК ДелаОтносятсяКНоменклатуреДел
		|ГДЕ
		|	НЕ ДелаОтносятсяКНоменклатуреДел.Ссылка.ПометкаУдаления
		|	И ДелаОтносятсяКНоменклатуреДел.НоменклатураДел = &Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДелаХраненияДокументовОтноситсяКНоменклатуреДел.НоменклатураДел
		|ПОМЕСТИТЬ ВсяНоменклатура
		|ИЗ
		|	Справочник.ДелаХраненияДокументов.ОтноситсяКНоменклатуреДел КАК ДелаХраненияДокументовОтноситсяКНоменклатуреДел
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДелаТекущейНоменклатурыДел КАК ДелаТекущейНоменклатурыДел
		|		ПО ДелаХраненияДокументовОтноситсяКНоменклатуреДел.Ссылка = ДелаТекущейНоменклатурыДел.Дело.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДелаХраненияДокументов.Ссылка КАК ДелоХраненияДокументов,
		|	ДелаХраненияДокументов.ДелоЗакрыто КАК ДелоЗакрыто,
		|	ДелаХраненияДокументов.ДатаНачала,
		|	ДелаХраненияДокументов.ДатаОкончания КАК ДатаОкончанияДела
		|ИЗ
		|	Справочник.ДелаХраненияДокументов КАК ДелаХраненияДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсяНоменклатура КАК ВсяНоменклатура
		|		ПО ДелаХраненияДокументов.НоменклатураДел = ВсяНоменклатура.НоменклатураДел
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДелоЗакрыто,
		|	ДатаОкончания";
	
	Запрос.Параметры.Вставить("Номенклатура", НоменклатураДел);
	
	МассивДел = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не Выборка.ДелоЗакрыто Тогда 
			МассивДел = Новый Массив;
			Прервать;
		КонецЕсли;
		
		МассивПоиска = Объект.ДелаХраненияДокументов.НайтиСтроки(
			Новый Структура("ДелоХраненияДокументов", Выборка.ДелоХраненияДокументов));
		Если МассивПоиска.Количество() = 0 Тогда 
			
			Если Год(Выборка.ДатаОкончанияДела) + 1 > Год(НаДату) Тогда 
				МассивДел = Новый Массив;
				Прервать;
			КонецЕсли;
			
			МассивДел.Добавить(Выборка.ДелоХраненияДокументов);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Дело Из МассивДел Цикл 
		НоваяСтрока = Объект.ДелаХраненияДокументов.Добавить();
		НоваяСтрока.ДелоХраненияДокументов = Дело;
		ЗаполнитьРеквизитыСтроки(НоваяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	Если Объект.ПометкаУдаления Тогда
		СостояниеДокумента = 3;
	ИначеЕсли Объект.Проведен Тогда
		СостояниеДокумента = 1;
	Иначе
		СостояниеДокумента = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПродолжение(Результат, Параметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Нет Тогда 
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда 
		Объект.ДелаХраненияДокументов.Очистить();
	КонецЕсли;
	
	ЗаполнитьДелаВАрхив();
	Модифицированность = Истина;
	
	Если Объект.ДелаХраненияДокументов.Количество() = 0 Тогда 
		ТекстСообщения = НСтр("ru = 'Подходящие ""Дела (тома)"" не найдены!'");
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	ТолькоПросмотр = Ложь;
	Элементы.ФормаГруппаПровести.Видимость = Истина;
	Элементы.ФормаГруппаЗаписать.Доступность = Истина;
	Элементы.ФормаЗаписатьИЗакрыть.Видимость = Истина;
	Элементы.ОтозватьИз1САрхива.Видимость = Ложь;
	Элементы.РедактироватьДляПовторнойОтправкиВ1САрхив.Видимость = Ложь;
	Элементы.ФормаПровестиИЗакрыть.КнопкаПоУмолчанию = Истина;
	
	ИнтеграцияС1САрхивомВключена = ПолучитьФункциональнуюОпцию("ИнтеграцияС1САрхивом") = Истина;
	Если Не ИнтеграцияС1САрхивомВключена Тогда
		ЕстьПравоПроведения = ПравоДоступа("Проведение", Метаданные.Документы.ПередачаДелВАрхив);
		Если ЕстьПравоПроведения Тогда
			Элементы.ФормаГруппаЗаписать.Видимость = Ложь;
		Иначе
			Элементы.ФормаГруппаПровести.Видимость = Ложь;
			Элементы.ФормаЗаписатьИЗакрыть.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
		Элементы.ФормаГруппаЗаписать.Доступность = ПравоДоступа("Изменение", Метаданные.Документы.ПередачаДелВАрхив);
		Элементы.ГруппаПередал.ТолькоПросмотр = Объект.Проведен;
		Элементы.ГруппаПринял.ТолькоПросмотр = Объект.Проведен;
		Возврат;
	КонецЕсли;
	
	// Видимость команд проведения.
	СтатусыОбмена = Перечисления.СтатусыОбменаСАрхивом;
	Элементы.ФормаГруппаПровести.Видимость = Ложь;
	Элементы.ФормаЗаписатьИЗакрыть.КнопкаПоУмолчанию = Истина;
	Если Объект.СтатусВыгрузкиВАрхив = СтатусыОбмена.ПустаяСсылка()
		Или Объект.СтатусВыгрузкиВАрхив = СтатусыОбмена.НеГотовКВыгрузке
		Или Объект.СтатусВыгрузкиВАрхив = СтатусыОбмена.ГотовКВыгрузке
		Или Объект.СтатусВыгрузкиВАрхив = СтатусыОбмена.ОбнаруженыОшибкиПриВыгрузке
		Или Объект.СтатусВыгрузкиВАрхив = СтатусыОбмена.ОбнаруженыОшибкиПриЗагрузкеВАрхив
		Или Объект.СтатусВыгрузкиВАрхив = СтатусыОбмена.ОбнаруженыОшибкиПриПроверкеВАрхиве Тогда
		Элементы.ФормаГруппаЗаписать.Доступность = Истина;
	Иначе
		Элементы.ФормаГруппаЗаписать.Доступность = Ложь;
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// Видимость реквизитов обмена с 1С:Архивом.
	Элементы.ДекорацияРезультатПроверки.Видимость = Ложь;
	Если Объект.СтатусВыгрузкиВАрхив = СтатусыОбмена.ОбнаруженыОшибкиПриЗагрузкеВАрхив
		Или Объект.СтатусВыгрузкиВАрхив = СтатусыОбмена.ОбнаруженыОшибкиПриПроверкеВАрхиве
		Или Объект.СтатусВыгрузкиВАрхив = СтатусыОбмена.ОбнаруженыОшибкиПриВыгрузке Тогда
		Элементы.ДекорацияРезультатПроверки.Видимость = Истина;
	КонецЕсли;
	Элементы.ДатаСоздания.Видимость = ЗначениеЗаполнено(Объект.Дата);
	Элементы.ДатаПередачи.Видимость = ЗначениеЗаполнено(Объект.ДатаПередачи);
	Элементы.ДатаПриемки.Видимость = ЗначениеЗаполнено(Объект.ДатаПриемки);
	Элементы.Принял.ТолькоПросмотр = Истина;
	
	// Видимость команд редактирования и отзыва после загрузки в 1С:Архив.
	ВидимостьОтзываИРедактирования = 
		ПравоДоступа("Изменение", Метаданные.Документы.ПередачаДелВАрхив)
		И (Объект.СтатусВыгрузкиВАрхив = СтатусыОбмена.ЗагрузкаВАрхивВыполнена
			Или Объект.СтатусВыгрузкиВАрхив = СтатусыОбмена.ПринятВАрхив);
	Элементы.ОтозватьИз1САрхива.Видимость = ВидимостьОтзываИРедактирования;
	Элементы.РедактироватьДляПовторнойОтправкиВ1САрхив.Видимость = ВидимостьОтзываИРедактирования;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораСтатусВыгрузкиВАрхив()
	
	СтатусыОбмена = Перечисления.СтатусыОбменаСАрхивом;
	СписокВыбораСтатусов = Элементы.СтатусВыгрузкиВАрхив.СписокВыбора;
	
	Если Объект.СтатусВыгрузкиВАрхив = СтатусыОбмена.ПустаяСсылка()
		Или Объект.СтатусВыгрузкиВАрхив = СтатусыОбмена.НеГотовКВыгрузке
		Или Объект.СтатусВыгрузкиВАрхив = СтатусыОбмена.ГотовКВыгрузке Тогда
		СписокВыбораСтатусов.Добавить(СтатусыОбмена.НеГотовКВыгрузке);
		СписокВыбораСтатусов.Добавить(СтатусыОбмена.ГотовКВыгрузке);
	ИначеЕсли Объект.СтатусВыгрузкиВАрхив = СтатусыОбмена.ОбнаруженыОшибкиПриВыгрузке Тогда
		СписокВыбораСтатусов.Добавить(СтатусыОбмена.ОбнаруженыОшибкиПриВыгрузке);
		СписокВыбораСтатусов.Добавить(СтатусыОбмена.ГотовКВыгрузке);
	ИначеЕсли Объект.СтатусВыгрузкиВАрхив = СтатусыОбмена.ОбнаруженыОшибкиПриЗагрузкеВАрхив Тогда
		СписокВыбораСтатусов.Добавить(СтатусыОбмена.ОбнаруженыОшибкиПриЗагрузкеВАрхив);
		СписокВыбораСтатусов.Добавить(СтатусыОбмена.ГотовКВыгрузке);
	ИначеЕсли Объект.СтатусВыгрузкиВАрхив = СтатусыОбмена.ОбнаруженыОшибкиПриПроверкеВАрхиве Тогда
		СписокВыбораСтатусов.Добавить(СтатусыОбмена.ОбнаруженыОшибкиПриПроверкеВАрхиве);
		СписокВыбораСтатусов.Добавить(СтатусыОбмена.ГотовКВыгрузке);
	Иначе
		СписокВыбораСтатусов.Добавить(Объект.СтатусВыгрузкиВАрхив);
	КонецЕсли;
	
	ПредыдущийСтатусОбмена = Объект.СтатусВыгрузкиВАрхив;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРезультатПроверкиНажатие(Элемент)
	
	Если ЗначениеЗаполнено(Объект.РезультатПроверки) Тогда
		ПараметрыФормы = Новый Структура("РезультатПроверки, СтатусВыгрузкиВАрхив", Объект.РезультатПроверки, Объект.СтатусВыгрузкиВАрхив);
		ОткрытьФорму("Документ.ПередачаДелВАрхив.Форма.ФормаРезультатаПроверки", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВключитьВозможностьРедактированияНаСервере(ОтозватьОпись = Ложь)
	
	НачатьТранзакцию();
	Попытка
		Объект.СтатусВыгрузкиВАрхив = Перечисления.СтатусыОбменаСАрхивом.НеГотовКВыгрузке;
		Если ОтозватьОпись Тогда
			Объект.ПометкаУдаления = Истина;
		КонецЕсли;
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("ИнтеграцияДокументаСАрхивом", Истина);
		ПараметрыЗаписи.Вставить("РежимЗаписи", ?(Объект.Проведен,
			РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись));
		Записать(ПараметрыЗаписи);
		Если ОтозватьОпись Тогда
			ОбменСАрхивомПереопределяемый.ОтправитьОтзывОписи(Объект.Ссылка);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Прочитать();
	УстановитьВидимостьДоступность();
	УстановитьСостояниеДокумента();
	ЗаполнитьСписокВыбораСтатусВыгрузкиВАрхив();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеДляРедактированияОтправленнойОписи(ПередачаДелВАрхивСсылка)
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьУдаленныеДанные", Ложь);
	Результат.Вставить("Версия1САрхиваПоддерживаетОтзыв", Ложь);
	
	ДокументПроведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПередачаДелВАрхивСсылка, "Проведен");
	Если ДокументПроведен Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА КАК ЕстьЗаписи
			|ИЗ
			|	Документ.ПередачаДелВАрхив.ДелаХраненияДокументов КАК ПередачаДелДелаХраненияДокументов
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьОперацийСДелами КАК ОчередьОперацийСДелами
			|		ПО ПередачаДелДелаХраненияДокументов.ДелоХраненияДокументов = ОчередьОперацийСДелами.Объект
			|			И (ОчередьОперацийСДелами.ДопСведения = &ИмяОперации)
			|ГДЕ
			|	ПередачаДелДелаХраненияДокументов.Ссылка = &ДокументПередача
			|	И ОчередьОперацийСДелами.Объект ЕСТЬ NULL");
		Запрос.УстановитьПараметр("ДокументПередача", ПередачаДелВАрхивСсылка);
		Запрос.УстановитьПараметр("ИмяОперации", "ОбработатьПередачуДокументовВАрхив");
		Результат.ЕстьУдаленныеДанные = Не Запрос.Выполнить().Пустой();
	КонецЕсли;
	
	ВерсияФорматаАрхива = ОбменСАрхивом.ВерсияФорматаБазыАрхива();
	Результат.Версия1САрхиваПоддерживаетОтзыв = ОбменСАрхивом.СравнитьВерсииФормата(
		ВерсияФорматаАрхива, Метаданные.ПакетыXDTO.АДХ_1_0_9.ПространствоИмен) >= 0;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
