#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область УправлениеДоступом
// УправлениеДоступом

// Возвращает строку, содержащую перечисление полей доступа через запятую
// Это перечисление используется в дальнейшем для передачи в метод
// ОбщегоНазначения.ЗначенияРеквизитовОбъекта()
// 
// Возвращаемое значение:
//  Строка -
Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат 
		"Ссылка,
		|Организация";
	
КонецФункции

// Заполняет переданный дескриптор доступа 
Процедура ЗаполнитьОсновнойДескриптор(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	ДескрипторДоступа.Организация = ОбъектДоступа.Организация;
	
КонецПроцедуры

// Возвращает признак того, что менеджер содержит метод ЗапросДляРасчетаПрав()
// 
// Возвращаемое значение:
//  Булево -
Функция ЕстьМетодЗапросДляРасчетаПрав() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает запрос для расчета прав доступа по дескрипторам объекта
// 
// Параметры:
//  
//  Дескрипторы - Массив - массив дескрипторов, чьи права нужно рассчитать
//  ИдОбъекта - Ссылка - идентификатор объекта метаданных, назначенный переданным дескрипторам
//  МенеджерОбъектаДоступа - СправочникМенеджер, ДокументМенеджер - менеджер объекта доступа
// 
// Возвращаемое значение - Запрос - запрос, который выберет права доступа для переданного массива дескрипторов
// 
Функция ЗапросДляРасчетаПрав(Дескрипторы, ИдОбъекта, МенеджерОбъектаДоступа) Экспорт
	
	Запрос = Справочники.ДескрипторыДоступаОбъектов.ЗапросДляСтандартногоРасчетаПрав(
		Дескрипторы, ИдОбъекта, МенеджерОбъектаДоступа, Ложь, Истина);
	Запрос.Текст = ДокументооборотПраваДоступаПовтИсп.ТекстЗапросаДляРасчетаПравРазрезаДоступа();
	
	// Достаточно права чтения
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"МАКСИМУМ(ВложенныйЗапрос.Изменение) КАК Изменение,", "МАКСИМУМ(ВложенныйЗапрос.Чтение) КАК Изменение,");
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"МАКСИМУМ(ВложенныйЗапрос.Добавление) КАК Добавление,", "МАКСИМУМ(ВложенныйЗапрос.Чтение) КАК Добавление,");
	
	Возврат Запрос;
	
КонецФункции

// Заполняет протокол расчета прав дескрипторов
// 
// Параметры:
//  
//  ПротоколРасчетаПрав - Массив - протокол для заполнения
//  ЗапросПоПравам - Запрос - запрос, который использовался для расчета прав дескрипторов
//  Дескрипторы - Массив - массив дескрипторов, чьи права были рассчитаны
//  
Процедура ЗаполнитьПротоколРасчетаПрав(ПротоколРасчетаПрав, ЗапросПоПравам) Экспорт
	
	Справочники.ДескрипторыДоступаОбъектов.ЗаполнитьПротоколРасчетаПравСтандартно(
		ПротоколРасчетаПрав, ЗапросПоПравам);
	
КонецПроцедуры

// Конец УправлениеДоступом
#КонецОбласти

// Корректность документа-выгрузки в целом, например без идентификатора ССТУ нельзя создать файл выгрузки.
// 
// Параметры:
//  ДокументыОбращения - Массив Из СправочникСсылка.ДокументыПредприятия -
//  Организация - СправочникСсылка.Организации -
// 
// Возвращаемое значение:
//  Булево - Истина, если есть ошибки
Функция ЕстьОшибкиВВыгрузкеВЦелом(ДокументыОбращения, Организация) Экспорт

	Сообщение = "";
	Если ДокументыОбращения.Количество() = 0 Тогда
		ДобавитьСообщениеОбОшибке(Сообщение, НСтр("ru = 'Не задано ни одного обращения для выгрузки'"));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ДобавитьСообщениеОбОшибке(Сообщение, РедакцииКонфигурацииКлиентСервер.ОшибкаНеВыбранаОрганизация());
	Иначе
		ИдентификаторССТУ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИдентификаторССТУ");
		Если Не ЗначениеЗаполнено(ИдентификаторССТУ) Тогда
			ДобавитьСообщениеОбОшибке(
				Сообщение,
				СтрШаблон(
					НСтр("ru = '""Идентификатор ССТУ"" для %1 ""%2"" не заполнен. Обратитесь к администратору'"),
					РедакцииКонфигурацииКлиентСервер.ОрганизацииРодительный(), Организация));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сообщение) Тогда
		ОбщегоНазначения.СообщитьПользователю(Сообщение);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

// Проверка ошибок в обращениях, можно по ним сделать выгрузку или нет.
// 
// Параметры:
//  ДокументыОбращения - Массив Из СправочникСсылка.ДокументыПредприятия -
// 
// Возвращаемое значение:
//  Массив Из См. НовыйПроблемныйОбъект - Заполнен, если часть документов-обращений вызывают проблемы.
Функция ОшибкиВОбращениях(ДокументыОбращения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПроблемныеОбъекты = Новый Массив();
	УчетПоОрганизациям = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям");
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.Обращение
		|
		|ПОМЕСТИТЬ ВТ_Обращения
		|ИЗ
		|	&ТаблицаОбращений КАК Т
		|;
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Обращения.Обращение КАК Обращение,
		|	Обращения.Обращение.Организация КАК Организация,
		|	ВидыДокументов.ЯвляетсяОбращениемОтГраждан,
		|	ВидыДокументов.ЯвляетсяВходящейКорреспонденцией,
		|	Обращения.Обращение.ПометкаУдаления КАК ПометкаУдаления,
		|	Обращения.Обращение.РегистрационныйНомер КАК РегистрационныйНомер
		|ИЗ
		|	ВТ_Обращения КАК Обращения
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	Справочник.ВидыДокументов КАК ВидыДокументов
		|		ПО Обращения.Обращение.ВидДокумента = ВидыДокументов.Ссылка");
	Запрос.УстановитьПараметр("ТаблицаОбращений", СделатьТаблицуОбращенийИзМассива(ДокументыОбращения));
	Выборка = Запрос.Выполнить().Выбрать();
	ЭтоПервыйДокумент = Истина;
	ПерваяОрганизация = Неопределено;
	Пока Выборка.Следующий() Цикл
		Сообщение = "";
		
		Если УчетПоОрганизациям Тогда
			Если ЭтоПервыйДокумент Тогда
				ПерваяОрганизация = Выборка.Организация;
				ЭтоПервыйДокумент = Ложь;
			Иначе
				Если Выборка.Организация <> ПерваяОрганизация Тогда
					ДобавитьСообщениеОбОшибке(
						Сообщение,
						СтрШаблон(
							НСтр("ru = 'Все документы-обращения должны быть по одной и той же %1'"),
							РедакцииКонфигурацииКлиентСервер.ОрганизацииРодительный()));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не Выборка.ЯвляетсяОбращениемОтГраждан Тогда
			ДобавитьСообщениеОбОшибке(
				Сообщение, НСтр("ru = 'Документ не является обращением граждан (см. вид документа)'"));
		КонецЕсли;
		Если Не Выборка.ЯвляетсяВходящейКорреспонденцией Тогда
			ДобавитьСообщениеОбОшибке(
				Сообщение, НСтр("ru = 'Документ не является входящей корреспонденцией (см. вид документа)'"));
		КонецЕсли;
		Если Выборка.ПометкаУдаления Тогда
			ДобавитьСообщениеОбОшибке(Сообщение, НСтр("ru = 'Обращение помечено на удаление'"));
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Выборка.РегистрационныйНомер) Тогда
			ДобавитьСообщениеОбОшибке(Сообщение, НСтр("ru = 'Обращение не зарегистрировано'"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Сообщение) Тогда
			ПроблемныйОбъект = НовыйПроблемныйОбъект(Сообщение, Выборка.Обращение);
			ПроблемныеОбъекты.Добавить(ПроблемныйОбъект);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПроблемныеОбъекты;
	
КонецФункции

// Создать файл выгрузки на сервере, кладет его во временного хранилище, чтоб с клиента его сохранить.
// 
// Параметры:
//  Обращения - Массив Из СправочникСсылка.ДокументыПредприятия - Документы-обращения
//  АдресВХранилище - Строка - Адрес во временном хранилище, туда будут в случае успеха помещены данные файла.
//  ВыгрузкаСсылка - ДокументСсылка.ВыгрузкаВССТУ - Документ, отражающий факт выгрузки в ИБ.
// 
// Возвращаемое значение:
//  Структура - Создать двоичные данные выгрузки:
//	* АдресВХранилище - Строка - В случае успеха там будут двоичные данные файла.
//	* ПроблемныеОбъекты - Массив Из См. НовыйПроблемныйОбъект - Заполнен, если часть объектов не удастся выгрузить.
Функция СформироватьДвоичныеДанныеВыгрузки(Обращения, АдресВХранилище, ВыгрузкаСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Ответ = Новый Структура();
	Ответ.Вставить("АдресВХранилище", "");
	Ответ.Вставить("ПроблемныеОбъекты", Новый Массив());
	
	ФайлыКУдалению = Новый Массив(); // все временные файлы в конце удаляются
	ИдентификаторССТУ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыгрузкаСсылка, "Организация.ИдентификаторССТУ");
	РезультатЗапроса = РезультатЗапросаДляВыгрузкиФайлов(Обращения, ИдентификаторССТУ);
	ВыборкаПоОбращениям = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Попытка
		ЗаписьZipФайла = Новый ЗаписьZipФайла();
		
		Пока ВыборкаПоОбращениям.Следующий() Цикл
		
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("json");
			ОтветЗаписи = ЗаписатьОбращениеВJson(ВыборкаПоОбращениям, ИдентификаторССТУ, ИмяВременногоФайла); //@skip-check query-in-loop
			Если ЗначениеЗаполнено(ОтветЗаписи.СообщениеОбОшибке) Тогда
				Проблема = НовыйПроблемныйОбъект(ОтветЗаписи.СообщениеОбОшибке, ОтветЗаписи.СсылкаНаОбъект);
				Ответ.ПроблемныеОбъекты.Добавить(Проблема);
			Иначе
				ЗаписьZipФайла.Добавить(ИмяВременногоФайла);
				ФайлыКУдалению.Добавить(ИмяВременногоФайла);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Ответ.ПроблемныеОбъекты.Количество() = 0 Тогда
			ДвоичныеДанныеФайла = ЗаписьZipФайла.ПолучитьДвоичныеДанные();
			ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, АдресВХранилище);
			Ответ.АдресВХранилище = АдресВХранилище;
		КонецЕсли;
	Исключение
		СообщениеОбОшибке = СтрШаблон(
			НСтр("ru = 'Ошибка при формировании файла выгрузки в ССТУ:
				|%1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			Метаданные.Документы.ВыгрузкаВССТУ.Синоним,
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.ВыгрузкаВССТУ,
			ВыгрузкаСсылка,
			СообщениеОбОшибке);
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	Попытка
		Для Каждого ИмяВременногоФайла Из ФайлыКУдалению Цикл
			УдалитьФайлы(ИмяВременногоФайла);
		КонецЦикла;
	Исключение
		ЗаписьЖурналаРегистрации(
			Метаданные.Документы.ВыгрузкаВССТУ.Синоним,
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.ВыгрузкаВССТУ,
			ВыгрузкаСсылка,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Конструктор сообщения о проблеме. В случае ошибок будет - Документ-обращение и причины проблем. Или только причины
// проблем.
// 
// Параметры:
//  СообщениеОбОшибке - Строка -
//  СсылкаНаОбъект - СправочникСсылка.ДокументыПредприятия - Документ-обращение.
//				   - Неопределено - Можно не заполнять, если общая проблема выгрузки в целом по всем объектам.
// 
// Возвращаемое значение:
//  Структура - Новый проблемный объект:
// * СсылкаНаОбъект - СправочникСсылка.ДокументыПредприятия - Документ-обращение или пустая ссылка, если общая проблема.
// * СообщениеОбОшибке - Строка - 
Функция НовыйПроблемныйОбъект(СообщениеОбОшибке = "", СсылкаНаОбъект = Неопределено) Экспорт
	
	Данные = Новый Структура();
	Данные.Вставить("СообщениеОбОшибке", СообщениеОбОшибке);
	Данные.Вставить("СсылкаНаОбъект", Справочники.ДокументыПредприятия.ПустаяСсылка());
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Данные.СсылкаНаОбъект = СсылкаНаОбъект;
	КонецЕсли;
	Возврат Данные;
	
КонецФункции

// Конструктор структуры состояния выгрузки ССТУ, нужной для показа в документе.
// 
// Возвращаемое значение:
//  Структура - Новый поля выгрузки ССТУ:
//	* ГотовоКВыгрузке - Булево -
//	* Выгружена - Булево -
//	* Состояние - Строка -
//	* Выгрузка - ДокументСсылка.ВыгрузкаВССТУ - Туда заносится актуальная (последняя) выгрузка
Функция НовыйСостояниеВыгрузкиССТУ() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ГотовоКВыгрузке", Ложь);
	Результат.Вставить("Выгружена", Ложь);
	Результат.Вставить("Состояние", Текст_НеВыгружалась());
	Результат.Вставить("Выгрузка", ПустаяСсылка());
	Возврат Результат;
	
КонецФункции

// Актуальное (последнее) состояние выгрузки ССТУ для документа-обращения.
// 
// Параметры:
//  ДокументОбращение - СправочникСсылка.ДокументыПредприятия -
// 
// Возвращаемое значение:
//  См. НовыйСостояниеВыгрузкиССТУ
Функция СостояниеВыгрузкиССТУДокумента(ДокументОбращение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Корреспонденция.ГотовоКВыгрузкеССТУ КАК ГотовоКВыгрузке,
		|	ISNULL(ВыгрузкаТЧ.Ссылка.Выгружена, ЛОЖЬ) КАК Выгружена,
		|	ВЫБОР
		|		КОГДА ВыгрузкаТЧ.Обращение IS NULL ТОГДА &НеВыгружалась
		|		КОГДА ВыгрузкаТЧ.Ссылка.Выгружена ТОГДА &Выгружена
		|		ИНАЧЕ &СозданаВыгрузка
		|	КОНЕЦ КАК Состояние,
		|	ISNULL(ВыгрузкаТЧ.Ссылка, ЗНАЧЕНИЕ(Документ.ВыгрузкаВССТУ.ПустаяСсылка)) КАК Выгрузка
		|ИЗ
		|	Документ.Корреспонденция КАК Корреспонденция
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.ВыгрузкаВССТУ.Обращения КАК ВыгрузкаТЧ
		|		ПО ВыгрузкаТЧ.Обращение = Корреспонденция.Основание
		|			И ВыгрузкаТЧ.Обращение = &Обращение
		|			И НЕ ВыгрузкаТЧ.Ссылка.ПометкаУдаления
		|ГДЕ
		|	Корреспонденция.Основание = &Обращение
		|	
		|УПОРЯДОЧИТЬ ПО
		|	ВыгрузкаТЧ.Ссылка.Дата УБЫВ");
	Запрос.УстановитьПараметр("НеВыгружалась", Текст_НеВыгружалась());
	Запрос.УстановитьПараметр("Выгружена", НСтр("ru = 'Выгружена'"));
	Запрос.УстановитьПараметр("СозданаВыгрузка", НСтр("ru = 'Создана выгрузка'"));
	
	Запрос.УстановитьПараметр("Обращение", ДокументОбращение);
	Выборка = Запрос.Выполнить().Выбрать();
	Результат = НовыйСостояниеВыгрузкиССТУ();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Установить/снять признак готовности к выгрузке в ССТУ с документов-обращений.
// 
// Параметры:
//  ДокументыОбращения - Массив из СправочникСсылка.ДокументыПредприятия - 
//  ЗначениеФлага - Булево - Значение флага "Готово к выгрузке в ССТУ"
Процедура УстановитьСнятьПризнакГотовности(ДокументыОбращения, ЗначениеФлага) Экспорт
	
	УстановитьПривилегированныйРежим(Истина); // У ответственного за ССТУ могут быть права не на все документы
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.Обращение
		|
		|ПОМЕСТИТЬ ВТ_Обращения
		|ИЗ
		|	&ТаблицаОбращений КАК Т
		|;
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Обращения.Обращение КАК Обращение,
		|	КорреспонденцияВопросыТЧ.Ссылка КАК Корреспонденция
		|ИЗ
		|	ВТ_Обращения КАК Обращения
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	Документ.Корреспонденция.ВопросыОбращения КАК КорреспонденцияВопросыТЧ
		|		ПО КорреспонденцияВопросыТЧ.Ссылка.Основание = Обращения.Обращение
		|ГДЕ
		|	КорреспонденцияВопросыТЧ.Ссылка.ГотовоКВыгрузкеССТУ = &ОбратноеЗначениеФлага");
	Запрос.УстановитьПараметр("ТаблицаОбращений", СделатьТаблицуОбращенийИзМассива(ДокументыОбращения));
	Запрос.УстановитьПараметр("ОбратноеЗначениеФлага", Не ЗначениеФлага);
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	Попытка
		ТекущееОбращение = Неопределено;
		Пока Выборка.Следующий() Цикл
			ТекущееОбращение = Выборка.Обращение;
			Блокировка = Новый БлокировкаДанных();
			ЭлементБлокировки = Блокировка.Добавить("Документ.Корреспонденция");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Корреспонденция);
			Блокировка.Заблокировать();
			
			КорреспонденцияОбъект = Выборка.Корреспонденция.ПолучитьОбъект();
			КорреспонденцияОбъект.ГотовоКВыгрузкеССТУ = ЗначениеФлага;
			КорреспонденцияОбъект.Записать();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Не удалось записать флаг ""%1"" в документ-обращение:
				|%2'"),
				Метаданные.Документы.Корреспонденция.Реквизиты.ГотовоКВыгрузкеССТУ.Синоним,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				ТекущееОбращение);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьСообщениеОбОшибке(СуществующееСообщение, ЧтоДобавить)
	
	СуществующееСообщение = ?(
		ЗначениеЗаполнено(СуществующееСообщение),
		СуществующееСообщение + Символы.ПС + ЧтоДобавить,
		ЧтоДобавить);
	
КонецПроцедуры

Функция РезультатЗапросаДляВыгрузкиФайлов(Обращения, ИдентификаторССТУ)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.Обращение
		|
		|ПОМЕСТИТЬ ВТ_Обращения
		|ИЗ
		|	&ТаблицаОбращений КАК Т
		|;
		|
		|ВЫБРАТЬ
		|	ОбращенияВопросы.Ссылка КАК КорреспонденцияСсылка,
		|	Обращения.Обращение КАК ДокументОбращение,
		|	ОбращенияВопросы.НомерСтроки КАК НомерСтроки,
		|	ОбращенияВопросы.Вопрос КАК Вопрос,
		|	ОбращенияВопросы.Вопрос.Код КАК ВопросКод,
		|	ОбращенияВопросы.ДатаОтвета КАК ДатаОтвета,
		|	ОбращенияВопросы.МнениеАвтораОМерах КАК МнениеАвтораОМерах,
		|	ОбращенияВопросы.МнениеАвтораОРезультатах КАК МнениеАвтораОРезультатах,
		|	ОбращенияВопросы.ОрганДляПередачи КАК ОрганДляПередачи,
		|	ОбращенияВопросы.ОрганДляПередачи.ИдентификаторССТУ КАК ОрганДляПередачиИдентификаторССТУ,
		|	ОбращенияВопросы.Раздел КАК Раздел,
		|	ОбращенияВопросы.Раздел.Код КАК РазделКод,
		|	ОбращенияВопросы.РезультатРассмотрения КАК РезультатРассмотрения,
		|	ОбращенияВопросы.Тема КАК Тема,
		|	ОбращенияВопросы.Тема.Код КАК ТемаКод,
		|	ОбращенияВопросы.Тематика КАК Тематика,
		|	ОбращенияВопросы.Тематика.Код КАК ТематикаКод,
		|	ОбращенияВопросы.Ссылка.СрокИсполненияПервоначальный КАК СрокИсполненияПервоначальный,
		|	ОбращенияВопросы.Ссылка.НомерКонтрагента КАК ИсходящийНомер,
		|	ISNULL(Обращения.Обращение.Организация.ИдентификаторССТУ, &ИдентификаторССТУ) КАК ОрганизацияИдентификаторССТУ,
		|	Обращения.Обращение.ДатаРегистрации КАК ДатаРегистрации,
		|	Обращения.Обращение.РегистрационныйНомер КАК РегистрационныйНомер,
		|	Обращения.Обращение.ДатаСоздания КАК ДатаСоздания,
		|	Обращения.Обращение.Контрагент КАК Контрагент,
		|	Обращения.Обращение.СрокИсполнения КАК СрокИсполнения,
		|	Обращения.Обращение.Контрагент.ЮрФизЛицо КАК КонтрагентЮрФизЛицо,
		|	Обращения.Обращение.Контрагент.ФизЛицо КАК КонтрагентФизЛицо
		|ИЗ
		|	ВТ_Обращения КАК Обращения
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	Документ.Корреспонденция.ВопросыОбращения КАК ОбращенияВопросы
		|		ПО ОбращенияВопросы.Ссылка.Основание = Обращения.Обращение
		|
		|УПОРЯДОЧИТЬ ПО
		|	Обращения.Обращение.ДатаСоздания,
		|	ОбращенияВопросы.НомерСтроки
		|
		|ИТОГИ 
		|	МАКСИМУМ(ИсходящийНомер),
		|	МАКСИМУМ(РегистрационныйНомер),
		|	МАКСИМУМ(ДатаСоздания),
		|	МАКСИМУМ(Контрагент),
		|	МАКСИМУМ(КонтрагентЮрФизЛицо),
		|	МАКСИМУМ(КонтрагентФизЛицо),
		|	МАКСИМУМ(СрокИсполнения)
		|ПО
		|	ДокументОбращение");
	Запрос.УстановитьПараметр("ТаблицаОбращений", СделатьТаблицуОбращенийИзМассива(Обращения));
	Запрос.УстановитьПараметр("ИдентификаторССТУ", ИдентификаторССТУ);
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗаписатьОбращениеВJson(ВыборкаПоОбращениям, ИдентификаторССТУ, ИмяВременногоФайла)
	
	Ответ = НовыйПроблемныйОбъект();
	Сообщение = "";
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ПараметрыJson = Новый ПараметрыЗаписиJSON( , Символы.Таб);
	ЗаписьJSON.ОткрытьФайл(ИмяВременногоФайла, , , ПараметрыJson);
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("departmentId");
	ЗаписьJSON.ЗаписатьЗначение(ИдентификаторССТУ);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("isDirect");
	// Если обращение не направлено из иного органа, то значит обращение поступило напрямую непосредственно от заявителя
	ИсходящийНомер = ВыборкаПоОбращениям.ИсходящийНомер;
	Если ЗначениеЗаполнено(ИсходящийНомер) Тогда 
		ЗаписьJSON.ЗаписатьЗначение(Ложь);
	Иначе 
		ЗаписьJSON.ЗаписатьЗначение(Истина);
	КонецЕсли;
	
	ЗаписьJSON.ЗаписатьИмяСвойства("format");
	ЗаписьJSON.ЗаписатьЗначение("Other");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("number");
	ЗаписьJSON.ЗаписатьЗначение(ВыборкаПоОбращениям.РегистрационныйНомер);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("createDate");
	ЗаписьJSON.ЗаписатьЗначение(Формат(ВыборкаПоОбращениям.ДатаСоздания, "ДФ=гггг-ММ-дд"));
	
	ЗаписьJSON.ЗаписатьИмяСвойства("name");
	ЗаписьJSON.ЗаписатьЗначение(Строка(ВыборкаПоОбращениям.Контрагент));
	
	Емайл = ""; ПочтовыйАдрес = "";
	Если ЗначениеЗаполнено(ВыборкаПоОбращениям.Контрагент) Тогда 
		Если ВыборкаПоОбращениям.КонтрагентЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда 
			Емайл = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
				ВыборкаПоОбращениям.КонтрагентФизЛицо,
				Справочники.ВидыКонтактнойИнформации.EmailФизическогоЛица,,
				ТекущаяДатаСеанса());
			ПочтовыйАдрес = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
				ВыборкаПоОбращениям.КонтрагентФизЛицо,
				Справочники.ВидыКонтактнойИнформации.ДомашнийАдресФизическогоЛица,,
				ТекущаяДатаСеанса());
		Иначе 
			Емайл = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
				ВыборкаПоОбращениям.Контрагент,
				Справочники.ВидыКонтактнойИнформации.EmailКонтрагента,,
				ТекущаяДатаСеанса());
			ПочтовыйАдрес = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
				ВыборкаПоОбращениям.Контрагент,
				Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента,,
				ТекущаяДатаСеанса());
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьJSON.ЗаписатьИмяСвойства("address");
	ЗаписьJSON.ЗаписатьЗначение(Строка(ПочтовыйАдрес));
	
	ЗаписьJSON.ЗаписатьИмяСвойства("Email");
	ЗаписьJSON.ЗаписатьЗначение(Строка(Емайл));
	
	ЗаписьJSON.ЗаписатьИмяСвойства("questions");
	ЗаписьJSON.ЗаписатьНачалоМассива();
	
	СвязанныеДокументы = РаботаСОбращениями.ЗаполнитьСвязанныеДокументы(ВыборкаПоОбращениям.ДокументОбращение);
	
	ВыборкаДетальные = ВыборкаПоОбращениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДетальные.Следующий() Цикл
		
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("code");
		КодРазделаСтрокой = ВыборкаДетальные.РазделКод;
		КодТематикиСтрокой = ВыборкаДетальные.ТематикаКод;
		КодТемыСтрокой = ВыборкаДетальные.ТемаКод;
		КодВопросаСтрокой = ВыборкаДетальные.ВопросКод;
		ПолныйКодВопроса = СтрШаблон("%1.%2.%3.%4",
			?(ЗначениеЗаполнено(КодРазделаСтрокой), КодРазделаСтрокой, "0000"),
			?(ЗначениеЗаполнено(КодТематикиСтрокой), КодТематикиСтрокой, "0000"),
			?(ЗначениеЗаполнено(КодТемыСтрокой), КодТемыСтрокой, "0000"),
			?(ЗначениеЗаполнено(КодВопросаСтрокой), КодВопросаСтрокой, "0000"));
		ЗаписьJSON.ЗаписатьЗначение(ПолныйКодВопроса);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("status");
		
		Если ВыборкаДетальные.РезультатРассмотрения = Перечисления.РезультатыРассмотренияОбращений.Поддержано Тогда
			
			ЗаписьJSON.ЗаписатьЗначение("Supported");
			
			ЗаписьJSON.ЗаписатьИмяСвойства("incomingDate");
			ЗаписьJSON.ЗаписатьЗначение(Формат(ВыборкаПоОбращениям.ДатаСоздания, "ДФ=гггг-ММ-дд"));
			ЗаписьJSON.ЗаписатьИмяСвойства("registrationDate");
			ЗаписьJSON.ЗаписатьЗначение(Формат(ВыборкаПоОбращениям.ДатаРегистрации, "ДФ=гггг-ММ-дд"));
			ЗаписьJSON.ЗаписатьИмяСвойства("actionsTaken");
			ЗаписьJSON.ЗаписатьЗначение(Ложь);
			ЗаписьJSON.ЗаписатьИмяСвойства("responseDate"); 
			ЗаписьJSON.ЗаписатьЗначение(Формат(ВыборкаДетальные.ДатаОтвета, "ДФ=гггг-ММ-дд"));
			
		ИначеЕсли ВыборкаДетальные.РезультатРассмотрения
			= Перечисления.РезультатыРассмотренияОбращений.ВТомЧислеМерыПриняты Тогда
			
			ЗаписьJSON.ЗаписатьЗначение("Supported");
			
			ЗаписьJSON.ЗаписатьИмяСвойства("incomingDate");
			ЗаписьJSON.ЗаписатьЗначение(Формат(ВыборкаПоОбращениям.ДатаСоздания, "ДФ=гггг-ММ-дд"));
			ЗаписьJSON.ЗаписатьИмяСвойства("registrationDate");
			ЗаписьJSON.ЗаписатьЗначение(Формат(ВыборкаПоОбращениям.ДатаРегистрации, "ДФ=гггг-ММ-дд"));
			ЗаписьJSON.ЗаписатьИмяСвойства("actionsTaken");
			ЗаписьJSON.ЗаписатьЗначение(Истина);
			ЗаписьJSON.ЗаписатьИмяСвойства("responseDate");
			ЗаписьJSON.ЗаписатьЗначение(Формат(ВыборкаДетальные.ДатаОтвета, "ДФ=гггг-ММ-дд"));
			
		ИначеЕсли ВыборкаДетальные.РезультатРассмотрения 
			= Перечисления.РезультатыРассмотренияОбращений.Разъяснено Тогда
			
			ЗаписьJSON.ЗаписатьЗначение("Explained");
			
			ЗаписьJSON.ЗаписатьИмяСвойства("incomingDate");
			ЗаписьJSON.ЗаписатьЗначение(Формат(ВыборкаПоОбращениям.ДатаСоздания, "ДФ=гггг-ММ-дд"));
			ЗаписьJSON.ЗаписатьИмяСвойства("registrationDate");
			ЗаписьJSON.ЗаписатьЗначение(Формат(ВыборкаПоОбращениям.ДатаРегистрации, "ДФ=гггг-ММ-дд"));
			ЗаписьJSON.ЗаписатьИмяСвойства("responseDate");
			ЗаписьJSON.ЗаписатьЗначение(Формат(ВыборкаДетальные.ДатаОтвета, "ДФ=гггг-ММ-дд"));
			
		ИначеЕсли ВыборкаДетальные.РезультатРассмотрения 
			= Перечисления.РезультатыРассмотренияОбращений.НеПоддержано Тогда
			
			ЗаписьJSON.ЗаписатьЗначение("NotSupported");
			
			ЗаписьJSON.ЗаписатьИмяСвойства("incomingDate");
			ЗаписьJSON.ЗаписатьЗначение(Формат(ВыборкаПоОбращениям.ДатаСоздания, "ДФ=гггг-ММ-дд"));
			ЗаписьJSON.ЗаписатьИмяСвойства("registrationDate");
			ЗаписьJSON.ЗаписатьЗначение(Формат(ВыборкаПоОбращениям.ДатаРегистрации, "ДФ=гггг-ММ-дд"));
			ЗаписьJSON.ЗаписатьИмяСвойства("responseDate");
			ЗаписьJSON.ЗаписатьЗначение(Формат(ВыборкаДетальные.ДатаОтвета, "ДФ=гггг-ММ-дд"));
			
		ИначеЕсли ВыборкаДетальные.РезультатРассмотрения
			= Перечисления.РезультатыРассмотренияОбращений.ОставленоБезОтвета Тогда
			
			ЗаписьJSON.ЗаписатьЗначение("LeftWithoutAnswer");
			ЗаписьJSON.ЗаписатьИмяСвойства("incomingDate");
			ЗаписьJSON.ЗаписатьЗначение(Формат(ВыборкаПоОбращениям.ДатаСоздания, "ДФ=гггг-ММ-дд"));
			ЗаписьJSON.ЗаписатьИмяСвойства("registrationDate");
			ЗаписьJSON.ЗаписатьЗначение(Формат(ВыборкаПоОбращениям.ДатаРегистрации, "ДФ=гггг-ММ-дд"));
			ЗаписьJSON.ЗаписатьИмяСвойства("responseDate");
			ЗаписьJSON.ЗаписатьЗначение(Формат(ВыборкаДетальные.ДатаОтвета, "ДФ=гггг-ММ-дд"));
			
		ИначеЕсли Не ЗначениеЗаполнено(ВыборкаДетальные.РезультатРассмотрения) Тогда
			
			Если ЗначениеЗаполнено(ВыборкаДетальные.СрокИсполненияПервоначальный) 
				И ЗначениеЗаполнено(ВыборкаПоОбращениям.СрокИсполнения) 
				И ВыборкаПоОбращениям.СрокИсполнения > ВыборкаДетальные.СрокИсполненияПервоначальный Тогда 
				ЗаписьJSON.ЗаписатьЗначение("InWorkExtended");
				
				ЗаписьJSON.ЗаписатьИмяСвойства("isExtend");
				ЗаписьJSON.ЗаписатьЗначение(Истина);
			Иначе 
				ЗаписьJSON.ЗаписатьЗначение("InWork");
				
				ЗаписьJSON.ЗаписатьИмяСвойства("isExtend");
				ЗаписьJSON.ЗаписатьЗначение(Ложь);
			КонецЕсли;
			
			ЗаписьJSON.ЗаписатьИмяСвойства("incomingDate");
			ЗаписьJSON.ЗаписатьЗначение(Формат(ВыборкаПоОбращениям.ДатаСоздания, "ДФ=гггг-ММ-дд"));
			ЗаписьJSON.ЗаписатьИмяСвойства("registrationDate");
			ЗаписьJSON.ЗаписатьЗначение(Формат(ВыборкаПоОбращениям.ДатаРегистрации, "ДФ=гггг-ММ-дд"));
			
		ИначеЕсли ВыборкаДетальные.РезультатРассмотрения
			= Перечисления.РезультатыРассмотренияОбращений.НаправленоВИнойОрган Тогда
			
			ЗаписьJSON.ЗаписатьЗначение("Transferred");
			ЗаписьJSON.ЗаписатьИмяСвойства("incomingDate");
			ЗаписьJSON.ЗаписатьЗначение(Формат(ВыборкаПоОбращениям.ДатаСоздания, "ДФ=гггг-ММ-дд"));
			ЗаписьJSON.ЗаписатьИмяСвойства("registrationDate");
			ЗаписьJSON.ЗаписатьЗначение(Формат(ВыборкаПоОбращениям.ДатаРегистрации, "ДФ=гггг-ММ-дд"));
			
			ЗаписьJSON.ЗаписатьИмяСвойства("transfer");
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			
			ЗаписьJSON.ЗаписатьИмяСвойства("departmentId");
			
			Если Не ЗначениеЗаполнено(ВыборкаДетальные.ОрганДляПередачи) Тогда 
				ДобавитьСообщениеОбОшибке(
					Сообщение,
					НСтр("ru = 'Не указан орган (учреждение), в который перенаправлено обращение.'"));
			Иначе
				ИдентификаторОргана = ВыборкаДетальные.ОрганДляПередачиИдентификаторССТУ;
				Если Не ЗначениеЗаполнено(ИдентификаторОргана) Тогда 
					ДобавитьСообщениеОбОшибке(
						Сообщение,
						НСтр("ru = 'Не заполнен идентификатор органа (учреждения), в который перенаправлено обращение.'"));
				КонецЕсли;
			КонецЕсли;
			
			ИсходящаяДатаДокумента = Дата(1, 1, 1); ИсходящийНомерДокумента = "";
			СтрокиСопроводительные = СвязанныеДокументы.НайтиСтроки(Новый Структура("Вопрос", ВыборкаДетальные.Вопрос));
			Если СтрокиСопроводительные.Количество() > 0 Тогда 
				ИсходящаяДатаДокумента = СтрокиСопроводительные[0].ДатаРегистрации;
				ИсходящийНомерДокумента = СтрокиСопроводительные[0].РегистрационныйНомер;
			Иначе 
				ДобавитьСообщениеОбОшибке(Сообщение, НСтр("ru = 'Не найден сопроводительный документ.'"));
			КонецЕсли;
			
			ЗаписьJSON.ЗаписатьЗначение(ИдентификаторОргана);
			ЗаписьJSON.ЗаписатьИмяСвойства("transferDate");
			ЗаписьJSON.ЗаписатьЗначение(Формат(ИсходящаяДатаДокумента, "ДФ=гггг-ММ-дд"));
			ЗаписьJSON.ЗаписатьИмяСвойства("transferNumber");
			ЗаписьJSON.ЗаписатьЗначение(ИсходящийНомерДокумента);
			
			ЗаписьJSON.ЗаписатьКонецОбъекта();
			
		Иначе
			ЗаписьJSON.ЗаписатьЗначение("NotReceived");
		КонецЕсли;
		
		Если РаботаСОбращениямиКлиентСервер.РезультатРассмотренияТребуетОтвета(
			ВыборкаДетальные.РезультатРассмотрения) Тогда
			ОтветныйДокумент = Неопределено;
			СтрокиОтветные = СвязанныеДокументы.НайтиСтроки(
				Новый Структура("Вопрос", ВыборкаДетальные.Вопрос));
			Если СтрокиОтветные.Количество() > 0 Тогда 
				ОтветныйДокумент = СтрокиОтветные[0].ОтветныйДокумент;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОтветныйДокумент) Тогда 
				ОтветЗаписиФайла = ЗаписатьФайлВJson(ЗаписьJSON, ОтветныйДокумент); //@skip-check query-in-loop
				Если ЗначениеЗаполнено(ОтветЗаписиФайла.СообщениеОбОшибке) Тогда
					ДобавитьСообщениеОбОшибке(Сообщение, ОтветЗаписиФайла.СообщениеОбОшибке);
					Ответ.СсылкаНаОбъект = ОтветныйДокумент;
				КонецЕсли;
			Иначе
				ДобавитьСообщениеОбОшибке(
					Сообщение,
					СтрШаблон(НСтр("ru = 'Нет ответного документа по вопросу ""%1""'"), ВыборкаДетальные.Вопрос));
			КонецЕсли;
		КонецЕсли;
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Сообщение) Тогда
		Ответ.СсылкаНаОбъект = ВыборкаПоОбращениям.ДокументОбращение;
		Ответ.СообщениеОбОшибке = Сообщение;
	КонецЕсли;
	
	ЗаписьJSON.ЗаписатьКонецМассива();
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.Закрыть();
	
	Возврат Ответ;
	
КонецФункции

Функция ЗаписатьФайлВJson(ЗаписьJSON, ОтветныйДокумент)
	
	Ответ = НовыйПроблемныйОбъект();
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Файлы.Ссылка КАК ФайлСсылка,
		|	Файлы.ПолноеНаименование КАК ПолноеНаименование,
		|	Файлы.ТекущаяВерсияРасширение КАК ТекущаяВерсияРасширение
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.СлужебныеФайлыДокументов КАК Служебные
		|		ПО
		|			Служебные.Файл = Файлы.Ссылка
		|ГДЕ
		|	Файлы.ВладелецФайла = &ОтветныйДокумент
		|	И НЕ Файлы.ПометкаУдаления
		|	И Служебные.Файл ЕСТЬ NULL
		|	И &ДопустимыеРасширения ПОДОБНО ""%"" + Файлы.ТекущаяВерсияРасширение + ""%"" ");
	Запрос.УстановитьПараметр("ДопустимыеРасширения", Текст_ДопустимыеРасширенияФайла());
	Запрос.УстановитьПараметр("ОтветныйДокумент", ОтветныйДокумент);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		Ответ.СсылкаНаОбъект = ОтветныйДокумент;
		Ответ.СообщениеОбОшибке = СтрШаблон(
			НСтр("ru = 'В ответном документе нет файлов нужного формата. Допустимые для выгрузки: %1'"),
			Текст_ДопустимыеРасширенияФайла());
		Возврат Ответ;
	КонецЕсли;
	Если Выборка.Следующий() Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("attachment");
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("name");
		ЗаписьJSON.ЗаписатьЗначение(СтрШаблон("%1.%2", Выборка.ПолноеНаименование, Выборка.ТекущаяВерсияРасширение));
		
		ЗаписьJSON.ЗаписатьИмяСвойства("content");
		ДвоичныеДанные = РаботаСФайламиВызовСервера.ПолучитьДвоичныеДанныеФайла(Выборка.ФайлСсылка);
		ЗаписьJSON.ЗаписатьЗначение(Base64Строка(ДвоичныеДанные));
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		Возврат Ответ;
	КонецЕсли;
	
КонецФункции

Функция СделатьТаблицуОбращенийИзМассива(ДокументыОбращения)
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Обращение", Новый ОписаниеТипов("СправочникСсылка.ДокументыПредприятия"));
	Для Каждого Обращение Из ДокументыОбращения Цикл
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Обращение = Обращение;
	КонецЦикла;
	Возврат Таблица;
	
КонецФункции

Функция Текст_НеВыгружалась()
	
	Возврат НСтр("ru = 'Не выгружалась'");
	
КонецФункции

Функция Текст_ДопустимыеРасширенияФайла()

	Возврат "doc, docx, zip, rar, pdf, jpg, jpeg, tif, tiff, bmp, png, gif";

КонецФункции

#КонецОбласти

#КонецЕсли
