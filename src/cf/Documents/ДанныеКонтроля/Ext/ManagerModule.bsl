#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Отражает контроль в виджетах.
// 
// Параметры:
//  Основание - СправочникСсылка.Контроль
// 
Процедура ОтразитьКонтроль(Основание) Экспорт
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Основание) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		ДанныеКонтроляСсылка = СсылкаПоОснованию(Основание);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.ДанныеКонтроля");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ДанныеКонтроляСсылка);
		Блокировка.Заблокировать();
		
		ДанныеКонтроля = ДанныеКонтроля(Основание);
		
		ДанныеКонтроляОбъект = ДанныеКонтроляСсылка.ПолучитьОбъект();
		Если ДанныеКонтроляОбъект = Неопределено И ДанныеКонтроля.ПометкаУдаления Тогда
			
			// Данные не нужны, в базе их нет, ничего делать не нужно.
			
		Иначе
			
			Если ДанныеКонтроляОбъект = Неопределено Тогда
				ДанныеКонтроляОбъект = СоздатьДокумент();
				ДанныеКонтроляОбъект.УстановитьСсылкуНового(ДанныеКонтроляСсылка);
			КонецЕсли;
			
			СтарыеДанные = ОбщегоНазначенияДокументооборот.ДанныеОбъекта(ДанныеКонтроляОбъект);
			ЗаполнитьДанныеПоказателейВиджетов(ДанныеКонтроляОбъект, ДанныеКонтроля);
			НовыеДанные = ОбщегоНазначенияДокументооборот.ДанныеОбъекта(ДанныеКонтроляОбъект);
			ИзмененыДанные =  Не ОбщегоНазначенияДокументооборот.ДанныеСовпадают(СтарыеДанные, НовыеДанные);
			
			Если ИзмененыДанные Тогда
				ДанныеКонтроляОбъект.Дата = ТекущаяДатаСеанса();
				Если Не ДанныеКонтроляОбъект.ПометкаУдаления Тогда
					ДанныеКонтроляОбъект.Записать(РежимЗаписиДокумента.Проведение);
				ИначеЕсли ДанныеКонтроляОбъект.ПометкаУдаления И ДанныеКонтроляОбъект.Проведен Тогда
					ДанныеКонтроляОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				ИначеЕсли ДанныеКонтроляОбъект.ПометкаУдаления И Не ДанныеКонтроляОбъект.Проведен Тогда
					ДанныеКонтроляОбъект.Записать(РежимЗаписиДокумента.Запись);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обновляет данные по сроку обновления.
// 
Процедура ОбновитьПоСроку() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДанныеКонтроля.Основание КАК Основание
		|ИЗ
		|	Документ.ДанныеКонтроля КАК ДанныеКонтроля
		|ГДЕ
		|	ДанныеКонтроля.СрокОбновления < &СрокОбновления");
	Запрос.УстановитьПараметр("СрокОбновления", ТекущаяДатаСеанса());
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
			ОтразитьКонтроль(ВыборкаДетальныеЗаписи.Основание);
		Исключение
			ЗаписьЖурналаРегистрации(
				РаботаСВиджетами.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Если ТранзакцияАктивна() Тогда
				ВызватьИсключение;
			КонецЕсли;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Формирует контролю ссылку на данные контроля.
// 
// Параметры:
//  Основание - СправочникСсылка.Контроль
// 
// Возвращаемое значение:
//  ДокументСсылка.ДанныеКонтроля
// 
Функция СсылкаПоОснованию(Основание) Экспорт
	
	УникальныйИдентификаторОснования = Основание.УникальныйИдентификатор();
	СсылкаПоОснованию = ПолучитьСсылку(УникальныйИдентификаторОснования);
	
	Возврат СсылкаПоОснованию;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеКэширующихДанных

// Обрабатывает обновление кэширующих данных.
// 
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса:
//   * ОтметкаВремени - ОпределяемыйТип.ОтметкаВремени
//   * ЗависимыйОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//   * ВлияющийОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//   * КлючВлияющихДанных - ЛюбаяСсылка
//   * Автор - СправочникСсылка.Пользователи
//   * ЗагрузкаОбработанныхДанныхИзДругойСистемы - Булево
//   * ИзмененияВлияющихДанных - ХранилищеЗначения
//   * Попыток - Число
//   * ДатаКОбработке - Дата
// 
Процедура ОбновитьКэширующиеДанные(Выборка) Экспорт
	
	Если ТипЗнч(Выборка.КлючВлияющихДанных) <> Тип("СправочникСсылка.ПолныеРоли")
		И ТипЗнч(Выборка.КлючВлияющихДанных) <> Тип("СправочникСсылка.Сотрудники") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Выборка.Долгое Тогда
		ИзмененияВлияющихДанных = Выборка.ИзмененияВлияющихДанных.Получить();
		РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
			Выборка.ЗависимыйОбъектМетаданных,
			Выборка.ВлияющийОбъектМетаданных,
			Выборка.КлючВлияющихДанных,
			ИзмененияВлияющихДанных,
			Истина);
		Возврат;
	КонецЕсли;
	
	Контролер = Выборка.КлючВлияющихДанных; // СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли
	
	ДатаКОбработке = Выборка.ДатаКОбработке;
	Если Не ЗначениеЗаполнено(ДатаКОбработке) Тогда
		ДатаКОбработке = ТекущаяДатаСеанса();
	КонецЕсли;
	
	НомерЦикла = 0;
	ДатаЦикла = ДатаКОбработке;
	РазмерПорции = 1000;
	ОграничениеЦиклов = 10000;
	
	ЕстьДанныеКОбработке = Истина;
	Пока ЕстьДанныеКОбработке Цикл
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1000
			|	ДанныеКонтроля.Основание КАК Основание,
			|	ДанныеКонтроля.Дата КАК Дата
			|ИЗ
			|	Документ.ДанныеКонтроля КАК ДанныеКонтроля
			|ГДЕ
			|	ДанныеКонтроля.Контролер = &Контролер
			|	И ДанныеКонтроля.Дата <= &ДатаКОбработке
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДанныеКонтроля.Дата УБЫВ");
		
		Запрос.УстановитьПараметр("Контролер", Контролер);
		Запрос.УстановитьПараметр("ДатаКОбработке", ДатаКОбработке);
		
		//@skip-check query-in-loop
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ЕстьДанныеКОбработке = Истина;
			
			НачатьТранзакцию();
			Попытка
				
				ОтразитьКонтроль(ВыборкаДетальныеЗаписи.Основание);
				
				Если ВыборкаДетальныеЗаписи.Дата <> ДатаКОбработке Тогда
					ДатаКОбработке = ВыборкаДетальныеЗаписи.Дата;
					РегистрыСведений.ОчередьОбновленияКэширующихДанных.ОбновитьДатуКОбработке(
						Выборка.ОтметкаВремени,
						Выборка.ЗависимыйОбъектМетаданных,
						Выборка.ВлияющийОбъектМетаданных,
						Выборка.КлючВлияющихДанных,
						ДатаКОбработке);
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЦикла;
		
		ЕстьДанныеКОбработке = ВыборкаДетальныеЗаписи.Количество() = РазмерПорции;
		Если ЕстьДанныеКОбработке И ДатаЦикла = ДатаКОбработке Тогда
			ВызватьИсключение НСтр("ru = 'Обнаружено зацикливание.'");
		КонецЕсли;
		
		ДатаЦикла = ДатаКОбработке;
		НомерЦикла = НомерЦикла + 1;
		Если НомерЦикла > ОграничениеЦиклов Тогда
			ВызватьИсключение НСтр("ru = 'Обнаружено зацикливание.'");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Новые данные контроля.
// 
// Возвращаемое значение:
//  Структура:
//   * Основание - СправочникСсылка.Контроль
//   * ПометкаУдаления - Булево
//   * ДатаСортировки - Дата
//   * Контролер - см. Справочник.Контроль.Контролер
//   * КонтрольПросрочен - Булево
//   * СрокОбновления - Дата
//   * Получатели - Массив из СправочникСсылка.Пользователи
// 
Функция НовыеДанныеКонтроля()
	
	ДанныеКонтроля = Новый Структура;
	ДанныеКонтроля.Вставить("Основание", Справочники.Контроль.ПустаяСсылка());
	ДанныеКонтроля.Вставить("ПометкаУдаления", Ложь);
	ДанныеКонтроля.Вставить("ДатаСортировки", ОбщегоНазначенияДокументооборотКлиентСервер.МаксимальнаяДата());
	ДанныеКонтроля.Вставить("Контролер", Справочники.Сотрудники.ПустаяСсылка());
	ДанныеКонтроля.Вставить("КонтрольПросрочен", Ложь);
	ДанныеКонтроля.Вставить("СрокОбновления", ОбщегоНазначенияДокументооборотКлиентСервер.МаксимальнаяДата());
	ДанныеКонтроля.Вставить("Получатели", Новый Массив);
	
	Возврат ДанныеКонтроля;
	
КонецФункции

// Формирует актуальные данные контроля.
// 
// Параметры:
//  Основание - СправочникСсылка.Контроль
// 
// Возвращаемое значение:
//  См. НовыеДанныеКонтроля
// 
Функция ДанныеКонтроля(Основание)
	
	ДанныеКонтроля = НовыеДанныеКонтроля();
	ДанныеКонтроля.Основание = Основание;
	
	РеквизитыКонтроля = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Основание,
		"ПометкаУдаления, ПоставленНаКонтроль, СнятСКонтроля, СрокИсполнения, Контролер");
	
	// Для помеченных на удаление очищаем все остальные поля, кроме пометки удаления и основания.
	ДанныеКонтроля.ПометкаУдаления =
		Не РеквизитыКонтроля.ПоставленНаКонтроль
		Или РеквизитыКонтроля.СнятСКонтроля
		Или РеквизитыКонтроля.ПометкаУдаления;
	Если ДанныеКонтроля.ПометкаУдаления Тогда
		Возврат ДанныеКонтроля;
	КонецЕсли;
	
	// Сначала показываем те контроли, у которых установлен срок.
	// Контроли без срока показываем в конце.
	Если ЗначениеЗаполнено(РеквизитыКонтроля.СрокИсполнения) Тогда
		ДанныеКонтроля.ДатаСортировки = РеквизитыКонтроля.СрокИсполнения;
	КонецЕсли;
	
	ДанныеКонтроля.Контролер = РеквизитыКонтроля.Контролер;
	
	СотрудникиКонтролера = Контроль.СотрудникиКонтролера(РеквизитыКонтроля.Контролер);
	ПользователиКонтролера = Сотрудники.ПользователиСотрудников(СотрудникиКонтролера);
	Для Каждого ПользовательКонтролера Из ПользователиКонтролера Цикл
		ДанныеКонтроля.Получатели.Добавить(ПользовательКонтролера);
	КонецЦикла;
	ДанныеКонтроля.Получатели = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДанныеКонтроля.Получатели);
	
	// Нужно обновить данные контроля, по истечении срока контроля, если контроль ещё не просрочен.
	КонтрольМожетБытьПросрочен = ЗначениеЗаполнено(РеквизитыКонтроля.СрокИсполнения);
	ДанныеКонтроля.КонтрольПросрочен = КонтрольМожетБытьПросрочен
		И РеквизитыКонтроля.СрокИсполнения < ТекущаяДатаСеанса();
	Если КонтрольМожетБытьПросрочен И Не ДанныеКонтроля.КонтрольПросрочен Тогда
		ДанныеКонтроля.СрокОбновления = РеквизитыКонтроля.СрокИсполнения;
	КонецЕсли;
	
	Возврат ДанныеКонтроля;
	
КонецФункции

// Заполняет объект данными.
// 
// Параметры:
//  ДанныеКонтроляОбъект - ДокументОбъект.ДанныеКонтроля
//  ДанныеКонтроля - см. НовыеДанныеКонтроля
// 
Процедура ЗаполнитьДанныеПоказателейВиджетов(ДанныеКонтроляОбъект, ДанныеКонтроля)
	
	ДанныеКонтроляОбъект.Основание = ДанныеКонтроля.Основание;
	ДанныеКонтроляОбъект.ПометкаУдаления = ДанныеКонтроля.ПометкаУдаления;
	
	ДанныеКонтроляОбъект.ДатаСортировки = ДанныеКонтроля.ДатаСортировки;
	ДанныеКонтроляОбъект.Контролер = ДанныеКонтроля.Контролер;
	ДанныеКонтроляОбъект.КонтрольПросрочен = ДанныеКонтроля.КонтрольПросрочен;
	ДанныеКонтроляОбъект.СрокОбновления = ДанныеКонтроля.СрокОбновления;
	
	ДанныеКонтроляОбъект.Получатели.Очистить();
	Для Каждого Пользователь Из ДанныеКонтроля.Получатели Цикл
		СтрокаПолучателя = ДанныеКонтроляОбъект.Получатели.Добавить();
		СтрокаПолучателя.Пользователь = Пользователь;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли