#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// УправлениеДоступом

// Возвращает строку, содержащую перечисление полей доступа через запятую
// Это перечисление используется в дальнейшем для передачи в метод 
// ОбщегоНазначения.ЗначенияРеквизитовОбъекта()
Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат "Ссылка, Папка";
	
КонецФункции

// Заполняет переданный дескриптор доступа
//
Процедура ЗаполнитьОсновнойДескриптор(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	// Папка
	ДокументооборотПраваДоступа.ЗаполнитьПапкуДескриптораОбъекта(ОбъектДоступа, ДескрипторДоступа);
	
КонецПроцедуры

Функция ЕстьМетодПолучитьПравилаОбработкиНастроекПравПапки() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает таблицу значений с правилами обработки настроек прав папки,
// которые следует применять для расчета прав объекта
// 
Функция ПолучитьПравилаОбработкиНастроекПравПапки() Экспорт
	
	ТаблицаПравил = ДокументооборотПраваДоступа.ТаблицаПравилОбработкиНастроекПапки();
	
	Стр = ТаблицаПравил.Добавить();
	Стр.Настройка = "ЧтениеПапокИПисем";
	Стр.Чтение = Истина;
	
	Стр = ТаблицаПравил.Добавить();
	Стр.Настройка = "ДобавлениеПапокИПисем";
	Стр.Добавление = Истина;
	
	Стр = ТаблицаПравил.Добавить();
	Стр.Настройка = "ИзменениеПапокИПисем";
	Стр.Изменение = Истина;
	
	Стр = ТаблицаПравил.Добавить();
	Стр.Настройка = "ПометкаУдаленияПапокИПисем";
	Стр.Удаление = Истина;
	
	Возврат ТаблицаПравил;
	
КонецФункции

// Конец УправлениеДоступом

// Возвращает текст письма в виде HTML.
Функция ПолучитьHTMLПредставлениеСодержанияПисьма(РеквизитыПисьма, 
	ДляКарточкиВходящегоПисьма = Ложь,
	ДляСохраненияПисьма = Ложь) Экспорт
	
	ТекстHTML = "";

	ЭтоCalendar = Ложь;
	Если Найти(НРег(РеквизитыПисьма.ВнутреннийЗаголовок), "text/calendar") > 0 Тогда
		ЭтоCalendar = Истина;
	КонецЕсли;	
	
	Если РеквизитыПисьма.ТипТекста = Перечисления.ТипыТекстовПочтовыхСообщений.HTML Тогда
		
		ТекстHTML = Неопределено;
		Если ДляСохраненияПисьма = Ложь Тогда
			ТекстHTML = РегистрыСведений.HTMLПредставленияСодержанияПисем.Прочитать(РеквизитыПисьма.Ссылка);
		КонецЕсли;
		
		Если ТекстHTML = Неопределено Тогда
			
			ТекстHTML = РеквизитыПисьма.ТекстПисьмаHTMLХранилище.Получить();
			
			Если ТекстHTML = Неопределено Тогда
				ТекстHTML = "";
			Иначе
				
				Если ДляСохраненияПисьма = Ложь Тогда
					ОбрезатьСлишкомДлинныйТекст(ТекстHTML);
				КонецЕсли;
				
				Если Не ЭтоCalendar Тогда
					РаботаС_HTML.ДобавитьТегиКСсылкам(ТекстHTML);
				КонецЕсли;
				
				РегистрыСведений.HTMLПредставленияСодержанияПисем.Записать(РеквизитыПисьма.Ссылка, ТекстHTML);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе // простой текст
		
		ТекстHTML = Неопределено; 
		Если ДляСохраненияПисьма = Ложь Тогда
			ТекстHTML = РегистрыСведений.HTMLПредставленияСодержанияПисем.Прочитать(РеквизитыПисьма.Ссылка);
		КонецЕсли;	
		
		Если ТекстHTML = Неопределено Тогда
			
			ПростойТекст = РеквизитыПисьма.ТекстПисьмаПростойТекстХранилище.Получить();
			
			Если ПростойТекст = Неопределено Тогда
				
				ТекстHTML = "";
				
			Иначе
				
				Если ЭтоCalendar Тогда        
					
					ИдентификаторПриглашения = Неопределено;     
					РеквизитыПриглашения = Новый Структура;
					
					ВозвращаемыеРеквизиты = НовыйВозвращаемыеРеквизиты();
					
					ТекстСообщения = Документы.ВходящееПисьмо.СформироватьТекстПриглашения(
						ПростойТекст, РеквизитыПисьма.Тема,
						РеквизитыПриглашения,,ВозвращаемыеРеквизиты);
						
					ИдентификаторПриглашения = ВозвращаемыеРеквизиты.ИдентификаторПриглашения;	
						
				Иначе		
				
					ТекстHTML = РаботаС_HTML.ПолучитьHTMLИзТекста(ПростойТекст, РеквизитыПисьма.Кодировка);

				КонецЕсли;
				
					
				Если ДляСохраненияПисьма = Ложь Тогда
					ОбрезатьСлишкомДлинныйТекст(ТекстHTML);
				КонецЕсли;
				
				Если Не ЭтоCalendar Тогда
					РаботаС_HTML.ДобавитьТегиКСсылкам(ТекстHTML);
				КонецЕсли;
				
				РегистрыСведений.HTMLПредставленияСодержанияПисем.Записать(РеквизитыПисьма.Ссылка, ТекстHTML);
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Найти(НРег(РеквизитыПисьма.ВнутреннийЗаголовок), "text/calendar") > 0
		ИЛИ Найти(НРег(РеквизитыПисьма.ВнутреннийЗаголовок), "multipart/mixed") > 0 Тогда 
		
		ContentType = ВстроеннаяПочтаСервер.ПрочитатьРеквизитПисьма(РеквизитыПисьма.Ссылка, "Content-Type", РеквизитыПисьма.ВнутреннийЗаголовок);
		
		Если (Найти(НРег(ContentType), "text/calendar") > 0 ИЛИ Найти(НРег(ContentType), "multipart/mixed") > 0)
			И Найти(ТекстHTML, "BEGIN:VCALENDAR") <> 0 Тогда 
			// формат iCalendar
			
			БлокНач = Найти(ТекстHTML, "BEGIN:VCALENDAR");
			Пока БлокНач > 0 Цикл
				БлокКон = СтрНайти(ТекстHTML, "END:VCALENDAR",, БлокНач); 
				
				ВозвращаемыеРеквизиты = НовыйВозвращаемыеРеквизиты();   
				ВозвращаемыеРеквизиты.КонвертироватьHTMLВТекст = Истина;
				
				БлокТекст = СформироватьТекстПриглашения(
					"<html><body>"
					+ Сред(ТекстHTML, БлокНач, БлокКон - БлокНач + 13)
					+ "</body></html>", РеквизитыПисьма.Тема, Истина,,ВозвращаемыеРеквизиты);
				
				Если БлокТекст <> "" Тогда
					ТекстHTML = Лев(ТекстHTML, БлокНач - 1)
						+ "<div>" + БлокТекст + "</div>"
						+ Сред(ТекстHTML, БлокКон + 13);	
				КонецЕсли;
				
				БлокНач = Найти(ТекстHTML, "BEGIN:VCALENDAR");
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;
	
	РаботаС_HTML.ПрименитьНастройкиОтображениеПисьма(ТекстHTML,,,,ДляКарточкиВходящегоПисьма);
	
	Возврат ТекстHTML;
	
КонецФункции

// Возвращает имя предмета процесса по умолчанию
//
Функция ПолучитьИмяПредметаПоУмолчанию(Ссылка) Экспорт
	
	Возврат НСтр("ru='Входящее письмо'");
	
КонецФункции

Процедура ОбрезатьСлишкомДлинныйТекст(ТекстHTML)
	
	МаксимальнаяДлина = 1500000; // 1.5 Мб
	ДлинаТекста = СтрДлина(ТекстHTML);
	Если ДлинаТекста > МаксимальнаяДлина Тогда
		
		РазмерВМб = ДлинаТекста/(1024*1024);
		
		ТекстHTML = Лев(ТекстHTML, МаксимальнаяДлина);
		ТекстHTML = ТекстHTML  
			+ Символы.ПС + "<hr>" + "<p>" + "<font color=""red"">"
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Т.к. содержание письма очень большое (%1 Мб), показана только часть письма. 
			|Для просмотра всего содержания письма используйте команду <b>""Сохранить письмо"" (Alt-S)</b> 
			|для сохранения и последующего просмотра содержания письма.'"),
			ФайловыеФункцииКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб))
			+ "</font>" + "</p>" + "</body>" + "</html>";
			
	КонецЕсли;	
	
КонецПроцедуры	

// Вернет структуру с нужными полями          
// Возвращаемое значение:
//  Структура
Функция НовыйВозвращаемыеРеквизиты() Экспорт   
	
	ВозвращаемыеРеквизиты = Новый Структура;
	
	ВозвращаемыеРеквизиты.Вставить("ДатаНачала");
	ВозвращаемыеРеквизиты.Вставить("ДатаКонца");
	ВозвращаемыеРеквизиты.Вставить("ДобавлятьЗаголовок", Истина);
	ВозвращаемыеРеквизиты.Вставить("ДобавлятьТему", Истина);
	ВозвращаемыеРеквизиты.Вставить("ИдентификаторПриглашения", "");
	ВозвращаемыеРеквизиты.Вставить("КонвертироватьHTMLВТекст", Ложь);
	ВозвращаемыеРеквизиты.Вставить("ИдПоследовательности", 0);
	ВозвращаемыеРеквизиты.Вставить("ЭтоОтменаПриглашения", Ложь);
	
	Возврат ВозвращаемыеРеквизиты;
	
КонецФункции	
	
// Возвращает текст приглашения в формате html по тексту ics файла.
//
//Параметры:    
//	ТекстHTML - Строка
//	Тема - Строка  - возвращаемое значение
//	РеквизитыПриглашения  - Структура - возвращаемое значение
//	БезКаркаса - Булево
//	ВозвращаемыеРеквизиты  -Структура
//		*ДатаНачала -  Дата - возвращаемое значение
//		*ДатаКонца -  Дата - возвращаемое значение
//		*ДобавлятьЗаголовок - Булево
//		*ДобавлятьТему - Булево
//		*ИдентификаторПриглашения -Строка - возвращаемое значение
//		*КонвертироватьHTMLВТекст  - Булево - Истина, если на входе html (текст ics файла.)
//		*ИдПоследовательности -Строка - возвращаемое значение
//		*ЭтоОтменаПриглашения - Булево
//
// Возвращаемое значение:
//  Строка - html
Функция СформироватьТекстПриглашения(
	ТекстHTML, 
	Тема, 
	РеквизитыПриглашения,
	БезКаркаса = Ложь,    
	ВозвращаемыеРеквизиты) Экспорт
	
	ДатаНачала = ВозвращаемыеРеквизиты.ДатаНачала;
	ДатаКонца = ВозвращаемыеРеквизиты.ДатаКонца;
	ДобавлятьЗаголовок = ВозвращаемыеРеквизиты.ДобавлятьЗаголовок;
	ДобавлятьТему = ВозвращаемыеРеквизиты.ДобавлятьТему;
	ИдентификаторПриглашения = ВозвращаемыеРеквизиты.ИдентификаторПриглашения;
	КонвертироватьHTMLВТекст = ВозвращаемыеРеквизиты.КонвертироватьHTMLВТекст;
	ИдПоследовательности = ВозвращаемыеРеквизиты.ИдПоследовательности;
	ЭтоОтменаПриглашения = ВозвращаемыеРеквизиты.ЭтоОтменаПриглашения;
	
	РеквизитыПриглашения = Новый Структура;
	
	ТолькоТекст = "";
	Если КонвертироватьHTMLВТекст Тогда
		ТолькоТекст = РаботаС_HTML.ПолучитьТекстИзHTML(ТекстHTML);
	Иначе
		ТолькоТекст = ТекстHTML;
	КонецЕсли;

	ТолькоТекст = СтрЗаменить(ТолькоТекст, "\,", ",");
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТолькоТекст, Символы.ПС);
	ПараметрыКалендаря = Новый Соответствие;
	
	УчастникиСтрокой = "";
	ИдПоследовательности = 0;
	
	ОписаниеУжеБыло = Ложь;
	ТекстОписания = "";
	НачалосьОписание = Ложь;
	
	ИдентификаторУжеБыло = Ложь;
	ТекстИдентификатора = "";
	НачалсяИдентификатор = Ложь;
	
	ДельтаВремениТекущая = СмещениеСтандартногоВремени(ЧасовойПояс());
	ДельтаВремениВПриглашении = ДельтаВремениТекущая;
	
	Организатор = "";
	ОрганизаторСтрока = "";
	НачалосьОрганизатор = Ложь;
	
	АдресОрганизатора = "";
	ПредставлениеОрганизатора = "";
	
	ТекстATTENDEE = "";
	НачалосьATTENDEE = Ложь;
	
	ТекстDTSTART = "";
	НачалосьDTSTART = Ложь;
	
	ТекстDTEND = "";
	НачалосьDTEND = Ложь;    

	ТекстCREATED = "";
	НачалосьCREATED = Ложь;

	ТекстLASTMODIFIED = "";
	НачалосьLASTMODIFIED = Ложь;
	
	ЭтоОтменаПриглашения = Ложь;
	
	НачатоBEGINSTANDARD = Ложь;   
	НачатоBEGINDAYLIGHT = Ложь; // BEGIN:DAYLIGHT
	
	Для Каждого Строка Из МассивСтрок Цикл
		
		СтрокаКалендаря = Строка;
		
		Если Найти(ВРег(СтрокаКалендаря), ВРег("BEGIN:STANDARD")) = 1 Тогда // 
			Если НачатоBEGINSTANDARD = Ложь Тогда                              
				НачатоBEGINSTANDARD = Истина;
			КонецЕсли;		
		КонецЕсли;			

		Если Найти(ВРег(СтрокаКалендаря), ВРег("END:STANDARD")) = 1 Тогда // 
			Если НачатоBEGINSTANDARD = Истина Тогда                              
				НачатоBEGINSTANDARD = Ложь;
			КонецЕсли;		
		КонецЕсли;			

		Если Найти(ВРег(СтрокаКалендаря), ВРег("BEGIN:DAYLIGHT")) = 1 Тогда // 
			Если НачатоBEGINDAYLIGHT = Ложь Тогда                              
				НачатоBEGINDAYLIGHT = Истина;
			КонецЕсли;		
		КонецЕсли;			

		Если Найти(ВРег(СтрокаКалендаря), ВРег("END:DAYLIGHT")) = 1 Тогда // 
			Если НачатоBEGINDAYLIGHT = Истина Тогда                              
				НачатоBEGINDAYLIGHT = Ложь;
			КонецЕсли;		
		КонецЕсли;			
		
		Если НачалосьОписание Тогда
			
			ЭтоНачалоПоля = ЭтоНачалоПоляКалендаря(СтрокаКалендаря);
			
			Если ЭтоНачалоПоля Тогда
				НачалосьОписание = Ложь;
			Иначе
				ТекстОписания = ТекстОписания + СокрЛП(СтрокаКалендаря);
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если НачалосьОрганизатор Тогда
			
			ЭтоНачалоПоля = ЭтоНачалоПоляКалендаря(СтрокаКалендаря);
			
			Если ЭтоНачалоПоля Тогда
				НачалосьОрганизатор = Ложь;
				// добавим ATTENDEE
				ДобавитьATTENDEE(ОрганизаторСтрока, Организатор, АдресОрганизатора, ПредставлениеОрганизатора);
				ОрганизаторСтрока = "";
			Иначе
				ОрганизаторСтрока = ОрганизаторСтрока + СокрЛП(СтрокаКалендаря);
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если Найти(ВРег(СтрокаКалендаря), ВРег("ORGANIZER")) = 1 Тогда // ORGANIZER в начале
			Если НачалосьОрганизатор = Ложь Тогда
				ОрганизаторСтрока = СтрокаКалендаря;
				НачалосьОрганизатор = Истина;
			Иначе
				// тут добавим предыдущего ATTENDEE и заново начнем наполнять ТекстATTENDEE
				ДобавитьATTENDEE(ОрганизаторСтрока, Организатор, АдресОрганизатора, ПредставлениеОрганизатора);
				ОрганизаторСтрока = СтрокаКалендаря;
			КонецЕсли;	
		КонецЕсли;	 
		
		Если Найти(ВРег(СтрокаКалендаря), ВРег("METHOD:CANCEL")) = 1 Тогда // METHOD:CANCEL в начале
			ЭтоОтменаПриглашения = Истина;
		КонецЕсли;	 	
		
		
		Если НачалосьATTENDEE Тогда
			
			ЭтоНачалоПоля = ЭтоНачалоПоляКалендаря(СтрокаКалендаря);
			
			Если ЭтоНачалоПоля Тогда
				НачалосьATTENDEE = Ложь;
				// добавим ATTENDEE
				ДобавитьATTENDEE(ТекстATTENDEE, УчастникиСтрокой);
				ТекстATTENDEE = "";
			Иначе
				ТекстATTENDEE = ТекстATTENDEE + СокрЛП(СтрокаКалендаря);
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если Найти(ВРег(СтрокаКалендаря), ВРег("ATTENDEE")) = 1 Тогда // ATTENDEE в начале
			Если НачалосьATTENDEE = Ложь Тогда
				ТекстATTENDEE = СтрокаКалендаря;
				НачалосьATTENDEE = Истина;
			Иначе
				// тут добавим предыдущего ATTENDEE и заново начнем наполнять ТекстATTENDEE
				ДобавитьATTENDEE(ТекстATTENDEE, УчастникиСтрокой);
				ТекстATTENDEE = СтрокаКалендаря;
			КонецЕсли;	
		КонецЕсли;	
		
		
		Если НачалосьDTSTART Тогда
			
			ЭтоНачалоПоля = ЭтоНачалоПоляКалендаря(СтрокаКалендаря);
			
			Если ЭтоНачалоПоля Тогда
				НачалосьDTSTART = Ложь;
				// добавим DTSTART
				ДатаВозврат = ПолучитьДату(ТекстDTSTART, "DTSTART", ДельтаВремениВПриглашении, ДельтаВремениТекущая);
				Если ЗначениеЗаполнено(ДатаВозврат) Тогда
					
					ИспользуемДату = Истина;

					Если ДатаВозврат < Дата(2000, 1, 1) Тогда
						ИспользуемДату = Ложь;
					КонецЕсли;	            
					
					Если ЗначениеЗаполнено(ДатаНачала) И ДатаВозврат < ТекущаяДата() Тогда
						ИспользуемДату = Ложь;
					КонецЕсли;	            
					
					Если ИспользуемДату Тогда
						ДатаНачала = ДатаВозврат;
					КонецЕсли;

					ПараметрыКалендаря["DTSTART"] = ДатаНачала;
					
				КонецЕсли;	
				ТекстDTSTART = "";
			Иначе
				ТекстDTSTART = ТекстDTSTART + СокрЛП(СтрокаКалендаря);
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если Найти(ВРег(СтрокаКалендаря), ВРег("DTSTART")) = 1 
			И Не НачатоBEGINSTANDARD И Не НачатоBEGINDAYLIGHT Тогда // DTSTART в начале
			
			Если НачалосьDTSTART = Ложь Тогда
				ТекстDTSTART = СтрокаКалендаря;
				НачалосьDTSTART = Истина;
			Иначе
				// тут добавим предыдущего DTSTART и заново начнем наполнять ТекстDTSTART
				ДатаВозврат = ПолучитьДату(ТекстDTSTART, "DTSTART", ДельтаВремениВПриглашении, ДельтаВремениТекущая);
				Если ЗначениеЗаполнено(ДатаВозврат) Тогда
					ДатаНачала = ДатаВозврат;
					ПараметрыКалендаря["DTSTART"] = ДатаНачала;
				КонецЕсли;	
				ТекстDTSTART = СтрокаКалендаря;
			КонецЕсли;	
		КонецЕсли;	
		
		Если НачалосьDTEND Тогда
			
			ЭтоНачалоПоля = ЭтоНачалоПоляКалендаря(СтрокаКалендаря);
			
			Если ЭтоНачалоПоля Тогда
				НачалосьDTEND = Ложь;
				// добавим DTEND
				ДатаВозврат = ПолучитьДату(ТекстDTEND, "DTEND", ДельтаВремениВПриглашении, ДельтаВремениТекущая);
				Если ЗначениеЗаполнено(ДатаВозврат) Тогда
					ДатаКонца = ДатаВозврат;
					ПараметрыКалендаря["DTEND"] = ДатаКонца;
				КонецЕсли;
				ТекстDTEND = "";
			Иначе
				ТекстDTEND = ТекстDTEND + СокрЛП(СтрокаКалендаря);
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если Найти(ВРег(СтрокаКалендаря), ВРег("DTEND")) = 1 Тогда // DTEND в начале
			Если НачалосьDTEND = Ложь Тогда
				ТекстDTEND = СтрокаКалендаря;
				НачалосьDTEND = Истина;
			Иначе
				// тут добавим предыдущего DTEND и заново начнем наполнять ТекстDTEND
				ДатаВозврат = ПолучитьДату(ТекстDTEND, "DTEND", ДельтаВремениВПриглашении, ДельтаВремениТекущая);
				Если ЗначениеЗаполнено(ДатаВозврат) Тогда
					ДатаКонца = ДатаВозврат;
					ПараметрыКалендаря["DTEND"] = ДатаКонца;
				КонецЕсли;
				ТекстDTEND = СтрокаКалендаря;
			КонецЕсли;	
		КонецЕсли;	
		
		Если НачалосьCREATED Тогда
			
			ЭтоНачалоПоля = ЭтоНачалоПоляКалендаря(СтрокаКалендаря);
			
			Если ЭтоНачалоПоля Тогда
				НачалосьCREATED = Ложь;
				// добавим DTEND
				ДатаВозврат = ПолучитьДату(ТекстCREATED, "CREATED", ДельтаВремениВПриглашении, ДельтаВремениТекущая);
				Если ЗначениеЗаполнено(ДатаВозврат) Тогда
					ПараметрыКалендаря["CREATED"] = ДатаВозврат;
				КонецЕсли;
				ТекстCREATED = "";
			Иначе
				ТекстCREATED = ТекстCREATED + СокрЛП(СтрокаКалендаря);
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если Найти(ВРег(СтрокаКалендаря), ВРег("CREATED")) = 1 Тогда // CREATED в начале
			Если НачалосьCREATED = Ложь Тогда
				ТекстCREATED = СтрокаКалендаря;
				НачалосьCREATED = Истина;
			Иначе
				// тут добавим предыдущего DTEND и заново начнем наполнять ТекстDTEND
				ДатаВозврат = ПолучитьДату(ТекстCREATED, "CREATED", ДельтаВремениВПриглашении, ДельтаВремениТекущая);
				Если ЗначениеЗаполнено(ДатаВозврат) Тогда
					ПараметрыКалендаря["CREATED"] = ДатаВозврат;
				КонецЕсли;
				ТекстCREATED = СтрокаКалендаря;
			КонецЕсли;	
		КонецЕсли;	
		
		Если НачалосьLASTMODIFIED Тогда
			
			ЭтоНачалоПоля = ЭтоНачалоПоляКалендаря(СтрокаКалендаря);
			
			Если ЭтоНачалоПоля Тогда
				НачалосьLASTMODIFIED = Ложь;
				// добавим DTEND
				ДатаВозврат = ПолучитьДату(ТекстLASTMODIFIED, "LAST-MODIFIED", ДельтаВремениВПриглашении, ДельтаВремениТекущая);
				Если ЗначениеЗаполнено(ДатаВозврат) Тогда
					ПараметрыКалендаря["LAST-MODIFIED"] = ДатаВозврат;
				КонецЕсли;
				ТекстLASTMODIFIED = "";
			Иначе
				ТекстLASTMODIFIED = ТекстLASTMODIFIED + СокрЛП(СтрокаКалендаря);
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если Найти(ВРег(СтрокаКалендаря), ВРег("LAST-MODIFIED")) = 1 Тогда // CREATED в начале
			Если НачалосьLASTMODIFIED = Ложь Тогда
				ТекстLASTMODIFIED = СтрокаКалендаря;
				НачалосьLASTMODIFIED = Истина;
			Иначе
				// тут добавим предыдущего DTEND и заново начнем наполнять ТекстDTEND
				ДатаВозврат = ПолучитьДату(ТекстLASTMODIFIED, "LAST-MODIFIED", ДельтаВремениВПриглашении, ДельтаВремениТекущая);
				Если ЗначениеЗаполнено(ДатаВозврат) Тогда
					ПараметрыКалендаря["LAST-MODIFIED"] = ДатаВозврат;
				КонецЕсли;
				ТекстLASTMODIFIED = СтрокаКалендаря;
			КонецЕсли;	
		КонецЕсли;	
		
		Если НачалсяИдентификатор Тогда
			
			ЭтоНачалоПоля = ЭтоНачалоПоляКалендаря(СтрокаКалендаря);
			
			Если ЭтоНачалоПоля Тогда
				НачалсяИдентификатор = Ложь;
			Иначе
				ТекстИдентификатора = ТекстИдентификатора + СокрЛП(СтрокаКалендаря);
			КонецЕсли;	
			
		КонецЕсли;	
		
		ПозицияДвоеточия = Найти(СтрокаКалендаря, ":");
		Если ПозицияДвоеточия <> 0 И Не НачалосьОписание И Не НачалсяИдентификатор Тогда
			
			ИмяПоля = Лев(СтрокаКалендаря, ПозицияДвоеточия - 1);
			ЗначениеПоля = Сред(СтрокаКалендаря, ПозицияДвоеточия + 1);
			
			Если Не ПустаяСтрока(ИмяПоля) Тогда
				
				Если ВРег(ИмяПоля) = ВРег("SEQUENCE") Тогда
					Попытка
						ИдПоследовательности = Число(ЗначениеПоля);
					Исключение
						ИдПоследовательности = 0;
					КонецПопытки;	
				КонецЕсли;	
				
				// т.е. не равно, а начинается с DESCRIPTION
				Если СтрНайти(ИмяПоля,  ВРег("DESCRIPTION")) = 1 Тогда
					Если ОписаниеУжеБыло Тогда
						Продолжить;
					Иначе
						ОписаниеУжеБыло = Истина;
						ТекстОписания = ЗначениеПоля;
						НачалосьОписание = Истина;
					КонецЕсли;	
				КонецЕсли;	
				
				Если ВРег(ИмяПоля) = ВРег("UID") Тогда
					Если ИдентификаторУжеБыло Тогда
						Продолжить;
					Иначе
						ИдентификаторУжеБыло = Истина;
						ТекстИдентификатора = ЗначениеПоля;
						НачалсяИдентификатор = Истина;
					КонецЕсли;	
				КонецЕсли;	
				
				Если ВРег(ИмяПоля) = ВРег("TZOFFSETTO") И НачатоBEGINSTANDARD Тогда
					СтрокаДаты = ЗначениеПоля;
					Если СтрДлина(СтрокаДаты) >= 4 Тогда
						
						// 00 с конца откусим
						Если Прав(СтрокаДаты, 1) = "0" Тогда
							СтрокаДаты = Лев(СтрокаДаты, СтрДлина(СтрокаДаты) - 1);
						КонецЕсли;			
						Если Прав(СтрокаДаты, 1) = "0" Тогда
							СтрокаДаты = Лев(СтрокаДаты, СтрДлина(СтрокаДаты) - 1);
						КонецЕсли;	
						
						// бывает много нулей, надо убрать еще 2   TZOFFSETTO:+030000  
						// или  TZOFFSETTO:+0500
						Если СтрДлина(СтрокаДаты) >= 3 Тогда
							// 00 с конца откусим
							Если Прав(СтрокаДаты, 1) = "0" Тогда
								СтрокаДаты = Лев(СтрокаДаты, СтрДлина(СтрокаДаты) - 1);
							КонецЕсли;			
							Если Прав(СтрокаДаты, 1) = "0" Тогда
								СтрокаДаты = Лев(СтрокаДаты, СтрДлина(СтрокаДаты) - 1);
							КонецЕсли;	                    
						КонецЕсли;	
						
						Попытка
							ДельтаВремениВПриглашении = Число(СтрокаДаты) * 3600;
						Исключение
							ДельтаВремениВПриглашении = 0;
						КонецПопытки;
						
					КонецЕсли;		
				КонецЕсли;	
				
				Если ТипЗнч(ЗначениеПоля) = Тип("Строка") Тогда
					ЗначениеПоля = СтрЗаменить(ЗначениеПоля, "\n", "<br>");
				КонецЕсли;	
				
				Если СтрНачинаетсяС(ИмяПоля, "LOCATION") Тогда
					ИмяПоля = "LOCATION";
				КонецЕсли;

				Если СтрНачинаетсяС(ИмяПоля, "SUMMARY") Тогда
					ИмяПоля = "SUMMARY";
				КонецЕсли;
				
				Если ТипЗнч(ЗначениеПоля) = Тип("Строка") И СтрЗаканчиваетсяНа(ЗначениеПоля, "<br>") Тогда
					ЗначениеПоля = Лев(ЗначениеПоля, СтрДлина(ЗначениеПоля) - СтрДлина("<br>"));
				КонецЕсли;	
				Если ТипЗнч(ЗначениеПоля) = Тип("Строка") И СтрЗаканчиваетсяНа(ЗначениеПоля, "<BR>") Тогда
					ЗначениеПоля = Лев(ЗначениеПоля, СтрДлина(ЗначениеПоля) - СтрДлина("<BR>"));
				КонецЕсли;	
				
				ПараметрыКалендаря[ИмяПоля] = ЗначениеПоля;
				
			КонецЕсли;	
			
		КонецЕсли;			
		
	КонецЦикла;				
	
	ПозКавычек = СтрНайти(ТекстОписания, """");
	ТекстРаскод = "";
	Если ПозКавычек <> 0 Тогда
		ТекстДоКавычки = Лев(ТекстОписания, ПозКавычек);
		Если СтрНайти(ТекстДоКавычки, "text/html") = 1 Тогда
			ТекстДоКавычки = Сред(ТекстДоКавычки, СтрДлина("text/html") + 1);
			ТекстРаскод = РаскодироватьСтроку(ТекстДоКавычки, СпособКодированияСтроки.КодировкаURL);
			
			ТекстОписания = ТекстРаскод + Сред(ТекстОписания, ПозКавычек + 1);
			
		КонецЕсли;	
	КонецЕсли;	
	
	ТекстОписания = СтрЗаменить(ТекстОписания, "\n", "<br>");
	ТекстОписания = СтрЗаменить(ТекстОписания, "\,", ",");
	ТекстОписания = СтрЗаменить(ТекстОписания, "\;", ";");
	
	ТекстИдентификатора = СтрЗаменить(ТекстИдентификатора, "\n", "<br>");
	ТекстИдентификатора = СтрЗаменить(ТекстИдентификатора, "\,", ",");
	ТекстИдентификатора = СтрЗаменить(ТекстИдентификатора, "\;", ";");
	ИдентификаторПриглашения = ТекстИдентификатора;
	
	Название = Тема; 
	Место = ПараметрыКалендаря["LOCATION"];
	КогдаНачало = ПараметрыКалендаря["DTSTART"];
	КогдаКонец = ПараметрыКалендаря["DTEND"];
	Описание = ТекстОписания;
	Участники = УчастникиСтрокой;  
	
	РеквизитыПриглашения.Вставить("Наименование", ПараметрыКалендаря["SUMMARY"]);
	РеквизитыПриглашения.Вставить("МестоПроведения", ПараметрыКалендаря["LOCATION"]);
	РеквизитыПриглашения.Вставить("Серия", ПараметрыКалендаря["SEQUENCE"]);
	РеквизитыПриглашения.Вставить("Описание", ПараметрыКалендаря["DESCRIPTION"]);
	
	РеквизитыПриглашения.Вставить("ДатаНачала", ПараметрыКалендаря["DTSTART"]);
	РеквизитыПриглашения.Вставить("ДатаОкончания", ПараметрыКалендаря["DTEND"]);
	РеквизитыПриглашения.Вставить("ДатаСоздания", ПараметрыКалендаря["CREATED"]);
	РеквизитыПриглашения.Вставить("ДатаИзменения", ПараметрыКалендаря["LAST-MODIFIED"]);
	
	РеквизитыПриглашения.Вставить("АдресОрганизатора", АдресОрганизатора); 
	РеквизитыПриглашения.Вставить("ПредставлениеОрганизатора", ПредставлениеОрганизатора); 
	
	Если РеквизитыПриглашения.ДатаСоздания = Неопределено Тогда
		РеквизитыПриглашения.ДатаСоздания = РеквизитыПриглашения.ДатаНачала;
	КонецЕсли;	
	Если РеквизитыПриглашения.ДатаИзменения = Неопределено Тогда
		РеквизитыПриглашения.ДатаИзменения = РеквизитыПриглашения.ДатаНачала;
	КонецЕсли;	
	Если РеквизитыПриглашения.Описание = Неопределено Тогда
		РеквизитыПриглашения.Описание = "";
	КонецЕсли;	
	Если РеквизитыПриглашения.МестоПроведения = Неопределено Тогда
		РеквизитыПриглашения.МестоПроведения = "";
	КонецЕсли;	
	
	Попытка
		РеквизитыПриглашения.Серия = Число(РеквизитыПриглашения.Серия);
	Исключение
		РеквизитыПриглашения.Серия = 0;
	КонецПопытки;	
	
	МассивПолей = Новый Массив;
	
	МассивПолей.Добавить(Новый Структура("Имя,Значение", НСтр("ru='Название'"), Название));
	
	Если Место <> Неопределено Тогда
		МассивПолей.Добавить(Новый Структура("Имя,Значение", НСтр("ru='Место'"), Место));
	КонецЕсли;	
	Если Организатор <> Неопределено Тогда
		МассивПолей.Добавить(Новый Структура("Имя,Значение", НСтр("ru='Организатор'"), Организатор));
	КонецЕсли;	
	
	Если КогдаКонец = Неопределено Тогда
		
		МассивПолей.Добавить(Новый Структура("Имя,Значение", НСтр("ru='Когда'"), 
			Формат(КогдаНачало, "ДФ='dd.MM.yyyy HH:mm'")));
		
	ИначеЕсли КогдаНачало <> Неопределено И КогдаКонец <> Неопределено Тогда
		
		СтрокаДаты = "";
		
		Если НачалоДня(КогдаНачало) = НачалоДня(КогдаКонец) Тогда
			СтрокаДаты = СтрШаблон(
				"%1 - %2",
				Формат(КогдаНачало, "ДФ='dd.MM.yyyy HH:mm'"), 
				Формат(КогдаКонец, "ДФ='HH:mm'"));
		Иначе	
			СтрокаДаты = СтрШаблон(
				"%1 - %2",
				Формат(КогдаНачало, "ДФ='dd.MM.yyyy HH:mm'"), 
				Формат(КогдаКонец, "ДФ='dd.MM.yyyy HH:mm'"));
		КонецЕсли;	
		
		МассивПолей.Добавить(Новый Структура("Имя,Значение", НСтр("ru='Когда'"), СтрокаДаты));
			
	КонецЕсли;	
	
	МассивПолей.Добавить(Новый Структура("Имя,Значение", НСтр("ru='Участники'"), Участники));
	Если Описание <> Неопределено Тогда
		МассивПолей.Добавить(Новый Структура("Имя,Значение", НСтр("ru='Описание'"), Описание));
	КонецЕсли;	
	
	ТекстHTML = "";
	Если ДобавлятьЗаголовок Тогда
		ТекстHTML = ТекстHTML + НСтр("ru='<h3>Приглашение</h3> <br>'");
	КонецЕсли;	
	
	Для Каждого Поле Из МассивПолей Цикл
		СтрокаHTML = "<b>" + Поле.Имя + "</b>:&nbsp;" + Поле.Значение + "<br>";
		ТекстHTML = ТекстHTML + СтрокаHTML + Символы.ВК;
	КонецЦикла;
	
	ВстроеннаяПочтаСервер.ДобавитьНеобходимыеТэгиHTML(ТекстHTML);
	
	ВозвращаемыеРеквизиты.ДатаНачала = ДатаНачала;
	ВозвращаемыеРеквизиты.ДатаКонца = ДатаКонца;
	ВозвращаемыеРеквизиты.ДобавлятьЗаголовок = ДобавлятьЗаголовок;
	ВозвращаемыеРеквизиты.ДобавлятьТему = ДобавлятьТему;
	ВозвращаемыеРеквизиты.ИдентификаторПриглашения = ИдентификаторПриглашения;
	ВозвращаемыеРеквизиты.КонвертироватьHTMLВТекст = КонвертироватьHTMLВТекст;
	ВозвращаемыеРеквизиты.ИдПоследовательности = ИдПоследовательности;
	ВозвращаемыеРеквизиты.ЭтоОтменаПриглашения = ЭтоОтменаПриглашения;
	
	Если БезКаркаса Тогда
		Возврат ТекстHTML;
	КонецЕсли;
	
	Возврат ТекстHTML;
	
КонецФункции	

//   примеры
// DTSTART;TZID="(UTC + 03:00) Москва, Санкт-Петербург":20200423T153000
// DTSTART:16010101T000000
// DTSTART;TZID=Ekaterinburg Standard Time:20200226T140000
Функция ПолучитьДату(ТекстDTSTART, Префикс, ДельтаВремениВПриглашении, ДельтаВремениТекущая)

	ТекстDTSTARTВРег = ВРег(ТекстDTSTART);
	
	Если СтрЗаканчиваетсяНа(ТекстDTSTARTВРег, "<BR>") Тогда
		ТекстDTSTART = Лев(ТекстDTSTARTВРег, СтрДлина(ТекстDTSTARTВРег) - СтрДлина("<BR>"));
		ТекстDTSTARTВРег = ВРег(ТекстDTSTART);
	КонецЕсли;	
	
	СтрокаДаты = "";
	
	СтрTZ = Префикс + ";TZID";
	СтрValue = Префикс + ";VALUE=DATE:";
	
	Если СтрНачинаетсяС(ТекстDTSTARTВРег, Префикс + ":") Тогда
		
		СтрокаДаты = Сред(ТекстDTSTART, СтрДлина(Префикс) + 1 + 1);
		
	ИначеЕсли СтрНачинаетсяС(ТекстDTSTARTВРег, СтрTZ) <> 0 Тогда
		
		ПервыйСимволПослеTZ = Сред(ТекстDTSTART, СтрДлина(СтрTZ) + 2, 1);
		
		Если ПервыйСимволПослеTZ = """" Тогда
			
			ПозицияНачалаКавычки = СтрНайти(ТекстDTSTART, """", НаправлениеПоиска.СНачала, СтрДлина(СтрTZ));
			Если ПозицияНачалаКавычки = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;	
			
			ПозицияКонцаКавычки = СтрНайти(ТекстDTSTART, """", НаправлениеПоиска.СНачала, ПозицияНачалаКавычки + 1);
			Если ПозицияКонцаКавычки = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;	
			
			СтрокаДаты = Сред(ТекстDTSTART, ПозицияКонцаКавычки + 1 + 1);
			
		Иначе // просто ищем ":"	
			
			ПозицияДвоеточия = СтрНайти(ТекстDTSTART, ":", НаправлениеПоиска.СНачала, СтрДлина(СтрTZ));
			Если ПозицияДвоеточия = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;	
			
			СтрокаДаты = Сред(ТекстDTSTART, ПозицияДвоеточия + 1);
			
		КонецЕсли;	
		
	ИначеЕсли СтрНачинаетсяС(ТекстDTSTARTВРег, СтрValue) Тогда	
		
		СтрокаДаты = Сред(ТекстDTSTART, СтрДлина(СтрValue) + 1);
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
	СтрокаДаты = СтрЗаменить(СтрокаДаты, "T", "");
	
	ЭтоВремяВUTC = Ложь;
	Если Найти(СтрокаДаты, "Z") <> 0 Тогда
		ЭтоВремяВUTC = Истина;
	КонецЕсли;
	
	СтрокаДаты = СтрЗаменить(СтрокаДаты, "Z", "");
	
	Попытка
		ДатаНачала = Дата(СтрокаДаты);
		
		Если ЭтоВремяВUTC Тогда
			ДатаНачала = МестноеВремя(ДатаНачала);
		Иначе
			Если ДельтаВремениВПриглашении <> ДельтаВремениТекущая Тогда
				ДатаНачала = ДатаНачала + (ДельтаВремениТекущая - ДельтаВремениВПриглашении);
			КонецЕсли;		
		КонецЕсли;	
		
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ДатаНачала;
	
КонецФункции	

Процедура ДобавитьATTENDEE(ТекстATTENDEE, УчастникиСтрокой, АдресУчастника = "", ПредставлениеУчастника = "")
	
	МассивСтрокПоля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстATTENDEE, ";");
	Для Каждого СтрокаВПоле Из МассивСтрокПоля Цикл
		
		Если Найти(ВРег(СтрокаВПоле), ВРег("CN=")) = 1 Тогда
			
			ИмяУчастника = Сред(СтрокаВПоле, СтрДлина("CN=") + 1);
			
			ПозицияMailto = Найти(ВРег(ИмяУчастника), ВРег("MAILTO:"));
			Если ПозицияMailto <> 0 Тогда	
				
				АдресУчастника = Сред(ИмяУчастника, ПозицияMailto + СтрДлина("MAILTO:"));
				ПредставлениеУчастника = Лев(ИмяУчастника, ПозицияMailto - 2);
				Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(АдресУчастника, ПредставлениеУчастника);
				ИмяУчастникаПолное = Строка(Адресат);
				
				Если Не ПустаяСтрока(УчастникиСтрокой) Тогда
					УчастникиСтрокой = УчастникиСтрокой + "; ";
				КонецЕсли;	
				
				ИмяУчастникаПолное = СтрЗаменить(ИмяУчастникаПолное, "<", "&lt;");
				ИмяУчастникаПолное = СтрЗаменить(ИмяУчастникаПолное, ">", "&gt;");
				УчастникиСтрокой = УчастникиСтрокой + ИмяУчастникаПолное;
				Прервать;
				
			Иначе	
				
				Если Не ПустаяСтрока(УчастникиСтрокой) Тогда
					УчастникиСтрокой = УчастникиСтрокой + "; ";
				КонецЕсли;	
				УчастникиСтрокой = УчастникиСтрокой + ИмяУчастника;
				Прервать;
				
			КонецЕсли;	
			
		ИначеЕсли Найти(ВРег(СтрокаВПоле), ВРег("RSVP=")) = 1 Тогда	
			
			ПозицияMailto = Найти(ВРег(СтрокаВПоле), ВРег("MAILTO:"));
			Если ПозицияMailto <> 0 Тогда	
				
				АдресУчастника = Сред(СтрокаВПоле, ПозицияMailto + СтрДлина("MAILTO:"));
				Адресат = ВстроеннаяПочтаСерверПовтИсп.ПолучитьПочтовогоАдресата(АдресУчастника, "");
				ИмяУчастника = Строка(Адресат);
				
				Если Не ПустаяСтрока(УчастникиСтрокой) Тогда
					УчастникиСтрокой = УчастникиСтрокой + "; ";
				КонецЕсли;	
				
				ИмяУчастника = СтрЗаменить(ИмяУчастника, "<", "&lt;");
				ИмяУчастника = СтрЗаменить(ИмяУчастника, ">", "&gt;");
				
				УчастникиСтрокой = УчастникиСтрокой + ИмяУчастника;
				Прервать;
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры	

Функция ЭтоДопустимыйСимвол(Символ)
	
	ДопустимыеСимволы = "ABCDEFGHIJKLMNOPQRSTUVWXYZ-";
	
	Если Найти(ДопустимыеСимволы, Символ) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

Функция ЭтоНачалоПоляКалендаря(СтрокаКалендаря)
	
	ЭтоНачалоПоля = Истина;
	БылиДопустимыеСимволы = Ложь;
	
	ПервыйСимволДопустимый = Ложь;
	Если СтрокаКалендаря <> "" Тогда
		Символ = Лев(СтрокаКалендаря, 1);
		ПервыйСимволДопустимый = ЭтоДопустимыйСимвол(Символ);
	КонецЕсли;	
	
	Для Поз = 0 По СтрДлина(СтрокаКалендаря) Цикл
		
		Символ = Сред(СтрокаКалендаря, Поз + 1 , 1);
		
		Если Не ЭтоДопустимыйСимвол(Символ) Тогда
			
			// корректное начало нового поля - сперва допустимый символ (не пробел),
			// потом все заглавные латинские, потом ";" или ":"
			// тут проверка на инверсию этого условия
			Если Не ПервыйСимволДопустимый Или Не БылиДопустимыеСимволы Или (Символ <> ":" И Символ <> ";") Тогда
			
				ЭтоНачалоПоля = Ложь;
				
			КонецЕсли;	
			
			Прервать;
			
		Иначе
			БылиДопустимыеСимволы = Истина;				
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если Не БылиДопустимыеСимволы Тогда
		ЭтоНачалоПоля = Ложь;
	КонецЕсли;	
	
	Возврат ЭтоНачалоПоля;
	
КонецФункции	

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("Тема");
	Поля.Добавить("Дата");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1 от %2'"), Данные.Тема, Строка(Данные.Дата));
	
КонецПроцедуры

#КонецЕсли